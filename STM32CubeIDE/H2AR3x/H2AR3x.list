
H2AR3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000176cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003540  08017788  08017788  00027788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801acc8  0801acc8  00030280  2**0
                  CONTENTS
  4 .ARM          00000000  0801acc8  0801acc8  00030280  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801acc8  0801acc8  00030280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801acc8  0801acc8  0002acc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801accc  0801accc  0002accc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0801acd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063fc  20000280  0801af50  00030280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000667c  0801af50  0003667c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054cbd  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000084a7  00000000  00000000  00084f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001aa21  00000000  00000000  0008d40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d48  00000000  00000000  000a7e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002080  00000000  00000000  000a9b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b308  00000000  00000000  000abbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00026c94  00000000  00000000  000c6f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00083dfd  00000000  00000000  000edb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00171991  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000626c  00000000  00000000  00171a0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000280 	.word	0x20000280
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08017770 	.word	0x08017770

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000284 	.word	0x20000284
 8000100:	08017770 	.word	0x08017770

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fcb9 	bl	8001db0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc11 	bl	8001c70 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fcab 	bl	8001db0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fca1 	bl	8001db0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc33 	bl	8001ce8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc29 	bl	8001ce8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fa1b 	bl	80008e8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f99d 	bl	80007fc <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fa0d 	bl	80008e8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa03 	bl	80008e8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9ab 	bl	800084c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f9a1 	bl	800084c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_lmul>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46ce      	mov	lr, r9
 800051c:	4647      	mov	r7, r8
 800051e:	0415      	lsls	r5, r2, #16
 8000520:	0c2d      	lsrs	r5, r5, #16
 8000522:	002e      	movs	r6, r5
 8000524:	b580      	push	{r7, lr}
 8000526:	0407      	lsls	r7, r0, #16
 8000528:	0c14      	lsrs	r4, r2, #16
 800052a:	0c3f      	lsrs	r7, r7, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	437e      	muls	r6, r7
 8000532:	435d      	muls	r5, r3
 8000534:	4367      	muls	r7, r4
 8000536:	4363      	muls	r3, r4
 8000538:	197f      	adds	r7, r7, r5
 800053a:	0c34      	lsrs	r4, r6, #16
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	469c      	mov	ip, r3
 8000540:	42a5      	cmp	r5, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x34>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	464b      	mov	r3, r9
 800054e:	4343      	muls	r3, r0
 8000550:	4351      	muls	r1, r2
 8000552:	0c25      	lsrs	r5, r4, #16
 8000554:	0436      	lsls	r6, r6, #16
 8000556:	4465      	add	r5, ip
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	0424      	lsls	r4, r4, #16
 800055c:	19a4      	adds	r4, r4, r6
 800055e:	195b      	adds	r3, r3, r5
 8000560:	1859      	adds	r1, r3, r1
 8000562:	0020      	movs	r0, r4
 8000564:	bc0c      	pop	{r2, r3}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	; 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f000 fcf9 	bl	8000f74 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fb2f 	bl	8000bec <__aeabi_fsub>
 800058e:	f000 fcf1 	bl	8000f74 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff73 	bl	8000490 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 fa3b 	bl	8002a2c <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 fed0 	bl	8002364 <__aeabi_dsub>
 80005c4:	f002 fa32 	bl	8002a2c <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	4657      	mov	r7, sl
 80005dc:	464e      	mov	r6, r9
 80005de:	4645      	mov	r5, r8
 80005e0:	46de      	mov	lr, fp
 80005e2:	0244      	lsls	r4, r0, #9
 80005e4:	b5e0      	push	{r5, r6, r7, lr}
 80005e6:	0046      	lsls	r6, r0, #1
 80005e8:	4688      	mov	r8, r1
 80005ea:	0a64      	lsrs	r4, r4, #9
 80005ec:	0e36      	lsrs	r6, r6, #24
 80005ee:	0fc7      	lsrs	r7, r0, #31
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d063      	beq.n	80006bc <__aeabi_fdiv+0xe4>
 80005f4:	2eff      	cmp	r6, #255	; 0xff
 80005f6:	d024      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	00e4      	lsls	r4, r4, #3
 80005fc:	04db      	lsls	r3, r3, #19
 80005fe:	431c      	orrs	r4, r3
 8000600:	2300      	movs	r3, #0
 8000602:	4699      	mov	r9, r3
 8000604:	469b      	mov	fp, r3
 8000606:	3e7f      	subs	r6, #127	; 0x7f
 8000608:	4643      	mov	r3, r8
 800060a:	4642      	mov	r2, r8
 800060c:	025d      	lsls	r5, r3, #9
 800060e:	0fd2      	lsrs	r2, r2, #31
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	0a6d      	lsrs	r5, r5, #9
 8000614:	0e1b      	lsrs	r3, r3, #24
 8000616:	4690      	mov	r8, r2
 8000618:	4692      	mov	sl, r2
 800061a:	d065      	beq.n	80006e8 <__aeabi_fdiv+0x110>
 800061c:	2bff      	cmp	r3, #255	; 0xff
 800061e:	d055      	beq.n	80006cc <__aeabi_fdiv+0xf4>
 8000620:	2280      	movs	r2, #128	; 0x80
 8000622:	2100      	movs	r1, #0
 8000624:	00ed      	lsls	r5, r5, #3
 8000626:	04d2      	lsls	r2, r2, #19
 8000628:	3b7f      	subs	r3, #127	; 0x7f
 800062a:	4315      	orrs	r5, r2
 800062c:	1af6      	subs	r6, r6, r3
 800062e:	4643      	mov	r3, r8
 8000630:	464a      	mov	r2, r9
 8000632:	407b      	eors	r3, r7
 8000634:	2a0f      	cmp	r2, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e08d      	b.n	8000756 <__aeabi_fdiv+0x17e>
 800063a:	486d      	ldr	r0, [pc, #436]	; (80007f0 <__aeabi_fdiv+0x218>)
 800063c:	0092      	lsls	r2, r2, #2
 800063e:	5882      	ldr	r2, [r0, r2]
 8000640:	4697      	mov	pc, r2
 8000642:	2c00      	cmp	r4, #0
 8000644:	d154      	bne.n	80006f0 <__aeabi_fdiv+0x118>
 8000646:	2308      	movs	r3, #8
 8000648:	4699      	mov	r9, r3
 800064a:	3b06      	subs	r3, #6
 800064c:	26ff      	movs	r6, #255	; 0xff
 800064e:	469b      	mov	fp, r3
 8000650:	e7da      	b.n	8000608 <__aeabi_fdiv+0x30>
 8000652:	2500      	movs	r5, #0
 8000654:	4653      	mov	r3, sl
 8000656:	2902      	cmp	r1, #2
 8000658:	d01b      	beq.n	8000692 <__aeabi_fdiv+0xba>
 800065a:	2903      	cmp	r1, #3
 800065c:	d100      	bne.n	8000660 <__aeabi_fdiv+0x88>
 800065e:	e0bf      	b.n	80007e0 <__aeabi_fdiv+0x208>
 8000660:	2901      	cmp	r1, #1
 8000662:	d028      	beq.n	80006b6 <__aeabi_fdiv+0xde>
 8000664:	0030      	movs	r0, r6
 8000666:	307f      	adds	r0, #127	; 0x7f
 8000668:	2800      	cmp	r0, #0
 800066a:	dd20      	ble.n	80006ae <__aeabi_fdiv+0xd6>
 800066c:	076a      	lsls	r2, r5, #29
 800066e:	d004      	beq.n	800067a <__aeabi_fdiv+0xa2>
 8000670:	220f      	movs	r2, #15
 8000672:	402a      	ands	r2, r5
 8000674:	2a04      	cmp	r2, #4
 8000676:	d000      	beq.n	800067a <__aeabi_fdiv+0xa2>
 8000678:	3504      	adds	r5, #4
 800067a:	012a      	lsls	r2, r5, #4
 800067c:	d503      	bpl.n	8000686 <__aeabi_fdiv+0xae>
 800067e:	0030      	movs	r0, r6
 8000680:	4a5c      	ldr	r2, [pc, #368]	; (80007f4 <__aeabi_fdiv+0x21c>)
 8000682:	3080      	adds	r0, #128	; 0x80
 8000684:	4015      	ands	r5, r2
 8000686:	28fe      	cmp	r0, #254	; 0xfe
 8000688:	dc03      	bgt.n	8000692 <__aeabi_fdiv+0xba>
 800068a:	01ac      	lsls	r4, r5, #6
 800068c:	0a64      	lsrs	r4, r4, #9
 800068e:	b2c2      	uxtb	r2, r0
 8000690:	e001      	b.n	8000696 <__aeabi_fdiv+0xbe>
 8000692:	22ff      	movs	r2, #255	; 0xff
 8000694:	2400      	movs	r4, #0
 8000696:	0264      	lsls	r4, r4, #9
 8000698:	05d2      	lsls	r2, r2, #23
 800069a:	0a60      	lsrs	r0, r4, #9
 800069c:	07db      	lsls	r3, r3, #31
 800069e:	4310      	orrs	r0, r2
 80006a0:	4318      	orrs	r0, r3
 80006a2:	bc3c      	pop	{r2, r3, r4, r5}
 80006a4:	4690      	mov	r8, r2
 80006a6:	4699      	mov	r9, r3
 80006a8:	46a2      	mov	sl, r4
 80006aa:	46ab      	mov	fp, r5
 80006ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ae:	2201      	movs	r2, #1
 80006b0:	1a10      	subs	r0, r2, r0
 80006b2:	281b      	cmp	r0, #27
 80006b4:	dd7c      	ble.n	80007b0 <__aeabi_fdiv+0x1d8>
 80006b6:	2200      	movs	r2, #0
 80006b8:	2400      	movs	r4, #0
 80006ba:	e7ec      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80006bc:	2c00      	cmp	r4, #0
 80006be:	d11d      	bne.n	80006fc <__aeabi_fdiv+0x124>
 80006c0:	2304      	movs	r3, #4
 80006c2:	4699      	mov	r9, r3
 80006c4:	3b03      	subs	r3, #3
 80006c6:	2600      	movs	r6, #0
 80006c8:	469b      	mov	fp, r3
 80006ca:	e79d      	b.n	8000608 <__aeabi_fdiv+0x30>
 80006cc:	3eff      	subs	r6, #255	; 0xff
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d120      	bne.n	8000714 <__aeabi_fdiv+0x13c>
 80006d2:	2102      	movs	r1, #2
 80006d4:	4643      	mov	r3, r8
 80006d6:	464a      	mov	r2, r9
 80006d8:	407b      	eors	r3, r7
 80006da:	430a      	orrs	r2, r1
 80006dc:	2a0f      	cmp	r2, #15
 80006de:	d8d8      	bhi.n	8000692 <__aeabi_fdiv+0xba>
 80006e0:	4845      	ldr	r0, [pc, #276]	; (80007f8 <__aeabi_fdiv+0x220>)
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	5882      	ldr	r2, [r0, r2]
 80006e6:	4697      	mov	pc, r2
 80006e8:	2d00      	cmp	r5, #0
 80006ea:	d119      	bne.n	8000720 <__aeabi_fdiv+0x148>
 80006ec:	2101      	movs	r1, #1
 80006ee:	e7f1      	b.n	80006d4 <__aeabi_fdiv+0xfc>
 80006f0:	230c      	movs	r3, #12
 80006f2:	4699      	mov	r9, r3
 80006f4:	3b09      	subs	r3, #9
 80006f6:	26ff      	movs	r6, #255	; 0xff
 80006f8:	469b      	mov	fp, r3
 80006fa:	e785      	b.n	8000608 <__aeabi_fdiv+0x30>
 80006fc:	0020      	movs	r0, r4
 80006fe:	f002 fb0d 	bl	8002d1c <__clzsi2>
 8000702:	2676      	movs	r6, #118	; 0x76
 8000704:	1f43      	subs	r3, r0, #5
 8000706:	409c      	lsls	r4, r3
 8000708:	2300      	movs	r3, #0
 800070a:	4276      	negs	r6, r6
 800070c:	1a36      	subs	r6, r6, r0
 800070e:	4699      	mov	r9, r3
 8000710:	469b      	mov	fp, r3
 8000712:	e779      	b.n	8000608 <__aeabi_fdiv+0x30>
 8000714:	464a      	mov	r2, r9
 8000716:	2303      	movs	r3, #3
 8000718:	431a      	orrs	r2, r3
 800071a:	4691      	mov	r9, r2
 800071c:	2103      	movs	r1, #3
 800071e:	e786      	b.n	800062e <__aeabi_fdiv+0x56>
 8000720:	0028      	movs	r0, r5
 8000722:	f002 fafb 	bl	8002d1c <__clzsi2>
 8000726:	1f43      	subs	r3, r0, #5
 8000728:	1836      	adds	r6, r6, r0
 800072a:	409d      	lsls	r5, r3
 800072c:	3676      	adds	r6, #118	; 0x76
 800072e:	2100      	movs	r1, #0
 8000730:	e77d      	b.n	800062e <__aeabi_fdiv+0x56>
 8000732:	2480      	movs	r4, #128	; 0x80
 8000734:	2300      	movs	r3, #0
 8000736:	03e4      	lsls	r4, r4, #15
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	e7ac      	b.n	8000696 <__aeabi_fdiv+0xbe>
 800073c:	2500      	movs	r5, #0
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	03db      	lsls	r3, r3, #15
 8000742:	421c      	tst	r4, r3
 8000744:	d028      	beq.n	8000798 <__aeabi_fdiv+0x1c0>
 8000746:	421d      	tst	r5, r3
 8000748:	d126      	bne.n	8000798 <__aeabi_fdiv+0x1c0>
 800074a:	432b      	orrs	r3, r5
 800074c:	025c      	lsls	r4, r3, #9
 800074e:	0a64      	lsrs	r4, r4, #9
 8000750:	4643      	mov	r3, r8
 8000752:	22ff      	movs	r2, #255	; 0xff
 8000754:	e79f      	b.n	8000696 <__aeabi_fdiv+0xbe>
 8000756:	0162      	lsls	r2, r4, #5
 8000758:	016c      	lsls	r4, r5, #5
 800075a:	42a2      	cmp	r2, r4
 800075c:	d224      	bcs.n	80007a8 <__aeabi_fdiv+0x1d0>
 800075e:	211b      	movs	r1, #27
 8000760:	2500      	movs	r5, #0
 8000762:	3e01      	subs	r6, #1
 8000764:	2701      	movs	r7, #1
 8000766:	0010      	movs	r0, r2
 8000768:	006d      	lsls	r5, r5, #1
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	2800      	cmp	r0, #0
 800076e:	db01      	blt.n	8000774 <__aeabi_fdiv+0x19c>
 8000770:	4294      	cmp	r4, r2
 8000772:	d801      	bhi.n	8000778 <__aeabi_fdiv+0x1a0>
 8000774:	1b12      	subs	r2, r2, r4
 8000776:	433d      	orrs	r5, r7
 8000778:	3901      	subs	r1, #1
 800077a:	2900      	cmp	r1, #0
 800077c:	d1f3      	bne.n	8000766 <__aeabi_fdiv+0x18e>
 800077e:	0014      	movs	r4, r2
 8000780:	1e62      	subs	r2, r4, #1
 8000782:	4194      	sbcs	r4, r2
 8000784:	4325      	orrs	r5, r4
 8000786:	e76d      	b.n	8000664 <__aeabi_fdiv+0x8c>
 8000788:	46ba      	mov	sl, r7
 800078a:	4659      	mov	r1, fp
 800078c:	0025      	movs	r5, r4
 800078e:	4653      	mov	r3, sl
 8000790:	2902      	cmp	r1, #2
 8000792:	d000      	beq.n	8000796 <__aeabi_fdiv+0x1be>
 8000794:	e761      	b.n	800065a <__aeabi_fdiv+0x82>
 8000796:	e77c      	b.n	8000692 <__aeabi_fdiv+0xba>
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	03db      	lsls	r3, r3, #15
 800079c:	431c      	orrs	r4, r3
 800079e:	0264      	lsls	r4, r4, #9
 80007a0:	0a64      	lsrs	r4, r4, #9
 80007a2:	003b      	movs	r3, r7
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	e776      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007a8:	1b12      	subs	r2, r2, r4
 80007aa:	211a      	movs	r1, #26
 80007ac:	2501      	movs	r5, #1
 80007ae:	e7d9      	b.n	8000764 <__aeabi_fdiv+0x18c>
 80007b0:	369e      	adds	r6, #158	; 0x9e
 80007b2:	002a      	movs	r2, r5
 80007b4:	40b5      	lsls	r5, r6
 80007b6:	002c      	movs	r4, r5
 80007b8:	40c2      	lsrs	r2, r0
 80007ba:	1e65      	subs	r5, r4, #1
 80007bc:	41ac      	sbcs	r4, r5
 80007be:	4314      	orrs	r4, r2
 80007c0:	0762      	lsls	r2, r4, #29
 80007c2:	d004      	beq.n	80007ce <__aeabi_fdiv+0x1f6>
 80007c4:	220f      	movs	r2, #15
 80007c6:	4022      	ands	r2, r4
 80007c8:	2a04      	cmp	r2, #4
 80007ca:	d000      	beq.n	80007ce <__aeabi_fdiv+0x1f6>
 80007cc:	3404      	adds	r4, #4
 80007ce:	0162      	lsls	r2, r4, #5
 80007d0:	d403      	bmi.n	80007da <__aeabi_fdiv+0x202>
 80007d2:	01a4      	lsls	r4, r4, #6
 80007d4:	0a64      	lsrs	r4, r4, #9
 80007d6:	2200      	movs	r2, #0
 80007d8:	e75d      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007da:	2201      	movs	r2, #1
 80007dc:	2400      	movs	r4, #0
 80007de:	e75a      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007e0:	2480      	movs	r4, #128	; 0x80
 80007e2:	03e4      	lsls	r4, r4, #15
 80007e4:	432c      	orrs	r4, r5
 80007e6:	0264      	lsls	r4, r4, #9
 80007e8:	0a64      	lsrs	r4, r4, #9
 80007ea:	22ff      	movs	r2, #255	; 0xff
 80007ec:	e753      	b.n	8000696 <__aeabi_fdiv+0xbe>
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	080177bc 	.word	0x080177bc
 80007f4:	f7ffffff 	.word	0xf7ffffff
 80007f8:	080177fc 	.word	0x080177fc

080007fc <__eqsf2>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	0042      	lsls	r2, r0, #1
 8000800:	024e      	lsls	r6, r1, #9
 8000802:	004c      	lsls	r4, r1, #1
 8000804:	0245      	lsls	r5, r0, #9
 8000806:	0a6d      	lsrs	r5, r5, #9
 8000808:	0e12      	lsrs	r2, r2, #24
 800080a:	0fc3      	lsrs	r3, r0, #31
 800080c:	0a76      	lsrs	r6, r6, #9
 800080e:	0e24      	lsrs	r4, r4, #24
 8000810:	0fc9      	lsrs	r1, r1, #31
 8000812:	2aff      	cmp	r2, #255	; 0xff
 8000814:	d00f      	beq.n	8000836 <__eqsf2+0x3a>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d011      	beq.n	800083e <__eqsf2+0x42>
 800081a:	2001      	movs	r0, #1
 800081c:	42a2      	cmp	r2, r4
 800081e:	d000      	beq.n	8000822 <__eqsf2+0x26>
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	42b5      	cmp	r5, r6
 8000824:	d1fc      	bne.n	8000820 <__eqsf2+0x24>
 8000826:	428b      	cmp	r3, r1
 8000828:	d00d      	beq.n	8000846 <__eqsf2+0x4a>
 800082a:	2a00      	cmp	r2, #0
 800082c:	d1f8      	bne.n	8000820 <__eqsf2+0x24>
 800082e:	0028      	movs	r0, r5
 8000830:	1e45      	subs	r5, r0, #1
 8000832:	41a8      	sbcs	r0, r5
 8000834:	e7f4      	b.n	8000820 <__eqsf2+0x24>
 8000836:	2001      	movs	r0, #1
 8000838:	2d00      	cmp	r5, #0
 800083a:	d1f1      	bne.n	8000820 <__eqsf2+0x24>
 800083c:	e7eb      	b.n	8000816 <__eqsf2+0x1a>
 800083e:	2001      	movs	r0, #1
 8000840:	2e00      	cmp	r6, #0
 8000842:	d1ed      	bne.n	8000820 <__eqsf2+0x24>
 8000844:	e7e9      	b.n	800081a <__eqsf2+0x1e>
 8000846:	2000      	movs	r0, #0
 8000848:	e7ea      	b.n	8000820 <__eqsf2+0x24>
 800084a:	46c0      	nop			; (mov r8, r8)

0800084c <__gesf2>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	004a      	lsls	r2, r1, #1
 8000850:	024e      	lsls	r6, r1, #9
 8000852:	0245      	lsls	r5, r0, #9
 8000854:	0044      	lsls	r4, r0, #1
 8000856:	0a6d      	lsrs	r5, r5, #9
 8000858:	0e24      	lsrs	r4, r4, #24
 800085a:	0fc3      	lsrs	r3, r0, #31
 800085c:	0a76      	lsrs	r6, r6, #9
 800085e:	0e12      	lsrs	r2, r2, #24
 8000860:	0fc9      	lsrs	r1, r1, #31
 8000862:	2cff      	cmp	r4, #255	; 0xff
 8000864:	d015      	beq.n	8000892 <__gesf2+0x46>
 8000866:	2aff      	cmp	r2, #255	; 0xff
 8000868:	d00e      	beq.n	8000888 <__gesf2+0x3c>
 800086a:	2c00      	cmp	r4, #0
 800086c:	d115      	bne.n	800089a <__gesf2+0x4e>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d101      	bne.n	8000876 <__gesf2+0x2a>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d01c      	beq.n	80008b0 <__gesf2+0x64>
 8000876:	2d00      	cmp	r5, #0
 8000878:	d014      	beq.n	80008a4 <__gesf2+0x58>
 800087a:	428b      	cmp	r3, r1
 800087c:	d027      	beq.n	80008ce <__gesf2+0x82>
 800087e:	2002      	movs	r0, #2
 8000880:	3b01      	subs	r3, #1
 8000882:	4018      	ands	r0, r3
 8000884:	3801      	subs	r0, #1
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	2e00      	cmp	r6, #0
 800088a:	d0ee      	beq.n	800086a <__gesf2+0x1e>
 800088c:	2002      	movs	r0, #2
 800088e:	4240      	negs	r0, r0
 8000890:	e7f9      	b.n	8000886 <__gesf2+0x3a>
 8000892:	2d00      	cmp	r5, #0
 8000894:	d1fa      	bne.n	800088c <__gesf2+0x40>
 8000896:	2aff      	cmp	r2, #255	; 0xff
 8000898:	d00e      	beq.n	80008b8 <__gesf2+0x6c>
 800089a:	2a00      	cmp	r2, #0
 800089c:	d10e      	bne.n	80008bc <__gesf2+0x70>
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d0ed      	beq.n	800087e <__gesf2+0x32>
 80008a2:	e00b      	b.n	80008bc <__gesf2+0x70>
 80008a4:	2301      	movs	r3, #1
 80008a6:	3901      	subs	r1, #1
 80008a8:	4399      	bics	r1, r3
 80008aa:	0008      	movs	r0, r1
 80008ac:	3001      	adds	r0, #1
 80008ae:	e7ea      	b.n	8000886 <__gesf2+0x3a>
 80008b0:	2000      	movs	r0, #0
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d0e7      	beq.n	8000886 <__gesf2+0x3a>
 80008b6:	e7e2      	b.n	800087e <__gesf2+0x32>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d1e7      	bne.n	800088c <__gesf2+0x40>
 80008bc:	428b      	cmp	r3, r1
 80008be:	d1de      	bne.n	800087e <__gesf2+0x32>
 80008c0:	4294      	cmp	r4, r2
 80008c2:	dd05      	ble.n	80008d0 <__gesf2+0x84>
 80008c4:	2102      	movs	r1, #2
 80008c6:	1e58      	subs	r0, r3, #1
 80008c8:	4008      	ands	r0, r1
 80008ca:	3801      	subs	r0, #1
 80008cc:	e7db      	b.n	8000886 <__gesf2+0x3a>
 80008ce:	2400      	movs	r4, #0
 80008d0:	42a2      	cmp	r2, r4
 80008d2:	dc04      	bgt.n	80008de <__gesf2+0x92>
 80008d4:	42b5      	cmp	r5, r6
 80008d6:	d8d2      	bhi.n	800087e <__gesf2+0x32>
 80008d8:	2000      	movs	r0, #0
 80008da:	42b5      	cmp	r5, r6
 80008dc:	d2d3      	bcs.n	8000886 <__gesf2+0x3a>
 80008de:	1e58      	subs	r0, r3, #1
 80008e0:	2301      	movs	r3, #1
 80008e2:	4398      	bics	r0, r3
 80008e4:	3001      	adds	r0, #1
 80008e6:	e7ce      	b.n	8000886 <__gesf2+0x3a>

080008e8 <__lesf2>:
 80008e8:	b530      	push	{r4, r5, lr}
 80008ea:	0042      	lsls	r2, r0, #1
 80008ec:	0244      	lsls	r4, r0, #9
 80008ee:	024d      	lsls	r5, r1, #9
 80008f0:	0fc3      	lsrs	r3, r0, #31
 80008f2:	0048      	lsls	r0, r1, #1
 80008f4:	0a64      	lsrs	r4, r4, #9
 80008f6:	0e12      	lsrs	r2, r2, #24
 80008f8:	0a6d      	lsrs	r5, r5, #9
 80008fa:	0e00      	lsrs	r0, r0, #24
 80008fc:	0fc9      	lsrs	r1, r1, #31
 80008fe:	2aff      	cmp	r2, #255	; 0xff
 8000900:	d012      	beq.n	8000928 <__lesf2+0x40>
 8000902:	28ff      	cmp	r0, #255	; 0xff
 8000904:	d00c      	beq.n	8000920 <__lesf2+0x38>
 8000906:	2a00      	cmp	r2, #0
 8000908:	d112      	bne.n	8000930 <__lesf2+0x48>
 800090a:	2800      	cmp	r0, #0
 800090c:	d119      	bne.n	8000942 <__lesf2+0x5a>
 800090e:	2d00      	cmp	r5, #0
 8000910:	d117      	bne.n	8000942 <__lesf2+0x5a>
 8000912:	2c00      	cmp	r4, #0
 8000914:	d02b      	beq.n	800096e <__lesf2+0x86>
 8000916:	2002      	movs	r0, #2
 8000918:	3b01      	subs	r3, #1
 800091a:	4018      	ands	r0, r3
 800091c:	3801      	subs	r0, #1
 800091e:	e026      	b.n	800096e <__lesf2+0x86>
 8000920:	2d00      	cmp	r5, #0
 8000922:	d0f0      	beq.n	8000906 <__lesf2+0x1e>
 8000924:	2002      	movs	r0, #2
 8000926:	e022      	b.n	800096e <__lesf2+0x86>
 8000928:	2c00      	cmp	r4, #0
 800092a:	d1fb      	bne.n	8000924 <__lesf2+0x3c>
 800092c:	28ff      	cmp	r0, #255	; 0xff
 800092e:	d01f      	beq.n	8000970 <__lesf2+0x88>
 8000930:	2800      	cmp	r0, #0
 8000932:	d11f      	bne.n	8000974 <__lesf2+0x8c>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d11d      	bne.n	8000974 <__lesf2+0x8c>
 8000938:	2002      	movs	r0, #2
 800093a:	3b01      	subs	r3, #1
 800093c:	4018      	ands	r0, r3
 800093e:	3801      	subs	r0, #1
 8000940:	e015      	b.n	800096e <__lesf2+0x86>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d00e      	beq.n	8000964 <__lesf2+0x7c>
 8000946:	428b      	cmp	r3, r1
 8000948:	d1e5      	bne.n	8000916 <__lesf2+0x2e>
 800094a:	2200      	movs	r2, #0
 800094c:	4290      	cmp	r0, r2
 800094e:	dc04      	bgt.n	800095a <__lesf2+0x72>
 8000950:	42ac      	cmp	r4, r5
 8000952:	d8e0      	bhi.n	8000916 <__lesf2+0x2e>
 8000954:	2000      	movs	r0, #0
 8000956:	42ac      	cmp	r4, r5
 8000958:	d209      	bcs.n	800096e <__lesf2+0x86>
 800095a:	1e58      	subs	r0, r3, #1
 800095c:	2301      	movs	r3, #1
 800095e:	4398      	bics	r0, r3
 8000960:	3001      	adds	r0, #1
 8000962:	e004      	b.n	800096e <__lesf2+0x86>
 8000964:	2301      	movs	r3, #1
 8000966:	3901      	subs	r1, #1
 8000968:	4399      	bics	r1, r3
 800096a:	0008      	movs	r0, r1
 800096c:	3001      	adds	r0, #1
 800096e:	bd30      	pop	{r4, r5, pc}
 8000970:	2d00      	cmp	r5, #0
 8000972:	d1d7      	bne.n	8000924 <__lesf2+0x3c>
 8000974:	428b      	cmp	r3, r1
 8000976:	d1ce      	bne.n	8000916 <__lesf2+0x2e>
 8000978:	4282      	cmp	r2, r0
 800097a:	dde7      	ble.n	800094c <__lesf2+0x64>
 800097c:	2102      	movs	r1, #2
 800097e:	1e58      	subs	r0, r3, #1
 8000980:	4008      	ands	r0, r1
 8000982:	3801      	subs	r0, #1
 8000984:	e7f3      	b.n	800096e <__lesf2+0x86>
 8000986:	46c0      	nop			; (mov r8, r8)

08000988 <__aeabi_fmul>:
 8000988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098a:	464e      	mov	r6, r9
 800098c:	4657      	mov	r7, sl
 800098e:	4645      	mov	r5, r8
 8000990:	46de      	mov	lr, fp
 8000992:	b5e0      	push	{r5, r6, r7, lr}
 8000994:	0243      	lsls	r3, r0, #9
 8000996:	0a5b      	lsrs	r3, r3, #9
 8000998:	0045      	lsls	r5, r0, #1
 800099a:	b083      	sub	sp, #12
 800099c:	1c0f      	adds	r7, r1, #0
 800099e:	4699      	mov	r9, r3
 80009a0:	0e2d      	lsrs	r5, r5, #24
 80009a2:	0fc6      	lsrs	r6, r0, #31
 80009a4:	2d00      	cmp	r5, #0
 80009a6:	d057      	beq.n	8000a58 <__aeabi_fmul+0xd0>
 80009a8:	2dff      	cmp	r5, #255	; 0xff
 80009aa:	d024      	beq.n	80009f6 <__aeabi_fmul+0x6e>
 80009ac:	2080      	movs	r0, #128	; 0x80
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	04c0      	lsls	r0, r0, #19
 80009b2:	4318      	orrs	r0, r3
 80009b4:	2300      	movs	r3, #0
 80009b6:	4681      	mov	r9, r0
 80009b8:	469a      	mov	sl, r3
 80009ba:	469b      	mov	fp, r3
 80009bc:	3d7f      	subs	r5, #127	; 0x7f
 80009be:	027c      	lsls	r4, r7, #9
 80009c0:	007a      	lsls	r2, r7, #1
 80009c2:	0ffb      	lsrs	r3, r7, #31
 80009c4:	0a64      	lsrs	r4, r4, #9
 80009c6:	0e12      	lsrs	r2, r2, #24
 80009c8:	4698      	mov	r8, r3
 80009ca:	d023      	beq.n	8000a14 <__aeabi_fmul+0x8c>
 80009cc:	2aff      	cmp	r2, #255	; 0xff
 80009ce:	d04b      	beq.n	8000a68 <__aeabi_fmul+0xe0>
 80009d0:	00e3      	lsls	r3, r4, #3
 80009d2:	2480      	movs	r4, #128	; 0x80
 80009d4:	2000      	movs	r0, #0
 80009d6:	04e4      	lsls	r4, r4, #19
 80009d8:	3a7f      	subs	r2, #127	; 0x7f
 80009da:	431c      	orrs	r4, r3
 80009dc:	18ad      	adds	r5, r5, r2
 80009de:	1c6b      	adds	r3, r5, #1
 80009e0:	4647      	mov	r7, r8
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	4653      	mov	r3, sl
 80009e6:	4077      	eors	r7, r6
 80009e8:	003a      	movs	r2, r7
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d848      	bhi.n	8000a80 <__aeabi_fmul+0xf8>
 80009ee:	497d      	ldr	r1, [pc, #500]	; (8000be4 <__aeabi_fmul+0x25c>)
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	58cb      	ldr	r3, [r1, r3]
 80009f4:	469f      	mov	pc, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d000      	beq.n	80009fc <__aeabi_fmul+0x74>
 80009fa:	e085      	b.n	8000b08 <__aeabi_fmul+0x180>
 80009fc:	3308      	adds	r3, #8
 80009fe:	469a      	mov	sl, r3
 8000a00:	3b06      	subs	r3, #6
 8000a02:	469b      	mov	fp, r3
 8000a04:	027c      	lsls	r4, r7, #9
 8000a06:	007a      	lsls	r2, r7, #1
 8000a08:	0ffb      	lsrs	r3, r7, #31
 8000a0a:	25ff      	movs	r5, #255	; 0xff
 8000a0c:	0a64      	lsrs	r4, r4, #9
 8000a0e:	0e12      	lsrs	r2, r2, #24
 8000a10:	4698      	mov	r8, r3
 8000a12:	d1db      	bne.n	80009cc <__aeabi_fmul+0x44>
 8000a14:	2c00      	cmp	r4, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fmul+0x92>
 8000a18:	e090      	b.n	8000b3c <__aeabi_fmul+0x1b4>
 8000a1a:	4652      	mov	r2, sl
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	4692      	mov	sl, r2
 8000a22:	2001      	movs	r0, #1
 8000a24:	e7db      	b.n	80009de <__aeabi_fmul+0x56>
 8000a26:	464c      	mov	r4, r9
 8000a28:	4658      	mov	r0, fp
 8000a2a:	0017      	movs	r7, r2
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d024      	beq.n	8000a7a <__aeabi_fmul+0xf2>
 8000a30:	2803      	cmp	r0, #3
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fmul+0xae>
 8000a34:	e0cf      	b.n	8000bd6 <__aeabi_fmul+0x24e>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2801      	cmp	r0, #1
 8000a3c:	d14d      	bne.n	8000ada <__aeabi_fmul+0x152>
 8000a3e:	0258      	lsls	r0, r3, #9
 8000a40:	05d2      	lsls	r2, r2, #23
 8000a42:	0a40      	lsrs	r0, r0, #9
 8000a44:	07ff      	lsls	r7, r7, #31
 8000a46:	4310      	orrs	r0, r2
 8000a48:	4338      	orrs	r0, r7
 8000a4a:	b003      	add	sp, #12
 8000a4c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4699      	mov	r9, r3
 8000a52:	46a2      	mov	sl, r4
 8000a54:	46ab      	mov	fp, r5
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d15b      	bne.n	8000b14 <__aeabi_fmul+0x18c>
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	469a      	mov	sl, r3
 8000a60:	3b03      	subs	r3, #3
 8000a62:	2500      	movs	r5, #0
 8000a64:	469b      	mov	fp, r3
 8000a66:	e7aa      	b.n	80009be <__aeabi_fmul+0x36>
 8000a68:	35ff      	adds	r5, #255	; 0xff
 8000a6a:	2c00      	cmp	r4, #0
 8000a6c:	d160      	bne.n	8000b30 <__aeabi_fmul+0x1a8>
 8000a6e:	4652      	mov	r2, sl
 8000a70:	2302      	movs	r3, #2
 8000a72:	431a      	orrs	r2, r3
 8000a74:	4692      	mov	sl, r2
 8000a76:	2002      	movs	r0, #2
 8000a78:	e7b1      	b.n	80009de <__aeabi_fmul+0x56>
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e7de      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000a80:	464b      	mov	r3, r9
 8000a82:	0c1b      	lsrs	r3, r3, #16
 8000a84:	469c      	mov	ip, r3
 8000a86:	464b      	mov	r3, r9
 8000a88:	0426      	lsls	r6, r4, #16
 8000a8a:	0c36      	lsrs	r6, r6, #16
 8000a8c:	0418      	lsls	r0, r3, #16
 8000a8e:	4661      	mov	r1, ip
 8000a90:	0033      	movs	r3, r6
 8000a92:	0c22      	lsrs	r2, r4, #16
 8000a94:	4664      	mov	r4, ip
 8000a96:	0c00      	lsrs	r0, r0, #16
 8000a98:	4343      	muls	r3, r0
 8000a9a:	434e      	muls	r6, r1
 8000a9c:	4350      	muls	r0, r2
 8000a9e:	4354      	muls	r4, r2
 8000aa0:	1980      	adds	r0, r0, r6
 8000aa2:	0c1a      	lsrs	r2, r3, #16
 8000aa4:	1812      	adds	r2, r2, r0
 8000aa6:	4296      	cmp	r6, r2
 8000aa8:	d903      	bls.n	8000ab2 <__aeabi_fmul+0x12a>
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4464      	add	r4, ip
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	0410      	lsls	r0, r2, #16
 8000ab8:	18c0      	adds	r0, r0, r3
 8000aba:	0183      	lsls	r3, r0, #6
 8000abc:	1e5e      	subs	r6, r3, #1
 8000abe:	41b3      	sbcs	r3, r6
 8000ac0:	0e80      	lsrs	r0, r0, #26
 8000ac2:	4318      	orrs	r0, r3
 8000ac4:	0c13      	lsrs	r3, r2, #16
 8000ac6:	191b      	adds	r3, r3, r4
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	4303      	orrs	r3, r0
 8000acc:	001c      	movs	r4, r3
 8000ace:	0123      	lsls	r3, r4, #4
 8000ad0:	d579      	bpl.n	8000bc6 <__aeabi_fmul+0x23e>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	0862      	lsrs	r2, r4, #1
 8000ad6:	401c      	ands	r4, r3
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	9a01      	ldr	r2, [sp, #4]
 8000adc:	327f      	adds	r2, #127	; 0x7f
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	dd4d      	ble.n	8000b7e <__aeabi_fmul+0x1f6>
 8000ae2:	0763      	lsls	r3, r4, #29
 8000ae4:	d004      	beq.n	8000af0 <__aeabi_fmul+0x168>
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	4023      	ands	r3, r4
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fmul+0x168>
 8000aee:	3404      	adds	r4, #4
 8000af0:	0123      	lsls	r3, r4, #4
 8000af2:	d503      	bpl.n	8000afc <__aeabi_fmul+0x174>
 8000af4:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <__aeabi_fmul+0x260>)
 8000af6:	9a01      	ldr	r2, [sp, #4]
 8000af8:	401c      	ands	r4, r3
 8000afa:	3280      	adds	r2, #128	; 0x80
 8000afc:	2afe      	cmp	r2, #254	; 0xfe
 8000afe:	dcbc      	bgt.n	8000a7a <__aeabi_fmul+0xf2>
 8000b00:	01a3      	lsls	r3, r4, #6
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	e79a      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000b08:	230c      	movs	r3, #12
 8000b0a:	469a      	mov	sl, r3
 8000b0c:	3b09      	subs	r3, #9
 8000b0e:	25ff      	movs	r5, #255	; 0xff
 8000b10:	469b      	mov	fp, r3
 8000b12:	e754      	b.n	80009be <__aeabi_fmul+0x36>
 8000b14:	0018      	movs	r0, r3
 8000b16:	f002 f901 	bl	8002d1c <__clzsi2>
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	1f43      	subs	r3, r0, #5
 8000b1e:	2576      	movs	r5, #118	; 0x76
 8000b20:	409a      	lsls	r2, r3
 8000b22:	2300      	movs	r3, #0
 8000b24:	426d      	negs	r5, r5
 8000b26:	4691      	mov	r9, r2
 8000b28:	1a2d      	subs	r5, r5, r0
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	469b      	mov	fp, r3
 8000b2e:	e746      	b.n	80009be <__aeabi_fmul+0x36>
 8000b30:	4652      	mov	r2, sl
 8000b32:	2303      	movs	r3, #3
 8000b34:	431a      	orrs	r2, r3
 8000b36:	4692      	mov	sl, r2
 8000b38:	2003      	movs	r0, #3
 8000b3a:	e750      	b.n	80009de <__aeabi_fmul+0x56>
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	f002 f8ed 	bl	8002d1c <__clzsi2>
 8000b42:	1f43      	subs	r3, r0, #5
 8000b44:	1a2d      	subs	r5, r5, r0
 8000b46:	409c      	lsls	r4, r3
 8000b48:	3d76      	subs	r5, #118	; 0x76
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	e747      	b.n	80009de <__aeabi_fmul+0x56>
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	2700      	movs	r7, #0
 8000b52:	03db      	lsls	r3, r3, #15
 8000b54:	22ff      	movs	r2, #255	; 0xff
 8000b56:	e772      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000b58:	4642      	mov	r2, r8
 8000b5a:	e766      	b.n	8000a2a <__aeabi_fmul+0xa2>
 8000b5c:	464c      	mov	r4, r9
 8000b5e:	0032      	movs	r2, r6
 8000b60:	4658      	mov	r0, fp
 8000b62:	e762      	b.n	8000a2a <__aeabi_fmul+0xa2>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	464a      	mov	r2, r9
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	421a      	tst	r2, r3
 8000b6c:	d022      	beq.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b6e:	421c      	tst	r4, r3
 8000b70:	d120      	bne.n	8000bb4 <__aeabi_fmul+0x22c>
 8000b72:	4323      	orrs	r3, r4
 8000b74:	025b      	lsls	r3, r3, #9
 8000b76:	0a5b      	lsrs	r3, r3, #9
 8000b78:	4647      	mov	r7, r8
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	e75f      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000b7e:	2301      	movs	r3, #1
 8000b80:	1a9a      	subs	r2, r3, r2
 8000b82:	2a1b      	cmp	r2, #27
 8000b84:	dc21      	bgt.n	8000bca <__aeabi_fmul+0x242>
 8000b86:	0023      	movs	r3, r4
 8000b88:	9901      	ldr	r1, [sp, #4]
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	319e      	adds	r1, #158	; 0x9e
 8000b8e:	408c      	lsls	r4, r1
 8000b90:	001a      	movs	r2, r3
 8000b92:	0023      	movs	r3, r4
 8000b94:	1e5c      	subs	r4, r3, #1
 8000b96:	41a3      	sbcs	r3, r4
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	075a      	lsls	r2, r3, #29
 8000b9c:	d004      	beq.n	8000ba8 <__aeabi_fmul+0x220>
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	2a04      	cmp	r2, #4
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_fmul+0x220>
 8000ba6:	3304      	adds	r3, #4
 8000ba8:	015a      	lsls	r2, r3, #5
 8000baa:	d411      	bmi.n	8000bd0 <__aeabi_fmul+0x248>
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	0a5b      	lsrs	r3, r3, #9
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	e744      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	464a      	mov	r2, r9
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	0037      	movs	r7, r6
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	e73b      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bc6:	9501      	str	r5, [sp, #4]
 8000bc8:	e787      	b.n	8000ada <__aeabi_fmul+0x152>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e736      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e733      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	22ff      	movs	r2, #255	; 0xff
 8000be2:	e72c      	b.n	8000a3e <__aeabi_fmul+0xb6>
 8000be4:	0801783c 	.word	0x0801783c
 8000be8:	f7ffffff 	.word	0xf7ffffff

08000bec <__aeabi_fsub>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	4647      	mov	r7, r8
 8000bf0:	46ce      	mov	lr, r9
 8000bf2:	0044      	lsls	r4, r0, #1
 8000bf4:	0fc2      	lsrs	r2, r0, #31
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	0247      	lsls	r7, r0, #9
 8000bfa:	0248      	lsls	r0, r1, #9
 8000bfc:	0a40      	lsrs	r0, r0, #9
 8000bfe:	4684      	mov	ip, r0
 8000c00:	4666      	mov	r6, ip
 8000c02:	0048      	lsls	r0, r1, #1
 8000c04:	0a7f      	lsrs	r7, r7, #9
 8000c06:	0e24      	lsrs	r4, r4, #24
 8000c08:	00f6      	lsls	r6, r6, #3
 8000c0a:	0025      	movs	r5, r4
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	00fb      	lsls	r3, r7, #3
 8000c10:	0e00      	lsrs	r0, r0, #24
 8000c12:	0fc9      	lsrs	r1, r1, #31
 8000c14:	46b1      	mov	r9, r6
 8000c16:	28ff      	cmp	r0, #255	; 0xff
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fsub+0x30>
 8000c1a:	e085      	b.n	8000d28 <__aeabi_fsub+0x13c>
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	4071      	eors	r1, r6
 8000c20:	1a26      	subs	r6, r4, r0
 8000c22:	4291      	cmp	r1, r2
 8000c24:	d057      	beq.n	8000cd6 <__aeabi_fsub+0xea>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	dd43      	ble.n	8000cb2 <__aeabi_fsub+0xc6>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fsub+0x44>
 8000c2e:	e07f      	b.n	8000d30 <__aeabi_fsub+0x144>
 8000c30:	4649      	mov	r1, r9
 8000c32:	2900      	cmp	r1, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x4c>
 8000c36:	e0aa      	b.n	8000d8e <__aeabi_fsub+0x1a2>
 8000c38:	3e01      	subs	r6, #1
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d000      	beq.n	8000c40 <__aeabi_fsub+0x54>
 8000c3e:	e0f7      	b.n	8000e30 <__aeabi_fsub+0x244>
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	015a      	lsls	r2, r3, #5
 8000c44:	d400      	bmi.n	8000c48 <__aeabi_fsub+0x5c>
 8000c46:	e08b      	b.n	8000d60 <__aeabi_fsub+0x174>
 8000c48:	019b      	lsls	r3, r3, #6
 8000c4a:	099c      	lsrs	r4, r3, #6
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	f002 f865 	bl	8002d1c <__clzsi2>
 8000c52:	3805      	subs	r0, #5
 8000c54:	4084      	lsls	r4, r0
 8000c56:	4285      	cmp	r5, r0
 8000c58:	dd00      	ble.n	8000c5c <__aeabi_fsub+0x70>
 8000c5a:	e0d3      	b.n	8000e04 <__aeabi_fsub+0x218>
 8000c5c:	1b45      	subs	r5, r0, r5
 8000c5e:	0023      	movs	r3, r4
 8000c60:	2020      	movs	r0, #32
 8000c62:	3501      	adds	r5, #1
 8000c64:	40eb      	lsrs	r3, r5
 8000c66:	1b45      	subs	r5, r0, r5
 8000c68:	40ac      	lsls	r4, r5
 8000c6a:	1e62      	subs	r2, r4, #1
 8000c6c:	4194      	sbcs	r4, r2
 8000c6e:	4323      	orrs	r3, r4
 8000c70:	2407      	movs	r4, #7
 8000c72:	2500      	movs	r5, #0
 8000c74:	401c      	ands	r4, r3
 8000c76:	2201      	movs	r2, #1
 8000c78:	4641      	mov	r1, r8
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_fsub+0x9e>
 8000c80:	210f      	movs	r1, #15
 8000c82:	4019      	ands	r1, r3
 8000c84:	2904      	cmp	r1, #4
 8000c86:	d000      	beq.n	8000c8a <__aeabi_fsub+0x9e>
 8000c88:	3304      	adds	r3, #4
 8000c8a:	0159      	lsls	r1, r3, #5
 8000c8c:	d400      	bmi.n	8000c90 <__aeabi_fsub+0xa4>
 8000c8e:	e080      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000c90:	3501      	adds	r5, #1
 8000c92:	b2ec      	uxtb	r4, r5
 8000c94:	2dff      	cmp	r5, #255	; 0xff
 8000c96:	d000      	beq.n	8000c9a <__aeabi_fsub+0xae>
 8000c98:	e0a3      	b.n	8000de2 <__aeabi_fsub+0x1f6>
 8000c9a:	24ff      	movs	r4, #255	; 0xff
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	025b      	lsls	r3, r3, #9
 8000ca0:	05e4      	lsls	r4, r4, #23
 8000ca2:	0a58      	lsrs	r0, r3, #9
 8000ca4:	07d2      	lsls	r2, r2, #31
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	4310      	orrs	r0, r2
 8000caa:	bc0c      	pop	{r2, r3}
 8000cac:	4690      	mov	r8, r2
 8000cae:	4699      	mov	r9, r3
 8000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d174      	bne.n	8000da0 <__aeabi_fsub+0x1b4>
 8000cb6:	1c60      	adds	r0, r4, #1
 8000cb8:	b2c0      	uxtb	r0, r0
 8000cba:	2801      	cmp	r0, #1
 8000cbc:	dc00      	bgt.n	8000cc0 <__aeabi_fsub+0xd4>
 8000cbe:	e0a7      	b.n	8000e10 <__aeabi_fsub+0x224>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	1a9c      	subs	r4, r3, r2
 8000cc4:	0162      	lsls	r2, r4, #5
 8000cc6:	d500      	bpl.n	8000cca <__aeabi_fsub+0xde>
 8000cc8:	e0b6      	b.n	8000e38 <__aeabi_fsub+0x24c>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d1be      	bne.n	8000c4c <__aeabi_fsub+0x60>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e7e3      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	dc00      	bgt.n	8000cdc <__aeabi_fsub+0xf0>
 8000cda:	e085      	b.n	8000de8 <__aeabi_fsub+0x1fc>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d046      	beq.n	8000d6e <__aeabi_fsub+0x182>
 8000ce0:	2cff      	cmp	r4, #255	; 0xff
 8000ce2:	d049      	beq.n	8000d78 <__aeabi_fsub+0x18c>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	04d2      	lsls	r2, r2, #19
 8000cea:	4310      	orrs	r0, r2
 8000cec:	4681      	mov	r9, r0
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2e1b      	cmp	r6, #27
 8000cf2:	dc09      	bgt.n	8000d08 <__aeabi_fsub+0x11c>
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	464c      	mov	r4, r9
 8000cf8:	1b80      	subs	r0, r0, r6
 8000cfa:	4084      	lsls	r4, r0
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	0020      	movs	r0, r4
 8000d00:	40f2      	lsrs	r2, r6
 8000d02:	1e44      	subs	r4, r0, #1
 8000d04:	41a0      	sbcs	r0, r4
 8000d06:	4302      	orrs	r2, r0
 8000d08:	189b      	adds	r3, r3, r2
 8000d0a:	015a      	lsls	r2, r3, #5
 8000d0c:	d528      	bpl.n	8000d60 <__aeabi_fsub+0x174>
 8000d0e:	3501      	adds	r5, #1
 8000d10:	2dff      	cmp	r5, #255	; 0xff
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x12a>
 8000d14:	e0a8      	b.n	8000e68 <__aeabi_fsub+0x27c>
 8000d16:	2201      	movs	r2, #1
 8000d18:	2407      	movs	r4, #7
 8000d1a:	4994      	ldr	r1, [pc, #592]	; (8000f6c <__aeabi_fsub+0x380>)
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	400b      	ands	r3, r1
 8000d22:	4313      	orrs	r3, r2
 8000d24:	401c      	ands	r4, r3
 8000d26:	e7a6      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_fsub+0x142>
 8000d2c:	e778      	b.n	8000c20 <__aeabi_fsub+0x34>
 8000d2e:	e775      	b.n	8000c1c <__aeabi_fsub+0x30>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d054      	beq.n	8000dde <__aeabi_fsub+0x1f2>
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	4649      	mov	r1, r9
 8000d38:	04d2      	lsls	r2, r2, #19
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	4689      	mov	r9, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2e1b      	cmp	r6, #27
 8000d42:	dc09      	bgt.n	8000d58 <__aeabi_fsub+0x16c>
 8000d44:	2120      	movs	r1, #32
 8000d46:	4648      	mov	r0, r9
 8000d48:	1b89      	subs	r1, r1, r6
 8000d4a:	4088      	lsls	r0, r1
 8000d4c:	464a      	mov	r2, r9
 8000d4e:	0001      	movs	r1, r0
 8000d50:	40f2      	lsrs	r2, r6
 8000d52:	1e48      	subs	r0, r1, #1
 8000d54:	4181      	sbcs	r1, r0
 8000d56:	430a      	orrs	r2, r1
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	015a      	lsls	r2, r3, #5
 8000d5c:	d500      	bpl.n	8000d60 <__aeabi_fsub+0x174>
 8000d5e:	e773      	b.n	8000c48 <__aeabi_fsub+0x5c>
 8000d60:	2201      	movs	r2, #1
 8000d62:	4641      	mov	r1, r8
 8000d64:	400a      	ands	r2, r1
 8000d66:	0759      	lsls	r1, r3, #29
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x180>
 8000d6a:	e789      	b.n	8000c80 <__aeabi_fsub+0x94>
 8000d6c:	e011      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000d6e:	4648      	mov	r0, r9
 8000d70:	2800      	cmp	r0, #0
 8000d72:	d158      	bne.n	8000e26 <__aeabi_fsub+0x23a>
 8000d74:	2cff      	cmp	r4, #255	; 0xff
 8000d76:	d10c      	bne.n	8000d92 <__aeabi_fsub+0x1a6>
 8000d78:	08db      	lsrs	r3, r3, #3
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_fsub+0x194>
 8000d7e:	e78c      	b.n	8000c9a <__aeabi_fsub+0xae>
 8000d80:	2080      	movs	r0, #128	; 0x80
 8000d82:	03c0      	lsls	r0, r0, #15
 8000d84:	4303      	orrs	r3, r0
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	0a5b      	lsrs	r3, r3, #9
 8000d8a:	24ff      	movs	r4, #255	; 0xff
 8000d8c:	e787      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000d8e:	2cff      	cmp	r4, #255	; 0xff
 8000d90:	d025      	beq.n	8000dde <__aeabi_fsub+0x1f2>
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	2dff      	cmp	r5, #255	; 0xff
 8000d96:	d0f0      	beq.n	8000d7a <__aeabi_fsub+0x18e>
 8000d98:	025b      	lsls	r3, r3, #9
 8000d9a:	0a5b      	lsrs	r3, r3, #9
 8000d9c:	b2ec      	uxtb	r4, r5
 8000d9e:	e77e      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d04d      	beq.n	8000e40 <__aeabi_fsub+0x254>
 8000da4:	28ff      	cmp	r0, #255	; 0xff
 8000da6:	d018      	beq.n	8000dda <__aeabi_fsub+0x1ee>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	04e4      	lsls	r4, r4, #19
 8000dac:	4272      	negs	r2, r6
 8000dae:	4323      	orrs	r3, r4
 8000db0:	2a1b      	cmp	r2, #27
 8000db2:	dd00      	ble.n	8000db6 <__aeabi_fsub+0x1ca>
 8000db4:	e0c4      	b.n	8000f40 <__aeabi_fsub+0x354>
 8000db6:	001c      	movs	r4, r3
 8000db8:	2520      	movs	r5, #32
 8000dba:	40d4      	lsrs	r4, r2
 8000dbc:	1aaa      	subs	r2, r5, r2
 8000dbe:	4093      	lsls	r3, r2
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	4193      	sbcs	r3, r2
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	0005      	movs	r5, r0
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4688      	mov	r8, r1
 8000dce:	e738      	b.n	8000c42 <__aeabi_fsub+0x56>
 8000dd0:	1c72      	adds	r2, r6, #1
 8000dd2:	d0f8      	beq.n	8000dc6 <__aeabi_fsub+0x1da>
 8000dd4:	43f2      	mvns	r2, r6
 8000dd6:	28ff      	cmp	r0, #255	; 0xff
 8000dd8:	d1ea      	bne.n	8000db0 <__aeabi_fsub+0x1c4>
 8000dda:	000a      	movs	r2, r1
 8000ddc:	464b      	mov	r3, r9
 8000dde:	25ff      	movs	r5, #255	; 0xff
 8000de0:	e7d7      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000de2:	019b      	lsls	r3, r3, #6
 8000de4:	0a5b      	lsrs	r3, r3, #9
 8000de6:	e75a      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d141      	bne.n	8000e70 <__aeabi_fsub+0x284>
 8000dec:	1c65      	adds	r5, r4, #1
 8000dee:	b2e9      	uxtb	r1, r5
 8000df0:	2901      	cmp	r1, #1
 8000df2:	dd45      	ble.n	8000e80 <__aeabi_fsub+0x294>
 8000df4:	2dff      	cmp	r5, #255	; 0xff
 8000df6:	d100      	bne.n	8000dfa <__aeabi_fsub+0x20e>
 8000df8:	e74f      	b.n	8000c9a <__aeabi_fsub+0xae>
 8000dfa:	2407      	movs	r4, #7
 8000dfc:	444b      	add	r3, r9
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	401c      	ands	r4, r3
 8000e02:	e738      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000e04:	2207      	movs	r2, #7
 8000e06:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <__aeabi_fsub+0x384>)
 8000e08:	1a2d      	subs	r5, r5, r0
 8000e0a:	4023      	ands	r3, r4
 8000e0c:	4014      	ands	r4, r2
 8000e0e:	e732      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000e10:	2c00      	cmp	r4, #0
 8000e12:	d11d      	bne.n	8000e50 <__aeabi_fsub+0x264>
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d17a      	bne.n	8000f0e <__aeabi_fsub+0x322>
 8000e18:	464b      	mov	r3, r9
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_fsub+0x234>
 8000e1e:	e091      	b.n	8000f44 <__aeabi_fsub+0x358>
 8000e20:	000a      	movs	r2, r1
 8000e22:	2500      	movs	r5, #0
 8000e24:	e7b5      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e26:	3e01      	subs	r6, #1
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d119      	bne.n	8000e60 <__aeabi_fsub+0x274>
 8000e2c:	444b      	add	r3, r9
 8000e2e:	e76c      	b.n	8000d0a <__aeabi_fsub+0x11e>
 8000e30:	2cff      	cmp	r4, #255	; 0xff
 8000e32:	d184      	bne.n	8000d3e <__aeabi_fsub+0x152>
 8000e34:	25ff      	movs	r5, #255	; 0xff
 8000e36:	e7ac      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e38:	464a      	mov	r2, r9
 8000e3a:	4688      	mov	r8, r1
 8000e3c:	1ad4      	subs	r4, r2, r3
 8000e3e:	e705      	b.n	8000c4c <__aeabi_fsub+0x60>
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1c5      	bne.n	8000dd0 <__aeabi_fsub+0x1e4>
 8000e44:	000a      	movs	r2, r1
 8000e46:	28ff      	cmp	r0, #255	; 0xff
 8000e48:	d0c8      	beq.n	8000ddc <__aeabi_fsub+0x1f0>
 8000e4a:	0005      	movs	r5, r0
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	e7a0      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d149      	bne.n	8000ee8 <__aeabi_fsub+0x2fc>
 8000e54:	464b      	mov	r3, r9
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d077      	beq.n	8000f4a <__aeabi_fsub+0x35e>
 8000e5a:	000a      	movs	r2, r1
 8000e5c:	25ff      	movs	r5, #255	; 0xff
 8000e5e:	e798      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000e60:	2cff      	cmp	r4, #255	; 0xff
 8000e62:	d000      	beq.n	8000e66 <__aeabi_fsub+0x27a>
 8000e64:	e743      	b.n	8000cee <__aeabi_fsub+0x102>
 8000e66:	e787      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000e68:	000a      	movs	r2, r1
 8000e6a:	24ff      	movs	r4, #255	; 0xff
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e716      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000e70:	2c00      	cmp	r4, #0
 8000e72:	d115      	bne.n	8000ea0 <__aeabi_fsub+0x2b4>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d157      	bne.n	8000f28 <__aeabi_fsub+0x33c>
 8000e78:	28ff      	cmp	r0, #255	; 0xff
 8000e7a:	d1e6      	bne.n	8000e4a <__aeabi_fsub+0x25e>
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	e77b      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d120      	bne.n	8000ec6 <__aeabi_fsub+0x2da>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d057      	beq.n	8000f38 <__aeabi_fsub+0x34c>
 8000e88:	4649      	mov	r1, r9
 8000e8a:	2900      	cmp	r1, #0
 8000e8c:	d053      	beq.n	8000f36 <__aeabi_fsub+0x34a>
 8000e8e:	444b      	add	r3, r9
 8000e90:	015a      	lsls	r2, r3, #5
 8000e92:	d568      	bpl.n	8000f66 <__aeabi_fsub+0x37a>
 8000e94:	2407      	movs	r4, #7
 8000e96:	4a36      	ldr	r2, [pc, #216]	; (8000f70 <__aeabi_fsub+0x384>)
 8000e98:	401c      	ands	r4, r3
 8000e9a:	2501      	movs	r5, #1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	e6ea      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000ea0:	28ff      	cmp	r0, #255	; 0xff
 8000ea2:	d0eb      	beq.n	8000e7c <__aeabi_fsub+0x290>
 8000ea4:	2280      	movs	r2, #128	; 0x80
 8000ea6:	04d2      	lsls	r2, r2, #19
 8000ea8:	4276      	negs	r6, r6
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	2e1b      	cmp	r6, #27
 8000eae:	dc53      	bgt.n	8000f58 <__aeabi_fsub+0x36c>
 8000eb0:	2520      	movs	r5, #32
 8000eb2:	1bad      	subs	r5, r5, r6
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	40ab      	lsls	r3, r5
 8000eb8:	40f2      	lsrs	r2, r6
 8000eba:	1e5c      	subs	r4, r3, #1
 8000ebc:	41a3      	sbcs	r3, r4
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	444b      	add	r3, r9
 8000ec2:	0005      	movs	r5, r0
 8000ec4:	e721      	b.n	8000d0a <__aeabi_fsub+0x11e>
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0d8      	beq.n	8000e7c <__aeabi_fsub+0x290>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	2900      	cmp	r1, #0
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x2e6>
 8000ed0:	e752      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	03c9      	lsls	r1, r1, #15
 8000ed6:	420f      	tst	r7, r1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x2f0>
 8000eda:	e74d      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000edc:	4660      	mov	r0, ip
 8000ede:	4208      	tst	r0, r1
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_fsub+0x2f8>
 8000ee2:	e749      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000ee4:	464b      	mov	r3, r9
 8000ee6:	e747      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000ee8:	4648      	mov	r0, r9
 8000eea:	25ff      	movs	r5, #255	; 0xff
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x306>
 8000ef0:	e74f      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	03d2      	lsls	r2, r2, #15
 8000ef6:	4217      	tst	r7, r2
 8000ef8:	d004      	beq.n	8000f04 <__aeabi_fsub+0x318>
 8000efa:	4660      	mov	r0, ip
 8000efc:	4210      	tst	r0, r2
 8000efe:	d101      	bne.n	8000f04 <__aeabi_fsub+0x318>
 8000f00:	464b      	mov	r3, r9
 8000f02:	4688      	mov	r8, r1
 8000f04:	2201      	movs	r2, #1
 8000f06:	4641      	mov	r1, r8
 8000f08:	25ff      	movs	r5, #255	; 0xff
 8000f0a:	400a      	ands	r2, r1
 8000f0c:	e741      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000f0e:	4648      	mov	r0, r9
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d01f      	beq.n	8000f54 <__aeabi_fsub+0x368>
 8000f14:	1a1a      	subs	r2, r3, r0
 8000f16:	0150      	lsls	r0, r2, #5
 8000f18:	d520      	bpl.n	8000f5c <__aeabi_fsub+0x370>
 8000f1a:	464a      	mov	r2, r9
 8000f1c:	2407      	movs	r4, #7
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	401c      	ands	r4, r3
 8000f22:	4688      	mov	r8, r1
 8000f24:	2500      	movs	r5, #0
 8000f26:	e6a6      	b.n	8000c76 <__aeabi_fsub+0x8a>
 8000f28:	1c74      	adds	r4, r6, #1
 8000f2a:	d0c9      	beq.n	8000ec0 <__aeabi_fsub+0x2d4>
 8000f2c:	43f6      	mvns	r6, r6
 8000f2e:	28ff      	cmp	r0, #255	; 0xff
 8000f30:	d1bc      	bne.n	8000eac <__aeabi_fsub+0x2c0>
 8000f32:	464b      	mov	r3, r9
 8000f34:	e720      	b.n	8000d78 <__aeabi_fsub+0x18c>
 8000f36:	4699      	mov	r9, r3
 8000f38:	464b      	mov	r3, r9
 8000f3a:	2500      	movs	r5, #0
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	e72b      	b.n	8000d98 <__aeabi_fsub+0x1ac>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e740      	b.n	8000dc6 <__aeabi_fsub+0x1da>
 8000f44:	2200      	movs	r2, #0
 8000f46:	2300      	movs	r3, #0
 8000f48:	e6a9      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	03db      	lsls	r3, r3, #15
 8000f50:	24ff      	movs	r4, #255	; 0xff
 8000f52:	e6a4      	b.n	8000c9e <__aeabi_fsub+0xb2>
 8000f54:	2500      	movs	r5, #0
 8000f56:	e71c      	b.n	8000d92 <__aeabi_fsub+0x1a6>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e7b1      	b.n	8000ec0 <__aeabi_fsub+0x2d4>
 8000f5c:	2a00      	cmp	r2, #0
 8000f5e:	d0f1      	beq.n	8000f44 <__aeabi_fsub+0x358>
 8000f60:	0013      	movs	r3, r2
 8000f62:	2500      	movs	r5, #0
 8000f64:	e6fc      	b.n	8000d60 <__aeabi_fsub+0x174>
 8000f66:	2500      	movs	r5, #0
 8000f68:	e6fa      	b.n	8000d60 <__aeabi_fsub+0x174>
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	7dffffff 	.word	0x7dffffff
 8000f70:	fbffffff 	.word	0xfbffffff

08000f74 <__aeabi_f2iz>:
 8000f74:	0241      	lsls	r1, r0, #9
 8000f76:	0042      	lsls	r2, r0, #1
 8000f78:	0fc3      	lsrs	r3, r0, #31
 8000f7a:	0a49      	lsrs	r1, r1, #9
 8000f7c:	0e12      	lsrs	r2, r2, #24
 8000f7e:	2000      	movs	r0, #0
 8000f80:	2a7e      	cmp	r2, #126	; 0x7e
 8000f82:	d90d      	bls.n	8000fa0 <__aeabi_f2iz+0x2c>
 8000f84:	2a9d      	cmp	r2, #157	; 0x9d
 8000f86:	d80c      	bhi.n	8000fa2 <__aeabi_f2iz+0x2e>
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	0400      	lsls	r0, r0, #16
 8000f8c:	4301      	orrs	r1, r0
 8000f8e:	2a95      	cmp	r2, #149	; 0x95
 8000f90:	dc0a      	bgt.n	8000fa8 <__aeabi_f2iz+0x34>
 8000f92:	2096      	movs	r0, #150	; 0x96
 8000f94:	1a82      	subs	r2, r0, r2
 8000f96:	40d1      	lsrs	r1, r2
 8000f98:	4248      	negs	r0, r1
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_f2iz+0x2c>
 8000f9e:	0008      	movs	r0, r1
 8000fa0:	4770      	bx	lr
 8000fa2:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <__aeabi_f2iz+0x3c>)
 8000fa4:	1898      	adds	r0, r3, r2
 8000fa6:	e7fb      	b.n	8000fa0 <__aeabi_f2iz+0x2c>
 8000fa8:	3a96      	subs	r2, #150	; 0x96
 8000faa:	4091      	lsls	r1, r2
 8000fac:	e7f4      	b.n	8000f98 <__aeabi_f2iz+0x24>
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	7fffffff 	.word	0x7fffffff

08000fb4 <__aeabi_ui2f>:
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	1e04      	subs	r4, r0, #0
 8000fb8:	d034      	beq.n	8001024 <__aeabi_ui2f+0x70>
 8000fba:	f001 feaf 	bl	8002d1c <__clzsi2>
 8000fbe:	229e      	movs	r2, #158	; 0x9e
 8000fc0:	1a12      	subs	r2, r2, r0
 8000fc2:	2a96      	cmp	r2, #150	; 0x96
 8000fc4:	dc07      	bgt.n	8000fd6 <__aeabi_ui2f+0x22>
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	2808      	cmp	r0, #8
 8000fca:	dd2e      	ble.n	800102a <__aeabi_ui2f+0x76>
 8000fcc:	3808      	subs	r0, #8
 8000fce:	4084      	lsls	r4, r0
 8000fd0:	0260      	lsls	r0, r4, #9
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	e021      	b.n	800101a <__aeabi_ui2f+0x66>
 8000fd6:	2a99      	cmp	r2, #153	; 0x99
 8000fd8:	dd09      	ble.n	8000fee <__aeabi_ui2f+0x3a>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	0021      	movs	r1, r4
 8000fde:	331b      	adds	r3, #27
 8000fe0:	4099      	lsls	r1, r3
 8000fe2:	1e4b      	subs	r3, r1, #1
 8000fe4:	4199      	sbcs	r1, r3
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	1a1b      	subs	r3, r3, r0
 8000fea:	40dc      	lsrs	r4, r3
 8000fec:	430c      	orrs	r4, r1
 8000fee:	2805      	cmp	r0, #5
 8000ff0:	dd01      	ble.n	8000ff6 <__aeabi_ui2f+0x42>
 8000ff2:	1f43      	subs	r3, r0, #5
 8000ff4:	409c      	lsls	r4, r3
 8000ff6:	0023      	movs	r3, r4
 8000ff8:	490d      	ldr	r1, [pc, #52]	; (8001030 <__aeabi_ui2f+0x7c>)
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	0765      	lsls	r5, r4, #29
 8000ffe:	d009      	beq.n	8001014 <__aeabi_ui2f+0x60>
 8001000:	250f      	movs	r5, #15
 8001002:	402c      	ands	r4, r5
 8001004:	2c04      	cmp	r4, #4
 8001006:	d005      	beq.n	8001014 <__aeabi_ui2f+0x60>
 8001008:	3304      	adds	r3, #4
 800100a:	015c      	lsls	r4, r3, #5
 800100c:	d502      	bpl.n	8001014 <__aeabi_ui2f+0x60>
 800100e:	229f      	movs	r2, #159	; 0x9f
 8001010:	400b      	ands	r3, r1
 8001012:	1a12      	subs	r2, r2, r0
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	0a58      	lsrs	r0, r3, #9
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	0240      	lsls	r0, r0, #9
 800101c:	05d2      	lsls	r2, r2, #23
 800101e:	0a40      	lsrs	r0, r0, #9
 8001020:	4310      	orrs	r0, r2
 8001022:	bd70      	pop	{r4, r5, r6, pc}
 8001024:	2200      	movs	r2, #0
 8001026:	2000      	movs	r0, #0
 8001028:	e7f7      	b.n	800101a <__aeabi_ui2f+0x66>
 800102a:	0260      	lsls	r0, r4, #9
 800102c:	0a40      	lsrs	r0, r0, #9
 800102e:	e7f4      	b.n	800101a <__aeabi_ui2f+0x66>
 8001030:	fbffffff 	.word	0xfbffffff

08001034 <__aeabi_dadd>:
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	464f      	mov	r7, r9
 8001038:	4646      	mov	r6, r8
 800103a:	46d6      	mov	lr, sl
 800103c:	000c      	movs	r4, r1
 800103e:	0309      	lsls	r1, r1, #12
 8001040:	b5c0      	push	{r6, r7, lr}
 8001042:	0a49      	lsrs	r1, r1, #9
 8001044:	0f47      	lsrs	r7, r0, #29
 8001046:	005e      	lsls	r6, r3, #1
 8001048:	4339      	orrs	r1, r7
 800104a:	031f      	lsls	r7, r3, #12
 800104c:	0fdb      	lsrs	r3, r3, #31
 800104e:	469c      	mov	ip, r3
 8001050:	0065      	lsls	r5, r4, #1
 8001052:	0a7b      	lsrs	r3, r7, #9
 8001054:	0f57      	lsrs	r7, r2, #29
 8001056:	431f      	orrs	r7, r3
 8001058:	0d6d      	lsrs	r5, r5, #21
 800105a:	0fe4      	lsrs	r4, r4, #31
 800105c:	0d76      	lsrs	r6, r6, #21
 800105e:	46a1      	mov	r9, r4
 8001060:	00c0      	lsls	r0, r0, #3
 8001062:	46b8      	mov	r8, r7
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	1bab      	subs	r3, r5, r6
 8001068:	4564      	cmp	r4, ip
 800106a:	d07b      	beq.n	8001164 <__aeabi_dadd+0x130>
 800106c:	2b00      	cmp	r3, #0
 800106e:	dd5f      	ble.n	8001130 <__aeabi_dadd+0xfc>
 8001070:	2e00      	cmp	r6, #0
 8001072:	d000      	beq.n	8001076 <__aeabi_dadd+0x42>
 8001074:	e0a4      	b.n	80011c0 <__aeabi_dadd+0x18c>
 8001076:	003e      	movs	r6, r7
 8001078:	4316      	orrs	r6, r2
 800107a:	d100      	bne.n	800107e <__aeabi_dadd+0x4a>
 800107c:	e112      	b.n	80012a4 <__aeabi_dadd+0x270>
 800107e:	1e5e      	subs	r6, r3, #1
 8001080:	2e00      	cmp	r6, #0
 8001082:	d000      	beq.n	8001086 <__aeabi_dadd+0x52>
 8001084:	e19e      	b.n	80013c4 <__aeabi_dadd+0x390>
 8001086:	1a87      	subs	r7, r0, r2
 8001088:	4643      	mov	r3, r8
 800108a:	42b8      	cmp	r0, r7
 800108c:	4180      	sbcs	r0, r0
 800108e:	2501      	movs	r5, #1
 8001090:	1ac9      	subs	r1, r1, r3
 8001092:	4240      	negs	r0, r0
 8001094:	1a09      	subs	r1, r1, r0
 8001096:	020b      	lsls	r3, r1, #8
 8001098:	d400      	bmi.n	800109c <__aeabi_dadd+0x68>
 800109a:	e131      	b.n	8001300 <__aeabi_dadd+0x2cc>
 800109c:	0249      	lsls	r1, r1, #9
 800109e:	0a4e      	lsrs	r6, r1, #9
 80010a0:	2e00      	cmp	r6, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x72>
 80010a4:	e16e      	b.n	8001384 <__aeabi_dadd+0x350>
 80010a6:	0030      	movs	r0, r6
 80010a8:	f001 fe38 	bl	8002d1c <__clzsi2>
 80010ac:	0003      	movs	r3, r0
 80010ae:	3b08      	subs	r3, #8
 80010b0:	2b1f      	cmp	r3, #31
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_dadd+0x82>
 80010b4:	e161      	b.n	800137a <__aeabi_dadd+0x346>
 80010b6:	2220      	movs	r2, #32
 80010b8:	0039      	movs	r1, r7
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	409e      	lsls	r6, r3
 80010be:	40d1      	lsrs	r1, r2
 80010c0:	409f      	lsls	r7, r3
 80010c2:	430e      	orrs	r6, r1
 80010c4:	429d      	cmp	r5, r3
 80010c6:	dd00      	ble.n	80010ca <__aeabi_dadd+0x96>
 80010c8:	e151      	b.n	800136e <__aeabi_dadd+0x33a>
 80010ca:	1b5d      	subs	r5, r3, r5
 80010cc:	1c6b      	adds	r3, r5, #1
 80010ce:	2b1f      	cmp	r3, #31
 80010d0:	dd00      	ble.n	80010d4 <__aeabi_dadd+0xa0>
 80010d2:	e17c      	b.n	80013ce <__aeabi_dadd+0x39a>
 80010d4:	2120      	movs	r1, #32
 80010d6:	1ac9      	subs	r1, r1, r3
 80010d8:	003d      	movs	r5, r7
 80010da:	0030      	movs	r0, r6
 80010dc:	408f      	lsls	r7, r1
 80010de:	4088      	lsls	r0, r1
 80010e0:	40dd      	lsrs	r5, r3
 80010e2:	1e79      	subs	r1, r7, #1
 80010e4:	418f      	sbcs	r7, r1
 80010e6:	0031      	movs	r1, r6
 80010e8:	2207      	movs	r2, #7
 80010ea:	4328      	orrs	r0, r5
 80010ec:	40d9      	lsrs	r1, r3
 80010ee:	2500      	movs	r5, #0
 80010f0:	4307      	orrs	r7, r0
 80010f2:	403a      	ands	r2, r7
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d009      	beq.n	800110c <__aeabi_dadd+0xd8>
 80010f8:	230f      	movs	r3, #15
 80010fa:	403b      	ands	r3, r7
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d005      	beq.n	800110c <__aeabi_dadd+0xd8>
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	42bb      	cmp	r3, r7
 8001104:	41bf      	sbcs	r7, r7
 8001106:	427f      	negs	r7, r7
 8001108:	19c9      	adds	r1, r1, r7
 800110a:	001f      	movs	r7, r3
 800110c:	020b      	lsls	r3, r1, #8
 800110e:	d400      	bmi.n	8001112 <__aeabi_dadd+0xde>
 8001110:	e226      	b.n	8001560 <__aeabi_dadd+0x52c>
 8001112:	1c6a      	adds	r2, r5, #1
 8001114:	4bc6      	ldr	r3, [pc, #792]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001116:	0555      	lsls	r5, r2, #21
 8001118:	0d6d      	lsrs	r5, r5, #21
 800111a:	429a      	cmp	r2, r3
 800111c:	d100      	bne.n	8001120 <__aeabi_dadd+0xec>
 800111e:	e106      	b.n	800132e <__aeabi_dadd+0x2fa>
 8001120:	4ac4      	ldr	r2, [pc, #784]	; (8001434 <__aeabi_dadd+0x400>)
 8001122:	08ff      	lsrs	r7, r7, #3
 8001124:	400a      	ands	r2, r1
 8001126:	0753      	lsls	r3, r2, #29
 8001128:	0252      	lsls	r2, r2, #9
 800112a:	433b      	orrs	r3, r7
 800112c:	0b12      	lsrs	r2, r2, #12
 800112e:	e08e      	b.n	800124e <__aeabi_dadd+0x21a>
 8001130:	2b00      	cmp	r3, #0
 8001132:	d000      	beq.n	8001136 <__aeabi_dadd+0x102>
 8001134:	e0b8      	b.n	80012a8 <__aeabi_dadd+0x274>
 8001136:	1c6b      	adds	r3, r5, #1
 8001138:	055b      	lsls	r3, r3, #21
 800113a:	0d5b      	lsrs	r3, r3, #21
 800113c:	2b01      	cmp	r3, #1
 800113e:	dc00      	bgt.n	8001142 <__aeabi_dadd+0x10e>
 8001140:	e130      	b.n	80013a4 <__aeabi_dadd+0x370>
 8001142:	1a87      	subs	r7, r0, r2
 8001144:	4643      	mov	r3, r8
 8001146:	42b8      	cmp	r0, r7
 8001148:	41b6      	sbcs	r6, r6
 800114a:	1acb      	subs	r3, r1, r3
 800114c:	4276      	negs	r6, r6
 800114e:	1b9e      	subs	r6, r3, r6
 8001150:	0233      	lsls	r3, r6, #8
 8001152:	d500      	bpl.n	8001156 <__aeabi_dadd+0x122>
 8001154:	e14c      	b.n	80013f0 <__aeabi_dadd+0x3bc>
 8001156:	003b      	movs	r3, r7
 8001158:	4333      	orrs	r3, r6
 800115a:	d1a1      	bne.n	80010a0 <__aeabi_dadd+0x6c>
 800115c:	2200      	movs	r2, #0
 800115e:	2400      	movs	r4, #0
 8001160:	2500      	movs	r5, #0
 8001162:	e070      	b.n	8001246 <__aeabi_dadd+0x212>
 8001164:	2b00      	cmp	r3, #0
 8001166:	dc00      	bgt.n	800116a <__aeabi_dadd+0x136>
 8001168:	e0e5      	b.n	8001336 <__aeabi_dadd+0x302>
 800116a:	2e00      	cmp	r6, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_dadd+0x13c>
 800116e:	e083      	b.n	8001278 <__aeabi_dadd+0x244>
 8001170:	4eaf      	ldr	r6, [pc, #700]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001172:	42b5      	cmp	r5, r6
 8001174:	d060      	beq.n	8001238 <__aeabi_dadd+0x204>
 8001176:	2680      	movs	r6, #128	; 0x80
 8001178:	0436      	lsls	r6, r6, #16
 800117a:	4337      	orrs	r7, r6
 800117c:	46b8      	mov	r8, r7
 800117e:	2b38      	cmp	r3, #56	; 0x38
 8001180:	dc00      	bgt.n	8001184 <__aeabi_dadd+0x150>
 8001182:	e13e      	b.n	8001402 <__aeabi_dadd+0x3ce>
 8001184:	4643      	mov	r3, r8
 8001186:	4313      	orrs	r3, r2
 8001188:	001f      	movs	r7, r3
 800118a:	1e7a      	subs	r2, r7, #1
 800118c:	4197      	sbcs	r7, r2
 800118e:	183f      	adds	r7, r7, r0
 8001190:	4287      	cmp	r7, r0
 8001192:	4180      	sbcs	r0, r0
 8001194:	4240      	negs	r0, r0
 8001196:	1809      	adds	r1, r1, r0
 8001198:	020b      	lsls	r3, r1, #8
 800119a:	d400      	bmi.n	800119e <__aeabi_dadd+0x16a>
 800119c:	e0b0      	b.n	8001300 <__aeabi_dadd+0x2cc>
 800119e:	4ba4      	ldr	r3, [pc, #656]	; (8001430 <__aeabi_dadd+0x3fc>)
 80011a0:	3501      	adds	r5, #1
 80011a2:	429d      	cmp	r5, r3
 80011a4:	d100      	bne.n	80011a8 <__aeabi_dadd+0x174>
 80011a6:	e0c3      	b.n	8001330 <__aeabi_dadd+0x2fc>
 80011a8:	4aa2      	ldr	r2, [pc, #648]	; (8001434 <__aeabi_dadd+0x400>)
 80011aa:	087b      	lsrs	r3, r7, #1
 80011ac:	400a      	ands	r2, r1
 80011ae:	2101      	movs	r1, #1
 80011b0:	400f      	ands	r7, r1
 80011b2:	431f      	orrs	r7, r3
 80011b4:	0851      	lsrs	r1, r2, #1
 80011b6:	07d3      	lsls	r3, r2, #31
 80011b8:	2207      	movs	r2, #7
 80011ba:	431f      	orrs	r7, r3
 80011bc:	403a      	ands	r2, r7
 80011be:	e799      	b.n	80010f4 <__aeabi_dadd+0xc0>
 80011c0:	4e9b      	ldr	r6, [pc, #620]	; (8001430 <__aeabi_dadd+0x3fc>)
 80011c2:	42b5      	cmp	r5, r6
 80011c4:	d038      	beq.n	8001238 <__aeabi_dadd+0x204>
 80011c6:	2680      	movs	r6, #128	; 0x80
 80011c8:	0436      	lsls	r6, r6, #16
 80011ca:	4337      	orrs	r7, r6
 80011cc:	46b8      	mov	r8, r7
 80011ce:	2b38      	cmp	r3, #56	; 0x38
 80011d0:	dd00      	ble.n	80011d4 <__aeabi_dadd+0x1a0>
 80011d2:	e0dc      	b.n	800138e <__aeabi_dadd+0x35a>
 80011d4:	2b1f      	cmp	r3, #31
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dadd+0x1a6>
 80011d8:	e130      	b.n	800143c <__aeabi_dadd+0x408>
 80011da:	001e      	movs	r6, r3
 80011dc:	4647      	mov	r7, r8
 80011de:	3e20      	subs	r6, #32
 80011e0:	40f7      	lsrs	r7, r6
 80011e2:	46bc      	mov	ip, r7
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d004      	beq.n	80011f2 <__aeabi_dadd+0x1be>
 80011e8:	2640      	movs	r6, #64	; 0x40
 80011ea:	1af3      	subs	r3, r6, r3
 80011ec:	4646      	mov	r6, r8
 80011ee:	409e      	lsls	r6, r3
 80011f0:	4332      	orrs	r2, r6
 80011f2:	0017      	movs	r7, r2
 80011f4:	4663      	mov	r3, ip
 80011f6:	1e7a      	subs	r2, r7, #1
 80011f8:	4197      	sbcs	r7, r2
 80011fa:	431f      	orrs	r7, r3
 80011fc:	e0cc      	b.n	8001398 <__aeabi_dadd+0x364>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d100      	bne.n	8001204 <__aeabi_dadd+0x1d0>
 8001202:	e204      	b.n	800160e <__aeabi_dadd+0x5da>
 8001204:	4643      	mov	r3, r8
 8001206:	4313      	orrs	r3, r2
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x1d8>
 800120a:	e159      	b.n	80014c0 <__aeabi_dadd+0x48c>
 800120c:	074b      	lsls	r3, r1, #29
 800120e:	08c0      	lsrs	r0, r0, #3
 8001210:	4318      	orrs	r0, r3
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	08c9      	lsrs	r1, r1, #3
 8001216:	031b      	lsls	r3, r3, #12
 8001218:	4219      	tst	r1, r3
 800121a:	d008      	beq.n	800122e <__aeabi_dadd+0x1fa>
 800121c:	4645      	mov	r5, r8
 800121e:	08ed      	lsrs	r5, r5, #3
 8001220:	421d      	tst	r5, r3
 8001222:	d104      	bne.n	800122e <__aeabi_dadd+0x1fa>
 8001224:	4643      	mov	r3, r8
 8001226:	08d0      	lsrs	r0, r2, #3
 8001228:	0759      	lsls	r1, r3, #29
 800122a:	4308      	orrs	r0, r1
 800122c:	0029      	movs	r1, r5
 800122e:	0f42      	lsrs	r2, r0, #29
 8001230:	00c9      	lsls	r1, r1, #3
 8001232:	4d7f      	ldr	r5, [pc, #508]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001234:	4311      	orrs	r1, r2
 8001236:	00c0      	lsls	r0, r0, #3
 8001238:	074b      	lsls	r3, r1, #29
 800123a:	08ca      	lsrs	r2, r1, #3
 800123c:	497c      	ldr	r1, [pc, #496]	; (8001430 <__aeabi_dadd+0x3fc>)
 800123e:	08c0      	lsrs	r0, r0, #3
 8001240:	4303      	orrs	r3, r0
 8001242:	428d      	cmp	r5, r1
 8001244:	d068      	beq.n	8001318 <__aeabi_dadd+0x2e4>
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	056d      	lsls	r5, r5, #21
 800124a:	0b12      	lsrs	r2, r2, #12
 800124c:	0d6d      	lsrs	r5, r5, #21
 800124e:	2100      	movs	r1, #0
 8001250:	0312      	lsls	r2, r2, #12
 8001252:	0018      	movs	r0, r3
 8001254:	0b13      	lsrs	r3, r2, #12
 8001256:	0d0a      	lsrs	r2, r1, #20
 8001258:	0512      	lsls	r2, r2, #20
 800125a:	431a      	orrs	r2, r3
 800125c:	4b76      	ldr	r3, [pc, #472]	; (8001438 <__aeabi_dadd+0x404>)
 800125e:	052d      	lsls	r5, r5, #20
 8001260:	4013      	ands	r3, r2
 8001262:	432b      	orrs	r3, r5
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	07e4      	lsls	r4, r4, #31
 8001268:	085b      	lsrs	r3, r3, #1
 800126a:	4323      	orrs	r3, r4
 800126c:	0019      	movs	r1, r3
 800126e:	bc1c      	pop	{r2, r3, r4}
 8001270:	4690      	mov	r8, r2
 8001272:	4699      	mov	r9, r3
 8001274:	46a2      	mov	sl, r4
 8001276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001278:	003e      	movs	r6, r7
 800127a:	4316      	orrs	r6, r2
 800127c:	d012      	beq.n	80012a4 <__aeabi_dadd+0x270>
 800127e:	1e5e      	subs	r6, r3, #1
 8001280:	2e00      	cmp	r6, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x252>
 8001284:	e100      	b.n	8001488 <__aeabi_dadd+0x454>
 8001286:	1887      	adds	r7, r0, r2
 8001288:	4287      	cmp	r7, r0
 800128a:	4180      	sbcs	r0, r0
 800128c:	4441      	add	r1, r8
 800128e:	4240      	negs	r0, r0
 8001290:	1809      	adds	r1, r1, r0
 8001292:	2501      	movs	r5, #1
 8001294:	020b      	lsls	r3, r1, #8
 8001296:	d533      	bpl.n	8001300 <__aeabi_dadd+0x2cc>
 8001298:	2502      	movs	r5, #2
 800129a:	e785      	b.n	80011a8 <__aeabi_dadd+0x174>
 800129c:	4664      	mov	r4, ip
 800129e:	0033      	movs	r3, r6
 80012a0:	4641      	mov	r1, r8
 80012a2:	0010      	movs	r0, r2
 80012a4:	001d      	movs	r5, r3
 80012a6:	e7c7      	b.n	8001238 <__aeabi_dadd+0x204>
 80012a8:	2d00      	cmp	r5, #0
 80012aa:	d000      	beq.n	80012ae <__aeabi_dadd+0x27a>
 80012ac:	e0da      	b.n	8001464 <__aeabi_dadd+0x430>
 80012ae:	000c      	movs	r4, r1
 80012b0:	4304      	orrs	r4, r0
 80012b2:	d0f3      	beq.n	800129c <__aeabi_dadd+0x268>
 80012b4:	1c5c      	adds	r4, r3, #1
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x286>
 80012b8:	e19f      	b.n	80015fa <__aeabi_dadd+0x5c6>
 80012ba:	4c5d      	ldr	r4, [pc, #372]	; (8001430 <__aeabi_dadd+0x3fc>)
 80012bc:	42a6      	cmp	r6, r4
 80012be:	d100      	bne.n	80012c2 <__aeabi_dadd+0x28e>
 80012c0:	e12f      	b.n	8001522 <__aeabi_dadd+0x4ee>
 80012c2:	43db      	mvns	r3, r3
 80012c4:	2b38      	cmp	r3, #56	; 0x38
 80012c6:	dd00      	ble.n	80012ca <__aeabi_dadd+0x296>
 80012c8:	e166      	b.n	8001598 <__aeabi_dadd+0x564>
 80012ca:	2b1f      	cmp	r3, #31
 80012cc:	dd00      	ble.n	80012d0 <__aeabi_dadd+0x29c>
 80012ce:	e183      	b.n	80015d8 <__aeabi_dadd+0x5a4>
 80012d0:	2420      	movs	r4, #32
 80012d2:	0005      	movs	r5, r0
 80012d4:	1ae4      	subs	r4, r4, r3
 80012d6:	000f      	movs	r7, r1
 80012d8:	40dd      	lsrs	r5, r3
 80012da:	40d9      	lsrs	r1, r3
 80012dc:	40a0      	lsls	r0, r4
 80012de:	4643      	mov	r3, r8
 80012e0:	40a7      	lsls	r7, r4
 80012e2:	1a5b      	subs	r3, r3, r1
 80012e4:	1e44      	subs	r4, r0, #1
 80012e6:	41a0      	sbcs	r0, r4
 80012e8:	4698      	mov	r8, r3
 80012ea:	432f      	orrs	r7, r5
 80012ec:	4338      	orrs	r0, r7
 80012ee:	1a17      	subs	r7, r2, r0
 80012f0:	42ba      	cmp	r2, r7
 80012f2:	4192      	sbcs	r2, r2
 80012f4:	4643      	mov	r3, r8
 80012f6:	4252      	negs	r2, r2
 80012f8:	1a99      	subs	r1, r3, r2
 80012fa:	4664      	mov	r4, ip
 80012fc:	0035      	movs	r5, r6
 80012fe:	e6ca      	b.n	8001096 <__aeabi_dadd+0x62>
 8001300:	2207      	movs	r2, #7
 8001302:	403a      	ands	r2, r7
 8001304:	2a00      	cmp	r2, #0
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x2d6>
 8001308:	e6f6      	b.n	80010f8 <__aeabi_dadd+0xc4>
 800130a:	074b      	lsls	r3, r1, #29
 800130c:	08ca      	lsrs	r2, r1, #3
 800130e:	4948      	ldr	r1, [pc, #288]	; (8001430 <__aeabi_dadd+0x3fc>)
 8001310:	08ff      	lsrs	r7, r7, #3
 8001312:	433b      	orrs	r3, r7
 8001314:	428d      	cmp	r5, r1
 8001316:	d196      	bne.n	8001246 <__aeabi_dadd+0x212>
 8001318:	0019      	movs	r1, r3
 800131a:	4311      	orrs	r1, r2
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x2ec>
 800131e:	e19e      	b.n	800165e <__aeabi_dadd+0x62a>
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0309      	lsls	r1, r1, #12
 8001324:	430a      	orrs	r2, r1
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	0b12      	lsrs	r2, r2, #12
 800132a:	4d41      	ldr	r5, [pc, #260]	; (8001430 <__aeabi_dadd+0x3fc>)
 800132c:	e78f      	b.n	800124e <__aeabi_dadd+0x21a>
 800132e:	0015      	movs	r5, r2
 8001330:	2200      	movs	r2, #0
 8001332:	2300      	movs	r3, #0
 8001334:	e78b      	b.n	800124e <__aeabi_dadd+0x21a>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <__aeabi_dadd+0x308>
 800133a:	e0c7      	b.n	80014cc <__aeabi_dadd+0x498>
 800133c:	1c6b      	adds	r3, r5, #1
 800133e:	055f      	lsls	r7, r3, #21
 8001340:	0d7f      	lsrs	r7, r7, #21
 8001342:	2f01      	cmp	r7, #1
 8001344:	dc00      	bgt.n	8001348 <__aeabi_dadd+0x314>
 8001346:	e0f1      	b.n	800152c <__aeabi_dadd+0x4f8>
 8001348:	4d39      	ldr	r5, [pc, #228]	; (8001430 <__aeabi_dadd+0x3fc>)
 800134a:	42ab      	cmp	r3, r5
 800134c:	d100      	bne.n	8001350 <__aeabi_dadd+0x31c>
 800134e:	e0b9      	b.n	80014c4 <__aeabi_dadd+0x490>
 8001350:	1885      	adds	r5, r0, r2
 8001352:	000a      	movs	r2, r1
 8001354:	4285      	cmp	r5, r0
 8001356:	4189      	sbcs	r1, r1
 8001358:	4442      	add	r2, r8
 800135a:	4249      	negs	r1, r1
 800135c:	1851      	adds	r1, r2, r1
 800135e:	2207      	movs	r2, #7
 8001360:	07cf      	lsls	r7, r1, #31
 8001362:	086d      	lsrs	r5, r5, #1
 8001364:	432f      	orrs	r7, r5
 8001366:	0849      	lsrs	r1, r1, #1
 8001368:	403a      	ands	r2, r7
 800136a:	001d      	movs	r5, r3
 800136c:	e6c2      	b.n	80010f4 <__aeabi_dadd+0xc0>
 800136e:	2207      	movs	r2, #7
 8001370:	4930      	ldr	r1, [pc, #192]	; (8001434 <__aeabi_dadd+0x400>)
 8001372:	1aed      	subs	r5, r5, r3
 8001374:	4031      	ands	r1, r6
 8001376:	403a      	ands	r2, r7
 8001378:	e6bc      	b.n	80010f4 <__aeabi_dadd+0xc0>
 800137a:	003e      	movs	r6, r7
 800137c:	3828      	subs	r0, #40	; 0x28
 800137e:	4086      	lsls	r6, r0
 8001380:	2700      	movs	r7, #0
 8001382:	e69f      	b.n	80010c4 <__aeabi_dadd+0x90>
 8001384:	0038      	movs	r0, r7
 8001386:	f001 fcc9 	bl	8002d1c <__clzsi2>
 800138a:	3020      	adds	r0, #32
 800138c:	e68e      	b.n	80010ac <__aeabi_dadd+0x78>
 800138e:	4643      	mov	r3, r8
 8001390:	4313      	orrs	r3, r2
 8001392:	001f      	movs	r7, r3
 8001394:	1e7a      	subs	r2, r7, #1
 8001396:	4197      	sbcs	r7, r2
 8001398:	1bc7      	subs	r7, r0, r7
 800139a:	42b8      	cmp	r0, r7
 800139c:	4180      	sbcs	r0, r0
 800139e:	4240      	negs	r0, r0
 80013a0:	1a09      	subs	r1, r1, r0
 80013a2:	e678      	b.n	8001096 <__aeabi_dadd+0x62>
 80013a4:	000e      	movs	r6, r1
 80013a6:	003b      	movs	r3, r7
 80013a8:	4306      	orrs	r6, r0
 80013aa:	4313      	orrs	r3, r2
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	d161      	bne.n	8001474 <__aeabi_dadd+0x440>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x382>
 80013b4:	e0f4      	b.n	80015a0 <__aeabi_dadd+0x56c>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dadd+0x388>
 80013ba:	e11b      	b.n	80015f4 <__aeabi_dadd+0x5c0>
 80013bc:	4664      	mov	r4, ip
 80013be:	0039      	movs	r1, r7
 80013c0:	0010      	movs	r0, r2
 80013c2:	e739      	b.n	8001238 <__aeabi_dadd+0x204>
 80013c4:	4f1a      	ldr	r7, [pc, #104]	; (8001430 <__aeabi_dadd+0x3fc>)
 80013c6:	42bb      	cmp	r3, r7
 80013c8:	d07a      	beq.n	80014c0 <__aeabi_dadd+0x48c>
 80013ca:	0033      	movs	r3, r6
 80013cc:	e6ff      	b.n	80011ce <__aeabi_dadd+0x19a>
 80013ce:	0030      	movs	r0, r6
 80013d0:	3d1f      	subs	r5, #31
 80013d2:	40e8      	lsrs	r0, r5
 80013d4:	2b20      	cmp	r3, #32
 80013d6:	d003      	beq.n	80013e0 <__aeabi_dadd+0x3ac>
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	1acb      	subs	r3, r1, r3
 80013dc:	409e      	lsls	r6, r3
 80013de:	4337      	orrs	r7, r6
 80013e0:	1e7b      	subs	r3, r7, #1
 80013e2:	419f      	sbcs	r7, r3
 80013e4:	2207      	movs	r2, #7
 80013e6:	4307      	orrs	r7, r0
 80013e8:	403a      	ands	r2, r7
 80013ea:	2100      	movs	r1, #0
 80013ec:	2500      	movs	r5, #0
 80013ee:	e789      	b.n	8001304 <__aeabi_dadd+0x2d0>
 80013f0:	1a17      	subs	r7, r2, r0
 80013f2:	4643      	mov	r3, r8
 80013f4:	42ba      	cmp	r2, r7
 80013f6:	41b6      	sbcs	r6, r6
 80013f8:	1a59      	subs	r1, r3, r1
 80013fa:	4276      	negs	r6, r6
 80013fc:	1b8e      	subs	r6, r1, r6
 80013fe:	4664      	mov	r4, ip
 8001400:	e64e      	b.n	80010a0 <__aeabi_dadd+0x6c>
 8001402:	2b1f      	cmp	r3, #31
 8001404:	dd00      	ble.n	8001408 <__aeabi_dadd+0x3d4>
 8001406:	e0ad      	b.n	8001564 <__aeabi_dadd+0x530>
 8001408:	2620      	movs	r6, #32
 800140a:	4647      	mov	r7, r8
 800140c:	1af6      	subs	r6, r6, r3
 800140e:	40b7      	lsls	r7, r6
 8001410:	46b9      	mov	r9, r7
 8001412:	0017      	movs	r7, r2
 8001414:	46b2      	mov	sl, r6
 8001416:	40df      	lsrs	r7, r3
 8001418:	464e      	mov	r6, r9
 800141a:	433e      	orrs	r6, r7
 800141c:	0037      	movs	r7, r6
 800141e:	4656      	mov	r6, sl
 8001420:	40b2      	lsls	r2, r6
 8001422:	1e56      	subs	r6, r2, #1
 8001424:	41b2      	sbcs	r2, r6
 8001426:	4317      	orrs	r7, r2
 8001428:	4642      	mov	r2, r8
 800142a:	40da      	lsrs	r2, r3
 800142c:	1889      	adds	r1, r1, r2
 800142e:	e6ae      	b.n	800118e <__aeabi_dadd+0x15a>
 8001430:	000007ff 	.word	0x000007ff
 8001434:	ff7fffff 	.word	0xff7fffff
 8001438:	800fffff 	.word	0x800fffff
 800143c:	2620      	movs	r6, #32
 800143e:	4647      	mov	r7, r8
 8001440:	1af6      	subs	r6, r6, r3
 8001442:	40b7      	lsls	r7, r6
 8001444:	46b9      	mov	r9, r7
 8001446:	0017      	movs	r7, r2
 8001448:	46b2      	mov	sl, r6
 800144a:	40df      	lsrs	r7, r3
 800144c:	464e      	mov	r6, r9
 800144e:	433e      	orrs	r6, r7
 8001450:	0037      	movs	r7, r6
 8001452:	4656      	mov	r6, sl
 8001454:	40b2      	lsls	r2, r6
 8001456:	1e56      	subs	r6, r2, #1
 8001458:	41b2      	sbcs	r2, r6
 800145a:	4317      	orrs	r7, r2
 800145c:	4642      	mov	r2, r8
 800145e:	40da      	lsrs	r2, r3
 8001460:	1a89      	subs	r1, r1, r2
 8001462:	e799      	b.n	8001398 <__aeabi_dadd+0x364>
 8001464:	4c7f      	ldr	r4, [pc, #508]	; (8001664 <__aeabi_dadd+0x630>)
 8001466:	42a6      	cmp	r6, r4
 8001468:	d05b      	beq.n	8001522 <__aeabi_dadd+0x4ee>
 800146a:	2480      	movs	r4, #128	; 0x80
 800146c:	0424      	lsls	r4, r4, #16
 800146e:	425b      	negs	r3, r3
 8001470:	4321      	orrs	r1, r4
 8001472:	e727      	b.n	80012c4 <__aeabi_dadd+0x290>
 8001474:	2e00      	cmp	r6, #0
 8001476:	d10c      	bne.n	8001492 <__aeabi_dadd+0x45e>
 8001478:	2b00      	cmp	r3, #0
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x44a>
 800147c:	e0cb      	b.n	8001616 <__aeabi_dadd+0x5e2>
 800147e:	4664      	mov	r4, ip
 8001480:	0039      	movs	r1, r7
 8001482:	0010      	movs	r0, r2
 8001484:	4d77      	ldr	r5, [pc, #476]	; (8001664 <__aeabi_dadd+0x630>)
 8001486:	e6d7      	b.n	8001238 <__aeabi_dadd+0x204>
 8001488:	4f76      	ldr	r7, [pc, #472]	; (8001664 <__aeabi_dadd+0x630>)
 800148a:	42bb      	cmp	r3, r7
 800148c:	d018      	beq.n	80014c0 <__aeabi_dadd+0x48c>
 800148e:	0033      	movs	r3, r6
 8001490:	e675      	b.n	800117e <__aeabi_dadd+0x14a>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d014      	beq.n	80014c0 <__aeabi_dadd+0x48c>
 8001496:	074b      	lsls	r3, r1, #29
 8001498:	08c0      	lsrs	r0, r0, #3
 800149a:	4318      	orrs	r0, r3
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	08c9      	lsrs	r1, r1, #3
 80014a0:	031b      	lsls	r3, r3, #12
 80014a2:	4219      	tst	r1, r3
 80014a4:	d007      	beq.n	80014b6 <__aeabi_dadd+0x482>
 80014a6:	08fc      	lsrs	r4, r7, #3
 80014a8:	421c      	tst	r4, r3
 80014aa:	d104      	bne.n	80014b6 <__aeabi_dadd+0x482>
 80014ac:	0779      	lsls	r1, r7, #29
 80014ae:	08d0      	lsrs	r0, r2, #3
 80014b0:	4308      	orrs	r0, r1
 80014b2:	46e1      	mov	r9, ip
 80014b4:	0021      	movs	r1, r4
 80014b6:	464c      	mov	r4, r9
 80014b8:	0f42      	lsrs	r2, r0, #29
 80014ba:	00c9      	lsls	r1, r1, #3
 80014bc:	4311      	orrs	r1, r2
 80014be:	00c0      	lsls	r0, r0, #3
 80014c0:	4d68      	ldr	r5, [pc, #416]	; (8001664 <__aeabi_dadd+0x630>)
 80014c2:	e6b9      	b.n	8001238 <__aeabi_dadd+0x204>
 80014c4:	001d      	movs	r5, r3
 80014c6:	2200      	movs	r2, #0
 80014c8:	2300      	movs	r3, #0
 80014ca:	e6c0      	b.n	800124e <__aeabi_dadd+0x21a>
 80014cc:	2d00      	cmp	r5, #0
 80014ce:	d15b      	bne.n	8001588 <__aeabi_dadd+0x554>
 80014d0:	000d      	movs	r5, r1
 80014d2:	4305      	orrs	r5, r0
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x4a4>
 80014d6:	e6e2      	b.n	800129e <__aeabi_dadd+0x26a>
 80014d8:	1c5d      	adds	r5, r3, #1
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x4aa>
 80014dc:	e0b0      	b.n	8001640 <__aeabi_dadd+0x60c>
 80014de:	4d61      	ldr	r5, [pc, #388]	; (8001664 <__aeabi_dadd+0x630>)
 80014e0:	42ae      	cmp	r6, r5
 80014e2:	d01f      	beq.n	8001524 <__aeabi_dadd+0x4f0>
 80014e4:	43db      	mvns	r3, r3
 80014e6:	2b38      	cmp	r3, #56	; 0x38
 80014e8:	dc71      	bgt.n	80015ce <__aeabi_dadd+0x59a>
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x4bc>
 80014ee:	e096      	b.n	800161e <__aeabi_dadd+0x5ea>
 80014f0:	2520      	movs	r5, #32
 80014f2:	000f      	movs	r7, r1
 80014f4:	1aed      	subs	r5, r5, r3
 80014f6:	40af      	lsls	r7, r5
 80014f8:	46b9      	mov	r9, r7
 80014fa:	0007      	movs	r7, r0
 80014fc:	46aa      	mov	sl, r5
 80014fe:	40df      	lsrs	r7, r3
 8001500:	464d      	mov	r5, r9
 8001502:	433d      	orrs	r5, r7
 8001504:	002f      	movs	r7, r5
 8001506:	4655      	mov	r5, sl
 8001508:	40a8      	lsls	r0, r5
 800150a:	40d9      	lsrs	r1, r3
 800150c:	1e45      	subs	r5, r0, #1
 800150e:	41a8      	sbcs	r0, r5
 8001510:	4488      	add	r8, r1
 8001512:	4307      	orrs	r7, r0
 8001514:	18bf      	adds	r7, r7, r2
 8001516:	4297      	cmp	r7, r2
 8001518:	4192      	sbcs	r2, r2
 800151a:	4251      	negs	r1, r2
 800151c:	4441      	add	r1, r8
 800151e:	0035      	movs	r5, r6
 8001520:	e63a      	b.n	8001198 <__aeabi_dadd+0x164>
 8001522:	4664      	mov	r4, ip
 8001524:	0035      	movs	r5, r6
 8001526:	4641      	mov	r1, r8
 8001528:	0010      	movs	r0, r2
 800152a:	e685      	b.n	8001238 <__aeabi_dadd+0x204>
 800152c:	000b      	movs	r3, r1
 800152e:	4303      	orrs	r3, r0
 8001530:	2d00      	cmp	r5, #0
 8001532:	d000      	beq.n	8001536 <__aeabi_dadd+0x502>
 8001534:	e663      	b.n	80011fe <__aeabi_dadd+0x1ca>
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f5      	beq.n	8001526 <__aeabi_dadd+0x4f2>
 800153a:	4643      	mov	r3, r8
 800153c:	4313      	orrs	r3, r2
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x50e>
 8001540:	e67a      	b.n	8001238 <__aeabi_dadd+0x204>
 8001542:	1887      	adds	r7, r0, r2
 8001544:	4287      	cmp	r7, r0
 8001546:	4180      	sbcs	r0, r0
 8001548:	2207      	movs	r2, #7
 800154a:	4441      	add	r1, r8
 800154c:	4240      	negs	r0, r0
 800154e:	1809      	adds	r1, r1, r0
 8001550:	403a      	ands	r2, r7
 8001552:	020b      	lsls	r3, r1, #8
 8001554:	d400      	bmi.n	8001558 <__aeabi_dadd+0x524>
 8001556:	e6d5      	b.n	8001304 <__aeabi_dadd+0x2d0>
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <__aeabi_dadd+0x634>)
 800155a:	3501      	adds	r5, #1
 800155c:	4019      	ands	r1, r3
 800155e:	e5c9      	b.n	80010f4 <__aeabi_dadd+0xc0>
 8001560:	0038      	movs	r0, r7
 8001562:	e669      	b.n	8001238 <__aeabi_dadd+0x204>
 8001564:	001e      	movs	r6, r3
 8001566:	4647      	mov	r7, r8
 8001568:	3e20      	subs	r6, #32
 800156a:	40f7      	lsrs	r7, r6
 800156c:	46bc      	mov	ip, r7
 800156e:	2b20      	cmp	r3, #32
 8001570:	d004      	beq.n	800157c <__aeabi_dadd+0x548>
 8001572:	2640      	movs	r6, #64	; 0x40
 8001574:	1af3      	subs	r3, r6, r3
 8001576:	4646      	mov	r6, r8
 8001578:	409e      	lsls	r6, r3
 800157a:	4332      	orrs	r2, r6
 800157c:	0017      	movs	r7, r2
 800157e:	4663      	mov	r3, ip
 8001580:	1e7a      	subs	r2, r7, #1
 8001582:	4197      	sbcs	r7, r2
 8001584:	431f      	orrs	r7, r3
 8001586:	e602      	b.n	800118e <__aeabi_dadd+0x15a>
 8001588:	4d36      	ldr	r5, [pc, #216]	; (8001664 <__aeabi_dadd+0x630>)
 800158a:	42ae      	cmp	r6, r5
 800158c:	d0ca      	beq.n	8001524 <__aeabi_dadd+0x4f0>
 800158e:	2580      	movs	r5, #128	; 0x80
 8001590:	042d      	lsls	r5, r5, #16
 8001592:	425b      	negs	r3, r3
 8001594:	4329      	orrs	r1, r5
 8001596:	e7a6      	b.n	80014e6 <__aeabi_dadd+0x4b2>
 8001598:	4308      	orrs	r0, r1
 800159a:	1e41      	subs	r1, r0, #1
 800159c:	4188      	sbcs	r0, r1
 800159e:	e6a6      	b.n	80012ee <__aeabi_dadd+0x2ba>
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dadd+0x572>
 80015a4:	e648      	b.n	8001238 <__aeabi_dadd+0x204>
 80015a6:	1a87      	subs	r7, r0, r2
 80015a8:	4643      	mov	r3, r8
 80015aa:	42b8      	cmp	r0, r7
 80015ac:	41b6      	sbcs	r6, r6
 80015ae:	1acb      	subs	r3, r1, r3
 80015b0:	4276      	negs	r6, r6
 80015b2:	1b9e      	subs	r6, r3, r6
 80015b4:	0233      	lsls	r3, r6, #8
 80015b6:	d54b      	bpl.n	8001650 <__aeabi_dadd+0x61c>
 80015b8:	1a17      	subs	r7, r2, r0
 80015ba:	4643      	mov	r3, r8
 80015bc:	42ba      	cmp	r2, r7
 80015be:	4192      	sbcs	r2, r2
 80015c0:	1a59      	subs	r1, r3, r1
 80015c2:	4252      	negs	r2, r2
 80015c4:	1a89      	subs	r1, r1, r2
 80015c6:	2207      	movs	r2, #7
 80015c8:	4664      	mov	r4, ip
 80015ca:	403a      	ands	r2, r7
 80015cc:	e592      	b.n	80010f4 <__aeabi_dadd+0xc0>
 80015ce:	4301      	orrs	r1, r0
 80015d0:	000f      	movs	r7, r1
 80015d2:	1e79      	subs	r1, r7, #1
 80015d4:	418f      	sbcs	r7, r1
 80015d6:	e79d      	b.n	8001514 <__aeabi_dadd+0x4e0>
 80015d8:	001c      	movs	r4, r3
 80015da:	000f      	movs	r7, r1
 80015dc:	3c20      	subs	r4, #32
 80015de:	40e7      	lsrs	r7, r4
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d003      	beq.n	80015ec <__aeabi_dadd+0x5b8>
 80015e4:	2440      	movs	r4, #64	; 0x40
 80015e6:	1ae3      	subs	r3, r4, r3
 80015e8:	4099      	lsls	r1, r3
 80015ea:	4308      	orrs	r0, r1
 80015ec:	1e41      	subs	r1, r0, #1
 80015ee:	4188      	sbcs	r0, r1
 80015f0:	4338      	orrs	r0, r7
 80015f2:	e67c      	b.n	80012ee <__aeabi_dadd+0x2ba>
 80015f4:	2200      	movs	r2, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	e625      	b.n	8001246 <__aeabi_dadd+0x212>
 80015fa:	1a17      	subs	r7, r2, r0
 80015fc:	4643      	mov	r3, r8
 80015fe:	42ba      	cmp	r2, r7
 8001600:	4192      	sbcs	r2, r2
 8001602:	1a59      	subs	r1, r3, r1
 8001604:	4252      	negs	r2, r2
 8001606:	1a89      	subs	r1, r1, r2
 8001608:	4664      	mov	r4, ip
 800160a:	0035      	movs	r5, r6
 800160c:	e543      	b.n	8001096 <__aeabi_dadd+0x62>
 800160e:	4641      	mov	r1, r8
 8001610:	0010      	movs	r0, r2
 8001612:	4d14      	ldr	r5, [pc, #80]	; (8001664 <__aeabi_dadd+0x630>)
 8001614:	e610      	b.n	8001238 <__aeabi_dadd+0x204>
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	2400      	movs	r4, #0
 800161a:	0312      	lsls	r2, r2, #12
 800161c:	e680      	b.n	8001320 <__aeabi_dadd+0x2ec>
 800161e:	001d      	movs	r5, r3
 8001620:	000f      	movs	r7, r1
 8001622:	3d20      	subs	r5, #32
 8001624:	40ef      	lsrs	r7, r5
 8001626:	46bc      	mov	ip, r7
 8001628:	2b20      	cmp	r3, #32
 800162a:	d003      	beq.n	8001634 <__aeabi_dadd+0x600>
 800162c:	2540      	movs	r5, #64	; 0x40
 800162e:	1aeb      	subs	r3, r5, r3
 8001630:	4099      	lsls	r1, r3
 8001632:	4308      	orrs	r0, r1
 8001634:	0007      	movs	r7, r0
 8001636:	4663      	mov	r3, ip
 8001638:	1e78      	subs	r0, r7, #1
 800163a:	4187      	sbcs	r7, r0
 800163c:	431f      	orrs	r7, r3
 800163e:	e769      	b.n	8001514 <__aeabi_dadd+0x4e0>
 8001640:	1887      	adds	r7, r0, r2
 8001642:	4297      	cmp	r7, r2
 8001644:	419b      	sbcs	r3, r3
 8001646:	4441      	add	r1, r8
 8001648:	425b      	negs	r3, r3
 800164a:	18c9      	adds	r1, r1, r3
 800164c:	0035      	movs	r5, r6
 800164e:	e5a3      	b.n	8001198 <__aeabi_dadd+0x164>
 8001650:	003b      	movs	r3, r7
 8001652:	4333      	orrs	r3, r6
 8001654:	d0ce      	beq.n	80015f4 <__aeabi_dadd+0x5c0>
 8001656:	2207      	movs	r2, #7
 8001658:	0031      	movs	r1, r6
 800165a:	403a      	ands	r2, r7
 800165c:	e652      	b.n	8001304 <__aeabi_dadd+0x2d0>
 800165e:	2300      	movs	r3, #0
 8001660:	001a      	movs	r2, r3
 8001662:	e5f4      	b.n	800124e <__aeabi_dadd+0x21a>
 8001664:	000007ff 	.word	0x000007ff
 8001668:	ff7fffff 	.word	0xff7fffff

0800166c <__aeabi_ddiv>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4657      	mov	r7, sl
 8001670:	46de      	mov	lr, fp
 8001672:	464e      	mov	r6, r9
 8001674:	4645      	mov	r5, r8
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	4683      	mov	fp, r0
 800167a:	0007      	movs	r7, r0
 800167c:	030e      	lsls	r6, r1, #12
 800167e:	0048      	lsls	r0, r1, #1
 8001680:	b085      	sub	sp, #20
 8001682:	4692      	mov	sl, r2
 8001684:	001c      	movs	r4, r3
 8001686:	0b36      	lsrs	r6, r6, #12
 8001688:	0d40      	lsrs	r0, r0, #21
 800168a:	0fcd      	lsrs	r5, r1, #31
 800168c:	2800      	cmp	r0, #0
 800168e:	d100      	bne.n	8001692 <__aeabi_ddiv+0x26>
 8001690:	e09d      	b.n	80017ce <__aeabi_ddiv+0x162>
 8001692:	4b95      	ldr	r3, [pc, #596]	; (80018e8 <__aeabi_ddiv+0x27c>)
 8001694:	4298      	cmp	r0, r3
 8001696:	d039      	beq.n	800170c <__aeabi_ddiv+0xa0>
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	00f6      	lsls	r6, r6, #3
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431e      	orrs	r6, r3
 80016a0:	4a92      	ldr	r2, [pc, #584]	; (80018ec <__aeabi_ddiv+0x280>)
 80016a2:	0f7b      	lsrs	r3, r7, #29
 80016a4:	4333      	orrs	r3, r6
 80016a6:	4699      	mov	r9, r3
 80016a8:	4694      	mov	ip, r2
 80016aa:	0003      	movs	r3, r0
 80016ac:	4463      	add	r3, ip
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	2600      	movs	r6, #0
 80016b4:	00ff      	lsls	r7, r7, #3
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	0323      	lsls	r3, r4, #12
 80016ba:	0b1b      	lsrs	r3, r3, #12
 80016bc:	4698      	mov	r8, r3
 80016be:	0063      	lsls	r3, r4, #1
 80016c0:	0fe4      	lsrs	r4, r4, #31
 80016c2:	4652      	mov	r2, sl
 80016c4:	0d5b      	lsrs	r3, r3, #21
 80016c6:	9401      	str	r4, [sp, #4]
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x60>
 80016ca:	e0b3      	b.n	8001834 <__aeabi_ddiv+0x1c8>
 80016cc:	4986      	ldr	r1, [pc, #536]	; (80018e8 <__aeabi_ddiv+0x27c>)
 80016ce:	428b      	cmp	r3, r1
 80016d0:	d100      	bne.n	80016d4 <__aeabi_ddiv+0x68>
 80016d2:	e09e      	b.n	8001812 <__aeabi_ddiv+0x1a6>
 80016d4:	4642      	mov	r2, r8
 80016d6:	00d1      	lsls	r1, r2, #3
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	0412      	lsls	r2, r2, #16
 80016dc:	430a      	orrs	r2, r1
 80016de:	4651      	mov	r1, sl
 80016e0:	0f49      	lsrs	r1, r1, #29
 80016e2:	4311      	orrs	r1, r2
 80016e4:	468b      	mov	fp, r1
 80016e6:	4981      	ldr	r1, [pc, #516]	; (80018ec <__aeabi_ddiv+0x280>)
 80016e8:	4652      	mov	r2, sl
 80016ea:	468c      	mov	ip, r1
 80016ec:	9900      	ldr	r1, [sp, #0]
 80016ee:	4463      	add	r3, ip
 80016f0:	1acb      	subs	r3, r1, r3
 80016f2:	2100      	movs	r1, #0
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	002b      	movs	r3, r5
 80016fa:	4063      	eors	r3, r4
 80016fc:	469a      	mov	sl, r3
 80016fe:	2e0f      	cmp	r6, #15
 8001700:	d900      	bls.n	8001704 <__aeabi_ddiv+0x98>
 8001702:	e105      	b.n	8001910 <__aeabi_ddiv+0x2a4>
 8001704:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <__aeabi_ddiv+0x284>)
 8001706:	00b6      	lsls	r6, r6, #2
 8001708:	599b      	ldr	r3, [r3, r6]
 800170a:	469f      	mov	pc, r3
 800170c:	465b      	mov	r3, fp
 800170e:	4333      	orrs	r3, r6
 8001710:	4699      	mov	r9, r3
 8001712:	d000      	beq.n	8001716 <__aeabi_ddiv+0xaa>
 8001714:	e0b8      	b.n	8001888 <__aeabi_ddiv+0x21c>
 8001716:	2302      	movs	r3, #2
 8001718:	2608      	movs	r6, #8
 800171a:	2700      	movs	r7, #0
 800171c:	9000      	str	r0, [sp, #0]
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	e7ca      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 8001722:	46cb      	mov	fp, r9
 8001724:	003a      	movs	r2, r7
 8001726:	9902      	ldr	r1, [sp, #8]
 8001728:	9501      	str	r5, [sp, #4]
 800172a:	9b01      	ldr	r3, [sp, #4]
 800172c:	469a      	mov	sl, r3
 800172e:	2902      	cmp	r1, #2
 8001730:	d027      	beq.n	8001782 <__aeabi_ddiv+0x116>
 8001732:	2903      	cmp	r1, #3
 8001734:	d100      	bne.n	8001738 <__aeabi_ddiv+0xcc>
 8001736:	e280      	b.n	8001c3a <__aeabi_ddiv+0x5ce>
 8001738:	2901      	cmp	r1, #1
 800173a:	d044      	beq.n	80017c6 <__aeabi_ddiv+0x15a>
 800173c:	496d      	ldr	r1, [pc, #436]	; (80018f4 <__aeabi_ddiv+0x288>)
 800173e:	9b00      	ldr	r3, [sp, #0]
 8001740:	468c      	mov	ip, r1
 8001742:	4463      	add	r3, ip
 8001744:	001c      	movs	r4, r3
 8001746:	2c00      	cmp	r4, #0
 8001748:	dd38      	ble.n	80017bc <__aeabi_ddiv+0x150>
 800174a:	0753      	lsls	r3, r2, #29
 800174c:	d000      	beq.n	8001750 <__aeabi_ddiv+0xe4>
 800174e:	e213      	b.n	8001b78 <__aeabi_ddiv+0x50c>
 8001750:	08d2      	lsrs	r2, r2, #3
 8001752:	465b      	mov	r3, fp
 8001754:	01db      	lsls	r3, r3, #7
 8001756:	d509      	bpl.n	800176c <__aeabi_ddiv+0x100>
 8001758:	4659      	mov	r1, fp
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <__aeabi_ddiv+0x28c>)
 800175c:	4019      	ands	r1, r3
 800175e:	468b      	mov	fp, r1
 8001760:	2180      	movs	r1, #128	; 0x80
 8001762:	00c9      	lsls	r1, r1, #3
 8001764:	468c      	mov	ip, r1
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	4463      	add	r3, ip
 800176a:	001c      	movs	r4, r3
 800176c:	4b63      	ldr	r3, [pc, #396]	; (80018fc <__aeabi_ddiv+0x290>)
 800176e:	429c      	cmp	r4, r3
 8001770:	dc07      	bgt.n	8001782 <__aeabi_ddiv+0x116>
 8001772:	465b      	mov	r3, fp
 8001774:	0564      	lsls	r4, r4, #21
 8001776:	075f      	lsls	r7, r3, #29
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	4317      	orrs	r7, r2
 800177c:	0b1b      	lsrs	r3, r3, #12
 800177e:	0d62      	lsrs	r2, r4, #21
 8001780:	e002      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001782:	2300      	movs	r3, #0
 8001784:	2700      	movs	r7, #0
 8001786:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <__aeabi_ddiv+0x27c>)
 8001788:	2100      	movs	r1, #0
 800178a:	031b      	lsls	r3, r3, #12
 800178c:	0b1c      	lsrs	r4, r3, #12
 800178e:	0d0b      	lsrs	r3, r1, #20
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	4323      	orrs	r3, r4
 8001794:	0514      	lsls	r4, r2, #20
 8001796:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <__aeabi_ddiv+0x294>)
 8001798:	0038      	movs	r0, r7
 800179a:	4013      	ands	r3, r2
 800179c:	431c      	orrs	r4, r3
 800179e:	4653      	mov	r3, sl
 80017a0:	0064      	lsls	r4, r4, #1
 80017a2:	07db      	lsls	r3, r3, #31
 80017a4:	0864      	lsrs	r4, r4, #1
 80017a6:	431c      	orrs	r4, r3
 80017a8:	0021      	movs	r1, r4
 80017aa:	b005      	add	sp, #20
 80017ac:	bc3c      	pop	{r2, r3, r4, r5}
 80017ae:	4690      	mov	r8, r2
 80017b0:	4699      	mov	r9, r3
 80017b2:	46a2      	mov	sl, r4
 80017b4:	46ab      	mov	fp, r5
 80017b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b8:	2201      	movs	r2, #1
 80017ba:	4252      	negs	r2, r2
 80017bc:	2301      	movs	r3, #1
 80017be:	1b1b      	subs	r3, r3, r4
 80017c0:	2b38      	cmp	r3, #56	; 0x38
 80017c2:	dc00      	bgt.n	80017c6 <__aeabi_ddiv+0x15a>
 80017c4:	e1ad      	b.n	8001b22 <__aeabi_ddiv+0x4b6>
 80017c6:	2200      	movs	r2, #0
 80017c8:	2300      	movs	r3, #0
 80017ca:	2700      	movs	r7, #0
 80017cc:	e7dc      	b.n	8001788 <__aeabi_ddiv+0x11c>
 80017ce:	465b      	mov	r3, fp
 80017d0:	4333      	orrs	r3, r6
 80017d2:	4699      	mov	r9, r3
 80017d4:	d05e      	beq.n	8001894 <__aeabi_ddiv+0x228>
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	d100      	bne.n	80017dc <__aeabi_ddiv+0x170>
 80017da:	e18a      	b.n	8001af2 <__aeabi_ddiv+0x486>
 80017dc:	0030      	movs	r0, r6
 80017de:	f001 fa9d 	bl	8002d1c <__clzsi2>
 80017e2:	0003      	movs	r3, r0
 80017e4:	3b0b      	subs	r3, #11
 80017e6:	2b1c      	cmp	r3, #28
 80017e8:	dd00      	ble.n	80017ec <__aeabi_ddiv+0x180>
 80017ea:	e17b      	b.n	8001ae4 <__aeabi_ddiv+0x478>
 80017ec:	221d      	movs	r2, #29
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	465a      	mov	r2, fp
 80017f2:	0001      	movs	r1, r0
 80017f4:	40da      	lsrs	r2, r3
 80017f6:	3908      	subs	r1, #8
 80017f8:	408e      	lsls	r6, r1
 80017fa:	0013      	movs	r3, r2
 80017fc:	465f      	mov	r7, fp
 80017fe:	4333      	orrs	r3, r6
 8001800:	4699      	mov	r9, r3
 8001802:	408f      	lsls	r7, r1
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <__aeabi_ddiv+0x298>)
 8001806:	2600      	movs	r6, #0
 8001808:	1a1b      	subs	r3, r3, r0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	e752      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 8001812:	4641      	mov	r1, r8
 8001814:	4653      	mov	r3, sl
 8001816:	430b      	orrs	r3, r1
 8001818:	493b      	ldr	r1, [pc, #236]	; (8001908 <__aeabi_ddiv+0x29c>)
 800181a:	469b      	mov	fp, r3
 800181c:	468c      	mov	ip, r1
 800181e:	9b00      	ldr	r3, [sp, #0]
 8001820:	4463      	add	r3, ip
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	465b      	mov	r3, fp
 8001826:	2b00      	cmp	r3, #0
 8001828:	d13b      	bne.n	80018a2 <__aeabi_ddiv+0x236>
 800182a:	2302      	movs	r3, #2
 800182c:	2200      	movs	r2, #0
 800182e:	431e      	orrs	r6, r3
 8001830:	2102      	movs	r1, #2
 8001832:	e761      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 8001834:	4643      	mov	r3, r8
 8001836:	4313      	orrs	r3, r2
 8001838:	469b      	mov	fp, r3
 800183a:	d037      	beq.n	80018ac <__aeabi_ddiv+0x240>
 800183c:	4643      	mov	r3, r8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_ddiv+0x1d8>
 8001842:	e162      	b.n	8001b0a <__aeabi_ddiv+0x49e>
 8001844:	4640      	mov	r0, r8
 8001846:	f001 fa69 	bl	8002d1c <__clzsi2>
 800184a:	0003      	movs	r3, r0
 800184c:	3b0b      	subs	r3, #11
 800184e:	2b1c      	cmp	r3, #28
 8001850:	dd00      	ble.n	8001854 <__aeabi_ddiv+0x1e8>
 8001852:	e153      	b.n	8001afc <__aeabi_ddiv+0x490>
 8001854:	0002      	movs	r2, r0
 8001856:	4641      	mov	r1, r8
 8001858:	3a08      	subs	r2, #8
 800185a:	4091      	lsls	r1, r2
 800185c:	4688      	mov	r8, r1
 800185e:	211d      	movs	r1, #29
 8001860:	1acb      	subs	r3, r1, r3
 8001862:	4651      	mov	r1, sl
 8001864:	40d9      	lsrs	r1, r3
 8001866:	000b      	movs	r3, r1
 8001868:	4641      	mov	r1, r8
 800186a:	430b      	orrs	r3, r1
 800186c:	469b      	mov	fp, r3
 800186e:	4653      	mov	r3, sl
 8001870:	4093      	lsls	r3, r2
 8001872:	001a      	movs	r2, r3
 8001874:	9b00      	ldr	r3, [sp, #0]
 8001876:	4925      	ldr	r1, [pc, #148]	; (800190c <__aeabi_ddiv+0x2a0>)
 8001878:	469c      	mov	ip, r3
 800187a:	4460      	add	r0, ip
 800187c:	0003      	movs	r3, r0
 800187e:	468c      	mov	ip, r1
 8001880:	4463      	add	r3, ip
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2100      	movs	r1, #0
 8001886:	e737      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 8001888:	2303      	movs	r3, #3
 800188a:	46b1      	mov	r9, r6
 800188c:	9000      	str	r0, [sp, #0]
 800188e:	260c      	movs	r6, #12
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	e711      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 8001894:	2300      	movs	r3, #0
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	2604      	movs	r6, #4
 800189c:	2700      	movs	r7, #0
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	e70a      	b.n	80016b8 <__aeabi_ddiv+0x4c>
 80018a2:	2303      	movs	r3, #3
 80018a4:	46c3      	mov	fp, r8
 80018a6:	431e      	orrs	r6, r3
 80018a8:	2103      	movs	r1, #3
 80018aa:	e725      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 80018ac:	3301      	adds	r3, #1
 80018ae:	431e      	orrs	r6, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	2101      	movs	r1, #1
 80018b4:	e720      	b.n	80016f8 <__aeabi_ddiv+0x8c>
 80018b6:	2300      	movs	r3, #0
 80018b8:	469a      	mov	sl, r3
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	2700      	movs	r7, #0
 80018be:	031b      	lsls	r3, r3, #12
 80018c0:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <__aeabi_ddiv+0x27c>)
 80018c2:	e761      	b.n	8001788 <__aeabi_ddiv+0x11c>
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	4649      	mov	r1, r9
 80018c8:	031b      	lsls	r3, r3, #12
 80018ca:	4219      	tst	r1, r3
 80018cc:	d100      	bne.n	80018d0 <__aeabi_ddiv+0x264>
 80018ce:	e0e2      	b.n	8001a96 <__aeabi_ddiv+0x42a>
 80018d0:	4659      	mov	r1, fp
 80018d2:	4219      	tst	r1, r3
 80018d4:	d000      	beq.n	80018d8 <__aeabi_ddiv+0x26c>
 80018d6:	e0de      	b.n	8001a96 <__aeabi_ddiv+0x42a>
 80018d8:	430b      	orrs	r3, r1
 80018da:	031b      	lsls	r3, r3, #12
 80018dc:	0017      	movs	r7, r2
 80018de:	0b1b      	lsrs	r3, r3, #12
 80018e0:	46a2      	mov	sl, r4
 80018e2:	4a01      	ldr	r2, [pc, #4]	; (80018e8 <__aeabi_ddiv+0x27c>)
 80018e4:	e750      	b.n	8001788 <__aeabi_ddiv+0x11c>
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	000007ff 	.word	0x000007ff
 80018ec:	fffffc01 	.word	0xfffffc01
 80018f0:	0801787c 	.word	0x0801787c
 80018f4:	000003ff 	.word	0x000003ff
 80018f8:	feffffff 	.word	0xfeffffff
 80018fc:	000007fe 	.word	0x000007fe
 8001900:	800fffff 	.word	0x800fffff
 8001904:	fffffc0d 	.word	0xfffffc0d
 8001908:	fffff801 	.word	0xfffff801
 800190c:	000003f3 	.word	0x000003f3
 8001910:	45d9      	cmp	r9, fp
 8001912:	d900      	bls.n	8001916 <__aeabi_ddiv+0x2aa>
 8001914:	e0cb      	b.n	8001aae <__aeabi_ddiv+0x442>
 8001916:	d100      	bne.n	800191a <__aeabi_ddiv+0x2ae>
 8001918:	e0c6      	b.n	8001aa8 <__aeabi_ddiv+0x43c>
 800191a:	003c      	movs	r4, r7
 800191c:	4648      	mov	r0, r9
 800191e:	2700      	movs	r7, #0
 8001920:	9b00      	ldr	r3, [sp, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	465b      	mov	r3, fp
 8001928:	0e16      	lsrs	r6, r2, #24
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	431e      	orrs	r6, r3
 800192e:	0213      	lsls	r3, r2, #8
 8001930:	4698      	mov	r8, r3
 8001932:	0433      	lsls	r3, r6, #16
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	4699      	mov	r9, r3
 8001938:	0c31      	lsrs	r1, r6, #16
 800193a:	9101      	str	r1, [sp, #4]
 800193c:	f7fe fc84 	bl	8000248 <__aeabi_uidivmod>
 8001940:	464a      	mov	r2, r9
 8001942:	4342      	muls	r2, r0
 8001944:	040b      	lsls	r3, r1, #16
 8001946:	0c21      	lsrs	r1, r4, #16
 8001948:	0005      	movs	r5, r0
 800194a:	4319      	orrs	r1, r3
 800194c:	428a      	cmp	r2, r1
 800194e:	d907      	bls.n	8001960 <__aeabi_ddiv+0x2f4>
 8001950:	1989      	adds	r1, r1, r6
 8001952:	3d01      	subs	r5, #1
 8001954:	428e      	cmp	r6, r1
 8001956:	d803      	bhi.n	8001960 <__aeabi_ddiv+0x2f4>
 8001958:	428a      	cmp	r2, r1
 800195a:	d901      	bls.n	8001960 <__aeabi_ddiv+0x2f4>
 800195c:	1e85      	subs	r5, r0, #2
 800195e:	1989      	adds	r1, r1, r6
 8001960:	1a88      	subs	r0, r1, r2
 8001962:	9901      	ldr	r1, [sp, #4]
 8001964:	f7fe fc70 	bl	8000248 <__aeabi_uidivmod>
 8001968:	0409      	lsls	r1, r1, #16
 800196a:	468c      	mov	ip, r1
 800196c:	464a      	mov	r2, r9
 800196e:	0421      	lsls	r1, r4, #16
 8001970:	4664      	mov	r4, ip
 8001972:	4342      	muls	r2, r0
 8001974:	0c09      	lsrs	r1, r1, #16
 8001976:	0003      	movs	r3, r0
 8001978:	4321      	orrs	r1, r4
 800197a:	428a      	cmp	r2, r1
 800197c:	d904      	bls.n	8001988 <__aeabi_ddiv+0x31c>
 800197e:	1989      	adds	r1, r1, r6
 8001980:	3b01      	subs	r3, #1
 8001982:	428e      	cmp	r6, r1
 8001984:	d800      	bhi.n	8001988 <__aeabi_ddiv+0x31c>
 8001986:	e0f1      	b.n	8001b6c <__aeabi_ddiv+0x500>
 8001988:	042d      	lsls	r5, r5, #16
 800198a:	431d      	orrs	r5, r3
 800198c:	46ab      	mov	fp, r5
 800198e:	4643      	mov	r3, r8
 8001990:	1a89      	subs	r1, r1, r2
 8001992:	4642      	mov	r2, r8
 8001994:	0c28      	lsrs	r0, r5, #16
 8001996:	0412      	lsls	r2, r2, #16
 8001998:	0c1d      	lsrs	r5, r3, #16
 800199a:	465b      	mov	r3, fp
 800199c:	0c14      	lsrs	r4, r2, #16
 800199e:	0022      	movs	r2, r4
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	435a      	muls	r2, r3
 80019a6:	9403      	str	r4, [sp, #12]
 80019a8:	436b      	muls	r3, r5
 80019aa:	4344      	muls	r4, r0
 80019ac:	9502      	str	r5, [sp, #8]
 80019ae:	4368      	muls	r0, r5
 80019b0:	191b      	adds	r3, r3, r4
 80019b2:	0c15      	lsrs	r5, r2, #16
 80019b4:	18eb      	adds	r3, r5, r3
 80019b6:	429c      	cmp	r4, r3
 80019b8:	d903      	bls.n	80019c2 <__aeabi_ddiv+0x356>
 80019ba:	2480      	movs	r4, #128	; 0x80
 80019bc:	0264      	lsls	r4, r4, #9
 80019be:	46a4      	mov	ip, r4
 80019c0:	4460      	add	r0, ip
 80019c2:	0c1c      	lsrs	r4, r3, #16
 80019c4:	0415      	lsls	r5, r2, #16
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	0c2d      	lsrs	r5, r5, #16
 80019ca:	1820      	adds	r0, r4, r0
 80019cc:	195d      	adds	r5, r3, r5
 80019ce:	4281      	cmp	r1, r0
 80019d0:	d377      	bcc.n	8001ac2 <__aeabi_ddiv+0x456>
 80019d2:	d073      	beq.n	8001abc <__aeabi_ddiv+0x450>
 80019d4:	1a0c      	subs	r4, r1, r0
 80019d6:	4aa2      	ldr	r2, [pc, #648]	; (8001c60 <__aeabi_ddiv+0x5f4>)
 80019d8:	1b7d      	subs	r5, r7, r5
 80019da:	42af      	cmp	r7, r5
 80019dc:	41bf      	sbcs	r7, r7
 80019de:	4694      	mov	ip, r2
 80019e0:	9b00      	ldr	r3, [sp, #0]
 80019e2:	427f      	negs	r7, r7
 80019e4:	4463      	add	r3, ip
 80019e6:	1be0      	subs	r0, r4, r7
 80019e8:	001c      	movs	r4, r3
 80019ea:	4286      	cmp	r6, r0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_ddiv+0x384>
 80019ee:	e0db      	b.n	8001ba8 <__aeabi_ddiv+0x53c>
 80019f0:	9901      	ldr	r1, [sp, #4]
 80019f2:	f7fe fc29 	bl	8000248 <__aeabi_uidivmod>
 80019f6:	464a      	mov	r2, r9
 80019f8:	4342      	muls	r2, r0
 80019fa:	040b      	lsls	r3, r1, #16
 80019fc:	0c29      	lsrs	r1, r5, #16
 80019fe:	0007      	movs	r7, r0
 8001a00:	4319      	orrs	r1, r3
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d907      	bls.n	8001a16 <__aeabi_ddiv+0x3aa>
 8001a06:	1989      	adds	r1, r1, r6
 8001a08:	3f01      	subs	r7, #1
 8001a0a:	428e      	cmp	r6, r1
 8001a0c:	d803      	bhi.n	8001a16 <__aeabi_ddiv+0x3aa>
 8001a0e:	428a      	cmp	r2, r1
 8001a10:	d901      	bls.n	8001a16 <__aeabi_ddiv+0x3aa>
 8001a12:	1e87      	subs	r7, r0, #2
 8001a14:	1989      	adds	r1, r1, r6
 8001a16:	1a88      	subs	r0, r1, r2
 8001a18:	9901      	ldr	r1, [sp, #4]
 8001a1a:	f7fe fc15 	bl	8000248 <__aeabi_uidivmod>
 8001a1e:	0409      	lsls	r1, r1, #16
 8001a20:	464a      	mov	r2, r9
 8001a22:	4689      	mov	r9, r1
 8001a24:	0429      	lsls	r1, r5, #16
 8001a26:	464d      	mov	r5, r9
 8001a28:	4342      	muls	r2, r0
 8001a2a:	0c09      	lsrs	r1, r1, #16
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	4329      	orrs	r1, r5
 8001a30:	428a      	cmp	r2, r1
 8001a32:	d907      	bls.n	8001a44 <__aeabi_ddiv+0x3d8>
 8001a34:	1989      	adds	r1, r1, r6
 8001a36:	3b01      	subs	r3, #1
 8001a38:	428e      	cmp	r6, r1
 8001a3a:	d803      	bhi.n	8001a44 <__aeabi_ddiv+0x3d8>
 8001a3c:	428a      	cmp	r2, r1
 8001a3e:	d901      	bls.n	8001a44 <__aeabi_ddiv+0x3d8>
 8001a40:	1e83      	subs	r3, r0, #2
 8001a42:	1989      	adds	r1, r1, r6
 8001a44:	043f      	lsls	r7, r7, #16
 8001a46:	1a89      	subs	r1, r1, r2
 8001a48:	003a      	movs	r2, r7
 8001a4a:	9f03      	ldr	r7, [sp, #12]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0038      	movs	r0, r7
 8001a50:	0413      	lsls	r3, r2, #16
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	4358      	muls	r0, r3
 8001a56:	4681      	mov	r9, r0
 8001a58:	9802      	ldr	r0, [sp, #8]
 8001a5a:	0c15      	lsrs	r5, r2, #16
 8001a5c:	436f      	muls	r7, r5
 8001a5e:	4343      	muls	r3, r0
 8001a60:	4345      	muls	r5, r0
 8001a62:	4648      	mov	r0, r9
 8001a64:	0c00      	lsrs	r0, r0, #16
 8001a66:	4684      	mov	ip, r0
 8001a68:	19db      	adds	r3, r3, r7
 8001a6a:	4463      	add	r3, ip
 8001a6c:	429f      	cmp	r7, r3
 8001a6e:	d903      	bls.n	8001a78 <__aeabi_ddiv+0x40c>
 8001a70:	2080      	movs	r0, #128	; 0x80
 8001a72:	0240      	lsls	r0, r0, #9
 8001a74:	4684      	mov	ip, r0
 8001a76:	4465      	add	r5, ip
 8001a78:	4648      	mov	r0, r9
 8001a7a:	0c1f      	lsrs	r7, r3, #16
 8001a7c:	0400      	lsls	r0, r0, #16
 8001a7e:	041b      	lsls	r3, r3, #16
 8001a80:	0c00      	lsrs	r0, r0, #16
 8001a82:	197d      	adds	r5, r7, r5
 8001a84:	1818      	adds	r0, r3, r0
 8001a86:	42a9      	cmp	r1, r5
 8001a88:	d200      	bcs.n	8001a8c <__aeabi_ddiv+0x420>
 8001a8a:	e084      	b.n	8001b96 <__aeabi_ddiv+0x52a>
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_ddiv+0x424>
 8001a8e:	e07f      	b.n	8001b90 <__aeabi_ddiv+0x524>
 8001a90:	2301      	movs	r3, #1
 8001a92:	431a      	orrs	r2, r3
 8001a94:	e657      	b.n	8001746 <__aeabi_ddiv+0xda>
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	464a      	mov	r2, r9
 8001a9a:	031b      	lsls	r3, r3, #12
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	031b      	lsls	r3, r3, #12
 8001aa0:	0b1b      	lsrs	r3, r3, #12
 8001aa2:	46aa      	mov	sl, r5
 8001aa4:	4a6f      	ldr	r2, [pc, #444]	; (8001c64 <__aeabi_ddiv+0x5f8>)
 8001aa6:	e66f      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001aa8:	42ba      	cmp	r2, r7
 8001aaa:	d900      	bls.n	8001aae <__aeabi_ddiv+0x442>
 8001aac:	e735      	b.n	800191a <__aeabi_ddiv+0x2ae>
 8001aae:	464b      	mov	r3, r9
 8001ab0:	07dc      	lsls	r4, r3, #31
 8001ab2:	0858      	lsrs	r0, r3, #1
 8001ab4:	087b      	lsrs	r3, r7, #1
 8001ab6:	431c      	orrs	r4, r3
 8001ab8:	07ff      	lsls	r7, r7, #31
 8001aba:	e734      	b.n	8001926 <__aeabi_ddiv+0x2ba>
 8001abc:	2400      	movs	r4, #0
 8001abe:	42af      	cmp	r7, r5
 8001ac0:	d289      	bcs.n	80019d6 <__aeabi_ddiv+0x36a>
 8001ac2:	4447      	add	r7, r8
 8001ac4:	4547      	cmp	r7, r8
 8001ac6:	41a4      	sbcs	r4, r4
 8001ac8:	465b      	mov	r3, fp
 8001aca:	4264      	negs	r4, r4
 8001acc:	19a4      	adds	r4, r4, r6
 8001ace:	1864      	adds	r4, r4, r1
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	42a6      	cmp	r6, r4
 8001ad4:	d21e      	bcs.n	8001b14 <__aeabi_ddiv+0x4a8>
 8001ad6:	42a0      	cmp	r0, r4
 8001ad8:	d86d      	bhi.n	8001bb6 <__aeabi_ddiv+0x54a>
 8001ada:	d100      	bne.n	8001ade <__aeabi_ddiv+0x472>
 8001adc:	e0b6      	b.n	8001c4c <__aeabi_ddiv+0x5e0>
 8001ade:	1a24      	subs	r4, r4, r0
 8001ae0:	469b      	mov	fp, r3
 8001ae2:	e778      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	465a      	mov	r2, fp
 8001ae8:	3b28      	subs	r3, #40	; 0x28
 8001aea:	409a      	lsls	r2, r3
 8001aec:	2700      	movs	r7, #0
 8001aee:	4691      	mov	r9, r2
 8001af0:	e688      	b.n	8001804 <__aeabi_ddiv+0x198>
 8001af2:	4658      	mov	r0, fp
 8001af4:	f001 f912 	bl	8002d1c <__clzsi2>
 8001af8:	3020      	adds	r0, #32
 8001afa:	e672      	b.n	80017e2 <__aeabi_ddiv+0x176>
 8001afc:	0003      	movs	r3, r0
 8001afe:	4652      	mov	r2, sl
 8001b00:	3b28      	subs	r3, #40	; 0x28
 8001b02:	409a      	lsls	r2, r3
 8001b04:	4693      	mov	fp, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	e6b4      	b.n	8001874 <__aeabi_ddiv+0x208>
 8001b0a:	4650      	mov	r0, sl
 8001b0c:	f001 f906 	bl	8002d1c <__clzsi2>
 8001b10:	3020      	adds	r0, #32
 8001b12:	e69a      	b.n	800184a <__aeabi_ddiv+0x1de>
 8001b14:	42a6      	cmp	r6, r4
 8001b16:	d1e2      	bne.n	8001ade <__aeabi_ddiv+0x472>
 8001b18:	45b8      	cmp	r8, r7
 8001b1a:	d9dc      	bls.n	8001ad6 <__aeabi_ddiv+0x46a>
 8001b1c:	1a34      	subs	r4, r6, r0
 8001b1e:	469b      	mov	fp, r3
 8001b20:	e759      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001b22:	2b1f      	cmp	r3, #31
 8001b24:	dc65      	bgt.n	8001bf2 <__aeabi_ddiv+0x586>
 8001b26:	4c50      	ldr	r4, [pc, #320]	; (8001c68 <__aeabi_ddiv+0x5fc>)
 8001b28:	9900      	ldr	r1, [sp, #0]
 8001b2a:	46a4      	mov	ip, r4
 8001b2c:	465c      	mov	r4, fp
 8001b2e:	4461      	add	r1, ip
 8001b30:	0008      	movs	r0, r1
 8001b32:	408c      	lsls	r4, r1
 8001b34:	0011      	movs	r1, r2
 8001b36:	4082      	lsls	r2, r0
 8001b38:	40d9      	lsrs	r1, r3
 8001b3a:	1e50      	subs	r0, r2, #1
 8001b3c:	4182      	sbcs	r2, r0
 8001b3e:	430c      	orrs	r4, r1
 8001b40:	4314      	orrs	r4, r2
 8001b42:	465a      	mov	r2, fp
 8001b44:	40da      	lsrs	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	0762      	lsls	r2, r4, #29
 8001b4a:	d009      	beq.n	8001b60 <__aeabi_ddiv+0x4f4>
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	4022      	ands	r2, r4
 8001b50:	2a04      	cmp	r2, #4
 8001b52:	d005      	beq.n	8001b60 <__aeabi_ddiv+0x4f4>
 8001b54:	0022      	movs	r2, r4
 8001b56:	1d14      	adds	r4, r2, #4
 8001b58:	4294      	cmp	r4, r2
 8001b5a:	4189      	sbcs	r1, r1
 8001b5c:	4249      	negs	r1, r1
 8001b5e:	185b      	adds	r3, r3, r1
 8001b60:	021a      	lsls	r2, r3, #8
 8001b62:	d562      	bpl.n	8001c2a <__aeabi_ddiv+0x5be>
 8001b64:	2201      	movs	r2, #1
 8001b66:	2300      	movs	r3, #0
 8001b68:	2700      	movs	r7, #0
 8001b6a:	e60d      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d800      	bhi.n	8001b72 <__aeabi_ddiv+0x506>
 8001b70:	e70a      	b.n	8001988 <__aeabi_ddiv+0x31c>
 8001b72:	1e83      	subs	r3, r0, #2
 8001b74:	1989      	adds	r1, r1, r6
 8001b76:	e707      	b.n	8001988 <__aeabi_ddiv+0x31c>
 8001b78:	230f      	movs	r3, #15
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0x516>
 8001b80:	e5e6      	b.n	8001750 <__aeabi_ddiv+0xe4>
 8001b82:	1d17      	adds	r7, r2, #4
 8001b84:	4297      	cmp	r7, r2
 8001b86:	4192      	sbcs	r2, r2
 8001b88:	4253      	negs	r3, r2
 8001b8a:	449b      	add	fp, r3
 8001b8c:	08fa      	lsrs	r2, r7, #3
 8001b8e:	e5e0      	b.n	8001752 <__aeabi_ddiv+0xe6>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d100      	bne.n	8001b96 <__aeabi_ddiv+0x52a>
 8001b94:	e5d7      	b.n	8001746 <__aeabi_ddiv+0xda>
 8001b96:	1871      	adds	r1, r6, r1
 8001b98:	1e53      	subs	r3, r2, #1
 8001b9a:	42b1      	cmp	r1, r6
 8001b9c:	d327      	bcc.n	8001bee <__aeabi_ddiv+0x582>
 8001b9e:	42a9      	cmp	r1, r5
 8001ba0:	d315      	bcc.n	8001bce <__aeabi_ddiv+0x562>
 8001ba2:	d058      	beq.n	8001c56 <__aeabi_ddiv+0x5ea>
 8001ba4:	001a      	movs	r2, r3
 8001ba6:	e773      	b.n	8001a90 <__aeabi_ddiv+0x424>
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	dc00      	bgt.n	8001bae <__aeabi_ddiv+0x542>
 8001bac:	e604      	b.n	80017b8 <__aeabi_ddiv+0x14c>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	449b      	add	fp, r3
 8001bb4:	e5cd      	b.n	8001752 <__aeabi_ddiv+0xe6>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	4447      	add	r7, r8
 8001bba:	4547      	cmp	r7, r8
 8001bbc:	4189      	sbcs	r1, r1
 8001bbe:	425b      	negs	r3, r3
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	4249      	negs	r1, r1
 8001bc4:	1989      	adds	r1, r1, r6
 8001bc6:	190c      	adds	r4, r1, r4
 8001bc8:	44e3      	add	fp, ip
 8001bca:	1a24      	subs	r4, r4, r0
 8001bcc:	e703      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001bce:	4643      	mov	r3, r8
 8001bd0:	005f      	lsls	r7, r3, #1
 8001bd2:	4547      	cmp	r7, r8
 8001bd4:	419b      	sbcs	r3, r3
 8001bd6:	46b8      	mov	r8, r7
 8001bd8:	425b      	negs	r3, r3
 8001bda:	199e      	adds	r6, r3, r6
 8001bdc:	3a02      	subs	r2, #2
 8001bde:	1989      	adds	r1, r1, r6
 8001be0:	42a9      	cmp	r1, r5
 8001be2:	d000      	beq.n	8001be6 <__aeabi_ddiv+0x57a>
 8001be4:	e754      	b.n	8001a90 <__aeabi_ddiv+0x424>
 8001be6:	4540      	cmp	r0, r8
 8001be8:	d000      	beq.n	8001bec <__aeabi_ddiv+0x580>
 8001bea:	e751      	b.n	8001a90 <__aeabi_ddiv+0x424>
 8001bec:	e5ab      	b.n	8001746 <__aeabi_ddiv+0xda>
 8001bee:	001a      	movs	r2, r3
 8001bf0:	e7f6      	b.n	8001be0 <__aeabi_ddiv+0x574>
 8001bf2:	211f      	movs	r1, #31
 8001bf4:	465f      	mov	r7, fp
 8001bf6:	4249      	negs	r1, r1
 8001bf8:	1b0c      	subs	r4, r1, r4
 8001bfa:	40e7      	lsrs	r7, r4
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d007      	beq.n	8001c10 <__aeabi_ddiv+0x5a4>
 8001c00:	491a      	ldr	r1, [pc, #104]	; (8001c6c <__aeabi_ddiv+0x600>)
 8001c02:	9b00      	ldr	r3, [sp, #0]
 8001c04:	468c      	mov	ip, r1
 8001c06:	4463      	add	r3, ip
 8001c08:	0018      	movs	r0, r3
 8001c0a:	465b      	mov	r3, fp
 8001c0c:	4083      	lsls	r3, r0
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	1e50      	subs	r0, r2, #1
 8001c12:	4182      	sbcs	r2, r0
 8001c14:	433a      	orrs	r2, r7
 8001c16:	2707      	movs	r7, #7
 8001c18:	2300      	movs	r3, #0
 8001c1a:	4017      	ands	r7, r2
 8001c1c:	d009      	beq.n	8001c32 <__aeabi_ddiv+0x5c6>
 8001c1e:	210f      	movs	r1, #15
 8001c20:	2300      	movs	r3, #0
 8001c22:	4011      	ands	r1, r2
 8001c24:	0014      	movs	r4, r2
 8001c26:	2904      	cmp	r1, #4
 8001c28:	d195      	bne.n	8001b56 <__aeabi_ddiv+0x4ea>
 8001c2a:	0022      	movs	r2, r4
 8001c2c:	075f      	lsls	r7, r3, #29
 8001c2e:	025b      	lsls	r3, r3, #9
 8001c30:	0b1b      	lsrs	r3, r3, #12
 8001c32:	08d2      	lsrs	r2, r2, #3
 8001c34:	4317      	orrs	r7, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	e5a6      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	031b      	lsls	r3, r3, #12
 8001c40:	430b      	orrs	r3, r1
 8001c42:	031b      	lsls	r3, r3, #12
 8001c44:	0017      	movs	r7, r2
 8001c46:	0b1b      	lsrs	r3, r3, #12
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <__aeabi_ddiv+0x5f8>)
 8001c4a:	e59d      	b.n	8001788 <__aeabi_ddiv+0x11c>
 8001c4c:	42bd      	cmp	r5, r7
 8001c4e:	d8b2      	bhi.n	8001bb6 <__aeabi_ddiv+0x54a>
 8001c50:	469b      	mov	fp, r3
 8001c52:	2400      	movs	r4, #0
 8001c54:	e6bf      	b.n	80019d6 <__aeabi_ddiv+0x36a>
 8001c56:	4580      	cmp	r8, r0
 8001c58:	d3b9      	bcc.n	8001bce <__aeabi_ddiv+0x562>
 8001c5a:	001a      	movs	r2, r3
 8001c5c:	e7c3      	b.n	8001be6 <__aeabi_ddiv+0x57a>
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	000003ff 	.word	0x000003ff
 8001c64:	000007ff 	.word	0x000007ff
 8001c68:	0000041e 	.word	0x0000041e
 8001c6c:	0000043e 	.word	0x0000043e

08001c70 <__eqdf2>:
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c72:	464f      	mov	r7, r9
 8001c74:	4646      	mov	r6, r8
 8001c76:	46d6      	mov	lr, sl
 8001c78:	4684      	mov	ip, r0
 8001c7a:	b5c0      	push	{r6, r7, lr}
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	4e19      	ldr	r6, [pc, #100]	; (8001ce4 <__eqdf2+0x74>)
 8001c80:	0318      	lsls	r0, r3, #12
 8001c82:	030f      	lsls	r7, r1, #12
 8001c84:	004d      	lsls	r5, r1, #1
 8001c86:	0b00      	lsrs	r0, r0, #12
 8001c88:	005c      	lsls	r4, r3, #1
 8001c8a:	4682      	mov	sl, r0
 8001c8c:	0b3f      	lsrs	r7, r7, #12
 8001c8e:	0d6d      	lsrs	r5, r5, #21
 8001c90:	0fc9      	lsrs	r1, r1, #31
 8001c92:	4691      	mov	r9, r2
 8001c94:	0d64      	lsrs	r4, r4, #21
 8001c96:	0fdb      	lsrs	r3, r3, #31
 8001c98:	2001      	movs	r0, #1
 8001c9a:	42b5      	cmp	r5, r6
 8001c9c:	d00a      	beq.n	8001cb4 <__eqdf2+0x44>
 8001c9e:	42b4      	cmp	r4, r6
 8001ca0:	d003      	beq.n	8001caa <__eqdf2+0x3a>
 8001ca2:	42a5      	cmp	r5, r4
 8001ca4:	d101      	bne.n	8001caa <__eqdf2+0x3a>
 8001ca6:	4557      	cmp	r7, sl
 8001ca8:	d00c      	beq.n	8001cc4 <__eqdf2+0x54>
 8001caa:	bc1c      	pop	{r2, r3, r4}
 8001cac:	4690      	mov	r8, r2
 8001cae:	4699      	mov	r9, r3
 8001cb0:	46a2      	mov	sl, r4
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	4666      	mov	r6, ip
 8001cb6:	433e      	orrs	r6, r7
 8001cb8:	d1f7      	bne.n	8001caa <__eqdf2+0x3a>
 8001cba:	42ac      	cmp	r4, r5
 8001cbc:	d1f5      	bne.n	8001caa <__eqdf2+0x3a>
 8001cbe:	4654      	mov	r4, sl
 8001cc0:	4314      	orrs	r4, r2
 8001cc2:	d1f2      	bne.n	8001caa <__eqdf2+0x3a>
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	45c8      	cmp	r8, r9
 8001cc8:	d1ef      	bne.n	8001caa <__eqdf2+0x3a>
 8001cca:	4299      	cmp	r1, r3
 8001ccc:	d007      	beq.n	8001cde <__eqdf2+0x6e>
 8001cce:	2d00      	cmp	r5, #0
 8001cd0:	d1eb      	bne.n	8001caa <__eqdf2+0x3a>
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	431f      	orrs	r7, r3
 8001cd6:	0038      	movs	r0, r7
 8001cd8:	1e47      	subs	r7, r0, #1
 8001cda:	41b8      	sbcs	r0, r7
 8001cdc:	e7e5      	b.n	8001caa <__eqdf2+0x3a>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e7e3      	b.n	8001caa <__eqdf2+0x3a>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff

08001ce8 <__gedf2>:
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	464f      	mov	r7, r9
 8001cec:	4646      	mov	r6, r8
 8001cee:	46d6      	mov	lr, sl
 8001cf0:	004d      	lsls	r5, r1, #1
 8001cf2:	b5c0      	push	{r6, r7, lr}
 8001cf4:	030e      	lsls	r6, r1, #12
 8001cf6:	0fc9      	lsrs	r1, r1, #31
 8001cf8:	468a      	mov	sl, r1
 8001cfa:	492c      	ldr	r1, [pc, #176]	; (8001dac <__gedf2+0xc4>)
 8001cfc:	031f      	lsls	r7, r3, #12
 8001cfe:	005c      	lsls	r4, r3, #1
 8001d00:	4680      	mov	r8, r0
 8001d02:	0b36      	lsrs	r6, r6, #12
 8001d04:	0d6d      	lsrs	r5, r5, #21
 8001d06:	4691      	mov	r9, r2
 8001d08:	0b3f      	lsrs	r7, r7, #12
 8001d0a:	0d64      	lsrs	r4, r4, #21
 8001d0c:	0fdb      	lsrs	r3, r3, #31
 8001d0e:	428d      	cmp	r5, r1
 8001d10:	d01e      	beq.n	8001d50 <__gedf2+0x68>
 8001d12:	428c      	cmp	r4, r1
 8001d14:	d016      	beq.n	8001d44 <__gedf2+0x5c>
 8001d16:	2d00      	cmp	r5, #0
 8001d18:	d11e      	bne.n	8001d58 <__gedf2+0x70>
 8001d1a:	4330      	orrs	r0, r6
 8001d1c:	4684      	mov	ip, r0
 8001d1e:	2c00      	cmp	r4, #0
 8001d20:	d101      	bne.n	8001d26 <__gedf2+0x3e>
 8001d22:	433a      	orrs	r2, r7
 8001d24:	d023      	beq.n	8001d6e <__gedf2+0x86>
 8001d26:	4662      	mov	r2, ip
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d01a      	beq.n	8001d62 <__gedf2+0x7a>
 8001d2c:	459a      	cmp	sl, r3
 8001d2e:	d029      	beq.n	8001d84 <__gedf2+0x9c>
 8001d30:	4651      	mov	r1, sl
 8001d32:	2002      	movs	r0, #2
 8001d34:	3901      	subs	r1, #1
 8001d36:	4008      	ands	r0, r1
 8001d38:	3801      	subs	r0, #1
 8001d3a:	bc1c      	pop	{r2, r3, r4}
 8001d3c:	4690      	mov	r8, r2
 8001d3e:	4699      	mov	r9, r3
 8001d40:	46a2      	mov	sl, r4
 8001d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d44:	0039      	movs	r1, r7
 8001d46:	4311      	orrs	r1, r2
 8001d48:	d0e5      	beq.n	8001d16 <__gedf2+0x2e>
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	4240      	negs	r0, r0
 8001d4e:	e7f4      	b.n	8001d3a <__gedf2+0x52>
 8001d50:	4330      	orrs	r0, r6
 8001d52:	d1fa      	bne.n	8001d4a <__gedf2+0x62>
 8001d54:	42ac      	cmp	r4, r5
 8001d56:	d00f      	beq.n	8001d78 <__gedf2+0x90>
 8001d58:	2c00      	cmp	r4, #0
 8001d5a:	d10f      	bne.n	8001d7c <__gedf2+0x94>
 8001d5c:	433a      	orrs	r2, r7
 8001d5e:	d0e7      	beq.n	8001d30 <__gedf2+0x48>
 8001d60:	e00c      	b.n	8001d7c <__gedf2+0x94>
 8001d62:	2201      	movs	r2, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4393      	bics	r3, r2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	e7e5      	b.n	8001d3a <__gedf2+0x52>
 8001d6e:	4663      	mov	r3, ip
 8001d70:	2000      	movs	r0, #0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0e1      	beq.n	8001d3a <__gedf2+0x52>
 8001d76:	e7db      	b.n	8001d30 <__gedf2+0x48>
 8001d78:	433a      	orrs	r2, r7
 8001d7a:	d1e6      	bne.n	8001d4a <__gedf2+0x62>
 8001d7c:	459a      	cmp	sl, r3
 8001d7e:	d1d7      	bne.n	8001d30 <__gedf2+0x48>
 8001d80:	42a5      	cmp	r5, r4
 8001d82:	dcd5      	bgt.n	8001d30 <__gedf2+0x48>
 8001d84:	42a5      	cmp	r5, r4
 8001d86:	db05      	blt.n	8001d94 <__gedf2+0xac>
 8001d88:	42be      	cmp	r6, r7
 8001d8a:	d8d1      	bhi.n	8001d30 <__gedf2+0x48>
 8001d8c:	d008      	beq.n	8001da0 <__gedf2+0xb8>
 8001d8e:	2000      	movs	r0, #0
 8001d90:	42be      	cmp	r6, r7
 8001d92:	d2d2      	bcs.n	8001d3a <__gedf2+0x52>
 8001d94:	4650      	mov	r0, sl
 8001d96:	2301      	movs	r3, #1
 8001d98:	3801      	subs	r0, #1
 8001d9a:	4398      	bics	r0, r3
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	e7cc      	b.n	8001d3a <__gedf2+0x52>
 8001da0:	45c8      	cmp	r8, r9
 8001da2:	d8c5      	bhi.n	8001d30 <__gedf2+0x48>
 8001da4:	2000      	movs	r0, #0
 8001da6:	45c8      	cmp	r8, r9
 8001da8:	d3f4      	bcc.n	8001d94 <__gedf2+0xac>
 8001daa:	e7c6      	b.n	8001d3a <__gedf2+0x52>
 8001dac:	000007ff 	.word	0x000007ff

08001db0 <__ledf2>:
 8001db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db2:	464f      	mov	r7, r9
 8001db4:	4646      	mov	r6, r8
 8001db6:	46d6      	mov	lr, sl
 8001db8:	004d      	lsls	r5, r1, #1
 8001dba:	b5c0      	push	{r6, r7, lr}
 8001dbc:	030e      	lsls	r6, r1, #12
 8001dbe:	0fc9      	lsrs	r1, r1, #31
 8001dc0:	468a      	mov	sl, r1
 8001dc2:	492e      	ldr	r1, [pc, #184]	; (8001e7c <__ledf2+0xcc>)
 8001dc4:	031f      	lsls	r7, r3, #12
 8001dc6:	005c      	lsls	r4, r3, #1
 8001dc8:	4680      	mov	r8, r0
 8001dca:	0b36      	lsrs	r6, r6, #12
 8001dcc:	0d6d      	lsrs	r5, r5, #21
 8001dce:	4691      	mov	r9, r2
 8001dd0:	0b3f      	lsrs	r7, r7, #12
 8001dd2:	0d64      	lsrs	r4, r4, #21
 8001dd4:	0fdb      	lsrs	r3, r3, #31
 8001dd6:	428d      	cmp	r5, r1
 8001dd8:	d018      	beq.n	8001e0c <__ledf2+0x5c>
 8001dda:	428c      	cmp	r4, r1
 8001ddc:	d011      	beq.n	8001e02 <__ledf2+0x52>
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	d118      	bne.n	8001e14 <__ledf2+0x64>
 8001de2:	4330      	orrs	r0, r6
 8001de4:	4684      	mov	ip, r0
 8001de6:	2c00      	cmp	r4, #0
 8001de8:	d11e      	bne.n	8001e28 <__ledf2+0x78>
 8001dea:	433a      	orrs	r2, r7
 8001dec:	d11c      	bne.n	8001e28 <__ledf2+0x78>
 8001dee:	4663      	mov	r3, ip
 8001df0:	2000      	movs	r0, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d030      	beq.n	8001e58 <__ledf2+0xa8>
 8001df6:	4651      	mov	r1, sl
 8001df8:	2002      	movs	r0, #2
 8001dfa:	3901      	subs	r1, #1
 8001dfc:	4008      	ands	r0, r1
 8001dfe:	3801      	subs	r0, #1
 8001e00:	e02a      	b.n	8001e58 <__ledf2+0xa8>
 8001e02:	0039      	movs	r1, r7
 8001e04:	4311      	orrs	r1, r2
 8001e06:	d0ea      	beq.n	8001dde <__ledf2+0x2e>
 8001e08:	2002      	movs	r0, #2
 8001e0a:	e025      	b.n	8001e58 <__ledf2+0xa8>
 8001e0c:	4330      	orrs	r0, r6
 8001e0e:	d1fb      	bne.n	8001e08 <__ledf2+0x58>
 8001e10:	42ac      	cmp	r4, r5
 8001e12:	d026      	beq.n	8001e62 <__ledf2+0xb2>
 8001e14:	2c00      	cmp	r4, #0
 8001e16:	d126      	bne.n	8001e66 <__ledf2+0xb6>
 8001e18:	433a      	orrs	r2, r7
 8001e1a:	d124      	bne.n	8001e66 <__ledf2+0xb6>
 8001e1c:	4651      	mov	r1, sl
 8001e1e:	2002      	movs	r0, #2
 8001e20:	3901      	subs	r1, #1
 8001e22:	4008      	ands	r0, r1
 8001e24:	3801      	subs	r0, #1
 8001e26:	e017      	b.n	8001e58 <__ledf2+0xa8>
 8001e28:	4662      	mov	r2, ip
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d00f      	beq.n	8001e4e <__ledf2+0x9e>
 8001e2e:	459a      	cmp	sl, r3
 8001e30:	d1e1      	bne.n	8001df6 <__ledf2+0x46>
 8001e32:	42a5      	cmp	r5, r4
 8001e34:	db05      	blt.n	8001e42 <__ledf2+0x92>
 8001e36:	42be      	cmp	r6, r7
 8001e38:	d8dd      	bhi.n	8001df6 <__ledf2+0x46>
 8001e3a:	d019      	beq.n	8001e70 <__ledf2+0xc0>
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	42be      	cmp	r6, r7
 8001e40:	d20a      	bcs.n	8001e58 <__ledf2+0xa8>
 8001e42:	4650      	mov	r0, sl
 8001e44:	2301      	movs	r3, #1
 8001e46:	3801      	subs	r0, #1
 8001e48:	4398      	bics	r0, r3
 8001e4a:	3001      	adds	r0, #1
 8001e4c:	e004      	b.n	8001e58 <__ledf2+0xa8>
 8001e4e:	2201      	movs	r2, #1
 8001e50:	3b01      	subs	r3, #1
 8001e52:	4393      	bics	r3, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	3001      	adds	r0, #1
 8001e58:	bc1c      	pop	{r2, r3, r4}
 8001e5a:	4690      	mov	r8, r2
 8001e5c:	4699      	mov	r9, r3
 8001e5e:	46a2      	mov	sl, r4
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e62:	433a      	orrs	r2, r7
 8001e64:	d1d0      	bne.n	8001e08 <__ledf2+0x58>
 8001e66:	459a      	cmp	sl, r3
 8001e68:	d1c5      	bne.n	8001df6 <__ledf2+0x46>
 8001e6a:	42a5      	cmp	r5, r4
 8001e6c:	dcc3      	bgt.n	8001df6 <__ledf2+0x46>
 8001e6e:	e7e0      	b.n	8001e32 <__ledf2+0x82>
 8001e70:	45c8      	cmp	r8, r9
 8001e72:	d8c0      	bhi.n	8001df6 <__ledf2+0x46>
 8001e74:	2000      	movs	r0, #0
 8001e76:	45c8      	cmp	r8, r9
 8001e78:	d3e3      	bcc.n	8001e42 <__ledf2+0x92>
 8001e7a:	e7ed      	b.n	8001e58 <__ledf2+0xa8>
 8001e7c:	000007ff 	.word	0x000007ff

08001e80 <__aeabi_dmul>:
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	4657      	mov	r7, sl
 8001e84:	46de      	mov	lr, fp
 8001e86:	464e      	mov	r6, r9
 8001e88:	4645      	mov	r5, r8
 8001e8a:	b5e0      	push	{r5, r6, r7, lr}
 8001e8c:	4683      	mov	fp, r0
 8001e8e:	0006      	movs	r6, r0
 8001e90:	030f      	lsls	r7, r1, #12
 8001e92:	0048      	lsls	r0, r1, #1
 8001e94:	b087      	sub	sp, #28
 8001e96:	4692      	mov	sl, r2
 8001e98:	001d      	movs	r5, r3
 8001e9a:	0b3f      	lsrs	r7, r7, #12
 8001e9c:	0d40      	lsrs	r0, r0, #21
 8001e9e:	0fcc      	lsrs	r4, r1, #31
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dmul+0x26>
 8001ea4:	e06f      	b.n	8001f86 <__aeabi_dmul+0x106>
 8001ea6:	4bde      	ldr	r3, [pc, #888]	; (8002220 <__aeabi_dmul+0x3a0>)
 8001ea8:	4298      	cmp	r0, r3
 8001eaa:	d038      	beq.n	8001f1e <__aeabi_dmul+0x9e>
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	00ff      	lsls	r7, r7, #3
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	431f      	orrs	r7, r3
 8001eb4:	0f73      	lsrs	r3, r6, #29
 8001eb6:	433b      	orrs	r3, r7
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	4bda      	ldr	r3, [pc, #872]	; (8002224 <__aeabi_dmul+0x3a4>)
 8001ebc:	2700      	movs	r7, #0
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	469b      	mov	fp, r3
 8001ec4:	00f6      	lsls	r6, r6, #3
 8001ec6:	4481      	add	r9, r0
 8001ec8:	032b      	lsls	r3, r5, #12
 8001eca:	0069      	lsls	r1, r5, #1
 8001ecc:	0b1b      	lsrs	r3, r3, #12
 8001ece:	4652      	mov	r2, sl
 8001ed0:	4698      	mov	r8, r3
 8001ed2:	0d49      	lsrs	r1, r1, #21
 8001ed4:	0fed      	lsrs	r5, r5, #31
 8001ed6:	2900      	cmp	r1, #0
 8001ed8:	d100      	bne.n	8001edc <__aeabi_dmul+0x5c>
 8001eda:	e085      	b.n	8001fe8 <__aeabi_dmul+0x168>
 8001edc:	4bd0      	ldr	r3, [pc, #832]	; (8002220 <__aeabi_dmul+0x3a0>)
 8001ede:	4299      	cmp	r1, r3
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dmul+0x64>
 8001ee2:	e073      	b.n	8001fcc <__aeabi_dmul+0x14c>
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	4313      	orrs	r3, r2
 8001eee:	4652      	mov	r2, sl
 8001ef0:	48cc      	ldr	r0, [pc, #816]	; (8002224 <__aeabi_dmul+0x3a4>)
 8001ef2:	0f52      	lsrs	r2, r2, #29
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	4652      	mov	r2, sl
 8001efa:	2000      	movs	r0, #0
 8001efc:	4461      	add	r1, ip
 8001efe:	00d2      	lsls	r2, r2, #3
 8001f00:	4489      	add	r9, r1
 8001f02:	0021      	movs	r1, r4
 8001f04:	4069      	eors	r1, r5
 8001f06:	9100      	str	r1, [sp, #0]
 8001f08:	468c      	mov	ip, r1
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4449      	add	r1, r9
 8001f0e:	468a      	mov	sl, r1
 8001f10:	2f0f      	cmp	r7, #15
 8001f12:	d900      	bls.n	8001f16 <__aeabi_dmul+0x96>
 8001f14:	e090      	b.n	8002038 <__aeabi_dmul+0x1b8>
 8001f16:	49c4      	ldr	r1, [pc, #784]	; (8002228 <__aeabi_dmul+0x3a8>)
 8001f18:	00bf      	lsls	r7, r7, #2
 8001f1a:	59cf      	ldr	r7, [r1, r7]
 8001f1c:	46bf      	mov	pc, r7
 8001f1e:	465b      	mov	r3, fp
 8001f20:	433b      	orrs	r3, r7
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dmul+0xa8>
 8001f26:	e16a      	b.n	80021fe <__aeabi_dmul+0x37e>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	2708      	movs	r7, #8
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	4681      	mov	r9, r0
 8001f30:	469b      	mov	fp, r3
 8001f32:	e7c9      	b.n	8001ec8 <__aeabi_dmul+0x48>
 8001f34:	0032      	movs	r2, r6
 8001f36:	4658      	mov	r0, fp
 8001f38:	9b01      	ldr	r3, [sp, #4]
 8001f3a:	4661      	mov	r1, ip
 8001f3c:	9100      	str	r1, [sp, #0]
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0xc4>
 8001f42:	e075      	b.n	8002030 <__aeabi_dmul+0x1b0>
 8001f44:	2803      	cmp	r0, #3
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0xca>
 8001f48:	e1fe      	b.n	8002348 <__aeabi_dmul+0x4c8>
 8001f4a:	2801      	cmp	r0, #1
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dmul+0xd0>
 8001f4e:	e12c      	b.n	80021aa <__aeabi_dmul+0x32a>
 8001f50:	2300      	movs	r3, #0
 8001f52:	2700      	movs	r7, #0
 8001f54:	2600      	movs	r6, #0
 8001f56:	2500      	movs	r5, #0
 8001f58:	033f      	lsls	r7, r7, #12
 8001f5a:	0d2a      	lsrs	r2, r5, #20
 8001f5c:	0b3f      	lsrs	r7, r7, #12
 8001f5e:	48b3      	ldr	r0, [pc, #716]	; (800222c <__aeabi_dmul+0x3ac>)
 8001f60:	0512      	lsls	r2, r2, #20
 8001f62:	433a      	orrs	r2, r7
 8001f64:	4002      	ands	r2, r0
 8001f66:	051b      	lsls	r3, r3, #20
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	9a00      	ldr	r2, [sp, #0]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	07d1      	lsls	r1, r2, #31
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	430b      	orrs	r3, r1
 8001f74:	0030      	movs	r0, r6
 8001f76:	0019      	movs	r1, r3
 8001f78:	b007      	add	sp, #28
 8001f7a:	bc3c      	pop	{r2, r3, r4, r5}
 8001f7c:	4690      	mov	r8, r2
 8001f7e:	4699      	mov	r9, r3
 8001f80:	46a2      	mov	sl, r4
 8001f82:	46ab      	mov	fp, r5
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	465b      	mov	r3, fp
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dmul+0x110>
 8001f8e:	e12f      	b.n	80021f0 <__aeabi_dmul+0x370>
 8001f90:	2f00      	cmp	r7, #0
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dmul+0x116>
 8001f94:	e1a5      	b.n	80022e2 <__aeabi_dmul+0x462>
 8001f96:	0038      	movs	r0, r7
 8001f98:	f000 fec0 	bl	8002d1c <__clzsi2>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	3b0b      	subs	r3, #11
 8001fa0:	2b1c      	cmp	r3, #28
 8001fa2:	dd00      	ble.n	8001fa6 <__aeabi_dmul+0x126>
 8001fa4:	e196      	b.n	80022d4 <__aeabi_dmul+0x454>
 8001fa6:	221d      	movs	r2, #29
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	465a      	mov	r2, fp
 8001fac:	0001      	movs	r1, r0
 8001fae:	40da      	lsrs	r2, r3
 8001fb0:	465e      	mov	r6, fp
 8001fb2:	3908      	subs	r1, #8
 8001fb4:	408f      	lsls	r7, r1
 8001fb6:	0013      	movs	r3, r2
 8001fb8:	408e      	lsls	r6, r1
 8001fba:	433b      	orrs	r3, r7
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	4b9c      	ldr	r3, [pc, #624]	; (8002230 <__aeabi_dmul+0x3b0>)
 8001fc0:	2700      	movs	r7, #0
 8001fc2:	1a1b      	subs	r3, r3, r0
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	469b      	mov	fp, r3
 8001fca:	e77d      	b.n	8001ec8 <__aeabi_dmul+0x48>
 8001fcc:	4641      	mov	r1, r8
 8001fce:	4653      	mov	r3, sl
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	4993      	ldr	r1, [pc, #588]	; (8002220 <__aeabi_dmul+0x3a0>)
 8001fd4:	468c      	mov	ip, r1
 8001fd6:	44e1      	add	r9, ip
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dmul+0x15e>
 8001fdc:	e11a      	b.n	8002214 <__aeabi_dmul+0x394>
 8001fde:	2202      	movs	r2, #2
 8001fe0:	2002      	movs	r0, #2
 8001fe2:	4317      	orrs	r7, r2
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	e78c      	b.n	8001f02 <__aeabi_dmul+0x82>
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0x16e>
 8001fec:	e10d      	b.n	800220a <__aeabi_dmul+0x38a>
 8001fee:	4643      	mov	r3, r8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dmul+0x176>
 8001ff4:	e181      	b.n	80022fa <__aeabi_dmul+0x47a>
 8001ff6:	4640      	mov	r0, r8
 8001ff8:	f000 fe90 	bl	8002d1c <__clzsi2>
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	3a0b      	subs	r2, #11
 8002000:	2a1c      	cmp	r2, #28
 8002002:	dd00      	ble.n	8002006 <__aeabi_dmul+0x186>
 8002004:	e172      	b.n	80022ec <__aeabi_dmul+0x46c>
 8002006:	0001      	movs	r1, r0
 8002008:	4643      	mov	r3, r8
 800200a:	3908      	subs	r1, #8
 800200c:	408b      	lsls	r3, r1
 800200e:	4698      	mov	r8, r3
 8002010:	231d      	movs	r3, #29
 8002012:	1a9a      	subs	r2, r3, r2
 8002014:	4653      	mov	r3, sl
 8002016:	40d3      	lsrs	r3, r2
 8002018:	001a      	movs	r2, r3
 800201a:	4643      	mov	r3, r8
 800201c:	4313      	orrs	r3, r2
 800201e:	4652      	mov	r2, sl
 8002020:	408a      	lsls	r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	1a08      	subs	r0, r1, r0
 8002026:	4982      	ldr	r1, [pc, #520]	; (8002230 <__aeabi_dmul+0x3b0>)
 8002028:	4689      	mov	r9, r1
 800202a:	4481      	add	r9, r0
 800202c:	2000      	movs	r0, #0
 800202e:	e768      	b.n	8001f02 <__aeabi_dmul+0x82>
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <__aeabi_dmul+0x3a0>)
 8002032:	2700      	movs	r7, #0
 8002034:	2600      	movs	r6, #0
 8002036:	e78e      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002038:	0c14      	lsrs	r4, r2, #16
 800203a:	0412      	lsls	r2, r2, #16
 800203c:	0c12      	lsrs	r2, r2, #16
 800203e:	0011      	movs	r1, r2
 8002040:	0c37      	lsrs	r7, r6, #16
 8002042:	0436      	lsls	r6, r6, #16
 8002044:	0c35      	lsrs	r5, r6, #16
 8002046:	4379      	muls	r1, r7
 8002048:	0028      	movs	r0, r5
 800204a:	468c      	mov	ip, r1
 800204c:	002e      	movs	r6, r5
 800204e:	4360      	muls	r0, r4
 8002050:	4460      	add	r0, ip
 8002052:	4683      	mov	fp, r0
 8002054:	4356      	muls	r6, r2
 8002056:	0021      	movs	r1, r4
 8002058:	0c30      	lsrs	r0, r6, #16
 800205a:	4680      	mov	r8, r0
 800205c:	4658      	mov	r0, fp
 800205e:	4379      	muls	r1, r7
 8002060:	4440      	add	r0, r8
 8002062:	9102      	str	r1, [sp, #8]
 8002064:	4584      	cmp	ip, r0
 8002066:	d906      	bls.n	8002076 <__aeabi_dmul+0x1f6>
 8002068:	4688      	mov	r8, r1
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	0249      	lsls	r1, r1, #9
 800206e:	468c      	mov	ip, r1
 8002070:	44e0      	add	r8, ip
 8002072:	4641      	mov	r1, r8
 8002074:	9102      	str	r1, [sp, #8]
 8002076:	0436      	lsls	r6, r6, #16
 8002078:	0c01      	lsrs	r1, r0, #16
 800207a:	0c36      	lsrs	r6, r6, #16
 800207c:	0400      	lsls	r0, r0, #16
 800207e:	468b      	mov	fp, r1
 8002080:	1981      	adds	r1, r0, r6
 8002082:	0c1e      	lsrs	r6, r3, #16
 8002084:	041b      	lsls	r3, r3, #16
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	9103      	str	r1, [sp, #12]
 800208a:	0019      	movs	r1, r3
 800208c:	4379      	muls	r1, r7
 800208e:	468c      	mov	ip, r1
 8002090:	0028      	movs	r0, r5
 8002092:	4375      	muls	r5, r6
 8002094:	4465      	add	r5, ip
 8002096:	46a8      	mov	r8, r5
 8002098:	4358      	muls	r0, r3
 800209a:	0c05      	lsrs	r5, r0, #16
 800209c:	4445      	add	r5, r8
 800209e:	4377      	muls	r7, r6
 80020a0:	42a9      	cmp	r1, r5
 80020a2:	d903      	bls.n	80020ac <__aeabi_dmul+0x22c>
 80020a4:	2180      	movs	r1, #128	; 0x80
 80020a6:	0249      	lsls	r1, r1, #9
 80020a8:	468c      	mov	ip, r1
 80020aa:	4467      	add	r7, ip
 80020ac:	0c29      	lsrs	r1, r5, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	0400      	lsls	r0, r0, #16
 80020b4:	0c00      	lsrs	r0, r0, #16
 80020b6:	042d      	lsls	r5, r5, #16
 80020b8:	182d      	adds	r5, r5, r0
 80020ba:	4461      	add	r1, ip
 80020bc:	44ab      	add	fp, r5
 80020be:	9105      	str	r1, [sp, #20]
 80020c0:	4659      	mov	r1, fp
 80020c2:	9104      	str	r1, [sp, #16]
 80020c4:	9901      	ldr	r1, [sp, #4]
 80020c6:	040f      	lsls	r7, r1, #16
 80020c8:	0c3f      	lsrs	r7, r7, #16
 80020ca:	0c08      	lsrs	r0, r1, #16
 80020cc:	0039      	movs	r1, r7
 80020ce:	4351      	muls	r1, r2
 80020d0:	4342      	muls	r2, r0
 80020d2:	4690      	mov	r8, r2
 80020d4:	0002      	movs	r2, r0
 80020d6:	468c      	mov	ip, r1
 80020d8:	0c09      	lsrs	r1, r1, #16
 80020da:	468b      	mov	fp, r1
 80020dc:	4362      	muls	r2, r4
 80020de:	437c      	muls	r4, r7
 80020e0:	4444      	add	r4, r8
 80020e2:	445c      	add	r4, fp
 80020e4:	45a0      	cmp	r8, r4
 80020e6:	d903      	bls.n	80020f0 <__aeabi_dmul+0x270>
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0249      	lsls	r1, r1, #9
 80020ec:	4688      	mov	r8, r1
 80020ee:	4442      	add	r2, r8
 80020f0:	0c21      	lsrs	r1, r4, #16
 80020f2:	4688      	mov	r8, r1
 80020f4:	4661      	mov	r1, ip
 80020f6:	0409      	lsls	r1, r1, #16
 80020f8:	0c09      	lsrs	r1, r1, #16
 80020fa:	468c      	mov	ip, r1
 80020fc:	0039      	movs	r1, r7
 80020fe:	4359      	muls	r1, r3
 8002100:	4343      	muls	r3, r0
 8002102:	4370      	muls	r0, r6
 8002104:	437e      	muls	r6, r7
 8002106:	0c0f      	lsrs	r7, r1, #16
 8002108:	18f6      	adds	r6, r6, r3
 800210a:	0424      	lsls	r4, r4, #16
 800210c:	19be      	adds	r6, r7, r6
 800210e:	4464      	add	r4, ip
 8002110:	4442      	add	r2, r8
 8002112:	468c      	mov	ip, r1
 8002114:	42b3      	cmp	r3, r6
 8002116:	d903      	bls.n	8002120 <__aeabi_dmul+0x2a0>
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	025b      	lsls	r3, r3, #9
 800211c:	4698      	mov	r8, r3
 800211e:	4440      	add	r0, r8
 8002120:	9b02      	ldr	r3, [sp, #8]
 8002122:	4661      	mov	r1, ip
 8002124:	4698      	mov	r8, r3
 8002126:	9b04      	ldr	r3, [sp, #16]
 8002128:	0437      	lsls	r7, r6, #16
 800212a:	4443      	add	r3, r8
 800212c:	469b      	mov	fp, r3
 800212e:	45ab      	cmp	fp, r5
 8002130:	41ad      	sbcs	r5, r5
 8002132:	426b      	negs	r3, r5
 8002134:	040d      	lsls	r5, r1, #16
 8002136:	9905      	ldr	r1, [sp, #20]
 8002138:	0c2d      	lsrs	r5, r5, #16
 800213a:	468c      	mov	ip, r1
 800213c:	197f      	adds	r7, r7, r5
 800213e:	4467      	add	r7, ip
 8002140:	18fd      	adds	r5, r7, r3
 8002142:	46a8      	mov	r8, r5
 8002144:	465d      	mov	r5, fp
 8002146:	192d      	adds	r5, r5, r4
 8002148:	42a5      	cmp	r5, r4
 800214a:	41a4      	sbcs	r4, r4
 800214c:	4693      	mov	fp, r2
 800214e:	4264      	negs	r4, r4
 8002150:	46a4      	mov	ip, r4
 8002152:	44c3      	add	fp, r8
 8002154:	44dc      	add	ip, fp
 8002156:	428f      	cmp	r7, r1
 8002158:	41bf      	sbcs	r7, r7
 800215a:	4598      	cmp	r8, r3
 800215c:	419b      	sbcs	r3, r3
 800215e:	4593      	cmp	fp, r2
 8002160:	4192      	sbcs	r2, r2
 8002162:	45a4      	cmp	ip, r4
 8002164:	41a4      	sbcs	r4, r4
 8002166:	425b      	negs	r3, r3
 8002168:	427f      	negs	r7, r7
 800216a:	431f      	orrs	r7, r3
 800216c:	0c36      	lsrs	r6, r6, #16
 800216e:	4252      	negs	r2, r2
 8002170:	4264      	negs	r4, r4
 8002172:	19bf      	adds	r7, r7, r6
 8002174:	4322      	orrs	r2, r4
 8002176:	18bf      	adds	r7, r7, r2
 8002178:	4662      	mov	r2, ip
 800217a:	1838      	adds	r0, r7, r0
 800217c:	0243      	lsls	r3, r0, #9
 800217e:	0dd2      	lsrs	r2, r2, #23
 8002180:	9903      	ldr	r1, [sp, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	026a      	lsls	r2, r5, #9
 8002186:	430a      	orrs	r2, r1
 8002188:	1e50      	subs	r0, r2, #1
 800218a:	4182      	sbcs	r2, r0
 800218c:	4661      	mov	r1, ip
 800218e:	0ded      	lsrs	r5, r5, #23
 8002190:	432a      	orrs	r2, r5
 8002192:	024e      	lsls	r6, r1, #9
 8002194:	4332      	orrs	r2, r6
 8002196:	01d9      	lsls	r1, r3, #7
 8002198:	d400      	bmi.n	800219c <__aeabi_dmul+0x31c>
 800219a:	e0b3      	b.n	8002304 <__aeabi_dmul+0x484>
 800219c:	2601      	movs	r6, #1
 800219e:	0850      	lsrs	r0, r2, #1
 80021a0:	4032      	ands	r2, r6
 80021a2:	4302      	orrs	r2, r0
 80021a4:	07de      	lsls	r6, r3, #31
 80021a6:	4332      	orrs	r2, r6
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	4c22      	ldr	r4, [pc, #136]	; (8002234 <__aeabi_dmul+0x3b4>)
 80021ac:	4454      	add	r4, sl
 80021ae:	2c00      	cmp	r4, #0
 80021b0:	dd62      	ble.n	8002278 <__aeabi_dmul+0x3f8>
 80021b2:	0751      	lsls	r1, r2, #29
 80021b4:	d009      	beq.n	80021ca <__aeabi_dmul+0x34a>
 80021b6:	200f      	movs	r0, #15
 80021b8:	4010      	ands	r0, r2
 80021ba:	2804      	cmp	r0, #4
 80021bc:	d005      	beq.n	80021ca <__aeabi_dmul+0x34a>
 80021be:	1d10      	adds	r0, r2, #4
 80021c0:	4290      	cmp	r0, r2
 80021c2:	4192      	sbcs	r2, r2
 80021c4:	4252      	negs	r2, r2
 80021c6:	189b      	adds	r3, r3, r2
 80021c8:	0002      	movs	r2, r0
 80021ca:	01d9      	lsls	r1, r3, #7
 80021cc:	d504      	bpl.n	80021d8 <__aeabi_dmul+0x358>
 80021ce:	2480      	movs	r4, #128	; 0x80
 80021d0:	4819      	ldr	r0, [pc, #100]	; (8002238 <__aeabi_dmul+0x3b8>)
 80021d2:	00e4      	lsls	r4, r4, #3
 80021d4:	4003      	ands	r3, r0
 80021d6:	4454      	add	r4, sl
 80021d8:	4818      	ldr	r0, [pc, #96]	; (800223c <__aeabi_dmul+0x3bc>)
 80021da:	4284      	cmp	r4, r0
 80021dc:	dd00      	ble.n	80021e0 <__aeabi_dmul+0x360>
 80021de:	e727      	b.n	8002030 <__aeabi_dmul+0x1b0>
 80021e0:	075e      	lsls	r6, r3, #29
 80021e2:	025b      	lsls	r3, r3, #9
 80021e4:	08d2      	lsrs	r2, r2, #3
 80021e6:	0b1f      	lsrs	r7, r3, #12
 80021e8:	0563      	lsls	r3, r4, #21
 80021ea:	4316      	orrs	r6, r2
 80021ec:	0d5b      	lsrs	r3, r3, #21
 80021ee:	e6b2      	b.n	8001f56 <__aeabi_dmul+0xd6>
 80021f0:	2300      	movs	r3, #0
 80021f2:	4699      	mov	r9, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	2704      	movs	r7, #4
 80021f8:	2600      	movs	r6, #0
 80021fa:	469b      	mov	fp, r3
 80021fc:	e664      	b.n	8001ec8 <__aeabi_dmul+0x48>
 80021fe:	2303      	movs	r3, #3
 8002200:	9701      	str	r7, [sp, #4]
 8002202:	4681      	mov	r9, r0
 8002204:	270c      	movs	r7, #12
 8002206:	469b      	mov	fp, r3
 8002208:	e65e      	b.n	8001ec8 <__aeabi_dmul+0x48>
 800220a:	2201      	movs	r2, #1
 800220c:	2001      	movs	r0, #1
 800220e:	4317      	orrs	r7, r2
 8002210:	2200      	movs	r2, #0
 8002212:	e676      	b.n	8001f02 <__aeabi_dmul+0x82>
 8002214:	2303      	movs	r3, #3
 8002216:	2003      	movs	r0, #3
 8002218:	431f      	orrs	r7, r3
 800221a:	4643      	mov	r3, r8
 800221c:	e671      	b.n	8001f02 <__aeabi_dmul+0x82>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff
 8002224:	fffffc01 	.word	0xfffffc01
 8002228:	080178bc 	.word	0x080178bc
 800222c:	800fffff 	.word	0x800fffff
 8002230:	fffffc0d 	.word	0xfffffc0d
 8002234:	000003ff 	.word	0x000003ff
 8002238:	feffffff 	.word	0xfeffffff
 800223c:	000007fe 	.word	0x000007fe
 8002240:	2300      	movs	r3, #0
 8002242:	2780      	movs	r7, #128	; 0x80
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	033f      	lsls	r7, r7, #12
 8002248:	2600      	movs	r6, #0
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <__aeabi_dmul+0x4d8>)
 800224c:	e683      	b.n	8001f56 <__aeabi_dmul+0xd6>
 800224e:	9b01      	ldr	r3, [sp, #4]
 8002250:	0032      	movs	r2, r6
 8002252:	46a4      	mov	ip, r4
 8002254:	4658      	mov	r0, fp
 8002256:	e670      	b.n	8001f3a <__aeabi_dmul+0xba>
 8002258:	46ac      	mov	ip, r5
 800225a:	e66e      	b.n	8001f3a <__aeabi_dmul+0xba>
 800225c:	2780      	movs	r7, #128	; 0x80
 800225e:	9901      	ldr	r1, [sp, #4]
 8002260:	033f      	lsls	r7, r7, #12
 8002262:	4239      	tst	r1, r7
 8002264:	d02d      	beq.n	80022c2 <__aeabi_dmul+0x442>
 8002266:	423b      	tst	r3, r7
 8002268:	d12b      	bne.n	80022c2 <__aeabi_dmul+0x442>
 800226a:	431f      	orrs	r7, r3
 800226c:	033f      	lsls	r7, r7, #12
 800226e:	0b3f      	lsrs	r7, r7, #12
 8002270:	9500      	str	r5, [sp, #0]
 8002272:	0016      	movs	r6, r2
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <__aeabi_dmul+0x4d8>)
 8002276:	e66e      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002278:	2501      	movs	r5, #1
 800227a:	1b2d      	subs	r5, r5, r4
 800227c:	2d38      	cmp	r5, #56	; 0x38
 800227e:	dd00      	ble.n	8002282 <__aeabi_dmul+0x402>
 8002280:	e666      	b.n	8001f50 <__aeabi_dmul+0xd0>
 8002282:	2d1f      	cmp	r5, #31
 8002284:	dc40      	bgt.n	8002308 <__aeabi_dmul+0x488>
 8002286:	4835      	ldr	r0, [pc, #212]	; (800235c <__aeabi_dmul+0x4dc>)
 8002288:	001c      	movs	r4, r3
 800228a:	4450      	add	r0, sl
 800228c:	0016      	movs	r6, r2
 800228e:	4082      	lsls	r2, r0
 8002290:	4084      	lsls	r4, r0
 8002292:	40ee      	lsrs	r6, r5
 8002294:	1e50      	subs	r0, r2, #1
 8002296:	4182      	sbcs	r2, r0
 8002298:	4334      	orrs	r4, r6
 800229a:	4314      	orrs	r4, r2
 800229c:	40eb      	lsrs	r3, r5
 800229e:	0762      	lsls	r2, r4, #29
 80022a0:	d009      	beq.n	80022b6 <__aeabi_dmul+0x436>
 80022a2:	220f      	movs	r2, #15
 80022a4:	4022      	ands	r2, r4
 80022a6:	2a04      	cmp	r2, #4
 80022a8:	d005      	beq.n	80022b6 <__aeabi_dmul+0x436>
 80022aa:	0022      	movs	r2, r4
 80022ac:	1d14      	adds	r4, r2, #4
 80022ae:	4294      	cmp	r4, r2
 80022b0:	4180      	sbcs	r0, r0
 80022b2:	4240      	negs	r0, r0
 80022b4:	181b      	adds	r3, r3, r0
 80022b6:	021a      	lsls	r2, r3, #8
 80022b8:	d53e      	bpl.n	8002338 <__aeabi_dmul+0x4b8>
 80022ba:	2301      	movs	r3, #1
 80022bc:	2700      	movs	r7, #0
 80022be:	2600      	movs	r6, #0
 80022c0:	e649      	b.n	8001f56 <__aeabi_dmul+0xd6>
 80022c2:	2780      	movs	r7, #128	; 0x80
 80022c4:	9b01      	ldr	r3, [sp, #4]
 80022c6:	033f      	lsls	r7, r7, #12
 80022c8:	431f      	orrs	r7, r3
 80022ca:	033f      	lsls	r7, r7, #12
 80022cc:	0b3f      	lsrs	r7, r7, #12
 80022ce:	9400      	str	r4, [sp, #0]
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <__aeabi_dmul+0x4d8>)
 80022d2:	e640      	b.n	8001f56 <__aeabi_dmul+0xd6>
 80022d4:	0003      	movs	r3, r0
 80022d6:	465a      	mov	r2, fp
 80022d8:	3b28      	subs	r3, #40	; 0x28
 80022da:	409a      	lsls	r2, r3
 80022dc:	2600      	movs	r6, #0
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	e66d      	b.n	8001fbe <__aeabi_dmul+0x13e>
 80022e2:	4658      	mov	r0, fp
 80022e4:	f000 fd1a 	bl	8002d1c <__clzsi2>
 80022e8:	3020      	adds	r0, #32
 80022ea:	e657      	b.n	8001f9c <__aeabi_dmul+0x11c>
 80022ec:	0003      	movs	r3, r0
 80022ee:	4652      	mov	r2, sl
 80022f0:	3b28      	subs	r3, #40	; 0x28
 80022f2:	409a      	lsls	r2, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	2200      	movs	r2, #0
 80022f8:	e693      	b.n	8002022 <__aeabi_dmul+0x1a2>
 80022fa:	4650      	mov	r0, sl
 80022fc:	f000 fd0e 	bl	8002d1c <__clzsi2>
 8002300:	3020      	adds	r0, #32
 8002302:	e67b      	b.n	8001ffc <__aeabi_dmul+0x17c>
 8002304:	46ca      	mov	sl, r9
 8002306:	e750      	b.n	80021aa <__aeabi_dmul+0x32a>
 8002308:	201f      	movs	r0, #31
 800230a:	001e      	movs	r6, r3
 800230c:	4240      	negs	r0, r0
 800230e:	1b04      	subs	r4, r0, r4
 8002310:	40e6      	lsrs	r6, r4
 8002312:	2d20      	cmp	r5, #32
 8002314:	d003      	beq.n	800231e <__aeabi_dmul+0x49e>
 8002316:	4c12      	ldr	r4, [pc, #72]	; (8002360 <__aeabi_dmul+0x4e0>)
 8002318:	4454      	add	r4, sl
 800231a:	40a3      	lsls	r3, r4
 800231c:	431a      	orrs	r2, r3
 800231e:	1e50      	subs	r0, r2, #1
 8002320:	4182      	sbcs	r2, r0
 8002322:	4332      	orrs	r2, r6
 8002324:	2607      	movs	r6, #7
 8002326:	2700      	movs	r7, #0
 8002328:	4016      	ands	r6, r2
 800232a:	d009      	beq.n	8002340 <__aeabi_dmul+0x4c0>
 800232c:	200f      	movs	r0, #15
 800232e:	2300      	movs	r3, #0
 8002330:	4010      	ands	r0, r2
 8002332:	0014      	movs	r4, r2
 8002334:	2804      	cmp	r0, #4
 8002336:	d1b9      	bne.n	80022ac <__aeabi_dmul+0x42c>
 8002338:	0022      	movs	r2, r4
 800233a:	075e      	lsls	r6, r3, #29
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	0b1f      	lsrs	r7, r3, #12
 8002340:	08d2      	lsrs	r2, r2, #3
 8002342:	4316      	orrs	r6, r2
 8002344:	2300      	movs	r3, #0
 8002346:	e606      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002348:	2780      	movs	r7, #128	; 0x80
 800234a:	033f      	lsls	r7, r7, #12
 800234c:	431f      	orrs	r7, r3
 800234e:	033f      	lsls	r7, r7, #12
 8002350:	0b3f      	lsrs	r7, r7, #12
 8002352:	0016      	movs	r6, r2
 8002354:	4b00      	ldr	r3, [pc, #0]	; (8002358 <__aeabi_dmul+0x4d8>)
 8002356:	e5fe      	b.n	8001f56 <__aeabi_dmul+0xd6>
 8002358:	000007ff 	.word	0x000007ff
 800235c:	0000041e 	.word	0x0000041e
 8002360:	0000043e 	.word	0x0000043e

08002364 <__aeabi_dsub>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	4657      	mov	r7, sl
 8002368:	464e      	mov	r6, r9
 800236a:	4645      	mov	r5, r8
 800236c:	46de      	mov	lr, fp
 800236e:	000c      	movs	r4, r1
 8002370:	0309      	lsls	r1, r1, #12
 8002372:	b5e0      	push	{r5, r6, r7, lr}
 8002374:	0a49      	lsrs	r1, r1, #9
 8002376:	0f46      	lsrs	r6, r0, #29
 8002378:	005f      	lsls	r7, r3, #1
 800237a:	4331      	orrs	r1, r6
 800237c:	031e      	lsls	r6, r3, #12
 800237e:	0fdb      	lsrs	r3, r3, #31
 8002380:	0a76      	lsrs	r6, r6, #9
 8002382:	469b      	mov	fp, r3
 8002384:	0f53      	lsrs	r3, r2, #29
 8002386:	4333      	orrs	r3, r6
 8002388:	4ec8      	ldr	r6, [pc, #800]	; (80026ac <__aeabi_dsub+0x348>)
 800238a:	0065      	lsls	r5, r4, #1
 800238c:	00c0      	lsls	r0, r0, #3
 800238e:	0fe4      	lsrs	r4, r4, #31
 8002390:	00d2      	lsls	r2, r2, #3
 8002392:	0d6d      	lsrs	r5, r5, #21
 8002394:	46a2      	mov	sl, r4
 8002396:	4681      	mov	r9, r0
 8002398:	0d7f      	lsrs	r7, r7, #21
 800239a:	469c      	mov	ip, r3
 800239c:	4690      	mov	r8, r2
 800239e:	42b7      	cmp	r7, r6
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x40>
 80023a2:	e0b9      	b.n	8002518 <__aeabi_dsub+0x1b4>
 80023a4:	465b      	mov	r3, fp
 80023a6:	2601      	movs	r6, #1
 80023a8:	4073      	eors	r3, r6
 80023aa:	469b      	mov	fp, r3
 80023ac:	1bee      	subs	r6, r5, r7
 80023ae:	45a3      	cmp	fp, r4
 80023b0:	d100      	bne.n	80023b4 <__aeabi_dsub+0x50>
 80023b2:	e083      	b.n	80024bc <__aeabi_dsub+0x158>
 80023b4:	2e00      	cmp	r6, #0
 80023b6:	dd63      	ble.n	8002480 <__aeabi_dsub+0x11c>
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	d000      	beq.n	80023be <__aeabi_dsub+0x5a>
 80023bc:	e0b1      	b.n	8002522 <__aeabi_dsub+0x1be>
 80023be:	4663      	mov	r3, ip
 80023c0:	4313      	orrs	r3, r2
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x62>
 80023c4:	e123      	b.n	800260e <__aeabi_dsub+0x2aa>
 80023c6:	1e73      	subs	r3, r6, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d000      	beq.n	80023ce <__aeabi_dsub+0x6a>
 80023cc:	e1ba      	b.n	8002744 <__aeabi_dsub+0x3e0>
 80023ce:	1a86      	subs	r6, r0, r2
 80023d0:	4663      	mov	r3, ip
 80023d2:	42b0      	cmp	r0, r6
 80023d4:	4180      	sbcs	r0, r0
 80023d6:	2501      	movs	r5, #1
 80023d8:	1ac9      	subs	r1, r1, r3
 80023da:	4240      	negs	r0, r0
 80023dc:	1a09      	subs	r1, r1, r0
 80023de:	020b      	lsls	r3, r1, #8
 80023e0:	d400      	bmi.n	80023e4 <__aeabi_dsub+0x80>
 80023e2:	e147      	b.n	8002674 <__aeabi_dsub+0x310>
 80023e4:	0249      	lsls	r1, r1, #9
 80023e6:	0a4b      	lsrs	r3, r1, #9
 80023e8:	4698      	mov	r8, r3
 80023ea:	4643      	mov	r3, r8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dsub+0x8e>
 80023f0:	e189      	b.n	8002706 <__aeabi_dsub+0x3a2>
 80023f2:	4640      	mov	r0, r8
 80023f4:	f000 fc92 	bl	8002d1c <__clzsi2>
 80023f8:	0003      	movs	r3, r0
 80023fa:	3b08      	subs	r3, #8
 80023fc:	2b1f      	cmp	r3, #31
 80023fe:	dd00      	ble.n	8002402 <__aeabi_dsub+0x9e>
 8002400:	e17c      	b.n	80026fc <__aeabi_dsub+0x398>
 8002402:	2220      	movs	r2, #32
 8002404:	0030      	movs	r0, r6
 8002406:	1ad2      	subs	r2, r2, r3
 8002408:	4641      	mov	r1, r8
 800240a:	40d0      	lsrs	r0, r2
 800240c:	4099      	lsls	r1, r3
 800240e:	0002      	movs	r2, r0
 8002410:	409e      	lsls	r6, r3
 8002412:	430a      	orrs	r2, r1
 8002414:	429d      	cmp	r5, r3
 8002416:	dd00      	ble.n	800241a <__aeabi_dsub+0xb6>
 8002418:	e16a      	b.n	80026f0 <__aeabi_dsub+0x38c>
 800241a:	1b5d      	subs	r5, r3, r5
 800241c:	1c6b      	adds	r3, r5, #1
 800241e:	2b1f      	cmp	r3, #31
 8002420:	dd00      	ble.n	8002424 <__aeabi_dsub+0xc0>
 8002422:	e194      	b.n	800274e <__aeabi_dsub+0x3ea>
 8002424:	2120      	movs	r1, #32
 8002426:	0010      	movs	r0, r2
 8002428:	0035      	movs	r5, r6
 800242a:	1ac9      	subs	r1, r1, r3
 800242c:	408e      	lsls	r6, r1
 800242e:	40da      	lsrs	r2, r3
 8002430:	4088      	lsls	r0, r1
 8002432:	40dd      	lsrs	r5, r3
 8002434:	1e71      	subs	r1, r6, #1
 8002436:	418e      	sbcs	r6, r1
 8002438:	0011      	movs	r1, r2
 800243a:	2207      	movs	r2, #7
 800243c:	4328      	orrs	r0, r5
 800243e:	2500      	movs	r5, #0
 8002440:	4306      	orrs	r6, r0
 8002442:	4032      	ands	r2, r6
 8002444:	2a00      	cmp	r2, #0
 8002446:	d009      	beq.n	800245c <__aeabi_dsub+0xf8>
 8002448:	230f      	movs	r3, #15
 800244a:	4033      	ands	r3, r6
 800244c:	2b04      	cmp	r3, #4
 800244e:	d005      	beq.n	800245c <__aeabi_dsub+0xf8>
 8002450:	1d33      	adds	r3, r6, #4
 8002452:	42b3      	cmp	r3, r6
 8002454:	41b6      	sbcs	r6, r6
 8002456:	4276      	negs	r6, r6
 8002458:	1989      	adds	r1, r1, r6
 800245a:	001e      	movs	r6, r3
 800245c:	020b      	lsls	r3, r1, #8
 800245e:	d400      	bmi.n	8002462 <__aeabi_dsub+0xfe>
 8002460:	e23d      	b.n	80028de <__aeabi_dsub+0x57a>
 8002462:	1c6a      	adds	r2, r5, #1
 8002464:	4b91      	ldr	r3, [pc, #580]	; (80026ac <__aeabi_dsub+0x348>)
 8002466:	0555      	lsls	r5, r2, #21
 8002468:	0d6d      	lsrs	r5, r5, #21
 800246a:	429a      	cmp	r2, r3
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x10c>
 800246e:	e119      	b.n	80026a4 <__aeabi_dsub+0x340>
 8002470:	4a8f      	ldr	r2, [pc, #572]	; (80026b0 <__aeabi_dsub+0x34c>)
 8002472:	08f6      	lsrs	r6, r6, #3
 8002474:	400a      	ands	r2, r1
 8002476:	0757      	lsls	r7, r2, #29
 8002478:	0252      	lsls	r2, r2, #9
 800247a:	4337      	orrs	r7, r6
 800247c:	0b12      	lsrs	r2, r2, #12
 800247e:	e09b      	b.n	80025b8 <__aeabi_dsub+0x254>
 8002480:	2e00      	cmp	r6, #0
 8002482:	d000      	beq.n	8002486 <__aeabi_dsub+0x122>
 8002484:	e0c5      	b.n	8002612 <__aeabi_dsub+0x2ae>
 8002486:	1c6e      	adds	r6, r5, #1
 8002488:	0576      	lsls	r6, r6, #21
 800248a:	0d76      	lsrs	r6, r6, #21
 800248c:	2e01      	cmp	r6, #1
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x12e>
 8002490:	e148      	b.n	8002724 <__aeabi_dsub+0x3c0>
 8002492:	4667      	mov	r7, ip
 8002494:	1a86      	subs	r6, r0, r2
 8002496:	1bcb      	subs	r3, r1, r7
 8002498:	42b0      	cmp	r0, r6
 800249a:	41bf      	sbcs	r7, r7
 800249c:	427f      	negs	r7, r7
 800249e:	46b8      	mov	r8, r7
 80024a0:	001f      	movs	r7, r3
 80024a2:	4643      	mov	r3, r8
 80024a4:	1aff      	subs	r7, r7, r3
 80024a6:	003b      	movs	r3, r7
 80024a8:	46b8      	mov	r8, r7
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	d500      	bpl.n	80024b0 <__aeabi_dsub+0x14c>
 80024ae:	e15f      	b.n	8002770 <__aeabi_dsub+0x40c>
 80024b0:	4337      	orrs	r7, r6
 80024b2:	d19a      	bne.n	80023ea <__aeabi_dsub+0x86>
 80024b4:	2200      	movs	r2, #0
 80024b6:	2400      	movs	r4, #0
 80024b8:	2500      	movs	r5, #0
 80024ba:	e079      	b.n	80025b0 <__aeabi_dsub+0x24c>
 80024bc:	2e00      	cmp	r6, #0
 80024be:	dc00      	bgt.n	80024c2 <__aeabi_dsub+0x15e>
 80024c0:	e0fa      	b.n	80026b8 <__aeabi_dsub+0x354>
 80024c2:	2f00      	cmp	r7, #0
 80024c4:	d100      	bne.n	80024c8 <__aeabi_dsub+0x164>
 80024c6:	e08d      	b.n	80025e4 <__aeabi_dsub+0x280>
 80024c8:	4b78      	ldr	r3, [pc, #480]	; (80026ac <__aeabi_dsub+0x348>)
 80024ca:	429d      	cmp	r5, r3
 80024cc:	d067      	beq.n	800259e <__aeabi_dsub+0x23a>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	4667      	mov	r7, ip
 80024d2:	041b      	lsls	r3, r3, #16
 80024d4:	431f      	orrs	r7, r3
 80024d6:	46bc      	mov	ip, r7
 80024d8:	2e38      	cmp	r6, #56	; 0x38
 80024da:	dc00      	bgt.n	80024de <__aeabi_dsub+0x17a>
 80024dc:	e152      	b.n	8002784 <__aeabi_dsub+0x420>
 80024de:	4663      	mov	r3, ip
 80024e0:	4313      	orrs	r3, r2
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	4193      	sbcs	r3, r2
 80024e6:	181e      	adds	r6, r3, r0
 80024e8:	4286      	cmp	r6, r0
 80024ea:	4180      	sbcs	r0, r0
 80024ec:	4240      	negs	r0, r0
 80024ee:	1809      	adds	r1, r1, r0
 80024f0:	020b      	lsls	r3, r1, #8
 80024f2:	d400      	bmi.n	80024f6 <__aeabi_dsub+0x192>
 80024f4:	e0be      	b.n	8002674 <__aeabi_dsub+0x310>
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <__aeabi_dsub+0x348>)
 80024f8:	3501      	adds	r5, #1
 80024fa:	429d      	cmp	r5, r3
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x19c>
 80024fe:	e0d2      	b.n	80026a6 <__aeabi_dsub+0x342>
 8002500:	4a6b      	ldr	r2, [pc, #428]	; (80026b0 <__aeabi_dsub+0x34c>)
 8002502:	0873      	lsrs	r3, r6, #1
 8002504:	400a      	ands	r2, r1
 8002506:	2101      	movs	r1, #1
 8002508:	400e      	ands	r6, r1
 800250a:	431e      	orrs	r6, r3
 800250c:	0851      	lsrs	r1, r2, #1
 800250e:	07d3      	lsls	r3, r2, #31
 8002510:	2207      	movs	r2, #7
 8002512:	431e      	orrs	r6, r3
 8002514:	4032      	ands	r2, r6
 8002516:	e795      	b.n	8002444 <__aeabi_dsub+0xe0>
 8002518:	001e      	movs	r6, r3
 800251a:	4316      	orrs	r6, r2
 800251c:	d000      	beq.n	8002520 <__aeabi_dsub+0x1bc>
 800251e:	e745      	b.n	80023ac <__aeabi_dsub+0x48>
 8002520:	e740      	b.n	80023a4 <__aeabi_dsub+0x40>
 8002522:	4b62      	ldr	r3, [pc, #392]	; (80026ac <__aeabi_dsub+0x348>)
 8002524:	429d      	cmp	r5, r3
 8002526:	d03a      	beq.n	800259e <__aeabi_dsub+0x23a>
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	4667      	mov	r7, ip
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431f      	orrs	r7, r3
 8002530:	46bc      	mov	ip, r7
 8002532:	2e38      	cmp	r6, #56	; 0x38
 8002534:	dd00      	ble.n	8002538 <__aeabi_dsub+0x1d4>
 8002536:	e0eb      	b.n	8002710 <__aeabi_dsub+0x3ac>
 8002538:	2e1f      	cmp	r6, #31
 800253a:	dc00      	bgt.n	800253e <__aeabi_dsub+0x1da>
 800253c:	e13a      	b.n	80027b4 <__aeabi_dsub+0x450>
 800253e:	0033      	movs	r3, r6
 8002540:	4667      	mov	r7, ip
 8002542:	3b20      	subs	r3, #32
 8002544:	40df      	lsrs	r7, r3
 8002546:	003b      	movs	r3, r7
 8002548:	2e20      	cmp	r6, #32
 800254a:	d005      	beq.n	8002558 <__aeabi_dsub+0x1f4>
 800254c:	2740      	movs	r7, #64	; 0x40
 800254e:	1bbf      	subs	r7, r7, r6
 8002550:	4666      	mov	r6, ip
 8002552:	40be      	lsls	r6, r7
 8002554:	4332      	orrs	r2, r6
 8002556:	4690      	mov	r8, r2
 8002558:	4646      	mov	r6, r8
 800255a:	1e72      	subs	r2, r6, #1
 800255c:	4196      	sbcs	r6, r2
 800255e:	4333      	orrs	r3, r6
 8002560:	e0da      	b.n	8002718 <__aeabi_dsub+0x3b4>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d100      	bne.n	8002568 <__aeabi_dsub+0x204>
 8002566:	e214      	b.n	8002992 <__aeabi_dsub+0x62e>
 8002568:	4663      	mov	r3, ip
 800256a:	4313      	orrs	r3, r2
 800256c:	d100      	bne.n	8002570 <__aeabi_dsub+0x20c>
 800256e:	e168      	b.n	8002842 <__aeabi_dsub+0x4de>
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	074e      	lsls	r6, r1, #29
 8002574:	08c0      	lsrs	r0, r0, #3
 8002576:	08c9      	lsrs	r1, r1, #3
 8002578:	031b      	lsls	r3, r3, #12
 800257a:	4306      	orrs	r6, r0
 800257c:	4219      	tst	r1, r3
 800257e:	d008      	beq.n	8002592 <__aeabi_dsub+0x22e>
 8002580:	4660      	mov	r0, ip
 8002582:	08c0      	lsrs	r0, r0, #3
 8002584:	4218      	tst	r0, r3
 8002586:	d104      	bne.n	8002592 <__aeabi_dsub+0x22e>
 8002588:	4663      	mov	r3, ip
 800258a:	0001      	movs	r1, r0
 800258c:	08d2      	lsrs	r2, r2, #3
 800258e:	075e      	lsls	r6, r3, #29
 8002590:	4316      	orrs	r6, r2
 8002592:	00f3      	lsls	r3, r6, #3
 8002594:	4699      	mov	r9, r3
 8002596:	00c9      	lsls	r1, r1, #3
 8002598:	0f72      	lsrs	r2, r6, #29
 800259a:	4d44      	ldr	r5, [pc, #272]	; (80026ac <__aeabi_dsub+0x348>)
 800259c:	4311      	orrs	r1, r2
 800259e:	464b      	mov	r3, r9
 80025a0:	08de      	lsrs	r6, r3, #3
 80025a2:	4b42      	ldr	r3, [pc, #264]	; (80026ac <__aeabi_dsub+0x348>)
 80025a4:	074f      	lsls	r7, r1, #29
 80025a6:	4337      	orrs	r7, r6
 80025a8:	08ca      	lsrs	r2, r1, #3
 80025aa:	429d      	cmp	r5, r3
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0x24c>
 80025ae:	e06e      	b.n	800268e <__aeabi_dsub+0x32a>
 80025b0:	0312      	lsls	r2, r2, #12
 80025b2:	056d      	lsls	r5, r5, #21
 80025b4:	0b12      	lsrs	r2, r2, #12
 80025b6:	0d6d      	lsrs	r5, r5, #21
 80025b8:	2100      	movs	r1, #0
 80025ba:	0312      	lsls	r2, r2, #12
 80025bc:	0b13      	lsrs	r3, r2, #12
 80025be:	0d0a      	lsrs	r2, r1, #20
 80025c0:	0512      	lsls	r2, r2, #20
 80025c2:	431a      	orrs	r2, r3
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <__aeabi_dsub+0x350>)
 80025c6:	052d      	lsls	r5, r5, #20
 80025c8:	4013      	ands	r3, r2
 80025ca:	432b      	orrs	r3, r5
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	07e4      	lsls	r4, r4, #31
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	4323      	orrs	r3, r4
 80025d4:	0038      	movs	r0, r7
 80025d6:	0019      	movs	r1, r3
 80025d8:	bc3c      	pop	{r2, r3, r4, r5}
 80025da:	4690      	mov	r8, r2
 80025dc:	4699      	mov	r9, r3
 80025de:	46a2      	mov	sl, r4
 80025e0:	46ab      	mov	fp, r5
 80025e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025e4:	4663      	mov	r3, ip
 80025e6:	4313      	orrs	r3, r2
 80025e8:	d011      	beq.n	800260e <__aeabi_dsub+0x2aa>
 80025ea:	1e73      	subs	r3, r6, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d000      	beq.n	80025f2 <__aeabi_dsub+0x28e>
 80025f0:	e107      	b.n	8002802 <__aeabi_dsub+0x49e>
 80025f2:	1886      	adds	r6, r0, r2
 80025f4:	4286      	cmp	r6, r0
 80025f6:	4180      	sbcs	r0, r0
 80025f8:	4461      	add	r1, ip
 80025fa:	4240      	negs	r0, r0
 80025fc:	1809      	adds	r1, r1, r0
 80025fe:	2501      	movs	r5, #1
 8002600:	020b      	lsls	r3, r1, #8
 8002602:	d537      	bpl.n	8002674 <__aeabi_dsub+0x310>
 8002604:	2502      	movs	r5, #2
 8002606:	e77b      	b.n	8002500 <__aeabi_dsub+0x19c>
 8002608:	003e      	movs	r6, r7
 800260a:	4661      	mov	r1, ip
 800260c:	4691      	mov	r9, r2
 800260e:	0035      	movs	r5, r6
 8002610:	e7c5      	b.n	800259e <__aeabi_dsub+0x23a>
 8002612:	465c      	mov	r4, fp
 8002614:	2d00      	cmp	r5, #0
 8002616:	d000      	beq.n	800261a <__aeabi_dsub+0x2b6>
 8002618:	e0e1      	b.n	80027de <__aeabi_dsub+0x47a>
 800261a:	000b      	movs	r3, r1
 800261c:	4303      	orrs	r3, r0
 800261e:	d0f3      	beq.n	8002608 <__aeabi_dsub+0x2a4>
 8002620:	1c73      	adds	r3, r6, #1
 8002622:	d100      	bne.n	8002626 <__aeabi_dsub+0x2c2>
 8002624:	e1ac      	b.n	8002980 <__aeabi_dsub+0x61c>
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <__aeabi_dsub+0x348>)
 8002628:	429f      	cmp	r7, r3
 800262a:	d100      	bne.n	800262e <__aeabi_dsub+0x2ca>
 800262c:	e13a      	b.n	80028a4 <__aeabi_dsub+0x540>
 800262e:	43f3      	mvns	r3, r6
 8002630:	2b38      	cmp	r3, #56	; 0x38
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x2d2>
 8002634:	e16f      	b.n	8002916 <__aeabi_dsub+0x5b2>
 8002636:	2b1f      	cmp	r3, #31
 8002638:	dd00      	ble.n	800263c <__aeabi_dsub+0x2d8>
 800263a:	e18c      	b.n	8002956 <__aeabi_dsub+0x5f2>
 800263c:	2520      	movs	r5, #32
 800263e:	000e      	movs	r6, r1
 8002640:	1aed      	subs	r5, r5, r3
 8002642:	40ae      	lsls	r6, r5
 8002644:	46b0      	mov	r8, r6
 8002646:	0006      	movs	r6, r0
 8002648:	46aa      	mov	sl, r5
 800264a:	40de      	lsrs	r6, r3
 800264c:	4645      	mov	r5, r8
 800264e:	4335      	orrs	r5, r6
 8002650:	002e      	movs	r6, r5
 8002652:	4655      	mov	r5, sl
 8002654:	40d9      	lsrs	r1, r3
 8002656:	40a8      	lsls	r0, r5
 8002658:	4663      	mov	r3, ip
 800265a:	1e45      	subs	r5, r0, #1
 800265c:	41a8      	sbcs	r0, r5
 800265e:	1a5b      	subs	r3, r3, r1
 8002660:	469c      	mov	ip, r3
 8002662:	4330      	orrs	r0, r6
 8002664:	1a16      	subs	r6, r2, r0
 8002666:	42b2      	cmp	r2, r6
 8002668:	4192      	sbcs	r2, r2
 800266a:	4663      	mov	r3, ip
 800266c:	4252      	negs	r2, r2
 800266e:	1a99      	subs	r1, r3, r2
 8002670:	003d      	movs	r5, r7
 8002672:	e6b4      	b.n	80023de <__aeabi_dsub+0x7a>
 8002674:	2207      	movs	r2, #7
 8002676:	4032      	ands	r2, r6
 8002678:	2a00      	cmp	r2, #0
 800267a:	d000      	beq.n	800267e <__aeabi_dsub+0x31a>
 800267c:	e6e4      	b.n	8002448 <__aeabi_dsub+0xe4>
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <__aeabi_dsub+0x348>)
 8002680:	08f6      	lsrs	r6, r6, #3
 8002682:	074f      	lsls	r7, r1, #29
 8002684:	4337      	orrs	r7, r6
 8002686:	08ca      	lsrs	r2, r1, #3
 8002688:	429d      	cmp	r5, r3
 800268a:	d000      	beq.n	800268e <__aeabi_dsub+0x32a>
 800268c:	e790      	b.n	80025b0 <__aeabi_dsub+0x24c>
 800268e:	003b      	movs	r3, r7
 8002690:	4313      	orrs	r3, r2
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x332>
 8002694:	e1a6      	b.n	80029e4 <__aeabi_dsub+0x680>
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	031b      	lsls	r3, r3, #12
 800269a:	431a      	orrs	r2, r3
 800269c:	0312      	lsls	r2, r2, #12
 800269e:	0b12      	lsrs	r2, r2, #12
 80026a0:	4d02      	ldr	r5, [pc, #8]	; (80026ac <__aeabi_dsub+0x348>)
 80026a2:	e789      	b.n	80025b8 <__aeabi_dsub+0x254>
 80026a4:	0015      	movs	r5, r2
 80026a6:	2200      	movs	r2, #0
 80026a8:	2700      	movs	r7, #0
 80026aa:	e785      	b.n	80025b8 <__aeabi_dsub+0x254>
 80026ac:	000007ff 	.word	0x000007ff
 80026b0:	ff7fffff 	.word	0xff7fffff
 80026b4:	800fffff 	.word	0x800fffff
 80026b8:	2e00      	cmp	r6, #0
 80026ba:	d000      	beq.n	80026be <__aeabi_dsub+0x35a>
 80026bc:	e0c7      	b.n	800284e <__aeabi_dsub+0x4ea>
 80026be:	1c6b      	adds	r3, r5, #1
 80026c0:	055e      	lsls	r6, r3, #21
 80026c2:	0d76      	lsrs	r6, r6, #21
 80026c4:	2e01      	cmp	r6, #1
 80026c6:	dc00      	bgt.n	80026ca <__aeabi_dsub+0x366>
 80026c8:	e0f0      	b.n	80028ac <__aeabi_dsub+0x548>
 80026ca:	4dc8      	ldr	r5, [pc, #800]	; (80029ec <__aeabi_dsub+0x688>)
 80026cc:	42ab      	cmp	r3, r5
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x36e>
 80026d0:	e0b9      	b.n	8002846 <__aeabi_dsub+0x4e2>
 80026d2:	1885      	adds	r5, r0, r2
 80026d4:	000a      	movs	r2, r1
 80026d6:	4285      	cmp	r5, r0
 80026d8:	4189      	sbcs	r1, r1
 80026da:	4462      	add	r2, ip
 80026dc:	4249      	negs	r1, r1
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	2207      	movs	r2, #7
 80026e2:	07ce      	lsls	r6, r1, #31
 80026e4:	086d      	lsrs	r5, r5, #1
 80026e6:	432e      	orrs	r6, r5
 80026e8:	0849      	lsrs	r1, r1, #1
 80026ea:	4032      	ands	r2, r6
 80026ec:	001d      	movs	r5, r3
 80026ee:	e6a9      	b.n	8002444 <__aeabi_dsub+0xe0>
 80026f0:	49bf      	ldr	r1, [pc, #764]	; (80029f0 <__aeabi_dsub+0x68c>)
 80026f2:	1aed      	subs	r5, r5, r3
 80026f4:	4011      	ands	r1, r2
 80026f6:	2207      	movs	r2, #7
 80026f8:	4032      	ands	r2, r6
 80026fa:	e6a3      	b.n	8002444 <__aeabi_dsub+0xe0>
 80026fc:	0032      	movs	r2, r6
 80026fe:	3828      	subs	r0, #40	; 0x28
 8002700:	4082      	lsls	r2, r0
 8002702:	2600      	movs	r6, #0
 8002704:	e686      	b.n	8002414 <__aeabi_dsub+0xb0>
 8002706:	0030      	movs	r0, r6
 8002708:	f000 fb08 	bl	8002d1c <__clzsi2>
 800270c:	3020      	adds	r0, #32
 800270e:	e673      	b.n	80023f8 <__aeabi_dsub+0x94>
 8002710:	4663      	mov	r3, ip
 8002712:	4313      	orrs	r3, r2
 8002714:	1e5a      	subs	r2, r3, #1
 8002716:	4193      	sbcs	r3, r2
 8002718:	1ac6      	subs	r6, r0, r3
 800271a:	42b0      	cmp	r0, r6
 800271c:	4180      	sbcs	r0, r0
 800271e:	4240      	negs	r0, r0
 8002720:	1a09      	subs	r1, r1, r0
 8002722:	e65c      	b.n	80023de <__aeabi_dsub+0x7a>
 8002724:	000e      	movs	r6, r1
 8002726:	4667      	mov	r7, ip
 8002728:	4306      	orrs	r6, r0
 800272a:	4317      	orrs	r7, r2
 800272c:	2d00      	cmp	r5, #0
 800272e:	d15e      	bne.n	80027ee <__aeabi_dsub+0x48a>
 8002730:	2e00      	cmp	r6, #0
 8002732:	d000      	beq.n	8002736 <__aeabi_dsub+0x3d2>
 8002734:	e0f3      	b.n	800291e <__aeabi_dsub+0x5ba>
 8002736:	2f00      	cmp	r7, #0
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x3d8>
 800273a:	e11e      	b.n	800297a <__aeabi_dsub+0x616>
 800273c:	465c      	mov	r4, fp
 800273e:	4661      	mov	r1, ip
 8002740:	4691      	mov	r9, r2
 8002742:	e72c      	b.n	800259e <__aeabi_dsub+0x23a>
 8002744:	4fa9      	ldr	r7, [pc, #676]	; (80029ec <__aeabi_dsub+0x688>)
 8002746:	42be      	cmp	r6, r7
 8002748:	d07b      	beq.n	8002842 <__aeabi_dsub+0x4de>
 800274a:	001e      	movs	r6, r3
 800274c:	e6f1      	b.n	8002532 <__aeabi_dsub+0x1ce>
 800274e:	0010      	movs	r0, r2
 8002750:	3d1f      	subs	r5, #31
 8002752:	40e8      	lsrs	r0, r5
 8002754:	2b20      	cmp	r3, #32
 8002756:	d003      	beq.n	8002760 <__aeabi_dsub+0x3fc>
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	1acb      	subs	r3, r1, r3
 800275c:	409a      	lsls	r2, r3
 800275e:	4316      	orrs	r6, r2
 8002760:	1e73      	subs	r3, r6, #1
 8002762:	419e      	sbcs	r6, r3
 8002764:	2207      	movs	r2, #7
 8002766:	4306      	orrs	r6, r0
 8002768:	4032      	ands	r2, r6
 800276a:	2100      	movs	r1, #0
 800276c:	2500      	movs	r5, #0
 800276e:	e783      	b.n	8002678 <__aeabi_dsub+0x314>
 8002770:	1a16      	subs	r6, r2, r0
 8002772:	4663      	mov	r3, ip
 8002774:	42b2      	cmp	r2, r6
 8002776:	4180      	sbcs	r0, r0
 8002778:	1a59      	subs	r1, r3, r1
 800277a:	4240      	negs	r0, r0
 800277c:	1a0b      	subs	r3, r1, r0
 800277e:	4698      	mov	r8, r3
 8002780:	465c      	mov	r4, fp
 8002782:	e632      	b.n	80023ea <__aeabi_dsub+0x86>
 8002784:	2e1f      	cmp	r6, #31
 8002786:	dd00      	ble.n	800278a <__aeabi_dsub+0x426>
 8002788:	e0ab      	b.n	80028e2 <__aeabi_dsub+0x57e>
 800278a:	2720      	movs	r7, #32
 800278c:	1bbb      	subs	r3, r7, r6
 800278e:	469a      	mov	sl, r3
 8002790:	4663      	mov	r3, ip
 8002792:	4657      	mov	r7, sl
 8002794:	40bb      	lsls	r3, r7
 8002796:	4699      	mov	r9, r3
 8002798:	0013      	movs	r3, r2
 800279a:	464f      	mov	r7, r9
 800279c:	40f3      	lsrs	r3, r6
 800279e:	431f      	orrs	r7, r3
 80027a0:	003b      	movs	r3, r7
 80027a2:	4657      	mov	r7, sl
 80027a4:	40ba      	lsls	r2, r7
 80027a6:	1e57      	subs	r7, r2, #1
 80027a8:	41ba      	sbcs	r2, r7
 80027aa:	4313      	orrs	r3, r2
 80027ac:	4662      	mov	r2, ip
 80027ae:	40f2      	lsrs	r2, r6
 80027b0:	1889      	adds	r1, r1, r2
 80027b2:	e698      	b.n	80024e6 <__aeabi_dsub+0x182>
 80027b4:	2720      	movs	r7, #32
 80027b6:	1bbb      	subs	r3, r7, r6
 80027b8:	469a      	mov	sl, r3
 80027ba:	4663      	mov	r3, ip
 80027bc:	4657      	mov	r7, sl
 80027be:	40bb      	lsls	r3, r7
 80027c0:	4699      	mov	r9, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	464f      	mov	r7, r9
 80027c6:	40f3      	lsrs	r3, r6
 80027c8:	431f      	orrs	r7, r3
 80027ca:	003b      	movs	r3, r7
 80027cc:	4657      	mov	r7, sl
 80027ce:	40ba      	lsls	r2, r7
 80027d0:	1e57      	subs	r7, r2, #1
 80027d2:	41ba      	sbcs	r2, r7
 80027d4:	4313      	orrs	r3, r2
 80027d6:	4662      	mov	r2, ip
 80027d8:	40f2      	lsrs	r2, r6
 80027da:	1a89      	subs	r1, r1, r2
 80027dc:	e79c      	b.n	8002718 <__aeabi_dsub+0x3b4>
 80027de:	4b83      	ldr	r3, [pc, #524]	; (80029ec <__aeabi_dsub+0x688>)
 80027e0:	429f      	cmp	r7, r3
 80027e2:	d05f      	beq.n	80028a4 <__aeabi_dsub+0x540>
 80027e4:	2580      	movs	r5, #128	; 0x80
 80027e6:	042d      	lsls	r5, r5, #16
 80027e8:	4273      	negs	r3, r6
 80027ea:	4329      	orrs	r1, r5
 80027ec:	e720      	b.n	8002630 <__aeabi_dsub+0x2cc>
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d10c      	bne.n	800280c <__aeabi_dsub+0x4a8>
 80027f2:	2f00      	cmp	r7, #0
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x494>
 80027f6:	e0d0      	b.n	800299a <__aeabi_dsub+0x636>
 80027f8:	465c      	mov	r4, fp
 80027fa:	4661      	mov	r1, ip
 80027fc:	4691      	mov	r9, r2
 80027fe:	4d7b      	ldr	r5, [pc, #492]	; (80029ec <__aeabi_dsub+0x688>)
 8002800:	e6cd      	b.n	800259e <__aeabi_dsub+0x23a>
 8002802:	4f7a      	ldr	r7, [pc, #488]	; (80029ec <__aeabi_dsub+0x688>)
 8002804:	42be      	cmp	r6, r7
 8002806:	d01c      	beq.n	8002842 <__aeabi_dsub+0x4de>
 8002808:	001e      	movs	r6, r3
 800280a:	e665      	b.n	80024d8 <__aeabi_dsub+0x174>
 800280c:	2f00      	cmp	r7, #0
 800280e:	d018      	beq.n	8002842 <__aeabi_dsub+0x4de>
 8002810:	08c0      	lsrs	r0, r0, #3
 8002812:	074e      	lsls	r6, r1, #29
 8002814:	4306      	orrs	r6, r0
 8002816:	2080      	movs	r0, #128	; 0x80
 8002818:	08c9      	lsrs	r1, r1, #3
 800281a:	0300      	lsls	r0, r0, #12
 800281c:	4201      	tst	r1, r0
 800281e:	d008      	beq.n	8002832 <__aeabi_dsub+0x4ce>
 8002820:	4663      	mov	r3, ip
 8002822:	08dc      	lsrs	r4, r3, #3
 8002824:	4204      	tst	r4, r0
 8002826:	d104      	bne.n	8002832 <__aeabi_dsub+0x4ce>
 8002828:	0021      	movs	r1, r4
 800282a:	46da      	mov	sl, fp
 800282c:	08d2      	lsrs	r2, r2, #3
 800282e:	075e      	lsls	r6, r3, #29
 8002830:	4316      	orrs	r6, r2
 8002832:	00f3      	lsls	r3, r6, #3
 8002834:	4699      	mov	r9, r3
 8002836:	2401      	movs	r4, #1
 8002838:	4653      	mov	r3, sl
 800283a:	00c9      	lsls	r1, r1, #3
 800283c:	0f72      	lsrs	r2, r6, #29
 800283e:	4311      	orrs	r1, r2
 8002840:	401c      	ands	r4, r3
 8002842:	4d6a      	ldr	r5, [pc, #424]	; (80029ec <__aeabi_dsub+0x688>)
 8002844:	e6ab      	b.n	800259e <__aeabi_dsub+0x23a>
 8002846:	001d      	movs	r5, r3
 8002848:	2200      	movs	r2, #0
 800284a:	2700      	movs	r7, #0
 800284c:	e6b4      	b.n	80025b8 <__aeabi_dsub+0x254>
 800284e:	2d00      	cmp	r5, #0
 8002850:	d159      	bne.n	8002906 <__aeabi_dsub+0x5a2>
 8002852:	000b      	movs	r3, r1
 8002854:	4303      	orrs	r3, r0
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x4f6>
 8002858:	e6d6      	b.n	8002608 <__aeabi_dsub+0x2a4>
 800285a:	1c73      	adds	r3, r6, #1
 800285c:	d100      	bne.n	8002860 <__aeabi_dsub+0x4fc>
 800285e:	e0b2      	b.n	80029c6 <__aeabi_dsub+0x662>
 8002860:	4b62      	ldr	r3, [pc, #392]	; (80029ec <__aeabi_dsub+0x688>)
 8002862:	429f      	cmp	r7, r3
 8002864:	d01e      	beq.n	80028a4 <__aeabi_dsub+0x540>
 8002866:	43f3      	mvns	r3, r6
 8002868:	2b38      	cmp	r3, #56	; 0x38
 800286a:	dc6f      	bgt.n	800294c <__aeabi_dsub+0x5e8>
 800286c:	2b1f      	cmp	r3, #31
 800286e:	dd00      	ble.n	8002872 <__aeabi_dsub+0x50e>
 8002870:	e097      	b.n	80029a2 <__aeabi_dsub+0x63e>
 8002872:	2520      	movs	r5, #32
 8002874:	000e      	movs	r6, r1
 8002876:	1aed      	subs	r5, r5, r3
 8002878:	40ae      	lsls	r6, r5
 800287a:	46b0      	mov	r8, r6
 800287c:	0006      	movs	r6, r0
 800287e:	46aa      	mov	sl, r5
 8002880:	40de      	lsrs	r6, r3
 8002882:	4645      	mov	r5, r8
 8002884:	4335      	orrs	r5, r6
 8002886:	002e      	movs	r6, r5
 8002888:	4655      	mov	r5, sl
 800288a:	40a8      	lsls	r0, r5
 800288c:	40d9      	lsrs	r1, r3
 800288e:	1e45      	subs	r5, r0, #1
 8002890:	41a8      	sbcs	r0, r5
 8002892:	448c      	add	ip, r1
 8002894:	4306      	orrs	r6, r0
 8002896:	18b6      	adds	r6, r6, r2
 8002898:	4296      	cmp	r6, r2
 800289a:	4192      	sbcs	r2, r2
 800289c:	4251      	negs	r1, r2
 800289e:	4461      	add	r1, ip
 80028a0:	003d      	movs	r5, r7
 80028a2:	e625      	b.n	80024f0 <__aeabi_dsub+0x18c>
 80028a4:	003d      	movs	r5, r7
 80028a6:	4661      	mov	r1, ip
 80028a8:	4691      	mov	r9, r2
 80028aa:	e678      	b.n	800259e <__aeabi_dsub+0x23a>
 80028ac:	000b      	movs	r3, r1
 80028ae:	4303      	orrs	r3, r0
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	d000      	beq.n	80028b6 <__aeabi_dsub+0x552>
 80028b4:	e655      	b.n	8002562 <__aeabi_dsub+0x1fe>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f5      	beq.n	80028a6 <__aeabi_dsub+0x542>
 80028ba:	4663      	mov	r3, ip
 80028bc:	4313      	orrs	r3, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x55e>
 80028c0:	e66d      	b.n	800259e <__aeabi_dsub+0x23a>
 80028c2:	1886      	adds	r6, r0, r2
 80028c4:	4286      	cmp	r6, r0
 80028c6:	4180      	sbcs	r0, r0
 80028c8:	4461      	add	r1, ip
 80028ca:	4240      	negs	r0, r0
 80028cc:	1809      	adds	r1, r1, r0
 80028ce:	2200      	movs	r2, #0
 80028d0:	020b      	lsls	r3, r1, #8
 80028d2:	d400      	bmi.n	80028d6 <__aeabi_dsub+0x572>
 80028d4:	e6d0      	b.n	8002678 <__aeabi_dsub+0x314>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <__aeabi_dsub+0x68c>)
 80028d8:	3501      	adds	r5, #1
 80028da:	4019      	ands	r1, r3
 80028dc:	e5b2      	b.n	8002444 <__aeabi_dsub+0xe0>
 80028de:	46b1      	mov	r9, r6
 80028e0:	e65d      	b.n	800259e <__aeabi_dsub+0x23a>
 80028e2:	0033      	movs	r3, r6
 80028e4:	4667      	mov	r7, ip
 80028e6:	3b20      	subs	r3, #32
 80028e8:	40df      	lsrs	r7, r3
 80028ea:	003b      	movs	r3, r7
 80028ec:	2e20      	cmp	r6, #32
 80028ee:	d005      	beq.n	80028fc <__aeabi_dsub+0x598>
 80028f0:	2740      	movs	r7, #64	; 0x40
 80028f2:	1bbf      	subs	r7, r7, r6
 80028f4:	4666      	mov	r6, ip
 80028f6:	40be      	lsls	r6, r7
 80028f8:	4332      	orrs	r2, r6
 80028fa:	4690      	mov	r8, r2
 80028fc:	4646      	mov	r6, r8
 80028fe:	1e72      	subs	r2, r6, #1
 8002900:	4196      	sbcs	r6, r2
 8002902:	4333      	orrs	r3, r6
 8002904:	e5ef      	b.n	80024e6 <__aeabi_dsub+0x182>
 8002906:	4b39      	ldr	r3, [pc, #228]	; (80029ec <__aeabi_dsub+0x688>)
 8002908:	429f      	cmp	r7, r3
 800290a:	d0cb      	beq.n	80028a4 <__aeabi_dsub+0x540>
 800290c:	2580      	movs	r5, #128	; 0x80
 800290e:	042d      	lsls	r5, r5, #16
 8002910:	4273      	negs	r3, r6
 8002912:	4329      	orrs	r1, r5
 8002914:	e7a8      	b.n	8002868 <__aeabi_dsub+0x504>
 8002916:	4308      	orrs	r0, r1
 8002918:	1e41      	subs	r1, r0, #1
 800291a:	4188      	sbcs	r0, r1
 800291c:	e6a2      	b.n	8002664 <__aeabi_dsub+0x300>
 800291e:	2f00      	cmp	r7, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x5c0>
 8002922:	e63c      	b.n	800259e <__aeabi_dsub+0x23a>
 8002924:	4663      	mov	r3, ip
 8002926:	1a86      	subs	r6, r0, r2
 8002928:	1acf      	subs	r7, r1, r3
 800292a:	42b0      	cmp	r0, r6
 800292c:	419b      	sbcs	r3, r3
 800292e:	425b      	negs	r3, r3
 8002930:	1afb      	subs	r3, r7, r3
 8002932:	4698      	mov	r8, r3
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	d54e      	bpl.n	80029d6 <__aeabi_dsub+0x672>
 8002938:	1a16      	subs	r6, r2, r0
 800293a:	4663      	mov	r3, ip
 800293c:	42b2      	cmp	r2, r6
 800293e:	4192      	sbcs	r2, r2
 8002940:	1a59      	subs	r1, r3, r1
 8002942:	4252      	negs	r2, r2
 8002944:	1a89      	subs	r1, r1, r2
 8002946:	465c      	mov	r4, fp
 8002948:	2200      	movs	r2, #0
 800294a:	e57b      	b.n	8002444 <__aeabi_dsub+0xe0>
 800294c:	4301      	orrs	r1, r0
 800294e:	000e      	movs	r6, r1
 8002950:	1e71      	subs	r1, r6, #1
 8002952:	418e      	sbcs	r6, r1
 8002954:	e79f      	b.n	8002896 <__aeabi_dsub+0x532>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x60a>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	4648      	mov	r0, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e41      	subs	r1, r0, #1
 8002974:	4188      	sbcs	r0, r1
 8002976:	4318      	orrs	r0, r3
 8002978:	e674      	b.n	8002664 <__aeabi_dsub+0x300>
 800297a:	2200      	movs	r2, #0
 800297c:	2400      	movs	r4, #0
 800297e:	e617      	b.n	80025b0 <__aeabi_dsub+0x24c>
 8002980:	1a16      	subs	r6, r2, r0
 8002982:	4663      	mov	r3, ip
 8002984:	42b2      	cmp	r2, r6
 8002986:	4192      	sbcs	r2, r2
 8002988:	1a59      	subs	r1, r3, r1
 800298a:	4252      	negs	r2, r2
 800298c:	1a89      	subs	r1, r1, r2
 800298e:	003d      	movs	r5, r7
 8002990:	e525      	b.n	80023de <__aeabi_dsub+0x7a>
 8002992:	4661      	mov	r1, ip
 8002994:	4691      	mov	r9, r2
 8002996:	4d15      	ldr	r5, [pc, #84]	; (80029ec <__aeabi_dsub+0x688>)
 8002998:	e601      	b.n	800259e <__aeabi_dsub+0x23a>
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	2400      	movs	r4, #0
 800299e:	0312      	lsls	r2, r2, #12
 80029a0:	e679      	b.n	8002696 <__aeabi_dsub+0x332>
 80029a2:	001d      	movs	r5, r3
 80029a4:	000e      	movs	r6, r1
 80029a6:	3d20      	subs	r5, #32
 80029a8:	40ee      	lsrs	r6, r5
 80029aa:	46b0      	mov	r8, r6
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d004      	beq.n	80029ba <__aeabi_dsub+0x656>
 80029b0:	2540      	movs	r5, #64	; 0x40
 80029b2:	1aeb      	subs	r3, r5, r3
 80029b4:	4099      	lsls	r1, r3
 80029b6:	4308      	orrs	r0, r1
 80029b8:	4681      	mov	r9, r0
 80029ba:	464e      	mov	r6, r9
 80029bc:	4643      	mov	r3, r8
 80029be:	1e71      	subs	r1, r6, #1
 80029c0:	418e      	sbcs	r6, r1
 80029c2:	431e      	orrs	r6, r3
 80029c4:	e767      	b.n	8002896 <__aeabi_dsub+0x532>
 80029c6:	1886      	adds	r6, r0, r2
 80029c8:	4296      	cmp	r6, r2
 80029ca:	419b      	sbcs	r3, r3
 80029cc:	4461      	add	r1, ip
 80029ce:	425b      	negs	r3, r3
 80029d0:	18c9      	adds	r1, r1, r3
 80029d2:	003d      	movs	r5, r7
 80029d4:	e58c      	b.n	80024f0 <__aeabi_dsub+0x18c>
 80029d6:	4647      	mov	r7, r8
 80029d8:	4337      	orrs	r7, r6
 80029da:	d0ce      	beq.n	800297a <__aeabi_dsub+0x616>
 80029dc:	2207      	movs	r2, #7
 80029de:	4641      	mov	r1, r8
 80029e0:	4032      	ands	r2, r6
 80029e2:	e649      	b.n	8002678 <__aeabi_dsub+0x314>
 80029e4:	2700      	movs	r7, #0
 80029e6:	003a      	movs	r2, r7
 80029e8:	e5e6      	b.n	80025b8 <__aeabi_dsub+0x254>
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	000007ff 	.word	0x000007ff
 80029f0:	ff7fffff 	.word	0xff7fffff

080029f4 <__aeabi_dcmpun>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	4e0c      	ldr	r6, [pc, #48]	; (8002a28 <__aeabi_dcmpun+0x34>)
 80029f8:	030d      	lsls	r5, r1, #12
 80029fa:	031c      	lsls	r4, r3, #12
 80029fc:	0049      	lsls	r1, r1, #1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	0b2d      	lsrs	r5, r5, #12
 8002a02:	0d49      	lsrs	r1, r1, #21
 8002a04:	0b24      	lsrs	r4, r4, #12
 8002a06:	0d5b      	lsrs	r3, r3, #21
 8002a08:	42b1      	cmp	r1, r6
 8002a0a:	d008      	beq.n	8002a1e <__aeabi_dcmpun+0x2a>
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <__aeabi_dcmpun+0x34>)
 8002a0e:	2000      	movs	r0, #0
 8002a10:	428b      	cmp	r3, r1
 8002a12:	d103      	bne.n	8002a1c <__aeabi_dcmpun+0x28>
 8002a14:	4314      	orrs	r4, r2
 8002a16:	0020      	movs	r0, r4
 8002a18:	1e44      	subs	r4, r0, #1
 8002a1a:	41a0      	sbcs	r0, r4
 8002a1c:	bd70      	pop	{r4, r5, r6, pc}
 8002a1e:	4305      	orrs	r5, r0
 8002a20:	2001      	movs	r0, #1
 8002a22:	2d00      	cmp	r5, #0
 8002a24:	d1fa      	bne.n	8002a1c <__aeabi_dcmpun+0x28>
 8002a26:	e7f1      	b.n	8002a0c <__aeabi_dcmpun+0x18>
 8002a28:	000007ff 	.word	0x000007ff

08002a2c <__aeabi_d2iz>:
 8002a2c:	b530      	push	{r4, r5, lr}
 8002a2e:	4d14      	ldr	r5, [pc, #80]	; (8002a80 <__aeabi_d2iz+0x54>)
 8002a30:	030a      	lsls	r2, r1, #12
 8002a32:	004b      	lsls	r3, r1, #1
 8002a34:	0b12      	lsrs	r2, r2, #12
 8002a36:	0d5b      	lsrs	r3, r3, #21
 8002a38:	0fc9      	lsrs	r1, r1, #31
 8002a3a:	2400      	movs	r4, #0
 8002a3c:	42ab      	cmp	r3, r5
 8002a3e:	dd11      	ble.n	8002a64 <__aeabi_d2iz+0x38>
 8002a40:	4c10      	ldr	r4, [pc, #64]	; (8002a84 <__aeabi_d2iz+0x58>)
 8002a42:	42a3      	cmp	r3, r4
 8002a44:	dc10      	bgt.n	8002a68 <__aeabi_d2iz+0x3c>
 8002a46:	2480      	movs	r4, #128	; 0x80
 8002a48:	0364      	lsls	r4, r4, #13
 8002a4a:	4322      	orrs	r2, r4
 8002a4c:	4c0e      	ldr	r4, [pc, #56]	; (8002a88 <__aeabi_d2iz+0x5c>)
 8002a4e:	1ae4      	subs	r4, r4, r3
 8002a50:	2c1f      	cmp	r4, #31
 8002a52:	dd0c      	ble.n	8002a6e <__aeabi_d2iz+0x42>
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <__aeabi_d2iz+0x60>)
 8002a56:	1ac3      	subs	r3, r0, r3
 8002a58:	40da      	lsrs	r2, r3
 8002a5a:	0013      	movs	r3, r2
 8002a5c:	425c      	negs	r4, r3
 8002a5e:	2900      	cmp	r1, #0
 8002a60:	d100      	bne.n	8002a64 <__aeabi_d2iz+0x38>
 8002a62:	001c      	movs	r4, r3
 8002a64:	0020      	movs	r0, r4
 8002a66:	bd30      	pop	{r4, r5, pc}
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <__aeabi_d2iz+0x64>)
 8002a6a:	18cc      	adds	r4, r1, r3
 8002a6c:	e7fa      	b.n	8002a64 <__aeabi_d2iz+0x38>
 8002a6e:	4d09      	ldr	r5, [pc, #36]	; (8002a94 <__aeabi_d2iz+0x68>)
 8002a70:	40e0      	lsrs	r0, r4
 8002a72:	46ac      	mov	ip, r5
 8002a74:	4463      	add	r3, ip
 8002a76:	409a      	lsls	r2, r3
 8002a78:	0013      	movs	r3, r2
 8002a7a:	4303      	orrs	r3, r0
 8002a7c:	e7ee      	b.n	8002a5c <__aeabi_d2iz+0x30>
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	000003fe 	.word	0x000003fe
 8002a84:	0000041d 	.word	0x0000041d
 8002a88:	00000433 	.word	0x00000433
 8002a8c:	00000413 	.word	0x00000413
 8002a90:	7fffffff 	.word	0x7fffffff
 8002a94:	fffffbed 	.word	0xfffffbed

08002a98 <__aeabi_i2d>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d02d      	beq.n	8002afa <__aeabi_i2d+0x62>
 8002a9e:	17c3      	asrs	r3, r0, #31
 8002aa0:	18c5      	adds	r5, r0, r3
 8002aa2:	405d      	eors	r5, r3
 8002aa4:	0fc4      	lsrs	r4, r0, #31
 8002aa6:	0028      	movs	r0, r5
 8002aa8:	f000 f938 	bl	8002d1c <__clzsi2>
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <__aeabi_i2d+0x6c>)
 8002aae:	1a1b      	subs	r3, r3, r0
 8002ab0:	055b      	lsls	r3, r3, #21
 8002ab2:	0d5b      	lsrs	r3, r3, #21
 8002ab4:	280a      	cmp	r0, #10
 8002ab6:	dd15      	ble.n	8002ae4 <__aeabi_i2d+0x4c>
 8002ab8:	380b      	subs	r0, #11
 8002aba:	4085      	lsls	r5, r0
 8002abc:	2200      	movs	r2, #0
 8002abe:	032d      	lsls	r5, r5, #12
 8002ac0:	0b2d      	lsrs	r5, r5, #12
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	032d      	lsls	r5, r5, #12
 8002ac8:	0d0a      	lsrs	r2, r1, #20
 8002aca:	0b2d      	lsrs	r5, r5, #12
 8002acc:	0512      	lsls	r2, r2, #20
 8002ace:	432a      	orrs	r2, r5
 8002ad0:	4d0d      	ldr	r5, [pc, #52]	; (8002b08 <__aeabi_i2d+0x70>)
 8002ad2:	051b      	lsls	r3, r3, #20
 8002ad4:	402a      	ands	r2, r5
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	07e4      	lsls	r4, r4, #31
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	0029      	movs	r1, r5
 8002ae8:	3215      	adds	r2, #21
 8002aea:	4091      	lsls	r1, r2
 8002aec:	000a      	movs	r2, r1
 8002aee:	210b      	movs	r1, #11
 8002af0:	1a08      	subs	r0, r1, r0
 8002af2:	40c5      	lsrs	r5, r0
 8002af4:	032d      	lsls	r5, r5, #12
 8002af6:	0b2d      	lsrs	r5, r5, #12
 8002af8:	e7e3      	b.n	8002ac2 <__aeabi_i2d+0x2a>
 8002afa:	2400      	movs	r4, #0
 8002afc:	2300      	movs	r3, #0
 8002afe:	2500      	movs	r5, #0
 8002b00:	2200      	movs	r2, #0
 8002b02:	e7de      	b.n	8002ac2 <__aeabi_i2d+0x2a>
 8002b04:	0000041e 	.word	0x0000041e
 8002b08:	800fffff 	.word	0x800fffff

08002b0c <__aeabi_ui2d>:
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	1e04      	subs	r4, r0, #0
 8002b10:	d025      	beq.n	8002b5e <__aeabi_ui2d+0x52>
 8002b12:	f000 f903 	bl	8002d1c <__clzsi2>
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <__aeabi_ui2d+0x5c>)
 8002b18:	1a1b      	subs	r3, r3, r0
 8002b1a:	055b      	lsls	r3, r3, #21
 8002b1c:	0d5b      	lsrs	r3, r3, #21
 8002b1e:	280a      	cmp	r0, #10
 8002b20:	dd12      	ble.n	8002b48 <__aeabi_ui2d+0x3c>
 8002b22:	380b      	subs	r0, #11
 8002b24:	4084      	lsls	r4, r0
 8002b26:	2200      	movs	r2, #0
 8002b28:	0324      	lsls	r4, r4, #12
 8002b2a:	0b24      	lsrs	r4, r4, #12
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	0010      	movs	r0, r2
 8002b30:	0324      	lsls	r4, r4, #12
 8002b32:	0d0a      	lsrs	r2, r1, #20
 8002b34:	0b24      	lsrs	r4, r4, #12
 8002b36:	0512      	lsls	r2, r2, #20
 8002b38:	4322      	orrs	r2, r4
 8002b3a:	4c0c      	ldr	r4, [pc, #48]	; (8002b6c <__aeabi_ui2d+0x60>)
 8002b3c:	051b      	lsls	r3, r3, #20
 8002b3e:	4022      	ands	r2, r4
 8002b40:	4313      	orrs	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	0859      	lsrs	r1, r3, #1
 8002b46:	bd10      	pop	{r4, pc}
 8002b48:	0002      	movs	r2, r0
 8002b4a:	0021      	movs	r1, r4
 8002b4c:	3215      	adds	r2, #21
 8002b4e:	4091      	lsls	r1, r2
 8002b50:	000a      	movs	r2, r1
 8002b52:	210b      	movs	r1, #11
 8002b54:	1a08      	subs	r0, r1, r0
 8002b56:	40c4      	lsrs	r4, r0
 8002b58:	0324      	lsls	r4, r4, #12
 8002b5a:	0b24      	lsrs	r4, r4, #12
 8002b5c:	e7e6      	b.n	8002b2c <__aeabi_ui2d+0x20>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2400      	movs	r4, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	e7e2      	b.n	8002b2c <__aeabi_ui2d+0x20>
 8002b66:	46c0      	nop			; (mov r8, r8)
 8002b68:	0000041e 	.word	0x0000041e
 8002b6c:	800fffff 	.word	0x800fffff

08002b70 <__aeabi_f2d>:
 8002b70:	0041      	lsls	r1, r0, #1
 8002b72:	0e09      	lsrs	r1, r1, #24
 8002b74:	1c4b      	adds	r3, r1, #1
 8002b76:	b570      	push	{r4, r5, r6, lr}
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	0246      	lsls	r6, r0, #9
 8002b7c:	0a75      	lsrs	r5, r6, #9
 8002b7e:	0fc4      	lsrs	r4, r0, #31
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	dd14      	ble.n	8002bae <__aeabi_f2d+0x3e>
 8002b84:	23e0      	movs	r3, #224	; 0xe0
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	076d      	lsls	r5, r5, #29
 8002b8a:	0b36      	lsrs	r6, r6, #12
 8002b8c:	18cb      	adds	r3, r1, r3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	0d0a      	lsrs	r2, r1, #20
 8002b92:	0028      	movs	r0, r5
 8002b94:	0512      	lsls	r2, r2, #20
 8002b96:	4d1c      	ldr	r5, [pc, #112]	; (8002c08 <__aeabi_f2d+0x98>)
 8002b98:	4332      	orrs	r2, r6
 8002b9a:	055b      	lsls	r3, r3, #21
 8002b9c:	402a      	ands	r2, r5
 8002b9e:	085b      	lsrs	r3, r3, #1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	07e4      	lsls	r4, r4, #31
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	4323      	orrs	r3, r4
 8002baa:	0019      	movs	r1, r3
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	2900      	cmp	r1, #0
 8002bb0:	d114      	bne.n	8002bdc <__aeabi_f2d+0x6c>
 8002bb2:	2d00      	cmp	r5, #0
 8002bb4:	d01e      	beq.n	8002bf4 <__aeabi_f2d+0x84>
 8002bb6:	0028      	movs	r0, r5
 8002bb8:	f000 f8b0 	bl	8002d1c <__clzsi2>
 8002bbc:	280a      	cmp	r0, #10
 8002bbe:	dc1c      	bgt.n	8002bfa <__aeabi_f2d+0x8a>
 8002bc0:	230b      	movs	r3, #11
 8002bc2:	002a      	movs	r2, r5
 8002bc4:	1a1b      	subs	r3, r3, r0
 8002bc6:	40da      	lsrs	r2, r3
 8002bc8:	0003      	movs	r3, r0
 8002bca:	3315      	adds	r3, #21
 8002bcc:	409d      	lsls	r5, r3
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <__aeabi_f2d+0x9c>)
 8002bd0:	0312      	lsls	r2, r2, #12
 8002bd2:	1a1b      	subs	r3, r3, r0
 8002bd4:	055b      	lsls	r3, r3, #21
 8002bd6:	0b16      	lsrs	r6, r2, #12
 8002bd8:	0d5b      	lsrs	r3, r3, #21
 8002bda:	e7d8      	b.n	8002b8e <__aeabi_f2d+0x1e>
 8002bdc:	2d00      	cmp	r5, #0
 8002bde:	d006      	beq.n	8002bee <__aeabi_f2d+0x7e>
 8002be0:	0b32      	lsrs	r2, r6, #12
 8002be2:	2680      	movs	r6, #128	; 0x80
 8002be4:	0336      	lsls	r6, r6, #12
 8002be6:	076d      	lsls	r5, r5, #29
 8002be8:	4316      	orrs	r6, r2
 8002bea:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <__aeabi_f2d+0xa0>)
 8002bec:	e7cf      	b.n	8002b8e <__aeabi_f2d+0x1e>
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <__aeabi_f2d+0xa0>)
 8002bf0:	2600      	movs	r6, #0
 8002bf2:	e7cc      	b.n	8002b8e <__aeabi_f2d+0x1e>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	e7c9      	b.n	8002b8e <__aeabi_f2d+0x1e>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	002a      	movs	r2, r5
 8002bfe:	3b0b      	subs	r3, #11
 8002c00:	409a      	lsls	r2, r3
 8002c02:	2500      	movs	r5, #0
 8002c04:	e7e3      	b.n	8002bce <__aeabi_f2d+0x5e>
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	800fffff 	.word	0x800fffff
 8002c0c:	00000389 	.word	0x00000389
 8002c10:	000007ff 	.word	0x000007ff

08002c14 <__aeabi_d2f>:
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	004c      	lsls	r4, r1, #1
 8002c18:	0d64      	lsrs	r4, r4, #21
 8002c1a:	030b      	lsls	r3, r1, #12
 8002c1c:	1c62      	adds	r2, r4, #1
 8002c1e:	0a5b      	lsrs	r3, r3, #9
 8002c20:	0f46      	lsrs	r6, r0, #29
 8002c22:	0552      	lsls	r2, r2, #21
 8002c24:	0fc9      	lsrs	r1, r1, #31
 8002c26:	431e      	orrs	r6, r3
 8002c28:	00c5      	lsls	r5, r0, #3
 8002c2a:	0d52      	lsrs	r2, r2, #21
 8002c2c:	2a01      	cmp	r2, #1
 8002c2e:	dd29      	ble.n	8002c84 <__aeabi_d2f+0x70>
 8002c30:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <__aeabi_d2f+0xfc>)
 8002c32:	18e7      	adds	r7, r4, r3
 8002c34:	2ffe      	cmp	r7, #254	; 0xfe
 8002c36:	dc1c      	bgt.n	8002c72 <__aeabi_d2f+0x5e>
 8002c38:	2f00      	cmp	r7, #0
 8002c3a:	dd3b      	ble.n	8002cb4 <__aeabi_d2f+0xa0>
 8002c3c:	0180      	lsls	r0, r0, #6
 8002c3e:	1e43      	subs	r3, r0, #1
 8002c40:	4198      	sbcs	r0, r3
 8002c42:	2207      	movs	r2, #7
 8002c44:	00f3      	lsls	r3, r6, #3
 8002c46:	0f6d      	lsrs	r5, r5, #29
 8002c48:	4303      	orrs	r3, r0
 8002c4a:	432b      	orrs	r3, r5
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d004      	beq.n	8002c5c <__aeabi_d2f+0x48>
 8002c52:	220f      	movs	r2, #15
 8002c54:	401a      	ands	r2, r3
 8002c56:	2a04      	cmp	r2, #4
 8002c58:	d000      	beq.n	8002c5c <__aeabi_d2f+0x48>
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	04d2      	lsls	r2, r2, #19
 8002c60:	401a      	ands	r2, r3
 8002c62:	d024      	beq.n	8002cae <__aeabi_d2f+0x9a>
 8002c64:	3701      	adds	r7, #1
 8002c66:	b2fa      	uxtb	r2, r7
 8002c68:	2fff      	cmp	r7, #255	; 0xff
 8002c6a:	d002      	beq.n	8002c72 <__aeabi_d2f+0x5e>
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	0a58      	lsrs	r0, r3, #9
 8002c70:	e001      	b.n	8002c76 <__aeabi_d2f+0x62>
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	2000      	movs	r0, #0
 8002c76:	0240      	lsls	r0, r0, #9
 8002c78:	05d2      	lsls	r2, r2, #23
 8002c7a:	0a40      	lsrs	r0, r0, #9
 8002c7c:	07c9      	lsls	r1, r1, #31
 8002c7e:	4310      	orrs	r0, r2
 8002c80:	4308      	orrs	r0, r1
 8002c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c84:	4335      	orrs	r5, r6
 8002c86:	2c00      	cmp	r4, #0
 8002c88:	d104      	bne.n	8002c94 <__aeabi_d2f+0x80>
 8002c8a:	2d00      	cmp	r5, #0
 8002c8c:	d10a      	bne.n	8002ca4 <__aeabi_d2f+0x90>
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2000      	movs	r0, #0
 8002c92:	e7f0      	b.n	8002c76 <__aeabi_d2f+0x62>
 8002c94:	2d00      	cmp	r5, #0
 8002c96:	d0ec      	beq.n	8002c72 <__aeabi_d2f+0x5e>
 8002c98:	2080      	movs	r0, #128	; 0x80
 8002c9a:	03c0      	lsls	r0, r0, #15
 8002c9c:	4330      	orrs	r0, r6
 8002c9e:	22ff      	movs	r2, #255	; 0xff
 8002ca0:	e7e9      	b.n	8002c76 <__aeabi_d2f+0x62>
 8002ca2:	2400      	movs	r4, #0
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	025b      	lsls	r3, r3, #9
 8002ca8:	0a58      	lsrs	r0, r3, #9
 8002caa:	b2e2      	uxtb	r2, r4
 8002cac:	e7e3      	b.n	8002c76 <__aeabi_d2f+0x62>
 8002cae:	08db      	lsrs	r3, r3, #3
 8002cb0:	003c      	movs	r4, r7
 8002cb2:	e7f8      	b.n	8002ca6 <__aeabi_d2f+0x92>
 8002cb4:	003b      	movs	r3, r7
 8002cb6:	3317      	adds	r3, #23
 8002cb8:	dbf3      	blt.n	8002ca2 <__aeabi_d2f+0x8e>
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	4333      	orrs	r3, r6
 8002cc0:	261e      	movs	r6, #30
 8002cc2:	1bf6      	subs	r6, r6, r7
 8002cc4:	2e1f      	cmp	r6, #31
 8002cc6:	dd14      	ble.n	8002cf2 <__aeabi_d2f+0xde>
 8002cc8:	2202      	movs	r2, #2
 8002cca:	4252      	negs	r2, r2
 8002ccc:	1bd7      	subs	r7, r2, r7
 8002cce:	001a      	movs	r2, r3
 8002cd0:	40fa      	lsrs	r2, r7
 8002cd2:	0017      	movs	r7, r2
 8002cd4:	2e20      	cmp	r6, #32
 8002cd6:	d004      	beq.n	8002ce2 <__aeabi_d2f+0xce>
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <__aeabi_d2f+0x100>)
 8002cda:	4694      	mov	ip, r2
 8002cdc:	4464      	add	r4, ip
 8002cde:	40a3      	lsls	r3, r4
 8002ce0:	431d      	orrs	r5, r3
 8002ce2:	002b      	movs	r3, r5
 8002ce4:	1e5d      	subs	r5, r3, #1
 8002ce6:	41ab      	sbcs	r3, r5
 8002ce8:	2207      	movs	r2, #7
 8002cea:	433b      	orrs	r3, r7
 8002cec:	401a      	ands	r2, r3
 8002cee:	2700      	movs	r7, #0
 8002cf0:	e7ad      	b.n	8002c4e <__aeabi_d2f+0x3a>
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <__aeabi_d2f+0x104>)
 8002cf4:	0028      	movs	r0, r5
 8002cf6:	18a2      	adds	r2, r4, r2
 8002cf8:	4095      	lsls	r5, r2
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	1e6c      	subs	r4, r5, #1
 8002cfe:	41a5      	sbcs	r5, r4
 8002d00:	40f0      	lsrs	r0, r6
 8002d02:	2207      	movs	r2, #7
 8002d04:	432b      	orrs	r3, r5
 8002d06:	4303      	orrs	r3, r0
 8002d08:	401a      	ands	r2, r3
 8002d0a:	2700      	movs	r7, #0
 8002d0c:	e79f      	b.n	8002c4e <__aeabi_d2f+0x3a>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	fffffc80 	.word	0xfffffc80
 8002d14:	fffffca2 	.word	0xfffffca2
 8002d18:	fffffc82 	.word	0xfffffc82

08002d1c <__clzsi2>:
 8002d1c:	211c      	movs	r1, #28
 8002d1e:	2301      	movs	r3, #1
 8002d20:	041b      	lsls	r3, r3, #16
 8002d22:	4298      	cmp	r0, r3
 8002d24:	d301      	bcc.n	8002d2a <__clzsi2+0xe>
 8002d26:	0c00      	lsrs	r0, r0, #16
 8002d28:	3910      	subs	r1, #16
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d301      	bcc.n	8002d34 <__clzsi2+0x18>
 8002d30:	0a00      	lsrs	r0, r0, #8
 8002d32:	3908      	subs	r1, #8
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	4298      	cmp	r0, r3
 8002d38:	d301      	bcc.n	8002d3e <__clzsi2+0x22>
 8002d3a:	0900      	lsrs	r0, r0, #4
 8002d3c:	3904      	subs	r1, #4
 8002d3e:	a202      	add	r2, pc, #8	; (adr r2, 8002d48 <__clzsi2+0x2c>)
 8002d40:	5c10      	ldrb	r0, [r2, r0]
 8002d42:	1840      	adds	r0, r0, r1
 8002d44:	4770      	bx	lr
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	02020304 	.word	0x02020304
 8002d4c:	01010101 	.word	0x01010101
	...

08002d58 <minArr>:
 -----------------------------------------------------------------------
 */

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
 */
uint8_t minArr(uint8_t *arr, uint8_t *Q) {
 8002d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest = 0xFF;
	uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8002d5a:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF;
 8002d5c:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d100      	bne.n	8002d64 <minArr+0xc>
		smallest = arr[0];
 8002d62:	7804      	ldrb	r4, [r0, #0]

	for (int i = 0; i < N; i++) {
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <minArr+0x38>)
 8002d66:	781d      	ldrb	r5, [r3, #0]
 8002d68:	2d00      	cmp	r5, #0
 8002d6a:	dd0e      	ble.n	8002d8a <minArr+0x32>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2700      	movs	r7, #0
 8002d70:	e002      	b.n	8002d78 <minArr+0x20>
 8002d72:	3301      	adds	r3, #1
 8002d74:	42ab      	cmp	r3, r5
 8002d76:	da09      	bge.n	8002d8c <minArr+0x34>
		if ((arr[i] < smallest) && !Q[i]) {
 8002d78:	5cc2      	ldrb	r2, [r0, r3]
 8002d7a:	42a2      	cmp	r2, r4
 8002d7c:	d2f9      	bcs.n	8002d72 <minArr+0x1a>
 8002d7e:	5cce      	ldrb	r6, [r1, r3]
 8002d80:	2e00      	cmp	r6, #0
 8002d82:	d1f6      	bne.n	8002d72 <minArr+0x1a>
			smallest = arr[i];
			index = i;
 8002d84:	b2df      	uxtb	r7, r3
			smallest = arr[i];
 8002d86:	0014      	movs	r4, r2
 8002d88:	e7f3      	b.n	8002d72 <minArr+0x1a>
	for (int i = 0; i < N; i++) {
 8002d8a:	2700      	movs	r7, #0
		}
	}

	return index;
}
 8002d8c:	0038      	movs	r0, r7
 8002d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d90:	2000001c 	.word	0x2000001c

08002d94 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
 */
uint8_t QnotEmpty(uint8_t *Q) {
	char temp = 1;

	for (int i = 0; i < N; i++) {
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <QnotEmpty+0x20>)
 8002d96:	7819      	ldrb	r1, [r3, #0]
 8002d98:	2900      	cmp	r1, #0
 8002d9a:	d008      	beq.n	8002dae <QnotEmpty+0x1a>
 8002d9c:	0003      	movs	r3, r0
 8002d9e:	1841      	adds	r1, r0, r1
	char temp = 1;
 8002da0:	2001      	movs	r0, #1
		temp &= Q[i];
 8002da2:	781a      	ldrb	r2, [r3, #0]
 8002da4:	4010      	ands	r0, r2
 8002da6:	3301      	adds	r3, #1
	for (int i = 0; i < N; i++) {
 8002da8:	428b      	cmp	r3, r1
 8002daa:	d1fa      	bne.n	8002da2 <QnotEmpty+0xe>
	}

	return temp;
}
 8002dac:	4770      	bx	lr
	char temp = 1;
 8002dae:	2001      	movs	r0, #1
 8002db0:	e7fc      	b.n	8002dac <QnotEmpty+0x18>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	2000001c 	.word	0x2000001c

08002db8 <LoadROsnippets>:

/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
 */
uint8_t LoadROsnippets(void) {
 8002db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dba:	46de      	mov	lr, fp
 8002dbc:	4657      	mov	r7, sl
 8002dbe:	464e      	mov	r6, r9
 8002dc0:	b5c0      	push	{r6, r7, lr}
 8002dc2:	b082      	sub	sp, #8
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char*) malloc(cmdMAX_INPUT_SIZE);
 8002dc4:	2032      	movs	r0, #50	; 0x32
 8002dc6:	f010 fdfb 	bl	80139c0 <malloc>
 8002dca:	1e07      	subs	r7, r0, #0
	if (snipBuffer == NULL)
 8002dcc:	d100      	bne.n	8002dd0 <LoadROsnippets+0x18>
 8002dce:	e071      	b.n	8002eb4 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;

	// Exit if no recorded Snippets
	if (*(uint8_t*) currentAdd != 0xFE)
 8002dd0:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <LoadROsnippets+0x100>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8002dd4:	20ff      	movs	r0, #255	; 0xff
	if (*(uint8_t*) currentAdd != 0xFE)
 8002dd6:	2bfe      	cmp	r3, #254	; 0xfe
 8002dd8:	d166      	bne.n	8002ea8 <LoadROsnippets+0xf0>
 8002dda:	4e38      	ldr	r6, [pc, #224]	; (8002ebc <LoadROsnippets+0x104>)
 8002ddc:	3b9a      	subs	r3, #154	; 0x9a
 8002dde:	469b      	mov	fp, r3
 8002de0:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 8002de2:	4d35      	ldr	r5, [pc, #212]	; (8002eb8 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for (uint8_t s = 0; s < MAX_SNIPPETS; s++) {
		// Load conditions starting at RO_MID_ADDRESS
		for (i = 0; i < sizeof(snippet_t); i++)
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
		memcpy((uint8_t*) &snippets[s], (uint8_t*) &snipBuffer[1],
 8002de4:	1c7b      	adds	r3, r7, #1
 8002de6:	9301      	str	r3, [sp, #4]
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		} else {
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <LoadROsnippets+0x108>)
 8002dea:	4699      	mov	r9, r3
 8002dec:	e023      	b.n	8002e36 <LoadROsnippets+0x7e>
		i = 0;
 8002dee:	2400      	movs	r4, #0
		if (snipBuffer[i - 1] != 0)
 8002df0:	193b      	adds	r3, r7, r4
 8002df2:	3b01      	subs	r3, #1
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8002dfa:	3401      	adds	r4, #1
 8002dfc:	b2e4      	uxtb	r4, r4
		snippets[s].cmd = (char*) malloc(i);
 8002dfe:	0020      	movs	r0, r4
 8002e00:	f010 fdde 	bl	80139c0 <malloc>
 8002e04:	4653      	mov	r3, sl
 8002e06:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d03f      	beq.n	8002e8c <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd, snipBuffer, i);
 8002e0c:	0022      	movs	r2, r4
 8002e0e:	0039      	movs	r1, r7
 8002e10:	f010 fe0b 	bl	8013a2a <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 8002e14:	464b      	mov	r3, r9
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	464a      	mov	r2, r9
 8002e1c:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);
 8002e1e:	0022      	movs	r2, r4
 8002e20:	2100      	movs	r1, #0
 8002e22:	0038      	movs	r0, r7
 8002e24:	f010 fe0a 	bl	8013a3c <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t*) currentAdd != 0xFE)
 8002e28:	9b00      	ldr	r3, [sp, #0]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2bfe      	cmp	r3, #254	; 0xfe
 8002e2e:	d137      	bne.n	8002ea0 <LoadROsnippets+0xe8>
 8002e30:	3614      	adds	r6, #20
	for (uint8_t s = 0; s < MAX_SNIPPETS; s++) {
 8002e32:	455e      	cmp	r6, fp
 8002e34:	d034      	beq.n	8002ea0 <LoadROsnippets+0xe8>
 8002e36:	0028      	movs	r0, r5
 8002e38:	3014      	adds	r0, #20
uint8_t LoadROsnippets(void) {
 8002e3a:	002b      	movs	r3, r5
			snipBuffer[i] = (*(__IO uint8_t*) (currentAdd++));
 8002e3c:	1b79      	subs	r1, r7, r5
 8002e3e:	781a      	ldrb	r2, [r3, #0]
 8002e40:	54ca      	strb	r2, [r1, r3]
 8002e42:	3301      	adds	r3, #1
		for (i = 0; i < sizeof(snippet_t); i++)
 8002e44:	4283      	cmp	r3, r0
 8002e46:	d1fa      	bne.n	8002e3e <LoadROsnippets+0x86>
 8002e48:	3514      	adds	r5, #20
		memcpy((uint8_t*) &snippets[s], (uint8_t*) &snipBuffer[1],
 8002e4a:	46b2      	mov	sl, r6
 8002e4c:	2214      	movs	r2, #20
 8002e4e:	9901      	ldr	r1, [sp, #4]
 8002e50:	0030      	movs	r0, r6
 8002e52:	f010 fdea 	bl	8013a2a <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t));
 8002e56:	2214      	movs	r2, #20
 8002e58:	2100      	movs	r1, #0
 8002e5a:	0038      	movs	r0, r7
 8002e5c:	f010 fdee 	bl	8013a3c <memset>
		while (*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002e60:	9500      	str	r5, [sp, #0]
 8002e62:	782a      	ldrb	r2, [r5, #0]
 8002e64:	1c93      	adds	r3, r2, #2
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d9c0      	bls.n	8002dee <LoadROsnippets+0x36>
 8002e6c:	0039      	movs	r1, r7
		i = 0;
 8002e6e:	2400      	movs	r4, #0
			snipBuffer[i] = *(uint8_t*) currentAdd;
 8002e70:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 8002e72:	3501      	adds	r5, #1
			++i;
 8002e74:	3401      	adds	r4, #1
 8002e76:	b2e4      	uxtb	r4, r4
		while (*(uint8_t*) currentAdd != 0xFE && *(uint8_t*) currentAdd != 0xFF
 8002e78:	9500      	str	r5, [sp, #0]
 8002e7a:	782a      	ldrb	r2, [r5, #0]
 8002e7c:	1c93      	adds	r3, r2, #2
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d9b5      	bls.n	8002df0 <LoadROsnippets+0x38>
 8002e84:	3101      	adds	r1, #1
				&& i < cmdMAX_INPUT_SIZE) {
 8002e86:	2c32      	cmp	r4, #50	; 0x32
 8002e88:	d1f2      	bne.n	8002e70 <LoadROsnippets+0xb8>
 8002e8a:	e7b1      	b.n	8002df0 <LoadROsnippets+0x38>
			memset(&snippets[s], 0, sizeof(snippet_t));
 8002e8c:	2214      	movs	r2, #20
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4650      	mov	r0, sl
 8002e92:	f010 fdd3 	bl	8013a3c <memset>
			free(snipBuffer);
 8002e96:	0038      	movs	r0, r7
 8002e98:	f010 fd9c 	bl	80139d4 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8002e9c:	200e      	movs	r0, #14
 8002e9e:	e003      	b.n	8002ea8 <LoadROsnippets+0xf0>
			break;
	}

	free(snipBuffer);
 8002ea0:	0038      	movs	r0, r7
 8002ea2:	f010 fd97 	bl	80139d4 <free>
	return BOS_OK;
 8002ea6:	2000      	movs	r0, #0
}
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bc1c      	pop	{r2, r3, r4}
 8002eac:	4691      	mov	r9, r2
 8002eae:	469a      	mov	sl, r3
 8002eb0:	46a3      	mov	fp, r4
 8002eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8002eb4:	20fb      	movs	r0, #251	; 0xfb
 8002eb6:	e7f7      	b.n	8002ea8 <LoadROsnippets+0xf0>
 8002eb8:	0801dc00 	.word	0x0801dc00
 8002ebc:	20006148 	.word	0x20006148
 8002ec0:	20000a07 	.word	0x20000a07

08002ec4 <LoadROtopology>:

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- 
 */
uint8_t LoadROtopology(void) {
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	uint16_t add = 2, temp = 0;

	/* Load number of modules */
	temp = (*(__IO uint16_t*) (RO_START_ADDRESS));
 8002ec8:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <LoadROtopology+0x94>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	b29b      	uxth	r3, r3

	if (temp == 0xFFFF)				// Memory has been erased
 8002ece:	4a23      	ldr	r2, [pc, #140]	; (8002f5c <LoadROtopology+0x98>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d033      	beq.n	8002f3c <LoadROtopology+0x78>
			{
		N = 1;
		myID = 0;
		return BOS_MEM_ERASED;
	} else {
		N = (uint8_t) (temp >> 8);
 8002ed4:	0a1a      	lsrs	r2, r3, #8
		if (N == 0)
 8002ed6:	d039      	beq.n	8002f4c <LoadROtopology+0x88>
		N = (uint8_t) (temp >> 8);
 8002ed8:	4921      	ldr	r1, [pc, #132]	; (8002f60 <LoadROtopology+0x9c>)
 8002eda:	700a      	strb	r2, [r1, #0]
			N = 1;
		myID = (uint8_t) temp;
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <LoadROtopology+0xa0>)
 8002ede:	7013      	strb	r3, [r2, #0]

		/* Load topology */
		for (uint8_t i = 1; i <= N; i++) {
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <LoadROtopology+0x9c>)
 8002ee2:	781e      	ldrb	r6, [r3, #0]
 8002ee4:	2e00      	cmp	r6, #0
 8002ee6:	d035      	beq.n	8002f54 <LoadROtopology+0x90>
 8002ee8:	2401      	movs	r4, #1
	uint16_t add = 2, temp = 0;
 8002eea:	2202      	movs	r2, #2
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002eec:	466b      	mov	r3, sp
 8002eee:	1dd9      	adds	r1, r3, #7
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	469c      	mov	ip, r3
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 8002ef4:	4d1c      	ldr	r5, [pc, #112]	; (8002f68 <LoadROtopology+0xa4>)
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002ef6:	4663      	mov	r3, ip
 8002ef8:	700b      	strb	r3, [r1, #0]
 8002efa:	780b      	ldrb	r3, [r1, #0]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b0a      	cmp	r3, #10
 8002f00:	d815      	bhi.n	8002f2e <LoadROtopology+0x6a>
				array[i - 1][j] = (*(__IO uint16_t*) (RO_START_ADDRESS + add));
 8002f02:	1e63      	subs	r3, r4, #1
 8002f04:	0098      	lsls	r0, r3, #2
 8002f06:	18c0      	adds	r0, r0, r3
 8002f08:	0040      	lsls	r0, r0, #1
 8002f0a:	18c0      	adds	r0, r0, r3
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <LoadROtopology+0x94>)
 8002f0e:	18d7      	adds	r7, r2, r3
 8002f10:	780b      	ldrb	r3, [r1, #0]
 8002f12:	883f      	ldrh	r7, [r7, #0]
 8002f14:	181b      	adds	r3, r3, r0
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	52ef      	strh	r7, [r5, r3]
				add += 2;
 8002f1a:	3202      	adds	r2, #2
 8002f1c:	b292      	uxth	r2, r2
			for (volatile uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8002f1e:	780b      	ldrb	r3, [r1, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	700b      	strb	r3, [r1, #0]
 8002f26:	780b      	ldrb	r3, [r1, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b0a      	cmp	r3, #10
 8002f2c:	d9ee      	bls.n	8002f0c <LoadROtopology+0x48>
		for (uint8_t i = 1; i <= N; i++) {
 8002f2e:	3401      	adds	r4, #1
 8002f30:	b2e4      	uxtb	r4, r4
 8002f32:	42b4      	cmp	r4, r6
 8002f34:	d9df      	bls.n	8002ef6 <LoadROtopology+0x32>
			}
		}
	}

	return result;
 8002f36:	2000      	movs	r0, #0
}
 8002f38:	b003      	add	sp, #12
 8002f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N = 1;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <LoadROtopology+0x9c>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
		myID = 0;
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <LoadROtopology+0xa0>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002f48:	20fa      	movs	r0, #250	; 0xfa
 8002f4a:	e7f5      	b.n	8002f38 <LoadROtopology+0x74>
			N = 1;
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <LoadROtopology+0x9c>)
 8002f4e:	2101      	movs	r1, #1
 8002f50:	7011      	strb	r1, [r2, #0]
 8002f52:	e7c3      	b.n	8002edc <LoadROtopology+0x18>
	return result;
 8002f54:	2000      	movs	r0, #0
 8002f56:	e7ef      	b.n	8002f38 <LoadROtopology+0x74>
 8002f58:	0801d800 	.word	0x0801d800
 8002f5c:	0000ffff 	.word	0x0000ffff
 8002f60:	2000001c 	.word	0x2000001c
 8002f64:	20000866 	.word	0x20000866
 8002f68:	200002a0 	.word	0x200002a0

08002f6c <SaveEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Save array ports directions in EEPROM ---
 */
BOS_Status SaveEEportsDir(void) {
 8002f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6e:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;

	for (uint8_t i = 1; i <= N; i++) {
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <SaveEEportsDir+0x4c>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01a      	beq.n	8002fae <SaveEEportsDir+0x42>
 8002f78:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i - 1])
 8002f7e:	4e0f      	ldr	r6, [pc, #60]	; (8002fbc <SaveEEportsDir+0x50>)
	for (uint8_t i = 1; i <= N; i++) {
 8002f80:	4f0d      	ldr	r7, [pc, #52]	; (8002fb8 <SaveEEportsDir+0x4c>)
 8002f82:	e008      	b.n	8002f96 <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1, arrayPortsDir[i - 1]);
 8002f84:	1c60      	adds	r0, r4, #1
 8002f86:	f004 fc4f 	bl	8007828 <EE_WriteVariable>
 8002f8a:	e00a      	b.n	8002fa2 <SaveEEportsDir+0x36>
	for (uint8_t i = 1; i <= N; i++) {
 8002f8c:	3401      	adds	r4, #1
 8002f8e:	b2e4      	uxtb	r4, r4
 8002f90:	783b      	ldrb	r3, [r7, #0]
 8002f92:	42a3      	cmp	r3, r4
 8002f94:	d30d      	bcc.n	8002fb2 <SaveEEportsDir+0x46>
		if (arrayPortsDir[i - 1])
 8002f96:	0025      	movs	r5, r4
 8002f98:	1e63      	subs	r3, r4, #1
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	5b99      	ldrh	r1, [r3, r6]
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	d1f0      	bne.n	8002f84 <SaveEEportsDir+0x18>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002fa2:	3502      	adds	r5, #2
 8002fa4:	2d1b      	cmp	r5, #27
 8002fa6:	ddf1      	ble.n	8002f8c <SaveEEportsDir+0x20>
			result = BOS_ERR_EEPROM;
 8002fa8:	230a      	movs	r3, #10
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	e7ee      	b.n	8002f8c <SaveEEportsDir+0x20>
	BOS_Status result = BOS_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
	}

	return result;
}
 8002fb2:	9801      	ldr	r0, [sp, #4]
 8002fb4:	b003      	add	sp, #12
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb8:	2000001c 	.word	0x2000001c
 8002fbc:	200065e4 	.word	0x200065e4

08002fc0 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
 */
BOS_Status ClearEEportsDir(void) {
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;

	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8002fc4:	2234      	movs	r2, #52	; 0x34
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	4813      	ldr	r0, [pc, #76]	; (8003018 <ClearEEportsDir+0x58>)
 8002fca:	f010 fd37 	bl	8013a3c <memset>

	for (uint8_t i = 1; i <= N; i++) {
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <ClearEEportsDir+0x5c>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01a      	beq.n	800300c <ClearEEportsDir+0x4c>
 8002fd6:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9301      	str	r3, [sp, #4]
		if (arrayPortsDir[i - 1])
 8002fdc:	4e0e      	ldr	r6, [pc, #56]	; (8003018 <ClearEEportsDir+0x58>)
	for (uint8_t i = 1; i <= N; i++) {
 8002fde:	4f0f      	ldr	r7, [pc, #60]	; (800301c <ClearEEportsDir+0x5c>)
 8002fe0:	e008      	b.n	8002ff4 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1, arrayPortsDir[i - 1]);
 8002fe2:	1c60      	adds	r0, r4, #1
 8002fe4:	f004 fc20 	bl	8007828 <EE_WriteVariable>
 8002fe8:	e00a      	b.n	8003000 <ClearEEportsDir+0x40>
	for (uint8_t i = 1; i <= N; i++) {
 8002fea:	3401      	adds	r4, #1
 8002fec:	b2e4      	uxtb	r4, r4
 8002fee:	783b      	ldrb	r3, [r7, #0]
 8002ff0:	42a3      	cmp	r3, r4
 8002ff2:	d30d      	bcc.n	8003010 <ClearEEportsDir+0x50>
		if (arrayPortsDir[i - 1])
 8002ff4:	0025      	movs	r5, r4
 8002ff6:	1e63      	subs	r3, r4, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	5b99      	ldrh	r1, [r3, r6]
 8002ffc:	2900      	cmp	r1, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <ClearEEportsDir+0x22>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003000:	3502      	adds	r5, #2
 8003002:	2d1b      	cmp	r5, #27
 8003004:	ddf1      	ble.n	8002fea <ClearEEportsDir+0x2a>
			result = BOS_ERR_EEPROM;
 8003006:	230a      	movs	r3, #10
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	e7ee      	b.n	8002fea <ClearEEportsDir+0x2a>
	BOS_Status result = BOS_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	9301      	str	r3, [sp, #4]
	}

	return result;
}
 8003010:	9801      	ldr	r0, [sp, #4]
 8003012:	b003      	add	sp, #12
 8003014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	200065e4 	.word	0x200065e4
 800301c:	2000001c 	.word	0x2000001c

08003020 <LoadEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
 */
BOS_Status LoadEEportsDir(void) {
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK;

	for (uint8_t i = 1; i <= N; i++) {
 8003022:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <LoadEEportsDir+0x40>)
 8003024:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
 8003026:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 800302c:	490d      	ldr	r1, [pc, #52]	; (8003064 <LoadEEportsDir+0x44>)
 800302e:	2002      	movs	r0, #2
 8003030:	f004 fbca 	bl	80077c8 <EE_ReadVariable>
	for (uint8_t i = 1; i <= N; i++) {
 8003034:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 8003036:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 8003038:	4f09      	ldr	r7, [pc, #36]	; (8003060 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 800303a:	4e0a      	ldr	r6, [pc, #40]	; (8003064 <LoadEEportsDir+0x44>)
	for (uint8_t i = 1; i <= N; i++) {
 800303c:	3401      	adds	r4, #1
 800303e:	b2e4      	uxtb	r4, r4
 8003040:	783b      	ldrb	r3, [r7, #0]
 8003042:	42a3      	cmp	r3, r4
 8003044:	d30a      	bcc.n	800305c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1, &arrayPortsDir[i - 1]);
 8003046:	1e61      	subs	r1, r4, #1
 8003048:	0049      	lsls	r1, r1, #1
 800304a:	1989      	adds	r1, r1, r6
 800304c:	1c60      	adds	r0, r4, #1
 800304e:	f004 fbbb 	bl	80077c8 <EE_ReadVariable>

		if ((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003052:	1ca3      	adds	r3, r4, #2
 8003054:	2b1b      	cmp	r3, #27
 8003056:	ddf1      	ble.n	800303c <LoadEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8003058:	250a      	movs	r5, #10
 800305a:	e7ef      	b.n	800303c <LoadEEportsDir+0x1c>
	}

	return result;
}
 800305c:	0028      	movs	r0, r5
 800305e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003060:	2000001c 	.word	0x2000001c
 8003064:	200065e4 	.word	0x200065e4

08003068 <SaveEEalias>:

/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
 */
BOS_Status SaveEEalias(void) {
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	46d6      	mov	lr, sl
 800306c:	464f      	mov	r7, r9
 800306e:	4646      	mov	r6, r8
 8003070:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;

	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8003072:	2600      	movs	r6, #0
	uint16_t add = 0, temp = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	4698      	mov	r8, r3
			{
		if (moduleAlias[i][0]) {
 8003078:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <SaveEEalias+0x7c>)
 800307a:	469a      	mov	sl, r3
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 800307c:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <SaveEEalias+0x80>)
 800307e:	4699      	mov	r9, r3
 8003080:	e005      	b.n	800308e <SaveEEalias+0x26>
 8003082:	3601      	adds	r6, #1
 8003084:	b2f6      	uxtb	r6, r6
 8003086:	464b      	mov	r3, r9
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	42b3      	cmp	r3, r6
 800308c:	d324      	bcc.n	80030d8 <SaveEEalias+0x70>
		if (moduleAlias[i][0]) {
 800308e:	00b3      	lsls	r3, r6, #2
 8003090:	199b      	adds	r3, r3, r6
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4652      	mov	r2, sl
 8003096:	5c9b      	ldrb	r3, [r3, r2]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f2      	beq.n	8003082 <SaveEEalias+0x1a>
 800309c:	00b5      	lsls	r5, r6, #2
 800309e:	19ad      	adds	r5, r5, r6
 80030a0:	006d      	lsls	r5, r5, #1
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <SaveEEalias+0x7c>)
 80030a4:	469c      	mov	ip, r3
 80030a6:	4465      	add	r5, ip
 80030a8:	4644      	mov	r4, r8
 80030aa:	341c      	adds	r4, #28
 80030ac:	b2a4      	uxth	r4, r4
 80030ae:	4647      	mov	r7, r8
 80030b0:	3721      	adds	r7, #33	; 0x21
 80030b2:	b2bf      	uxth	r7, r7
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
				temp = (uint16_t) (moduleAlias[i][j - 1] << 8)
 80030b4:	782b      	ldrb	r3, [r5, #0]
 80030b6:	021b      	lsls	r3, r3, #8
						+ moduleAlias[i][j];
 80030b8:	7869      	ldrb	r1, [r5, #1]
				temp = (uint16_t) (moduleAlias[i][j - 1] << 8)
 80030ba:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add, temp);
 80030bc:	b289      	uxth	r1, r1
 80030be:	0020      	movs	r0, r4
 80030c0:	f004 fbb2 	bl	8007828 <EE_WriteVariable>
 80030c4:	3502      	adds	r5, #2
 80030c6:	3401      	adds	r4, #1
 80030c8:	b2a4      	uxth	r4, r4
			for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 80030ca:	42bc      	cmp	r4, r7
 80030cc:	d1f2      	bne.n	80030b4 <SaveEEalias+0x4c>
 80030ce:	4643      	mov	r3, r8
 80030d0:	3305      	adds	r3, #5
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4698      	mov	r8, r3
 80030d6:	e7d4      	b.n	8003082 <SaveEEalias+0x1a>
			}
		}
	}

	return result;
}
 80030d8:	2000      	movs	r0, #0
 80030da:	bc1c      	pop	{r2, r3, r4}
 80030dc:	4690      	mov	r8, r2
 80030de:	4699      	mov	r9, r3
 80030e0:	46a2      	mov	sl, r4
 80030e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e4:	20000758 	.word	0x20000758
 80030e8:	2000001c 	.word	0x2000001c

080030ec <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
 */
BOS_Status LoadEEalias(void) {
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	46de      	mov	lr, fp
 80030f0:	4657      	mov	r7, sl
 80030f2:	464e      	mov	r6, r9
 80030f4:	4645      	mov	r5, r8
 80030f6:	b5e0      	push	{r5, r6, r7, lr}
 80030f8:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;
 80030fa:	466b      	mov	r3, sp
 80030fc:	2200      	movs	r2, #0
 80030fe:	80da      	strh	r2, [r3, #6]
 8003100:	241c      	movs	r4, #28

	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 8003102:	2700      	movs	r7, #0
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <LoadEEalias+0x7c>)
 8003106:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j - 1] = (uint8_t) (temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 8003108:	469b      	mov	fp, r3
 800310a:	e00c      	b.n	8003126 <LoadEEalias+0x3a>
 800310c:	464b      	mov	r3, r9
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	444b      	add	r3, r9
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	445b      	add	r3, fp
 8003116:	2200      	movs	r2, #0
 8003118:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i <= N; i++)				// N+1 module aliases
 800311a:	3701      	adds	r7, #1
 800311c:	b2ff      	uxtb	r7, r7
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <LoadEEalias+0x80>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	42bb      	cmp	r3, r7
 8003124:	d317      	bcc.n	8003156 <LoadEEalias+0x6a>
 8003126:	00bd      	lsls	r5, r7, #2
 8003128:	19ed      	adds	r5, r5, r7
 800312a:	006d      	lsls	r5, r5, #1
 800312c:	4455      	add	r5, sl
 800312e:	1d63      	adds	r3, r4, #5
 8003130:	b29b      	uxth	r3, r3
 8003132:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
 8003134:	466b      	mov	r3, sp
 8003136:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8003138:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add, &temp);
 800313a:	0031      	movs	r1, r6
 800313c:	0020      	movs	r0, r4
 800313e:	f004 fb43 	bl	80077c8 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 8003142:	8833      	ldrh	r3, [r6, #0]
 8003144:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] = (uint8_t) (temp >> 8);
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	702b      	strb	r3, [r5, #0]
 800314a:	3401      	adds	r4, #1
 800314c:	b2a4      	uxth	r4, r4
 800314e:	3502      	adds	r5, #2
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 8003150:	45a0      	cmp	r8, r4
 8003152:	d1f2      	bne.n	800313a <LoadEEalias+0x4e>
 8003154:	e7da      	b.n	800310c <LoadEEalias+0x20>
	}

	return result;
}
 8003156:	2000      	movs	r0, #0
 8003158:	b003      	add	sp, #12
 800315a:	bc3c      	pop	{r2, r3, r4, r5}
 800315c:	4690      	mov	r8, r2
 800315e:	4699      	mov	r9, r3
 8003160:	46a2      	mov	sl, r4
 8003162:	46ab      	mov	fp, r5
 8003164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	20000758 	.word	0x20000758
 800316c:	2000001c 	.word	0x2000001c

08003170 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
 */
BOS_Status LoadEEgroup(void) {
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003172:	46d6      	mov	lr, sl
 8003174:	464f      	mov	r7, r9
 8003176:	4646      	mov	r6, r8
 8003178:	b5c0      	push	{r6, r7, lr}
 800317a:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK;
	uint16_t add = 0, temp = 0;
 800317c:	466b      	mov	r3, sp
 800317e:	2200      	movs	r2, #0
 8003180:	80da      	strh	r2, [r3, #6]
	uint8_t i = 0;

	/* Load group members */
	for (i = 0; i < N; i++)			// N modules
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <LoadEEgroup+0x9c>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01d      	beq.n	80031c6 <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0;
 800318a:	2500      	movs	r5, #0
			{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add, &groupModules[i]);
 800318c:	4e20      	ldr	r6, [pc, #128]	; (8003210 <LoadEEgroup+0xa0>)
	for (i = 0; i < N; i++)			// N modules
 800318e:	4c1f      	ldr	r4, [pc, #124]	; (800320c <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add, &groupModules[i]);
 8003190:	b2e9      	uxtb	r1, r5
 8003192:	0049      	lsls	r1, r1, #1
 8003194:	1871      	adds	r1, r6, r1
 8003196:	0028      	movs	r0, r5
 8003198:	30cb      	adds	r0, #203	; 0xcb
 800319a:	b280      	uxth	r0, r0
 800319c:	f004 fb14 	bl	80077c8 <EE_ReadVariable>
		add++;
 80031a0:	3501      	adds	r5, #1
 80031a2:	b2ad      	uxth	r5, r5
	for (i = 0; i < N; i++)			// N modules
 80031a4:	7822      	ldrb	r2, [r4, #0]
 80031a6:	b2eb      	uxtb	r3, r5
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d8f1      	bhi.n	8003190 <LoadEEgroup+0x20>
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <LoadEEgroup+0xa4>)
 80031ae:	4699      	mov	r9, r3
 80031b0:	002c      	movs	r4, r5
 80031b2:	3499      	adds	r4, #153	; 0x99
 80031b4:	b2a4      	uxth	r4, r4
 80031b6:	35cb      	adds	r5, #203	; 0xcb
 80031b8:	b2ab      	uxth	r3, r5
 80031ba:	4698      	mov	r8, r3

	/* Load group alias */
	for (i = 0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
			{
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add, &temp);
 80031bc:	466b      	mov	r3, sp
 80031be:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j - 1] = (uint8_t) (temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80031c0:	2300      	movs	r3, #0
 80031c2:	469a      	mov	sl, r3
 80031c4:	e009      	b.n	80031da <LoadEEgroup+0x6a>
	uint16_t add = 0, temp = 0;
 80031c6:	2500      	movs	r5, #0
 80031c8:	e7f0      	b.n	80031ac <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 80031ca:	464b      	mov	r3, r9
 80031cc:	4652      	mov	r2, sl
 80031ce:	725a      	strb	r2, [r3, #9]
 80031d0:	230a      	movs	r3, #10
 80031d2:	469c      	mov	ip, r3
 80031d4:	44e1      	add	r9, ip
	for (i = 0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80031d6:	4544      	cmp	r4, r8
 80031d8:	d010      	beq.n	80031fc <LoadEEgroup+0x8c>
 80031da:	1d67      	adds	r7, r4, #5
 80031dc:	b2bf      	uxth	r7, r7
	uint16_t add = 0, temp = 0;
 80031de:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add, &temp);
 80031e0:	0031      	movs	r1, r6
 80031e2:	0020      	movs	r0, r4
 80031e4:	f004 faf0 	bl	80077c8 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 80031e8:	8833      	ldrh	r3, [r6, #0]
 80031ea:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] = (uint8_t) (temp >> 8);
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	702b      	strb	r3, [r5, #0]
 80031f0:	3401      	adds	r4, #1
 80031f2:	b2a4      	uxth	r4, r4
 80031f4:	3502      	adds	r5, #2
		for (uint8_t j = 1; j <= MaxLengthOfAlias; j += 2) {
 80031f6:	42bc      	cmp	r4, r7
 80031f8:	d1f2      	bne.n	80031e0 <LoadEEgroup+0x70>
 80031fa:	e7e6      	b.n	80031ca <LoadEEgroup+0x5a>
	}

	return result;
}
 80031fc:	2000      	movs	r0, #0
 80031fe:	b002      	add	sp, #8
 8003200:	bc1c      	pop	{r2, r3, r4}
 8003202:	4690      	mov	r8, r2
 8003204:	4699      	mov	r9, r3
 8003206:	46a2      	mov	sl, r4
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	2000001c 	.word	0x2000001c
 8003210:	200006b0 	.word	0x200006b0
 8003214:	2000064c 	.word	0x2000064c

08003218 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
 */
BOS_Status LoadEEstreams(void) {
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK;
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0;
 800321c:	210e      	movs	r1, #14
 800321e:	4469      	add	r1, sp
 8003220:	2300      	movs	r3, #0
 8003222:	800b      	strh	r3, [r1, #0]
 8003224:	aa03      	add	r2, sp, #12
 8003226:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0;
	uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;

	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8003228:	20e4      	movs	r0, #228	; 0xe4
 800322a:	f004 facd 	bl	80077c8 <EE_ReadVariable>
	uint8_t direction = 0;
 800322e:	2600      	movs	r6, #0
	if (!status1) {
 8003230:	2800      	cmp	r0, #0
 8003232:	d102      	bne.n	800323a <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8003234:	230e      	movs	r3, #14
 8003236:	446b      	add	r3, sp
 8003238:	781e      	ldrb	r6, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 1, &temp1);
 800323a:	210e      	movs	r1, #14
 800323c:	4469      	add	r1, sp
 800323e:	20e5      	movs	r0, #229	; 0xe5
 8003240:	f004 fac2 	bl	80077c8 <EE_ReadVariable>
 8003244:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 2, &temp2);
 8003246:	a903      	add	r1, sp, #12
 8003248:	20e6      	movs	r0, #230	; 0xe6
 800324a:	f004 fabd 	bl	80077c8 <EE_ReadVariable>
	if (!status1 && !status2) {
 800324e:	4304      	orrs	r4, r0
 8003250:	b2a4      	uxth	r4, r4
	uint32_t count = 0, timeout = 0;
 8003252:	2500      	movs	r5, #0
	if (!status1 && !status2) {
 8003254:	2c00      	cmp	r4, #0
 8003256:	d106      	bne.n	8003266 <LoadEEstreams+0x4e>
		count = ((uint32_t) temp1 << 16) + temp2;
 8003258:	230e      	movs	r3, #14
 800325a:	446b      	add	r3, sp
 800325c:	881d      	ldrh	r5, [r3, #0]
 800325e:	042d      	lsls	r5, r5, #16
 8003260:	ab03      	add	r3, sp, #12
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	18ed      	adds	r5, r5, r3
	}

	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 3, &temp1);
 8003266:	210e      	movs	r1, #14
 8003268:	4469      	add	r1, sp
 800326a:	20e7      	movs	r0, #231	; 0xe7
 800326c:	f004 faac 	bl	80077c8 <EE_ReadVariable>
 8003270:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 4, &temp2);
 8003272:	a903      	add	r1, sp, #12
 8003274:	20e8      	movs	r0, #232	; 0xe8
 8003276:	f004 faa7 	bl	80077c8 <EE_ReadVariable>
	if (!status1 && !status2) {
 800327a:	4320      	orrs	r0, r4
 800327c:	b280      	uxth	r0, r0
	uint32_t count = 0, timeout = 0;
 800327e:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 8003280:	2800      	cmp	r0, #0
 8003282:	d106      	bne.n	8003292 <LoadEEstreams+0x7a>
		timeout = ((uint32_t) temp1 << 16) + temp2;
 8003284:	230e      	movs	r3, #14
 8003286:	446b      	add	r3, sp
 8003288:	881c      	ldrh	r4, [r3, #0]
 800328a:	0424      	lsls	r4, r4, #16
 800328c:	ab03      	add	r3, sp, #12
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	18e4      	adds	r4, r4, r3
	}

	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 5, &temp1);
 8003292:	210e      	movs	r1, #14
 8003294:	4469      	add	r1, sp
 8003296:	20e9      	movs	r0, #233	; 0xe9
 8003298:	f004 fa96 	bl	80077c8 <EE_ReadVariable>
	if (!status1) {
 800329c:	2800      	cmp	r0, #0
 800329e:	d107      	bne.n	80032b0 <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 80032a0:	230e      	movs	r3, #14
 80032a2:	446b      	add	r3, sp
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	0a19      	lsrs	r1, r3, #8
 80032a8:	4a28      	ldr	r2, [pc, #160]	; (800334c <LoadEEstreams+0x134>)
 80032aa:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 80032ac:	4a28      	ldr	r2, [pc, #160]	; (8003350 <LoadEEstreams+0x138>)
 80032ae:	7013      	strb	r3, [r2, #0]
	}

	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 6, &temp1);
 80032b0:	210e      	movs	r1, #14
 80032b2:	4469      	add	r1, sp
 80032b4:	20ea      	movs	r0, #234	; 0xea
 80032b6:	f004 fa87 	bl	80077c8 <EE_ReadVariable>
	if (!status1) {
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d107      	bne.n	80032ce <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 80032be:	230e      	movs	r3, #14
 80032c0:	446b      	add	r3, sp
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	0a19      	lsrs	r1, r3, #8
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <LoadEEstreams+0x13c>)
 80032c8:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <LoadEEstreams+0x140>)
 80032cc:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE + 7, &temp1);
 80032ce:	210e      	movs	r1, #14
 80032d0:	4469      	add	r1, sp
 80032d2:	20eb      	movs	r0, #235	; 0xeb
 80032d4:	f004 fa78 	bl	80077c8 <EE_ReadVariable>
	if (!status1) {
 80032d8:	2800      	cmp	r0, #0
 80032da:	d107      	bne.n	80032ec <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 80032dc:	230e      	movs	r3, #14
 80032de:	446b      	add	r3, sp
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	0a19      	lsrs	r1, r3, #8
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <LoadEEstreams+0x144>)
 80032e6:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <LoadEEstreams+0x148>)
 80032ea:	7013      	strb	r3, [r2, #0]
	}

	/* Activate the DMA streams */
	if (src1 && dst1)
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <LoadEEstreams+0x134>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <LoadEEstreams+0xe4>
 80032f4:	4a16      	ldr	r2, [pc, #88]	; (8003350 <LoadEEstreams+0x138>)
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	2a00      	cmp	r2, #0
 80032fa:	d112      	bne.n	8003322 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 80032fc:	4b15      	ldr	r3, [pc, #84]	; (8003354 <LoadEEstreams+0x13c>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <LoadEEstreams+0xf4>
 8003304:	4a14      	ldr	r2, [pc, #80]	; (8003358 <LoadEEstreams+0x140>)
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	2a00      	cmp	r2, #0
 800330a:	d111      	bne.n	8003330 <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <LoadEEstreams+0x144>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <LoadEEstreams+0x104>
 8003314:	4a12      	ldr	r2, [pc, #72]	; (8003360 <LoadEEstreams+0x148>)
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	2a00      	cmp	r2, #0
 800331a:	d110      	bne.n	800333e <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);

	return result;
}
 800331c:	2000      	movs	r0, #0
 800331e:	b004      	add	sp, #16
 8003320:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 8003322:	9200      	str	r2, [sp, #0]
 8003324:	0022      	movs	r2, r4
 8003326:	0029      	movs	r1, r5
 8003328:	0030      	movs	r0, r6
 800332a:	f005 fe81 	bl	8009030 <SetupDMAStreams>
 800332e:	e7e5      	b.n	80032fc <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 8003330:	9200      	str	r2, [sp, #0]
 8003332:	0022      	movs	r2, r4
 8003334:	0029      	movs	r1, r5
 8003336:	0030      	movs	r0, r6
 8003338:	f005 fe7a 	bl	8009030 <SetupDMAStreams>
 800333c:	e7e6      	b.n	800330c <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 800333e:	9200      	str	r2, [sp, #0]
 8003340:	0022      	movs	r2, r4
 8003342:	0029      	movs	r1, r5
 8003344:	0030      	movs	r0, r6
 8003346:	f005 fe73 	bl	8009030 <SetupDMAStreams>
 800334a:	e7e7      	b.n	800331c <LoadEEstreams+0x104>
 800334c:	20000932 	.word	0x20000932
 8003350:	20000649 	.word	0x20000649
 8003354:	20000933 	.word	0x20000933
 8003358:	2000064a 	.word	0x2000064a
 800335c:	20000934 	.word	0x20000934
 8003360:	2000064b 	.word	0x2000064b

08003364 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
 */
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout,
		uint8_t src1, uint8_t dst1, uint8_t src2, uint8_t dst2, uint8_t src3,
		uint8_t dst3) {
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	46de      	mov	lr, fp
 8003368:	4657      	mov	r7, sl
 800336a:	464e      	mov	r6, r9
 800336c:	4645      	mov	r5, r8
 800336e:	b5e0      	push	{r5, r6, r7, lr}
 8003370:	000f      	movs	r7, r1
 8003372:	0016      	movs	r6, r2
 8003374:	4699      	mov	r9, r3
 8003376:	ab0a      	add	r3, sp, #40	; 0x28
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	469b      	mov	fp, r3
 800337c:	ab0b      	add	r3, sp, #44	; 0x2c
 800337e:	781d      	ldrb	r5, [r3, #0]
 8003380:	ab0c      	add	r3, sp, #48	; 0x30
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	469a      	mov	sl, r3
 8003386:	ab0d      	add	r3, sp, #52	; 0x34
 8003388:	781c      	ldrb	r4, [r3, #0]
 800338a:	ab0e      	add	r3, sp, #56	; 0x38
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK;

	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction); /* Direction */
 8003390:	b281      	uxth	r1, r0
 8003392:	20e4      	movs	r0, #228	; 0xe4
 8003394:	f004 fa48 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1, ((uint16_t) (count >> 8))); /* Count high half-word */
 8003398:	0a39      	lsrs	r1, r7, #8
 800339a:	b289      	uxth	r1, r1
 800339c:	20e5      	movs	r0, #229	; 0xe5
 800339e:	f004 fa43 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2, ((uint16_t) count)); /* Count low half-word */
 80033a2:	b2b9      	uxth	r1, r7
 80033a4:	20e6      	movs	r0, #230	; 0xe6
 80033a6:	f004 fa3f 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3, ((uint16_t) (timeout >> 8))); /* Timeout high half-word */
 80033aa:	0a31      	lsrs	r1, r6, #8
 80033ac:	b289      	uxth	r1, r1
 80033ae:	20e7      	movs	r0, #231	; 0xe7
 80033b0:	f004 fa3a 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4, ((uint16_t) timeout)); /* Timeout low half-word */
 80033b4:	b2b1      	uxth	r1, r6
 80033b6:	20e8      	movs	r0, #232	; 0xe8
 80033b8:	f004 fa36 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
			((uint16_t) (src1 << 8)) + (uint16_t) dst1); /* src1 | dst1 */
 80033bc:	464b      	mov	r3, r9
 80033be:	0219      	lsls	r1, r3, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 80033c0:	4459      	add	r1, fp
 80033c2:	b289      	uxth	r1, r1
 80033c4:	20e9      	movs	r0, #233	; 0xe9
 80033c6:	f004 fa2f 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
			((uint16_t) (src2 << 8)) + (uint16_t) dst2); /* src1 | dst1 */
 80033ca:	022d      	lsls	r5, r5, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 80033cc:	4455      	add	r5, sl
 80033ce:	b2a9      	uxth	r1, r5
 80033d0:	20ea      	movs	r0, #234	; 0xea
 80033d2:	f004 fa29 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
			((uint16_t) (src3 << 8)) + (uint16_t) dst3); /* src1 | dst1 */
 80033d6:	0224      	lsls	r4, r4, #8
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 80033d8:	4444      	add	r4, r8
 80033da:	b2a1      	uxth	r1, r4
 80033dc:	20eb      	movs	r0, #235	; 0xeb
 80033de:	f004 fa23 	bl	8007828 <EE_WriteVariable>

	return result;
}
 80033e2:	2000      	movs	r0, #0
 80033e4:	bc3c      	pop	{r2, r3, r4, r5}
 80033e6:	4690      	mov	r8, r2
 80033e8:	4699      	mov	r9, r3
 80033ea:	46a2      	mov	sl, r4
 80033ec:	46ab      	mov	fp, r5
 80033ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033f0 <LoadEEparams>:

/*-----------------------------------------------------------*/

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
 */
BOS_Status LoadEEparams(void) {
 80033f0:	b510      	push	{r4, lr}
 80033f2:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK;
	uint16_t temp1, temp2, status1, status2;

	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 80033f4:	208a      	movs	r0, #138	; 0x8a
 80033f6:	466b      	mov	r3, sp
 80033f8:	1d99      	adds	r1, r3, #6
 80033fa:	0040      	lsls	r0, r0, #1
 80033fc:	f004 f9e4 	bl	80077c8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003400:	2800      	cmp	r0, #0
 8003402:	d000      	beq.n	8003406 <LoadEEparams+0x16>
 8003404:	e064      	b.n	80034d0 <LoadEEparams+0xe0>
		BOS.response = (uint8_t) temp1;
 8003406:	466b      	mov	r3, sp
 8003408:	3306      	adds	r3, #6
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	4a49      	ldr	r2, [pc, #292]	; (8003534 <LoadEEparams+0x144>)
 800340e:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t) (temp1 >> 8);
 8003410:	0a1b      	lsrs	r3, r3, #8
 8003412:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}

	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8003414:	2016      	movs	r0, #22
 8003416:	466b      	mov	r3, sp
 8003418:	1d99      	adds	r1, r3, #6
 800341a:	30ff      	adds	r0, #255	; 0xff
 800341c:	f004 f9d4 	bl	80077c8 <EE_ReadVariable>
	if (!status1)
 8003420:	2800      	cmp	r0, #0
 8003422:	d15c      	bne.n	80034de <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8003424:	466b      	mov	r3, sp
 8003426:	88da      	ldrh	r2, [r3, #6]
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <LoadEEparams+0x144>)
 800342a:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 800342c:	208b      	movs	r0, #139	; 0x8b
 800342e:	466b      	mov	r3, sp
 8003430:	1d99      	adds	r1, r3, #6
 8003432:	0040      	lsls	r0, r0, #1
 8003434:	f004 f9c8 	bl	80077c8 <EE_ReadVariable>
	if (!status1)
 8003438:	2800      	cmp	r0, #0
 800343a:	d155      	bne.n	80034e8 <LoadEEparams+0xf8>
		BOS.buttons.singleClickTime = temp1;
 800343c:	466b      	mov	r3, sp
 800343e:	88da      	ldrh	r2, [r3, #6]
 8003440:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <LoadEEparams+0x144>)
 8003442:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 8003444:	2018      	movs	r0, #24
 8003446:	466b      	mov	r3, sp
 8003448:	1d99      	adds	r1, r3, #6
 800344a:	30ff      	adds	r0, #255	; 0xff
 800344c:	f004 f9bc 	bl	80077c8 <EE_ReadVariable>
	if (!status1) {
 8003450:	2800      	cmp	r0, #0
 8003452:	d14e      	bne.n	80034f2 <LoadEEparams+0x102>
		BOS.buttons.minInterClickTime = (uint8_t) temp1;
 8003454:	466b      	mov	r3, sp
 8003456:	3306      	adds	r3, #6
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	4a36      	ldr	r2, [pc, #216]	; (8003534 <LoadEEparams+0x144>)
 800345c:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t) (temp1 >> 8);
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;
	}

	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 8003462:	208c      	movs	r0, #140	; 0x8c
 8003464:	466b      	mov	r3, sp
 8003466:	1d99      	adds	r1, r3, #6
 8003468:	0040      	lsls	r0, r0, #1
 800346a:	f004 f9ad 	bl	80077c8 <EE_ReadVariable>
 800346e:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD + 1, &temp2);
 8003470:	201a      	movs	r0, #26
 8003472:	a901      	add	r1, sp, #4
 8003474:	30ff      	adds	r0, #255	; 0xff
 8003476:	f004 f9a7 	bl	80077c8 <EE_ReadVariable>
	if (!status1 && !status2) {
 800347a:	4304      	orrs	r4, r0
 800347c:	b2a4      	uxth	r4, r4
 800347e:	2c00      	cmp	r4, #0
 8003480:	d13e      	bne.n	8003500 <LoadEEparams+0x110>
		BOS.clibaudrate = (uint32_t) temp1 | (((uint32_t) temp2) << 16);
 8003482:	ab01      	add	r3, sp, #4
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	041b      	lsls	r3, r3, #16
 8003488:	466a      	mov	r2, sp
 800348a:	3206      	adds	r2, #6
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	4313      	orrs	r3, r2
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <LoadEEparams+0x144>)
 8003492:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;

	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 8003494:	208d      	movs	r0, #141	; 0x8d
 8003496:	466b      	mov	r3, sp
 8003498:	1d99      	adds	r1, r3, #6
 800349a:	0040      	lsls	r0, r0, #1
 800349c:	f004 f994 	bl	80077c8 <EE_ReadVariable>
	if (!status1) {
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d13b      	bne.n	800351c <LoadEEparams+0x12c>
		BOS.daylightsaving = (int8_t) temp1;
 80034a4:	466b      	mov	r3, sp
 80034a6:	3306      	adds	r3, #6
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <LoadEEparams+0x144>)
 80034ac:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t) (temp1 >> 8);
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}

	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 80034b2:	201c      	movs	r0, #28
 80034b4:	466b      	mov	r3, sp
 80034b6:	1d99      	adds	r1, r3, #6
 80034b8:	30ff      	adds	r0, #255	; 0xff
 80034ba:	f004 f985 	bl	80077c8 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 80034be:	2800      	cmp	r0, #0
 80034c0:	d032      	beq.n	8003528 <LoadEEparams+0x138>
		BOS.disableCLI = (uint8_t) temp1;
		/* Couldn't find the variable, load default config */
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <LoadEEparams+0x148>)
 80034c4:	7eda      	ldrb	r2, [r3, #27]
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <LoadEEparams+0x144>)
 80034c8:	76da      	strb	r2, [r3, #27]
	}

	return result;
}
 80034ca:	2000      	movs	r0, #0
 80034cc:	b002      	add	sp, #8
 80034ce:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <LoadEEparams+0x144>)
 80034d2:	4a19      	ldr	r2, [pc, #100]	; (8003538 <LoadEEparams+0x148>)
 80034d4:	7991      	ldrb	r1, [r2, #6]
 80034d6:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 80034d8:	79d2      	ldrb	r2, [r2, #7]
 80034da:	71da      	strb	r2, [r3, #7]
 80034dc:	e79a      	b.n	8003414 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 80034de:	4b16      	ldr	r3, [pc, #88]	; (8003538 <LoadEEparams+0x148>)
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <LoadEEparams+0x144>)
 80034e4:	801a      	strh	r2, [r3, #0]
 80034e6:	e7a1      	b.n	800342c <LoadEEparams+0x3c>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;
 80034e8:	4b13      	ldr	r3, [pc, #76]	; (8003538 <LoadEEparams+0x148>)
 80034ea:	885a      	ldrh	r2, [r3, #2]
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <LoadEEparams+0x144>)
 80034ee:	805a      	strh	r2, [r3, #2]
 80034f0:	e7a8      	b.n	8003444 <LoadEEparams+0x54>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <LoadEEparams+0x144>)
 80034f4:	4a10      	ldr	r2, [pc, #64]	; (8003538 <LoadEEparams+0x148>)
 80034f6:	7911      	ldrb	r1, [r2, #4]
 80034f8:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;
 80034fa:	7952      	ldrb	r2, [r2, #5]
 80034fc:	715a      	strb	r2, [r3, #5]
 80034fe:	e7b0      	b.n	8003462 <LoadEEparams+0x72>
	} else if (CLI_LOW_Baudrate_Flag)
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <LoadEEparams+0x14c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <LoadEEparams+0x122>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <LoadEEparams+0x144>)
 800350a:	22e1      	movs	r2, #225	; 0xe1
 800350c:	0252      	lsls	r2, r2, #9
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	e7c0      	b.n	8003494 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <LoadEEparams+0x148>)
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4b07      	ldr	r3, [pc, #28]	; (8003534 <LoadEEparams+0x144>)
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	e7bb      	b.n	8003494 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <LoadEEparams+0x144>)
 800351e:	2218      	movs	r2, #24
 8003520:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 8003522:	2200      	movs	r2, #0
 8003524:	731a      	strb	r2, [r3, #12]
 8003526:	e7c4      	b.n	80034b2 <LoadEEparams+0xc2>
		BOS.disableCLI = (uint8_t) temp1;
 8003528:	466b      	mov	r3, sp
 800352a:	88da      	ldrh	r2, [r3, #6]
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <LoadEEparams+0x144>)
 800352e:	76da      	strb	r2, [r3, #27]
 8003530:	e7cb      	b.n	80034ca <LoadEEparams+0xda>
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	2000612c 	.word	0x2000612c
 8003538:	20000000 	.word	0x20000000
 800353c:	2000029e 	.word	0x2000029e

08003540 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. --- 
 */
BOS_Status SaveEEparams(void) {
 8003540:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;

	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,
			((uint16_t) BOS.trace << 5) | (uint16_t) BOS.response);
 8003542:	4c1a      	ldr	r4, [pc, #104]	; (80035ac <SaveEEparams+0x6c>)
 8003544:	79e3      	ldrb	r3, [r4, #7]
 8003546:	015b      	lsls	r3, r3, #5
 8003548:	79a1      	ldrb	r1, [r4, #6]
	EE_WriteVariable(_EE_PARAMS_BASE,
 800354a:	4319      	orrs	r1, r3
 800354c:	208a      	movs	r0, #138	; 0x8a
 800354e:	0040      	lsls	r0, r0, #1
 8003550:	f004 f96a 	bl	8007828 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 8003554:	8821      	ldrh	r1, [r4, #0]
 8003556:	2016      	movs	r0, #22
 8003558:	30ff      	adds	r0, #255	; 0xff
 800355a:	f004 f965 	bl	8007828 <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 800355e:	8861      	ldrh	r1, [r4, #2]
 8003560:	208b      	movs	r0, #139	; 0x8b
 8003562:	0040      	lsls	r0, r0, #1
 8003564:	f004 f960 	bl	8007828 <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
			((uint16_t) BOS.buttons.maxInterClickTime << 8)
 8003568:	7963      	ldrb	r3, [r4, #5]
 800356a:	021b      	lsls	r3, r3, #8
					| (uint16_t) BOS.daylightsaving);
 800356c:	7b21      	ldrb	r1, [r4, #12]
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 800356e:	4319      	orrs	r1, r3
 8003570:	2018      	movs	r0, #24
 8003572:	30ff      	adds	r0, #255	; 0xff
 8003574:	f004 f958 	bl	8007828 <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t) BOS.clibaudrate);
 8003578:	8921      	ldrh	r1, [r4, #8]
 800357a:	208c      	movs	r0, #140	; 0x8c
 800357c:	0040      	lsls	r0, r0, #1
 800357e:	f004 f953 	bl	8007828 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1, (uint16_t) (BOS.clibaudrate >> 16));
 8003582:	8961      	ldrh	r1, [r4, #10]
 8003584:	201a      	movs	r0, #26
 8003586:	30ff      	adds	r0, #255	; 0xff
 8003588:	f004 f94e 	bl	8007828 <EE_WriteVariable>

	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC,
			((uint16_t) BOS.hourformat << 8)
 800358c:	7b63      	ldrb	r3, [r4, #13]
 800358e:	021b      	lsls	r3, r3, #8
					| (uint16_t) BOS.buttons.minInterClickTime);
 8003590:	7921      	ldrb	r1, [r4, #4]
	EE_WriteVariable(_EE_PARAMS_RTC,
 8003592:	4319      	orrs	r1, r3
 8003594:	208d      	movs	r0, #141	; 0x8d
 8003596:	0040      	lsls	r0, r0, #1
 8003598:	f004 f946 	bl	8007828 <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t) BOS.disableCLI);
 800359c:	7ee1      	ldrb	r1, [r4, #27]
 800359e:	201c      	movs	r0, #28
 80035a0:	30ff      	adds	r0, #255	; 0xff
 80035a2:	f004 f941 	bl	8007828 <EE_WriteVariable>

	return result;
}
 80035a6:	2000      	movs	r0, #0
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	2000612c 	.word	0x2000612c

080035b0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- 
 */
BOS_Status LoadEEbuttons(void) {
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	46ce      	mov	lr, r9
 80035b4:	4647      	mov	r7, r8
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	uint16_t temp16 = 0, status1 = 0;
 80035ba:	231e      	movs	r3, #30
 80035bc:	446b      	add	r3, sp
 80035be:	2200      	movs	r2, #0
 80035c0:	801a      	strh	r2, [r3, #0]
 80035c2:	2501      	movs	r5, #1
 80035c4:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 = 0;

	for (uint8_t i = 0; i <= NumOfPorts; i++) {
		status1 = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i), &temp16);
 80035c6:	001e      	movs	r6, r3
 80035c8:	230f      	movs	r3, #15
 80035ca:	4698      	mov	r8, r3
 80035cc:	e004      	b.n	80035d8 <LoadEEbuttons+0x28>
 80035ce:	3404      	adds	r4, #4
 80035d0:	b2a4      	uxth	r4, r4
 80035d2:	3501      	adds	r5, #1
	for (uint8_t i = 0; i <= NumOfPorts; i++) {
 80035d4:	2d07      	cmp	r5, #7
 80035d6:	d058      	beq.n	800368a <LoadEEbuttons+0xda>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i), &temp16);
 80035d8:	0031      	movs	r1, r6
 80035da:	0020      	movs	r0, r4
 80035dc:	f004 f8f4 	bl	80077c8 <EE_ReadVariable>

		if (!status1)									// This variable exists
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d1f4      	bne.n	80035ce <LoadEEbuttons+0x1e>
		{
			temp8 = (uint8_t) (temp16 >> 8);
 80035e4:	8831      	ldrh	r1, [r6, #0]
 80035e6:	0a0b      	lsrs	r3, r1, #8
			if (((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))// This is same port and button type is not none
 80035e8:	091a      	lsrs	r2, r3, #4
 80035ea:	42aa      	cmp	r2, r5
 80035ec:	d1ef      	bne.n	80035ce <LoadEEbuttons+0x1e>
 80035ee:	4640      	mov	r0, r8
 80035f0:	4003      	ands	r3, r0
 80035f2:	d0ec      	beq.n	80035ce <LoadEEbuttons+0x1e>
					{
				button[i + 1].type = temp8 & 0x0F;
 80035f4:	00d0      	lsls	r0, r2, #3
 80035f6:	1882      	adds	r2, r0, r2
 80035f8:	4827      	ldr	r0, [pc, #156]	; (8003698 <LoadEEbuttons+0xe8>)
 80035fa:	4681      	mov	r9, r0
 80035fc:	4491      	add	r9, r2
 80035fe:	464a      	mov	r2, r9
 8003600:	7053      	strb	r3, [r2, #1]
				button[i + 1].events = (uint8_t) temp16;
 8003602:	7211      	strb	r1, [r2, #8]
 8003604:	00af      	lsls	r7, r5, #2
 8003606:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1, &temp16);
 8003608:	0038      	movs	r0, r7
 800360a:	30e9      	adds	r0, #233	; 0xe9
 800360c:	b280      	uxth	r0, r0
 800360e:	0031      	movs	r1, r6
 8003610:	f004 f8da 	bl	80077c8 <EE_ReadVariable>
				button[i + 1].pressedX1Sec = (uint8_t) (temp16 >> 8);
 8003614:	8833      	ldrh	r3, [r6, #0]
 8003616:	0a1a      	lsrs	r2, r3, #8
 8003618:	4649      	mov	r1, r9
 800361a:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec = (uint8_t) temp16;
 800361c:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2, &temp16);
 800361e:	0038      	movs	r0, r7
 8003620:	30ea      	adds	r0, #234	; 0xea
 8003622:	b280      	uxth	r0, r0
 8003624:	0031      	movs	r1, r6
 8003626:	f004 f8cf 	bl	80077c8 <EE_ReadVariable>
				button[i + 1].pressedX2Sec = (uint8_t) (temp16 >> 8);
 800362a:	8833      	ldrh	r3, [r6, #0]
 800362c:	0a1a      	lsrs	r2, r3, #8
 800362e:	4649      	mov	r1, r9
 8003630:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec = (uint8_t) temp16;
 8003632:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3, &temp16);
 8003634:	37eb      	adds	r7, #235	; 0xeb
 8003636:	b2b8      	uxth	r0, r7
 8003638:	0031      	movs	r1, r6
 800363a:	f004 f8c5 	bl	80077c8 <EE_ReadVariable>
				button[i + 1].pressedX3Sec = (uint8_t) (temp16 >> 8);
 800363e:	8833      	ldrh	r3, [r6, #0]
 8003640:	0a1a      	lsrs	r2, r3, #8
 8003642:	4649      	mov	r1, r9
 8003644:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec = (uint8_t) temp16;
 8003646:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type, i + 1);
 8003648:	b2ef      	uxtb	r7, r5
 800364a:	7848      	ldrb	r0, [r1, #1]
 800364c:	0039      	movs	r1, r7
 800364e:	f004 fdb7 	bl	80081c0 <AddPortButton>
				SetButtonEvents(i + 1,
						(button[i + 1].events & BUTTON_EVENT_CLICKED),
 8003652:	464b      	mov	r3, r9
 8003654:	7a19      	ldrb	r1, [r3, #8]
				SetButtonEvents(i + 1,
 8003656:	789b      	ldrb	r3, [r3, #2]
						((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),
 8003658:	104a      	asrs	r2, r1, #1
				SetButtonEvents(i + 1,
 800365a:	2001      	movs	r0, #1
 800365c:	4002      	ands	r2, r0
 800365e:	4001      	ands	r1, r0
 8003660:	2000      	movs	r0, #0
 8003662:	9005      	str	r0, [sp, #20]
 8003664:	4648      	mov	r0, r9
 8003666:	79c0      	ldrb	r0, [r0, #7]
 8003668:	9004      	str	r0, [sp, #16]
 800366a:	4648      	mov	r0, r9
 800366c:	7980      	ldrb	r0, [r0, #6]
 800366e:	9003      	str	r0, [sp, #12]
 8003670:	4648      	mov	r0, r9
 8003672:	7940      	ldrb	r0, [r0, #5]
 8003674:	9002      	str	r0, [sp, #8]
 8003676:	4648      	mov	r0, r9
 8003678:	7900      	ldrb	r0, [r0, #4]
 800367a:	9001      	str	r0, [sp, #4]
 800367c:	4648      	mov	r0, r9
 800367e:	78c0      	ldrb	r0, [r0, #3]
 8003680:	9000      	str	r0, [sp, #0]
 8003682:	0038      	movs	r0, r7
 8003684:	f004 feb4 	bl	80083f0 <SetButtonEvents>
 8003688:	e7a1      	b.n	80035ce <LoadEEbuttons+0x1e>
			}
		}
	}

	return result;
}
 800368a:	2000      	movs	r0, #0
 800368c:	b009      	add	sp, #36	; 0x24
 800368e:	bc0c      	pop	{r2, r3}
 8003690:	4690      	mov	r8, r2
 8003692:	4699      	mov	r9, r3
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	20000cb4 	.word	0x20000cb4

0800369c <LoadEEvars>:
void LoadEEvars(void) {
 800369c:	b510      	push	{r4, lr}
	LoadROtopology();
 800369e:	f7ff fc11 	bl	8002ec4 <LoadROtopology>
	LoadEEportsDir();
 80036a2:	f7ff fcbd 	bl	8003020 <LoadEEportsDir>
	LoadEEalias();
 80036a6:	f7ff fd21 	bl	80030ec <LoadEEalias>
	LoadEEgroup();
 80036aa:	f7ff fd61 	bl	8003170 <LoadEEgroup>
	LoadEEstreams();
 80036ae:	f7ff fdb3 	bl	8003218 <LoadEEstreams>
	LoadEEparams();
 80036b2:	f7ff fe9d 	bl	80033f0 <LoadEEparams>
	LoadEEbuttons();
 80036b6:	f7ff ff7b 	bl	80035b0 <LoadEEbuttons>
	LoadROsnippets();
 80036ba:	f7ff fb7d 	bl	8002db8 <LoadROsnippets>
}
 80036be:	bd10      	pop	{r4, pc}

080036c0 <IsLowerCLIbaud>:
/*-----------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void) {
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;

	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 80036c4:	2512      	movs	r5, #18
 80036c6:	446d      	add	r5, sp
 80036c8:	ab04      	add	r3, sp, #16
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	ab07      	add	r3, sp, #28
 80036ce:	002a      	movs	r2, r5
 80036d0:	a908      	add	r1, sp, #32
 80036d2:	2001      	movs	r0, #1
 80036d4:	f009 ffaa 	bl	800d62c <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 80036d8:	ac03      	add	r4, sp, #12
 80036da:	9400      	str	r4, [sp, #0]
 80036dc:	ab05      	add	r3, sp, #20
 80036de:	220e      	movs	r2, #14
 80036e0:	446a      	add	r2, sp
 80036e2:	a906      	add	r1, sp, #24
 80036e4:	2002      	movs	r0, #2
 80036e6:	f009 ffa1 	bl	800d62c <GetPortGPIOs>

	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2600      	movs	r6, #0
 80036f0:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 80036f2:	882b      	ldrh	r3, [r5, #0]
 80036f4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P1_TX_Port, &GPIO_InitStruct);
 80036f6:	a909      	add	r1, sp, #36	; 0x24
 80036f8:	9808      	ldr	r0, [sp, #32]
 80036fa:	f00e fa15 	bl	8011b28 <HAL_GPIO_Init>

	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fe:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003700:	2302      	movs	r3, #2
 8003702:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003704:	8823      	ldrh	r3, [r4, #0]
 8003706:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) P2_RX_Port, &GPIO_InitStruct);
 8003708:	a909      	add	r1, sp, #36	; 0x24
 800370a:	9805      	ldr	r0, [sp, #20]
 800370c:	f00e fa0c 	bl	8011b28 <HAL_GPIO_Init>

	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port, P1_TX_Pin, GPIO_PIN_RESET);
 8003710:	8829      	ldrh	r1, [r5, #0]
 8003712:	2200      	movs	r2, #0
 8003714:	9808      	ldr	r0, [sp, #32]
 8003716:	f00e fb7b 	bl	8011e10 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800371a:	2005      	movs	r0, #5
 800371c:	f00a fb2a 	bl	800dd74 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == RESET) {
 8003720:	8821      	ldrh	r1, [r4, #0]
 8003722:	9805      	ldr	r0, [sp, #20]
 8003724:	f00e fb6e 	bl	8011e04 <HAL_GPIO_ReadPin>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == SET) {
			return 1;
		}
	}

	return 0;
 8003728:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == RESET) {
 800372a:	2800      	cmp	r0, #0
 800372c:	d002      	beq.n	8003734 <IsLowerCLIbaud+0x74>
}
 800372e:	0018      	movs	r0, r3
 8003730:	b00e      	add	sp, #56	; 0x38
 8003732:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef*) P1_TX_Port, P1_TX_Pin, GPIO_PIN_SET);
 8003734:	3312      	adds	r3, #18
 8003736:	446b      	add	r3, sp
 8003738:	8819      	ldrh	r1, [r3, #0]
 800373a:	2201      	movs	r2, #1
 800373c:	9808      	ldr	r0, [sp, #32]
 800373e:	f00e fb67 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003742:	2005      	movs	r0, #5
 8003744:	f00a fb16 	bl	800dd74 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef*) P2_RX_Port, P2_RX_Pin) == SET) {
 8003748:	ab03      	add	r3, sp, #12
 800374a:	8819      	ldrh	r1, [r3, #0]
 800374c:	9805      	ldr	r0, [sp, #20]
 800374e:	f00e fb59 	bl	8011e04 <HAL_GPIO_ReadPin>
 8003752:	3801      	subs	r0, #1
 8003754:	4243      	negs	r3, r0
 8003756:	4143      	adcs	r3, r0
			return 1;
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e7e8      	b.n	800372e <IsLowerCLIbaud+0x6e>

0800375c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

/* --- Format emulated EEPROM for a factory reset
 */
void EE_FormatForFactoryReset(void) {
 800375c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long*) 0x20007FF0) == 0xBEEFDEAD) {
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <EE_FormatForFactoryReset+0x1c>)
 8003760:	4a06      	ldr	r2, [pc, #24]	; (800377c <EE_FormatForFactoryReset+0x20>)
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d006      	beq.n	8003776 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	} else {
		if (EE_Format() == HAL_OK) {
 8003768:	f004 f906 	bl	8007978 <EE_Format>
 800376c:	2800      	cmp	r0, #0
 800376e:	d102      	bne.n	8003776 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long*) 0x20007FF0) = 0xBEEFDEAD;
 8003770:	4b02      	ldr	r3, [pc, #8]	; (800377c <EE_FormatForFactoryReset+0x20>)
 8003772:	4a01      	ldr	r2, [pc, #4]	; (8003778 <EE_FormatForFactoryReset+0x1c>)
 8003774:	601a      	str	r2, [r3, #0]
		}
	}

}
 8003776:	bd10      	pop	{r4, pc}
 8003778:	beefdead 	.word	0xbeefdead
 800377c:	20007ff0 	.word	0x20007ff0

08003780 <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port) {
 8003780:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003782:	f00a fc89 	bl	800e098 <GetUart>
 8003786:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003788:	23e1      	movs	r3, #225	; 0xe1
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800379a:	f00f ff6f 	bl	801367c <HAL_UART_Init>

	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	2120      	movs	r1, #32
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bd10      	pop	{r4, pc}
	...

080037ac <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name) {
 80037ac:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < NUM_MODULE_PARAMS; i++) {
		if (!strcmp(name, (const char*) (modParam[i].paramName)))
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <IsModuleParameter+0x14>)
 80037b0:	6899      	ldr	r1, [r3, #8]
 80037b2:	f7fc fca7 	bl	8000104 <strcmp>
 80037b6:	4243      	negs	r3, r0
 80037b8:	4158      	adcs	r0, r3
 80037ba:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	20000088 	.word	0x20000088

080037c4 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string) {
 80037c4:	b570      	push	{r4, r5, r6, lr}
 80037c6:	0004      	movs	r4, r0
	for (uint8_t i = 0; i < NUM_MATH_OPERATORS; i++) {
		if (!strcmp(string, "="))
 80037c8:	491b      	ldr	r1, [pc, #108]	; (8003838 <IsMathOperator+0x74>)
 80037ca:	f7fc fc9b 	bl	8000104 <strcmp>
 80037ce:	0006      	movs	r6, r0
 80037d0:	2506      	movs	r5, #6
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	d023      	beq.n	800381e <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 80037d6:	4919      	ldr	r1, [pc, #100]	; (800383c <IsMathOperator+0x78>)
 80037d8:	0020      	movs	r0, r4
 80037da:	f7fc fc93 	bl	8000104 <strcmp>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d01f      	beq.n	8003822 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 80037e2:	4917      	ldr	r1, [pc, #92]	; (8003840 <IsMathOperator+0x7c>)
 80037e4:	0020      	movs	r0, r4
 80037e6:	f7fc fc8d 	bl	8000104 <strcmp>
 80037ea:	2800      	cmp	r0, #0
 80037ec:	d01b      	beq.n	8003826 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 80037ee:	4915      	ldr	r1, [pc, #84]	; (8003844 <IsMathOperator+0x80>)
 80037f0:	0020      	movs	r0, r4
 80037f2:	f7fc fc87 	bl	8000104 <strcmp>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d017      	beq.n	800382a <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 80037fa:	4913      	ldr	r1, [pc, #76]	; (8003848 <IsMathOperator+0x84>)
 80037fc:	0020      	movs	r0, r4
 80037fe:	f7fc fc81 	bl	8000104 <strcmp>
 8003802:	2800      	cmp	r0, #0
 8003804:	d013      	beq.n	800382e <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003806:	4911      	ldr	r1, [pc, #68]	; (800384c <IsMathOperator+0x88>)
 8003808:	0020      	movs	r0, r4
 800380a:	f7fc fc7b 	bl	8000104 <strcmp>
 800380e:	2800      	cmp	r0, #0
 8003810:	d00f      	beq.n	8003832 <IsMathOperator+0x6e>
 8003812:	3d01      	subs	r5, #1
 8003814:	b2ed      	uxtb	r5, r5
	for (uint8_t i = 0; i < NUM_MATH_OPERATORS; i++) {
 8003816:	2d00      	cmp	r5, #0
 8003818:	d1db      	bne.n	80037d2 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 800381a:	2000      	movs	r0, #0
}
 800381c:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 800381e:	2001      	movs	r0, #1
 8003820:	e7fc      	b.n	800381c <IsMathOperator+0x58>
			return MATH_GREATER;
 8003822:	2002      	movs	r0, #2
 8003824:	e7fa      	b.n	800381c <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003826:	2003      	movs	r0, #3
 8003828:	e7f8      	b.n	800381c <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 800382a:	2004      	movs	r0, #4
 800382c:	e7f6      	b.n	800381c <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 800382e:	2005      	movs	r0, #5
 8003830:	e7f4      	b.n	800381c <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003832:	2006      	movs	r0, #6
 8003834:	e7f2      	b.n	800381c <IsMathOperator+0x58>
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	08017b68 	.word	0x08017b68
 800383c:	08017b6c 	.word	0x08017b6c
 8003840:	08017b70 	.word	0x08017b70
 8003844:	08017b74 	.word	0x08017b74
 8003848:	08017b78 	.word	0x08017b78
 800384c:	08017b7c 	.word	0x08017b7c

08003850 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore) {
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b083      	sub	sp, #12
 8003854:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK;

	/* Send Hi messages to adjacent neighbors */
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8003856:	2401      	movs	r4, #1
		if (port != ignore) {
			/* This module info */
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003858:	4d0d      	ldr	r5, [pc, #52]	; (8003890 <ExploreNeighbors+0x40>)
			messageParams[1] = (uint8_t) myPN;
			messageParams[2] = port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800385a:	2603      	movs	r6, #3
		if (port != ignore) {
 800385c:	42a7      	cmp	r7, r4
 800385e:	d00f      	beq.n	8003880 <ExploreNeighbors+0x30>
			messageParams[0] = (uint8_t) (myPN >> 8);
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <ExploreNeighbors+0x44>)
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	0a1a      	lsrs	r2, r3, #8
 8003866:	702a      	strb	r2, [r5, #0]
			messageParams[1] = (uint8_t) myPN;
 8003868:	706b      	strb	r3, [r5, #1]
			messageParams[2] = port;
 800386a:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port, 0, 0, CODE_HI, 3);
 800386c:	9600      	str	r6, [sp, #0]
 800386e:	230a      	movs	r3, #10
 8003870:	2200      	movs	r2, #0
 8003872:	2100      	movs	r1, #0
 8003874:	0020      	movs	r0, r4
 8003876:	f005 fcf3 	bl	8009260 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800387a:	200a      	movs	r0, #10
 800387c:	f00a fd57 	bl	800e32e <osDelay>
	for (uint8_t port = 1; port <= NumOfPorts; port++) {
 8003880:	3401      	adds	r4, #1
 8003882:	b2e4      	uxtb	r4, r4
 8003884:	2c06      	cmp	r4, #6
 8003886:	d1e9      	bne.n	800385c <ExploreNeighbors+0xc>
		}
	}

	return result;
}
 8003888:	2000      	movs	r0, #0
 800388a:	b003      	add	sp, #12
 800388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	20000728 	.word	0x20000728
 8003894:	20000050 	.word	0x20000050

08003898 <FindBroadcastRoutes>:
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module 
 (Takes about 50 usec)
 */
BOS_Status FindBroadcastRoutes(uint8_t src) {
 8003898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389a:	46de      	mov	lr, fp
 800389c:	4657      	mov	r7, sl
 800389e:	464e      	mov	r6, r9
 80038a0:	4645      	mov	r5, r8
 80038a2:	b5e0      	push	{r5, r6, r7, lr}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK;
	uint8_t p = 0, m = 0, level = 0, untaged = 0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80038a8:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <FindBroadcastRoutes+0x138>)
 80038aa:	781d      	ldrb	r5, [r3, #0]
 80038ac:	1deb      	adds	r3, r5, #7
 80038ae:	08db      	lsrs	r3, r3, #3
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	466a      	mov	r2, sp
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	469d      	mov	sp, r3
 80038b8:	466c      	mov	r4, sp

	/* 1. Initialize modules list and broadcast routes */

	for (m = 0; m < N; m++) {
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	d00b      	beq.n	80038d6 <FindBroadcastRoutes+0x3e>
 80038be:	4a45      	ldr	r2, [pc, #276]	; (80039d4 <FindBroadcastRoutes+0x13c>)
 80038c0:	1e6e      	subs	r6, r5, #1
 80038c2:	b2f6      	uxtb	r6, r6
 80038c4:	3601      	adds	r6, #1
 80038c6:	1936      	adds	r6, r6, r4
		modules[m] = 0;
 80038c8:	2100      	movs	r1, #0
 80038ca:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] = 0;
 80038cc:	8011      	strh	r1, [r2, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	3202      	adds	r2, #2
	for (m = 0; m < N; m++) {
 80038d2:	42b3      	cmp	r3, r6
 80038d4:	d1f9      	bne.n	80038ca <FindBroadcastRoutes+0x32>
	}
	modules[src - 1] = ++level;					// Tag the source
 80038d6:	3801      	subs	r0, #1
 80038d8:	2301      	movs	r3, #1
 80038da:	5423      	strb	r3, [r4, r0]
 80038dc:	2216      	movs	r2, #22
 80038de:	4342      	muls	r2, r0
 80038e0:	3202      	adds	r2, #2
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <FindBroadcastRoutes+0x140>)
 80038e4:	18d2      	adds	r2, r2, r3
 80038e6:	2100      	movs	r1, #0

	++level;												// Move one level

	for (p = 1; p <= NumOfPorts; p++) {
		if (array[src - 1][p]) {
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 80038e8:	4e3a      	ldr	r6, [pc, #232]	; (80039d4 <FindBroadcastRoutes+0x13c>)
 80038ea:	0040      	lsls	r0, r0, #1
 80038ec:	2301      	movs	r3, #1
 80038ee:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 80038f0:	3301      	adds	r3, #1
 80038f2:	469c      	mov	ip, r3
 80038f4:	60fd      	str	r5, [r7, #12]
 80038f6:	46a3      	mov	fp, r4
 80038f8:	e003      	b.n	8003902 <FindBroadcastRoutes+0x6a>
 80038fa:	3101      	adds	r1, #1
 80038fc:	3202      	adds	r2, #2
	for (p = 1; p <= NumOfPorts; p++) {
 80038fe:	2905      	cmp	r1, #5
 8003900:	d011      	beq.n	8003926 <FindBroadcastRoutes+0x8e>
		if (array[src - 1][p]) {
 8003902:	8813      	ldrh	r3, [r2, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0f8      	beq.n	80038fa <FindBroadcastRoutes+0x62>
			bcastRoutes[src - 1] |= (0x01 << (p - 1));
 8003908:	5b85      	ldrh	r5, [r0, r6]
 800390a:	46a9      	mov	r9, r5
 800390c:	4645      	mov	r5, r8
 800390e:	408d      	lsls	r5, r1
 8003910:	46aa      	mov	sl, r5
 8003912:	464d      	mov	r5, r9
 8003914:	4654      	mov	r4, sl
 8003916:	4325      	orrs	r5, r4
 8003918:	5385      	strh	r5, [r0, r6]
			modules[(array[src - 1][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	445b      	add	r3, fp
 800391e:	3b01      	subs	r3, #1
 8003920:	4664      	mov	r4, ip
 8003922:	701c      	strb	r4, [r3, #0]
 8003924:	e7e9      	b.n	80038fa <FindBroadcastRoutes+0x62>
 8003926:	68fd      	ldr	r5, [r7, #12]
 8003928:	465c      	mov	r4, fp
	++level;												// Move one level
 800392a:	2302      	movs	r3, #2
 800392c:	4699      	mov	r9, r3

	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do {
		untaged = 0;								// Reset the untaged counter
		++level;											// Move one level
 800392e:	464b      	mov	r3, r9
 8003930:	3301      	adds	r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4699      	mov	r9, r3

		for (m = 0; m < N; m++)					// Scan all modules in the list
 8003936:	2d00      	cmp	r5, #0
 8003938:	d040      	beq.n	80039bc <FindBroadcastRoutes+0x124>
 800393a:	4827      	ldr	r0, [pc, #156]	; (80039d8 <FindBroadcastRoutes+0x140>)
 800393c:	2100      	movs	r1, #0
		untaged = 0;								// Reset the untaged counter
 800393e:	2600      	movs	r6, #0
				{
			if (modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 8003940:	2301      	movs	r3, #1
 8003942:	425b      	negs	r3, r3
 8003944:	444b      	add	r3, r9
 8003946:	469c      	mov	ip, r3
 8003948:	e02c      	b.n	80039a4 <FindBroadcastRoutes+0x10c>
 800394a:	3201      	adds	r2, #1
					{
				for (p = 1; p <= NumOfPorts; p++)// Check all neighbors if they're not already broadcasted-to
 800394c:	2a06      	cmp	r2, #6
 800394e:	d021      	beq.n	8003994 <FindBroadcastRoutes+0xfc>
						{
					if (array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003950:	0053      	lsls	r3, r2, #1
 8003952:	5ac3      	ldrh	r3, [r0, r3]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f8      	beq.n	800394a <FindBroadcastRoutes+0xb2>
 8003958:	08db      	lsrs	r3, r3, #3
 800395a:	3b01      	subs	r3, #1
 800395c:	5ce1      	ldrb	r1, [r4, r3]
 800395e:	2900      	cmp	r1, #0
 8003960:	d1f3      	bne.n	800394a <FindBroadcastRoutes+0xb2>
							{
						bcastRoutes[m] |= (0x01 << (p - 1));
 8003962:	1e51      	subs	r1, r2, #1
 8003964:	468a      	mov	sl, r1
 8003966:	2101      	movs	r1, #1
 8003968:	4655      	mov	r5, sl
 800396a:	40a9      	lsls	r1, r5
 800396c:	468a      	mov	sl, r1
 800396e:	4919      	ldr	r1, [pc, #100]	; (80039d4 <FindBroadcastRoutes+0x13c>)
 8003970:	4645      	mov	r5, r8
 8003972:	5a69      	ldrh	r1, [r5, r1]
 8003974:	468b      	mov	fp, r1
 8003976:	4651      	mov	r1, sl
 8003978:	465d      	mov	r5, fp
 800397a:	4329      	orrs	r1, r5
 800397c:	468a      	mov	sl, r1
 800397e:	4915      	ldr	r1, [pc, #84]	; (80039d4 <FindBroadcastRoutes+0x13c>)
 8003980:	4645      	mov	r5, r8
 8003982:	4656      	mov	r6, sl
 8003984:	526e      	strh	r6, [r5, r1]
						modules[(array[m][p] >> 3) - 1] = level;// Tag this module as already broadcasted-to
 8003986:	4649      	mov	r1, r9
 8003988:	54e1      	strb	r1, [r4, r3]
						++untaged;
 800398a:	68fe      	ldr	r6, [r7, #12]
 800398c:	3601      	adds	r6, #1
 800398e:	b2f3      	uxtb	r3, r6
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e7da      	b.n	800394a <FindBroadcastRoutes+0xb2>
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	68fe      	ldr	r6, [r7, #12]
 8003998:	687d      	ldr	r5, [r7, #4]
 800399a:	3101      	adds	r1, #1
 800399c:	3016      	adds	r0, #22
		for (m = 0; m < N; m++)					// Scan all modules in the list
 800399e:	b2cb      	uxtb	r3, r1
 80039a0:	42ab      	cmp	r3, r5
 80039a2:	d209      	bcs.n	80039b8 <FindBroadcastRoutes+0x120>
			if (modules[m] == (level - 1))// This module is already broadcasted-to from the previous level
 80039a4:	5c63      	ldrb	r3, [r4, r1]
 80039a6:	4563      	cmp	r3, ip
 80039a8:	d1f7      	bne.n	800399a <FindBroadcastRoutes+0x102>
 80039aa:	004b      	lsls	r3, r1, #1
 80039ac:	4698      	mov	r8, r3
 80039ae:	2201      	movs	r2, #1
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	60fe      	str	r6, [r7, #12]
 80039b4:	607d      	str	r5, [r7, #4]
 80039b6:	e7cb      	b.n	8003950 <FindBroadcastRoutes+0xb8>
					}
				}
			}
		}
	} while (untaged);
 80039b8:	2e00      	cmp	r6, #0
 80039ba:	d1b8      	bne.n	800392e <FindBroadcastRoutes+0x96>

	return result;
}
 80039bc:	2000      	movs	r0, #0
 80039be:	46bd      	mov	sp, r7
 80039c0:	b005      	add	sp, #20
 80039c2:	bc3c      	pop	{r2, r3, r4, r5}
 80039c4:	4690      	mov	r8, r2
 80039c6:	4699      	mov	r9, r3
 80039c8:	46a2      	mov	sl, r4
 80039ca:	46ab      	mov	fp, r5
 80039cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ce:	46c0      	nop			; (mov r8, r8)
 80039d0:	2000001c 	.word	0x2000001c
 80039d4:	200004e0 	.word	0x200004e0
 80039d8:	200002a0 	.word	0x200002a0

080039dc <FindRoute>:

 6- Otherwise, select the unvisited node that is marked with the smallest tentative distance,
 set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID) {
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	46de      	mov	lr, fp
 80039e0:	4657      	mov	r7, sl
 80039e2:	464e      	mov	r6, r9
 80039e4:	4645      	mov	r5, r8
 80039e6:	b5e0      	push	{r5, r6, r7, lr}
 80039e8:	b08f      	sub	sp, #60	; 0x3c
 80039ea:	0005      	movs	r5, r0
 80039ec:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = { 0 };		// All nodes initially in Q (unvisited nodes)
 80039ee:	2232      	movs	r2, #50	; 0x32
 80039f0:	2100      	movs	r1, #0
 80039f2:	a801      	add	r0, sp, #4
 80039f4:	f010 f822 	bl	8013a3c <memset>
	uint8_t alt = 0;
	uint8_t u = 0;
	uint8_t v = 0;
	uint8_t j = 0;

	memset(route, 0, sizeof(route));
 80039f8:	221a      	movs	r2, #26
 80039fa:	2100      	movs	r1, #0
 80039fc:	485a      	ldr	r0, [pc, #360]	; (8003b68 <FindRoute+0x18c>)
 80039fe:	f010 f81d 	bl	8013a3c <memset>
	routeDist[sourceID - 1] = 0;               // Distance from source to source
 8003a02:	0029      	movs	r1, r5
 8003a04:	1e68      	subs	r0, r5, #1
 8003a06:	2300      	movs	r3, #0
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <FindRoute+0x190>)
 8003a0a:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] = 0; // Previous node in optimal path initialization undefined
 8003a0c:	4a58      	ldr	r2, [pc, #352]	; (8003b70 <FindRoute+0x194>)
 8003a0e:	5413      	strb	r3, [r2, r0]
 8003a10:	2516      	movs	r5, #22
 8003a12:	4345      	muls	r5, r0
 8003a14:	3502      	adds	r5, #2
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <FindRoute+0x198>)
 8003a18:	18ed      	adds	r5, r5, r3
 8003a1a:	002a      	movs	r2, r5

	/* Check adjacent neighbors first! */
	for (int col = 1; col <= 6; col++) {
 8003a1c:	2001      	movs	r0, #1
		if (array[sourceID - 1][col]
				&& ((array[sourceID - 1][col] >> 3) == desID)) {
 8003a1e:	4653      	mov	r3, sl
 8003a20:	b29c      	uxth	r4, r3
 8003a22:	e003      	b.n	8003a2c <FindRoute+0x50>
	for (int col = 1; col <= 6; col++) {
 8003a24:	3001      	adds	r0, #1
 8003a26:	3202      	adds	r2, #2
 8003a28:	2807      	cmp	r0, #7
 8003a2a:	d00f      	beq.n	8003a4c <FindRoute+0x70>
		if (array[sourceID - 1][col]
 8003a2c:	8813      	ldrh	r3, [r2, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f8      	beq.n	8003a24 <FindRoute+0x48>
				&& ((array[sourceID - 1][col] >> 3) == desID)) {
 8003a32:	08db      	lsrs	r3, r3, #3
 8003a34:	42a3      	cmp	r3, r4
 8003a36:	d1f5      	bne.n	8003a24 <FindRoute+0x48>
			routeDist[desID - 1] = 1;
 8003a38:	4b4c      	ldr	r3, [pc, #304]	; (8003b6c <FindRoute+0x190>)
 8003a3a:	4453      	add	r3, sl
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8003a42:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <FindRoute+0x18c>)
 8003a44:	4652      	mov	r2, sl
 8003a46:	701a      	strb	r2, [r3, #0]
			return col;
 8003a48:	b2c0      	uxtb	r0, r0
 8003a4a:	e085      	b.n	8003b58 <FindRoute+0x17c>
		}
	}

	/* Initialization */
	for (int i = 1; i <= N; i++) {
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <FindRoute+0x19c>)
 8003a4e:	781e      	ldrb	r6, [r3, #0]
 8003a50:	2e00      	cmp	r6, #0
 8003a52:	dd11      	ble.n	8003a78 <FindRoute+0x9c>
 8003a54:	2301      	movs	r3, #1
		if (i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
				{
			routeDist[i - 1] = 0xFF; // Unknown distance function from source to i
 8003a56:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] = 0;   // Previous node in optimal path from source
 8003a58:	4f45      	ldr	r7, [pc, #276]	; (8003b70 <FindRoute+0x194>)
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	46ac      	mov	ip, r5
 8003a5e:	e002      	b.n	8003a66 <FindRoute+0x8a>
	for (int i = 1; i <= N; i++) {
 8003a60:	3301      	adds	r3, #1
 8003a62:	42b3      	cmp	r3, r6
 8003a64:	dc07      	bgt.n	8003a76 <FindRoute+0x9a>
		if (i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a66:	4299      	cmp	r1, r3
 8003a68:	d0fa      	beq.n	8003a60 <FindRoute+0x84>
			routeDist[i - 1] = 0xFF; // Unknown distance function from source to i
 8003a6a:	1e5a      	subs	r2, r3, #1
 8003a6c:	4d3f      	ldr	r5, [pc, #252]	; (8003b6c <FindRoute+0x190>)
 8003a6e:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] = 0;   // Previous node in optimal path from source
 8003a70:	18ba      	adds	r2, r7, r2
 8003a72:	7010      	strb	r0, [r2, #0]
 8003a74:	e7f4      	b.n	8003a60 <FindRoute+0x84>
 8003a76:	4665      	mov	r5, ip
	uint8_t u = 0;
 8003a78:	2400      	movs	r4, #0
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <FindRoute+0x198>)
 8003a7c:	4698      	mov	r8, r3
 8003a7e:	230e      	movs	r3, #14
 8003a80:	4443      	add	r3, r8
 8003a82:	4656      	mov	r6, sl
 8003a84:	469b      	mov	fp, r3
 8003a86:	46a9      	mov	r9, r5
 8003a88:	e01d      	b.n	8003ac6 <FindRoute+0xea>
 8003a8a:	464d      	mov	r5, r9
 8003a8c:	46b2      	mov	sl, r6
		}
	}

	/* Algorithm */
	while (!QnotEmpty(Q)) {
		u = minArr(routeDist, Q) + 1;				// Source node in first case
 8003a8e:	0034      	movs	r4, r6
 8003a90:	e034      	b.n	8003afc <FindRoute+0x120>
 8003a92:	3102      	adds	r1, #2
			goto finishedRoute;
		} else
			Q[u - 1] = 1;									// Remove u from Q

		/* For each neighbor v where v is still in Q. */
		for (uint8_t n = 1; n <= 6; n++)      		// Check all module ports
 8003a94:	4281      	cmp	r1, r0
 8003a96:	d015      	beq.n	8003ac4 <FindRoute+0xe8>
				{
			if (array[u - 1][n])		// There's a neighbor v at this port n
 8003a98:	880b      	ldrh	r3, [r1, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f9      	beq.n	8003a92 <FindRoute+0xb6>
			{
				v = (array[u - 1][n] >> 3);
 8003a9e:	08db      	lsrs	r3, r3, #3
				if (!Q[v - 1])								// v is still in Q
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	5cd7      	ldrb	r7, [r2, r3]
 8003aa6:	2f00      	cmp	r7, #0
 8003aa8:	d1f3      	bne.n	8003a92 <FindRoute+0xb6>
				{
					alt = routeDist[u - 1] + 1;					// Add one hop
 8003aaa:	4f30      	ldr	r7, [pc, #192]	; (8003b6c <FindRoute+0x190>)
 8003aac:	5d7f      	ldrb	r7, [r7, r5]
 8003aae:	3701      	adds	r7, #1
 8003ab0:	b2ff      	uxtb	r7, r7
					if (alt < routeDist[v - 1]) // A shorter path to v has been found
 8003ab2:	4e2e      	ldr	r6, [pc, #184]	; (8003b6c <FindRoute+0x190>)
 8003ab4:	5cf6      	ldrb	r6, [r6, r3]
 8003ab6:	42be      	cmp	r6, r7
 8003ab8:	d9eb      	bls.n	8003a92 <FindRoute+0xb6>
							{
						routeDist[v - 1] = alt;
 8003aba:	4e2c      	ldr	r6, [pc, #176]	; (8003b6c <FindRoute+0x190>)
 8003abc:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] = u;
 8003abe:	4e2c      	ldr	r6, [pc, #176]	; (8003b70 <FindRoute+0x194>)
 8003ac0:	54f4      	strb	r4, [r6, r3]
 8003ac2:	e7e6      	b.n	8003a92 <FindRoute+0xb6>
 8003ac4:	4656      	mov	r6, sl
	while (!QnotEmpty(Q)) {
 8003ac6:	a801      	add	r0, sp, #4
 8003ac8:	f7ff f964 	bl	8002d94 <QnotEmpty>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d113      	bne.n	8003af8 <FindRoute+0x11c>
		u = minArr(routeDist, Q) + 1;				// Source node in first case
 8003ad0:	a901      	add	r1, sp, #4
 8003ad2:	4826      	ldr	r0, [pc, #152]	; (8003b6c <FindRoute+0x190>)
 8003ad4:	f7ff f940 	bl	8002d58 <minArr>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	b2c4      	uxtb	r4, r0
		if (u == desID) {
 8003adc:	42b4      	cmp	r4, r6
 8003ade:	d0d4      	beq.n	8003a8a <FindRoute+0xae>
			Q[u - 1] = 1;									// Remove u from Q
 8003ae0:	1e65      	subs	r5, r4, #1
 8003ae2:	ab01      	add	r3, sp, #4
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	555a      	strb	r2, [r3, r5]
 8003ae8:	2016      	movs	r0, #22
 8003aea:	4368      	muls	r0, r5
 8003aec:	1c81      	adds	r1, r0, #2
 8003aee:	4441      	add	r1, r8
 8003af0:	4458      	add	r0, fp
				if (!Q[v - 1])								// v is still in Q
 8003af2:	001a      	movs	r2, r3
 8003af4:	46b2      	mov	sl, r6
 8003af6:	e7cf      	b.n	8003a98 <FindRoute+0xbc>
 8003af8:	464d      	mov	r5, r9
 8003afa:	46b2      	mov	sl, r6
	}

	finishedRoute:

	/* Build the virtual route */
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <FindRoute+0x194>)
 8003afe:	191b      	adds	r3, r3, r4
 8003b00:	3b01      	subs	r3, #1
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	d00e      	beq.n	8003b28 <FindRoute+0x14c>
	{
		route[j++] = u;          			// Push the vertex onto the stack
 8003b0a:	4917      	ldr	r1, [pc, #92]	; (8003b68 <FindRoute+0x18c>)
 8003b0c:	468c      	mov	ip, r1
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b0e:	4e18      	ldr	r6, [pc, #96]	; (8003b70 <FindRoute+0x194>)
 8003b10:	e000      	b.n	8003b14 <FindRoute+0x138>
 8003b12:	000a      	movs	r2, r1
		route[j++] = u;          			// Push the vertex onto the stack
 8003b14:	1c58      	adds	r0, r3, #1
 8003b16:	4661      	mov	r1, ip
 8003b18:	54cc      	strb	r4, [r1, r3]
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b1a:	18b3      	adds	r3, r6, r2
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	7819      	ldrb	r1, [r3, #0]
 8003b20:	0014      	movs	r4, r2
		route[j++] = u;          			// Push the vertex onto the stack
 8003b22:	b2c3      	uxtb	r3, r0
	while (routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d1f4      	bne.n	8003b12 <FindRoute+0x136>
		u = routePrev[u - 1];           	// Traverse from target to source
	}

	/* Check which port leads to the correct module */
	for (int col = 1; col <= 6; col++) {
 8003b28:	2001      	movs	r0, #1
		if (array[sourceID - 1][col]
				&& ((array[sourceID - 1][col] >> 3)
						== route[routeDist[desID - 1] - 1])) {
 8003b2a:	490f      	ldr	r1, [pc, #60]	; (8003b68 <FindRoute+0x18c>)
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <FindRoute+0x190>)
 8003b2e:	4453      	add	r3, sl
 8003b30:	001f      	movs	r7, r3
 8003b32:	3f01      	subs	r7, #1
 8003b34:	e003      	b.n	8003b3e <FindRoute+0x162>
	for (int col = 1; col <= 6; col++) {
 8003b36:	3001      	adds	r0, #1
 8003b38:	3502      	adds	r5, #2
 8003b3a:	2807      	cmp	r0, #7
 8003b3c:	d00b      	beq.n	8003b56 <FindRoute+0x17a>
		if (array[sourceID - 1][col]
 8003b3e:	882b      	ldrh	r3, [r5, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f8      	beq.n	8003b36 <FindRoute+0x15a>
						== route[routeDist[desID - 1] - 1])) {
 8003b44:	783a      	ldrb	r2, [r7, #0]
 8003b46:	188a      	adds	r2, r1, r2
 8003b48:	3a01      	subs	r2, #1
				&& ((array[sourceID - 1][col] >> 3)
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d1f1      	bne.n	8003b36 <FindRoute+0x15a>
			return col;
 8003b52:	b2c0      	uxtb	r0, r0
 8003b54:	e000      	b.n	8003b58 <FindRoute+0x17c>
		}
	}

	return 0;
 8003b56:	2000      	movs	r0, #0
}
 8003b58:	b00f      	add	sp, #60	; 0x3c
 8003b5a:	bc3c      	pop	{r2, r3, r4, r5}
 8003b5c:	4690      	mov	r8, r2
 8003b5e:	4699      	mov	r9, r3
 8003b60:	46a2      	mov	sl, r4
 8003b62:	46ab      	mov	fp, r5
 8003b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	20006230 	.word	0x20006230
 8003b6c:	200008fc 	.word	0x200008fc
 8003b70:	20000918 	.word	0x20000918
 8003b74:	200002a0 	.word	0x200002a0
 8003b78:	2000001c 	.word	0x2000001c

08003b7c <remoteBootloaderUpdate>:
		uint8_t outport) {
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	0007      	movs	r7, r0
 8003b82:	000e      	movs	r6, r1
 8003b84:	9205      	str	r2, [sp, #20]
 8003b86:	001d      	movs	r5, r3
	myOutport = FindRoute(myID, dst);
 8003b88:	4b37      	ldr	r3, [pc, #220]	; (8003c68 <remoteBootloaderUpdate+0xec>)
 8003b8a:	7818      	ldrb	r0, [r3, #0]
 8003b8c:	f7ff ff26 	bl	80039dc <FindRoute>
 8003b90:	9004      	str	r0, [sp, #16]
	if (outport && dst == myID) { /* This is a 'via port' update and I'm the last module */
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	d020      	beq.n	8003bd8 <remoteBootloaderUpdate+0x5c>
 8003b96:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <remoteBootloaderUpdate+0xec>)
 8003b98:	781c      	ldrb	r4, [r3, #0]
 8003b9a:	42b4      	cmp	r4, r6
 8003b9c:	d05f      	beq.n	8003c5e <remoteBootloaderUpdate+0xe2>
	if (src == myID) {
 8003b9e:	42bc      	cmp	r4, r7
 8003ba0:	d034      	beq.n	8003c0c <remoteBootloaderUpdate+0x90>
	uint8_t myOutport = 0, lastModule = 0;
 8003ba2:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003ba4:	9805      	ldr	r0, [sp, #20]
 8003ba6:	f7ff fdeb 	bl	8003780 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003baa:	9804      	ldr	r0, [sp, #16]
 8003bac:	f7ff fde8 	bl	8003780 <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8003bb0:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <remoteBootloaderUpdate+0xec>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d046      	beq.n	8003c46 <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL,
 8003bb8:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <remoteBootloaderUpdate+0xec>)
 8003bba:	7819      	ldrb	r1, [r3, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9303      	str	r3, [sp, #12]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	9302      	str	r3, [sp, #8]
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	3303      	adds	r3, #3
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	000b      	movs	r3, r1
 8003bcc:	9a04      	ldr	r2, [sp, #16]
 8003bce:	9805      	ldr	r0, [sp, #20]
 8003bd0:	f005 fd94 	bl	80096fc <StartScastDMAStream>
}
 8003bd4:	b007      	add	sp, #28
 8003bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst)== 1)
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <remoteBootloaderUpdate+0xf0>)
 8003bda:	199b      	adds	r3, r3, r6
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	2a01      	cmp	r2, #1
 8003be2:	d010      	beq.n	8003c06 <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003be4:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <remoteBootloaderUpdate+0xf4>)
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	3b01      	subs	r3, #1
 8003bea:	781c      	ldrb	r4, [r3, #0]
	if (src == myID) {
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <remoteBootloaderUpdate+0xec>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	42bb      	cmp	r3, r7
 8003bf2:	d1d7      	bne.n	8003ba4 <remoteBootloaderUpdate+0x28>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003bf4:	f00a fcb0 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 8003bf8:	0007      	movs	r7, r0
			sprintf((char*) pcOutputString, pcRemoteBootloaderUpdateMessage,
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <remoteBootloaderUpdate+0xf8>)
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	0032      	movs	r2, r6
 8003c00:	f010 fe7a 	bl	80148f8 <siprintf>
 8003c04:	e00d      	b.n	8003c22 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <remoteBootloaderUpdate+0xec>)
 8003c08:	781c      	ldrb	r4, [r3, #0]
 8003c0a:	e7ef      	b.n	8003bec <remoteBootloaderUpdate+0x70>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003c0c:	f00a fca4 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 8003c10:	0007      	movs	r7, r0
	uint8_t myOutport = 0, lastModule = 0;
 8003c12:	2400      	movs	r4, #0
			sprintf((char*) pcOutputString,
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <remoteBootloaderUpdate+0xfc>)
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	002b      	movs	r3, r5
 8003c1a:	0032      	movs	r2, r6
 8003c1c:	0038      	movs	r0, r7
 8003c1e:	f010 fe6b 	bl	80148f8 <siprintf>
		strcat((char*) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <remoteBootloaderUpdate+0x100>)
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	0038      	movs	r0, r7
 8003c28:	f010 fe86 	bl	8014938 <strcat>
				strlen((char*) pcOutputString), cmd50ms);
 8003c2c:	0038      	movs	r0, r7
 8003c2e:	f7fc fa73 	bl	8000118 <strlen>
		writePxITMutex(inport, (char*) pcOutputString,
 8003c32:	b282      	uxth	r2, r0
 8003c34:	2332      	movs	r3, #50	; 0x32
 8003c36:	0039      	movs	r1, r7
 8003c38:	9805      	ldr	r0, [sp, #20]
 8003c3a:	f00a fa73 	bl	800e124 <writePxITMutex>
		Delay_ms(100);
 8003c3e:	2064      	movs	r0, #100	; 0x64
 8003c40:	f00c fba0 	bl	8010384 <HAL_Delay>
 8003c44:	e7ae      	b.n	8003ba4 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8003c46:	9804      	ldr	r0, [sp, #16]
 8003c48:	f00a fa26 	bl	800e098 <GetUart>
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	f00a fab9 	bl	800e1c4 <SwapUartPins>
 8003c52:	e7b1      	b.n	8003bb8 <remoteBootloaderUpdate+0x3c>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003c54:	f00a fc80 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 8003c58:	0007      	movs	r7, r0
		myOutport = outport;
 8003c5a:	9504      	str	r5, [sp, #16]
 8003c5c:	e7da      	b.n	8003c14 <remoteBootloaderUpdate+0x98>
	if (src == myID) {
 8003c5e:	42bc      	cmp	r4, r7
 8003c60:	d0f8      	beq.n	8003c54 <remoteBootloaderUpdate+0xd8>
		myOutport = outport;
 8003c62:	9504      	str	r5, [sp, #16]
 8003c64:	e79e      	b.n	8003ba4 <remoteBootloaderUpdate+0x28>
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	20000866 	.word	0x20000866
 8003c6c:	200008fc 	.word	0x200008fc
 8003c70:	20006230 	.word	0x20006230
 8003c74:	20000078 	.word	0x20000078
 8003c78:	2000007c 	.word	0x2000007c
 8003c7c:	20000080 	.word	0x20000080

08003c80 <DisplayTopology>:

/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port) {
 8003c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c82:	46d6      	mov	lr, sl
 8003c84:	464f      	mov	r7, r9
 8003c86:	4646      	mov	r6, r8
 8003c88:	b5c0      	push	{r6, r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	0005      	movs	r5, r0
 8003c8e:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 8003c90:	4c56      	ldr	r4, [pc, #344]	; (8003dec <DisplayTopology+0x16c>)
 8003c92:	4b57      	ldr	r3, [pc, #348]	; (8003df0 <DisplayTopology+0x170>)
 8003c94:	0022      	movs	r2, r4
 8003c96:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003c98:	c243      	stmia	r2!, {r0, r1, r6}
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	6011      	str	r1, [r2, #0]
 8003c9e:	889b      	ldrh	r3, [r3, #4]
 8003ca0:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	f7fc fa38 	bl	8000118 <strlen>
 8003ca8:	b282      	uxth	r2, r0
 8003caa:	2301      	movs	r3, #1
 8003cac:	425b      	negs	r3, r3
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	3333      	adds	r3, #51	; 0x33
 8003cb2:	0021      	movs	r1, r4
 8003cb4:	0028      	movs	r0, r5
 8003cb6:	f00a fa0d 	bl	800e0d4 <writePxMutex>
 8003cba:	2401      	movs	r4, #1
			HAL_MAX_DELAY);
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
		sprintf(pcUserMessage, "P%d\t", i);
 8003cbc:	4f4d      	ldr	r7, [pc, #308]	; (8003df4 <DisplayTopology+0x174>)
 8003cbe:	4d4b      	ldr	r5, [pc, #300]	; (8003dec <DisplayTopology+0x16c>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003cc0:	2601      	movs	r6, #1
 8003cc2:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 8003cc4:	0022      	movs	r2, r4
 8003cc6:	0039      	movs	r1, r7
 8003cc8:	0028      	movs	r0, r5
 8003cca:	f010 fe15 	bl	80148f8 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003cce:	0028      	movs	r0, r5
 8003cd0:	f7fc fa22 	bl	8000118 <strlen>
 8003cd4:	b282      	uxth	r2, r0
 8003cd6:	9600      	str	r6, [sp, #0]
 8003cd8:	2332      	movs	r3, #50	; 0x32
 8003cda:	0029      	movs	r1, r5
 8003cdc:	9803      	ldr	r0, [sp, #12]
 8003cde:	f00a f9f9 	bl	800e0d4 <writePxMutex>
 8003ce2:	3401      	adds	r4, #1
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8003ce4:	2c06      	cmp	r4, #6
 8003ce6:	d1ed      	bne.n	8003cc4 <DisplayTopology+0x44>
				HAL_MAX_DELAY);
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8003ce8:	2301      	movs	r3, #1
 8003cea:	425b      	negs	r3, r3
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	3333      	adds	r3, #51	; 0x33
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	4941      	ldr	r1, [pc, #260]	; (8003df8 <DisplayTopology+0x178>)
 8003cf4:	9803      	ldr	r0, [sp, #12]
 8003cf6:	f00a f9ed 	bl	800e0d4 <writePxMutex>

	/* Print each row */
	for (uint8_t row = 0; row < N; row++) {
 8003cfa:	4b40      	ldr	r3, [pc, #256]	; (8003dfc <DisplayTopology+0x17c>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d065      	beq.n	8003dce <DisplayTopology+0x14e>
 8003d02:	2600      	movs	r6, #0
		sprintf(pcUserMessage, "Module %d:\t", row + 1);
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003d04:	2701      	movs	r7, #1
 8003d06:	427f      	negs	r7, r7
				HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003d08:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <DisplayTopology+0x180>)
 8003d0a:	4699      	mov	r9, r3
 8003d0c:	230c      	movs	r3, #12
 8003d0e:	444b      	add	r3, r9
 8003d10:	469a      	mov	sl, r3
 8003d12:	e02a      	b.n	8003d6a <DisplayTopology+0xea>
		/* Connections */
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t", 0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col] >> 3),
 8003d14:	2307      	movs	r3, #7
 8003d16:	4013      	ands	r3, r2
 8003d18:	08d2      	lsrs	r2, r2, #3
 8003d1a:	493a      	ldr	r1, [pc, #232]	; (8003e04 <DisplayTopology+0x184>)
 8003d1c:	4833      	ldr	r0, [pc, #204]	; (8003dec <DisplayTopology+0x16c>)
 8003d1e:	f010 fdeb 	bl	80148f8 <siprintf>
						(array[row][col] & 0x07));
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003d22:	4d32      	ldr	r5, [pc, #200]	; (8003dec <DisplayTopology+0x16c>)
 8003d24:	0028      	movs	r0, r5
 8003d26:	f7fc f9f7 	bl	8000118 <strlen>
 8003d2a:	b282      	uxth	r2, r0
 8003d2c:	9700      	str	r7, [sp, #0]
 8003d2e:	2332      	movs	r3, #50	; 0x32
 8003d30:	0029      	movs	r1, r5
 8003d32:	9803      	ldr	r0, [sp, #12]
 8003d34:	f00a f9ce 	bl	800e0d4 <writePxMutex>
 8003d38:	3402      	adds	r4, #2
		for (uint8_t col = 1; col <= NumOfPorts; col++) {
 8003d3a:	42b4      	cmp	r4, r6
 8003d3c:	d007      	beq.n	8003d4e <DisplayTopology+0xce>
			if (!array[row][col])
 8003d3e:	8822      	ldrh	r2, [r4, #0]
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	d1e7      	bne.n	8003d14 <DisplayTopology+0x94>
				sprintf(pcUserMessage, "%d\t", 0);
 8003d44:	4930      	ldr	r1, [pc, #192]	; (8003e08 <DisplayTopology+0x188>)
 8003d46:	4829      	ldr	r0, [pc, #164]	; (8003dec <DisplayTopology+0x16c>)
 8003d48:	f010 fdd6 	bl	80148f8 <siprintf>
 8003d4c:	e7e9      	b.n	8003d22 <DisplayTopology+0xa2>
 8003d4e:	4646      	mov	r6, r8
					HAL_MAX_DELAY);
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 8003d50:	9700      	str	r7, [sp, #0]
 8003d52:	2332      	movs	r3, #50	; 0x32
 8003d54:	2202      	movs	r2, #2
 8003d56:	492d      	ldr	r1, [pc, #180]	; (8003e0c <DisplayTopology+0x18c>)
 8003d58:	9803      	ldr	r0, [sp, #12]
 8003d5a:	f00a f9bb 	bl	800e0d4 <writePxMutex>
	for (uint8_t row = 0; row < N; row++) {
 8003d5e:	3601      	adds	r6, #1
 8003d60:	b2f6      	uxtb	r6, r6
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <DisplayTopology+0x17c>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	42b3      	cmp	r3, r6
 8003d68:	d931      	bls.n	8003dce <DisplayTopology+0x14e>
		sprintf(pcUserMessage, "Module %d:\t", row + 1);
 8003d6a:	1c72      	adds	r2, r6, #1
 8003d6c:	4c1f      	ldr	r4, [pc, #124]	; (8003dec <DisplayTopology+0x16c>)
 8003d6e:	4928      	ldr	r1, [pc, #160]	; (8003e10 <DisplayTopology+0x190>)
 8003d70:	0020      	movs	r0, r4
 8003d72:	f010 fdc1 	bl	80148f8 <siprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003d76:	0020      	movs	r0, r4
 8003d78:	f7fc f9ce 	bl	8000118 <strlen>
 8003d7c:	b282      	uxth	r2, r0
 8003d7e:	9700      	str	r7, [sp, #0]
 8003d80:	2332      	movs	r3, #50	; 0x32
 8003d82:	0021      	movs	r1, r4
 8003d84:	9803      	ldr	r0, [sp, #12]
 8003d86:	f00a f9a5 	bl	800e0d4 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8003d8a:	2516      	movs	r5, #22
 8003d8c:	4375      	muls	r5, r6
 8003d8e:	464b      	mov	r3, r9
 8003d90:	5aeb      	ldrh	r3, [r5, r3]
 8003d92:	0059      	lsls	r1, r3, #1
 8003d94:	18c9      	adds	r1, r1, r3
 8003d96:	0049      	lsls	r1, r1, #1
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <DisplayTopology+0x194>)
 8003d9a:	18c9      	adds	r1, r1, r3
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	0020      	movs	r0, r4
 8003da0:	f010 fdff 	bl	80149a2 <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8003da4:	9700      	str	r7, [sp, #0]
 8003da6:	2332      	movs	r3, #50	; 0x32
 8003da8:	2205      	movs	r2, #5
 8003daa:	0021      	movs	r1, r4
 8003dac:	9c03      	ldr	r4, [sp, #12]
 8003dae:	0020      	movs	r0, r4
 8003db0:	f00a f990 	bl	800e0d4 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8003db4:	9700      	str	r7, [sp, #0]
 8003db6:	2332      	movs	r3, #50	; 0x32
 8003db8:	2201      	movs	r2, #1
 8003dba:	4917      	ldr	r1, [pc, #92]	; (8003e18 <DisplayTopology+0x198>)
 8003dbc:	0020      	movs	r0, r4
 8003dbe:	f00a f989 	bl	800e0d4 <writePxMutex>
 8003dc2:	1cac      	adds	r4, r5, #2
 8003dc4:	444c      	add	r4, r9
 8003dc6:	4455      	add	r5, sl
				sprintf(pcUserMessage, "%d\t", 0);
 8003dc8:	46b0      	mov	r8, r6
 8003dca:	002e      	movs	r6, r5
 8003dcc:	e7b7      	b.n	8003d3e <DisplayTopology+0xbe>
	}

	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8003dce:	2301      	movs	r3, #1
 8003dd0:	425b      	negs	r3, r3
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	3333      	adds	r3, #51	; 0x33
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	4910      	ldr	r1, [pc, #64]	; (8003e1c <DisplayTopology+0x19c>)
 8003dda:	9803      	ldr	r0, [sp, #12]
 8003ddc:	f00a f97a 	bl	800e0d4 <writePxMutex>
}
 8003de0:	b004      	add	sp, #16
 8003de2:	bc1c      	pop	{r2, r3, r4}
 8003de4:	4690      	mov	r8, r2
 8003de6:	4699      	mov	r9, r3
 8003de8:	46a2      	mov	sl, r4
 8003dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dec:	20000890 	.word	0x20000890
 8003df0:	08017b2c 	.word	0x08017b2c
 8003df4:	08017b40 	.word	0x08017b40
 8003df8:	08018fa8 	.word	0x08018fa8
 8003dfc:	2000001c 	.word	0x2000001c
 8003e00:	200002a0 	.word	0x200002a0
 8003e04:	08017b58 	.word	0x08017b58
 8003e08:	08017b54 	.word	0x08017b54
 8003e0c:	080179d4 	.word	0x080179d4
 8003e10:	08017b48 	.word	0x08017b48
 8003e14:	08017b94 	.word	0x08017b94
 8003e18:	08017b3c 	.word	0x08017b3c
 8003e1c:	0801a67c 	.word	0x0801a67c

08003e20 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port) {
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	46c6      	mov	lr, r8
 8003e24:	b500      	push	{lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	0005      	movs	r5, r0
 8003e2a:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 8003e2c:	4c30      	ldr	r4, [pc, #192]	; (8003ef0 <DisplayPortsDir+0xd0>)
 8003e2e:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <DisplayPortsDir+0xd4>)
 8003e30:	0022      	movs	r2, r4
 8003e32:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e34:	c243      	stmia	r2!, {r0, r1, r6}
 8003e36:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e38:	c243      	stmia	r2!, {r0, r1, r6}
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f7fc f96a 	bl	8000118 <strlen>
 8003e44:	b282      	uxth	r2, r0
 8003e46:	2301      	movs	r3, #1
 8003e48:	425b      	negs	r3, r3
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	3333      	adds	r3, #51	; 0x33
 8003e4e:	0021      	movs	r1, r4
 8003e50:	0028      	movs	r0, r5
 8003e52:	f00a f93f 	bl	800e0d4 <writePxMutex>
			HAL_MAX_DELAY);

	for (uint8_t i = 1; i <= N; i++) {
 8003e56:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <DisplayPortsDir+0xd8>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4690      	mov	r8, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d02c      	beq.n	8003ebc <DisplayPortsDir+0x9c>
		for (uint8_t p = 1; p <= MaxNumOfPorts; p++) {
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e62:	4e26      	ldr	r6, [pc, #152]	; (8003efc <DisplayPortsDir+0xdc>)
 8003e64:	e025      	b.n	8003eb2 <DisplayPortsDir+0x92>
 8003e66:	0023      	movs	r3, r4
		for (uint8_t p = 1; p <= MaxNumOfPorts; p++) {
 8003e68:	2c0a      	cmp	r4, #10
 8003e6a:	d01a      	beq.n	8003ea2 <DisplayPortsDir+0x82>
 8003e6c:	1c5c      	adds	r4, r3, #1
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e6e:	5ba9      	ldrh	r1, [r5, r6]
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	0212      	lsls	r2, r2, #8
 8003e74:	411a      	asrs	r2, r3
 8003e76:	420a      	tst	r2, r1
 8003e78:	d0f5      	beq.n	8003e66 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 8003e7a:	4f1d      	ldr	r7, [pc, #116]	; (8003ef0 <DisplayPortsDir+0xd0>)
 8003e7c:	0023      	movs	r3, r4
 8003e7e:	4642      	mov	r2, r8
 8003e80:	491f      	ldr	r1, [pc, #124]	; (8003f00 <DisplayPortsDir+0xe0>)
 8003e82:	0038      	movs	r0, r7
 8003e84:	f010 fd38 	bl	80148f8 <siprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage),
 8003e88:	0038      	movs	r0, r7
 8003e8a:	f7fc f945 	bl	8000118 <strlen>
 8003e8e:	b282      	uxth	r2, r0
 8003e90:	2301      	movs	r3, #1
 8003e92:	425b      	negs	r3, r3
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	3333      	adds	r3, #51	; 0x33
 8003e98:	0039      	movs	r1, r7
 8003e9a:	9803      	ldr	r0, [sp, #12]
 8003e9c:	f00a f91a 	bl	800e0d4 <writePxMutex>
 8003ea0:	e7e1      	b.n	8003e66 <DisplayPortsDir+0x46>
	for (uint8_t i = 1; i <= N; i++) {
 8003ea2:	4643      	mov	r3, r8
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <DisplayPortsDir+0xd8>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	4543      	cmp	r3, r8
 8003eb0:	d304      	bcc.n	8003ebc <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port) {
 8003eb2:	2300      	movs	r3, #0
			if ((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	1e55      	subs	r5, r2, #1
 8003eb8:	006d      	lsls	r5, r5, #1
 8003eba:	e7d7      	b.n	8003e6c <DisplayPortsDir+0x4c>
						cmd50ms, HAL_MAX_DELAY);
			}
		}
	}

	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 8003ebc:	4c0c      	ldr	r4, [pc, #48]	; (8003ef0 <DisplayPortsDir+0xd0>)
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <DisplayPortsDir+0xe4>)
 8003ec0:	0022      	movs	r2, r4
 8003ec2:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ec4:	c223      	stmia	r2!, {r0, r1, r5}
 8003ec6:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ec8:	c223      	stmia	r2!, {r0, r1, r5}
 8003eca:	cb03      	ldmia	r3!, {r0, r1}
 8003ecc:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms,
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f7fc f922 	bl	8000118 <strlen>
 8003ed4:	b282      	uxth	r2, r0
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	425b      	negs	r3, r3
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	3333      	adds	r3, #51	; 0x33
 8003ede:	0021      	movs	r1, r4
 8003ee0:	9803      	ldr	r0, [sp, #12]
 8003ee2:	f00a f8f7 	bl	800e0d4 <writePxMutex>
			HAL_MAX_DELAY);
}
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bc04      	pop	{r2}
 8003eea:	4690      	mov	r8, r2
 8003eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	20000890 	.word	0x20000890
 8003ef4:	08017adc 	.word	0x08017adc
 8003ef8:	2000001c 	.word	0x2000001c
 8003efc:	200065e4 	.word	0x200065e4
 8003f00:	08017af8 	.word	0x08017af8
 8003f04:	08017b0c 	.word	0x08017b0c

08003f08 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port) {
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	46d6      	mov	lr, sl
 8003f0c:	b500      	push	{lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp = 0;

	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003f12:	f00a fb21 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 8003f16:	0004      	movs	r4, r0

	strcpy((char*) pcOutputString, "");
 8003f18:	2300      	movs	r3, #0
 8003f1a:	7003      	strb	r3, [r0, #0]

	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8003f1c:	4b8d      	ldr	r3, [pc, #564]	; (8004154 <DisplayModuleStatus+0x24c>)
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	4d8d      	ldr	r5, [pc, #564]	; (8004158 <DisplayModuleStatus+0x250>)
 8003f22:	498e      	ldr	r1, [pc, #568]	; (800415c <DisplayModuleStatus+0x254>)
 8003f24:	0028      	movs	r0, r5
 8003f26:	f010 fce7 	bl	80148f8 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003f2a:	0029      	movs	r1, r5
 8003f2c:	0020      	movs	r0, r4
 8003f2e:	f010 fd03 	bl	8014938 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 8003f32:	4b8b      	ldr	r3, [pc, #556]	; (8004160 <DisplayModuleStatus+0x258>)
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	498b      	ldr	r1, [pc, #556]	; (8004164 <DisplayModuleStatus+0x25c>)
 8003f38:	0028      	movs	r0, r5
 8003f3a:	f010 fcdd 	bl	80148f8 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003f3e:	0029      	movs	r1, r5
 8003f40:	0020      	movs	r0, r4
 8003f42:	f010 fcf9 	bl	8014938 <strcat>

	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor,
 8003f46:	2304      	movs	r3, #4
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	3b02      	subs	r3, #2
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4986      	ldr	r1, [pc, #536]	; (8004168 <DisplayModuleStatus+0x260>)
 8003f50:	0028      	movs	r0, r5
 8003f52:	f010 fcd1 	bl	80148f8 <siprintf>
			_firmMinor, _firmPatch);
	strcat((char*) pcOutputString, pcUserMessage);
 8003f56:	0029      	movs	r1, r5
 8003f58:	0020      	movs	r0, r4
 8003f5a:	f010 fced 	bl	8014938 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 8003f5e:	4a83      	ldr	r2, [pc, #524]	; (800416c <DisplayModuleStatus+0x264>)
 8003f60:	4983      	ldr	r1, [pc, #524]	; (8004170 <DisplayModuleStatus+0x268>)
 8003f62:	0028      	movs	r0, r5
 8003f64:	f010 fcc8 	bl	80148f8 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003f68:	0029      	movs	r1, r5
 8003f6a:	0020      	movs	r0, r4
 8003f6c:	f010 fce4 	bl	8014938 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 8003f70:	4a80      	ldr	r2, [pc, #512]	; (8004174 <DisplayModuleStatus+0x26c>)
 8003f72:	4981      	ldr	r1, [pc, #516]	; (8004178 <DisplayModuleStatus+0x270>)
 8003f74:	0028      	movs	r0, r5
 8003f76:	f010 fcbf 	bl	80148f8 <siprintf>
	strcat((char*) pcOutputString, pcUserMessage);
 8003f7a:	0029      	movs	r1, r5
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	f010 fcdb 	bl	8014938 <strcat>

	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 8003f82:	4b7e      	ldr	r3, [pc, #504]	; (800417c <DisplayModuleStatus+0x274>)
 8003f84:	002a      	movs	r2, r5
 8003f86:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f88:	c243      	stmia	r2!, {r0, r1, r6}
 8003f8a:	6819      	ldr	r1, [r3, #0]
 8003f8c:	6011      	str	r1, [r2, #0]
 8003f8e:	8899      	ldrh	r1, [r3, #4]
 8003f90:	8091      	strh	r1, [r2, #4]
 8003f92:	799b      	ldrb	r3, [r3, #6]
 8003f94:	7193      	strb	r3, [r2, #6]
	strcat((char*) pcOutputString, pcUserMessage);
 8003f96:	0029      	movs	r1, r5
 8003f98:	0020      	movs	r0, r4
 8003f9a:	f010 fccd 	bl	8014938 <strcat>
 8003f9e:	2601      	movs	r6, #1
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
		sprintf(pcUserMessage, "P%d: ", i);
 8003fa0:	4d6d      	ldr	r5, [pc, #436]	; (8004158 <DisplayModuleStatus+0x250>)
		strcat((char*) pcOutputString, pcUserMessage);
		switch (portStatus[i]) {
 8003fa2:	4b77      	ldr	r3, [pc, #476]	; (8004180 <DisplayModuleStatus+0x278>)
 8003fa4:	469a      	mov	sl, r3
 8003fa6:	e00e      	b.n	8003fc6 <DisplayModuleStatus+0xbe>
		case FREE:
			sprintf(pcUserMessage, "Free\n\r");
 8003fa8:	4b6b      	ldr	r3, [pc, #428]	; (8004158 <DisplayModuleStatus+0x250>)
 8003faa:	4a76      	ldr	r2, [pc, #472]	; (8004184 <DisplayModuleStatus+0x27c>)
 8003fac:	6811      	ldr	r1, [r2, #0]
 8003fae:	6019      	str	r1, [r3, #0]
 8003fb0:	8891      	ldrh	r1, [r2, #4]
 8003fb2:	8099      	strh	r1, [r3, #4]
 8003fb4:	7992      	ldrb	r2, [r2, #6]
 8003fb6:	719a      	strb	r2, [r3, #6]
			sprintf(pcUserMessage, "Connected to a button/switch\n\r");
			break;
		default:
			break;
		}
		strcat((char*) pcOutputString, pcUserMessage);
 8003fb8:	4967      	ldr	r1, [pc, #412]	; (8004158 <DisplayModuleStatus+0x250>)
 8003fba:	0020      	movs	r0, r4
 8003fbc:	f010 fcbc 	bl	8014938 <strcat>
 8003fc0:	3601      	adds	r6, #1
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8003fc2:	2e06      	cmp	r6, #6
 8003fc4:	d039      	beq.n	800403a <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage, "P%d: ", i);
 8003fc6:	0032      	movs	r2, r6
 8003fc8:	496f      	ldr	r1, [pc, #444]	; (8004188 <DisplayModuleStatus+0x280>)
 8003fca:	0028      	movs	r0, r5
 8003fcc:	f010 fc94 	bl	80148f8 <siprintf>
		strcat((char*) pcOutputString, pcUserMessage);
 8003fd0:	0029      	movs	r1, r5
 8003fd2:	0020      	movs	r0, r4
 8003fd4:	f010 fcb0 	bl	8014938 <strcat>
		switch (portStatus[i]) {
 8003fd8:	4653      	mov	r3, sl
 8003fda:	5cf3      	ldrb	r3, [r6, r3]
 8003fdc:	2b04      	cmp	r3, #4
 8003fde:	d8eb      	bhi.n	8003fb8 <DisplayModuleStatus+0xb0>
 8003fe0:	4653      	mov	r3, sl
 8003fe2:	5cf3      	ldrb	r3, [r6, r3]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a69      	ldr	r2, [pc, #420]	; (800418c <DisplayModuleStatus+0x284>)
 8003fe8:	58d3      	ldr	r3, [r2, r3]
 8003fea:	469f      	mov	pc, r3
			sprintf(pcUserMessage, "Receiving messages\n\r");
 8003fec:	495a      	ldr	r1, [pc, #360]	; (8004158 <DisplayModuleStatus+0x250>)
 8003fee:	4b68      	ldr	r3, [pc, #416]	; (8004190 <DisplayModuleStatus+0x288>)
 8003ff0:	000a      	movs	r2, r1
 8003ff2:	cb83      	ldmia	r3!, {r0, r1, r7}
 8003ff4:	c283      	stmia	r2!, {r0, r1, r7}
 8003ff6:	cb03      	ldmia	r3!, {r0, r1}
 8003ff8:	c203      	stmia	r2!, {r0, r1}
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	7013      	strb	r3, [r2, #0]
			break;
 8003ffe:	e7db      	b.n	8003fb8 <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage, "Streaming\n\r");
 8004000:	4a55      	ldr	r2, [pc, #340]	; (8004158 <DisplayModuleStatus+0x250>)
 8004002:	4b64      	ldr	r3, [pc, #400]	; (8004194 <DisplayModuleStatus+0x28c>)
 8004004:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004006:	c283      	stmia	r2!, {r0, r1, r7}
			break;
 8004008:	e7d6      	b.n	8003fb8 <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage, "Receiving user commands\n\r");
 800400a:	4953      	ldr	r1, [pc, #332]	; (8004158 <DisplayModuleStatus+0x250>)
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <DisplayModuleStatus+0x290>)
 800400e:	000a      	movs	r2, r1
 8004010:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004012:	c283      	stmia	r2!, {r0, r1, r7}
 8004014:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004016:	c283      	stmia	r2!, {r0, r1, r7}
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	8013      	strh	r3, [r2, #0]
			break;
 800401c:	e7cc      	b.n	8003fb8 <DisplayModuleStatus+0xb0>
			sprintf(pcUserMessage, "Connected to a button/switch\n\r");
 800401e:	494e      	ldr	r1, [pc, #312]	; (8004158 <DisplayModuleStatus+0x250>)
 8004020:	4b5e      	ldr	r3, [pc, #376]	; (800419c <DisplayModuleStatus+0x294>)
 8004022:	000a      	movs	r2, r1
 8004024:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004026:	c283      	stmia	r2!, {r0, r1, r7}
 8004028:	cb83      	ldmia	r3!, {r0, r1, r7}
 800402a:	c283      	stmia	r2!, {r0, r1, r7}
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	8899      	ldrh	r1, [r3, #4]
 8004032:	8091      	strh	r1, [r2, #4]
 8004034:	799b      	ldrb	r3, [r3, #6]
 8004036:	7193      	strb	r3, [r2, #6]
			break;
 8004038:	e7be      	b.n	8003fb8 <DisplayModuleStatus+0xb0>
	}

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 800403a:	4947      	ldr	r1, [pc, #284]	; (8004158 <DisplayModuleStatus+0x250>)
 800403c:	4b58      	ldr	r3, [pc, #352]	; (80041a0 <DisplayModuleStatus+0x298>)
 800403e:	000a      	movs	r2, r1
 8004040:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004042:	c261      	stmia	r2!, {r0, r5, r6}
 8004044:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004046:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char*) pcOutputString, pcUserMessage);
 8004048:	0020      	movs	r0, r4
 800404a:	f010 fc75 	bl	8014938 <strcat>
 800404e:	4e55      	ldr	r6, [pc, #340]	; (80041a4 <DisplayModuleStatus+0x29c>)
 8004050:	2701      	movs	r7, #1
 8004052:	e00d      	b.n	8004070 <DisplayModuleStatus+0x168>
	for (char i = 1; i <= 6; i++) {
		if (streamDMA[i - 1].Instance == 0) {
			sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 8004054:	4d40      	ldr	r5, [pc, #256]	; (8004158 <DisplayModuleStatus+0x250>)
 8004056:	003a      	movs	r2, r7
 8004058:	4953      	ldr	r1, [pc, #332]	; (80041a8 <DisplayModuleStatus+0x2a0>)
 800405a:	0028      	movs	r0, r5
 800405c:	f010 fc4c 	bl	80148f8 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8004060:	0029      	movs	r1, r5
 8004062:	0020      	movs	r0, r4
 8004064:	f010 fc68 	bl	8014938 <strcat>
 8004068:	3701      	adds	r7, #1
 800406a:	3638      	adds	r6, #56	; 0x38
	for (char i = 1; i <= 6; i++) {
 800406c:	2f07      	cmp	r7, #7
 800406e:	d018      	beq.n	80040a2 <DisplayModuleStatus+0x19a>
		if (streamDMA[i - 1].Instance == 0) {
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ee      	beq.n	8004054 <DisplayModuleStatus+0x14c>
		} else {
			sprintf(pcUserMessage,
					"\n\rStreaming DMA %d is streaming from P%d to P%d", i,
					GetPort(streamDMA[i - 1].Parent),
 8004076:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004078:	f007 fb9c 	bl	800b7b4 <GetPort>
 800407c:	0005      	movs	r5, r0
					GetPort(dmaStreamDst[i - 1]));
 800407e:	00bb      	lsls	r3, r7, #2
 8004080:	3b04      	subs	r3, #4
 8004082:	4a4a      	ldr	r2, [pc, #296]	; (80041ac <DisplayModuleStatus+0x2a4>)
 8004084:	58d0      	ldr	r0, [r2, r3]
 8004086:	f007 fb95 	bl	800b7b4 <GetPort>
			sprintf(pcUserMessage,
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	002b      	movs	r3, r5
 800408e:	003a      	movs	r2, r7
 8004090:	4947      	ldr	r1, [pc, #284]	; (80041b0 <DisplayModuleStatus+0x2a8>)
 8004092:	4831      	ldr	r0, [pc, #196]	; (8004158 <DisplayModuleStatus+0x250>)
 8004094:	f010 fc30 	bl	80148f8 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 8004098:	492f      	ldr	r1, [pc, #188]	; (8004158 <DisplayModuleStatus+0x250>)
 800409a:	0020      	movs	r0, r4
 800409c:	f010 fc4c 	bl	8014938 <strcat>
 80040a0:	e7e2      	b.n	8004068 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char*) pcOutputString, "\n\r");
 80040a2:	0020      	movs	r0, r4
 80040a4:	f7fc f838 	bl	8000118 <strlen>
 80040a8:	1820      	adds	r0, r4, r0
 80040aa:	2203      	movs	r2, #3
 80040ac:	4941      	ldr	r1, [pc, #260]	; (80041b4 <DisplayModuleStatus+0x2ac>)
 80040ae:	f00f fcbc 	bl	8013a2a <memcpy>

	/* Ports direction */
	strcat((char*) pcOutputString, "\n\rThese ports are reversed: ");
 80040b2:	0020      	movs	r0, r4
 80040b4:	f7fc f830 	bl	8000118 <strlen>
 80040b8:	1820      	adds	r0, r4, r0
 80040ba:	221d      	movs	r2, #29
 80040bc:	493e      	ldr	r1, [pc, #248]	; (80041b8 <DisplayModuleStatus+0x2b0>)
 80040be:	f00f fcb4 	bl	8013a2a <memcpy>
	temp = strlen((char*) pcOutputString);
 80040c2:	0020      	movs	r0, r4
 80040c4:	f7fc f828 	bl	8000118 <strlen>
 80040c8:	4682      	mov	sl, r0
 80040ca:	2200      	movs	r2, #0
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
		if ((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040cc:	4e3b      	ldr	r6, [pc, #236]	; (80041bc <DisplayModuleStatus+0x2b4>)
 80040ce:	4f21      	ldr	r7, [pc, #132]	; (8004154 <DisplayModuleStatus+0x24c>)
 80040d0:	e002      	b.n	80040d8 <DisplayModuleStatus+0x1d0>
 80040d2:	002a      	movs	r2, r5
	for (uint8_t p = 1; p <= NumOfPorts; p++) {
 80040d4:	2d05      	cmp	r5, #5
 80040d6:	d013      	beq.n	8004100 <DisplayModuleStatus+0x1f8>
 80040d8:	1c55      	adds	r5, r2, #1
		if ((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80040da:	783b      	ldrb	r3, [r7, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	5b99      	ldrh	r1, [r3, r6]
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	4113      	asrs	r3, r2
 80040e8:	420b      	tst	r3, r1
 80040ea:	d0f2      	beq.n	80040d2 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage, "P%d ", p);
 80040ec:	002a      	movs	r2, r5
 80040ee:	4934      	ldr	r1, [pc, #208]	; (80041c0 <DisplayModuleStatus+0x2b8>)
 80040f0:	4819      	ldr	r0, [pc, #100]	; (8004158 <DisplayModuleStatus+0x250>)
 80040f2:	f010 fc01 	bl	80148f8 <siprintf>
			strcat((char*) pcOutputString, pcUserMessage);
 80040f6:	4918      	ldr	r1, [pc, #96]	; (8004158 <DisplayModuleStatus+0x250>)
 80040f8:	0020      	movs	r0, r4
 80040fa:	f010 fc1d 	bl	8014938 <strcat>
 80040fe:	e7e8      	b.n	80040d2 <DisplayModuleStatus+0x1ca>
		}
	}
	if (temp == strlen((char*) pcOutputString)) { /* All ports are normal */
 8004100:	0020      	movs	r0, r4
 8004102:	f7fc f809 	bl	8000118 <strlen>
 8004106:	4653      	mov	r3, sl
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	4298      	cmp	r0, r3
 800410e:	d00e      	beq.n	800412e <DisplayModuleStatus+0x226>
		strcat((char*) pcOutputString, "None");
	}
	strcat((char*) pcOutputString, "\n\r");
 8004110:	0020      	movs	r0, r4
 8004112:	f7fc f801 	bl	8000118 <strlen>
 8004116:	1820      	adds	r0, r4, r0
 8004118:	2203      	movs	r2, #3
 800411a:	4926      	ldr	r1, [pc, #152]	; (80041b4 <DisplayModuleStatus+0x2ac>)
 800411c:	f00f fc85 	bl	8013a2a <memcpy>

	/* Display output */
	if (port)
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <DisplayModuleStatus+0x232>
		writePxMutex(port, (char*) pcOutputString,
				strlen((char*) pcOutputString), cmd50ms, HAL_MAX_DELAY);

}
 8004126:	b004      	add	sp, #16
 8004128:	bc04      	pop	{r2}
 800412a:	4692      	mov	sl, r2
 800412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char*) pcOutputString, "None");
 800412e:	1820      	adds	r0, r4, r0
 8004130:	2205      	movs	r2, #5
 8004132:	4924      	ldr	r1, [pc, #144]	; (80041c4 <DisplayModuleStatus+0x2bc>)
 8004134:	f00f fc79 	bl	8013a2a <memcpy>
 8004138:	e7ea      	b.n	8004110 <DisplayModuleStatus+0x208>
				strlen((char*) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 800413a:	0020      	movs	r0, r4
 800413c:	f7fb ffec 	bl	8000118 <strlen>
		writePxMutex(port, (char*) pcOutputString,
 8004140:	b282      	uxth	r2, r0
 8004142:	2301      	movs	r3, #1
 8004144:	425b      	negs	r3, r3
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	3333      	adds	r3, #51	; 0x33
 800414a:	0021      	movs	r1, r4
 800414c:	9803      	ldr	r0, [sp, #12]
 800414e:	f009 ffc1 	bl	800e0d4 <writePxMutex>
}
 8004152:	e7e8      	b.n	8004126 <DisplayModuleStatus+0x21e>
 8004154:	20000866 	.word	0x20000866
 8004158:	20000890 	.word	0x20000890
 800415c:	08017920 	.word	0x08017920
 8004160:	2000029f 	.word	0x2000029f
 8004164:	0801793c 	.word	0x0801793c
 8004168:	08017958 	.word	0x08017958
 800416c:	08017978 	.word	0x08017978
 8004170:	08017984 	.word	0x08017984
 8004174:	0801799c 	.word	0x0801799c
 8004178:	080179a8 	.word	0x080179a8
 800417c:	080179c4 	.word	0x080179c4
 8004180:	200008e0 	.word	0x200008e0
 8004184:	080179e0 	.word	0x080179e0
 8004188:	080179d8 	.word	0x080179d8
 800418c:	080178fc 	.word	0x080178fc
 8004190:	080179e8 	.word	0x080179e8
 8004194:	08017a00 	.word	0x08017a00
 8004198:	08017a0c 	.word	0x08017a0c
 800419c:	08017a28 	.word	0x08017a28
 80041a0:	08017a48 	.word	0x08017a48
 80041a4:	20001128 	.word	0x20001128
 80041a8:	08017a60 	.word	0x08017a60
 80041ac:	20000c4c 	.word	0x20000c4c
 80041b0:	08017a7c 	.word	0x08017a7c
 80041b4:	080179d4 	.word	0x080179d4
 80041b8:	08017aac 	.word	0x08017aac
 80041bc:	200065e4 	.word	0x200065e4
 80041c0:	08017acc 	.word	0x08017acc
 80041c4:	08017ad4 	.word	0x08017ad4

080041c8 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string) {
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ca:	46c6      	mov	lr, r8
 80041cc:	b500      	push	{lr}
 80041ce:	0005      	movs	r5, r0
	uint8_t id = 0, i = 0;

	if (!strcmp(string, "me")) /* Check keywords */
 80041d0:	4929      	ldr	r1, [pc, #164]	; (8004278 <GetID+0xb0>)
 80041d2:	f7fb ff97 	bl	8000104 <strcmp>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d010      	beq.n	80041fc <GetID+0x34>
		return myID;
	else if (!strcmp(string, "all"))
 80041da:	4928      	ldr	r1, [pc, #160]	; (800427c <GetID+0xb4>)
 80041dc:	0028      	movs	r0, r5
 80041de:	f7fb ff91 	bl	8000104 <strcmp>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d045      	beq.n	8004272 <GetID+0xaa>
		return BOS_BROADCAST;
	else if (string[0] == '#') /* Check IDs */
 80041e6:	782b      	ldrb	r3, [r5, #0]
 80041e8:	4698      	mov	r8, r3
 80041ea:	2b23      	cmp	r3, #35	; 0x23
 80041ec:	d00b      	beq.n	8004206 <GetID+0x3e>
		else
			return BOS_ERR_WrongID;
	} else /* Check alias */
	{
		/* Check module alias */
		for (i = 0; i < N; i++) {
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <GetID+0xb8>)
 80041f0:	781f      	ldrb	r7, [r3, #0]
 80041f2:	2f00      	cmp	r7, #0
 80041f4:	d02a      	beq.n	800424c <GetID+0x84>
 80041f6:	4e23      	ldr	r6, [pc, #140]	; (8004284 <GetID+0xbc>)
 80041f8:	2400      	movs	r4, #0
 80041fa:	e01c      	b.n	8004236 <GetID+0x6e>
		return myID;
 80041fc:	4b22      	ldr	r3, [pc, #136]	; (8004288 <GetID+0xc0>)
 80041fe:	7818      	ldrb	r0, [r3, #0]
		}

		return BOS_ERR_WrongName;
	}

}
 8004200:	bc04      	pop	{r2}
 8004202:	4690      	mov	r8, r2
 8004204:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string + 1);
 8004206:	1c68      	adds	r0, r5, #1
 8004208:	f00f fb9d 	bl	8013946 <atol>
 800420c:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <GetID+0x52>
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <GetID+0xb8>)
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d206      	bcs.n	8004228 <GetID+0x60>
		else if (id == myID)
 800421a:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <GetID+0xc0>)
 800421c:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 800421e:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 8004220:	429a      	cmp	r2, r3
 8004222:	d1ed      	bne.n	8004200 <GetID+0x38>
			return myID;
 8004224:	b210      	sxth	r0, r2
 8004226:	e7eb      	b.n	8004200 <GetID+0x38>
			return id;
 8004228:	b218      	sxth	r0, r3
 800422a:	e7e9      	b.n	8004200 <GetID+0x38>
		for (i = 0; i < N; i++) {
 800422c:	3401      	adds	r4, #1
 800422e:	b2e4      	uxtb	r4, r4
 8004230:	360a      	adds	r6, #10
 8004232:	42bc      	cmp	r4, r7
 8004234:	d00a      	beq.n	800424c <GetID+0x84>
			if (!strcmp(string, moduleAlias[i]) && (*string != 0))
 8004236:	0031      	movs	r1, r6
 8004238:	0028      	movs	r0, r5
 800423a:	f7fb ff63 	bl	8000104 <strcmp>
 800423e:	2800      	cmp	r0, #0
 8004240:	d1f4      	bne.n	800422c <GetID+0x64>
 8004242:	4643      	mov	r3, r8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f1      	beq.n	800422c <GetID+0x64>
				return (i);
 8004248:	b220      	sxth	r0, r4
 800424a:	e7d9      	b.n	8004200 <GetID+0x38>
 800424c:	4f0f      	ldr	r7, [pc, #60]	; (800428c <GetID+0xc4>)
		for (i = 0; i < N; i++) {
 800424e:	2600      	movs	r6, #0
			if (!strcmp(string, groupAlias[i]))
 8004250:	0039      	movs	r1, r7
 8004252:	0028      	movs	r0, r5
 8004254:	f7fb ff56 	bl	8000104 <strcmp>
 8004258:	2800      	cmp	r0, #0
 800425a:	d005      	beq.n	8004268 <GetID+0xa0>
 800425c:	3601      	adds	r6, #1
 800425e:	370a      	adds	r7, #10
		for (i = 0; i < MaxNumOfGroups; i++) {
 8004260:	2e0a      	cmp	r6, #10
 8004262:	d1f5      	bne.n	8004250 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004264:	2064      	movs	r0, #100	; 0x64
 8004266:	e7cb      	b.n	8004200 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004268:	0234      	lsls	r4, r6, #8
 800426a:	20fe      	movs	r0, #254	; 0xfe
 800426c:	4320      	orrs	r0, r4
 800426e:	b200      	sxth	r0, r0
 8004270:	e7c6      	b.n	8004200 <GetID+0x38>
		return BOS_BROADCAST;
 8004272:	20ff      	movs	r0, #255	; 0xff
 8004274:	e7c4      	b.n	8004200 <GetID+0x38>
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	08017b60 	.word	0x08017b60
 800427c:	08017b64 	.word	0x08017b64
 8004280:	2000001c 	.word	0x2000001c
 8004284:	20000758 	.word	0x20000758
 8004288:	20000866 	.word	0x20000866
 800428c:	2000064c 	.word	0x2000064c

08004290 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module, char *alias) {
 8004290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004292:	b083      	sub	sp, #12
 8004294:	9001      	str	r0, [sp, #4]
 8004296:	000d      	movs	r5, r1
 8004298:	4c2a      	ldr	r4, [pc, #168]	; (8004344 <NameModule+0xb4>)
 800429a:	0027      	movs	r7, r4
 800429c:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for (i = 0; i < NumOfKeywords; i++) {
		if (!strcmp(alias, BOSkeywords[i]))
 800429e:	0021      	movs	r1, r4
 80042a0:	0028      	movs	r0, r5
 80042a2:	f7fb ff2f 	bl	8000104 <strcmp>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d043      	beq.n	8004332 <NameModule+0xa2>
 80042aa:	3404      	adds	r4, #4
	for (i = 0; i < NumOfKeywords; i++) {
 80042ac:	42bc      	cmp	r4, r7
 80042ae:	d1f6      	bne.n	800429e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}

	/* 2. Check module alias with other module aliases */
	for (i = 1; i < N; i++) {
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <NameModule+0xb8>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d90f      	bls.n	80042d8 <NameModule+0x48>
 80042b8:	4c24      	ldr	r4, [pc, #144]	; (800434c <NameModule+0xbc>)
 80042ba:	009f      	lsls	r7, r3, #2
 80042bc:	18ff      	adds	r7, r7, r3
 80042be:	007f      	lsls	r7, r7, #1
 80042c0:	0023      	movs	r3, r4
 80042c2:	3b0a      	subs	r3, #10
 80042c4:	18ff      	adds	r7, r7, r3
		if (!strcmp(alias, moduleAlias[i]))
 80042c6:	0021      	movs	r1, r4
 80042c8:	0028      	movs	r0, r5
 80042ca:	f7fb ff1b 	bl	8000104 <strcmp>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d031      	beq.n	8004336 <NameModule+0xa6>
 80042d2:	340a      	adds	r4, #10
	for (i = 1; i < N; i++) {
 80042d4:	42bc      	cmp	r4, r7
 80042d6:	d1f6      	bne.n	80042c6 <NameModule+0x36>
 80042d8:	4c1d      	ldr	r4, [pc, #116]	; (8004350 <NameModule+0xc0>)
 80042da:	0027      	movs	r7, r4
 80042dc:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check module alias with group aliases */
	for (i = 0; i < MaxNumOfGroups; i++) {
		if (!strcmp(alias, groupAlias[i]))
 80042de:	0021      	movs	r1, r4
 80042e0:	0028      	movs	r0, r5
 80042e2:	f7fb ff0f 	bl	8000104 <strcmp>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d028      	beq.n	800433c <NameModule+0xac>
 80042ea:	340a      	adds	r4, #10
	for (i = 0; i < MaxNumOfGroups; i++) {
 80042ec:	42bc      	cmp	r4, r7
 80042ee:	d1f6      	bne.n	80042de <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}

	/* 4. Check alias with BOS and module commands */
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 80042f0:	4c18      	ldr	r4, [pc, #96]	; (8004354 <NameModule+0xc4>)
 80042f2:	4b19      	ldr	r3, [pc, #100]	; (8004358 <NameModule+0xc8>)
 80042f4:	601c      	str	r4, [r3, #0]
 80042f6:	001e      	movs	r6, r3
			pxCommand->pxNext) {
		pcRegisteredCommandString =
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	681f      	ldr	r7, [r3, #0]
				pxCommand->pxCommandLineDefinition->pcCommand;
		xCommandStringLength = strlen((const char*) pcRegisteredCommandString);
 80042fc:	0038      	movs	r0, r7
 80042fe:	f7fb ff0b 	bl	8000118 <strlen>
 8004302:	0002      	movs	r2, r0

		if (!strncmp(alias, (const char*) pcRegisteredCommandString,
 8004304:	0039      	movs	r1, r7
 8004306:	0028      	movs	r0, r5
 8004308:	f010 fb3a 	bl	8014980 <strncmp>
 800430c:	2800      	cmp	r0, #0
 800430e:	d017      	beq.n	8004340 <NameModule+0xb0>
			pxCommand->pxNext) {
 8004310:	6864      	ldr	r4, [r4, #4]
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 8004312:	6034      	str	r4, [r6, #0]
 8004314:	2c00      	cmp	r4, #0
 8004316:	d1ef      	bne.n	80042f8 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}

	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 8004318:	9b01      	ldr	r3, [sp, #4]
 800431a:	0098      	lsls	r0, r3, #2
 800431c:	469c      	mov	ip, r3
 800431e:	4460      	add	r0, ip
 8004320:	0040      	lsls	r0, r0, #1
 8004322:	4e0e      	ldr	r6, [pc, #56]	; (800435c <NameModule+0xcc>)
 8004324:	1980      	adds	r0, r0, r6
 8004326:	0029      	movs	r1, r5
 8004328:	f010 fb22 	bl	8014970 <strcpy>

	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 800432c:	f7fe fe9c 	bl	8003068 <SaveEEalias>

	return result;
 8004330:	e002      	b.n	8004338 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004332:	2006      	movs	r0, #6
 8004334:	e000      	b.n	8004338 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 8004336:	2007      	movs	r0, #7
}
 8004338:	b003      	add	sp, #12
 800433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800433c:	2007      	movs	r0, #7
 800433e:	e7fb      	b.n	8004338 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004340:	2008      	movs	r0, #8
 8004342:	e7f9      	b.n	8004338 <NameModule+0xa8>
 8004344:	08017910 	.word	0x08017910
 8004348:	2000001c 	.word	0x2000001c
 800434c:	20000762 	.word	0x20000762
 8004350:	2000064c 	.word	0x2000064c
 8004354:	200000a0 	.word	0x200000a0
 8004358:	200008e8 	.word	0x200008e8
 800435c:	20000758 	.word	0x20000758

08004360 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module, char *group) {
 8004360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004362:	46c6      	mov	lr, r8
 8004364:	b500      	push	{lr}
 8004366:	0007      	movs	r7, r0
 8004368:	000e      	movs	r6, r1
 800436a:	4d3a      	ldr	r5, [pc, #232]	; (8004454 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */

	for (i = 0; i < MaxNumOfGroups; i++) {
 800436c:	2400      	movs	r4, #0
		/* This group already exists */
		if (!strcmp(group, groupAlias[i])) {
 800436e:	0029      	movs	r1, r5
 8004370:	0030      	movs	r0, r6
 8004372:	f7fb fec7 	bl	8000104 <strcmp>
 8004376:	2800      	cmp	r0, #0
 8004378:	d050      	beq.n	800441c <AddModuleToGroup+0xbc>
	for (i = 0; i < MaxNumOfGroups; i++) {
 800437a:	3401      	adds	r4, #1
 800437c:	350a      	adds	r5, #10
 800437e:	2c0a      	cmp	r4, #10
 8004380:	d1f5      	bne.n	800436e <AddModuleToGroup+0xe>
 8004382:	4c35      	ldr	r4, [pc, #212]	; (8004458 <AddModuleToGroup+0xf8>)
 8004384:	0025      	movs	r5, r4
 8004386:	3510      	adds	r5, #16

	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for (j = 0; j < NumOfKeywords; j++) {
		if (!strcmp(group, BOSkeywords[j]))
 8004388:	0021      	movs	r1, r4
 800438a:	0030      	movs	r0, r6
 800438c:	f7fb feba 	bl	8000104 <strcmp>
 8004390:	2800      	cmp	r0, #0
 8004392:	d058      	beq.n	8004446 <AddModuleToGroup+0xe6>
 8004394:	3404      	adds	r4, #4
	for (j = 0; j < NumOfKeywords; j++) {
 8004396:	42ac      	cmp	r4, r5
 8004398:	d1f6      	bne.n	8004388 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}

	/* 2. Check group alias with module aliases */
	for (j = 1; j < N; j++) {
 800439a:	4b30      	ldr	r3, [pc, #192]	; (800445c <AddModuleToGroup+0xfc>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d90f      	bls.n	80043c2 <AddModuleToGroup+0x62>
 80043a2:	4c2f      	ldr	r4, [pc, #188]	; (8004460 <AddModuleToGroup+0x100>)
 80043a4:	009d      	lsls	r5, r3, #2
 80043a6:	18ed      	adds	r5, r5, r3
 80043a8:	006d      	lsls	r5, r5, #1
 80043aa:	0023      	movs	r3, r4
 80043ac:	3b0a      	subs	r3, #10
 80043ae:	18ed      	adds	r5, r5, r3
		if (!strcmp(group, moduleAlias[j]))
 80043b0:	0021      	movs	r1, r4
 80043b2:	0030      	movs	r0, r6
 80043b4:	f7fb fea6 	bl	8000104 <strcmp>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d046      	beq.n	800444a <AddModuleToGroup+0xea>
 80043bc:	340a      	adds	r4, #10
	for (j = 1; j < N; j++) {
 80043be:	42ac      	cmp	r4, r5
 80043c0:	d1f6      	bne.n	80043b0 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}

	/* 3. Check group alias with BOS and module commands */
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 80043c2:	4c28      	ldr	r4, [pc, #160]	; (8004464 <AddModuleToGroup+0x104>)
 80043c4:	4b28      	ldr	r3, [pc, #160]	; (8004468 <AddModuleToGroup+0x108>)
 80043c6:	601c      	str	r4, [r3, #0]
 80043c8:	4698      	mov	r8, r3
			pxCommand->pxNext) {
		pcRegisteredCommandString =
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	681d      	ldr	r5, [r3, #0]
				pxCommand->pxCommandLineDefinition->pcCommand;
		xCommandStringLength = strlen((const char*) pcRegisteredCommandString);
 80043ce:	0028      	movs	r0, r5
 80043d0:	f7fb fea2 	bl	8000118 <strlen>
 80043d4:	0002      	movs	r2, r0

		if (!strncmp(group, (const char*) pcRegisteredCommandString,
 80043d6:	0029      	movs	r1, r5
 80043d8:	0030      	movs	r0, r6
 80043da:	f010 fad1 	bl	8014980 <strncmp>
 80043de:	2800      	cmp	r0, #0
 80043e0:	d035      	beq.n	800444e <AddModuleToGroup+0xee>
			pxCommand->pxNext) {
 80043e2:	6864      	ldr	r4, [r4, #4]
	for (pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand =
 80043e4:	4643      	mov	r3, r8
 80043e6:	601c      	str	r4, [r3, #0]
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d1ee      	bne.n	80043ca <AddModuleToGroup+0x6a>
		}
	}

	/* 4. Group alias is unique - copy to first empty location */
	for (i = 0; i < MaxNumOfGroups; i++) {
		if (!groupAlias[i][0]) {
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <AddModuleToGroup+0xf4>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01e      	beq.n	8004432 <AddModuleToGroup+0xd2>
 80043f4:	4b17      	ldr	r3, [pc, #92]	; (8004454 <AddModuleToGroup+0xf4>)
 80043f6:	330a      	adds	r3, #10
	for (i = 0; i < MaxNumOfGroups; i++) {
 80043f8:	3401      	adds	r4, #1
		if (!groupAlias[i][0]) {
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	d019      	beq.n	8004434 <AddModuleToGroup+0xd4>
	for (i = 0; i < MaxNumOfGroups; i++) {
 8004400:	3401      	adds	r4, #1
 8004402:	330a      	adds	r3, #10
 8004404:	2c0a      	cmp	r4, #10
 8004406:	d1f8      	bne.n	80043fa <AddModuleToGroup+0x9a>
			break;
		}
	}

	/* 5. Add this module to the new group */
	groupModules[module - 1] |= (0x0001 << i);
 8004408:	3f01      	subs	r7, #1
 800440a:	4918      	ldr	r1, [pc, #96]	; (800446c <AddModuleToGroup+0x10c>)
 800440c:	007f      	lsls	r7, r7, #1
 800440e:	2201      	movs	r2, #1
 8004410:	40a2      	lsls	r2, r4
 8004412:	5a7b      	ldrh	r3, [r7, r1]
 8004414:	4313      	orrs	r3, r2
 8004416:	527b      	strh	r3, [r7, r1]

	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 8004418:	2000      	movs	r0, #0
 800441a:	e007      	b.n	800442c <AddModuleToGroup+0xcc>
			groupModules[module - 1] |= (0x0001 << i);
 800441c:	3f01      	subs	r7, #1
 800441e:	4913      	ldr	r1, [pc, #76]	; (800446c <AddModuleToGroup+0x10c>)
 8004420:	007f      	lsls	r7, r7, #1
 8004422:	2201      	movs	r2, #1
 8004424:	40a2      	lsls	r2, r4
 8004426:	5a7b      	ldrh	r3, [r7, r1]
 8004428:	4313      	orrs	r3, r2
 800442a:	527b      	strh	r3, [r7, r1]
}
 800442c:	bc04      	pop	{r2}
 800442e:	4690      	mov	r8, r2
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < MaxNumOfGroups; i++) {
 8004432:	2400      	movs	r4, #0
			strcpy(groupAlias[i], group);
 8004434:	00a0      	lsls	r0, r4, #2
 8004436:	1900      	adds	r0, r0, r4
 8004438:	0040      	lsls	r0, r0, #1
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <AddModuleToGroup+0xf4>)
 800443c:	1818      	adds	r0, r3, r0
 800443e:	0031      	movs	r1, r6
 8004440:	f010 fa96 	bl	8014970 <strcpy>
			break;
 8004444:	e7e0      	b.n	8004408 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 8004446:	2006      	movs	r0, #6
 8004448:	e7f0      	b.n	800442c <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800444a:	2007      	movs	r0, #7
 800444c:	e7ee      	b.n	800442c <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 800444e:	2008      	movs	r0, #8
 8004450:	e7ec      	b.n	800442c <AddModuleToGroup+0xcc>
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	2000064c 	.word	0x2000064c
 8004458:	08017910 	.word	0x08017910
 800445c:	2000001c 	.word	0x2000001c
 8004460:	20000762 	.word	0x20000762
 8004464:	200000a0 	.word	0x200000a0
 8004468:	200008ec 	.word	0x200008ec
 800446c:	200006b0 	.word	0x200006b0

08004470 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void) {
 8004470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004472:	46ce      	mov	lr, r9
 8004474:	4647      	mov	r7, r8
 8004476:	b580      	push	{r7, lr}
 8004478:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;

	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <ReadPortsDir+0x9c>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d03c      	beq.n	80044fc <ReadPortsDir+0x8c>
 8004482:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <ReadPortsDir+0xa0>)
 800448a:	4699      	mov	r9, r3
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <ReadPortsDir+0xa4>)
 800448e:	4698      	mov	r8, r3
 8004490:	e021      	b.n	80044d6 <ReadPortsDir+0x66>
 8004492:	2600      	movs	r6, #0
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8004494:	2401      	movs	r4, #1
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004496:	2780      	movs	r7, #128	; 0x80
 8004498:	023f      	lsls	r7, r7, #8
 800449a:	e004      	b.n	80044a6 <ReadPortsDir+0x36>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800449c:	3401      	adds	r4, #1
 800449e:	b2e4      	uxtb	r4, r4
 80044a0:	3601      	adds	r6, #1
 80044a2:	2c06      	cmp	r4, #6
 80044a4:	d011      	beq.n	80044ca <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 80044a6:	0020      	movs	r0, r4
 80044a8:	f009 fdf6 	bl	800e098 <GetUart>
 80044ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044ae:	42bb      	cmp	r3, r7
 80044b0:	d1f4      	bne.n	800449c <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |= (0x8000 >> (p - 1)); /* Set bit to 1 */
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <ReadPortsDir+0xa0>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	4642      	mov	r2, r8
 80044bc:	5a9a      	ldrh	r2, [r3, r2]
 80044be:	0039      	movs	r1, r7
 80044c0:	4131      	asrs	r1, r6
 80044c2:	430a      	orrs	r2, r1
 80044c4:	4641      	mov	r1, r8
 80044c6:	525a      	strh	r2, [r3, r1]
 80044c8:	e7e8      	b.n	800449c <ReadPortsDir+0x2c>
	for (uint8_t i = 1; i <= N; i++) {
 80044ca:	3501      	adds	r5, #1
 80044cc:	b2ed      	uxtb	r5, r5
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <ReadPortsDir+0x9c>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	42ab      	cmp	r3, r5
 80044d4:	d314      	bcc.n	8004500 <ReadPortsDir+0x90>
		if (i != myID) {
 80044d6:	464b      	mov	r3, r9
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	42ab      	cmp	r3, r5
 80044dc:	d0d9      	beq.n	8004492 <ReadPortsDir+0x22>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	2113      	movs	r1, #19
 80044e2:	0028      	movs	r0, r5
 80044e4:	f005 f8e4 	bl	80096b0 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 80044e8:	2032      	movs	r0, #50	; 0x32
 80044ea:	f009 fc43 	bl	800dd74 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <ReadPortsDir+0xa8>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0e9      	beq.n	80044ca <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 80044f6:	2302      	movs	r3, #2
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	e7e6      	b.n	80044ca <ReadPortsDir+0x5a>
	BOS_Status result = BOS_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	9301      	str	r3, [sp, #4]
			}
		}
	}

	return result;
}
 8004500:	9801      	ldr	r0, [sp, #4]
 8004502:	b003      	add	sp, #12
 8004504:	bc0c      	pop	{r2, r3}
 8004506:	4690      	mov	r8, r2
 8004508:	4699      	mov	r9, r3
 800450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450c:	2000001c 	.word	0x2000001c
 8004510:	20000866 	.word	0x20000866
 8004514:	200065e4 	.word	0x200065e4
 8004518:	200008f8 	.word	0x200008f8

0800451c <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void) {
 800451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451e:	46c6      	mov	lr, r8
 8004520:	b500      	push	{lr}
 8004522:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 8004524:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <UpdateMyPortsDir+0x54>)
 8004528:	4698      	mov	r8, r3
 800452a:	4f12      	ldr	r7, [pc, #72]	; (8004574 <UpdateMyPortsDir+0x58>)
 800452c:	2680      	movs	r6, #128	; 0x80
 800452e:	0236      	lsls	r6, r6, #8
 8004530:	e00a      	b.n	8004548 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 8004532:	0020      	movs	r0, r4
 8004534:	f009 fdb0 	bl	800e098 <GetUart>
 8004538:	2101      	movs	r1, #1
 800453a:	f009 fe43 	bl	800e1c4 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800453e:	3401      	adds	r4, #1
 8004540:	b2e4      	uxtb	r4, r4
 8004542:	3501      	adds	r5, #1
 8004544:	2c06      	cmp	r4, #6
 8004546:	d00f      	beq.n	8004568 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 8004548:	783b      	ldrb	r3, [r7, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4642      	mov	r2, r8
 8004550:	5a9b      	ldrh	r3, [r3, r2]
 8004552:	0032      	movs	r2, r6
 8004554:	412a      	asrs	r2, r5
 8004556:	421a      	tst	r2, r3
 8004558:	d1eb      	bne.n	8004532 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 800455a:	0020      	movs	r0, r4
 800455c:	f009 fd9c 	bl	800e098 <GetUart>
 8004560:	2100      	movs	r1, #0
 8004562:	f009 fe2f 	bl	800e1c4 <SwapUartPins>
 8004566:	e7ea      	b.n	800453e <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 8004568:	2000      	movs	r0, #0
 800456a:	bc04      	pop	{r2}
 800456c:	4690      	mov	r8, r2
 800456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004570:	200065e4 	.word	0x200065e4
 8004574:	20000866 	.word	0x20000866

08004578 <BOS_Init>:
void BOS_Init(void) {
 8004578:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 800457a:	f009 fab3 	bl	800dae4 <RTC_Init>
	GetTimeDate();
 800457e:	f009 fb51 	bl	800dc24 <GetTimeDate>
	EE_Init();
 8004582:	f003 fa5d 	bl	8007a40 <EE_Init>
	GPIO_Init();
 8004586:	f009 f81b 	bl	800d5c0 <GPIO_Init>
	DMA_Init();
 800458a:	f007 ffaf 	bl	800c4ec <DMA_Init>
	TIM_USEC_Init();
 800458e:	f009 fb7d 	bl	800dc8c <TIM_USEC_Init>
	CRC_Init();
 8004592:	f008 ffc1 	bl	800d518 <CRC_Init>
	TIM_MSEC_Init();
 8004596:	f009 fbab 	bl	800dcf0 <TIM_MSEC_Init>
	if (IsFactoryReset()) {
 800459a:	f009 f8a5 	bl	800d6e8 <IsFactoryReset>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d11a      	bne.n	80045d8 <BOS_Init+0x60>
	if (IsLowerCLIbaud()) {
 80045a2:	f7ff f88d 	bl	80036c0 <IsLowerCLIbaud>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d021      	beq.n	80045ee <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag = 1;
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <BOS_Init+0x12c>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 80045b0:	2032      	movs	r0, #50	; 0x32
 80045b2:	f009 fbdf 	bl	800dd74 <StartMilliDelay>
		Module_Init();
 80045b6:	f000 f881 	bl	80046bc <Module_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045ba:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <BOS_Init+0x130>)
 80045bc:	22e1      	movs	r2, #225	; 0xe1
 80045be:	0252      	lsls	r2, r2, #9
 80045c0:	609a      	str	r2, [r3, #8]
		for (uint8_t port = 1; port <= NumOfPorts; port++) {
 80045c2:	2401      	movs	r4, #1
			UpdateBaudrate(port, BOS.clibaudrate);
 80045c4:	001d      	movs	r5, r3
 80045c6:	68a9      	ldr	r1, [r5, #8]
 80045c8:	0020      	movs	r0, r4
 80045ca:	f009 fdf1 	bl	800e1b0 <UpdateBaudrate>
		for (uint8_t port = 1; port <= NumOfPorts; port++) {
 80045ce:	3401      	adds	r4, #1
 80045d0:	b2e4      	uxtb	r4, r4
 80045d2:	2c06      	cmp	r4, #6
 80045d4:	d1f7      	bne.n	80045c6 <BOS_Init+0x4e>
 80045d6:	e00f      	b.n	80045f8 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80045d8:	f7ff f8c0 	bl	800375c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045dc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e0:	4b32      	ldr	r3, [pc, #200]	; (80046ac <BOS_Init+0x134>)
 80045e2:	4a33      	ldr	r2, [pc, #204]	; (80046b0 <BOS_Init+0x138>)
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	e7fd      	b.n	80045ea <BOS_Init+0x72>
		Delay_ms_no_rtos(50);// Give other modules time to finish factory reset and baudrate check
 80045ee:	2032      	movs	r0, #50	; 0x32
 80045f0:	f009 fbc0 	bl	800dd74 <StartMilliDelay>
		Module_Peripheral_Init();
 80045f4:	f007 f89e 	bl	800b734 <Module_Peripheral_Init>
	LoadEEvars();
 80045f8:	f7ff f850 	bl	800369c <LoadEEvars>
	UpdateMyPortsDir();
 80045fc:	f7ff ff8e 	bl	800451c <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004600:	f008 fbd4 	bl	800cdac <SetupMessagingRxDMAs>
	if (myID == 0) /* Native module */
 8004604:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <BOS_Init+0x13c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d037      	beq.n	800467c <BOS_Init+0x104>
		IND_ON();
 800460c:	2580      	movs	r5, #128	; 0x80
 800460e:	012d      	lsls	r5, r5, #4
 8004610:	2490      	movs	r4, #144	; 0x90
 8004612:	05e4      	lsls	r4, r4, #23
 8004614:	2201      	movs	r2, #1
 8004616:	0029      	movs	r1, r5
 8004618:	0020      	movs	r0, r4
 800461a:	f00d fbf9 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800461e:	20fa      	movs	r0, #250	; 0xfa
 8004620:	0040      	lsls	r0, r0, #1
 8004622:	f009 fba7 	bl	800dd74 <StartMilliDelay>
		IND_OFF();
 8004626:	2200      	movs	r2, #0
 8004628:	0029      	movs	r1, r5
 800462a:	0020      	movs	r0, r4
 800462c:	f00d fbf0 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004630:	2064      	movs	r0, #100	; 0x64
 8004632:	f009 fb9f 	bl	800dd74 <StartMilliDelay>
		IND_ON();
 8004636:	2201      	movs	r2, #1
 8004638:	0029      	movs	r1, r5
 800463a:	0020      	movs	r0, r4
 800463c:	f00d fbe8 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004640:	2064      	movs	r0, #100	; 0x64
 8004642:	f009 fb97 	bl	800dd74 <StartMilliDelay>
		IND_OFF();
 8004646:	2200      	movs	r2, #0
 8004648:	0029      	movs	r1, r5
 800464a:	0020      	movs	r0, r4
 800464c:	f00d fbe0 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	f009 fb8f 	bl	800dd74 <StartMilliDelay>
		IND_ON();
 8004656:	2201      	movs	r2, #1
 8004658:	0029      	movs	r1, r5
 800465a:	0020      	movs	r0, r4
 800465c:	f00d fbd8 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);IND_OFF();
 8004660:	2064      	movs	r0, #100	; 0x64
 8004662:	f009 fb87 	bl	800dd74 <StartMilliDelay>
 8004666:	2200      	movs	r2, #0
 8004668:	0029      	movs	r1, r5
 800466a:	0020      	movs	r0, r4
 800466c:	f00d fbd0 	bl	8011e10 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004670:	f003 f828 	bl	80076c4 <ResetUartORE>
	BOS_initialized = 1;
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <BOS_Init+0x140>)
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
}
 800467a:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800467c:	2580      	movs	r5, #128	; 0x80
 800467e:	012d      	lsls	r5, r5, #4
 8004680:	2490      	movs	r4, #144	; 0x90
 8004682:	05e4      	lsls	r4, r4, #23
 8004684:	2201      	movs	r2, #1
 8004686:	0029      	movs	r1, r5
 8004688:	0020      	movs	r0, r4
 800468a:	f00d fbc1 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800468e:	20fa      	movs	r0, #250	; 0xfa
 8004690:	0040      	lsls	r0, r0, #1
 8004692:	f009 fb6f 	bl	800dd74 <StartMilliDelay>
 8004696:	2200      	movs	r2, #0
 8004698:	0029      	movs	r1, r5
 800469a:	0020      	movs	r0, r4
 800469c:	f00d fbb8 	bl	8011e10 <HAL_GPIO_WritePin>
 80046a0:	e7e6      	b.n	8004670 <BOS_Init+0xf8>
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	2000029e 	.word	0x2000029e
 80046a8:	2000612c 	.word	0x2000612c
 80046ac:	e000ed00 	.word	0xe000ed00
 80046b0:	05fa0004 	.word	0x05fa0004
 80046b4:	20000866 	.word	0x20000866
 80046b8:	2000029d 	.word	0x2000029d

080046bc <Module_Init>:
void Module_Init(void){
 80046bc:	b510      	push	{r4, lr}
	HAL_Init();
 80046be:	f00b fe43 	bl	8010348 <HAL_Init>
	SystemClock_Config();
 80046c2:	f006 fec1 	bl	800b448 <SystemClock_Config>
	BOS_Init();
 80046c6:	f7ff ff57 	bl	8004578 <BOS_Init>
	MX_FREERTOS_Init();
 80046ca:	f003 fbe3 	bl	8007e94 <MX_FREERTOS_Init>
	osKernelStart();
 80046ce:	f009 fe29 	bl	800e324 <osKernelStart>
}
 80046d2:	bd10      	pop	{r4, pc}

080046d4 <GetDateString>:

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
 */
char* GetDateString(void) {
 80046d4:	b510      	push	{r4, lr}
 80046d6:	b082      	sub	sp, #8
	static const char formatDateStr[] = "%s %02d/%02d/%04d";
	char *buffer = malloc(30 * sizeof(int8_t));
 80046d8:	201e      	movs	r0, #30
 80046da:	f00f f971 	bl	80139c0 <malloc>
 80046de:	0004      	movs	r4, r0
	memset(buffer, 0x00, 30 * sizeof(int8_t));
 80046e0:	221e      	movs	r2, #30
 80046e2:	2100      	movs	r1, #0
 80046e4:	f00f f9aa 	bl	8013a3c <memset>
	sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday - 1],
			BOS.date.month, BOS.date.day, BOS.date.year);
 80046e8:	4908      	ldr	r1, [pc, #32]	; (800470c <GetDateString+0x38>)
	sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday - 1],
 80046ea:	7d8b      	ldrb	r3, [r1, #22]
 80046ec:	7d0a      	ldrb	r2, [r1, #20]
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0092      	lsls	r2, r2, #2
 80046f2:	4807      	ldr	r0, [pc, #28]	; (8004710 <GetDateString+0x3c>)
 80046f4:	5812      	ldr	r2, [r2, r0]
 80046f6:	8b08      	ldrh	r0, [r1, #24]
 80046f8:	9001      	str	r0, [sp, #4]
 80046fa:	7d49      	ldrb	r1, [r1, #21]
 80046fc:	9100      	str	r1, [sp, #0]
 80046fe:	4905      	ldr	r1, [pc, #20]	; (8004714 <GetDateString+0x40>)
 8004700:	0020      	movs	r0, r4
 8004702:	f010 f8f9 	bl	80148f8 <siprintf>
	return buffer;
}
 8004706:	0020      	movs	r0, r4
 8004708:	b002      	add	sp, #8
 800470a:	bd10      	pop	{r4, pc}
 800470c:	2000612c 	.word	0x2000612c
 8004710:	08017e5c 	.word	0x08017e5c
 8004714:	08017b80 	.word	0x08017b80

08004718 <Bridge>:

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
 */
BOS_Status Bridge(uint8_t port1, uint8_t port2) {
 8004718:	b500      	push	{lr}
 800471a:	b085      	sub	sp, #20
 800471c:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL,
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <Bridge+0x24>)
 8004720:	7819      	ldrb	r1, [r3, #0]
 8004722:	2301      	movs	r3, #1
 8004724:	9303      	str	r3, [sp, #12]
 8004726:	3b02      	subs	r3, #2
 8004728:	9302      	str	r3, [sp, #8]
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	3303      	adds	r3, #3
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	000b      	movs	r3, r1
 8004732:	f004 ffe3 	bl	80096fc <StartScastDMAStream>
			0xFFFFFFFF, 0xFFFFFFFF, true);
}
 8004736:	b005      	add	sp, #20
 8004738:	bd00      	pop	{pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	20000866 	.word	0x20000866

08004740 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
 */
BOS_Status Unbridge(uint8_t port1, uint8_t port2) {
 8004740:	b530      	push	{r4, r5, lr}
 8004742:	b087      	sub	sp, #28
 8004744:	0004      	movs	r4, r0
 8004746:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004748:	2300      	movs	r3, #0
 800474a:	9304      	str	r3, [sp, #16]
 800474c:	9303      	str	r3, [sp, #12]
 800474e:	9302      	str	r3, [sp, #8]
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	2100      	movs	r1, #0
 8004758:	2000      	movs	r0, #0
 800475a:	f7fe fe03 	bl	8003364 <SaveEEstreams>

	// Stop the DMA streams and enable messaging back on these ports
	if (streamDMA[port1 - 1].Instance != 0
 800475e:	1e62      	subs	r2, r4, #1
 8004760:	00d3      	lsls	r3, r2, #3
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <Unbridge+0x78>)
 8004768:	589b      	ldr	r3, [r3, r2]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d015      	beq.n	800479a <Unbridge+0x5a>
			&& streamDMA[port2 - 1].Instance != 0) {
 800476e:	1e6a      	subs	r2, r5, #1
 8004770:	00d3      	lsls	r3, r2, #3
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4a10      	ldr	r2, [pc, #64]	; (80047b8 <Unbridge+0x78>)
 8004778:	589b      	ldr	r3, [r3, r2]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	} else if (streamDMA[port1 - 1].Instance != 0) {
		SwitchStreamDMAToMsg(port1);
 800477e:	0020      	movs	r0, r4
 8004780:	f002 ff14 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004784:	2000      	movs	r0, #0
 8004786:	e006      	b.n	8004796 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004788:	0020      	movs	r0, r4
 800478a:	f002 ff0f 	bl	80075ac <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800478e:	0028      	movs	r0, r5
 8004790:	f002 ff0c 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004794:	2000      	movs	r0, #0
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	} else {
		return BOS_ERR_WrongValue;
	}
}
 8004796:	b007      	add	sp, #28
 8004798:	bd30      	pop	{r4, r5, pc}
	} else if (streamDMA[port2 - 1].Instance != 0) {
 800479a:	1e6a      	subs	r2, r5, #1
 800479c:	00d3      	lsls	r3, r2, #3
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4a05      	ldr	r2, [pc, #20]	; (80047b8 <Unbridge+0x78>)
 80047a4:	589b      	ldr	r3, [r3, r2]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80047aa:	0028      	movs	r0, r5
 80047ac:	f002 fefe 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047b0:	2000      	movs	r0, #0
 80047b2:	e7f0      	b.n	8004796 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80047b4:	2068      	movs	r0, #104	; 0x68
 80047b6:	e7ee      	b.n	8004796 <Unbridge+0x56>
 80047b8:	20001128 	.word	0x20001128

080047bc <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 80047bc:	b570      	push	{r4, r5, r6, lr}
 80047be:	0005      	movs	r5, r0
	for(int i = 0; string[i]; i++){
 80047c0:	7804      	ldrb	r4, [r0, #0]
 80047c2:	2c00      	cmp	r4, #0
 80047c4:	d010      	beq.n	80047e8 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 80047c6:	2603      	movs	r6, #3
 80047c8:	e004      	b.n	80047d4 <StringToLowerCase+0x18>
 80047ca:	702a      	strb	r2, [r5, #0]
 80047cc:	3501      	adds	r5, #1
	for(int i = 0; string[i]; i++){
 80047ce:	782c      	ldrb	r4, [r5, #0]
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d009      	beq.n	80047e8 <StringToLowerCase+0x2c>
		string[i] = tolower(string[i]);
 80047d4:	f00f f8e6 	bl	80139a4 <__locale_ctype_ptr>
 80047d8:	1900      	adds	r0, r0, r4
 80047da:	7843      	ldrb	r3, [r0, #1]
 80047dc:	4033      	ands	r3, r6
 80047de:	0022      	movs	r2, r4
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d1f2      	bne.n	80047ca <StringToLowerCase+0xe>
 80047e4:	3220      	adds	r2, #32
 80047e6:	e7f0      	b.n	80047ca <StringToLowerCase+0xe>
	}
}
 80047e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080047ec <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 80047ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ee:	46c6      	mov	lr, r8
 80047f0:	b500      	push	{lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 80047f6:	4bdc      	ldr	r3, [pc, #880]	; (8004b68 <ParseSnippetCondition+0x37c>)
 80047f8:	781c      	ldrb	r4, [r3, #0]
 80047fa:	2c05      	cmp	r4, #5
 80047fc:	d100      	bne.n	8004800 <ParseSnippetCondition+0x14>
 80047fe:	e210      	b.n	8004c22 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004800:	49da      	ldr	r1, [pc, #872]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004802:	00a3      	lsls	r3, r4, #2
 8004804:	191a      	adds	r2, r3, r4
 8004806:	0092      	lsls	r2, r2, #2
 8004808:	2000      	movs	r0, #0
 800480a:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 800480c:	191a      	adds	r2, r3, r4
 800480e:	0092      	lsls	r2, r2, #2
 8004810:	188a      	adds	r2, r1, r2
 8004812:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004814:	1918      	adds	r0, r3, r4
 8004816:	0080      	lsls	r0, r0, #2
 8004818:	3002      	adds	r0, #2
 800481a:	1840      	adds	r0, r0, r1
 800481c:	2204      	movs	r2, #4
 800481e:	2100      	movs	r1, #0
 8004820:	f00f f90c 	bl	8013a3c <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004824:	782b      	ldrb	r3, [r5, #0]
 8004826:	2b62      	cmp	r3, #98	; 0x62
 8004828:	d102      	bne.n	8004830 <ParseSnippetCondition+0x44>
 800482a:	78ab      	ldrb	r3, [r5, #2]
 800482c:	2b2e      	cmp	r3, #46	; 0x2e
 800482e:	d032      	beq.n	8004896 <ParseSnippetCondition+0xaa>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004830:	4ecf      	ldr	r6, [pc, #828]	; (8004b70 <ParseSnippetCondition+0x384>)
 8004832:	0029      	movs	r1, r5
 8004834:	0030      	movs	r0, r6
 8004836:	f010 f89b 	bl	8014970 <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 800483a:	4cce      	ldr	r4, [pc, #824]	; (8004b74 <ParseSnippetCondition+0x388>)
 800483c:	0021      	movs	r1, r4
 800483e:	0030      	movs	r0, r6
 8004840:	f010 ff24 	bl	801568c <strtok>
 8004844:	0005      	movs	r5, r0
		secondPart = strtok ( NULL, " ");
 8004846:	0021      	movs	r1, r4
 8004848:	2000      	movs	r0, #0
 800484a:	f010 ff1f 	bl	801568c <strtok>
 800484e:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004850:	0021      	movs	r1, r4
 8004852:	2000      	movs	r0, #0
 8004854:	f010 ff1a 	bl	801568c <strtok>
 8004858:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 800485a:	2d00      	cmp	r5, #0
 800485c:	d100      	bne.n	8004860 <ParseSnippetCondition+0x74>
 800485e:	e1e5      	b.n	8004c2c <ParseSnippetCondition+0x440>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004860:	0028      	movs	r0, r5
 8004862:	f7fe ffa3 	bl	80037ac <IsModuleParameter>
 8004866:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004868:	d100      	bne.n	800486c <ParseSnippetCondition+0x80>
 800486a:	e18f      	b.n	8004b8c <ParseSnippetCondition+0x3a0>
 800486c:	2e00      	cmp	r6, #0
 800486e:	d000      	beq.n	8004872 <ParseSnippetCondition+0x86>
 8004870:	e18e      	b.n	8004b90 <ParseSnippetCondition+0x3a4>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004872:	2067      	movs	r0, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004874:	2c00      	cmp	r4, #0
 8004876:	d000      	beq.n	800487a <ParseSnippetCondition+0x8e>
 8004878:	e1d4      	b.n	8004c24 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 800487a:	4cbb      	ldr	r4, [pc, #748]	; (8004b68 <ParseSnippetCondition+0x37c>)
 800487c:	7823      	ldrb	r3, [r4, #0]
 800487e:	49bb      	ldr	r1, [pc, #748]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004880:	009a      	lsls	r2, r3, #2
 8004882:	18d0      	adds	r0, r2, r3
 8004884:	0080      	lsls	r0, r0, #2
 8004886:	3602      	adds	r6, #2
 8004888:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 800488a:	180a      	adds	r2, r1, r0
 800488c:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800488e:	3301      	adds	r3, #1
 8004890:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004892:	2000      	movs	r0, #0
 8004894:	e1c6      	b.n	8004c24 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004896:	786e      	ldrb	r6, [r5, #1]
 8004898:	3e30      	subs	r6, #48	; 0x30
 800489a:	b2f6      	uxtb	r6, r6
	BOS_Status status = BOS_OK;
 800489c:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 800489e:	2e05      	cmp	r6, #5
 80048a0:	d900      	bls.n	80048a4 <ParseSnippetCondition+0xb8>
 80048a2:	e1bf      	b.n	8004c24 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80048a4:	4ab1      	ldr	r2, [pc, #708]	; (8004b6c <ParseSnippetCondition+0x380>)
 80048a6:	00a3      	lsls	r3, r4, #2
 80048a8:	1919      	adds	r1, r3, r4
 80048aa:	0089      	lsls	r1, r1, #2
 80048ac:	3001      	adds	r0, #1
 80048ae:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 80048b0:	1853      	adds	r3, r2, r1
 80048b2:	2200      	movs	r2, #0
 80048b4:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 80048b6:	709e      	strb	r6, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 80048b8:	1cef      	adds	r7, r5, #3
 80048ba:	3207      	adds	r2, #7
 80048bc:	49ae      	ldr	r1, [pc, #696]	; (8004b78 <ParseSnippetCondition+0x38c>)
 80048be:	0038      	movs	r0, r7
 80048c0:	f010 f85e 	bl	8014980 <strncmp>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d121      	bne.n	800490c <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 80048c8:	00a3      	lsls	r3, r4, #2
 80048ca:	191c      	adds	r4, r3, r4
 80048cc:	00a4      	lsls	r4, r4, #2
 80048ce:	4ba7      	ldr	r3, [pc, #668]	; (8004b6c <ParseSnippetCondition+0x380>)
 80048d0:	191c      	adds	r4, r3, r4
 80048d2:	2305      	movs	r3, #5
 80048d4:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80048d6:	00f2      	lsls	r2, r6, #3
 80048d8:	1992      	adds	r2, r2, r6
 80048da:	4ba8      	ldr	r3, [pc, #672]	; (8004b7c <ParseSnippetCondition+0x390>)
 80048dc:	189b      	adds	r3, r3, r2
 80048de:	7a1b      	ldrb	r3, [r3, #8]
 80048e0:	07db      	lsls	r3, r3, #31
 80048e2:	d504      	bpl.n	80048ee <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80048e4:	4aa0      	ldr	r2, [pc, #640]	; (8004b68 <ParseSnippetCondition+0x37c>)
 80048e6:	7813      	ldrb	r3, [r2, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	7013      	strb	r3, [r2, #0]
 80048ec:	e19a      	b.n	8004c24 <ParseSnippetCondition+0x438>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80048ee:	2301      	movs	r3, #1
 80048f0:	9305      	str	r3, [sp, #20]
 80048f2:	2300      	movs	r3, #0
 80048f4:	9304      	str	r3, [sp, #16]
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	9302      	str	r3, [sp, #8]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	2101      	movs	r1, #1
 8004902:	0030      	movs	r0, r6
 8004904:	f003 fd74 	bl	80083f0 <SetButtonEvents>
				status = BOS_OK;
 8004908:	2000      	movs	r0, #0
 800490a:	e7eb      	b.n	80048e4 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 800490c:	220e      	movs	r2, #14
 800490e:	499c      	ldr	r1, [pc, #624]	; (8004b80 <ParseSnippetCondition+0x394>)
 8004910:	0038      	movs	r0, r7
 8004912:	f010 f835 	bl	8014980 <strncmp>
 8004916:	2800      	cmp	r0, #0
 8004918:	d11c      	bne.n	8004954 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 800491a:	00a3      	lsls	r3, r4, #2
 800491c:	191c      	adds	r4, r3, r4
 800491e:	00a4      	lsls	r4, r4, #2
 8004920:	4b92      	ldr	r3, [pc, #584]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004922:	191c      	adds	r4, r3, r4
 8004924:	2306      	movs	r3, #6
 8004926:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004928:	00f2      	lsls	r2, r6, #3
 800492a:	1992      	adds	r2, r2, r6
 800492c:	4b93      	ldr	r3, [pc, #588]	; (8004b7c <ParseSnippetCondition+0x390>)
 800492e:	189b      	adds	r3, r3, r2
 8004930:	7a1b      	ldrb	r3, [r3, #8]
 8004932:	079b      	lsls	r3, r3, #30
 8004934:	d4d6      	bmi.n	80048e4 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004936:	2301      	movs	r3, #1
 8004938:	9305      	str	r3, [sp, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	9303      	str	r3, [sp, #12]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	2100      	movs	r1, #0
 800494a:	0030      	movs	r0, r6
 800494c:	f003 fd50 	bl	80083f0 <SetButtonEvents>
				status = BOS_OK;					
 8004950:	2000      	movs	r0, #0
 8004952:	e7c7      	b.n	80048e4 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004954:	220c      	movs	r2, #12
 8004956:	498b      	ldr	r1, [pc, #556]	; (8004b84 <ParseSnippetCondition+0x398>)
 8004958:	0038      	movs	r0, r7
 800495a:	f010 f811 	bl	8014980 <strncmp>
 800495e:	2800      	cmp	r0, #0
 8004960:	d17a      	bne.n	8004a58 <ParseSnippetCondition+0x26c>
				if (!button[port].pressedX1Sec) {	
 8004962:	00f2      	lsls	r2, r6, #3
 8004964:	1992      	adds	r2, r2, r6
 8004966:	4b85      	ldr	r3, [pc, #532]	; (8004b7c <ParseSnippetCondition+0x390>)
 8004968:	189b      	adds	r3, r3, r2
 800496a:	789b      	ldrb	r3, [r3, #2]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d030      	beq.n	80049d2 <ParseSnippetCondition+0x1e6>
				} else if (!button[port].pressedX2Sec) {	
 8004970:	00f2      	lsls	r2, r6, #3
 8004972:	1992      	adds	r2, r2, r6
 8004974:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <ParseSnippetCondition+0x390>)
 8004976:	189b      	adds	r3, r3, r2
 8004978:	78db      	ldrb	r3, [r3, #3]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d04a      	beq.n	8004a14 <ParseSnippetCondition+0x228>
				} else if (!button[port].pressedX3Sec) {	
 800497e:	00f2      	lsls	r2, r6, #3
 8004980:	1992      	adds	r2, r2, r6
 8004982:	4b7e      	ldr	r3, [pc, #504]	; (8004b7c <ParseSnippetCondition+0x390>)
 8004984:	189b      	adds	r3, r3, r2
 8004986:	791b      	ldrb	r3, [r3, #4]
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004988:	200c      	movs	r0, #12
				} else if (!button[port].pressedX3Sec) {	
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1aa      	bne.n	80048e4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 800498e:	4f77      	ldr	r7, [pc, #476]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004990:	00a3      	lsls	r3, r4, #2
 8004992:	191b      	adds	r3, r3, r4
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	220b      	movs	r2, #11
 800499a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 800499c:	0028      	movs	r0, r5
 800499e:	300f      	adds	r0, #15
 80049a0:	f00e ffcb 	bl	801393a <atoi>
 80049a4:	b2c0      	uxtb	r0, r0
 80049a6:	4b70      	ldr	r3, [pc, #448]	; (8004b68 <ParseSnippetCondition+0x37c>)
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	0093      	lsls	r3, r2, #2
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	18ff      	adds	r7, r7, r3
 80049b2:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80049b4:	2301      	movs	r3, #1
 80049b6:	9305      	str	r3, [sp, #20]
 80049b8:	2300      	movs	r3, #0
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	9302      	str	r3, [sp, #8]
 80049c0:	9001      	str	r0, [sp, #4]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2100      	movs	r1, #0
 80049c8:	0030      	movs	r0, r6
 80049ca:	f003 fd11 	bl	80083f0 <SetButtonEvents>
					status = BOS_OK;	
 80049ce:	2000      	movs	r0, #0
 80049d0:	e788      	b.n	80048e4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 80049d2:	4f66      	ldr	r7, [pc, #408]	; (8004b6c <ParseSnippetCondition+0x380>)
 80049d4:	00a3      	lsls	r3, r4, #2
 80049d6:	191b      	adds	r3, r3, r4
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	2209      	movs	r2, #9
 80049de:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 80049e0:	0028      	movs	r0, r5
 80049e2:	300f      	adds	r0, #15
 80049e4:	f00e ffa9 	bl	801393a <atoi>
 80049e8:	b2c3      	uxtb	r3, r0
 80049ea:	4a5f      	ldr	r2, [pc, #380]	; (8004b68 <ParseSnippetCondition+0x37c>)
 80049ec:	7811      	ldrb	r1, [r2, #0]
 80049ee:	008a      	lsls	r2, r1, #2
 80049f0:	1852      	adds	r2, r2, r1
 80049f2:	0092      	lsls	r2, r2, #2
 80049f4:	18bf      	adds	r7, r7, r2
 80049f6:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 80049f8:	2201      	movs	r2, #1
 80049fa:	9205      	str	r2, [sp, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	9204      	str	r2, [sp, #16]
 8004a00:	9203      	str	r2, [sp, #12]
 8004a02:	9202      	str	r2, [sp, #8]
 8004a04:	9201      	str	r2, [sp, #4]
 8004a06:	9200      	str	r2, [sp, #0]
 8004a08:	2100      	movs	r1, #0
 8004a0a:	0030      	movs	r0, r6
 8004a0c:	f003 fcf0 	bl	80083f0 <SetButtonEvents>
					status = BOS_OK;
 8004a10:	2000      	movs	r0, #0
 8004a12:	e767      	b.n	80048e4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8004a14:	4f55      	ldr	r7, [pc, #340]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004a16:	00a3      	lsls	r3, r4, #2
 8004a18:	191b      	adds	r3, r3, r4
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	220a      	movs	r2, #10
 8004a20:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004a22:	0028      	movs	r0, r5
 8004a24:	300f      	adds	r0, #15
 8004a26:	f00e ff88 	bl	801393a <atoi>
 8004a2a:	b2c0      	uxtb	r0, r0
 8004a2c:	4b4e      	ldr	r3, [pc, #312]	; (8004b68 <ParseSnippetCondition+0x37c>)
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	0093      	lsls	r3, r2, #2
 8004a32:	189b      	adds	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	18ff      	adds	r7, r7, r3
 8004a38:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	9305      	str	r3, [sp, #20]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9304      	str	r3, [sp, #16]
 8004a42:	9303      	str	r3, [sp, #12]
 8004a44:	9302      	str	r3, [sp, #8]
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	9000      	str	r0, [sp, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	0030      	movs	r0, r6
 8004a50:	f003 fcce 	bl	80083f0 <SetButtonEvents>
					status = BOS_OK;		
 8004a54:	2000      	movs	r0, #0
 8004a56:	e745      	b.n	80048e4 <ParseSnippetCondition+0xf8>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004a58:	220d      	movs	r2, #13
 8004a5a:	494b      	ldr	r1, [pc, #300]	; (8004b88 <ParseSnippetCondition+0x39c>)
 8004a5c:	0038      	movs	r0, r7
 8004a5e:	f00f ff8f 	bl	8014980 <strncmp>
 8004a62:	0003      	movs	r3, r0
	BOS_Status status = BOS_OK;
 8004a64:	2000      	movs	r0, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d000      	beq.n	8004a6c <ParseSnippetCondition+0x280>
 8004a6a:	e73b      	b.n	80048e4 <ParseSnippetCondition+0xf8>
				if (!button[port].releasedY1Sec) {	
 8004a6c:	00f2      	lsls	r2, r6, #3
 8004a6e:	1992      	adds	r2, r2, r6
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <ParseSnippetCondition+0x390>)
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	795b      	ldrb	r3, [r3, #5]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d031      	beq.n	8004ade <ParseSnippetCondition+0x2f2>
				} else if (!button[port].releasedY2Sec) {	
 8004a7a:	00f2      	lsls	r2, r6, #3
 8004a7c:	1992      	adds	r2, r2, r6
 8004a7e:	4b3f      	ldr	r3, [pc, #252]	; (8004b7c <ParseSnippetCondition+0x390>)
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	799b      	ldrb	r3, [r3, #6]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d04c      	beq.n	8004b22 <ParseSnippetCondition+0x336>
				} else if (!button[port].releasedY3Sec) {	
 8004a88:	00f2      	lsls	r2, r6, #3
 8004a8a:	1992      	adds	r2, r2, r6
 8004a8c:	4b3b      	ldr	r3, [pc, #236]	; (8004b7c <ParseSnippetCondition+0x390>)
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	79db      	ldrb	r3, [r3, #7]
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a92:	200d      	movs	r0, #13
				} else if (!button[port].releasedY3Sec) {	
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d000      	beq.n	8004a9a <ParseSnippetCondition+0x2ae>
 8004a98:	e724      	b.n	80048e4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004a9a:	4f34      	ldr	r7, [pc, #208]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	4698      	mov	r8, r3
 8004aa0:	435c      	muls	r4, r3
 8004aa2:	193c      	adds	r4, r7, r4
 8004aa4:	3b06      	subs	r3, #6
 8004aa6:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004aa8:	0028      	movs	r0, r5
 8004aaa:	3010      	adds	r0, #16
 8004aac:	f00e ff45 	bl	801393a <atoi>
 8004ab0:	b2c0      	uxtb	r0, r0
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <ParseSnippetCondition+0x37c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	4353      	muls	r3, r2
 8004aba:	18ff      	adds	r7, r7, r3
 8004abc:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004abe:	2301      	movs	r3, #1
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	9004      	str	r0, [sp, #16]
 8004ac4:	2400      	movs	r4, #0
 8004ac6:	9403      	str	r4, [sp, #12]
 8004ac8:	9402      	str	r4, [sp, #8]
 8004aca:	9401      	str	r4, [sp, #4]
 8004acc:	9400      	str	r4, [sp, #0]
 8004ace:	0023      	movs	r3, r4
 8004ad0:	0022      	movs	r2, r4
 8004ad2:	0021      	movs	r1, r4
 8004ad4:	0030      	movs	r0, r6
 8004ad6:	f003 fc8b 	bl	80083f0 <SetButtonEvents>
					status = BOS_OK;	
 8004ada:	0020      	movs	r0, r4
 8004adc:	e702      	b.n	80048e4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8004ade:	4f23      	ldr	r7, [pc, #140]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004ae0:	00a3      	lsls	r3, r4, #2
 8004ae2:	191b      	adds	r3, r3, r4
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	18fb      	adds	r3, r7, r3
 8004ae8:	220c      	movs	r2, #12
 8004aea:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004aec:	0028      	movs	r0, r5
 8004aee:	3010      	adds	r0, #16
 8004af0:	f00e ff23 	bl	801393a <atoi>
 8004af4:	b2c0      	uxtb	r0, r0
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <ParseSnippetCondition+0x37c>)
 8004af8:	781a      	ldrb	r2, [r3, #0]
 8004afa:	0093      	lsls	r3, r2, #2
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	18ff      	adds	r7, r7, r3
 8004b02:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004b04:	2301      	movs	r3, #1
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9304      	str	r3, [sp, #16]
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	9002      	str	r0, [sp, #8]
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	0030      	movs	r0, r6
 8004b1a:	f003 fc69 	bl	80083f0 <SetButtonEvents>
					status = BOS_OK;
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e6e0      	b.n	80048e4 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004b22:	4f12      	ldr	r7, [pc, #72]	; (8004b6c <ParseSnippetCondition+0x380>)
 8004b24:	00a3      	lsls	r3, r4, #2
 8004b26:	191b      	adds	r3, r3, r4
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	220d      	movs	r2, #13
 8004b2e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004b30:	0028      	movs	r0, r5
 8004b32:	3010      	adds	r0, #16
 8004b34:	f00e ff01 	bl	801393a <atoi>
 8004b38:	b2c0      	uxtb	r0, r0
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <ParseSnippetCondition+0x37c>)
 8004b3c:	781a      	ldrb	r2, [r3, #0]
 8004b3e:	0093      	lsls	r3, r2, #2
 8004b40:	189b      	adds	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	18ff      	adds	r7, r7, r3
 8004b46:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004b48:	2301      	movs	r3, #1
 8004b4a:	9305      	str	r3, [sp, #20]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	9003      	str	r0, [sp, #12]
 8004b52:	9302      	str	r3, [sp, #8]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	0030      	movs	r0, r6
 8004b5e:	f003 fc47 	bl	80083f0 <SetButtonEvents>
					status = BOS_OK;		
 8004b62:	2000      	movs	r0, #0
 8004b64:	e6be      	b.n	80048e4 <ParseSnippetCondition+0xf8>
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	20000a07 	.word	0x20000a07
 8004b6c:	20006148 	.word	0x20006148
 8004b70:	2000096c 	.word	0x2000096c
 8004b74:	080179dc 	.word	0x080179dc
 8004b78:	08018fdc 	.word	0x08018fdc
 8004b7c:	20000cb4 	.word	0x20000cb4
 8004b80:	08018060 	.word	0x08018060
 8004b84:	08018070 	.word	0x08018070
 8004b88:	08018080 	.word	0x08018080
			else if (secondPart != NULL && thirdPart != NULL) 
 8004b8c:	2e00      	cmp	r6, #0
 8004b8e:	d04f      	beq.n	8004c30 <ParseSnippetCondition+0x444>
 8004b90:	2c00      	cmp	r4, #0
 8004b92:	d04f      	beq.n	8004c34 <ParseSnippetCondition+0x448>
				modPar2 = IsModuleParameter(thirdPart);
 8004b94:	0020      	movs	r0, r4
 8004b96:	f7fe fe09 	bl	80037ac <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d024      	beq.n	8004be8 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004b9e:	4b27      	ldr	r3, [pc, #156]	; (8004c3c <ParseSnippetCondition+0x450>)
 8004ba0:	781c      	ldrb	r4, [r3, #0]
 8004ba2:	4a27      	ldr	r2, [pc, #156]	; (8004c40 <ParseSnippetCondition+0x454>)
 8004ba4:	00a3      	lsls	r3, r4, #2
 8004ba6:	1919      	adds	r1, r3, r4
 8004ba8:	0089      	lsls	r1, r1, #2
 8004baa:	2704      	movs	r7, #4
 8004bac:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004bae:	1919      	adds	r1, r3, r4
 8004bb0:	0089      	lsls	r1, r1, #2
 8004bb2:	1851      	adds	r1, r2, r1
 8004bb4:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004bb6:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004bb8:	4d20      	ldr	r5, [pc, #128]	; (8004c3c <ParseSnippetCondition+0x450>)
 8004bba:	782c      	ldrb	r4, [r5, #0]
 8004bbc:	0030      	movs	r0, r6
 8004bbe:	f7fe fe01 	bl	80037c4 <IsMathOperator>
 8004bc2:	491f      	ldr	r1, [pc, #124]	; (8004c40 <ParseSnippetCondition+0x454>)
 8004bc4:	00a3      	lsls	r3, r4, #2
 8004bc6:	191b      	adds	r3, r3, r4
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	18cb      	adds	r3, r1, r3
 8004bcc:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bce:	782a      	ldrb	r2, [r5, #0]
 8004bd0:	0093      	lsls	r3, r2, #2
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18cb      	adds	r3, r1, r3
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02c      	beq.n	8004c38 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004bde:	3201      	adds	r2, #1
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <ParseSnippetCondition+0x450>)
 8004be2:	701a      	strb	r2, [r3, #0]
				return BOS_OK;				
 8004be4:	2000      	movs	r0, #0
 8004be6:	e01d      	b.n	8004c24 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <ParseSnippetCondition+0x450>)
 8004bea:	4698      	mov	r8, r3
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	4f14      	ldr	r7, [pc, #80]	; (8004c40 <ParseSnippetCondition+0x454>)
 8004bf0:	0093      	lsls	r3, r2, #2
 8004bf2:	1899      	adds	r1, r3, r2
 8004bf4:	0089      	lsls	r1, r1, #2
 8004bf6:	2003      	movs	r0, #3
 8004bf8:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004bfa:	187b      	adds	r3, r7, r1
 8004bfc:	70dd      	strb	r5, [r3, #3]
					float constant = atof(thirdPart);
 8004bfe:	0020      	movs	r0, r4
 8004c00:	f00e fe96 	bl	8013930 <atof>
 8004c04:	f7fe f806 	bl	8002c14 <__aeabi_d2f>
 8004c08:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c0a:	4643      	mov	r3, r8
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	0098      	lsls	r0, r3, #2
 8004c10:	18c0      	adds	r0, r0, r3
 8004c12:	0080      	lsls	r0, r0, #2
 8004c14:	3006      	adds	r0, #6
 8004c16:	19c0      	adds	r0, r0, r7
 8004c18:	2204      	movs	r2, #4
 8004c1a:	a907      	add	r1, sp, #28
 8004c1c:	f00e ff05 	bl	8013a2a <memcpy>
 8004c20:	e7ca      	b.n	8004bb8 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004c22:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004c24:	b008      	add	sp, #32
 8004c26:	bc04      	pop	{r2}
 8004c28:	4690      	mov	r8, r2
 8004c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004c2c:	2067      	movs	r0, #103	; 0x67
 8004c2e:	e7f9      	b.n	8004c24 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004c30:	2067      	movs	r0, #103	; 0x67
 8004c32:	e7f7      	b.n	8004c24 <ParseSnippetCondition+0x438>
 8004c34:	2067      	movs	r0, #103	; 0x67
 8004c36:	e7f5      	b.n	8004c24 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004c38:	2067      	movs	r0, #103	; 0x67
 8004c3a:	e7f3      	b.n	8004c24 <ParseSnippetCondition+0x438>
 8004c3c:	20000a07 	.word	0x20000a07
 8004c40:	20006148 	.word	0x20006148

08004c44 <AddSnippet>:
{
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	000c      	movs	r4, r1
	switch (code)
 8004c48:	2802      	cmp	r0, #2
 8004c4a:	d017      	beq.n	8004c7c <AddSnippet+0x38>
 8004c4c:	2803      	cmp	r0, #3
 8004c4e:	d003      	beq.n	8004c58 <AddSnippet+0x14>
 8004c50:	2801      	cmp	r0, #1
 8004c52:	d00f      	beq.n	8004c74 <AddSnippet+0x30>
	return BOS_OK;
 8004c54:	2000      	movs	r0, #0
 8004c56:	e00c      	b.n	8004c72 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets-1].state = true;
 8004c58:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <AddSnippet+0xec>)
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	3a01      	subs	r2, #1
 8004c5e:	0093      	lsls	r3, r2, #2
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4a33      	ldr	r2, [pc, #204]	; (8004d34 <AddSnippet+0xf0>)
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	2201      	movs	r2, #1
 8004c6a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c6c:	f006 fc44 	bl	800b4f8 <SaveToRO>
	return BOS_OK;
 8004c70:	2000      	movs	r0, #0
}
 8004c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c74:	0008      	movs	r0, r1
 8004c76:	f7ff fdb9 	bl	80047ec <ParseSnippetCondition>
 8004c7a:	e7fa      	b.n	8004c72 <AddSnippet+0x2e>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <AddSnippet+0xec>)
 8004c7e:	781d      	ldrb	r5, [r3, #0]
 8004c80:	3d01      	subs	r5, #1
 8004c82:	00ab      	lsls	r3, r5, #2
 8004c84:	195b      	adds	r3, r3, r5
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <AddSnippet+0xf0>)
 8004c8a:	18d3      	adds	r3, r2, r3
 8004c8c:	68de      	ldr	r6, [r3, #12]
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d03d      	beq.n	8004d0e <AddSnippet+0xca>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 8004c92:	0030      	movs	r0, r6
 8004c94:	f7fb fa40 	bl	8000118 <strlen>
 8004c98:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8004c9a:	0020      	movs	r0, r4
 8004c9c:	f7fb fa3c 	bl	8000118 <strlen>
 8004ca0:	1839      	adds	r1, r7, r0
 8004ca2:	3102      	adds	r1, #2
 8004ca4:	0030      	movs	r0, r6
 8004ca6:	f00f fe07 	bl	80148b8 <realloc>
 8004caa:	4e22      	ldr	r6, [pc, #136]	; (8004d34 <AddSnippet+0xf0>)
 8004cac:	00ab      	lsls	r3, r5, #2
 8004cae:	195d      	adds	r5, r3, r5
 8004cb0:	00ad      	lsls	r5, r5, #2
 8004cb2:	1975      	adds	r5, r6, r5
 8004cb4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8004cb6:	4d1e      	ldr	r5, [pc, #120]	; (8004d30 <AddSnippet+0xec>)
 8004cb8:	782a      	ldrb	r2, [r5, #0]
 8004cba:	3a01      	subs	r2, #1
 8004cbc:	0093      	lsls	r3, r2, #2
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	18f3      	adds	r3, r6, r3
 8004cc4:	1c7a      	adds	r2, r7, #1
 8004cc6:	68d8      	ldr	r0, [r3, #12]
 8004cc8:	1880      	adds	r0, r0, r2
 8004cca:	0021      	movs	r1, r4
 8004ccc:	f00f fe50 	bl	8014970 <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 8004cd0:	782a      	ldrb	r2, [r5, #0]
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	0093      	lsls	r3, r2, #2
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	18f6      	adds	r6, r6, r3
 8004cdc:	68f3      	ldr	r3, [r6, #12]
 8004cde:	2213      	movs	r2, #19
 8004ce0:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <AddSnippet+0xec>)
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	3a01      	subs	r2, #1
 8004ce8:	0093      	lsls	r3, r2, #2
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4911      	ldr	r1, [pc, #68]	; (8004d34 <AddSnippet+0xf0>)
 8004cf0:	18cb      	adds	r3, r1, r3
 8004cf2:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004cf4:	2000      	movs	r0, #0
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1bb      	bne.n	8004c72 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 8004cfa:	0090      	lsls	r0, r2, #2
 8004cfc:	1880      	adds	r0, r0, r2
 8004cfe:	0080      	lsls	r0, r0, #2
 8004d00:	1840      	adds	r0, r0, r1
 8004d02:	2214      	movs	r2, #20
 8004d04:	2100      	movs	r1, #0
 8004d06:	f00e fe99 	bl	8013a3c <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004d0a:	200e      	movs	r0, #14
 8004d0c:	e7b1      	b.n	8004c72 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 8004d0e:	0008      	movs	r0, r1
 8004d10:	f7fb fa02 	bl	8000118 <strlen>
 8004d14:	3001      	adds	r0, #1
 8004d16:	f00e fe53 	bl	80139c0 <malloc>
 8004d1a:	00ab      	lsls	r3, r5, #2
 8004d1c:	195d      	adds	r5, r3, r5
 8004d1e:	00ad      	lsls	r5, r5, #2
 8004d20:	4b04      	ldr	r3, [pc, #16]	; (8004d34 <AddSnippet+0xf0>)
 8004d22:	195d      	adds	r5, r3, r5
 8004d24:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 8004d26:	0021      	movs	r1, r4
 8004d28:	f00f fe22 	bl	8014970 <strcpy>
 8004d2c:	e7d9      	b.n	8004ce2 <AddSnippet+0x9e>
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	20000a07 	.word	0x20000a07
 8004d34:	20006148 	.word	0x20006148

08004d38 <CLI_CommandParser>:
{
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	46de      	mov	lr, fp
 8004d3c:	4657      	mov	r7, sl
 8004d3e:	464e      	mov	r6, r9
 8004d40:	4645      	mov	r5, r8
 8004d42:	b5e0      	push	{r5, r6, r7, lr}
 8004d44:	b08b      	sub	sp, #44	; 0x2c
 8004d46:	9004      	str	r0, [sp, #16]
 8004d48:	4688      	mov	r8, r1
 8004d4a:	9203      	str	r2, [sp, #12]
 8004d4c:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 8004d4e:	2209      	movs	r2, #9
 8004d50:	2100      	movs	r1, #0
 8004d52:	a807      	add	r0, sp, #28
 8004d54:	f00e fe72 	bl	8013a3c <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004d58:	4fd5      	ldr	r7, [pc, #852]	; (80050b0 <CLI_CommandParser+0x378>)
				if (id == myID) {
 8004d5a:	002e      	movs	r6, r5
 8004d5c:	e034      	b.n	8004dc8 <CLI_CommandParser+0x90>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d5e:	2252      	movs	r2, #82	; 0x52
 8004d60:	49d4      	ldr	r1, [pc, #848]	; (80050b4 <CLI_CommandParser+0x37c>)
 8004d62:	0020      	movs	r0, r4
 8004d64:	f00e fe61 	bl	8013a2a <memcpy>
				recordSnippet = 0;
 8004d68:	4bd1      	ldr	r3, [pc, #836]	; (80050b0 <CLI_CommandParser+0x378>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e044      	b.n	8004dfa <CLI_CommandParser+0xc2>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8004d70:	2206      	movs	r2, #6
 8004d72:	49d1      	ldr	r1, [pc, #836]	; (80050b8 <CLI_CommandParser+0x380>)
 8004d74:	9803      	ldr	r0, [sp, #12]
 8004d76:	f00f fe03 	bl	8014980 <strncmp>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d053      	beq.n	8004e26 <CLI_CommandParser+0xee>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8004d7e:	2d02      	cmp	r5, #2
 8004d80:	d05e      	beq.n	8004e40 <CLI_CommandParser+0x108>
			loc = strchr( ( char * ) cInputString, '.');
 8004d82:	212e      	movs	r1, #46	; 0x2e
 8004d84:	9803      	ldr	r0, [sp, #12]
 8004d86:	f00f fde5 	bl	8014954 <strchr>
 8004d8a:	1e05      	subs	r5, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004d8c:	d006      	beq.n	8004d9c <CLI_CommandParser+0x64>
 8004d8e:	3803      	subs	r0, #3
 8004d90:	2203      	movs	r2, #3
 8004d92:	49ca      	ldr	r1, [pc, #808]	; (80050bc <CLI_CommandParser+0x384>)
 8004d94:	f00f fdf4 	bl	8014980 <strncmp>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d160      	bne.n	8004e5e <CLI_CommandParser+0x126>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004d9c:	2299      	movs	r2, #153	; 0x99
 8004d9e:	0092      	lsls	r2, r2, #2
 8004da0:	0021      	movs	r1, r4
 8004da2:	9803      	ldr	r0, [sp, #12]
 8004da4:	f009 fb5a 	bl	800e45c <FreeRTOS_CLIProcessCommand>
 8004da8:	0006      	movs	r6, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004daa:	7823      	ldrb	r3, [r4, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d000      	beq.n	8004db2 <CLI_CommandParser+0x7a>
 8004db0:	e16f      	b.n	8005092 <CLI_CommandParser+0x35a>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8004db2:	0020      	movs	r0, r4
 8004db4:	f7fb f9b0 	bl	8000118 <strlen>
 8004db8:	0002      	movs	r2, r0
 8004dba:	2100      	movs	r1, #0
 8004dbc:	0020      	movs	r0, r4
 8004dbe:	f00e fe3d 	bl	8013a3c <memset>
	} while( xReturned != pdFALSE );
 8004dc2:	2e00      	cmp	r6, #0
 8004dc4:	d100      	bne.n	8004dc8 <CLI_CommandParser+0x90>
 8004dc6:	e1ab      	b.n	8005120 <CLI_CommandParser+0x3e8>
		StringToLowerCase(( char * )cInputString);
 8004dc8:	9803      	ldr	r0, [sp, #12]
 8004dca:	f7ff fcf7 	bl	80047bc <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8004dce:	783d      	ldrb	r5, [r7, #0]
 8004dd0:	2d00      	cmp	r5, #0
 8004dd2:	d1cd      	bne.n	8004d70 <CLI_CommandParser+0x38>
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	49ba      	ldr	r1, [pc, #744]	; (80050c0 <CLI_CommandParser+0x388>)
 8004dd8:	9803      	ldr	r0, [sp, #12]
 8004dda:	f00f fdd1 	bl	8014980 <strncmp>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d1cf      	bne.n	8004d82 <CLI_CommandParser+0x4a>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	1cd9      	adds	r1, r3, #3
 8004de6:	3001      	adds	r0, #1
 8004de8:	f7ff ff2c 	bl	8004c44 <AddSnippet>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1b6      	bne.n	8004d5e <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004df0:	4baf      	ldr	r3, [pc, #700]	; (80050b0 <CLI_CommandParser+0x378>)
 8004df2:	2202      	movs	r2, #2
 8004df4:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8004df6:	230d      	movs	r3, #13
 8004df8:	7023      	strb	r3, [r4, #0]
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8004dfa:	7823      	ldrb	r3, [r4, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d100      	bne.n	8004e02 <CLI_CommandParser+0xca>
 8004e00:	e186      	b.n	8005110 <CLI_CommandParser+0x3d8>
 8004e02:	4643      	mov	r3, r8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d100      	bne.n	8004e0a <CLI_CommandParser+0xd2>
 8004e08:	e19d      	b.n	8005146 <CLI_CommandParser+0x40e>
 8004e0a:	2600      	movs	r6, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 8004e0c:	0020      	movs	r0, r4
 8004e0e:	f7fb f983 	bl	8000118 <strlen>
 8004e12:	b282      	uxth	r2, r0
 8004e14:	2301      	movs	r3, #1
 8004e16:	425b      	negs	r3, r3
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	3333      	adds	r3, #51	; 0x33
 8004e1c:	0021      	movs	r1, r4
 8004e1e:	9804      	ldr	r0, [sp, #16]
 8004e20:	f009 f958 	bl	800e0d4 <writePxMutex>
 8004e24:	e7c5      	b.n	8004db2 <CLI_CommandParser+0x7a>
			recordSnippet = 0;
 8004e26:	4ba2      	ldr	r3, [pc, #648]	; (80050b0 <CLI_CommandParser+0x378>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8004e2c:	49a5      	ldr	r1, [pc, #660]	; (80050c4 <CLI_CommandParser+0x38c>)
 8004e2e:	3003      	adds	r0, #3
 8004e30:	f7ff ff08 	bl	8004c44 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 8004e34:	2241      	movs	r2, #65	; 0x41
 8004e36:	49a4      	ldr	r1, [pc, #656]	; (80050c8 <CLI_CommandParser+0x390>)
 8004e38:	0020      	movs	r0, r4
 8004e3a:	f00e fdf6 	bl	8013a2a <memcpy>
			xReturned = pdFALSE;
 8004e3e:	e7dc      	b.n	8004dfa <CLI_CommandParser+0xc2>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 8004e40:	9903      	ldr	r1, [sp, #12]
 8004e42:	2002      	movs	r0, #2
 8004e44:	f7ff fefe 	bl	8004c44 <AddSnippet>
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	d102      	bne.n	8004e52 <CLI_CommandParser+0x11a>
				pcOutputString[0] = '\r';
 8004e4c:	230d      	movs	r3, #13
 8004e4e:	7023      	strb	r3, [r4, #0]
 8004e50:	e7d3      	b.n	8004dfa <CLI_CommandParser+0xc2>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e52:	2252      	movs	r2, #82	; 0x52
 8004e54:	4997      	ldr	r1, [pc, #604]	; (80050b4 <CLI_CommandParser+0x37c>)
 8004e56:	0020      	movs	r0, r4
 8004e58:	f00e fde7 	bl	8013a2a <memcpy>
 8004e5c:	e7cd      	b.n	8004dfa <CLI_CommandParser+0xc2>
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 8004e5e:	f00e fda1 	bl	80139a4 <__locale_ctype_ptr>
 8004e62:	786b      	ldrb	r3, [r5, #1]
 8004e64:	18c0      	adds	r0, r0, r3
 8004e66:	7843      	ldrb	r3, [r0, #1]
 8004e68:	075b      	lsls	r3, r3, #29
 8004e6a:	d497      	bmi.n	8004d9c <CLI_CommandParser+0x64>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 8004e6c:	9903      	ldr	r1, [sp, #12]
 8004e6e:	1a6a      	subs	r2, r5, r1
 8004e70:	a807      	add	r0, sp, #28
 8004e72:	f00f fd96 	bl	80149a2 <strncpy>
				id = GetID(idString);
 8004e76:	a807      	add	r0, sp, #28
 8004e78:	f7ff f9a6 	bl	80041c8 <GetID>
 8004e7c:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 8004e7e:	4a93      	ldr	r2, [pc, #588]	; (80050cc <CLI_CommandParser+0x394>)
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	4693      	mov	fp, r2
 8004e84:	4290      	cmp	r0, r2
 8004e86:	d03d      	beq.n	8004f04 <CLI_CommandParser+0x1cc>
				}	else if (id == BOS_ERR_WrongName) {		
 8004e88:	2864      	cmp	r0, #100	; 0x64
 8004e8a:	d043      	beq.n	8004f14 <CLI_CommandParser+0x1dc>
				}	else if (id == BOS_ERR_WrongID) {
 8004e8c:	2866      	cmp	r0, #102	; 0x66
 8004e8e:	d047      	beq.n	8004f20 <CLI_CommandParser+0x1e8>
				}	else if (id == BOS_BROADCAST) {
 8004e90:	28ff      	cmp	r0, #255	; 0xff
 8004e92:	d04b      	beq.n	8004f2c <CLI_CommandParser+0x1f4>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 8004e94:	466b      	mov	r3, sp
 8004e96:	7d1b      	ldrb	r3, [r3, #20]
 8004e98:	469a      	mov	sl, r3
 8004e9a:	2bfe      	cmp	r3, #254	; 0xfe
 8004e9c:	d078      	beq.n	8004f90 <CLI_CommandParser+0x258>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8004e9e:	3501      	adds	r5, #1
 8004ea0:	2206      	movs	r2, #6
 8004ea2:	498b      	ldr	r1, [pc, #556]	; (80050d0 <CLI_CommandParser+0x398>)
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f00f fd6b 	bl	8014980 <strncmp>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d000      	beq.n	8004eb0 <CLI_CommandParser+0x178>
 8004eae:	e0b4      	b.n	800501a <CLI_CommandParser+0x2e2>
						BOS.response = BOS_RESPONSE_NONE;				
 8004eb0:	4b88      	ldr	r3, [pc, #544]	; (80050d4 <CLI_CommandParser+0x39c>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 8004eb6:	2119      	movs	r1, #25
 8004eb8:	4650      	mov	r0, sl
 8004eba:	f004 fbf9 	bl	80096b0 <SendMessageToModule>
						osDelay(100);
 8004ebe:	2064      	movs	r0, #100	; 0x64
 8004ec0:	f009 fa35 	bl	800e32e <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8004ec4:	4b84      	ldr	r3, [pc, #528]	; (80050d8 <CLI_CommandParser+0x3a0>)
 8004ec6:	781a      	ldrb	r2, [r3, #0]
 8004ec8:	4b80      	ldr	r3, [pc, #512]	; (80050cc <CLI_CommandParser+0x394>)
 8004eca:	7818      	ldrb	r0, [r3, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4651      	mov	r1, sl
 8004ed0:	f7fe fe54 	bl	8003b7c <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8004ed4:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <CLI_CommandParser+0x39c>)
 8004ed6:	799b      	ldrb	r3, [r3, #6]
 8004ed8:	2b60      	cmp	r3, #96	; 0x60
 8004eda:	d18e      	bne.n	8004dfa <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8004edc:	21fa      	movs	r1, #250	; 0xfa
 8004ede:	0089      	lsls	r1, r1, #2
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	f00a fdf7 	bl	800fad4 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 8004ee6:	4b7d      	ldr	r3, [pc, #500]	; (80050dc <CLI_CommandParser+0x3a4>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d085      	beq.n	8004dfa <CLI_CommandParser+0xc2>
									++timedoutMsg;
 8004eee:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <CLI_CommandParser+0x3a8>)
 8004ef0:	8813      	ldrh	r3, [r2, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 8004ef6:	9b05      	ldr	r3, [sp, #20]
 8004ef8:	0022      	movs	r2, r4
 8004efa:	497a      	ldr	r1, [pc, #488]	; (80050e4 <CLI_CommandParser+0x3ac>)
 8004efc:	0020      	movs	r0, r4
 8004efe:	f00f fcfb 	bl	80148f8 <siprintf>
 8004f02:	e77a      	b.n	8004dfa <CLI_CommandParser+0xc2>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8004f04:	2299      	movs	r2, #153	; 0x99
 8004f06:	1c68      	adds	r0, r5, #1
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	0021      	movs	r1, r4
 8004f0c:	f009 faa6 	bl	800e45c <FreeRTOS_CLIProcessCommand>
 8004f10:	0006      	movs	r6, r0
 8004f12:	e74a      	b.n	8004daa <CLI_CommandParser+0x72>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 8004f14:	2227      	movs	r2, #39	; 0x27
 8004f16:	4974      	ldr	r1, [pc, #464]	; (80050e8 <CLI_CommandParser+0x3b0>)
 8004f18:	0020      	movs	r0, r4
 8004f1a:	f00e fd86 	bl	8013a2a <memcpy>
 8004f1e:	e76c      	b.n	8004dfa <CLI_CommandParser+0xc2>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 8004f20:	2225      	movs	r2, #37	; 0x25
 8004f22:	4972      	ldr	r1, [pc, #456]	; (80050ec <CLI_CommandParser+0x3b4>)
 8004f24:	0020      	movs	r0, r4
 8004f26:	f00e fd80 	bl	8013a2a <memcpy>
 8004f2a:	e766      	b.n	8004dfa <CLI_CommandParser+0xc2>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004f2c:	221a      	movs	r2, #26
 8004f2e:	2100      	movs	r1, #0
 8004f30:	486f      	ldr	r0, [pc, #444]	; (80050f0 <CLI_CommandParser+0x3b8>)
 8004f32:	f00e fd83 	bl	8013a3c <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004f36:	3501      	adds	r5, #1
 8004f38:	9803      	ldr	r0, [sp, #12]
 8004f3a:	f7fb f8ed 	bl	8000118 <strlen>
 8004f3e:	0006      	movs	r6, r0
 8004f40:	ab07      	add	r3, sp, #28
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7fb f8e8 	bl	8000118 <strlen>
 8004f48:	1e72      	subs	r2, r6, #1
 8004f4a:	1a12      	subs	r2, r2, r0
 8004f4c:	0029      	movs	r1, r5
 8004f4e:	4869      	ldr	r0, [pc, #420]	; (80050f4 <CLI_CommandParser+0x3bc>)
 8004f50:	f00f fd27 	bl	80149a2 <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004f54:	9803      	ldr	r0, [sp, #12]
 8004f56:	f7fb f8df 	bl	8000118 <strlen>
 8004f5a:	0006      	movs	r6, r0
 8004f5c:	a807      	add	r0, sp, #28
 8004f5e:	f7fb f8db 	bl	8000118 <strlen>
 8004f62:	1a33      	subs	r3, r6, r0
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2217      	movs	r2, #23
 8004f68:	21ff      	movs	r1, #255	; 0xff
 8004f6a:	4658      	mov	r0, fp
 8004f6c:	f004 fb78 	bl	8009660 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8004f70:	2299      	movs	r2, #153	; 0x99
 8004f72:	0092      	lsls	r2, r2, #2
 8004f74:	0021      	movs	r1, r4
 8004f76:	0028      	movs	r0, r5
 8004f78:	f009 fa70 	bl	800e45c <FreeRTOS_CLIProcessCommand>
 8004f7c:	0006      	movs	r6, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8004f7e:	0020      	movs	r0, r4
 8004f80:	f7fb f8ca 	bl	8000118 <strlen>
 8004f84:	1820      	adds	r0, r4, r0
 8004f86:	221d      	movs	r2, #29
 8004f88:	495b      	ldr	r1, [pc, #364]	; (80050f8 <CLI_CommandParser+0x3c0>)
 8004f8a:	f00e fd4e 	bl	8013a2a <memcpy>
 8004f8e:	e70c      	b.n	8004daa <CLI_CommandParser+0x72>
					group = id >> 8;
 8004f90:	9b05      	ldr	r3, [sp, #20]
 8004f92:	121b      	asrs	r3, r3, #8
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	469a      	mov	sl, r3
 8004f98:	4b58      	ldr	r3, [pc, #352]	; (80050fc <CLI_CommandParser+0x3c4>)
 8004f9a:	4699      	mov	r9, r3
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8004fa0:	221a      	movs	r2, #26
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4852      	ldr	r0, [pc, #328]	; (80050f0 <CLI_CommandParser+0x3b8>)
 8004fa6:	f00e fd49 	bl	8013a3c <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8004faa:	1c6b      	adds	r3, r5, #1
 8004fac:	9305      	str	r3, [sp, #20]
 8004fae:	9803      	ldr	r0, [sp, #12]
 8004fb0:	f7fb f8b2 	bl	8000118 <strlen>
 8004fb4:	0005      	movs	r5, r0
 8004fb6:	aa07      	add	r2, sp, #28
 8004fb8:	0010      	movs	r0, r2
 8004fba:	f7fb f8ad 	bl	8000118 <strlen>
 8004fbe:	3d01      	subs	r5, #1
 8004fc0:	1a2a      	subs	r2, r5, r0
 8004fc2:	9905      	ldr	r1, [sp, #20]
 8004fc4:	484b      	ldr	r0, [pc, #300]	; (80050f4 <CLI_CommandParser+0x3bc>)
 8004fc6:	f00f fcec 	bl	80149a2 <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8004fca:	9803      	ldr	r0, [sp, #12]
 8004fcc:	f7fb f8a4 	bl	8000118 <strlen>
 8004fd0:	0005      	movs	r5, r0
 8004fd2:	a807      	add	r0, sp, #28
 8004fd4:	f7fb f8a0 	bl	8000118 <strlen>
 8004fd8:	1a2b      	subs	r3, r5, r0
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2217      	movs	r2, #23
 8004fde:	4651      	mov	r1, sl
 8004fe0:	4658      	mov	r0, fp
 8004fe2:	f004 fb3d 	bl	8009660 <BroadcastMessage>
					if (InGroup(myID, group))
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <CLI_CommandParser+0x394>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4a44      	ldr	r2, [pc, #272]	; (8005100 <CLI_CommandParser+0x3c8>)
 8004ff0:	5a9b      	ldrh	r3, [r3, r2]
 8004ff2:	464a      	mov	r2, r9
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	4113      	asrs	r3, r2
 8004ff8:	07db      	lsls	r3, r3, #31
 8004ffa:	d406      	bmi.n	800500a <CLI_CommandParser+0x2d2>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 8004ffc:	ab07      	add	r3, sp, #28
 8004ffe:	0022      	movs	r2, r4
 8005000:	4940      	ldr	r1, [pc, #256]	; (8005104 <CLI_CommandParser+0x3cc>)
 8005002:	0020      	movs	r0, r4
 8005004:	f00f fc78 	bl	80148f8 <siprintf>
 8005008:	e6cf      	b.n	8004daa <CLI_CommandParser+0x72>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800500a:	2299      	movs	r2, #153	; 0x99
 800500c:	0092      	lsls	r2, r2, #2
 800500e:	0021      	movs	r1, r4
 8005010:	9805      	ldr	r0, [sp, #20]
 8005012:	f009 fa23 	bl	800e45c <FreeRTOS_CLIProcessCommand>
 8005016:	0006      	movs	r6, r0
 8005018:	e7f0      	b.n	8004ffc <CLI_CommandParser+0x2c4>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 800501a:	9803      	ldr	r0, [sp, #12]
 800501c:	f7fb f87c 	bl	8000118 <strlen>
 8005020:	0006      	movs	r6, r0
 8005022:	ab07      	add	r3, sp, #28
 8005024:	0018      	movs	r0, r3
 8005026:	f7fb f877 	bl	8000118 <strlen>
 800502a:	1e72      	subs	r2, r6, #1
 800502c:	1a12      	subs	r2, r2, r0
 800502e:	0029      	movs	r1, r5
 8005030:	4830      	ldr	r0, [pc, #192]	; (80050f4 <CLI_CommandParser+0x3bc>)
 8005032:	f00f fcb6 	bl	80149a2 <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 8005036:	9803      	ldr	r0, [sp, #12]
 8005038:	f7fb f86e 	bl	8000118 <strlen>
 800503c:	0005      	movs	r5, r0
 800503e:	a807      	add	r0, sp, #28
 8005040:	f7fb f86a 	bl	8000118 <strlen>
 8005044:	3d01      	subs	r5, #1
 8005046:	1a2a      	subs	r2, r5, r0
 8005048:	b292      	uxth	r2, r2
 800504a:	2117      	movs	r1, #23
 800504c:	4650      	mov	r0, sl
 800504e:	f004 fb2f 	bl	80096b0 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8005052:	9a05      	ldr	r2, [sp, #20]
 8005054:	492c      	ldr	r1, [pc, #176]	; (8005108 <CLI_CommandParser+0x3d0>)
 8005056:	0020      	movs	r0, r4
 8005058:	f00f fc4e 	bl	80148f8 <siprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 800505c:	7823      	ldrb	r3, [r4, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <CLI_CommandParser+0x330>
 8005062:	4643      	mov	r3, r8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d108      	bne.n	800507a <CLI_CommandParser+0x342>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005068:	0020      	movs	r0, r4
 800506a:	f7fb f855 	bl	8000118 <strlen>
 800506e:	0002      	movs	r2, r0
 8005070:	2100      	movs	r1, #0
 8005072:	0020      	movs	r0, r4
 8005074:	f00e fce2 	bl	8013a3c <memset>
 8005078:	e72c      	b.n	8004ed4 <CLI_CommandParser+0x19c>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800507a:	0020      	movs	r0, r4
 800507c:	f7fb f84c 	bl	8000118 <strlen>
 8005080:	b282      	uxth	r2, r0
 8005082:	2301      	movs	r3, #1
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	3331      	adds	r3, #49	; 0x31
 8005088:	0021      	movs	r1, r4
 800508a:	9804      	ldr	r0, [sp, #16]
 800508c:	f009 f822 	bl	800e0d4 <writePxMutex>
 8005090:	e7ea      	b.n	8005068 <CLI_CommandParser+0x330>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005092:	4643      	mov	r3, r8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d100      	bne.n	800509a <CLI_CommandParser+0x362>
 8005098:	e68b      	b.n	8004db2 <CLI_CommandParser+0x7a>
 800509a:	e6b7      	b.n	8004e0c <CLI_CommandParser+0xd4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 800509c:	2301      	movs	r3, #1
 800509e:	425b      	negs	r3, r3
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	3333      	adds	r3, #51	; 0x33
 80050a4:	2238      	movs	r2, #56	; 0x38
 80050a6:	4919      	ldr	r1, [pc, #100]	; (800510c <CLI_CommandParser+0x3d4>)
 80050a8:	9804      	ldr	r0, [sp, #16]
 80050aa:	f009 f813 	bl	800e0d4 <writePxMutex>
}
 80050ae:	e043      	b.n	8005138 <CLI_CommandParser+0x400>
 80050b0:	20000a34 	.word	0x20000a34
 80050b4:	08017e98 	.word	0x08017e98
 80050b8:	08017eec 	.word	0x08017eec
 80050bc:	08017f38 	.word	0x08017f38
 80050c0:	08017e94 	.word	0x08017e94
 80050c4:	08017b44 	.word	0x08017b44
 80050c8:	08017ef4 	.word	0x08017ef4
 80050cc:	20000866 	.word	0x20000866
 80050d0:	08017fd8 	.word	0x08017fd8
 80050d4:	2000612c 	.word	0x2000612c
 80050d8:	2000029f 	.word	0x2000029f
 80050dc:	200008f8 	.word	0x200008f8
 80050e0:	20000f1a 	.word	0x20000f1a
 80050e4:	08018004 	.word	0x08018004
 80050e8:	08017f3c 	.word	0x08017f3c
 80050ec:	08017f64 	.word	0x08017f64
 80050f0:	20000514 	.word	0x20000514
 80050f4:	20000728 	.word	0x20000728
 80050f8:	08017f8c 	.word	0x08017f8c
 80050fc:	20000a06 	.word	0x20000a06
 8005100:	200006b0 	.word	0x200006b0
 8005104:	08017fac 	.word	0x08017fac
 8005108:	08017fe0 	.word	0x08017fe0
 800510c:	08018024 	.word	0x08018024
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005110:	0020      	movs	r0, r4
 8005112:	f7fb f801 	bl	8000118 <strlen>
 8005116:	0002      	movs	r2, r0
 8005118:	2100      	movs	r1, #0
 800511a:	0020      	movs	r0, r4
 800511c:	f00e fc8e 	bl	8013a3c <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8005120:	2209      	movs	r2, #9
 8005122:	2100      	movs	r1, #0
 8005124:	a807      	add	r0, sp, #28
 8005126:	f00e fc89 	bl	8013a3c <memset>
	if(!recordSnippet && enableOutput)
 800512a:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <CLI_CommandParser+0x420>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <CLI_CommandParser+0x400>
 8005132:	4643      	mov	r3, r8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1b1      	bne.n	800509c <CLI_CommandParser+0x364>
}
 8005138:	b00b      	add	sp, #44	; 0x2c
 800513a:	bc3c      	pop	{r2, r3, r4, r5}
 800513c:	4690      	mov	r8, r2
 800513e:	4699      	mov	r9, r3
 8005140:	46a2      	mov	sl, r4
 8005142:	46ab      	mov	fp, r5
 8005144:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005146:	0020      	movs	r0, r4
 8005148:	f7fa ffe6 	bl	8000118 <strlen>
 800514c:	0002      	movs	r2, r0
 800514e:	2100      	movs	r1, #0
 8005150:	0020      	movs	r0, r4
 8005152:	f00e fc73 	bl	8013a3c <memset>
 8005156:	e7e3      	b.n	8005120 <CLI_CommandParser+0x3e8>
 8005158:	20000a34 	.word	0x20000a34

0800515c <prvCLITask>:
{
 800515c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515e:	46de      	mov	lr, fp
 8005160:	4657      	mov	r7, sl
 8005162:	464e      	mov	r6, r9
 8005164:	b5c0      	push	{r6, r7, lr}
 8005166:	b086      	sub	sp, #24
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8005168:	2101      	movs	r1, #1
 800516a:	4249      	negs	r1, r1
 800516c:	2001      	movs	r0, #1
 800516e:	f00a fcb1 	bl	800fad4 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8005172:	230f      	movs	r3, #15
 8005174:	aa02      	add	r2, sp, #8
 8005176:	4694      	mov	ip, r2
 8005178:	4463      	add	r3, ip
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800517e:	f009 f9eb 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 8005182:	9003      	str	r0, [sp, #12]
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8005184:	23e1      	movs	r3, #225	; 0xe1
 8005186:	031b      	lsls	r3, r3, #12
 8005188:	4a60      	ldr	r2, [pc, #384]	; (800530c <prvCLITask+0x1b0>)
 800518a:	6892      	ldr	r2, [r2, #8]
 800518c:	429a      	cmp	r2, r3
 800518e:	d00f      	beq.n	80051b0 <prvCLITask+0x54>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005190:	2401      	movs	r4, #1
			if (port != PcPort)
 8005192:	4e5f      	ldr	r6, [pc, #380]	; (8005310 <prvCLITask+0x1b4>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005194:	001d      	movs	r5, r3
 8005196:	e003      	b.n	80051a0 <prvCLITask+0x44>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005198:	3401      	adds	r4, #1
 800519a:	b2e4      	uxtb	r4, r4
 800519c:	2c06      	cmp	r4, #6
 800519e:	d007      	beq.n	80051b0 <prvCLITask+0x54>
			if (port != PcPort)
 80051a0:	7833      	ldrb	r3, [r6, #0]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	d0f8      	beq.n	8005198 <prvCLITask+0x3c>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 80051a6:	0029      	movs	r1, r5
 80051a8:	0020      	movs	r0, r4
 80051aa:	f009 f801 	bl	800e1b0 <UpdateBaudrate>
 80051ae:	e7f3      	b.n	8005198 <prvCLITask+0x3c>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 80051b0:	4b58      	ldr	r3, [pc, #352]	; (8005314 <prvCLITask+0x1b8>)
 80051b2:	881a      	ldrh	r2, [r3, #0]
 80051b4:	0053      	lsls	r3, r2, #1
 80051b6:	189b      	adds	r3, r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4a57      	ldr	r2, [pc, #348]	; (8005318 <prvCLITask+0x1bc>)
 80051bc:	189b      	adds	r3, r3, r2
 80051be:	4a57      	ldr	r2, [pc, #348]	; (800531c <prvCLITask+0x1c0>)
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	4c57      	ldr	r4, [pc, #348]	; (8005320 <prvCLITask+0x1c4>)
 80051c4:	4d52      	ldr	r5, [pc, #328]	; (8005310 <prvCLITask+0x1b4>)
 80051c6:	7829      	ldrb	r1, [r5, #0]
 80051c8:	9100      	str	r1, [sp, #0]
 80051ca:	4956      	ldr	r1, [pc, #344]	; (8005324 <prvCLITask+0x1c8>)
 80051cc:	0020      	movs	r0, r4
 80051ce:	f00f fb93 	bl	80148f8 <siprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 80051d2:	22a4      	movs	r2, #164	; 0xa4
 80051d4:	7828      	ldrb	r0, [r5, #0]
 80051d6:	230a      	movs	r3, #10
 80051d8:	0092      	lsls	r2, r2, #2
 80051da:	4953      	ldr	r1, [pc, #332]	; (8005328 <prvCLITask+0x1cc>)
 80051dc:	f008 ffa2 	bl	800e124 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 80051e0:	0020      	movs	r0, r4
 80051e2:	f7fa ff99 	bl	8000118 <strlen>
 80051e6:	b282      	uxth	r2, r0
 80051e8:	7828      	ldrb	r0, [r5, #0]
 80051ea:	230a      	movs	r3, #10
 80051ec:	0021      	movs	r1, r4
 80051ee:	f008 ff99 	bl	800e124 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 80051f2:	2300      	movs	r3, #0
 80051f4:	469b      	mov	fp, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80051f6:	4b46      	ldr	r3, [pc, #280]	; (8005310 <prvCLITask+0x1b4>)
 80051f8:	469a      	mov	sl, r3
 80051fa:	4b4c      	ldr	r3, [pc, #304]	; (800532c <prvCLITask+0x1d0>)
 80051fc:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 80051fe:	001f      	movs	r7, r3
			if (UARTRxBuf[PcPort-1][chr]) {
 8005200:	4656      	mov	r6, sl
 8005202:	e061      	b.n	80052c8 <prvCLITask+0x16c>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 8005204:	200f      	movs	r0, #15
 8005206:	ad02      	add	r5, sp, #8
 8005208:	46ac      	mov	ip, r5
 800520a:	4460      	add	r0, ip
 800520c:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 800520e:	0198      	lsls	r0, r3, #6
 8005210:	4a47      	ldr	r2, [pc, #284]	; (8005330 <prvCLITask+0x1d4>)
 8005212:	1812      	adds	r2, r2, r0
 8005214:	2000      	movs	r0, #0
 8005216:	5450      	strb	r0, [r2, r1]
				UARTRxBufIndex[PcPort-1] = chr;
 8005218:	4a44      	ldr	r2, [pc, #272]	; (800532c <prvCLITask+0x1d0>)
 800521a:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 800521c:	240f      	movs	r4, #15
 800521e:	ab02      	add	r3, sp, #8
 8005220:	469c      	mov	ip, r3
 8005222:	4464      	add	r4, ip
 8005224:	4b3a      	ldr	r3, [pc, #232]	; (8005310 <prvCLITask+0x1b4>)
 8005226:	7818      	ldrb	r0, [r3, #0]
 8005228:	230a      	movs	r3, #10
 800522a:	2201      	movs	r2, #1
 800522c:	0021      	movs	r1, r4
 800522e:	f008 ff79 	bl	800e124 <writePxITMutex>
		if( cRxedChar == '\r' )
 8005232:	7823      	ldrb	r3, [r4, #0]
 8005234:	2b0d      	cmp	r3, #13
 8005236:	d028      	beq.n	800528a <prvCLITask+0x12e>
			if( cRxedChar == '\n' )
 8005238:	2b0a      	cmp	r3, #10
 800523a:	d043      	beq.n	80052c4 <prvCLITask+0x168>
			else if( cRxedChar == '\b' )
 800523c:	2b08      	cmp	r3, #8
 800523e:	d059      	beq.n	80052f4 <prvCLITask+0x198>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 8005240:	001a      	movs	r2, r3
 8005242:	3a20      	subs	r2, #32
 8005244:	2a5e      	cmp	r2, #94	; 0x5e
 8005246:	d83d      	bhi.n	80052c4 <prvCLITask+0x168>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8005248:	465a      	mov	r2, fp
 800524a:	2a31      	cmp	r2, #49	; 0x31
 800524c:	dc3a      	bgt.n	80052c4 <prvCLITask+0x168>
						cInputString[ cInputIndex ] = cRxedChar;
 800524e:	4a39      	ldr	r2, [pc, #228]	; (8005334 <prvCLITask+0x1d8>)
 8005250:	4659      	mov	r1, fp
 8005252:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005254:	465b      	mov	r3, fp
 8005256:	3301      	adds	r3, #1
 8005258:	b25b      	sxtb	r3, r3
 800525a:	469b      	mov	fp, r3
 800525c:	e032      	b.n	80052c4 <prvCLITask+0x168>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800525e:	2200      	movs	r2, #0
 8005260:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 8005262:	f00a ff11 	bl	8010088 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005266:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8005268:	7833      	ldrb	r3, [r6, #0]
 800526a:	3b01      	subs	r3, #1
 800526c:	0021      	movs	r1, r4
 800526e:	019a      	lsls	r2, r3, #6
 8005270:	18aa      	adds	r2, r5, r2
 8005272:	5d12      	ldrb	r2, [r2, r4]
 8005274:	2a00      	cmp	r2, #0
 8005276:	d1c5      	bne.n	8005204 <prvCLITask+0xa8>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005278:	2c3f      	cmp	r4, #63	; 0x3f
 800527a:	d0f0      	beq.n	800525e <prvCLITask+0x102>
			taskYIELD();
 800527c:	f00a ff04 	bl	8010088 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005280:	3401      	adds	r4, #1
 8005282:	b2a4      	uxth	r4, r4
 8005284:	2c3f      	cmp	r4, #63	; 0x3f
 8005286:	d9ef      	bls.n	8005268 <prvCLITask+0x10c>
 8005288:	e7c8      	b.n	800521c <prvCLITask+0xc0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 800528a:	4b21      	ldr	r3, [pc, #132]	; (8005310 <prvCLITask+0x1b4>)
 800528c:	7818      	ldrb	r0, [r3, #0]
 800528e:	230a      	movs	r3, #10
 8005290:	2202      	movs	r2, #2
 8005292:	4929      	ldr	r1, [pc, #164]	; (8005338 <prvCLITask+0x1dc>)
 8005294:	f008 ff46 	bl	800e124 <writePxITMutex>
			if( cInputIndex == 0 )
 8005298:	465b      	mov	r3, fp
 800529a:	2b00      	cmp	r3, #0
 800529c:	d025      	beq.n	80052ea <prvCLITask+0x18e>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 800529e:	4c25      	ldr	r4, [pc, #148]	; (8005334 <prvCLITask+0x1d8>)
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <prvCLITask+0x1b4>)
 80052a2:	7818      	ldrb	r0, [r3, #0]
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	0022      	movs	r2, r4
 80052a8:	2101      	movs	r1, #1
 80052aa:	f7ff fd45 	bl	8004d38 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 80052ae:	0021      	movs	r1, r4
 80052b0:	4822      	ldr	r0, [pc, #136]	; (800533c <prvCLITask+0x1e0>)
 80052b2:	f00f fb5d 	bl	8014970 <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 80052b6:	2232      	movs	r2, #50	; 0x32
 80052b8:	2100      	movs	r1, #0
 80052ba:	0020      	movs	r0, r4
 80052bc:	f00e fbbe 	bl	8013a3c <memset>
			cInputIndex = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	469b      	mov	fp, r3
		taskYIELD();
 80052c4:	f00a fee0 	bl	8010088 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80052c8:	4653      	mov	r3, sl
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	464a      	mov	r2, r9
 80052d0:	5cd2      	ldrb	r2, [r2, r3]
 80052d2:	b294      	uxth	r4, r2
 80052d4:	2c3f      	cmp	r4, #63	; 0x3f
 80052d6:	d8a1      	bhi.n	800521c <prvCLITask+0xc0>
			if (UARTRxBuf[PcPort-1][chr]) {
 80052d8:	0011      	movs	r1, r2
 80052da:	019d      	lsls	r5, r3, #6
 80052dc:	4814      	ldr	r0, [pc, #80]	; (8005330 <prvCLITask+0x1d4>)
 80052de:	1940      	adds	r0, r0, r5
 80052e0:	5c82      	ldrb	r2, [r0, r2]
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d18e      	bne.n	8005204 <prvCLITask+0xa8>
 80052e6:	4d12      	ldr	r5, [pc, #72]	; (8005330 <prvCLITask+0x1d4>)
 80052e8:	e7c6      	b.n	8005278 <prvCLITask+0x11c>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 80052ea:	4914      	ldr	r1, [pc, #80]	; (800533c <prvCLITask+0x1e0>)
 80052ec:	4811      	ldr	r0, [pc, #68]	; (8005334 <prvCLITask+0x1d8>)
 80052ee:	f00f fb3f 	bl	8014970 <strcpy>
 80052f2:	e7d4      	b.n	800529e <prvCLITask+0x142>
				if( cInputIndex > 0 )
 80052f4:	465b      	mov	r3, fp
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	dde4      	ble.n	80052c4 <prvCLITask+0x168>
					cInputIndex--;
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	469b      	mov	fp, r3
					cInputString[ cInputIndex ] = '\0';
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <prvCLITask+0x1d8>)
 8005302:	2200      	movs	r2, #0
 8005304:	4659      	mov	r1, fp
 8005306:	545a      	strb	r2, [r3, r1]
 8005308:	e7dc      	b.n	80052c4 <prvCLITask+0x168>
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	2000612c 	.word	0x2000612c
 8005310:	2000029f 	.word	0x2000029f
 8005314:	20000050 	.word	0x20000050
 8005318:	08017b94 	.word	0x08017b94
 800531c:	20000866 	.word	0x20000866
 8005320:	20000a08 	.word	0x20000a08
 8005324:	08018090 	.word	0x08018090
 8005328:	080180bc 	.word	0x080180bc
 800532c:	20000bf8 	.word	0x20000bf8
 8005330:	20000ab8 	.word	0x20000ab8
 8005334:	20000938 	.word	0x20000938
 8005338:	080196d8 	.word	0x080196d8
 800533c:	200009d4 	.word	0x200009d4

08005340 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <ParseSnippetCommand+0x78>)
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	3a01      	subs	r2, #1
 800534a:	0093      	lsls	r3, r2, #2
 800534c:	189b      	adds	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <ParseSnippetCommand+0x7c>)
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d02c      	beq.n	80053b4 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800535a:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <ParseSnippetCommand+0x80>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d014      	beq.n	800538c <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <ParseSnippetCommand+0x80>)
 8005364:	681d      	ldr	r5, [r3, #0]
 8005366:	782b      	ldrb	r3, [r5, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d012      	beq.n	8005392 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800536c:	2113      	movs	r1, #19
 800536e:	0028      	movs	r0, r5
 8005370:	f00f faf0 	bl	8014954 <strchr>
 8005374:	1e06      	subs	r6, r0, #0
	if (ptrEnd != NULL)
 8005376:	d011      	beq.n	800539c <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8005378:	1b42      	subs	r2, r0, r5
 800537a:	0029      	movs	r1, r5
 800537c:	0020      	movs	r0, r4
 800537e:	f00f fb10 	bl	80149a2 <strncpy>
		ptrStart = ptrEnd+1;
 8005382:	3601      	adds	r6, #1
 8005384:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <ParseSnippetCommand+0x80>)
 8005386:	601e      	str	r6, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8005388:	2001      	movs	r0, #1
 800538a:	e006      	b.n	800539a <ParseSnippetCommand+0x5a>
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <ParseSnippetCommand+0x80>)
 800538e:	6018      	str	r0, [r3, #0]
 8005390:	e7e7      	b.n	8005362 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <ParseSnippetCommand+0x80>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
		return false;
 8005398:	2000      	movs	r0, #0
}
 800539a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char *)cliBuffer, ptrStart);
 800539c:	0029      	movs	r1, r5
 800539e:	0020      	movs	r0, r4
 80053a0:	f00f fae6 	bl	8014970 <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 80053a4:	0020      	movs	r0, r4
 80053a6:	f7fa feb7 	bl	8000118 <strlen>
 80053aa:	182d      	adds	r5, r5, r0
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <ParseSnippetCommand+0x80>)
 80053ae:	601d      	str	r5, [r3, #0]
	return true;
 80053b0:	2001      	movs	r0, #1
 80053b2:	e7f2      	b.n	800539a <ParseSnippetCommand+0x5a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 80053b4:	2000      	movs	r0, #0
 80053b6:	e7f0      	b.n	800539a <ParseSnippetCommand+0x5a>
 80053b8:	20000a07 	.word	0x20000a07
 80053bc:	20006148 	.word	0x20006148
 80053c0:	20000a30 	.word	0x20000a30

080053c4 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b083      	sub	sp, #12
 80053c8:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 80053ca:	0083      	lsls	r3, r0, #2
 80053cc:	181b      	adds	r3, r3, r0
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4a3f      	ldr	r2, [pc, #252]	; (80054d0 <CheckSnippetCondition+0x10c>)
 80053d2:	5c9b      	ldrb	r3, [r3, r2]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d003      	beq.n	80053e0 <CheckSnippetCondition+0x1c>
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d015      	beq.n	8005408 <CheckSnippetCondition+0x44>
					
  	default:
  		break;
  }
	
	return false;
 80053dc:	2000      	movs	r0, #0
 80053de:	e011      	b.n	8005404 <CheckSnippetCondition+0x40>
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 80053e0:	493b      	ldr	r1, [pc, #236]	; (80054d0 <CheckSnippetCondition+0x10c>)
 80053e2:	0083      	lsls	r3, r0, #2
 80053e4:	181a      	adds	r2, r3, r0
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	188a      	adds	r2, r1, r2
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 80053ea:	7890      	ldrb	r0, [r2, #2]
 80053ec:	00c2      	lsls	r2, r0, #3
 80053ee:	1812      	adds	r2, r2, r0
 80053f0:	191b      	adds	r3, r3, r4
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	18cb      	adds	r3, r1, r3
 80053f6:	4937      	ldr	r1, [pc, #220]	; (80054d4 <CheckSnippetCondition+0x110>)
 80053f8:	5c50      	ldrb	r0, [r2, r1]
 80053fa:	78db      	ldrb	r3, [r3, #3]
 80053fc:	1ac0      	subs	r0, r0, r3
 80053fe:	4243      	negs	r3, r0
 8005400:	4158      	adcs	r0, r3
 8005402:	b2c0      	uxtb	r0, r0
}
 8005404:	b003      	add	sp, #12
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 8005408:	4e31      	ldr	r6, [pc, #196]	; (80054d0 <CheckSnippetCondition+0x10c>)
 800540a:	0085      	lsls	r5, r0, #2
 800540c:	182b      	adds	r3, r5, r0
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	18f3      	adds	r3, r6, r3
 8005412:	78da      	ldrb	r2, [r3, #3]
 8005414:	3a01      	subs	r2, #1
 8005416:	0053      	lsls	r3, r2, #1
 8005418:	189b      	adds	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4a2e      	ldr	r2, [pc, #184]	; (80054d8 <CheckSnippetCondition+0x114>)
 800541e:	589b      	ldr	r3, [r3, r2]
 8005420:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005422:	1829      	adds	r1, r5, r0
 8005424:	0089      	lsls	r1, r1, #2
 8005426:	3106      	adds	r1, #6
 8005428:	1989      	adds	r1, r1, r6
 800542a:	2204      	movs	r2, #4
 800542c:	a801      	add	r0, sp, #4
 800542e:	f00e fafc 	bl	8013a2a <memcpy>
			switch (snippets[index].cond.mathOperator)
 8005432:	192d      	adds	r5, r5, r4
 8005434:	00ad      	lsls	r5, r5, #2
 8005436:	1975      	adds	r5, r6, r5
 8005438:	786b      	ldrb	r3, [r5, #1]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d83f      	bhi.n	80054be <CheckSnippetCondition+0xfa>
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4a26      	ldr	r2, [pc, #152]	; (80054dc <CheckSnippetCondition+0x118>)
 8005442:	58d3      	ldr	r3, [r2, r3]
 8005444:	469f      	mov	pc, r3
      	case MATH_EQUAL:				if (flt1 == flt2)	return true;	break;
 8005446:	1c39      	adds	r1, r7, #0
 8005448:	9801      	ldr	r0, [sp, #4]
 800544a:	f7fb f837 	bl	80004bc <__aeabi_fcmpeq>
 800544e:	1e43      	subs	r3, r0, #1
 8005450:	4198      	sbcs	r0, r3
 8005452:	e7d7      	b.n	8005404 <CheckSnippetCondition+0x40>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8005454:	1c39      	adds	r1, r7, #0
 8005456:	9801      	ldr	r0, [sp, #4]
 8005458:	f7fb f836 	bl	80004c8 <__aeabi_fcmplt>
 800545c:	1e43      	subs	r3, r0, #1
 800545e:	4198      	sbcs	r0, r3
 8005460:	e7d0      	b.n	8005404 <CheckSnippetCondition+0x40>
		case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8005462:	1c39      	adds	r1, r7, #0
 8005464:	9801      	ldr	r0, [sp, #4]
 8005466:	f7fb f843 	bl	80004f0 <__aeabi_fcmpgt>
 800546a:	2800      	cmp	r0, #0
 800546c:	d029      	beq.n	80054c2 <CheckSnippetCondition+0xfe>
 800546e:	2100      	movs	r1, #0
 8005470:	1c38      	adds	r0, r7, #0
 8005472:	f7fb f823 	bl	80004bc <__aeabi_fcmpeq>
 8005476:	4243      	negs	r3, r0
 8005478:	4158      	adcs	r0, r3
 800547a:	e7c3      	b.n	8005404 <CheckSnippetCondition+0x40>
	    case MATH_GREATER_EQUAL:	    if (flt1 >= flt2)	return true;	break;
 800547c:	1c39      	adds	r1, r7, #0
 800547e:	9801      	ldr	r0, [sp, #4]
 8005480:	f7fb f82c 	bl	80004dc <__aeabi_fcmple>
 8005484:	1e43      	subs	r3, r0, #1
 8005486:	4198      	sbcs	r0, r3
 8005488:	e7bc      	b.n	8005404 <CheckSnippetCondition+0x40>
	    case MATH_SMALLER_EQUAL:	    if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 800548a:	1c39      	adds	r1, r7, #0
 800548c:	9801      	ldr	r0, [sp, #4]
 800548e:	f7fb f839 	bl	8000504 <__aeabi_fcmpge>
 8005492:	2800      	cmp	r0, #0
 8005494:	d017      	beq.n	80054c6 <CheckSnippetCondition+0x102>
 8005496:	2100      	movs	r1, #0
 8005498:	1c38      	adds	r0, r7, #0
 800549a:	f7fb f80f 	bl	80004bc <__aeabi_fcmpeq>
 800549e:	4243      	negs	r3, r0
 80054a0:	4158      	adcs	r0, r3
 80054a2:	e7af      	b.n	8005404 <CheckSnippetCondition+0x40>
		case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 80054a4:	1c39      	adds	r1, r7, #0
 80054a6:	9801      	ldr	r0, [sp, #4]
 80054a8:	f7fb f808 	bl	80004bc <__aeabi_fcmpeq>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d10c      	bne.n	80054ca <CheckSnippetCondition+0x106>
 80054b0:	2100      	movs	r1, #0
 80054b2:	1c38      	adds	r0, r7, #0
 80054b4:	f7fb f802 	bl	80004bc <__aeabi_fcmpeq>
 80054b8:	4243      	negs	r3, r0
 80054ba:	4158      	adcs	r0, r3
 80054bc:	e7a2      	b.n	8005404 <CheckSnippetCondition+0x40>
	return false;
 80054be:	2000      	movs	r0, #0
 80054c0:	e7a0      	b.n	8005404 <CheckSnippetCondition+0x40>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e79e      	b.n	8005404 <CheckSnippetCondition+0x40>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e79c      	b.n	8005404 <CheckSnippetCondition+0x40>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e79a      	b.n	8005404 <CheckSnippetCondition+0x40>
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	20006148 	.word	0x20006148
 80054d4:	20000cb4 	.word	0x20000cb4
 80054d8:	20000088 	.word	0x20000088
 80054dc:	08017e78 	.word	0x08017e78

080054e0 <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 80054e2:	f009 f839 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 80054e6:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80054e8:	4b1c      	ldr	r3, [pc, #112]	; (800555c <ExecuteSnippet+0x7c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d032      	beq.n	8005556 <ExecuteSnippet+0x76>
 80054f0:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 80054f2:	4f1b      	ldr	r7, [pc, #108]	; (8005560 <ExecuteSnippet+0x80>)
 80054f4:	e01a      	b.n	800552c <ExecuteSnippet+0x4c>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <ExecuteSnippet+0x84>)
 80054f8:	7818      	ldrb	r0, [r3, #0]
 80054fa:	002b      	movs	r3, r5
 80054fc:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <ExecuteSnippet+0x88>)
 80054fe:	2100      	movs	r1, #0
 8005500:	f7ff fc1a 	bl	8004d38 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 8005504:	0028      	movs	r0, r5
 8005506:	f7fa fe07 	bl	8000118 <strlen>
 800550a:	0002      	movs	r2, r0
 800550c:	2100      	movs	r1, #0
 800550e:	0028      	movs	r0, r5
 8005510:	f00e fa94 	bl	8013a3c <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8005514:	4914      	ldr	r1, [pc, #80]	; (8005568 <ExecuteSnippet+0x88>)
 8005516:	68f0      	ldr	r0, [r6, #12]
 8005518:	f7ff ff12 	bl	8005340 <ParseSnippetCommand>
 800551c:	2800      	cmp	r0, #0
 800551e:	d1ea      	bne.n	80054f6 <ExecuteSnippet+0x16>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 8005520:	3401      	adds	r4, #1
 8005522:	b2a4      	uxth	r4, r4
 8005524:	4b0d      	ldr	r3, [pc, #52]	; (800555c <ExecuteSnippet+0x7c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	42a3      	cmp	r3, r4
 800552a:	d914      	bls.n	8005556 <ExecuteSnippet+0x76>
		if (snippets[s].state)								// Check for activated Snippets
 800552c:	00a3      	lsls	r3, r4, #2
 800552e:	191b      	adds	r3, r3, r4
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	18fb      	adds	r3, r7, r3
 8005534:	7c1b      	ldrb	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0f2      	beq.n	8005520 <ExecuteSnippet+0x40>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 800553a:	b2e0      	uxtb	r0, r4
 800553c:	f7ff ff42 	bl	80053c4 <CheckSnippetCondition>
 8005540:	2800      	cmp	r0, #0
 8005542:	d0ed      	beq.n	8005520 <ExecuteSnippet+0x40>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <ExecuteSnippet+0x8c>)
 8005546:	2220      	movs	r2, #32
 8005548:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 800554a:	00a3      	lsls	r3, r4, #2
 800554c:	191e      	adds	r6, r3, r4
 800554e:	00b6      	lsls	r6, r6, #2
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <ExecuteSnippet+0x80>)
 8005552:	199e      	adds	r6, r3, r6
 8005554:	e7de      	b.n	8005514 <ExecuteSnippet+0x34>
			}
		}
  }
	
	return result;
}
 8005556:	2000      	movs	r0, #0
 8005558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	20000a07 	.word	0x20000a07
 8005560:	20006148 	.word	0x20006148
 8005564:	2000029f 	.word	0x2000029f
 8005568:	200009a0 	.word	0x200009a0
 800556c:	2000612c 	.word	0x2000612c

08005570 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005570:	2000      	movs	r0, #0
 8005572:	4770      	bx	lr

08005574 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	0004      	movs	r4, r0
 800557a:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005580:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005582:	2800      	cmp	r0, #0
 8005584:	d101      	bne.n	800558a <setBaudrateCommand+0x16>
 8005586:	b672      	cpsid	i
 8005588:	e7fe      	b.n	8005588 <setBaudrateCommand+0x14>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800558a:	aa01      	add	r2, sp, #4
 800558c:	2101      	movs	r1, #1
 800558e:	0028      	movs	r0, r5
 8005590:	f008 ffe6 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005594:	2300      	movs	r3, #0
 8005596:	56c3      	ldrsb	r3, [r0, r3]
 8005598:	2b70      	cmp	r3, #112	; 0x70
 800559a:	d00c      	beq.n	80055b6 <setBaudrateCommand+0x42>
		port = (uint8_t) atol((char*) pcParameterString1 + 1);
	} else {
		result = BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 800559c:	466a      	mov	r2, sp
 800559e:	2102      	movs	r1, #2
 80055a0:	0028      	movs	r0, r5
 80055a2:	f008 ffdd 	bl	800e560 <FreeRTOS_CLIGetParameter>
	baudrate = (uint32_t) atol((char*) pcParameterString2);
 80055a6:	f00e f9ce 	bl	8013946 <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 80055aa:	2213      	movs	r2, #19
 80055ac:	490f      	ldr	r1, [pc, #60]	; (80055ec <setBaudrateCommand+0x78>)
 80055ae:	0020      	movs	r0, r4
 80055b0:	f00e fa3b 	bl	8013a2a <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, baudrate, port);
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 80055b4:	e016      	b.n	80055e4 <setBaudrateCommand+0x70>
		port = (uint8_t) atol((char*) pcParameterString1 + 1);
 80055b6:	3001      	adds	r0, #1
 80055b8:	f00e f9c5 	bl	8013946 <atol>
 80055bc:	0006      	movs	r6, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 80055be:	466a      	mov	r2, sp
 80055c0:	2102      	movs	r1, #2
 80055c2:	0028      	movs	r0, r5
 80055c4:	f008 ffcc 	bl	800e560 <FreeRTOS_CLIGetParameter>
	baudrate = (uint32_t) atol((char*) pcParameterString2);
 80055c8:	f00e f9bd 	bl	8013946 <atol>
 80055cc:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 80055ce:	b2f0      	uxtb	r0, r6
 80055d0:	0029      	movs	r1, r5
 80055d2:	f008 fded 	bl	800e1b0 <UpdateBaudrate>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, baudrate, port);
 80055d6:	23ff      	movs	r3, #255	; 0xff
 80055d8:	4033      	ands	r3, r6
 80055da:	002a      	movs	r2, r5
 80055dc:	4904      	ldr	r1, [pc, #16]	; (80055f0 <setBaudrateCommand+0x7c>)
 80055de:	0020      	movs	r0, r4
 80055e0:	f00f f98a 	bl	80148f8 <siprintf>
}
 80055e4:	2000      	movs	r0, #0
 80055e6:	b002      	add	sp, #8
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	08018d48 	.word	0x08018d48
 80055f0:	08018d20 	.word	0x08018d20

080055f4 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80055f4:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d101      	bne.n	80055fe <flashsizeCommand+0xa>
 80055fa:	b672      	cpsid	i
 80055fc:	e7fe      	b.n	80055fc <flashsizeCommand+0x8>

	/* Respond to the command */
	sprintf((char*) pcWriteBuffer, (char*) pcMessageFLASH,(*(uint32_t*) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055fe:	4b03      	ldr	r3, [pc, #12]	; (800560c <flashsizeCommand+0x18>)
 8005600:	881a      	ldrh	r2, [r3, #0]
 8005602:	4903      	ldr	r1, [pc, #12]	; (8005610 <flashsizeCommand+0x1c>)
 8005604:	f00f f978 	bl	80148f8 <siprintf>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005608:	2000      	movs	r0, #0
 800560a:	bd10      	pop	{r4, pc}
 800560c:	1ffff7cc 	.word	0x1ffff7cc
 8005610:	08018714 	.word	0x08018714

08005614 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005614:	b510      	push	{r4, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	0004      	movs	r4, r0
 800561a:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = (int8_t*) "Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	9301      	str	r3, [sp, #4]
	BOS_Status result = BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005624:	2c00      	cmp	r4, #0
 8005626:	d101      	bne.n	800562c <GetReadPrecentageCommand+0x18>
 8005628:	b672      	cpsid	i
 800562a:	e7fe      	b.n	800562a <GetReadPrecentageCommand+0x16>

	/* Obtain the 1st parameter string. */

	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800562c:	aa01      	add	r2, sp, #4
 800562e:	2101      	movs	r1, #1
 8005630:	f008 ff96 	bl	800e560 <FreeRTOS_CLIGetParameter>

	if (*pcParameterString1 == '2' || *pcParameterString1 == '3') {
 8005634:	7803      	ldrb	r3, [r0, #0]
 8005636:	3b32      	subs	r3, #50	; 0x32
 8005638:	2b01      	cmp	r3, #1
 800563a:	d907      	bls.n	800564c <GetReadPrecentageCommand+0x38>
		ADCports = (uint8_t) atol((char*) pcParameterString1);
		GetReadPrecentage(ADCports, &ADC_Value_CLI);

		sprintf(pcWriteBuffer, "ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	} else
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 800563c:	2215      	movs	r2, #21
 800563e:	490b      	ldr	r1, [pc, #44]	; (800566c <GetReadPrecentageCommand+0x58>)
 8005640:	0020      	movs	r0, r4
 8005642:	f00e f9f2 	bl	8013a2a <memcpy>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;

}
 8005646:	2000      	movs	r0, #0
 8005648:	b002      	add	sp, #8
 800564a:	bd10      	pop	{r4, pc}
		ADCports = (uint8_t) atol((char*) pcParameterString1);
 800564c:	f00e f97b 	bl	8013946 <atol>
		GetReadPrecentage(ADCports, &ADC_Value_CLI);
 8005650:	b2c0      	uxtb	r0, r0
 8005652:	4669      	mov	r1, sp
 8005654:	f003 f968 	bl	8008928 <GetReadPrecentage>
		sprintf(pcWriteBuffer, "ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005658:	9800      	ldr	r0, [sp, #0]
 800565a:	f7fd fa89 	bl	8002b70 <__aeabi_f2d>
 800565e:	0002      	movs	r2, r0
 8005660:	000b      	movs	r3, r1
 8005662:	4903      	ldr	r1, [pc, #12]	; (8005670 <GetReadPrecentageCommand+0x5c>)
 8005664:	0020      	movs	r0, r4
 8005666:	f00f f947 	bl	80148f8 <siprintf>
 800566a:	e7ec      	b.n	8005646 <GetReadPrecentageCommand+0x32>
 800566c:	08018410 	.word	0x08018410
 8005670:	080183ec 	.word	0x080183ec

08005674 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005674:	b510      	push	{r4, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	0004      	movs	r4, r0
	float ADC_Value_TEMP = 0,ADC_Value_Vref=0;
 800567a:	2300      	movs	r3, #0
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005680:	2800      	cmp	r0, #0
 8005682:	d101      	bne.n	8005688 <ReadVrefCommand+0x14>
 8005684:	b672      	cpsid	i
 8005686:	e7fe      	b.n	8005686 <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP, &ADC_Value_Vref);
 8005688:	4669      	mov	r1, sp
 800568a:	a801      	add	r0, sp, #4
 800568c:	f003 f8a2 	bl	80087d4 <ReadTempAndVref>
	strcpy(pcWriteBuffer, (char*) &ADC_Value_TEMP);
 8005690:	a901      	add	r1, sp, #4
 8005692:	0020      	movs	r0, r4
 8005694:	f00f f96c 	bl	8014970 <strcpy>
	sprintf(pcWriteBuffer, "internal reference voltage is=%.2fV \r\n",
 8005698:	9800      	ldr	r0, [sp, #0]
 800569a:	f7fd fa69 	bl	8002b70 <__aeabi_f2d>
 800569e:	0002      	movs	r2, r0
 80056a0:	000b      	movs	r3, r1
 80056a2:	4903      	ldr	r1, [pc, #12]	; (80056b0 <ReadVrefCommand+0x3c>)
 80056a4:	0020      	movs	r0, r4
 80056a6:	f00f f927 	bl	80148f8 <siprintf>
}
 80056aa:	2000      	movs	r0, #0
 80056ac:	b002      	add	sp, #8
 80056ae:	bd10      	pop	{r4, pc}
 80056b0:	0801845c 	.word	0x0801845c

080056b4 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80056b4:	b510      	push	{r4, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	0004      	movs	r4, r0
	float ADC_Value_TEMP = 0,ADC_Value_Vref=0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d101      	bne.n	80056c8 <ReadTempCommand+0x14>
 80056c4:	b672      	cpsid	i
 80056c6:	e7fe      	b.n	80056c6 <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP, &ADC_Value_Vref);
 80056c8:	4669      	mov	r1, sp
 80056ca:	a801      	add	r0, sp, #4
 80056cc:	f003 f882 	bl	80087d4 <ReadTempAndVref>
	strcpy(pcWriteBuffer, (char*) &ADC_Value_TEMP);
 80056d0:	a901      	add	r1, sp, #4
 80056d2:	0020      	movs	r0, r4
 80056d4:	f00f f94c 	bl	8014970 <strcpy>
	sprintf(pcWriteBuffer, "internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80056d8:	9801      	ldr	r0, [sp, #4]
 80056da:	f7fd fa49 	bl	8002b70 <__aeabi_f2d>
 80056de:	0002      	movs	r2, r0
 80056e0:	000b      	movs	r3, r1
 80056e2:	4903      	ldr	r1, [pc, #12]	; (80056f0 <ReadTempCommand+0x3c>)
 80056e4:	0020      	movs	r0, r4
 80056e6:	f00f f907 	bl	80148f8 <siprintf>
}
 80056ea:	2000      	movs	r0, #0
 80056ec:	b002      	add	sp, #8
 80056ee:	bd10      	pop	{r4, pc}
 80056f0:	08018428 	.word	0x08018428

080056f4 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	0004      	movs	r4, r0
 80056fa:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 = 0;
 8005700:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005706:	2800      	cmp	r0, #0
 8005708:	d101      	bne.n	800570e <ADCReadCommand+0x1a>
 800570a:	b672      	cpsid	i
 800570c:	e7fe      	b.n	800570c <ADCReadCommand+0x18>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800570e:	aa03      	add	r2, sp, #12
 8005710:	2101      	movs	r1, #1
 8005712:	0030      	movs	r0, r6
 8005714:	f008 ff24 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8005718:	0005      	movs	r5, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 800571a:	aa02      	add	r2, sp, #8
 800571c:	2102      	movs	r1, #2
 800571e:	0030      	movs	r0, r6
 8005720:	f008 ff1e 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8005724:	0006      	movs	r6, r0
	if (*pcParameterString1 == '2' || *pcParameterString1 == '3') {
 8005726:	782b      	ldrb	r3, [r5, #0]
 8005728:	3b32      	subs	r3, #50	; 0x32
 800572a:	2b01      	cmp	r3, #1
 800572c:	d907      	bls.n	800573e <ADCReadCommand+0x4a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong1);
 800572e:	2215      	movs	r2, #21
 8005730:	4919      	ldr	r1, [pc, #100]	; (8005798 <ADCReadCommand+0xa4>)
 8005732:	0020      	movs	r0, r4
 8005734:	f00e f979 	bl	8013a2a <memcpy>
}
 8005738:	2000      	movs	r0, #0
 800573a:	b004      	add	sp, #16
 800573c:	bd70      	pop	{r4, r5, r6, pc}
		ADCports = (uint8_t) atol((char*) pcParameterString1);
 800573e:	0028      	movs	r0, r5
 8005740:	f00e f901 	bl	8013946 <atol>
 8005744:	b2c5      	uxtb	r5, r0
		if (strcmp((char*) pcParameterString2, "top") == 0|| strcmp((char*) pcParameterString2, "bottom") == 0) {
 8005746:	4915      	ldr	r1, [pc, #84]	; (800579c <ADCReadCommand+0xa8>)
 8005748:	0030      	movs	r0, r6
 800574a:	f7fa fcdb 	bl	8000104 <strcmp>
 800574e:	2800      	cmp	r0, #0
 8005750:	d005      	beq.n	800575e <ADCReadCommand+0x6a>
 8005752:	4913      	ldr	r1, [pc, #76]	; (80057a0 <ADCReadCommand+0xac>)
 8005754:	0030      	movs	r0, r6
 8005756:	f7fa fcd5 	bl	8000104 <strcmp>
 800575a:	2800      	cmp	r0, #0
 800575c:	d116      	bne.n	800578c <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports, ADC_Side);
 800575e:	4e0f      	ldr	r6, [pc, #60]	; (800579c <ADCReadCommand+0xa8>)
 8005760:	0031      	movs	r1, r6
 8005762:	0028      	movs	r0, r5
 8005764:	f003 f9a6 	bl	8008ab4 <ADCSelectChannel>
			ReadADCChannel(ADCports, ADC_Side, &ADC_Value_CLI);
 8005768:	aa01      	add	r2, sp, #4
 800576a:	0031      	movs	r1, r6
 800576c:	0028      	movs	r0, r5
 800576e:	f003 f9cf 	bl	8008b10 <ReadADCChannel>
			strcpy(pcWriteBuffer, (char*) &ADC_Value_CLI);
 8005772:	a901      	add	r1, sp, #4
 8005774:	0020      	movs	r0, r4
 8005776:	f00f f8fb 	bl	8014970 <strcpy>
					(uint16_t) ADC_Value_CLI);
 800577a:	9801      	ldr	r0, [sp, #4]
 800577c:	f7fa fef6 	bl	800056c <__aeabi_f2uiz>
			sprintf(pcWriteBuffer, "ADC_Value=%u \r\n",
 8005780:	b282      	uxth	r2, r0
 8005782:	4908      	ldr	r1, [pc, #32]	; (80057a4 <ADCReadCommand+0xb0>)
 8005784:	0020      	movs	r0, r4
 8005786:	f00f f8b7 	bl	80148f8 <siprintf>
 800578a:	e7d5      	b.n	8005738 <ADCReadCommand+0x44>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 800578c:	2212      	movs	r2, #18
 800578e:	4906      	ldr	r1, [pc, #24]	; (80057a8 <ADCReadCommand+0xb4>)
 8005790:	0020      	movs	r0, r4
 8005792:	f00e f94a 	bl	8013a2a <memcpy>
 8005796:	e7cf      	b.n	8005738 <ADCReadCommand+0x44>
 8005798:	08018410 	.word	0x08018410
 800579c:	0801839c 	.word	0x0801839c
 80057a0:	080183a0 	.word	0x080183a0
 80057a4:	080183a8 	.word	0x080183a8
 80057a8:	080183b8 	.word	0x080183b8

080057ac <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80057ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ae:	46d6      	mov	lr, sl
 80057b0:	4647      	mov	r7, r8
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b085      	sub	sp, #20
 80057b6:	0004      	movs	r4, r0
 80057b8:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] = "H";
 80057be:	4b62      	ldr	r3, [pc, #392]	; (8005948 <testportCommand+0x19c>)
 80057c0:	781a      	ldrb	r2, [r3, #0]
 80057c2:	ab02      	add	r3, sp, #8
 80057c4:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 80057c6:	2c00      	cmp	r4, #0
 80057c8:	d101      	bne.n	80057ce <testportCommand+0x22>
 80057ca:	b672      	cpsid	i
 80057cc:	e7fe      	b.n	80057cc <testportCommand+0x20>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80057ce:	aa03      	add	r2, sp, #12
 80057d0:	2101      	movs	r1, #1
 80057d2:	f008 fec5 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80057d6:	0005      	movs	r5, r0
	if (strcmp((char*) pcParameterString1, "all") == 0) {
 80057d8:	495c      	ldr	r1, [pc, #368]	; (800594c <testportCommand+0x1a0>)
 80057da:	f7fa fc93 	bl	8000104 <strcmp>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d000      	beq.n	80057e4 <testportCommand+0x38>
 80057e2:	e077      	b.n	80058d4 <testportCommand+0x128>
			LastEnter = UARTRxBufIndex[PcPort - 1];
 80057e4:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <testportCommand+0x1a4>)
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	4b5a      	ldr	r3, [pc, #360]	; (8005954 <testportCommand+0x1a8>)
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	3b01      	subs	r3, #1
 80057ee:	781e      	ldrb	r6, [r3, #0]
 80057f0:	2501      	movs	r5, #1
			if (PcPort != ports) {
 80057f2:	4b57      	ldr	r3, [pc, #348]	; (8005950 <testportCommand+0x1a4>)
 80057f4:	4698      	mov	r8, r3
 80057f6:	b2eb      	uxtb	r3, r5
 80057f8:	469a      	mov	sl, r3
 80057fa:	4643      	mov	r3, r8
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	4553      	cmp	r3, sl
 8005800:	d108      	bne.n	8005814 <testportCommand+0x68>
 8005802:	3501      	adds	r5, #1
		for (ports = 1; ports <= NumOfPorts; ports++) {
 8005804:	2d06      	cmp	r5, #6
 8005806:	d1f6      	bne.n	80057f6 <testportCommand+0x4a>
}
 8005808:	2000      	movs	r0, #0
 800580a:	b005      	add	sp, #20
 800580c:	bc0c      	pop	{r2, r3}
 800580e:	4690      	mov	r8, r2
 8005810:	469a      	mov	sl, r3
 8005812:	bdf0      	pop	{r4, r5, r6, r7, pc}
				WriteVaule[0] = rand();
 8005814:	f00f f81e 	bl	8014854 <rand>
 8005818:	af02      	add	r7, sp, #8
 800581a:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports, WriteVaule, 1, 10, 100);
 800581c:	2364      	movs	r3, #100	; 0x64
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	3b5a      	subs	r3, #90	; 0x5a
 8005822:	2201      	movs	r2, #1
 8005824:	0039      	movs	r1, r7
 8005826:	4650      	mov	r0, sl
 8005828:	f008 fc54 	bl	800e0d4 <writePxMutex>
				ReadValue[0] = (GetUart(ports)->Instance->RDR);
 800582c:	4650      	mov	r0, sl
 800582e:	f008 fc33 	bl	800e098 <GetUart>
 8005832:	6803      	ldr	r3, [r0, #0]
 8005834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if (WriteVaule[0] == ReadValue[0])
 8005836:	783a      	ldrb	r2, [r7, #0]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	429a      	cmp	r2, r3
 800583c:	d038      	beq.n	80058b0 <testportCommand+0x104>
					sprintf((char*) pcWriteBuffer, (char*) pcMessageFail,
 800583e:	002a      	movs	r2, r5
 8005840:	4945      	ldr	r1, [pc, #276]	; (8005958 <testportCommand+0x1ac>)
 8005842:	0020      	movs	r0, r4
 8005844:	f00f f858 	bl	80148f8 <siprintf>
					writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), 10, 100);
 8005848:	0020      	movs	r0, r4
 800584a:	f7fa fc65 	bl	8000118 <strlen>
 800584e:	b282      	uxth	r2, r0
 8005850:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <testportCommand+0x1a4>)
 8005852:	7818      	ldrb	r0, [r3, #0]
 8005854:	2364      	movs	r3, #100	; 0x64
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	3b5a      	subs	r3, #90	; 0x5a
 800585a:	0021      	movs	r1, r4
 800585c:	f008 fc3a 	bl	800e0d4 <writePxMutex>
				strcpy((char*) pcWriteBuffer, (char*) pcMessageWait);
 8005860:	2254      	movs	r2, #84	; 0x54
 8005862:	493e      	ldr	r1, [pc, #248]	; (800595c <testportCommand+0x1b0>)
 8005864:	0020      	movs	r0, r4
 8005866:	f00e f8e0 	bl	8013a2a <memcpy>
				writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), 10, 100);
 800586a:	0020      	movs	r0, r4
 800586c:	f7fa fc54 	bl	8000118 <strlen>
 8005870:	b282      	uxth	r2, r0
 8005872:	4b37      	ldr	r3, [pc, #220]	; (8005950 <testportCommand+0x1a4>)
 8005874:	7818      	ldrb	r0, [r3, #0]
 8005876:	2364      	movs	r3, #100	; 0x64
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	3b5a      	subs	r3, #90	; 0x5a
 800587c:	0021      	movs	r1, r4
 800587e:	f008 fc29 	bl	800e0d4 <writePxMutex>
				while (UARTRxBuf[PcPort - 1][LastEnter + 1] == 0) {
 8005882:	3601      	adds	r6, #1
 8005884:	4b32      	ldr	r3, [pc, #200]	; (8005950 <testportCommand+0x1a4>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	3b01      	subs	r3, #1
 800588a:	019b      	lsls	r3, r3, #6
 800588c:	4a34      	ldr	r2, [pc, #208]	; (8005960 <testportCommand+0x1b4>)
 800588e:	18d3      	adds	r3, r2, r3
 8005890:	5d9b      	ldrb	r3, [r3, r6]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1b5      	bne.n	8005802 <testportCommand+0x56>
 8005896:	4692      	mov	sl, r2
 8005898:	4f2d      	ldr	r7, [pc, #180]	; (8005950 <testportCommand+0x1a4>)
					Delay_ms(1);
 800589a:	2001      	movs	r0, #1
 800589c:	f00a fd72 	bl	8010384 <HAL_Delay>
				while (UARTRxBuf[PcPort - 1][LastEnter + 1] == 0) {
 80058a0:	783b      	ldrb	r3, [r7, #0]
 80058a2:	3b01      	subs	r3, #1
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	4453      	add	r3, sl
 80058a8:	5d9b      	ldrb	r3, [r3, r6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f5      	beq.n	800589a <testportCommand+0xee>
 80058ae:	e7a8      	b.n	8005802 <testportCommand+0x56>
					sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, ports);
 80058b0:	002a      	movs	r2, r5
 80058b2:	492c      	ldr	r1, [pc, #176]	; (8005964 <testportCommand+0x1b8>)
 80058b4:	0020      	movs	r0, r4
 80058b6:	f00f f81f 	bl	80148f8 <siprintf>
					writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), 10, 100);
 80058ba:	0020      	movs	r0, r4
 80058bc:	f7fa fc2c 	bl	8000118 <strlen>
 80058c0:	b282      	uxth	r2, r0
 80058c2:	4b23      	ldr	r3, [pc, #140]	; (8005950 <testportCommand+0x1a4>)
 80058c4:	7818      	ldrb	r0, [r3, #0]
 80058c6:	2364      	movs	r3, #100	; 0x64
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	3b5a      	subs	r3, #90	; 0x5a
 80058cc:	0021      	movs	r1, r4
 80058ce:	f008 fc01 	bl	800e0d4 <writePxMutex>
 80058d2:	e7c5      	b.n	8005860 <testportCommand+0xb4>
	} else if (pcParameterString1[0] == 'p') {
 80058d4:	2300      	movs	r3, #0
 80058d6:	56eb      	ldrsb	r3, [r5, r3]
 80058d8:	2b70      	cmp	r3, #112	; 0x70
 80058da:	d005      	beq.n	80058e8 <testportCommand+0x13c>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 80058dc:	220f      	movs	r2, #15
 80058de:	4922      	ldr	r1, [pc, #136]	; (8005968 <testportCommand+0x1bc>)
 80058e0:	0020      	movs	r0, r4
 80058e2:	f00e f8a2 	bl	8013a2a <memcpy>
 80058e6:	e78f      	b.n	8005808 <testportCommand+0x5c>
		portt = (uint8_t) atol((char*) pcParameterString1 + 1);
 80058e8:	1c68      	adds	r0, r5, #1
 80058ea:	f00e f82c 	bl	8013946 <atol>
 80058ee:	0005      	movs	r5, r0
 80058f0:	b2c7      	uxtb	r7, r0
		if (portt > 0 && portt <= NumOfPorts) {
 80058f2:	1e7b      	subs	r3, r7, #1
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d820      	bhi.n	800593a <testportCommand+0x18e>
				WriteVaule[0] = rand();
 80058f8:	f00e ffac 	bl	8014854 <rand>
 80058fc:	ae02      	add	r6, sp, #8
 80058fe:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt, WriteVaule, 1, cmd50ms, 100);
 8005900:	2364      	movs	r3, #100	; 0x64
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	3b32      	subs	r3, #50	; 0x32
 8005906:	2201      	movs	r2, #1
 8005908:	0031      	movs	r1, r6
 800590a:	0038      	movs	r0, r7
 800590c:	f008 fbe2 	bl	800e0d4 <writePxMutex>
				ReadValue[0] = (GetUart(portt)->Instance->RDR);
 8005910:	0038      	movs	r0, r7
 8005912:	f008 fbc1 	bl	800e098 <GetUart>
 8005916:	6803      	ldr	r3, [r0, #0]
 8005918:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if (WriteVaule[0] == ReadValue[0])
 800591a:	7832      	ldrb	r2, [r6, #0]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	429a      	cmp	r2, r3
 8005920:	d105      	bne.n	800592e <testportCommand+0x182>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, portt);
 8005922:	b2ea      	uxtb	r2, r5
 8005924:	490f      	ldr	r1, [pc, #60]	; (8005964 <testportCommand+0x1b8>)
 8005926:	0020      	movs	r0, r4
 8005928:	f00e ffe6 	bl	80148f8 <siprintf>
 800592c:	e76c      	b.n	8005808 <testportCommand+0x5c>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageFail, portt);
 800592e:	b2ea      	uxtb	r2, r5
 8005930:	4909      	ldr	r1, [pc, #36]	; (8005958 <testportCommand+0x1ac>)
 8005932:	0020      	movs	r0, r4
 8005934:	f00e ffe0 	bl	80148f8 <siprintf>
 8005938:	e766      	b.n	8005808 <testportCommand+0x5c>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong1);
 800593a:	221b      	movs	r2, #27
 800593c:	490b      	ldr	r1, [pc, #44]	; (800596c <testportCommand+0x1c0>)
 800593e:	0020      	movs	r0, r4
 8005940:	f00e f873 	bl	8013a2a <memcpy>
	return pdFALSE;
 8005944:	e760      	b.n	8005808 <testportCommand+0x5c>
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	08017788 	.word	0x08017788
 800594c:	08017b64 	.word	0x08017b64
 8005950:	2000029f 	.word	0x2000029f
 8005954:	20000bf8 	.word	0x20000bf8
 8005958:	0801a02c 	.word	0x0801a02c
 800595c:	0801a040 	.word	0x0801a040
 8005960:	20000ab8 	.word	0x20000ab8
 8005964:	0801a010 	.word	0x0801a010
 8005968:	0801a094 	.word	0x0801a094
 800596c:	0801a0a4 	.word	0x0801a0a4

08005970 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	b083      	sub	sp, #12
 8005974:	0004      	movs	r4, r0
 8005976:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800597e:	2800      	cmp	r0, #0
 8005980:	d101      	bne.n	8005986 <unbridgeCommand+0x16>
 8005982:	b672      	cpsid	i
 8005984:	e7fe      	b.n	8005984 <unbridgeCommand+0x14>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005986:	aa01      	add	r2, sp, #4
 8005988:	2101      	movs	r1, #1
 800598a:	0028      	movs	r0, r5
 800598c:	f008 fde8 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005990:	2300      	movs	r3, #0
 8005992:	56c3      	ldrsb	r3, [r0, r3]
 8005994:	2b70      	cmp	r3, #112	; 0x70
 8005996:	d00e      	beq.n	80059b6 <unbridgeCommand+0x46>
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8005998:	466a      	mov	r2, sp
 800599a:	2102      	movs	r1, #2
 800599c:	0028      	movs	r0, r5
 800599e:	f008 fddf 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80059a2:	2300      	movs	r3, #0
 80059a4:	56c3      	ldrsb	r3, [r0, r3]
 80059a6:	2b70      	cmp	r3, #112	; 0x70
 80059a8:	d01e      	beq.n	80059e8 <unbridgeCommand+0x78>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 80059aa:	220f      	movs	r2, #15
 80059ac:	491a      	ldr	r1, [pc, #104]	; (8005a18 <unbridgeCommand+0xa8>)
 80059ae:	0020      	movs	r0, r4
 80059b0:	f00e f83b 	bl	8013a2a <memcpy>
 80059b4:	e015      	b.n	80059e2 <unbridgeCommand+0x72>
		port1 = (uint8_t) atol((char*) pcParameterString1 + 1);
 80059b6:	3001      	adds	r0, #1
 80059b8:	f00d ffc5 	bl	8013946 <atol>
 80059bc:	0006      	movs	r6, r0
 80059be:	b2c7      	uxtb	r7, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 80059c0:	466a      	mov	r2, sp
 80059c2:	2102      	movs	r1, #2
 80059c4:	0028      	movs	r0, r5
 80059c6:	f008 fdcb 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 80059ca:	2300      	movs	r3, #0
 80059cc:	56c3      	ldrsb	r3, [r0, r3]
 80059ce:	2b70      	cmp	r3, #112	; 0x70
 80059d0:	d00e      	beq.n	80059f0 <unbridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 80059d2:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 80059d4:	2867      	cmp	r0, #103	; 0x67
 80059d6:	d0e8      	beq.n	80059aa <unbridgeCommand+0x3a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageFail);
 80059d8:	2219      	movs	r2, #25
 80059da:	4910      	ldr	r1, [pc, #64]	; (8005a1c <unbridgeCommand+0xac>)
 80059dc:	0020      	movs	r0, r4
 80059de:	f00e f824 	bl	8013a2a <memcpy>
}
 80059e2:	2000      	movs	r0, #0
 80059e4:	b003      	add	sp, #12
 80059e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = (uint8_t) atol((char*) pcParameterString2 + 1);
 80059e8:	3001      	adds	r0, #1
 80059ea:	f00d ffac 	bl	8013946 <atol>
 80059ee:	e7dc      	b.n	80059aa <unbridgeCommand+0x3a>
 80059f0:	3001      	adds	r0, #1
 80059f2:	f00d ffa8 	bl	8013946 <atol>
 80059f6:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 80059f8:	b2c1      	uxtb	r1, r0
 80059fa:	0038      	movs	r0, r7
 80059fc:	f7fe fea0 	bl	8004740 <Unbridge>
	if (result == BOS_OK)
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d1e7      	bne.n	80059d4 <unbridgeCommand+0x64>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, port1, port2);
 8005a04:	22ff      	movs	r2, #255	; 0xff
 8005a06:	002b      	movs	r3, r5
 8005a08:	4013      	ands	r3, r2
 8005a0a:	4032      	ands	r2, r6
 8005a0c:	4904      	ldr	r1, [pc, #16]	; (8005a20 <unbridgeCommand+0xb0>)
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f00e ff72 	bl	80148f8 <siprintf>
 8005a14:	e7e5      	b.n	80059e2 <unbridgeCommand+0x72>
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	0801a094 	.word	0x0801a094
 8005a1c:	0801a15c 	.word	0x0801a15c
 8005a20:	0801a13c 	.word	0x0801a13c

08005a24 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a26:	b083      	sub	sp, #12
 8005a28:	0004      	movs	r4, r0
 8005a2a:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9301      	str	r3, [sp, #4]
 8005a30:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d101      	bne.n	8005a3a <bridgeCommand+0x16>
 8005a36:	b672      	cpsid	i
 8005a38:	e7fe      	b.n	8005a38 <bridgeCommand+0x14>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005a3a:	aa01      	add	r2, sp, #4
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	0028      	movs	r0, r5
 8005a40:	f008 fd8e 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005a44:	2300      	movs	r3, #0
 8005a46:	56c3      	ldrsb	r3, [r0, r3]
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d00e      	beq.n	8005a6a <bridgeCommand+0x46>
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8005a4c:	466a      	mov	r2, sp
 8005a4e:	2102      	movs	r1, #2
 8005a50:	0028      	movs	r0, r5
 8005a52:	f008 fd85 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005a56:	2300      	movs	r3, #0
 8005a58:	56c3      	ldrsb	r3, [r0, r3]
 8005a5a:	2b70      	cmp	r3, #112	; 0x70
 8005a5c:	d01e      	beq.n	8005a9c <bridgeCommand+0x78>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005a5e:	220f      	movs	r2, #15
 8005a60:	491a      	ldr	r1, [pc, #104]	; (8005acc <bridgeCommand+0xa8>)
 8005a62:	0020      	movs	r0, r4
 8005a64:	f00d ffe1 	bl	8013a2a <memcpy>
 8005a68:	e015      	b.n	8005a96 <bridgeCommand+0x72>
		port1 = (uint8_t) atol((char*) pcParameterString1 + 1);
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f00d ff6b 	bl	8013946 <atol>
 8005a70:	0006      	movs	r6, r0
 8005a72:	b2c7      	uxtb	r7, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8005a74:	466a      	mov	r2, sp
 8005a76:	2102      	movs	r1, #2
 8005a78:	0028      	movs	r0, r5
 8005a7a:	f008 fd71 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005a7e:	2300      	movs	r3, #0
 8005a80:	56c3      	ldrsb	r3, [r0, r3]
 8005a82:	2b70      	cmp	r3, #112	; 0x70
 8005a84:	d00e      	beq.n	8005aa4 <bridgeCommand+0x80>
		result = BOS_ERR_WrongParam;
 8005a86:	2067      	movs	r0, #103	; 0x67
	else if (result == BOS_ERR_WrongParam)
 8005a88:	2867      	cmp	r0, #103	; 0x67
 8005a8a:	d0e8      	beq.n	8005a5e <bridgeCommand+0x3a>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageFail);
 8005a8c:	2217      	movs	r2, #23
 8005a8e:	4910      	ldr	r1, [pc, #64]	; (8005ad0 <bridgeCommand+0xac>)
 8005a90:	0020      	movs	r0, r4
 8005a92:	f00d ffca 	bl	8013a2a <memcpy>
}
 8005a96:	2000      	movs	r0, #0
 8005a98:	b003      	add	sp, #12
 8005a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 = (uint8_t) atol((char*) pcParameterString2 + 1);
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f00d ff52 	bl	8013946 <atol>
 8005aa2:	e7dc      	b.n	8005a5e <bridgeCommand+0x3a>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f00d ff4e 	bl	8013946 <atol>
 8005aaa:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005aac:	b2c1      	uxtb	r1, r0
 8005aae:	0038      	movs	r0, r7
 8005ab0:	f7fe fe32 	bl	8004718 <Bridge>
	if (result == BOS_OK)
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d1e7      	bne.n	8005a88 <bridgeCommand+0x64>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, port1, port2);
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	002b      	movs	r3, r5
 8005abc:	4013      	ands	r3, r2
 8005abe:	4032      	ands	r2, r6
 8005ac0:	4904      	ldr	r1, [pc, #16]	; (8005ad4 <bridgeCommand+0xb0>)
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	f00e ff18 	bl	80148f8 <siprintf>
 8005ac8:	e7e5      	b.n	8005a96 <bridgeCommand+0x72>
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	0801a094 	.word	0x0801a094
 8005ad0:	080185b0 	.word	0x080185b0
 8005ad4:	0801858c 	.word	0x0801858c

08005ad8 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ada:	b085      	sub	sp, #20
 8005adc:	0005      	movs	r5, r0
 8005ade:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	d101      	bne.n	8005aec <delSnipCommand+0x14>
 8005ae8:	b672      	cpsid	i
 8005aea:	e7fe      	b.n	8005aea <delSnipCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005aec:	aa03      	add	r2, sp, #12
 8005aee:	2101      	movs	r1, #1
 8005af0:	f008 fd36 	bl	800e560 <FreeRTOS_CLIGetParameter>
	uint8_t index = (uint8_t) atoi((char*) pcParameterString1);
 8005af4:	f00d ff21 	bl	801393a <atoi>
 8005af8:	9001      	str	r0, [sp, #4]
 8005afa:	b2c6      	uxtb	r6, r0
	if (!index || index > numOfRecordedSnippets)
 8005afc:	2e00      	cmp	r6, #0
 8005afe:	d003      	beq.n	8005b08 <delSnipCommand+0x30>
 8005b00:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <delSnipCommand+0xc8>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	42b3      	cmp	r3, r6
 8005b06:	d207      	bcs.n	8005b18 <delSnipCommand+0x40>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005b08:	2223      	movs	r2, #35	; 0x23
 8005b0a:	4926      	ldr	r1, [pc, #152]	; (8005ba4 <delSnipCommand+0xcc>)
 8005b0c:	0028      	movs	r0, r5
 8005b0e:	f00d ff8c 	bl	8013a2a <memcpy>
}
 8005b12:	2000      	movs	r0, #0
 8005b14:	b005      	add	sp, #20
 8005b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType = 0;
 8005b18:	466b      	mov	r3, sp
 8005b1a:	791a      	ldrb	r2, [r3, #4]
 8005b1c:	3a01      	subs	r2, #1
 8005b1e:	4822      	ldr	r0, [pc, #136]	; (8005ba8 <delSnipCommand+0xd0>)
 8005b20:	2314      	movs	r3, #20
 8005b22:	4353      	muls	r3, r2
 8005b24:	2700      	movs	r7, #0
 8005b26:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator = 0;
 8005b28:	18c4      	adds	r4, r0, r3
 8005b2a:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1, 0, 4);
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	1818      	adds	r0, r3, r0
 8005b30:	2204      	movs	r2, #4
 8005b32:	0039      	movs	r1, r7
 8005b34:	f00d ff82 	bl	8013a3c <memset>
		snippets[index - 1].state = false;
 8005b38:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005b3a:	68e0      	ldr	r0, [r4, #12]
 8005b3c:	f00d ff4a 	bl	80139d4 <free>
		snippets[index - 1].cmd = NULL;
 8005b40:	60e7      	str	r7, [r4, #12]
		for (uint8_t s = index; s < numOfRecordedSnippets; s++) {
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <delSnipCommand+0xc8>)
 8005b44:	781f      	ldrb	r7, [r3, #0]
 8005b46:	42be      	cmp	r6, r7
 8005b48:	d213      	bcs.n	8005b72 <delSnipCommand+0x9a>
 8005b4a:	466b      	mov	r3, sp
 8005b4c:	7919      	ldrb	r1, [r3, #4]
 8005b4e:	2214      	movs	r2, #20
 8005b50:	0014      	movs	r4, r2
 8005b52:	434c      	muls	r4, r1
 8005b54:	4814      	ldr	r0, [pc, #80]	; (8005ba8 <delSnipCommand+0xd0>)
 8005b56:	1824      	adds	r4, r4, r0
 8005b58:	1e7b      	subs	r3, r7, #1
 8005b5a:	1b9b      	subs	r3, r3, r6
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	185b      	adds	r3, r3, r1
 8005b60:	4353      	muls	r3, r2
 8005b62:	1880      	adds	r0, r0, r2
 8005b64:	181e      	adds	r6, r3, r0
			if (snippets[s].cond.conditionType) {
 8005b66:	7823      	ldrb	r3, [r4, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10d      	bne.n	8005b88 <delSnipCommand+0xb0>
 8005b6c:	3414      	adds	r4, #20
		for (uint8_t s = index; s < numOfRecordedSnippets; s++) {
 8005b6e:	42b4      	cmp	r4, r6
 8005b70:	d1f9      	bne.n	8005b66 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b72:	1e7b      	subs	r3, r7, #1
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <delSnipCommand+0xc8>)
 8005b76:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b78:	f005 fcbe 	bl	800b4f8 <SaveToRO>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 8005b7c:	2236      	movs	r2, #54	; 0x36
 8005b7e:	490b      	ldr	r1, [pc, #44]	; (8005bac <delSnipCommand+0xd4>)
 8005b80:	0028      	movs	r0, r5
 8005b82:	f00d ff52 	bl	8013a2a <memcpy>
 8005b86:	e7c4      	b.n	8005b12 <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1], &snippets[s], sizeof(snippet_t));
 8005b88:	2214      	movs	r2, #20
 8005b8a:	0021      	movs	r1, r4
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	3814      	subs	r0, #20
 8005b90:	f00d ff4b 	bl	8013a2a <memcpy>
				memset(&snippets[s], 0, sizeof(snippet_t));
 8005b94:	2214      	movs	r2, #20
 8005b96:	2100      	movs	r1, #0
 8005b98:	0020      	movs	r0, r4
 8005b9a:	f00d ff4f 	bl	8013a3c <memset>
 8005b9e:	e7e5      	b.n	8005b6c <delSnipCommand+0x94>
 8005ba0:	20000a07 	.word	0x20000a07
 8005ba4:	080186d0 	.word	0x080186d0
 8005ba8:	20006148 	.word	0x20006148
 8005bac:	08018698 	.word	0x08018698

08005bb0 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	0004      	movs	r4, r0
 8005bb6:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bbc:	2c00      	cmp	r4, #0
 8005bbe:	d101      	bne.n	8005bc4 <pauseSnipCommand+0x14>
 8005bc0:	b672      	cpsid	i
 8005bc2:	e7fe      	b.n	8005bc2 <pauseSnipCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005bc4:	aa01      	add	r2, sp, #4
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	f008 fcca 	bl	800e560 <FreeRTOS_CLIGetParameter>
	uint8_t index = (uint8_t) atoi((char*) pcParameterString1);
 8005bcc:	f00d feb5 	bl	801393a <atoi>
 8005bd0:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <pauseSnipCommand+0x2e>
 8005bd6:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <pauseSnipCommand+0x60>)
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d207      	bcs.n	8005bee <pauseSnipCommand+0x3e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005bde:	2223      	movs	r2, #35	; 0x23
 8005be0:	490c      	ldr	r1, [pc, #48]	; (8005c14 <pauseSnipCommand+0x64>)
 8005be2:	0020      	movs	r0, r4
 8005be4:	f00d ff21 	bl	8013a2a <memcpy>
}
 8005be8:	2000      	movs	r0, #0
 8005bea:	b002      	add	sp, #8
 8005bec:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005bee:	b2c0      	uxtb	r0, r0
 8005bf0:	3801      	subs	r0, #1
 8005bf2:	2314      	movs	r3, #20
 8005bf4:	4343      	muls	r3, r0
 8005bf6:	4808      	ldr	r0, [pc, #32]	; (8005c18 <pauseSnipCommand+0x68>)
 8005bf8:	18c0      	adds	r0, r0, r3
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005bfe:	f005 fc7b 	bl	800b4f8 <SaveToRO>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 8005c02:	2235      	movs	r2, #53	; 0x35
 8005c04:	4905      	ldr	r1, [pc, #20]	; (8005c1c <pauseSnipCommand+0x6c>)
 8005c06:	0020      	movs	r0, r4
 8005c08:	f00d ff0f 	bl	8013a2a <memcpy>
 8005c0c:	e7ec      	b.n	8005be8 <pauseSnipCommand+0x38>
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	20000a07 	.word	0x20000a07
 8005c14:	080186d0 	.word	0x080186d0
 8005c18:	20006148 	.word	0x20006148
 8005c1c:	08018ae0 	.word	0x08018ae0

08005c20 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005c20:	b510      	push	{r4, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	0004      	movs	r4, r0
 8005c26:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c2c:	2c00      	cmp	r4, #0
 8005c2e:	d101      	bne.n	8005c34 <actSnipCommand+0x14>
 8005c30:	b672      	cpsid	i
 8005c32:	e7fe      	b.n	8005c32 <actSnipCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8005c34:	aa01      	add	r2, sp, #4
 8005c36:	2101      	movs	r1, #1
 8005c38:	f008 fc92 	bl	800e560 <FreeRTOS_CLIGetParameter>
	uint8_t index = (uint8_t) atoi((char*) pcParameterString1);
 8005c3c:	f00d fe7d 	bl	801393a <atoi>
 8005c40:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <actSnipCommand+0x2e>
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <actSnipCommand+0x60>)
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d207      	bcs.n	8005c5e <actSnipCommand+0x3e>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrong);
 8005c4e:	2223      	movs	r2, #35	; 0x23
 8005c50:	490c      	ldr	r1, [pc, #48]	; (8005c84 <actSnipCommand+0x64>)
 8005c52:	0020      	movs	r0, r4
 8005c54:	f00d fee9 	bl	8013a2a <memcpy>
}
 8005c58:	2000      	movs	r0, #0
 8005c5a:	b002      	add	sp, #8
 8005c5c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c5e:	b2c0      	uxtb	r0, r0
 8005c60:	3801      	subs	r0, #1
 8005c62:	2314      	movs	r3, #20
 8005c64:	4343      	muls	r3, r0
 8005c66:	4808      	ldr	r0, [pc, #32]	; (8005c88 <actSnipCommand+0x68>)
 8005c68:	18c0      	adds	r0, r0, r3
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c6e:	f005 fc43 	bl	800b4f8 <SaveToRO>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOK);
 8005c72:	2238      	movs	r2, #56	; 0x38
 8005c74:	4905      	ldr	r1, [pc, #20]	; (8005c8c <actSnipCommand+0x6c>)
 8005c76:	0020      	movs	r0, r4
 8005c78:	f00d fed7 	bl	8013a2a <memcpy>
 8005c7c:	e7ec      	b.n	8005c58 <actSnipCommand+0x38>
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	20000a07 	.word	0x20000a07
 8005c84:	080186d0 	.word	0x080186d0
 8005c88:	20006148 	.word	0x20006148
 8005c8c:	08018494 	.word	0x08018494

08005c90 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c92:	46d6      	mov	lr, sl
 8005c94:	464f      	mov	r7, r9
 8005c96:	4646      	mov	r6, r8
 8005c98:	b5c0      	push	{r6, r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	0004      	movs	r4, r0
	char status[2][7] = { "Paused", "Active" };
 8005c9e:	aa06      	add	r2, sp, #24
 8005ca0:	4b7a      	ldr	r3, [pc, #488]	; (8005e8c <snipCommand+0x1fc>)
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005ca6:	c223      	stmia	r2!, {r0, r1, r5}
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005cac:	2c00      	cmp	r4, #0
 8005cae:	d101      	bne.n	8005cb4 <snipCommand+0x24>
 8005cb0:	b672      	cpsid	i
 8005cb2:	e7fe      	b.n	8005cb2 <snipCommand+0x22>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome,strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005cb4:	4b76      	ldr	r3, [pc, #472]	; (8005e90 <snipCommand+0x200>)
 8005cb6:	7818      	ldrb	r0, [r3, #0]
 8005cb8:	2301      	movs	r3, #1
 8005cba:	425b      	negs	r3, r3
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	3333      	adds	r3, #51	; 0x33
 8005cc0:	2237      	movs	r2, #55	; 0x37
 8005cc2:	4974      	ldr	r1, [pc, #464]	; (8005e94 <snipCommand+0x204>)
 8005cc4:	f008 fa06 	bl	800e0d4 <writePxMutex>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8005cc8:	4b73      	ldr	r3, [pc, #460]	; (8005e98 <snipCommand+0x208>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d100      	bne.n	8005cd2 <snipCommand+0x42>
 8005cd0:	e0d0      	b.n	8005e74 <snipCommand+0x1e4>
 8005cd2:	2500      	movs	r5, #0
		if (snippets[s].cond.conditionType)
 8005cd4:	4b71      	ldr	r3, [pc, #452]	; (8005e9c <snipCommand+0x20c>)
 8005cd6:	4698      	mov	r8, r3
 8005cd8:	e0ba      	b.n	8005e50 <snipCommand+0x1c0>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageSnipStart, count,status[snippets[s].state]);
 8005cda:	4b70      	ldr	r3, [pc, #448]	; (8005e9c <snipCommand+0x20c>)
 8005cdc:	4699      	mov	r9, r3
 8005cde:	00ab      	lsls	r3, r5, #2
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	195b      	adds	r3, r3, r5
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	444b      	add	r3, r9
 8005ce8:	7c1a      	ldrb	r2, [r3, #16]
 8005cea:	00d3      	lsls	r3, r2, #3
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	aa06      	add	r2, sp, #24
 8005cf0:	4694      	mov	ip, r2
 8005cf2:	4463      	add	r3, ip
 8005cf4:	003a      	movs	r2, r7
 8005cf6:	496a      	ldr	r1, [pc, #424]	; (8005ea0 <snipCommand+0x210>)
 8005cf8:	0020      	movs	r0, r4
 8005cfa:	f00e fdfd 	bl	80148f8 <siprintf>
		switch (snippets[s].cond.conditionType) {
 8005cfe:	4653      	mov	r3, sl
 8005d00:	195b      	adds	r3, r3, r5
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	464a      	mov	r2, r9
 8005d06:	5c9b      	ldrb	r3, [r3, r2]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d02d      	beq.n	8005d68 <snipCommand+0xd8>
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d000      	beq.n	8005d12 <snipCommand+0x82>
 8005d10:	e0a9      	b.n	8005e66 <snipCommand+0x1d6>
			memcpy((uint8_t*) &flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005d12:	00a9      	lsls	r1, r5, #2
 8005d14:	1949      	adds	r1, r1, r5
 8005d16:	0089      	lsls	r1, r1, #2
 8005d18:	3106      	adds	r1, #6
 8005d1a:	4b60      	ldr	r3, [pc, #384]	; (8005e9c <snipCommand+0x20c>)
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	4449      	add	r1, r9
 8005d20:	2204      	movs	r2, #4
 8005d22:	a805      	add	r0, sp, #20
 8005d24:	f00d fe81 	bl	8013a2a <memcpy>
			sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipModuleParamConst,(char*) pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1], flt1);
 8005d28:	00ad      	lsls	r5, r5, #2
 8005d2a:	19ad      	adds	r5, r5, r6
 8005d2c:	00ad      	lsls	r5, r5, #2
 8005d2e:	444d      	add	r5, r9
 8005d30:	78ea      	ldrb	r2, [r5, #3]
 8005d32:	3a01      	subs	r2, #1
 8005d34:	0053      	lsls	r3, r2, #1
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4a5a      	ldr	r2, [pc, #360]	; (8005ea4 <snipCommand+0x214>)
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4699      	mov	r9, r3
 8005d42:	9805      	ldr	r0, [sp, #20]
 8005d44:	f7fc ff14 	bl	8002b70 <__aeabi_f2d>
 8005d48:	9002      	str	r0, [sp, #8]
 8005d4a:	9103      	str	r1, [sp, #12]
 8005d4c:	786b      	ldrb	r3, [r5, #1]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	005a      	lsls	r2, r3, #1
 8005d52:	18d2      	adds	r2, r2, r3
 8005d54:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <snipCommand+0x218>)
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	0022      	movs	r2, r4
 8005d5e:	4953      	ldr	r1, [pc, #332]	; (8005eac <snipCommand+0x21c>)
 8005d60:	0020      	movs	r0, r4
 8005d62:	f00e fdc9 	bl	80148f8 <siprintf>
			break;
 8005d66:	e07e      	b.n	8005e66 <snipCommand+0x1d6>
			switch (snippets[s].cond.buffer1[1]) {
 8005d68:	00ab      	lsls	r3, r5, #2
 8005d6a:	195b      	adds	r3, r3, r5
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4a4b      	ldr	r2, [pc, #300]	; (8005e9c <snipCommand+0x20c>)
 8005d70:	18d3      	adds	r3, r2, r3
 8005d72:	78db      	ldrb	r3, [r3, #3]
 8005d74:	3b05      	subs	r3, #5
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	2a09      	cmp	r2, #9
 8005d7a:	d874      	bhi.n	8005e66 <snipCommand+0x1d6>
 8005d7c:	0093      	lsls	r3, r2, #2
 8005d7e:	4a4c      	ldr	r2, [pc, #304]	; (8005eb0 <snipCommand+0x220>)
 8005d80:	58d3      	ldr	r3, [r2, r3]
 8005d82:	469f      	mov	pc, r3
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventClicked,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d84:	2314      	movs	r3, #20
 8005d86:	436b      	muls	r3, r5
 8005d88:	4a44      	ldr	r2, [pc, #272]	; (8005e9c <snipCommand+0x20c>)
 8005d8a:	18d2      	adds	r2, r2, r3
 8005d8c:	7893      	ldrb	r3, [r2, #2]
 8005d8e:	68d2      	ldr	r2, [r2, #12]
 8005d90:	9200      	str	r2, [sp, #0]
 8005d92:	0022      	movs	r2, r4
 8005d94:	4947      	ldr	r1, [pc, #284]	; (8005eb4 <snipCommand+0x224>)
 8005d96:	0020      	movs	r0, r4
 8005d98:	f00e fdae 	bl	80148f8 <siprintf>
				break;
 8005d9c:	e063      	b.n	8005e66 <snipCommand+0x1d6>
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventDblClicked,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d9e:	2314      	movs	r3, #20
 8005da0:	436b      	muls	r3, r5
 8005da2:	4a3e      	ldr	r2, [pc, #248]	; (8005e9c <snipCommand+0x20c>)
 8005da4:	18d2      	adds	r2, r2, r3
 8005da6:	7893      	ldrb	r3, [r2, #2]
 8005da8:	68d2      	ldr	r2, [r2, #12]
 8005daa:	9200      	str	r2, [sp, #0]
 8005dac:	0022      	movs	r2, r4
 8005dae:	4942      	ldr	r1, [pc, #264]	; (8005eb8 <snipCommand+0x228>)
 8005db0:	0020      	movs	r0, r4
 8005db2:	f00e fda1 	bl	80148f8 <siprintf>
				break;
 8005db6:	e056      	b.n	8005e66 <snipCommand+0x1d6>
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventPressed,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2], snippets[s].cmd);
 8005db8:	2314      	movs	r3, #20
 8005dba:	436b      	muls	r3, r5
 8005dbc:	4a37      	ldr	r2, [pc, #220]	; (8005e9c <snipCommand+0x20c>)
 8005dbe:	18d2      	adds	r2, r2, r3
 8005dc0:	7893      	ldrb	r3, [r2, #2]
 8005dc2:	68d1      	ldr	r1, [r2, #12]
 8005dc4:	9101      	str	r1, [sp, #4]
 8005dc6:	7912      	ldrb	r2, [r2, #4]
 8005dc8:	9200      	str	r2, [sp, #0]
 8005dca:	0022      	movs	r2, r4
 8005dcc:	493b      	ldr	r1, [pc, #236]	; (8005ebc <snipCommand+0x22c>)
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f00e fd92 	bl	80148f8 <siprintf>
				break;
 8005dd4:	e047      	b.n	8005e66 <snipCommand+0x1d6>
				sprintf((char*) pcWriteBuffer,(char*) pcMessageSnipButtonEventReleased,(char*) pcWriteBuffer, snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2], snippets[s].cmd);
 8005dd6:	2314      	movs	r3, #20
 8005dd8:	436b      	muls	r3, r5
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <snipCommand+0x20c>)
 8005ddc:	18d2      	adds	r2, r2, r3
 8005dde:	7893      	ldrb	r3, [r2, #2]
 8005de0:	68d1      	ldr	r1, [r2, #12]
 8005de2:	9101      	str	r1, [sp, #4]
 8005de4:	7912      	ldrb	r2, [r2, #4]
 8005de6:	9200      	str	r2, [sp, #0]
 8005de8:	0022      	movs	r2, r4
 8005dea:	4935      	ldr	r1, [pc, #212]	; (8005ec0 <snipCommand+0x230>)
 8005dec:	0020      	movs	r0, r4
 8005dee:	f00e fd83 	bl	80148f8 <siprintf>
				break;
 8005df2:	e038      	b.n	8005e66 <snipCommand+0x1d6>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageCmds, pcWriteBuffer,
 8005df4:	4b33      	ldr	r3, [pc, #204]	; (8005ec4 <snipCommand+0x234>)
 8005df6:	0022      	movs	r2, r4
 8005df8:	4933      	ldr	r1, [pc, #204]	; (8005ec8 <snipCommand+0x238>)
 8005dfa:	0020      	movs	r0, r4
 8005dfc:	f00e fd7c 	bl	80148f8 <siprintf>
			memset(&commands, 0x00, strlen((char*) commands));
 8005e00:	4830      	ldr	r0, [pc, #192]	; (8005ec4 <snipCommand+0x234>)
 8005e02:	f7fa f989 	bl	8000118 <strlen>
 8005e06:	0002      	movs	r2, r0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	482e      	ldr	r0, [pc, #184]	; (8005ec4 <snipCommand+0x234>)
 8005e0c:	f00d fe16 	bl	8013a3c <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t*) &commands)
 8005e10:	0029      	movs	r1, r5
 8005e12:	68f0      	ldr	r0, [r6, #12]
 8005e14:	f7ff fa94 	bl	8005340 <ParseSnippetCommand>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1eb      	bne.n	8005df4 <snipCommand+0x164>
		strcat((char*) pcWriteBuffer, (char*) pcMessageEnd);
 8005e1c:	0020      	movs	r0, r4
 8005e1e:	f7fa f97b 	bl	8000118 <strlen>
 8005e22:	1820      	adds	r0, r4, r0
 8005e24:	220c      	movs	r2, #12
 8005e26:	4929      	ldr	r1, [pc, #164]	; (8005ecc <snipCommand+0x23c>)
 8005e28:	f00d fdff 	bl	8013a2a <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8005e2c:	0020      	movs	r0, r4
 8005e2e:	f7fa f973 	bl	8000118 <strlen>
 8005e32:	b282      	uxth	r2, r0
 8005e34:	4b16      	ldr	r3, [pc, #88]	; (8005e90 <snipCommand+0x200>)
 8005e36:	7818      	ldrb	r0, [r3, #0]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	425b      	negs	r3, r3
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	3333      	adds	r3, #51	; 0x33
 8005e40:	0021      	movs	r1, r4
 8005e42:	f008 f947 	bl	800e0d4 <writePxMutex>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8005e46:	003d      	movs	r5, r7
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <snipCommand+0x208>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	42bb      	cmp	r3, r7
 8005e4e:	d911      	bls.n	8005e74 <snipCommand+0x1e4>
 8005e50:	1c6f      	adds	r7, r5, #1
 8005e52:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 8005e54:	002e      	movs	r6, r5
 8005e56:	00ab      	lsls	r3, r5, #2
 8005e58:	195b      	adds	r3, r3, r5
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	5c9b      	ldrb	r3, [r3, r2]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d000      	beq.n	8005e66 <snipCommand+0x1d6>
 8005e64:	e739      	b.n	8005cda <snipCommand+0x4a>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t*) &commands)
 8005e66:	4d17      	ldr	r5, [pc, #92]	; (8005ec4 <snipCommand+0x234>)
 8005e68:	00b3      	lsls	r3, r6, #2
 8005e6a:	199b      	adds	r3, r3, r6
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4e0b      	ldr	r6, [pc, #44]	; (8005e9c <snipCommand+0x20c>)
 8005e70:	18f6      	adds	r6, r6, r3
 8005e72:	e7cd      	b.n	8005e10 <snipCommand+0x180>
	strcpy((char*) pcWriteBuffer, (char*) pcMessageSnipAction);
 8005e74:	22b5      	movs	r2, #181	; 0xb5
 8005e76:	4916      	ldr	r1, [pc, #88]	; (8005ed0 <snipCommand+0x240>)
 8005e78:	0020      	movs	r0, r4
 8005e7a:	f00d fdd6 	bl	8013a2a <memcpy>
}
 8005e7e:	2000      	movs	r0, #0
 8005e80:	b00a      	add	sp, #40	; 0x28
 8005e82:	bc1c      	pop	{r2, r3, r4}
 8005e84:	4690      	mov	r8, r2
 8005e86:	4699      	mov	r9, r3
 8005e88:	46a2      	mov	sl, r4
 8005e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e8c:	08017788 	.word	0x08017788
 8005e90:	2000029f 	.word	0x2000029f
 8005e94:	08018f74 	.word	0x08018f74
 8005e98:	20000a07 	.word	0x20000a07
 8005e9c:	20006148 	.word	0x20006148
 8005ea0:	08018fac 	.word	0x08018fac
 8005ea4:	20000088 	.word	0x20000088
 8005ea8:	08018aa4 	.word	0x08018aa4
 8005eac:	08019018 	.word	0x08019018
 8005eb0:	08018350 	.word	0x08018350
 8005eb4:	08018fb8 	.word	0x08018fb8
 8005eb8:	08018fcc 	.word	0x08018fcc
 8005ebc:	08018fe4 	.word	0x08018fe4
 8005ec0:	08018ffc 	.word	0x08018ffc
 8005ec4:	20000a38 	.word	0x20000a38
 8005ec8:	08019028 	.word	0x08019028
 8005ecc:	08019030 	.word	0x08019030
 8005ed0:	0801903c 	.word	0x0801903c

08005ed4 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005ed8:	d101      	bne.n	8005ede <idcodeCommand+0xa>
 8005eda:	b672      	cpsid	i
 8005edc:	e7fe      	b.n	8005edc <idcodeCommand+0x8>
	dev = HAL_GetDEVID();
 8005ede:	f00a fa65 	bl	80103ac <HAL_GetDEVID>
	switch (dev) {
 8005ee2:	0403      	lsls	r3, r0, #16
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <idcodeCommand+0x80>)
 8005ee8:	4694      	mov	ip, r2
 8005eea:	4463      	add	r3, ip
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d82a      	bhi.n	8005f46 <idcodeCommand+0x72>
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4a19      	ldr	r2, [pc, #100]	; (8005f58 <idcodeCommand+0x84>)
 8005ef4:	58d3      	ldr	r3, [r2, r3]
 8005ef6:	469f      	mov	pc, r3
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F03x");
 8005ef8:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <idcodeCommand+0x88>)
 8005efa:	4919      	ldr	r1, [pc, #100]	; (8005f60 <idcodeCommand+0x8c>)
 8005efc:	0020      	movs	r0, r4
 8005efe:	f00e fcfb 	bl	80148f8 <siprintf>
			(char*) pcWriteBuffer, HAL_GetREVID() >> 12);
 8005f02:	f00a fa4d 	bl	80103a0 <HAL_GetREVID>
	sprintf((char*) pcWriteBuffer, (char*) pcMessageREVID,
 8005f06:	0b03      	lsrs	r3, r0, #12
 8005f08:	0022      	movs	r2, r4
 8005f0a:	4916      	ldr	r1, [pc, #88]	; (8005f64 <idcodeCommand+0x90>)
 8005f0c:	0020      	movs	r0, r4
 8005f0e:	f00e fcf3 	bl	80148f8 <siprintf>
}
 8005f12:	2000      	movs	r0, #0
 8005f14:	bd10      	pop	{r4, pc}
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F04x");
 8005f16:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <idcodeCommand+0x94>)
 8005f18:	4911      	ldr	r1, [pc, #68]	; (8005f60 <idcodeCommand+0x8c>)
 8005f1a:	0020      	movs	r0, r4
 8005f1c:	f00e fcec 	bl	80148f8 <siprintf>
		break;
 8005f20:	e7ef      	b.n	8005f02 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F05x");
 8005f22:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <idcodeCommand+0x98>)
 8005f24:	490e      	ldr	r1, [pc, #56]	; (8005f60 <idcodeCommand+0x8c>)
 8005f26:	0020      	movs	r0, r4
 8005f28:	f00e fce6 	bl	80148f8 <siprintf>
		break;
 8005f2c:	e7e9      	b.n	8005f02 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F07x");
 8005f2e:	4a10      	ldr	r2, [pc, #64]	; (8005f70 <idcodeCommand+0x9c>)
 8005f30:	490b      	ldr	r1, [pc, #44]	; (8005f60 <idcodeCommand+0x8c>)
 8005f32:	0020      	movs	r0, r4
 8005f34:	f00e fce0 	bl	80148f8 <siprintf>
		break;
 8005f38:	e7e3      	b.n	8005f02 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "STM32F09x");
 8005f3a:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <idcodeCommand+0xa0>)
 8005f3c:	4908      	ldr	r1, [pc, #32]	; (8005f60 <idcodeCommand+0x8c>)
 8005f3e:	0020      	movs	r0, r4
 8005f40:	f00e fcda 	bl	80148f8 <siprintf>
		break;
 8005f44:	e7dd      	b.n	8005f02 <idcodeCommand+0x2e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageDEVID, "UNKNOWN");
 8005f46:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <idcodeCommand+0xa4>)
 8005f48:	4905      	ldr	r1, [pc, #20]	; (8005f60 <idcodeCommand+0x8c>)
 8005f4a:	0020      	movs	r0, r4
 8005f4c:	f00e fcd4 	bl	80148f8 <siprintf>
		break;
 8005f50:	e7d7      	b.n	8005f02 <idcodeCommand+0x2e>
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	fffffbc0 	.word	0xfffffbc0
 8005f58:	08018378 	.word	0x08018378
 8005f5c:	080189a0 	.word	0x080189a0
 8005f60:	080189ac 	.word	0x080189ac
 8005f64:	080189f8 	.word	0x080189f8
 8005f68:	080189c0 	.word	0x080189c0
 8005f6c:	080189cc 	.word	0x080189cc
 8005f70:	080189d8 	.word	0x080189d8
 8005f74:	080189e4 	.word	0x080189e4
 8005f78:	080189f0 	.word	0x080189f0

08005f7c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f80:	d101      	bne.n	8005f86 <uuidCommand+0xa>
 8005f82:	b672      	cpsid	i
 8005f84:	e7fe      	b.n	8005f84 <uuidCommand+0x8>
	sprintf((char*) pcWriteBuffer, "%s", (char*) pcMessageUUID);
 8005f86:	220e      	movs	r2, #14
 8005f88:	4911      	ldr	r1, [pc, #68]	; (8005fd0 <uuidCommand+0x54>)
 8005f8a:	f00d fd4e 	bl	8013a2a <memcpy>
		sprintf((char*) pcWriteBuffer, "%s%08X", (char*) pcWriteBuffer,*(uint32_t*) (MCU_F0_UUID_BASE + i * 4));
 8005f8e:	4b11      	ldr	r3, [pc, #68]	; (8005fd4 <uuidCommand+0x58>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4d11      	ldr	r5, [pc, #68]	; (8005fd8 <uuidCommand+0x5c>)
 8005f94:	0022      	movs	r2, r4
 8005f96:	0029      	movs	r1, r5
 8005f98:	0020      	movs	r0, r4
 8005f9a:	f00e fcad 	bl	80148f8 <siprintf>
 8005f9e:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <uuidCommand+0x60>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	0022      	movs	r2, r4
 8005fa4:	0029      	movs	r1, r5
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	f00e fca6 	bl	80148f8 <siprintf>
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <uuidCommand+0x64>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	0022      	movs	r2, r4
 8005fb2:	0029      	movs	r1, r5
 8005fb4:	0020      	movs	r0, r4
 8005fb6:	f00e fc9f 	bl	80148f8 <siprintf>
	strcat((char*) pcWriteBuffer, "\r\n");
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f7fa f8ac 	bl	8000118 <strlen>
 8005fc0:	1820      	adds	r0, r4, r0
 8005fc2:	2203      	movs	r2, #3
 8005fc4:	4907      	ldr	r1, [pc, #28]	; (8005fe4 <uuidCommand+0x68>)
 8005fc6:	f00d fd30 	bl	8013a2a <memcpy>
}
 8005fca:	2000      	movs	r0, #0
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	0801a188 	.word	0x0801a188
 8005fd4:	1ffff7ac 	.word	0x1ffff7ac
 8005fd8:	0801a198 	.word	0x0801a198
 8005fdc:	1ffff7b0 	.word	0x1ffff7b0
 8005fe0:	1ffff7b4 	.word	0x1ffff7b4
 8005fe4:	080196d8 	.word	0x080196d8

08005fe8 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8005fe8:	b510      	push	{r4, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005fee:	d101      	bne.n	8005ff4 <timeCommand+0xc>
 8005ff0:	b672      	cpsid	i
 8005ff2:	e7fe      	b.n	8005ff2 <timeCommand+0xa>
	GetTimeDate();
 8005ff4:	f007 fe16 	bl	800dc24 <GetTimeDate>
	if (BOS.hourformat == 24)
 8005ff8:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <timeCommand+0x80>)
 8005ffa:	7b5b      	ldrb	r3, [r3, #13]
 8005ffc:	2b18      	cmp	r3, #24
 8005ffe:	d004      	beq.n	800600a <timeCommand+0x22>
	else if (BOS.hourformat == 12) {
 8006000:	2b0c      	cmp	r3, #12
 8006002:	d00e      	beq.n	8006022 <timeCommand+0x3a>
}
 8006004:	2000      	movs	r0, #0
 8006006:	b004      	add	sp, #16
 8006008:	bd10      	pop	{r4, pc}
		  sprintf((char*) pcWriteBuffer, (char*) pcMessage24, BOS.time.hours,BOS.time.minutes, BOS.time.seconds, BOS.time.msec);
 800600a:	4917      	ldr	r1, [pc, #92]	; (8006068 <timeCommand+0x80>)
 800600c:	7c4b      	ldrb	r3, [r1, #17]
 800600e:	7c8a      	ldrb	r2, [r1, #18]
 8006010:	89c8      	ldrh	r0, [r1, #14]
 8006012:	9001      	str	r0, [sp, #4]
 8006014:	7c09      	ldrb	r1, [r1, #16]
 8006016:	9100      	str	r1, [sp, #0]
 8006018:	4914      	ldr	r1, [pc, #80]	; (800606c <timeCommand+0x84>)
 800601a:	0020      	movs	r0, r4
 800601c:	f00e fc6c 	bl	80148f8 <siprintf>
 8006020:	e7f0      	b.n	8006004 <timeCommand+0x1c>
		if (BOS.time.ampm == RTC_AM)
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <timeCommand+0x80>)
 8006024:	7cdb      	ldrb	r3, [r3, #19]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d10d      	bne.n	8006046 <timeCommand+0x5e>
			sprintf((char*) pcWriteBuffer, (char*) pcMessage12, BOS.time.hours,BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM");
 800602a:	490f      	ldr	r1, [pc, #60]	; (8006068 <timeCommand+0x80>)
 800602c:	7c4b      	ldrb	r3, [r1, #17]
 800602e:	7c8a      	ldrb	r2, [r1, #18]
 8006030:	480f      	ldr	r0, [pc, #60]	; (8006070 <timeCommand+0x88>)
 8006032:	9002      	str	r0, [sp, #8]
 8006034:	89c8      	ldrh	r0, [r1, #14]
 8006036:	9001      	str	r0, [sp, #4]
 8006038:	7c09      	ldrb	r1, [r1, #16]
 800603a:	9100      	str	r1, [sp, #0]
 800603c:	490d      	ldr	r1, [pc, #52]	; (8006074 <timeCommand+0x8c>)
 800603e:	0020      	movs	r0, r4
 8006040:	f00e fc5a 	bl	80148f8 <siprintf>
 8006044:	e7de      	b.n	8006004 <timeCommand+0x1c>
		else if (BOS.time.ampm == RTC_PM)
 8006046:	2b02      	cmp	r3, #2
 8006048:	d1dc      	bne.n	8006004 <timeCommand+0x1c>
			sprintf((char*) pcWriteBuffer, (char*) pcMessage12, BOS.time.hours,BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM");
 800604a:	4907      	ldr	r1, [pc, #28]	; (8006068 <timeCommand+0x80>)
 800604c:	7c4b      	ldrb	r3, [r1, #17]
 800604e:	7c8a      	ldrb	r2, [r1, #18]
 8006050:	4809      	ldr	r0, [pc, #36]	; (8006078 <timeCommand+0x90>)
 8006052:	9002      	str	r0, [sp, #8]
 8006054:	89c8      	ldrh	r0, [r1, #14]
 8006056:	9001      	str	r0, [sp, #4]
 8006058:	7c09      	ldrb	r1, [r1, #16]
 800605a:	9100      	str	r1, [sp, #0]
 800605c:	4905      	ldr	r1, [pc, #20]	; (8006074 <timeCommand+0x8c>)
 800605e:	0020      	movs	r0, r4
 8006060:	f00e fc4a 	bl	80148f8 <siprintf>
 8006064:	e7ce      	b.n	8006004 <timeCommand+0x1c>
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	2000612c 	.word	0x2000612c
 800606c:	0801a0d0 	.word	0x0801a0d0
 8006070:	0801a124 	.word	0x0801a124
 8006074:	0801a0f8 	.word	0x0801a0f8
 8006078:	0801a128 	.word	0x0801a128

0800607c <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 800607c:	b510      	push	{r4, lr}
 800607e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006080:	d101      	bne.n	8006086 <dateCommand+0xa>
 8006082:	b672      	cpsid	i
 8006084:	e7fe      	b.n	8006084 <dateCommand+0x8>
	GetTimeDate();
 8006086:	f007 fdcd 	bl	800dc24 <GetTimeDate>
	sprintf((char*) pcWriteBuffer, (char*) pcMessageDate, GetDateString());
 800608a:	f7fe fb23 	bl	80046d4 <GetDateString>
 800608e:	0002      	movs	r2, r0
 8006090:	4902      	ldr	r1, [pc, #8]	; (800609c <dateCommand+0x20>)
 8006092:	0020      	movs	r0, r4
 8006094:	f00e fc30 	bl	80148f8 <siprintf>
}
 8006098:	2000      	movs	r0, #0
 800609a:	bd10      	pop	{r4, pc}
 800609c:	080185d8 	.word	0x080185d8

080060a0 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	46c6      	mov	lr, r8
 80060a4:	b500      	push	{lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	0004      	movs	r4, r0
 80060aa:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d101      	bne.n	80060ba <getCommand+0x1a>
 80060b6:	b672      	cpsid	i
 80060b8:	e7fe      	b.n	80060b8 <getCommand+0x18>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80060ba:	aa01      	add	r2, sp, #4
 80060bc:	2101      	movs	r1, #1
 80060be:	0030      	movs	r0, r6
 80060c0:	f008 fa4e 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80060c4:	0005      	movs	r5, r0
 80060c6:	4b74      	ldr	r3, [pc, #464]	; (8006298 <getCommand+0x1f8>)
 80060c8:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char*) pcParameterString1, "bos.", 4)) {
 80060ca:	2204      	movs	r2, #4
 80060cc:	4973      	ldr	r1, [pc, #460]	; (800629c <getCommand+0x1fc>)
 80060ce:	f00e fc57 	bl	8014980 <strncmp>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d000      	beq.n	80060d8 <getCommand+0x38>
 80060d6:	e090      	b.n	80061fa <getCommand+0x15a>
		if (!strncmp((const char*) pcParameterString1 + 4, "response",xParameterStringLength1 - 4)) {
 80060d8:	1d2f      	adds	r7, r5, #4
 80060da:	9b01      	ldr	r3, [sp, #4]
 80060dc:	1f1e      	subs	r6, r3, #4
 80060de:	0032      	movs	r2, r6
 80060e0:	496f      	ldr	r1, [pc, #444]	; (80062a0 <getCommand+0x200>)
 80060e2:	0038      	movs	r0, r7
 80060e4:	f00e fc4c 	bl	8014980 <strncmp>
 80060e8:	2800      	cmp	r0, #0
 80060ea:	d11e      	bne.n	800612a <getCommand+0x8a>
			if (BOS.response == BOS_RESPONSE_ALL)
 80060ec:	4b6d      	ldr	r3, [pc, #436]	; (80062a4 <getCommand+0x204>)
 80060ee:	799b      	ldrb	r3, [r3, #6]
 80060f0:	2b60      	cmp	r3, #96	; 0x60
 80060f2:	d109      	bne.n	8006108 <getCommand+0x68>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "all");
 80060f4:	4a6c      	ldr	r2, [pc, #432]	; (80062a8 <getCommand+0x208>)
 80060f6:	496d      	ldr	r1, [pc, #436]	; (80062ac <getCommand+0x20c>)
 80060f8:	0020      	movs	r0, r4
 80060fa:	f00e fbfd 	bl	80148f8 <siprintf>
}
 80060fe:	2000      	movs	r0, #0
 8006100:	b002      	add	sp, #8
 8006102:	bc04      	pop	{r2}
 8006104:	4690      	mov	r8, r2
 8006106:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if (BOS.response == BOS_RESPONSE_MSG)
 8006108:	2b20      	cmp	r3, #32
 800610a:	d105      	bne.n	8006118 <getCommand+0x78>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "msg");
 800610c:	4a68      	ldr	r2, [pc, #416]	; (80062b0 <getCommand+0x210>)
 800610e:	4967      	ldr	r1, [pc, #412]	; (80062ac <getCommand+0x20c>)
 8006110:	0020      	movs	r0, r4
 8006112:	f00e fbf1 	bl	80148f8 <siprintf>
 8006116:	e7f2      	b.n	80060fe <getCommand+0x5e>
			else if (BOS.response == BOS_RESPONSE_NONE)
 8006118:	2b00      	cmp	r3, #0
 800611a:	d000      	beq.n	800611e <getCommand+0x7e>
 800611c:	e0b6      	b.n	800628c <getCommand+0x1ec>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "none");
 800611e:	4a65      	ldr	r2, [pc, #404]	; (80062b4 <getCommand+0x214>)
 8006120:	4962      	ldr	r1, [pc, #392]	; (80062ac <getCommand+0x20c>)
 8006122:	0020      	movs	r0, r4
 8006124:	f00e fbe8 	bl	80148f8 <siprintf>
 8006128:	e7e9      	b.n	80060fe <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "trace",
 800612a:	0032      	movs	r2, r6
 800612c:	4962      	ldr	r1, [pc, #392]	; (80062b8 <getCommand+0x218>)
 800612e:	0038      	movs	r0, r7
 8006130:	f00e fc26 	bl	8014980 <strncmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	d11a      	bne.n	800616e <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 8006138:	4b5a      	ldr	r3, [pc, #360]	; (80062a4 <getCommand+0x204>)
 800613a:	79db      	ldrb	r3, [r3, #7]
 800613c:	2b03      	cmp	r3, #3
 800613e:	d105      	bne.n	800614c <getCommand+0xac>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "all");
 8006140:	4a59      	ldr	r2, [pc, #356]	; (80062a8 <getCommand+0x208>)
 8006142:	495a      	ldr	r1, [pc, #360]	; (80062ac <getCommand+0x20c>)
 8006144:	0020      	movs	r0, r4
 8006146:	f00e fbd7 	bl	80148f8 <siprintf>
 800614a:	e7d8      	b.n	80060fe <getCommand+0x5e>
			else if (BOS.trace == TRACE_MESSAGE)
 800614c:	2b01      	cmp	r3, #1
 800614e:	d105      	bne.n	800615c <getCommand+0xbc>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "msg");
 8006150:	4a57      	ldr	r2, [pc, #348]	; (80062b0 <getCommand+0x210>)
 8006152:	4956      	ldr	r1, [pc, #344]	; (80062ac <getCommand+0x20c>)
 8006154:	0020      	movs	r0, r4
 8006156:	f00e fbcf 	bl	80148f8 <siprintf>
 800615a:	e7d0      	b.n	80060fe <getCommand+0x5e>
			else if (BOS.trace == TRACE_NONE)
 800615c:	2b00      	cmp	r3, #0
 800615e:	d000      	beq.n	8006162 <getCommand+0xc2>
 8006160:	e094      	b.n	800628c <getCommand+0x1ec>
				sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, "none");
 8006162:	4a54      	ldr	r2, [pc, #336]	; (80062b4 <getCommand+0x214>)
 8006164:	4951      	ldr	r1, [pc, #324]	; (80062ac <getCommand+0x20c>)
 8006166:	0020      	movs	r0, r4
 8006168:	f00e fbc6 	bl	80148f8 <siprintf>
 800616c:	e7c7      	b.n	80060fe <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "clibaudrate",xParameterStringLength1 - 4)) {
 800616e:	0032      	movs	r2, r6
 8006170:	4952      	ldr	r1, [pc, #328]	; (80062bc <getCommand+0x21c>)
 8006172:	0038      	movs	r0, r7
 8006174:	f00e fc04 	bl	8014980 <strncmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	d106      	bne.n	800618a <getCommand+0xea>
			sprintf((char*) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 800617c:	4b49      	ldr	r3, [pc, #292]	; (80062a4 <getCommand+0x204>)
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	494f      	ldr	r1, [pc, #316]	; (80062c0 <getCommand+0x220>)
 8006182:	0020      	movs	r0, r4
 8006184:	f00e fbb8 	bl	80148f8 <siprintf>
 8006188:	e7b9      	b.n	80060fe <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "debounce",xParameterStringLength1 - 4)) {
 800618a:	0032      	movs	r2, r6
 800618c:	494d      	ldr	r1, [pc, #308]	; (80062c4 <getCommand+0x224>)
 800618e:	0038      	movs	r0, r7
 8006190:	f00e fbf6 	bl	8014980 <strncmp>
 8006194:	2800      	cmp	r0, #0
 8006196:	d106      	bne.n	80061a6 <getCommand+0x106>
			sprintf((char*) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8006198:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <getCommand+0x204>)
 800619a:	881a      	ldrh	r2, [r3, #0]
 800619c:	4948      	ldr	r1, [pc, #288]	; (80062c0 <getCommand+0x220>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00e fbaa 	bl	80148f8 <siprintf>
 80061a4:	e7ab      	b.n	80060fe <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4,"singleclicktime", xParameterStringLength1 - 4)) {
 80061a6:	0032      	movs	r2, r6
 80061a8:	4947      	ldr	r1, [pc, #284]	; (80062c8 <getCommand+0x228>)
 80061aa:	0038      	movs	r0, r7
 80061ac:	f00e fbe8 	bl	8014980 <strncmp>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d106      	bne.n	80061c2 <getCommand+0x122>
			sprintf((char*) pcWriteBuffer, "%d\n\r",BOS.buttons.singleClickTime);
 80061b4:	4b3b      	ldr	r3, [pc, #236]	; (80062a4 <getCommand+0x204>)
 80061b6:	885a      	ldrh	r2, [r3, #2]
 80061b8:	4941      	ldr	r1, [pc, #260]	; (80062c0 <getCommand+0x220>)
 80061ba:	0020      	movs	r0, r4
 80061bc:	f00e fb9c 	bl	80148f8 <siprintf>
 80061c0:	e79d      	b.n	80060fe <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4,"mininterclicktime", xParameterStringLength1 - 4)) {
 80061c2:	0032      	movs	r2, r6
 80061c4:	4941      	ldr	r1, [pc, #260]	; (80062cc <getCommand+0x22c>)
 80061c6:	0038      	movs	r0, r7
 80061c8:	f00e fbda 	bl	8014980 <strncmp>
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d106      	bne.n	80061de <getCommand+0x13e>
			sprintf((char*) pcWriteBuffer, "%d\n\r",BOS.buttons.minInterClickTime);
 80061d0:	4b34      	ldr	r3, [pc, #208]	; (80062a4 <getCommand+0x204>)
 80061d2:	791a      	ldrb	r2, [r3, #4]
 80061d4:	493a      	ldr	r1, [pc, #232]	; (80062c0 <getCommand+0x220>)
 80061d6:	0020      	movs	r0, r4
 80061d8:	f00e fb8e 	bl	80148f8 <siprintf>
 80061dc:	e78f      	b.n	80060fe <getCommand+0x5e>
		} else if (!strncmp((const char*) pcParameterString1 + 4,"maxinterclicktime", xParameterStringLength1 - 4)) {
 80061de:	0032      	movs	r2, r6
 80061e0:	493b      	ldr	r1, [pc, #236]	; (80062d0 <getCommand+0x230>)
 80061e2:	0038      	movs	r0, r7
 80061e4:	f00e fbcc 	bl	8014980 <strncmp>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d10d      	bne.n	8006208 <getCommand+0x168>
			sprintf((char*) pcWriteBuffer, "%d\n\r",BOS.buttons.maxInterClickTime);
 80061ec:	4b2d      	ldr	r3, [pc, #180]	; (80062a4 <getCommand+0x204>)
 80061ee:	795a      	ldrb	r2, [r3, #5]
 80061f0:	4933      	ldr	r1, [pc, #204]	; (80062c0 <getCommand+0x220>)
 80061f2:	0020      	movs	r0, r4
 80061f4:	f00e fb80 	bl	80148f8 <siprintf>
 80061f8:	e781      	b.n	80060fe <getCommand+0x5e>
	} else if (!strncmp((const char*) pcParameterString1, "group", 5)) {
 80061fa:	2205      	movs	r2, #5
 80061fc:	4935      	ldr	r1, [pc, #212]	; (80062d4 <getCommand+0x234>)
 80061fe:	0028      	movs	r0, r5
 8006200:	f00e fbbe 	bl	8014980 <strncmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	d005      	beq.n	8006214 <getCommand+0x174>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 8006208:	2213      	movs	r2, #19
 800620a:	4933      	ldr	r1, [pc, #204]	; (80062d8 <getCommand+0x238>)
 800620c:	0020      	movs	r0, r4
 800620e:	f00d fc0c 	bl	8013a2a <memcpy>
 8006212:	e774      	b.n	80060fe <getCommand+0x5e>
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 8006214:	466a      	mov	r2, sp
 8006216:	2102      	movs	r1, #2
 8006218:	0030      	movs	r0, r6
 800621a:	f008 f9a1 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800621e:	0005      	movs	r5, r0
 8006220:	4f2e      	ldr	r7, [pc, #184]	; (80062dc <getCommand+0x23c>)
		for (i = 0; i < MaxNumOfGroups; i++) {
 8006222:	2600      	movs	r6, #0
			if (!strcmp((char*) pcParameterString2, groupAlias[i])) {
 8006224:	0039      	movs	r1, r7
 8006226:	0028      	movs	r0, r5
 8006228:	f7f9 ff6c 	bl	8000104 <strcmp>
 800622c:	2800      	cmp	r0, #0
 800622e:	d011      	beq.n	8006254 <getCommand+0x1b4>
		for (i = 0; i < MaxNumOfGroups; i++) {
 8006230:	3601      	adds	r6, #1
 8006232:	b2f6      	uxtb	r6, r6
 8006234:	370a      	adds	r7, #10
 8006236:	2e0a      	cmp	r6, #10
 8006238:	d1f4      	bne.n	8006224 <getCommand+0x184>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageGroupDoesNotExist,(char*) pcParameterString2);
 800623a:	002a      	movs	r2, r5
 800623c:	4928      	ldr	r1, [pc, #160]	; (80062e0 <getCommand+0x240>)
 800623e:	0020      	movs	r0, r4
 8006240:	f00e fb5a 	bl	80148f8 <siprintf>
			return pdFALSE;
 8006244:	e75b      	b.n	80060fe <getCommand+0x5e>
					sprintf((char*) pcWriteBuffer, "%s#%d\n\r",
 8006246:	002b      	movs	r3, r5
 8006248:	0022      	movs	r2, r4
 800624a:	4926      	ldr	r1, [pc, #152]	; (80062e4 <getCommand+0x244>)
 800624c:	0020      	movs	r0, r4
 800624e:	f00e fb53 	bl	80148f8 <siprintf>
 8006252:	e015      	b.n	8006280 <getCommand+0x1e0>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageGroupExists,(char*) pcParameterString2);
 8006254:	002a      	movs	r2, r5
 8006256:	4924      	ldr	r1, [pc, #144]	; (80062e8 <getCommand+0x248>)
 8006258:	0020      	movs	r0, r4
 800625a:	f00e fb4d 	bl	80148f8 <siprintf>
			for (j = 1; j <= N; j++)						// N modules
 800625e:	4b23      	ldr	r3, [pc, #140]	; (80062ec <getCommand+0x24c>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d100      	bne.n	8006268 <getCommand+0x1c8>
 8006266:	e74a      	b.n	80060fe <getCommand+0x5e>
 8006268:	2501      	movs	r5, #1
 800626a:	002b      	movs	r3, r5
 800626c:	40b3      	lsls	r3, r6
 800626e:	4698      	mov	r8, r3
				if (InGroup(j, i)) {
 8006270:	4f1f      	ldr	r7, [pc, #124]	; (80062f0 <getCommand+0x250>)
			for (j = 1; j <= N; j++)						// N modules
 8006272:	4e1e      	ldr	r6, [pc, #120]	; (80062ec <getCommand+0x24c>)
				if (InGroup(j, i)) {
 8006274:	1e6b      	subs	r3, r5, #1
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	5bdb      	ldrh	r3, [r3, r7]
 800627a:	4642      	mov	r2, r8
 800627c:	421a      	tst	r2, r3
 800627e:	d1e2      	bne.n	8006246 <getCommand+0x1a6>
			for (j = 1; j <= N; j++)						// N modules
 8006280:	3501      	adds	r5, #1
 8006282:	b2ed      	uxtb	r5, r5
 8006284:	7833      	ldrb	r3, [r6, #0]
 8006286:	42ab      	cmp	r3, r5
 8006288:	d2f4      	bcs.n	8006274 <getCommand+0x1d4>
 800628a:	e738      	b.n	80060fe <getCommand+0x5e>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageWrongValue,
 800628c:	002a      	movs	r2, r5
 800628e:	4919      	ldr	r1, [pc, #100]	; (80062f4 <getCommand+0x254>)
 8006290:	0020      	movs	r0, r4
 8006292:	f00e fb31 	bl	80148f8 <siprintf>
 8006296:	e732      	b.n	80060fe <getCommand+0x5e>
 8006298:	20000a7c 	.word	0x20000a7c
 800629c:	08018744 	.word	0x08018744
 80062a0:	0801874c 	.word	0x0801874c
 80062a4:	2000612c 	.word	0x2000612c
 80062a8:	08017b64 	.word	0x08017b64
 80062ac:	080179bc 	.word	0x080179bc
 80062b0:	08018758 	.word	0x08018758
 80062b4:	0801875c 	.word	0x0801875c
 80062b8:	08018764 	.word	0x08018764
 80062bc:	0801876c 	.word	0x0801876c
 80062c0:	08017ffc 	.word	0x08017ffc
 80062c4:	08018778 	.word	0x08018778
 80062c8:	08018784 	.word	0x08018784
 80062cc:	08018794 	.word	0x08018794
 80062d0:	080187a8 	.word	0x080187a8
 80062d4:	080187bc 	.word	0x080187bc
 80062d8:	080187cc 	.word	0x080187cc
 80062dc:	2000064c 	.word	0x2000064c
 80062e0:	080187e0 	.word	0x080187e0
 80062e4:	080187c4 	.word	0x080187c4
 80062e8:	080187fc 	.word	0x080187fc
 80062ec:	2000001c 	.word	0x2000001c
 80062f0:	200006b0 	.word	0x200006b0
 80062f4:	08018810 	.word	0x08018810

080062f8 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	0004      	movs	r4, r0
 80062fe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8006300:	2300      	movs	r3, #0
 8006302:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006304:	2c00      	cmp	r4, #0
 8006306:	d101      	bne.n	800630c <defaultCommand+0x14>
 8006308:	b672      	cpsid	i
 800630a:	e7fe      	b.n	800630a <defaultCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800630c:	aa01      	add	r2, sp, #4
 800630e:	2101      	movs	r1, #1
 8006310:	f008 f926 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006314:	0005      	movs	r5, r0
	if (!strncmp((const char*) pcParameterString1, "params",xParameterStringLength1)) {
 8006316:	9e01      	ldr	r6, [sp, #4]
 8006318:	0032      	movs	r2, r6
 800631a:	491e      	ldr	r1, [pc, #120]	; (8006394 <defaultCommand+0x9c>)
 800631c:	f00e fb30 	bl	8014980 <strncmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	d01e      	beq.n	8006362 <defaultCommand+0x6a>
	} else if (!strncmp((const char*) pcParameterString1, "array",xParameterStringLength1)) {
 8006324:	0032      	movs	r2, r6
 8006326:	491c      	ldr	r1, [pc, #112]	; (8006398 <defaultCommand+0xa0>)
 8006328:	0028      	movs	r0, r5
 800632a:	f00e fb29 	bl	8014980 <strncmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	d12a      	bne.n	8006388 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 8006332:	2200      	movs	r2, #0
 8006334:	2116      	movs	r1, #22
 8006336:	20ff      	movs	r0, #255	; 0xff
 8006338:	f003 f9ba 	bl	80096b0 <SendMessageToModule>
		indMode = IND_TOPOLOGY;
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <defaultCommand+0xa4>)
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006342:	2064      	movs	r0, #100	; 0x64
 8006344:	f007 fff3 	bl	800e32e <osDelay>
		ClearEEportsDir();
 8006348:	f7fc fe3a 	bl	8002fc0 <ClearEEportsDir>
		ClearROtopology();
 800634c:	f005 f9dc 	bl	800b708 <ClearROtopology>
		osDelay(100);
 8006350:	2064      	movs	r0, #100	; 0x64
 8006352:	f007 ffec 	bl	800e32e <osDelay>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOKArray);
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	4911      	ldr	r1, [pc, #68]	; (80063a0 <defaultCommand+0xa8>)
 800635a:	0020      	movs	r0, r4
 800635c:	f00d fb65 	bl	8013a2a <memcpy>
 8006360:	e00f      	b.n	8006382 <defaultCommand+0x8a>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 8006362:	4910      	ldr	r1, [pc, #64]	; (80063a4 <defaultCommand+0xac>)
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <defaultCommand+0xb0>)
 8006366:	000a      	movs	r2, r1
 8006368:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636a:	c223      	stmia	r2!, {r0, r1, r5}
 800636c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636e:	c223      	stmia	r2!, {r0, r1, r5}
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006374:	f7fd f8e4 	bl	8003540 <SaveEEparams>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageOKParams);
 8006378:	2227      	movs	r2, #39	; 0x27
 800637a:	490c      	ldr	r1, [pc, #48]	; (80063ac <defaultCommand+0xb4>)
 800637c:	0020      	movs	r0, r4
 800637e:	f00d fb54 	bl	8013a2a <memcpy>
}
 8006382:	2000      	movs	r0, #0
 8006384:	b002      	add	sp, #8
 8006386:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongValue);
 8006388:	220f      	movs	r2, #15
 800638a:	4909      	ldr	r1, [pc, #36]	; (80063b0 <defaultCommand+0xb8>)
 800638c:	0020      	movs	r0, r4
 800638e:	f00d fb4c 	bl	8013a2a <memcpy>
 8006392:	e7f6      	b.n	8006382 <defaultCommand+0x8a>
 8006394:	08018600 	.word	0x08018600
 8006398:	08018630 	.word	0x08018630
 800639c:	200006e4 	.word	0x200006e4
 80063a0:	08018648 	.word	0x08018648
 80063a4:	2000612c 	.word	0x2000612c
 80063a8:	20000000 	.word	0x20000000
 80063ac:	08018608 	.word	0x08018608
 80063b0:	08018638 	.word	0x08018638

080063b4 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	46ce      	mov	lr, r9
 80063b8:	4647      	mov	r7, r8
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b08d      	sub	sp, #52	; 0x34
 80063be:	0005      	movs	r5, r0
 80063c0:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0,
 80063c2:	2300      	movs	r3, #0
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	930a      	str	r3, [sp, #40]	; 0x28
			xParameterStringLength3 = 0;
 80063c8:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d101      	bne.n	80063d6 <setCommand+0x22>
 80063d2:	b672      	cpsid	i
 80063d4:	e7fe      	b.n	80063d4 <setCommand+0x20>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80063d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063d8:	2101      	movs	r1, #1
 80063da:	0020      	movs	r0, r4
 80063dc:	f008 f8c0 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80063e0:	0006      	movs	r6, r0
 80063e2:	4bb3      	ldr	r3, [pc, #716]	; (80066b0 <setCommand+0x2fc>)
 80063e4:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char*) pcParameterString1, "bos.", 4)) {
 80063e6:	2204      	movs	r2, #4
 80063e8:	49b2      	ldr	r1, [pc, #712]	; (80066b4 <setCommand+0x300>)
 80063ea:	f00e fac9 	bl	8014980 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d015      	beq.n	800641e <setCommand+0x6a>
	} else if (!strncmp((const char*) pcParameterString1, "time", 4)) {
 80063f2:	2204      	movs	r2, #4
 80063f4:	49b0      	ldr	r1, [pc, #704]	; (80066b8 <setCommand+0x304>)
 80063f6:	0030      	movs	r0, r6
 80063f8:	f00e fac2 	bl	8014980 <strncmp>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d100      	bne.n	8006402 <setCommand+0x4e>
 8006400:	e180      	b.n	8006704 <setCommand+0x350>
	} else if (!strncmp((const char*) pcParameterString1, "date", 4)) {
 8006402:	2204      	movs	r2, #4
 8006404:	49ad      	ldr	r1, [pc, #692]	; (80066bc <setCommand+0x308>)
 8006406:	0030      	movs	r0, r6
 8006408:	f00e faba 	bl	8014980 <strncmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	d100      	bne.n	8006412 <setCommand+0x5e>
 8006410:	e1e6      	b.n	80067e0 <setCommand+0x42c>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 8006412:	2213      	movs	r2, #19
 8006414:	49aa      	ldr	r1, [pc, #680]	; (80066c0 <setCommand+0x30c>)
 8006416:	0028      	movs	r0, r5
 8006418:	f00d fb07 	bl	8013a2a <memcpy>
 800641c:	e1d7      	b.n	80067ce <setCommand+0x41a>
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 800641e:	aa0a      	add	r2, sp, #40	; 0x28
 8006420:	2102      	movs	r1, #2
 8006422:	0020      	movs	r0, r4
 8006424:	f008 f89c 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006428:	0004      	movs	r4, r0
 800642a:	4ba6      	ldr	r3, [pc, #664]	; (80066c4 <setCommand+0x310>)
 800642c:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char*) pcParameterString1 + 4, "response",xParameterStringLength1 - 4)) {
 800642e:	4ba0      	ldr	r3, [pc, #640]	; (80066b0 <setCommand+0x2fc>)
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	3604      	adds	r6, #4
 8006434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006436:	1f1f      	subs	r7, r3, #4
 8006438:	003a      	movs	r2, r7
 800643a:	49a3      	ldr	r1, [pc, #652]	; (80066c8 <setCommand+0x314>)
 800643c:	0030      	movs	r0, r6
 800643e:	f00e fa9f 	bl	8014980 <strncmp>
 8006442:	2800      	cmp	r0, #0
 8006444:	d153      	bne.n	80064ee <setCommand+0x13a>
			if (!strncmp((const char*) pcParameterString2, "all",xParameterStringLength2)) {
 8006446:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006448:	0032      	movs	r2, r6
 800644a:	49a0      	ldr	r1, [pc, #640]	; (80066cc <setCommand+0x318>)
 800644c:	0020      	movs	r0, r4
 800644e:	f00e fa97 	bl	8014980 <strncmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	d115      	bne.n	8006482 <setCommand+0xce>
				BOS.response = BOS_RESPONSE_ALL;
 8006456:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <setCommand+0x31c>)
 8006458:	2160      	movs	r1, #96	; 0x60
 800645a:	7199      	strb	r1, [r3, #6]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 800645c:	79db      	ldrb	r3, [r3, #7]
 800645e:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 8006460:	4319      	orrs	r1, r3
 8006462:	308a      	adds	r0, #138	; 0x8a
 8006464:	0040      	lsls	r0, r0, #1
 8006466:	f001 f9df 	bl	8007828 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;// Get rid of the remaining parameters
 800646a:	4b91      	ldr	r3, [pc, #580]	; (80066b0 <setCommand+0x2fc>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006472:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, pcParameterString1,pcParameterString2);
 8006474:	4b93      	ldr	r3, [pc, #588]	; (80066c4 <setCommand+0x310>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4996      	ldr	r1, [pc, #600]	; (80066d4 <setCommand+0x320>)
 800647a:	0028      	movs	r0, r5
 800647c:	f00e fa3c 	bl	80148f8 <siprintf>
	return pdFALSE;
 8006480:	e1a5      	b.n	80067ce <setCommand+0x41a>
			} else if (!strncmp((const char*) pcParameterString2, "message",xParameterStringLength2)) {
 8006482:	0032      	movs	r2, r6
 8006484:	4994      	ldr	r1, [pc, #592]	; (80066d8 <setCommand+0x324>)
 8006486:	0020      	movs	r0, r4
 8006488:	f00e fa7a 	bl	8014980 <strncmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	d10a      	bne.n	80064a6 <setCommand+0xf2>
				BOS.response = BOS_RESPONSE_MSG;
 8006490:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <setCommand+0x31c>)
 8006492:	2120      	movs	r1, #32
 8006494:	7199      	strb	r1, [r3, #6]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8006496:	79db      	ldrb	r3, [r3, #7]
 8006498:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 800649a:	4319      	orrs	r1, r3
 800649c:	308a      	adds	r0, #138	; 0x8a
 800649e:	0040      	lsls	r0, r0, #1
 80064a0:	f001 f9c2 	bl	8007828 <EE_WriteVariable>
 80064a4:	e7e1      	b.n	800646a <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "cli",xParameterStringLength2)) {
 80064a6:	0032      	movs	r2, r6
 80064a8:	498c      	ldr	r1, [pc, #560]	; (80066dc <setCommand+0x328>)
 80064aa:	0020      	movs	r0, r4
 80064ac:	f00e fa68 	bl	8014980 <strncmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d10a      	bne.n	80064ca <setCommand+0x116>
				BOS.response = BOS_RESPONSE_CLI;
 80064b4:	4b86      	ldr	r3, [pc, #536]	; (80066d0 <setCommand+0x31c>)
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	7199      	strb	r1, [r3, #6]
						((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 80064ba:	79db      	ldrb	r3, [r3, #7]
 80064bc:	021b      	lsls	r3, r3, #8
				EE_WriteVariable(_EE_PARAMS_BASE,
 80064be:	4319      	orrs	r1, r3
 80064c0:	308a      	adds	r0, #138	; 0x8a
 80064c2:	0040      	lsls	r0, r0, #1
 80064c4:	f001 f9b0 	bl	8007828 <EE_WriteVariable>
 80064c8:	e7cf      	b.n	800646a <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "none",xParameterStringLength2)) {
 80064ca:	0032      	movs	r2, r6
 80064cc:	4984      	ldr	r1, [pc, #528]	; (80066e0 <setCommand+0x32c>)
 80064ce:	0020      	movs	r0, r4
 80064d0:	f00e fa56 	bl	8014980 <strncmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d000      	beq.n	80064da <setCommand+0x126>
 80064d8:	e2a7      	b.n	8006a2a <setCommand+0x676>
				BOS.response = BOS_RESPONSE_NONE;
 80064da:	4b7d      	ldr	r3, [pc, #500]	; (80066d0 <setCommand+0x31c>)
 80064dc:	2200      	movs	r2, #0
 80064de:	719a      	strb	r2, [r3, #6]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 80064e0:	79d9      	ldrb	r1, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,
 80064e2:	0209      	lsls	r1, r1, #8
 80064e4:	308a      	adds	r0, #138	; 0x8a
 80064e6:	0040      	lsls	r0, r0, #1
 80064e8:	f001 f99e 	bl	8007828 <EE_WriteVariable>
 80064ec:	e7bd      	b.n	800646a <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "trace",xParameterStringLength1 - 4)) {
 80064ee:	003a      	movs	r2, r7
 80064f0:	497c      	ldr	r1, [pc, #496]	; (80066e4 <setCommand+0x330>)
 80064f2:	0030      	movs	r0, r6
 80064f4:	f00e fa44 	bl	8014980 <strncmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d14a      	bne.n	8006592 <setCommand+0x1de>
			if (!strncmp((const char*) pcParameterString2, "all",xParameterStringLength2)) {
 80064fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064fe:	0032      	movs	r2, r6
 8006500:	4972      	ldr	r1, [pc, #456]	; (80066cc <setCommand+0x318>)
 8006502:	0020      	movs	r0, r4
 8006504:	f00e fa3c 	bl	8014980 <strncmp>
 8006508:	2800      	cmp	r0, #0
 800650a:	d10b      	bne.n	8006524 <setCommand+0x170>
				BOS.trace = TRACE_BOTH;
 800650c:	4b70      	ldr	r3, [pc, #448]	; (80066d0 <setCommand+0x31c>)
 800650e:	2203      	movs	r2, #3
 8006510:	71da      	strb	r2, [r3, #7]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8006512:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8006514:	21c0      	movs	r1, #192	; 0xc0
 8006516:	0089      	lsls	r1, r1, #2
 8006518:	4319      	orrs	r1, r3
 800651a:	308a      	adds	r0, #138	; 0x8a
 800651c:	0040      	lsls	r0, r0, #1
 800651e:	f001 f983 	bl	8007828 <EE_WriteVariable>
 8006522:	e7a2      	b.n	800646a <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "message",xParameterStringLength2)) {
 8006524:	0032      	movs	r2, r6
 8006526:	496c      	ldr	r1, [pc, #432]	; (80066d8 <setCommand+0x324>)
 8006528:	0020      	movs	r0, r4
 800652a:	f00e fa29 	bl	8014980 <strncmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	d10b      	bne.n	800654a <setCommand+0x196>
				BOS.trace = TRACE_MESSAGE;
 8006532:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <setCommand+0x31c>)
 8006534:	2201      	movs	r2, #1
 8006536:	71da      	strb	r2, [r3, #7]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 8006538:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	0049      	lsls	r1, r1, #1
 800653e:	4319      	orrs	r1, r3
 8006540:	308a      	adds	r0, #138	; 0x8a
 8006542:	4090      	lsls	r0, r2
 8006544:	f001 f970 	bl	8007828 <EE_WriteVariable>
 8006548:	e78f      	b.n	800646a <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "response",xParameterStringLength2)) {
 800654a:	0032      	movs	r2, r6
 800654c:	495e      	ldr	r1, [pc, #376]	; (80066c8 <setCommand+0x314>)
 800654e:	0020      	movs	r0, r4
 8006550:	f00e fa16 	bl	8014980 <strncmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	d10b      	bne.n	8006570 <setCommand+0x1bc>
				BOS.trace = TRACE_RESPONSE;
 8006558:	4b5d      	ldr	r3, [pc, #372]	; (80066d0 <setCommand+0x31c>)
 800655a:	2202      	movs	r2, #2
 800655c:	71da      	strb	r2, [r3, #7]
				((uint16_t) BOS.trace << 8) | (uint16_t) BOS.response);
 800655e:	799b      	ldrb	r3, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	0089      	lsls	r1, r1, #2
 8006564:	4319      	orrs	r1, r3
 8006566:	308a      	adds	r0, #138	; 0x8a
 8006568:	0040      	lsls	r0, r0, #1
 800656a:	f001 f95d 	bl	8007828 <EE_WriteVariable>
 800656e:	e77c      	b.n	800646a <setCommand+0xb6>
			} else if (!strncmp((const char*) pcParameterString2, "none",xParameterStringLength2)) {
 8006570:	0032      	movs	r2, r6
 8006572:	495b      	ldr	r1, [pc, #364]	; (80066e0 <setCommand+0x32c>)
 8006574:	0020      	movs	r0, r4
 8006576:	f00e fa03 	bl	8014980 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d000      	beq.n	8006580 <setCommand+0x1cc>
 800657e:	e254      	b.n	8006a2a <setCommand+0x676>
				BOS.trace = TRACE_NONE;
 8006580:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <setCommand+0x31c>)
 8006582:	2200      	movs	r2, #0
 8006584:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE,
 8006586:	7999      	ldrb	r1, [r3, #6]
 8006588:	308a      	adds	r0, #138	; 0x8a
 800658a:	0040      	lsls	r0, r0, #1
 800658c:	f001 f94c 	bl	8007828 <EE_WriteVariable>
 8006590:	e76b      	b.n	800646a <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "clibaudrate",xParameterStringLength1 - 4)) {
 8006592:	003a      	movs	r2, r7
 8006594:	4954      	ldr	r1, [pc, #336]	; (80066e8 <setCommand+0x334>)
 8006596:	0030      	movs	r0, r6
 8006598:	f00e f9f2 	bl	8014980 <strncmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	d128      	bne.n	80065f2 <setCommand+0x23e>
			temp2 = atoi((const char*) pcParameterString2);
 80065a0:	0020      	movs	r0, r4
 80065a2:	f00d f9ca 	bl	801393a <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 80065a6:	23e1      	movs	r3, #225	; 0xe1
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	4298      	cmp	r0, r3
 80065ac:	d900      	bls.n	80065b0 <setCommand+0x1fc>
 80065ae:	e23c      	b.n	8006a2a <setCommand+0x676>
				BOS.clibaudrate = temp2;
 80065b0:	4c47      	ldr	r4, [pc, #284]	; (80066d0 <setCommand+0x31c>)
 80065b2:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t) BOS.clibaudrate);
 80065b4:	b281      	uxth	r1, r0
 80065b6:	208c      	movs	r0, #140	; 0x8c
 80065b8:	0040      	lsls	r0, r0, #1
 80065ba:	f001 f935 	bl	8007828 <EE_WriteVariable>
				(uint16_t) (BOS.clibaudrate >> 16));
 80065be:	68a1      	ldr	r1, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD + 1,
 80065c0:	0c09      	lsrs	r1, r1, #16
 80065c2:	201a      	movs	r0, #26
 80065c4:	30ff      	adds	r0, #255	; 0xff
 80065c6:	f001 f92f 	bl	8007828 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;// Get rid of the remaining parameters
 80065ca:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <setCommand+0x2fc>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065d2:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, pcParameterString1,pcParameterString2);
 80065d4:	4b3b      	ldr	r3, [pc, #236]	; (80066c4 <setCommand+0x310>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	493e      	ldr	r1, [pc, #248]	; (80066d4 <setCommand+0x320>)
 80065da:	0028      	movs	r0, r5
 80065dc:	f00e f98c 	bl	80148f8 <siprintf>
			strcat((char*) pcWriteBuffer, (char*) pcMessageCLI1);
 80065e0:	4942      	ldr	r1, [pc, #264]	; (80066ec <setCommand+0x338>)
 80065e2:	0028      	movs	r0, r5
 80065e4:	f00e f9a8 	bl	8014938 <strcat>
			strcat((char*) pcWriteBuffer, (char*) pcMessageCLI2);
 80065e8:	4941      	ldr	r1, [pc, #260]	; (80066f0 <setCommand+0x33c>)
 80065ea:	0028      	movs	r0, r5
 80065ec:	f00e f9a4 	bl	8014938 <strcat>
 80065f0:	e0ed      	b.n	80067ce <setCommand+0x41a>
		} else if (!strncmp((const char*) pcParameterString1 + 4, "debounce",xParameterStringLength1 - 4)) {
 80065f2:	003a      	movs	r2, r7
 80065f4:	493f      	ldr	r1, [pc, #252]	; (80066f4 <setCommand+0x340>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00e f9c2 	bl	8014980 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d10d      	bne.n	800661c <setCommand+0x268>
			temp16 = atoi((const char*) pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00d f99a 	bl	801393a <atoi>
 8006606:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006608:	2900      	cmp	r1, #0
 800660a:	d100      	bne.n	800660e <setCommand+0x25a>
 800660c:	e20d      	b.n	8006a2a <setCommand+0x676>
				BOS.buttons.debounce = temp16;
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <setCommand+0x31c>)
 8006610:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 8006612:	2016      	movs	r0, #22
 8006614:	30ff      	adds	r0, #255	; 0xff
 8006616:	f001 f907 	bl	8007828 <EE_WriteVariable>
 800661a:	e726      	b.n	800646a <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4,
 800661c:	003a      	movs	r2, r7
 800661e:	4936      	ldr	r1, [pc, #216]	; (80066f8 <setCommand+0x344>)
 8006620:	0030      	movs	r0, r6
 8006622:	f00e f9ad 	bl	8014980 <strncmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	d10d      	bne.n	8006646 <setCommand+0x292>
			temp16 = atoi((const char*) pcParameterString2);
 800662a:	0020      	movs	r0, r4
 800662c:	f00d f985 	bl	801393a <atoi>
 8006630:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 8006632:	2900      	cmp	r1, #0
 8006634:	d100      	bne.n	8006638 <setCommand+0x284>
 8006636:	e1f8      	b.n	8006a2a <setCommand+0x676>
				BOS.buttons.singleClickTime = temp16;
 8006638:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <setCommand+0x31c>)
 800663a:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 800663c:	208b      	movs	r0, #139	; 0x8b
 800663e:	0040      	lsls	r0, r0, #1
 8006640:	f001 f8f2 	bl	8007828 <EE_WriteVariable>
 8006644:	e711      	b.n	800646a <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4,
 8006646:	003a      	movs	r2, r7
 8006648:	492c      	ldr	r1, [pc, #176]	; (80066fc <setCommand+0x348>)
 800664a:	0030      	movs	r0, r6
 800664c:	f00e f998 	bl	8014980 <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d112      	bne.n	800667a <setCommand+0x2c6>
			temp16 = atoi((const char*) pcParameterString2);
 8006654:	0020      	movs	r0, r4
 8006656:	f00d f970 	bl	801393a <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800665a:	1e43      	subs	r3, r0, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	2bfe      	cmp	r3, #254	; 0xfe
 8006660:	d900      	bls.n	8006664 <setCommand+0x2b0>
 8006662:	e1e2      	b.n	8006a2a <setCommand+0x676>
				BOS.buttons.minInterClickTime = temp16;
 8006664:	b2c0      	uxtb	r0, r0
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <setCommand+0x31c>)
 8006668:	7118      	strb	r0, [r3, #4]
				((uint16_t) BOS.buttons.maxInterClickTime << 8)| (uint16_t) BOS.buttons.minInterClickTime);
 800666a:	7959      	ldrb	r1, [r3, #5]
 800666c:	0209      	lsls	r1, r1, #8
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 800666e:	4301      	orrs	r1, r0
 8006670:	2018      	movs	r0, #24
 8006672:	30ff      	adds	r0, #255	; 0xff
 8006674:	f001 f8d8 	bl	8007828 <EE_WriteVariable>
 8006678:	e6f7      	b.n	800646a <setCommand+0xb6>
		} else if (!strncmp((const char*) pcParameterString1 + 4,
 800667a:	003a      	movs	r2, r7
 800667c:	4920      	ldr	r1, [pc, #128]	; (8006700 <setCommand+0x34c>)
 800667e:	0030      	movs	r0, r6
 8006680:	f00e f97e 	bl	8014980 <strncmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	d000      	beq.n	800668a <setCommand+0x2d6>
 8006688:	e6c3      	b.n	8006412 <setCommand+0x5e>
			temp16 = atoi((const char*) pcParameterString2);
 800668a:	0020      	movs	r0, r4
 800668c:	f00d f955 	bl	801393a <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 8006690:	1e43      	subs	r3, r0, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	2bfe      	cmp	r3, #254	; 0xfe
 8006696:	d900      	bls.n	800669a <setCommand+0x2e6>
 8006698:	e1c7      	b.n	8006a2a <setCommand+0x676>
				BOS.buttons.maxInterClickTime = temp16;
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <setCommand+0x31c>)
 800669c:	7158      	strb	r0, [r3, #5]
				((uint16_t) BOS.buttons.maxInterClickTime << 8)| (uint16_t) BOS.buttons.minInterClickTime);
 800669e:	0200      	lsls	r0, r0, #8
 80066a0:	7919      	ldrb	r1, [r3, #4]
 80066a2:	4301      	orrs	r1, r0
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,
 80066a4:	b289      	uxth	r1, r1
 80066a6:	2018      	movs	r0, #24
 80066a8:	30ff      	adds	r0, #255	; 0xff
 80066aa:	f001 f8bd 	bl	8007828 <EE_WriteVariable>
 80066ae:	e6dc      	b.n	800646a <setCommand+0xb6>
 80066b0:	20000a78 	.word	0x20000a78
 80066b4:	08018744 	.word	0x08018744
 80066b8:	08018e70 	.word	0x08018e70
 80066bc:	08018e7c 	.word	0x08018e7c
 80066c0:	080187cc 	.word	0x080187cc
 80066c4:	20000a84 	.word	0x20000a84
 80066c8:	0801874c 	.word	0x0801874c
 80066cc:	08017b64 	.word	0x08017b64
 80066d0:	2000612c 	.word	0x2000612c
 80066d4:	08018d78 	.word	0x08018d78
 80066d8:	08018d6c 	.word	0x08018d6c
 80066dc:	08018d74 	.word	0x08018d74
 80066e0:	0801875c 	.word	0x0801875c
 80066e4:	08018764 	.word	0x08018764
 80066e8:	0801876c 	.word	0x0801876c
 80066ec:	08018d8c 	.word	0x08018d8c
 80066f0:	08018dbc 	.word	0x08018dbc
 80066f4:	08018778 	.word	0x08018778
 80066f8:	08018784 	.word	0x08018784
 80066fc:	08018794 	.word	0x08018794
 8006700:	080187a8 	.word	0x080187a8
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 8006704:	aa0a      	add	r2, sp, #40	; 0x28
 8006706:	2102      	movs	r1, #2
 8006708:	0020      	movs	r0, r4
 800670a:	f007 ff29 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800670e:	4bca      	ldr	r3, [pc, #808]	; (8006a38 <setCommand+0x684>)
 8006710:	4699      	mov	r9, r3
 8006712:	6018      	str	r0, [r3, #0]
		pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,3, &xParameterStringLength3);
 8006714:	aa09      	add	r2, sp, #36	; 0x24
 8006716:	2103      	movs	r1, #3
 8006718:	0020      	movs	r0, r4
 800671a:	f007 ff21 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800671e:	4fc7      	ldr	r7, [pc, #796]	; (8006a3c <setCommand+0x688>)
 8006720:	6038      	str	r0, [r7, #0]
		pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,4, &xParameterStringLength4);
 8006722:	aa08      	add	r2, sp, #32
 8006724:	2104      	movs	r1, #4
 8006726:	0020      	movs	r0, r4
 8006728:	f007 ff1a 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800672c:	4ec4      	ldr	r6, [pc, #784]	; (8006a40 <setCommand+0x68c>)
 800672e:	6030      	str	r0, [r6, #0]
		pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,5, &xParameterStringLength5);
 8006730:	aa07      	add	r2, sp, #28
 8006732:	2105      	movs	r1, #5
 8006734:	0020      	movs	r0, r4
 8006736:	f007 ff13 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800673a:	4cc2      	ldr	r4, [pc, #776]	; (8006a44 <setCommand+0x690>)
 800673c:	6020      	str	r0, [r4, #0]
		temp81 = atoi((const char*) pcParameterString2);		// Hours
 800673e:	464b      	mov	r3, r9
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f00d f8fa 	bl	801393a <atoi>
 8006746:	b2c3      	uxtb	r3, r0
 8006748:	4699      	mov	r9, r3
		temp82 = atoi((const char*) pcParameterString3);		// Minutes
 800674a:	6838      	ldr	r0, [r7, #0]
 800674c:	f00d f8f5 	bl	801393a <atoi>
 8006750:	b2c7      	uxtb	r7, r0
		temp83 = atoi((const char*) pcParameterString4);		// Seconds
 8006752:	6830      	ldr	r0, [r6, #0]
 8006754:	f00d f8f1 	bl	801393a <atoi>
 8006758:	b2c6      	uxtb	r6, r0
		if (pcParameterString5 != NULL) {
 800675a:	6824      	ldr	r4, [r4, #0]
 800675c:	2c00      	cmp	r4, #0
 800675e:	d010      	beq.n	8006782 <setCommand+0x3ce>
			if (!strncmp((const char*) pcParameterString5, "am", 2))
 8006760:	2202      	movs	r2, #2
 8006762:	49b9      	ldr	r1, [pc, #740]	; (8006a48 <setCommand+0x694>)
 8006764:	0020      	movs	r0, r4
 8006766:	f00e f90b 	bl	8014980 <strncmp>
 800676a:	2800      	cmp	r0, #0
 800676c:	d035      	beq.n	80067da <setCommand+0x426>
			else if (!strncmp((const char*) pcParameterString5, "pm", 2))
 800676e:	2202      	movs	r2, #2
 8006770:	49b6      	ldr	r1, [pc, #728]	; (8006a4c <setCommand+0x698>)
 8006772:	0020      	movs	r0, r4
 8006774:	f00e f904 	bl	8014980 <strncmp>
 8006778:	2800      	cmp	r0, #0
 800677a:	d000      	beq.n	800677e <setCommand+0x3ca>
 800677c:	e155      	b.n	8006a2a <setCommand+0x676>
				temp84 = RTC_PM;
 800677e:	2302      	movs	r3, #2
 8006780:	4698      	mov	r8, r3
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006782:	464b      	mov	r3, r9
 8006784:	2b17      	cmp	r3, #23
 8006786:	d900      	bls.n	800678a <setCommand+0x3d6>
 8006788:	e14f      	b.n	8006a2a <setCommand+0x676>
 800678a:	2f3b      	cmp	r7, #59	; 0x3b
 800678c:	d900      	bls.n	8006790 <setCommand+0x3dc>
 800678e:	e14c      	b.n	8006a2a <setCommand+0x676>
 8006790:	2e3b      	cmp	r6, #59	; 0x3b
 8006792:	d900      	bls.n	8006796 <setCommand+0x3e2>
 8006794:	e149      	b.n	8006a2a <setCommand+0x676>
				GetTimeDate();
 8006796:	f007 fa45 	bl	800dc24 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day,
 800679a:	4cad      	ldr	r4, [pc, #692]	; (8006a50 <setCommand+0x69c>)
 800679c:	7d23      	ldrb	r3, [r4, #20]
 800679e:	8b22      	ldrh	r2, [r4, #24]
 80067a0:	7d61      	ldrb	r1, [r4, #21]
 80067a2:	7da0      	ldrb	r0, [r4, #22]
 80067a4:	7b24      	ldrb	r4, [r4, #12]
 80067a6:	b264      	sxtb	r4, r4
 80067a8:	9404      	str	r4, [sp, #16]
 80067aa:	4644      	mov	r4, r8
 80067ac:	9403      	str	r4, [sp, #12]
 80067ae:	464c      	mov	r4, r9
 80067b0:	9402      	str	r4, [sp, #8]
 80067b2:	9701      	str	r7, [sp, #4]
 80067b4:	9600      	str	r6, [sp, #0]
 80067b6:	f007 f9db 	bl	800db70 <BOS_CalendarConfig>
 80067ba:	0006      	movs	r6, r0
	if (result == BOS_OK) {
 80067bc:	2e00      	cmp	r6, #0
 80067be:	d100      	bne.n	80067c2 <setCommand+0x40e>
 80067c0:	e653      	b.n	800646a <setCommand+0xb6>
	} else if (result == BOS_ERR_WrongParam)
 80067c2:	2e67      	cmp	r6, #103	; 0x67
 80067c4:	d100      	bne.n	80067c8 <setCommand+0x414>
 80067c6:	e624      	b.n	8006412 <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 80067c8:	2e68      	cmp	r6, #104	; 0x68
 80067ca:	d100      	bne.n	80067ce <setCommand+0x41a>
 80067cc:	e12d      	b.n	8006a2a <setCommand+0x676>
}
 80067ce:	2000      	movs	r0, #0
 80067d0:	b00d      	add	sp, #52	; 0x34
 80067d2:	bc0c      	pop	{r2, r3}
 80067d4:	4690      	mov	r8, r2
 80067d6:	4699      	mov	r9, r3
 80067d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 = RTC_AM;
 80067da:	2301      	movs	r3, #1
 80067dc:	4698      	mov	r8, r3
 80067de:	e7d0      	b.n	8006782 <setCommand+0x3ce>
		pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,2, &xParameterStringLength2);
 80067e0:	aa0a      	add	r2, sp, #40	; 0x28
 80067e2:	2102      	movs	r1, #2
 80067e4:	0020      	movs	r0, r4
 80067e6:	f007 febb 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80067ea:	4e93      	ldr	r6, [pc, #588]	; (8006a38 <setCommand+0x684>)
 80067ec:	6030      	str	r0, [r6, #0]
		pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,3, &xParameterStringLength3);
 80067ee:	aa09      	add	r2, sp, #36	; 0x24
 80067f0:	2103      	movs	r1, #3
 80067f2:	0020      	movs	r0, r4
 80067f4:	f007 feb4 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80067f8:	4b90      	ldr	r3, [pc, #576]	; (8006a3c <setCommand+0x688>)
 80067fa:	6018      	str	r0, [r3, #0]
		pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,4, &xParameterStringLength4);
 80067fc:	aa08      	add	r2, sp, #32
 80067fe:	2104      	movs	r1, #4
 8006800:	0020      	movs	r0, r4
 8006802:	f007 fead 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006806:	4b8e      	ldr	r3, [pc, #568]	; (8006a40 <setCommand+0x68c>)
 8006808:	4698      	mov	r8, r3
 800680a:	6018      	str	r0, [r3, #0]
		pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,5, &xParameterStringLength5);
 800680c:	aa07      	add	r2, sp, #28
 800680e:	2105      	movs	r1, #5
 8006810:	0020      	movs	r0, r4
 8006812:	f007 fea5 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006816:	4c8b      	ldr	r4, [pc, #556]	; (8006a44 <setCommand+0x690>)
 8006818:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char*) pcParameterString4);		// day
 800681a:	4643      	mov	r3, r8
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	f00d f88c 	bl	801393a <atoi>
 8006822:	b2c3      	uxtb	r3, r0
 8006824:	4698      	mov	r8, r3
		temp16 = atoi((const char*) pcParameterString5);		// year
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	f00d f887 	bl	801393a <atoi>
 800682c:	b283      	uxth	r3, r0
 800682e:	4699      	mov	r9, r3
		if (!strncmp((const char*) pcParameterString2, "monday", 6))
 8006830:	6834      	ldr	r4, [r6, #0]
 8006832:	2206      	movs	r2, #6
 8006834:	4987      	ldr	r1, [pc, #540]	; (8006a54 <setCommand+0x6a0>)
 8006836:	0020      	movs	r0, r4
 8006838:	f00e f8a2 	bl	8014980 <strncmp>
 800683c:	2800      	cmp	r0, #0
 800683e:	d100      	bne.n	8006842 <setCommand+0x48e>
 8006840:	e195      	b.n	8006b6e <setCommand+0x7ba>
		else if (!strncmp((const char*) pcParameterString2, "tuesday", 7))
 8006842:	2207      	movs	r2, #7
 8006844:	4984      	ldr	r1, [pc, #528]	; (8006a58 <setCommand+0x6a4>)
 8006846:	0020      	movs	r0, r4
 8006848:	f00e f89a 	bl	8014980 <strncmp>
 800684c:	2800      	cmp	r0, #0
 800684e:	d100      	bne.n	8006852 <setCommand+0x49e>
 8006850:	e19b      	b.n	8006b8a <setCommand+0x7d6>
		else if (!strncmp((const char*) pcParameterString2, "wednesday", 9))
 8006852:	2209      	movs	r2, #9
 8006854:	4981      	ldr	r1, [pc, #516]	; (8006a5c <setCommand+0x6a8>)
 8006856:	0020      	movs	r0, r4
 8006858:	f00e f892 	bl	8014980 <strncmp>
 800685c:	2800      	cmp	r0, #0
 800685e:	d100      	bne.n	8006862 <setCommand+0x4ae>
 8006860:	e195      	b.n	8006b8e <setCommand+0x7da>
		else if (!strncmp((const char*) pcParameterString2, "thursday", 8))
 8006862:	2208      	movs	r2, #8
 8006864:	497e      	ldr	r1, [pc, #504]	; (8006a60 <setCommand+0x6ac>)
 8006866:	0020      	movs	r0, r4
 8006868:	f00e f88a 	bl	8014980 <strncmp>
 800686c:	2800      	cmp	r0, #0
 800686e:	d100      	bne.n	8006872 <setCommand+0x4be>
 8006870:	e18f      	b.n	8006b92 <setCommand+0x7de>
		else if (!strncmp((const char*) pcParameterString2, "friday", 6))
 8006872:	2206      	movs	r2, #6
 8006874:	497b      	ldr	r1, [pc, #492]	; (8006a64 <setCommand+0x6b0>)
 8006876:	0020      	movs	r0, r4
 8006878:	f00e f882 	bl	8014980 <strncmp>
 800687c:	2800      	cmp	r0, #0
 800687e:	d100      	bne.n	8006882 <setCommand+0x4ce>
 8006880:	e189      	b.n	8006b96 <setCommand+0x7e2>
		else if (!strncmp((const char*) pcParameterString2, "saturday", 8))
 8006882:	2208      	movs	r2, #8
 8006884:	4978      	ldr	r1, [pc, #480]	; (8006a68 <setCommand+0x6b4>)
 8006886:	0020      	movs	r0, r4
 8006888:	f00e f87a 	bl	8014980 <strncmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	d100      	bne.n	8006892 <setCommand+0x4de>
 8006890:	e183      	b.n	8006b9a <setCommand+0x7e6>
		else if (!strncmp((const char*) pcParameterString2, "sunday", 6))
 8006892:	2206      	movs	r2, #6
 8006894:	4975      	ldr	r1, [pc, #468]	; (8006a6c <setCommand+0x6b8>)
 8006896:	0020      	movs	r0, r4
 8006898:	f00e f872 	bl	8014980 <strncmp>
 800689c:	2800      	cmp	r0, #0
 800689e:	d100      	bne.n	80068a2 <setCommand+0x4ee>
 80068a0:	e17d      	b.n	8006b9e <setCommand+0x7ea>
		if (!strncmp((const char*) pcParameterString3, "january", 7)
 80068a2:	4b66      	ldr	r3, [pc, #408]	; (8006a3c <setCommand+0x688>)
 80068a4:	681c      	ldr	r4, [r3, #0]
 80068a6:	2207      	movs	r2, #7
 80068a8:	4971      	ldr	r1, [pc, #452]	; (8006a70 <setCommand+0x6bc>)
 80068aa:	0020      	movs	r0, r4
 80068ac:	f00e f868 	bl	8014980 <strncmp>
			result = BOS_ERR_WrongValue;
 80068b0:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char*) pcParameterString3, "january", 7)
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d101      	bne.n	80068ba <setCommand+0x506>
			result = BOS_ERR_WrongValue;
 80068b6:	2668      	movs	r6, #104	; 0x68
 80068b8:	e783      	b.n	80067c2 <setCommand+0x40e>
				|| !strncmp((const char*) pcParameterString3, "1 ", 2))
 80068ba:	2202      	movs	r2, #2
 80068bc:	496d      	ldr	r1, [pc, #436]	; (8006a74 <setCommand+0x6c0>)
 80068be:	0020      	movs	r0, r4
 80068c0:	f00e f85e 	bl	8014980 <strncmp>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d100      	bne.n	80068ca <setCommand+0x516>
 80068c8:	e104      	b.n	8006ad4 <setCommand+0x720>
		else if (!strncmp((const char*) pcParameterString3, "february", 8)
 80068ca:	2208      	movs	r2, #8
 80068cc:	496a      	ldr	r1, [pc, #424]	; (8006a78 <setCommand+0x6c4>)
 80068ce:	0020      	movs	r0, r4
 80068d0:	f00e f856 	bl	8014980 <strncmp>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d100      	bne.n	80068da <setCommand+0x526>
 80068d8:	e11f      	b.n	8006b1a <setCommand+0x766>
				|| !strncmp((const char*) pcParameterString3, "2 ", 2))
 80068da:	2202      	movs	r2, #2
 80068dc:	4967      	ldr	r1, [pc, #412]	; (8006a7c <setCommand+0x6c8>)
 80068de:	0020      	movs	r0, r4
 80068e0:	f00e f84e 	bl	8014980 <strncmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d100      	bne.n	80068ea <setCommand+0x536>
 80068e8:	e119      	b.n	8006b1e <setCommand+0x76a>
		else if (!strncmp((const char*) pcParameterString3, "march", 5)
 80068ea:	2205      	movs	r2, #5
 80068ec:	4964      	ldr	r1, [pc, #400]	; (8006a80 <setCommand+0x6cc>)
 80068ee:	0020      	movs	r0, r4
 80068f0:	f00e f846 	bl	8014980 <strncmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d100      	bne.n	80068fa <setCommand+0x546>
 80068f8:	e113      	b.n	8006b22 <setCommand+0x76e>
				|| !strncmp((const char*) pcParameterString3, "3 ", 2))
 80068fa:	2202      	movs	r2, #2
 80068fc:	4961      	ldr	r1, [pc, #388]	; (8006a84 <setCommand+0x6d0>)
 80068fe:	0020      	movs	r0, r4
 8006900:	f00e f83e 	bl	8014980 <strncmp>
 8006904:	2800      	cmp	r0, #0
 8006906:	d100      	bne.n	800690a <setCommand+0x556>
 8006908:	e10d      	b.n	8006b26 <setCommand+0x772>
		else if (!strncmp((const char*) pcParameterString3, "april", 5)
 800690a:	2205      	movs	r2, #5
 800690c:	495e      	ldr	r1, [pc, #376]	; (8006a88 <setCommand+0x6d4>)
 800690e:	0020      	movs	r0, r4
 8006910:	f00e f836 	bl	8014980 <strncmp>
 8006914:	2800      	cmp	r0, #0
 8006916:	d100      	bne.n	800691a <setCommand+0x566>
 8006918:	e107      	b.n	8006b2a <setCommand+0x776>
				|| !strncmp((const char*) pcParameterString3, "4 ", 2))
 800691a:	2202      	movs	r2, #2
 800691c:	495b      	ldr	r1, [pc, #364]	; (8006a8c <setCommand+0x6d8>)
 800691e:	0020      	movs	r0, r4
 8006920:	f00e f82e 	bl	8014980 <strncmp>
 8006924:	2800      	cmp	r0, #0
 8006926:	d100      	bne.n	800692a <setCommand+0x576>
 8006928:	e101      	b.n	8006b2e <setCommand+0x77a>
		else if (!strncmp((const char*) pcParameterString3, "may", 3)
 800692a:	2203      	movs	r2, #3
 800692c:	4958      	ldr	r1, [pc, #352]	; (8006a90 <setCommand+0x6dc>)
 800692e:	0020      	movs	r0, r4
 8006930:	f00e f826 	bl	8014980 <strncmp>
 8006934:	2800      	cmp	r0, #0
 8006936:	d100      	bne.n	800693a <setCommand+0x586>
 8006938:	e0fb      	b.n	8006b32 <setCommand+0x77e>
				|| !strncmp((const char*) pcParameterString3, "5 ", 2))
 800693a:	2202      	movs	r2, #2
 800693c:	4955      	ldr	r1, [pc, #340]	; (8006a94 <setCommand+0x6e0>)
 800693e:	0020      	movs	r0, r4
 8006940:	f00e f81e 	bl	8014980 <strncmp>
 8006944:	2800      	cmp	r0, #0
 8006946:	d100      	bne.n	800694a <setCommand+0x596>
 8006948:	e0f5      	b.n	8006b36 <setCommand+0x782>
		else if (!strncmp((const char*) pcParameterString3, "june", 4)
 800694a:	2204      	movs	r2, #4
 800694c:	4952      	ldr	r1, [pc, #328]	; (8006a98 <setCommand+0x6e4>)
 800694e:	0020      	movs	r0, r4
 8006950:	f00e f816 	bl	8014980 <strncmp>
 8006954:	2800      	cmp	r0, #0
 8006956:	d100      	bne.n	800695a <setCommand+0x5a6>
 8006958:	e0ef      	b.n	8006b3a <setCommand+0x786>
				|| !strncmp((const char*) pcParameterString3, "6 ", 2))
 800695a:	2202      	movs	r2, #2
 800695c:	494f      	ldr	r1, [pc, #316]	; (8006a9c <setCommand+0x6e8>)
 800695e:	0020      	movs	r0, r4
 8006960:	f00e f80e 	bl	8014980 <strncmp>
 8006964:	2800      	cmp	r0, #0
 8006966:	d100      	bne.n	800696a <setCommand+0x5b6>
 8006968:	e0e9      	b.n	8006b3e <setCommand+0x78a>
		else if (!strncmp((const char*) pcParameterString3, "july", 4)
 800696a:	2204      	movs	r2, #4
 800696c:	494c      	ldr	r1, [pc, #304]	; (8006aa0 <setCommand+0x6ec>)
 800696e:	0020      	movs	r0, r4
 8006970:	f00e f806 	bl	8014980 <strncmp>
 8006974:	2800      	cmp	r0, #0
 8006976:	d100      	bne.n	800697a <setCommand+0x5c6>
 8006978:	e0e3      	b.n	8006b42 <setCommand+0x78e>
				|| !strncmp((const char*) pcParameterString3, "7 ", 2))
 800697a:	2202      	movs	r2, #2
 800697c:	4949      	ldr	r1, [pc, #292]	; (8006aa4 <setCommand+0x6f0>)
 800697e:	0020      	movs	r0, r4
 8006980:	f00d fffe 	bl	8014980 <strncmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	d100      	bne.n	800698a <setCommand+0x5d6>
 8006988:	e0dd      	b.n	8006b46 <setCommand+0x792>
		else if (!strncmp((const char*) pcParameterString3, "august", 5)
 800698a:	2205      	movs	r2, #5
 800698c:	4946      	ldr	r1, [pc, #280]	; (8006aa8 <setCommand+0x6f4>)
 800698e:	0020      	movs	r0, r4
 8006990:	f00d fff6 	bl	8014980 <strncmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	d100      	bne.n	800699a <setCommand+0x5e6>
 8006998:	e0d7      	b.n	8006b4a <setCommand+0x796>
				|| !strncmp((const char*) pcParameterString3, "8 ", 2))
 800699a:	2202      	movs	r2, #2
 800699c:	4943      	ldr	r1, [pc, #268]	; (8006aac <setCommand+0x6f8>)
 800699e:	0020      	movs	r0, r4
 80069a0:	f00d ffee 	bl	8014980 <strncmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d100      	bne.n	80069aa <setCommand+0x5f6>
 80069a8:	e0d1      	b.n	8006b4e <setCommand+0x79a>
		else if (!strncmp((const char*) pcParameterString3, "september", 9)
 80069aa:	2209      	movs	r2, #9
 80069ac:	4940      	ldr	r1, [pc, #256]	; (8006ab0 <setCommand+0x6fc>)
 80069ae:	0020      	movs	r0, r4
 80069b0:	f00d ffe6 	bl	8014980 <strncmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d100      	bne.n	80069ba <setCommand+0x606>
 80069b8:	e0cb      	b.n	8006b52 <setCommand+0x79e>
				|| !strncmp((const char*) pcParameterString3, "9 ", 2))
 80069ba:	2202      	movs	r2, #2
 80069bc:	493d      	ldr	r1, [pc, #244]	; (8006ab4 <setCommand+0x700>)
 80069be:	0020      	movs	r0, r4
 80069c0:	f00d ffde 	bl	8014980 <strncmp>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d100      	bne.n	80069ca <setCommand+0x616>
 80069c8:	e0c5      	b.n	8006b56 <setCommand+0x7a2>
		else if (!strncmp((const char*) pcParameterString3, "october", 7)
 80069ca:	2207      	movs	r2, #7
 80069cc:	493a      	ldr	r1, [pc, #232]	; (8006ab8 <setCommand+0x704>)
 80069ce:	0020      	movs	r0, r4
 80069d0:	f00d ffd6 	bl	8014980 <strncmp>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d100      	bne.n	80069da <setCommand+0x626>
 80069d8:	e0bf      	b.n	8006b5a <setCommand+0x7a6>
				|| !strncmp((const char*) pcParameterString3, "10", 2))
 80069da:	2202      	movs	r2, #2
 80069dc:	4937      	ldr	r1, [pc, #220]	; (8006abc <setCommand+0x708>)
 80069de:	0020      	movs	r0, r4
 80069e0:	f00d ffce 	bl	8014980 <strncmp>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d100      	bne.n	80069ea <setCommand+0x636>
 80069e8:	e0b9      	b.n	8006b5e <setCommand+0x7aa>
		else if (!strncmp((const char*) pcParameterString3, "november", 8)
 80069ea:	2208      	movs	r2, #8
 80069ec:	4934      	ldr	r1, [pc, #208]	; (8006ac0 <setCommand+0x70c>)
 80069ee:	0020      	movs	r0, r4
 80069f0:	f00d ffc6 	bl	8014980 <strncmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d100      	bne.n	80069fa <setCommand+0x646>
 80069f8:	e0b3      	b.n	8006b62 <setCommand+0x7ae>
				|| !strncmp((const char*) pcParameterString3, "11", 2))
 80069fa:	2202      	movs	r2, #2
 80069fc:	4931      	ldr	r1, [pc, #196]	; (8006ac4 <setCommand+0x710>)
 80069fe:	0020      	movs	r0, r4
 8006a00:	f00d ffbe 	bl	8014980 <strncmp>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d100      	bne.n	8006a0a <setCommand+0x656>
 8006a08:	e0ad      	b.n	8006b66 <setCommand+0x7b2>
		else if (!strncmp((const char*) pcParameterString3, "december", 8)
 8006a0a:	2208      	movs	r2, #8
 8006a0c:	492e      	ldr	r1, [pc, #184]	; (8006ac8 <setCommand+0x714>)
 8006a0e:	0020      	movs	r0, r4
 8006a10:	f00d ffb6 	bl	8014980 <strncmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d100      	bne.n	8006a1a <setCommand+0x666>
 8006a18:	e0a7      	b.n	8006b6a <setCommand+0x7b6>
				|| !strncmp((const char*) pcParameterString3, "12", 2))
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	492b      	ldr	r1, [pc, #172]	; (8006acc <setCommand+0x718>)
 8006a1e:	0020      	movs	r0, r4
 8006a20:	f00d ffae 	bl	8014980 <strncmp>
			temp82 = DECEMBER;
 8006a24:	240c      	movs	r4, #12
				|| !strncmp((const char*) pcParameterString3, "12", 2))
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d055      	beq.n	8006ad6 <setCommand+0x722>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongValue);
 8006a2a:	220f      	movs	r2, #15
 8006a2c:	4928      	ldr	r1, [pc, #160]	; (8006ad0 <setCommand+0x71c>)
 8006a2e:	0028      	movs	r0, r5
 8006a30:	f00c fffb 	bl	8013a2a <memcpy>
 8006a34:	e6cb      	b.n	80067ce <setCommand+0x41a>
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	20000a84 	.word	0x20000a84
 8006a3c:	20000a8c 	.word	0x20000a8c
 8006a40:	20000a90 	.word	0x20000a90
 8006a44:	20000a94 	.word	0x20000a94
 8006a48:	0801a5dc 	.word	0x0801a5dc
 8006a4c:	08018e78 	.word	0x08018e78
 8006a50:	2000612c 	.word	0x2000612c
 8006a54:	08018e84 	.word	0x08018e84
 8006a58:	08018e8c 	.word	0x08018e8c
 8006a5c:	08018e94 	.word	0x08018e94
 8006a60:	08018ea0 	.word	0x08018ea0
 8006a64:	08018eac 	.word	0x08018eac
 8006a68:	08018eb4 	.word	0x08018eb4
 8006a6c:	08018ec0 	.word	0x08018ec0
 8006a70:	08018f5c 	.word	0x08018f5c
 8006a74:	08018ec8 	.word	0x08018ec8
 8006a78:	08018ecc 	.word	0x08018ecc
 8006a7c:	08018ed8 	.word	0x08018ed8
 8006a80:	08018edc 	.word	0x08018edc
 8006a84:	08018ee4 	.word	0x08018ee4
 8006a88:	08018ee8 	.word	0x08018ee8
 8006a8c:	08018ef0 	.word	0x08018ef0
 8006a90:	08018ef4 	.word	0x08018ef4
 8006a94:	08018ef8 	.word	0x08018ef8
 8006a98:	08018efc 	.word	0x08018efc
 8006a9c:	08018f04 	.word	0x08018f04
 8006aa0:	08018f08 	.word	0x08018f08
 8006aa4:	08018f10 	.word	0x08018f10
 8006aa8:	08018f14 	.word	0x08018f14
 8006aac:	08018f1c 	.word	0x08018f1c
 8006ab0:	08018f20 	.word	0x08018f20
 8006ab4:	08018f2c 	.word	0x08018f2c
 8006ab8:	08018f30 	.word	0x08018f30
 8006abc:	08018f38 	.word	0x08018f38
 8006ac0:	08018f3c 	.word	0x08018f3c
 8006ac4:	08018f48 	.word	0x08018f48
 8006ac8:	08018f4c 	.word	0x08018f4c
 8006acc:	08018f58 	.word	0x08018f58
 8006ad0:	08018638 	.word	0x08018638
			temp82 = JANUARY;
 8006ad4:	2401      	movs	r4, #1
		if (result == BOS_OK) {
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d000      	beq.n	8006adc <setCommand+0x728>
 8006ada:	e672      	b.n	80067c2 <setCommand+0x40e>
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006adc:	4643      	mov	r3, r8
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	2b1e      	cmp	r3, #30
 8006ae2:	d8a2      	bhi.n	8006a2a <setCommand+0x676>
 8006ae4:	4b2f      	ldr	r3, [pc, #188]	; (8006ba4 <setCommand+0x7f0>)
 8006ae6:	444b      	add	r3, r9
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b64      	cmp	r3, #100	; 0x64
 8006aec:	d89d      	bhi.n	8006a2a <setCommand+0x676>
				GetTimeDate();
 8006aee:	f007 f899 	bl	800dc24 <GetTimeDate>
						BOS.time.ampm, BOS.daylightsaving);
 8006af2:	4b2d      	ldr	r3, [pc, #180]	; (8006ba8 <setCommand+0x7f4>)
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81,
 8006af4:	220c      	movs	r2, #12
 8006af6:	569a      	ldrsb	r2, [r3, r2]
 8006af8:	9204      	str	r2, [sp, #16]
 8006afa:	7cda      	ldrb	r2, [r3, #19]
 8006afc:	9203      	str	r2, [sp, #12]
 8006afe:	7c9a      	ldrb	r2, [r3, #18]
 8006b00:	9202      	str	r2, [sp, #8]
 8006b02:	7c5a      	ldrb	r2, [r3, #17]
 8006b04:	9201      	str	r2, [sp, #4]
 8006b06:	7c1b      	ldrb	r3, [r3, #16]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	003b      	movs	r3, r7
 8006b0c:	464a      	mov	r2, r9
 8006b0e:	4641      	mov	r1, r8
 8006b10:	0020      	movs	r0, r4
 8006b12:	f007 f82d 	bl	800db70 <BOS_CalendarConfig>
 8006b16:	0006      	movs	r6, r0
 8006b18:	e650      	b.n	80067bc <setCommand+0x408>
			temp82 = FEBRUARY;
 8006b1a:	2402      	movs	r4, #2
 8006b1c:	e7db      	b.n	8006ad6 <setCommand+0x722>
 8006b1e:	2402      	movs	r4, #2
 8006b20:	e7d9      	b.n	8006ad6 <setCommand+0x722>
			temp82 = MARCH;
 8006b22:	2403      	movs	r4, #3
 8006b24:	e7d7      	b.n	8006ad6 <setCommand+0x722>
 8006b26:	2403      	movs	r4, #3
 8006b28:	e7d5      	b.n	8006ad6 <setCommand+0x722>
			temp82 = APRIL;
 8006b2a:	2404      	movs	r4, #4
 8006b2c:	e7d3      	b.n	8006ad6 <setCommand+0x722>
 8006b2e:	2404      	movs	r4, #4
 8006b30:	e7d1      	b.n	8006ad6 <setCommand+0x722>
			temp82 = MAY;
 8006b32:	2405      	movs	r4, #5
 8006b34:	e7cf      	b.n	8006ad6 <setCommand+0x722>
 8006b36:	2405      	movs	r4, #5
 8006b38:	e7cd      	b.n	8006ad6 <setCommand+0x722>
			temp82 = JUNE;
 8006b3a:	2406      	movs	r4, #6
 8006b3c:	e7cb      	b.n	8006ad6 <setCommand+0x722>
 8006b3e:	2406      	movs	r4, #6
 8006b40:	e7c9      	b.n	8006ad6 <setCommand+0x722>
			temp82 = JULY;
 8006b42:	2407      	movs	r4, #7
 8006b44:	e7c7      	b.n	8006ad6 <setCommand+0x722>
 8006b46:	2407      	movs	r4, #7
 8006b48:	e7c5      	b.n	8006ad6 <setCommand+0x722>
			temp82 = AUGUST;
 8006b4a:	2408      	movs	r4, #8
 8006b4c:	e7c3      	b.n	8006ad6 <setCommand+0x722>
 8006b4e:	2408      	movs	r4, #8
 8006b50:	e7c1      	b.n	8006ad6 <setCommand+0x722>
			temp82 = SEPTEMBER;
 8006b52:	2409      	movs	r4, #9
 8006b54:	e7bf      	b.n	8006ad6 <setCommand+0x722>
 8006b56:	2409      	movs	r4, #9
 8006b58:	e7bd      	b.n	8006ad6 <setCommand+0x722>
			temp82 = OCTOBER;
 8006b5a:	240a      	movs	r4, #10
 8006b5c:	e7bb      	b.n	8006ad6 <setCommand+0x722>
 8006b5e:	240a      	movs	r4, #10
 8006b60:	e7b9      	b.n	8006ad6 <setCommand+0x722>
			temp82 = NOVEMBER;
 8006b62:	240b      	movs	r4, #11
 8006b64:	e7b7      	b.n	8006ad6 <setCommand+0x722>
 8006b66:	240b      	movs	r4, #11
 8006b68:	e7b5      	b.n	8006ad6 <setCommand+0x722>
			temp82 = DECEMBER;
 8006b6a:	240c      	movs	r4, #12
 8006b6c:	e7b3      	b.n	8006ad6 <setCommand+0x722>
			temp81 = MONDAY;
 8006b6e:	2701      	movs	r7, #1
		if (!strncmp((const char*) pcParameterString3, "january", 7)
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <setCommand+0x7f8>)
 8006b72:	681c      	ldr	r4, [r3, #0]
 8006b74:	2207      	movs	r2, #7
 8006b76:	490e      	ldr	r1, [pc, #56]	; (8006bb0 <setCommand+0x7fc>)
 8006b78:	0020      	movs	r0, r4
 8006b7a:	f00d ff01 	bl	8014980 <strncmp>
 8006b7e:	2600      	movs	r6, #0
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d000      	beq.n	8006b86 <setCommand+0x7d2>
 8006b84:	e699      	b.n	80068ba <setCommand+0x506>
			temp82 = JANUARY;
 8006b86:	2401      	movs	r4, #1
 8006b88:	e7a8      	b.n	8006adc <setCommand+0x728>
			temp81 = TUESDAY;
 8006b8a:	2702      	movs	r7, #2
 8006b8c:	e7f0      	b.n	8006b70 <setCommand+0x7bc>
			temp81 = WEDNESDAY;
 8006b8e:	2703      	movs	r7, #3
 8006b90:	e7ee      	b.n	8006b70 <setCommand+0x7bc>
			temp81 = THURSDAY;
 8006b92:	2704      	movs	r7, #4
 8006b94:	e7ec      	b.n	8006b70 <setCommand+0x7bc>
			temp81 = FRIDAY;
 8006b96:	2705      	movs	r7, #5
 8006b98:	e7ea      	b.n	8006b70 <setCommand+0x7bc>
			temp81 = SATURDAY;
 8006b9a:	2706      	movs	r7, #6
 8006b9c:	e7e8      	b.n	8006b70 <setCommand+0x7bc>
			temp81 = SUNDAY;
 8006b9e:	2707      	movs	r7, #7
 8006ba0:	e7e6      	b.n	8006b70 <setCommand+0x7bc>
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	fffff830 	.word	0xfffff830
 8006ba8:	2000612c 	.word	0x2000612c
 8006bac:	20000a8c 	.word	0x20000a8c
 8006bb0:	08018f5c 	.word	0x08018f5c

08006bb4 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	0005      	movs	r5, r0
 8006bba:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	d101      	bne.n	8006bc8 <removebuttonCommand+0x14>
 8006bc4:	b672      	cpsid	i
 8006bc6:	e7fe      	b.n	8006bc6 <removebuttonCommand+0x12>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006bc8:	aa01      	add	r2, sp, #4
 8006bca:	2101      	movs	r1, #1
 8006bcc:	f007 fcc8 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006bd4:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006bd6:	2b70      	cmp	r3, #112	; 0x70
 8006bd8:	d007      	beq.n	8006bea <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 8006bda:	0020      	movs	r0, r4
 8006bdc:	f001 fb82 	bl	80082e4 <RemovePortButton>
	if (result == BOS_OK) {
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d007      	beq.n	8006bf4 <removebuttonCommand+0x40>
}
 8006be4:	2000      	movs	r0, #0
 8006be6:	b003      	add	sp, #12
 8006be8:	bd30      	pop	{r4, r5, pc}
		port = (uint8_t) atol((char*) pcParameterString1 + 1);
 8006bea:	3001      	adds	r0, #1
 8006bec:	f00c feab 	bl	8013946 <atol>
 8006bf0:	b2c4      	uxtb	r4, r0
 8006bf2:	e7f2      	b.n	8006bda <removebuttonCommand+0x26>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, port, port);
 8006bf4:	0023      	movs	r3, r4
 8006bf6:	0022      	movs	r2, r4
 8006bf8:	4902      	ldr	r1, [pc, #8]	; (8006c04 <removebuttonCommand+0x50>)
 8006bfa:	0028      	movs	r0, r5
 8006bfc:	f00d fe7c 	bl	80148f8 <siprintf>
 8006c00:	e7f0      	b.n	8006be4 <removebuttonCommand+0x30>
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	08018c1c 	.word	0x08018c1c

08006c08 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	0006      	movs	r6, r0
 8006c0e:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d101      	bne.n	8006c1e <addbuttonCommand+0x16>
 8006c1a:	b672      	cpsid	i
 8006c1c:	e7fe      	b.n	8006c1c <addbuttonCommand+0x14>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006c1e:	aa05      	add	r2, sp, #20
 8006c20:	2101      	movs	r1, #1
 8006c22:	9803      	ldr	r0, [sp, #12]
 8006c24:	f007 fc9c 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006c28:	0004      	movs	r4, r0
 8006c2a:	4b23      	ldr	r3, [pc, #140]	; (8006cb8 <addbuttonCommand+0xb0>)
 8006c2c:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char*) pcParameterString1, "momentary-no",xParameterStringLength1)) {
 8006c2e:	9d05      	ldr	r5, [sp, #20]
 8006c30:	002a      	movs	r2, r5
 8006c32:	4922      	ldr	r1, [pc, #136]	; (8006cbc <addbuttonCommand+0xb4>)
 8006c34:	f00d fea4 	bl	8014980 <strncmp>
		type = MOMENTARY_NO;
 8006c38:	2701      	movs	r7, #1
	if (!strncmp((const char*) pcParameterString1, "momentary-no",xParameterStringLength1)) {
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d017      	beq.n	8006c6e <addbuttonCommand+0x66>
	} else if (!strncmp((const char*) pcParameterString1, "momentary-nc",xParameterStringLength1)) {
 8006c3e:	002a      	movs	r2, r5
 8006c40:	491f      	ldr	r1, [pc, #124]	; (8006cc0 <addbuttonCommand+0xb8>)
 8006c42:	0020      	movs	r0, r4
 8006c44:	f00d fe9c 	bl	8014980 <strncmp>
		type = MOMENTARY_NC;
 8006c48:	3701      	adds	r7, #1
	} else if (!strncmp((const char*) pcParameterString1, "momentary-nc",xParameterStringLength1)) {
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d00f      	beq.n	8006c6e <addbuttonCommand+0x66>
	} else if (!strncmp((const char*) pcParameterString1, "onoff-no",xParameterStringLength1)) {
 8006c4e:	002a      	movs	r2, r5
 8006c50:	491c      	ldr	r1, [pc, #112]	; (8006cc4 <addbuttonCommand+0xbc>)
 8006c52:	0020      	movs	r0, r4
 8006c54:	f00d fe94 	bl	8014980 <strncmp>
		type = ONOFF_NO;
 8006c58:	3701      	adds	r7, #1
	} else if (!strncmp((const char*) pcParameterString1, "onoff-no",xParameterStringLength1)) {
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d007      	beq.n	8006c6e <addbuttonCommand+0x66>
	} else if (!strncmp((const char*) pcParameterString1, "onoff-nc",xParameterStringLength1)) {
 8006c5e:	002a      	movs	r2, r5
 8006c60:	4919      	ldr	r1, [pc, #100]	; (8006cc8 <addbuttonCommand+0xc0>)
 8006c62:	0020      	movs	r0, r4
 8006c64:	f00d fe8c 	bl	8014980 <strncmp>
		type = ONOFF_NC;
 8006c68:	4243      	negs	r3, r0
 8006c6a:	4158      	adcs	r0, r3
 8006c6c:	0087      	lsls	r7, r0, #2
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8006c6e:	aa04      	add	r2, sp, #16
 8006c70:	2102      	movs	r1, #2
 8006c72:	9803      	ldr	r0, [sp, #12]
 8006c74:	f007 fc74 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006c78:	2300      	movs	r3, #0
 8006c7a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006c7c:	2400      	movs	r4, #0
	if (pcParameterString2[0] == 'p') {
 8006c7e:	2b70      	cmp	r3, #112	; 0x70
 8006c80:	d008      	beq.n	8006c94 <addbuttonCommand+0x8c>
	result = AddPortButton(type, port);
 8006c82:	0021      	movs	r1, r4
 8006c84:	0038      	movs	r0, r7
 8006c86:	f001 fa9b 	bl	80081c0 <AddPortButton>
	if (result == BOS_OK) {
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d007      	beq.n	8006c9e <addbuttonCommand+0x96>
}
 8006c8e:	2000      	movs	r0, #0
 8006c90:	b007      	add	sp, #28
 8006c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = (uint8_t) atol((char*) pcParameterString2 + 1);
 8006c94:	3001      	adds	r0, #1
 8006c96:	f00c fe56 	bl	8013946 <atol>
 8006c9a:	b2c4      	uxtb	r4, r0
 8006c9c:	e7f1      	b.n	8006c82 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] = 0;// Get rid of the remaining parameters
 8006c9e:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <addbuttonCommand+0xb0>)
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9905      	ldr	r1, [sp, #20]
 8006ca6:	5453      	strb	r3, [r2, r1]
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, pcParameterString1,port, port);
 8006ca8:	9400      	str	r4, [sp, #0]
 8006caa:	0023      	movs	r3, r4
 8006cac:	4907      	ldr	r1, [pc, #28]	; (8006ccc <addbuttonCommand+0xc4>)
 8006cae:	0030      	movs	r0, r6
 8006cb0:	f00d fe22 	bl	80148f8 <siprintf>
 8006cb4:	e7eb      	b.n	8006c8e <addbuttonCommand+0x86>
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	20000a74 	.word	0x20000a74
 8006cbc:	080184dc 	.word	0x080184dc
 8006cc0:	080184ec 	.word	0x080184ec
 8006cc4:	080184fc 	.word	0x080184fc
 8006cc8:	08018508 	.word	0x08018508
 8006ccc:	08018514 	.word	0x08018514

08006cd0 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd2:	46de      	mov	lr, fp
 8006cd4:	4657      	mov	r7, sl
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b09b      	sub	sp, #108	; 0x6c
 8006cda:	0005      	movs	r5, r0
 8006cdc:	9009      	str	r0, [sp, #36]	; 0x24
 8006cde:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0,xParameterStringLength3 = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9319      	str	r3, [sp, #100]	; 0x64
 8006ce4:	9318      	str	r3, [sp, #96]	; 0x60
 8006ce6:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0,xParameterStringLength6 = 0;
 8006ce8:	9316      	str	r3, [sp, #88]	; 0x58
 8006cea:	9315      	str	r3, [sp, #84]	; 0x54
 8006cec:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 = 0;
 8006cee:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] = { 0 }, par2[MaxLengthOfAlias + 1] = { 0 },par3[MaxLengthOfAlias + 1] = { 0 };
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	a810      	add	r0, sp, #64	; 0x40
 8006cf6:	f00c fea1 	bl	8013a3c <memset>
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	a80d      	add	r0, sp, #52	; 0x34
 8006d00:	f00c fe9c 	bl	8013a3c <memset>
 8006d04:	220a      	movs	r2, #10
 8006d06:	2100      	movs	r1, #0
 8006d08:	a80a      	add	r0, sp, #40	; 0x28
 8006d0a:	f00c fe97 	bl	8013a3c <memset>
	configASSERT(pcWriteBuffer);
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	d101      	bne.n	8006d16 <scastCommand+0x46>
 8006d12:	b672      	cpsid	i
 8006d14:	e7fe      	b.n	8006d14 <scastCommand+0x44>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006d16:	aa19      	add	r2, sp, #100	; 0x64
 8006d18:	2101      	movs	r1, #1
 8006d1a:	0020      	movs	r0, r4
 8006d1c:	f007 fc20 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006d20:	2300      	movs	r3, #0
 8006d22:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0;
 8006d24:	2200      	movs	r2, #0
 8006d26:	9208      	str	r2, [sp, #32]
	if (pcParameterString1[0] == 'P') {
 8006d28:	2b50      	cmp	r3, #80	; 0x50
 8006d2a:	d100      	bne.n	8006d2e <scastCommand+0x5e>
 8006d2c:	e06d      	b.n	8006e0a <scastCommand+0x13a>
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,&xParameterStringLength2);
 8006d2e:	aa18      	add	r2, sp, #96	; 0x60
 8006d30:	2102      	movs	r1, #2
 8006d32:	0020      	movs	r0, r4
 8006d34:	f007 fc14 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006d38:	0001      	movs	r1, r0
	strncpy(par1, (char*) pcParameterString2, xParameterStringLength2);
 8006d3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d3c:	a810      	add	r0, sp, #64	; 0x40
 8006d3e:	f00d fe30 	bl	80149a2 <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006d42:	a810      	add	r0, sp, #64	; 0x40
 8006d44:	f7fd fa40 	bl	80041c8 <GetID>
 8006d48:	b2c3      	uxtb	r3, r0
 8006d4a:	469a      	mov	sl, r3
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,&xParameterStringLength3);
 8006d4c:	aa17      	add	r2, sp, #92	; 0x5c
 8006d4e:	2103      	movs	r1, #3
 8006d50:	0020      	movs	r0, r4
 8006d52:	f007 fc05 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006d56:	2300      	movs	r3, #0
 8006d58:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0;
 8006d5a:	2700      	movs	r7, #0
	if (pcParameterString3[0] == 'p') {
 8006d5c:	2b70      	cmp	r3, #112	; 0x70
 8006d5e:	d05a      	beq.n	8006e16 <scastCommand+0x146>
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,&xParameterStringLength4);
 8006d60:	aa16      	add	r2, sp, #88	; 0x58
 8006d62:	2104      	movs	r1, #4
 8006d64:	0020      	movs	r0, r4
 8006d66:	f007 fbfb 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006d6a:	0001      	movs	r1, r0
	strncpy(par2, (char*) pcParameterString4, xParameterStringLength4);
 8006d6c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d6e:	a80d      	add	r0, sp, #52	; 0x34
 8006d70:	f00d fe17 	bl	80149a2 <strncpy>
	dstM = (uint8_t) GetID(par2);
 8006d74:	a80d      	add	r0, sp, #52	; 0x34
 8006d76:	f7fd fa27 	bl	80041c8 <GetID>
 8006d7a:	b2c3      	uxtb	r3, r0
 8006d7c:	469b      	mov	fp, r3
	pcParameterString5 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 5,&xParameterStringLength5);
 8006d7e:	aa15      	add	r2, sp, #84	; 0x54
 8006d80:	2105      	movs	r1, #5
 8006d82:	0020      	movs	r0, r4
 8006d84:	f007 fbec 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char*) pcParameterString5, "forward",xParameterStringLength5))
 8006d88:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d8a:	0032      	movs	r2, r6
 8006d8c:	492b      	ldr	r1, [pc, #172]	; (8006e3c <scastCommand+0x16c>)
 8006d8e:	9007      	str	r0, [sp, #28]
 8006d90:	f00d fdf6 	bl	8014980 <strncmp>
		direction = FORWARD;
 8006d94:	2500      	movs	r5, #0
	if (!strncmp((const char*) pcParameterString5, "forward",xParameterStringLength5))
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d00f      	beq.n	8006dba <scastCommand+0xea>
	else if (!strncmp((const char*) pcParameterString5, "backward",xParameterStringLength5))
 8006d9a:	0032      	movs	r2, r6
 8006d9c:	4928      	ldr	r1, [pc, #160]	; (8006e40 <scastCommand+0x170>)
 8006d9e:	9807      	ldr	r0, [sp, #28]
 8006da0:	f00d fdee 	bl	8014980 <strncmp>
		direction = BACKWARD;
 8006da4:	3501      	adds	r5, #1
	else if (!strncmp((const char*) pcParameterString5, "backward",xParameterStringLength5))
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d007      	beq.n	8006dba <scastCommand+0xea>
	else if (!strncmp((const char*) pcParameterString5, "bidirectional",xParameterStringLength5))
 8006daa:	0032      	movs	r2, r6
 8006dac:	4925      	ldr	r1, [pc, #148]	; (8006e44 <scastCommand+0x174>)
 8006dae:	9807      	ldr	r0, [sp, #28]
 8006db0:	f00d fde6 	bl	8014980 <strncmp>
		direction = BIDIRECTIONAL;
 8006db4:	4243      	negs	r3, r0
 8006db6:	4158      	adcs	r0, r3
 8006db8:	0045      	lsls	r5, r0, #1
	strncpy(par3, (char*) pcParameterString5, xParameterStringLength5);
 8006dba:	0032      	movs	r2, r6
 8006dbc:	9907      	ldr	r1, [sp, #28]
 8006dbe:	a80a      	add	r0, sp, #40	; 0x28
 8006dc0:	f00d fdef 	bl	80149a2 <strncpy>
	pcParameterString6 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 6,&xParameterStringLength6);
 8006dc4:	aa14      	add	r2, sp, #80	; 0x50
 8006dc6:	2106      	movs	r1, #6
 8006dc8:	0020      	movs	r0, r4
 8006dca:	f007 fbc9 	bl	800e560 <FreeRTOS_CLIGetParameter>
	count = (uint32_t) atol((char*) pcParameterString6);
 8006dce:	f00c fdba 	bl	8013946 <atol>
 8006dd2:	0006      	movs	r6, r0
	pcParameterString7 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 7,&xParameterStringLength7);
 8006dd4:	aa13      	add	r2, sp, #76	; 0x4c
 8006dd6:	2107      	movs	r1, #7
 8006dd8:	0020      	movs	r0, r4
 8006dda:	f007 fbc1 	bl	800e560 <FreeRTOS_CLIGetParameter>
	timeout = (uint32_t) atol((char*) pcParameterString7);
 8006dde:	f00c fdb2 	bl	8013946 <atol>
 8006de2:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count,timeout, false);
 8006de4:	2300      	movs	r3, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	9002      	str	r0, [sp, #8]
 8006dea:	9601      	str	r6, [sp, #4]
 8006dec:	9500      	str	r5, [sp, #0]
 8006dee:	465b      	mov	r3, fp
 8006df0:	003a      	movs	r2, r7
 8006df2:	4651      	mov	r1, sl
 8006df4:	9808      	ldr	r0, [sp, #32]
 8006df6:	f002 fc81 	bl	80096fc <StartScastDMAStream>
	if (result == BOS_OK) {
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d010      	beq.n	8006e20 <scastCommand+0x150>
}
 8006dfe:	2000      	movs	r0, #0
 8006e00:	b01b      	add	sp, #108	; 0x6c
 8006e02:	bc0c      	pop	{r2, r3}
 8006e04:	4692      	mov	sl, r2
 8006e06:	469b      	mov	fp, r3
 8006e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP = (uint8_t) atol((char*) pcParameterString1 + 1);
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	f00c fd9b 	bl	8013946 <atol>
 8006e10:	b2c3      	uxtb	r3, r0
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	e78b      	b.n	8006d2e <scastCommand+0x5e>
		dstP = (uint8_t) atol((char*) pcParameterString3 + 1);
 8006e16:	3001      	adds	r0, #1
 8006e18:	f00c fd95 	bl	8013946 <atol>
 8006e1c:	b2c7      	uxtb	r7, r0
 8006e1e:	e79f      	b.n	8006d60 <scastCommand+0x90>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, par3, srcP, par1,dstP, par2, count, timeout);
 8006e20:	9404      	str	r4, [sp, #16]
 8006e22:	9603      	str	r6, [sp, #12]
 8006e24:	ab0d      	add	r3, sp, #52	; 0x34
 8006e26:	9302      	str	r3, [sp, #8]
 8006e28:	9701      	str	r7, [sp, #4]
 8006e2a:	ab10      	add	r3, sp, #64	; 0x40
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	9b08      	ldr	r3, [sp, #32]
 8006e30:	aa0a      	add	r2, sp, #40	; 0x28
 8006e32:	4905      	ldr	r1, [pc, #20]	; (8006e48 <scastCommand+0x178>)
 8006e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e36:	f00d fd5f 	bl	80148f8 <siprintf>
 8006e3a:	e7e0      	b.n	8006dfe <scastCommand+0x12e>
 8006e3c:	08018c64 	.word	0x08018c64
 8006e40:	08018c6c 	.word	0x08018c6c
 8006e44:	08018c78 	.word	0x08018c78
 8006e48:	08018c88 	.word	0x08018c88

08006e4c <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006e52:	d039      	beq.n	8006ec8 <infoCommand+0x7c>
	if (N > 1)
 8006e54:	4b26      	ldr	r3, [pc, #152]	; (8006ef0 <infoCommand+0xa4>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
 8006e58:	2500      	movs	r5, #0
	if (N > 1)
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d902      	bls.n	8006e64 <infoCommand+0x18>
		result = ReadPortsDir();
 8006e5e:	f7fd fb07 	bl	8004470 <ReadPortsDir>
 8006e62:	0005      	movs	r5, r0
	sprintf((char*) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8006e64:	4b22      	ldr	r3, [pc, #136]	; (8006ef0 <infoCommand+0xa4>)
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	4922      	ldr	r1, [pc, #136]	; (8006ef4 <infoCommand+0xa8>)
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	f00d fd44 	bl	80148f8 <siprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer),
 8006e70:	0020      	movs	r0, r4
 8006e72:	f7f9 f951 	bl	8000118 <strlen>
 8006e76:	b282      	uxth	r2, r0
 8006e78:	4e1f      	ldr	r6, [pc, #124]	; (8006ef8 <infoCommand+0xac>)
 8006e7a:	7830      	ldrb	r0, [r6, #0]
 8006e7c:	2701      	movs	r7, #1
 8006e7e:	427f      	negs	r7, r7
 8006e80:	9700      	str	r7, [sp, #0]
 8006e82:	2332      	movs	r3, #50	; 0x32
 8006e84:	0021      	movs	r1, r4
 8006e86:	f007 f925 	bl	800e0d4 <writePxMutex>
	sprintf((char*) pcWriteBuffer, "\n\rArray topology:\n");
 8006e8a:	2213      	movs	r2, #19
 8006e8c:	491b      	ldr	r1, [pc, #108]	; (8006efc <infoCommand+0xb0>)
 8006e8e:	0020      	movs	r0, r4
 8006e90:	f00c fdcb 	bl	8013a2a <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer),
 8006e94:	0020      	movs	r0, r4
 8006e96:	f7f9 f93f 	bl	8000118 <strlen>
 8006e9a:	b282      	uxth	r2, r0
 8006e9c:	7830      	ldrb	r0, [r6, #0]
 8006e9e:	9700      	str	r7, [sp, #0]
 8006ea0:	2332      	movs	r3, #50	; 0x32
 8006ea2:	0021      	movs	r1, r4
 8006ea4:	f007 f916 	bl	800e0d4 <writePxMutex>
	DisplayTopology(PcPort);
 8006ea8:	7830      	ldrb	r0, [r6, #0]
 8006eaa:	f7fc fee9 	bl	8003c80 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006eae:	7830      	ldrb	r0, [r6, #0]
 8006eb0:	f7fc ffb6 	bl	8003e20 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8006eb4:	2d02      	cmp	r5, #2
 8006eb6:	d009      	beq.n	8006ecc <infoCommand+0x80>
	sprintf((char*) pcWriteBuffer, " ");
 8006eb8:	2202      	movs	r2, #2
 8006eba:	4911      	ldr	r1, [pc, #68]	; (8006f00 <infoCommand+0xb4>)
 8006ebc:	0020      	movs	r0, r4
 8006ebe:	f00c fdb4 	bl	8013a2a <memcpy>
}
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	b003      	add	sp, #12
 8006ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ec8:	b672      	cpsid	i
 8006eca:	e7fe      	b.n	8006eca <infoCommand+0x7e>
		sprintf((char*) pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006ecc:	2244      	movs	r2, #68	; 0x44
 8006ece:	490d      	ldr	r1, [pc, #52]	; (8006f04 <infoCommand+0xb8>)
 8006ed0:	0020      	movs	r0, r4
 8006ed2:	f00c fdaa 	bl	8013a2a <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8006ed6:	0020      	movs	r0, r4
 8006ed8:	f7f9 f91e 	bl	8000118 <strlen>
 8006edc:	b282      	uxth	r2, r0
 8006ede:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <infoCommand+0xac>)
 8006ee0:	7818      	ldrb	r0, [r3, #0]
 8006ee2:	003b      	movs	r3, r7
 8006ee4:	9700      	str	r7, [sp, #0]
 8006ee6:	3333      	adds	r3, #51	; 0x33
 8006ee8:	0021      	movs	r1, r4
 8006eea:	f007 f8f3 	bl	800e0d4 <writePxMutex>
 8006eee:	e7e3      	b.n	8006eb8 <infoCommand+0x6c>
 8006ef0:	2000001c 	.word	0x2000001c
 8006ef4:	08018a20 	.word	0x08018a20
 8006ef8:	2000029f 	.word	0x2000029f
 8006efc:	08018a3c 	.word	0x08018a3c
 8006f00:	080179dc 	.word	0x080179dc
 8006f04:	08018a50 	.word	0x08018a50

08006f08 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8006f08:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d101      	bne.n	8006f12 <statusCommand+0xa>
 8006f0e:	b672      	cpsid	i
 8006f10:	e7fe      	b.n	8006f10 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006f12:	2000      	movs	r0, #0
 8006f14:	f7fc fff8 	bl	8003f08 <DisplayModuleStatus>
}
 8006f18:	2000      	movs	r0, #0
 8006f1a:	bd10      	pop	{r4, pc}

08006f1c <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 8006f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1e:	46ce      	mov	lr, r9
 8006f20:	b500      	push	{lr}
 8006f22:	b090      	sub	sp, #64	; 0x40
 8006f24:	0004      	movs	r4, r0
 8006f26:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] = { 0 };
 8006f28:	2227      	movs	r2, #39	; 0x27
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	a806      	add	r0, sp, #24
 8006f2e:	f00c fd85 	bl	8013a3c <memset>
	char alias[MaxLengthOfAlias + 1] = { 0 };
 8006f32:	220a      	movs	r2, #10
 8006f34:	2100      	movs	r1, #0
 8006f36:	a803      	add	r0, sp, #12
 8006f38:	f00c fd80 	bl	8013a3c <memset>
	configASSERT(pcWriteBuffer);
 8006f3c:	2c00      	cmp	r4, #0
 8006f3e:	d101      	bne.n	8006f44 <groupCommand+0x28>
 8006f40:	b672      	cpsid	i
 8006f42:	e7fe      	b.n	8006f42 <groupCommand+0x26>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 8006f44:	4d54      	ldr	r5, [pc, #336]	; (8007098 <groupCommand+0x17c>)
 8006f46:	002a      	movs	r2, r5
 8006f48:	2101      	movs	r1, #1
 8006f4a:	9801      	ldr	r0, [sp, #4]
 8006f4c:	f007 fb08 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006f50:	0001      	movs	r1, r0
	strncpy(alias, (char*) pcParameterString1, xParameterStringLength1);
 8006f52:	682a      	ldr	r2, [r5, #0]
 8006f54:	a803      	add	r0, sp, #12
 8006f56:	f00d fd24 	bl	80149a2 <strncpy>
 8006f5a:	4d50      	ldr	r5, [pc, #320]	; (800709c <groupCommand+0x180>)
 8006f5c:	002f      	movs	r7, r5
 8006f5e:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i])) {
 8006f60:	0029      	movs	r1, r5
 8006f62:	a803      	add	r0, sp, #12
 8006f64:	f7f9 f8ce 	bl	8000104 <strcmp>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d016      	beq.n	8006f9a <groupCommand+0x7e>
 8006f6c:	350a      	adds	r5, #10
	for (uint8_t i = 0; i < MaxNumOfGroups; i++) {
 8006f6e:	42bd      	cmp	r5, r7
 8006f70:	d1f6      	bne.n	8006f60 <groupCommand+0x44>
	type = 1;
 8006f72:	2701      	movs	r7, #1
	count = 2;
 8006f74:	4b4a      	ldr	r3, [pc, #296]	; (80070a0 <groupCommand+0x184>)
 8006f76:	2202      	movs	r2, #2
 8006f78:	701a      	strb	r2, [r3, #0]
	strcpy((char*) pcWriteBuffer, "Modules [");
 8006f7a:	3208      	adds	r2, #8
 8006f7c:	4949      	ldr	r1, [pc, #292]	; (80070a4 <groupCommand+0x188>)
 8006f7e:	0020      	movs	r0, r4
 8006f80:	f00c fd53 	bl	8013a2a <memcpy>
	pcParameterString = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,count, &xParameterStringLength);
 8006f84:	4a48      	ldr	r2, [pc, #288]	; (80070a8 <groupCommand+0x18c>)
 8006f86:	2102      	movs	r1, #2
 8006f88:	9801      	ldr	r0, [sp, #4]
 8006f8a:	f007 fae9 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006f8e:	4b47      	ldr	r3, [pc, #284]	; (80070ac <groupCommand+0x190>)
 8006f90:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL) {
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d061      	beq.n	800705a <groupCommand+0x13e>
		strncpy(module, (char*) pcParameterString, xParameterStringLength);
 8006f96:	4e44      	ldr	r6, [pc, #272]	; (80070a8 <groupCommand+0x18c>)
 8006f98:	e011      	b.n	8006fbe <groupCommand+0xa2>
			type = 0;
 8006f9a:	2700      	movs	r7, #0
 8006f9c:	e7ea      	b.n	8006f74 <groupCommand+0x58>
		strcat((char*) pcWriteBuffer, module);
 8006f9e:	a906      	add	r1, sp, #24
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	f00d fcc9 	bl	8014938 <strcat>
		pcParameterString = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString,++count, &xParameterStringLength);
 8006fa6:	1c69      	adds	r1, r5, #1
 8006fa8:	b249      	sxtb	r1, r1
 8006faa:	4b3d      	ldr	r3, [pc, #244]	; (80070a0 <groupCommand+0x184>)
 8006fac:	7019      	strb	r1, [r3, #0]
 8006fae:	4a3e      	ldr	r2, [pc, #248]	; (80070a8 <groupCommand+0x18c>)
 8006fb0:	9801      	ldr	r0, [sp, #4]
 8006fb2:	f007 fad5 	bl	800e560 <FreeRTOS_CLIGetParameter>
 8006fb6:	4b3d      	ldr	r3, [pc, #244]	; (80070ac <groupCommand+0x190>)
 8006fb8:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL) {
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d04d      	beq.n	800705a <groupCommand+0x13e>
		strncpy(module, (char*) pcParameterString, xParameterStringLength);
 8006fbe:	6833      	ldr	r3, [r6, #0]
 8006fc0:	4699      	mov	r9, r3
 8006fc2:	ad06      	add	r5, sp, #24
 8006fc4:	001a      	movs	r2, r3
 8006fc6:	0001      	movs	r1, r0
 8006fc8:	0028      	movs	r0, r5
 8006fca:	f00d fcea 	bl	80149a2 <strncpy>
		module[xParameterStringLength] = '\0';
 8006fce:	2300      	movs	r3, #0
 8006fd0:	464a      	mov	r2, r9
 8006fd2:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 8006fd4:	0028      	movs	r0, r5
 8006fd6:	f7fd f8f7 	bl	80041c8 <GetID>
		if (modID < 0)
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	db37      	blt.n	800704e <groupCommand+0x132>
		result = AddModuleToGroup(modID, alias);
 8006fde:	b2c0      	uxtb	r0, r0
 8006fe0:	a903      	add	r1, sp, #12
 8006fe2:	f7fd f9bd 	bl	8004360 <AddModuleToGroup>
		if (result != BOS_OK)
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d146      	bne.n	8007078 <groupCommand+0x15c>
		if (count > 2)
 8006fea:	4b2d      	ldr	r3, [pc, #180]	; (80070a0 <groupCommand+0x184>)
 8006fec:	2500      	movs	r5, #0
 8006fee:	575d      	ldrsb	r5, [r3, r5]
 8006ff0:	2d02      	cmp	r5, #2
 8006ff2:	ddd4      	ble.n	8006f9e <groupCommand+0x82>
			strcat((char*) pcWriteBuffer, ", ");
 8006ff4:	0020      	movs	r0, r4
 8006ff6:	f7f9 f88f 	bl	8000118 <strlen>
 8006ffa:	1820      	adds	r0, r4, r0
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	492c      	ldr	r1, [pc, #176]	; (80070b0 <groupCommand+0x194>)
 8007000:	f00c fd13 	bl	8013a2a <memcpy>
 8007004:	e7cb      	b.n	8006f9e <groupCommand+0x82>
	else if (result == BOS_OK && type) {
 8007006:	2f00      	cmp	r7, #0
 8007008:	d009      	beq.n	800701e <groupCommand+0x102>
		sprintf(module, (char*) pcMessageOKnew, alias);
 800700a:	aa03      	add	r2, sp, #12
 800700c:	4929      	ldr	r1, [pc, #164]	; (80070b4 <groupCommand+0x198>)
 800700e:	a806      	add	r0, sp, #24
 8007010:	f00d fc72 	bl	80148f8 <siprintf>
		strcat((char*) pcWriteBuffer, module);
 8007014:	a906      	add	r1, sp, #24
 8007016:	0020      	movs	r0, r4
 8007018:	f00d fc8e 	bl	8014938 <strcat>
 800701c:	e027      	b.n	800706e <groupCommand+0x152>
		sprintf(module, (char*) pcMessageOKexist, alias);
 800701e:	aa03      	add	r2, sp, #12
 8007020:	4925      	ldr	r1, [pc, #148]	; (80070b8 <groupCommand+0x19c>)
 8007022:	a806      	add	r0, sp, #24
 8007024:	f00d fc68 	bl	80148f8 <siprintf>
		strcat((char*) pcWriteBuffer, module);
 8007028:	a906      	add	r1, sp, #24
 800702a:	0020      	movs	r0, r4
 800702c:	f00d fc84 	bl	8014938 <strcat>
 8007030:	e01d      	b.n	800706e <groupCommand+0x152>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageKey, alias);
 8007032:	aa03      	add	r2, sp, #12
 8007034:	4921      	ldr	r1, [pc, #132]	; (80070bc <groupCommand+0x1a0>)
 8007036:	0020      	movs	r0, r4
 8007038:	f00d fc5e 	bl	80148f8 <siprintf>
 800703c:	e017      	b.n	800706e <groupCommand+0x152>
	else if (result == BOS_ERR_ExistingCmd)
 800703e:	2808      	cmp	r0, #8
 8007040:	d115      	bne.n	800706e <groupCommand+0x152>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageCmd, alias);
 8007042:	aa03      	add	r2, sp, #12
 8007044:	491e      	ldr	r1, [pc, #120]	; (80070c0 <groupCommand+0x1a4>)
 8007046:	0020      	movs	r0, r4
 8007048:	f00d fc56 	bl	80148f8 <siprintf>
 800704c:	e00f      	b.n	800706e <groupCommand+0x152>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageWrongModule, module);
 800704e:	aa06      	add	r2, sp, #24
 8007050:	491c      	ldr	r1, [pc, #112]	; (80070c4 <groupCommand+0x1a8>)
 8007052:	0020      	movs	r0, r4
 8007054:	f00d fc50 	bl	80148f8 <siprintf>
	return pdFALSE;
 8007058:	e009      	b.n	800706e <groupCommand+0x152>
	else if (count == 2)
 800705a:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <groupCommand+0x184>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	b25b      	sxtb	r3, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d1d0      	bne.n	8007006 <groupCommand+0xea>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageNoModules, alias);
 8007064:	aa03      	add	r2, sp, #12
 8007066:	4918      	ldr	r1, [pc, #96]	; (80070c8 <groupCommand+0x1ac>)
 8007068:	0020      	movs	r0, r4
 800706a:	f00d fc45 	bl	80148f8 <siprintf>
}
 800706e:	2000      	movs	r0, #0
 8007070:	b010      	add	sp, #64	; 0x40
 8007072:	bc04      	pop	{r2}
 8007074:	4691      	mov	r9, r2
 8007076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 8007078:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <groupCommand+0x184>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	b25b      	sxtb	r3, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d0f0      	beq.n	8007064 <groupCommand+0x148>
	} else if (result == BOS_ERR_Keyword)
 8007082:	2806      	cmp	r0, #6
 8007084:	d0d5      	beq.n	8007032 <groupCommand+0x116>
	else if (result == BOS_ERR_ExistingAlias)
 8007086:	2807      	cmp	r0, #7
 8007088:	d1d9      	bne.n	800703e <groupCommand+0x122>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageAlias, alias);
 800708a:	aa03      	add	r2, sp, #12
 800708c:	490f      	ldr	r1, [pc, #60]	; (80070cc <groupCommand+0x1b0>)
 800708e:	0020      	movs	r0, r4
 8007090:	f00d fc32 	bl	80148f8 <siprintf>
 8007094:	e7eb      	b.n	800706e <groupCommand+0x152>
 8007096:	46c0      	nop			; (mov r8, r8)
 8007098:	20000aa4 	.word	0x20000aa4
 800709c:	2000064c 	.word	0x2000064c
 80070a0:	20000a6a 	.word	0x20000a6a
 80070a4:	08018840 	.word	0x08018840
 80070a8:	20000a98 	.word	0x20000a98
 80070ac:	20000a6c 	.word	0x20000a6c
 80070b0:	0801884c 	.word	0x0801884c
 80070b4:	0801887c 	.word	0x0801887c
 80070b8:	08018898 	.word	0x08018898
 80070bc:	080188b8 	.word	0x080188b8
 80070c0:	0801892c 	.word	0x0801892c
 80070c4:	0801896c 	.word	0x0801896c
 80070c8:	08018850 	.word	0x08018850
 80070cc:	080188f8 	.word	0x080188f8

080070d0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	0004      	movs	r4, r0
 80070d4:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	d101      	bne.n	80070de <nameCommand+0xe>
 80070da:	b672      	cpsid	i
 80070dc:	e7fe      	b.n	80070dc <nameCommand+0xc>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 80070de:	4d1c      	ldr	r5, [pc, #112]	; (8007150 <nameCommand+0x80>)
 80070e0:	002a      	movs	r2, r5
 80070e2:	2101      	movs	r1, #1
 80070e4:	f007 fa3c 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80070e8:	0001      	movs	r1, r0
 80070ea:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <nameCommand+0x84>)
 80070ec:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 80070ee:	682b      	ldr	r3, [r5, #0]
 80070f0:	2b09      	cmp	r3, #9
 80070f2:	dd01      	ble.n	80070f8 <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80070f4:	2300      	movs	r3, #0
 80070f6:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 80070f8:	4b17      	ldr	r3, [pc, #92]	; (8007158 <nameCommand+0x88>)
 80070fa:	7818      	ldrb	r0, [r3, #0]
 80070fc:	f7fd f8c8 	bl	8004290 <NameModule>
	if (result == BOS_OK)
 8007100:	2800      	cmp	r0, #0
 8007102:	d007      	beq.n	8007114 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 8007104:	2806      	cmp	r0, #6
 8007106:	d00e      	beq.n	8007126 <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 8007108:	2807      	cmp	r0, #7
 800710a:	d013      	beq.n	8007134 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 800710c:	2808      	cmp	r0, #8
 800710e:	d018      	beq.n	8007142 <nameCommand+0x72>
}
 8007110:	2000      	movs	r0, #0
 8007112:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char*) pcWriteBuffer, (char*) pcMessageOK, myID,pcParameterString1);
 8007114:	4b10      	ldr	r3, [pc, #64]	; (8007158 <nameCommand+0x88>)
 8007116:	781a      	ldrb	r2, [r3, #0]
 8007118:	4b0e      	ldr	r3, [pc, #56]	; (8007154 <nameCommand+0x84>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	490f      	ldr	r1, [pc, #60]	; (800715c <nameCommand+0x8c>)
 800711e:	0020      	movs	r0, r4
 8007120:	f00d fbea 	bl	80148f8 <siprintf>
 8007124:	e7f4      	b.n	8007110 <nameCommand+0x40>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageKey,pcParameterString1);
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <nameCommand+0x84>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	490d      	ldr	r1, [pc, #52]	; (8007160 <nameCommand+0x90>)
 800712c:	0020      	movs	r0, r4
 800712e:	f00d fbe3 	bl	80148f8 <siprintf>
 8007132:	e7ed      	b.n	8007110 <nameCommand+0x40>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageAlias,pcParameterString1);
 8007134:	4b07      	ldr	r3, [pc, #28]	; (8007154 <nameCommand+0x84>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	490a      	ldr	r1, [pc, #40]	; (8007164 <nameCommand+0x94>)
 800713a:	0020      	movs	r0, r4
 800713c:	f00d fbdc 	bl	80148f8 <siprintf>
 8007140:	e7e6      	b.n	8007110 <nameCommand+0x40>
		sprintf((char*) pcWriteBuffer, (char*) pcMessageCmd,pcParameterString1);
 8007142:	4b04      	ldr	r3, [pc, #16]	; (8007154 <nameCommand+0x84>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4908      	ldr	r1, [pc, #32]	; (8007168 <nameCommand+0x98>)
 8007148:	0020      	movs	r0, r4
 800714a:	f00d fbd5 	bl	80148f8 <siprintf>
 800714e:	e7df      	b.n	8007110 <nameCommand+0x40>
 8007150:	20000aa0 	.word	0x20000aa0
 8007154:	20000a70 	.word	0x20000a70
 8007158:	20000866 	.word	0x20000866
 800715c:	08018ab8 	.word	0x08018ab8
 8007160:	080188b8 	.word	0x080188b8
 8007164:	080188f8 	.word	0x080188f8
 8007168:	0801892c 	.word	0x0801892c

0800716c <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800716c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716e:	b085      	sub	sp, #20
 8007170:	1e04      	subs	r4, r0, #0
 8007172:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007174:	d101      	bne.n	800717a <bootloaderUpdateCommand+0xe>
 8007176:	b672      	cpsid	i
 8007178:	e7fe      	b.n	8007178 <bootloaderUpdateCommand+0xc>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,&xParameterStringLength1);
 800717a:	4a4b      	ldr	r2, [pc, #300]	; (80072a8 <bootloaderUpdateCommand+0x13c>)
 800717c:	2101      	movs	r1, #1
 800717e:	9803      	ldr	r0, [sp, #12]
 8007180:	f007 f9ee 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL) {
 8007184:	2800      	cmp	r0, #0
 8007186:	d040      	beq.n	800720a <bootloaderUpdateCommand+0x9e>
		if (!strncmp((const char*) pcParameterString1, "via",
 8007188:	4b47      	ldr	r3, [pc, #284]	; (80072a8 <bootloaderUpdateCommand+0x13c>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4947      	ldr	r1, [pc, #284]	; (80072ac <bootloaderUpdateCommand+0x140>)
 800718e:	f00d fbf7 	bl	8014980 <strncmp>
 8007192:	2800      	cmp	r0, #0
 8007194:	d000      	beq.n	8007198 <bootloaderUpdateCommand+0x2c>
 8007196:	e080      	b.n	800729a <bootloaderUpdateCommand+0x12e>
			pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameterStringLength2);
 8007198:	4a45      	ldr	r2, [pc, #276]	; (80072b0 <bootloaderUpdateCommand+0x144>)
 800719a:	2102      	movs	r1, #2
 800719c:	9803      	ldr	r0, [sp, #12]
 800719e:	f007 f9df 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80071a2:	4f44      	ldr	r7, [pc, #272]	; (80072b4 <bootloaderUpdateCommand+0x148>)
 80071a4:	6038      	str	r0, [r7, #0]
			pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3, &xParameterStringLength3);
 80071a6:	4a44      	ldr	r2, [pc, #272]	; (80072b8 <bootloaderUpdateCommand+0x14c>)
 80071a8:	2103      	movs	r1, #3
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	f007 f9d8 	bl	800e560 <FreeRTOS_CLIGetParameter>
 80071b0:	4b42      	ldr	r3, [pc, #264]	; (80072bc <bootloaderUpdateCommand+0x150>)
 80071b2:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 80071b4:	6838      	ldr	r0, [r7, #0]
 80071b6:	2300      	movs	r3, #0
 80071b8:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;
 80071ba:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 80071bc:	2b23      	cmp	r3, #35	; 0x23
 80071be:	d04e      	beq.n	800725e <bootloaderUpdateCommand+0xf2>
			if (pcParameterString3[0] == 'p') {
 80071c0:	4b3e      	ldr	r3, [pc, #248]	; (80072bc <bootloaderUpdateCommand+0x150>)
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	56c3      	ldrsb	r3, [r0, r3]
 80071c8:	2b70      	cmp	r3, #112	; 0x70
 80071ca:	d04e      	beq.n	800726a <bootloaderUpdateCommand+0xfe>
				result = BOS_ERR_WrongValue;
 80071cc:	2768      	movs	r7, #104	; 0x68
			if (module != myID) {
 80071ce:	4b3c      	ldr	r3, [pc, #240]	; (80072c0 <bootloaderUpdateCommand+0x154>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	42b3      	cmp	r3, r6
 80071d4:	d04e      	beq.n	8007274 <bootloaderUpdateCommand+0x108>
				BOS.response = BOS_RESPONSE_NONE;
 80071d6:	4b3b      	ldr	r3, [pc, #236]	; (80072c4 <bootloaderUpdateCommand+0x158>)
 80071d8:	2200      	movs	r2, #0
 80071da:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port;
 80071dc:	4b3a      	ldr	r3, [pc, #232]	; (80072c8 <bootloaderUpdateCommand+0x15c>)
 80071de:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 80071e0:	3201      	adds	r2, #1
 80071e2:	211a      	movs	r1, #26
 80071e4:	0030      	movs	r0, r6
 80071e6:	f002 fa63 	bl	80096b0 <SendMessageToModule>
				osDelay(100);
 80071ea:	2064      	movs	r0, #100	; 0x64
 80071ec:	f007 f89f 	bl	800e32e <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);
 80071f0:	4b36      	ldr	r3, [pc, #216]	; (80072cc <bootloaderUpdateCommand+0x160>)
 80071f2:	781a      	ldrb	r2, [r3, #0]
 80071f4:	4b32      	ldr	r3, [pc, #200]	; (80072c0 <bootloaderUpdateCommand+0x154>)
 80071f6:	7818      	ldrb	r0, [r3, #0]
 80071f8:	002b      	movs	r3, r5
 80071fa:	0031      	movs	r1, r6
 80071fc:	f7fc fcbe 	bl	8003b7c <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 8007200:	2f68      	cmp	r7, #104	; 0x68
 8007202:	d04a      	beq.n	800729a <bootloaderUpdateCommand+0x12e>
}
 8007204:	2000      	movs	r0, #0
 8007206:	b005      	add	sp, #20
 8007208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char*) pcWriteBuffer, (char*) pcMessage, myID);
 800720a:	4b2d      	ldr	r3, [pc, #180]	; (80072c0 <bootloaderUpdateCommand+0x154>)
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	4930      	ldr	r1, [pc, #192]	; (80072d0 <bootloaderUpdateCommand+0x164>)
 8007210:	0020      	movs	r0, r4
 8007212:	f00d fb71 	bl	80148f8 <siprintf>
		strcat((char*) pcWriteBuffer, (char*) pcBootloaderUpdateMessage);
 8007216:	4b2f      	ldr	r3, [pc, #188]	; (80072d4 <bootloaderUpdateCommand+0x168>)
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	0020      	movs	r0, r4
 800721c:	f00d fb8c 	bl	8014938 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer,strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8007220:	0020      	movs	r0, r4
 8007222:	f7f8 ff79 	bl	8000118 <strlen>
 8007226:	b282      	uxth	r2, r0
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <bootloaderUpdateCommand+0x160>)
 800722a:	7818      	ldrb	r0, [r3, #0]
 800722c:	2301      	movs	r3, #1
 800722e:	425b      	negs	r3, r3
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	3333      	adds	r3, #51	; 0x33
 8007234:	0021      	movs	r1, r4
 8007236:	f006 ff4d 	bl	800e0d4 <writePxMutex>
		*((unsigned long*) 0x20007FF0) = 0xDEADBEEF;
 800723a:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <bootloaderUpdateCommand+0x16c>)
 800723c:	4a27      	ldr	r2, [pc, #156]	; (80072dc <bootloaderUpdateCommand+0x170>)
 800723e:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 8007240:	4b27      	ldr	r3, [pc, #156]	; (80072e0 <bootloaderUpdateCommand+0x174>)
 8007242:	2201      	movs	r2, #1
 8007244:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007246:	200a      	movs	r0, #10
 8007248:	f007 f871 	bl	800e32e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <bootloaderUpdateCommand+0x178>)
 8007252:	4a25      	ldr	r2, [pc, #148]	; (80072e8 <bootloaderUpdateCommand+0x17c>)
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	e7fd      	b.n	800725a <bootloaderUpdateCommand+0xee>
				module = (uint8_t) atol((char*) pcParameterString2 + 1);
 800725e:	3001      	adds	r0, #1
 8007260:	f00c fb71 	bl	8013946 <atol>
 8007264:	b2c6      	uxtb	r6, r0
	BOS_Status result = BOS_OK;
 8007266:	2700      	movs	r7, #0
 8007268:	e7aa      	b.n	80071c0 <bootloaderUpdateCommand+0x54>
				port = (uint8_t) atol((char*) pcParameterString3 + 1);
 800726a:	3001      	adds	r0, #1
 800726c:	f00c fb6b 	bl	8013946 <atol>
 8007270:	b2c5      	uxtb	r5, r0
 8007272:	e7ac      	b.n	80071ce <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8007274:	2100      	movs	r1, #0
 8007276:	9100      	str	r1, [sp, #0]
 8007278:	2319      	movs	r3, #25
 800727a:	000a      	movs	r2, r1
 800727c:	0028      	movs	r0, r5
 800727e:	f001 ffef 	bl	8009260 <SendMessageFromPort>
				osDelay(100);
 8007282:	2064      	movs	r0, #100	; 0x64
 8007284:	f007 f853 	bl	800e32e <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);
 8007288:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <bootloaderUpdateCommand+0x154>)
 800728a:	7818      	ldrb	r0, [r3, #0]
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <bootloaderUpdateCommand+0x160>)
 800728e:	781a      	ldrb	r2, [r3, #0]
 8007290:	002b      	movs	r3, r5
 8007292:	0001      	movs	r1, r0
 8007294:	f7fc fc72 	bl	8003b7c <remoteBootloaderUpdate>
 8007298:	e7b2      	b.n	8007200 <bootloaderUpdateCommand+0x94>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongValue);
 800729a:	220f      	movs	r2, #15
 800729c:	4913      	ldr	r1, [pc, #76]	; (80072ec <bootloaderUpdateCommand+0x180>)
 800729e:	0020      	movs	r0, r4
 80072a0:	f00c fbc3 	bl	8013a2a <memcpy>
 80072a4:	e7ae      	b.n	8007204 <bootloaderUpdateCommand+0x98>
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	20000a9c 	.word	0x20000a9c
 80072ac:	08018578 	.word	0x08018578
 80072b0:	20000aa8 	.word	0x20000aa8
 80072b4:	20000a80 	.word	0x20000a80
 80072b8:	20000aac 	.word	0x20000aac
 80072bc:	20000a88 	.word	0x20000a88
 80072c0:	20000866 	.word	0x20000866
 80072c4:	2000612c 	.word	0x2000612c
 80072c8:	20000728 	.word	0x20000728
 80072cc:	2000029f 	.word	0x2000029f
 80072d0:	08018558 	.word	0x08018558
 80072d4:	20000074 	.word	0x20000074
 80072d8:	20007ff0 	.word	0x20007ff0
 80072dc:	deadbeef 	.word	0xdeadbeef
 80072e0:	200006e4 	.word	0x200006e4
 80072e4:	e000ed00 	.word	0xe000ed00
 80072e8:	05fa0004 	.word	0x05fa0004
 80072ec:	08018638 	.word	0x08018638

080072f0 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,const int8_t *pcCommandString) {
 80072f0:	b570      	push	{r4, r5, r6, lr}
	configASSERT(pcWriteBuffer);
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d01e      	beq.n	8007334 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <pingCommand+0x5c>)
 80072f8:	781a      	ldrb	r2, [r3, #0]
 80072fa:	0093      	lsls	r3, r2, #2
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	4913      	ldr	r1, [pc, #76]	; (8007350 <pingCommand+0x60>)
 8007302:	5c5b      	ldrb	r3, [r3, r1]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d117      	bne.n	8007338 <pingCommand+0x48>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage1, myID);
 8007308:	4912      	ldr	r1, [pc, #72]	; (8007354 <pingCommand+0x64>)
 800730a:	f00d faf5 	bl	80148f8 <siprintf>
		RTOS_IND_blink(200);
 800730e:	2580      	movs	r5, #128	; 0x80
 8007310:	012d      	lsls	r5, r5, #4
 8007312:	2490      	movs	r4, #144	; 0x90
 8007314:	05e4      	lsls	r4, r4, #23
 8007316:	2201      	movs	r2, #1
 8007318:	0029      	movs	r1, r5
 800731a:	0020      	movs	r0, r4
 800731c:	f00a fd78 	bl	8011e10 <HAL_GPIO_WritePin>
 8007320:	20c8      	movs	r0, #200	; 0xc8
 8007322:	f007 f804 	bl	800e32e <osDelay>
 8007326:	2200      	movs	r2, #0
 8007328:	0029      	movs	r1, r5
 800732a:	0020      	movs	r0, r4
 800732c:	f00a fd70 	bl	8011e10 <HAL_GPIO_WritePin>
}
 8007330:	2000      	movs	r0, #0
 8007332:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(pcWriteBuffer);
 8007334:	b672      	cpsid	i
 8007336:	e7fe      	b.n	8007336 <pingCommand+0x46>
		sprintf((char*) pcWriteBuffer, (char*) pcMessage2, myID,moduleAlias[myID]);
 8007338:	0093      	lsls	r3, r2, #2
 800733a:	189b      	adds	r3, r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4904      	ldr	r1, [pc, #16]	; (8007350 <pingCommand+0x60>)
 8007340:	185b      	adds	r3, r3, r1
 8007342:	4905      	ldr	r1, [pc, #20]	; (8007358 <pingCommand+0x68>)
 8007344:	f00d fad8 	bl	80148f8 <siprintf>
 8007348:	e7e1      	b.n	800730e <pingCommand+0x1e>
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	20000866 	.word	0x20000866
 8007350:	20000758 	.word	0x20000758
 8007354:	08018b28 	.word	0x08018b28
 8007358:	08018b3c 	.word	0x08018b3c

0800735c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800735c:	b510      	push	{r4, lr}
 800735e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007360:	d101      	bne.n	8007366 <prvRunTimeStatsCommand+0xa>
 8007362:	b672      	cpsid	i
 8007364:	e7fe      	b.n	8007364 <prvRunTimeStatsCommand+0x8>
	strcpy((char*) pcWriteBuffer, (char*) pcStatsTableHeader);
 8007366:	2241      	movs	r2, #65	; 0x41
 8007368:	4904      	ldr	r1, [pc, #16]	; (800737c <prvRunTimeStatsCommand+0x20>)
 800736a:	f00c fb5e 	bl	8013a2a <memcpy>
	vTaskGetRunTimeStats(((char*) pcWriteBuffer) + strlen((char*) pcStatsTableHeader));
 800736e:	0020      	movs	r0, r4
 8007370:	3040      	adds	r0, #64	; 0x40
 8007372:	f008 fb49 	bl	800fa08 <vTaskGetRunTimeStats>
}
 8007376:	2000      	movs	r0, #0
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	08018b68 	.word	0x08018b68

08007380 <prvTaskStatsCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 8007380:	b510      	push	{r4, lr}
 8007382:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007384:	d101      	bne.n	800738a <prvTaskStatsCommand+0xa>
 8007386:	b672      	cpsid	i
 8007388:	e7fe      	b.n	8007388 <prvTaskStatsCommand+0x8>
	strcpy((char*) pcWriteBuffer, (char*) pcTaskTableHeader);
 800738a:	2250      	movs	r2, #80	; 0x50
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <prvTaskStatsCommand+0x20>)
 800738e:	f00c fb4c 	bl	8013a2a <memcpy>
	vTaskList(((char*) pcWriteBuffer) + strlen((char*) pcTaskTableHeader));
 8007392:	0020      	movs	r0, r4
 8007394:	304f      	adds	r0, #79	; 0x4f
 8007396:	f008 fad7 	bl	800f948 <vTaskList>
}
 800739a:	2000      	movs	r0, #0
 800739c:	bd10      	pop	{r4, pc}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	08018bbc 	.word	0x08018bbc

080073a4 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d101      	bne.n	80073ac <resetCommand+0x8>
 80073a8:	b672      	cpsid	i
 80073aa:	e7fe      	b.n	80073aa <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <resetCommand+0x1c>)
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <resetCommand+0x20>)
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	e7fd      	b.n	80073ba <resetCommand+0x16>
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	05fa0004 	.word	0x05fa0004

080073c8 <RegisterUserCLICommands>:
}
 80073c8:	4770      	bx	lr
	...

080073cc <vRegisterCLICommands>:
void vRegisterCLICommands(void) {
 80073cc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80073ce:	4835      	ldr	r0, [pc, #212]	; (80074a4 <vRegisterCLICommands+0xd8>)
 80073d0:	f007 f828 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80073d4:	4834      	ldr	r0, [pc, #208]	; (80074a8 <vRegisterCLICommands+0xdc>)
 80073d6:	f007 f825 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80073da:	4834      	ldr	r0, [pc, #208]	; (80074ac <vRegisterCLICommands+0xe0>)
 80073dc:	f007 f822 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80073e0:	4833      	ldr	r0, [pc, #204]	; (80074b0 <vRegisterCLICommands+0xe4>)
 80073e2:	f007 f81f 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80073e6:	4833      	ldr	r0, [pc, #204]	; (80074b4 <vRegisterCLICommands+0xe8>)
 80073e8:	f007 f81c 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80073ec:	4832      	ldr	r0, [pc, #200]	; (80074b8 <vRegisterCLICommands+0xec>)
 80073ee:	f007 f819 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80073f2:	4832      	ldr	r0, [pc, #200]	; (80074bc <vRegisterCLICommands+0xf0>)
 80073f4:	f007 f816 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073f8:	4831      	ldr	r0, [pc, #196]	; (80074c0 <vRegisterCLICommands+0xf4>)
 80073fa:	f007 f813 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073fe:	4831      	ldr	r0, [pc, #196]	; (80074c4 <vRegisterCLICommands+0xf8>)
 8007400:	f007 f810 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007404:	4830      	ldr	r0, [pc, #192]	; (80074c8 <vRegisterCLICommands+0xfc>)
 8007406:	f007 f80d 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800740a:	4830      	ldr	r0, [pc, #192]	; (80074cc <vRegisterCLICommands+0x100>)
 800740c:	f007 f80a 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007410:	482f      	ldr	r0, [pc, #188]	; (80074d0 <vRegisterCLICommands+0x104>)
 8007412:	f007 f807 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007416:	482f      	ldr	r0, [pc, #188]	; (80074d4 <vRegisterCLICommands+0x108>)
 8007418:	f007 f804 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800741c:	482e      	ldr	r0, [pc, #184]	; (80074d8 <vRegisterCLICommands+0x10c>)
 800741e:	f007 f801 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007422:	482e      	ldr	r0, [pc, #184]	; (80074dc <vRegisterCLICommands+0x110>)
 8007424:	f006 fffe 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007428:	482d      	ldr	r0, [pc, #180]	; (80074e0 <vRegisterCLICommands+0x114>)
 800742a:	f006 fffb 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800742e:	482d      	ldr	r0, [pc, #180]	; (80074e4 <vRegisterCLICommands+0x118>)
 8007430:	f006 fff8 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007434:	482c      	ldr	r0, [pc, #176]	; (80074e8 <vRegisterCLICommands+0x11c>)
 8007436:	f006 fff5 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800743a:	482c      	ldr	r0, [pc, #176]	; (80074ec <vRegisterCLICommands+0x120>)
 800743c:	f006 fff2 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007440:	482b      	ldr	r0, [pc, #172]	; (80074f0 <vRegisterCLICommands+0x124>)
 8007442:	f006 ffef 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007446:	482b      	ldr	r0, [pc, #172]	; (80074f4 <vRegisterCLICommands+0x128>)
 8007448:	f006 ffec 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800744c:	482a      	ldr	r0, [pc, #168]	; (80074f8 <vRegisterCLICommands+0x12c>)
 800744e:	f006 ffe9 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007452:	482a      	ldr	r0, [pc, #168]	; (80074fc <vRegisterCLICommands+0x130>)
 8007454:	f006 ffe6 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007458:	4829      	ldr	r0, [pc, #164]	; (8007500 <vRegisterCLICommands+0x134>)
 800745a:	f006 ffe3 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800745e:	4829      	ldr	r0, [pc, #164]	; (8007504 <vRegisterCLICommands+0x138>)
 8007460:	f006 ffe0 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007464:	4828      	ldr	r0, [pc, #160]	; (8007508 <vRegisterCLICommands+0x13c>)
 8007466:	f006 ffdd 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800746a:	4828      	ldr	r0, [pc, #160]	; (800750c <vRegisterCLICommands+0x140>)
 800746c:	f006 ffda 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007470:	4827      	ldr	r0, [pc, #156]	; (8007510 <vRegisterCLICommands+0x144>)
 8007472:	f006 ffd7 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007476:	4827      	ldr	r0, [pc, #156]	; (8007514 <vRegisterCLICommands+0x148>)
 8007478:	f006 ffd4 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800747c:	4826      	ldr	r0, [pc, #152]	; (8007518 <vRegisterCLICommands+0x14c>)
 800747e:	f006 ffd1 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007482:	4826      	ldr	r0, [pc, #152]	; (800751c <vRegisterCLICommands+0x150>)
 8007484:	f006 ffce 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007488:	4825      	ldr	r0, [pc, #148]	; (8007520 <vRegisterCLICommands+0x154>)
 800748a:	f006 ffcb 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800748e:	4825      	ldr	r0, [pc, #148]	; (8007524 <vRegisterCLICommands+0x158>)
 8007490:	f006 ffc8 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 35;
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <vRegisterCLICommands+0x15c>)
 8007496:	2223      	movs	r2, #35	; 0x23
 8007498:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800749a:	f004 f96f 	bl	800b77c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800749e:	f7ff ff93 	bl	80073c8 <RegisterUserCLICommands>
}
 80074a2:	bd10      	pop	{r4, pc}
 80074a4:	08018c0c 	.word	0x08018c0c
 80074a8:	08018bac 	.word	0x08018bac
 80074ac:	08018b58 	.word	0x08018b58
 80074b0:	0801857c 	.word	0x0801857c
 80074b4:	08018704 	.word	0x08018704
 80074b8:	08018c54 	.word	0x08018c54
 80074bc:	08018ad0 	.word	0x08018ad0
 80074c0:	08018990 	.word	0x08018990
 80074c4:	08019104 	.word	0x08019104
 80074c8:	08018a94 	.word	0x08018a94
 80074cc:	08018d10 	.word	0x08018d10
 80074d0:	08018548 	.word	0x08018548
 80074d4:	08018c44 	.word	0x08018c44
 80074d8:	08018f64 	.word	0x08018f64
 80074dc:	08018830 	.word	0x08018830
 80074e0:	08018688 	.word	0x08018688
 80074e4:	0801a12c 	.word	0x0801a12c
 80074e8:	080185f0 	.word	0x080185f0
 80074ec:	08018d5c 	.word	0x08018d5c
 80074f0:	0801a1a0 	.word	0x0801a1a0
 80074f4:	08018a10 	.word	0x08018a10
 80074f8:	08018734 	.word	0x08018734
 80074fc:	080190f4 	.word	0x080190f4
 8007500:	080184cc 	.word	0x080184cc
 8007504:	08018b18 	.word	0x08018b18
 8007508:	080186f4 	.word	0x080186f4
 800750c:	080185c8 	.word	0x080185c8
 8007510:	0801a178 	.word	0x0801a178
 8007514:	0801a0c0 	.word	0x0801a0c0
 8007518:	080183cc 	.word	0x080183cc
 800751c:	0801844c 	.word	0x0801844c
 8007520:	08018484 	.word	0x08018484
 8007524:	080183dc 	.word	0x080183dc
 8007528:	200060b0 	.word	0x200060b0

0800752c <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 800752c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 800752e:	1e45      	subs	r5, r0, #1
 8007530:	00ec      	lsls	r4, r5, #3
 8007532:	1b60      	subs	r0, r4, r5
 8007534:	00c0      	lsls	r0, r0, #3
 8007536:	4e05      	ldr	r6, [pc, #20]	; (800754c <StopMsgDMA+0x20>)
 8007538:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800753a:	f009 fd28 	bl	8010f8e <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800753e:	1b64      	subs	r4, r4, r5
 8007540:	00e4      	lsls	r4, r4, #3
 8007542:	59a3      	ldr	r3, [r4, r6]
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]
}
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	20000f30 	.word	0x20000f30

08007550 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 8007550:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 8007552:	1e44      	subs	r4, r0, #1
 8007554:	00e5      	lsls	r5, r4, #3
 8007556:	1b28      	subs	r0, r5, r4
 8007558:	00c0      	lsls	r0, r0, #3
 800755a:	4e07      	ldr	r6, [pc, #28]	; (8007578 <StopStreamDMA+0x28>)
 800755c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800755e:	f009 fd16 	bl	8010f8e <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 8007562:	1b2d      	subs	r5, r5, r4
 8007564:	00ed      	lsls	r5, r5, #3
 8007566:	59aa      	ldr	r2, [r5, r6]
 8007568:	2300      	movs	r3, #0
 800756a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 800756c:	00a4      	lsls	r4, r4, #2
 800756e:	4a03      	ldr	r2, [pc, #12]	; (800757c <StopStreamDMA+0x2c>)
 8007570:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8007572:	4a03      	ldr	r2, [pc, #12]	; (8007580 <StopStreamDMA+0x30>)
 8007574:	50a3      	str	r3, [r4, r2]

}
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	20001128 	.word	0x20001128
 800757c:	20000c38 	.word	0x20000c38
 8007580:	20000c60 	.word	0x20000c60

08007584 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8007584:	b510      	push	{r4, lr}
 8007586:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007588:	f7ff ffd0 	bl	800752c <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 800758c:	3c01      	subs	r4, #1
 800758e:	00e0      	lsls	r0, r4, #3
 8007590:	1b02      	subs	r2, r0, r4
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <SwitchMsgDMAToStream+0x20>)
 8007596:	5851      	ldr	r1, [r2, r1]
 8007598:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <SwitchMsgDMAToStream+0x24>)
 800759a:	18d0      	adds	r0, r2, r3
 800759c:	f004 fffa 	bl	800c594 <DMA_STREAM_CH_Init>
}
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	20000f30 	.word	0x20000f30
 80075a8:	20001128 	.word	0x20001128

080075ac <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 80075ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ae:	b083      	sub	sp, #12
 80075b0:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80075b2:	f7ff ffcd 	bl	8007550 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 80075b6:	9401      	str	r4, [sp, #4]
 80075b8:	3c01      	subs	r4, #1
 80075ba:	00e7      	lsls	r7, r4, #3
 80075bc:	1b3d      	subs	r5, r7, r4
 80075be:	00ed      	lsls	r5, r5, #3
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <SwitchStreamDMAToMsg+0x54>)
 80075c2:	18ed      	adds	r5, r5, r3
 80075c4:	4e0f      	ldr	r6, [pc, #60]	; (8007604 <SwitchStreamDMAToMsg+0x58>)
 80075c6:	1b3b      	subs	r3, r7, r4
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	5999      	ldr	r1, [r3, r6]
 80075cc:	0028      	movs	r0, r5
 80075ce:	f004 ff6b 	bl	800c4a8 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 80075d2:	1b3b      	subs	r3, r7, r4
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	18f3      	adds	r3, r6, r3
 80075d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80075da:	f004 f8eb 	bl	800b7b4 <GetPort>
 80075de:	2300      	movs	r3, #0
 80075e0:	4a09      	ldr	r2, [pc, #36]	; (8007608 <SwitchStreamDMAToMsg+0x5c>)
 80075e2:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 80075e4:	1b3f      	subs	r7, r7, r4
 80075e6:	00ff      	lsls	r7, r7, #3
 80075e8:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port-1] = 0;
 80075ea:	00a4      	lsls	r4, r4, #2
 80075ec:	4a07      	ldr	r2, [pc, #28]	; (800760c <SwitchStreamDMAToMsg+0x60>)
 80075ee:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 80075f0:	9801      	ldr	r0, [sp, #4]
 80075f2:	f006 fd51 	bl	800e098 <GetUart>
 80075f6:	0029      	movs	r1, r5
 80075f8:	f005 fbc0 	bl	800cd7c <DMA_MSG_RX_Setup>
		
}
 80075fc:	b003      	add	sp, #12
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007600:	20000f30 	.word	0x20000f30
 8007604:	20001128 	.word	0x20001128
 8007608:	200008e0 	.word	0x200008e0
 800760c:	20000c4c 	.word	0x20000c4c

08007610 <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	0005      	movs	r5, r0
 8007614:	000e      	movs	r6, r1
 8007616:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 8007618:	f004 f8cc 	bl	800b7b4 <GetPort>
 800761c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <StartDMAstream+0x44>)
 8007620:	5c1b      	ldrb	r3, [r3, r0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d902      	bls.n	800762c <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007626:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007628:	2b03      	cmp	r3, #3
 800762a:	d112      	bne.n	8007652 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800762c:	0020      	movs	r0, r4
 800762e:	f7ff ffa9 	bl	8007584 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 8007632:	1e63      	subs	r3, r4, #1
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4a08      	ldr	r2, [pc, #32]	; (8007658 <StartDMAstream+0x48>)
 8007638:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 800763a:	4a06      	ldr	r2, [pc, #24]	; (8007654 <StartDMAstream+0x44>)
 800763c:	2102      	movs	r1, #2
 800763e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 8007640:	4a06      	ldr	r2, [pc, #24]	; (800765c <StartDMAstream+0x4c>)
 8007642:	2100      	movs	r1, #0
 8007644:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 8007646:	003a      	movs	r2, r7
 8007648:	0031      	movs	r1, r6
 800764a:	0028      	movs	r0, r5
 800764c:	f005 fbf4 	bl	800ce38 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007650:	2000      	movs	r0, #0
}
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007654:	200008e0 	.word	0x200008e0
 8007658:	20000c4c 	.word	0x20000c4c
 800765c:	20000c38 	.word	0x20000c38

08007660 <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8007664:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <DMA_IRQHandler+0x50>)
 8007666:	5c1b      	ldrb	r3, [r3, r0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d008      	beq.n	800767e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 800766c:	3c01      	subs	r4, #1
 800766e:	00e0      	lsls	r0, r4, #3
 8007670:	1b00      	subs	r0, r0, r4
 8007672:	00c0      	lsls	r0, r0, #3
 8007674:	4c0f      	ldr	r4, [pc, #60]	; (80076b4 <DMA_IRQHandler+0x54>)
 8007676:	1900      	adds	r0, r0, r4
 8007678:	f009 fcb2 	bl	8010fe0 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 800767c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800767e:	1e45      	subs	r5, r0, #1
 8007680:	00e8      	lsls	r0, r5, #3
 8007682:	1b40      	subs	r0, r0, r5
 8007684:	00c0      	lsls	r0, r0, #3
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <DMA_IRQHandler+0x58>)
 8007688:	18c0      	adds	r0, r0, r3
 800768a:	f009 fca9 	bl	8010fe0 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800768e:	00aa      	lsls	r2, r5, #2
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <DMA_IRQHandler+0x5c>)
 8007692:	58d2      	ldr	r2, [r2, r3]
 8007694:	2a00      	cmp	r2, #0
 8007696:	d006      	beq.n	80076a6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8007698:	4909      	ldr	r1, [pc, #36]	; (80076c0 <DMA_IRQHandler+0x60>)
 800769a:	00ad      	lsls	r5, r5, #2
 800769c:	586b      	ldr	r3, [r5, r1]
 800769e:	3301      	adds	r3, #1
 80076a0:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8ea      	bhi.n	800767c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80076a6:	0020      	movs	r0, r4
 80076a8:	f7ff ff52 	bl	8007550 <StopStreamDMA>
}
 80076ac:	e7e6      	b.n	800767c <DMA_IRQHandler+0x1c>
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	200008e0 	.word	0x200008e0
 80076b4:	20000f30 	.word	0x20000f30
 80076b8:	20001128 	.word	0x20001128
 80076bc:	20000c60 	.word	0x20000c60
 80076c0:	20000c38 	.word	0x20000c38

080076c4 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80076c4:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <ResetUartORE+0x1c>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	2308      	movs	r3, #8
 80076ca:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80076cc:	4a05      	ldr	r2, [pc, #20]	; (80076e4 <ResetUartORE+0x20>)
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80076d2:	4a05      	ldr	r2, [pc, #20]	; (80076e8 <ResetUartORE+0x24>)
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80076d8:	4a04      	ldr	r2, [pc, #16]	; (80076ec <ResetUartORE+0x28>)
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	6213      	str	r3, [r2, #32]
#endif
}
 80076de:	4770      	bx	lr
 80076e0:	20006304 	.word	0x20006304
 80076e4:	20006474 	.word	0x20006474
 80076e8:	20006254 	.word	0x20006254
 80076ec:	20006388 	.word	0x20006388

080076f0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	0006      	movs	r6, r0
 80076f4:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 80076f6:	f00a f8e3 	bl	80118c0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80076fa:	4b2b      	ldr	r3, [pc, #172]	; (80077a8 <EE_VerifyPageFullWriteVariable+0xb8>)
 80076fc:	881a      	ldrh	r2, [r3, #0]
 80076fe:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007700:	4b2a      	ldr	r3, [pc, #168]	; (80077ac <EE_VerifyPageFullWriteVariable+0xbc>)
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 800770a:	4929      	ldr	r1, [pc, #164]	; (80077b0 <EE_VerifyPageFullWriteVariable+0xc0>)
 800770c:	428a      	cmp	r2, r1
 800770e:	d007      	beq.n	8007720 <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 8007710:	3302      	adds	r3, #2
 8007712:	e005      	b.n	8007720 <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 8007714:	2a00      	cmp	r2, #0
 8007716:	d143      	bne.n	80077a0 <EE_VerifyPageFullWriteVariable+0xb0>
        if (PageStatusB == RECEIVE_DATA)
 8007718:	4925      	ldr	r1, [pc, #148]	; (80077b0 <EE_VerifyPageFullWriteVariable+0xc0>)
 800771a:	428b      	cmp	r3, r1
 800771c:	d042      	beq.n	80077a4 <EE_VerifyPageFullWriteVariable+0xb4>
          return PAGEA;         /* PageA valid */
 800771e:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007720:	4a24      	ldr	r2, [pc, #144]	; (80077b4 <EE_VerifyPageFullWriteVariable+0xc4>)
 8007722:	189c      	adds	r4, r3, r2
 8007724:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007726:	02db      	lsls	r3, r3, #11
 8007728:	4a23      	ldr	r2, [pc, #140]	; (80077b8 <EE_VerifyPageFullWriteVariable+0xc8>)
 800772a:	4694      	mov	ip, r2
 800772c:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	3201      	adds	r2, #1
 8007732:	d005      	beq.n	8007740 <EE_VerifyPageFullWriteVariable+0x50>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8007734:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 8007736:	429c      	cmp	r4, r3
 8007738:	d22e      	bcs.n	8007798 <EE_VerifyPageFullWriteVariable+0xa8>
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	3201      	adds	r2, #1
 800773e:	d1f9      	bne.n	8007734 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 8007740:	002a      	movs	r2, r5
 8007742:	2300      	movs	r3, #0
 8007744:	0021      	movs	r1, r4
 8007746:	2001      	movs	r0, #1
 8007748:	f00a f904 	bl	8011954 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800774c:	481b      	ldr	r0, [pc, #108]	; (80077bc <EE_VerifyPageFullWriteVariable+0xcc>)
 800774e:	f00a f8d3 	bl	80118f8 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007752:	2800      	cmp	r0, #0
 8007754:	d003      	beq.n	800775e <EE_VerifyPageFullWriteVariable+0x6e>
        return pFlash.ErrorCode;
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007758:	69d8      	ldr	r0, [r3, #28]
 800775a:	b280      	uxth	r0, r0
 800775c:	e01f      	b.n	800779e <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800775e:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007760:	6913      	ldr	r3, [r2, #16]
 8007762:	2101      	movs	r1, #1
 8007764:	438b      	bics	r3, r1
 8007766:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8007768:	1ca1      	adds	r1, r4, #2
 800776a:	0032      	movs	r2, r6
 800776c:	2300      	movs	r3, #0
 800776e:	2001      	movs	r0, #1
 8007770:	f00a f8f0 	bl	8011954 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007774:	4811      	ldr	r0, [pc, #68]	; (80077bc <EE_VerifyPageFullWriteVariable+0xcc>)
 8007776:	f00a f8bf 	bl	80118f8 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 800777a:	2800      	cmp	r0, #0
 800777c:	d003      	beq.n	8007786 <EE_VerifyPageFullWriteVariable+0x96>
        return pFlash.ErrorCode;
 800777e:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007780:	69d8      	ldr	r0, [r3, #28]
 8007782:	b280      	uxth	r0, r0
 8007784:	e00b      	b.n	800779e <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007786:	4a0f      	ldr	r2, [pc, #60]	; (80077c4 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007788:	6913      	ldr	r3, [r2, #16]
 800778a:	2101      	movs	r1, #1
 800778c:	438b      	bics	r3, r1
 800778e:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8007790:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007792:	69d8      	ldr	r0, [r3, #28]
 8007794:	b280      	uxth	r0, r0
 8007796:	e002      	b.n	800779e <EE_VerifyPageFullWriteVariable+0xae>
    }
  }
	
	HAL_FLASH_Lock();
 8007798:	f00a f8a4 	bl	80118e4 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800779c:	2080      	movs	r0, #128	; 0x80
}
 800779e:	bd70      	pop	{r4, r5, r6, pc}
    return  NO_VALID_PAGE;
 80077a0:	20ab      	movs	r0, #171	; 0xab
 80077a2:	e7fc      	b.n	800779e <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEB;         /* PageB valid */
 80077a4:	2302      	movs	r3, #2
 80077a6:	e7bb      	b.n	8007720 <EE_VerifyPageFullWriteVariable+0x30>
 80077a8:	0801e000 	.word	0x0801e000
 80077ac:	0801f000 	.word	0x0801f000
 80077b0:	0000eeee 	.word	0x0000eeee
 80077b4:	0001003c 	.word	0x0001003c
 80077b8:	0801effe 	.word	0x0801effe
 80077bc:	0000c350 	.word	0x0000c350
 80077c0:	20006658 	.word	0x20006658
 80077c4:	40022000 	.word	0x40022000

080077c8 <EE_ReadVariable>:
{
 80077c8:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <EE_ReadVariable+0x50>)
 80077cc:	881c      	ldrh	r4, [r3, #0]
 80077ce:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80077d0:	4b12      	ldr	r3, [pc, #72]	; (800781c <EE_ReadVariable+0x54>)
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	d006      	beq.n	80077e8 <EE_ReadVariable+0x20>
      else if (PageStatusB == VALID_PAGE)
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <EE_ReadVariable+0x1e>
    return  NO_VALID_PAGE;
 80077de:	20ab      	movs	r0, #171	; 0xab
 80077e0:	e019      	b.n	8007816 <EE_ReadVariable+0x4e>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80077e2:	2001      	movs	r0, #1
 80077e4:	e017      	b.n	8007816 <EE_ReadVariable+0x4e>
        return PAGEB;           /* PageB valid */
 80077e6:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 80077e8:	02e3      	lsls	r3, r4, #11
 80077ea:	4a0d      	ldr	r2, [pc, #52]	; (8007820 <EE_ReadVariable+0x58>)
 80077ec:	4694      	mov	ip, r2
 80077ee:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80077f0:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 80077f2:	4a0c      	ldr	r2, [pc, #48]	; (8007824 <EE_ReadVariable+0x5c>)
 80077f4:	4694      	mov	ip, r2
 80077f6:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 80077f8:	881a      	ldrh	r2, [r3, #0]
 80077fa:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 80077fc:	4290      	cmp	r0, r2
 80077fe:	d006      	beq.n	800780e <EE_ReadVariable+0x46>
      Address = Address - 4;
 8007800:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 8007802:	42a3      	cmp	r3, r4
 8007804:	d9ed      	bls.n	80077e2 <EE_ReadVariable+0x1a>
    AddressValue = (*(__IO uint16_t*)Address);
 8007806:	881a      	ldrh	r2, [r3, #0]
 8007808:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 800780a:	4282      	cmp	r2, r0
 800780c:	d1f8      	bne.n	8007800 <EE_ReadVariable+0x38>
      *Data = (*(__IO uint16_t*)(Address - 2));
 800780e:	3b02      	subs	r3, #2
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8007814:	2000      	movs	r0, #0
}
 8007816:	bd10      	pop	{r4, pc}
 8007818:	0801e000 	.word	0x0801e000
 800781c:	0801f000 	.word	0x0801f000
 8007820:	0801effe 	.word	0x0801effe
 8007824:	0801e002 	.word	0x0801e002

08007828 <EE_WriteVariable>:
{
 8007828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800782a:	46de      	mov	lr, fp
 800782c:	4647      	mov	r7, r8
 800782e:	b580      	push	{r7, lr}
 8007830:	b083      	sub	sp, #12
 8007832:	0005      	movs	r5, r0
 8007834:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007836:	f00a f843 	bl	80118c0 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800783a:	0031      	movs	r1, r6
 800783c:	0028      	movs	r0, r5
 800783e:	f7ff ff57 	bl	80076f0 <EE_VerifyPageFullWriteVariable>
 8007842:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007844:	2880      	cmp	r0, #128	; 0x80
 8007846:	d007      	beq.n	8007858 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007848:	f00a f84c 	bl	80118e4 <HAL_FLASH_Lock>
}
 800784c:	0020      	movs	r0, r4
 800784e:	b003      	add	sp, #12
 8007850:	bc0c      	pop	{r2, r3}
 8007852:	4690      	mov	r8, r2
 8007854:	469b      	mov	fp, r3
 8007856:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007858:	f00a f832 	bl	80118c0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 800785c:	4b3e      	ldr	r3, [pc, #248]	; (8007958 <EE_WriteVariable+0x130>)
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007862:	4a3e      	ldr	r2, [pc, #248]	; (800795c <EE_WriteVariable+0x134>)
 8007864:	8812      	ldrh	r2, [r2, #0]
 8007866:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <EE_WriteVariable+0x54>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800786c:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 800786e:	2a00      	cmp	r2, #0
 8007870:	d1ea      	bne.n	8007848 <EE_WriteVariable+0x20>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007872:	4b3a      	ldr	r3, [pc, #232]	; (800795c <EE_WriteVariable+0x134>)
 8007874:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007876:	4b38      	ldr	r3, [pc, #224]	; (8007958 <EE_WriteVariable+0x130>)
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	e003      	b.n	8007884 <EE_WriteVariable+0x5c>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 800787c:	4b36      	ldr	r3, [pc, #216]	; (8007958 <EE_WriteVariable+0x130>)
 800787e:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007880:	4b36      	ldr	r3, [pc, #216]	; (800795c <EE_WriteVariable+0x134>)
 8007882:	9301      	str	r3, [sp, #4]
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007884:	4a36      	ldr	r2, [pc, #216]	; (8007960 <EE_WriteVariable+0x138>)
 8007886:	2300      	movs	r3, #0
 8007888:	9901      	ldr	r1, [sp, #4]
 800788a:	2001      	movs	r0, #1
 800788c:	f00a f862 	bl	8011954 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007890:	4834      	ldr	r0, [pc, #208]	; (8007964 <EE_WriteVariable+0x13c>)
 8007892:	f00a f831 	bl	80118f8 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007896:	2800      	cmp	r0, #0
 8007898:	d003      	beq.n	80078a2 <EE_WriteVariable+0x7a>
  {
    return pFlash.ErrorCode;
 800789a:	4b33      	ldr	r3, [pc, #204]	; (8007968 <EE_WriteVariable+0x140>)
 800789c:	69dc      	ldr	r4, [r3, #28]
 800789e:	b2a4      	uxth	r4, r4
 80078a0:	e7d2      	b.n	8007848 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80078a2:	4a32      	ldr	r2, [pc, #200]	; (800796c <EE_WriteVariable+0x144>)
 80078a4:	6913      	ldr	r3, [r2, #16]
 80078a6:	2101      	movs	r1, #1
 80078a8:	438b      	bics	r3, r1
 80078aa:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80078ac:	0031      	movs	r1, r6
 80078ae:	0028      	movs	r0, r5
 80078b0:	f7ff ff1e 	bl	80076f0 <EE_VerifyPageFullWriteVariable>
 80078b4:	1e04      	subs	r4, r0, #0
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 80078b6:	d1c7      	bne.n	8007848 <EE_WriteVariable+0x20>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80078b8:	2701      	movs	r7, #1
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80078ba:	4b2d      	ldr	r3, [pc, #180]	; (8007970 <EE_WriteVariable+0x148>)
 80078bc:	4698      	mov	r8, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 80078be:	4e2d      	ldr	r6, [pc, #180]	; (8007974 <EE_WriteVariable+0x14c>)
 80078c0:	e003      	b.n	80078ca <EE_WriteVariable+0xa2>
 80078c2:	3701      	adds	r7, #1
 80078c4:	b2bf      	uxth	r7, r7
 80078c6:	42b7      	cmp	r7, r6
 80078c8:	d00f      	beq.n	80078ea <EE_WriteVariable+0xc2>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 80078ca:	42bd      	cmp	r5, r7
 80078cc:	d0f9      	beq.n	80078c2 <EE_WriteVariable+0x9a>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 80078ce:	4928      	ldr	r1, [pc, #160]	; (8007970 <EE_WriteVariable+0x148>)
 80078d0:	0038      	movs	r0, r7
 80078d2:	f7ff ff79 	bl	80077c8 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 80078d6:	2801      	cmp	r0, #1
 80078d8:	d0f3      	beq.n	80078c2 <EE_WriteVariable+0x9a>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 80078da:	4643      	mov	r3, r8
 80078dc:	8819      	ldrh	r1, [r3, #0]
 80078de:	0038      	movs	r0, r7
 80078e0:	f7ff ff06 	bl	80076f0 <EE_VerifyPageFullWriteVariable>
 80078e4:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 80078e6:	d0ec      	beq.n	80078c2 <EE_WriteVariable+0x9a>
 80078e8:	e7ae      	b.n	8007848 <EE_WriteVariable+0x20>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 80078ea:	4658      	mov	r0, fp
 80078ec:	f00a f8aa 	bl	8011a44 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80078f0:	481c      	ldr	r0, [pc, #112]	; (8007964 <EE_WriteVariable+0x13c>)
 80078f2:	f00a f801 	bl	80118f8 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d003      	beq.n	8007902 <EE_WriteVariable+0xda>
  {
    return pFlash.ErrorCode;
 80078fa:	4b1b      	ldr	r3, [pc, #108]	; (8007968 <EE_WriteVariable+0x140>)
 80078fc:	69dc      	ldr	r4, [r3, #28]
 80078fe:	b2a4      	uxth	r4, r4
 8007900:	e7a2      	b.n	8007848 <EE_WriteVariable+0x20>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007902:	2080      	movs	r0, #128	; 0x80
 8007904:	0100      	lsls	r0, r0, #4
 8007906:	4458      	add	r0, fp
 8007908:	f00a f89c 	bl	8011a44 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800790c:	4815      	ldr	r0, [pc, #84]	; (8007964 <EE_WriteVariable+0x13c>)
 800790e:	f009 fff3 	bl	80118f8 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8007912:	2800      	cmp	r0, #0
 8007914:	d003      	beq.n	800791e <EE_WriteVariable+0xf6>
		{
			return pFlash.ErrorCode;
 8007916:	4b14      	ldr	r3, [pc, #80]	; (8007968 <EE_WriteVariable+0x140>)
 8007918:	69dc      	ldr	r4, [r3, #28]
 800791a:	b2a4      	uxth	r4, r4
 800791c:	e794      	b.n	8007848 <EE_WriteVariable+0x20>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800791e:	4a13      	ldr	r2, [pc, #76]	; (800796c <EE_WriteVariable+0x144>)
 8007920:	6913      	ldr	r3, [r2, #16]
 8007922:	2102      	movs	r1, #2
 8007924:	438b      	bics	r3, r1
 8007926:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007928:	2200      	movs	r2, #0
 800792a:	2300      	movs	r3, #0
 800792c:	9901      	ldr	r1, [sp, #4]
 800792e:	2001      	movs	r0, #1
 8007930:	f00a f810 	bl	8011954 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007934:	480b      	ldr	r0, [pc, #44]	; (8007964 <EE_WriteVariable+0x13c>)
 8007936:	f009 ffdf 	bl	80118f8 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800793a:	2800      	cmp	r0, #0
 800793c:	d003      	beq.n	8007946 <EE_WriteVariable+0x11e>
  {
    return pFlash.ErrorCode;
 800793e:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <EE_WriteVariable+0x140>)
 8007940:	69dc      	ldr	r4, [r3, #28]
 8007942:	b2a4      	uxth	r4, r4
 8007944:	e780      	b.n	8007848 <EE_WriteVariable+0x20>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <EE_WriteVariable+0x144>)
 8007948:	6913      	ldr	r3, [r2, #16]
 800794a:	2101      	movs	r1, #1
 800794c:	438b      	bics	r3, r1
 800794e:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 8007950:	f009 ffc8 	bl	80118e4 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007954:	2400      	movs	r4, #0
 8007956:	e777      	b.n	8007848 <EE_WriteVariable+0x20>
 8007958:	0801e000 	.word	0x0801e000
 800795c:	0801f000 	.word	0x0801f000
 8007960:	0000eeee 	.word	0x0000eeee
 8007964:	0000c350 	.word	0x0000c350
 8007968:	20006658 	.word	0x20006658
 800796c:	40022000 	.word	0x40022000
 8007970:	20000c74 	.word	0x20000c74
 8007974:	00000401 	.word	0x00000401

08007978 <EE_Format>:
{
 8007978:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800797a:	f009 ffa1 	bl	80118c0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 800797e:	4829      	ldr	r0, [pc, #164]	; (8007a24 <EE_Format+0xac>)
 8007980:	f00a f860 	bl	8011a44 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007984:	4828      	ldr	r0, [pc, #160]	; (8007a28 <EE_Format+0xb0>)
 8007986:	f009 ffb7 	bl	80118f8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 800798a:	2800      	cmp	r0, #0
 800798c:	d003      	beq.n	8007996 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800798e:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <EE_Format+0xb4>)
 8007990:	69d8      	ldr	r0, [r3, #28]
 8007992:	b280      	uxth	r0, r0
}
 8007994:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007996:	4826      	ldr	r0, [pc, #152]	; (8007a30 <EE_Format+0xb8>)
 8007998:	f00a f854 	bl	8011a44 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800799c:	4822      	ldr	r0, [pc, #136]	; (8007a28 <EE_Format+0xb0>)
 800799e:	f009 ffab 	bl	80118f8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d003      	beq.n	80079ae <EE_Format+0x36>
			return pFlash.ErrorCode;
 80079a6:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <EE_Format+0xb4>)
 80079a8:	69d8      	ldr	r0, [r3, #28]
 80079aa:	b280      	uxth	r0, r0
 80079ac:	e7f2      	b.n	8007994 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80079ae:	4a21      	ldr	r2, [pc, #132]	; (8007a34 <EE_Format+0xbc>)
 80079b0:	6913      	ldr	r3, [r2, #16]
 80079b2:	2102      	movs	r1, #2
 80079b4:	438b      	bics	r3, r1
 80079b6:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4919      	ldr	r1, [pc, #100]	; (8007a24 <EE_Format+0xac>)
 80079be:	2001      	movs	r0, #1
 80079c0:	f009 ffc8 	bl	8011954 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079c4:	4818      	ldr	r0, [pc, #96]	; (8007a28 <EE_Format+0xb0>)
 80079c6:	f009 ff97 	bl	80118f8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d003      	beq.n	80079d6 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 80079ce:	4b17      	ldr	r3, [pc, #92]	; (8007a2c <EE_Format+0xb4>)
 80079d0:	69d8      	ldr	r0, [r3, #28]
 80079d2:	b280      	uxth	r0, r0
 80079d4:	e7de      	b.n	8007994 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80079d6:	4a17      	ldr	r2, [pc, #92]	; (8007a34 <EE_Format+0xbc>)
 80079d8:	6913      	ldr	r3, [r2, #16]
 80079da:	2101      	movs	r1, #1
 80079dc:	438b      	bics	r3, r1
 80079de:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80079e0:	4815      	ldr	r0, [pc, #84]	; (8007a38 <EE_Format+0xc0>)
 80079e2:	f00a f82f 	bl	8011a44 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079e6:	4810      	ldr	r0, [pc, #64]	; (8007a28 <EE_Format+0xb0>)
 80079e8:	f009 ff86 	bl	80118f8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d003      	beq.n	80079f8 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079f0:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <EE_Format+0xb4>)
 80079f2:	69d8      	ldr	r0, [r3, #28]
 80079f4:	b280      	uxth	r0, r0
 80079f6:	e7cd      	b.n	8007994 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 80079f8:	4810      	ldr	r0, [pc, #64]	; (8007a3c <EE_Format+0xc4>)
 80079fa:	f00a f823 	bl	8011a44 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079fe:	480a      	ldr	r0, [pc, #40]	; (8007a28 <EE_Format+0xb0>)
 8007a00:	f009 ff7a 	bl	80118f8 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d003      	beq.n	8007a10 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <EE_Format+0xb4>)
 8007a0a:	69d8      	ldr	r0, [r3, #28]
 8007a0c:	b280      	uxth	r0, r0
 8007a0e:	e7c1      	b.n	8007994 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a10:	4a08      	ldr	r2, [pc, #32]	; (8007a34 <EE_Format+0xbc>)
 8007a12:	6913      	ldr	r3, [r2, #16]
 8007a14:	2101      	movs	r1, #1
 8007a16:	438b      	bics	r3, r1
 8007a18:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007a1a:	f009 ff63 	bl	80118e4 <HAL_FLASH_Lock>
  return FlashStatus;
 8007a1e:	2000      	movs	r0, #0
 8007a20:	e7b8      	b.n	8007994 <EE_Format+0x1c>
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	0801e000 	.word	0x0801e000
 8007a28:	0000c350 	.word	0x0000c350
 8007a2c:	20006658 	.word	0x20006658
 8007a30:	0801e800 	.word	0x0801e800
 8007a34:	40022000 	.word	0x40022000
 8007a38:	0801f000 	.word	0x0801f000
 8007a3c:	0801f800 	.word	0x0801f800

08007a40 <EE_Init>:
{
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a42:	46c6      	mov	lr, r8
 8007a44:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007a46:	f009 ff3b 	bl	80118c0 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007a4a:	4bbe      	ldr	r3, [pc, #760]	; (8007d44 <EE_Init+0x304>)
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007a50:	4abd      	ldr	r2, [pc, #756]	; (8007d48 <EE_Init+0x308>)
 8007a52:	8812      	ldrh	r2, [r2, #0]
 8007a54:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007a56:	49bd      	ldr	r1, [pc, #756]	; (8007d4c <EE_Init+0x30c>)
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	d100      	bne.n	8007a5e <EE_Init+0x1e>
 8007a5c:	e074      	b.n	8007b48 <EE_Init+0x108>
 8007a5e:	49bc      	ldr	r1, [pc, #752]	; (8007d50 <EE_Init+0x310>)
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d011      	beq.n	8007a88 <EE_Init+0x48>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d100      	bne.n	8007a6a <EE_Init+0x2a>
 8007a68:	e109      	b.n	8007c7e <EE_Init+0x23e>
      FlashStatus = EE_Format();
 8007a6a:	f7ff ff85 	bl	8007978 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a6e:	48b9      	ldr	r0, [pc, #740]	; (8007d54 <EE_Init+0x314>)
 8007a70:	f009 ff42 	bl	80118f8 <FLASH_WaitForLastOperation>
 8007a74:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d102      	bne.n	8007a80 <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a7a:	f009 ff33 	bl	80118e4 <HAL_FLASH_Lock>
  return HAL_OK;
 8007a7e:	2600      	movs	r6, #0
}
 8007a80:	0030      	movs	r0, r6
 8007a82:	bc04      	pop	{r2}
 8007a84:	4690      	mov	r8, r2
 8007a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a88:	2a00      	cmp	r2, #0
 8007a8a:	d00d      	beq.n	8007aa8 <EE_Init+0x68>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a8c:	4baf      	ldr	r3, [pc, #700]	; (8007d4c <EE_Init+0x30c>)
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d028      	beq.n	8007ae4 <EE_Init+0xa4>
        FlashStatus = EE_Format();
 8007a92:	f7ff ff71 	bl	8007978 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a96:	48af      	ldr	r0, [pc, #700]	; (8007d54 <EE_Init+0x314>)
 8007a98:	f009 ff2e 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	d0ec      	beq.n	8007a7a <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007aa0:	4bad      	ldr	r3, [pc, #692]	; (8007d58 <EE_Init+0x318>)
 8007aa2:	69de      	ldr	r6, [r3, #28]
 8007aa4:	b2b6      	uxth	r6, r6
 8007aa6:	e7eb      	b.n	8007a80 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007aa8:	48a6      	ldr	r0, [pc, #664]	; (8007d44 <EE_Init+0x304>)
 8007aaa:	f009 ffcb 	bl	8011a44 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007aae:	48a9      	ldr	r0, [pc, #676]	; (8007d54 <EE_Init+0x314>)
 8007ab0:	f009 ff22 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d003      	beq.n	8007ac0 <EE_Init+0x80>
          return pFlash.ErrorCode;
 8007ab8:	4ba7      	ldr	r3, [pc, #668]	; (8007d58 <EE_Init+0x318>)
 8007aba:	69de      	ldr	r6, [r3, #28]
 8007abc:	b2b6      	uxth	r6, r6
 8007abe:	e7df      	b.n	8007a80 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007ac0:	48a6      	ldr	r0, [pc, #664]	; (8007d5c <EE_Init+0x31c>)
 8007ac2:	f009 ffbf 	bl	8011a44 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ac6:	48a3      	ldr	r0, [pc, #652]	; (8007d54 <EE_Init+0x314>)
 8007ac8:	f009 ff16 	bl	80118f8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d105      	bne.n	8007adc <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007ad0:	4aa3      	ldr	r2, [pc, #652]	; (8007d60 <EE_Init+0x320>)
 8007ad2:	6913      	ldr	r3, [r2, #16]
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	438b      	bics	r3, r1
 8007ad8:	6113      	str	r3, [r2, #16]
 8007ada:	e7ce      	b.n	8007a7a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007adc:	4b9e      	ldr	r3, [pc, #632]	; (8007d58 <EE_Init+0x318>)
 8007ade:	69de      	ldr	r6, [r3, #28]
 8007ae0:	b2b6      	uxth	r6, r6
 8007ae2:	e7cd      	b.n	8007a80 <EE_Init+0x40>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ae4:	4897      	ldr	r0, [pc, #604]	; (8007d44 <EE_Init+0x304>)
 8007ae6:	f009 ffad 	bl	8011a44 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007aea:	489a      	ldr	r0, [pc, #616]	; (8007d54 <EE_Init+0x314>)
 8007aec:	f009 ff04 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d003      	beq.n	8007afc <EE_Init+0xbc>
          return pFlash.ErrorCode;
 8007af4:	4b98      	ldr	r3, [pc, #608]	; (8007d58 <EE_Init+0x318>)
 8007af6:	69de      	ldr	r6, [r3, #28]
 8007af8:	b2b6      	uxth	r6, r6
 8007afa:	e7c1      	b.n	8007a80 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007afc:	4897      	ldr	r0, [pc, #604]	; (8007d5c <EE_Init+0x31c>)
 8007afe:	f009 ffa1 	bl	8011a44 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b02:	4894      	ldr	r0, [pc, #592]	; (8007d54 <EE_Init+0x314>)
 8007b04:	f009 fef8 	bl	80118f8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d003      	beq.n	8007b14 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007b0c:	4b92      	ldr	r3, [pc, #584]	; (8007d58 <EE_Init+0x318>)
 8007b0e:	69de      	ldr	r6, [r3, #28]
 8007b10:	b2b6      	uxth	r6, r6
 8007b12:	e7b5      	b.n	8007a80 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007b14:	4a92      	ldr	r2, [pc, #584]	; (8007d60 <EE_Init+0x320>)
 8007b16:	6913      	ldr	r3, [r2, #16]
 8007b18:	2102      	movs	r1, #2
 8007b1a:	438b      	bics	r3, r1
 8007b1c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	4989      	ldr	r1, [pc, #548]	; (8007d48 <EE_Init+0x308>)
 8007b24:	2001      	movs	r0, #1
 8007b26:	f009 ff15 	bl	8011954 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b2a:	488a      	ldr	r0, [pc, #552]	; (8007d54 <EE_Init+0x314>)
 8007b2c:	f009 fee4 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007b30:	2800      	cmp	r0, #0
 8007b32:	d105      	bne.n	8007b40 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b34:	4a8a      	ldr	r2, [pc, #552]	; (8007d60 <EE_Init+0x320>)
 8007b36:	6913      	ldr	r3, [r2, #16]
 8007b38:	2101      	movs	r1, #1
 8007b3a:	438b      	bics	r3, r1
 8007b3c:	6113      	str	r3, [r2, #16]
 8007b3e:	e79c      	b.n	8007a7a <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007b40:	4b85      	ldr	r3, [pc, #532]	; (8007d58 <EE_Init+0x318>)
 8007b42:	69de      	ldr	r6, [r3, #28]
 8007b44:	b2b6      	uxth	r6, r6
 8007b46:	e79b      	b.n	8007a80 <EE_Init+0x40>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	d157      	bne.n	8007bfc <EE_Init+0x1bc>
 8007b4c:	2401      	movs	r4, #1
  int16_t x = -1;
 8007b4e:	2701      	movs	r7, #1
 8007b50:	427f      	negs	r7, r7
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007b52:	4d84      	ldr	r5, [pc, #528]	; (8007d64 <EE_Init+0x324>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007b54:	4b84      	ldr	r3, [pc, #528]	; (8007d68 <EE_Init+0x328>)
 8007b56:	4698      	mov	r8, r3
 8007b58:	e005      	b.n	8007b66 <EE_Init+0x126>
            x = VarIdx;
 8007b5a:	b227      	sxth	r7, r4
 8007b5c:	e008      	b.n	8007b70 <EE_Init+0x130>
 8007b5e:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007b60:	4b82      	ldr	r3, [pc, #520]	; (8007d6c <EE_Init+0x32c>)
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d018      	beq.n	8007b98 <EE_Init+0x158>
 8007b66:	b2a6      	uxth	r6, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007b68:	882b      	ldrh	r3, [r5, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	42b3      	cmp	r3, r6
 8007b6e:	d0f4      	beq.n	8007b5a <EE_Init+0x11a>
          if (VarIdx != x)
 8007b70:	42bc      	cmp	r4, r7
 8007b72:	d0f4      	beq.n	8007b5e <EE_Init+0x11e>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007b74:	497c      	ldr	r1, [pc, #496]	; (8007d68 <EE_Init+0x328>)
 8007b76:	0030      	movs	r0, r6
 8007b78:	f7ff fe26 	bl	80077c8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007b7c:	2801      	cmp	r0, #1
 8007b7e:	d0ee      	beq.n	8007b5e <EE_Init+0x11e>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007b80:	4643      	mov	r3, r8
 8007b82:	8819      	ldrh	r1, [r3, #0]
 8007b84:	0030      	movs	r0, r6
 8007b86:	f7ff fdb3 	bl	80076f0 <EE_VerifyPageFullWriteVariable>
 8007b8a:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b8c:	4871      	ldr	r0, [pc, #452]	; (8007d54 <EE_Init+0x314>)
 8007b8e:	f009 feb3 	bl	80118f8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d0e3      	beq.n	8007b5e <EE_Init+0x11e>
 8007b96:	e773      	b.n	8007a80 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	4969      	ldr	r1, [pc, #420]	; (8007d44 <EE_Init+0x304>)
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f009 fed8 	bl	8011954 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ba4:	486b      	ldr	r0, [pc, #428]	; (8007d54 <EE_Init+0x314>)
 8007ba6:	f009 fea7 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d003      	beq.n	8007bb6 <EE_Init+0x176>
          return pFlash.ErrorCode;
 8007bae:	4b6a      	ldr	r3, [pc, #424]	; (8007d58 <EE_Init+0x318>)
 8007bb0:	69de      	ldr	r6, [r3, #28]
 8007bb2:	b2b6      	uxth	r6, r6
 8007bb4:	e764      	b.n	8007a80 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007bb6:	4a6a      	ldr	r2, [pc, #424]	; (8007d60 <EE_Init+0x320>)
 8007bb8:	6913      	ldr	r3, [r2, #16]
 8007bba:	2101      	movs	r1, #1
 8007bbc:	438b      	bics	r3, r1
 8007bbe:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bc0:	4861      	ldr	r0, [pc, #388]	; (8007d48 <EE_Init+0x308>)
 8007bc2:	f009 ff3f 	bl	8011a44 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bc6:	4863      	ldr	r0, [pc, #396]	; (8007d54 <EE_Init+0x314>)
 8007bc8:	f009 fe96 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d003      	beq.n	8007bd8 <EE_Init+0x198>
          return pFlash.ErrorCode;
 8007bd0:	4b61      	ldr	r3, [pc, #388]	; (8007d58 <EE_Init+0x318>)
 8007bd2:	69de      	ldr	r6, [r3, #28]
 8007bd4:	b2b6      	uxth	r6, r6
 8007bd6:	e753      	b.n	8007a80 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007bd8:	4865      	ldr	r0, [pc, #404]	; (8007d70 <EE_Init+0x330>)
 8007bda:	f009 ff33 	bl	8011a44 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bde:	485d      	ldr	r0, [pc, #372]	; (8007d54 <EE_Init+0x314>)
 8007be0:	f009 fe8a 	bl	80118f8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d105      	bne.n	8007bf4 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007be8:	4a5d      	ldr	r2, [pc, #372]	; (8007d60 <EE_Init+0x320>)
 8007bea:	6913      	ldr	r3, [r2, #16]
 8007bec:	2102      	movs	r1, #2
 8007bee:	438b      	bics	r3, r1
 8007bf0:	6113      	str	r3, [r2, #16]
 8007bf2:	e742      	b.n	8007a7a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007bf4:	4b58      	ldr	r3, [pc, #352]	; (8007d58 <EE_Init+0x318>)
 8007bf6:	69de      	ldr	r6, [r3, #28]
 8007bf8:	b2b6      	uxth	r6, r6
 8007bfa:	e741      	b.n	8007a80 <EE_Init+0x40>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007bfc:	4b54      	ldr	r3, [pc, #336]	; (8007d50 <EE_Init+0x310>)
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d00b      	beq.n	8007c1a <EE_Init+0x1da>
        FlashStatus = EE_Format();
 8007c02:	f7ff feb9 	bl	8007978 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c06:	4853      	ldr	r0, [pc, #332]	; (8007d54 <EE_Init+0x314>)
 8007c08:	f009 fe76 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d100      	bne.n	8007c12 <EE_Init+0x1d2>
 8007c10:	e733      	b.n	8007a7a <EE_Init+0x3a>
          return pFlash.ErrorCode;
 8007c12:	4b51      	ldr	r3, [pc, #324]	; (8007d58 <EE_Init+0x318>)
 8007c14:	69de      	ldr	r6, [r3, #28]
 8007c16:	b2b6      	uxth	r6, r6
 8007c18:	e732      	b.n	8007a80 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c1a:	484b      	ldr	r0, [pc, #300]	; (8007d48 <EE_Init+0x308>)
 8007c1c:	f009 ff12 	bl	8011a44 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c20:	484c      	ldr	r0, [pc, #304]	; (8007d54 <EE_Init+0x314>)
 8007c22:	f009 fe69 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d003      	beq.n	8007c32 <EE_Init+0x1f2>
          return pFlash.ErrorCode;
 8007c2a:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <EE_Init+0x318>)
 8007c2c:	69de      	ldr	r6, [r3, #28]
 8007c2e:	b2b6      	uxth	r6, r6
 8007c30:	e726      	b.n	8007a80 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c32:	484f      	ldr	r0, [pc, #316]	; (8007d70 <EE_Init+0x330>)
 8007c34:	f009 ff06 	bl	8011a44 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c38:	4846      	ldr	r0, [pc, #280]	; (8007d54 <EE_Init+0x314>)
 8007c3a:	f009 fe5d 	bl	80118f8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d003      	beq.n	8007c4a <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007c42:	4b45      	ldr	r3, [pc, #276]	; (8007d58 <EE_Init+0x318>)
 8007c44:	69de      	ldr	r6, [r3, #28]
 8007c46:	b2b6      	uxth	r6, r6
 8007c48:	e71a      	b.n	8007a80 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c4a:	4a45      	ldr	r2, [pc, #276]	; (8007d60 <EE_Init+0x320>)
 8007c4c:	6913      	ldr	r3, [r2, #16]
 8007c4e:	2102      	movs	r1, #2
 8007c50:	438b      	bics	r3, r1
 8007c52:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	493a      	ldr	r1, [pc, #232]	; (8007d44 <EE_Init+0x304>)
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	f009 fe7a 	bl	8011954 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c60:	483c      	ldr	r0, [pc, #240]	; (8007d54 <EE_Init+0x314>)
 8007c62:	f009 fe49 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d003      	beq.n	8007c72 <EE_Init+0x232>
          return pFlash.ErrorCode;
 8007c6a:	4b3b      	ldr	r3, [pc, #236]	; (8007d58 <EE_Init+0x318>)
 8007c6c:	69de      	ldr	r6, [r3, #28]
 8007c6e:	b2b6      	uxth	r6, r6
 8007c70:	e706      	b.n	8007a80 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007c72:	4a3b      	ldr	r2, [pc, #236]	; (8007d60 <EE_Init+0x320>)
 8007c74:	6913      	ldr	r3, [r2, #16]
 8007c76:	2101      	movs	r1, #1
 8007c78:	438b      	bics	r3, r1
 8007c7a:	6113      	str	r3, [r2, #16]
 8007c7c:	e6fd      	b.n	8007a7a <EE_Init+0x3a>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	d009      	beq.n	8007c96 <EE_Init+0x256>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c82:	4b33      	ldr	r3, [pc, #204]	; (8007d50 <EE_Init+0x310>)
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d010      	beq.n	8007caa <EE_Init+0x26a>
 8007c88:	2401      	movs	r4, #1
  int16_t x = -1;
 8007c8a:	2701      	movs	r7, #1
 8007c8c:	427f      	negs	r7, r7
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007c8e:	4d39      	ldr	r5, [pc, #228]	; (8007d74 <EE_Init+0x334>)
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007c90:	4b35      	ldr	r3, [pc, #212]	; (8007d68 <EE_Init+0x328>)
 8007c92:	4698      	mov	r8, r3
 8007c94:	e02d      	b.n	8007cf2 <EE_Init+0x2b2>
        FlashStatus = EE_Format();
 8007c96:	f7ff fe6f 	bl	8007978 <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c9a:	482e      	ldr	r0, [pc, #184]	; (8007d54 <EE_Init+0x314>)
 8007c9c:	f009 fe2c 	bl	80118f8 <FLASH_WaitForLastOperation>
 8007ca0:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK)
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d100      	bne.n	8007ca8 <EE_Init+0x268>
 8007ca6:	e6e8      	b.n	8007a7a <EE_Init+0x3a>
 8007ca8:	e6ea      	b.n	8007a80 <EE_Init+0x40>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007caa:	4827      	ldr	r0, [pc, #156]	; (8007d48 <EE_Init+0x308>)
 8007cac:	f009 feca 	bl	8011a44 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cb0:	4828      	ldr	r0, [pc, #160]	; (8007d54 <EE_Init+0x314>)
 8007cb2:	f009 fe21 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d003      	beq.n	8007cc2 <EE_Init+0x282>
          return pFlash.ErrorCode;
 8007cba:	4b27      	ldr	r3, [pc, #156]	; (8007d58 <EE_Init+0x318>)
 8007cbc:	69de      	ldr	r6, [r3, #28]
 8007cbe:	b2b6      	uxth	r6, r6
 8007cc0:	e6de      	b.n	8007a80 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cc2:	482b      	ldr	r0, [pc, #172]	; (8007d70 <EE_Init+0x330>)
 8007cc4:	f009 febe 	bl	8011a44 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cc8:	4822      	ldr	r0, [pc, #136]	; (8007d54 <EE_Init+0x314>)
 8007cca:	f009 fe15 	bl	80118f8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d105      	bne.n	8007cde <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007cd2:	4a23      	ldr	r2, [pc, #140]	; (8007d60 <EE_Init+0x320>)
 8007cd4:	6913      	ldr	r3, [r2, #16]
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	438b      	bics	r3, r1
 8007cda:	6113      	str	r3, [r2, #16]
 8007cdc:	e6cd      	b.n	8007a7a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007cde:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <EE_Init+0x318>)
 8007ce0:	69de      	ldr	r6, [r3, #28]
 8007ce2:	b2b6      	uxth	r6, r6
 8007ce4:	e6cc      	b.n	8007a80 <EE_Init+0x40>
            x = VarIdx;
 8007ce6:	b227      	sxth	r7, r4
 8007ce8:	e008      	b.n	8007cfc <EE_Init+0x2bc>
 8007cea:	3401      	adds	r4, #1
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007cec:	4b1f      	ldr	r3, [pc, #124]	; (8007d6c <EE_Init+0x32c>)
 8007cee:	429c      	cmp	r4, r3
 8007cf0:	d018      	beq.n	8007d24 <EE_Init+0x2e4>
 8007cf2:	b2a6      	uxth	r6, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007cf4:	882b      	ldrh	r3, [r5, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	d0f4      	beq.n	8007ce6 <EE_Init+0x2a6>
          if (VarIdx != x)
 8007cfc:	42bc      	cmp	r4, r7
 8007cfe:	d0f4      	beq.n	8007cea <EE_Init+0x2aa>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007d00:	4919      	ldr	r1, [pc, #100]	; (8007d68 <EE_Init+0x328>)
 8007d02:	0030      	movs	r0, r6
 8007d04:	f7ff fd60 	bl	80077c8 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007d08:	2801      	cmp	r0, #1
 8007d0a:	d0ee      	beq.n	8007cea <EE_Init+0x2aa>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007d0c:	4643      	mov	r3, r8
 8007d0e:	8819      	ldrh	r1, [r3, #0]
 8007d10:	0030      	movs	r0, r6
 8007d12:	f7ff fced 	bl	80076f0 <EE_VerifyPageFullWriteVariable>
 8007d16:	0006      	movs	r6, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d18:	480e      	ldr	r0, [pc, #56]	; (8007d54 <EE_Init+0x314>)
 8007d1a:	f009 fded 	bl	80118f8 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d0e3      	beq.n	8007cea <EE_Init+0x2aa>
 8007d22:	e6ad      	b.n	8007a80 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007d24:	2200      	movs	r2, #0
 8007d26:	2300      	movs	r3, #0
 8007d28:	4907      	ldr	r1, [pc, #28]	; (8007d48 <EE_Init+0x308>)
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f009 fe12 	bl	8011954 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d30:	4808      	ldr	r0, [pc, #32]	; (8007d54 <EE_Init+0x314>)
 8007d32:	f009 fde1 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d01e      	beq.n	8007d78 <EE_Init+0x338>
          return pFlash.ErrorCode;
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <EE_Init+0x318>)
 8007d3c:	69de      	ldr	r6, [r3, #28]
 8007d3e:	b2b6      	uxth	r6, r6
 8007d40:	e69e      	b.n	8007a80 <EE_Init+0x40>
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	0801e000 	.word	0x0801e000
 8007d48:	0801f000 	.word	0x0801f000
 8007d4c:	0000eeee 	.word	0x0000eeee
 8007d50:	0000ffff 	.word	0x0000ffff
 8007d54:	0000c350 	.word	0x0000c350
 8007d58:	20006658 	.word	0x20006658
 8007d5c:	0801e800 	.word	0x0801e800
 8007d60:	40022000 	.word	0x40022000
 8007d64:	0801e006 	.word	0x0801e006
 8007d68:	20000c74 	.word	0x20000c74
 8007d6c:	00000401 	.word	0x00000401
 8007d70:	0801f800 	.word	0x0801f800
 8007d74:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007d78:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <EE_Init+0x380>)
 8007d7a:	6913      	ldr	r3, [r2, #16]
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	438b      	bics	r3, r1
 8007d80:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d82:	4810      	ldr	r0, [pc, #64]	; (8007dc4 <EE_Init+0x384>)
 8007d84:	f009 fe5e 	bl	8011a44 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d88:	480f      	ldr	r0, [pc, #60]	; (8007dc8 <EE_Init+0x388>)
 8007d8a:	f009 fdb5 	bl	80118f8 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	d003      	beq.n	8007d9a <EE_Init+0x35a>
          return pFlash.ErrorCode;
 8007d92:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <EE_Init+0x38c>)
 8007d94:	69de      	ldr	r6, [r3, #28]
 8007d96:	b2b6      	uxth	r6, r6
 8007d98:	e672      	b.n	8007a80 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d9a:	480d      	ldr	r0, [pc, #52]	; (8007dd0 <EE_Init+0x390>)
 8007d9c:	f009 fe52 	bl	8011a44 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007da0:	4809      	ldr	r0, [pc, #36]	; (8007dc8 <EE_Init+0x388>)
 8007da2:	f009 fda9 	bl	80118f8 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d105      	bne.n	8007db6 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007daa:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <EE_Init+0x380>)
 8007dac:	6913      	ldr	r3, [r2, #16]
 8007dae:	2102      	movs	r1, #2
 8007db0:	438b      	bics	r3, r1
 8007db2:	6113      	str	r3, [r2, #16]
 8007db4:	e661      	b.n	8007a7a <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <EE_Init+0x38c>)
 8007db8:	69de      	ldr	r6, [r3, #28]
 8007dba:	b2b6      	uxth	r6, r6
 8007dbc:	e660      	b.n	8007a80 <EE_Init+0x40>
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	40022000 	.word	0x40022000
 8007dc4:	0801e000 	.word	0x0801e000
 8007dc8:	0000c350 	.word	0x0000c350
 8007dcc:	20006658 	.word	0x20006658
 8007dd0:	0801e800 	.word	0x0801e800

08007dd4 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8007dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd6:	46c6      	mov	lr, r8
 8007dd8:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8007dda:	4c2b      	ldr	r4, [pc, #172]	; (8007e88 <StartDefaultTask+0xb4>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8007ddc:	46a0      	mov	r8, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 8007dde:	0027      	movs	r7, r4
 8007de0:	e020      	b.n	8007e24 <StartDefaultTask+0x50>
				RTOS_IND_blink(200);
 8007de2:	2680      	movs	r6, #128	; 0x80
 8007de4:	0136      	lsls	r6, r6, #4
 8007de6:	2590      	movs	r5, #144	; 0x90
 8007de8:	05ed      	lsls	r5, r5, #23
 8007dea:	2201      	movs	r2, #1
 8007dec:	0031      	movs	r1, r6
 8007dee:	0028      	movs	r0, r5
 8007df0:	f00a f80e 	bl	8011e10 <HAL_GPIO_WritePin>
 8007df4:	20c8      	movs	r0, #200	; 0xc8
 8007df6:	f006 fa9a 	bl	800e32e <osDelay>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	0031      	movs	r1, r6
 8007dfe:	0028      	movs	r0, r5
 8007e00:	f00a f806 	bl	8011e10 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007e04:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <StartDefaultTask+0xb4>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
				break;

		}
		
		/* Read button state */
		CheckAttachedButtons();
 8007e0a:	f000 fee3 	bl	8008bd4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 8007e0e:	f7fd fb67 	bl	80054e0 <ExecuteSnippet>
		
		/* Execute activated STM32CubeMonitor */
	//	ExecuteMonitor();

		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <StartDefaultTask+0xb8>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d102      	bne.n	8007e20 <StartDefaultTask+0x4c>
 8007e1a:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <StartDefaultTask+0xbc>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 8007e20:	f008 f932 	bl	8010088 <vPortYield>
		switch (indMode)
 8007e24:	7823      	ldrb	r3, [r4, #0]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d004      	beq.n	8007e34 <StartDefaultTask+0x60>
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d017      	beq.n	8007e5e <StartDefaultTask+0x8a>
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d1eb      	bne.n	8007e0a <StartDefaultTask+0x36>
 8007e32:	e7d6      	b.n	8007de2 <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 8007e34:	2680      	movs	r6, #128	; 0x80
 8007e36:	0136      	lsls	r6, r6, #4
 8007e38:	2590      	movs	r5, #144	; 0x90
 8007e3a:	05ed      	lsls	r5, r5, #23
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	0031      	movs	r1, r6
 8007e40:	0028      	movs	r0, r5
 8007e42:	f009 ffe5 	bl	8011e10 <HAL_GPIO_WritePin>
 8007e46:	2064      	movs	r0, #100	; 0x64
 8007e48:	f006 fa71 	bl	800e32e <osDelay>
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	0031      	movs	r1, r6
 8007e50:	0028      	movs	r0, r5
 8007e52:	f009 ffdd 	bl	8011e10 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007e56:	2300      	movs	r3, #0
 8007e58:	4642      	mov	r2, r8
 8007e5a:	7013      	strb	r3, [r2, #0]
				break;
 8007e5c:	e7d5      	b.n	8007e0a <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 8007e5e:	2680      	movs	r6, #128	; 0x80
 8007e60:	0136      	lsls	r6, r6, #4
 8007e62:	2590      	movs	r5, #144	; 0x90
 8007e64:	05ed      	lsls	r5, r5, #23
 8007e66:	2201      	movs	r2, #1
 8007e68:	0031      	movs	r1, r6
 8007e6a:	0028      	movs	r0, r5
 8007e6c:	f009 ffd0 	bl	8011e10 <HAL_GPIO_WritePin>
 8007e70:	201e      	movs	r0, #30
 8007e72:	f006 fa5c 	bl	800e32e <osDelay>
 8007e76:	2200      	movs	r2, #0
 8007e78:	0031      	movs	r1, r6
 8007e7a:	0028      	movs	r0, r5
 8007e7c:	f009 ffc8 	bl	8011e10 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8007e80:	2300      	movs	r3, #0
 8007e82:	703b      	strb	r3, [r7, #0]
				break;
 8007e84:	e7c1      	b.n	8007e0a <StartDefaultTask+0x36>
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	200006e4 	.word	0x200006e4
 8007e8c:	20000cf7 	.word	0x20000cf7
 8007e90:	20000cf6 	.word	0x20000cf6

08007e94 <MX_FREERTOS_Init>:
{
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	b08e      	sub	sp, #56	; 0x38
	xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);
 8007e98:	25a0      	movs	r5, #160	; 0xa0
 8007e9a:	006d      	lsls	r5, r5, #1
 8007e9c:	2400      	movs	r4, #0
 8007e9e:	9403      	str	r4, [sp, #12]
 8007ea0:	9402      	str	r4, [sp, #8]
 8007ea2:	4b53      	ldr	r3, [pc, #332]	; (8007ff0 <MX_FREERTOS_Init+0x15c>)
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	2603      	movs	r6, #3
 8007ea8:	9600      	str	r6, [sp, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	002a      	movs	r2, r5
 8007eae:	4951      	ldr	r1, [pc, #324]	; (8007ff4 <MX_FREERTOS_Init+0x160>)
 8007eb0:	4851      	ldr	r0, [pc, #324]	; (8007ff8 <MX_FREERTOS_Init+0x164>)
 8007eb2:	f007 f837 	bl	800ef24 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 8007eb6:	9403      	str	r4, [sp, #12]
 8007eb8:	9402      	str	r4, [sp, #8]
 8007eba:	4b50      	ldr	r3, [pc, #320]	; (8007ffc <MX_FREERTOS_Init+0x168>)
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	9600      	str	r6, [sp, #0]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	002a      	movs	r2, r5
 8007ec4:	494e      	ldr	r1, [pc, #312]	; (8008000 <MX_FREERTOS_Init+0x16c>)
 8007ec6:	484f      	ldr	r0, [pc, #316]	; (8008004 <MX_FREERTOS_Init+0x170>)
 8007ec8:	f007 f82c 	bl	800ef24 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8007ecc:	9403      	str	r4, [sp, #12]
 8007ece:	9402      	str	r4, [sp, #8]
 8007ed0:	4b4d      	ldr	r3, [pc, #308]	; (8008008 <MX_FREERTOS_Init+0x174>)
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	9600      	str	r6, [sp, #0]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	002a      	movs	r2, r5
 8007eda:	494c      	ldr	r1, [pc, #304]	; (800800c <MX_FREERTOS_Init+0x178>)
 8007edc:	484c      	ldr	r0, [pc, #304]	; (8008010 <MX_FREERTOS_Init+0x17c>)
 8007ede:	f007 f821 	bl	800ef24 <xTaskGenericCreate>
	vRegisterCLICommands();
 8007ee2:	f7ff fa73 	bl	80073cc <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 8007ee6:	9403      	str	r4, [sp, #12]
 8007ee8:	9402      	str	r4, [sp, #8]
 8007eea:	4b4a      	ldr	r3, [pc, #296]	; (8008014 <MX_FREERTOS_Init+0x180>)
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	9600      	str	r6, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	002a      	movs	r2, r5
 8007ef4:	4948      	ldr	r1, [pc, #288]	; (8008018 <MX_FREERTOS_Init+0x184>)
 8007ef6:	4849      	ldr	r0, [pc, #292]	; (800801c <MX_FREERTOS_Init+0x188>)
 8007ef8:	f007 f814 	bl	800ef24 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 8007efc:	4d48      	ldr	r5, [pc, #288]	; (8008020 <MX_FREERTOS_Init+0x18c>)
 8007efe:	9403      	str	r4, [sp, #12]
 8007f00:	9402      	str	r4, [sp, #8]
 8007f02:	4b48      	ldr	r3, [pc, #288]	; (8008024 <MX_FREERTOS_Init+0x190>)
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	3601      	adds	r6, #1
 8007f08:	9600      	str	r6, [sp, #0]
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	22a0      	movs	r2, #160	; 0xa0
 8007f0e:	4946      	ldr	r1, [pc, #280]	; (8008028 <MX_FREERTOS_Init+0x194>)
 8007f10:	0028      	movs	r0, r5
 8007f12:	f007 f807 	bl	800ef24 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 8007f16:	9403      	str	r4, [sp, #12]
 8007f18:	9402      	str	r4, [sp, #8]
 8007f1a:	4b44      	ldr	r3, [pc, #272]	; (800802c <MX_FREERTOS_Init+0x198>)
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	9600      	str	r6, [sp, #0]
 8007f20:	2302      	movs	r3, #2
 8007f22:	22a0      	movs	r2, #160	; 0xa0
 8007f24:	4942      	ldr	r1, [pc, #264]	; (8008030 <MX_FREERTOS_Init+0x19c>)
 8007f26:	0028      	movs	r0, r5
 8007f28:	f006 fffc 	bl	800ef24 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 8007f2c:	9403      	str	r4, [sp, #12]
 8007f2e:	9402      	str	r4, [sp, #8]
 8007f30:	4b40      	ldr	r3, [pc, #256]	; (8008034 <MX_FREERTOS_Init+0x1a0>)
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	9600      	str	r6, [sp, #0]
 8007f36:	2303      	movs	r3, #3
 8007f38:	22a0      	movs	r2, #160	; 0xa0
 8007f3a:	493f      	ldr	r1, [pc, #252]	; (8008038 <MX_FREERTOS_Init+0x1a4>)
 8007f3c:	0028      	movs	r0, r5
 8007f3e:	f006 fff1 	bl	800ef24 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 8007f42:	9403      	str	r4, [sp, #12]
 8007f44:	9402      	str	r4, [sp, #8]
 8007f46:	4b3d      	ldr	r3, [pc, #244]	; (800803c <MX_FREERTOS_Init+0x1a8>)
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	9600      	str	r6, [sp, #0]
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	22a0      	movs	r2, #160	; 0xa0
 8007f50:	493b      	ldr	r1, [pc, #236]	; (8008040 <MX_FREERTOS_Init+0x1ac>)
 8007f52:	0028      	movs	r0, r5
 8007f54:	f006 ffe6 	bl	800ef24 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8007f58:	9403      	str	r4, [sp, #12]
 8007f5a:	9402      	str	r4, [sp, #8]
 8007f5c:	4b39      	ldr	r3, [pc, #228]	; (8008044 <MX_FREERTOS_Init+0x1b0>)
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9600      	str	r6, [sp, #0]
 8007f62:	2305      	movs	r3, #5
 8007f64:	22a0      	movs	r2, #160	; 0xa0
 8007f66:	4938      	ldr	r1, [pc, #224]	; (8008048 <MX_FREERTOS_Init+0x1b4>)
 8007f68:	0028      	movs	r0, r5
 8007f6a:	f006 ffdb 	bl	800ef24 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 8007f6e:	940d      	str	r4, [sp, #52]	; 0x34
 8007f70:	2101      	movs	r1, #1
 8007f72:	a80d      	add	r0, sp, #52	; 0x34
 8007f74:	f006 f9e3 	bl	800e33e <osSemaphoreCreate>
 8007f78:	4e34      	ldr	r6, [pc, #208]	; (800804c <MX_FREERTOS_Init+0x1b8>)
 8007f7a:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 8007f7c:	940c      	str	r4, [sp, #48]	; 0x30
 8007f7e:	2101      	movs	r1, #1
 8007f80:	a80c      	add	r0, sp, #48	; 0x30
 8007f82:	f006 f9dc 	bl	800e33e <osSemaphoreCreate>
 8007f86:	4d32      	ldr	r5, [pc, #200]	; (8008050 <MX_FREERTOS_Init+0x1bc>)
 8007f88:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8007f8a:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	a80b      	add	r0, sp, #44	; 0x2c
 8007f90:	f006 f9d5 	bl	800e33e <osSemaphoreCreate>
 8007f94:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8007f96:	940a      	str	r4, [sp, #40]	; 0x28
 8007f98:	2101      	movs	r1, #1
 8007f9a:	a80a      	add	r0, sp, #40	; 0x28
 8007f9c:	f006 f9cf 	bl	800e33e <osSemaphoreCreate>
 8007fa0:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8007fa2:	9409      	str	r4, [sp, #36]	; 0x24
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	a809      	add	r0, sp, #36	; 0x24
 8007fa8:	f006 f9c9 	bl	800e33e <osSemaphoreCreate>
 8007fac:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 8007fae:	9408      	str	r4, [sp, #32]
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	a808      	add	r0, sp, #32
 8007fb4:	f006 f9c3 	bl	800e33e <osSemaphoreCreate>
 8007fb8:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8007fba:	9407      	str	r4, [sp, #28]
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	a807      	add	r0, sp, #28
 8007fc0:	f006 f9bd 	bl	800e33e <osSemaphoreCreate>
 8007fc4:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 8007fc6:	9406      	str	r4, [sp, #24]
 8007fc8:	2101      	movs	r1, #1
 8007fca:	a806      	add	r0, sp, #24
 8007fcc:	f006 f9b7 	bl	800e33e <osSemaphoreCreate>
 8007fd0:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 8007fd2:	9405      	str	r4, [sp, #20]
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	a805      	add	r0, sp, #20
 8007fd8:	f006 f9b1 	bl	800e33e <osSemaphoreCreate>
 8007fdc:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 8007fde:	9404      	str	r4, [sp, #16]
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	a804      	add	r0, sp, #16
 8007fe4:	f006 f9ab 	bl	800e33e <osSemaphoreCreate>
 8007fe8:	6168      	str	r0, [r5, #20]
}
 8007fea:	b00e      	add	sp, #56	; 0x38
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	20000c94 	.word	0x20000c94
 8007ff4:	0801a1b0 	.word	0x0801a1b0
 8007ff8:	08007dd5 	.word	0x08007dd5
 8007ffc:	20000c78 	.word	0x20000c78
 8008000:	0801a1bc 	.word	0x0801a1bc
 8008004:	08009899 	.word	0x08009899
 8008008:	20000c90 	.word	0x20000c90
 800800c:	0801a1c8 	.word	0x0801a1c8
 8008010:	0801392f 	.word	0x0801392f
 8008014:	20000c9c 	.word	0x20000c9c
 8008018:	0801a1d4 	.word	0x0801a1d4
 800801c:	0800515d 	.word	0x0800515d
 8008020:	08009c39 	.word	0x08009c39
 8008024:	20000c7c 	.word	0x20000c7c
 8008028:	0801a1dc 	.word	0x0801a1dc
 800802c:	20000c80 	.word	0x20000c80
 8008030:	0801a1e8 	.word	0x0801a1e8
 8008034:	20000c84 	.word	0x20000c84
 8008038:	0801a1f4 	.word	0x0801a1f4
 800803c:	20000c88 	.word	0x20000c88
 8008040:	0801a200 	.word	0x0801a200
 8008044:	20000c8c 	.word	0x20000c8c
 8008048:	0801a20c 	.word	0x0801a20c
 800804c:	200061c8 	.word	0x200061c8
 8008050:	200061ac 	.word	0x200061ac

08008054 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 8008054:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	4904      	ldr	r1, [pc, #16]	; (800806c <vMainConfigureTimerForRunTimeStats+0x18>)
 800805c:	f7f8 f86e 	bl	800013c <__udivsi3>
 8008060:	4b03      	ldr	r3, [pc, #12]	; (8008070 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8008062:	6018      	str	r0, [r3, #0]
}
 8008064:	bd10      	pop	{r4, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	20000098 	.word	0x20000098
 800806c:	00002710 	.word	0x00002710
 8008070:	20000c98 	.word	0x20000c98

08008074 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8008074:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008076:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <ulMainGetRunTimeCounterValue+0x40>)
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	21fa      	movs	r1, #250	; 0xfa
 800807c:	0089      	lsls	r1, r1, #2
 800807e:	f7f8 f85d 	bl	800013c <__udivsi3>
 8008082:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <ulMainGetRunTimeCounterValue+0x44>)
 8008086:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8008088:	f007 f8de 	bl	800f248 <xTaskGetTickCountFromISR>

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <ulMainGetRunTimeCounterValue+0x48>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	015b      	lsls	r3, r3, #5
 8008092:	d50d      	bpl.n	80080b0 <ulMainGetRunTimeCounterValue+0x3c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 8008094:	3001      	adds	r0, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008096:	4b08      	ldr	r3, [pc, #32]	; (80080b8 <ulMainGetRunTimeCounterValue+0x44>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	1aed      	subs	r5, r5, r3
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 800809c:	0084      	lsls	r4, r0, #2
 800809e:	1824      	adds	r4, r4, r0
 80080a0:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <ulMainGetRunTimeCounterValue+0x4c>)
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	0028      	movs	r0, r5
 80080a8:	f7f8 f848 	bl	800013c <__udivsi3>
 80080ac:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 80080b0:	1b2d      	subs	r5, r5, r4
 80080b2:	e7f3      	b.n	800809c <ulMainGetRunTimeCounterValue+0x28>
 80080b4:	20000098 	.word	0x20000098
 80080b8:	e000e018 	.word	0xe000e018
 80080bc:	e000ed04 	.word	0xe000ed04
 80080c0:	20000c98 	.word	0x20000c98

080080c4 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 80080c4:	4770      	bx	lr
	...

080080c8 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 80080c8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 80080ca:	00c2      	lsls	r2, r0, #3
 80080cc:	1812      	adds	r2, r2, r0
 80080ce:	4b1b      	ldr	r3, [pc, #108]	; (800813c <CheckForTimedButtonPress+0x74>)
 80080d0:	189b      	adds	r3, r3, r2
 80080d2:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 80080d4:	0082      	lsls	r2, r0, #2
 80080d6:	4b1a      	ldr	r3, [pc, #104]	; (8008140 <CheckForTimedButtonPress+0x78>)
 80080d8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 80080da:	0163      	lsls	r3, r4, #5
 80080dc:	1b1b      	subs	r3, r3, r4
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	191b      	adds	r3, r3, r4
 80080e2:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 80080e4:	4299      	cmp	r1, r3
 80080e6:	d01c      	beq.n	8008122 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 80080e8:	00c2      	lsls	r2, r0, #3
 80080ea:	1812      	adds	r2, r2, r0
 80080ec:	4b13      	ldr	r3, [pc, #76]	; (800813c <CheckForTimedButtonPress+0x74>)
 80080ee:	189b      	adds	r3, r3, r2
 80080f0:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 80080f2:	0163      	lsls	r3, r4, #5
 80080f4:	1b1b      	subs	r3, r3, r4
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	191b      	adds	r3, r3, r4
 80080fa:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 80080fc:	4299      	cmp	r1, r3
 80080fe:	d017      	beq.n	8008130 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 8008100:	00c2      	lsls	r2, r0, #3
 8008102:	1812      	adds	r2, r2, r0
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <CheckForTimedButtonPress+0x74>)
 8008106:	189b      	adds	r3, r3, r2
 8008108:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 800810a:	0163      	lsls	r3, r4, #5
 800810c:	1b1b      	subs	r3, r3, r4
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	191b      	adds	r3, r3, r4
 8008112:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 8008114:	4299      	cmp	r1, r3
 8008116:	d109      	bne.n	800812c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 8008118:	0010      	movs	r0, r2
 800811a:	4b08      	ldr	r3, [pc, #32]	; (800813c <CheckForTimedButtonPress+0x74>)
 800811c:	220a      	movs	r2, #10
 800811e:	54c2      	strb	r2, [r0, r3]
 8008120:	e004      	b.n	800812c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8008122:	00c3      	lsls	r3, r0, #3
 8008124:	1818      	adds	r0, r3, r0
 8008126:	4b05      	ldr	r3, [pc, #20]	; (800813c <CheckForTimedButtonPress+0x74>)
 8008128:	2209      	movs	r2, #9
 800812a:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800812c:	2000      	movs	r0, #0
 800812e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008130:	0010      	movs	r0, r2
 8008132:	4b02      	ldr	r3, [pc, #8]	; (800813c <CheckForTimedButtonPress+0x74>)
 8008134:	220a      	movs	r2, #10
 8008136:	54c2      	strb	r2, [r0, r3]
 8008138:	e7f8      	b.n	800812c <CheckForTimedButtonPress+0x64>
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	20000cb4 	.word	0x20000cb4
 8008140:	20000cf8 	.word	0x20000cf8

08008144 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 8008144:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8008146:	00c2      	lsls	r2, r0, #3
 8008148:	1812      	adds	r2, r2, r0
 800814a:	4b1b      	ldr	r3, [pc, #108]	; (80081b8 <CheckForTimedButtonRelease+0x74>)
 800814c:	189b      	adds	r3, r3, r2
 800814e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 8008150:	0082      	lsls	r2, r0, #2
 8008152:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <CheckForTimedButtonRelease+0x78>)
 8008154:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 8008156:	0163      	lsls	r3, r4, #5
 8008158:	1b1b      	subs	r3, r3, r4
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	191b      	adds	r3, r3, r4
 800815e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 8008160:	4299      	cmp	r1, r3
 8008162:	d01c      	beq.n	800819e <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8008164:	00c2      	lsls	r2, r0, #3
 8008166:	1812      	adds	r2, r2, r0
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <CheckForTimedButtonRelease+0x74>)
 800816a:	189b      	adds	r3, r3, r2
 800816c:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800816e:	0163      	lsls	r3, r4, #5
 8008170:	1b1b      	subs	r3, r3, r4
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	191b      	adds	r3, r3, r4
 8008176:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 8008178:	4299      	cmp	r1, r3
 800817a:	d017      	beq.n	80081ac <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800817c:	00c2      	lsls	r2, r0, #3
 800817e:	1812      	adds	r2, r2, r0
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <CheckForTimedButtonRelease+0x74>)
 8008182:	189b      	adds	r3, r3, r2
 8008184:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 8008186:	0163      	lsls	r3, r4, #5
 8008188:	1b1b      	subs	r3, r3, r4
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	191b      	adds	r3, r3, r4
 800818e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 8008190:	4299      	cmp	r1, r3
 8008192:	d109      	bne.n	80081a8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008194:	0010      	movs	r0, r2
 8008196:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <CheckForTimedButtonRelease+0x74>)
 8008198:	220d      	movs	r2, #13
 800819a:	54c2      	strb	r2, [r0, r3]
 800819c:	e004      	b.n	80081a8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800819e:	00c3      	lsls	r3, r0, #3
 80081a0:	1818      	adds	r0, r3, r0
 80081a2:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <CheckForTimedButtonRelease+0x74>)
 80081a4:	220c      	movs	r2, #12
 80081a6:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 80081a8:	2000      	movs	r0, #0
 80081aa:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80081ac:	0010      	movs	r0, r2
 80081ae:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <CheckForTimedButtonRelease+0x74>)
 80081b0:	220d      	movs	r2, #13
 80081b2:	54c2      	strb	r2, [r0, r3]
 80081b4:	e7f8      	b.n	80081a8 <CheckForTimedButtonRelease+0x64>
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	20000cb4 	.word	0x20000cb4
 80081bc:	20000d10 	.word	0x20000d10

080081c0 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 80081c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081c2:	b08d      	sub	sp, #52	; 0x34
 80081c4:	0006      	movs	r6, r0
 80081c6:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 80081c8:	4b41      	ldr	r3, [pc, #260]	; (80082d0 <AddPortButton+0x110>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d157      	bne.n	8008280 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 80081d0:	4b40      	ldr	r3, [pc, #256]	; (80082d4 <AddPortButton+0x114>)
 80081d2:	2204      	movs	r2, #4
 80081d4:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 80081d6:	4b3e      	ldr	r3, [pc, #248]	; (80082d0 <AddPortButton+0x110>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d15a      	bne.n	8008294 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 80081de:	2512      	movs	r5, #18
 80081e0:	446d      	add	r5, sp
 80081e2:	af04      	add	r7, sp, #16
 80081e4:	9700      	str	r7, [sp, #0]
 80081e6:	ab05      	add	r3, sp, #20
 80081e8:	002a      	movs	r2, r5
 80081ea:	a906      	add	r1, sp, #24
 80081ec:	0020      	movs	r0, r4
 80081ee:	f005 fa1d 	bl	800d62c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 80081f2:	882b      	ldrh	r3, [r5, #0]
 80081f4:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80081f6:	2301      	movs	r3, #1
 80081f8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fa:	2500      	movs	r5, #0
 80081fc:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80081fe:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 8008200:	a907      	add	r1, sp, #28
 8008202:	9806      	ldr	r0, [sp, #24]
 8008204:	f009 fc90 	bl	8011b28 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008208:	883b      	ldrh	r3, [r7, #0]
 800820a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800820c:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800820e:	2302      	movs	r3, #2
 8008210:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 8008212:	a907      	add	r1, sp, #28
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	f009 fc87 	bl	8011b28 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800821a:	00e2      	lsls	r2, r4, #3
 800821c:	1912      	adds	r2, r2, r4
 800821e:	4b2e      	ldr	r3, [pc, #184]	; (80082d8 <AddPortButton+0x118>)
 8008220:	189b      	adds	r3, r3, r2
 8008222:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008224:	0025      	movs	r5, r4
 8008226:	353a      	adds	r5, #58	; 0x3a
 8008228:	00ad      	lsls	r5, r5, #2
 800822a:	210e      	movs	r1, #14
 800822c:	4469      	add	r1, sp
 800822e:	0028      	movs	r0, r5
 8008230:	f7ff faca 	bl	80077c8 <EE_ReadVariable>
	if (!res)											// This variable exists
 8008234:	2800      	cmp	r0, #0
 8008236:	d133      	bne.n	80082a0 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 8008238:	230e      	movs	r3, #14
 800823a:	446b      	add	r3, sp
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8008240:	091a      	lsrs	r2, r3, #4
 8008242:	42a2      	cmp	r2, r4
 8008244:	d103      	bne.n	800824e <AddPortButton+0x8e>
 8008246:	220f      	movs	r2, #15
 8008248:	4013      	ands	r3, r2
 800824a:	42b3      	cmp	r3, r6
 800824c:	d015      	beq.n	800827a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800824e:	0324      	lsls	r4, r4, #12
 8008250:	0231      	lsls	r1, r6, #8
 8008252:	4321      	orrs	r1, r4
 8008254:	b289      	uxth	r1, r1
 8008256:	230e      	movs	r3, #14
 8008258:	446b      	add	r3, sp
 800825a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800825c:	0028      	movs	r0, r5
 800825e:	f7ff fae3 	bl	8007828 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008262:	1c68      	adds	r0, r5, #1
 8008264:	2100      	movs	r1, #0
 8008266:	f7ff fadf 	bl	8007828 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800826a:	1ca8      	adds	r0, r5, #2
 800826c:	2100      	movs	r1, #0
 800826e:	f7ff fadb 	bl	8007828 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008272:	1ce8      	adds	r0, r5, #3
 8008274:	2100      	movs	r1, #0
 8008276:	f7ff fad7 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800827a:	2000      	movs	r0, #0
 800827c:	b00d      	add	sp, #52	; 0x34
 800827e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008280:	008d      	lsls	r5, r1, #2
 8008282:	4b16      	ldr	r3, [pc, #88]	; (80082dc <AddPortButton+0x11c>)
 8008284:	58e8      	ldr	r0, [r5, r3]
 8008286:	f006 f89d 	bl	800e3c4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800828a:	4b15      	ldr	r3, [pc, #84]	; (80082e0 <AddPortButton+0x120>)
 800828c:	58e8      	ldr	r0, [r5, r3]
 800828e:	f006 f899 	bl	800e3c4 <osSemaphoreRelease>
 8008292:	e79d      	b.n	80081d0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008294:	0020      	movs	r0, r4
 8008296:	f005 feff 	bl	800e098 <GetUart>
 800829a:	f00a fd96 	bl	8012dca <HAL_UART_DeInit>
 800829e:	e79e      	b.n	80081de <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 80082a0:	0324      	lsls	r4, r4, #12
 80082a2:	0231      	lsls	r1, r6, #8
 80082a4:	4321      	orrs	r1, r4
 80082a6:	b289      	uxth	r1, r1
 80082a8:	230e      	movs	r3, #14
 80082aa:	446b      	add	r3, sp
 80082ac:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 80082ae:	0028      	movs	r0, r5
 80082b0:	f7ff faba 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 80082b4:	1c68      	adds	r0, r5, #1
 80082b6:	2100      	movs	r1, #0
 80082b8:	f7ff fab6 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 80082bc:	1ca8      	adds	r0, r5, #2
 80082be:	2100      	movs	r1, #0
 80082c0:	f7ff fab2 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 80082c4:	1ce8      	adds	r0, r5, #3
 80082c6:	2100      	movs	r1, #0
 80082c8:	f7ff faae 	bl	8007828 <EE_WriteVariable>
 80082cc:	e7d5      	b.n	800827a <AddPortButton+0xba>
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	2000029d 	.word	0x2000029d
 80082d4:	200008e0 	.word	0x200008e0
 80082d8:	20000cb4 	.word	0x20000cb4
 80082dc:	200061c8 	.word	0x200061c8
 80082e0:	200061ac 	.word	0x200061ac

080082e4 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 80082ea:	4836      	ldr	r0, [pc, #216]	; (80083c4 <RemovePortButton+0xe0>)
 80082ec:	00e9      	lsls	r1, r5, #3
 80082ee:	1949      	adds	r1, r1, r5
 80082f0:	1842      	adds	r2, r0, r1
 80082f2:	2300      	movs	r3, #0
 80082f4:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 80082f6:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 80082f8:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 80082fa:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 80082fc:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 80082fe:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 8008300:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 8008302:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 8008304:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 8008306:	002c      	movs	r4, r5
 8008308:	343a      	adds	r4, #58	; 0x3a
 800830a:	00a4      	lsls	r4, r4, #2
 800830c:	466b      	mov	r3, sp
 800830e:	1d99      	adds	r1, r3, #6
 8008310:	0020      	movs	r0, r4
 8008312:	f7ff fa59 	bl	80077c8 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 8008316:	2800      	cmp	r0, #0
 8008318:	d02b      	beq.n	8008372 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800831a:	0028      	movs	r0, r5
 800831c:	f005 febc 	bl	800e098 <GetUart>
 8008320:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 8008322:	6803      	ldr	r3, [r0, #0]
 8008324:	4a28      	ldr	r2, [pc, #160]	; (80083c8 <RemovePortButton+0xe4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d034      	beq.n	8008394 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800832a:	4a28      	ldr	r2, [pc, #160]	; (80083cc <RemovePortButton+0xe8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d035      	beq.n	800839c <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 8008330:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <RemovePortButton+0xec>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d036      	beq.n	80083a4 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 8008336:	4a27      	ldr	r2, [pc, #156]	; (80083d4 <RemovePortButton+0xf0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d037      	beq.n	80083ac <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800833c:	4a26      	ldr	r2, [pc, #152]	; (80083d8 <RemovePortButton+0xf4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d03c      	beq.n	80083bc <RemovePortButton+0xd8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 8008342:	4a26      	ldr	r2, [pc, #152]	; (80083dc <RemovePortButton+0xf8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d035      	beq.n	80083b4 <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 8008348:	4a25      	ldr	r2, [pc, #148]	; (80083e0 <RemovePortButton+0xfc>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d038      	beq.n	80083c0 <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800834e:	4a25      	ldr	r2, [pc, #148]	; (80083e4 <RemovePortButton+0x100>)
 8008350:	4694      	mov	ip, r2
 8008352:	4463      	add	r3, ip
 8008354:	1e5c      	subs	r4, r3, #1
 8008356:	41a3      	sbcs	r3, r4
 8008358:	425c      	negs	r4, r3
 800835a:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800835c:	4b22      	ldr	r3, [pc, #136]	; (80083e8 <RemovePortButton+0x104>)
 800835e:	2200      	movs	r2, #0
 8008360:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008362:	3201      	adds	r2, #1
 8008364:	4921      	ldr	r1, [pc, #132]	; (80083ec <RemovePortButton+0x108>)
 8008366:	0030      	movs	r0, r6
 8008368:	f00a fd88 	bl	8012e7c <HAL_UART_Receive_IT>

	return result;
}
 800836c:	0020      	movs	r0, r4
 800836e:	b002      	add	sp, #8
 8008370:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 8008372:	2100      	movs	r1, #0
 8008374:	0020      	movs	r0, r4
 8008376:	f7ff fa57 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800837a:	1c60      	adds	r0, r4, #1
 800837c:	2100      	movs	r1, #0
 800837e:	f7ff fa53 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008382:	1ca0      	adds	r0, r4, #2
 8008384:	2100      	movs	r1, #0
 8008386:	f7ff fa4f 	bl	8007828 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800838a:	1ce0      	adds	r0, r4, #3
 800838c:	2100      	movs	r1, #0
 800838e:	f7ff fa4b 	bl	8007828 <EE_WriteVariable>
 8008392:	e7c2      	b.n	800831a <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008394:	f005 fd00 	bl	800dd98 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008398:	2400      	movs	r4, #0
 800839a:	e7df      	b.n	800835c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800839c:	f005 fd14 	bl	800ddc8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 80083a0:	2400      	movs	r4, #0
 80083a2:	e7db      	b.n	800835c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 80083a4:	f005 fd28 	bl	800ddf8 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 80083a8:	2400      	movs	r4, #0
 80083aa:	e7d7      	b.n	800835c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 80083ac:	f005 fd3c 	bl	800de28 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 80083b0:	2400      	movs	r4, #0
 80083b2:	e7d3      	b.n	800835c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 80083b4:	f005 fd50 	bl	800de58 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 80083b8:	2400      	movs	r4, #0
 80083ba:	e7cf      	b.n	800835c <RemovePortButton+0x78>
 80083bc:	2400      	movs	r4, #0
 80083be:	e7cd      	b.n	800835c <RemovePortButton+0x78>
 80083c0:	2400      	movs	r4, #0
 80083c2:	e7cb      	b.n	800835c <RemovePortButton+0x78>
 80083c4:	20000cb4 	.word	0x20000cb4
 80083c8:	40013800 	.word	0x40013800
 80083cc:	40004400 	.word	0x40004400
 80083d0:	40004800 	.word	0x40004800
 80083d4:	40004c00 	.word	0x40004c00
 80083d8:	40005000 	.word	0x40005000
 80083dc:	40011400 	.word	0x40011400
 80083e0:	40011800 	.word	0x40011800
 80083e4:	bffee400 	.word	0xbffee400
 80083e8:	200008e0 	.word	0x200008e0
 80083ec:	20000648 	.word	0x20000648

080083f0 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 80083f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083f2:	46de      	mov	lr, fp
 80083f4:	4657      	mov	r7, sl
 80083f6:	464e      	mov	r6, r9
 80083f8:	4645      	mov	r5, r8
 80083fa:	b5e0      	push	{r5, r6, r7, lr}
 80083fc:	b085      	sub	sp, #20
 80083fe:	0007      	movs	r7, r0
 8008400:	001e      	movs	r6, r3
 8008402:	ab0e      	add	r3, sp, #56	; 0x38
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	4698      	mov	r8, r3
 8008408:	ab0f      	add	r3, sp, #60	; 0x3c
 800840a:	781d      	ldrb	r5, [r3, #0]
 800840c:	ab10      	add	r3, sp, #64	; 0x40
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	469b      	mov	fp, r3
 8008412:	ab11      	add	r3, sp, #68	; 0x44
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	469a      	mov	sl, r3
 8008418:	ab12      	add	r3, sp, #72	; 0x48
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	4699      	mov	r9, r3
 800841e:	ab13      	add	r3, sp, #76	; 0x4c
 8008420:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 8008422:	00fc      	lsls	r4, r7, #3
 8008424:	19e4      	adds	r4, r4, r7
 8008426:	4b9e      	ldr	r3, [pc, #632]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008428:	191b      	adds	r3, r3, r4
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d04c      	beq.n	80084ca <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 8008430:	00fc      	lsls	r4, r7, #3
 8008432:	19e4      	adds	r4, r4, r7
 8008434:	4b9a      	ldr	r3, [pc, #616]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008436:	191b      	adds	r3, r3, r4
 8008438:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800843a:	4644      	mov	r4, r8
 800843c:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800843e:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008440:	465c      	mov	r4, fp
 8008442:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 8008444:	4654      	mov	r4, sl
 8008446:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 8008448:	464c      	mov	r4, r9
 800844a:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800844c:	2801      	cmp	r0, #1
 800844e:	d003      	beq.n	8008458 <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8008450:	2800      	cmp	r0, #0
 8008452:	d113      	bne.n	800847c <SetButtonEvents+0x8c>
 8008454:	2900      	cmp	r1, #0
 8008456:	d042      	beq.n	80084de <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008458:	00f9      	lsls	r1, r7, #3
 800845a:	19c9      	adds	r1, r1, r7
 800845c:	4b90      	ldr	r3, [pc, #576]	; (80086a0 <SetButtonEvents+0x2b0>)
 800845e:	185b      	adds	r3, r3, r1
 8008460:	7a19      	ldrb	r1, [r3, #8]
 8008462:	2401      	movs	r4, #1
 8008464:	4321      	orrs	r1, r4
 8008466:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 8008468:	2801      	cmp	r0, #1
 800846a:	d10c      	bne.n	8008486 <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800846c:	00fa      	lsls	r2, r7, #3
 800846e:	19d2      	adds	r2, r2, r7
 8008470:	4b8b      	ldr	r3, [pc, #556]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008472:	189b      	adds	r3, r3, r2
 8008474:	7a1a      	ldrb	r2, [r3, #8]
 8008476:	2102      	movs	r1, #2
 8008478:	430a      	orrs	r2, r1
 800847a:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800847c:	2801      	cmp	r0, #1
 800847e:	d042      	beq.n	8008506 <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008480:	2800      	cmp	r0, #0
 8008482:	d152      	bne.n	800852a <SetButtonEvents+0x13a>
 8008484:	e03d      	b.n	8008502 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 8008486:	2800      	cmp	r0, #0
 8008488:	d031      	beq.n	80084ee <SetButtonEvents+0xfe>
 800848a:	e044      	b.n	8008516 <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800848c:	2800      	cmp	r0, #0
 800848e:	d059      	beq.n	8008544 <SetButtonEvents+0x154>
 8008490:	e06d      	b.n	800856e <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008492:	2800      	cmp	r0, #0
 8008494:	d100      	bne.n	8008498 <SetButtonEvents+0xa8>
 8008496:	e082      	b.n	800859e <SetButtonEvents+0x1ae>
 8008498:	e097      	b.n	80085ca <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800849a:	2800      	cmp	r0, #0
 800849c:	d100      	bne.n	80084a0 <SetButtonEvents+0xb0>
 800849e:	e0f2      	b.n	8008686 <SetButtonEvents+0x296>
 80084a0:	e09f      	b.n	80085e2 <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 80084a2:	0a19      	lsrs	r1, r3, #8
 80084a4:	0209      	lsls	r1, r1, #8
 80084a6:	4311      	orrs	r1, r2
 80084a8:	ab02      	add	r3, sp, #8
 80084aa:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 80084ac:	0020      	movs	r0, r4
 80084ae:	f7ff f9bb 	bl	8007828 <EE_WriteVariable>
 80084b2:	e0ad      	b.n	8008610 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 80084b4:	0019      	movs	r1, r3
 80084b6:	9801      	ldr	r0, [sp, #4]
 80084b8:	f7ff f9b6 	bl	8007828 <EE_WriteVariable>
 80084bc:	e0b7      	b.n	800862e <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 80084be:	4653      	mov	r3, sl
 80084c0:	4319      	orrs	r1, r3
 80084c2:	0030      	movs	r0, r6
 80084c4:	f7ff f9b0 	bl	8007828 <EE_WriteVariable>
 80084c8:	e0c0      	b.n	800864c <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084ca:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 80084cc:	b005      	add	sp, #20
 80084ce:	bc3c      	pop	{r2, r3, r4, r5}
 80084d0:	4690      	mov	r8, r2
 80084d2:	4699      	mov	r9, r3
 80084d4:	46a2      	mov	sl, r4
 80084d6:	46ab      	mov	fp, r5
 80084d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80084da:	200b      	movs	r0, #11
 80084dc:	e7f6      	b.n	80084cc <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 80084de:	00f9      	lsls	r1, r7, #3
 80084e0:	19c9      	adds	r1, r1, r7
 80084e2:	4b6f      	ldr	r3, [pc, #444]	; (80086a0 <SetButtonEvents+0x2b0>)
 80084e4:	185b      	adds	r3, r3, r1
 80084e6:	7a19      	ldrb	r1, [r3, #8]
 80084e8:	2401      	movs	r4, #1
 80084ea:	43a1      	bics	r1, r4
 80084ec:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	d1bc      	bne.n	800846c <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 80084f2:	00fa      	lsls	r2, r7, #3
 80084f4:	19d2      	adds	r2, r2, r7
 80084f6:	4b6a      	ldr	r3, [pc, #424]	; (80086a0 <SetButtonEvents+0x2b0>)
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	7a1a      	ldrb	r2, [r3, #8]
 80084fc:	2102      	movs	r1, #2
 80084fe:	438a      	bics	r2, r1
 8008500:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008502:	2e00      	cmp	r6, #0
 8008504:	d016      	beq.n	8008534 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008506:	00fa      	lsls	r2, r7, #3
 8008508:	19d2      	adds	r2, r2, r7
 800850a:	4b65      	ldr	r3, [pc, #404]	; (80086a0 <SetButtonEvents+0x2b0>)
 800850c:	189b      	adds	r3, r3, r2
 800850e:	7a1a      	ldrb	r2, [r3, #8]
 8008510:	2104      	movs	r1, #4
 8008512:	430a      	orrs	r2, r1
 8008514:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008516:	2801      	cmp	r0, #1
 8008518:	d1b8      	bne.n	800848c <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800851a:	00fa      	lsls	r2, r7, #3
 800851c:	19d2      	adds	r2, r2, r7
 800851e:	4b60      	ldr	r3, [pc, #384]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008520:	189b      	adds	r3, r3, r2
 8008522:	7a1a      	ldrb	r2, [r3, #8]
 8008524:	2108      	movs	r1, #8
 8008526:	430a      	orrs	r2, r1
 8008528:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800852a:	2801      	cmp	r0, #1
 800852c:	d017      	beq.n	800855e <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800852e:	2800      	cmp	r0, #0
 8008530:	d128      	bne.n	8008584 <SetButtonEvents+0x194>
 8008532:	e012      	b.n	800855a <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008534:	00fa      	lsls	r2, r7, #3
 8008536:	19d2      	adds	r2, r2, r7
 8008538:	4b59      	ldr	r3, [pc, #356]	; (80086a0 <SetButtonEvents+0x2b0>)
 800853a:	189b      	adds	r3, r3, r2
 800853c:	7a1a      	ldrb	r2, [r3, #8]
 800853e:	2104      	movs	r1, #4
 8008540:	438a      	bics	r2, r1
 8008542:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008544:	4643      	mov	r3, r8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e7      	bne.n	800851a <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800854a:	00fa      	lsls	r2, r7, #3
 800854c:	19d2      	adds	r2, r2, r7
 800854e:	4b54      	ldr	r3, [pc, #336]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008550:	189b      	adds	r3, r3, r2
 8008552:	7a1a      	ldrb	r2, [r3, #8]
 8008554:	2108      	movs	r1, #8
 8008556:	438a      	bics	r2, r1
 8008558:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800855a:	2d00      	cmp	r5, #0
 800855c:	d017      	beq.n	800858e <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800855e:	00fa      	lsls	r2, r7, #3
 8008560:	19d2      	adds	r2, r2, r7
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008564:	189b      	adds	r3, r3, r2
 8008566:	7a1a      	ldrb	r2, [r3, #8]
 8008568:	2110      	movs	r1, #16
 800856a:	430a      	orrs	r2, r1
 800856c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800856e:	2801      	cmp	r0, #1
 8008570:	d000      	beq.n	8008574 <SetButtonEvents+0x184>
 8008572:	e78e      	b.n	8008492 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008574:	00fa      	lsls	r2, r7, #3
 8008576:	19d2      	adds	r2, r2, r7
 8008578:	4b49      	ldr	r3, [pc, #292]	; (80086a0 <SetButtonEvents+0x2b0>)
 800857a:	189b      	adds	r3, r3, r2
 800857c:	7a1a      	ldrb	r2, [r3, #8]
 800857e:	2120      	movs	r1, #32
 8008580:	430a      	orrs	r2, r1
 8008582:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008584:	2801      	cmp	r0, #1
 8008586:	d018      	beq.n	80085ba <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008588:	2800      	cmp	r0, #0
 800858a:	d12a      	bne.n	80085e2 <SetButtonEvents+0x1f2>
 800858c:	e012      	b.n	80085b4 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800858e:	00fa      	lsls	r2, r7, #3
 8008590:	19d2      	adds	r2, r2, r7
 8008592:	4b43      	ldr	r3, [pc, #268]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008594:	189b      	adds	r3, r3, r2
 8008596:	7a1a      	ldrb	r2, [r3, #8]
 8008598:	2110      	movs	r1, #16
 800859a:	438a      	bics	r2, r1
 800859c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800859e:	465b      	mov	r3, fp
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e7      	bne.n	8008574 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 80085a4:	00fa      	lsls	r2, r7, #3
 80085a6:	19d2      	adds	r2, r2, r7
 80085a8:	4b3d      	ldr	r3, [pc, #244]	; (80086a0 <SetButtonEvents+0x2b0>)
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	7a1a      	ldrb	r2, [r3, #8]
 80085ae:	2120      	movs	r1, #32
 80085b0:	438a      	bics	r2, r1
 80085b2:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 80085b4:	4653      	mov	r3, sl
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d05d      	beq.n	8008676 <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 80085ba:	00fa      	lsls	r2, r7, #3
 80085bc:	19d2      	adds	r2, r2, r7
 80085be:	4b38      	ldr	r3, [pc, #224]	; (80086a0 <SetButtonEvents+0x2b0>)
 80085c0:	189b      	adds	r3, r3, r2
 80085c2:	7a1a      	ldrb	r2, [r3, #8]
 80085c4:	2140      	movs	r1, #64	; 0x40
 80085c6:	430a      	orrs	r2, r1
 80085c8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80085ca:	2801      	cmp	r0, #1
 80085cc:	d000      	beq.n	80085d0 <SetButtonEvents+0x1e0>
 80085ce:	e764      	b.n	800849a <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80085d0:	00fa      	lsls	r2, r7, #3
 80085d2:	19d2      	adds	r2, r2, r7
 80085d4:	4b32      	ldr	r3, [pc, #200]	; (80086a0 <SetButtonEvents+0x2b0>)
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	7a19      	ldrb	r1, [r3, #8]
 80085da:	2280      	movs	r2, #128	; 0x80
 80085dc:	4252      	negs	r2, r2
 80085de:	430a      	orrs	r2, r1
 80085e0:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80085e2:	003c      	movs	r4, r7
 80085e4:	343a      	adds	r4, #58	; 0x3a
 80085e6:	00a4      	lsls	r4, r4, #2
 80085e8:	ab02      	add	r3, sp, #8
 80085ea:	1d99      	adds	r1, r3, #6
 80085ec:	0020      	movs	r0, r4
 80085ee:	f7ff f8eb 	bl	80077c8 <EE_ReadVariable>
	if (!res)											// This variable exists
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d000      	beq.n	80085f8 <SetButtonEvents+0x208>
 80085f6:	e770      	b.n	80084da <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 80085f8:	ab02      	add	r3, sp, #8
 80085fa:	3306      	adds	r3, #6
 80085fc:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 80085fe:	00fa      	lsls	r2, r7, #3
 8008600:	19d2      	adds	r2, r2, r7
 8008602:	4f27      	ldr	r7, [pc, #156]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008604:	18bf      	adds	r7, r7, r2
 8008606:	7a3a      	ldrb	r2, [r7, #8]
 8008608:	b2d9      	uxtb	r1, r3
 800860a:	4291      	cmp	r1, r2
 800860c:	d000      	beq.n	8008610 <SetButtonEvents+0x220>
 800860e:	e748      	b.n	80084a2 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 8008610:	1c63      	adds	r3, r4, #1
 8008612:	aa02      	add	r2, sp, #8
 8008614:	1d97      	adds	r7, r2, #6
 8008616:	0039      	movs	r1, r7
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	0018      	movs	r0, r3
 800861c:	f7ff f8d4 	bl	80077c8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 8008620:	0236      	lsls	r6, r6, #8
 8008622:	883a      	ldrh	r2, [r7, #0]
 8008624:	465b      	mov	r3, fp
 8008626:	4333      	orrs	r3, r6
		if (temp16
 8008628:	429a      	cmp	r2, r3
 800862a:	d000      	beq.n	800862e <SetButtonEvents+0x23e>
 800862c:	e742      	b.n	80084b4 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800862e:	1ca6      	adds	r6, r4, #2
 8008630:	ab02      	add	r3, sp, #8
 8008632:	1d9f      	adds	r7, r3, #6
 8008634:	0039      	movs	r1, r7
 8008636:	0030      	movs	r0, r6
 8008638:	f7ff f8c6 	bl	80077c8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800863c:	4643      	mov	r3, r8
 800863e:	0219      	lsls	r1, r3, #8
 8008640:	883a      	ldrh	r2, [r7, #0]
 8008642:	4653      	mov	r3, sl
 8008644:	430b      	orrs	r3, r1
		if (temp16
 8008646:	429a      	cmp	r2, r3
 8008648:	d000      	beq.n	800864c <SetButtonEvents+0x25c>
 800864a:	e738      	b.n	80084be <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800864c:	3403      	adds	r4, #3
 800864e:	ab02      	add	r3, sp, #8
 8008650:	1d9e      	adds	r6, r3, #6
 8008652:	0031      	movs	r1, r6
 8008654:	0020      	movs	r0, r4
 8008656:	f7ff f8b7 	bl	80077c8 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800865a:	022d      	lsls	r5, r5, #8
 800865c:	8832      	ldrh	r2, [r6, #0]
 800865e:	464b      	mov	r3, r9
 8008660:	432b      	orrs	r3, r5
	return result;
 8008662:	2000      	movs	r0, #0
		if (temp16
 8008664:	429a      	cmp	r2, r3
 8008666:	d100      	bne.n	800866a <SetButtonEvents+0x27a>
 8008668:	e730      	b.n	80084cc <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800866a:	0019      	movs	r1, r3
 800866c:	0020      	movs	r0, r4
 800866e:	f7ff f8db 	bl	8007828 <EE_WriteVariable>
	return result;
 8008672:	2000      	movs	r0, #0
 8008674:	e72a      	b.n	80084cc <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008676:	00fa      	lsls	r2, r7, #3
 8008678:	19d2      	adds	r2, r2, r7
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <SetButtonEvents+0x2b0>)
 800867c:	189b      	adds	r3, r3, r2
 800867e:	7a1a      	ldrb	r2, [r3, #8]
 8008680:	2140      	movs	r1, #64	; 0x40
 8008682:	438a      	bics	r2, r1
 8008684:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8008686:	464b      	mov	r3, r9
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1a1      	bne.n	80085d0 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800868c:	00fa      	lsls	r2, r7, #3
 800868e:	19d2      	adds	r2, r2, r7
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <SetButtonEvents+0x2b0>)
 8008692:	189b      	adds	r3, r3, r2
 8008694:	7a19      	ldrb	r1, [r3, #8]
 8008696:	227f      	movs	r2, #127	; 0x7f
 8008698:	400a      	ands	r2, r1
 800869a:	721a      	strb	r2, [r3, #8]
 800869c:	e7a1      	b.n	80085e2 <SetButtonEvents+0x1f2>
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	20000cb4 	.word	0x20000cb4

080086a4 <HAL_ADC_MspInit>:



}

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 80086a4:	b510      	push	{r4, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	0004      	movs	r4, r0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80086aa:	2214      	movs	r2, #20
 80086ac:	2100      	movs	r1, #0
 80086ae:	a803      	add	r0, sp, #12
 80086b0:	f00b f9c4 	bl	8013a3c <memset>
	if (adcHandle->Instance == ADC1) {
 80086b4:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <HAL_ADC_MspInit+0x7c>)
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <HAL_ADC_MspInit+0x1c>
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80086bc:	b008      	add	sp, #32
 80086be:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 80086c0:	4b18      	ldr	r3, [pc, #96]	; (8008724 <HAL_ADC_MspInit+0x80>)
 80086c2:	6999      	ldr	r1, [r3, #24]
 80086c4:	2080      	movs	r0, #128	; 0x80
 80086c6:	0080      	lsls	r0, r0, #2
 80086c8:	4301      	orrs	r1, r0
 80086ca:	6199      	str	r1, [r3, #24]
 80086cc:	699a      	ldr	r2, [r3, #24]
 80086ce:	4002      	ands	r2, r0
 80086d0:	9200      	str	r2, [sp, #0]
 80086d2:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80086d4:	6959      	ldr	r1, [r3, #20]
 80086d6:	2080      	movs	r0, #128	; 0x80
 80086d8:	0280      	lsls	r0, r0, #10
 80086da:	4301      	orrs	r1, r0
 80086dc:	6159      	str	r1, [r3, #20]
 80086de:	695a      	ldr	r2, [r3, #20]
 80086e0:	4002      	ands	r2, r0
 80086e2:	9201      	str	r2, [sp, #4]
 80086e4:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	2180      	movs	r1, #128	; 0x80
 80086ea:	02c9      	lsls	r1, r1, #11
 80086ec:	430a      	orrs	r2, r1
 80086ee:	615a      	str	r2, [r3, #20]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	400b      	ands	r3, r1
 80086f4:	9302      	str	r3, [sp, #8]
 80086f6:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
 80086f8:	23bc      	movs	r3, #188	; 0xbc
 80086fa:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086fc:	2403      	movs	r4, #3
 80086fe:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008700:	2090      	movs	r0, #144	; 0x90
 8008702:	a903      	add	r1, sp, #12
 8008704:	05c0      	lsls	r0, r0, #23
 8008706:	f009 fa0f 	bl	8011b28 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_1;
 800870a:	2302      	movs	r3, #2
 800870c:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800870e:	9404      	str	r4, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008710:	2300      	movs	r3, #0
 8008712:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008714:	a903      	add	r1, sp, #12
 8008716:	4804      	ldr	r0, [pc, #16]	; (8008728 <HAL_ADC_MspInit+0x84>)
 8008718:	f009 fa06 	bl	8011b28 <HAL_GPIO_Init>
}
 800871c:	e7ce      	b.n	80086bc <HAL_ADC_MspInit+0x18>
 800871e:	46c0      	nop			; (mov r8, r8)
 8008720:	40012400 	.word	0x40012400
 8008724:	40021000 	.word	0x40021000
 8008728:	48000400 	.word	0x48000400

0800872c <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800872c:	6803      	ldr	r3, [r0, #0]
 800872e:	4a0d      	ldr	r2, [pc, #52]	; (8008764 <Get_channel+0x38>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d003      	beq.n	800873c <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 8008734:	4a0c      	ldr	r2, [pc, #48]	; (8008768 <Get_channel+0x3c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d008      	beq.n	800874c <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800873a:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800873c:	4b0b      	ldr	r3, [pc, #44]	; (800876c <Get_channel+0x40>)
 800873e:	4299      	cmp	r1, r3
 8008740:	d00c      	beq.n	800875c <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <Get_channel+0x44>)
 8008744:	4299      	cmp	r1, r3
 8008746:	d1f8      	bne.n	800873a <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008748:	2003      	movs	r0, #3
 800874a:	e7f6      	b.n	800873a <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <Get_channel+0x40>)
 800874e:	4299      	cmp	r1, r3
 8008750:	d006      	beq.n	8008760 <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <Get_channel+0x44>)
 8008754:	4299      	cmp	r1, r3
 8008756:	d1f0      	bne.n	800873a <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008758:	2005      	movs	r0, #5
 800875a:	e7ee      	b.n	800873a <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800875c:	2002      	movs	r0, #2
 800875e:	e7ec      	b.n	800873a <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008760:	2004      	movs	r0, #4
 8008762:	e7ea      	b.n	800873a <Get_channel+0xe>
 8008764:	40004400 	.word	0x40004400
 8008768:	40011400 	.word	0x40011400
 800876c:	0801839c 	.word	0x0801839c
 8008770:	080183a0 	.word	0x080183a0

08008774 <Error_Handler>:

void Error_Handler(void) {
 8008774:	b510      	push	{r4, lr}

	HAL_Delay(100);
 8008776:	2064      	movs	r0, #100	; 0x64
 8008778:	f007 fe04 	bl	8010384 <HAL_Delay>

}
 800877c:	bd10      	pop	{r4, pc}
	...

08008780 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 8008780:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008782:	4811      	ldr	r0, [pc, #68]	; (80087c8 <MX_ADC_Init+0x48>)
 8008784:	4b11      	ldr	r3, [pc, #68]	; (80087cc <MX_ADC_Init+0x4c>)
 8008786:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008788:	2380      	movs	r3, #128	; 0x80
 800878a:	061b      	lsls	r3, r3, #24
 800878c:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800878e:	2300      	movs	r3, #0
 8008790:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008792:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008794:	2201      	movs	r2, #1
 8008796:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008798:	2104      	movs	r1, #4
 800879a:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800879c:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800879e:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 80087a0:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80087a2:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80087a4:	21c2      	movs	r1, #194	; 0xc2
 80087a6:	31ff      	adds	r1, #255	; 0xff
 80087a8:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80087aa:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 80087ac:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80087ae:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80087b0:	f007 fec2 	bl	8010538 <HAL_ADC_Init>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d103      	bne.n	80087c0 <MX_ADC_Init+0x40>
	ADC_flag = 1;
 80087b8:	4b05      	ldr	r3, [pc, #20]	; (80087d0 <MX_ADC_Init+0x50>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
}
 80087be:	bd10      	pop	{r4, pc}
		Error_Handler();
 80087c0:	f7ff ffd8 	bl	8008774 <Error_Handler>
 80087c4:	e7f8      	b.n	80087b8 <MX_ADC_Init+0x38>
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	200061e4 	.word	0x200061e4
 80087cc:	40012400 	.word	0x40012400
 80087d0:	20000ca1 	.word	0x20000ca1

080087d4 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 80087d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d6:	0006      	movs	r6, r0
 80087d8:	000d      	movs	r5, r1
	if (0 == ADC_flag) MX_ADC_Init();
 80087da:	4b44      	ldr	r3, [pc, #272]	; (80088ec <ReadTempAndVref+0x118>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d100      	bne.n	80087e4 <ReadTempAndVref+0x10>
 80087e2:	e073      	b.n	80088cc <ReadTempAndVref+0xf8>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80087e4:	4942      	ldr	r1, [pc, #264]	; (80088f0 <ReadTempAndVref+0x11c>)
 80087e6:	2310      	movs	r3, #16
 80087e8:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80087ea:	2380      	movs	r3, #128	; 0x80
 80087ec:	015b      	lsls	r3, r3, #5
 80087ee:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80087f0:	2301      	movs	r3, #1
 80087f2:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80087f4:	483f      	ldr	r0, [pc, #252]	; (80088f4 <ReadTempAndVref+0x120>)
 80087f6:	f008 f8db 	bl	80109b0 <HAL_ADC_ConfigChannel>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d000      	beq.n	8008800 <ReadTempAndVref+0x2c>
 80087fe:	e068      	b.n	80088d2 <ReadTempAndVref+0xfe>
	HAL_ADC_Start_IT(&hadc);
 8008800:	4c3c      	ldr	r4, [pc, #240]	; (80088f4 <ReadTempAndVref+0x120>)
 8008802:	0020      	movs	r0, r4
 8008804:	f007 fff2 	bl	80107ec <HAL_ADC_Start_IT>
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008808:	4b3b      	ldr	r3, [pc, #236]	; (80088f8 <ReadTempAndVref+0x124>)
 800880a:	8818      	ldrh	r0, [r3, #0]
 800880c:	f7fa f944 	bl	8002a98 <__aeabi_i2d>
 8008810:	4a3a      	ldr	r2, [pc, #232]	; (80088fc <ReadTempAndVref+0x128>)
 8008812:	4b3b      	ldr	r3, [pc, #236]	; (8008900 <ReadTempAndVref+0x12c>)
 8008814:	f7f9 fb34 	bl	8001e80 <__aeabi_dmul>
 8008818:	2200      	movs	r2, #0
 800881a:	4b3a      	ldr	r3, [pc, #232]	; (8008904 <ReadTempAndVref+0x130>)
 800881c:	f7f8 ff26 	bl	800166c <__aeabi_ddiv>
 8008820:	4a39      	ldr	r2, [pc, #228]	; (8008908 <ReadTempAndVref+0x134>)
 8008822:	4b3a      	ldr	r3, [pc, #232]	; (800890c <ReadTempAndVref+0x138>)
 8008824:	f7f9 fd9e 	bl	8002364 <__aeabi_dsub>
 8008828:	4a39      	ldr	r2, [pc, #228]	; (8008910 <ReadTempAndVref+0x13c>)
 800882a:	4b3a      	ldr	r3, [pc, #232]	; (8008914 <ReadTempAndVref+0x140>)
 800882c:	f7f8 ff1e 	bl	800166c <__aeabi_ddiv>
 8008830:	2200      	movs	r2, #0
 8008832:	4b39      	ldr	r3, [pc, #228]	; (8008918 <ReadTempAndVref+0x144>)
 8008834:	f7f8 fbfe 	bl	8001034 <__aeabi_dadd>
 8008838:	f7fa f9ec 	bl	8002c14 <__aeabi_d2f>
 800883c:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop_IT(&hadc);
 800883e:	0020      	movs	r0, r4
 8008840:	f008 f818 	bl	8010874 <HAL_ADC_Stop_IT>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008844:	492a      	ldr	r1, [pc, #168]	; (80088f0 <ReadTempAndVref+0x11c>)
 8008846:	2310      	movs	r3, #16
 8008848:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800884a:	4b34      	ldr	r3, [pc, #208]	; (800891c <ReadTempAndVref+0x148>)
 800884c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800884e:	2301      	movs	r3, #1
 8008850:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008852:	0020      	movs	r0, r4
 8008854:	f008 f8ac 	bl	80109b0 <HAL_ADC_ConfigChannel>
 8008858:	2800      	cmp	r0, #0
 800885a:	d13d      	bne.n	80088d8 <ReadTempAndVref+0x104>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800885c:	4924      	ldr	r1, [pc, #144]	; (80088f0 <ReadTempAndVref+0x11c>)
 800885e:	2311      	movs	r3, #17
 8008860:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008862:	2380      	movs	r3, #128	; 0x80
 8008864:	015b      	lsls	r3, r3, #5
 8008866:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008868:	2305      	movs	r3, #5
 800886a:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800886c:	4821      	ldr	r0, [pc, #132]	; (80088f4 <ReadTempAndVref+0x120>)
 800886e:	f008 f89f 	bl	80109b0 <HAL_ADC_ConfigChannel>
 8008872:	2800      	cmp	r0, #0
 8008874:	d133      	bne.n	80088de <ReadTempAndVref+0x10a>
	HAL_ADC_Start_IT(&hadc);
 8008876:	4c1f      	ldr	r4, [pc, #124]	; (80088f4 <ReadTempAndVref+0x120>)
 8008878:	0020      	movs	r0, r4
 800887a:	f007 ffb7 	bl	80107ec <HAL_ADC_Start_IT>
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800887e:	4b28      	ldr	r3, [pc, #160]	; (8008920 <ReadTempAndVref+0x14c>)
 8008880:	8818      	ldrh	r0, [r3, #0]
 8008882:	f7fa f909 	bl	8002a98 <__aeabi_i2d>
 8008886:	4a1d      	ldr	r2, [pc, #116]	; (80088fc <ReadTempAndVref+0x128>)
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <ReadTempAndVref+0x12c>)
 800888a:	f7f9 faf9 	bl	8001e80 <__aeabi_dmul>
 800888e:	0006      	movs	r6, r0
 8008890:	000f      	movs	r7, r1
 8008892:	4b24      	ldr	r3, [pc, #144]	; (8008924 <ReadTempAndVref+0x150>)
 8008894:	8818      	ldrh	r0, [r3, #0]
 8008896:	f7fa f8ff 	bl	8002a98 <__aeabi_i2d>
 800889a:	0002      	movs	r2, r0
 800889c:	000b      	movs	r3, r1
 800889e:	0030      	movs	r0, r6
 80088a0:	0039      	movs	r1, r7
 80088a2:	f7f8 fee3 	bl	800166c <__aeabi_ddiv>
 80088a6:	f7fa f9b5 	bl	8002c14 <__aeabi_d2f>
 80088aa:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop_IT(&hadc);
 80088ac:	0020      	movs	r0, r4
 80088ae:	f007 ffe1 	bl	8010874 <HAL_ADC_Stop_IT>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80088b2:	490f      	ldr	r1, [pc, #60]	; (80088f0 <ReadTempAndVref+0x11c>)
 80088b4:	2311      	movs	r3, #17
 80088b6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80088b8:	4b18      	ldr	r3, [pc, #96]	; (800891c <ReadTempAndVref+0x148>)
 80088ba:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80088bc:	2301      	movs	r3, #1
 80088be:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80088c0:	0020      	movs	r0, r4
 80088c2:	f008 f875 	bl	80109b0 <HAL_ADC_ConfigChannel>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d10c      	bne.n	80088e4 <ReadTempAndVref+0x110>
}
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (0 == ADC_flag) MX_ADC_Init();
 80088cc:	f7ff ff58 	bl	8008780 <MX_ADC_Init>
 80088d0:	e788      	b.n	80087e4 <ReadTempAndVref+0x10>
		Error_Handler();
 80088d2:	f7ff ff4f 	bl	8008774 <Error_Handler>
 80088d6:	e793      	b.n	8008800 <ReadTempAndVref+0x2c>
		Error_Handler();
 80088d8:	f7ff ff4c 	bl	8008774 <Error_Handler>
 80088dc:	e7be      	b.n	800885c <ReadTempAndVref+0x88>
		Error_Handler();
 80088de:	f7ff ff49 	bl	8008774 <Error_Handler>
 80088e2:	e7c8      	b.n	8008876 <ReadTempAndVref+0xa2>
		Error_Handler();
 80088e4:	f7ff ff46 	bl	8008774 <Error_Handler>
}
 80088e8:	e7ef      	b.n	80088ca <ReadTempAndVref+0xf6>
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	20000ca1 	.word	0x20000ca1
 80088f0:	20000d28 	.word	0x20000d28
 80088f4:	200061e4 	.word	0x200061e4
 80088f8:	20000ca4 	.word	0x20000ca4
 80088fc:	66666666 	.word	0x66666666
 8008900:	400a6666 	.word	0x400a6666
 8008904:	40affe00 	.word	0x40affe00
 8008908:	28f5c28f 	.word	0x28f5c28f
 800890c:	3ff68f5c 	.word	0x3ff68f5c
 8008910:	33333333 	.word	0x33333333
 8008914:	40113333 	.word	0x40113333
 8008918:	40390000 	.word	0x40390000
 800891c:	00001001 	.word	0x00001001
 8008920:	1ffff7ba 	.word	0x1ffff7ba
 8008924:	20000ca2 	.word	0x20000ca2

08008928 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	0004      	movs	r4, r0
 800892e:	000d      	movs	r5, r1
	ADC_MODE=1;
 8008930:	4b3e      	ldr	r3, [pc, #248]	; (8008a2c <GetReadPrecentage+0x104>)
 8008932:	2201      	movs	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
	if (port == 2 || port == 3) {
 8008936:	1e83      	subs	r3, r0, #2
 8008938:	2b01      	cmp	r3, #1
 800893a:	d901      	bls.n	8008940 <GetReadPrecentage+0x18>
}
 800893c:	b006      	add	sp, #24
 800893e:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 8008940:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <GetReadPrecentage+0x108>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d04d      	beq.n	80089e4 <GetReadPrecentage+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008948:	2090      	movs	r0, #144	; 0x90
 800894a:	2201      	movs	r2, #1
 800894c:	2110      	movs	r1, #16
 800894e:	05c0      	lsls	r0, r0, #23
 8008950:	f009 fa5e 	bl	8011e10 <HAL_GPIO_WritePin>
		Channel = Get_channel(GetUart(port), "bottom");
 8008954:	0020      	movs	r0, r4
 8008956:	f005 fb9f 	bl	800e098 <GetUart>
 800895a:	4936      	ldr	r1, [pc, #216]	; (8008a34 <GetReadPrecentage+0x10c>)
 800895c:	f7ff fee6 	bl	800872c <Get_channel>
 8008960:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <GetReadPrecentage+0x110>)
 8008962:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008964:	4935      	ldr	r1, [pc, #212]	; (8008a3c <GetReadPrecentage+0x114>)
 8008966:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008968:	2380      	movs	r3, #128	; 0x80
 800896a:	015b      	lsls	r3, r3, #5
 800896c:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800896e:	2301      	movs	r3, #1
 8008970:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008972:	4833      	ldr	r0, [pc, #204]	; (8008a40 <GetReadPrecentage+0x118>)
 8008974:	f008 f81c 	bl	80109b0 <HAL_ADC_ConfigChannel>
 8008978:	2800      	cmp	r0, #0
 800897a:	d153      	bne.n	8008a24 <GetReadPrecentage+0xfc>
		HAL_ADC_Start_IT(&hadc);
 800897c:	4c30      	ldr	r4, [pc, #192]	; (8008a40 <GetReadPrecentage+0x118>)
 800897e:	0020      	movs	r0, r4
 8008980:	f007 ff34 	bl	80107ec <HAL_ADC_Start_IT>
		ADCchannelvalue[4] = 3.3 * ADCchannelvalue[4] / 4095;
 8008984:	4e2f      	ldr	r6, [pc, #188]	; (8008a44 <GetReadPrecentage+0x11c>)
 8008986:	8930      	ldrh	r0, [r6, #8]
 8008988:	f7fa f886 	bl	8002a98 <__aeabi_i2d>
 800898c:	4a2e      	ldr	r2, [pc, #184]	; (8008a48 <GetReadPrecentage+0x120>)
 800898e:	4b2f      	ldr	r3, [pc, #188]	; (8008a4c <GetReadPrecentage+0x124>)
 8008990:	f7f9 fa76 	bl	8001e80 <__aeabi_dmul>
 8008994:	2200      	movs	r2, #0
 8008996:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <GetReadPrecentage+0x128>)
 8008998:	f7f8 fe68 	bl	800166c <__aeabi_ddiv>
 800899c:	f7f7 fdfe 	bl	800059c <__aeabi_d2uiz>
 80089a0:	b280      	uxth	r0, r0
 80089a2:	8130      	strh	r0, [r6, #8]
		current=(100*ADCchannelvalue[4])/3.3;
 80089a4:	2364      	movs	r3, #100	; 0x64
 80089a6:	4358      	muls	r0, r3
 80089a8:	f7fa f876 	bl	8002a98 <__aeabi_i2d>
 80089ac:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <GetReadPrecentage+0x120>)
 80089ae:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <GetReadPrecentage+0x124>)
 80089b0:	f7f8 fe5c 	bl	800166c <__aeabi_ddiv>
 80089b4:	f7fa f92e 	bl	8002c14 <__aeabi_d2f>
 80089b8:	4b26      	ldr	r3, [pc, #152]	; (8008a54 <GetReadPrecentage+0x12c>)
 80089ba:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 80089bc:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop_IT(&hadc);
 80089be:	0020      	movs	r0, r4
 80089c0:	f007 ff58 	bl	8010874 <HAL_ADC_Stop_IT>
		sConfig.Channel = Channel;
 80089c4:	491d      	ldr	r1, [pc, #116]	; (8008a3c <GetReadPrecentage+0x114>)
 80089c6:	4b1c      	ldr	r3, [pc, #112]	; (8008a38 <GetReadPrecentage+0x110>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 80089cc:	4b22      	ldr	r3, [pc, #136]	; (8008a58 <GetReadPrecentage+0x130>)
 80089ce:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80089d0:	2301      	movs	r3, #1
 80089d2:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80089d4:	0020      	movs	r0, r4
 80089d6:	f007 ffeb 	bl	80109b0 <HAL_ADC_ConfigChannel>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d0ae      	beq.n	800893c <GetReadPrecentage+0x14>
			Error_Handler();
 80089de:	f7ff fec9 	bl	8008774 <Error_Handler>
 80089e2:	e7ab      	b.n	800893c <GetReadPrecentage+0x14>
			MX_ADC_Init();
 80089e4:	f7ff fecc 	bl	8008780 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 80089e8:	0020      	movs	r0, r4
 80089ea:	f005 fb55 	bl	800e098 <GetUart>
 80089ee:	f00a f9ec 	bl	8012dca <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 80089f2:	2690      	movs	r6, #144	; 0x90
 80089f4:	05f6      	lsls	r6, r6, #23
 80089f6:	2110      	movs	r1, #16
 80089f8:	0030      	movs	r0, r6
 80089fa:	f009 f975 	bl	8011ce8 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 80089fe:	4810      	ldr	r0, [pc, #64]	; (8008a40 <GetReadPrecentage+0x118>)
 8008a00:	f008 f87a 	bl	8010af8 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008a04:	2310      	movs	r3, #16
 8008a06:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a08:	3b0f      	subs	r3, #15
 8008a0a:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008a0c:	3302      	adds	r3, #2
 8008a0e:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a10:	a901      	add	r1, sp, #4
 8008a12:	0030      	movs	r0, r6
 8008a14:	f009 f888 	bl	8011b28 <HAL_GPIO_Init>
			portStatus[port - 1] = CUSTOM;
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <GetReadPrecentage+0x134>)
 8008a1a:	191b      	adds	r3, r3, r4
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	2206      	movs	r2, #6
 8008a20:	701a      	strb	r2, [r3, #0]
 8008a22:	e791      	b.n	8008948 <GetReadPrecentage+0x20>
			Error_Handler();
 8008a24:	f7ff fea6 	bl	8008774 <Error_Handler>
 8008a28:	e7a8      	b.n	800897c <GetReadPrecentage+0x54>
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	20000ca0 	.word	0x20000ca0
 8008a30:	20000ca1 	.word	0x20000ca1
 8008a34:	080183a0 	.word	0x080183a0
 8008a38:	20000cb2 	.word	0x20000cb2
 8008a3c:	20000d28 	.word	0x20000d28
 8008a40:	200061e4 	.word	0x200061e4
 8008a44:	20000ca8 	.word	0x20000ca8
 8008a48:	66666666 	.word	0x66666666
 8008a4c:	400a6666 	.word	0x400a6666
 8008a50:	40affe00 	.word	0x40affe00
 8008a54:	20000cec 	.word	0x20000cec
 8008a58:	00001001 	.word	0x00001001
 8008a5c:	200008e0 	.word	0x200008e0

08008a60 <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008a60:	2802      	cmp	r0, #2
 8008a62:	d004      	beq.n	8008a6e <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008a64:	2803      	cmp	r0, #3
 8008a66:	d010      	beq.n	8008a8a <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 8008a68:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <Get_Rank+0x48>)
 8008a6a:	7818      	ldrb	r0, [r3, #0]
}
 8008a6c:	4770      	bx	lr
	if (Port == 2 && side == "top")
 8008a6e:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <Get_Rank+0x4c>)
 8008a70:	4299      	cmp	r1, r3
 8008a72:	d006      	beq.n	8008a82 <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 8008a74:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <Get_Rank+0x50>)
 8008a76:	4299      	cmp	r1, r3
 8008a78:	d1f6      	bne.n	8008a68 <Get_Rank+0x8>
		Rank_t = 1;
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <Get_Rank+0x48>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e7f2      	b.n	8008a68 <Get_Rank+0x8>
		Rank_t = 0;
 8008a82:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <Get_Rank+0x48>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e7ee      	b.n	8008a68 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 8008a8a:	4b08      	ldr	r3, [pc, #32]	; (8008aac <Get_Rank+0x4c>)
 8008a8c:	4299      	cmp	r1, r3
 8008a8e:	d006      	beq.n	8008a9e <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <Get_Rank+0x50>)
 8008a92:	4299      	cmp	r1, r3
 8008a94:	d1e8      	bne.n	8008a68 <Get_Rank+0x8>
		Rank_t = 3;
 8008a96:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <Get_Rank+0x48>)
 8008a98:	2203      	movs	r2, #3
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	e7e4      	b.n	8008a68 <Get_Rank+0x8>
		Rank_t = 2;
 8008a9e:	4b02      	ldr	r3, [pc, #8]	; (8008aa8 <Get_Rank+0x48>)
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	e7e0      	b.n	8008a68 <Get_Rank+0x8>
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	20000cb3 	.word	0x20000cb3
 8008aac:	0801839c 	.word	0x0801839c
 8008ab0:	080183a0 	.word	0x080183a0

08008ab4 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	0004      	movs	r4, r0
 8008ab8:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008aba:	1e83      	subs	r3, r0, #2
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d900      	bls.n	8008ac2 <ADCSelectChannel+0xe>
}
 8008ac0:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008ac2:	f005 fae9 	bl	800e098 <GetUart>
 8008ac6:	f00a f980 	bl	8012dca <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008aca:	4b0d      	ldr	r3, [pc, #52]	; (8008b00 <ADCSelectChannel+0x4c>)
 8008acc:	191b      	adds	r3, r3, r4
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	2206      	movs	r2, #6
 8008ad2:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008ad4:	0020      	movs	r0, r4
 8008ad6:	f005 fadf 	bl	800e098 <GetUart>
 8008ada:	0029      	movs	r1, r5
 8008adc:	f7ff fe26 	bl	800872c <Get_channel>
 8008ae0:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <ADCSelectChannel+0x50>)
 8008ae2:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 8008ae4:	0029      	movs	r1, r5
 8008ae6:	0020      	movs	r0, r4
 8008ae8:	f7ff ffba 	bl	8008a60 <Get_Rank>
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <ADCSelectChannel+0x54>)
 8008aee:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 8008af0:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <ADCSelectChannel+0x58>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e3      	bne.n	8008ac0 <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008af8:	f7ff fe42 	bl	8008780 <MX_ADC_Init>
}
 8008afc:	e7e0      	b.n	8008ac0 <ADCSelectChannel+0xc>
 8008afe:	46c0      	nop			; (mov r8, r8)
 8008b00:	200008e0 	.word	0x200008e0
 8008b04:	20000cb2 	.word	0x20000cb2
 8008b08:	20000cb3 	.word	0x20000cb3
 8008b0c:	20000ca1 	.word	0x20000ca1

08008b10 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	0005      	movs	r5, r0
 8008b14:	000e      	movs	r6, r1
 8008b16:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 8008b18:	4b23      	ldr	r3, [pc, #140]	; (8008ba8 <ReadADCChannel+0x98>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d008      	beq.n	8008b32 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008b20:	4b22      	ldr	r3, [pc, #136]	; (8008bac <ReadADCChannel+0x9c>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	005b      	lsls	r3, r3, #1
 8008b26:	4a22      	ldr	r2, [pc, #136]	; (8008bb0 <ReadADCChannel+0xa0>)
 8008b28:	5a98      	ldrh	r0, [r3, r2]
 8008b2a:	f7f8 fa43 	bl	8000fb4 <__aeabi_ui2f>
 8008b2e:	6020      	str	r0, [r4, #0]
}
 8008b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ADC_MODE=0;
 8008b32:	4b20      	ldr	r3, [pc, #128]	; (8008bb4 <ReadADCChannel+0xa4>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(Port), side);
 8008b38:	f005 faae 	bl	800e098 <GetUart>
 8008b3c:	0031      	movs	r1, r6
 8008b3e:	f7ff fdf5 	bl	800872c <Get_channel>
 8008b42:	4f1d      	ldr	r7, [pc, #116]	; (8008bb8 <ReadADCChannel+0xa8>)
 8008b44:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 8008b46:	0031      	movs	r1, r6
 8008b48:	0028      	movs	r0, r5
 8008b4a:	f7ff ff89 	bl	8008a60 <Get_Rank>
 8008b4e:	4b17      	ldr	r3, [pc, #92]	; (8008bac <ReadADCChannel+0x9c>)
 8008b50:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008b52:	491a      	ldr	r1, [pc, #104]	; (8008bbc <ReadADCChannel+0xac>)
 8008b54:	783b      	ldrb	r3, [r7, #0]
 8008b56:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b58:	2380      	movs	r3, #128	; 0x80
 8008b5a:	015b      	lsls	r3, r3, #5
 8008b5c:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b62:	4817      	ldr	r0, [pc, #92]	; (8008bc0 <ReadADCChannel+0xb0>)
 8008b64:	f007 ff24 	bl	80109b0 <HAL_ADC_ConfigChannel>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d119      	bne.n	8008ba0 <ReadADCChannel+0x90>
		HAL_ADC_Start_IT(&hadc);
 8008b6c:	4d14      	ldr	r5, [pc, #80]	; (8008bc0 <ReadADCChannel+0xb0>)
 8008b6e:	0028      	movs	r0, r5
 8008b70:	f007 fe3c 	bl	80107ec <HAL_ADC_Start_IT>
		Delay_us(10);
 8008b74:	200a      	movs	r0, #10
 8008b76:	f005 f8eb 	bl	800dd50 <StartMicroDelay>
		HAL_ADC_Stop_IT(&hadc);
 8008b7a:	0028      	movs	r0, r5
 8008b7c:	f007 fe7a 	bl	8010874 <HAL_ADC_Stop_IT>
		sConfig.Channel = Channel;
 8008b80:	490e      	ldr	r1, [pc, #56]	; (8008bbc <ReadADCChannel+0xac>)
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <ReadADCChannel+0xa8>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008b88:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <ReadADCChannel+0xb4>)
 8008b8a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008b90:	0028      	movs	r0, r5
 8008b92:	f007 ff0d 	bl	80109b0 <HAL_ADC_ConfigChannel>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d0c2      	beq.n	8008b20 <ReadADCChannel+0x10>
			Error_Handler();
 8008b9a:	f7ff fdeb 	bl	8008774 <Error_Handler>
 8008b9e:	e7bf      	b.n	8008b20 <ReadADCChannel+0x10>
			Error_Handler();
 8008ba0:	f7ff fde8 	bl	8008774 <Error_Handler>
 8008ba4:	e7e2      	b.n	8008b6c <ReadADCChannel+0x5c>
 8008ba6:	46c0      	nop			; (mov r8, r8)
 8008ba8:	20000ca1 	.word	0x20000ca1
 8008bac:	20000cb3 	.word	0x20000cb3
 8008bb0:	20000ca8 	.word	0x20000ca8
 8008bb4:	20000ca0 	.word	0x20000ca0
 8008bb8:	20000cb2 	.word	0x20000cb2
 8008bbc:	20000d28 	.word	0x20000d28
 8008bc0:	200061e4 	.word	0x200061e4
 8008bc4:	00001001 	.word	0x00001001

08008bc8 <HAL_ADC_ConvCpltCallback>:
//		{
//			ADCchannelvalue[4] = HAL_ADC_GetValue(hadc);
//		}
//
//	}
}
 8008bc8:	4770      	bx	lr

08008bca <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 8008bca:	4770      	bx	lr

08008bcc <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 8008bcc:	4770      	bx	lr

08008bce <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 8008bce:	4770      	bx	lr

08008bd0 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8008bd0:	4770      	bx	lr

08008bd2 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 8008bd2:	4770      	bx	lr

08008bd4 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	46de      	mov	lr, fp
 8008bd8:	4657      	mov	r7, sl
 8008bda:	464e      	mov	r6, r9
 8008bdc:	4645      	mov	r5, r8
 8008bde:	b5e0      	push	{r5, r6, r7, lr}
 8008be0:	b089      	sub	sp, #36	; 0x24
 8008be2:	4dbd      	ldr	r5, [pc, #756]	; (8008ed8 <CheckAttachedButtons+0x304>)
 8008be4:	2404      	movs	r4, #4
 8008be6:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	469b      	mov	fp, r3
 8008bec:	4699      	mov	r9, r3
 8008bee:	e111      	b.n	8008e14 <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 8008bf0:	230e      	movs	r3, #14
 8008bf2:	aa02      	add	r2, sp, #8
 8008bf4:	4694      	mov	ip, r2
 8008bf6:	4463      	add	r3, ip
 8008bf8:	8819      	ldrh	r1, [r3, #0]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	9807      	ldr	r0, [sp, #28]
 8008bfe:	f009 f907 	bl	8011e10 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008c02:	200a      	movs	r0, #10
 8008c04:	f005 f8a4 	bl	800dd50 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8008c08:	ab05      	add	r3, sp, #20
 8008c0a:	8819      	ldrh	r1, [r3, #0]
 8008c0c:	9806      	ldr	r0, [sp, #24]
 8008c0e:	f009 f8f9 	bl	8011e04 <HAL_GPIO_ReadPin>
 8008c12:	4681      	mov	r9, r0
 8008c14:	e126      	b.n	8008e64 <CheckAttachedButtons+0x290>
			switch (button[i].type) {
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d105      	bne.n	8008c26 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d046      	beq.n	8008cae <CheckAttachedButtons+0xda>
				else if (connected == GPIO_PIN_RESET)
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d100      	bne.n	8008c26 <CheckAttachedButtons+0x52>
 8008c24:	e1c6      	b.n	8008fb4 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 8008c26:	465b      	mov	r3, fp
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d001      	beq.n	8008c30 <CheckAttachedButtons+0x5c>
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d107      	bne.n	8008c40 <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)
 8008c30:	4baa      	ldr	r3, [pc, #680]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c32:	58e3      	ldr	r3, [r4, r3]
 8008c34:	4aaa      	ldr	r2, [pc, #680]	; (8008ee0 <CheckAttachedButtons+0x30c>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d842      	bhi.n	8008cc0 <CheckAttachedButtons+0xec>
					++pressCounter[i];			// Advance the debounce counter
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	4aa7      	ldr	r2, [pc, #668]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c3e:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 8008c40:	23fd      	movs	r3, #253	; 0xfd
 8008c42:	465a      	mov	r2, fp
 8008c44:	4013      	ands	r3, r2
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d100      	bne.n	8008c4c <CheckAttachedButtons+0x78>
 8008c4a:	e1b7      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 8008c4c:	4ba3      	ldr	r3, [pc, #652]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c4e:	58e3      	ldr	r3, [r4, r3]
 8008c50:	4aa4      	ldr	r2, [pc, #656]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c52:	8812      	ldrh	r2, [r2, #0]
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d36f      	bcc.n	8008d38 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce) {
 8008c58:	d045      	beq.n	8008ce6 <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8008c5a:	4ba3      	ldr	r3, [pc, #652]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c5c:	58e3      	ldr	r3, [r4, r3]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d202      	bcs.n	8008c68 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;
 8008c62:	4ba1      	ldr	r3, [pc, #644]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 8008c68:	4b9c      	ldr	r3, [pc, #624]	; (8008edc <CheckAttachedButtons+0x308>)
 8008c6a:	58e3      	ldr	r3, [r4, r3]
 8008c6c:	4a9d      	ldr	r2, [pc, #628]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008c6e:	8852      	ldrh	r2, [r2, #2]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d952      	bls.n	8008d1a <CheckAttachedButtons+0x146>
						&& pressCounter[i] < 500) {
 8008c74:	22f4      	movs	r2, #244	; 0xf4
 8008c76:	32ff      	adds	r2, #255	; 0xff
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d84e      	bhi.n	8008d1a <CheckAttachedButtons+0x146>
					if (clicked == 0)
 8008c7c:	4b9b      	ldr	r3, [pc, #620]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d137      	bne.n	8008cf4 <CheckAttachedButtons+0x120>
						clicked = 1;		// Record a possible single click
 8008c84:	4b99      	ldr	r3, [pc, #612]	; (8008eec <CheckAttachedButtons+0x318>)
 8008c86:	3af3      	subs	r2, #243	; 0xf3
 8008c88:	3aff      	subs	r2, #255	; 0xff
 8008c8a:	701a      	strb	r2, [r3, #0]
 8008c8c:	e054      	b.n	8008d38 <CheckAttachedButtons+0x164>
				if (connected == GPIO_PIN_SET)
 8008c8e:	464b      	mov	r3, r9
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d00f      	beq.n	8008cb4 <CheckAttachedButtons+0xe0>
				else if (connected == GPIO_PIN_RESET)
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1c6      	bne.n	8008c26 <CheckAttachedButtons+0x52>
					state = OPEN;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	469b      	mov	fp, r3
 8008c9c:	e18e      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d00a      	beq.n	8008cba <CheckAttachedButtons+0xe6>
				else if (connected == GPIO_PIN_RESET)
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1be      	bne.n	8008c26 <CheckAttachedButtons+0x52>
					state = OFF;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	469b      	mov	fp, r3
 8008cac:	e186      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 8008cae:	2304      	movs	r3, #4
 8008cb0:	469b      	mov	fp, r3
 8008cb2:	e7bd      	b.n	8008c30 <CheckAttachedButtons+0x5c>
					state = CLOSED;
 8008cb4:	2304      	movs	r3, #4
 8008cb6:	469b      	mov	fp, r3
 8008cb8:	e7ba      	b.n	8008c30 <CheckAttachedButtons+0x5c>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	469b      	mov	fp, r3
 8008cbe:	e7b7      	b.n	8008c30 <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;			// Reset debounce counter
 8008cc0:	4b86      	ldr	r3, [pc, #536]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	50e2      	str	r2, [r4, r3]
 8008cc6:	e7bb      	b.n	8008c40 <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;		// Reset debounce counter
 8008cc8:	4b87      	ldr	r3, [pc, #540]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	50e2      	str	r2, [r4, r3]
 8008cce:	e17e      	b.n	8008fce <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 8008cd0:	4b87      	ldr	r3, [pc, #540]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cd2:	5cf3      	ldrb	r3, [r6, r3]
 8008cd4:	4a83      	ldr	r2, [pc, #524]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008cd6:	7952      	ldrb	r2, [r2, #5]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d200      	bcs.n	8008cde <CheckAttachedButtons+0x10a>
 8008cdc:	e183      	b.n	8008fe6 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 8008cde:	3301      	adds	r3, #1
 8008ce0:	4a83      	ldr	r2, [pc, #524]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008ce2:	54b3      	strb	r3, [r6, r2]
 8008ce4:	e7b2      	b.n	8008c4c <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8008ce6:	2107      	movs	r1, #7
 8008ce8:	4640      	mov	r0, r8
 8008cea:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 8008cec:	3301      	adds	r3, #1
 8008cee:	497b      	ldr	r1, [pc, #492]	; (8008edc <CheckAttachedButtons+0x308>)
 8008cf0:	5063      	str	r3, [r4, r1]
 8008cf2:	e7b2      	b.n	8008c5a <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d11f      	bne.n	8008d38 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8008cf8:	4b7d      	ldr	r3, [pc, #500]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008cfa:	5cf3      	ldrb	r3, [r6, r3]
 8008cfc:	4a79      	ldr	r2, [pc, #484]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008cfe:	7912      	ldrb	r2, [r2, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d219      	bcs.n	8008d38 <CheckAttachedButtons+0x164>
										< BOS.buttons.maxInterClickTime) {
 8008d04:	4a77      	ldr	r2, [pc, #476]	; (8008ee4 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 8008d06:	7952      	ldrb	r2, [r2, #5]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d915      	bls.n	8008d38 <CheckAttachedButtons+0x164>
							clicked = 3;	// Record a possible double click
 8008d0c:	4b77      	ldr	r3, [pc, #476]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d0e:	2203      	movs	r2, #3
 8008d10:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 8008d12:	4b77      	ldr	r3, [pc, #476]	; (8008ef0 <CheckAttachedButtons+0x31c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	54f2      	strb	r2, [r6, r3]
 8008d18:	e00e      	b.n	8008d38 <CheckAttachedButtons+0x164>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8008d1a:	3bf5      	subs	r3, #245	; 0xf5
 8008d1c:	3bff      	subs	r3, #255	; 0xff
 8008d1e:	4a75      	ldr	r2, [pc, #468]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d809      	bhi.n	8008d38 <CheckAttachedButtons+0x164>
					if (clicked)
 8008d24:	4b71      	ldr	r3, [pc, #452]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d002      	beq.n	8008d32 <CheckAttachedButtons+0x15e>
						clicked = 0;						// Cannot be a click
 8008d2c:	4b6f      	ldr	r3, [pc, #444]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8008d32:	9803      	ldr	r0, [sp, #12]
 8008d34:	f7ff f9c8 	bl	80080c8 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8008d38:	4b6b      	ldr	r3, [pc, #428]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d3a:	58e3      	ldr	r3, [r4, r3]
 8008d3c:	4a69      	ldr	r2, [pc, #420]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d3e:	8812      	ldrh	r2, [r2, #0]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d34d      	bcc.n	8008de0 <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 8008d44:	d02b      	beq.n	8008d9e <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008d46:	4b65      	ldr	r3, [pc, #404]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d48:	58e3      	ldr	r3, [r4, r3]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d202      	bcs.n	8008d54 <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;
 8008d4e:	4b63      	ldr	r3, [pc, #396]	; (8008edc <CheckAttachedButtons+0x308>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 8008d54:	4b64      	ldr	r3, [pc, #400]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008d56:	58e3      	ldr	r3, [r4, r3]
 8008d58:	4a62      	ldr	r2, [pc, #392]	; (8008ee4 <CheckAttachedButtons+0x310>)
 8008d5a:	8852      	ldrh	r2, [r2, #2]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d93a      	bls.n	8008dd6 <CheckAttachedButtons+0x202>
						&& releaseCounter[i] < 500) {
 8008d60:	22f4      	movs	r2, #244	; 0xf4
 8008d62:	32ff      	adds	r2, #255	; 0xff
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d836      	bhi.n	8008dd6 <CheckAttachedButtons+0x202>
					if (clicked == 1) {
 8008d68:	4b60      	ldr	r3, [pc, #384]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d01d      	beq.n	8008dac <CheckAttachedButtons+0x1d8>
					} else if (clicked == 3) {
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d135      	bne.n	8008de0 <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;// Record a double button click event
 8008d74:	3303      	adds	r3, #3
 8008d76:	4642      	mov	r2, r8
 8008d78:	7253      	strb	r3, [r2, #9]
						clicked = 0;			// Prepare for a single click
 8008d7a:	4b5c      	ldr	r3, [pc, #368]	; (8008eec <CheckAttachedButtons+0x318>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 8008d80:	4b5d      	ldr	r3, [pc, #372]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d13f      	bne.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 8008d88:	4643      	mov	r3, r8
 8008d8a:	7c5b      	ldrb	r3, [r3, #17]
 8008d8c:	079b      	lsls	r3, r3, #30
 8008d8e:	d53b      	bpl.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008d90:	4b59      	ldr	r3, [pc, #356]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 8008d96:	9803      	ldr	r0, [sp, #12]
 8008d98:	f7ff ff19 	bl	8008bce <buttonDblClickedCallback>
 8008d9c:	e034      	b.n	8008e08 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8008d9e:	2108      	movs	r1, #8
 8008da0:	4640      	mov	r0, r8
 8008da2:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 8008da4:	3301      	adds	r3, #1
 8008da6:	4950      	ldr	r1, [pc, #320]	; (8008ee8 <CheckAttachedButtons+0x314>)
 8008da8:	5063      	str	r3, [r4, r1]
 8008daa:	e7cc      	b.n	8008d46 <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;// Record a single button click event
 8008dac:	3304      	adds	r3, #4
 8008dae:	4642      	mov	r2, r8
 8008db0:	7253      	strb	r3, [r2, #9]
						clicked = 2;			// Prepare for a double click
 8008db2:	4b4e      	ldr	r3, [pc, #312]	; (8008eec <CheckAttachedButtons+0x318>)
 8008db4:	2202      	movs	r2, #2
 8008db6:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 8008db8:	4b4f      	ldr	r3, [pc, #316]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d123      	bne.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 8008dc0:	4643      	mov	r3, r8
 8008dc2:	7c5b      	ldrb	r3, [r3, #17]
 8008dc4:	07db      	lsls	r3, r3, #31
 8008dc6:	d51f      	bpl.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008dc8:	4b4b      	ldr	r3, [pc, #300]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008dca:	2201      	movs	r2, #1
 8008dcc:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 8008dce:	9803      	ldr	r0, [sp, #12]
 8008dd0:	f7ff fefc 	bl	8008bcc <buttonClickedCallback>
 8008dd4:	e018      	b.n	8008e08 <CheckAttachedButtons+0x234>
						&& releaseCounter[i] < 0xFFFF) {
 8008dd6:	3bf5      	subs	r3, #245	; 0xf5
 8008dd8:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 8008dda:	4a46      	ldr	r2, [pc, #280]	; (8008ef4 <CheckAttachedButtons+0x320>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d909      	bls.n	8008df4 <CheckAttachedButtons+0x220>
			switch (button[i].state) {
 8008de0:	4643      	mov	r3, r8
 8008de2:	7a5b      	ldrb	r3, [r3, #9]
 8008de4:	3b05      	subs	r3, #5
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	2a09      	cmp	r2, #9
 8008dea:	d80d      	bhi.n	8008e08 <CheckAttachedButtons+0x234>
 8008dec:	0093      	lsls	r3, r2, #2
 8008dee:	4a43      	ldr	r2, [pc, #268]	; (8008efc <CheckAttachedButtons+0x328>)
 8008df0:	58d3      	ldr	r3, [r2, r3]
 8008df2:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8008df4:	9803      	ldr	r0, [sp, #12]
 8008df6:	f7ff f9a5 	bl	8008144 <CheckForTimedButtonRelease>
 8008dfa:	e7f1      	b.n	8008de0 <CheckAttachedButtons+0x20c>
				buttonPressedCallback(i);
 8008dfc:	9803      	ldr	r0, [sp, #12]
 8008dfe:	f7ff f961 	bl	80080c4 <buttonPressedCallback>
				button[i].state = NONE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	4642      	mov	r2, r8
 8008e06:	7253      	strb	r3, [r2, #9]
 8008e08:	3601      	adds	r6, #1
 8008e0a:	3509      	adds	r5, #9
 8008e0c:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 8008e0e:	2c18      	cmp	r4, #24
 8008e10:	d100      	bne.n	8008e14 <CheckAttachedButtons+0x240>
 8008e12:	e0ee      	b.n	8008ff2 <CheckAttachedButtons+0x41e>
 8008e14:	b2f3      	uxtb	r3, r6
 8008e16:	9303      	str	r3, [sp, #12]
 8008e18:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8008e1a:	7aab      	ldrb	r3, [r5, #10]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d0f3      	beq.n	8008e08 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)
 8008e20:	4b35      	ldr	r3, [pc, #212]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d100      	bne.n	8008e2a <CheckAttachedButtons+0x256>
				button[i].state = NONE;
 8008e28:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008e2a:	230e      	movs	r3, #14
 8008e2c:	aa02      	add	r2, sp, #8
 8008e2e:	4694      	mov	ip, r2
 8008e30:	4463      	add	r3, ip
 8008e32:	469a      	mov	sl, r3
 8008e34:	af05      	add	r7, sp, #20
 8008e36:	9700      	str	r7, [sp, #0]
 8008e38:	ab06      	add	r3, sp, #24
 8008e3a:	4652      	mov	r2, sl
 8008e3c:	a907      	add	r1, sp, #28
 8008e3e:	9803      	ldr	r0, [sp, #12]
 8008e40:	f004 fbf4 	bl	800d62c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008e44:	4653      	mov	r3, sl
 8008e46:	8819      	ldrh	r1, [r3, #0]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	9807      	ldr	r0, [sp, #28]
 8008e4c:	f008 ffe0 	bl	8011e10 <HAL_GPIO_WritePin>
			Delay_us(10);
 8008e50:	200a      	movs	r0, #10
 8008e52:	f004 ff7d 	bl	800dd50 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 8008e56:	8839      	ldrh	r1, [r7, #0]
 8008e58:	9806      	ldr	r0, [sp, #24]
 8008e5a:	f008 ffd3 	bl	8011e04 <HAL_GPIO_ReadPin>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d100      	bne.n	8008e64 <CheckAttachedButtons+0x290>
 8008e62:	e6c5      	b.n	8008bf0 <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008e64:	230e      	movs	r3, #14
 8008e66:	aa02      	add	r2, sp, #8
 8008e68:	4694      	mov	ip, r2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	8819      	ldrh	r1, [r3, #0]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	9807      	ldr	r0, [sp, #28]
 8008e72:	f008 ffcd 	bl	8011e10 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 8008e76:	4643      	mov	r3, r8
 8008e78:	7a9b      	ldrb	r3, [r3, #10]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d100      	bne.n	8008e80 <CheckAttachedButtons+0x2ac>
 8008e7e:	e706      	b.n	8008c8e <CheckAttachedButtons+0xba>
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	2a02      	cmp	r2, #2
 8008e84:	d800      	bhi.n	8008e88 <CheckAttachedButtons+0x2b4>
 8008e86:	e6c6      	b.n	8008c16 <CheckAttachedButtons+0x42>
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d100      	bne.n	8008e8e <CheckAttachedButtons+0x2ba>
 8008e8c:	e707      	b.n	8008c9e <CheckAttachedButtons+0xca>
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d000      	beq.n	8008e94 <CheckAttachedButtons+0x2c0>
 8008e92:	e6c8      	b.n	8008c26 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 8008e94:	464b      	mov	r3, r9
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d100      	bne.n	8008e9c <CheckAttachedButtons+0x2c8>
 8008e9a:	e08e      	b.n	8008fba <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d000      	beq.n	8008ea2 <CheckAttachedButtons+0x2ce>
 8008ea0:	e6c1      	b.n	8008c26 <CheckAttachedButtons+0x52>
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	469b      	mov	fp, r3
 8008ea6:	e6c3      	b.n	8008c30 <CheckAttachedButtons+0x5c>
				buttonReleasedCallback(i);
 8008ea8:	9803      	ldr	r0, [sp, #12]
 8008eaa:	f7ff fe8e 	bl	8008bca <buttonReleasedCallback>
				button[i].state = NONE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	7253      	strb	r3, [r2, #9]
				break;
 8008eb4:	e7a8      	b.n	8008e08 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008eb6:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1a4      	bne.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 8008ebe:	4643      	mov	r3, r8
 8008ec0:	7c5b      	ldrb	r3, [r3, #17]
 8008ec2:	075b      	lsls	r3, r3, #29
 8008ec4:	d5a0      	bpl.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <CheckAttachedButtons+0x324>)
 8008ec8:	2201      	movs	r2, #1
 8008eca:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 8008ecc:	2101      	movs	r1, #1
 8008ece:	9803      	ldr	r0, [sp, #12]
 8008ed0:	f7ff fe7e 	bl	8008bd0 <buttonPressedForXCallback>
 8008ed4:	e798      	b.n	8008e08 <CheckAttachedButtons+0x234>
 8008ed6:	46c0      	nop			; (mov r8, r8)
 8008ed8:	20000cb4 	.word	0x20000cb4
 8008edc:	20000cf8 	.word	0x20000cf8
 8008ee0:	0000fffe 	.word	0x0000fffe
 8008ee4:	2000612c 	.word	0x2000612c
 8008ee8:	20000d10 	.word	0x20000d10
 8008eec:	20000cea 	.word	0x20000cea
 8008ef0:	20000cf0 	.word	0x20000cf0
 8008ef4:	0000fe0a 	.word	0x0000fe0a
 8008ef8:	20000cf6 	.word	0x20000cf6
 8008efc:	0801a218 	.word	0x0801a218
				if (!delayButtonStateReset
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d000      	beq.n	8008f0a <CheckAttachedButtons+0x336>
 8008f08:	e77e      	b.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 8008f0a:	4643      	mov	r3, r8
 8008f0c:	7c5b      	ldrb	r3, [r3, #17]
 8008f0e:	071b      	lsls	r3, r3, #28
 8008f10:	d400      	bmi.n	8008f14 <CheckAttachedButtons+0x340>
 8008f12:	e779      	b.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008f14:	4b3a      	ldr	r3, [pc, #232]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	9803      	ldr	r0, [sp, #12]
 8008f1e:	f7ff fe57 	bl	8008bd0 <buttonPressedForXCallback>
 8008f22:	e771      	b.n	8008e08 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008f24:	4b36      	ldr	r3, [pc, #216]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d000      	beq.n	8008f2e <CheckAttachedButtons+0x35a>
 8008f2c:	e76c      	b.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8008f2e:	4643      	mov	r3, r8
 8008f30:	7c5b      	ldrb	r3, [r3, #17]
 8008f32:	06db      	lsls	r3, r3, #27
 8008f34:	d400      	bmi.n	8008f38 <CheckAttachedButtons+0x364>
 8008f36:	e767      	b.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008f38:	4b31      	ldr	r3, [pc, #196]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 8008f3e:	2103      	movs	r1, #3
 8008f40:	9803      	ldr	r0, [sp, #12]
 8008f42:	f7ff fe45 	bl	8008bd0 <buttonPressedForXCallback>
 8008f46:	e75f      	b.n	8008e08 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008f48:	4b2d      	ldr	r3, [pc, #180]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d000      	beq.n	8008f52 <CheckAttachedButtons+0x37e>
 8008f50:	e75a      	b.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 8008f52:	4643      	mov	r3, r8
 8008f54:	7c5b      	ldrb	r3, [r3, #17]
 8008f56:	069b      	lsls	r3, r3, #26
 8008f58:	d400      	bmi.n	8008f5c <CheckAttachedButtons+0x388>
 8008f5a:	e755      	b.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f5e:	2201      	movs	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 8008f62:	2101      	movs	r1, #1
 8008f64:	9803      	ldr	r0, [sp, #12]
 8008f66:	f7ff fe34 	bl	8008bd2 <buttonReleasedForYCallback>
 8008f6a:	e74d      	b.n	8008e08 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008f6c:	4b24      	ldr	r3, [pc, #144]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d000      	beq.n	8008f76 <CheckAttachedButtons+0x3a2>
 8008f74:	e748      	b.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 8008f76:	4643      	mov	r3, r8
 8008f78:	7c5b      	ldrb	r3, [r3, #17]
 8008f7a:	065b      	lsls	r3, r3, #25
 8008f7c:	d400      	bmi.n	8008f80 <CheckAttachedButtons+0x3ac>
 8008f7e:	e743      	b.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008f80:	4b1f      	ldr	r3, [pc, #124]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 8008f86:	2102      	movs	r1, #2
 8008f88:	9803      	ldr	r0, [sp, #12]
 8008f8a:	f7ff fe22 	bl	8008bd2 <buttonReleasedForYCallback>
 8008f8e:	e73b      	b.n	8008e08 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d000      	beq.n	8008f9a <CheckAttachedButtons+0x3c6>
 8008f98:	e736      	b.n	8008e08 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 8008f9a:	4643      	mov	r3, r8
 8008f9c:	7c5b      	ldrb	r3, [r3, #17]
 8008f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa0:	d800      	bhi.n	8008fa4 <CheckAttachedButtons+0x3d0>
 8008fa2:	e731      	b.n	8008e08 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 8008fa4:	4b16      	ldr	r3, [pc, #88]	; (8009000 <CheckAttachedButtons+0x42c>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 8008faa:	2103      	movs	r1, #3
 8008fac:	9803      	ldr	r0, [sp, #12]
 8008fae:	f7ff fe10 	bl	8008bd2 <buttonReleasedForYCallback>
 8008fb2:	e729      	b.n	8008e08 <CheckAttachedButtons+0x234>
					state = OPEN;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	469b      	mov	fp, r3
 8008fb8:	e000      	b.n	8008fbc <CheckAttachedButtons+0x3e8>
					state = OFF;
 8008fba:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 8008fbc:	4b11      	ldr	r3, [pc, #68]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fbe:	58e3      	ldr	r3, [r4, r3]
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <CheckAttachedButtons+0x434>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d900      	bls.n	8008fc8 <CheckAttachedButtons+0x3f4>
 8008fc6:	e67f      	b.n	8008cc8 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];		// Advance the debounce counter
 8008fc8:	3301      	adds	r3, #1
 8008fca:	4a0e      	ldr	r2, [pc, #56]	; (8009004 <CheckAttachedButtons+0x430>)
 8008fcc:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <CheckAttachedButtons+0x438>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d100      	bne.n	8008fd8 <CheckAttachedButtons+0x404>
 8008fd6:	e67b      	b.n	8008cd0 <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fda:	5cf2      	ldrb	r2, [r6, r3]
 8008fdc:	4b0d      	ldr	r3, [pc, #52]	; (8009014 <CheckAttachedButtons+0x440>)
 8008fde:	795b      	ldrb	r3, [r3, #5]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d800      	bhi.n	8008fe6 <CheckAttachedButtons+0x412>
 8008fe4:	e632      	b.n	8008c4c <CheckAttachedButtons+0x78>
					clicked = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4a08      	ldr	r2, [pc, #32]	; (800900c <CheckAttachedButtons+0x438>)
 8008fea:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <CheckAttachedButtons+0x43c>)
 8008fee:	54b3      	strb	r3, [r6, r2]
 8008ff0:	e62c      	b.n	8008c4c <CheckAttachedButtons+0x78>
}
 8008ff2:	b009      	add	sp, #36	; 0x24
 8008ff4:	bc3c      	pop	{r2, r3, r4, r5}
 8008ff6:	4690      	mov	r8, r2
 8008ff8:	4699      	mov	r9, r3
 8008ffa:	46a2      	mov	sl, r4
 8008ffc:	46ab      	mov	fp, r5
 8008ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009000:	20000cf6 	.word	0x20000cf6
 8009004:	20000d10 	.word	0x20000d10
 8009008:	0000fffe 	.word	0x0000fffe
 800900c:	20000cea 	.word	0x20000cea
 8009010:	20000cf0 	.word	0x20000cf0
 8009014:	2000612c 	.word	0x2000612c

08009018 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8009018:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 800901a:	f006 ffd3 	bl	800ffc4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800901e:	b2c4      	uxtb	r4, r0
 8009020:	0020      	movs	r0, r4
 8009022:	f7fe fa95 	bl	8007550 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009026:	0020      	movs	r0, r4
 8009028:	f7fe fac0 	bl	80075ac <SwitchStreamDMAToMsg>
}
 800902c:	bd10      	pop	{r4, pc}
	...

08009030 <SetupDMAStreams>:
{
 8009030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009032:	b085      	sub	sp, #20
 8009034:	000d      	movs	r5, r1
 8009036:	0014      	movs	r4, r2
 8009038:	220f      	movs	r2, #15
 800903a:	446a      	add	r2, sp
 800903c:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800903e:	aa0a      	add	r2, sp, #40	; 0x28
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	4293      	cmp	r3, r2
 8009044:	d058      	beq.n	80090f8 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009046:	2b00      	cmp	r3, #0
 8009048:	d100      	bne.n	800904c <SetupDMAStreams+0x1c>
 800904a:	e0be      	b.n	80091ca <SetupDMAStreams+0x19a>
 800904c:	2a00      	cmp	r2, #0
 800904e:	d100      	bne.n	8009052 <SetupDMAStreams+0x22>
 8009050:	e0bf      	b.n	80091d2 <SetupDMAStreams+0x1a2>
	if (direction == FORWARD) 
 8009052:	2800      	cmp	r0, #0
 8009054:	d055      	beq.n	8009102 <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8009056:	2801      	cmp	r0, #1
 8009058:	d100      	bne.n	800905c <SetupDMAStreams+0x2c>
 800905a:	e08b      	b.n	8009174 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 800905c:	2267      	movs	r2, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 800905e:	2802      	cmp	r0, #2
 8009060:	d000      	beq.n	8009064 <SetupDMAStreams+0x34>
 8009062:	e0b3      	b.n	80091cc <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8009064:	0018      	movs	r0, r3
 8009066:	f005 f817 	bl	800e098 <GetUart>
 800906a:	0006      	movs	r6, r0
 800906c:	ab0a      	add	r3, sp, #40	; 0x28
 800906e:	7818      	ldrb	r0, [r3, #0]
 8009070:	f005 f812 	bl	800e098 <GetUart>
 8009074:	0001      	movs	r1, r0
 8009076:	2201      	movs	r2, #1
 8009078:	0030      	movs	r0, r6
 800907a:	f7fe fac9 	bl	8007610 <StartDMAstream>
 800907e:	0002      	movs	r2, r0
 8009080:	2817      	cmp	r0, #23
 8009082:	d100      	bne.n	8009086 <SetupDMAStreams+0x56>
 8009084:	e0a2      	b.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8009086:	0160      	lsls	r0, r4, #5
 8009088:	1b00      	subs	r0, r0, r4
 800908a:	0080      	lsls	r0, r0, #2
 800908c:	1900      	adds	r0, r0, r4
 800908e:	00c0      	lsls	r0, r0, #3
 8009090:	21fa      	movs	r1, #250	; 0xfa
 8009092:	0089      	lsls	r1, r1, #2
 8009094:	f7f7 f852 	bl	800013c <__udivsi3>
 8009098:	0004      	movs	r4, r0
 800909a:	260f      	movs	r6, #15
 800909c:	446e      	add	r6, sp
 800909e:	4b4e      	ldr	r3, [pc, #312]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	0033      	movs	r3, r6
 80090a4:	2200      	movs	r2, #0
 80090a6:	0001      	movs	r1, r0
 80090a8:	484c      	ldr	r0, [pc, #304]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090aa:	f006 fe2f 	bl	800fd0c <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 80090ae:	7833      	ldrb	r3, [r6, #0]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4a4a      	ldr	r2, [pc, #296]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090b6:	509d      	str	r5, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 80090b8:	ab0a      	add	r3, sp, #40	; 0x28
 80090ba:	7818      	ldrb	r0, [r3, #0]
 80090bc:	f004 ffec 	bl	800e098 <GetUart>
 80090c0:	0007      	movs	r7, r0
 80090c2:	7830      	ldrb	r0, [r6, #0]
 80090c4:	f004 ffe8 	bl	800e098 <GetUart>
 80090c8:	0001      	movs	r1, r0
 80090ca:	2201      	movs	r2, #1
 80090cc:	0038      	movs	r0, r7
 80090ce:	f7fe fa9f 	bl	8007610 <StartDMAstream>
 80090d2:	0002      	movs	r2, r0
 80090d4:	2817      	cmp	r0, #23
 80090d6:	d079      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 80090d8:	4b3f      	ldr	r3, [pc, #252]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	ab0a      	add	r3, sp, #40	; 0x28
 80090de:	2200      	movs	r2, #0
 80090e0:	0021      	movs	r1, r4
 80090e2:	483e      	ldr	r0, [pc, #248]	; (80091dc <SetupDMAStreams+0x1ac>)
 80090e4:	f006 fe12 	bl	800fd0c <xTimerCreate>
 80090e8:	0004      	movs	r4, r0
		dmaStreamTotal[dst-1] = count;
 80090ea:	ab0a      	add	r3, sp, #40	; 0x28
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	3b01      	subs	r3, #1
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a3b      	ldr	r2, [pc, #236]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80090f4:	509d      	str	r5, [r3, r2]
 80090f6:	e02d      	b.n	8009154 <SetupDMAStreams+0x124>
		portStatus[src] = STREAM;
 80090f8:	4a3a      	ldr	r2, [pc, #232]	; (80091e4 <SetupDMAStreams+0x1b4>)
 80090fa:	2102      	movs	r1, #2
 80090fc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80090fe:	2267      	movs	r2, #103	; 0x67
 8009100:	e064      	b.n	80091cc <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8009102:	0018      	movs	r0, r3
 8009104:	f004 ffc8 	bl	800e098 <GetUart>
 8009108:	0006      	movs	r6, r0
 800910a:	ab0a      	add	r3, sp, #40	; 0x28
 800910c:	7818      	ldrb	r0, [r3, #0]
 800910e:	f004 ffc3 	bl	800e098 <GetUart>
 8009112:	0001      	movs	r1, r0
 8009114:	2201      	movs	r2, #1
 8009116:	0030      	movs	r0, r6
 8009118:	f7fe fa7a 	bl	8007610 <StartDMAstream>
 800911c:	0002      	movs	r2, r0
 800911e:	2817      	cmp	r0, #23
 8009120:	d054      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8009122:	260f      	movs	r6, #15
 8009124:	446e      	add	r6, sp
 8009126:	0160      	lsls	r0, r4, #5
 8009128:	1b00      	subs	r0, r0, r4
 800912a:	0080      	lsls	r0, r0, #2
 800912c:	1900      	adds	r0, r0, r4
 800912e:	00c0      	lsls	r0, r0, #3
 8009130:	21fa      	movs	r1, #250	; 0xfa
 8009132:	0089      	lsls	r1, r1, #2
 8009134:	f7f7 f802 	bl	800013c <__udivsi3>
 8009138:	0001      	movs	r1, r0
 800913a:	4b27      	ldr	r3, [pc, #156]	; (80091d8 <SetupDMAStreams+0x1a8>)
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	0033      	movs	r3, r6
 8009140:	2200      	movs	r2, #0
 8009142:	4826      	ldr	r0, [pc, #152]	; (80091dc <SetupDMAStreams+0x1ac>)
 8009144:	f006 fde2 	bl	800fd0c <xTimerCreate>
 8009148:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 800914a:	7833      	ldrb	r3, [r6, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	4a23      	ldr	r2, [pc, #140]	; (80091e0 <SetupDMAStreams+0x1b0>)
 8009152:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009154:	2200      	movs	r2, #0
	if (xTimerStream != NULL)
 8009156:	2c00      	cmp	r4, #0
 8009158:	d038      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStart( xTimerStream, portMAX_DELAY );
 800915a:	f006 f86f 	bl	800f23c <xTaskGetTickCount>
 800915e:	0002      	movs	r2, r0
 8009160:	2301      	movs	r3, #1
 8009162:	425b      	negs	r3, r3
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	2300      	movs	r3, #0
 8009168:	2101      	movs	r1, #1
 800916a:	0020      	movs	r0, r4
 800916c:	f006 fdee 	bl	800fd4c <xTimerGenericCommand>
	return BOS_OK;
 8009170:	2200      	movs	r2, #0
 8009172:	e02b      	b.n	80091cc <SetupDMAStreams+0x19c>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8009174:	0010      	movs	r0, r2
 8009176:	f004 ff8f 	bl	800e098 <GetUart>
 800917a:	0006      	movs	r6, r0
 800917c:	230f      	movs	r3, #15
 800917e:	446b      	add	r3, sp
 8009180:	7818      	ldrb	r0, [r3, #0]
 8009182:	f004 ff89 	bl	800e098 <GetUart>
 8009186:	0001      	movs	r1, r0
 8009188:	2201      	movs	r2, #1
 800918a:	0030      	movs	r0, r6
 800918c:	f7fe fa40 	bl	8007610 <StartDMAstream>
 8009190:	0002      	movs	r2, r0
 8009192:	2817      	cmp	r0, #23
 8009194:	d01a      	beq.n	80091cc <SetupDMAStreams+0x19c>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8009196:	0160      	lsls	r0, r4, #5
 8009198:	1b00      	subs	r0, r0, r4
 800919a:	0080      	lsls	r0, r0, #2
 800919c:	1900      	adds	r0, r0, r4
 800919e:	00c0      	lsls	r0, r0, #3
 80091a0:	21fa      	movs	r1, #250	; 0xfa
 80091a2:	0089      	lsls	r1, r1, #2
 80091a4:	f7f6 ffca 	bl	800013c <__udivsi3>
 80091a8:	0001      	movs	r1, r0
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <SetupDMAStreams+0x1a8>)
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	ab0a      	add	r3, sp, #40	; 0x28
 80091b0:	2200      	movs	r2, #0
 80091b2:	480a      	ldr	r0, [pc, #40]	; (80091dc <SetupDMAStreams+0x1ac>)
 80091b4:	f006 fdaa 	bl	800fd0c <xTimerCreate>
 80091b8:	0004      	movs	r4, r0
		dmaStreamTotal[src-1] = count;
 80091ba:	230f      	movs	r3, #15
 80091bc:	446b      	add	r3, sp
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <SetupDMAStreams+0x1b0>)
 80091c6:	509d      	str	r5, [r3, r2]
 80091c8:	e7c4      	b.n	8009154 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80091ca:	2267      	movs	r2, #103	; 0x67
}
 80091cc:	0010      	movs	r0, r2
 80091ce:	b005      	add	sp, #20
 80091d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80091d2:	2267      	movs	r2, #103	; 0x67
 80091d4:	e7fa      	b.n	80091cc <SetupDMAStreams+0x19c>
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	08009019 	.word	0x08009019
 80091dc:	0801a258 	.word	0x0801a258
 80091e0:	20000c60 	.word	0x20000c60
 80091e4:	200008e0 	.word	0x200008e0

080091e8 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 80091e8:	b510      	push	{r4, lr}
	switch (port)
 80091ea:	2805      	cmp	r0, #5
 80091ec:	d80a      	bhi.n	8009204 <NotifyMessagingTask+0x1c>
 80091ee:	0080      	lsls	r0, r0, #2
 80091f0:	4b15      	ldr	r3, [pc, #84]	; (8009248 <NotifyMessagingTask+0x60>)
 80091f2:	581b      	ldr	r3, [r3, r0]
 80091f4:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 80091f6:	4b15      	ldr	r3, [pc, #84]	; (800924c <NotifyMessagingTask+0x64>)
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	2300      	movs	r3, #0
 80091fc:	2202      	movs	r2, #2
 80091fe:	2100      	movs	r1, #0
 8009200:	f006 fcb4 	bl	800fb6c <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8009204:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8009206:	4b12      	ldr	r3, [pc, #72]	; (8009250 <NotifyMessagingTask+0x68>)
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	2202      	movs	r2, #2
 800920e:	2100      	movs	r1, #0
 8009210:	f006 fcac 	bl	800fb6c <xTaskGenericNotify>
 8009214:	e7f6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <NotifyMessagingTask+0x6c>)
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	2202      	movs	r2, #2
 800921e:	2100      	movs	r1, #0
 8009220:	f006 fca4 	bl	800fb6c <xTaskGenericNotify>
 8009224:	e7ee      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8009226:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <NotifyMessagingTask+0x70>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	2202      	movs	r2, #2
 800922e:	2100      	movs	r1, #0
 8009230:	f006 fc9c 	bl	800fb6c <xTaskGenericNotify>
 8009234:	e7e6      	b.n	8009204 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8009236:	4b09      	ldr	r3, [pc, #36]	; (800925c <NotifyMessagingTask+0x74>)
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	2202      	movs	r2, #2
 800923e:	2100      	movs	r1, #0
 8009240:	f006 fc94 	bl	800fb6c <xTaskGenericNotify>
}
 8009244:	e7de      	b.n	8009204 <NotifyMessagingTask+0x1c>
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	0801a240 	.word	0x0801a240
 800924c:	20000c7c 	.word	0x20000c7c
 8009250:	20000c80 	.word	0x20000c80
 8009254:	20000c84 	.word	0x20000c84
 8009258:	20000c88 	.word	0x20000c88
 800925c:	20000c8c 	.word	0x20000c8c

08009260 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 8009260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009262:	46de      	mov	lr, fp
 8009264:	4657      	mov	r7, sl
 8009266:	464e      	mov	r6, r9
 8009268:	4645      	mov	r5, r8
 800926a:	b5e0      	push	{r5, r6, r7, lr}
 800926c:	b085      	sub	sp, #20
 800926e:	4680      	mov	r8, r0
 8009270:	468b      	mov	fp, r1
 8009272:	0014      	movs	r4, r2
 8009274:	469a      	mov	sl, r3
 8009276:	ab0e      	add	r3, sp, #56	; 0x38
 8009278:	881d      	ldrh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 800927a:	0003      	movs	r3, r0
 800927c:	4313      	orrs	r3, r2
 800927e:	d100      	bne.n	8009282 <SendMessageFromPort+0x22>
 8009280:	e171      	b.n	8009566 <SendMessageFromPort+0x306>
 8009282:	2800      	cmp	r0, #0
 8009284:	d147      	bne.n	8009316 <SendMessageFromPort+0xb6>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009286:	1c93      	adds	r3, r2, #2
 8009288:	b2db      	uxtb	r3, r3
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
 800928a:	2067      	movs	r0, #103	; 0x67
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800928c:	2b01      	cmp	r3, #1
 800928e:	d900      	bls.n	8009292 <SendMessageFromPort+0x32>
 8009290:	e14a      	b.n	8009528 <SendMessageFromPort+0x2c8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8009292:	2000      	movs	r0, #0
 8009294:	f005 ff3a 	bl	800f10c <uxTaskPriorityGet>
 8009298:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 800929a:	2105      	movs	r1, #5
 800929c:	2000      	movs	r0, #0
 800929e:	f005 ff45 	bl	800f12c <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 80092a2:	4bbe      	ldr	r3, [pc, #760]	; (800959c <SendMessageFromPort+0x33c>)
 80092a4:	2248      	movs	r2, #72	; 0x48
 80092a6:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80092a8:	3212      	adds	r2, #18
 80092aa:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80092ac:	465b      	mov	r3, fp
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d000      	beq.n	80092b4 <SendMessageFromPort+0x54>
 80092b2:	e16e      	b.n	8009592 <SendMessageFromPort+0x332>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 80092b4:	3d01      	subs	r5, #1
 80092b6:	4bba      	ldr	r3, [pc, #744]	; (80095a0 <SendMessageFromPort+0x340>)
 80092b8:	5d5f      	ldrb	r7, [r3, r5]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 80092ba:	4eba      	ldr	r6, [pc, #744]	; (80095a4 <SendMessageFromPort+0x344>)
 80092bc:	00e9      	lsls	r1, r5, #3
 80092be:	1b49      	subs	r1, r1, r5
 80092c0:	00c9      	lsls	r1, r1, #3
 80092c2:	4db9      	ldr	r5, [pc, #740]	; (80095a8 <SendMessageFromPort+0x348>)
 80092c4:	1949      	adds	r1, r1, r5
 80092c6:	003a      	movs	r2, r7
 80092c8:	0030      	movs	r0, r6
 80092ca:	f00a fbae 	bl	8013a2a <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 80092ce:	3e03      	subs	r6, #3
 80092d0:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 80092d2:	1cfd      	adds	r5, r7, #3
 80092d4:	002a      	movs	r2, r5
 80092d6:	0031      	movs	r1, r6
 80092d8:	48b4      	ldr	r0, [pc, #720]	; (80095ac <SendMessageFromPort+0x34c>)
 80092da:	f00a fba6 	bl	8013a2a <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80092de:	b2bf      	uxth	r7, r7
 80092e0:	1cf9      	adds	r1, r7, #3
 80092e2:	48b2      	ldr	r0, [pc, #712]	; (80095ac <SendMessageFromPort+0x34c>)
 80092e4:	f004 f93a 	bl	800d55c <CalculateCRC8>
 80092e8:	5570      	strb	r0, [r6, r5]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 80092ea:	2238      	movs	r2, #56	; 0x38
 80092ec:	2100      	movs	r1, #0
 80092ee:	48af      	ldr	r0, [pc, #700]	; (80095ac <SendMessageFromPort+0x34c>)
 80092f0:	f00a fba4 	bl	8013a3c <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80092f4:	3402      	adds	r4, #2
 80092f6:	b2e4      	uxtb	r4, r4
 80092f8:	2c01      	cmp	r4, #1
 80092fa:	d900      	bls.n	80092fe <SendMessageFromPort+0x9e>
 80092fc:	e105      	b.n	800950a <SendMessageFromPort+0x2aa>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 80092fe:	4653      	mov	r3, sl
 8009300:	2b00      	cmp	r3, #0
 8009302:	d000      	beq.n	8009306 <SendMessageFromPort+0xa6>
 8009304:	e0f6      	b.n	80094f4 <SendMessageFromPort+0x294>
 8009306:	465b      	mov	r3, fp
 8009308:	2b00      	cmp	r3, #0
 800930a:	d000      	beq.n	800930e <SendMessageFromPort+0xae>
 800930c:	e0f2      	b.n	80094f4 <SendMessageFromPort+0x294>
			src = message[4];
 800930e:	4ba3      	ldr	r3, [pc, #652]	; (800959c <SendMessageFromPort+0x33c>)
 8009310:	791b      	ldrb	r3, [r3, #4]
 8009312:	469b      	mov	fp, r3
 8009314:	e0ee      	b.n	80094f4 <SendMessageFromPort+0x294>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8009316:	2900      	cmp	r1, #0
 8009318:	d002      	beq.n	8009320 <SendMessageFromPort+0xc0>
 800931a:	2a00      	cmp	r2, #0
 800931c:	d100      	bne.n	8009320 <SendMessageFromPort+0xc0>
 800931e:	e124      	b.n	800956a <SendMessageFromPort+0x30a>
	TaskPriority = uxTaskPriorityGet( NULL );
 8009320:	2000      	movs	r0, #0
 8009322:	f005 fef3 	bl	800f10c <uxTaskPriorityGet>
 8009326:	9002      	str	r0, [sp, #8]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8009328:	2105      	movs	r1, #5
 800932a:	2000      	movs	r0, #0
 800932c:	f005 fefe 	bl	800f12c <vTaskPrioritySet>
	message[0] = 'H';						
 8009330:	4b9a      	ldr	r3, [pc, #616]	; (800959c <SendMessageFromPort+0x33c>)
 8009332:	2248      	movs	r2, #72	; 0x48
 8009334:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8009336:	3212      	adds	r2, #18
 8009338:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800933a:	4653      	mov	r3, sl
 800933c:	2b00      	cmp	r3, #0
 800933e:	d0b9      	beq.n	80092b4 <SendMessageFromPort+0x54>
		if (src == 0)		src = myID;
 8009340:	465b      	mov	r3, fp
 8009342:	2b00      	cmp	r3, #0
 8009344:	d04f      	beq.n	80093e6 <SendMessageFromPort+0x186>
		message[2] = length;	
 8009346:	4995      	ldr	r1, [pc, #596]	; (800959c <SendMessageFromPort+0x33c>)
 8009348:	2300      	movs	r3, #0
 800934a:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 800934c:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 800934e:	465b      	mov	r3, fp
 8009350:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8009352:	4a97      	ldr	r2, [pc, #604]	; (80095b0 <SendMessageFromPort+0x350>)
 8009354:	79d3      	ldrb	r3, [r2, #7]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	7992      	ldrb	r2, [r2, #6]
 800935a:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 800935c:	22ff      	movs	r2, #255	; 0xff
 800935e:	4552      	cmp	r2, sl
 8009360:	4192      	sbcs	r2, r2
 8009362:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 8009364:	0052      	lsls	r2, r2, #1
 8009366:	4313      	orrs	r3, r2
 8009368:	b2db      	uxtb	r3, r3
 800936a:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 800936c:	4652      	mov	r2, sl
 800936e:	718a      	strb	r2, [r1, #6]
 8009370:	2200      	movs	r2, #0
 8009372:	4691      	mov	r9, r2
		if (extendCode == true) {
 8009374:	4652      	mov	r2, sl
 8009376:	2aff      	cmp	r2, #255	; 0xff
 8009378:	d903      	bls.n	8009382 <SendMessageFromPort+0x122>
			message[6+shift] = (uint8_t) (code >> 8);		
 800937a:	0a12      	lsrs	r2, r2, #8
 800937c:	71ca      	strb	r2, [r1, #7]
			++shift;
 800937e:	2201      	movs	r2, #1
 8009380:	4691      	mov	r9, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 8009382:	2d2e      	cmp	r5, #46	; 0x2e
 8009384:	d933      	bls.n	80093ee <SendMessageFromPort+0x18e>
			message[5] |= 0x80;		
 8009386:	2280      	movs	r2, #128	; 0x80
 8009388:	4252      	negs	r2, r2
 800938a:	4313      	orrs	r3, r2
 800938c:	4a83      	ldr	r2, [pc, #524]	; (800959c <SendMessageFromPort+0x33c>)
 800938e:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 8009390:	4b88      	ldr	r3, [pc, #544]	; (80095b4 <SendMessageFromPort+0x354>)
 8009392:	801d      	strh	r5, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
 8009394:	2600      	movs	r6, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8009396:	252e      	movs	r5, #46	; 0x2e
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8009398:	464b      	mov	r3, r9
 800939a:	3307      	adds	r3, #7
 800939c:	4694      	mov	ip, r2
 800939e:	4463      	add	r3, ip
 80093a0:	9303      	str	r3, [sp, #12]
			while (totalNumberOfParams != 0)
 80093a2:	4b84      	ldr	r3, [pc, #528]	; (80095b4 <SendMessageFromPort+0x354>)
 80093a4:	881f      	ldrh	r7, [r3, #0]
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	d02f      	beq.n	800940a <SendMessageFromPort+0x1aa>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 80093aa:	0029      	movs	r1, r5
 80093ac:	0038      	movs	r0, r7
 80093ae:	f7f6 fec5 	bl	800013c <__udivsi3>
 80093b2:	b280      	uxth	r0, r0
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d144      	bne.n	8009442 <SendMessageFromPort+0x1e2>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 80093b8:	4b78      	ldr	r3, [pc, #480]	; (800959c <SendMessageFromPort+0x33c>)
 80093ba:	795a      	ldrb	r2, [r3, #5]
 80093bc:	237f      	movs	r3, #127	; 0x7f
 80093be:	4013      	ands	r3, r2
 80093c0:	4a76      	ldr	r2, [pc, #472]	; (800959c <SendMessageFromPort+0x33c>)
 80093c2:	7153      	strb	r3, [r2, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80093c4:	4d7c      	ldr	r5, [pc, #496]	; (80095b8 <SendMessageFromPort+0x358>)
 80093c6:	8829      	ldrh	r1, [r5, #0]
 80093c8:	4b7c      	ldr	r3, [pc, #496]	; (80095bc <SendMessageFromPort+0x35c>)
 80093ca:	18c9      	adds	r1, r1, r3
 80093cc:	003a      	movs	r2, r7
 80093ce:	9803      	ldr	r0, [sp, #12]
 80093d0:	f00a fb2b 	bl	8013a2a <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	802b      	strh	r3, [r5, #0]
 80093d8:	4a76      	ldr	r2, [pc, #472]	; (80095b4 <SendMessageFromPort+0x354>)
 80093da:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 80093dc:	1d3e      	adds	r6, r7, #4
 80093de:	444e      	add	r6, r9
 80093e0:	b2f6      	uxtb	r6, r6
					numberOfParams = totalNumberOfParams;
 80093e2:	003d      	movs	r5, r7
 80093e4:	e7dd      	b.n	80093a2 <SendMessageFromPort+0x142>
		if (src == 0)		src = myID;
 80093e6:	4b76      	ldr	r3, [pc, #472]	; (80095c0 <SendMessageFromPort+0x360>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	469b      	mov	fp, r3
 80093ec:	e7ab      	b.n	8009346 <SendMessageFromPort+0xe6>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80093ee:	464b      	mov	r3, r9
 80093f0:	3307      	adds	r3, #7
 80093f2:	486a      	ldr	r0, [pc, #424]	; (800959c <SendMessageFromPort+0x33c>)
 80093f4:	1818      	adds	r0, r3, r0
 80093f6:	4b70      	ldr	r3, [pc, #448]	; (80095b8 <SendMessageFromPort+0x358>)
 80093f8:	8819      	ldrh	r1, [r3, #0]
 80093fa:	4b70      	ldr	r3, [pc, #448]	; (80095bc <SendMessageFromPort+0x35c>)
 80093fc:	18c9      	adds	r1, r1, r3
 80093fe:	002a      	movs	r2, r5
 8009400:	f00a fb13 	bl	8013a2a <memcpy>
			length = numberOfParams + shift + 4;
 8009404:	1d2e      	adds	r6, r5, #4
 8009406:	444e      	add	r6, r9
 8009408:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 800940a:	4b6e      	ldr	r3, [pc, #440]	; (80095c4 <SendMessageFromPort+0x364>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d057      	beq.n	80094c2 <SendMessageFromPort+0x262>
			if (dstGroupID < BOS_BROADCAST)
 8009412:	4b6d      	ldr	r3, [pc, #436]	; (80095c8 <SendMessageFromPort+0x368>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2bff      	cmp	r3, #255	; 0xff
 8009418:	d100      	bne.n	800941c <SendMessageFromPort+0x1bc>
 800941a:	e0aa      	b.n	8009572 <SendMessageFromPort+0x312>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800941c:	4a6b      	ldr	r2, [pc, #428]	; (80095cc <SendMessageFromPort+0x36c>)
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	4694      	mov	ip, r2
 8009422:	2a00      	cmp	r2, #0
 8009424:	d06f      	beq.n	8009506 <SendMessageFromPort+0x2a6>
 8009426:	2701      	movs	r7, #1
 8009428:	409f      	lsls	r7, r3
 800942a:	4869      	ldr	r0, [pc, #420]	; (80095d0 <SendMessageFromPort+0x370>)
 800942c:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 800942e:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8009430:	495a      	ldr	r1, [pc, #360]	; (800959c <SendMessageFromPort+0x33c>)
 8009432:	468a      	mov	sl, r1
 8009434:	44aa      	add	sl, r5
 8009436:	0021      	movs	r1, r4
 8009438:	4664      	mov	r4, ip
 800943a:	46b4      	mov	ip, r6
 800943c:	464e      	mov	r6, r9
 800943e:	4689      	mov	r9, r1
 8009440:	e017      	b.n	8009472 <SendMessageFromPort+0x212>
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 8009442:	9500      	str	r5, [sp, #0]
 8009444:	4653      	mov	r3, sl
 8009446:	0022      	movs	r2, r4
 8009448:	4659      	mov	r1, fp
 800944a:	4640      	mov	r0, r8
 800944c:	f7ff ff08 	bl	8009260 <SendMessageFromPort>
					osDelay(10);
 8009450:	200a      	movs	r0, #10
 8009452:	f004 ff6c 	bl	800e32e <osDelay>
					totalNumberOfParams -= numberOfParams;
 8009456:	4a57      	ldr	r2, [pc, #348]	; (80095b4 <SendMessageFromPort+0x354>)
 8009458:	8813      	ldrh	r3, [r2, #0]
 800945a:	1b5b      	subs	r3, r3, r5
 800945c:	8013      	strh	r3, [r2, #0]
					ptrShift += numberOfParams;
 800945e:	4a56      	ldr	r2, [pc, #344]	; (80095b8 <SendMessageFromPort+0x358>)
 8009460:	8813      	ldrh	r3, [r2, #0]
 8009462:	18eb      	adds	r3, r5, r3
 8009464:	8013      	strh	r3, [r2, #0]
 8009466:	e79c      	b.n	80093a2 <SendMessageFromPort+0x142>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 8009468:	3301      	adds	r3, #1
 800946a:	b29b      	uxth	r3, r3
 800946c:	3002      	adds	r0, #2
 800946e:	42a3      	cmp	r3, r4
 8009470:	d80e      	bhi.n	8009490 <SendMessageFromPort+0x230>
					if (InGroup(i, dstGroupID))
 8009472:	8801      	ldrh	r1, [r0, #0]
 8009474:	420f      	tst	r7, r1
 8009476:	d0f7      	beq.n	8009468 <SendMessageFromPort+0x208>
						++groupMembers;							// Add this member
 8009478:	3201      	adds	r2, #1
 800947a:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 800947c:	18a9      	adds	r1, r5, r2
 800947e:	3101      	adds	r1, #1
 8009480:	292d      	cmp	r1, #45	; 0x2d
 8009482:	dd00      	ble.n	8009486 <SendMessageFromPort+0x226>
 8009484:	e073      	b.n	800956e <SendMessageFromPort+0x30e>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 8009486:	4651      	mov	r1, sl
 8009488:	1889      	adds	r1, r1, r2
 800948a:	1989      	adds	r1, r1, r6
 800948c:	718b      	strb	r3, [r1, #6]
 800948e:	e7eb      	b.n	8009468 <SendMessageFromPort+0x208>
 8009490:	464c      	mov	r4, r9
 8009492:	46b1      	mov	r9, r6
 8009494:	4666      	mov	r6, ip
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8009496:	464b      	mov	r3, r9
 8009498:	3307      	adds	r3, #7
 800949a:	195b      	adds	r3, r3, r5
 800949c:	189b      	adds	r3, r3, r2
 800949e:	493f      	ldr	r1, [pc, #252]	; (800959c <SendMessageFromPort+0x33c>)
 80094a0:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80094a2:	18ad      	adds	r5, r5, r2
 80094a4:	3502      	adds	r5, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80094a6:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 80094a8:	2d2d      	cmp	r5, #45	; 0x2d
 80094aa:	dc3d      	bgt.n	8009528 <SendMessageFromPort+0x2c8>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 80094ac:	4849      	ldr	r0, [pc, #292]	; (80095d4 <SendMessageFromPort+0x374>)
 80094ae:	7801      	ldrb	r1, [r0, #0]
 80094b0:	3101      	adds	r1, #1
 80094b2:	b2c9      	uxtb	r1, r1
 80094b4:	7001      	strb	r1, [r0, #0]
 80094b6:	4839      	ldr	r0, [pc, #228]	; (800959c <SendMessageFromPort+0x33c>)
 80094b8:	18c3      	adds	r3, r0, r3
 80094ba:	7059      	strb	r1, [r3, #1]
 80094bc:	3602      	adds	r6, #2
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80094be:	18b6      	adds	r6, r6, r2
 80094c0:	b2f6      	uxtb	r6, r6
	message[2] = length;
 80094c2:	4b36      	ldr	r3, [pc, #216]	; (800959c <SendMessageFromPort+0x33c>)
 80094c4:	469a      	mov	sl, r3
 80094c6:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 80094c8:	1cf5      	adds	r5, r6, #3
 80094ca:	002a      	movs	r2, r5
 80094cc:	0019      	movs	r1, r3
 80094ce:	4837      	ldr	r0, [pc, #220]	; (80095ac <SendMessageFromPort+0x34c>)
 80094d0:	f00a faab 	bl	8013a2a <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 80094d4:	b2b7      	uxth	r7, r6
 80094d6:	0029      	movs	r1, r5
 80094d8:	4834      	ldr	r0, [pc, #208]	; (80095ac <SendMessageFromPort+0x34c>)
 80094da:	f004 f83f 	bl	800d55c <CalculateCRC8>
 80094de:	4653      	mov	r3, sl
 80094e0:	5558      	strb	r0, [r3, r5]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 80094e2:	2238      	movs	r2, #56	; 0x38
 80094e4:	2100      	movs	r1, #0
 80094e6:	4831      	ldr	r0, [pc, #196]	; (80095ac <SendMessageFromPort+0x34c>)
 80094e8:	f00a faa8 	bl	8013a3c <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 80094ec:	3402      	adds	r4, #2
 80094ee:	b2e4      	uxtb	r4, r4
 80094f0:	2c01      	cmp	r4, #1
 80094f2:	d80a      	bhi.n	800950a <SendMessageFromPort+0x2aa>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 80094f4:	4658      	mov	r0, fp
 80094f6:	f7fa f9cf 	bl	8003898 <FindBroadcastRoutes>
 80094fa:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80094fc:	2401      	movs	r4, #1
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80094fe:	4b36      	ldr	r3, [pc, #216]	; (80095d8 <SendMessageFromPort+0x378>)
 8009500:	4698      	mov	r8, r3
 8009502:	4e2f      	ldr	r6, [pc, #188]	; (80095c0 <SendMessageFromPort+0x360>)
 8009504:	e01c      	b.n	8009540 <SendMessageFromPort+0x2e0>
			uint8_t groupMembers = 0;
 8009506:	2200      	movs	r2, #0
 8009508:	e7c5      	b.n	8009496 <SendMessageFromPort+0x236>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 800950a:	1d3a      	adds	r2, r7, #4
 800950c:	b292      	uxth	r2, r2
 800950e:	2332      	movs	r3, #50	; 0x32
 8009510:	4922      	ldr	r1, [pc, #136]	; (800959c <SendMessageFromPort+0x33c>)
 8009512:	4640      	mov	r0, r8
 8009514:	f004 fe28 	bl	800e168 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 8009518:	9902      	ldr	r1, [sp, #8]
 800951a:	2000      	movs	r0, #0
 800951c:	f005 fe06 	bl	800f12c <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 8009520:	4b2e      	ldr	r3, [pc, #184]	; (80095dc <SendMessageFromPort+0x37c>)
 8009522:	2202      	movs	r2, #2
 8009524:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009526:	2000      	movs	r0, #0
}
 8009528:	b005      	add	sp, #20
 800952a:	bc3c      	pop	{r2, r3, r4, r5}
 800952c:	4690      	mov	r8, r2
 800952e:	4699      	mov	r9, r3
 8009530:	46a2      	mov	sl, r4
 8009532:	46ab      	mov	fp, r5
 8009534:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8009536:	3401      	adds	r4, #1
 8009538:	b2e4      	uxtb	r4, r4
 800953a:	3501      	adds	r5, #1
 800953c:	2c06      	cmp	r4, #6
 800953e:	d0eb      	beq.n	8009518 <SendMessageFromPort+0x2b8>
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009540:	7833      	ldrb	r3, [r6, #0]
 8009542:	3b01      	subs	r3, #1
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	4642      	mov	r2, r8
 8009548:	5a9b      	ldrh	r3, [r3, r2]
 800954a:	412b      	asrs	r3, r5
 800954c:	07db      	lsls	r3, r3, #31
 800954e:	d5f2      	bpl.n	8009536 <SendMessageFromPort+0x2d6>
				writePxDMAMutex(p, message, length+4, cmd50ms);
 8009550:	1d3a      	adds	r2, r7, #4
 8009552:	b292      	uxth	r2, r2
 8009554:	2332      	movs	r3, #50	; 0x32
 8009556:	4911      	ldr	r1, [pc, #68]	; (800959c <SendMessageFromPort+0x33c>)
 8009558:	0020      	movs	r0, r4
 800955a:	f004 fe05 	bl	800e168 <writePxDMAMutex>
				Delay_ms(1);
 800955e:	2001      	movs	r0, #1
 8009560:	f006 ff10 	bl	8010384 <HAL_Delay>
 8009564:	e7e7      	b.n	8009536 <SendMessageFromPort+0x2d6>
		return BOS_ERR_WrongParam; 
 8009566:	2067      	movs	r0, #103	; 0x67
 8009568:	e7de      	b.n	8009528 <SendMessageFromPort+0x2c8>
 800956a:	2067      	movs	r0, #103	; 0x67
 800956c:	e7dc      	b.n	8009528 <SendMessageFromPort+0x2c8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 800956e:	2069      	movs	r0, #105	; 0x69
 8009570:	e7da      	b.n	8009528 <SendMessageFromPort+0x2c8>
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009572:	1c6b      	adds	r3, r5, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009574:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 8009576:	2b2d      	cmp	r3, #45	; 0x2d
 8009578:	dcd6      	bgt.n	8009528 <SendMessageFromPort+0x2c8>
				message[7+shift+numberOfParams] = ++bcastID;
 800957a:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <SendMessageFromPort+0x374>)
 800957c:	7813      	ldrb	r3, [r2, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	b2db      	uxtb	r3, r3
 8009582:	7013      	strb	r3, [r2, #0]
 8009584:	4a05      	ldr	r2, [pc, #20]	; (800959c <SendMessageFromPort+0x33c>)
 8009586:	1955      	adds	r5, r2, r5
 8009588:	444d      	add	r5, r9
 800958a:	71eb      	strb	r3, [r5, #7]
				length += 1;		// + bcastID
 800958c:	3601      	adds	r6, #1
 800958e:	b2f6      	uxtb	r6, r6
 8009590:	e797      	b.n	80094c2 <SendMessageFromPort+0x262>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009592:	4653      	mov	r3, sl
 8009594:	2b00      	cmp	r3, #0
 8009596:	d100      	bne.n	800959a <SendMessageFromPort+0x33a>
 8009598:	e68c      	b.n	80092b4 <SendMessageFromPort+0x54>
 800959a:	e6d4      	b.n	8009346 <SendMessageFromPort+0xe6>
 800959c:	200006e8 	.word	0x200006e8
 80095a0:	20000720 	.word	0x20000720
 80095a4:	200006eb 	.word	0x200006eb
 80095a8:	20000530 	.word	0x20000530
 80095ac:	20000c00 	.word	0x20000c00
 80095b0:	2000612c 	.word	0x2000612c
 80095b4:	20000d36 	.word	0x20000d36
 80095b8:	20000d34 	.word	0x20000d34
 80095bc:	20000728 	.word	0x20000728
 80095c0:	20000866 	.word	0x20000866
 80095c4:	2000029c 	.word	0x2000029c
 80095c8:	2000001d 	.word	0x2000001d
 80095cc:	2000001c 	.word	0x2000001c
 80095d0:	200006b0 	.word	0x200006b0
 80095d4:	200004dc 	.word	0x200004dc
 80095d8:	200004e0 	.word	0x200004e0
 80095dc:	200008f8 	.word	0x200008f8

080095e0 <ForwardReceivedMessage>:
{
 80095e0:	b530      	push	{r4, r5, lr}
 80095e2:	b083      	sub	sp, #12
 80095e4:	0005      	movs	r5, r0
	AddBcastPayload = false; 	
 80095e6:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <ForwardReceivedMessage+0x34>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 80095ec:	1e42      	subs	r2, r0, #1
 80095ee:	00d3      	lsls	r3, r2, #3
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	4a08      	ldr	r2, [pc, #32]	; (8009618 <ForwardReceivedMessage+0x38>)
 80095f6:	5c9c      	ldrb	r4, [r3, r2]
	port = FindRoute(myID, dst); 
 80095f8:	4b08      	ldr	r3, [pc, #32]	; (800961c <ForwardReceivedMessage+0x3c>)
 80095fa:	7818      	ldrb	r0, [r3, #0]
 80095fc:	0021      	movs	r1, r4
 80095fe:	f7fa f9ed 	bl	80039dc <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8009602:	9500      	str	r5, [sp, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	0022      	movs	r2, r4
 8009608:	2100      	movs	r1, #0
 800960a:	f7ff fe29 	bl	8009260 <SendMessageFromPort>
}
 800960e:	2000      	movs	r0, #0
 8009610:	b003      	add	sp, #12
 8009612:	bd30      	pop	{r4, r5, pc}
 8009614:	2000029c 	.word	0x2000029c
 8009618:	20000530 	.word	0x20000530
 800961c:	20000866 	.word	0x20000866

08009620 <BroadcastReceivedMessage>:
{
 8009620:	b500      	push	{lr}
 8009622:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8009624:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <BroadcastReceivedMessage+0x38>)
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	4b0c      	ldr	r3, [pc, #48]	; (800965c <BroadcastReceivedMessage+0x3c>)
 800962c:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 800962e:	28ff      	cmp	r0, #255	; 0xff
 8009630:	d009      	beq.n	8009646 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 8009632:	9100      	str	r1, [sp, #0]
 8009634:	2300      	movs	r3, #0
 8009636:	22fe      	movs	r2, #254	; 0xfe
 8009638:	2100      	movs	r1, #0
 800963a:	2000      	movs	r0, #0
 800963c:	f7ff fe10 	bl	8009260 <SendMessageFromPort>
}
 8009640:	2000      	movs	r0, #0
 8009642:	b003      	add	sp, #12
 8009644:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 8009646:	9100      	str	r1, [sp, #0]
 8009648:	2300      	movs	r3, #0
 800964a:	32ff      	adds	r2, #255	; 0xff
 800964c:	2100      	movs	r1, #0
 800964e:	2000      	movs	r0, #0
 8009650:	f7ff fe06 	bl	8009260 <SendMessageFromPort>
 8009654:	e7f4      	b.n	8009640 <BroadcastReceivedMessage+0x20>
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	2000029c 	.word	0x2000029c
 800965c:	2000001d 	.word	0x2000001d

08009660 <BroadcastMessage>:
{
 8009660:	b530      	push	{r4, r5, lr}
 8009662:	b083      	sub	sp, #12
 8009664:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 8009666:	4b0f      	ldr	r3, [pc, #60]	; (80096a4 <BroadcastMessage+0x44>)
 8009668:	2501      	movs	r5, #1
 800966a:	701d      	strb	r5, [r3, #0]
 800966c:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <BroadcastMessage+0x48>)
 800966e:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 8009670:	29ff      	cmp	r1, #255	; 0xff
 8009672:	d00e      	beq.n	8009692 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 8009674:	9400      	str	r4, [sp, #0]
 8009676:	0013      	movs	r3, r2
 8009678:	22fe      	movs	r2, #254	; 0xfe
 800967a:	0001      	movs	r1, r0
 800967c:	2000      	movs	r0, #0
 800967e:	f7ff fdef 	bl	8009260 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 8009682:	0022      	movs	r2, r4
 8009684:	2100      	movs	r1, #0
 8009686:	4809      	ldr	r0, [pc, #36]	; (80096ac <BroadcastMessage+0x4c>)
 8009688:	f00a f9d8 	bl	8013a3c <memset>
}
 800968c:	2000      	movs	r0, #0
 800968e:	b003      	add	sp, #12
 8009690:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8009692:	9400      	str	r4, [sp, #0]
 8009694:	0013      	movs	r3, r2
 8009696:	22ff      	movs	r2, #255	; 0xff
 8009698:	0001      	movs	r1, r0
 800969a:	2000      	movs	r0, #0
 800969c:	f7ff fde0 	bl	8009260 <SendMessageFromPort>
 80096a0:	e7ef      	b.n	8009682 <BroadcastMessage+0x22>
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	2000029c 	.word	0x2000029c
 80096a8:	2000001d 	.word	0x2000001d
 80096ac:	20000728 	.word	0x20000728

080096b0 <SendMessageToModule>:
{
 80096b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b2:	b083      	sub	sp, #12
 80096b4:	0004      	movs	r4, r0
 80096b6:	000e      	movs	r6, r1
 80096b8:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 80096ba:	28ff      	cmp	r0, #255	; 0xff
 80096bc:	d012      	beq.n	80096e4 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 80096be:	4f0d      	ldr	r7, [pc, #52]	; (80096f4 <SendMessageToModule+0x44>)
 80096c0:	7838      	ldrb	r0, [r7, #0]
 80096c2:	0021      	movs	r1, r4
 80096c4:	f7fa f98a 	bl	80039dc <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 80096c8:	7839      	ldrb	r1, [r7, #0]
 80096ca:	9500      	str	r5, [sp, #0]
 80096cc:	0033      	movs	r3, r6
 80096ce:	0022      	movs	r2, r4
 80096d0:	f7ff fdc6 	bl	8009260 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 80096d4:	002a      	movs	r2, r5
 80096d6:	2100      	movs	r1, #0
 80096d8:	4807      	ldr	r0, [pc, #28]	; (80096f8 <SendMessageToModule+0x48>)
 80096da:	f00a f9af 	bl	8013a3c <memset>
}
 80096de:	2000      	movs	r0, #0
 80096e0:	b003      	add	sp, #12
 80096e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 80096e4:	4b03      	ldr	r3, [pc, #12]	; (80096f4 <SendMessageToModule+0x44>)
 80096e6:	7818      	ldrb	r0, [r3, #0]
 80096e8:	0013      	movs	r3, r2
 80096ea:	000a      	movs	r2, r1
 80096ec:	21ff      	movs	r1, #255	; 0xff
 80096ee:	f7ff ffb7 	bl	8009660 <BroadcastMessage>
 80096f2:	e7f4      	b.n	80096de <SendMessageToModule+0x2e>
 80096f4:	20000866 	.word	0x20000866
 80096f8:	20000728 	.word	0x20000728

080096fc <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 80096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fe:	46de      	mov	lr, fp
 8009700:	4657      	mov	r7, sl
 8009702:	464e      	mov	r6, r9
 8009704:	4645      	mov	r5, r8
 8009706:	b5e0      	push	{r5, r6, r7, lr}
 8009708:	b091      	sub	sp, #68	; 0x44
 800970a:	900f      	str	r0, [sp, #60]	; 0x3c
 800970c:	000c      	movs	r4, r1
 800970e:	9106      	str	r1, [sp, #24]
 8009710:	0015      	movs	r5, r2
 8009712:	920e      	str	r2, [sp, #56]	; 0x38
 8009714:	001e      	movs	r6, r3
 8009716:	ab1a      	add	r3, sp, #104	; 0x68
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	4698      	mov	r8, r3
 800971c:	ab1d      	add	r3, sp, #116	; 0x74
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	469a      	mov	sl, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8009722:	4b5a      	ldr	r3, [pc, #360]	; (800988c <StartScastDMAStream+0x190>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	428b      	cmp	r3, r1
 8009728:	d11d      	bne.n	8009766 <StartScastDMAStream+0x6a>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800972a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800972c:	0e1b      	lsrs	r3, r3, #24
 800972e:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 8009730:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009732:	0c1b      	lsrs	r3, r3, #16
 8009734:	b2db      	uxtb	r3, r3
 8009736:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 8009738:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b2db      	uxtb	r3, r3
 800973e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009742:	0e1b      	lsrs	r3, r3, #24
 8009744:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009746:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009748:	0c1b      	lsrs	r3, r3, #16
 800974a:	b2db      	uxtb	r3, r3
 800974c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 800974e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009750:	0a1b      	lsrs	r3, r3, #8
 8009752:	b2db      	uxtb	r3, r3
 8009754:	469b      	mov	fp, r3
 8009756:	4d4e      	ldr	r5, [pc, #312]	; (8009890 <StartScastDMAStream+0x194>)
 8009758:	231a      	movs	r3, #26
 800975a:	4699      	mov	r9, r3
 800975c:	44a9      	add	r9, r5
				temp2 = dstP;
 800975e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009760:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009762:	4c4c      	ldr	r4, [pc, #304]	; (8009894 <StartScastDMAStream+0x198>)
 8009764:	e05c      	b.n	8009820 <StartScastDMAStream+0x124>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009766:	4b4b      	ldr	r3, [pc, #300]	; (8009894 <StartScastDMAStream+0x198>)
 8009768:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800976a:	0e12      	lsrs	r2, r2, #24
 800976c:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 800976e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009770:	0c12      	lsrs	r2, r2, #16
 8009772:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 8009774:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009776:	0a12      	lsrs	r2, r2, #8
 8009778:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 800977a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800977c:	70da      	strb	r2, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 800977e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009780:	0e12      	lsrs	r2, r2, #24
 8009782:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 8009784:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009786:	0c12      	lsrs	r2, r2, #16
 8009788:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 800978a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800978c:	0a12      	lsrs	r2, r2, #8
 800978e:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 8009790:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009792:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 8009794:	4642      	mov	r2, r8
 8009796:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8009798:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 800979a:	729e      	strb	r6, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 800979c:	72dd      	strb	r5, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 800979e:	4652      	mov	r2, sl
 80097a0:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 80097a2:	220d      	movs	r2, #13
 80097a4:	211c      	movs	r1, #28
 80097a6:	0020      	movs	r0, r4
 80097a8:	f7ff ff82 	bl	80096b0 <SendMessageToModule>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 80097ac:	2000      	movs	r0, #0
 80097ae:	b011      	add	sp, #68	; 0x44
 80097b0:	bc3c      	pop	{r2, r3, r4, r5}
 80097b2:	4690      	mov	r8, r2
 80097b4:	4699      	mov	r9, r3
 80097b6:	46a2      	mov	sl, r4
 80097b8:	46ab      	mov	fp, r5
 80097ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 = FindRoute(route[i], srcM);
 80097bc:	9906      	ldr	r1, [sp, #24]
 80097be:	f7fa f90d 	bl	80039dc <FindRoute>
 80097c2:	9007      	str	r0, [sp, #28]
			FindRoute(srcM, dstM);
 80097c4:	0031      	movs	r1, r6
 80097c6:	9806      	ldr	r0, [sp, #24]
 80097c8:	f7fa f908 	bl	80039dc <FindRoute>
			if (route[i] == dstM) {
 80097cc:	7878      	ldrb	r0, [r7, #1]
				temp2 = dstP;
 80097ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if (route[i] == dstM) {
 80097d0:	42b0      	cmp	r0, r6
 80097d2:	d134      	bne.n	800983e <StartScastDMAStream+0x142>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80097d4:	9a08      	ldr	r2, [sp, #32]
 80097d6:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 80097d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097da:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 80097dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097de:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 80097e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097e2:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80097e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097e6:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 80097e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ea:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 80097ec:	465a      	mov	r2, fp
 80097ee:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 80097f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80097f2:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 80097f4:	4642      	mov	r2, r8
 80097f6:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 80097f8:	9a07      	ldr	r2, [sp, #28]
 80097fa:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 80097fc:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 80097fe:	4653      	mov	r3, sl
 8009800:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8009802:	0031      	movs	r1, r6
 8009804:	9806      	ldr	r0, [sp, #24]
 8009806:	f7fa f8e9 	bl	80039dc <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 800980a:	7878      	ldrb	r0, [r7, #1]
 800980c:	220c      	movs	r2, #12
 800980e:	211b      	movs	r1, #27
 8009810:	f7ff ff4e 	bl	80096b0 <SendMessageToModule>
			osDelay(10);
 8009814:	200a      	movs	r0, #10
 8009816:	f004 fd8a 	bl	800e32e <osDelay>
 800981a:	3501      	adds	r5, #1
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 800981c:	454d      	cmp	r5, r9
 800981e:	d013      	beq.n	8009848 <StartScastDMAStream+0x14c>
		FindRoute(srcM, dstM);
 8009820:	0031      	movs	r1, r6
 8009822:	9806      	ldr	r0, [sp, #24]
 8009824:	f7fa f8da 	bl	80039dc <FindRoute>
 8009828:	002f      	movs	r7, r5
		if (route[i]) 
 800982a:	7868      	ldrb	r0, [r5, #1]
 800982c:	2800      	cmp	r0, #0
 800982e:	d0f4      	beq.n	800981a <StartScastDMAStream+0x11e>
			if (route[i+1]) {
 8009830:	78a9      	ldrb	r1, [r5, #2]
 8009832:	2900      	cmp	r1, #0
 8009834:	d0c2      	beq.n	80097bc <StartScastDMAStream+0xc0>
				temp1 = FindRoute(route[i], route[i+1]);
 8009836:	f7fa f8d1 	bl	80039dc <FindRoute>
 800983a:	9007      	str	r0, [sp, #28]
 800983c:	e7c2      	b.n	80097c4 <StartScastDMAStream+0xc8>
				temp2 = FindRoute(route[i], route[i-1]);
 800983e:	7839      	ldrb	r1, [r7, #0]
 8009840:	f7fa f8cc 	bl	80039dc <FindRoute>
 8009844:	0003      	movs	r3, r0
 8009846:	e7c5      	b.n	80097d4 <StartScastDMAStream+0xd8>
	if (srcM == dstM)
 8009848:	9806      	ldr	r0, [sp, #24]
 800984a:	42b0      	cmp	r0, r6
 800984c:	d118      	bne.n	8009880 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction, count, timeout, srcP, port);
 800984e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009854:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009856:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009858:	4640      	mov	r0, r8
 800985a:	f7ff fbe9 	bl	8009030 <SetupDMAStreams>
	if (stored) {		
 800985e:	4653      	mov	r3, sl
 8009860:	2b00      	cmp	r3, #0
 8009862:	d0a3      	beq.n	80097ac <StartScastDMAStream+0xb0>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 8009864:	2300      	movs	r3, #0
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	9302      	str	r3, [sp, #8]
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009874:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009876:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009878:	4640      	mov	r0, r8
 800987a:	f7f9 fd73 	bl	8003364 <SaveEEstreams>
 800987e:	e795      	b.n	80097ac <StartScastDMAStream+0xb0>
		port = FindRoute(srcM, dstM);
 8009880:	0031      	movs	r1, r6
 8009882:	f7fa f8ab 	bl	80039dc <FindRoute>
 8009886:	900e      	str	r0, [sp, #56]	; 0x38
 8009888:	e7e1      	b.n	800984e <StartScastDMAStream+0x152>
 800988a:	46c0      	nop			; (mov r8, r8)
 800988c:	20000866 	.word	0x20000866
 8009890:	2000622f 	.word	0x2000622f
 8009894:	20000728 	.word	0x20000728

08009898 <BackEndTask>:
}

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void *argument) {
 8009898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800989a:	46de      	mov	lr, fp
 800989c:	4657      	mov	r7, sl
 800989e:	464e      	mov	r6, r9
 80098a0:	4645      	mov	r5, r8
 80098a2:	b5e0      	push	{r5, r6, r7, lr}
 80098a4:	b087      	sub	sp, #28
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	469b      	mov	fp, r3
								<= (MSG_RX_BUF_SIZE - parseStart - 1)) {
							memcpy(&cMessage[port - 1][0],
									&UARTRxBuf[port - 1][parseStart],
									packetLength);
						} else {				// Message wraps around
							memcpy(&cMessage[port - 1][0],
 80098aa:	4bd5      	ldr	r3, [pc, #852]	; (8009c00 <BackEndTask+0x368>)
 80098ac:	3b70      	subs	r3, #112	; 0x70
 80098ae:	9304      	str	r3, [sp, #16]
							memcpy(&cMessage[port - 1][0],
 80098b0:	4bd3      	ldr	r3, [pc, #844]	; (8009c00 <BackEndTask+0x368>)
 80098b2:	3b70      	subs	r3, #112	; 0x70
 80098b4:	9305      	str	r3, [sp, #20]
 80098b6:	e19e      	b.n	8009bf6 <BackEndTask+0x35e>
 80098b8:	1ebb      	subs	r3, r7, #2
 80098ba:	4698      	mov	r8, r3
 80098bc:	4bd1      	ldr	r3, [pc, #836]	; (8009c04 <BackEndTask+0x36c>)
 80098be:	4443      	add	r3, r8
 80098c0:	4699      	mov	r9, r3
				for (int i = UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 80098c2:	7819      	ldrb	r1, [r3, #0]
 80098c4:	293f      	cmp	r1, #63	; 0x3f
 80098c6:	dc17      	bgt.n	80098f8 <BackEndTask+0x60>
							if (BOS.disableCLI == false) {
 80098c8:	4bcf      	ldr	r3, [pc, #828]	; (8009c08 <BackEndTask+0x370>)
 80098ca:	7edb      	ldrb	r3, [r3, #27]
 80098cc:	469c      	mov	ip, r3
				for (int i = UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 80098ce:	000b      	movs	r3, r1
							if (BOS.disableCLI == false) {
 80098d0:	2000      	movs	r0, #0
 80098d2:	e004      	b.n	80098de <BackEndTask+0x46>
					} else if (i == (MSG_RX_BUF_SIZE - 1)
 80098d4:	2b3f      	cmp	r3, #63	; 0x3f
 80098d6:	d023      	beq.n	8009920 <BackEndTask+0x88>
						i++) {
 80098d8:	3301      	adds	r3, #1
				for (int i = UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE;
 80098da:	2b40      	cmp	r3, #64	; 0x40
 80098dc:	d009      	beq.n	80098f2 <BackEndTask+0x5a>
					if (i < (MSG_RX_BUF_SIZE - 1)
 80098de:	2b3e      	cmp	r3, #62	; 0x3e
 80098e0:	dcf8      	bgt.n	80098d4 <BackEndTask+0x3c>
							&& UARTRxBuf[port - 1][i] == 'H'
 80098e2:	5cf2      	ldrb	r2, [r6, r3]
 80098e4:	2a48      	cmp	r2, #72	; 0x48
 80098e6:	d1f5      	bne.n	80098d4 <BackEndTask+0x3c>
							&& UARTRxBuf[port - 1][i + 1] == 'Z') {
 80098e8:	18f2      	adds	r2, r6, r3
 80098ea:	7852      	ldrb	r2, [r2, #1]
 80098ec:	2a5a      	cmp	r2, #90	; 0x5a
 80098ee:	d1f1      	bne.n	80098d4 <BackEndTask+0x3c>
 80098f0:	469b      	mov	fp, r3
				if (emptyBuffer) {
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d000      	beq.n	80098f8 <BackEndTask+0x60>
 80098f6:	e15f      	b.n	8009bb8 <BackEndTask+0x320>
				if (packetStart == MSG_RX_BUF_SIZE - 3) {
 80098f8:	465b      	mov	r3, fp
 80098fa:	2b3d      	cmp	r3, #61	; 0x3d
 80098fc:	d051      	beq.n	80099a2 <BackEndTask+0x10a>
				} else if (packetStart == MSG_RX_BUF_SIZE - 2) {
 80098fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009900:	d100      	bne.n	8009904 <BackEndTask+0x6c>
 8009902:	e090      	b.n	8009a26 <BackEndTask+0x18e>
				} else if (packetStart == MSG_RX_BUF_SIZE - 1) {
 8009904:	2b3f      	cmp	r3, #63	; 0x3f
 8009906:	d100      	bne.n	800990a <BackEndTask+0x72>
 8009908:	e092      	b.n	8009a30 <BackEndTask+0x198>
					packetLength = UARTRxBuf[port - 1][packetStart + 2];
 800990a:	4643      	mov	r3, r8
 800990c:	019a      	lsls	r2, r3, #6
 800990e:	4bbf      	ldr	r3, [pc, #764]	; (8009c0c <BackEndTask+0x374>)
 8009910:	189b      	adds	r3, r3, r2
 8009912:	445b      	add	r3, fp
 8009914:	789b      	ldrb	r3, [r3, #2]
 8009916:	9300      	str	r3, [sp, #0]
					parseStart = packetStart + 3;
 8009918:	465b      	mov	r3, fp
 800991a:	3303      	adds	r3, #3
 800991c:	9302      	str	r3, [sp, #8]
 800991e:	e046      	b.n	80099ae <BackEndTask+0x116>
 8009920:	9600      	str	r6, [sp, #0]
							&& UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H'
 8009922:	223f      	movs	r2, #63	; 0x3f
 8009924:	4692      	mov	sl, r2
 8009926:	44b2      	add	sl, r6
 8009928:	4652      	mov	r2, sl
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	2a48      	cmp	r2, #72	; 0x48
 800992e:	d005      	beq.n	800993c <BackEndTask+0xa4>
							if (BOS.disableCLI == false) {
 8009930:	4663      	mov	r3, ip
 8009932:	2b00      	cmp	r3, #0
 8009934:	d000      	beq.n	8009938 <BackEndTask+0xa0>
 8009936:	e13f      	b.n	8009bb8 <BackEndTask+0x320>
 8009938:	9a00      	ldr	r2, [sp, #0]
 800993a:	e00c      	b.n	8009956 <BackEndTask+0xbe>
							&& UARTRxBuf[port - 1][0] == 'Z')// HZ wrap around
 800993c:	7832      	ldrb	r2, [r6, #0]
 800993e:	2a5a      	cmp	r2, #90	; 0x5a
 8009940:	d1f6      	bne.n	8009930 <BackEndTask+0x98>
				if (emptyBuffer) {
 8009942:	2800      	cmp	r0, #0
 8009944:	d074      	beq.n	8009a30 <BackEndTask+0x198>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009946:	469b      	mov	fp, r3
 8009948:	e136      	b.n	8009bb8 <BackEndTask+0x320>
													|| (j == MSG_RX_BUF_SIZE - 1
 800994a:	293f      	cmp	r1, #63	; 0x3f
 800994c:	d024      	beq.n	8009998 <BackEndTask+0x100>
										j < MSG_RX_BUF_SIZE; j++) {
 800994e:	3101      	adds	r1, #1
								for (int j = UARTRxBufIndex[port - 1];
 8009950:	2940      	cmp	r1, #64	; 0x40
 8009952:	d100      	bne.n	8009956 <BackEndTask+0xbe>
 8009954:	e130      	b.n	8009bb8 <BackEndTask+0x320>
									if (UARTRxBuf[port - 1][j] == 0xD
 8009956:	5c53      	ldrb	r3, [r2, r1]
 8009958:	2b0d      	cmp	r3, #13
 800995a:	d1f8      	bne.n	800994e <BackEndTask+0xb6>
											&& ((j < MSG_RX_BUF_SIZE - 1
 800995c:	293e      	cmp	r1, #62	; 0x3e
 800995e:	dcf4      	bgt.n	800994a <BackEndTask+0xb2>
													&& UARTRxBuf[port - 1][j + 1]
 8009960:	1850      	adds	r0, r2, r1
 8009962:	7843      	ldrb	r3, [r0, #1]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1f0      	bne.n	800994a <BackEndTask+0xb2>
										UARTRxBuf[port - 1][j] = 0;
 8009968:	4643      	mov	r3, r8
 800996a:	019a      	lsls	r2, r3, #6
 800996c:	4ba7      	ldr	r3, [pc, #668]	; (8009c0c <BackEndTask+0x374>)
 800996e:	189b      	adds	r3, r3, r2
 8009970:	2200      	movs	r2, #0
 8009972:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] = j + 1;// Advance buffer index
 8009974:	3101      	adds	r1, #1
 8009976:	464b      	mov	r3, r9
 8009978:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] = FREE;// Free the previous CLI port 
 800997a:	4ba5      	ldr	r3, [pc, #660]	; (8009c10 <BackEndTask+0x378>)
 800997c:	7819      	ldrb	r1, [r3, #0]
 800997e:	48a5      	ldr	r0, [pc, #660]	; (8009c14 <BackEndTask+0x37c>)
 8009980:	5442      	strb	r2, [r0, r1]
										portStatus[port] = CLI;	// Continue the CLI session on this port
 8009982:	3203      	adds	r2, #3
 8009984:	7022      	strb	r2, [r4, #0]
										PcPort = port;
 8009986:	701d      	strb	r5, [r3, #0]
										xTaskNotifyGive(
 8009988:	4ba3      	ldr	r3, [pc, #652]	; (8009c18 <BackEndTask+0x380>)
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	2300      	movs	r3, #0
 800998e:	3a01      	subs	r2, #1
 8009990:	2100      	movs	r1, #0
 8009992:	f006 f8eb 	bl	800fb6c <xTaskGenericNotify>
										break;
 8009996:	e10f      	b.n	8009bb8 <BackEndTask+0x320>
															&& UARTRxBuf[port
 8009998:	7813      	ldrb	r3, [r2, #0]
							emptyBuffer = true;
 800999a:	2001      	movs	r0, #1
															&& UARTRxBuf[port
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1a8      	bne.n	80098f2 <BackEndTask+0x5a>
 80099a0:	e7e2      	b.n	8009968 <BackEndTask+0xd0>
					packetLength = UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80099a2:	0033      	movs	r3, r6
 80099a4:	333f      	adds	r3, #63	; 0x3f
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	9300      	str	r3, [sp, #0]
					parseStart = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	9302      	str	r3, [sp, #8]
				packetEnd = packetStart + (packetLength + 3);// Packet length is counted from Dst to before CRC
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	3303      	adds	r3, #3
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	445b      	add	r3, fp
 80099b6:	469a      	mov	sl, r3
				if (packetEnd > MSG_RX_BUF_SIZE - 1)			// wrap-around
 80099b8:	2b3f      	cmp	r3, #63	; 0x3f
 80099ba:	dd03      	ble.n	80099c4 <BackEndTask+0x12c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	425b      	negs	r3, r3
 80099c0:	469c      	mov	ip, r3
 80099c2:	44e2      	add	sl, ip
				if (packetStart != packetEnd)				// Non-empty packet
 80099c4:	45da      	cmp	sl, fp
 80099c6:	d100      	bne.n	80099ca <BackEndTask+0x132>
 80099c8:	e0d0      	b.n	8009b6c <BackEndTask+0x2d4>
					Delay_ms(1);
 80099ca:	2001      	movs	r0, #1
 80099cc:	f006 fcda 	bl	8010384 <HAL_Delay>
					if (packetStart < packetEnd) {
 80099d0:	45da      	cmp	sl, fp
 80099d2:	dd34      	ble.n	8009a3e <BackEndTask+0x1a6>
						memcpy(crcBuffer, &UARTRxBuf[port - 1][packetStart],
 80099d4:	4b91      	ldr	r3, [pc, #580]	; (8009c1c <BackEndTask+0x384>)
 80099d6:	18fb      	adds	r3, r7, r3
 80099d8:	019b      	lsls	r3, r3, #6
 80099da:	445b      	add	r3, fp
 80099dc:	4a8b      	ldr	r2, [pc, #556]	; (8009c0c <BackEndTask+0x374>)
 80099de:	4694      	mov	ip, r2
 80099e0:	4463      	add	r3, ip
 80099e2:	9303      	str	r3, [sp, #12]
 80099e4:	9a01      	ldr	r2, [sp, #4]
 80099e6:	0019      	movs	r1, r3
 80099e8:	488d      	ldr	r0, [pc, #564]	; (8009c20 <BackEndTask+0x388>)
 80099ea:	f00a f81e 	bl	8013a2a <memcpy>
					crc8 = CalculateCRC8((uint32_t*) &crcBuffer,
 80099ee:	9b00      	ldr	r3, [sp, #0]
 80099f0:	1cd9      	adds	r1, r3, #3
 80099f2:	488b      	ldr	r0, [pc, #556]	; (8009c20 <BackEndTask+0x388>)
 80099f4:	f003 fdb2 	bl	800d55c <CalculateCRC8>
 80099f8:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 80099fa:	2238      	movs	r2, #56	; 0x38
 80099fc:	2100      	movs	r1, #0
 80099fe:	4888      	ldr	r0, [pc, #544]	; (8009c20 <BackEndTask+0x388>)
 8009a00:	f00a f81c 	bl	8013a3c <memset>
					if (crc8 == UARTRxBuf[port - 1][packetEnd]) {
 8009a04:	4643      	mov	r3, r8
 8009a06:	019b      	lsls	r3, r3, #6
 8009a08:	4a80      	ldr	r2, [pc, #512]	; (8009c0c <BackEndTask+0x374>)
 8009a0a:	4694      	mov	ip, r2
 8009a0c:	4463      	add	r3, ip
 8009a0e:	4652      	mov	r2, sl
 8009a10:	5c9b      	ldrb	r3, [r3, r2]
 8009a12:	9a01      	ldr	r2, [sp, #4]
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d040      	beq.n	8009a9a <BackEndTask+0x202>
				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if (packetStart < packetEnd) {
					memset(&UARTRxBuf[port - 1][packetStart], 0,
							(packetLength) + 4);
 8009a18:	9a00      	ldr	r2, [sp, #0]
 8009a1a:	3204      	adds	r2, #4
					memset(&UARTRxBuf[port - 1][packetStart], 0,
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	9803      	ldr	r0, [sp, #12]
 8009a20:	f00a f80c 	bl	8013a3c <memset>
 8009a24:	e0b8      	b.n	8009b98 <BackEndTask+0x300>
					packetLength = UARTRxBuf[port - 1][0];
 8009a26:	7833      	ldrb	r3, [r6, #0]
 8009a28:	9300      	str	r3, [sp, #0]
					parseStart = 1;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	9302      	str	r3, [sp, #8]
 8009a2e:	e7be      	b.n	80099ae <BackEndTask+0x116>
					packetLength = UARTRxBuf[port - 1][1];
 8009a30:	7873      	ldrb	r3, [r6, #1]
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	233f      	movs	r3, #63	; 0x3f
 8009a36:	469b      	mov	fp, r3
					parseStart = 2;
 8009a38:	3b3d      	subs	r3, #61	; 0x3d
 8009a3a:	9302      	str	r3, [sp, #8]
 8009a3c:	e7b7      	b.n	80099ae <BackEndTask+0x116>
						MSG_RX_BUF_SIZE - packetStart);
 8009a3e:	2240      	movs	r2, #64	; 0x40
 8009a40:	465b      	mov	r3, fp
 8009a42:	1ad3      	subs	r3, r2, r3
						memcpy(crcBuffer, &UARTRxBuf[port - 1][packetStart],
 8009a44:	4a75      	ldr	r2, [pc, #468]	; (8009c1c <BackEndTask+0x384>)
 8009a46:	18b9      	adds	r1, r7, r2
 8009a48:	0189      	lsls	r1, r1, #6
 8009a4a:	4459      	add	r1, fp
 8009a4c:	4a6f      	ldr	r2, [pc, #444]	; (8009c0c <BackEndTask+0x374>)
 8009a4e:	4694      	mov	ip, r2
 8009a50:	4461      	add	r1, ip
 8009a52:	9303      	str	r3, [sp, #12]
 8009a54:	001a      	movs	r2, r3
 8009a56:	4872      	ldr	r0, [pc, #456]	; (8009c20 <BackEndTask+0x388>)
 8009a58:	f009 ffe7 	bl	8013a2a <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],
 8009a5c:	4a70      	ldr	r2, [pc, #448]	; (8009c20 <BackEndTask+0x388>)
 8009a5e:	0010      	movs	r0, r2
 8009a60:	9b03      	ldr	r3, [sp, #12]
 8009a62:	469c      	mov	ip, r3
 8009a64:	4460      	add	r0, ip
										- (MSG_RX_BUF_SIZE - packetStart));
 8009a66:	9a01      	ldr	r2, [sp, #4]
 8009a68:	1ad2      	subs	r2, r2, r3
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],
 8009a6a:	0031      	movs	r1, r6
 8009a6c:	f009 ffdd 	bl	8013a2a <memcpy>
					crc8 = CalculateCRC8((uint32_t*) &crcBuffer,
 8009a70:	9b00      	ldr	r3, [sp, #0]
 8009a72:	1cd9      	adds	r1, r3, #3
 8009a74:	486a      	ldr	r0, [pc, #424]	; (8009c20 <BackEndTask+0x388>)
 8009a76:	f003 fd71 	bl	800d55c <CalculateCRC8>
 8009a7a:	9001      	str	r0, [sp, #4]
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009a7c:	2238      	movs	r2, #56	; 0x38
 8009a7e:	2100      	movs	r1, #0
 8009a80:	4867      	ldr	r0, [pc, #412]	; (8009c20 <BackEndTask+0x388>)
 8009a82:	f009 ffdb 	bl	8013a3c <memset>
					if (crc8 == UARTRxBuf[port - 1][packetEnd]) {
 8009a86:	4643      	mov	r3, r8
 8009a88:	019b      	lsls	r3, r3, #6
 8009a8a:	4a60      	ldr	r2, [pc, #384]	; (8009c0c <BackEndTask+0x374>)
 8009a8c:	4694      	mov	ip, r2
 8009a8e:	4463      	add	r3, ip
 8009a90:	4652      	mov	r2, sl
 8009a92:	5c9b      	ldrb	r3, [r3, r2]
 8009a94:	9a01      	ldr	r2, [sp, #4]
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d168      	bne.n	8009b6c <BackEndTask+0x2d4>
						portStatus[port] = MSG;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	7023      	strb	r3, [r4, #0]
						messageLength[port - 1] = packetLength;
 8009a9e:	1ebb      	subs	r3, r7, #2
 8009aa0:	4a60      	ldr	r2, [pc, #384]	; (8009c24 <BackEndTask+0x38c>)
 8009aa2:	9900      	ldr	r1, [sp, #0]
 8009aa4:	54d1      	strb	r1, [r2, r3]
								<= (MSG_RX_BUF_SIZE - parseStart - 1)) {
 8009aa6:	233f      	movs	r3, #63	; 0x3f
 8009aa8:	9c02      	ldr	r4, [sp, #8]
 8009aaa:	1b1b      	subs	r3, r3, r4
						if ((packetLength)
 8009aac:	000a      	movs	r2, r1
 8009aae:	428b      	cmp	r3, r1
 8009ab0:	db27      	blt.n	8009b02 <BackEndTask+0x26a>
							memcpy(&cMessage[port - 1][0],
 8009ab2:	00f8      	lsls	r0, r7, #3
 8009ab4:	1bc0      	subs	r0, r0, r7
 8009ab6:	00c0      	lsls	r0, r0, #3
 8009ab8:	9b05      	ldr	r3, [sp, #20]
 8009aba:	469c      	mov	ip, r3
 8009abc:	4460      	add	r0, ip
									&UARTRxBuf[port - 1][parseStart],
 8009abe:	4b57      	ldr	r3, [pc, #348]	; (8009c1c <BackEndTask+0x384>)
 8009ac0:	18f9      	adds	r1, r7, r3
 8009ac2:	0189      	lsls	r1, r1, #6
 8009ac4:	46a4      	mov	ip, r4
 8009ac6:	4461      	add	r1, ip
 8009ac8:	4b50      	ldr	r3, [pc, #320]	; (8009c0c <BackEndTask+0x374>)
 8009aca:	18c9      	adds	r1, r1, r3
							memcpy(&cMessage[port - 1][0],
 8009acc:	f009 ffad 	bl	8013a2a <memcpy>
						if (packetStart < packetEnd) {
 8009ad0:	45da      	cmp	sl, fp
 8009ad2:	dd36      	ble.n	8009b42 <BackEndTask+0x2aa>
									(packetLength) + 4);
 8009ad4:	9a00      	ldr	r2, [sp, #0]
 8009ad6:	3204      	adds	r2, #4
							memset(&UARTRxBuf[port - 1][packetStart], 0,
 8009ad8:	4b50      	ldr	r3, [pc, #320]	; (8009c1c <BackEndTask+0x384>)
 8009ada:	18f8      	adds	r0, r7, r3
 8009adc:	0180      	lsls	r0, r0, #6
 8009ade:	4458      	add	r0, fp
 8009ae0:	4b4a      	ldr	r3, [pc, #296]	; (8009c0c <BackEndTask+0x374>)
 8009ae2:	18c0      	adds	r0, r0, r3
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f009 ffa9 	bl	8013a3c <memset>
						UARTRxBufIndex[port - 1] = (packetEnd + 1);	// Set buffer pointer after the CRC byte 
 8009aea:	4653      	mov	r3, sl
 8009aec:	3301      	adds	r3, #1
 8009aee:	464a      	mov	r2, r9
 8009af0:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009af2:	4a4d      	ldr	r2, [pc, #308]	; (8009c28 <BackEndTask+0x390>)
 8009af4:	8813      	ldrh	r3, [r2, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);
 8009afa:	0028      	movs	r0, r5
 8009afc:	f7ff fb74 	bl	80091e8 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 8009b00:	e05a      	b.n	8009bb8 <BackEndTask+0x320>
 8009b02:	00fb      	lsls	r3, r7, #3
 8009b04:	1bdb      	subs	r3, r3, r7
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	4698      	mov	r8, r3
									MSG_RX_BUF_SIZE - parseStart);
 8009b0a:	2440      	movs	r4, #64	; 0x40
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	1ae4      	subs	r4, r4, r3
							memcpy(&cMessage[port - 1][0],
 8009b10:	9a04      	ldr	r2, [sp, #16]
 8009b12:	4442      	add	r2, r8
 8009b14:	0010      	movs	r0, r2
									&UARTRxBuf[port - 1][parseStart],
 8009b16:	4a41      	ldr	r2, [pc, #260]	; (8009c1c <BackEndTask+0x384>)
 8009b18:	18b9      	adds	r1, r7, r2
 8009b1a:	0189      	lsls	r1, r1, #6
 8009b1c:	469c      	mov	ip, r3
 8009b1e:	4461      	add	r1, ip
 8009b20:	4b3a      	ldr	r3, [pc, #232]	; (8009c0c <BackEndTask+0x374>)
 8009b22:	18c9      	adds	r1, r1, r3
							memcpy(&cMessage[port - 1][0],
 8009b24:	0022      	movs	r2, r4
 8009b26:	f009 ff80 	bl	8013a2a <memcpy>
									&cMessage[port - 1][MSG_RX_BUF_SIZE
 8009b2a:	4640      	mov	r0, r8
 8009b2c:	3870      	subs	r0, #112	; 0x70
 8009b2e:	1900      	adds	r0, r0, r4
 8009b30:	4b33      	ldr	r3, [pc, #204]	; (8009c00 <BackEndTask+0x368>)
 8009b32:	469c      	mov	ip, r3
 8009b34:	4460      	add	r0, ip
											- (MSG_RX_BUF_SIZE - parseStart));// wrap-around
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	1b1a      	subs	r2, r3, r4
							memcpy(
 8009b3a:	0031      	movs	r1, r6
 8009b3c:	f009 ff75 	bl	8013a2a <memcpy>
 8009b40:	e7c6      	b.n	8009ad0 <BackEndTask+0x238>
							MSG_RX_BUF_SIZE - packetStart);
 8009b42:	2440      	movs	r4, #64	; 0x40
 8009b44:	465b      	mov	r3, fp
 8009b46:	1ae4      	subs	r4, r4, r3
							memset(&UARTRxBuf[port - 1][packetStart], 0,
 8009b48:	4b34      	ldr	r3, [pc, #208]	; (8009c1c <BackEndTask+0x384>)
 8009b4a:	18f8      	adds	r0, r7, r3
 8009b4c:	0180      	lsls	r0, r0, #6
 8009b4e:	4458      	add	r0, fp
 8009b50:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <BackEndTask+0x374>)
 8009b52:	18c0      	adds	r0, r0, r3
 8009b54:	0022      	movs	r2, r4
 8009b56:	2100      	movs	r1, #0
 8009b58:	f009 ff70 	bl	8013a3c <memset>
									((packetLength) + 4)
 8009b5c:	9a00      	ldr	r2, [sp, #0]
 8009b5e:	3204      	adds	r2, #4
											- (MSG_RX_BUF_SIZE - packetStart));
 8009b60:	1b12      	subs	r2, r2, r4
							memset(&UARTRxBuf[port - 1][0], 0,
 8009b62:	2100      	movs	r1, #0
 8009b64:	0030      	movs	r0, r6
 8009b66:	f009 ff69 	bl	8013a3c <memset>
 8009b6a:	e7be      	b.n	8009aea <BackEndTask+0x252>
				} else {                // wrap around
					memset(&UARTRxBuf[port - 1][packetStart], 0,
					MSG_RX_BUF_SIZE - packetStart);
 8009b6c:	2240      	movs	r2, #64	; 0x40
 8009b6e:	465b      	mov	r3, fp
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	4698      	mov	r8, r3
					memset(&UARTRxBuf[port - 1][packetStart], 0,
 8009b74:	4b29      	ldr	r3, [pc, #164]	; (8009c1c <BackEndTask+0x384>)
 8009b76:	18f8      	adds	r0, r7, r3
 8009b78:	0180      	lsls	r0, r0, #6
 8009b7a:	4458      	add	r0, fp
 8009b7c:	4b23      	ldr	r3, [pc, #140]	; (8009c0c <BackEndTask+0x374>)
 8009b7e:	18c0      	adds	r0, r0, r3
 8009b80:	4642      	mov	r2, r8
 8009b82:	2100      	movs	r1, #0
 8009b84:	f009 ff5a 	bl	8013a3c <memset>
					memset(&UARTRxBuf[port - 1][0], 0,
							((packetLength) + 4)
 8009b88:	9a00      	ldr	r2, [sp, #0]
 8009b8a:	3204      	adds	r2, #4
									- (MSG_RX_BUF_SIZE - packetStart));
 8009b8c:	4643      	mov	r3, r8
 8009b8e:	1ad2      	subs	r2, r2, r3
					memset(&UARTRxBuf[port - 1][0], 0,
 8009b90:	2100      	movs	r1, #0
 8009b92:	0030      	movs	r0, r6
 8009b94:	f009 ff52 	bl	8013a3c <memset>
				}

				/* A.6.2 Advance buffer index */
				UARTRxBufIndex[port - 1] = (packetEnd + 1);	// Set buffer pointer after the CRC byte 
 8009b98:	4653      	mov	r3, sl
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	464a      	mov	r2, r9
 8009b9e:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;
 8009ba0:	4a22      	ldr	r2, [pc, #136]	; (8009c2c <BackEndTask+0x394>)
 8009ba2:	8813      	ldrh	r3, [r2, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	8013      	strh	r3, [r2, #0]
 8009ba8:	e014      	b.n	8009bd4 <BackEndTask+0x33c>
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port - 1] == true) {
				MsgDMAStopped[port - 1] = false;
				if (portStatus[port] == OVERRUN)
					portStatus[port] = FREE;
				HAL_UART_Receive_DMA(GetUart(port),
 8009baa:	0028      	movs	r0, r5
 8009bac:	f004 fa74 	bl	800e098 <GetUart>
 8009bb0:	2240      	movs	r2, #64	; 0x40
 8009bb2:	0031      	movs	r1, r6
 8009bb4:	f009 fa22 	bl	8012ffc <HAL_UART_Receive_DMA>
		for (port = 1; port <= NumOfPorts; port++) {
 8009bb8:	3501      	adds	r5, #1
 8009bba:	b2ed      	uxtb	r5, r5
 8009bbc:	3701      	adds	r7, #1
 8009bbe:	3640      	adds	r6, #64	; 0x40
 8009bc0:	2d06      	cmp	r5, #6
 8009bc2:	d016      	beq.n	8009bf2 <BackEndTask+0x35a>
 8009bc4:	1e7c      	subs	r4, r7, #1
 8009bc6:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <BackEndTask+0x37c>)
 8009bc8:	469c      	mov	ip, r3
 8009bca:	4464      	add	r4, ip
			if (portStatus[port] == MSG || portStatus[port] == FREE) {
 8009bcc:	7823      	ldrb	r3, [r4, #0]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d800      	bhi.n	8009bd4 <BackEndTask+0x33c>
 8009bd2:	e671      	b.n	80098b8 <BackEndTask+0x20>
 8009bd4:	1ebb      	subs	r3, r7, #2
 8009bd6:	4a16      	ldr	r2, [pc, #88]	; (8009c30 <BackEndTask+0x398>)
 8009bd8:	4694      	mov	ip, r2
 8009bda:	4463      	add	r3, ip
			if (MsgDMAStopped[port - 1] == true) {
 8009bdc:	781a      	ldrb	r2, [r3, #0]
 8009bde:	2a00      	cmp	r2, #0
 8009be0:	d0ea      	beq.n	8009bb8 <BackEndTask+0x320>
				MsgDMAStopped[port - 1] = false;
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)
 8009be6:	7823      	ldrb	r3, [r4, #0]
 8009be8:	2b05      	cmp	r3, #5
 8009bea:	d1de      	bne.n	8009baa <BackEndTask+0x312>
					portStatus[port] = FREE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	7023      	strb	r3, [r4, #0]
 8009bf0:	e7db      	b.n	8009baa <BackEndTask+0x312>
						(uint8_t*) &UARTRxBuf[port - 1], MSG_RX_BUF_SIZE);
			}
		}

		taskYIELD();
 8009bf2:	f006 fa49 	bl	8010088 <vPortYield>
 8009bf6:	4e05      	ldr	r6, [pc, #20]	; (8009c0c <BackEndTask+0x374>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009bf8:	2702      	movs	r7, #2
		for (port = 1; port <= NumOfPorts; port++) {
 8009bfa:	2501      	movs	r5, #1
 8009bfc:	e7e2      	b.n	8009bc4 <BackEndTask+0x32c>
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	20000530 	.word	0x20000530
 8009c04:	20000bf8 	.word	0x20000bf8
 8009c08:	2000612c 	.word	0x2000612c
 8009c0c:	20000ab8 	.word	0x20000ab8
 8009c10:	2000029f 	.word	0x2000029f
 8009c14:	200008e0 	.word	0x200008e0
 8009c18:	20000c9c 	.word	0x20000c9c
 8009c1c:	03fffffe 	.word	0x03fffffe
 8009c20:	20000c00 	.word	0x20000c00
 8009c24:	20000720 	.word	0x20000720
 8009c28:	20000d70 	.word	0x20000d70
 8009c2c:	20000f18 	.word	0x20000f18
 8009c30:	20000ab0 	.word	0x20000ab0

08009c34 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;

	return result;
}
 8009c34:	2001      	movs	r0, #1
 8009c36:	4770      	bx	lr

08009c38 <PxMessagingTask>:
void PxMessagingTask(void *argument) {
 8009c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c3a:	46de      	mov	lr, fp
 8009c3c:	4657      	mov	r7, sl
 8009c3e:	464e      	mov	r6, r9
 8009c40:	4645      	mov	r5, r8
 8009c42:	b5e0      	push	{r5, r6, r7, lr}
 8009c44:	b097      	sub	sp, #92	; 0x5c
	port = (int8_t) (unsigned) argument;
 8009c46:	b2c3      	uxtb	r3, r0
 8009c48:	9308      	str	r3, [sp, #32]
 8009c4a:	23ff      	movs	r3, #255	; 0xff
 8009c4c:	4003      	ands	r3, r0
 8009c4e:	469b      	mov	fp, r3
		if (messageLength[port - 1]) {
 8009c50:	1e5d      	subs	r5, r3, #1
 8009c52:	00eb      	lsls	r3, r5, #3
 8009c54:	1b5b      	subs	r3, r3, r5
 8009c56:	00db      	lsls	r3, r3, #3
 8009c58:	0019      	movs	r1, r3
		memset(cMessage[port - 1], 0, (size_t) messageLength[port - 1]);
 8009c5a:	4ad6      	ldr	r2, [pc, #856]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009c5c:	18d3      	adds	r3, r2, r3
 8009c5e:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result = BOS_OK;
 8009c64:	2700      	movs	r7, #0
			if (cMessage[port - 1][2] >> 7) {
 8009c66:	000e      	movs	r6, r1
 8009c68:	1853      	adds	r3, r2, r1
 8009c6a:	3302      	adds	r3, #2
 8009c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c6e:	468a      	mov	sl, r1
 8009c70:	e026      	b.n	8009cc0 <PxMessagingTask+0x88>
				longMessage = 1;
 8009c72:	4ad1      	ldr	r2, [pc, #836]	; (8009fb8 <PxMessagingTask+0x380>)
 8009c74:	2001      	movs	r0, #1
 8009c76:	7010      	strb	r0, [r2, #0]
 8009c78:	e033      	b.n	8009ce2 <PxMessagingTask+0xaa>
				code = cMessage[port - 1][3 + shift];
 8009c7a:	4bce      	ldr	r3, [pc, #824]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009c7c:	199b      	adds	r3, r3, r6
 8009c7e:	189a      	adds	r2, r3, r2
 8009c80:	78d3      	ldrb	r3, [r2, #3]
 8009c82:	4698      	mov	r8, r3
 8009c84:	e04a      	b.n	8009d1c <PxMessagingTask+0xe4>
				if (code == CODE_UPDATE) {		// Remote bootloader update
 8009c86:	4643      	mov	r3, r8
 8009c88:	2b19      	cmp	r3, #25
 8009c8a:	d063      	beq.n	8009d54 <PxMessagingTask+0x11c>
				} else if (code == CODE_UPDATE_VIA_PORT) {// Remote 'via port' bootloader update
 8009c8c:	2b1a      	cmp	r3, #26
 8009c8e:	d06b      	beq.n	8009d68 <PxMessagingTask+0x130>
		if (result == BOS_ERR_UnknownMessage) {
 8009c90:	2f01      	cmp	r7, #1
 8009c92:	d101      	bne.n	8009c98 <PxMessagingTask+0x60>
 8009c94:	f001 fabe 	bl	800b214 <PxMessagingTask+0x15dc>
		memset(cMessage[port - 1], 0, (size_t) messageLength[port - 1]);
 8009c98:	4cc8      	ldr	r4, [pc, #800]	; (8009fbc <PxMessagingTask+0x384>)
 8009c9a:	5d62      	ldrb	r2, [r4, r5]
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	9807      	ldr	r0, [sp, #28]
 8009ca0:	f009 fecc 	bl	8013a3c <memset>
		messageLength[port - 1] = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	5563      	strb	r3, [r4, r5]
		if (portStatus[port] != STREAM && portStatus[port] != CLI
 8009ca8:	4bc5      	ldr	r3, [pc, #788]	; (8009fc0 <PxMessagingTask+0x388>)
				&& portStatus[port] != PORTBUTTON) {
 8009caa:	465a      	mov	r2, fp
 8009cac:	5c9b      	ldrb	r3, [r3, r2]
		if (portStatus[port] != STREAM && portStatus[port] != CLI
 8009cae:	3b02      	subs	r3, #2
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d903      	bls.n	8009cbc <PxMessagingTask+0x84>
			portStatus[port] = FREE;
 8009cb4:	4bc2      	ldr	r3, [pc, #776]	; (8009fc0 <PxMessagingTask+0x388>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	4659      	mov	r1, fp
 8009cba:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8009cbc:	f006 f9e4 	bl	8010088 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	4249      	negs	r1, r1
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	f005 ff05 	bl	800fad4 <ulTaskNotifyTake>
		if (messageLength[port - 1]) {
 8009cca:	4bbc      	ldr	r3, [pc, #752]	; (8009fbc <PxMessagingTask+0x384>)
 8009ccc:	5d59      	ldrb	r1, [r3, r5]
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d0de      	beq.n	8009c90 <PxMessagingTask+0x58>
			if (cMessage[port - 1][2] >> 7) {
 8009cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	b25a      	sxtb	r2, r3
 8009cd8:	2a00      	cmp	r2, #0
 8009cda:	dbca      	blt.n	8009c72 <PxMessagingTask+0x3a>
				longMessage = 0;
 8009cdc:	4ab6      	ldr	r2, [pc, #728]	; (8009fb8 <PxMessagingTask+0x380>)
 8009cde:	2000      	movs	r0, #0
 8009ce0:	7010      	strb	r0, [r2, #0]
			dst = cMessage[port - 1][0];
 8009ce2:	4ab4      	ldr	r2, [pc, #720]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009ce4:	5cb0      	ldrb	r0, [r6, r2]
 8009ce6:	4681      	mov	r9, r0
			src = cMessage[port - 1][1];
 8009ce8:	1992      	adds	r2, r2, r6
 8009cea:	7852      	ldrb	r2, [r2, #1]
 8009cec:	9204      	str	r2, [sp, #16]
			if (cMessage[port - 1][2] & 0x01) {	// 1st bit (LSB) Extended options - TODO handle extended options case
 8009cee:	2201      	movs	r2, #1
 8009cf0:	401a      	ands	r2, r3
			shift = 0;
 8009cf2:	9206      	str	r2, [sp, #24]
			BOS.trace = (traceOptions_t) ((cMessage[port - 1][2] >> 2) & 0x03);	// 3rd-4th bits Trace 
 8009cf4:	4cb3      	ldr	r4, [pc, #716]	; (8009fc4 <PxMessagingTask+0x38c>)
 8009cf6:	0718      	lsls	r0, r3, #28
 8009cf8:	0f80      	lsrs	r0, r0, #30
 8009cfa:	71e0      	strb	r0, [r4, #7]
			BOS.response = (cMessage[port - 1][2]) & 0x60;// 6th-7th bits Response mode
 8009cfc:	2060      	movs	r0, #96	; 0x60
 8009cfe:	4018      	ands	r0, r3
 8009d00:	71a0      	strb	r0, [r4, #6]
			if (extendCode == true) {
 8009d02:	079b      	lsls	r3, r3, #30
 8009d04:	d5b9      	bpl.n	8009c7a <PxMessagingTask+0x42>
				code = (((uint16_t) cMessage[port - 1][4 + shift] << 8)
 8009d06:	4bab      	ldr	r3, [pc, #684]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009d08:	199b      	adds	r3, r3, r6
 8009d0a:	189b      	adds	r3, r3, r2
 8009d0c:	7918      	ldrb	r0, [r3, #4]
 8009d0e:	0200      	lsls	r0, r0, #8
						+ cMessage[port - 1][3 + shift]);
 8009d10:	78db      	ldrb	r3, [r3, #3]
				code = (((uint16_t) cMessage[port - 1][4 + shift] << 8)
 8009d12:	181b      	adds	r3, r3, r0
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	4698      	mov	r8, r3
				++shift;
 8009d18:	1c53      	adds	r3, r2, #1
 8009d1a:	9306      	str	r3, [sp, #24]
			if ((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1))
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2bfc      	cmp	r3, #252	; 0xfc
 8009d24:	d901      	bls.n	8009d2a <PxMessagingTask+0xf2>
 8009d26:	f001 faae 	bl	800b286 <PxMessagingTask+0x164e>
 8009d2a:	4ba7      	ldr	r3, [pc, #668]	; (8009fc8 <PxMessagingTask+0x390>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	454b      	cmp	r3, r9
 8009d30:	d101      	bne.n	8009d36 <PxMessagingTask+0xfe>
 8009d32:	f001 faa8 	bl	800b286 <PxMessagingTask+0x164e>
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d101      	bne.n	8009d3e <PxMessagingTask+0x106>
 8009d3a:	f001 fa9d 	bl	800b278 <PxMessagingTask+0x1640>
				ForwardReceivedMessage(port);
 8009d3e:	9808      	ldr	r0, [sp, #32]
 8009d40:	f7ff fc4e 	bl	80095e0 <ForwardReceivedMessage>
				if (BOS.trace)
 8009d44:	4b9f      	ldr	r3, [pc, #636]	; (8009fc4 <PxMessagingTask+0x38c>)
 8009d46:	79db      	ldrb	r3, [r3, #7]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d09c      	beq.n	8009c86 <PxMessagingTask+0x4e>
					indMode = IND_SHORT_BLINK;
 8009d4c:	4b9f      	ldr	r3, [pc, #636]	; (8009fcc <PxMessagingTask+0x394>)
 8009d4e:	2203      	movs	r2, #3
 8009d50:	701a      	strb	r2, [r3, #0]
 8009d52:	e798      	b.n	8009c86 <PxMessagingTask+0x4e>
					Delay_ms(100);
 8009d54:	2064      	movs	r0, #100	; 0x64
 8009d56:	f006 fb15 	bl	8010384 <HAL_Delay>
					remoteBootloaderUpdate(src, dst, port, 0);
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9a08      	ldr	r2, [sp, #32]
 8009d5e:	4649      	mov	r1, r9
 8009d60:	9804      	ldr	r0, [sp, #16]
 8009d62:	f7f9 ff0b 	bl	8003b7c <remoteBootloaderUpdate>
 8009d66:	e793      	b.n	8009c90 <PxMessagingTask+0x58>
					Delay_ms(100);
 8009d68:	2064      	movs	r0, #100	; 0x64
 8009d6a:	f006 fb0b 	bl	8010384 <HAL_Delay>
					remoteBootloaderUpdate(src, dst, port,
 8009d6e:	4b91      	ldr	r3, [pc, #580]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009d70:	199b      	adds	r3, r3, r6
 8009d72:	9a06      	ldr	r2, [sp, #24]
 8009d74:	5c9b      	ldrb	r3, [r3, r2]
 8009d76:	9a08      	ldr	r2, [sp, #32]
 8009d78:	4649      	mov	r1, r9
 8009d7a:	9804      	ldr	r0, [sp, #16]
 8009d7c:	f7f9 fefe 	bl	8003b7c <remoteBootloaderUpdate>
 8009d80:	e786      	b.n	8009c90 <PxMessagingTask+0x58>
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 8009d82:	4b8c      	ldr	r3, [pc, #560]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009d84:	199b      	adds	r3, r3, r6
 8009d86:	1859      	adds	r1, r3, r1
 8009d88:	3901      	subs	r1, #1
 8009d8a:	780b      	ldrb	r3, [r1, #0]
								!= bcastLastID) {
 8009d8c:	4a90      	ldr	r2, [pc, #576]	; (8009fd0 <PxMessagingTask+0x398>)
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d113      	bne.n	8009dbc <PxMessagingTask+0x184>
					result = BOS_ERR_MSG_Reflection;
 8009d94:	2703      	movs	r7, #3
				if (result == BOS_OK) {
 8009d96:	2f00      	cmp	r7, #0
 8009d98:	d000      	beq.n	8009d9c <PxMessagingTask+0x164>
 8009d9a:	e779      	b.n	8009c90 <PxMessagingTask+0x58>
				shift += 4;
 8009d9c:	9c06      	ldr	r4, [sp, #24]
 8009d9e:	3404      	adds	r4, #4
				numOfParams = messageLength[port - 1] - shift;
 8009da0:	4b86      	ldr	r3, [pc, #536]	; (8009fbc <PxMessagingTask+0x384>)
 8009da2:	5d59      	ldrb	r1, [r3, r5]
 8009da4:	1b0a      	subs	r2, r1, r4
 8009da6:	b2d3      	uxtb	r3, r2
 8009da8:	9306      	str	r3, [sp, #24]
					switch (code) {
 8009daa:	4643      	mov	r3, r8
 8009dac:	2b24      	cmp	r3, #36	; 0x24
 8009dae:	d901      	bls.n	8009db4 <PxMessagingTask+0x17c>
 8009db0:	f001 fa04 	bl	800b1bc <PxMessagingTask+0x1584>
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4a87      	ldr	r2, [pc, #540]	; (8009fd4 <PxMessagingTask+0x39c>)
 8009db8:	58d3      	ldr	r3, [r2, r3]
 8009dba:	469f      	mov	pc, r3
					bcastID = bcastLastID =
 8009dbc:	4a84      	ldr	r2, [pc, #528]	; (8009fd0 <PxMessagingTask+0x398>)
 8009dbe:	7013      	strb	r3, [r2, #0]
 8009dc0:	4a85      	ldr	r2, [pc, #532]	; (8009fd8 <PxMessagingTask+0x3a0>)
 8009dc2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009dc4:	9908      	ldr	r1, [sp, #32]
 8009dc6:	20ff      	movs	r0, #255	; 0xff
 8009dc8:	f7ff fc2a 	bl	8009620 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] = 0;// Reset bcastID location 
 8009dcc:	4b7b      	ldr	r3, [pc, #492]	; (8009fbc <PxMessagingTask+0x384>)
 8009dce:	5d5a      	ldrb	r2, [r3, r5]
 8009dd0:	4b78      	ldr	r3, [pc, #480]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009dd2:	199b      	adds	r3, r3, r6
 8009dd4:	189b      	adds	r3, r3, r2
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e7db      	b.n	8009d96 <PxMessagingTask+0x15e>
						for (p = 0; p < numOfParams; p++) {
 8009dde:	9b06      	ldr	r3, [sp, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01f      	beq.n	8009e24 <PxMessagingTask+0x1ec>
							arrayPortsDir[src - 1] |= (0x8000
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	1e58      	subs	r0, r3, #1
 8009de8:	0042      	lsls	r2, r0, #1
 8009dea:	4b7c      	ldr	r3, [pc, #496]	; (8009fdc <PxMessagingTask+0x3a4>)
 8009dec:	5ad3      	ldrh	r3, [r2, r3]
 8009dee:	4652      	mov	r2, sl
 8009df0:	18a1      	adds	r1, r4, r2
 8009df2:	4a70      	ldr	r2, [pc, #448]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009df4:	1889      	adds	r1, r1, r2
 8009df6:	3201      	adds	r2, #1
 8009df8:	4452      	add	r2, sl
 8009dfa:	1914      	adds	r4, r2, r4
 8009dfc:	9a06      	ldr	r2, [sp, #24]
 8009dfe:	3a01      	subs	r2, #1
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	18a4      	adds	r4, r4, r2
									>> ((cMessage[port - 1][shift + p]) - 1));
 8009e04:	2780      	movs	r7, #128	; 0x80
 8009e06:	023f      	lsls	r7, r7, #8
 8009e08:	4684      	mov	ip, r0
 8009e0a:	780a      	ldrb	r2, [r1, #0]
 8009e0c:	3a01      	subs	r2, #1
 8009e0e:	0038      	movs	r0, r7
 8009e10:	4110      	asrs	r0, r2
							arrayPortsDir[src - 1] |= (0x8000
 8009e12:	4303      	orrs	r3, r0
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3101      	adds	r1, #1
						for (p = 0; p < numOfParams; p++) {
 8009e18:	42a1      	cmp	r1, r4
 8009e1a:	d1f6      	bne.n	8009e0a <PxMessagingTask+0x1d2>
 8009e1c:	4660      	mov	r0, ip
 8009e1e:	0040      	lsls	r0, r0, #1
 8009e20:	4a6e      	ldr	r2, [pc, #440]	; (8009fdc <PxMessagingTask+0x3a4>)
 8009e22:	5283      	strh	r3, [r0, r2]
						responseStatus = BOS_OK;
 8009e24:	4b6e      	ldr	r3, [pc, #440]	; (8009fe0 <PxMessagingTask+0x3a8>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	701a      	strb	r2, [r3, #0]
						break;
 8009e2a:	2700      	movs	r7, #0
 8009e2c:	e734      	b.n	8009c98 <PxMessagingTask+0x60>
						indMode = IND_PING;
 8009e2e:	4b67      	ldr	r3, [pc, #412]	; (8009fcc <PxMessagingTask+0x394>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 8009e34:	200a      	movs	r0, #10
 8009e36:	f004 fa7a 	bl	800e32e <osDelay>
						if (BOS.response == BOS_RESPONSE_ALL
 8009e3a:	4b62      	ldr	r3, [pc, #392]	; (8009fc4 <PxMessagingTask+0x38c>)
								|| BOS.response == BOS_RESPONSE_MSG)
 8009e3c:	799b      	ldrb	r3, [r3, #6]
 8009e3e:	2240      	movs	r2, #64	; 0x40
 8009e40:	4393      	bics	r3, r2
 8009e42:	2700      	movs	r7, #0
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	d000      	beq.n	8009e4a <PxMessagingTask+0x212>
 8009e48:	e726      	b.n	8009c98 <PxMessagingTask+0x60>
							SendMessageToModule(src, CODE_PING_RESPONSE, 0);
 8009e4a:	003a      	movs	r2, r7
 8009e4c:	2102      	movs	r1, #2
 8009e4e:	9804      	ldr	r0, [sp, #16]
 8009e50:	f7ff fc2e 	bl	80096b0 <SendMessageToModule>
 8009e54:	e720      	b.n	8009c98 <PxMessagingTask+0x60>
						if (!moduleAlias[myID][0])
 8009e56:	4b5c      	ldr	r3, [pc, #368]	; (8009fc8 <PxMessagingTask+0x390>)
 8009e58:	781a      	ldrb	r2, [r3, #0]
 8009e5a:	0093      	lsls	r3, r2, #2
 8009e5c:	189b      	adds	r3, r3, r2
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	4a60      	ldr	r2, [pc, #384]	; (8009fe4 <PxMessagingTask+0x3ac>)
 8009e62:	5c9b      	ldrb	r3, [r3, r2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d117      	bne.n	8009e98 <PxMessagingTask+0x260>
							sprintf((char*) pcUserMessage,
 8009e68:	9a04      	ldr	r2, [sp, #16]
 8009e6a:	495f      	ldr	r1, [pc, #380]	; (8009fe8 <PxMessagingTask+0x3b0>)
 8009e6c:	485f      	ldr	r0, [pc, #380]	; (8009fec <PxMessagingTask+0x3b4>)
 8009e6e:	f00a fd43 	bl	80148f8 <siprintf>
								strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009e72:	4c5e      	ldr	r4, [pc, #376]	; (8009fec <PxMessagingTask+0x3b4>)
 8009e74:	0020      	movs	r0, r4
 8009e76:	f7f6 f94f 	bl	8000118 <strlen>
						writePxMutex(PcPort, pcUserMessage,
 8009e7a:	b282      	uxth	r2, r0
 8009e7c:	4b5c      	ldr	r3, [pc, #368]	; (8009ff0 <PxMessagingTask+0x3b8>)
 8009e7e:	7818      	ldrb	r0, [r3, #0]
 8009e80:	2301      	movs	r3, #1
 8009e82:	425b      	negs	r3, r3
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	3333      	adds	r3, #51	; 0x33
 8009e88:	0021      	movs	r1, r4
 8009e8a:	f004 f923 	bl	800e0d4 <writePxMutex>
						responseStatus = BOS_OK;
 8009e8e:	4b54      	ldr	r3, [pc, #336]	; (8009fe0 <PxMessagingTask+0x3a8>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	701a      	strb	r2, [r3, #0]
						break;
 8009e94:	2700      	movs	r7, #0
 8009e96:	e6ff      	b.n	8009c98 <PxMessagingTask+0x60>
									moduleAlias[src]);
 8009e98:	230a      	movs	r3, #10
 8009e9a:	9904      	ldr	r1, [sp, #16]
 8009e9c:	434b      	muls	r3, r1
 8009e9e:	4a51      	ldr	r2, [pc, #324]	; (8009fe4 <PxMessagingTask+0x3ac>)
 8009ea0:	189b      	adds	r3, r3, r2
							sprintf((char*) pcUserMessage,
 8009ea2:	000a      	movs	r2, r1
 8009ea4:	4953      	ldr	r1, [pc, #332]	; (8009ff4 <PxMessagingTask+0x3bc>)
 8009ea6:	4851      	ldr	r0, [pc, #324]	; (8009fec <PxMessagingTask+0x3b4>)
 8009ea8:	f00a fd26 	bl	80148f8 <siprintf>
 8009eac:	e7e1      	b.n	8009e72 <PxMessagingTask+0x23a>
						IND_ON();
 8009eae:	2180      	movs	r1, #128	; 0x80
 8009eb0:	2090      	movs	r0, #144	; 0x90
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	0109      	lsls	r1, r1, #4
 8009eb6:	05c0      	lsls	r0, r0, #23
 8009eb8:	f007 ffaa 	bl	8011e10 <HAL_GPIO_WritePin>
						break;
 8009ebc:	2700      	movs	r7, #0
 8009ebe:	e6eb      	b.n	8009c98 <PxMessagingTask+0x60>
						IND_OFF();
 8009ec0:	2180      	movs	r1, #128	; 0x80
 8009ec2:	2090      	movs	r0, #144	; 0x90
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	0109      	lsls	r1, r1, #4
 8009ec8:	05c0      	lsls	r0, r0, #23
 8009eca:	f007 ffa1 	bl	8011e10 <HAL_GPIO_WritePin>
						break;
 8009ece:	2700      	movs	r7, #0
 8009ed0:	e6e2      	b.n	8009c98 <PxMessagingTask+0x60>
						IND_toggle();
 8009ed2:	2180      	movs	r1, #128	; 0x80
 8009ed4:	2090      	movs	r0, #144	; 0x90
 8009ed6:	0109      	lsls	r1, r1, #4
 8009ed8:	05c0      	lsls	r0, r0, #23
 8009eda:	f007 ff9f 	bl	8011e1c <HAL_GPIO_TogglePin>
						break;
 8009ede:	2700      	movs	r7, #0
 8009ee0:	e6da      	b.n	8009c98 <PxMessagingTask+0x60>
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009ee2:	4f45      	ldr	r7, [pc, #276]	; (8009ff8 <PxMessagingTask+0x3c0>)
 8009ee4:	00ab      	lsls	r3, r5, #2
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009ee6:	4a33      	ldr	r2, [pc, #204]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009ee8:	1992      	adds	r2, r2, r6
 8009eea:	1910      	adds	r0, r2, r4
 8009eec:	7881      	ldrb	r1, [r0, #2]
 8009eee:	468c      	mov	ip, r1
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009ef0:	9904      	ldr	r1, [sp, #16]
 8009ef2:	0209      	lsls	r1, r1, #8
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009ef4:	4461      	add	r1, ip
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009ef6:	53d9      	strh	r1, [r3, r7]
						neighbors[port - 1][1] =
 8009ef8:	18fb      	adds	r3, r7, r3
								((uint16_t) cMessage[port - 1][shift] << 8)
 8009efa:	5d11      	ldrb	r1, [r2, r4]
 8009efc:	0209      	lsls	r1, r1, #8
										+ cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009efe:	7842      	ldrb	r2, [r0, #1]
 8009f00:	1852      	adds	r2, r2, r1
						neighbors[port - 1][1] =
 8009f02:	805a      	strh	r2, [r3, #2]
						messageParams[1] = (uint8_t) myPN;
 8009f04:	4b3d      	ldr	r3, [pc, #244]	; (8009ffc <PxMessagingTask+0x3c4>)
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	4a3d      	ldr	r2, [pc, #244]	; (800a000 <PxMessagingTask+0x3c8>)
 8009f0a:	7053      	strb	r3, [r2, #1]
						messageParams[0] = (uint8_t) (myPN >> 8);
 8009f0c:	0a1b      	lsrs	r3, r3, #8
 8009f0e:	7013      	strb	r3, [r2, #0]
						messageParams[2] = port;
 8009f10:	9c08      	ldr	r4, [sp, #32]
 8009f12:	7094      	strb	r4, [r2, #2]
						osDelay(2);
 8009f14:	2002      	movs	r0, #2
 8009f16:	f004 fa0a 	bl	800e32e <osDelay>
						SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	2200      	movs	r2, #0
 8009f22:	2100      	movs	r1, #0
 8009f24:	0020      	movs	r0, r4
 8009f26:	f7ff f99b 	bl	8009260 <SendMessageFromPort>
						break;
 8009f2a:	2700      	movs	r7, #0
 8009f2c:	e6b4      	b.n	8009c98 <PxMessagingTask+0x60>
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009f2e:	4f32      	ldr	r7, [pc, #200]	; (8009ff8 <PxMessagingTask+0x3c0>)
 8009f30:	00ab      	lsls	r3, r5, #2
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009f32:	4a20      	ldr	r2, [pc, #128]	; (8009fb4 <PxMessagingTask+0x37c>)
 8009f34:	1992      	adds	r2, r2, r6
 8009f36:	1910      	adds	r0, r2, r4
 8009f38:	7881      	ldrb	r1, [r0, #2]
 8009f3a:	468c      	mov	ip, r1
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009f3c:	9904      	ldr	r1, [sp, #16]
 8009f3e:	0209      	lsls	r1, r1, #8
								+ cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8009f40:	4461      	add	r1, ip
						neighbors[port - 1][0] = ((uint16_t) src << 8)
 8009f42:	53d9      	strh	r1, [r3, r7]
						neighbors[port - 1][1] =
 8009f44:	18fb      	adds	r3, r7, r3
								((uint16_t) cMessage[port - 1][shift] << 8)
 8009f46:	5d11      	ldrb	r1, [r2, r4]
 8009f48:	0209      	lsls	r1, r1, #8
										+ cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8009f4a:	7842      	ldrb	r2, [r0, #1]
 8009f4c:	1852      	adds	r2, r2, r1
						neighbors[port - 1][1] =
 8009f4e:	805a      	strh	r2, [r3, #2]
						responseStatus = BOS_OK;
 8009f50:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <PxMessagingTask+0x3a8>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	701a      	strb	r2, [r3, #0]
						break;
 8009f56:	2700      	movs	r7, #0
 8009f58:	e69e      	b.n	8009c98 <PxMessagingTask+0x60>
						ExploreNeighbors(port);
 8009f5a:	9808      	ldr	r0, [sp, #32]
 8009f5c:	f7f9 fc78 	bl	8003850 <ExploreNeighbors>
						indMode = IND_TOPOLOGY;
 8009f60:	4b1a      	ldr	r3, [pc, #104]	; (8009fcc <PxMessagingTask+0x394>)
 8009f62:	2202      	movs	r2, #2
 8009f64:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 8009f66:	200a      	movs	r0, #10
 8009f68:	f004 f9e1 	bl	800e32e <osDelay>
 8009f6c:	4f22      	ldr	r7, [pc, #136]	; (8009ff8 <PxMessagingTask+0x3c0>)
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8009f6e:	2401      	movs	r4, #1
						temp = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	9305      	str	r3, [sp, #20]
 8009f74:	e004      	b.n	8009f80 <PxMessagingTask+0x348>
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 8009f76:	3401      	adds	r4, #1
 8009f78:	b2e4      	uxtb	r4, r4
 8009f7a:	3704      	adds	r7, #4
 8009f7c:	2c06      	cmp	r4, #6
 8009f7e:	d011      	beq.n	8009fa4 <PxMessagingTask+0x36c>
							if (neighbors[p - 1][0]) {
 8009f80:	883b      	ldrh	r3, [r7, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0f7      	beq.n	8009f76 <PxMessagingTask+0x33e>
								messageParams[temp] = p;
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <PxMessagingTask+0x3c8>)
 8009f88:	9b05      	ldr	r3, [sp, #20]
 8009f8a:	54d4      	strb	r4, [r2, r3]
								memcpy(messageParams + temp + 1,
 8009f8c:	1c58      	adds	r0, r3, #1
 8009f8e:	4694      	mov	ip, r2
 8009f90:	4460      	add	r0, ip
 8009f92:	2204      	movs	r2, #4
 8009f94:	0039      	movs	r1, r7
 8009f96:	f009 fd48 	bl	8013a2a <memcpy>
								temp += 5;
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	3305      	adds	r3, #5
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	9305      	str	r3, [sp, #20]
 8009fa2:	e7e8      	b.n	8009f76 <PxMessagingTask+0x33e>
						SendMessageToModule(src, CODE_EXPLORE_ADJ_RESPONSE,
 8009fa4:	466b      	mov	r3, sp
 8009fa6:	8a9a      	ldrh	r2, [r3, #20]
 8009fa8:	210d      	movs	r1, #13
 8009faa:	9804      	ldr	r0, [sp, #16]
 8009fac:	f7ff fb80 	bl	80096b0 <SendMessageToModule>
						break;
 8009fb0:	2700      	movs	r7, #0
 8009fb2:	e671      	b.n	8009c98 <PxMessagingTask+0x60>
 8009fb4:	20000530 	.word	0x20000530
 8009fb8:	200006e5 	.word	0x200006e5
 8009fbc:	20000720 	.word	0x20000720
 8009fc0:	200008e0 	.word	0x200008e0
 8009fc4:	2000612c 	.word	0x2000612c
 8009fc8:	20000866 	.word	0x20000866
 8009fcc:	200006e4 	.word	0x200006e4
 8009fd0:	20000d72 	.word	0x20000d72
 8009fd4:	0801a264 	.word	0x0801a264
 8009fd8:	200004dc 	.word	0x200004dc
 8009fdc:	200065e4 	.word	0x200065e4
 8009fe0:	200008f8 	.word	0x200008f8
 8009fe4:	20000758 	.word	0x20000758
 8009fe8:	08018b28 	.word	0x08018b28
 8009fec:	20000ec8 	.word	0x20000ec8
 8009ff0:	2000029f 	.word	0x2000029f
 8009ff4:	08018b3c 	.word	0x08018b3c
 8009ff8:	20000868 	.word	0x20000868
 8009ffc:	20000050 	.word	0x20000050
 800a000:	20000728 	.word	0x20000728
						temp = numOfParams / 5;
 800a004:	2105      	movs	r1, #5
 800a006:	9806      	ldr	r0, [sp, #24]
 800a008:	f7f6 f898 	bl	800013c <__udivsi3>
 800a00c:	b2c2      	uxtb	r2, r0
 800a00e:	9205      	str	r2, [sp, #20]
						for (uint8_t k = 0; k < temp; k++) {
 800a010:	2a00      	cmp	r2, #0
 800a012:	d018      	beq.n	800a046 <PxMessagingTask+0x40e>
 800a014:	4653      	mov	r3, sl
 800a016:	191f      	adds	r7, r3, r4
 800a018:	4bd4      	ldr	r3, [pc, #848]	; (800a36c <PxMessagingTask+0x734>)
 800a01a:	18ff      	adds	r7, r7, r3
 800a01c:	3305      	adds	r3, #5
 800a01e:	4453      	add	r3, sl
 800a020:	191c      	adds	r4, r3, r4
 800a022:	1e53      	subs	r3, r2, #1
 800a024:	b2db      	uxtb	r3, r3
 800a026:	009a      	lsls	r2, r3, #2
 800a028:	18d3      	adds	r3, r2, r3
 800a02a:	18e4      	adds	r4, r4, r3
									&neighbors2[(cMessage[port - 1][shift
 800a02c:	4bd0      	ldr	r3, [pc, #832]	; (800a370 <PxMessagingTask+0x738>)
 800a02e:	4698      	mov	r8, r3
 800a030:	7838      	ldrb	r0, [r7, #0]
											+ k * 5]) - 1][0],
 800a032:	3801      	subs	r0, #1
									&neighbors2[(cMessage[port - 1][shift
 800a034:	0080      	lsls	r0, r0, #2
 800a036:	4440      	add	r0, r8
							memcpy(
 800a038:	1c79      	adds	r1, r7, #1
 800a03a:	2204      	movs	r2, #4
 800a03c:	f009 fcf5 	bl	8013a2a <memcpy>
 800a040:	3705      	adds	r7, #5
						for (uint8_t k = 0; k < temp; k++) {
 800a042:	42bc      	cmp	r4, r7
 800a044:	d1f4      	bne.n	800a030 <PxMessagingTask+0x3f8>
						responseStatus = BOS_OK;
 800a046:	4bcb      	ldr	r3, [pc, #812]	; (800a374 <PxMessagingTask+0x73c>)
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
						break;
 800a04c:	2700      	movs	r7, #0
 800a04e:	e623      	b.n	8009c98 <PxMessagingTask+0x60>
 800a050:	4653      	mov	r3, sl
 800a052:	18e3      	adds	r3, r4, r3
 800a054:	4ac5      	ldr	r2, [pc, #788]	; (800a36c <PxMessagingTask+0x734>)
 800a056:	4698      	mov	r8, r3
 800a058:	4490      	add	r8, r2
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800a05a:	2701      	movs	r7, #1
							if (p != port)
 800a05c:	9b08      	ldr	r3, [sp, #32]
 800a05e:	42bb      	cmp	r3, r7
 800a060:	d006      	beq.n	800a070 <PxMessagingTask+0x438>
								SwapUartPins(GetUart(p),
 800a062:	0038      	movs	r0, r7
 800a064:	f004 f818 	bl	800e098 <GetUart>
 800a068:	4643      	mov	r3, r8
 800a06a:	7819      	ldrb	r1, [r3, #0]
 800a06c:	f004 f8aa 	bl	800e1c4 <SwapUartPins>
						for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800a070:	3701      	adds	r7, #1
 800a072:	b2ff      	uxtb	r7, r7
 800a074:	2301      	movs	r3, #1
 800a076:	469c      	mov	ip, r3
 800a078:	44e0      	add	r8, ip
 800a07a:	2f06      	cmp	r7, #6
 800a07c:	d1ee      	bne.n	800a05c <PxMessagingTask+0x424>
						SwapUartPins(GetUart(port),
 800a07e:	9808      	ldr	r0, [sp, #32]
 800a080:	f004 f80a 	bl	800e098 <GetUart>
 800a084:	4bb9      	ldr	r3, [pc, #740]	; (800a36c <PxMessagingTask+0x734>)
 800a086:	199b      	adds	r3, r3, r6
 800a088:	191c      	adds	r4, r3, r4
 800a08a:	7aa1      	ldrb	r1, [r4, #10]
 800a08c:	f004 f89a 	bl	800e1c4 <SwapUartPins>
						break;
 800a090:	2700      	movs	r7, #0
 800a092:	e601      	b.n	8009c98 <PxMessagingTask+0x60>
						if (cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a094:	4bb5      	ldr	r3, [pc, #724]	; (800a36c <PxMessagingTask+0x734>)
 800a096:	199b      	adds	r3, r3, r6
 800a098:	5d1b      	ldrb	r3, [r3, r4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d109      	bne.n	800a0b2 <PxMessagingTask+0x47a>
							myID = cMessage[port - 1][1 + shift];
 800a09e:	2238      	movs	r2, #56	; 0x38
 800a0a0:	436a      	muls	r2, r5
 800a0a2:	4bb2      	ldr	r3, [pc, #712]	; (800a36c <PxMessagingTask+0x734>)
 800a0a4:	189b      	adds	r3, r3, r2
 800a0a6:	191c      	adds	r4, r3, r4
 800a0a8:	7862      	ldrb	r2, [r4, #1]
 800a0aa:	4bb3      	ldr	r3, [pc, #716]	; (800a378 <PxMessagingTask+0x740>)
 800a0ac:	701a      	strb	r2, [r3, #0]
 800a0ae:	2700      	movs	r7, #0
 800a0b0:	e5f2      	b.n	8009c98 <PxMessagingTask+0x60>
 800a0b2:	2700      	movs	r7, #0
						else if (cMessage[port - 1][shift] == 1) { /* Change my neighbor's ID */
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d000      	beq.n	800a0ba <PxMessagingTask+0x482>
 800a0b8:	e5ee      	b.n	8009c98 <PxMessagingTask+0x60>
							messageParams[0] = 0; /* change own ID */
 800a0ba:	49b0      	ldr	r1, [pc, #704]	; (800a37c <PxMessagingTask+0x744>)
 800a0bc:	700f      	strb	r7, [r1, #0]
							messageParams[1] = cMessage[port - 1][1 + shift]; /* The new ID */
 800a0be:	2238      	movs	r2, #56	; 0x38
 800a0c0:	436a      	muls	r2, r5
 800a0c2:	4baa      	ldr	r3, [pc, #680]	; (800a36c <PxMessagingTask+0x734>)
 800a0c4:	189b      	adds	r3, r3, r2
 800a0c6:	191b      	adds	r3, r3, r4
 800a0c8:	785a      	ldrb	r2, [r3, #1]
 800a0ca:	704a      	strb	r2, [r1, #1]
							SendMessageFromPort(cMessage[port - 1][2 + shift],
 800a0cc:	7898      	ldrb	r0, [r3, #2]
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	330d      	adds	r3, #13
 800a0d4:	003a      	movs	r2, r7
 800a0d6:	0039      	movs	r1, r7
 800a0d8:	f7ff f8c2 	bl	8009260 <SendMessageFromPort>
 800a0dc:	e5dc      	b.n	8009c98 <PxMessagingTask+0x60>
						if (longMessage) {
 800a0de:	4ba8      	ldr	r3, [pc, #672]	; (800a380 <PxMessagingTask+0x748>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d011      	beq.n	800a10a <PxMessagingTask+0x4d2>
							memcpy(
 800a0e6:	4ba7      	ldr	r3, [pc, #668]	; (800a384 <PxMessagingTask+0x74c>)
 800a0e8:	4698      	mov	r8, r3
 800a0ea:	881f      	ldrh	r7, [r3, #0]
											+ longMessageLastPtr,
 800a0ec:	48a6      	ldr	r0, [pc, #664]	; (800a388 <PxMessagingTask+0x750>)
 800a0ee:	1838      	adds	r0, r7, r0
									&cMessage[port - 1][shift],
 800a0f0:	4454      	add	r4, sl
 800a0f2:	499e      	ldr	r1, [pc, #632]	; (800a36c <PxMessagingTask+0x734>)
 800a0f4:	1861      	adds	r1, r4, r1
							memcpy(
 800a0f6:	9c06      	ldr	r4, [sp, #24]
 800a0f8:	0022      	movs	r2, r4
 800a0fa:	f009 fc96 	bl	8013a2a <memcpy>
							longMessageLastPtr += numOfParams;
 800a0fe:	46a4      	mov	ip, r4
 800a100:	4467      	add	r7, ip
 800a102:	4643      	mov	r3, r8
 800a104:	801f      	strh	r7, [r3, #0]
 800a106:	2700      	movs	r7, #0
 800a108:	e5c6      	b.n	8009c98 <PxMessagingTask+0x60>
							memcpy(
 800a10a:	4b9e      	ldr	r3, [pc, #632]	; (800a384 <PxMessagingTask+0x74c>)
 800a10c:	4699      	mov	r9, r3
 800a10e:	881f      	ldrh	r7, [r3, #0]
											+ longMessageLastPtr,
 800a110:	4b9d      	ldr	r3, [pc, #628]	; (800a388 <PxMessagingTask+0x750>)
 800a112:	4698      	mov	r8, r3
 800a114:	18f8      	adds	r0, r7, r3
									&cMessage[port - 1][shift],
 800a116:	4454      	add	r4, sl
 800a118:	4994      	ldr	r1, [pc, #592]	; (800a36c <PxMessagingTask+0x734>)
 800a11a:	1861      	adds	r1, r4, r1
							memcpy(
 800a11c:	9c06      	ldr	r4, [sp, #24]
 800a11e:	0022      	movs	r2, r4
 800a120:	f009 fc83 	bl	8013a2a <memcpy>
							longMessageLastPtr += numOfParams;
 800a124:	193c      	adds	r4, r7, r4
 800a126:	b2a4      	uxth	r4, r4
							N = (longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a128:	2116      	movs	r1, #22
 800a12a:	0020      	movs	r0, r4
 800a12c:	f7f6 f806 	bl	800013c <__udivsi3>
 800a130:	4b96      	ldr	r3, [pc, #600]	; (800a38c <PxMessagingTask+0x754>)
 800a132:	7018      	strb	r0, [r3, #0]
							memcpy(&array, &longMessageScratchpad,
 800a134:	0022      	movs	r2, r4
 800a136:	4641      	mov	r1, r8
 800a138:	4895      	ldr	r0, [pc, #596]	; (800a390 <PxMessagingTask+0x758>)
 800a13a:	f009 fc76 	bl	8013a2a <memcpy>
							longMessageLastPtr = 0;
 800a13e:	2700      	movs	r7, #0
 800a140:	464b      	mov	r3, r9
 800a142:	801f      	strh	r7, [r3, #0]
 800a144:	e5a8      	b.n	8009c98 <PxMessagingTask+0x60>
						for (p = 1; p <= NumOfPorts; p++) {
 800a146:	2401      	movs	r4, #1
						temp = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	9305      	str	r3, [sp, #20]
							if (GetUart(p)->AdvancedInit.Swap
 800a14c:	2780      	movs	r7, #128	; 0x80
 800a14e:	023f      	lsls	r7, r7, #8
 800a150:	e003      	b.n	800a15a <PxMessagingTask+0x522>
						for (p = 1; p <= NumOfPorts; p++) {
 800a152:	3401      	adds	r4, #1
 800a154:	b2e4      	uxtb	r4, r4
 800a156:	2c06      	cmp	r4, #6
 800a158:	d00c      	beq.n	800a174 <PxMessagingTask+0x53c>
							if (GetUart(p)->AdvancedInit.Swap
 800a15a:	0020      	movs	r0, r4
 800a15c:	f003 ff9c 	bl	800e098 <GetUart>
 800a160:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a162:	42bb      	cmp	r3, r7
 800a164:	d1f5      	bne.n	800a152 <PxMessagingTask+0x51a>
								messageParams[temp++] = p;
 800a166:	9a05      	ldr	r2, [sp, #20]
 800a168:	1c53      	adds	r3, r2, #1
 800a16a:	4984      	ldr	r1, [pc, #528]	; (800a37c <PxMessagingTask+0x744>)
 800a16c:	548c      	strb	r4, [r1, r2]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	9305      	str	r3, [sp, #20]
 800a172:	e7ee      	b.n	800a152 <PxMessagingTask+0x51a>
						SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE,
 800a174:	466b      	mov	r3, sp
 800a176:	8a9a      	ldrh	r2, [r3, #20]
 800a178:	2114      	movs	r1, #20
 800a17a:	9804      	ldr	r0, [sp, #16]
 800a17c:	f7ff fa98 	bl	80096b0 <SendMessageToModule>
						break;
 800a180:	2700      	movs	r7, #0
 800a182:	e589      	b.n	8009c98 <PxMessagingTask+0x60>
								((uint32_t) cMessage[port - 1][shift] << 24)
 800a184:	4b79      	ldr	r3, [pc, #484]	; (800a36c <PxMessagingTask+0x734>)
 800a186:	199b      	adds	r3, r3, r6
 800a188:	5d1a      	ldrb	r2, [r3, r4]
 800a18a:	0612      	lsls	r2, r2, #24
										+ cMessage[port - 1][3 + shift];
 800a18c:	191b      	adds	r3, r3, r4
 800a18e:	78d9      	ldrb	r1, [r3, #3]
						temp32 =
 800a190:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][1
 800a192:	7859      	ldrb	r1, [r3, #1]
												+ shift] << 16)
 800a194:	0409      	lsls	r1, r1, #16
						temp32 =
 800a196:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][2
 800a198:	7899      	ldrb	r1, [r3, #2]
												+ shift] << 8)
 800a19a:	0209      	lsls	r1, r1, #8
						temp32 =
 800a19c:	1852      	adds	r2, r2, r1
 800a19e:	920b      	str	r2, [sp, #44]	; 0x2c
						if (cMessage[port - 1][4 + shift] == 0xFF)	// All ports
 800a1a0:	791b      	ldrb	r3, [r3, #4]
 800a1a2:	2bff      	cmp	r3, #255	; 0xff
 800a1a4:	d01b      	beq.n	800a1de <PxMessagingTask+0x5a6>
							for (p = 0; p < numOfParams; p++) {
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d015      	beq.n	800a1d8 <PxMessagingTask+0x5a0>
 800a1ac:	4653      	mov	r3, sl
 800a1ae:	1d1f      	adds	r7, r3, #4
 800a1b0:	193f      	adds	r7, r7, r4
 800a1b2:	4b6e      	ldr	r3, [pc, #440]	; (800a36c <PxMessagingTask+0x734>)
 800a1b4:	18ff      	adds	r7, r7, r3
 800a1b6:	3305      	adds	r3, #5
 800a1b8:	4453      	add	r3, sl
 800a1ba:	191c      	adds	r4, r3, r4
 800a1bc:	9b06      	ldr	r3, [sp, #24]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	18e4      	adds	r4, r4, r3
								temp = cMessage[port - 1][4 + shift + p];
 800a1c4:	783b      	ldrb	r3, [r7, #0]
 800a1c6:	9305      	str	r3, [sp, #20]
								if (temp > 0 && temp <= NumOfPorts) {
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d914      	bls.n	800a1f8 <PxMessagingTask+0x5c0>
 800a1ce:	3701      	adds	r7, #1
							for (p = 0; p < numOfParams; p++) {
 800a1d0:	42a7      	cmp	r7, r4
 800a1d2:	d1f7      	bne.n	800a1c4 <PxMessagingTask+0x58c>
 800a1d4:	2700      	movs	r7, #0
 800a1d6:	e55f      	b.n	8009c98 <PxMessagingTask+0x60>
						temp = temp32 = 0;
 800a1d8:	9305      	str	r3, [sp, #20]
							for (p = 0; p < numOfParams; p++) {
 800a1da:	2700      	movs	r7, #0
 800a1dc:	e55c      	b.n	8009c98 <PxMessagingTask+0x60>
							for (p = 1; p <= NumOfPorts; p++) {
 800a1de:	2401      	movs	r4, #1
								UpdateBaudrate(p, temp32);
 800a1e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1e2:	0020      	movs	r0, r4
 800a1e4:	f003 ffe4 	bl	800e1b0 <UpdateBaudrate>
							for (p = 1; p <= NumOfPorts; p++) {
 800a1e8:	3401      	adds	r4, #1
 800a1ea:	b2e4      	uxtb	r4, r4
 800a1ec:	2c06      	cmp	r4, #6
 800a1ee:	d1f7      	bne.n	800a1e0 <PxMessagingTask+0x5a8>
						temp = temp32 = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9305      	str	r3, [sp, #20]
 800a1f4:	001f      	movs	r7, r3
 800a1f6:	e54f      	b.n	8009c98 <PxMessagingTask+0x60>
									UpdateBaudrate(temp, temp32);
 800a1f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1fa:	9805      	ldr	r0, [sp, #20]
 800a1fc:	f003 ffd8 	bl	800e1b0 <UpdateBaudrate>
 800a200:	e7e5      	b.n	800a1ce <PxMessagingTask+0x596>
						SaveToRO();
 800a202:	f001 f979 	bl	800b4f8 <SaveToRO>
						SaveEEportsDir();
 800a206:	f7f8 feb1 	bl	8002f6c <SaveEEportsDir>
						indMode = IND_PING;
 800a20a:	4b62      	ldr	r3, [pc, #392]	; (800a394 <PxMessagingTask+0x75c>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	701a      	strb	r2, [r3, #0]
						break;
 800a210:	2700      	movs	r7, #0
 800a212:	e541      	b.n	8009c98 <PxMessagingTask+0x60>
						ClearEEportsDir();
 800a214:	f7f8 fed4 	bl	8002fc0 <ClearEEportsDir>
						ClearROtopology();
 800a218:	f001 fa76 	bl	800b708 <ClearROtopology>
						osDelay(100);
 800a21c:	2064      	movs	r0, #100	; 0x64
 800a21e:	f004 f886 	bl	800e32e <osDelay>
						indMode = IND_TOPOLOGY;
 800a222:	4b5c      	ldr	r3, [pc, #368]	; (800a394 <PxMessagingTask+0x75c>)
 800a224:	2202      	movs	r2, #2
 800a226:	701a      	strb	r2, [r3, #0]
						break;
 800a228:	2700      	movs	r7, #0
 800a22a:	e535      	b.n	8009c98 <PxMessagingTask+0x60>
						pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a22c:	f004 f994 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 800a230:	900b      	str	r0, [sp, #44]	; 0x2c
						if (dst == BOS_BROADCAST)
 800a232:	464b      	mov	r3, r9
 800a234:	2bff      	cmp	r3, #255	; 0xff
 800a236:	d026      	beq.n	800a286 <PxMessagingTask+0x64e>
						else if (dst == BOS_MULTICAST)
 800a238:	2bfe      	cmp	r3, #254	; 0xfe
 800a23a:	d02d      	beq.n	800a298 <PxMessagingTask+0x660>
							memcpy(cCLIString, &cMessage[port - 1][shift],
 800a23c:	4454      	add	r4, sl
 800a23e:	494b      	ldr	r1, [pc, #300]	; (800a36c <PxMessagingTask+0x734>)
 800a240:	1861      	adds	r1, r4, r1
 800a242:	9a06      	ldr	r2, [sp, #24]
 800a244:	4854      	ldr	r0, [pc, #336]	; (800a398 <PxMessagingTask+0x760>)
 800a246:	f009 fbf0 	bl	8013a2a <memcpy>
							temp = PcPort;
 800a24a:	4c54      	ldr	r4, [pc, #336]	; (800a39c <PxMessagingTask+0x764>)
							xReturned = FreeRTOS_CLIProcessCommand(cCLIString,
 800a24c:	4b52      	ldr	r3, [pc, #328]	; (800a398 <PxMessagingTask+0x760>)
 800a24e:	4699      	mov	r9, r3
							if (BOS.response == BOS_RESPONSE_ALL) {
 800a250:	4b53      	ldr	r3, [pc, #332]	; (800a3a0 <PxMessagingTask+0x768>)
 800a252:	4698      	mov	r8, r3
							temp = PcPort;
 800a254:	7823      	ldrb	r3, [r4, #0]
 800a256:	9305      	str	r3, [sp, #20]
							PcPort = port;
 800a258:	9a08      	ldr	r2, [sp, #32]
 800a25a:	7022      	strb	r2, [r4, #0]
							xReturned = FreeRTOS_CLIProcessCommand(cCLIString,
 800a25c:	2299      	movs	r2, #153	; 0x99
 800a25e:	0092      	lsls	r2, r2, #2
 800a260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a262:	4648      	mov	r0, r9
 800a264:	f004 f8fa 	bl	800e45c <FreeRTOS_CLIProcessCommand>
 800a268:	0007      	movs	r7, r0
							PcPort = temp;
 800a26a:	9b05      	ldr	r3, [sp, #20]
 800a26c:	7023      	strb	r3, [r4, #0]
							if (BOS.response == BOS_RESPONSE_ALL) {
 800a26e:	4643      	mov	r3, r8
 800a270:	799b      	ldrb	r3, [r3, #6]
 800a272:	2b60      	cmp	r3, #96	; 0x60
 800a274:	d01b      	beq.n	800a2ae <PxMessagingTask+0x676>
						} while (xReturned != pdFALSE);
 800a276:	2f00      	cmp	r7, #0
 800a278:	d1ec      	bne.n	800a254 <PxMessagingTask+0x61c>
						memset(cCLIString, 0x00, cmdMAX_INPUT_SIZE);
 800a27a:	2232      	movs	r2, #50	; 0x32
 800a27c:	2100      	movs	r1, #0
 800a27e:	4846      	ldr	r0, [pc, #280]	; (800a398 <PxMessagingTask+0x760>)
 800a280:	f009 fbdc 	bl	8013a3c <memset>
						break;
 800a284:	e508      	b.n	8009c98 <PxMessagingTask+0x60>
									(size_t) (numOfParams - 1));// remove bcastID
 800a286:	9a06      	ldr	r2, [sp, #24]
 800a288:	3a01      	subs	r2, #1
							memcpy(cCLIString, &cMessage[port - 1][shift],
 800a28a:	4454      	add	r4, sl
 800a28c:	4937      	ldr	r1, [pc, #220]	; (800a36c <PxMessagingTask+0x734>)
 800a28e:	1861      	adds	r1, r4, r1
 800a290:	4841      	ldr	r0, [pc, #260]	; (800a398 <PxMessagingTask+0x760>)
 800a292:	f009 fbca 	bl	8013a2a <memcpy>
 800a296:	e7d8      	b.n	800a24a <PxMessagingTask+0x612>
									(size_t) (numOfParams - temp - 2));	// remove bcastID + groupm members + group count
 800a298:	9b06      	ldr	r3, [sp, #24]
 800a29a:	9a05      	ldr	r2, [sp, #20]
 800a29c:	1a9a      	subs	r2, r3, r2
 800a29e:	3a02      	subs	r2, #2
							memcpy(cCLIString, &cMessage[port - 1][shift],
 800a2a0:	4454      	add	r4, sl
 800a2a2:	4932      	ldr	r1, [pc, #200]	; (800a36c <PxMessagingTask+0x734>)
 800a2a4:	1861      	adds	r1, r4, r1
 800a2a6:	483c      	ldr	r0, [pc, #240]	; (800a398 <PxMessagingTask+0x760>)
 800a2a8:	f009 fbbf 	bl	8013a2a <memcpy>
 800a2ac:	e7cd      	b.n	800a24a <PxMessagingTask+0x612>
								memcpy(messageParams, pcOutputString,
 800a2ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2b0:	f7f5 ff32 	bl	8000118 <strlen>
 800a2b4:	0002      	movs	r2, r0
 800a2b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2b8:	4830      	ldr	r0, [pc, #192]	; (800a37c <PxMessagingTask+0x744>)
 800a2ba:	f009 fbb6 	bl	8013a2a <memcpy>
										strlen((char*) pcOutputString));
 800a2be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a2c0:	f7f5 ff2a 	bl	8000118 <strlen>
								SendMessageToModule(src, CODE_CLI_RESPONSE,
 800a2c4:	b282      	uxth	r2, r0
 800a2c6:	2118      	movs	r1, #24
 800a2c8:	9804      	ldr	r0, [sp, #16]
 800a2ca:	f7ff f9f1 	bl	80096b0 <SendMessageToModule>
								osDelay(10);
 800a2ce:	200a      	movs	r0, #10
 800a2d0:	f004 f82d 	bl	800e32e <osDelay>
 800a2d4:	e7cf      	b.n	800a276 <PxMessagingTask+0x63e>
						pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a2d6:	f004 f93f 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 800a2da:	0007      	movs	r7, r0
						memset(pcOutputString, 0x00,
 800a2dc:	f7f5 ff1c 	bl	8000118 <strlen>
 800a2e0:	0002      	movs	r2, r0
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	0038      	movs	r0, r7
 800a2e6:	f009 fba9 	bl	8013a3c <memset>
						if (longMessage) {
 800a2ea:	4b25      	ldr	r3, [pc, #148]	; (800a380 <PxMessagingTask+0x748>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d012      	beq.n	800a318 <PxMessagingTask+0x6e0>
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a2f2:	4b24      	ldr	r3, [pc, #144]	; (800a384 <PxMessagingTask+0x74c>)
 800a2f4:	4698      	mov	r8, r3
 800a2f6:	8818      	ldrh	r0, [r3, #0]
 800a2f8:	1838      	adds	r0, r7, r0
									&cMessage[port - 1][shift],
 800a2fa:	4454      	add	r4, sl
 800a2fc:	491b      	ldr	r1, [pc, #108]	; (800a36c <PxMessagingTask+0x734>)
 800a2fe:	1861      	adds	r1, r4, r1
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a300:	9c06      	ldr	r4, [sp, #24]
 800a302:	0022      	movs	r2, r4
 800a304:	f009 fb91 	bl	8013a2a <memcpy>
							longMessageLastPtr += numOfParams;
 800a308:	4643      	mov	r3, r8
 800a30a:	881a      	ldrh	r2, [r3, #0]
 800a30c:	46a4      	mov	ip, r4
 800a30e:	4462      	add	r2, ip
 800a310:	4643      	mov	r3, r8
 800a312:	801a      	strh	r2, [r3, #0]
 800a314:	2700      	movs	r7, #0
 800a316:	e4bf      	b.n	8009c98 <PxMessagingTask+0x60>
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a318:	4b1a      	ldr	r3, [pc, #104]	; (800a384 <PxMessagingTask+0x74c>)
 800a31a:	4698      	mov	r8, r3
 800a31c:	8818      	ldrh	r0, [r3, #0]
 800a31e:	1838      	adds	r0, r7, r0
									&cMessage[port - 1][shift],
 800a320:	4454      	add	r4, sl
 800a322:	4912      	ldr	r1, [pc, #72]	; (800a36c <PxMessagingTask+0x734>)
 800a324:	1861      	adds	r1, r4, r1
							memcpy(&pcOutputString[0] + longMessageLastPtr,
 800a326:	9a06      	ldr	r2, [sp, #24]
 800a328:	f009 fb7f 	bl	8013a2a <memcpy>
							longMessageLastPtr = 0;
 800a32c:	2700      	movs	r7, #0
 800a32e:	4643      	mov	r3, r8
 800a330:	801f      	strh	r7, [r3, #0]
							responseStatus = BOS_OK;
 800a332:	4b10      	ldr	r3, [pc, #64]	; (800a374 <PxMessagingTask+0x73c>)
 800a334:	701f      	strb	r7, [r3, #0]
							xTaskNotify((xCommandConsoleTaskHandle), 0,
 800a336:	003b      	movs	r3, r7
 800a338:	003a      	movs	r2, r7
 800a33a:	0039      	movs	r1, r7
 800a33c:	4819      	ldr	r0, [pc, #100]	; (800a3a4 <PxMessagingTask+0x76c>)
 800a33e:	6800      	ldr	r0, [r0, #0]
 800a340:	f005 fc14 	bl	800fb6c <xTaskGenericNotify>
 800a344:	e4a8      	b.n	8009c98 <PxMessagingTask+0x60>
						*((unsigned long*) 0x20007FF0) = 0xDEADBEEF;
 800a346:	4b18      	ldr	r3, [pc, #96]	; (800a3a8 <PxMessagingTask+0x770>)
 800a348:	4a18      	ldr	r2, [pc, #96]	; (800a3ac <PxMessagingTask+0x774>)
 800a34a:	601a      	str	r2, [r3, #0]
						indMode = IND_PING;
 800a34c:	4b11      	ldr	r3, [pc, #68]	; (800a394 <PxMessagingTask+0x75c>)
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
						osDelay(10);
 800a352:	200a      	movs	r0, #10
 800a354:	f003 ffeb 	bl	800e32e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	4b14      	ldr	r3, [pc, #80]	; (800a3b0 <PxMessagingTask+0x778>)
 800a35e:	4a15      	ldr	r2, [pc, #84]	; (800a3b4 <PxMessagingTask+0x77c>)
 800a360:	60da      	str	r2, [r3, #12]
 800a362:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a366:	46c0      	nop			; (mov r8, r8)
 800a368:	e7fd      	b.n	800a366 <PxMessagingTask+0x72e>
 800a36a:	46c0      	nop			; (mov r8, r8)
 800a36c:	20000530 	.word	0x20000530
 800a370:	2000087c 	.word	0x2000087c
 800a374:	200008f8 	.word	0x200008f8
 800a378:	20000866 	.word	0x20000866
 800a37c:	20000728 	.word	0x20000728
 800a380:	200006e5 	.word	0x200006e5
 800a384:	200006e6 	.word	0x200006e6
 800a388:	20000da8 	.word	0x20000da8
 800a38c:	2000001c 	.word	0x2000001c
 800a390:	200002a0 	.word	0x200002a0
 800a394:	200006e4 	.word	0x200006e4
 800a398:	20000d74 	.word	0x20000d74
 800a39c:	2000029f 	.word	0x2000029f
 800a3a0:	2000612c 	.word	0x2000612c
 800a3a4:	20000c9c 	.word	0x20000c9c
 800a3a8:	20007ff0 	.word	0x20007ff0
 800a3ac:	deadbeef 	.word	0xdeadbeef
 800a3b0:	e000ed00 	.word	0xe000ed00
 800a3b4:	05fa0004 	.word	0x05fa0004
						SendMessageFromPort(cMessage[port - 1][shift], 0, 0,
 800a3b8:	4fef      	ldr	r7, [pc, #956]	; (800a778 <PxMessagingTask+0xb40>)
 800a3ba:	19bf      	adds	r7, r7, r6
 800a3bc:	5d38      	ldrb	r0, [r7, r4]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	3319      	adds	r3, #25
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	f7fe ff4a 	bl	8009260 <SendMessageFromPort>
						osDelay(100);
 800a3cc:	2064      	movs	r0, #100	; 0x64
 800a3ce:	f003 ffae 	bl	800e32e <osDelay>
						remoteBootloaderUpdate(src, myID, port,
 800a3d2:	5d3b      	ldrb	r3, [r7, r4]
 800a3d4:	4ae9      	ldr	r2, [pc, #932]	; (800a77c <PxMessagingTask+0xb44>)
 800a3d6:	7811      	ldrb	r1, [r2, #0]
 800a3d8:	9a08      	ldr	r2, [sp, #32]
 800a3da:	9804      	ldr	r0, [sp, #16]
 800a3dc:	f7f9 fbce 	bl	8003b7c <remoteBootloaderUpdate>
						break;
 800a3e0:	2700      	movs	r7, #0
 800a3e2:	e459      	b.n	8009c98 <PxMessagingTask+0x60>
						temp = cMessage[port - 1][11 + shift];
 800a3e4:	46a0      	mov	r8, r4
 800a3e6:	0027      	movs	r7, r4
 800a3e8:	370b      	adds	r7, #11
 800a3ea:	4be3      	ldr	r3, [pc, #908]	; (800a778 <PxMessagingTask+0xb40>)
 800a3ec:	199b      	adds	r3, r3, r6
 800a3ee:	5ddb      	ldrb	r3, [r3, r7]
 800a3f0:	4699      	mov	r9, r3
						if (numOfParams == 15)
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b0f      	cmp	r3, #15
 800a3f6:	d100      	bne.n	800a3fa <PxMessagingTask+0x7c2>
 800a3f8:	e087      	b.n	800a50a <PxMessagingTask+0x8d2>
						if (numOfParams == 17)
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2b11      	cmp	r3, #17
 800a3fe:	d100      	bne.n	800a402 <PxMessagingTask+0x7ca>
 800a400:	e08b      	b.n	800a51a <PxMessagingTask+0x8e2>
												+ shift] << 16)
 800a402:	4643      	mov	r3, r8
 800a404:	1c58      	adds	r0, r3, #1
 800a406:	900c      	str	r0, [sp, #48]	; 0x30
												+ shift] << 8)
 800a408:	1c9c      	adds	r4, r3, #2
 800a40a:	940d      	str	r4, [sp, #52]	; 0x34
										+ cMessage[port - 1][3 + shift];
 800a40c:	1cd9      	adds	r1, r3, #3
 800a40e:	910e      	str	r1, [sp, #56]	; 0x38
								((uint32_t) cMessage[port - 1][shift] << 24)
 800a410:	4bd9      	ldr	r3, [pc, #868]	; (800a778 <PxMessagingTask+0xb40>)
 800a412:	199b      	adds	r3, r3, r6
 800a414:	4642      	mov	r2, r8
 800a416:	5c9a      	ldrb	r2, [r3, r2]
 800a418:	0612      	lsls	r2, r2, #24
										+ cMessage[port - 1][3 + shift];
 800a41a:	5c59      	ldrb	r1, [r3, r1]
						count =
 800a41c:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][1
 800a41e:	5c19      	ldrb	r1, [r3, r0]
												+ shift] << 16)
 800a420:	0409      	lsls	r1, r1, #16
						count =
 800a422:	1852      	adds	r2, r2, r1
										+ ((uint32_t) cMessage[port - 1][2
 800a424:	5d19      	ldrb	r1, [r3, r4]
												+ shift] << 8)
 800a426:	0209      	lsls	r1, r1, #8
						count =
 800a428:	1852      	adds	r2, r2, r1
 800a42a:	920b      	str	r2, [sp, #44]	; 0x2c
								((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800a42c:	4642      	mov	r2, r8
 800a42e:	3204      	adds	r2, #4
 800a430:	920f      	str	r2, [sp, #60]	; 0x3c
												+ shift] << 16)
 800a432:	4641      	mov	r1, r8
 800a434:	3105      	adds	r1, #5
 800a436:	9110      	str	r1, [sp, #64]	; 0x40
												+ shift] << 8)
 800a438:	4640      	mov	r0, r8
 800a43a:	3006      	adds	r0, #6
 800a43c:	9011      	str	r0, [sp, #68]	; 0x44
										+ cMessage[port - 1][7 + shift];
 800a43e:	4644      	mov	r4, r8
 800a440:	3407      	adds	r4, #7
 800a442:	9405      	str	r4, [sp, #20]
								((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800a444:	5c9c      	ldrb	r4, [r3, r2]
 800a446:	0624      	lsls	r4, r4, #24
										+ ((uint32_t) cMessage[port - 1][5
 800a448:	5c5a      	ldrb	r2, [r3, r1]
												+ shift] << 16)
 800a44a:	0412      	lsls	r2, r2, #16
										+ ((uint32_t) cMessage[port - 1][5
 800a44c:	18a4      	adds	r4, r4, r2
										+ cMessage[port - 1][7 + shift];
 800a44e:	9a05      	ldr	r2, [sp, #20]
 800a450:	5c9a      	ldrb	r2, [r3, r2]
						timeout =
 800a452:	18a4      	adds	r4, r4, r2
										+ ((uint32_t) cMessage[port - 1][6
 800a454:	5c1b      	ldrb	r3, [r3, r0]
												+ shift] << 8)
 800a456:	021b      	lsls	r3, r3, #8
						timeout =
 800a458:	18e4      	adds	r4, r4, r3
						if (temp == false) {
 800a45a:	464b      	mov	r3, r9
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d164      	bne.n	800a52a <PxMessagingTask+0x8f2>
							if (cMessage[port - 1][9 + shift]
 800a460:	4bc5      	ldr	r3, [pc, #788]	; (800a778 <PxMessagingTask+0xb40>)
 800a462:	199b      	adds	r3, r3, r6
 800a464:	4443      	add	r3, r8
 800a466:	7a5b      	ldrb	r3, [r3, #9]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d012      	beq.n	800a492 <PxMessagingTask+0x85a>
									&& cMessage[port - 1][10 + shift])
 800a46c:	2138      	movs	r1, #56	; 0x38
 800a46e:	4369      	muls	r1, r5
 800a470:	4ac1      	ldr	r2, [pc, #772]	; (800a778 <PxMessagingTask+0xb40>)
 800a472:	1852      	adds	r2, r2, r1
 800a474:	4442      	add	r2, r8
 800a476:	7a91      	ldrb	r1, [r2, #10]
 800a478:	2900      	cmp	r1, #0
 800a47a:	d00a      	beq.n	800a492 <PxMessagingTask+0x85a>
								SetupDMAStreams(cMessage[port - 1][8 + shift],
 800a47c:	2038      	movs	r0, #56	; 0x38
 800a47e:	4368      	muls	r0, r5
 800a480:	4abd      	ldr	r2, [pc, #756]	; (800a778 <PxMessagingTask+0xb40>)
 800a482:	1812      	adds	r2, r2, r0
 800a484:	4442      	add	r2, r8
 800a486:	7a10      	ldrb	r0, [r2, #8]
 800a488:	9100      	str	r1, [sp, #0]
 800a48a:	0022      	movs	r2, r4
 800a48c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a48e:	f7fe fdcf 	bl	8009030 <SetupDMAStreams>
							if (cMessage[port - 1][11 + shift]
 800a492:	4bb9      	ldr	r3, [pc, #740]	; (800a778 <PxMessagingTask+0xb40>)
 800a494:	199b      	adds	r3, r3, r6
 800a496:	5ddb      	ldrb	r3, [r3, r7]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d012      	beq.n	800a4c2 <PxMessagingTask+0x88a>
									&& cMessage[port - 1][12 + shift])
 800a49c:	2138      	movs	r1, #56	; 0x38
 800a49e:	4369      	muls	r1, r5
 800a4a0:	4ab5      	ldr	r2, [pc, #724]	; (800a778 <PxMessagingTask+0xb40>)
 800a4a2:	1852      	adds	r2, r2, r1
 800a4a4:	4442      	add	r2, r8
 800a4a6:	7b11      	ldrb	r1, [r2, #12]
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	d00a      	beq.n	800a4c2 <PxMessagingTask+0x88a>
								SetupDMAStreams(cMessage[port - 1][8 + shift],
 800a4ac:	2038      	movs	r0, #56	; 0x38
 800a4ae:	4368      	muls	r0, r5
 800a4b0:	4ab1      	ldr	r2, [pc, #708]	; (800a778 <PxMessagingTask+0xb40>)
 800a4b2:	1812      	adds	r2, r2, r0
 800a4b4:	4442      	add	r2, r8
 800a4b6:	7a10      	ldrb	r0, [r2, #8]
 800a4b8:	9100      	str	r1, [sp, #0]
 800a4ba:	0022      	movs	r2, r4
 800a4bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4be:	f7fe fdb7 	bl	8009030 <SetupDMAStreams>
							if (cMessage[port - 1][13 + shift]
 800a4c2:	4bad      	ldr	r3, [pc, #692]	; (800a778 <PxMessagingTask+0xb40>)
 800a4c4:	199b      	adds	r3, r3, r6
 800a4c6:	4443      	add	r3, r8
 800a4c8:	7b5b      	ldrb	r3, [r3, #13]
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	2700      	movs	r7, #0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <PxMessagingTask+0x89e>
 800a4d2:	f7ff fbe1 	bl	8009c98 <PxMessagingTask+0x60>
									&& cMessage[port - 1][14 + shift])
 800a4d6:	2238      	movs	r2, #56	; 0x38
 800a4d8:	436a      	muls	r2, r5
 800a4da:	4ba7      	ldr	r3, [pc, #668]	; (800a778 <PxMessagingTask+0xb40>)
 800a4dc:	189b      	adds	r3, r3, r2
 800a4de:	4443      	add	r3, r8
 800a4e0:	7b9a      	ldrb	r2, [r3, #14]
 800a4e2:	42ba      	cmp	r2, r7
 800a4e4:	d101      	bne.n	800a4ea <PxMessagingTask+0x8b2>
 800a4e6:	f000 fea0 	bl	800b22a <PxMessagingTask+0x15f2>
								SetupDMAStreams(cMessage[port - 1][8 + shift],
 800a4ea:	2138      	movs	r1, #56	; 0x38
 800a4ec:	4369      	muls	r1, r5
 800a4ee:	4ba2      	ldr	r3, [pc, #648]	; (800a778 <PxMessagingTask+0xb40>)
 800a4f0:	185b      	adds	r3, r3, r1
 800a4f2:	4443      	add	r3, r8
 800a4f4:	7a18      	ldrb	r0, [r3, #8]
 800a4f6:	9200      	str	r2, [sp, #0]
 800a4f8:	9b05      	ldr	r3, [sp, #20]
 800a4fa:	0022      	movs	r2, r4
 800a4fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4fe:	f7fe fd97 	bl	8009030 <SetupDMAStreams>
 800a502:	464b      	mov	r3, r9
 800a504:	9305      	str	r3, [sp, #20]
 800a506:	f7ff fbc7 	bl	8009c98 <PxMessagingTask+0x60>
							temp = cMessage[port - 1][13 + shift];
 800a50a:	2238      	movs	r2, #56	; 0x38
 800a50c:	436a      	muls	r2, r5
 800a50e:	4b9a      	ldr	r3, [pc, #616]	; (800a778 <PxMessagingTask+0xb40>)
 800a510:	189b      	adds	r3, r3, r2
 800a512:	191c      	adds	r4, r3, r4
 800a514:	7b63      	ldrb	r3, [r4, #13]
 800a516:	4699      	mov	r9, r3
 800a518:	e773      	b.n	800a402 <PxMessagingTask+0x7ca>
							temp = cMessage[port - 1][15 + shift];
 800a51a:	2238      	movs	r2, #56	; 0x38
 800a51c:	436a      	muls	r2, r5
 800a51e:	4b96      	ldr	r3, [pc, #600]	; (800a778 <PxMessagingTask+0xb40>)
 800a520:	189b      	adds	r3, r3, r2
 800a522:	4443      	add	r3, r8
 800a524:	7bdb      	ldrb	r3, [r3, #15]
 800a526:	4699      	mov	r9, r3
 800a528:	e76b      	b.n	800a402 <PxMessagingTask+0x7ca>
 800a52a:	46c2      	mov	sl, r8
									cMessage[port - 1][8 + shift]); /* Direction */
 800a52c:	2338      	movs	r3, #56	; 0x38
 800a52e:	436b      	muls	r3, r5
 800a530:	4c91      	ldr	r4, [pc, #580]	; (800a778 <PxMessagingTask+0xb40>)
 800a532:	18e4      	adds	r4, r4, r3
 800a534:	4653      	mov	r3, sl
 800a536:	18e6      	adds	r6, r4, r3
							EE_WriteVariable(_EE_DMA_STREAM_BASE,
 800a538:	7a31      	ldrb	r1, [r6, #8]
 800a53a:	20e4      	movs	r0, #228	; 0xe4
 800a53c:	f7fd f974 	bl	8007828 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][shift] << 8)
 800a540:	4653      	mov	r3, sl
 800a542:	5ce3      	ldrb	r3, [r4, r3]
 800a544:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][1 + shift]); /* Count high half-word */
 800a546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a548:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,
 800a54a:	18c9      	adds	r1, r1, r3
 800a54c:	b289      	uxth	r1, r1
 800a54e:	20e5      	movs	r0, #229	; 0xe5
 800a550:	f7fd f96a 	bl	8007828 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][2 + shift]
 800a554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a556:	5ce3      	ldrb	r3, [r4, r3]
											<< 8)
 800a558:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][3 + shift]); /* Count low half-word */
 800a55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a55c:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,
 800a55e:	18c9      	adds	r1, r1, r3
 800a560:	b289      	uxth	r1, r1
 800a562:	20e6      	movs	r0, #230	; 0xe6
 800a564:	f7fd f960 	bl	8007828 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][4 + shift]
 800a568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a56a:	5ce3      	ldrb	r3, [r4, r3]
											<< 8)
 800a56c:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800a56e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a570:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,
 800a572:	18c9      	adds	r1, r1, r3
 800a574:	b289      	uxth	r1, r1
 800a576:	20e7      	movs	r0, #231	; 0xe7
 800a578:	f7fd f956 	bl	8007828 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][6 + shift]
 800a57c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a57e:	5ce3      	ldrb	r3, [r4, r3]
											<< 8)
 800a580:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800a582:	9a05      	ldr	r2, [sp, #20]
 800a584:	5ca1      	ldrb	r1, [r4, r2]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,
 800a586:	18c9      	adds	r1, r1, r3
 800a588:	b289      	uxth	r1, r1
 800a58a:	20e8      	movs	r0, #232	; 0xe8
 800a58c:	f7fd f94c 	bl	8007828 <EE_WriteVariable>
									((uint16_t) cMessage[port - 1][9 + shift]
 800a590:	7a73      	ldrb	r3, [r6, #9]
											<< 8)
 800a592:	021b      	lsls	r3, r3, #8
											+ cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800a594:	7ab1      	ldrb	r1, [r6, #10]
							EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,
 800a596:	18c9      	adds	r1, r1, r3
 800a598:	b289      	uxth	r1, r1
 800a59a:	20e9      	movs	r0, #233	; 0xe9
 800a59c:	f7fd f944 	bl	8007828 <EE_WriteVariable>
							if (numOfParams == 19)
 800a5a0:	9b06      	ldr	r3, [sp, #24]
 800a5a2:	2b13      	cmp	r3, #19
 800a5a4:	d115      	bne.n	800a5d2 <PxMessagingTask+0x99a>
										((uint16_t) cMessage[port - 1][11
 800a5a6:	3325      	adds	r3, #37	; 0x25
 800a5a8:	436b      	muls	r3, r5
 800a5aa:	4d73      	ldr	r5, [pc, #460]	; (800a778 <PxMessagingTask+0xb40>)
 800a5ac:	18ed      	adds	r5, r5, r3
 800a5ae:	5deb      	ldrb	r3, [r5, r7]
												+ shift] << 8)
 800a5b0:	021b      	lsls	r3, r3, #8
												+ cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800a5b2:	4455      	add	r5, sl
 800a5b4:	7b29      	ldrb	r1, [r5, #12]
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,
 800a5b6:	18c9      	adds	r1, r1, r3
 800a5b8:	b289      	uxth	r1, r1
 800a5ba:	20ea      	movs	r0, #234	; 0xea
 800a5bc:	f7fd f934 	bl	8007828 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	4b6e      	ldr	r3, [pc, #440]	; (800a780 <PxMessagingTask+0xb48>)
 800a5c6:	4a6f      	ldr	r2, [pc, #444]	; (800a784 <PxMessagingTask+0xb4c>)
 800a5c8:	60da      	str	r2, [r3, #12]
 800a5ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a5ce:	46c0      	nop			; (mov r8, r8)
 800a5d0:	e7fd      	b.n	800a5ce <PxMessagingTask+0x996>
							if (numOfParams == 21)
 800a5d2:	9b06      	ldr	r3, [sp, #24]
 800a5d4:	2b15      	cmp	r3, #21
 800a5d6:	d1f3      	bne.n	800a5c0 <PxMessagingTask+0x988>
										((uint16_t) cMessage[port - 1][13
 800a5d8:	3323      	adds	r3, #35	; 0x23
 800a5da:	435d      	muls	r5, r3
 800a5dc:	4b66      	ldr	r3, [pc, #408]	; (800a778 <PxMessagingTask+0xb40>)
 800a5de:	195b      	adds	r3, r3, r5
 800a5e0:	4453      	add	r3, sl
 800a5e2:	7b5a      	ldrb	r2, [r3, #13]
												+ shift] << 8)
 800a5e4:	0212      	lsls	r2, r2, #8
												+ cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800a5e6:	7b99      	ldrb	r1, [r3, #14]
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,
 800a5e8:	1889      	adds	r1, r1, r2
 800a5ea:	b289      	uxth	r1, r1
 800a5ec:	20eb      	movs	r0, #235	; 0xeb
 800a5ee:	f7fd f91b 	bl	8007828 <EE_WriteVariable>
 800a5f2:	e7e5      	b.n	800a5c0 <PxMessagingTask+0x988>
						StartScastDMAStream(cMessage[port - 1][9 + shift], myID,
 800a5f4:	4f60      	ldr	r7, [pc, #384]	; (800a778 <PxMessagingTask+0xb40>)
 800a5f6:	19bf      	adds	r7, r7, r6
 800a5f8:	1939      	adds	r1, r7, r4
 800a5fa:	7a8b      	ldrb	r3, [r1, #10]
 800a5fc:	9306      	str	r3, [sp, #24]
 800a5fe:	7aca      	ldrb	r2, [r1, #11]
 800a600:	485e      	ldr	r0, [pc, #376]	; (800a77c <PxMessagingTask+0xb44>)
 800a602:	7803      	ldrb	r3, [r0, #0]
 800a604:	4698      	mov	r8, r3
 800a606:	7a4b      	ldrb	r3, [r1, #9]
 800a608:	4699      	mov	r9, r3
 800a60a:	7b08      	ldrb	r0, [r1, #12]
 800a60c:	0003      	movs	r3, r0
 800a60e:	1e58      	subs	r0, r3, #1
 800a610:	4183      	sbcs	r3, r0
 800a612:	9303      	str	r3, [sp, #12]
								((uint32_t) cMessage[port - 1][4 + shift] << 24)
 800a614:	7908      	ldrb	r0, [r1, #4]
 800a616:	0603      	lsls	r3, r0, #24
 800a618:	469c      	mov	ip, r3
										+ ((uint32_t) cMessage[port - 1][5
 800a61a:	7948      	ldrb	r0, [r1, #5]
												+ shift] << 16)
 800a61c:	0400      	lsls	r0, r0, #16
										+ ((uint32_t) cMessage[port - 1][5
 800a61e:	4460      	add	r0, ip
										+ cMessage[port - 1][7 + shift];
 800a620:	79cb      	ldrb	r3, [r1, #7]
 800a622:	469c      	mov	ip, r3
						timeout =
 800a624:	4460      	add	r0, ip
										+ ((uint32_t) cMessage[port - 1][6
 800a626:	798b      	ldrb	r3, [r1, #6]
												+ shift] << 8)
 800a628:	021b      	lsls	r3, r3, #8
 800a62a:	469c      	mov	ip, r3
						timeout =
 800a62c:	4460      	add	r0, ip
						StartScastDMAStream(cMessage[port - 1][9 + shift], myID,
 800a62e:	9002      	str	r0, [sp, #8]
								((uint32_t) cMessage[port - 1][shift] << 24)
 800a630:	5d38      	ldrb	r0, [r7, r4]
 800a632:	0600      	lsls	r0, r0, #24
										+ cMessage[port - 1][3 + shift];
 800a634:	78cc      	ldrb	r4, [r1, #3]
						count =
 800a636:	1900      	adds	r0, r0, r4
										+ ((uint32_t) cMessage[port - 1][1
 800a638:	784c      	ldrb	r4, [r1, #1]
												+ shift] << 16)
 800a63a:	0424      	lsls	r4, r4, #16
						count =
 800a63c:	1900      	adds	r0, r0, r4
										+ ((uint32_t) cMessage[port - 1][2
 800a63e:	788c      	ldrb	r4, [r1, #2]
												+ shift] << 8)
 800a640:	0224      	lsls	r4, r4, #8
						count =
 800a642:	1900      	adds	r0, r0, r4
						StartScastDMAStream(cMessage[port - 1][9 + shift], myID,
 800a644:	9001      	str	r0, [sp, #4]
 800a646:	7a09      	ldrb	r1, [r1, #8]
 800a648:	9100      	str	r1, [sp, #0]
 800a64a:	9b06      	ldr	r3, [sp, #24]
 800a64c:	4641      	mov	r1, r8
 800a64e:	4648      	mov	r0, r9
 800a650:	f7ff f854 	bl	80096fc <StartScastDMAStream>
						break;
 800a654:	2700      	movs	r7, #0
 800a656:	f7ff fb1f 	bl	8009c98 <PxMessagingTask+0x60>
						if (cMessage[port - 1][shift] == REMOTE_MEMORY_ADD)	// request for a memory address
 800a65a:	0023      	movs	r3, r4
 800a65c:	4a46      	ldr	r2, [pc, #280]	; (800a778 <PxMessagingTask+0xb40>)
 800a65e:	1992      	adds	r2, r2, r6
 800a660:	5d12      	ldrb	r2, [r2, r4]
 800a662:	2a00      	cmp	r2, #0
 800a664:	d000      	beq.n	800a668 <PxMessagingTask+0xa30>
 800a666:	e093      	b.n	800a790 <PxMessagingTask+0xb58>
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a668:	3238      	adds	r2, #56	; 0x38
 800a66a:	436a      	muls	r2, r5
 800a66c:	4b42      	ldr	r3, [pc, #264]	; (800a778 <PxMessagingTask+0xb40>)
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	191c      	adds	r4, r3, r4
 800a672:	78a3      	ldrb	r3, [r4, #2]
									<< 24)
 800a674:	061b      	lsls	r3, r3, #24
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800a676:	78e2      	ldrb	r2, [r4, #3]
											<< 16)
 800a678:	0412      	lsls	r2, r2, #16
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800a67a:	189b      	adds	r3, r3, r2
									+ cMessage[port - 1][5 + shift];
 800a67c:	7962      	ldrb	r2, [r4, #5]
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a67e:	189b      	adds	r3, r3, r2
									+ ((uint32_t) cMessage[port - 1][4 + shift]
 800a680:	7922      	ldrb	r2, [r4, #4]
											<< 8)
 800a682:	0212      	lsls	r2, r2, #8
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800a684:	189b      	adds	r3, r3, r2
							switch (cMessage[port - 1][1 + shift])// requested format
 800a686:	7862      	ldrb	r2, [r4, #1]
 800a688:	3a01      	subs	r2, #1
 800a68a:	b2d1      	uxtb	r1, r2
 800a68c:	2907      	cmp	r1, #7
 800a68e:	d901      	bls.n	800a694 <PxMessagingTask+0xa5c>
 800a690:	f000 fdb7 	bl	800b202 <PxMessagingTask+0x15ca>
 800a694:	b2d2      	uxtb	r2, r2
 800a696:	0092      	lsls	r2, r2, #2
 800a698:	493b      	ldr	r1, [pc, #236]	; (800a788 <PxMessagingTask+0xb50>)
 800a69a:	588a      	ldr	r2, [r1, r2]
 800a69c:	4697      	mov	pc, r2
								messageParams[0] = *(__IO uint8_t*) temp32;
 800a69e:	781a      	ldrb	r2, [r3, #0]
 800a6a0:	4b3a      	ldr	r3, [pc, #232]	; (800a78c <PxMessagingTask+0xb54>)
 800a6a2:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	211f      	movs	r1, #31
 800a6a8:	9804      	ldr	r0, [sp, #16]
 800a6aa:	f7ff f801 	bl	80096b0 <SendMessageToModule>
								break;
 800a6ae:	2700      	movs	r7, #0
 800a6b0:	f7ff faf2 	bl	8009c98 <PxMessagingTask+0x60>
								messageParams[0] = *(__IO int8_t*) temp32;
 800a6b4:	781a      	ldrb	r2, [r3, #0]
 800a6b6:	4b35      	ldr	r3, [pc, #212]	; (800a78c <PxMessagingTask+0xb54>)
 800a6b8:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	211f      	movs	r1, #31
 800a6be:	9804      	ldr	r0, [sp, #16]
 800a6c0:	f7fe fff6 	bl	80096b0 <SendMessageToModule>
								break;
 800a6c4:	2700      	movs	r7, #0
 800a6c6:	f7ff fae7 	bl	8009c98 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO uint16_t*) temp32)
 800a6ca:	8819      	ldrh	r1, [r3, #0]
								messageParams[0] =
 800a6cc:	4a2f      	ldr	r2, [pc, #188]	; (800a78c <PxMessagingTask+0xb54>)
 800a6ce:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO uint16_t*) temp32)
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	0a1b      	lsrs	r3, r3, #8
								messageParams[1] =
 800a6d4:	7053      	strb	r3, [r2, #1]
								SendMessageToModule(src,
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	211f      	movs	r1, #31
 800a6da:	9804      	ldr	r0, [sp, #16]
 800a6dc:	f7fe ffe8 	bl	80096b0 <SendMessageToModule>
								break;
 800a6e0:	2700      	movs	r7, #0
 800a6e2:	f7ff fad9 	bl	8009c98 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO int16_t*) temp32)
 800a6e6:	8819      	ldrh	r1, [r3, #0]
								messageParams[0] =
 800a6e8:	4a28      	ldr	r2, [pc, #160]	; (800a78c <PxMessagingTask+0xb54>)
 800a6ea:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO int16_t*) temp32)
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b21b      	sxth	r3, r3
 800a6f0:	121b      	asrs	r3, r3, #8
								messageParams[1] =
 800a6f2:	7053      	strb	r3, [r2, #1]
								SendMessageToModule(src,
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	211f      	movs	r1, #31
 800a6f8:	9804      	ldr	r0, [sp, #16]
 800a6fa:	f7fe ffd9 	bl	80096b0 <SendMessageToModule>
								break;
 800a6fe:	2700      	movs	r7, #0
 800a700:	f7ff faca 	bl	8009c98 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a704:	6819      	ldr	r1, [r3, #0]
								messageParams[0] =
 800a706:	4a21      	ldr	r2, [pc, #132]	; (800a78c <PxMessagingTask+0xb54>)
 800a708:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a70a:	6819      	ldr	r1, [r3, #0]
												>> 8);
 800a70c:	0a09      	lsrs	r1, r1, #8
								messageParams[1] =
 800a70e:	7051      	strb	r1, [r2, #1]
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a710:	6819      	ldr	r1, [r3, #0]
												>> 16);
 800a712:	0c09      	lsrs	r1, r1, #16
								messageParams[2] =
 800a714:	7091      	strb	r1, [r2, #2]
										(uint8_t) ((*(__IO uint32_t*) temp32)
 800a716:	681b      	ldr	r3, [r3, #0]
												>> 24);
 800a718:	0e1b      	lsrs	r3, r3, #24
								messageParams[3] =
 800a71a:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800a71c:	2204      	movs	r2, #4
 800a71e:	211f      	movs	r1, #31
 800a720:	9804      	ldr	r0, [sp, #16]
 800a722:	f7fe ffc5 	bl	80096b0 <SendMessageToModule>
								break;
 800a726:	2700      	movs	r7, #0
 800a728:	f7ff fab6 	bl	8009c98 <PxMessagingTask+0x60>
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a72c:	6819      	ldr	r1, [r3, #0]
								messageParams[0] =
 800a72e:	4a17      	ldr	r2, [pc, #92]	; (800a78c <PxMessagingTask+0xb54>)
 800a730:	7011      	strb	r1, [r2, #0]
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a732:	6819      	ldr	r1, [r3, #0]
												>> 8);
 800a734:	1209      	asrs	r1, r1, #8
								messageParams[1] =
 800a736:	7051      	strb	r1, [r2, #1]
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a738:	6819      	ldr	r1, [r3, #0]
												>> 16);
 800a73a:	1409      	asrs	r1, r1, #16
								messageParams[2] =
 800a73c:	7091      	strb	r1, [r2, #2]
										(uint8_t) ((*(__IO int32_t*) temp32)
 800a73e:	681b      	ldr	r3, [r3, #0]
												>> 24);
 800a740:	161b      	asrs	r3, r3, #24
								messageParams[3] =
 800a742:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800a744:	2204      	movs	r2, #4
 800a746:	211f      	movs	r1, #31
 800a748:	9804      	ldr	r0, [sp, #16]
 800a74a:	f7fe ffb1 	bl	80096b0 <SendMessageToModule>
								break;
 800a74e:	2700      	movs	r7, #0
 800a750:	f7ff faa2 	bl	8009c98 <PxMessagingTask+0x60>
										*(__IO uint8_t*) (temp32 + 0);
 800a754:	7819      	ldrb	r1, [r3, #0]
								messageParams[0] =
 800a756:	4a0d      	ldr	r2, [pc, #52]	; (800a78c <PxMessagingTask+0xb54>)
 800a758:	7011      	strb	r1, [r2, #0]
										*(__IO uint8_t*) (temp32 + 1);
 800a75a:	7859      	ldrb	r1, [r3, #1]
								messageParams[1] =
 800a75c:	7051      	strb	r1, [r2, #1]
										*(__IO uint8_t*) (temp32 + 2);
 800a75e:	7899      	ldrb	r1, [r3, #2]
								messageParams[2] =
 800a760:	7091      	strb	r1, [r2, #2]
										*(__IO uint8_t*) (temp32 + 3);
 800a762:	78db      	ldrb	r3, [r3, #3]
								messageParams[3] =
 800a764:	70d3      	strb	r3, [r2, #3]
								SendMessageToModule(src,
 800a766:	2208      	movs	r2, #8
 800a768:	211f      	movs	r1, #31
 800a76a:	9804      	ldr	r0, [sp, #16]
 800a76c:	f7fe ffa0 	bl	80096b0 <SendMessageToModule>
								break;	// You cannot bitwise floats	
 800a770:	2700      	movs	r7, #0
 800a772:	f7ff fa91 	bl	8009c98 <PxMessagingTask+0x60>
 800a776:	46c0      	nop			; (mov r8, r8)
 800a778:	20000530 	.word	0x20000530
 800a77c:	20000866 	.word	0x20000866
 800a780:	e000ed00 	.word	0xe000ed00
 800a784:	05fa0004 	.word	0x05fa0004
 800a788:	0801a2f8 	.word	0x0801a2f8
 800a78c:	20000728 	.word	0x20000728
						} else if (cMessage[port - 1][shift]
 800a790:	2a02      	cmp	r2, #2
 800a792:	d000      	beq.n	800a796 <PxMessagingTask+0xb5e>
 800a794:	e097      	b.n	800a8c6 <PxMessagingTask+0xc8e>
							cMessage[port - 1][messageLength[port - 1] - 1] = 0;// adding string termination
 800a796:	48e6      	ldr	r0, [pc, #920]	; (800ab30 <PxMessagingTask+0xef8>)
 800a798:	3236      	adds	r2, #54	; 0x36
 800a79a:	436a      	muls	r2, r5
 800a79c:	1882      	adds	r2, r0, r2
 800a79e:	1851      	adds	r1, r2, r1
 800a7a0:	3901      	subs	r1, #1
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	700a      	strb	r2, [r1, #0]
									(char*) &cMessage[port - 1][1 + shift]); // extrating module parameter
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	4453      	add	r3, sl
 800a7aa:	1818      	adds	r0, r3, r0
							temp = IsModuleParameter(
 800a7ac:	f7f8 fffe 	bl	80037ac <IsModuleParameter>
 800a7b0:	9005      	str	r0, [sp, #20]
							if (temp == 0) {		// Parameter does not exist
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d107      	bne.n	800a7c6 <PxMessagingTask+0xb8e>
								SendMessageToModule(src,
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	211f      	movs	r1, #31
 800a7ba:	9804      	ldr	r0, [sp, #16]
 800a7bc:	f7fe ff78 	bl	80096b0 <SendMessageToModule>
 800a7c0:	2700      	movs	r7, #0
 800a7c2:	f7ff fa69 	bl	8009c98 <PxMessagingTask+0x60>
								temp32 = (uint32_t) modParam[temp - 1].paramPtr;
 800a7c6:	3801      	subs	r0, #1
 800a7c8:	4ada      	ldr	r2, [pc, #872]	; (800ab34 <PxMessagingTask+0xefc>)
 800a7ca:	210c      	movs	r1, #12
 800a7cc:	4341      	muls	r1, r0
 800a7ce:	588b      	ldr	r3, [r1, r2]
										modParam[temp - 1].paramFormat;
 800a7d0:	1852      	adds	r2, r2, r1
 800a7d2:	7912      	ldrb	r2, [r2, #4]
								messageParams[0] =
 800a7d4:	49d8      	ldr	r1, [pc, #864]	; (800ab38 <PxMessagingTask+0xf00>)
 800a7d6:	700a      	strb	r2, [r1, #0]
								switch (messageParams[0])	// requested format
 800a7d8:	3a01      	subs	r2, #1
 800a7da:	b2d1      	uxtb	r1, r2
 800a7dc:	2907      	cmp	r1, #7
 800a7de:	d901      	bls.n	800a7e4 <PxMessagingTask+0xbac>
 800a7e0:	f000 fd12 	bl	800b208 <PxMessagingTask+0x15d0>
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	0092      	lsls	r2, r2, #2
 800a7e8:	49d4      	ldr	r1, [pc, #848]	; (800ab3c <PxMessagingTask+0xf04>)
 800a7ea:	588a      	ldr	r2, [r1, r2]
 800a7ec:	4697      	mov	pc, r2
									messageParams[1] = *(__IO uint8_t*) temp32;
 800a7ee:	781a      	ldrb	r2, [r3, #0]
 800a7f0:	4bd1      	ldr	r3, [pc, #836]	; (800ab38 <PxMessagingTask+0xf00>)
 800a7f2:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	211f      	movs	r1, #31
 800a7f8:	9804      	ldr	r0, [sp, #16]
 800a7fa:	f7fe ff59 	bl	80096b0 <SendMessageToModule>
									break;
 800a7fe:	2700      	movs	r7, #0
 800a800:	f7ff fa4a 	bl	8009c98 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO int8_t*) temp32;
 800a804:	781a      	ldrb	r2, [r3, #0]
 800a806:	4bcc      	ldr	r3, [pc, #816]	; (800ab38 <PxMessagingTask+0xf00>)
 800a808:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a80a:	2202      	movs	r2, #2
 800a80c:	211f      	movs	r1, #31
 800a80e:	9804      	ldr	r0, [sp, #16]
 800a810:	f7fe ff4e 	bl	80096b0 <SendMessageToModule>
									break;
 800a814:	2700      	movs	r7, #0
 800a816:	f7ff fa3f 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a81a:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a81c:	4ac6      	ldr	r2, [pc, #792]	; (800ab38 <PxMessagingTask+0xf00>)
 800a81e:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	0a1b      	lsrs	r3, r3, #8
									messageParams[2] =
 800a824:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a826:	2203      	movs	r2, #3
 800a828:	211f      	movs	r1, #31
 800a82a:	9804      	ldr	r0, [sp, #16]
 800a82c:	f7fe ff40 	bl	80096b0 <SendMessageToModule>
									break;
 800a830:	2700      	movs	r7, #0
 800a832:	f7ff fa31 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a836:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a838:	4abf      	ldr	r2, [pc, #764]	; (800ab38 <PxMessagingTask+0xf00>)
 800a83a:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a83c:	881b      	ldrh	r3, [r3, #0]
 800a83e:	b21b      	sxth	r3, r3
 800a840:	121b      	asrs	r3, r3, #8
									messageParams[2] =
 800a842:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a844:	2203      	movs	r2, #3
 800a846:	211f      	movs	r1, #31
 800a848:	9804      	ldr	r0, [sp, #16]
 800a84a:	f7fe ff31 	bl	80096b0 <SendMessageToModule>
									break;
 800a84e:	2700      	movs	r7, #0
 800a850:	f7ff fa22 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a854:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a856:	4ab8      	ldr	r2, [pc, #736]	; (800ab38 <PxMessagingTask+0xf00>)
 800a858:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a85a:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a85c:	0a09      	lsrs	r1, r1, #8
									messageParams[2] =
 800a85e:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a860:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a862:	0c09      	lsrs	r1, r1, #16
									messageParams[3] =
 800a864:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a866:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a868:	0e1b      	lsrs	r3, r3, #24
									messageParams[4] =
 800a86a:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a86c:	2205      	movs	r2, #5
 800a86e:	211f      	movs	r1, #31
 800a870:	9804      	ldr	r0, [sp, #16]
 800a872:	f7fe ff1d 	bl	80096b0 <SendMessageToModule>
									break;
 800a876:	2700      	movs	r7, #0
 800a878:	f7ff fa0e 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a87c:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a87e:	4aae      	ldr	r2, [pc, #696]	; (800ab38 <PxMessagingTask+0xf00>)
 800a880:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a882:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a884:	1209      	asrs	r1, r1, #8
									messageParams[2] =
 800a886:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a888:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a88a:	1409      	asrs	r1, r1, #16
									messageParams[3] =
 800a88c:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a88e:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a890:	161b      	asrs	r3, r3, #24
									messageParams[4] =
 800a892:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a894:	2205      	movs	r2, #5
 800a896:	211f      	movs	r1, #31
 800a898:	9804      	ldr	r0, [sp, #16]
 800a89a:	f7fe ff09 	bl	80096b0 <SendMessageToModule>
									break;
 800a89e:	2700      	movs	r7, #0
 800a8a0:	f7ff f9fa 	bl	8009c98 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO uint8_t*) (temp32
 800a8a4:	7819      	ldrb	r1, [r3, #0]
 800a8a6:	4aa4      	ldr	r2, [pc, #656]	; (800ab38 <PxMessagingTask+0xf00>)
 800a8a8:	7051      	strb	r1, [r2, #1]
									messageParams[2] = *(__IO uint8_t*) (temp32
 800a8aa:	7859      	ldrb	r1, [r3, #1]
 800a8ac:	7091      	strb	r1, [r2, #2]
									messageParams[3] = *(__IO uint8_t*) (temp32
 800a8ae:	7899      	ldrb	r1, [r3, #2]
 800a8b0:	70d1      	strb	r1, [r2, #3]
									messageParams[4] = *(__IO uint8_t*) (temp32
 800a8b2:	78db      	ldrb	r3, [r3, #3]
 800a8b4:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a8b6:	2209      	movs	r2, #9
 800a8b8:	211f      	movs	r1, #31
 800a8ba:	9804      	ldr	r0, [sp, #16]
 800a8bc:	f7fe fef8 	bl	80096b0 <SendMessageToModule>
									break;
 800a8c0:	2700      	movs	r7, #0
 800a8c2:	f7ff f9e9 	bl	8009c98 <PxMessagingTask+0x60>
							}
 800a8c6:	2700      	movs	r7, #0
						} else if (cMessage[port - 1][shift] >= REMOTE_BOS_VAR)	// request for a BOS var
 800a8c8:	2a02      	cmp	r2, #2
 800a8ca:	d801      	bhi.n	800a8d0 <PxMessagingTask+0xc98>
 800a8cc:	f7ff f9e4 	bl	8009c98 <PxMessagingTask+0x60>
									BOS_var_reg[cMessage[port - 1][shift]
 800a8d0:	3a04      	subs	r2, #4
 800a8d2:	0092      	lsls	r2, r2, #2
 800a8d4:	4b9a      	ldr	r3, [pc, #616]	; (800ab40 <PxMessagingTask+0xf08>)
 800a8d6:	58d1      	ldr	r1, [r2, r3]
											- REMOTE_BOS_VAR - 1] & 0x000F;	// send variable format (lower 4 bits)
 800a8d8:	220f      	movs	r2, #15
 800a8da:	400a      	ands	r2, r1
							messageParams[0] =
 800a8dc:	4b96      	ldr	r3, [pc, #600]	; (800ab38 <PxMessagingTask+0xf00>)
 800a8de:	701a      	strb	r2, [r3, #0]
							if (messageParams[0] == 0) {// Variable does not exist
 800a8e0:	42ba      	cmp	r2, r7
 800a8e2:	d106      	bne.n	800a8f2 <PxMessagingTask+0xcba>
								SendMessageToModule(src,
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	211f      	movs	r1, #31
 800a8e8:	9804      	ldr	r0, [sp, #16]
 800a8ea:	f7fe fee1 	bl	80096b0 <SendMessageToModule>
 800a8ee:	f7ff f9d3 	bl	8009c98 <PxMessagingTask+0x60>
												- REMOTE_BOS_VAR - 1] >> 16)
 800a8f2:	0c09      	lsrs	r1, r1, #16
								temp32 =
 800a8f4:	2380      	movs	r3, #128	; 0x80
 800a8f6:	059b      	lsls	r3, r3, #22
 800a8f8:	18cb      	adds	r3, r1, r3
								switch (messageParams[0])	// requested format
 800a8fa:	3a01      	subs	r2, #1
 800a8fc:	b2d0      	uxtb	r0, r2
 800a8fe:	2807      	cmp	r0, #7
 800a900:	d901      	bls.n	800a906 <PxMessagingTask+0xcce>
 800a902:	f000 fc84 	bl	800b20e <PxMessagingTask+0x15d6>
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	0092      	lsls	r2, r2, #2
 800a90a:	488e      	ldr	r0, [pc, #568]	; (800ab44 <PxMessagingTask+0xf0c>)
 800a90c:	5882      	ldr	r2, [r0, r2]
 800a90e:	4697      	mov	pc, r2
									messageParams[1] = *(__IO uint8_t*) temp32;
 800a910:	781a      	ldrb	r2, [r3, #0]
 800a912:	4b89      	ldr	r3, [pc, #548]	; (800ab38 <PxMessagingTask+0xf00>)
 800a914:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a916:	2202      	movs	r2, #2
 800a918:	211f      	movs	r1, #31
 800a91a:	9804      	ldr	r0, [sp, #16]
 800a91c:	f7fe fec8 	bl	80096b0 <SendMessageToModule>
									break;
 800a920:	2700      	movs	r7, #0
 800a922:	f7ff f9b9 	bl	8009c98 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO int8_t*) temp32;
 800a926:	781a      	ldrb	r2, [r3, #0]
 800a928:	4b83      	ldr	r3, [pc, #524]	; (800ab38 <PxMessagingTask+0xf00>)
 800a92a:	705a      	strb	r2, [r3, #1]
									SendMessageToModule(src,
 800a92c:	2202      	movs	r2, #2
 800a92e:	211f      	movs	r1, #31
 800a930:	9804      	ldr	r0, [sp, #16]
 800a932:	f7fe febd 	bl	80096b0 <SendMessageToModule>
									break;
 800a936:	2700      	movs	r7, #0
 800a938:	f7ff f9ae 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a93c:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a93e:	4a7e      	ldr	r2, [pc, #504]	; (800ab38 <PxMessagingTask+0xf00>)
 800a940:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint16_t*) temp32)
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	0a1b      	lsrs	r3, r3, #8
									messageParams[2] =
 800a946:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a948:	2203      	movs	r2, #3
 800a94a:	211f      	movs	r1, #31
 800a94c:	9804      	ldr	r0, [sp, #16]
 800a94e:	f7fe feaf 	bl	80096b0 <SendMessageToModule>
									break;
 800a952:	2700      	movs	r7, #0
 800a954:	f7ff f9a0 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a958:	8819      	ldrh	r1, [r3, #0]
									messageParams[1] =
 800a95a:	4a77      	ldr	r2, [pc, #476]	; (800ab38 <PxMessagingTask+0xf00>)
 800a95c:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int16_t*) temp32)
 800a95e:	881b      	ldrh	r3, [r3, #0]
 800a960:	b21b      	sxth	r3, r3
 800a962:	121b      	asrs	r3, r3, #8
									messageParams[2] =
 800a964:	7093      	strb	r3, [r2, #2]
									SendMessageToModule(src,
 800a966:	2203      	movs	r2, #3
 800a968:	211f      	movs	r1, #31
 800a96a:	9804      	ldr	r0, [sp, #16]
 800a96c:	f7fe fea0 	bl	80096b0 <SendMessageToModule>
									break;
 800a970:	2700      	movs	r7, #0
 800a972:	f7ff f991 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a976:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a978:	4a6f      	ldr	r2, [pc, #444]	; (800ab38 <PxMessagingTask+0xf00>)
 800a97a:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a97c:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a97e:	0a09      	lsrs	r1, r1, #8
									messageParams[2] =
 800a980:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a982:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a984:	0c09      	lsrs	r1, r1, #16
									messageParams[3] =
 800a986:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO uint32_t*) temp32)
 800a988:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a98a:	0e1b      	lsrs	r3, r3, #24
									messageParams[4] =
 800a98c:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a98e:	2205      	movs	r2, #5
 800a990:	211f      	movs	r1, #31
 800a992:	9804      	ldr	r0, [sp, #16]
 800a994:	f7fe fe8c 	bl	80096b0 <SendMessageToModule>
									break;
 800a998:	2700      	movs	r7, #0
 800a99a:	f7ff f97d 	bl	8009c98 <PxMessagingTask+0x60>
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a99e:	6819      	ldr	r1, [r3, #0]
									messageParams[1] =
 800a9a0:	4a65      	ldr	r2, [pc, #404]	; (800ab38 <PxMessagingTask+0xf00>)
 800a9a2:	7051      	strb	r1, [r2, #1]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a9a4:	6819      	ldr	r1, [r3, #0]
													>> 8);
 800a9a6:	1209      	asrs	r1, r1, #8
									messageParams[2] =
 800a9a8:	7091      	strb	r1, [r2, #2]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a9aa:	6819      	ldr	r1, [r3, #0]
													>> 16);
 800a9ac:	1409      	asrs	r1, r1, #16
									messageParams[3] =
 800a9ae:	70d1      	strb	r1, [r2, #3]
											(uint8_t) ((*(__IO int32_t*) temp32)
 800a9b0:	681b      	ldr	r3, [r3, #0]
													>> 24);
 800a9b2:	161b      	asrs	r3, r3, #24
									messageParams[4] =
 800a9b4:	7113      	strb	r3, [r2, #4]
									SendMessageToModule(src,
 800a9b6:	2205      	movs	r2, #5
 800a9b8:	211f      	movs	r1, #31
 800a9ba:	9804      	ldr	r0, [sp, #16]
 800a9bc:	f7fe fe78 	bl	80096b0 <SendMessageToModule>
									break;
 800a9c0:	2700      	movs	r7, #0
 800a9c2:	f7ff f969 	bl	8009c98 <PxMessagingTask+0x60>
									messageParams[1] = *(__IO uint8_t*) (temp32
 800a9c6:	781a      	ldrb	r2, [r3, #0]
 800a9c8:	4b5b      	ldr	r3, [pc, #364]	; (800ab38 <PxMessagingTask+0xf00>)
 800a9ca:	705a      	strb	r2, [r3, #1]
											+ 1);
 800a9cc:	4a5e      	ldr	r2, [pc, #376]	; (800ab48 <PxMessagingTask+0xf10>)
 800a9ce:	188a      	adds	r2, r1, r2
									messageParams[2] = *(__IO uint8_t*) (temp32
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	709a      	strb	r2, [r3, #2]
											+ 2);
 800a9d4:	4a5d      	ldr	r2, [pc, #372]	; (800ab4c <PxMessagingTask+0xf14>)
 800a9d6:	188a      	adds	r2, r1, r2
									messageParams[3] = *(__IO uint8_t*) (temp32
 800a9d8:	7812      	ldrb	r2, [r2, #0]
 800a9da:	70da      	strb	r2, [r3, #3]
											+ 3);  // You cannot bitwise floats	
 800a9dc:	4a5c      	ldr	r2, [pc, #368]	; (800ab50 <PxMessagingTask+0xf18>)
 800a9de:	4694      	mov	ip, r2
 800a9e0:	4461      	add	r1, ip
									messageParams[4] = *(__IO uint8_t*) (temp32
 800a9e2:	780a      	ldrb	r2, [r1, #0]
 800a9e4:	711a      	strb	r2, [r3, #4]
									SendMessageToModule(src,
 800a9e6:	2209      	movs	r2, #9
 800a9e8:	211f      	movs	r1, #31
 800a9ea:	9804      	ldr	r0, [sp, #16]
 800a9ec:	f7fe fe60 	bl	80096b0 <SendMessageToModule>
									break;
 800a9f0:	2700      	movs	r7, #0
 800a9f2:	f7ff f951 	bl	8009c98 <PxMessagingTask+0x60>
								|| remoteBuffer == REMOTE_MODULE_PARAM)	// We requested a BOS variable or module param
 800a9f6:	4b57      	ldr	r3, [pc, #348]	; (800ab54 <PxMessagingTask+0xf1c>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	2002      	movs	r0, #2
 800a9fe:	4240      	negs	r0, r0
 800aa00:	17c1      	asrs	r1, r0, #31
 800aa02:	1812      	adds	r2, r2, r0
 800aa04:	414b      	adcs	r3, r1
						if (remoteBuffer == REMOTE_BOS_VAR
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00b      	beq.n	800aa22 <PxMessagingTask+0xdea>
						if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800aa0a:	4b53      	ldr	r3, [pc, #332]	; (800ab58 <PxMessagingTask+0xf20>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	2b10      	cmp	r3, #16
 800aa10:	d101      	bne.n	800aa16 <PxMessagingTask+0xdde>
 800aa12:	f000 fc0e 	bl	800b232 <PxMessagingTask+0x15fa>
							responseStatus = BOS_OK;
 800aa16:	4b50      	ldr	r3, [pc, #320]	; (800ab58 <PxMessagingTask+0xf20>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	2700      	movs	r7, #0
 800aa1e:	f7ff f93b 	bl	8009c98 <PxMessagingTask+0x60>
						if (remoteBuffer == REMOTE_BOS_VAR
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <PxMessagingTask+0xdf2>
 800aa26:	2a01      	cmp	r2, #1
 800aa28:	d8ef      	bhi.n	800aa0a <PxMessagingTask+0xdd2>
									(varFormat_t) cMessage[port - 1][shift];
 800aa2a:	2138      	movs	r1, #56	; 0x38
 800aa2c:	4369      	muls	r1, r5
 800aa2e:	4a40      	ldr	r2, [pc, #256]	; (800ab30 <PxMessagingTask+0xef8>)
 800aa30:	1852      	adds	r2, r2, r1
 800aa32:	5d12      	ldrb	r2, [r2, r4]
							remoteVarFormat =
 800aa34:	4949      	ldr	r1, [pc, #292]	; (800ab5c <PxMessagingTask+0xf24>)
 800aa36:	700a      	strb	r2, [r1, #0]
							switch (cMessage[port - 1][shift])	// Remote format
 800aa38:	2a08      	cmp	r2, #8
 800aa3a:	d8e6      	bhi.n	800aa0a <PxMessagingTask+0xdd2>
 800aa3c:	0092      	lsls	r2, r2, #2
 800aa3e:	4948      	ldr	r1, [pc, #288]	; (800ab60 <PxMessagingTask+0xf28>)
 800aa40:	588a      	ldr	r2, [r1, r2]
 800aa42:	4697      	mov	pc, r2
								responseStatus = BOS_ERR_REMOTE_READ_NO_VAR;
 800aa44:	4b44      	ldr	r3, [pc, #272]	; (800ab58 <PxMessagingTask+0xf20>)
 800aa46:	2210      	movs	r2, #16
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	2700      	movs	r7, #0
 800aa4c:	f7ff f924 	bl	8009c98 <PxMessagingTask+0x60>
								remoteBuffer = cMessage[port - 1][1 + shift];
 800aa50:	4a40      	ldr	r2, [pc, #256]	; (800ab54 <PxMessagingTask+0xf1c>)
 800aa52:	2038      	movs	r0, #56	; 0x38
 800aa54:	4368      	muls	r0, r5
 800aa56:	4936      	ldr	r1, [pc, #216]	; (800ab30 <PxMessagingTask+0xef8>)
 800aa58:	1809      	adds	r1, r1, r0
 800aa5a:	1909      	adds	r1, r1, r4
 800aa5c:	784b      	ldrb	r3, [r1, #1]
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	2300      	movs	r3, #0
 800aa62:	6053      	str	r3, [r2, #4]
								break;
 800aa64:	e7d1      	b.n	800aa0a <PxMessagingTask+0xdd2>
								remoteBuffer = (int8_t) cMessage[port - 1][1
 800aa66:	4a3b      	ldr	r2, [pc, #236]	; (800ab54 <PxMessagingTask+0xf1c>)
 800aa68:	2038      	movs	r0, #56	; 0x38
 800aa6a:	4368      	muls	r0, r5
 800aa6c:	4930      	ldr	r1, [pc, #192]	; (800ab30 <PxMessagingTask+0xef8>)
 800aa6e:	1809      	adds	r1, r1, r0
 800aa70:	1909      	adds	r1, r1, r4
 800aa72:	2301      	movs	r3, #1
 800aa74:	56cb      	ldrsb	r3, [r1, r3]
 800aa76:	6013      	str	r3, [r2, #0]
 800aa78:	17db      	asrs	r3, r3, #31
 800aa7a:	6053      	str	r3, [r2, #4]
								break;
 800aa7c:	e7c5      	b.n	800aa0a <PxMessagingTask+0xdd2>
								remoteBuffer = ((uint16_t) cMessage[port - 1][1
 800aa7e:	4a35      	ldr	r2, [pc, #212]	; (800ab54 <PxMessagingTask+0xf1c>)
										+ ((uint16_t) cMessage[port - 1][2
 800aa80:	2038      	movs	r0, #56	; 0x38
 800aa82:	4368      	muls	r0, r5
 800aa84:	492a      	ldr	r1, [pc, #168]	; (800ab30 <PxMessagingTask+0xef8>)
 800aa86:	1809      	adds	r1, r1, r0
 800aa88:	1909      	adds	r1, r1, r4
 800aa8a:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8);
 800aa8c:	021b      	lsls	r3, r3, #8
										+ shift] << 0)
 800aa8e:	7849      	ldrb	r1, [r1, #1]
										+ ((uint16_t) cMessage[port - 1][2
 800aa90:	185b      	adds	r3, r3, r1
 800aa92:	6013      	str	r3, [r2, #0]
 800aa94:	17db      	asrs	r3, r3, #31
 800aa96:	6053      	str	r3, [r2, #4]
								break;
 800aa98:	e7b7      	b.n	800aa0a <PxMessagingTask+0xdd2>
								remoteBuffer = ((int16_t) cMessage[port - 1][1
 800aa9a:	4a2e      	ldr	r2, [pc, #184]	; (800ab54 <PxMessagingTask+0xf1c>)
										+ ((int16_t) cMessage[port - 1][2
 800aa9c:	2038      	movs	r0, #56	; 0x38
 800aa9e:	4368      	muls	r0, r5
 800aaa0:	4923      	ldr	r1, [pc, #140]	; (800ab30 <PxMessagingTask+0xef8>)
 800aaa2:	1809      	adds	r1, r1, r0
 800aaa4:	1909      	adds	r1, r1, r4
 800aaa6:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8);
 800aaa8:	021b      	lsls	r3, r3, #8
										+ shift] << 0)
 800aaaa:	7849      	ldrb	r1, [r1, #1]
										+ ((int16_t) cMessage[port - 1][2
 800aaac:	185b      	adds	r3, r3, r1
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	17db      	asrs	r3, r3, #31
 800aab2:	6053      	str	r3, [r2, #4]
								break;
 800aab4:	e7a9      	b.n	800aa0a <PxMessagingTask+0xdd2>
								remoteBuffer = ((uint32_t) cMessage[port - 1][1
 800aab6:	4a27      	ldr	r2, [pc, #156]	; (800ab54 <PxMessagingTask+0xf1c>)
										+ ((uint32_t) cMessage[port - 1][2
 800aab8:	2038      	movs	r0, #56	; 0x38
 800aaba:	4368      	muls	r0, r5
 800aabc:	491c      	ldr	r1, [pc, #112]	; (800ab30 <PxMessagingTask+0xef8>)
 800aabe:	1809      	adds	r1, r1, r0
 800aac0:	1909      	adds	r1, r1, r4
 800aac2:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8)
 800aac4:	021b      	lsls	r3, r3, #8
										+ ((uint32_t) cMessage[port - 1][3
 800aac6:	78c8      	ldrb	r0, [r1, #3]
												+ shift] << 16)
 800aac8:	0400      	lsls	r0, r0, #16
										+ ((uint32_t) cMessage[port - 1][3
 800aaca:	181b      	adds	r3, r3, r0
										+ shift] << 0)
 800aacc:	7848      	ldrb	r0, [r1, #1]
										+ ((uint32_t) cMessage[port - 1][3
 800aace:	181b      	adds	r3, r3, r0
										+ ((uint32_t) cMessage[port - 1][4
 800aad0:	7909      	ldrb	r1, [r1, #4]
												+ shift] << 24);
 800aad2:	0609      	lsls	r1, r1, #24
										+ ((uint32_t) cMessage[port - 1][4
 800aad4:	185b      	adds	r3, r3, r1
 800aad6:	6013      	str	r3, [r2, #0]
 800aad8:	2300      	movs	r3, #0
 800aada:	6053      	str	r3, [r2, #4]
								break;
 800aadc:	e795      	b.n	800aa0a <PxMessagingTask+0xdd2>
								remoteBuffer = ((int32_t) cMessage[port - 1][1
 800aade:	4a1d      	ldr	r2, [pc, #116]	; (800ab54 <PxMessagingTask+0xf1c>)
										+ ((int32_t) cMessage[port - 1][2
 800aae0:	2038      	movs	r0, #56	; 0x38
 800aae2:	4368      	muls	r0, r5
 800aae4:	4912      	ldr	r1, [pc, #72]	; (800ab30 <PxMessagingTask+0xef8>)
 800aae6:	1809      	adds	r1, r1, r0
 800aae8:	1909      	adds	r1, r1, r4
 800aaea:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8)
 800aaec:	021b      	lsls	r3, r3, #8
										+ shift] << 0)
 800aaee:	7848      	ldrb	r0, [r1, #1]
										+ ((int32_t) cMessage[port - 1][2
 800aaf0:	181b      	adds	r3, r3, r0
										+ ((int32_t) cMessage[port - 1][3
 800aaf2:	78c8      	ldrb	r0, [r1, #3]
												+ shift] << 16)
 800aaf4:	0400      	lsls	r0, r0, #16
										+ ((int32_t) cMessage[port - 1][3
 800aaf6:	181b      	adds	r3, r3, r0
										+ ((int32_t) cMessage[port - 1][4
 800aaf8:	7909      	ldrb	r1, [r1, #4]
												+ shift] << 24);
 800aafa:	0609      	lsls	r1, r1, #24
										+ ((int32_t) cMessage[port - 1][4
 800aafc:	185b      	adds	r3, r3, r1
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	17db      	asrs	r3, r3, #31
 800ab02:	6053      	str	r3, [r2, #4]
								break;
 800ab04:	e781      	b.n	800aa0a <PxMessagingTask+0xdd2>
								remoteBuffer = ((uint32_t) cMessage[port - 1][1
 800ab06:	4a13      	ldr	r2, [pc, #76]	; (800ab54 <PxMessagingTask+0xf1c>)
										+ ((uint32_t) cMessage[port - 1][2
 800ab08:	2038      	movs	r0, #56	; 0x38
 800ab0a:	4368      	muls	r0, r5
 800ab0c:	4908      	ldr	r1, [pc, #32]	; (800ab30 <PxMessagingTask+0xef8>)
 800ab0e:	1809      	adds	r1, r1, r0
 800ab10:	1909      	adds	r1, r1, r4
 800ab12:	788b      	ldrb	r3, [r1, #2]
												+ shift] << 8)
 800ab14:	021b      	lsls	r3, r3, #8
										+ ((uint32_t) cMessage[port - 1][3
 800ab16:	78c8      	ldrb	r0, [r1, #3]
												+ shift] << 16)
 800ab18:	0400      	lsls	r0, r0, #16
										+ ((uint32_t) cMessage[port - 1][3
 800ab1a:	181b      	adds	r3, r3, r0
										+ shift] << 0)
 800ab1c:	7848      	ldrb	r0, [r1, #1]
										+ ((uint32_t) cMessage[port - 1][3
 800ab1e:	181b      	adds	r3, r3, r0
										+ ((uint32_t) cMessage[port - 1][4
 800ab20:	7909      	ldrb	r1, [r1, #4]
												+ shift] << 24);
 800ab22:	0609      	lsls	r1, r1, #24
										+ ((uint32_t) cMessage[port - 1][4
 800ab24:	185b      	adds	r3, r3, r1
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	6053      	str	r3, [r2, #4]
								break;
 800ab2c:	e76d      	b.n	800aa0a <PxMessagingTask+0xdd2>
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	20000530 	.word	0x20000530
 800ab34:	20000088 	.word	0x20000088
 800ab38:	20000728 	.word	0x20000728
 800ab3c:	0801a318 	.word	0x0801a318
 800ab40:	200060b4 	.word	0x200060b4
 800ab44:	0801a338 	.word	0x0801a338
 800ab48:	20000001 	.word	0x20000001
 800ab4c:	20000002 	.word	0x20000002
 800ab50:	20000003 	.word	0x20000003
 800ab54:	200008f0 	.word	0x200008f0
 800ab58:	200008f8 	.word	0x200008f8
 800ab5c:	20000070 	.word	0x20000070
 800ab60:	0801a358 	.word	0x0801a358
						responseStatus = BOS_OK;		// Initialize response
 800ab64:	4bcd      	ldr	r3, [pc, #820]	; (800ae9c <PxMessagingTask+0x1264>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	701a      	strb	r2, [r3, #0]
						if (cMessage[port - 1][shift])	// request for a BOS var
 800ab6a:	0027      	movs	r7, r4
 800ab6c:	4bcc      	ldr	r3, [pc, #816]	; (800aea0 <PxMessagingTask+0x1268>)
 800ab6e:	199b      	adds	r3, r3, r6
 800ab70:	5d1b      	ldrb	r3, [r3, r4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d100      	bne.n	800ab78 <PxMessagingTask+0xf40>
 800ab76:	e10b      	b.n	800ad90 <PxMessagingTask+0x1158>
							if (cMessage[port - 1][shift] <= MAX_BOS_VARS) {
 800ab78:	2b1e      	cmp	r3, #30
 800ab7a:	d900      	bls.n	800ab7e <PxMessagingTask+0xf46>
 800ab7c:	e104      	b.n	800ad88 <PxMessagingTask+0x1150>
										- 1] >> 16) + SRAM_BASE;// Get var memory addres
 800ab7e:	1e5c      	subs	r4, r3, #1
								temp32 = (BOS_var_reg[cMessage[port - 1][shift]
 800ab80:	00a2      	lsls	r2, r4, #2
 800ab82:	4bc8      	ldr	r3, [pc, #800]	; (800aea4 <PxMessagingTask+0x126c>)
 800ab84:	58d1      	ldr	r1, [r2, r3]
										- 1] >> 16) + SRAM_BASE;// Get var memory addres
 800ab86:	0c0b      	lsrs	r3, r1, #16
								temp32 = (BOS_var_reg[cMessage[port - 1][shift]
 800ab88:	2280      	movs	r2, #128	; 0x80
 800ab8a:	0592      	lsls	r2, r2, #22
 800ab8c:	4694      	mov	ip, r2
 800ab8e:	4463      	add	r3, ip
								switch (cMessage[port - 1][1 + shift])// requested format
 800ab90:	1c7a      	adds	r2, r7, #1
 800ab92:	4690      	mov	r8, r2
 800ab94:	2038      	movs	r0, #56	; 0x38
 800ab96:	4368      	muls	r0, r5
 800ab98:	4ac1      	ldr	r2, [pc, #772]	; (800aea0 <PxMessagingTask+0x1268>)
 800ab9a:	1812      	adds	r2, r2, r0
 800ab9c:	4640      	mov	r0, r8
 800ab9e:	5c12      	ldrb	r2, [r2, r0]
 800aba0:	4691      	mov	r9, r2
 800aba2:	3a01      	subs	r2, #1
 800aba4:	b2d0      	uxtb	r0, r2
 800aba6:	2807      	cmp	r0, #7
 800aba8:	d81b      	bhi.n	800abe2 <PxMessagingTask+0xfaa>
 800abaa:	b2d2      	uxtb	r2, r2
 800abac:	0092      	lsls	r2, r2, #2
 800abae:	48be      	ldr	r0, [pc, #760]	; (800aea8 <PxMessagingTask+0x1270>)
 800abb0:	5882      	ldr	r2, [r0, r2]
 800abb2:	4697      	mov	pc, r2
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800abb4:	070a      	lsls	r2, r1, #28
 800abb6:	d109      	bne.n	800abcc <PxMessagingTask+0xf94>
										temp32 = (uint32_t) malloc(
 800abb8:	2001      	movs	r0, #1
 800abba:	f008 ff01 	bl	80139c0 <malloc>
 800abbe:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800abc0:	d00c      	beq.n	800abdc <PxMessagingTask+0xfa4>
													- 1] = ((temp32 - SRAM_BASE)
 800abc2:	00a4      	lsls	r4, r4, #2
													<< 16)
 800abc4:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800abc6:	4448      	add	r0, r9
													- 1] = ((temp32 - SRAM_BASE)
 800abc8:	4ab6      	ldr	r2, [pc, #728]	; (800aea4 <PxMessagingTask+0x126c>)
 800abca:	50a0      	str	r0, [r4, r2]
												- 1][2 + shift];
 800abcc:	2138      	movs	r1, #56	; 0x38
 800abce:	4369      	muls	r1, r5
 800abd0:	4ab3      	ldr	r2, [pc, #716]	; (800aea0 <PxMessagingTask+0x1268>)
 800abd2:	1852      	adds	r2, r2, r1
 800abd4:	19d2      	adds	r2, r2, r7
 800abd6:	7892      	ldrb	r2, [r2, #2]
										*(__IO uint8_t*) temp32 = cMessage[port
 800abd8:	701a      	strb	r2, [r3, #0]
 800abda:	e002      	b.n	800abe2 <PxMessagingTask+0xfaa>
											responseStatus =
 800abdc:	4baf      	ldr	r3, [pc, #700]	; (800ae9c <PxMessagingTask+0x1264>)
 800abde:	2212      	movs	r2, #18
 800abe0:	701a      	strb	r2, [r3, #0]
								if ((BOS_var_reg[cMessage[port - 1][shift] - 1]
 800abe2:	2338      	movs	r3, #56	; 0x38
 800abe4:	436b      	muls	r3, r5
 800abe6:	4aae      	ldr	r2, [pc, #696]	; (800aea0 <PxMessagingTask+0x1268>)
 800abe8:	18d2      	adds	r2, r2, r3
 800abea:	5dd3      	ldrb	r3, [r2, r7]
 800abec:	3b01      	subs	r3, #1
 800abee:	0098      	lsls	r0, r3, #2
 800abf0:	49ac      	ldr	r1, [pc, #688]	; (800aea4 <PxMessagingTask+0x126c>)
 800abf2:	5841      	ldr	r1, [r0, r1]
										!= cMessage[port - 1][1 + shift]) {
 800abf4:	4640      	mov	r0, r8
 800abf6:	5c12      	ldrb	r2, [r2, r0]
										& 0x000F)
 800abf8:	200f      	movs	r0, #15
 800abfa:	4008      	ands	r0, r1
								if ((BOS_var_reg[cMessage[port - 1][shift] - 1]
 800abfc:	4290      	cmp	r0, r2
 800abfe:	d009      	beq.n	800ac14 <PxMessagingTask+0xfdc>
									BOS_var_reg[cMessage[port - 1][shift] - 1] &=
 800ac00:	009b      	lsls	r3, r3, #2
													+ cMessage[port - 1][1
 800ac02:	48aa      	ldr	r0, [pc, #680]	; (800aeac <PxMessagingTask+0x1274>)
 800ac04:	4684      	mov	ip, r0
 800ac06:	4462      	add	r2, ip
									BOS_var_reg[cMessage[port - 1][shift] - 1] &=
 800ac08:	400a      	ands	r2, r1
 800ac0a:	49a6      	ldr	r1, [pc, #664]	; (800aea4 <PxMessagingTask+0x126c>)
 800ac0c:	505a      	str	r2, [r3, r1]
									responseStatus =
 800ac0e:	4ba3      	ldr	r3, [pc, #652]	; (800ae9c <PxMessagingTask+0x1264>)
 800ac10:	2214      	movs	r2, #20
 800ac12:	701a      	strb	r2, [r3, #0]
						if (BOS.response == BOS_RESPONSE_ALL
 800ac14:	4ba6      	ldr	r3, [pc, #664]	; (800aeb0 <PxMessagingTask+0x1278>)
								|| BOS.response == BOS_RESPONSE_MSG) {
 800ac16:	799b      	ldrb	r3, [r3, #6]
 800ac18:	2240      	movs	r2, #64	; 0x40
 800ac1a:	4393      	bics	r3, r2
 800ac1c:	2700      	movs	r7, #0
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d001      	beq.n	800ac26 <PxMessagingTask+0xfee>
 800ac22:	f7ff f839 	bl	8009c98 <PxMessagingTask+0x60>
							messageParams[0] = responseStatus;
 800ac26:	4b9d      	ldr	r3, [pc, #628]	; (800ae9c <PxMessagingTask+0x1264>)
 800ac28:	781a      	ldrb	r2, [r3, #0]
 800ac2a:	4ba2      	ldr	r3, [pc, #648]	; (800aeb4 <PxMessagingTask+0x127c>)
 800ac2c:	701a      	strb	r2, [r3, #0]
							SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE,
 800ac2e:	2201      	movs	r2, #1
 800ac30:	2121      	movs	r1, #33	; 0x21
 800ac32:	9804      	ldr	r0, [sp, #16]
 800ac34:	f7fe fd3c 	bl	80096b0 <SendMessageToModule>
 800ac38:	f7ff f82e 	bl	8009c98 <PxMessagingTask+0x60>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800ac3c:	070a      	lsls	r2, r1, #28
 800ac3e:	d10a      	bne.n	800ac56 <PxMessagingTask+0x101e>
										temp32 = (uint32_t) malloc(
 800ac40:	2001      	movs	r0, #1
 800ac42:	f008 febd 	bl	80139c0 <malloc>
 800ac46:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800ac48:	d100      	bne.n	800ac4c <PxMessagingTask+0x1014>
 800ac4a:	e369      	b.n	800b320 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800ac4c:	00a4      	lsls	r4, r4, #2
													<< 16)
 800ac4e:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800ac50:	3002      	adds	r0, #2
													- 1] = ((temp32 - SRAM_BASE)
 800ac52:	4a94      	ldr	r2, [pc, #592]	; (800aea4 <PxMessagingTask+0x126c>)
 800ac54:	50a0      	str	r0, [r4, r2]
												(int8_t) cMessage[port - 1][2
 800ac56:	2138      	movs	r1, #56	; 0x38
 800ac58:	4369      	muls	r1, r5
 800ac5a:	4a91      	ldr	r2, [pc, #580]	; (800aea0 <PxMessagingTask+0x1268>)
 800ac5c:	1852      	adds	r2, r2, r1
 800ac5e:	19d2      	adds	r2, r2, r7
 800ac60:	7892      	ldrb	r2, [r2, #2]
 800ac62:	b252      	sxtb	r2, r2
										*(__IO int8_t*) temp32 =
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	e7bc      	b.n	800abe2 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800ac68:	070a      	lsls	r2, r1, #28
 800ac6a:	d10a      	bne.n	800ac82 <PxMessagingTask+0x104a>
										temp32 = (uint32_t) malloc(
 800ac6c:	2002      	movs	r0, #2
 800ac6e:	f008 fea7 	bl	80139c0 <malloc>
 800ac72:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800ac74:	d100      	bne.n	800ac78 <PxMessagingTask+0x1040>
 800ac76:	e353      	b.n	800b320 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800ac78:	00a4      	lsls	r4, r4, #2
													<< 16)
 800ac7a:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800ac7c:	3003      	adds	r0, #3
													- 1] = ((temp32 - SRAM_BASE)
 800ac7e:	4a89      	ldr	r2, [pc, #548]	; (800aea4 <PxMessagingTask+0x126c>)
 800ac80:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800ac82:	2138      	movs	r1, #56	; 0x38
 800ac84:	4369      	muls	r1, r5
 800ac86:	4a86      	ldr	r2, [pc, #536]	; (800aea0 <PxMessagingTask+0x1268>)
 800ac88:	1852      	adds	r2, r2, r1
 800ac8a:	19d2      	adds	r2, r2, r7
 800ac8c:	78d1      	ldrb	r1, [r2, #3]
																<< 8);
 800ac8e:	0209      	lsls	r1, r1, #8
												((uint16_t) cMessage[port - 1][2
 800ac90:	7892      	ldrb	r2, [r2, #2]
														+ ((uint16_t) cMessage[port
 800ac92:	1852      	adds	r2, r2, r1
 800ac94:	b292      	uxth	r2, r2
										*(__IO uint16_t*) temp32 =
 800ac96:	801a      	strh	r2, [r3, #0]
 800ac98:	e7a3      	b.n	800abe2 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800ac9a:	070a      	lsls	r2, r1, #28
 800ac9c:	d10a      	bne.n	800acb4 <PxMessagingTask+0x107c>
										temp32 = (uint32_t) malloc(
 800ac9e:	2002      	movs	r0, #2
 800aca0:	f008 fe8e 	bl	80139c0 <malloc>
 800aca4:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800aca6:	d100      	bne.n	800acaa <PxMessagingTask+0x1072>
 800aca8:	e33a      	b.n	800b320 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800acaa:	00a4      	lsls	r4, r4, #2
													<< 16)
 800acac:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800acae:	3004      	adds	r0, #4
													- 1] = ((temp32 - SRAM_BASE)
 800acb0:	4a7c      	ldr	r2, [pc, #496]	; (800aea4 <PxMessagingTask+0x126c>)
 800acb2:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800acb4:	2138      	movs	r1, #56	; 0x38
 800acb6:	4369      	muls	r1, r5
 800acb8:	4a79      	ldr	r2, [pc, #484]	; (800aea0 <PxMessagingTask+0x1268>)
 800acba:	1852      	adds	r2, r2, r1
 800acbc:	19d2      	adds	r2, r2, r7
 800acbe:	78d1      	ldrb	r1, [r2, #3]
																<< 8);
 800acc0:	0209      	lsls	r1, r1, #8
												((int16_t) cMessage[port - 1][2
 800acc2:	7892      	ldrb	r2, [r2, #2]
														+ ((int16_t) cMessage[port
 800acc4:	1852      	adds	r2, r2, r1
 800acc6:	b212      	sxth	r2, r2
										*(__IO int16_t*) temp32 =
 800acc8:	801a      	strh	r2, [r3, #0]
 800acca:	e78a      	b.n	800abe2 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800accc:	070a      	lsls	r2, r1, #28
 800acce:	d10a      	bne.n	800ace6 <PxMessagingTask+0x10ae>
										temp32 = (uint32_t) malloc(
 800acd0:	2004      	movs	r0, #4
 800acd2:	f008 fe75 	bl	80139c0 <malloc>
 800acd6:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800acd8:	d100      	bne.n	800acdc <PxMessagingTask+0x10a4>
 800acda:	e321      	b.n	800b320 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800acdc:	00a4      	lsls	r4, r4, #2
													<< 16)
 800acde:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800ace0:	3005      	adds	r0, #5
													- 1] = ((temp32 - SRAM_BASE)
 800ace2:	4a70      	ldr	r2, [pc, #448]	; (800aea4 <PxMessagingTask+0x126c>)
 800ace4:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800ace6:	2238      	movs	r2, #56	; 0x38
 800ace8:	436a      	muls	r2, r5
 800acea:	496d      	ldr	r1, [pc, #436]	; (800aea0 <PxMessagingTask+0x1268>)
 800acec:	1889      	adds	r1, r1, r2
 800acee:	19c9      	adds	r1, r1, r7
														+ ((uint32_t) cMessage[port
 800acf0:	78ca      	ldrb	r2, [r1, #3]
																<< 8)
 800acf2:	0212      	lsls	r2, r2, #8
														+ ((uint32_t) cMessage[port
 800acf4:	7908      	ldrb	r0, [r1, #4]
																<< 16)
 800acf6:	0400      	lsls	r0, r0, #16
														+ ((uint32_t) cMessage[port
 800acf8:	1812      	adds	r2, r2, r0
														+ shift] << 0)
 800acfa:	7888      	ldrb	r0, [r1, #2]
														+ ((uint32_t) cMessage[port
 800acfc:	1812      	adds	r2, r2, r0
														+ ((uint32_t) cMessage[port
 800acfe:	7949      	ldrb	r1, [r1, #5]
																<< 24);
 800ad00:	0609      	lsls	r1, r1, #24
														+ ((uint32_t) cMessage[port
 800ad02:	1852      	adds	r2, r2, r1
										*(__IO uint32_t*) temp32 =
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	e76c      	b.n	800abe2 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800ad08:	070a      	lsls	r2, r1, #28
 800ad0a:	d10a      	bne.n	800ad22 <PxMessagingTask+0x10ea>
										temp32 = (uint32_t) malloc(
 800ad0c:	2004      	movs	r0, #4
 800ad0e:	f008 fe57 	bl	80139c0 <malloc>
 800ad12:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800ad14:	d100      	bne.n	800ad18 <PxMessagingTask+0x10e0>
 800ad16:	e303      	b.n	800b320 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800ad18:	00a4      	lsls	r4, r4, #2
													<< 16)
 800ad1a:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800ad1c:	3006      	adds	r0, #6
													- 1] = ((temp32 - SRAM_BASE)
 800ad1e:	4a61      	ldr	r2, [pc, #388]	; (800aea4 <PxMessagingTask+0x126c>)
 800ad20:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800ad22:	2238      	movs	r2, #56	; 0x38
 800ad24:	436a      	muls	r2, r5
 800ad26:	495e      	ldr	r1, [pc, #376]	; (800aea0 <PxMessagingTask+0x1268>)
 800ad28:	1889      	adds	r1, r1, r2
 800ad2a:	19c9      	adds	r1, r1, r7
														+ ((int32_t) cMessage[port
 800ad2c:	78ca      	ldrb	r2, [r1, #3]
																<< 8)
 800ad2e:	0212      	lsls	r2, r2, #8
														+ shift] << 0)
 800ad30:	7888      	ldrb	r0, [r1, #2]
														+ ((int32_t) cMessage[port
 800ad32:	1812      	adds	r2, r2, r0
														+ ((int32_t) cMessage[port
 800ad34:	7908      	ldrb	r0, [r1, #4]
																<< 16)
 800ad36:	0400      	lsls	r0, r0, #16
														+ ((int32_t) cMessage[port
 800ad38:	1812      	adds	r2, r2, r0
														+ ((int32_t) cMessage[port
 800ad3a:	7949      	ldrb	r1, [r1, #5]
																<< 24);
 800ad3c:	0609      	lsls	r1, r1, #24
														+ ((int32_t) cMessage[port
 800ad3e:	1852      	adds	r2, r2, r1
										*(__IO int32_t*) temp32 =
 800ad40:	601a      	str	r2, [r3, #0]
 800ad42:	e74e      	b.n	800abe2 <PxMessagingTask+0xfaa>
									if ((BOS_var_reg[cMessage[port - 1][shift]
 800ad44:	070a      	lsls	r2, r1, #28
 800ad46:	d10a      	bne.n	800ad5e <PxMessagingTask+0x1126>
										temp32 = (uint32_t) malloc(
 800ad48:	2004      	movs	r0, #4
 800ad4a:	f008 fe39 	bl	80139c0 <malloc>
 800ad4e:	1e03      	subs	r3, r0, #0
										if (temp32 != 0) {
 800ad50:	d100      	bne.n	800ad54 <PxMessagingTask+0x111c>
 800ad52:	e2e5      	b.n	800b320 <PxMessagingTask+0x16e8>
													- 1] = ((temp32 - SRAM_BASE)
 800ad54:	00a4      	lsls	r4, r4, #2
													<< 16)
 800ad56:	0400      	lsls	r0, r0, #16
													+ cMessage[port - 1][1
 800ad58:	3007      	adds	r0, #7
													- 1] = ((temp32 - SRAM_BASE)
 800ad5a:	4a52      	ldr	r2, [pc, #328]	; (800aea4 <PxMessagingTask+0x126c>)
 800ad5c:	50a0      	str	r0, [r4, r2]
																- 1][3 + shift]
 800ad5e:	2238      	movs	r2, #56	; 0x38
 800ad60:	436a      	muls	r2, r5
 800ad62:	494f      	ldr	r1, [pc, #316]	; (800aea0 <PxMessagingTask+0x1268>)
 800ad64:	1889      	adds	r1, r1, r2
 800ad66:	19c9      	adds	r1, r1, r7
														+ ((uint32_t) cMessage[port
 800ad68:	78ca      	ldrb	r2, [r1, #3]
																<< 8)
 800ad6a:	0212      	lsls	r2, r2, #8
														+ ((uint32_t) cMessage[port
 800ad6c:	7908      	ldrb	r0, [r1, #4]
																<< 16)
 800ad6e:	0400      	lsls	r0, r0, #16
														+ ((uint32_t) cMessage[port
 800ad70:	1812      	adds	r2, r2, r0
														+ shift] << 0)
 800ad72:	7888      	ldrb	r0, [r1, #2]
														+ ((uint32_t) cMessage[port
 800ad74:	1812      	adds	r2, r2, r0
														+ ((uint32_t) cMessage[port
 800ad76:	7949      	ldrb	r1, [r1, #5]
																<< 24);
 800ad78:	0609      	lsls	r1, r1, #24
														+ ((uint32_t) cMessage[port
 800ad7a:	1852      	adds	r2, r2, r1
										remoteBuffer =
 800ad7c:	494e      	ldr	r1, [pc, #312]	; (800aeb8 <PxMessagingTask+0x1280>)
 800ad7e:	600a      	str	r2, [r1, #0]
 800ad80:	2000      	movs	r0, #0
 800ad82:	6048      	str	r0, [r1, #4]
										*(float*) temp32 =
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	e72c      	b.n	800abe2 <PxMessagingTask+0xfaa>
								responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;// BOS var index out of range
 800ad88:	4b44      	ldr	r3, [pc, #272]	; (800ae9c <PxMessagingTask+0x1264>)
 800ad8a:	2213      	movs	r2, #19
 800ad8c:	701a      	strb	r2, [r3, #0]
 800ad8e:	e741      	b.n	800ac14 <PxMessagingTask+0xfdc>
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800ad90:	2238      	movs	r2, #56	; 0x38
 800ad92:	436a      	muls	r2, r5
 800ad94:	4b42      	ldr	r3, [pc, #264]	; (800aea0 <PxMessagingTask+0x1268>)
 800ad96:	189b      	adds	r3, r3, r2
 800ad98:	191b      	adds	r3, r3, r4
 800ad9a:	789c      	ldrb	r4, [r3, #2]
									<< 24)
 800ad9c:	0624      	lsls	r4, r4, #24
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800ad9e:	78da      	ldrb	r2, [r3, #3]
											<< 16)
 800ada0:	0412      	lsls	r2, r2, #16
									+ ((uint32_t) cMessage[port - 1][3 + shift]
 800ada2:	18a4      	adds	r4, r4, r2
									+ cMessage[port - 1][5 + shift];
 800ada4:	795a      	ldrb	r2, [r3, #5]
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800ada6:	18a4      	adds	r4, r4, r2
									+ ((uint32_t) cMessage[port - 1][4 + shift]
 800ada8:	791b      	ldrb	r3, [r3, #4]
											<< 8)
 800adaa:	021b      	lsls	r3, r3, #8
							temp32 = ((uint32_t) cMessage[port - 1][2 + shift]
 800adac:	18e4      	adds	r4, r4, r3
									&& temp32 < (SRAM_BASE + SRAM_SIZE))// SRAM
 800adae:	23e0      	movs	r3, #224	; 0xe0
 800adb0:	061b      	lsls	r3, r3, #24
 800adb2:	18e2      	adds	r2, r4, r3
							if (temp32 >= SRAM_BASE
 800adb4:	4b41      	ldr	r3, [pc, #260]	; (800aebc <PxMessagingTask+0x1284>)
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d900      	bls.n	800adbc <PxMessagingTask+0x1184>
 800adba:	e083      	b.n	800aec4 <PxMessagingTask+0x128c>
								switch (cMessage[port - 1][1 + shift])// Requested format
 800adbc:	2238      	movs	r2, #56	; 0x38
 800adbe:	436a      	muls	r2, r5
 800adc0:	4b37      	ldr	r3, [pc, #220]	; (800aea0 <PxMessagingTask+0x1268>)
 800adc2:	189b      	adds	r3, r3, r2
 800adc4:	19db      	adds	r3, r3, r7
 800adc6:	785b      	ldrb	r3, [r3, #1]
 800adc8:	3b01      	subs	r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	2a07      	cmp	r2, #7
 800adce:	d900      	bls.n	800add2 <PxMessagingTask+0x119a>
 800add0:	e720      	b.n	800ac14 <PxMessagingTask+0xfdc>
 800add2:	b2db      	uxtb	r3, r3
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4a3a      	ldr	r2, [pc, #232]	; (800aec0 <PxMessagingTask+0x1288>)
 800add8:	58d3      	ldr	r3, [r2, r3]
 800adda:	469f      	mov	pc, r3
											cMessage[port - 1][6 + shift];
 800addc:	2238      	movs	r2, #56	; 0x38
 800adde:	436a      	muls	r2, r5
 800ade0:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <PxMessagingTask+0x1268>)
 800ade2:	189b      	adds	r3, r3, r2
 800ade4:	19df      	adds	r7, r3, r7
 800ade6:	79bb      	ldrb	r3, [r7, #6]
									*(__IO uint8_t*) temp32 =
 800ade8:	7023      	strb	r3, [r4, #0]
									break;
 800adea:	e713      	b.n	800ac14 <PxMessagingTask+0xfdc>
											(int8_t) cMessage[port - 1][6
 800adec:	2238      	movs	r2, #56	; 0x38
 800adee:	436a      	muls	r2, r5
 800adf0:	4b2b      	ldr	r3, [pc, #172]	; (800aea0 <PxMessagingTask+0x1268>)
 800adf2:	189b      	adds	r3, r3, r2
 800adf4:	19df      	adds	r7, r3, r7
 800adf6:	2306      	movs	r3, #6
 800adf8:	56fb      	ldrsb	r3, [r7, r3]
									*(__IO int8_t*) temp32 =
 800adfa:	7023      	strb	r3, [r4, #0]
									break;
 800adfc:	e70a      	b.n	800ac14 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8);
 800adfe:	2238      	movs	r2, #56	; 0x38
 800ae00:	436a      	muls	r2, r5
 800ae02:	4b27      	ldr	r3, [pc, #156]	; (800aea0 <PxMessagingTask+0x1268>)
 800ae04:	189b      	adds	r3, r3, r2
 800ae06:	19df      	adds	r7, r3, r7
 800ae08:	79fa      	ldrb	r2, [r7, #7]
 800ae0a:	0212      	lsls	r2, r2, #8
											((uint16_t) cMessage[port - 1][6
 800ae0c:	79bb      	ldrb	r3, [r7, #6]
													+ ((uint16_t) cMessage[port
 800ae0e:	189b      	adds	r3, r3, r2
 800ae10:	b29b      	uxth	r3, r3
									*(__IO uint16_t*) temp32 =
 800ae12:	8023      	strh	r3, [r4, #0]
									break;
 800ae14:	e6fe      	b.n	800ac14 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8);
 800ae16:	2238      	movs	r2, #56	; 0x38
 800ae18:	436a      	muls	r2, r5
 800ae1a:	4b21      	ldr	r3, [pc, #132]	; (800aea0 <PxMessagingTask+0x1268>)
 800ae1c:	189b      	adds	r3, r3, r2
 800ae1e:	19df      	adds	r7, r3, r7
 800ae20:	79fa      	ldrb	r2, [r7, #7]
 800ae22:	0212      	lsls	r2, r2, #8
											((int16_t) cMessage[port - 1][6
 800ae24:	79bb      	ldrb	r3, [r7, #6]
													+ ((int16_t) cMessage[port
 800ae26:	189b      	adds	r3, r3, r2
 800ae28:	b21b      	sxth	r3, r3
									*(__IO int16_t*) temp32 =
 800ae2a:	8023      	strh	r3, [r4, #0]
									break;
 800ae2c:	e6f2      	b.n	800ac14 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8)
 800ae2e:	2238      	movs	r2, #56	; 0x38
 800ae30:	436a      	muls	r2, r5
 800ae32:	4b1b      	ldr	r3, [pc, #108]	; (800aea0 <PxMessagingTask+0x1268>)
 800ae34:	189b      	adds	r3, r3, r2
 800ae36:	19df      	adds	r7, r3, r7
													+ ((uint32_t) cMessage[port
 800ae38:	79fb      	ldrb	r3, [r7, #7]
															- 1][7 + shift] << 8)
 800ae3a:	021b      	lsls	r3, r3, #8
													+ ((uint32_t) cMessage[port
 800ae3c:	7a3a      	ldrb	r2, [r7, #8]
															<< 16)
 800ae3e:	0412      	lsls	r2, r2, #16
													+ ((uint32_t) cMessage[port
 800ae40:	189b      	adds	r3, r3, r2
													+ shift] << 0)
 800ae42:	79ba      	ldrb	r2, [r7, #6]
													+ ((uint32_t) cMessage[port
 800ae44:	189b      	adds	r3, r3, r2
													+ ((uint32_t) cMessage[port
 800ae46:	7a7a      	ldrb	r2, [r7, #9]
															<< 24);
 800ae48:	0612      	lsls	r2, r2, #24
													+ ((uint32_t) cMessage[port
 800ae4a:	189b      	adds	r3, r3, r2
									*(__IO uint32_t*) temp32 =
 800ae4c:	6023      	str	r3, [r4, #0]
									break;
 800ae4e:	e6e1      	b.n	800ac14 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8)
 800ae50:	2238      	movs	r2, #56	; 0x38
 800ae52:	436a      	muls	r2, r5
 800ae54:	4b12      	ldr	r3, [pc, #72]	; (800aea0 <PxMessagingTask+0x1268>)
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	19df      	adds	r7, r3, r7
													+ ((int32_t) cMessage[port
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
															- 1][7 + shift] << 8)
 800ae5c:	021b      	lsls	r3, r3, #8
													+ shift] << 0)
 800ae5e:	79ba      	ldrb	r2, [r7, #6]
													+ ((int32_t) cMessage[port
 800ae60:	189b      	adds	r3, r3, r2
													+ ((int32_t) cMessage[port
 800ae62:	7a3a      	ldrb	r2, [r7, #8]
															<< 16)
 800ae64:	0412      	lsls	r2, r2, #16
													+ ((int32_t) cMessage[port
 800ae66:	189b      	adds	r3, r3, r2
													+ ((int32_t) cMessage[port
 800ae68:	7a7a      	ldrb	r2, [r7, #9]
															<< 24);
 800ae6a:	0612      	lsls	r2, r2, #24
													+ ((int32_t) cMessage[port
 800ae6c:	189b      	adds	r3, r3, r2
									*(__IO int32_t*) temp32 =
 800ae6e:	6023      	str	r3, [r4, #0]
									break;
 800ae70:	e6d0      	b.n	800ac14 <PxMessagingTask+0xfdc>
															- 1][7 + shift] << 8)
 800ae72:	2238      	movs	r2, #56	; 0x38
 800ae74:	436a      	muls	r2, r5
 800ae76:	4b0a      	ldr	r3, [pc, #40]	; (800aea0 <PxMessagingTask+0x1268>)
 800ae78:	189b      	adds	r3, r3, r2
 800ae7a:	19df      	adds	r7, r3, r7
													+ ((uint32_t) cMessage[port
 800ae7c:	79fb      	ldrb	r3, [r7, #7]
															- 1][7 + shift] << 8)
 800ae7e:	021b      	lsls	r3, r3, #8
													+ ((uint32_t) cMessage[port
 800ae80:	7a3a      	ldrb	r2, [r7, #8]
															<< 16)
 800ae82:	0412      	lsls	r2, r2, #16
													+ ((uint32_t) cMessage[port
 800ae84:	189b      	adds	r3, r3, r2
													+ shift] << 0)
 800ae86:	79ba      	ldrb	r2, [r7, #6]
													+ ((uint32_t) cMessage[port
 800ae88:	189b      	adds	r3, r3, r2
													+ ((uint32_t) cMessage[port
 800ae8a:	7a7a      	ldrb	r2, [r7, #9]
															<< 24);
 800ae8c:	0612      	lsls	r2, r2, #24
													+ ((uint32_t) cMessage[port
 800ae8e:	189b      	adds	r3, r3, r2
									remoteBuffer =
 800ae90:	4a09      	ldr	r2, [pc, #36]	; (800aeb8 <PxMessagingTask+0x1280>)
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	2100      	movs	r1, #0
 800ae96:	6051      	str	r1, [r2, #4]
									*(float*) temp32 = *(float*) &remoteBuffer;
 800ae98:	6023      	str	r3, [r4, #0]
									break;
 800ae9a:	e6bb      	b.n	800ac14 <PxMessagingTask+0xfdc>
 800ae9c:	200008f8 	.word	0x200008f8
 800aea0:	20000530 	.word	0x20000530
 800aea4:	200060b4 	.word	0x200060b4
 800aea8:	0801a37c 	.word	0x0801a37c
 800aeac:	0000fff0 	.word	0x0000fff0
 800aeb0:	2000612c 	.word	0x2000612c
 800aeb4:	20000728 	.word	0x20000728
 800aeb8:	200008f0 	.word	0x200008f0
 800aebc:	00007fff 	.word	0x00007fff
 800aec0:	0801a39c 	.word	0x0801a39c
							} else if (temp32 >= FLASH_BASE
 800aec4:	4adc      	ldr	r2, [pc, #880]	; (800b238 <PxMessagingTask+0x1600>)
 800aec6:	23f8      	movs	r3, #248	; 0xf8
 800aec8:	061b      	lsls	r3, r3, #24
 800aeca:	18e3      	adds	r3, r4, r3
 800aecc:	4293      	cmp	r3, r2
 800aece:	d900      	bls.n	800aed2 <PxMessagingTask+0x129a>
 800aed0:	e0a7      	b.n	800b022 <PxMessagingTask+0x13ea>
								HAL_FLASH_Unlock();
 800aed2:	f006 fcf5 	bl	80118c0 <HAL_FLASH_Unlock>
								if (code == CODE_WRITE_REMOTE_FORCE) {
 800aed6:	4643      	mov	r3, r8
 800aed8:	2b22      	cmp	r3, #34	; 0x22
 800aeda:	d111      	bne.n	800af00 <PxMessagingTask+0x12c8>
									erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800aedc:	2300      	movs	r3, #0
 800aede:	9313      	str	r3, [sp, #76]	; 0x4c
									erase.PageAddress = temp32;
 800aee0:	9414      	str	r4, [sp, #80]	; 0x50
									erase.NbPages = 1;
 800aee2:	3301      	adds	r3, #1
 800aee4:	9315      	str	r3, [sp, #84]	; 0x54
									status = HAL_FLASHEx_Erase(&erase,
 800aee6:	a912      	add	r1, sp, #72	; 0x48
 800aee8:	a813      	add	r0, sp, #76	; 0x4c
 800aeea:	f006 fdbd 	bl	8011a68 <HAL_FLASHEx_Erase>
 800aeee:	900a      	str	r0, [sp, #40]	; 0x28
									if (status != HAL_OK
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d102      	bne.n	800aefa <PxMessagingTask+0x12c2>
											|| eraseError != 0xFFFFFFFF)
 800aef4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aef6:	3301      	adds	r3, #1
 800aef8:	d002      	beq.n	800af00 <PxMessagingTask+0x12c8>
										responseStatus =
 800aefa:	4bd0      	ldr	r3, [pc, #832]	; (800b23c <PxMessagingTask+0x1604>)
 800aefc:	2216      	movs	r2, #22
 800aefe:	701a      	strb	r2, [r3, #0]
								if (responseStatus == BOS_OK) {
 800af00:	4bce      	ldr	r3, [pc, #824]	; (800b23c <PxMessagingTask+0x1604>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d116      	bne.n	800af36 <PxMessagingTask+0x12fe>
									switch (cMessage[port - 1][1 + shift])// Requested format
 800af08:	2238      	movs	r2, #56	; 0x38
 800af0a:	436a      	muls	r2, r5
 800af0c:	4bcc      	ldr	r3, [pc, #816]	; (800b240 <PxMessagingTask+0x1608>)
 800af0e:	189b      	adds	r3, r3, r2
 800af10:	19db      	adds	r3, r3, r7
 800af12:	785b      	ldrb	r3, [r3, #1]
 800af14:	3b01      	subs	r3, #1
 800af16:	b2da      	uxtb	r2, r3
 800af18:	2a07      	cmp	r2, #7
 800af1a:	d80c      	bhi.n	800af36 <PxMessagingTask+0x12fe>
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4ac8      	ldr	r2, [pc, #800]	; (800b244 <PxMessagingTask+0x160c>)
 800af22:	58d3      	ldr	r3, [r2, r3]
 800af24:	469f      	mov	pc, r3
										if (*(__IO uint16_t*) temp32
 800af26:	8823      	ldrh	r3, [r4, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	4ac7      	ldr	r2, [pc, #796]	; (800b248 <PxMessagingTask+0x1610>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d00c      	beq.n	800af4a <PxMessagingTask+0x1312>
											responseStatus =
 800af30:	4bc2      	ldr	r3, [pc, #776]	; (800b23c <PxMessagingTask+0x1604>)
 800af32:	2216      	movs	r2, #22
 800af34:	701a      	strb	r2, [r3, #0]
								HAL_FLASH_Lock();
 800af36:	f006 fcd5 	bl	80118e4 <HAL_FLASH_Lock>
								if (status != HAL_OK)
 800af3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d100      	bne.n	800af42 <PxMessagingTask+0x130a>
 800af40:	e668      	b.n	800ac14 <PxMessagingTask+0xfdc>
									responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800af42:	4bbe      	ldr	r3, [pc, #760]	; (800b23c <PxMessagingTask+0x1604>)
 800af44:	2216      	movs	r2, #22
 800af46:	701a      	strb	r2, [r3, #0]
 800af48:	e664      	b.n	800ac14 <PxMessagingTask+0xfdc>
											remoteBuffer = cMessage[port - 1][6
 800af4a:	2238      	movs	r2, #56	; 0x38
 800af4c:	436a      	muls	r2, r5
 800af4e:	4bbc      	ldr	r3, [pc, #752]	; (800b240 <PxMessagingTask+0x1608>)
 800af50:	189b      	adds	r3, r3, r2
 800af52:	19df      	adds	r7, r3, r7
 800af54:	79ba      	ldrb	r2, [r7, #6]
 800af56:	2300      	movs	r3, #0
 800af58:	49bc      	ldr	r1, [pc, #752]	; (800b24c <PxMessagingTask+0x1614>)
 800af5a:	600a      	str	r2, [r1, #0]
 800af5c:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800af5e:	0021      	movs	r1, r4
 800af60:	2001      	movs	r0, #1
 800af62:	f006 fcf7 	bl	8011954 <HAL_FLASH_Program>
 800af66:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800af68:	e7e5      	b.n	800af36 <PxMessagingTask+0x12fe>
										if (*(__IO uint16_t*) temp32
 800af6a:	8823      	ldrh	r3, [r4, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	4ab6      	ldr	r2, [pc, #728]	; (800b248 <PxMessagingTask+0x1610>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d003      	beq.n	800af7c <PxMessagingTask+0x1344>
											responseStatus =
 800af74:	4bb1      	ldr	r3, [pc, #708]	; (800b23c <PxMessagingTask+0x1604>)
 800af76:	2216      	movs	r2, #22
 800af78:	701a      	strb	r2, [r3, #0]
											break;
 800af7a:	e7dc      	b.n	800af36 <PxMessagingTask+0x12fe>
																	- 1][7
 800af7c:	2238      	movs	r2, #56	; 0x38
 800af7e:	436a      	muls	r2, r5
 800af80:	4baf      	ldr	r3, [pc, #700]	; (800b240 <PxMessagingTask+0x1608>)
 800af82:	189b      	adds	r3, r3, r2
 800af84:	19df      	adds	r7, r3, r7
															+ ((uint16_t) cMessage[port
 800af86:	79fa      	ldrb	r2, [r7, #7]
																	<< 8);
 800af88:	0212      	lsls	r2, r2, #8
															- 1][6 + shift] << 0)
 800af8a:	79bb      	ldrb	r3, [r7, #6]
															+ ((uint16_t) cMessage[port
 800af8c:	18d2      	adds	r2, r2, r3
 800af8e:	17d3      	asrs	r3, r2, #31
											remoteBuffer =
 800af90:	49ae      	ldr	r1, [pc, #696]	; (800b24c <PxMessagingTask+0x1614>)
 800af92:	600a      	str	r2, [r1, #0]
 800af94:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800af96:	0021      	movs	r1, r4
 800af98:	2001      	movs	r0, #1
 800af9a:	f006 fcdb 	bl	8011954 <HAL_FLASH_Program>
 800af9e:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800afa0:	e7c9      	b.n	800af36 <PxMessagingTask+0x12fe>
										if (*(__IO uint32_t*) temp32
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	d003      	beq.n	800afb0 <PxMessagingTask+0x1378>
											responseStatus =
 800afa8:	4ba4      	ldr	r3, [pc, #656]	; (800b23c <PxMessagingTask+0x1604>)
 800afaa:	2216      	movs	r2, #22
 800afac:	701a      	strb	r2, [r3, #0]
											break;
 800afae:	e7c2      	b.n	800af36 <PxMessagingTask+0x12fe>
																	- 1][7
 800afb0:	2238      	movs	r2, #56	; 0x38
 800afb2:	436a      	muls	r2, r5
 800afb4:	4ba2      	ldr	r3, [pc, #648]	; (800b240 <PxMessagingTask+0x1608>)
 800afb6:	189b      	adds	r3, r3, r2
 800afb8:	19df      	adds	r7, r3, r7
															+ ((uint32_t) cMessage[port
 800afba:	79fa      	ldrb	r2, [r7, #7]
																	<< 8)
 800afbc:	0212      	lsls	r2, r2, #8
															+ ((uint32_t) cMessage[port
 800afbe:	7a3b      	ldrb	r3, [r7, #8]
																	<< 16)
 800afc0:	041b      	lsls	r3, r3, #16
															+ ((uint32_t) cMessage[port
 800afc2:	18d2      	adds	r2, r2, r3
															- 1][6 + shift] << 0)
 800afc4:	79bb      	ldrb	r3, [r7, #6]
															+ ((uint32_t) cMessage[port
 800afc6:	18d2      	adds	r2, r2, r3
															+ ((uint32_t) cMessage[port
 800afc8:	7a7b      	ldrb	r3, [r7, #9]
																	<< 24);
 800afca:	061b      	lsls	r3, r3, #24
															+ ((uint32_t) cMessage[port
 800afcc:	18d2      	adds	r2, r2, r3
 800afce:	2300      	movs	r3, #0
											remoteBuffer =
 800afd0:	499e      	ldr	r1, [pc, #632]	; (800b24c <PxMessagingTask+0x1614>)
 800afd2:	600a      	str	r2, [r1, #0]
 800afd4:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800afd6:	0021      	movs	r1, r4
 800afd8:	2002      	movs	r0, #2
 800afda:	f006 fcbb 	bl	8011954 <HAL_FLASH_Program>
 800afde:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800afe0:	e7a9      	b.n	800af36 <PxMessagingTask+0x12fe>
										if (*(__IO uint32_t*) temp32
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	d003      	beq.n	800aff0 <PxMessagingTask+0x13b8>
											responseStatus =
 800afe8:	4b94      	ldr	r3, [pc, #592]	; (800b23c <PxMessagingTask+0x1604>)
 800afea:	2216      	movs	r2, #22
 800afec:	701a      	strb	r2, [r3, #0]
											break;
 800afee:	e7a2      	b.n	800af36 <PxMessagingTask+0x12fe>
																	- 1][7
 800aff0:	2238      	movs	r2, #56	; 0x38
 800aff2:	436a      	muls	r2, r5
 800aff4:	4b92      	ldr	r3, [pc, #584]	; (800b240 <PxMessagingTask+0x1608>)
 800aff6:	189b      	adds	r3, r3, r2
 800aff8:	19df      	adds	r7, r3, r7
															+ ((uint32_t) cMessage[port
 800affa:	79fa      	ldrb	r2, [r7, #7]
																	<< 8)
 800affc:	0212      	lsls	r2, r2, #8
															+ ((uint32_t) cMessage[port
 800affe:	7a3b      	ldrb	r3, [r7, #8]
																	<< 16)
 800b000:	041b      	lsls	r3, r3, #16
															+ ((uint32_t) cMessage[port
 800b002:	18d2      	adds	r2, r2, r3
															- 1][6 + shift] << 0)
 800b004:	79bb      	ldrb	r3, [r7, #6]
															+ ((uint32_t) cMessage[port
 800b006:	18d2      	adds	r2, r2, r3
															+ ((uint32_t) cMessage[port
 800b008:	7a7b      	ldrb	r3, [r7, #9]
																	<< 24);
 800b00a:	061b      	lsls	r3, r3, #24
															+ ((uint32_t) cMessage[port
 800b00c:	18d2      	adds	r2, r2, r3
 800b00e:	2300      	movs	r3, #0
											remoteBuffer =
 800b010:	498e      	ldr	r1, [pc, #568]	; (800b24c <PxMessagingTask+0x1614>)
 800b012:	600a      	str	r2, [r1, #0]
 800b014:	604b      	str	r3, [r1, #4]
											status = HAL_FLASH_Program(
 800b016:	0021      	movs	r1, r4
 800b018:	2003      	movs	r0, #3
 800b01a:	f006 fc9b 	bl	8011954 <HAL_FLASH_Program>
 800b01e:	900a      	str	r0, [sp, #40]	; 0x28
											break;
 800b020:	e789      	b.n	800af36 <PxMessagingTask+0x12fe>
								responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b022:	4b86      	ldr	r3, [pc, #536]	; (800b23c <PxMessagingTask+0x1604>)
 800b024:	2215      	movs	r2, #21
 800b026:	701a      	strb	r2, [r3, #0]
 800b028:	e5f4      	b.n	800ac14 <PxMessagingTask+0xfdc>
						responseStatus = (BOS_Status) cMessage[port - 1][shift];
 800b02a:	4b85      	ldr	r3, [pc, #532]	; (800b240 <PxMessagingTask+0x1608>)
 800b02c:	199b      	adds	r3, r3, r6
 800b02e:	5d1a      	ldrb	r2, [r3, r4]
 800b030:	4b82      	ldr	r3, [pc, #520]	; (800b23c <PxMessagingTask+0x1604>)
 800b032:	701a      	strb	r2, [r3, #0]
						break;
 800b034:	2700      	movs	r7, #0
 800b036:	f7fe fe2f 	bl	8009c98 <PxMessagingTask+0x60>
						writePxMutex(cMessage[port - 1][shift],
 800b03a:	9a06      	ldr	r2, [sp, #24]
 800b03c:	3a01      	subs	r2, #1
 800b03e:	b292      	uxth	r2, r2
								(char*) &cMessage[port - 1][shift + 1],
 800b040:	1c61      	adds	r1, r4, #1
 800b042:	4451      	add	r1, sl
 800b044:	4b7e      	ldr	r3, [pc, #504]	; (800b240 <PxMessagingTask+0x1608>)
 800b046:	18c9      	adds	r1, r1, r3
						writePxMutex(cMessage[port - 1][shift],
 800b048:	199b      	adds	r3, r3, r6
 800b04a:	5d18      	ldrb	r0, [r3, r4]
 800b04c:	230a      	movs	r3, #10
 800b04e:	9300      	str	r3, [sp, #0]
 800b050:	f003 f840 	bl	800e0d4 <writePxMutex>
						break;
 800b054:	2700      	movs	r7, #0
 800b056:	f7fe fe1f 	bl	8009c98 <PxMessagingTask+0x60>
							 switch(cMessage[port-1][0+shift])
 800b05a:	9406      	str	r4, [sp, #24]
 800b05c:	4b78      	ldr	r3, [pc, #480]	; (800b240 <PxMessagingTask+0x1608>)
 800b05e:	199b      	adds	r3, r3, r6
 800b060:	5d18      	ldrb	r0, [r3, r4]
 800b062:	282b      	cmp	r0, #43	; 0x2b
 800b064:	d900      	bls.n	800b068 <PxMessagingTask+0x1430>
 800b066:	e0a9      	b.n	800b1bc <PxMessagingTask+0x1584>
 800b068:	0083      	lsls	r3, r0, #2
 800b06a:	4a79      	ldr	r2, [pc, #484]	; (800b250 <PxMessagingTask+0x1618>)
 800b06c:	58d3      	ldr	r3, [r2, r3]
 800b06e:	469f      	mov	pc, r3
										MBmessageParams[0] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800b070:	2338      	movs	r3, #56	; 0x38
 800b072:	436b      	muls	r3, r5
 800b074:	4f72      	ldr	r7, [pc, #456]	; (800b240 <PxMessagingTask+0x1608>)
 800b076:	18ff      	adds	r7, r7, r3
 800b078:	9b06      	ldr	r3, [sp, #24]
 800b07a:	469c      	mov	ip, r3
 800b07c:	4467      	add	r7, ip
 800b07e:	78bb      	ldrb	r3, [r7, #2]
 800b080:	021b      	lsls	r3, r3, #8
 800b082:	78fa      	ldrb	r2, [r7, #3]
 800b084:	0412      	lsls	r2, r2, #16
 800b086:	189b      	adds	r3, r3, r2
 800b088:	787a      	ldrb	r2, [r7, #1]
 800b08a:	189b      	adds	r3, r3, r2
 800b08c:	793a      	ldrb	r2, [r7, #4]
 800b08e:	0612      	lsls	r2, r2, #24
 800b090:	189b      	adds	r3, r3, r2
 800b092:	4a70      	ldr	r2, [pc, #448]	; (800b254 <PxMessagingTask+0x161c>)
 800b094:	6013      	str	r3, [r2, #0]
										MBmessageParams[1] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800b096:	79bb      	ldrb	r3, [r7, #6]
 800b098:	021b      	lsls	r3, r3, #8
 800b09a:	79f9      	ldrb	r1, [r7, #7]
 800b09c:	0409      	lsls	r1, r1, #16
 800b09e:	185b      	adds	r3, r3, r1
 800b0a0:	7979      	ldrb	r1, [r7, #5]
 800b0a2:	185b      	adds	r3, r3, r1
 800b0a4:	7a39      	ldrb	r1, [r7, #8]
 800b0a6:	0609      	lsls	r1, r1, #24
 800b0a8:	185b      	adds	r3, r3, r1
 800b0aa:	6053      	str	r3, [r2, #4]
										MBmessageParams[2] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800b0ac:	7abb      	ldrb	r3, [r7, #10]
 800b0ae:	021b      	lsls	r3, r3, #8
 800b0b0:	7af9      	ldrb	r1, [r7, #11]
 800b0b2:	0409      	lsls	r1, r1, #16
 800b0b4:	185b      	adds	r3, r3, r1
 800b0b6:	7a79      	ldrb	r1, [r7, #9]
 800b0b8:	185b      	adds	r3, r3, r1
 800b0ba:	7b39      	ldrb	r1, [r7, #12]
 800b0bc:	0609      	lsls	r1, r1, #24
 800b0be:	185b      	adds	r3, r3, r1
 800b0c0:	6093      	str	r3, [r2, #8]
									break;
 800b0c2:	e07b      	b.n	800b1bc <PxMessagingTask+0x1584>
										MBmessageParams[3] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800b0c4:	2338      	movs	r3, #56	; 0x38
 800b0c6:	436b      	muls	r3, r5
 800b0c8:	4f5d      	ldr	r7, [pc, #372]	; (800b240 <PxMessagingTask+0x1608>)
 800b0ca:	18ff      	adds	r7, r7, r3
 800b0cc:	9b06      	ldr	r3, [sp, #24]
 800b0ce:	469c      	mov	ip, r3
 800b0d0:	4467      	add	r7, ip
 800b0d2:	78bb      	ldrb	r3, [r7, #2]
 800b0d4:	021b      	lsls	r3, r3, #8
 800b0d6:	78fa      	ldrb	r2, [r7, #3]
 800b0d8:	0412      	lsls	r2, r2, #16
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	787a      	ldrb	r2, [r7, #1]
 800b0de:	189b      	adds	r3, r3, r2
 800b0e0:	793a      	ldrb	r2, [r7, #4]
 800b0e2:	0612      	lsls	r2, r2, #24
 800b0e4:	189b      	adds	r3, r3, r2
 800b0e6:	4a5b      	ldr	r2, [pc, #364]	; (800b254 <PxMessagingTask+0x161c>)
 800b0e8:	60d3      	str	r3, [r2, #12]
										MBmessageParams[4] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800b0ea:	79bb      	ldrb	r3, [r7, #6]
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	79f9      	ldrb	r1, [r7, #7]
 800b0f0:	0409      	lsls	r1, r1, #16
 800b0f2:	185b      	adds	r3, r3, r1
 800b0f4:	7979      	ldrb	r1, [r7, #5]
 800b0f6:	185b      	adds	r3, r3, r1
 800b0f8:	7a39      	ldrb	r1, [r7, #8]
 800b0fa:	0609      	lsls	r1, r1, #24
 800b0fc:	185b      	adds	r3, r3, r1
 800b0fe:	6113      	str	r3, [r2, #16]
										MBmessageParams[5] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800b100:	7abb      	ldrb	r3, [r7, #10]
 800b102:	021b      	lsls	r3, r3, #8
 800b104:	7af9      	ldrb	r1, [r7, #11]
 800b106:	0409      	lsls	r1, r1, #16
 800b108:	185b      	adds	r3, r3, r1
 800b10a:	7a79      	ldrb	r1, [r7, #9]
 800b10c:	185b      	adds	r3, r3, r1
 800b10e:	7b39      	ldrb	r1, [r7, #12]
 800b110:	0609      	lsls	r1, r1, #24
 800b112:	185b      	adds	r3, r3, r1
 800b114:	6153      	str	r3, [r2, #20]
									break;
 800b116:	e051      	b.n	800b1bc <PxMessagingTask+0x1584>
										MBmessageParams[6] = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24);
 800b118:	2338      	movs	r3, #56	; 0x38
 800b11a:	436b      	muls	r3, r5
 800b11c:	4a48      	ldr	r2, [pc, #288]	; (800b240 <PxMessagingTask+0x1608>)
 800b11e:	18d2      	adds	r2, r2, r3
 800b120:	9b06      	ldr	r3, [sp, #24]
 800b122:	469c      	mov	ip, r3
 800b124:	4462      	add	r2, ip
 800b126:	7893      	ldrb	r3, [r2, #2]
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	78d1      	ldrb	r1, [r2, #3]
 800b12c:	0409      	lsls	r1, r1, #16
 800b12e:	185b      	adds	r3, r3, r1
 800b130:	7851      	ldrb	r1, [r2, #1]
 800b132:	185b      	adds	r3, r3, r1
 800b134:	7912      	ldrb	r2, [r2, #4]
 800b136:	0612      	lsls	r2, r2, #24
 800b138:	189b      	adds	r3, r3, r2
 800b13a:	4a46      	ldr	r2, [pc, #280]	; (800b254 <PxMessagingTask+0x161c>)
 800b13c:	6193      	str	r3, [r2, #24]
						ADCPort=cMessage[port-1][shift];
 800b13e:	4b46      	ldr	r3, [pc, #280]	; (800b258 <PxMessagingTask+0x1620>)
 800b140:	8018      	strh	r0, [r3, #0]
						ADCSide=cMessage[port-1][shift+1];
 800b142:	2238      	movs	r2, #56	; 0x38
 800b144:	436a      	muls	r2, r5
 800b146:	4b3e      	ldr	r3, [pc, #248]	; (800b240 <PxMessagingTask+0x1608>)
 800b148:	189b      	adds	r3, r3, r2
 800b14a:	9a06      	ldr	r2, [sp, #24]
 800b14c:	4694      	mov	ip, r2
 800b14e:	4463      	add	r3, ip
 800b150:	785b      	ldrb	r3, [r3, #1]
 800b152:	4a42      	ldr	r2, [pc, #264]	; (800b25c <PxMessagingTask+0x1624>)
 800b154:	8013      	strh	r3, [r2, #0]
						if(0==ADCSide){
 800b156:	2b00      	cmp	r3, #0
 800b158:	d146      	bne.n	800b1e8 <PxMessagingTask+0x15b0>
						ADCSelectChannel(ADCPort,"top");
 800b15a:	4f41      	ldr	r7, [pc, #260]	; (800b260 <PxMessagingTask+0x1628>)
 800b15c:	0039      	movs	r1, r7
 800b15e:	f7fd fca9 	bl	8008ab4 <ADCSelectChannel>
						ReadADCChannel(ADCPort,"top",&ADCValue);}
 800b162:	4b3d      	ldr	r3, [pc, #244]	; (800b258 <PxMessagingTask+0x1620>)
 800b164:	7818      	ldrb	r0, [r3, #0]
 800b166:	4a3f      	ldr	r2, [pc, #252]	; (800b264 <PxMessagingTask+0x162c>)
 800b168:	0039      	movs	r1, r7
 800b16a:	f7fd fcd1 	bl	8008b10 <ReadADCChannel>
						ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b16e:	493e      	ldr	r1, [pc, #248]	; (800b268 <PxMessagingTask+0x1630>)
 800b170:	483e      	ldr	r0, [pc, #248]	; (800b26c <PxMessagingTask+0x1634>)
 800b172:	f7fd fb2f 	bl	80087d4 <ReadTempAndVref>
						ADCPort=cMessage[port-1][shift];
 800b176:	4f32      	ldr	r7, [pc, #200]	; (800b240 <PxMessagingTask+0x1608>)
 800b178:	19bf      	adds	r7, r7, r6
 800b17a:	9b06      	ldr	r3, [sp, #24]
 800b17c:	5cf8      	ldrb	r0, [r7, r3]
 800b17e:	4b36      	ldr	r3, [pc, #216]	; (800b258 <PxMessagingTask+0x1620>)
 800b180:	8018      	strh	r0, [r3, #0]
						GetReadPrecentage(ADCPort,&ADCPercentage);
 800b182:	493b      	ldr	r1, [pc, #236]	; (800b270 <PxMessagingTask+0x1638>)
 800b184:	f7fd fbd0 	bl	8008928 <GetReadPrecentage>
										MBmessageParams[7] = ((uint32_t)cMessage[port-1][5+shift]<<0) + ((uint32_t)cMessage[port-1][6+shift]<<8) + ((uint32_t)cMessage[port-1][7+shift]<<16) + ((uint32_t)cMessage[port-1][8+shift]<<24);
 800b188:	9b06      	ldr	r3, [sp, #24]
 800b18a:	469c      	mov	ip, r3
 800b18c:	4467      	add	r7, ip
 800b18e:	79bb      	ldrb	r3, [r7, #6]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	79fa      	ldrb	r2, [r7, #7]
 800b194:	0412      	lsls	r2, r2, #16
 800b196:	189b      	adds	r3, r3, r2
 800b198:	797a      	ldrb	r2, [r7, #5]
 800b19a:	189b      	adds	r3, r3, r2
 800b19c:	7a3a      	ldrb	r2, [r7, #8]
 800b19e:	0612      	lsls	r2, r2, #24
 800b1a0:	189b      	adds	r3, r3, r2
 800b1a2:	4a2c      	ldr	r2, [pc, #176]	; (800b254 <PxMessagingTask+0x161c>)
 800b1a4:	61d3      	str	r3, [r2, #28]
										MBmessageParams[8] = ((uint32_t)cMessage[port-1][9+shift]<<0) + ((uint32_t)cMessage[port-1][10+shift]<<8) + ((uint32_t)cMessage[port-1][11+shift]<<16) + ((uint32_t)cMessage[port-1][12+shift]<<24);
 800b1a6:	7abb      	ldrb	r3, [r7, #10]
 800b1a8:	021b      	lsls	r3, r3, #8
 800b1aa:	7af9      	ldrb	r1, [r7, #11]
 800b1ac:	0409      	lsls	r1, r1, #16
 800b1ae:	185b      	adds	r3, r3, r1
 800b1b0:	7a79      	ldrb	r1, [r7, #9]
 800b1b2:	185b      	adds	r3, r3, r1
 800b1b4:	7b39      	ldrb	r1, [r7, #12]
 800b1b6:	0609      	lsls	r1, r1, #24
 800b1b8:	185b      	adds	r3, r3, r1
 800b1ba:	6213      	str	r3, [r2, #32]
						result = (BOS_Status) User_MessagingParser(code, port,
 800b1bc:	9400      	str	r4, [sp, #0]
 800b1be:	464b      	mov	r3, r9
 800b1c0:	9a04      	ldr	r2, [sp, #16]
 800b1c2:	9908      	ldr	r1, [sp, #32]
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	f7fe fd35 	bl	8009c34 <User_MessagingParser>
 800b1ca:	0007      	movs	r7, r0
						if (result == BOS_ERR_UnknownMessage) {
 800b1cc:	2801      	cmp	r0, #1
 800b1ce:	d001      	beq.n	800b1d4 <PxMessagingTask+0x159c>
 800b1d0:	f7fe fd62 	bl	8009c98 <PxMessagingTask+0x60>
							result = (BOS_Status) Module_MessagingTask(code,
 800b1d4:	9400      	str	r4, [sp, #0]
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	9a04      	ldr	r2, [sp, #16]
 800b1da:	9908      	ldr	r1, [sp, #32]
 800b1dc:	4640      	mov	r0, r8
 800b1de:	f000 fe0b 	bl	800bdf8 <Module_MessagingTask>
 800b1e2:	0007      	movs	r7, r0
 800b1e4:	f7fe fd54 	bl	8009c90 <PxMessagingTask+0x58>
						else if (1==ADCSide){
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d1c0      	bne.n	800b16e <PxMessagingTask+0x1536>
							ADCSelectChannel(ADCPort,"bottom");
 800b1ec:	4f21      	ldr	r7, [pc, #132]	; (800b274 <PxMessagingTask+0x163c>)
 800b1ee:	0039      	movs	r1, r7
 800b1f0:	f7fd fc60 	bl	8008ab4 <ADCSelectChannel>
							ReadADCChannel(ADCPort,"bottom",&ADCValue);}
 800b1f4:	4b18      	ldr	r3, [pc, #96]	; (800b258 <PxMessagingTask+0x1620>)
 800b1f6:	7818      	ldrb	r0, [r3, #0]
 800b1f8:	4a1a      	ldr	r2, [pc, #104]	; (800b264 <PxMessagingTask+0x162c>)
 800b1fa:	0039      	movs	r1, r7
 800b1fc:	f7fd fc88 	bl	8008b10 <ReadADCChannel>
 800b200:	e7b5      	b.n	800b16e <PxMessagingTask+0x1536>
							switch (cMessage[port - 1][1 + shift])// requested format
 800b202:	2700      	movs	r7, #0
 800b204:	f7fe fd44 	bl	8009c90 <PxMessagingTask+0x58>
								switch (messageParams[0])	// requested format
 800b208:	2700      	movs	r7, #0
 800b20a:	f7fe fd41 	bl	8009c90 <PxMessagingTask+0x58>
								switch (messageParams[0])	// requested format
 800b20e:	2700      	movs	r7, #0
 800b210:	f7fe fd3e 	bl	8009c90 <PxMessagingTask+0x58>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800b214:	2200      	movs	r2, #0
 800b216:	2100      	movs	r1, #0
 800b218:	9804      	ldr	r0, [sp, #16]
 800b21a:	f7fe fa49 	bl	80096b0 <SendMessageToModule>
			result = BOS_OK;
 800b21e:	2700      	movs	r7, #0
 800b220:	f7fe fd3a 	bl	8009c98 <PxMessagingTask+0x60>
					switch (code) {
 800b224:	2700      	movs	r7, #0
 800b226:	f7fe fd37 	bl	8009c98 <PxMessagingTask+0x60>
 800b22a:	9205      	str	r2, [sp, #20]
 800b22c:	2700      	movs	r7, #0
 800b22e:	f7fe fd33 	bl	8009c98 <PxMessagingTask+0x60>
 800b232:	2700      	movs	r7, #0
 800b234:	f7fe fd30 	bl	8009c98 <PxMessagingTask+0x60>
 800b238:	0001ffff 	.word	0x0001ffff
 800b23c:	200008f8 	.word	0x200008f8
 800b240:	20000530 	.word	0x20000530
 800b244:	0801a3bc 	.word	0x0801a3bc
 800b248:	0000ffff 	.word	0x0000ffff
 800b24c:	200008f0 	.word	0x200008f0
 800b250:	0801a3dc 	.word	0x0801a3dc
 800b254:	20000d4c 	.word	0x20000d4c
 800b258:	20000d3c 	.word	0x20000d3c
 800b25c:	20000d3e 	.word	0x20000d3e
 800b260:	0801839c 	.word	0x0801839c
 800b264:	20000d40 	.word	0x20000d40
 800b268:	20000d48 	.word	0x20000d48
 800b26c:	20000d44 	.word	0x20000d44
 800b270:	20000d38 	.word	0x20000d38
 800b274:	080183a0 	.word	0x080183a0
					|| (dst && (dst < BOS_MULTICAST) && (dst != myID)
 800b278:	454b      	cmp	r3, r9
 800b27a:	d004      	beq.n	800b286 <PxMessagingTask+0x164e>
							&& (myID == 1) && (code != CODE_MODULE_ID))) {
 800b27c:	4643      	mov	r3, r8
 800b27e:	2b10      	cmp	r3, #16
 800b280:	d001      	beq.n	800b286 <PxMessagingTask+0x164e>
 800b282:	f7fe fd5c 	bl	8009d3e <PxMessagingTask+0x106>
				if (dst == BOS_BROADCAST
 800b286:	464b      	mov	r3, r9
 800b288:	2bff      	cmp	r3, #255	; 0xff
 800b28a:	d101      	bne.n	800b290 <PxMessagingTask+0x1658>
 800b28c:	f7fe fd79 	bl	8009d82 <PxMessagingTask+0x14a>
				if (dst == BOS_MULTICAST
 800b290:	2bfe      	cmp	r3, #254	; 0xfe
 800b292:	d001      	beq.n	800b298 <PxMessagingTask+0x1660>
 800b294:	f7fe fd7f 	bl	8009d96 <PxMessagingTask+0x15e>
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 800b298:	4b29      	ldr	r3, [pc, #164]	; (800b340 <PxMessagingTask+0x1708>)
 800b29a:	199b      	adds	r3, r3, r6
 800b29c:	1859      	adds	r1, r3, r1
 800b29e:	3901      	subs	r1, #1
 800b2a0:	780b      	ldrb	r3, [r1, #0]
								!= bcastLastID) {
 800b2a2:	4a28      	ldr	r2, [pc, #160]	; (800b344 <PxMessagingTask+0x170c>)
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 800b2a4:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 800b2a6:	2703      	movs	r7, #3
						&& cMessage[port - 1][messageLength[port - 1] - 1]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d101      	bne.n	800b2b0 <PxMessagingTask+0x1678>
 800b2ac:	f7fe fcf0 	bl	8009c90 <PxMessagingTask+0x58>
					bcastID = bcastLastID =
 800b2b0:	4a24      	ldr	r2, [pc, #144]	; (800b344 <PxMessagingTask+0x170c>)
 800b2b2:	7013      	strb	r3, [r2, #0]
 800b2b4:	4a24      	ldr	r2, [pc, #144]	; (800b348 <PxMessagingTask+0x1710>)
 800b2b6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 800b2b8:	9908      	ldr	r1, [sp, #32]
 800b2ba:	20fe      	movs	r0, #254	; 0xfe
 800b2bc:	f7fe f9b0 	bl	8009620 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] = 0;// Reset bcastID location 
 800b2c0:	4b22      	ldr	r3, [pc, #136]	; (800b34c <PxMessagingTask+0x1714>)
 800b2c2:	5d59      	ldrb	r1, [r3, r5]
 800b2c4:	4b1e      	ldr	r3, [pc, #120]	; (800b340 <PxMessagingTask+0x1708>)
 800b2c6:	199b      	adds	r3, r3, r6
 800b2c8:	185a      	adds	r2, r3, r1
 800b2ca:	3a01      	subs	r2, #1
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port - 1][messageLength[port - 1] - 2];	// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b2d0:	1e8a      	subs	r2, r1, #2
 800b2d2:	5c9c      	ldrb	r4, [r3, r2]
 800b2d4:	9405      	str	r4, [sp, #20]
					for (i = 0; i < temp; i++) {
 800b2d6:	2c00      	cmp	r4, #0
 800b2d8:	d02e      	beq.n	800b338 <PxMessagingTask+0x1700>
										- 2 - temp + i]) {
 800b2da:	1b13      	subs	r3, r2, r4
 800b2dc:	469c      	mov	ip, r3
								== cMessage[port - 1][messageLength[port - 1]
 800b2de:	4b1c      	ldr	r3, [pc, #112]	; (800b350 <PxMessagingTask+0x1718>)
 800b2e0:	7818      	ldrb	r0, [r3, #0]
 800b2e2:	4b17      	ldr	r3, [pc, #92]	; (800b340 <PxMessagingTask+0x1708>)
 800b2e4:	199b      	adds	r3, r3, r6
						if (myID
 800b2e6:	4662      	mov	r2, ip
 800b2e8:	5c9b      	ldrb	r3, [r3, r2]
 800b2ea:	4283      	cmp	r3, r0
 800b2ec:	d011      	beq.n	800b312 <PxMessagingTask+0x16da>
 800b2ee:	4653      	mov	r3, sl
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	4463      	add	r3, ip
 800b2f4:	4a12      	ldr	r2, [pc, #72]	; (800b340 <PxMessagingTask+0x1708>)
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	4452      	add	r2, sl
 800b2fc:	1e67      	subs	r7, r4, #1
 800b2fe:	b2ff      	uxtb	r7, r7
 800b300:	19d2      	adds	r2, r2, r7
 800b302:	4462      	add	r2, ip
					for (i = 0; i < temp; i++) {
 800b304:	4293      	cmp	r3, r2
 800b306:	d017      	beq.n	800b338 <PxMessagingTask+0x1700>
 800b308:	3301      	adds	r3, #1
								== cMessage[port - 1][messageLength[port - 1]
 800b30a:	1e5c      	subs	r4, r3, #1
						if (myID
 800b30c:	7824      	ldrb	r4, [r4, #0]
 800b30e:	4284      	cmp	r4, r0
 800b310:	d1f8      	bne.n	800b304 <PxMessagingTask+0x16cc>
				shift += 4;
 800b312:	9c06      	ldr	r4, [sp, #24]
 800b314:	3404      	adds	r4, #4
				numOfParams = messageLength[port - 1] - shift;
 800b316:	1b0a      	subs	r2, r1, r4
 800b318:	b2d3      	uxtb	r3, r2
 800b31a:	9306      	str	r3, [sp, #24]
 800b31c:	f7fe fd45 	bl	8009daa <PxMessagingTask+0x172>
								if ((BOS_var_reg[cMessage[port - 1][shift] - 1]
 800b320:	2338      	movs	r3, #56	; 0x38
 800b322:	436b      	muls	r3, r5
 800b324:	4a06      	ldr	r2, [pc, #24]	; (800b340 <PxMessagingTask+0x1708>)
 800b326:	18d2      	adds	r2, r2, r3
 800b328:	5dd3      	ldrb	r3, [r2, r7]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	0098      	lsls	r0, r3, #2
 800b32e:	4909      	ldr	r1, [pc, #36]	; (800b354 <PxMessagingTask+0x171c>)
 800b330:	5841      	ldr	r1, [r0, r1]
										!= cMessage[port - 1][1 + shift]) {
 800b332:	4640      	mov	r0, r8
 800b334:	5c12      	ldrb	r2, [r2, r0]
 800b336:	e463      	b.n	800ac00 <PxMessagingTask+0xfc8>
								responseStatus = BOS_ERR_REMOTE_READ_NO_VAR;
 800b338:	2766      	movs	r7, #102	; 0x66
 800b33a:	f7fe fcad 	bl	8009c98 <PxMessagingTask+0x60>
 800b33e:	46c0      	nop			; (mov r8, r8)
 800b340:	20000530 	.word	0x20000530
 800b344:	20000d72 	.word	0x20000d72
 800b348:	200004dc 	.word	0x200004dc
 800b34c:	20000720 	.word	0x20000720
 800b350:	20000866 	.word	0x20000866
 800b354:	200060b4 	.word	0x200060b4

0800b358 <unitCommand>:
 |															Commands																 	|
 -----------------------------------------------------------------------
 */

static portBASE_TYPE unitCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800b358:	b510      	push	{r4, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	0004      	movs	r4, r0
 800b35e:	0010      	movs	r0, r2
	Module_Status result = H2AR3_OK;
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	9301      	str	r3, [sp, #4]

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b364:	2c00      	cmp	r4, #0
 800b366:	d101      	bne.n	800b36c <unitCommand+0x14>
 800b368:	b672      	cpsid	i
 800b36a:	e7fe      	b.n	800b36a <unitCommand+0x12>

	/* 1st parameter for naming of uart port: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800b36c:	aa01      	add	r2, sp, #4
 800b36e:	2101      	movs	r1, #1
 800b370:	f003 f8f6 	bl	800e560 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 800b374:	7803      	ldrb	r3, [r0, #0]
 800b376:	2b76      	cmp	r3, #118	; 0x76
 800b378:	d009      	beq.n	800b38e <unitCommand+0x36>
		unit = Volt;
		strcpy((char*) pcWriteBuffer,
				(char*) "Used measurement unit: Volt\r\n");
	} else if (!strncmp((const char*) pcParameterString1, "a", 1)) {
 800b37a:	2b61      	cmp	r3, #97	; 0x61
 800b37c:	d010      	beq.n	800b3a0 <unitCommand+0x48>
		result = H2AR3_ERR_WrongParams;
	}

	/* Respond to the command */
	if (H2AR3_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 800b37e:	2213      	movs	r2, #19
 800b380:	490c      	ldr	r1, [pc, #48]	; (800b3b4 <unitCommand+0x5c>)
 800b382:	0020      	movs	r0, r4
 800b384:	f008 fb51 	bl	8013a2a <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800b388:	2000      	movs	r0, #0
 800b38a:	b002      	add	sp, #8
 800b38c:	bd10      	pop	{r4, pc}
		unit = Volt;
 800b38e:	4b0a      	ldr	r3, [pc, #40]	; (800b3b8 <unitCommand+0x60>)
 800b390:	2201      	movs	r2, #1
 800b392:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 800b394:	321d      	adds	r2, #29
 800b396:	4909      	ldr	r1, [pc, #36]	; (800b3bc <unitCommand+0x64>)
 800b398:	0020      	movs	r0, r4
 800b39a:	f008 fb46 	bl	8013a2a <memcpy>
 800b39e:	e7f3      	b.n	800b388 <unitCommand+0x30>
		unit = Amp;
 800b3a0:	4b05      	ldr	r3, [pc, #20]	; (800b3b8 <unitCommand+0x60>)
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 800b3a6:	321e      	adds	r2, #30
 800b3a8:	4905      	ldr	r1, [pc, #20]	; (800b3c0 <unitCommand+0x68>)
 800b3aa:	0020      	movs	r0, r4
 800b3ac:	f008 fb3d 	bl	8013a2a <memcpy>
 800b3b0:	e7ea      	b.n	800b388 <unitCommand+0x30>
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	08018d48 	.word	0x08018d48
 800b3b8:	20000094 	.word	0x20000094
 800b3bc:	0801a7d4 	.word	0x0801a7d4
 800b3c0:	0801a7f4 	.word	0x0801a7f4

0800b3c4 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b3c8:	4b12      	ldr	r3, [pc, #72]	; (800b414 <CheckForEnterKey+0x50>)
 800b3ca:	781c      	ldrb	r4, [r3, #0]
 800b3cc:	3c01      	subs	r4, #1
 800b3ce:	01a2      	lsls	r2, r4, #6
 800b3d0:	4b11      	ldr	r3, [pc, #68]	; (800b418 <CheckForEnterKey+0x54>)
 800b3d2:	5cd3      	ldrb	r3, [r2, r3]
 800b3d4:	2b0d      	cmp	r3, #13
 800b3d6:	d00a      	beq.n	800b3ee <CheckForEnterKey+0x2a>
 800b3d8:	490f      	ldr	r1, [pc, #60]	; (800b418 <CheckForEnterKey+0x54>)
 800b3da:	1851      	adds	r1, r2, r1
 800b3dc:	2301      	movs	r3, #1
 800b3de:	0018      	movs	r0, r3
 800b3e0:	5cca      	ldrb	r2, [r1, r3]
 800b3e2:	2a0d      	cmp	r2, #13
 800b3e4:	d004      	beq.n	800b3f0 <CheckForEnterKey+0x2c>
 800b3e6:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800b3e8:	2b40      	cmp	r3, #64	; 0x40
 800b3ea:	d1f8      	bne.n	800b3de <CheckForEnterKey+0x1a>
 800b3ec:	e010      	b.n	800b410 <CheckForEnterKey+0x4c>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800b3ee:	2000      	movs	r0, #0
			UARTRxBuf[PcPort - 1][chr] = 0;
 800b3f0:	01a4      	lsls	r4, r4, #6
 800b3f2:	4b09      	ldr	r3, [pc, #36]	; (800b418 <CheckForEnterKey+0x54>)
 800b3f4:	191c      	adds	r4, r3, r4
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800b3fa:	4a08      	ldr	r2, [pc, #32]	; (800b41c <CheckForEnterKey+0x58>)
 800b3fc:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 800b3fe:	4a08      	ldr	r2, [pc, #32]	; (800b420 <CheckForEnterKey+0x5c>)
 800b400:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 800b402:	4a08      	ldr	r2, [pc, #32]	; (800b424 <CheckForEnterKey+0x60>)
 800b404:	6810      	ldr	r0, [r2, #0]
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	2200      	movs	r2, #0
 800b40a:	2103      	movs	r1, #3
 800b40c:	f004 fc9e 	bl	800fd4c <xTimerGenericCommand>
}
 800b410:	b002      	add	sp, #8
 800b412:	bd10      	pop	{r4, pc}
 800b414:	2000029f 	.word	0x2000029f
 800b418:	20000ab8 	.word	0x20000ab8
 800b41c:	20000f24 	.word	0x20000f24
 800b420:	200062c4 	.word	0x200062c4
 800b424:	20000f2c 	.word	0x20000f2c

0800b428 <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 800b428:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 800b42a:	f004 fdcb 	bl	800ffc4 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800b42e:	28ff      	cmp	r0, #255	; 0xff
 800b430:	d000      	beq.n	800b434 <HandleTimeout+0xc>
}
 800b432:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 800b434:	2300      	movs	r3, #0
 800b436:	4a02      	ldr	r2, [pc, #8]	; (800b440 <HandleTimeout+0x18>)
 800b438:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 800b43a:	4a02      	ldr	r2, [pc, #8]	; (800b444 <HandleTimeout+0x1c>)
 800b43c:	7013      	strb	r3, [r2, #0]
}
 800b43e:	e7f8      	b.n	800b432 <HandleTimeout+0xa>
 800b440:	200062c4 	.word	0x200062c4
 800b444:	20000f24 	.word	0x20000f24

0800b448 <SystemClock_Config>:
void SystemClock_Config(void) {
 800b448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b44a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b44c:	2401      	movs	r4, #1
 800b44e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b450:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b452:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800b454:	2310      	movs	r3, #16
 800b456:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b458:	2702      	movs	r7, #2
 800b45a:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b45c:	2680      	movs	r6, #128	; 0x80
 800b45e:	0276      	lsls	r6, r6, #9
 800b460:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b462:	2380      	movs	r3, #128	; 0x80
 800b464:	035b      	lsls	r3, r3, #13
 800b466:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b468:	2500      	movs	r5, #0
 800b46a:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b46c:	a80d      	add	r0, sp, #52	; 0x34
 800b46e:	f006 fce5 	bl	8011e3c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800b472:	2307      	movs	r3, #7
 800b474:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b476:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b478:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b47a:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b47c:	2101      	movs	r1, #1
 800b47e:	a809      	add	r0, sp, #36	; 0x24
 800b480:	f006 ff9e 	bl	80123c0 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800b484:	4b1a      	ldr	r3, [pc, #104]	; (800b4f0 <SystemClock_Config+0xa8>)
 800b486:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b488:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b48a:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b48c:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b48e:	a802      	add	r0, sp, #8
 800b490:	f007 f944 	bl	801271c <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b494:	4d17      	ldr	r5, [pc, #92]	; (800b4f4 <SystemClock_Config+0xac>)
 800b496:	69ea      	ldr	r2, [r5, #28]
 800b498:	2180      	movs	r1, #128	; 0x80
 800b49a:	0549      	lsls	r1, r1, #21
 800b49c:	430a      	orrs	r2, r1
 800b49e:	61ea      	str	r2, [r5, #28]
 800b4a0:	69eb      	ldr	r3, [r5, #28]
 800b4a2:	400b      	ands	r3, r1
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800b4a8:	f006 fcbe 	bl	8011e28 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b4ac:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b4ae:	23c0      	movs	r3, #192	; 0xc0
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b4b4:	a802      	add	r0, sp, #8
 800b4b6:	f007 f931 	bl	801271c <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800b4ba:	f007 f90b 	bl	80126d4 <HAL_RCC_GetHCLKFreq>
 800b4be:	21fa      	movs	r1, #250	; 0xfa
 800b4c0:	0089      	lsls	r1, r1, #2
 800b4c2:	f7f4 fe3b 	bl	800013c <__udivsi3>
 800b4c6:	f005 fbad 	bl	8010c24 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b4ca:	2004      	movs	r0, #4
 800b4cc:	f005 fbc6 	bl	8010c5c <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800b4d0:	69ab      	ldr	r3, [r5, #24]
 800b4d2:	4323      	orrs	r3, r4
 800b4d4:	61ab      	str	r3, [r5, #24]
 800b4d6:	69ab      	ldr	r3, [r5, #24]
 800b4d8:	401c      	ands	r4, r3
 800b4da:	9401      	str	r4, [sp, #4]
 800b4dc:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b4de:	2001      	movs	r0, #1
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	4240      	negs	r0, r0
 800b4e6:	f005 fb55 	bl	8010b94 <HAL_NVIC_SetPriority>
}
 800b4ea:	b01b      	add	sp, #108	; 0x6c
 800b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ee:	46c0      	nop			; (mov r8, r8)
 800b4f0:	00040003 	.word	0x00040003
 800b4f4:	40021000 	.word	0x40021000

0800b4f8 <SaveToRO>:
uint8_t SaveToRO(void) {
 800b4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4fa:	46de      	mov	lr, fp
 800b4fc:	4657      	mov	r7, sl
 800b4fe:	464e      	mov	r6, r9
 800b500:	4645      	mov	r5, r8
 800b502:	b5e0      	push	{r5, r6, r7, lr}
 800b504:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800b506:	2215      	movs	r2, #21
 800b508:	2100      	movs	r1, #0
 800b50a:	a802      	add	r0, sp, #8
 800b50c:	f008 fa96 	bl	8013a3c <memset>
	HAL_FLASH_Unlock();
 800b510:	f006 f9d6 	bl	80118c0 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800b514:	4872      	ldr	r0, [pc, #456]	; (800b6e0 <SaveToRO+0x1e8>)
 800b516:	f006 fa95 	bl	8011a44 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800b51a:	4872      	ldr	r0, [pc, #456]	; (800b6e4 <SaveToRO+0x1ec>)
 800b51c:	f006 f9ec 	bl	80118f8 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800b520:	2800      	cmp	r0, #0
 800b522:	d112      	bne.n	800b54a <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b524:	4a70      	ldr	r2, [pc, #448]	; (800b6e8 <SaveToRO+0x1f0>)
 800b526:	6913      	ldr	r3, [r2, #16]
 800b528:	2102      	movs	r1, #2
 800b52a:	438b      	bics	r3, r1
 800b52c:	6113      	str	r3, [r2, #16]
	if (myID) {
 800b52e:	4b6f      	ldr	r3, [pc, #444]	; (800b6ec <SaveToRO+0x1f4>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d113      	bne.n	800b55e <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b536:	4b6e      	ldr	r3, [pc, #440]	; (800b6f0 <SaveToRO+0x1f8>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d100      	bne.n	800b540 <SaveToRO+0x48>
 800b53e:	e0ca      	b.n	800b6d6 <SaveToRO+0x1de>
 800b540:	2500      	movs	r5, #0
 800b542:	4c6c      	ldr	r4, [pc, #432]	; (800b6f4 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) {
 800b544:	4b6c      	ldr	r3, [pc, #432]	; (800b6f8 <SaveToRO+0x200>)
 800b546:	4698      	mov	r8, r3
 800b548:	e06e      	b.n	800b628 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800b54a:	4b6c      	ldr	r3, [pc, #432]	; (800b6fc <SaveToRO+0x204>)
 800b54c:	69d8      	ldr	r0, [r3, #28]
 800b54e:	b2c0      	uxtb	r0, r0
}
 800b550:	b009      	add	sp, #36	; 0x24
 800b552:	bc3c      	pop	{r2, r3, r4, r5}
 800b554:	4690      	mov	r8, r2
 800b556:	4699      	mov	r9, r3
 800b558:	46a2      	mov	sl, r4
 800b55a:	46ab      	mov	fp, r5
 800b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800b55e:	4a68      	ldr	r2, [pc, #416]	; (800b700 <SaveToRO+0x208>)
 800b560:	7812      	ldrb	r2, [r2, #0]
 800b562:	0212      	lsls	r2, r2, #8
 800b564:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800b566:	b292      	uxth	r2, r2
 800b568:	2300      	movs	r3, #0
 800b56a:	495d      	ldr	r1, [pc, #372]	; (800b6e0 <SaveToRO+0x1e8>)
 800b56c:	2001      	movs	r0, #1
 800b56e:	f006 f9f1 	bl	8011954 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800b572:	485c      	ldr	r0, [pc, #368]	; (800b6e4 <SaveToRO+0x1ec>)
 800b574:	f006 f9c0 	bl	80118f8 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800b578:	2800      	cmp	r0, #0
 800b57a:	d111      	bne.n	800b5a0 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b57c:	4a5a      	ldr	r2, [pc, #360]	; (800b6e8 <SaveToRO+0x1f0>)
 800b57e:	6913      	ldr	r3, [r2, #16]
 800b580:	2101      	movs	r1, #1
 800b582:	438b      	bics	r3, r1
 800b584:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800b586:	4b5e      	ldr	r3, [pc, #376]	; (800b700 <SaveToRO+0x208>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2201      	movs	r2, #1
 800b58c:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800b58e:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0d0      	beq.n	800b536 <SaveToRO+0x3e>
 800b594:	2316      	movs	r3, #22
 800b596:	469b      	mov	fp, r3
 800b598:	4b5a      	ldr	r3, [pc, #360]	; (800b704 <SaveToRO+0x20c>)
 800b59a:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 800b59c:	4698      	mov	r8, r3
 800b59e:	e02a      	b.n	800b5f6 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800b5a0:	4b56      	ldr	r3, [pc, #344]	; (800b6fc <SaveToRO+0x204>)
 800b5a2:	69d8      	ldr	r0, [r3, #28]
 800b5a4:	b2c0      	uxtb	r0, r0
 800b5a6:	e7d3      	b.n	800b550 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800b5a8:	4b54      	ldr	r3, [pc, #336]	; (800b6fc <SaveToRO+0x204>)
 800b5aa:	69d8      	ldr	r0, [r3, #28]
 800b5ac:	b2c0      	uxtb	r0, r0
 800b5ae:	e7cf      	b.n	800b550 <SaveToRO+0x58>
 800b5b0:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800b5b2:	42b4      	cmp	r4, r6
 800b5b4:	d017      	beq.n	800b5e6 <SaveToRO+0xee>
				if (array[i - 1][0]) {
 800b5b6:	4643      	mov	r3, r8
 800b5b8:	5afb      	ldrh	r3, [r7, r3]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0f8      	beq.n	800b5b0 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800b5be:	8822      	ldrh	r2, [r4, #0]
 800b5c0:	4b47      	ldr	r3, [pc, #284]	; (800b6e0 <SaveToRO+0x1e8>)
 800b5c2:	18e9      	adds	r1, r5, r3
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	f006 f9c4 	bl	8011954 <HAL_FLASH_Program>
					add += 2;
 800b5cc:	3502      	adds	r5, #2
 800b5ce:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800b5d0:	4844      	ldr	r0, [pc, #272]	; (800b6e4 <SaveToRO+0x1ec>)
 800b5d2:	f006 f991 	bl	80118f8 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1e6      	bne.n	800b5a8 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b5da:	4a43      	ldr	r2, [pc, #268]	; (800b6e8 <SaveToRO+0x1f0>)
 800b5dc:	6913      	ldr	r3, [r2, #16]
 800b5de:	2101      	movs	r1, #1
 800b5e0:	438b      	bics	r3, r1
 800b5e2:	6113      	str	r3, [r2, #16]
 800b5e4:	e7e4      	b.n	800b5b0 <SaveToRO+0xb8>
		for (uint8_t i = 1; i <= N; i++) {
 800b5e6:	464b      	mov	r3, r9
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	4699      	mov	r9, r3
 800b5ee:	4b44      	ldr	r3, [pc, #272]	; (800b700 <SaveToRO+0x208>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	454b      	cmp	r3, r9
 800b5f4:	d39f      	bcc.n	800b536 <SaveToRO+0x3e>
 800b5f6:	465e      	mov	r6, fp
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	435e      	muls	r6, r3
 800b5fc:	0034      	movs	r4, r6
 800b5fe:	3c16      	subs	r4, #22
 800b600:	4454      	add	r4, sl
 800b602:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 800b604:	1e5f      	subs	r7, r3, #1
 800b606:	465b      	mov	r3, fp
 800b608:	435f      	muls	r7, r3
 800b60a:	e7d4      	b.n	800b5b6 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800b60c:	4b3b      	ldr	r3, [pc, #236]	; (800b6fc <SaveToRO+0x204>)
 800b60e:	69d8      	ldr	r0, [r3, #28]
 800b610:	b2c0      	uxtb	r0, r0
 800b612:	e79d      	b.n	800b550 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800b614:	4b39      	ldr	r3, [pc, #228]	; (800b6fc <SaveToRO+0x204>)
 800b616:	69d8      	ldr	r0, [r3, #28]
 800b618:	b2c0      	uxtb	r0, r0
 800b61a:	e799      	b.n	800b550 <SaveToRO+0x58>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800b61c:	3501      	adds	r5, #1
 800b61e:	b2ed      	uxtb	r5, r5
 800b620:	4b33      	ldr	r3, [pc, #204]	; (800b6f0 <SaveToRO+0x1f8>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	42ab      	cmp	r3, r5
 800b626:	d956      	bls.n	800b6d6 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) {
 800b628:	9501      	str	r5, [sp, #4]
 800b62a:	00ab      	lsls	r3, r5, #2
 800b62c:	195b      	adds	r3, r3, r5
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4642      	mov	r2, r8
 800b632:	5c9b      	ldrb	r3, [r3, r2]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d0f1      	beq.n	800b61c <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800b638:	23fe      	movs	r3, #254	; 0xfe
 800b63a:	aa02      	add	r2, sp, #8
 800b63c:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800b63e:	00a9      	lsls	r1, r5, #2
 800b640:	1949      	adds	r1, r1, r5
 800b642:	0089      	lsls	r1, r1, #2
 800b644:	4b2c      	ldr	r3, [pc, #176]	; (800b6f8 <SaveToRO+0x200>)
 800b646:	469c      	mov	ip, r3
 800b648:	4461      	add	r1, ip
 800b64a:	2214      	movs	r2, #20
 800b64c:	ab02      	add	r3, sp, #8
 800b64e:	1c58      	adds	r0, r3, #1
 800b650:	f008 f9eb 	bl	8013a2a <memcpy>
 800b654:	2314      	movs	r3, #20
 800b656:	469b      	mov	fp, r3
 800b658:	44a3      	add	fp, r4
						*(uint16_t*) &snipBuffer[j * 2]);
 800b65a:	ae02      	add	r6, sp, #8
 800b65c:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b65e:	4f22      	ldr	r7, [pc, #136]	; (800b6e8 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b660:	5b32      	ldrh	r2, [r6, r4]
 800b662:	2300      	movs	r3, #0
 800b664:	0021      	movs	r1, r4
 800b666:	2001      	movs	r0, #1
 800b668:	f006 f974 	bl	8011954 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b66c:	481d      	ldr	r0, [pc, #116]	; (800b6e4 <SaveToRO+0x1ec>)
 800b66e:	f006 f943 	bl	80118f8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b672:	2800      	cmp	r0, #0
 800b674:	d1ca      	bne.n	800b60c <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2201      	movs	r2, #1
 800b67a:	4393      	bics	r3, r2
 800b67c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800b67e:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800b680:	455c      	cmp	r4, fp
 800b682:	d1ed      	bne.n	800b660 <SaveToRO+0x168>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b684:	2700      	movs	r7, #0
 800b686:	9a01      	ldr	r2, [sp, #4]
 800b688:	0093      	lsls	r3, r2, #2
 800b68a:	189e      	adds	r6, r3, r2
 800b68c:	00b6      	lsls	r6, r6, #2
 800b68e:	4b1a      	ldr	r3, [pc, #104]	; (800b6f8 <SaveToRO+0x200>)
 800b690:	469a      	mov	sl, r3
 800b692:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b694:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <SaveToRO+0x1f0>)
 800b696:	469b      	mov	fp, r3
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b698:	4653      	mov	r3, sl
 800b69a:	68de      	ldr	r6, [r3, #12]
 800b69c:	0030      	movs	r0, r6
 800b69e:	f7f4 fd3b 	bl	8000118 <strlen>
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	0840      	lsrs	r0, r0, #1
 800b6a6:	4287      	cmp	r7, r0
 800b6a8:	d2b8      	bcs.n	800b61c <SaveToRO+0x124>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800b6aa:	007b      	lsls	r3, r7, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800b6ac:	5af2      	ldrh	r2, [r6, r3]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	0021      	movs	r1, r4
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	f006 f94e 	bl	8011954 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800b6b8:	480a      	ldr	r0, [pc, #40]	; (800b6e4 <SaveToRO+0x1ec>)
 800b6ba:	f006 f91d 	bl	80118f8 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d1a8      	bne.n	800b614 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b6c2:	465b      	mov	r3, fp
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	4393      	bics	r3, r2
 800b6ca:	465a      	mov	r2, fp
 800b6cc:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b6ce:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800b6d0:	3701      	adds	r7, #1
 800b6d2:	b2ff      	uxtb	r7, r7
 800b6d4:	e7e0      	b.n	800b698 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b6d6:	f006 f905 	bl	80118e4 <HAL_FLASH_Lock>
	return result;
 800b6da:	2000      	movs	r0, #0
 800b6dc:	e738      	b.n	800b550 <SaveToRO+0x58>
 800b6de:	46c0      	nop			; (mov r8, r8)
 800b6e0:	0801d800 	.word	0x0801d800
 800b6e4:	0000c350 	.word	0x0000c350
 800b6e8:	40022000 	.word	0x40022000
 800b6ec:	20000866 	.word	0x20000866
 800b6f0:	20000a07 	.word	0x20000a07
 800b6f4:	0801dc00 	.word	0x0801dc00
 800b6f8:	20006148 	.word	0x20006148
 800b6fc:	20006658 	.word	0x20006658
 800b700:	2000001c 	.word	0x2000001c
 800b704:	200002a0 	.word	0x200002a0

0800b708 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800b708:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800b70a:	228f      	movs	r2, #143	; 0x8f
 800b70c:	0092      	lsls	r2, r2, #2
 800b70e:	2100      	movs	r1, #0
 800b710:	4805      	ldr	r0, [pc, #20]	; (800b728 <ClearROtopology+0x20>)
 800b712:	f008 f993 	bl	8013a3c <memset>
	N = 1;
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <ClearROtopology+0x24>)
 800b718:	2201      	movs	r2, #1
 800b71a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800b71c:	4b04      	ldr	r3, [pc, #16]	; (800b730 <ClearROtopology+0x28>)
 800b71e:	2200      	movs	r2, #0
 800b720:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800b722:	f7ff fee9 	bl	800b4f8 <SaveToRO>
}
 800b726:	bd10      	pop	{r4, pc}
 800b728:	200002a0 	.word	0x200002a0
 800b72c:	2000001c 	.word	0x2000001c
 800b730:	20000866 	.word	0x20000866

0800b734 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800b734:	b500      	push	{lr}
 800b736:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800b738:	f002 fb2e 	bl	800dd98 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800b73c:	f002 fb44 	bl	800ddc8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800b740:	f002 fb5a 	bl	800ddf8 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800b744:	f002 fb70 	bl	800de28 <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 800b748:	f002 fb86 	bl	800de58 <MX_USART6_UART_Init>
	xTaskCreate(VoltAmpTask, (const char* ) "VoltAmpTask",
 800b74c:	22a0      	movs	r2, #160	; 0xa0
 800b74e:	2300      	movs	r3, #0
 800b750:	9303      	str	r3, [sp, #12]
 800b752:	9302      	str	r3, [sp, #8]
 800b754:	4b06      	ldr	r3, [pc, #24]	; (800b770 <Module_Peripheral_Init+0x3c>)
 800b756:	9301      	str	r3, [sp, #4]
 800b758:	2303      	movs	r3, #3
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	2300      	movs	r3, #0
 800b75e:	0052      	lsls	r2, r2, #1
 800b760:	4904      	ldr	r1, [pc, #16]	; (800b774 <Module_Peripheral_Init+0x40>)
 800b762:	4805      	ldr	r0, [pc, #20]	; (800b778 <Module_Peripheral_Init+0x44>)
 800b764:	f003 fbde 	bl	800ef24 <xTaskGenericCreate>
	MX_ADC_Init();
 800b768:	f7fd f80a 	bl	8008780 <MX_ADC_Init>
}
 800b76c:	b005      	add	sp, #20
 800b76e:	bd00      	pop	{pc}
 800b770:	20000f20 	.word	0x20000f20
 800b774:	0801a4c4 	.word	0x0801a4c4
 800b778:	0800bbc1 	.word	0x0800bbc1

0800b77c <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800b77c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 800b77e:	4808      	ldr	r0, [pc, #32]	; (800b7a0 <RegisterModuleCLICommands+0x24>)
 800b780:	f002 fe50 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 800b784:	4807      	ldr	r0, [pc, #28]	; (800b7a4 <RegisterModuleCLICommands+0x28>)
 800b786:	f002 fe4d 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 800b78a:	4807      	ldr	r0, [pc, #28]	; (800b7a8 <RegisterModuleCLICommands+0x2c>)
 800b78c:	f002 fe4a 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 800b790:	4806      	ldr	r0, [pc, #24]	; (800b7ac <RegisterModuleCLICommands+0x30>)
 800b792:	f002 fe47 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800b796:	4806      	ldr	r0, [pc, #24]	; (800b7b0 <RegisterModuleCLICommands+0x34>)
 800b798:	f002 fe44 	bl	800e424 <FreeRTOS_CLIRegisterCommand>
}
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	0801a560 	.word	0x0801a560
 800b7a4:	0801a7c4 	.word	0x0801a7c4
 800b7a8:	0801a570 	.word	0x0801a570
 800b7ac:	0801a814 	.word	0x0801a814
 800b7b0:	0801a550 	.word	0x0801a550

0800b7b4 <GetPort>:
	if (huart->Instance == USART4)
 800b7b4:	6800      	ldr	r0, [r0, #0]
 800b7b6:	4b0e      	ldr	r3, [pc, #56]	; (800b7f0 <GetPort+0x3c>)
 800b7b8:	4298      	cmp	r0, r3
 800b7ba:	d011      	beq.n	800b7e0 <GetPort+0x2c>
	else if (huart->Instance == USART2)
 800b7bc:	4b0d      	ldr	r3, [pc, #52]	; (800b7f4 <GetPort+0x40>)
 800b7be:	4298      	cmp	r0, r3
 800b7c0:	d010      	beq.n	800b7e4 <GetPort+0x30>
	else if (huart->Instance == USART6)
 800b7c2:	4b0d      	ldr	r3, [pc, #52]	; (800b7f8 <GetPort+0x44>)
 800b7c4:	4298      	cmp	r0, r3
 800b7c6:	d00f      	beq.n	800b7e8 <GetPort+0x34>
	else if (huart->Instance == USART3)
 800b7c8:	4b0c      	ldr	r3, [pc, #48]	; (800b7fc <GetPort+0x48>)
 800b7ca:	4298      	cmp	r0, r3
 800b7cc:	d00e      	beq.n	800b7ec <GetPort+0x38>
	return 0;
 800b7ce:	4b0c      	ldr	r3, [pc, #48]	; (800b800 <GetPort+0x4c>)
 800b7d0:	469c      	mov	ip, r3
 800b7d2:	4460      	add	r0, ip
 800b7d4:	4243      	negs	r3, r0
 800b7d6:	4158      	adcs	r0, r3
 800b7d8:	4240      	negs	r0, r0
 800b7da:	2305      	movs	r3, #5
 800b7dc:	4018      	ands	r0, r3
}
 800b7de:	4770      	bx	lr
		return P1;
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	e7fc      	b.n	800b7de <GetPort+0x2a>
		return P2;
 800b7e4:	2002      	movs	r0, #2
 800b7e6:	e7fa      	b.n	800b7de <GetPort+0x2a>
		return P3;
 800b7e8:	2003      	movs	r0, #3
 800b7ea:	e7f8      	b.n	800b7de <GetPort+0x2a>
		return P4;
 800b7ec:	2004      	movs	r0, #4
 800b7ee:	e7f6      	b.n	800b7de <GetPort+0x2a>
 800b7f0:	40004c00 	.word	0x40004c00
 800b7f4:	40004400 	.word	0x40004400
 800b7f8:	40011400 	.word	0x40011400
 800b7fc:	40004800 	.word	0x40004800
 800b800:	bffec800 	.word	0xbffec800

0800b804 <SendResults>:
		uint8_t Module, float *Buffer) {
 800b804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b806:	b087      	sub	sp, #28
 800b808:	1c07      	adds	r7, r0, #0
 800b80a:	000c      	movs	r4, r1
 800b80c:	9302      	str	r3, [sp, #8]
 800b80e:	ab0c      	add	r3, sp, #48	; 0x30
 800b810:	781d      	ldrb	r5, [r3, #0]
	uint32_t RawMsgInt = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 800b816:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b818:	f002 fe9e 	bl	800e558 <FreeRTOS_CLIGetOutputBuffer>
 800b81c:	9003      	str	r0, [sp, #12]
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800b81e:	2c04      	cmp	r4, #4
 800b820:	d100      	bne.n	800b824 <SendResults+0x20>
 800b822:	e0ce      	b.n	800b9c2 <SendResults+0x1be>
 800b824:	2c02      	cmp	r4, #2
 800b826:	d11d      	bne.n	800b864 <SendResults+0x60>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800b828:	4b67      	ldr	r3, [pc, #412]	; (800b9c8 <SendResults+0x1c4>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b05      	cmp	r3, #5
 800b82e:	d07d      	beq.n	800b92c <SendResults+0x128>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800b830:	2b07      	cmp	r3, #7
 800b832:	d000      	beq.n	800b836 <SendResults+0x32>
 800b834:	e0be      	b.n	800b9b4 <SendResults+0x1b0>
			if (Module == myID) {
 800b836:	4b65      	ldr	r3, [pc, #404]	; (800b9cc <SendResults+0x1c8>)
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	42ab      	cmp	r3, r5
 800b83c:	d100      	bne.n	800b840 <SendResults+0x3c>
 800b83e:	e0a3      	b.n	800b988 <SendResults+0x184>
				messageParams[0] = Port;
 800b840:	4b63      	ldr	r3, [pc, #396]	; (800b9d0 <SendResults+0x1cc>)
 800b842:	9a02      	ldr	r2, [sp, #8]
 800b844:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800b846:	aa05      	add	r2, sp, #20
 800b848:	78d1      	ldrb	r1, [r2, #3]
 800b84a:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800b84c:	7891      	ldrb	r1, [r2, #2]
 800b84e:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800b850:	7851      	ldrb	r1, [r2, #1]
 800b852:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800b858:	2205      	movs	r2, #5
 800b85a:	2123      	movs	r1, #35	; 0x23
 800b85c:	0028      	movs	r0, r5
 800b85e:	f7fd ff27 	bl	80096b0 <SendMessageToModule>
 800b862:	e0a7      	b.n	800b9b4 <SendResults+0x1b0>
		strUnit = malloc(6 * sizeof(char));
 800b864:	2006      	movs	r0, #6
 800b866:	f008 f8ab 	bl	80139c0 <malloc>
 800b86a:	0006      	movs	r6, r0
		memset(strUnit, 0, (6 * sizeof(char)));
 800b86c:	2206      	movs	r2, #6
 800b86e:	2100      	movs	r1, #0
 800b870:	f008 f8e4 	bl	8013a3c <memset>
		if (unit == Volt) {
 800b874:	4b57      	ldr	r3, [pc, #348]	; (800b9d4 <SendResults+0x1d0>)
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d00d      	beq.n	800b898 <SendResults+0x94>
		} else if (unit == Amp) {
 800b87c:	2b02      	cmp	r3, #2
 800b87e:	d011      	beq.n	800b8a4 <SendResults+0xa0>
			sprintf((char*) strUnit, "Volt");
 800b880:	4b55      	ldr	r3, [pc, #340]	; (800b9d8 <SendResults+0x1d4>)
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	6032      	str	r2, [r6, #0]
 800b886:	791b      	ldrb	r3, [r3, #4]
 800b888:	7133      	strb	r3, [r6, #4]
	switch (Mode) {
 800b88a:	2c08      	cmp	r4, #8
 800b88c:	d900      	bls.n	800b890 <SendResults+0x8c>
 800b88e:	e095      	b.n	800b9bc <SendResults+0x1b8>
 800b890:	00a3      	lsls	r3, r4, #2
 800b892:	4a52      	ldr	r2, [pc, #328]	; (800b9dc <SendResults+0x1d8>)
 800b894:	58d3      	ldr	r3, [r2, r3]
 800b896:	469f      	mov	pc, r3
			sprintf((char*) strUnit, "Volt");
 800b898:	4b4f      	ldr	r3, [pc, #316]	; (800b9d8 <SendResults+0x1d4>)
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	6032      	str	r2, [r6, #0]
 800b89e:	791b      	ldrb	r3, [r3, #4]
 800b8a0:	7133      	strb	r3, [r6, #4]
 800b8a2:	e7f2      	b.n	800b88a <SendResults+0x86>
			sprintf((char*) strUnit, "Amp");
 800b8a4:	4b4e      	ldr	r3, [pc, #312]	; (800b9e0 <SendResults+0x1dc>)
 800b8a6:	6033      	str	r3, [r6, #0]
 800b8a8:	e7ef      	b.n	800b88a <SendResults+0x86>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800b8aa:	4b47      	ldr	r3, [pc, #284]	; (800b9c8 <SendResults+0x1c4>)
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	2b05      	cmp	r3, #5
 800b8b0:	d01d      	beq.n	800b8ee <SendResults+0xea>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800b8b2:	2b07      	cmp	r3, #7
 800b8b4:	d17e      	bne.n	800b9b4 <SendResults+0x1b0>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 800b8b6:	1c38      	adds	r0, r7, #0
 800b8b8:	f7f7 f95a 	bl	8002b70 <__aeabi_f2d>
 800b8bc:	9000      	str	r0, [sp, #0]
 800b8be:	9101      	str	r1, [sp, #4]
 800b8c0:	0032      	movs	r2, r6
 800b8c2:	4948      	ldr	r1, [pc, #288]	; (800b9e4 <SendResults+0x1e0>)
 800b8c4:	9d03      	ldr	r5, [sp, #12]
 800b8c6:	0028      	movs	r0, r5
 800b8c8:	f009 f816 	bl	80148f8 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800b8cc:	0028      	movs	r0, r5
 800b8ce:	f7f4 fc23 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b8d2:	23fa      	movs	r3, #250	; 0xfa
 800b8d4:	b282      	uxth	r2, r0
 800b8d6:	4944      	ldr	r1, [pc, #272]	; (800b9e8 <SendResults+0x1e4>)
 800b8d8:	7808      	ldrb	r0, [r1, #0]
 800b8da:	2101      	movs	r1, #1
 800b8dc:	4249      	negs	r1, r1
 800b8de:	9100      	str	r1, [sp, #0]
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	0029      	movs	r1, r5
 800b8e4:	f002 fbf6 	bl	800e0d4 <writePxMutex>
			CheckForEnterKey();
 800b8e8:	f7ff fd6c 	bl	800b3c4 <CheckForEnterKey>
 800b8ec:	e062      	b.n	800b9b4 <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800b8ee:	493f      	ldr	r1, [pc, #252]	; (800b9ec <SendResults+0x1e8>)
 800b8f0:	1c38      	adds	r0, r7, #0
 800b8f2:	f7f5 f849 	bl	8000988 <__aeabi_fmul>
 800b8f6:	f7f4 fe39 	bl	800056c <__aeabi_f2uiz>
 800b8fa:	0003      	movs	r3, r0
 800b8fc:	9004      	str	r0, [sp, #16]
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800b8fe:	0032      	movs	r2, r6
 800b900:	493b      	ldr	r1, [pc, #236]	; (800b9f0 <SendResults+0x1ec>)
 800b902:	9d03      	ldr	r5, [sp, #12]
 800b904:	0028      	movs	r0, r5
 800b906:	f008 fff7 	bl	80148f8 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800b90a:	0028      	movs	r0, r5
 800b90c:	f7f4 fc04 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800b910:	23fa      	movs	r3, #250	; 0xfa
 800b912:	b282      	uxth	r2, r0
 800b914:	4934      	ldr	r1, [pc, #208]	; (800b9e8 <SendResults+0x1e4>)
 800b916:	7808      	ldrb	r0, [r1, #0]
 800b918:	2101      	movs	r1, #1
 800b91a:	4249      	negs	r1, r1
 800b91c:	9100      	str	r1, [sp, #0]
 800b91e:	005b      	lsls	r3, r3, #1
 800b920:	0029      	movs	r1, r5
 800b922:	f002 fbd7 	bl	800e0d4 <writePxMutex>
			CheckForEnterKey();
 800b926:	f7ff fd4d 	bl	800b3c4 <CheckForEnterKey>
 800b92a:	e043      	b.n	800b9b4 <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800b92c:	492f      	ldr	r1, [pc, #188]	; (800b9ec <SendResults+0x1e8>)
 800b92e:	1c38      	adds	r0, r7, #0
 800b930:	f7f5 f82a 	bl	8000988 <__aeabi_fmul>
 800b934:	f7f4 fe1a 	bl	800056c <__aeabi_f2uiz>
 800b938:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800b93a:	4b24      	ldr	r3, [pc, #144]	; (800b9cc <SendResults+0x1c8>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	42ab      	cmp	r3, r5
 800b940:	d011      	beq.n	800b966 <SendResults+0x162>
				messageParams[0] = Port;
 800b942:	4b23      	ldr	r3, [pc, #140]	; (800b9d0 <SendResults+0x1cc>)
 800b944:	9a02      	ldr	r2, [sp, #8]
 800b946:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800b948:	aa04      	add	r2, sp, #16
 800b94a:	78d1      	ldrb	r1, [r2, #3]
 800b94c:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800b94e:	7891      	ldrb	r1, [r2, #2]
 800b950:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800b952:	7851      	ldrb	r1, [r2, #1]
 800b954:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800b956:	7812      	ldrb	r2, [r2, #0]
 800b958:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800b95a:	2205      	movs	r2, #5
 800b95c:	2123      	movs	r1, #35	; 0x23
 800b95e:	0028      	movs	r0, r5
 800b960:	f7fd fea6 	bl	80096b0 <SendMessageToModule>
 800b964:	e026      	b.n	800b9b4 <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800b966:	ab04      	add	r3, sp, #16
 800b968:	78da      	ldrb	r2, [r3, #3]
 800b96a:	4922      	ldr	r1, [pc, #136]	; (800b9f4 <SendResults+0x1f0>)
 800b96c:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800b96e:	789a      	ldrb	r2, [r3, #2]
 800b970:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800b972:	785a      	ldrb	r2, [r3, #1]
 800b974:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b97a:	230a      	movs	r3, #10
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	2204      	movs	r2, #4
 800b980:	9802      	ldr	r0, [sp, #8]
 800b982:	f002 fba7 	bl	800e0d4 <writePxMutex>
 800b986:	e015      	b.n	800b9b4 <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800b988:	ab05      	add	r3, sp, #20
 800b98a:	78da      	ldrb	r2, [r3, #3]
 800b98c:	4919      	ldr	r1, [pc, #100]	; (800b9f4 <SendResults+0x1f0>)
 800b98e:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800b990:	789a      	ldrb	r2, [r3, #2]
 800b992:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800b994:	785a      	ldrb	r2, [r3, #1]
 800b996:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800b99c:	230a      	movs	r3, #10
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	2204      	movs	r2, #4
 800b9a2:	9802      	ldr	r0, [sp, #8]
 800b9a4:	f002 fb96 	bl	800e0d4 <writePxMutex>
 800b9a8:	e004      	b.n	800b9b4 <SendResults+0x1b0>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800b9aa:	2204      	movs	r2, #4
 800b9ac:	a905      	add	r1, sp, #20
 800b9ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b9b0:	f008 f83b 	bl	8013a2a <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800b9b4:	3c02      	subs	r4, #2
 800b9b6:	23fd      	movs	r3, #253	; 0xfd
 800b9b8:	421c      	tst	r4, r3
 800b9ba:	d002      	beq.n	800b9c2 <SendResults+0x1be>
		free(strUnit);
 800b9bc:	0030      	movs	r0, r6
 800b9be:	f008 f809 	bl	80139d4 <free>
}
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	b007      	add	sp, #28
 800b9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c8:	20000084 	.word	0x20000084
 800b9cc:	20000866 	.word	0x20000866
 800b9d0:	20000728 	.word	0x20000728
 800b9d4:	20000094 	.word	0x20000094
 800b9d8:	0801a4d0 	.word	0x0801a4d0
 800b9dc:	0801a48c 	.word	0x0801a48c
 800b9e0:	00706d41 	.word	0x00706d41
 800b9e4:	0801a4e8 	.word	0x0801a4e8
 800b9e8:	2000029f 	.word	0x2000029f
 800b9ec:	41200000 	.word	0x41200000
 800b9f0:	0801a4d8 	.word	0x0801a4d8
 800b9f4:	20000f28 	.word	0x20000f28

0800b9f8 <sampleCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE sampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800b9fe:	d00a      	beq.n	800ba16 <sampleCommand+0x1e>

	switch (unit) {
 800ba00:	4b14      	ldr	r3, [pc, #80]	; (800ba54 <sampleCommand+0x5c>)
 800ba02:	781a      	ldrb	r2, [r3, #0]
 800ba04:	2a01      	cmp	r2, #1
 800ba06:	d008      	beq.n	800ba1a <sampleCommand+0x22>
 800ba08:	2a02      	cmp	r2, #2
 800ba0a:	d01d      	beq.n	800ba48 <sampleCommand+0x50>
	*volt = measured_volt;
 800ba0c:	4b12      	ldr	r3, [pc, #72]	; (800ba58 <sampleCommand+0x60>)
 800ba0e:	6819      	ldr	r1, [r3, #0]
 800ba10:	4b12      	ldr	r3, [pc, #72]	; (800ba5c <sampleCommand+0x64>)
 800ba12:	6019      	str	r1, [r3, #0]
 800ba14:	e005      	b.n	800ba22 <sampleCommand+0x2a>
	configASSERT(pcWriteBuffer);
 800ba16:	b672      	cpsid	i
 800ba18:	e7fe      	b.n	800ba18 <sampleCommand+0x20>
	*volt = measured_volt;
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <sampleCommand+0x60>)
 800ba1c:	6819      	ldr	r1, [r3, #0]
 800ba1e:	4b0f      	ldr	r3, [pc, #60]	; (800ba5c <sampleCommand+0x64>)
 800ba20:	6019      	str	r1, [r3, #0]
		break;
	default:
		SampleV(&DATA_To_SEND);
	}

	global_mode = SAMPLE_CLI_CASE;
 800ba22:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <sampleCommand+0x68>)
 800ba24:	2106      	movs	r1, #6
 800ba26:	7019      	strb	r1, [r3, #0]
	SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800ba28:	4b0c      	ldr	r3, [pc, #48]	; (800ba5c <sampleCommand+0x64>)
 800ba2a:	6818      	ldr	r0, [r3, #0]
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	f7ff fee7 	bl	800b804 <SendResults>

	if (result != H2AR3_OK)
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800ba36:	2299      	movs	r2, #153	; 0x99
 800ba38:	0092      	lsls	r2, r2, #2
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	0020      	movs	r0, r4
 800ba3e:	f007 fffd 	bl	8013a3c <memset>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800ba42:	2000      	movs	r0, #0
 800ba44:	b002      	add	sp, #8
 800ba46:	bd10      	pop	{r4, pc}
	*curr = measured_amp;
 800ba48:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <sampleCommand+0x6c>)
 800ba4a:	6819      	ldr	r1, [r3, #0]
 800ba4c:	4b03      	ldr	r3, [pc, #12]	; (800ba5c <sampleCommand+0x64>)
 800ba4e:	6019      	str	r1, [r3, #0]
 800ba50:	e7e7      	b.n	800ba22 <sampleCommand+0x2a>
 800ba52:	46c0      	nop			; (mov r8, r8)
 800ba54:	20000094 	.word	0x20000094
 800ba58:	200064e4 	.word	0x200064e4
 800ba5c:	20000f1c 	.word	0x20000f1c
 800ba60:	200062c4 	.word	0x200062c4
 800ba64:	20006374 	.word	0x20006374

0800ba68 <CalculationVolt>:
float CalculationVolt(void) {
 800ba68:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH9();
 800ba6a:	f000 fcf9 	bl	800c460 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800ba6e:	4c1b      	ldr	r4, [pc, #108]	; (800badc <CalculationVolt+0x74>)
 800ba70:	0020      	movs	r0, r4
 800ba72:	f004 fe09 	bl	8010688 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800ba76:	21fa      	movs	r1, #250	; 0xfa
 800ba78:	0089      	lsls	r1, r1, #2
 800ba7a:	0020      	movs	r0, r4
 800ba7c:	f004 fe56 	bl	801072c <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800ba80:	0020      	movs	r0, r4
 800ba82:	f004 ff1f 	bl	80108c4 <HAL_ADC_GetValue>
 800ba86:	4d16      	ldr	r5, [pc, #88]	; (800bae0 <CalculationVolt+0x78>)
 800ba88:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800ba8a:	0020      	movs	r0, r4
 800ba8c:	f004 fe2c 	bl	80106e8 <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800ba90:	f000 fcf8 	bl	800c484 <ADC_Deselect_CH9>
	return tmp_adc;
 800ba94:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Volt);
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <CalculationVolt+0x7c>)
 800ba98:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	f7f5 fa8a 	bl	8000fb4 <__aeabi_ui2f>
 800baa0:	f7f7 f866 	bl	8002b70 <__aeabi_f2d>
 800baa4:	4a10      	ldr	r2, [pc, #64]	; (800bae8 <CalculationVolt+0x80>)
 800baa6:	4b11      	ldr	r3, [pc, #68]	; (800baec <CalculationVolt+0x84>)
 800baa8:	f7f6 f9ea 	bl	8001e80 <__aeabi_dmul>
 800baac:	f7f7 f8b2 	bl	8002c14 <__aeabi_d2f>
	_volt = _volt - VRef;
 800bab0:	f7f7 f85e 	bl	8002b70 <__aeabi_f2d>
 800bab4:	4a0e      	ldr	r2, [pc, #56]	; (800baf0 <CalculationVolt+0x88>)
 800bab6:	4b0f      	ldr	r3, [pc, #60]	; (800baf4 <CalculationVolt+0x8c>)
 800bab8:	f7f6 fc54 	bl	8002364 <__aeabi_dsub>
 800babc:	f7f7 f8aa 	bl	8002c14 <__aeabi_d2f>
 800bac0:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <CalculationVolt+0x90>)
 800bac2:	6018      	str	r0, [r3, #0]
	measured_volt = _volt * voltRatio; /////////////////final volt calculation here
 800bac4:	f7f7 f854 	bl	8002b70 <__aeabi_f2d>
 800bac8:	4a0c      	ldr	r2, [pc, #48]	; (800bafc <CalculationVolt+0x94>)
 800baca:	4b0d      	ldr	r3, [pc, #52]	; (800bb00 <CalculationVolt+0x98>)
 800bacc:	f7f6 f9d8 	bl	8001e80 <__aeabi_dmul>
 800bad0:	f7f7 f8a0 	bl	8002c14 <__aeabi_d2f>
 800bad4:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <CalculationVolt+0x9c>)
 800bad6:	6018      	str	r0, [r3, #0]
}
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	46c0      	nop			; (mov r8, r8)
 800badc:	200061e4 	.word	0x200061e4
 800bae0:	20006378 	.word	0x20006378
 800bae4:	20006384 	.word	0x20006384
 800bae8:	e734d9b4 	.word	0xe734d9b4
 800baec:	3f4a680c 	.word	0x3f4a680c
 800baf0:	66666666 	.word	0x66666666
 800baf4:	3ffa6666 	.word	0x3ffa6666
 800baf8:	20006250 	.word	0x20006250
 800bafc:	a8eb4635 	.word	0xa8eb4635
 800bb00:	4080aaaa 	.word	0x4080aaaa
 800bb04:	200064e4 	.word	0x200064e4

0800bb08 <CalculationAmp>:
float CalculationAmp(void) {
 800bb08:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH7();
 800bb0a:	f000 fc85 	bl	800c418 <ADC_Select_CH7>
		HAL_ADC_Start(&hadc);
 800bb0e:	4c1e      	ldr	r4, [pc, #120]	; (800bb88 <CalculationAmp+0x80>)
 800bb10:	0020      	movs	r0, r4
 800bb12:	f004 fdb9 	bl	8010688 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800bb16:	21fa      	movs	r1, #250	; 0xfa
 800bb18:	0089      	lsls	r1, r1, #2
 800bb1a:	0020      	movs	r0, r4
 800bb1c:	f004 fe06 	bl	801072c <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800bb20:	0020      	movs	r0, r4
 800bb22:	f004 fecf 	bl	80108c4 <HAL_ADC_GetValue>
 800bb26:	4d19      	ldr	r5, [pc, #100]	; (800bb8c <CalculationAmp+0x84>)
 800bb28:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800bb2a:	0020      	movs	r0, r4
 800bb2c:	f004 fddc 	bl	80106e8 <HAL_ADC_Stop>
		ADC_Deselect_CH7();
 800bb30:	f000 fc84 	bl	800c43c <ADC_Deselect_CH7>
	return tmp_adc;
 800bb34:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Amp);
 800bb36:	4b16      	ldr	r3, [pc, #88]	; (800bb90 <CalculationAmp+0x88>)
 800bb38:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800bb3a:	6818      	ldr	r0, [r3, #0]
 800bb3c:	f7f5 fa3a 	bl	8000fb4 <__aeabi_ui2f>
 800bb40:	f7f7 f816 	bl	8002b70 <__aeabi_f2d>
 800bb44:	4a13      	ldr	r2, [pc, #76]	; (800bb94 <CalculationAmp+0x8c>)
 800bb46:	4b14      	ldr	r3, [pc, #80]	; (800bb98 <CalculationAmp+0x90>)
 800bb48:	f7f6 f99a 	bl	8001e80 <__aeabi_dmul>
 800bb4c:	f7f7 f862 	bl	8002c14 <__aeabi_d2f>
	_volt = _volt - VRef;
 800bb50:	f7f7 f80e 	bl	8002b70 <__aeabi_f2d>
 800bb54:	4a11      	ldr	r2, [pc, #68]	; (800bb9c <CalculationAmp+0x94>)
 800bb56:	4b12      	ldr	r3, [pc, #72]	; (800bba0 <CalculationAmp+0x98>)
 800bb58:	f7f6 fc04 	bl	8002364 <__aeabi_dsub>
 800bb5c:	f7f7 f85a 	bl	8002c14 <__aeabi_d2f>
 800bb60:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <CalculationAmp+0x9c>)
 800bb62:	6018      	str	r0, [r3, #0]
	measured_amp = ((_volt / 100) / shuntResistor) * ampTranRatio; /////////////////final amp calculation here
 800bb64:	4910      	ldr	r1, [pc, #64]	; (800bba8 <CalculationAmp+0xa0>)
 800bb66:	f7f4 fd37 	bl	80005d8 <__aeabi_fdiv>
 800bb6a:	f7f7 f801 	bl	8002b70 <__aeabi_f2d>
 800bb6e:	4a0f      	ldr	r2, [pc, #60]	; (800bbac <CalculationAmp+0xa4>)
 800bb70:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <CalculationAmp+0xa8>)
 800bb72:	f7f5 fd7b 	bl	800166c <__aeabi_ddiv>
 800bb76:	4a0f      	ldr	r2, [pc, #60]	; (800bbb4 <CalculationAmp+0xac>)
 800bb78:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <CalculationAmp+0xb0>)
 800bb7a:	f7f6 f981 	bl	8001e80 <__aeabi_dmul>
 800bb7e:	f7f7 f849 	bl	8002c14 <__aeabi_d2f>
 800bb82:	4b0e      	ldr	r3, [pc, #56]	; (800bbbc <CalculationAmp+0xb4>)
 800bb84:	6018      	str	r0, [r3, #0]
}
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	200061e4 	.word	0x200061e4
 800bb8c:	20006378 	.word	0x20006378
 800bb90:	20006384 	.word	0x20006384
 800bb94:	e734d9b4 	.word	0xe734d9b4
 800bb98:	3f4a680c 	.word	0x3f4a680c
 800bb9c:	66666666 	.word	0x66666666
 800bba0:	3ffa6666 	.word	0x3ffa6666
 800bba4:	20006250 	.word	0x20006250
 800bba8:	42c80000 	.word	0x42c80000
 800bbac:	9999999a 	.word	0x9999999a
 800bbb0:	3fb99999 	.word	0x3fb99999
 800bbb4:	47ae147b 	.word	0x47ae147b
 800bbb8:	3f847ae1 	.word	0x3f847ae1
 800bbbc:	20006374 	.word	0x20006374

0800bbc0 <VoltAmpTask>:
void VoltAmpTask(void *argument) {
 800bbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc2:	46c6      	mov	lr, r8
 800bbc4:	b500      	push	{lr}
 800bbc6:	b082      	sub	sp, #8
	HAL_ADC_Start_IT(&hadc);
 800bbc8:	483b      	ldr	r0, [pc, #236]	; (800bcb8 <VoltAmpTask+0xf8>)
 800bbca:	f004 fe0f 	bl	80107ec <HAL_ADC_Start_IT>
		switch (unit) {
 800bbce:	4c3b      	ldr	r4, [pc, #236]	; (800bcbc <VoltAmpTask+0xfc>)
			DATA_To_SEND = CalculationVolt();
 800bbd0:	4e3b      	ldr	r6, [pc, #236]	; (800bcc0 <VoltAmpTask+0x100>)
			DATA_To_SEND = CalculationVolt();
 800bbd2:	46b0      	mov	r8, r6
 800bbd4:	e02e      	b.n	800bc34 <VoltAmpTask+0x74>
			DATA_To_SEND = CalculationVolt();
 800bbd6:	f7ff ff47 	bl	800ba68 <CalculationVolt>
 800bbda:	6030      	str	r0, [r6, #0]
		switch (global_mode) {
 800bbdc:	4b39      	ldr	r3, [pc, #228]	; (800bcc4 <VoltAmpTask+0x104>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d031      	beq.n	800bc48 <VoltAmpTask+0x88>
 800bbe4:	2b03      	cmp	r3, #3
 800bbe6:	d04c      	beq.n	800bc82 <VoltAmpTask+0xc2>
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d008      	beq.n	800bbfe <VoltAmpTask+0x3e>
			global_mode = IDLE_CASE;
 800bbec:	4b35      	ldr	r3, [pc, #212]	; (800bcc4 <VoltAmpTask+0x104>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
			break;
 800bbf2:	e01d      	b.n	800bc30 <VoltAmpTask+0x70>
			DATA_To_SEND = CalculationAmp();
 800bbf4:	f7ff ff88 	bl	800bb08 <CalculationAmp>
 800bbf8:	4b31      	ldr	r3, [pc, #196]	; (800bcc0 <VoltAmpTask+0x100>)
 800bbfa:	6018      	str	r0, [r3, #0]
			break;
 800bbfc:	e7ee      	b.n	800bbdc <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800bbfe:	f004 fbbb 	bl	8010378 <HAL_GetTick>
 800bc02:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800bc04:	4b2d      	ldr	r3, [pc, #180]	; (800bcbc <VoltAmpTask+0xfc>)
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	4b2e      	ldr	r3, [pc, #184]	; (800bcc4 <VoltAmpTask+0x104>)
 800bc0a:	7819      	ldrb	r1, [r3, #0]
 800bc0c:	4b2c      	ldr	r3, [pc, #176]	; (800bcc0 <VoltAmpTask+0x100>)
 800bc0e:	6818      	ldr	r0, [r3, #0]
 800bc10:	2300      	movs	r3, #0
 800bc12:	9301      	str	r3, [sp, #4]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	f7ff fdf5 	bl	800b804 <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800bc1a:	4f2b      	ldr	r7, [pc, #172]	; (800bcc8 <VoltAmpTask+0x108>)
 800bc1c:	e001      	b.n	800bc22 <VoltAmpTask+0x62>
				taskYIELD();
 800bc1e:	f004 fa33 	bl	8010088 <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800bc22:	f004 fba9 	bl	8010378 <HAL_GetTick>
 800bc26:	1b40      	subs	r0, r0, r5
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	4298      	cmp	r0, r3
 800bc2e:	d3f6      	bcc.n	800bc1e <VoltAmpTask+0x5e>
		taskYIELD();
 800bc30:	f004 fa2a 	bl	8010088 <vPortYield>
		switch (unit) {
 800bc34:	7823      	ldrb	r3, [r4, #0]
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d0cd      	beq.n	800bbd6 <VoltAmpTask+0x16>
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d0da      	beq.n	800bbf4 <VoltAmpTask+0x34>
			DATA_To_SEND = CalculationVolt();
 800bc3e:	f7ff ff13 	bl	800ba68 <CalculationVolt>
 800bc42:	4643      	mov	r3, r8
 800bc44:	6018      	str	r0, [r3, #0]
			break;
 800bc46:	e7c9      	b.n	800bbdc <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800bc48:	f004 fb96 	bl	8010378 <HAL_GetTick>
 800bc4c:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, global_port,
 800bc4e:	4b1f      	ldr	r3, [pc, #124]	; (800bccc <VoltAmpTask+0x10c>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	4a1a      	ldr	r2, [pc, #104]	; (800bcbc <VoltAmpTask+0xfc>)
 800bc54:	7812      	ldrb	r2, [r2, #0]
 800bc56:	491b      	ldr	r1, [pc, #108]	; (800bcc4 <VoltAmpTask+0x104>)
 800bc58:	7809      	ldrb	r1, [r1, #0]
 800bc5a:	4819      	ldr	r0, [pc, #100]	; (800bcc0 <VoltAmpTask+0x100>)
 800bc5c:	6800      	ldr	r0, [r0, #0]
 800bc5e:	2700      	movs	r7, #0
 800bc60:	9701      	str	r7, [sp, #4]
 800bc62:	4f1b      	ldr	r7, [pc, #108]	; (800bcd0 <VoltAmpTask+0x110>)
 800bc64:	783f      	ldrb	r7, [r7, #0]
 800bc66:	9700      	str	r7, [sp, #0]
 800bc68:	f7ff fdcc 	bl	800b804 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800bc6c:	4f16      	ldr	r7, [pc, #88]	; (800bcc8 <VoltAmpTask+0x108>)
 800bc6e:	e001      	b.n	800bc74 <VoltAmpTask+0xb4>
				taskYIELD();
 800bc70:	f004 fa0a 	bl	8010088 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800bc74:	f004 fb80 	bl	8010378 <HAL_GetTick>
 800bc78:	1b40      	subs	r0, r0, r5
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	4298      	cmp	r0, r3
 800bc7e:	d3f7      	bcc.n	800bc70 <VoltAmpTask+0xb0>
 800bc80:	e7d6      	b.n	800bc30 <VoltAmpTask+0x70>
			t0 = HAL_GetTick();
 800bc82:	f004 fb79 	bl	8010378 <HAL_GetTick>
 800bc86:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0,ptr_read_buffer);
 800bc88:	4b0c      	ldr	r3, [pc, #48]	; (800bcbc <VoltAmpTask+0xfc>)
 800bc8a:	781a      	ldrb	r2, [r3, #0]
 800bc8c:	4b0d      	ldr	r3, [pc, #52]	; (800bcc4 <VoltAmpTask+0x104>)
 800bc8e:	7819      	ldrb	r1, [r3, #0]
 800bc90:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <VoltAmpTask+0x100>)
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	4b0f      	ldr	r3, [pc, #60]	; (800bcd4 <VoltAmpTask+0x114>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	f7ff fdb1 	bl	800b804 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800bca2:	4f09      	ldr	r7, [pc, #36]	; (800bcc8 <VoltAmpTask+0x108>)
 800bca4:	e001      	b.n	800bcaa <VoltAmpTask+0xea>
				taskYIELD();
 800bca6:	f004 f9ef 	bl	8010088 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800bcaa:	f004 fb65 	bl	8010378 <HAL_GetTick>
 800bcae:	1b40      	subs	r0, r0, r5
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	4298      	cmp	r0, r3
 800bcb4:	d3f7      	bcc.n	800bca6 <VoltAmpTask+0xe6>
 800bcb6:	e7bb      	b.n	800bc30 <VoltAmpTask+0x70>
 800bcb8:	200061e4 	.word	0x200061e4
 800bcbc:	20000094 	.word	0x20000094
 800bcc0:	20000f1c 	.word	0x20000f1c
 800bcc4:	200062c4 	.word	0x200062c4
 800bcc8:	20006470 	.word	0x20006470
 800bccc:	200062c5 	.word	0x200062c5
 800bcd0:	200064e8 	.word	0x200064e8
 800bcd4:	20006380 	.word	0x20006380

0800bcd8 <StreamVToPort>:
		uint32_t Timeout) {
 800bcd8:	b510      	push	{r4, lr}
 800bcda:	b082      	sub	sp, #8
	global_port = Port;
 800bcdc:	4c19      	ldr	r4, [pc, #100]	; (800bd44 <StreamVToPort+0x6c>)
 800bcde:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800bce0:	4819      	ldr	r0, [pc, #100]	; (800bd48 <StreamVToPort+0x70>)
 800bce2:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800bce4:	4919      	ldr	r1, [pc, #100]	; (800bd4c <StreamVToPort+0x74>)
 800bce6:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800bce8:	4a19      	ldr	r2, [pc, #100]	; (800bd50 <StreamVToPort+0x78>)
 800bcea:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800bcec:	4a19      	ldr	r2, [pc, #100]	; (800bd54 <StreamVToPort+0x7c>)
 800bcee:	2102      	movs	r1, #2
 800bcf0:	7011      	strb	r1, [r2, #0]
	unit = Volt;
 800bcf2:	4a19      	ldr	r2, [pc, #100]	; (800bd58 <StreamVToPort+0x80>)
 800bcf4:	3901      	subs	r1, #1
 800bcf6:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800bcf8:	1e5a      	subs	r2, r3, #1
 800bcfa:	3203      	adds	r2, #3
 800bcfc:	d902      	bls.n	800bd04 <StreamVToPort+0x2c>
}
 800bcfe:	2000      	movs	r0, #0
 800bd00:	b002      	add	sp, #8
 800bd02:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800bd04:	0158      	lsls	r0, r3, #5
 800bd06:	1ac0      	subs	r0, r0, r3
 800bd08:	0080      	lsls	r0, r0, #2
 800bd0a:	18c0      	adds	r0, r0, r3
 800bd0c:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800bd0e:	21fa      	movs	r1, #250	; 0xfa
 800bd10:	0089      	lsls	r1, r1, #2
 800bd12:	f7f4 fa13 	bl	800013c <__udivsi3>
 800bd16:	0001      	movs	r1, r0
 800bd18:	4b10      	ldr	r3, [pc, #64]	; (800bd5c <StreamVToPort+0x84>)
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	23ff      	movs	r3, #255	; 0xff
 800bd1e:	2200      	movs	r2, #0
 800bd20:	480f      	ldr	r0, [pc, #60]	; (800bd60 <StreamVToPort+0x88>)
 800bd22:	f003 fff3 	bl	800fd0c <xTimerCreate>
 800bd26:	0004      	movs	r4, r0
 800bd28:	4b0e      	ldr	r3, [pc, #56]	; (800bd64 <StreamVToPort+0x8c>)
 800bd2a:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800bd2c:	f003 fa86 	bl	800f23c <xTaskGetTickCount>
 800bd30:	0002      	movs	r2, r0
 800bd32:	2301      	movs	r3, #1
 800bd34:	425b      	negs	r3, r3
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	0020      	movs	r0, r4
 800bd3e:	f004 f805 	bl	800fd4c <xTimerGenericCommand>
 800bd42:	e7dc      	b.n	800bcfe <StreamVToPort+0x26>
 800bd44:	200062c5 	.word	0x200062c5
 800bd48:	200064e8 	.word	0x200064e8
 800bd4c:	20006470 	.word	0x20006470
 800bd50:	200064ec 	.word	0x200064ec
 800bd54:	200062c4 	.word	0x200062c4
 800bd58:	20000094 	.word	0x20000094
 800bd5c:	0800b429 	.word	0x0800b429
 800bd60:	0801a50c 	.word	0x0801a50c
 800bd64:	20000f2c 	.word	0x20000f2c

0800bd68 <StreamAToPort>:
		uint32_t Timeout) {
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	b082      	sub	sp, #8
	global_port = Port;
 800bd6c:	4c19      	ldr	r4, [pc, #100]	; (800bdd4 <StreamAToPort+0x6c>)
 800bd6e:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800bd70:	4819      	ldr	r0, [pc, #100]	; (800bdd8 <StreamAToPort+0x70>)
 800bd72:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800bd74:	4919      	ldr	r1, [pc, #100]	; (800bddc <StreamAToPort+0x74>)
 800bd76:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800bd78:	4a19      	ldr	r2, [pc, #100]	; (800bde0 <StreamAToPort+0x78>)
 800bd7a:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	4919      	ldr	r1, [pc, #100]	; (800bde4 <StreamAToPort+0x7c>)
 800bd80:	700a      	strb	r2, [r1, #0]
	unit = Amp;
 800bd82:	4919      	ldr	r1, [pc, #100]	; (800bde8 <StreamAToPort+0x80>)
 800bd84:	700a      	strb	r2, [r1, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800bd86:	1e5a      	subs	r2, r3, #1
 800bd88:	3203      	adds	r2, #3
 800bd8a:	d902      	bls.n	800bd92 <StreamAToPort+0x2a>
}
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	b002      	add	sp, #8
 800bd90:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800bd92:	0158      	lsls	r0, r3, #5
 800bd94:	1ac0      	subs	r0, r0, r3
 800bd96:	0080      	lsls	r0, r0, #2
 800bd98:	18c0      	adds	r0, r0, r3
 800bd9a:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800bd9c:	21fa      	movs	r1, #250	; 0xfa
 800bd9e:	0089      	lsls	r1, r1, #2
 800bda0:	f7f4 f9cc 	bl	800013c <__udivsi3>
 800bda4:	0001      	movs	r1, r0
 800bda6:	4b11      	ldr	r3, [pc, #68]	; (800bdec <StreamAToPort+0x84>)
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	23ff      	movs	r3, #255	; 0xff
 800bdac:	2200      	movs	r2, #0
 800bdae:	4810      	ldr	r0, [pc, #64]	; (800bdf0 <StreamAToPort+0x88>)
 800bdb0:	f003 ffac 	bl	800fd0c <xTimerCreate>
 800bdb4:	0004      	movs	r4, r0
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <StreamAToPort+0x8c>)
 800bdb8:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800bdba:	f003 fa3f 	bl	800f23c <xTaskGetTickCount>
 800bdbe:	0002      	movs	r2, r0
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	425b      	negs	r3, r3
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2101      	movs	r1, #1
 800bdca:	0020      	movs	r0, r4
 800bdcc:	f003 ffbe 	bl	800fd4c <xTimerGenericCommand>
 800bdd0:	e7dc      	b.n	800bd8c <StreamAToPort+0x24>
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	200062c5 	.word	0x200062c5
 800bdd8:	200064e8 	.word	0x200064e8
 800bddc:	20006470 	.word	0x20006470
 800bde0:	200064ec 	.word	0x200064ec
 800bde4:	200062c4 	.word	0x200062c4
 800bde8:	20000094 	.word	0x20000094
 800bdec:	0800b429 	.word	0x0800b429
 800bdf0:	0801a50c 	.word	0x0801a50c
 800bdf4:	20000f2c 	.word	0x20000f2c

0800bdf8 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800bdf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	ab08      	add	r3, sp, #32
 800bdfe:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800be00:	4b34      	ldr	r3, [pc, #208]	; (800bed4 <Module_MessagingTask+0xdc>)
 800be02:	469c      	mov	ip, r3
 800be04:	4460      	add	r0, ip
 800be06:	b283      	uxth	r3, r0
 800be08:	2b04      	cmp	r3, #4
 800be0a:	d860      	bhi.n	800bece <Module_MessagingTask+0xd6>
 800be0c:	0098      	lsls	r0, r3, #2
 800be0e:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <Module_MessagingTask+0xe0>)
 800be10:	581b      	ldr	r3, [r3, r0]
 800be12:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be14:	1e4f      	subs	r7, r1, #1
		timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800be16:	4d31      	ldr	r5, [pc, #196]	; (800bedc <Module_MessagingTask+0xe4>)
 800be18:	00fe      	lsls	r6, r7, #3
 800be1a:	1bf0      	subs	r0, r6, r7
 800be1c:	00c0      	lsls	r0, r0, #3
 800be1e:	1828      	adds	r0, r5, r0
 800be20:	1900      	adds	r0, r0, r4
 800be22:	7943      	ldrb	r3, [r0, #5]
 800be24:	061b      	lsls	r3, r3, #24
				+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)
 800be26:	7982      	ldrb	r2, [r0, #6]
 800be28:	0412      	lsls	r2, r2, #16
 800be2a:	189b      	adds	r3, r3, r2
				+ cMessage[port - 1][8 + shift];
 800be2c:	7a02      	ldrb	r2, [r0, #8]
		timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800be2e:	189b      	adds	r3, r3, r2
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800be30:	79c2      	ldrb	r2, [r0, #7]
 800be32:	0212      	lsls	r2, r2, #8
		timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800be34:	189b      	adds	r3, r3, r2
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be36:	7842      	ldrb	r2, [r0, #1]
 800be38:	0612      	lsls	r2, r2, #24
				+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)
 800be3a:	7881      	ldrb	r1, [r0, #2]
 800be3c:	0409      	lsls	r1, r1, #16
 800be3e:	1852      	adds	r2, r2, r1
				+ cMessage[port - 1][4 + shift];
 800be40:	7901      	ldrb	r1, [r0, #4]
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be42:	1852      	adds	r2, r2, r1
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800be44:	78c1      	ldrb	r1, [r0, #3]
 800be46:	0209      	lsls	r1, r1, #8
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be48:	1852      	adds	r2, r2, r1
		StreamVToPort(cMessage[port - 1][9 + shift],
 800be4a:	7a81      	ldrb	r1, [r0, #10]
 800be4c:	7a40      	ldrb	r0, [r0, #9]
 800be4e:	f7ff ff43 	bl	800bcd8 <StreamVToPort>
	Module_Status result = H2AR3_OK;
 800be52:	2000      	movs	r0, #0
}
 800be54:	b003      	add	sp, #12
 800be56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be58:	1e4f      	subs	r7, r1, #1
		timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800be5a:	4d20      	ldr	r5, [pc, #128]	; (800bedc <Module_MessagingTask+0xe4>)
 800be5c:	00fe      	lsls	r6, r7, #3
 800be5e:	1bf0      	subs	r0, r6, r7
 800be60:	00c0      	lsls	r0, r0, #3
 800be62:	1828      	adds	r0, r5, r0
 800be64:	1900      	adds	r0, r0, r4
 800be66:	7943      	ldrb	r3, [r0, #5]
 800be68:	061b      	lsls	r3, r3, #24
				+ ((uint32_t) cMessage[port - 1][6 + shift] << 16)
 800be6a:	7982      	ldrb	r2, [r0, #6]
 800be6c:	0412      	lsls	r2, r2, #16
 800be6e:	189b      	adds	r3, r3, r2
				+ cMessage[port - 1][8 + shift];
 800be70:	7a02      	ldrb	r2, [r0, #8]
		timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800be72:	189b      	adds	r3, r3, r2
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800be74:	79c2      	ldrb	r2, [r0, #7]
 800be76:	0212      	lsls	r2, r2, #8
		timeout = ((uint32_t) cMessage[port - 1][5 + shift] << 24)
 800be78:	189b      	adds	r3, r3, r2
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be7a:	7842      	ldrb	r2, [r0, #1]
 800be7c:	0612      	lsls	r2, r2, #24
				+ ((uint32_t) cMessage[port - 1][2 + shift] << 16)
 800be7e:	7881      	ldrb	r1, [r0, #2]
 800be80:	0409      	lsls	r1, r1, #16
 800be82:	1852      	adds	r2, r2, r1
				+ cMessage[port - 1][4 + shift];
 800be84:	7901      	ldrb	r1, [r0, #4]
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be86:	1852      	adds	r2, r2, r1
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800be88:	78c1      	ldrb	r1, [r0, #3]
 800be8a:	0209      	lsls	r1, r1, #8
		period = ((uint32_t) cMessage[port - 1][1 + shift] << 24)
 800be8c:	1852      	adds	r2, r2, r1
		StreamAToPort(cMessage[port - 1][9 + shift],
 800be8e:	7a81      	ldrb	r1, [r0, #10]
 800be90:	7a40      	ldrb	r0, [r0, #9]
 800be92:	f7ff ff69 	bl	800bd68 <StreamAToPort>
	Module_Status result = H2AR3_OK;
 800be96:	2000      	movs	r0, #0
		break;
 800be98:	e7dc      	b.n	800be54 <Module_MessagingTask+0x5c>
		global_mode = IDLE_CASE;
 800be9a:	4b11      	ldr	r3, [pc, #68]	; (800bee0 <Module_MessagingTask+0xe8>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	701a      	strb	r2, [r3, #0]
		xTimerStop(xTimer, portMAX_DELAY);
 800bea0:	4b10      	ldr	r3, [pc, #64]	; (800bee4 <Module_MessagingTask+0xec>)
 800bea2:	6818      	ldr	r0, [r3, #0]
 800bea4:	2301      	movs	r3, #1
 800bea6:	425b      	negs	r3, r3
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	2300      	movs	r3, #0
 800beac:	2103      	movs	r1, #3
 800beae:	f003 ff4d 	bl	800fd4c <xTimerGenericCommand>
	Module_Status result = H2AR3_OK;
 800beb2:	2000      	movs	r0, #0
		break;
 800beb4:	e7ce      	b.n	800be54 <Module_MessagingTask+0x5c>
	*volt = measured_volt;
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <Module_MessagingTask+0xf0>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4b0c      	ldr	r3, [pc, #48]	; (800beec <Module_MessagingTask+0xf4>)
 800bebc:	601a      	str	r2, [r3, #0]
	Module_Status result = H2AR3_OK;
 800bebe:	2000      	movs	r0, #0
 800bec0:	e7c8      	b.n	800be54 <Module_MessagingTask+0x5c>
	*curr = measured_amp;
 800bec2:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <Module_MessagingTask+0xf8>)
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	4b0b      	ldr	r3, [pc, #44]	; (800bef4 <Module_MessagingTask+0xfc>)
 800bec8:	601a      	str	r2, [r3, #0]
	Module_Status result = H2AR3_OK;
 800beca:	2000      	movs	r0, #0
 800becc:	e7c2      	b.n	800be54 <Module_MessagingTask+0x5c>
		result = H2AR3_ERR_UnknownMessage;
 800bece:	2001      	movs	r0, #1
 800bed0:	e7c0      	b.n	800be54 <Module_MessagingTask+0x5c>
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	fffff7cc 	.word	0xfffff7cc
 800bed8:	0801a4b0 	.word	0x0801a4b0
 800bedc:	20000530 	.word	0x20000530
 800bee0:	200062c4 	.word	0x200062c4
 800bee4:	20000f2c 	.word	0x20000f2c
 800bee8:	200064e4 	.word	0x200064e4
 800beec:	200063f8 	.word	0x200063f8
 800bef0:	20006374 	.word	0x20006374
 800bef4:	200063fc 	.word	0x200063fc

0800bef8 <StreamVToBuffer>:
int StreamVToBuffer(float *Buffer, uint32_t Period, uint32_t Timeout) {
 800bef8:	b510      	push	{r4, lr}
 800befa:	b082      	sub	sp, #8
	global_period = Period;
 800befc:	4b18      	ldr	r3, [pc, #96]	; (800bf60 <StreamVToBuffer+0x68>)
 800befe:	6019      	str	r1, [r3, #0]
	global_timeout = Timeout;
 800bf00:	4b18      	ldr	r3, [pc, #96]	; (800bf64 <StreamVToBuffer+0x6c>)
 800bf02:	601a      	str	r2, [r3, #0]
	ptr_read_buffer = Buffer;
 800bf04:	4b18      	ldr	r3, [pc, #96]	; (800bf68 <StreamVToBuffer+0x70>)
 800bf06:	6018      	str	r0, [r3, #0]
	global_mode = STREAM_BUFFER_CASE;
 800bf08:	4b18      	ldr	r3, [pc, #96]	; (800bf6c <StreamVToBuffer+0x74>)
 800bf0a:	2103      	movs	r1, #3
 800bf0c:	7019      	strb	r1, [r3, #0]
	unit = Volt;
 800bf0e:	4b18      	ldr	r3, [pc, #96]	; (800bf70 <StreamVToBuffer+0x78>)
 800bf10:	3902      	subs	r1, #2
 800bf12:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800bf14:	1e53      	subs	r3, r2, #1
 800bf16:	3303      	adds	r3, #3
 800bf18:	d902      	bls.n	800bf20 <StreamVToBuffer+0x28>
}
 800bf1a:	2000      	movs	r0, #0
 800bf1c:	b002      	add	sp, #8
 800bf1e:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800bf20:	0150      	lsls	r0, r2, #5
 800bf22:	1a80      	subs	r0, r0, r2
 800bf24:	0080      	lsls	r0, r0, #2
 800bf26:	1880      	adds	r0, r0, r2
 800bf28:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Measurement Timeout",
 800bf2a:	21fa      	movs	r1, #250	; 0xfa
 800bf2c:	0089      	lsls	r1, r1, #2
 800bf2e:	f7f4 f905 	bl	800013c <__udivsi3>
 800bf32:	0001      	movs	r1, r0
 800bf34:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <StreamVToBuffer+0x7c>)
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	23ff      	movs	r3, #255	; 0xff
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	480e      	ldr	r0, [pc, #56]	; (800bf78 <StreamVToBuffer+0x80>)
 800bf3e:	f003 fee5 	bl	800fd0c <xTimerCreate>
 800bf42:	0004      	movs	r4, r0
 800bf44:	4b0d      	ldr	r3, [pc, #52]	; (800bf7c <StreamVToBuffer+0x84>)
 800bf46:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800bf48:	f003 f978 	bl	800f23c <xTaskGetTickCount>
 800bf4c:	0002      	movs	r2, r0
 800bf4e:	2301      	movs	r3, #1
 800bf50:	425b      	negs	r3, r3
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	2300      	movs	r3, #0
 800bf56:	2101      	movs	r1, #1
 800bf58:	0020      	movs	r0, r4
 800bf5a:	f003 fef7 	bl	800fd4c <xTimerGenericCommand>
 800bf5e:	e7dc      	b.n	800bf1a <StreamVToBuffer+0x22>
 800bf60:	20006470 	.word	0x20006470
 800bf64:	200064ec 	.word	0x200064ec
 800bf68:	20006380 	.word	0x20006380
 800bf6c:	200062c4 	.word	0x200062c4
 800bf70:	20000094 	.word	0x20000094
 800bf74:	0800b429 	.word	0x0800b429
 800bf78:	0801a4f8 	.word	0x0801a4f8
 800bf7c:	20000f2c 	.word	0x20000f2c

0800bf80 <StreamAToBuffer>:
int StreamAToBuffer(float *Buffer, uint32_t Period, uint32_t Timeout) {
 800bf80:	b510      	push	{r4, lr}
 800bf82:	b082      	sub	sp, #8
	global_period = Period;
 800bf84:	4b18      	ldr	r3, [pc, #96]	; (800bfe8 <StreamAToBuffer+0x68>)
 800bf86:	6019      	str	r1, [r3, #0]
	global_timeout = Timeout;
 800bf88:	4b18      	ldr	r3, [pc, #96]	; (800bfec <StreamAToBuffer+0x6c>)
 800bf8a:	601a      	str	r2, [r3, #0]
	ptr_read_buffer = Buffer;
 800bf8c:	4b18      	ldr	r3, [pc, #96]	; (800bff0 <StreamAToBuffer+0x70>)
 800bf8e:	6018      	str	r0, [r3, #0]
	global_mode = STREAM_BUFFER_CASE;
 800bf90:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <StreamAToBuffer+0x74>)
 800bf92:	2103      	movs	r1, #3
 800bf94:	7019      	strb	r1, [r3, #0]
	unit = Amp;
 800bf96:	4b18      	ldr	r3, [pc, #96]	; (800bff8 <StreamAToBuffer+0x78>)
 800bf98:	3901      	subs	r1, #1
 800bf9a:	7019      	strb	r1, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800bf9c:	1e53      	subs	r3, r2, #1
 800bf9e:	3303      	adds	r3, #3
 800bfa0:	d902      	bls.n	800bfa8 <StreamAToBuffer+0x28>
}
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	b002      	add	sp, #8
 800bfa6:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800bfa8:	0150      	lsls	r0, r2, #5
 800bfaa:	1a80      	subs	r0, r0, r2
 800bfac:	0080      	lsls	r0, r0, #2
 800bfae:	1880      	adds	r0, r0, r2
 800bfb0:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Measurement Timeout",
 800bfb2:	21fa      	movs	r1, #250	; 0xfa
 800bfb4:	0089      	lsls	r1, r1, #2
 800bfb6:	f7f4 f8c1 	bl	800013c <__udivsi3>
 800bfba:	0001      	movs	r1, r0
 800bfbc:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <StreamAToBuffer+0x7c>)
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	23ff      	movs	r3, #255	; 0xff
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	480e      	ldr	r0, [pc, #56]	; (800c000 <StreamAToBuffer+0x80>)
 800bfc6:	f003 fea1 	bl	800fd0c <xTimerCreate>
 800bfca:	0004      	movs	r4, r0
 800bfcc:	4b0d      	ldr	r3, [pc, #52]	; (800c004 <StreamAToBuffer+0x84>)
 800bfce:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800bfd0:	f003 f934 	bl	800f23c <xTaskGetTickCount>
 800bfd4:	0002      	movs	r2, r0
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	425b      	negs	r3, r3
 800bfda:	9300      	str	r3, [sp, #0]
 800bfdc:	2300      	movs	r3, #0
 800bfde:	2101      	movs	r1, #1
 800bfe0:	0020      	movs	r0, r4
 800bfe2:	f003 feb3 	bl	800fd4c <xTimerGenericCommand>
 800bfe6:	e7dc      	b.n	800bfa2 <StreamAToBuffer+0x22>
 800bfe8:	20006470 	.word	0x20006470
 800bfec:	200064ec 	.word	0x200064ec
 800bff0:	20006380 	.word	0x20006380
 800bff4:	200062c4 	.word	0x200062c4
 800bff8:	20000094 	.word	0x20000094
 800bffc:	0800b429 	.word	0x0800b429
 800c000:	0801a4f8 	.word	0x0801a4f8
 800c004:	20000f2c 	.word	0x20000f2c

0800c008 <Stop>:
int Stop(void) {
 800c008:	b500      	push	{lr}
 800c00a:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	4a06      	ldr	r2, [pc, #24]	; (800c028 <Stop+0x20>)
 800c010:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800c012:	4a06      	ldr	r2, [pc, #24]	; (800c02c <Stop+0x24>)
 800c014:	6810      	ldr	r0, [r2, #0]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	2200      	movs	r2, #0
 800c01a:	2103      	movs	r1, #3
 800c01c:	f003 fe96 	bl	800fd4c <xTimerGenericCommand>
}
 800c020:	2000      	movs	r0, #0
 800c022:	b003      	add	sp, #12
 800c024:	bd00      	pop	{pc}
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	200062c4 	.word	0x200062c4
 800c02c:	20000f2c 	.word	0x20000f2c

0800c030 <stopCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE stopCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800c030:	b510      	push	{r4, lr}

	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c032:	2800      	cmp	r0, #0
 800c034:	d101      	bne.n	800c03a <stopCommand+0xa>
 800c036:	b672      	cpsid	i
 800c038:	e7fe      	b.n	800c038 <stopCommand+0x8>
	volt_buffer = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	4a03      	ldr	r2, [pc, #12]	; (800c04c <stopCommand+0x1c>)
 800c03e:	6013      	str	r3, [r2, #0]
	amp_buffer = 0;
 800c040:	4a03      	ldr	r2, [pc, #12]	; (800c050 <stopCommand+0x20>)
 800c042:	6013      	str	r3, [r2, #0]
	Stop();
 800c044:	f7ff ffe0 	bl	800c008 <Stop>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800c048:	2000      	movs	r0, #0
 800c04a:	bd10      	pop	{r4, pc}
 800c04c:	2000637c 	.word	0x2000637c
 800c050:	2000624c 	.word	0x2000624c

0800c054 <StreamVToCLI>:
{
 800c054:	b510      	push	{r4, lr}
 800c056:	b082      	sub	sp, #8
	global_period=Period;
 800c058:	4b1a      	ldr	r3, [pc, #104]	; (800c0c4 <StreamVToCLI+0x70>)
 800c05a:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800c05c:	4b1a      	ldr	r3, [pc, #104]	; (800c0c8 <StreamVToCLI+0x74>)
 800c05e:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c060:	2301      	movs	r3, #1
 800c062:	4a1a      	ldr	r2, [pc, #104]	; (800c0cc <StreamVToCLI+0x78>)
 800c064:	7013      	strb	r3, [r2, #0]
	unit=Volt;
 800c066:	4a1a      	ldr	r2, [pc, #104]	; (800c0d0 <StreamVToCLI+0x7c>)
 800c068:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c06a:	1e4b      	subs	r3, r1, #1
 800c06c:	3303      	adds	r3, #3
 800c06e:	d909      	bls.n	800c084 <StreamVToCLI+0x30>
	if (global_timeout > 0)
 800c070:	4b15      	ldr	r3, [pc, #84]	; (800c0c8 <StreamVToCLI+0x74>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <StreamVToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c078:	4b16      	ldr	r3, [pc, #88]	; (800c0d4 <StreamVToCLI+0x80>)
 800c07a:	2201      	movs	r2, #1
 800c07c:	701a      	strb	r2, [r3, #0]
}
 800c07e:	2000      	movs	r0, #0
 800c080:	b002      	add	sp, #8
 800c082:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c084:	0148      	lsls	r0, r1, #5
 800c086:	1a40      	subs	r0, r0, r1
 800c088:	0080      	lsls	r0, r0, #2
 800c08a:	1840      	adds	r0, r0, r1
 800c08c:	00c0      	lsls	r0, r0, #3
 800c08e:	21fa      	movs	r1, #250	; 0xfa
 800c090:	0089      	lsls	r1, r1, #2
 800c092:	f7f4 f853 	bl	800013c <__udivsi3>
 800c096:	0001      	movs	r1, r0
 800c098:	4b0f      	ldr	r3, [pc, #60]	; (800c0d8 <StreamVToCLI+0x84>)
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	23ff      	movs	r3, #255	; 0xff
 800c09e:	2200      	movs	r2, #0
 800c0a0:	480e      	ldr	r0, [pc, #56]	; (800c0dc <StreamVToCLI+0x88>)
 800c0a2:	f003 fe33 	bl	800fd0c <xTimerCreate>
 800c0a6:	0004      	movs	r4, r0
 800c0a8:	4b0d      	ldr	r3, [pc, #52]	; (800c0e0 <StreamVToCLI+0x8c>)
 800c0aa:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c0ac:	f003 f8c6 	bl	800f23c <xTaskGetTickCount>
 800c0b0:	0002      	movs	r2, r0
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	0020      	movs	r0, r4
 800c0be:	f003 fe45 	bl	800fd4c <xTimerGenericCommand>
 800c0c2:	e7d5      	b.n	800c070 <StreamVToCLI+0x1c>
 800c0c4:	20006470 	.word	0x20006470
 800c0c8:	200064ec 	.word	0x200064ec
 800c0cc:	200062c4 	.word	0x200062c4
 800c0d0:	20000094 	.word	0x20000094
 800c0d4:	20000f24 	.word	0x20000f24
 800c0d8:	0800b429 	.word	0x0800b429
 800c0dc:	0801a4f8 	.word	0x0801a4f8
 800c0e0:	20000f2c 	.word	0x20000f2c

0800c0e4 <StreamAToCLI>:
{
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	b082      	sub	sp, #8
	global_period=Period;
 800c0e8:	4b1b      	ldr	r3, [pc, #108]	; (800c158 <StreamAToCLI+0x74>)
 800c0ea:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800c0ec:	4b1b      	ldr	r3, [pc, #108]	; (800c15c <StreamAToCLI+0x78>)
 800c0ee:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800c0f0:	4b1b      	ldr	r3, [pc, #108]	; (800c160 <StreamAToCLI+0x7c>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	701a      	strb	r2, [r3, #0]
	unit=Amp;
 800c0f6:	4b1b      	ldr	r3, [pc, #108]	; (800c164 <StreamAToCLI+0x80>)
 800c0f8:	3201      	adds	r2, #1
 800c0fa:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800c0fc:	1e4b      	subs	r3, r1, #1
 800c0fe:	3303      	adds	r3, #3
 800c100:	d909      	bls.n	800c116 <StreamAToCLI+0x32>
	if (global_timeout > 0)
 800c102:	4b16      	ldr	r3, [pc, #88]	; (800c15c <StreamAToCLI+0x78>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d002      	beq.n	800c110 <StreamAToCLI+0x2c>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800c10a:	4b17      	ldr	r3, [pc, #92]	; (800c168 <StreamAToCLI+0x84>)
 800c10c:	2201      	movs	r2, #1
 800c10e:	701a      	strb	r2, [r3, #0]
}
 800c110:	2000      	movs	r0, #0
 800c112:	b002      	add	sp, #8
 800c114:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800c116:	0148      	lsls	r0, r1, #5
 800c118:	1a40      	subs	r0, r0, r1
 800c11a:	0080      	lsls	r0, r0, #2
 800c11c:	1840      	adds	r0, r0, r1
 800c11e:	00c0      	lsls	r0, r0, #3
 800c120:	21fa      	movs	r1, #250	; 0xfa
 800c122:	0089      	lsls	r1, r1, #2
 800c124:	f7f4 f80a 	bl	800013c <__udivsi3>
 800c128:	0001      	movs	r1, r0
 800c12a:	4b10      	ldr	r3, [pc, #64]	; (800c16c <StreamAToCLI+0x88>)
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	23ff      	movs	r3, #255	; 0xff
 800c130:	2200      	movs	r2, #0
 800c132:	480f      	ldr	r0, [pc, #60]	; (800c170 <StreamAToCLI+0x8c>)
 800c134:	f003 fdea 	bl	800fd0c <xTimerCreate>
 800c138:	0004      	movs	r4, r0
 800c13a:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <StreamAToCLI+0x90>)
 800c13c:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800c13e:	f003 f87d 	bl	800f23c <xTaskGetTickCount>
 800c142:	0002      	movs	r2, r0
 800c144:	2301      	movs	r3, #1
 800c146:	425b      	negs	r3, r3
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	2300      	movs	r3, #0
 800c14c:	2101      	movs	r1, #1
 800c14e:	0020      	movs	r0, r4
 800c150:	f003 fdfc 	bl	800fd4c <xTimerGenericCommand>
 800c154:	e7d5      	b.n	800c102 <StreamAToCLI+0x1e>
 800c156:	46c0      	nop			; (mov r8, r8)
 800c158:	20006470 	.word	0x20006470
 800c15c:	200064ec 	.word	0x200064ec
 800c160:	200062c4 	.word	0x200062c4
 800c164:	20000094 	.word	0x20000094
 800c168:	20000f24 	.word	0x20000f24
 800c16c:	0800b429 	.word	0x0800b429
 800c170:	0801a4f8 	.word	0x0801a4f8
 800c174:	20000f2c 	.word	0x20000f2c

0800c178 <demoCommand>:
}

/*-----------------------------------------------------------*/

portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800c178:	b530      	push	{r4, r5, lr}
 800c17a:	b083      	sub	sp, #12
 800c17c:	1e04      	subs	r4, r0, #0
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 800c17e:	d101      	bne.n	800c184 <demoCommand+0xc>
 800c180:	b672      	cpsid	i
 800c182:	e7fe      	b.n	800c182 <demoCommand+0xa>



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800c184:	222d      	movs	r2, #45	; 0x2d
 800c186:	491e      	ldr	r1, [pc, #120]	; (800c200 <demoCommand+0x88>)
 800c188:	f007 fc4f 	bl	8013a2a <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c18c:	0020      	movs	r0, r4
 800c18e:	f7f3 ffc3 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800c192:	b282      	uxth	r2, r0
 800c194:	4b1b      	ldr	r3, [pc, #108]	; (800c204 <demoCommand+0x8c>)
 800c196:	7818      	ldrb	r0, [r3, #0]
 800c198:	2301      	movs	r3, #1
 800c19a:	425b      	negs	r3, r3
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	3333      	adds	r3, #51	; 0x33
 800c1a0:	0021      	movs	r1, r4
 800c1a2:	f001 ff97 	bl	800e0d4 <writePxMutex>
		switch (unit) {
 800c1a6:	4b18      	ldr	r3, [pc, #96]	; (800c208 <demoCommand+0x90>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d007      	beq.n	800c1be <demoCommand+0x46>
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d020      	beq.n	800c1f4 <demoCommand+0x7c>
			break;
		case Amp:
			StreamAToCLI(500, 10000);
			break;
		default:
			StreamVToCLI(500, 10000);
 800c1b2:	20fa      	movs	r0, #250	; 0xfa
 800c1b4:	4915      	ldr	r1, [pc, #84]	; (800c20c <demoCommand+0x94>)
 800c1b6:	0040      	lsls	r0, r0, #1
 800c1b8:	f7ff ff4c 	bl	800c054 <StreamVToCLI>
 800c1bc:	e004      	b.n	800c1c8 <demoCommand+0x50>
			StreamVToCLI(500, 10000);
 800c1be:	20fa      	movs	r0, #250	; 0xfa
 800c1c0:	4912      	ldr	r1, [pc, #72]	; (800c20c <demoCommand+0x94>)
 800c1c2:	0040      	lsls	r0, r0, #1
 800c1c4:	f7ff ff46 	bl	800c054 <StreamVToCLI>
		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800c1c8:	4b11      	ldr	r3, [pc, #68]	; (800c210 <demoCommand+0x98>)
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d006      	beq.n	800c1de <demoCommand+0x66>
 800c1d0:	4d0f      	ldr	r5, [pc, #60]	; (800c210 <demoCommand+0x98>)
			Delay_ms(1);
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	f004 f8d6 	bl	8010384 <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800c1d8:	782b      	ldrb	r3, [r5, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1f9      	bne.n	800c1d2 <demoCommand+0x5a>
	if (result != H2AR3_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800c1de:	0020      	movs	r0, r4
 800c1e0:	f7f3 ff9a 	bl	8000118 <strlen>
 800c1e4:	0002      	movs	r2, r0
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	0020      	movs	r0, r4
 800c1ea:	f007 fc27 	bl	8013a3c <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	b003      	add	sp, #12
 800c1f2:	bd30      	pop	{r4, r5, pc}
			StreamAToCLI(500, 10000);
 800c1f4:	20fa      	movs	r0, #250	; 0xfa
 800c1f6:	4905      	ldr	r1, [pc, #20]	; (800c20c <demoCommand+0x94>)
 800c1f8:	0040      	lsls	r0, r0, #1
 800c1fa:	f7ff ff73 	bl	800c0e4 <StreamAToCLI>
			break;
 800c1fe:	e7e3      	b.n	800c1c8 <demoCommand+0x50>
 800c200:	0801a520 	.word	0x0801a520
 800c204:	2000029f 	.word	0x2000029f
 800c208:	20000094 	.word	0x20000094
 800c20c:	00002710 	.word	0x00002710
 800c210:	20000f24 	.word	0x20000f24

0800c214 <streamCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	b08b      	sub	sp, #44	; 0x2c
 800c218:	0005      	movs	r5, r0
 800c21a:	9202      	str	r2, [sp, #8]
	portBASE_TYPE xParameterStringLength1 = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength2 = 0;
 800c220:	9308      	str	r3, [sp, #32]
	portBASE_TYPE xParameterStringLength3 = 0;
 800c222:	9307      	str	r3, [sp, #28]
	portBASE_TYPE xParameterStringLength4 = 0;
 800c224:	9306      	str	r3, [sp, #24]
	configASSERT(pcWriteBuffer);
 800c226:	2800      	cmp	r0, #0
 800c228:	d101      	bne.n	800c22e <streamCommand+0x1a>
 800c22a:	b672      	cpsid	i
 800c22c:	e7fe      	b.n	800c22c <streamCommand+0x18>
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800c22e:	aa09      	add	r2, sp, #36	; 0x24
 800c230:	2101      	movs	r1, #1
 800c232:	9f02      	ldr	r7, [sp, #8]
 800c234:	0038      	movs	r0, r7
 800c236:	f002 f993 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800c23a:	0006      	movs	r6, r0
	pcParameterString2 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 2,
 800c23c:	aa08      	add	r2, sp, #32
 800c23e:	2102      	movs	r1, #2
 800c240:	0038      	movs	r0, r7
 800c242:	f002 f98d 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800c246:	0004      	movs	r4, r0
	pcParameterString3 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 3,
 800c248:	aa07      	add	r2, sp, #28
 800c24a:	2103      	movs	r1, #3
 800c24c:	9702      	str	r7, [sp, #8]
 800c24e:	0038      	movs	r0, r7
 800c250:	f002 f986 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800c254:	0007      	movs	r7, r0
	pcParameterString4 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 4,
 800c256:	aa06      	add	r2, sp, #24
 800c258:	2104      	movs	r1, #4
 800c25a:	9802      	ldr	r0, [sp, #8]
 800c25c:	f002 f980 	bl	800e560 <FreeRTOS_CLIGetParameter>
 800c260:	9005      	str	r0, [sp, #20]
	if (NULL != pcParameterString1) {
 800c262:	2e00      	cmp	r6, #0
 800c264:	d041      	beq.n	800c2ea <streamCommand+0xd6>
		period = atoi((char*) pcParameterString1);
 800c266:	0030      	movs	r0, r6
 800c268:	f007 fb67 	bl	801393a <atoi>
 800c26c:	9002      	str	r0, [sp, #8]
	Module_Status result = H2AR3_OK;
 800c26e:	2600      	movs	r6, #0
	if (NULL != pcParameterString2) {
 800c270:	2c00      	cmp	r4, #0
 800c272:	d043      	beq.n	800c2fc <streamCommand+0xe8>
		if (!strncmp((const char*) pcParameterString2, "inf", 3)) {
 800c274:	2203      	movs	r2, #3
 800c276:	495c      	ldr	r1, [pc, #368]	; (800c3e8 <streamCommand+0x1d4>)
 800c278:	0020      	movs	r0, r4
 800c27a:	f008 fb81 	bl	8014980 <strncmp>
 800c27e:	2800      	cmp	r0, #0
 800c280:	d137      	bne.n	800c2f2 <streamCommand+0xde>
			timeout = portMAX_DELAY;
 800c282:	2401      	movs	r4, #1
 800c284:	4264      	negs	r4, r4
	if (NULL != pcParameterString3
 800c286:	2f00      	cmp	r7, #0
 800c288:	d100      	bne.n	800c28c <streamCommand+0x78>
 800c28a:	e074      	b.n	800c376 <streamCommand+0x162>
			&& !strncmp((const char*) pcParameterString3, "buffer", 6)) {
 800c28c:	2206      	movs	r2, #6
 800c28e:	4957      	ldr	r1, [pc, #348]	; (800c3ec <streamCommand+0x1d8>)
 800c290:	0038      	movs	r0, r7
 800c292:	f008 fb75 	bl	8014980 <strncmp>
 800c296:	2800      	cmp	r0, #0
 800c298:	d033      	beq.n	800c302 <streamCommand+0xee>
	else if (NULL != pcParameterString3 && NULL != pcParameterString4
 800c29a:	9b05      	ldr	r3, [sp, #20]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d062      	beq.n	800c366 <streamCommand+0x152>
			&& pcParameterString3[0] == 'p') {
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	56fb      	ldrsb	r3, [r7, r3]
 800c2a4:	2b70      	cmp	r3, #112	; 0x70
 800c2a6:	d15e      	bne.n	800c366 <streamCommand+0x152>
		port = (uint8_t) atol((char*) pcParameterString3 + 1);
 800c2a8:	1c78      	adds	r0, r7, #1
 800c2aa:	f007 fb4c 	bl	8013946 <atol>
 800c2ae:	9004      	str	r0, [sp, #16]
 800c2b0:	466b      	mov	r3, sp
 800c2b2:	7c1b      	ldrb	r3, [r3, #16]
 800c2b4:	9303      	str	r3, [sp, #12]
		module = (uint8_t) GetID((char*) pcParameterString4);
 800c2b6:	9805      	ldr	r0, [sp, #20]
 800c2b8:	f7f7 ff86 	bl	80041c8 <GetID>
 800c2bc:	b2c7      	uxtb	r7, r0
		if (module != (uint8_t) BOS_ERR_WrongName) {
 800c2be:	2f64      	cmp	r7, #100	; 0x64
 800c2c0:	d04a      	beq.n	800c358 <streamCommand+0x144>
			sprintf((char*) pcWriteBuffer, (char*) pcMessageModule, port,
 800c2c2:	466b      	mov	r3, sp
 800c2c4:	7c1a      	ldrb	r2, [r3, #16]
 800c2c6:	003b      	movs	r3, r7
 800c2c8:	4949      	ldr	r1, [pc, #292]	; (800c3f0 <streamCommand+0x1dc>)
 800c2ca:	0028      	movs	r0, r5
 800c2cc:	f008 fb14 	bl	80148f8 <siprintf>
			switch (unit) {
 800c2d0:	4b48      	ldr	r3, [pc, #288]	; (800c3f4 <streamCommand+0x1e0>)
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d031      	beq.n	800c33c <streamCommand+0x128>
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d036      	beq.n	800c34a <streamCommand+0x136>
				StreamVToPort(port, module, period, timeout);
 800c2dc:	0023      	movs	r3, r4
 800c2de:	9a02      	ldr	r2, [sp, #8]
 800c2e0:	0039      	movs	r1, r7
 800c2e2:	9803      	ldr	r0, [sp, #12]
 800c2e4:	f7ff fcf8 	bl	800bcd8 <StreamVToPort>
 800c2e8:	e042      	b.n	800c370 <streamCommand+0x15c>
		result = H2AR3_ERR_WrongParams;
 800c2ea:	2602      	movs	r6, #2
	uint32_t period = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9302      	str	r3, [sp, #8]
 800c2f0:	e7be      	b.n	800c270 <streamCommand+0x5c>
			timeout = atoi((char*) pcParameterString2);
 800c2f2:	0020      	movs	r0, r4
 800c2f4:	f007 fb21 	bl	801393a <atoi>
 800c2f8:	0004      	movs	r4, r0
 800c2fa:	e7c4      	b.n	800c286 <streamCommand+0x72>
		result = H2AR3_ERR_WrongParams;
 800c2fc:	2602      	movs	r6, #2
	uint32_t timeout = 0;
 800c2fe:	2400      	movs	r4, #0
 800c300:	e7c1      	b.n	800c286 <streamCommand+0x72>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageBuffer);
 800c302:	2270      	movs	r2, #112	; 0x70
 800c304:	493c      	ldr	r1, [pc, #240]	; (800c3f8 <streamCommand+0x1e4>)
 800c306:	0028      	movs	r0, r5
 800c308:	f007 fb8f 	bl	8013a2a <memcpy>
		switch (unit) {
 800c30c:	4b39      	ldr	r3, [pc, #228]	; (800c3f4 <streamCommand+0x1e0>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d007      	beq.n	800c324 <streamCommand+0x110>
 800c314:	2b02      	cmp	r3, #2
 800c316:	d00b      	beq.n	800c330 <streamCommand+0x11c>
			StreamVToBuffer(&volt_buffer, period, timeout);
 800c318:	0022      	movs	r2, r4
 800c31a:	9902      	ldr	r1, [sp, #8]
 800c31c:	4837      	ldr	r0, [pc, #220]	; (800c3fc <streamCommand+0x1e8>)
 800c31e:	f7ff fdeb 	bl	800bef8 <StreamVToBuffer>
 800c322:	e025      	b.n	800c370 <streamCommand+0x15c>
			StreamVToBuffer(&volt_buffer, period, timeout);
 800c324:	0022      	movs	r2, r4
 800c326:	9902      	ldr	r1, [sp, #8]
 800c328:	4834      	ldr	r0, [pc, #208]	; (800c3fc <streamCommand+0x1e8>)
 800c32a:	f7ff fde5 	bl	800bef8 <StreamVToBuffer>
			break;
 800c32e:	e01f      	b.n	800c370 <streamCommand+0x15c>
			StreamAToBuffer(&amp_buffer, period, timeout);
 800c330:	0022      	movs	r2, r4
 800c332:	9902      	ldr	r1, [sp, #8]
 800c334:	4832      	ldr	r0, [pc, #200]	; (800c400 <streamCommand+0x1ec>)
 800c336:	f7ff fe23 	bl	800bf80 <StreamAToBuffer>
			break;
 800c33a:	e019      	b.n	800c370 <streamCommand+0x15c>
				StreamVToPort(port, module, period, timeout);
 800c33c:	0023      	movs	r3, r4
 800c33e:	9a02      	ldr	r2, [sp, #8]
 800c340:	0039      	movs	r1, r7
 800c342:	9803      	ldr	r0, [sp, #12]
 800c344:	f7ff fcc8 	bl	800bcd8 <StreamVToPort>
				break;
 800c348:	e012      	b.n	800c370 <streamCommand+0x15c>
				StreamAToPort(port, module, period, timeout);
 800c34a:	0023      	movs	r3, r4
 800c34c:	9a02      	ldr	r2, [sp, #8]
 800c34e:	0039      	movs	r1, r7
 800c350:	9803      	ldr	r0, [sp, #12]
 800c352:	f7ff fd09 	bl	800bd68 <StreamAToPort>
				break;
 800c356:	e00b      	b.n	800c370 <streamCommand+0x15c>
			strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongName);
 800c358:	2214      	movs	r2, #20
 800c35a:	492a      	ldr	r1, [pc, #168]	; (800c404 <streamCommand+0x1f0>)
 800c35c:	0028      	movs	r0, r5
 800c35e:	f007 fb64 	bl	8013a2a <memcpy>
	if (H2AR3_ERR_WrongParams == result) {
 800c362:	2e02      	cmp	r6, #2
 800c364:	d104      	bne.n	800c370 <streamCommand+0x15c>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
 800c366:	2212      	movs	r2, #18
 800c368:	4927      	ldr	r1, [pc, #156]	; (800c408 <streamCommand+0x1f4>)
 800c36a:	0028      	movs	r0, r5
 800c36c:	f007 fb5d 	bl	8013a2a <memcpy>
}
 800c370:	2000      	movs	r0, #0
 800c372:	b00b      	add	sp, #44	; 0x2c
 800c374:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI);
 800c376:	2225      	movs	r2, #37	; 0x25
 800c378:	4924      	ldr	r1, [pc, #144]	; (800c40c <streamCommand+0x1f8>)
 800c37a:	0028      	movs	r0, r5
 800c37c:	f007 fb55 	bl	8013a2a <memcpy>
				writePxMutex(PcPort, (char *)pcWriteBuffer, strlen((char *)pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800c380:	0028      	movs	r0, r5
 800c382:	f7f3 fec9 	bl	8000118 <strlen>
 800c386:	b282      	uxth	r2, r0
 800c388:	4b21      	ldr	r3, [pc, #132]	; (800c410 <streamCommand+0x1fc>)
 800c38a:	7818      	ldrb	r0, [r3, #0]
 800c38c:	2301      	movs	r3, #1
 800c38e:	425b      	negs	r3, r3
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	3333      	adds	r3, #51	; 0x33
 800c394:	0029      	movs	r1, r5
 800c396:	f001 fe9d 	bl	800e0d4 <writePxMutex>
				switch (unit) {
 800c39a:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <streamCommand+0x1e0>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d006      	beq.n	800c3b0 <streamCommand+0x19c>
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d01b      	beq.n	800c3de <streamCommand+0x1ca>
					StreamVToCLI(period, timeout);
 800c3a6:	0021      	movs	r1, r4
 800c3a8:	9802      	ldr	r0, [sp, #8]
 800c3aa:	f7ff fe53 	bl	800c054 <StreamVToCLI>
 800c3ae:	e003      	b.n	800c3b8 <streamCommand+0x1a4>
					StreamVToCLI(period, timeout);
 800c3b0:	0021      	movs	r1, r4
 800c3b2:	9802      	ldr	r0, [sp, #8]
 800c3b4:	f7ff fe4e 	bl	800c054 <StreamVToCLI>
				while(startMeasurementRanging != STOP_MEASUREMENT_RANGING){taskYIELD();}
 800c3b8:	4b16      	ldr	r3, [pc, #88]	; (800c414 <streamCommand+0x200>)
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <streamCommand+0x1b8>
 800c3c0:	4c14      	ldr	r4, [pc, #80]	; (800c414 <streamCommand+0x200>)
 800c3c2:	f003 fe61 	bl	8010088 <vPortYield>
 800c3c6:	7823      	ldrb	r3, [r4, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d1fa      	bne.n	800c3c2 <streamCommand+0x1ae>
				memset((char *) pcWriteBuffer, 0, strlen((char *)pcWriteBuffer));
 800c3cc:	0028      	movs	r0, r5
 800c3ce:	f7f3 fea3 	bl	8000118 <strlen>
 800c3d2:	0002      	movs	r2, r0
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	0028      	movs	r0, r5
 800c3d8:	f007 fb30 	bl	8013a3c <memset>
 800c3dc:	e7c1      	b.n	800c362 <streamCommand+0x14e>
					StreamAToCLI(period, timeout);
 800c3de:	0021      	movs	r1, r4
 800c3e0:	9802      	ldr	r0, [sp, #8]
 800c3e2:	f7ff fe7f 	bl	800c0e4 <StreamAToCLI>
					break;
 800c3e6:	e7e7      	b.n	800c3b8 <streamCommand+0x1a4>
 800c3e8:	0801a6c4 	.word	0x0801a6c4
 800c3ec:	0801a6c8 	.word	0x0801a6c8
 800c3f0:	0801a740 	.word	0x0801a740
 800c3f4:	20000094 	.word	0x20000094
 800c3f8:	0801a6d0 	.word	0x0801a6d0
 800c3fc:	2000637c 	.word	0x2000637c
 800c400:	2000624c 	.word	0x2000624c
 800c404:	0801a774 	.word	0x0801a774
 800c408:	0801a7b0 	.word	0x0801a7b0
 800c40c:	0801a788 	.word	0x0801a788
 800c410:	2000029f 	.word	0x2000029f
 800c414:	20000f24 	.word	0x20000f24

0800c418 <ADC_Select_CH7>:
 Description   : source file Contains Peripheral ADC setup .
 */
/* Includes ------------------------------------------------------------------*/
#include <H2AR3_adc.h>

void ADC_Select_CH7(void) {
 800c418:	b500      	push	{lr}
 800c41a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800c41c:	2307      	movs	r3, #7
 800c41e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c420:	2380      	movs	r3, #128	; 0x80
 800c422:	015b      	lsls	r3, r3, #5
 800c424:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c426:	2304      	movs	r3, #4
 800c428:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c42a:	a901      	add	r1, sp, #4
 800c42c:	4802      	ldr	r0, [pc, #8]	; (800c438 <ADC_Select_CH7+0x20>)
 800c42e:	f004 fabf 	bl	80109b0 <HAL_ADC_ConfigChannel>

	}

}
 800c432:	b005      	add	sp, #20
 800c434:	bd00      	pop	{pc}
 800c436:	46c0      	nop			; (mov r8, r8)
 800c438:	200061e4 	.word	0x200061e4

0800c43c <ADC_Deselect_CH7>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH7(void) {
 800c43c:	b500      	push	{lr}
 800c43e:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800c440:	2307      	movs	r3, #7
 800c442:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800c444:	4b04      	ldr	r3, [pc, #16]	; (800c458 <ADC_Deselect_CH7+0x1c>)
 800c446:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c448:	2304      	movs	r3, #4
 800c44a:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c44c:	a901      	add	r1, sp, #4
 800c44e:	4803      	ldr	r0, [pc, #12]	; (800c45c <ADC_Deselect_CH7+0x20>)
 800c450:	f004 faae 	bl	80109b0 <HAL_ADC_ConfigChannel>

	}
}
 800c454:	b005      	add	sp, #20
 800c456:	bd00      	pop	{pc}
 800c458:	00001001 	.word	0x00001001
 800c45c:	200061e4 	.word	0x200061e4

0800c460 <ADC_Select_CH9>:


void ADC_Select_CH9(void) {
 800c460:	b500      	push	{lr}
 800c462:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800c464:	2309      	movs	r3, #9
 800c466:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c468:	2380      	movs	r3, #128	; 0x80
 800c46a:	015b      	lsls	r3, r3, #5
 800c46c:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c46e:	2304      	movs	r3, #4
 800c470:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c472:	a901      	add	r1, sp, #4
 800c474:	4802      	ldr	r0, [pc, #8]	; (800c480 <ADC_Select_CH9+0x20>)
 800c476:	f004 fa9b 	bl	80109b0 <HAL_ADC_ConfigChannel>

	}

}
 800c47a:	b005      	add	sp, #20
 800c47c:	bd00      	pop	{pc}
 800c47e:	46c0      	nop			; (mov r8, r8)
 800c480:	200061e4 	.word	0x200061e4

0800c484 <ADC_Deselect_CH9>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH9(void) {
 800c484:	b500      	push	{lr}
 800c486:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800c488:	2309      	movs	r3, #9
 800c48a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800c48c:	4b04      	ldr	r3, [pc, #16]	; (800c4a0 <ADC_Deselect_CH9+0x1c>)
 800c48e:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800c490:	2304      	movs	r3, #4
 800c492:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c494:	a901      	add	r1, sp, #4
 800c496:	4803      	ldr	r0, [pc, #12]	; (800c4a4 <ADC_Deselect_CH9+0x20>)
 800c498:	f004 fa8a 	bl	80109b0 <HAL_ADC_ConfigChannel>

	}
}
 800c49c:	b005      	add	sp, #20
 800c49e:	bd00      	pop	{pc}
 800c4a0:	00001001 	.word	0x00001001
 800c4a4:	200061e4 	.word	0x200061e4

0800c4a8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c4a8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c4aa:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c4b0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c4b2:	2280      	movs	r2, #128	; 0x80
 800c4b4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c4b6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4b8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c4ba:	3320      	adds	r3, #32
 800c4bc:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4be:	2380      	movs	r3, #128	; 0x80
 800c4c0:	019b      	lsls	r3, r3, #6
 800c4c2:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c4c4:	f004 fd04 	bl	8010ed0 <HAL_DMA_Init>
}
 800c4c8:	bd10      	pop	{r4, pc}

0800c4ca <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c4ca:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c4cc:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c4ce:	2310      	movs	r3, #16
 800c4d0:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c4d6:	2280      	movs	r2, #128	; 0x80
 800c4d8:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c4da:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c4dc:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c4de:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c4e0:	2380      	movs	r3, #128	; 0x80
 800c4e2:	019b      	lsls	r3, r3, #6
 800c4e4:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c4e6:	f004 fcf3 	bl	8010ed0 <HAL_DMA_Init>
}
 800c4ea:	bd10      	pop	{r4, pc}

0800c4ec <DMA_Init>:
{
 800c4ec:	b510      	push	{r4, lr}
 800c4ee:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c4f0:	4b1d      	ldr	r3, [pc, #116]	; (800c568 <DMA_Init+0x7c>)
 800c4f2:	6959      	ldr	r1, [r3, #20]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	4311      	orrs	r1, r2
 800c4f8:	6159      	str	r1, [r3, #20]
 800c4fa:	6959      	ldr	r1, [r3, #20]
 800c4fc:	400a      	ands	r2, r1
 800c4fe:	9200      	str	r2, [sp, #0]
 800c500:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c502:	6959      	ldr	r1, [r3, #20]
 800c504:	2202      	movs	r2, #2
 800c506:	4311      	orrs	r1, r2
 800c508:	6159      	str	r1, [r3, #20]
 800c50a:	695b      	ldr	r3, [r3, #20]
 800c50c:	401a      	ands	r2, r3
 800c50e:	9201      	str	r2, [sp, #4]
 800c510:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c512:	4c16      	ldr	r4, [pc, #88]	; (800c56c <DMA_Init+0x80>)
 800c514:	4916      	ldr	r1, [pc, #88]	; (800c570 <DMA_Init+0x84>)
 800c516:	0020      	movs	r0, r4
 800c518:	f7ff ffc6 	bl	800c4a8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c51c:	0020      	movs	r0, r4
 800c51e:	3038      	adds	r0, #56	; 0x38
 800c520:	4914      	ldr	r1, [pc, #80]	; (800c574 <DMA_Init+0x88>)
 800c522:	f7ff ffc1 	bl	800c4a8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c526:	0020      	movs	r0, r4
 800c528:	3070      	adds	r0, #112	; 0x70
 800c52a:	4913      	ldr	r1, [pc, #76]	; (800c578 <DMA_Init+0x8c>)
 800c52c:	f7ff ffbc 	bl	800c4a8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c530:	0020      	movs	r0, r4
 800c532:	30a8      	adds	r0, #168	; 0xa8
 800c534:	4911      	ldr	r1, [pc, #68]	; (800c57c <DMA_Init+0x90>)
 800c536:	f7ff ffb7 	bl	800c4a8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c53a:	0020      	movs	r0, r4
 800c53c:	30e0      	adds	r0, #224	; 0xe0
 800c53e:	4910      	ldr	r1, [pc, #64]	; (800c580 <DMA_Init+0x94>)
 800c540:	f7ff ffb2 	bl	800c4a8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c544:	4c0f      	ldr	r4, [pc, #60]	; (800c584 <DMA_Init+0x98>)
 800c546:	4910      	ldr	r1, [pc, #64]	; (800c588 <DMA_Init+0x9c>)
 800c548:	0020      	movs	r0, r4
 800c54a:	f7ff ffbe 	bl	800c4ca <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c54e:	0020      	movs	r0, r4
 800c550:	3038      	adds	r0, #56	; 0x38
 800c552:	490e      	ldr	r1, [pc, #56]	; (800c58c <DMA_Init+0xa0>)
 800c554:	f7ff ffb9 	bl	800c4ca <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c558:	0020      	movs	r0, r4
 800c55a:	3070      	adds	r0, #112	; 0x70
 800c55c:	490c      	ldr	r1, [pc, #48]	; (800c590 <DMA_Init+0xa4>)
 800c55e:	f7ff ffb4 	bl	800c4ca <DMA_MSG_TX_CH_Init>
}
 800c562:	b002      	add	sp, #8
 800c564:	bd10      	pop	{r4, pc}
 800c566:	46c0      	nop			; (mov r8, r8)
 800c568:	40021000 	.word	0x40021000
 800c56c:	20000f30 	.word	0x20000f30
 800c570:	40020008 	.word	0x40020008
 800c574:	40020030 	.word	0x40020030
 800c578:	40020058 	.word	0x40020058
 800c57c:	4002006c 	.word	0x4002006c
 800c580:	4002041c 	.word	0x4002041c
 800c584:	20001080 	.word	0x20001080
 800c588:	4002001c 	.word	0x4002001c
 800c58c:	40020044 	.word	0x40020044
 800c590:	40020080 	.word	0x40020080

0800c594 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c594:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c596:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c598:	2300      	movs	r3, #0
 800c59a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c59c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c59e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c5a0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c5a2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c5a4:	3320      	adds	r3, #32
 800c5a6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c5a8:	2380      	movs	r3, #128	; 0x80
 800c5aa:	015b      	lsls	r3, r3, #5
 800c5ac:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c5ae:	f004 fc8f 	bl	8010ed0 <HAL_DMA_Init>
}
 800c5b2:	bd10      	pop	{r4, pc}

0800c5b4 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c5b4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c5b6:	6803      	ldr	r3, [r0, #0]
 800c5b8:	4a20      	ldr	r2, [pc, #128]	; (800c63c <SetupDMAInterrupts+0x88>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d020      	beq.n	800c600 <SetupDMAInterrupts+0x4c>
 800c5be:	d827      	bhi.n	800c610 <SetupDMAInterrupts+0x5c>
 800c5c0:	4a1f      	ldr	r2, [pc, #124]	; (800c640 <SetupDMAInterrupts+0x8c>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d00e      	beq.n	800c5e4 <SetupDMAInterrupts+0x30>
 800c5c6:	d815      	bhi.n	800c5f4 <SetupDMAInterrupts+0x40>
 800c5c8:	4a1e      	ldr	r2, [pc, #120]	; (800c644 <SetupDMAInterrupts+0x90>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d107      	bne.n	800c5de <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2009      	movs	r0, #9
 800c5d2:	f004 fadf 	bl	8010b94 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c5d6:	2009      	movs	r0, #9
 800c5d8:	f004 fb10 	bl	8010bfc <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c5dc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c5de:	4a1a      	ldr	r2, [pc, #104]	; (800c648 <SetupDMAInterrupts+0x94>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d1fb      	bne.n	800c5dc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	200a      	movs	r0, #10
 800c5e8:	f004 fad4 	bl	8010b94 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c5ec:	200a      	movs	r0, #10
 800c5ee:	f004 fb05 	bl	8010bfc <HAL_NVIC_EnableIRQ>
			break;
 800c5f2:	e7f3      	b.n	800c5dc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c5f4:	4a15      	ldr	r2, [pc, #84]	; (800c64c <SetupDMAInterrupts+0x98>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d002      	beq.n	800c600 <SetupDMAInterrupts+0x4c>
 800c5fa:	4a15      	ldr	r2, [pc, #84]	; (800c650 <SetupDMAInterrupts+0x9c>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d1ed      	bne.n	800c5dc <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c600:	2200      	movs	r2, #0
 800c602:	200b      	movs	r0, #11
 800c604:	f004 fac6 	bl	8010b94 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c608:	200b      	movs	r0, #11
 800c60a:	f004 faf7 	bl	8010bfc <HAL_NVIC_EnableIRQ>
}
 800c60e:	e7e5      	b.n	800c5dc <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800c610:	4a10      	ldr	r2, [pc, #64]	; (800c654 <SetupDMAInterrupts+0xa0>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d0e6      	beq.n	800c5e4 <SetupDMAInterrupts+0x30>
 800c616:	d909      	bls.n	800c62c <SetupDMAInterrupts+0x78>
 800c618:	4a0f      	ldr	r2, [pc, #60]	; (800c658 <SetupDMAInterrupts+0xa4>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d0f0      	beq.n	800c600 <SetupDMAInterrupts+0x4c>
 800c61e:	4a0f      	ldr	r2, [pc, #60]	; (800c65c <SetupDMAInterrupts+0xa8>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d0ed      	beq.n	800c600 <SetupDMAInterrupts+0x4c>
 800c624:	4a0e      	ldr	r2, [pc, #56]	; (800c660 <SetupDMAInterrupts+0xac>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d1d8      	bne.n	800c5dc <SetupDMAInterrupts+0x28>
 800c62a:	e7e9      	b.n	800c600 <SetupDMAInterrupts+0x4c>
 800c62c:	4a0d      	ldr	r2, [pc, #52]	; (800c664 <SetupDMAInterrupts+0xb0>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d0e6      	beq.n	800c600 <SetupDMAInterrupts+0x4c>
 800c632:	4a0d      	ldr	r2, [pc, #52]	; (800c668 <SetupDMAInterrupts+0xb4>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d0d5      	beq.n	800c5e4 <SetupDMAInterrupts+0x30>
 800c638:	e7d0      	b.n	800c5dc <SetupDMAInterrupts+0x28>
 800c63a:	46c0      	nop			; (mov r8, r8)
 800c63c:	4002006c 	.word	0x4002006c
 800c640:	40020030 	.word	0x40020030
 800c644:	40020008 	.word	0x40020008
 800c648:	4002001c 	.word	0x4002001c
 800c64c:	40020044 	.word	0x40020044
 800c650:	40020058 	.word	0x40020058
 800c654:	4002041c 	.word	0x4002041c
 800c658:	40020444 	.word	0x40020444
 800c65c:	40020458 	.word	0x40020458
 800c660:	40020430 	.word	0x40020430
 800c664:	40020080 	.word	0x40020080
 800c668:	40020408 	.word	0x40020408

0800c66c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c66c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c66e:	6803      	ldr	r3, [r0, #0]
 800c670:	4a1a      	ldr	r2, [pc, #104]	; (800c6dc <UnSetupDMAInterrupts+0x70>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d018      	beq.n	800c6a8 <UnSetupDMAInterrupts+0x3c>
 800c676:	d81b      	bhi.n	800c6b0 <UnSetupDMAInterrupts+0x44>
 800c678:	4a19      	ldr	r2, [pc, #100]	; (800c6e0 <UnSetupDMAInterrupts+0x74>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d00a      	beq.n	800c694 <UnSetupDMAInterrupts+0x28>
 800c67e:	d80d      	bhi.n	800c69c <UnSetupDMAInterrupts+0x30>
 800c680:	4a18      	ldr	r2, [pc, #96]	; (800c6e4 <UnSetupDMAInterrupts+0x78>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d103      	bne.n	800c68e <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c686:	2009      	movs	r0, #9
 800c688:	f004 fac2 	bl	8010c10 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800c68c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c68e:	4a16      	ldr	r2, [pc, #88]	; (800c6e8 <UnSetupDMAInterrupts+0x7c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d1fb      	bne.n	800c68c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c694:	200a      	movs	r0, #10
 800c696:	f004 fabb 	bl	8010c10 <HAL_NVIC_DisableIRQ>
			break;
 800c69a:	e7f7      	b.n	800c68c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c69c:	4a13      	ldr	r2, [pc, #76]	; (800c6ec <UnSetupDMAInterrupts+0x80>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d002      	beq.n	800c6a8 <UnSetupDMAInterrupts+0x3c>
 800c6a2:	4a13      	ldr	r2, [pc, #76]	; (800c6f0 <UnSetupDMAInterrupts+0x84>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d1f1      	bne.n	800c68c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c6a8:	200b      	movs	r0, #11
 800c6aa:	f004 fab1 	bl	8010c10 <HAL_NVIC_DisableIRQ>
}
 800c6ae:	e7ed      	b.n	800c68c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800c6b0:	4a10      	ldr	r2, [pc, #64]	; (800c6f4 <UnSetupDMAInterrupts+0x88>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d0ee      	beq.n	800c694 <UnSetupDMAInterrupts+0x28>
 800c6b6:	d909      	bls.n	800c6cc <UnSetupDMAInterrupts+0x60>
 800c6b8:	4a0f      	ldr	r2, [pc, #60]	; (800c6f8 <UnSetupDMAInterrupts+0x8c>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d0f4      	beq.n	800c6a8 <UnSetupDMAInterrupts+0x3c>
 800c6be:	4a0f      	ldr	r2, [pc, #60]	; (800c6fc <UnSetupDMAInterrupts+0x90>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d0f1      	beq.n	800c6a8 <UnSetupDMAInterrupts+0x3c>
 800c6c4:	4a0e      	ldr	r2, [pc, #56]	; (800c700 <UnSetupDMAInterrupts+0x94>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d1e0      	bne.n	800c68c <UnSetupDMAInterrupts+0x20>
 800c6ca:	e7ed      	b.n	800c6a8 <UnSetupDMAInterrupts+0x3c>
 800c6cc:	4a0d      	ldr	r2, [pc, #52]	; (800c704 <UnSetupDMAInterrupts+0x98>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d0ea      	beq.n	800c6a8 <UnSetupDMAInterrupts+0x3c>
 800c6d2:	4a0d      	ldr	r2, [pc, #52]	; (800c708 <UnSetupDMAInterrupts+0x9c>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d0dd      	beq.n	800c694 <UnSetupDMAInterrupts+0x28>
 800c6d8:	e7d8      	b.n	800c68c <UnSetupDMAInterrupts+0x20>
 800c6da:	46c0      	nop			; (mov r8, r8)
 800c6dc:	4002006c 	.word	0x4002006c
 800c6e0:	40020030 	.word	0x40020030
 800c6e4:	40020008 	.word	0x40020008
 800c6e8:	4002001c 	.word	0x4002001c
 800c6ec:	40020044 	.word	0x40020044
 800c6f0:	40020058 	.word	0x40020058
 800c6f4:	4002041c 	.word	0x4002041c
 800c6f8:	40020444 	.word	0x40020444
 800c6fc:	40020458 	.word	0x40020458
 800c700:	40020430 	.word	0x40020430
 800c704:	40020080 	.word	0x40020080
 800c708:	40020408 	.word	0x40020408

0800c70c <DMA_MSG_TX_UnSetup>:
{	
 800c70c:	b510      	push	{r4, lr}
 800c70e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c710:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c712:	f7ff ffab 	bl	800c66c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c716:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c718:	2300      	movs	r3, #0
 800c71a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c71c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c71e:	bd10      	pop	{r4, pc}

0800c720 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c720:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c722:	6803      	ldr	r3, [r0, #0]
 800c724:	4abd      	ldr	r2, [pc, #756]	; (800ca1c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d02f      	beq.n	800c78a <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c72a:	4abd      	ldr	r2, [pc, #756]	; (800ca20 <RemapAndLinkDMAtoUARTRx+0x300>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d100      	bne.n	800c732 <RemapAndLinkDMAtoUARTRx+0x12>
 800c730:	e087      	b.n	800c842 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c732:	4abc      	ldr	r2, [pc, #752]	; (800ca24 <RemapAndLinkDMAtoUARTRx+0x304>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d100      	bne.n	800c73a <RemapAndLinkDMAtoUARTRx+0x1a>
 800c738:	e0dc      	b.n	800c8f4 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c73a:	4abb      	ldr	r2, [pc, #748]	; (800ca28 <RemapAndLinkDMAtoUARTRx+0x308>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d000      	beq.n	800c742 <RemapAndLinkDMAtoUARTRx+0x22>
 800c740:	e18a      	b.n	800ca58 <RemapAndLinkDMAtoUARTRx+0x338>
 800c742:	680b      	ldr	r3, [r1, #0]
 800c744:	4ab9      	ldr	r2, [pc, #740]	; (800ca2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d100      	bne.n	800c74c <RemapAndLinkDMAtoUARTRx+0x2c>
 800c74a:	e12d      	b.n	800c9a8 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c74c:	4ab8      	ldr	r2, [pc, #736]	; (800ca30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d100      	bne.n	800c754 <RemapAndLinkDMAtoUARTRx+0x34>
 800c752:	e134      	b.n	800c9be <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c754:	4ab7      	ldr	r2, [pc, #732]	; (800ca34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d100      	bne.n	800c75c <RemapAndLinkDMAtoUARTRx+0x3c>
 800c75a:	e13c      	b.n	800c9d6 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c75c:	4ab6      	ldr	r2, [pc, #728]	; (800ca38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d100      	bne.n	800c764 <RemapAndLinkDMAtoUARTRx+0x44>
 800c762:	e144      	b.n	800c9ee <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c764:	4ab5      	ldr	r2, [pc, #724]	; (800ca3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d100      	bne.n	800c76c <RemapAndLinkDMAtoUARTRx+0x4c>
 800c76a:	e14c      	b.n	800ca06 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c76c:	4ab4      	ldr	r2, [pc, #720]	; (800ca40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d11e      	bne.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c772:	4ab4      	ldr	r2, [pc, #720]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c774:	23a8      	movs	r3, #168	; 0xa8
 800c776:	58d4      	ldr	r4, [r2, r3]
 800c778:	4db3      	ldr	r5, [pc, #716]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c77a:	402c      	ands	r4, r5
 800c77c:	50d4      	str	r4, [r2, r3]
 800c77e:	58d5      	ldr	r5, [r2, r3]
 800c780:	24b0      	movs	r4, #176	; 0xb0
 800c782:	0124      	lsls	r4, r4, #4
 800c784:	432c      	orrs	r4, r5
 800c786:	50d4      	str	r4, [r2, r3]
 800c788:	e012      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c78a:	680b      	ldr	r3, [r1, #0]
 800c78c:	4aa7      	ldr	r2, [pc, #668]	; (800ca2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d011      	beq.n	800c7b6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c792:	4aa7      	ldr	r2, [pc, #668]	; (800ca30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d019      	beq.n	800c7cc <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c798:	4aa6      	ldr	r2, [pc, #664]	; (800ca34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d022      	beq.n	800c7e4 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c79e:	4aa6      	ldr	r2, [pc, #664]	; (800ca38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d02b      	beq.n	800c7fc <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c7a4:	4aa5      	ldr	r2, [pc, #660]	; (800ca3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d034      	beq.n	800c814 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c7aa:	4aa5      	ldr	r2, [pc, #660]	; (800ca40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d03c      	beq.n	800c82a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c7b0:	6641      	str	r1, [r0, #100]	; 0x64
 800c7b2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c7b4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c7b6:	4aa5      	ldr	r2, [pc, #660]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c7b8:	23a8      	movs	r3, #168	; 0xa8
 800c7ba:	58d4      	ldr	r4, [r2, r3]
 800c7bc:	250f      	movs	r5, #15
 800c7be:	43ac      	bics	r4, r5
 800c7c0:	50d4      	str	r4, [r2, r3]
 800c7c2:	58d4      	ldr	r4, [r2, r3]
 800c7c4:	3d07      	subs	r5, #7
 800c7c6:	432c      	orrs	r4, r5
 800c7c8:	50d4      	str	r4, [r2, r3]
 800c7ca:	e7f1      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c7cc:	4a9f      	ldr	r2, [pc, #636]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c7ce:	23a8      	movs	r3, #168	; 0xa8
 800c7d0:	58d4      	ldr	r4, [r2, r3]
 800c7d2:	4d9d      	ldr	r5, [pc, #628]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c7d4:	402c      	ands	r4, r5
 800c7d6:	50d4      	str	r4, [r2, r3]
 800c7d8:	58d5      	ldr	r5, [r2, r3]
 800c7da:	2480      	movs	r4, #128	; 0x80
 800c7dc:	0124      	lsls	r4, r4, #4
 800c7de:	432c      	orrs	r4, r5
 800c7e0:	50d4      	str	r4, [r2, r3]
 800c7e2:	e7e5      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c7e4:	4a99      	ldr	r2, [pc, #612]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c7e6:	23a8      	movs	r3, #168	; 0xa8
 800c7e8:	58d4      	ldr	r4, [r2, r3]
 800c7ea:	4d99      	ldr	r5, [pc, #612]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c7ec:	402c      	ands	r4, r5
 800c7ee:	50d4      	str	r4, [r2, r3]
 800c7f0:	58d5      	ldr	r5, [r2, r3]
 800c7f2:	2480      	movs	r4, #128	; 0x80
 800c7f4:	0324      	lsls	r4, r4, #12
 800c7f6:	432c      	orrs	r4, r5
 800c7f8:	50d4      	str	r4, [r2, r3]
 800c7fa:	e7d9      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c7fc:	4a93      	ldr	r2, [pc, #588]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c7fe:	23a8      	movs	r3, #168	; 0xa8
 800c800:	58d4      	ldr	r4, [r2, r3]
 800c802:	4d94      	ldr	r5, [pc, #592]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c804:	402c      	ands	r4, r5
 800c806:	50d4      	str	r4, [r2, r3]
 800c808:	58d5      	ldr	r5, [r2, r3]
 800c80a:	2480      	movs	r4, #128	; 0x80
 800c80c:	0424      	lsls	r4, r4, #16
 800c80e:	432c      	orrs	r4, r5
 800c810:	50d4      	str	r4, [r2, r3]
 800c812:	e7cd      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c814:	4a8b      	ldr	r2, [pc, #556]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c816:	23a8      	movs	r3, #168	; 0xa8
 800c818:	58d4      	ldr	r4, [r2, r3]
 800c81a:	25f0      	movs	r5, #240	; 0xf0
 800c81c:	43ac      	bics	r4, r5
 800c81e:	50d4      	str	r4, [r2, r3]
 800c820:	58d4      	ldr	r4, [r2, r3]
 800c822:	3d70      	subs	r5, #112	; 0x70
 800c824:	432c      	orrs	r4, r5
 800c826:	50d4      	str	r4, [r2, r3]
 800c828:	e7c2      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c82a:	4a86      	ldr	r2, [pc, #536]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c82c:	23a8      	movs	r3, #168	; 0xa8
 800c82e:	58d4      	ldr	r4, [r2, r3]
 800c830:	4d85      	ldr	r5, [pc, #532]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c832:	402c      	ands	r4, r5
 800c834:	50d4      	str	r4, [r2, r3]
 800c836:	58d5      	ldr	r5, [r2, r3]
 800c838:	2480      	movs	r4, #128	; 0x80
 800c83a:	0124      	lsls	r4, r4, #4
 800c83c:	432c      	orrs	r4, r5
 800c83e:	50d4      	str	r4, [r2, r3]
 800c840:	e7b6      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c842:	680b      	ldr	r3, [r1, #0]
 800c844:	4a79      	ldr	r2, [pc, #484]	; (800ca2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c846:	4293      	cmp	r3, r2
 800c848:	d01a      	beq.n	800c880 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c84a:	4a79      	ldr	r2, [pc, #484]	; (800ca30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d022      	beq.n	800c896 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c850:	4a78      	ldr	r2, [pc, #480]	; (800ca34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d02b      	beq.n	800c8ae <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c856:	4a78      	ldr	r2, [pc, #480]	; (800ca38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d034      	beq.n	800c8c6 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c85c:	4a77      	ldr	r2, [pc, #476]	; (800ca3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d03d      	beq.n	800c8de <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c862:	4a77      	ldr	r2, [pc, #476]	; (800ca40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d1a3      	bne.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c868:	4a76      	ldr	r2, [pc, #472]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c86a:	23a8      	movs	r3, #168	; 0xa8
 800c86c:	58d4      	ldr	r4, [r2, r3]
 800c86e:	4d76      	ldr	r5, [pc, #472]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c870:	402c      	ands	r4, r5
 800c872:	50d4      	str	r4, [r2, r3]
 800c874:	58d5      	ldr	r5, [r2, r3]
 800c876:	2490      	movs	r4, #144	; 0x90
 800c878:	0124      	lsls	r4, r4, #4
 800c87a:	432c      	orrs	r4, r5
 800c87c:	50d4      	str	r4, [r2, r3]
 800c87e:	e797      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c880:	4a72      	ldr	r2, [pc, #456]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c882:	23a8      	movs	r3, #168	; 0xa8
 800c884:	58d4      	ldr	r4, [r2, r3]
 800c886:	250f      	movs	r5, #15
 800c888:	43ac      	bics	r4, r5
 800c88a:	50d4      	str	r4, [r2, r3]
 800c88c:	58d4      	ldr	r4, [r2, r3]
 800c88e:	3d06      	subs	r5, #6
 800c890:	432c      	orrs	r4, r5
 800c892:	50d4      	str	r4, [r2, r3]
 800c894:	e78c      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c896:	4a6d      	ldr	r2, [pc, #436]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c898:	23a8      	movs	r3, #168	; 0xa8
 800c89a:	58d4      	ldr	r4, [r2, r3]
 800c89c:	4d6a      	ldr	r5, [pc, #424]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c89e:	402c      	ands	r4, r5
 800c8a0:	50d4      	str	r4, [r2, r3]
 800c8a2:	58d5      	ldr	r5, [r2, r3]
 800c8a4:	2490      	movs	r4, #144	; 0x90
 800c8a6:	0124      	lsls	r4, r4, #4
 800c8a8:	432c      	orrs	r4, r5
 800c8aa:	50d4      	str	r4, [r2, r3]
 800c8ac:	e780      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c8ae:	4a67      	ldr	r2, [pc, #412]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c8b0:	23a8      	movs	r3, #168	; 0xa8
 800c8b2:	58d4      	ldr	r4, [r2, r3]
 800c8b4:	4d66      	ldr	r5, [pc, #408]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c8b6:	402c      	ands	r4, r5
 800c8b8:	50d4      	str	r4, [r2, r3]
 800c8ba:	58d5      	ldr	r5, [r2, r3]
 800c8bc:	2490      	movs	r4, #144	; 0x90
 800c8be:	0324      	lsls	r4, r4, #12
 800c8c0:	432c      	orrs	r4, r5
 800c8c2:	50d4      	str	r4, [r2, r3]
 800c8c4:	e774      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c8c6:	4a61      	ldr	r2, [pc, #388]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c8c8:	23a8      	movs	r3, #168	; 0xa8
 800c8ca:	58d4      	ldr	r4, [r2, r3]
 800c8cc:	4d61      	ldr	r5, [pc, #388]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c8ce:	402c      	ands	r4, r5
 800c8d0:	50d4      	str	r4, [r2, r3]
 800c8d2:	58d5      	ldr	r5, [r2, r3]
 800c8d4:	2490      	movs	r4, #144	; 0x90
 800c8d6:	0424      	lsls	r4, r4, #16
 800c8d8:	432c      	orrs	r4, r5
 800c8da:	50d4      	str	r4, [r2, r3]
 800c8dc:	e768      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c8de:	4a59      	ldr	r2, [pc, #356]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c8e0:	23a8      	movs	r3, #168	; 0xa8
 800c8e2:	58d4      	ldr	r4, [r2, r3]
 800c8e4:	25f0      	movs	r5, #240	; 0xf0
 800c8e6:	43ac      	bics	r4, r5
 800c8e8:	50d4      	str	r4, [r2, r3]
 800c8ea:	58d4      	ldr	r4, [r2, r3]
 800c8ec:	3d60      	subs	r5, #96	; 0x60
 800c8ee:	432c      	orrs	r4, r5
 800c8f0:	50d4      	str	r4, [r2, r3]
 800c8f2:	e75d      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c8f4:	680b      	ldr	r3, [r1, #0]
 800c8f6:	4a4d      	ldr	r2, [pc, #308]	; (800ca2c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d01b      	beq.n	800c934 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c8fc:	4a4c      	ldr	r2, [pc, #304]	; (800ca30 <RemapAndLinkDMAtoUARTRx+0x310>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d023      	beq.n	800c94a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c902:	4a4c      	ldr	r2, [pc, #304]	; (800ca34 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d02c      	beq.n	800c962 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c908:	4a4b      	ldr	r2, [pc, #300]	; (800ca38 <RemapAndLinkDMAtoUARTRx+0x318>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d035      	beq.n	800c97a <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c90e:	4a4b      	ldr	r2, [pc, #300]	; (800ca3c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d03e      	beq.n	800c992 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c914:	4a4a      	ldr	r2, [pc, #296]	; (800ca40 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d000      	beq.n	800c91c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800c91a:	e749      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c91c:	4a49      	ldr	r2, [pc, #292]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c91e:	23a8      	movs	r3, #168	; 0xa8
 800c920:	58d4      	ldr	r4, [r2, r3]
 800c922:	4d49      	ldr	r5, [pc, #292]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c924:	402c      	ands	r4, r5
 800c926:	50d4      	str	r4, [r2, r3]
 800c928:	58d5      	ldr	r5, [r2, r3]
 800c92a:	24a0      	movs	r4, #160	; 0xa0
 800c92c:	0124      	lsls	r4, r4, #4
 800c92e:	432c      	orrs	r4, r5
 800c930:	50d4      	str	r4, [r2, r3]
 800c932:	e73d      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c934:	4a45      	ldr	r2, [pc, #276]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c936:	23a8      	movs	r3, #168	; 0xa8
 800c938:	58d4      	ldr	r4, [r2, r3]
 800c93a:	250f      	movs	r5, #15
 800c93c:	43ac      	bics	r4, r5
 800c93e:	50d4      	str	r4, [r2, r3]
 800c940:	58d4      	ldr	r4, [r2, r3]
 800c942:	3d05      	subs	r5, #5
 800c944:	432c      	orrs	r4, r5
 800c946:	50d4      	str	r4, [r2, r3]
 800c948:	e732      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c94a:	4a40      	ldr	r2, [pc, #256]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c94c:	23a8      	movs	r3, #168	; 0xa8
 800c94e:	58d4      	ldr	r4, [r2, r3]
 800c950:	4d3d      	ldr	r5, [pc, #244]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c952:	402c      	ands	r4, r5
 800c954:	50d4      	str	r4, [r2, r3]
 800c956:	58d5      	ldr	r5, [r2, r3]
 800c958:	24a0      	movs	r4, #160	; 0xa0
 800c95a:	0124      	lsls	r4, r4, #4
 800c95c:	432c      	orrs	r4, r5
 800c95e:	50d4      	str	r4, [r2, r3]
 800c960:	e726      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c962:	4a3a      	ldr	r2, [pc, #232]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c964:	23a8      	movs	r3, #168	; 0xa8
 800c966:	58d4      	ldr	r4, [r2, r3]
 800c968:	4d39      	ldr	r5, [pc, #228]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c96a:	402c      	ands	r4, r5
 800c96c:	50d4      	str	r4, [r2, r3]
 800c96e:	58d5      	ldr	r5, [r2, r3]
 800c970:	24a0      	movs	r4, #160	; 0xa0
 800c972:	0324      	lsls	r4, r4, #12
 800c974:	432c      	orrs	r4, r5
 800c976:	50d4      	str	r4, [r2, r3]
 800c978:	e71a      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c97a:	4a34      	ldr	r2, [pc, #208]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c97c:	23a8      	movs	r3, #168	; 0xa8
 800c97e:	58d4      	ldr	r4, [r2, r3]
 800c980:	4d34      	ldr	r5, [pc, #208]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c982:	402c      	ands	r4, r5
 800c984:	50d4      	str	r4, [r2, r3]
 800c986:	58d5      	ldr	r5, [r2, r3]
 800c988:	24a0      	movs	r4, #160	; 0xa0
 800c98a:	0424      	lsls	r4, r4, #16
 800c98c:	432c      	orrs	r4, r5
 800c98e:	50d4      	str	r4, [r2, r3]
 800c990:	e70e      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c992:	4a2c      	ldr	r2, [pc, #176]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c994:	23a8      	movs	r3, #168	; 0xa8
 800c996:	58d4      	ldr	r4, [r2, r3]
 800c998:	25f0      	movs	r5, #240	; 0xf0
 800c99a:	43ac      	bics	r4, r5
 800c99c:	50d4      	str	r4, [r2, r3]
 800c99e:	58d4      	ldr	r4, [r2, r3]
 800c9a0:	3d50      	subs	r5, #80	; 0x50
 800c9a2:	432c      	orrs	r4, r5
 800c9a4:	50d4      	str	r4, [r2, r3]
 800c9a6:	e703      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c9a8:	4a28      	ldr	r2, [pc, #160]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9aa:	23a8      	movs	r3, #168	; 0xa8
 800c9ac:	58d4      	ldr	r4, [r2, r3]
 800c9ae:	250f      	movs	r5, #15
 800c9b0:	43ac      	bics	r4, r5
 800c9b2:	50d4      	str	r4, [r2, r3]
 800c9b4:	58d4      	ldr	r4, [r2, r3]
 800c9b6:	3d04      	subs	r5, #4
 800c9b8:	432c      	orrs	r4, r5
 800c9ba:	50d4      	str	r4, [r2, r3]
 800c9bc:	e6f8      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c9be:	4a23      	ldr	r2, [pc, #140]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9c0:	23a8      	movs	r3, #168	; 0xa8
 800c9c2:	58d4      	ldr	r4, [r2, r3]
 800c9c4:	4d20      	ldr	r5, [pc, #128]	; (800ca48 <RemapAndLinkDMAtoUARTRx+0x328>)
 800c9c6:	402c      	ands	r4, r5
 800c9c8:	50d4      	str	r4, [r2, r3]
 800c9ca:	58d5      	ldr	r5, [r2, r3]
 800c9cc:	24b0      	movs	r4, #176	; 0xb0
 800c9ce:	0124      	lsls	r4, r4, #4
 800c9d0:	432c      	orrs	r4, r5
 800c9d2:	50d4      	str	r4, [r2, r3]
 800c9d4:	e6ec      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c9d6:	4a1d      	ldr	r2, [pc, #116]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9d8:	23a8      	movs	r3, #168	; 0xa8
 800c9da:	58d4      	ldr	r4, [r2, r3]
 800c9dc:	4d1c      	ldr	r5, [pc, #112]	; (800ca50 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c9de:	402c      	ands	r4, r5
 800c9e0:	50d4      	str	r4, [r2, r3]
 800c9e2:	58d5      	ldr	r5, [r2, r3]
 800c9e4:	24b0      	movs	r4, #176	; 0xb0
 800c9e6:	0324      	lsls	r4, r4, #12
 800c9e8:	432c      	orrs	r4, r5
 800c9ea:	50d4      	str	r4, [r2, r3]
 800c9ec:	e6e0      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c9ee:	4a17      	ldr	r2, [pc, #92]	; (800ca4c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c9f0:	23a8      	movs	r3, #168	; 0xa8
 800c9f2:	58d4      	ldr	r4, [r2, r3]
 800c9f4:	4d17      	ldr	r5, [pc, #92]	; (800ca54 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c9f6:	402c      	ands	r4, r5
 800c9f8:	50d4      	str	r4, [r2, r3]
 800c9fa:	58d5      	ldr	r5, [r2, r3]
 800c9fc:	24b0      	movs	r4, #176	; 0xb0
 800c9fe:	0424      	lsls	r4, r4, #16
 800ca00:	432c      	orrs	r4, r5
 800ca02:	50d4      	str	r4, [r2, r3]
 800ca04:	e6d4      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800ca06:	4a0f      	ldr	r2, [pc, #60]	; (800ca44 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ca08:	23a8      	movs	r3, #168	; 0xa8
 800ca0a:	58d4      	ldr	r4, [r2, r3]
 800ca0c:	25f0      	movs	r5, #240	; 0xf0
 800ca0e:	43ac      	bics	r4, r5
 800ca10:	50d4      	str	r4, [r2, r3]
 800ca12:	58d4      	ldr	r4, [r2, r3]
 800ca14:	3d40      	subs	r5, #64	; 0x40
 800ca16:	432c      	orrs	r4, r5
 800ca18:	50d4      	str	r4, [r2, r3]
 800ca1a:	e6c9      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
 800ca1c:	40013800 	.word	0x40013800
 800ca20:	40004400 	.word	0x40004400
 800ca24:	40004800 	.word	0x40004800
 800ca28:	40004c00 	.word	0x40004c00
 800ca2c:	40020008 	.word	0x40020008
 800ca30:	40020030 	.word	0x40020030
 800ca34:	40020058 	.word	0x40020058
 800ca38:	4002006c 	.word	0x4002006c
 800ca3c:	4002041c 	.word	0x4002041c
 800ca40:	40020430 	.word	0x40020430
 800ca44:	40020400 	.word	0x40020400
 800ca48:	fffff0ff 	.word	0xfffff0ff
 800ca4c:	40020000 	.word	0x40020000
 800ca50:	fff0ffff 	.word	0xfff0ffff
 800ca54:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800ca58:	4ab9      	ldr	r2, [pc, #740]	; (800cd40 <RemapAndLinkDMAtoUARTRx+0x620>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d159      	bne.n	800cb12 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800ca5e:	680b      	ldr	r3, [r1, #0]
 800ca60:	4ab8      	ldr	r2, [pc, #736]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d01b      	beq.n	800ca9e <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800ca66:	4ab8      	ldr	r2, [pc, #736]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d023      	beq.n	800cab4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800ca6c:	4ab7      	ldr	r2, [pc, #732]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d02c      	beq.n	800cacc <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800ca72:	4ab7      	ldr	r2, [pc, #732]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d035      	beq.n	800cae4 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800ca78:	4ab6      	ldr	r2, [pc, #728]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d03e      	beq.n	800cafc <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800ca7e:	4ab6      	ldr	r2, [pc, #728]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d000      	beq.n	800ca86 <RemapAndLinkDMAtoUARTRx+0x366>
 800ca84:	e694      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800ca86:	4ab5      	ldr	r2, [pc, #724]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ca88:	23a8      	movs	r3, #168	; 0xa8
 800ca8a:	58d4      	ldr	r4, [r2, r3]
 800ca8c:	4db4      	ldr	r5, [pc, #720]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ca8e:	402c      	ands	r4, r5
 800ca90:	50d4      	str	r4, [r2, r3]
 800ca92:	58d5      	ldr	r5, [r2, r3]
 800ca94:	24c0      	movs	r4, #192	; 0xc0
 800ca96:	0124      	lsls	r4, r4, #4
 800ca98:	432c      	orrs	r4, r5
 800ca9a:	50d4      	str	r4, [r2, r3]
 800ca9c:	e688      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800ca9e:	4ab1      	ldr	r2, [pc, #708]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800caa0:	23a8      	movs	r3, #168	; 0xa8
 800caa2:	58d4      	ldr	r4, [r2, r3]
 800caa4:	250f      	movs	r5, #15
 800caa6:	43ac      	bics	r4, r5
 800caa8:	50d4      	str	r4, [r2, r3]
 800caaa:	58d4      	ldr	r4, [r2, r3]
 800caac:	3d03      	subs	r5, #3
 800caae:	432c      	orrs	r4, r5
 800cab0:	50d4      	str	r4, [r2, r3]
 800cab2:	e67d      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800cab4:	4aab      	ldr	r2, [pc, #684]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cab6:	23a8      	movs	r3, #168	; 0xa8
 800cab8:	58d4      	ldr	r4, [r2, r3]
 800caba:	4da9      	ldr	r5, [pc, #676]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cabc:	402c      	ands	r4, r5
 800cabe:	50d4      	str	r4, [r2, r3]
 800cac0:	58d5      	ldr	r5, [r2, r3]
 800cac2:	24c0      	movs	r4, #192	; 0xc0
 800cac4:	0124      	lsls	r4, r4, #4
 800cac6:	432c      	orrs	r4, r5
 800cac8:	50d4      	str	r4, [r2, r3]
 800caca:	e671      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800cacc:	4aa5      	ldr	r2, [pc, #660]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cace:	23a8      	movs	r3, #168	; 0xa8
 800cad0:	58d4      	ldr	r4, [r2, r3]
 800cad2:	4da5      	ldr	r5, [pc, #660]	; (800cd68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cad4:	402c      	ands	r4, r5
 800cad6:	50d4      	str	r4, [r2, r3]
 800cad8:	58d5      	ldr	r5, [r2, r3]
 800cada:	24c0      	movs	r4, #192	; 0xc0
 800cadc:	0324      	lsls	r4, r4, #12
 800cade:	432c      	orrs	r4, r5
 800cae0:	50d4      	str	r4, [r2, r3]
 800cae2:	e665      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800cae4:	4a9f      	ldr	r2, [pc, #636]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cae6:	23a8      	movs	r3, #168	; 0xa8
 800cae8:	58d4      	ldr	r4, [r2, r3]
 800caea:	4da0      	ldr	r5, [pc, #640]	; (800cd6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800caec:	402c      	ands	r4, r5
 800caee:	50d4      	str	r4, [r2, r3]
 800caf0:	58d5      	ldr	r5, [r2, r3]
 800caf2:	24c0      	movs	r4, #192	; 0xc0
 800caf4:	0424      	lsls	r4, r4, #16
 800caf6:	432c      	orrs	r4, r5
 800caf8:	50d4      	str	r4, [r2, r3]
 800cafa:	e659      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800cafc:	4a97      	ldr	r2, [pc, #604]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cafe:	23a8      	movs	r3, #168	; 0xa8
 800cb00:	58d4      	ldr	r4, [r2, r3]
 800cb02:	25f0      	movs	r5, #240	; 0xf0
 800cb04:	43ac      	bics	r4, r5
 800cb06:	50d4      	str	r4, [r2, r3]
 800cb08:	58d4      	ldr	r4, [r2, r3]
 800cb0a:	3d30      	subs	r5, #48	; 0x30
 800cb0c:	432c      	orrs	r4, r5
 800cb0e:	50d4      	str	r4, [r2, r3]
 800cb10:	e64e      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800cb12:	4a97      	ldr	r2, [pc, #604]	; (800cd70 <RemapAndLinkDMAtoUARTRx+0x650>)
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d159      	bne.n	800cbcc <RemapAndLinkDMAtoUARTRx+0x4ac>
 800cb18:	680b      	ldr	r3, [r1, #0]
 800cb1a:	4a8a      	ldr	r2, [pc, #552]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	d01b      	beq.n	800cb58 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800cb20:	4a89      	ldr	r2, [pc, #548]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d023      	beq.n	800cb6e <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800cb26:	4a89      	ldr	r2, [pc, #548]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d02c      	beq.n	800cb86 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800cb2c:	4a88      	ldr	r2, [pc, #544]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d035      	beq.n	800cb9e <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800cb32:	4a88      	ldr	r2, [pc, #544]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d03e      	beq.n	800cbb6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800cb38:	4a87      	ldr	r2, [pc, #540]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d000      	beq.n	800cb40 <RemapAndLinkDMAtoUARTRx+0x420>
 800cb3e:	e637      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800cb40:	4a86      	ldr	r2, [pc, #536]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cb42:	23a8      	movs	r3, #168	; 0xa8
 800cb44:	58d4      	ldr	r4, [r2, r3]
 800cb46:	4d86      	ldr	r5, [pc, #536]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cb48:	402c      	ands	r4, r5
 800cb4a:	50d4      	str	r4, [r2, r3]
 800cb4c:	58d5      	ldr	r5, [r2, r3]
 800cb4e:	24d0      	movs	r4, #208	; 0xd0
 800cb50:	0124      	lsls	r4, r4, #4
 800cb52:	432c      	orrs	r4, r5
 800cb54:	50d4      	str	r4, [r2, r3]
 800cb56:	e62b      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800cb58:	4a82      	ldr	r2, [pc, #520]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cb5a:	23a8      	movs	r3, #168	; 0xa8
 800cb5c:	58d4      	ldr	r4, [r2, r3]
 800cb5e:	250f      	movs	r5, #15
 800cb60:	43ac      	bics	r4, r5
 800cb62:	50d4      	str	r4, [r2, r3]
 800cb64:	58d4      	ldr	r4, [r2, r3]
 800cb66:	3d02      	subs	r5, #2
 800cb68:	432c      	orrs	r4, r5
 800cb6a:	50d4      	str	r4, [r2, r3]
 800cb6c:	e620      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800cb6e:	4a7d      	ldr	r2, [pc, #500]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cb70:	23a8      	movs	r3, #168	; 0xa8
 800cb72:	58d4      	ldr	r4, [r2, r3]
 800cb74:	4d7a      	ldr	r5, [pc, #488]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cb76:	402c      	ands	r4, r5
 800cb78:	50d4      	str	r4, [r2, r3]
 800cb7a:	58d5      	ldr	r5, [r2, r3]
 800cb7c:	24d0      	movs	r4, #208	; 0xd0
 800cb7e:	0124      	lsls	r4, r4, #4
 800cb80:	432c      	orrs	r4, r5
 800cb82:	50d4      	str	r4, [r2, r3]
 800cb84:	e614      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800cb86:	4a77      	ldr	r2, [pc, #476]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cb88:	23a8      	movs	r3, #168	; 0xa8
 800cb8a:	58d4      	ldr	r4, [r2, r3]
 800cb8c:	4d76      	ldr	r5, [pc, #472]	; (800cd68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cb8e:	402c      	ands	r4, r5
 800cb90:	50d4      	str	r4, [r2, r3]
 800cb92:	58d5      	ldr	r5, [r2, r3]
 800cb94:	24d0      	movs	r4, #208	; 0xd0
 800cb96:	0324      	lsls	r4, r4, #12
 800cb98:	432c      	orrs	r4, r5
 800cb9a:	50d4      	str	r4, [r2, r3]
 800cb9c:	e608      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800cb9e:	4a71      	ldr	r2, [pc, #452]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cba0:	23a8      	movs	r3, #168	; 0xa8
 800cba2:	58d4      	ldr	r4, [r2, r3]
 800cba4:	4d71      	ldr	r5, [pc, #452]	; (800cd6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cba6:	402c      	ands	r4, r5
 800cba8:	50d4      	str	r4, [r2, r3]
 800cbaa:	58d5      	ldr	r5, [r2, r3]
 800cbac:	24d0      	movs	r4, #208	; 0xd0
 800cbae:	0424      	lsls	r4, r4, #16
 800cbb0:	432c      	orrs	r4, r5
 800cbb2:	50d4      	str	r4, [r2, r3]
 800cbb4:	e5fc      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800cbb6:	4a69      	ldr	r2, [pc, #420]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cbb8:	23a8      	movs	r3, #168	; 0xa8
 800cbba:	58d4      	ldr	r4, [r2, r3]
 800cbbc:	25f0      	movs	r5, #240	; 0xf0
 800cbbe:	43ac      	bics	r4, r5
 800cbc0:	50d4      	str	r4, [r2, r3]
 800cbc2:	58d4      	ldr	r4, [r2, r3]
 800cbc4:	3d20      	subs	r5, #32
 800cbc6:	432c      	orrs	r4, r5
 800cbc8:	50d4      	str	r4, [r2, r3]
 800cbca:	e5f1      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800cbcc:	4a69      	ldr	r2, [pc, #420]	; (800cd74 <RemapAndLinkDMAtoUARTRx+0x654>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d159      	bne.n	800cc86 <RemapAndLinkDMAtoUARTRx+0x566>
 800cbd2:	680b      	ldr	r3, [r1, #0]
 800cbd4:	4a5b      	ldr	r2, [pc, #364]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d01b      	beq.n	800cc12 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800cbda:	4a5b      	ldr	r2, [pc, #364]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d023      	beq.n	800cc28 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800cbe0:	4a5a      	ldr	r2, [pc, #360]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cbe2:	4293      	cmp	r3, r2
 800cbe4:	d02c      	beq.n	800cc40 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800cbe6:	4a5a      	ldr	r2, [pc, #360]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d035      	beq.n	800cc58 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800cbec:	4a59      	ldr	r2, [pc, #356]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d03e      	beq.n	800cc70 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800cbf2:	4a59      	ldr	r2, [pc, #356]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d000      	beq.n	800cbfa <RemapAndLinkDMAtoUARTRx+0x4da>
 800cbf8:	e5da      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800cbfa:	4a58      	ldr	r2, [pc, #352]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cbfc:	23a8      	movs	r3, #168	; 0xa8
 800cbfe:	58d4      	ldr	r4, [r2, r3]
 800cc00:	4d57      	ldr	r5, [pc, #348]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cc02:	402c      	ands	r4, r5
 800cc04:	50d4      	str	r4, [r2, r3]
 800cc06:	58d5      	ldr	r5, [r2, r3]
 800cc08:	24e0      	movs	r4, #224	; 0xe0
 800cc0a:	0124      	lsls	r4, r4, #4
 800cc0c:	432c      	orrs	r4, r5
 800cc0e:	50d4      	str	r4, [r2, r3]
 800cc10:	e5ce      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800cc12:	4a54      	ldr	r2, [pc, #336]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cc14:	23a8      	movs	r3, #168	; 0xa8
 800cc16:	58d4      	ldr	r4, [r2, r3]
 800cc18:	250f      	movs	r5, #15
 800cc1a:	43ac      	bics	r4, r5
 800cc1c:	50d4      	str	r4, [r2, r3]
 800cc1e:	58d4      	ldr	r4, [r2, r3]
 800cc20:	3d01      	subs	r5, #1
 800cc22:	432c      	orrs	r4, r5
 800cc24:	50d4      	str	r4, [r2, r3]
 800cc26:	e5c3      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800cc28:	4a4e      	ldr	r2, [pc, #312]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cc2a:	23a8      	movs	r3, #168	; 0xa8
 800cc2c:	58d4      	ldr	r4, [r2, r3]
 800cc2e:	4d4c      	ldr	r5, [pc, #304]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800cc30:	402c      	ands	r4, r5
 800cc32:	50d4      	str	r4, [r2, r3]
 800cc34:	58d5      	ldr	r5, [r2, r3]
 800cc36:	24e0      	movs	r4, #224	; 0xe0
 800cc38:	0124      	lsls	r4, r4, #4
 800cc3a:	432c      	orrs	r4, r5
 800cc3c:	50d4      	str	r4, [r2, r3]
 800cc3e:	e5b7      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800cc40:	4a48      	ldr	r2, [pc, #288]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cc42:	23a8      	movs	r3, #168	; 0xa8
 800cc44:	58d4      	ldr	r4, [r2, r3]
 800cc46:	4d48      	ldr	r5, [pc, #288]	; (800cd68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cc48:	402c      	ands	r4, r5
 800cc4a:	50d4      	str	r4, [r2, r3]
 800cc4c:	58d5      	ldr	r5, [r2, r3]
 800cc4e:	24e0      	movs	r4, #224	; 0xe0
 800cc50:	0324      	lsls	r4, r4, #12
 800cc52:	432c      	orrs	r4, r5
 800cc54:	50d4      	str	r4, [r2, r3]
 800cc56:	e5ab      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800cc58:	4a42      	ldr	r2, [pc, #264]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cc5a:	23a8      	movs	r3, #168	; 0xa8
 800cc5c:	58d4      	ldr	r4, [r2, r3]
 800cc5e:	4d43      	ldr	r5, [pc, #268]	; (800cd6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cc60:	402c      	ands	r4, r5
 800cc62:	50d4      	str	r4, [r2, r3]
 800cc64:	58d5      	ldr	r5, [r2, r3]
 800cc66:	24e0      	movs	r4, #224	; 0xe0
 800cc68:	0424      	lsls	r4, r4, #16
 800cc6a:	432c      	orrs	r4, r5
 800cc6c:	50d4      	str	r4, [r2, r3]
 800cc6e:	e59f      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800cc70:	4a3a      	ldr	r2, [pc, #232]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cc72:	23a8      	movs	r3, #168	; 0xa8
 800cc74:	58d4      	ldr	r4, [r2, r3]
 800cc76:	25f0      	movs	r5, #240	; 0xf0
 800cc78:	43ac      	bics	r4, r5
 800cc7a:	50d4      	str	r4, [r2, r3]
 800cc7c:	58d4      	ldr	r4, [r2, r3]
 800cc7e:	3d10      	subs	r5, #16
 800cc80:	432c      	orrs	r4, r5
 800cc82:	50d4      	str	r4, [r2, r3]
 800cc84:	e594      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800cc86:	4a3c      	ldr	r2, [pc, #240]	; (800cd78 <RemapAndLinkDMAtoUARTRx+0x658>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d000      	beq.n	800cc8e <RemapAndLinkDMAtoUARTRx+0x56e>
 800cc8c:	e590      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
 800cc8e:	680b      	ldr	r3, [r1, #0]
 800cc90:	4a2c      	ldr	r2, [pc, #176]	; (800cd44 <RemapAndLinkDMAtoUARTRx+0x624>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d01b      	beq.n	800ccce <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800cc96:	4a2c      	ldr	r2, [pc, #176]	; (800cd48 <RemapAndLinkDMAtoUARTRx+0x628>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d022      	beq.n	800cce2 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800cc9c:	4a2b      	ldr	r2, [pc, #172]	; (800cd4c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d02b      	beq.n	800ccfa <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800cca2:	4a2b      	ldr	r2, [pc, #172]	; (800cd50 <RemapAndLinkDMAtoUARTRx+0x630>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d034      	beq.n	800cd12 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800cca8:	4a2a      	ldr	r2, [pc, #168]	; (800cd54 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d03d      	beq.n	800cd2a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800ccae:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d000      	beq.n	800ccb6 <RemapAndLinkDMAtoUARTRx+0x596>
 800ccb4:	e57c      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800ccb6:	4a29      	ldr	r2, [pc, #164]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ccb8:	23a8      	movs	r3, #168	; 0xa8
 800ccba:	58d4      	ldr	r4, [r2, r3]
 800ccbc:	4d28      	ldr	r5, [pc, #160]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ccbe:	402c      	ands	r4, r5
 800ccc0:	50d4      	str	r4, [r2, r3]
 800ccc2:	58d5      	ldr	r5, [r2, r3]
 800ccc4:	24f0      	movs	r4, #240	; 0xf0
 800ccc6:	0124      	lsls	r4, r4, #4
 800ccc8:	432c      	orrs	r4, r5
 800ccca:	50d4      	str	r4, [r2, r3]
 800cccc:	e570      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ccce:	4a25      	ldr	r2, [pc, #148]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ccd0:	23a8      	movs	r3, #168	; 0xa8
 800ccd2:	58d5      	ldr	r5, [r2, r3]
 800ccd4:	260f      	movs	r6, #15
 800ccd6:	43b5      	bics	r5, r6
 800ccd8:	50d5      	str	r5, [r2, r3]
 800ccda:	58d4      	ldr	r4, [r2, r3]
 800ccdc:	4334      	orrs	r4, r6
 800ccde:	50d4      	str	r4, [r2, r3]
 800cce0:	e566      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800cce2:	4a20      	ldr	r2, [pc, #128]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cce4:	23a8      	movs	r3, #168	; 0xa8
 800cce6:	58d4      	ldr	r4, [r2, r3]
 800cce8:	4d1d      	ldr	r5, [pc, #116]	; (800cd60 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ccea:	402c      	ands	r4, r5
 800ccec:	50d4      	str	r4, [r2, r3]
 800ccee:	58d5      	ldr	r5, [r2, r3]
 800ccf0:	24f0      	movs	r4, #240	; 0xf0
 800ccf2:	0124      	lsls	r4, r4, #4
 800ccf4:	432c      	orrs	r4, r5
 800ccf6:	50d4      	str	r4, [r2, r3]
 800ccf8:	e55a      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ccfa:	4a1a      	ldr	r2, [pc, #104]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800ccfc:	23a8      	movs	r3, #168	; 0xa8
 800ccfe:	58d4      	ldr	r4, [r2, r3]
 800cd00:	4d19      	ldr	r5, [pc, #100]	; (800cd68 <RemapAndLinkDMAtoUARTRx+0x648>)
 800cd02:	402c      	ands	r4, r5
 800cd04:	50d4      	str	r4, [r2, r3]
 800cd06:	58d5      	ldr	r5, [r2, r3]
 800cd08:	24f0      	movs	r4, #240	; 0xf0
 800cd0a:	0324      	lsls	r4, r4, #12
 800cd0c:	432c      	orrs	r4, r5
 800cd0e:	50d4      	str	r4, [r2, r3]
 800cd10:	e54e      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800cd12:	4a14      	ldr	r2, [pc, #80]	; (800cd64 <RemapAndLinkDMAtoUARTRx+0x644>)
 800cd14:	23a8      	movs	r3, #168	; 0xa8
 800cd16:	58d4      	ldr	r4, [r2, r3]
 800cd18:	4d14      	ldr	r5, [pc, #80]	; (800cd6c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800cd1a:	402c      	ands	r4, r5
 800cd1c:	50d4      	str	r4, [r2, r3]
 800cd1e:	58d5      	ldr	r5, [r2, r3]
 800cd20:	24f0      	movs	r4, #240	; 0xf0
 800cd22:	0424      	lsls	r4, r4, #16
 800cd24:	432c      	orrs	r4, r5
 800cd26:	50d4      	str	r4, [r2, r3]
 800cd28:	e542      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800cd2a:	4a0c      	ldr	r2, [pc, #48]	; (800cd5c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800cd2c:	23a8      	movs	r3, #168	; 0xa8
 800cd2e:	58d5      	ldr	r5, [r2, r3]
 800cd30:	26f0      	movs	r6, #240	; 0xf0
 800cd32:	43b5      	bics	r5, r6
 800cd34:	50d5      	str	r5, [r2, r3]
 800cd36:	58d4      	ldr	r4, [r2, r3]
 800cd38:	4334      	orrs	r4, r6
 800cd3a:	50d4      	str	r4, [r2, r3]
 800cd3c:	e538      	b.n	800c7b0 <RemapAndLinkDMAtoUARTRx+0x90>
 800cd3e:	46c0      	nop			; (mov r8, r8)
 800cd40:	40005000 	.word	0x40005000
 800cd44:	40020008 	.word	0x40020008
 800cd48:	40020030 	.word	0x40020030
 800cd4c:	40020058 	.word	0x40020058
 800cd50:	4002006c 	.word	0x4002006c
 800cd54:	4002041c 	.word	0x4002041c
 800cd58:	40020430 	.word	0x40020430
 800cd5c:	40020400 	.word	0x40020400
 800cd60:	fffff0ff 	.word	0xfffff0ff
 800cd64:	40020000 	.word	0x40020000
 800cd68:	fff0ffff 	.word	0xfff0ffff
 800cd6c:	ff0fffff 	.word	0xff0fffff
 800cd70:	40011400 	.word	0x40011400
 800cd74:	40011800 	.word	0x40011800
 800cd78:	40011c00 	.word	0x40011c00

0800cd7c <DMA_MSG_RX_Setup>:
{	
 800cd7c:	b570      	push	{r4, r5, r6, lr}
 800cd7e:	0004      	movs	r4, r0
 800cd80:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800cd82:	f7ff fccd 	bl	800c720 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cd86:	2100      	movs	r1, #0
 800cd88:	0028      	movs	r0, r5
 800cd8a:	f7ff fc13 	bl	800c5b4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cd8e:	0020      	movs	r0, r4
 800cd90:	f7fe fd10 	bl	800b7b4 <GetPort>
 800cd94:	1e41      	subs	r1, r0, #1
 800cd96:	0189      	lsls	r1, r1, #6
 800cd98:	4803      	ldr	r0, [pc, #12]	; (800cda8 <DMA_MSG_RX_Setup+0x2c>)
 800cd9a:	1809      	adds	r1, r1, r0
 800cd9c:	2240      	movs	r2, #64	; 0x40
 800cd9e:	0020      	movs	r0, r4
 800cda0:	f006 f92c 	bl	8012ffc <HAL_UART_Receive_DMA>
}
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	20000ab8 	.word	0x20000ab8

0800cdac <SetupMessagingRxDMAs>:
{	
 800cdac:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cdae:	4b17      	ldr	r3, [pc, #92]	; (800ce0c <SetupMessagingRxDMAs+0x60>)
 800cdb0:	785b      	ldrb	r3, [r3, #1]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d010      	beq.n	800cdd8 <SetupMessagingRxDMAs+0x2c>
	if (portStatus[P2] == FREE)	
 800cdb6:	4b15      	ldr	r3, [pc, #84]	; (800ce0c <SetupMessagingRxDMAs+0x60>)
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d011      	beq.n	800cde2 <SetupMessagingRxDMAs+0x36>
	if (portStatus[P3] == FREE)
 800cdbe:	4b13      	ldr	r3, [pc, #76]	; (800ce0c <SetupMessagingRxDMAs+0x60>)
 800cdc0:	78db      	ldrb	r3, [r3, #3]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d012      	beq.n	800cdec <SetupMessagingRxDMAs+0x40>
	if (portStatus[P4] == FREE)
 800cdc6:	4b11      	ldr	r3, [pc, #68]	; (800ce0c <SetupMessagingRxDMAs+0x60>)
 800cdc8:	791b      	ldrb	r3, [r3, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d013      	beq.n	800cdf6 <SetupMessagingRxDMAs+0x4a>
	if (portStatus[P5] == FREE)
 800cdce:	4b0f      	ldr	r3, [pc, #60]	; (800ce0c <SetupMessagingRxDMAs+0x60>)
 800cdd0:	795b      	ldrb	r3, [r3, #5]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d014      	beq.n	800ce00 <SetupMessagingRxDMAs+0x54>
}
 800cdd6:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cdd8:	490d      	ldr	r1, [pc, #52]	; (800ce10 <SetupMessagingRxDMAs+0x64>)
 800cdda:	480e      	ldr	r0, [pc, #56]	; (800ce14 <SetupMessagingRxDMAs+0x68>)
 800cddc:	f7ff ffce 	bl	800cd7c <DMA_MSG_RX_Setup>
 800cde0:	e7e9      	b.n	800cdb6 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cde2:	490d      	ldr	r1, [pc, #52]	; (800ce18 <SetupMessagingRxDMAs+0x6c>)
 800cde4:	480d      	ldr	r0, [pc, #52]	; (800ce1c <SetupMessagingRxDMAs+0x70>)
 800cde6:	f7ff ffc9 	bl	800cd7c <DMA_MSG_RX_Setup>
 800cdea:	e7e8      	b.n	800cdbe <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cdec:	490c      	ldr	r1, [pc, #48]	; (800ce20 <SetupMessagingRxDMAs+0x74>)
 800cdee:	480d      	ldr	r0, [pc, #52]	; (800ce24 <SetupMessagingRxDMAs+0x78>)
 800cdf0:	f7ff ffc4 	bl	800cd7c <DMA_MSG_RX_Setup>
 800cdf4:	e7e7      	b.n	800cdc6 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cdf6:	490c      	ldr	r1, [pc, #48]	; (800ce28 <SetupMessagingRxDMAs+0x7c>)
 800cdf8:	480c      	ldr	r0, [pc, #48]	; (800ce2c <SetupMessagingRxDMAs+0x80>)
 800cdfa:	f7ff ffbf 	bl	800cd7c <DMA_MSG_RX_Setup>
 800cdfe:	e7e6      	b.n	800cdce <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800ce00:	490b      	ldr	r1, [pc, #44]	; (800ce30 <SetupMessagingRxDMAs+0x84>)
 800ce02:	480c      	ldr	r0, [pc, #48]	; (800ce34 <SetupMessagingRxDMAs+0x88>)
 800ce04:	f7ff ffba 	bl	800cd7c <DMA_MSG_RX_Setup>
}
 800ce08:	e7e5      	b.n	800cdd6 <SetupMessagingRxDMAs+0x2a>
 800ce0a:	46c0      	nop			; (mov r8, r8)
 800ce0c:	200008e0 	.word	0x200008e0
 800ce10:	20000f30 	.word	0x20000f30
 800ce14:	20006400 	.word	0x20006400
 800ce18:	20000f68 	.word	0x20000f68
 800ce1c:	20006474 	.word	0x20006474
 800ce20:	20000fa0 	.word	0x20000fa0
 800ce24:	20006388 	.word	0x20006388
 800ce28:	20000fd8 	.word	0x20000fd8
 800ce2c:	20006254 	.word	0x20006254
 800ce30:	20001010 	.word	0x20001010
 800ce34:	20006304 	.word	0x20006304

0800ce38 <DMA_STREAM_Setup>:
{	
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	0005      	movs	r5, r0
 800ce3c:	000f      	movs	r7, r1
 800ce3e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800ce40:	f7fe fcb8 	bl	800b7b4 <GetPort>
	hDMA = &streamDMA[port-1];
 800ce44:	3801      	subs	r0, #1
 800ce46:	00c4      	lsls	r4, r0, #3
 800ce48:	1a24      	subs	r4, r4, r0
 800ce4a:	00e4      	lsls	r4, r4, #3
 800ce4c:	4809      	ldr	r0, [pc, #36]	; (800ce74 <DMA_STREAM_Setup+0x3c>)
 800ce4e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800ce50:	0021      	movs	r1, r4
 800ce52:	0028      	movs	r0, r5
 800ce54:	f7ff fc64 	bl	800c720 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800ce58:	2101      	movs	r1, #1
 800ce5a:	0020      	movs	r0, r4
 800ce5c:	f7ff fbaa 	bl	800c5b4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800ce60:	2369      	movs	r3, #105	; 0x69
 800ce62:	2201      	movs	r2, #1
 800ce64:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	3128      	adds	r1, #40	; 0x28
 800ce6a:	0032      	movs	r2, r6
 800ce6c:	0028      	movs	r0, r5
 800ce6e:	f006 f8c5 	bl	8012ffc <HAL_UART_Receive_DMA>
}
 800ce72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce74:	20001128 	.word	0x20001128

0800ce78 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800ce78:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ce7a:	6803      	ldr	r3, [r0, #0]
 800ce7c:	4abd      	ldr	r2, [pc, #756]	; (800d174 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d02f      	beq.n	800cee2 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800ce82:	4abd      	ldr	r2, [pc, #756]	; (800d178 <RemapAndLinkDMAtoUARTTx+0x300>)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d100      	bne.n	800ce8a <RemapAndLinkDMAtoUARTTx+0x12>
 800ce88:	e087      	b.n	800cf9a <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800ce8a:	4abc      	ldr	r2, [pc, #752]	; (800d17c <RemapAndLinkDMAtoUARTTx+0x304>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d100      	bne.n	800ce92 <RemapAndLinkDMAtoUARTTx+0x1a>
 800ce90:	e0dc      	b.n	800d04c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ce92:	4abb      	ldr	r2, [pc, #748]	; (800d180 <RemapAndLinkDMAtoUARTTx+0x308>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d000      	beq.n	800ce9a <RemapAndLinkDMAtoUARTTx+0x22>
 800ce98:	e18a      	b.n	800d1b0 <RemapAndLinkDMAtoUARTTx+0x338>
 800ce9a:	680b      	ldr	r3, [r1, #0]
 800ce9c:	4ab9      	ldr	r2, [pc, #740]	; (800d184 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d100      	bne.n	800cea4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800cea2:	e12d      	b.n	800d100 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800cea4:	4ab8      	ldr	r2, [pc, #736]	; (800d188 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d100      	bne.n	800ceac <RemapAndLinkDMAtoUARTTx+0x34>
 800ceaa:	e134      	b.n	800d116 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800ceac:	4ab7      	ldr	r2, [pc, #732]	; (800d18c <RemapAndLinkDMAtoUARTTx+0x314>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d100      	bne.n	800ceb4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800ceb2:	e13c      	b.n	800d12e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800ceb4:	4ab6      	ldr	r2, [pc, #728]	; (800d190 <RemapAndLinkDMAtoUARTTx+0x318>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d100      	bne.n	800cebc <RemapAndLinkDMAtoUARTTx+0x44>
 800ceba:	e144      	b.n	800d146 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800cebc:	4ab5      	ldr	r2, [pc, #724]	; (800d194 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d100      	bne.n	800cec4 <RemapAndLinkDMAtoUARTTx+0x4c>
 800cec2:	e14b      	b.n	800d15c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800cec4:	4ab4      	ldr	r2, [pc, #720]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d11e      	bne.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800ceca:	4ab4      	ldr	r2, [pc, #720]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cecc:	23a8      	movs	r3, #168	; 0xa8
 800cece:	58d4      	ldr	r4, [r2, r3]
 800ced0:	4db3      	ldr	r5, [pc, #716]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800ced2:	402c      	ands	r4, r5
 800ced4:	50d4      	str	r4, [r2, r3]
 800ced6:	58d5      	ldr	r5, [r2, r3]
 800ced8:	24b0      	movs	r4, #176	; 0xb0
 800ceda:	0324      	lsls	r4, r4, #12
 800cedc:	432c      	orrs	r4, r5
 800cede:	50d4      	str	r4, [r2, r3]
 800cee0:	e012      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cee2:	680b      	ldr	r3, [r1, #0]
 800cee4:	4aa7      	ldr	r2, [pc, #668]	; (800d184 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d011      	beq.n	800cf0e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800ceea:	4aa7      	ldr	r2, [pc, #668]	; (800d188 <RemapAndLinkDMAtoUARTTx+0x310>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d019      	beq.n	800cf24 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800cef0:	4aa6      	ldr	r2, [pc, #664]	; (800d18c <RemapAndLinkDMAtoUARTTx+0x314>)
 800cef2:	4293      	cmp	r3, r2
 800cef4:	d022      	beq.n	800cf3c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800cef6:	4aa6      	ldr	r2, [pc, #664]	; (800d190 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d02b      	beq.n	800cf54 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800cefc:	4aa5      	ldr	r2, [pc, #660]	; (800d194 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d033      	beq.n	800cf6a <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cf02:	4aa5      	ldr	r2, [pc, #660]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d03c      	beq.n	800cf82 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800cf08:	6601      	str	r1, [r0, #96]	; 0x60
 800cf0a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cf0c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800cf0e:	4aa5      	ldr	r2, [pc, #660]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cf10:	23a8      	movs	r3, #168	; 0xa8
 800cf12:	58d4      	ldr	r4, [r2, r3]
 800cf14:	25f0      	movs	r5, #240	; 0xf0
 800cf16:	43ac      	bics	r4, r5
 800cf18:	50d4      	str	r4, [r2, r3]
 800cf1a:	58d4      	ldr	r4, [r2, r3]
 800cf1c:	3d70      	subs	r5, #112	; 0x70
 800cf1e:	432c      	orrs	r4, r5
 800cf20:	50d4      	str	r4, [r2, r3]
 800cf22:	e7f1      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800cf24:	4a9f      	ldr	r2, [pc, #636]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cf26:	23a8      	movs	r3, #168	; 0xa8
 800cf28:	58d4      	ldr	r4, [r2, r3]
 800cf2a:	4d9f      	ldr	r5, [pc, #636]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cf2c:	402c      	ands	r4, r5
 800cf2e:	50d4      	str	r4, [r2, r3]
 800cf30:	58d5      	ldr	r5, [r2, r3]
 800cf32:	2480      	movs	r4, #128	; 0x80
 800cf34:	0224      	lsls	r4, r4, #8
 800cf36:	432c      	orrs	r4, r5
 800cf38:	50d4      	str	r4, [r2, r3]
 800cf3a:	e7e5      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800cf3c:	4a99      	ldr	r2, [pc, #612]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cf3e:	23a8      	movs	r3, #168	; 0xa8
 800cf40:	58d4      	ldr	r4, [r2, r3]
 800cf42:	4d9a      	ldr	r5, [pc, #616]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800cf44:	402c      	ands	r4, r5
 800cf46:	50d4      	str	r4, [r2, r3]
 800cf48:	58d5      	ldr	r5, [r2, r3]
 800cf4a:	2480      	movs	r4, #128	; 0x80
 800cf4c:	0524      	lsls	r4, r4, #20
 800cf4e:	432c      	orrs	r4, r5
 800cf50:	50d4      	str	r4, [r2, r3]
 800cf52:	e7d9      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800cf54:	4a91      	ldr	r2, [pc, #580]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cf56:	23a8      	movs	r3, #168	; 0xa8
 800cf58:	58d4      	ldr	r4, [r2, r3]
 800cf5a:	250f      	movs	r5, #15
 800cf5c:	43ac      	bics	r4, r5
 800cf5e:	50d4      	str	r4, [r2, r3]
 800cf60:	58d4      	ldr	r4, [r2, r3]
 800cf62:	3d07      	subs	r5, #7
 800cf64:	432c      	orrs	r4, r5
 800cf66:	50d4      	str	r4, [r2, r3]
 800cf68:	e7ce      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800cf6a:	4a8c      	ldr	r2, [pc, #560]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cf6c:	23a8      	movs	r3, #168	; 0xa8
 800cf6e:	58d4      	ldr	r4, [r2, r3]
 800cf70:	4d8d      	ldr	r5, [pc, #564]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cf72:	402c      	ands	r4, r5
 800cf74:	50d4      	str	r4, [r2, r3]
 800cf76:	58d5      	ldr	r5, [r2, r3]
 800cf78:	2480      	movs	r4, #128	; 0x80
 800cf7a:	0224      	lsls	r4, r4, #8
 800cf7c:	432c      	orrs	r4, r5
 800cf7e:	50d4      	str	r4, [r2, r3]
 800cf80:	e7c2      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800cf82:	4a86      	ldr	r2, [pc, #536]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cf84:	23a8      	movs	r3, #168	; 0xa8
 800cf86:	58d4      	ldr	r4, [r2, r3]
 800cf88:	4d85      	ldr	r5, [pc, #532]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cf8a:	402c      	ands	r4, r5
 800cf8c:	50d4      	str	r4, [r2, r3]
 800cf8e:	58d5      	ldr	r5, [r2, r3]
 800cf90:	2480      	movs	r4, #128	; 0x80
 800cf92:	0324      	lsls	r4, r4, #12
 800cf94:	432c      	orrs	r4, r5
 800cf96:	50d4      	str	r4, [r2, r3]
 800cf98:	e7b6      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cf9a:	680b      	ldr	r3, [r1, #0]
 800cf9c:	4a79      	ldr	r2, [pc, #484]	; (800d184 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d01a      	beq.n	800cfd8 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cfa2:	4a79      	ldr	r2, [pc, #484]	; (800d188 <RemapAndLinkDMAtoUARTTx+0x310>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d022      	beq.n	800cfee <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cfa8:	4a78      	ldr	r2, [pc, #480]	; (800d18c <RemapAndLinkDMAtoUARTTx+0x314>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d02b      	beq.n	800d006 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cfae:	4a78      	ldr	r2, [pc, #480]	; (800d190 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d034      	beq.n	800d01e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800cfb4:	4a77      	ldr	r2, [pc, #476]	; (800d194 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d03c      	beq.n	800d034 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cfba:	4a77      	ldr	r2, [pc, #476]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d1a3      	bne.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800cfc0:	4a76      	ldr	r2, [pc, #472]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cfc2:	23a8      	movs	r3, #168	; 0xa8
 800cfc4:	58d4      	ldr	r4, [r2, r3]
 800cfc6:	4d76      	ldr	r5, [pc, #472]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cfc8:	402c      	ands	r4, r5
 800cfca:	50d4      	str	r4, [r2, r3]
 800cfcc:	58d5      	ldr	r5, [r2, r3]
 800cfce:	2490      	movs	r4, #144	; 0x90
 800cfd0:	0324      	lsls	r4, r4, #12
 800cfd2:	432c      	orrs	r4, r5
 800cfd4:	50d4      	str	r4, [r2, r3]
 800cfd6:	e797      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800cfd8:	4a72      	ldr	r2, [pc, #456]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cfda:	23a8      	movs	r3, #168	; 0xa8
 800cfdc:	58d4      	ldr	r4, [r2, r3]
 800cfde:	25f0      	movs	r5, #240	; 0xf0
 800cfe0:	43ac      	bics	r4, r5
 800cfe2:	50d4      	str	r4, [r2, r3]
 800cfe4:	58d4      	ldr	r4, [r2, r3]
 800cfe6:	3d60      	subs	r5, #96	; 0x60
 800cfe8:	432c      	orrs	r4, r5
 800cfea:	50d4      	str	r4, [r2, r3]
 800cfec:	e78c      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800cfee:	4a6d      	ldr	r2, [pc, #436]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cff0:	23a8      	movs	r3, #168	; 0xa8
 800cff2:	58d4      	ldr	r4, [r2, r3]
 800cff4:	4d6c      	ldr	r5, [pc, #432]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cff6:	402c      	ands	r4, r5
 800cff8:	50d4      	str	r4, [r2, r3]
 800cffa:	58d5      	ldr	r5, [r2, r3]
 800cffc:	2490      	movs	r4, #144	; 0x90
 800cffe:	0224      	lsls	r4, r4, #8
 800d000:	432c      	orrs	r4, r5
 800d002:	50d4      	str	r4, [r2, r3]
 800d004:	e780      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d006:	4a67      	ldr	r2, [pc, #412]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d008:	23a8      	movs	r3, #168	; 0xa8
 800d00a:	58d4      	ldr	r4, [r2, r3]
 800d00c:	4d67      	ldr	r5, [pc, #412]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d00e:	402c      	ands	r4, r5
 800d010:	50d4      	str	r4, [r2, r3]
 800d012:	58d5      	ldr	r5, [r2, r3]
 800d014:	2490      	movs	r4, #144	; 0x90
 800d016:	0524      	lsls	r4, r4, #20
 800d018:	432c      	orrs	r4, r5
 800d01a:	50d4      	str	r4, [r2, r3]
 800d01c:	e774      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d01e:	4a5f      	ldr	r2, [pc, #380]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d020:	23a8      	movs	r3, #168	; 0xa8
 800d022:	58d4      	ldr	r4, [r2, r3]
 800d024:	250f      	movs	r5, #15
 800d026:	43ac      	bics	r4, r5
 800d028:	50d4      	str	r4, [r2, r3]
 800d02a:	58d4      	ldr	r4, [r2, r3]
 800d02c:	3d06      	subs	r5, #6
 800d02e:	432c      	orrs	r4, r5
 800d030:	50d4      	str	r4, [r2, r3]
 800d032:	e769      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d034:	4a59      	ldr	r2, [pc, #356]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d036:	23a8      	movs	r3, #168	; 0xa8
 800d038:	58d4      	ldr	r4, [r2, r3]
 800d03a:	4d5b      	ldr	r5, [pc, #364]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d03c:	402c      	ands	r4, r5
 800d03e:	50d4      	str	r4, [r2, r3]
 800d040:	58d5      	ldr	r5, [r2, r3]
 800d042:	2490      	movs	r4, #144	; 0x90
 800d044:	0224      	lsls	r4, r4, #8
 800d046:	432c      	orrs	r4, r5
 800d048:	50d4      	str	r4, [r2, r3]
 800d04a:	e75d      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d04c:	680b      	ldr	r3, [r1, #0]
 800d04e:	4a4d      	ldr	r2, [pc, #308]	; (800d184 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d01b      	beq.n	800d08c <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d054:	4a4c      	ldr	r2, [pc, #304]	; (800d188 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d023      	beq.n	800d0a2 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d05a:	4a4c      	ldr	r2, [pc, #304]	; (800d18c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d02c      	beq.n	800d0ba <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d060:	4a4b      	ldr	r2, [pc, #300]	; (800d190 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d035      	beq.n	800d0d2 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d066:	4a4b      	ldr	r2, [pc, #300]	; (800d194 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d03d      	beq.n	800d0e8 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d06c:	4a4a      	ldr	r2, [pc, #296]	; (800d198 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d000      	beq.n	800d074 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d072:	e749      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d074:	4a49      	ldr	r2, [pc, #292]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d076:	23a8      	movs	r3, #168	; 0xa8
 800d078:	58d4      	ldr	r4, [r2, r3]
 800d07a:	4d49      	ldr	r5, [pc, #292]	; (800d1a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d07c:	402c      	ands	r4, r5
 800d07e:	50d4      	str	r4, [r2, r3]
 800d080:	58d5      	ldr	r5, [r2, r3]
 800d082:	24a0      	movs	r4, #160	; 0xa0
 800d084:	0324      	lsls	r4, r4, #12
 800d086:	432c      	orrs	r4, r5
 800d088:	50d4      	str	r4, [r2, r3]
 800d08a:	e73d      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d08c:	4a45      	ldr	r2, [pc, #276]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d08e:	23a8      	movs	r3, #168	; 0xa8
 800d090:	58d4      	ldr	r4, [r2, r3]
 800d092:	25f0      	movs	r5, #240	; 0xf0
 800d094:	43ac      	bics	r4, r5
 800d096:	50d4      	str	r4, [r2, r3]
 800d098:	58d4      	ldr	r4, [r2, r3]
 800d09a:	3d50      	subs	r5, #80	; 0x50
 800d09c:	432c      	orrs	r4, r5
 800d09e:	50d4      	str	r4, [r2, r3]
 800d0a0:	e732      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d0a2:	4a40      	ldr	r2, [pc, #256]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d0a4:	23a8      	movs	r3, #168	; 0xa8
 800d0a6:	58d4      	ldr	r4, [r2, r3]
 800d0a8:	4d3f      	ldr	r5, [pc, #252]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d0aa:	402c      	ands	r4, r5
 800d0ac:	50d4      	str	r4, [r2, r3]
 800d0ae:	58d5      	ldr	r5, [r2, r3]
 800d0b0:	24a0      	movs	r4, #160	; 0xa0
 800d0b2:	0224      	lsls	r4, r4, #8
 800d0b4:	432c      	orrs	r4, r5
 800d0b6:	50d4      	str	r4, [r2, r3]
 800d0b8:	e726      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d0ba:	4a3a      	ldr	r2, [pc, #232]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d0bc:	23a8      	movs	r3, #168	; 0xa8
 800d0be:	58d4      	ldr	r4, [r2, r3]
 800d0c0:	4d3a      	ldr	r5, [pc, #232]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d0c2:	402c      	ands	r4, r5
 800d0c4:	50d4      	str	r4, [r2, r3]
 800d0c6:	58d5      	ldr	r5, [r2, r3]
 800d0c8:	24a0      	movs	r4, #160	; 0xa0
 800d0ca:	0524      	lsls	r4, r4, #20
 800d0cc:	432c      	orrs	r4, r5
 800d0ce:	50d4      	str	r4, [r2, r3]
 800d0d0:	e71a      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d0d2:	4a32      	ldr	r2, [pc, #200]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d0d4:	23a8      	movs	r3, #168	; 0xa8
 800d0d6:	58d4      	ldr	r4, [r2, r3]
 800d0d8:	250f      	movs	r5, #15
 800d0da:	43ac      	bics	r4, r5
 800d0dc:	50d4      	str	r4, [r2, r3]
 800d0de:	58d4      	ldr	r4, [r2, r3]
 800d0e0:	3d05      	subs	r5, #5
 800d0e2:	432c      	orrs	r4, r5
 800d0e4:	50d4      	str	r4, [r2, r3]
 800d0e6:	e70f      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d0e8:	4a2c      	ldr	r2, [pc, #176]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d0ea:	23a8      	movs	r3, #168	; 0xa8
 800d0ec:	58d4      	ldr	r4, [r2, r3]
 800d0ee:	4d2e      	ldr	r5, [pc, #184]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d0f0:	402c      	ands	r4, r5
 800d0f2:	50d4      	str	r4, [r2, r3]
 800d0f4:	58d5      	ldr	r5, [r2, r3]
 800d0f6:	24a0      	movs	r4, #160	; 0xa0
 800d0f8:	0224      	lsls	r4, r4, #8
 800d0fa:	432c      	orrs	r4, r5
 800d0fc:	50d4      	str	r4, [r2, r3]
 800d0fe:	e703      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d100:	4a28      	ldr	r2, [pc, #160]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d102:	23a8      	movs	r3, #168	; 0xa8
 800d104:	58d4      	ldr	r4, [r2, r3]
 800d106:	25f0      	movs	r5, #240	; 0xf0
 800d108:	43ac      	bics	r4, r5
 800d10a:	50d4      	str	r4, [r2, r3]
 800d10c:	58d4      	ldr	r4, [r2, r3]
 800d10e:	3d40      	subs	r5, #64	; 0x40
 800d110:	432c      	orrs	r4, r5
 800d112:	50d4      	str	r4, [r2, r3]
 800d114:	e6f8      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d116:	4a23      	ldr	r2, [pc, #140]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d118:	23a8      	movs	r3, #168	; 0xa8
 800d11a:	58d4      	ldr	r4, [r2, r3]
 800d11c:	4d22      	ldr	r5, [pc, #136]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d11e:	402c      	ands	r4, r5
 800d120:	50d4      	str	r4, [r2, r3]
 800d122:	58d5      	ldr	r5, [r2, r3]
 800d124:	24b0      	movs	r4, #176	; 0xb0
 800d126:	0224      	lsls	r4, r4, #8
 800d128:	432c      	orrs	r4, r5
 800d12a:	50d4      	str	r4, [r2, r3]
 800d12c:	e6ec      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d12e:	4a1d      	ldr	r2, [pc, #116]	; (800d1a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d130:	23a8      	movs	r3, #168	; 0xa8
 800d132:	58d4      	ldr	r4, [r2, r3]
 800d134:	4d1d      	ldr	r5, [pc, #116]	; (800d1ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d136:	402c      	ands	r4, r5
 800d138:	50d4      	str	r4, [r2, r3]
 800d13a:	58d5      	ldr	r5, [r2, r3]
 800d13c:	24b0      	movs	r4, #176	; 0xb0
 800d13e:	0524      	lsls	r4, r4, #20
 800d140:	432c      	orrs	r4, r5
 800d142:	50d4      	str	r4, [r2, r3]
 800d144:	e6e0      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d146:	4a15      	ldr	r2, [pc, #84]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d148:	23a8      	movs	r3, #168	; 0xa8
 800d14a:	58d4      	ldr	r4, [r2, r3]
 800d14c:	250f      	movs	r5, #15
 800d14e:	43ac      	bics	r4, r5
 800d150:	50d4      	str	r4, [r2, r3]
 800d152:	58d4      	ldr	r4, [r2, r3]
 800d154:	3d04      	subs	r5, #4
 800d156:	432c      	orrs	r4, r5
 800d158:	50d4      	str	r4, [r2, r3]
 800d15a:	e6d5      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d15c:	4a0f      	ldr	r2, [pc, #60]	; (800d19c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d15e:	23a8      	movs	r3, #168	; 0xa8
 800d160:	58d4      	ldr	r4, [r2, r3]
 800d162:	4d11      	ldr	r5, [pc, #68]	; (800d1a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d164:	402c      	ands	r4, r5
 800d166:	50d4      	str	r4, [r2, r3]
 800d168:	58d5      	ldr	r5, [r2, r3]
 800d16a:	24b0      	movs	r4, #176	; 0xb0
 800d16c:	0224      	lsls	r4, r4, #8
 800d16e:	432c      	orrs	r4, r5
 800d170:	50d4      	str	r4, [r2, r3]
 800d172:	e6c9      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
 800d174:	40013800 	.word	0x40013800
 800d178:	40004400 	.word	0x40004400
 800d17c:	40004800 	.word	0x40004800
 800d180:	40004c00 	.word	0x40004c00
 800d184:	4002001c 	.word	0x4002001c
 800d188:	40020044 	.word	0x40020044
 800d18c:	40020080 	.word	0x40020080
 800d190:	40020408 	.word	0x40020408
 800d194:	40020444 	.word	0x40020444
 800d198:	40020458 	.word	0x40020458
 800d19c:	40020400 	.word	0x40020400
 800d1a0:	fff0ffff 	.word	0xfff0ffff
 800d1a4:	40020000 	.word	0x40020000
 800d1a8:	ffff0fff 	.word	0xffff0fff
 800d1ac:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d1b0:	4ab9      	ldr	r2, [pc, #740]	; (800d498 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d159      	bne.n	800d26a <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d1b6:	680b      	ldr	r3, [r1, #0]
 800d1b8:	4ab8      	ldr	r2, [pc, #736]	; (800d49c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d01b      	beq.n	800d1f6 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d1be:	4ab8      	ldr	r2, [pc, #736]	; (800d4a0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d023      	beq.n	800d20c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d1c4:	4ab7      	ldr	r2, [pc, #732]	; (800d4a4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d02c      	beq.n	800d224 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d1ca:	4ab7      	ldr	r2, [pc, #732]	; (800d4a8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d035      	beq.n	800d23c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d1d0:	4ab6      	ldr	r2, [pc, #728]	; (800d4ac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d03d      	beq.n	800d252 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d1d6:	4ab6      	ldr	r2, [pc, #728]	; (800d4b0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d000      	beq.n	800d1de <RemapAndLinkDMAtoUARTTx+0x366>
 800d1dc:	e694      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d1de:	4ab5      	ldr	r2, [pc, #724]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d1e0:	23a8      	movs	r3, #168	; 0xa8
 800d1e2:	58d4      	ldr	r4, [r2, r3]
 800d1e4:	4db4      	ldr	r5, [pc, #720]	; (800d4b8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d1e6:	402c      	ands	r4, r5
 800d1e8:	50d4      	str	r4, [r2, r3]
 800d1ea:	58d5      	ldr	r5, [r2, r3]
 800d1ec:	24c0      	movs	r4, #192	; 0xc0
 800d1ee:	0324      	lsls	r4, r4, #12
 800d1f0:	432c      	orrs	r4, r5
 800d1f2:	50d4      	str	r4, [r2, r3]
 800d1f4:	e688      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d1f6:	4ab1      	ldr	r2, [pc, #708]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d1f8:	23a8      	movs	r3, #168	; 0xa8
 800d1fa:	58d4      	ldr	r4, [r2, r3]
 800d1fc:	25f0      	movs	r5, #240	; 0xf0
 800d1fe:	43ac      	bics	r4, r5
 800d200:	50d4      	str	r4, [r2, r3]
 800d202:	58d4      	ldr	r4, [r2, r3]
 800d204:	3d30      	subs	r5, #48	; 0x30
 800d206:	432c      	orrs	r4, r5
 800d208:	50d4      	str	r4, [r2, r3]
 800d20a:	e67d      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d20c:	4aab      	ldr	r2, [pc, #684]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d20e:	23a8      	movs	r3, #168	; 0xa8
 800d210:	58d4      	ldr	r4, [r2, r3]
 800d212:	4dab      	ldr	r5, [pc, #684]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d214:	402c      	ands	r4, r5
 800d216:	50d4      	str	r4, [r2, r3]
 800d218:	58d5      	ldr	r5, [r2, r3]
 800d21a:	24c0      	movs	r4, #192	; 0xc0
 800d21c:	0224      	lsls	r4, r4, #8
 800d21e:	432c      	orrs	r4, r5
 800d220:	50d4      	str	r4, [r2, r3]
 800d222:	e671      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d224:	4aa5      	ldr	r2, [pc, #660]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d226:	23a8      	movs	r3, #168	; 0xa8
 800d228:	58d4      	ldr	r4, [r2, r3]
 800d22a:	4da6      	ldr	r5, [pc, #664]	; (800d4c4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d22c:	402c      	ands	r4, r5
 800d22e:	50d4      	str	r4, [r2, r3]
 800d230:	58d5      	ldr	r5, [r2, r3]
 800d232:	24c0      	movs	r4, #192	; 0xc0
 800d234:	0524      	lsls	r4, r4, #20
 800d236:	432c      	orrs	r4, r5
 800d238:	50d4      	str	r4, [r2, r3]
 800d23a:	e665      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d23c:	4a9d      	ldr	r2, [pc, #628]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d23e:	23a8      	movs	r3, #168	; 0xa8
 800d240:	58d4      	ldr	r4, [r2, r3]
 800d242:	250f      	movs	r5, #15
 800d244:	43ac      	bics	r4, r5
 800d246:	50d4      	str	r4, [r2, r3]
 800d248:	58d4      	ldr	r4, [r2, r3]
 800d24a:	3d03      	subs	r5, #3
 800d24c:	432c      	orrs	r4, r5
 800d24e:	50d4      	str	r4, [r2, r3]
 800d250:	e65a      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d252:	4a98      	ldr	r2, [pc, #608]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d254:	23a8      	movs	r3, #168	; 0xa8
 800d256:	58d4      	ldr	r4, [r2, r3]
 800d258:	4d99      	ldr	r5, [pc, #612]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d25a:	402c      	ands	r4, r5
 800d25c:	50d4      	str	r4, [r2, r3]
 800d25e:	58d5      	ldr	r5, [r2, r3]
 800d260:	24c0      	movs	r4, #192	; 0xc0
 800d262:	0224      	lsls	r4, r4, #8
 800d264:	432c      	orrs	r4, r5
 800d266:	50d4      	str	r4, [r2, r3]
 800d268:	e64e      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d26a:	4a97      	ldr	r2, [pc, #604]	; (800d4c8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d159      	bne.n	800d324 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d270:	680b      	ldr	r3, [r1, #0]
 800d272:	4a8a      	ldr	r2, [pc, #552]	; (800d49c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d01b      	beq.n	800d2b0 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d278:	4a89      	ldr	r2, [pc, #548]	; (800d4a0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d023      	beq.n	800d2c6 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d27e:	4a89      	ldr	r2, [pc, #548]	; (800d4a4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d280:	4293      	cmp	r3, r2
 800d282:	d02c      	beq.n	800d2de <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d284:	4a88      	ldr	r2, [pc, #544]	; (800d4a8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d035      	beq.n	800d2f6 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d28a:	4a88      	ldr	r2, [pc, #544]	; (800d4ac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d03d      	beq.n	800d30c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d290:	4a87      	ldr	r2, [pc, #540]	; (800d4b0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d000      	beq.n	800d298 <RemapAndLinkDMAtoUARTTx+0x420>
 800d296:	e637      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d298:	4a86      	ldr	r2, [pc, #536]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d29a:	23a8      	movs	r3, #168	; 0xa8
 800d29c:	58d4      	ldr	r4, [r2, r3]
 800d29e:	4d86      	ldr	r5, [pc, #536]	; (800d4b8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d2a0:	402c      	ands	r4, r5
 800d2a2:	50d4      	str	r4, [r2, r3]
 800d2a4:	58d5      	ldr	r5, [r2, r3]
 800d2a6:	24d0      	movs	r4, #208	; 0xd0
 800d2a8:	0324      	lsls	r4, r4, #12
 800d2aa:	432c      	orrs	r4, r5
 800d2ac:	50d4      	str	r4, [r2, r3]
 800d2ae:	e62b      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d2b0:	4a82      	ldr	r2, [pc, #520]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d2b2:	23a8      	movs	r3, #168	; 0xa8
 800d2b4:	58d4      	ldr	r4, [r2, r3]
 800d2b6:	25f0      	movs	r5, #240	; 0xf0
 800d2b8:	43ac      	bics	r4, r5
 800d2ba:	50d4      	str	r4, [r2, r3]
 800d2bc:	58d4      	ldr	r4, [r2, r3]
 800d2be:	3d20      	subs	r5, #32
 800d2c0:	432c      	orrs	r4, r5
 800d2c2:	50d4      	str	r4, [r2, r3]
 800d2c4:	e620      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d2c6:	4a7d      	ldr	r2, [pc, #500]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d2c8:	23a8      	movs	r3, #168	; 0xa8
 800d2ca:	58d4      	ldr	r4, [r2, r3]
 800d2cc:	4d7c      	ldr	r5, [pc, #496]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d2ce:	402c      	ands	r4, r5
 800d2d0:	50d4      	str	r4, [r2, r3]
 800d2d2:	58d5      	ldr	r5, [r2, r3]
 800d2d4:	24d0      	movs	r4, #208	; 0xd0
 800d2d6:	0224      	lsls	r4, r4, #8
 800d2d8:	432c      	orrs	r4, r5
 800d2da:	50d4      	str	r4, [r2, r3]
 800d2dc:	e614      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d2de:	4a77      	ldr	r2, [pc, #476]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d2e0:	23a8      	movs	r3, #168	; 0xa8
 800d2e2:	58d4      	ldr	r4, [r2, r3]
 800d2e4:	4d77      	ldr	r5, [pc, #476]	; (800d4c4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d2e6:	402c      	ands	r4, r5
 800d2e8:	50d4      	str	r4, [r2, r3]
 800d2ea:	58d5      	ldr	r5, [r2, r3]
 800d2ec:	24d0      	movs	r4, #208	; 0xd0
 800d2ee:	0524      	lsls	r4, r4, #20
 800d2f0:	432c      	orrs	r4, r5
 800d2f2:	50d4      	str	r4, [r2, r3]
 800d2f4:	e608      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d2f6:	4a6f      	ldr	r2, [pc, #444]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d2f8:	23a8      	movs	r3, #168	; 0xa8
 800d2fa:	58d4      	ldr	r4, [r2, r3]
 800d2fc:	250f      	movs	r5, #15
 800d2fe:	43ac      	bics	r4, r5
 800d300:	50d4      	str	r4, [r2, r3]
 800d302:	58d4      	ldr	r4, [r2, r3]
 800d304:	3d02      	subs	r5, #2
 800d306:	432c      	orrs	r4, r5
 800d308:	50d4      	str	r4, [r2, r3]
 800d30a:	e5fd      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d30c:	4a69      	ldr	r2, [pc, #420]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d30e:	23a8      	movs	r3, #168	; 0xa8
 800d310:	58d4      	ldr	r4, [r2, r3]
 800d312:	4d6b      	ldr	r5, [pc, #428]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d314:	402c      	ands	r4, r5
 800d316:	50d4      	str	r4, [r2, r3]
 800d318:	58d5      	ldr	r5, [r2, r3]
 800d31a:	24d0      	movs	r4, #208	; 0xd0
 800d31c:	0224      	lsls	r4, r4, #8
 800d31e:	432c      	orrs	r4, r5
 800d320:	50d4      	str	r4, [r2, r3]
 800d322:	e5f1      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d324:	4a69      	ldr	r2, [pc, #420]	; (800d4cc <RemapAndLinkDMAtoUARTTx+0x654>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d159      	bne.n	800d3de <RemapAndLinkDMAtoUARTTx+0x566>
 800d32a:	680b      	ldr	r3, [r1, #0]
 800d32c:	4a5b      	ldr	r2, [pc, #364]	; (800d49c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d01b      	beq.n	800d36a <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d332:	4a5b      	ldr	r2, [pc, #364]	; (800d4a0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d023      	beq.n	800d380 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d338:	4a5a      	ldr	r2, [pc, #360]	; (800d4a4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d02c      	beq.n	800d398 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d33e:	4a5a      	ldr	r2, [pc, #360]	; (800d4a8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d035      	beq.n	800d3b0 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d344:	4a59      	ldr	r2, [pc, #356]	; (800d4ac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d03d      	beq.n	800d3c6 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d34a:	4a59      	ldr	r2, [pc, #356]	; (800d4b0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d000      	beq.n	800d352 <RemapAndLinkDMAtoUARTTx+0x4da>
 800d350:	e5da      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d352:	4a58      	ldr	r2, [pc, #352]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d354:	23a8      	movs	r3, #168	; 0xa8
 800d356:	58d4      	ldr	r4, [r2, r3]
 800d358:	4d57      	ldr	r5, [pc, #348]	; (800d4b8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d35a:	402c      	ands	r4, r5
 800d35c:	50d4      	str	r4, [r2, r3]
 800d35e:	58d5      	ldr	r5, [r2, r3]
 800d360:	24e0      	movs	r4, #224	; 0xe0
 800d362:	0324      	lsls	r4, r4, #12
 800d364:	432c      	orrs	r4, r5
 800d366:	50d4      	str	r4, [r2, r3]
 800d368:	e5ce      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d36a:	4a54      	ldr	r2, [pc, #336]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d36c:	23a8      	movs	r3, #168	; 0xa8
 800d36e:	58d4      	ldr	r4, [r2, r3]
 800d370:	25f0      	movs	r5, #240	; 0xf0
 800d372:	43ac      	bics	r4, r5
 800d374:	50d4      	str	r4, [r2, r3]
 800d376:	58d4      	ldr	r4, [r2, r3]
 800d378:	3d10      	subs	r5, #16
 800d37a:	432c      	orrs	r4, r5
 800d37c:	50d4      	str	r4, [r2, r3]
 800d37e:	e5c3      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d380:	4a4e      	ldr	r2, [pc, #312]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d382:	23a8      	movs	r3, #168	; 0xa8
 800d384:	58d4      	ldr	r4, [r2, r3]
 800d386:	4d4e      	ldr	r5, [pc, #312]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d388:	402c      	ands	r4, r5
 800d38a:	50d4      	str	r4, [r2, r3]
 800d38c:	58d5      	ldr	r5, [r2, r3]
 800d38e:	24e0      	movs	r4, #224	; 0xe0
 800d390:	0224      	lsls	r4, r4, #8
 800d392:	432c      	orrs	r4, r5
 800d394:	50d4      	str	r4, [r2, r3]
 800d396:	e5b7      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d398:	4a48      	ldr	r2, [pc, #288]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d39a:	23a8      	movs	r3, #168	; 0xa8
 800d39c:	58d4      	ldr	r4, [r2, r3]
 800d39e:	4d49      	ldr	r5, [pc, #292]	; (800d4c4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d3a0:	402c      	ands	r4, r5
 800d3a2:	50d4      	str	r4, [r2, r3]
 800d3a4:	58d5      	ldr	r5, [r2, r3]
 800d3a6:	24e0      	movs	r4, #224	; 0xe0
 800d3a8:	0524      	lsls	r4, r4, #20
 800d3aa:	432c      	orrs	r4, r5
 800d3ac:	50d4      	str	r4, [r2, r3]
 800d3ae:	e5ab      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d3b0:	4a40      	ldr	r2, [pc, #256]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d3b2:	23a8      	movs	r3, #168	; 0xa8
 800d3b4:	58d4      	ldr	r4, [r2, r3]
 800d3b6:	250f      	movs	r5, #15
 800d3b8:	43ac      	bics	r4, r5
 800d3ba:	50d4      	str	r4, [r2, r3]
 800d3bc:	58d4      	ldr	r4, [r2, r3]
 800d3be:	3d01      	subs	r5, #1
 800d3c0:	432c      	orrs	r4, r5
 800d3c2:	50d4      	str	r4, [r2, r3]
 800d3c4:	e5a0      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d3c6:	4a3b      	ldr	r2, [pc, #236]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d3c8:	23a8      	movs	r3, #168	; 0xa8
 800d3ca:	58d4      	ldr	r4, [r2, r3]
 800d3cc:	4d3c      	ldr	r5, [pc, #240]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d3ce:	402c      	ands	r4, r5
 800d3d0:	50d4      	str	r4, [r2, r3]
 800d3d2:	58d5      	ldr	r5, [r2, r3]
 800d3d4:	24e0      	movs	r4, #224	; 0xe0
 800d3d6:	0224      	lsls	r4, r4, #8
 800d3d8:	432c      	orrs	r4, r5
 800d3da:	50d4      	str	r4, [r2, r3]
 800d3dc:	e594      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d3de:	4a3c      	ldr	r2, [pc, #240]	; (800d4d0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d000      	beq.n	800d3e6 <RemapAndLinkDMAtoUARTTx+0x56e>
 800d3e4:	e590      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
 800d3e6:	680b      	ldr	r3, [r1, #0]
 800d3e8:	4a2c      	ldr	r2, [pc, #176]	; (800d49c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d01b      	beq.n	800d426 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d3ee:	4a2c      	ldr	r2, [pc, #176]	; (800d4a0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d022      	beq.n	800d43a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d3f4:	4a2b      	ldr	r2, [pc, #172]	; (800d4a4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d02b      	beq.n	800d452 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d3fa:	4a2b      	ldr	r2, [pc, #172]	; (800d4a8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d034      	beq.n	800d46a <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d400:	4a2a      	ldr	r2, [pc, #168]	; (800d4ac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d03b      	beq.n	800d47e <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d406:	4a2a      	ldr	r2, [pc, #168]	; (800d4b0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d000      	beq.n	800d40e <RemapAndLinkDMAtoUARTTx+0x596>
 800d40c:	e57c      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d40e:	4a29      	ldr	r2, [pc, #164]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d410:	23a8      	movs	r3, #168	; 0xa8
 800d412:	58d4      	ldr	r4, [r2, r3]
 800d414:	4d28      	ldr	r5, [pc, #160]	; (800d4b8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d416:	402c      	ands	r4, r5
 800d418:	50d4      	str	r4, [r2, r3]
 800d41a:	58d5      	ldr	r5, [r2, r3]
 800d41c:	24f0      	movs	r4, #240	; 0xf0
 800d41e:	0324      	lsls	r4, r4, #12
 800d420:	432c      	orrs	r4, r5
 800d422:	50d4      	str	r4, [r2, r3]
 800d424:	e570      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d426:	4a25      	ldr	r2, [pc, #148]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d428:	23a8      	movs	r3, #168	; 0xa8
 800d42a:	58d5      	ldr	r5, [r2, r3]
 800d42c:	26f0      	movs	r6, #240	; 0xf0
 800d42e:	43b5      	bics	r5, r6
 800d430:	50d5      	str	r5, [r2, r3]
 800d432:	58d4      	ldr	r4, [r2, r3]
 800d434:	4334      	orrs	r4, r6
 800d436:	50d4      	str	r4, [r2, r3]
 800d438:	e566      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d43a:	4a20      	ldr	r2, [pc, #128]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d43c:	23a8      	movs	r3, #168	; 0xa8
 800d43e:	58d4      	ldr	r4, [r2, r3]
 800d440:	4d1f      	ldr	r5, [pc, #124]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d442:	402c      	ands	r4, r5
 800d444:	50d4      	str	r4, [r2, r3]
 800d446:	58d5      	ldr	r5, [r2, r3]
 800d448:	24f0      	movs	r4, #240	; 0xf0
 800d44a:	0224      	lsls	r4, r4, #8
 800d44c:	432c      	orrs	r4, r5
 800d44e:	50d4      	str	r4, [r2, r3]
 800d450:	e55a      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d452:	4a1a      	ldr	r2, [pc, #104]	; (800d4bc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d454:	23a8      	movs	r3, #168	; 0xa8
 800d456:	58d4      	ldr	r4, [r2, r3]
 800d458:	4d1a      	ldr	r5, [pc, #104]	; (800d4c4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d45a:	402c      	ands	r4, r5
 800d45c:	50d4      	str	r4, [r2, r3]
 800d45e:	58d5      	ldr	r5, [r2, r3]
 800d460:	24f0      	movs	r4, #240	; 0xf0
 800d462:	0524      	lsls	r4, r4, #20
 800d464:	432c      	orrs	r4, r5
 800d466:	50d4      	str	r4, [r2, r3]
 800d468:	e54e      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d46a:	4a12      	ldr	r2, [pc, #72]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d46c:	23a8      	movs	r3, #168	; 0xa8
 800d46e:	58d5      	ldr	r5, [r2, r3]
 800d470:	260f      	movs	r6, #15
 800d472:	43b5      	bics	r5, r6
 800d474:	50d5      	str	r5, [r2, r3]
 800d476:	58d4      	ldr	r4, [r2, r3]
 800d478:	4334      	orrs	r4, r6
 800d47a:	50d4      	str	r4, [r2, r3]
 800d47c:	e544      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d47e:	4a0d      	ldr	r2, [pc, #52]	; (800d4b4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d480:	23a8      	movs	r3, #168	; 0xa8
 800d482:	58d4      	ldr	r4, [r2, r3]
 800d484:	4d0e      	ldr	r5, [pc, #56]	; (800d4c0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d486:	402c      	ands	r4, r5
 800d488:	50d4      	str	r4, [r2, r3]
 800d48a:	58d5      	ldr	r5, [r2, r3]
 800d48c:	24f0      	movs	r4, #240	; 0xf0
 800d48e:	0224      	lsls	r4, r4, #8
 800d490:	432c      	orrs	r4, r5
 800d492:	50d4      	str	r4, [r2, r3]
 800d494:	e538      	b.n	800cf08 <RemapAndLinkDMAtoUARTTx+0x90>
 800d496:	46c0      	nop			; (mov r8, r8)
 800d498:	40005000 	.word	0x40005000
 800d49c:	4002001c 	.word	0x4002001c
 800d4a0:	40020044 	.word	0x40020044
 800d4a4:	40020080 	.word	0x40020080
 800d4a8:	40020408 	.word	0x40020408
 800d4ac:	40020444 	.word	0x40020444
 800d4b0:	40020458 	.word	0x40020458
 800d4b4:	40020400 	.word	0x40020400
 800d4b8:	fff0ffff 	.word	0xfff0ffff
 800d4bc:	40020000 	.word	0x40020000
 800d4c0:	ffff0fff 	.word	0xffff0fff
 800d4c4:	f0ffffff 	.word	0xf0ffffff
 800d4c8:	40011400 	.word	0x40011400
 800d4cc:	40011800 	.word	0x40011800
 800d4d0:	40011c00 	.word	0x40011c00

0800d4d4 <DMA_MSG_TX_Setup>:
{	
 800d4d4:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	; (800d50c <DMA_MSG_TX_Setup+0x38>)
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d012      	beq.n	800d504 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d4de:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <DMA_MSG_TX_Setup+0x38>)
 800d4e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d010      	beq.n	800d508 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d4e6:	4a09      	ldr	r2, [pc, #36]	; (800d50c <DMA_MSG_TX_Setup+0x38>)
 800d4e8:	2394      	movs	r3, #148	; 0x94
 800d4ea:	58d3      	ldr	r3, [r2, r3]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d007      	beq.n	800d500 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d4f0:	0021      	movs	r1, r4
 800d4f2:	f7ff fcc1 	bl	800ce78 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	0020      	movs	r0, r4
 800d4fa:	f7ff f85b 	bl	800c5b4 <SetupDMAInterrupts>
}
 800d4fe:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d500:	4c03      	ldr	r4, [pc, #12]	; (800d510 <DMA_MSG_TX_Setup+0x3c>)
 800d502:	e7f5      	b.n	800d4f0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d504:	4c01      	ldr	r4, [pc, #4]	; (800d50c <DMA_MSG_TX_Setup+0x38>)
 800d506:	e7f3      	b.n	800d4f0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d508:	4c02      	ldr	r4, [pc, #8]	; (800d514 <DMA_MSG_TX_Setup+0x40>)
 800d50a:	e7f1      	b.n	800d4f0 <DMA_MSG_TX_Setup+0x1c>
 800d50c:	20001080 	.word	0x20001080
 800d510:	200010f0 	.word	0x200010f0
 800d514:	200010b8 	.word	0x200010b8

0800d518 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d518:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d51a:	4807      	ldr	r0, [pc, #28]	; (800d538 <CRC_Init+0x20>)
 800d51c:	4b07      	ldr	r3, [pc, #28]	; (800d53c <CRC_Init+0x24>)
 800d51e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d520:	2310      	movs	r3, #16
 800d522:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d524:	2300      	movs	r3, #0
 800d526:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d528:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d52a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d52c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d52e:	3303      	adds	r3, #3
 800d530:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d532:	f003 fbf9 	bl	8010d28 <HAL_CRC_Init>
}
 800d536:	bd10      	pop	{r4, pc}
 800d538:	20006528 	.word	0x20006528
 800d53c:	40023000 	.word	0x40023000

0800d540 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d540:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d542:	4a05      	ldr	r2, [pc, #20]	; (800d558 <HAL_CRC_MspInit+0x18>)
 800d544:	6951      	ldr	r1, [r2, #20]
 800d546:	2340      	movs	r3, #64	; 0x40
 800d548:	4319      	orrs	r1, r3
 800d54a:	6151      	str	r1, [r2, #20]
 800d54c:	6952      	ldr	r2, [r2, #20]
 800d54e:	4013      	ands	r3, r2
 800d550:	9301      	str	r3, [sp, #4]
 800d552:	9b01      	ldr	r3, [sp, #4]
}
 800d554:	b002      	add	sp, #8
 800d556:	4770      	bx	lr
 800d558:	40021000 	.word	0x40021000

0800d55c <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d55c:	b570      	push	{r4, r5, r6, lr}
 800d55e:	0004      	movs	r4, r0
 800d560:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d562:	2800      	cmp	r0, #0
 800d564:	d015      	beq.n	800d592 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d566:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d568:	2900      	cmp	r1, #0
 800d56a:	d100      	bne.n	800d56e <CalculateCRC8+0x12>
}
 800d56c:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d56e:	088e      	lsrs	r6, r1, #2
 800d570:	0032      	movs	r2, r6
 800d572:	0021      	movs	r1, r4
 800d574:	4808      	ldr	r0, [pc, #32]	; (800d598 <CalculateCRC8+0x3c>)
 800d576:	f003 fc34 	bl	8010de2 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d57a:	07ab      	lsls	r3, r5, #30
 800d57c:	d101      	bne.n	800d582 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d57e:	b2c0      	uxtb	r0, r0
 800d580:	e7f4      	b.n	800d56c <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d582:	0131      	lsls	r1, r6, #4
 800d584:	1861      	adds	r1, r4, r1
 800d586:	2201      	movs	r2, #1
 800d588:	4803      	ldr	r0, [pc, #12]	; (800d598 <CalculateCRC8+0x3c>)
 800d58a:	f003 fbfe 	bl	8010d8a <HAL_CRC_Accumulate>
 800d58e:	b2c0      	uxtb	r0, r0
 800d590:	e7ec      	b.n	800d56c <CalculateCRC8+0x10>
	return 0;
 800d592:	2000      	movs	r0, #0
 800d594:	e7ea      	b.n	800d56c <CalculateCRC8+0x10>
 800d596:	46c0      	nop			; (mov r8, r8)
 800d598:	20006528 	.word	0x20006528

0800d59c <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800d59c:	b500      	push	{lr}
 800d59e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d5a0:	2380      	movs	r3, #128	; 0x80
 800d5a2:	011b      	lsls	r3, r3, #4
 800d5a4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d5ae:	3303      	adds	r3, #3
 800d5b0:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d5b2:	2090      	movs	r0, #144	; 0x90
 800d5b4:	a901      	add	r1, sp, #4
 800d5b6:	05c0      	lsls	r0, r0, #23
 800d5b8:	f004 fab6 	bl	8011b28 <HAL_GPIO_Init>
}
 800d5bc:	b007      	add	sp, #28
 800d5be:	bd00      	pop	{pc}

0800d5c0 <GPIO_Init>:
{
 800d5c0:	b500      	push	{lr}
 800d5c2:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d5c4:	4b18      	ldr	r3, [pc, #96]	; (800d628 <GPIO_Init+0x68>)
 800d5c6:	6959      	ldr	r1, [r3, #20]
 800d5c8:	2080      	movs	r0, #128	; 0x80
 800d5ca:	0300      	lsls	r0, r0, #12
 800d5cc:	4301      	orrs	r1, r0
 800d5ce:	6159      	str	r1, [r3, #20]
 800d5d0:	695a      	ldr	r2, [r3, #20]
 800d5d2:	4002      	ands	r2, r0
 800d5d4:	9201      	str	r2, [sp, #4]
 800d5d6:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d5d8:	6959      	ldr	r1, [r3, #20]
 800d5da:	2080      	movs	r0, #128	; 0x80
 800d5dc:	0280      	lsls	r0, r0, #10
 800d5de:	4301      	orrs	r1, r0
 800d5e0:	6159      	str	r1, [r3, #20]
 800d5e2:	695a      	ldr	r2, [r3, #20]
 800d5e4:	4002      	ands	r2, r0
 800d5e6:	9202      	str	r2, [sp, #8]
 800d5e8:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d5ea:	6959      	ldr	r1, [r3, #20]
 800d5ec:	2080      	movs	r0, #128	; 0x80
 800d5ee:	0340      	lsls	r0, r0, #13
 800d5f0:	4301      	orrs	r1, r0
 800d5f2:	6159      	str	r1, [r3, #20]
 800d5f4:	695a      	ldr	r2, [r3, #20]
 800d5f6:	4002      	ands	r2, r0
 800d5f8:	9203      	str	r2, [sp, #12]
 800d5fa:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d5fc:	6959      	ldr	r1, [r3, #20]
 800d5fe:	2080      	movs	r0, #128	; 0x80
 800d600:	02c0      	lsls	r0, r0, #11
 800d602:	4301      	orrs	r1, r0
 800d604:	6159      	str	r1, [r3, #20]
 800d606:	695a      	ldr	r2, [r3, #20]
 800d608:	4002      	ands	r2, r0
 800d60a:	9204      	str	r2, [sp, #16]
 800d60c:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d60e:	695a      	ldr	r2, [r3, #20]
 800d610:	2180      	movs	r1, #128	; 0x80
 800d612:	03c9      	lsls	r1, r1, #15
 800d614:	430a      	orrs	r2, r1
 800d616:	615a      	str	r2, [r3, #20]
 800d618:	695b      	ldr	r3, [r3, #20]
 800d61a:	400b      	ands	r3, r1
 800d61c:	9305      	str	r3, [sp, #20]
 800d61e:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d620:	f7ff ffbc 	bl	800d59c <IND_LED_Init>
}
 800d624:	b007      	add	sp, #28
 800d626:	bd00      	pop	{pc}
 800d628:	40021000 	.word	0x40021000

0800d62c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d62c:	b570      	push	{r4, r5, r6, lr}
 800d62e:	000e      	movs	r6, r1
 800d630:	0015      	movs	r5, r2
 800d632:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d634:	f000 fd30 	bl	800e098 <GetUart>
	
	if (huart == &huart1) 
 800d638:	4b25      	ldr	r3, [pc, #148]	; (800d6d0 <GetPortGPIOs+0xa4>)
 800d63a:	4298      	cmp	r0, r3
 800d63c:	d017      	beq.n	800d66e <GetPortGPIOs+0x42>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d63e:	4b25      	ldr	r3, [pc, #148]	; (800d6d4 <GetPortGPIOs+0xa8>)
 800d640:	4298      	cmp	r0, r3
 800d642:	d022      	beq.n	800d68a <GetPortGPIOs+0x5e>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d644:	4b24      	ldr	r3, [pc, #144]	; (800d6d8 <GetPortGPIOs+0xac>)
 800d646:	4298      	cmp	r0, r3
 800d648:	d02a      	beq.n	800d6a0 <GetPortGPIOs+0x74>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800d64a:	4b24      	ldr	r3, [pc, #144]	; (800d6dc <GetPortGPIOs+0xb0>)
 800d64c:	4298      	cmp	r0, r3
 800d64e:	d033      	beq.n	800d6b8 <GetPortGPIOs+0x8c>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d650:	4a23      	ldr	r2, [pc, #140]	; (800d6e0 <GetPortGPIOs+0xb4>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d652:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800d654:	4290      	cmp	r0, r2
 800d656:	d116      	bne.n	800d686 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d658:	2390      	movs	r3, #144	; 0x90
 800d65a:	05db      	lsls	r3, r3, #23
 800d65c:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d65e:	2210      	movs	r2, #16
 800d660:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d662:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800d664:	2320      	movs	r3, #32
 800d666:	9a04      	ldr	r2, [sp, #16]
 800d668:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	e00b      	b.n	800d686 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d66e:	2390      	movs	r3, #144	; 0x90
 800d670:	05db      	lsls	r3, r3, #23
 800d672:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d674:	2280      	movs	r2, #128	; 0x80
 800d676:	0092      	lsls	r2, r2, #2
 800d678:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d67a:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800d67c:	2380      	movs	r3, #128	; 0x80
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	9a04      	ldr	r2, [sp, #16]
 800d682:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d684:	2300      	movs	r3, #0
	
	return result;	
}
 800d686:	0018      	movs	r0, r3
 800d688:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d68a:	2390      	movs	r3, #144	; 0x90
 800d68c:	05db      	lsls	r3, r3, #23
 800d68e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d690:	2204      	movs	r2, #4
 800d692:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d694:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800d696:	2308      	movs	r3, #8
 800d698:	9a04      	ldr	r2, [sp, #16]
 800d69a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d69c:	2300      	movs	r3, #0
 800d69e:	e7f2      	b.n	800d686 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d6a0:	4b10      	ldr	r3, [pc, #64]	; (800d6e4 <GetPortGPIOs+0xb8>)
 800d6a2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d6a4:	2280      	movs	r2, #128	; 0x80
 800d6a6:	00d2      	lsls	r2, r2, #3
 800d6a8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d6aa:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800d6ac:	2380      	movs	r3, #128	; 0x80
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	9a04      	ldr	r2, [sp, #16]
 800d6b2:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	e7e6      	b.n	800d686 <GetPortGPIOs+0x5a>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800d6b8:	2390      	movs	r3, #144	; 0x90
 800d6ba:	05db      	lsls	r3, r3, #23
 800d6bc:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800d6be:	2201      	movs	r2, #1
 800d6c0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800d6c2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	9a04      	ldr	r2, [sp, #16]
 800d6c8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e7db      	b.n	800d686 <GetPortGPIOs+0x5a>
 800d6ce:	46c0      	nop			; (mov r8, r8)
 800d6d0:	20006304 	.word	0x20006304
 800d6d4:	20006474 	.word	0x20006474
 800d6d8:	20006254 	.word	0x20006254
 800d6dc:	20006400 	.word	0x20006400
 800d6e0:	20006388 	.word	0x20006388
 800d6e4:	48000400 	.word	0x48000400

0800d6e8 <IsFactoryReset>:
{
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800d6ec:	4b39      	ldr	r3, [pc, #228]	; (800d7d4 <IsFactoryReset+0xec>)
 800d6ee:	6959      	ldr	r1, [r3, #20]
 800d6f0:	2080      	movs	r0, #128	; 0x80
 800d6f2:	0280      	lsls	r0, r0, #10
 800d6f4:	4301      	orrs	r1, r0
 800d6f6:	6159      	str	r1, [r3, #20]
 800d6f8:	695a      	ldr	r2, [r3, #20]
 800d6fa:	4002      	ands	r2, r0
 800d6fc:	9203      	str	r2, [sp, #12]
 800d6fe:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d700:	6959      	ldr	r1, [r3, #20]
 800d702:	2080      	movs	r0, #128	; 0x80
 800d704:	02c0      	lsls	r0, r0, #11
 800d706:	4301      	orrs	r1, r0
 800d708:	6159      	str	r1, [r3, #20]
 800d70a:	695a      	ldr	r2, [r3, #20]
 800d70c:	4002      	ands	r2, r0
 800d70e:	9204      	str	r2, [sp, #16]
 800d710:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d712:	6959      	ldr	r1, [r3, #20]
 800d714:	2080      	movs	r0, #128	; 0x80
 800d716:	0300      	lsls	r0, r0, #12
 800d718:	4301      	orrs	r1, r0
 800d71a:	6159      	str	r1, [r3, #20]
 800d71c:	695a      	ldr	r2, [r3, #20]
 800d71e:	4002      	ands	r2, r0
 800d720:	9205      	str	r2, [sp, #20]
 800d722:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800d724:	695a      	ldr	r2, [r3, #20]
 800d726:	2180      	movs	r1, #128	; 0x80
 800d728:	0349      	lsls	r1, r1, #13
 800d72a:	430a      	orrs	r2, r1
 800d72c:	615a      	str	r2, [r3, #20]
 800d72e:	695b      	ldr	r3, [r3, #20]
 800d730:	400b      	ands	r3, r1
 800d732:	9306      	str	r3, [sp, #24]
 800d734:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d736:	2522      	movs	r5, #34	; 0x22
 800d738:	446d      	add	r5, sp
 800d73a:	ab08      	add	r3, sp, #32
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	ab0b      	add	r3, sp, #44	; 0x2c
 800d740:	002a      	movs	r2, r5
 800d742:	a90c      	add	r1, sp, #48	; 0x30
 800d744:	2001      	movs	r0, #1
 800d746:	f7ff ff71 	bl	800d62c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d74a:	ac07      	add	r4, sp, #28
 800d74c:	9400      	str	r4, [sp, #0]
 800d74e:	ab09      	add	r3, sp, #36	; 0x24
 800d750:	221e      	movs	r2, #30
 800d752:	446a      	add	r2, sp
 800d754:	a90a      	add	r1, sp, #40	; 0x28
 800d756:	2005      	movs	r0, #5
 800d758:	f7ff ff68 	bl	800d62c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d75c:	2301      	movs	r3, #1
 800d75e:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d760:	2600      	movs	r6, #0
 800d762:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d764:	882b      	ldrh	r3, [r5, #0]
 800d766:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d768:	a90d      	add	r1, sp, #52	; 0x34
 800d76a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d76c:	f004 f9dc 	bl	8011b28 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d770:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d772:	2302      	movs	r3, #2
 800d774:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d776:	8823      	ldrh	r3, [r4, #0]
 800d778:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d77a:	a90d      	add	r1, sp, #52	; 0x34
 800d77c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d77e:	f004 f9d3 	bl	8011b28 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d782:	8829      	ldrh	r1, [r5, #0]
 800d784:	2200      	movs	r2, #0
 800d786:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d788:	f004 fb42 	bl	8011e10 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d78c:	2005      	movs	r0, #5
 800d78e:	f000 faf1 	bl	800dd74 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d792:	8821      	ldrh	r1, [r4, #0]
 800d794:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d796:	f004 fb35 	bl	8011e04 <HAL_GPIO_ReadPin>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d006      	beq.n	800d7ac <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d79e:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <IsFactoryReset+0xf0>)
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	4252      	negs	r2, r2
 800d7a4:	601a      	str	r2, [r3, #0]
	return 0;
 800d7a6:	2000      	movs	r0, #0
}
 800d7a8:	b012      	add	sp, #72	; 0x48
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d7ac:	2322      	movs	r3, #34	; 0x22
 800d7ae:	446b      	add	r3, sp
 800d7b0:	8819      	ldrh	r1, [r3, #0]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d7b6:	f004 fb2b 	bl	8011e10 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d7ba:	2005      	movs	r0, #5
 800d7bc:	f000 fada 	bl	800dd74 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d7c0:	ab07      	add	r3, sp, #28
 800d7c2:	8819      	ldrh	r1, [r3, #0]
 800d7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7c6:	f004 fb1d 	bl	8011e04 <HAL_GPIO_ReadPin>
 800d7ca:	2801      	cmp	r0, #1
 800d7cc:	d1e7      	bne.n	800d79e <IsFactoryReset+0xb6>
			return 1;
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	e7ea      	b.n	800d7a8 <IsFactoryReset+0xc0>
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	40021000 	.word	0x40021000
 800d7d8:	20007ff0 	.word	0x20007ff0

0800d7dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d7dc:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d7de:	f002 fdc3 	bl	8010368 <HAL_IncTick>
  osSystickHandler();  
 800d7e2:	f000 fe17 	bl	800e414 <osSystickHandler>

}
 800d7e6:	bd10      	pop	{r4, pc}

0800d7e8 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d7e8:	e7fe      	b.n	800d7e8 <HardFault_Handler>
	...

0800d7ec <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d7ec:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d7ee:	4802      	ldr	r0, [pc, #8]	; (800d7f8 <USART1_IRQHandler+0xc>)
 800d7f0:	f006 f81b 	bl	801382a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d7f4:	bd10      	pop	{r4, pc}
 800d7f6:	46c0      	nop			; (mov r8, r8)
 800d7f8:	20006304 	.word	0x20006304

0800d7fc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d7fc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d7fe:	4802      	ldr	r0, [pc, #8]	; (800d808 <USART2_IRQHandler+0xc>)
 800d800:	f006 f813 	bl	801382a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d804:	bd10      	pop	{r4, pc}
 800d806:	46c0      	nop			; (mov r8, r8)
 800d808:	20006474 	.word	0x20006474

0800d80c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d80c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d80e:	4805      	ldr	r0, [pc, #20]	; (800d824 <USART3_8_IRQHandler+0x18>)
 800d810:	f006 f80b 	bl	801382a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d814:	4804      	ldr	r0, [pc, #16]	; (800d828 <USART3_8_IRQHandler+0x1c>)
 800d816:	f006 f808 	bl	801382a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d81a:	4804      	ldr	r0, [pc, #16]	; (800d82c <USART3_8_IRQHandler+0x20>)
 800d81c:	f006 f805 	bl	801382a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d820:	bd10      	pop	{r4, pc}
 800d822:	46c0      	nop			; (mov r8, r8)
 800d824:	20006254 	.word	0x20006254
 800d828:	20006400 	.word	0x20006400
 800d82c:	20006388 	.word	0x20006388

0800d830 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d830:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d832:	2001      	movs	r0, #1
 800d834:	f7f9 ff14 	bl	8007660 <DMA_IRQHandler>
	
}
 800d838:	bd10      	pop	{r4, pc}
	...

0800d83c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d83c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d83e:	4b0c      	ldr	r3, [pc, #48]	; (800d870 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	06db      	lsls	r3, r3, #27
 800d844:	d408      	bmi.n	800d858 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d846:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	05db      	lsls	r3, r3, #23
 800d84c:	d408      	bmi.n	800d860 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d84e:	4b09      	ldr	r3, [pc, #36]	; (800d874 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	06db      	lsls	r3, r3, #27
 800d854:	d408      	bmi.n	800d868 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d856:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800d858:	2005      	movs	r0, #5
 800d85a:	f7f9 ff01 	bl	8007660 <DMA_IRQHandler>
 800d85e:	e7fa      	b.n	800d856 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800d860:	2002      	movs	r0, #2
 800d862:	f7f9 fefd 	bl	8007660 <DMA_IRQHandler>
 800d866:	e7f6      	b.n	800d856 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d868:	4803      	ldr	r0, [pc, #12]	; (800d878 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d86a:	f003 fbb9 	bl	8010fe0 <HAL_DMA_IRQHandler>
}
 800d86e:	e7f2      	b.n	800d856 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d870:	40020400 	.word	0x40020400
 800d874:	40020000 	.word	0x40020000
 800d878:	20001080 	.word	0x20001080

0800d87c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d87c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d87e:	4b18      	ldr	r3, [pc, #96]	; (800d8e0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	03db      	lsls	r3, r3, #15
 800d884:	d417      	bmi.n	800d8b6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d886:	4b16      	ldr	r3, [pc, #88]	; (800d8e0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	02db      	lsls	r3, r3, #11
 800d88c:	d417      	bmi.n	800d8be <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d88e:	4b15      	ldr	r3, [pc, #84]	; (800d8e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x68>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	05db      	lsls	r3, r3, #23
 800d894:	d417      	bmi.n	800d8c6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d896:	4b12      	ldr	r3, [pc, #72]	; (800d8e0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	04db      	lsls	r3, r3, #19
 800d89c:	d417      	bmi.n	800d8ce <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x52>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d89e:	4b10      	ldr	r3, [pc, #64]	; (800d8e0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x64>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	01db      	lsls	r3, r3, #7
 800d8a4:	d417      	bmi.n	800d8d6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5a>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
	}

	 else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF5) == SET) {
 800d8a6:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x68>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	03db      	lsls	r3, r3, #15
 800d8ac:	d506      	bpl.n	800d8bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
     	HAL_DMA_IRQHandler(&hdma_adc);
 800d8ae:	480e      	ldr	r0, [pc, #56]	; (800d8e8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x6c>)
 800d8b0:	f003 fb96 	bl	8010fe0 <HAL_DMA_IRQHandler>
	}
}
 800d8b4:	e002      	b.n	800d8bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		DMA_IRQHandler(P3);
 800d8b6:	2003      	movs	r0, #3
 800d8b8:	f7f9 fed2 	bl	8007660 <DMA_IRQHandler>
}
 800d8bc:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d8be:	2004      	movs	r0, #4
 800d8c0:	f7f9 fece 	bl	8007660 <DMA_IRQHandler>
 800d8c4:	e7fa      	b.n	800d8bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		DMA_IRQHandler(P6);
 800d8c6:	2006      	movs	r0, #6
 800d8c8:	f7f9 feca 	bl	8007660 <DMA_IRQHandler>
 800d8cc:	e7f6      	b.n	800d8bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d8ce:	4807      	ldr	r0, [pc, #28]	; (800d8ec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x70>)
 800d8d0:	f003 fb86 	bl	8010fe0 <HAL_DMA_IRQHandler>
 800d8d4:	e7f2      	b.n	800d8bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d8d6:	4806      	ldr	r0, [pc, #24]	; (800d8f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x74>)
 800d8d8:	f003 fb82 	bl	8010fe0 <HAL_DMA_IRQHandler>
 800d8dc:	e7ee      	b.n	800d8bc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x40>
 800d8de:	46c0      	nop			; (mov r8, r8)
 800d8e0:	40020000 	.word	0x40020000
 800d8e4:	40020400 	.word	0x40020400
 800d8e8:	200064f0 	.word	0x200064f0
 800d8ec:	200010b8 	.word	0x200010b8
 800d8f0:	200010f0 	.word	0x200010f0

0800d8f4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d8fe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d904:	f7fe ff02 	bl	800c70c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d908:	0020      	movs	r0, r4
 800d90a:	f7fd ff53 	bl	800b7b4 <GetPort>
 800d90e:	0080      	lsls	r0, r0, #2
 800d910:	4b03      	ldr	r3, [pc, #12]	; (800d920 <HAL_UART_TxCpltCallback+0x2c>)
 800d912:	58c0      	ldr	r0, [r0, r3]
 800d914:	a901      	add	r1, sp, #4
 800d916:	f001 f901 	bl	800eb1c <xQueueGiveFromISR>
}
 800d91a:	b002      	add	sp, #8
 800d91c:	bd10      	pop	{r4, pc}
 800d91e:	46c0      	nop			; (mov r8, r8)
 800d920:	200061ac 	.word	0x200061ac

0800d924 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d924:	b510      	push	{r4, lr}
 800d926:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d928:	2369      	movs	r3, #105	; 0x69
 800d92a:	2201      	movs	r2, #1
 800d92c:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d92e:	f7fd ff41 	bl	800b7b4 <GetPort>
	if (portStatus[port] == STREAM) {
 800d932:	4b0c      	ldr	r3, [pc, #48]	; (800d964 <HAL_UART_ErrorCallback+0x40>)
 800d934:	5c1b      	ldrb	r3, [r3, r0]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d005      	beq.n	800d946 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d93a:	4b0b      	ldr	r3, [pc, #44]	; (800d968 <HAL_UART_ErrorCallback+0x44>)
 800d93c:	1818      	adds	r0, r3, r0
 800d93e:	3801      	subs	r0, #1
 800d940:	2301      	movs	r3, #1
 800d942:	7003      	strb	r3, [r0, #0]
	}	
}
 800d944:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685a      	ldr	r2, [r3, #4]
 800d94c:	b292      	uxth	r2, r2
 800d94e:	3801      	subs	r0, #1
 800d950:	0080      	lsls	r0, r0, #2
 800d952:	4b06      	ldr	r3, [pc, #24]	; (800d96c <HAL_UART_ErrorCallback+0x48>)
 800d954:	58c3      	ldr	r3, [r0, r3]
 800d956:	6819      	ldr	r1, [r3, #0]
 800d958:	3128      	adds	r1, #40	; 0x28
 800d95a:	0020      	movs	r0, r4
 800d95c:	f005 fb4e 	bl	8012ffc <HAL_UART_Receive_DMA>
 800d960:	e7f0      	b.n	800d944 <HAL_UART_ErrorCallback+0x20>
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	200008e0 	.word	0x200008e0
 800d968:	20000ab0 	.word	0x20000ab0
 800d96c:	20000c4c 	.word	0x20000c4c

0800d970 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d970:	b510      	push	{r4, lr}
 800d972:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d974:	f7fd ff1e 	bl	800b7b4 <GetPort>
 800d978:	4b13      	ldr	r3, [pc, #76]	; (800d9c8 <HAL_UART_RxCpltCallback+0x58>)
 800d97a:	5c1b      	ldrb	r3, [r3, r0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d006      	beq.n	800d98e <HAL_UART_RxCpltCallback+0x1e>
 800d980:	0020      	movs	r0, r4
 800d982:	f7fd ff17 	bl	800b7b4 <GetPort>
 800d986:	4b10      	ldr	r3, [pc, #64]	; (800d9c8 <HAL_UART_RxCpltCallback+0x58>)
 800d988:	5c1b      	ldrb	r3, [r3, r0]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d11a      	bne.n	800d9c4 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d98e:	0020      	movs	r0, r4
 800d990:	f7fd ff10 	bl	800b7b4 <GetPort>
 800d994:	4b0d      	ldr	r3, [pc, #52]	; (800d9cc <HAL_UART_RxCpltCallback+0x5c>)
 800d996:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d998:	0020      	movs	r0, r4
 800d99a:	f7fd ff0b 	bl	800b7b4 <GetPort>
 800d99e:	4b0a      	ldr	r3, [pc, #40]	; (800d9c8 <HAL_UART_RxCpltCallback+0x58>)
 800d9a0:	2205      	movs	r2, #5
 800d9a2:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d9a4:	0020      	movs	r0, r4
 800d9a6:	f7fd ff05 	bl	800b7b4 <GetPort>
 800d9aa:	4b09      	ldr	r3, [pc, #36]	; (800d9d0 <HAL_UART_RxCpltCallback+0x60>)
 800d9ac:	1818      	adds	r0, r3, r0
 800d9ae:	3801      	subs	r0, #1
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d9b4:	0020      	movs	r0, r4
 800d9b6:	f7fd fefd 	bl	800b7b4 <GetPort>
 800d9ba:	4b06      	ldr	r3, [pc, #24]	; (800d9d4 <HAL_UART_RxCpltCallback+0x64>)
 800d9bc:	1818      	adds	r0, r3, r0
 800d9be:	3801      	subs	r0, #1
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	7003      	strb	r3, [r0, #0]
	}
}
 800d9c4:	bd10      	pop	{r4, pc}
 800d9c6:	46c0      	nop			; (mov r8, r8)
 800d9c8:	200008e0 	.word	0x200008e0
 800d9cc:	2000612c 	.word	0x2000612c
 800d9d0:	20000bf8 	.word	0x20000bf8
 800d9d4:	20000ab0 	.word	0x20000ab0

0800d9d8 <ADC1_COMP_IRQHandler>:
/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */

void ADC1_COMP_IRQHandler(void)
{
 800d9d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800d9da:	4802      	ldr	r0, [pc, #8]	; (800d9e4 <ADC1_COMP_IRQHandler+0xc>)
 800d9dc:	f002 ff7a 	bl	80108d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800d9e0:	bd10      	pop	{r4, pc}
 800d9e2:	46c0      	nop			; (mov r8, r8)
 800d9e4:	200061e4 	.word	0x200061e4

0800d9e8 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d9e8:	b672      	cpsid	i
 800d9ea:	e7fe      	b.n	800d9ea <vApplicationStackOverflowHook+0x2>

0800d9ec <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d9ec:	b672      	cpsid	i
 800d9ee:	e7fe      	b.n	800d9ee <vApplicationMallocFailedHook+0x2>

0800d9f0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9f2:	46ce      	mov	lr, r9
 800d9f4:	b500      	push	{lr}
 800d9f6:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d9f8:	ac05      	add	r4, sp, #20
 800d9fa:	4b34      	ldr	r3, [pc, #208]	; (800dacc <RTC_CalendarConfig+0xdc>)
 800d9fc:	0022      	movs	r2, r4
 800d9fe:	cb43      	ldmia	r3!, {r0, r1, r6}
 800da00:	c243      	stmia	r2!, {r0, r1, r6}
 800da02:	aa02      	add	r2, sp, #8
 800da04:	4b32      	ldr	r3, [pc, #200]	; (800dad0 <RTC_CalendarConfig+0xe0>)
 800da06:	cb03      	ldmia	r3!, {r0, r1}
 800da08:	c203      	stmia	r2!, {r0, r1}
 800da0a:	781b      	ldrb	r3, [r3, #0]
 800da0c:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800da0e:	2015      	movs	r0, #21
 800da10:	ab02      	add	r3, sp, #8
 800da12:	469c      	mov	ip, r3
 800da14:	4460      	add	r0, ip
 800da16:	f005 ff90 	bl	801393a <atoi>
 800da1a:	b2c3      	uxtb	r3, r0
 800da1c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800da1e:	2600      	movs	r6, #0
 800da20:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800da22:	a806      	add	r0, sp, #24
 800da24:	f005 ff89 	bl	801393a <atoi>
 800da28:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800da2a:	70e6      	strb	r6, [r4, #3]
 800da2c:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800da2e:	4e29      	ldr	r6, [pc, #164]	; (800dad4 <RTC_CalendarConfig+0xe4>)
 800da30:	e002      	b.n	800da38 <RTC_CalendarConfig+0x48>
 800da32:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800da34:	2c0d      	cmp	r4, #13
 800da36:	d009      	beq.n	800da4c <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800da38:	00a3      	lsls	r3, r4, #2
 800da3a:	3b04      	subs	r3, #4
 800da3c:	58f1      	ldr	r1, [r6, r3]
 800da3e:	a805      	add	r0, sp, #20
 800da40:	f7f2 fb60 	bl	8000104 <strcmp>
 800da44:	2800      	cmp	r0, #0
 800da46:	d1f4      	bne.n	800da32 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800da48:	b2e5      	uxtb	r5, r4
 800da4a:	e7f2      	b.n	800da32 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800da4c:	ab02      	add	r3, sp, #8
 800da4e:	1d98      	adds	r0, r3, #6
 800da50:	f005 ff73 	bl	801393a <atoi>
 800da54:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800da56:	ac05      	add	r4, sp, #20
 800da58:	2600      	movs	r6, #0
 800da5a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800da5c:	ab02      	add	r3, sp, #8
 800da5e:	1cd8      	adds	r0, r3, #3
 800da60:	f005 ff6b 	bl	801393a <atoi>
 800da64:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800da66:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800da68:	a802      	add	r0, sp, #8
 800da6a:	f005 ff66 	bl	801393a <atoi>
 800da6e:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800da70:	a90d      	add	r1, sp, #52	; 0x34
 800da72:	464b      	mov	r3, r9
 800da74:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800da76:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800da78:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800da7a:	2301      	movs	r3, #1
 800da7c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800da7e:	2200      	movs	r2, #0
 800da80:	4815      	ldr	r0, [pc, #84]	; (800dad8 <RTC_CalendarConfig+0xe8>)
 800da82:	f005 f807 	bl	8012a94 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800da86:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800da88:	2800      	cmp	r0, #0
 800da8a:	d119      	bne.n	800dac0 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800da8c:	a908      	add	r1, sp, #32
 800da8e:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800da94:	9b00      	ldr	r3, [sp, #0]
 800da96:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800da98:	2300      	movs	r3, #0
 800da9a:	720b      	strb	r3, [r1, #8]
 800da9c:	4a0f      	ldr	r2, [pc, #60]	; (800dadc <RTC_CalendarConfig+0xec>)
 800da9e:	3018      	adds	r0, #24
 800daa0:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800daa2:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800daa4:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800daa6:	2200      	movs	r2, #0
 800daa8:	480b      	ldr	r0, [pc, #44]	; (800dad8 <RTC_CalendarConfig+0xe8>)
 800daaa:	f004 ff6d 	bl	8012988 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800daae:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d105      	bne.n	800dac0 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dab4:	4a0a      	ldr	r2, [pc, #40]	; (800dae0 <RTC_CalendarConfig+0xf0>)
 800dab6:	2101      	movs	r1, #1
 800dab8:	4807      	ldr	r0, [pc, #28]	; (800dad8 <RTC_CalendarConfig+0xe8>)
 800daba:	f005 f8af 	bl	8012c1c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	0018      	movs	r0, r3
 800dac2:	b00e      	add	sp, #56	; 0x38
 800dac4:	bc04      	pop	{r2}
 800dac6:	4691      	mov	r9, r2
 800dac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daca:	46c0      	nop			; (mov r8, r8)
 800dacc:	08017978 	.word	0x08017978
 800dad0:	0801a824 	.word	0x0801a824
 800dad4:	20000020 	.word	0x20000020
 800dad8:	2000654c 	.word	0x2000654c
 800dadc:	2000612c 	.word	0x2000612c
 800dae0:	000032f2 	.word	0x000032f2

0800dae4 <RTC_Init>:
{
 800dae4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800dae6:	4a1c      	ldr	r2, [pc, #112]	; (800db58 <RTC_Init+0x74>)
 800dae8:	6a11      	ldr	r1, [r2, #32]
 800daea:	2380      	movs	r3, #128	; 0x80
 800daec:	021b      	lsls	r3, r3, #8
 800daee:	430b      	orrs	r3, r1
 800daf0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800daf2:	481a      	ldr	r0, [pc, #104]	; (800db5c <RTC_Init+0x78>)
 800daf4:	4b1a      	ldr	r3, [pc, #104]	; (800db60 <RTC_Init+0x7c>)
 800daf6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800daf8:	2300      	movs	r3, #0
 800dafa:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800dafc:	227c      	movs	r2, #124	; 0x7c
 800dafe:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800db00:	4a18      	ldr	r2, [pc, #96]	; (800db64 <RTC_Init+0x80>)
 800db02:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800db04:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800db06:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800db08:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800db0a:	f004 fedf 	bl	80128cc <HAL_RTC_Init>
 800db0e:	23ff      	movs	r3, #255	; 0xff
 800db10:	2800      	cmp	r0, #0
 800db12:	d11e      	bne.n	800db52 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800db14:	2101      	movs	r1, #1
 800db16:	4811      	ldr	r0, [pc, #68]	; (800db5c <RTC_Init+0x78>)
 800db18:	f005 f886 	bl	8012c28 <HAL_RTCEx_BKUPRead>
 800db1c:	4b12      	ldr	r3, [pc, #72]	; (800db68 <RTC_Init+0x84>)
 800db1e:	4298      	cmp	r0, r3
 800db20:	d10e      	bne.n	800db40 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800db22:	4b0d      	ldr	r3, [pc, #52]	; (800db58 <RTC_Init+0x74>)
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	011b      	lsls	r3, r3, #4
 800db28:	d502      	bpl.n	800db30 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800db2a:	4b10      	ldr	r3, [pc, #64]	; (800db6c <RTC_Init+0x88>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800db30:	4b09      	ldr	r3, [pc, #36]	; (800db58 <RTC_Init+0x74>)
 800db32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db34:	015b      	lsls	r3, r3, #5
 800db36:	d505      	bpl.n	800db44 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800db38:	4b0c      	ldr	r3, [pc, #48]	; (800db6c <RTC_Init+0x88>)
 800db3a:	2201      	movs	r2, #1
 800db3c:	701a      	strb	r2, [r3, #0]
 800db3e:	e001      	b.n	800db44 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800db40:	f7ff ff56 	bl	800d9f0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800db44:	4a04      	ldr	r2, [pc, #16]	; (800db58 <RTC_Init+0x74>)
 800db46:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800db48:	2380      	movs	r3, #128	; 0x80
 800db4a:	045b      	lsls	r3, r3, #17
 800db4c:	430b      	orrs	r3, r1
 800db4e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	0018      	movs	r0, r3
 800db54:	bd10      	pop	{r4, pc}
 800db56:	46c0      	nop			; (mov r8, r8)
 800db58:	40021000 	.word	0x40021000
 800db5c:	2000654c 	.word	0x2000654c
 800db60:	40002800 	.word	0x40002800
 800db64:	000007cf 	.word	0x000007cf
 800db68:	000032f2 	.word	0x000032f2
 800db6c:	20001278 	.word	0x20001278

0800db70 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800db70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db72:	46c6      	mov	lr, r8
 800db74:	b500      	push	{lr}
 800db76:	b086      	sub	sp, #24
 800db78:	ac0c      	add	r4, sp, #48	; 0x30
 800db7a:	7827      	ldrb	r7, [r4, #0]
 800db7c:	ac0d      	add	r4, sp, #52	; 0x34
 800db7e:	7824      	ldrb	r4, [r4, #0]
 800db80:	46a0      	mov	r8, r4
 800db82:	ac0e      	add	r4, sp, #56	; 0x38
 800db84:	7825      	ldrb	r5, [r4, #0]
 800db86:	ac0f      	add	r4, sp, #60	; 0x3c
 800db88:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800db8a:	ac05      	add	r4, sp, #20
 800db8c:	3230      	adds	r2, #48	; 0x30
 800db8e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800db90:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800db92:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800db94:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800db96:	2200      	movs	r2, #0
 800db98:	0021      	movs	r1, r4
 800db9a:	481f      	ldr	r0, [pc, #124]	; (800dc18 <BOS_CalendarConfig+0xa8>)
 800db9c:	f004 ff7a 	bl	8012a94 <HAL_RTC_SetDate>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d136      	bne.n	800dc12 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800dba4:	466b      	mov	r3, sp
 800dba6:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800dba8:	4642      	mov	r2, r8
 800dbaa:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800dbac:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800dbae:	2300      	movs	r3, #0
 800dbb0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800dbb2:	2e01      	cmp	r6, #1
 800dbb4:	d020      	beq.n	800dbf8 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800dbb6:	2e02      	cmp	r6, #2
 800dbb8:	d024      	beq.n	800dc04 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800dbba:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <BOS_CalendarConfig+0xac>)
 800dbbc:	2218      	movs	r2, #24
 800dbbe:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4669      	mov	r1, sp
 800dbc4:	4814      	ldr	r0, [pc, #80]	; (800dc18 <BOS_CalendarConfig+0xa8>)
 800dbc6:	f004 fedf 	bl	8012988 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800dbca:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	d10e      	bne.n	800dbee <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800dbd0:	4a12      	ldr	r2, [pc, #72]	; (800dc1c <BOS_CalendarConfig+0xac>)
 800dbd2:	7b53      	ldrb	r3, [r2, #13]
 800dbd4:	021b      	lsls	r3, r3, #8
 800dbd6:	7911      	ldrb	r1, [r2, #4]
 800dbd8:	4319      	orrs	r1, r3
 800dbda:	308d      	adds	r0, #141	; 0x8d
 800dbdc:	0040      	lsls	r0, r0, #1
 800dbde:	f7f9 fe23 	bl	8007828 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dbe2:	4a0f      	ldr	r2, [pc, #60]	; (800dc20 <BOS_CalendarConfig+0xb0>)
 800dbe4:	2101      	movs	r1, #1
 800dbe6:	480c      	ldr	r0, [pc, #48]	; (800dc18 <BOS_CalendarConfig+0xa8>)
 800dbe8:	f005 f818 	bl	8012c1c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	0018      	movs	r0, r3
 800dbf0:	b006      	add	sp, #24
 800dbf2:	bc04      	pop	{r2}
 800dbf4:	4690      	mov	r8, r2
 800dbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800dbf8:	466a      	mov	r2, sp
 800dbfa:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800dbfc:	4b07      	ldr	r3, [pc, #28]	; (800dc1c <BOS_CalendarConfig+0xac>)
 800dbfe:	220c      	movs	r2, #12
 800dc00:	735a      	strb	r2, [r3, #13]
 800dc02:	e7dd      	b.n	800dbc0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800dc04:	2340      	movs	r3, #64	; 0x40
 800dc06:	466a      	mov	r2, sp
 800dc08:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800dc0a:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <BOS_CalendarConfig+0xac>)
 800dc0c:	220c      	movs	r2, #12
 800dc0e:	735a      	strb	r2, [r3, #13]
 800dc10:	e7d6      	b.n	800dbc0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800dc12:	23ff      	movs	r3, #255	; 0xff
 800dc14:	e7eb      	b.n	800dbee <BOS_CalendarConfig+0x7e>
 800dc16:	46c0      	nop			; (mov r8, r8)
 800dc18:	2000654c 	.word	0x2000654c
 800dc1c:	2000612c 	.word	0x2000612c
 800dc20:	000032f2 	.word	0x000032f2

0800dc24 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800dc24:	b530      	push	{r4, r5, lr}
 800dc26:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800dc28:	4d16      	ldr	r5, [pc, #88]	; (800dc84 <GetTimeDate+0x60>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	a902      	add	r1, sp, #8
 800dc2e:	0028      	movs	r0, r5
 800dc30:	f004 ffac 	bl	8012b8c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800dc34:	ac07      	add	r4, sp, #28
 800dc36:	2200      	movs	r2, #0
 800dc38:	0021      	movs	r1, r4
 800dc3a:	0028      	movs	r0, r5
 800dc3c:	f004 ffcc 	bl	8012bd8 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800dc40:	4b11      	ldr	r3, [pc, #68]	; (800dc88 <GetTimeDate+0x64>)
 800dc42:	aa02      	add	r2, sp, #8
 800dc44:	7a12      	ldrb	r2, [r2, #8]
 800dc46:	09d2      	lsrs	r2, r2, #7
 800dc48:	3201      	adds	r2, #1
 800dc4a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800dc4c:	9a03      	ldr	r2, [sp, #12]
 800dc4e:	9201      	str	r2, [sp, #4]
 800dc50:	0852      	lsrs	r2, r2, #1
 800dc52:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800dc54:	aa02      	add	r2, sp, #8
 800dc56:	7892      	ldrb	r2, [r2, #2]
 800dc58:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800dc5a:	aa02      	add	r2, sp, #8
 800dc5c:	7852      	ldrb	r2, [r2, #1]
 800dc5e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800dc60:	aa02      	add	r2, sp, #8
 800dc62:	7812      	ldrb	r2, [r2, #0]
 800dc64:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800dc66:	78a2      	ldrb	r2, [r4, #2]
 800dc68:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800dc6a:	7862      	ldrb	r2, [r4, #1]
 800dc6c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800dc6e:	7822      	ldrb	r2, [r4, #0]
 800dc70:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800dc72:	78e2      	ldrb	r2, [r4, #3]
 800dc74:	21fa      	movs	r1, #250	; 0xfa
 800dc76:	00c9      	lsls	r1, r1, #3
 800dc78:	468c      	mov	ip, r1
 800dc7a:	4462      	add	r2, ip
 800dc7c:	831a      	strh	r2, [r3, #24]
}
 800dc7e:	b009      	add	sp, #36	; 0x24
 800dc80:	bd30      	pop	{r4, r5, pc}
 800dc82:	46c0      	nop			; (mov r8, r8)
 800dc84:	2000654c 	.word	0x2000654c
 800dc88:	2000612c 	.word	0x2000612c

0800dc8c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800dc8c:	b530      	push	{r4, r5, lr}
 800dc8e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800dc90:	4a12      	ldr	r2, [pc, #72]	; (800dcdc <TIM_USEC_Init+0x50>)
 800dc92:	69d1      	ldr	r1, [r2, #28]
 800dc94:	2080      	movs	r0, #128	; 0x80
 800dc96:	0040      	lsls	r0, r0, #1
 800dc98:	4301      	orrs	r1, r0
 800dc9a:	61d1      	str	r1, [r2, #28]
 800dc9c:	69d3      	ldr	r3, [r2, #28]
 800dc9e:	4003      	ands	r3, r0
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800dca4:	4c0e      	ldr	r4, [pc, #56]	; (800dce0 <TIM_USEC_Init+0x54>)
 800dca6:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <TIM_USEC_Init+0x58>)
 800dca8:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800dcaa:	f004 fd27 	bl	80126fc <HAL_RCC_GetPCLK1Freq>
 800dcae:	490e      	ldr	r1, [pc, #56]	; (800dce8 <TIM_USEC_Init+0x5c>)
 800dcb0:	f7f2 fa44 	bl	800013c <__udivsi3>
 800dcb4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dcb6:	2500      	movs	r5, #0
 800dcb8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800dcba:	4b0c      	ldr	r3, [pc, #48]	; (800dcec <TIM_USEC_Init+0x60>)
 800dcbc:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800dcbe:	0020      	movs	r0, r4
 800dcc0:	f005 f842 	bl	8012d48 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dcc4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dcc6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800dcc8:	a902      	add	r1, sp, #8
 800dcca:	0020      	movs	r0, r4
 800dccc:	f005 f856 	bl	8012d7c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800dcd0:	0020      	movs	r0, r4
 800dcd2:	f004 ffb0 	bl	8012c36 <HAL_TIM_Base_Start>
}
 800dcd6:	b005      	add	sp, #20
 800dcd8:	bd30      	pop	{r4, r5, pc}
 800dcda:	46c0      	nop			; (mov r8, r8)
 800dcdc:	40021000 	.word	0x40021000
 800dce0:	200065a8 	.word	0x200065a8
 800dce4:	40002000 	.word	0x40002000
 800dce8:	000f4240 	.word	0x000f4240
 800dcec:	0000ffff 	.word	0x0000ffff

0800dcf0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dcf0:	b530      	push	{r4, r5, lr}
 800dcf2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dcf4:	4a12      	ldr	r2, [pc, #72]	; (800dd40 <TIM_MSEC_Init+0x50>)
 800dcf6:	6991      	ldr	r1, [r2, #24]
 800dcf8:	2080      	movs	r0, #128	; 0x80
 800dcfa:	0240      	lsls	r0, r0, #9
 800dcfc:	4301      	orrs	r1, r0
 800dcfe:	6191      	str	r1, [r2, #24]
 800dd00:	6993      	ldr	r3, [r2, #24]
 800dd02:	4003      	ands	r3, r0
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800dd08:	4c0e      	ldr	r4, [pc, #56]	; (800dd44 <TIM_MSEC_Init+0x54>)
 800dd0a:	4b0f      	ldr	r3, [pc, #60]	; (800dd48 <TIM_MSEC_Init+0x58>)
 800dd0c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dd0e:	f004 fcf5 	bl	80126fc <HAL_RCC_GetPCLK1Freq>
 800dd12:	21fa      	movs	r1, #250	; 0xfa
 800dd14:	0089      	lsls	r1, r1, #2
 800dd16:	f7f2 fa11 	bl	800013c <__udivsi3>
 800dd1a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd1c:	2500      	movs	r5, #0
 800dd1e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800dd20:	4b0a      	ldr	r3, [pc, #40]	; (800dd4c <TIM_MSEC_Init+0x5c>)
 800dd22:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800dd24:	0020      	movs	r0, r4
 800dd26:	f005 f80f 	bl	8012d48 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd2a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd2c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dd2e:	a902      	add	r1, sp, #8
 800dd30:	0020      	movs	r0, r4
 800dd32:	f005 f823 	bl	8012d7c <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dd36:	0020      	movs	r0, r4
 800dd38:	f004 ff7d 	bl	8012c36 <HAL_TIM_Base_Start>
}
 800dd3c:	b005      	add	sp, #20
 800dd3e:	bd30      	pop	{r4, r5, pc}
 800dd40:	40021000 	.word	0x40021000
 800dd44:	2000656c 	.word	0x2000656c
 800dd48:	40014000 	.word	0x40014000
 800dd4c:	0000ffff 	.word	0x0000ffff

0800dd50 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dd50:	b510      	push	{r4, lr}
 800dd52:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800dd54:	f002 f9a4 	bl	80100a0 <vPortEnterCritical>
	
	if (Delay)
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	d006      	beq.n	800dd6a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800dd5c:	4b04      	ldr	r3, [pc, #16]	; (800dd70 <StartMicroDelay+0x20>)
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800dd62:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dd64:	1a5b      	subs	r3, r3, r1
 800dd66:	42a3      	cmp	r3, r4
 800dd68:	d9fb      	bls.n	800dd62 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dd6a:	f002 f9a5 	bl	80100b8 <vPortExitCritical>
}
 800dd6e:	bd10      	pop	{r4, pc}
 800dd70:	200065a8 	.word	0x200065a8

0800dd74 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800dd74:	b510      	push	{r4, lr}
 800dd76:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800dd78:	f002 f992 	bl	80100a0 <vPortEnterCritical>
	
	if (Delay)
 800dd7c:	2c00      	cmp	r4, #0
 800dd7e:	d006      	beq.n	800dd8e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800dd80:	4b04      	ldr	r3, [pc, #16]	; (800dd94 <StartMilliDelay+0x20>)
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800dd86:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dd88:	1a5b      	subs	r3, r3, r1
 800dd8a:	42a3      	cmp	r3, r4
 800dd8c:	d9fb      	bls.n	800dd86 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dd8e:	f002 f993 	bl	80100b8 <vPortExitCritical>
}
 800dd92:	bd10      	pop	{r4, pc}
 800dd94:	2000656c 	.word	0x2000656c

0800dd98 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800dd98:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800dd9a:	4809      	ldr	r0, [pc, #36]	; (800ddc0 <MX_USART1_UART_Init+0x28>)
 800dd9c:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <MX_USART1_UART_Init+0x2c>)
 800dd9e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dda0:	23e1      	movs	r3, #225	; 0xe1
 800dda2:	031b      	lsls	r3, r3, #12
 800dda4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dda6:	2300      	movs	r3, #0
 800dda8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ddaa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ddac:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ddae:	220c      	movs	r2, #12
 800ddb0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ddb2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ddb4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800ddb6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ddb8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800ddba:	f005 fc5f 	bl	801367c <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800ddbe:	bd10      	pop	{r4, pc}
 800ddc0:	20006304 	.word	0x20006304
 800ddc4:	40013800 	.word	0x40013800

0800ddc8 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800ddc8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800ddca:	4809      	ldr	r0, [pc, #36]	; (800ddf0 <MX_USART2_UART_Init+0x28>)
 800ddcc:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <MX_USART2_UART_Init+0x2c>)
 800ddce:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800ddd0:	23e1      	movs	r3, #225	; 0xe1
 800ddd2:	031b      	lsls	r3, r3, #12
 800ddd4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ddda:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dddc:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ddde:	220c      	movs	r2, #12
 800dde0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dde2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dde4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dde6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dde8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800ddea:	f005 fc47 	bl	801367c <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800ddee:	bd10      	pop	{r4, pc}
 800ddf0:	20006474 	.word	0x20006474
 800ddf4:	40004400 	.word	0x40004400

0800ddf8 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800ddf8:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800ddfa:	4809      	ldr	r0, [pc, #36]	; (800de20 <MX_USART3_UART_Init+0x28>)
 800ddfc:	4b09      	ldr	r3, [pc, #36]	; (800de24 <MX_USART3_UART_Init+0x2c>)
 800ddfe:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de00:	23e1      	movs	r3, #225	; 0xe1
 800de02:	031b      	lsls	r3, r3, #12
 800de04:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800de06:	2300      	movs	r3, #0
 800de08:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800de0a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800de0c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800de0e:	220c      	movs	r2, #12
 800de10:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de12:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800de14:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de16:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de18:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800de1a:	f005 fc2f 	bl	801367c <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800de1e:	bd10      	pop	{r4, pc}
 800de20:	20006254 	.word	0x20006254
 800de24:	40004800 	.word	0x40004800

0800de28 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800de28:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800de2a:	4809      	ldr	r0, [pc, #36]	; (800de50 <MX_USART4_UART_Init+0x28>)
 800de2c:	4b09      	ldr	r3, [pc, #36]	; (800de54 <MX_USART4_UART_Init+0x2c>)
 800de2e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de30:	23e1      	movs	r3, #225	; 0xe1
 800de32:	031b      	lsls	r3, r3, #12
 800de34:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800de36:	2300      	movs	r3, #0
 800de38:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800de3a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800de3c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800de3e:	220c      	movs	r2, #12
 800de40:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de42:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800de44:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de46:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de48:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800de4a:	f005 fc17 	bl	801367c <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800de4e:	bd10      	pop	{r4, pc}
 800de50:	20006400 	.word	0x20006400
 800de54:	40004c00 	.word	0x40004c00

0800de58 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800de58:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800de5a:	4809      	ldr	r0, [pc, #36]	; (800de80 <MX_USART6_UART_Init+0x28>)
 800de5c:	4b09      	ldr	r3, [pc, #36]	; (800de84 <MX_USART6_UART_Init+0x2c>)
 800de5e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800de60:	23e1      	movs	r3, #225	; 0xe1
 800de62:	031b      	lsls	r3, r3, #12
 800de64:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800de66:	2300      	movs	r3, #0
 800de68:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800de6a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800de6c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800de6e:	220c      	movs	r2, #12
 800de70:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800de72:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800de74:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800de76:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800de78:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800de7a:	f005 fbff 	bl	801367c <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800de7e:	bd10      	pop	{r4, pc}
 800de80:	20006388 	.word	0x20006388
 800de84:	40011400 	.word	0x40011400

0800de88 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800de88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de8a:	46ce      	mov	lr, r9
 800de8c:	b500      	push	{lr}
 800de8e:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800de90:	6803      	ldr	r3, [r0, #0]
 800de92:	4a7a      	ldr	r2, [pc, #488]	; (800e07c <HAL_UART_MspInit+0x1f4>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d011      	beq.n	800debc <HAL_UART_MspInit+0x34>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800de98:	4a79      	ldr	r2, [pc, #484]	; (800e080 <HAL_UART_MspInit+0x1f8>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d03c      	beq.n	800df18 <HAL_UART_MspInit+0x90>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800de9e:	4a79      	ldr	r2, [pc, #484]	; (800e084 <HAL_UART_MspInit+0x1fc>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d065      	beq.n	800df70 <HAL_UART_MspInit+0xe8>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800dea4:	4a78      	ldr	r2, [pc, #480]	; (800e088 <HAL_UART_MspInit+0x200>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d100      	bne.n	800deac <HAL_UART_MspInit+0x24>
 800deaa:	e08e      	b.n	800dfca <HAL_UART_MspInit+0x142>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800deac:	4a77      	ldr	r2, [pc, #476]	; (800e08c <HAL_UART_MspInit+0x204>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d100      	bne.n	800deb4 <HAL_UART_MspInit+0x2c>
 800deb2:	e0b5      	b.n	800e020 <HAL_UART_MspInit+0x198>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800deb4:	b00a      	add	sp, #40	; 0x28
 800deb6:	bc04      	pop	{r2}
 800deb8:	4691      	mov	r9, r2
 800deba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800debc:	4a74      	ldr	r2, [pc, #464]	; (800e090 <HAL_UART_MspInit+0x208>)
 800debe:	6991      	ldr	r1, [r2, #24]
 800dec0:	2080      	movs	r0, #128	; 0x80
 800dec2:	01c0      	lsls	r0, r0, #7
 800dec4:	4301      	orrs	r1, r0
 800dec6:	6191      	str	r1, [r2, #24]
 800dec8:	6993      	ldr	r3, [r2, #24]
 800deca:	4003      	ands	r3, r0
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800ded0:	2380      	movs	r3, #128	; 0x80
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ded6:	2702      	movs	r7, #2
 800ded8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deda:	2401      	movs	r4, #1
 800dedc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dede:	2603      	movs	r6, #3
 800dee0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;	
 800dee2:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800dee4:	2590      	movs	r5, #144	; 0x90
 800dee6:	05ed      	lsls	r5, r5, #23
 800dee8:	a905      	add	r1, sp, #20
 800deea:	0028      	movs	r0, r5
 800deec:	f003 fe1c 	bl	8011b28 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800def0:	2380      	movs	r3, #128	; 0x80
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800def6:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800def8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800defa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART1_AF;
 800defc:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800defe:	a905      	add	r1, sp, #20
 800df00:	0028      	movs	r0, r5
 800df02:	f003 fe11 	bl	8011b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800df06:	2200      	movs	r2, #0
 800df08:	2101      	movs	r1, #1
 800df0a:	201b      	movs	r0, #27
 800df0c:	f002 fe42 	bl	8010b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800df10:	201b      	movs	r0, #27
 800df12:	f002 fe73 	bl	8010bfc <HAL_NVIC_EnableIRQ>
 800df16:	e7cd      	b.n	800deb4 <HAL_UART_MspInit+0x2c>
    __USART2_CLK_ENABLE();
 800df18:	4a5d      	ldr	r2, [pc, #372]	; (800e090 <HAL_UART_MspInit+0x208>)
 800df1a:	69d1      	ldr	r1, [r2, #28]
 800df1c:	2080      	movs	r0, #128	; 0x80
 800df1e:	0280      	lsls	r0, r0, #10
 800df20:	4301      	orrs	r1, r0
 800df22:	61d1      	str	r1, [r2, #28]
 800df24:	69d3      	ldr	r3, [r2, #28]
 800df26:	4003      	ands	r3, r0
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800df2c:	2304      	movs	r3, #4
 800df2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df30:	2702      	movs	r7, #2
 800df32:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df34:	2401      	movs	r4, #1
 800df36:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df38:	2603      	movs	r6, #3
 800df3a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800df3c:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800df3e:	2590      	movs	r5, #144	; 0x90
 800df40:	05ed      	lsls	r5, r5, #23
 800df42:	a905      	add	r1, sp, #20
 800df44:	0028      	movs	r0, r5
 800df46:	f003 fdef 	bl	8011b28 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800df4a:	2308      	movs	r3, #8
 800df4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df4e:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df50:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df52:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART2_AF;
 800df54:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800df56:	a905      	add	r1, sp, #20
 800df58:	0028      	movs	r0, r5
 800df5a:	f003 fde5 	bl	8011b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800df5e:	2200      	movs	r2, #0
 800df60:	2101      	movs	r1, #1
 800df62:	201c      	movs	r0, #28
 800df64:	f002 fe16 	bl	8010b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800df68:	201c      	movs	r0, #28
 800df6a:	f002 fe47 	bl	8010bfc <HAL_NVIC_EnableIRQ>
 800df6e:	e7a1      	b.n	800deb4 <HAL_UART_MspInit+0x2c>
    __USART3_CLK_ENABLE();
 800df70:	4a47      	ldr	r2, [pc, #284]	; (800e090 <HAL_UART_MspInit+0x208>)
 800df72:	69d1      	ldr	r1, [r2, #28]
 800df74:	2080      	movs	r0, #128	; 0x80
 800df76:	02c0      	lsls	r0, r0, #11
 800df78:	4301      	orrs	r1, r0
 800df7a:	61d1      	str	r1, [r2, #28]
 800df7c:	69d3      	ldr	r3, [r2, #28]
 800df7e:	4003      	ands	r3, r0
 800df80:	9302      	str	r3, [sp, #8]
 800df82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800df84:	2380      	movs	r3, #128	; 0x80
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df8a:	2402      	movs	r4, #2
 800df8c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df8e:	2701      	movs	r7, #1
 800df90:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df92:	2603      	movs	r6, #3
 800df94:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800df96:	2504      	movs	r5, #4
 800df98:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800df9a:	a905      	add	r1, sp, #20
 800df9c:	483d      	ldr	r0, [pc, #244]	; (800e094 <HAL_UART_MspInit+0x20c>)
 800df9e:	f003 fdc3 	bl	8011b28 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dfa2:	2380      	movs	r3, #128	; 0x80
 800dfa4:	011b      	lsls	r3, r3, #4
 800dfa6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfaa:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfac:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART3_AF;
 800dfae:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dfb0:	a905      	add	r1, sp, #20
 800dfb2:	4838      	ldr	r0, [pc, #224]	; (800e094 <HAL_UART_MspInit+0x20c>)
 800dfb4:	f003 fdb8 	bl	8011b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dfb8:	2200      	movs	r2, #0
 800dfba:	2101      	movs	r1, #1
 800dfbc:	201d      	movs	r0, #29
 800dfbe:	f002 fde9 	bl	8010b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dfc2:	201d      	movs	r0, #29
 800dfc4:	f002 fe1a 	bl	8010bfc <HAL_NVIC_EnableIRQ>
 800dfc8:	e774      	b.n	800deb4 <HAL_UART_MspInit+0x2c>
    __USART4_CLK_ENABLE();
 800dfca:	4a31      	ldr	r2, [pc, #196]	; (800e090 <HAL_UART_MspInit+0x208>)
 800dfcc:	69d1      	ldr	r1, [r2, #28]
 800dfce:	2080      	movs	r0, #128	; 0x80
 800dfd0:	0300      	lsls	r0, r0, #12
 800dfd2:	4301      	orrs	r1, r0
 800dfd4:	61d1      	str	r1, [r2, #28]
 800dfd6:	69d3      	ldr	r3, [r2, #28]
 800dfd8:	4003      	ands	r3, r0
 800dfda:	9303      	str	r3, [sp, #12]
 800dfdc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800dfde:	2401      	movs	r4, #1
 800dfe0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfe2:	2502      	movs	r5, #2
 800dfe4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfe6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfe8:	2603      	movs	r6, #3
 800dfea:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;	
 800dfec:	2704      	movs	r7, #4
 800dfee:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800dff0:	a905      	add	r1, sp, #20
 800dff2:	2090      	movs	r0, #144	; 0x90
 800dff4:	05c0      	lsls	r0, r0, #23
 800dff6:	f003 fd97 	bl	8011b28 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800dffa:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dffc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dffe:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e000:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = USART4_AF;
 800e002:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800e004:	a905      	add	r1, sp, #20
 800e006:	2090      	movs	r0, #144	; 0x90
 800e008:	05c0      	lsls	r0, r0, #23
 800e00a:	f003 fd8d 	bl	8011b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e00e:	2200      	movs	r2, #0
 800e010:	2101      	movs	r1, #1
 800e012:	201d      	movs	r0, #29
 800e014:	f002 fdbe 	bl	8010b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e018:	201d      	movs	r0, #29
 800e01a:	f002 fdef 	bl	8010bfc <HAL_NVIC_EnableIRQ>
 800e01e:	e749      	b.n	800deb4 <HAL_UART_MspInit+0x2c>
    __USART6_CLK_ENABLE();
 800e020:	4b1b      	ldr	r3, [pc, #108]	; (800e090 <HAL_UART_MspInit+0x208>)
 800e022:	699a      	ldr	r2, [r3, #24]
 800e024:	2420      	movs	r4, #32
 800e026:	4322      	orrs	r2, r4
 800e028:	619a      	str	r2, [r3, #24]
 800e02a:	699b      	ldr	r3, [r3, #24]
 800e02c:	4023      	ands	r3, r4
 800e02e:	9304      	str	r3, [sp, #16]
 800e030:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e032:	2310      	movs	r3, #16
 800e034:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e036:	3b0e      	subs	r3, #14
 800e038:	4699      	mov	r9, r3
 800e03a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e03c:	2501      	movs	r5, #1
 800e03e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e040:	2703      	movs	r7, #3
 800e042:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e044:	2605      	movs	r6, #5
 800e046:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e048:	a905      	add	r1, sp, #20
 800e04a:	2090      	movs	r0, #144	; 0x90
 800e04c:	05c0      	lsls	r0, r0, #23
 800e04e:	f003 fd6b 	bl	8011b28 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e052:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e054:	464b      	mov	r3, r9
 800e056:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e058:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e05a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = USART6_AF;
 800e05c:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e05e:	a905      	add	r1, sp, #20
 800e060:	2090      	movs	r0, #144	; 0x90
 800e062:	05c0      	lsls	r0, r0, #23
 800e064:	f003 fd60 	bl	8011b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e068:	2200      	movs	r2, #0
 800e06a:	2101      	movs	r1, #1
 800e06c:	201d      	movs	r0, #29
 800e06e:	f002 fd91 	bl	8010b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e072:	201d      	movs	r0, #29
 800e074:	f002 fdc2 	bl	8010bfc <HAL_NVIC_EnableIRQ>
}
 800e078:	e71c      	b.n	800deb4 <HAL_UART_MspInit+0x2c>
 800e07a:	46c0      	nop			; (mov r8, r8)
 800e07c:	40013800 	.word	0x40013800
 800e080:	40004400 	.word	0x40004400
 800e084:	40004800 	.word	0x40004800
 800e088:	40004c00 	.word	0x40004c00
 800e08c:	40011400 	.word	0x40011400
 800e090:	40021000 	.word	0x40021000
 800e094:	48000400 	.word	0x48000400

0800e098 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e098:	2805      	cmp	r0, #5
 800e09a:	d80b      	bhi.n	800e0b4 <GetUart+0x1c>
 800e09c:	0080      	lsls	r0, r0, #2
 800e09e:	4b07      	ldr	r3, [pc, #28]	; (800e0bc <GetUart+0x24>)
 800e0a0:	581b      	ldr	r3, [r3, r0]
 800e0a2:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800e0a4:	4806      	ldr	r0, [pc, #24]	; (800e0c0 <GetUart+0x28>)
 800e0a6:	e008      	b.n	800e0ba <GetUart+0x22>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800e0a8:	4806      	ldr	r0, [pc, #24]	; (800e0c4 <GetUart+0x2c>)
 800e0aa:	e006      	b.n	800e0ba <GetUart+0x22>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800e0ac:	4806      	ldr	r0, [pc, #24]	; (800e0c8 <GetUart+0x30>)
 800e0ae:	e004      	b.n	800e0ba <GetUart+0x22>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800e0b0:	4806      	ldr	r0, [pc, #24]	; (800e0cc <GetUart+0x34>)
 800e0b2:	e002      	b.n	800e0ba <GetUart+0x22>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	e000      	b.n	800e0ba <GetUart+0x22>
			return P1uart;	
 800e0b8:	4805      	ldr	r0, [pc, #20]	; (800e0d0 <GetUart+0x38>)
	}		
}
 800e0ba:	4770      	bx	lr
 800e0bc:	0801a830 	.word	0x0801a830
 800e0c0:	20006474 	.word	0x20006474
 800e0c4:	20006388 	.word	0x20006388
 800e0c8:	20006254 	.word	0x20006254
 800e0cc:	20006304 	.word	0x20006304
 800e0d0:	20006400 	.word	0x20006400

0800e0d4 <writePxMutex>:
{
 800e0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	0005      	movs	r5, r0
 800e0da:	9100      	str	r1, [sp, #0]
 800e0dc:	0017      	movs	r7, r2
 800e0de:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e0e0:	f7ff ffda 	bl	800e098 <GetUart>
 800e0e4:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e0e6:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d016      	beq.n	800e11a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e0ec:	00ab      	lsls	r3, r5, #2
 800e0ee:	4a0c      	ldr	r2, [pc, #48]	; (800e120 <writePxMutex+0x4c>)
 800e0f0:	5898      	ldr	r0, [r3, r2]
 800e0f2:	9901      	ldr	r1, [sp, #4]
 800e0f4:	f000 f93a 	bl	800e36c <osSemaphoreWait>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d10e      	bne.n	800e11a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e0fc:	9b08      	ldr	r3, [sp, #32]
 800e0fe:	003a      	movs	r2, r7
 800e100:	9900      	ldr	r1, [sp, #0]
 800e102:	0020      	movs	r0, r4
 800e104:	f005 fa14 	bl	8013530 <HAL_UART_Transmit>
 800e108:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e10a:	d001      	beq.n	800e110 <writePxMutex+0x3c>
 800e10c:	2803      	cmp	r0, #3
 800e10e:	d1f5      	bne.n	800e0fc <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e110:	00ad      	lsls	r5, r5, #2
 800e112:	4b03      	ldr	r3, [pc, #12]	; (800e120 <writePxMutex+0x4c>)
 800e114:	58e8      	ldr	r0, [r5, r3]
 800e116:	f000 f955 	bl	800e3c4 <osSemaphoreRelease>
}
 800e11a:	0030      	movs	r0, r6
 800e11c:	b003      	add	sp, #12
 800e11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e120:	200061ac 	.word	0x200061ac

0800e124 <writePxITMutex>:
{
 800e124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e126:	b083      	sub	sp, #12
 800e128:	0004      	movs	r4, r0
 800e12a:	9101      	str	r1, [sp, #4]
 800e12c:	0017      	movs	r7, r2
 800e12e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e130:	f7ff ffb2 	bl	800e098 <GetUart>
 800e134:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e136:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e138:	2800      	cmp	r0, #0
 800e13a:	d008      	beq.n	800e14e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e13c:	00a4      	lsls	r4, r4, #2
 800e13e:	4b09      	ldr	r3, [pc, #36]	; (800e164 <writePxITMutex+0x40>)
 800e140:	58e0      	ldr	r0, [r4, r3]
 800e142:	0029      	movs	r1, r5
 800e144:	f000 f912 	bl	800e36c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e148:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e14a:	2800      	cmp	r0, #0
 800e14c:	d002      	beq.n	800e154 <writePxITMutex+0x30>
}
 800e14e:	0018      	movs	r0, r3
 800e150:	b003      	add	sp, #12
 800e152:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e154:	003a      	movs	r2, r7
 800e156:	9901      	ldr	r1, [sp, #4]
 800e158:	0030      	movs	r0, r6
 800e15a:	f004 fe53 	bl	8012e04 <HAL_UART_Transmit_IT>
 800e15e:	0003      	movs	r3, r0
 800e160:	e7f5      	b.n	800e14e <writePxITMutex+0x2a>
 800e162:	46c0      	nop			; (mov r8, r8)
 800e164:	200061ac 	.word	0x200061ac

0800e168 <writePxDMAMutex>:
{
 800e168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16a:	b083      	sub	sp, #12
 800e16c:	0004      	movs	r4, r0
 800e16e:	000f      	movs	r7, r1
 800e170:	9201      	str	r2, [sp, #4]
 800e172:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e174:	f7ff ff90 	bl	800e098 <GetUart>
 800e178:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e17a:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d008      	beq.n	800e192 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e180:	00a4      	lsls	r4, r4, #2
 800e182:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <writePxDMAMutex+0x44>)
 800e184:	58e0      	ldr	r0, [r4, r3]
 800e186:	0031      	movs	r1, r6
 800e188:	f000 f8f0 	bl	800e36c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e18c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e18e:	2800      	cmp	r0, #0
 800e190:	d002      	beq.n	800e198 <writePxDMAMutex+0x30>
}
 800e192:	0018      	movs	r0, r3
 800e194:	b003      	add	sp, #12
 800e196:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e198:	0028      	movs	r0, r5
 800e19a:	f7ff f99b 	bl	800d4d4 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e19e:	9a01      	ldr	r2, [sp, #4]
 800e1a0:	0039      	movs	r1, r7
 800e1a2:	0028      	movs	r0, r5
 800e1a4:	f004 feda 	bl	8012f5c <HAL_UART_Transmit_DMA>
 800e1a8:	0003      	movs	r3, r0
 800e1aa:	e7f2      	b.n	800e192 <writePxDMAMutex+0x2a>
 800e1ac:	200061ac 	.word	0x200061ac

0800e1b0 <UpdateBaudrate>:
{
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e1b4:	f7ff ff70 	bl	800e098 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e1b8:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e1ba:	f005 fa5f 	bl	801367c <HAL_UART_Init>
}
 800e1be:	2000      	movs	r0, #0
 800e1c0:	bd10      	pop	{r4, pc}
	...

0800e1c4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e1c8:	d003      	beq.n	800e1d2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e1ca:	2901      	cmp	r1, #1
 800e1cc:	d002      	beq.n	800e1d4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e1ce:	2900      	cmp	r1, #0
 800e1d0:	d016      	beq.n	800e200 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e1d4:	f7fd faee 	bl	800b7b4 <GetPort>
 800e1d8:	4b14      	ldr	r3, [pc, #80]	; (800e22c <SwapUartPins+0x68>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	4d14      	ldr	r5, [pc, #80]	; (800e230 <SwapUartPins+0x6c>)
 800e1e0:	005b      	lsls	r3, r3, #1
 800e1e2:	3801      	subs	r0, #1
 800e1e4:	2180      	movs	r1, #128	; 0x80
 800e1e6:	0209      	lsls	r1, r1, #8
 800e1e8:	000a      	movs	r2, r1
 800e1ea:	4102      	asrs	r2, r0
 800e1ec:	5b58      	ldrh	r0, [r3, r5]
 800e1ee:	4302      	orrs	r2, r0
 800e1f0:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e1f2:	2308      	movs	r3, #8
 800e1f4:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e1f6:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e1f8:	0020      	movs	r0, r4
 800e1fa:	f005 fa3f 	bl	801367c <HAL_UART_Init>
 800e1fe:	e7e8      	b.n	800e1d2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e200:	f7fd fad8 	bl	800b7b4 <GetPort>
 800e204:	4b09      	ldr	r3, [pc, #36]	; (800e22c <SwapUartPins+0x68>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	3b01      	subs	r3, #1
 800e20a:	4d09      	ldr	r5, [pc, #36]	; (800e230 <SwapUartPins+0x6c>)
 800e20c:	005b      	lsls	r3, r3, #1
 800e20e:	3801      	subs	r0, #1
 800e210:	2180      	movs	r1, #128	; 0x80
 800e212:	0209      	lsls	r1, r1, #8
 800e214:	4101      	asrs	r1, r0
 800e216:	5b5a      	ldrh	r2, [r3, r5]
 800e218:	438a      	bics	r2, r1
 800e21a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e21c:	2308      	movs	r3, #8
 800e21e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e220:	2300      	movs	r3, #0
 800e222:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e224:	0020      	movs	r0, r4
 800e226:	f005 fa29 	bl	801367c <HAL_UART_Init>
}
 800e22a:	e7d2      	b.n	800e1d2 <SwapUartPins+0xe>
 800e22c:	20000866 	.word	0x20000866
 800e230:	200065e4 	.word	0x200065e4

0800e234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e234:	4816      	ldr	r0, [pc, #88]	; (800e290 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e236:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e238:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e23a:	e003      	b.n	800e244 <LoopCopyDataInit>

0800e23c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e23c:	4b15      	ldr	r3, [pc, #84]	; (800e294 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e23e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e240:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e242:	3104      	adds	r1, #4

0800e244 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e244:	4814      	ldr	r0, [pc, #80]	; (800e298 <LoopForever+0xc>)
  ldr r3, =_edata
 800e246:	4b15      	ldr	r3, [pc, #84]	; (800e29c <LoopForever+0x10>)
  adds r2, r0, r1
 800e248:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e24a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e24c:	d3f6      	bcc.n	800e23c <CopyDataInit>
  ldr r2, =_sbss
 800e24e:	4a14      	ldr	r2, [pc, #80]	; (800e2a0 <LoopForever+0x14>)
  b LoopFillZerobss
 800e250:	e002      	b.n	800e258 <LoopFillZerobss>

0800e252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e252:	2300      	movs	r3, #0
  str  r3, [r2]
 800e254:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e256:	3204      	adds	r2, #4

0800e258 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e258:	4b12      	ldr	r3, [pc, #72]	; (800e2a4 <LoopForever+0x18>)
  cmp r2, r3
 800e25a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e25c:	d3f9      	bcc.n	800e252 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e25e:	4812      	ldr	r0, [pc, #72]	; (800e2a8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e260:	4912      	ldr	r1, [pc, #72]	; (800e2ac <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e262:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e264:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e266:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e268:	d005      	beq.n	800e276 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e26a:	f000 f82b 	bl	800e2c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e26e:	f005 fb71 	bl	8013954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e272:	f005 fb58 	bl	8013926 <main>

0800e276 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e276:	480e      	ldr	r0, [pc, #56]	; (800e2b0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e278:	490e      	ldr	r1, [pc, #56]	; (800e2b4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e27a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e27c:	480e      	ldr	r0, [pc, #56]	; (800e2b8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e27e:	490d      	ldr	r1, [pc, #52]	; (800e2b4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e280:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e282:	480e      	ldr	r0, [pc, #56]	; (800e2bc <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e284:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e286:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e288:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e28a:	4700      	bx	r0

0800e28c <LoopForever>:


LoopForever:
    b LoopForever
 800e28c:	e7fe      	b.n	800e28c <LoopForever>
 800e28e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e290:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e294:	0801acd0 	.word	0x0801acd0
  ldr r0, =_sdata
 800e298:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e29c:	20000280 	.word	0x20000280
  ldr r2, =_sbss
 800e2a0:	20000280 	.word	0x20000280
  ldr r3, = _ebss
 800e2a4:	2000667c 	.word	0x2000667c
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e2a8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e2ac:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e2b0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e2b4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e2b8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e2bc:	1fffd800 	.word	0x1fffd800

0800e2c0 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e2c0:	e7fe      	b.n	800e2c0 <CEC_CAN_IRQHandler>
	...

0800e2c4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e2c4:	4b11      	ldr	r3, [pc, #68]	; (800e30c <SystemInit+0x48>)
 800e2c6:	681a      	ldr	r2, [r3, #0]
 800e2c8:	2101      	movs	r1, #1
 800e2ca:	430a      	orrs	r2, r1
 800e2cc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e2ce:	685a      	ldr	r2, [r3, #4]
 800e2d0:	480f      	ldr	r0, [pc, #60]	; (800e310 <SystemInit+0x4c>)
 800e2d2:	4002      	ands	r2, r0
 800e2d4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	480e      	ldr	r0, [pc, #56]	; (800e314 <SystemInit+0x50>)
 800e2da:	4002      	ands	r2, r0
 800e2dc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	480d      	ldr	r0, [pc, #52]	; (800e318 <SystemInit+0x54>)
 800e2e2:	4002      	ands	r2, r0
 800e2e4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	480c      	ldr	r0, [pc, #48]	; (800e31c <SystemInit+0x58>)
 800e2ea:	4002      	ands	r2, r0
 800e2ec:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f0:	200f      	movs	r0, #15
 800e2f2:	4382      	bics	r2, r0
 800e2f4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2f8:	4809      	ldr	r0, [pc, #36]	; (800e320 <SystemInit+0x5c>)
 800e2fa:	4002      	ands	r2, r0
 800e2fc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e300:	438a      	bics	r2, r1
 800e302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e304:	2200      	movs	r2, #0
 800e306:	609a      	str	r2, [r3, #8]

}
 800e308:	4770      	bx	lr
 800e30a:	46c0      	nop			; (mov r8, r8)
 800e30c:	40021000 	.word	0x40021000
 800e310:	08ffb80c 	.word	0x08ffb80c
 800e314:	fef6ffff 	.word	0xfef6ffff
 800e318:	fffbffff 	.word	0xfffbffff
 800e31c:	ffc0ffff 	.word	0xffc0ffff
 800e320:	fff0feac 	.word	0xfff0feac

0800e324 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e324:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e326:	f000 ff55 	bl	800f1d4 <vTaskStartScheduler>
  
  return osOK;
}
 800e32a:	2000      	movs	r0, #0
 800e32c:	bd10      	pop	{r4, pc}

0800e32e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e32e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e330:	2800      	cmp	r0, #0
 800e332:	d100      	bne.n	800e336 <osDelay+0x8>
 800e334:	3001      	adds	r0, #1
 800e336:	f001 f889 	bl	800f44c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e33a:	2000      	movs	r0, #0
 800e33c:	bd10      	pop	{r4, pc}

0800e33e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e33e:	b510      	push	{r4, lr}
 800e340:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e342:	2901      	cmp	r1, #1
 800e344:	d005      	beq.n	800e352 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e346:	2100      	movs	r1, #0
 800e348:	f000 faf6 	bl	800e938 <xQueueCreateCountingSemaphore>
 800e34c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e34e:	0020      	movs	r0, r4
 800e350:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e352:	2203      	movs	r2, #3
 800e354:	2100      	movs	r1, #0
 800e356:	f000 fac8 	bl	800e8ea <xQueueGenericCreate>
 800e35a:	1e04      	subs	r4, r0, #0
 800e35c:	d0f7      	beq.n	800e34e <osSemaphoreCreate+0x10>
 800e35e:	2300      	movs	r3, #0
 800e360:	2200      	movs	r2, #0
 800e362:	2100      	movs	r1, #0
 800e364:	f000 fafc 	bl	800e960 <xQueueGenericSend>
 800e368:	e7f1      	b.n	800e34e <osSemaphoreCreate+0x10>
	...

0800e36c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e36c:	b500      	push	{lr}
 800e36e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e370:	2300      	movs	r3, #0
 800e372:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e374:	2800      	cmp	r0, #0
 800e376:	d021      	beq.n	800e3bc <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e378:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d010      	beq.n	800e3a2 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e380:	aa01      	add	r2, sp, #4
 800e382:	2100      	movs	r1, #0
 800e384:	f000 fcae 	bl	800ece4 <xQueueReceiveFromISR>
 800e388:	0003      	movs	r3, r0
      return osErrorOS;
 800e38a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d113      	bne.n	800e3b8 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e390:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e392:	9b01      	ldr	r3, [sp, #4]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00f      	beq.n	800e3b8 <osSemaphoreWait+0x4c>
 800e398:	4b09      	ldr	r3, [pc, #36]	; (800e3c0 <osSemaphoreWait+0x54>)
 800e39a:	2280      	movs	r2, #128	; 0x80
 800e39c:	0552      	lsls	r2, r2, #21
 800e39e:	601a      	str	r2, [r3, #0]
 800e3a0:	e00a      	b.n	800e3b8 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	000a      	movs	r2, r1
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	f000 fbf3 	bl	800eb92 <xQueueGenericReceive>
  return osOK;
 800e3ac:	3801      	subs	r0, #1
 800e3ae:	1e43      	subs	r3, r0, #1
 800e3b0:	4198      	sbcs	r0, r3
 800e3b2:	4240      	negs	r0, r0
 800e3b4:	23ff      	movs	r3, #255	; 0xff
 800e3b6:	4018      	ands	r0, r3
}
 800e3b8:	b003      	add	sp, #12
 800e3ba:	bd00      	pop	{pc}
    return osErrorParameter;
 800e3bc:	2080      	movs	r0, #128	; 0x80
 800e3be:	e7fb      	b.n	800e3b8 <osSemaphoreWait+0x4c>
 800e3c0:	e000ed04 	.word	0xe000ed04

0800e3c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e3c4:	b500      	push	{lr}
 800e3c6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	9301      	str	r3, [sp, #4]
 800e3cc:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d00f      	beq.n	800e3f4 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3d4:	a901      	add	r1, sp, #4
 800e3d6:	f000 fba1 	bl	800eb1c <xQueueGiveFromISR>
 800e3da:	0003      	movs	r3, r0
      return osErrorOS;
 800e3dc:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d114      	bne.n	800e40c <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e3e2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e3e4:	9b01      	ldr	r3, [sp, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d010      	beq.n	800e40c <osSemaphoreRelease+0x48>
 800e3ea:	4b09      	ldr	r3, [pc, #36]	; (800e410 <osSemaphoreRelease+0x4c>)
 800e3ec:	2280      	movs	r2, #128	; 0x80
 800e3ee:	0552      	lsls	r2, r2, #21
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	e00b      	b.n	800e40c <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	f000 fab1 	bl	800e960 <xQueueGenericSend>
      result = osErrorOS;
 800e3fe:	3801      	subs	r0, #1
 800e400:	4243      	negs	r3, r0
 800e402:	4158      	adcs	r0, r3
 800e404:	4240      	negs	r0, r0
 800e406:	23fe      	movs	r3, #254	; 0xfe
 800e408:	4398      	bics	r0, r3
 800e40a:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e40c:	b003      	add	sp, #12
 800e40e:	bd00      	pop	{pc}
 800e410:	e000ed04 	.word	0xe000ed04

0800e414 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e414:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e416:	f001 fa0f 	bl	800f838 <xTaskGetSchedulerState>
 800e41a:	2801      	cmp	r0, #1
 800e41c:	d001      	beq.n	800e422 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e41e:	f001 fe85 	bl	801012c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e422:	bd10      	pop	{r4, pc}

0800e424 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800e428:	d101      	bne.n	800e42e <FreeRTOS_CLIRegisterCommand+0xa>
 800e42a:	b672      	cpsid	i
 800e42c:	e7fe      	b.n	800e42c <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e42e:	2008      	movs	r0, #8
 800e430:	f001 feb8 	bl	80101a4 <pvPortMalloc>
 800e434:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800e436:	d101      	bne.n	800e43c <FreeRTOS_CLIRegisterCommand+0x18>
 800e438:	b672      	cpsid	i
 800e43a:	e7fe      	b.n	800e43a <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800e43c:	f001 fe30 	bl	80100a0 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e440:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e446:	4b04      	ldr	r3, [pc, #16]	; (800e458 <FreeRTOS_CLIRegisterCommand+0x34>)
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e44c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e44e:	f001 fe33 	bl	80100b8 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800e452:	2001      	movs	r0, #1
 800e454:	bd70      	pop	{r4, r5, r6, pc}
 800e456:	46c0      	nop			; (mov r8, r8)
 800e458:	2000009c 	.word	0x2000009c

0800e45c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45e:	46d6      	mov	lr, sl
 800e460:	b500      	push	{lr}
 800e462:	b084      	sub	sp, #16
 800e464:	9001      	str	r0, [sp, #4]
 800e466:	9102      	str	r1, [sp, #8]
 800e468:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e46a:	4b37      	ldr	r3, [pc, #220]	; (800e548 <FreeRTOS_CLIProcessCommand+0xec>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00e      	beq.n	800e490 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	689b      	ldr	r3, [r3, #8]
 800e476:	9a01      	ldr	r2, [sp, #4]
 800e478:	9903      	ldr	r1, [sp, #12]
 800e47a:	9802      	ldr	r0, [sp, #8]
 800e47c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e47e:	2800      	cmp	r0, #0
 800e480:	d102      	bne.n	800e488 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e482:	4b31      	ldr	r3, [pc, #196]	; (800e548 <FreeRTOS_CLIProcessCommand+0xec>)
 800e484:	2200      	movs	r2, #0
 800e486:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e488:	b004      	add	sp, #16
 800e48a:	bc04      	pop	{r2}
 800e48c:	4692      	mov	sl, r2
 800e48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e490:	4d2e      	ldr	r5, [pc, #184]	; (800e54c <FreeRTOS_CLIProcessCommand+0xf0>)
 800e492:	4a2d      	ldr	r2, [pc, #180]	; (800e548 <FreeRTOS_CLIProcessCommand+0xec>)
 800e494:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e496:	3320      	adds	r3, #32
 800e498:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e49a:	0017      	movs	r7, r2
 800e49c:	e00a      	b.n	800e4b4 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e49e:	0002      	movs	r2, r0
 800e4a0:	0021      	movs	r1, r4
 800e4a2:	9801      	ldr	r0, [sp, #4]
 800e4a4:	f006 fa6c 	bl	8014980 <strncmp>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d00e      	beq.n	800e4ca <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4ac:	686d      	ldr	r5, [r5, #4]
 800e4ae:	603d      	str	r5, [r7, #0]
 800e4b0:	2d00      	cmp	r5, #0
 800e4b2:	d012      	beq.n	800e4da <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e4b4:	682e      	ldr	r6, [r5, #0]
 800e4b6:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e4b8:	0020      	movs	r0, r4
 800e4ba:	f7f1 fe2d 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e4be:	9b01      	ldr	r3, [sp, #4]
 800e4c0:	5c1b      	ldrb	r3, [r3, r0]
 800e4c2:	4652      	mov	r2, sl
 800e4c4:	4393      	bics	r3, r2
 800e4c6:	d1f1      	bne.n	800e4ac <FreeRTOS_CLIProcessCommand+0x50>
 800e4c8:	e7e9      	b.n	800e49e <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e4ca:	200c      	movs	r0, #12
 800e4cc:	5630      	ldrsb	r0, [r6, r0]
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	da0a      	bge.n	800e4e8 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e4d2:	4b1d      	ldr	r3, [pc, #116]	; (800e548 <FreeRTOS_CLIProcessCommand+0xec>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1cb      	bne.n	800e472 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e4da:	9a03      	ldr	r2, [sp, #12]
 800e4dc:	491c      	ldr	r1, [pc, #112]	; (800e550 <FreeRTOS_CLIProcessCommand+0xf4>)
 800e4de:	9802      	ldr	r0, [sp, #8]
 800e4e0:	f006 fa5f 	bl	80149a2 <strncpy>
		xReturn = pdFALSE;
 800e4e4:	2000      	movs	r0, #0
	return xReturn;
 800e4e6:	e7cf      	b.n	800e488 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e4e8:	9a01      	ldr	r2, [sp, #4]
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	56d3      	ldrsb	r3, [r2, r3]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d027      	beq.n	800e542 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800e4f2:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e4f4:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e4f6:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800e4f8:	2501      	movs	r5, #1
 800e4fa:	e009      	b.n	800e510 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800e4fc:	2901      	cmp	r1, #1
 800e4fe:	d002      	beq.n	800e506 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800e500:	3401      	adds	r4, #1
 800e502:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e504:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800e506:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e508:	2300      	movs	r3, #0
 800e50a:	56d3      	ldrsb	r3, [r2, r3]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d003      	beq.n	800e518 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800e510:	2b20      	cmp	r3, #32
 800e512:	d0f3      	beq.n	800e4fc <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800e514:	0031      	movs	r1, r6
 800e516:	e7f6      	b.n	800e506 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e518:	2901      	cmp	r1, #1
 800e51a:	d00f      	beq.n	800e53c <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <FreeRTOS_CLIProcessCommand+0xec>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d0da      	beq.n	800e4da <FreeRTOS_CLIProcessCommand+0x7e>
 800e524:	42a0      	cmp	r0, r4
 800e526:	d0a4      	beq.n	800e472 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e528:	9a03      	ldr	r2, [sp, #12]
 800e52a:	490a      	ldr	r1, [pc, #40]	; (800e554 <FreeRTOS_CLIProcessCommand+0xf8>)
 800e52c:	9802      	ldr	r0, [sp, #8]
 800e52e:	f006 fa38 	bl	80149a2 <strncpy>
		pxCommand = NULL;
 800e532:	4b05      	ldr	r3, [pc, #20]	; (800e548 <FreeRTOS_CLIProcessCommand+0xec>)
 800e534:	2200      	movs	r2, #0
 800e536:	601a      	str	r2, [r3, #0]
 800e538:	2000      	movs	r0, #0
 800e53a:	e7a5      	b.n	800e488 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e53c:	3c01      	subs	r4, #1
 800e53e:	b264      	sxtb	r4, r4
 800e540:	e7ec      	b.n	800e51c <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800e542:	2400      	movs	r4, #0
 800e544:	e7ea      	b.n	800e51c <FreeRTOS_CLIProcessCommand+0xc0>
 800e546:	46c0      	nop			; (mov r8, r8)
 800e548:	200014e4 	.word	0x200014e4
 800e54c:	200000a0 	.word	0x200000a0
 800e550:	0801a8a0 	.word	0x0801a8a0
 800e554:	0801a848 	.word	0x0801a848

0800e558 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e558:	4800      	ldr	r0, [pc, #0]	; (800e55c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e55a:	4770      	bx	lr
 800e55c:	2000127c 	.word	0x2000127c

0800e560 <FreeRTOS_CLIGetParameter>:
{
 800e560:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e566:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e568:	2900      	cmp	r1, #0
 800e56a:	d10b      	bne.n	800e584 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800e56c:	2000      	movs	r0, #0
 800e56e:	e02a      	b.n	800e5c6 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800e570:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e572:	2300      	movs	r3, #0
 800e574:	56c3      	ldrsb	r3, [r0, r3]
 800e576:	2b20      	cmp	r3, #32
 800e578:	d0fa      	beq.n	800e570 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d022      	beq.n	800e5c4 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800e57e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e580:	42a1      	cmp	r1, r4
 800e582:	d00d      	beq.n	800e5a0 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e584:	2300      	movs	r3, #0
 800e586:	56c3      	ldrsb	r3, [r0, r3]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d01f      	beq.n	800e5cc <FreeRTOS_CLIGetParameter+0x6c>
 800e58c:	2b20      	cmp	r3, #32
 800e58e:	d0ef      	beq.n	800e570 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800e590:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e592:	2300      	movs	r3, #0
 800e594:	56c3      	ldrsb	r3, [r0, r3]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d018      	beq.n	800e5cc <FreeRTOS_CLIGetParameter+0x6c>
 800e59a:	2b20      	cmp	r3, #32
 800e59c:	d1f8      	bne.n	800e590 <FreeRTOS_CLIGetParameter+0x30>
 800e59e:	e7e7      	b.n	800e570 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5a0:	7803      	ldrb	r3, [r0, #0]
 800e5a2:	2120      	movs	r1, #32
 800e5a4:	438b      	bics	r3, r1
 800e5a6:	d00f      	beq.n	800e5c8 <FreeRTOS_CLIGetParameter+0x68>
 800e5a8:	0004      	movs	r4, r0
 800e5aa:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800e5ac:	6813      	ldr	r3, [r2, #0]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e5b2:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5b4:	7821      	ldrb	r1, [r4, #0]
 800e5b6:	43a9      	bics	r1, r5
 800e5b8:	d1f8      	bne.n	800e5ac <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800e5ba:	1e5a      	subs	r2, r3, #1
 800e5bc:	4193      	sbcs	r3, r2
 800e5be:	425b      	negs	r3, r3
 800e5c0:	4018      	ands	r0, r3
 800e5c2:	e000      	b.n	800e5c6 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800e5c4:	2000      	movs	r0, #0
}
 800e5c6:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800e5c8:	2000      	movs	r0, #0
 800e5ca:	e7fc      	b.n	800e5c6 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	56c3      	ldrsb	r3, [r0, r3]
 800e5d0:	e7d3      	b.n	800e57a <FreeRTOS_CLIGetParameter+0x1a>
	...

0800e5d4 <prvHelpCommand>:
{
 800e5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	0004      	movs	r4, r0
 800e5da:	000d      	movs	r5, r1
 800e5dc:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e5e2:	aa01      	add	r2, sp, #4
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	f7ff ffbb 	bl	800e560 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	d027      	beq.n	800e63e <prvHelpCommand+0x6a>
 800e5ee:	2206      	movs	r2, #6
 800e5f0:	4930      	ldr	r1, [pc, #192]	; (800e6b4 <prvHelpCommand+0xe0>)
 800e5f2:	f006 f9c5 	bl	8014980 <strncmp>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d149      	bne.n	800e68e <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800e5fa:	4b2f      	ldr	r3, [pc, #188]	; (800e6b8 <prvHelpCommand+0xe4>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	2b07      	cmp	r3, #7
 800e600:	d012      	beq.n	800e628 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e602:	1c5f      	adds	r7, r3, #1
 800e604:	b2ff      	uxtb	r7, r7
 800e606:	4a2c      	ldr	r2, [pc, #176]	; (800e6b8 <prvHelpCommand+0xe4>)
 800e608:	7017      	strb	r7, [r2, #0]
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4a2b      	ldr	r2, [pc, #172]	; (800e6bc <prvHelpCommand+0xe8>)
 800e60e:	5899      	ldr	r1, [r3, r2]
 800e610:	002a      	movs	r2, r5
 800e612:	0020      	movs	r0, r4
 800e614:	f006 f9c5 	bl	80149a2 <strncpy>
			xReturn = pdTRUE;
 800e618:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e61a:	2f07      	cmp	r7, #7
 800e61c:	d137      	bne.n	800e68e <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800e61e:	4b26      	ldr	r3, [pc, #152]	; (800e6b8 <prvHelpCommand+0xe4>)
 800e620:	2200      	movs	r2, #0
 800e622:	701a      	strb	r2, [r3, #0]
 800e624:	2600      	movs	r6, #0
 800e626:	e032      	b.n	800e68e <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e628:	4b23      	ldr	r3, [pc, #140]	; (800e6b8 <prvHelpCommand+0xe4>)
 800e62a:	2201      	movs	r2, #1
 800e62c:	701a      	strb	r2, [r3, #0]
 800e62e:	4b23      	ldr	r3, [pc, #140]	; (800e6bc <prvHelpCommand+0xe8>)
 800e630:	6819      	ldr	r1, [r3, #0]
 800e632:	002a      	movs	r2, r5
 800e634:	0020      	movs	r0, r4
 800e636:	f006 f9b4 	bl	80149a2 <strncpy>
			xReturn = pdTRUE;
 800e63a:	2601      	movs	r6, #1
 800e63c:	e027      	b.n	800e68e <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800e63e:	4b20      	ldr	r3, [pc, #128]	; (800e6c0 <prvHelpCommand+0xec>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d026      	beq.n	800e694 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800e646:	4b1f      	ldr	r3, [pc, #124]	; (800e6c4 <prvHelpCommand+0xf0>)
 800e648:	781a      	ldrb	r2, [r3, #0]
 800e64a:	4b1f      	ldr	r3, [pc, #124]	; (800e6c8 <prvHelpCommand+0xf4>)
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d927      	bls.n	800e6a2 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e652:	002a      	movs	r2, r5
 800e654:	3a08      	subs	r2, #8
 800e656:	4b1a      	ldr	r3, [pc, #104]	; (800e6c0 <prvHelpCommand+0xec>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6859      	ldr	r1, [r3, #4]
 800e65e:	0020      	movs	r0, r4
 800e660:	3008      	adds	r0, #8
 800e662:	f006 f99e 	bl	80149a2 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e666:	1c60      	adds	r0, r4, #1
 800e668:	4918      	ldr	r1, [pc, #96]	; (800e6cc <prvHelpCommand+0xf8>)
 800e66a:	f006 f981 	bl	8014970 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e66e:	2328      	movs	r3, #40	; 0x28
 800e670:	7023      	strb	r3, [r4, #0]
 800e672:	3301      	adds	r3, #1
 800e674:	71a3      	strb	r3, [r4, #6]
 800e676:	3b09      	subs	r3, #9
 800e678:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800e67a:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <prvHelpCommand+0xec>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	6856      	ldr	r6, [r2, #4]
 800e680:	601e      	str	r6, [r3, #0]
		counter++;
 800e682:	4a10      	ldr	r2, [pc, #64]	; (800e6c4 <prvHelpCommand+0xf0>)
 800e684:	7813      	ldrb	r3, [r2, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800e68a:	1e73      	subs	r3, r6, #1
 800e68c:	419e      	sbcs	r6, r3
}
 800e68e:	0030      	movs	r0, r6
 800e690:	b003      	add	sp, #12
 800e692:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e694:	4b0a      	ldr	r3, [pc, #40]	; (800e6c0 <prvHelpCommand+0xec>)
 800e696:	4a0e      	ldr	r2, [pc, #56]	; (800e6d0 <prvHelpCommand+0xfc>)
 800e698:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e69a:	4b0a      	ldr	r3, [pc, #40]	; (800e6c4 <prvHelpCommand+0xf0>)
 800e69c:	2201      	movs	r2, #1
 800e69e:	701a      	strb	r2, [r3, #0]
 800e6a0:	e7d1      	b.n	800e646 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e6a2:	4b07      	ldr	r3, [pc, #28]	; (800e6c0 <prvHelpCommand+0xec>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6859      	ldr	r1, [r3, #4]
 800e6aa:	002a      	movs	r2, r5
 800e6ac:	0020      	movs	r0, r4
 800e6ae:	f006 f978 	bl	80149a2 <strncpy>
 800e6b2:	e7e2      	b.n	800e67a <prvHelpCommand+0xa6>
 800e6b4:	08018600 	.word	0x08018600
 800e6b8:	200014ec 	.word	0x200014ec
 800e6bc:	20000054 	.word	0x20000054
 800e6c0:	200014e8 	.word	0x200014e8
 800e6c4:	200014e0 	.word	0x200014e0
 800e6c8:	200060b0 	.word	0x200060b0
 800e6cc:	08017c24 	.word	0x08017c24
 800e6d0:	200000a0 	.word	0x200000a0

0800e6d4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6d4:	0003      	movs	r3, r0
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e6da:	2201      	movs	r2, #1
 800e6dc:	4252      	negs	r2, r2
 800e6de:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6e0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6e2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6e8:	4770      	bx	lr

0800e6ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6ee:	4770      	bx	lr

0800e6f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6f0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6f2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6f4:	689a      	ldr	r2, [r3, #8]
 800e6f6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6f8:	689a      	ldr	r2, [r3, #8]
 800e6fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e6fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e6fe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e700:	6803      	ldr	r3, [r0, #0]
 800e702:	3301      	adds	r3, #1
 800e704:	6003      	str	r3, [r0, #0]
}
 800e706:	4770      	bx	lr

0800e708 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e708:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e70a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e70c:	0002      	movs	r2, r0
 800e70e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e710:	1c63      	adds	r3, r4, #1
 800e712:	d102      	bne.n	800e71a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e714:	6902      	ldr	r2, [r0, #16]
 800e716:	e004      	b.n	800e722 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e718:	001a      	movs	r2, r3
 800e71a:	6853      	ldr	r3, [r2, #4]
 800e71c:	681d      	ldr	r5, [r3, #0]
 800e71e:	42a5      	cmp	r5, r4
 800e720:	d9fa      	bls.n	800e718 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e722:	6853      	ldr	r3, [r2, #4]
 800e724:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e726:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e728:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e72a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e72c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e72e:	6803      	ldr	r3, [r0, #0]
 800e730:	3301      	adds	r3, #1
 800e732:	6003      	str	r3, [r0, #0]
}
 800e734:	bd30      	pop	{r4, r5, pc}

0800e736 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e736:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e738:	6842      	ldr	r2, [r0, #4]
 800e73a:	6881      	ldr	r1, [r0, #8]
 800e73c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e73e:	6882      	ldr	r2, [r0, #8]
 800e740:	6841      	ldr	r1, [r0, #4]
 800e742:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	4282      	cmp	r2, r0
 800e748:	d005      	beq.n	800e756 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e74a:	2200      	movs	r2, #0
 800e74c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	1e50      	subs	r0, r2, #1
 800e752:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e754:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e756:	6882      	ldr	r2, [r0, #8]
 800e758:	605a      	str	r2, [r3, #4]
 800e75a:	e7f6      	b.n	800e74a <uxListRemove+0x14>

0800e75c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e75c:	b570      	push	{r4, r5, r6, lr}
 800e75e:	0004      	movs	r4, r0
 800e760:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e762:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e764:	2a00      	cmp	r2, #0
 800e766:	d10d      	bne.n	800e784 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800e768:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d003      	beq.n	800e778 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e772:	3301      	adds	r3, #1
 800e774:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e776:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e778:	6860      	ldr	r0, [r4, #4]
 800e77a:	f001 f8ab 	bl	800f8d4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	6063      	str	r3, [r4, #4]
 800e782:	e7f5      	b.n	800e770 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e784:	2d00      	cmp	r5, #0
 800e786:	d10e      	bne.n	800e7a6 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e788:	6880      	ldr	r0, [r0, #8]
 800e78a:	f005 f94e 	bl	8013a2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e78e:	68a3      	ldr	r3, [r4, #8]
 800e790:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e792:	4694      	mov	ip, r2
 800e794:	4463      	add	r3, ip
 800e796:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e798:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e79a:	6862      	ldr	r2, [r4, #4]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d3e7      	bcc.n	800e770 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7a0:	6823      	ldr	r3, [r4, #0]
 800e7a2:	60a3      	str	r3, [r4, #8]
 800e7a4:	e7e4      	b.n	800e770 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7a6:	68c0      	ldr	r0, [r0, #12]
 800e7a8:	f005 f93f 	bl	8013a2a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e7ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7ae:	425a      	negs	r2, r3
 800e7b0:	68e3      	ldr	r3, [r4, #12]
 800e7b2:	189b      	adds	r3, r3, r2
 800e7b4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7b6:	6821      	ldr	r1, [r4, #0]
 800e7b8:	428b      	cmp	r3, r1
 800e7ba:	d203      	bcs.n	800e7c4 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e7bc:	6863      	ldr	r3, [r4, #4]
 800e7be:	469c      	mov	ip, r3
 800e7c0:	4462      	add	r2, ip
 800e7c2:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800e7c4:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800e7c6:	2d02      	cmp	r5, #2
 800e7c8:	d1d2      	bne.n	800e770 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d0cf      	beq.n	800e770 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800e7d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7d2:	3b01      	subs	r3, #1
 800e7d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7d6:	e7cb      	b.n	800e770 <prvCopyDataToQueue+0x14>

0800e7d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7d8:	b510      	push	{r4, lr}
 800e7da:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e7de:	2a00      	cmp	r2, #0
 800e7e0:	d00b      	beq.n	800e7fa <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e7e2:	68c3      	ldr	r3, [r0, #12]
 800e7e4:	189b      	adds	r3, r3, r2
 800e7e6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e7e8:	6841      	ldr	r1, [r0, #4]
 800e7ea:	428b      	cmp	r3, r1
 800e7ec:	d301      	bcc.n	800e7f2 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e7ee:	6803      	ldr	r3, [r0, #0]
 800e7f0:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e7f2:	68c1      	ldr	r1, [r0, #12]
 800e7f4:	0020      	movs	r0, r4
 800e7f6:	f005 f918 	bl	8013a2a <memcpy>
	}
}
 800e7fa:	bd10      	pop	{r4, pc}

0800e7fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e800:	f001 fc4e 	bl	80100a0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e806:	2b00      	cmp	r3, #0
 800e808:	dd04      	ble.n	800e814 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e80a:	0025      	movs	r5, r4
 800e80c:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e810:	2b00      	cmp	r3, #0
 800e812:	d11f      	bne.n	800e854 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e814:	2301      	movs	r3, #1
 800e816:	425b      	negs	r3, r3
 800e818:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e81a:	f001 fc4d 	bl	80100b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e81e:	f001 fc3f 	bl	80100a0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e822:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e824:	2b00      	cmp	r3, #0
 800e826:	dd04      	ble.n	800e832 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e828:	0025      	movs	r5, r4
 800e82a:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e82c:	6923      	ldr	r3, [r4, #16]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d121      	bne.n	800e876 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e832:	2301      	movs	r3, #1
 800e834:	425b      	negs	r3, r3
 800e836:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e838:	f001 fc3e 	bl	80100b8 <vPortExitCritical>
}
 800e83c:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800e83e:	f000 fff5 	bl	800f82c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e842:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e844:	3b01      	subs	r3, #1
 800e846:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e848:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	dde2      	ble.n	800e814 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e850:	2b00      	cmp	r3, #0
 800e852:	d0df      	beq.n	800e814 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e854:	0028      	movs	r0, r5
 800e856:	f000 ff67 	bl	800f728 <xTaskRemoveFromEventList>
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d0f1      	beq.n	800e842 <prvUnlockQueue+0x46>
 800e85e:	e7ee      	b.n	800e83e <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800e860:	f000 ffe4 	bl	800f82c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e864:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e866:	3b01      	subs	r3, #1
 800e868:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e86a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	dde0      	ble.n	800e832 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e870:	6923      	ldr	r3, [r4, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d0dd      	beq.n	800e832 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e876:	0028      	movs	r0, r5
 800e878:	f000 ff56 	bl	800f728 <xTaskRemoveFromEventList>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d0f1      	beq.n	800e864 <prvUnlockQueue+0x68>
 800e880:	e7ee      	b.n	800e860 <prvUnlockQueue+0x64>

0800e882 <xQueueGenericReset>:
{
 800e882:	b570      	push	{r4, r5, r6, lr}
 800e884:	0004      	movs	r4, r0
 800e886:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800e888:	2800      	cmp	r0, #0
 800e88a:	d101      	bne.n	800e890 <xQueueGenericReset+0xe>
 800e88c:	b672      	cpsid	i
 800e88e:	e7fe      	b.n	800e88e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800e890:	f001 fc06 	bl	80100a0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e894:	6822      	ldr	r2, [r4, #0]
 800e896:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e898:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e89a:	434b      	muls	r3, r1
 800e89c:	18d0      	adds	r0, r2, r3
 800e89e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8a0:	2000      	movs	r0, #0
 800e8a2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8a4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e8a6:	1a5b      	subs	r3, r3, r1
 800e8a8:	18d3      	adds	r3, r2, r3
 800e8aa:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	425b      	negs	r3, r3
 800e8b0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e8b2:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e8b4:	2d00      	cmp	r5, #0
 800e8b6:	d10f      	bne.n	800e8d8 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d103      	bne.n	800e8c6 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800e8be:	f001 fbfb 	bl	80100b8 <vPortExitCritical>
}
 800e8c2:	2001      	movs	r0, #1
 800e8c4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e8c6:	0020      	movs	r0, r4
 800e8c8:	3010      	adds	r0, #16
 800e8ca:	f000 ff2d 	bl	800f728 <xTaskRemoveFromEventList>
 800e8ce:	2801      	cmp	r0, #1
 800e8d0:	d1f5      	bne.n	800e8be <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800e8d2:	f001 fbd9 	bl	8010088 <vPortYield>
 800e8d6:	e7f2      	b.n	800e8be <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8d8:	0020      	movs	r0, r4
 800e8da:	3010      	adds	r0, #16
 800e8dc:	f7ff fefa 	bl	800e6d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e8e0:	0020      	movs	r0, r4
 800e8e2:	3024      	adds	r0, #36	; 0x24
 800e8e4:	f7ff fef6 	bl	800e6d4 <vListInitialise>
 800e8e8:	e7e9      	b.n	800e8be <xQueueGenericReset+0x3c>

0800e8ea <xQueueGenericCreate>:
{
 800e8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ec:	0005      	movs	r5, r0
 800e8ee:	000e      	movs	r6, r1
 800e8f0:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d101      	bne.n	800e8fa <xQueueGenericCreate+0x10>
 800e8f6:	b672      	cpsid	i
 800e8f8:	e7fe      	b.n	800e8f8 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e8fa:	2900      	cmp	r1, #0
 800e8fc:	d00c      	beq.n	800e918 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8fe:	0008      	movs	r0, r1
 800e900:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e902:	3055      	adds	r0, #85	; 0x55
 800e904:	f001 fc4e 	bl	80101a4 <pvPortMalloc>
 800e908:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e90a:	d101      	bne.n	800e910 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800e90c:	b672      	cpsid	i
 800e90e:	e7fe      	b.n	800e90e <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e910:	0003      	movs	r3, r0
 800e912:	3354      	adds	r3, #84	; 0x54
 800e914:	6003      	str	r3, [r0, #0]
 800e916:	e005      	b.n	800e924 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e918:	2054      	movs	r0, #84	; 0x54
 800e91a:	f001 fc43 	bl	80101a4 <pvPortMalloc>
 800e91e:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e920:	d0f4      	beq.n	800e90c <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e922:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e924:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e926:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e928:	2101      	movs	r1, #1
 800e92a:	0020      	movs	r0, r4
 800e92c:	f7ff ffa9 	bl	800e882 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e930:	2350      	movs	r3, #80	; 0x50
 800e932:	54e7      	strb	r7, [r4, r3]
}
 800e934:	0020      	movs	r0, r4
 800e936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e938 <xQueueCreateCountingSemaphore>:
	{
 800e938:	b510      	push	{r4, lr}
 800e93a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e93c:	2800      	cmp	r0, #0
 800e93e:	d101      	bne.n	800e944 <xQueueCreateCountingSemaphore+0xc>
 800e940:	b672      	cpsid	i
 800e942:	e7fe      	b.n	800e942 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e944:	4288      	cmp	r0, r1
 800e946:	d201      	bcs.n	800e94c <xQueueCreateCountingSemaphore+0x14>
 800e948:	b672      	cpsid	i
 800e94a:	e7fe      	b.n	800e94a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e94c:	2202      	movs	r2, #2
 800e94e:	2100      	movs	r1, #0
 800e950:	f7ff ffcb 	bl	800e8ea <xQueueGenericCreate>
		if( xHandle != NULL )
 800e954:	2800      	cmp	r0, #0
 800e956:	d001      	beq.n	800e95c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e958:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e95a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800e95c:	b672      	cpsid	i
 800e95e:	e7fe      	b.n	800e95e <xQueueCreateCountingSemaphore+0x26>

0800e960 <xQueueGenericSend>:
{
 800e960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e962:	46ce      	mov	lr, r9
 800e964:	b500      	push	{lr}
 800e966:	b084      	sub	sp, #16
 800e968:	0004      	movs	r4, r0
 800e96a:	9100      	str	r1, [sp, #0]
 800e96c:	9201      	str	r2, [sp, #4]
 800e96e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800e970:	2800      	cmp	r0, #0
 800e972:	d007      	beq.n	800e984 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e974:	9b00      	ldr	r3, [sp, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d106      	bne.n	800e988 <xQueueGenericSend+0x28>
 800e97a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d003      	beq.n	800e988 <xQueueGenericSend+0x28>
 800e980:	b672      	cpsid	i
 800e982:	e7fe      	b.n	800e982 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800e984:	b672      	cpsid	i
 800e986:	e7fe      	b.n	800e986 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e988:	2d02      	cmp	r5, #2
 800e98a:	d104      	bne.n	800e996 <xQueueGenericSend+0x36>
 800e98c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d001      	beq.n	800e996 <xQueueGenericSend+0x36>
 800e992:	b672      	cpsid	i
 800e994:	e7fe      	b.n	800e994 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e996:	f000 ff4f 	bl	800f838 <xTaskGetSchedulerState>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	d104      	bne.n	800e9a8 <xQueueGenericSend+0x48>
 800e99e:	9b01      	ldr	r3, [sp, #4]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d004      	beq.n	800e9ae <xQueueGenericSend+0x4e>
 800e9a4:	b672      	cpsid	i
 800e9a6:	e7fe      	b.n	800e9a6 <xQueueGenericSend+0x46>
 800e9a8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800e9aa:	2700      	movs	r7, #0
 800e9ac:	e02f      	b.n	800ea0e <xQueueGenericSend+0xae>
 800e9ae:	2600      	movs	r6, #0
 800e9b0:	e7fb      	b.n	800e9aa <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9b2:	002a      	movs	r2, r5
 800e9b4:	9900      	ldr	r1, [sp, #0]
 800e9b6:	0020      	movs	r0, r4
 800e9b8:	f7ff fed0 	bl	800e75c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d104      	bne.n	800e9cc <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d00a      	beq.n	800e9dc <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800e9c6:	f001 fb5f 	bl	8010088 <vPortYield>
 800e9ca:	e007      	b.n	800e9dc <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e9cc:	0020      	movs	r0, r4
 800e9ce:	3024      	adds	r0, #36	; 0x24
 800e9d0:	f000 feaa 	bl	800f728 <xTaskRemoveFromEventList>
 800e9d4:	2801      	cmp	r0, #1
 800e9d6:	d101      	bne.n	800e9dc <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800e9d8:	f001 fb56 	bl	8010088 <vPortYield>
				taskEXIT_CRITICAL();
 800e9dc:	f001 fb6c 	bl	80100b8 <vPortExitCritical>
				return pdPASS;
 800e9e0:	2001      	movs	r0, #1
}
 800e9e2:	b004      	add	sp, #16
 800e9e4:	bc04      	pop	{r2}
 800e9e6:	4691      	mov	r9, r2
 800e9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800e9ea:	f001 fb65 	bl	80100b8 <vPortExitCritical>
					return errQUEUE_FULL;
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	e7f7      	b.n	800e9e2 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800e9f2:	a802      	add	r0, sp, #8
 800e9f4:	f000 fed8 	bl	800f7a8 <vTaskSetTimeOutState>
 800e9f8:	e016      	b.n	800ea28 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800e9fa:	6467      	str	r7, [r4, #68]	; 0x44
 800e9fc:	e01d      	b.n	800ea3a <xQueueGenericSend+0xda>
 800e9fe:	64a7      	str	r7, [r4, #72]	; 0x48
 800ea00:	e01e      	b.n	800ea40 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800ea02:	0020      	movs	r0, r4
 800ea04:	f7ff fefa 	bl	800e7fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea08:	f000 fcb0 	bl	800f36c <xTaskResumeAll>
 800ea0c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ea0e:	f001 fb47 	bl	80100a0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d3cb      	bcc.n	800e9b2 <xQueueGenericSend+0x52>
 800ea1a:	2d02      	cmp	r5, #2
 800ea1c:	d0c9      	beq.n	800e9b2 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea1e:	9b01      	ldr	r3, [sp, #4]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d0e2      	beq.n	800e9ea <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800ea24:	2e00      	cmp	r6, #0
 800ea26:	d0e4      	beq.n	800e9f2 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800ea28:	f001 fb46 	bl	80100b8 <vPortExitCritical>
		vTaskSuspendAll();
 800ea2c:	f000 fbfe 	bl	800f22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea30:	f001 fb36 	bl	80100a0 <vPortEnterCritical>
 800ea34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea36:	3301      	adds	r3, #1
 800ea38:	d0df      	beq.n	800e9fa <xQueueGenericSend+0x9a>
 800ea3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	d0de      	beq.n	800e9fe <xQueueGenericSend+0x9e>
 800ea40:	f001 fb3a 	bl	80100b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea44:	a901      	add	r1, sp, #4
 800ea46:	a802      	add	r0, sp, #8
 800ea48:	f000 febe 	bl	800f7c8 <xTaskCheckForTimeOut>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d117      	bne.n	800ea80 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea50:	f001 fb26 	bl	80100a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ea56:	4699      	mov	r9, r3
 800ea58:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ea5a:	f001 fb2d 	bl	80100b8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ea5e:	45b1      	cmp	r9, r6
 800ea60:	d1cf      	bne.n	800ea02 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ea62:	0020      	movs	r0, r4
 800ea64:	3010      	adds	r0, #16
 800ea66:	9901      	ldr	r1, [sp, #4]
 800ea68:	f000 fe20 	bl	800f6ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea6c:	0020      	movs	r0, r4
 800ea6e:	f7ff fec5 	bl	800e7fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea72:	f000 fc7b 	bl	800f36c <xTaskResumeAll>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d1c8      	bne.n	800ea0c <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800ea7a:	f001 fb05 	bl	8010088 <vPortYield>
 800ea7e:	e7c5      	b.n	800ea0c <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800ea80:	0020      	movs	r0, r4
 800ea82:	f7ff febb 	bl	800e7fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea86:	f000 fc71 	bl	800f36c <xTaskResumeAll>
			return errQUEUE_FULL;
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	e7a9      	b.n	800e9e2 <xQueueGenericSend+0x82>

0800ea8e <xQueueGenericSendFromISR>:
{
 800ea8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea90:	b083      	sub	sp, #12
 800ea92:	0004      	movs	r4, r0
 800ea94:	000d      	movs	r5, r1
 800ea96:	0016      	movs	r6, r2
 800ea98:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d006      	beq.n	800eaac <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea9e:	2900      	cmp	r1, #0
 800eaa0:	d106      	bne.n	800eab0 <xQueueGenericSendFromISR+0x22>
 800eaa2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <xQueueGenericSendFromISR+0x22>
 800eaa8:	b672      	cpsid	i
 800eaaa:	e7fe      	b.n	800eaaa <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800eaac:	b672      	cpsid	i
 800eaae:	e7fe      	b.n	800eaae <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eab0:	2f02      	cmp	r7, #2
 800eab2:	d12a      	bne.n	800eb0a <xQueueGenericSendFromISR+0x7c>
 800eab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d011      	beq.n	800eade <xQueueGenericSendFromISR+0x50>
 800eaba:	b672      	cpsid	i
 800eabc:	e7fe      	b.n	800eabc <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800eabe:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d01b      	beq.n	800eafe <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eac6:	0020      	movs	r0, r4
 800eac8:	3024      	adds	r0, #36	; 0x24
 800eaca:	f000 fe2d 	bl	800f728 <xTaskRemoveFromEventList>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d015      	beq.n	800eafe <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800ead2:	2e00      	cmp	r6, #0
 800ead4:	d001      	beq.n	800eada <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ead6:	6035      	str	r5, [r6, #0]
 800ead8:	e011      	b.n	800eafe <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800eada:	2501      	movs	r5, #1
 800eadc:	e00f      	b.n	800eafe <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eade:	f001 fafb 	bl	80100d8 <ulSetInterruptMaskFromISR>
 800eae2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eae4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eae6:	003a      	movs	r2, r7
 800eae8:	0029      	movs	r1, r5
 800eaea:	0020      	movs	r0, r4
 800eaec:	f7ff fe36 	bl	800e75c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800eaf0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	d0e3      	beq.n	800eabe <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800eaf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eaf8:	3301      	adds	r3, #1
 800eafa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eafc:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eafe:	9801      	ldr	r0, [sp, #4]
 800eb00:	f001 faef 	bl	80100e2 <vClearInterruptMaskFromISR>
}
 800eb04:	0028      	movs	r0, r5
 800eb06:	b003      	add	sp, #12
 800eb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb0a:	f001 fae5 	bl	80100d8 <ulSetInterruptMaskFromISR>
 800eb0e:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d3e6      	bcc.n	800eae6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800eb18:	2500      	movs	r5, #0
 800eb1a:	e7f0      	b.n	800eafe <xQueueGenericSendFromISR+0x70>

0800eb1c <xQueueGiveFromISR>:
{
 800eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1e:	0004      	movs	r4, r0
 800eb20:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800eb22:	2800      	cmp	r0, #0
 800eb24:	d004      	beq.n	800eb30 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800eb26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d003      	beq.n	800eb34 <xQueueGiveFromISR+0x18>
 800eb2c:	b672      	cpsid	i
 800eb2e:	e7fe      	b.n	800eb2e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800eb30:	b672      	cpsid	i
 800eb32:	e7fe      	b.n	800eb32 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800eb34:	6803      	ldr	r3, [r0, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d01f      	beq.n	800eb7a <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb3a:	f001 facd 	bl	80100d8 <ulSetInterruptMaskFromISR>
 800eb3e:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800eb40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800eb42:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800eb44:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d212      	bcs.n	800eb70 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800eb4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800eb50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb52:	3301      	adds	r3, #1
 800eb54:	d116      	bne.n	800eb84 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800eb56:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d008      	beq.n	800eb70 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb5e:	0020      	movs	r0, r4
 800eb60:	3024      	adds	r0, #36	; 0x24
 800eb62:	f000 fde1 	bl	800f728 <xTaskRemoveFromEventList>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d002      	beq.n	800eb70 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800eb6a:	2f00      	cmp	r7, #0
 800eb6c:	d00f      	beq.n	800eb8e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb6e:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eb70:	0030      	movs	r0, r6
 800eb72:	f001 fab6 	bl	80100e2 <vClearInterruptMaskFromISR>
}
 800eb76:	0028      	movs	r0, r5
 800eb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800eb7a:	6843      	ldr	r3, [r0, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d0dc      	beq.n	800eb3a <xQueueGiveFromISR+0x1e>
 800eb80:	b672      	cpsid	i
 800eb82:	e7fe      	b.n	800eb82 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800eb84:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb86:	3301      	adds	r3, #1
 800eb88:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eb8a:	2501      	movs	r5, #1
 800eb8c:	e7f0      	b.n	800eb70 <xQueueGiveFromISR+0x54>
 800eb8e:	2501      	movs	r5, #1
 800eb90:	e7ee      	b.n	800eb70 <xQueueGiveFromISR+0x54>

0800eb92 <xQueueGenericReceive>:
{
 800eb92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb94:	46c6      	mov	lr, r8
 800eb96:	b500      	push	{lr}
 800eb98:	b084      	sub	sp, #16
 800eb9a:	0004      	movs	r4, r0
 800eb9c:	000e      	movs	r6, r1
 800eb9e:	9201      	str	r2, [sp, #4]
 800eba0:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d006      	beq.n	800ebb4 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eba6:	2900      	cmp	r1, #0
 800eba8:	d106      	bne.n	800ebb8 <xQueueGenericReceive+0x26>
 800ebaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <xQueueGenericReceive+0x26>
 800ebb0:	b672      	cpsid	i
 800ebb2:	e7fe      	b.n	800ebb2 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800ebb4:	b672      	cpsid	i
 800ebb6:	e7fe      	b.n	800ebb6 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ebb8:	f000 fe3e 	bl	800f838 <xTaskGetSchedulerState>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d104      	bne.n	800ebca <xQueueGenericReceive+0x38>
 800ebc0:	9b01      	ldr	r3, [sp, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d004      	beq.n	800ebd0 <xQueueGenericReceive+0x3e>
 800ebc6:	b672      	cpsid	i
 800ebc8:	e7fe      	b.n	800ebc8 <xQueueGenericReceive+0x36>
 800ebca:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ebcc:	2700      	movs	r7, #0
 800ebce:	e04b      	b.n	800ec68 <xQueueGenericReceive+0xd6>
 800ebd0:	2500      	movs	r5, #0
 800ebd2:	e7fb      	b.n	800ebcc <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800ebd4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ebd6:	0031      	movs	r1, r6
 800ebd8:	0020      	movs	r0, r4
 800ebda:	f7ff fdfd 	bl	800e7d8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800ebde:	4643      	mov	r3, r8
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d11a      	bne.n	800ec1a <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800ebe4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ebf0:	f000 ff62 	bl	800fab8 <pvTaskIncrementMutexHeldCount>
 800ebf4:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebf6:	6923      	ldr	r3, [r4, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d007      	beq.n	800ec0c <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ebfc:	0020      	movs	r0, r4
 800ebfe:	3010      	adds	r0, #16
 800ec00:	f000 fd92 	bl	800f728 <xTaskRemoveFromEventList>
 800ec04:	2801      	cmp	r0, #1
 800ec06:	d101      	bne.n	800ec0c <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800ec08:	f001 fa3e 	bl	8010088 <vPortYield>
				taskEXIT_CRITICAL();
 800ec0c:	f001 fa54 	bl	80100b8 <vPortExitCritical>
				return pdPASS;
 800ec10:	2001      	movs	r0, #1
}
 800ec12:	b004      	add	sp, #16
 800ec14:	bc04      	pop	{r2}
 800ec16:	4690      	mov	r8, r2
 800ec18:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ec1a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d0f4      	beq.n	800ec0c <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec22:	0020      	movs	r0, r4
 800ec24:	3024      	adds	r0, #36	; 0x24
 800ec26:	f000 fd7f 	bl	800f728 <xTaskRemoveFromEventList>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d0ee      	beq.n	800ec0c <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800ec2e:	f001 fa2b 	bl	8010088 <vPortYield>
 800ec32:	e7eb      	b.n	800ec0c <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800ec34:	f001 fa40 	bl	80100b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ec38:	2000      	movs	r0, #0
 800ec3a:	e7ea      	b.n	800ec12 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800ec3c:	a802      	add	r0, sp, #8
 800ec3e:	f000 fdb3 	bl	800f7a8 <vTaskSetTimeOutState>
 800ec42:	e01b      	b.n	800ec7c <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800ec44:	6467      	str	r7, [r4, #68]	; 0x44
 800ec46:	e022      	b.n	800ec8e <xQueueGenericReceive+0xfc>
 800ec48:	64a7      	str	r7, [r4, #72]	; 0x48
 800ec4a:	e023      	b.n	800ec94 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800ec4c:	f001 fa28 	bl	80100a0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ec50:	6860      	ldr	r0, [r4, #4]
 800ec52:	f000 fe01 	bl	800f858 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ec56:	f001 fa2f 	bl	80100b8 <vPortExitCritical>
 800ec5a:	e02d      	b.n	800ecb8 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800ec5c:	0020      	movs	r0, r4
 800ec5e:	f7ff fdcd 	bl	800e7fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec62:	f000 fb83 	bl	800f36c <xTaskResumeAll>
 800ec66:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800ec68:	f001 fa1a 	bl	80100a0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1b0      	bne.n	800ebd4 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ec72:	9b01      	ldr	r3, [sp, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d0dd      	beq.n	800ec34 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800ec78:	2d00      	cmp	r5, #0
 800ec7a:	d0df      	beq.n	800ec3c <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800ec7c:	f001 fa1c 	bl	80100b8 <vPortExitCritical>
		vTaskSuspendAll();
 800ec80:	f000 fad4 	bl	800f22c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ec84:	f001 fa0c 	bl	80100a0 <vPortEnterCritical>
 800ec88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	d0da      	beq.n	800ec44 <xQueueGenericReceive+0xb2>
 800ec8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec90:	3301      	adds	r3, #1
 800ec92:	d0d9      	beq.n	800ec48 <xQueueGenericReceive+0xb6>
 800ec94:	f001 fa10 	bl	80100b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec98:	a901      	add	r1, sp, #4
 800ec9a:	a802      	add	r0, sp, #8
 800ec9c:	f000 fd94 	bl	800f7c8 <xTaskCheckForTimeOut>
 800eca0:	2800      	cmp	r0, #0
 800eca2:	d118      	bne.n	800ecd6 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800eca4:	f001 f9fc 	bl	80100a0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eca8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800ecaa:	f001 fa05 	bl	80100b8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ecae:	2d00      	cmp	r5, #0
 800ecb0:	d1d4      	bne.n	800ec5c <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d0c9      	beq.n	800ec4c <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ecb8:	0020      	movs	r0, r4
 800ecba:	3024      	adds	r0, #36	; 0x24
 800ecbc:	9901      	ldr	r1, [sp, #4]
 800ecbe:	f000 fcf5 	bl	800f6ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ecc2:	0020      	movs	r0, r4
 800ecc4:	f7ff fd9a 	bl	800e7fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ecc8:	f000 fb50 	bl	800f36c <xTaskResumeAll>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d1ca      	bne.n	800ec66 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800ecd0:	f001 f9da 	bl	8010088 <vPortYield>
 800ecd4:	e7c7      	b.n	800ec66 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800ecd6:	0020      	movs	r0, r4
 800ecd8:	f7ff fd90 	bl	800e7fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ecdc:	f000 fb46 	bl	800f36c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800ece0:	2000      	movs	r0, #0
 800ece2:	e796      	b.n	800ec12 <xQueueGenericReceive+0x80>

0800ece4 <xQueueReceiveFromISR>:
{
 800ece4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ece6:	b083      	sub	sp, #12
 800ece8:	0004      	movs	r4, r0
 800ecea:	000f      	movs	r7, r1
 800ecec:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d006      	beq.n	800ed00 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecf2:	2900      	cmp	r1, #0
 800ecf4:	d106      	bne.n	800ed04 <xQueueReceiveFromISR+0x20>
 800ecf6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <xQueueReceiveFromISR+0x20>
 800ecfc:	b672      	cpsid	i
 800ecfe:	e7fe      	b.n	800ecfe <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800ed00:	b672      	cpsid	i
 800ed02:	e7fe      	b.n	800ed02 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed04:	f001 f9e8 	bl	80100d8 <ulSetInterruptMaskFromISR>
 800ed08:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800ed0c:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d01b      	beq.n	800ed4a <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed12:	0039      	movs	r1, r7
 800ed14:	0020      	movs	r0, r4
 800ed16:	f7ff fd5f 	bl	800e7d8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ed1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ed20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed22:	3301      	adds	r3, #1
 800ed24:	d004      	beq.n	800ed30 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800ed26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed28:	3301      	adds	r3, #1
 800ed2a:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800ed2c:	2501      	movs	r5, #1
 800ed2e:	e00c      	b.n	800ed4a <xQueueReceiveFromISR+0x66>
 800ed30:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed32:	6923      	ldr	r3, [r4, #16]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d008      	beq.n	800ed4a <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed38:	0020      	movs	r0, r4
 800ed3a:	3010      	adds	r0, #16
 800ed3c:	f000 fcf4 	bl	800f728 <xTaskRemoveFromEventList>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d002      	beq.n	800ed4a <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800ed44:	2e00      	cmp	r6, #0
 800ed46:	d006      	beq.n	800ed56 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed48:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ed4a:	9801      	ldr	r0, [sp, #4]
 800ed4c:	f001 f9c9 	bl	80100e2 <vClearInterruptMaskFromISR>
}
 800ed50:	0028      	movs	r0, r5
 800ed52:	b003      	add	sp, #12
 800ed54:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800ed56:	2501      	movs	r5, #1
 800ed58:	e7f7      	b.n	800ed4a <xQueueReceiveFromISR+0x66>
	...

0800ed5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ed5c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed5e:	4b0a      	ldr	r3, [pc, #40]	; (800ed88 <vQueueAddToRegistry+0x2c>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d009      	beq.n	800ed7a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed66:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ed68:	4c07      	ldr	r4, [pc, #28]	; (800ed88 <vQueueAddToRegistry+0x2c>)
 800ed6a:	00da      	lsls	r2, r3, #3
 800ed6c:	58a2      	ldr	r2, [r4, r2]
 800ed6e:	2a00      	cmp	r2, #0
 800ed70:	d004      	beq.n	800ed7c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed72:	3301      	adds	r3, #1
 800ed74:	2b08      	cmp	r3, #8
 800ed76:	d1f8      	bne.n	800ed6a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ed78:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ed7a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ed7c:	4a02      	ldr	r2, [pc, #8]	; (800ed88 <vQueueAddToRegistry+0x2c>)
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ed82:	18d3      	adds	r3, r2, r3
 800ed84:	6058      	str	r0, [r3, #4]
				break;
 800ed86:	e7f7      	b.n	800ed78 <vQueueAddToRegistry+0x1c>
 800ed88:	20006618 	.word	0x20006618

0800ed8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ed8c:	b570      	push	{r4, r5, r6, lr}
 800ed8e:	0004      	movs	r4, r0
 800ed90:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ed92:	f001 f985 	bl	80100a0 <vPortEnterCritical>
 800ed96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed98:	3301      	adds	r3, #1
 800ed9a:	d00b      	beq.n	800edb4 <vQueueWaitForMessageRestricted+0x28>
 800ed9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed9e:	3301      	adds	r3, #1
 800eda0:	d00b      	beq.n	800edba <vQueueWaitForMessageRestricted+0x2e>
 800eda2:	f001 f989 	bl	80100b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eda6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d009      	beq.n	800edc0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800edac:	0020      	movs	r0, r4
 800edae:	f7ff fd25 	bl	800e7fc <prvUnlockQueue>
	}
 800edb2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800edb4:	2300      	movs	r3, #0
 800edb6:	6463      	str	r3, [r4, #68]	; 0x44
 800edb8:	e7f0      	b.n	800ed9c <vQueueWaitForMessageRestricted+0x10>
 800edba:	2300      	movs	r3, #0
 800edbc:	64a3      	str	r3, [r4, #72]	; 0x48
 800edbe:	e7f0      	b.n	800eda2 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edc0:	0020      	movs	r0, r4
 800edc2:	3024      	adds	r0, #36	; 0x24
 800edc4:	0029      	movs	r1, r5
 800edc6:	f000 fc95 	bl	800f6f4 <vTaskPlaceOnEventListRestricted>
 800edca:	e7ef      	b.n	800edac <vQueueWaitForMessageRestricted+0x20>

0800edcc <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800edcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edce:	46d6      	mov	lr, sl
 800edd0:	464f      	mov	r7, r9
 800edd2:	4646      	mov	r6, r8
 800edd4:	b5c0      	push	{r6, r7, lr}
 800edd6:	0006      	movs	r6, r0
 800edd8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800edda:	6808      	ldr	r0, [r1, #0]
 800eddc:	2800      	cmp	r0, #0
 800edde:	d044      	beq.n	800ee6a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ede0:	684b      	ldr	r3, [r1, #4]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	604b      	str	r3, [r1, #4]
 800ede6:	2208      	movs	r2, #8
 800ede8:	4690      	mov	r8, r2
 800edea:	4488      	add	r8, r1
 800edec:	4543      	cmp	r3, r8
 800edee:	d006      	beq.n	800edfe <prvListTaskWithinSingleList+0x32>
 800edf0:	684b      	ldr	r3, [r1, #4]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800edf6:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800edf8:	2302      	movs	r3, #2
 800edfa:	469a      	mov	sl, r3
 800edfc:	e018      	b.n	800ee30 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800edfe:	68cb      	ldr	r3, [r1, #12]
 800ee00:	604b      	str	r3, [r1, #4]
 800ee02:	e7f5      	b.n	800edf0 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ee04:	68cb      	ldr	r3, [r1, #12]
 800ee06:	604b      	str	r3, [r1, #4]
 800ee08:	e017      	b.n	800ee3a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ee0a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ee0c:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ee0e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ee10:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ee12:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ee14:	783b      	ldrb	r3, [r7, #0]
 800ee16:	2ba5      	cmp	r3, #165	; 0xa5
 800ee18:	d125      	bne.n	800ee66 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800ee1a:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800ee1c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ee1e:	5cfc      	ldrb	r4, [r7, r3]
 800ee20:	2ca5      	cmp	r4, #165	; 0xa5
 800ee22:	d0fb      	beq.n	800ee1c <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ee24:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800ee26:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800ee28:	3001      	adds	r0, #1
 800ee2a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800ee2c:	45a9      	cmp	r9, r5
 800ee2e:	d01c      	beq.n	800ee6a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ee30:	684b      	ldr	r3, [r1, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	604b      	str	r3, [r1, #4]
 800ee36:	4598      	cmp	r8, r3
 800ee38:	d0e4      	beq.n	800ee04 <prvListTaskWithinSingleList+0x38>
 800ee3a:	684b      	ldr	r3, [r1, #4]
 800ee3c:	68dd      	ldr	r5, [r3, #12]
 800ee3e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ee40:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ee42:	002b      	movs	r3, r5
 800ee44:	3334      	adds	r3, #52	; 0x34
 800ee46:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ee48:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ee4a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ee4c:	4663      	mov	r3, ip
 800ee4e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ee50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ee52:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800ee54:	4663      	mov	r3, ip
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d1d7      	bne.n	800ee0a <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ee5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d0d4      	beq.n	800ee0a <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ee60:	4653      	mov	r3, sl
 800ee62:	7333      	strb	r3, [r6, #12]
 800ee64:	e7d1      	b.n	800ee0a <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800ee66:	2300      	movs	r3, #0
 800ee68:	e7dc      	b.n	800ee24 <prvListTaskWithinSingleList+0x58>
	}
 800ee6a:	bc1c      	pop	{r2, r3, r4}
 800ee6c:	4690      	mov	r8, r2
 800ee6e:	4699      	mov	r9, r3
 800ee70:	46a2      	mov	sl, r4
 800ee72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ee74 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee74:	4b08      	ldr	r3, [pc, #32]	; (800ee98 <prvResetNextTaskUnblockTime+0x24>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d007      	beq.n	800ee8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ee7e:	4b06      	ldr	r3, [pc, #24]	; (800ee98 <prvResetNextTaskUnblockTime+0x24>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	685a      	ldr	r2, [r3, #4]
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <prvResetNextTaskUnblockTime+0x28>)
 800ee8a:	601a      	str	r2, [r3, #0]
	}
}
 800ee8c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee8e:	4b03      	ldr	r3, [pc, #12]	; (800ee9c <prvResetNextTaskUnblockTime+0x28>)
 800ee90:	2201      	movs	r2, #1
 800ee92:	4252      	negs	r2, r2
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	e7f9      	b.n	800ee8c <prvResetNextTaskUnblockTime+0x18>
 800ee98:	200014f4 	.word	0x200014f4
 800ee9c:	200000a8 	.word	0x200000a8

0800eea0 <prvAddCurrentTaskToDelayedList>:
{
 800eea0:	b510      	push	{r4, lr}
 800eea2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800eea4:	4b0e      	ldr	r3, [pc, #56]	; (800eee0 <prvAddCurrentTaskToDelayedList+0x40>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800eeaa:	4b0e      	ldr	r3, [pc, #56]	; (800eee4 <prvAddCurrentTaskToDelayedList+0x44>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4283      	cmp	r3, r0
 800eeb0:	d80d      	bhi.n	800eece <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eeb2:	4b0d      	ldr	r3, [pc, #52]	; (800eee8 <prvAddCurrentTaskToDelayedList+0x48>)
 800eeb4:	6818      	ldr	r0, [r3, #0]
 800eeb6:	4b0a      	ldr	r3, [pc, #40]	; (800eee0 <prvAddCurrentTaskToDelayedList+0x40>)
 800eeb8:	6819      	ldr	r1, [r3, #0]
 800eeba:	3104      	adds	r1, #4
 800eebc:	f7ff fc24 	bl	800e708 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800eec0:	4b0a      	ldr	r3, [pc, #40]	; (800eeec <prvAddCurrentTaskToDelayedList+0x4c>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	d909      	bls.n	800eedc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800eec8:	4b08      	ldr	r3, [pc, #32]	; (800eeec <prvAddCurrentTaskToDelayedList+0x4c>)
 800eeca:	601c      	str	r4, [r3, #0]
}
 800eecc:	e006      	b.n	800eedc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eece:	4b08      	ldr	r3, [pc, #32]	; (800eef0 <prvAddCurrentTaskToDelayedList+0x50>)
 800eed0:	6818      	ldr	r0, [r3, #0]
 800eed2:	4b03      	ldr	r3, [pc, #12]	; (800eee0 <prvAddCurrentTaskToDelayedList+0x40>)
 800eed4:	6819      	ldr	r1, [r3, #0]
 800eed6:	3104      	adds	r1, #4
 800eed8:	f7ff fc16 	bl	800e708 <vListInsert>
}
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	46c0      	nop			; (mov r8, r8)
 800eee0:	200014f0 	.word	0x200014f0
 800eee4:	20001610 	.word	0x20001610
 800eee8:	200014f4 	.word	0x200014f4
 800eeec:	200000a8 	.word	0x200000a8
 800eef0:	200014f8 	.word	0x200014f8

0800eef4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800eef4:	b510      	push	{r4, lr}
 800eef6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800eef8:	f005 fd3a 	bl	8014970 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eefc:	0020      	movs	r0, r4
 800eefe:	f7f1 f90b 	bl	8000118 <strlen>
 800ef02:	0003      	movs	r3, r0
 800ef04:	280b      	cmp	r0, #11
 800ef06:	dc08      	bgt.n	800ef1a <prvWriteNameToBuffer+0x26>
 800ef08:	1820      	adds	r0, r4, r0
 800ef0a:	0022      	movs	r2, r4
 800ef0c:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800ef0e:	2320      	movs	r3, #32
 800ef10:	7003      	strb	r3, [r0, #0]
 800ef12:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ef14:	4290      	cmp	r0, r2
 800ef16:	d1fb      	bne.n	800ef10 <prvWriteNameToBuffer+0x1c>
 800ef18:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800ef1a:	18e0      	adds	r0, r4, r3
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800ef20:	bd10      	pop	{r4, pc}
	...

0800ef24 <xTaskGenericCreate>:
{
 800ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef26:	46d6      	mov	lr, sl
 800ef28:	4647      	mov	r7, r8
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	9002      	str	r0, [sp, #8]
 800ef30:	000d      	movs	r5, r1
 800ef32:	0016      	movs	r6, r2
 800ef34:	9303      	str	r3, [sp, #12]
 800ef36:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d101      	bne.n	800ef40 <xTaskGenericCreate+0x1c>
 800ef3c:	b672      	cpsid	i
 800ef3e:	e7fe      	b.n	800ef3e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800ef40:	2f06      	cmp	r7, #6
 800ef42:	d901      	bls.n	800ef48 <xTaskGenericCreate+0x24>
 800ef44:	b672      	cpsid	i
 800ef46:	e7fe      	b.n	800ef46 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d106      	bne.n	800ef5c <xTaskGenericCreate+0x38>
 800ef4e:	0090      	lsls	r0, r2, #2
 800ef50:	f001 f928 	bl	80101a4 <pvPortMalloc>
 800ef54:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800ef56:	2800      	cmp	r0, #0
 800ef58:	d100      	bne.n	800ef5c <xTaskGenericCreate+0x38>
 800ef5a:	e0b7      	b.n	800f0cc <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ef5c:	2060      	movs	r0, #96	; 0x60
 800ef5e:	f001 f921 	bl	80101a4 <pvPortMalloc>
 800ef62:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800ef64:	d100      	bne.n	800ef68 <xTaskGenericCreate+0x44>
 800ef66:	e08b      	b.n	800f080 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800ef68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef6a:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ef6c:	00b2      	lsls	r2, r6, #2
 800ef6e:	21a5      	movs	r1, #165	; 0xa5
 800ef70:	0018      	movs	r0, r3
 800ef72:	f004 fd63 	bl	8013a3c <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ef76:	4b57      	ldr	r3, [pc, #348]	; (800f0d4 <xTaskGenericCreate+0x1b0>)
 800ef78:	18f3      	adds	r3, r6, r3
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ef7e:	4694      	mov	ip, r2
 800ef80:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ef82:	2207      	movs	r2, #7
 800ef84:	4393      	bics	r3, r2
 800ef86:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800ef88:	782a      	ldrb	r2, [r5, #0]
 800ef8a:	2334      	movs	r3, #52	; 0x34
 800ef8c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800ef8e:	782b      	ldrb	r3, [r5, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d000      	beq.n	800ef96 <xTaskGenericCreate+0x72>
 800ef94:	e07e      	b.n	800f094 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef96:	2500      	movs	r5, #0
 800ef98:	2340      	movs	r3, #64	; 0x40
 800ef9a:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800ef9c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ef9e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800efa0:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800efa2:	1d23      	adds	r3, r4, #4
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	0018      	movs	r0, r3
 800efa8:	f7ff fb9f 	bl	800e6ea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800efac:	0020      	movs	r0, r4
 800efae:	3018      	adds	r0, #24
 800efb0:	f7ff fb9b 	bl	800e6ea <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800efb4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb6:	2307      	movs	r3, #7
 800efb8:	1bdb      	subs	r3, r3, r7
 800efba:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800efbc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800efbe:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800efc0:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800efc2:	235c      	movs	r3, #92	; 0x5c
 800efc4:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efc6:	9a03      	ldr	r2, [sp, #12]
 800efc8:	9902      	ldr	r1, [sp, #8]
 800efca:	4650      	mov	r0, sl
 800efcc:	f001 f820 	bl	8010010 <pxPortInitialiseStack>
 800efd0:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800efd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efd4:	42ab      	cmp	r3, r5
 800efd6:	d000      	beq.n	800efda <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800efd8:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800efda:	f001 f861 	bl	80100a0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800efde:	4a3e      	ldr	r2, [pc, #248]	; (800f0d8 <xTaskGenericCreate+0x1b4>)
 800efe0:	6813      	ldr	r3, [r2, #0]
 800efe2:	3301      	adds	r3, #1
 800efe4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800efe6:	4b3d      	ldr	r3, [pc, #244]	; (800f0dc <xTaskGenericCreate+0x1b8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d162      	bne.n	800f0b4 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800efee:	4b3b      	ldr	r3, [pc, #236]	; (800f0dc <xTaskGenericCreate+0x1b8>)
 800eff0:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eff2:	6813      	ldr	r3, [r2, #0]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d120      	bne.n	800f03a <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eff8:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800effa:	3313      	adds	r3, #19
 800effc:	4698      	mov	r8, r3
 800effe:	4e38      	ldr	r6, [pc, #224]	; (800f0e0 <xTaskGenericCreate+0x1bc>)
 800f000:	4640      	mov	r0, r8
 800f002:	4368      	muls	r0, r5
 800f004:	1980      	adds	r0, r0, r6
 800f006:	f7ff fb65 	bl	800e6d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f00a:	3501      	adds	r5, #1
 800f00c:	2d07      	cmp	r5, #7
 800f00e:	d1f7      	bne.n	800f000 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f010:	4e34      	ldr	r6, [pc, #208]	; (800f0e4 <xTaskGenericCreate+0x1c0>)
 800f012:	0030      	movs	r0, r6
 800f014:	f7ff fb5e 	bl	800e6d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f018:	4d33      	ldr	r5, [pc, #204]	; (800f0e8 <xTaskGenericCreate+0x1c4>)
 800f01a:	0028      	movs	r0, r5
 800f01c:	f7ff fb5a 	bl	800e6d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f020:	4832      	ldr	r0, [pc, #200]	; (800f0ec <xTaskGenericCreate+0x1c8>)
 800f022:	f7ff fb57 	bl	800e6d4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f026:	4832      	ldr	r0, [pc, #200]	; (800f0f0 <xTaskGenericCreate+0x1cc>)
 800f028:	f7ff fb54 	bl	800e6d4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f02c:	4831      	ldr	r0, [pc, #196]	; (800f0f4 <xTaskGenericCreate+0x1d0>)
 800f02e:	f7ff fb51 	bl	800e6d4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f032:	4b31      	ldr	r3, [pc, #196]	; (800f0f8 <xTaskGenericCreate+0x1d4>)
 800f034:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f036:	4b31      	ldr	r3, [pc, #196]	; (800f0fc <xTaskGenericCreate+0x1d8>)
 800f038:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f03a:	4a31      	ldr	r2, [pc, #196]	; (800f100 <xTaskGenericCreate+0x1dc>)
 800f03c:	6813      	ldr	r3, [r2, #0]
 800f03e:	3301      	adds	r3, #1
 800f040:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f042:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f044:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f046:	4a2f      	ldr	r2, [pc, #188]	; (800f104 <xTaskGenericCreate+0x1e0>)
 800f048:	6812      	ldr	r2, [r2, #0]
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d901      	bls.n	800f052 <xTaskGenericCreate+0x12e>
 800f04e:	4a2d      	ldr	r2, [pc, #180]	; (800f104 <xTaskGenericCreate+0x1e0>)
 800f050:	6013      	str	r3, [r2, #0]
 800f052:	2014      	movs	r0, #20
 800f054:	4358      	muls	r0, r3
 800f056:	4b22      	ldr	r3, [pc, #136]	; (800f0e0 <xTaskGenericCreate+0x1bc>)
 800f058:	18c0      	adds	r0, r0, r3
 800f05a:	9901      	ldr	r1, [sp, #4]
 800f05c:	f7ff fb48 	bl	800e6f0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f060:	f001 f82a 	bl	80100b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f064:	4b28      	ldr	r3, [pc, #160]	; (800f108 <xTaskGenericCreate+0x1e4>)
 800f066:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f068:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00d      	beq.n	800f08a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f06e:	4b1b      	ldr	r3, [pc, #108]	; (800f0dc <xTaskGenericCreate+0x1b8>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f074:	42bb      	cmp	r3, r7
 800f076:	d208      	bcs.n	800f08a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f078:	f001 f806 	bl	8010088 <vPortYield>
			xReturn = pdPASS;
 800f07c:	2001      	movs	r0, #1
 800f07e:	e004      	b.n	800f08a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f080:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f082:	f001 f925 	bl	80102d0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f086:	2001      	movs	r0, #1
 800f088:	4240      	negs	r0, r0
}
 800f08a:	b005      	add	sp, #20
 800f08c:	bc0c      	pop	{r2, r3}
 800f08e:	4690      	mov	r8, r2
 800f090:	469a      	mov	sl, r3
 800f092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f094:	1c6b      	adds	r3, r5, #1
 800f096:	0022      	movs	r2, r4
 800f098:	3235      	adds	r2, #53	; 0x35
 800f09a:	0021      	movs	r1, r4
 800f09c:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f09e:	7818      	ldrb	r0, [r3, #0]
 800f0a0:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f0a2:	7818      	ldrb	r0, [r3, #0]
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d100      	bne.n	800f0aa <xTaskGenericCreate+0x186>
 800f0a8:	e775      	b.n	800ef96 <xTaskGenericCreate+0x72>
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f0ae:	4291      	cmp	r1, r2
 800f0b0:	d1f5      	bne.n	800f09e <xTaskGenericCreate+0x17a>
 800f0b2:	e770      	b.n	800ef96 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f0b4:	4b14      	ldr	r3, [pc, #80]	; (800f108 <xTaskGenericCreate+0x1e4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1be      	bne.n	800f03a <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f0bc:	4b07      	ldr	r3, [pc, #28]	; (800f0dc <xTaskGenericCreate+0x1b8>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c2:	42bb      	cmp	r3, r7
 800f0c4:	d8b9      	bhi.n	800f03a <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f0c6:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <xTaskGenericCreate+0x1b8>)
 800f0c8:	601c      	str	r4, [r3, #0]
 800f0ca:	e7b6      	b.n	800f03a <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	4240      	negs	r0, r0
 800f0d0:	e7db      	b.n	800f08a <xTaskGenericCreate+0x166>
 800f0d2:	46c0      	nop			; (mov r8, r8)
 800f0d4:	3fffffff 	.word	0x3fffffff
 800f0d8:	2000158c 	.word	0x2000158c
 800f0dc:	200014f0 	.word	0x200014f0
 800f0e0:	200014fc 	.word	0x200014fc
 800f0e4:	200015a4 	.word	0x200015a4
 800f0e8:	200015b8 	.word	0x200015b8
 800f0ec:	200015d0 	.word	0x200015d0
 800f0f0:	200015fc 	.word	0x200015fc
 800f0f4:	200015e8 	.word	0x200015e8
 800f0f8:	200014f4 	.word	0x200014f4
 800f0fc:	200014f8 	.word	0x200014f8
 800f100:	20001598 	.word	0x20001598
 800f104:	200015a0 	.word	0x200015a0
 800f108:	200015e4 	.word	0x200015e4

0800f10c <uxTaskPriorityGet>:
	{
 800f10c:	b510      	push	{r4, lr}
 800f10e:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f110:	f000 ffc6 	bl	80100a0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f114:	2c00      	cmp	r4, #0
 800f116:	d004      	beq.n	800f122 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f118:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f11a:	f000 ffcd 	bl	80100b8 <vPortExitCritical>
	}
 800f11e:	0020      	movs	r0, r4
 800f120:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f122:	4b01      	ldr	r3, [pc, #4]	; (800f128 <uxTaskPriorityGet+0x1c>)
 800f124:	681c      	ldr	r4, [r3, #0]
 800f126:	e7f7      	b.n	800f118 <uxTaskPriorityGet+0xc>
 800f128:	200014f0 	.word	0x200014f0

0800f12c <vTaskPrioritySet>:
	{
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	0004      	movs	r4, r0
 800f130:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f132:	2906      	cmp	r1, #6
 800f134:	d901      	bls.n	800f13a <vTaskPrioritySet+0xe>
 800f136:	b672      	cpsid	i
 800f138:	e7fe      	b.n	800f138 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f13a:	f000 ffb1 	bl	80100a0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f13e:	2c00      	cmp	r4, #0
 800f140:	d101      	bne.n	800f146 <vTaskPrioritySet+0x1a>
 800f142:	4b21      	ldr	r3, [pc, #132]	; (800f1c8 <vTaskPrioritySet+0x9c>)
 800f144:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f146:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f148:	4295      	cmp	r5, r2
 800f14a:	d032      	beq.n	800f1b2 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f14c:	d934      	bls.n	800f1b8 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f14e:	4b1e      	ldr	r3, [pc, #120]	; (800f1c8 <vTaskPrioritySet+0x9c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	42a3      	cmp	r3, r4
 800f154:	d036      	beq.n	800f1c4 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f156:	4b1c      	ldr	r3, [pc, #112]	; (800f1c8 <vTaskPrioritySet+0x9c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15c:	2600      	movs	r6, #0
 800f15e:	429d      	cmp	r5, r3
 800f160:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f162:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f164:	428a      	cmp	r2, r1
 800f166:	d100      	bne.n	800f16a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f168:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f16a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f16c:	69a3      	ldr	r3, [r4, #24]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	db02      	blt.n	800f178 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f172:	2207      	movs	r2, #7
 800f174:	1b55      	subs	r5, r2, r5
 800f176:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f178:	2314      	movs	r3, #20
 800f17a:	434b      	muls	r3, r1
 800f17c:	4a13      	ldr	r2, [pc, #76]	; (800f1cc <vTaskPrioritySet+0xa0>)
 800f17e:	189b      	adds	r3, r3, r2
 800f180:	6962      	ldr	r2, [r4, #20]
 800f182:	429a      	cmp	r2, r3
 800f184:	d111      	bne.n	800f1aa <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f186:	1d25      	adds	r5, r4, #4
 800f188:	0028      	movs	r0, r5
 800f18a:	f7ff fad4 	bl	800e736 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f18e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f190:	4a0f      	ldr	r2, [pc, #60]	; (800f1d0 <vTaskPrioritySet+0xa4>)
 800f192:	6812      	ldr	r2, [r2, #0]
 800f194:	4293      	cmp	r3, r2
 800f196:	d901      	bls.n	800f19c <vTaskPrioritySet+0x70>
 800f198:	4a0d      	ldr	r2, [pc, #52]	; (800f1d0 <vTaskPrioritySet+0xa4>)
 800f19a:	6013      	str	r3, [r2, #0]
 800f19c:	2014      	movs	r0, #20
 800f19e:	4358      	muls	r0, r3
 800f1a0:	4b0a      	ldr	r3, [pc, #40]	; (800f1cc <vTaskPrioritySet+0xa0>)
 800f1a2:	18c0      	adds	r0, r0, r3
 800f1a4:	0029      	movs	r1, r5
 800f1a6:	f7ff faa3 	bl	800e6f0 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f1aa:	2e01      	cmp	r6, #1
 800f1ac:	d101      	bne.n	800f1b2 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f1ae:	f000 ff6b 	bl	8010088 <vPortYield>
		taskEXIT_CRITICAL();
 800f1b2:	f000 ff81 	bl	80100b8 <vPortExitCritical>
	}
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f1b8:	4b03      	ldr	r3, [pc, #12]	; (800f1c8 <vTaskPrioritySet+0x9c>)
 800f1ba:	681e      	ldr	r6, [r3, #0]
 800f1bc:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f1be:	4273      	negs	r3, r6
 800f1c0:	415e      	adcs	r6, r3
 800f1c2:	e7ce      	b.n	800f162 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f1c4:	2600      	movs	r6, #0
 800f1c6:	e7cc      	b.n	800f162 <vTaskPrioritySet+0x36>
 800f1c8:	200014f0 	.word	0x200014f0
 800f1cc:	200014fc 	.word	0x200014fc
 800f1d0:	200015a0 	.word	0x200015a0

0800f1d4 <vTaskStartScheduler>:
{
 800f1d4:	b500      	push	{lr}
 800f1d6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f1d8:	2300      	movs	r3, #0
 800f1da:	9303      	str	r3, [sp, #12]
 800f1dc:	9302      	str	r3, [sp, #8]
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	9300      	str	r3, [sp, #0]
 800f1e2:	22a0      	movs	r2, #160	; 0xa0
 800f1e4:	490d      	ldr	r1, [pc, #52]	; (800f21c <vTaskStartScheduler+0x48>)
 800f1e6:	480e      	ldr	r0, [pc, #56]	; (800f220 <vTaskStartScheduler+0x4c>)
 800f1e8:	f7ff fe9c 	bl	800ef24 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f1ec:	2801      	cmp	r0, #1
 800f1ee:	d003      	beq.n	800f1f8 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	d110      	bne.n	800f216 <vTaskStartScheduler+0x42>
 800f1f4:	b672      	cpsid	i
 800f1f6:	e7fe      	b.n	800f1f6 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f1f8:	f000 fd68 	bl	800fccc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f1fc:	2801      	cmp	r0, #1
 800f1fe:	d1f7      	bne.n	800f1f0 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f200:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f202:	4b08      	ldr	r3, [pc, #32]	; (800f224 <vTaskStartScheduler+0x50>)
 800f204:	2201      	movs	r2, #1
 800f206:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f208:	4b07      	ldr	r3, [pc, #28]	; (800f228 <vTaskStartScheduler+0x54>)
 800f20a:	2200      	movs	r2, #0
 800f20c:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f20e:	f7f8 ff21 	bl	8008054 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f212:	f000 ff0f 	bl	8010034 <xPortStartScheduler>
}
 800f216:	b005      	add	sp, #20
 800f218:	bd00      	pop	{pc}
 800f21a:	46c0      	nop			; (mov r8, r8)
 800f21c:	0801a9c0 	.word	0x0801a9c0
 800f220:	0800f495 	.word	0x0800f495
 800f224:	200015e4 	.word	0x200015e4
 800f228:	20001610 	.word	0x20001610

0800f22c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f22c:	4a02      	ldr	r2, [pc, #8]	; (800f238 <vTaskSuspendAll+0xc>)
 800f22e:	6813      	ldr	r3, [r2, #0]
 800f230:	3301      	adds	r3, #1
 800f232:	6013      	str	r3, [r2, #0]
}
 800f234:	4770      	bx	lr
 800f236:	46c0      	nop			; (mov r8, r8)
 800f238:	20001594 	.word	0x20001594

0800f23c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f23c:	4b01      	ldr	r3, [pc, #4]	; (800f244 <xTaskGetTickCount+0x8>)
 800f23e:	6818      	ldr	r0, [r3, #0]
}
 800f240:	4770      	bx	lr
 800f242:	46c0      	nop			; (mov r8, r8)
 800f244:	20001610 	.word	0x20001610

0800f248 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f248:	4b01      	ldr	r3, [pc, #4]	; (800f250 <xTaskGetTickCountFromISR+0x8>)
 800f24a:	6818      	ldr	r0, [r3, #0]
}
 800f24c:	4770      	bx	lr
 800f24e:	46c0      	nop			; (mov r8, r8)
 800f250:	20001610 	.word	0x20001610

0800f254 <xTaskIncrementTick>:
{
 800f254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f256:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f258:	4b39      	ldr	r3, [pc, #228]	; (800f340 <xTaskIncrementTick+0xec>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d161      	bne.n	800f324 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800f260:	4b38      	ldr	r3, [pc, #224]	; (800f344 <xTaskIncrementTick+0xf0>)
 800f262:	681a      	ldr	r2, [r3, #0]
 800f264:	3201      	adds	r2, #1
 800f266:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f268:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f26a:	2e00      	cmp	r6, #0
 800f26c:	d112      	bne.n	800f294 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800f26e:	4b36      	ldr	r3, [pc, #216]	; (800f348 <xTaskIncrementTick+0xf4>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <xTaskIncrementTick+0x28>
 800f278:	b672      	cpsid	i
 800f27a:	e7fe      	b.n	800f27a <xTaskIncrementTick+0x26>
 800f27c:	4a32      	ldr	r2, [pc, #200]	; (800f348 <xTaskIncrementTick+0xf4>)
 800f27e:	6811      	ldr	r1, [r2, #0]
 800f280:	4b32      	ldr	r3, [pc, #200]	; (800f34c <xTaskIncrementTick+0xf8>)
 800f282:	6818      	ldr	r0, [r3, #0]
 800f284:	6010      	str	r0, [r2, #0]
 800f286:	6019      	str	r1, [r3, #0]
 800f288:	4a31      	ldr	r2, [pc, #196]	; (800f350 <xTaskIncrementTick+0xfc>)
 800f28a:	6813      	ldr	r3, [r2, #0]
 800f28c:	3301      	adds	r3, #1
 800f28e:	6013      	str	r3, [r2, #0]
 800f290:	f7ff fdf0 	bl	800ee74 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f294:	4b2f      	ldr	r3, [pc, #188]	; (800f354 <xTaskIncrementTick+0x100>)
 800f296:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f298:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f29a:	42b3      	cmp	r3, r6
 800f29c:	d833      	bhi.n	800f306 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800f29e:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2a0:	4d29      	ldr	r5, [pc, #164]	; (800f348 <xTaskIncrementTick+0xf4>)
 800f2a2:	682b      	ldr	r3, [r5, #0]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d029      	beq.n	800f2fe <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f2aa:	4b27      	ldr	r3, [pc, #156]	; (800f348 <xTaskIncrementTick+0xf4>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f2b2:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f2b4:	429e      	cmp	r6, r3
 800f2b6:	d332      	bcc.n	800f31e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f2b8:	1d23      	adds	r3, r4, #4
 800f2ba:	9301      	str	r3, [sp, #4]
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f7ff fa3a 	bl	800e736 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f2c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d003      	beq.n	800f2d0 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2c8:	0020      	movs	r0, r4
 800f2ca:	3018      	adds	r0, #24
 800f2cc:	f7ff fa33 	bl	800e736 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f2d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2d2:	4a21      	ldr	r2, [pc, #132]	; (800f358 <xTaskIncrementTick+0x104>)
 800f2d4:	6812      	ldr	r2, [r2, #0]
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	d901      	bls.n	800f2de <xTaskIncrementTick+0x8a>
 800f2da:	4a1f      	ldr	r2, [pc, #124]	; (800f358 <xTaskIncrementTick+0x104>)
 800f2dc:	6013      	str	r3, [r2, #0]
 800f2de:	0098      	lsls	r0, r3, #2
 800f2e0:	18c0      	adds	r0, r0, r3
 800f2e2:	0080      	lsls	r0, r0, #2
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	; (800f35c <xTaskIncrementTick+0x108>)
 800f2e6:	18c0      	adds	r0, r0, r3
 800f2e8:	9901      	ldr	r1, [sp, #4]
 800f2ea:	f7ff fa01 	bl	800e6f0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2ee:	4b1c      	ldr	r3, [pc, #112]	; (800f360 <xTaskIncrementTick+0x10c>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d3d3      	bcc.n	800f2a2 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800f2fa:	2701      	movs	r7, #1
 800f2fc:	e7d1      	b.n	800f2a2 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f2fe:	4b15      	ldr	r3, [pc, #84]	; (800f354 <xTaskIncrementTick+0x100>)
 800f300:	2201      	movs	r2, #1
 800f302:	4252      	negs	r2, r2
 800f304:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f306:	4b16      	ldr	r3, [pc, #88]	; (800f360 <xTaskIncrementTick+0x10c>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f30c:	0093      	lsls	r3, r2, #2
 800f30e:	189b      	adds	r3, r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4a12      	ldr	r2, [pc, #72]	; (800f35c <xTaskIncrementTick+0x108>)
 800f314:	589b      	ldr	r3, [r3, r2]
 800f316:	2b01      	cmp	r3, #1
 800f318:	d909      	bls.n	800f32e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800f31a:	2701      	movs	r7, #1
 800f31c:	e007      	b.n	800f32e <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800f31e:	4a0d      	ldr	r2, [pc, #52]	; (800f354 <xTaskIncrementTick+0x100>)
 800f320:	6013      	str	r3, [r2, #0]
							break;
 800f322:	e7f0      	b.n	800f306 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800f324:	4a0f      	ldr	r2, [pc, #60]	; (800f364 <xTaskIncrementTick+0x110>)
 800f326:	6813      	ldr	r3, [r2, #0]
 800f328:	3301      	adds	r3, #1
 800f32a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f32c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800f32e:	4b0e      	ldr	r3, [pc, #56]	; (800f368 <xTaskIncrementTick+0x114>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d000      	beq.n	800f338 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800f336:	2701      	movs	r7, #1
}
 800f338:	0038      	movs	r0, r7
 800f33a:	b003      	add	sp, #12
 800f33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f33e:	46c0      	nop			; (mov r8, r8)
 800f340:	20001594 	.word	0x20001594
 800f344:	20001610 	.word	0x20001610
 800f348:	200014f4 	.word	0x200014f4
 800f34c:	200014f8 	.word	0x200014f8
 800f350:	200015cc 	.word	0x200015cc
 800f354:	200000a8 	.word	0x200000a8
 800f358:	200015a0 	.word	0x200015a0
 800f35c:	200014fc 	.word	0x200014fc
 800f360:	200014f0 	.word	0x200014f0
 800f364:	20001590 	.word	0x20001590
 800f368:	20001614 	.word	0x20001614

0800f36c <xTaskResumeAll>:
{
 800f36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f36e:	4b2f      	ldr	r3, [pc, #188]	; (800f42c <xTaskResumeAll+0xc0>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d101      	bne.n	800f37a <xTaskResumeAll+0xe>
 800f376:	b672      	cpsid	i
 800f378:	e7fe      	b.n	800f378 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800f37a:	f000 fe91 	bl	80100a0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f37e:	4b2b      	ldr	r3, [pc, #172]	; (800f42c <xTaskResumeAll+0xc0>)
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	3a01      	subs	r2, #1
 800f384:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f386:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f388:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f38a:	42a3      	cmp	r3, r4
 800f38c:	d105      	bne.n	800f39a <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f38e:	4b28      	ldr	r3, [pc, #160]	; (800f430 <xTaskResumeAll+0xc4>)
 800f390:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f392:	4d28      	ldr	r5, [pc, #160]	; (800f434 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f394:	42a3      	cmp	r3, r4
 800f396:	d12a      	bne.n	800f3ee <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800f398:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f39a:	f000 fe8d 	bl	80100b8 <vPortExitCritical>
}
 800f39e:	0020      	movs	r0, r4
 800f3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800f3a2:	0098      	lsls	r0, r3, #2
 800f3a4:	18c0      	adds	r0, r0, r3
 800f3a6:	0080      	lsls	r0, r0, #2
 800f3a8:	4b23      	ldr	r3, [pc, #140]	; (800f438 <xTaskResumeAll+0xcc>)
 800f3aa:	18c0      	adds	r0, r0, r3
 800f3ac:	0021      	movs	r1, r4
 800f3ae:	f7ff f99f 	bl	800e6f0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3b2:	4b22      	ldr	r3, [pc, #136]	; (800f43c <xTaskResumeAll+0xd0>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d214      	bcs.n	800f3e8 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3be:	6833      	ldr	r3, [r6, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d016      	beq.n	800f3f2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f3c4:	68eb      	ldr	r3, [r5, #12]
 800f3c6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3c8:	0038      	movs	r0, r7
 800f3ca:	3018      	adds	r0, #24
 800f3cc:	f7ff f9b3 	bl	800e736 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f3d0:	1d3c      	adds	r4, r7, #4
 800f3d2:	0020      	movs	r0, r4
 800f3d4:	f7ff f9af 	bl	800e736 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3da:	4a19      	ldr	r2, [pc, #100]	; (800f440 <xTaskResumeAll+0xd4>)
 800f3dc:	6812      	ldr	r2, [r2, #0]
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d9df      	bls.n	800f3a2 <xTaskResumeAll+0x36>
 800f3e2:	4a17      	ldr	r2, [pc, #92]	; (800f440 <xTaskResumeAll+0xd4>)
 800f3e4:	6013      	str	r3, [r2, #0]
 800f3e6:	e7dc      	b.n	800f3a2 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800f3e8:	4b16      	ldr	r3, [pc, #88]	; (800f444 <xTaskResumeAll+0xd8>)
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f3ee:	4e11      	ldr	r6, [pc, #68]	; (800f434 <xTaskResumeAll+0xc8>)
 800f3f0:	e7e5      	b.n	800f3be <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f3f2:	4b15      	ldr	r3, [pc, #84]	; (800f448 <xTaskResumeAll+0xdc>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d005      	beq.n	800f406 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f3fa:	4e13      	ldr	r6, [pc, #76]	; (800f448 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800f3fc:	4c11      	ldr	r4, [pc, #68]	; (800f444 <xTaskResumeAll+0xd8>)
 800f3fe:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f400:	6833      	ldr	r3, [r6, #0]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d108      	bne.n	800f418 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800f406:	4b0f      	ldr	r3, [pc, #60]	; (800f444 <xTaskResumeAll+0xd8>)
 800f408:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f40a:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d1c4      	bne.n	800f39a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800f410:	f000 fe3a 	bl	8010088 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f414:	3401      	adds	r4, #1
 800f416:	e7c0      	b.n	800f39a <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800f418:	f7ff ff1c 	bl	800f254 <xTaskIncrementTick>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d000      	beq.n	800f422 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800f420:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800f422:	4a09      	ldr	r2, [pc, #36]	; (800f448 <xTaskResumeAll+0xdc>)
 800f424:	6813      	ldr	r3, [r2, #0]
 800f426:	3b01      	subs	r3, #1
 800f428:	6013      	str	r3, [r2, #0]
 800f42a:	e7e9      	b.n	800f400 <xTaskResumeAll+0x94>
 800f42c:	20001594 	.word	0x20001594
 800f430:	2000158c 	.word	0x2000158c
 800f434:	200015d0 	.word	0x200015d0
 800f438:	200014fc 	.word	0x200014fc
 800f43c:	200014f0 	.word	0x200014f0
 800f440:	200015a0 	.word	0x200015a0
 800f444:	20001614 	.word	0x20001614
 800f448:	20001590 	.word	0x20001590

0800f44c <vTaskDelay>:
	{
 800f44c:	b570      	push	{r4, r5, r6, lr}
 800f44e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f450:	d016      	beq.n	800f480 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800f452:	4b0d      	ldr	r3, [pc, #52]	; (800f488 <vTaskDelay+0x3c>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d001      	beq.n	800f45e <vTaskDelay+0x12>
 800f45a:	b672      	cpsid	i
 800f45c:	e7fe      	b.n	800f45c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800f45e:	f7ff fee5 	bl	800f22c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f462:	4b0a      	ldr	r3, [pc, #40]	; (800f48c <vTaskDelay+0x40>)
 800f464:	681c      	ldr	r4, [r3, #0]
 800f466:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f468:	4b09      	ldr	r3, [pc, #36]	; (800f490 <vTaskDelay+0x44>)
 800f46a:	6818      	ldr	r0, [r3, #0]
 800f46c:	3004      	adds	r0, #4
 800f46e:	f7ff f962 	bl	800e736 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f472:	0020      	movs	r0, r4
 800f474:	f7ff fd14 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f478:	f7ff ff78 	bl	800f36c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d101      	bne.n	800f484 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800f480:	f000 fe02 	bl	8010088 <vPortYield>
	}
 800f484:	bd70      	pop	{r4, r5, r6, pc}
 800f486:	46c0      	nop			; (mov r8, r8)
 800f488:	20001594 	.word	0x20001594
 800f48c:	20001610 	.word	0x20001610
 800f490:	200014f0 	.word	0x200014f0

0800f494 <prvIdleTask>:
{
 800f494:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f496:	4d16      	ldr	r5, [pc, #88]	; (800f4f0 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f498:	4e16      	ldr	r6, [pc, #88]	; (800f4f4 <prvIdleTask+0x60>)
 800f49a:	e003      	b.n	800f4a4 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f49c:	4b16      	ldr	r3, [pc, #88]	; (800f4f8 <prvIdleTask+0x64>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d822      	bhi.n	800f4ea <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f4a4:	682b      	ldr	r3, [r5, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d0f8      	beq.n	800f49c <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f4aa:	f7ff febf 	bl	800f22c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f4ae:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800f4b0:	f7ff ff5c 	bl	800f36c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f4b4:	2c00      	cmp	r4, #0
 800f4b6:	d0f5      	beq.n	800f4a4 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f4b8:	f000 fdf2 	bl	80100a0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f4bc:	4b0d      	ldr	r3, [pc, #52]	; (800f4f4 <prvIdleTask+0x60>)
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f4c2:	1d20      	adds	r0, r4, #4
 800f4c4:	f7ff f937 	bl	800e736 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f4c8:	4a0c      	ldr	r2, [pc, #48]	; (800f4fc <prvIdleTask+0x68>)
 800f4ca:	6813      	ldr	r3, [r2, #0]
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f4d0:	4a07      	ldr	r2, [pc, #28]	; (800f4f0 <prvIdleTask+0x5c>)
 800f4d2:	6813      	ldr	r3, [r2, #0]
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f4d8:	f000 fdee 	bl	80100b8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f4dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f4de:	f000 fef7 	bl	80102d0 <vPortFree>
		vPortFree( pxTCB );
 800f4e2:	0020      	movs	r0, r4
 800f4e4:	f000 fef4 	bl	80102d0 <vPortFree>
 800f4e8:	e7dc      	b.n	800f4a4 <prvIdleTask+0x10>
				taskYIELD();
 800f4ea:	f000 fdcd 	bl	8010088 <vPortYield>
 800f4ee:	e7d9      	b.n	800f4a4 <prvIdleTask+0x10>
 800f4f0:	2000159c 	.word	0x2000159c
 800f4f4:	200015fc 	.word	0x200015fc
 800f4f8:	200014fc 	.word	0x200014fc
 800f4fc:	2000158c 	.word	0x2000158c

0800f500 <uxTaskGetSystemState>:
	{
 800f500:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f502:	46c6      	mov	lr, r8
 800f504:	b500      	push	{lr}
 800f506:	0006      	movs	r6, r0
 800f508:	000d      	movs	r5, r1
 800f50a:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f50c:	f7ff fe8e 	bl	800f22c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f510:	4b1e      	ldr	r3, [pc, #120]	; (800f58c <uxTaskGetSystemState+0x8c>)
 800f512:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f514:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f516:	42ab      	cmp	r3, r5
 800f518:	d831      	bhi.n	800f57e <uxTaskGetSystemState+0x7e>
 800f51a:	4d1d      	ldr	r5, [pc, #116]	; (800f590 <uxTaskGetSystemState+0x90>)
 800f51c:	002f      	movs	r7, r5
 800f51e:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f520:	0160      	lsls	r0, r4, #5
 800f522:	1830      	adds	r0, r6, r0
 800f524:	2201      	movs	r2, #1
 800f526:	0029      	movs	r1, r5
 800f528:	f7ff fc50 	bl	800edcc <prvListTaskWithinSingleList>
 800f52c:	1824      	adds	r4, r4, r0
 800f52e:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f530:	42bd      	cmp	r5, r7
 800f532:	d1f5      	bne.n	800f520 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f534:	4b17      	ldr	r3, [pc, #92]	; (800f594 <uxTaskGetSystemState+0x94>)
 800f536:	6819      	ldr	r1, [r3, #0]
 800f538:	0160      	lsls	r0, r4, #5
 800f53a:	1830      	adds	r0, r6, r0
 800f53c:	2202      	movs	r2, #2
 800f53e:	f7ff fc45 	bl	800edcc <prvListTaskWithinSingleList>
 800f542:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f544:	4b14      	ldr	r3, [pc, #80]	; (800f598 <uxTaskGetSystemState+0x98>)
 800f546:	6819      	ldr	r1, [r3, #0]
 800f548:	0160      	lsls	r0, r4, #5
 800f54a:	1830      	adds	r0, r6, r0
 800f54c:	2202      	movs	r2, #2
 800f54e:	f7ff fc3d 	bl	800edcc <prvListTaskWithinSingleList>
 800f552:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f554:	0160      	lsls	r0, r4, #5
 800f556:	1830      	adds	r0, r6, r0
 800f558:	2204      	movs	r2, #4
 800f55a:	4910      	ldr	r1, [pc, #64]	; (800f59c <uxTaskGetSystemState+0x9c>)
 800f55c:	f7ff fc36 	bl	800edcc <prvListTaskWithinSingleList>
 800f560:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f562:	0160      	lsls	r0, r4, #5
 800f564:	1830      	adds	r0, r6, r0
 800f566:	2203      	movs	r2, #3
 800f568:	490d      	ldr	r1, [pc, #52]	; (800f5a0 <uxTaskGetSystemState+0xa0>)
 800f56a:	f7ff fc2f 	bl	800edcc <prvListTaskWithinSingleList>
 800f56e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f570:	4643      	mov	r3, r8
 800f572:	2b00      	cmp	r3, #0
 800f574:	d003      	beq.n	800f57e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f576:	f7f8 fd7d 	bl	8008074 <ulMainGetRunTimeCounterValue>
 800f57a:	4643      	mov	r3, r8
 800f57c:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f57e:	f7ff fef5 	bl	800f36c <xTaskResumeAll>
	}
 800f582:	0020      	movs	r0, r4
 800f584:	bc04      	pop	{r2}
 800f586:	4690      	mov	r8, r2
 800f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58a:	46c0      	nop			; (mov r8, r8)
 800f58c:	2000158c 	.word	0x2000158c
 800f590:	20001574 	.word	0x20001574
 800f594:	200014f4 	.word	0x200014f4
 800f598:	200014f8 	.word	0x200014f8
 800f59c:	200015fc 	.word	0x200015fc
 800f5a0:	200015e8 	.word	0x200015e8

0800f5a4 <vTaskSwitchContext>:
{
 800f5a4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f5a6:	4b3a      	ldr	r3, [pc, #232]	; (800f690 <vTaskSwitchContext+0xec>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d003      	beq.n	800f5b6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f5ae:	4b39      	ldr	r3, [pc, #228]	; (800f694 <vTaskSwitchContext+0xf0>)
 800f5b0:	2201      	movs	r2, #1
 800f5b2:	601a      	str	r2, [r3, #0]
}
 800f5b4:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f5b6:	4b37      	ldr	r3, [pc, #220]	; (800f694 <vTaskSwitchContext+0xf0>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f5bc:	f7f8 fd5a 	bl	8008074 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f5c0:	4b35      	ldr	r3, [pc, #212]	; (800f698 <vTaskSwitchContext+0xf4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4298      	cmp	r0, r3
 800f5c6:	d905      	bls.n	800f5d4 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f5c8:	4a34      	ldr	r2, [pc, #208]	; (800f69c <vTaskSwitchContext+0xf8>)
 800f5ca:	6812      	ldr	r2, [r2, #0]
 800f5cc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f5ce:	1acb      	subs	r3, r1, r3
 800f5d0:	181b      	adds	r3, r3, r0
 800f5d2:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f5d4:	4b30      	ldr	r3, [pc, #192]	; (800f698 <vTaskSwitchContext+0xf4>)
 800f5d6:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f5d8:	4b30      	ldr	r3, [pc, #192]	; (800f69c <vTaskSwitchContext+0xf8>)
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	6812      	ldr	r2, [r2, #0]
 800f5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d805      	bhi.n	800f5f2 <vTaskSwitchContext+0x4e>
 800f5e6:	4b2d      	ldr	r3, [pc, #180]	; (800f69c <vTaskSwitchContext+0xf8>)
 800f5e8:	6818      	ldr	r0, [r3, #0]
 800f5ea:	6819      	ldr	r1, [r3, #0]
 800f5ec:	3134      	adds	r1, #52	; 0x34
 800f5ee:	f7fe f9fb 	bl	800d9e8 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f5f2:	4b2a      	ldr	r3, [pc, #168]	; (800f69c <vTaskSwitchContext+0xf8>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f5f8:	2214      	movs	r2, #20
 800f5fa:	4929      	ldr	r1, [pc, #164]	; (800f6a0 <vTaskSwitchContext+0xfc>)
 800f5fc:	f004 fa06 	bl	8013a0c <memcmp>
 800f600:	2800      	cmp	r0, #0
 800f602:	d005      	beq.n	800f610 <vTaskSwitchContext+0x6c>
 800f604:	4b25      	ldr	r3, [pc, #148]	; (800f69c <vTaskSwitchContext+0xf8>)
 800f606:	6818      	ldr	r0, [r3, #0]
 800f608:	6819      	ldr	r1, [r3, #0]
 800f60a:	3134      	adds	r1, #52	; 0x34
 800f60c:	f7fe f9ec 	bl	800d9e8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f610:	4b24      	ldr	r3, [pc, #144]	; (800f6a4 <vTaskSwitchContext+0x100>)
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	0093      	lsls	r3, r2, #2
 800f616:	189b      	adds	r3, r3, r2
 800f618:	009b      	lsls	r3, r3, #2
 800f61a:	4a23      	ldr	r2, [pc, #140]	; (800f6a8 <vTaskSwitchContext+0x104>)
 800f61c:	589b      	ldr	r3, [r3, r2]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d115      	bne.n	800f64e <vTaskSwitchContext+0xaa>
 800f622:	4b20      	ldr	r3, [pc, #128]	; (800f6a4 <vTaskSwitchContext+0x100>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00f      	beq.n	800f64a <vTaskSwitchContext+0xa6>
 800f62a:	4a1e      	ldr	r2, [pc, #120]	; (800f6a4 <vTaskSwitchContext+0x100>)
 800f62c:	4c1e      	ldr	r4, [pc, #120]	; (800f6a8 <vTaskSwitchContext+0x104>)
 800f62e:	0010      	movs	r0, r2
 800f630:	6813      	ldr	r3, [r2, #0]
 800f632:	3b01      	subs	r3, #1
 800f634:	6013      	str	r3, [r2, #0]
 800f636:	6811      	ldr	r1, [r2, #0]
 800f638:	008b      	lsls	r3, r1, #2
 800f63a:	185b      	adds	r3, r3, r1
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	591b      	ldr	r3, [r3, r4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d104      	bne.n	800f64e <vTaskSwitchContext+0xaa>
 800f644:	6803      	ldr	r3, [r0, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d1f2      	bne.n	800f630 <vTaskSwitchContext+0x8c>
 800f64a:	b672      	cpsid	i
 800f64c:	e7fe      	b.n	800f64c <vTaskSwitchContext+0xa8>
 800f64e:	4b15      	ldr	r3, [pc, #84]	; (800f6a4 <vTaskSwitchContext+0x100>)
 800f650:	681a      	ldr	r2, [r3, #0]
 800f652:	4c15      	ldr	r4, [pc, #84]	; (800f6a8 <vTaskSwitchContext+0x104>)
 800f654:	0093      	lsls	r3, r2, #2
 800f656:	1899      	adds	r1, r3, r2
 800f658:	0089      	lsls	r1, r1, #2
 800f65a:	1861      	adds	r1, r4, r1
 800f65c:	6848      	ldr	r0, [r1, #4]
 800f65e:	6840      	ldr	r0, [r0, #4]
 800f660:	6048      	str	r0, [r1, #4]
 800f662:	189b      	adds	r3, r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	3308      	adds	r3, #8
 800f668:	191b      	adds	r3, r3, r4
 800f66a:	4298      	cmp	r0, r3
 800f66c:	d009      	beq.n	800f682 <vTaskSwitchContext+0xde>
 800f66e:	0093      	lsls	r3, r2, #2
 800f670:	189a      	adds	r2, r3, r2
 800f672:	0092      	lsls	r2, r2, #2
 800f674:	4b0c      	ldr	r3, [pc, #48]	; (800f6a8 <vTaskSwitchContext+0x104>)
 800f676:	189a      	adds	r2, r3, r2
 800f678:	6853      	ldr	r3, [r2, #4]
 800f67a:	68da      	ldr	r2, [r3, #12]
 800f67c:	4b07      	ldr	r3, [pc, #28]	; (800f69c <vTaskSwitchContext+0xf8>)
 800f67e:	601a      	str	r2, [r3, #0]
}
 800f680:	e798      	b.n	800f5b4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f682:	6840      	ldr	r0, [r0, #4]
 800f684:	2114      	movs	r1, #20
 800f686:	4351      	muls	r1, r2
 800f688:	1863      	adds	r3, r4, r1
 800f68a:	6058      	str	r0, [r3, #4]
 800f68c:	e7ef      	b.n	800f66e <vTaskSwitchContext+0xca>
 800f68e:	46c0      	nop			; (mov r8, r8)
 800f690:	20001594 	.word	0x20001594
 800f694:	20001614 	.word	0x20001614
 800f698:	20001588 	.word	0x20001588
 800f69c:	200014f0 	.word	0x200014f0
 800f6a0:	0801a984 	.word	0x0801a984
 800f6a4:	200015a0 	.word	0x200015a0
 800f6a8:	200014fc 	.word	0x200014fc

0800f6ac <vTaskPlaceOnEventList>:
{
 800f6ac:	b570      	push	{r4, r5, r6, lr}
 800f6ae:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d101      	bne.n	800f6b8 <vTaskPlaceOnEventList+0xc>
 800f6b4:	b672      	cpsid	i
 800f6b6:	e7fe      	b.n	800f6b6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f6b8:	4d0b      	ldr	r5, [pc, #44]	; (800f6e8 <vTaskPlaceOnEventList+0x3c>)
 800f6ba:	6829      	ldr	r1, [r5, #0]
 800f6bc:	3118      	adds	r1, #24
 800f6be:	f7ff f823 	bl	800e708 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f6c2:	6828      	ldr	r0, [r5, #0]
 800f6c4:	3004      	adds	r0, #4
 800f6c6:	f7ff f836 	bl	800e736 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f6ca:	1c63      	adds	r3, r4, #1
 800f6cc:	d005      	beq.n	800f6da <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800f6ce:	4b07      	ldr	r3, [pc, #28]	; (800f6ec <vTaskPlaceOnEventList+0x40>)
 800f6d0:	6818      	ldr	r0, [r3, #0]
 800f6d2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f6d4:	f7ff fbe4 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
}
 800f6d8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6da:	4b03      	ldr	r3, [pc, #12]	; (800f6e8 <vTaskPlaceOnEventList+0x3c>)
 800f6dc:	6819      	ldr	r1, [r3, #0]
 800f6de:	3104      	adds	r1, #4
 800f6e0:	4803      	ldr	r0, [pc, #12]	; (800f6f0 <vTaskPlaceOnEventList+0x44>)
 800f6e2:	f7ff f805 	bl	800e6f0 <vListInsertEnd>
 800f6e6:	e7f7      	b.n	800f6d8 <vTaskPlaceOnEventList+0x2c>
 800f6e8:	200014f0 	.word	0x200014f0
 800f6ec:	20001610 	.word	0x20001610
 800f6f0:	200015e8 	.word	0x200015e8

0800f6f4 <vTaskPlaceOnEventListRestricted>:
	{
 800f6f4:	b570      	push	{r4, r5, r6, lr}
 800f6f6:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d101      	bne.n	800f700 <vTaskPlaceOnEventListRestricted+0xc>
 800f6fc:	b672      	cpsid	i
 800f6fe:	e7fe      	b.n	800f6fe <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f700:	4c07      	ldr	r4, [pc, #28]	; (800f720 <vTaskPlaceOnEventListRestricted+0x2c>)
 800f702:	6821      	ldr	r1, [r4, #0]
 800f704:	3118      	adds	r1, #24
 800f706:	f7fe fff3 	bl	800e6f0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f70a:	6820      	ldr	r0, [r4, #0]
 800f70c:	3004      	adds	r0, #4
 800f70e:	f7ff f812 	bl	800e736 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f712:	4b04      	ldr	r3, [pc, #16]	; (800f724 <vTaskPlaceOnEventListRestricted+0x30>)
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f718:	f7ff fbc2 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
	}
 800f71c:	bd70      	pop	{r4, r5, r6, pc}
 800f71e:	46c0      	nop			; (mov r8, r8)
 800f720:	200014f0 	.word	0x200014f0
 800f724:	20001610 	.word	0x20001610

0800f728 <xTaskRemoveFromEventList>:
{
 800f728:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f72a:	68c3      	ldr	r3, [r0, #12]
 800f72c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f72e:	2d00      	cmp	r5, #0
 800f730:	d101      	bne.n	800f736 <xTaskRemoveFromEventList+0xe>
 800f732:	b672      	cpsid	i
 800f734:	e7fe      	b.n	800f734 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f736:	002c      	movs	r4, r5
 800f738:	3418      	adds	r4, #24
 800f73a:	0020      	movs	r0, r4
 800f73c:	f7fe fffb 	bl	800e736 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f740:	4b13      	ldr	r3, [pc, #76]	; (800f790 <xTaskRemoveFromEventList+0x68>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d11e      	bne.n	800f786 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f748:	1d2c      	adds	r4, r5, #4
 800f74a:	0020      	movs	r0, r4
 800f74c:	f7fe fff3 	bl	800e736 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f750:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f752:	4a10      	ldr	r2, [pc, #64]	; (800f794 <xTaskRemoveFromEventList+0x6c>)
 800f754:	6812      	ldr	r2, [r2, #0]
 800f756:	4293      	cmp	r3, r2
 800f758:	d901      	bls.n	800f75e <xTaskRemoveFromEventList+0x36>
 800f75a:	4a0e      	ldr	r2, [pc, #56]	; (800f794 <xTaskRemoveFromEventList+0x6c>)
 800f75c:	6013      	str	r3, [r2, #0]
 800f75e:	0098      	lsls	r0, r3, #2
 800f760:	18c0      	adds	r0, r0, r3
 800f762:	0080      	lsls	r0, r0, #2
 800f764:	4b0c      	ldr	r3, [pc, #48]	; (800f798 <xTaskRemoveFromEventList+0x70>)
 800f766:	18c0      	adds	r0, r0, r3
 800f768:	0021      	movs	r1, r4
 800f76a:	f7fe ffc1 	bl	800e6f0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f76e:	4b0b      	ldr	r3, [pc, #44]	; (800f79c <xTaskRemoveFromEventList+0x74>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f776:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f778:	429a      	cmp	r2, r3
 800f77a:	d903      	bls.n	800f784 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800f77c:	4b08      	ldr	r3, [pc, #32]	; (800f7a0 <xTaskRemoveFromEventList+0x78>)
 800f77e:	2201      	movs	r2, #1
 800f780:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f782:	3001      	adds	r0, #1
}
 800f784:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f786:	0021      	movs	r1, r4
 800f788:	4806      	ldr	r0, [pc, #24]	; (800f7a4 <xTaskRemoveFromEventList+0x7c>)
 800f78a:	f7fe ffb1 	bl	800e6f0 <vListInsertEnd>
 800f78e:	e7ee      	b.n	800f76e <xTaskRemoveFromEventList+0x46>
 800f790:	20001594 	.word	0x20001594
 800f794:	200015a0 	.word	0x200015a0
 800f798:	200014fc 	.word	0x200014fc
 800f79c:	200014f0 	.word	0x200014f0
 800f7a0:	20001614 	.word	0x20001614
 800f7a4:	200015d0 	.word	0x200015d0

0800f7a8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d006      	beq.n	800f7ba <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f7ac:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <vTaskSetTimeOutState+0x18>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f7b2:	4b04      	ldr	r3, [pc, #16]	; (800f7c4 <vTaskSetTimeOutState+0x1c>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	6043      	str	r3, [r0, #4]
}
 800f7b8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800f7ba:	b672      	cpsid	i
 800f7bc:	e7fe      	b.n	800f7bc <vTaskSetTimeOutState+0x14>
 800f7be:	46c0      	nop			; (mov r8, r8)
 800f7c0:	200015cc 	.word	0x200015cc
 800f7c4:	20001610 	.word	0x20001610

0800f7c8 <xTaskCheckForTimeOut>:
{
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	0004      	movs	r4, r0
 800f7cc:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800f7ce:	2800      	cmp	r0, #0
 800f7d0:	d003      	beq.n	800f7da <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800f7d2:	2900      	cmp	r1, #0
 800f7d4:	d103      	bne.n	800f7de <xTaskCheckForTimeOut+0x16>
 800f7d6:	b672      	cpsid	i
 800f7d8:	e7fe      	b.n	800f7d8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800f7da:	b672      	cpsid	i
 800f7dc:	e7fe      	b.n	800f7dc <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800f7de:	f000 fc5f 	bl	80100a0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f7e2:	4b10      	ldr	r3, [pc, #64]	; (800f824 <xTaskCheckForTimeOut+0x5c>)
 800f7e4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f7e6:	6833      	ldr	r3, [r6, #0]
 800f7e8:	1c59      	adds	r1, r3, #1
 800f7ea:	d019      	beq.n	800f820 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7ec:	490e      	ldr	r1, [pc, #56]	; (800f828 <xTaskCheckForTimeOut+0x60>)
 800f7ee:	6809      	ldr	r1, [r1, #0]
 800f7f0:	6820      	ldr	r0, [r4, #0]
 800f7f2:	4288      	cmp	r0, r1
 800f7f4:	d003      	beq.n	800f7fe <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800f7f6:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7f8:	6861      	ldr	r1, [r4, #4]
 800f7fa:	4291      	cmp	r1, r2
 800f7fc:	d904      	bls.n	800f808 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f7fe:	6861      	ldr	r1, [r4, #4]
 800f800:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800f802:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f804:	4283      	cmp	r3, r0
 800f806:	d803      	bhi.n	800f810 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800f808:	f000 fc56 	bl	80100b8 <vPortExitCritical>
}
 800f80c:	0028      	movs	r0, r5
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f810:	1a9b      	subs	r3, r3, r2
 800f812:	185b      	adds	r3, r3, r1
 800f814:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f816:	0020      	movs	r0, r4
 800f818:	f7ff ffc6 	bl	800f7a8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f81c:	2500      	movs	r5, #0
 800f81e:	e7f3      	b.n	800f808 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800f820:	2500      	movs	r5, #0
 800f822:	e7f1      	b.n	800f808 <xTaskCheckForTimeOut+0x40>
 800f824:	20001610 	.word	0x20001610
 800f828:	200015cc 	.word	0x200015cc

0800f82c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f82c:	4b01      	ldr	r3, [pc, #4]	; (800f834 <vTaskMissedYield+0x8>)
 800f82e:	2201      	movs	r2, #1
 800f830:	601a      	str	r2, [r3, #0]
}
 800f832:	4770      	bx	lr
 800f834:	20001614 	.word	0x20001614

0800f838 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f838:	4b05      	ldr	r3, [pc, #20]	; (800f850 <xTaskGetSchedulerState+0x18>)
 800f83a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f83c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d004      	beq.n	800f84c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f842:	4b04      	ldr	r3, [pc, #16]	; (800f854 <xTaskGetSchedulerState+0x1c>)
 800f844:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f846:	4243      	negs	r3, r0
 800f848:	4158      	adcs	r0, r3
 800f84a:	0040      	lsls	r0, r0, #1
	}
 800f84c:	4770      	bx	lr
 800f84e:	46c0      	nop			; (mov r8, r8)
 800f850:	200015e4 	.word	0x200015e4
 800f854:	20001594 	.word	0x20001594

0800f858 <vTaskPriorityInherit>:
	{
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f85c:	d01a      	beq.n	800f894 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f85e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f860:	4b19      	ldr	r3, [pc, #100]	; (800f8c8 <vTaskPriorityInherit+0x70>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f866:	429a      	cmp	r2, r3
 800f868:	d214      	bcs.n	800f894 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f86a:	6983      	ldr	r3, [r0, #24]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	db05      	blt.n	800f87c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f870:	4b15      	ldr	r3, [pc, #84]	; (800f8c8 <vTaskPriorityInherit+0x70>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f876:	2307      	movs	r3, #7
 800f878:	1a5b      	subs	r3, r3, r1
 800f87a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f87c:	0093      	lsls	r3, r2, #2
 800f87e:	189b      	adds	r3, r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	4a12      	ldr	r2, [pc, #72]	; (800f8cc <vTaskPriorityInherit+0x74>)
 800f884:	189b      	adds	r3, r3, r2
 800f886:	6962      	ldr	r2, [r4, #20]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d004      	beq.n	800f896 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f88c:	4b0e      	ldr	r3, [pc, #56]	; (800f8c8 <vTaskPriorityInherit+0x70>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f892:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f894:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f896:	1d25      	adds	r5, r4, #4
 800f898:	0028      	movs	r0, r5
 800f89a:	f7fe ff4c 	bl	800e736 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f89e:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <vTaskPriorityInherit+0x70>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f8a6:	4a0a      	ldr	r2, [pc, #40]	; (800f8d0 <vTaskPriorityInherit+0x78>)
 800f8a8:	6812      	ldr	r2, [r2, #0]
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d808      	bhi.n	800f8c0 <vTaskPriorityInherit+0x68>
 800f8ae:	0098      	lsls	r0, r3, #2
 800f8b0:	18c0      	adds	r0, r0, r3
 800f8b2:	0080      	lsls	r0, r0, #2
 800f8b4:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <vTaskPriorityInherit+0x74>)
 800f8b6:	18c0      	adds	r0, r0, r3
 800f8b8:	0029      	movs	r1, r5
 800f8ba:	f7fe ff19 	bl	800e6f0 <vListInsertEnd>
	}
 800f8be:	e7e9      	b.n	800f894 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f8c0:	4a03      	ldr	r2, [pc, #12]	; (800f8d0 <vTaskPriorityInherit+0x78>)
 800f8c2:	6013      	str	r3, [r2, #0]
 800f8c4:	e7f3      	b.n	800f8ae <vTaskPriorityInherit+0x56>
 800f8c6:	46c0      	nop			; (mov r8, r8)
 800f8c8:	200014f0 	.word	0x200014f0
 800f8cc:	200014fc 	.word	0x200014fc
 800f8d0:	200015a0 	.word	0x200015a0

0800f8d4 <xTaskPriorityDisinherit>:
	{
 800f8d4:	b570      	push	{r4, r5, r6, lr}
 800f8d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f8d8:	d02b      	beq.n	800f932 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 800f8da:	4b18      	ldr	r3, [pc, #96]	; (800f93c <xTaskPriorityDisinherit+0x68>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4283      	cmp	r3, r0
 800f8e0:	d001      	beq.n	800f8e6 <xTaskPriorityDisinherit+0x12>
 800f8e2:	b672      	cpsid	i
 800f8e4:	e7fe      	b.n	800f8e4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d101      	bne.n	800f8f0 <xTaskPriorityDisinherit+0x1c>
 800f8ec:	b672      	cpsid	i
 800f8ee:	e7fe      	b.n	800f8ee <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f8f6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f8f8:	428a      	cmp	r2, r1
 800f8fa:	d01c      	beq.n	800f936 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800f8fc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8fe:	4283      	cmp	r3, r0
 800f900:	d118      	bne.n	800f934 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f902:	1d25      	adds	r5, r4, #4
 800f904:	0028      	movs	r0, r5
 800f906:	f7fe ff16 	bl	800e736 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f90a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f90c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f90e:	2207      	movs	r2, #7
 800f910:	1ad2      	subs	r2, r2, r3
 800f912:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f914:	4a0a      	ldr	r2, [pc, #40]	; (800f940 <xTaskPriorityDisinherit+0x6c>)
 800f916:	6812      	ldr	r2, [r2, #0]
 800f918:	4293      	cmp	r3, r2
 800f91a:	d901      	bls.n	800f920 <xTaskPriorityDisinherit+0x4c>
 800f91c:	4a08      	ldr	r2, [pc, #32]	; (800f940 <xTaskPriorityDisinherit+0x6c>)
 800f91e:	6013      	str	r3, [r2, #0]
 800f920:	2014      	movs	r0, #20
 800f922:	4358      	muls	r0, r3
 800f924:	4b07      	ldr	r3, [pc, #28]	; (800f944 <xTaskPriorityDisinherit+0x70>)
 800f926:	18c0      	adds	r0, r0, r3
 800f928:	0029      	movs	r1, r5
 800f92a:	f7fe fee1 	bl	800e6f0 <vListInsertEnd>
					xReturn = pdTRUE;
 800f92e:	2001      	movs	r0, #1
 800f930:	e000      	b.n	800f934 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 800f932:	2000      	movs	r0, #0
	}
 800f934:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800f936:	2000      	movs	r0, #0
 800f938:	e7fc      	b.n	800f934 <xTaskPriorityDisinherit+0x60>
 800f93a:	46c0      	nop			; (mov r8, r8)
 800f93c:	200014f0 	.word	0x200014f0
 800f940:	200015a0 	.word	0x200015a0
 800f944:	200014fc 	.word	0x200014fc

0800f948 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f94a:	b085      	sub	sp, #20
 800f94c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f94e:	2300      	movs	r3, #0
 800f950:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f952:	4b2b      	ldr	r3, [pc, #172]	; (800fa00 <vTaskList+0xb8>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f958:	6818      	ldr	r0, [r3, #0]
 800f95a:	0140      	lsls	r0, r0, #5
 800f95c:	f000 fc22 	bl	80101a4 <pvPortMalloc>
 800f960:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f962:	d04a      	beq.n	800f9fa <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f964:	9903      	ldr	r1, [sp, #12]
 800f966:	2200      	movs	r2, #0
 800f968:	f7ff fdca 	bl	800f500 <uxTaskGetSystemState>
 800f96c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f96e:	2300      	movs	r3, #0
 800f970:	9302      	str	r3, [sp, #8]
 800f972:	9a02      	ldr	r2, [sp, #8]
 800f974:	9b03      	ldr	r3, [sp, #12]
 800f976:	429a      	cmp	r2, r3
 800f978:	d23c      	bcs.n	800f9f4 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f97a:	4e22      	ldr	r6, [pc, #136]	; (800fa04 <vTaskList+0xbc>)
 800f97c:	e027      	b.n	800f9ce <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800f97e:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f980:	2b01      	cmp	r3, #1
 800f982:	d133      	bne.n	800f9ec <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f984:	9b02      	ldr	r3, [sp, #8]
 800f986:	015b      	lsls	r3, r3, #5
 800f988:	18fb      	adds	r3, r7, r3
 800f98a:	6859      	ldr	r1, [r3, #4]
 800f98c:	0020      	movs	r0, r4
 800f98e:	f7ff fab1 	bl	800eef4 <prvWriteNameToBuffer>
 800f992:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f994:	9b02      	ldr	r3, [sp, #8]
 800f996:	9a02      	ldr	r2, [sp, #8]
 800f998:	9902      	ldr	r1, [sp, #8]
 800f99a:	015b      	lsls	r3, r3, #5
 800f99c:	18fb      	adds	r3, r7, r3
 800f99e:	691b      	ldr	r3, [r3, #16]
 800f9a0:	0149      	lsls	r1, r1, #5
 800f9a2:	1879      	adds	r1, r7, r1
 800f9a4:	6889      	ldr	r1, [r1, #8]
 800f9a6:	9101      	str	r1, [sp, #4]
 800f9a8:	0152      	lsls	r2, r2, #5
 800f9aa:	18ba      	adds	r2, r7, r2
 800f9ac:	8b92      	ldrh	r2, [r2, #28]
 800f9ae:	9200      	str	r2, [sp, #0]
 800f9b0:	002a      	movs	r2, r5
 800f9b2:	0031      	movs	r1, r6
 800f9b4:	f004 ffa0 	bl	80148f8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f9b8:	0020      	movs	r0, r4
 800f9ba:	f7f0 fbad 	bl	8000118 <strlen>
 800f9be:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f9c0:	9b02      	ldr	r3, [sp, #8]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	9302      	str	r3, [sp, #8]
 800f9c6:	9a02      	ldr	r2, [sp, #8]
 800f9c8:	9b03      	ldr	r3, [sp, #12]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d212      	bcs.n	800f9f4 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f9ce:	9b02      	ldr	r3, [sp, #8]
 800f9d0:	015b      	lsls	r3, r3, #5
 800f9d2:	18fb      	adds	r3, r7, r3
 800f9d4:	7b1b      	ldrb	r3, [r3, #12]
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	d00a      	beq.n	800f9f0 <vTaskList+0xa8>
 800f9da:	b2da      	uxtb	r2, r3
 800f9dc:	2a02      	cmp	r2, #2
 800f9de:	d9ce      	bls.n	800f97e <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f9e0:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f9e2:	2b03      	cmp	r3, #3
 800f9e4:	d0ce      	beq.n	800f984 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f9e6:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f9e8:	2b04      	cmp	r3, #4
 800f9ea:	d0cb      	beq.n	800f984 <vTaskList+0x3c>
										cStatus = 0x00;
 800f9ec:	2500      	movs	r5, #0
										break;
 800f9ee:	e7c9      	b.n	800f984 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f9f0:	2542      	movs	r5, #66	; 0x42
 800f9f2:	e7c7      	b.n	800f984 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f9f4:	0038      	movs	r0, r7
 800f9f6:	f000 fc6b 	bl	80102d0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9fa:	b005      	add	sp, #20
 800f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fe:	46c0      	nop			; (mov r8, r8)
 800fa00:	2000158c 	.word	0x2000158c
 800fa04:	0801a9b0 	.word	0x0801a9b0

0800fa08 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fa08:	b570      	push	{r4, r5, r6, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fa12:	4b26      	ldr	r3, [pc, #152]	; (800faac <vTaskGetRunTimeStats+0xa4>)
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fa18:	6818      	ldr	r0, [r3, #0]
 800fa1a:	0140      	lsls	r0, r0, #5
 800fa1c:	f000 fbc2 	bl	80101a4 <pvPortMalloc>
 800fa20:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800fa22:	d014      	beq.n	800fa4e <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fa24:	9903      	ldr	r1, [sp, #12]
 800fa26:	aa01      	add	r2, sp, #4
 800fa28:	f7ff fd6a 	bl	800f500 <uxTaskGetSystemState>
 800fa2c:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fa2e:	2164      	movs	r1, #100	; 0x64
 800fa30:	9801      	ldr	r0, [sp, #4]
 800fa32:	f7f0 fb83 	bl	800013c <__udivsi3>
 800fa36:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	d005      	beq.n	800fa48 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	9302      	str	r3, [sp, #8]
 800fa40:	9a02      	ldr	r2, [sp, #8]
 800fa42:	9b03      	ldr	r3, [sp, #12]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d316      	bcc.n	800fa76 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fa48:	0030      	movs	r0, r6
 800fa4a:	f000 fc41 	bl	80102d0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa4e:	b004      	add	sp, #16
 800fa50:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800fa52:	9b02      	ldr	r3, [sp, #8]
 800fa54:	015b      	lsls	r3, r3, #5
 800fa56:	18f3      	adds	r3, r6, r3
 800fa58:	699a      	ldr	r2, [r3, #24]
 800fa5a:	4915      	ldr	r1, [pc, #84]	; (800fab0 <vTaskGetRunTimeStats+0xa8>)
 800fa5c:	f004 ff4c 	bl	80148f8 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800fa60:	0020      	movs	r0, r4
 800fa62:	f7f0 fb59 	bl	8000118 <strlen>
 800fa66:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800fa68:	9b02      	ldr	r3, [sp, #8]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	9302      	str	r3, [sp, #8]
 800fa6e:	9a02      	ldr	r2, [sp, #8]
 800fa70:	9b03      	ldr	r3, [sp, #12]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d2e8      	bcs.n	800fa48 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fa76:	9b02      	ldr	r3, [sp, #8]
 800fa78:	015b      	lsls	r3, r3, #5
 800fa7a:	18f3      	adds	r3, r6, r3
 800fa7c:	9901      	ldr	r1, [sp, #4]
 800fa7e:	6998      	ldr	r0, [r3, #24]
 800fa80:	f7f0 fb5c 	bl	800013c <__udivsi3>
 800fa84:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fa86:	9b02      	ldr	r3, [sp, #8]
 800fa88:	015b      	lsls	r3, r3, #5
 800fa8a:	18f3      	adds	r3, r6, r3
 800fa8c:	6859      	ldr	r1, [r3, #4]
 800fa8e:	0020      	movs	r0, r4
 800fa90:	f7ff fa30 	bl	800eef4 <prvWriteNameToBuffer>
 800fa94:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800fa96:	2d00      	cmp	r5, #0
 800fa98:	d0db      	beq.n	800fa52 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800fa9a:	9b02      	ldr	r3, [sp, #8]
 800fa9c:	015b      	lsls	r3, r3, #5
 800fa9e:	18f3      	adds	r3, r6, r3
 800faa0:	699a      	ldr	r2, [r3, #24]
 800faa2:	002b      	movs	r3, r5
 800faa4:	4903      	ldr	r1, [pc, #12]	; (800fab4 <vTaskGetRunTimeStats+0xac>)
 800faa6:	f004 ff27 	bl	80148f8 <siprintf>
 800faaa:	e7d9      	b.n	800fa60 <vTaskGetRunTimeStats+0x58>
 800faac:	2000158c 	.word	0x2000158c
 800fab0:	0801a9a4 	.word	0x0801a9a4
 800fab4:	0801a998 	.word	0x0801a998

0800fab8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fab8:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <pvTaskIncrementMutexHeldCount+0x18>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d004      	beq.n	800faca <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fac0:	4b03      	ldr	r3, [pc, #12]	; (800fad0 <pvTaskIncrementMutexHeldCount+0x18>)
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800fac6:	3301      	adds	r3, #1
 800fac8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800faca:	4b01      	ldr	r3, [pc, #4]	; (800fad0 <pvTaskIncrementMutexHeldCount+0x18>)
 800facc:	6818      	ldr	r0, [r3, #0]
	}
 800face:	4770      	bx	lr
 800fad0:	200014f0 	.word	0x200014f0

0800fad4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	0005      	movs	r5, r0
 800fad8:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fada:	f000 fae1 	bl	80100a0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fade:	4b20      	ldr	r3, [pc, #128]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d106      	bne.n	800faf6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800fae8:	4b1d      	ldr	r3, [pc, #116]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	235c      	movs	r3, #92	; 0x5c
 800faee:	2101      	movs	r1, #1
 800faf0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800faf2:	2c00      	cmp	r4, #0
 800faf4:	d118      	bne.n	800fb28 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800faf6:	f000 fadf 	bl	80100b8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fafa:	f000 fad1 	bl	80100a0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fafe:	4b18      	ldr	r3, [pc, #96]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800fb04:	2c00      	cmp	r4, #0
 800fb06:	d006      	beq.n	800fb16 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800fb08:	2d00      	cmp	r5, #0
 800fb0a:	d123      	bne.n	800fb54 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800fb0c:	4b14      	ldr	r3, [pc, #80]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fb12:	3b01      	subs	r3, #1
 800fb14:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800fb16:	4b12      	ldr	r3, [pc, #72]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	235c      	movs	r3, #92	; 0x5c
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800fb20:	f000 faca 	bl	80100b8 <vPortExitCritical>

		return ulReturn;
	}
 800fb24:	0020      	movs	r0, r4
 800fb26:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fb28:	4b0d      	ldr	r3, [pc, #52]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fb2a:	6818      	ldr	r0, [r3, #0]
 800fb2c:	3004      	adds	r0, #4
 800fb2e:	f7fe fe02 	bl	800e736 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800fb32:	1c63      	adds	r3, r4, #1
 800fb34:	d007      	beq.n	800fb46 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800fb36:	4b0b      	ldr	r3, [pc, #44]	; (800fb64 <ulTaskNotifyTake+0x90>)
 800fb38:	6818      	ldr	r0, [r3, #0]
 800fb3a:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fb3c:	f7ff f9b0 	bl	800eea0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800fb40:	f000 faa2 	bl	8010088 <vPortYield>
 800fb44:	e7d7      	b.n	800faf6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fb46:	4b06      	ldr	r3, [pc, #24]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fb48:	6819      	ldr	r1, [r3, #0]
 800fb4a:	3104      	adds	r1, #4
 800fb4c:	4806      	ldr	r0, [pc, #24]	; (800fb68 <ulTaskNotifyTake+0x94>)
 800fb4e:	f7fe fdcf 	bl	800e6f0 <vListInsertEnd>
 800fb52:	e7f5      	b.n	800fb40 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fb54:	4b02      	ldr	r3, [pc, #8]	; (800fb60 <ulTaskNotifyTake+0x8c>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	659a      	str	r2, [r3, #88]	; 0x58
 800fb5c:	e7db      	b.n	800fb16 <ulTaskNotifyTake+0x42>
 800fb5e:	46c0      	nop			; (mov r8, r8)
 800fb60:	200014f0 	.word	0x200014f0
 800fb64:	20001610 	.word	0x20001610
 800fb68:	200015e8 	.word	0x200015e8

0800fb6c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6e:	0004      	movs	r4, r0
 800fb70:	000e      	movs	r6, r1
 800fb72:	0015      	movs	r5, r2
 800fb74:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d101      	bne.n	800fb7e <xTaskGenericNotify+0x12>
 800fb7a:	b672      	cpsid	i
 800fb7c:	e7fe      	b.n	800fb7c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800fb7e:	f000 fa8f 	bl	80100a0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fb82:	2f00      	cmp	r7, #0
 800fb84:	d001      	beq.n	800fb8a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fb86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fb88:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800fb8a:	225c      	movs	r2, #92	; 0x5c
 800fb8c:	5ca3      	ldrb	r3, [r4, r2]
 800fb8e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800fb90:	2102      	movs	r1, #2
 800fb92:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800fb94:	2d02      	cmp	r5, #2
 800fb96:	d015      	beq.n	800fbc4 <xTaskGenericNotify+0x58>
 800fb98:	d907      	bls.n	800fbaa <xTaskGenericNotify+0x3e>
 800fb9a:	2d03      	cmp	r5, #3
 800fb9c:	d016      	beq.n	800fbcc <xTaskGenericNotify+0x60>
 800fb9e:	2d04      	cmp	r5, #4
 800fba0:	d105      	bne.n	800fbae <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d035      	beq.n	800fc12 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fba6:	65a6      	str	r6, [r4, #88]	; 0x58
 800fba8:	e001      	b.n	800fbae <xTaskGenericNotify+0x42>
			switch( eAction )
 800fbaa:	2d01      	cmp	r5, #1
 800fbac:	d006      	beq.n	800fbbc <xTaskGenericNotify+0x50>
 800fbae:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d00d      	beq.n	800fbd0 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fbb4:	f000 fa80 	bl	80100b8 <vPortExitCritical>

		return xReturn;
	}
 800fbb8:	0028      	movs	r0, r5
 800fbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800fbbc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fbbe:	4316      	orrs	r6, r2
 800fbc0:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fbc2:	e7f4      	b.n	800fbae <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 800fbc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fbc6:	3201      	adds	r2, #1
 800fbc8:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800fbca:	e7f0      	b.n	800fbae <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 800fbcc:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 800fbce:	e7ee      	b.n	800fbae <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fbd0:	1d25      	adds	r5, r4, #4
 800fbd2:	0028      	movs	r0, r5
 800fbd4:	f7fe fdaf 	bl	800e736 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fbd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbda:	4a0f      	ldr	r2, [pc, #60]	; (800fc18 <xTaskGenericNotify+0xac>)
 800fbdc:	6812      	ldr	r2, [r2, #0]
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d901      	bls.n	800fbe6 <xTaskGenericNotify+0x7a>
 800fbe2:	4a0d      	ldr	r2, [pc, #52]	; (800fc18 <xTaskGenericNotify+0xac>)
 800fbe4:	6013      	str	r3, [r2, #0]
 800fbe6:	2014      	movs	r0, #20
 800fbe8:	4358      	muls	r0, r3
 800fbea:	4b0c      	ldr	r3, [pc, #48]	; (800fc1c <xTaskGenericNotify+0xb0>)
 800fbec:	18c0      	adds	r0, r0, r3
 800fbee:	0029      	movs	r1, r5
 800fbf0:	f7fe fd7e 	bl	800e6f0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fbf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d001      	beq.n	800fbfe <xTaskGenericNotify+0x92>
 800fbfa:	b672      	cpsid	i
 800fbfc:	e7fe      	b.n	800fbfc <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbfe:	4b08      	ldr	r3, [pc, #32]	; (800fc20 <xTaskGenericNotify+0xb4>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc06:	2501      	movs	r5, #1
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d9d3      	bls.n	800fbb4 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 800fc0c:	f000 fa3c 	bl	8010088 <vPortYield>
 800fc10:	e7d0      	b.n	800fbb4 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800fc12:	2500      	movs	r5, #0
 800fc14:	e7ce      	b.n	800fbb4 <xTaskGenericNotify+0x48>
 800fc16:	46c0      	nop			; (mov r8, r8)
 800fc18:	200015a0 	.word	0x200015a0
 800fc1c:	200014fc 	.word	0x200014fc
 800fc20:	200014f0 	.word	0x200014f0

0800fc24 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc24:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc26:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc28:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc2a:	4291      	cmp	r1, r2
 800fc2c:	d80b      	bhi.n	800fc46 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fc2e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc30:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fc32:	6983      	ldr	r3, [r0, #24]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d211      	bcs.n	800fc5c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fc38:	1d01      	adds	r1, r0, #4
 800fc3a:	4b09      	ldr	r3, [pc, #36]	; (800fc60 <prvInsertTimerInActiveList+0x3c>)
 800fc3c:	6818      	ldr	r0, [r3, #0]
 800fc3e:	f7fe fd63 	bl	800e708 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fc42:	2400      	movs	r4, #0
 800fc44:	e00a      	b.n	800fc5c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d202      	bcs.n	800fc50 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fc4a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fc4c:	4299      	cmp	r1, r3
 800fc4e:	d205      	bcs.n	800fc5c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc50:	1d01      	adds	r1, r0, #4
 800fc52:	4b04      	ldr	r3, [pc, #16]	; (800fc64 <prvInsertTimerInActiveList+0x40>)
 800fc54:	6818      	ldr	r0, [r3, #0]
 800fc56:	f7fe fd57 	bl	800e708 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fc5a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800fc5c:	0020      	movs	r0, r4
 800fc5e:	bd10      	pop	{r4, pc}
 800fc60:	2000161c 	.word	0x2000161c
 800fc64:	20001618 	.word	0x20001618

0800fc68 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc68:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fc6a:	f000 fa19 	bl	80100a0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc6e:	4b11      	ldr	r3, [pc, #68]	; (800fcb4 <prvCheckForValidListAndQueue+0x4c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc76:	f000 fa1f 	bl	80100b8 <vPortExitCritical>
}
 800fc7a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800fc7c:	4d0e      	ldr	r5, [pc, #56]	; (800fcb8 <prvCheckForValidListAndQueue+0x50>)
 800fc7e:	0028      	movs	r0, r5
 800fc80:	f7fe fd28 	bl	800e6d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc84:	4c0d      	ldr	r4, [pc, #52]	; (800fcbc <prvCheckForValidListAndQueue+0x54>)
 800fc86:	0020      	movs	r0, r4
 800fc88:	f7fe fd24 	bl	800e6d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc8c:	4b0c      	ldr	r3, [pc, #48]	; (800fcc0 <prvCheckForValidListAndQueue+0x58>)
 800fc8e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc90:	4b0c      	ldr	r3, [pc, #48]	; (800fcc4 <prvCheckForValidListAndQueue+0x5c>)
 800fc92:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fc94:	2200      	movs	r2, #0
 800fc96:	2110      	movs	r1, #16
 800fc98:	2004      	movs	r0, #4
 800fc9a:	f7fe fe26 	bl	800e8ea <xQueueGenericCreate>
 800fc9e:	4b05      	ldr	r3, [pc, #20]	; (800fcb4 <prvCheckForValidListAndQueue+0x4c>)
 800fca0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d101      	bne.n	800fcaa <prvCheckForValidListAndQueue+0x42>
 800fca6:	b672      	cpsid	i
 800fca8:	e7fe      	b.n	800fca8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fcaa:	4907      	ldr	r1, [pc, #28]	; (800fcc8 <prvCheckForValidListAndQueue+0x60>)
 800fcac:	f7ff f856 	bl	800ed5c <vQueueAddToRegistry>
 800fcb0:	e7e1      	b.n	800fc76 <prvCheckForValidListAndQueue+0xe>
 800fcb2:	46c0      	nop			; (mov r8, r8)
 800fcb4:	2000164c 	.word	0x2000164c
 800fcb8:	20001620 	.word	0x20001620
 800fcbc:	20001634 	.word	0x20001634
 800fcc0:	20001618 	.word	0x20001618
 800fcc4:	2000161c 	.word	0x2000161c
 800fcc8:	0801a9f0 	.word	0x0801a9f0

0800fccc <xTimerCreateTimerTask>:
{
 800fccc:	b500      	push	{lr}
 800fcce:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fcd0:	f7ff ffca 	bl	800fc68 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fcd4:	4b0a      	ldr	r3, [pc, #40]	; (800fd00 <xTimerCreateTimerTask+0x34>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00d      	beq.n	800fcf8 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800fcdc:	2300      	movs	r3, #0
 800fcde:	9303      	str	r3, [sp, #12]
 800fce0:	9302      	str	r3, [sp, #8]
 800fce2:	9301      	str	r3, [sp, #4]
 800fce4:	3303      	adds	r3, #3
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	2300      	movs	r3, #0
 800fcea:	22a0      	movs	r2, #160	; 0xa0
 800fcec:	4905      	ldr	r1, [pc, #20]	; (800fd04 <xTimerCreateTimerTask+0x38>)
 800fcee:	4806      	ldr	r0, [pc, #24]	; (800fd08 <xTimerCreateTimerTask+0x3c>)
 800fcf0:	f7ff f918 	bl	800ef24 <xTaskGenericCreate>
	configASSERT( xReturn );
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d101      	bne.n	800fcfc <xTimerCreateTimerTask+0x30>
 800fcf8:	b672      	cpsid	i
 800fcfa:	e7fe      	b.n	800fcfa <xTimerCreateTimerTask+0x2e>
}
 800fcfc:	b005      	add	sp, #20
 800fcfe:	bd00      	pop	{pc}
 800fd00:	2000164c 	.word	0x2000164c
 800fd04:	0801a9f8 	.word	0x0801a9f8
 800fd08:	0800fe55 	.word	0x0800fe55

0800fd0c <xTimerCreate>:
{
 800fd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd0e:	46c6      	mov	lr, r8
 800fd10:	b500      	push	{lr}
 800fd12:	4680      	mov	r8, r0
 800fd14:	000d      	movs	r5, r1
 800fd16:	0017      	movs	r7, r2
 800fd18:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fd1a:	2900      	cmp	r1, #0
 800fd1c:	d014      	beq.n	800fd48 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fd1e:	202c      	movs	r0, #44	; 0x2c
 800fd20:	f000 fa40 	bl	80101a4 <pvPortMalloc>
 800fd24:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fd26:	d00b      	beq.n	800fd40 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 800fd28:	f7ff ff9e 	bl	800fc68 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fd2c:	4643      	mov	r3, r8
 800fd2e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fd30:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fd32:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fd34:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fd36:	9b06      	ldr	r3, [sp, #24]
 800fd38:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fd3a:	1d20      	adds	r0, r4, #4
 800fd3c:	f7fe fcd5 	bl	800e6ea <vListInitialiseItem>
}
 800fd40:	0020      	movs	r0, r4
 800fd42:	bc04      	pop	{r2}
 800fd44:	4690      	mov	r8, r2
 800fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fd48:	b672      	cpsid	i
 800fd4a:	e7fe      	b.n	800fd4a <xTimerCreate+0x3e>

0800fd4c <xTimerGenericCommand>:
{
 800fd4c:	b530      	push	{r4, r5, lr}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fd52:	4b13      	ldr	r3, [pc, #76]	; (800fda0 <xTimerGenericCommand+0x54>)
 800fd54:	681c      	ldr	r4, [r3, #0]
 800fd56:	2c00      	cmp	r4, #0
 800fd58:	d020      	beq.n	800fd9c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fd5a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fd5c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fd5e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fd60:	2905      	cmp	r1, #5
 800fd62:	dc13      	bgt.n	800fd8c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fd64:	f7ff fd68 	bl	800f838 <xTaskGetSchedulerState>
 800fd68:	2802      	cmp	r0, #2
 800fd6a:	d007      	beq.n	800fd7c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fd6c:	4b0c      	ldr	r3, [pc, #48]	; (800fda0 <xTimerGenericCommand+0x54>)
 800fd6e:	6818      	ldr	r0, [r3, #0]
 800fd70:	2300      	movs	r3, #0
 800fd72:	2200      	movs	r2, #0
 800fd74:	4669      	mov	r1, sp
 800fd76:	f7fe fdf3 	bl	800e960 <xQueueGenericSend>
 800fd7a:	e00d      	b.n	800fd98 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fd7c:	4b08      	ldr	r3, [pc, #32]	; (800fda0 <xTimerGenericCommand+0x54>)
 800fd7e:	6818      	ldr	r0, [r3, #0]
 800fd80:	2300      	movs	r3, #0
 800fd82:	9a08      	ldr	r2, [sp, #32]
 800fd84:	4669      	mov	r1, sp
 800fd86:	f7fe fdeb 	bl	800e960 <xQueueGenericSend>
 800fd8a:	e005      	b.n	800fd98 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	002a      	movs	r2, r5
 800fd90:	4669      	mov	r1, sp
 800fd92:	0020      	movs	r0, r4
 800fd94:	f7fe fe7b 	bl	800ea8e <xQueueGenericSendFromISR>
}
 800fd98:	b005      	add	sp, #20
 800fd9a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fd9c:	2000      	movs	r0, #0
	return xReturn;
 800fd9e:	e7fb      	b.n	800fd98 <xTimerGenericCommand+0x4c>
 800fda0:	2000164c 	.word	0x2000164c

0800fda4 <prvSampleTimeNow>:
{
 800fda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fda6:	46d6      	mov	lr, sl
 800fda8:	464f      	mov	r7, r9
 800fdaa:	4646      	mov	r6, r8
 800fdac:	b5c0      	push	{r6, r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800fdb2:	f7ff fa43 	bl	800f23c <xTaskGetTickCount>
 800fdb6:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800fdb8:	4b23      	ldr	r3, [pc, #140]	; (800fe48 <prvSampleTimeNow+0xa4>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	4283      	cmp	r3, r0
 800fdbe:	d80b      	bhi.n	800fdd8 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	4642      	mov	r2, r8
 800fdc4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800fdc6:	4b20      	ldr	r3, [pc, #128]	; (800fe48 <prvSampleTimeNow+0xa4>)
 800fdc8:	601f      	str	r7, [r3, #0]
}
 800fdca:	0038      	movs	r0, r7
 800fdcc:	b004      	add	sp, #16
 800fdce:	bc1c      	pop	{r2, r3, r4}
 800fdd0:	4690      	mov	r8, r2
 800fdd2:	4699      	mov	r9, r3
 800fdd4:	46a2      	mov	sl, r4
 800fdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdd8:	4e1c      	ldr	r6, [pc, #112]	; (800fe4c <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fdda:	2300      	movs	r3, #0
 800fddc:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fdde:	6833      	ldr	r3, [r6, #0]
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	2a00      	cmp	r2, #0
 800fde4:	d026      	beq.n	800fe34 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdec:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdee:	1d25      	adds	r5, r4, #4
 800fdf0:	0028      	movs	r0, r5
 800fdf2:	f7fe fca0 	bl	800e736 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdf6:	0020      	movs	r0, r4
 800fdf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdfa:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fdfc:	69e3      	ldr	r3, [r4, #28]
 800fdfe:	2b01      	cmp	r3, #1
 800fe00:	d1ed      	bne.n	800fdde <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fe02:	69a3      	ldr	r3, [r4, #24]
 800fe04:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800fe06:	459a      	cmp	sl, r3
 800fe08:	d209      	bcs.n	800fe1e <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fe0a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe0c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe0e:	4b0f      	ldr	r3, [pc, #60]	; (800fe4c <prvSampleTimeNow+0xa8>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	9303      	str	r3, [sp, #12]
 800fe14:	0029      	movs	r1, r5
 800fe16:	0018      	movs	r0, r3
 800fe18:	f7fe fc76 	bl	800e708 <vListInsert>
 800fe1c:	e7df      	b.n	800fdde <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe1e:	464b      	mov	r3, r9
 800fe20:	9300      	str	r3, [sp, #0]
 800fe22:	4652      	mov	r2, sl
 800fe24:	4649      	mov	r1, r9
 800fe26:	0020      	movs	r0, r4
 800fe28:	f7ff ff90 	bl	800fd4c <xTimerGenericCommand>
				configASSERT( xResult );
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1d6      	bne.n	800fdde <prvSampleTimeNow+0x3a>
 800fe30:	b672      	cpsid	i
 800fe32:	e7fe      	b.n	800fe32 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 800fe34:	4a06      	ldr	r2, [pc, #24]	; (800fe50 <prvSampleTimeNow+0xac>)
 800fe36:	4905      	ldr	r1, [pc, #20]	; (800fe4c <prvSampleTimeNow+0xa8>)
 800fe38:	6810      	ldr	r0, [r2, #0]
 800fe3a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800fe3c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	4642      	mov	r2, r8
 800fe42:	6013      	str	r3, [r2, #0]
 800fe44:	e7bf      	b.n	800fdc6 <prvSampleTimeNow+0x22>
 800fe46:	46c0      	nop			; (mov r8, r8)
 800fe48:	20001648 	.word	0x20001648
 800fe4c:	20001618 	.word	0x20001618
 800fe50:	2000161c 	.word	0x2000161c

0800fe54 <prvTimerTask>:
{
 800fe54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe56:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 800fe58:	4e57      	ldr	r6, [pc, #348]	; (800ffb8 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe5a:	4b58      	ldr	r3, [pc, #352]	; (800ffbc <prvTimerTask+0x168>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	2a00      	cmp	r2, #0
 800fe62:	d100      	bne.n	800fe66 <prvTimerTask+0x12>
 800fe64:	e09c      	b.n	800ffa0 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800fe6a:	f7ff f9df 	bl	800f22c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe6e:	a808      	add	r0, sp, #32
 800fe70:	f7ff ff98 	bl	800fda4 <prvSampleTimeNow>
 800fe74:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fe76:	9b08      	ldr	r3, [sp, #32]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d000      	beq.n	800fe7e <prvTimerTask+0x2a>
 800fe7c:	e099      	b.n	800ffb2 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fe7e:	42a0      	cmp	r0, r4
 800fe80:	d233      	bcs.n	800feea <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fe82:	1b61      	subs	r1, r4, r5
 800fe84:	4b4e      	ldr	r3, [pc, #312]	; (800ffc0 <prvTimerTask+0x16c>)
 800fe86:	6818      	ldr	r0, [r3, #0]
 800fe88:	f7fe ff80 	bl	800ed8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fe8c:	f7ff fa6e 	bl	800f36c <xTaskResumeAll>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d050      	beq.n	800ff36 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fe94:	4c4a      	ldr	r4, [pc, #296]	; (800ffc0 <prvTimerTask+0x16c>)
 800fe96:	2300      	movs	r3, #0
 800fe98:	2200      	movs	r2, #0
 800fe9a:	a908      	add	r1, sp, #32
 800fe9c:	6820      	ldr	r0, [r4, #0]
 800fe9e:	f7fe fe78 	bl	800eb92 <xQueueGenericReceive>
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d0d9      	beq.n	800fe5a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fea6:	9b08      	ldr	r3, [sp, #32]
 800fea8:	9303      	str	r3, [sp, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	da0c      	bge.n	800fec8 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800feae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feb0:	9303      	str	r3, [sp, #12]
 800feb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb4:	9304      	str	r3, [sp, #16]
 800feb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feb8:	9305      	str	r3, [sp, #20]
 800feba:	9903      	ldr	r1, [sp, #12]
 800febc:	9804      	ldr	r0, [sp, #16]
 800febe:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fec0:	9b08      	ldr	r3, [sp, #32]
 800fec2:	9303      	str	r3, [sp, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	dbe6      	blt.n	800fe96 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fec8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800feca:	696b      	ldr	r3, [r5, #20]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fed0:	1d28      	adds	r0, r5, #4
 800fed2:	f7fe fc30 	bl	800e736 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fed6:	a807      	add	r0, sp, #28
 800fed8:	f7ff ff64 	bl	800fda4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fedc:	9b08      	ldr	r3, [sp, #32]
 800fede:	9303      	str	r3, [sp, #12]
 800fee0:	2b09      	cmp	r3, #9
 800fee2:	d8d8      	bhi.n	800fe96 <prvTimerTask+0x42>
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	58f3      	ldr	r3, [r6, r3]
 800fee8:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800feea:	f7ff fa3f 	bl	800f36c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800feee:	4b33      	ldr	r3, [pc, #204]	; (800ffbc <prvTimerTask+0x168>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fef6:	1d38      	adds	r0, r7, #4
 800fef8:	f7fe fc1d 	bl	800e736 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d003      	beq.n	800ff0a <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff04:	0038      	movs	r0, r7
 800ff06:	4798      	blx	r3
 800ff08:	e7c4      	b.n	800fe94 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	18e1      	adds	r1, r4, r3
 800ff0e:	0023      	movs	r3, r4
 800ff10:	002a      	movs	r2, r5
 800ff12:	0038      	movs	r0, r7
 800ff14:	f7ff fe86 	bl	800fc24 <prvInsertTimerInActiveList>
 800ff18:	2801      	cmp	r0, #1
 800ff1a:	d1f2      	bne.n	800ff02 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff1c:	2100      	movs	r1, #0
 800ff1e:	9100      	str	r1, [sp, #0]
 800ff20:	000b      	movs	r3, r1
 800ff22:	0022      	movs	r2, r4
 800ff24:	0038      	movs	r0, r7
 800ff26:	f7ff ff11 	bl	800fd4c <xTimerGenericCommand>
			configASSERT( xResult );
 800ff2a:	2800      	cmp	r0, #0
 800ff2c:	d1e9      	bne.n	800ff02 <prvTimerTask+0xae>
 800ff2e:	b672      	cpsid	i
 800ff30:	e7fe      	b.n	800ff30 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 800ff32:	2400      	movs	r4, #0
 800ff34:	e7a5      	b.n	800fe82 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 800ff36:	f000 f8a7 	bl	8010088 <vPortYield>
 800ff3a:	e7ab      	b.n	800fe94 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800ff3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff3e:	69aa      	ldr	r2, [r5, #24]
 800ff40:	4694      	mov	ip, r2
 800ff42:	4463      	add	r3, ip
 800ff44:	0019      	movs	r1, r3
 800ff46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff48:	0002      	movs	r2, r0
 800ff4a:	0028      	movs	r0, r5
 800ff4c:	f7ff fe6a 	bl	800fc24 <prvInsertTimerInActiveList>
 800ff50:	2801      	cmp	r0, #1
 800ff52:	d1a0      	bne.n	800fe96 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff54:	0028      	movs	r0, r5
 800ff56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff58:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ff5a:	69eb      	ldr	r3, [r5, #28]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d19a      	bne.n	800fe96 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ff60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff62:	69a9      	ldr	r1, [r5, #24]
 800ff64:	468c      	mov	ip, r1
 800ff66:	4463      	add	r3, ip
 800ff68:	001a      	movs	r2, r3
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	2100      	movs	r1, #0
 800ff70:	0028      	movs	r0, r5
 800ff72:	f7ff feeb 	bl	800fd4c <xTimerGenericCommand>
							configASSERT( xResult );
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d18d      	bne.n	800fe96 <prvTimerTask+0x42>
 800ff7a:	b672      	cpsid	i
 800ff7c:	e7fe      	b.n	800ff7c <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ff7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff80:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff82:	2900      	cmp	r1, #0
 800ff84:	d006      	beq.n	800ff94 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff86:	1841      	adds	r1, r0, r1
 800ff88:	0003      	movs	r3, r0
 800ff8a:	0002      	movs	r2, r0
 800ff8c:	0028      	movs	r0, r5
 800ff8e:	f7ff fe49 	bl	800fc24 <prvInsertTimerInActiveList>
 800ff92:	e780      	b.n	800fe96 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ff94:	b672      	cpsid	i
 800ff96:	e7fe      	b.n	800ff96 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 800ff98:	0028      	movs	r0, r5
 800ff9a:	f000 f999 	bl	80102d0 <vPortFree>
 800ff9e:	e77a      	b.n	800fe96 <prvTimerTask+0x42>
	vTaskSuspendAll();
 800ffa0:	f7ff f944 	bl	800f22c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ffa4:	a808      	add	r0, sp, #32
 800ffa6:	f7ff fefd 	bl	800fda4 <prvSampleTimeNow>
 800ffaa:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ffac:	9b08      	ldr	r3, [sp, #32]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d0bf      	beq.n	800ff32 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 800ffb2:	f7ff f9db 	bl	800f36c <xTaskResumeAll>
 800ffb6:	e76d      	b.n	800fe94 <prvTimerTask+0x40>
 800ffb8:	0801a9c8 	.word	0x0801a9c8
 800ffbc:	20001618 	.word	0x20001618
 800ffc0:	2000164c 	.word	0x2000164c

0800ffc4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 800ffc8:	d101      	bne.n	800ffce <pvTimerGetTimerID+0xa>
 800ffca:	b672      	cpsid	i
 800ffcc:	e7fe      	b.n	800ffcc <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 800ffce:	f000 f867 	bl	80100a0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800ffd2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800ffd4:	f000 f870 	bl	80100b8 <vPortExitCritical>

	return pvReturn;
}
 800ffd8:	0020      	movs	r0, r4
 800ffda:	bd10      	pop	{r4, pc}

0800ffdc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ffdc:	4b03      	ldr	r3, [pc, #12]	; (800ffec <prvTaskExitError+0x10>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	d001      	beq.n	800ffe8 <prvTaskExitError+0xc>
 800ffe4:	b672      	cpsid	i
 800ffe6:	e7fe      	b.n	800ffe6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 800ffe8:	b672      	cpsid	i
 800ffea:	e7fe      	b.n	800ffea <prvTaskExitError+0xe>
 800ffec:	200000ac 	.word	0x200000ac

0800fff0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fff0:	4a06      	ldr	r2, [pc, #24]	; (801000c <pxCurrentTCBConst2>)
 800fff2:	6813      	ldr	r3, [r2, #0]
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	3020      	adds	r0, #32
 800fff8:	f380 8809 	msr	PSP, r0
 800fffc:	2002      	movs	r0, #2
 800fffe:	f380 8814 	msr	CONTROL, r0
 8010002:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010004:	46ae      	mov	lr, r5
 8010006:	b662      	cpsie	i
 8010008:	bd00      	pop	{pc}
 801000a:	46c0      	nop			; (mov r8, r8)

0801000c <pxCurrentTCBConst2>:
 801000c:	200014f0 	.word	0x200014f0

08010010 <pxPortInitialiseStack>:
{
 8010010:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010012:	1f03      	subs	r3, r0, #4
 8010014:	2480      	movs	r4, #128	; 0x80
 8010016:	0464      	lsls	r4, r4, #17
 8010018:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801001a:	3b04      	subs	r3, #4
 801001c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801001e:	3b04      	subs	r3, #4
 8010020:	4902      	ldr	r1, [pc, #8]	; (801002c <pxPortInitialiseStack+0x1c>)
 8010022:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010024:	3b14      	subs	r3, #20
 8010026:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010028:	3840      	subs	r0, #64	; 0x40
}
 801002a:	bd10      	pop	{r4, pc}
 801002c:	0800ffdd 	.word	0x0800ffdd

08010030 <SVC_Handler>:
}
 8010030:	4770      	bx	lr
	...

08010034 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010034:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010036:	4b0f      	ldr	r3, [pc, #60]	; (8010074 <xPortStartScheduler+0x40>)
 8010038:	6819      	ldr	r1, [r3, #0]
 801003a:	22ff      	movs	r2, #255	; 0xff
 801003c:	0412      	lsls	r2, r2, #16
 801003e:	430a      	orrs	r2, r1
 8010040:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010042:	6819      	ldr	r1, [r3, #0]
 8010044:	22ff      	movs	r2, #255	; 0xff
 8010046:	0612      	lsls	r2, r2, #24
 8010048:	430a      	orrs	r2, r1
 801004a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801004c:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <xPortStartScheduler+0x44>)
 801004e:	6818      	ldr	r0, [r3, #0]
 8010050:	21fa      	movs	r1, #250	; 0xfa
 8010052:	0089      	lsls	r1, r1, #2
 8010054:	f7f0 f872 	bl	800013c <__udivsi3>
 8010058:	3801      	subs	r0, #1
 801005a:	4b08      	ldr	r3, [pc, #32]	; (801007c <xPortStartScheduler+0x48>)
 801005c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801005e:	4b08      	ldr	r3, [pc, #32]	; (8010080 <xPortStartScheduler+0x4c>)
 8010060:	2207      	movs	r2, #7
 8010062:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010064:	4b07      	ldr	r3, [pc, #28]	; (8010084 <xPortStartScheduler+0x50>)
 8010066:	2200      	movs	r2, #0
 8010068:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801006a:	f7ff ffc1 	bl	800fff0 <vPortStartFirstTask>
	prvTaskExitError();
 801006e:	f7ff ffb5 	bl	800ffdc <prvTaskExitError>
 8010072:	46c0      	nop			; (mov r8, r8)
 8010074:	e000ed20 	.word	0xe000ed20
 8010078:	20000098 	.word	0x20000098
 801007c:	e000e014 	.word	0xe000e014
 8010080:	e000e010 	.word	0xe000e010
 8010084:	200000ac 	.word	0x200000ac

08010088 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010088:	4b04      	ldr	r3, [pc, #16]	; (801009c <vPortYield+0x14>)
 801008a:	2280      	movs	r2, #128	; 0x80
 801008c:	0552      	lsls	r2, r2, #21
 801008e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010090:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010094:	f3bf 8f6f 	isb	sy
}
 8010098:	4770      	bx	lr
 801009a:	46c0      	nop			; (mov r8, r8)
 801009c:	e000ed04 	.word	0xe000ed04

080100a0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80100a0:	b672      	cpsid	i
    uxCriticalNesting++;
 80100a2:	4a04      	ldr	r2, [pc, #16]	; (80100b4 <vPortEnterCritical+0x14>)
 80100a4:	6813      	ldr	r3, [r2, #0]
 80100a6:	3301      	adds	r3, #1
 80100a8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 80100aa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80100ae:	f3bf 8f6f 	isb	sy
}
 80100b2:	4770      	bx	lr
 80100b4:	200000ac 	.word	0x200000ac

080100b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80100b8:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <vPortExitCritical+0x1c>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <vPortExitCritical+0xc>
 80100c0:	b672      	cpsid	i
 80100c2:	e7fe      	b.n	80100c2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80100c4:	3b01      	subs	r3, #1
 80100c6:	4a03      	ldr	r2, [pc, #12]	; (80100d4 <vPortExitCritical+0x1c>)
 80100c8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d100      	bne.n	80100d0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80100ce:	b662      	cpsie	i
}
 80100d0:	4770      	bx	lr
 80100d2:	46c0      	nop			; (mov r8, r8)
 80100d4:	200000ac 	.word	0x200000ac

080100d8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80100d8:	f3ef 8010 	mrs	r0, PRIMASK
 80100dc:	b672      	cpsid	i
 80100de:	4770      	bx	lr
}
 80100e0:	2000      	movs	r0, #0

080100e2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80100e2:	f380 8810 	msr	PRIMASK, r0
 80100e6:	4770      	bx	lr

080100e8 <PendSV_Handler>:
	__asm volatile
 80100e8:	f3ef 8009 	mrs	r0, PSP
 80100ec:	4b0e      	ldr	r3, [pc, #56]	; (8010128 <pxCurrentTCBConst>)
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	3820      	subs	r0, #32
 80100f2:	6010      	str	r0, [r2, #0]
 80100f4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80100f6:	4644      	mov	r4, r8
 80100f8:	464d      	mov	r5, r9
 80100fa:	4656      	mov	r6, sl
 80100fc:	465f      	mov	r7, fp
 80100fe:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010100:	b508      	push	{r3, lr}
 8010102:	b672      	cpsid	i
 8010104:	f7ff fa4e 	bl	800f5a4 <vTaskSwitchContext>
 8010108:	b662      	cpsie	i
 801010a:	bc0c      	pop	{r2, r3}
 801010c:	6811      	ldr	r1, [r2, #0]
 801010e:	6808      	ldr	r0, [r1, #0]
 8010110:	3010      	adds	r0, #16
 8010112:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010114:	46a0      	mov	r8, r4
 8010116:	46a9      	mov	r9, r5
 8010118:	46b2      	mov	sl, r6
 801011a:	46bb      	mov	fp, r7
 801011c:	f380 8809 	msr	PSP, r0
 8010120:	3820      	subs	r0, #32
 8010122:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010124:	4718      	bx	r3
 8010126:	46c0      	nop			; (mov r8, r8)

08010128 <pxCurrentTCBConst>:
 8010128:	200014f0 	.word	0x200014f0

0801012c <xPortSysTickHandler>:
{
 801012c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801012e:	f7ff ffd3 	bl	80100d8 <ulSetInterruptMaskFromISR>
 8010132:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010134:	f7ff f88e 	bl	800f254 <xTaskIncrementTick>
 8010138:	2800      	cmp	r0, #0
 801013a:	d003      	beq.n	8010144 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801013c:	4b03      	ldr	r3, [pc, #12]	; (801014c <xPortSysTickHandler+0x20>)
 801013e:	2280      	movs	r2, #128	; 0x80
 8010140:	0552      	lsls	r2, r2, #21
 8010142:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010144:	0020      	movs	r0, r4
 8010146:	f7ff ffcc 	bl	80100e2 <vClearInterruptMaskFromISR>
}
 801014a:	bd10      	pop	{r4, pc}
 801014c:	e000ed04 	.word	0xe000ed04

08010150 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010150:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010152:	4b12      	ldr	r3, [pc, #72]	; (801019c <prvInsertBlockIntoFreeList+0x4c>)
 8010154:	681a      	ldr	r2, [r3, #0]
 8010156:	4282      	cmp	r2, r0
 8010158:	d319      	bcc.n	801018e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801015a:	685c      	ldr	r4, [r3, #4]
 801015c:	1919      	adds	r1, r3, r4
 801015e:	4288      	cmp	r0, r1
 8010160:	d103      	bne.n	801016a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010162:	6841      	ldr	r1, [r0, #4]
 8010164:	1909      	adds	r1, r1, r4
 8010166:	6059      	str	r1, [r3, #4]
 8010168:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801016a:	6841      	ldr	r1, [r0, #4]
 801016c:	1844      	adds	r4, r0, r1
 801016e:	42a2      	cmp	r2, r4
 8010170:	d111      	bne.n	8010196 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010172:	4c0b      	ldr	r4, [pc, #44]	; (80101a0 <prvInsertBlockIntoFreeList+0x50>)
 8010174:	6824      	ldr	r4, [r4, #0]
 8010176:	42a2      	cmp	r2, r4
 8010178:	d00b      	beq.n	8010192 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801017a:	6852      	ldr	r2, [r2, #4]
 801017c:	1852      	adds	r2, r2, r1
 801017e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	6812      	ldr	r2, [r2, #0]
 8010184:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010186:	4298      	cmp	r0, r3
 8010188:	d000      	beq.n	801018c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801018a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801018c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801018e:	0013      	movs	r3, r2
 8010190:	e7e0      	b.n	8010154 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010192:	6002      	str	r2, [r0, #0]
 8010194:	e7f7      	b.n	8010186 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010196:	6002      	str	r2, [r0, #0]
 8010198:	e7f5      	b.n	8010186 <prvInsertBlockIntoFreeList+0x36>
 801019a:	46c0      	nop			; (mov r8, r8)
 801019c:	20006098 	.word	0x20006098
 80101a0:	20001650 	.word	0x20001650

080101a4 <pvPortMalloc>:
{
 80101a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a6:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80101a8:	f7ff f840 	bl	800f22c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80101ac:	4b41      	ldr	r3, [pc, #260]	; (80102b4 <pvPortMalloc+0x110>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00a      	beq.n	80101ca <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80101b4:	4b40      	ldr	r3, [pc, #256]	; (80102b8 <pvPortMalloc+0x114>)
 80101b6:	681f      	ldr	r7, [r3, #0]
 80101b8:	423c      	tst	r4, r7
 80101ba:	d02a      	beq.n	8010212 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 80101bc:	f7ff f8d6 	bl	800f36c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80101c0:	f7fd fc14 	bl	800d9ec <vApplicationMallocFailedHook>
 80101c4:	2500      	movs	r5, #0
}
 80101c6:	0028      	movs	r0, r5
 80101c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 80101ca:	4a3c      	ldr	r2, [pc, #240]	; (80102bc <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101cc:	0753      	lsls	r3, r2, #29
 80101ce:	d01e      	beq.n	801020e <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80101d0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80101d2:	2307      	movs	r3, #7
 80101d4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80101d6:	4b3a      	ldr	r3, [pc, #232]	; (80102c0 <pvPortMalloc+0x11c>)
 80101d8:	18d3      	adds	r3, r2, r3
 80101da:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80101dc:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101de:	4839      	ldr	r0, [pc, #228]	; (80102c4 <pvPortMalloc+0x120>)
 80101e0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101e2:	2100      	movs	r1, #0
 80101e4:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101e6:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80101e8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80101ea:	2007      	movs	r0, #7
 80101ec:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80101ee:	4831      	ldr	r0, [pc, #196]	; (80102b4 <pvPortMalloc+0x110>)
 80101f0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80101f2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80101f4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80101f6:	1a99      	subs	r1, r3, r2
 80101f8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80101fa:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80101fc:	4b32      	ldr	r3, [pc, #200]	; (80102c8 <pvPortMalloc+0x124>)
 80101fe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010200:	4b32      	ldr	r3, [pc, #200]	; (80102cc <pvPortMalloc+0x128>)
 8010202:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010204:	4b2c      	ldr	r3, [pc, #176]	; (80102b8 <pvPortMalloc+0x114>)
 8010206:	2280      	movs	r2, #128	; 0x80
 8010208:	0612      	lsls	r2, r2, #24
 801020a:	601a      	str	r2, [r3, #0]
 801020c:	e7d2      	b.n	80101b4 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801020e:	4b2c      	ldr	r3, [pc, #176]	; (80102c0 <pvPortMalloc+0x11c>)
 8010210:	e7e5      	b.n	80101de <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 8010212:	2c00      	cmp	r4, #0
 8010214:	d008      	beq.n	8010228 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 8010216:	0023      	movs	r3, r4
 8010218:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801021a:	075a      	lsls	r2, r3, #29
 801021c:	d002      	beq.n	8010224 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801021e:	2207      	movs	r2, #7
 8010220:	4393      	bics	r3, r2
 8010222:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010224:	2b00      	cmp	r3, #0
 8010226:	d102      	bne.n	801022e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8010228:	f7ff f8a0 	bl	800f36c <xTaskResumeAll>
 801022c:	e7c8      	b.n	80101c0 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801022e:	4a27      	ldr	r2, [pc, #156]	; (80102cc <pvPortMalloc+0x128>)
 8010230:	6816      	ldr	r6, [r2, #0]
 8010232:	429e      	cmp	r6, r3
 8010234:	d302      	bcc.n	801023c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010236:	4a23      	ldr	r2, [pc, #140]	; (80102c4 <pvPortMalloc+0x120>)
 8010238:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801023a:	e004      	b.n	8010246 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 801023c:	f7ff f896 	bl	800f36c <xTaskResumeAll>
 8010240:	e7be      	b.n	80101c0 <pvPortMalloc+0x1c>
 8010242:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010244:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010246:	6861      	ldr	r1, [r4, #4]
 8010248:	4299      	cmp	r1, r3
 801024a:	d202      	bcs.n	8010252 <pvPortMalloc+0xae>
 801024c:	6821      	ldr	r1, [r4, #0]
 801024e:	2900      	cmp	r1, #0
 8010250:	d1f7      	bne.n	8010242 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010252:	4918      	ldr	r1, [pc, #96]	; (80102b4 <pvPortMalloc+0x110>)
 8010254:	6809      	ldr	r1, [r1, #0]
 8010256:	42a1      	cmp	r1, r4
 8010258:	d00b      	beq.n	8010272 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801025a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801025c:	6821      	ldr	r1, [r4, #0]
 801025e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010260:	6862      	ldr	r2, [r4, #4]
 8010262:	1ad2      	subs	r2, r2, r3
 8010264:	2a10      	cmp	r2, #16
 8010266:	d90b      	bls.n	8010280 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010268:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801026a:	0741      	lsls	r1, r0, #29
 801026c:	d004      	beq.n	8010278 <pvPortMalloc+0xd4>
 801026e:	b672      	cpsid	i
 8010270:	e7fe      	b.n	8010270 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010272:	f7ff f87b 	bl	800f36c <xTaskResumeAll>
 8010276:	e7a3      	b.n	80101c0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010278:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801027a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801027c:	f7ff ff68 	bl	8010150 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010280:	6862      	ldr	r2, [r4, #4]
 8010282:	1ab6      	subs	r6, r6, r2
 8010284:	4911      	ldr	r1, [pc, #68]	; (80102cc <pvPortMalloc+0x128>)
 8010286:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010288:	490f      	ldr	r1, [pc, #60]	; (80102c8 <pvPortMalloc+0x124>)
 801028a:	6809      	ldr	r1, [r1, #0]
 801028c:	428e      	cmp	r6, r1
 801028e:	d201      	bcs.n	8010294 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010290:	490d      	ldr	r1, [pc, #52]	; (80102c8 <pvPortMalloc+0x124>)
 8010292:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010294:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010296:	4317      	orrs	r7, r2
 8010298:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801029a:	2300      	movs	r3, #0
 801029c:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 801029e:	f7ff f865 	bl	800f36c <xTaskResumeAll>
		if( pvReturn == NULL )
 80102a2:	2d00      	cmp	r5, #0
 80102a4:	d100      	bne.n	80102a8 <pvPortMalloc+0x104>
 80102a6:	e78b      	b.n	80101c0 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80102a8:	076b      	lsls	r3, r5, #29
 80102aa:	d100      	bne.n	80102ae <pvPortMalloc+0x10a>
 80102ac:	e78b      	b.n	80101c6 <pvPortMalloc+0x22>
 80102ae:	b672      	cpsid	i
 80102b0:	e7fe      	b.n	80102b0 <pvPortMalloc+0x10c>
 80102b2:	46c0      	nop			; (mov r8, r8)
 80102b4:	20001650 	.word	0x20001650
 80102b8:	2000608c 	.word	0x2000608c
 80102bc:	20001654 	.word	0x20001654
 80102c0:	00004a38 	.word	0x00004a38
 80102c4:	20006098 	.word	0x20006098
 80102c8:	20006094 	.word	0x20006094
 80102cc:	20006090 	.word	0x20006090

080102d0 <vPortFree>:
{
 80102d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80102d2:	2800      	cmp	r0, #0
 80102d4:	d020      	beq.n	8010318 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102d6:	0003      	movs	r3, r0
 80102d8:	3b08      	subs	r3, #8
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4a0f      	ldr	r2, [pc, #60]	; (801031c <vPortFree+0x4c>)
 80102de:	6812      	ldr	r2, [r2, #0]
 80102e0:	421a      	tst	r2, r3
 80102e2:	d101      	bne.n	80102e8 <vPortFree+0x18>
 80102e4:	b672      	cpsid	i
 80102e6:	e7fe      	b.n	80102e6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102e8:	0001      	movs	r1, r0
 80102ea:	3908      	subs	r1, #8
 80102ec:	6809      	ldr	r1, [r1, #0]
 80102ee:	2900      	cmp	r1, #0
 80102f0:	d001      	beq.n	80102f6 <vPortFree+0x26>
 80102f2:	b672      	cpsid	i
 80102f4:	e7fe      	b.n	80102f4 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80102f6:	3808      	subs	r0, #8
 80102f8:	0004      	movs	r4, r0
 80102fa:	4393      	bics	r3, r2
 80102fc:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80102fe:	f7fe ff95 	bl	800f22c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010302:	4a07      	ldr	r2, [pc, #28]	; (8010320 <vPortFree+0x50>)
 8010304:	6863      	ldr	r3, [r4, #4]
 8010306:	6811      	ldr	r1, [r2, #0]
 8010308:	468c      	mov	ip, r1
 801030a:	4463      	add	r3, ip
 801030c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801030e:	0020      	movs	r0, r4
 8010310:	f7ff ff1e 	bl	8010150 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010314:	f7ff f82a 	bl	800f36c <xTaskResumeAll>
}
 8010318:	bd10      	pop	{r4, pc}
 801031a:	46c0      	nop			; (mov r8, r8)
 801031c:	2000608c 	.word	0x2000608c
 8010320:	20006090 	.word	0x20006090

08010324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010324:	b510      	push	{r4, lr}
 8010326:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010328:	f002 f9d4 	bl	80126d4 <HAL_RCC_GetHCLKFreq>
 801032c:	21fa      	movs	r1, #250	; 0xfa
 801032e:	0089      	lsls	r1, r1, #2
 8010330:	f7ef ff04 	bl	800013c <__udivsi3>
 8010334:	f000 fc76 	bl	8010c24 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010338:	2001      	movs	r0, #1
 801033a:	2200      	movs	r2, #0
 801033c:	0021      	movs	r1, r4
 801033e:	4240      	negs	r0, r0
 8010340:	f000 fc28 	bl	8010b94 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010344:	2000      	movs	r0, #0
 8010346:	bd10      	pop	{r4, pc}

08010348 <HAL_Init>:
{
 8010348:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801034a:	4a06      	ldr	r2, [pc, #24]	; (8010364 <HAL_Init+0x1c>)
 801034c:	6813      	ldr	r3, [r2, #0]
 801034e:	2110      	movs	r1, #16
 8010350:	430b      	orrs	r3, r1
 8010352:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010354:	2000      	movs	r0, #0
 8010356:	f7ff ffe5 	bl	8010324 <HAL_InitTick>
  HAL_MspInit();
 801035a:	f001 fd63 	bl	8011e24 <HAL_MspInit>
}
 801035e:	2000      	movs	r0, #0
 8010360:	bd10      	pop	{r4, pc}
 8010362:	46c0      	nop			; (mov r8, r8)
 8010364:	40022000 	.word	0x40022000

08010368 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010368:	4a02      	ldr	r2, [pc, #8]	; (8010374 <HAL_IncTick+0xc>)
 801036a:	6813      	ldr	r3, [r2, #0]
 801036c:	3301      	adds	r3, #1
 801036e:	6013      	str	r3, [r2, #0]
}
 8010370:	4770      	bx	lr
 8010372:	46c0      	nop			; (mov r8, r8)
 8010374:	200060a0 	.word	0x200060a0

08010378 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010378:	4b01      	ldr	r3, [pc, #4]	; (8010380 <HAL_GetTick+0x8>)
 801037a:	6818      	ldr	r0, [r3, #0]
}
 801037c:	4770      	bx	lr
 801037e:	46c0      	nop			; (mov r8, r8)
 8010380:	200060a0 	.word	0x200060a0

08010384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010384:	b510      	push	{r4, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801038a:	f7ff fff5 	bl	8010378 <HAL_GetTick>
 801038e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010390:	f7ff fff2 	bl	8010378 <HAL_GetTick>
 8010394:	9b01      	ldr	r3, [sp, #4]
 8010396:	1b00      	subs	r0, r0, r4
 8010398:	4298      	cmp	r0, r3
 801039a:	d3f9      	bcc.n	8010390 <HAL_Delay+0xc>
  {
  }
}
 801039c:	b002      	add	sp, #8
 801039e:	bd10      	pop	{r4, pc}

080103a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80103a0:	4b01      	ldr	r3, [pc, #4]	; (80103a8 <HAL_GetREVID+0x8>)
 80103a2:	6818      	ldr	r0, [r3, #0]
 80103a4:	0c00      	lsrs	r0, r0, #16
}
 80103a6:	4770      	bx	lr
 80103a8:	40015800 	.word	0x40015800

080103ac <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80103ac:	4b02      	ldr	r3, [pc, #8]	; (80103b8 <HAL_GetDEVID+0xc>)
 80103ae:	6818      	ldr	r0, [r3, #0]
 80103b0:	0500      	lsls	r0, r0, #20
 80103b2:	0d00      	lsrs	r0, r0, #20
}
 80103b4:	4770      	bx	lr
 80103b6:	46c0      	nop			; (mov r8, r8)
 80103b8:	40015800 	.word	0x40015800

080103bc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80103bc:	b570      	push	{r4, r5, r6, lr}
 80103be:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80103c0:	6803      	ldr	r3, [r0, #0]
 80103c2:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80103c4:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80103c6:	0752      	lsls	r2, r2, #29
 80103c8:	d521      	bpl.n	801040e <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80103ca:	689a      	ldr	r2, [r3, #8]
 80103cc:	0752      	lsls	r2, r2, #29
 80103ce:	d506      	bpl.n	80103de <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80103d0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80103d2:	0792      	lsls	r2, r2, #30
 80103d4:	d403      	bmi.n	80103de <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80103d6:	689a      	ldr	r2, [r3, #8]
 80103d8:	2110      	movs	r1, #16
 80103da:	430a      	orrs	r2, r1
 80103dc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80103de:	f7ff ffcb 	bl	8010378 <HAL_GetTick>
 80103e2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80103e4:	2504      	movs	r5, #4
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	689b      	ldr	r3, [r3, #8]
 80103ea:	421d      	tst	r5, r3
 80103ec:	d00e      	beq.n	801040c <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80103ee:	f7ff ffc3 	bl	8010378 <HAL_GetTick>
 80103f2:	1b80      	subs	r0, r0, r6
 80103f4:	2802      	cmp	r0, #2
 80103f6:	d9f6      	bls.n	80103e6 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80103f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103fa:	2210      	movs	r2, #16
 80103fc:	4313      	orrs	r3, r2
 80103fe:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010402:	3a0f      	subs	r2, #15
 8010404:	4313      	orrs	r3, r2
 8010406:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010408:	2001      	movs	r0, #1
 801040a:	e000      	b.n	801040e <ADC_ConversionStop+0x52>
  return HAL_OK;
 801040c:	2000      	movs	r0, #0
}
 801040e:	bd70      	pop	{r4, r5, r6, pc}

08010410 <ADC_Disable>:
{
 8010410:	b570      	push	{r4, r5, r6, lr}
 8010412:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010414:	6802      	ldr	r2, [r0, #0]
 8010416:	6891      	ldr	r1, [r2, #8]
 8010418:	2303      	movs	r3, #3
 801041a:	400b      	ands	r3, r1
  return HAL_OK;
 801041c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 801041e:	2b01      	cmp	r3, #1
 8010420:	d000      	beq.n	8010424 <ADC_Disable+0x14>
}
 8010422:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010424:	6813      	ldr	r3, [r2, #0]
 8010426:	07db      	lsls	r3, r3, #31
 8010428:	d402      	bmi.n	8010430 <ADC_Disable+0x20>
 801042a:	68d3      	ldr	r3, [r2, #12]
 801042c:	041b      	lsls	r3, r3, #16
 801042e:	d5f8      	bpl.n	8010422 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8010430:	6891      	ldr	r1, [r2, #8]
 8010432:	2305      	movs	r3, #5
 8010434:	400b      	ands	r3, r1
 8010436:	2b01      	cmp	r3, #1
 8010438:	d009      	beq.n	801044e <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801043a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801043c:	2210      	movs	r2, #16
 801043e:	4313      	orrs	r3, r2
 8010440:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010442:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010444:	3a0f      	subs	r2, #15
 8010446:	4313      	orrs	r3, r2
 8010448:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 801044a:	2001      	movs	r0, #1
 801044c:	e7e9      	b.n	8010422 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 801044e:	6893      	ldr	r3, [r2, #8]
 8010450:	2102      	movs	r1, #2
 8010452:	430b      	orrs	r3, r1
 8010454:	6093      	str	r3, [r2, #8]
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	2203      	movs	r2, #3
 801045a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 801045c:	f7ff ff8c 	bl	8010378 <HAL_GetTick>
 8010460:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010462:	2501      	movs	r5, #1
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	421d      	tst	r5, r3
 801046a:	d00e      	beq.n	801048a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801046c:	f7ff ff84 	bl	8010378 <HAL_GetTick>
 8010470:	1b80      	subs	r0, r0, r6
 8010472:	2802      	cmp	r0, #2
 8010474:	d9f6      	bls.n	8010464 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010476:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010478:	2210      	movs	r2, #16
 801047a:	4313      	orrs	r3, r2
 801047c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801047e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010480:	3a0f      	subs	r2, #15
 8010482:	4313      	orrs	r3, r2
 8010484:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010486:	2001      	movs	r0, #1
 8010488:	e7cb      	b.n	8010422 <ADC_Disable+0x12>
  return HAL_OK;
 801048a:	2000      	movs	r0, #0
 801048c:	e7c9      	b.n	8010422 <ADC_Disable+0x12>
	...

08010490 <ADC_Enable>:
{
 8010490:	b570      	push	{r4, r5, r6, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801049a:	6803      	ldr	r3, [r0, #0]
 801049c:	6899      	ldr	r1, [r3, #8]
 801049e:	2203      	movs	r2, #3
 80104a0:	400a      	ands	r2, r1
 80104a2:	2a01      	cmp	r2, #1
 80104a4:	d02d      	beq.n	8010502 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80104a6:	6899      	ldr	r1, [r3, #8]
 80104a8:	4a20      	ldr	r2, [pc, #128]	; (801052c <ADC_Enable+0x9c>)
 80104aa:	4211      	tst	r1, r2
 80104ac:	d131      	bne.n	8010512 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 80104ae:	689a      	ldr	r2, [r3, #8]
 80104b0:	2101      	movs	r1, #1
 80104b2:	430a      	orrs	r2, r1
 80104b4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80104b6:	4b1e      	ldr	r3, [pc, #120]	; (8010530 <ADC_Enable+0xa0>)
 80104b8:	6818      	ldr	r0, [r3, #0]
 80104ba:	491e      	ldr	r1, [pc, #120]	; (8010534 <ADC_Enable+0xa4>)
 80104bc:	f7ef fe3e 	bl	800013c <__udivsi3>
 80104c0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 80104c2:	9b01      	ldr	r3, [sp, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d005      	beq.n	80104d4 <ADC_Enable+0x44>
      wait_loop_index--;
 80104c8:	9b01      	ldr	r3, [sp, #4]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80104ce:	9b01      	ldr	r3, [sp, #4]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d1f9      	bne.n	80104c8 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 80104d4:	f7ff ff50 	bl	8010378 <HAL_GetTick>
 80104d8:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80104da:	2501      	movs	r5, #1
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	421d      	tst	r5, r3
 80104e2:	d121      	bne.n	8010528 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80104e4:	f7ff ff48 	bl	8010378 <HAL_GetTick>
 80104e8:	1b80      	subs	r0, r0, r6
 80104ea:	2802      	cmp	r0, #2
 80104ec:	d9f6      	bls.n	80104dc <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80104ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104f0:	2210      	movs	r2, #16
 80104f2:	4313      	orrs	r3, r2
 80104f4:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80104f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104f8:	3a0f      	subs	r2, #15
 80104fa:	4313      	orrs	r3, r2
 80104fc:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80104fe:	2001      	movs	r0, #1
 8010500:	e010      	b.n	8010524 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010502:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010504:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010506:	07d2      	lsls	r2, r2, #31
 8010508:	d40c      	bmi.n	8010524 <ADC_Enable+0x94>
 801050a:	68da      	ldr	r2, [r3, #12]
 801050c:	0412      	lsls	r2, r2, #16
 801050e:	d5ca      	bpl.n	80104a6 <ADC_Enable+0x16>
 8010510:	e008      	b.n	8010524 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010512:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010514:	2210      	movs	r2, #16
 8010516:	4313      	orrs	r3, r2
 8010518:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801051a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801051c:	3a0f      	subs	r2, #15
 801051e:	4313      	orrs	r3, r2
 8010520:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010522:	2001      	movs	r0, #1
}
 8010524:	b002      	add	sp, #8
 8010526:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010528:	2000      	movs	r0, #0
 801052a:	e7fb      	b.n	8010524 <ADC_Enable+0x94>
 801052c:	80000017 	.word	0x80000017
 8010530:	20000098 	.word	0x20000098
 8010534:	000f4240 	.word	0x000f4240

08010538 <HAL_ADC_Init>:
{
 8010538:	b570      	push	{r4, r5, r6, lr}
 801053a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 801053c:	d100      	bne.n	8010540 <HAL_ADC_Init+0x8>
 801053e:	e09b      	b.n	8010678 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010540:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010542:	2b00      	cmp	r3, #0
 8010544:	d073      	beq.n	801062e <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010548:	06db      	lsls	r3, r3, #27
 801054a:	d500      	bpl.n	801054e <HAL_ADC_Init+0x16>
 801054c:	e08e      	b.n	801066c <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 801054e:	6822      	ldr	r2, [r4, #0]
 8010550:	6893      	ldr	r3, [r2, #8]
 8010552:	2104      	movs	r1, #4
 8010554:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010556:	d000      	beq.n	801055a <HAL_ADC_Init+0x22>
 8010558:	e088      	b.n	801066c <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 801055a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801055c:	4847      	ldr	r0, [pc, #284]	; (801067c <HAL_ADC_Init+0x144>)
 801055e:	4003      	ands	r3, r0
 8010560:	3006      	adds	r0, #6
 8010562:	30ff      	adds	r0, #255	; 0xff
 8010564:	4303      	orrs	r3, r0
 8010566:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010568:	6890      	ldr	r0, [r2, #8]
 801056a:	2303      	movs	r3, #3
 801056c:	4003      	ands	r3, r0
 801056e:	2b01      	cmp	r3, #1
 8010570:	d063      	beq.n	801063a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010572:	68d3      	ldr	r3, [r2, #12]
 8010574:	2018      	movs	r0, #24
 8010576:	4383      	bics	r3, r0
 8010578:	68a0      	ldr	r0, [r4, #8]
 801057a:	4303      	orrs	r3, r0
 801057c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 801057e:	6822      	ldr	r2, [r4, #0]
 8010580:	6913      	ldr	r3, [r2, #16]
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	089b      	lsrs	r3, r3, #2
 8010586:	6860      	ldr	r0, [r4, #4]
 8010588:	4303      	orrs	r3, r0
 801058a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 801058c:	6822      	ldr	r2, [r4, #0]
 801058e:	68d3      	ldr	r3, [r2, #12]
 8010590:	483b      	ldr	r0, [pc, #236]	; (8010680 <HAL_ADC_Init+0x148>)
 8010592:	4003      	ands	r3, r0
 8010594:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010596:	69a3      	ldr	r3, [r4, #24]
 8010598:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801059a:	69e3      	ldr	r3, [r4, #28]
 801059c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801059e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80105a0:	6a20      	ldr	r0, [r4, #32]
 80105a2:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80105a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105a6:	000e      	movs	r6, r1
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	d001      	beq.n	80105b0 <HAL_ADC_Init+0x78>
 80105ac:	2680      	movs	r6, #128	; 0x80
 80105ae:	0176      	lsls	r6, r6, #5
 80105b0:	68e3      	ldr	r3, [r4, #12]
 80105b2:	431a      	orrs	r2, r3
 80105b4:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80105b6:	6923      	ldr	r3, [r4, #16]
 80105b8:	2b02      	cmp	r3, #2
 80105ba:	d045      	beq.n	8010648 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80105bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80105be:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80105c0:	4313      	orrs	r3, r2
 80105c2:	4333      	orrs	r3, r6
 80105c4:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80105c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80105c8:	2a01      	cmp	r2, #1
 80105ca:	d03f      	beq.n	801064c <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80105cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80105ce:	21c2      	movs	r1, #194	; 0xc2
 80105d0:	31ff      	adds	r1, #255	; 0xff
 80105d2:	428a      	cmp	r2, r1
 80105d4:	d002      	beq.n	80105dc <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80105d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80105d8:	430a      	orrs	r2, r1
 80105da:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80105dc:	6821      	ldr	r1, [r4, #0]
 80105de:	68ca      	ldr	r2, [r1, #12]
 80105e0:	431a      	orrs	r2, r3
 80105e2:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80105e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80105e6:	2180      	movs	r1, #128	; 0x80
 80105e8:	0549      	lsls	r1, r1, #21
 80105ea:	428a      	cmp	r2, r1
 80105ec:	d002      	beq.n	80105f4 <HAL_ADC_Init+0xbc>
 80105ee:	3a01      	subs	r2, #1
 80105f0:	2a06      	cmp	r2, #6
 80105f2:	d80a      	bhi.n	801060a <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80105f4:	6820      	ldr	r0, [r4, #0]
 80105f6:	6941      	ldr	r1, [r0, #20]
 80105f8:	2207      	movs	r2, #7
 80105fa:	4391      	bics	r1, r2
 80105fc:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80105fe:	6821      	ldr	r1, [r4, #0]
 8010600:	6948      	ldr	r0, [r1, #20]
 8010602:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010604:	402a      	ands	r2, r5
 8010606:	4302      	orrs	r2, r0
 8010608:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 801060a:	6822      	ldr	r2, [r4, #0]
 801060c:	68d2      	ldr	r2, [r2, #12]
 801060e:	491d      	ldr	r1, [pc, #116]	; (8010684 <HAL_ADC_Init+0x14c>)
 8010610:	400a      	ands	r2, r1
 8010612:	429a      	cmp	r2, r3
 8010614:	d020      	beq.n	8010658 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010616:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010618:	2212      	movs	r2, #18
 801061a:	4393      	bics	r3, r2
 801061c:	3a02      	subs	r2, #2
 801061e:	4313      	orrs	r3, r2
 8010620:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010622:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010624:	3a0f      	subs	r2, #15
 8010626:	4313      	orrs	r3, r2
 8010628:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 801062a:	2001      	movs	r0, #1
 801062c:	e023      	b.n	8010676 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 801062e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010630:	2240      	movs	r2, #64	; 0x40
 8010632:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010634:	f7f8 f836 	bl	80086a4 <HAL_ADC_MspInit>
 8010638:	e785      	b.n	8010546 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 801063a:	6813      	ldr	r3, [r2, #0]
 801063c:	07db      	lsls	r3, r3, #31
 801063e:	d4a5      	bmi.n	801058c <HAL_ADC_Init+0x54>
 8010640:	68d3      	ldr	r3, [r2, #12]
 8010642:	041b      	lsls	r3, r3, #16
 8010644:	d4a2      	bmi.n	801058c <HAL_ADC_Init+0x54>
 8010646:	e794      	b.n	8010572 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010648:	2104      	movs	r1, #4
 801064a:	e7b7      	b.n	80105bc <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801064c:	2800      	cmp	r0, #0
 801064e:	d1bd      	bne.n	80105cc <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010650:	2280      	movs	r2, #128	; 0x80
 8010652:	0252      	lsls	r2, r2, #9
 8010654:	4313      	orrs	r3, r2
 8010656:	e7b9      	b.n	80105cc <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010658:	2300      	movs	r3, #0
 801065a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 801065c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801065e:	2203      	movs	r2, #3
 8010660:	4393      	bics	r3, r2
 8010662:	3a02      	subs	r2, #2
 8010664:	4313      	orrs	r3, r2
 8010666:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010668:	2000      	movs	r0, #0
 801066a:	e004      	b.n	8010676 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801066c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801066e:	2210      	movs	r2, #16
 8010670:	4313      	orrs	r3, r2
 8010672:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010674:	2001      	movs	r0, #1
}
 8010676:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010678:	2001      	movs	r0, #1
 801067a:	e7fc      	b.n	8010676 <HAL_ADC_Init+0x13e>
 801067c:	fffffefd 	.word	0xfffffefd
 8010680:	fffe0219 	.word	0xfffe0219
 8010684:	833fffe7 	.word	0x833fffe7

08010688 <HAL_ADC_Start>:
{
 8010688:	b510      	push	{r4, lr}
 801068a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801068c:	6803      	ldr	r3, [r0, #0]
 801068e:	689b      	ldr	r3, [r3, #8]
 8010690:	075b      	lsls	r3, r3, #29
 8010692:	d423      	bmi.n	80106dc <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010694:	2340      	movs	r3, #64	; 0x40
 8010696:	5cc3      	ldrb	r3, [r0, r3]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d021      	beq.n	80106e0 <HAL_ADC_Start+0x58>
 801069c:	2340      	movs	r3, #64	; 0x40
 801069e:	2201      	movs	r2, #1
 80106a0:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80106a2:	69c3      	ldr	r3, [r0, #28]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d114      	bne.n	80106d2 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 80106a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106aa:	4a0e      	ldr	r2, [pc, #56]	; (80106e4 <HAL_ADC_Start+0x5c>)
 80106ac:	401a      	ands	r2, r3
 80106ae:	2380      	movs	r3, #128	; 0x80
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4313      	orrs	r3, r2
 80106b4:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 80106b6:	2300      	movs	r3, #0
 80106b8:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80106ba:	2240      	movs	r2, #64	; 0x40
 80106bc:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80106be:	6823      	ldr	r3, [r4, #0]
 80106c0:	3a24      	subs	r2, #36	; 0x24
 80106c2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80106c4:	6822      	ldr	r2, [r4, #0]
 80106c6:	6893      	ldr	r3, [r2, #8]
 80106c8:	2104      	movs	r1, #4
 80106ca:	430b      	orrs	r3, r1
 80106cc:	6093      	str	r3, [r2, #8]
 80106ce:	2000      	movs	r0, #0
}
 80106d0:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80106d2:	f7ff fedd 	bl	8010490 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d0e6      	beq.n	80106a8 <HAL_ADC_Start+0x20>
 80106da:	e7f9      	b.n	80106d0 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 80106dc:	2002      	movs	r0, #2
 80106de:	e7f7      	b.n	80106d0 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 80106e0:	2002      	movs	r0, #2
 80106e2:	e7f5      	b.n	80106d0 <HAL_ADC_Start+0x48>
 80106e4:	fffff0fe 	.word	0xfffff0fe

080106e8 <HAL_ADC_Stop>:
{ 
 80106e8:	b510      	push	{r4, lr}
 80106ea:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80106ec:	2340      	movs	r3, #64	; 0x40
 80106ee:	5cc3      	ldrb	r3, [r0, r3]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d017      	beq.n	8010724 <HAL_ADC_Stop+0x3c>
 80106f4:	2340      	movs	r3, #64	; 0x40
 80106f6:	2201      	movs	r2, #1
 80106f8:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80106fa:	f7ff fe5f 	bl	80103bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80106fe:	2800      	cmp	r0, #0
 8010700:	d003      	beq.n	801070a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010702:	2340      	movs	r3, #64	; 0x40
 8010704:	2200      	movs	r2, #0
 8010706:	54e2      	strb	r2, [r4, r3]
}
 8010708:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 801070a:	0020      	movs	r0, r4
 801070c:	f7ff fe80 	bl	8010410 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010710:	2800      	cmp	r0, #0
 8010712:	d1f6      	bne.n	8010702 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010714:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010716:	4a04      	ldr	r2, [pc, #16]	; (8010728 <HAL_ADC_Stop+0x40>)
 8010718:	4013      	ands	r3, r2
 801071a:	3204      	adds	r2, #4
 801071c:	32ff      	adds	r2, #255	; 0xff
 801071e:	4313      	orrs	r3, r2
 8010720:	6463      	str	r3, [r4, #68]	; 0x44
 8010722:	e7ee      	b.n	8010702 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010724:	2002      	movs	r0, #2
 8010726:	e7ef      	b.n	8010708 <HAL_ADC_Stop+0x20>
 8010728:	fffffefe 	.word	0xfffffefe

0801072c <HAL_ADC_PollForConversion>:
{
 801072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801072e:	0006      	movs	r6, r0
 8010730:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010732:	6943      	ldr	r3, [r0, #20]
 8010734:	2b08      	cmp	r3, #8
 8010736:	d026      	beq.n	8010786 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010738:	6803      	ldr	r3, [r0, #0]
 801073a:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801073c:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 801073e:	07db      	lsls	r3, r3, #31
 8010740:	d418      	bmi.n	8010774 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010742:	f7ff fe19 	bl	8010378 <HAL_GetTick>
 8010746:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010748:	6832      	ldr	r2, [r6, #0]
 801074a:	6813      	ldr	r3, [r2, #0]
 801074c:	421d      	tst	r5, r3
 801074e:	d11c      	bne.n	801078a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010750:	1c63      	adds	r3, r4, #1
 8010752:	d0fa      	beq.n	801074a <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010754:	2c00      	cmp	r4, #0
 8010756:	d004      	beq.n	8010762 <HAL_ADC_PollForConversion+0x36>
 8010758:	f7ff fe0e 	bl	8010378 <HAL_GetTick>
 801075c:	1bc0      	subs	r0, r0, r7
 801075e:	42a0      	cmp	r0, r4
 8010760:	d9f2      	bls.n	8010748 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010762:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010764:	2204      	movs	r2, #4
 8010766:	4313      	orrs	r3, r2
 8010768:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 801076a:	2340      	movs	r3, #64	; 0x40
 801076c:	2200      	movs	r2, #0
 801076e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010770:	2003      	movs	r0, #3
 8010772:	e007      	b.n	8010784 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010774:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010776:	2220      	movs	r2, #32
 8010778:	4313      	orrs	r3, r2
 801077a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 801077c:	2340      	movs	r3, #64	; 0x40
 801077e:	2200      	movs	r2, #0
 8010780:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010782:	2001      	movs	r0, #1
}
 8010784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010786:	2508      	movs	r5, #8
 8010788:	e7db      	b.n	8010742 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801078a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801078c:	2380      	movs	r3, #128	; 0x80
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	430b      	orrs	r3, r1
 8010792:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010794:	68d1      	ldr	r1, [r2, #12]
 8010796:	23c0      	movs	r3, #192	; 0xc0
 8010798:	011b      	lsls	r3, r3, #4
 801079a:	4219      	tst	r1, r3
 801079c:	d113      	bne.n	80107c6 <HAL_ADC_PollForConversion+0x9a>
 801079e:	6a33      	ldr	r3, [r6, #32]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d110      	bne.n	80107c6 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80107a4:	6813      	ldr	r3, [r2, #0]
 80107a6:	071b      	lsls	r3, r3, #28
 80107a8:	d50d      	bpl.n	80107c6 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80107aa:	6893      	ldr	r3, [r2, #8]
 80107ac:	075b      	lsls	r3, r3, #29
 80107ae:	d412      	bmi.n	80107d6 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80107b0:	6853      	ldr	r3, [r2, #4]
 80107b2:	210c      	movs	r1, #12
 80107b4:	438b      	bics	r3, r1
 80107b6:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80107b8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80107ba:	4a0b      	ldr	r2, [pc, #44]	; (80107e8 <HAL_ADC_PollForConversion+0xbc>)
 80107bc:	4013      	ands	r3, r2
 80107be:	3204      	adds	r2, #4
 80107c0:	32ff      	adds	r2, #255	; 0xff
 80107c2:	4313      	orrs	r3, r2
 80107c4:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 80107c6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80107c8:	69b3      	ldr	r3, [r6, #24]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d1da      	bne.n	8010784 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80107ce:	6833      	ldr	r3, [r6, #0]
 80107d0:	220c      	movs	r2, #12
 80107d2:	601a      	str	r2, [r3, #0]
 80107d4:	e7d6      	b.n	8010784 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80107d6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80107d8:	2220      	movs	r2, #32
 80107da:	4313      	orrs	r3, r2
 80107dc:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80107de:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80107e0:	3a1f      	subs	r2, #31
 80107e2:	4313      	orrs	r3, r2
 80107e4:	64b3      	str	r3, [r6, #72]	; 0x48
 80107e6:	e7ee      	b.n	80107c6 <HAL_ADC_PollForConversion+0x9a>
 80107e8:	fffffefe 	.word	0xfffffefe

080107ec <HAL_ADC_Start_IT>:
{
 80107ec:	b510      	push	{r4, lr}
 80107ee:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80107f0:	6803      	ldr	r3, [r0, #0]
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	075b      	lsls	r3, r3, #29
 80107f6:	d436      	bmi.n	8010866 <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 80107f8:	2340      	movs	r3, #64	; 0x40
 80107fa:	5cc3      	ldrb	r3, [r0, r3]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d034      	beq.n	801086a <HAL_ADC_Start_IT+0x7e>
 8010800:	2340      	movs	r3, #64	; 0x40
 8010802:	2201      	movs	r2, #1
 8010804:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010806:	69c3      	ldr	r3, [r0, #28]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d121      	bne.n	8010850 <HAL_ADC_Start_IT+0x64>
      ADC_STATE_CLR_SET(hadc->State,
 801080c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801080e:	4a18      	ldr	r2, [pc, #96]	; (8010870 <HAL_ADC_Start_IT+0x84>)
 8010810:	401a      	ands	r2, r3
 8010812:	2380      	movs	r3, #128	; 0x80
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	4313      	orrs	r3, r2
 8010818:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 801081a:	2300      	movs	r3, #0
 801081c:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801081e:	2240      	movs	r2, #64	; 0x40
 8010820:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010822:	6823      	ldr	r3, [r4, #0]
 8010824:	3a24      	subs	r2, #36	; 0x24
 8010826:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8010828:	6963      	ldr	r3, [r4, #20]
 801082a:	2b08      	cmp	r3, #8
 801082c:	d115      	bne.n	801085a <HAL_ADC_Start_IT+0x6e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801082e:	6822      	ldr	r2, [r4, #0]
 8010830:	6853      	ldr	r3, [r2, #4]
 8010832:	2104      	movs	r1, #4
 8010834:	438b      	bics	r3, r1
 8010836:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8010838:	6822      	ldr	r2, [r4, #0]
 801083a:	6853      	ldr	r3, [r2, #4]
 801083c:	3114      	adds	r1, #20
 801083e:	430b      	orrs	r3, r1
 8010840:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010842:	6822      	ldr	r2, [r4, #0]
 8010844:	6893      	ldr	r3, [r2, #8]
 8010846:	2104      	movs	r1, #4
 8010848:	430b      	orrs	r3, r1
 801084a:	6093      	str	r3, [r2, #8]
 801084c:	2000      	movs	r0, #0
}
 801084e:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010850:	f7ff fe1e 	bl	8010490 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010854:	2800      	cmp	r0, #0
 8010856:	d0d9      	beq.n	801080c <HAL_ADC_Start_IT+0x20>
 8010858:	e7f9      	b.n	801084e <HAL_ADC_Start_IT+0x62>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 801085a:	6822      	ldr	r2, [r4, #0]
 801085c:	6853      	ldr	r3, [r2, #4]
 801085e:	211c      	movs	r1, #28
 8010860:	430b      	orrs	r3, r1
 8010862:	6053      	str	r3, [r2, #4]
          break;
 8010864:	e7ed      	b.n	8010842 <HAL_ADC_Start_IT+0x56>
    tmp_hal_status = HAL_BUSY;
 8010866:	2002      	movs	r0, #2
 8010868:	e7f1      	b.n	801084e <HAL_ADC_Start_IT+0x62>
    __HAL_LOCK(hadc);
 801086a:	2002      	movs	r0, #2
 801086c:	e7ef      	b.n	801084e <HAL_ADC_Start_IT+0x62>
 801086e:	46c0      	nop			; (mov r8, r8)
 8010870:	fffff0fe 	.word	0xfffff0fe

08010874 <HAL_ADC_Stop_IT>:
{
 8010874:	b510      	push	{r4, lr}
 8010876:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010878:	2340      	movs	r3, #64	; 0x40
 801087a:	5cc3      	ldrb	r3, [r0, r3]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d01c      	beq.n	80108ba <HAL_ADC_Stop_IT+0x46>
 8010880:	2340      	movs	r3, #64	; 0x40
 8010882:	2201      	movs	r2, #1
 8010884:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010886:	f7ff fd99 	bl	80103bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801088a:	2800      	cmp	r0, #0
 801088c:	d003      	beq.n	8010896 <HAL_ADC_Stop_IT+0x22>
  __HAL_UNLOCK(hadc);
 801088e:	2340      	movs	r3, #64	; 0x40
 8010890:	2200      	movs	r2, #0
 8010892:	54e2      	strb	r2, [r4, r3]
}
 8010894:	bd10      	pop	{r4, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8010896:	6822      	ldr	r2, [r4, #0]
 8010898:	6853      	ldr	r3, [r2, #4]
 801089a:	211c      	movs	r1, #28
 801089c:	438b      	bics	r3, r1
 801089e:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 80108a0:	0020      	movs	r0, r4
 80108a2:	f7ff fdb5 	bl	8010410 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80108a6:	2800      	cmp	r0, #0
 80108a8:	d1f1      	bne.n	801088e <HAL_ADC_Stop_IT+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 80108aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80108ac:	4a04      	ldr	r2, [pc, #16]	; (80108c0 <HAL_ADC_Stop_IT+0x4c>)
 80108ae:	4013      	ands	r3, r2
 80108b0:	3204      	adds	r2, #4
 80108b2:	32ff      	adds	r2, #255	; 0xff
 80108b4:	4313      	orrs	r3, r2
 80108b6:	6463      	str	r3, [r4, #68]	; 0x44
 80108b8:	e7e9      	b.n	801088e <HAL_ADC_Stop_IT+0x1a>
  __HAL_LOCK(hadc);
 80108ba:	2002      	movs	r0, #2
 80108bc:	e7ea      	b.n	8010894 <HAL_ADC_Stop_IT+0x20>
 80108be:	46c0      	nop			; (mov r8, r8)
 80108c0:	fffffefe 	.word	0xfffffefe

080108c4 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80108c4:	6803      	ldr	r3, [r0, #0]
 80108c6:	2208      	movs	r2, #8
 80108c8:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 80108ca:	6803      	ldr	r3, [r0, #0]
 80108cc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80108ce:	4770      	bx	lr

080108d0 <HAL_ADC_LevelOutOfWindowCallback>:
}
 80108d0:	4770      	bx	lr

080108d2 <HAL_ADC_ErrorCallback>:
}
 80108d2:	4770      	bx	lr

080108d4 <HAL_ADC_IRQHandler>:
{
 80108d4:	b510      	push	{r4, lr}
 80108d6:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80108d8:	6803      	ldr	r3, [r0, #0]
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	0752      	lsls	r2, r2, #29
 80108de:	d502      	bpl.n	80108e6 <HAL_ADC_IRQHandler+0x12>
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	0752      	lsls	r2, r2, #29
 80108e4:	d405      	bmi.n	80108f2 <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80108e6:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80108e8:	0712      	lsls	r2, r2, #28
 80108ea:	d529      	bpl.n	8010940 <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80108ec:	685a      	ldr	r2, [r3, #4]
 80108ee:	0712      	lsls	r2, r2, #28
 80108f0:	d526      	bpl.n	8010940 <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80108f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80108f4:	06d2      	lsls	r2, r2, #27
 80108f6:	d404      	bmi.n	8010902 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80108f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80108fa:	2280      	movs	r2, #128	; 0x80
 80108fc:	0092      	lsls	r2, r2, #2
 80108fe:	430a      	orrs	r2, r1
 8010900:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010902:	68d9      	ldr	r1, [r3, #12]
 8010904:	22c0      	movs	r2, #192	; 0xc0
 8010906:	0112      	lsls	r2, r2, #4
 8010908:	4211      	tst	r1, r2
 801090a:	d113      	bne.n	8010934 <HAL_ADC_IRQHandler+0x60>
 801090c:	6a22      	ldr	r2, [r4, #32]
 801090e:	2a00      	cmp	r2, #0
 8010910:	d110      	bne.n	8010934 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	0712      	lsls	r2, r2, #28
 8010916:	d50d      	bpl.n	8010934 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010918:	689a      	ldr	r2, [r3, #8]
 801091a:	0752      	lsls	r2, r2, #29
 801091c:	d431      	bmi.n	8010982 <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801091e:	685a      	ldr	r2, [r3, #4]
 8010920:	210c      	movs	r1, #12
 8010922:	438a      	bics	r2, r1
 8010924:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8010926:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010928:	4a20      	ldr	r2, [pc, #128]	; (80109ac <HAL_ADC_IRQHandler+0xd8>)
 801092a:	4013      	ands	r3, r2
 801092c:	3204      	adds	r2, #4
 801092e:	32ff      	adds	r2, #255	; 0xff
 8010930:	4313      	orrs	r3, r2
 8010932:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8010934:	0020      	movs	r0, r4
 8010936:	f7f8 f947 	bl	8008bc8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	220c      	movs	r2, #12
 801093e:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8010940:	6823      	ldr	r3, [r4, #0]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	0612      	lsls	r2, r2, #24
 8010946:	d502      	bpl.n	801094e <HAL_ADC_IRQHandler+0x7a>
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	061b      	lsls	r3, r3, #24
 801094c:	d422      	bmi.n	8010994 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 801094e:	6823      	ldr	r3, [r4, #0]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	06d2      	lsls	r2, r2, #27
 8010954:	d514      	bpl.n	8010980 <HAL_ADC_IRQHandler+0xac>
 8010956:	685a      	ldr	r2, [r3, #4]
 8010958:	06d2      	lsls	r2, r2, #27
 801095a:	d511      	bpl.n	8010980 <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 801095c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801095e:	2a01      	cmp	r2, #1
 8010960:	d002      	beq.n	8010968 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8010962:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8010964:	07d2      	lsls	r2, r2, #31
 8010966:	d508      	bpl.n	801097a <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8010968:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801096a:	2102      	movs	r1, #2
 801096c:	430a      	orrs	r2, r1
 801096e:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8010970:	2210      	movs	r2, #16
 8010972:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8010974:	0020      	movs	r0, r4
 8010976:	f7ff ffac 	bl	80108d2 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801097a:	6823      	ldr	r3, [r4, #0]
 801097c:	2210      	movs	r2, #16
 801097e:	601a      	str	r2, [r3, #0]
}
 8010980:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010982:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010984:	2220      	movs	r2, #32
 8010986:	4313      	orrs	r3, r2
 8010988:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801098a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801098c:	3a1f      	subs	r2, #31
 801098e:	4313      	orrs	r3, r2
 8010990:	64a3      	str	r3, [r4, #72]	; 0x48
 8010992:	e7cf      	b.n	8010934 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8010994:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010996:	2380      	movs	r3, #128	; 0x80
 8010998:	025b      	lsls	r3, r3, #9
 801099a:	4313      	orrs	r3, r2
 801099c:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801099e:	0020      	movs	r0, r4
 80109a0:	f7ff ff96 	bl	80108d0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80109a4:	6823      	ldr	r3, [r4, #0]
 80109a6:	2280      	movs	r2, #128	; 0x80
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	e7d0      	b.n	801094e <HAL_ADC_IRQHandler+0x7a>
 80109ac:	fffffefe 	.word	0xfffffefe

080109b0 <HAL_ADC_ConfigChannel>:
{
 80109b0:	b530      	push	{r4, r5, lr}
 80109b2:	b083      	sub	sp, #12
 80109b4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80109b6:	2300      	movs	r3, #0
 80109b8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80109ba:	3340      	adds	r3, #64	; 0x40
 80109bc:	5cc3      	ldrb	r3, [r0, r3]
 80109be:	2b01      	cmp	r3, #1
 80109c0:	d100      	bne.n	80109c4 <HAL_ADC_ConfigChannel+0x14>
 80109c2:	e088      	b.n	8010ad6 <HAL_ADC_ConfigChannel+0x126>
 80109c4:	2340      	movs	r3, #64	; 0x40
 80109c6:	2201      	movs	r2, #1
 80109c8:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80109ca:	6803      	ldr	r3, [r0, #0]
 80109cc:	689a      	ldr	r2, [r3, #8]
 80109ce:	0752      	lsls	r2, r2, #29
 80109d0:	d475      	bmi.n	8010abe <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80109d2:	4a42      	ldr	r2, [pc, #264]	; (8010adc <HAL_ADC_ConfigChannel+0x12c>)
 80109d4:	6848      	ldr	r0, [r1, #4]
 80109d6:	4290      	cmp	r0, r2
 80109d8:	d050      	beq.n	8010a7c <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80109da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80109dc:	2201      	movs	r2, #1
 80109de:	680d      	ldr	r5, [r1, #0]
 80109e0:	40aa      	lsls	r2, r5
 80109e2:	4302      	orrs	r2, r0
 80109e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80109e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80109e8:	2280      	movs	r2, #128	; 0x80
 80109ea:	0552      	lsls	r2, r2, #21
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d013      	beq.n	8010a18 <HAL_ADC_ConfigChannel+0x68>
 80109f0:	3b01      	subs	r3, #1
 80109f2:	2b06      	cmp	r3, #6
 80109f4:	d910      	bls.n	8010a18 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80109f6:	6822      	ldr	r2, [r4, #0]
 80109f8:	6950      	ldr	r0, [r2, #20]
 80109fa:	2307      	movs	r3, #7
 80109fc:	4003      	ands	r3, r0
 80109fe:	6888      	ldr	r0, [r1, #8]
 8010a00:	4298      	cmp	r0, r3
 8010a02:	d009      	beq.n	8010a18 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010a04:	6950      	ldr	r0, [r2, #20]
 8010a06:	2307      	movs	r3, #7
 8010a08:	4398      	bics	r0, r3
 8010a0a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010a0c:	6822      	ldr	r2, [r4, #0]
 8010a0e:	6950      	ldr	r0, [r2, #20]
 8010a10:	688d      	ldr	r5, [r1, #8]
 8010a12:	402b      	ands	r3, r5
 8010a14:	4303      	orrs	r3, r0
 8010a16:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010a18:	680b      	ldr	r3, [r1, #0]
 8010a1a:	001a      	movs	r2, r3
 8010a1c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a1e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010a20:	2a02      	cmp	r2, #2
 8010a22:	d851      	bhi.n	8010ac8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010a24:	4a2e      	ldr	r2, [pc, #184]	; (8010ae0 <HAL_ADC_ConfigChannel+0x130>)
 8010a26:	6810      	ldr	r0, [r2, #0]
 8010a28:	2b10      	cmp	r3, #16
 8010a2a:	d024      	beq.n	8010a76 <HAL_ADC_ConfigChannel+0xc6>
 8010a2c:	3b11      	subs	r3, #17
 8010a2e:	425a      	negs	r2, r3
 8010a30:	415a      	adcs	r2, r3
 8010a32:	4253      	negs	r3, r2
 8010a34:	4a2b      	ldr	r2, [pc, #172]	; (8010ae4 <HAL_ADC_ConfigChannel+0x134>)
 8010a36:	4013      	ands	r3, r2
 8010a38:	2280      	movs	r2, #128	; 0x80
 8010a3a:	0452      	lsls	r2, r2, #17
 8010a3c:	4694      	mov	ip, r2
 8010a3e:	4463      	add	r3, ip
 8010a40:	4303      	orrs	r3, r0
 8010a42:	4a27      	ldr	r2, [pc, #156]	; (8010ae0 <HAL_ADC_ConfigChannel+0x130>)
 8010a44:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010a46:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a48:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010a4a:	2b10      	cmp	r3, #16
 8010a4c:	d13c      	bne.n	8010ac8 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010a4e:	4b26      	ldr	r3, [pc, #152]	; (8010ae8 <HAL_ADC_ConfigChannel+0x138>)
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	4926      	ldr	r1, [pc, #152]	; (8010aec <HAL_ADC_ConfigChannel+0x13c>)
 8010a54:	f7ef fb72 	bl	800013c <__udivsi3>
 8010a58:	0083      	lsls	r3, r0, #2
 8010a5a:	1818      	adds	r0, r3, r0
 8010a5c:	0040      	lsls	r0, r0, #1
 8010a5e:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8010a60:	9b01      	ldr	r3, [sp, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d035      	beq.n	8010ad2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010a66:	9b01      	ldr	r3, [sp, #4]
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010a6c:	9b01      	ldr	r3, [sp, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d1f9      	bne.n	8010a66 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a72:	2000      	movs	r0, #0
 8010a74:	e028      	b.n	8010ac8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010a76:	2380      	movs	r3, #128	; 0x80
 8010a78:	041b      	lsls	r3, r3, #16
 8010a7a:	e7e1      	b.n	8010a40 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a7e:	2001      	movs	r0, #1
 8010a80:	680d      	ldr	r5, [r1, #0]
 8010a82:	40a8      	lsls	r0, r5
 8010a84:	4382      	bics	r2, r0
 8010a86:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010a88:	680b      	ldr	r3, [r1, #0]
 8010a8a:	001a      	movs	r2, r3
 8010a8c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a8e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010a90:	2a02      	cmp	r2, #2
 8010a92:	d819      	bhi.n	8010ac8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010a94:	4a12      	ldr	r2, [pc, #72]	; (8010ae0 <HAL_ADC_ConfigChannel+0x130>)
 8010a96:	6811      	ldr	r1, [r2, #0]
 8010a98:	2b10      	cmp	r3, #16
 8010a9a:	d00e      	beq.n	8010aba <HAL_ADC_ConfigChannel+0x10a>
 8010a9c:	3b11      	subs	r3, #17
 8010a9e:	425a      	negs	r2, r3
 8010aa0:	415a      	adcs	r2, r3
 8010aa2:	4252      	negs	r2, r2
 8010aa4:	23c0      	movs	r3, #192	; 0xc0
 8010aa6:	041b      	lsls	r3, r3, #16
 8010aa8:	4013      	ands	r3, r2
 8010aaa:	4a11      	ldr	r2, [pc, #68]	; (8010af0 <HAL_ADC_ConfigChannel+0x140>)
 8010aac:	4694      	mov	ip, r2
 8010aae:	4463      	add	r3, ip
 8010ab0:	400b      	ands	r3, r1
 8010ab2:	4a0b      	ldr	r2, [pc, #44]	; (8010ae0 <HAL_ADC_ConfigChannel+0x130>)
 8010ab4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	e006      	b.n	8010ac8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010aba:	4b0e      	ldr	r3, [pc, #56]	; (8010af4 <HAL_ADC_ConfigChannel+0x144>)
 8010abc:	e7f8      	b.n	8010ab0 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010abe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010ac0:	2220      	movs	r2, #32
 8010ac2:	4313      	orrs	r3, r2
 8010ac4:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010ac6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010ac8:	2340      	movs	r3, #64	; 0x40
 8010aca:	2200      	movs	r2, #0
 8010acc:	54e2      	strb	r2, [r4, r3]
}
 8010ace:	b003      	add	sp, #12
 8010ad0:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e7f8      	b.n	8010ac8 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8010ad6:	2002      	movs	r0, #2
 8010ad8:	e7f9      	b.n	8010ace <HAL_ADC_ConfigChannel+0x11e>
 8010ada:	46c0      	nop			; (mov r8, r8)
 8010adc:	00001001 	.word	0x00001001
 8010ae0:	40012708 	.word	0x40012708
 8010ae4:	ff400000 	.word	0xff400000
 8010ae8:	20000098 	.word	0x20000098
 8010aec:	000f4240 	.word	0x000f4240
 8010af0:	feffffff 	.word	0xfeffffff
 8010af4:	ff7fffff 	.word	0xff7fffff

08010af8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8010af8:	b570      	push	{r4, r5, r6, lr}
 8010afa:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8010afc:	2340      	movs	r3, #64	; 0x40
 8010afe:	5cc3      	ldrb	r3, [r0, r3]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d042      	beq.n	8010b8a <HAL_ADCEx_Calibration_Start+0x92>
 8010b04:	2340      	movs	r3, #64	; 0x40
 8010b06:	2201      	movs	r2, #1
 8010b08:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010b0a:	6802      	ldr	r2, [r0, #0]
 8010b0c:	6891      	ldr	r1, [r2, #8]
 8010b0e:	3b3d      	subs	r3, #61	; 0x3d
 8010b10:	400b      	ands	r3, r1
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d105      	bne.n	8010b22 <HAL_ADCEx_Calibration_Start+0x2a>
 8010b16:	6813      	ldr	r3, [r2, #0]
 8010b18:	07db      	lsls	r3, r3, #31
 8010b1a:	d42d      	bmi.n	8010b78 <HAL_ADCEx_Calibration_Start+0x80>
 8010b1c:	68d3      	ldr	r3, [r2, #12]
 8010b1e:	041b      	lsls	r3, r3, #16
 8010b20:	d42a      	bmi.n	8010b78 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8010b22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b24:	491a      	ldr	r1, [pc, #104]	; (8010b90 <HAL_ADCEx_Calibration_Start+0x98>)
 8010b26:	400b      	ands	r3, r1
 8010b28:	3106      	adds	r1, #6
 8010b2a:	31ff      	adds	r1, #255	; 0xff
 8010b2c:	430b      	orrs	r3, r1
 8010b2e:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8010b30:	6891      	ldr	r1, [r2, #8]
 8010b32:	2380      	movs	r3, #128	; 0x80
 8010b34:	061b      	lsls	r3, r3, #24
 8010b36:	430b      	orrs	r3, r1
 8010b38:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 8010b3a:	f7ff fc1d 	bl	8010378 <HAL_GetTick>
 8010b3e:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8010b40:	6823      	ldr	r3, [r4, #0]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	da0f      	bge.n	8010b68 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8010b48:	f7ff fc16 	bl	8010378 <HAL_GetTick>
 8010b4c:	1b40      	subs	r0, r0, r5
 8010b4e:	2802      	cmp	r0, #2
 8010b50:	d9f6      	bls.n	8010b40 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8010b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b54:	2212      	movs	r2, #18
 8010b56:	4393      	bics	r3, r2
 8010b58:	3a02      	subs	r2, #2
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8010b5e:	2340      	movs	r3, #64	; 0x40
 8010b60:	2200      	movs	r2, #0
 8010b62:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8010b64:	2001      	movs	r0, #1
 8010b66:	e00f      	b.n	8010b88 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8010b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b6a:	2203      	movs	r2, #3
 8010b6c:	4393      	bics	r3, r2
 8010b6e:	3a02      	subs	r2, #2
 8010b70:	4313      	orrs	r3, r2
 8010b72:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010b74:	2000      	movs	r0, #0
 8010b76:	e004      	b.n	8010b82 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010b78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b7a:	2220      	movs	r2, #32
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8010b80:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010b82:	2340      	movs	r3, #64	; 0x40
 8010b84:	2200      	movs	r2, #0
 8010b86:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8010b88:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8010b8a:	2002      	movs	r0, #2
 8010b8c:	e7fc      	b.n	8010b88 <HAL_ADCEx_Calibration_Start+0x90>
 8010b8e:	46c0      	nop			; (mov r8, r8)
 8010b90:	fffffefd 	.word	0xfffffefd

08010b94 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010b94:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010b96:	2800      	cmp	r0, #0
 8010b98:	db14      	blt.n	8010bc4 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010b9a:	0883      	lsrs	r3, r0, #2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4a15      	ldr	r2, [pc, #84]	; (8010bf4 <HAL_NVIC_SetPriority+0x60>)
 8010ba0:	4694      	mov	ip, r2
 8010ba2:	4463      	add	r3, ip
 8010ba4:	26c0      	movs	r6, #192	; 0xc0
 8010ba6:	00b6      	lsls	r6, r6, #2
 8010ba8:	599d      	ldr	r5, [r3, r6]
 8010baa:	2403      	movs	r4, #3
 8010bac:	4020      	ands	r0, r4
 8010bae:	00c0      	lsls	r0, r0, #3
 8010bb0:	22ff      	movs	r2, #255	; 0xff
 8010bb2:	0014      	movs	r4, r2
 8010bb4:	4084      	lsls	r4, r0
 8010bb6:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010bb8:	0189      	lsls	r1, r1, #6
 8010bba:	400a      	ands	r2, r1
 8010bbc:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010bbe:	432a      	orrs	r2, r5
 8010bc0:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010bc4:	b2c0      	uxtb	r0, r0
 8010bc6:	230f      	movs	r3, #15
 8010bc8:	4003      	ands	r3, r0
 8010bca:	3b08      	subs	r3, #8
 8010bcc:	089b      	lsrs	r3, r3, #2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4a09      	ldr	r2, [pc, #36]	; (8010bf8 <HAL_NVIC_SetPriority+0x64>)
 8010bd2:	4694      	mov	ip, r2
 8010bd4:	4463      	add	r3, ip
 8010bd6:	69dd      	ldr	r5, [r3, #28]
 8010bd8:	2203      	movs	r2, #3
 8010bda:	4010      	ands	r0, r2
 8010bdc:	00c0      	lsls	r0, r0, #3
 8010bde:	24ff      	movs	r4, #255	; 0xff
 8010be0:	0022      	movs	r2, r4
 8010be2:	4082      	lsls	r2, r0
 8010be4:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010be6:	0189      	lsls	r1, r1, #6
 8010be8:	400c      	ands	r4, r1
 8010bea:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010bec:	432c      	orrs	r4, r5
 8010bee:	61dc      	str	r4, [r3, #28]
 8010bf0:	e7e7      	b.n	8010bc2 <HAL_NVIC_SetPriority+0x2e>
 8010bf2:	46c0      	nop			; (mov r8, r8)
 8010bf4:	e000e100 	.word	0xe000e100
 8010bf8:	e000ed00 	.word	0xe000ed00

08010bfc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010bfc:	231f      	movs	r3, #31
 8010bfe:	4018      	ands	r0, r3
 8010c00:	3b1e      	subs	r3, #30
 8010c02:	4083      	lsls	r3, r0
 8010c04:	4a01      	ldr	r2, [pc, #4]	; (8010c0c <HAL_NVIC_EnableIRQ+0x10>)
 8010c06:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010c08:	4770      	bx	lr
 8010c0a:	46c0      	nop			; (mov r8, r8)
 8010c0c:	e000e100 	.word	0xe000e100

08010c10 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010c10:	231f      	movs	r3, #31
 8010c12:	4018      	ands	r0, r3
 8010c14:	3b1e      	subs	r3, #30
 8010c16:	4083      	lsls	r3, r0
 8010c18:	4901      	ldr	r1, [pc, #4]	; (8010c20 <HAL_NVIC_DisableIRQ+0x10>)
 8010c1a:	2280      	movs	r2, #128	; 0x80
 8010c1c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010c1e:	4770      	bx	lr
 8010c20:	e000e100 	.word	0xe000e100

08010c24 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010c24:	1e43      	subs	r3, r0, #1
 8010c26:	4a0a      	ldr	r2, [pc, #40]	; (8010c50 <HAL_SYSTICK_Config+0x2c>)
 8010c28:	2001      	movs	r0, #1
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d80e      	bhi.n	8010c4c <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c2e:	4a09      	ldr	r2, [pc, #36]	; (8010c54 <HAL_SYSTICK_Config+0x30>)
 8010c30:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010c32:	4809      	ldr	r0, [pc, #36]	; (8010c58 <HAL_SYSTICK_Config+0x34>)
 8010c34:	6a03      	ldr	r3, [r0, #32]
 8010c36:	021b      	lsls	r3, r3, #8
 8010c38:	0a1b      	lsrs	r3, r3, #8
 8010c3a:	21c0      	movs	r1, #192	; 0xc0
 8010c3c:	0609      	lsls	r1, r1, #24
 8010c3e:	430b      	orrs	r3, r1
 8010c40:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c42:	2300      	movs	r3, #0
 8010c44:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c46:	3307      	adds	r3, #7
 8010c48:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c4a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010c4c:	4770      	bx	lr
 8010c4e:	46c0      	nop			; (mov r8, r8)
 8010c50:	00ffffff 	.word	0x00ffffff
 8010c54:	e000e010 	.word	0xe000e010
 8010c58:	e000ed00 	.word	0xe000ed00

08010c5c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010c5c:	2804      	cmp	r0, #4
 8010c5e:	d005      	beq.n	8010c6c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010c60:	4a05      	ldr	r2, [pc, #20]	; (8010c78 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010c62:	6813      	ldr	r3, [r2, #0]
 8010c64:	2104      	movs	r1, #4
 8010c66:	438b      	bics	r3, r1
 8010c68:	6013      	str	r3, [r2, #0]
  }
}
 8010c6a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010c6c:	4a02      	ldr	r2, [pc, #8]	; (8010c78 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010c6e:	6813      	ldr	r3, [r2, #0]
 8010c70:	2104      	movs	r1, #4
 8010c72:	430b      	orrs	r3, r1
 8010c74:	6013      	str	r3, [r2, #0]
 8010c76:	e7f8      	b.n	8010c6a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010c78:	e000e010 	.word	0xe000e010

08010c7c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c7e:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010c80:	0891      	lsrs	r1, r2, #2
 8010c82:	d013      	beq.n	8010cac <CRC_Handle_8+0x30>
 8010c84:	0034      	movs	r4, r6
 8010c86:	2303      	movs	r3, #3
 8010c88:	0017      	movs	r7, r2
 8010c8a:	439f      	bics	r7, r3
 8010c8c:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010c8e:	7823      	ldrb	r3, [r4, #0]
 8010c90:	061b      	lsls	r3, r3, #24
 8010c92:	7865      	ldrb	r5, [r4, #1]
 8010c94:	042d      	lsls	r5, r5, #16
 8010c96:	432b      	orrs	r3, r5
 8010c98:	78e5      	ldrb	r5, [r4, #3]
 8010c9a:	432b      	orrs	r3, r5
 8010c9c:	78a5      	ldrb	r5, [r4, #2]
 8010c9e:	022d      	lsls	r5, r5, #8
 8010ca0:	432b      	orrs	r3, r5
 8010ca2:	6805      	ldr	r5, [r0, #0]
 8010ca4:	602b      	str	r3, [r5, #0]
 8010ca6:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010ca8:	42bc      	cmp	r4, r7
 8010caa:	d1f0      	bne.n	8010c8e <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010cac:	2303      	movs	r3, #3
 8010cae:	401a      	ands	r2, r3
 8010cb0:	d01e      	beq.n	8010cf0 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010cb2:	2a01      	cmp	r2, #1
 8010cb4:	d00a      	beq.n	8010ccc <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010cb6:	2a02      	cmp	r2, #2
 8010cb8:	d10d      	bne.n	8010cd6 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010cba:	0089      	lsls	r1, r1, #2
 8010cbc:	5c72      	ldrb	r2, [r6, r1]
 8010cbe:	0212      	lsls	r2, r2, #8
 8010cc0:	1871      	adds	r1, r6, r1
 8010cc2:	784b      	ldrb	r3, [r1, #1]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	6802      	ldr	r2, [r0, #0]
 8010cc8:	8013      	strh	r3, [r2, #0]
 8010cca:	e011      	b.n	8010cf0 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010ccc:	0089      	lsls	r1, r1, #2
 8010cce:	5d8b      	ldrb	r3, [r1, r6]
 8010cd0:	6802      	ldr	r2, [r0, #0]
 8010cd2:	7013      	strb	r3, [r2, #0]
 8010cd4:	e00c      	b.n	8010cf0 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010cd6:	2a03      	cmp	r2, #3
 8010cd8:	d10a      	bne.n	8010cf0 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010cda:	0089      	lsls	r1, r1, #2
 8010cdc:	5c72      	ldrb	r2, [r6, r1]
 8010cde:	0212      	lsls	r2, r2, #8
 8010ce0:	1871      	adds	r1, r6, r1
 8010ce2:	784b      	ldrb	r3, [r1, #1]
 8010ce4:	4313      	orrs	r3, r2
 8010ce6:	6802      	ldr	r2, [r0, #0]
 8010ce8:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010cea:	788b      	ldrb	r3, [r1, #2]
 8010cec:	6802      	ldr	r2, [r0, #0]
 8010cee:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010cf0:	6803      	ldr	r3, [r0, #0]
 8010cf2:	6818      	ldr	r0, [r3, #0]
}
 8010cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cf6 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf8:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010cfa:	0852      	lsrs	r2, r2, #1
 8010cfc:	d00b      	beq.n	8010d16 <CRC_Handle_16+0x20>
 8010cfe:	000c      	movs	r4, r1
 8010d00:	0097      	lsls	r7, r2, #2
 8010d02:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010d04:	8823      	ldrh	r3, [r4, #0]
 8010d06:	041b      	lsls	r3, r3, #16
 8010d08:	8866      	ldrh	r6, [r4, #2]
 8010d0a:	4333      	orrs	r3, r6
 8010d0c:	6806      	ldr	r6, [r0, #0]
 8010d0e:	6033      	str	r3, [r6, #0]
 8010d10:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010d12:	42bc      	cmp	r4, r7
 8010d14:	d1f6      	bne.n	8010d04 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010d16:	07eb      	lsls	r3, r5, #31
 8010d18:	d503      	bpl.n	8010d22 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010d1a:	0092      	lsls	r2, r2, #2
 8010d1c:	5a53      	ldrh	r3, [r2, r1]
 8010d1e:	6802      	ldr	r2, [r0, #0]
 8010d20:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010d22:	6803      	ldr	r3, [r0, #0]
 8010d24:	6818      	ldr	r0, [r3, #0]
}
 8010d26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d28 <HAL_CRC_Init>:
{
 8010d28:	b510      	push	{r4, lr}
 8010d2a:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010d2c:	d029      	beq.n	8010d82 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010d2e:	7f43      	ldrb	r3, [r0, #29]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d01e      	beq.n	8010d72 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010d34:	2302      	movs	r3, #2
 8010d36:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010d38:	0020      	movs	r0, r4
 8010d3a:	f000 f8b1 	bl	8010ea0 <HAL_CRCEx_Init>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d121      	bne.n	8010d86 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010d42:	7963      	ldrb	r3, [r4, #5]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d118      	bne.n	8010d7a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	4252      	negs	r2, r2
 8010d4e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010d50:	6822      	ldr	r2, [r4, #0]
 8010d52:	6893      	ldr	r3, [r2, #8]
 8010d54:	2160      	movs	r1, #96	; 0x60
 8010d56:	438b      	bics	r3, r1
 8010d58:	6961      	ldr	r1, [r4, #20]
 8010d5a:	430b      	orrs	r3, r1
 8010d5c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010d5e:	6822      	ldr	r2, [r4, #0]
 8010d60:	6893      	ldr	r3, [r2, #8]
 8010d62:	2180      	movs	r1, #128	; 0x80
 8010d64:	438b      	bics	r3, r1
 8010d66:	69a1      	ldr	r1, [r4, #24]
 8010d68:	430b      	orrs	r3, r1
 8010d6a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	7763      	strb	r3, [r4, #29]
}
 8010d70:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010d72:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010d74:	f7fc fbe4 	bl	800d540 <HAL_CRC_MspInit>
 8010d78:	e7dc      	b.n	8010d34 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	6922      	ldr	r2, [r4, #16]
 8010d7e:	611a      	str	r2, [r3, #16]
 8010d80:	e7e6      	b.n	8010d50 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010d82:	2001      	movs	r0, #1
 8010d84:	e7f4      	b.n	8010d70 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010d86:	2001      	movs	r0, #1
 8010d88:	e7f2      	b.n	8010d70 <HAL_CRC_Init+0x48>

08010d8a <HAL_CRC_Accumulate>:
{
 8010d8a:	b510      	push	{r4, lr}
 8010d8c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010d8e:	7f03      	ldrb	r3, [r0, #28]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d024      	beq.n	8010dde <HAL_CRC_Accumulate+0x54>
 8010d94:	2301      	movs	r3, #1
 8010d96:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010d98:	3301      	adds	r3, #1
 8010d9a:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010d9c:	6a03      	ldr	r3, [r0, #32]
 8010d9e:	2b02      	cmp	r3, #2
 8010da0:	d01a      	beq.n	8010dd8 <HAL_CRC_Accumulate+0x4e>
 8010da2:	2b03      	cmp	r3, #3
 8010da4:	d007      	beq.n	8010db6 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010da6:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d011      	beq.n	8010dd0 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010dac:	2301      	movs	r3, #1
 8010dae:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010db0:	2300      	movs	r3, #0
 8010db2:	7723      	strb	r3, [r4, #28]
}
 8010db4:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010db6:	2a00      	cmp	r2, #0
 8010db8:	d007      	beq.n	8010dca <HAL_CRC_Accumulate+0x40>
 8010dba:	000b      	movs	r3, r1
 8010dbc:	0092      	lsls	r2, r2, #2
 8010dbe:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010dc0:	6822      	ldr	r2, [r4, #0]
 8010dc2:	cb01      	ldmia	r3!, {r0}
 8010dc4:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010dc6:	428b      	cmp	r3, r1
 8010dc8:	d1fa      	bne.n	8010dc0 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	6818      	ldr	r0, [r3, #0]
      break;
 8010dce:	e7ed      	b.n	8010dac <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010dd0:	0020      	movs	r0, r4
 8010dd2:	f7ff ff53 	bl	8010c7c <CRC_Handle_8>
      break;
 8010dd6:	e7e9      	b.n	8010dac <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010dd8:	f7ff ff8d 	bl	8010cf6 <CRC_Handle_16>
      break;
 8010ddc:	e7e6      	b.n	8010dac <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010dde:	2002      	movs	r0, #2
 8010de0:	e7e8      	b.n	8010db4 <HAL_CRC_Accumulate+0x2a>

08010de2 <HAL_CRC_Calculate>:
{
 8010de2:	b570      	push	{r4, r5, r6, lr}
 8010de4:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010de6:	7f03      	ldrb	r3, [r0, #28]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d029      	beq.n	8010e40 <HAL_CRC_Calculate+0x5e>
 8010dec:	2501      	movs	r5, #1
 8010dee:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010df0:	2302      	movs	r3, #2
 8010df2:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010df4:	6800      	ldr	r0, [r0, #0]
 8010df6:	6883      	ldr	r3, [r0, #8]
 8010df8:	432b      	orrs	r3, r5
 8010dfa:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010dfc:	6a23      	ldr	r3, [r4, #32]
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	d01a      	beq.n	8010e38 <HAL_CRC_Calculate+0x56>
 8010e02:	2b03      	cmp	r3, #3
 8010e04:	d007      	beq.n	8010e16 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010e06:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d011      	beq.n	8010e30 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010e10:	2300      	movs	r3, #0
 8010e12:	7723      	strb	r3, [r4, #28]
}
 8010e14:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010e16:	2a00      	cmp	r2, #0
 8010e18:	d007      	beq.n	8010e2a <HAL_CRC_Calculate+0x48>
 8010e1a:	000b      	movs	r3, r1
 8010e1c:	0092      	lsls	r2, r2, #2
 8010e1e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010e20:	6820      	ldr	r0, [r4, #0]
 8010e22:	cb20      	ldmia	r3!, {r5}
 8010e24:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010e26:	428b      	cmp	r3, r1
 8010e28:	d1fa      	bne.n	8010e20 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	6818      	ldr	r0, [r3, #0]
      break;
 8010e2e:	e7ed      	b.n	8010e0c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010e30:	0020      	movs	r0, r4
 8010e32:	f7ff ff23 	bl	8010c7c <CRC_Handle_8>
      break;
 8010e36:	e7e9      	b.n	8010e0c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010e38:	0020      	movs	r0, r4
 8010e3a:	f7ff ff5c 	bl	8010cf6 <CRC_Handle_16>
      break;
 8010e3e:	e7e5      	b.n	8010e0c <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010e40:	2002      	movs	r0, #2
 8010e42:	e7e7      	b.n	8010e14 <HAL_CRC_Calculate+0x32>

08010e44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010e44:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010e46:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010e48:	2501      	movs	r5, #1
 8010e4a:	002c      	movs	r4, r5
 8010e4c:	409c      	lsls	r4, r3
 8010e4e:	4221      	tst	r1, r4
 8010e50:	d10b      	bne.n	8010e6a <HAL_CRCEx_Polynomial_Set+0x26>
 8010e52:	3b01      	subs	r3, #1
 8010e54:	d2f9      	bcs.n	8010e4a <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010e56:	2a10      	cmp	r2, #16
 8010e58:	d01c      	beq.n	8010e94 <HAL_CRCEx_Polynomial_Set+0x50>
 8010e5a:	2a18      	cmp	r2, #24
 8010e5c:	d01e      	beq.n	8010e9c <HAL_CRCEx_Polynomial_Set+0x58>
 8010e5e:	2a08      	cmp	r2, #8
 8010e60:	d109      	bne.n	8010e76 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010e62:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010e64:	2b0f      	cmp	r3, #15
 8010e66:	d906      	bls.n	8010e76 <HAL_CRCEx_Polynomial_Set+0x32>
 8010e68:	e00e      	b.n	8010e88 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010e6a:	2a10      	cmp	r2, #16
 8010e6c:	d012      	beq.n	8010e94 <HAL_CRCEx_Polynomial_Set+0x50>
 8010e6e:	2a18      	cmp	r2, #24
 8010e70:	d00c      	beq.n	8010e8c <HAL_CRCEx_Polynomial_Set+0x48>
 8010e72:	2a08      	cmp	r2, #8
 8010e74:	d0f5      	beq.n	8010e62 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010e76:	6803      	ldr	r3, [r0, #0]
 8010e78:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010e7a:	6801      	ldr	r1, [r0, #0]
 8010e7c:	688b      	ldr	r3, [r1, #8]
 8010e7e:	2018      	movs	r0, #24
 8010e80:	4383      	bics	r3, r0
 8010e82:	431a      	orrs	r2, r3
 8010e84:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010e86:	2400      	movs	r4, #0
}
 8010e88:	0020      	movs	r0, r4
 8010e8a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010e8c:	2b06      	cmp	r3, #6
 8010e8e:	d9f2      	bls.n	8010e76 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010e90:	2401      	movs	r4, #1
 8010e92:	e7f9      	b.n	8010e88 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010e94:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010e96:	2b07      	cmp	r3, #7
 8010e98:	d9ed      	bls.n	8010e76 <HAL_CRCEx_Polynomial_Set+0x32>
 8010e9a:	e7f5      	b.n	8010e88 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010e9c:	2401      	movs	r4, #1
 8010e9e:	e7f3      	b.n	8010e88 <HAL_CRCEx_Polynomial_Set+0x44>

08010ea0 <HAL_CRCEx_Init>:
{
 8010ea0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010ea2:	7903      	ldrb	r3, [r0, #4]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d109      	bne.n	8010ebc <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010ea8:	6803      	ldr	r3, [r0, #0]
 8010eaa:	4a08      	ldr	r2, [pc, #32]	; (8010ecc <HAL_CRCEx_Init+0x2c>)
 8010eac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010eae:	6802      	ldr	r2, [r0, #0]
 8010eb0:	6893      	ldr	r3, [r2, #8]
 8010eb2:	2118      	movs	r1, #24
 8010eb4:	438b      	bics	r3, r1
 8010eb6:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010eb8:	2000      	movs	r0, #0
}
 8010eba:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010ebc:	68c2      	ldr	r2, [r0, #12]
 8010ebe:	6881      	ldr	r1, [r0, #8]
 8010ec0:	f7ff ffc0 	bl	8010e44 <HAL_CRCEx_Polynomial_Set>
 8010ec4:	1e43      	subs	r3, r0, #1
 8010ec6:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010ec8:	b2c0      	uxtb	r0, r0
 8010eca:	e7f6      	b.n	8010eba <HAL_CRCEx_Init+0x1a>
 8010ecc:	04c11db7 	.word	0x04c11db7

08010ed0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010ed0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d022      	beq.n	8010f1c <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010ed6:	2321      	movs	r3, #33	; 0x21
 8010ed8:	5cc3      	ldrb	r3, [r0, r3]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d102      	bne.n	8010ee4 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010ede:	3320      	adds	r3, #32
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010ee4:	2121      	movs	r1, #33	; 0x21
 8010ee6:	2302      	movs	r3, #2
 8010ee8:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010eea:	6804      	ldr	r4, [r0, #0]
 8010eec:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010eee:	4a0c      	ldr	r2, [pc, #48]	; (8010f20 <HAL_DMA_Init+0x50>)
 8010ef0:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010ef2:	6843      	ldr	r3, [r0, #4]
 8010ef4:	6885      	ldr	r5, [r0, #8]
 8010ef6:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010ef8:	68c5      	ldr	r5, [r0, #12]
 8010efa:	432b      	orrs	r3, r5
 8010efc:	6905      	ldr	r5, [r0, #16]
 8010efe:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010f00:	6945      	ldr	r5, [r0, #20]
 8010f02:	432b      	orrs	r3, r5
 8010f04:	6985      	ldr	r5, [r0, #24]
 8010f06:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010f08:	69c5      	ldr	r5, [r0, #28]
 8010f0a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010f0c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010f0e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010f10:	2300      	movs	r3, #0
 8010f12:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010f14:	3301      	adds	r3, #1
 8010f16:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010f18:	2000      	movs	r0, #0
}  
 8010f1a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010f1c:	2001      	movs	r0, #1
 8010f1e:	e7fc      	b.n	8010f1a <HAL_DMA_Init+0x4a>
 8010f20:	ffffc00f 	.word	0xffffc00f

08010f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010f24:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010f26:	2420      	movs	r4, #32
 8010f28:	5d04      	ldrb	r4, [r0, r4]
 8010f2a:	2c01      	cmp	r4, #1
 8010f2c:	d02d      	beq.n	8010f8a <HAL_DMA_Start_IT+0x66>
 8010f2e:	2601      	movs	r6, #1
 8010f30:	2420      	movs	r4, #32
 8010f32:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010f34:	3401      	adds	r4, #1
 8010f36:	2502      	movs	r5, #2
 8010f38:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010f3a:	6805      	ldr	r5, [r0, #0]
 8010f3c:	682c      	ldr	r4, [r5, #0]
 8010f3e:	43b4      	bics	r4, r6
 8010f40:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010f42:	6804      	ldr	r4, [r0, #0]
 8010f44:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010f46:	6843      	ldr	r3, [r0, #4]
 8010f48:	2b10      	cmp	r3, #16
 8010f4a:	d019      	beq.n	8010f80 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010f4c:	6803      	ldr	r3, [r0, #0]
 8010f4e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010f50:	6803      	ldr	r3, [r0, #0]
 8010f52:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010f54:	6802      	ldr	r2, [r0, #0]
 8010f56:	6813      	ldr	r3, [r2, #0]
 8010f58:	2102      	movs	r1, #2
 8010f5a:	430b      	orrs	r3, r1
 8010f5c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010f5e:	6802      	ldr	r2, [r0, #0]
 8010f60:	6813      	ldr	r3, [r2, #0]
 8010f62:	3102      	adds	r1, #2
 8010f64:	430b      	orrs	r3, r1
 8010f66:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010f68:	6802      	ldr	r2, [r0, #0]
 8010f6a:	6813      	ldr	r3, [r2, #0]
 8010f6c:	3104      	adds	r1, #4
 8010f6e:	430b      	orrs	r3, r1
 8010f70:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010f72:	6802      	ldr	r2, [r0, #0]
 8010f74:	6813      	ldr	r3, [r2, #0]
 8010f76:	3907      	subs	r1, #7
 8010f78:	430b      	orrs	r3, r1
 8010f7a:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010f7c:	2000      	movs	r0, #0
} 
 8010f7e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010f80:	6803      	ldr	r3, [r0, #0]
 8010f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010f84:	6803      	ldr	r3, [r0, #0]
 8010f86:	60d9      	str	r1, [r3, #12]
 8010f88:	e7e4      	b.n	8010f54 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010f8a:	2002      	movs	r0, #2
 8010f8c:	e7f7      	b.n	8010f7e <HAL_DMA_Start_IT+0x5a>

08010f8e <HAL_DMA_Abort>:
{
 8010f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f90:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010f92:	6802      	ldr	r2, [r0, #0]
 8010f94:	6813      	ldr	r3, [r2, #0]
 8010f96:	2101      	movs	r1, #1
 8010f98:	438b      	bics	r3, r1
 8010f9a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010f9c:	f7ff f9ec 	bl	8010378 <HAL_GetTick>
 8010fa0:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010fa2:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010fa4:	26fa      	movs	r6, #250	; 0xfa
 8010fa6:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	421d      	tst	r5, r3
 8010fae:	d00f      	beq.n	8010fd0 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010fb0:	f7ff f9e2 	bl	8010378 <HAL_GetTick>
 8010fb4:	1bc0      	subs	r0, r0, r7
 8010fb6:	42b0      	cmp	r0, r6
 8010fb8:	d9f6      	bls.n	8010fa8 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010fbc:	2220      	movs	r2, #32
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010fc2:	2321      	movs	r3, #33	; 0x21
 8010fc4:	2103      	movs	r1, #3
 8010fc6:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010fc8:	2300      	movs	r3, #0
 8010fca:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010fcc:	2003      	movs	r0, #3
 8010fce:	e006      	b.n	8010fde <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010fd0:	2321      	movs	r3, #33	; 0x21
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	2200      	movs	r2, #0
 8010fda:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010fdc:	2000      	movs	r0, #0
}
 8010fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fe0 <HAL_DMA_IRQHandler>:
{        
 8010fe0:	b510      	push	{r4, lr}
 8010fe2:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010fe4:	6803      	ldr	r3, [r0, #0]
 8010fe6:	4ab4      	ldr	r2, [pc, #720]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d94d      	bls.n	8011088 <HAL_DMA_IRQHandler+0xa8>
 8010fec:	4ab3      	ldr	r2, [pc, #716]	; (80112bc <HAL_DMA_IRQHandler+0x2dc>)
 8010fee:	6811      	ldr	r1, [r2, #0]
 8010ff0:	4ab3      	ldr	r2, [pc, #716]	; (80112c0 <HAL_DMA_IRQHandler+0x2e0>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d026      	beq.n	8011044 <HAL_DMA_IRQHandler+0x64>
 8010ff6:	4ab3      	ldr	r2, [pc, #716]	; (80112c4 <HAL_DMA_IRQHandler+0x2e4>)
 8010ff8:	4293      	cmp	r3, r2
 8010ffa:	d02d      	beq.n	8011058 <HAL_DMA_IRQHandler+0x78>
 8010ffc:	4ab2      	ldr	r2, [pc, #712]	; (80112c8 <HAL_DMA_IRQHandler+0x2e8>)
 8010ffe:	4293      	cmp	r3, r2
 8011000:	d02c      	beq.n	801105c <HAL_DMA_IRQHandler+0x7c>
 8011002:	4ab2      	ldr	r2, [pc, #712]	; (80112cc <HAL_DMA_IRQHandler+0x2ec>)
 8011004:	4293      	cmp	r3, r2
 8011006:	d02c      	beq.n	8011062 <HAL_DMA_IRQHandler+0x82>
 8011008:	4ab1      	ldr	r2, [pc, #708]	; (80112d0 <HAL_DMA_IRQHandler+0x2f0>)
 801100a:	4293      	cmp	r3, r2
 801100c:	d02c      	beq.n	8011068 <HAL_DMA_IRQHandler+0x88>
 801100e:	4ab1      	ldr	r2, [pc, #708]	; (80112d4 <HAL_DMA_IRQHandler+0x2f4>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d02c      	beq.n	801106e <HAL_DMA_IRQHandler+0x8e>
 8011014:	4aa8      	ldr	r2, [pc, #672]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d02c      	beq.n	8011074 <HAL_DMA_IRQHandler+0x94>
 801101a:	4aaf      	ldr	r2, [pc, #700]	; (80112d8 <HAL_DMA_IRQHandler+0x2f8>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d02c      	beq.n	801107a <HAL_DMA_IRQHandler+0x9a>
 8011020:	4aae      	ldr	r2, [pc, #696]	; (80112dc <HAL_DMA_IRQHandler+0x2fc>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d02b      	beq.n	801107e <HAL_DMA_IRQHandler+0x9e>
 8011026:	4aae      	ldr	r2, [pc, #696]	; (80112e0 <HAL_DMA_IRQHandler+0x300>)
 8011028:	4293      	cmp	r3, r2
 801102a:	d02a      	beq.n	8011082 <HAL_DMA_IRQHandler+0xa2>
 801102c:	4aad      	ldr	r2, [pc, #692]	; (80112e4 <HAL_DMA_IRQHandler+0x304>)
 801102e:	189a      	adds	r2, r3, r2
 8011030:	4250      	negs	r0, r2
 8011032:	4142      	adcs	r2, r0
 8011034:	4252      	negs	r2, r2
 8011036:	48ac      	ldr	r0, [pc, #688]	; (80112e8 <HAL_DMA_IRQHandler+0x308>)
 8011038:	4002      	ands	r2, r0
 801103a:	2080      	movs	r0, #128	; 0x80
 801103c:	0300      	lsls	r0, r0, #12
 801103e:	4684      	mov	ip, r0
 8011040:	4462      	add	r2, ip
 8011042:	e000      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 8011044:	2208      	movs	r2, #8
 8011046:	420a      	tst	r2, r1
 8011048:	d100      	bne.n	801104c <HAL_DMA_IRQHandler+0x6c>
 801104a:	e0e6      	b.n	801121a <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	0712      	lsls	r2, r2, #28
 8011050:	d500      	bpl.n	8011054 <HAL_DMA_IRQHandler+0x74>
 8011052:	e097      	b.n	8011184 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	e0e0      	b.n	801121a <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011058:	2280      	movs	r2, #128	; 0x80
 801105a:	e7f4      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 801105c:	2280      	movs	r2, #128	; 0x80
 801105e:	0112      	lsls	r2, r2, #4
 8011060:	e7f1      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 8011062:	2280      	movs	r2, #128	; 0x80
 8011064:	0212      	lsls	r2, r2, #8
 8011066:	e7ee      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 8011068:	2280      	movs	r2, #128	; 0x80
 801106a:	0312      	lsls	r2, r2, #12
 801106c:	e7eb      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 801106e:	2280      	movs	r2, #128	; 0x80
 8011070:	0412      	lsls	r2, r2, #16
 8011072:	e7e8      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 8011074:	2280      	movs	r2, #128	; 0x80
 8011076:	0512      	lsls	r2, r2, #20
 8011078:	e7e5      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 801107a:	2208      	movs	r2, #8
 801107c:	e7e3      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 801107e:	2280      	movs	r2, #128	; 0x80
 8011080:	e7e1      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 8011082:	2280      	movs	r2, #128	; 0x80
 8011084:	0112      	lsls	r2, r2, #4
 8011086:	e7de      	b.n	8011046 <HAL_DMA_IRQHandler+0x66>
 8011088:	4a98      	ldr	r2, [pc, #608]	; (80112ec <HAL_DMA_IRQHandler+0x30c>)
 801108a:	6811      	ldr	r1, [r2, #0]
 801108c:	4a8c      	ldr	r2, [pc, #560]	; (80112c0 <HAL_DMA_IRQHandler+0x2e0>)
 801108e:	4293      	cmp	r3, r2
 8011090:	d026      	beq.n	80110e0 <HAL_DMA_IRQHandler+0x100>
 8011092:	4a8c      	ldr	r2, [pc, #560]	; (80112c4 <HAL_DMA_IRQHandler+0x2e4>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d05d      	beq.n	8011154 <HAL_DMA_IRQHandler+0x174>
 8011098:	4a8b      	ldr	r2, [pc, #556]	; (80112c8 <HAL_DMA_IRQHandler+0x2e8>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d05c      	beq.n	8011158 <HAL_DMA_IRQHandler+0x178>
 801109e:	4a8b      	ldr	r2, [pc, #556]	; (80112cc <HAL_DMA_IRQHandler+0x2ec>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d05c      	beq.n	801115e <HAL_DMA_IRQHandler+0x17e>
 80110a4:	4a8a      	ldr	r2, [pc, #552]	; (80112d0 <HAL_DMA_IRQHandler+0x2f0>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d05c      	beq.n	8011164 <HAL_DMA_IRQHandler+0x184>
 80110aa:	4a8a      	ldr	r2, [pc, #552]	; (80112d4 <HAL_DMA_IRQHandler+0x2f4>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d05c      	beq.n	801116a <HAL_DMA_IRQHandler+0x18a>
 80110b0:	4a81      	ldr	r2, [pc, #516]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d05c      	beq.n	8011170 <HAL_DMA_IRQHandler+0x190>
 80110b6:	4a88      	ldr	r2, [pc, #544]	; (80112d8 <HAL_DMA_IRQHandler+0x2f8>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d05c      	beq.n	8011176 <HAL_DMA_IRQHandler+0x196>
 80110bc:	4a87      	ldr	r2, [pc, #540]	; (80112dc <HAL_DMA_IRQHandler+0x2fc>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d05b      	beq.n	801117a <HAL_DMA_IRQHandler+0x19a>
 80110c2:	4a87      	ldr	r2, [pc, #540]	; (80112e0 <HAL_DMA_IRQHandler+0x300>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d05a      	beq.n	801117e <HAL_DMA_IRQHandler+0x19e>
 80110c8:	4a86      	ldr	r2, [pc, #536]	; (80112e4 <HAL_DMA_IRQHandler+0x304>)
 80110ca:	189a      	adds	r2, r3, r2
 80110cc:	4250      	negs	r0, r2
 80110ce:	4142      	adcs	r2, r0
 80110d0:	4252      	negs	r2, r2
 80110d2:	4885      	ldr	r0, [pc, #532]	; (80112e8 <HAL_DMA_IRQHandler+0x308>)
 80110d4:	4002      	ands	r2, r0
 80110d6:	2080      	movs	r0, #128	; 0x80
 80110d8:	0300      	lsls	r0, r0, #12
 80110da:	4684      	mov	ip, r0
 80110dc:	4462      	add	r2, ip
 80110de:	e000      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 80110e0:	2208      	movs	r2, #8
 80110e2:	420a      	tst	r2, r1
 80110e4:	d000      	beq.n	80110e8 <HAL_DMA_IRQHandler+0x108>
 80110e6:	e3ad      	b.n	8011844 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80110e8:	4a80      	ldr	r2, [pc, #512]	; (80112ec <HAL_DMA_IRQHandler+0x30c>)
 80110ea:	6811      	ldr	r1, [r2, #0]
 80110ec:	4a74      	ldr	r2, [pc, #464]	; (80112c0 <HAL_DMA_IRQHandler+0x2e0>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d100      	bne.n	80110f4 <HAL_DMA_IRQHandler+0x114>
 80110f2:	e198      	b.n	8011426 <HAL_DMA_IRQHandler+0x446>
 80110f4:	4a73      	ldr	r2, [pc, #460]	; (80112c4 <HAL_DMA_IRQHandler+0x2e4>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d100      	bne.n	80110fc <HAL_DMA_IRQHandler+0x11c>
 80110fa:	e1da      	b.n	80114b2 <HAL_DMA_IRQHandler+0x4d2>
 80110fc:	4a72      	ldr	r2, [pc, #456]	; (80112c8 <HAL_DMA_IRQHandler+0x2e8>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d100      	bne.n	8011104 <HAL_DMA_IRQHandler+0x124>
 8011102:	e1d8      	b.n	80114b6 <HAL_DMA_IRQHandler+0x4d6>
 8011104:	4a71      	ldr	r2, [pc, #452]	; (80112cc <HAL_DMA_IRQHandler+0x2ec>)
 8011106:	4293      	cmp	r3, r2
 8011108:	d100      	bne.n	801110c <HAL_DMA_IRQHandler+0x12c>
 801110a:	e1d7      	b.n	80114bc <HAL_DMA_IRQHandler+0x4dc>
 801110c:	4a70      	ldr	r2, [pc, #448]	; (80112d0 <HAL_DMA_IRQHandler+0x2f0>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d100      	bne.n	8011114 <HAL_DMA_IRQHandler+0x134>
 8011112:	e1d6      	b.n	80114c2 <HAL_DMA_IRQHandler+0x4e2>
 8011114:	4a6f      	ldr	r2, [pc, #444]	; (80112d4 <HAL_DMA_IRQHandler+0x2f4>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d100      	bne.n	801111c <HAL_DMA_IRQHandler+0x13c>
 801111a:	e1d5      	b.n	80114c8 <HAL_DMA_IRQHandler+0x4e8>
 801111c:	4a66      	ldr	r2, [pc, #408]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d100      	bne.n	8011124 <HAL_DMA_IRQHandler+0x144>
 8011122:	e1d4      	b.n	80114ce <HAL_DMA_IRQHandler+0x4ee>
 8011124:	4a6c      	ldr	r2, [pc, #432]	; (80112d8 <HAL_DMA_IRQHandler+0x2f8>)
 8011126:	4293      	cmp	r3, r2
 8011128:	d100      	bne.n	801112c <HAL_DMA_IRQHandler+0x14c>
 801112a:	e1d3      	b.n	80114d4 <HAL_DMA_IRQHandler+0x4f4>
 801112c:	4a6b      	ldr	r2, [pc, #428]	; (80112dc <HAL_DMA_IRQHandler+0x2fc>)
 801112e:	4293      	cmp	r3, r2
 8011130:	d100      	bne.n	8011134 <HAL_DMA_IRQHandler+0x154>
 8011132:	e1d1      	b.n	80114d8 <HAL_DMA_IRQHandler+0x4f8>
 8011134:	4a6a      	ldr	r2, [pc, #424]	; (80112e0 <HAL_DMA_IRQHandler+0x300>)
 8011136:	4293      	cmp	r3, r2
 8011138:	d100      	bne.n	801113c <HAL_DMA_IRQHandler+0x15c>
 801113a:	e1cf      	b.n	80114dc <HAL_DMA_IRQHandler+0x4fc>
 801113c:	4a69      	ldr	r2, [pc, #420]	; (80112e4 <HAL_DMA_IRQHandler+0x304>)
 801113e:	189a      	adds	r2, r3, r2
 8011140:	4250      	negs	r0, r2
 8011142:	4142      	adcs	r2, r0
 8011144:	4252      	negs	r2, r2
 8011146:	486a      	ldr	r0, [pc, #424]	; (80112f0 <HAL_DMA_IRQHandler+0x310>)
 8011148:	4002      	ands	r2, r0
 801114a:	2080      	movs	r0, #128	; 0x80
 801114c:	02c0      	lsls	r0, r0, #11
 801114e:	4684      	mov	ip, r0
 8011150:	4462      	add	r2, ip
 8011152:	e169      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011154:	2280      	movs	r2, #128	; 0x80
 8011156:	e7c4      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 8011158:	2280      	movs	r2, #128	; 0x80
 801115a:	0112      	lsls	r2, r2, #4
 801115c:	e7c1      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 801115e:	2280      	movs	r2, #128	; 0x80
 8011160:	0212      	lsls	r2, r2, #8
 8011162:	e7be      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 8011164:	2280      	movs	r2, #128	; 0x80
 8011166:	0312      	lsls	r2, r2, #12
 8011168:	e7bb      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 801116a:	2280      	movs	r2, #128	; 0x80
 801116c:	0412      	lsls	r2, r2, #16
 801116e:	e7b8      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 8011170:	2280      	movs	r2, #128	; 0x80
 8011172:	0512      	lsls	r2, r2, #20
 8011174:	e7b5      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 8011176:	2208      	movs	r2, #8
 8011178:	e7b3      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 801117a:	2280      	movs	r2, #128	; 0x80
 801117c:	e7b1      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
 801117e:	2280      	movs	r2, #128	; 0x80
 8011180:	0112      	lsls	r2, r2, #4
 8011182:	e7ae      	b.n	80110e2 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	2108      	movs	r1, #8
 8011188:	438a      	bics	r2, r1
 801118a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801118c:	6823      	ldr	r3, [r4, #0]
 801118e:	4a4a      	ldr	r2, [pc, #296]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 8011190:	4293      	cmp	r3, r2
 8011192:	d800      	bhi.n	8011196 <HAL_DMA_IRQHandler+0x1b6>
 8011194:	e0ae      	b.n	80112f4 <HAL_DMA_IRQHandler+0x314>
 8011196:	4a4a      	ldr	r2, [pc, #296]	; (80112c0 <HAL_DMA_IRQHandler+0x2e0>)
 8011198:	4293      	cmp	r3, r2
 801119a:	d027      	beq.n	80111ec <HAL_DMA_IRQHandler+0x20c>
 801119c:	4a49      	ldr	r2, [pc, #292]	; (80112c4 <HAL_DMA_IRQHandler+0x2e4>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d071      	beq.n	8011286 <HAL_DMA_IRQHandler+0x2a6>
 80111a2:	4a49      	ldr	r2, [pc, #292]	; (80112c8 <HAL_DMA_IRQHandler+0x2e8>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d070      	beq.n	801128a <HAL_DMA_IRQHandler+0x2aa>
 80111a8:	4a48      	ldr	r2, [pc, #288]	; (80112cc <HAL_DMA_IRQHandler+0x2ec>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d070      	beq.n	8011290 <HAL_DMA_IRQHandler+0x2b0>
 80111ae:	4a48      	ldr	r2, [pc, #288]	; (80112d0 <HAL_DMA_IRQHandler+0x2f0>)
 80111b0:	4293      	cmp	r3, r2
 80111b2:	d070      	beq.n	8011296 <HAL_DMA_IRQHandler+0x2b6>
 80111b4:	4a47      	ldr	r2, [pc, #284]	; (80112d4 <HAL_DMA_IRQHandler+0x2f4>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d070      	beq.n	801129c <HAL_DMA_IRQHandler+0x2bc>
 80111ba:	4a3f      	ldr	r2, [pc, #252]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d070      	beq.n	80112a2 <HAL_DMA_IRQHandler+0x2c2>
 80111c0:	4a45      	ldr	r2, [pc, #276]	; (80112d8 <HAL_DMA_IRQHandler+0x2f8>)
 80111c2:	4293      	cmp	r3, r2
 80111c4:	d070      	beq.n	80112a8 <HAL_DMA_IRQHandler+0x2c8>
 80111c6:	4a45      	ldr	r2, [pc, #276]	; (80112dc <HAL_DMA_IRQHandler+0x2fc>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d06f      	beq.n	80112ac <HAL_DMA_IRQHandler+0x2cc>
 80111cc:	4a44      	ldr	r2, [pc, #272]	; (80112e0 <HAL_DMA_IRQHandler+0x300>)
 80111ce:	4293      	cmp	r3, r2
 80111d0:	d06e      	beq.n	80112b0 <HAL_DMA_IRQHandler+0x2d0>
 80111d2:	4a44      	ldr	r2, [pc, #272]	; (80112e4 <HAL_DMA_IRQHandler+0x304>)
 80111d4:	4694      	mov	ip, r2
 80111d6:	4463      	add	r3, ip
 80111d8:	425a      	negs	r2, r3
 80111da:	4153      	adcs	r3, r2
 80111dc:	425b      	negs	r3, r3
 80111de:	4a42      	ldr	r2, [pc, #264]	; (80112e8 <HAL_DMA_IRQHandler+0x308>)
 80111e0:	4013      	ands	r3, r2
 80111e2:	2280      	movs	r2, #128	; 0x80
 80111e4:	0312      	lsls	r2, r2, #12
 80111e6:	4694      	mov	ip, r2
 80111e8:	4463      	add	r3, ip
 80111ea:	e000      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 80111ec:	2308      	movs	r3, #8
 80111ee:	4a33      	ldr	r2, [pc, #204]	; (80112bc <HAL_DMA_IRQHandler+0x2dc>)
 80111f0:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80111f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111f4:	2201      	movs	r2, #1
 80111f6:	4313      	orrs	r3, r2
 80111f8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80111fa:	2321      	movs	r3, #33	; 0x21
 80111fc:	3203      	adds	r2, #3
 80111fe:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011200:	3b01      	subs	r3, #1
 8011202:	2200      	movs	r2, #0
 8011204:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011206:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011208:	2b00      	cmp	r3, #0
 801120a:	d001      	beq.n	8011210 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 801120c:	0020      	movs	r0, r4
 801120e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011210:	6823      	ldr	r3, [r4, #0]
 8011212:	4a29      	ldr	r2, [pc, #164]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d800      	bhi.n	801121a <HAL_DMA_IRQHandler+0x23a>
 8011218:	e766      	b.n	80110e8 <HAL_DMA_IRQHandler+0x108>
 801121a:	4a28      	ldr	r2, [pc, #160]	; (80112bc <HAL_DMA_IRQHandler+0x2dc>)
 801121c:	6811      	ldr	r1, [r2, #0]
 801121e:	4a28      	ldr	r2, [pc, #160]	; (80112c0 <HAL_DMA_IRQHandler+0x2e0>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d100      	bne.n	8011226 <HAL_DMA_IRQHandler+0x246>
 8011224:	e0ad      	b.n	8011382 <HAL_DMA_IRQHandler+0x3a2>
 8011226:	4a27      	ldr	r2, [pc, #156]	; (80112c4 <HAL_DMA_IRQHandler+0x2e4>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d100      	bne.n	801122e <HAL_DMA_IRQHandler+0x24e>
 801122c:	e0e3      	b.n	80113f6 <HAL_DMA_IRQHandler+0x416>
 801122e:	4a26      	ldr	r2, [pc, #152]	; (80112c8 <HAL_DMA_IRQHandler+0x2e8>)
 8011230:	4293      	cmp	r3, r2
 8011232:	d100      	bne.n	8011236 <HAL_DMA_IRQHandler+0x256>
 8011234:	e0e1      	b.n	80113fa <HAL_DMA_IRQHandler+0x41a>
 8011236:	4a25      	ldr	r2, [pc, #148]	; (80112cc <HAL_DMA_IRQHandler+0x2ec>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d100      	bne.n	801123e <HAL_DMA_IRQHandler+0x25e>
 801123c:	e0e0      	b.n	8011400 <HAL_DMA_IRQHandler+0x420>
 801123e:	4a24      	ldr	r2, [pc, #144]	; (80112d0 <HAL_DMA_IRQHandler+0x2f0>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d100      	bne.n	8011246 <HAL_DMA_IRQHandler+0x266>
 8011244:	e0df      	b.n	8011406 <HAL_DMA_IRQHandler+0x426>
 8011246:	4a23      	ldr	r2, [pc, #140]	; (80112d4 <HAL_DMA_IRQHandler+0x2f4>)
 8011248:	4293      	cmp	r3, r2
 801124a:	d100      	bne.n	801124e <HAL_DMA_IRQHandler+0x26e>
 801124c:	e0de      	b.n	801140c <HAL_DMA_IRQHandler+0x42c>
 801124e:	4a1a      	ldr	r2, [pc, #104]	; (80112b8 <HAL_DMA_IRQHandler+0x2d8>)
 8011250:	4293      	cmp	r3, r2
 8011252:	d100      	bne.n	8011256 <HAL_DMA_IRQHandler+0x276>
 8011254:	e0dd      	b.n	8011412 <HAL_DMA_IRQHandler+0x432>
 8011256:	4a20      	ldr	r2, [pc, #128]	; (80112d8 <HAL_DMA_IRQHandler+0x2f8>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d100      	bne.n	801125e <HAL_DMA_IRQHandler+0x27e>
 801125c:	e0dc      	b.n	8011418 <HAL_DMA_IRQHandler+0x438>
 801125e:	4a1f      	ldr	r2, [pc, #124]	; (80112dc <HAL_DMA_IRQHandler+0x2fc>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d100      	bne.n	8011266 <HAL_DMA_IRQHandler+0x286>
 8011264:	e0da      	b.n	801141c <HAL_DMA_IRQHandler+0x43c>
 8011266:	4a1e      	ldr	r2, [pc, #120]	; (80112e0 <HAL_DMA_IRQHandler+0x300>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d100      	bne.n	801126e <HAL_DMA_IRQHandler+0x28e>
 801126c:	e0d8      	b.n	8011420 <HAL_DMA_IRQHandler+0x440>
 801126e:	4a1d      	ldr	r2, [pc, #116]	; (80112e4 <HAL_DMA_IRQHandler+0x304>)
 8011270:	189a      	adds	r2, r3, r2
 8011272:	4250      	negs	r0, r2
 8011274:	4142      	adcs	r2, r0
 8011276:	4252      	negs	r2, r2
 8011278:	481d      	ldr	r0, [pc, #116]	; (80112f0 <HAL_DMA_IRQHandler+0x310>)
 801127a:	4002      	ands	r2, r0
 801127c:	2080      	movs	r0, #128	; 0x80
 801127e:	02c0      	lsls	r0, r0, #11
 8011280:	4684      	mov	ip, r0
 8011282:	4462      	add	r2, ip
 8011284:	e07e      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011286:	2380      	movs	r3, #128	; 0x80
 8011288:	e7b1      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 801128a:	2380      	movs	r3, #128	; 0x80
 801128c:	011b      	lsls	r3, r3, #4
 801128e:	e7ae      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 8011290:	2380      	movs	r3, #128	; 0x80
 8011292:	021b      	lsls	r3, r3, #8
 8011294:	e7ab      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 8011296:	2380      	movs	r3, #128	; 0x80
 8011298:	031b      	lsls	r3, r3, #12
 801129a:	e7a8      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 801129c:	2380      	movs	r3, #128	; 0x80
 801129e:	041b      	lsls	r3, r3, #16
 80112a0:	e7a5      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 80112a2:	2380      	movs	r3, #128	; 0x80
 80112a4:	051b      	lsls	r3, r3, #20
 80112a6:	e7a2      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 80112a8:	2308      	movs	r3, #8
 80112aa:	e7a0      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 80112ac:	2380      	movs	r3, #128	; 0x80
 80112ae:	e79e      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 80112b0:	2380      	movs	r3, #128	; 0x80
 80112b2:	011b      	lsls	r3, r3, #4
 80112b4:	e79b      	b.n	80111ee <HAL_DMA_IRQHandler+0x20e>
 80112b6:	46c0      	nop			; (mov r8, r8)
 80112b8:	40020080 	.word	0x40020080
 80112bc:	40020400 	.word	0x40020400
 80112c0:	40020008 	.word	0x40020008
 80112c4:	4002001c 	.word	0x4002001c
 80112c8:	40020030 	.word	0x40020030
 80112cc:	40020044 	.word	0x40020044
 80112d0:	40020058 	.word	0x40020058
 80112d4:	4002006c 	.word	0x4002006c
 80112d8:	40020408 	.word	0x40020408
 80112dc:	4002041c 	.word	0x4002041c
 80112e0:	40020430 	.word	0x40020430
 80112e4:	bffdfbbc 	.word	0xbffdfbbc
 80112e8:	fff88000 	.word	0xfff88000
 80112ec:	40020000 	.word	0x40020000
 80112f0:	fffc4000 	.word	0xfffc4000
 80112f4:	4aaa      	ldr	r2, [pc, #680]	; (80115a0 <HAL_DMA_IRQHandler+0x5c0>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d027      	beq.n	801134a <HAL_DMA_IRQHandler+0x36a>
 80112fa:	4aaa      	ldr	r2, [pc, #680]	; (80115a4 <HAL_DMA_IRQHandler+0x5c4>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d028      	beq.n	8011352 <HAL_DMA_IRQHandler+0x372>
 8011300:	4aa9      	ldr	r2, [pc, #676]	; (80115a8 <HAL_DMA_IRQHandler+0x5c8>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d027      	beq.n	8011356 <HAL_DMA_IRQHandler+0x376>
 8011306:	4aa9      	ldr	r2, [pc, #676]	; (80115ac <HAL_DMA_IRQHandler+0x5cc>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d027      	beq.n	801135c <HAL_DMA_IRQHandler+0x37c>
 801130c:	4aa8      	ldr	r2, [pc, #672]	; (80115b0 <HAL_DMA_IRQHandler+0x5d0>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d027      	beq.n	8011362 <HAL_DMA_IRQHandler+0x382>
 8011312:	4aa8      	ldr	r2, [pc, #672]	; (80115b4 <HAL_DMA_IRQHandler+0x5d4>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d027      	beq.n	8011368 <HAL_DMA_IRQHandler+0x388>
 8011318:	4aa7      	ldr	r2, [pc, #668]	; (80115b8 <HAL_DMA_IRQHandler+0x5d8>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d027      	beq.n	801136e <HAL_DMA_IRQHandler+0x38e>
 801131e:	4aa7      	ldr	r2, [pc, #668]	; (80115bc <HAL_DMA_IRQHandler+0x5dc>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d027      	beq.n	8011374 <HAL_DMA_IRQHandler+0x394>
 8011324:	4aa6      	ldr	r2, [pc, #664]	; (80115c0 <HAL_DMA_IRQHandler+0x5e0>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d026      	beq.n	8011378 <HAL_DMA_IRQHandler+0x398>
 801132a:	4aa6      	ldr	r2, [pc, #664]	; (80115c4 <HAL_DMA_IRQHandler+0x5e4>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d025      	beq.n	801137c <HAL_DMA_IRQHandler+0x39c>
 8011330:	4aa5      	ldr	r2, [pc, #660]	; (80115c8 <HAL_DMA_IRQHandler+0x5e8>)
 8011332:	4694      	mov	ip, r2
 8011334:	4463      	add	r3, ip
 8011336:	425a      	negs	r2, r3
 8011338:	4153      	adcs	r3, r2
 801133a:	425b      	negs	r3, r3
 801133c:	4aa3      	ldr	r2, [pc, #652]	; (80115cc <HAL_DMA_IRQHandler+0x5ec>)
 801133e:	4013      	ands	r3, r2
 8011340:	2280      	movs	r2, #128	; 0x80
 8011342:	0312      	lsls	r2, r2, #12
 8011344:	4694      	mov	ip, r2
 8011346:	4463      	add	r3, ip
 8011348:	e000      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 801134a:	2308      	movs	r3, #8
 801134c:	4aa0      	ldr	r2, [pc, #640]	; (80115d0 <HAL_DMA_IRQHandler+0x5f0>)
 801134e:	6053      	str	r3, [r2, #4]
 8011350:	e74f      	b.n	80111f2 <HAL_DMA_IRQHandler+0x212>
 8011352:	2380      	movs	r3, #128	; 0x80
 8011354:	e7fa      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 8011356:	2380      	movs	r3, #128	; 0x80
 8011358:	011b      	lsls	r3, r3, #4
 801135a:	e7f7      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 801135c:	2380      	movs	r3, #128	; 0x80
 801135e:	021b      	lsls	r3, r3, #8
 8011360:	e7f4      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 8011362:	2380      	movs	r3, #128	; 0x80
 8011364:	031b      	lsls	r3, r3, #12
 8011366:	e7f1      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 8011368:	2380      	movs	r3, #128	; 0x80
 801136a:	041b      	lsls	r3, r3, #16
 801136c:	e7ee      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 801136e:	2380      	movs	r3, #128	; 0x80
 8011370:	051b      	lsls	r3, r3, #20
 8011372:	e7eb      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 8011374:	2308      	movs	r3, #8
 8011376:	e7e9      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 8011378:	2380      	movs	r3, #128	; 0x80
 801137a:	e7e7      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
 801137c:	2380      	movs	r3, #128	; 0x80
 801137e:	011b      	lsls	r3, r3, #4
 8011380:	e7e4      	b.n	801134c <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011382:	2204      	movs	r2, #4
 8011384:	420a      	tst	r2, r1
 8011386:	d152      	bne.n	801142e <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011388:	6821      	ldr	r1, [r4, #0]
 801138a:	4b92      	ldr	r3, [pc, #584]	; (80115d4 <HAL_DMA_IRQHandler+0x5f4>)
 801138c:	6818      	ldr	r0, [r3, #0]
 801138e:	4a84      	ldr	r2, [pc, #528]	; (80115a0 <HAL_DMA_IRQHandler+0x5c0>)
 8011390:	4291      	cmp	r1, r2
 8011392:	d100      	bne.n	8011396 <HAL_DMA_IRQHandler+0x3b6>
 8011394:	e16b      	b.n	801166e <HAL_DMA_IRQHandler+0x68e>
 8011396:	4a83      	ldr	r2, [pc, #524]	; (80115a4 <HAL_DMA_IRQHandler+0x5c4>)
 8011398:	4291      	cmp	r1, r2
 801139a:	d100      	bne.n	801139e <HAL_DMA_IRQHandler+0x3be>
 801139c:	e1aa      	b.n	80116f4 <HAL_DMA_IRQHandler+0x714>
 801139e:	4a82      	ldr	r2, [pc, #520]	; (80115a8 <HAL_DMA_IRQHandler+0x5c8>)
 80113a0:	4291      	cmp	r1, r2
 80113a2:	d100      	bne.n	80113a6 <HAL_DMA_IRQHandler+0x3c6>
 80113a4:	e1a8      	b.n	80116f8 <HAL_DMA_IRQHandler+0x718>
 80113a6:	4a81      	ldr	r2, [pc, #516]	; (80115ac <HAL_DMA_IRQHandler+0x5cc>)
 80113a8:	4291      	cmp	r1, r2
 80113aa:	d100      	bne.n	80113ae <HAL_DMA_IRQHandler+0x3ce>
 80113ac:	e1a7      	b.n	80116fe <HAL_DMA_IRQHandler+0x71e>
 80113ae:	4b80      	ldr	r3, [pc, #512]	; (80115b0 <HAL_DMA_IRQHandler+0x5d0>)
 80113b0:	4299      	cmp	r1, r3
 80113b2:	d100      	bne.n	80113b6 <HAL_DMA_IRQHandler+0x3d6>
 80113b4:	e1a6      	b.n	8011704 <HAL_DMA_IRQHandler+0x724>
 80113b6:	4b7f      	ldr	r3, [pc, #508]	; (80115b4 <HAL_DMA_IRQHandler+0x5d4>)
 80113b8:	4299      	cmp	r1, r3
 80113ba:	d100      	bne.n	80113be <HAL_DMA_IRQHandler+0x3de>
 80113bc:	e1a5      	b.n	801170a <HAL_DMA_IRQHandler+0x72a>
 80113be:	4b7e      	ldr	r3, [pc, #504]	; (80115b8 <HAL_DMA_IRQHandler+0x5d8>)
 80113c0:	4299      	cmp	r1, r3
 80113c2:	d100      	bne.n	80113c6 <HAL_DMA_IRQHandler+0x3e6>
 80113c4:	e1a4      	b.n	8011710 <HAL_DMA_IRQHandler+0x730>
 80113c6:	4b7d      	ldr	r3, [pc, #500]	; (80115bc <HAL_DMA_IRQHandler+0x5dc>)
 80113c8:	4299      	cmp	r1, r3
 80113ca:	d100      	bne.n	80113ce <HAL_DMA_IRQHandler+0x3ee>
 80113cc:	e1a3      	b.n	8011716 <HAL_DMA_IRQHandler+0x736>
 80113ce:	4b7c      	ldr	r3, [pc, #496]	; (80115c0 <HAL_DMA_IRQHandler+0x5e0>)
 80113d0:	4299      	cmp	r1, r3
 80113d2:	d100      	bne.n	80113d6 <HAL_DMA_IRQHandler+0x3f6>
 80113d4:	e1a1      	b.n	801171a <HAL_DMA_IRQHandler+0x73a>
 80113d6:	4b7b      	ldr	r3, [pc, #492]	; (80115c4 <HAL_DMA_IRQHandler+0x5e4>)
 80113d8:	4299      	cmp	r1, r3
 80113da:	d100      	bne.n	80113de <HAL_DMA_IRQHandler+0x3fe>
 80113dc:	e19f      	b.n	801171e <HAL_DMA_IRQHandler+0x73e>
 80113de:	4b7a      	ldr	r3, [pc, #488]	; (80115c8 <HAL_DMA_IRQHandler+0x5e8>)
 80113e0:	18ca      	adds	r2, r1, r3
 80113e2:	4253      	negs	r3, r2
 80113e4:	415a      	adcs	r2, r3
 80113e6:	4252      	negs	r2, r2
 80113e8:	4b7b      	ldr	r3, [pc, #492]	; (80115d8 <HAL_DMA_IRQHandler+0x5f8>)
 80113ea:	4013      	ands	r3, r2
 80113ec:	2280      	movs	r2, #128	; 0x80
 80113ee:	0292      	lsls	r2, r2, #10
 80113f0:	4694      	mov	ip, r2
 80113f2:	4463      	add	r3, ip
 80113f4:	e13c      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80113f6:	2240      	movs	r2, #64	; 0x40
 80113f8:	e7c4      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 80113fa:	2280      	movs	r2, #128	; 0x80
 80113fc:	00d2      	lsls	r2, r2, #3
 80113fe:	e7c1      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 8011400:	2280      	movs	r2, #128	; 0x80
 8011402:	01d2      	lsls	r2, r2, #7
 8011404:	e7be      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 8011406:	2280      	movs	r2, #128	; 0x80
 8011408:	02d2      	lsls	r2, r2, #11
 801140a:	e7bb      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 801140c:	2280      	movs	r2, #128	; 0x80
 801140e:	03d2      	lsls	r2, r2, #15
 8011410:	e7b8      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 8011412:	2280      	movs	r2, #128	; 0x80
 8011414:	04d2      	lsls	r2, r2, #19
 8011416:	e7b5      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 8011418:	2204      	movs	r2, #4
 801141a:	e7b3      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 801141c:	2240      	movs	r2, #64	; 0x40
 801141e:	e7b1      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 8011420:	2280      	movs	r2, #128	; 0x80
 8011422:	00d2      	lsls	r2, r2, #3
 8011424:	e7ae      	b.n	8011384 <HAL_DMA_IRQHandler+0x3a4>
 8011426:	2204      	movs	r2, #4
 8011428:	420a      	tst	r2, r1
 801142a:	d100      	bne.n	801142e <HAL_DMA_IRQHandler+0x44e>
 801142c:	e208      	b.n	8011840 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	0752      	lsls	r2, r2, #29
 8011432:	d561      	bpl.n	80114f8 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	0692      	lsls	r2, r2, #26
 8011438:	d403      	bmi.n	8011442 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	2104      	movs	r1, #4
 801143e:	438a      	bics	r2, r1
 8011440:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011442:	6823      	ldr	r3, [r4, #0]
 8011444:	4a5c      	ldr	r2, [pc, #368]	; (80115b8 <HAL_DMA_IRQHandler+0x5d8>)
 8011446:	4293      	cmp	r3, r2
 8011448:	d800      	bhi.n	801144c <HAL_DMA_IRQHandler+0x46c>
 801144a:	e0c9      	b.n	80115e0 <HAL_DMA_IRQHandler+0x600>
 801144c:	4a54      	ldr	r2, [pc, #336]	; (80115a0 <HAL_DMA_IRQHandler+0x5c0>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d047      	beq.n	80114e2 <HAL_DMA_IRQHandler+0x502>
 8011452:	4a54      	ldr	r2, [pc, #336]	; (80115a4 <HAL_DMA_IRQHandler+0x5c4>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d100      	bne.n	801145a <HAL_DMA_IRQHandler+0x47a>
 8011458:	e089      	b.n	801156e <HAL_DMA_IRQHandler+0x58e>
 801145a:	4a53      	ldr	r2, [pc, #332]	; (80115a8 <HAL_DMA_IRQHandler+0x5c8>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d100      	bne.n	8011462 <HAL_DMA_IRQHandler+0x482>
 8011460:	e087      	b.n	8011572 <HAL_DMA_IRQHandler+0x592>
 8011462:	4a52      	ldr	r2, [pc, #328]	; (80115ac <HAL_DMA_IRQHandler+0x5cc>)
 8011464:	4293      	cmp	r3, r2
 8011466:	d100      	bne.n	801146a <HAL_DMA_IRQHandler+0x48a>
 8011468:	e086      	b.n	8011578 <HAL_DMA_IRQHandler+0x598>
 801146a:	4a51      	ldr	r2, [pc, #324]	; (80115b0 <HAL_DMA_IRQHandler+0x5d0>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d100      	bne.n	8011472 <HAL_DMA_IRQHandler+0x492>
 8011470:	e085      	b.n	801157e <HAL_DMA_IRQHandler+0x59e>
 8011472:	4a50      	ldr	r2, [pc, #320]	; (80115b4 <HAL_DMA_IRQHandler+0x5d4>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d100      	bne.n	801147a <HAL_DMA_IRQHandler+0x49a>
 8011478:	e084      	b.n	8011584 <HAL_DMA_IRQHandler+0x5a4>
 801147a:	4a4f      	ldr	r2, [pc, #316]	; (80115b8 <HAL_DMA_IRQHandler+0x5d8>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d100      	bne.n	8011482 <HAL_DMA_IRQHandler+0x4a2>
 8011480:	e083      	b.n	801158a <HAL_DMA_IRQHandler+0x5aa>
 8011482:	4a4e      	ldr	r2, [pc, #312]	; (80115bc <HAL_DMA_IRQHandler+0x5dc>)
 8011484:	4293      	cmp	r3, r2
 8011486:	d100      	bne.n	801148a <HAL_DMA_IRQHandler+0x4aa>
 8011488:	e082      	b.n	8011590 <HAL_DMA_IRQHandler+0x5b0>
 801148a:	4a4d      	ldr	r2, [pc, #308]	; (80115c0 <HAL_DMA_IRQHandler+0x5e0>)
 801148c:	4293      	cmp	r3, r2
 801148e:	d100      	bne.n	8011492 <HAL_DMA_IRQHandler+0x4b2>
 8011490:	e080      	b.n	8011594 <HAL_DMA_IRQHandler+0x5b4>
 8011492:	4a4c      	ldr	r2, [pc, #304]	; (80115c4 <HAL_DMA_IRQHandler+0x5e4>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d07f      	beq.n	8011598 <HAL_DMA_IRQHandler+0x5b8>
 8011498:	4a4b      	ldr	r2, [pc, #300]	; (80115c8 <HAL_DMA_IRQHandler+0x5e8>)
 801149a:	4694      	mov	ip, r2
 801149c:	4463      	add	r3, ip
 801149e:	425a      	negs	r2, r3
 80114a0:	4153      	adcs	r3, r2
 80114a2:	425b      	negs	r3, r3
 80114a4:	4a4d      	ldr	r2, [pc, #308]	; (80115dc <HAL_DMA_IRQHandler+0x5fc>)
 80114a6:	4013      	ands	r3, r2
 80114a8:	2280      	movs	r2, #128	; 0x80
 80114aa:	02d2      	lsls	r2, r2, #11
 80114ac:	4694      	mov	ip, r2
 80114ae:	4463      	add	r3, ip
 80114b0:	e018      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80114b2:	2240      	movs	r2, #64	; 0x40
 80114b4:	e7b8      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114b6:	2280      	movs	r2, #128	; 0x80
 80114b8:	00d2      	lsls	r2, r2, #3
 80114ba:	e7b5      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114bc:	2280      	movs	r2, #128	; 0x80
 80114be:	01d2      	lsls	r2, r2, #7
 80114c0:	e7b2      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114c2:	2280      	movs	r2, #128	; 0x80
 80114c4:	02d2      	lsls	r2, r2, #11
 80114c6:	e7af      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114c8:	2280      	movs	r2, #128	; 0x80
 80114ca:	03d2      	lsls	r2, r2, #15
 80114cc:	e7ac      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114ce:	2280      	movs	r2, #128	; 0x80
 80114d0:	04d2      	lsls	r2, r2, #19
 80114d2:	e7a9      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114d4:	2204      	movs	r2, #4
 80114d6:	e7a7      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114d8:	2240      	movs	r2, #64	; 0x40
 80114da:	e7a5      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
 80114dc:	2280      	movs	r2, #128	; 0x80
 80114de:	00d2      	lsls	r2, r2, #3
 80114e0:	e7a2      	b.n	8011428 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80114e2:	2304      	movs	r3, #4
 80114e4:	4a3b      	ldr	r2, [pc, #236]	; (80115d4 <HAL_DMA_IRQHandler+0x5f4>)
 80114e6:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80114e8:	2321      	movs	r3, #33	; 0x21
 80114ea:	2211      	movs	r2, #17
 80114ec:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80114ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d001      	beq.n	80114f8 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 80114f4:	0020      	movs	r0, r4
 80114f6:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80114f8:	6821      	ldr	r1, [r4, #0]
 80114fa:	4b2f      	ldr	r3, [pc, #188]	; (80115b8 <HAL_DMA_IRQHandler+0x5d8>)
 80114fc:	4299      	cmp	r1, r3
 80114fe:	d900      	bls.n	8011502 <HAL_DMA_IRQHandler+0x522>
 8011500:	e743      	b.n	801138a <HAL_DMA_IRQHandler+0x3aa>
 8011502:	4b33      	ldr	r3, [pc, #204]	; (80115d0 <HAL_DMA_IRQHandler+0x5f0>)
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	4a26      	ldr	r2, [pc, #152]	; (80115a0 <HAL_DMA_IRQHandler+0x5c0>)
 8011508:	4291      	cmp	r1, r2
 801150a:	d100      	bne.n	801150e <HAL_DMA_IRQHandler+0x52e>
 801150c:	e10a      	b.n	8011724 <HAL_DMA_IRQHandler+0x744>
 801150e:	4a25      	ldr	r2, [pc, #148]	; (80115a4 <HAL_DMA_IRQHandler+0x5c4>)
 8011510:	4291      	cmp	r1, r2
 8011512:	d100      	bne.n	8011516 <HAL_DMA_IRQHandler+0x536>
 8011514:	e10c      	b.n	8011730 <HAL_DMA_IRQHandler+0x750>
 8011516:	4a24      	ldr	r2, [pc, #144]	; (80115a8 <HAL_DMA_IRQHandler+0x5c8>)
 8011518:	4291      	cmp	r1, r2
 801151a:	d100      	bne.n	801151e <HAL_DMA_IRQHandler+0x53e>
 801151c:	e10a      	b.n	8011734 <HAL_DMA_IRQHandler+0x754>
 801151e:	4a23      	ldr	r2, [pc, #140]	; (80115ac <HAL_DMA_IRQHandler+0x5cc>)
 8011520:	4291      	cmp	r1, r2
 8011522:	d100      	bne.n	8011526 <HAL_DMA_IRQHandler+0x546>
 8011524:	e109      	b.n	801173a <HAL_DMA_IRQHandler+0x75a>
 8011526:	4b22      	ldr	r3, [pc, #136]	; (80115b0 <HAL_DMA_IRQHandler+0x5d0>)
 8011528:	4299      	cmp	r1, r3
 801152a:	d100      	bne.n	801152e <HAL_DMA_IRQHandler+0x54e>
 801152c:	e108      	b.n	8011740 <HAL_DMA_IRQHandler+0x760>
 801152e:	4b21      	ldr	r3, [pc, #132]	; (80115b4 <HAL_DMA_IRQHandler+0x5d4>)
 8011530:	4299      	cmp	r1, r3
 8011532:	d100      	bne.n	8011536 <HAL_DMA_IRQHandler+0x556>
 8011534:	e107      	b.n	8011746 <HAL_DMA_IRQHandler+0x766>
 8011536:	4b20      	ldr	r3, [pc, #128]	; (80115b8 <HAL_DMA_IRQHandler+0x5d8>)
 8011538:	4299      	cmp	r1, r3
 801153a:	d100      	bne.n	801153e <HAL_DMA_IRQHandler+0x55e>
 801153c:	e106      	b.n	801174c <HAL_DMA_IRQHandler+0x76c>
 801153e:	4b1f      	ldr	r3, [pc, #124]	; (80115bc <HAL_DMA_IRQHandler+0x5dc>)
 8011540:	4299      	cmp	r1, r3
 8011542:	d100      	bne.n	8011546 <HAL_DMA_IRQHandler+0x566>
 8011544:	e105      	b.n	8011752 <HAL_DMA_IRQHandler+0x772>
 8011546:	4b1e      	ldr	r3, [pc, #120]	; (80115c0 <HAL_DMA_IRQHandler+0x5e0>)
 8011548:	4299      	cmp	r1, r3
 801154a:	d100      	bne.n	801154e <HAL_DMA_IRQHandler+0x56e>
 801154c:	e103      	b.n	8011756 <HAL_DMA_IRQHandler+0x776>
 801154e:	4b1d      	ldr	r3, [pc, #116]	; (80115c4 <HAL_DMA_IRQHandler+0x5e4>)
 8011550:	4299      	cmp	r1, r3
 8011552:	d100      	bne.n	8011556 <HAL_DMA_IRQHandler+0x576>
 8011554:	e101      	b.n	801175a <HAL_DMA_IRQHandler+0x77a>
 8011556:	4b1c      	ldr	r3, [pc, #112]	; (80115c8 <HAL_DMA_IRQHandler+0x5e8>)
 8011558:	18ca      	adds	r2, r1, r3
 801155a:	4253      	negs	r3, r2
 801155c:	415a      	adcs	r2, r3
 801155e:	4252      	negs	r2, r2
 8011560:	4b1d      	ldr	r3, [pc, #116]	; (80115d8 <HAL_DMA_IRQHandler+0x5f8>)
 8011562:	4013      	ands	r3, r2
 8011564:	2280      	movs	r2, #128	; 0x80
 8011566:	0292      	lsls	r2, r2, #10
 8011568:	4694      	mov	ip, r2
 801156a:	4463      	add	r3, ip
 801156c:	e0db      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801156e:	2340      	movs	r3, #64	; 0x40
 8011570:	e7b8      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 8011572:	2380      	movs	r3, #128	; 0x80
 8011574:	00db      	lsls	r3, r3, #3
 8011576:	e7b5      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 8011578:	2380      	movs	r3, #128	; 0x80
 801157a:	01db      	lsls	r3, r3, #7
 801157c:	e7b2      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 801157e:	2380      	movs	r3, #128	; 0x80
 8011580:	02db      	lsls	r3, r3, #11
 8011582:	e7af      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 8011584:	2380      	movs	r3, #128	; 0x80
 8011586:	03db      	lsls	r3, r3, #15
 8011588:	e7ac      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 801158a:	2380      	movs	r3, #128	; 0x80
 801158c:	04db      	lsls	r3, r3, #19
 801158e:	e7a9      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 8011590:	2304      	movs	r3, #4
 8011592:	e7a7      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 8011594:	2340      	movs	r3, #64	; 0x40
 8011596:	e7a5      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 8011598:	2380      	movs	r3, #128	; 0x80
 801159a:	00db      	lsls	r3, r3, #3
 801159c:	e7a2      	b.n	80114e4 <HAL_DMA_IRQHandler+0x504>
 801159e:	46c0      	nop			; (mov r8, r8)
 80115a0:	40020008 	.word	0x40020008
 80115a4:	4002001c 	.word	0x4002001c
 80115a8:	40020030 	.word	0x40020030
 80115ac:	40020044 	.word	0x40020044
 80115b0:	40020058 	.word	0x40020058
 80115b4:	4002006c 	.word	0x4002006c
 80115b8:	40020080 	.word	0x40020080
 80115bc:	40020408 	.word	0x40020408
 80115c0:	4002041c 	.word	0x4002041c
 80115c4:	40020430 	.word	0x40020430
 80115c8:	bffdfbbc 	.word	0xbffdfbbc
 80115cc:	fff88000 	.word	0xfff88000
 80115d0:	40020000 	.word	0x40020000
 80115d4:	40020400 	.word	0x40020400
 80115d8:	fffe2000 	.word	0xfffe2000
 80115dc:	fffc4000 	.word	0xfffc4000
 80115e0:	4a9b      	ldr	r2, [pc, #620]	; (8011850 <HAL_DMA_IRQHandler+0x870>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d027      	beq.n	8011636 <HAL_DMA_IRQHandler+0x656>
 80115e6:	4a9b      	ldr	r2, [pc, #620]	; (8011854 <HAL_DMA_IRQHandler+0x874>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d028      	beq.n	801163e <HAL_DMA_IRQHandler+0x65e>
 80115ec:	4a9a      	ldr	r2, [pc, #616]	; (8011858 <HAL_DMA_IRQHandler+0x878>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d027      	beq.n	8011642 <HAL_DMA_IRQHandler+0x662>
 80115f2:	4a9a      	ldr	r2, [pc, #616]	; (801185c <HAL_DMA_IRQHandler+0x87c>)
 80115f4:	4293      	cmp	r3, r2
 80115f6:	d027      	beq.n	8011648 <HAL_DMA_IRQHandler+0x668>
 80115f8:	4a99      	ldr	r2, [pc, #612]	; (8011860 <HAL_DMA_IRQHandler+0x880>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d027      	beq.n	801164e <HAL_DMA_IRQHandler+0x66e>
 80115fe:	4a99      	ldr	r2, [pc, #612]	; (8011864 <HAL_DMA_IRQHandler+0x884>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d027      	beq.n	8011654 <HAL_DMA_IRQHandler+0x674>
 8011604:	4a98      	ldr	r2, [pc, #608]	; (8011868 <HAL_DMA_IRQHandler+0x888>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d027      	beq.n	801165a <HAL_DMA_IRQHandler+0x67a>
 801160a:	4a98      	ldr	r2, [pc, #608]	; (801186c <HAL_DMA_IRQHandler+0x88c>)
 801160c:	4293      	cmp	r3, r2
 801160e:	d027      	beq.n	8011660 <HAL_DMA_IRQHandler+0x680>
 8011610:	4a97      	ldr	r2, [pc, #604]	; (8011870 <HAL_DMA_IRQHandler+0x890>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d026      	beq.n	8011664 <HAL_DMA_IRQHandler+0x684>
 8011616:	4a97      	ldr	r2, [pc, #604]	; (8011874 <HAL_DMA_IRQHandler+0x894>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d025      	beq.n	8011668 <HAL_DMA_IRQHandler+0x688>
 801161c:	4a96      	ldr	r2, [pc, #600]	; (8011878 <HAL_DMA_IRQHandler+0x898>)
 801161e:	4694      	mov	ip, r2
 8011620:	4463      	add	r3, ip
 8011622:	425a      	negs	r2, r3
 8011624:	4153      	adcs	r3, r2
 8011626:	425b      	negs	r3, r3
 8011628:	4a94      	ldr	r2, [pc, #592]	; (801187c <HAL_DMA_IRQHandler+0x89c>)
 801162a:	4013      	ands	r3, r2
 801162c:	2280      	movs	r2, #128	; 0x80
 801162e:	02d2      	lsls	r2, r2, #11
 8011630:	4694      	mov	ip, r2
 8011632:	4463      	add	r3, ip
 8011634:	e000      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011636:	2304      	movs	r3, #4
 8011638:	4a91      	ldr	r2, [pc, #580]	; (8011880 <HAL_DMA_IRQHandler+0x8a0>)
 801163a:	6053      	str	r3, [r2, #4]
 801163c:	e754      	b.n	80114e8 <HAL_DMA_IRQHandler+0x508>
 801163e:	2340      	movs	r3, #64	; 0x40
 8011640:	e7fa      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011642:	2380      	movs	r3, #128	; 0x80
 8011644:	00db      	lsls	r3, r3, #3
 8011646:	e7f7      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011648:	2380      	movs	r3, #128	; 0x80
 801164a:	01db      	lsls	r3, r3, #7
 801164c:	e7f4      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 801164e:	2380      	movs	r3, #128	; 0x80
 8011650:	02db      	lsls	r3, r3, #11
 8011652:	e7f1      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011654:	2380      	movs	r3, #128	; 0x80
 8011656:	03db      	lsls	r3, r3, #15
 8011658:	e7ee      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 801165a:	2380      	movs	r3, #128	; 0x80
 801165c:	04db      	lsls	r3, r3, #19
 801165e:	e7eb      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011660:	2304      	movs	r3, #4
 8011662:	e7e9      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011664:	2340      	movs	r3, #64	; 0x40
 8011666:	e7e7      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
 8011668:	2380      	movs	r3, #128	; 0x80
 801166a:	00db      	lsls	r3, r3, #3
 801166c:	e7e4      	b.n	8011638 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801166e:	2302      	movs	r3, #2
 8011670:	4003      	ands	r3, r0
 8011672:	1e5a      	subs	r2, r3, #1
 8011674:	4193      	sbcs	r3, r2
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d100      	bne.n	801167e <HAL_DMA_IRQHandler+0x69e>
 801167c:	e080      	b.n	8011780 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801167e:	680b      	ldr	r3, [r1, #0]
 8011680:	079b      	lsls	r3, r3, #30
 8011682:	d57d      	bpl.n	8011780 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011684:	680b      	ldr	r3, [r1, #0]
 8011686:	069b      	lsls	r3, r3, #26
 8011688:	d403      	bmi.n	8011692 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 801168a:	680b      	ldr	r3, [r1, #0]
 801168c:	2202      	movs	r2, #2
 801168e:	4393      	bics	r3, r2
 8011690:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	4a74      	ldr	r2, [pc, #464]	; (8011868 <HAL_DMA_IRQHandler+0x888>)
 8011696:	4293      	cmp	r3, r2
 8011698:	d800      	bhi.n	801169c <HAL_DMA_IRQHandler+0x6bc>
 801169a:	e08a      	b.n	80117b2 <HAL_DMA_IRQHandler+0x7d2>
 801169c:	4a6c      	ldr	r2, [pc, #432]	; (8011850 <HAL_DMA_IRQHandler+0x870>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d05e      	beq.n	8011760 <HAL_DMA_IRQHandler+0x780>
 80116a2:	4a6c      	ldr	r2, [pc, #432]	; (8011854 <HAL_DMA_IRQHandler+0x874>)
 80116a4:	4293      	cmp	r3, r2
 80116a6:	d100      	bne.n	80116aa <HAL_DMA_IRQHandler+0x6ca>
 80116a8:	e06b      	b.n	8011782 <HAL_DMA_IRQHandler+0x7a2>
 80116aa:	4a6b      	ldr	r2, [pc, #428]	; (8011858 <HAL_DMA_IRQHandler+0x878>)
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d06a      	beq.n	8011786 <HAL_DMA_IRQHandler+0x7a6>
 80116b0:	4a6a      	ldr	r2, [pc, #424]	; (801185c <HAL_DMA_IRQHandler+0x87c>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d06a      	beq.n	801178c <HAL_DMA_IRQHandler+0x7ac>
 80116b6:	4a6a      	ldr	r2, [pc, #424]	; (8011860 <HAL_DMA_IRQHandler+0x880>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d06a      	beq.n	8011792 <HAL_DMA_IRQHandler+0x7b2>
 80116bc:	4a69      	ldr	r2, [pc, #420]	; (8011864 <HAL_DMA_IRQHandler+0x884>)
 80116be:	4293      	cmp	r3, r2
 80116c0:	d06a      	beq.n	8011798 <HAL_DMA_IRQHandler+0x7b8>
 80116c2:	4a69      	ldr	r2, [pc, #420]	; (8011868 <HAL_DMA_IRQHandler+0x888>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d06a      	beq.n	801179e <HAL_DMA_IRQHandler+0x7be>
 80116c8:	4a68      	ldr	r2, [pc, #416]	; (801186c <HAL_DMA_IRQHandler+0x88c>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d06a      	beq.n	80117a4 <HAL_DMA_IRQHandler+0x7c4>
 80116ce:	4a68      	ldr	r2, [pc, #416]	; (8011870 <HAL_DMA_IRQHandler+0x890>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d069      	beq.n	80117a8 <HAL_DMA_IRQHandler+0x7c8>
 80116d4:	4a67      	ldr	r2, [pc, #412]	; (8011874 <HAL_DMA_IRQHandler+0x894>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d068      	beq.n	80117ac <HAL_DMA_IRQHandler+0x7cc>
 80116da:	4a67      	ldr	r2, [pc, #412]	; (8011878 <HAL_DMA_IRQHandler+0x898>)
 80116dc:	4694      	mov	ip, r2
 80116de:	4463      	add	r3, ip
 80116e0:	425a      	negs	r2, r3
 80116e2:	4153      	adcs	r3, r2
 80116e4:	425b      	negs	r3, r3
 80116e6:	4a67      	ldr	r2, [pc, #412]	; (8011884 <HAL_DMA_IRQHandler+0x8a4>)
 80116e8:	4013      	ands	r3, r2
 80116ea:	2280      	movs	r2, #128	; 0x80
 80116ec:	0292      	lsls	r2, r2, #10
 80116ee:	4694      	mov	ip, r2
 80116f0:	4463      	add	r3, ip
 80116f2:	e036      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80116f4:	2320      	movs	r3, #32
 80116f6:	e7bb      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 80116f8:	2380      	movs	r3, #128	; 0x80
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	e7b8      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 80116fe:	2380      	movs	r3, #128	; 0x80
 8011700:	019b      	lsls	r3, r3, #6
 8011702:	e7b5      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 8011704:	2380      	movs	r3, #128	; 0x80
 8011706:	029b      	lsls	r3, r3, #10
 8011708:	e7b2      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 801170a:	2380      	movs	r3, #128	; 0x80
 801170c:	039b      	lsls	r3, r3, #14
 801170e:	e7af      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 8011710:	2380      	movs	r3, #128	; 0x80
 8011712:	049b      	lsls	r3, r3, #18
 8011714:	e7ac      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 8011716:	2302      	movs	r3, #2
 8011718:	e7aa      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 801171a:	2320      	movs	r3, #32
 801171c:	e7a8      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 801171e:	2380      	movs	r3, #128	; 0x80
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	e7a5      	b.n	8011670 <HAL_DMA_IRQHandler+0x690>
 8011724:	2302      	movs	r3, #2
 8011726:	4003      	ands	r3, r0
 8011728:	1e5a      	subs	r2, r3, #1
 801172a:	4193      	sbcs	r3, r2
 801172c:	b2db      	uxtb	r3, r3
 801172e:	e7a3      	b.n	8011678 <HAL_DMA_IRQHandler+0x698>
 8011730:	2320      	movs	r3, #32
 8011732:	e7f8      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 8011734:	2380      	movs	r3, #128	; 0x80
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	e7f5      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 801173a:	2380      	movs	r3, #128	; 0x80
 801173c:	019b      	lsls	r3, r3, #6
 801173e:	e7f2      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 8011740:	2380      	movs	r3, #128	; 0x80
 8011742:	029b      	lsls	r3, r3, #10
 8011744:	e7ef      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 8011746:	2380      	movs	r3, #128	; 0x80
 8011748:	039b      	lsls	r3, r3, #14
 801174a:	e7ec      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 801174c:	2380      	movs	r3, #128	; 0x80
 801174e:	049b      	lsls	r3, r3, #18
 8011750:	e7e9      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 8011752:	2302      	movs	r3, #2
 8011754:	e7e7      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 8011756:	2320      	movs	r3, #32
 8011758:	e7e5      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
 801175a:	2380      	movs	r3, #128	; 0x80
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	e7e2      	b.n	8011726 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011760:	2302      	movs	r3, #2
 8011762:	4a49      	ldr	r2, [pc, #292]	; (8011888 <HAL_DMA_IRQHandler+0x8a8>)
 8011764:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011768:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801176a:	2321      	movs	r3, #33	; 0x21
 801176c:	2201      	movs	r2, #1
 801176e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011770:	3b01      	subs	r3, #1
 8011772:	2200      	movs	r2, #0
 8011774:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011778:	2b00      	cmp	r3, #0
 801177a:	d001      	beq.n	8011780 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 801177c:	0020      	movs	r0, r4
 801177e:	4798      	blx	r3
}  
 8011780:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011782:	2320      	movs	r3, #32
 8011784:	e7ed      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 8011786:	2380      	movs	r3, #128	; 0x80
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	e7ea      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 801178c:	2380      	movs	r3, #128	; 0x80
 801178e:	019b      	lsls	r3, r3, #6
 8011790:	e7e7      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 8011792:	2380      	movs	r3, #128	; 0x80
 8011794:	029b      	lsls	r3, r3, #10
 8011796:	e7e4      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 8011798:	2380      	movs	r3, #128	; 0x80
 801179a:	039b      	lsls	r3, r3, #14
 801179c:	e7e1      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 801179e:	2380      	movs	r3, #128	; 0x80
 80117a0:	049b      	lsls	r3, r3, #18
 80117a2:	e7de      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 80117a4:	2302      	movs	r3, #2
 80117a6:	e7dc      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 80117a8:	2320      	movs	r3, #32
 80117aa:	e7da      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 80117ac:	2380      	movs	r3, #128	; 0x80
 80117ae:	009b      	lsls	r3, r3, #2
 80117b0:	e7d7      	b.n	8011762 <HAL_DMA_IRQHandler+0x782>
 80117b2:	4a27      	ldr	r2, [pc, #156]	; (8011850 <HAL_DMA_IRQHandler+0x870>)
 80117b4:	4293      	cmp	r3, r2
 80117b6:	d027      	beq.n	8011808 <HAL_DMA_IRQHandler+0x828>
 80117b8:	4a26      	ldr	r2, [pc, #152]	; (8011854 <HAL_DMA_IRQHandler+0x874>)
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d028      	beq.n	8011810 <HAL_DMA_IRQHandler+0x830>
 80117be:	4a26      	ldr	r2, [pc, #152]	; (8011858 <HAL_DMA_IRQHandler+0x878>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d027      	beq.n	8011814 <HAL_DMA_IRQHandler+0x834>
 80117c4:	4a25      	ldr	r2, [pc, #148]	; (801185c <HAL_DMA_IRQHandler+0x87c>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d027      	beq.n	801181a <HAL_DMA_IRQHandler+0x83a>
 80117ca:	4a25      	ldr	r2, [pc, #148]	; (8011860 <HAL_DMA_IRQHandler+0x880>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d027      	beq.n	8011820 <HAL_DMA_IRQHandler+0x840>
 80117d0:	4a24      	ldr	r2, [pc, #144]	; (8011864 <HAL_DMA_IRQHandler+0x884>)
 80117d2:	4293      	cmp	r3, r2
 80117d4:	d027      	beq.n	8011826 <HAL_DMA_IRQHandler+0x846>
 80117d6:	4a24      	ldr	r2, [pc, #144]	; (8011868 <HAL_DMA_IRQHandler+0x888>)
 80117d8:	4293      	cmp	r3, r2
 80117da:	d027      	beq.n	801182c <HAL_DMA_IRQHandler+0x84c>
 80117dc:	4a23      	ldr	r2, [pc, #140]	; (801186c <HAL_DMA_IRQHandler+0x88c>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d027      	beq.n	8011832 <HAL_DMA_IRQHandler+0x852>
 80117e2:	4a23      	ldr	r2, [pc, #140]	; (8011870 <HAL_DMA_IRQHandler+0x890>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d026      	beq.n	8011836 <HAL_DMA_IRQHandler+0x856>
 80117e8:	4a22      	ldr	r2, [pc, #136]	; (8011874 <HAL_DMA_IRQHandler+0x894>)
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d025      	beq.n	801183a <HAL_DMA_IRQHandler+0x85a>
 80117ee:	4a22      	ldr	r2, [pc, #136]	; (8011878 <HAL_DMA_IRQHandler+0x898>)
 80117f0:	4694      	mov	ip, r2
 80117f2:	4463      	add	r3, ip
 80117f4:	425a      	negs	r2, r3
 80117f6:	4153      	adcs	r3, r2
 80117f8:	425b      	negs	r3, r3
 80117fa:	4a22      	ldr	r2, [pc, #136]	; (8011884 <HAL_DMA_IRQHandler+0x8a4>)
 80117fc:	4013      	ands	r3, r2
 80117fe:	2280      	movs	r2, #128	; 0x80
 8011800:	0292      	lsls	r2, r2, #10
 8011802:	4694      	mov	ip, r2
 8011804:	4463      	add	r3, ip
 8011806:	e000      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 8011808:	2302      	movs	r3, #2
 801180a:	4a1d      	ldr	r2, [pc, #116]	; (8011880 <HAL_DMA_IRQHandler+0x8a0>)
 801180c:	6053      	str	r3, [r2, #4]
 801180e:	e7aa      	b.n	8011766 <HAL_DMA_IRQHandler+0x786>
 8011810:	2320      	movs	r3, #32
 8011812:	e7fa      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 8011814:	2380      	movs	r3, #128	; 0x80
 8011816:	009b      	lsls	r3, r3, #2
 8011818:	e7f7      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 801181a:	2380      	movs	r3, #128	; 0x80
 801181c:	019b      	lsls	r3, r3, #6
 801181e:	e7f4      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 8011820:	2380      	movs	r3, #128	; 0x80
 8011822:	029b      	lsls	r3, r3, #10
 8011824:	e7f1      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 8011826:	2380      	movs	r3, #128	; 0x80
 8011828:	039b      	lsls	r3, r3, #14
 801182a:	e7ee      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 801182c:	2380      	movs	r3, #128	; 0x80
 801182e:	049b      	lsls	r3, r3, #18
 8011830:	e7eb      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 8011832:	2302      	movs	r3, #2
 8011834:	e7e9      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 8011836:	2320      	movs	r3, #32
 8011838:	e7e7      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
 801183a:	2380      	movs	r3, #128	; 0x80
 801183c:	009b      	lsls	r3, r3, #2
 801183e:	e7e4      	b.n	801180a <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011840:	6821      	ldr	r1, [r4, #0]
 8011842:	e65e      	b.n	8011502 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011844:	681a      	ldr	r2, [r3, #0]
 8011846:	0712      	lsls	r2, r2, #28
 8011848:	d500      	bpl.n	801184c <HAL_DMA_IRQHandler+0x86c>
 801184a:	e49b      	b.n	8011184 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801184c:	6823      	ldr	r3, [r4, #0]
 801184e:	e44b      	b.n	80110e8 <HAL_DMA_IRQHandler+0x108>
 8011850:	40020008 	.word	0x40020008
 8011854:	4002001c 	.word	0x4002001c
 8011858:	40020030 	.word	0x40020030
 801185c:	40020044 	.word	0x40020044
 8011860:	40020058 	.word	0x40020058
 8011864:	4002006c 	.word	0x4002006c
 8011868:	40020080 	.word	0x40020080
 801186c:	40020408 	.word	0x40020408
 8011870:	4002041c 	.word	0x4002041c
 8011874:	40020430 	.word	0x40020430
 8011878:	bffdfbbc 	.word	0xbffdfbbc
 801187c:	fffc4000 	.word	0xfffc4000
 8011880:	40020000 	.word	0x40020000
 8011884:	fffe2000 	.word	0xfffe2000
 8011888:	40020400 	.word	0x40020400

0801188c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 801188c:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <FLASH_SetErrorCode+0x2c>)
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	06db      	lsls	r3, r3, #27
 8011892:	d504      	bpl.n	801189e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011894:	4a09      	ldr	r2, [pc, #36]	; (80118bc <FLASH_SetErrorCode+0x30>)
 8011896:	69d3      	ldr	r3, [r2, #28]
 8011898:	2102      	movs	r1, #2
 801189a:	430b      	orrs	r3, r1
 801189c:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801189e:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <FLASH_SetErrorCode+0x2c>)
 80118a0:	68db      	ldr	r3, [r3, #12]
 80118a2:	075b      	lsls	r3, r3, #29
 80118a4:	d504      	bpl.n	80118b0 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80118a6:	4a05      	ldr	r2, [pc, #20]	; (80118bc <FLASH_SetErrorCode+0x30>)
 80118a8:	69d3      	ldr	r3, [r2, #28]
 80118aa:	2101      	movs	r1, #1
 80118ac:	430b      	orrs	r3, r1
 80118ae:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80118b0:	4b01      	ldr	r3, [pc, #4]	; (80118b8 <FLASH_SetErrorCode+0x2c>)
 80118b2:	2214      	movs	r2, #20
 80118b4:	60da      	str	r2, [r3, #12]
}  
 80118b6:	4770      	bx	lr
 80118b8:	40022000 	.word	0x40022000
 80118bc:	20006658 	.word	0x20006658

080118c0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80118c0:	4b05      	ldr	r3, [pc, #20]	; (80118d8 <HAL_FLASH_Unlock+0x18>)
 80118c2:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 80118c4:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80118c6:	061b      	lsls	r3, r3, #24
 80118c8:	d505      	bpl.n	80118d6 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80118ca:	4b03      	ldr	r3, [pc, #12]	; (80118d8 <HAL_FLASH_Unlock+0x18>)
 80118cc:	4a03      	ldr	r2, [pc, #12]	; (80118dc <HAL_FLASH_Unlock+0x1c>)
 80118ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80118d0:	4a03      	ldr	r2, [pc, #12]	; (80118e0 <HAL_FLASH_Unlock+0x20>)
 80118d2:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80118d4:	2000      	movs	r0, #0
}
 80118d6:	4770      	bx	lr
 80118d8:	40022000 	.word	0x40022000
 80118dc:	45670123 	.word	0x45670123
 80118e0:	cdef89ab 	.word	0xcdef89ab

080118e4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80118e4:	4a03      	ldr	r2, [pc, #12]	; (80118f4 <HAL_FLASH_Lock+0x10>)
 80118e6:	6913      	ldr	r3, [r2, #16]
 80118e8:	2180      	movs	r1, #128	; 0x80
 80118ea:	430b      	orrs	r3, r1
 80118ec:	6113      	str	r3, [r2, #16]
}
 80118ee:	2000      	movs	r0, #0
 80118f0:	4770      	bx	lr
 80118f2:	46c0      	nop			; (mov r8, r8)
 80118f4:	40022000 	.word	0x40022000

080118f8 <FLASH_WaitForLastOperation>:
{
 80118f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fa:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80118fc:	f7fe fd3c 	bl	8010378 <HAL_GetTick>
 8011900:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011902:	4e13      	ldr	r6, [pc, #76]	; (8011950 <FLASH_WaitForLastOperation+0x58>)
 8011904:	2501      	movs	r5, #1
 8011906:	68f3      	ldr	r3, [r6, #12]
 8011908:	421d      	tst	r5, r3
 801190a:	d00a      	beq.n	8011922 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 801190c:	1c63      	adds	r3, r4, #1
 801190e:	d0fa      	beq.n	8011906 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011910:	2c00      	cmp	r4, #0
 8011912:	d01a      	beq.n	801194a <FLASH_WaitForLastOperation+0x52>
 8011914:	f7fe fd30 	bl	8010378 <HAL_GetTick>
 8011918:	1bc0      	subs	r0, r0, r7
 801191a:	42a0      	cmp	r0, r4
 801191c:	d9f3      	bls.n	8011906 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 801191e:	2003      	movs	r0, #3
 8011920:	e012      	b.n	8011948 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011922:	4b0b      	ldr	r3, [pc, #44]	; (8011950 <FLASH_WaitForLastOperation+0x58>)
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	069b      	lsls	r3, r3, #26
 8011928:	d502      	bpl.n	8011930 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801192a:	4b09      	ldr	r3, [pc, #36]	; (8011950 <FLASH_WaitForLastOperation+0x58>)
 801192c:	2220      	movs	r2, #32
 801192e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011930:	4b07      	ldr	r3, [pc, #28]	; (8011950 <FLASH_WaitForLastOperation+0x58>)
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	06db      	lsls	r3, r3, #27
 8011936:	d404      	bmi.n	8011942 <FLASH_WaitForLastOperation+0x4a>
 8011938:	4b05      	ldr	r3, [pc, #20]	; (8011950 <FLASH_WaitForLastOperation+0x58>)
 801193a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 801193c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801193e:	075b      	lsls	r3, r3, #29
 8011940:	d502      	bpl.n	8011948 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011942:	f7ff ffa3 	bl	801188c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011946:	2001      	movs	r0, #1
}
 8011948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 801194a:	2003      	movs	r0, #3
 801194c:	e7fc      	b.n	8011948 <FLASH_WaitForLastOperation+0x50>
 801194e:	46c0      	nop			; (mov r8, r8)
 8011950:	40022000 	.word	0x40022000

08011954 <HAL_FLASH_Program>:
{
 8011954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011956:	46de      	mov	lr, fp
 8011958:	4657      	mov	r7, sl
 801195a:	464e      	mov	r6, r9
 801195c:	4645      	mov	r5, r8
 801195e:	b5e0      	push	{r5, r6, r7, lr}
 8011960:	b083      	sub	sp, #12
 8011962:	0004      	movs	r4, r0
 8011964:	000e      	movs	r6, r1
 8011966:	9201      	str	r2, [sp, #4]
 8011968:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 801196a:	4b2a      	ldr	r3, [pc, #168]	; (8011a14 <HAL_FLASH_Program+0xc0>)
 801196c:	7e1b      	ldrb	r3, [r3, #24]
 801196e:	2b01      	cmp	r3, #1
 8011970:	d04b      	beq.n	8011a0a <HAL_FLASH_Program+0xb6>
 8011972:	4b28      	ldr	r3, [pc, #160]	; (8011a14 <HAL_FLASH_Program+0xc0>)
 8011974:	2201      	movs	r2, #1
 8011976:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011978:	4827      	ldr	r0, [pc, #156]	; (8011a18 <HAL_FLASH_Program+0xc4>)
 801197a:	f7ff ffbd 	bl	80118f8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 801197e:	2800      	cmp	r0, #0
 8011980:	d139      	bne.n	80119f6 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011982:	2c01      	cmp	r4, #1
 8011984:	d043      	beq.n	8011a0e <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011986:	3c02      	subs	r4, #2
 8011988:	4263      	negs	r3, r4
 801198a:	415c      	adcs	r4, r3
 801198c:	4264      	negs	r4, r4
 801198e:	2301      	movs	r3, #1
 8011990:	439c      	bics	r4, r3
 8011992:	46a0      	mov	r8, r4
 8011994:	3303      	adds	r3, #3
 8011996:	469c      	mov	ip, r3
 8011998:	44e0      	add	r8, ip
{
 801199a:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801199c:	4b1d      	ldr	r3, [pc, #116]	; (8011a14 <HAL_FLASH_Program+0xc0>)
 801199e:	469b      	mov	fp, r3
 80119a0:	2300      	movs	r3, #0
 80119a2:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80119a4:	4c1d      	ldr	r4, [pc, #116]	; (8011a1c <HAL_FLASH_Program+0xc8>)
 80119a6:	e01e      	b.n	80119e6 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80119a8:	2220      	movs	r2, #32
 80119aa:	1ad2      	subs	r2, r2, r3
 80119ac:	4649      	mov	r1, r9
 80119ae:	4091      	lsls	r1, r2
 80119b0:	000a      	movs	r2, r1
 80119b2:	9901      	ldr	r1, [sp, #4]
 80119b4:	40d9      	lsrs	r1, r3
 80119b6:	000b      	movs	r3, r1
 80119b8:	4313      	orrs	r3, r2
 80119ba:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80119bc:	465a      	mov	r2, fp
 80119be:	4651      	mov	r1, sl
 80119c0:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80119c2:	6922      	ldr	r2, [r4, #16]
 80119c4:	2701      	movs	r7, #1
 80119c6:	433a      	orrs	r2, r7
 80119c8:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80119ca:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80119cc:	4812      	ldr	r0, [pc, #72]	; (8011a18 <HAL_FLASH_Program+0xc4>)
 80119ce:	f7ff ff93 	bl	80118f8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80119d2:	6923      	ldr	r3, [r4, #16]
 80119d4:	43bb      	bics	r3, r7
 80119d6:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80119d8:	2800      	cmp	r0, #0
 80119da:	d10c      	bne.n	80119f6 <HAL_FLASH_Program+0xa2>
 80119dc:	3501      	adds	r5, #1
 80119de:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 80119e0:	b2eb      	uxtb	r3, r5
 80119e2:	4598      	cmp	r8, r3
 80119e4:	d907      	bls.n	80119f6 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80119e6:	012b      	lsls	r3, r5, #4
 80119e8:	2220      	movs	r2, #32
 80119ea:	4252      	negs	r2, r2
 80119ec:	189a      	adds	r2, r3, r2
 80119ee:	d4db      	bmi.n	80119a8 <HAL_FLASH_Program+0x54>
 80119f0:	464b      	mov	r3, r9
 80119f2:	40d3      	lsrs	r3, r2
 80119f4:	e7e1      	b.n	80119ba <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 80119f6:	4b07      	ldr	r3, [pc, #28]	; (8011a14 <HAL_FLASH_Program+0xc0>)
 80119f8:	2200      	movs	r2, #0
 80119fa:	761a      	strb	r2, [r3, #24]
}
 80119fc:	b003      	add	sp, #12
 80119fe:	bc3c      	pop	{r2, r3, r4, r5}
 8011a00:	4690      	mov	r8, r2
 8011a02:	4699      	mov	r9, r3
 8011a04:	46a2      	mov	sl, r4
 8011a06:	46ab      	mov	fp, r5
 8011a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011a0a:	2002      	movs	r0, #2
 8011a0c:	e7f6      	b.n	80119fc <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	4698      	mov	r8, r3
 8011a12:	e7c2      	b.n	801199a <HAL_FLASH_Program+0x46>
 8011a14:	20006658 	.word	0x20006658
 8011a18:	0000c350 	.word	0x0000c350
 8011a1c:	40022000 	.word	0x40022000

08011a20 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011a20:	4b06      	ldr	r3, [pc, #24]	; (8011a3c <FLASH_MassErase+0x1c>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011a26:	4b06      	ldr	r3, [pc, #24]	; (8011a40 <FLASH_MassErase+0x20>)
 8011a28:	691a      	ldr	r2, [r3, #16]
 8011a2a:	2104      	movs	r1, #4
 8011a2c:	430a      	orrs	r2, r1
 8011a2e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011a30:	691a      	ldr	r2, [r3, #16]
 8011a32:	313c      	adds	r1, #60	; 0x3c
 8011a34:	430a      	orrs	r2, r1
 8011a36:	611a      	str	r2, [r3, #16]
}
 8011a38:	4770      	bx	lr
 8011a3a:	46c0      	nop			; (mov r8, r8)
 8011a3c:	20006658 	.word	0x20006658
 8011a40:	40022000 	.word	0x40022000

08011a44 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011a44:	4b06      	ldr	r3, [pc, #24]	; (8011a60 <FLASH_PageErase+0x1c>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011a4a:	4b06      	ldr	r3, [pc, #24]	; (8011a64 <FLASH_PageErase+0x20>)
 8011a4c:	691a      	ldr	r2, [r3, #16]
 8011a4e:	2102      	movs	r1, #2
 8011a50:	430a      	orrs	r2, r1
 8011a52:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011a54:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011a56:	691a      	ldr	r2, [r3, #16]
 8011a58:	313e      	adds	r1, #62	; 0x3e
 8011a5a:	430a      	orrs	r2, r1
 8011a5c:	611a      	str	r2, [r3, #16]
}
 8011a5e:	4770      	bx	lr
 8011a60:	20006658 	.word	0x20006658
 8011a64:	40022000 	.word	0x40022000

08011a68 <HAL_FLASHEx_Erase>:
{
 8011a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a6a:	46c6      	mov	lr, r8
 8011a6c:	b500      	push	{lr}
 8011a6e:	0006      	movs	r6, r0
 8011a70:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011a72:	4b2a      	ldr	r3, [pc, #168]	; (8011b1c <HAL_FLASHEx_Erase+0xb4>)
 8011a74:	7e1b      	ldrb	r3, [r3, #24]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d04d      	beq.n	8011b16 <HAL_FLASHEx_Erase+0xae>
 8011a7a:	4b28      	ldr	r3, [pc, #160]	; (8011b1c <HAL_FLASHEx_Erase+0xb4>)
 8011a7c:	2201      	movs	r2, #1
 8011a7e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011a80:	6803      	ldr	r3, [r0, #0]
 8011a82:	2b01      	cmp	r3, #1
 8011a84:	d029      	beq.n	8011ada <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011a86:	4826      	ldr	r0, [pc, #152]	; (8011b20 <HAL_FLASHEx_Erase+0xb8>)
 8011a88:	f7ff ff36 	bl	80118f8 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011a8c:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d129      	bne.n	8011ae6 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8011a92:	2301      	movs	r3, #1
 8011a94:	425b      	negs	r3, r3
 8011a96:	4642      	mov	r2, r8
 8011a98:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011a9a:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011a9c:	68b3      	ldr	r3, [r6, #8]
 8011a9e:	02db      	lsls	r3, r3, #11
 8011aa0:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011aa2:	429c      	cmp	r4, r3
 8011aa4:	d235      	bcs.n	8011b12 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011aa6:	4f1f      	ldr	r7, [pc, #124]	; (8011b24 <HAL_FLASHEx_Erase+0xbc>)
 8011aa8:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8011aaa:	0020      	movs	r0, r4
 8011aac:	f7ff ffca 	bl	8011a44 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011ab0:	481b      	ldr	r0, [pc, #108]	; (8011b20 <HAL_FLASHEx_Erase+0xb8>)
 8011ab2:	f7ff ff21 	bl	80118f8 <FLASH_WaitForLastOperation>
 8011ab6:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	43ab      	bics	r3, r5
 8011abc:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	d124      	bne.n	8011b0c <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8011ac2:	2380      	movs	r3, #128	; 0x80
 8011ac4:	011b      	lsls	r3, r3, #4
 8011ac6:	469c      	mov	ip, r3
 8011ac8:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011aca:	68b3      	ldr	r3, [r6, #8]
 8011acc:	02db      	lsls	r3, r3, #11
 8011ace:	6871      	ldr	r1, [r6, #4]
 8011ad0:	468c      	mov	ip, r1
 8011ad2:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011ad4:	42a3      	cmp	r3, r4
 8011ad6:	d8e8      	bhi.n	8011aaa <HAL_FLASHEx_Erase+0x42>
 8011ad8:	e005      	b.n	8011ae6 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011ada:	4811      	ldr	r0, [pc, #68]	; (8011b20 <HAL_FLASHEx_Erase+0xb8>)
 8011adc:	f7ff ff0c 	bl	80118f8 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011ae0:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	d006      	beq.n	8011af4 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8011ae6:	4b0d      	ldr	r3, [pc, #52]	; (8011b1c <HAL_FLASHEx_Erase+0xb4>)
 8011ae8:	2100      	movs	r1, #0
 8011aea:	7619      	strb	r1, [r3, #24]
}
 8011aec:	0010      	movs	r0, r2
 8011aee:	bc04      	pop	{r2}
 8011af0:	4690      	mov	r8, r2
 8011af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011af4:	f7ff ff94 	bl	8011a20 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011af8:	4809      	ldr	r0, [pc, #36]	; (8011b20 <HAL_FLASHEx_Erase+0xb8>)
 8011afa:	f7ff fefd 	bl	80118f8 <FLASH_WaitForLastOperation>
 8011afe:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011b00:	4908      	ldr	r1, [pc, #32]	; (8011b24 <HAL_FLASHEx_Erase+0xbc>)
 8011b02:	690b      	ldr	r3, [r1, #16]
 8011b04:	2004      	movs	r0, #4
 8011b06:	4383      	bics	r3, r0
 8011b08:	610b      	str	r3, [r1, #16]
 8011b0a:	e7ec      	b.n	8011ae6 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011b0c:	4643      	mov	r3, r8
 8011b0e:	601c      	str	r4, [r3, #0]
            break;
 8011b10:	e7e9      	b.n	8011ae6 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011b12:	2201      	movs	r2, #1
 8011b14:	e7e7      	b.n	8011ae6 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8011b16:	2202      	movs	r2, #2
 8011b18:	e7e8      	b.n	8011aec <HAL_FLASHEx_Erase+0x84>
 8011b1a:	46c0      	nop			; (mov r8, r8)
 8011b1c:	20006658 	.word	0x20006658
 8011b20:	0000c350 	.word	0x0000c350
 8011b24:	40022000 	.word	0x40022000

08011b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b2a:	46de      	mov	lr, fp
 8011b2c:	4657      	mov	r7, sl
 8011b2e:	464e      	mov	r6, r9
 8011b30:	4645      	mov	r5, r8
 8011b32:	b5e0      	push	{r5, r6, r7, lr}
 8011b34:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011b36:	680a      	ldr	r2, [r1, #0]
 8011b38:	2a00      	cmp	r2, #0
 8011b3a:	d100      	bne.n	8011b3e <HAL_GPIO_Init+0x16>
 8011b3c:	e0bf      	b.n	8011cbe <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8011b3e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011b40:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011b42:	2410      	movs	r4, #16
 8011b44:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011b46:	3c0d      	subs	r4, #13
 8011b48:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011b4a:	2480      	movs	r4, #128	; 0x80
 8011b4c:	0564      	lsls	r4, r4, #21
 8011b4e:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011b50:	4c5e      	ldr	r4, [pc, #376]	; (8011ccc <HAL_GPIO_Init+0x1a4>)
 8011b52:	1904      	adds	r4, r0, r4
 8011b54:	1e65      	subs	r5, r4, #1
 8011b56:	41ac      	sbcs	r4, r5
 8011b58:	3404      	adds	r4, #4
 8011b5a:	46a1      	mov	r9, r4
 8011b5c:	e03b      	b.n	8011bd6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8011b5e:	08dc      	lsrs	r4, r3, #3
 8011b60:	00a4      	lsls	r4, r4, #2
 8011b62:	1904      	adds	r4, r0, r4
 8011b64:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011b66:	2507      	movs	r5, #7
 8011b68:	401d      	ands	r5, r3
 8011b6a:	00ad      	lsls	r5, r5, #2
 8011b6c:	220f      	movs	r2, #15
 8011b6e:	40aa      	lsls	r2, r5
 8011b70:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011b72:	690a      	ldr	r2, [r1, #16]
 8011b74:	40aa      	lsls	r2, r5
 8011b76:	0015      	movs	r5, r2
 8011b78:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011b7a:	6225      	str	r5, [r4, #32]
 8011b7c:	e035      	b.n	8011bea <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011b7e:	2500      	movs	r5, #0
 8011b80:	465a      	mov	r2, fp
 8011b82:	4095      	lsls	r5, r2
 8011b84:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011b86:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011b88:	4c51      	ldr	r4, [pc, #324]	; (8011cd0 <HAL_GPIO_Init+0x1a8>)
 8011b8a:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011b8c:	9a01      	ldr	r2, [sp, #4]
 8011b8e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011b90:	684a      	ldr	r2, [r1, #4]
 8011b92:	03d2      	lsls	r2, r2, #15
 8011b94:	d500      	bpl.n	8011b98 <HAL_GPIO_Init+0x70>
 8011b96:	e086      	b.n	8011ca6 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011b98:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011b9a:	4f4d      	ldr	r7, [pc, #308]	; (8011cd0 <HAL_GPIO_Init+0x1a8>)
 8011b9c:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8011b9e:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011ba0:	684a      	ldr	r2, [r1, #4]
 8011ba2:	0392      	lsls	r2, r2, #14
 8011ba4:	d500      	bpl.n	8011ba8 <HAL_GPIO_Init+0x80>
 8011ba6:	e081      	b.n	8011cac <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011ba8:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011baa:	4f49      	ldr	r7, [pc, #292]	; (8011cd0 <HAL_GPIO_Init+0x1a8>)
 8011bac:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011bae:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011bb0:	684a      	ldr	r2, [r1, #4]
 8011bb2:	02d2      	lsls	r2, r2, #11
 8011bb4:	d47d      	bmi.n	8011cb2 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011bb6:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011bb8:	4f45      	ldr	r7, [pc, #276]	; (8011cd0 <HAL_GPIO_Init+0x1a8>)
 8011bba:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8011bbc:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011bbe:	684a      	ldr	r2, [r1, #4]
 8011bc0:	0292      	lsls	r2, r2, #10
 8011bc2:	d479      	bmi.n	8011cb8 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011bc4:	0022      	movs	r2, r4
 8011bc6:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011bc8:	4c41      	ldr	r4, [pc, #260]	; (8011cd0 <HAL_GPIO_Init+0x1a8>)
 8011bca:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011bcc:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011bce:	680a      	ldr	r2, [r1, #0]
 8011bd0:	0014      	movs	r4, r2
 8011bd2:	40dc      	lsrs	r4, r3
 8011bd4:	d073      	beq.n	8011cbe <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011bd6:	0034      	movs	r4, r6
 8011bd8:	409c      	lsls	r4, r3
 8011bda:	4022      	ands	r2, r4
 8011bdc:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8011bde:	d0f5      	beq.n	8011bcc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011be0:	684c      	ldr	r4, [r1, #4]
 8011be2:	4642      	mov	r2, r8
 8011be4:	4394      	bics	r4, r2
 8011be6:	2c02      	cmp	r4, #2
 8011be8:	d0b9      	beq.n	8011b5e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011bea:	6804      	ldr	r4, [r0, #0]
 8011bec:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011bee:	4665      	mov	r5, ip
 8011bf0:	40bd      	lsls	r5, r7
 8011bf2:	43ed      	mvns	r5, r5
 8011bf4:	402c      	ands	r4, r5
 8011bf6:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011bf8:	684c      	ldr	r4, [r1, #4]
 8011bfa:	4662      	mov	r2, ip
 8011bfc:	4014      	ands	r4, r2
 8011bfe:	40bc      	lsls	r4, r7
 8011c00:	465a      	mov	r2, fp
 8011c02:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011c04:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011c06:	684c      	ldr	r4, [r1, #4]
 8011c08:	4642      	mov	r2, r8
 8011c0a:	4394      	bics	r4, r2
 8011c0c:	3c01      	subs	r4, #1
 8011c0e:	2c01      	cmp	r4, #1
 8011c10:	d813      	bhi.n	8011c3a <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011c12:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011c14:	402c      	ands	r4, r5
 8011c16:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011c18:	68cc      	ldr	r4, [r1, #12]
 8011c1a:	40bc      	lsls	r4, r7
 8011c1c:	465a      	mov	r2, fp
 8011c1e:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011c20:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011c22:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011c24:	0032      	movs	r2, r6
 8011c26:	409a      	lsls	r2, r3
 8011c28:	4394      	bics	r4, r2
 8011c2a:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011c2c:	684a      	ldr	r2, [r1, #4]
 8011c2e:	0914      	lsrs	r4, r2, #4
 8011c30:	4034      	ands	r4, r6
 8011c32:	409c      	lsls	r4, r3
 8011c34:	465a      	mov	r2, fp
 8011c36:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011c38:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011c3a:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011c3c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011c3e:	688d      	ldr	r5, [r1, #8]
 8011c40:	40bd      	lsls	r5, r7
 8011c42:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011c44:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011c46:	684a      	ldr	r2, [r1, #4]
 8011c48:	4654      	mov	r4, sl
 8011c4a:	4222      	tst	r2, r4
 8011c4c:	d0be      	beq.n	8011bcc <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c4e:	4c21      	ldr	r4, [pc, #132]	; (8011cd4 <HAL_GPIO_Init+0x1ac>)
 8011c50:	69a5      	ldr	r5, [r4, #24]
 8011c52:	4335      	orrs	r5, r6
 8011c54:	61a5      	str	r5, [r4, #24]
 8011c56:	69a4      	ldr	r4, [r4, #24]
 8011c58:	4034      	ands	r4, r6
 8011c5a:	9403      	str	r4, [sp, #12]
 8011c5c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011c5e:	089c      	lsrs	r4, r3, #2
 8011c60:	00a4      	lsls	r4, r4, #2
 8011c62:	4a1d      	ldr	r2, [pc, #116]	; (8011cd8 <HAL_GPIO_Init+0x1b0>)
 8011c64:	4693      	mov	fp, r2
 8011c66:	445c      	add	r4, fp
 8011c68:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011c6a:	4667      	mov	r7, ip
 8011c6c:	401f      	ands	r7, r3
 8011c6e:	00ba      	lsls	r2, r7, #2
 8011c70:	4693      	mov	fp, r2
 8011c72:	270f      	movs	r7, #15
 8011c74:	4097      	lsls	r7, r2
 8011c76:	43bd      	bics	r5, r7
 8011c78:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011c7a:	2590      	movs	r5, #144	; 0x90
 8011c7c:	05ed      	lsls	r5, r5, #23
 8011c7e:	42a8      	cmp	r0, r5
 8011c80:	d100      	bne.n	8011c84 <HAL_GPIO_Init+0x15c>
 8011c82:	e77c      	b.n	8011b7e <HAL_GPIO_Init+0x56>
 8011c84:	4d15      	ldr	r5, [pc, #84]	; (8011cdc <HAL_GPIO_Init+0x1b4>)
 8011c86:	42a8      	cmp	r0, r5
 8011c88:	d007      	beq.n	8011c9a <HAL_GPIO_Init+0x172>
 8011c8a:	4d15      	ldr	r5, [pc, #84]	; (8011ce0 <HAL_GPIO_Init+0x1b8>)
 8011c8c:	42a8      	cmp	r0, r5
 8011c8e:	d006      	beq.n	8011c9e <HAL_GPIO_Init+0x176>
 8011c90:	4d14      	ldr	r5, [pc, #80]	; (8011ce4 <HAL_GPIO_Init+0x1bc>)
 8011c92:	42a8      	cmp	r0, r5
 8011c94:	d005      	beq.n	8011ca2 <HAL_GPIO_Init+0x17a>
 8011c96:	464d      	mov	r5, r9
 8011c98:	e772      	b.n	8011b80 <HAL_GPIO_Init+0x58>
 8011c9a:	0035      	movs	r5, r6
 8011c9c:	e770      	b.n	8011b80 <HAL_GPIO_Init+0x58>
 8011c9e:	2502      	movs	r5, #2
 8011ca0:	e76e      	b.n	8011b80 <HAL_GPIO_Init+0x58>
 8011ca2:	4665      	mov	r5, ip
 8011ca4:	e76c      	b.n	8011b80 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011ca6:	9a01      	ldr	r2, [sp, #4]
 8011ca8:	4314      	orrs	r4, r2
 8011caa:	e776      	b.n	8011b9a <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011cac:	9a01      	ldr	r2, [sp, #4]
 8011cae:	4314      	orrs	r4, r2
 8011cb0:	e77b      	b.n	8011baa <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011cb2:	9a01      	ldr	r2, [sp, #4]
 8011cb4:	4314      	orrs	r4, r2
 8011cb6:	e77f      	b.n	8011bb8 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011cb8:	9a01      	ldr	r2, [sp, #4]
 8011cba:	4322      	orrs	r2, r4
 8011cbc:	e784      	b.n	8011bc8 <HAL_GPIO_Init+0xa0>
  } 
}
 8011cbe:	b005      	add	sp, #20
 8011cc0:	bc3c      	pop	{r2, r3, r4, r5}
 8011cc2:	4690      	mov	r8, r2
 8011cc4:	4699      	mov	r9, r3
 8011cc6:	46a2      	mov	sl, r4
 8011cc8:	46ab      	mov	fp, r5
 8011cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ccc:	b7fff000 	.word	0xb7fff000
 8011cd0:	40010400 	.word	0x40010400
 8011cd4:	40021000 	.word	0x40021000
 8011cd8:	40010000 	.word	0x40010000
 8011cdc:	48000400 	.word	0x48000400
 8011ce0:	48000800 	.word	0x48000800
 8011ce4:	48000c00 	.word	0x48000c00

08011ce8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cea:	46de      	mov	lr, fp
 8011cec:	4657      	mov	r7, sl
 8011cee:	464e      	mov	r6, r9
 8011cf0:	4645      	mov	r5, r8
 8011cf2:	b5e0      	push	{r5, r6, r7, lr}
 8011cf4:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011cf6:	2900      	cmp	r1, #0
 8011cf8:	d071      	beq.n	8011dde <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8011cfa:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011d00:	3202      	adds	r2, #2
 8011d02:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011d04:	3204      	adds	r2, #4
 8011d06:	4693      	mov	fp, r2
 8011d08:	3208      	adds	r2, #8
 8011d0a:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011d0c:	4a37      	ldr	r2, [pc, #220]	; (8011dec <HAL_GPIO_DeInit+0x104>)
 8011d0e:	1882      	adds	r2, r0, r2
 8011d10:	1e54      	subs	r4, r2, #1
 8011d12:	41a2      	sbcs	r2, r4
 8011d14:	3204      	adds	r2, #4
 8011d16:	9201      	str	r2, [sp, #4]
 8011d18:	9100      	str	r1, [sp, #0]
 8011d1a:	e009      	b.n	8011d30 <HAL_GPIO_DeInit+0x48>
 8011d1c:	2100      	movs	r1, #0
 8011d1e:	4689      	mov	r9, r1
 8011d20:	4649      	mov	r1, r9
 8011d22:	40a9      	lsls	r1, r5
 8011d24:	42b1      	cmp	r1, r6
 8011d26:	d048      	beq.n	8011dba <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011d28:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011d2a:	9a00      	ldr	r2, [sp, #0]
 8011d2c:	40da      	lsrs	r2, r3
 8011d2e:	d056      	beq.n	8011dde <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011d30:	4662      	mov	r2, ip
 8011d32:	409a      	lsls	r2, r3
 8011d34:	9900      	ldr	r1, [sp, #0]
 8011d36:	400a      	ands	r2, r1
    if (iocurrent)
 8011d38:	d0f6      	beq.n	8011d28 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011d3a:	6804      	ldr	r4, [r0, #0]
 8011d3c:	005d      	lsls	r5, r3, #1
 8011d3e:	4646      	mov	r6, r8
 8011d40:	40ae      	lsls	r6, r5
 8011d42:	43f5      	mvns	r5, r6
 8011d44:	402c      	ands	r4, r5
 8011d46:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011d48:	08dc      	lsrs	r4, r3, #3
 8011d4a:	00a4      	lsls	r4, r4, #2
 8011d4c:	1904      	adds	r4, r0, r4
 8011d4e:	6a26      	ldr	r6, [r4, #32]
 8011d50:	465f      	mov	r7, fp
 8011d52:	401f      	ands	r7, r3
 8011d54:	00bf      	lsls	r7, r7, #2
 8011d56:	4651      	mov	r1, sl
 8011d58:	40b9      	lsls	r1, r7
 8011d5a:	438e      	bics	r6, r1
 8011d5c:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011d5e:	6884      	ldr	r4, [r0, #8]
 8011d60:	402c      	ands	r4, r5
 8011d62:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011d64:	6844      	ldr	r4, [r0, #4]
 8011d66:	4666      	mov	r6, ip
 8011d68:	409e      	lsls	r6, r3
 8011d6a:	43b4      	bics	r4, r6
 8011d6c:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011d6e:	68c4      	ldr	r4, [r0, #12]
 8011d70:	4025      	ands	r5, r4
 8011d72:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011d74:	089c      	lsrs	r4, r3, #2
 8011d76:	00a4      	lsls	r4, r4, #2
 8011d78:	491d      	ldr	r1, [pc, #116]	; (8011df0 <HAL_GPIO_DeInit+0x108>)
 8011d7a:	4689      	mov	r9, r1
 8011d7c:	444c      	add	r4, r9
 8011d7e:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011d80:	4645      	mov	r5, r8
 8011d82:	401d      	ands	r5, r3
 8011d84:	00ad      	lsls	r5, r5, #2
 8011d86:	4657      	mov	r7, sl
 8011d88:	40af      	lsls	r7, r5
 8011d8a:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011d8c:	2190      	movs	r1, #144	; 0x90
 8011d8e:	05c9      	lsls	r1, r1, #23
 8011d90:	4288      	cmp	r0, r1
 8011d92:	d0c3      	beq.n	8011d1c <HAL_GPIO_DeInit+0x34>
 8011d94:	4917      	ldr	r1, [pc, #92]	; (8011df4 <HAL_GPIO_DeInit+0x10c>)
 8011d96:	4288      	cmp	r0, r1
 8011d98:	d008      	beq.n	8011dac <HAL_GPIO_DeInit+0xc4>
 8011d9a:	4917      	ldr	r1, [pc, #92]	; (8011df8 <HAL_GPIO_DeInit+0x110>)
 8011d9c:	4288      	cmp	r0, r1
 8011d9e:	d007      	beq.n	8011db0 <HAL_GPIO_DeInit+0xc8>
 8011da0:	4916      	ldr	r1, [pc, #88]	; (8011dfc <HAL_GPIO_DeInit+0x114>)
 8011da2:	4288      	cmp	r0, r1
 8011da4:	d007      	beq.n	8011db6 <HAL_GPIO_DeInit+0xce>
 8011da6:	9901      	ldr	r1, [sp, #4]
 8011da8:	4689      	mov	r9, r1
 8011daa:	e7b9      	b.n	8011d20 <HAL_GPIO_DeInit+0x38>
 8011dac:	46e1      	mov	r9, ip
 8011dae:	e7b7      	b.n	8011d20 <HAL_GPIO_DeInit+0x38>
 8011db0:	2102      	movs	r1, #2
 8011db2:	4689      	mov	r9, r1
 8011db4:	e7b4      	b.n	8011d20 <HAL_GPIO_DeInit+0x38>
 8011db6:	46c1      	mov	r9, r8
 8011db8:	e7b2      	b.n	8011d20 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011dba:	68a5      	ldr	r5, [r4, #8]
 8011dbc:	43bd      	bics	r5, r7
 8011dbe:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011dc0:	4c0f      	ldr	r4, [pc, #60]	; (8011e00 <HAL_GPIO_DeInit+0x118>)
 8011dc2:	6825      	ldr	r5, [r4, #0]
 8011dc4:	43d2      	mvns	r2, r2
 8011dc6:	4015      	ands	r5, r2
 8011dc8:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011dca:	6865      	ldr	r5, [r4, #4]
 8011dcc:	4015      	ands	r5, r2
 8011dce:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011dd0:	68a5      	ldr	r5, [r4, #8]
 8011dd2:	4015      	ands	r5, r2
 8011dd4:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011dd6:	68e5      	ldr	r5, [r4, #12]
 8011dd8:	402a      	ands	r2, r5
 8011dda:	60e2      	str	r2, [r4, #12]
 8011ddc:	e7a4      	b.n	8011d28 <HAL_GPIO_DeInit+0x40>
  }
}
 8011dde:	b003      	add	sp, #12
 8011de0:	bc3c      	pop	{r2, r3, r4, r5}
 8011de2:	4690      	mov	r8, r2
 8011de4:	4699      	mov	r9, r3
 8011de6:	46a2      	mov	sl, r4
 8011de8:	46ab      	mov	fp, r5
 8011dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dec:	b7fff000 	.word	0xb7fff000
 8011df0:	40010000 	.word	0x40010000
 8011df4:	48000400 	.word	0x48000400
 8011df8:	48000800 	.word	0x48000800
 8011dfc:	48000c00 	.word	0x48000c00
 8011e00:	40010400 	.word	0x40010400

08011e04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011e04:	6900      	ldr	r0, [r0, #16]
 8011e06:	4008      	ands	r0, r1
 8011e08:	1e41      	subs	r1, r0, #1
 8011e0a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011e0c:	b2c0      	uxtb	r0, r0
  }
 8011e0e:	4770      	bx	lr

08011e10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011e10:	2a00      	cmp	r2, #0
 8011e12:	d101      	bne.n	8011e18 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011e14:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011e16:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011e18:	6181      	str	r1, [r0, #24]
 8011e1a:	e7fc      	b.n	8011e16 <HAL_GPIO_WritePin+0x6>

08011e1c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011e1c:	6943      	ldr	r3, [r0, #20]
 8011e1e:	4059      	eors	r1, r3
 8011e20:	6141      	str	r1, [r0, #20]
}
 8011e22:	4770      	bx	lr

08011e24 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011e24:	4770      	bx	lr
	...

08011e28 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011e28:	4a03      	ldr	r2, [pc, #12]	; (8011e38 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011e2a:	6811      	ldr	r1, [r2, #0]
 8011e2c:	2380      	movs	r3, #128	; 0x80
 8011e2e:	005b      	lsls	r3, r3, #1
 8011e30:	430b      	orrs	r3, r1
 8011e32:	6013      	str	r3, [r2, #0]
}
 8011e34:	4770      	bx	lr
 8011e36:	46c0      	nop			; (mov r8, r8)
 8011e38:	40007000 	.word	0x40007000

08011e3c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e3e:	46c6      	mov	lr, r8
 8011e40:	b500      	push	{lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011e46:	6803      	ldr	r3, [r0, #0]
 8011e48:	07db      	lsls	r3, r3, #31
 8011e4a:	d538      	bpl.n	8011ebe <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011e4c:	4bbd      	ldr	r3, [pc, #756]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011e4e:	685a      	ldr	r2, [r3, #4]
 8011e50:	230c      	movs	r3, #12
 8011e52:	4013      	ands	r3, r2
 8011e54:	2b04      	cmp	r3, #4
 8011e56:	d02a      	beq.n	8011eae <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011e58:	4bba      	ldr	r3, [pc, #744]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011e5a:	685a      	ldr	r2, [r3, #4]
 8011e5c:	230c      	movs	r3, #12
 8011e5e:	4013      	ands	r3, r2
 8011e60:	2b08      	cmp	r3, #8
 8011e62:	d108      	bne.n	8011e76 <HAL_RCC_OscConfig+0x3a>
 8011e64:	4bb7      	ldr	r3, [pc, #732]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	22c0      	movs	r2, #192	; 0xc0
 8011e6a:	0252      	lsls	r2, r2, #9
 8011e6c:	4013      	ands	r3, r2
 8011e6e:	2280      	movs	r2, #128	; 0x80
 8011e70:	0252      	lsls	r2, r2, #9
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d01b      	beq.n	8011eae <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011e76:	4bb3      	ldr	r3, [pc, #716]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	49b3      	ldr	r1, [pc, #716]	; (8012148 <HAL_RCC_OscConfig+0x30c>)
 8011e7c:	400a      	ands	r2, r1
 8011e7e:	601a      	str	r2, [r3, #0]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	49b2      	ldr	r1, [pc, #712]	; (801214c <HAL_RCC_OscConfig+0x310>)
 8011e84:	400a      	ands	r2, r1
 8011e86:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011e88:	f7fe fa76 	bl	8010378 <HAL_GetTick>
 8011e8c:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011e8e:	4ead      	ldr	r6, [pc, #692]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011e90:	2580      	movs	r5, #128	; 0x80
 8011e92:	02ad      	lsls	r5, r5, #10
 8011e94:	6833      	ldr	r3, [r6, #0]
 8011e96:	422b      	tst	r3, r5
 8011e98:	d039      	beq.n	8011f0e <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011e9a:	f7fe fa6d 	bl	8010378 <HAL_GetTick>
 8011e9e:	1bc0      	subs	r0, r0, r7
 8011ea0:	2864      	cmp	r0, #100	; 0x64
 8011ea2:	d9f7      	bls.n	8011e94 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011ea4:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011ea6:	b002      	add	sp, #8
 8011ea8:	bc04      	pop	{r2}
 8011eaa:	4690      	mov	r8, r2
 8011eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011eae:	4ba5      	ldr	r3, [pc, #660]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	039b      	lsls	r3, r3, #14
 8011eb4:	d503      	bpl.n	8011ebe <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8011eb6:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011eb8:	6863      	ldr	r3, [r4, #4]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d0f3      	beq.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011ebe:	6823      	ldr	r3, [r4, #0]
 8011ec0:	079b      	lsls	r3, r3, #30
 8011ec2:	d400      	bmi.n	8011ec6 <HAL_RCC_OscConfig+0x8a>
 8011ec4:	e08d      	b.n	8011fe2 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011ec6:	4b9f      	ldr	r3, [pc, #636]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	220c      	movs	r2, #12
 8011ecc:	421a      	tst	r2, r3
 8011ece:	d077      	beq.n	8011fc0 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011ed0:	4b9c      	ldr	r3, [pc, #624]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011ed2:	685a      	ldr	r2, [r3, #4]
 8011ed4:	230c      	movs	r3, #12
 8011ed6:	4013      	ands	r3, r2
 8011ed8:	2b08      	cmp	r3, #8
 8011eda:	d068      	beq.n	8011fae <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011edc:	68e3      	ldr	r3, [r4, #12]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d100      	bne.n	8011ee4 <HAL_RCC_OscConfig+0xa8>
 8011ee2:	e0a1      	b.n	8012028 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011ee4:	4a97      	ldr	r2, [pc, #604]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011ee6:	6813      	ldr	r3, [r2, #0]
 8011ee8:	2101      	movs	r1, #1
 8011eea:	430b      	orrs	r3, r1
 8011eec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011eee:	f7fe fa43 	bl	8010378 <HAL_GetTick>
 8011ef2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011ef4:	4e93      	ldr	r6, [pc, #588]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011ef6:	2502      	movs	r5, #2
 8011ef8:	6833      	ldr	r3, [r6, #0]
 8011efa:	421d      	tst	r5, r3
 8011efc:	d000      	beq.n	8011f00 <HAL_RCC_OscConfig+0xc4>
 8011efe:	e08a      	b.n	8012016 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011f00:	f7fe fa3a 	bl	8010378 <HAL_GetTick>
 8011f04:	1bc0      	subs	r0, r0, r7
 8011f06:	2864      	cmp	r0, #100	; 0x64
 8011f08:	d9f6      	bls.n	8011ef8 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8011f0a:	2003      	movs	r0, #3
 8011f0c:	e7cb      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011f0e:	6863      	ldr	r3, [r4, #4]
 8011f10:	2b01      	cmp	r3, #1
 8011f12:	d00b      	beq.n	8011f2c <HAL_RCC_OscConfig+0xf0>
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d122      	bne.n	8011f5e <HAL_RCC_OscConfig+0x122>
 8011f18:	4b8a      	ldr	r3, [pc, #552]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011f1a:	681a      	ldr	r2, [r3, #0]
 8011f1c:	498a      	ldr	r1, [pc, #552]	; (8012148 <HAL_RCC_OscConfig+0x30c>)
 8011f1e:	400a      	ands	r2, r1
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	4989      	ldr	r1, [pc, #548]	; (801214c <HAL_RCC_OscConfig+0x310>)
 8011f26:	400a      	ands	r2, r1
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	e005      	b.n	8011f38 <HAL_RCC_OscConfig+0xfc>
 8011f2c:	4a85      	ldr	r2, [pc, #532]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011f2e:	6811      	ldr	r1, [r2, #0]
 8011f30:	2380      	movs	r3, #128	; 0x80
 8011f32:	025b      	lsls	r3, r3, #9
 8011f34:	430b      	orrs	r3, r1
 8011f36:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011f38:	6863      	ldr	r3, [r4, #4]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d027      	beq.n	8011f8e <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011f3e:	f7fe fa1b 	bl	8010378 <HAL_GetTick>
 8011f42:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011f44:	4e7f      	ldr	r6, [pc, #508]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011f46:	2580      	movs	r5, #128	; 0x80
 8011f48:	02ad      	lsls	r5, r5, #10
 8011f4a:	6833      	ldr	r3, [r6, #0]
 8011f4c:	422b      	tst	r3, r5
 8011f4e:	d1b6      	bne.n	8011ebe <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011f50:	f7fe fa12 	bl	8010378 <HAL_GetTick>
 8011f54:	1bc0      	subs	r0, r0, r7
 8011f56:	2864      	cmp	r0, #100	; 0x64
 8011f58:	d9f7      	bls.n	8011f4a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8011f5a:	2003      	movs	r0, #3
 8011f5c:	e7a3      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011f5e:	2b05      	cmp	r3, #5
 8011f60:	d009      	beq.n	8011f76 <HAL_RCC_OscConfig+0x13a>
 8011f62:	4b78      	ldr	r3, [pc, #480]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	4978      	ldr	r1, [pc, #480]	; (8012148 <HAL_RCC_OscConfig+0x30c>)
 8011f68:	400a      	ands	r2, r1
 8011f6a:	601a      	str	r2, [r3, #0]
 8011f6c:	681a      	ldr	r2, [r3, #0]
 8011f6e:	4977      	ldr	r1, [pc, #476]	; (801214c <HAL_RCC_OscConfig+0x310>)
 8011f70:	400a      	ands	r2, r1
 8011f72:	601a      	str	r2, [r3, #0]
 8011f74:	e7e0      	b.n	8011f38 <HAL_RCC_OscConfig+0xfc>
 8011f76:	4b73      	ldr	r3, [pc, #460]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011f78:	6819      	ldr	r1, [r3, #0]
 8011f7a:	2280      	movs	r2, #128	; 0x80
 8011f7c:	02d2      	lsls	r2, r2, #11
 8011f7e:	430a      	orrs	r2, r1
 8011f80:	601a      	str	r2, [r3, #0]
 8011f82:	6819      	ldr	r1, [r3, #0]
 8011f84:	2280      	movs	r2, #128	; 0x80
 8011f86:	0252      	lsls	r2, r2, #9
 8011f88:	430a      	orrs	r2, r1
 8011f8a:	601a      	str	r2, [r3, #0]
 8011f8c:	e7d4      	b.n	8011f38 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8011f8e:	f7fe f9f3 	bl	8010378 <HAL_GetTick>
 8011f92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011f94:	4e6b      	ldr	r6, [pc, #428]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011f96:	2580      	movs	r5, #128	; 0x80
 8011f98:	02ad      	lsls	r5, r5, #10
 8011f9a:	6833      	ldr	r3, [r6, #0]
 8011f9c:	422b      	tst	r3, r5
 8011f9e:	d08e      	beq.n	8011ebe <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011fa0:	f7fe f9ea 	bl	8010378 <HAL_GetTick>
 8011fa4:	1bc0      	subs	r0, r0, r7
 8011fa6:	2864      	cmp	r0, #100	; 0x64
 8011fa8:	d9f7      	bls.n	8011f9a <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8011faa:	2003      	movs	r0, #3
 8011fac:	e77b      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011fae:	4b65      	ldr	r3, [pc, #404]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	22c0      	movs	r2, #192	; 0xc0
 8011fb4:	0252      	lsls	r2, r2, #9
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	2280      	movs	r2, #128	; 0x80
 8011fba:	0212      	lsls	r2, r2, #8
 8011fbc:	4293      	cmp	r3, r2
 8011fbe:	d18d      	bne.n	8011edc <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011fc0:	4b60      	ldr	r3, [pc, #384]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	079b      	lsls	r3, r3, #30
 8011fc6:	d504      	bpl.n	8011fd2 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011fc8:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011fca:	68e3      	ldr	r3, [r4, #12]
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d000      	beq.n	8011fd2 <HAL_RCC_OscConfig+0x196>
 8011fd0:	e769      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011fd2:	495c      	ldr	r1, [pc, #368]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011fd4:	680a      	ldr	r2, [r1, #0]
 8011fd6:	6923      	ldr	r3, [r4, #16]
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	20f8      	movs	r0, #248	; 0xf8
 8011fdc:	4382      	bics	r2, r0
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011fe2:	6823      	ldr	r3, [r4, #0]
 8011fe4:	071b      	lsls	r3, r3, #28
 8011fe6:	d547      	bpl.n	8012078 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011fe8:	6a23      	ldr	r3, [r4, #32]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d030      	beq.n	8012050 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011fee:	4a55      	ldr	r2, [pc, #340]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8011ff0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	430b      	orrs	r3, r1
 8011ff6:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011ff8:	f7fe f9be 	bl	8010378 <HAL_GetTick>
 8011ffc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011ffe:	4e51      	ldr	r6, [pc, #324]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8012000:	2502      	movs	r5, #2
 8012002:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012004:	421d      	tst	r5, r3
 8012006:	d137      	bne.n	8012078 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012008:	f7fe f9b6 	bl	8010378 <HAL_GetTick>
 801200c:	1bc0      	subs	r0, r0, r7
 801200e:	2864      	cmp	r0, #100	; 0x64
 8012010:	d9f7      	bls.n	8012002 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012012:	2003      	movs	r0, #3
 8012014:	e747      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012016:	494b      	ldr	r1, [pc, #300]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8012018:	680a      	ldr	r2, [r1, #0]
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	20f8      	movs	r0, #248	; 0xf8
 8012020:	4382      	bics	r2, r0
 8012022:	4313      	orrs	r3, r2
 8012024:	600b      	str	r3, [r1, #0]
 8012026:	e7dc      	b.n	8011fe2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012028:	4a46      	ldr	r2, [pc, #280]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 801202a:	6813      	ldr	r3, [r2, #0]
 801202c:	2101      	movs	r1, #1
 801202e:	438b      	bics	r3, r1
 8012030:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012032:	f7fe f9a1 	bl	8010378 <HAL_GetTick>
 8012036:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012038:	4e42      	ldr	r6, [pc, #264]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 801203a:	2502      	movs	r5, #2
 801203c:	6833      	ldr	r3, [r6, #0]
 801203e:	421d      	tst	r5, r3
 8012040:	d0cf      	beq.n	8011fe2 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012042:	f7fe f999 	bl	8010378 <HAL_GetTick>
 8012046:	1bc0      	subs	r0, r0, r7
 8012048:	2864      	cmp	r0, #100	; 0x64
 801204a:	d9f7      	bls.n	801203c <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 801204c:	2003      	movs	r0, #3
 801204e:	e72a      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8012050:	4a3c      	ldr	r2, [pc, #240]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8012052:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012054:	2101      	movs	r1, #1
 8012056:	438b      	bics	r3, r1
 8012058:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801205a:	f7fe f98d 	bl	8010378 <HAL_GetTick>
 801205e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012060:	4e38      	ldr	r6, [pc, #224]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8012062:	2502      	movs	r5, #2
 8012064:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012066:	421d      	tst	r5, r3
 8012068:	d006      	beq.n	8012078 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801206a:	f7fe f985 	bl	8010378 <HAL_GetTick>
 801206e:	1bc0      	subs	r0, r0, r7
 8012070:	2864      	cmp	r0, #100	; 0x64
 8012072:	d9f7      	bls.n	8012064 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8012074:	2003      	movs	r0, #3
 8012076:	e716      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012078:	6823      	ldr	r3, [r4, #0]
 801207a:	075b      	lsls	r3, r3, #29
 801207c:	d442      	bmi.n	8012104 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 801207e:	6823      	ldr	r3, [r4, #0]
 8012080:	06db      	lsls	r3, r3, #27
 8012082:	d512      	bpl.n	80120aa <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012084:	6963      	ldr	r3, [r4, #20]
 8012086:	2b01      	cmp	r3, #1
 8012088:	d100      	bne.n	801208c <HAL_RCC_OscConfig+0x250>
 801208a:	e0ce      	b.n	801222a <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 801208c:	3305      	adds	r3, #5
 801208e:	d000      	beq.n	8012092 <HAL_RCC_OscConfig+0x256>
 8012090:	e0ec      	b.n	801226c <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8012092:	4a2c      	ldr	r2, [pc, #176]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8012094:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012096:	2104      	movs	r1, #4
 8012098:	438b      	bics	r3, r1
 801209a:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801209c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801209e:	69a3      	ldr	r3, [r4, #24]
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	20f8      	movs	r0, #248	; 0xf8
 80120a4:	4381      	bics	r1, r0
 80120a6:	430b      	orrs	r3, r1
 80120a8:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	069b      	lsls	r3, r3, #26
 80120ae:	d400      	bmi.n	80120b2 <HAL_RCC_OscConfig+0x276>
 80120b0:	e106      	b.n	80122c0 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80120b2:	4b24      	ldr	r3, [pc, #144]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 80120b4:	685a      	ldr	r2, [r3, #4]
 80120b6:	230c      	movs	r3, #12
 80120b8:	4013      	ands	r3, r2
 80120ba:	2b0c      	cmp	r3, #12
 80120bc:	d100      	bne.n	80120c0 <HAL_RCC_OscConfig+0x284>
 80120be:	e0f6      	b.n	80122ae <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80120c0:	4b20      	ldr	r3, [pc, #128]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 80120c2:	685a      	ldr	r2, [r3, #4]
 80120c4:	230c      	movs	r3, #12
 80120c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80120c8:	2b08      	cmp	r3, #8
 80120ca:	d100      	bne.n	80120ce <HAL_RCC_OscConfig+0x292>
 80120cc:	e0e7      	b.n	801229e <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80120ce:	69e3      	ldr	r3, [r4, #28]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d100      	bne.n	80120d6 <HAL_RCC_OscConfig+0x29a>
 80120d4:	e116      	b.n	8012304 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 80120d6:	4a1b      	ldr	r2, [pc, #108]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 80120d8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80120da:	2380      	movs	r3, #128	; 0x80
 80120dc:	025b      	lsls	r3, r3, #9
 80120de:	430b      	orrs	r3, r1
 80120e0:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 80120e2:	f7fe f949 	bl	8010378 <HAL_GetTick>
 80120e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80120e8:	4e16      	ldr	r6, [pc, #88]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 80120ea:	2580      	movs	r5, #128	; 0x80
 80120ec:	026d      	lsls	r5, r5, #9
 80120ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80120f0:	422b      	tst	r3, r5
 80120f2:	d000      	beq.n	80120f6 <HAL_RCC_OscConfig+0x2ba>
 80120f4:	e0e4      	b.n	80122c0 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80120f6:	f7fe f93f 	bl	8010378 <HAL_GetTick>
 80120fa:	1bc0      	subs	r0, r0, r7
 80120fc:	2864      	cmp	r0, #100	; 0x64
 80120fe:	d9f6      	bls.n	80120ee <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012100:	2003      	movs	r0, #3
 8012102:	e6d0      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012104:	4a0f      	ldr	r2, [pc, #60]	; (8012144 <HAL_RCC_OscConfig+0x308>)
 8012106:	69d1      	ldr	r1, [r2, #28]
 8012108:	2080      	movs	r0, #128	; 0x80
 801210a:	0540      	lsls	r0, r0, #21
 801210c:	4301      	orrs	r1, r0
 801210e:	61d1      	str	r1, [r2, #28]
 8012110:	69d3      	ldr	r3, [r2, #28]
 8012112:	4003      	ands	r3, r0
 8012114:	9301      	str	r3, [sp, #4]
 8012116:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012118:	4a0d      	ldr	r2, [pc, #52]	; (8012150 <HAL_RCC_OscConfig+0x314>)
 801211a:	6811      	ldr	r1, [r2, #0]
 801211c:	2380      	movs	r3, #128	; 0x80
 801211e:	005b      	lsls	r3, r3, #1
 8012120:	430b      	orrs	r3, r1
 8012122:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012124:	f7fe f928 	bl	8010378 <HAL_GetTick>
 8012128:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801212a:	4e09      	ldr	r6, [pc, #36]	; (8012150 <HAL_RCC_OscConfig+0x314>)
 801212c:	2580      	movs	r5, #128	; 0x80
 801212e:	006d      	lsls	r5, r5, #1
 8012130:	6833      	ldr	r3, [r6, #0]
 8012132:	422b      	tst	r3, r5
 8012134:	d10e      	bne.n	8012154 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012136:	f7fe f91f 	bl	8010378 <HAL_GetTick>
 801213a:	1bc0      	subs	r0, r0, r7
 801213c:	2864      	cmp	r0, #100	; 0x64
 801213e:	d9f7      	bls.n	8012130 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012140:	2003      	movs	r0, #3
 8012142:	e6b0      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
 8012144:	40021000 	.word	0x40021000
 8012148:	fffeffff 	.word	0xfffeffff
 801214c:	fffbffff 	.word	0xfffbffff
 8012150:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012154:	4b95      	ldr	r3, [pc, #596]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012156:	6a1a      	ldr	r2, [r3, #32]
 8012158:	2101      	movs	r1, #1
 801215a:	438a      	bics	r2, r1
 801215c:	621a      	str	r2, [r3, #32]
 801215e:	6a1a      	ldr	r2, [r3, #32]
 8012160:	3103      	adds	r1, #3
 8012162:	438a      	bics	r2, r1
 8012164:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8012166:	f7fe f907 	bl	8010378 <HAL_GetTick>
 801216a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801216c:	4e8f      	ldr	r6, [pc, #572]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 801216e:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012170:	4f8f      	ldr	r7, [pc, #572]	; (80123b0 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012172:	6a33      	ldr	r3, [r6, #32]
 8012174:	421d      	tst	r5, r3
 8012176:	d007      	beq.n	8012188 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012178:	f7fe f8fe 	bl	8010378 <HAL_GetTick>
 801217c:	4643      	mov	r3, r8
 801217e:	1ac0      	subs	r0, r0, r3
 8012180:	42b8      	cmp	r0, r7
 8012182:	d9f6      	bls.n	8012172 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8012184:	2003      	movs	r0, #3
 8012186:	e68e      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012188:	68a3      	ldr	r3, [r4, #8]
 801218a:	2b01      	cmp	r3, #1
 801218c:	d00b      	beq.n	80121a6 <HAL_RCC_OscConfig+0x36a>
 801218e:	2b00      	cmp	r3, #0
 8012190:	d123      	bne.n	80121da <HAL_RCC_OscConfig+0x39e>
 8012192:	4b86      	ldr	r3, [pc, #536]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012194:	6a1a      	ldr	r2, [r3, #32]
 8012196:	2101      	movs	r1, #1
 8012198:	438a      	bics	r2, r1
 801219a:	621a      	str	r2, [r3, #32]
 801219c:	6a1a      	ldr	r2, [r3, #32]
 801219e:	3103      	adds	r1, #3
 80121a0:	438a      	bics	r2, r1
 80121a2:	621a      	str	r2, [r3, #32]
 80121a4:	e004      	b.n	80121b0 <HAL_RCC_OscConfig+0x374>
 80121a6:	4a81      	ldr	r2, [pc, #516]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80121a8:	6a13      	ldr	r3, [r2, #32]
 80121aa:	2101      	movs	r1, #1
 80121ac:	430b      	orrs	r3, r1
 80121ae:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80121b0:	68a3      	ldr	r3, [r4, #8]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d027      	beq.n	8012206 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80121b6:	f7fe f8df 	bl	8010378 <HAL_GetTick>
 80121ba:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80121bc:	4e7b      	ldr	r6, [pc, #492]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80121be:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80121c0:	4f7b      	ldr	r7, [pc, #492]	; (80123b0 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80121c2:	6a33      	ldr	r3, [r6, #32]
 80121c4:	421d      	tst	r5, r3
 80121c6:	d000      	beq.n	80121ca <HAL_RCC_OscConfig+0x38e>
 80121c8:	e759      	b.n	801207e <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80121ca:	f7fe f8d5 	bl	8010378 <HAL_GetTick>
 80121ce:	4643      	mov	r3, r8
 80121d0:	1ac0      	subs	r0, r0, r3
 80121d2:	42b8      	cmp	r0, r7
 80121d4:	d9f5      	bls.n	80121c2 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 80121d6:	2003      	movs	r0, #3
 80121d8:	e665      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80121da:	2b05      	cmp	r3, #5
 80121dc:	d009      	beq.n	80121f2 <HAL_RCC_OscConfig+0x3b6>
 80121de:	4b73      	ldr	r3, [pc, #460]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80121e0:	6a1a      	ldr	r2, [r3, #32]
 80121e2:	2101      	movs	r1, #1
 80121e4:	438a      	bics	r2, r1
 80121e6:	621a      	str	r2, [r3, #32]
 80121e8:	6a1a      	ldr	r2, [r3, #32]
 80121ea:	3103      	adds	r1, #3
 80121ec:	438a      	bics	r2, r1
 80121ee:	621a      	str	r2, [r3, #32]
 80121f0:	e7de      	b.n	80121b0 <HAL_RCC_OscConfig+0x374>
 80121f2:	4b6e      	ldr	r3, [pc, #440]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80121f4:	6a1a      	ldr	r2, [r3, #32]
 80121f6:	2104      	movs	r1, #4
 80121f8:	430a      	orrs	r2, r1
 80121fa:	621a      	str	r2, [r3, #32]
 80121fc:	6a1a      	ldr	r2, [r3, #32]
 80121fe:	3903      	subs	r1, #3
 8012200:	430a      	orrs	r2, r1
 8012202:	621a      	str	r2, [r3, #32]
 8012204:	e7d4      	b.n	80121b0 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012206:	f7fe f8b7 	bl	8010378 <HAL_GetTick>
 801220a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801220c:	4e67      	ldr	r6, [pc, #412]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 801220e:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012210:	4f67      	ldr	r7, [pc, #412]	; (80123b0 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012212:	6a33      	ldr	r3, [r6, #32]
 8012214:	421d      	tst	r5, r3
 8012216:	d100      	bne.n	801221a <HAL_RCC_OscConfig+0x3de>
 8012218:	e731      	b.n	801207e <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801221a:	f7fe f8ad 	bl	8010378 <HAL_GetTick>
 801221e:	4643      	mov	r3, r8
 8012220:	1ac0      	subs	r0, r0, r3
 8012222:	42b8      	cmp	r0, r7
 8012224:	d9f5      	bls.n	8012212 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012226:	2003      	movs	r0, #3
 8012228:	e63d      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801222a:	4b60      	ldr	r3, [pc, #384]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 801222c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801222e:	2104      	movs	r1, #4
 8012230:	430a      	orrs	r2, r1
 8012232:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012236:	3903      	subs	r1, #3
 8012238:	430a      	orrs	r2, r1
 801223a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801223c:	f7fe f89c 	bl	8010378 <HAL_GetTick>
 8012240:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012242:	4e5a      	ldr	r6, [pc, #360]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012244:	2502      	movs	r5, #2
 8012246:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012248:	421d      	tst	r5, r3
 801224a:	d106      	bne.n	801225a <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801224c:	f7fe f894 	bl	8010378 <HAL_GetTick>
 8012250:	1bc0      	subs	r0, r0, r7
 8012252:	2864      	cmp	r0, #100	; 0x64
 8012254:	d9f7      	bls.n	8012246 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012256:	2003      	movs	r0, #3
 8012258:	e625      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801225a:	4954      	ldr	r1, [pc, #336]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 801225c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 801225e:	69a3      	ldr	r3, [r4, #24]
 8012260:	00db      	lsls	r3, r3, #3
 8012262:	20f8      	movs	r0, #248	; 0xf8
 8012264:	4382      	bics	r2, r0
 8012266:	4313      	orrs	r3, r2
 8012268:	634b      	str	r3, [r1, #52]	; 0x34
 801226a:	e71e      	b.n	80120aa <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 801226c:	4b4f      	ldr	r3, [pc, #316]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 801226e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012270:	2104      	movs	r1, #4
 8012272:	430a      	orrs	r2, r1
 8012274:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012278:	3903      	subs	r1, #3
 801227a:	438a      	bics	r2, r1
 801227c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801227e:	f7fe f87b 	bl	8010378 <HAL_GetTick>
 8012282:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012284:	4e49      	ldr	r6, [pc, #292]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012286:	2502      	movs	r5, #2
 8012288:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801228a:	421d      	tst	r5, r3
 801228c:	d100      	bne.n	8012290 <HAL_RCC_OscConfig+0x454>
 801228e:	e70c      	b.n	80120aa <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012290:	f7fe f872 	bl	8010378 <HAL_GetTick>
 8012294:	1bc0      	subs	r0, r0, r7
 8012296:	2864      	cmp	r0, #100	; 0x64
 8012298:	d9f6      	bls.n	8012288 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 801229a:	2003      	movs	r0, #3
 801229c:	e603      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801229e:	4b43      	ldr	r3, [pc, #268]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	22c0      	movs	r2, #192	; 0xc0
 80122a4:	0252      	lsls	r2, r2, #9
 80122a6:	4013      	ands	r3, r2
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d000      	beq.n	80122ae <HAL_RCC_OscConfig+0x472>
 80122ac:	e70f      	b.n	80120ce <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80122ae:	4b3f      	ldr	r3, [pc, #252]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80122b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122b2:	03db      	lsls	r3, r3, #15
 80122b4:	d504      	bpl.n	80122c0 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80122b6:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80122b8:	69e3      	ldr	r3, [r4, #28]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d000      	beq.n	80122c0 <HAL_RCC_OscConfig+0x484>
 80122be:	e5f2      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80122c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80122c2:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d100      	bne.n	80122ca <HAL_RCC_OscConfig+0x48e>
 80122c8:	e5ed      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80122ca:	4a38      	ldr	r2, [pc, #224]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80122cc:	6851      	ldr	r1, [r2, #4]
 80122ce:	220c      	movs	r2, #12
 80122d0:	400a      	ands	r2, r1
 80122d2:	2a08      	cmp	r2, #8
 80122d4:	d068      	beq.n	80123a8 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80122d6:	2b02      	cmp	r3, #2
 80122d8:	d029      	beq.n	801232e <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 80122da:	4a34      	ldr	r2, [pc, #208]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80122dc:	6813      	ldr	r3, [r2, #0]
 80122de:	4935      	ldr	r1, [pc, #212]	; (80123b4 <HAL_RCC_OscConfig+0x578>)
 80122e0:	400b      	ands	r3, r1
 80122e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80122e4:	f7fe f848 	bl	8010378 <HAL_GetTick>
 80122e8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80122ea:	4d30      	ldr	r5, [pc, #192]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 80122ec:	2480      	movs	r4, #128	; 0x80
 80122ee:	04a4      	lsls	r4, r4, #18
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	4223      	tst	r3, r4
 80122f4:	d056      	beq.n	80123a4 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80122f6:	f7fe f83f 	bl	8010378 <HAL_GetTick>
 80122fa:	1b80      	subs	r0, r0, r6
 80122fc:	2864      	cmp	r0, #100	; 0x64
 80122fe:	d9f7      	bls.n	80122f0 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012300:	2003      	movs	r0, #3
 8012302:	e5d0      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012304:	4a29      	ldr	r2, [pc, #164]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012306:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012308:	492b      	ldr	r1, [pc, #172]	; (80123b8 <HAL_RCC_OscConfig+0x57c>)
 801230a:	400b      	ands	r3, r1
 801230c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801230e:	f7fe f833 	bl	8010378 <HAL_GetTick>
 8012312:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012314:	4e25      	ldr	r6, [pc, #148]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012316:	2580      	movs	r5, #128	; 0x80
 8012318:	026d      	lsls	r5, r5, #9
 801231a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801231c:	422b      	tst	r3, r5
 801231e:	d0cf      	beq.n	80122c0 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012320:	f7fe f82a 	bl	8010378 <HAL_GetTick>
 8012324:	1bc0      	subs	r0, r0, r7
 8012326:	2864      	cmp	r0, #100	; 0x64
 8012328:	d9f7      	bls.n	801231a <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801232a:	2003      	movs	r0, #3
 801232c:	e5bb      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801232e:	4a1f      	ldr	r2, [pc, #124]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012330:	6813      	ldr	r3, [r2, #0]
 8012332:	4920      	ldr	r1, [pc, #128]	; (80123b4 <HAL_RCC_OscConfig+0x578>)
 8012334:	400b      	ands	r3, r1
 8012336:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012338:	f7fe f81e 	bl	8010378 <HAL_GetTick>
 801233c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801233e:	4e1b      	ldr	r6, [pc, #108]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012340:	2580      	movs	r5, #128	; 0x80
 8012342:	04ad      	lsls	r5, r5, #18
 8012344:	6833      	ldr	r3, [r6, #0]
 8012346:	422b      	tst	r3, r5
 8012348:	d006      	beq.n	8012358 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801234a:	f7fe f815 	bl	8010378 <HAL_GetTick>
 801234e:	1bc0      	subs	r0, r0, r7
 8012350:	2864      	cmp	r0, #100	; 0x64
 8012352:	d9f7      	bls.n	8012344 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012354:	2003      	movs	r0, #3
 8012356:	e5a6      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012358:	4b14      	ldr	r3, [pc, #80]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 801235a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801235c:	210f      	movs	r1, #15
 801235e:	438a      	bics	r2, r1
 8012360:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012362:	430a      	orrs	r2, r1
 8012364:	62da      	str	r2, [r3, #44]	; 0x2c
 8012366:	6859      	ldr	r1, [r3, #4]
 8012368:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801236a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801236c:	4302      	orrs	r2, r0
 801236e:	4813      	ldr	r0, [pc, #76]	; (80123bc <HAL_RCC_OscConfig+0x580>)
 8012370:	4001      	ands	r1, r0
 8012372:	430a      	orrs	r2, r1
 8012374:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012376:	6819      	ldr	r1, [r3, #0]
 8012378:	2280      	movs	r2, #128	; 0x80
 801237a:	0452      	lsls	r2, r2, #17
 801237c:	430a      	orrs	r2, r1
 801237e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012380:	f7fd fffa 	bl	8010378 <HAL_GetTick>
 8012384:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012386:	4d09      	ldr	r5, [pc, #36]	; (80123ac <HAL_RCC_OscConfig+0x570>)
 8012388:	2480      	movs	r4, #128	; 0x80
 801238a:	04a4      	lsls	r4, r4, #18
 801238c:	682b      	ldr	r3, [r5, #0]
 801238e:	4223      	tst	r3, r4
 8012390:	d106      	bne.n	80123a0 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012392:	f7fd fff1 	bl	8010378 <HAL_GetTick>
 8012396:	1b80      	subs	r0, r0, r6
 8012398:	2864      	cmp	r0, #100	; 0x64
 801239a:	d9f7      	bls.n	801238c <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 801239c:	2003      	movs	r0, #3
 801239e:	e582      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80123a0:	2000      	movs	r0, #0
 80123a2:	e580      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
 80123a4:	2000      	movs	r0, #0
 80123a6:	e57e      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80123a8:	2001      	movs	r0, #1
 80123aa:	e57c      	b.n	8011ea6 <HAL_RCC_OscConfig+0x6a>
 80123ac:	40021000 	.word	0x40021000
 80123b0:	00001388 	.word	0x00001388
 80123b4:	feffffff 	.word	0xfeffffff
 80123b8:	fffeffff 	.word	0xfffeffff
 80123bc:	ffc27fff 	.word	0xffc27fff

080123c0 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80123c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123c2:	46ce      	mov	lr, r9
 80123c4:	4647      	mov	r7, r8
 80123c6:	b580      	push	{r7, lr}
 80123c8:	0005      	movs	r5, r0
 80123ca:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80123cc:	4b95      	ldr	r3, [pc, #596]	; (8012624 <HAL_RCC_ClockConfig+0x264>)
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	2301      	movs	r3, #1
 80123d2:	4013      	ands	r3, r2
 80123d4:	428b      	cmp	r3, r1
 80123d6:	d300      	bcc.n	80123da <HAL_RCC_ClockConfig+0x1a>
 80123d8:	e089      	b.n	80124ee <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80123da:	4992      	ldr	r1, [pc, #584]	; (8012624 <HAL_RCC_ClockConfig+0x264>)
 80123dc:	680b      	ldr	r3, [r1, #0]
 80123de:	2201      	movs	r2, #1
 80123e0:	4393      	bics	r3, r2
 80123e2:	4323      	orrs	r3, r4
 80123e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80123e6:	680b      	ldr	r3, [r1, #0]
 80123e8:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 80123ea:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80123ec:	42a2      	cmp	r2, r4
 80123ee:	d003      	beq.n	80123f8 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80123f0:	bc0c      	pop	{r2, r3}
 80123f2:	4690      	mov	r8, r2
 80123f4:	4699      	mov	r9, r3
 80123f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80123f8:	682b      	ldr	r3, [r5, #0]
 80123fa:	079b      	lsls	r3, r3, #30
 80123fc:	d506      	bpl.n	801240c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80123fe:	4a8a      	ldr	r2, [pc, #552]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012400:	6853      	ldr	r3, [r2, #4]
 8012402:	21f0      	movs	r1, #240	; 0xf0
 8012404:	438b      	bics	r3, r1
 8012406:	68a9      	ldr	r1, [r5, #8]
 8012408:	430b      	orrs	r3, r1
 801240a:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801240c:	682b      	ldr	r3, [r5, #0]
 801240e:	07db      	lsls	r3, r3, #31
 8012410:	d400      	bmi.n	8012414 <HAL_RCC_ClockConfig+0x54>
 8012412:	e0f7      	b.n	8012604 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012414:	686b      	ldr	r3, [r5, #4]
 8012416:	2b01      	cmp	r3, #1
 8012418:	d009      	beq.n	801242e <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801241a:	2b02      	cmp	r3, #2
 801241c:	d02b      	beq.n	8012476 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801241e:	2b03      	cmp	r3, #3
 8012420:	d02f      	beq.n	8012482 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012422:	4a81      	ldr	r2, [pc, #516]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012424:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012426:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012428:	0792      	lsls	r2, r2, #30
 801242a:	d405      	bmi.n	8012438 <HAL_RCC_ClockConfig+0x78>
 801242c:	e7e0      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801242e:	4a7e      	ldr	r2, [pc, #504]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012430:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012432:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012434:	0392      	lsls	r2, r2, #14
 8012436:	d5db      	bpl.n	80123f0 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012438:	497b      	ldr	r1, [pc, #492]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 801243a:	684a      	ldr	r2, [r1, #4]
 801243c:	2003      	movs	r0, #3
 801243e:	4382      	bics	r2, r0
 8012440:	4313      	orrs	r3, r2
 8012442:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012444:	f7fd ff98 	bl	8010378 <HAL_GetTick>
 8012448:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801244a:	686b      	ldr	r3, [r5, #4]
 801244c:	2b01      	cmp	r3, #1
 801244e:	d01e      	beq.n	801248e <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012450:	2b02      	cmp	r3, #2
 8012452:	d02c      	beq.n	80124ae <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012454:	2b03      	cmp	r3, #3
 8012456:	d03a      	beq.n	80124ce <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012458:	4f73      	ldr	r7, [pc, #460]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 801245a:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801245c:	4b73      	ldr	r3, [pc, #460]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 801245e:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	421e      	tst	r6, r3
 8012464:	d100      	bne.n	8012468 <HAL_RCC_ClockConfig+0xa8>
 8012466:	e0cd      	b.n	8012604 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012468:	f7fd ff86 	bl	8010378 <HAL_GetTick>
 801246c:	1b00      	subs	r0, r0, r4
 801246e:	4540      	cmp	r0, r8
 8012470:	d9f6      	bls.n	8012460 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8012472:	2003      	movs	r0, #3
 8012474:	e7bc      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012476:	4a6c      	ldr	r2, [pc, #432]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012478:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801247a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801247c:	0192      	lsls	r2, r2, #6
 801247e:	d4db      	bmi.n	8012438 <HAL_RCC_ClockConfig+0x78>
 8012480:	e7b6      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012482:	4a69      	ldr	r2, [pc, #420]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012484:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012486:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012488:	03d2      	lsls	r2, r2, #15
 801248a:	d4d5      	bmi.n	8012438 <HAL_RCC_ClockConfig+0x78>
 801248c:	e7b0      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801248e:	4f66      	ldr	r7, [pc, #408]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012490:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012492:	4b66      	ldr	r3, [pc, #408]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 8012494:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	4033      	ands	r3, r6
 801249a:	2b04      	cmp	r3, #4
 801249c:	d100      	bne.n	80124a0 <HAL_RCC_ClockConfig+0xe0>
 801249e:	e0b1      	b.n	8012604 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124a0:	f7fd ff6a 	bl	8010378 <HAL_GetTick>
 80124a4:	1b00      	subs	r0, r0, r4
 80124a6:	4540      	cmp	r0, r8
 80124a8:	d9f5      	bls.n	8012496 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80124aa:	2003      	movs	r0, #3
 80124ac:	e7a0      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80124ae:	4f5e      	ldr	r7, [pc, #376]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 80124b0:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124b2:	4b5e      	ldr	r3, [pc, #376]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 80124b4:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	4033      	ands	r3, r6
 80124ba:	2b08      	cmp	r3, #8
 80124bc:	d100      	bne.n	80124c0 <HAL_RCC_ClockConfig+0x100>
 80124be:	e0a1      	b.n	8012604 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124c0:	f7fd ff5a 	bl	8010378 <HAL_GetTick>
 80124c4:	1b00      	subs	r0, r0, r4
 80124c6:	4540      	cmp	r0, r8
 80124c8:	d9f5      	bls.n	80124b6 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 80124ca:	2003      	movs	r0, #3
 80124cc:	e790      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80124ce:	4f56      	ldr	r7, [pc, #344]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 80124d0:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124d2:	4b56      	ldr	r3, [pc, #344]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 80124d4:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4033      	ands	r3, r6
 80124da:	2b0c      	cmp	r3, #12
 80124dc:	d100      	bne.n	80124e0 <HAL_RCC_ClockConfig+0x120>
 80124de:	e091      	b.n	8012604 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80124e0:	f7fd ff4a 	bl	8010378 <HAL_GetTick>
 80124e4:	1b00      	subs	r0, r0, r4
 80124e6:	4540      	cmp	r0, r8
 80124e8:	d9f5      	bls.n	80124d6 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 80124ea:	2003      	movs	r0, #3
 80124ec:	e780      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80124ee:	6803      	ldr	r3, [r0, #0]
 80124f0:	079b      	lsls	r3, r3, #30
 80124f2:	d506      	bpl.n	8012502 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80124f4:	4a4c      	ldr	r2, [pc, #304]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 80124f6:	6853      	ldr	r3, [r2, #4]
 80124f8:	21f0      	movs	r1, #240	; 0xf0
 80124fa:	438b      	bics	r3, r1
 80124fc:	6881      	ldr	r1, [r0, #8]
 80124fe:	430b      	orrs	r3, r1
 8012500:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012502:	682b      	ldr	r3, [r5, #0]
 8012504:	07db      	lsls	r3, r3, #31
 8012506:	d571      	bpl.n	80125ec <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012508:	686b      	ldr	r3, [r5, #4]
 801250a:	2b01      	cmp	r3, #1
 801250c:	d009      	beq.n	8012522 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801250e:	2b02      	cmp	r3, #2
 8012510:	d02d      	beq.n	801256e <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012512:	2b03      	cmp	r3, #3
 8012514:	d031      	beq.n	801257a <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012516:	4a44      	ldr	r2, [pc, #272]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012518:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801251a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801251c:	0792      	lsls	r2, r2, #30
 801251e:	d406      	bmi.n	801252e <HAL_RCC_ClockConfig+0x16e>
 8012520:	e766      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012522:	4a41      	ldr	r2, [pc, #260]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012524:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012526:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012528:	0392      	lsls	r2, r2, #14
 801252a:	d400      	bmi.n	801252e <HAL_RCC_ClockConfig+0x16e>
 801252c:	e760      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801252e:	493e      	ldr	r1, [pc, #248]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012530:	684a      	ldr	r2, [r1, #4]
 8012532:	2003      	movs	r0, #3
 8012534:	4382      	bics	r2, r0
 8012536:	4313      	orrs	r3, r2
 8012538:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801253a:	f7fd ff1d 	bl	8010378 <HAL_GetTick>
 801253e:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012540:	686b      	ldr	r3, [r5, #4]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d01f      	beq.n	8012586 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012546:	2b02      	cmp	r3, #2
 8012548:	d02e      	beq.n	80125a8 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801254a:	2b03      	cmp	r3, #3
 801254c:	d03d      	beq.n	80125ca <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801254e:	4b36      	ldr	r3, [pc, #216]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012550:	4698      	mov	r8, r3
 8012552:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012554:	4b35      	ldr	r3, [pc, #212]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 8012556:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012558:	4643      	mov	r3, r8
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	421f      	tst	r7, r3
 801255e:	d045      	beq.n	80125ec <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012560:	f7fd ff0a 	bl	8010378 <HAL_GetTick>
 8012564:	1b80      	subs	r0, r0, r6
 8012566:	4548      	cmp	r0, r9
 8012568:	d9f6      	bls.n	8012558 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 801256a:	2003      	movs	r0, #3
 801256c:	e740      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801256e:	4a2e      	ldr	r2, [pc, #184]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012570:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012572:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012574:	0192      	lsls	r2, r2, #6
 8012576:	d4da      	bmi.n	801252e <HAL_RCC_ClockConfig+0x16e>
 8012578:	e73a      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801257a:	4a2b      	ldr	r2, [pc, #172]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 801257c:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 801257e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012580:	03d2      	lsls	r2, r2, #15
 8012582:	d4d4      	bmi.n	801252e <HAL_RCC_ClockConfig+0x16e>
 8012584:	e734      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012586:	4b28      	ldr	r3, [pc, #160]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 8012588:	4698      	mov	r8, r3
 801258a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801258c:	4b27      	ldr	r3, [pc, #156]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 801258e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012590:	4643      	mov	r3, r8
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	403b      	ands	r3, r7
 8012596:	2b04      	cmp	r3, #4
 8012598:	d028      	beq.n	80125ec <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801259a:	f7fd feed 	bl	8010378 <HAL_GetTick>
 801259e:	1b80      	subs	r0, r0, r6
 80125a0:	4548      	cmp	r0, r9
 80125a2:	d9f5      	bls.n	8012590 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80125a4:	2003      	movs	r0, #3
 80125a6:	e723      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80125a8:	4b1f      	ldr	r3, [pc, #124]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 80125aa:	4698      	mov	r8, r3
 80125ac:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125ae:	4b1f      	ldr	r3, [pc, #124]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 80125b0:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80125b2:	4643      	mov	r3, r8
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	403b      	ands	r3, r7
 80125b8:	2b08      	cmp	r3, #8
 80125ba:	d017      	beq.n	80125ec <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125bc:	f7fd fedc 	bl	8010378 <HAL_GetTick>
 80125c0:	1b80      	subs	r0, r0, r6
 80125c2:	4548      	cmp	r0, r9
 80125c4:	d9f5      	bls.n	80125b2 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 80125c6:	2003      	movs	r0, #3
 80125c8:	e712      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80125ca:	4b17      	ldr	r3, [pc, #92]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 80125cc:	4698      	mov	r8, r3
 80125ce:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125d0:	4b16      	ldr	r3, [pc, #88]	; (801262c <HAL_RCC_ClockConfig+0x26c>)
 80125d2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80125d4:	4643      	mov	r3, r8
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	403b      	ands	r3, r7
 80125da:	2b0c      	cmp	r3, #12
 80125dc:	d006      	beq.n	80125ec <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125de:	f7fd fecb 	bl	8010378 <HAL_GetTick>
 80125e2:	1b80      	subs	r0, r0, r6
 80125e4:	4548      	cmp	r0, r9
 80125e6:	d9f5      	bls.n	80125d4 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 80125e8:	2003      	movs	r0, #3
 80125ea:	e701      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80125ec:	490d      	ldr	r1, [pc, #52]	; (8012624 <HAL_RCC_ClockConfig+0x264>)
 80125ee:	680b      	ldr	r3, [r1, #0]
 80125f0:	2201      	movs	r2, #1
 80125f2:	4393      	bics	r3, r2
 80125f4:	4323      	orrs	r3, r4
 80125f6:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80125f8:	680b      	ldr	r3, [r1, #0]
 80125fa:	401a      	ands	r2, r3
      return HAL_ERROR;
 80125fc:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80125fe:	42a2      	cmp	r2, r4
 8012600:	d000      	beq.n	8012604 <HAL_RCC_ClockConfig+0x244>
 8012602:	e6f5      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	075b      	lsls	r3, r3, #29
 8012608:	d506      	bpl.n	8012618 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801260a:	4a07      	ldr	r2, [pc, #28]	; (8012628 <HAL_RCC_ClockConfig+0x268>)
 801260c:	6853      	ldr	r3, [r2, #4]
 801260e:	4908      	ldr	r1, [pc, #32]	; (8012630 <HAL_RCC_ClockConfig+0x270>)
 8012610:	400b      	ands	r3, r1
 8012612:	68e9      	ldr	r1, [r5, #12]
 8012614:	430b      	orrs	r3, r1
 8012616:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012618:	2000      	movs	r0, #0
 801261a:	f7fd fe83 	bl	8010324 <HAL_InitTick>
  return HAL_OK;
 801261e:	2000      	movs	r0, #0
 8012620:	e6e6      	b.n	80123f0 <HAL_RCC_ClockConfig+0x30>
 8012622:	46c0      	nop			; (mov r8, r8)
 8012624:	40022000 	.word	0x40022000
 8012628:	40021000 	.word	0x40021000
 801262c:	00001388 	.word	0x00001388
 8012630:	fffff8ff 	.word	0xfffff8ff

08012634 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012634:	b530      	push	{r4, r5, lr}
 8012636:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012638:	aa04      	add	r2, sp, #16
 801263a:	4b21      	ldr	r3, [pc, #132]	; (80126c0 <HAL_RCC_GetSysClockFreq+0x8c>)
 801263c:	0018      	movs	r0, r3
 801263e:	c832      	ldmia	r0!, {r1, r4, r5}
 8012640:	c232      	stmia	r2!, {r1, r4, r5}
 8012642:	0011      	movs	r1, r2
 8012644:	6802      	ldr	r2, [r0, #0]
 8012646:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012648:	466a      	mov	r2, sp
 801264a:	3310      	adds	r3, #16
 801264c:	cb13      	ldmia	r3!, {r0, r1, r4}
 801264e:	c213      	stmia	r2!, {r0, r1, r4}
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012654:	4b1b      	ldr	r3, [pc, #108]	; (80126c4 <HAL_RCC_GetSysClockFreq+0x90>)
 8012656:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012658:	200c      	movs	r0, #12
 801265a:	4018      	ands	r0, r3
 801265c:	2808      	cmp	r0, #8
 801265e:	d00a      	beq.n	8012676 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012660:	380c      	subs	r0, #12
 8012662:	4243      	negs	r3, r0
 8012664:	4158      	adcs	r0, r3
 8012666:	4240      	negs	r0, r0
 8012668:	4b17      	ldr	r3, [pc, #92]	; (80126c8 <HAL_RCC_GetSysClockFreq+0x94>)
 801266a:	4018      	ands	r0, r3
 801266c:	4b17      	ldr	r3, [pc, #92]	; (80126cc <HAL_RCC_GetSysClockFreq+0x98>)
 801266e:	469c      	mov	ip, r3
 8012670:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012672:	b009      	add	sp, #36	; 0x24
 8012674:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012676:	0c99      	lsrs	r1, r3, #18
 8012678:	220f      	movs	r2, #15
 801267a:	4011      	ands	r1, r2
 801267c:	a804      	add	r0, sp, #16
 801267e:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012680:	4910      	ldr	r1, [pc, #64]	; (80126c4 <HAL_RCC_GetSysClockFreq+0x90>)
 8012682:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012684:	400a      	ands	r2, r1
 8012686:	4669      	mov	r1, sp
 8012688:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801268a:	22c0      	movs	r2, #192	; 0xc0
 801268c:	0252      	lsls	r2, r2, #9
 801268e:	4013      	ands	r3, r2
 8012690:	2280      	movs	r2, #128	; 0x80
 8012692:	0252      	lsls	r2, r2, #9
 8012694:	4293      	cmp	r3, r2
 8012696:	d008      	beq.n	80126aa <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012698:	22c0      	movs	r2, #192	; 0xc0
 801269a:	0252      	lsls	r2, r2, #9
 801269c:	4293      	cmp	r3, r2
 801269e:	d009      	beq.n	80126b4 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80126a0:	480a      	ldr	r0, [pc, #40]	; (80126cc <HAL_RCC_GetSysClockFreq+0x98>)
 80126a2:	f7ed fd4b 	bl	800013c <__udivsi3>
 80126a6:	4360      	muls	r0, r4
 80126a8:	e7e3      	b.n	8012672 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80126aa:	4808      	ldr	r0, [pc, #32]	; (80126cc <HAL_RCC_GetSysClockFreq+0x98>)
 80126ac:	f7ed fd46 	bl	800013c <__udivsi3>
 80126b0:	4360      	muls	r0, r4
 80126b2:	e7de      	b.n	8012672 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80126b4:	4806      	ldr	r0, [pc, #24]	; (80126d0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80126b6:	f7ed fd41 	bl	800013c <__udivsi3>
 80126ba:	4360      	muls	r0, r4
 80126bc:	e7d9      	b.n	8012672 <HAL_RCC_GetSysClockFreq+0x3e>
 80126be:	46c0      	nop			; (mov r8, r8)
 80126c0:	0801779c 	.word	0x0801779c
 80126c4:	40021000 	.word	0x40021000
 80126c8:	02625a00 	.word	0x02625a00
 80126cc:	007a1200 	.word	0x007a1200
 80126d0:	02dc6c00 	.word	0x02dc6c00

080126d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80126d4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80126d6:	f7ff ffad 	bl	8012634 <HAL_RCC_GetSysClockFreq>
 80126da:	4b05      	ldr	r3, [pc, #20]	; (80126f0 <HAL_RCC_GetHCLKFreq+0x1c>)
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	061b      	lsls	r3, r3, #24
 80126e0:	0f1b      	lsrs	r3, r3, #28
 80126e2:	4a04      	ldr	r2, [pc, #16]	; (80126f4 <HAL_RCC_GetHCLKFreq+0x20>)
 80126e4:	5cd3      	ldrb	r3, [r2, r3]
 80126e6:	40d8      	lsrs	r0, r3
 80126e8:	4b03      	ldr	r3, [pc, #12]	; (80126f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80126ea:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	46c0      	nop			; (mov r8, r8)
 80126f0:	40021000 	.word	0x40021000
 80126f4:	0801aa00 	.word	0x0801aa00
 80126f8:	20000098 	.word	0x20000098

080126fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80126fc:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80126fe:	f7ff ffe9 	bl	80126d4 <HAL_RCC_GetHCLKFreq>
 8012702:	4b04      	ldr	r3, [pc, #16]	; (8012714 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	055b      	lsls	r3, r3, #21
 8012708:	0f5b      	lsrs	r3, r3, #29
 801270a:	4a03      	ldr	r2, [pc, #12]	; (8012718 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801270c:	5cd3      	ldrb	r3, [r2, r3]
 801270e:	40d8      	lsrs	r0, r3
}    
 8012710:	bd10      	pop	{r4, pc}
 8012712:	46c0      	nop			; (mov r8, r8)
 8012714:	40021000 	.word	0x40021000
 8012718:	0801aa00 	.word	0x0801aa00

0801271c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801271c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801271e:	46c6      	mov	lr, r8
 8012720:	b500      	push	{lr}
 8012722:	b082      	sub	sp, #8
 8012724:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012726:	6803      	ldr	r3, [r0, #0]
 8012728:	03db      	lsls	r3, r3, #15
 801272a:	d507      	bpl.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801272c:	4b43      	ldr	r3, [pc, #268]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801272e:	6a1b      	ldr	r3, [r3, #32]
 8012730:	6842      	ldr	r2, [r0, #4]
 8012732:	4053      	eors	r3, r2
 8012734:	22c0      	movs	r2, #192	; 0xc0
 8012736:	0092      	lsls	r2, r2, #2
 8012738:	4213      	tst	r3, r2
 801273a:	d136      	bne.n	80127aa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801273c:	6823      	ldr	r3, [r4, #0]
 801273e:	07db      	lsls	r3, r3, #31
 8012740:	d506      	bpl.n	8012750 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012742:	4a3e      	ldr	r2, [pc, #248]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012744:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012746:	2103      	movs	r1, #3
 8012748:	438b      	bics	r3, r1
 801274a:	68a1      	ldr	r1, [r4, #8]
 801274c:	430b      	orrs	r3, r1
 801274e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	079b      	lsls	r3, r3, #30
 8012754:	d506      	bpl.n	8012764 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012756:	4a39      	ldr	r2, [pc, #228]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012758:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801275a:	4939      	ldr	r1, [pc, #228]	; (8012840 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 801275c:	400b      	ands	r3, r1
 801275e:	68e1      	ldr	r1, [r4, #12]
 8012760:	430b      	orrs	r3, r1
 8012762:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	035b      	lsls	r3, r3, #13
 8012768:	d506      	bpl.n	8012778 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801276a:	4a34      	ldr	r2, [pc, #208]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801276c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801276e:	4935      	ldr	r1, [pc, #212]	; (8012844 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012770:	400b      	ands	r3, r1
 8012772:	6921      	ldr	r1, [r4, #16]
 8012774:	430b      	orrs	r3, r1
 8012776:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012778:	6823      	ldr	r3, [r4, #0]
 801277a:	069b      	lsls	r3, r3, #26
 801277c:	d506      	bpl.n	801278c <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801277e:	4a2f      	ldr	r2, [pc, #188]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012780:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012782:	2110      	movs	r1, #16
 8012784:	438b      	bics	r3, r1
 8012786:	6961      	ldr	r1, [r4, #20]
 8012788:	430b      	orrs	r3, r1
 801278a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 801278c:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	055b      	lsls	r3, r3, #21
 8012792:	d506      	bpl.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012794:	4a29      	ldr	r2, [pc, #164]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012796:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012798:	2140      	movs	r1, #64	; 0x40
 801279a:	438b      	bics	r3, r1
 801279c:	69a1      	ldr	r1, [r4, #24]
 801279e:	430b      	orrs	r3, r1
 80127a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80127a2:	b002      	add	sp, #8
 80127a4:	bc04      	pop	{r2}
 80127a6:	4690      	mov	r8, r2
 80127a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80127aa:	4a24      	ldr	r2, [pc, #144]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80127ac:	69d1      	ldr	r1, [r2, #28]
 80127ae:	2080      	movs	r0, #128	; 0x80
 80127b0:	0540      	lsls	r0, r0, #21
 80127b2:	4301      	orrs	r1, r0
 80127b4:	61d1      	str	r1, [r2, #28]
 80127b6:	69d3      	ldr	r3, [r2, #28]
 80127b8:	4003      	ands	r3, r0
 80127ba:	9301      	str	r3, [sp, #4]
 80127bc:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80127be:	4a22      	ldr	r2, [pc, #136]	; (8012848 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80127c0:	6811      	ldr	r1, [r2, #0]
 80127c2:	2380      	movs	r3, #128	; 0x80
 80127c4:	005b      	lsls	r3, r3, #1
 80127c6:	430b      	orrs	r3, r1
 80127c8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80127ca:	f7fd fdd5 	bl	8010378 <HAL_GetTick>
 80127ce:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80127d0:	4e1d      	ldr	r6, [pc, #116]	; (8012848 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80127d2:	2580      	movs	r5, #128	; 0x80
 80127d4:	006d      	lsls	r5, r5, #1
 80127d6:	6833      	ldr	r3, [r6, #0]
 80127d8:	422b      	tst	r3, r5
 80127da:	d106      	bne.n	80127ea <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80127dc:	f7fd fdcc 	bl	8010378 <HAL_GetTick>
 80127e0:	1bc0      	subs	r0, r0, r7
 80127e2:	2864      	cmp	r0, #100	; 0x64
 80127e4:	d9f7      	bls.n	80127d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 80127e6:	2003      	movs	r0, #3
 80127e8:	e7db      	b.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80127ea:	4b14      	ldr	r3, [pc, #80]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80127ec:	6a18      	ldr	r0, [r3, #32]
 80127ee:	4a17      	ldr	r2, [pc, #92]	; (801284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80127f0:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80127f2:	6a1d      	ldr	r5, [r3, #32]
 80127f4:	2180      	movs	r1, #128	; 0x80
 80127f6:	0249      	lsls	r1, r1, #9
 80127f8:	4329      	orrs	r1, r5
 80127fa:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80127fc:	6a19      	ldr	r1, [r3, #32]
 80127fe:	4d14      	ldr	r5, [pc, #80]	; (8012850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012800:	4029      	ands	r1, r5
 8012802:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012804:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012806:	0783      	lsls	r3, r0, #30
 8012808:	d407      	bmi.n	801281a <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801280a:	4a0c      	ldr	r2, [pc, #48]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801280c:	6a13      	ldr	r3, [r2, #32]
 801280e:	490f      	ldr	r1, [pc, #60]	; (801284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012810:	400b      	ands	r3, r1
 8012812:	6861      	ldr	r1, [r4, #4]
 8012814:	430b      	orrs	r3, r1
 8012816:	6213      	str	r3, [r2, #32]
 8012818:	e790      	b.n	801273c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801281a:	f7fd fdad 	bl	8010378 <HAL_GetTick>
 801281e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012820:	4e06      	ldr	r6, [pc, #24]	; (801283c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012822:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012824:	4f0b      	ldr	r7, [pc, #44]	; (8012854 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012826:	6a33      	ldr	r3, [r6, #32]
 8012828:	421d      	tst	r5, r3
 801282a:	d1ee      	bne.n	801280a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801282c:	f7fd fda4 	bl	8010378 <HAL_GetTick>
 8012830:	4643      	mov	r3, r8
 8012832:	1ac0      	subs	r0, r0, r3
 8012834:	42b8      	cmp	r0, r7
 8012836:	d9f6      	bls.n	8012826 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012838:	2003      	movs	r0, #3
 801283a:	e7b2      	b.n	80127a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 801283c:	40021000 	.word	0x40021000
 8012840:	fffcffff 	.word	0xfffcffff
 8012844:	fff3ffff 	.word	0xfff3ffff
 8012848:	40007000 	.word	0x40007000
 801284c:	fffffcff 	.word	0xfffffcff
 8012850:	fffeffff 	.word	0xfffeffff
 8012854:	00001388 	.word	0x00001388

08012858 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012858:	4770      	bx	lr

0801285a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801285a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801285e:	6802      	ldr	r2, [r0, #0]
 8012860:	68d3      	ldr	r3, [r2, #12]
 8012862:	21a0      	movs	r1, #160	; 0xa0
 8012864:	438b      	bics	r3, r1
 8012866:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012868:	f7fd fd86 	bl	8010378 <HAL_GetTick>
 801286c:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801286e:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012870:	26fa      	movs	r6, #250	; 0xfa
 8012872:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012874:	6823      	ldr	r3, [r4, #0]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	421d      	tst	r5, r3
 801287a:	d106      	bne.n	801288a <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801287c:	f7fd fd7c 	bl	8010378 <HAL_GetTick>
 8012880:	1bc0      	subs	r0, r0, r7
 8012882:	42b0      	cmp	r0, r6
 8012884:	d9f6      	bls.n	8012874 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012886:	2003      	movs	r0, #3
 8012888:	e000      	b.n	801288c <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 801288a:	2000      	movs	r0, #0
}
 801288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801288e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 801288e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012890:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012892:	6803      	ldr	r3, [r0, #0]
 8012894:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012896:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012898:	0652      	lsls	r2, r2, #25
 801289a:	d500      	bpl.n	801289e <RTC_EnterInitMode+0x10>
}
 801289c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801289e:	2201      	movs	r2, #1
 80128a0:	4252      	negs	r2, r2
 80128a2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80128a4:	f7fd fd68 	bl	8010378 <HAL_GetTick>
 80128a8:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80128aa:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80128ac:	26fa      	movs	r6, #250	; 0xfa
 80128ae:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	68db      	ldr	r3, [r3, #12]
 80128b4:	421d      	tst	r5, r3
 80128b6:	d106      	bne.n	80128c6 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80128b8:	f7fd fd5e 	bl	8010378 <HAL_GetTick>
 80128bc:	1bc0      	subs	r0, r0, r7
 80128be:	42b0      	cmp	r0, r6
 80128c0:	d9f6      	bls.n	80128b0 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80128c2:	2003      	movs	r0, #3
 80128c4:	e7ea      	b.n	801289c <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80128c6:	2000      	movs	r0, #0
 80128c8:	e7e8      	b.n	801289c <RTC_EnterInitMode+0xe>
	...

080128cc <HAL_RTC_Init>:
{
 80128cc:	b570      	push	{r4, r5, r6, lr}
 80128ce:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80128d0:	d046      	beq.n	8012960 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80128d2:	7f43      	ldrb	r3, [r0, #29]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d038      	beq.n	801294a <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80128d8:	2302      	movs	r3, #2
 80128da:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	22ca      	movs	r2, #202	; 0xca
 80128e0:	625a      	str	r2, [r3, #36]	; 0x24
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	3a77      	subs	r2, #119	; 0x77
 80128e6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80128e8:	0020      	movs	r0, r4
 80128ea:	f7ff ffd0 	bl	801288e <RTC_EnterInitMode>
 80128ee:	2800      	cmp	r0, #0
 80128f0:	d12f      	bne.n	8012952 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80128f2:	6822      	ldr	r2, [r4, #0]
 80128f4:	6893      	ldr	r3, [r2, #8]
 80128f6:	491b      	ldr	r1, [pc, #108]	; (8012964 <HAL_RTC_Init+0x98>)
 80128f8:	400b      	ands	r3, r1
 80128fa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80128fc:	6822      	ldr	r2, [r4, #0]
 80128fe:	6891      	ldr	r1, [r2, #8]
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	6925      	ldr	r5, [r4, #16]
 8012904:	432b      	orrs	r3, r5
 8012906:	6965      	ldr	r5, [r4, #20]
 8012908:	432b      	orrs	r3, r5
 801290a:	430b      	orrs	r3, r1
 801290c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801290e:	6823      	ldr	r3, [r4, #0]
 8012910:	68e2      	ldr	r2, [r4, #12]
 8012912:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012914:	6822      	ldr	r2, [r4, #0]
 8012916:	6911      	ldr	r1, [r2, #16]
 8012918:	68a3      	ldr	r3, [r4, #8]
 801291a:	041b      	lsls	r3, r3, #16
 801291c:	430b      	orrs	r3, r1
 801291e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012920:	6822      	ldr	r2, [r4, #0]
 8012922:	68d3      	ldr	r3, [r2, #12]
 8012924:	2180      	movs	r1, #128	; 0x80
 8012926:	438b      	bics	r3, r1
 8012928:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801292a:	6822      	ldr	r2, [r4, #0]
 801292c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801292e:	490e      	ldr	r1, [pc, #56]	; (8012968 <HAL_RTC_Init+0x9c>)
 8012930:	400b      	ands	r3, r1
 8012932:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012934:	6822      	ldr	r2, [r4, #0]
 8012936:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012938:	69a1      	ldr	r1, [r4, #24]
 801293a:	430b      	orrs	r3, r1
 801293c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801293e:	6823      	ldr	r3, [r4, #0]
 8012940:	22ff      	movs	r2, #255	; 0xff
 8012942:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012944:	2301      	movs	r3, #1
 8012946:	7763      	strb	r3, [r4, #29]
}
 8012948:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 801294a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801294c:	f7ff ff84 	bl	8012858 <HAL_RTC_MspInit>
 8012950:	e7c2      	b.n	80128d8 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012952:	6823      	ldr	r3, [r4, #0]
 8012954:	22ff      	movs	r2, #255	; 0xff
 8012956:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012958:	2304      	movs	r3, #4
 801295a:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 801295c:	2001      	movs	r0, #1
 801295e:	e7f3      	b.n	8012948 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012960:	2001      	movs	r0, #1
 8012962:	e7f1      	b.n	8012948 <HAL_RTC_Init+0x7c>
 8012964:	ff8fffbf 	.word	0xff8fffbf
 8012968:	fffbffff 	.word	0xfffbffff

0801296c <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 801296c:	2809      	cmp	r0, #9
 801296e:	d909      	bls.n	8012984 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012970:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012972:	3301      	adds	r3, #1
    Value -= 10;
 8012974:	380a      	subs	r0, #10
 8012976:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012978:	2809      	cmp	r0, #9
 801297a:	d8fa      	bhi.n	8012972 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 801297c:	011b      	lsls	r3, r3, #4
 801297e:	4318      	orrs	r0, r3
 8012980:	b2c0      	uxtb	r0, r0
}
 8012982:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012984:	2300      	movs	r3, #0
 8012986:	e7f9      	b.n	801297c <RTC_ByteToBcd2+0x10>

08012988 <HAL_RTC_SetTime>:
{
 8012988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801298a:	46c6      	mov	lr, r8
 801298c:	b500      	push	{lr}
 801298e:	0004      	movs	r4, r0
 8012990:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012992:	7f03      	ldrb	r3, [r0, #28]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d100      	bne.n	801299a <HAL_RTC_SetTime+0x12>
 8012998:	e075      	b.n	8012a86 <HAL_RTC_SetTime+0xfe>
 801299a:	2301      	movs	r3, #1
 801299c:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801299e:	3301      	adds	r3, #1
 80129a0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80129a2:	2a00      	cmp	r2, #0
 80129a4:	d144      	bne.n	8012a30 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80129a6:	6803      	ldr	r3, [r0, #0]
 80129a8:	689b      	ldr	r3, [r3, #8]
 80129aa:	065b      	lsls	r3, r3, #25
 80129ac:	d401      	bmi.n	80129b2 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 80129ae:	2300      	movs	r3, #0
 80129b0:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80129b2:	7830      	ldrb	r0, [r6, #0]
 80129b4:	f7ff ffda 	bl	801296c <RTC_ByteToBcd2>
 80129b8:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80129ba:	7870      	ldrb	r0, [r6, #1]
 80129bc:	f7ff ffd6 	bl	801296c <RTC_ByteToBcd2>
 80129c0:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80129c2:	78b0      	ldrb	r0, [r6, #2]
 80129c4:	f7ff ffd2 	bl	801296c <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80129c8:	7a35      	ldrb	r5, [r6, #8]
 80129ca:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80129cc:	4305      	orrs	r5, r0
 80129ce:	4643      	mov	r3, r8
 80129d0:	0418      	lsls	r0, r3, #16
 80129d2:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80129d4:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80129d6:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80129d8:	6823      	ldr	r3, [r4, #0]
 80129da:	22ca      	movs	r2, #202	; 0xca
 80129dc:	625a      	str	r2, [r3, #36]	; 0x24
 80129de:	6823      	ldr	r3, [r4, #0]
 80129e0:	3a77      	subs	r2, #119	; 0x77
 80129e2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80129e4:	0020      	movs	r0, r4
 80129e6:	f7ff ff52 	bl	801288e <RTC_EnterInitMode>
 80129ea:	1e07      	subs	r7, r0, #0
 80129ec:	d131      	bne.n	8012a52 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80129ee:	6823      	ldr	r3, [r4, #0]
 80129f0:	4826      	ldr	r0, [pc, #152]	; (8012a8c <HAL_RTC_SetTime+0x104>)
 80129f2:	4005      	ands	r5, r0
 80129f4:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80129f6:	6822      	ldr	r2, [r4, #0]
 80129f8:	6893      	ldr	r3, [r2, #8]
 80129fa:	4925      	ldr	r1, [pc, #148]	; (8012a90 <HAL_RTC_SetTime+0x108>)
 80129fc:	400b      	ands	r3, r1
 80129fe:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012a00:	6822      	ldr	r2, [r4, #0]
 8012a02:	6891      	ldr	r1, [r2, #8]
 8012a04:	68f3      	ldr	r3, [r6, #12]
 8012a06:	6930      	ldr	r0, [r6, #16]
 8012a08:	4303      	orrs	r3, r0
 8012a0a:	430b      	orrs	r3, r1
 8012a0c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012a0e:	6822      	ldr	r2, [r4, #0]
 8012a10:	68d3      	ldr	r3, [r2, #12]
 8012a12:	2180      	movs	r1, #128	; 0x80
 8012a14:	438b      	bics	r3, r1
 8012a16:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012a18:	6823      	ldr	r3, [r4, #0]
 8012a1a:	689b      	ldr	r3, [r3, #8]
 8012a1c:	069b      	lsls	r3, r3, #26
 8012a1e:	d524      	bpl.n	8012a6a <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	22ff      	movs	r2, #255	; 0xff
 8012a24:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012a26:	2301      	movs	r3, #1
 8012a28:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012a2e:	e018      	b.n	8012a62 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012a30:	6803      	ldr	r3, [r0, #0]
 8012a32:	689b      	ldr	r3, [r3, #8]
 8012a34:	065b      	lsls	r3, r3, #25
 8012a36:	d401      	bmi.n	8012a3c <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012a3c:	7835      	ldrb	r5, [r6, #0]
 8012a3e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012a40:	7870      	ldrb	r0, [r6, #1]
 8012a42:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012a44:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012a46:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012a48:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012a4a:	7a30      	ldrb	r0, [r6, #8]
 8012a4c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012a4e:	4305      	orrs	r5, r0
 8012a50:	e7c2      	b.n	80129d8 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012a52:	6823      	ldr	r3, [r4, #0]
 8012a54:	22ff      	movs	r2, #255	; 0xff
 8012a56:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012a58:	2304      	movs	r3, #4
 8012a5a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012a60:	2701      	movs	r7, #1
}
 8012a62:	0038      	movs	r0, r7
 8012a64:	bc04      	pop	{r2}
 8012a66:	4690      	mov	r8, r2
 8012a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012a6a:	0020      	movs	r0, r4
 8012a6c:	f7ff fef5 	bl	801285a <HAL_RTC_WaitForSynchro>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d0d5      	beq.n	8012a20 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012a74:	6823      	ldr	r3, [r4, #0]
 8012a76:	22ff      	movs	r2, #255	; 0xff
 8012a78:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012a7a:	2304      	movs	r3, #4
 8012a7c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012a7e:	2300      	movs	r3, #0
 8012a80:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012a82:	2701      	movs	r7, #1
 8012a84:	e7ed      	b.n	8012a62 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8012a86:	2702      	movs	r7, #2
 8012a88:	e7eb      	b.n	8012a62 <HAL_RTC_SetTime+0xda>
 8012a8a:	46c0      	nop			; (mov r8, r8)
 8012a8c:	007f7f7f 	.word	0x007f7f7f
 8012a90:	fffbffff 	.word	0xfffbffff

08012a94 <HAL_RTC_SetDate>:
{
 8012a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a96:	46c6      	mov	lr, r8
 8012a98:	b500      	push	{lr}
 8012a9a:	0004      	movs	r4, r0
 8012a9c:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012a9e:	7f03      	ldrb	r3, [r0, #28]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d03a      	beq.n	8012b1a <HAL_RTC_SetDate+0x86>
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012aac:	2a00      	cmp	r2, #0
 8012aae:	d136      	bne.n	8012b1e <HAL_RTC_SetDate+0x8a>
 8012ab0:	784b      	ldrb	r3, [r1, #1]
 8012ab2:	06da      	lsls	r2, r3, #27
 8012ab4:	d503      	bpl.n	8012abe <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012ab6:	2210      	movs	r2, #16
 8012ab8:	4393      	bics	r3, r2
 8012aba:	330a      	adds	r3, #10
 8012abc:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012abe:	78f0      	ldrb	r0, [r6, #3]
 8012ac0:	f7ff ff54 	bl	801296c <RTC_ByteToBcd2>
 8012ac4:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012ac6:	7870      	ldrb	r0, [r6, #1]
 8012ac8:	f7ff ff50 	bl	801296c <RTC_ByteToBcd2>
 8012acc:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012ace:	78b0      	ldrb	r0, [r6, #2]
 8012ad0:	f7ff ff4c 	bl	801296c <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012ad4:	7835      	ldrb	r5, [r6, #0]
 8012ad6:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012ad8:	4305      	orrs	r5, r0
 8012ada:	4643      	mov	r3, r8
 8012adc:	0418      	lsls	r0, r3, #16
 8012ade:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012ae0:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012ae2:	433d      	orrs	r5, r7
 8012ae4:	e025      	b.n	8012b32 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012ae6:	6823      	ldr	r3, [r4, #0]
 8012ae8:	22ff      	movs	r2, #255	; 0xff
 8012aea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012aec:	2304      	movs	r3, #4
 8012aee:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012af0:	2300      	movs	r3, #0
 8012af2:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012af4:	2601      	movs	r6, #1
}
 8012af6:	0030      	movs	r0, r6
 8012af8:	bc04      	pop	{r2}
 8012afa:	4690      	mov	r8, r2
 8012afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012afe:	0020      	movs	r0, r4
 8012b00:	f7ff feab 	bl	801285a <HAL_RTC_WaitForSynchro>
 8012b04:	2800      	cmp	r0, #0
 8012b06:	d02c      	beq.n	8012b62 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012b08:	6823      	ldr	r3, [r4, #0]
 8012b0a:	22ff      	movs	r2, #255	; 0xff
 8012b0c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012b0e:	2304      	movs	r3, #4
 8012b10:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012b12:	2300      	movs	r3, #0
 8012b14:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012b16:	2601      	movs	r6, #1
 8012b18:	e7ed      	b.n	8012af6 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012b1a:	2602      	movs	r6, #2
 8012b1c:	e7eb      	b.n	8012af6 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012b1e:	78cd      	ldrb	r5, [r1, #3]
 8012b20:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012b22:	7848      	ldrb	r0, [r1, #1]
 8012b24:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012b26:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012b28:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012b2a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012b2c:	7808      	ldrb	r0, [r1, #0]
 8012b2e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012b30:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	22ca      	movs	r2, #202	; 0xca
 8012b36:	625a      	str	r2, [r3, #36]	; 0x24
 8012b38:	6823      	ldr	r3, [r4, #0]
 8012b3a:	3a77      	subs	r2, #119	; 0x77
 8012b3c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012b3e:	0020      	movs	r0, r4
 8012b40:	f7ff fea5 	bl	801288e <RTC_EnterInitMode>
 8012b44:	1e06      	subs	r6, r0, #0
 8012b46:	d1ce      	bne.n	8012ae6 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012b48:	6823      	ldr	r3, [r4, #0]
 8012b4a:	480a      	ldr	r0, [pc, #40]	; (8012b74 <HAL_RTC_SetDate+0xe0>)
 8012b4c:	4005      	ands	r5, r0
 8012b4e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012b50:	6822      	ldr	r2, [r4, #0]
 8012b52:	68d3      	ldr	r3, [r2, #12]
 8012b54:	2180      	movs	r1, #128	; 0x80
 8012b56:	438b      	bics	r3, r1
 8012b58:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012b5a:	6823      	ldr	r3, [r4, #0]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	069b      	lsls	r3, r3, #26
 8012b60:	d5cd      	bpl.n	8012afe <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012b62:	6823      	ldr	r3, [r4, #0]
 8012b64:	22ff      	movs	r2, #255	; 0xff
 8012b66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012b70:	e7c1      	b.n	8012af6 <HAL_RTC_SetDate+0x62>
 8012b72:	46c0      	nop			; (mov r8, r8)
 8012b74:	00ffff3f 	.word	0x00ffff3f

08012b78 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012b78:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012b7a:	0900      	lsrs	r0, r0, #4
 8012b7c:	0083      	lsls	r3, r0, #2
 8012b7e:	181b      	adds	r3, r3, r0
 8012b80:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012b82:	200f      	movs	r0, #15
 8012b84:	4010      	ands	r0, r2
 8012b86:	1818      	adds	r0, r3, r0
 8012b88:	b2c0      	uxtb	r0, r0
}
 8012b8a:	4770      	bx	lr

08012b8c <HAL_RTC_GetTime>:
{
 8012b8c:	b570      	push	{r4, r5, r6, lr}
 8012b8e:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012b90:	6803      	ldr	r3, [r0, #0]
 8012b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b94:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012b96:	6803      	ldr	r3, [r0, #0]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	490e      	ldr	r1, [pc, #56]	; (8012bd4 <HAL_RTC_GetTime+0x48>)
 8012b9c:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012b9e:	0c19      	lsrs	r1, r3, #16
 8012ba0:	203f      	movs	r0, #63	; 0x3f
 8012ba2:	4008      	ands	r0, r1
 8012ba4:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012ba6:	0a1e      	lsrs	r6, r3, #8
 8012ba8:	b2f6      	uxtb	r6, r6
 8012baa:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012bac:	b2dc      	uxtb	r4, r3
 8012bae:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012bb0:	2340      	movs	r3, #64	; 0x40
 8012bb2:	400b      	ands	r3, r1
 8012bb4:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012bb6:	2a00      	cmp	r2, #0
 8012bb8:	d10a      	bne.n	8012bd0 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012bba:	f7ff ffdd 	bl	8012b78 <RTC_Bcd2ToByte>
 8012bbe:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012bc0:	0030      	movs	r0, r6
 8012bc2:	f7ff ffd9 	bl	8012b78 <RTC_Bcd2ToByte>
 8012bc6:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012bc8:	0020      	movs	r0, r4
 8012bca:	f7ff ffd5 	bl	8012b78 <RTC_Bcd2ToByte>
 8012bce:	70a8      	strb	r0, [r5, #2]
}
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	007f7f7f 	.word	0x007f7f7f

08012bd8 <HAL_RTC_GetDate>:
{
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012bdc:	6803      	ldr	r3, [r0, #0]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	490d      	ldr	r1, [pc, #52]	; (8012c18 <HAL_RTC_GetDate+0x40>)
 8012be2:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012be4:	0c18      	lsrs	r0, r3, #16
 8012be6:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012be8:	04dd      	lsls	r5, r3, #19
 8012bea:	0eed      	lsrs	r5, r5, #27
 8012bec:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012bee:	b2de      	uxtb	r6, r3
 8012bf0:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012bf2:	041b      	lsls	r3, r3, #16
 8012bf4:	0f5b      	lsrs	r3, r3, #29
 8012bf6:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012bf8:	2a00      	cmp	r2, #0
 8012bfa:	d10a      	bne.n	8012c12 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012bfc:	f7ff ffbc 	bl	8012b78 <RTC_Bcd2ToByte>
 8012c00:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012c02:	0028      	movs	r0, r5
 8012c04:	f7ff ffb8 	bl	8012b78 <RTC_Bcd2ToByte>
 8012c08:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012c0a:	0030      	movs	r0, r6
 8012c0c:	f7ff ffb4 	bl	8012b78 <RTC_Bcd2ToByte>
 8012c10:	70a0      	strb	r0, [r4, #2]
}
 8012c12:	2000      	movs	r0, #0
 8012c14:	bd70      	pop	{r4, r5, r6, pc}
 8012c16:	46c0      	nop			; (mov r8, r8)
 8012c18:	00ffff3f 	.word	0x00ffff3f

08012c1c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012c1c:	6803      	ldr	r3, [r0, #0]
 8012c1e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012c20:	0089      	lsls	r1, r1, #2
 8012c22:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012c24:	600a      	str	r2, [r1, #0]
}
 8012c26:	4770      	bx	lr

08012c28 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012c28:	6803      	ldr	r3, [r0, #0]
 8012c2a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012c2c:	0089      	lsls	r1, r1, #2
 8012c2e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012c30:	6808      	ldr	r0, [r1, #0]
}
 8012c32:	4770      	bx	lr

08012c34 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012c34:	4770      	bx	lr

08012c36 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012c36:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012c38:	2239      	movs	r2, #57	; 0x39
 8012c3a:	2302      	movs	r3, #2
 8012c3c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012c3e:	6804      	ldr	r4, [r0, #0]
 8012c40:	6823      	ldr	r3, [r4, #0]
 8012c42:	2101      	movs	r1, #1
 8012c44:	430b      	orrs	r3, r1
 8012c46:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012c48:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012c4a:	2000      	movs	r0, #0
 8012c4c:	bd10      	pop	{r4, pc}
	...

08012c50 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012c50:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012c52:	4a36      	ldr	r2, [pc, #216]	; (8012d2c <TIM_Base_SetConfig+0xdc>)
 8012c54:	4290      	cmp	r0, r2
 8012c56:	d022      	beq.n	8012c9e <TIM_Base_SetConfig+0x4e>
 8012c58:	2280      	movs	r2, #128	; 0x80
 8012c5a:	05d2      	lsls	r2, r2, #23
 8012c5c:	4290      	cmp	r0, r2
 8012c5e:	d014      	beq.n	8012c8a <TIM_Base_SetConfig+0x3a>
 8012c60:	4a33      	ldr	r2, [pc, #204]	; (8012d30 <TIM_Base_SetConfig+0xe0>)
 8012c62:	4290      	cmp	r0, r2
 8012c64:	d016      	beq.n	8012c94 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012c66:	4a33      	ldr	r2, [pc, #204]	; (8012d34 <TIM_Base_SetConfig+0xe4>)
 8012c68:	4290      	cmp	r0, r2
 8012c6a:	d040      	beq.n	8012cee <TIM_Base_SetConfig+0x9e>
 8012c6c:	4a32      	ldr	r2, [pc, #200]	; (8012d38 <TIM_Base_SetConfig+0xe8>)
 8012c6e:	4290      	cmp	r0, r2
 8012c70:	d047      	beq.n	8012d02 <TIM_Base_SetConfig+0xb2>
 8012c72:	4a32      	ldr	r2, [pc, #200]	; (8012d3c <TIM_Base_SetConfig+0xec>)
 8012c74:	4290      	cmp	r0, r2
 8012c76:	d04e      	beq.n	8012d16 <TIM_Base_SetConfig+0xc6>
 8012c78:	4a31      	ldr	r2, [pc, #196]	; (8012d40 <TIM_Base_SetConfig+0xf0>)
 8012c7a:	4290      	cmp	r0, r2
 8012c7c:	d02d      	beq.n	8012cda <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012c7e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012c80:	688b      	ldr	r3, [r1, #8]
 8012c82:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012c84:	680b      	ldr	r3, [r1, #0]
 8012c86:	6283      	str	r3, [r0, #40]	; 0x28
 8012c88:	e024      	b.n	8012cd4 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c8a:	2270      	movs	r2, #112	; 0x70
 8012c8c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012c8e:	684a      	ldr	r2, [r1, #4]
 8012c90:	4313      	orrs	r3, r2
 8012c92:	e008      	b.n	8012ca6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c94:	2270      	movs	r2, #112	; 0x70
 8012c96:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012c98:	684a      	ldr	r2, [r1, #4]
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	e003      	b.n	8012ca6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012c9e:	2270      	movs	r2, #112	; 0x70
 8012ca0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012ca2:	684a      	ldr	r2, [r1, #4]
 8012ca4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012ca6:	4a27      	ldr	r2, [pc, #156]	; (8012d44 <TIM_Base_SetConfig+0xf4>)
 8012ca8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012caa:	68ca      	ldr	r2, [r1, #12]
 8012cac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012cae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012cb0:	688b      	ldr	r3, [r1, #8]
 8012cb2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012cb4:	680b      	ldr	r3, [r1, #0]
 8012cb6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012cb8:	4b1c      	ldr	r3, [pc, #112]	; (8012d2c <TIM_Base_SetConfig+0xdc>)
 8012cba:	4298      	cmp	r0, r3
 8012cbc:	d008      	beq.n	8012cd0 <TIM_Base_SetConfig+0x80>
 8012cbe:	4b1e      	ldr	r3, [pc, #120]	; (8012d38 <TIM_Base_SetConfig+0xe8>)
 8012cc0:	4298      	cmp	r0, r3
 8012cc2:	d005      	beq.n	8012cd0 <TIM_Base_SetConfig+0x80>
 8012cc4:	4b1d      	ldr	r3, [pc, #116]	; (8012d3c <TIM_Base_SetConfig+0xec>)
 8012cc6:	4298      	cmp	r0, r3
 8012cc8:	d002      	beq.n	8012cd0 <TIM_Base_SetConfig+0x80>
 8012cca:	4b1d      	ldr	r3, [pc, #116]	; (8012d40 <TIM_Base_SetConfig+0xf0>)
 8012ccc:	4298      	cmp	r0, r3
 8012cce:	d101      	bne.n	8012cd4 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012cd0:	690b      	ldr	r3, [r1, #16]
 8012cd2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	6143      	str	r3, [r0, #20]
}
 8012cd8:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012cda:	4a1a      	ldr	r2, [pc, #104]	; (8012d44 <TIM_Base_SetConfig+0xf4>)
 8012cdc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012cde:	68ca      	ldr	r2, [r1, #12]
 8012ce0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012ce2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ce4:	688b      	ldr	r3, [r1, #8]
 8012ce6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012ce8:	680b      	ldr	r3, [r1, #0]
 8012cea:	6283      	str	r3, [r0, #40]	; 0x28
 8012cec:	e7f0      	b.n	8012cd0 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012cee:	4a15      	ldr	r2, [pc, #84]	; (8012d44 <TIM_Base_SetConfig+0xf4>)
 8012cf0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012cf2:	68ca      	ldr	r2, [r1, #12]
 8012cf4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012cf6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012cf8:	688b      	ldr	r3, [r1, #8]
 8012cfa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012cfc:	680b      	ldr	r3, [r1, #0]
 8012cfe:	6283      	str	r3, [r0, #40]	; 0x28
 8012d00:	e7e8      	b.n	8012cd4 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012d02:	4a10      	ldr	r2, [pc, #64]	; (8012d44 <TIM_Base_SetConfig+0xf4>)
 8012d04:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012d06:	68ca      	ldr	r2, [r1, #12]
 8012d08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012d0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012d0c:	688b      	ldr	r3, [r1, #8]
 8012d0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012d10:	680b      	ldr	r3, [r1, #0]
 8012d12:	6283      	str	r3, [r0, #40]	; 0x28
 8012d14:	e7dc      	b.n	8012cd0 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012d16:	4a0b      	ldr	r2, [pc, #44]	; (8012d44 <TIM_Base_SetConfig+0xf4>)
 8012d18:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012d1a:	68ca      	ldr	r2, [r1, #12]
 8012d1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012d1e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012d20:	688b      	ldr	r3, [r1, #8]
 8012d22:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012d24:	680b      	ldr	r3, [r1, #0]
 8012d26:	6283      	str	r3, [r0, #40]	; 0x28
 8012d28:	e7d2      	b.n	8012cd0 <TIM_Base_SetConfig+0x80>
 8012d2a:	46c0      	nop			; (mov r8, r8)
 8012d2c:	40012c00 	.word	0x40012c00
 8012d30:	40000400 	.word	0x40000400
 8012d34:	40002000 	.word	0x40002000
 8012d38:	40014000 	.word	0x40014000
 8012d3c:	40014400 	.word	0x40014400
 8012d40:	40014800 	.word	0x40014800
 8012d44:	fffffcff 	.word	0xfffffcff

08012d48 <HAL_TIM_Base_Init>:
{
 8012d48:	b570      	push	{r4, r5, r6, lr}
 8012d4a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012d4c:	d014      	beq.n	8012d78 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012d4e:	2339      	movs	r3, #57	; 0x39
 8012d50:	5cc3      	ldrb	r3, [r0, r3]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00a      	beq.n	8012d6c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012d56:	2539      	movs	r5, #57	; 0x39
 8012d58:	2302      	movs	r3, #2
 8012d5a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012d5c:	1d21      	adds	r1, r4, #4
 8012d5e:	6820      	ldr	r0, [r4, #0]
 8012d60:	f7ff ff76 	bl	8012c50 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012d64:	2301      	movs	r3, #1
 8012d66:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012d68:	2000      	movs	r0, #0
}
 8012d6a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012d6c:	3338      	adds	r3, #56	; 0x38
 8012d6e:	2200      	movs	r2, #0
 8012d70:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012d72:	f7ff ff5f 	bl	8012c34 <HAL_TIM_Base_MspInit>
 8012d76:	e7ee      	b.n	8012d56 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012d78:	2001      	movs	r0, #1
 8012d7a:	e7f6      	b.n	8012d6a <HAL_TIM_Base_Init+0x22>

08012d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012d7e:	2338      	movs	r3, #56	; 0x38
 8012d80:	5cc3      	ldrb	r3, [r0, r3]
 8012d82:	2b01      	cmp	r3, #1
 8012d84:	d01e      	beq.n	8012dc4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012d86:	2238      	movs	r2, #56	; 0x38
 8012d88:	2501      	movs	r5, #1
 8012d8a:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012d8c:	2439      	movs	r4, #57	; 0x39
 8012d8e:	2302      	movs	r3, #2
 8012d90:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012d92:	6806      	ldr	r6, [r0, #0]
 8012d94:	6873      	ldr	r3, [r6, #4]
 8012d96:	2770      	movs	r7, #112	; 0x70
 8012d98:	43bb      	bics	r3, r7
 8012d9a:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012d9c:	6806      	ldr	r6, [r0, #0]
 8012d9e:	6873      	ldr	r3, [r6, #4]
 8012da0:	680f      	ldr	r7, [r1, #0]
 8012da2:	433b      	orrs	r3, r7
 8012da4:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012da6:	6806      	ldr	r6, [r0, #0]
 8012da8:	68b3      	ldr	r3, [r6, #8]
 8012daa:	2780      	movs	r7, #128	; 0x80
 8012dac:	43bb      	bics	r3, r7
 8012dae:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012db0:	6806      	ldr	r6, [r0, #0]
 8012db2:	68b3      	ldr	r3, [r6, #8]
 8012db4:	6849      	ldr	r1, [r1, #4]
 8012db6:	430b      	orrs	r3, r1
 8012db8:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012dba:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012dc0:	2000      	movs	r0, #0
}
 8012dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012dc4:	2002      	movs	r0, #2
 8012dc6:	e7fc      	b.n	8012dc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012dc8 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012dc8:	4770      	bx	lr

08012dca <HAL_UART_DeInit>:
{
 8012dca:	b570      	push	{r4, r5, r6, lr}
 8012dcc:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012dce:	2001      	movs	r0, #1
  if(huart == NULL)
 8012dd0:	2c00      	cmp	r4, #0
 8012dd2:	d016      	beq.n	8012e02 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012dd4:	2669      	movs	r6, #105	; 0x69
 8012dd6:	2302      	movs	r3, #2
 8012dd8:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012dda:	6822      	ldr	r2, [r4, #0]
 8012ddc:	6813      	ldr	r3, [r2, #0]
 8012dde:	2101      	movs	r1, #1
 8012de0:	438b      	bics	r3, r1
 8012de2:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012de4:	6823      	ldr	r3, [r4, #0]
 8012de6:	2500      	movs	r5, #0
 8012de8:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012dee:	6823      	ldr	r3, [r4, #0]
 8012df0:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012df2:	0020      	movs	r0, r4
 8012df4:	f7ff ffe8 	bl	8012dc8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012df8:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012dfa:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012dfc:	2368      	movs	r3, #104	; 0x68
 8012dfe:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012e00:	2000      	movs	r0, #0
}
 8012e02:	bd70      	pop	{r4, r5, r6, pc}

08012e04 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012e04:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012e06:	2369      	movs	r3, #105	; 0x69
 8012e08:	5cc3      	ldrb	r3, [r0, r3]
 8012e0a:	2b01      	cmp	r3, #1
 8012e0c:	d004      	beq.n	8012e18 <HAL_UART_Transmit_IT+0x14>
 8012e0e:	2369      	movs	r3, #105	; 0x69
 8012e10:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012e12:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012e14:	2c22      	cmp	r4, #34	; 0x22
 8012e16:	d127      	bne.n	8012e68 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8012e18:	2900      	cmp	r1, #0
 8012e1a:	d02b      	beq.n	8012e74 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8012e1c:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012e1e:	2a00      	cmp	r2, #0
 8012e20:	d022      	beq.n	8012e68 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012e22:	3367      	adds	r3, #103	; 0x67
 8012e24:	5cc3      	ldrb	r3, [r0, r3]
 8012e26:	2b01      	cmp	r3, #1
 8012e28:	d026      	beq.n	8012e78 <HAL_UART_Transmit_IT+0x74>
 8012e2a:	2368      	movs	r3, #104	; 0x68
 8012e2c:	2401      	movs	r4, #1
 8012e2e:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012e30:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012e32:	3b18      	subs	r3, #24
 8012e34:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012e36:	3302      	adds	r3, #2
 8012e38:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012e3e:	3369      	adds	r3, #105	; 0x69
 8012e40:	5cc3      	ldrb	r3, [r0, r3]
 8012e42:	2b22      	cmp	r3, #34	; 0x22
 8012e44:	d012      	beq.n	8012e6c <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012e46:	2369      	movs	r3, #105	; 0x69
 8012e48:	2212      	movs	r2, #18
 8012e4a:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012e4c:	6802      	ldr	r2, [r0, #0]
 8012e4e:	6893      	ldr	r3, [r2, #8]
 8012e50:	2101      	movs	r1, #1
 8012e52:	430b      	orrs	r3, r1
 8012e54:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012e56:	2368      	movs	r3, #104	; 0x68
 8012e58:	2200      	movs	r2, #0
 8012e5a:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012e5c:	6802      	ldr	r2, [r0, #0]
 8012e5e:	6813      	ldr	r3, [r2, #0]
 8012e60:	317f      	adds	r1, #127	; 0x7f
 8012e62:	430b      	orrs	r3, r1
 8012e64:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012e66:	2300      	movs	r3, #0
  }
}
 8012e68:	0018      	movs	r0, r3
 8012e6a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012e6c:	3347      	adds	r3, #71	; 0x47
 8012e6e:	2232      	movs	r2, #50	; 0x32
 8012e70:	54c2      	strb	r2, [r0, r3]
 8012e72:	e7eb      	b.n	8012e4c <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8012e74:	2301      	movs	r3, #1
 8012e76:	e7f7      	b.n	8012e68 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012e78:	2302      	movs	r3, #2
 8012e7a:	e7f5      	b.n	8012e68 <HAL_UART_Transmit_IT+0x64>

08012e7c <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012e7c:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012e7e:	2369      	movs	r3, #105	; 0x69
 8012e80:	5cc3      	ldrb	r3, [r0, r3]
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d004      	beq.n	8012e90 <HAL_UART_Receive_IT+0x14>
 8012e86:	2369      	movs	r3, #105	; 0x69
 8012e88:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012e8a:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012e8c:	2c12      	cmp	r4, #18
 8012e8e:	d14e      	bne.n	8012f2e <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8012e90:	2900      	cmp	r1, #0
 8012e92:	d05d      	beq.n	8012f50 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8012e94:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012e96:	2a00      	cmp	r2, #0
 8012e98:	d049      	beq.n	8012f2e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012e9a:	3367      	adds	r3, #103	; 0x67
 8012e9c:	5cc3      	ldrb	r3, [r0, r3]
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d058      	beq.n	8012f54 <HAL_UART_Receive_IT+0xd8>
 8012ea2:	2368      	movs	r3, #104	; 0x68
 8012ea4:	2401      	movs	r4, #1
 8012ea6:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8012ea8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012eaa:	3b10      	subs	r3, #16
 8012eac:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012eae:	3302      	adds	r3, #2
 8012eb0:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8012eb2:	6883      	ldr	r3, [r0, #8]
 8012eb4:	2280      	movs	r2, #128	; 0x80
 8012eb6:	0152      	lsls	r2, r2, #5
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	d008      	beq.n	8012ece <HAL_UART_Receive_IT+0x52>
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d115      	bne.n	8012eec <HAL_UART_Receive_IT+0x70>
 8012ec0:	6903      	ldr	r3, [r0, #16]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d10e      	bne.n	8012ee4 <HAL_UART_Receive_IT+0x68>
 8012ec6:	335c      	adds	r3, #92	; 0x5c
 8012ec8:	22ff      	movs	r2, #255	; 0xff
 8012eca:	52c2      	strh	r2, [r0, r3]
 8012ecc:	e012      	b.n	8012ef4 <HAL_UART_Receive_IT+0x78>
 8012ece:	6903      	ldr	r3, [r0, #16]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d103      	bne.n	8012edc <HAL_UART_Receive_IT+0x60>
 8012ed4:	335c      	adds	r3, #92	; 0x5c
 8012ed6:	4a20      	ldr	r2, [pc, #128]	; (8012f58 <HAL_UART_Receive_IT+0xdc>)
 8012ed8:	52c2      	strh	r2, [r0, r3]
 8012eda:	e00b      	b.n	8012ef4 <HAL_UART_Receive_IT+0x78>
 8012edc:	235c      	movs	r3, #92	; 0x5c
 8012ede:	22ff      	movs	r2, #255	; 0xff
 8012ee0:	52c2      	strh	r2, [r0, r3]
 8012ee2:	e007      	b.n	8012ef4 <HAL_UART_Receive_IT+0x78>
 8012ee4:	235c      	movs	r3, #92	; 0x5c
 8012ee6:	227f      	movs	r2, #127	; 0x7f
 8012ee8:	52c2      	strh	r2, [r0, r3]
 8012eea:	e003      	b.n	8012ef4 <HAL_UART_Receive_IT+0x78>
 8012eec:	2280      	movs	r2, #128	; 0x80
 8012eee:	0552      	lsls	r2, r2, #21
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d01e      	beq.n	8012f32 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012ef8:	3369      	adds	r3, #105	; 0x69
 8012efa:	5cc3      	ldrb	r3, [r0, r3]
 8012efc:	2b12      	cmp	r3, #18
 8012efe:	d023      	beq.n	8012f48 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012f00:	2369      	movs	r3, #105	; 0x69
 8012f02:	2222      	movs	r2, #34	; 0x22
 8012f04:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012f06:	6802      	ldr	r2, [r0, #0]
 8012f08:	6811      	ldr	r1, [r2, #0]
 8012f0a:	2380      	movs	r3, #128	; 0x80
 8012f0c:	005b      	lsls	r3, r3, #1
 8012f0e:	430b      	orrs	r3, r1
 8012f10:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012f12:	6802      	ldr	r2, [r0, #0]
 8012f14:	6893      	ldr	r3, [r2, #8]
 8012f16:	2101      	movs	r1, #1
 8012f18:	430b      	orrs	r3, r1
 8012f1a:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012f1c:	2368      	movs	r3, #104	; 0x68
 8012f1e:	2200      	movs	r2, #0
 8012f20:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012f22:	6802      	ldr	r2, [r0, #0]
 8012f24:	6813      	ldr	r3, [r2, #0]
 8012f26:	311f      	adds	r1, #31
 8012f28:	430b      	orrs	r3, r1
 8012f2a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012f2c:	2300      	movs	r3, #0
  }
}
 8012f2e:	0018      	movs	r0, r3
 8012f30:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012f32:	6903      	ldr	r3, [r0, #16]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d103      	bne.n	8012f40 <HAL_UART_Receive_IT+0xc4>
 8012f38:	335c      	adds	r3, #92	; 0x5c
 8012f3a:	227f      	movs	r2, #127	; 0x7f
 8012f3c:	52c2      	strh	r2, [r0, r3]
 8012f3e:	e7d9      	b.n	8012ef4 <HAL_UART_Receive_IT+0x78>
 8012f40:	235c      	movs	r3, #92	; 0x5c
 8012f42:	223f      	movs	r2, #63	; 0x3f
 8012f44:	52c2      	strh	r2, [r0, r3]
 8012f46:	e7d5      	b.n	8012ef4 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012f48:	3357      	adds	r3, #87	; 0x57
 8012f4a:	2232      	movs	r2, #50	; 0x32
 8012f4c:	54c2      	strb	r2, [r0, r3]
 8012f4e:	e7da      	b.n	8012f06 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8012f50:	2301      	movs	r3, #1
 8012f52:	e7ec      	b.n	8012f2e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012f54:	2302      	movs	r3, #2
 8012f56:	e7ea      	b.n	8012f2e <HAL_UART_Receive_IT+0xb2>
 8012f58:	000001ff 	.word	0x000001ff

08012f5c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f5c:	b510      	push	{r4, lr}
 8012f5e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f60:	2369      	movs	r3, #105	; 0x69
 8012f62:	5cc3      	ldrb	r3, [r0, r3]
 8012f64:	2b01      	cmp	r3, #1
 8012f66:	d004      	beq.n	8012f72 <HAL_UART_Transmit_DMA+0x16>
 8012f68:	2369      	movs	r3, #105	; 0x69
 8012f6a:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012f6c:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f6e:	2b22      	cmp	r3, #34	; 0x22
 8012f70:	d134      	bne.n	8012fdc <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8012f72:	2900      	cmp	r1, #0
 8012f74:	d037      	beq.n	8012fe6 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8012f76:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012f78:	2a00      	cmp	r2, #0
 8012f7a:	d02f      	beq.n	8012fdc <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012f7c:	2368      	movs	r3, #104	; 0x68
 8012f7e:	5ce3      	ldrb	r3, [r4, r3]
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d032      	beq.n	8012fea <HAL_UART_Transmit_DMA+0x8e>
 8012f84:	2368      	movs	r3, #104	; 0x68
 8012f86:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8012f88:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012f8a:	3b18      	subs	r3, #24
 8012f8c:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012f8e:	3302      	adds	r3, #2
 8012f90:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f92:	2300      	movs	r3, #0
 8012f94:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012f96:	3369      	adds	r3, #105	; 0x69
 8012f98:	5ce3      	ldrb	r3, [r4, r3]
 8012f9a:	2b22      	cmp	r3, #34	; 0x22
 8012f9c:	d01f      	beq.n	8012fde <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012f9e:	2369      	movs	r3, #105	; 0x69
 8012fa0:	2012      	movs	r0, #18
 8012fa2:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012fa4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012fa6:	4812      	ldr	r0, [pc, #72]	; (8012ff0 <HAL_UART_Transmit_DMA+0x94>)
 8012fa8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012faa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012fac:	4811      	ldr	r0, [pc, #68]	; (8012ff4 <HAL_UART_Transmit_DMA+0x98>)
 8012fae:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012fb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012fb2:	4811      	ldr	r0, [pc, #68]	; (8012ff8 <HAL_UART_Transmit_DMA+0x9c>)
 8012fb4:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012fb6:	6820      	ldr	r0, [r4, #0]
 8012fb8:	3028      	adds	r0, #40	; 0x28
 8012fba:	0013      	movs	r3, r2
 8012fbc:	0002      	movs	r2, r0
 8012fbe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012fc0:	f7fd ffb0 	bl	8010f24 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	2240      	movs	r2, #64	; 0x40
 8012fc8:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012fca:	6822      	ldr	r2, [r4, #0]
 8012fcc:	6893      	ldr	r3, [r2, #8]
 8012fce:	2180      	movs	r1, #128	; 0x80
 8012fd0:	430b      	orrs	r3, r1
 8012fd2:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012fd4:	2368      	movs	r3, #104	; 0x68
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012fda:	2000      	movs	r0, #0
  }
}
 8012fdc:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012fde:	3347      	adds	r3, #71	; 0x47
 8012fe0:	3031      	adds	r0, #49	; 0x31
 8012fe2:	54e0      	strb	r0, [r4, r3]
 8012fe4:	e7de      	b.n	8012fa4 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8012fe6:	2001      	movs	r0, #1
 8012fe8:	e7f8      	b.n	8012fdc <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012fea:	2002      	movs	r0, #2
 8012fec:	e7f6      	b.n	8012fdc <HAL_UART_Transmit_DMA+0x80>
 8012fee:	46c0      	nop			; (mov r8, r8)
 8012ff0:	08013095 	.word	0x08013095
 8012ff4:	080130c7 	.word	0x080130c7
 8012ff8:	08013117 	.word	0x08013117

08012ffc <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013000:	2069      	movs	r0, #105	; 0x69
 8013002:	5c20      	ldrb	r0, [r4, r0]
 8013004:	2801      	cmp	r0, #1
 8013006:	d004      	beq.n	8013012 <HAL_UART_Receive_DMA+0x16>
 8013008:	2369      	movs	r3, #105	; 0x69
 801300a:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801300c:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 801300e:	2b12      	cmp	r3, #18
 8013010:	d130      	bne.n	8013074 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013012:	2900      	cmp	r1, #0
 8013014:	d033      	beq.n	801307e <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8013016:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013018:	2a00      	cmp	r2, #0
 801301a:	d02b      	beq.n	8013074 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 801301c:	2368      	movs	r3, #104	; 0x68
 801301e:	5ce3      	ldrb	r3, [r4, r3]
 8013020:	2b01      	cmp	r3, #1
 8013022:	d02e      	beq.n	8013082 <HAL_UART_Receive_DMA+0x86>
 8013024:	2368      	movs	r3, #104	; 0x68
 8013026:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8013028:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801302a:	3b10      	subs	r3, #16
 801302c:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801302e:	2300      	movs	r3, #0
 8013030:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013032:	3369      	adds	r3, #105	; 0x69
 8013034:	5ce3      	ldrb	r3, [r4, r3]
 8013036:	2b12      	cmp	r3, #18
 8013038:	d01d      	beq.n	8013076 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801303a:	2369      	movs	r3, #105	; 0x69
 801303c:	2022      	movs	r0, #34	; 0x22
 801303e:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013042:	4811      	ldr	r0, [pc, #68]	; (8013088 <HAL_UART_Receive_DMA+0x8c>)
 8013044:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013048:	4810      	ldr	r0, [pc, #64]	; (801308c <HAL_UART_Receive_DMA+0x90>)
 801304a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801304c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801304e:	4810      	ldr	r0, [pc, #64]	; (8013090 <HAL_UART_Receive_DMA+0x94>)
 8013050:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013052:	6820      	ldr	r0, [r4, #0]
 8013054:	3024      	adds	r0, #36	; 0x24
 8013056:	0013      	movs	r3, r2
 8013058:	000a      	movs	r2, r1
 801305a:	0001      	movs	r1, r0
 801305c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801305e:	f7fd ff61 	bl	8010f24 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013062:	6822      	ldr	r2, [r4, #0]
 8013064:	6893      	ldr	r3, [r2, #8]
 8013066:	2140      	movs	r1, #64	; 0x40
 8013068:	430b      	orrs	r3, r1
 801306a:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 801306c:	2368      	movs	r3, #104	; 0x68
 801306e:	2200      	movs	r2, #0
 8013070:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013072:	2000      	movs	r0, #0
  }
}
 8013074:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013076:	3357      	adds	r3, #87	; 0x57
 8013078:	3031      	adds	r0, #49	; 0x31
 801307a:	54e0      	strb	r0, [r4, r3]
 801307c:	e7e0      	b.n	8013040 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 801307e:	2001      	movs	r0, #1
 8013080:	e7f8      	b.n	8013074 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013082:	2002      	movs	r0, #2
 8013084:	e7f6      	b.n	8013074 <HAL_UART_Receive_DMA+0x78>
 8013086:	46c0      	nop			; (mov r8, r8)
 8013088:	080130d1 	.word	0x080130d1
 801308c:	0801310d 	.word	0x0801310d
 8013090:	08013117 	.word	0x08013117

08013094 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013094:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013096:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013098:	6802      	ldr	r2, [r0, #0]
 801309a:	6812      	ldr	r2, [r2, #0]
 801309c:	0692      	lsls	r2, r2, #26
 801309e:	d40d      	bmi.n	80130bc <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80130a0:	2252      	movs	r2, #82	; 0x52
 80130a2:	2100      	movs	r1, #0
 80130a4:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80130a6:	6819      	ldr	r1, [r3, #0]
 80130a8:	688a      	ldr	r2, [r1, #8]
 80130aa:	2080      	movs	r0, #128	; 0x80
 80130ac:	4382      	bics	r2, r0
 80130ae:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	6813      	ldr	r3, [r2, #0]
 80130b4:	2140      	movs	r1, #64	; 0x40
 80130b6:	430b      	orrs	r3, r1
 80130b8:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80130ba:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80130bc:	0018      	movs	r0, r3
 80130be:	f7fa fc19 	bl	800d8f4 <HAL_UART_TxCpltCallback>
}
 80130c2:	e7fa      	b.n	80130ba <UART_DMATransmitCplt+0x26>

080130c4 <HAL_UART_TxHalfCpltCallback>:
}
 80130c4:	4770      	bx	lr

080130c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80130c6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80130c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80130ca:	f7ff fffb 	bl	80130c4 <HAL_UART_TxHalfCpltCallback>
}
 80130ce:	bd10      	pop	{r4, pc}

080130d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80130d0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80130d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80130d4:	6802      	ldr	r2, [r0, #0]
 80130d6:	6812      	ldr	r2, [r2, #0]
 80130d8:	0692      	lsls	r2, r2, #26
 80130da:	d40e      	bmi.n	80130fa <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 80130dc:	225a      	movs	r2, #90	; 0x5a
 80130de:	2100      	movs	r1, #0
 80130e0:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80130e2:	6819      	ldr	r1, [r3, #0]
 80130e4:	688a      	ldr	r2, [r1, #8]
 80130e6:	2040      	movs	r0, #64	; 0x40
 80130e8:	4382      	bics	r2, r0
 80130ea:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80130ec:	2269      	movs	r2, #105	; 0x69
 80130ee:	5c9a      	ldrb	r2, [r3, r2]
 80130f0:	2a32      	cmp	r2, #50	; 0x32
 80130f2:	d006      	beq.n	8013102 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80130f4:	2269      	movs	r2, #105	; 0x69
 80130f6:	2101      	movs	r1, #1
 80130f8:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80130fa:	0018      	movs	r0, r3
 80130fc:	f7fa fc38 	bl	800d970 <HAL_UART_RxCpltCallback>
}
 8013100:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013102:	3237      	adds	r2, #55	; 0x37
 8013104:	2112      	movs	r1, #18
 8013106:	5499      	strb	r1, [r3, r2]
 8013108:	e7f7      	b.n	80130fa <UART_DMAReceiveCplt+0x2a>

0801310a <HAL_UART_RxHalfCpltCallback>:
}
 801310a:	4770      	bx	lr

0801310c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801310c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801310e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013110:	f7ff fffb 	bl	801310a <HAL_UART_RxHalfCpltCallback>
}
 8013114:	bd10      	pop	{r4, pc}

08013116 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013116:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013118:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801311a:	2300      	movs	r3, #0
 801311c:	225a      	movs	r2, #90	; 0x5a
 801311e:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013120:	3a08      	subs	r2, #8
 8013122:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013124:	3369      	adds	r3, #105	; 0x69
 8013126:	3a51      	subs	r2, #81	; 0x51
 8013128:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801312a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801312c:	320f      	adds	r2, #15
 801312e:	4313      	orrs	r3, r2
 8013130:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8013132:	f7fa fbf7 	bl	800d924 <HAL_UART_ErrorCallback>
}
 8013136:	bd10      	pop	{r4, pc}

08013138 <UART_SetConfig>:
{
 8013138:	b570      	push	{r4, r5, r6, lr}
 801313a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801313c:	6801      	ldr	r1, [r0, #0]
 801313e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013140:	6883      	ldr	r3, [r0, #8]
 8013142:	6900      	ldr	r0, [r0, #16]
 8013144:	4303      	orrs	r3, r0
 8013146:	6960      	ldr	r0, [r4, #20]
 8013148:	4303      	orrs	r3, r0
 801314a:	69e0      	ldr	r0, [r4, #28]
 801314c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801314e:	487e      	ldr	r0, [pc, #504]	; (8013348 <UART_SetConfig+0x210>)
 8013150:	4002      	ands	r2, r0
 8013152:	4313      	orrs	r3, r2
 8013154:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013156:	6822      	ldr	r2, [r4, #0]
 8013158:	6853      	ldr	r3, [r2, #4]
 801315a:	497c      	ldr	r1, [pc, #496]	; (801334c <UART_SetConfig+0x214>)
 801315c:	400b      	ands	r3, r1
 801315e:	68e1      	ldr	r1, [r4, #12]
 8013160:	430b      	orrs	r3, r1
 8013162:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013164:	6821      	ldr	r1, [r4, #0]
 8013166:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013168:	69a3      	ldr	r3, [r4, #24]
 801316a:	6a20      	ldr	r0, [r4, #32]
 801316c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801316e:	4878      	ldr	r0, [pc, #480]	; (8013350 <UART_SetConfig+0x218>)
 8013170:	4002      	ands	r2, r0
 8013172:	4313      	orrs	r3, r2
 8013174:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013176:	6825      	ldr	r5, [r4, #0]
 8013178:	4b76      	ldr	r3, [pc, #472]	; (8013354 <UART_SetConfig+0x21c>)
 801317a:	429d      	cmp	r5, r3
 801317c:	d022      	beq.n	80131c4 <UART_SetConfig+0x8c>
 801317e:	4b76      	ldr	r3, [pc, #472]	; (8013358 <UART_SetConfig+0x220>)
 8013180:	429d      	cmp	r5, r3
 8013182:	d034      	beq.n	80131ee <UART_SetConfig+0xb6>
 8013184:	4b75      	ldr	r3, [pc, #468]	; (801335c <UART_SetConfig+0x224>)
 8013186:	429d      	cmp	r5, r3
 8013188:	d100      	bne.n	801318c <UART_SetConfig+0x54>
 801318a:	e06b      	b.n	8013264 <UART_SetConfig+0x12c>
 801318c:	4b74      	ldr	r3, [pc, #464]	; (8013360 <UART_SetConfig+0x228>)
 801318e:	429d      	cmp	r5, r3
 8013190:	d100      	bne.n	8013194 <UART_SetConfig+0x5c>
 8013192:	e08e      	b.n	80132b2 <UART_SetConfig+0x17a>
 8013194:	4b73      	ldr	r3, [pc, #460]	; (8013364 <UART_SetConfig+0x22c>)
 8013196:	429d      	cmp	r5, r3
 8013198:	d100      	bne.n	801319c <UART_SetConfig+0x64>
 801319a:	e08a      	b.n	80132b2 <UART_SetConfig+0x17a>
 801319c:	4b72      	ldr	r3, [pc, #456]	; (8013368 <UART_SetConfig+0x230>)
 801319e:	429d      	cmp	r5, r3
 80131a0:	d100      	bne.n	80131a4 <UART_SetConfig+0x6c>
 80131a2:	e086      	b.n	80132b2 <UART_SetConfig+0x17a>
 80131a4:	4b71      	ldr	r3, [pc, #452]	; (801336c <UART_SetConfig+0x234>)
 80131a6:	429d      	cmp	r5, r3
 80131a8:	d100      	bne.n	80131ac <UART_SetConfig+0x74>
 80131aa:	e082      	b.n	80132b2 <UART_SetConfig+0x17a>
 80131ac:	4b70      	ldr	r3, [pc, #448]	; (8013370 <UART_SetConfig+0x238>)
 80131ae:	429d      	cmp	r5, r3
 80131b0:	d100      	bne.n	80131b4 <UART_SetConfig+0x7c>
 80131b2:	e07e      	b.n	80132b2 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131b4:	2380      	movs	r3, #128	; 0x80
 80131b6:	021b      	lsls	r3, r3, #8
 80131b8:	69e2      	ldr	r2, [r4, #28]
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d100      	bne.n	80131c0 <UART_SetConfig+0x88>
 80131be:	e072      	b.n	80132a6 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80131c0:	2001      	movs	r0, #1
 80131c2:	e04e      	b.n	8013262 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131c4:	4b6b      	ldr	r3, [pc, #428]	; (8013374 <UART_SetConfig+0x23c>)
 80131c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131c8:	2303      	movs	r3, #3
 80131ca:	4013      	ands	r3, r2
 80131cc:	2b01      	cmp	r3, #1
 80131ce:	d100      	bne.n	80131d2 <UART_SetConfig+0x9a>
 80131d0:	e09a      	b.n	8013308 <UART_SetConfig+0x1d0>
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d02f      	beq.n	8013236 <UART_SetConfig+0xfe>
 80131d6:	2b02      	cmp	r3, #2
 80131d8:	d100      	bne.n	80131dc <UART_SetConfig+0xa4>
 80131da:	e0a5      	b.n	8013328 <UART_SetConfig+0x1f0>
 80131dc:	2b03      	cmp	r3, #3
 80131de:	d01a      	beq.n	8013216 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80131e0:	2380      	movs	r3, #128	; 0x80
 80131e2:	021b      	lsls	r3, r3, #8
 80131e4:	69e2      	ldr	r2, [r4, #28]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d060      	beq.n	80132ac <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 80131ea:	2001      	movs	r0, #1
 80131ec:	e039      	b.n	8013262 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131ee:	4b61      	ldr	r3, [pc, #388]	; (8013374 <UART_SetConfig+0x23c>)
 80131f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f2:	22c0      	movs	r2, #192	; 0xc0
 80131f4:	0292      	lsls	r2, r2, #10
 80131f6:	4013      	ands	r3, r2
 80131f8:	2280      	movs	r2, #128	; 0x80
 80131fa:	0252      	lsls	r2, r2, #9
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d100      	bne.n	8013202 <UART_SetConfig+0xca>
 8013200:	e082      	b.n	8013308 <UART_SetConfig+0x1d0>
 8013202:	d916      	bls.n	8013232 <UART_SetConfig+0xfa>
 8013204:	2280      	movs	r2, #128	; 0x80
 8013206:	0292      	lsls	r2, r2, #10
 8013208:	4293      	cmp	r3, r2
 801320a:	d100      	bne.n	801320e <UART_SetConfig+0xd6>
 801320c:	e08c      	b.n	8013328 <UART_SetConfig+0x1f0>
 801320e:	22c0      	movs	r2, #192	; 0xc0
 8013210:	0292      	lsls	r2, r2, #10
 8013212:	4293      	cmp	r3, r2
 8013214:	d1e4      	bne.n	80131e0 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013216:	2380      	movs	r3, #128	; 0x80
 8013218:	021b      	lsls	r3, r3, #8
 801321a:	69e2      	ldr	r2, [r4, #28]
 801321c:	429a      	cmp	r2, r3
 801321e:	d038      	beq.n	8013292 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013220:	6861      	ldr	r1, [r4, #4]
 8013222:	4855      	ldr	r0, [pc, #340]	; (8013378 <UART_SetConfig+0x240>)
 8013224:	f7ec ff8a 	bl	800013c <__udivsi3>
 8013228:	0400      	lsls	r0, r0, #16
 801322a:	0c00      	lsrs	r0, r0, #16
 801322c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801322e:	2000      	movs	r0, #0
        break;
 8013230:	e017      	b.n	8013262 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013232:	2b00      	cmp	r3, #0
 8013234:	d1d4      	bne.n	80131e0 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013236:	2380      	movs	r3, #128	; 0x80
 8013238:	021b      	lsls	r3, r3, #8
 801323a:	69e2      	ldr	r2, [r4, #28]
 801323c:	429a      	cmp	r2, r3
 801323e:	d13d      	bne.n	80132bc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013240:	f7ff fa5c 	bl	80126fc <HAL_RCC_GetPCLK1Freq>
 8013244:	0040      	lsls	r0, r0, #1
 8013246:	6861      	ldr	r1, [r4, #4]
 8013248:	f7ec ff78 	bl	800013c <__udivsi3>
 801324c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801324e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013250:	220f      	movs	r2, #15
 8013252:	0019      	movs	r1, r3
 8013254:	4391      	bics	r1, r2
 8013256:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013258:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 801325a:	071b      	lsls	r3, r3, #28
 801325c:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 801325e:	4313      	orrs	r3, r2
 8013260:	60cb      	str	r3, [r1, #12]
}
 8013262:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013264:	4b43      	ldr	r3, [pc, #268]	; (8013374 <UART_SetConfig+0x23c>)
 8013266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013268:	22c0      	movs	r2, #192	; 0xc0
 801326a:	0312      	lsls	r2, r2, #12
 801326c:	4013      	ands	r3, r2
 801326e:	2280      	movs	r2, #128	; 0x80
 8013270:	02d2      	lsls	r2, r2, #11
 8013272:	4293      	cmp	r3, r2
 8013274:	d02d      	beq.n	80132d2 <UART_SetConfig+0x19a>
 8013276:	d913      	bls.n	80132a0 <UART_SetConfig+0x168>
 8013278:	2280      	movs	r2, #128	; 0x80
 801327a:	0312      	lsls	r2, r2, #12
 801327c:	4293      	cmp	r3, r2
 801327e:	d036      	beq.n	80132ee <UART_SetConfig+0x1b6>
 8013280:	22c0      	movs	r2, #192	; 0xc0
 8013282:	0312      	lsls	r2, r2, #12
 8013284:	4293      	cmp	r3, r2
 8013286:	d1ab      	bne.n	80131e0 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013288:	2380      	movs	r3, #128	; 0x80
 801328a:	021b      	lsls	r3, r3, #8
 801328c:	69e2      	ldr	r2, [r4, #28]
 801328e:	429a      	cmp	r2, r3
 8013290:	d1c6      	bne.n	8013220 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013292:	6861      	ldr	r1, [r4, #4]
 8013294:	4839      	ldr	r0, [pc, #228]	; (801337c <UART_SetConfig+0x244>)
 8013296:	f7ec ff51 	bl	800013c <__udivsi3>
 801329a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801329c:	2000      	movs	r0, #0
        break;
 801329e:	e7d7      	b.n	8013250 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d0c8      	beq.n	8013236 <UART_SetConfig+0xfe>
 80132a4:	e79c      	b.n	80131e0 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80132a6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80132a8:	2300      	movs	r3, #0
 80132aa:	e7d1      	b.n	8013250 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80132ac:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80132ae:	2300      	movs	r3, #0
 80132b0:	e7ce      	b.n	8013250 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132b2:	2380      	movs	r3, #128	; 0x80
 80132b4:	021b      	lsls	r3, r3, #8
 80132b6:	69e2      	ldr	r2, [r4, #28]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d0c1      	beq.n	8013240 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80132bc:	f7ff fa1e 	bl	80126fc <HAL_RCC_GetPCLK1Freq>
 80132c0:	6825      	ldr	r5, [r4, #0]
 80132c2:	6861      	ldr	r1, [r4, #4]
 80132c4:	f7ec ff3a 	bl	800013c <__udivsi3>
 80132c8:	0400      	lsls	r0, r0, #16
 80132ca:	0c00      	lsrs	r0, r0, #16
 80132cc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80132ce:	2000      	movs	r0, #0
  return ret;
 80132d0:	e7c7      	b.n	8013262 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132d2:	2380      	movs	r3, #128	; 0x80
 80132d4:	021b      	lsls	r3, r3, #8
 80132d6:	69e2      	ldr	r2, [r4, #28]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d11a      	bne.n	8013312 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80132dc:	f7ff f9aa 	bl	8012634 <HAL_RCC_GetSysClockFreq>
 80132e0:	0040      	lsls	r0, r0, #1
 80132e2:	6861      	ldr	r1, [r4, #4]
 80132e4:	f7ec ff2a 	bl	800013c <__udivsi3>
 80132e8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80132ea:	2000      	movs	r0, #0
        break;
 80132ec:	e7b0      	b.n	8013250 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132ee:	2380      	movs	r3, #128	; 0x80
 80132f0:	021b      	lsls	r3, r3, #8
 80132f2:	69e2      	ldr	r2, [r4, #28]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d11c      	bne.n	8013332 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80132f8:	6861      	ldr	r1, [r4, #4]
 80132fa:	2080      	movs	r0, #128	; 0x80
 80132fc:	0240      	lsls	r0, r0, #9
 80132fe:	f7ec ff1d 	bl	800013c <__udivsi3>
 8013302:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013304:	2000      	movs	r0, #0
        break;
 8013306:	e7a3      	b.n	8013250 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013308:	2380      	movs	r3, #128	; 0x80
 801330a:	021b      	lsls	r3, r3, #8
 801330c:	69e2      	ldr	r2, [r4, #28]
 801330e:	429a      	cmp	r2, r3
 8013310:	d0e4      	beq.n	80132dc <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013312:	f7ff f98f 	bl	8012634 <HAL_RCC_GetSysClockFreq>
 8013316:	6825      	ldr	r5, [r4, #0]
 8013318:	6861      	ldr	r1, [r4, #4]
 801331a:	f7ec ff0f 	bl	800013c <__udivsi3>
 801331e:	0400      	lsls	r0, r0, #16
 8013320:	0c00      	lsrs	r0, r0, #16
 8013322:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013324:	2000      	movs	r0, #0
        break;
 8013326:	e79c      	b.n	8013262 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013328:	2380      	movs	r3, #128	; 0x80
 801332a:	021b      	lsls	r3, r3, #8
 801332c:	69e2      	ldr	r2, [r4, #28]
 801332e:	429a      	cmp	r2, r3
 8013330:	d0e2      	beq.n	80132f8 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013332:	6861      	ldr	r1, [r4, #4]
 8013334:	2080      	movs	r0, #128	; 0x80
 8013336:	0200      	lsls	r0, r0, #8
 8013338:	f7ec ff00 	bl	800013c <__udivsi3>
 801333c:	0400      	lsls	r0, r0, #16
 801333e:	0c00      	lsrs	r0, r0, #16
 8013340:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013342:	2000      	movs	r0, #0
        break;
 8013344:	e78d      	b.n	8013262 <UART_SetConfig+0x12a>
 8013346:	46c0      	nop			; (mov r8, r8)
 8013348:	efff69f3 	.word	0xefff69f3
 801334c:	ffffcfff 	.word	0xffffcfff
 8013350:	fffff4ff 	.word	0xfffff4ff
 8013354:	40013800 	.word	0x40013800
 8013358:	40004400 	.word	0x40004400
 801335c:	40004800 	.word	0x40004800
 8013360:	40004c00 	.word	0x40004c00
 8013364:	40005000 	.word	0x40005000
 8013368:	40011400 	.word	0x40011400
 801336c:	40011800 	.word	0x40011800
 8013370:	40011c00 	.word	0x40011c00
 8013374:	40021000 	.word	0x40021000
 8013378:	007a1200 	.word	0x007a1200
 801337c:	00f42400 	.word	0x00f42400

08013380 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013382:	07db      	lsls	r3, r3, #31
 8013384:	d506      	bpl.n	8013394 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013386:	6802      	ldr	r2, [r0, #0]
 8013388:	6853      	ldr	r3, [r2, #4]
 801338a:	492c      	ldr	r1, [pc, #176]	; (801343c <UART_AdvFeatureConfig+0xbc>)
 801338c:	400b      	ands	r3, r1
 801338e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013390:	430b      	orrs	r3, r1
 8013392:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013396:	079b      	lsls	r3, r3, #30
 8013398:	d506      	bpl.n	80133a8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801339a:	6802      	ldr	r2, [r0, #0]
 801339c:	6853      	ldr	r3, [r2, #4]
 801339e:	4928      	ldr	r1, [pc, #160]	; (8013440 <UART_AdvFeatureConfig+0xc0>)
 80133a0:	400b      	ands	r3, r1
 80133a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80133a4:	430b      	orrs	r3, r1
 80133a6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80133a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133aa:	075b      	lsls	r3, r3, #29
 80133ac:	d506      	bpl.n	80133bc <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80133ae:	6802      	ldr	r2, [r0, #0]
 80133b0:	6853      	ldr	r3, [r2, #4]
 80133b2:	4924      	ldr	r1, [pc, #144]	; (8013444 <UART_AdvFeatureConfig+0xc4>)
 80133b4:	400b      	ands	r3, r1
 80133b6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80133b8:	430b      	orrs	r3, r1
 80133ba:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80133bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133be:	071b      	lsls	r3, r3, #28
 80133c0:	d506      	bpl.n	80133d0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80133c2:	6802      	ldr	r2, [r0, #0]
 80133c4:	6853      	ldr	r3, [r2, #4]
 80133c6:	4920      	ldr	r1, [pc, #128]	; (8013448 <UART_AdvFeatureConfig+0xc8>)
 80133c8:	400b      	ands	r3, r1
 80133ca:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80133cc:	430b      	orrs	r3, r1
 80133ce:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80133d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133d2:	06db      	lsls	r3, r3, #27
 80133d4:	d506      	bpl.n	80133e4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80133d6:	6802      	ldr	r2, [r0, #0]
 80133d8:	6893      	ldr	r3, [r2, #8]
 80133da:	491c      	ldr	r1, [pc, #112]	; (801344c <UART_AdvFeatureConfig+0xcc>)
 80133dc:	400b      	ands	r3, r1
 80133de:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80133e0:	430b      	orrs	r3, r1
 80133e2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80133e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133e6:	069b      	lsls	r3, r3, #26
 80133e8:	d506      	bpl.n	80133f8 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80133ea:	6802      	ldr	r2, [r0, #0]
 80133ec:	6893      	ldr	r3, [r2, #8]
 80133ee:	4918      	ldr	r1, [pc, #96]	; (8013450 <UART_AdvFeatureConfig+0xd0>)
 80133f0:	400b      	ands	r3, r1
 80133f2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80133f4:	430b      	orrs	r3, r1
 80133f6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80133f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133fa:	065b      	lsls	r3, r3, #25
 80133fc:	d50b      	bpl.n	8013416 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80133fe:	6802      	ldr	r2, [r0, #0]
 8013400:	6853      	ldr	r3, [r2, #4]
 8013402:	4914      	ldr	r1, [pc, #80]	; (8013454 <UART_AdvFeatureConfig+0xd4>)
 8013404:	400b      	ands	r3, r1
 8013406:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013408:	430b      	orrs	r3, r1
 801340a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801340c:	2380      	movs	r3, #128	; 0x80
 801340e:	035b      	lsls	r3, r3, #13
 8013410:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013412:	429a      	cmp	r2, r3
 8013414:	d00a      	beq.n	801342c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013416:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013418:	061b      	lsls	r3, r3, #24
 801341a:	d506      	bpl.n	801342a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801341c:	6802      	ldr	r2, [r0, #0]
 801341e:	6853      	ldr	r3, [r2, #4]
 8013420:	490d      	ldr	r1, [pc, #52]	; (8013458 <UART_AdvFeatureConfig+0xd8>)
 8013422:	400b      	ands	r3, r1
 8013424:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013426:	430b      	orrs	r3, r1
 8013428:	6053      	str	r3, [r2, #4]
}
 801342a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801342c:	6802      	ldr	r2, [r0, #0]
 801342e:	6853      	ldr	r3, [r2, #4]
 8013430:	490a      	ldr	r1, [pc, #40]	; (801345c <UART_AdvFeatureConfig+0xdc>)
 8013432:	400b      	ands	r3, r1
 8013434:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013436:	430b      	orrs	r3, r1
 8013438:	6053      	str	r3, [r2, #4]
 801343a:	e7ec      	b.n	8013416 <UART_AdvFeatureConfig+0x96>
 801343c:	fffdffff 	.word	0xfffdffff
 8013440:	fffeffff 	.word	0xfffeffff
 8013444:	fffbffff 	.word	0xfffbffff
 8013448:	ffff7fff 	.word	0xffff7fff
 801344c:	ffffefff 	.word	0xffffefff
 8013450:	ffffdfff 	.word	0xffffdfff
 8013454:	ffefffff 	.word	0xffefffff
 8013458:	fff7ffff 	.word	0xfff7ffff
 801345c:	ff9fffff 	.word	0xff9fffff

08013460 <UART_WaitOnFlagUntilTimeout>:
{
 8013460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013462:	46c6      	mov	lr, r8
 8013464:	b500      	push	{lr}
 8013466:	0006      	movs	r6, r0
 8013468:	000c      	movs	r4, r1
 801346a:	0017      	movs	r7, r2
 801346c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801346e:	f7fc ff83 	bl	8010378 <HAL_GetTick>
 8013472:	4680      	mov	r8, r0
  if(Status == RESET)
 8013474:	2f00      	cmp	r7, #0
 8013476:	d029      	beq.n	80134cc <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013478:	6832      	ldr	r2, [r6, #0]
 801347a:	69d3      	ldr	r3, [r2, #28]
 801347c:	4023      	ands	r3, r4
 801347e:	42a3      	cmp	r3, r4
 8013480:	d152      	bne.n	8013528 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013482:	1c6b      	adds	r3, r5, #1
 8013484:	d0f9      	beq.n	801347a <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013486:	2d00      	cmp	r5, #0
 8013488:	d005      	beq.n	8013496 <UART_WaitOnFlagUntilTimeout+0x36>
 801348a:	f7fc ff75 	bl	8010378 <HAL_GetTick>
 801348e:	4643      	mov	r3, r8
 8013490:	1ac0      	subs	r0, r0, r3
 8013492:	42a8      	cmp	r0, r5
 8013494:	d9f0      	bls.n	8013478 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013496:	6832      	ldr	r2, [r6, #0]
 8013498:	6813      	ldr	r3, [r2, #0]
 801349a:	2180      	movs	r1, #128	; 0x80
 801349c:	438b      	bics	r3, r1
 801349e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80134a0:	6832      	ldr	r2, [r6, #0]
 80134a2:	6813      	ldr	r3, [r2, #0]
 80134a4:	3960      	subs	r1, #96	; 0x60
 80134a6:	438b      	bics	r3, r1
 80134a8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80134aa:	6832      	ldr	r2, [r6, #0]
 80134ac:	6813      	ldr	r3, [r2, #0]
 80134ae:	491f      	ldr	r1, [pc, #124]	; (801352c <UART_WaitOnFlagUntilTimeout+0xcc>)
 80134b0:	400b      	ands	r3, r1
 80134b2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80134b4:	6831      	ldr	r1, [r6, #0]
 80134b6:	688b      	ldr	r3, [r1, #8]
 80134b8:	2201      	movs	r2, #1
 80134ba:	4393      	bics	r3, r2
 80134bc:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80134be:	2369      	movs	r3, #105	; 0x69
 80134c0:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 80134c2:	3b01      	subs	r3, #1
 80134c4:	2200      	movs	r2, #0
 80134c6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80134c8:	2003      	movs	r0, #3
 80134ca:	e02a      	b.n	8013522 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80134cc:	6832      	ldr	r2, [r6, #0]
 80134ce:	69d3      	ldr	r3, [r2, #28]
 80134d0:	4023      	ands	r3, r4
 80134d2:	42a3      	cmp	r3, r4
 80134d4:	d024      	beq.n	8013520 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80134d6:	1c6b      	adds	r3, r5, #1
 80134d8:	d0f9      	beq.n	80134ce <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80134da:	2d00      	cmp	r5, #0
 80134dc:	d005      	beq.n	80134ea <UART_WaitOnFlagUntilTimeout+0x8a>
 80134de:	f7fc ff4b 	bl	8010378 <HAL_GetTick>
 80134e2:	4643      	mov	r3, r8
 80134e4:	1ac0      	subs	r0, r0, r3
 80134e6:	42a8      	cmp	r0, r5
 80134e8:	d9f0      	bls.n	80134cc <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80134ea:	6832      	ldr	r2, [r6, #0]
 80134ec:	6813      	ldr	r3, [r2, #0]
 80134ee:	2180      	movs	r1, #128	; 0x80
 80134f0:	438b      	bics	r3, r1
 80134f2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80134f4:	6832      	ldr	r2, [r6, #0]
 80134f6:	6813      	ldr	r3, [r2, #0]
 80134f8:	3960      	subs	r1, #96	; 0x60
 80134fa:	438b      	bics	r3, r1
 80134fc:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80134fe:	6832      	ldr	r2, [r6, #0]
 8013500:	6813      	ldr	r3, [r2, #0]
 8013502:	490a      	ldr	r1, [pc, #40]	; (801352c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013504:	400b      	ands	r3, r1
 8013506:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013508:	6831      	ldr	r1, [r6, #0]
 801350a:	688b      	ldr	r3, [r1, #8]
 801350c:	2201      	movs	r2, #1
 801350e:	4393      	bics	r3, r2
 8013510:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013512:	2369      	movs	r3, #105	; 0x69
 8013514:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013516:	3b01      	subs	r3, #1
 8013518:	2200      	movs	r2, #0
 801351a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801351c:	2003      	movs	r0, #3
 801351e:	e000      	b.n	8013522 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013520:	2000      	movs	r0, #0
}
 8013522:	bc04      	pop	{r2}
 8013524:	4690      	mov	r8, r2
 8013526:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013528:	2000      	movs	r0, #0
 801352a:	e7fa      	b.n	8013522 <UART_WaitOnFlagUntilTimeout+0xc2>
 801352c:	fffffeff 	.word	0xfffffeff

08013530 <HAL_UART_Transmit>:
{
 8013530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013532:	b083      	sub	sp, #12
 8013534:	0004      	movs	r4, r0
 8013536:	000e      	movs	r6, r1
 8013538:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801353a:	2369      	movs	r3, #105	; 0x69
 801353c:	5cc3      	ldrb	r3, [r0, r3]
 801353e:	2b01      	cmp	r3, #1
 8013540:	d004      	beq.n	801354c <HAL_UART_Transmit+0x1c>
 8013542:	2369      	movs	r3, #105	; 0x69
 8013544:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8013546:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013548:	2b22      	cmp	r3, #34	; 0x22
 801354a:	d153      	bne.n	80135f4 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 801354c:	2e00      	cmp	r6, #0
 801354e:	d050      	beq.n	80135f2 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8013550:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013552:	2a00      	cmp	r2, #0
 8013554:	d04e      	beq.n	80135f4 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013556:	2368      	movs	r3, #104	; 0x68
 8013558:	5ce3      	ldrb	r3, [r4, r3]
 801355a:	2b01      	cmp	r3, #1
 801355c:	d04c      	beq.n	80135f8 <HAL_UART_Transmit+0xc8>
 801355e:	2368      	movs	r3, #104	; 0x68
 8013560:	2101      	movs	r1, #1
 8013562:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013564:	2300      	movs	r3, #0
 8013566:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013568:	3369      	adds	r3, #105	; 0x69
 801356a:	5ce3      	ldrb	r3, [r4, r3]
 801356c:	2b22      	cmp	r3, #34	; 0x22
 801356e:	d008      	beq.n	8013582 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013570:	2369      	movs	r3, #105	; 0x69
 8013572:	2112      	movs	r1, #18
 8013574:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8013576:	2350      	movs	r3, #80	; 0x50
 8013578:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 801357a:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801357c:	2580      	movs	r5, #128	; 0x80
 801357e:	016d      	lsls	r5, r5, #5
 8013580:	e00a      	b.n	8013598 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013582:	3347      	adds	r3, #71	; 0x47
 8013584:	3131      	adds	r1, #49	; 0x31
 8013586:	54e1      	strb	r1, [r4, r3]
 8013588:	e7f5      	b.n	8013576 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801358a:	7833      	ldrb	r3, [r6, #0]
 801358c:	6822      	ldr	r2, [r4, #0]
 801358e:	8513      	strh	r3, [r2, #40]	; 0x28
 8013590:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8013592:	5be2      	ldrh	r2, [r4, r7]
 8013594:	2a00      	cmp	r2, #0
 8013596:	d016      	beq.n	80135c6 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013598:	3a01      	subs	r2, #1
 801359a:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 801359c:	9b01      	ldr	r3, [sp, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	2180      	movs	r1, #128	; 0x80
 80135a2:	0020      	movs	r0, r4
 80135a4:	f7ff ff5c 	bl	8013460 <UART_WaitOnFlagUntilTimeout>
 80135a8:	2800      	cmp	r0, #0
 80135aa:	d127      	bne.n	80135fc <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135ac:	68a3      	ldr	r3, [r4, #8]
 80135ae:	42ab      	cmp	r3, r5
 80135b0:	d1eb      	bne.n	801358a <HAL_UART_Transmit+0x5a>
 80135b2:	6923      	ldr	r3, [r4, #16]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d1e8      	bne.n	801358a <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80135b8:	8833      	ldrh	r3, [r6, #0]
 80135ba:	05db      	lsls	r3, r3, #23
 80135bc:	0ddb      	lsrs	r3, r3, #23
 80135be:	6822      	ldr	r2, [r4, #0]
 80135c0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80135c2:	3602      	adds	r6, #2
 80135c4:	e7e5      	b.n	8013592 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80135c6:	9b01      	ldr	r3, [sp, #4]
 80135c8:	2140      	movs	r1, #64	; 0x40
 80135ca:	0020      	movs	r0, r4
 80135cc:	f7ff ff48 	bl	8013460 <UART_WaitOnFlagUntilTimeout>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d115      	bne.n	8013600 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80135d4:	2369      	movs	r3, #105	; 0x69
 80135d6:	5ce3      	ldrb	r3, [r4, r3]
 80135d8:	2b32      	cmp	r3, #50	; 0x32
 80135da:	d006      	beq.n	80135ea <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80135dc:	2369      	movs	r3, #105	; 0x69
 80135de:	2201      	movs	r2, #1
 80135e0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80135e2:	2368      	movs	r3, #104	; 0x68
 80135e4:	2200      	movs	r2, #0
 80135e6:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80135e8:	e004      	b.n	80135f4 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80135ea:	3337      	adds	r3, #55	; 0x37
 80135ec:	2222      	movs	r2, #34	; 0x22
 80135ee:	54e2      	strb	r2, [r4, r3]
 80135f0:	e7f7      	b.n	80135e2 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 80135f2:	2001      	movs	r0, #1
}
 80135f4:	b003      	add	sp, #12
 80135f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 80135f8:	2002      	movs	r0, #2
 80135fa:	e7fb      	b.n	80135f4 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80135fc:	2003      	movs	r0, #3
 80135fe:	e7f9      	b.n	80135f4 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013600:	2003      	movs	r0, #3
 8013602:	e7f7      	b.n	80135f4 <HAL_UART_Transmit+0xc4>

08013604 <UART_CheckIdleState>:
{
 8013604:	b510      	push	{r4, lr}
 8013606:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013608:	2300      	movs	r3, #0
 801360a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801360c:	6803      	ldr	r3, [r0, #0]
 801360e:	4a18      	ldr	r2, [pc, #96]	; (8013670 <UART_CheckIdleState+0x6c>)
 8013610:	4293      	cmp	r3, r2
 8013612:	d005      	beq.n	8013620 <UART_CheckIdleState+0x1c>
 8013614:	4a17      	ldr	r2, [pc, #92]	; (8013674 <UART_CheckIdleState+0x70>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d002      	beq.n	8013620 <UART_CheckIdleState+0x1c>
 801361a:	4a17      	ldr	r2, [pc, #92]	; (8013678 <UART_CheckIdleState+0x74>)
 801361c:	4293      	cmp	r3, r2
 801361e:	d106      	bne.n	801362e <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	071b      	lsls	r3, r3, #28
 8013624:	d40b      	bmi.n	801363e <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013626:	6823      	ldr	r3, [r4, #0]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	075b      	lsls	r3, r3, #29
 801362c:	d413      	bmi.n	8013656 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 801362e:	2369      	movs	r3, #105	; 0x69
 8013630:	2201      	movs	r2, #1
 8013632:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013634:	3b01      	subs	r3, #1
 8013636:	2200      	movs	r2, #0
 8013638:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801363a:	2000      	movs	r0, #0
}
 801363c:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801363e:	23fa      	movs	r3, #250	; 0xfa
 8013640:	2180      	movs	r1, #128	; 0x80
 8013642:	009b      	lsls	r3, r3, #2
 8013644:	2200      	movs	r2, #0
 8013646:	0389      	lsls	r1, r1, #14
 8013648:	0020      	movs	r0, r4
 801364a:	f7ff ff09 	bl	8013460 <UART_WaitOnFlagUntilTimeout>
 801364e:	2800      	cmp	r0, #0
 8013650:	d0e9      	beq.n	8013626 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013652:	2003      	movs	r0, #3
 8013654:	e7f2      	b.n	801363c <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013656:	23fa      	movs	r3, #250	; 0xfa
 8013658:	2180      	movs	r1, #128	; 0x80
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	2200      	movs	r2, #0
 801365e:	03c9      	lsls	r1, r1, #15
 8013660:	0020      	movs	r0, r4
 8013662:	f7ff fefd 	bl	8013460 <UART_WaitOnFlagUntilTimeout>
 8013666:	2800      	cmp	r0, #0
 8013668:	d0e1      	beq.n	801362e <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 801366a:	2003      	movs	r0, #3
 801366c:	e7e6      	b.n	801363c <UART_CheckIdleState+0x38>
 801366e:	46c0      	nop			; (mov r8, r8)
 8013670:	40013800 	.word	0x40013800
 8013674:	40004400 	.word	0x40004400
 8013678:	40004800 	.word	0x40004800

0801367c <HAL_UART_Init>:
{
 801367c:	b510      	push	{r4, lr}
 801367e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013680:	d030      	beq.n	80136e4 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013682:	2369      	movs	r3, #105	; 0x69
 8013684:	5cc3      	ldrb	r3, [r0, r3]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d022      	beq.n	80136d0 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 801368a:	2369      	movs	r3, #105	; 0x69
 801368c:	2202      	movs	r2, #2
 801368e:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013690:	6822      	ldr	r2, [r4, #0]
 8013692:	6813      	ldr	r3, [r2, #0]
 8013694:	2101      	movs	r1, #1
 8013696:	438b      	bics	r3, r1
 8013698:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801369a:	0020      	movs	r0, r4
 801369c:	f7ff fd4c 	bl	8013138 <UART_SetConfig>
 80136a0:	2801      	cmp	r0, #1
 80136a2:	d014      	beq.n	80136ce <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80136a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d118      	bne.n	80136dc <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80136aa:	6822      	ldr	r2, [r4, #0]
 80136ac:	6853      	ldr	r3, [r2, #4]
 80136ae:	490e      	ldr	r1, [pc, #56]	; (80136e8 <HAL_UART_Init+0x6c>)
 80136b0:	400b      	ands	r3, r1
 80136b2:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80136b4:	6822      	ldr	r2, [r4, #0]
 80136b6:	6893      	ldr	r3, [r2, #8]
 80136b8:	212a      	movs	r1, #42	; 0x2a
 80136ba:	438b      	bics	r3, r1
 80136bc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80136be:	6822      	ldr	r2, [r4, #0]
 80136c0:	6813      	ldr	r3, [r2, #0]
 80136c2:	3929      	subs	r1, #41	; 0x29
 80136c4:	430b      	orrs	r3, r1
 80136c6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80136c8:	0020      	movs	r0, r4
 80136ca:	f7ff ff9b 	bl	8013604 <UART_CheckIdleState>
}
 80136ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80136d0:	3368      	adds	r3, #104	; 0x68
 80136d2:	2200      	movs	r2, #0
 80136d4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80136d6:	f7fa fbd7 	bl	800de88 <HAL_UART_MspInit>
 80136da:	e7d6      	b.n	801368a <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80136dc:	0020      	movs	r0, r4
 80136de:	f7ff fe4f 	bl	8013380 <UART_AdvFeatureConfig>
 80136e2:	e7e2      	b.n	80136aa <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80136e4:	2001      	movs	r0, #1
 80136e6:	e7f2      	b.n	80136ce <HAL_UART_Init+0x52>
 80136e8:	ffffb7ff 	.word	0xffffb7ff

080136ec <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80136ec:	2369      	movs	r3, #105	; 0x69
 80136ee:	5cc3      	ldrb	r3, [r0, r3]
 80136f0:	2b12      	cmp	r3, #18
 80136f2:	d004      	beq.n	80136fe <UART_Transmit_IT+0x12>
 80136f4:	2369      	movs	r3, #105	; 0x69
 80136f6:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80136f8:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80136fa:	2a32      	cmp	r2, #50	; 0x32
 80136fc:	d113      	bne.n	8013726 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80136fe:	2352      	movs	r3, #82	; 0x52
 8013700:	5ac3      	ldrh	r3, [r0, r3]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d011      	beq.n	801372a <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013706:	2380      	movs	r3, #128	; 0x80
 8013708:	015b      	lsls	r3, r3, #5
 801370a:	6882      	ldr	r2, [r0, #8]
 801370c:	429a      	cmp	r2, r3
 801370e:	d018      	beq.n	8013742 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013710:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013712:	1c5a      	adds	r2, r3, #1
 8013714:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	6802      	ldr	r2, [r0, #0]
 801371a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 801371c:	2252      	movs	r2, #82	; 0x52
 801371e:	5a83      	ldrh	r3, [r0, r2]
 8013720:	3b01      	subs	r3, #1
 8013722:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8013724:	2300      	movs	r3, #0
  }
}
 8013726:	0018      	movs	r0, r3
 8013728:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801372a:	6802      	ldr	r2, [r0, #0]
 801372c:	6813      	ldr	r3, [r2, #0]
 801372e:	2180      	movs	r1, #128	; 0x80
 8013730:	438b      	bics	r3, r1
 8013732:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013734:	6802      	ldr	r2, [r0, #0]
 8013736:	6813      	ldr	r3, [r2, #0]
 8013738:	3940      	subs	r1, #64	; 0x40
 801373a:	430b      	orrs	r3, r1
 801373c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 801373e:	2300      	movs	r3, #0
 8013740:	e7f1      	b.n	8013726 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013742:	6903      	ldr	r3, [r0, #16]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d1e3      	bne.n	8013710 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013748:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801374a:	881b      	ldrh	r3, [r3, #0]
 801374c:	05db      	lsls	r3, r3, #23
 801374e:	0ddb      	lsrs	r3, r3, #23
 8013750:	6802      	ldr	r2, [r0, #0]
 8013752:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013754:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013756:	3302      	adds	r3, #2
 8013758:	64c3      	str	r3, [r0, #76]	; 0x4c
 801375a:	e7df      	b.n	801371c <UART_Transmit_IT+0x30>

0801375c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801375c:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801375e:	6802      	ldr	r2, [r0, #0]
 8013760:	6813      	ldr	r3, [r2, #0]
 8013762:	2140      	movs	r1, #64	; 0x40
 8013764:	438b      	bics	r3, r1
 8013766:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013768:	2369      	movs	r3, #105	; 0x69
 801376a:	5cc3      	ldrb	r3, [r0, r3]
 801376c:	2b32      	cmp	r3, #50	; 0x32
 801376e:	d00a      	beq.n	8013786 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013770:	6801      	ldr	r1, [r0, #0]
 8013772:	688b      	ldr	r3, [r1, #8]
 8013774:	2201      	movs	r2, #1
 8013776:	4393      	bics	r3, r2
 8013778:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 801377a:	2369      	movs	r3, #105	; 0x69
 801377c:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 801377e:	f7fa f8b9 	bl	800d8f4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013782:	2000      	movs	r0, #0
 8013784:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013786:	3337      	adds	r3, #55	; 0x37
 8013788:	2222      	movs	r2, #34	; 0x22
 801378a:	54c2      	strb	r2, [r0, r3]
 801378c:	e7f7      	b.n	801377e <UART_EndTransmit_IT+0x22>
	...

08013790 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013790:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013792:	2369      	movs	r3, #105	; 0x69
 8013794:	5cc3      	ldrb	r3, [r0, r3]
 8013796:	2b22      	cmp	r3, #34	; 0x22
 8013798:	d004      	beq.n	80137a4 <UART_Receive_IT+0x14>
 801379a:	2369      	movs	r3, #105	; 0x69
 801379c:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801379e:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80137a0:	2b32      	cmp	r3, #50	; 0x32
 80137a2:	d12d      	bne.n	8013800 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 80137a4:	235c      	movs	r3, #92	; 0x5c
 80137a6:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80137a8:	2280      	movs	r2, #128	; 0x80
 80137aa:	0152      	lsls	r2, r2, #5
 80137ac:	6883      	ldr	r3, [r0, #8]
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d028      	beq.n	8013804 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80137b2:	6803      	ldr	r3, [r0, #0]
 80137b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80137b6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80137b8:	1c54      	adds	r4, r2, #1
 80137ba:	6544      	str	r4, [r0, #84]	; 0x54
 80137bc:	400b      	ands	r3, r1
 80137be:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80137c0:	225a      	movs	r2, #90	; 0x5a
 80137c2:	5a83      	ldrh	r3, [r0, r2]
 80137c4:	3b01      	subs	r3, #1
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 80137ca:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d117      	bne.n	8013800 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80137d0:	6802      	ldr	r2, [r0, #0]
 80137d2:	6813      	ldr	r3, [r2, #0]
 80137d4:	2120      	movs	r1, #32
 80137d6:	438b      	bics	r3, r1
 80137d8:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80137da:	2369      	movs	r3, #105	; 0x69
 80137dc:	5cc3      	ldrb	r3, [r0, r3]
 80137de:	2b32      	cmp	r3, #50	; 0x32
 80137e0:	d01c      	beq.n	801381c <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80137e2:	6802      	ldr	r2, [r0, #0]
 80137e4:	6813      	ldr	r3, [r2, #0]
 80137e6:	490f      	ldr	r1, [pc, #60]	; (8013824 <UART_Receive_IT+0x94>)
 80137e8:	400b      	ands	r3, r1
 80137ea:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80137ec:	6801      	ldr	r1, [r0, #0]
 80137ee:	688b      	ldr	r3, [r1, #8]
 80137f0:	2201      	movs	r2, #1
 80137f2:	4393      	bics	r3, r2
 80137f4:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 80137f6:	2369      	movs	r3, #105	; 0x69
 80137f8:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 80137fa:	f7fa f8b9 	bl	800d970 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80137fe:	2200      	movs	r2, #0
  }
}
 8013800:	0010      	movs	r0, r2
 8013802:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013804:	6903      	ldr	r3, [r0, #16]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1d3      	bne.n	80137b2 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801380a:	6803      	ldr	r3, [r0, #0]
 801380c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801380e:	400b      	ands	r3, r1
 8013810:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013812:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8013814:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8013816:	3302      	adds	r3, #2
 8013818:	6543      	str	r3, [r0, #84]	; 0x54
 801381a:	e7d1      	b.n	80137c0 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801381c:	3337      	adds	r3, #55	; 0x37
 801381e:	2212      	movs	r2, #18
 8013820:	54c2      	strb	r2, [r0, r3]
 8013822:	e7ea      	b.n	80137fa <UART_Receive_IT+0x6a>
 8013824:	fffffeff 	.word	0xfffffeff

08013828 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013828:	4770      	bx	lr

0801382a <HAL_UART_IRQHandler>:
{
 801382a:	b510      	push	{r4, lr}
 801382c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801382e:	6803      	ldr	r3, [r0, #0]
 8013830:	69da      	ldr	r2, [r3, #28]
 8013832:	07d2      	lsls	r2, r2, #31
 8013834:	d509      	bpl.n	801384a <HAL_UART_IRQHandler+0x20>
 8013836:	681a      	ldr	r2, [r3, #0]
 8013838:	05d2      	lsls	r2, r2, #23
 801383a:	d506      	bpl.n	801384a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 801383c:	2201      	movs	r2, #1
 801383e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013840:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013842:	4313      	orrs	r3, r2
 8013844:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013846:	2369      	movs	r3, #105	; 0x69
 8013848:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801384a:	6823      	ldr	r3, [r4, #0]
 801384c:	69da      	ldr	r2, [r3, #28]
 801384e:	0792      	lsls	r2, r2, #30
 8013850:	d50b      	bpl.n	801386a <HAL_UART_IRQHandler+0x40>
 8013852:	689a      	ldr	r2, [r3, #8]
 8013854:	07d2      	lsls	r2, r2, #31
 8013856:	d508      	bpl.n	801386a <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013858:	2202      	movs	r2, #2
 801385a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 801385c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801385e:	3202      	adds	r2, #2
 8013860:	4313      	orrs	r3, r2
 8013862:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013864:	2369      	movs	r3, #105	; 0x69
 8013866:	3a03      	subs	r2, #3
 8013868:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	69da      	ldr	r2, [r3, #28]
 801386e:	0752      	lsls	r2, r2, #29
 8013870:	d50b      	bpl.n	801388a <HAL_UART_IRQHandler+0x60>
 8013872:	689a      	ldr	r2, [r3, #8]
 8013874:	07d2      	lsls	r2, r2, #31
 8013876:	d508      	bpl.n	801388a <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013878:	2204      	movs	r2, #4
 801387a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 801387c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801387e:	3a02      	subs	r2, #2
 8013880:	4313      	orrs	r3, r2
 8013882:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013884:	2369      	movs	r3, #105	; 0x69
 8013886:	3a01      	subs	r2, #1
 8013888:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801388a:	6823      	ldr	r3, [r4, #0]
 801388c:	69da      	ldr	r2, [r3, #28]
 801388e:	0712      	lsls	r2, r2, #28
 8013890:	d50a      	bpl.n	80138a8 <HAL_UART_IRQHandler+0x7e>
 8013892:	689a      	ldr	r2, [r3, #8]
 8013894:	07d2      	lsls	r2, r2, #31
 8013896:	d507      	bpl.n	80138a8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013898:	2208      	movs	r2, #8
 801389a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801389c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801389e:	4313      	orrs	r3, r2
 80138a0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80138a2:	2369      	movs	r3, #105	; 0x69
 80138a4:	3a07      	subs	r2, #7
 80138a6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80138a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d11c      	bne.n	80138e8 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80138ae:	6823      	ldr	r3, [r4, #0]
 80138b0:	69da      	ldr	r2, [r3, #28]
 80138b2:	02d2      	lsls	r2, r2, #11
 80138b4:	d502      	bpl.n	80138bc <HAL_UART_IRQHandler+0x92>
 80138b6:	689a      	ldr	r2, [r3, #8]
 80138b8:	0252      	lsls	r2, r2, #9
 80138ba:	d419      	bmi.n	80138f0 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80138bc:	6823      	ldr	r3, [r4, #0]
 80138be:	69da      	ldr	r2, [r3, #28]
 80138c0:	0692      	lsls	r2, r2, #26
 80138c2:	d502      	bpl.n	80138ca <HAL_UART_IRQHandler+0xa0>
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	069b      	lsls	r3, r3, #26
 80138c8:	d41c      	bmi.n	8013904 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80138ca:	6823      	ldr	r3, [r4, #0]
 80138cc:	69da      	ldr	r2, [r3, #28]
 80138ce:	0612      	lsls	r2, r2, #24
 80138d0:	d502      	bpl.n	80138d8 <HAL_UART_IRQHandler+0xae>
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	061b      	lsls	r3, r3, #24
 80138d6:	d41e      	bmi.n	8013916 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80138d8:	6823      	ldr	r3, [r4, #0]
 80138da:	69da      	ldr	r2, [r3, #28]
 80138dc:	0652      	lsls	r2, r2, #25
 80138de:	d502      	bpl.n	80138e6 <HAL_UART_IRQHandler+0xbc>
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	065b      	lsls	r3, r3, #25
 80138e4:	d41b      	bmi.n	801391e <HAL_UART_IRQHandler+0xf4>
}
 80138e6:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80138e8:	0020      	movs	r0, r4
 80138ea:	f7fa f81b 	bl	800d924 <HAL_UART_ErrorCallback>
 80138ee:	e7de      	b.n	80138ae <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80138f0:	2280      	movs	r2, #128	; 0x80
 80138f2:	0352      	lsls	r2, r2, #13
 80138f4:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80138f6:	2369      	movs	r3, #105	; 0x69
 80138f8:	2201      	movs	r2, #1
 80138fa:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80138fc:	0020      	movs	r0, r4
 80138fe:	f7ff ff93 	bl	8013828 <HAL_UARTEx_WakeupCallback>
 8013902:	e7db      	b.n	80138bc <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013904:	0020      	movs	r0, r4
 8013906:	f7ff ff43 	bl	8013790 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801390a:	6822      	ldr	r2, [r4, #0]
 801390c:	6993      	ldr	r3, [r2, #24]
 801390e:	2108      	movs	r1, #8
 8013910:	430b      	orrs	r3, r1
 8013912:	6193      	str	r3, [r2, #24]
 8013914:	e7d9      	b.n	80138ca <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013916:	0020      	movs	r0, r4
 8013918:	f7ff fee8 	bl	80136ec <UART_Transmit_IT>
 801391c:	e7dc      	b.n	80138d8 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801391e:	0020      	movs	r0, r4
 8013920:	f7ff ff1c 	bl	801375c <UART_EndTransmit_IT>
}
 8013924:	e7df      	b.n	80138e6 <HAL_UART_IRQHandler+0xbc>

08013926 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013926:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013928:	f7f0 fec8 	bl	80046bc <Module_Init>
 801392c:	e7fe      	b.n	801392c <main+0x6>

0801392e <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 801392e:	e7fe      	b.n	801392e <UserTask>

08013930 <atof>:
 8013930:	b510      	push	{r4, lr}
 8013932:	2100      	movs	r1, #0
 8013934:	f001 fe98 	bl	8015668 <strtod>
 8013938:	bd10      	pop	{r4, pc}

0801393a <atoi>:
 801393a:	b510      	push	{r4, lr}
 801393c:	220a      	movs	r2, #10
 801393e:	2100      	movs	r1, #0
 8013940:	f001 ff8c 	bl	801585c <strtol>
 8013944:	bd10      	pop	{r4, pc}

08013946 <atol>:
 8013946:	b510      	push	{r4, lr}
 8013948:	220a      	movs	r2, #10
 801394a:	2100      	movs	r1, #0
 801394c:	f001 ff86 	bl	801585c <strtol>
 8013950:	bd10      	pop	{r4, pc}
	...

08013954 <__libc_init_array>:
 8013954:	b570      	push	{r4, r5, r6, lr}
 8013956:	2600      	movs	r6, #0
 8013958:	4d0c      	ldr	r5, [pc, #48]	; (801398c <__libc_init_array+0x38>)
 801395a:	4c0d      	ldr	r4, [pc, #52]	; (8013990 <__libc_init_array+0x3c>)
 801395c:	1b64      	subs	r4, r4, r5
 801395e:	10a4      	asrs	r4, r4, #2
 8013960:	42a6      	cmp	r6, r4
 8013962:	d109      	bne.n	8013978 <__libc_init_array+0x24>
 8013964:	2600      	movs	r6, #0
 8013966:	f003 ff03 	bl	8017770 <_init>
 801396a:	4d0a      	ldr	r5, [pc, #40]	; (8013994 <__libc_init_array+0x40>)
 801396c:	4c0a      	ldr	r4, [pc, #40]	; (8013998 <__libc_init_array+0x44>)
 801396e:	1b64      	subs	r4, r4, r5
 8013970:	10a4      	asrs	r4, r4, #2
 8013972:	42a6      	cmp	r6, r4
 8013974:	d105      	bne.n	8013982 <__libc_init_array+0x2e>
 8013976:	bd70      	pop	{r4, r5, r6, pc}
 8013978:	00b3      	lsls	r3, r6, #2
 801397a:	58eb      	ldr	r3, [r5, r3]
 801397c:	4798      	blx	r3
 801397e:	3601      	adds	r6, #1
 8013980:	e7ee      	b.n	8013960 <__libc_init_array+0xc>
 8013982:	00b3      	lsls	r3, r6, #2
 8013984:	58eb      	ldr	r3, [r5, r3]
 8013986:	4798      	blx	r3
 8013988:	3601      	adds	r6, #1
 801398a:	e7f2      	b.n	8013972 <__libc_init_array+0x1e>
 801398c:	0801acc8 	.word	0x0801acc8
 8013990:	0801acc8 	.word	0x0801acc8
 8013994:	0801acc8 	.word	0x0801acc8
 8013998:	0801accc 	.word	0x0801accc

0801399c <__locale_ctype_ptr_l>:
 801399c:	30ec      	adds	r0, #236	; 0xec
 801399e:	6800      	ldr	r0, [r0, #0]
 80139a0:	4770      	bx	lr
	...

080139a4 <__locale_ctype_ptr>:
 80139a4:	4b04      	ldr	r3, [pc, #16]	; (80139b8 <__locale_ctype_ptr+0x14>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	6a1b      	ldr	r3, [r3, #32]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d100      	bne.n	80139b0 <__locale_ctype_ptr+0xc>
 80139ae:	4b03      	ldr	r3, [pc, #12]	; (80139bc <__locale_ctype_ptr+0x18>)
 80139b0:	33ec      	adds	r3, #236	; 0xec
 80139b2:	6818      	ldr	r0, [r3, #0]
 80139b4:	4770      	bx	lr
 80139b6:	46c0      	nop			; (mov r8, r8)
 80139b8:	200000b0 	.word	0x200000b0
 80139bc:	20000114 	.word	0x20000114

080139c0 <malloc>:
 80139c0:	b510      	push	{r4, lr}
 80139c2:	4b03      	ldr	r3, [pc, #12]	; (80139d0 <malloc+0x10>)
 80139c4:	0001      	movs	r1, r0
 80139c6:	6818      	ldr	r0, [r3, #0]
 80139c8:	f000 f88a 	bl	8013ae0 <_malloc_r>
 80139cc:	bd10      	pop	{r4, pc}
 80139ce:	46c0      	nop			; (mov r8, r8)
 80139d0:	200000b0 	.word	0x200000b0

080139d4 <free>:
 80139d4:	b510      	push	{r4, lr}
 80139d6:	4b03      	ldr	r3, [pc, #12]	; (80139e4 <free+0x10>)
 80139d8:	0001      	movs	r1, r0
 80139da:	6818      	ldr	r0, [r3, #0]
 80139dc:	f000 f836 	bl	8013a4c <_free_r>
 80139e0:	bd10      	pop	{r4, pc}
 80139e2:	46c0      	nop			; (mov r8, r8)
 80139e4:	200000b0 	.word	0x200000b0

080139e8 <__ascii_mbtowc>:
 80139e8:	b082      	sub	sp, #8
 80139ea:	2900      	cmp	r1, #0
 80139ec:	d100      	bne.n	80139f0 <__ascii_mbtowc+0x8>
 80139ee:	a901      	add	r1, sp, #4
 80139f0:	1e10      	subs	r0, r2, #0
 80139f2:	d006      	beq.n	8013a02 <__ascii_mbtowc+0x1a>
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d006      	beq.n	8013a06 <__ascii_mbtowc+0x1e>
 80139f8:	7813      	ldrb	r3, [r2, #0]
 80139fa:	600b      	str	r3, [r1, #0]
 80139fc:	7810      	ldrb	r0, [r2, #0]
 80139fe:	1e43      	subs	r3, r0, #1
 8013a00:	4198      	sbcs	r0, r3
 8013a02:	b002      	add	sp, #8
 8013a04:	4770      	bx	lr
 8013a06:	2002      	movs	r0, #2
 8013a08:	4240      	negs	r0, r0
 8013a0a:	e7fa      	b.n	8013a02 <__ascii_mbtowc+0x1a>

08013a0c <memcmp>:
 8013a0c:	b530      	push	{r4, r5, lr}
 8013a0e:	2400      	movs	r4, #0
 8013a10:	42a2      	cmp	r2, r4
 8013a12:	d101      	bne.n	8013a18 <memcmp+0xc>
 8013a14:	2000      	movs	r0, #0
 8013a16:	e005      	b.n	8013a24 <memcmp+0x18>
 8013a18:	5d03      	ldrb	r3, [r0, r4]
 8013a1a:	1c65      	adds	r5, r4, #1
 8013a1c:	5d0c      	ldrb	r4, [r1, r4]
 8013a1e:	42a3      	cmp	r3, r4
 8013a20:	d001      	beq.n	8013a26 <memcmp+0x1a>
 8013a22:	1b18      	subs	r0, r3, r4
 8013a24:	bd30      	pop	{r4, r5, pc}
 8013a26:	002c      	movs	r4, r5
 8013a28:	e7f2      	b.n	8013a10 <memcmp+0x4>

08013a2a <memcpy>:
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	b510      	push	{r4, lr}
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d100      	bne.n	8013a34 <memcpy+0xa>
 8013a32:	bd10      	pop	{r4, pc}
 8013a34:	5ccc      	ldrb	r4, [r1, r3]
 8013a36:	54c4      	strb	r4, [r0, r3]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	e7f8      	b.n	8013a2e <memcpy+0x4>

08013a3c <memset>:
 8013a3c:	0003      	movs	r3, r0
 8013a3e:	1812      	adds	r2, r2, r0
 8013a40:	4293      	cmp	r3, r2
 8013a42:	d100      	bne.n	8013a46 <memset+0xa>
 8013a44:	4770      	bx	lr
 8013a46:	7019      	strb	r1, [r3, #0]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	e7f9      	b.n	8013a40 <memset+0x4>

08013a4c <_free_r>:
 8013a4c:	b570      	push	{r4, r5, r6, lr}
 8013a4e:	0005      	movs	r5, r0
 8013a50:	2900      	cmp	r1, #0
 8013a52:	d010      	beq.n	8013a76 <_free_r+0x2a>
 8013a54:	1f0c      	subs	r4, r1, #4
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	da00      	bge.n	8013a5e <_free_r+0x12>
 8013a5c:	18e4      	adds	r4, r4, r3
 8013a5e:	0028      	movs	r0, r5
 8013a60:	f003 f8cd 	bl	8016bfe <__malloc_lock>
 8013a64:	4a1d      	ldr	r2, [pc, #116]	; (8013adc <_free_r+0x90>)
 8013a66:	6813      	ldr	r3, [r2, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d105      	bne.n	8013a78 <_free_r+0x2c>
 8013a6c:	6063      	str	r3, [r4, #4]
 8013a6e:	6014      	str	r4, [r2, #0]
 8013a70:	0028      	movs	r0, r5
 8013a72:	f003 f8c5 	bl	8016c00 <__malloc_unlock>
 8013a76:	bd70      	pop	{r4, r5, r6, pc}
 8013a78:	42a3      	cmp	r3, r4
 8013a7a:	d909      	bls.n	8013a90 <_free_r+0x44>
 8013a7c:	6821      	ldr	r1, [r4, #0]
 8013a7e:	1860      	adds	r0, r4, r1
 8013a80:	4283      	cmp	r3, r0
 8013a82:	d1f3      	bne.n	8013a6c <_free_r+0x20>
 8013a84:	6818      	ldr	r0, [r3, #0]
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	1841      	adds	r1, r0, r1
 8013a8a:	6021      	str	r1, [r4, #0]
 8013a8c:	e7ee      	b.n	8013a6c <_free_r+0x20>
 8013a8e:	0013      	movs	r3, r2
 8013a90:	685a      	ldr	r2, [r3, #4]
 8013a92:	2a00      	cmp	r2, #0
 8013a94:	d001      	beq.n	8013a9a <_free_r+0x4e>
 8013a96:	42a2      	cmp	r2, r4
 8013a98:	d9f9      	bls.n	8013a8e <_free_r+0x42>
 8013a9a:	6819      	ldr	r1, [r3, #0]
 8013a9c:	1858      	adds	r0, r3, r1
 8013a9e:	42a0      	cmp	r0, r4
 8013aa0:	d10b      	bne.n	8013aba <_free_r+0x6e>
 8013aa2:	6820      	ldr	r0, [r4, #0]
 8013aa4:	1809      	adds	r1, r1, r0
 8013aa6:	1858      	adds	r0, r3, r1
 8013aa8:	6019      	str	r1, [r3, #0]
 8013aaa:	4282      	cmp	r2, r0
 8013aac:	d1e0      	bne.n	8013a70 <_free_r+0x24>
 8013aae:	6810      	ldr	r0, [r2, #0]
 8013ab0:	6852      	ldr	r2, [r2, #4]
 8013ab2:	1841      	adds	r1, r0, r1
 8013ab4:	6019      	str	r1, [r3, #0]
 8013ab6:	605a      	str	r2, [r3, #4]
 8013ab8:	e7da      	b.n	8013a70 <_free_r+0x24>
 8013aba:	42a0      	cmp	r0, r4
 8013abc:	d902      	bls.n	8013ac4 <_free_r+0x78>
 8013abe:	230c      	movs	r3, #12
 8013ac0:	602b      	str	r3, [r5, #0]
 8013ac2:	e7d5      	b.n	8013a70 <_free_r+0x24>
 8013ac4:	6821      	ldr	r1, [r4, #0]
 8013ac6:	1860      	adds	r0, r4, r1
 8013ac8:	4282      	cmp	r2, r0
 8013aca:	d103      	bne.n	8013ad4 <_free_r+0x88>
 8013acc:	6810      	ldr	r0, [r2, #0]
 8013ace:	6852      	ldr	r2, [r2, #4]
 8013ad0:	1841      	adds	r1, r0, r1
 8013ad2:	6021      	str	r1, [r4, #0]
 8013ad4:	6062      	str	r2, [r4, #4]
 8013ad6:	605c      	str	r4, [r3, #4]
 8013ad8:	e7ca      	b.n	8013a70 <_free_r+0x24>
 8013ada:	46c0      	nop			; (mov r8, r8)
 8013adc:	200060a4 	.word	0x200060a4

08013ae0 <_malloc_r>:
 8013ae0:	2303      	movs	r3, #3
 8013ae2:	b570      	push	{r4, r5, r6, lr}
 8013ae4:	1ccd      	adds	r5, r1, #3
 8013ae6:	439d      	bics	r5, r3
 8013ae8:	3508      	adds	r5, #8
 8013aea:	0006      	movs	r6, r0
 8013aec:	2d0c      	cmp	r5, #12
 8013aee:	d21e      	bcs.n	8013b2e <_malloc_r+0x4e>
 8013af0:	250c      	movs	r5, #12
 8013af2:	42a9      	cmp	r1, r5
 8013af4:	d81d      	bhi.n	8013b32 <_malloc_r+0x52>
 8013af6:	0030      	movs	r0, r6
 8013af8:	f003 f881 	bl	8016bfe <__malloc_lock>
 8013afc:	4a25      	ldr	r2, [pc, #148]	; (8013b94 <_malloc_r+0xb4>)
 8013afe:	6814      	ldr	r4, [r2, #0]
 8013b00:	0021      	movs	r1, r4
 8013b02:	2900      	cmp	r1, #0
 8013b04:	d119      	bne.n	8013b3a <_malloc_r+0x5a>
 8013b06:	4c24      	ldr	r4, [pc, #144]	; (8013b98 <_malloc_r+0xb8>)
 8013b08:	6823      	ldr	r3, [r4, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d103      	bne.n	8013b16 <_malloc_r+0x36>
 8013b0e:	0030      	movs	r0, r6
 8013b10:	f000 fedc 	bl	80148cc <_sbrk_r>
 8013b14:	6020      	str	r0, [r4, #0]
 8013b16:	0029      	movs	r1, r5
 8013b18:	0030      	movs	r0, r6
 8013b1a:	f000 fed7 	bl	80148cc <_sbrk_r>
 8013b1e:	1c43      	adds	r3, r0, #1
 8013b20:	d12b      	bne.n	8013b7a <_malloc_r+0x9a>
 8013b22:	230c      	movs	r3, #12
 8013b24:	0030      	movs	r0, r6
 8013b26:	6033      	str	r3, [r6, #0]
 8013b28:	f003 f86a 	bl	8016c00 <__malloc_unlock>
 8013b2c:	e003      	b.n	8013b36 <_malloc_r+0x56>
 8013b2e:	2d00      	cmp	r5, #0
 8013b30:	dadf      	bge.n	8013af2 <_malloc_r+0x12>
 8013b32:	230c      	movs	r3, #12
 8013b34:	6033      	str	r3, [r6, #0]
 8013b36:	2000      	movs	r0, #0
 8013b38:	bd70      	pop	{r4, r5, r6, pc}
 8013b3a:	680b      	ldr	r3, [r1, #0]
 8013b3c:	1b5b      	subs	r3, r3, r5
 8013b3e:	d419      	bmi.n	8013b74 <_malloc_r+0x94>
 8013b40:	2b0b      	cmp	r3, #11
 8013b42:	d903      	bls.n	8013b4c <_malloc_r+0x6c>
 8013b44:	600b      	str	r3, [r1, #0]
 8013b46:	18cc      	adds	r4, r1, r3
 8013b48:	6025      	str	r5, [r4, #0]
 8013b4a:	e003      	b.n	8013b54 <_malloc_r+0x74>
 8013b4c:	684b      	ldr	r3, [r1, #4]
 8013b4e:	428c      	cmp	r4, r1
 8013b50:	d10d      	bne.n	8013b6e <_malloc_r+0x8e>
 8013b52:	6013      	str	r3, [r2, #0]
 8013b54:	0030      	movs	r0, r6
 8013b56:	f003 f853 	bl	8016c00 <__malloc_unlock>
 8013b5a:	0020      	movs	r0, r4
 8013b5c:	2207      	movs	r2, #7
 8013b5e:	300b      	adds	r0, #11
 8013b60:	1d23      	adds	r3, r4, #4
 8013b62:	4390      	bics	r0, r2
 8013b64:	1ac3      	subs	r3, r0, r3
 8013b66:	d0e7      	beq.n	8013b38 <_malloc_r+0x58>
 8013b68:	425a      	negs	r2, r3
 8013b6a:	50e2      	str	r2, [r4, r3]
 8013b6c:	e7e4      	b.n	8013b38 <_malloc_r+0x58>
 8013b6e:	6063      	str	r3, [r4, #4]
 8013b70:	000c      	movs	r4, r1
 8013b72:	e7ef      	b.n	8013b54 <_malloc_r+0x74>
 8013b74:	000c      	movs	r4, r1
 8013b76:	6849      	ldr	r1, [r1, #4]
 8013b78:	e7c3      	b.n	8013b02 <_malloc_r+0x22>
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	1cc4      	adds	r4, r0, #3
 8013b7e:	439c      	bics	r4, r3
 8013b80:	42a0      	cmp	r0, r4
 8013b82:	d0e1      	beq.n	8013b48 <_malloc_r+0x68>
 8013b84:	1a21      	subs	r1, r4, r0
 8013b86:	0030      	movs	r0, r6
 8013b88:	f000 fea0 	bl	80148cc <_sbrk_r>
 8013b8c:	1c43      	adds	r3, r0, #1
 8013b8e:	d1db      	bne.n	8013b48 <_malloc_r+0x68>
 8013b90:	e7c7      	b.n	8013b22 <_malloc_r+0x42>
 8013b92:	46c0      	nop			; (mov r8, r8)
 8013b94:	200060a4 	.word	0x200060a4
 8013b98:	200060a8 	.word	0x200060a8

08013b9c <__cvt>:
 8013b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b9e:	b08b      	sub	sp, #44	; 0x2c
 8013ba0:	0014      	movs	r4, r2
 8013ba2:	1e1d      	subs	r5, r3, #0
 8013ba4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ba6:	da53      	bge.n	8013c50 <__cvt+0xb4>
 8013ba8:	2480      	movs	r4, #128	; 0x80
 8013baa:	0624      	lsls	r4, r4, #24
 8013bac:	191b      	adds	r3, r3, r4
 8013bae:	001d      	movs	r5, r3
 8013bb0:	0014      	movs	r4, r2
 8013bb2:	232d      	movs	r3, #45	; 0x2d
 8013bb4:	700b      	strb	r3, [r1, #0]
 8013bb6:	2320      	movs	r3, #32
 8013bb8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013bba:	2203      	movs	r2, #3
 8013bbc:	439e      	bics	r6, r3
 8013bbe:	2e46      	cmp	r6, #70	; 0x46
 8013bc0:	d007      	beq.n	8013bd2 <__cvt+0x36>
 8013bc2:	0033      	movs	r3, r6
 8013bc4:	3b45      	subs	r3, #69	; 0x45
 8013bc6:	4259      	negs	r1, r3
 8013bc8:	414b      	adcs	r3, r1
 8013bca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013bcc:	3a01      	subs	r2, #1
 8013bce:	18cb      	adds	r3, r1, r3
 8013bd0:	9310      	str	r3, [sp, #64]	; 0x40
 8013bd2:	ab09      	add	r3, sp, #36	; 0x24
 8013bd4:	9304      	str	r3, [sp, #16]
 8013bd6:	ab08      	add	r3, sp, #32
 8013bd8:	9303      	str	r3, [sp, #12]
 8013bda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013bdc:	9200      	str	r2, [sp, #0]
 8013bde:	9302      	str	r3, [sp, #8]
 8013be0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013be2:	0022      	movs	r2, r4
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	002b      	movs	r3, r5
 8013be8:	f001 fede 	bl	80159a8 <_dtoa_r>
 8013bec:	0007      	movs	r7, r0
 8013bee:	2e47      	cmp	r6, #71	; 0x47
 8013bf0:	d102      	bne.n	8013bf8 <__cvt+0x5c>
 8013bf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013bf4:	07db      	lsls	r3, r3, #31
 8013bf6:	d524      	bpl.n	8013c42 <__cvt+0xa6>
 8013bf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013bfa:	18fb      	adds	r3, r7, r3
 8013bfc:	9307      	str	r3, [sp, #28]
 8013bfe:	2e46      	cmp	r6, #70	; 0x46
 8013c00:	d114      	bne.n	8013c2c <__cvt+0x90>
 8013c02:	783b      	ldrb	r3, [r7, #0]
 8013c04:	2b30      	cmp	r3, #48	; 0x30
 8013c06:	d10c      	bne.n	8013c22 <__cvt+0x86>
 8013c08:	2200      	movs	r2, #0
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	0020      	movs	r0, r4
 8013c0e:	0029      	movs	r1, r5
 8013c10:	f7ec fc1a 	bl	8000448 <__aeabi_dcmpeq>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d104      	bne.n	8013c22 <__cvt+0x86>
 8013c18:	2301      	movs	r3, #1
 8013c1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c1c:	1a9b      	subs	r3, r3, r2
 8013c1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013c20:	6013      	str	r3, [r2, #0]
 8013c22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013c24:	9a07      	ldr	r2, [sp, #28]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	18d3      	adds	r3, r2, r3
 8013c2a:	9307      	str	r3, [sp, #28]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	2300      	movs	r3, #0
 8013c30:	0020      	movs	r0, r4
 8013c32:	0029      	movs	r1, r5
 8013c34:	f7ec fc08 	bl	8000448 <__aeabi_dcmpeq>
 8013c38:	2230      	movs	r2, #48	; 0x30
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d00d      	beq.n	8013c5a <__cvt+0xbe>
 8013c3e:	9b07      	ldr	r3, [sp, #28]
 8013c40:	9309      	str	r3, [sp, #36]	; 0x24
 8013c42:	0038      	movs	r0, r7
 8013c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c48:	1bdb      	subs	r3, r3, r7
 8013c4a:	6013      	str	r3, [r2, #0]
 8013c4c:	b00b      	add	sp, #44	; 0x2c
 8013c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c50:	2300      	movs	r3, #0
 8013c52:	e7af      	b.n	8013bb4 <__cvt+0x18>
 8013c54:	1c59      	adds	r1, r3, #1
 8013c56:	9109      	str	r1, [sp, #36]	; 0x24
 8013c58:	701a      	strb	r2, [r3, #0]
 8013c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c5c:	9907      	ldr	r1, [sp, #28]
 8013c5e:	428b      	cmp	r3, r1
 8013c60:	d3f8      	bcc.n	8013c54 <__cvt+0xb8>
 8013c62:	e7ee      	b.n	8013c42 <__cvt+0xa6>

08013c64 <__exponent>:
 8013c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c66:	1c83      	adds	r3, r0, #2
 8013c68:	b085      	sub	sp, #20
 8013c6a:	9301      	str	r3, [sp, #4]
 8013c6c:	0006      	movs	r6, r0
 8013c6e:	000c      	movs	r4, r1
 8013c70:	7002      	strb	r2, [r0, #0]
 8013c72:	232b      	movs	r3, #43	; 0x2b
 8013c74:	2900      	cmp	r1, #0
 8013c76:	da01      	bge.n	8013c7c <__exponent+0x18>
 8013c78:	232d      	movs	r3, #45	; 0x2d
 8013c7a:	424c      	negs	r4, r1
 8013c7c:	7073      	strb	r3, [r6, #1]
 8013c7e:	2c09      	cmp	r4, #9
 8013c80:	dd22      	ble.n	8013cc8 <__exponent+0x64>
 8013c82:	ab02      	add	r3, sp, #8
 8013c84:	1ddd      	adds	r5, r3, #7
 8013c86:	0020      	movs	r0, r4
 8013c88:	210a      	movs	r1, #10
 8013c8a:	f7ec fbc7 	bl	800041c <__aeabi_idivmod>
 8013c8e:	1e6f      	subs	r7, r5, #1
 8013c90:	3130      	adds	r1, #48	; 0x30
 8013c92:	7039      	strb	r1, [r7, #0]
 8013c94:	0020      	movs	r0, r4
 8013c96:	210a      	movs	r1, #10
 8013c98:	f7ec fada 	bl	8000250 <__divsi3>
 8013c9c:	0004      	movs	r4, r0
 8013c9e:	2809      	cmp	r0, #9
 8013ca0:	dc0b      	bgt.n	8013cba <__exponent+0x56>
 8013ca2:	3d02      	subs	r5, #2
 8013ca4:	3430      	adds	r4, #48	; 0x30
 8013ca6:	9b01      	ldr	r3, [sp, #4]
 8013ca8:	702c      	strb	r4, [r5, #0]
 8013caa:	aa02      	add	r2, sp, #8
 8013cac:	3207      	adds	r2, #7
 8013cae:	0018      	movs	r0, r3
 8013cb0:	42aa      	cmp	r2, r5
 8013cb2:	d804      	bhi.n	8013cbe <__exponent+0x5a>
 8013cb4:	1b80      	subs	r0, r0, r6
 8013cb6:	b005      	add	sp, #20
 8013cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cba:	003d      	movs	r5, r7
 8013cbc:	e7e3      	b.n	8013c86 <__exponent+0x22>
 8013cbe:	782a      	ldrb	r2, [r5, #0]
 8013cc0:	3501      	adds	r5, #1
 8013cc2:	701a      	strb	r2, [r3, #0]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	e7f0      	b.n	8013caa <__exponent+0x46>
 8013cc8:	2330      	movs	r3, #48	; 0x30
 8013cca:	18e4      	adds	r4, r4, r3
 8013ccc:	70b3      	strb	r3, [r6, #2]
 8013cce:	1d30      	adds	r0, r6, #4
 8013cd0:	70f4      	strb	r4, [r6, #3]
 8013cd2:	e7ef      	b.n	8013cb4 <__exponent+0x50>

08013cd4 <_printf_float>:
 8013cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cd6:	b095      	sub	sp, #84	; 0x54
 8013cd8:	000c      	movs	r4, r1
 8013cda:	920a      	str	r2, [sp, #40]	; 0x28
 8013cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cde:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013ce0:	9009      	str	r0, [sp, #36]	; 0x24
 8013ce2:	f002 ff75 	bl	8016bd0 <_localeconv_r>
 8013ce6:	6803      	ldr	r3, [r0, #0]
 8013ce8:	0018      	movs	r0, r3
 8013cea:	930c      	str	r3, [sp, #48]	; 0x30
 8013cec:	f7ec fa14 	bl	8000118 <strlen>
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8013cf4:	6823      	ldr	r3, [r4, #0]
 8013cf6:	900e      	str	r0, [sp, #56]	; 0x38
 8013cf8:	930d      	str	r3, [sp, #52]	; 0x34
 8013cfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013cfc:	7e27      	ldrb	r7, [r4, #24]
 8013cfe:	682b      	ldr	r3, [r5, #0]
 8013d00:	2207      	movs	r2, #7
 8013d02:	05c9      	lsls	r1, r1, #23
 8013d04:	d545      	bpl.n	8013d92 <_printf_float+0xbe>
 8013d06:	189b      	adds	r3, r3, r2
 8013d08:	4393      	bics	r3, r2
 8013d0a:	001a      	movs	r2, r3
 8013d0c:	3208      	adds	r2, #8
 8013d0e:	602a      	str	r2, [r5, #0]
 8013d10:	681a      	ldr	r2, [r3, #0]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	64a2      	str	r2, [r4, #72]	; 0x48
 8013d16:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013d18:	2201      	movs	r2, #1
 8013d1a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013d1c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8013d1e:	006b      	lsls	r3, r5, #1
 8013d20:	085b      	lsrs	r3, r3, #1
 8013d22:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d24:	4252      	negs	r2, r2
 8013d26:	4bac      	ldr	r3, [pc, #688]	; (8013fd8 <_printf_float+0x304>)
 8013d28:	0030      	movs	r0, r6
 8013d2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013d2c:	f7ee fe62 	bl	80029f4 <__aeabi_dcmpun>
 8013d30:	2800      	cmp	r0, #0
 8013d32:	d130      	bne.n	8013d96 <_printf_float+0xc2>
 8013d34:	2201      	movs	r2, #1
 8013d36:	4ba8      	ldr	r3, [pc, #672]	; (8013fd8 <_printf_float+0x304>)
 8013d38:	4252      	negs	r2, r2
 8013d3a:	0030      	movs	r0, r6
 8013d3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013d3e:	f7ec fb93 	bl	8000468 <__aeabi_dcmple>
 8013d42:	2800      	cmp	r0, #0
 8013d44:	d127      	bne.n	8013d96 <_printf_float+0xc2>
 8013d46:	2200      	movs	r2, #0
 8013d48:	2300      	movs	r3, #0
 8013d4a:	0030      	movs	r0, r6
 8013d4c:	0029      	movs	r1, r5
 8013d4e:	f7ec fb81 	bl	8000454 <__aeabi_dcmplt>
 8013d52:	2800      	cmp	r0, #0
 8013d54:	d003      	beq.n	8013d5e <_printf_float+0x8a>
 8013d56:	0023      	movs	r3, r4
 8013d58:	222d      	movs	r2, #45	; 0x2d
 8013d5a:	3343      	adds	r3, #67	; 0x43
 8013d5c:	701a      	strb	r2, [r3, #0]
 8013d5e:	4d9f      	ldr	r5, [pc, #636]	; (8013fdc <_printf_float+0x308>)
 8013d60:	2f47      	cmp	r7, #71	; 0x47
 8013d62:	d800      	bhi.n	8013d66 <_printf_float+0x92>
 8013d64:	4d9e      	ldr	r5, [pc, #632]	; (8013fe0 <_printf_float+0x30c>)
 8013d66:	2303      	movs	r3, #3
 8013d68:	2600      	movs	r6, #0
 8013d6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013d6c:	6123      	str	r3, [r4, #16]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	439a      	bics	r2, r3
 8013d72:	6022      	str	r2, [r4, #0]
 8013d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d76:	aa13      	add	r2, sp, #76	; 0x4c
 8013d78:	9300      	str	r3, [sp, #0]
 8013d7a:	0021      	movs	r1, r4
 8013d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d80:	f000 f9f4 	bl	801416c <_printf_common>
 8013d84:	1c43      	adds	r3, r0, #1
 8013d86:	d000      	beq.n	8013d8a <_printf_float+0xb6>
 8013d88:	e093      	b.n	8013eb2 <_printf_float+0x1de>
 8013d8a:	2001      	movs	r0, #1
 8013d8c:	4240      	negs	r0, r0
 8013d8e:	b015      	add	sp, #84	; 0x54
 8013d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d92:	3307      	adds	r3, #7
 8013d94:	e7b8      	b.n	8013d08 <_printf_float+0x34>
 8013d96:	0032      	movs	r2, r6
 8013d98:	002b      	movs	r3, r5
 8013d9a:	0030      	movs	r0, r6
 8013d9c:	0029      	movs	r1, r5
 8013d9e:	f7ee fe29 	bl	80029f4 <__aeabi_dcmpun>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	d004      	beq.n	8013db0 <_printf_float+0xdc>
 8013da6:	4d8f      	ldr	r5, [pc, #572]	; (8013fe4 <_printf_float+0x310>)
 8013da8:	2f47      	cmp	r7, #71	; 0x47
 8013daa:	d8dc      	bhi.n	8013d66 <_printf_float+0x92>
 8013dac:	4d8e      	ldr	r5, [pc, #568]	; (8013fe8 <_printf_float+0x314>)
 8013dae:	e7da      	b.n	8013d66 <_printf_float+0x92>
 8013db0:	2380      	movs	r3, #128	; 0x80
 8013db2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013db4:	6862      	ldr	r2, [r4, #4]
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	430b      	orrs	r3, r1
 8013dba:	1c51      	adds	r1, r2, #1
 8013dbc:	d143      	bne.n	8013e46 <_printf_float+0x172>
 8013dbe:	3207      	adds	r2, #7
 8013dc0:	6062      	str	r2, [r4, #4]
 8013dc2:	aa12      	add	r2, sp, #72	; 0x48
 8013dc4:	2100      	movs	r1, #0
 8013dc6:	9205      	str	r2, [sp, #20]
 8013dc8:	aa11      	add	r2, sp, #68	; 0x44
 8013dca:	9203      	str	r2, [sp, #12]
 8013dcc:	2223      	movs	r2, #35	; 0x23
 8013dce:	6023      	str	r3, [r4, #0]
 8013dd0:	9106      	str	r1, [sp, #24]
 8013dd2:	9301      	str	r3, [sp, #4]
 8013dd4:	a908      	add	r1, sp, #32
 8013dd6:	6863      	ldr	r3, [r4, #4]
 8013dd8:	1852      	adds	r2, r2, r1
 8013dda:	9202      	str	r2, [sp, #8]
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	0032      	movs	r2, r6
 8013de0:	002b      	movs	r3, r5
 8013de2:	9704      	str	r7, [sp, #16]
 8013de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013de6:	f7ff fed9 	bl	8013b9c <__cvt>
 8013dea:	2320      	movs	r3, #32
 8013dec:	003a      	movs	r2, r7
 8013dee:	0005      	movs	r5, r0
 8013df0:	439a      	bics	r2, r3
 8013df2:	2a47      	cmp	r2, #71	; 0x47
 8013df4:	d107      	bne.n	8013e06 <_printf_float+0x132>
 8013df6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013df8:	1cda      	adds	r2, r3, #3
 8013dfa:	db02      	blt.n	8013e02 <_printf_float+0x12e>
 8013dfc:	6862      	ldr	r2, [r4, #4]
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	dd45      	ble.n	8013e8e <_printf_float+0x1ba>
 8013e02:	3f02      	subs	r7, #2
 8013e04:	b2ff      	uxtb	r7, r7
 8013e06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013e08:	2f65      	cmp	r7, #101	; 0x65
 8013e0a:	d825      	bhi.n	8013e58 <_printf_float+0x184>
 8013e0c:	0020      	movs	r0, r4
 8013e0e:	3901      	subs	r1, #1
 8013e10:	003a      	movs	r2, r7
 8013e12:	3050      	adds	r0, #80	; 0x50
 8013e14:	9111      	str	r1, [sp, #68]	; 0x44
 8013e16:	f7ff ff25 	bl	8013c64 <__exponent>
 8013e1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e1c:	0006      	movs	r6, r0
 8013e1e:	1813      	adds	r3, r2, r0
 8013e20:	6123      	str	r3, [r4, #16]
 8013e22:	2a01      	cmp	r2, #1
 8013e24:	dc02      	bgt.n	8013e2c <_printf_float+0x158>
 8013e26:	6822      	ldr	r2, [r4, #0]
 8013e28:	07d2      	lsls	r2, r2, #31
 8013e2a:	d501      	bpl.n	8013e30 <_printf_float+0x15c>
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	6123      	str	r3, [r4, #16]
 8013e30:	2323      	movs	r3, #35	; 0x23
 8013e32:	aa08      	add	r2, sp, #32
 8013e34:	189b      	adds	r3, r3, r2
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d09b      	beq.n	8013d74 <_printf_float+0xa0>
 8013e3c:	0023      	movs	r3, r4
 8013e3e:	222d      	movs	r2, #45	; 0x2d
 8013e40:	3343      	adds	r3, #67	; 0x43
 8013e42:	701a      	strb	r2, [r3, #0]
 8013e44:	e796      	b.n	8013d74 <_printf_float+0xa0>
 8013e46:	2f67      	cmp	r7, #103	; 0x67
 8013e48:	d100      	bne.n	8013e4c <_printf_float+0x178>
 8013e4a:	e176      	b.n	801413a <_printf_float+0x466>
 8013e4c:	2f47      	cmp	r7, #71	; 0x47
 8013e4e:	d1b8      	bne.n	8013dc2 <_printf_float+0xee>
 8013e50:	2a00      	cmp	r2, #0
 8013e52:	d1b6      	bne.n	8013dc2 <_printf_float+0xee>
 8013e54:	2201      	movs	r2, #1
 8013e56:	e7b3      	b.n	8013dc0 <_printf_float+0xec>
 8013e58:	2f66      	cmp	r7, #102	; 0x66
 8013e5a:	d119      	bne.n	8013e90 <_printf_float+0x1bc>
 8013e5c:	6863      	ldr	r3, [r4, #4]
 8013e5e:	2900      	cmp	r1, #0
 8013e60:	dd0c      	ble.n	8013e7c <_printf_float+0x1a8>
 8013e62:	6121      	str	r1, [r4, #16]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d102      	bne.n	8013e6e <_printf_float+0x19a>
 8013e68:	6822      	ldr	r2, [r4, #0]
 8013e6a:	07d2      	lsls	r2, r2, #31
 8013e6c:	d502      	bpl.n	8013e74 <_printf_float+0x1a0>
 8013e6e:	3301      	adds	r3, #1
 8013e70:	185b      	adds	r3, r3, r1
 8013e72:	6123      	str	r3, [r4, #16]
 8013e74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e76:	2600      	movs	r6, #0
 8013e78:	65a3      	str	r3, [r4, #88]	; 0x58
 8013e7a:	e7d9      	b.n	8013e30 <_printf_float+0x15c>
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d103      	bne.n	8013e88 <_printf_float+0x1b4>
 8013e80:	2201      	movs	r2, #1
 8013e82:	6821      	ldr	r1, [r4, #0]
 8013e84:	4211      	tst	r1, r2
 8013e86:	d000      	beq.n	8013e8a <_printf_float+0x1b6>
 8013e88:	1c9a      	adds	r2, r3, #2
 8013e8a:	6122      	str	r2, [r4, #16]
 8013e8c:	e7f2      	b.n	8013e74 <_printf_float+0x1a0>
 8013e8e:	2767      	movs	r7, #103	; 0x67
 8013e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e94:	4293      	cmp	r3, r2
 8013e96:	db05      	blt.n	8013ea4 <_printf_float+0x1d0>
 8013e98:	6822      	ldr	r2, [r4, #0]
 8013e9a:	6123      	str	r3, [r4, #16]
 8013e9c:	07d2      	lsls	r2, r2, #31
 8013e9e:	d5e9      	bpl.n	8013e74 <_printf_float+0x1a0>
 8013ea0:	3301      	adds	r3, #1
 8013ea2:	e7e6      	b.n	8013e72 <_printf_float+0x19e>
 8013ea4:	2101      	movs	r1, #1
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	dc01      	bgt.n	8013eae <_printf_float+0x1da>
 8013eaa:	1849      	adds	r1, r1, r1
 8013eac:	1ac9      	subs	r1, r1, r3
 8013eae:	1852      	adds	r2, r2, r1
 8013eb0:	e7eb      	b.n	8013e8a <_printf_float+0x1b6>
 8013eb2:	6822      	ldr	r2, [r4, #0]
 8013eb4:	0553      	lsls	r3, r2, #21
 8013eb6:	d408      	bmi.n	8013eca <_printf_float+0x1f6>
 8013eb8:	6923      	ldr	r3, [r4, #16]
 8013eba:	002a      	movs	r2, r5
 8013ebc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ec0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013ec2:	47a8      	blx	r5
 8013ec4:	1c43      	adds	r3, r0, #1
 8013ec6:	d129      	bne.n	8013f1c <_printf_float+0x248>
 8013ec8:	e75f      	b.n	8013d8a <_printf_float+0xb6>
 8013eca:	2f65      	cmp	r7, #101	; 0x65
 8013ecc:	d800      	bhi.n	8013ed0 <_printf_float+0x1fc>
 8013ece:	e0e0      	b.n	8014092 <_printf_float+0x3be>
 8013ed0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013ed2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	f7ec fab6 	bl	8000448 <__aeabi_dcmpeq>
 8013edc:	2800      	cmp	r0, #0
 8013ede:	d034      	beq.n	8013f4a <_printf_float+0x276>
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	4a42      	ldr	r2, [pc, #264]	; (8013fec <_printf_float+0x318>)
 8013ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ee6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ee8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013eea:	47a8      	blx	r5
 8013eec:	1c43      	adds	r3, r0, #1
 8013eee:	d100      	bne.n	8013ef2 <_printf_float+0x21e>
 8013ef0:	e74b      	b.n	8013d8a <_printf_float+0xb6>
 8013ef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	db02      	blt.n	8013f00 <_printf_float+0x22c>
 8013efa:	6823      	ldr	r3, [r4, #0]
 8013efc:	07db      	lsls	r3, r3, #31
 8013efe:	d50d      	bpl.n	8013f1c <_printf_float+0x248>
 8013f00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f0a:	47a8      	blx	r5
 8013f0c:	2500      	movs	r5, #0
 8013f0e:	1c43      	adds	r3, r0, #1
 8013f10:	d100      	bne.n	8013f14 <_printf_float+0x240>
 8013f12:	e73a      	b.n	8013d8a <_printf_float+0xb6>
 8013f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f16:	3b01      	subs	r3, #1
 8013f18:	42ab      	cmp	r3, r5
 8013f1a:	dc0a      	bgt.n	8013f32 <_printf_float+0x25e>
 8013f1c:	6823      	ldr	r3, [r4, #0]
 8013f1e:	079b      	lsls	r3, r3, #30
 8013f20:	d500      	bpl.n	8013f24 <_printf_float+0x250>
 8013f22:	e108      	b.n	8014136 <_printf_float+0x462>
 8013f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013f26:	68e0      	ldr	r0, [r4, #12]
 8013f28:	4298      	cmp	r0, r3
 8013f2a:	db00      	blt.n	8013f2e <_printf_float+0x25a>
 8013f2c:	e72f      	b.n	8013d8e <_printf_float+0xba>
 8013f2e:	0018      	movs	r0, r3
 8013f30:	e72d      	b.n	8013d8e <_printf_float+0xba>
 8013f32:	0022      	movs	r2, r4
 8013f34:	2301      	movs	r3, #1
 8013f36:	321a      	adds	r2, #26
 8013f38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013f3e:	47b0      	blx	r6
 8013f40:	1c43      	adds	r3, r0, #1
 8013f42:	d100      	bne.n	8013f46 <_printf_float+0x272>
 8013f44:	e721      	b.n	8013d8a <_printf_float+0xb6>
 8013f46:	3501      	adds	r5, #1
 8013f48:	e7e4      	b.n	8013f14 <_printf_float+0x240>
 8013f4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	dc2d      	bgt.n	8013fac <_printf_float+0x2d8>
 8013f50:	2301      	movs	r3, #1
 8013f52:	4a26      	ldr	r2, [pc, #152]	; (8013fec <_printf_float+0x318>)
 8013f54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013f5a:	47b0      	blx	r6
 8013f5c:	1c43      	adds	r3, r0, #1
 8013f5e:	d100      	bne.n	8013f62 <_printf_float+0x28e>
 8013f60:	e713      	b.n	8013d8a <_printf_float+0xb6>
 8013f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d105      	bne.n	8013f74 <_printf_float+0x2a0>
 8013f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d102      	bne.n	8013f74 <_printf_float+0x2a0>
 8013f6e:	6823      	ldr	r3, [r4, #0]
 8013f70:	07db      	lsls	r3, r3, #31
 8013f72:	d5d3      	bpl.n	8013f1c <_printf_float+0x248>
 8013f74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f7a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f7e:	47b0      	blx	r6
 8013f80:	2600      	movs	r6, #0
 8013f82:	1c43      	adds	r3, r0, #1
 8013f84:	d100      	bne.n	8013f88 <_printf_float+0x2b4>
 8013f86:	e700      	b.n	8013d8a <_printf_float+0xb6>
 8013f88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f8a:	425b      	negs	r3, r3
 8013f8c:	42b3      	cmp	r3, r6
 8013f8e:	dc01      	bgt.n	8013f94 <_printf_float+0x2c0>
 8013f90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f92:	e792      	b.n	8013eba <_printf_float+0x1e6>
 8013f94:	0022      	movs	r2, r4
 8013f96:	2301      	movs	r3, #1
 8013f98:	321a      	adds	r2, #26
 8013f9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f9e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013fa0:	47b8      	blx	r7
 8013fa2:	1c43      	adds	r3, r0, #1
 8013fa4:	d100      	bne.n	8013fa8 <_printf_float+0x2d4>
 8013fa6:	e6f0      	b.n	8013d8a <_printf_float+0xb6>
 8013fa8:	3601      	adds	r6, #1
 8013faa:	e7ed      	b.n	8013f88 <_printf_float+0x2b4>
 8013fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013fae:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013fb0:	429f      	cmp	r7, r3
 8013fb2:	dd00      	ble.n	8013fb6 <_printf_float+0x2e2>
 8013fb4:	001f      	movs	r7, r3
 8013fb6:	2f00      	cmp	r7, #0
 8013fb8:	dd08      	ble.n	8013fcc <_printf_float+0x2f8>
 8013fba:	003b      	movs	r3, r7
 8013fbc:	002a      	movs	r2, r5
 8013fbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fc2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013fc4:	47b0      	blx	r6
 8013fc6:	1c43      	adds	r3, r0, #1
 8013fc8:	d100      	bne.n	8013fcc <_printf_float+0x2f8>
 8013fca:	e6de      	b.n	8013d8a <_printf_float+0xb6>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	930d      	str	r3, [sp, #52]	; 0x34
 8013fd0:	43fb      	mvns	r3, r7
 8013fd2:	17db      	asrs	r3, r3, #31
 8013fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fd6:	e018      	b.n	801400a <_printf_float+0x336>
 8013fd8:	7fefffff 	.word	0x7fefffff
 8013fdc:	0801aa1e 	.word	0x0801aa1e
 8013fe0:	0801aa1a 	.word	0x0801aa1a
 8013fe4:	0801aa26 	.word	0x0801aa26
 8013fe8:	0801aa22 	.word	0x0801aa22
 8013fec:	0801aa2a 	.word	0x0801aa2a
 8013ff0:	0022      	movs	r2, r4
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	321a      	adds	r2, #26
 8013ff6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ffa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ffc:	47b0      	blx	r6
 8013ffe:	1c43      	adds	r3, r0, #1
 8014000:	d100      	bne.n	8014004 <_printf_float+0x330>
 8014002:	e6c2      	b.n	8013d8a <_printf_float+0xb6>
 8014004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014006:	3301      	adds	r3, #1
 8014008:	930d      	str	r3, [sp, #52]	; 0x34
 801400a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801400c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 801400e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014010:	403b      	ands	r3, r7
 8014012:	1af3      	subs	r3, r6, r3
 8014014:	4293      	cmp	r3, r2
 8014016:	dceb      	bgt.n	8013ff0 <_printf_float+0x31c>
 8014018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801401a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801401c:	19ad      	adds	r5, r5, r6
 801401e:	4293      	cmp	r3, r2
 8014020:	db10      	blt.n	8014044 <_printf_float+0x370>
 8014022:	6823      	ldr	r3, [r4, #0]
 8014024:	07db      	lsls	r3, r3, #31
 8014026:	d40d      	bmi.n	8014044 <_printf_float+0x370>
 8014028:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801402a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801402c:	1bbe      	subs	r6, r7, r6
 801402e:	1aff      	subs	r7, r7, r3
 8014030:	42b7      	cmp	r7, r6
 8014032:	dd00      	ble.n	8014036 <_printf_float+0x362>
 8014034:	0037      	movs	r7, r6
 8014036:	2f00      	cmp	r7, #0
 8014038:	dc0d      	bgt.n	8014056 <_printf_float+0x382>
 801403a:	43fe      	mvns	r6, r7
 801403c:	17f3      	asrs	r3, r6, #31
 801403e:	2500      	movs	r5, #0
 8014040:	930c      	str	r3, [sp, #48]	; 0x30
 8014042:	e01c      	b.n	801407e <_printf_float+0x3aa>
 8014044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014046:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014048:	990a      	ldr	r1, [sp, #40]	; 0x28
 801404a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801404c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801404e:	47b8      	blx	r7
 8014050:	1c43      	adds	r3, r0, #1
 8014052:	d1e9      	bne.n	8014028 <_printf_float+0x354>
 8014054:	e699      	b.n	8013d8a <_printf_float+0xb6>
 8014056:	003b      	movs	r3, r7
 8014058:	002a      	movs	r2, r5
 801405a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801405c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801405e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014060:	47a8      	blx	r5
 8014062:	1c43      	adds	r3, r0, #1
 8014064:	d1e9      	bne.n	801403a <_printf_float+0x366>
 8014066:	e690      	b.n	8013d8a <_printf_float+0xb6>
 8014068:	0022      	movs	r2, r4
 801406a:	2301      	movs	r3, #1
 801406c:	321a      	adds	r2, #26
 801406e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014072:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014074:	47b0      	blx	r6
 8014076:	1c43      	adds	r3, r0, #1
 8014078:	d100      	bne.n	801407c <_printf_float+0x3a8>
 801407a:	e686      	b.n	8013d8a <_printf_float+0xb6>
 801407c:	3501      	adds	r5, #1
 801407e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014080:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014082:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014084:	1a9b      	subs	r3, r3, r2
 8014086:	003a      	movs	r2, r7
 8014088:	400a      	ands	r2, r1
 801408a:	1a9b      	subs	r3, r3, r2
 801408c:	42ab      	cmp	r3, r5
 801408e:	dceb      	bgt.n	8014068 <_printf_float+0x394>
 8014090:	e744      	b.n	8013f1c <_printf_float+0x248>
 8014092:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014094:	2b01      	cmp	r3, #1
 8014096:	dc02      	bgt.n	801409e <_printf_float+0x3ca>
 8014098:	2301      	movs	r3, #1
 801409a:	421a      	tst	r2, r3
 801409c:	d032      	beq.n	8014104 <_printf_float+0x430>
 801409e:	2301      	movs	r3, #1
 80140a0:	002a      	movs	r2, r5
 80140a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140a6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80140a8:	47b8      	blx	r7
 80140aa:	1c43      	adds	r3, r0, #1
 80140ac:	d100      	bne.n	80140b0 <_printf_float+0x3dc>
 80140ae:	e66c      	b.n	8013d8a <_printf_float+0xb6>
 80140b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140b8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80140ba:	3501      	adds	r5, #1
 80140bc:	47b8      	blx	r7
 80140be:	1c43      	adds	r3, r0, #1
 80140c0:	d100      	bne.n	80140c4 <_printf_float+0x3f0>
 80140c2:	e662      	b.n	8013d8a <_printf_float+0xb6>
 80140c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80140c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80140c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140ca:	2200      	movs	r2, #0
 80140cc:	1e5f      	subs	r7, r3, #1
 80140ce:	2300      	movs	r3, #0
 80140d0:	f7ec f9ba 	bl	8000448 <__aeabi_dcmpeq>
 80140d4:	003b      	movs	r3, r7
 80140d6:	2800      	cmp	r0, #0
 80140d8:	d014      	beq.n	8014104 <_printf_float+0x430>
 80140da:	2500      	movs	r5, #0
 80140dc:	e00a      	b.n	80140f4 <_printf_float+0x420>
 80140de:	0022      	movs	r2, r4
 80140e0:	2301      	movs	r3, #1
 80140e2:	321a      	adds	r2, #26
 80140e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80140e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80140ea:	47b8      	blx	r7
 80140ec:	1c43      	adds	r3, r0, #1
 80140ee:	d100      	bne.n	80140f2 <_printf_float+0x41e>
 80140f0:	e64b      	b.n	8013d8a <_printf_float+0xb6>
 80140f2:	3501      	adds	r5, #1
 80140f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80140f6:	3b01      	subs	r3, #1
 80140f8:	42ab      	cmp	r3, r5
 80140fa:	dcf0      	bgt.n	80140de <_printf_float+0x40a>
 80140fc:	0022      	movs	r2, r4
 80140fe:	0033      	movs	r3, r6
 8014100:	3250      	adds	r2, #80	; 0x50
 8014102:	e6db      	b.n	8013ebc <_printf_float+0x1e8>
 8014104:	002a      	movs	r2, r5
 8014106:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014108:	9809      	ldr	r0, [sp, #36]	; 0x24
 801410a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801410c:	47a8      	blx	r5
 801410e:	1c43      	adds	r3, r0, #1
 8014110:	d1f4      	bne.n	80140fc <_printf_float+0x428>
 8014112:	e63a      	b.n	8013d8a <_printf_float+0xb6>
 8014114:	0022      	movs	r2, r4
 8014116:	2301      	movs	r3, #1
 8014118:	3219      	adds	r2, #25
 801411a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801411c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801411e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014120:	47b0      	blx	r6
 8014122:	1c43      	adds	r3, r0, #1
 8014124:	d100      	bne.n	8014128 <_printf_float+0x454>
 8014126:	e630      	b.n	8013d8a <_printf_float+0xb6>
 8014128:	3501      	adds	r5, #1
 801412a:	68e3      	ldr	r3, [r4, #12]
 801412c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801412e:	1a9b      	subs	r3, r3, r2
 8014130:	42ab      	cmp	r3, r5
 8014132:	dcef      	bgt.n	8014114 <_printf_float+0x440>
 8014134:	e6f6      	b.n	8013f24 <_printf_float+0x250>
 8014136:	2500      	movs	r5, #0
 8014138:	e7f7      	b.n	801412a <_printf_float+0x456>
 801413a:	2a00      	cmp	r2, #0
 801413c:	d100      	bne.n	8014140 <_printf_float+0x46c>
 801413e:	e689      	b.n	8013e54 <_printf_float+0x180>
 8014140:	2100      	movs	r1, #0
 8014142:	9106      	str	r1, [sp, #24]
 8014144:	a912      	add	r1, sp, #72	; 0x48
 8014146:	9105      	str	r1, [sp, #20]
 8014148:	a911      	add	r1, sp, #68	; 0x44
 801414a:	9103      	str	r1, [sp, #12]
 801414c:	2123      	movs	r1, #35	; 0x23
 801414e:	a808      	add	r0, sp, #32
 8014150:	1809      	adds	r1, r1, r0
 8014152:	6023      	str	r3, [r4, #0]
 8014154:	9301      	str	r3, [sp, #4]
 8014156:	9200      	str	r2, [sp, #0]
 8014158:	002b      	movs	r3, r5
 801415a:	9704      	str	r7, [sp, #16]
 801415c:	9102      	str	r1, [sp, #8]
 801415e:	0032      	movs	r2, r6
 8014160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014162:	f7ff fd1b 	bl	8013b9c <__cvt>
 8014166:	0005      	movs	r5, r0
 8014168:	e645      	b.n	8013df6 <_printf_float+0x122>
 801416a:	46c0      	nop			; (mov r8, r8)

0801416c <_printf_common>:
 801416c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801416e:	0015      	movs	r5, r2
 8014170:	9301      	str	r3, [sp, #4]
 8014172:	688a      	ldr	r2, [r1, #8]
 8014174:	690b      	ldr	r3, [r1, #16]
 8014176:	9000      	str	r0, [sp, #0]
 8014178:	000c      	movs	r4, r1
 801417a:	4293      	cmp	r3, r2
 801417c:	da00      	bge.n	8014180 <_printf_common+0x14>
 801417e:	0013      	movs	r3, r2
 8014180:	0022      	movs	r2, r4
 8014182:	602b      	str	r3, [r5, #0]
 8014184:	3243      	adds	r2, #67	; 0x43
 8014186:	7812      	ldrb	r2, [r2, #0]
 8014188:	2a00      	cmp	r2, #0
 801418a:	d001      	beq.n	8014190 <_printf_common+0x24>
 801418c:	3301      	adds	r3, #1
 801418e:	602b      	str	r3, [r5, #0]
 8014190:	6823      	ldr	r3, [r4, #0]
 8014192:	069b      	lsls	r3, r3, #26
 8014194:	d502      	bpl.n	801419c <_printf_common+0x30>
 8014196:	682b      	ldr	r3, [r5, #0]
 8014198:	3302      	adds	r3, #2
 801419a:	602b      	str	r3, [r5, #0]
 801419c:	2706      	movs	r7, #6
 801419e:	6823      	ldr	r3, [r4, #0]
 80141a0:	401f      	ands	r7, r3
 80141a2:	d027      	beq.n	80141f4 <_printf_common+0x88>
 80141a4:	0023      	movs	r3, r4
 80141a6:	3343      	adds	r3, #67	; 0x43
 80141a8:	781b      	ldrb	r3, [r3, #0]
 80141aa:	1e5a      	subs	r2, r3, #1
 80141ac:	4193      	sbcs	r3, r2
 80141ae:	6822      	ldr	r2, [r4, #0]
 80141b0:	0692      	lsls	r2, r2, #26
 80141b2:	d430      	bmi.n	8014216 <_printf_common+0xaa>
 80141b4:	0022      	movs	r2, r4
 80141b6:	9901      	ldr	r1, [sp, #4]
 80141b8:	3243      	adds	r2, #67	; 0x43
 80141ba:	9800      	ldr	r0, [sp, #0]
 80141bc:	9e08      	ldr	r6, [sp, #32]
 80141be:	47b0      	blx	r6
 80141c0:	1c43      	adds	r3, r0, #1
 80141c2:	d025      	beq.n	8014210 <_printf_common+0xa4>
 80141c4:	2306      	movs	r3, #6
 80141c6:	6820      	ldr	r0, [r4, #0]
 80141c8:	682a      	ldr	r2, [r5, #0]
 80141ca:	68e1      	ldr	r1, [r4, #12]
 80141cc:	4003      	ands	r3, r0
 80141ce:	2500      	movs	r5, #0
 80141d0:	2b04      	cmp	r3, #4
 80141d2:	d103      	bne.n	80141dc <_printf_common+0x70>
 80141d4:	1a8d      	subs	r5, r1, r2
 80141d6:	43eb      	mvns	r3, r5
 80141d8:	17db      	asrs	r3, r3, #31
 80141da:	401d      	ands	r5, r3
 80141dc:	68a3      	ldr	r3, [r4, #8]
 80141de:	6922      	ldr	r2, [r4, #16]
 80141e0:	4293      	cmp	r3, r2
 80141e2:	dd01      	ble.n	80141e8 <_printf_common+0x7c>
 80141e4:	1a9b      	subs	r3, r3, r2
 80141e6:	18ed      	adds	r5, r5, r3
 80141e8:	2700      	movs	r7, #0
 80141ea:	42bd      	cmp	r5, r7
 80141ec:	d120      	bne.n	8014230 <_printf_common+0xc4>
 80141ee:	2000      	movs	r0, #0
 80141f0:	e010      	b.n	8014214 <_printf_common+0xa8>
 80141f2:	3701      	adds	r7, #1
 80141f4:	68e3      	ldr	r3, [r4, #12]
 80141f6:	682a      	ldr	r2, [r5, #0]
 80141f8:	1a9b      	subs	r3, r3, r2
 80141fa:	42bb      	cmp	r3, r7
 80141fc:	ddd2      	ble.n	80141a4 <_printf_common+0x38>
 80141fe:	0022      	movs	r2, r4
 8014200:	2301      	movs	r3, #1
 8014202:	3219      	adds	r2, #25
 8014204:	9901      	ldr	r1, [sp, #4]
 8014206:	9800      	ldr	r0, [sp, #0]
 8014208:	9e08      	ldr	r6, [sp, #32]
 801420a:	47b0      	blx	r6
 801420c:	1c43      	adds	r3, r0, #1
 801420e:	d1f0      	bne.n	80141f2 <_printf_common+0x86>
 8014210:	2001      	movs	r0, #1
 8014212:	4240      	negs	r0, r0
 8014214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014216:	2030      	movs	r0, #48	; 0x30
 8014218:	18e1      	adds	r1, r4, r3
 801421a:	3143      	adds	r1, #67	; 0x43
 801421c:	7008      	strb	r0, [r1, #0]
 801421e:	0021      	movs	r1, r4
 8014220:	1c5a      	adds	r2, r3, #1
 8014222:	3145      	adds	r1, #69	; 0x45
 8014224:	7809      	ldrb	r1, [r1, #0]
 8014226:	18a2      	adds	r2, r4, r2
 8014228:	3243      	adds	r2, #67	; 0x43
 801422a:	3302      	adds	r3, #2
 801422c:	7011      	strb	r1, [r2, #0]
 801422e:	e7c1      	b.n	80141b4 <_printf_common+0x48>
 8014230:	0022      	movs	r2, r4
 8014232:	2301      	movs	r3, #1
 8014234:	321a      	adds	r2, #26
 8014236:	9901      	ldr	r1, [sp, #4]
 8014238:	9800      	ldr	r0, [sp, #0]
 801423a:	9e08      	ldr	r6, [sp, #32]
 801423c:	47b0      	blx	r6
 801423e:	1c43      	adds	r3, r0, #1
 8014240:	d0e6      	beq.n	8014210 <_printf_common+0xa4>
 8014242:	3701      	adds	r7, #1
 8014244:	e7d1      	b.n	80141ea <_printf_common+0x7e>
	...

08014248 <_printf_i>:
 8014248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801424a:	b089      	sub	sp, #36	; 0x24
 801424c:	9204      	str	r2, [sp, #16]
 801424e:	000a      	movs	r2, r1
 8014250:	3243      	adds	r2, #67	; 0x43
 8014252:	9305      	str	r3, [sp, #20]
 8014254:	9003      	str	r0, [sp, #12]
 8014256:	9202      	str	r2, [sp, #8]
 8014258:	7e0a      	ldrb	r2, [r1, #24]
 801425a:	000c      	movs	r4, r1
 801425c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801425e:	2a6e      	cmp	r2, #110	; 0x6e
 8014260:	d100      	bne.n	8014264 <_printf_i+0x1c>
 8014262:	e086      	b.n	8014372 <_printf_i+0x12a>
 8014264:	d81f      	bhi.n	80142a6 <_printf_i+0x5e>
 8014266:	2a63      	cmp	r2, #99	; 0x63
 8014268:	d033      	beq.n	80142d2 <_printf_i+0x8a>
 801426a:	d808      	bhi.n	801427e <_printf_i+0x36>
 801426c:	2a00      	cmp	r2, #0
 801426e:	d100      	bne.n	8014272 <_printf_i+0x2a>
 8014270:	e08c      	b.n	801438c <_printf_i+0x144>
 8014272:	2a58      	cmp	r2, #88	; 0x58
 8014274:	d04d      	beq.n	8014312 <_printf_i+0xca>
 8014276:	0025      	movs	r5, r4
 8014278:	3542      	adds	r5, #66	; 0x42
 801427a:	702a      	strb	r2, [r5, #0]
 801427c:	e030      	b.n	80142e0 <_printf_i+0x98>
 801427e:	2a64      	cmp	r2, #100	; 0x64
 8014280:	d001      	beq.n	8014286 <_printf_i+0x3e>
 8014282:	2a69      	cmp	r2, #105	; 0x69
 8014284:	d1f7      	bne.n	8014276 <_printf_i+0x2e>
 8014286:	6819      	ldr	r1, [r3, #0]
 8014288:	6825      	ldr	r5, [r4, #0]
 801428a:	1d0a      	adds	r2, r1, #4
 801428c:	0628      	lsls	r0, r5, #24
 801428e:	d529      	bpl.n	80142e4 <_printf_i+0x9c>
 8014290:	6808      	ldr	r0, [r1, #0]
 8014292:	601a      	str	r2, [r3, #0]
 8014294:	2800      	cmp	r0, #0
 8014296:	da03      	bge.n	80142a0 <_printf_i+0x58>
 8014298:	232d      	movs	r3, #45	; 0x2d
 801429a:	9a02      	ldr	r2, [sp, #8]
 801429c:	4240      	negs	r0, r0
 801429e:	7013      	strb	r3, [r2, #0]
 80142a0:	4e6b      	ldr	r6, [pc, #428]	; (8014450 <_printf_i+0x208>)
 80142a2:	270a      	movs	r7, #10
 80142a4:	e04f      	b.n	8014346 <_printf_i+0xfe>
 80142a6:	2a73      	cmp	r2, #115	; 0x73
 80142a8:	d074      	beq.n	8014394 <_printf_i+0x14c>
 80142aa:	d808      	bhi.n	80142be <_printf_i+0x76>
 80142ac:	2a6f      	cmp	r2, #111	; 0x6f
 80142ae:	d01f      	beq.n	80142f0 <_printf_i+0xa8>
 80142b0:	2a70      	cmp	r2, #112	; 0x70
 80142b2:	d1e0      	bne.n	8014276 <_printf_i+0x2e>
 80142b4:	2220      	movs	r2, #32
 80142b6:	6809      	ldr	r1, [r1, #0]
 80142b8:	430a      	orrs	r2, r1
 80142ba:	6022      	str	r2, [r4, #0]
 80142bc:	e003      	b.n	80142c6 <_printf_i+0x7e>
 80142be:	2a75      	cmp	r2, #117	; 0x75
 80142c0:	d016      	beq.n	80142f0 <_printf_i+0xa8>
 80142c2:	2a78      	cmp	r2, #120	; 0x78
 80142c4:	d1d7      	bne.n	8014276 <_printf_i+0x2e>
 80142c6:	0022      	movs	r2, r4
 80142c8:	2178      	movs	r1, #120	; 0x78
 80142ca:	3245      	adds	r2, #69	; 0x45
 80142cc:	7011      	strb	r1, [r2, #0]
 80142ce:	4e61      	ldr	r6, [pc, #388]	; (8014454 <_printf_i+0x20c>)
 80142d0:	e022      	b.n	8014318 <_printf_i+0xd0>
 80142d2:	0025      	movs	r5, r4
 80142d4:	681a      	ldr	r2, [r3, #0]
 80142d6:	3542      	adds	r5, #66	; 0x42
 80142d8:	1d11      	adds	r1, r2, #4
 80142da:	6019      	str	r1, [r3, #0]
 80142dc:	6813      	ldr	r3, [r2, #0]
 80142de:	702b      	strb	r3, [r5, #0]
 80142e0:	2301      	movs	r3, #1
 80142e2:	e065      	b.n	80143b0 <_printf_i+0x168>
 80142e4:	6808      	ldr	r0, [r1, #0]
 80142e6:	601a      	str	r2, [r3, #0]
 80142e8:	0669      	lsls	r1, r5, #25
 80142ea:	d5d3      	bpl.n	8014294 <_printf_i+0x4c>
 80142ec:	b200      	sxth	r0, r0
 80142ee:	e7d1      	b.n	8014294 <_printf_i+0x4c>
 80142f0:	6819      	ldr	r1, [r3, #0]
 80142f2:	6825      	ldr	r5, [r4, #0]
 80142f4:	1d08      	adds	r0, r1, #4
 80142f6:	6018      	str	r0, [r3, #0]
 80142f8:	6808      	ldr	r0, [r1, #0]
 80142fa:	062e      	lsls	r6, r5, #24
 80142fc:	d505      	bpl.n	801430a <_printf_i+0xc2>
 80142fe:	4e54      	ldr	r6, [pc, #336]	; (8014450 <_printf_i+0x208>)
 8014300:	2708      	movs	r7, #8
 8014302:	2a6f      	cmp	r2, #111	; 0x6f
 8014304:	d01b      	beq.n	801433e <_printf_i+0xf6>
 8014306:	270a      	movs	r7, #10
 8014308:	e019      	b.n	801433e <_printf_i+0xf6>
 801430a:	066d      	lsls	r5, r5, #25
 801430c:	d5f7      	bpl.n	80142fe <_printf_i+0xb6>
 801430e:	b280      	uxth	r0, r0
 8014310:	e7f5      	b.n	80142fe <_printf_i+0xb6>
 8014312:	3145      	adds	r1, #69	; 0x45
 8014314:	4e4e      	ldr	r6, [pc, #312]	; (8014450 <_printf_i+0x208>)
 8014316:	700a      	strb	r2, [r1, #0]
 8014318:	6818      	ldr	r0, [r3, #0]
 801431a:	6822      	ldr	r2, [r4, #0]
 801431c:	1d01      	adds	r1, r0, #4
 801431e:	6800      	ldr	r0, [r0, #0]
 8014320:	6019      	str	r1, [r3, #0]
 8014322:	0615      	lsls	r5, r2, #24
 8014324:	d521      	bpl.n	801436a <_printf_i+0x122>
 8014326:	07d3      	lsls	r3, r2, #31
 8014328:	d502      	bpl.n	8014330 <_printf_i+0xe8>
 801432a:	2320      	movs	r3, #32
 801432c:	431a      	orrs	r2, r3
 801432e:	6022      	str	r2, [r4, #0]
 8014330:	2710      	movs	r7, #16
 8014332:	2800      	cmp	r0, #0
 8014334:	d103      	bne.n	801433e <_printf_i+0xf6>
 8014336:	2320      	movs	r3, #32
 8014338:	6822      	ldr	r2, [r4, #0]
 801433a:	439a      	bics	r2, r3
 801433c:	6022      	str	r2, [r4, #0]
 801433e:	0023      	movs	r3, r4
 8014340:	2200      	movs	r2, #0
 8014342:	3343      	adds	r3, #67	; 0x43
 8014344:	701a      	strb	r2, [r3, #0]
 8014346:	6863      	ldr	r3, [r4, #4]
 8014348:	60a3      	str	r3, [r4, #8]
 801434a:	2b00      	cmp	r3, #0
 801434c:	db58      	blt.n	8014400 <_printf_i+0x1b8>
 801434e:	2204      	movs	r2, #4
 8014350:	6821      	ldr	r1, [r4, #0]
 8014352:	4391      	bics	r1, r2
 8014354:	6021      	str	r1, [r4, #0]
 8014356:	2800      	cmp	r0, #0
 8014358:	d154      	bne.n	8014404 <_printf_i+0x1bc>
 801435a:	9d02      	ldr	r5, [sp, #8]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d05a      	beq.n	8014416 <_printf_i+0x1ce>
 8014360:	0025      	movs	r5, r4
 8014362:	7833      	ldrb	r3, [r6, #0]
 8014364:	3542      	adds	r5, #66	; 0x42
 8014366:	702b      	strb	r3, [r5, #0]
 8014368:	e055      	b.n	8014416 <_printf_i+0x1ce>
 801436a:	0655      	lsls	r5, r2, #25
 801436c:	d5db      	bpl.n	8014326 <_printf_i+0xde>
 801436e:	b280      	uxth	r0, r0
 8014370:	e7d9      	b.n	8014326 <_printf_i+0xde>
 8014372:	681a      	ldr	r2, [r3, #0]
 8014374:	680d      	ldr	r5, [r1, #0]
 8014376:	1d10      	adds	r0, r2, #4
 8014378:	6949      	ldr	r1, [r1, #20]
 801437a:	6018      	str	r0, [r3, #0]
 801437c:	6813      	ldr	r3, [r2, #0]
 801437e:	062e      	lsls	r6, r5, #24
 8014380:	d501      	bpl.n	8014386 <_printf_i+0x13e>
 8014382:	6019      	str	r1, [r3, #0]
 8014384:	e002      	b.n	801438c <_printf_i+0x144>
 8014386:	066d      	lsls	r5, r5, #25
 8014388:	d5fb      	bpl.n	8014382 <_printf_i+0x13a>
 801438a:	8019      	strh	r1, [r3, #0]
 801438c:	2300      	movs	r3, #0
 801438e:	9d02      	ldr	r5, [sp, #8]
 8014390:	6123      	str	r3, [r4, #16]
 8014392:	e04f      	b.n	8014434 <_printf_i+0x1ec>
 8014394:	681a      	ldr	r2, [r3, #0]
 8014396:	1d11      	adds	r1, r2, #4
 8014398:	6019      	str	r1, [r3, #0]
 801439a:	6815      	ldr	r5, [r2, #0]
 801439c:	2100      	movs	r1, #0
 801439e:	6862      	ldr	r2, [r4, #4]
 80143a0:	0028      	movs	r0, r5
 80143a2:	f002 fc21 	bl	8016be8 <memchr>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d001      	beq.n	80143ae <_printf_i+0x166>
 80143aa:	1b40      	subs	r0, r0, r5
 80143ac:	6060      	str	r0, [r4, #4]
 80143ae:	6863      	ldr	r3, [r4, #4]
 80143b0:	6123      	str	r3, [r4, #16]
 80143b2:	2300      	movs	r3, #0
 80143b4:	9a02      	ldr	r2, [sp, #8]
 80143b6:	7013      	strb	r3, [r2, #0]
 80143b8:	e03c      	b.n	8014434 <_printf_i+0x1ec>
 80143ba:	6923      	ldr	r3, [r4, #16]
 80143bc:	002a      	movs	r2, r5
 80143be:	9904      	ldr	r1, [sp, #16]
 80143c0:	9803      	ldr	r0, [sp, #12]
 80143c2:	9d05      	ldr	r5, [sp, #20]
 80143c4:	47a8      	blx	r5
 80143c6:	1c43      	adds	r3, r0, #1
 80143c8:	d03e      	beq.n	8014448 <_printf_i+0x200>
 80143ca:	6823      	ldr	r3, [r4, #0]
 80143cc:	079b      	lsls	r3, r3, #30
 80143ce:	d415      	bmi.n	80143fc <_printf_i+0x1b4>
 80143d0:	9b07      	ldr	r3, [sp, #28]
 80143d2:	68e0      	ldr	r0, [r4, #12]
 80143d4:	4298      	cmp	r0, r3
 80143d6:	da39      	bge.n	801444c <_printf_i+0x204>
 80143d8:	0018      	movs	r0, r3
 80143da:	e037      	b.n	801444c <_printf_i+0x204>
 80143dc:	0022      	movs	r2, r4
 80143de:	2301      	movs	r3, #1
 80143e0:	3219      	adds	r2, #25
 80143e2:	9904      	ldr	r1, [sp, #16]
 80143e4:	9803      	ldr	r0, [sp, #12]
 80143e6:	9e05      	ldr	r6, [sp, #20]
 80143e8:	47b0      	blx	r6
 80143ea:	1c43      	adds	r3, r0, #1
 80143ec:	d02c      	beq.n	8014448 <_printf_i+0x200>
 80143ee:	3501      	adds	r5, #1
 80143f0:	68e3      	ldr	r3, [r4, #12]
 80143f2:	9a07      	ldr	r2, [sp, #28]
 80143f4:	1a9b      	subs	r3, r3, r2
 80143f6:	42ab      	cmp	r3, r5
 80143f8:	dcf0      	bgt.n	80143dc <_printf_i+0x194>
 80143fa:	e7e9      	b.n	80143d0 <_printf_i+0x188>
 80143fc:	2500      	movs	r5, #0
 80143fe:	e7f7      	b.n	80143f0 <_printf_i+0x1a8>
 8014400:	2800      	cmp	r0, #0
 8014402:	d0ad      	beq.n	8014360 <_printf_i+0x118>
 8014404:	9d02      	ldr	r5, [sp, #8]
 8014406:	0039      	movs	r1, r7
 8014408:	f7eb ff1e 	bl	8000248 <__aeabi_uidivmod>
 801440c:	5c73      	ldrb	r3, [r6, r1]
 801440e:	3d01      	subs	r5, #1
 8014410:	702b      	strb	r3, [r5, #0]
 8014412:	2800      	cmp	r0, #0
 8014414:	d1f7      	bne.n	8014406 <_printf_i+0x1be>
 8014416:	2f08      	cmp	r7, #8
 8014418:	d109      	bne.n	801442e <_printf_i+0x1e6>
 801441a:	6823      	ldr	r3, [r4, #0]
 801441c:	07db      	lsls	r3, r3, #31
 801441e:	d506      	bpl.n	801442e <_printf_i+0x1e6>
 8014420:	6863      	ldr	r3, [r4, #4]
 8014422:	6922      	ldr	r2, [r4, #16]
 8014424:	4293      	cmp	r3, r2
 8014426:	dc02      	bgt.n	801442e <_printf_i+0x1e6>
 8014428:	2330      	movs	r3, #48	; 0x30
 801442a:	3d01      	subs	r5, #1
 801442c:	702b      	strb	r3, [r5, #0]
 801442e:	9b02      	ldr	r3, [sp, #8]
 8014430:	1b5b      	subs	r3, r3, r5
 8014432:	6123      	str	r3, [r4, #16]
 8014434:	9b05      	ldr	r3, [sp, #20]
 8014436:	aa07      	add	r2, sp, #28
 8014438:	9300      	str	r3, [sp, #0]
 801443a:	0021      	movs	r1, r4
 801443c:	9b04      	ldr	r3, [sp, #16]
 801443e:	9803      	ldr	r0, [sp, #12]
 8014440:	f7ff fe94 	bl	801416c <_printf_common>
 8014444:	1c43      	adds	r3, r0, #1
 8014446:	d1b8      	bne.n	80143ba <_printf_i+0x172>
 8014448:	2001      	movs	r0, #1
 801444a:	4240      	negs	r0, r0
 801444c:	b009      	add	sp, #36	; 0x24
 801444e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014450:	0801aa2c 	.word	0x0801aa2c
 8014454:	0801aa3d 	.word	0x0801aa3d

08014458 <_scanf_float>:
 8014458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801445a:	b08b      	sub	sp, #44	; 0x2c
 801445c:	9002      	str	r0, [sp, #8]
 801445e:	9200      	str	r2, [sp, #0]
 8014460:	2000      	movs	r0, #0
 8014462:	22ae      	movs	r2, #174	; 0xae
 8014464:	9305      	str	r3, [sp, #20]
 8014466:	688b      	ldr	r3, [r1, #8]
 8014468:	000e      	movs	r6, r1
 801446a:	1e59      	subs	r1, r3, #1
 801446c:	0052      	lsls	r2, r2, #1
 801446e:	9004      	str	r0, [sp, #16]
 8014470:	4291      	cmp	r1, r2
 8014472:	d905      	bls.n	8014480 <_scanf_float+0x28>
 8014474:	3b5e      	subs	r3, #94	; 0x5e
 8014476:	3bff      	subs	r3, #255	; 0xff
 8014478:	9304      	str	r3, [sp, #16]
 801447a:	235e      	movs	r3, #94	; 0x5e
 801447c:	33ff      	adds	r3, #255	; 0xff
 801447e:	60b3      	str	r3, [r6, #8]
 8014480:	23f0      	movs	r3, #240	; 0xf0
 8014482:	6832      	ldr	r2, [r6, #0]
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	4313      	orrs	r3, r2
 8014488:	6033      	str	r3, [r6, #0]
 801448a:	0033      	movs	r3, r6
 801448c:	2700      	movs	r7, #0
 801448e:	331c      	adds	r3, #28
 8014490:	001d      	movs	r5, r3
 8014492:	003c      	movs	r4, r7
 8014494:	9303      	str	r3, [sp, #12]
 8014496:	9708      	str	r7, [sp, #32]
 8014498:	9707      	str	r7, [sp, #28]
 801449a:	9701      	str	r7, [sp, #4]
 801449c:	9706      	str	r7, [sp, #24]
 801449e:	68b2      	ldr	r2, [r6, #8]
 80144a0:	2a00      	cmp	r2, #0
 80144a2:	d013      	beq.n	80144cc <_scanf_float+0x74>
 80144a4:	9b00      	ldr	r3, [sp, #0]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	9309      	str	r3, [sp, #36]	; 0x24
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	2b49      	cmp	r3, #73	; 0x49
 80144ae:	d100      	bne.n	80144b2 <_scanf_float+0x5a>
 80144b0:	e07c      	b.n	80145ac <_scanf_float+0x154>
 80144b2:	d854      	bhi.n	801455e <_scanf_float+0x106>
 80144b4:	2b39      	cmp	r3, #57	; 0x39
 80144b6:	d847      	bhi.n	8014548 <_scanf_float+0xf0>
 80144b8:	2b31      	cmp	r3, #49	; 0x31
 80144ba:	d300      	bcc.n	80144be <_scanf_float+0x66>
 80144bc:	e094      	b.n	80145e8 <_scanf_float+0x190>
 80144be:	2b2d      	cmp	r3, #45	; 0x2d
 80144c0:	d100      	bne.n	80144c4 <_scanf_float+0x6c>
 80144c2:	e09c      	b.n	80145fe <_scanf_float+0x1a6>
 80144c4:	d817      	bhi.n	80144f6 <_scanf_float+0x9e>
 80144c6:	2b2b      	cmp	r3, #43	; 0x2b
 80144c8:	d100      	bne.n	80144cc <_scanf_float+0x74>
 80144ca:	e098      	b.n	80145fe <_scanf_float+0x1a6>
 80144cc:	9b01      	ldr	r3, [sp, #4]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d003      	beq.n	80144da <_scanf_float+0x82>
 80144d2:	6832      	ldr	r2, [r6, #0]
 80144d4:	4b9b      	ldr	r3, [pc, #620]	; (8014744 <_scanf_float+0x2ec>)
 80144d6:	4013      	ands	r3, r2
 80144d8:	6033      	str	r3, [r6, #0]
 80144da:	3c01      	subs	r4, #1
 80144dc:	2c01      	cmp	r4, #1
 80144de:	d900      	bls.n	80144e2 <_scanf_float+0x8a>
 80144e0:	e0ee      	b.n	80146c0 <_scanf_float+0x268>
 80144e2:	24be      	movs	r4, #190	; 0xbe
 80144e4:	0064      	lsls	r4, r4, #1
 80144e6:	9b03      	ldr	r3, [sp, #12]
 80144e8:	429d      	cmp	r5, r3
 80144ea:	d900      	bls.n	80144ee <_scanf_float+0x96>
 80144ec:	e0de      	b.n	80146ac <_scanf_float+0x254>
 80144ee:	2701      	movs	r7, #1
 80144f0:	0038      	movs	r0, r7
 80144f2:	b00b      	add	sp, #44	; 0x2c
 80144f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f6:	2b2e      	cmp	r3, #46	; 0x2e
 80144f8:	d100      	bne.n	80144fc <_scanf_float+0xa4>
 80144fa:	e0a2      	b.n	8014642 <_scanf_float+0x1ea>
 80144fc:	2b30      	cmp	r3, #48	; 0x30
 80144fe:	d1e5      	bne.n	80144cc <_scanf_float+0x74>
 8014500:	6831      	ldr	r1, [r6, #0]
 8014502:	05c8      	lsls	r0, r1, #23
 8014504:	d570      	bpl.n	80145e8 <_scanf_float+0x190>
 8014506:	2380      	movs	r3, #128	; 0x80
 8014508:	4399      	bics	r1, r3
 801450a:	9b01      	ldr	r3, [sp, #4]
 801450c:	6031      	str	r1, [r6, #0]
 801450e:	3301      	adds	r3, #1
 8014510:	9301      	str	r3, [sp, #4]
 8014512:	9b04      	ldr	r3, [sp, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d003      	beq.n	8014520 <_scanf_float+0xc8>
 8014518:	3b01      	subs	r3, #1
 801451a:	3201      	adds	r2, #1
 801451c:	9304      	str	r3, [sp, #16]
 801451e:	60b2      	str	r2, [r6, #8]
 8014520:	68b3      	ldr	r3, [r6, #8]
 8014522:	9a00      	ldr	r2, [sp, #0]
 8014524:	3b01      	subs	r3, #1
 8014526:	60b3      	str	r3, [r6, #8]
 8014528:	6933      	ldr	r3, [r6, #16]
 801452a:	3301      	adds	r3, #1
 801452c:	6133      	str	r3, [r6, #16]
 801452e:	9b00      	ldr	r3, [sp, #0]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	9309      	str	r3, [sp, #36]	; 0x24
 8014534:	3b01      	subs	r3, #1
 8014536:	6053      	str	r3, [r2, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	dc00      	bgt.n	801453e <_scanf_float+0xe6>
 801453c:	e0ac      	b.n	8014698 <_scanf_float+0x240>
 801453e:	6813      	ldr	r3, [r2, #0]
 8014540:	9309      	str	r3, [sp, #36]	; 0x24
 8014542:	3301      	adds	r3, #1
 8014544:	6013      	str	r3, [r2, #0]
 8014546:	e7aa      	b.n	801449e <_scanf_float+0x46>
 8014548:	2b45      	cmp	r3, #69	; 0x45
 801454a:	d100      	bne.n	801454e <_scanf_float+0xf6>
 801454c:	e083      	b.n	8014656 <_scanf_float+0x1fe>
 801454e:	2b46      	cmp	r3, #70	; 0x46
 8014550:	d06d      	beq.n	801462e <_scanf_float+0x1d6>
 8014552:	2b41      	cmp	r3, #65	; 0x41
 8014554:	d1ba      	bne.n	80144cc <_scanf_float+0x74>
 8014556:	2c01      	cmp	r4, #1
 8014558:	d1b8      	bne.n	80144cc <_scanf_float+0x74>
 801455a:	2402      	movs	r4, #2
 801455c:	e04c      	b.n	80145f8 <_scanf_float+0x1a0>
 801455e:	2b65      	cmp	r3, #101	; 0x65
 8014560:	d079      	beq.n	8014656 <_scanf_float+0x1fe>
 8014562:	d81b      	bhi.n	801459c <_scanf_float+0x144>
 8014564:	2b54      	cmp	r3, #84	; 0x54
 8014566:	d067      	beq.n	8014638 <_scanf_float+0x1e0>
 8014568:	d813      	bhi.n	8014592 <_scanf_float+0x13a>
 801456a:	2b4e      	cmp	r3, #78	; 0x4e
 801456c:	d1ae      	bne.n	80144cc <_scanf_float+0x74>
 801456e:	2c00      	cmp	r4, #0
 8014570:	d14c      	bne.n	801460c <_scanf_float+0x1b4>
 8014572:	9a01      	ldr	r2, [sp, #4]
 8014574:	2a00      	cmp	r2, #0
 8014576:	d14b      	bne.n	8014610 <_scanf_float+0x1b8>
 8014578:	21e0      	movs	r1, #224	; 0xe0
 801457a:	20e0      	movs	r0, #224	; 0xe0
 801457c:	6832      	ldr	r2, [r6, #0]
 801457e:	00c9      	lsls	r1, r1, #3
 8014580:	4011      	ands	r1, r2
 8014582:	00c0      	lsls	r0, r0, #3
 8014584:	4281      	cmp	r1, r0
 8014586:	d143      	bne.n	8014610 <_scanf_float+0x1b8>
 8014588:	496f      	ldr	r1, [pc, #444]	; (8014748 <_scanf_float+0x2f0>)
 801458a:	3401      	adds	r4, #1
 801458c:	400a      	ands	r2, r1
 801458e:	6032      	str	r2, [r6, #0]
 8014590:	e032      	b.n	80145f8 <_scanf_float+0x1a0>
 8014592:	2b59      	cmp	r3, #89	; 0x59
 8014594:	d023      	beq.n	80145de <_scanf_float+0x186>
 8014596:	2b61      	cmp	r3, #97	; 0x61
 8014598:	d0dd      	beq.n	8014556 <_scanf_float+0xfe>
 801459a:	e797      	b.n	80144cc <_scanf_float+0x74>
 801459c:	2b6e      	cmp	r3, #110	; 0x6e
 801459e:	d0e6      	beq.n	801456e <_scanf_float+0x116>
 80145a0:	d818      	bhi.n	80145d4 <_scanf_float+0x17c>
 80145a2:	2b66      	cmp	r3, #102	; 0x66
 80145a4:	d043      	beq.n	801462e <_scanf_float+0x1d6>
 80145a6:	2b69      	cmp	r3, #105	; 0x69
 80145a8:	d000      	beq.n	80145ac <_scanf_float+0x154>
 80145aa:	e78f      	b.n	80144cc <_scanf_float+0x74>
 80145ac:	2f00      	cmp	r7, #0
 80145ae:	d137      	bne.n	8014620 <_scanf_float+0x1c8>
 80145b0:	9a01      	ldr	r2, [sp, #4]
 80145b2:	2a00      	cmp	r2, #0
 80145b4:	d000      	beq.n	80145b8 <_scanf_float+0x160>
 80145b6:	e78c      	b.n	80144d2 <_scanf_float+0x7a>
 80145b8:	21e0      	movs	r1, #224	; 0xe0
 80145ba:	20e0      	movs	r0, #224	; 0xe0
 80145bc:	6832      	ldr	r2, [r6, #0]
 80145be:	00c9      	lsls	r1, r1, #3
 80145c0:	4011      	ands	r1, r2
 80145c2:	00c0      	lsls	r0, r0, #3
 80145c4:	4281      	cmp	r1, r0
 80145c6:	d000      	beq.n	80145ca <_scanf_float+0x172>
 80145c8:	e787      	b.n	80144da <_scanf_float+0x82>
 80145ca:	495f      	ldr	r1, [pc, #380]	; (8014748 <_scanf_float+0x2f0>)
 80145cc:	3701      	adds	r7, #1
 80145ce:	400a      	ands	r2, r1
 80145d0:	6032      	str	r2, [r6, #0]
 80145d2:	e011      	b.n	80145f8 <_scanf_float+0x1a0>
 80145d4:	2b74      	cmp	r3, #116	; 0x74
 80145d6:	d02f      	beq.n	8014638 <_scanf_float+0x1e0>
 80145d8:	2b79      	cmp	r3, #121	; 0x79
 80145da:	d000      	beq.n	80145de <_scanf_float+0x186>
 80145dc:	e776      	b.n	80144cc <_scanf_float+0x74>
 80145de:	2f07      	cmp	r7, #7
 80145e0:	d000      	beq.n	80145e4 <_scanf_float+0x18c>
 80145e2:	e773      	b.n	80144cc <_scanf_float+0x74>
 80145e4:	2708      	movs	r7, #8
 80145e6:	e007      	b.n	80145f8 <_scanf_float+0x1a0>
 80145e8:	19e2      	adds	r2, r4, r7
 80145ea:	2a00      	cmp	r2, #0
 80145ec:	d000      	beq.n	80145f0 <_scanf_float+0x198>
 80145ee:	e76d      	b.n	80144cc <_scanf_float+0x74>
 80145f0:	4a56      	ldr	r2, [pc, #344]	; (801474c <_scanf_float+0x2f4>)
 80145f2:	6831      	ldr	r1, [r6, #0]
 80145f4:	400a      	ands	r2, r1
 80145f6:	6032      	str	r2, [r6, #0]
 80145f8:	702b      	strb	r3, [r5, #0]
 80145fa:	3501      	adds	r5, #1
 80145fc:	e790      	b.n	8014520 <_scanf_float+0xc8>
 80145fe:	2180      	movs	r1, #128	; 0x80
 8014600:	6832      	ldr	r2, [r6, #0]
 8014602:	420a      	tst	r2, r1
 8014604:	d100      	bne.n	8014608 <_scanf_float+0x1b0>
 8014606:	e761      	b.n	80144cc <_scanf_float+0x74>
 8014608:	438a      	bics	r2, r1
 801460a:	e7f4      	b.n	80145f6 <_scanf_float+0x19e>
 801460c:	2c02      	cmp	r4, #2
 801460e:	d041      	beq.n	8014694 <_scanf_float+0x23c>
 8014610:	2f01      	cmp	r7, #1
 8014612:	d002      	beq.n	801461a <_scanf_float+0x1c2>
 8014614:	2f04      	cmp	r7, #4
 8014616:	d000      	beq.n	801461a <_scanf_float+0x1c2>
 8014618:	e758      	b.n	80144cc <_scanf_float+0x74>
 801461a:	3701      	adds	r7, #1
 801461c:	b2ff      	uxtb	r7, r7
 801461e:	e7eb      	b.n	80145f8 <_scanf_float+0x1a0>
 8014620:	2102      	movs	r1, #2
 8014622:	1efa      	subs	r2, r7, #3
 8014624:	438a      	bics	r2, r1
 8014626:	b2d2      	uxtb	r2, r2
 8014628:	2a00      	cmp	r2, #0
 801462a:	d0f6      	beq.n	801461a <_scanf_float+0x1c2>
 801462c:	e74e      	b.n	80144cc <_scanf_float+0x74>
 801462e:	2f02      	cmp	r7, #2
 8014630:	d000      	beq.n	8014634 <_scanf_float+0x1dc>
 8014632:	e74b      	b.n	80144cc <_scanf_float+0x74>
 8014634:	2703      	movs	r7, #3
 8014636:	e7df      	b.n	80145f8 <_scanf_float+0x1a0>
 8014638:	2f06      	cmp	r7, #6
 801463a:	d000      	beq.n	801463e <_scanf_float+0x1e6>
 801463c:	e746      	b.n	80144cc <_scanf_float+0x74>
 801463e:	2707      	movs	r7, #7
 8014640:	e7da      	b.n	80145f8 <_scanf_float+0x1a0>
 8014642:	6832      	ldr	r2, [r6, #0]
 8014644:	0591      	lsls	r1, r2, #22
 8014646:	d400      	bmi.n	801464a <_scanf_float+0x1f2>
 8014648:	e740      	b.n	80144cc <_scanf_float+0x74>
 801464a:	4941      	ldr	r1, [pc, #260]	; (8014750 <_scanf_float+0x2f8>)
 801464c:	400a      	ands	r2, r1
 801464e:	6032      	str	r2, [r6, #0]
 8014650:	9a01      	ldr	r2, [sp, #4]
 8014652:	9206      	str	r2, [sp, #24]
 8014654:	e7d0      	b.n	80145f8 <_scanf_float+0x1a0>
 8014656:	21a0      	movs	r1, #160	; 0xa0
 8014658:	2080      	movs	r0, #128	; 0x80
 801465a:	6832      	ldr	r2, [r6, #0]
 801465c:	00c9      	lsls	r1, r1, #3
 801465e:	4011      	ands	r1, r2
 8014660:	00c0      	lsls	r0, r0, #3
 8014662:	4281      	cmp	r1, r0
 8014664:	d006      	beq.n	8014674 <_scanf_float+0x21c>
 8014666:	4202      	tst	r2, r0
 8014668:	d100      	bne.n	801466c <_scanf_float+0x214>
 801466a:	e72f      	b.n	80144cc <_scanf_float+0x74>
 801466c:	9901      	ldr	r1, [sp, #4]
 801466e:	2900      	cmp	r1, #0
 8014670:	d100      	bne.n	8014674 <_scanf_float+0x21c>
 8014672:	e732      	b.n	80144da <_scanf_float+0x82>
 8014674:	0591      	lsls	r1, r2, #22
 8014676:	d404      	bmi.n	8014682 <_scanf_float+0x22a>
 8014678:	9901      	ldr	r1, [sp, #4]
 801467a:	9806      	ldr	r0, [sp, #24]
 801467c:	9508      	str	r5, [sp, #32]
 801467e:	1a09      	subs	r1, r1, r0
 8014680:	9107      	str	r1, [sp, #28]
 8014682:	4931      	ldr	r1, [pc, #196]	; (8014748 <_scanf_float+0x2f0>)
 8014684:	400a      	ands	r2, r1
 8014686:	21c0      	movs	r1, #192	; 0xc0
 8014688:	0049      	lsls	r1, r1, #1
 801468a:	430a      	orrs	r2, r1
 801468c:	6032      	str	r2, [r6, #0]
 801468e:	2200      	movs	r2, #0
 8014690:	9201      	str	r2, [sp, #4]
 8014692:	e7b1      	b.n	80145f8 <_scanf_float+0x1a0>
 8014694:	2403      	movs	r4, #3
 8014696:	e7af      	b.n	80145f8 <_scanf_float+0x1a0>
 8014698:	23c0      	movs	r3, #192	; 0xc0
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	58f3      	ldr	r3, [r6, r3]
 801469e:	9900      	ldr	r1, [sp, #0]
 80146a0:	9802      	ldr	r0, [sp, #8]
 80146a2:	4798      	blx	r3
 80146a4:	2800      	cmp	r0, #0
 80146a6:	d100      	bne.n	80146aa <_scanf_float+0x252>
 80146a8:	e6f9      	b.n	801449e <_scanf_float+0x46>
 80146aa:	e70f      	b.n	80144cc <_scanf_float+0x74>
 80146ac:	3d01      	subs	r5, #1
 80146ae:	5933      	ldr	r3, [r6, r4]
 80146b0:	7829      	ldrb	r1, [r5, #0]
 80146b2:	9a00      	ldr	r2, [sp, #0]
 80146b4:	9802      	ldr	r0, [sp, #8]
 80146b6:	4798      	blx	r3
 80146b8:	6933      	ldr	r3, [r6, #16]
 80146ba:	3b01      	subs	r3, #1
 80146bc:	6133      	str	r3, [r6, #16]
 80146be:	e712      	b.n	80144e6 <_scanf_float+0x8e>
 80146c0:	1e7b      	subs	r3, r7, #1
 80146c2:	2b06      	cmp	r3, #6
 80146c4:	d826      	bhi.n	8014714 <_scanf_float+0x2bc>
 80146c6:	2f02      	cmp	r7, #2
 80146c8:	d839      	bhi.n	801473e <_scanf_float+0x2e6>
 80146ca:	24be      	movs	r4, #190	; 0xbe
 80146cc:	0064      	lsls	r4, r4, #1
 80146ce:	9b03      	ldr	r3, [sp, #12]
 80146d0:	429d      	cmp	r5, r3
 80146d2:	d800      	bhi.n	80146d6 <_scanf_float+0x27e>
 80146d4:	e70b      	b.n	80144ee <_scanf_float+0x96>
 80146d6:	3d01      	subs	r5, #1
 80146d8:	5933      	ldr	r3, [r6, r4]
 80146da:	7829      	ldrb	r1, [r5, #0]
 80146dc:	9a00      	ldr	r2, [sp, #0]
 80146de:	9802      	ldr	r0, [sp, #8]
 80146e0:	4798      	blx	r3
 80146e2:	6933      	ldr	r3, [r6, #16]
 80146e4:	3b01      	subs	r3, #1
 80146e6:	6133      	str	r3, [r6, #16]
 80146e8:	e7f1      	b.n	80146ce <_scanf_float+0x276>
 80146ea:	9b04      	ldr	r3, [sp, #16]
 80146ec:	9a00      	ldr	r2, [sp, #0]
 80146ee:	3b01      	subs	r3, #1
 80146f0:	9304      	str	r3, [sp, #16]
 80146f2:	7819      	ldrb	r1, [r3, #0]
 80146f4:	23be      	movs	r3, #190	; 0xbe
 80146f6:	005b      	lsls	r3, r3, #1
 80146f8:	58f3      	ldr	r3, [r6, r3]
 80146fa:	9802      	ldr	r0, [sp, #8]
 80146fc:	9309      	str	r3, [sp, #36]	; 0x24
 80146fe:	4798      	blx	r3
 8014700:	6933      	ldr	r3, [r6, #16]
 8014702:	3b01      	subs	r3, #1
 8014704:	6133      	str	r3, [r6, #16]
 8014706:	3c01      	subs	r4, #1
 8014708:	b2e4      	uxtb	r4, r4
 801470a:	2c02      	cmp	r4, #2
 801470c:	d1ed      	bne.n	80146ea <_scanf_float+0x292>
 801470e:	3f03      	subs	r7, #3
 8014710:	b2ff      	uxtb	r7, r7
 8014712:	1bed      	subs	r5, r5, r7
 8014714:	6833      	ldr	r3, [r6, #0]
 8014716:	05da      	lsls	r2, r3, #23
 8014718:	d537      	bpl.n	801478a <_scanf_float+0x332>
 801471a:	055b      	lsls	r3, r3, #21
 801471c:	d51a      	bpl.n	8014754 <_scanf_float+0x2fc>
 801471e:	24be      	movs	r4, #190	; 0xbe
 8014720:	0064      	lsls	r4, r4, #1
 8014722:	9b03      	ldr	r3, [sp, #12]
 8014724:	429d      	cmp	r5, r3
 8014726:	d800      	bhi.n	801472a <_scanf_float+0x2d2>
 8014728:	e6e1      	b.n	80144ee <_scanf_float+0x96>
 801472a:	3d01      	subs	r5, #1
 801472c:	5933      	ldr	r3, [r6, r4]
 801472e:	7829      	ldrb	r1, [r5, #0]
 8014730:	9a00      	ldr	r2, [sp, #0]
 8014732:	9802      	ldr	r0, [sp, #8]
 8014734:	4798      	blx	r3
 8014736:	6933      	ldr	r3, [r6, #16]
 8014738:	3b01      	subs	r3, #1
 801473a:	6133      	str	r3, [r6, #16]
 801473c:	e7f1      	b.n	8014722 <_scanf_float+0x2ca>
 801473e:	003c      	movs	r4, r7
 8014740:	9504      	str	r5, [sp, #16]
 8014742:	e7e0      	b.n	8014706 <_scanf_float+0x2ae>
 8014744:	fffffeff 	.word	0xfffffeff
 8014748:	fffff87f 	.word	0xfffff87f
 801474c:	fffffe7f 	.word	0xfffffe7f
 8014750:	fffffd7f 	.word	0xfffffd7f
 8014754:	6933      	ldr	r3, [r6, #16]
 8014756:	1e6c      	subs	r4, r5, #1
 8014758:	7821      	ldrb	r1, [r4, #0]
 801475a:	3b01      	subs	r3, #1
 801475c:	6133      	str	r3, [r6, #16]
 801475e:	2965      	cmp	r1, #101	; 0x65
 8014760:	d00c      	beq.n	801477c <_scanf_float+0x324>
 8014762:	2945      	cmp	r1, #69	; 0x45
 8014764:	d00a      	beq.n	801477c <_scanf_float+0x324>
 8014766:	23be      	movs	r3, #190	; 0xbe
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	58f3      	ldr	r3, [r6, r3]
 801476c:	9a00      	ldr	r2, [sp, #0]
 801476e:	9802      	ldr	r0, [sp, #8]
 8014770:	4798      	blx	r3
 8014772:	6933      	ldr	r3, [r6, #16]
 8014774:	1eac      	subs	r4, r5, #2
 8014776:	3b01      	subs	r3, #1
 8014778:	7821      	ldrb	r1, [r4, #0]
 801477a:	6133      	str	r3, [r6, #16]
 801477c:	23be      	movs	r3, #190	; 0xbe
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	58f3      	ldr	r3, [r6, r3]
 8014782:	9a00      	ldr	r2, [sp, #0]
 8014784:	9802      	ldr	r0, [sp, #8]
 8014786:	4798      	blx	r3
 8014788:	0025      	movs	r5, r4
 801478a:	2710      	movs	r7, #16
 801478c:	6833      	ldr	r3, [r6, #0]
 801478e:	401f      	ands	r7, r3
 8014790:	d15b      	bne.n	801484a <_scanf_float+0x3f2>
 8014792:	23c0      	movs	r3, #192	; 0xc0
 8014794:	702f      	strb	r7, [r5, #0]
 8014796:	6832      	ldr	r2, [r6, #0]
 8014798:	00db      	lsls	r3, r3, #3
 801479a:	4013      	ands	r3, r2
 801479c:	2280      	movs	r2, #128	; 0x80
 801479e:	00d2      	lsls	r2, r2, #3
 80147a0:	4293      	cmp	r3, r2
 80147a2:	d11b      	bne.n	80147dc <_scanf_float+0x384>
 80147a4:	9a06      	ldr	r2, [sp, #24]
 80147a6:	9b01      	ldr	r3, [sp, #4]
 80147a8:	1a9b      	subs	r3, r3, r2
 80147aa:	425a      	negs	r2, r3
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d122      	bne.n	80147f6 <_scanf_float+0x39e>
 80147b0:	2200      	movs	r2, #0
 80147b2:	9903      	ldr	r1, [sp, #12]
 80147b4:	9802      	ldr	r0, [sp, #8]
 80147b6:	f000 ff49 	bl	801564c <_strtod_r>
 80147ba:	9b05      	ldr	r3, [sp, #20]
 80147bc:	0004      	movs	r4, r0
 80147be:	6830      	ldr	r0, [r6, #0]
 80147c0:	000d      	movs	r5, r1
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	0782      	lsls	r2, r0, #30
 80147c6:	d523      	bpl.n	8014810 <_scanf_float+0x3b8>
 80147c8:	1d1a      	adds	r2, r3, #4
 80147ca:	9905      	ldr	r1, [sp, #20]
 80147cc:	600a      	str	r2, [r1, #0]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	601c      	str	r4, [r3, #0]
 80147d2:	605d      	str	r5, [r3, #4]
 80147d4:	68f3      	ldr	r3, [r6, #12]
 80147d6:	3301      	adds	r3, #1
 80147d8:	60f3      	str	r3, [r6, #12]
 80147da:	e689      	b.n	80144f0 <_scanf_float+0x98>
 80147dc:	9b07      	ldr	r3, [sp, #28]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d0e6      	beq.n	80147b0 <_scanf_float+0x358>
 80147e2:	9b08      	ldr	r3, [sp, #32]
 80147e4:	003a      	movs	r2, r7
 80147e6:	1c59      	adds	r1, r3, #1
 80147e8:	9802      	ldr	r0, [sp, #8]
 80147ea:	230a      	movs	r3, #10
 80147ec:	f001 f826 	bl	801583c <_strtol_r>
 80147f0:	9b07      	ldr	r3, [sp, #28]
 80147f2:	9d08      	ldr	r5, [sp, #32]
 80147f4:	1ac2      	subs	r2, r0, r3
 80147f6:	0033      	movs	r3, r6
 80147f8:	3370      	adds	r3, #112	; 0x70
 80147fa:	33ff      	adds	r3, #255	; 0xff
 80147fc:	429d      	cmp	r5, r3
 80147fe:	d302      	bcc.n	8014806 <_scanf_float+0x3ae>
 8014800:	0035      	movs	r5, r6
 8014802:	356f      	adds	r5, #111	; 0x6f
 8014804:	35ff      	adds	r5, #255	; 0xff
 8014806:	4912      	ldr	r1, [pc, #72]	; (8014850 <_scanf_float+0x3f8>)
 8014808:	0028      	movs	r0, r5
 801480a:	f000 f875 	bl	80148f8 <siprintf>
 801480e:	e7cf      	b.n	80147b0 <_scanf_float+0x358>
 8014810:	2104      	movs	r1, #4
 8014812:	4008      	ands	r0, r1
 8014814:	1d1a      	adds	r2, r3, #4
 8014816:	9001      	str	r0, [sp, #4]
 8014818:	2800      	cmp	r0, #0
 801481a:	d1d6      	bne.n	80147ca <_scanf_float+0x372>
 801481c:	9905      	ldr	r1, [sp, #20]
 801481e:	0020      	movs	r0, r4
 8014820:	600a      	str	r2, [r1, #0]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	0022      	movs	r2, r4
 8014826:	9300      	str	r3, [sp, #0]
 8014828:	0029      	movs	r1, r5
 801482a:	002b      	movs	r3, r5
 801482c:	f7ee f8e2 	bl	80029f4 <__aeabi_dcmpun>
 8014830:	2800      	cmp	r0, #0
 8014832:	d005      	beq.n	8014840 <_scanf_float+0x3e8>
 8014834:	9801      	ldr	r0, [sp, #4]
 8014836:	f000 f85b 	bl	80148f0 <nanf>
 801483a:	9b00      	ldr	r3, [sp, #0]
 801483c:	6018      	str	r0, [r3, #0]
 801483e:	e7c9      	b.n	80147d4 <_scanf_float+0x37c>
 8014840:	0020      	movs	r0, r4
 8014842:	0029      	movs	r1, r5
 8014844:	f7ee f9e6 	bl	8002c14 <__aeabi_d2f>
 8014848:	e7f7      	b.n	801483a <_scanf_float+0x3e2>
 801484a:	2700      	movs	r7, #0
 801484c:	e650      	b.n	80144f0 <_scanf_float+0x98>
 801484e:	46c0      	nop			; (mov r8, r8)
 8014850:	0801aa4e 	.word	0x0801aa4e

08014854 <rand>:
 8014854:	4b12      	ldr	r3, [pc, #72]	; (80148a0 <rand+0x4c>)
 8014856:	b510      	push	{r4, lr}
 8014858:	681c      	ldr	r4, [r3, #0]
 801485a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801485c:	2b00      	cmp	r3, #0
 801485e:	d10f      	bne.n	8014880 <rand+0x2c>
 8014860:	2018      	movs	r0, #24
 8014862:	f7ff f8ad 	bl	80139c0 <malloc>
 8014866:	4b0f      	ldr	r3, [pc, #60]	; (80148a4 <rand+0x50>)
 8014868:	63a0      	str	r0, [r4, #56]	; 0x38
 801486a:	6003      	str	r3, [r0, #0]
 801486c:	4b0e      	ldr	r3, [pc, #56]	; (80148a8 <rand+0x54>)
 801486e:	2201      	movs	r2, #1
 8014870:	6043      	str	r3, [r0, #4]
 8014872:	4b0e      	ldr	r3, [pc, #56]	; (80148ac <rand+0x58>)
 8014874:	6083      	str	r3, [r0, #8]
 8014876:	230b      	movs	r3, #11
 8014878:	8183      	strh	r3, [r0, #12]
 801487a:	2300      	movs	r3, #0
 801487c:	6102      	str	r2, [r0, #16]
 801487e:	6143      	str	r3, [r0, #20]
 8014880:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014882:	4a0b      	ldr	r2, [pc, #44]	; (80148b0 <rand+0x5c>)
 8014884:	6920      	ldr	r0, [r4, #16]
 8014886:	6961      	ldr	r1, [r4, #20]
 8014888:	4b0a      	ldr	r3, [pc, #40]	; (80148b4 <rand+0x60>)
 801488a:	f7eb fe45 	bl	8000518 <__aeabi_lmul>
 801488e:	2201      	movs	r2, #1
 8014890:	2300      	movs	r3, #0
 8014892:	1880      	adds	r0, r0, r2
 8014894:	4159      	adcs	r1, r3
 8014896:	6120      	str	r0, [r4, #16]
 8014898:	6161      	str	r1, [r4, #20]
 801489a:	0048      	lsls	r0, r1, #1
 801489c:	0840      	lsrs	r0, r0, #1
 801489e:	bd10      	pop	{r4, pc}
 80148a0:	200000b0 	.word	0x200000b0
 80148a4:	abcd330e 	.word	0xabcd330e
 80148a8:	e66d1234 	.word	0xe66d1234
 80148ac:	0005deec 	.word	0x0005deec
 80148b0:	4c957f2d 	.word	0x4c957f2d
 80148b4:	5851f42d 	.word	0x5851f42d

080148b8 <realloc>:
 80148b8:	b510      	push	{r4, lr}
 80148ba:	4b03      	ldr	r3, [pc, #12]	; (80148c8 <realloc+0x10>)
 80148bc:	000a      	movs	r2, r1
 80148be:	0001      	movs	r1, r0
 80148c0:	6818      	ldr	r0, [r3, #0]
 80148c2:	f002 fda2 	bl	801740a <_realloc_r>
 80148c6:	bd10      	pop	{r4, pc}
 80148c8:	200000b0 	.word	0x200000b0

080148cc <_sbrk_r>:
 80148cc:	2300      	movs	r3, #0
 80148ce:	b570      	push	{r4, r5, r6, lr}
 80148d0:	4c06      	ldr	r4, [pc, #24]	; (80148ec <_sbrk_r+0x20>)
 80148d2:	0005      	movs	r5, r0
 80148d4:	0008      	movs	r0, r1
 80148d6:	6023      	str	r3, [r4, #0]
 80148d8:	f002 ff3a 	bl	8017750 <_sbrk>
 80148dc:	1c43      	adds	r3, r0, #1
 80148de:	d103      	bne.n	80148e8 <_sbrk_r+0x1c>
 80148e0:	6823      	ldr	r3, [r4, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d000      	beq.n	80148e8 <_sbrk_r+0x1c>
 80148e6:	602b      	str	r3, [r5, #0]
 80148e8:	bd70      	pop	{r4, r5, r6, pc}
 80148ea:	46c0      	nop			; (mov r8, r8)
 80148ec:	20006678 	.word	0x20006678

080148f0 <nanf>:
 80148f0:	4800      	ldr	r0, [pc, #0]	; (80148f4 <nanf+0x4>)
 80148f2:	4770      	bx	lr
 80148f4:	7fc00000 	.word	0x7fc00000

080148f8 <siprintf>:
 80148f8:	b40e      	push	{r1, r2, r3}
 80148fa:	b500      	push	{lr}
 80148fc:	490b      	ldr	r1, [pc, #44]	; (801492c <siprintf+0x34>)
 80148fe:	b09c      	sub	sp, #112	; 0x70
 8014900:	ab1d      	add	r3, sp, #116	; 0x74
 8014902:	9002      	str	r0, [sp, #8]
 8014904:	9006      	str	r0, [sp, #24]
 8014906:	9107      	str	r1, [sp, #28]
 8014908:	9104      	str	r1, [sp, #16]
 801490a:	4809      	ldr	r0, [pc, #36]	; (8014930 <siprintf+0x38>)
 801490c:	4909      	ldr	r1, [pc, #36]	; (8014934 <siprintf+0x3c>)
 801490e:	cb04      	ldmia	r3!, {r2}
 8014910:	9105      	str	r1, [sp, #20]
 8014912:	6800      	ldr	r0, [r0, #0]
 8014914:	a902      	add	r1, sp, #8
 8014916:	9301      	str	r3, [sp, #4]
 8014918:	f002 fe00 	bl	801751c <_svfiprintf_r>
 801491c:	2300      	movs	r3, #0
 801491e:	9a02      	ldr	r2, [sp, #8]
 8014920:	7013      	strb	r3, [r2, #0]
 8014922:	b01c      	add	sp, #112	; 0x70
 8014924:	bc08      	pop	{r3}
 8014926:	b003      	add	sp, #12
 8014928:	4718      	bx	r3
 801492a:	46c0      	nop			; (mov r8, r8)
 801492c:	7fffffff 	.word	0x7fffffff
 8014930:	200000b0 	.word	0x200000b0
 8014934:	ffff0208 	.word	0xffff0208

08014938 <strcat>:
 8014938:	0002      	movs	r2, r0
 801493a:	b510      	push	{r4, lr}
 801493c:	7813      	ldrb	r3, [r2, #0]
 801493e:	1c54      	adds	r4, r2, #1
 8014940:	2b00      	cmp	r3, #0
 8014942:	d105      	bne.n	8014950 <strcat+0x18>
 8014944:	5ccc      	ldrb	r4, [r1, r3]
 8014946:	54d4      	strb	r4, [r2, r3]
 8014948:	3301      	adds	r3, #1
 801494a:	2c00      	cmp	r4, #0
 801494c:	d1fa      	bne.n	8014944 <strcat+0xc>
 801494e:	bd10      	pop	{r4, pc}
 8014950:	0022      	movs	r2, r4
 8014952:	e7f3      	b.n	801493c <strcat+0x4>

08014954 <strchr>:
 8014954:	b2c9      	uxtb	r1, r1
 8014956:	7803      	ldrb	r3, [r0, #0]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d004      	beq.n	8014966 <strchr+0x12>
 801495c:	428b      	cmp	r3, r1
 801495e:	d100      	bne.n	8014962 <strchr+0xe>
 8014960:	4770      	bx	lr
 8014962:	3001      	adds	r0, #1
 8014964:	e7f7      	b.n	8014956 <strchr+0x2>
 8014966:	424b      	negs	r3, r1
 8014968:	4159      	adcs	r1, r3
 801496a:	4249      	negs	r1, r1
 801496c:	4008      	ands	r0, r1
 801496e:	e7f7      	b.n	8014960 <strchr+0xc>

08014970 <strcpy>:
 8014970:	0003      	movs	r3, r0
 8014972:	780a      	ldrb	r2, [r1, #0]
 8014974:	3101      	adds	r1, #1
 8014976:	701a      	strb	r2, [r3, #0]
 8014978:	3301      	adds	r3, #1
 801497a:	2a00      	cmp	r2, #0
 801497c:	d1f9      	bne.n	8014972 <strcpy+0x2>
 801497e:	4770      	bx	lr

08014980 <strncmp>:
 8014980:	2300      	movs	r3, #0
 8014982:	b530      	push	{r4, r5, lr}
 8014984:	429a      	cmp	r2, r3
 8014986:	d00a      	beq.n	801499e <strncmp+0x1e>
 8014988:	3a01      	subs	r2, #1
 801498a:	5cc4      	ldrb	r4, [r0, r3]
 801498c:	5ccd      	ldrb	r5, [r1, r3]
 801498e:	42ac      	cmp	r4, r5
 8014990:	d104      	bne.n	801499c <strncmp+0x1c>
 8014992:	4293      	cmp	r3, r2
 8014994:	d002      	beq.n	801499c <strncmp+0x1c>
 8014996:	3301      	adds	r3, #1
 8014998:	2c00      	cmp	r4, #0
 801499a:	d1f6      	bne.n	801498a <strncmp+0xa>
 801499c:	1b63      	subs	r3, r4, r5
 801499e:	0018      	movs	r0, r3
 80149a0:	bd30      	pop	{r4, r5, pc}

080149a2 <strncpy>:
 80149a2:	b530      	push	{r4, r5, lr}
 80149a4:	0005      	movs	r5, r0
 80149a6:	2a00      	cmp	r2, #0
 80149a8:	d100      	bne.n	80149ac <strncpy+0xa>
 80149aa:	bd30      	pop	{r4, r5, pc}
 80149ac:	780c      	ldrb	r4, [r1, #0]
 80149ae:	3a01      	subs	r2, #1
 80149b0:	1c6b      	adds	r3, r5, #1
 80149b2:	702c      	strb	r4, [r5, #0]
 80149b4:	3101      	adds	r1, #1
 80149b6:	2c00      	cmp	r4, #0
 80149b8:	d105      	bne.n	80149c6 <strncpy+0x24>
 80149ba:	189a      	adds	r2, r3, r2
 80149bc:	429a      	cmp	r2, r3
 80149be:	d0f4      	beq.n	80149aa <strncpy+0x8>
 80149c0:	701c      	strb	r4, [r3, #0]
 80149c2:	3301      	adds	r3, #1
 80149c4:	e7fa      	b.n	80149bc <strncpy+0x1a>
 80149c6:	001d      	movs	r5, r3
 80149c8:	e7ed      	b.n	80149a6 <strncpy+0x4>
	...

080149cc <sulp>:
 80149cc:	b570      	push	{r4, r5, r6, lr}
 80149ce:	0016      	movs	r6, r2
 80149d0:	000d      	movs	r5, r1
 80149d2:	f002 fbe7 	bl	80171a4 <__ulp>
 80149d6:	2e00      	cmp	r6, #0
 80149d8:	d00d      	beq.n	80149f6 <sulp+0x2a>
 80149da:	236b      	movs	r3, #107	; 0x6b
 80149dc:	006a      	lsls	r2, r5, #1
 80149de:	0d52      	lsrs	r2, r2, #21
 80149e0:	1a9b      	subs	r3, r3, r2
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	dd07      	ble.n	80149f6 <sulp+0x2a>
 80149e6:	2400      	movs	r4, #0
 80149e8:	4a03      	ldr	r2, [pc, #12]	; (80149f8 <sulp+0x2c>)
 80149ea:	051b      	lsls	r3, r3, #20
 80149ec:	189d      	adds	r5, r3, r2
 80149ee:	002b      	movs	r3, r5
 80149f0:	0022      	movs	r2, r4
 80149f2:	f7ed fa45 	bl	8001e80 <__aeabi_dmul>
 80149f6:	bd70      	pop	{r4, r5, r6, pc}
 80149f8:	3ff00000 	.word	0x3ff00000

080149fc <_strtod_l>:
 80149fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149fe:	b0a7      	sub	sp, #156	; 0x9c
 8014a00:	9307      	str	r3, [sp, #28]
 8014a02:	2300      	movs	r3, #0
 8014a04:	9004      	str	r0, [sp, #16]
 8014a06:	9807      	ldr	r0, [sp, #28]
 8014a08:	9322      	str	r3, [sp, #136]	; 0x88
 8014a0a:	9106      	str	r1, [sp, #24]
 8014a0c:	921d      	str	r2, [sp, #116]	; 0x74
 8014a0e:	f002 f8dc 	bl	8016bca <__localeconv_l>
 8014a12:	0005      	movs	r5, r0
 8014a14:	6800      	ldr	r0, [r0, #0]
 8014a16:	f7eb fb7f 	bl	8000118 <strlen>
 8014a1a:	2600      	movs	r6, #0
 8014a1c:	2700      	movs	r7, #0
 8014a1e:	9b06      	ldr	r3, [sp, #24]
 8014a20:	9005      	str	r0, [sp, #20]
 8014a22:	9321      	str	r3, [sp, #132]	; 0x84
 8014a24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a26:	781a      	ldrb	r2, [r3, #0]
 8014a28:	2a0d      	cmp	r2, #13
 8014a2a:	d839      	bhi.n	8014aa0 <_strtod_l+0xa4>
 8014a2c:	2a09      	cmp	r2, #9
 8014a2e:	d23d      	bcs.n	8014aac <_strtod_l+0xb0>
 8014a30:	2a00      	cmp	r2, #0
 8014a32:	d044      	beq.n	8014abe <_strtod_l+0xc2>
 8014a34:	2300      	movs	r3, #0
 8014a36:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a38:	2200      	movs	r2, #0
 8014a3a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014a3c:	920c      	str	r2, [sp, #48]	; 0x30
 8014a3e:	7823      	ldrb	r3, [r4, #0]
 8014a40:	2b30      	cmp	r3, #48	; 0x30
 8014a42:	d000      	beq.n	8014a46 <_strtod_l+0x4a>
 8014a44:	e07e      	b.n	8014b44 <_strtod_l+0x148>
 8014a46:	7863      	ldrb	r3, [r4, #1]
 8014a48:	2b58      	cmp	r3, #88	; 0x58
 8014a4a:	d002      	beq.n	8014a52 <_strtod_l+0x56>
 8014a4c:	2b78      	cmp	r3, #120	; 0x78
 8014a4e:	d000      	beq.n	8014a52 <_strtod_l+0x56>
 8014a50:	e06e      	b.n	8014b30 <_strtod_l+0x134>
 8014a52:	9b07      	ldr	r3, [sp, #28]
 8014a54:	4a96      	ldr	r2, [pc, #600]	; (8014cb0 <_strtod_l+0x2b4>)
 8014a56:	9302      	str	r3, [sp, #8]
 8014a58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a5a:	a921      	add	r1, sp, #132	; 0x84
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	ab22      	add	r3, sp, #136	; 0x88
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	9804      	ldr	r0, [sp, #16]
 8014a64:	ab23      	add	r3, sp, #140	; 0x8c
 8014a66:	f001 fdc8 	bl	80165fa <__gethex>
 8014a6a:	2507      	movs	r5, #7
 8014a6c:	9005      	str	r0, [sp, #20]
 8014a6e:	4005      	ands	r5, r0
 8014a70:	d005      	beq.n	8014a7e <_strtod_l+0x82>
 8014a72:	2d06      	cmp	r5, #6
 8014a74:	d12f      	bne.n	8014ad6 <_strtod_l+0xda>
 8014a76:	2300      	movs	r3, #0
 8014a78:	3401      	adds	r4, #1
 8014a7a:	9421      	str	r4, [sp, #132]	; 0x84
 8014a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014a7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d002      	beq.n	8014a8a <_strtod_l+0x8e>
 8014a84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014a86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014a88:	601a      	str	r2, [r3, #0]
 8014a8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d01d      	beq.n	8014acc <_strtod_l+0xd0>
 8014a90:	2380      	movs	r3, #128	; 0x80
 8014a92:	0032      	movs	r2, r6
 8014a94:	061b      	lsls	r3, r3, #24
 8014a96:	18fb      	adds	r3, r7, r3
 8014a98:	0010      	movs	r0, r2
 8014a9a:	0019      	movs	r1, r3
 8014a9c:	b027      	add	sp, #156	; 0x9c
 8014a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aa0:	2a2b      	cmp	r2, #43	; 0x2b
 8014aa2:	d016      	beq.n	8014ad2 <_strtod_l+0xd6>
 8014aa4:	2a2d      	cmp	r2, #45	; 0x2d
 8014aa6:	d003      	beq.n	8014ab0 <_strtod_l+0xb4>
 8014aa8:	2a20      	cmp	r2, #32
 8014aaa:	d1c3      	bne.n	8014a34 <_strtod_l+0x38>
 8014aac:	3301      	adds	r3, #1
 8014aae:	e7b8      	b.n	8014a22 <_strtod_l+0x26>
 8014ab0:	2201      	movs	r2, #1
 8014ab2:	9213      	str	r2, [sp, #76]	; 0x4c
 8014ab4:	1c5a      	adds	r2, r3, #1
 8014ab6:	9221      	str	r2, [sp, #132]	; 0x84
 8014ab8:	785b      	ldrb	r3, [r3, #1]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d1bc      	bne.n	8014a38 <_strtod_l+0x3c>
 8014abe:	9b06      	ldr	r3, [sp, #24]
 8014ac0:	9321      	str	r3, [sp, #132]	; 0x84
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ac6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d1db      	bne.n	8014a84 <_strtod_l+0x88>
 8014acc:	0032      	movs	r2, r6
 8014ace:	003b      	movs	r3, r7
 8014ad0:	e7e2      	b.n	8014a98 <_strtod_l+0x9c>
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	e7ed      	b.n	8014ab2 <_strtod_l+0xb6>
 8014ad6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014ad8:	2a00      	cmp	r2, #0
 8014ada:	d007      	beq.n	8014aec <_strtod_l+0xf0>
 8014adc:	2135      	movs	r1, #53	; 0x35
 8014ade:	a824      	add	r0, sp, #144	; 0x90
 8014ae0:	f002 fc4d 	bl	801737e <__copybits>
 8014ae4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ae6:	9804      	ldr	r0, [sp, #16]
 8014ae8:	f002 f8c3 	bl	8016c72 <_Bfree>
 8014aec:	1e68      	subs	r0, r5, #1
 8014aee:	2804      	cmp	r0, #4
 8014af0:	d806      	bhi.n	8014b00 <_strtod_l+0x104>
 8014af2:	f7eb fb19 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014af6:	030c      	.short	0x030c
 8014af8:	1917      	.short	0x1917
 8014afa:	0c          	.byte	0x0c
 8014afb:	00          	.byte	0x00
 8014afc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014afe:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014b00:	9b05      	ldr	r3, [sp, #20]
 8014b02:	071b      	lsls	r3, r3, #28
 8014b04:	d5bb      	bpl.n	8014a7e <_strtod_l+0x82>
 8014b06:	2380      	movs	r3, #128	; 0x80
 8014b08:	061b      	lsls	r3, r3, #24
 8014b0a:	431f      	orrs	r7, r3
 8014b0c:	e7b7      	b.n	8014a7e <_strtod_l+0x82>
 8014b0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014b10:	4a68      	ldr	r2, [pc, #416]	; (8014cb4 <_strtod_l+0x2b8>)
 8014b12:	4969      	ldr	r1, [pc, #420]	; (8014cb8 <_strtod_l+0x2bc>)
 8014b14:	401a      	ands	r2, r3
 8014b16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b18:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014b1a:	185b      	adds	r3, r3, r1
 8014b1c:	051b      	lsls	r3, r3, #20
 8014b1e:	431a      	orrs	r2, r3
 8014b20:	0017      	movs	r7, r2
 8014b22:	e7ed      	b.n	8014b00 <_strtod_l+0x104>
 8014b24:	4f65      	ldr	r7, [pc, #404]	; (8014cbc <_strtod_l+0x2c0>)
 8014b26:	e7eb      	b.n	8014b00 <_strtod_l+0x104>
 8014b28:	2601      	movs	r6, #1
 8014b2a:	4f65      	ldr	r7, [pc, #404]	; (8014cc0 <_strtod_l+0x2c4>)
 8014b2c:	4276      	negs	r6, r6
 8014b2e:	e7e7      	b.n	8014b00 <_strtod_l+0x104>
 8014b30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b32:	1c5a      	adds	r2, r3, #1
 8014b34:	9221      	str	r2, [sp, #132]	; 0x84
 8014b36:	785b      	ldrb	r3, [r3, #1]
 8014b38:	2b30      	cmp	r3, #48	; 0x30
 8014b3a:	d0f9      	beq.n	8014b30 <_strtod_l+0x134>
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d09e      	beq.n	8014a7e <_strtod_l+0x82>
 8014b40:	2301      	movs	r3, #1
 8014b42:	930c      	str	r3, [sp, #48]	; 0x30
 8014b44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b46:	220a      	movs	r2, #10
 8014b48:	9312      	str	r3, [sp, #72]	; 0x48
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b4e:	9308      	str	r3, [sp, #32]
 8014b50:	930a      	str	r3, [sp, #40]	; 0x28
 8014b52:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014b54:	7804      	ldrb	r4, [r0, #0]
 8014b56:	0023      	movs	r3, r4
 8014b58:	3b30      	subs	r3, #48	; 0x30
 8014b5a:	b2d9      	uxtb	r1, r3
 8014b5c:	2909      	cmp	r1, #9
 8014b5e:	d934      	bls.n	8014bca <_strtod_l+0x1ce>
 8014b60:	9a05      	ldr	r2, [sp, #20]
 8014b62:	6829      	ldr	r1, [r5, #0]
 8014b64:	f7ff ff0c 	bl	8014980 <strncmp>
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d040      	beq.n	8014bee <_strtod_l+0x1f2>
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	0023      	movs	r3, r4
 8014b70:	4684      	mov	ip, r0
 8014b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b74:	9007      	str	r0, [sp, #28]
 8014b76:	9205      	str	r2, [sp, #20]
 8014b78:	2220      	movs	r2, #32
 8014b7a:	0019      	movs	r1, r3
 8014b7c:	4391      	bics	r1, r2
 8014b7e:	000a      	movs	r2, r1
 8014b80:	2100      	movs	r1, #0
 8014b82:	2a45      	cmp	r2, #69	; 0x45
 8014b84:	d000      	beq.n	8014b88 <_strtod_l+0x18c>
 8014b86:	e0bf      	b.n	8014d08 <_strtod_l+0x30c>
 8014b88:	9b05      	ldr	r3, [sp, #20]
 8014b8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b8c:	4303      	orrs	r3, r0
 8014b8e:	4313      	orrs	r3, r2
 8014b90:	428b      	cmp	r3, r1
 8014b92:	d094      	beq.n	8014abe <_strtod_l+0xc2>
 8014b94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b96:	9306      	str	r3, [sp, #24]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	9321      	str	r3, [sp, #132]	; 0x84
 8014b9c:	9b06      	ldr	r3, [sp, #24]
 8014b9e:	785b      	ldrb	r3, [r3, #1]
 8014ba0:	2b2b      	cmp	r3, #43	; 0x2b
 8014ba2:	d100      	bne.n	8014ba6 <_strtod_l+0x1aa>
 8014ba4:	e082      	b.n	8014cac <_strtod_l+0x2b0>
 8014ba6:	000c      	movs	r4, r1
 8014ba8:	2b2d      	cmp	r3, #45	; 0x2d
 8014baa:	d105      	bne.n	8014bb8 <_strtod_l+0x1bc>
 8014bac:	2401      	movs	r4, #1
 8014bae:	9b06      	ldr	r3, [sp, #24]
 8014bb0:	3302      	adds	r3, #2
 8014bb2:	9321      	str	r3, [sp, #132]	; 0x84
 8014bb4:	9b06      	ldr	r3, [sp, #24]
 8014bb6:	789b      	ldrb	r3, [r3, #2]
 8014bb8:	001a      	movs	r2, r3
 8014bba:	3a30      	subs	r2, #48	; 0x30
 8014bbc:	2a09      	cmp	r2, #9
 8014bbe:	d800      	bhi.n	8014bc2 <_strtod_l+0x1c6>
 8014bc0:	e084      	b.n	8014ccc <_strtod_l+0x2d0>
 8014bc2:	9a06      	ldr	r2, [sp, #24]
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	9221      	str	r2, [sp, #132]	; 0x84
 8014bc8:	e09e      	b.n	8014d08 <_strtod_l+0x30c>
 8014bca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014bcc:	2908      	cmp	r1, #8
 8014bce:	dc09      	bgt.n	8014be4 <_strtod_l+0x1e8>
 8014bd0:	9908      	ldr	r1, [sp, #32]
 8014bd2:	4351      	muls	r1, r2
 8014bd4:	18cb      	adds	r3, r1, r3
 8014bd6:	9308      	str	r3, [sp, #32]
 8014bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bda:	3001      	adds	r0, #1
 8014bdc:	3301      	adds	r3, #1
 8014bde:	930a      	str	r3, [sp, #40]	; 0x28
 8014be0:	9021      	str	r0, [sp, #132]	; 0x84
 8014be2:	e7b6      	b.n	8014b52 <_strtod_l+0x156>
 8014be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014be6:	4351      	muls	r1, r2
 8014be8:	18cb      	adds	r3, r1, r3
 8014bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bec:	e7f4      	b.n	8014bd8 <_strtod_l+0x1dc>
 8014bee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014bf0:	9b05      	ldr	r3, [sp, #20]
 8014bf2:	4694      	mov	ip, r2
 8014bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bf6:	4463      	add	r3, ip
 8014bf8:	9321      	str	r3, [sp, #132]	; 0x84
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	2a00      	cmp	r2, #0
 8014bfe:	d036      	beq.n	8014c6e <_strtod_l+0x272>
 8014c00:	4684      	mov	ip, r0
 8014c02:	9205      	str	r2, [sp, #20]
 8014c04:	001a      	movs	r2, r3
 8014c06:	3a30      	subs	r2, #48	; 0x30
 8014c08:	2a09      	cmp	r2, #9
 8014c0a:	d912      	bls.n	8014c32 <_strtod_l+0x236>
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	9207      	str	r2, [sp, #28]
 8014c10:	e7b2      	b.n	8014b78 <_strtod_l+0x17c>
 8014c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c14:	3001      	adds	r0, #1
 8014c16:	1c5a      	adds	r2, r3, #1
 8014c18:	9221      	str	r2, [sp, #132]	; 0x84
 8014c1a:	785b      	ldrb	r3, [r3, #1]
 8014c1c:	2b30      	cmp	r3, #48	; 0x30
 8014c1e:	d0f8      	beq.n	8014c12 <_strtod_l+0x216>
 8014c20:	001a      	movs	r2, r3
 8014c22:	3a31      	subs	r2, #49	; 0x31
 8014c24:	2a08      	cmp	r2, #8
 8014c26:	d83c      	bhi.n	8014ca2 <_strtod_l+0x2a6>
 8014c28:	4684      	mov	ip, r0
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c2e:	9005      	str	r0, [sp, #20]
 8014c30:	9212      	str	r2, [sp, #72]	; 0x48
 8014c32:	3b30      	subs	r3, #48	; 0x30
 8014c34:	1c42      	adds	r2, r0, #1
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d013      	beq.n	8014c62 <_strtod_l+0x266>
 8014c3a:	210a      	movs	r1, #10
 8014c3c:	4494      	add	ip, r2
 8014c3e:	9a05      	ldr	r2, [sp, #20]
 8014c40:	1885      	adds	r5, r0, r2
 8014c42:	42aa      	cmp	r2, r5
 8014c44:	d115      	bne.n	8014c72 <_strtod_l+0x276>
 8014c46:	9905      	ldr	r1, [sp, #20]
 8014c48:	9a05      	ldr	r2, [sp, #20]
 8014c4a:	3101      	adds	r1, #1
 8014c4c:	1809      	adds	r1, r1, r0
 8014c4e:	1812      	adds	r2, r2, r0
 8014c50:	9105      	str	r1, [sp, #20]
 8014c52:	2a08      	cmp	r2, #8
 8014c54:	dc1b      	bgt.n	8014c8e <_strtod_l+0x292>
 8014c56:	220a      	movs	r2, #10
 8014c58:	9908      	ldr	r1, [sp, #32]
 8014c5a:	434a      	muls	r2, r1
 8014c5c:	189b      	adds	r3, r3, r2
 8014c5e:	2200      	movs	r2, #0
 8014c60:	9308      	str	r3, [sp, #32]
 8014c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c64:	0010      	movs	r0, r2
 8014c66:	1c59      	adds	r1, r3, #1
 8014c68:	9121      	str	r1, [sp, #132]	; 0x84
 8014c6a:	785b      	ldrb	r3, [r3, #1]
 8014c6c:	e7ca      	b.n	8014c04 <_strtod_l+0x208>
 8014c6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014c70:	e7d4      	b.n	8014c1c <_strtod_l+0x220>
 8014c72:	1c54      	adds	r4, r2, #1
 8014c74:	2a08      	cmp	r2, #8
 8014c76:	dc04      	bgt.n	8014c82 <_strtod_l+0x286>
 8014c78:	9a08      	ldr	r2, [sp, #32]
 8014c7a:	434a      	muls	r2, r1
 8014c7c:	9208      	str	r2, [sp, #32]
 8014c7e:	0022      	movs	r2, r4
 8014c80:	e7df      	b.n	8014c42 <_strtod_l+0x246>
 8014c82:	2c10      	cmp	r4, #16
 8014c84:	dcfb      	bgt.n	8014c7e <_strtod_l+0x282>
 8014c86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014c88:	434a      	muls	r2, r1
 8014c8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c8c:	e7f7      	b.n	8014c7e <_strtod_l+0x282>
 8014c8e:	9905      	ldr	r1, [sp, #20]
 8014c90:	2200      	movs	r2, #0
 8014c92:	2910      	cmp	r1, #16
 8014c94:	dce5      	bgt.n	8014c62 <_strtod_l+0x266>
 8014c96:	210a      	movs	r1, #10
 8014c98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014c9a:	4341      	muls	r1, r0
 8014c9c:	185b      	adds	r3, r3, r1
 8014c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ca0:	e7df      	b.n	8014c62 <_strtod_l+0x266>
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	4694      	mov	ip, r2
 8014ca6:	9205      	str	r2, [sp, #20]
 8014ca8:	3201      	adds	r2, #1
 8014caa:	e7b0      	b.n	8014c0e <_strtod_l+0x212>
 8014cac:	000c      	movs	r4, r1
 8014cae:	e77e      	b.n	8014bae <_strtod_l+0x1b2>
 8014cb0:	0801aa54 	.word	0x0801aa54
 8014cb4:	ffefffff 	.word	0xffefffff
 8014cb8:	00000433 	.word	0x00000433
 8014cbc:	7ff00000 	.word	0x7ff00000
 8014cc0:	7fffffff 	.word	0x7fffffff
 8014cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cc6:	1c5a      	adds	r2, r3, #1
 8014cc8:	9221      	str	r2, [sp, #132]	; 0x84
 8014cca:	785b      	ldrb	r3, [r3, #1]
 8014ccc:	2b30      	cmp	r3, #48	; 0x30
 8014cce:	d0f9      	beq.n	8014cc4 <_strtod_l+0x2c8>
 8014cd0:	001a      	movs	r2, r3
 8014cd2:	3a31      	subs	r2, #49	; 0x31
 8014cd4:	2100      	movs	r1, #0
 8014cd6:	2a08      	cmp	r2, #8
 8014cd8:	d816      	bhi.n	8014d08 <_strtod_l+0x30c>
 8014cda:	3b30      	subs	r3, #48	; 0x30
 8014cdc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014cde:	930e      	str	r3, [sp, #56]	; 0x38
 8014ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ce2:	1c59      	adds	r1, r3, #1
 8014ce4:	9121      	str	r1, [sp, #132]	; 0x84
 8014ce6:	785b      	ldrb	r3, [r3, #1]
 8014ce8:	001a      	movs	r2, r3
 8014cea:	3a30      	subs	r2, #48	; 0x30
 8014cec:	2a09      	cmp	r2, #9
 8014cee:	d932      	bls.n	8014d56 <_strtod_l+0x35a>
 8014cf0:	1b4a      	subs	r2, r1, r5
 8014cf2:	4dad      	ldr	r5, [pc, #692]	; (8014fa8 <_strtod_l+0x5ac>)
 8014cf4:	0029      	movs	r1, r5
 8014cf6:	2a08      	cmp	r2, #8
 8014cf8:	dc03      	bgt.n	8014d02 <_strtod_l+0x306>
 8014cfa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014cfc:	42a9      	cmp	r1, r5
 8014cfe:	dd00      	ble.n	8014d02 <_strtod_l+0x306>
 8014d00:	0029      	movs	r1, r5
 8014d02:	2c00      	cmp	r4, #0
 8014d04:	d000      	beq.n	8014d08 <_strtod_l+0x30c>
 8014d06:	4249      	negs	r1, r1
 8014d08:	9a05      	ldr	r2, [sp, #20]
 8014d0a:	2a00      	cmp	r2, #0
 8014d0c:	d149      	bne.n	8014da2 <_strtod_l+0x3a6>
 8014d0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d10:	4310      	orrs	r0, r2
 8014d12:	d000      	beq.n	8014d16 <_strtod_l+0x31a>
 8014d14:	e6b3      	b.n	8014a7e <_strtod_l+0x82>
 8014d16:	9a07      	ldr	r2, [sp, #28]
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	d000      	beq.n	8014d1e <_strtod_l+0x322>
 8014d1c:	e6cf      	b.n	8014abe <_strtod_l+0xc2>
 8014d1e:	2b4e      	cmp	r3, #78	; 0x4e
 8014d20:	d025      	beq.n	8014d6e <_strtod_l+0x372>
 8014d22:	dc1f      	bgt.n	8014d64 <_strtod_l+0x368>
 8014d24:	2b49      	cmp	r3, #73	; 0x49
 8014d26:	d000      	beq.n	8014d2a <_strtod_l+0x32e>
 8014d28:	e6c9      	b.n	8014abe <_strtod_l+0xc2>
 8014d2a:	49a0      	ldr	r1, [pc, #640]	; (8014fac <_strtod_l+0x5b0>)
 8014d2c:	a821      	add	r0, sp, #132	; 0x84
 8014d2e:	f001 fea1 	bl	8016a74 <__match>
 8014d32:	2800      	cmp	r0, #0
 8014d34:	d100      	bne.n	8014d38 <_strtod_l+0x33c>
 8014d36:	e6c2      	b.n	8014abe <_strtod_l+0xc2>
 8014d38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d3a:	499d      	ldr	r1, [pc, #628]	; (8014fb0 <_strtod_l+0x5b4>)
 8014d3c:	3b01      	subs	r3, #1
 8014d3e:	a821      	add	r0, sp, #132	; 0x84
 8014d40:	9321      	str	r3, [sp, #132]	; 0x84
 8014d42:	f001 fe97 	bl	8016a74 <__match>
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d102      	bne.n	8014d50 <_strtod_l+0x354>
 8014d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d4c:	3301      	adds	r3, #1
 8014d4e:	9321      	str	r3, [sp, #132]	; 0x84
 8014d50:	4f98      	ldr	r7, [pc, #608]	; (8014fb4 <_strtod_l+0x5b8>)
 8014d52:	2600      	movs	r6, #0
 8014d54:	e693      	b.n	8014a7e <_strtod_l+0x82>
 8014d56:	220a      	movs	r2, #10
 8014d58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014d5a:	434a      	muls	r2, r1
 8014d5c:	18d2      	adds	r2, r2, r3
 8014d5e:	3a30      	subs	r2, #48	; 0x30
 8014d60:	920e      	str	r2, [sp, #56]	; 0x38
 8014d62:	e7bd      	b.n	8014ce0 <_strtod_l+0x2e4>
 8014d64:	2b69      	cmp	r3, #105	; 0x69
 8014d66:	d0e0      	beq.n	8014d2a <_strtod_l+0x32e>
 8014d68:	2b6e      	cmp	r3, #110	; 0x6e
 8014d6a:	d000      	beq.n	8014d6e <_strtod_l+0x372>
 8014d6c:	e6a7      	b.n	8014abe <_strtod_l+0xc2>
 8014d6e:	4992      	ldr	r1, [pc, #584]	; (8014fb8 <_strtod_l+0x5bc>)
 8014d70:	a821      	add	r0, sp, #132	; 0x84
 8014d72:	f001 fe7f 	bl	8016a74 <__match>
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d100      	bne.n	8014d7c <_strtod_l+0x380>
 8014d7a:	e6a0      	b.n	8014abe <_strtod_l+0xc2>
 8014d7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	2b28      	cmp	r3, #40	; 0x28
 8014d82:	d10c      	bne.n	8014d9e <_strtod_l+0x3a2>
 8014d84:	aa24      	add	r2, sp, #144	; 0x90
 8014d86:	498d      	ldr	r1, [pc, #564]	; (8014fbc <_strtod_l+0x5c0>)
 8014d88:	a821      	add	r0, sp, #132	; 0x84
 8014d8a:	f001 fe87 	bl	8016a9c <__hexnan>
 8014d8e:	2805      	cmp	r0, #5
 8014d90:	d105      	bne.n	8014d9e <_strtod_l+0x3a2>
 8014d92:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014d94:	4a87      	ldr	r2, [pc, #540]	; (8014fb4 <_strtod_l+0x5b8>)
 8014d96:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014d98:	431a      	orrs	r2, r3
 8014d9a:	0017      	movs	r7, r2
 8014d9c:	e66f      	b.n	8014a7e <_strtod_l+0x82>
 8014d9e:	4f88      	ldr	r7, [pc, #544]	; (8014fc0 <_strtod_l+0x5c4>)
 8014da0:	e7d7      	b.n	8014d52 <_strtod_l+0x356>
 8014da2:	4663      	mov	r3, ip
 8014da4:	1acb      	subs	r3, r1, r3
 8014da6:	9307      	str	r3, [sp, #28]
 8014da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d101      	bne.n	8014db2 <_strtod_l+0x3b6>
 8014dae:	9b05      	ldr	r3, [sp, #20]
 8014db0:	930a      	str	r3, [sp, #40]	; 0x28
 8014db2:	9c05      	ldr	r4, [sp, #20]
 8014db4:	2c10      	cmp	r4, #16
 8014db6:	dd00      	ble.n	8014dba <_strtod_l+0x3be>
 8014db8:	2410      	movs	r4, #16
 8014dba:	9808      	ldr	r0, [sp, #32]
 8014dbc:	f7ed fea6 	bl	8002b0c <__aeabi_ui2d>
 8014dc0:	9b05      	ldr	r3, [sp, #20]
 8014dc2:	0006      	movs	r6, r0
 8014dc4:	000f      	movs	r7, r1
 8014dc6:	2b09      	cmp	r3, #9
 8014dc8:	dc15      	bgt.n	8014df6 <_strtod_l+0x3fa>
 8014dca:	9b07      	ldr	r3, [sp, #28]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d100      	bne.n	8014dd2 <_strtod_l+0x3d6>
 8014dd0:	e655      	b.n	8014a7e <_strtod_l+0x82>
 8014dd2:	9b07      	ldr	r3, [sp, #28]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	dc00      	bgt.n	8014dda <_strtod_l+0x3de>
 8014dd8:	e07d      	b.n	8014ed6 <_strtod_l+0x4da>
 8014dda:	2b16      	cmp	r3, #22
 8014ddc:	dc62      	bgt.n	8014ea4 <_strtod_l+0x4a8>
 8014dde:	00dc      	lsls	r4, r3, #3
 8014de0:	4b78      	ldr	r3, [pc, #480]	; (8014fc4 <_strtod_l+0x5c8>)
 8014de2:	0032      	movs	r2, r6
 8014de4:	1919      	adds	r1, r3, r4
 8014de6:	003b      	movs	r3, r7
 8014de8:	6808      	ldr	r0, [r1, #0]
 8014dea:	6849      	ldr	r1, [r1, #4]
 8014dec:	f7ed f848 	bl	8001e80 <__aeabi_dmul>
 8014df0:	0006      	movs	r6, r0
 8014df2:	000f      	movs	r7, r1
 8014df4:	e643      	b.n	8014a7e <_strtod_l+0x82>
 8014df6:	0022      	movs	r2, r4
 8014df8:	4b72      	ldr	r3, [pc, #456]	; (8014fc4 <_strtod_l+0x5c8>)
 8014dfa:	3a09      	subs	r2, #9
 8014dfc:	00d2      	lsls	r2, r2, #3
 8014dfe:	189b      	adds	r3, r3, r2
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	f7ed f83c 	bl	8001e80 <__aeabi_dmul>
 8014e08:	0006      	movs	r6, r0
 8014e0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014e0c:	000f      	movs	r7, r1
 8014e0e:	f7ed fe7d 	bl	8002b0c <__aeabi_ui2d>
 8014e12:	000b      	movs	r3, r1
 8014e14:	0002      	movs	r2, r0
 8014e16:	0039      	movs	r1, r7
 8014e18:	0030      	movs	r0, r6
 8014e1a:	f7ec f90b 	bl	8001034 <__aeabi_dadd>
 8014e1e:	9b05      	ldr	r3, [sp, #20]
 8014e20:	0006      	movs	r6, r0
 8014e22:	000f      	movs	r7, r1
 8014e24:	2b0f      	cmp	r3, #15
 8014e26:	ddd0      	ble.n	8014dca <_strtod_l+0x3ce>
 8014e28:	9b05      	ldr	r3, [sp, #20]
 8014e2a:	1b1c      	subs	r4, r3, r4
 8014e2c:	9b07      	ldr	r3, [sp, #28]
 8014e2e:	18e4      	adds	r4, r4, r3
 8014e30:	2c00      	cmp	r4, #0
 8014e32:	dc00      	bgt.n	8014e36 <_strtod_l+0x43a>
 8014e34:	e094      	b.n	8014f60 <_strtod_l+0x564>
 8014e36:	230f      	movs	r3, #15
 8014e38:	4023      	ands	r3, r4
 8014e3a:	d00a      	beq.n	8014e52 <_strtod_l+0x456>
 8014e3c:	4961      	ldr	r1, [pc, #388]	; (8014fc4 <_strtod_l+0x5c8>)
 8014e3e:	00db      	lsls	r3, r3, #3
 8014e40:	18c9      	adds	r1, r1, r3
 8014e42:	0032      	movs	r2, r6
 8014e44:	6808      	ldr	r0, [r1, #0]
 8014e46:	6849      	ldr	r1, [r1, #4]
 8014e48:	003b      	movs	r3, r7
 8014e4a:	f7ed f819 	bl	8001e80 <__aeabi_dmul>
 8014e4e:	0006      	movs	r6, r0
 8014e50:	000f      	movs	r7, r1
 8014e52:	230f      	movs	r3, #15
 8014e54:	439c      	bics	r4, r3
 8014e56:	d06e      	beq.n	8014f36 <_strtod_l+0x53a>
 8014e58:	3326      	adds	r3, #38	; 0x26
 8014e5a:	33ff      	adds	r3, #255	; 0xff
 8014e5c:	429c      	cmp	r4, r3
 8014e5e:	dd48      	ble.n	8014ef2 <_strtod_l+0x4f6>
 8014e60:	2400      	movs	r4, #0
 8014e62:	9405      	str	r4, [sp, #20]
 8014e64:	940b      	str	r4, [sp, #44]	; 0x2c
 8014e66:	940a      	str	r4, [sp, #40]	; 0x28
 8014e68:	2322      	movs	r3, #34	; 0x22
 8014e6a:	2600      	movs	r6, #0
 8014e6c:	9a04      	ldr	r2, [sp, #16]
 8014e6e:	4f51      	ldr	r7, [pc, #324]	; (8014fb4 <_strtod_l+0x5b8>)
 8014e70:	6013      	str	r3, [r2, #0]
 8014e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e74:	42b3      	cmp	r3, r6
 8014e76:	d100      	bne.n	8014e7a <_strtod_l+0x47e>
 8014e78:	e601      	b.n	8014a7e <_strtod_l+0x82>
 8014e7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014e7c:	9804      	ldr	r0, [sp, #16]
 8014e7e:	f001 fef8 	bl	8016c72 <_Bfree>
 8014e82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e84:	9804      	ldr	r0, [sp, #16]
 8014e86:	f001 fef4 	bl	8016c72 <_Bfree>
 8014e8a:	9905      	ldr	r1, [sp, #20]
 8014e8c:	9804      	ldr	r0, [sp, #16]
 8014e8e:	f001 fef0 	bl	8016c72 <_Bfree>
 8014e92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e94:	9804      	ldr	r0, [sp, #16]
 8014e96:	f001 feec 	bl	8016c72 <_Bfree>
 8014e9a:	0021      	movs	r1, r4
 8014e9c:	9804      	ldr	r0, [sp, #16]
 8014e9e:	f001 fee8 	bl	8016c72 <_Bfree>
 8014ea2:	e5ec      	b.n	8014a7e <_strtod_l+0x82>
 8014ea4:	2325      	movs	r3, #37	; 0x25
 8014ea6:	9a05      	ldr	r2, [sp, #20]
 8014ea8:	1a9b      	subs	r3, r3, r2
 8014eaa:	9a07      	ldr	r2, [sp, #28]
 8014eac:	4293      	cmp	r3, r2
 8014eae:	dbbb      	blt.n	8014e28 <_strtod_l+0x42c>
 8014eb0:	230f      	movs	r3, #15
 8014eb2:	9a05      	ldr	r2, [sp, #20]
 8014eb4:	4c43      	ldr	r4, [pc, #268]	; (8014fc4 <_strtod_l+0x5c8>)
 8014eb6:	1a9d      	subs	r5, r3, r2
 8014eb8:	00e9      	lsls	r1, r5, #3
 8014eba:	1861      	adds	r1, r4, r1
 8014ebc:	0032      	movs	r2, r6
 8014ebe:	6808      	ldr	r0, [r1, #0]
 8014ec0:	6849      	ldr	r1, [r1, #4]
 8014ec2:	003b      	movs	r3, r7
 8014ec4:	f7ec ffdc 	bl	8001e80 <__aeabi_dmul>
 8014ec8:	9b07      	ldr	r3, [sp, #28]
 8014eca:	1b5e      	subs	r6, r3, r5
 8014ecc:	00f6      	lsls	r6, r6, #3
 8014ece:	19a6      	adds	r6, r4, r6
 8014ed0:	6832      	ldr	r2, [r6, #0]
 8014ed2:	6873      	ldr	r3, [r6, #4]
 8014ed4:	e78a      	b.n	8014dec <_strtod_l+0x3f0>
 8014ed6:	9b07      	ldr	r3, [sp, #28]
 8014ed8:	3316      	adds	r3, #22
 8014eda:	dba5      	blt.n	8014e28 <_strtod_l+0x42c>
 8014edc:	9b07      	ldr	r3, [sp, #28]
 8014ede:	0030      	movs	r0, r6
 8014ee0:	00da      	lsls	r2, r3, #3
 8014ee2:	4b38      	ldr	r3, [pc, #224]	; (8014fc4 <_strtod_l+0x5c8>)
 8014ee4:	0039      	movs	r1, r7
 8014ee6:	1a9b      	subs	r3, r3, r2
 8014ee8:	681a      	ldr	r2, [r3, #0]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	f7ec fbbe 	bl	800166c <__aeabi_ddiv>
 8014ef0:	e77e      	b.n	8014df0 <_strtod_l+0x3f4>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	0030      	movs	r0, r6
 8014ef6:	0039      	movs	r1, r7
 8014ef8:	001d      	movs	r5, r3
 8014efa:	1124      	asrs	r4, r4, #4
 8014efc:	2c01      	cmp	r4, #1
 8014efe:	dc1d      	bgt.n	8014f3c <_strtod_l+0x540>
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d001      	beq.n	8014f08 <_strtod_l+0x50c>
 8014f04:	0006      	movs	r6, r0
 8014f06:	000f      	movs	r7, r1
 8014f08:	4b2f      	ldr	r3, [pc, #188]	; (8014fc8 <_strtod_l+0x5cc>)
 8014f0a:	00ed      	lsls	r5, r5, #3
 8014f0c:	18ff      	adds	r7, r7, r3
 8014f0e:	4b2f      	ldr	r3, [pc, #188]	; (8014fcc <_strtod_l+0x5d0>)
 8014f10:	0032      	movs	r2, r6
 8014f12:	195d      	adds	r5, r3, r5
 8014f14:	6828      	ldr	r0, [r5, #0]
 8014f16:	6869      	ldr	r1, [r5, #4]
 8014f18:	003b      	movs	r3, r7
 8014f1a:	f7ec ffb1 	bl	8001e80 <__aeabi_dmul>
 8014f1e:	4b25      	ldr	r3, [pc, #148]	; (8014fb4 <_strtod_l+0x5b8>)
 8014f20:	4a2b      	ldr	r2, [pc, #172]	; (8014fd0 <_strtod_l+0x5d4>)
 8014f22:	0006      	movs	r6, r0
 8014f24:	400b      	ands	r3, r1
 8014f26:	4293      	cmp	r3, r2
 8014f28:	d89a      	bhi.n	8014e60 <_strtod_l+0x464>
 8014f2a:	4a2a      	ldr	r2, [pc, #168]	; (8014fd4 <_strtod_l+0x5d8>)
 8014f2c:	4293      	cmp	r3, r2
 8014f2e:	d913      	bls.n	8014f58 <_strtod_l+0x55c>
 8014f30:	2601      	movs	r6, #1
 8014f32:	4f29      	ldr	r7, [pc, #164]	; (8014fd8 <_strtod_l+0x5dc>)
 8014f34:	4276      	negs	r6, r6
 8014f36:	2300      	movs	r3, #0
 8014f38:	9306      	str	r3, [sp, #24]
 8014f3a:	e07b      	b.n	8015034 <_strtod_l+0x638>
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	4214      	tst	r4, r2
 8014f40:	d007      	beq.n	8014f52 <_strtod_l+0x556>
 8014f42:	4a22      	ldr	r2, [pc, #136]	; (8014fcc <_strtod_l+0x5d0>)
 8014f44:	00eb      	lsls	r3, r5, #3
 8014f46:	189b      	adds	r3, r3, r2
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	685b      	ldr	r3, [r3, #4]
 8014f4c:	f7ec ff98 	bl	8001e80 <__aeabi_dmul>
 8014f50:	2301      	movs	r3, #1
 8014f52:	3501      	adds	r5, #1
 8014f54:	1064      	asrs	r4, r4, #1
 8014f56:	e7d1      	b.n	8014efc <_strtod_l+0x500>
 8014f58:	23d4      	movs	r3, #212	; 0xd4
 8014f5a:	049b      	lsls	r3, r3, #18
 8014f5c:	18cf      	adds	r7, r1, r3
 8014f5e:	e7ea      	b.n	8014f36 <_strtod_l+0x53a>
 8014f60:	2c00      	cmp	r4, #0
 8014f62:	d0e8      	beq.n	8014f36 <_strtod_l+0x53a>
 8014f64:	230f      	movs	r3, #15
 8014f66:	4264      	negs	r4, r4
 8014f68:	4023      	ands	r3, r4
 8014f6a:	d00a      	beq.n	8014f82 <_strtod_l+0x586>
 8014f6c:	4a15      	ldr	r2, [pc, #84]	; (8014fc4 <_strtod_l+0x5c8>)
 8014f6e:	00db      	lsls	r3, r3, #3
 8014f70:	18d3      	adds	r3, r2, r3
 8014f72:	0030      	movs	r0, r6
 8014f74:	681a      	ldr	r2, [r3, #0]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	0039      	movs	r1, r7
 8014f7a:	f7ec fb77 	bl	800166c <__aeabi_ddiv>
 8014f7e:	0006      	movs	r6, r0
 8014f80:	000f      	movs	r7, r1
 8014f82:	1124      	asrs	r4, r4, #4
 8014f84:	d0d7      	beq.n	8014f36 <_strtod_l+0x53a>
 8014f86:	2c1f      	cmp	r4, #31
 8014f88:	dd28      	ble.n	8014fdc <_strtod_l+0x5e0>
 8014f8a:	2400      	movs	r4, #0
 8014f8c:	9405      	str	r4, [sp, #20]
 8014f8e:	940b      	str	r4, [sp, #44]	; 0x2c
 8014f90:	940a      	str	r4, [sp, #40]	; 0x28
 8014f92:	2322      	movs	r3, #34	; 0x22
 8014f94:	9a04      	ldr	r2, [sp, #16]
 8014f96:	2600      	movs	r6, #0
 8014f98:	6013      	str	r3, [r2, #0]
 8014f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f9c:	2700      	movs	r7, #0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d000      	beq.n	8014fa4 <_strtod_l+0x5a8>
 8014fa2:	e76a      	b.n	8014e7a <_strtod_l+0x47e>
 8014fa4:	e56b      	b.n	8014a7e <_strtod_l+0x82>
 8014fa6:	46c0      	nop			; (mov r8, r8)
 8014fa8:	00004e1f 	.word	0x00004e1f
 8014fac:	0801aa1f 	.word	0x0801aa1f
 8014fb0:	0801abac 	.word	0x0801abac
 8014fb4:	7ff00000 	.word	0x7ff00000
 8014fb8:	0801aa27 	.word	0x0801aa27
 8014fbc:	0801aa68 	.word	0x0801aa68
 8014fc0:	fff80000 	.word	0xfff80000
 8014fc4:	0801abe0 	.word	0x0801abe0
 8014fc8:	fcb00000 	.word	0xfcb00000
 8014fcc:	0801abb8 	.word	0x0801abb8
 8014fd0:	7ca00000 	.word	0x7ca00000
 8014fd4:	7c900000 	.word	0x7c900000
 8014fd8:	7fefffff 	.word	0x7fefffff
 8014fdc:	2310      	movs	r3, #16
 8014fde:	4023      	ands	r3, r4
 8014fe0:	9306      	str	r3, [sp, #24]
 8014fe2:	d001      	beq.n	8014fe8 <_strtod_l+0x5ec>
 8014fe4:	236a      	movs	r3, #106	; 0x6a
 8014fe6:	9306      	str	r3, [sp, #24]
 8014fe8:	2300      	movs	r3, #0
 8014fea:	0030      	movs	r0, r6
 8014fec:	0039      	movs	r1, r7
 8014fee:	001d      	movs	r5, r3
 8014ff0:	2c00      	cmp	r4, #0
 8014ff2:	dd00      	ble.n	8014ff6 <_strtod_l+0x5fa>
 8014ff4:	e10e      	b.n	8015214 <_strtod_l+0x818>
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d001      	beq.n	8014ffe <_strtod_l+0x602>
 8014ffa:	0006      	movs	r6, r0
 8014ffc:	000f      	movs	r7, r1
 8014ffe:	9b06      	ldr	r3, [sp, #24]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d00f      	beq.n	8015024 <_strtod_l+0x628>
 8015004:	236b      	movs	r3, #107	; 0x6b
 8015006:	0079      	lsls	r1, r7, #1
 8015008:	0d49      	lsrs	r1, r1, #21
 801500a:	003a      	movs	r2, r7
 801500c:	1a5b      	subs	r3, r3, r1
 801500e:	2b00      	cmp	r3, #0
 8015010:	dd08      	ble.n	8015024 <_strtod_l+0x628>
 8015012:	2b1f      	cmp	r3, #31
 8015014:	dc00      	bgt.n	8015018 <_strtod_l+0x61c>
 8015016:	e112      	b.n	801523e <_strtod_l+0x842>
 8015018:	2600      	movs	r6, #0
 801501a:	2b34      	cmp	r3, #52	; 0x34
 801501c:	dc00      	bgt.n	8015020 <_strtod_l+0x624>
 801501e:	e107      	b.n	8015230 <_strtod_l+0x834>
 8015020:	27dc      	movs	r7, #220	; 0xdc
 8015022:	04bf      	lsls	r7, r7, #18
 8015024:	2200      	movs	r2, #0
 8015026:	2300      	movs	r3, #0
 8015028:	0030      	movs	r0, r6
 801502a:	0039      	movs	r1, r7
 801502c:	f7eb fa0c 	bl	8000448 <__aeabi_dcmpeq>
 8015030:	2800      	cmp	r0, #0
 8015032:	d1aa      	bne.n	8014f8a <_strtod_l+0x58e>
 8015034:	9b08      	ldr	r3, [sp, #32]
 8015036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015038:	9300      	str	r3, [sp, #0]
 801503a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801503c:	9b05      	ldr	r3, [sp, #20]
 801503e:	9804      	ldr	r0, [sp, #16]
 8015040:	f001 fe6e 	bl	8016d20 <__s2b>
 8015044:	900b      	str	r0, [sp, #44]	; 0x2c
 8015046:	2800      	cmp	r0, #0
 8015048:	d100      	bne.n	801504c <_strtod_l+0x650>
 801504a:	e709      	b.n	8014e60 <_strtod_l+0x464>
 801504c:	9b07      	ldr	r3, [sp, #28]
 801504e:	9a07      	ldr	r2, [sp, #28]
 8015050:	17db      	asrs	r3, r3, #31
 8015052:	4252      	negs	r2, r2
 8015054:	4013      	ands	r3, r2
 8015056:	9315      	str	r3, [sp, #84]	; 0x54
 8015058:	9b07      	ldr	r3, [sp, #28]
 801505a:	2400      	movs	r4, #0
 801505c:	43db      	mvns	r3, r3
 801505e:	9a07      	ldr	r2, [sp, #28]
 8015060:	17db      	asrs	r3, r3, #31
 8015062:	401a      	ands	r2, r3
 8015064:	921c      	str	r2, [sp, #112]	; 0x70
 8015066:	9405      	str	r4, [sp, #20]
 8015068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801506a:	9804      	ldr	r0, [sp, #16]
 801506c:	6859      	ldr	r1, [r3, #4]
 801506e:	f001 fdc8 	bl	8016c02 <_Balloc>
 8015072:	900a      	str	r0, [sp, #40]	; 0x28
 8015074:	2800      	cmp	r0, #0
 8015076:	d100      	bne.n	801507a <_strtod_l+0x67e>
 8015078:	e6f6      	b.n	8014e68 <_strtod_l+0x46c>
 801507a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801507c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801507e:	691b      	ldr	r3, [r3, #16]
 8015080:	310c      	adds	r1, #12
 8015082:	1c9a      	adds	r2, r3, #2
 8015084:	0092      	lsls	r2, r2, #2
 8015086:	300c      	adds	r0, #12
 8015088:	9308      	str	r3, [sp, #32]
 801508a:	f7fe fcce 	bl	8013a2a <memcpy>
 801508e:	ab24      	add	r3, sp, #144	; 0x90
 8015090:	9301      	str	r3, [sp, #4]
 8015092:	ab23      	add	r3, sp, #140	; 0x8c
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	0032      	movs	r2, r6
 8015098:	003b      	movs	r3, r7
 801509a:	9804      	ldr	r0, [sp, #16]
 801509c:	960e      	str	r6, [sp, #56]	; 0x38
 801509e:	970f      	str	r7, [sp, #60]	; 0x3c
 80150a0:	f002 f8f2 	bl	8017288 <__d2b>
 80150a4:	9022      	str	r0, [sp, #136]	; 0x88
 80150a6:	2800      	cmp	r0, #0
 80150a8:	d100      	bne.n	80150ac <_strtod_l+0x6b0>
 80150aa:	e6dd      	b.n	8014e68 <_strtod_l+0x46c>
 80150ac:	2101      	movs	r1, #1
 80150ae:	9804      	ldr	r0, [sp, #16]
 80150b0:	f001 febd 	bl	8016e2e <__i2b>
 80150b4:	9005      	str	r0, [sp, #20]
 80150b6:	2800      	cmp	r0, #0
 80150b8:	d100      	bne.n	80150bc <_strtod_l+0x6c0>
 80150ba:	e6d5      	b.n	8014e68 <_strtod_l+0x46c>
 80150bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80150be:	2b00      	cmp	r3, #0
 80150c0:	da00      	bge.n	80150c4 <_strtod_l+0x6c8>
 80150c2:	e0c1      	b.n	8015248 <_strtod_l+0x84c>
 80150c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80150c6:	189d      	adds	r5, r3, r2
 80150c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80150ca:	4694      	mov	ip, r2
 80150cc:	9906      	ldr	r1, [sp, #24]
 80150ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80150d0:	1a5b      	subs	r3, r3, r1
 80150d2:	2136      	movs	r1, #54	; 0x36
 80150d4:	189b      	adds	r3, r3, r2
 80150d6:	1a8a      	subs	r2, r1, r2
 80150d8:	49b2      	ldr	r1, [pc, #712]	; (80153a4 <_strtod_l+0x9a8>)
 80150da:	3b01      	subs	r3, #1
 80150dc:	2001      	movs	r0, #1
 80150de:	428b      	cmp	r3, r1
 80150e0:	db00      	blt.n	80150e4 <_strtod_l+0x6e8>
 80150e2:	e0bd      	b.n	8015260 <_strtod_l+0x864>
 80150e4:	1ac9      	subs	r1, r1, r3
 80150e6:	1a52      	subs	r2, r2, r1
 80150e8:	291f      	cmp	r1, #31
 80150ea:	dd00      	ble.n	80150ee <_strtod_l+0x6f2>
 80150ec:	e0b1      	b.n	8015252 <_strtod_l+0x856>
 80150ee:	4088      	lsls	r0, r1
 80150f0:	2300      	movs	r3, #0
 80150f2:	9014      	str	r0, [sp, #80]	; 0x50
 80150f4:	9310      	str	r3, [sp, #64]	; 0x40
 80150f6:	18ab      	adds	r3, r5, r2
 80150f8:	9308      	str	r3, [sp, #32]
 80150fa:	0013      	movs	r3, r2
 80150fc:	9a06      	ldr	r2, [sp, #24]
 80150fe:	4463      	add	r3, ip
 8015100:	18d3      	adds	r3, r2, r3
 8015102:	9a08      	ldr	r2, [sp, #32]
 8015104:	930c      	str	r3, [sp, #48]	; 0x30
 8015106:	002b      	movs	r3, r5
 8015108:	4295      	cmp	r5, r2
 801510a:	dd00      	ble.n	801510e <_strtod_l+0x712>
 801510c:	0013      	movs	r3, r2
 801510e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015110:	4293      	cmp	r3, r2
 8015112:	dd00      	ble.n	8015116 <_strtod_l+0x71a>
 8015114:	0013      	movs	r3, r2
 8015116:	2b00      	cmp	r3, #0
 8015118:	dd06      	ble.n	8015128 <_strtod_l+0x72c>
 801511a:	9a08      	ldr	r2, [sp, #32]
 801511c:	1aed      	subs	r5, r5, r3
 801511e:	1ad2      	subs	r2, r2, r3
 8015120:	9208      	str	r2, [sp, #32]
 8015122:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015124:	1ad2      	subs	r2, r2, r3
 8015126:	920c      	str	r2, [sp, #48]	; 0x30
 8015128:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801512a:	2b00      	cmp	r3, #0
 801512c:	d017      	beq.n	801515e <_strtod_l+0x762>
 801512e:	001a      	movs	r2, r3
 8015130:	9905      	ldr	r1, [sp, #20]
 8015132:	9804      	ldr	r0, [sp, #16]
 8015134:	f001 ff14 	bl	8016f60 <__pow5mult>
 8015138:	9005      	str	r0, [sp, #20]
 801513a:	2800      	cmp	r0, #0
 801513c:	d100      	bne.n	8015140 <_strtod_l+0x744>
 801513e:	e693      	b.n	8014e68 <_strtod_l+0x46c>
 8015140:	0001      	movs	r1, r0
 8015142:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015144:	9804      	ldr	r0, [sp, #16]
 8015146:	f001 fe7b 	bl	8016e40 <__multiply>
 801514a:	9012      	str	r0, [sp, #72]	; 0x48
 801514c:	2800      	cmp	r0, #0
 801514e:	d100      	bne.n	8015152 <_strtod_l+0x756>
 8015150:	e68a      	b.n	8014e68 <_strtod_l+0x46c>
 8015152:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015154:	9804      	ldr	r0, [sp, #16]
 8015156:	f001 fd8c 	bl	8016c72 <_Bfree>
 801515a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801515c:	9322      	str	r3, [sp, #136]	; 0x88
 801515e:	9b08      	ldr	r3, [sp, #32]
 8015160:	2b00      	cmp	r3, #0
 8015162:	dd00      	ble.n	8015166 <_strtod_l+0x76a>
 8015164:	e07f      	b.n	8015266 <_strtod_l+0x86a>
 8015166:	9b07      	ldr	r3, [sp, #28]
 8015168:	2b00      	cmp	r3, #0
 801516a:	dd08      	ble.n	801517e <_strtod_l+0x782>
 801516c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801516e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015170:	9804      	ldr	r0, [sp, #16]
 8015172:	f001 fef5 	bl	8016f60 <__pow5mult>
 8015176:	900a      	str	r0, [sp, #40]	; 0x28
 8015178:	2800      	cmp	r0, #0
 801517a:	d100      	bne.n	801517e <_strtod_l+0x782>
 801517c:	e674      	b.n	8014e68 <_strtod_l+0x46c>
 801517e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015180:	2b00      	cmp	r3, #0
 8015182:	dd08      	ble.n	8015196 <_strtod_l+0x79a>
 8015184:	001a      	movs	r2, r3
 8015186:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015188:	9804      	ldr	r0, [sp, #16]
 801518a:	f001 ff3b 	bl	8017004 <__lshift>
 801518e:	900a      	str	r0, [sp, #40]	; 0x28
 8015190:	2800      	cmp	r0, #0
 8015192:	d100      	bne.n	8015196 <_strtod_l+0x79a>
 8015194:	e668      	b.n	8014e68 <_strtod_l+0x46c>
 8015196:	2d00      	cmp	r5, #0
 8015198:	dd08      	ble.n	80151ac <_strtod_l+0x7b0>
 801519a:	002a      	movs	r2, r5
 801519c:	9905      	ldr	r1, [sp, #20]
 801519e:	9804      	ldr	r0, [sp, #16]
 80151a0:	f001 ff30 	bl	8017004 <__lshift>
 80151a4:	9005      	str	r0, [sp, #20]
 80151a6:	2800      	cmp	r0, #0
 80151a8:	d100      	bne.n	80151ac <_strtod_l+0x7b0>
 80151aa:	e65d      	b.n	8014e68 <_strtod_l+0x46c>
 80151ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 80151b0:	9804      	ldr	r0, [sp, #16]
 80151b2:	f001 ff93 	bl	80170dc <__mdiff>
 80151b6:	1e04      	subs	r4, r0, #0
 80151b8:	d100      	bne.n	80151bc <_strtod_l+0x7c0>
 80151ba:	e655      	b.n	8014e68 <_strtod_l+0x46c>
 80151bc:	2500      	movs	r5, #0
 80151be:	68c3      	ldr	r3, [r0, #12]
 80151c0:	9905      	ldr	r1, [sp, #20]
 80151c2:	60c5      	str	r5, [r0, #12]
 80151c4:	9312      	str	r3, [sp, #72]	; 0x48
 80151c6:	f001 ff6f 	bl	80170a8 <__mcmp>
 80151ca:	42a8      	cmp	r0, r5
 80151cc:	da55      	bge.n	801527a <_strtod_l+0x87e>
 80151ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151d0:	42ab      	cmp	r3, r5
 80151d2:	d11b      	bne.n	801520c <_strtod_l+0x810>
 80151d4:	42ae      	cmp	r6, r5
 80151d6:	d119      	bne.n	801520c <_strtod_l+0x810>
 80151d8:	033b      	lsls	r3, r7, #12
 80151da:	42ab      	cmp	r3, r5
 80151dc:	d116      	bne.n	801520c <_strtod_l+0x810>
 80151de:	22d6      	movs	r2, #214	; 0xd6
 80151e0:	4b71      	ldr	r3, [pc, #452]	; (80153a8 <_strtod_l+0x9ac>)
 80151e2:	04d2      	lsls	r2, r2, #19
 80151e4:	403b      	ands	r3, r7
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d910      	bls.n	801520c <_strtod_l+0x810>
 80151ea:	6963      	ldr	r3, [r4, #20]
 80151ec:	42ab      	cmp	r3, r5
 80151ee:	d102      	bne.n	80151f6 <_strtod_l+0x7fa>
 80151f0:	6923      	ldr	r3, [r4, #16]
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	dd0a      	ble.n	801520c <_strtod_l+0x810>
 80151f6:	0021      	movs	r1, r4
 80151f8:	2201      	movs	r2, #1
 80151fa:	9804      	ldr	r0, [sp, #16]
 80151fc:	f001 ff02 	bl	8017004 <__lshift>
 8015200:	9905      	ldr	r1, [sp, #20]
 8015202:	0004      	movs	r4, r0
 8015204:	f001 ff50 	bl	80170a8 <__mcmp>
 8015208:	2800      	cmp	r0, #0
 801520a:	dc6b      	bgt.n	80152e4 <_strtod_l+0x8e8>
 801520c:	9b06      	ldr	r3, [sp, #24]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d178      	bne.n	8015304 <_strtod_l+0x908>
 8015212:	e632      	b.n	8014e7a <_strtod_l+0x47e>
 8015214:	2201      	movs	r2, #1
 8015216:	4214      	tst	r4, r2
 8015218:	d007      	beq.n	801522a <_strtod_l+0x82e>
 801521a:	4a64      	ldr	r2, [pc, #400]	; (80153ac <_strtod_l+0x9b0>)
 801521c:	00eb      	lsls	r3, r5, #3
 801521e:	18d3      	adds	r3, r2, r3
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	f7ec fe2c 	bl	8001e80 <__aeabi_dmul>
 8015228:	2301      	movs	r3, #1
 801522a:	3501      	adds	r5, #1
 801522c:	1064      	asrs	r4, r4, #1
 801522e:	e6df      	b.n	8014ff0 <_strtod_l+0x5f4>
 8015230:	2101      	movs	r1, #1
 8015232:	3b20      	subs	r3, #32
 8015234:	4249      	negs	r1, r1
 8015236:	4099      	lsls	r1, r3
 8015238:	400a      	ands	r2, r1
 801523a:	0017      	movs	r7, r2
 801523c:	e6f2      	b.n	8015024 <_strtod_l+0x628>
 801523e:	2201      	movs	r2, #1
 8015240:	4252      	negs	r2, r2
 8015242:	409a      	lsls	r2, r3
 8015244:	4016      	ands	r6, r2
 8015246:	e6ed      	b.n	8015024 <_strtod_l+0x628>
 8015248:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801524a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801524c:	1ad2      	subs	r2, r2, r3
 801524e:	4694      	mov	ip, r2
 8015250:	e73c      	b.n	80150cc <_strtod_l+0x6d0>
 8015252:	4957      	ldr	r1, [pc, #348]	; (80153b0 <_strtod_l+0x9b4>)
 8015254:	1acb      	subs	r3, r1, r3
 8015256:	0001      	movs	r1, r0
 8015258:	4099      	lsls	r1, r3
 801525a:	9110      	str	r1, [sp, #64]	; 0x40
 801525c:	9014      	str	r0, [sp, #80]	; 0x50
 801525e:	e74a      	b.n	80150f6 <_strtod_l+0x6fa>
 8015260:	2300      	movs	r3, #0
 8015262:	9310      	str	r3, [sp, #64]	; 0x40
 8015264:	e7fa      	b.n	801525c <_strtod_l+0x860>
 8015266:	9a08      	ldr	r2, [sp, #32]
 8015268:	9922      	ldr	r1, [sp, #136]	; 0x88
 801526a:	9804      	ldr	r0, [sp, #16]
 801526c:	f001 feca 	bl	8017004 <__lshift>
 8015270:	9022      	str	r0, [sp, #136]	; 0x88
 8015272:	2800      	cmp	r0, #0
 8015274:	d000      	beq.n	8015278 <_strtod_l+0x87c>
 8015276:	e776      	b.n	8015166 <_strtod_l+0x76a>
 8015278:	e5f6      	b.n	8014e68 <_strtod_l+0x46c>
 801527a:	970c      	str	r7, [sp, #48]	; 0x30
 801527c:	2800      	cmp	r0, #0
 801527e:	d000      	beq.n	8015282 <_strtod_l+0x886>
 8015280:	e0a0      	b.n	80153c4 <_strtod_l+0x9c8>
 8015282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015284:	033b      	lsls	r3, r7, #12
 8015286:	0b1b      	lsrs	r3, r3, #12
 8015288:	2a00      	cmp	r2, #0
 801528a:	d027      	beq.n	80152dc <_strtod_l+0x8e0>
 801528c:	4a49      	ldr	r2, [pc, #292]	; (80153b4 <_strtod_l+0x9b8>)
 801528e:	4293      	cmp	r3, r2
 8015290:	d157      	bne.n	8015342 <_strtod_l+0x946>
 8015292:	2201      	movs	r2, #1
 8015294:	9b06      	ldr	r3, [sp, #24]
 8015296:	4252      	negs	r2, r2
 8015298:	0031      	movs	r1, r6
 801529a:	0010      	movs	r0, r2
 801529c:	2b00      	cmp	r3, #0
 801529e:	d00b      	beq.n	80152b8 <_strtod_l+0x8bc>
 80152a0:	25d4      	movs	r5, #212	; 0xd4
 80152a2:	4b41      	ldr	r3, [pc, #260]	; (80153a8 <_strtod_l+0x9ac>)
 80152a4:	04ed      	lsls	r5, r5, #19
 80152a6:	403b      	ands	r3, r7
 80152a8:	0010      	movs	r0, r2
 80152aa:	42ab      	cmp	r3, r5
 80152ac:	d804      	bhi.n	80152b8 <_strtod_l+0x8bc>
 80152ae:	306c      	adds	r0, #108	; 0x6c
 80152b0:	0d1b      	lsrs	r3, r3, #20
 80152b2:	1ac3      	subs	r3, r0, r3
 80152b4:	409a      	lsls	r2, r3
 80152b6:	0010      	movs	r0, r2
 80152b8:	4281      	cmp	r1, r0
 80152ba:	d142      	bne.n	8015342 <_strtod_l+0x946>
 80152bc:	4b3e      	ldr	r3, [pc, #248]	; (80153b8 <_strtod_l+0x9bc>)
 80152be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d102      	bne.n	80152ca <_strtod_l+0x8ce>
 80152c4:	1c4b      	adds	r3, r1, #1
 80152c6:	d100      	bne.n	80152ca <_strtod_l+0x8ce>
 80152c8:	e5ce      	b.n	8014e68 <_strtod_l+0x46c>
 80152ca:	4b37      	ldr	r3, [pc, #220]	; (80153a8 <_strtod_l+0x9ac>)
 80152cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152ce:	2600      	movs	r6, #0
 80152d0:	401a      	ands	r2, r3
 80152d2:	0013      	movs	r3, r2
 80152d4:	2280      	movs	r2, #128	; 0x80
 80152d6:	0352      	lsls	r2, r2, #13
 80152d8:	189f      	adds	r7, r3, r2
 80152da:	e797      	b.n	801520c <_strtod_l+0x810>
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d130      	bne.n	8015342 <_strtod_l+0x946>
 80152e0:	2e00      	cmp	r6, #0
 80152e2:	d12e      	bne.n	8015342 <_strtod_l+0x946>
 80152e4:	9906      	ldr	r1, [sp, #24]
 80152e6:	003b      	movs	r3, r7
 80152e8:	4a2f      	ldr	r2, [pc, #188]	; (80153a8 <_strtod_l+0x9ac>)
 80152ea:	2900      	cmp	r1, #0
 80152ec:	d020      	beq.n	8015330 <_strtod_l+0x934>
 80152ee:	0011      	movs	r1, r2
 80152f0:	20d6      	movs	r0, #214	; 0xd6
 80152f2:	4039      	ands	r1, r7
 80152f4:	04c0      	lsls	r0, r0, #19
 80152f6:	4281      	cmp	r1, r0
 80152f8:	dc1a      	bgt.n	8015330 <_strtod_l+0x934>
 80152fa:	23dc      	movs	r3, #220	; 0xdc
 80152fc:	049b      	lsls	r3, r3, #18
 80152fe:	4299      	cmp	r1, r3
 8015300:	dc00      	bgt.n	8015304 <_strtod_l+0x908>
 8015302:	e646      	b.n	8014f92 <_strtod_l+0x596>
 8015304:	4b2d      	ldr	r3, [pc, #180]	; (80153bc <_strtod_l+0x9c0>)
 8015306:	0030      	movs	r0, r6
 8015308:	931b      	str	r3, [sp, #108]	; 0x6c
 801530a:	2300      	movs	r3, #0
 801530c:	931a      	str	r3, [sp, #104]	; 0x68
 801530e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015310:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015312:	0039      	movs	r1, r7
 8015314:	f7ec fdb4 	bl	8001e80 <__aeabi_dmul>
 8015318:	0006      	movs	r6, r0
 801531a:	000f      	movs	r7, r1
 801531c:	1e0b      	subs	r3, r1, #0
 801531e:	d000      	beq.n	8015322 <_strtod_l+0x926>
 8015320:	e5ab      	b.n	8014e7a <_strtod_l+0x47e>
 8015322:	2800      	cmp	r0, #0
 8015324:	d000      	beq.n	8015328 <_strtod_l+0x92c>
 8015326:	e5a8      	b.n	8014e7a <_strtod_l+0x47e>
 8015328:	9a04      	ldr	r2, [sp, #16]
 801532a:	3322      	adds	r3, #34	; 0x22
 801532c:	6013      	str	r3, [r2, #0]
 801532e:	e5a4      	b.n	8014e7a <_strtod_l+0x47e>
 8015330:	2601      	movs	r6, #1
 8015332:	4013      	ands	r3, r2
 8015334:	4a22      	ldr	r2, [pc, #136]	; (80153c0 <_strtod_l+0x9c4>)
 8015336:	4276      	negs	r6, r6
 8015338:	189b      	adds	r3, r3, r2
 801533a:	4a1e      	ldr	r2, [pc, #120]	; (80153b4 <_strtod_l+0x9b8>)
 801533c:	431a      	orrs	r2, r3
 801533e:	0017      	movs	r7, r2
 8015340:	e764      	b.n	801520c <_strtod_l+0x810>
 8015342:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015344:	2b00      	cmp	r3, #0
 8015346:	d015      	beq.n	8015374 <_strtod_l+0x978>
 8015348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801534a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801534c:	4213      	tst	r3, r2
 801534e:	d100      	bne.n	8015352 <_strtod_l+0x956>
 8015350:	e75c      	b.n	801520c <_strtod_l+0x810>
 8015352:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015354:	9a06      	ldr	r2, [sp, #24]
 8015356:	0030      	movs	r0, r6
 8015358:	0039      	movs	r1, r7
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00f      	beq.n	801537e <_strtod_l+0x982>
 801535e:	f7ff fb35 	bl	80149cc <sulp>
 8015362:	0002      	movs	r2, r0
 8015364:	000b      	movs	r3, r1
 8015366:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801536a:	f7eb fe63 	bl	8001034 <__aeabi_dadd>
 801536e:	0006      	movs	r6, r0
 8015370:	000f      	movs	r7, r1
 8015372:	e74b      	b.n	801520c <_strtod_l+0x810>
 8015374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015376:	4233      	tst	r3, r6
 8015378:	d100      	bne.n	801537c <_strtod_l+0x980>
 801537a:	e747      	b.n	801520c <_strtod_l+0x810>
 801537c:	e7e9      	b.n	8015352 <_strtod_l+0x956>
 801537e:	f7ff fb25 	bl	80149cc <sulp>
 8015382:	0002      	movs	r2, r0
 8015384:	000b      	movs	r3, r1
 8015386:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015388:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801538a:	f7ec ffeb 	bl	8002364 <__aeabi_dsub>
 801538e:	2200      	movs	r2, #0
 8015390:	2300      	movs	r3, #0
 8015392:	0006      	movs	r6, r0
 8015394:	000f      	movs	r7, r1
 8015396:	f7eb f857 	bl	8000448 <__aeabi_dcmpeq>
 801539a:	2800      	cmp	r0, #0
 801539c:	d000      	beq.n	80153a0 <_strtod_l+0x9a4>
 801539e:	e5f8      	b.n	8014f92 <_strtod_l+0x596>
 80153a0:	e734      	b.n	801520c <_strtod_l+0x810>
 80153a2:	46c0      	nop			; (mov r8, r8)
 80153a4:	fffffc02 	.word	0xfffffc02
 80153a8:	7ff00000 	.word	0x7ff00000
 80153ac:	0801aa80 	.word	0x0801aa80
 80153b0:	fffffbe2 	.word	0xfffffbe2
 80153b4:	000fffff 	.word	0x000fffff
 80153b8:	7fefffff 	.word	0x7fefffff
 80153bc:	39500000 	.word	0x39500000
 80153c0:	fff00000 	.word	0xfff00000
 80153c4:	9905      	ldr	r1, [sp, #20]
 80153c6:	0020      	movs	r0, r4
 80153c8:	f001 ffb2 	bl	8017330 <__ratio>
 80153cc:	2380      	movs	r3, #128	; 0x80
 80153ce:	2200      	movs	r2, #0
 80153d0:	05db      	lsls	r3, r3, #23
 80153d2:	9008      	str	r0, [sp, #32]
 80153d4:	9109      	str	r1, [sp, #36]	; 0x24
 80153d6:	f7eb f847 	bl	8000468 <__aeabi_dcmple>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d100      	bne.n	80153e0 <_strtod_l+0x9e4>
 80153de:	e07f      	b.n	80154e0 <_strtod_l+0xae4>
 80153e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d04b      	beq.n	801547e <_strtod_l+0xa82>
 80153e6:	2200      	movs	r2, #0
 80153e8:	4b8a      	ldr	r3, [pc, #552]	; (8015614 <_strtod_l+0xc18>)
 80153ea:	9210      	str	r2, [sp, #64]	; 0x40
 80153ec:	9311      	str	r3, [sp, #68]	; 0x44
 80153ee:	4b89      	ldr	r3, [pc, #548]	; (8015614 <_strtod_l+0xc18>)
 80153f0:	9308      	str	r3, [sp, #32]
 80153f2:	4a89      	ldr	r2, [pc, #548]	; (8015618 <_strtod_l+0xc1c>)
 80153f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153f6:	4013      	ands	r3, r2
 80153f8:	9314      	str	r3, [sp, #80]	; 0x50
 80153fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153fc:	4b87      	ldr	r3, [pc, #540]	; (801561c <_strtod_l+0xc20>)
 80153fe:	429a      	cmp	r2, r3
 8015400:	d000      	beq.n	8015404 <_strtod_l+0xa08>
 8015402:	e0ba      	b.n	801557a <_strtod_l+0xb7e>
 8015404:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015406:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015408:	921a      	str	r2, [sp, #104]	; 0x68
 801540a:	931b      	str	r3, [sp, #108]	; 0x6c
 801540c:	4a84      	ldr	r2, [pc, #528]	; (8015620 <_strtod_l+0xc24>)
 801540e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015410:	4694      	mov	ip, r2
 8015412:	4463      	add	r3, ip
 8015414:	001f      	movs	r7, r3
 8015416:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015418:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801541a:	0030      	movs	r0, r6
 801541c:	0039      	movs	r1, r7
 801541e:	920c      	str	r2, [sp, #48]	; 0x30
 8015420:	930d      	str	r3, [sp, #52]	; 0x34
 8015422:	f001 febf 	bl	80171a4 <__ulp>
 8015426:	0002      	movs	r2, r0
 8015428:	000b      	movs	r3, r1
 801542a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801542c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801542e:	f7ec fd27 	bl	8001e80 <__aeabi_dmul>
 8015432:	0032      	movs	r2, r6
 8015434:	003b      	movs	r3, r7
 8015436:	f7eb fdfd 	bl	8001034 <__aeabi_dadd>
 801543a:	4a77      	ldr	r2, [pc, #476]	; (8015618 <_strtod_l+0xc1c>)
 801543c:	4b79      	ldr	r3, [pc, #484]	; (8015624 <_strtod_l+0xc28>)
 801543e:	0006      	movs	r6, r0
 8015440:	400a      	ands	r2, r1
 8015442:	429a      	cmp	r2, r3
 8015444:	d964      	bls.n	8015510 <_strtod_l+0xb14>
 8015446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015448:	4a77      	ldr	r2, [pc, #476]	; (8015628 <_strtod_l+0xc2c>)
 801544a:	4293      	cmp	r3, r2
 801544c:	d103      	bne.n	8015456 <_strtod_l+0xa5a>
 801544e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015450:	3301      	adds	r3, #1
 8015452:	d100      	bne.n	8015456 <_strtod_l+0xa5a>
 8015454:	e508      	b.n	8014e68 <_strtod_l+0x46c>
 8015456:	2601      	movs	r6, #1
 8015458:	4f73      	ldr	r7, [pc, #460]	; (8015628 <_strtod_l+0xc2c>)
 801545a:	4276      	negs	r6, r6
 801545c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801545e:	9804      	ldr	r0, [sp, #16]
 8015460:	f001 fc07 	bl	8016c72 <_Bfree>
 8015464:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015466:	9804      	ldr	r0, [sp, #16]
 8015468:	f001 fc03 	bl	8016c72 <_Bfree>
 801546c:	9905      	ldr	r1, [sp, #20]
 801546e:	9804      	ldr	r0, [sp, #16]
 8015470:	f001 fbff 	bl	8016c72 <_Bfree>
 8015474:	0021      	movs	r1, r4
 8015476:	9804      	ldr	r0, [sp, #16]
 8015478:	f001 fbfb 	bl	8016c72 <_Bfree>
 801547c:	e5f4      	b.n	8015068 <_strtod_l+0x66c>
 801547e:	2e00      	cmp	r6, #0
 8015480:	d11e      	bne.n	80154c0 <_strtod_l+0xac4>
 8015482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015484:	031b      	lsls	r3, r3, #12
 8015486:	d121      	bne.n	80154cc <_strtod_l+0xad0>
 8015488:	9808      	ldr	r0, [sp, #32]
 801548a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801548c:	2200      	movs	r2, #0
 801548e:	4b61      	ldr	r3, [pc, #388]	; (8015614 <_strtod_l+0xc18>)
 8015490:	f7ea ffe0 	bl	8000454 <__aeabi_dcmplt>
 8015494:	2800      	cmp	r0, #0
 8015496:	d11f      	bne.n	80154d8 <_strtod_l+0xadc>
 8015498:	9808      	ldr	r0, [sp, #32]
 801549a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801549c:	2200      	movs	r2, #0
 801549e:	4b63      	ldr	r3, [pc, #396]	; (801562c <_strtod_l+0xc30>)
 80154a0:	f7ec fcee 	bl	8001e80 <__aeabi_dmul>
 80154a4:	0005      	movs	r5, r0
 80154a6:	9108      	str	r1, [sp, #32]
 80154a8:	2280      	movs	r2, #128	; 0x80
 80154aa:	0612      	lsls	r2, r2, #24
 80154ac:	4694      	mov	ip, r2
 80154ae:	9b08      	ldr	r3, [sp, #32]
 80154b0:	951e      	str	r5, [sp, #120]	; 0x78
 80154b2:	4463      	add	r3, ip
 80154b4:	931f      	str	r3, [sp, #124]	; 0x7c
 80154b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80154b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80154ba:	9210      	str	r2, [sp, #64]	; 0x40
 80154bc:	9311      	str	r3, [sp, #68]	; 0x44
 80154be:	e798      	b.n	80153f2 <_strtod_l+0x9f6>
 80154c0:	2e01      	cmp	r6, #1
 80154c2:	d103      	bne.n	80154cc <_strtod_l+0xad0>
 80154c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d100      	bne.n	80154cc <_strtod_l+0xad0>
 80154ca:	e562      	b.n	8014f92 <_strtod_l+0x596>
 80154cc:	2200      	movs	r2, #0
 80154ce:	4b58      	ldr	r3, [pc, #352]	; (8015630 <_strtod_l+0xc34>)
 80154d0:	2500      	movs	r5, #0
 80154d2:	9210      	str	r2, [sp, #64]	; 0x40
 80154d4:	9311      	str	r3, [sp, #68]	; 0x44
 80154d6:	e78a      	b.n	80153ee <_strtod_l+0x9f2>
 80154d8:	4b54      	ldr	r3, [pc, #336]	; (801562c <_strtod_l+0xc30>)
 80154da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80154dc:	9308      	str	r3, [sp, #32]
 80154de:	e7e3      	b.n	80154a8 <_strtod_l+0xaac>
 80154e0:	4b52      	ldr	r3, [pc, #328]	; (801562c <_strtod_l+0xc30>)
 80154e2:	9808      	ldr	r0, [sp, #32]
 80154e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154e6:	2200      	movs	r2, #0
 80154e8:	f7ec fcca 	bl	8001e80 <__aeabi_dmul>
 80154ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80154ee:	0005      	movs	r5, r0
 80154f0:	9108      	str	r1, [sp, #32]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d107      	bne.n	8015506 <_strtod_l+0xb0a>
 80154f6:	2380      	movs	r3, #128	; 0x80
 80154f8:	061b      	lsls	r3, r3, #24
 80154fa:	18cb      	adds	r3, r1, r3
 80154fc:	9016      	str	r0, [sp, #88]	; 0x58
 80154fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8015500:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015504:	e7d9      	b.n	80154ba <_strtod_l+0xabe>
 8015506:	0002      	movs	r2, r0
 8015508:	9b08      	ldr	r3, [sp, #32]
 801550a:	9216      	str	r2, [sp, #88]	; 0x58
 801550c:	9317      	str	r3, [sp, #92]	; 0x5c
 801550e:	e7f7      	b.n	8015500 <_strtod_l+0xb04>
 8015510:	23d4      	movs	r3, #212	; 0xd4
 8015512:	049b      	lsls	r3, r3, #18
 8015514:	18cf      	adds	r7, r1, r3
 8015516:	9b06      	ldr	r3, [sp, #24]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d19f      	bne.n	801545c <_strtod_l+0xa60>
 801551c:	4b3e      	ldr	r3, [pc, #248]	; (8015618 <_strtod_l+0xc1c>)
 801551e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015520:	970c      	str	r7, [sp, #48]	; 0x30
 8015522:	403b      	ands	r3, r7
 8015524:	429a      	cmp	r2, r3
 8015526:	d199      	bne.n	801545c <_strtod_l+0xa60>
 8015528:	9908      	ldr	r1, [sp, #32]
 801552a:	0028      	movs	r0, r5
 801552c:	f7ed fa7e 	bl	8002a2c <__aeabi_d2iz>
 8015530:	f7ed fab2 	bl	8002a98 <__aeabi_i2d>
 8015534:	000b      	movs	r3, r1
 8015536:	0002      	movs	r2, r0
 8015538:	9908      	ldr	r1, [sp, #32]
 801553a:	0028      	movs	r0, r5
 801553c:	f7ec ff12 	bl	8002364 <__aeabi_dsub>
 8015540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015542:	9008      	str	r0, [sp, #32]
 8015544:	9109      	str	r1, [sp, #36]	; 0x24
 8015546:	2b00      	cmp	r3, #0
 8015548:	d104      	bne.n	8015554 <_strtod_l+0xb58>
 801554a:	2e00      	cmp	r6, #0
 801554c:	d102      	bne.n	8015554 <_strtod_l+0xb58>
 801554e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015550:	031b      	lsls	r3, r3, #12
 8015552:	d058      	beq.n	8015606 <_strtod_l+0xc0a>
 8015554:	9808      	ldr	r0, [sp, #32]
 8015556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015558:	4a36      	ldr	r2, [pc, #216]	; (8015634 <_strtod_l+0xc38>)
 801555a:	4b37      	ldr	r3, [pc, #220]	; (8015638 <_strtod_l+0xc3c>)
 801555c:	f7ea ff7a 	bl	8000454 <__aeabi_dcmplt>
 8015560:	2800      	cmp	r0, #0
 8015562:	d000      	beq.n	8015566 <_strtod_l+0xb6a>
 8015564:	e489      	b.n	8014e7a <_strtod_l+0x47e>
 8015566:	9808      	ldr	r0, [sp, #32]
 8015568:	9909      	ldr	r1, [sp, #36]	; 0x24
 801556a:	4a34      	ldr	r2, [pc, #208]	; (801563c <_strtod_l+0xc40>)
 801556c:	4b2f      	ldr	r3, [pc, #188]	; (801562c <_strtod_l+0xc30>)
 801556e:	f7ea ff85 	bl	800047c <__aeabi_dcmpgt>
 8015572:	2800      	cmp	r0, #0
 8015574:	d100      	bne.n	8015578 <_strtod_l+0xb7c>
 8015576:	e771      	b.n	801545c <_strtod_l+0xa60>
 8015578:	e47f      	b.n	8014e7a <_strtod_l+0x47e>
 801557a:	9b06      	ldr	r3, [sp, #24]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d02a      	beq.n	80155d6 <_strtod_l+0xbda>
 8015580:	23d4      	movs	r3, #212	; 0xd4
 8015582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015584:	04db      	lsls	r3, r3, #19
 8015586:	429a      	cmp	r2, r3
 8015588:	d825      	bhi.n	80155d6 <_strtod_l+0xbda>
 801558a:	4a2d      	ldr	r2, [pc, #180]	; (8015640 <_strtod_l+0xc44>)
 801558c:	4b2d      	ldr	r3, [pc, #180]	; (8015644 <_strtod_l+0xc48>)
 801558e:	0028      	movs	r0, r5
 8015590:	9908      	ldr	r1, [sp, #32]
 8015592:	f7ea ff69 	bl	8000468 <__aeabi_dcmple>
 8015596:	2800      	cmp	r0, #0
 8015598:	d016      	beq.n	80155c8 <_strtod_l+0xbcc>
 801559a:	0028      	movs	r0, r5
 801559c:	9908      	ldr	r1, [sp, #32]
 801559e:	f7ea fffd 	bl	800059c <__aeabi_d2uiz>
 80155a2:	2800      	cmp	r0, #0
 80155a4:	d100      	bne.n	80155a8 <_strtod_l+0xbac>
 80155a6:	3001      	adds	r0, #1
 80155a8:	f7ed fab0 	bl	8002b0c <__aeabi_ui2d>
 80155ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155ae:	0005      	movs	r5, r0
 80155b0:	9108      	str	r1, [sp, #32]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d122      	bne.n	80155fc <_strtod_l+0xc00>
 80155b6:	2380      	movs	r3, #128	; 0x80
 80155b8:	061b      	lsls	r3, r3, #24
 80155ba:	18cb      	adds	r3, r1, r3
 80155bc:	9018      	str	r0, [sp, #96]	; 0x60
 80155be:	9319      	str	r3, [sp, #100]	; 0x64
 80155c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80155c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80155c4:	9210      	str	r2, [sp, #64]	; 0x40
 80155c6:	9311      	str	r3, [sp, #68]	; 0x44
 80155c8:	22d6      	movs	r2, #214	; 0xd6
 80155ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80155cc:	04d2      	lsls	r2, r2, #19
 80155ce:	189b      	adds	r3, r3, r2
 80155d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155d2:	1a9b      	subs	r3, r3, r2
 80155d4:	9311      	str	r3, [sp, #68]	; 0x44
 80155d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80155d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80155da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80155dc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80155de:	f001 fde1 	bl	80171a4 <__ulp>
 80155e2:	0002      	movs	r2, r0
 80155e4:	000b      	movs	r3, r1
 80155e6:	0030      	movs	r0, r6
 80155e8:	0039      	movs	r1, r7
 80155ea:	f7ec fc49 	bl	8001e80 <__aeabi_dmul>
 80155ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155f2:	f7eb fd1f 	bl	8001034 <__aeabi_dadd>
 80155f6:	0006      	movs	r6, r0
 80155f8:	000f      	movs	r7, r1
 80155fa:	e78c      	b.n	8015516 <_strtod_l+0xb1a>
 80155fc:	0002      	movs	r2, r0
 80155fe:	9b08      	ldr	r3, [sp, #32]
 8015600:	9218      	str	r2, [sp, #96]	; 0x60
 8015602:	9319      	str	r3, [sp, #100]	; 0x64
 8015604:	e7dc      	b.n	80155c0 <_strtod_l+0xbc4>
 8015606:	4a0b      	ldr	r2, [pc, #44]	; (8015634 <_strtod_l+0xc38>)
 8015608:	4b0f      	ldr	r3, [pc, #60]	; (8015648 <_strtod_l+0xc4c>)
 801560a:	9808      	ldr	r0, [sp, #32]
 801560c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801560e:	f7ea ff21 	bl	8000454 <__aeabi_dcmplt>
 8015612:	e7ae      	b.n	8015572 <_strtod_l+0xb76>
 8015614:	3ff00000 	.word	0x3ff00000
 8015618:	7ff00000 	.word	0x7ff00000
 801561c:	7fe00000 	.word	0x7fe00000
 8015620:	fcb00000 	.word	0xfcb00000
 8015624:	7c9fffff 	.word	0x7c9fffff
 8015628:	7fefffff 	.word	0x7fefffff
 801562c:	3fe00000 	.word	0x3fe00000
 8015630:	bff00000 	.word	0xbff00000
 8015634:	94a03595 	.word	0x94a03595
 8015638:	3fdfffff 	.word	0x3fdfffff
 801563c:	35afe535 	.word	0x35afe535
 8015640:	ffc00000 	.word	0xffc00000
 8015644:	41dfffff 	.word	0x41dfffff
 8015648:	3fcfffff 	.word	0x3fcfffff

0801564c <_strtod_r>:
 801564c:	4b04      	ldr	r3, [pc, #16]	; (8015660 <_strtod_r+0x14>)
 801564e:	b510      	push	{r4, lr}
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	6a1b      	ldr	r3, [r3, #32]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d100      	bne.n	801565a <_strtod_r+0xe>
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <_strtod_r+0x18>)
 801565a:	f7ff f9cf 	bl	80149fc <_strtod_l>
 801565e:	bd10      	pop	{r4, pc}
 8015660:	200000b0 	.word	0x200000b0
 8015664:	20000114 	.word	0x20000114

08015668 <strtod>:
 8015668:	4b06      	ldr	r3, [pc, #24]	; (8015684 <strtod+0x1c>)
 801566a:	b510      	push	{r4, lr}
 801566c:	0004      	movs	r4, r0
 801566e:	6818      	ldr	r0, [r3, #0]
 8015670:	000a      	movs	r2, r1
 8015672:	6a03      	ldr	r3, [r0, #32]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d100      	bne.n	801567a <strtod+0x12>
 8015678:	4b03      	ldr	r3, [pc, #12]	; (8015688 <strtod+0x20>)
 801567a:	0021      	movs	r1, r4
 801567c:	f7ff f9be 	bl	80149fc <_strtod_l>
 8015680:	bd10      	pop	{r4, pc}
 8015682:	46c0      	nop			; (mov r8, r8)
 8015684:	200000b0 	.word	0x200000b0
 8015688:	20000114 	.word	0x20000114

0801568c <strtok>:
 801568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801568e:	4b12      	ldr	r3, [pc, #72]	; (80156d8 <strtok+0x4c>)
 8015690:	0006      	movs	r6, r0
 8015692:	681d      	ldr	r5, [r3, #0]
 8015694:	000f      	movs	r7, r1
 8015696:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8015698:	2c00      	cmp	r4, #0
 801569a:	d116      	bne.n	80156ca <strtok+0x3e>
 801569c:	2050      	movs	r0, #80	; 0x50
 801569e:	f7fe f98f 	bl	80139c0 <malloc>
 80156a2:	65a8      	str	r0, [r5, #88]	; 0x58
 80156a4:	6004      	str	r4, [r0, #0]
 80156a6:	6044      	str	r4, [r0, #4]
 80156a8:	6084      	str	r4, [r0, #8]
 80156aa:	60c4      	str	r4, [r0, #12]
 80156ac:	6104      	str	r4, [r0, #16]
 80156ae:	6144      	str	r4, [r0, #20]
 80156b0:	6184      	str	r4, [r0, #24]
 80156b2:	6284      	str	r4, [r0, #40]	; 0x28
 80156b4:	62c4      	str	r4, [r0, #44]	; 0x2c
 80156b6:	6304      	str	r4, [r0, #48]	; 0x30
 80156b8:	6344      	str	r4, [r0, #52]	; 0x34
 80156ba:	6384      	str	r4, [r0, #56]	; 0x38
 80156bc:	63c4      	str	r4, [r0, #60]	; 0x3c
 80156be:	6404      	str	r4, [r0, #64]	; 0x40
 80156c0:	6444      	str	r4, [r0, #68]	; 0x44
 80156c2:	6484      	str	r4, [r0, #72]	; 0x48
 80156c4:	64c4      	str	r4, [r0, #76]	; 0x4c
 80156c6:	7704      	strb	r4, [r0, #28]
 80156c8:	6244      	str	r4, [r0, #36]	; 0x24
 80156ca:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80156cc:	0039      	movs	r1, r7
 80156ce:	0030      	movs	r0, r6
 80156d0:	2301      	movs	r3, #1
 80156d2:	f000 f803 	bl	80156dc <__strtok_r>
 80156d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156d8:	200000b0 	.word	0x200000b0

080156dc <__strtok_r>:
 80156dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80156de:	2800      	cmp	r0, #0
 80156e0:	d104      	bne.n	80156ec <__strtok_r+0x10>
 80156e2:	6810      	ldr	r0, [r2, #0]
 80156e4:	2800      	cmp	r0, #0
 80156e6:	d101      	bne.n	80156ec <__strtok_r+0x10>
 80156e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156ea:	0020      	movs	r0, r4
 80156ec:	000e      	movs	r6, r1
 80156ee:	7805      	ldrb	r5, [r0, #0]
 80156f0:	1c44      	adds	r4, r0, #1
 80156f2:	7837      	ldrb	r7, [r6, #0]
 80156f4:	2f00      	cmp	r7, #0
 80156f6:	d104      	bne.n	8015702 <__strtok_r+0x26>
 80156f8:	2d00      	cmp	r5, #0
 80156fa:	d110      	bne.n	801571e <__strtok_r+0x42>
 80156fc:	6015      	str	r5, [r2, #0]
 80156fe:	0028      	movs	r0, r5
 8015700:	e7f2      	b.n	80156e8 <__strtok_r+0xc>
 8015702:	3601      	adds	r6, #1
 8015704:	42bd      	cmp	r5, r7
 8015706:	d1f4      	bne.n	80156f2 <__strtok_r+0x16>
 8015708:	2b00      	cmp	r3, #0
 801570a:	d1ee      	bne.n	80156ea <__strtok_r+0xe>
 801570c:	6014      	str	r4, [r2, #0]
 801570e:	7003      	strb	r3, [r0, #0]
 8015710:	e7ea      	b.n	80156e8 <__strtok_r+0xc>
 8015712:	0033      	movs	r3, r6
 8015714:	e00d      	b.n	8015732 <__strtok_r+0x56>
 8015716:	3501      	adds	r5, #1
 8015718:	2f00      	cmp	r7, #0
 801571a:	d103      	bne.n	8015724 <__strtok_r+0x48>
 801571c:	001c      	movs	r4, r3
 801571e:	000d      	movs	r5, r1
 8015720:	7826      	ldrb	r6, [r4, #0]
 8015722:	1c63      	adds	r3, r4, #1
 8015724:	782f      	ldrb	r7, [r5, #0]
 8015726:	42be      	cmp	r6, r7
 8015728:	d1f5      	bne.n	8015716 <__strtok_r+0x3a>
 801572a:	2e00      	cmp	r6, #0
 801572c:	d0f1      	beq.n	8015712 <__strtok_r+0x36>
 801572e:	2100      	movs	r1, #0
 8015730:	7021      	strb	r1, [r4, #0]
 8015732:	6013      	str	r3, [r2, #0]
 8015734:	e7d8      	b.n	80156e8 <__strtok_r+0xc>
	...

08015738 <_strtol_l.isra.0>:
 8015738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801573a:	001f      	movs	r7, r3
 801573c:	000e      	movs	r6, r1
 801573e:	b087      	sub	sp, #28
 8015740:	9005      	str	r0, [sp, #20]
 8015742:	9101      	str	r1, [sp, #4]
 8015744:	9202      	str	r2, [sp, #8]
 8015746:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015748:	7834      	ldrb	r4, [r6, #0]
 801574a:	f7fe f927 	bl	801399c <__locale_ctype_ptr_l>
 801574e:	2208      	movs	r2, #8
 8015750:	1900      	adds	r0, r0, r4
 8015752:	7843      	ldrb	r3, [r0, #1]
 8015754:	1c75      	adds	r5, r6, #1
 8015756:	4013      	ands	r3, r2
 8015758:	d136      	bne.n	80157c8 <_strtol_l.isra.0+0x90>
 801575a:	2c2d      	cmp	r4, #45	; 0x2d
 801575c:	d136      	bne.n	80157cc <_strtol_l.isra.0+0x94>
 801575e:	1cb5      	adds	r5, r6, #2
 8015760:	7874      	ldrb	r4, [r6, #1]
 8015762:	2601      	movs	r6, #1
 8015764:	2f00      	cmp	r7, #0
 8015766:	d062      	beq.n	801582e <_strtol_l.isra.0+0xf6>
 8015768:	2f10      	cmp	r7, #16
 801576a:	d109      	bne.n	8015780 <_strtol_l.isra.0+0x48>
 801576c:	2c30      	cmp	r4, #48	; 0x30
 801576e:	d107      	bne.n	8015780 <_strtol_l.isra.0+0x48>
 8015770:	2220      	movs	r2, #32
 8015772:	782b      	ldrb	r3, [r5, #0]
 8015774:	4393      	bics	r3, r2
 8015776:	2b58      	cmp	r3, #88	; 0x58
 8015778:	d154      	bne.n	8015824 <_strtol_l.isra.0+0xec>
 801577a:	2710      	movs	r7, #16
 801577c:	786c      	ldrb	r4, [r5, #1]
 801577e:	3502      	adds	r5, #2
 8015780:	4b2d      	ldr	r3, [pc, #180]	; (8015838 <_strtol_l.isra.0+0x100>)
 8015782:	0039      	movs	r1, r7
 8015784:	18f3      	adds	r3, r6, r3
 8015786:	0018      	movs	r0, r3
 8015788:	9303      	str	r3, [sp, #12]
 801578a:	f7ea fd5d 	bl	8000248 <__aeabi_uidivmod>
 801578e:	9104      	str	r1, [sp, #16]
 8015790:	2101      	movs	r1, #1
 8015792:	2300      	movs	r3, #0
 8015794:	4249      	negs	r1, r1
 8015796:	0002      	movs	r2, r0
 8015798:	468c      	mov	ip, r1
 801579a:	0018      	movs	r0, r3
 801579c:	0021      	movs	r1, r4
 801579e:	3930      	subs	r1, #48	; 0x30
 80157a0:	2909      	cmp	r1, #9
 80157a2:	d81a      	bhi.n	80157da <_strtol_l.isra.0+0xa2>
 80157a4:	000c      	movs	r4, r1
 80157a6:	42a7      	cmp	r7, r4
 80157a8:	dd23      	ble.n	80157f2 <_strtol_l.isra.0+0xba>
 80157aa:	1c59      	adds	r1, r3, #1
 80157ac:	d009      	beq.n	80157c2 <_strtol_l.isra.0+0x8a>
 80157ae:	4663      	mov	r3, ip
 80157b0:	4282      	cmp	r2, r0
 80157b2:	d306      	bcc.n	80157c2 <_strtol_l.isra.0+0x8a>
 80157b4:	d102      	bne.n	80157bc <_strtol_l.isra.0+0x84>
 80157b6:	9904      	ldr	r1, [sp, #16]
 80157b8:	42a1      	cmp	r1, r4
 80157ba:	db02      	blt.n	80157c2 <_strtol_l.isra.0+0x8a>
 80157bc:	2301      	movs	r3, #1
 80157be:	4378      	muls	r0, r7
 80157c0:	1820      	adds	r0, r4, r0
 80157c2:	782c      	ldrb	r4, [r5, #0]
 80157c4:	3501      	adds	r5, #1
 80157c6:	e7e9      	b.n	801579c <_strtol_l.isra.0+0x64>
 80157c8:	002e      	movs	r6, r5
 80157ca:	e7bc      	b.n	8015746 <_strtol_l.isra.0+0xe>
 80157cc:	2c2b      	cmp	r4, #43	; 0x2b
 80157ce:	d001      	beq.n	80157d4 <_strtol_l.isra.0+0x9c>
 80157d0:	001e      	movs	r6, r3
 80157d2:	e7c7      	b.n	8015764 <_strtol_l.isra.0+0x2c>
 80157d4:	1cb5      	adds	r5, r6, #2
 80157d6:	7874      	ldrb	r4, [r6, #1]
 80157d8:	e7fa      	b.n	80157d0 <_strtol_l.isra.0+0x98>
 80157da:	0021      	movs	r1, r4
 80157dc:	3941      	subs	r1, #65	; 0x41
 80157de:	2919      	cmp	r1, #25
 80157e0:	d801      	bhi.n	80157e6 <_strtol_l.isra.0+0xae>
 80157e2:	3c37      	subs	r4, #55	; 0x37
 80157e4:	e7df      	b.n	80157a6 <_strtol_l.isra.0+0x6e>
 80157e6:	0021      	movs	r1, r4
 80157e8:	3961      	subs	r1, #97	; 0x61
 80157ea:	2919      	cmp	r1, #25
 80157ec:	d801      	bhi.n	80157f2 <_strtol_l.isra.0+0xba>
 80157ee:	3c57      	subs	r4, #87	; 0x57
 80157f0:	e7d9      	b.n	80157a6 <_strtol_l.isra.0+0x6e>
 80157f2:	1c5a      	adds	r2, r3, #1
 80157f4:	d108      	bne.n	8015808 <_strtol_l.isra.0+0xd0>
 80157f6:	9a05      	ldr	r2, [sp, #20]
 80157f8:	3323      	adds	r3, #35	; 0x23
 80157fa:	6013      	str	r3, [r2, #0]
 80157fc:	9b02      	ldr	r3, [sp, #8]
 80157fe:	9803      	ldr	r0, [sp, #12]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d109      	bne.n	8015818 <_strtol_l.isra.0+0xe0>
 8015804:	b007      	add	sp, #28
 8015806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015808:	2e00      	cmp	r6, #0
 801580a:	d000      	beq.n	801580e <_strtol_l.isra.0+0xd6>
 801580c:	4240      	negs	r0, r0
 801580e:	9a02      	ldr	r2, [sp, #8]
 8015810:	2a00      	cmp	r2, #0
 8015812:	d0f7      	beq.n	8015804 <_strtol_l.isra.0+0xcc>
 8015814:	2b00      	cmp	r3, #0
 8015816:	d001      	beq.n	801581c <_strtol_l.isra.0+0xe4>
 8015818:	1e6b      	subs	r3, r5, #1
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	9b02      	ldr	r3, [sp, #8]
 801581e:	9a01      	ldr	r2, [sp, #4]
 8015820:	601a      	str	r2, [r3, #0]
 8015822:	e7ef      	b.n	8015804 <_strtol_l.isra.0+0xcc>
 8015824:	2430      	movs	r4, #48	; 0x30
 8015826:	2f00      	cmp	r7, #0
 8015828:	d1aa      	bne.n	8015780 <_strtol_l.isra.0+0x48>
 801582a:	2708      	movs	r7, #8
 801582c:	e7a8      	b.n	8015780 <_strtol_l.isra.0+0x48>
 801582e:	2c30      	cmp	r4, #48	; 0x30
 8015830:	d09e      	beq.n	8015770 <_strtol_l.isra.0+0x38>
 8015832:	270a      	movs	r7, #10
 8015834:	e7a4      	b.n	8015780 <_strtol_l.isra.0+0x48>
 8015836:	46c0      	nop			; (mov r8, r8)
 8015838:	7fffffff 	.word	0x7fffffff

0801583c <_strtol_r>:
 801583c:	b513      	push	{r0, r1, r4, lr}
 801583e:	4c05      	ldr	r4, [pc, #20]	; (8015854 <_strtol_r+0x18>)
 8015840:	6824      	ldr	r4, [r4, #0]
 8015842:	6a24      	ldr	r4, [r4, #32]
 8015844:	2c00      	cmp	r4, #0
 8015846:	d100      	bne.n	801584a <_strtol_r+0xe>
 8015848:	4c03      	ldr	r4, [pc, #12]	; (8015858 <_strtol_r+0x1c>)
 801584a:	9400      	str	r4, [sp, #0]
 801584c:	f7ff ff74 	bl	8015738 <_strtol_l.isra.0>
 8015850:	bd16      	pop	{r1, r2, r4, pc}
 8015852:	46c0      	nop			; (mov r8, r8)
 8015854:	200000b0 	.word	0x200000b0
 8015858:	20000114 	.word	0x20000114

0801585c <strtol>:
 801585c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801585e:	0013      	movs	r3, r2
 8015860:	4a06      	ldr	r2, [pc, #24]	; (801587c <strtol+0x20>)
 8015862:	0005      	movs	r5, r0
 8015864:	6810      	ldr	r0, [r2, #0]
 8015866:	6a04      	ldr	r4, [r0, #32]
 8015868:	2c00      	cmp	r4, #0
 801586a:	d100      	bne.n	801586e <strtol+0x12>
 801586c:	4c04      	ldr	r4, [pc, #16]	; (8015880 <strtol+0x24>)
 801586e:	000a      	movs	r2, r1
 8015870:	9400      	str	r4, [sp, #0]
 8015872:	0029      	movs	r1, r5
 8015874:	f7ff ff60 	bl	8015738 <_strtol_l.isra.0>
 8015878:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801587a:	46c0      	nop			; (mov r8, r8)
 801587c:	200000b0 	.word	0x200000b0
 8015880:	20000114 	.word	0x20000114

08015884 <__ascii_wctomb>:
 8015884:	1e0b      	subs	r3, r1, #0
 8015886:	d004      	beq.n	8015892 <__ascii_wctomb+0xe>
 8015888:	2aff      	cmp	r2, #255	; 0xff
 801588a:	d904      	bls.n	8015896 <__ascii_wctomb+0x12>
 801588c:	238a      	movs	r3, #138	; 0x8a
 801588e:	6003      	str	r3, [r0, #0]
 8015890:	3b8b      	subs	r3, #139	; 0x8b
 8015892:	0018      	movs	r0, r3
 8015894:	4770      	bx	lr
 8015896:	700a      	strb	r2, [r1, #0]
 8015898:	2301      	movs	r3, #1
 801589a:	e7fa      	b.n	8015892 <__ascii_wctomb+0xe>

0801589c <quorem>:
 801589c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801589e:	6903      	ldr	r3, [r0, #16]
 80158a0:	690c      	ldr	r4, [r1, #16]
 80158a2:	b089      	sub	sp, #36	; 0x24
 80158a4:	0007      	movs	r7, r0
 80158a6:	9105      	str	r1, [sp, #20]
 80158a8:	2600      	movs	r6, #0
 80158aa:	42a3      	cmp	r3, r4
 80158ac:	db65      	blt.n	801597a <quorem+0xde>
 80158ae:	000b      	movs	r3, r1
 80158b0:	3c01      	subs	r4, #1
 80158b2:	3314      	adds	r3, #20
 80158b4:	00a5      	lsls	r5, r4, #2
 80158b6:	9303      	str	r3, [sp, #12]
 80158b8:	195b      	adds	r3, r3, r5
 80158ba:	9304      	str	r3, [sp, #16]
 80158bc:	0003      	movs	r3, r0
 80158be:	3314      	adds	r3, #20
 80158c0:	9302      	str	r3, [sp, #8]
 80158c2:	195d      	adds	r5, r3, r5
 80158c4:	9b04      	ldr	r3, [sp, #16]
 80158c6:	6828      	ldr	r0, [r5, #0]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	1c59      	adds	r1, r3, #1
 80158cc:	9301      	str	r3, [sp, #4]
 80158ce:	f7ea fc35 	bl	800013c <__udivsi3>
 80158d2:	9001      	str	r0, [sp, #4]
 80158d4:	42b0      	cmp	r0, r6
 80158d6:	d029      	beq.n	801592c <quorem+0x90>
 80158d8:	9b03      	ldr	r3, [sp, #12]
 80158da:	9802      	ldr	r0, [sp, #8]
 80158dc:	469c      	mov	ip, r3
 80158de:	9606      	str	r6, [sp, #24]
 80158e0:	4662      	mov	r2, ip
 80158e2:	ca08      	ldmia	r2!, {r3}
 80158e4:	4694      	mov	ip, r2
 80158e6:	9a01      	ldr	r2, [sp, #4]
 80158e8:	b299      	uxth	r1, r3
 80158ea:	4351      	muls	r1, r2
 80158ec:	0c1b      	lsrs	r3, r3, #16
 80158ee:	4353      	muls	r3, r2
 80158f0:	1989      	adds	r1, r1, r6
 80158f2:	0c0a      	lsrs	r2, r1, #16
 80158f4:	189b      	adds	r3, r3, r2
 80158f6:	9307      	str	r3, [sp, #28]
 80158f8:	0c1e      	lsrs	r6, r3, #16
 80158fa:	6803      	ldr	r3, [r0, #0]
 80158fc:	b289      	uxth	r1, r1
 80158fe:	b29a      	uxth	r2, r3
 8015900:	9b06      	ldr	r3, [sp, #24]
 8015902:	18d2      	adds	r2, r2, r3
 8015904:	6803      	ldr	r3, [r0, #0]
 8015906:	1a52      	subs	r2, r2, r1
 8015908:	0c19      	lsrs	r1, r3, #16
 801590a:	466b      	mov	r3, sp
 801590c:	8b9b      	ldrh	r3, [r3, #28]
 801590e:	1acb      	subs	r3, r1, r3
 8015910:	1411      	asrs	r1, r2, #16
 8015912:	185b      	adds	r3, r3, r1
 8015914:	1419      	asrs	r1, r3, #16
 8015916:	b292      	uxth	r2, r2
 8015918:	041b      	lsls	r3, r3, #16
 801591a:	431a      	orrs	r2, r3
 801591c:	9b04      	ldr	r3, [sp, #16]
 801591e:	9106      	str	r1, [sp, #24]
 8015920:	c004      	stmia	r0!, {r2}
 8015922:	4563      	cmp	r3, ip
 8015924:	d2dc      	bcs.n	80158e0 <quorem+0x44>
 8015926:	682b      	ldr	r3, [r5, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d02d      	beq.n	8015988 <quorem+0xec>
 801592c:	9905      	ldr	r1, [sp, #20]
 801592e:	0038      	movs	r0, r7
 8015930:	f001 fbba 	bl	80170a8 <__mcmp>
 8015934:	2800      	cmp	r0, #0
 8015936:	db1f      	blt.n	8015978 <quorem+0xdc>
 8015938:	2500      	movs	r5, #0
 801593a:	9b01      	ldr	r3, [sp, #4]
 801593c:	9802      	ldr	r0, [sp, #8]
 801593e:	3301      	adds	r3, #1
 8015940:	9903      	ldr	r1, [sp, #12]
 8015942:	9301      	str	r3, [sp, #4]
 8015944:	6802      	ldr	r2, [r0, #0]
 8015946:	c908      	ldmia	r1!, {r3}
 8015948:	b292      	uxth	r2, r2
 801594a:	1955      	adds	r5, r2, r5
 801594c:	b29a      	uxth	r2, r3
 801594e:	1aaa      	subs	r2, r5, r2
 8015950:	6805      	ldr	r5, [r0, #0]
 8015952:	0c1b      	lsrs	r3, r3, #16
 8015954:	0c2d      	lsrs	r5, r5, #16
 8015956:	1aeb      	subs	r3, r5, r3
 8015958:	1415      	asrs	r5, r2, #16
 801595a:	195b      	adds	r3, r3, r5
 801595c:	141d      	asrs	r5, r3, #16
 801595e:	b292      	uxth	r2, r2
 8015960:	041b      	lsls	r3, r3, #16
 8015962:	4313      	orrs	r3, r2
 8015964:	c008      	stmia	r0!, {r3}
 8015966:	9b04      	ldr	r3, [sp, #16]
 8015968:	428b      	cmp	r3, r1
 801596a:	d2eb      	bcs.n	8015944 <quorem+0xa8>
 801596c:	9a02      	ldr	r2, [sp, #8]
 801596e:	00a3      	lsls	r3, r4, #2
 8015970:	18d3      	adds	r3, r2, r3
 8015972:	681a      	ldr	r2, [r3, #0]
 8015974:	2a00      	cmp	r2, #0
 8015976:	d011      	beq.n	801599c <quorem+0x100>
 8015978:	9e01      	ldr	r6, [sp, #4]
 801597a:	0030      	movs	r0, r6
 801597c:	b009      	add	sp, #36	; 0x24
 801597e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015980:	682b      	ldr	r3, [r5, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d104      	bne.n	8015990 <quorem+0xf4>
 8015986:	3c01      	subs	r4, #1
 8015988:	9b02      	ldr	r3, [sp, #8]
 801598a:	3d04      	subs	r5, #4
 801598c:	42ab      	cmp	r3, r5
 801598e:	d3f7      	bcc.n	8015980 <quorem+0xe4>
 8015990:	613c      	str	r4, [r7, #16]
 8015992:	e7cb      	b.n	801592c <quorem+0x90>
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	2a00      	cmp	r2, #0
 8015998:	d104      	bne.n	80159a4 <quorem+0x108>
 801599a:	3c01      	subs	r4, #1
 801599c:	9a02      	ldr	r2, [sp, #8]
 801599e:	3b04      	subs	r3, #4
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d3f7      	bcc.n	8015994 <quorem+0xf8>
 80159a4:	613c      	str	r4, [r7, #16]
 80159a6:	e7e7      	b.n	8015978 <quorem+0xdc>

080159a8 <_dtoa_r>:
 80159a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159aa:	0016      	movs	r6, r2
 80159ac:	001f      	movs	r7, r3
 80159ae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80159b0:	b09b      	sub	sp, #108	; 0x6c
 80159b2:	9002      	str	r0, [sp, #8]
 80159b4:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 80159b6:	9606      	str	r6, [sp, #24]
 80159b8:	9707      	str	r7, [sp, #28]
 80159ba:	2c00      	cmp	r4, #0
 80159bc:	d108      	bne.n	80159d0 <_dtoa_r+0x28>
 80159be:	2010      	movs	r0, #16
 80159c0:	f7fd fffe 	bl	80139c0 <malloc>
 80159c4:	9b02      	ldr	r3, [sp, #8]
 80159c6:	6258      	str	r0, [r3, #36]	; 0x24
 80159c8:	6044      	str	r4, [r0, #4]
 80159ca:	6084      	str	r4, [r0, #8]
 80159cc:	6004      	str	r4, [r0, #0]
 80159ce:	60c4      	str	r4, [r0, #12]
 80159d0:	9b02      	ldr	r3, [sp, #8]
 80159d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d4:	6819      	ldr	r1, [r3, #0]
 80159d6:	2900      	cmp	r1, #0
 80159d8:	d00b      	beq.n	80159f2 <_dtoa_r+0x4a>
 80159da:	685a      	ldr	r2, [r3, #4]
 80159dc:	2301      	movs	r3, #1
 80159de:	4093      	lsls	r3, r2
 80159e0:	604a      	str	r2, [r1, #4]
 80159e2:	608b      	str	r3, [r1, #8]
 80159e4:	9802      	ldr	r0, [sp, #8]
 80159e6:	f001 f944 	bl	8016c72 <_Bfree>
 80159ea:	2200      	movs	r2, #0
 80159ec:	9b02      	ldr	r3, [sp, #8]
 80159ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159f0:	601a      	str	r2, [r3, #0]
 80159f2:	2f00      	cmp	r7, #0
 80159f4:	da20      	bge.n	8015a38 <_dtoa_r+0x90>
 80159f6:	2301      	movs	r3, #1
 80159f8:	602b      	str	r3, [r5, #0]
 80159fa:	007b      	lsls	r3, r7, #1
 80159fc:	085b      	lsrs	r3, r3, #1
 80159fe:	9307      	str	r3, [sp, #28]
 8015a00:	9c07      	ldr	r4, [sp, #28]
 8015a02:	4bb2      	ldr	r3, [pc, #712]	; (8015ccc <_dtoa_r+0x324>)
 8015a04:	0022      	movs	r2, r4
 8015a06:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a08:	401a      	ands	r2, r3
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d117      	bne.n	8015a3e <_dtoa_r+0x96>
 8015a0e:	4bb0      	ldr	r3, [pc, #704]	; (8015cd0 <_dtoa_r+0x328>)
 8015a10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015a12:	6013      	str	r3, [r2, #0]
 8015a14:	9b06      	ldr	r3, [sp, #24]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d103      	bne.n	8015a22 <_dtoa_r+0x7a>
 8015a1a:	0324      	lsls	r4, r4, #12
 8015a1c:	d101      	bne.n	8015a22 <_dtoa_r+0x7a>
 8015a1e:	f000 fd87 	bl	8016530 <_dtoa_r+0xb88>
 8015a22:	4bac      	ldr	r3, [pc, #688]	; (8015cd4 <_dtoa_r+0x32c>)
 8015a24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a26:	9308      	str	r3, [sp, #32]
 8015a28:	2a00      	cmp	r2, #0
 8015a2a:	d002      	beq.n	8015a32 <_dtoa_r+0x8a>
 8015a2c:	4baa      	ldr	r3, [pc, #680]	; (8015cd8 <_dtoa_r+0x330>)
 8015a2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a30:	6013      	str	r3, [r2, #0]
 8015a32:	9808      	ldr	r0, [sp, #32]
 8015a34:	b01b      	add	sp, #108	; 0x6c
 8015a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a38:	2300      	movs	r3, #0
 8015a3a:	602b      	str	r3, [r5, #0]
 8015a3c:	e7e0      	b.n	8015a00 <_dtoa_r+0x58>
 8015a3e:	9e06      	ldr	r6, [sp, #24]
 8015a40:	9f07      	ldr	r7, [sp, #28]
 8015a42:	2200      	movs	r2, #0
 8015a44:	2300      	movs	r3, #0
 8015a46:	0030      	movs	r0, r6
 8015a48:	0039      	movs	r1, r7
 8015a4a:	f7ea fcfd 	bl	8000448 <__aeabi_dcmpeq>
 8015a4e:	1e05      	subs	r5, r0, #0
 8015a50:	d00b      	beq.n	8015a6a <_dtoa_r+0xc2>
 8015a52:	2301      	movs	r3, #1
 8015a54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015a56:	6013      	str	r3, [r2, #0]
 8015a58:	4ba0      	ldr	r3, [pc, #640]	; (8015cdc <_dtoa_r+0x334>)
 8015a5a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015a5c:	9308      	str	r3, [sp, #32]
 8015a5e:	2a00      	cmp	r2, #0
 8015a60:	d0e7      	beq.n	8015a32 <_dtoa_r+0x8a>
 8015a62:	4a9f      	ldr	r2, [pc, #636]	; (8015ce0 <_dtoa_r+0x338>)
 8015a64:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015a66:	600a      	str	r2, [r1, #0]
 8015a68:	e7e3      	b.n	8015a32 <_dtoa_r+0x8a>
 8015a6a:	ab18      	add	r3, sp, #96	; 0x60
 8015a6c:	9301      	str	r3, [sp, #4]
 8015a6e:	ab19      	add	r3, sp, #100	; 0x64
 8015a70:	9300      	str	r3, [sp, #0]
 8015a72:	0032      	movs	r2, r6
 8015a74:	003b      	movs	r3, r7
 8015a76:	9802      	ldr	r0, [sp, #8]
 8015a78:	f001 fc06 	bl	8017288 <__d2b>
 8015a7c:	0063      	lsls	r3, r4, #1
 8015a7e:	9003      	str	r0, [sp, #12]
 8015a80:	0d5b      	lsrs	r3, r3, #21
 8015a82:	d074      	beq.n	8015b6e <_dtoa_r+0x1c6>
 8015a84:	033a      	lsls	r2, r7, #12
 8015a86:	4c97      	ldr	r4, [pc, #604]	; (8015ce4 <_dtoa_r+0x33c>)
 8015a88:	0b12      	lsrs	r2, r2, #12
 8015a8a:	4314      	orrs	r4, r2
 8015a8c:	0021      	movs	r1, r4
 8015a8e:	4a96      	ldr	r2, [pc, #600]	; (8015ce8 <_dtoa_r+0x340>)
 8015a90:	0030      	movs	r0, r6
 8015a92:	9516      	str	r5, [sp, #88]	; 0x58
 8015a94:	189e      	adds	r6, r3, r2
 8015a96:	2200      	movs	r2, #0
 8015a98:	4b94      	ldr	r3, [pc, #592]	; (8015cec <_dtoa_r+0x344>)
 8015a9a:	f7ec fc63 	bl	8002364 <__aeabi_dsub>
 8015a9e:	4a94      	ldr	r2, [pc, #592]	; (8015cf0 <_dtoa_r+0x348>)
 8015aa0:	4b94      	ldr	r3, [pc, #592]	; (8015cf4 <_dtoa_r+0x34c>)
 8015aa2:	f7ec f9ed 	bl	8001e80 <__aeabi_dmul>
 8015aa6:	4a94      	ldr	r2, [pc, #592]	; (8015cf8 <_dtoa_r+0x350>)
 8015aa8:	4b94      	ldr	r3, [pc, #592]	; (8015cfc <_dtoa_r+0x354>)
 8015aaa:	f7eb fac3 	bl	8001034 <__aeabi_dadd>
 8015aae:	0004      	movs	r4, r0
 8015ab0:	0030      	movs	r0, r6
 8015ab2:	000d      	movs	r5, r1
 8015ab4:	f7ec fff0 	bl	8002a98 <__aeabi_i2d>
 8015ab8:	4a91      	ldr	r2, [pc, #580]	; (8015d00 <_dtoa_r+0x358>)
 8015aba:	4b92      	ldr	r3, [pc, #584]	; (8015d04 <_dtoa_r+0x35c>)
 8015abc:	f7ec f9e0 	bl	8001e80 <__aeabi_dmul>
 8015ac0:	0002      	movs	r2, r0
 8015ac2:	000b      	movs	r3, r1
 8015ac4:	0020      	movs	r0, r4
 8015ac6:	0029      	movs	r1, r5
 8015ac8:	f7eb fab4 	bl	8001034 <__aeabi_dadd>
 8015acc:	0004      	movs	r4, r0
 8015ace:	000d      	movs	r5, r1
 8015ad0:	f7ec ffac 	bl	8002a2c <__aeabi_d2iz>
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	0007      	movs	r7, r0
 8015ad8:	2300      	movs	r3, #0
 8015ada:	0020      	movs	r0, r4
 8015adc:	0029      	movs	r1, r5
 8015ade:	f7ea fcb9 	bl	8000454 <__aeabi_dcmplt>
 8015ae2:	2800      	cmp	r0, #0
 8015ae4:	d009      	beq.n	8015afa <_dtoa_r+0x152>
 8015ae6:	0038      	movs	r0, r7
 8015ae8:	f7ec ffd6 	bl	8002a98 <__aeabi_i2d>
 8015aec:	002b      	movs	r3, r5
 8015aee:	0022      	movs	r2, r4
 8015af0:	f7ea fcaa 	bl	8000448 <__aeabi_dcmpeq>
 8015af4:	4243      	negs	r3, r0
 8015af6:	4158      	adcs	r0, r3
 8015af8:	1a3f      	subs	r7, r7, r0
 8015afa:	2301      	movs	r3, #1
 8015afc:	9314      	str	r3, [sp, #80]	; 0x50
 8015afe:	2f16      	cmp	r7, #22
 8015b00:	d80d      	bhi.n	8015b1e <_dtoa_r+0x176>
 8015b02:	4981      	ldr	r1, [pc, #516]	; (8015d08 <_dtoa_r+0x360>)
 8015b04:	00fb      	lsls	r3, r7, #3
 8015b06:	18c9      	adds	r1, r1, r3
 8015b08:	6808      	ldr	r0, [r1, #0]
 8015b0a:	6849      	ldr	r1, [r1, #4]
 8015b0c:	9a06      	ldr	r2, [sp, #24]
 8015b0e:	9b07      	ldr	r3, [sp, #28]
 8015b10:	f7ea fcb4 	bl	800047c <__aeabi_dcmpgt>
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d046      	beq.n	8015ba6 <_dtoa_r+0x1fe>
 8015b18:	2300      	movs	r3, #0
 8015b1a:	3f01      	subs	r7, #1
 8015b1c:	9314      	str	r3, [sp, #80]	; 0x50
 8015b1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b20:	1b9e      	subs	r6, r3, r6
 8015b22:	2300      	movs	r3, #0
 8015b24:	930a      	str	r3, [sp, #40]	; 0x28
 8015b26:	0033      	movs	r3, r6
 8015b28:	3b01      	subs	r3, #1
 8015b2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b2c:	d504      	bpl.n	8015b38 <_dtoa_r+0x190>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	1b9b      	subs	r3, r3, r6
 8015b32:	930a      	str	r3, [sp, #40]	; 0x28
 8015b34:	2300      	movs	r3, #0
 8015b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b38:	2f00      	cmp	r7, #0
 8015b3a:	db36      	blt.n	8015baa <_dtoa_r+0x202>
 8015b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b3e:	9711      	str	r7, [sp, #68]	; 0x44
 8015b40:	19db      	adds	r3, r3, r7
 8015b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b44:	2300      	movs	r3, #0
 8015b46:	9304      	str	r3, [sp, #16]
 8015b48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015b4a:	2401      	movs	r4, #1
 8015b4c:	2b09      	cmp	r3, #9
 8015b4e:	d900      	bls.n	8015b52 <_dtoa_r+0x1aa>
 8015b50:	e084      	b.n	8015c5c <_dtoa_r+0x2b4>
 8015b52:	2b05      	cmp	r3, #5
 8015b54:	dd02      	ble.n	8015b5c <_dtoa_r+0x1b4>
 8015b56:	2400      	movs	r4, #0
 8015b58:	3b04      	subs	r3, #4
 8015b5a:	9320      	str	r3, [sp, #128]	; 0x80
 8015b5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015b5e:	1e98      	subs	r0, r3, #2
 8015b60:	2803      	cmp	r0, #3
 8015b62:	d900      	bls.n	8015b66 <_dtoa_r+0x1be>
 8015b64:	e084      	b.n	8015c70 <_dtoa_r+0x2c8>
 8015b66:	f7ea fadf 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015b6a:	7775      	.short	0x7775
 8015b6c:	6a28      	.short	0x6a28
 8015b6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015b70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015b72:	189e      	adds	r6, r3, r2
 8015b74:	4b65      	ldr	r3, [pc, #404]	; (8015d0c <_dtoa_r+0x364>)
 8015b76:	18f2      	adds	r2, r6, r3
 8015b78:	2a20      	cmp	r2, #32
 8015b7a:	dd0f      	ble.n	8015b9c <_dtoa_r+0x1f4>
 8015b7c:	2340      	movs	r3, #64	; 0x40
 8015b7e:	1a9b      	subs	r3, r3, r2
 8015b80:	409c      	lsls	r4, r3
 8015b82:	4b63      	ldr	r3, [pc, #396]	; (8015d10 <_dtoa_r+0x368>)
 8015b84:	9806      	ldr	r0, [sp, #24]
 8015b86:	18f3      	adds	r3, r6, r3
 8015b88:	40d8      	lsrs	r0, r3
 8015b8a:	4320      	orrs	r0, r4
 8015b8c:	f7ec ffbe 	bl	8002b0c <__aeabi_ui2d>
 8015b90:	2301      	movs	r3, #1
 8015b92:	4c60      	ldr	r4, [pc, #384]	; (8015d14 <_dtoa_r+0x36c>)
 8015b94:	3e01      	subs	r6, #1
 8015b96:	1909      	adds	r1, r1, r4
 8015b98:	9316      	str	r3, [sp, #88]	; 0x58
 8015b9a:	e77c      	b.n	8015a96 <_dtoa_r+0xee>
 8015b9c:	2320      	movs	r3, #32
 8015b9e:	9806      	ldr	r0, [sp, #24]
 8015ba0:	1a9b      	subs	r3, r3, r2
 8015ba2:	4098      	lsls	r0, r3
 8015ba4:	e7f2      	b.n	8015b8c <_dtoa_r+0x1e4>
 8015ba6:	9014      	str	r0, [sp, #80]	; 0x50
 8015ba8:	e7b9      	b.n	8015b1e <_dtoa_r+0x176>
 8015baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bac:	1bdb      	subs	r3, r3, r7
 8015bae:	930a      	str	r3, [sp, #40]	; 0x28
 8015bb0:	427b      	negs	r3, r7
 8015bb2:	9304      	str	r3, [sp, #16]
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	9311      	str	r3, [sp, #68]	; 0x44
 8015bb8:	e7c6      	b.n	8015b48 <_dtoa_r+0x1a0>
 8015bba:	2301      	movs	r3, #1
 8015bbc:	930d      	str	r3, [sp, #52]	; 0x34
 8015bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	dd59      	ble.n	8015c78 <_dtoa_r+0x2d0>
 8015bc4:	930c      	str	r3, [sp, #48]	; 0x30
 8015bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8015bc8:	9a02      	ldr	r2, [sp, #8]
 8015bca:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8015bcc:	2200      	movs	r2, #0
 8015bce:	606a      	str	r2, [r5, #4]
 8015bd0:	3204      	adds	r2, #4
 8015bd2:	0010      	movs	r0, r2
 8015bd4:	3014      	adds	r0, #20
 8015bd6:	6869      	ldr	r1, [r5, #4]
 8015bd8:	4298      	cmp	r0, r3
 8015bda:	d952      	bls.n	8015c82 <_dtoa_r+0x2da>
 8015bdc:	9802      	ldr	r0, [sp, #8]
 8015bde:	f001 f810 	bl	8016c02 <_Balloc>
 8015be2:	9b02      	ldr	r3, [sp, #8]
 8015be4:	6028      	str	r0, [r5, #0]
 8015be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	9308      	str	r3, [sp, #32]
 8015bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bee:	2b0e      	cmp	r3, #14
 8015bf0:	d900      	bls.n	8015bf4 <_dtoa_r+0x24c>
 8015bf2:	e10a      	b.n	8015e0a <_dtoa_r+0x462>
 8015bf4:	2c00      	cmp	r4, #0
 8015bf6:	d100      	bne.n	8015bfa <_dtoa_r+0x252>
 8015bf8:	e107      	b.n	8015e0a <_dtoa_r+0x462>
 8015bfa:	9b06      	ldr	r3, [sp, #24]
 8015bfc:	9c07      	ldr	r4, [sp, #28]
 8015bfe:	9312      	str	r3, [sp, #72]	; 0x48
 8015c00:	9413      	str	r4, [sp, #76]	; 0x4c
 8015c02:	2f00      	cmp	r7, #0
 8015c04:	dc00      	bgt.n	8015c08 <_dtoa_r+0x260>
 8015c06:	e089      	b.n	8015d1c <_dtoa_r+0x374>
 8015c08:	210f      	movs	r1, #15
 8015c0a:	003a      	movs	r2, r7
 8015c0c:	4b3e      	ldr	r3, [pc, #248]	; (8015d08 <_dtoa_r+0x360>)
 8015c0e:	400a      	ands	r2, r1
 8015c10:	00d2      	lsls	r2, r2, #3
 8015c12:	189b      	adds	r3, r3, r2
 8015c14:	681d      	ldr	r5, [r3, #0]
 8015c16:	685e      	ldr	r6, [r3, #4]
 8015c18:	2302      	movs	r3, #2
 8015c1a:	113c      	asrs	r4, r7, #4
 8015c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8015c1e:	06e3      	lsls	r3, r4, #27
 8015c20:	d50b      	bpl.n	8015c3a <_dtoa_r+0x292>
 8015c22:	4b3d      	ldr	r3, [pc, #244]	; (8015d18 <_dtoa_r+0x370>)
 8015c24:	400c      	ands	r4, r1
 8015c26:	6a1a      	ldr	r2, [r3, #32]
 8015c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015c2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015c2e:	f7eb fd1d 	bl	800166c <__aeabi_ddiv>
 8015c32:	2303      	movs	r3, #3
 8015c34:	9006      	str	r0, [sp, #24]
 8015c36:	9107      	str	r1, [sp, #28]
 8015c38:	930e      	str	r3, [sp, #56]	; 0x38
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	e03a      	b.n	8015cb4 <_dtoa_r+0x30c>
 8015c3e:	2301      	movs	r3, #1
 8015c40:	930d      	str	r3, [sp, #52]	; 0x34
 8015c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c44:	18fb      	adds	r3, r7, r3
 8015c46:	930c      	str	r3, [sp, #48]	; 0x30
 8015c48:	3301      	adds	r3, #1
 8015c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	dcbb      	bgt.n	8015bc8 <_dtoa_r+0x220>
 8015c50:	2301      	movs	r3, #1
 8015c52:	e7b9      	b.n	8015bc8 <_dtoa_r+0x220>
 8015c54:	2300      	movs	r3, #0
 8015c56:	e7b1      	b.n	8015bbc <_dtoa_r+0x214>
 8015c58:	2300      	movs	r3, #0
 8015c5a:	e7f1      	b.n	8015c40 <_dtoa_r+0x298>
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	940d      	str	r4, [sp, #52]	; 0x34
 8015c60:	9320      	str	r3, [sp, #128]	; 0x80
 8015c62:	3b01      	subs	r3, #1
 8015c64:	2200      	movs	r2, #0
 8015c66:	930c      	str	r3, [sp, #48]	; 0x30
 8015c68:	9309      	str	r3, [sp, #36]	; 0x24
 8015c6a:	3313      	adds	r3, #19
 8015c6c:	9221      	str	r2, [sp, #132]	; 0x84
 8015c6e:	e7ab      	b.n	8015bc8 <_dtoa_r+0x220>
 8015c70:	2301      	movs	r3, #1
 8015c72:	930d      	str	r3, [sp, #52]	; 0x34
 8015c74:	3b02      	subs	r3, #2
 8015c76:	e7f5      	b.n	8015c64 <_dtoa_r+0x2bc>
 8015c78:	2301      	movs	r3, #1
 8015c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8015c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c7e:	001a      	movs	r2, r3
 8015c80:	e7f4      	b.n	8015c6c <_dtoa_r+0x2c4>
 8015c82:	3101      	adds	r1, #1
 8015c84:	6069      	str	r1, [r5, #4]
 8015c86:	0052      	lsls	r2, r2, #1
 8015c88:	e7a3      	b.n	8015bd2 <_dtoa_r+0x22a>
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	421c      	tst	r4, r3
 8015c8e:	d00e      	beq.n	8015cae <_dtoa_r+0x306>
 8015c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c92:	4a21      	ldr	r2, [pc, #132]	; (8015d18 <_dtoa_r+0x370>)
 8015c94:	3301      	adds	r3, #1
 8015c96:	930e      	str	r3, [sp, #56]	; 0x38
 8015c98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c9a:	0028      	movs	r0, r5
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	189b      	adds	r3, r3, r2
 8015ca0:	0031      	movs	r1, r6
 8015ca2:	681a      	ldr	r2, [r3, #0]
 8015ca4:	685b      	ldr	r3, [r3, #4]
 8015ca6:	f7ec f8eb 	bl	8001e80 <__aeabi_dmul>
 8015caa:	0005      	movs	r5, r0
 8015cac:	000e      	movs	r6, r1
 8015cae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cb0:	1064      	asrs	r4, r4, #1
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	9310      	str	r3, [sp, #64]	; 0x40
 8015cb6:	2c00      	cmp	r4, #0
 8015cb8:	d1e7      	bne.n	8015c8a <_dtoa_r+0x2e2>
 8015cba:	9806      	ldr	r0, [sp, #24]
 8015cbc:	9907      	ldr	r1, [sp, #28]
 8015cbe:	002a      	movs	r2, r5
 8015cc0:	0033      	movs	r3, r6
 8015cc2:	f7eb fcd3 	bl	800166c <__aeabi_ddiv>
 8015cc6:	9006      	str	r0, [sp, #24]
 8015cc8:	9107      	str	r1, [sp, #28]
 8015cca:	e042      	b.n	8015d52 <_dtoa_r+0x3aa>
 8015ccc:	7ff00000 	.word	0x7ff00000
 8015cd0:	0000270f 	.word	0x0000270f
 8015cd4:	0801abb2 	.word	0x0801abb2
 8015cd8:	0801abb5 	.word	0x0801abb5
 8015cdc:	0801aa2a 	.word	0x0801aa2a
 8015ce0:	0801aa2b 	.word	0x0801aa2b
 8015ce4:	3ff00000 	.word	0x3ff00000
 8015ce8:	fffffc01 	.word	0xfffffc01
 8015cec:	3ff80000 	.word	0x3ff80000
 8015cf0:	636f4361 	.word	0x636f4361
 8015cf4:	3fd287a7 	.word	0x3fd287a7
 8015cf8:	8b60c8b3 	.word	0x8b60c8b3
 8015cfc:	3fc68a28 	.word	0x3fc68a28
 8015d00:	509f79fb 	.word	0x509f79fb
 8015d04:	3fd34413 	.word	0x3fd34413
 8015d08:	0801abe0 	.word	0x0801abe0
 8015d0c:	00000432 	.word	0x00000432
 8015d10:	00000412 	.word	0x00000412
 8015d14:	fe100000 	.word	0xfe100000
 8015d18:	0801abb8 	.word	0x0801abb8
 8015d1c:	2302      	movs	r3, #2
 8015d1e:	930e      	str	r3, [sp, #56]	; 0x38
 8015d20:	2f00      	cmp	r7, #0
 8015d22:	d016      	beq.n	8015d52 <_dtoa_r+0x3aa>
 8015d24:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015d26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015d28:	427c      	negs	r4, r7
 8015d2a:	330d      	adds	r3, #13
 8015d2c:	4023      	ands	r3, r4
 8015d2e:	4ace      	ldr	r2, [pc, #824]	; (8016068 <_dtoa_r+0x6c0>)
 8015d30:	00db      	lsls	r3, r3, #3
 8015d32:	18d3      	adds	r3, r2, r3
 8015d34:	681a      	ldr	r2, [r3, #0]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	f7ec f8a2 	bl	8001e80 <__aeabi_dmul>
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	2601      	movs	r6, #1
 8015d40:	001d      	movs	r5, r3
 8015d42:	9006      	str	r0, [sp, #24]
 8015d44:	9107      	str	r1, [sp, #28]
 8015d46:	1124      	asrs	r4, r4, #4
 8015d48:	2c00      	cmp	r4, #0
 8015d4a:	d000      	beq.n	8015d4e <_dtoa_r+0x3a6>
 8015d4c:	e08c      	b.n	8015e68 <_dtoa_r+0x4c0>
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d1b9      	bne.n	8015cc6 <_dtoa_r+0x31e>
 8015d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d100      	bne.n	8015d5a <_dtoa_r+0x3b2>
 8015d58:	e096      	b.n	8015e88 <_dtoa_r+0x4e0>
 8015d5a:	9c06      	ldr	r4, [sp, #24]
 8015d5c:	9d07      	ldr	r5, [sp, #28]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	4bc2      	ldr	r3, [pc, #776]	; (801606c <_dtoa_r+0x6c4>)
 8015d62:	0020      	movs	r0, r4
 8015d64:	0029      	movs	r1, r5
 8015d66:	f7ea fb75 	bl	8000454 <__aeabi_dcmplt>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d100      	bne.n	8015d70 <_dtoa_r+0x3c8>
 8015d6e:	e08b      	b.n	8015e88 <_dtoa_r+0x4e0>
 8015d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d100      	bne.n	8015d78 <_dtoa_r+0x3d0>
 8015d76:	e087      	b.n	8015e88 <_dtoa_r+0x4e0>
 8015d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	dd41      	ble.n	8015e02 <_dtoa_r+0x45a>
 8015d7e:	4bbc      	ldr	r3, [pc, #752]	; (8016070 <_dtoa_r+0x6c8>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	0020      	movs	r0, r4
 8015d84:	0029      	movs	r1, r5
 8015d86:	f7ec f87b 	bl	8001e80 <__aeabi_dmul>
 8015d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d8c:	9006      	str	r0, [sp, #24]
 8015d8e:	9107      	str	r1, [sp, #28]
 8015d90:	3301      	adds	r3, #1
 8015d92:	930e      	str	r3, [sp, #56]	; 0x38
 8015d94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d96:	1e7e      	subs	r6, r7, #1
 8015d98:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015d9a:	9310      	str	r3, [sp, #64]	; 0x40
 8015d9c:	f7ec fe7c 	bl	8002a98 <__aeabi_i2d>
 8015da0:	9a06      	ldr	r2, [sp, #24]
 8015da2:	9b07      	ldr	r3, [sp, #28]
 8015da4:	f7ec f86c 	bl	8001e80 <__aeabi_dmul>
 8015da8:	2200      	movs	r2, #0
 8015daa:	4bb2      	ldr	r3, [pc, #712]	; (8016074 <_dtoa_r+0x6cc>)
 8015dac:	f7eb f942 	bl	8001034 <__aeabi_dadd>
 8015db0:	4ab1      	ldr	r2, [pc, #708]	; (8016078 <_dtoa_r+0x6d0>)
 8015db2:	900e      	str	r0, [sp, #56]	; 0x38
 8015db4:	910f      	str	r1, [sp, #60]	; 0x3c
 8015db6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8015db8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015dba:	4694      	mov	ip, r2
 8015dbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015dbe:	4463      	add	r3, ip
 8015dc0:	9315      	str	r3, [sp, #84]	; 0x54
 8015dc2:	001d      	movs	r5, r3
 8015dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d161      	bne.n	8015e8e <_dtoa_r+0x4e6>
 8015dca:	9806      	ldr	r0, [sp, #24]
 8015dcc:	9907      	ldr	r1, [sp, #28]
 8015dce:	2200      	movs	r2, #0
 8015dd0:	4baa      	ldr	r3, [pc, #680]	; (801607c <_dtoa_r+0x6d4>)
 8015dd2:	f7ec fac7 	bl	8002364 <__aeabi_dsub>
 8015dd6:	0022      	movs	r2, r4
 8015dd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dda:	9006      	str	r0, [sp, #24]
 8015ddc:	9107      	str	r1, [sp, #28]
 8015dde:	f7ea fb4d 	bl	800047c <__aeabi_dcmpgt>
 8015de2:	2800      	cmp	r0, #0
 8015de4:	d000      	beq.n	8015de8 <_dtoa_r+0x440>
 8015de6:	e2a8      	b.n	801633a <_dtoa_r+0x992>
 8015de8:	48a5      	ldr	r0, [pc, #660]	; (8016080 <_dtoa_r+0x6d8>)
 8015dea:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015dec:	4684      	mov	ip, r0
 8015dee:	4461      	add	r1, ip
 8015df0:	000b      	movs	r3, r1
 8015df2:	9806      	ldr	r0, [sp, #24]
 8015df4:	9907      	ldr	r1, [sp, #28]
 8015df6:	0022      	movs	r2, r4
 8015df8:	f7ea fb2c 	bl	8000454 <__aeabi_dcmplt>
 8015dfc:	2800      	cmp	r0, #0
 8015dfe:	d000      	beq.n	8015e02 <_dtoa_r+0x45a>
 8015e00:	e295      	b.n	801632e <_dtoa_r+0x986>
 8015e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e04:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e06:	9306      	str	r3, [sp, #24]
 8015e08:	9407      	str	r4, [sp, #28]
 8015e0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	da00      	bge.n	8015e12 <_dtoa_r+0x46a>
 8015e10:	e15c      	b.n	80160cc <_dtoa_r+0x724>
 8015e12:	2f0e      	cmp	r7, #14
 8015e14:	dd00      	ble.n	8015e18 <_dtoa_r+0x470>
 8015e16:	e159      	b.n	80160cc <_dtoa_r+0x724>
 8015e18:	4b93      	ldr	r3, [pc, #588]	; (8016068 <_dtoa_r+0x6c0>)
 8015e1a:	00fa      	lsls	r2, r7, #3
 8015e1c:	189b      	adds	r3, r3, r2
 8015e1e:	685c      	ldr	r4, [r3, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	9304      	str	r3, [sp, #16]
 8015e24:	9405      	str	r4, [sp, #20]
 8015e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	db00      	blt.n	8015e2e <_dtoa_r+0x486>
 8015e2c:	e0d8      	b.n	8015fe0 <_dtoa_r+0x638>
 8015e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	dd00      	ble.n	8015e36 <_dtoa_r+0x48e>
 8015e34:	e0d4      	b.n	8015fe0 <_dtoa_r+0x638>
 8015e36:	d000      	beq.n	8015e3a <_dtoa_r+0x492>
 8015e38:	e27d      	b.n	8016336 <_dtoa_r+0x98e>
 8015e3a:	9804      	ldr	r0, [sp, #16]
 8015e3c:	9905      	ldr	r1, [sp, #20]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	4b8e      	ldr	r3, [pc, #568]	; (801607c <_dtoa_r+0x6d4>)
 8015e42:	f7ec f81d 	bl	8001e80 <__aeabi_dmul>
 8015e46:	9a06      	ldr	r2, [sp, #24]
 8015e48:	9b07      	ldr	r3, [sp, #28]
 8015e4a:	f7ea fb21 	bl	8000490 <__aeabi_dcmpge>
 8015e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e50:	9304      	str	r3, [sp, #16]
 8015e52:	001e      	movs	r6, r3
 8015e54:	2800      	cmp	r0, #0
 8015e56:	d000      	beq.n	8015e5a <_dtoa_r+0x4b2>
 8015e58:	e24f      	b.n	80162fa <_dtoa_r+0x952>
 8015e5a:	9b08      	ldr	r3, [sp, #32]
 8015e5c:	9a08      	ldr	r2, [sp, #32]
 8015e5e:	1c5d      	adds	r5, r3, #1
 8015e60:	2331      	movs	r3, #49	; 0x31
 8015e62:	3701      	adds	r7, #1
 8015e64:	7013      	strb	r3, [r2, #0]
 8015e66:	e24b      	b.n	8016300 <_dtoa_r+0x958>
 8015e68:	4234      	tst	r4, r6
 8015e6a:	d00a      	beq.n	8015e82 <_dtoa_r+0x4da>
 8015e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e6e:	4a85      	ldr	r2, [pc, #532]	; (8016084 <_dtoa_r+0x6dc>)
 8015e70:	3301      	adds	r3, #1
 8015e72:	930e      	str	r3, [sp, #56]	; 0x38
 8015e74:	00eb      	lsls	r3, r5, #3
 8015e76:	189b      	adds	r3, r3, r2
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	f7ec f800 	bl	8001e80 <__aeabi_dmul>
 8015e80:	0033      	movs	r3, r6
 8015e82:	1064      	asrs	r4, r4, #1
 8015e84:	3501      	adds	r5, #1
 8015e86:	e75f      	b.n	8015d48 <_dtoa_r+0x3a0>
 8015e88:	003e      	movs	r6, r7
 8015e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e8c:	e784      	b.n	8015d98 <_dtoa_r+0x3f0>
 8015e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e90:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015e92:	1e5a      	subs	r2, r3, #1
 8015e94:	4b74      	ldr	r3, [pc, #464]	; (8016068 <_dtoa_r+0x6c0>)
 8015e96:	00d2      	lsls	r2, r2, #3
 8015e98:	189b      	adds	r3, r3, r2
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	2900      	cmp	r1, #0
 8015ea0:	d049      	beq.n	8015f36 <_dtoa_r+0x58e>
 8015ea2:	2000      	movs	r0, #0
 8015ea4:	4978      	ldr	r1, [pc, #480]	; (8016088 <_dtoa_r+0x6e0>)
 8015ea6:	f7eb fbe1 	bl	800166c <__aeabi_ddiv>
 8015eaa:	002b      	movs	r3, r5
 8015eac:	0022      	movs	r2, r4
 8015eae:	f7ec fa59 	bl	8002364 <__aeabi_dsub>
 8015eb2:	9b08      	ldr	r3, [sp, #32]
 8015eb4:	900e      	str	r0, [sp, #56]	; 0x38
 8015eb6:	910f      	str	r1, [sp, #60]	; 0x3c
 8015eb8:	9315      	str	r3, [sp, #84]	; 0x54
 8015eba:	9806      	ldr	r0, [sp, #24]
 8015ebc:	9907      	ldr	r1, [sp, #28]
 8015ebe:	f7ec fdb5 	bl	8002a2c <__aeabi_d2iz>
 8015ec2:	0004      	movs	r4, r0
 8015ec4:	f7ec fde8 	bl	8002a98 <__aeabi_i2d>
 8015ec8:	0002      	movs	r2, r0
 8015eca:	000b      	movs	r3, r1
 8015ecc:	9806      	ldr	r0, [sp, #24]
 8015ece:	9907      	ldr	r1, [sp, #28]
 8015ed0:	f7ec fa48 	bl	8002364 <__aeabi_dsub>
 8015ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ed6:	3430      	adds	r4, #48	; 0x30
 8015ed8:	1c5d      	adds	r5, r3, #1
 8015eda:	701c      	strb	r4, [r3, #0]
 8015edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ee0:	9006      	str	r0, [sp, #24]
 8015ee2:	9107      	str	r1, [sp, #28]
 8015ee4:	f7ea fab6 	bl	8000454 <__aeabi_dcmplt>
 8015ee8:	2800      	cmp	r0, #0
 8015eea:	d16c      	bne.n	8015fc6 <_dtoa_r+0x61e>
 8015eec:	9a06      	ldr	r2, [sp, #24]
 8015eee:	9b07      	ldr	r3, [sp, #28]
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	495e      	ldr	r1, [pc, #376]	; (801606c <_dtoa_r+0x6c4>)
 8015ef4:	f7ec fa36 	bl	8002364 <__aeabi_dsub>
 8015ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015efc:	f7ea faaa 	bl	8000454 <__aeabi_dcmplt>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d000      	beq.n	8015f06 <_dtoa_r+0x55e>
 8015f04:	e0c3      	b.n	801608e <_dtoa_r+0x6e6>
 8015f06:	9b08      	ldr	r3, [sp, #32]
 8015f08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f0a:	1aeb      	subs	r3, r5, r3
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	dc00      	bgt.n	8015f12 <_dtoa_r+0x56a>
 8015f10:	e777      	b.n	8015e02 <_dtoa_r+0x45a>
 8015f12:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015f14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015f16:	2200      	movs	r2, #0
 8015f18:	4b55      	ldr	r3, [pc, #340]	; (8016070 <_dtoa_r+0x6c8>)
 8015f1a:	f7eb ffb1 	bl	8001e80 <__aeabi_dmul>
 8015f1e:	2200      	movs	r2, #0
 8015f20:	900e      	str	r0, [sp, #56]	; 0x38
 8015f22:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f24:	9806      	ldr	r0, [sp, #24]
 8015f26:	9907      	ldr	r1, [sp, #28]
 8015f28:	4b51      	ldr	r3, [pc, #324]	; (8016070 <_dtoa_r+0x6c8>)
 8015f2a:	f7eb ffa9 	bl	8001e80 <__aeabi_dmul>
 8015f2e:	9515      	str	r5, [sp, #84]	; 0x54
 8015f30:	9006      	str	r0, [sp, #24]
 8015f32:	9107      	str	r1, [sp, #28]
 8015f34:	e7c1      	b.n	8015eba <_dtoa_r+0x512>
 8015f36:	0020      	movs	r0, r4
 8015f38:	0029      	movs	r1, r5
 8015f3a:	f7eb ffa1 	bl	8001e80 <__aeabi_dmul>
 8015f3e:	9c08      	ldr	r4, [sp, #32]
 8015f40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f42:	0023      	movs	r3, r4
 8015f44:	4694      	mov	ip, r2
 8015f46:	900e      	str	r0, [sp, #56]	; 0x38
 8015f48:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f4a:	4463      	add	r3, ip
 8015f4c:	9315      	str	r3, [sp, #84]	; 0x54
 8015f4e:	9806      	ldr	r0, [sp, #24]
 8015f50:	9907      	ldr	r1, [sp, #28]
 8015f52:	f7ec fd6b 	bl	8002a2c <__aeabi_d2iz>
 8015f56:	0005      	movs	r5, r0
 8015f58:	f7ec fd9e 	bl	8002a98 <__aeabi_i2d>
 8015f5c:	000b      	movs	r3, r1
 8015f5e:	0002      	movs	r2, r0
 8015f60:	9806      	ldr	r0, [sp, #24]
 8015f62:	9907      	ldr	r1, [sp, #28]
 8015f64:	f7ec f9fe 	bl	8002364 <__aeabi_dsub>
 8015f68:	3530      	adds	r5, #48	; 0x30
 8015f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f6c:	7025      	strb	r5, [r4, #0]
 8015f6e:	3401      	adds	r4, #1
 8015f70:	9006      	str	r0, [sp, #24]
 8015f72:	9107      	str	r1, [sp, #28]
 8015f74:	42a3      	cmp	r3, r4
 8015f76:	d12a      	bne.n	8015fce <_dtoa_r+0x626>
 8015f78:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015f7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015f7c:	9a08      	ldr	r2, [sp, #32]
 8015f7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f80:	4694      	mov	ip, r2
 8015f82:	4463      	add	r3, ip
 8015f84:	2200      	movs	r2, #0
 8015f86:	001d      	movs	r5, r3
 8015f88:	4b3f      	ldr	r3, [pc, #252]	; (8016088 <_dtoa_r+0x6e0>)
 8015f8a:	f7eb f853 	bl	8001034 <__aeabi_dadd>
 8015f8e:	0002      	movs	r2, r0
 8015f90:	000b      	movs	r3, r1
 8015f92:	9806      	ldr	r0, [sp, #24]
 8015f94:	9907      	ldr	r1, [sp, #28]
 8015f96:	f7ea fa71 	bl	800047c <__aeabi_dcmpgt>
 8015f9a:	2800      	cmp	r0, #0
 8015f9c:	d000      	beq.n	8015fa0 <_dtoa_r+0x5f8>
 8015f9e:	e076      	b.n	801608e <_dtoa_r+0x6e6>
 8015fa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015fa4:	2000      	movs	r0, #0
 8015fa6:	4938      	ldr	r1, [pc, #224]	; (8016088 <_dtoa_r+0x6e0>)
 8015fa8:	f7ec f9dc 	bl	8002364 <__aeabi_dsub>
 8015fac:	0002      	movs	r2, r0
 8015fae:	000b      	movs	r3, r1
 8015fb0:	9806      	ldr	r0, [sp, #24]
 8015fb2:	9907      	ldr	r1, [sp, #28]
 8015fb4:	f7ea fa4e 	bl	8000454 <__aeabi_dcmplt>
 8015fb8:	2800      	cmp	r0, #0
 8015fba:	d100      	bne.n	8015fbe <_dtoa_r+0x616>
 8015fbc:	e721      	b.n	8015e02 <_dtoa_r+0x45a>
 8015fbe:	1e6b      	subs	r3, r5, #1
 8015fc0:	781a      	ldrb	r2, [r3, #0]
 8015fc2:	2a30      	cmp	r2, #48	; 0x30
 8015fc4:	d001      	beq.n	8015fca <_dtoa_r+0x622>
 8015fc6:	0037      	movs	r7, r6
 8015fc8:	e03f      	b.n	801604a <_dtoa_r+0x6a2>
 8015fca:	001d      	movs	r5, r3
 8015fcc:	e7f7      	b.n	8015fbe <_dtoa_r+0x616>
 8015fce:	9806      	ldr	r0, [sp, #24]
 8015fd0:	9907      	ldr	r1, [sp, #28]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	4b26      	ldr	r3, [pc, #152]	; (8016070 <_dtoa_r+0x6c8>)
 8015fd6:	f7eb ff53 	bl	8001e80 <__aeabi_dmul>
 8015fda:	9006      	str	r0, [sp, #24]
 8015fdc:	9107      	str	r1, [sp, #28]
 8015fde:	e7b6      	b.n	8015f4e <_dtoa_r+0x5a6>
 8015fe0:	9e08      	ldr	r6, [sp, #32]
 8015fe2:	9a04      	ldr	r2, [sp, #16]
 8015fe4:	9b05      	ldr	r3, [sp, #20]
 8015fe6:	9806      	ldr	r0, [sp, #24]
 8015fe8:	9907      	ldr	r1, [sp, #28]
 8015fea:	f7eb fb3f 	bl	800166c <__aeabi_ddiv>
 8015fee:	f7ec fd1d 	bl	8002a2c <__aeabi_d2iz>
 8015ff2:	0004      	movs	r4, r0
 8015ff4:	f7ec fd50 	bl	8002a98 <__aeabi_i2d>
 8015ff8:	9a04      	ldr	r2, [sp, #16]
 8015ffa:	9b05      	ldr	r3, [sp, #20]
 8015ffc:	f7eb ff40 	bl	8001e80 <__aeabi_dmul>
 8016000:	0002      	movs	r2, r0
 8016002:	000b      	movs	r3, r1
 8016004:	9806      	ldr	r0, [sp, #24]
 8016006:	9907      	ldr	r1, [sp, #28]
 8016008:	f7ec f9ac 	bl	8002364 <__aeabi_dsub>
 801600c:	0023      	movs	r3, r4
 801600e:	3330      	adds	r3, #48	; 0x30
 8016010:	7033      	strb	r3, [r6, #0]
 8016012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016014:	9b08      	ldr	r3, [sp, #32]
 8016016:	1c75      	adds	r5, r6, #1
 8016018:	1aeb      	subs	r3, r5, r3
 801601a:	429a      	cmp	r2, r3
 801601c:	d148      	bne.n	80160b0 <_dtoa_r+0x708>
 801601e:	0002      	movs	r2, r0
 8016020:	000b      	movs	r3, r1
 8016022:	f7eb f807 	bl	8001034 <__aeabi_dadd>
 8016026:	9a04      	ldr	r2, [sp, #16]
 8016028:	9b05      	ldr	r3, [sp, #20]
 801602a:	9006      	str	r0, [sp, #24]
 801602c:	9107      	str	r1, [sp, #28]
 801602e:	f7ea fa25 	bl	800047c <__aeabi_dcmpgt>
 8016032:	2800      	cmp	r0, #0
 8016034:	d12a      	bne.n	801608c <_dtoa_r+0x6e4>
 8016036:	9a04      	ldr	r2, [sp, #16]
 8016038:	9b05      	ldr	r3, [sp, #20]
 801603a:	9806      	ldr	r0, [sp, #24]
 801603c:	9907      	ldr	r1, [sp, #28]
 801603e:	f7ea fa03 	bl	8000448 <__aeabi_dcmpeq>
 8016042:	2800      	cmp	r0, #0
 8016044:	d001      	beq.n	801604a <_dtoa_r+0x6a2>
 8016046:	07e3      	lsls	r3, r4, #31
 8016048:	d420      	bmi.n	801608c <_dtoa_r+0x6e4>
 801604a:	9903      	ldr	r1, [sp, #12]
 801604c:	9802      	ldr	r0, [sp, #8]
 801604e:	f000 fe10 	bl	8016c72 <_Bfree>
 8016052:	2300      	movs	r3, #0
 8016054:	702b      	strb	r3, [r5, #0]
 8016056:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016058:	3701      	adds	r7, #1
 801605a:	601f      	str	r7, [r3, #0]
 801605c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801605e:	2b00      	cmp	r3, #0
 8016060:	d100      	bne.n	8016064 <_dtoa_r+0x6bc>
 8016062:	e4e6      	b.n	8015a32 <_dtoa_r+0x8a>
 8016064:	601d      	str	r5, [r3, #0]
 8016066:	e4e4      	b.n	8015a32 <_dtoa_r+0x8a>
 8016068:	0801abe0 	.word	0x0801abe0
 801606c:	3ff00000 	.word	0x3ff00000
 8016070:	40240000 	.word	0x40240000
 8016074:	401c0000 	.word	0x401c0000
 8016078:	fcc00000 	.word	0xfcc00000
 801607c:	40140000 	.word	0x40140000
 8016080:	7cc00000 	.word	0x7cc00000
 8016084:	0801abb8 	.word	0x0801abb8
 8016088:	3fe00000 	.word	0x3fe00000
 801608c:	003e      	movs	r6, r7
 801608e:	1e6b      	subs	r3, r5, #1
 8016090:	781a      	ldrb	r2, [r3, #0]
 8016092:	2a39      	cmp	r2, #57	; 0x39
 8016094:	d106      	bne.n	80160a4 <_dtoa_r+0x6fc>
 8016096:	9a08      	ldr	r2, [sp, #32]
 8016098:	429a      	cmp	r2, r3
 801609a:	d107      	bne.n	80160ac <_dtoa_r+0x704>
 801609c:	2330      	movs	r3, #48	; 0x30
 801609e:	7013      	strb	r3, [r2, #0]
 80160a0:	0013      	movs	r3, r2
 80160a2:	3601      	adds	r6, #1
 80160a4:	781a      	ldrb	r2, [r3, #0]
 80160a6:	3201      	adds	r2, #1
 80160a8:	701a      	strb	r2, [r3, #0]
 80160aa:	e78c      	b.n	8015fc6 <_dtoa_r+0x61e>
 80160ac:	001d      	movs	r5, r3
 80160ae:	e7ee      	b.n	801608e <_dtoa_r+0x6e6>
 80160b0:	2200      	movs	r2, #0
 80160b2:	4ba4      	ldr	r3, [pc, #656]	; (8016344 <_dtoa_r+0x99c>)
 80160b4:	f7eb fee4 	bl	8001e80 <__aeabi_dmul>
 80160b8:	2200      	movs	r2, #0
 80160ba:	2300      	movs	r3, #0
 80160bc:	9006      	str	r0, [sp, #24]
 80160be:	9107      	str	r1, [sp, #28]
 80160c0:	002e      	movs	r6, r5
 80160c2:	f7ea f9c1 	bl	8000448 <__aeabi_dcmpeq>
 80160c6:	2800      	cmp	r0, #0
 80160c8:	d08b      	beq.n	8015fe2 <_dtoa_r+0x63a>
 80160ca:	e7be      	b.n	801604a <_dtoa_r+0x6a2>
 80160cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160ce:	2a00      	cmp	r2, #0
 80160d0:	d100      	bne.n	80160d4 <_dtoa_r+0x72c>
 80160d2:	e0da      	b.n	801628a <_dtoa_r+0x8e2>
 80160d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80160d6:	2a01      	cmp	r2, #1
 80160d8:	dd00      	ble.n	80160dc <_dtoa_r+0x734>
 80160da:	e0bd      	b.n	8016258 <_dtoa_r+0x8b0>
 80160dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80160de:	2a00      	cmp	r2, #0
 80160e0:	d100      	bne.n	80160e4 <_dtoa_r+0x73c>
 80160e2:	e0b5      	b.n	8016250 <_dtoa_r+0x8a8>
 80160e4:	4a98      	ldr	r2, [pc, #608]	; (8016348 <_dtoa_r+0x9a0>)
 80160e6:	189b      	adds	r3, r3, r2
 80160e8:	9d04      	ldr	r5, [sp, #16]
 80160ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80160ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80160ee:	2101      	movs	r1, #1
 80160f0:	18d2      	adds	r2, r2, r3
 80160f2:	920a      	str	r2, [sp, #40]	; 0x28
 80160f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80160f6:	9802      	ldr	r0, [sp, #8]
 80160f8:	18d3      	adds	r3, r2, r3
 80160fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80160fc:	f000 fe97 	bl	8016e2e <__i2b>
 8016100:	0006      	movs	r6, r0
 8016102:	2c00      	cmp	r4, #0
 8016104:	dd0e      	ble.n	8016124 <_dtoa_r+0x77c>
 8016106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016108:	2b00      	cmp	r3, #0
 801610a:	dd0b      	ble.n	8016124 <_dtoa_r+0x77c>
 801610c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801610e:	0023      	movs	r3, r4
 8016110:	4294      	cmp	r4, r2
 8016112:	dd00      	ble.n	8016116 <_dtoa_r+0x76e>
 8016114:	0013      	movs	r3, r2
 8016116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016118:	1ae4      	subs	r4, r4, r3
 801611a:	1ad2      	subs	r2, r2, r3
 801611c:	920a      	str	r2, [sp, #40]	; 0x28
 801611e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016120:	1ad3      	subs	r3, r2, r3
 8016122:	930b      	str	r3, [sp, #44]	; 0x2c
 8016124:	9b04      	ldr	r3, [sp, #16]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d01f      	beq.n	801616a <_dtoa_r+0x7c2>
 801612a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801612c:	2b00      	cmp	r3, #0
 801612e:	d100      	bne.n	8016132 <_dtoa_r+0x78a>
 8016130:	e0af      	b.n	8016292 <_dtoa_r+0x8ea>
 8016132:	2d00      	cmp	r5, #0
 8016134:	d011      	beq.n	801615a <_dtoa_r+0x7b2>
 8016136:	0031      	movs	r1, r6
 8016138:	002a      	movs	r2, r5
 801613a:	9802      	ldr	r0, [sp, #8]
 801613c:	f000 ff10 	bl	8016f60 <__pow5mult>
 8016140:	9a03      	ldr	r2, [sp, #12]
 8016142:	0001      	movs	r1, r0
 8016144:	0006      	movs	r6, r0
 8016146:	9802      	ldr	r0, [sp, #8]
 8016148:	f000 fe7a 	bl	8016e40 <__multiply>
 801614c:	9903      	ldr	r1, [sp, #12]
 801614e:	9010      	str	r0, [sp, #64]	; 0x40
 8016150:	9802      	ldr	r0, [sp, #8]
 8016152:	f000 fd8e 	bl	8016c72 <_Bfree>
 8016156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016158:	9303      	str	r3, [sp, #12]
 801615a:	9b04      	ldr	r3, [sp, #16]
 801615c:	1b5a      	subs	r2, r3, r5
 801615e:	d004      	beq.n	801616a <_dtoa_r+0x7c2>
 8016160:	9903      	ldr	r1, [sp, #12]
 8016162:	9802      	ldr	r0, [sp, #8]
 8016164:	f000 fefc 	bl	8016f60 <__pow5mult>
 8016168:	9003      	str	r0, [sp, #12]
 801616a:	2101      	movs	r1, #1
 801616c:	9802      	ldr	r0, [sp, #8]
 801616e:	f000 fe5e 	bl	8016e2e <__i2b>
 8016172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016174:	9004      	str	r0, [sp, #16]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d100      	bne.n	801617c <_dtoa_r+0x7d4>
 801617a:	e1e3      	b.n	8016544 <_dtoa_r+0xb9c>
 801617c:	001a      	movs	r2, r3
 801617e:	0001      	movs	r1, r0
 8016180:	9802      	ldr	r0, [sp, #8]
 8016182:	f000 feed 	bl	8016f60 <__pow5mult>
 8016186:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016188:	9004      	str	r0, [sp, #16]
 801618a:	2b01      	cmp	r3, #1
 801618c:	dd00      	ble.n	8016190 <_dtoa_r+0x7e8>
 801618e:	e082      	b.n	8016296 <_dtoa_r+0x8ee>
 8016190:	2500      	movs	r5, #0
 8016192:	9b06      	ldr	r3, [sp, #24]
 8016194:	42ab      	cmp	r3, r5
 8016196:	d10e      	bne.n	80161b6 <_dtoa_r+0x80e>
 8016198:	9b07      	ldr	r3, [sp, #28]
 801619a:	031b      	lsls	r3, r3, #12
 801619c:	42ab      	cmp	r3, r5
 801619e:	d10a      	bne.n	80161b6 <_dtoa_r+0x80e>
 80161a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161a2:	9a07      	ldr	r2, [sp, #28]
 80161a4:	4213      	tst	r3, r2
 80161a6:	d006      	beq.n	80161b6 <_dtoa_r+0x80e>
 80161a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161aa:	3501      	adds	r5, #1
 80161ac:	3301      	adds	r3, #1
 80161ae:	930a      	str	r3, [sp, #40]	; 0x28
 80161b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b2:	3301      	adds	r3, #1
 80161b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80161b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161b8:	2001      	movs	r0, #1
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d16c      	bne.n	8016298 <_dtoa_r+0x8f0>
 80161be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161c0:	1818      	adds	r0, r3, r0
 80161c2:	231f      	movs	r3, #31
 80161c4:	4018      	ands	r0, r3
 80161c6:	d07e      	beq.n	80162c6 <_dtoa_r+0x91e>
 80161c8:	3301      	adds	r3, #1
 80161ca:	1a1b      	subs	r3, r3, r0
 80161cc:	2b04      	cmp	r3, #4
 80161ce:	dd70      	ble.n	80162b2 <_dtoa_r+0x90a>
 80161d0:	231c      	movs	r3, #28
 80161d2:	1a18      	subs	r0, r3, r0
 80161d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161d6:	1824      	adds	r4, r4, r0
 80161d8:	181b      	adds	r3, r3, r0
 80161da:	930a      	str	r3, [sp, #40]	; 0x28
 80161dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161de:	181b      	adds	r3, r3, r0
 80161e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80161e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	dd05      	ble.n	80161f4 <_dtoa_r+0x84c>
 80161e8:	001a      	movs	r2, r3
 80161ea:	9903      	ldr	r1, [sp, #12]
 80161ec:	9802      	ldr	r0, [sp, #8]
 80161ee:	f000 ff09 	bl	8017004 <__lshift>
 80161f2:	9003      	str	r0, [sp, #12]
 80161f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	dd05      	ble.n	8016206 <_dtoa_r+0x85e>
 80161fa:	001a      	movs	r2, r3
 80161fc:	9904      	ldr	r1, [sp, #16]
 80161fe:	9802      	ldr	r0, [sp, #8]
 8016200:	f000 ff00 	bl	8017004 <__lshift>
 8016204:	9004      	str	r0, [sp, #16]
 8016206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016208:	2b00      	cmp	r3, #0
 801620a:	d05e      	beq.n	80162ca <_dtoa_r+0x922>
 801620c:	9904      	ldr	r1, [sp, #16]
 801620e:	9803      	ldr	r0, [sp, #12]
 8016210:	f000 ff4a 	bl	80170a8 <__mcmp>
 8016214:	2800      	cmp	r0, #0
 8016216:	da58      	bge.n	80162ca <_dtoa_r+0x922>
 8016218:	2300      	movs	r3, #0
 801621a:	220a      	movs	r2, #10
 801621c:	9903      	ldr	r1, [sp, #12]
 801621e:	9802      	ldr	r0, [sp, #8]
 8016220:	f000 fd40 	bl	8016ca4 <__multadd>
 8016224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016226:	3f01      	subs	r7, #1
 8016228:	9003      	str	r0, [sp, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d100      	bne.n	8016230 <_dtoa_r+0x888>
 801622e:	e190      	b.n	8016552 <_dtoa_r+0xbaa>
 8016230:	2300      	movs	r3, #0
 8016232:	0031      	movs	r1, r6
 8016234:	220a      	movs	r2, #10
 8016236:	9802      	ldr	r0, [sp, #8]
 8016238:	f000 fd34 	bl	8016ca4 <__multadd>
 801623c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801623e:	0006      	movs	r6, r0
 8016240:	2b00      	cmp	r3, #0
 8016242:	dd00      	ble.n	8016246 <_dtoa_r+0x89e>
 8016244:	e088      	b.n	8016358 <_dtoa_r+0x9b0>
 8016246:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016248:	2b02      	cmp	r3, #2
 801624a:	dc00      	bgt.n	801624e <_dtoa_r+0x8a6>
 801624c:	e084      	b.n	8016358 <_dtoa_r+0x9b0>
 801624e:	e044      	b.n	80162da <_dtoa_r+0x932>
 8016250:	2336      	movs	r3, #54	; 0x36
 8016252:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016254:	1a9b      	subs	r3, r3, r2
 8016256:	e747      	b.n	80160e8 <_dtoa_r+0x740>
 8016258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801625a:	1e5d      	subs	r5, r3, #1
 801625c:	9b04      	ldr	r3, [sp, #16]
 801625e:	42ab      	cmp	r3, r5
 8016260:	db08      	blt.n	8016274 <_dtoa_r+0x8cc>
 8016262:	1b5d      	subs	r5, r3, r5
 8016264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016266:	2b00      	cmp	r3, #0
 8016268:	da0c      	bge.n	8016284 <_dtoa_r+0x8dc>
 801626a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801626c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801626e:	1a9c      	subs	r4, r3, r2
 8016270:	2300      	movs	r3, #0
 8016272:	e73b      	b.n	80160ec <_dtoa_r+0x744>
 8016274:	9b04      	ldr	r3, [sp, #16]
 8016276:	9504      	str	r5, [sp, #16]
 8016278:	1aea      	subs	r2, r5, r3
 801627a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801627c:	2500      	movs	r5, #0
 801627e:	189b      	adds	r3, r3, r2
 8016280:	9311      	str	r3, [sp, #68]	; 0x44
 8016282:	e7ef      	b.n	8016264 <_dtoa_r+0x8bc>
 8016284:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016288:	e730      	b.n	80160ec <_dtoa_r+0x744>
 801628a:	9d04      	ldr	r5, [sp, #16]
 801628c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801628e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8016290:	e737      	b.n	8016102 <_dtoa_r+0x75a>
 8016292:	9a04      	ldr	r2, [sp, #16]
 8016294:	e764      	b.n	8016160 <_dtoa_r+0x7b8>
 8016296:	2500      	movs	r5, #0
 8016298:	9b04      	ldr	r3, [sp, #16]
 801629a:	9a04      	ldr	r2, [sp, #16]
 801629c:	691b      	ldr	r3, [r3, #16]
 801629e:	9310      	str	r3, [sp, #64]	; 0x40
 80162a0:	3303      	adds	r3, #3
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	18d3      	adds	r3, r2, r3
 80162a6:	6858      	ldr	r0, [r3, #4]
 80162a8:	f000 fd78 	bl	8016d9c <__hi0bits>
 80162ac:	2320      	movs	r3, #32
 80162ae:	1a18      	subs	r0, r3, r0
 80162b0:	e785      	b.n	80161be <_dtoa_r+0x816>
 80162b2:	2b04      	cmp	r3, #4
 80162b4:	d095      	beq.n	80161e2 <_dtoa_r+0x83a>
 80162b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162b8:	331c      	adds	r3, #28
 80162ba:	18d2      	adds	r2, r2, r3
 80162bc:	920a      	str	r2, [sp, #40]	; 0x28
 80162be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80162c0:	18e4      	adds	r4, r4, r3
 80162c2:	18d3      	adds	r3, r2, r3
 80162c4:	e78c      	b.n	80161e0 <_dtoa_r+0x838>
 80162c6:	0003      	movs	r3, r0
 80162c8:	e7f5      	b.n	80162b6 <_dtoa_r+0x90e>
 80162ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	dc3d      	bgt.n	801634c <_dtoa_r+0x9a4>
 80162d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80162d2:	2b02      	cmp	r3, #2
 80162d4:	dd3a      	ble.n	801634c <_dtoa_r+0x9a4>
 80162d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162d8:	930c      	str	r3, [sp, #48]	; 0x30
 80162da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d10c      	bne.n	80162fa <_dtoa_r+0x952>
 80162e0:	9904      	ldr	r1, [sp, #16]
 80162e2:	2205      	movs	r2, #5
 80162e4:	9802      	ldr	r0, [sp, #8]
 80162e6:	f000 fcdd 	bl	8016ca4 <__multadd>
 80162ea:	9004      	str	r0, [sp, #16]
 80162ec:	0001      	movs	r1, r0
 80162ee:	9803      	ldr	r0, [sp, #12]
 80162f0:	f000 feda 	bl	80170a8 <__mcmp>
 80162f4:	2800      	cmp	r0, #0
 80162f6:	dd00      	ble.n	80162fa <_dtoa_r+0x952>
 80162f8:	e5af      	b.n	8015e5a <_dtoa_r+0x4b2>
 80162fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80162fc:	9d08      	ldr	r5, [sp, #32]
 80162fe:	43df      	mvns	r7, r3
 8016300:	2300      	movs	r3, #0
 8016302:	9309      	str	r3, [sp, #36]	; 0x24
 8016304:	9904      	ldr	r1, [sp, #16]
 8016306:	9802      	ldr	r0, [sp, #8]
 8016308:	f000 fcb3 	bl	8016c72 <_Bfree>
 801630c:	2e00      	cmp	r6, #0
 801630e:	d100      	bne.n	8016312 <_dtoa_r+0x96a>
 8016310:	e69b      	b.n	801604a <_dtoa_r+0x6a2>
 8016312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016314:	2b00      	cmp	r3, #0
 8016316:	d005      	beq.n	8016324 <_dtoa_r+0x97c>
 8016318:	42b3      	cmp	r3, r6
 801631a:	d003      	beq.n	8016324 <_dtoa_r+0x97c>
 801631c:	0019      	movs	r1, r3
 801631e:	9802      	ldr	r0, [sp, #8]
 8016320:	f000 fca7 	bl	8016c72 <_Bfree>
 8016324:	0031      	movs	r1, r6
 8016326:	9802      	ldr	r0, [sp, #8]
 8016328:	f000 fca3 	bl	8016c72 <_Bfree>
 801632c:	e68d      	b.n	801604a <_dtoa_r+0x6a2>
 801632e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016330:	9304      	str	r3, [sp, #16]
 8016332:	001e      	movs	r6, r3
 8016334:	e7e1      	b.n	80162fa <_dtoa_r+0x952>
 8016336:	2300      	movs	r3, #0
 8016338:	e7fa      	b.n	8016330 <_dtoa_r+0x988>
 801633a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801633c:	0037      	movs	r7, r6
 801633e:	9304      	str	r3, [sp, #16]
 8016340:	001e      	movs	r6, r3
 8016342:	e58a      	b.n	8015e5a <_dtoa_r+0x4b2>
 8016344:	40240000 	.word	0x40240000
 8016348:	00000433 	.word	0x00000433
 801634c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801634e:	2b00      	cmp	r3, #0
 8016350:	d100      	bne.n	8016354 <_dtoa_r+0x9ac>
 8016352:	e0b2      	b.n	80164ba <_dtoa_r+0xb12>
 8016354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016356:	930c      	str	r3, [sp, #48]	; 0x30
 8016358:	2c00      	cmp	r4, #0
 801635a:	dd05      	ble.n	8016368 <_dtoa_r+0x9c0>
 801635c:	0031      	movs	r1, r6
 801635e:	0022      	movs	r2, r4
 8016360:	9802      	ldr	r0, [sp, #8]
 8016362:	f000 fe4f 	bl	8017004 <__lshift>
 8016366:	0006      	movs	r6, r0
 8016368:	0030      	movs	r0, r6
 801636a:	2d00      	cmp	r5, #0
 801636c:	d011      	beq.n	8016392 <_dtoa_r+0x9ea>
 801636e:	6871      	ldr	r1, [r6, #4]
 8016370:	9802      	ldr	r0, [sp, #8]
 8016372:	f000 fc46 	bl	8016c02 <_Balloc>
 8016376:	0031      	movs	r1, r6
 8016378:	0004      	movs	r4, r0
 801637a:	6933      	ldr	r3, [r6, #16]
 801637c:	310c      	adds	r1, #12
 801637e:	1c9a      	adds	r2, r3, #2
 8016380:	0092      	lsls	r2, r2, #2
 8016382:	300c      	adds	r0, #12
 8016384:	f7fd fb51 	bl	8013a2a <memcpy>
 8016388:	2201      	movs	r2, #1
 801638a:	0021      	movs	r1, r4
 801638c:	9802      	ldr	r0, [sp, #8]
 801638e:	f000 fe39 	bl	8017004 <__lshift>
 8016392:	9609      	str	r6, [sp, #36]	; 0x24
 8016394:	0006      	movs	r6, r0
 8016396:	9b08      	ldr	r3, [sp, #32]
 8016398:	930a      	str	r3, [sp, #40]	; 0x28
 801639a:	9904      	ldr	r1, [sp, #16]
 801639c:	9803      	ldr	r0, [sp, #12]
 801639e:	f7ff fa7d 	bl	801589c <quorem>
 80163a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163a4:	900d      	str	r0, [sp, #52]	; 0x34
 80163a6:	0004      	movs	r4, r0
 80163a8:	9803      	ldr	r0, [sp, #12]
 80163aa:	f000 fe7d 	bl	80170a8 <__mcmp>
 80163ae:	0032      	movs	r2, r6
 80163b0:	9010      	str	r0, [sp, #64]	; 0x40
 80163b2:	9904      	ldr	r1, [sp, #16]
 80163b4:	9802      	ldr	r0, [sp, #8]
 80163b6:	f000 fe91 	bl	80170dc <__mdiff>
 80163ba:	2301      	movs	r3, #1
 80163bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80163be:	68c3      	ldr	r3, [r0, #12]
 80163c0:	3430      	adds	r4, #48	; 0x30
 80163c2:	0005      	movs	r5, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d104      	bne.n	80163d2 <_dtoa_r+0xa2a>
 80163c8:	0001      	movs	r1, r0
 80163ca:	9803      	ldr	r0, [sp, #12]
 80163cc:	f000 fe6c 	bl	80170a8 <__mcmp>
 80163d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80163d2:	0029      	movs	r1, r5
 80163d4:	9802      	ldr	r0, [sp, #8]
 80163d6:	f000 fc4c 	bl	8016c72 <_Bfree>
 80163da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80163de:	4313      	orrs	r3, r2
 80163e0:	d10e      	bne.n	8016400 <_dtoa_r+0xa58>
 80163e2:	9a06      	ldr	r2, [sp, #24]
 80163e4:	3301      	adds	r3, #1
 80163e6:	4213      	tst	r3, r2
 80163e8:	d10a      	bne.n	8016400 <_dtoa_r+0xa58>
 80163ea:	2c39      	cmp	r4, #57	; 0x39
 80163ec:	d026      	beq.n	801643c <_dtoa_r+0xa94>
 80163ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	dd01      	ble.n	80163f8 <_dtoa_r+0xa50>
 80163f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80163f6:	3431      	adds	r4, #49	; 0x31
 80163f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163fa:	1c5d      	adds	r5, r3, #1
 80163fc:	701c      	strb	r4, [r3, #0]
 80163fe:	e781      	b.n	8016304 <_dtoa_r+0x95c>
 8016400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016402:	2b00      	cmp	r3, #0
 8016404:	db07      	blt.n	8016416 <_dtoa_r+0xa6e>
 8016406:	001d      	movs	r5, r3
 8016408:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801640a:	431d      	orrs	r5, r3
 801640c:	d122      	bne.n	8016454 <_dtoa_r+0xaac>
 801640e:	2301      	movs	r3, #1
 8016410:	9a06      	ldr	r2, [sp, #24]
 8016412:	4213      	tst	r3, r2
 8016414:	d11e      	bne.n	8016454 <_dtoa_r+0xaac>
 8016416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016418:	2b00      	cmp	r3, #0
 801641a:	dded      	ble.n	80163f8 <_dtoa_r+0xa50>
 801641c:	9903      	ldr	r1, [sp, #12]
 801641e:	2201      	movs	r2, #1
 8016420:	9802      	ldr	r0, [sp, #8]
 8016422:	f000 fdef 	bl	8017004 <__lshift>
 8016426:	9904      	ldr	r1, [sp, #16]
 8016428:	9003      	str	r0, [sp, #12]
 801642a:	f000 fe3d 	bl	80170a8 <__mcmp>
 801642e:	2800      	cmp	r0, #0
 8016430:	dc02      	bgt.n	8016438 <_dtoa_r+0xa90>
 8016432:	d1e1      	bne.n	80163f8 <_dtoa_r+0xa50>
 8016434:	07e3      	lsls	r3, r4, #31
 8016436:	d5df      	bpl.n	80163f8 <_dtoa_r+0xa50>
 8016438:	2c39      	cmp	r4, #57	; 0x39
 801643a:	d1db      	bne.n	80163f4 <_dtoa_r+0xa4c>
 801643c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801643e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016440:	1c5d      	adds	r5, r3, #1
 8016442:	2339      	movs	r3, #57	; 0x39
 8016444:	7013      	strb	r3, [r2, #0]
 8016446:	1e6b      	subs	r3, r5, #1
 8016448:	781a      	ldrb	r2, [r3, #0]
 801644a:	2a39      	cmp	r2, #57	; 0x39
 801644c:	d067      	beq.n	801651e <_dtoa_r+0xb76>
 801644e:	3201      	adds	r2, #1
 8016450:	701a      	strb	r2, [r3, #0]
 8016452:	e757      	b.n	8016304 <_dtoa_r+0x95c>
 8016454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016456:	1c5d      	adds	r5, r3, #1
 8016458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801645a:	2b00      	cmp	r3, #0
 801645c:	dd04      	ble.n	8016468 <_dtoa_r+0xac0>
 801645e:	2c39      	cmp	r4, #57	; 0x39
 8016460:	d0ec      	beq.n	801643c <_dtoa_r+0xa94>
 8016462:	3401      	adds	r4, #1
 8016464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016466:	e7c9      	b.n	80163fc <_dtoa_r+0xa54>
 8016468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801646a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801646c:	701c      	strb	r4, [r3, #0]
 801646e:	9b08      	ldr	r3, [sp, #32]
 8016470:	1aeb      	subs	r3, r5, r3
 8016472:	4293      	cmp	r3, r2
 8016474:	d03e      	beq.n	80164f4 <_dtoa_r+0xb4c>
 8016476:	2300      	movs	r3, #0
 8016478:	220a      	movs	r2, #10
 801647a:	9903      	ldr	r1, [sp, #12]
 801647c:	9802      	ldr	r0, [sp, #8]
 801647e:	f000 fc11 	bl	8016ca4 <__multadd>
 8016482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016484:	9003      	str	r0, [sp, #12]
 8016486:	42b3      	cmp	r3, r6
 8016488:	d109      	bne.n	801649e <_dtoa_r+0xaf6>
 801648a:	2300      	movs	r3, #0
 801648c:	220a      	movs	r2, #10
 801648e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016490:	9802      	ldr	r0, [sp, #8]
 8016492:	f000 fc07 	bl	8016ca4 <__multadd>
 8016496:	9009      	str	r0, [sp, #36]	; 0x24
 8016498:	0006      	movs	r6, r0
 801649a:	950a      	str	r5, [sp, #40]	; 0x28
 801649c:	e77d      	b.n	801639a <_dtoa_r+0x9f2>
 801649e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164a0:	2300      	movs	r3, #0
 80164a2:	220a      	movs	r2, #10
 80164a4:	9802      	ldr	r0, [sp, #8]
 80164a6:	f000 fbfd 	bl	8016ca4 <__multadd>
 80164aa:	2300      	movs	r3, #0
 80164ac:	9009      	str	r0, [sp, #36]	; 0x24
 80164ae:	220a      	movs	r2, #10
 80164b0:	0031      	movs	r1, r6
 80164b2:	9802      	ldr	r0, [sp, #8]
 80164b4:	f000 fbf6 	bl	8016ca4 <__multadd>
 80164b8:	e7ee      	b.n	8016498 <_dtoa_r+0xaf0>
 80164ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164bc:	930c      	str	r3, [sp, #48]	; 0x30
 80164be:	9b08      	ldr	r3, [sp, #32]
 80164c0:	9306      	str	r3, [sp, #24]
 80164c2:	9904      	ldr	r1, [sp, #16]
 80164c4:	9803      	ldr	r0, [sp, #12]
 80164c6:	f7ff f9e9 	bl	801589c <quorem>
 80164ca:	9b06      	ldr	r3, [sp, #24]
 80164cc:	3030      	adds	r0, #48	; 0x30
 80164ce:	1c5d      	adds	r5, r3, #1
 80164d0:	7018      	strb	r0, [r3, #0]
 80164d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80164d4:	9b08      	ldr	r3, [sp, #32]
 80164d6:	0004      	movs	r4, r0
 80164d8:	1aeb      	subs	r3, r5, r3
 80164da:	429a      	cmp	r2, r3
 80164dc:	dd08      	ble.n	80164f0 <_dtoa_r+0xb48>
 80164de:	2300      	movs	r3, #0
 80164e0:	220a      	movs	r2, #10
 80164e2:	9903      	ldr	r1, [sp, #12]
 80164e4:	9802      	ldr	r0, [sp, #8]
 80164e6:	f000 fbdd 	bl	8016ca4 <__multadd>
 80164ea:	9506      	str	r5, [sp, #24]
 80164ec:	9003      	str	r0, [sp, #12]
 80164ee:	e7e8      	b.n	80164c2 <_dtoa_r+0xb1a>
 80164f0:	2300      	movs	r3, #0
 80164f2:	9309      	str	r3, [sp, #36]	; 0x24
 80164f4:	9903      	ldr	r1, [sp, #12]
 80164f6:	2201      	movs	r2, #1
 80164f8:	9802      	ldr	r0, [sp, #8]
 80164fa:	f000 fd83 	bl	8017004 <__lshift>
 80164fe:	9904      	ldr	r1, [sp, #16]
 8016500:	9003      	str	r0, [sp, #12]
 8016502:	f000 fdd1 	bl	80170a8 <__mcmp>
 8016506:	2800      	cmp	r0, #0
 8016508:	dc9d      	bgt.n	8016446 <_dtoa_r+0xa9e>
 801650a:	d101      	bne.n	8016510 <_dtoa_r+0xb68>
 801650c:	07e3      	lsls	r3, r4, #31
 801650e:	d49a      	bmi.n	8016446 <_dtoa_r+0xa9e>
 8016510:	1e6b      	subs	r3, r5, #1
 8016512:	781a      	ldrb	r2, [r3, #0]
 8016514:	2a30      	cmp	r2, #48	; 0x30
 8016516:	d000      	beq.n	801651a <_dtoa_r+0xb72>
 8016518:	e6f4      	b.n	8016304 <_dtoa_r+0x95c>
 801651a:	001d      	movs	r5, r3
 801651c:	e7f8      	b.n	8016510 <_dtoa_r+0xb68>
 801651e:	9a08      	ldr	r2, [sp, #32]
 8016520:	429a      	cmp	r2, r3
 8016522:	d103      	bne.n	801652c <_dtoa_r+0xb84>
 8016524:	2331      	movs	r3, #49	; 0x31
 8016526:	3701      	adds	r7, #1
 8016528:	7013      	strb	r3, [r2, #0]
 801652a:	e6eb      	b.n	8016304 <_dtoa_r+0x95c>
 801652c:	001d      	movs	r5, r3
 801652e:	e78a      	b.n	8016446 <_dtoa_r+0xa9e>
 8016530:	4b0b      	ldr	r3, [pc, #44]	; (8016560 <_dtoa_r+0xbb8>)
 8016532:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016534:	9308      	str	r3, [sp, #32]
 8016536:	4b0b      	ldr	r3, [pc, #44]	; (8016564 <_dtoa_r+0xbbc>)
 8016538:	2a00      	cmp	r2, #0
 801653a:	d001      	beq.n	8016540 <_dtoa_r+0xb98>
 801653c:	f7ff fa77 	bl	8015a2e <_dtoa_r+0x86>
 8016540:	f7ff fa77 	bl	8015a32 <_dtoa_r+0x8a>
 8016544:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016546:	2b01      	cmp	r3, #1
 8016548:	dc00      	bgt.n	801654c <_dtoa_r+0xba4>
 801654a:	e621      	b.n	8016190 <_dtoa_r+0x7e8>
 801654c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801654e:	2001      	movs	r0, #1
 8016550:	e635      	b.n	80161be <_dtoa_r+0x816>
 8016552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016554:	2b00      	cmp	r3, #0
 8016556:	dcb2      	bgt.n	80164be <_dtoa_r+0xb16>
 8016558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801655a:	2b02      	cmp	r3, #2
 801655c:	ddaf      	ble.n	80164be <_dtoa_r+0xb16>
 801655e:	e6bc      	b.n	80162da <_dtoa_r+0x932>
 8016560:	0801aba9 	.word	0x0801aba9
 8016564:	0801abb1 	.word	0x0801abb1

08016568 <rshift>:
 8016568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801656a:	0004      	movs	r4, r0
 801656c:	6905      	ldr	r5, [r0, #16]
 801656e:	3414      	adds	r4, #20
 8016570:	114b      	asrs	r3, r1, #5
 8016572:	0026      	movs	r6, r4
 8016574:	429d      	cmp	r5, r3
 8016576:	dd14      	ble.n	80165a2 <rshift+0x3a>
 8016578:	221f      	movs	r2, #31
 801657a:	00ad      	lsls	r5, r5, #2
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	4011      	ands	r1, r2
 8016580:	1965      	adds	r5, r4, r5
 8016582:	18e3      	adds	r3, r4, r3
 8016584:	0022      	movs	r2, r4
 8016586:	2900      	cmp	r1, #0
 8016588:	d01e      	beq.n	80165c8 <rshift+0x60>
 801658a:	cb04      	ldmia	r3!, {r2}
 801658c:	2720      	movs	r7, #32
 801658e:	40ca      	lsrs	r2, r1
 8016590:	46a4      	mov	ip, r4
 8016592:	1a7f      	subs	r7, r7, r1
 8016594:	4666      	mov	r6, ip
 8016596:	429d      	cmp	r5, r3
 8016598:	d80b      	bhi.n	80165b2 <rshift+0x4a>
 801659a:	6032      	str	r2, [r6, #0]
 801659c:	2a00      	cmp	r2, #0
 801659e:	d000      	beq.n	80165a2 <rshift+0x3a>
 80165a0:	3604      	adds	r6, #4
 80165a2:	1b33      	subs	r3, r6, r4
 80165a4:	109b      	asrs	r3, r3, #2
 80165a6:	6103      	str	r3, [r0, #16]
 80165a8:	42a6      	cmp	r6, r4
 80165aa:	d101      	bne.n	80165b0 <rshift+0x48>
 80165ac:	2300      	movs	r3, #0
 80165ae:	6143      	str	r3, [r0, #20]
 80165b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165b2:	681e      	ldr	r6, [r3, #0]
 80165b4:	40be      	lsls	r6, r7
 80165b6:	4332      	orrs	r2, r6
 80165b8:	4666      	mov	r6, ip
 80165ba:	c604      	stmia	r6!, {r2}
 80165bc:	cb04      	ldmia	r3!, {r2}
 80165be:	46b4      	mov	ip, r6
 80165c0:	40ca      	lsrs	r2, r1
 80165c2:	e7e7      	b.n	8016594 <rshift+0x2c>
 80165c4:	cb02      	ldmia	r3!, {r1}
 80165c6:	c202      	stmia	r2!, {r1}
 80165c8:	0016      	movs	r6, r2
 80165ca:	429d      	cmp	r5, r3
 80165cc:	d8fa      	bhi.n	80165c4 <rshift+0x5c>
 80165ce:	e7e8      	b.n	80165a2 <rshift+0x3a>

080165d0 <__hexdig_fun>:
 80165d0:	0003      	movs	r3, r0
 80165d2:	3b30      	subs	r3, #48	; 0x30
 80165d4:	2b09      	cmp	r3, #9
 80165d6:	d803      	bhi.n	80165e0 <__hexdig_fun+0x10>
 80165d8:	3820      	subs	r0, #32
 80165da:	b2c3      	uxtb	r3, r0
 80165dc:	0018      	movs	r0, r3
 80165de:	4770      	bx	lr
 80165e0:	0003      	movs	r3, r0
 80165e2:	3b61      	subs	r3, #97	; 0x61
 80165e4:	2b05      	cmp	r3, #5
 80165e6:	d801      	bhi.n	80165ec <__hexdig_fun+0x1c>
 80165e8:	3847      	subs	r0, #71	; 0x47
 80165ea:	e7f6      	b.n	80165da <__hexdig_fun+0xa>
 80165ec:	0002      	movs	r2, r0
 80165ee:	3a41      	subs	r2, #65	; 0x41
 80165f0:	2300      	movs	r3, #0
 80165f2:	2a05      	cmp	r2, #5
 80165f4:	d8f2      	bhi.n	80165dc <__hexdig_fun+0xc>
 80165f6:	3827      	subs	r0, #39	; 0x27
 80165f8:	e7ef      	b.n	80165da <__hexdig_fun+0xa>

080165fa <__gethex>:
 80165fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165fc:	b08d      	sub	sp, #52	; 0x34
 80165fe:	9005      	str	r0, [sp, #20]
 8016600:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016602:	9109      	str	r1, [sp, #36]	; 0x24
 8016604:	9202      	str	r2, [sp, #8]
 8016606:	930a      	str	r3, [sp, #40]	; 0x28
 8016608:	f000 fadf 	bl	8016bca <__localeconv_l>
 801660c:	6803      	ldr	r3, [r0, #0]
 801660e:	0018      	movs	r0, r3
 8016610:	9307      	str	r3, [sp, #28]
 8016612:	f7e9 fd81 	bl	8000118 <strlen>
 8016616:	2202      	movs	r2, #2
 8016618:	9b07      	ldr	r3, [sp, #28]
 801661a:	4252      	negs	r2, r2
 801661c:	181b      	adds	r3, r3, r0
 801661e:	3b01      	subs	r3, #1
 8016620:	781b      	ldrb	r3, [r3, #0]
 8016622:	9004      	str	r0, [sp, #16]
 8016624:	930b      	str	r3, [sp, #44]	; 0x2c
 8016626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016628:	6819      	ldr	r1, [r3, #0]
 801662a:	1c8b      	adds	r3, r1, #2
 801662c:	1a52      	subs	r2, r2, r1
 801662e:	18d1      	adds	r1, r2, r3
 8016630:	9301      	str	r3, [sp, #4]
 8016632:	9108      	str	r1, [sp, #32]
 8016634:	9901      	ldr	r1, [sp, #4]
 8016636:	3301      	adds	r3, #1
 8016638:	7808      	ldrb	r0, [r1, #0]
 801663a:	2830      	cmp	r0, #48	; 0x30
 801663c:	d0f7      	beq.n	801662e <__gethex+0x34>
 801663e:	f7ff ffc7 	bl	80165d0 <__hexdig_fun>
 8016642:	1e07      	subs	r7, r0, #0
 8016644:	d000      	beq.n	8016648 <__gethex+0x4e>
 8016646:	e06f      	b.n	8016728 <__gethex+0x12e>
 8016648:	9a04      	ldr	r2, [sp, #16]
 801664a:	9907      	ldr	r1, [sp, #28]
 801664c:	9801      	ldr	r0, [sp, #4]
 801664e:	f7fe f997 	bl	8014980 <strncmp>
 8016652:	2800      	cmp	r0, #0
 8016654:	d000      	beq.n	8016658 <__gethex+0x5e>
 8016656:	e06d      	b.n	8016734 <__gethex+0x13a>
 8016658:	9b01      	ldr	r3, [sp, #4]
 801665a:	9a04      	ldr	r2, [sp, #16]
 801665c:	189c      	adds	r4, r3, r2
 801665e:	7820      	ldrb	r0, [r4, #0]
 8016660:	f7ff ffb6 	bl	80165d0 <__hexdig_fun>
 8016664:	2800      	cmp	r0, #0
 8016666:	d069      	beq.n	801673c <__gethex+0x142>
 8016668:	9401      	str	r4, [sp, #4]
 801666a:	9b01      	ldr	r3, [sp, #4]
 801666c:	7818      	ldrb	r0, [r3, #0]
 801666e:	2830      	cmp	r0, #48	; 0x30
 8016670:	d009      	beq.n	8016686 <__gethex+0x8c>
 8016672:	f7ff ffad 	bl	80165d0 <__hexdig_fun>
 8016676:	4243      	negs	r3, r0
 8016678:	4143      	adcs	r3, r0
 801667a:	9303      	str	r3, [sp, #12]
 801667c:	2301      	movs	r3, #1
 801667e:	0026      	movs	r6, r4
 8016680:	9308      	str	r3, [sp, #32]
 8016682:	9c01      	ldr	r4, [sp, #4]
 8016684:	e004      	b.n	8016690 <__gethex+0x96>
 8016686:	9b01      	ldr	r3, [sp, #4]
 8016688:	3301      	adds	r3, #1
 801668a:	9301      	str	r3, [sp, #4]
 801668c:	e7ed      	b.n	801666a <__gethex+0x70>
 801668e:	3401      	adds	r4, #1
 8016690:	7820      	ldrb	r0, [r4, #0]
 8016692:	f7ff ff9d 	bl	80165d0 <__hexdig_fun>
 8016696:	2800      	cmp	r0, #0
 8016698:	d1f9      	bne.n	801668e <__gethex+0x94>
 801669a:	9a04      	ldr	r2, [sp, #16]
 801669c:	9907      	ldr	r1, [sp, #28]
 801669e:	0020      	movs	r0, r4
 80166a0:	f7fe f96e 	bl	8014980 <strncmp>
 80166a4:	2800      	cmp	r0, #0
 80166a6:	d109      	bne.n	80166bc <__gethex+0xc2>
 80166a8:	2e00      	cmp	r6, #0
 80166aa:	d10a      	bne.n	80166c2 <__gethex+0xc8>
 80166ac:	9b04      	ldr	r3, [sp, #16]
 80166ae:	18e4      	adds	r4, r4, r3
 80166b0:	0026      	movs	r6, r4
 80166b2:	7820      	ldrb	r0, [r4, #0]
 80166b4:	f7ff ff8c 	bl	80165d0 <__hexdig_fun>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	d139      	bne.n	8016730 <__gethex+0x136>
 80166bc:	2700      	movs	r7, #0
 80166be:	42be      	cmp	r6, r7
 80166c0:	d001      	beq.n	80166c6 <__gethex+0xcc>
 80166c2:	1b37      	subs	r7, r6, r4
 80166c4:	00bf      	lsls	r7, r7, #2
 80166c6:	7823      	ldrb	r3, [r4, #0]
 80166c8:	2b50      	cmp	r3, #80	; 0x50
 80166ca:	d001      	beq.n	80166d0 <__gethex+0xd6>
 80166cc:	2b70      	cmp	r3, #112	; 0x70
 80166ce:	d142      	bne.n	8016756 <__gethex+0x15c>
 80166d0:	7863      	ldrb	r3, [r4, #1]
 80166d2:	2b2b      	cmp	r3, #43	; 0x2b
 80166d4:	d034      	beq.n	8016740 <__gethex+0x146>
 80166d6:	2b2d      	cmp	r3, #45	; 0x2d
 80166d8:	d036      	beq.n	8016748 <__gethex+0x14e>
 80166da:	2300      	movs	r3, #0
 80166dc:	1c66      	adds	r6, r4, #1
 80166de:	9306      	str	r3, [sp, #24]
 80166e0:	7830      	ldrb	r0, [r6, #0]
 80166e2:	f7ff ff75 	bl	80165d0 <__hexdig_fun>
 80166e6:	1e43      	subs	r3, r0, #1
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	2b18      	cmp	r3, #24
 80166ec:	d833      	bhi.n	8016756 <__gethex+0x15c>
 80166ee:	3810      	subs	r0, #16
 80166f0:	0005      	movs	r5, r0
 80166f2:	3601      	adds	r6, #1
 80166f4:	7830      	ldrb	r0, [r6, #0]
 80166f6:	f7ff ff6b 	bl	80165d0 <__hexdig_fun>
 80166fa:	1e43      	subs	r3, r0, #1
 80166fc:	b2db      	uxtb	r3, r3
 80166fe:	2b18      	cmp	r3, #24
 8016700:	d924      	bls.n	801674c <__gethex+0x152>
 8016702:	9b06      	ldr	r3, [sp, #24]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d000      	beq.n	801670a <__gethex+0x110>
 8016708:	426d      	negs	r5, r5
 801670a:	197f      	adds	r7, r7, r5
 801670c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801670e:	601e      	str	r6, [r3, #0]
 8016710:	9b03      	ldr	r3, [sp, #12]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d021      	beq.n	801675a <__gethex+0x160>
 8016716:	9b08      	ldr	r3, [sp, #32]
 8016718:	2606      	movs	r6, #6
 801671a:	425a      	negs	r2, r3
 801671c:	4153      	adcs	r3, r2
 801671e:	425b      	negs	r3, r3
 8016720:	401e      	ands	r6, r3
 8016722:	0030      	movs	r0, r6
 8016724:	b00d      	add	sp, #52	; 0x34
 8016726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016728:	2300      	movs	r3, #0
 801672a:	9303      	str	r3, [sp, #12]
 801672c:	001e      	movs	r6, r3
 801672e:	e7a8      	b.n	8016682 <__gethex+0x88>
 8016730:	3401      	adds	r4, #1
 8016732:	e7be      	b.n	80166b2 <__gethex+0xb8>
 8016734:	9c01      	ldr	r4, [sp, #4]
 8016736:	2301      	movs	r3, #1
 8016738:	9303      	str	r3, [sp, #12]
 801673a:	e7c4      	b.n	80166c6 <__gethex+0xcc>
 801673c:	0007      	movs	r7, r0
 801673e:	e7fa      	b.n	8016736 <__gethex+0x13c>
 8016740:	2300      	movs	r3, #0
 8016742:	9306      	str	r3, [sp, #24]
 8016744:	1ca6      	adds	r6, r4, #2
 8016746:	e7cb      	b.n	80166e0 <__gethex+0xe6>
 8016748:	2301      	movs	r3, #1
 801674a:	e7fa      	b.n	8016742 <__gethex+0x148>
 801674c:	230a      	movs	r3, #10
 801674e:	435d      	muls	r5, r3
 8016750:	182d      	adds	r5, r5, r0
 8016752:	3d10      	subs	r5, #16
 8016754:	e7cd      	b.n	80166f2 <__gethex+0xf8>
 8016756:	0026      	movs	r6, r4
 8016758:	e7d8      	b.n	801670c <__gethex+0x112>
 801675a:	9b01      	ldr	r3, [sp, #4]
 801675c:	9903      	ldr	r1, [sp, #12]
 801675e:	1ae3      	subs	r3, r4, r3
 8016760:	3b01      	subs	r3, #1
 8016762:	2b07      	cmp	r3, #7
 8016764:	dc47      	bgt.n	80167f6 <__gethex+0x1fc>
 8016766:	9805      	ldr	r0, [sp, #20]
 8016768:	f000 fa4b 	bl	8016c02 <_Balloc>
 801676c:	0003      	movs	r3, r0
 801676e:	3314      	adds	r3, #20
 8016770:	9303      	str	r3, [sp, #12]
 8016772:	9308      	str	r3, [sp, #32]
 8016774:	2300      	movs	r3, #0
 8016776:	0005      	movs	r5, r0
 8016778:	001e      	movs	r6, r3
 801677a:	9306      	str	r3, [sp, #24]
 801677c:	9b01      	ldr	r3, [sp, #4]
 801677e:	42a3      	cmp	r3, r4
 8016780:	d33c      	bcc.n	80167fc <__gethex+0x202>
 8016782:	9c08      	ldr	r4, [sp, #32]
 8016784:	9b03      	ldr	r3, [sp, #12]
 8016786:	c440      	stmia	r4!, {r6}
 8016788:	1ae4      	subs	r4, r4, r3
 801678a:	10a4      	asrs	r4, r4, #2
 801678c:	612c      	str	r4, [r5, #16]
 801678e:	0030      	movs	r0, r6
 8016790:	f000 fb04 	bl	8016d9c <__hi0bits>
 8016794:	9b02      	ldr	r3, [sp, #8]
 8016796:	0164      	lsls	r4, r4, #5
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	1a26      	subs	r6, r4, r0
 801679c:	9301      	str	r3, [sp, #4]
 801679e:	429e      	cmp	r6, r3
 80167a0:	dd5f      	ble.n	8016862 <__gethex+0x268>
 80167a2:	1af6      	subs	r6, r6, r3
 80167a4:	0031      	movs	r1, r6
 80167a6:	0028      	movs	r0, r5
 80167a8:	f000 fdff 	bl	80173aa <__any_on>
 80167ac:	1e04      	subs	r4, r0, #0
 80167ae:	d00f      	beq.n	80167d0 <__gethex+0x1d6>
 80167b0:	2401      	movs	r4, #1
 80167b2:	211f      	movs	r1, #31
 80167b4:	0020      	movs	r0, r4
 80167b6:	1e73      	subs	r3, r6, #1
 80167b8:	4019      	ands	r1, r3
 80167ba:	4088      	lsls	r0, r1
 80167bc:	0001      	movs	r1, r0
 80167be:	115a      	asrs	r2, r3, #5
 80167c0:	9803      	ldr	r0, [sp, #12]
 80167c2:	0092      	lsls	r2, r2, #2
 80167c4:	5812      	ldr	r2, [r2, r0]
 80167c6:	420a      	tst	r2, r1
 80167c8:	d002      	beq.n	80167d0 <__gethex+0x1d6>
 80167ca:	42a3      	cmp	r3, r4
 80167cc:	dc41      	bgt.n	8016852 <__gethex+0x258>
 80167ce:	2402      	movs	r4, #2
 80167d0:	0031      	movs	r1, r6
 80167d2:	0028      	movs	r0, r5
 80167d4:	f7ff fec8 	bl	8016568 <rshift>
 80167d8:	19bf      	adds	r7, r7, r6
 80167da:	9b02      	ldr	r3, [sp, #8]
 80167dc:	689b      	ldr	r3, [r3, #8]
 80167de:	9304      	str	r3, [sp, #16]
 80167e0:	42bb      	cmp	r3, r7
 80167e2:	da4e      	bge.n	8016882 <__gethex+0x288>
 80167e4:	0029      	movs	r1, r5
 80167e6:	9805      	ldr	r0, [sp, #20]
 80167e8:	f000 fa43 	bl	8016c72 <_Bfree>
 80167ec:	2300      	movs	r3, #0
 80167ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167f0:	26a3      	movs	r6, #163	; 0xa3
 80167f2:	6013      	str	r3, [r2, #0]
 80167f4:	e795      	b.n	8016722 <__gethex+0x128>
 80167f6:	3101      	adds	r1, #1
 80167f8:	105b      	asrs	r3, r3, #1
 80167fa:	e7b2      	b.n	8016762 <__gethex+0x168>
 80167fc:	1e63      	subs	r3, r4, #1
 80167fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	4293      	cmp	r3, r2
 8016806:	d015      	beq.n	8016834 <__gethex+0x23a>
 8016808:	9b06      	ldr	r3, [sp, #24]
 801680a:	2b20      	cmp	r3, #32
 801680c:	d105      	bne.n	801681a <__gethex+0x220>
 801680e:	9b08      	ldr	r3, [sp, #32]
 8016810:	601e      	str	r6, [r3, #0]
 8016812:	2600      	movs	r6, #0
 8016814:	3304      	adds	r3, #4
 8016816:	9308      	str	r3, [sp, #32]
 8016818:	9606      	str	r6, [sp, #24]
 801681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801681c:	7818      	ldrb	r0, [r3, #0]
 801681e:	f7ff fed7 	bl	80165d0 <__hexdig_fun>
 8016822:	230f      	movs	r3, #15
 8016824:	4018      	ands	r0, r3
 8016826:	9b06      	ldr	r3, [sp, #24]
 8016828:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801682a:	4098      	lsls	r0, r3
 801682c:	3304      	adds	r3, #4
 801682e:	4306      	orrs	r6, r0
 8016830:	9306      	str	r3, [sp, #24]
 8016832:	e7a3      	b.n	801677c <__gethex+0x182>
 8016834:	2301      	movs	r3, #1
 8016836:	9a04      	ldr	r2, [sp, #16]
 8016838:	1a9c      	subs	r4, r3, r2
 801683a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801683c:	191c      	adds	r4, r3, r4
 801683e:	9b01      	ldr	r3, [sp, #4]
 8016840:	429c      	cmp	r4, r3
 8016842:	d3e1      	bcc.n	8016808 <__gethex+0x20e>
 8016844:	9907      	ldr	r1, [sp, #28]
 8016846:	0020      	movs	r0, r4
 8016848:	f7fe f89a 	bl	8014980 <strncmp>
 801684c:	2800      	cmp	r0, #0
 801684e:	d1db      	bne.n	8016808 <__gethex+0x20e>
 8016850:	e794      	b.n	801677c <__gethex+0x182>
 8016852:	1eb1      	subs	r1, r6, #2
 8016854:	0028      	movs	r0, r5
 8016856:	f000 fda8 	bl	80173aa <__any_on>
 801685a:	2800      	cmp	r0, #0
 801685c:	d0b7      	beq.n	80167ce <__gethex+0x1d4>
 801685e:	2403      	movs	r4, #3
 8016860:	e7b6      	b.n	80167d0 <__gethex+0x1d6>
 8016862:	9b01      	ldr	r3, [sp, #4]
 8016864:	2400      	movs	r4, #0
 8016866:	429e      	cmp	r6, r3
 8016868:	dab7      	bge.n	80167da <__gethex+0x1e0>
 801686a:	1b9e      	subs	r6, r3, r6
 801686c:	0029      	movs	r1, r5
 801686e:	0032      	movs	r2, r6
 8016870:	9805      	ldr	r0, [sp, #20]
 8016872:	f000 fbc7 	bl	8017004 <__lshift>
 8016876:	0003      	movs	r3, r0
 8016878:	3314      	adds	r3, #20
 801687a:	0005      	movs	r5, r0
 801687c:	1bbf      	subs	r7, r7, r6
 801687e:	9303      	str	r3, [sp, #12]
 8016880:	e7ab      	b.n	80167da <__gethex+0x1e0>
 8016882:	9b02      	ldr	r3, [sp, #8]
 8016884:	685e      	ldr	r6, [r3, #4]
 8016886:	42be      	cmp	r6, r7
 8016888:	dd6b      	ble.n	8016962 <__gethex+0x368>
 801688a:	9b01      	ldr	r3, [sp, #4]
 801688c:	1bf6      	subs	r6, r6, r7
 801688e:	42b3      	cmp	r3, r6
 8016890:	dc32      	bgt.n	80168f8 <__gethex+0x2fe>
 8016892:	9b02      	ldr	r3, [sp, #8]
 8016894:	68db      	ldr	r3, [r3, #12]
 8016896:	2b02      	cmp	r3, #2
 8016898:	d026      	beq.n	80168e8 <__gethex+0x2ee>
 801689a:	2b03      	cmp	r3, #3
 801689c:	d028      	beq.n	80168f0 <__gethex+0x2f6>
 801689e:	2b01      	cmp	r3, #1
 80168a0:	d119      	bne.n	80168d6 <__gethex+0x2dc>
 80168a2:	9b01      	ldr	r3, [sp, #4]
 80168a4:	42b3      	cmp	r3, r6
 80168a6:	d116      	bne.n	80168d6 <__gethex+0x2dc>
 80168a8:	2b01      	cmp	r3, #1
 80168aa:	dc0d      	bgt.n	80168c8 <__gethex+0x2ce>
 80168ac:	9b02      	ldr	r3, [sp, #8]
 80168ae:	2662      	movs	r6, #98	; 0x62
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	9301      	str	r3, [sp, #4]
 80168b4:	9a01      	ldr	r2, [sp, #4]
 80168b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168b8:	601a      	str	r2, [r3, #0]
 80168ba:	2301      	movs	r3, #1
 80168bc:	9a03      	ldr	r2, [sp, #12]
 80168be:	612b      	str	r3, [r5, #16]
 80168c0:	6013      	str	r3, [r2, #0]
 80168c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80168c4:	601d      	str	r5, [r3, #0]
 80168c6:	e72c      	b.n	8016722 <__gethex+0x128>
 80168c8:	9901      	ldr	r1, [sp, #4]
 80168ca:	0028      	movs	r0, r5
 80168cc:	3901      	subs	r1, #1
 80168ce:	f000 fd6c 	bl	80173aa <__any_on>
 80168d2:	2800      	cmp	r0, #0
 80168d4:	d1ea      	bne.n	80168ac <__gethex+0x2b2>
 80168d6:	0029      	movs	r1, r5
 80168d8:	9805      	ldr	r0, [sp, #20]
 80168da:	f000 f9ca 	bl	8016c72 <_Bfree>
 80168de:	2300      	movs	r3, #0
 80168e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80168e2:	2650      	movs	r6, #80	; 0x50
 80168e4:	6013      	str	r3, [r2, #0]
 80168e6:	e71c      	b.n	8016722 <__gethex+0x128>
 80168e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d0de      	beq.n	80168ac <__gethex+0x2b2>
 80168ee:	e7f2      	b.n	80168d6 <__gethex+0x2dc>
 80168f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d1da      	bne.n	80168ac <__gethex+0x2b2>
 80168f6:	e7ee      	b.n	80168d6 <__gethex+0x2dc>
 80168f8:	1e77      	subs	r7, r6, #1
 80168fa:	2c00      	cmp	r4, #0
 80168fc:	d12f      	bne.n	801695e <__gethex+0x364>
 80168fe:	2f00      	cmp	r7, #0
 8016900:	d004      	beq.n	801690c <__gethex+0x312>
 8016902:	0039      	movs	r1, r7
 8016904:	0028      	movs	r0, r5
 8016906:	f000 fd50 	bl	80173aa <__any_on>
 801690a:	0004      	movs	r4, r0
 801690c:	231f      	movs	r3, #31
 801690e:	117a      	asrs	r2, r7, #5
 8016910:	401f      	ands	r7, r3
 8016912:	3b1e      	subs	r3, #30
 8016914:	40bb      	lsls	r3, r7
 8016916:	9903      	ldr	r1, [sp, #12]
 8016918:	0092      	lsls	r2, r2, #2
 801691a:	5852      	ldr	r2, [r2, r1]
 801691c:	421a      	tst	r2, r3
 801691e:	d001      	beq.n	8016924 <__gethex+0x32a>
 8016920:	2302      	movs	r3, #2
 8016922:	431c      	orrs	r4, r3
 8016924:	9b01      	ldr	r3, [sp, #4]
 8016926:	0031      	movs	r1, r6
 8016928:	1b9b      	subs	r3, r3, r6
 801692a:	2602      	movs	r6, #2
 801692c:	0028      	movs	r0, r5
 801692e:	9301      	str	r3, [sp, #4]
 8016930:	f7ff fe1a 	bl	8016568 <rshift>
 8016934:	9b02      	ldr	r3, [sp, #8]
 8016936:	685f      	ldr	r7, [r3, #4]
 8016938:	2c00      	cmp	r4, #0
 801693a:	d040      	beq.n	80169be <__gethex+0x3c4>
 801693c:	9b02      	ldr	r3, [sp, #8]
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	2b02      	cmp	r3, #2
 8016942:	d010      	beq.n	8016966 <__gethex+0x36c>
 8016944:	2b03      	cmp	r3, #3
 8016946:	d012      	beq.n	801696e <__gethex+0x374>
 8016948:	2b01      	cmp	r3, #1
 801694a:	d106      	bne.n	801695a <__gethex+0x360>
 801694c:	07a2      	lsls	r2, r4, #30
 801694e:	d504      	bpl.n	801695a <__gethex+0x360>
 8016950:	9a03      	ldr	r2, [sp, #12]
 8016952:	6812      	ldr	r2, [r2, #0]
 8016954:	4314      	orrs	r4, r2
 8016956:	421c      	tst	r4, r3
 8016958:	d10c      	bne.n	8016974 <__gethex+0x37a>
 801695a:	2310      	movs	r3, #16
 801695c:	e02e      	b.n	80169bc <__gethex+0x3c2>
 801695e:	2401      	movs	r4, #1
 8016960:	e7d4      	b.n	801690c <__gethex+0x312>
 8016962:	2601      	movs	r6, #1
 8016964:	e7e8      	b.n	8016938 <__gethex+0x33e>
 8016966:	2301      	movs	r3, #1
 8016968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801696a:	1a9b      	subs	r3, r3, r2
 801696c:	9313      	str	r3, [sp, #76]	; 0x4c
 801696e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016970:	2b00      	cmp	r3, #0
 8016972:	d0f2      	beq.n	801695a <__gethex+0x360>
 8016974:	692c      	ldr	r4, [r5, #16]
 8016976:	00a3      	lsls	r3, r4, #2
 8016978:	9304      	str	r3, [sp, #16]
 801697a:	002b      	movs	r3, r5
 801697c:	00a2      	lsls	r2, r4, #2
 801697e:	3314      	adds	r3, #20
 8016980:	1899      	adds	r1, r3, r2
 8016982:	2200      	movs	r2, #0
 8016984:	4694      	mov	ip, r2
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	1c50      	adds	r0, r2, #1
 801698a:	d01d      	beq.n	80169c8 <__gethex+0x3ce>
 801698c:	3201      	adds	r2, #1
 801698e:	601a      	str	r2, [r3, #0]
 8016990:	002b      	movs	r3, r5
 8016992:	3314      	adds	r3, #20
 8016994:	2e02      	cmp	r6, #2
 8016996:	d13a      	bne.n	8016a0e <__gethex+0x414>
 8016998:	9a02      	ldr	r2, [sp, #8]
 801699a:	9901      	ldr	r1, [sp, #4]
 801699c:	6812      	ldr	r2, [r2, #0]
 801699e:	3a01      	subs	r2, #1
 80169a0:	428a      	cmp	r2, r1
 80169a2:	d10a      	bne.n	80169ba <__gethex+0x3c0>
 80169a4:	114a      	asrs	r2, r1, #5
 80169a6:	211f      	movs	r1, #31
 80169a8:	9801      	ldr	r0, [sp, #4]
 80169aa:	0092      	lsls	r2, r2, #2
 80169ac:	4001      	ands	r1, r0
 80169ae:	2001      	movs	r0, #1
 80169b0:	0004      	movs	r4, r0
 80169b2:	408c      	lsls	r4, r1
 80169b4:	58d3      	ldr	r3, [r2, r3]
 80169b6:	4223      	tst	r3, r4
 80169b8:	d148      	bne.n	8016a4c <__gethex+0x452>
 80169ba:	2320      	movs	r3, #32
 80169bc:	431e      	orrs	r6, r3
 80169be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80169c0:	601d      	str	r5, [r3, #0]
 80169c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80169c4:	601f      	str	r7, [r3, #0]
 80169c6:	e6ac      	b.n	8016722 <__gethex+0x128>
 80169c8:	4662      	mov	r2, ip
 80169ca:	c304      	stmia	r3!, {r2}
 80169cc:	4299      	cmp	r1, r3
 80169ce:	d8da      	bhi.n	8016986 <__gethex+0x38c>
 80169d0:	68ab      	ldr	r3, [r5, #8]
 80169d2:	429c      	cmp	r4, r3
 80169d4:	db12      	blt.n	80169fc <__gethex+0x402>
 80169d6:	686b      	ldr	r3, [r5, #4]
 80169d8:	9805      	ldr	r0, [sp, #20]
 80169da:	1c59      	adds	r1, r3, #1
 80169dc:	f000 f911 	bl	8016c02 <_Balloc>
 80169e0:	0029      	movs	r1, r5
 80169e2:	692b      	ldr	r3, [r5, #16]
 80169e4:	9003      	str	r0, [sp, #12]
 80169e6:	1c9a      	adds	r2, r3, #2
 80169e8:	0092      	lsls	r2, r2, #2
 80169ea:	310c      	adds	r1, #12
 80169ec:	300c      	adds	r0, #12
 80169ee:	f7fd f81c 	bl	8013a2a <memcpy>
 80169f2:	0029      	movs	r1, r5
 80169f4:	9805      	ldr	r0, [sp, #20]
 80169f6:	f000 f93c 	bl	8016c72 <_Bfree>
 80169fa:	9d03      	ldr	r5, [sp, #12]
 80169fc:	692b      	ldr	r3, [r5, #16]
 80169fe:	1c5a      	adds	r2, r3, #1
 8016a00:	612a      	str	r2, [r5, #16]
 8016a02:	2201      	movs	r2, #1
 8016a04:	3304      	adds	r3, #4
 8016a06:	009b      	lsls	r3, r3, #2
 8016a08:	18eb      	adds	r3, r5, r3
 8016a0a:	605a      	str	r2, [r3, #4]
 8016a0c:	e7c0      	b.n	8016990 <__gethex+0x396>
 8016a0e:	692a      	ldr	r2, [r5, #16]
 8016a10:	42a2      	cmp	r2, r4
 8016a12:	dd0a      	ble.n	8016a2a <__gethex+0x430>
 8016a14:	2101      	movs	r1, #1
 8016a16:	0028      	movs	r0, r5
 8016a18:	f7ff fda6 	bl	8016568 <rshift>
 8016a1c:	9b02      	ldr	r3, [sp, #8]
 8016a1e:	3701      	adds	r7, #1
 8016a20:	689b      	ldr	r3, [r3, #8]
 8016a22:	2601      	movs	r6, #1
 8016a24:	42bb      	cmp	r3, r7
 8016a26:	dac8      	bge.n	80169ba <__gethex+0x3c0>
 8016a28:	e6dc      	b.n	80167e4 <__gethex+0x1ea>
 8016a2a:	241f      	movs	r4, #31
 8016a2c:	9a01      	ldr	r2, [sp, #4]
 8016a2e:	2601      	movs	r6, #1
 8016a30:	4022      	ands	r2, r4
 8016a32:	1e14      	subs	r4, r2, #0
 8016a34:	d0c1      	beq.n	80169ba <__gethex+0x3c0>
 8016a36:	9a04      	ldr	r2, [sp, #16]
 8016a38:	189b      	adds	r3, r3, r2
 8016a3a:	3b04      	subs	r3, #4
 8016a3c:	6818      	ldr	r0, [r3, #0]
 8016a3e:	f000 f9ad 	bl	8016d9c <__hi0bits>
 8016a42:	2120      	movs	r1, #32
 8016a44:	1b0c      	subs	r4, r1, r4
 8016a46:	42a0      	cmp	r0, r4
 8016a48:	dbe4      	blt.n	8016a14 <__gethex+0x41a>
 8016a4a:	e7b6      	b.n	80169ba <__gethex+0x3c0>
 8016a4c:	0006      	movs	r6, r0
 8016a4e:	e7b4      	b.n	80169ba <__gethex+0x3c0>

08016a50 <L_shift>:
 8016a50:	2308      	movs	r3, #8
 8016a52:	b570      	push	{r4, r5, r6, lr}
 8016a54:	2520      	movs	r5, #32
 8016a56:	1a9a      	subs	r2, r3, r2
 8016a58:	0092      	lsls	r2, r2, #2
 8016a5a:	1aad      	subs	r5, r5, r2
 8016a5c:	6843      	ldr	r3, [r0, #4]
 8016a5e:	6806      	ldr	r6, [r0, #0]
 8016a60:	001c      	movs	r4, r3
 8016a62:	40ac      	lsls	r4, r5
 8016a64:	40d3      	lsrs	r3, r2
 8016a66:	4334      	orrs	r4, r6
 8016a68:	6004      	str	r4, [r0, #0]
 8016a6a:	6043      	str	r3, [r0, #4]
 8016a6c:	3004      	adds	r0, #4
 8016a6e:	4288      	cmp	r0, r1
 8016a70:	d3f4      	bcc.n	8016a5c <L_shift+0xc>
 8016a72:	bd70      	pop	{r4, r5, r6, pc}

08016a74 <__match>:
 8016a74:	b530      	push	{r4, r5, lr}
 8016a76:	6803      	ldr	r3, [r0, #0]
 8016a78:	780c      	ldrb	r4, [r1, #0]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	2c00      	cmp	r4, #0
 8016a7e:	d102      	bne.n	8016a86 <__match+0x12>
 8016a80:	6003      	str	r3, [r0, #0]
 8016a82:	2001      	movs	r0, #1
 8016a84:	bd30      	pop	{r4, r5, pc}
 8016a86:	781a      	ldrb	r2, [r3, #0]
 8016a88:	0015      	movs	r5, r2
 8016a8a:	3d41      	subs	r5, #65	; 0x41
 8016a8c:	2d19      	cmp	r5, #25
 8016a8e:	d800      	bhi.n	8016a92 <__match+0x1e>
 8016a90:	3220      	adds	r2, #32
 8016a92:	3101      	adds	r1, #1
 8016a94:	42a2      	cmp	r2, r4
 8016a96:	d0ef      	beq.n	8016a78 <__match+0x4>
 8016a98:	2000      	movs	r0, #0
 8016a9a:	e7f3      	b.n	8016a84 <__match+0x10>

08016a9c <__hexnan>:
 8016a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a9e:	b08b      	sub	sp, #44	; 0x2c
 8016aa0:	9201      	str	r2, [sp, #4]
 8016aa2:	680a      	ldr	r2, [r1, #0]
 8016aa4:	9901      	ldr	r1, [sp, #4]
 8016aa6:	1153      	asrs	r3, r2, #5
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	18cb      	adds	r3, r1, r3
 8016aac:	9304      	str	r3, [sp, #16]
 8016aae:	231f      	movs	r3, #31
 8016ab0:	401a      	ands	r2, r3
 8016ab2:	9008      	str	r0, [sp, #32]
 8016ab4:	9206      	str	r2, [sp, #24]
 8016ab6:	d002      	beq.n	8016abe <__hexnan+0x22>
 8016ab8:	9b04      	ldr	r3, [sp, #16]
 8016aba:	3304      	adds	r3, #4
 8016abc:	9304      	str	r3, [sp, #16]
 8016abe:	9b04      	ldr	r3, [sp, #16]
 8016ac0:	2500      	movs	r5, #0
 8016ac2:	1f1e      	subs	r6, r3, #4
 8016ac4:	0037      	movs	r7, r6
 8016ac6:	0034      	movs	r4, r6
 8016ac8:	9b08      	ldr	r3, [sp, #32]
 8016aca:	6035      	str	r5, [r6, #0]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	9507      	str	r5, [sp, #28]
 8016ad0:	9305      	str	r3, [sp, #20]
 8016ad2:	9502      	str	r5, [sp, #8]
 8016ad4:	9b05      	ldr	r3, [sp, #20]
 8016ad6:	3301      	adds	r3, #1
 8016ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8016ada:	9b05      	ldr	r3, [sp, #20]
 8016adc:	785b      	ldrb	r3, [r3, #1]
 8016ade:	9303      	str	r3, [sp, #12]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d028      	beq.n	8016b36 <__hexnan+0x9a>
 8016ae4:	9803      	ldr	r0, [sp, #12]
 8016ae6:	f7ff fd73 	bl	80165d0 <__hexdig_fun>
 8016aea:	2800      	cmp	r0, #0
 8016aec:	d145      	bne.n	8016b7a <__hexnan+0xde>
 8016aee:	9b03      	ldr	r3, [sp, #12]
 8016af0:	2b20      	cmp	r3, #32
 8016af2:	d819      	bhi.n	8016b28 <__hexnan+0x8c>
 8016af4:	9b02      	ldr	r3, [sp, #8]
 8016af6:	9a07      	ldr	r2, [sp, #28]
 8016af8:	4293      	cmp	r3, r2
 8016afa:	dd12      	ble.n	8016b22 <__hexnan+0x86>
 8016afc:	42bc      	cmp	r4, r7
 8016afe:	d206      	bcs.n	8016b0e <__hexnan+0x72>
 8016b00:	2d07      	cmp	r5, #7
 8016b02:	dc04      	bgt.n	8016b0e <__hexnan+0x72>
 8016b04:	002a      	movs	r2, r5
 8016b06:	0039      	movs	r1, r7
 8016b08:	0020      	movs	r0, r4
 8016b0a:	f7ff ffa1 	bl	8016a50 <L_shift>
 8016b0e:	9b01      	ldr	r3, [sp, #4]
 8016b10:	2508      	movs	r5, #8
 8016b12:	429c      	cmp	r4, r3
 8016b14:	d905      	bls.n	8016b22 <__hexnan+0x86>
 8016b16:	1f27      	subs	r7, r4, #4
 8016b18:	2500      	movs	r5, #0
 8016b1a:	003c      	movs	r4, r7
 8016b1c:	9b02      	ldr	r3, [sp, #8]
 8016b1e:	603d      	str	r5, [r7, #0]
 8016b20:	9307      	str	r3, [sp, #28]
 8016b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b24:	9305      	str	r3, [sp, #20]
 8016b26:	e7d5      	b.n	8016ad4 <__hexnan+0x38>
 8016b28:	9b03      	ldr	r3, [sp, #12]
 8016b2a:	2b29      	cmp	r3, #41	; 0x29
 8016b2c:	d14a      	bne.n	8016bc4 <__hexnan+0x128>
 8016b2e:	9b05      	ldr	r3, [sp, #20]
 8016b30:	9a08      	ldr	r2, [sp, #32]
 8016b32:	3302      	adds	r3, #2
 8016b34:	6013      	str	r3, [r2, #0]
 8016b36:	9b02      	ldr	r3, [sp, #8]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d043      	beq.n	8016bc4 <__hexnan+0x128>
 8016b3c:	42bc      	cmp	r4, r7
 8016b3e:	d206      	bcs.n	8016b4e <__hexnan+0xb2>
 8016b40:	2d07      	cmp	r5, #7
 8016b42:	dc04      	bgt.n	8016b4e <__hexnan+0xb2>
 8016b44:	002a      	movs	r2, r5
 8016b46:	0039      	movs	r1, r7
 8016b48:	0020      	movs	r0, r4
 8016b4a:	f7ff ff81 	bl	8016a50 <L_shift>
 8016b4e:	9b01      	ldr	r3, [sp, #4]
 8016b50:	429c      	cmp	r4, r3
 8016b52:	d926      	bls.n	8016ba2 <__hexnan+0x106>
 8016b54:	cc04      	ldmia	r4!, {r2}
 8016b56:	601a      	str	r2, [r3, #0]
 8016b58:	3304      	adds	r3, #4
 8016b5a:	42a6      	cmp	r6, r4
 8016b5c:	d2fa      	bcs.n	8016b54 <__hexnan+0xb8>
 8016b5e:	2200      	movs	r2, #0
 8016b60:	c304      	stmia	r3!, {r2}
 8016b62:	429e      	cmp	r6, r3
 8016b64:	d2fc      	bcs.n	8016b60 <__hexnan+0xc4>
 8016b66:	6833      	ldr	r3, [r6, #0]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d104      	bne.n	8016b76 <__hexnan+0xda>
 8016b6c:	9b01      	ldr	r3, [sp, #4]
 8016b6e:	429e      	cmp	r6, r3
 8016b70:	d126      	bne.n	8016bc0 <__hexnan+0x124>
 8016b72:	2301      	movs	r3, #1
 8016b74:	6033      	str	r3, [r6, #0]
 8016b76:	2005      	movs	r0, #5
 8016b78:	e025      	b.n	8016bc6 <__hexnan+0x12a>
 8016b7a:	9b02      	ldr	r3, [sp, #8]
 8016b7c:	3501      	adds	r5, #1
 8016b7e:	3301      	adds	r3, #1
 8016b80:	9302      	str	r3, [sp, #8]
 8016b82:	2d08      	cmp	r5, #8
 8016b84:	dd06      	ble.n	8016b94 <__hexnan+0xf8>
 8016b86:	9b01      	ldr	r3, [sp, #4]
 8016b88:	429c      	cmp	r4, r3
 8016b8a:	d9ca      	bls.n	8016b22 <__hexnan+0x86>
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	2501      	movs	r5, #1
 8016b90:	3c04      	subs	r4, #4
 8016b92:	6023      	str	r3, [r4, #0]
 8016b94:	220f      	movs	r2, #15
 8016b96:	6823      	ldr	r3, [r4, #0]
 8016b98:	4010      	ands	r0, r2
 8016b9a:	011b      	lsls	r3, r3, #4
 8016b9c:	4318      	orrs	r0, r3
 8016b9e:	6020      	str	r0, [r4, #0]
 8016ba0:	e7bf      	b.n	8016b22 <__hexnan+0x86>
 8016ba2:	9b06      	ldr	r3, [sp, #24]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d0de      	beq.n	8016b66 <__hexnan+0xca>
 8016ba8:	2120      	movs	r1, #32
 8016baa:	9a06      	ldr	r2, [sp, #24]
 8016bac:	9b04      	ldr	r3, [sp, #16]
 8016bae:	1a89      	subs	r1, r1, r2
 8016bb0:	2201      	movs	r2, #1
 8016bb2:	4252      	negs	r2, r2
 8016bb4:	40ca      	lsrs	r2, r1
 8016bb6:	3b04      	subs	r3, #4
 8016bb8:	6819      	ldr	r1, [r3, #0]
 8016bba:	400a      	ands	r2, r1
 8016bbc:	601a      	str	r2, [r3, #0]
 8016bbe:	e7d2      	b.n	8016b66 <__hexnan+0xca>
 8016bc0:	3e04      	subs	r6, #4
 8016bc2:	e7d0      	b.n	8016b66 <__hexnan+0xca>
 8016bc4:	2004      	movs	r0, #4
 8016bc6:	b00b      	add	sp, #44	; 0x2c
 8016bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016bca <__localeconv_l>:
 8016bca:	30f0      	adds	r0, #240	; 0xf0
 8016bcc:	4770      	bx	lr
	...

08016bd0 <_localeconv_r>:
 8016bd0:	4b03      	ldr	r3, [pc, #12]	; (8016be0 <_localeconv_r+0x10>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	6a18      	ldr	r0, [r3, #32]
 8016bd6:	2800      	cmp	r0, #0
 8016bd8:	d100      	bne.n	8016bdc <_localeconv_r+0xc>
 8016bda:	4802      	ldr	r0, [pc, #8]	; (8016be4 <_localeconv_r+0x14>)
 8016bdc:	30f0      	adds	r0, #240	; 0xf0
 8016bde:	4770      	bx	lr
 8016be0:	200000b0 	.word	0x200000b0
 8016be4:	20000114 	.word	0x20000114

08016be8 <memchr>:
 8016be8:	b2c9      	uxtb	r1, r1
 8016bea:	1882      	adds	r2, r0, r2
 8016bec:	4290      	cmp	r0, r2
 8016bee:	d101      	bne.n	8016bf4 <memchr+0xc>
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	4770      	bx	lr
 8016bf4:	7803      	ldrb	r3, [r0, #0]
 8016bf6:	428b      	cmp	r3, r1
 8016bf8:	d0fb      	beq.n	8016bf2 <memchr+0xa>
 8016bfa:	3001      	adds	r0, #1
 8016bfc:	e7f6      	b.n	8016bec <memchr+0x4>

08016bfe <__malloc_lock>:
 8016bfe:	4770      	bx	lr

08016c00 <__malloc_unlock>:
 8016c00:	4770      	bx	lr

08016c02 <_Balloc>:
 8016c02:	b570      	push	{r4, r5, r6, lr}
 8016c04:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016c06:	0004      	movs	r4, r0
 8016c08:	000d      	movs	r5, r1
 8016c0a:	2e00      	cmp	r6, #0
 8016c0c:	d107      	bne.n	8016c1e <_Balloc+0x1c>
 8016c0e:	2010      	movs	r0, #16
 8016c10:	f7fc fed6 	bl	80139c0 <malloc>
 8016c14:	6260      	str	r0, [r4, #36]	; 0x24
 8016c16:	6046      	str	r6, [r0, #4]
 8016c18:	6086      	str	r6, [r0, #8]
 8016c1a:	6006      	str	r6, [r0, #0]
 8016c1c:	60c6      	str	r6, [r0, #12]
 8016c1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016c20:	68f3      	ldr	r3, [r6, #12]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d013      	beq.n	8016c4e <_Balloc+0x4c>
 8016c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c28:	00aa      	lsls	r2, r5, #2
 8016c2a:	68db      	ldr	r3, [r3, #12]
 8016c2c:	189b      	adds	r3, r3, r2
 8016c2e:	6818      	ldr	r0, [r3, #0]
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d118      	bne.n	8016c66 <_Balloc+0x64>
 8016c34:	2101      	movs	r1, #1
 8016c36:	000e      	movs	r6, r1
 8016c38:	40ae      	lsls	r6, r5
 8016c3a:	1d72      	adds	r2, r6, #5
 8016c3c:	0092      	lsls	r2, r2, #2
 8016c3e:	0020      	movs	r0, r4
 8016c40:	f000 fbd5 	bl	80173ee <_calloc_r>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d00c      	beq.n	8016c62 <_Balloc+0x60>
 8016c48:	6045      	str	r5, [r0, #4]
 8016c4a:	6086      	str	r6, [r0, #8]
 8016c4c:	e00d      	b.n	8016c6a <_Balloc+0x68>
 8016c4e:	2221      	movs	r2, #33	; 0x21
 8016c50:	2104      	movs	r1, #4
 8016c52:	0020      	movs	r0, r4
 8016c54:	f000 fbcb 	bl	80173ee <_calloc_r>
 8016c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c5a:	60f0      	str	r0, [r6, #12]
 8016c5c:	68db      	ldr	r3, [r3, #12]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d1e1      	bne.n	8016c26 <_Balloc+0x24>
 8016c62:	2000      	movs	r0, #0
 8016c64:	bd70      	pop	{r4, r5, r6, pc}
 8016c66:	6802      	ldr	r2, [r0, #0]
 8016c68:	601a      	str	r2, [r3, #0]
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	6103      	str	r3, [r0, #16]
 8016c6e:	60c3      	str	r3, [r0, #12]
 8016c70:	e7f8      	b.n	8016c64 <_Balloc+0x62>

08016c72 <_Bfree>:
 8016c72:	b570      	push	{r4, r5, r6, lr}
 8016c74:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016c76:	0006      	movs	r6, r0
 8016c78:	000d      	movs	r5, r1
 8016c7a:	2c00      	cmp	r4, #0
 8016c7c:	d107      	bne.n	8016c8e <_Bfree+0x1c>
 8016c7e:	2010      	movs	r0, #16
 8016c80:	f7fc fe9e 	bl	80139c0 <malloc>
 8016c84:	6270      	str	r0, [r6, #36]	; 0x24
 8016c86:	6044      	str	r4, [r0, #4]
 8016c88:	6084      	str	r4, [r0, #8]
 8016c8a:	6004      	str	r4, [r0, #0]
 8016c8c:	60c4      	str	r4, [r0, #12]
 8016c8e:	2d00      	cmp	r5, #0
 8016c90:	d007      	beq.n	8016ca2 <_Bfree+0x30>
 8016c92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016c94:	686a      	ldr	r2, [r5, #4]
 8016c96:	68db      	ldr	r3, [r3, #12]
 8016c98:	0092      	lsls	r2, r2, #2
 8016c9a:	189b      	adds	r3, r3, r2
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	602a      	str	r2, [r5, #0]
 8016ca0:	601d      	str	r5, [r3, #0]
 8016ca2:	bd70      	pop	{r4, r5, r6, pc}

08016ca4 <__multadd>:
 8016ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ca6:	001e      	movs	r6, r3
 8016ca8:	2314      	movs	r3, #20
 8016caa:	469c      	mov	ip, r3
 8016cac:	0007      	movs	r7, r0
 8016cae:	000c      	movs	r4, r1
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	690d      	ldr	r5, [r1, #16]
 8016cb4:	448c      	add	ip, r1
 8016cb6:	4663      	mov	r3, ip
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	3001      	adds	r0, #1
 8016cbc:	b299      	uxth	r1, r3
 8016cbe:	4663      	mov	r3, ip
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4351      	muls	r1, r2
 8016cc4:	0c1b      	lsrs	r3, r3, #16
 8016cc6:	4353      	muls	r3, r2
 8016cc8:	1989      	adds	r1, r1, r6
 8016cca:	0c0e      	lsrs	r6, r1, #16
 8016ccc:	199b      	adds	r3, r3, r6
 8016cce:	b289      	uxth	r1, r1
 8016cd0:	0c1e      	lsrs	r6, r3, #16
 8016cd2:	041b      	lsls	r3, r3, #16
 8016cd4:	185b      	adds	r3, r3, r1
 8016cd6:	4661      	mov	r1, ip
 8016cd8:	c108      	stmia	r1!, {r3}
 8016cda:	468c      	mov	ip, r1
 8016cdc:	4285      	cmp	r5, r0
 8016cde:	dcea      	bgt.n	8016cb6 <__multadd+0x12>
 8016ce0:	2e00      	cmp	r6, #0
 8016ce2:	d01b      	beq.n	8016d1c <__multadd+0x78>
 8016ce4:	68a3      	ldr	r3, [r4, #8]
 8016ce6:	42ab      	cmp	r3, r5
 8016ce8:	dc12      	bgt.n	8016d10 <__multadd+0x6c>
 8016cea:	6863      	ldr	r3, [r4, #4]
 8016cec:	0038      	movs	r0, r7
 8016cee:	1c59      	adds	r1, r3, #1
 8016cf0:	f7ff ff87 	bl	8016c02 <_Balloc>
 8016cf4:	0021      	movs	r1, r4
 8016cf6:	6923      	ldr	r3, [r4, #16]
 8016cf8:	9001      	str	r0, [sp, #4]
 8016cfa:	1c9a      	adds	r2, r3, #2
 8016cfc:	0092      	lsls	r2, r2, #2
 8016cfe:	310c      	adds	r1, #12
 8016d00:	300c      	adds	r0, #12
 8016d02:	f7fc fe92 	bl	8013a2a <memcpy>
 8016d06:	0021      	movs	r1, r4
 8016d08:	0038      	movs	r0, r7
 8016d0a:	f7ff ffb2 	bl	8016c72 <_Bfree>
 8016d0e:	9c01      	ldr	r4, [sp, #4]
 8016d10:	1d2b      	adds	r3, r5, #4
 8016d12:	009b      	lsls	r3, r3, #2
 8016d14:	18e3      	adds	r3, r4, r3
 8016d16:	3501      	adds	r5, #1
 8016d18:	605e      	str	r6, [r3, #4]
 8016d1a:	6125      	str	r5, [r4, #16]
 8016d1c:	0020      	movs	r0, r4
 8016d1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016d20 <__s2b>:
 8016d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d22:	0006      	movs	r6, r0
 8016d24:	0018      	movs	r0, r3
 8016d26:	000c      	movs	r4, r1
 8016d28:	3008      	adds	r0, #8
 8016d2a:	2109      	movs	r1, #9
 8016d2c:	9301      	str	r3, [sp, #4]
 8016d2e:	0015      	movs	r5, r2
 8016d30:	f7e9 fa8e 	bl	8000250 <__divsi3>
 8016d34:	2301      	movs	r3, #1
 8016d36:	2100      	movs	r1, #0
 8016d38:	4283      	cmp	r3, r0
 8016d3a:	db1f      	blt.n	8016d7c <__s2b+0x5c>
 8016d3c:	0030      	movs	r0, r6
 8016d3e:	f7ff ff60 	bl	8016c02 <_Balloc>
 8016d42:	9b08      	ldr	r3, [sp, #32]
 8016d44:	6143      	str	r3, [r0, #20]
 8016d46:	2301      	movs	r3, #1
 8016d48:	6103      	str	r3, [r0, #16]
 8016d4a:	2d09      	cmp	r5, #9
 8016d4c:	dd19      	ble.n	8016d82 <__s2b+0x62>
 8016d4e:	0023      	movs	r3, r4
 8016d50:	3309      	adds	r3, #9
 8016d52:	001f      	movs	r7, r3
 8016d54:	9300      	str	r3, [sp, #0]
 8016d56:	1964      	adds	r4, r4, r5
 8016d58:	783b      	ldrb	r3, [r7, #0]
 8016d5a:	0001      	movs	r1, r0
 8016d5c:	3b30      	subs	r3, #48	; 0x30
 8016d5e:	220a      	movs	r2, #10
 8016d60:	0030      	movs	r0, r6
 8016d62:	3701      	adds	r7, #1
 8016d64:	f7ff ff9e 	bl	8016ca4 <__multadd>
 8016d68:	42a7      	cmp	r7, r4
 8016d6a:	d1f5      	bne.n	8016d58 <__s2b+0x38>
 8016d6c:	9b00      	ldr	r3, [sp, #0]
 8016d6e:	195c      	adds	r4, r3, r5
 8016d70:	3c08      	subs	r4, #8
 8016d72:	002f      	movs	r7, r5
 8016d74:	9b01      	ldr	r3, [sp, #4]
 8016d76:	429f      	cmp	r7, r3
 8016d78:	db06      	blt.n	8016d88 <__s2b+0x68>
 8016d7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016d7c:	005b      	lsls	r3, r3, #1
 8016d7e:	3101      	adds	r1, #1
 8016d80:	e7da      	b.n	8016d38 <__s2b+0x18>
 8016d82:	340a      	adds	r4, #10
 8016d84:	2509      	movs	r5, #9
 8016d86:	e7f4      	b.n	8016d72 <__s2b+0x52>
 8016d88:	1b63      	subs	r3, r4, r5
 8016d8a:	5ddb      	ldrb	r3, [r3, r7]
 8016d8c:	0001      	movs	r1, r0
 8016d8e:	3b30      	subs	r3, #48	; 0x30
 8016d90:	220a      	movs	r2, #10
 8016d92:	0030      	movs	r0, r6
 8016d94:	f7ff ff86 	bl	8016ca4 <__multadd>
 8016d98:	3701      	adds	r7, #1
 8016d9a:	e7eb      	b.n	8016d74 <__s2b+0x54>

08016d9c <__hi0bits>:
 8016d9c:	0003      	movs	r3, r0
 8016d9e:	0c02      	lsrs	r2, r0, #16
 8016da0:	2000      	movs	r0, #0
 8016da2:	4282      	cmp	r2, r0
 8016da4:	d101      	bne.n	8016daa <__hi0bits+0xe>
 8016da6:	041b      	lsls	r3, r3, #16
 8016da8:	3010      	adds	r0, #16
 8016daa:	0e1a      	lsrs	r2, r3, #24
 8016dac:	d101      	bne.n	8016db2 <__hi0bits+0x16>
 8016dae:	3008      	adds	r0, #8
 8016db0:	021b      	lsls	r3, r3, #8
 8016db2:	0f1a      	lsrs	r2, r3, #28
 8016db4:	d101      	bne.n	8016dba <__hi0bits+0x1e>
 8016db6:	3004      	adds	r0, #4
 8016db8:	011b      	lsls	r3, r3, #4
 8016dba:	0f9a      	lsrs	r2, r3, #30
 8016dbc:	d101      	bne.n	8016dc2 <__hi0bits+0x26>
 8016dbe:	3002      	adds	r0, #2
 8016dc0:	009b      	lsls	r3, r3, #2
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	db03      	blt.n	8016dce <__hi0bits+0x32>
 8016dc6:	3001      	adds	r0, #1
 8016dc8:	005b      	lsls	r3, r3, #1
 8016dca:	d400      	bmi.n	8016dce <__hi0bits+0x32>
 8016dcc:	2020      	movs	r0, #32
 8016dce:	4770      	bx	lr

08016dd0 <__lo0bits>:
 8016dd0:	2207      	movs	r2, #7
 8016dd2:	6803      	ldr	r3, [r0, #0]
 8016dd4:	b510      	push	{r4, lr}
 8016dd6:	0001      	movs	r1, r0
 8016dd8:	401a      	ands	r2, r3
 8016dda:	d00d      	beq.n	8016df8 <__lo0bits+0x28>
 8016ddc:	2401      	movs	r4, #1
 8016dde:	2000      	movs	r0, #0
 8016de0:	4223      	tst	r3, r4
 8016de2:	d105      	bne.n	8016df0 <__lo0bits+0x20>
 8016de4:	3002      	adds	r0, #2
 8016de6:	4203      	tst	r3, r0
 8016de8:	d003      	beq.n	8016df2 <__lo0bits+0x22>
 8016dea:	40e3      	lsrs	r3, r4
 8016dec:	0020      	movs	r0, r4
 8016dee:	600b      	str	r3, [r1, #0]
 8016df0:	bd10      	pop	{r4, pc}
 8016df2:	089b      	lsrs	r3, r3, #2
 8016df4:	600b      	str	r3, [r1, #0]
 8016df6:	e7fb      	b.n	8016df0 <__lo0bits+0x20>
 8016df8:	b29c      	uxth	r4, r3
 8016dfa:	0010      	movs	r0, r2
 8016dfc:	2c00      	cmp	r4, #0
 8016dfe:	d101      	bne.n	8016e04 <__lo0bits+0x34>
 8016e00:	2010      	movs	r0, #16
 8016e02:	0c1b      	lsrs	r3, r3, #16
 8016e04:	b2da      	uxtb	r2, r3
 8016e06:	2a00      	cmp	r2, #0
 8016e08:	d101      	bne.n	8016e0e <__lo0bits+0x3e>
 8016e0a:	3008      	adds	r0, #8
 8016e0c:	0a1b      	lsrs	r3, r3, #8
 8016e0e:	071a      	lsls	r2, r3, #28
 8016e10:	d101      	bne.n	8016e16 <__lo0bits+0x46>
 8016e12:	3004      	adds	r0, #4
 8016e14:	091b      	lsrs	r3, r3, #4
 8016e16:	079a      	lsls	r2, r3, #30
 8016e18:	d101      	bne.n	8016e1e <__lo0bits+0x4e>
 8016e1a:	3002      	adds	r0, #2
 8016e1c:	089b      	lsrs	r3, r3, #2
 8016e1e:	07da      	lsls	r2, r3, #31
 8016e20:	d4e8      	bmi.n	8016df4 <__lo0bits+0x24>
 8016e22:	085b      	lsrs	r3, r3, #1
 8016e24:	d001      	beq.n	8016e2a <__lo0bits+0x5a>
 8016e26:	3001      	adds	r0, #1
 8016e28:	e7e4      	b.n	8016df4 <__lo0bits+0x24>
 8016e2a:	2020      	movs	r0, #32
 8016e2c:	e7e0      	b.n	8016df0 <__lo0bits+0x20>

08016e2e <__i2b>:
 8016e2e:	b510      	push	{r4, lr}
 8016e30:	000c      	movs	r4, r1
 8016e32:	2101      	movs	r1, #1
 8016e34:	f7ff fee5 	bl	8016c02 <_Balloc>
 8016e38:	2301      	movs	r3, #1
 8016e3a:	6144      	str	r4, [r0, #20]
 8016e3c:	6103      	str	r3, [r0, #16]
 8016e3e:	bd10      	pop	{r4, pc}

08016e40 <__multiply>:
 8016e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e42:	690b      	ldr	r3, [r1, #16]
 8016e44:	0014      	movs	r4, r2
 8016e46:	6912      	ldr	r2, [r2, #16]
 8016e48:	b089      	sub	sp, #36	; 0x24
 8016e4a:	000d      	movs	r5, r1
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	da01      	bge.n	8016e54 <__multiply+0x14>
 8016e50:	0025      	movs	r5, r4
 8016e52:	000c      	movs	r4, r1
 8016e54:	692f      	ldr	r7, [r5, #16]
 8016e56:	6926      	ldr	r6, [r4, #16]
 8016e58:	6869      	ldr	r1, [r5, #4]
 8016e5a:	19bb      	adds	r3, r7, r6
 8016e5c:	9302      	str	r3, [sp, #8]
 8016e5e:	68ab      	ldr	r3, [r5, #8]
 8016e60:	19ba      	adds	r2, r7, r6
 8016e62:	4293      	cmp	r3, r2
 8016e64:	da00      	bge.n	8016e68 <__multiply+0x28>
 8016e66:	3101      	adds	r1, #1
 8016e68:	f7ff fecb 	bl	8016c02 <_Balloc>
 8016e6c:	0002      	movs	r2, r0
 8016e6e:	19bb      	adds	r3, r7, r6
 8016e70:	3214      	adds	r2, #20
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	18d3      	adds	r3, r2, r3
 8016e76:	469c      	mov	ip, r3
 8016e78:	2100      	movs	r1, #0
 8016e7a:	0013      	movs	r3, r2
 8016e7c:	9004      	str	r0, [sp, #16]
 8016e7e:	4563      	cmp	r3, ip
 8016e80:	d31d      	bcc.n	8016ebe <__multiply+0x7e>
 8016e82:	3514      	adds	r5, #20
 8016e84:	00bf      	lsls	r7, r7, #2
 8016e86:	19eb      	adds	r3, r5, r7
 8016e88:	3414      	adds	r4, #20
 8016e8a:	00b6      	lsls	r6, r6, #2
 8016e8c:	9305      	str	r3, [sp, #20]
 8016e8e:	19a3      	adds	r3, r4, r6
 8016e90:	9503      	str	r5, [sp, #12]
 8016e92:	9401      	str	r4, [sp, #4]
 8016e94:	9307      	str	r3, [sp, #28]
 8016e96:	9b07      	ldr	r3, [sp, #28]
 8016e98:	9901      	ldr	r1, [sp, #4]
 8016e9a:	4299      	cmp	r1, r3
 8016e9c:	d311      	bcc.n	8016ec2 <__multiply+0x82>
 8016e9e:	9b02      	ldr	r3, [sp, #8]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	dd06      	ble.n	8016eb2 <__multiply+0x72>
 8016ea4:	2304      	movs	r3, #4
 8016ea6:	425b      	negs	r3, r3
 8016ea8:	449c      	add	ip, r3
 8016eaa:	4663      	mov	r3, ip
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d051      	beq.n	8016f56 <__multiply+0x116>
 8016eb2:	9b04      	ldr	r3, [sp, #16]
 8016eb4:	9a02      	ldr	r2, [sp, #8]
 8016eb6:	0018      	movs	r0, r3
 8016eb8:	611a      	str	r2, [r3, #16]
 8016eba:	b009      	add	sp, #36	; 0x24
 8016ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ebe:	c302      	stmia	r3!, {r1}
 8016ec0:	e7dd      	b.n	8016e7e <__multiply+0x3e>
 8016ec2:	9b01      	ldr	r3, [sp, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	b298      	uxth	r0, r3
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d01c      	beq.n	8016f06 <__multiply+0xc6>
 8016ecc:	0015      	movs	r5, r2
 8016ece:	2600      	movs	r6, #0
 8016ed0:	9f03      	ldr	r7, [sp, #12]
 8016ed2:	cf02      	ldmia	r7!, {r1}
 8016ed4:	682c      	ldr	r4, [r5, #0]
 8016ed6:	b28b      	uxth	r3, r1
 8016ed8:	4343      	muls	r3, r0
 8016eda:	0c09      	lsrs	r1, r1, #16
 8016edc:	4341      	muls	r1, r0
 8016ede:	b2a4      	uxth	r4, r4
 8016ee0:	191b      	adds	r3, r3, r4
 8016ee2:	199b      	adds	r3, r3, r6
 8016ee4:	000e      	movs	r6, r1
 8016ee6:	6829      	ldr	r1, [r5, #0]
 8016ee8:	9506      	str	r5, [sp, #24]
 8016eea:	0c09      	lsrs	r1, r1, #16
 8016eec:	1871      	adds	r1, r6, r1
 8016eee:	0c1e      	lsrs	r6, r3, #16
 8016ef0:	1989      	adds	r1, r1, r6
 8016ef2:	0c0e      	lsrs	r6, r1, #16
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	0409      	lsls	r1, r1, #16
 8016ef8:	430b      	orrs	r3, r1
 8016efa:	c508      	stmia	r5!, {r3}
 8016efc:	9b05      	ldr	r3, [sp, #20]
 8016efe:	42bb      	cmp	r3, r7
 8016f00:	d8e7      	bhi.n	8016ed2 <__multiply+0x92>
 8016f02:	9b06      	ldr	r3, [sp, #24]
 8016f04:	605e      	str	r6, [r3, #4]
 8016f06:	9b01      	ldr	r3, [sp, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	0c1d      	lsrs	r5, r3, #16
 8016f0c:	d01e      	beq.n	8016f4c <__multiply+0x10c>
 8016f0e:	0010      	movs	r0, r2
 8016f10:	2700      	movs	r7, #0
 8016f12:	6813      	ldr	r3, [r2, #0]
 8016f14:	9e03      	ldr	r6, [sp, #12]
 8016f16:	6831      	ldr	r1, [r6, #0]
 8016f18:	6804      	ldr	r4, [r0, #0]
 8016f1a:	b289      	uxth	r1, r1
 8016f1c:	4369      	muls	r1, r5
 8016f1e:	0c24      	lsrs	r4, r4, #16
 8016f20:	1909      	adds	r1, r1, r4
 8016f22:	19c9      	adds	r1, r1, r7
 8016f24:	040f      	lsls	r7, r1, #16
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	433b      	orrs	r3, r7
 8016f2a:	6003      	str	r3, [r0, #0]
 8016f2c:	ce80      	ldmia	r6!, {r7}
 8016f2e:	6843      	ldr	r3, [r0, #4]
 8016f30:	0c3f      	lsrs	r7, r7, #16
 8016f32:	436f      	muls	r7, r5
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	18fb      	adds	r3, r7, r3
 8016f38:	0c09      	lsrs	r1, r1, #16
 8016f3a:	185b      	adds	r3, r3, r1
 8016f3c:	9905      	ldr	r1, [sp, #20]
 8016f3e:	9006      	str	r0, [sp, #24]
 8016f40:	0c1f      	lsrs	r7, r3, #16
 8016f42:	3004      	adds	r0, #4
 8016f44:	42b1      	cmp	r1, r6
 8016f46:	d8e6      	bhi.n	8016f16 <__multiply+0xd6>
 8016f48:	9906      	ldr	r1, [sp, #24]
 8016f4a:	604b      	str	r3, [r1, #4]
 8016f4c:	9b01      	ldr	r3, [sp, #4]
 8016f4e:	3204      	adds	r2, #4
 8016f50:	3304      	adds	r3, #4
 8016f52:	9301      	str	r3, [sp, #4]
 8016f54:	e79f      	b.n	8016e96 <__multiply+0x56>
 8016f56:	9b02      	ldr	r3, [sp, #8]
 8016f58:	3b01      	subs	r3, #1
 8016f5a:	9302      	str	r3, [sp, #8]
 8016f5c:	e79f      	b.n	8016e9e <__multiply+0x5e>
	...

08016f60 <__pow5mult>:
 8016f60:	2303      	movs	r3, #3
 8016f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f64:	4013      	ands	r3, r2
 8016f66:	0005      	movs	r5, r0
 8016f68:	000e      	movs	r6, r1
 8016f6a:	0014      	movs	r4, r2
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d008      	beq.n	8016f82 <__pow5mult+0x22>
 8016f70:	4922      	ldr	r1, [pc, #136]	; (8016ffc <__pow5mult+0x9c>)
 8016f72:	3b01      	subs	r3, #1
 8016f74:	009a      	lsls	r2, r3, #2
 8016f76:	5852      	ldr	r2, [r2, r1]
 8016f78:	2300      	movs	r3, #0
 8016f7a:	0031      	movs	r1, r6
 8016f7c:	f7ff fe92 	bl	8016ca4 <__multadd>
 8016f80:	0006      	movs	r6, r0
 8016f82:	10a3      	asrs	r3, r4, #2
 8016f84:	9301      	str	r3, [sp, #4]
 8016f86:	d036      	beq.n	8016ff6 <__pow5mult+0x96>
 8016f88:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8016f8a:	2c00      	cmp	r4, #0
 8016f8c:	d107      	bne.n	8016f9e <__pow5mult+0x3e>
 8016f8e:	2010      	movs	r0, #16
 8016f90:	f7fc fd16 	bl	80139c0 <malloc>
 8016f94:	6268      	str	r0, [r5, #36]	; 0x24
 8016f96:	6044      	str	r4, [r0, #4]
 8016f98:	6084      	str	r4, [r0, #8]
 8016f9a:	6004      	str	r4, [r0, #0]
 8016f9c:	60c4      	str	r4, [r0, #12]
 8016f9e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016fa0:	68bc      	ldr	r4, [r7, #8]
 8016fa2:	2c00      	cmp	r4, #0
 8016fa4:	d107      	bne.n	8016fb6 <__pow5mult+0x56>
 8016fa6:	4916      	ldr	r1, [pc, #88]	; (8017000 <__pow5mult+0xa0>)
 8016fa8:	0028      	movs	r0, r5
 8016faa:	f7ff ff40 	bl	8016e2e <__i2b>
 8016fae:	2300      	movs	r3, #0
 8016fb0:	0004      	movs	r4, r0
 8016fb2:	60b8      	str	r0, [r7, #8]
 8016fb4:	6003      	str	r3, [r0, #0]
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	9b01      	ldr	r3, [sp, #4]
 8016fba:	4213      	tst	r3, r2
 8016fbc:	d00a      	beq.n	8016fd4 <__pow5mult+0x74>
 8016fbe:	0031      	movs	r1, r6
 8016fc0:	0022      	movs	r2, r4
 8016fc2:	0028      	movs	r0, r5
 8016fc4:	f7ff ff3c 	bl	8016e40 <__multiply>
 8016fc8:	0007      	movs	r7, r0
 8016fca:	0031      	movs	r1, r6
 8016fcc:	0028      	movs	r0, r5
 8016fce:	f7ff fe50 	bl	8016c72 <_Bfree>
 8016fd2:	003e      	movs	r6, r7
 8016fd4:	9b01      	ldr	r3, [sp, #4]
 8016fd6:	105b      	asrs	r3, r3, #1
 8016fd8:	9301      	str	r3, [sp, #4]
 8016fda:	d00c      	beq.n	8016ff6 <__pow5mult+0x96>
 8016fdc:	6820      	ldr	r0, [r4, #0]
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	d107      	bne.n	8016ff2 <__pow5mult+0x92>
 8016fe2:	0022      	movs	r2, r4
 8016fe4:	0021      	movs	r1, r4
 8016fe6:	0028      	movs	r0, r5
 8016fe8:	f7ff ff2a 	bl	8016e40 <__multiply>
 8016fec:	2300      	movs	r3, #0
 8016fee:	6020      	str	r0, [r4, #0]
 8016ff0:	6003      	str	r3, [r0, #0]
 8016ff2:	0004      	movs	r4, r0
 8016ff4:	e7df      	b.n	8016fb6 <__pow5mult+0x56>
 8016ff6:	0030      	movs	r0, r6
 8016ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016ffa:	46c0      	nop			; (mov r8, r8)
 8016ffc:	0801aca8 	.word	0x0801aca8
 8017000:	00000271 	.word	0x00000271

08017004 <__lshift>:
 8017004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017006:	000d      	movs	r5, r1
 8017008:	0017      	movs	r7, r2
 801700a:	692b      	ldr	r3, [r5, #16]
 801700c:	1154      	asrs	r4, r2, #5
 801700e:	b085      	sub	sp, #20
 8017010:	18e3      	adds	r3, r4, r3
 8017012:	9301      	str	r3, [sp, #4]
 8017014:	3301      	adds	r3, #1
 8017016:	9300      	str	r3, [sp, #0]
 8017018:	6849      	ldr	r1, [r1, #4]
 801701a:	68ab      	ldr	r3, [r5, #8]
 801701c:	9002      	str	r0, [sp, #8]
 801701e:	9a00      	ldr	r2, [sp, #0]
 8017020:	4293      	cmp	r3, r2
 8017022:	db35      	blt.n	8017090 <__lshift+0x8c>
 8017024:	9802      	ldr	r0, [sp, #8]
 8017026:	f7ff fdec 	bl	8016c02 <_Balloc>
 801702a:	2300      	movs	r3, #0
 801702c:	0002      	movs	r2, r0
 801702e:	0006      	movs	r6, r0
 8017030:	0019      	movs	r1, r3
 8017032:	3214      	adds	r2, #20
 8017034:	42a3      	cmp	r3, r4
 8017036:	db2e      	blt.n	8017096 <__lshift+0x92>
 8017038:	43e3      	mvns	r3, r4
 801703a:	17db      	asrs	r3, r3, #31
 801703c:	401c      	ands	r4, r3
 801703e:	002b      	movs	r3, r5
 8017040:	00a4      	lsls	r4, r4, #2
 8017042:	1914      	adds	r4, r2, r4
 8017044:	692a      	ldr	r2, [r5, #16]
 8017046:	3314      	adds	r3, #20
 8017048:	0092      	lsls	r2, r2, #2
 801704a:	189a      	adds	r2, r3, r2
 801704c:	4694      	mov	ip, r2
 801704e:	221f      	movs	r2, #31
 8017050:	4017      	ands	r7, r2
 8017052:	d024      	beq.n	801709e <__lshift+0x9a>
 8017054:	3201      	adds	r2, #1
 8017056:	1bd2      	subs	r2, r2, r7
 8017058:	9203      	str	r2, [sp, #12]
 801705a:	2200      	movs	r2, #0
 801705c:	6819      	ldr	r1, [r3, #0]
 801705e:	0020      	movs	r0, r4
 8017060:	40b9      	lsls	r1, r7
 8017062:	430a      	orrs	r2, r1
 8017064:	c404      	stmia	r4!, {r2}
 8017066:	cb04      	ldmia	r3!, {r2}
 8017068:	9903      	ldr	r1, [sp, #12]
 801706a:	40ca      	lsrs	r2, r1
 801706c:	459c      	cmp	ip, r3
 801706e:	d8f5      	bhi.n	801705c <__lshift+0x58>
 8017070:	6042      	str	r2, [r0, #4]
 8017072:	2a00      	cmp	r2, #0
 8017074:	d002      	beq.n	801707c <__lshift+0x78>
 8017076:	9b01      	ldr	r3, [sp, #4]
 8017078:	3302      	adds	r3, #2
 801707a:	9300      	str	r3, [sp, #0]
 801707c:	9b00      	ldr	r3, [sp, #0]
 801707e:	9802      	ldr	r0, [sp, #8]
 8017080:	3b01      	subs	r3, #1
 8017082:	6133      	str	r3, [r6, #16]
 8017084:	0029      	movs	r1, r5
 8017086:	f7ff fdf4 	bl	8016c72 <_Bfree>
 801708a:	0030      	movs	r0, r6
 801708c:	b005      	add	sp, #20
 801708e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017090:	3101      	adds	r1, #1
 8017092:	005b      	lsls	r3, r3, #1
 8017094:	e7c3      	b.n	801701e <__lshift+0x1a>
 8017096:	0098      	lsls	r0, r3, #2
 8017098:	5011      	str	r1, [r2, r0]
 801709a:	3301      	adds	r3, #1
 801709c:	e7ca      	b.n	8017034 <__lshift+0x30>
 801709e:	cb04      	ldmia	r3!, {r2}
 80170a0:	c404      	stmia	r4!, {r2}
 80170a2:	459c      	cmp	ip, r3
 80170a4:	d8fb      	bhi.n	801709e <__lshift+0x9a>
 80170a6:	e7e9      	b.n	801707c <__lshift+0x78>

080170a8 <__mcmp>:
 80170a8:	690a      	ldr	r2, [r1, #16]
 80170aa:	6903      	ldr	r3, [r0, #16]
 80170ac:	b530      	push	{r4, r5, lr}
 80170ae:	1a9b      	subs	r3, r3, r2
 80170b0:	d10d      	bne.n	80170ce <__mcmp+0x26>
 80170b2:	0092      	lsls	r2, r2, #2
 80170b4:	3014      	adds	r0, #20
 80170b6:	3114      	adds	r1, #20
 80170b8:	1884      	adds	r4, r0, r2
 80170ba:	1889      	adds	r1, r1, r2
 80170bc:	3c04      	subs	r4, #4
 80170be:	3904      	subs	r1, #4
 80170c0:	6825      	ldr	r5, [r4, #0]
 80170c2:	680a      	ldr	r2, [r1, #0]
 80170c4:	4295      	cmp	r5, r2
 80170c6:	d004      	beq.n	80170d2 <__mcmp+0x2a>
 80170c8:	2301      	movs	r3, #1
 80170ca:	4295      	cmp	r5, r2
 80170cc:	d304      	bcc.n	80170d8 <__mcmp+0x30>
 80170ce:	0018      	movs	r0, r3
 80170d0:	bd30      	pop	{r4, r5, pc}
 80170d2:	42a0      	cmp	r0, r4
 80170d4:	d3f2      	bcc.n	80170bc <__mcmp+0x14>
 80170d6:	e7fa      	b.n	80170ce <__mcmp+0x26>
 80170d8:	425b      	negs	r3, r3
 80170da:	e7f8      	b.n	80170ce <__mcmp+0x26>

080170dc <__mdiff>:
 80170dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170de:	000d      	movs	r5, r1
 80170e0:	b085      	sub	sp, #20
 80170e2:	0007      	movs	r7, r0
 80170e4:	0011      	movs	r1, r2
 80170e6:	0028      	movs	r0, r5
 80170e8:	0014      	movs	r4, r2
 80170ea:	f7ff ffdd 	bl	80170a8 <__mcmp>
 80170ee:	1e06      	subs	r6, r0, #0
 80170f0:	d108      	bne.n	8017104 <__mdiff+0x28>
 80170f2:	0001      	movs	r1, r0
 80170f4:	0038      	movs	r0, r7
 80170f6:	f7ff fd84 	bl	8016c02 <_Balloc>
 80170fa:	2301      	movs	r3, #1
 80170fc:	6146      	str	r6, [r0, #20]
 80170fe:	6103      	str	r3, [r0, #16]
 8017100:	b005      	add	sp, #20
 8017102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017104:	2301      	movs	r3, #1
 8017106:	9301      	str	r3, [sp, #4]
 8017108:	2800      	cmp	r0, #0
 801710a:	db04      	blt.n	8017116 <__mdiff+0x3a>
 801710c:	0023      	movs	r3, r4
 801710e:	002c      	movs	r4, r5
 8017110:	001d      	movs	r5, r3
 8017112:	2300      	movs	r3, #0
 8017114:	9301      	str	r3, [sp, #4]
 8017116:	6861      	ldr	r1, [r4, #4]
 8017118:	0038      	movs	r0, r7
 801711a:	f7ff fd72 	bl	8016c02 <_Balloc>
 801711e:	002f      	movs	r7, r5
 8017120:	2200      	movs	r2, #0
 8017122:	9b01      	ldr	r3, [sp, #4]
 8017124:	6926      	ldr	r6, [r4, #16]
 8017126:	60c3      	str	r3, [r0, #12]
 8017128:	3414      	adds	r4, #20
 801712a:	00b3      	lsls	r3, r6, #2
 801712c:	18e3      	adds	r3, r4, r3
 801712e:	9302      	str	r3, [sp, #8]
 8017130:	692b      	ldr	r3, [r5, #16]
 8017132:	3714      	adds	r7, #20
 8017134:	009b      	lsls	r3, r3, #2
 8017136:	18fb      	adds	r3, r7, r3
 8017138:	9303      	str	r3, [sp, #12]
 801713a:	0003      	movs	r3, r0
 801713c:	4694      	mov	ip, r2
 801713e:	3314      	adds	r3, #20
 8017140:	cc20      	ldmia	r4!, {r5}
 8017142:	cf04      	ldmia	r7!, {r2}
 8017144:	9201      	str	r2, [sp, #4]
 8017146:	b2aa      	uxth	r2, r5
 8017148:	4494      	add	ip, r2
 801714a:	466a      	mov	r2, sp
 801714c:	4661      	mov	r1, ip
 801714e:	8892      	ldrh	r2, [r2, #4]
 8017150:	0c2d      	lsrs	r5, r5, #16
 8017152:	1a8a      	subs	r2, r1, r2
 8017154:	9901      	ldr	r1, [sp, #4]
 8017156:	0c09      	lsrs	r1, r1, #16
 8017158:	1a69      	subs	r1, r5, r1
 801715a:	1415      	asrs	r5, r2, #16
 801715c:	1949      	adds	r1, r1, r5
 801715e:	140d      	asrs	r5, r1, #16
 8017160:	b292      	uxth	r2, r2
 8017162:	0409      	lsls	r1, r1, #16
 8017164:	430a      	orrs	r2, r1
 8017166:	601a      	str	r2, [r3, #0]
 8017168:	9a03      	ldr	r2, [sp, #12]
 801716a:	46ac      	mov	ip, r5
 801716c:	3304      	adds	r3, #4
 801716e:	42ba      	cmp	r2, r7
 8017170:	d8e6      	bhi.n	8017140 <__mdiff+0x64>
 8017172:	9902      	ldr	r1, [sp, #8]
 8017174:	001a      	movs	r2, r3
 8017176:	428c      	cmp	r4, r1
 8017178:	d305      	bcc.n	8017186 <__mdiff+0xaa>
 801717a:	3a04      	subs	r2, #4
 801717c:	6813      	ldr	r3, [r2, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d00e      	beq.n	80171a0 <__mdiff+0xc4>
 8017182:	6106      	str	r6, [r0, #16]
 8017184:	e7bc      	b.n	8017100 <__mdiff+0x24>
 8017186:	cc04      	ldmia	r4!, {r2}
 8017188:	b291      	uxth	r1, r2
 801718a:	4461      	add	r1, ip
 801718c:	140d      	asrs	r5, r1, #16
 801718e:	0c12      	lsrs	r2, r2, #16
 8017190:	1952      	adds	r2, r2, r5
 8017192:	1415      	asrs	r5, r2, #16
 8017194:	b289      	uxth	r1, r1
 8017196:	0412      	lsls	r2, r2, #16
 8017198:	430a      	orrs	r2, r1
 801719a:	46ac      	mov	ip, r5
 801719c:	c304      	stmia	r3!, {r2}
 801719e:	e7e8      	b.n	8017172 <__mdiff+0x96>
 80171a0:	3e01      	subs	r6, #1
 80171a2:	e7ea      	b.n	801717a <__mdiff+0x9e>

080171a4 <__ulp>:
 80171a4:	000b      	movs	r3, r1
 80171a6:	4910      	ldr	r1, [pc, #64]	; (80171e8 <__ulp+0x44>)
 80171a8:	b510      	push	{r4, lr}
 80171aa:	4019      	ands	r1, r3
 80171ac:	4b0f      	ldr	r3, [pc, #60]	; (80171ec <__ulp+0x48>)
 80171ae:	18c9      	adds	r1, r1, r3
 80171b0:	2900      	cmp	r1, #0
 80171b2:	dd04      	ble.n	80171be <__ulp+0x1a>
 80171b4:	2200      	movs	r2, #0
 80171b6:	000b      	movs	r3, r1
 80171b8:	0010      	movs	r0, r2
 80171ba:	0019      	movs	r1, r3
 80171bc:	bd10      	pop	{r4, pc}
 80171be:	4249      	negs	r1, r1
 80171c0:	1509      	asrs	r1, r1, #20
 80171c2:	2200      	movs	r2, #0
 80171c4:	2300      	movs	r3, #0
 80171c6:	2913      	cmp	r1, #19
 80171c8:	dc04      	bgt.n	80171d4 <__ulp+0x30>
 80171ca:	2080      	movs	r0, #128	; 0x80
 80171cc:	0300      	lsls	r0, r0, #12
 80171ce:	4108      	asrs	r0, r1
 80171d0:	0003      	movs	r3, r0
 80171d2:	e7f1      	b.n	80171b8 <__ulp+0x14>
 80171d4:	3914      	subs	r1, #20
 80171d6:	2001      	movs	r0, #1
 80171d8:	291e      	cmp	r1, #30
 80171da:	dc02      	bgt.n	80171e2 <__ulp+0x3e>
 80171dc:	241f      	movs	r4, #31
 80171de:	1a61      	subs	r1, r4, r1
 80171e0:	4088      	lsls	r0, r1
 80171e2:	0002      	movs	r2, r0
 80171e4:	e7e8      	b.n	80171b8 <__ulp+0x14>
 80171e6:	46c0      	nop			; (mov r8, r8)
 80171e8:	7ff00000 	.word	0x7ff00000
 80171ec:	fcc00000 	.word	0xfcc00000

080171f0 <__b2d>:
 80171f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80171f2:	0006      	movs	r6, r0
 80171f4:	6903      	ldr	r3, [r0, #16]
 80171f6:	3614      	adds	r6, #20
 80171f8:	009b      	lsls	r3, r3, #2
 80171fa:	18f3      	adds	r3, r6, r3
 80171fc:	1f1d      	subs	r5, r3, #4
 80171fe:	682c      	ldr	r4, [r5, #0]
 8017200:	000f      	movs	r7, r1
 8017202:	0020      	movs	r0, r4
 8017204:	9301      	str	r3, [sp, #4]
 8017206:	f7ff fdc9 	bl	8016d9c <__hi0bits>
 801720a:	2320      	movs	r3, #32
 801720c:	1a1b      	subs	r3, r3, r0
 801720e:	603b      	str	r3, [r7, #0]
 8017210:	491c      	ldr	r1, [pc, #112]	; (8017284 <__b2d+0x94>)
 8017212:	280a      	cmp	r0, #10
 8017214:	dc16      	bgt.n	8017244 <__b2d+0x54>
 8017216:	230b      	movs	r3, #11
 8017218:	0027      	movs	r7, r4
 801721a:	1a1b      	subs	r3, r3, r0
 801721c:	40df      	lsrs	r7, r3
 801721e:	4339      	orrs	r1, r7
 8017220:	469c      	mov	ip, r3
 8017222:	000b      	movs	r3, r1
 8017224:	2100      	movs	r1, #0
 8017226:	42ae      	cmp	r6, r5
 8017228:	d202      	bcs.n	8017230 <__b2d+0x40>
 801722a:	9901      	ldr	r1, [sp, #4]
 801722c:	3908      	subs	r1, #8
 801722e:	6809      	ldr	r1, [r1, #0]
 8017230:	3015      	adds	r0, #21
 8017232:	4084      	lsls	r4, r0
 8017234:	4660      	mov	r0, ip
 8017236:	40c1      	lsrs	r1, r0
 8017238:	430c      	orrs	r4, r1
 801723a:	0022      	movs	r2, r4
 801723c:	0010      	movs	r0, r2
 801723e:	0019      	movs	r1, r3
 8017240:	b003      	add	sp, #12
 8017242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017244:	2700      	movs	r7, #0
 8017246:	42ae      	cmp	r6, r5
 8017248:	d202      	bcs.n	8017250 <__b2d+0x60>
 801724a:	9d01      	ldr	r5, [sp, #4]
 801724c:	3d08      	subs	r5, #8
 801724e:	682f      	ldr	r7, [r5, #0]
 8017250:	380b      	subs	r0, #11
 8017252:	4684      	mov	ip, r0
 8017254:	1e03      	subs	r3, r0, #0
 8017256:	d012      	beq.n	801727e <__b2d+0x8e>
 8017258:	409c      	lsls	r4, r3
 801725a:	2020      	movs	r0, #32
 801725c:	4321      	orrs	r1, r4
 801725e:	003c      	movs	r4, r7
 8017260:	1ac0      	subs	r0, r0, r3
 8017262:	40c4      	lsrs	r4, r0
 8017264:	4321      	orrs	r1, r4
 8017266:	000b      	movs	r3, r1
 8017268:	2100      	movs	r1, #0
 801726a:	42b5      	cmp	r5, r6
 801726c:	d901      	bls.n	8017272 <__b2d+0x82>
 801726e:	3d04      	subs	r5, #4
 8017270:	6829      	ldr	r1, [r5, #0]
 8017272:	4664      	mov	r4, ip
 8017274:	40c1      	lsrs	r1, r0
 8017276:	40a7      	lsls	r7, r4
 8017278:	430f      	orrs	r7, r1
 801727a:	003a      	movs	r2, r7
 801727c:	e7de      	b.n	801723c <__b2d+0x4c>
 801727e:	4321      	orrs	r1, r4
 8017280:	000b      	movs	r3, r1
 8017282:	e7fa      	b.n	801727a <__b2d+0x8a>
 8017284:	3ff00000 	.word	0x3ff00000

08017288 <__d2b>:
 8017288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801728a:	001d      	movs	r5, r3
 801728c:	2101      	movs	r1, #1
 801728e:	0014      	movs	r4, r2
 8017290:	9f08      	ldr	r7, [sp, #32]
 8017292:	f7ff fcb6 	bl	8016c02 <_Balloc>
 8017296:	032b      	lsls	r3, r5, #12
 8017298:	006d      	lsls	r5, r5, #1
 801729a:	0006      	movs	r6, r0
 801729c:	0b1b      	lsrs	r3, r3, #12
 801729e:	0d6d      	lsrs	r5, r5, #21
 80172a0:	d124      	bne.n	80172ec <__d2b+0x64>
 80172a2:	9301      	str	r3, [sp, #4]
 80172a4:	2c00      	cmp	r4, #0
 80172a6:	d027      	beq.n	80172f8 <__d2b+0x70>
 80172a8:	4668      	mov	r0, sp
 80172aa:	9400      	str	r4, [sp, #0]
 80172ac:	f7ff fd90 	bl	8016dd0 <__lo0bits>
 80172b0:	9c00      	ldr	r4, [sp, #0]
 80172b2:	2800      	cmp	r0, #0
 80172b4:	d01e      	beq.n	80172f4 <__d2b+0x6c>
 80172b6:	9b01      	ldr	r3, [sp, #4]
 80172b8:	2120      	movs	r1, #32
 80172ba:	001a      	movs	r2, r3
 80172bc:	1a09      	subs	r1, r1, r0
 80172be:	408a      	lsls	r2, r1
 80172c0:	40c3      	lsrs	r3, r0
 80172c2:	4322      	orrs	r2, r4
 80172c4:	6172      	str	r2, [r6, #20]
 80172c6:	9301      	str	r3, [sp, #4]
 80172c8:	9c01      	ldr	r4, [sp, #4]
 80172ca:	61b4      	str	r4, [r6, #24]
 80172cc:	1e63      	subs	r3, r4, #1
 80172ce:	419c      	sbcs	r4, r3
 80172d0:	3401      	adds	r4, #1
 80172d2:	6134      	str	r4, [r6, #16]
 80172d4:	2d00      	cmp	r5, #0
 80172d6:	d018      	beq.n	801730a <__d2b+0x82>
 80172d8:	4b12      	ldr	r3, [pc, #72]	; (8017324 <__d2b+0x9c>)
 80172da:	18ed      	adds	r5, r5, r3
 80172dc:	2335      	movs	r3, #53	; 0x35
 80172de:	182d      	adds	r5, r5, r0
 80172e0:	603d      	str	r5, [r7, #0]
 80172e2:	1a18      	subs	r0, r3, r0
 80172e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172e6:	6018      	str	r0, [r3, #0]
 80172e8:	0030      	movs	r0, r6
 80172ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80172ec:	2280      	movs	r2, #128	; 0x80
 80172ee:	0352      	lsls	r2, r2, #13
 80172f0:	4313      	orrs	r3, r2
 80172f2:	e7d6      	b.n	80172a2 <__d2b+0x1a>
 80172f4:	6174      	str	r4, [r6, #20]
 80172f6:	e7e7      	b.n	80172c8 <__d2b+0x40>
 80172f8:	a801      	add	r0, sp, #4
 80172fa:	f7ff fd69 	bl	8016dd0 <__lo0bits>
 80172fe:	2401      	movs	r4, #1
 8017300:	9b01      	ldr	r3, [sp, #4]
 8017302:	6134      	str	r4, [r6, #16]
 8017304:	6173      	str	r3, [r6, #20]
 8017306:	3020      	adds	r0, #32
 8017308:	e7e4      	b.n	80172d4 <__d2b+0x4c>
 801730a:	4b07      	ldr	r3, [pc, #28]	; (8017328 <__d2b+0xa0>)
 801730c:	18c0      	adds	r0, r0, r3
 801730e:	4b07      	ldr	r3, [pc, #28]	; (801732c <__d2b+0xa4>)
 8017310:	6038      	str	r0, [r7, #0]
 8017312:	18e3      	adds	r3, r4, r3
 8017314:	009b      	lsls	r3, r3, #2
 8017316:	18f3      	adds	r3, r6, r3
 8017318:	6958      	ldr	r0, [r3, #20]
 801731a:	f7ff fd3f 	bl	8016d9c <__hi0bits>
 801731e:	0164      	lsls	r4, r4, #5
 8017320:	1a20      	subs	r0, r4, r0
 8017322:	e7df      	b.n	80172e4 <__d2b+0x5c>
 8017324:	fffffbcd 	.word	0xfffffbcd
 8017328:	fffffbce 	.word	0xfffffbce
 801732c:	3fffffff 	.word	0x3fffffff

08017330 <__ratio>:
 8017330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017332:	b085      	sub	sp, #20
 8017334:	000f      	movs	r7, r1
 8017336:	a902      	add	r1, sp, #8
 8017338:	0006      	movs	r6, r0
 801733a:	f7ff ff59 	bl	80171f0 <__b2d>
 801733e:	0004      	movs	r4, r0
 8017340:	000d      	movs	r5, r1
 8017342:	0038      	movs	r0, r7
 8017344:	a903      	add	r1, sp, #12
 8017346:	9400      	str	r4, [sp, #0]
 8017348:	9501      	str	r5, [sp, #4]
 801734a:	f7ff ff51 	bl	80171f0 <__b2d>
 801734e:	6936      	ldr	r6, [r6, #16]
 8017350:	693f      	ldr	r7, [r7, #16]
 8017352:	0002      	movs	r2, r0
 8017354:	1bf7      	subs	r7, r6, r7
 8017356:	017e      	lsls	r6, r7, #5
 8017358:	46b4      	mov	ip, r6
 801735a:	9f03      	ldr	r7, [sp, #12]
 801735c:	9e02      	ldr	r6, [sp, #8]
 801735e:	000b      	movs	r3, r1
 8017360:	1bf6      	subs	r6, r6, r7
 8017362:	4466      	add	r6, ip
 8017364:	0537      	lsls	r7, r6, #20
 8017366:	2e00      	cmp	r6, #0
 8017368:	dd07      	ble.n	801737a <__ratio+0x4a>
 801736a:	1979      	adds	r1, r7, r5
 801736c:	9101      	str	r1, [sp, #4]
 801736e:	9800      	ldr	r0, [sp, #0]
 8017370:	9901      	ldr	r1, [sp, #4]
 8017372:	f7ea f97b 	bl	800166c <__aeabi_ddiv>
 8017376:	b005      	add	sp, #20
 8017378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801737a:	1bcb      	subs	r3, r1, r7
 801737c:	e7f7      	b.n	801736e <__ratio+0x3e>

0801737e <__copybits>:
 801737e:	0013      	movs	r3, r2
 8017380:	3901      	subs	r1, #1
 8017382:	b510      	push	{r4, lr}
 8017384:	1149      	asrs	r1, r1, #5
 8017386:	6912      	ldr	r2, [r2, #16]
 8017388:	3101      	adds	r1, #1
 801738a:	0089      	lsls	r1, r1, #2
 801738c:	3314      	adds	r3, #20
 801738e:	0092      	lsls	r2, r2, #2
 8017390:	1841      	adds	r1, r0, r1
 8017392:	189a      	adds	r2, r3, r2
 8017394:	429a      	cmp	r2, r3
 8017396:	d803      	bhi.n	80173a0 <__copybits+0x22>
 8017398:	2300      	movs	r3, #0
 801739a:	4281      	cmp	r1, r0
 801739c:	d803      	bhi.n	80173a6 <__copybits+0x28>
 801739e:	bd10      	pop	{r4, pc}
 80173a0:	cb10      	ldmia	r3!, {r4}
 80173a2:	c010      	stmia	r0!, {r4}
 80173a4:	e7f6      	b.n	8017394 <__copybits+0x16>
 80173a6:	c008      	stmia	r0!, {r3}
 80173a8:	e7f7      	b.n	801739a <__copybits+0x1c>

080173aa <__any_on>:
 80173aa:	0002      	movs	r2, r0
 80173ac:	6900      	ldr	r0, [r0, #16]
 80173ae:	b510      	push	{r4, lr}
 80173b0:	3214      	adds	r2, #20
 80173b2:	114b      	asrs	r3, r1, #5
 80173b4:	4298      	cmp	r0, r3
 80173b6:	db12      	blt.n	80173de <__any_on+0x34>
 80173b8:	dd0b      	ble.n	80173d2 <__any_on+0x28>
 80173ba:	201f      	movs	r0, #31
 80173bc:	4001      	ands	r1, r0
 80173be:	d008      	beq.n	80173d2 <__any_on+0x28>
 80173c0:	0098      	lsls	r0, r3, #2
 80173c2:	5884      	ldr	r4, [r0, r2]
 80173c4:	0020      	movs	r0, r4
 80173c6:	40c8      	lsrs	r0, r1
 80173c8:	4088      	lsls	r0, r1
 80173ca:	0001      	movs	r1, r0
 80173cc:	2001      	movs	r0, #1
 80173ce:	428c      	cmp	r4, r1
 80173d0:	d104      	bne.n	80173dc <__any_on+0x32>
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	18d3      	adds	r3, r2, r3
 80173d6:	4293      	cmp	r3, r2
 80173d8:	d803      	bhi.n	80173e2 <__any_on+0x38>
 80173da:	2000      	movs	r0, #0
 80173dc:	bd10      	pop	{r4, pc}
 80173de:	0003      	movs	r3, r0
 80173e0:	e7f7      	b.n	80173d2 <__any_on+0x28>
 80173e2:	3b04      	subs	r3, #4
 80173e4:	6819      	ldr	r1, [r3, #0]
 80173e6:	2900      	cmp	r1, #0
 80173e8:	d0f5      	beq.n	80173d6 <__any_on+0x2c>
 80173ea:	2001      	movs	r0, #1
 80173ec:	e7f6      	b.n	80173dc <__any_on+0x32>

080173ee <_calloc_r>:
 80173ee:	434a      	muls	r2, r1
 80173f0:	b570      	push	{r4, r5, r6, lr}
 80173f2:	0011      	movs	r1, r2
 80173f4:	0014      	movs	r4, r2
 80173f6:	f7fc fb73 	bl	8013ae0 <_malloc_r>
 80173fa:	1e05      	subs	r5, r0, #0
 80173fc:	d003      	beq.n	8017406 <_calloc_r+0x18>
 80173fe:	0022      	movs	r2, r4
 8017400:	2100      	movs	r1, #0
 8017402:	f7fc fb1b 	bl	8013a3c <memset>
 8017406:	0028      	movs	r0, r5
 8017408:	bd70      	pop	{r4, r5, r6, pc}

0801740a <_realloc_r>:
 801740a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801740c:	0007      	movs	r7, r0
 801740e:	000d      	movs	r5, r1
 8017410:	0016      	movs	r6, r2
 8017412:	2900      	cmp	r1, #0
 8017414:	d105      	bne.n	8017422 <_realloc_r+0x18>
 8017416:	0011      	movs	r1, r2
 8017418:	f7fc fb62 	bl	8013ae0 <_malloc_r>
 801741c:	0004      	movs	r4, r0
 801741e:	0020      	movs	r0, r4
 8017420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017422:	2a00      	cmp	r2, #0
 8017424:	d103      	bne.n	801742e <_realloc_r+0x24>
 8017426:	f7fc fb11 	bl	8013a4c <_free_r>
 801742a:	0034      	movs	r4, r6
 801742c:	e7f7      	b.n	801741e <_realloc_r+0x14>
 801742e:	f000 f986 	bl	801773e <_malloc_usable_size_r>
 8017432:	002c      	movs	r4, r5
 8017434:	42b0      	cmp	r0, r6
 8017436:	d2f2      	bcs.n	801741e <_realloc_r+0x14>
 8017438:	0031      	movs	r1, r6
 801743a:	0038      	movs	r0, r7
 801743c:	f7fc fb50 	bl	8013ae0 <_malloc_r>
 8017440:	1e04      	subs	r4, r0, #0
 8017442:	d0ec      	beq.n	801741e <_realloc_r+0x14>
 8017444:	0029      	movs	r1, r5
 8017446:	0032      	movs	r2, r6
 8017448:	f7fc faef 	bl	8013a2a <memcpy>
 801744c:	0029      	movs	r1, r5
 801744e:	0038      	movs	r0, r7
 8017450:	f7fc fafc 	bl	8013a4c <_free_r>
 8017454:	e7e3      	b.n	801741e <_realloc_r+0x14>
	...

08017458 <__ssputs_r>:
 8017458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801745a:	688e      	ldr	r6, [r1, #8]
 801745c:	b085      	sub	sp, #20
 801745e:	0007      	movs	r7, r0
 8017460:	000c      	movs	r4, r1
 8017462:	9203      	str	r2, [sp, #12]
 8017464:	9301      	str	r3, [sp, #4]
 8017466:	429e      	cmp	r6, r3
 8017468:	d83c      	bhi.n	80174e4 <__ssputs_r+0x8c>
 801746a:	2390      	movs	r3, #144	; 0x90
 801746c:	898a      	ldrh	r2, [r1, #12]
 801746e:	00db      	lsls	r3, r3, #3
 8017470:	421a      	tst	r2, r3
 8017472:	d034      	beq.n	80174de <__ssputs_r+0x86>
 8017474:	2503      	movs	r5, #3
 8017476:	6909      	ldr	r1, [r1, #16]
 8017478:	6823      	ldr	r3, [r4, #0]
 801747a:	1a5b      	subs	r3, r3, r1
 801747c:	9302      	str	r3, [sp, #8]
 801747e:	6963      	ldr	r3, [r4, #20]
 8017480:	9802      	ldr	r0, [sp, #8]
 8017482:	435d      	muls	r5, r3
 8017484:	0feb      	lsrs	r3, r5, #31
 8017486:	195d      	adds	r5, r3, r5
 8017488:	9b01      	ldr	r3, [sp, #4]
 801748a:	106d      	asrs	r5, r5, #1
 801748c:	3301      	adds	r3, #1
 801748e:	181b      	adds	r3, r3, r0
 8017490:	42ab      	cmp	r3, r5
 8017492:	d900      	bls.n	8017496 <__ssputs_r+0x3e>
 8017494:	001d      	movs	r5, r3
 8017496:	0553      	lsls	r3, r2, #21
 8017498:	d532      	bpl.n	8017500 <__ssputs_r+0xa8>
 801749a:	0029      	movs	r1, r5
 801749c:	0038      	movs	r0, r7
 801749e:	f7fc fb1f 	bl	8013ae0 <_malloc_r>
 80174a2:	1e06      	subs	r6, r0, #0
 80174a4:	d109      	bne.n	80174ba <__ssputs_r+0x62>
 80174a6:	230c      	movs	r3, #12
 80174a8:	603b      	str	r3, [r7, #0]
 80174aa:	2340      	movs	r3, #64	; 0x40
 80174ac:	2001      	movs	r0, #1
 80174ae:	89a2      	ldrh	r2, [r4, #12]
 80174b0:	4240      	negs	r0, r0
 80174b2:	4313      	orrs	r3, r2
 80174b4:	81a3      	strh	r3, [r4, #12]
 80174b6:	b005      	add	sp, #20
 80174b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ba:	9a02      	ldr	r2, [sp, #8]
 80174bc:	6921      	ldr	r1, [r4, #16]
 80174be:	f7fc fab4 	bl	8013a2a <memcpy>
 80174c2:	89a3      	ldrh	r3, [r4, #12]
 80174c4:	4a14      	ldr	r2, [pc, #80]	; (8017518 <__ssputs_r+0xc0>)
 80174c6:	401a      	ands	r2, r3
 80174c8:	2380      	movs	r3, #128	; 0x80
 80174ca:	4313      	orrs	r3, r2
 80174cc:	81a3      	strh	r3, [r4, #12]
 80174ce:	9b02      	ldr	r3, [sp, #8]
 80174d0:	6126      	str	r6, [r4, #16]
 80174d2:	18f6      	adds	r6, r6, r3
 80174d4:	6026      	str	r6, [r4, #0]
 80174d6:	6165      	str	r5, [r4, #20]
 80174d8:	9e01      	ldr	r6, [sp, #4]
 80174da:	1aed      	subs	r5, r5, r3
 80174dc:	60a5      	str	r5, [r4, #8]
 80174de:	9b01      	ldr	r3, [sp, #4]
 80174e0:	429e      	cmp	r6, r3
 80174e2:	d900      	bls.n	80174e6 <__ssputs_r+0x8e>
 80174e4:	9e01      	ldr	r6, [sp, #4]
 80174e6:	0032      	movs	r2, r6
 80174e8:	9903      	ldr	r1, [sp, #12]
 80174ea:	6820      	ldr	r0, [r4, #0]
 80174ec:	f000 f914 	bl	8017718 <memmove>
 80174f0:	68a3      	ldr	r3, [r4, #8]
 80174f2:	2000      	movs	r0, #0
 80174f4:	1b9b      	subs	r3, r3, r6
 80174f6:	60a3      	str	r3, [r4, #8]
 80174f8:	6823      	ldr	r3, [r4, #0]
 80174fa:	199e      	adds	r6, r3, r6
 80174fc:	6026      	str	r6, [r4, #0]
 80174fe:	e7da      	b.n	80174b6 <__ssputs_r+0x5e>
 8017500:	002a      	movs	r2, r5
 8017502:	0038      	movs	r0, r7
 8017504:	f7ff ff81 	bl	801740a <_realloc_r>
 8017508:	1e06      	subs	r6, r0, #0
 801750a:	d1e0      	bne.n	80174ce <__ssputs_r+0x76>
 801750c:	6921      	ldr	r1, [r4, #16]
 801750e:	0038      	movs	r0, r7
 8017510:	f7fc fa9c 	bl	8013a4c <_free_r>
 8017514:	e7c7      	b.n	80174a6 <__ssputs_r+0x4e>
 8017516:	46c0      	nop			; (mov r8, r8)
 8017518:	fffffb7f 	.word	0xfffffb7f

0801751c <_svfiprintf_r>:
 801751c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801751e:	b0a1      	sub	sp, #132	; 0x84
 8017520:	9003      	str	r0, [sp, #12]
 8017522:	001d      	movs	r5, r3
 8017524:	898b      	ldrh	r3, [r1, #12]
 8017526:	000f      	movs	r7, r1
 8017528:	0016      	movs	r6, r2
 801752a:	061b      	lsls	r3, r3, #24
 801752c:	d511      	bpl.n	8017552 <_svfiprintf_r+0x36>
 801752e:	690b      	ldr	r3, [r1, #16]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d10e      	bne.n	8017552 <_svfiprintf_r+0x36>
 8017534:	2140      	movs	r1, #64	; 0x40
 8017536:	f7fc fad3 	bl	8013ae0 <_malloc_r>
 801753a:	6038      	str	r0, [r7, #0]
 801753c:	6138      	str	r0, [r7, #16]
 801753e:	2800      	cmp	r0, #0
 8017540:	d105      	bne.n	801754e <_svfiprintf_r+0x32>
 8017542:	230c      	movs	r3, #12
 8017544:	9a03      	ldr	r2, [sp, #12]
 8017546:	3801      	subs	r0, #1
 8017548:	6013      	str	r3, [r2, #0]
 801754a:	b021      	add	sp, #132	; 0x84
 801754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801754e:	2340      	movs	r3, #64	; 0x40
 8017550:	617b      	str	r3, [r7, #20]
 8017552:	2300      	movs	r3, #0
 8017554:	ac08      	add	r4, sp, #32
 8017556:	6163      	str	r3, [r4, #20]
 8017558:	3320      	adds	r3, #32
 801755a:	7663      	strb	r3, [r4, #25]
 801755c:	3310      	adds	r3, #16
 801755e:	76a3      	strb	r3, [r4, #26]
 8017560:	9507      	str	r5, [sp, #28]
 8017562:	0035      	movs	r5, r6
 8017564:	782b      	ldrb	r3, [r5, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d001      	beq.n	801756e <_svfiprintf_r+0x52>
 801756a:	2b25      	cmp	r3, #37	; 0x25
 801756c:	d146      	bne.n	80175fc <_svfiprintf_r+0xe0>
 801756e:	1bab      	subs	r3, r5, r6
 8017570:	9305      	str	r3, [sp, #20]
 8017572:	d00c      	beq.n	801758e <_svfiprintf_r+0x72>
 8017574:	0032      	movs	r2, r6
 8017576:	0039      	movs	r1, r7
 8017578:	9803      	ldr	r0, [sp, #12]
 801757a:	f7ff ff6d 	bl	8017458 <__ssputs_r>
 801757e:	1c43      	adds	r3, r0, #1
 8017580:	d100      	bne.n	8017584 <_svfiprintf_r+0x68>
 8017582:	e0ae      	b.n	80176e2 <_svfiprintf_r+0x1c6>
 8017584:	6962      	ldr	r2, [r4, #20]
 8017586:	9b05      	ldr	r3, [sp, #20]
 8017588:	4694      	mov	ip, r2
 801758a:	4463      	add	r3, ip
 801758c:	6163      	str	r3, [r4, #20]
 801758e:	782b      	ldrb	r3, [r5, #0]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d100      	bne.n	8017596 <_svfiprintf_r+0x7a>
 8017594:	e0a5      	b.n	80176e2 <_svfiprintf_r+0x1c6>
 8017596:	2201      	movs	r2, #1
 8017598:	2300      	movs	r3, #0
 801759a:	4252      	negs	r2, r2
 801759c:	6062      	str	r2, [r4, #4]
 801759e:	a904      	add	r1, sp, #16
 80175a0:	3254      	adds	r2, #84	; 0x54
 80175a2:	1852      	adds	r2, r2, r1
 80175a4:	1c6e      	adds	r6, r5, #1
 80175a6:	6023      	str	r3, [r4, #0]
 80175a8:	60e3      	str	r3, [r4, #12]
 80175aa:	60a3      	str	r3, [r4, #8]
 80175ac:	7013      	strb	r3, [r2, #0]
 80175ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80175b0:	7831      	ldrb	r1, [r6, #0]
 80175b2:	2205      	movs	r2, #5
 80175b4:	4853      	ldr	r0, [pc, #332]	; (8017704 <_svfiprintf_r+0x1e8>)
 80175b6:	f7ff fb17 	bl	8016be8 <memchr>
 80175ba:	1c75      	adds	r5, r6, #1
 80175bc:	2800      	cmp	r0, #0
 80175be:	d11f      	bne.n	8017600 <_svfiprintf_r+0xe4>
 80175c0:	6822      	ldr	r2, [r4, #0]
 80175c2:	06d3      	lsls	r3, r2, #27
 80175c4:	d504      	bpl.n	80175d0 <_svfiprintf_r+0xb4>
 80175c6:	2353      	movs	r3, #83	; 0x53
 80175c8:	a904      	add	r1, sp, #16
 80175ca:	185b      	adds	r3, r3, r1
 80175cc:	2120      	movs	r1, #32
 80175ce:	7019      	strb	r1, [r3, #0]
 80175d0:	0713      	lsls	r3, r2, #28
 80175d2:	d504      	bpl.n	80175de <_svfiprintf_r+0xc2>
 80175d4:	2353      	movs	r3, #83	; 0x53
 80175d6:	a904      	add	r1, sp, #16
 80175d8:	185b      	adds	r3, r3, r1
 80175da:	212b      	movs	r1, #43	; 0x2b
 80175dc:	7019      	strb	r1, [r3, #0]
 80175de:	7833      	ldrb	r3, [r6, #0]
 80175e0:	2b2a      	cmp	r3, #42	; 0x2a
 80175e2:	d016      	beq.n	8017612 <_svfiprintf_r+0xf6>
 80175e4:	0035      	movs	r5, r6
 80175e6:	2100      	movs	r1, #0
 80175e8:	200a      	movs	r0, #10
 80175ea:	68e3      	ldr	r3, [r4, #12]
 80175ec:	782a      	ldrb	r2, [r5, #0]
 80175ee:	1c6e      	adds	r6, r5, #1
 80175f0:	3a30      	subs	r2, #48	; 0x30
 80175f2:	2a09      	cmp	r2, #9
 80175f4:	d94e      	bls.n	8017694 <_svfiprintf_r+0x178>
 80175f6:	2900      	cmp	r1, #0
 80175f8:	d018      	beq.n	801762c <_svfiprintf_r+0x110>
 80175fa:	e010      	b.n	801761e <_svfiprintf_r+0x102>
 80175fc:	3501      	adds	r5, #1
 80175fe:	e7b1      	b.n	8017564 <_svfiprintf_r+0x48>
 8017600:	4b40      	ldr	r3, [pc, #256]	; (8017704 <_svfiprintf_r+0x1e8>)
 8017602:	6822      	ldr	r2, [r4, #0]
 8017604:	1ac0      	subs	r0, r0, r3
 8017606:	2301      	movs	r3, #1
 8017608:	4083      	lsls	r3, r0
 801760a:	4313      	orrs	r3, r2
 801760c:	6023      	str	r3, [r4, #0]
 801760e:	002e      	movs	r6, r5
 8017610:	e7ce      	b.n	80175b0 <_svfiprintf_r+0x94>
 8017612:	9b07      	ldr	r3, [sp, #28]
 8017614:	1d19      	adds	r1, r3, #4
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	9107      	str	r1, [sp, #28]
 801761a:	2b00      	cmp	r3, #0
 801761c:	db01      	blt.n	8017622 <_svfiprintf_r+0x106>
 801761e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017620:	e004      	b.n	801762c <_svfiprintf_r+0x110>
 8017622:	425b      	negs	r3, r3
 8017624:	60e3      	str	r3, [r4, #12]
 8017626:	2302      	movs	r3, #2
 8017628:	4313      	orrs	r3, r2
 801762a:	6023      	str	r3, [r4, #0]
 801762c:	782b      	ldrb	r3, [r5, #0]
 801762e:	2b2e      	cmp	r3, #46	; 0x2e
 8017630:	d10a      	bne.n	8017648 <_svfiprintf_r+0x12c>
 8017632:	786b      	ldrb	r3, [r5, #1]
 8017634:	2b2a      	cmp	r3, #42	; 0x2a
 8017636:	d135      	bne.n	80176a4 <_svfiprintf_r+0x188>
 8017638:	9b07      	ldr	r3, [sp, #28]
 801763a:	3502      	adds	r5, #2
 801763c:	1d1a      	adds	r2, r3, #4
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	9207      	str	r2, [sp, #28]
 8017642:	2b00      	cmp	r3, #0
 8017644:	db2b      	blt.n	801769e <_svfiprintf_r+0x182>
 8017646:	9309      	str	r3, [sp, #36]	; 0x24
 8017648:	4e2f      	ldr	r6, [pc, #188]	; (8017708 <_svfiprintf_r+0x1ec>)
 801764a:	7829      	ldrb	r1, [r5, #0]
 801764c:	2203      	movs	r2, #3
 801764e:	0030      	movs	r0, r6
 8017650:	f7ff faca 	bl	8016be8 <memchr>
 8017654:	2800      	cmp	r0, #0
 8017656:	d006      	beq.n	8017666 <_svfiprintf_r+0x14a>
 8017658:	2340      	movs	r3, #64	; 0x40
 801765a:	1b80      	subs	r0, r0, r6
 801765c:	4083      	lsls	r3, r0
 801765e:	6822      	ldr	r2, [r4, #0]
 8017660:	3501      	adds	r5, #1
 8017662:	4313      	orrs	r3, r2
 8017664:	6023      	str	r3, [r4, #0]
 8017666:	7829      	ldrb	r1, [r5, #0]
 8017668:	2206      	movs	r2, #6
 801766a:	4828      	ldr	r0, [pc, #160]	; (801770c <_svfiprintf_r+0x1f0>)
 801766c:	1c6e      	adds	r6, r5, #1
 801766e:	7621      	strb	r1, [r4, #24]
 8017670:	f7ff faba 	bl	8016be8 <memchr>
 8017674:	2800      	cmp	r0, #0
 8017676:	d03c      	beq.n	80176f2 <_svfiprintf_r+0x1d6>
 8017678:	4b25      	ldr	r3, [pc, #148]	; (8017710 <_svfiprintf_r+0x1f4>)
 801767a:	2b00      	cmp	r3, #0
 801767c:	d125      	bne.n	80176ca <_svfiprintf_r+0x1ae>
 801767e:	2207      	movs	r2, #7
 8017680:	9b07      	ldr	r3, [sp, #28]
 8017682:	3307      	adds	r3, #7
 8017684:	4393      	bics	r3, r2
 8017686:	3308      	adds	r3, #8
 8017688:	9307      	str	r3, [sp, #28]
 801768a:	6963      	ldr	r3, [r4, #20]
 801768c:	9a04      	ldr	r2, [sp, #16]
 801768e:	189b      	adds	r3, r3, r2
 8017690:	6163      	str	r3, [r4, #20]
 8017692:	e766      	b.n	8017562 <_svfiprintf_r+0x46>
 8017694:	4343      	muls	r3, r0
 8017696:	2101      	movs	r1, #1
 8017698:	189b      	adds	r3, r3, r2
 801769a:	0035      	movs	r5, r6
 801769c:	e7a6      	b.n	80175ec <_svfiprintf_r+0xd0>
 801769e:	2301      	movs	r3, #1
 80176a0:	425b      	negs	r3, r3
 80176a2:	e7d0      	b.n	8017646 <_svfiprintf_r+0x12a>
 80176a4:	2300      	movs	r3, #0
 80176a6:	200a      	movs	r0, #10
 80176a8:	001a      	movs	r2, r3
 80176aa:	3501      	adds	r5, #1
 80176ac:	6063      	str	r3, [r4, #4]
 80176ae:	7829      	ldrb	r1, [r5, #0]
 80176b0:	1c6e      	adds	r6, r5, #1
 80176b2:	3930      	subs	r1, #48	; 0x30
 80176b4:	2909      	cmp	r1, #9
 80176b6:	d903      	bls.n	80176c0 <_svfiprintf_r+0x1a4>
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d0c5      	beq.n	8017648 <_svfiprintf_r+0x12c>
 80176bc:	9209      	str	r2, [sp, #36]	; 0x24
 80176be:	e7c3      	b.n	8017648 <_svfiprintf_r+0x12c>
 80176c0:	4342      	muls	r2, r0
 80176c2:	2301      	movs	r3, #1
 80176c4:	1852      	adds	r2, r2, r1
 80176c6:	0035      	movs	r5, r6
 80176c8:	e7f1      	b.n	80176ae <_svfiprintf_r+0x192>
 80176ca:	ab07      	add	r3, sp, #28
 80176cc:	9300      	str	r3, [sp, #0]
 80176ce:	003a      	movs	r2, r7
 80176d0:	4b10      	ldr	r3, [pc, #64]	; (8017714 <_svfiprintf_r+0x1f8>)
 80176d2:	0021      	movs	r1, r4
 80176d4:	9803      	ldr	r0, [sp, #12]
 80176d6:	f7fc fafd 	bl	8013cd4 <_printf_float>
 80176da:	9004      	str	r0, [sp, #16]
 80176dc:	9b04      	ldr	r3, [sp, #16]
 80176de:	3301      	adds	r3, #1
 80176e0:	d1d3      	bne.n	801768a <_svfiprintf_r+0x16e>
 80176e2:	89bb      	ldrh	r3, [r7, #12]
 80176e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80176e6:	065b      	lsls	r3, r3, #25
 80176e8:	d400      	bmi.n	80176ec <_svfiprintf_r+0x1d0>
 80176ea:	e72e      	b.n	801754a <_svfiprintf_r+0x2e>
 80176ec:	2001      	movs	r0, #1
 80176ee:	4240      	negs	r0, r0
 80176f0:	e72b      	b.n	801754a <_svfiprintf_r+0x2e>
 80176f2:	ab07      	add	r3, sp, #28
 80176f4:	9300      	str	r3, [sp, #0]
 80176f6:	003a      	movs	r2, r7
 80176f8:	4b06      	ldr	r3, [pc, #24]	; (8017714 <_svfiprintf_r+0x1f8>)
 80176fa:	0021      	movs	r1, r4
 80176fc:	9803      	ldr	r0, [sp, #12]
 80176fe:	f7fc fda3 	bl	8014248 <_printf_i>
 8017702:	e7ea      	b.n	80176da <_svfiprintf_r+0x1be>
 8017704:	0801acb4 	.word	0x0801acb4
 8017708:	0801acba 	.word	0x0801acba
 801770c:	0801acbe 	.word	0x0801acbe
 8017710:	08013cd5 	.word	0x08013cd5
 8017714:	08017459 	.word	0x08017459

08017718 <memmove>:
 8017718:	b510      	push	{r4, lr}
 801771a:	4288      	cmp	r0, r1
 801771c:	d902      	bls.n	8017724 <memmove+0xc>
 801771e:	188b      	adds	r3, r1, r2
 8017720:	4298      	cmp	r0, r3
 8017722:	d303      	bcc.n	801772c <memmove+0x14>
 8017724:	2300      	movs	r3, #0
 8017726:	e007      	b.n	8017738 <memmove+0x20>
 8017728:	5c8b      	ldrb	r3, [r1, r2]
 801772a:	5483      	strb	r3, [r0, r2]
 801772c:	3a01      	subs	r2, #1
 801772e:	d2fb      	bcs.n	8017728 <memmove+0x10>
 8017730:	bd10      	pop	{r4, pc}
 8017732:	5ccc      	ldrb	r4, [r1, r3]
 8017734:	54c4      	strb	r4, [r0, r3]
 8017736:	3301      	adds	r3, #1
 8017738:	429a      	cmp	r2, r3
 801773a:	d1fa      	bne.n	8017732 <memmove+0x1a>
 801773c:	e7f8      	b.n	8017730 <memmove+0x18>

0801773e <_malloc_usable_size_r>:
 801773e:	1f0b      	subs	r3, r1, #4
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	1f18      	subs	r0, r3, #4
 8017744:	2b00      	cmp	r3, #0
 8017746:	da01      	bge.n	801774c <_malloc_usable_size_r+0xe>
 8017748:	580b      	ldr	r3, [r1, r0]
 801774a:	18c0      	adds	r0, r0, r3
 801774c:	4770      	bx	lr
	...

08017750 <_sbrk>:
 8017750:	4b05      	ldr	r3, [pc, #20]	; (8017768 <_sbrk+0x18>)
 8017752:	0002      	movs	r2, r0
 8017754:	6819      	ldr	r1, [r3, #0]
 8017756:	2900      	cmp	r1, #0
 8017758:	d101      	bne.n	801775e <_sbrk+0xe>
 801775a:	4904      	ldr	r1, [pc, #16]	; (801776c <_sbrk+0x1c>)
 801775c:	6019      	str	r1, [r3, #0]
 801775e:	6818      	ldr	r0, [r3, #0]
 8017760:	1882      	adds	r2, r0, r2
 8017762:	601a      	str	r2, [r3, #0]
 8017764:	4770      	bx	lr
 8017766:	46c0      	nop			; (mov r8, r8)
 8017768:	200060ac 	.word	0x200060ac
 801776c:	20006680 	.word	0x20006680

08017770 <_init>:
 8017770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017772:	46c0      	nop			; (mov r8, r8)
 8017774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017776:	bc08      	pop	{r3}
 8017778:	469e      	mov	lr, r3
 801777a:	4770      	bx	lr

0801777c <_fini>:
 801777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801777e:	46c0      	nop			; (mov r8, r8)
 8017780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017782:	bc08      	pop	{r3}
 8017784:	469e      	mov	lr, r3
 8017786:	4770      	bx	lr
