
H2AR3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018404  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035b0  080184c0  080184c0  000284c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba70  0801ba70  00030294  2**0
                  CONTENTS
  4 .ARM          00000000  0801ba70  0801ba70  00030294  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801ba70  0801ba70  00030294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba70  0801ba70  0002ba70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba74  0801ba74  0002ba74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801ba78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000288  2000000c  0801ba84  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006550  20000298  0801bd0c  00030298  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200067e8  0801bd0c  000367e8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030294  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005b545  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009151  00000000  00000000  0008b801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001f1cf  00000000  00000000  00094952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d38  00000000  00000000  000b3b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002458  00000000  00000000  000b5860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b24e  00000000  00000000  000b7cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000397d1  00000000  00000000  000d2f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00083dd7  00000000  00000000  0010c6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001904ae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ce0  00000000  00000000  00190504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         000000cc  00000000  00000000  001971e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001b9  00000000  00000000  001972b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000298 	.word	0x20000298
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080184a8 	.word	0x080184a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000029c 	.word	0x2000029c
 8000100:	080184a8 	.word	0x080184a8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fdb5 	bl	8001fbc <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fcff 	bl	8001e60 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fda7 	bl	8001fbc <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd9d 	bl	8001fbc <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd21 	bl	8001ed8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd17 	bl	8001ed8 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 faf3 	bl	8000aac <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa77 	bl	80009c4 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fae5 	bl	8000aac <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fadb 	bl	8000aac <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa85 	bl	8000a14 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fa7b 	bl	8000a14 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_lmul>:
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	0415      	lsls	r5, r2, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	000f      	movs	r7, r1
 8000534:	0001      	movs	r1, r0
 8000536:	002e      	movs	r6, r5
 8000538:	46c6      	mov	lr, r8
 800053a:	4684      	mov	ip, r0
 800053c:	0400      	lsls	r0, r0, #16
 800053e:	0c14      	lsrs	r4, r2, #16
 8000540:	0c00      	lsrs	r0, r0, #16
 8000542:	0c09      	lsrs	r1, r1, #16
 8000544:	4346      	muls	r6, r0
 8000546:	434d      	muls	r5, r1
 8000548:	4360      	muls	r0, r4
 800054a:	4361      	muls	r1, r4
 800054c:	1940      	adds	r0, r0, r5
 800054e:	0c34      	lsrs	r4, r6, #16
 8000550:	1824      	adds	r4, r4, r0
 8000552:	b500      	push	{lr}
 8000554:	42a5      	cmp	r5, r4
 8000556:	d903      	bls.n	8000560 <__aeabi_lmul+0x34>
 8000558:	2080      	movs	r0, #128	; 0x80
 800055a:	0240      	lsls	r0, r0, #9
 800055c:	4680      	mov	r8, r0
 800055e:	4441      	add	r1, r8
 8000560:	0c25      	lsrs	r5, r4, #16
 8000562:	186d      	adds	r5, r5, r1
 8000564:	4661      	mov	r1, ip
 8000566:	4359      	muls	r1, r3
 8000568:	437a      	muls	r2, r7
 800056a:	0430      	lsls	r0, r6, #16
 800056c:	1949      	adds	r1, r1, r5
 800056e:	0424      	lsls	r4, r4, #16
 8000570:	0c00      	lsrs	r0, r0, #16
 8000572:	1820      	adds	r0, r4, r0
 8000574:	1889      	adds	r1, r1, r2
 8000576:	bc80      	pop	{r7}
 8000578:	46b8      	mov	r8, r7
 800057a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800057c <__aeabi_f2uiz>:
 800057c:	219e      	movs	r1, #158	; 0x9e
 800057e:	b510      	push	{r4, lr}
 8000580:	05c9      	lsls	r1, r1, #23
 8000582:	1c04      	adds	r4, r0, #0
 8000584:	f7ff ffc8 	bl	8000518 <__aeabi_fcmpge>
 8000588:	2800      	cmp	r0, #0
 800058a:	d103      	bne.n	8000594 <__aeabi_f2uiz+0x18>
 800058c:	1c20      	adds	r0, r4, #0
 800058e:	f000 fdb9 	bl	8001104 <__aeabi_f2iz>
 8000592:	bd10      	pop	{r4, pc}
 8000594:	219e      	movs	r1, #158	; 0x9e
 8000596:	1c20      	adds	r0, r4, #0
 8000598:	05c9      	lsls	r1, r1, #23
 800059a:	f000 fbeb 	bl	8000d74 <__aeabi_fsub>
 800059e:	f000 fdb1 	bl	8001104 <__aeabi_f2iz>
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	061b      	lsls	r3, r3, #24
 80005a6:	469c      	mov	ip, r3
 80005a8:	4460      	add	r0, ip
 80005aa:	e7f2      	b.n	8000592 <__aeabi_f2uiz+0x16>

080005ac <__aeabi_d2uiz>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	2200      	movs	r2, #0
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <__aeabi_d2uiz+0x38>)
 80005b2:	0004      	movs	r4, r0
 80005b4:	000d      	movs	r5, r1
 80005b6:	f7ff ff75 	bl	80004a4 <__aeabi_dcmpge>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d104      	bne.n	80005c8 <__aeabi_d2uiz+0x1c>
 80005be:	0020      	movs	r0, r4
 80005c0:	0029      	movs	r1, r5
 80005c2:	f002 fb87 	bl	8002cd4 <__aeabi_d2iz>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <__aeabi_d2uiz+0x38>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	0020      	movs	r0, r4
 80005ce:	0029      	movs	r1, r5
 80005d0:	f001 ffd0 	bl	8002574 <__aeabi_dsub>
 80005d4:	f002 fb7e 	bl	8002cd4 <__aeabi_d2iz>
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	061b      	lsls	r3, r3, #24
 80005dc:	469c      	mov	ip, r3
 80005de:	4460      	add	r0, ip
 80005e0:	e7f1      	b.n	80005c6 <__aeabi_d2uiz+0x1a>
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	41e00000 	.word	0x41e00000

080005e8 <__aeabi_d2lz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	0005      	movs	r5, r0
 80005ec:	000c      	movs	r4, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	2300      	movs	r3, #0
 80005f2:	0028      	movs	r0, r5
 80005f4:	0021      	movs	r1, r4
 80005f6:	f7ff ff37 	bl	8000468 <__aeabi_dcmplt>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d108      	bne.n	8000610 <__aeabi_d2lz+0x28>
 80005fe:	0028      	movs	r0, r5
 8000600:	0021      	movs	r1, r4
 8000602:	f000 f80f 	bl	8000624 <__aeabi_d2ulz>
 8000606:	0002      	movs	r2, r0
 8000608:	000b      	movs	r3, r1
 800060a:	0010      	movs	r0, r2
 800060c:	0019      	movs	r1, r3
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	061b      	lsls	r3, r3, #24
 8000614:	18e1      	adds	r1, r4, r3
 8000616:	0028      	movs	r0, r5
 8000618:	f000 f804 	bl	8000624 <__aeabi_d2ulz>
 800061c:	2300      	movs	r3, #0
 800061e:	4242      	negs	r2, r0
 8000620:	418b      	sbcs	r3, r1
 8000622:	e7f2      	b.n	800060a <__aeabi_d2lz+0x22>

08000624 <__aeabi_d2ulz>:
 8000624:	b570      	push	{r4, r5, r6, lr}
 8000626:	2200      	movs	r2, #0
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <__aeabi_d2ulz+0x34>)
 800062a:	000d      	movs	r5, r1
 800062c:	0004      	movs	r4, r0
 800062e:	f001 fd35 	bl	800209c <__aeabi_dmul>
 8000632:	f7ff ffbb 	bl	80005ac <__aeabi_d2uiz>
 8000636:	0006      	movs	r6, r0
 8000638:	f002 fbb2 	bl	8002da0 <__aeabi_ui2d>
 800063c:	2200      	movs	r2, #0
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <__aeabi_d2ulz+0x38>)
 8000640:	f001 fd2c 	bl	800209c <__aeabi_dmul>
 8000644:	0002      	movs	r2, r0
 8000646:	000b      	movs	r3, r1
 8000648:	0020      	movs	r0, r4
 800064a:	0029      	movs	r1, r5
 800064c:	f001 ff92 	bl	8002574 <__aeabi_dsub>
 8000650:	f7ff ffac 	bl	80005ac <__aeabi_d2uiz>
 8000654:	0031      	movs	r1, r6
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	3df00000 	.word	0x3df00000
 800065c:	41f00000 	.word	0x41f00000

08000660 <__aeabi_l2d>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	0006      	movs	r6, r0
 8000664:	0008      	movs	r0, r1
 8000666:	f002 fb6b 	bl	8002d40 <__aeabi_i2d>
 800066a:	2200      	movs	r2, #0
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <__aeabi_l2d+0x28>)
 800066e:	f001 fd15 	bl	800209c <__aeabi_dmul>
 8000672:	000d      	movs	r5, r1
 8000674:	0004      	movs	r4, r0
 8000676:	0030      	movs	r0, r6
 8000678:	f002 fb92 	bl	8002da0 <__aeabi_ui2d>
 800067c:	002b      	movs	r3, r5
 800067e:	0022      	movs	r2, r4
 8000680:	f000 fd9c 	bl	80011bc <__aeabi_dadd>
 8000684:	bd70      	pop	{r4, r5, r6, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	41f00000 	.word	0x41f00000

0800068c <__aeabi_fadd>:
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	4646      	mov	r6, r8
 8000690:	46d6      	mov	lr, sl
 8000692:	464f      	mov	r7, r9
 8000694:	024d      	lsls	r5, r1, #9
 8000696:	0242      	lsls	r2, r0, #9
 8000698:	b5c0      	push	{r6, r7, lr}
 800069a:	0a52      	lsrs	r2, r2, #9
 800069c:	0a6e      	lsrs	r6, r5, #9
 800069e:	0047      	lsls	r7, r0, #1
 80006a0:	46b0      	mov	r8, r6
 80006a2:	0e3f      	lsrs	r7, r7, #24
 80006a4:	004e      	lsls	r6, r1, #1
 80006a6:	0fc4      	lsrs	r4, r0, #31
 80006a8:	00d0      	lsls	r0, r2, #3
 80006aa:	4694      	mov	ip, r2
 80006ac:	003b      	movs	r3, r7
 80006ae:	4682      	mov	sl, r0
 80006b0:	0e36      	lsrs	r6, r6, #24
 80006b2:	0fc9      	lsrs	r1, r1, #31
 80006b4:	09ad      	lsrs	r5, r5, #6
 80006b6:	428c      	cmp	r4, r1
 80006b8:	d06d      	beq.n	8000796 <__aeabi_fadd+0x10a>
 80006ba:	1bb8      	subs	r0, r7, r6
 80006bc:	4681      	mov	r9, r0
 80006be:	2800      	cmp	r0, #0
 80006c0:	dd4d      	ble.n	800075e <__aeabi_fadd+0xd2>
 80006c2:	2e00      	cmp	r6, #0
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fadd+0x3c>
 80006c6:	e088      	b.n	80007da <__aeabi_fadd+0x14e>
 80006c8:	2fff      	cmp	r7, #255	; 0xff
 80006ca:	d05a      	beq.n	8000782 <__aeabi_fadd+0xf6>
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	04db      	lsls	r3, r3, #19
 80006d0:	431d      	orrs	r5, r3
 80006d2:	464b      	mov	r3, r9
 80006d4:	2201      	movs	r2, #1
 80006d6:	2b1b      	cmp	r3, #27
 80006d8:	dc0a      	bgt.n	80006f0 <__aeabi_fadd+0x64>
 80006da:	002b      	movs	r3, r5
 80006dc:	464a      	mov	r2, r9
 80006de:	4649      	mov	r1, r9
 80006e0:	40d3      	lsrs	r3, r2
 80006e2:	2220      	movs	r2, #32
 80006e4:	1a52      	subs	r2, r2, r1
 80006e6:	4095      	lsls	r5, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	1e55      	subs	r5, r2, #1
 80006ec:	41aa      	sbcs	r2, r5
 80006ee:	431a      	orrs	r2, r3
 80006f0:	4653      	mov	r3, sl
 80006f2:	1a9a      	subs	r2, r3, r2
 80006f4:	0153      	lsls	r3, r2, #5
 80006f6:	d400      	bmi.n	80006fa <__aeabi_fadd+0x6e>
 80006f8:	e0b9      	b.n	800086e <__aeabi_fadd+0x1e2>
 80006fa:	0192      	lsls	r2, r2, #6
 80006fc:	0996      	lsrs	r6, r2, #6
 80006fe:	0030      	movs	r0, r6
 8000700:	f002 fc44 	bl	8002f8c <__clzsi2>
 8000704:	3805      	subs	r0, #5
 8000706:	4086      	lsls	r6, r0
 8000708:	4287      	cmp	r7, r0
 800070a:	dd00      	ble.n	800070e <__aeabi_fadd+0x82>
 800070c:	e0d4      	b.n	80008b8 <__aeabi_fadd+0x22c>
 800070e:	0033      	movs	r3, r6
 8000710:	1bc7      	subs	r7, r0, r7
 8000712:	2020      	movs	r0, #32
 8000714:	3701      	adds	r7, #1
 8000716:	40fb      	lsrs	r3, r7
 8000718:	1bc7      	subs	r7, r0, r7
 800071a:	40be      	lsls	r6, r7
 800071c:	0032      	movs	r2, r6
 800071e:	1e56      	subs	r6, r2, #1
 8000720:	41b2      	sbcs	r2, r6
 8000722:	2700      	movs	r7, #0
 8000724:	431a      	orrs	r2, r3
 8000726:	0753      	lsls	r3, r2, #29
 8000728:	d004      	beq.n	8000734 <__aeabi_fadd+0xa8>
 800072a:	230f      	movs	r3, #15
 800072c:	4013      	ands	r3, r2
 800072e:	2b04      	cmp	r3, #4
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0xa8>
 8000732:	3204      	adds	r2, #4
 8000734:	0153      	lsls	r3, r2, #5
 8000736:	d400      	bmi.n	800073a <__aeabi_fadd+0xae>
 8000738:	e09c      	b.n	8000874 <__aeabi_fadd+0x1e8>
 800073a:	1c7b      	adds	r3, r7, #1
 800073c:	2ffe      	cmp	r7, #254	; 0xfe
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0xb6>
 8000740:	e09a      	b.n	8000878 <__aeabi_fadd+0x1ec>
 8000742:	0192      	lsls	r2, r2, #6
 8000744:	0a52      	lsrs	r2, r2, #9
 8000746:	4694      	mov	ip, r2
 8000748:	b2db      	uxtb	r3, r3
 800074a:	05d8      	lsls	r0, r3, #23
 800074c:	4663      	mov	r3, ip
 800074e:	07e4      	lsls	r4, r4, #31
 8000750:	4318      	orrs	r0, r3
 8000752:	4320      	orrs	r0, r4
 8000754:	bce0      	pop	{r5, r6, r7}
 8000756:	46ba      	mov	sl, r7
 8000758:	46b1      	mov	r9, r6
 800075a:	46a8      	mov	r8, r5
 800075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075e:	2800      	cmp	r0, #0
 8000760:	d049      	beq.n	80007f6 <__aeabi_fadd+0x16a>
 8000762:	1bf3      	subs	r3, r6, r7
 8000764:	2f00      	cmp	r7, #0
 8000766:	d000      	beq.n	800076a <__aeabi_fadd+0xde>
 8000768:	e0b6      	b.n	80008d8 <__aeabi_fadd+0x24c>
 800076a:	4652      	mov	r2, sl
 800076c:	2a00      	cmp	r2, #0
 800076e:	d060      	beq.n	8000832 <__aeabi_fadd+0x1a6>
 8000770:	3b01      	subs	r3, #1
 8000772:	2b00      	cmp	r3, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0xec>
 8000776:	e0fc      	b.n	8000972 <__aeabi_fadd+0x2e6>
 8000778:	2eff      	cmp	r6, #255	; 0xff
 800077a:	d000      	beq.n	800077e <__aeabi_fadd+0xf2>
 800077c:	e0b4      	b.n	80008e8 <__aeabi_fadd+0x25c>
 800077e:	000c      	movs	r4, r1
 8000780:	4642      	mov	r2, r8
 8000782:	2a00      	cmp	r2, #0
 8000784:	d078      	beq.n	8000878 <__aeabi_fadd+0x1ec>
 8000786:	2080      	movs	r0, #128	; 0x80
 8000788:	03c0      	lsls	r0, r0, #15
 800078a:	4310      	orrs	r0, r2
 800078c:	0242      	lsls	r2, r0, #9
 800078e:	0a53      	lsrs	r3, r2, #9
 8000790:	469c      	mov	ip, r3
 8000792:	23ff      	movs	r3, #255	; 0xff
 8000794:	e7d9      	b.n	800074a <__aeabi_fadd+0xbe>
 8000796:	1bb9      	subs	r1, r7, r6
 8000798:	2900      	cmp	r1, #0
 800079a:	dd71      	ble.n	8000880 <__aeabi_fadd+0x1f4>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d03f      	beq.n	8000820 <__aeabi_fadd+0x194>
 80007a0:	2fff      	cmp	r7, #255	; 0xff
 80007a2:	d0ee      	beq.n	8000782 <__aeabi_fadd+0xf6>
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	431d      	orrs	r5, r3
 80007aa:	2201      	movs	r2, #1
 80007ac:	291b      	cmp	r1, #27
 80007ae:	dc07      	bgt.n	80007c0 <__aeabi_fadd+0x134>
 80007b0:	002a      	movs	r2, r5
 80007b2:	2320      	movs	r3, #32
 80007b4:	40ca      	lsrs	r2, r1
 80007b6:	1a59      	subs	r1, r3, r1
 80007b8:	408d      	lsls	r5, r1
 80007ba:	1e6b      	subs	r3, r5, #1
 80007bc:	419d      	sbcs	r5, r3
 80007be:	432a      	orrs	r2, r5
 80007c0:	4452      	add	r2, sl
 80007c2:	0153      	lsls	r3, r2, #5
 80007c4:	d553      	bpl.n	800086e <__aeabi_fadd+0x1e2>
 80007c6:	3701      	adds	r7, #1
 80007c8:	2fff      	cmp	r7, #255	; 0xff
 80007ca:	d055      	beq.n	8000878 <__aeabi_fadd+0x1ec>
 80007cc:	2301      	movs	r3, #1
 80007ce:	497b      	ldr	r1, [pc, #492]	; (80009bc <__aeabi_fadd+0x330>)
 80007d0:	4013      	ands	r3, r2
 80007d2:	0852      	lsrs	r2, r2, #1
 80007d4:	400a      	ands	r2, r1
 80007d6:	431a      	orrs	r2, r3
 80007d8:	e7a5      	b.n	8000726 <__aeabi_fadd+0x9a>
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d02c      	beq.n	8000838 <__aeabi_fadd+0x1ac>
 80007de:	2301      	movs	r3, #1
 80007e0:	425b      	negs	r3, r3
 80007e2:	469c      	mov	ip, r3
 80007e4:	44e1      	add	r9, ip
 80007e6:	464b      	mov	r3, r9
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0x162>
 80007ec:	e0ad      	b.n	800094a <__aeabi_fadd+0x2be>
 80007ee:	2fff      	cmp	r7, #255	; 0xff
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x168>
 80007f2:	e76e      	b.n	80006d2 <__aeabi_fadd+0x46>
 80007f4:	e7c5      	b.n	8000782 <__aeabi_fadd+0xf6>
 80007f6:	20fe      	movs	r0, #254	; 0xfe
 80007f8:	1c7e      	adds	r6, r7, #1
 80007fa:	4230      	tst	r0, r6
 80007fc:	d160      	bne.n	80008c0 <__aeabi_fadd+0x234>
 80007fe:	2f00      	cmp	r7, #0
 8000800:	d000      	beq.n	8000804 <__aeabi_fadd+0x178>
 8000802:	e093      	b.n	800092c <__aeabi_fadd+0x2a0>
 8000804:	4652      	mov	r2, sl
 8000806:	2a00      	cmp	r2, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x180>
 800080a:	e0b6      	b.n	800097a <__aeabi_fadd+0x2ee>
 800080c:	2d00      	cmp	r5, #0
 800080e:	d09c      	beq.n	800074a <__aeabi_fadd+0xbe>
 8000810:	1b52      	subs	r2, r2, r5
 8000812:	0150      	lsls	r0, r2, #5
 8000814:	d400      	bmi.n	8000818 <__aeabi_fadd+0x18c>
 8000816:	e0c3      	b.n	80009a0 <__aeabi_fadd+0x314>
 8000818:	4653      	mov	r3, sl
 800081a:	000c      	movs	r4, r1
 800081c:	1aea      	subs	r2, r5, r3
 800081e:	e782      	b.n	8000726 <__aeabi_fadd+0x9a>
 8000820:	2d00      	cmp	r5, #0
 8000822:	d009      	beq.n	8000838 <__aeabi_fadd+0x1ac>
 8000824:	3901      	subs	r1, #1
 8000826:	2900      	cmp	r1, #0
 8000828:	d100      	bne.n	800082c <__aeabi_fadd+0x1a0>
 800082a:	e08b      	b.n	8000944 <__aeabi_fadd+0x2b8>
 800082c:	2fff      	cmp	r7, #255	; 0xff
 800082e:	d1bc      	bne.n	80007aa <__aeabi_fadd+0x11e>
 8000830:	e7a7      	b.n	8000782 <__aeabi_fadd+0xf6>
 8000832:	000c      	movs	r4, r1
 8000834:	4642      	mov	r2, r8
 8000836:	0037      	movs	r7, r6
 8000838:	2fff      	cmp	r7, #255	; 0xff
 800083a:	d0a2      	beq.n	8000782 <__aeabi_fadd+0xf6>
 800083c:	0252      	lsls	r2, r2, #9
 800083e:	0a53      	lsrs	r3, r2, #9
 8000840:	469c      	mov	ip, r3
 8000842:	b2fb      	uxtb	r3, r7
 8000844:	e781      	b.n	800074a <__aeabi_fadd+0xbe>
 8000846:	21fe      	movs	r1, #254	; 0xfe
 8000848:	3701      	adds	r7, #1
 800084a:	4239      	tst	r1, r7
 800084c:	d165      	bne.n	800091a <__aeabi_fadd+0x28e>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d17e      	bne.n	8000950 <__aeabi_fadd+0x2c4>
 8000852:	2800      	cmp	r0, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x1cc>
 8000856:	e0aa      	b.n	80009ae <__aeabi_fadd+0x322>
 8000858:	2d00      	cmp	r5, #0
 800085a:	d100      	bne.n	800085e <__aeabi_fadd+0x1d2>
 800085c:	e775      	b.n	800074a <__aeabi_fadd+0xbe>
 800085e:	002a      	movs	r2, r5
 8000860:	4452      	add	r2, sl
 8000862:	2700      	movs	r7, #0
 8000864:	0153      	lsls	r3, r2, #5
 8000866:	d502      	bpl.n	800086e <__aeabi_fadd+0x1e2>
 8000868:	4b55      	ldr	r3, [pc, #340]	; (80009c0 <__aeabi_fadd+0x334>)
 800086a:	3701      	adds	r7, #1
 800086c:	401a      	ands	r2, r3
 800086e:	0753      	lsls	r3, r2, #29
 8000870:	d000      	beq.n	8000874 <__aeabi_fadd+0x1e8>
 8000872:	e75a      	b.n	800072a <__aeabi_fadd+0x9e>
 8000874:	08d2      	lsrs	r2, r2, #3
 8000876:	e7df      	b.n	8000838 <__aeabi_fadd+0x1ac>
 8000878:	2200      	movs	r2, #0
 800087a:	23ff      	movs	r3, #255	; 0xff
 800087c:	4694      	mov	ip, r2
 800087e:	e764      	b.n	800074a <__aeabi_fadd+0xbe>
 8000880:	2900      	cmp	r1, #0
 8000882:	d0e0      	beq.n	8000846 <__aeabi_fadd+0x1ba>
 8000884:	1bf3      	subs	r3, r6, r7
 8000886:	2f00      	cmp	r7, #0
 8000888:	d03e      	beq.n	8000908 <__aeabi_fadd+0x27c>
 800088a:	2eff      	cmp	r6, #255	; 0xff
 800088c:	d100      	bne.n	8000890 <__aeabi_fadd+0x204>
 800088e:	e777      	b.n	8000780 <__aeabi_fadd+0xf4>
 8000890:	2280      	movs	r2, #128	; 0x80
 8000892:	0001      	movs	r1, r0
 8000894:	04d2      	lsls	r2, r2, #19
 8000896:	4311      	orrs	r1, r2
 8000898:	468a      	mov	sl, r1
 800089a:	2201      	movs	r2, #1
 800089c:	2b1b      	cmp	r3, #27
 800089e:	dc08      	bgt.n	80008b2 <__aeabi_fadd+0x226>
 80008a0:	4652      	mov	r2, sl
 80008a2:	2120      	movs	r1, #32
 80008a4:	4650      	mov	r0, sl
 80008a6:	40da      	lsrs	r2, r3
 80008a8:	1acb      	subs	r3, r1, r3
 80008aa:	4098      	lsls	r0, r3
 80008ac:	1e43      	subs	r3, r0, #1
 80008ae:	4198      	sbcs	r0, r3
 80008b0:	4302      	orrs	r2, r0
 80008b2:	0037      	movs	r7, r6
 80008b4:	1952      	adds	r2, r2, r5
 80008b6:	e784      	b.n	80007c2 <__aeabi_fadd+0x136>
 80008b8:	4a41      	ldr	r2, [pc, #260]	; (80009c0 <__aeabi_fadd+0x334>)
 80008ba:	1a3f      	subs	r7, r7, r0
 80008bc:	4032      	ands	r2, r6
 80008be:	e732      	b.n	8000726 <__aeabi_fadd+0x9a>
 80008c0:	4653      	mov	r3, sl
 80008c2:	1b5e      	subs	r6, r3, r5
 80008c4:	0173      	lsls	r3, r6, #5
 80008c6:	d42d      	bmi.n	8000924 <__aeabi_fadd+0x298>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d000      	beq.n	80008ce <__aeabi_fadd+0x242>
 80008cc:	e717      	b.n	80006fe <__aeabi_fadd+0x72>
 80008ce:	2200      	movs	r2, #0
 80008d0:	2400      	movs	r4, #0
 80008d2:	2300      	movs	r3, #0
 80008d4:	4694      	mov	ip, r2
 80008d6:	e738      	b.n	800074a <__aeabi_fadd+0xbe>
 80008d8:	2eff      	cmp	r6, #255	; 0xff
 80008da:	d100      	bne.n	80008de <__aeabi_fadd+0x252>
 80008dc:	e74f      	b.n	800077e <__aeabi_fadd+0xf2>
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	4650      	mov	r0, sl
 80008e2:	04d2      	lsls	r2, r2, #19
 80008e4:	4310      	orrs	r0, r2
 80008e6:	4682      	mov	sl, r0
 80008e8:	2201      	movs	r2, #1
 80008ea:	2b1b      	cmp	r3, #27
 80008ec:	dc08      	bgt.n	8000900 <__aeabi_fadd+0x274>
 80008ee:	4652      	mov	r2, sl
 80008f0:	2420      	movs	r4, #32
 80008f2:	4650      	mov	r0, sl
 80008f4:	40da      	lsrs	r2, r3
 80008f6:	1ae3      	subs	r3, r4, r3
 80008f8:	4098      	lsls	r0, r3
 80008fa:	1e43      	subs	r3, r0, #1
 80008fc:	4198      	sbcs	r0, r3
 80008fe:	4302      	orrs	r2, r0
 8000900:	000c      	movs	r4, r1
 8000902:	0037      	movs	r7, r6
 8000904:	1aaa      	subs	r2, r5, r2
 8000906:	e6f5      	b.n	80006f4 <__aeabi_fadd+0x68>
 8000908:	2800      	cmp	r0, #0
 800090a:	d093      	beq.n	8000834 <__aeabi_fadd+0x1a8>
 800090c:	3b01      	subs	r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04f      	beq.n	80009b2 <__aeabi_fadd+0x326>
 8000912:	2eff      	cmp	r6, #255	; 0xff
 8000914:	d1c1      	bne.n	800089a <__aeabi_fadd+0x20e>
 8000916:	4642      	mov	r2, r8
 8000918:	e733      	b.n	8000782 <__aeabi_fadd+0xf6>
 800091a:	2fff      	cmp	r7, #255	; 0xff
 800091c:	d0ac      	beq.n	8000878 <__aeabi_fadd+0x1ec>
 800091e:	4455      	add	r5, sl
 8000920:	086a      	lsrs	r2, r5, #1
 8000922:	e7a4      	b.n	800086e <__aeabi_fadd+0x1e2>
 8000924:	4653      	mov	r3, sl
 8000926:	000c      	movs	r4, r1
 8000928:	1aee      	subs	r6, r5, r3
 800092a:	e6e8      	b.n	80006fe <__aeabi_fadd+0x72>
 800092c:	4653      	mov	r3, sl
 800092e:	2b00      	cmp	r3, #0
 8000930:	d128      	bne.n	8000984 <__aeabi_fadd+0x2f8>
 8000932:	2d00      	cmp	r5, #0
 8000934:	d000      	beq.n	8000938 <__aeabi_fadd+0x2ac>
 8000936:	e722      	b.n	800077e <__aeabi_fadd+0xf2>
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	03db      	lsls	r3, r3, #15
 800093c:	469c      	mov	ip, r3
 800093e:	2400      	movs	r4, #0
 8000940:	23ff      	movs	r3, #255	; 0xff
 8000942:	e702      	b.n	800074a <__aeabi_fadd+0xbe>
 8000944:	002a      	movs	r2, r5
 8000946:	4452      	add	r2, sl
 8000948:	e73b      	b.n	80007c2 <__aeabi_fadd+0x136>
 800094a:	4653      	mov	r3, sl
 800094c:	1b5a      	subs	r2, r3, r5
 800094e:	e6d1      	b.n	80006f4 <__aeabi_fadd+0x68>
 8000950:	2800      	cmp	r0, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fadd+0x2ca>
 8000954:	e714      	b.n	8000780 <__aeabi_fadd+0xf4>
 8000956:	2d00      	cmp	r5, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fadd+0x2d0>
 800095a:	e712      	b.n	8000782 <__aeabi_fadd+0xf6>
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	03db      	lsls	r3, r3, #15
 8000960:	421a      	tst	r2, r3
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x2da>
 8000964:	e70d      	b.n	8000782 <__aeabi_fadd+0xf6>
 8000966:	4641      	mov	r1, r8
 8000968:	4219      	tst	r1, r3
 800096a:	d000      	beq.n	800096e <__aeabi_fadd+0x2e2>
 800096c:	e709      	b.n	8000782 <__aeabi_fadd+0xf6>
 800096e:	4642      	mov	r2, r8
 8000970:	e707      	b.n	8000782 <__aeabi_fadd+0xf6>
 8000972:	000c      	movs	r4, r1
 8000974:	0037      	movs	r7, r6
 8000976:	1aaa      	subs	r2, r5, r2
 8000978:	e6bc      	b.n	80006f4 <__aeabi_fadd+0x68>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d013      	beq.n	80009a6 <__aeabi_fadd+0x31a>
 800097e:	000c      	movs	r4, r1
 8000980:	46c4      	mov	ip, r8
 8000982:	e6e2      	b.n	800074a <__aeabi_fadd+0xbe>
 8000984:	2d00      	cmp	r5, #0
 8000986:	d100      	bne.n	800098a <__aeabi_fadd+0x2fe>
 8000988:	e6fb      	b.n	8000782 <__aeabi_fadd+0xf6>
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	03db      	lsls	r3, r3, #15
 800098e:	421a      	tst	r2, r3
 8000990:	d100      	bne.n	8000994 <__aeabi_fadd+0x308>
 8000992:	e6f6      	b.n	8000782 <__aeabi_fadd+0xf6>
 8000994:	4640      	mov	r0, r8
 8000996:	4218      	tst	r0, r3
 8000998:	d000      	beq.n	800099c <__aeabi_fadd+0x310>
 800099a:	e6f2      	b.n	8000782 <__aeabi_fadd+0xf6>
 800099c:	000c      	movs	r4, r1
 800099e:	e6ef      	b.n	8000780 <__aeabi_fadd+0xf4>
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fadd+0x31a>
 80009a4:	e763      	b.n	800086e <__aeabi_fadd+0x1e2>
 80009a6:	2200      	movs	r2, #0
 80009a8:	2400      	movs	r4, #0
 80009aa:	4694      	mov	ip, r2
 80009ac:	e6cd      	b.n	800074a <__aeabi_fadd+0xbe>
 80009ae:	46c4      	mov	ip, r8
 80009b0:	e6cb      	b.n	800074a <__aeabi_fadd+0xbe>
 80009b2:	002a      	movs	r2, r5
 80009b4:	0037      	movs	r7, r6
 80009b6:	4452      	add	r2, sl
 80009b8:	e703      	b.n	80007c2 <__aeabi_fadd+0x136>
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	7dffffff 	.word	0x7dffffff
 80009c0:	fbffffff 	.word	0xfbffffff

080009c4 <__eqsf2>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	0042      	lsls	r2, r0, #1
 80009c8:	024e      	lsls	r6, r1, #9
 80009ca:	004c      	lsls	r4, r1, #1
 80009cc:	0245      	lsls	r5, r0, #9
 80009ce:	0a6d      	lsrs	r5, r5, #9
 80009d0:	0e12      	lsrs	r2, r2, #24
 80009d2:	0fc3      	lsrs	r3, r0, #31
 80009d4:	0a76      	lsrs	r6, r6, #9
 80009d6:	0e24      	lsrs	r4, r4, #24
 80009d8:	0fc9      	lsrs	r1, r1, #31
 80009da:	2aff      	cmp	r2, #255	; 0xff
 80009dc:	d00f      	beq.n	80009fe <__eqsf2+0x3a>
 80009de:	2cff      	cmp	r4, #255	; 0xff
 80009e0:	d011      	beq.n	8000a06 <__eqsf2+0x42>
 80009e2:	2001      	movs	r0, #1
 80009e4:	42a2      	cmp	r2, r4
 80009e6:	d000      	beq.n	80009ea <__eqsf2+0x26>
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	42b5      	cmp	r5, r6
 80009ec:	d1fc      	bne.n	80009e8 <__eqsf2+0x24>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d00d      	beq.n	8000a0e <__eqsf2+0x4a>
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d1f8      	bne.n	80009e8 <__eqsf2+0x24>
 80009f6:	0028      	movs	r0, r5
 80009f8:	1e45      	subs	r5, r0, #1
 80009fa:	41a8      	sbcs	r0, r5
 80009fc:	e7f4      	b.n	80009e8 <__eqsf2+0x24>
 80009fe:	2001      	movs	r0, #1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d1f1      	bne.n	80009e8 <__eqsf2+0x24>
 8000a04:	e7eb      	b.n	80009de <__eqsf2+0x1a>
 8000a06:	2001      	movs	r0, #1
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d1ed      	bne.n	80009e8 <__eqsf2+0x24>
 8000a0c:	e7e9      	b.n	80009e2 <__eqsf2+0x1e>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e7ea      	b.n	80009e8 <__eqsf2+0x24>
 8000a12:	46c0      	nop			; (mov r8, r8)

08000a14 <__gesf2>:
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a16:	0042      	lsls	r2, r0, #1
 8000a18:	0246      	lsls	r6, r0, #9
 8000a1a:	024d      	lsls	r5, r1, #9
 8000a1c:	004c      	lsls	r4, r1, #1
 8000a1e:	0fc3      	lsrs	r3, r0, #31
 8000a20:	0a76      	lsrs	r6, r6, #9
 8000a22:	0e12      	lsrs	r2, r2, #24
 8000a24:	0a6d      	lsrs	r5, r5, #9
 8000a26:	0e24      	lsrs	r4, r4, #24
 8000a28:	0fc8      	lsrs	r0, r1, #31
 8000a2a:	2aff      	cmp	r2, #255	; 0xff
 8000a2c:	d01f      	beq.n	8000a6e <__gesf2+0x5a>
 8000a2e:	2cff      	cmp	r4, #255	; 0xff
 8000a30:	d010      	beq.n	8000a54 <__gesf2+0x40>
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d11f      	bne.n	8000a76 <__gesf2+0x62>
 8000a36:	4271      	negs	r1, r6
 8000a38:	4171      	adcs	r1, r6
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d101      	bne.n	8000a42 <__gesf2+0x2e>
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d01e      	beq.n	8000a80 <__gesf2+0x6c>
 8000a42:	2900      	cmp	r1, #0
 8000a44:	d10e      	bne.n	8000a64 <__gesf2+0x50>
 8000a46:	4283      	cmp	r3, r0
 8000a48:	d01e      	beq.n	8000a88 <__gesf2+0x74>
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	1e58      	subs	r0, r3, #1
 8000a4e:	4008      	ands	r0, r1
 8000a50:	3801      	subs	r0, #1
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a54:	2d00      	cmp	r5, #0
 8000a56:	d126      	bne.n	8000aa6 <__gesf2+0x92>
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	d1f4      	bne.n	8000a46 <__gesf2+0x32>
 8000a5c:	4271      	negs	r1, r6
 8000a5e:	4171      	adcs	r1, r6
 8000a60:	2900      	cmp	r1, #0
 8000a62:	d0f0      	beq.n	8000a46 <__gesf2+0x32>
 8000a64:	2800      	cmp	r0, #0
 8000a66:	d1f4      	bne.n	8000a52 <__gesf2+0x3e>
 8000a68:	2001      	movs	r0, #1
 8000a6a:	4240      	negs	r0, r0
 8000a6c:	e7f1      	b.n	8000a52 <__gesf2+0x3e>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d119      	bne.n	8000aa6 <__gesf2+0x92>
 8000a72:	2cff      	cmp	r4, #255	; 0xff
 8000a74:	d0ee      	beq.n	8000a54 <__gesf2+0x40>
 8000a76:	2c00      	cmp	r4, #0
 8000a78:	d1e5      	bne.n	8000a46 <__gesf2+0x32>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d1e3      	bne.n	8000a46 <__gesf2+0x32>
 8000a7e:	e7e4      	b.n	8000a4a <__gesf2+0x36>
 8000a80:	2000      	movs	r0, #0
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d0e5      	beq.n	8000a52 <__gesf2+0x3e>
 8000a86:	e7e0      	b.n	8000a4a <__gesf2+0x36>
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	dc05      	bgt.n	8000a98 <__gesf2+0x84>
 8000a8c:	dbea      	blt.n	8000a64 <__gesf2+0x50>
 8000a8e:	42ae      	cmp	r6, r5
 8000a90:	d802      	bhi.n	8000a98 <__gesf2+0x84>
 8000a92:	d3e7      	bcc.n	8000a64 <__gesf2+0x50>
 8000a94:	2000      	movs	r0, #0
 8000a96:	e7dc      	b.n	8000a52 <__gesf2+0x3e>
 8000a98:	4241      	negs	r1, r0
 8000a9a:	4141      	adcs	r1, r0
 8000a9c:	4248      	negs	r0, r1
 8000a9e:	2102      	movs	r1, #2
 8000aa0:	4008      	ands	r0, r1
 8000aa2:	3801      	subs	r0, #1
 8000aa4:	e7d5      	b.n	8000a52 <__gesf2+0x3e>
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	4240      	negs	r0, r0
 8000aaa:	e7d2      	b.n	8000a52 <__gesf2+0x3e>

08000aac <__lesf2>:
 8000aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aae:	0042      	lsls	r2, r0, #1
 8000ab0:	0246      	lsls	r6, r0, #9
 8000ab2:	024d      	lsls	r5, r1, #9
 8000ab4:	004c      	lsls	r4, r1, #1
 8000ab6:	0fc3      	lsrs	r3, r0, #31
 8000ab8:	0a76      	lsrs	r6, r6, #9
 8000aba:	0e12      	lsrs	r2, r2, #24
 8000abc:	0a6d      	lsrs	r5, r5, #9
 8000abe:	0e24      	lsrs	r4, r4, #24
 8000ac0:	0fc8      	lsrs	r0, r1, #31
 8000ac2:	2aff      	cmp	r2, #255	; 0xff
 8000ac4:	d00d      	beq.n	8000ae2 <__lesf2+0x36>
 8000ac6:	2cff      	cmp	r4, #255	; 0xff
 8000ac8:	d00f      	beq.n	8000aea <__lesf2+0x3e>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	d123      	bne.n	8000b16 <__lesf2+0x6a>
 8000ace:	4271      	negs	r1, r6
 8000ad0:	4171      	adcs	r1, r6
 8000ad2:	2c00      	cmp	r4, #0
 8000ad4:	d10f      	bne.n	8000af6 <__lesf2+0x4a>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d10d      	bne.n	8000af6 <__lesf2+0x4a>
 8000ada:	2000      	movs	r0, #0
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d014      	beq.n	8000b0a <__lesf2+0x5e>
 8000ae0:	e00d      	b.n	8000afe <__lesf2+0x52>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d110      	bne.n	8000b08 <__lesf2+0x5c>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d115      	bne.n	8000b16 <__lesf2+0x6a>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d10c      	bne.n	8000b08 <__lesf2+0x5c>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d103      	bne.n	8000afa <__lesf2+0x4e>
 8000af2:	4271      	negs	r1, r6
 8000af4:	4171      	adcs	r1, r6
 8000af6:	2900      	cmp	r1, #0
 8000af8:	d108      	bne.n	8000b0c <__lesf2+0x60>
 8000afa:	4283      	cmp	r3, r0
 8000afc:	d010      	beq.n	8000b20 <__lesf2+0x74>
 8000afe:	2102      	movs	r1, #2
 8000b00:	1e58      	subs	r0, r3, #1
 8000b02:	4008      	ands	r0, r1
 8000b04:	3801      	subs	r0, #1
 8000b06:	e000      	b.n	8000b0a <__lesf2+0x5e>
 8000b08:	2002      	movs	r0, #2
 8000b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d1fc      	bne.n	8000b0a <__lesf2+0x5e>
 8000b10:	2001      	movs	r0, #1
 8000b12:	4240      	negs	r0, r0
 8000b14:	e7f9      	b.n	8000b0a <__lesf2+0x5e>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d1ef      	bne.n	8000afa <__lesf2+0x4e>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d1ed      	bne.n	8000afa <__lesf2+0x4e>
 8000b1e:	e7ee      	b.n	8000afe <__lesf2+0x52>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	dc05      	bgt.n	8000b30 <__lesf2+0x84>
 8000b24:	dbf2      	blt.n	8000b0c <__lesf2+0x60>
 8000b26:	42ae      	cmp	r6, r5
 8000b28:	d802      	bhi.n	8000b30 <__lesf2+0x84>
 8000b2a:	d3ef      	bcc.n	8000b0c <__lesf2+0x60>
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	e7ec      	b.n	8000b0a <__lesf2+0x5e>
 8000b30:	4241      	negs	r1, r0
 8000b32:	4141      	adcs	r1, r0
 8000b34:	4248      	negs	r0, r1
 8000b36:	2102      	movs	r1, #2
 8000b38:	4008      	ands	r0, r1
 8000b3a:	3801      	subs	r0, #1
 8000b3c:	e7e5      	b.n	8000b0a <__lesf2+0x5e>
 8000b3e:	46c0      	nop			; (mov r8, r8)

08000b40 <__aeabi_fmul>:
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	4657      	mov	r7, sl
 8000b44:	464e      	mov	r6, r9
 8000b46:	4645      	mov	r5, r8
 8000b48:	46de      	mov	lr, fp
 8000b4a:	0244      	lsls	r4, r0, #9
 8000b4c:	b5e0      	push	{r5, r6, r7, lr}
 8000b4e:	0045      	lsls	r5, r0, #1
 8000b50:	1c0f      	adds	r7, r1, #0
 8000b52:	0a64      	lsrs	r4, r4, #9
 8000b54:	0e2d      	lsrs	r5, r5, #24
 8000b56:	0fc6      	lsrs	r6, r0, #31
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d047      	beq.n	8000bec <__aeabi_fmul+0xac>
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d04d      	beq.n	8000bfc <__aeabi_fmul+0xbc>
 8000b60:	2300      	movs	r3, #0
 8000b62:	2080      	movs	r0, #128	; 0x80
 8000b64:	469a      	mov	sl, r3
 8000b66:	469b      	mov	fp, r3
 8000b68:	00e4      	lsls	r4, r4, #3
 8000b6a:	04c0      	lsls	r0, r0, #19
 8000b6c:	4304      	orrs	r4, r0
 8000b6e:	3d7f      	subs	r5, #127	; 0x7f
 8000b70:	0278      	lsls	r0, r7, #9
 8000b72:	0a43      	lsrs	r3, r0, #9
 8000b74:	4699      	mov	r9, r3
 8000b76:	007a      	lsls	r2, r7, #1
 8000b78:	0ffb      	lsrs	r3, r7, #31
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	0e12      	lsrs	r2, r2, #24
 8000b7e:	464b      	mov	r3, r9
 8000b80:	d044      	beq.n	8000c0c <__aeabi_fmul+0xcc>
 8000b82:	2aff      	cmp	r2, #255	; 0xff
 8000b84:	d011      	beq.n	8000baa <__aeabi_fmul+0x6a>
 8000b86:	00d8      	lsls	r0, r3, #3
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	04db      	lsls	r3, r3, #19
 8000b8c:	4303      	orrs	r3, r0
 8000b8e:	4699      	mov	r9, r3
 8000b90:	2000      	movs	r0, #0
 8000b92:	3a7f      	subs	r2, #127	; 0x7f
 8000b94:	18ad      	adds	r5, r5, r2
 8000b96:	4647      	mov	r7, r8
 8000b98:	4653      	mov	r3, sl
 8000b9a:	4077      	eors	r7, r6
 8000b9c:	1c69      	adds	r1, r5, #1
 8000b9e:	2b0f      	cmp	r3, #15
 8000ba0:	d83f      	bhi.n	8000c22 <__aeabi_fmul+0xe2>
 8000ba2:	4a72      	ldr	r2, [pc, #456]	; (8000d6c <__aeabi_fmul+0x22c>)
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	58d3      	ldr	r3, [r2, r3]
 8000ba8:	469f      	mov	pc, r3
 8000baa:	35ff      	adds	r5, #255	; 0xff
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d000      	beq.n	8000bb2 <__aeabi_fmul+0x72>
 8000bb0:	e079      	b.n	8000ca6 <__aeabi_fmul+0x166>
 8000bb2:	4652      	mov	r2, sl
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	4692      	mov	sl, r2
 8000bba:	2002      	movs	r0, #2
 8000bbc:	e7eb      	b.n	8000b96 <__aeabi_fmul+0x56>
 8000bbe:	4647      	mov	r7, r8
 8000bc0:	464c      	mov	r4, r9
 8000bc2:	4683      	mov	fp, r0
 8000bc4:	465b      	mov	r3, fp
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d028      	beq.n	8000c1c <__aeabi_fmul+0xdc>
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fmul+0x90>
 8000bce:	e0c6      	b.n	8000d5e <__aeabi_fmul+0x21e>
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d14f      	bne.n	8000c74 <__aeabi_fmul+0x134>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	05c0      	lsls	r0, r0, #23
 8000bda:	07ff      	lsls	r7, r7, #31
 8000bdc:	4320      	orrs	r0, r4
 8000bde:	4338      	orrs	r0, r7
 8000be0:	bcf0      	pop	{r4, r5, r6, r7}
 8000be2:	46bb      	mov	fp, r7
 8000be4:	46b2      	mov	sl, r6
 8000be6:	46a9      	mov	r9, r5
 8000be8:	46a0      	mov	r8, r4
 8000bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d171      	bne.n	8000cd4 <__aeabi_fmul+0x194>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	469b      	mov	fp, r3
 8000bfa:	e7b9      	b.n	8000b70 <__aeabi_fmul+0x30>
 8000bfc:	2c00      	cmp	r4, #0
 8000bfe:	d163      	bne.n	8000cc8 <__aeabi_fmul+0x188>
 8000c00:	2308      	movs	r3, #8
 8000c02:	469a      	mov	sl, r3
 8000c04:	3b06      	subs	r3, #6
 8000c06:	25ff      	movs	r5, #255	; 0xff
 8000c08:	469b      	mov	fp, r3
 8000c0a:	e7b1      	b.n	8000b70 <__aeabi_fmul+0x30>
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d150      	bne.n	8000cb2 <__aeabi_fmul+0x172>
 8000c10:	4652      	mov	r2, sl
 8000c12:	3301      	adds	r3, #1
 8000c14:	431a      	orrs	r2, r3
 8000c16:	4692      	mov	sl, r2
 8000c18:	2001      	movs	r0, #1
 8000c1a:	e7bc      	b.n	8000b96 <__aeabi_fmul+0x56>
 8000c1c:	20ff      	movs	r0, #255	; 0xff
 8000c1e:	2400      	movs	r4, #0
 8000c20:	e7da      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000c22:	4648      	mov	r0, r9
 8000c24:	0c26      	lsrs	r6, r4, #16
 8000c26:	0424      	lsls	r4, r4, #16
 8000c28:	0c22      	lsrs	r2, r4, #16
 8000c2a:	0404      	lsls	r4, r0, #16
 8000c2c:	0c24      	lsrs	r4, r4, #16
 8000c2e:	464b      	mov	r3, r9
 8000c30:	0020      	movs	r0, r4
 8000c32:	0c1b      	lsrs	r3, r3, #16
 8000c34:	4350      	muls	r0, r2
 8000c36:	4374      	muls	r4, r6
 8000c38:	435a      	muls	r2, r3
 8000c3a:	435e      	muls	r6, r3
 8000c3c:	1912      	adds	r2, r2, r4
 8000c3e:	0c03      	lsrs	r3, r0, #16
 8000c40:	189b      	adds	r3, r3, r2
 8000c42:	429c      	cmp	r4, r3
 8000c44:	d903      	bls.n	8000c4e <__aeabi_fmul+0x10e>
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	0252      	lsls	r2, r2, #9
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	4466      	add	r6, ip
 8000c4e:	0400      	lsls	r0, r0, #16
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	0c00      	lsrs	r0, r0, #16
 8000c54:	1812      	adds	r2, r2, r0
 8000c56:	0194      	lsls	r4, r2, #6
 8000c58:	1e60      	subs	r0, r4, #1
 8000c5a:	4184      	sbcs	r4, r0
 8000c5c:	0c1b      	lsrs	r3, r3, #16
 8000c5e:	0e92      	lsrs	r2, r2, #26
 8000c60:	199b      	adds	r3, r3, r6
 8000c62:	4314      	orrs	r4, r2
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	431c      	orrs	r4, r3
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	d572      	bpl.n	8000d52 <__aeabi_fmul+0x212>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	0863      	lsrs	r3, r4, #1
 8000c70:	4004      	ands	r4, r0
 8000c72:	431c      	orrs	r4, r3
 8000c74:	0008      	movs	r0, r1
 8000c76:	307f      	adds	r0, #127	; 0x7f
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	dd3c      	ble.n	8000cf6 <__aeabi_fmul+0x1b6>
 8000c7c:	0763      	lsls	r3, r4, #29
 8000c7e:	d004      	beq.n	8000c8a <__aeabi_fmul+0x14a>
 8000c80:	230f      	movs	r3, #15
 8000c82:	4023      	ands	r3, r4
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d000      	beq.n	8000c8a <__aeabi_fmul+0x14a>
 8000c88:	3404      	adds	r4, #4
 8000c8a:	0123      	lsls	r3, r4, #4
 8000c8c:	d503      	bpl.n	8000c96 <__aeabi_fmul+0x156>
 8000c8e:	3180      	adds	r1, #128	; 0x80
 8000c90:	0008      	movs	r0, r1
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <__aeabi_fmul+0x230>)
 8000c94:	401c      	ands	r4, r3
 8000c96:	28fe      	cmp	r0, #254	; 0xfe
 8000c98:	dcc0      	bgt.n	8000c1c <__aeabi_fmul+0xdc>
 8000c9a:	01a4      	lsls	r4, r4, #6
 8000c9c:	0a64      	lsrs	r4, r4, #9
 8000c9e:	b2c0      	uxtb	r0, r0
 8000ca0:	e79a      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000ca2:	0037      	movs	r7, r6
 8000ca4:	e78e      	b.n	8000bc4 <__aeabi_fmul+0x84>
 8000ca6:	4652      	mov	r2, sl
 8000ca8:	2303      	movs	r3, #3
 8000caa:	431a      	orrs	r2, r3
 8000cac:	4692      	mov	sl, r2
 8000cae:	2003      	movs	r0, #3
 8000cb0:	e771      	b.n	8000b96 <__aeabi_fmul+0x56>
 8000cb2:	4648      	mov	r0, r9
 8000cb4:	f002 f96a 	bl	8002f8c <__clzsi2>
 8000cb8:	464a      	mov	r2, r9
 8000cba:	1f43      	subs	r3, r0, #5
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	1a2d      	subs	r5, r5, r0
 8000cc0:	4691      	mov	r9, r2
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	3d76      	subs	r5, #118	; 0x76
 8000cc6:	e766      	b.n	8000b96 <__aeabi_fmul+0x56>
 8000cc8:	230c      	movs	r3, #12
 8000cca:	469a      	mov	sl, r3
 8000ccc:	3b09      	subs	r3, #9
 8000cce:	25ff      	movs	r5, #255	; 0xff
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	e74d      	b.n	8000b70 <__aeabi_fmul+0x30>
 8000cd4:	0020      	movs	r0, r4
 8000cd6:	f002 f959 	bl	8002f8c <__clzsi2>
 8000cda:	2576      	movs	r5, #118	; 0x76
 8000cdc:	1f43      	subs	r3, r0, #5
 8000cde:	409c      	lsls	r4, r3
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	426d      	negs	r5, r5
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	469b      	mov	fp, r3
 8000ce8:	1a2d      	subs	r5, r5, r0
 8000cea:	e741      	b.n	8000b70 <__aeabi_fmul+0x30>
 8000cec:	2480      	movs	r4, #128	; 0x80
 8000cee:	2700      	movs	r7, #0
 8000cf0:	20ff      	movs	r0, #255	; 0xff
 8000cf2:	03e4      	lsls	r4, r4, #15
 8000cf4:	e770      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	1a1b      	subs	r3, r3, r0
 8000cfa:	2b1b      	cmp	r3, #27
 8000cfc:	dd00      	ble.n	8000d00 <__aeabi_fmul+0x1c0>
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fmul+0x94>
 8000d00:	319e      	adds	r1, #158	; 0x9e
 8000d02:	0020      	movs	r0, r4
 8000d04:	408c      	lsls	r4, r1
 8000d06:	40d8      	lsrs	r0, r3
 8000d08:	1e63      	subs	r3, r4, #1
 8000d0a:	419c      	sbcs	r4, r3
 8000d0c:	4304      	orrs	r4, r0
 8000d0e:	0763      	lsls	r3, r4, #29
 8000d10:	d004      	beq.n	8000d1c <__aeabi_fmul+0x1dc>
 8000d12:	230f      	movs	r3, #15
 8000d14:	4023      	ands	r3, r4
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fmul+0x1dc>
 8000d1a:	3404      	adds	r4, #4
 8000d1c:	0163      	lsls	r3, r4, #5
 8000d1e:	d51a      	bpl.n	8000d56 <__aeabi_fmul+0x216>
 8000d20:	2001      	movs	r0, #1
 8000d22:	2400      	movs	r4, #0
 8000d24:	e758      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000d26:	2080      	movs	r0, #128	; 0x80
 8000d28:	03c0      	lsls	r0, r0, #15
 8000d2a:	4204      	tst	r4, r0
 8000d2c:	d009      	beq.n	8000d42 <__aeabi_fmul+0x202>
 8000d2e:	464b      	mov	r3, r9
 8000d30:	4203      	tst	r3, r0
 8000d32:	d106      	bne.n	8000d42 <__aeabi_fmul+0x202>
 8000d34:	464c      	mov	r4, r9
 8000d36:	4304      	orrs	r4, r0
 8000d38:	0264      	lsls	r4, r4, #9
 8000d3a:	4647      	mov	r7, r8
 8000d3c:	20ff      	movs	r0, #255	; 0xff
 8000d3e:	0a64      	lsrs	r4, r4, #9
 8000d40:	e74a      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000d42:	2080      	movs	r0, #128	; 0x80
 8000d44:	03c0      	lsls	r0, r0, #15
 8000d46:	4304      	orrs	r4, r0
 8000d48:	0264      	lsls	r4, r4, #9
 8000d4a:	0037      	movs	r7, r6
 8000d4c:	20ff      	movs	r0, #255	; 0xff
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	e742      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000d52:	0029      	movs	r1, r5
 8000d54:	e78e      	b.n	8000c74 <__aeabi_fmul+0x134>
 8000d56:	01a4      	lsls	r4, r4, #6
 8000d58:	2000      	movs	r0, #0
 8000d5a:	0a64      	lsrs	r4, r4, #9
 8000d5c:	e73c      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000d5e:	2080      	movs	r0, #128	; 0x80
 8000d60:	03c0      	lsls	r0, r0, #15
 8000d62:	4304      	orrs	r4, r0
 8000d64:	0264      	lsls	r4, r4, #9
 8000d66:	20ff      	movs	r0, #255	; 0xff
 8000d68:	0a64      	lsrs	r4, r4, #9
 8000d6a:	e735      	b.n	8000bd8 <__aeabi_fmul+0x98>
 8000d6c:	080184d0 	.word	0x080184d0
 8000d70:	f7ffffff 	.word	0xf7ffffff

08000d74 <__aeabi_fsub>:
 8000d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d76:	4646      	mov	r6, r8
 8000d78:	46d6      	mov	lr, sl
 8000d7a:	464f      	mov	r7, r9
 8000d7c:	0243      	lsls	r3, r0, #9
 8000d7e:	0a5b      	lsrs	r3, r3, #9
 8000d80:	00da      	lsls	r2, r3, #3
 8000d82:	4694      	mov	ip, r2
 8000d84:	024a      	lsls	r2, r1, #9
 8000d86:	b5c0      	push	{r6, r7, lr}
 8000d88:	0044      	lsls	r4, r0, #1
 8000d8a:	0a56      	lsrs	r6, r2, #9
 8000d8c:	1c05      	adds	r5, r0, #0
 8000d8e:	46b0      	mov	r8, r6
 8000d90:	0e24      	lsrs	r4, r4, #24
 8000d92:	004e      	lsls	r6, r1, #1
 8000d94:	0992      	lsrs	r2, r2, #6
 8000d96:	001f      	movs	r7, r3
 8000d98:	0020      	movs	r0, r4
 8000d9a:	4692      	mov	sl, r2
 8000d9c:	0fed      	lsrs	r5, r5, #31
 8000d9e:	0e36      	lsrs	r6, r6, #24
 8000da0:	0fc9      	lsrs	r1, r1, #31
 8000da2:	2eff      	cmp	r6, #255	; 0xff
 8000da4:	d100      	bne.n	8000da8 <__aeabi_fsub+0x34>
 8000da6:	e07f      	b.n	8000ea8 <__aeabi_fsub+0x134>
 8000da8:	2201      	movs	r2, #1
 8000daa:	4051      	eors	r1, r2
 8000dac:	428d      	cmp	r5, r1
 8000dae:	d051      	beq.n	8000e54 <__aeabi_fsub+0xe0>
 8000db0:	1ba2      	subs	r2, r4, r6
 8000db2:	4691      	mov	r9, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_fsub+0x46>
 8000db8:	e07e      	b.n	8000eb8 <__aeabi_fsub+0x144>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x4c>
 8000dbe:	e099      	b.n	8000ef4 <__aeabi_fsub+0x180>
 8000dc0:	2cff      	cmp	r4, #255	; 0xff
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_fsub+0x52>
 8000dc4:	e08c      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	4652      	mov	r2, sl
 8000dca:	04db      	lsls	r3, r3, #19
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	4692      	mov	sl, r2
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2a1b      	cmp	r2, #27
 8000dd6:	dc08      	bgt.n	8000dea <__aeabi_fsub+0x76>
 8000dd8:	4653      	mov	r3, sl
 8000dda:	2120      	movs	r1, #32
 8000ddc:	40d3      	lsrs	r3, r2
 8000dde:	1a89      	subs	r1, r1, r2
 8000de0:	4652      	mov	r2, sl
 8000de2:	408a      	lsls	r2, r1
 8000de4:	1e51      	subs	r1, r2, #1
 8000de6:	418a      	sbcs	r2, r1
 8000de8:	4313      	orrs	r3, r2
 8000dea:	4662      	mov	r2, ip
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	015a      	lsls	r2, r3, #5
 8000df0:	d400      	bmi.n	8000df4 <__aeabi_fsub+0x80>
 8000df2:	e0f3      	b.n	8000fdc <__aeabi_fsub+0x268>
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	099e      	lsrs	r6, r3, #6
 8000df8:	0030      	movs	r0, r6
 8000dfa:	f002 f8c7 	bl	8002f8c <__clzsi2>
 8000dfe:	3805      	subs	r0, #5
 8000e00:	4086      	lsls	r6, r0
 8000e02:	4284      	cmp	r4, r0
 8000e04:	dd00      	ble.n	8000e08 <__aeabi_fsub+0x94>
 8000e06:	e0f7      	b.n	8000ff8 <__aeabi_fsub+0x284>
 8000e08:	0032      	movs	r2, r6
 8000e0a:	1b04      	subs	r4, r0, r4
 8000e0c:	2020      	movs	r0, #32
 8000e0e:	3401      	adds	r4, #1
 8000e10:	40e2      	lsrs	r2, r4
 8000e12:	1b04      	subs	r4, r0, r4
 8000e14:	40a6      	lsls	r6, r4
 8000e16:	0033      	movs	r3, r6
 8000e18:	1e5e      	subs	r6, r3, #1
 8000e1a:	41b3      	sbcs	r3, r6
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	075a      	lsls	r2, r3, #29
 8000e22:	d004      	beq.n	8000e2e <__aeabi_fsub+0xba>
 8000e24:	220f      	movs	r2, #15
 8000e26:	401a      	ands	r2, r3
 8000e28:	2a04      	cmp	r2, #4
 8000e2a:	d000      	beq.n	8000e2e <__aeabi_fsub+0xba>
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	015a      	lsls	r2, r3, #5
 8000e30:	d400      	bmi.n	8000e34 <__aeabi_fsub+0xc0>
 8000e32:	e0d6      	b.n	8000fe2 <__aeabi_fsub+0x26e>
 8000e34:	1c62      	adds	r2, r4, #1
 8000e36:	2cfe      	cmp	r4, #254	; 0xfe
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0xc8>
 8000e3a:	e0da      	b.n	8000ff2 <__aeabi_fsub+0x27e>
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	0a5f      	lsrs	r7, r3, #9
 8000e40:	b2d0      	uxtb	r0, r2
 8000e42:	05c0      	lsls	r0, r0, #23
 8000e44:	4338      	orrs	r0, r7
 8000e46:	07ed      	lsls	r5, r5, #31
 8000e48:	4328      	orrs	r0, r5
 8000e4a:	bce0      	pop	{r5, r6, r7}
 8000e4c:	46ba      	mov	sl, r7
 8000e4e:	46b1      	mov	r9, r6
 8000e50:	46a8      	mov	r8, r5
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e54:	1ba2      	subs	r2, r4, r6
 8000e56:	4691      	mov	r9, r2
 8000e58:	2a00      	cmp	r2, #0
 8000e5a:	dd63      	ble.n	8000f24 <__aeabi_fsub+0x1b0>
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d100      	bne.n	8000e62 <__aeabi_fsub+0xee>
 8000e60:	e099      	b.n	8000f96 <__aeabi_fsub+0x222>
 8000e62:	2cff      	cmp	r4, #255	; 0xff
 8000e64:	d03c      	beq.n	8000ee0 <__aeabi_fsub+0x16c>
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	4652      	mov	r2, sl
 8000e6a:	04db      	lsls	r3, r3, #19
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	4692      	mov	sl, r2
 8000e70:	464a      	mov	r2, r9
 8000e72:	2301      	movs	r3, #1
 8000e74:	2a1b      	cmp	r2, #27
 8000e76:	dc08      	bgt.n	8000e8a <__aeabi_fsub+0x116>
 8000e78:	4653      	mov	r3, sl
 8000e7a:	2120      	movs	r1, #32
 8000e7c:	40d3      	lsrs	r3, r2
 8000e7e:	1a89      	subs	r1, r1, r2
 8000e80:	4652      	mov	r2, sl
 8000e82:	408a      	lsls	r2, r1
 8000e84:	1e51      	subs	r1, r2, #1
 8000e86:	418a      	sbcs	r2, r1
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	015a      	lsls	r2, r3, #5
 8000e8e:	d400      	bmi.n	8000e92 <__aeabi_fsub+0x11e>
 8000e90:	e0a4      	b.n	8000fdc <__aeabi_fsub+0x268>
 8000e92:	3401      	adds	r4, #1
 8000e94:	2cff      	cmp	r4, #255	; 0xff
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x126>
 8000e98:	e0ab      	b.n	8000ff2 <__aeabi_fsub+0x27e>
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4997      	ldr	r1, [pc, #604]	; (80010fc <__aeabi_fsub+0x388>)
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	085b      	lsrs	r3, r3, #1
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	e7bb      	b.n	8000e20 <__aeabi_fsub+0xac>
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	d032      	beq.n	8000f12 <__aeabi_fsub+0x19e>
 8000eac:	428d      	cmp	r5, r1
 8000eae:	d035      	beq.n	8000f1c <__aeabi_fsub+0x1a8>
 8000eb0:	22ff      	movs	r2, #255	; 0xff
 8000eb2:	4252      	negs	r2, r2
 8000eb4:	4691      	mov	r9, r2
 8000eb6:	44a1      	add	r9, r4
 8000eb8:	464a      	mov	r2, r9
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	d051      	beq.n	8000f62 <__aeabi_fsub+0x1ee>
 8000ebe:	1b30      	subs	r0, r6, r4
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_fsub+0x152>
 8000ec4:	e09c      	b.n	8001000 <__aeabi_fsub+0x28c>
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d100      	bne.n	8000ece <__aeabi_fsub+0x15a>
 8000ecc:	e0df      	b.n	800108e <__aeabi_fsub+0x31a>
 8000ece:	3801      	subs	r0, #1
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	d100      	bne.n	8000ed6 <__aeabi_fsub+0x162>
 8000ed4:	e0f7      	b.n	80010c6 <__aeabi_fsub+0x352>
 8000ed6:	2eff      	cmp	r6, #255	; 0xff
 8000ed8:	d000      	beq.n	8000edc <__aeabi_fsub+0x168>
 8000eda:	e099      	b.n	8001010 <__aeabi_fsub+0x29c>
 8000edc:	000d      	movs	r5, r1
 8000ede:	4643      	mov	r3, r8
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x172>
 8000ee4:	e085      	b.n	8000ff2 <__aeabi_fsub+0x27e>
 8000ee6:	2780      	movs	r7, #128	; 0x80
 8000ee8:	03ff      	lsls	r7, r7, #15
 8000eea:	431f      	orrs	r7, r3
 8000eec:	027f      	lsls	r7, r7, #9
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	0a7f      	lsrs	r7, r7, #9
 8000ef2:	e7a6      	b.n	8000e42 <__aeabi_fsub+0xce>
 8000ef4:	4652      	mov	r2, sl
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d074      	beq.n	8000fe4 <__aeabi_fsub+0x270>
 8000efa:	2201      	movs	r2, #1
 8000efc:	4252      	negs	r2, r2
 8000efe:	4690      	mov	r8, r2
 8000f00:	44c1      	add	r9, r8
 8000f02:	464a      	mov	r2, r9
 8000f04:	2a00      	cmp	r2, #0
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x196>
 8000f08:	e0c8      	b.n	800109c <__aeabi_fsub+0x328>
 8000f0a:	2cff      	cmp	r4, #255	; 0xff
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x19c>
 8000f0e:	e75f      	b.n	8000dd0 <__aeabi_fsub+0x5c>
 8000f10:	e7e6      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 8000f12:	2201      	movs	r2, #1
 8000f14:	4051      	eors	r1, r2
 8000f16:	42a9      	cmp	r1, r5
 8000f18:	d000      	beq.n	8000f1c <__aeabi_fsub+0x1a8>
 8000f1a:	e749      	b.n	8000db0 <__aeabi_fsub+0x3c>
 8000f1c:	22ff      	movs	r2, #255	; 0xff
 8000f1e:	4252      	negs	r2, r2
 8000f20:	4691      	mov	r9, r2
 8000f22:	44a1      	add	r9, r4
 8000f24:	464a      	mov	r2, r9
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d043      	beq.n	8000fb2 <__aeabi_fsub+0x23e>
 8000f2a:	1b31      	subs	r1, r6, r4
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x1be>
 8000f30:	e08c      	b.n	800104c <__aeabi_fsub+0x2d8>
 8000f32:	2eff      	cmp	r6, #255	; 0xff
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x1c4>
 8000f36:	e092      	b.n	800105e <__aeabi_fsub+0x2ea>
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	4662      	mov	r2, ip
 8000f3c:	04db      	lsls	r3, r3, #19
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	4694      	mov	ip, r2
 8000f42:	2301      	movs	r3, #1
 8000f44:	291b      	cmp	r1, #27
 8000f46:	dc09      	bgt.n	8000f5c <__aeabi_fsub+0x1e8>
 8000f48:	2020      	movs	r0, #32
 8000f4a:	4663      	mov	r3, ip
 8000f4c:	4662      	mov	r2, ip
 8000f4e:	40cb      	lsrs	r3, r1
 8000f50:	1a41      	subs	r1, r0, r1
 8000f52:	408a      	lsls	r2, r1
 8000f54:	0011      	movs	r1, r2
 8000f56:	1e48      	subs	r0, r1, #1
 8000f58:	4181      	sbcs	r1, r0
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	0034      	movs	r4, r6
 8000f5e:	4453      	add	r3, sl
 8000f60:	e794      	b.n	8000e8c <__aeabi_fsub+0x118>
 8000f62:	22fe      	movs	r2, #254	; 0xfe
 8000f64:	1c66      	adds	r6, r4, #1
 8000f66:	4232      	tst	r2, r6
 8000f68:	d164      	bne.n	8001034 <__aeabi_fsub+0x2c0>
 8000f6a:	2c00      	cmp	r4, #0
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_fsub+0x1fc>
 8000f6e:	e082      	b.n	8001076 <__aeabi_fsub+0x302>
 8000f70:	4663      	mov	r3, ip
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d100      	bne.n	8000f78 <__aeabi_fsub+0x204>
 8000f76:	e0ab      	b.n	80010d0 <__aeabi_fsub+0x35c>
 8000f78:	4653      	mov	r3, sl
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x20c>
 8000f7e:	e760      	b.n	8000e42 <__aeabi_fsub+0xce>
 8000f80:	4663      	mov	r3, ip
 8000f82:	4652      	mov	r2, sl
 8000f84:	1a9b      	subs	r3, r3, r2
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_fsub+0x218>
 8000f8a:	e0aa      	b.n	80010e2 <__aeabi_fsub+0x36e>
 8000f8c:	4663      	mov	r3, ip
 8000f8e:	4652      	mov	r2, sl
 8000f90:	000d      	movs	r5, r1
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	e744      	b.n	8000e20 <__aeabi_fsub+0xac>
 8000f96:	4652      	mov	r2, sl
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	d023      	beq.n	8000fe4 <__aeabi_fsub+0x270>
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	4690      	mov	r8, r2
 8000fa2:	44c1      	add	r9, r8
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	2a00      	cmp	r2, #0
 8000fa8:	d075      	beq.n	8001096 <__aeabi_fsub+0x322>
 8000faa:	2cff      	cmp	r4, #255	; 0xff
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fsub+0x23c>
 8000fae:	e75f      	b.n	8000e70 <__aeabi_fsub+0xfc>
 8000fb0:	e796      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 8000fb2:	26fe      	movs	r6, #254	; 0xfe
 8000fb4:	3401      	adds	r4, #1
 8000fb6:	4226      	tst	r6, r4
 8000fb8:	d153      	bne.n	8001062 <__aeabi_fsub+0x2ee>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d172      	bne.n	80010a4 <__aeabi_fsub+0x330>
 8000fbe:	4663      	mov	r3, ip
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x252>
 8000fc4:	e093      	b.n	80010ee <__aeabi_fsub+0x37a>
 8000fc6:	4653      	mov	r3, sl
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x25a>
 8000fcc:	e739      	b.n	8000e42 <__aeabi_fsub+0xce>
 8000fce:	4463      	add	r3, ip
 8000fd0:	2400      	movs	r4, #0
 8000fd2:	015a      	lsls	r2, r3, #5
 8000fd4:	d502      	bpl.n	8000fdc <__aeabi_fsub+0x268>
 8000fd6:	4a4a      	ldr	r2, [pc, #296]	; (8001100 <__aeabi_fsub+0x38c>)
 8000fd8:	3401      	adds	r4, #1
 8000fda:	4013      	ands	r3, r2
 8000fdc:	075a      	lsls	r2, r3, #29
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_fsub+0x26e>
 8000fe0:	e720      	b.n	8000e24 <__aeabi_fsub+0xb0>
 8000fe2:	08db      	lsrs	r3, r3, #3
 8000fe4:	2cff      	cmp	r4, #255	; 0xff
 8000fe6:	d100      	bne.n	8000fea <__aeabi_fsub+0x276>
 8000fe8:	e77a      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 8000fea:	025b      	lsls	r3, r3, #9
 8000fec:	0a5f      	lsrs	r7, r3, #9
 8000fee:	b2e0      	uxtb	r0, r4
 8000ff0:	e727      	b.n	8000e42 <__aeabi_fsub+0xce>
 8000ff2:	20ff      	movs	r0, #255	; 0xff
 8000ff4:	2700      	movs	r7, #0
 8000ff6:	e724      	b.n	8000e42 <__aeabi_fsub+0xce>
 8000ff8:	4b41      	ldr	r3, [pc, #260]	; (8001100 <__aeabi_fsub+0x38c>)
 8000ffa:	1a24      	subs	r4, r4, r0
 8000ffc:	4033      	ands	r3, r6
 8000ffe:	e70f      	b.n	8000e20 <__aeabi_fsub+0xac>
 8001000:	2eff      	cmp	r6, #255	; 0xff
 8001002:	d100      	bne.n	8001006 <__aeabi_fsub+0x292>
 8001004:	e76a      	b.n	8000edc <__aeabi_fsub+0x168>
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	4662      	mov	r2, ip
 800100a:	04db      	lsls	r3, r3, #19
 800100c:	431a      	orrs	r2, r3
 800100e:	4694      	mov	ip, r2
 8001010:	2301      	movs	r3, #1
 8001012:	281b      	cmp	r0, #27
 8001014:	dc09      	bgt.n	800102a <__aeabi_fsub+0x2b6>
 8001016:	2420      	movs	r4, #32
 8001018:	4663      	mov	r3, ip
 800101a:	4662      	mov	r2, ip
 800101c:	40c3      	lsrs	r3, r0
 800101e:	1a20      	subs	r0, r4, r0
 8001020:	4082      	lsls	r2, r0
 8001022:	0010      	movs	r0, r2
 8001024:	1e44      	subs	r4, r0, #1
 8001026:	41a0      	sbcs	r0, r4
 8001028:	4303      	orrs	r3, r0
 800102a:	4652      	mov	r2, sl
 800102c:	000d      	movs	r5, r1
 800102e:	0034      	movs	r4, r6
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	e6dc      	b.n	8000dee <__aeabi_fsub+0x7a>
 8001034:	4663      	mov	r3, ip
 8001036:	4652      	mov	r2, sl
 8001038:	1a9e      	subs	r6, r3, r2
 800103a:	0173      	lsls	r3, r6, #5
 800103c:	d417      	bmi.n	800106e <__aeabi_fsub+0x2fa>
 800103e:	2e00      	cmp	r6, #0
 8001040:	d000      	beq.n	8001044 <__aeabi_fsub+0x2d0>
 8001042:	e6d9      	b.n	8000df8 <__aeabi_fsub+0x84>
 8001044:	2500      	movs	r5, #0
 8001046:	2000      	movs	r0, #0
 8001048:	2700      	movs	r7, #0
 800104a:	e6fa      	b.n	8000e42 <__aeabi_fsub+0xce>
 800104c:	4663      	mov	r3, ip
 800104e:	2b00      	cmp	r3, #0
 8001050:	d044      	beq.n	80010dc <__aeabi_fsub+0x368>
 8001052:	3901      	subs	r1, #1
 8001054:	2900      	cmp	r1, #0
 8001056:	d04c      	beq.n	80010f2 <__aeabi_fsub+0x37e>
 8001058:	2eff      	cmp	r6, #255	; 0xff
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x2ea>
 800105c:	e771      	b.n	8000f42 <__aeabi_fsub+0x1ce>
 800105e:	4643      	mov	r3, r8
 8001060:	e73e      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 8001062:	2cff      	cmp	r4, #255	; 0xff
 8001064:	d0c5      	beq.n	8000ff2 <__aeabi_fsub+0x27e>
 8001066:	4652      	mov	r2, sl
 8001068:	4462      	add	r2, ip
 800106a:	0853      	lsrs	r3, r2, #1
 800106c:	e7b6      	b.n	8000fdc <__aeabi_fsub+0x268>
 800106e:	4663      	mov	r3, ip
 8001070:	000d      	movs	r5, r1
 8001072:	1ad6      	subs	r6, r2, r3
 8001074:	e6c0      	b.n	8000df8 <__aeabi_fsub+0x84>
 8001076:	4662      	mov	r2, ip
 8001078:	2a00      	cmp	r2, #0
 800107a:	d116      	bne.n	80010aa <__aeabi_fsub+0x336>
 800107c:	4653      	mov	r3, sl
 800107e:	2b00      	cmp	r3, #0
 8001080:	d000      	beq.n	8001084 <__aeabi_fsub+0x310>
 8001082:	e72b      	b.n	8000edc <__aeabi_fsub+0x168>
 8001084:	2780      	movs	r7, #128	; 0x80
 8001086:	2500      	movs	r5, #0
 8001088:	20ff      	movs	r0, #255	; 0xff
 800108a:	03ff      	lsls	r7, r7, #15
 800108c:	e6d9      	b.n	8000e42 <__aeabi_fsub+0xce>
 800108e:	000d      	movs	r5, r1
 8001090:	4643      	mov	r3, r8
 8001092:	0034      	movs	r4, r6
 8001094:	e7a6      	b.n	8000fe4 <__aeabi_fsub+0x270>
 8001096:	4653      	mov	r3, sl
 8001098:	4463      	add	r3, ip
 800109a:	e6f7      	b.n	8000e8c <__aeabi_fsub+0x118>
 800109c:	4663      	mov	r3, ip
 800109e:	4652      	mov	r2, sl
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	e6a4      	b.n	8000dee <__aeabi_fsub+0x7a>
 80010a4:	4662      	mov	r2, ip
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d0d9      	beq.n	800105e <__aeabi_fsub+0x2ea>
 80010aa:	4652      	mov	r2, sl
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x33e>
 80010b0:	e716      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	03d2      	lsls	r2, r2, #15
 80010b6:	4213      	tst	r3, r2
 80010b8:	d100      	bne.n	80010bc <__aeabi_fsub+0x348>
 80010ba:	e711      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 80010bc:	4640      	mov	r0, r8
 80010be:	4210      	tst	r0, r2
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x350>
 80010c2:	e70d      	b.n	8000ee0 <__aeabi_fsub+0x16c>
 80010c4:	e70a      	b.n	8000edc <__aeabi_fsub+0x168>
 80010c6:	4652      	mov	r2, sl
 80010c8:	000d      	movs	r5, r1
 80010ca:	0034      	movs	r4, r6
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	e68e      	b.n	8000dee <__aeabi_fsub+0x7a>
 80010d0:	4653      	mov	r3, sl
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <__aeabi_fsub+0x374>
 80010d6:	000d      	movs	r5, r1
 80010d8:	4647      	mov	r7, r8
 80010da:	e6b2      	b.n	8000e42 <__aeabi_fsub+0xce>
 80010dc:	4643      	mov	r3, r8
 80010de:	0034      	movs	r4, r6
 80010e0:	e780      	b.n	8000fe4 <__aeabi_fsub+0x270>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d000      	beq.n	80010e8 <__aeabi_fsub+0x374>
 80010e6:	e779      	b.n	8000fdc <__aeabi_fsub+0x268>
 80010e8:	2500      	movs	r5, #0
 80010ea:	2700      	movs	r7, #0
 80010ec:	e6a9      	b.n	8000e42 <__aeabi_fsub+0xce>
 80010ee:	4647      	mov	r7, r8
 80010f0:	e6a7      	b.n	8000e42 <__aeabi_fsub+0xce>
 80010f2:	4653      	mov	r3, sl
 80010f4:	0034      	movs	r4, r6
 80010f6:	4463      	add	r3, ip
 80010f8:	e6c8      	b.n	8000e8c <__aeabi_fsub+0x118>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	7dffffff 	.word	0x7dffffff
 8001100:	fbffffff 	.word	0xfbffffff

08001104 <__aeabi_f2iz>:
 8001104:	0241      	lsls	r1, r0, #9
 8001106:	0042      	lsls	r2, r0, #1
 8001108:	0fc3      	lsrs	r3, r0, #31
 800110a:	0a49      	lsrs	r1, r1, #9
 800110c:	2000      	movs	r0, #0
 800110e:	0e12      	lsrs	r2, r2, #24
 8001110:	2a7e      	cmp	r2, #126	; 0x7e
 8001112:	d903      	bls.n	800111c <__aeabi_f2iz+0x18>
 8001114:	2a9d      	cmp	r2, #157	; 0x9d
 8001116:	d902      	bls.n	800111e <__aeabi_f2iz+0x1a>
 8001118:	4a09      	ldr	r2, [pc, #36]	; (8001140 <__aeabi_f2iz+0x3c>)
 800111a:	1898      	adds	r0, r3, r2
 800111c:	4770      	bx	lr
 800111e:	2080      	movs	r0, #128	; 0x80
 8001120:	0400      	lsls	r0, r0, #16
 8001122:	4301      	orrs	r1, r0
 8001124:	2a95      	cmp	r2, #149	; 0x95
 8001126:	dc07      	bgt.n	8001138 <__aeabi_f2iz+0x34>
 8001128:	2096      	movs	r0, #150	; 0x96
 800112a:	1a82      	subs	r2, r0, r2
 800112c:	40d1      	lsrs	r1, r2
 800112e:	4248      	negs	r0, r1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f3      	bne.n	800111c <__aeabi_f2iz+0x18>
 8001134:	0008      	movs	r0, r1
 8001136:	e7f1      	b.n	800111c <__aeabi_f2iz+0x18>
 8001138:	3a96      	subs	r2, #150	; 0x96
 800113a:	4091      	lsls	r1, r2
 800113c:	e7f7      	b.n	800112e <__aeabi_f2iz+0x2a>
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	7fffffff 	.word	0x7fffffff

08001144 <__aeabi_ui2f>:
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	1e05      	subs	r5, r0, #0
 8001148:	d00e      	beq.n	8001168 <__aeabi_ui2f+0x24>
 800114a:	f001 ff1f 	bl	8002f8c <__clzsi2>
 800114e:	239e      	movs	r3, #158	; 0x9e
 8001150:	0004      	movs	r4, r0
 8001152:	1a1b      	subs	r3, r3, r0
 8001154:	2b96      	cmp	r3, #150	; 0x96
 8001156:	dc0c      	bgt.n	8001172 <__aeabi_ui2f+0x2e>
 8001158:	2808      	cmp	r0, #8
 800115a:	dd01      	ble.n	8001160 <__aeabi_ui2f+0x1c>
 800115c:	3c08      	subs	r4, #8
 800115e:	40a5      	lsls	r5, r4
 8001160:	026d      	lsls	r5, r5, #9
 8001162:	0a6d      	lsrs	r5, r5, #9
 8001164:	b2d8      	uxtb	r0, r3
 8001166:	e001      	b.n	800116c <__aeabi_ui2f+0x28>
 8001168:	2000      	movs	r0, #0
 800116a:	2500      	movs	r5, #0
 800116c:	05c0      	lsls	r0, r0, #23
 800116e:	4328      	orrs	r0, r5
 8001170:	bd70      	pop	{r4, r5, r6, pc}
 8001172:	2b99      	cmp	r3, #153	; 0x99
 8001174:	dd09      	ble.n	800118a <__aeabi_ui2f+0x46>
 8001176:	0002      	movs	r2, r0
 8001178:	0029      	movs	r1, r5
 800117a:	321b      	adds	r2, #27
 800117c:	4091      	lsls	r1, r2
 800117e:	1e4a      	subs	r2, r1, #1
 8001180:	4191      	sbcs	r1, r2
 8001182:	2205      	movs	r2, #5
 8001184:	1a12      	subs	r2, r2, r0
 8001186:	40d5      	lsrs	r5, r2
 8001188:	430d      	orrs	r5, r1
 800118a:	2c05      	cmp	r4, #5
 800118c:	dd01      	ble.n	8001192 <__aeabi_ui2f+0x4e>
 800118e:	1f62      	subs	r2, r4, #5
 8001190:	4095      	lsls	r5, r2
 8001192:	0029      	movs	r1, r5
 8001194:	4e08      	ldr	r6, [pc, #32]	; (80011b8 <__aeabi_ui2f+0x74>)
 8001196:	4031      	ands	r1, r6
 8001198:	076a      	lsls	r2, r5, #29
 800119a:	d009      	beq.n	80011b0 <__aeabi_ui2f+0x6c>
 800119c:	200f      	movs	r0, #15
 800119e:	4028      	ands	r0, r5
 80011a0:	2804      	cmp	r0, #4
 80011a2:	d005      	beq.n	80011b0 <__aeabi_ui2f+0x6c>
 80011a4:	3104      	adds	r1, #4
 80011a6:	014a      	lsls	r2, r1, #5
 80011a8:	d502      	bpl.n	80011b0 <__aeabi_ui2f+0x6c>
 80011aa:	239f      	movs	r3, #159	; 0x9f
 80011ac:	4031      	ands	r1, r6
 80011ae:	1b1b      	subs	r3, r3, r4
 80011b0:	0189      	lsls	r1, r1, #6
 80011b2:	0a4d      	lsrs	r5, r1, #9
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	e7d9      	b.n	800116c <__aeabi_ui2f+0x28>
 80011b8:	fbffffff 	.word	0xfbffffff

080011bc <__aeabi_dadd>:
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	464f      	mov	r7, r9
 80011c0:	46d6      	mov	lr, sl
 80011c2:	4646      	mov	r6, r8
 80011c4:	000d      	movs	r5, r1
 80011c6:	0001      	movs	r1, r0
 80011c8:	0018      	movs	r0, r3
 80011ca:	b5c0      	push	{r6, r7, lr}
 80011cc:	0017      	movs	r7, r2
 80011ce:	032b      	lsls	r3, r5, #12
 80011d0:	0a5a      	lsrs	r2, r3, #9
 80011d2:	0f4b      	lsrs	r3, r1, #29
 80011d4:	4313      	orrs	r3, r2
 80011d6:	00ca      	lsls	r2, r1, #3
 80011d8:	4691      	mov	r9, r2
 80011da:	0302      	lsls	r2, r0, #12
 80011dc:	006e      	lsls	r6, r5, #1
 80011de:	0041      	lsls	r1, r0, #1
 80011e0:	0a52      	lsrs	r2, r2, #9
 80011e2:	0fec      	lsrs	r4, r5, #31
 80011e4:	0f7d      	lsrs	r5, r7, #29
 80011e6:	4315      	orrs	r5, r2
 80011e8:	0d76      	lsrs	r6, r6, #21
 80011ea:	0d49      	lsrs	r1, r1, #21
 80011ec:	0fc0      	lsrs	r0, r0, #31
 80011ee:	4682      	mov	sl, r0
 80011f0:	46ac      	mov	ip, r5
 80011f2:	00ff      	lsls	r7, r7, #3
 80011f4:	1a72      	subs	r2, r6, r1
 80011f6:	4284      	cmp	r4, r0
 80011f8:	d100      	bne.n	80011fc <__aeabi_dadd+0x40>
 80011fa:	e098      	b.n	800132e <__aeabi_dadd+0x172>
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	dc00      	bgt.n	8001202 <__aeabi_dadd+0x46>
 8001200:	e081      	b.n	8001306 <__aeabi_dadd+0x14a>
 8001202:	2900      	cmp	r1, #0
 8001204:	d100      	bne.n	8001208 <__aeabi_dadd+0x4c>
 8001206:	e0b6      	b.n	8001376 <__aeabi_dadd+0x1ba>
 8001208:	49c9      	ldr	r1, [pc, #804]	; (8001530 <__aeabi_dadd+0x374>)
 800120a:	428e      	cmp	r6, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_dadd+0x54>
 800120e:	e172      	b.n	80014f6 <__aeabi_dadd+0x33a>
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	0028      	movs	r0, r5
 8001214:	0409      	lsls	r1, r1, #16
 8001216:	4308      	orrs	r0, r1
 8001218:	4684      	mov	ip, r0
 800121a:	2a38      	cmp	r2, #56	; 0x38
 800121c:	dd00      	ble.n	8001220 <__aeabi_dadd+0x64>
 800121e:	e15e      	b.n	80014de <__aeabi_dadd+0x322>
 8001220:	2a1f      	cmp	r2, #31
 8001222:	dd00      	ble.n	8001226 <__aeabi_dadd+0x6a>
 8001224:	e1ee      	b.n	8001604 <__aeabi_dadd+0x448>
 8001226:	2020      	movs	r0, #32
 8001228:	0039      	movs	r1, r7
 800122a:	4665      	mov	r5, ip
 800122c:	1a80      	subs	r0, r0, r2
 800122e:	4087      	lsls	r7, r0
 8001230:	40d1      	lsrs	r1, r2
 8001232:	4085      	lsls	r5, r0
 8001234:	430d      	orrs	r5, r1
 8001236:	0039      	movs	r1, r7
 8001238:	1e4f      	subs	r7, r1, #1
 800123a:	41b9      	sbcs	r1, r7
 800123c:	4667      	mov	r7, ip
 800123e:	40d7      	lsrs	r7, r2
 8001240:	4329      	orrs	r1, r5
 8001242:	1bdb      	subs	r3, r3, r7
 8001244:	464a      	mov	r2, r9
 8001246:	1a55      	subs	r5, r2, r1
 8001248:	45a9      	cmp	r9, r5
 800124a:	4189      	sbcs	r1, r1
 800124c:	4249      	negs	r1, r1
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	4698      	mov	r8, r3
 8001252:	4643      	mov	r3, r8
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	d400      	bmi.n	800125a <__aeabi_dadd+0x9e>
 8001258:	e0cc      	b.n	80013f4 <__aeabi_dadd+0x238>
 800125a:	4643      	mov	r3, r8
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	0a5b      	lsrs	r3, r3, #9
 8001260:	4698      	mov	r8, r3
 8001262:	4643      	mov	r3, r8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_dadd+0xae>
 8001268:	e12c      	b.n	80014c4 <__aeabi_dadd+0x308>
 800126a:	4640      	mov	r0, r8
 800126c:	f001 fe8e 	bl	8002f8c <__clzsi2>
 8001270:	0001      	movs	r1, r0
 8001272:	3908      	subs	r1, #8
 8001274:	2220      	movs	r2, #32
 8001276:	0028      	movs	r0, r5
 8001278:	4643      	mov	r3, r8
 800127a:	1a52      	subs	r2, r2, r1
 800127c:	408b      	lsls	r3, r1
 800127e:	40d0      	lsrs	r0, r2
 8001280:	408d      	lsls	r5, r1
 8001282:	4303      	orrs	r3, r0
 8001284:	428e      	cmp	r6, r1
 8001286:	dd00      	ble.n	800128a <__aeabi_dadd+0xce>
 8001288:	e117      	b.n	80014ba <__aeabi_dadd+0x2fe>
 800128a:	1b8e      	subs	r6, r1, r6
 800128c:	1c72      	adds	r2, r6, #1
 800128e:	2a1f      	cmp	r2, #31
 8001290:	dd00      	ble.n	8001294 <__aeabi_dadd+0xd8>
 8001292:	e1a7      	b.n	80015e4 <__aeabi_dadd+0x428>
 8001294:	2120      	movs	r1, #32
 8001296:	0018      	movs	r0, r3
 8001298:	002e      	movs	r6, r5
 800129a:	1a89      	subs	r1, r1, r2
 800129c:	408d      	lsls	r5, r1
 800129e:	4088      	lsls	r0, r1
 80012a0:	40d6      	lsrs	r6, r2
 80012a2:	40d3      	lsrs	r3, r2
 80012a4:	1e69      	subs	r1, r5, #1
 80012a6:	418d      	sbcs	r5, r1
 80012a8:	4330      	orrs	r0, r6
 80012aa:	4698      	mov	r8, r3
 80012ac:	2600      	movs	r6, #0
 80012ae:	4305      	orrs	r5, r0
 80012b0:	076b      	lsls	r3, r5, #29
 80012b2:	d009      	beq.n	80012c8 <__aeabi_dadd+0x10c>
 80012b4:	230f      	movs	r3, #15
 80012b6:	402b      	ands	r3, r5
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d005      	beq.n	80012c8 <__aeabi_dadd+0x10c>
 80012bc:	1d2b      	adds	r3, r5, #4
 80012be:	42ab      	cmp	r3, r5
 80012c0:	41ad      	sbcs	r5, r5
 80012c2:	426d      	negs	r5, r5
 80012c4:	44a8      	add	r8, r5
 80012c6:	001d      	movs	r5, r3
 80012c8:	4643      	mov	r3, r8
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	d400      	bmi.n	80012d0 <__aeabi_dadd+0x114>
 80012ce:	e094      	b.n	80013fa <__aeabi_dadd+0x23e>
 80012d0:	4b97      	ldr	r3, [pc, #604]	; (8001530 <__aeabi_dadd+0x374>)
 80012d2:	1c72      	adds	r2, r6, #1
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d100      	bne.n	80012da <__aeabi_dadd+0x11e>
 80012d8:	e09d      	b.n	8001416 <__aeabi_dadd+0x25a>
 80012da:	4641      	mov	r1, r8
 80012dc:	4b95      	ldr	r3, [pc, #596]	; (8001534 <__aeabi_dadd+0x378>)
 80012de:	08ed      	lsrs	r5, r5, #3
 80012e0:	4019      	ands	r1, r3
 80012e2:	000b      	movs	r3, r1
 80012e4:	0552      	lsls	r2, r2, #21
 80012e6:	0749      	lsls	r1, r1, #29
 80012e8:	025b      	lsls	r3, r3, #9
 80012ea:	4329      	orrs	r1, r5
 80012ec:	0b1b      	lsrs	r3, r3, #12
 80012ee:	0d52      	lsrs	r2, r2, #21
 80012f0:	0512      	lsls	r2, r2, #20
 80012f2:	4313      	orrs	r3, r2
 80012f4:	07e4      	lsls	r4, r4, #31
 80012f6:	4323      	orrs	r3, r4
 80012f8:	0008      	movs	r0, r1
 80012fa:	0019      	movs	r1, r3
 80012fc:	bce0      	pop	{r5, r6, r7}
 80012fe:	46ba      	mov	sl, r7
 8001300:	46b1      	mov	r9, r6
 8001302:	46a8      	mov	r8, r5
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001306:	2a00      	cmp	r2, #0
 8001308:	d043      	beq.n	8001392 <__aeabi_dadd+0x1d6>
 800130a:	1b8a      	subs	r2, r1, r6
 800130c:	2e00      	cmp	r6, #0
 800130e:	d000      	beq.n	8001312 <__aeabi_dadd+0x156>
 8001310:	e12a      	b.n	8001568 <__aeabi_dadd+0x3ac>
 8001312:	464c      	mov	r4, r9
 8001314:	431c      	orrs	r4, r3
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x15e>
 8001318:	e1d1      	b.n	80016be <__aeabi_dadd+0x502>
 800131a:	1e54      	subs	r4, r2, #1
 800131c:	2a01      	cmp	r2, #1
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x166>
 8001320:	e21f      	b.n	8001762 <__aeabi_dadd+0x5a6>
 8001322:	4d83      	ldr	r5, [pc, #524]	; (8001530 <__aeabi_dadd+0x374>)
 8001324:	42aa      	cmp	r2, r5
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x16e>
 8001328:	e272      	b.n	8001810 <__aeabi_dadd+0x654>
 800132a:	0022      	movs	r2, r4
 800132c:	e123      	b.n	8001576 <__aeabi_dadd+0x3ba>
 800132e:	2a00      	cmp	r2, #0
 8001330:	dc00      	bgt.n	8001334 <__aeabi_dadd+0x178>
 8001332:	e098      	b.n	8001466 <__aeabi_dadd+0x2aa>
 8001334:	2900      	cmp	r1, #0
 8001336:	d042      	beq.n	80013be <__aeabi_dadd+0x202>
 8001338:	497d      	ldr	r1, [pc, #500]	; (8001530 <__aeabi_dadd+0x374>)
 800133a:	428e      	cmp	r6, r1
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0x184>
 800133e:	e0da      	b.n	80014f6 <__aeabi_dadd+0x33a>
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	0028      	movs	r0, r5
 8001344:	0409      	lsls	r1, r1, #16
 8001346:	4308      	orrs	r0, r1
 8001348:	4684      	mov	ip, r0
 800134a:	2a38      	cmp	r2, #56	; 0x38
 800134c:	dd00      	ble.n	8001350 <__aeabi_dadd+0x194>
 800134e:	e129      	b.n	80015a4 <__aeabi_dadd+0x3e8>
 8001350:	2a1f      	cmp	r2, #31
 8001352:	dc00      	bgt.n	8001356 <__aeabi_dadd+0x19a>
 8001354:	e187      	b.n	8001666 <__aeabi_dadd+0x4aa>
 8001356:	0011      	movs	r1, r2
 8001358:	4665      	mov	r5, ip
 800135a:	3920      	subs	r1, #32
 800135c:	40cd      	lsrs	r5, r1
 800135e:	2a20      	cmp	r2, #32
 8001360:	d004      	beq.n	800136c <__aeabi_dadd+0x1b0>
 8001362:	2040      	movs	r0, #64	; 0x40
 8001364:	4661      	mov	r1, ip
 8001366:	1a82      	subs	r2, r0, r2
 8001368:	4091      	lsls	r1, r2
 800136a:	430f      	orrs	r7, r1
 800136c:	0039      	movs	r1, r7
 800136e:	1e4f      	subs	r7, r1, #1
 8001370:	41b9      	sbcs	r1, r7
 8001372:	430d      	orrs	r5, r1
 8001374:	e11b      	b.n	80015ae <__aeabi_dadd+0x3f2>
 8001376:	0029      	movs	r1, r5
 8001378:	4339      	orrs	r1, r7
 800137a:	d100      	bne.n	800137e <__aeabi_dadd+0x1c2>
 800137c:	e0b5      	b.n	80014ea <__aeabi_dadd+0x32e>
 800137e:	1e51      	subs	r1, r2, #1
 8001380:	2a01      	cmp	r2, #1
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x1ca>
 8001384:	e1ab      	b.n	80016de <__aeabi_dadd+0x522>
 8001386:	486a      	ldr	r0, [pc, #424]	; (8001530 <__aeabi_dadd+0x374>)
 8001388:	4282      	cmp	r2, r0
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x1d2>
 800138c:	e1b2      	b.n	80016f4 <__aeabi_dadd+0x538>
 800138e:	000a      	movs	r2, r1
 8001390:	e743      	b.n	800121a <__aeabi_dadd+0x5e>
 8001392:	4969      	ldr	r1, [pc, #420]	; (8001538 <__aeabi_dadd+0x37c>)
 8001394:	1c75      	adds	r5, r6, #1
 8001396:	420d      	tst	r5, r1
 8001398:	d000      	beq.n	800139c <__aeabi_dadd+0x1e0>
 800139a:	e0cf      	b.n	800153c <__aeabi_dadd+0x380>
 800139c:	2e00      	cmp	r6, #0
 800139e:	d000      	beq.n	80013a2 <__aeabi_dadd+0x1e6>
 80013a0:	e193      	b.n	80016ca <__aeabi_dadd+0x50e>
 80013a2:	4649      	mov	r1, r9
 80013a4:	4319      	orrs	r1, r3
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x1ee>
 80013a8:	e1d1      	b.n	800174e <__aeabi_dadd+0x592>
 80013aa:	4661      	mov	r1, ip
 80013ac:	4339      	orrs	r1, r7
 80013ae:	d000      	beq.n	80013b2 <__aeabi_dadd+0x1f6>
 80013b0:	e1e3      	b.n	800177a <__aeabi_dadd+0x5be>
 80013b2:	4649      	mov	r1, r9
 80013b4:	0758      	lsls	r0, r3, #29
 80013b6:	08c9      	lsrs	r1, r1, #3
 80013b8:	4301      	orrs	r1, r0
 80013ba:	08db      	lsrs	r3, r3, #3
 80013bc:	e026      	b.n	800140c <__aeabi_dadd+0x250>
 80013be:	0029      	movs	r1, r5
 80013c0:	4339      	orrs	r1, r7
 80013c2:	d100      	bne.n	80013c6 <__aeabi_dadd+0x20a>
 80013c4:	e091      	b.n	80014ea <__aeabi_dadd+0x32e>
 80013c6:	1e51      	subs	r1, r2, #1
 80013c8:	2a01      	cmp	r2, #1
 80013ca:	d005      	beq.n	80013d8 <__aeabi_dadd+0x21c>
 80013cc:	4858      	ldr	r0, [pc, #352]	; (8001530 <__aeabi_dadd+0x374>)
 80013ce:	4282      	cmp	r2, r0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x218>
 80013d2:	e18f      	b.n	80016f4 <__aeabi_dadd+0x538>
 80013d4:	000a      	movs	r2, r1
 80013d6:	e7b8      	b.n	800134a <__aeabi_dadd+0x18e>
 80013d8:	003d      	movs	r5, r7
 80013da:	444d      	add	r5, r9
 80013dc:	454d      	cmp	r5, r9
 80013de:	4189      	sbcs	r1, r1
 80013e0:	4463      	add	r3, ip
 80013e2:	4698      	mov	r8, r3
 80013e4:	4249      	negs	r1, r1
 80013e6:	4488      	add	r8, r1
 80013e8:	4643      	mov	r3, r8
 80013ea:	2602      	movs	r6, #2
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	d500      	bpl.n	80013f2 <__aeabi_dadd+0x236>
 80013f0:	e0eb      	b.n	80015ca <__aeabi_dadd+0x40e>
 80013f2:	3e01      	subs	r6, #1
 80013f4:	076b      	lsls	r3, r5, #29
 80013f6:	d000      	beq.n	80013fa <__aeabi_dadd+0x23e>
 80013f8:	e75c      	b.n	80012b4 <__aeabi_dadd+0xf8>
 80013fa:	4643      	mov	r3, r8
 80013fc:	08e9      	lsrs	r1, r5, #3
 80013fe:	075a      	lsls	r2, r3, #29
 8001400:	4311      	orrs	r1, r2
 8001402:	0032      	movs	r2, r6
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	484a      	ldr	r0, [pc, #296]	; (8001530 <__aeabi_dadd+0x374>)
 8001408:	4282      	cmp	r2, r0
 800140a:	d021      	beq.n	8001450 <__aeabi_dadd+0x294>
 800140c:	031b      	lsls	r3, r3, #12
 800140e:	0552      	lsls	r2, r2, #21
 8001410:	0b1b      	lsrs	r3, r3, #12
 8001412:	0d52      	lsrs	r2, r2, #21
 8001414:	e76c      	b.n	80012f0 <__aeabi_dadd+0x134>
 8001416:	2300      	movs	r3, #0
 8001418:	2100      	movs	r1, #0
 800141a:	e769      	b.n	80012f0 <__aeabi_dadd+0x134>
 800141c:	002a      	movs	r2, r5
 800141e:	433a      	orrs	r2, r7
 8001420:	d069      	beq.n	80014f6 <__aeabi_dadd+0x33a>
 8001422:	464a      	mov	r2, r9
 8001424:	0758      	lsls	r0, r3, #29
 8001426:	08d1      	lsrs	r1, r2, #3
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	031b      	lsls	r3, r3, #12
 800142e:	4308      	orrs	r0, r1
 8001430:	421a      	tst	r2, r3
 8001432:	d007      	beq.n	8001444 <__aeabi_dadd+0x288>
 8001434:	0029      	movs	r1, r5
 8001436:	08ed      	lsrs	r5, r5, #3
 8001438:	421d      	tst	r5, r3
 800143a:	d103      	bne.n	8001444 <__aeabi_dadd+0x288>
 800143c:	002a      	movs	r2, r5
 800143e:	08ff      	lsrs	r7, r7, #3
 8001440:	0748      	lsls	r0, r1, #29
 8001442:	4338      	orrs	r0, r7
 8001444:	0f43      	lsrs	r3, r0, #29
 8001446:	00c1      	lsls	r1, r0, #3
 8001448:	075b      	lsls	r3, r3, #29
 800144a:	08c9      	lsrs	r1, r1, #3
 800144c:	4319      	orrs	r1, r3
 800144e:	0013      	movs	r3, r2
 8001450:	000a      	movs	r2, r1
 8001452:	431a      	orrs	r2, r3
 8001454:	d100      	bne.n	8001458 <__aeabi_dadd+0x29c>
 8001456:	e213      	b.n	8001880 <__aeabi_dadd+0x6c4>
 8001458:	2280      	movs	r2, #128	; 0x80
 800145a:	0312      	lsls	r2, r2, #12
 800145c:	4313      	orrs	r3, r2
 800145e:	031b      	lsls	r3, r3, #12
 8001460:	4a33      	ldr	r2, [pc, #204]	; (8001530 <__aeabi_dadd+0x374>)
 8001462:	0b1b      	lsrs	r3, r3, #12
 8001464:	e744      	b.n	80012f0 <__aeabi_dadd+0x134>
 8001466:	2a00      	cmp	r2, #0
 8001468:	d04b      	beq.n	8001502 <__aeabi_dadd+0x346>
 800146a:	1b8a      	subs	r2, r1, r6
 800146c:	2e00      	cmp	r6, #0
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x2b6>
 8001470:	e0e7      	b.n	8001642 <__aeabi_dadd+0x486>
 8001472:	482f      	ldr	r0, [pc, #188]	; (8001530 <__aeabi_dadd+0x374>)
 8001474:	4281      	cmp	r1, r0
 8001476:	d100      	bne.n	800147a <__aeabi_dadd+0x2be>
 8001478:	e195      	b.n	80017a6 <__aeabi_dadd+0x5ea>
 800147a:	2080      	movs	r0, #128	; 0x80
 800147c:	0400      	lsls	r0, r0, #16
 800147e:	4303      	orrs	r3, r0
 8001480:	2a38      	cmp	r2, #56	; 0x38
 8001482:	dd00      	ble.n	8001486 <__aeabi_dadd+0x2ca>
 8001484:	e143      	b.n	800170e <__aeabi_dadd+0x552>
 8001486:	2a1f      	cmp	r2, #31
 8001488:	dd00      	ble.n	800148c <__aeabi_dadd+0x2d0>
 800148a:	e1db      	b.n	8001844 <__aeabi_dadd+0x688>
 800148c:	2020      	movs	r0, #32
 800148e:	001d      	movs	r5, r3
 8001490:	464e      	mov	r6, r9
 8001492:	1a80      	subs	r0, r0, r2
 8001494:	4085      	lsls	r5, r0
 8001496:	40d6      	lsrs	r6, r2
 8001498:	4335      	orrs	r5, r6
 800149a:	464e      	mov	r6, r9
 800149c:	4086      	lsls	r6, r0
 800149e:	0030      	movs	r0, r6
 80014a0:	40d3      	lsrs	r3, r2
 80014a2:	1e46      	subs	r6, r0, #1
 80014a4:	41b0      	sbcs	r0, r6
 80014a6:	449c      	add	ip, r3
 80014a8:	4305      	orrs	r5, r0
 80014aa:	19ed      	adds	r5, r5, r7
 80014ac:	42bd      	cmp	r5, r7
 80014ae:	419b      	sbcs	r3, r3
 80014b0:	425b      	negs	r3, r3
 80014b2:	4463      	add	r3, ip
 80014b4:	4698      	mov	r8, r3
 80014b6:	000e      	movs	r6, r1
 80014b8:	e07f      	b.n	80015ba <__aeabi_dadd+0x3fe>
 80014ba:	4a1e      	ldr	r2, [pc, #120]	; (8001534 <__aeabi_dadd+0x378>)
 80014bc:	1a76      	subs	r6, r6, r1
 80014be:	4013      	ands	r3, r2
 80014c0:	4698      	mov	r8, r3
 80014c2:	e6f5      	b.n	80012b0 <__aeabi_dadd+0xf4>
 80014c4:	0028      	movs	r0, r5
 80014c6:	f001 fd61 	bl	8002f8c <__clzsi2>
 80014ca:	0001      	movs	r1, r0
 80014cc:	3118      	adds	r1, #24
 80014ce:	291f      	cmp	r1, #31
 80014d0:	dc00      	bgt.n	80014d4 <__aeabi_dadd+0x318>
 80014d2:	e6cf      	b.n	8001274 <__aeabi_dadd+0xb8>
 80014d4:	002b      	movs	r3, r5
 80014d6:	3808      	subs	r0, #8
 80014d8:	4083      	lsls	r3, r0
 80014da:	2500      	movs	r5, #0
 80014dc:	e6d2      	b.n	8001284 <__aeabi_dadd+0xc8>
 80014de:	4662      	mov	r2, ip
 80014e0:	433a      	orrs	r2, r7
 80014e2:	0011      	movs	r1, r2
 80014e4:	1e4f      	subs	r7, r1, #1
 80014e6:	41b9      	sbcs	r1, r7
 80014e8:	e6ac      	b.n	8001244 <__aeabi_dadd+0x88>
 80014ea:	4649      	mov	r1, r9
 80014ec:	0758      	lsls	r0, r3, #29
 80014ee:	08c9      	lsrs	r1, r1, #3
 80014f0:	4301      	orrs	r1, r0
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	e787      	b.n	8001406 <__aeabi_dadd+0x24a>
 80014f6:	4649      	mov	r1, r9
 80014f8:	075a      	lsls	r2, r3, #29
 80014fa:	08c9      	lsrs	r1, r1, #3
 80014fc:	4311      	orrs	r1, r2
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	e7a6      	b.n	8001450 <__aeabi_dadd+0x294>
 8001502:	490d      	ldr	r1, [pc, #52]	; (8001538 <__aeabi_dadd+0x37c>)
 8001504:	1c70      	adds	r0, r6, #1
 8001506:	4208      	tst	r0, r1
 8001508:	d000      	beq.n	800150c <__aeabi_dadd+0x350>
 800150a:	e0bb      	b.n	8001684 <__aeabi_dadd+0x4c8>
 800150c:	2e00      	cmp	r6, #0
 800150e:	d000      	beq.n	8001512 <__aeabi_dadd+0x356>
 8001510:	e114      	b.n	800173c <__aeabi_dadd+0x580>
 8001512:	4649      	mov	r1, r9
 8001514:	4319      	orrs	r1, r3
 8001516:	d100      	bne.n	800151a <__aeabi_dadd+0x35e>
 8001518:	e175      	b.n	8001806 <__aeabi_dadd+0x64a>
 800151a:	0029      	movs	r1, r5
 800151c:	4339      	orrs	r1, r7
 800151e:	d000      	beq.n	8001522 <__aeabi_dadd+0x366>
 8001520:	e17e      	b.n	8001820 <__aeabi_dadd+0x664>
 8001522:	4649      	mov	r1, r9
 8001524:	0758      	lsls	r0, r3, #29
 8001526:	08c9      	lsrs	r1, r1, #3
 8001528:	4301      	orrs	r1, r0
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	e76e      	b.n	800140c <__aeabi_dadd+0x250>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	000007ff 	.word	0x000007ff
 8001534:	ff7fffff 	.word	0xff7fffff
 8001538:	000007fe 	.word	0x000007fe
 800153c:	4649      	mov	r1, r9
 800153e:	1bcd      	subs	r5, r1, r7
 8001540:	4661      	mov	r1, ip
 8001542:	1a58      	subs	r0, r3, r1
 8001544:	45a9      	cmp	r9, r5
 8001546:	4189      	sbcs	r1, r1
 8001548:	4249      	negs	r1, r1
 800154a:	4688      	mov	r8, r1
 800154c:	0001      	movs	r1, r0
 800154e:	4640      	mov	r0, r8
 8001550:	1a09      	subs	r1, r1, r0
 8001552:	4688      	mov	r8, r1
 8001554:	0209      	lsls	r1, r1, #8
 8001556:	d500      	bpl.n	800155a <__aeabi_dadd+0x39e>
 8001558:	e0a6      	b.n	80016a8 <__aeabi_dadd+0x4ec>
 800155a:	4641      	mov	r1, r8
 800155c:	4329      	orrs	r1, r5
 800155e:	d000      	beq.n	8001562 <__aeabi_dadd+0x3a6>
 8001560:	e67f      	b.n	8001262 <__aeabi_dadd+0xa6>
 8001562:	2300      	movs	r3, #0
 8001564:	2400      	movs	r4, #0
 8001566:	e751      	b.n	800140c <__aeabi_dadd+0x250>
 8001568:	4cc7      	ldr	r4, [pc, #796]	; (8001888 <__aeabi_dadd+0x6cc>)
 800156a:	42a1      	cmp	r1, r4
 800156c:	d100      	bne.n	8001570 <__aeabi_dadd+0x3b4>
 800156e:	e0c7      	b.n	8001700 <__aeabi_dadd+0x544>
 8001570:	2480      	movs	r4, #128	; 0x80
 8001572:	0424      	lsls	r4, r4, #16
 8001574:	4323      	orrs	r3, r4
 8001576:	2a38      	cmp	r2, #56	; 0x38
 8001578:	dc54      	bgt.n	8001624 <__aeabi_dadd+0x468>
 800157a:	2a1f      	cmp	r2, #31
 800157c:	dd00      	ble.n	8001580 <__aeabi_dadd+0x3c4>
 800157e:	e0cc      	b.n	800171a <__aeabi_dadd+0x55e>
 8001580:	2420      	movs	r4, #32
 8001582:	4648      	mov	r0, r9
 8001584:	1aa4      	subs	r4, r4, r2
 8001586:	001d      	movs	r5, r3
 8001588:	464e      	mov	r6, r9
 800158a:	40a0      	lsls	r0, r4
 800158c:	40d6      	lsrs	r6, r2
 800158e:	40a5      	lsls	r5, r4
 8001590:	0004      	movs	r4, r0
 8001592:	40d3      	lsrs	r3, r2
 8001594:	4662      	mov	r2, ip
 8001596:	4335      	orrs	r5, r6
 8001598:	1e66      	subs	r6, r4, #1
 800159a:	41b4      	sbcs	r4, r6
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	469c      	mov	ip, r3
 80015a0:	4325      	orrs	r5, r4
 80015a2:	e044      	b.n	800162e <__aeabi_dadd+0x472>
 80015a4:	4662      	mov	r2, ip
 80015a6:	433a      	orrs	r2, r7
 80015a8:	0015      	movs	r5, r2
 80015aa:	1e6f      	subs	r7, r5, #1
 80015ac:	41bd      	sbcs	r5, r7
 80015ae:	444d      	add	r5, r9
 80015b0:	454d      	cmp	r5, r9
 80015b2:	4189      	sbcs	r1, r1
 80015b4:	4249      	negs	r1, r1
 80015b6:	4688      	mov	r8, r1
 80015b8:	4498      	add	r8, r3
 80015ba:	4643      	mov	r3, r8
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	d400      	bmi.n	80015c2 <__aeabi_dadd+0x406>
 80015c0:	e718      	b.n	80013f4 <__aeabi_dadd+0x238>
 80015c2:	4bb1      	ldr	r3, [pc, #708]	; (8001888 <__aeabi_dadd+0x6cc>)
 80015c4:	3601      	adds	r6, #1
 80015c6:	429e      	cmp	r6, r3
 80015c8:	d049      	beq.n	800165e <__aeabi_dadd+0x4a2>
 80015ca:	4642      	mov	r2, r8
 80015cc:	4baf      	ldr	r3, [pc, #700]	; (800188c <__aeabi_dadd+0x6d0>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	401a      	ands	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	086a      	lsrs	r2, r5, #1
 80015d6:	400d      	ands	r5, r1
 80015d8:	4315      	orrs	r5, r2
 80015da:	07d9      	lsls	r1, r3, #31
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	4698      	mov	r8, r3
 80015e0:	430d      	orrs	r5, r1
 80015e2:	e665      	b.n	80012b0 <__aeabi_dadd+0xf4>
 80015e4:	0018      	movs	r0, r3
 80015e6:	3e1f      	subs	r6, #31
 80015e8:	40f0      	lsrs	r0, r6
 80015ea:	2a20      	cmp	r2, #32
 80015ec:	d003      	beq.n	80015f6 <__aeabi_dadd+0x43a>
 80015ee:	2140      	movs	r1, #64	; 0x40
 80015f0:	1a8a      	subs	r2, r1, r2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	431d      	orrs	r5, r3
 80015f6:	1e69      	subs	r1, r5, #1
 80015f8:	418d      	sbcs	r5, r1
 80015fa:	2300      	movs	r3, #0
 80015fc:	2600      	movs	r6, #0
 80015fe:	4698      	mov	r8, r3
 8001600:	4305      	orrs	r5, r0
 8001602:	e6f7      	b.n	80013f4 <__aeabi_dadd+0x238>
 8001604:	0011      	movs	r1, r2
 8001606:	4665      	mov	r5, ip
 8001608:	3920      	subs	r1, #32
 800160a:	40cd      	lsrs	r5, r1
 800160c:	2a20      	cmp	r2, #32
 800160e:	d004      	beq.n	800161a <__aeabi_dadd+0x45e>
 8001610:	2040      	movs	r0, #64	; 0x40
 8001612:	4661      	mov	r1, ip
 8001614:	1a82      	subs	r2, r0, r2
 8001616:	4091      	lsls	r1, r2
 8001618:	430f      	orrs	r7, r1
 800161a:	0039      	movs	r1, r7
 800161c:	1e4f      	subs	r7, r1, #1
 800161e:	41b9      	sbcs	r1, r7
 8001620:	4329      	orrs	r1, r5
 8001622:	e60f      	b.n	8001244 <__aeabi_dadd+0x88>
 8001624:	464a      	mov	r2, r9
 8001626:	4313      	orrs	r3, r2
 8001628:	001d      	movs	r5, r3
 800162a:	1e6b      	subs	r3, r5, #1
 800162c:	419d      	sbcs	r5, r3
 800162e:	1b7d      	subs	r5, r7, r5
 8001630:	42af      	cmp	r7, r5
 8001632:	419b      	sbcs	r3, r3
 8001634:	4662      	mov	r2, ip
 8001636:	425b      	negs	r3, r3
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	4698      	mov	r8, r3
 800163c:	4654      	mov	r4, sl
 800163e:	000e      	movs	r6, r1
 8001640:	e607      	b.n	8001252 <__aeabi_dadd+0x96>
 8001642:	4648      	mov	r0, r9
 8001644:	4318      	orrs	r0, r3
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x48e>
 8001648:	e0b3      	b.n	80017b2 <__aeabi_dadd+0x5f6>
 800164a:	1e50      	subs	r0, r2, #1
 800164c:	2a01      	cmp	r2, #1
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x496>
 8001650:	e10d      	b.n	800186e <__aeabi_dadd+0x6b2>
 8001652:	4d8d      	ldr	r5, [pc, #564]	; (8001888 <__aeabi_dadd+0x6cc>)
 8001654:	42aa      	cmp	r2, r5
 8001656:	d100      	bne.n	800165a <__aeabi_dadd+0x49e>
 8001658:	e0a5      	b.n	80017a6 <__aeabi_dadd+0x5ea>
 800165a:	0002      	movs	r2, r0
 800165c:	e710      	b.n	8001480 <__aeabi_dadd+0x2c4>
 800165e:	0032      	movs	r2, r6
 8001660:	2300      	movs	r3, #0
 8001662:	2100      	movs	r1, #0
 8001664:	e644      	b.n	80012f0 <__aeabi_dadd+0x134>
 8001666:	2120      	movs	r1, #32
 8001668:	0038      	movs	r0, r7
 800166a:	1a89      	subs	r1, r1, r2
 800166c:	4665      	mov	r5, ip
 800166e:	408f      	lsls	r7, r1
 8001670:	408d      	lsls	r5, r1
 8001672:	40d0      	lsrs	r0, r2
 8001674:	1e79      	subs	r1, r7, #1
 8001676:	418f      	sbcs	r7, r1
 8001678:	4305      	orrs	r5, r0
 800167a:	433d      	orrs	r5, r7
 800167c:	4667      	mov	r7, ip
 800167e:	40d7      	lsrs	r7, r2
 8001680:	19db      	adds	r3, r3, r7
 8001682:	e794      	b.n	80015ae <__aeabi_dadd+0x3f2>
 8001684:	4a80      	ldr	r2, [pc, #512]	; (8001888 <__aeabi_dadd+0x6cc>)
 8001686:	4290      	cmp	r0, r2
 8001688:	d100      	bne.n	800168c <__aeabi_dadd+0x4d0>
 800168a:	e0ec      	b.n	8001866 <__aeabi_dadd+0x6aa>
 800168c:	0039      	movs	r1, r7
 800168e:	4449      	add	r1, r9
 8001690:	4549      	cmp	r1, r9
 8001692:	4192      	sbcs	r2, r2
 8001694:	4463      	add	r3, ip
 8001696:	4252      	negs	r2, r2
 8001698:	189b      	adds	r3, r3, r2
 800169a:	07dd      	lsls	r5, r3, #31
 800169c:	0849      	lsrs	r1, r1, #1
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	4698      	mov	r8, r3
 80016a2:	0006      	movs	r6, r0
 80016a4:	430d      	orrs	r5, r1
 80016a6:	e6a5      	b.n	80013f4 <__aeabi_dadd+0x238>
 80016a8:	464a      	mov	r2, r9
 80016aa:	1abd      	subs	r5, r7, r2
 80016ac:	42af      	cmp	r7, r5
 80016ae:	4189      	sbcs	r1, r1
 80016b0:	4662      	mov	r2, ip
 80016b2:	4249      	negs	r1, r1
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	1a5b      	subs	r3, r3, r1
 80016b8:	4698      	mov	r8, r3
 80016ba:	4654      	mov	r4, sl
 80016bc:	e5d1      	b.n	8001262 <__aeabi_dadd+0xa6>
 80016be:	076c      	lsls	r4, r5, #29
 80016c0:	08f9      	lsrs	r1, r7, #3
 80016c2:	4321      	orrs	r1, r4
 80016c4:	08eb      	lsrs	r3, r5, #3
 80016c6:	0004      	movs	r4, r0
 80016c8:	e69d      	b.n	8001406 <__aeabi_dadd+0x24a>
 80016ca:	464a      	mov	r2, r9
 80016cc:	431a      	orrs	r2, r3
 80016ce:	d175      	bne.n	80017bc <__aeabi_dadd+0x600>
 80016d0:	4661      	mov	r1, ip
 80016d2:	4339      	orrs	r1, r7
 80016d4:	d114      	bne.n	8001700 <__aeabi_dadd+0x544>
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	2400      	movs	r4, #0
 80016da:	031b      	lsls	r3, r3, #12
 80016dc:	e6bc      	b.n	8001458 <__aeabi_dadd+0x29c>
 80016de:	464a      	mov	r2, r9
 80016e0:	1bd5      	subs	r5, r2, r7
 80016e2:	45a9      	cmp	r9, r5
 80016e4:	4189      	sbcs	r1, r1
 80016e6:	4662      	mov	r2, ip
 80016e8:	4249      	negs	r1, r1
 80016ea:	1a9b      	subs	r3, r3, r2
 80016ec:	1a5b      	subs	r3, r3, r1
 80016ee:	4698      	mov	r8, r3
 80016f0:	2601      	movs	r6, #1
 80016f2:	e5ae      	b.n	8001252 <__aeabi_dadd+0x96>
 80016f4:	464a      	mov	r2, r9
 80016f6:	08d1      	lsrs	r1, r2, #3
 80016f8:	075a      	lsls	r2, r3, #29
 80016fa:	4311      	orrs	r1, r2
 80016fc:	08db      	lsrs	r3, r3, #3
 80016fe:	e6a7      	b.n	8001450 <__aeabi_dadd+0x294>
 8001700:	4663      	mov	r3, ip
 8001702:	08f9      	lsrs	r1, r7, #3
 8001704:	075a      	lsls	r2, r3, #29
 8001706:	4654      	mov	r4, sl
 8001708:	4311      	orrs	r1, r2
 800170a:	08db      	lsrs	r3, r3, #3
 800170c:	e6a0      	b.n	8001450 <__aeabi_dadd+0x294>
 800170e:	464a      	mov	r2, r9
 8001710:	4313      	orrs	r3, r2
 8001712:	001d      	movs	r5, r3
 8001714:	1e6b      	subs	r3, r5, #1
 8001716:	419d      	sbcs	r5, r3
 8001718:	e6c7      	b.n	80014aa <__aeabi_dadd+0x2ee>
 800171a:	0014      	movs	r4, r2
 800171c:	001e      	movs	r6, r3
 800171e:	3c20      	subs	r4, #32
 8001720:	40e6      	lsrs	r6, r4
 8001722:	2a20      	cmp	r2, #32
 8001724:	d005      	beq.n	8001732 <__aeabi_dadd+0x576>
 8001726:	2440      	movs	r4, #64	; 0x40
 8001728:	1aa2      	subs	r2, r4, r2
 800172a:	4093      	lsls	r3, r2
 800172c:	464a      	mov	r2, r9
 800172e:	431a      	orrs	r2, r3
 8001730:	4691      	mov	r9, r2
 8001732:	464d      	mov	r5, r9
 8001734:	1e6b      	subs	r3, r5, #1
 8001736:	419d      	sbcs	r5, r3
 8001738:	4335      	orrs	r5, r6
 800173a:	e778      	b.n	800162e <__aeabi_dadd+0x472>
 800173c:	464a      	mov	r2, r9
 800173e:	431a      	orrs	r2, r3
 8001740:	d000      	beq.n	8001744 <__aeabi_dadd+0x588>
 8001742:	e66b      	b.n	800141c <__aeabi_dadd+0x260>
 8001744:	076b      	lsls	r3, r5, #29
 8001746:	08f9      	lsrs	r1, r7, #3
 8001748:	4319      	orrs	r1, r3
 800174a:	08eb      	lsrs	r3, r5, #3
 800174c:	e680      	b.n	8001450 <__aeabi_dadd+0x294>
 800174e:	4661      	mov	r1, ip
 8001750:	4339      	orrs	r1, r7
 8001752:	d054      	beq.n	80017fe <__aeabi_dadd+0x642>
 8001754:	4663      	mov	r3, ip
 8001756:	08f9      	lsrs	r1, r7, #3
 8001758:	075c      	lsls	r4, r3, #29
 800175a:	4321      	orrs	r1, r4
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	0004      	movs	r4, r0
 8001760:	e654      	b.n	800140c <__aeabi_dadd+0x250>
 8001762:	464a      	mov	r2, r9
 8001764:	1abd      	subs	r5, r7, r2
 8001766:	42af      	cmp	r7, r5
 8001768:	4189      	sbcs	r1, r1
 800176a:	4662      	mov	r2, ip
 800176c:	4249      	negs	r1, r1
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	1a5b      	subs	r3, r3, r1
 8001772:	4698      	mov	r8, r3
 8001774:	0004      	movs	r4, r0
 8001776:	2601      	movs	r6, #1
 8001778:	e56b      	b.n	8001252 <__aeabi_dadd+0x96>
 800177a:	464a      	mov	r2, r9
 800177c:	1bd5      	subs	r5, r2, r7
 800177e:	45a9      	cmp	r9, r5
 8001780:	4189      	sbcs	r1, r1
 8001782:	4662      	mov	r2, ip
 8001784:	4249      	negs	r1, r1
 8001786:	1a9a      	subs	r2, r3, r2
 8001788:	1a52      	subs	r2, r2, r1
 800178a:	4690      	mov	r8, r2
 800178c:	0212      	lsls	r2, r2, #8
 800178e:	d532      	bpl.n	80017f6 <__aeabi_dadd+0x63a>
 8001790:	464a      	mov	r2, r9
 8001792:	1abd      	subs	r5, r7, r2
 8001794:	42af      	cmp	r7, r5
 8001796:	4189      	sbcs	r1, r1
 8001798:	4662      	mov	r2, ip
 800179a:	4249      	negs	r1, r1
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	1a5b      	subs	r3, r3, r1
 80017a0:	4698      	mov	r8, r3
 80017a2:	0004      	movs	r4, r0
 80017a4:	e584      	b.n	80012b0 <__aeabi_dadd+0xf4>
 80017a6:	4663      	mov	r3, ip
 80017a8:	08f9      	lsrs	r1, r7, #3
 80017aa:	075a      	lsls	r2, r3, #29
 80017ac:	4311      	orrs	r1, r2
 80017ae:	08db      	lsrs	r3, r3, #3
 80017b0:	e64e      	b.n	8001450 <__aeabi_dadd+0x294>
 80017b2:	08f9      	lsrs	r1, r7, #3
 80017b4:	0768      	lsls	r0, r5, #29
 80017b6:	4301      	orrs	r1, r0
 80017b8:	08eb      	lsrs	r3, r5, #3
 80017ba:	e624      	b.n	8001406 <__aeabi_dadd+0x24a>
 80017bc:	4662      	mov	r2, ip
 80017be:	433a      	orrs	r2, r7
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x608>
 80017c2:	e698      	b.n	80014f6 <__aeabi_dadd+0x33a>
 80017c4:	464a      	mov	r2, r9
 80017c6:	08d1      	lsrs	r1, r2, #3
 80017c8:	075a      	lsls	r2, r3, #29
 80017ca:	4311      	orrs	r1, r2
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	031b      	lsls	r3, r3, #12
 80017d2:	421a      	tst	r2, r3
 80017d4:	d008      	beq.n	80017e8 <__aeabi_dadd+0x62c>
 80017d6:	4660      	mov	r0, ip
 80017d8:	08c5      	lsrs	r5, r0, #3
 80017da:	421d      	tst	r5, r3
 80017dc:	d104      	bne.n	80017e8 <__aeabi_dadd+0x62c>
 80017de:	4654      	mov	r4, sl
 80017e0:	002a      	movs	r2, r5
 80017e2:	08f9      	lsrs	r1, r7, #3
 80017e4:	0743      	lsls	r3, r0, #29
 80017e6:	4319      	orrs	r1, r3
 80017e8:	0f4b      	lsrs	r3, r1, #29
 80017ea:	00c9      	lsls	r1, r1, #3
 80017ec:	075b      	lsls	r3, r3, #29
 80017ee:	08c9      	lsrs	r1, r1, #3
 80017f0:	4319      	orrs	r1, r3
 80017f2:	0013      	movs	r3, r2
 80017f4:	e62c      	b.n	8001450 <__aeabi_dadd+0x294>
 80017f6:	4641      	mov	r1, r8
 80017f8:	4329      	orrs	r1, r5
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x642>
 80017fc:	e5fa      	b.n	80013f4 <__aeabi_dadd+0x238>
 80017fe:	2300      	movs	r3, #0
 8001800:	000a      	movs	r2, r1
 8001802:	2400      	movs	r4, #0
 8001804:	e602      	b.n	800140c <__aeabi_dadd+0x250>
 8001806:	076b      	lsls	r3, r5, #29
 8001808:	08f9      	lsrs	r1, r7, #3
 800180a:	4319      	orrs	r1, r3
 800180c:	08eb      	lsrs	r3, r5, #3
 800180e:	e5fd      	b.n	800140c <__aeabi_dadd+0x250>
 8001810:	4663      	mov	r3, ip
 8001812:	08f9      	lsrs	r1, r7, #3
 8001814:	075b      	lsls	r3, r3, #29
 8001816:	4319      	orrs	r1, r3
 8001818:	4663      	mov	r3, ip
 800181a:	0004      	movs	r4, r0
 800181c:	08db      	lsrs	r3, r3, #3
 800181e:	e617      	b.n	8001450 <__aeabi_dadd+0x294>
 8001820:	003d      	movs	r5, r7
 8001822:	444d      	add	r5, r9
 8001824:	4463      	add	r3, ip
 8001826:	454d      	cmp	r5, r9
 8001828:	4189      	sbcs	r1, r1
 800182a:	4698      	mov	r8, r3
 800182c:	4249      	negs	r1, r1
 800182e:	4488      	add	r8, r1
 8001830:	4643      	mov	r3, r8
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	d400      	bmi.n	8001838 <__aeabi_dadd+0x67c>
 8001836:	e5dd      	b.n	80013f4 <__aeabi_dadd+0x238>
 8001838:	4642      	mov	r2, r8
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <__aeabi_dadd+0x6d0>)
 800183c:	2601      	movs	r6, #1
 800183e:	401a      	ands	r2, r3
 8001840:	4690      	mov	r8, r2
 8001842:	e5d7      	b.n	80013f4 <__aeabi_dadd+0x238>
 8001844:	0010      	movs	r0, r2
 8001846:	001e      	movs	r6, r3
 8001848:	3820      	subs	r0, #32
 800184a:	40c6      	lsrs	r6, r0
 800184c:	2a20      	cmp	r2, #32
 800184e:	d005      	beq.n	800185c <__aeabi_dadd+0x6a0>
 8001850:	2040      	movs	r0, #64	; 0x40
 8001852:	1a82      	subs	r2, r0, r2
 8001854:	4093      	lsls	r3, r2
 8001856:	464a      	mov	r2, r9
 8001858:	431a      	orrs	r2, r3
 800185a:	4691      	mov	r9, r2
 800185c:	464d      	mov	r5, r9
 800185e:	1e6b      	subs	r3, r5, #1
 8001860:	419d      	sbcs	r5, r3
 8001862:	4335      	orrs	r5, r6
 8001864:	e621      	b.n	80014aa <__aeabi_dadd+0x2ee>
 8001866:	0002      	movs	r2, r0
 8001868:	2300      	movs	r3, #0
 800186a:	2100      	movs	r1, #0
 800186c:	e540      	b.n	80012f0 <__aeabi_dadd+0x134>
 800186e:	464a      	mov	r2, r9
 8001870:	19d5      	adds	r5, r2, r7
 8001872:	42bd      	cmp	r5, r7
 8001874:	4189      	sbcs	r1, r1
 8001876:	4463      	add	r3, ip
 8001878:	4698      	mov	r8, r3
 800187a:	4249      	negs	r1, r1
 800187c:	4488      	add	r8, r1
 800187e:	e5b3      	b.n	80013e8 <__aeabi_dadd+0x22c>
 8001880:	2100      	movs	r1, #0
 8001882:	4a01      	ldr	r2, [pc, #4]	; (8001888 <__aeabi_dadd+0x6cc>)
 8001884:	000b      	movs	r3, r1
 8001886:	e533      	b.n	80012f0 <__aeabi_dadd+0x134>
 8001888:	000007ff 	.word	0x000007ff
 800188c:	ff7fffff 	.word	0xff7fffff

08001890 <__aeabi_ddiv>:
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001892:	4657      	mov	r7, sl
 8001894:	464e      	mov	r6, r9
 8001896:	4645      	mov	r5, r8
 8001898:	46de      	mov	lr, fp
 800189a:	b5e0      	push	{r5, r6, r7, lr}
 800189c:	4681      	mov	r9, r0
 800189e:	0005      	movs	r5, r0
 80018a0:	030c      	lsls	r4, r1, #12
 80018a2:	0048      	lsls	r0, r1, #1
 80018a4:	4692      	mov	sl, r2
 80018a6:	001f      	movs	r7, r3
 80018a8:	b085      	sub	sp, #20
 80018aa:	0b24      	lsrs	r4, r4, #12
 80018ac:	0d40      	lsrs	r0, r0, #21
 80018ae:	0fce      	lsrs	r6, r1, #31
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d059      	beq.n	8001968 <__aeabi_ddiv+0xd8>
 80018b4:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <__aeabi_ddiv+0x244>)
 80018b6:	4298      	cmp	r0, r3
 80018b8:	d100      	bne.n	80018bc <__aeabi_ddiv+0x2c>
 80018ba:	e098      	b.n	80019ee <__aeabi_ddiv+0x15e>
 80018bc:	0f6b      	lsrs	r3, r5, #29
 80018be:	00e4      	lsls	r4, r4, #3
 80018c0:	431c      	orrs	r4, r3
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	4323      	orrs	r3, r4
 80018c8:	4698      	mov	r8, r3
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <__aeabi_ddiv+0x248>)
 80018cc:	00ed      	lsls	r5, r5, #3
 80018ce:	469b      	mov	fp, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	4699      	mov	r9, r3
 80018d4:	4483      	add	fp, r0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	033c      	lsls	r4, r7, #12
 80018da:	007b      	lsls	r3, r7, #1
 80018dc:	4650      	mov	r0, sl
 80018de:	0b24      	lsrs	r4, r4, #12
 80018e0:	0d5b      	lsrs	r3, r3, #21
 80018e2:	0fff      	lsrs	r7, r7, #31
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d067      	beq.n	80019b8 <__aeabi_ddiv+0x128>
 80018e8:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <__aeabi_ddiv+0x244>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d018      	beq.n	8001920 <__aeabi_ddiv+0x90>
 80018ee:	497a      	ldr	r1, [pc, #488]	; (8001ad8 <__aeabi_ddiv+0x248>)
 80018f0:	0f42      	lsrs	r2, r0, #29
 80018f2:	468c      	mov	ip, r1
 80018f4:	00e4      	lsls	r4, r4, #3
 80018f6:	4659      	mov	r1, fp
 80018f8:	4314      	orrs	r4, r2
 80018fa:	2280      	movs	r2, #128	; 0x80
 80018fc:	4463      	add	r3, ip
 80018fe:	0412      	lsls	r2, r2, #16
 8001900:	1acb      	subs	r3, r1, r3
 8001902:	4314      	orrs	r4, r2
 8001904:	469b      	mov	fp, r3
 8001906:	00c2      	lsls	r2, r0, #3
 8001908:	2000      	movs	r0, #0
 800190a:	0033      	movs	r3, r6
 800190c:	407b      	eors	r3, r7
 800190e:	469a      	mov	sl, r3
 8001910:	464b      	mov	r3, r9
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d900      	bls.n	8001918 <__aeabi_ddiv+0x88>
 8001916:	e0ef      	b.n	8001af8 <__aeabi_ddiv+0x268>
 8001918:	4970      	ldr	r1, [pc, #448]	; (8001adc <__aeabi_ddiv+0x24c>)
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	58cb      	ldr	r3, [r1, r3]
 800191e:	469f      	mov	pc, r3
 8001920:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <__aeabi_ddiv+0x250>)
 8001922:	4652      	mov	r2, sl
 8001924:	469c      	mov	ip, r3
 8001926:	4322      	orrs	r2, r4
 8001928:	44e3      	add	fp, ip
 800192a:	2a00      	cmp	r2, #0
 800192c:	d000      	beq.n	8001930 <__aeabi_ddiv+0xa0>
 800192e:	e095      	b.n	8001a5c <__aeabi_ddiv+0x1cc>
 8001930:	4649      	mov	r1, r9
 8001932:	2302      	movs	r3, #2
 8001934:	4319      	orrs	r1, r3
 8001936:	4689      	mov	r9, r1
 8001938:	2400      	movs	r4, #0
 800193a:	2002      	movs	r0, #2
 800193c:	e7e5      	b.n	800190a <__aeabi_ddiv+0x7a>
 800193e:	2300      	movs	r3, #0
 8001940:	2400      	movs	r4, #0
 8001942:	2500      	movs	r5, #0
 8001944:	4652      	mov	r2, sl
 8001946:	051b      	lsls	r3, r3, #20
 8001948:	4323      	orrs	r3, r4
 800194a:	07d2      	lsls	r2, r2, #31
 800194c:	4313      	orrs	r3, r2
 800194e:	0028      	movs	r0, r5
 8001950:	0019      	movs	r1, r3
 8001952:	b005      	add	sp, #20
 8001954:	bcf0      	pop	{r4, r5, r6, r7}
 8001956:	46bb      	mov	fp, r7
 8001958:	46b2      	mov	sl, r6
 800195a:	46a9      	mov	r9, r5
 800195c:	46a0      	mov	r8, r4
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001960:	2400      	movs	r4, #0
 8001962:	2500      	movs	r5, #0
 8001964:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <__aeabi_ddiv+0x244>)
 8001966:	e7ed      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001968:	464b      	mov	r3, r9
 800196a:	4323      	orrs	r3, r4
 800196c:	4698      	mov	r8, r3
 800196e:	d100      	bne.n	8001972 <__aeabi_ddiv+0xe2>
 8001970:	e089      	b.n	8001a86 <__aeabi_ddiv+0x1f6>
 8001972:	2c00      	cmp	r4, #0
 8001974:	d100      	bne.n	8001978 <__aeabi_ddiv+0xe8>
 8001976:	e1e0      	b.n	8001d3a <__aeabi_ddiv+0x4aa>
 8001978:	0020      	movs	r0, r4
 800197a:	f001 fb07 	bl	8002f8c <__clzsi2>
 800197e:	0001      	movs	r1, r0
 8001980:	0002      	movs	r2, r0
 8001982:	390b      	subs	r1, #11
 8001984:	231d      	movs	r3, #29
 8001986:	1a5b      	subs	r3, r3, r1
 8001988:	4649      	mov	r1, r9
 800198a:	0010      	movs	r0, r2
 800198c:	40d9      	lsrs	r1, r3
 800198e:	3808      	subs	r0, #8
 8001990:	4084      	lsls	r4, r0
 8001992:	000b      	movs	r3, r1
 8001994:	464d      	mov	r5, r9
 8001996:	4323      	orrs	r3, r4
 8001998:	4698      	mov	r8, r3
 800199a:	4085      	lsls	r5, r0
 800199c:	4851      	ldr	r0, [pc, #324]	; (8001ae4 <__aeabi_ddiv+0x254>)
 800199e:	033c      	lsls	r4, r7, #12
 80019a0:	1a83      	subs	r3, r0, r2
 80019a2:	469b      	mov	fp, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	4699      	mov	r9, r3
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	007b      	lsls	r3, r7, #1
 80019ac:	4650      	mov	r0, sl
 80019ae:	0b24      	lsrs	r4, r4, #12
 80019b0:	0d5b      	lsrs	r3, r3, #21
 80019b2:	0fff      	lsrs	r7, r7, #31
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d197      	bne.n	80018e8 <__aeabi_ddiv+0x58>
 80019b8:	4652      	mov	r2, sl
 80019ba:	4322      	orrs	r2, r4
 80019bc:	d055      	beq.n	8001a6a <__aeabi_ddiv+0x1da>
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x134>
 80019c2:	e1ca      	b.n	8001d5a <__aeabi_ddiv+0x4ca>
 80019c4:	0020      	movs	r0, r4
 80019c6:	f001 fae1 	bl	8002f8c <__clzsi2>
 80019ca:	0002      	movs	r2, r0
 80019cc:	3a0b      	subs	r2, #11
 80019ce:	231d      	movs	r3, #29
 80019d0:	0001      	movs	r1, r0
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	4652      	mov	r2, sl
 80019d6:	3908      	subs	r1, #8
 80019d8:	40da      	lsrs	r2, r3
 80019da:	408c      	lsls	r4, r1
 80019dc:	4314      	orrs	r4, r2
 80019de:	4652      	mov	r2, sl
 80019e0:	408a      	lsls	r2, r1
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <__aeabi_ddiv+0x258>)
 80019e4:	4458      	add	r0, fp
 80019e6:	469b      	mov	fp, r3
 80019e8:	4483      	add	fp, r0
 80019ea:	2000      	movs	r0, #0
 80019ec:	e78d      	b.n	800190a <__aeabi_ddiv+0x7a>
 80019ee:	464b      	mov	r3, r9
 80019f0:	4323      	orrs	r3, r4
 80019f2:	4698      	mov	r8, r3
 80019f4:	d140      	bne.n	8001a78 <__aeabi_ddiv+0x1e8>
 80019f6:	2308      	movs	r3, #8
 80019f8:	4699      	mov	r9, r3
 80019fa:	3b06      	subs	r3, #6
 80019fc:	2500      	movs	r5, #0
 80019fe:	4683      	mov	fp, r0
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	e769      	b.n	80018d8 <__aeabi_ddiv+0x48>
 8001a04:	46b2      	mov	sl, r6
 8001a06:	9b00      	ldr	r3, [sp, #0]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d0a9      	beq.n	8001960 <__aeabi_ddiv+0xd0>
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_ddiv+0x182>
 8001a10:	e211      	b.n	8001e36 <__aeabi_ddiv+0x5a6>
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d093      	beq.n	800193e <__aeabi_ddiv+0xae>
 8001a16:	4a35      	ldr	r2, [pc, #212]	; (8001aec <__aeabi_ddiv+0x25c>)
 8001a18:	445a      	add	r2, fp
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	dc00      	bgt.n	8001a20 <__aeabi_ddiv+0x190>
 8001a1e:	e13c      	b.n	8001c9a <__aeabi_ddiv+0x40a>
 8001a20:	076b      	lsls	r3, r5, #29
 8001a22:	d000      	beq.n	8001a26 <__aeabi_ddiv+0x196>
 8001a24:	e1a7      	b.n	8001d76 <__aeabi_ddiv+0x4e6>
 8001a26:	08ed      	lsrs	r5, r5, #3
 8001a28:	4643      	mov	r3, r8
 8001a2a:	01db      	lsls	r3, r3, #7
 8001a2c:	d506      	bpl.n	8001a3c <__aeabi_ddiv+0x1ac>
 8001a2e:	4642      	mov	r2, r8
 8001a30:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <__aeabi_ddiv+0x260>)
 8001a32:	401a      	ands	r2, r3
 8001a34:	4690      	mov	r8, r2
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	445a      	add	r2, fp
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <__aeabi_ddiv+0x264>)
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dc8e      	bgt.n	8001960 <__aeabi_ddiv+0xd0>
 8001a42:	4643      	mov	r3, r8
 8001a44:	0552      	lsls	r2, r2, #21
 8001a46:	0758      	lsls	r0, r3, #29
 8001a48:	025c      	lsls	r4, r3, #9
 8001a4a:	4305      	orrs	r5, r0
 8001a4c:	0b24      	lsrs	r4, r4, #12
 8001a4e:	0d53      	lsrs	r3, r2, #21
 8001a50:	e778      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001a52:	46ba      	mov	sl, r7
 8001a54:	46a0      	mov	r8, r4
 8001a56:	0015      	movs	r5, r2
 8001a58:	9000      	str	r0, [sp, #0]
 8001a5a:	e7d4      	b.n	8001a06 <__aeabi_ddiv+0x176>
 8001a5c:	464a      	mov	r2, r9
 8001a5e:	2303      	movs	r3, #3
 8001a60:	431a      	orrs	r2, r3
 8001a62:	4691      	mov	r9, r2
 8001a64:	2003      	movs	r0, #3
 8001a66:	4652      	mov	r2, sl
 8001a68:	e74f      	b.n	800190a <__aeabi_ddiv+0x7a>
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	4319      	orrs	r1, r3
 8001a70:	4689      	mov	r9, r1
 8001a72:	2400      	movs	r4, #0
 8001a74:	2001      	movs	r0, #1
 8001a76:	e748      	b.n	800190a <__aeabi_ddiv+0x7a>
 8001a78:	230c      	movs	r3, #12
 8001a7a:	4699      	mov	r9, r3
 8001a7c:	3b09      	subs	r3, #9
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	4683      	mov	fp, r0
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	e728      	b.n	80018d8 <__aeabi_ddiv+0x48>
 8001a86:	2304      	movs	r3, #4
 8001a88:	4699      	mov	r9, r3
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	2500      	movs	r5, #0
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	e720      	b.n	80018d8 <__aeabi_ddiv+0x48>
 8001a96:	2300      	movs	r3, #0
 8001a98:	2480      	movs	r4, #128	; 0x80
 8001a9a:	469a      	mov	sl, r3
 8001a9c:	2500      	movs	r5, #0
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <__aeabi_ddiv+0x244>)
 8001aa0:	0324      	lsls	r4, r4, #12
 8001aa2:	e74f      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	031b      	lsls	r3, r3, #12
 8001aaa:	4219      	tst	r1, r3
 8001aac:	d008      	beq.n	8001ac0 <__aeabi_ddiv+0x230>
 8001aae:	421c      	tst	r4, r3
 8001ab0:	d106      	bne.n	8001ac0 <__aeabi_ddiv+0x230>
 8001ab2:	431c      	orrs	r4, r3
 8001ab4:	0324      	lsls	r4, r4, #12
 8001ab6:	46ba      	mov	sl, r7
 8001ab8:	0015      	movs	r5, r2
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <__aeabi_ddiv+0x244>)
 8001abc:	0b24      	lsrs	r4, r4, #12
 8001abe:	e741      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001ac0:	2480      	movs	r4, #128	; 0x80
 8001ac2:	4643      	mov	r3, r8
 8001ac4:	0324      	lsls	r4, r4, #12
 8001ac6:	431c      	orrs	r4, r3
 8001ac8:	0324      	lsls	r4, r4, #12
 8001aca:	46b2      	mov	sl, r6
 8001acc:	4b01      	ldr	r3, [pc, #4]	; (8001ad4 <__aeabi_ddiv+0x244>)
 8001ace:	0b24      	lsrs	r4, r4, #12
 8001ad0:	e738      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	000007ff 	.word	0x000007ff
 8001ad8:	fffffc01 	.word	0xfffffc01
 8001adc:	08018510 	.word	0x08018510
 8001ae0:	fffff801 	.word	0xfffff801
 8001ae4:	fffffc0d 	.word	0xfffffc0d
 8001ae8:	000003f3 	.word	0x000003f3
 8001aec:	000003ff 	.word	0x000003ff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	000007fe 	.word	0x000007fe
 8001af8:	4544      	cmp	r4, r8
 8001afa:	d200      	bcs.n	8001afe <__aeabi_ddiv+0x26e>
 8001afc:	e116      	b.n	8001d2c <__aeabi_ddiv+0x49c>
 8001afe:	d100      	bne.n	8001b02 <__aeabi_ddiv+0x272>
 8001b00:	e111      	b.n	8001d26 <__aeabi_ddiv+0x496>
 8001b02:	2301      	movs	r3, #1
 8001b04:	425b      	negs	r3, r3
 8001b06:	469c      	mov	ip, r3
 8001b08:	002e      	movs	r6, r5
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	44e3      	add	fp, ip
 8001b10:	0223      	lsls	r3, r4, #8
 8001b12:	0e14      	lsrs	r4, r2, #24
 8001b14:	431c      	orrs	r4, r3
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	4699      	mov	r9, r3
 8001b1a:	0423      	lsls	r3, r4, #16
 8001b1c:	0c1f      	lsrs	r7, r3, #16
 8001b1e:	0212      	lsls	r2, r2, #8
 8001b20:	4649      	mov	r1, r9
 8001b22:	9200      	str	r2, [sp, #0]
 8001b24:	9701      	str	r7, [sp, #4]
 8001b26:	f7fe fb99 	bl	800025c <__aeabi_uidivmod>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	437a      	muls	r2, r7
 8001b2e:	040b      	lsls	r3, r1, #16
 8001b30:	0c31      	lsrs	r1, r6, #16
 8001b32:	4680      	mov	r8, r0
 8001b34:	4319      	orrs	r1, r3
 8001b36:	428a      	cmp	r2, r1
 8001b38:	d90b      	bls.n	8001b52 <__aeabi_ddiv+0x2c2>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	425b      	negs	r3, r3
 8001b3e:	469c      	mov	ip, r3
 8001b40:	1909      	adds	r1, r1, r4
 8001b42:	44e0      	add	r8, ip
 8001b44:	428c      	cmp	r4, r1
 8001b46:	d804      	bhi.n	8001b52 <__aeabi_ddiv+0x2c2>
 8001b48:	428a      	cmp	r2, r1
 8001b4a:	d902      	bls.n	8001b52 <__aeabi_ddiv+0x2c2>
 8001b4c:	1e83      	subs	r3, r0, #2
 8001b4e:	4698      	mov	r8, r3
 8001b50:	1909      	adds	r1, r1, r4
 8001b52:	1a88      	subs	r0, r1, r2
 8001b54:	4649      	mov	r1, r9
 8001b56:	f7fe fb81 	bl	800025c <__aeabi_uidivmod>
 8001b5a:	0409      	lsls	r1, r1, #16
 8001b5c:	468c      	mov	ip, r1
 8001b5e:	0431      	lsls	r1, r6, #16
 8001b60:	4666      	mov	r6, ip
 8001b62:	9a01      	ldr	r2, [sp, #4]
 8001b64:	0c09      	lsrs	r1, r1, #16
 8001b66:	4342      	muls	r2, r0
 8001b68:	0003      	movs	r3, r0
 8001b6a:	4331      	orrs	r1, r6
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d904      	bls.n	8001b7a <__aeabi_ddiv+0x2ea>
 8001b70:	1909      	adds	r1, r1, r4
 8001b72:	3b01      	subs	r3, #1
 8001b74:	428c      	cmp	r4, r1
 8001b76:	d800      	bhi.n	8001b7a <__aeabi_ddiv+0x2ea>
 8001b78:	e111      	b.n	8001d9e <__aeabi_ddiv+0x50e>
 8001b7a:	1a89      	subs	r1, r1, r2
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	9e00      	ldr	r6, [sp, #0]
 8001b80:	0412      	lsls	r2, r2, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	0c33      	lsrs	r3, r6, #16
 8001b86:	001f      	movs	r7, r3
 8001b88:	0c10      	lsrs	r0, r2, #16
 8001b8a:	4690      	mov	r8, r2
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	0413      	lsls	r3, r2, #16
 8001b90:	0432      	lsls	r2, r6, #16
 8001b92:	0c16      	lsrs	r6, r2, #16
 8001b94:	0032      	movs	r2, r6
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	435a      	muls	r2, r3
 8001b9a:	9603      	str	r6, [sp, #12]
 8001b9c:	437b      	muls	r3, r7
 8001b9e:	4346      	muls	r6, r0
 8001ba0:	4378      	muls	r0, r7
 8001ba2:	0c17      	lsrs	r7, r2, #16
 8001ba4:	46bc      	mov	ip, r7
 8001ba6:	199b      	adds	r3, r3, r6
 8001ba8:	4463      	add	r3, ip
 8001baa:	429e      	cmp	r6, r3
 8001bac:	d903      	bls.n	8001bb6 <__aeabi_ddiv+0x326>
 8001bae:	2680      	movs	r6, #128	; 0x80
 8001bb0:	0276      	lsls	r6, r6, #9
 8001bb2:	46b4      	mov	ip, r6
 8001bb4:	4460      	add	r0, ip
 8001bb6:	0c1e      	lsrs	r6, r3, #16
 8001bb8:	1830      	adds	r0, r6, r0
 8001bba:	0416      	lsls	r6, r2, #16
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	0c36      	lsrs	r6, r6, #16
 8001bc0:	199e      	adds	r6, r3, r6
 8001bc2:	4281      	cmp	r1, r0
 8001bc4:	d200      	bcs.n	8001bc8 <__aeabi_ddiv+0x338>
 8001bc6:	e09c      	b.n	8001d02 <__aeabi_ddiv+0x472>
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x33c>
 8001bca:	e097      	b.n	8001cfc <__aeabi_ddiv+0x46c>
 8001bcc:	1bae      	subs	r6, r5, r6
 8001bce:	1a09      	subs	r1, r1, r0
 8001bd0:	42b5      	cmp	r5, r6
 8001bd2:	4180      	sbcs	r0, r0
 8001bd4:	4240      	negs	r0, r0
 8001bd6:	1a08      	subs	r0, r1, r0
 8001bd8:	4284      	cmp	r4, r0
 8001bda:	d100      	bne.n	8001bde <__aeabi_ddiv+0x34e>
 8001bdc:	e111      	b.n	8001e02 <__aeabi_ddiv+0x572>
 8001bde:	4649      	mov	r1, r9
 8001be0:	f7fe fb3c 	bl	800025c <__aeabi_uidivmod>
 8001be4:	9a01      	ldr	r2, [sp, #4]
 8001be6:	040b      	lsls	r3, r1, #16
 8001be8:	4342      	muls	r2, r0
 8001bea:	0c31      	lsrs	r1, r6, #16
 8001bec:	0005      	movs	r5, r0
 8001bee:	4319      	orrs	r1, r3
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d907      	bls.n	8001c04 <__aeabi_ddiv+0x374>
 8001bf4:	1909      	adds	r1, r1, r4
 8001bf6:	3d01      	subs	r5, #1
 8001bf8:	428c      	cmp	r4, r1
 8001bfa:	d803      	bhi.n	8001c04 <__aeabi_ddiv+0x374>
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d901      	bls.n	8001c04 <__aeabi_ddiv+0x374>
 8001c00:	1e85      	subs	r5, r0, #2
 8001c02:	1909      	adds	r1, r1, r4
 8001c04:	1a88      	subs	r0, r1, r2
 8001c06:	4649      	mov	r1, r9
 8001c08:	f7fe fb28 	bl	800025c <__aeabi_uidivmod>
 8001c0c:	0409      	lsls	r1, r1, #16
 8001c0e:	468c      	mov	ip, r1
 8001c10:	0431      	lsls	r1, r6, #16
 8001c12:	4666      	mov	r6, ip
 8001c14:	9a01      	ldr	r2, [sp, #4]
 8001c16:	0c09      	lsrs	r1, r1, #16
 8001c18:	4342      	muls	r2, r0
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	4331      	orrs	r1, r6
 8001c1e:	428a      	cmp	r2, r1
 8001c20:	d907      	bls.n	8001c32 <__aeabi_ddiv+0x3a2>
 8001c22:	1909      	adds	r1, r1, r4
 8001c24:	3b01      	subs	r3, #1
 8001c26:	428c      	cmp	r4, r1
 8001c28:	d803      	bhi.n	8001c32 <__aeabi_ddiv+0x3a2>
 8001c2a:	428a      	cmp	r2, r1
 8001c2c:	d901      	bls.n	8001c32 <__aeabi_ddiv+0x3a2>
 8001c2e:	1e83      	subs	r3, r0, #2
 8001c30:	1909      	adds	r1, r1, r4
 8001c32:	9e03      	ldr	r6, [sp, #12]
 8001c34:	1a89      	subs	r1, r1, r2
 8001c36:	0032      	movs	r2, r6
 8001c38:	042d      	lsls	r5, r5, #16
 8001c3a:	431d      	orrs	r5, r3
 8001c3c:	9f02      	ldr	r7, [sp, #8]
 8001c3e:	042b      	lsls	r3, r5, #16
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	435a      	muls	r2, r3
 8001c44:	437b      	muls	r3, r7
 8001c46:	469c      	mov	ip, r3
 8001c48:	0c28      	lsrs	r0, r5, #16
 8001c4a:	4346      	muls	r6, r0
 8001c4c:	0c13      	lsrs	r3, r2, #16
 8001c4e:	44b4      	add	ip, r6
 8001c50:	4463      	add	r3, ip
 8001c52:	4378      	muls	r0, r7
 8001c54:	429e      	cmp	r6, r3
 8001c56:	d903      	bls.n	8001c60 <__aeabi_ddiv+0x3d0>
 8001c58:	2680      	movs	r6, #128	; 0x80
 8001c5a:	0276      	lsls	r6, r6, #9
 8001c5c:	46b4      	mov	ip, r6
 8001c5e:	4460      	add	r0, ip
 8001c60:	0c1e      	lsrs	r6, r3, #16
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	041b      	lsls	r3, r3, #16
 8001c66:	0c12      	lsrs	r2, r2, #16
 8001c68:	1830      	adds	r0, r6, r0
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	4281      	cmp	r1, r0
 8001c6e:	d306      	bcc.n	8001c7e <__aeabi_ddiv+0x3ee>
 8001c70:	d002      	beq.n	8001c78 <__aeabi_ddiv+0x3e8>
 8001c72:	2301      	movs	r3, #1
 8001c74:	431d      	orrs	r5, r3
 8001c76:	e6ce      	b.n	8001a16 <__aeabi_ddiv+0x186>
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d100      	bne.n	8001c7e <__aeabi_ddiv+0x3ee>
 8001c7c:	e6cb      	b.n	8001a16 <__aeabi_ddiv+0x186>
 8001c7e:	1861      	adds	r1, r4, r1
 8001c80:	1e6e      	subs	r6, r5, #1
 8001c82:	42a1      	cmp	r1, r4
 8001c84:	d200      	bcs.n	8001c88 <__aeabi_ddiv+0x3f8>
 8001c86:	e0a4      	b.n	8001dd2 <__aeabi_ddiv+0x542>
 8001c88:	4281      	cmp	r1, r0
 8001c8a:	d200      	bcs.n	8001c8e <__aeabi_ddiv+0x3fe>
 8001c8c:	e0c9      	b.n	8001e22 <__aeabi_ddiv+0x592>
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_ddiv+0x402>
 8001c90:	e0d9      	b.n	8001e46 <__aeabi_ddiv+0x5b6>
 8001c92:	0035      	movs	r5, r6
 8001c94:	e7ed      	b.n	8001c72 <__aeabi_ddiv+0x3e2>
 8001c96:	2501      	movs	r5, #1
 8001c98:	426d      	negs	r5, r5
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	1a89      	subs	r1, r1, r2
 8001c9e:	2938      	cmp	r1, #56	; 0x38
 8001ca0:	dd00      	ble.n	8001ca4 <__aeabi_ddiv+0x414>
 8001ca2:	e64c      	b.n	800193e <__aeabi_ddiv+0xae>
 8001ca4:	291f      	cmp	r1, #31
 8001ca6:	dc00      	bgt.n	8001caa <__aeabi_ddiv+0x41a>
 8001ca8:	e07f      	b.n	8001daa <__aeabi_ddiv+0x51a>
 8001caa:	231f      	movs	r3, #31
 8001cac:	425b      	negs	r3, r3
 8001cae:	1a9a      	subs	r2, r3, r2
 8001cb0:	4643      	mov	r3, r8
 8001cb2:	40d3      	lsrs	r3, r2
 8001cb4:	2920      	cmp	r1, #32
 8001cb6:	d004      	beq.n	8001cc2 <__aeabi_ddiv+0x432>
 8001cb8:	4644      	mov	r4, r8
 8001cba:	4a65      	ldr	r2, [pc, #404]	; (8001e50 <__aeabi_ddiv+0x5c0>)
 8001cbc:	445a      	add	r2, fp
 8001cbe:	4094      	lsls	r4, r2
 8001cc0:	4325      	orrs	r5, r4
 8001cc2:	1e6a      	subs	r2, r5, #1
 8001cc4:	4195      	sbcs	r5, r2
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	432b      	orrs	r3, r5
 8001cca:	0015      	movs	r5, r2
 8001ccc:	2400      	movs	r4, #0
 8001cce:	401d      	ands	r5, r3
 8001cd0:	421a      	tst	r2, r3
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0x446>
 8001cd4:	e0a1      	b.n	8001e1a <__aeabi_ddiv+0x58a>
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	2400      	movs	r4, #0
 8001cda:	401a      	ands	r2, r3
 8001cdc:	2a04      	cmp	r2, #4
 8001cde:	d100      	bne.n	8001ce2 <__aeabi_ddiv+0x452>
 8001ce0:	e098      	b.n	8001e14 <__aeabi_ddiv+0x584>
 8001ce2:	1d1a      	adds	r2, r3, #4
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	419b      	sbcs	r3, r3
 8001ce8:	425b      	negs	r3, r3
 8001cea:	18e4      	adds	r4, r4, r3
 8001cec:	0013      	movs	r3, r2
 8001cee:	0222      	lsls	r2, r4, #8
 8001cf0:	d400      	bmi.n	8001cf4 <__aeabi_ddiv+0x464>
 8001cf2:	e08f      	b.n	8001e14 <__aeabi_ddiv+0x584>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	2400      	movs	r4, #0
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	e623      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001cfc:	42b5      	cmp	r5, r6
 8001cfe:	d300      	bcc.n	8001d02 <__aeabi_ddiv+0x472>
 8001d00:	e764      	b.n	8001bcc <__aeabi_ddiv+0x33c>
 8001d02:	4643      	mov	r3, r8
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	9b00      	ldr	r3, [sp, #0]
 8001d08:	469c      	mov	ip, r3
 8001d0a:	4465      	add	r5, ip
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	429d      	cmp	r5, r3
 8001d10:	419b      	sbcs	r3, r3
 8001d12:	425b      	negs	r3, r3
 8001d14:	191b      	adds	r3, r3, r4
 8001d16:	18c9      	adds	r1, r1, r3
 8001d18:	428c      	cmp	r4, r1
 8001d1a:	d23a      	bcs.n	8001d92 <__aeabi_ddiv+0x502>
 8001d1c:	4288      	cmp	r0, r1
 8001d1e:	d863      	bhi.n	8001de8 <__aeabi_ddiv+0x558>
 8001d20:	d060      	beq.n	8001de4 <__aeabi_ddiv+0x554>
 8001d22:	4690      	mov	r8, r2
 8001d24:	e752      	b.n	8001bcc <__aeabi_ddiv+0x33c>
 8001d26:	42aa      	cmp	r2, r5
 8001d28:	d900      	bls.n	8001d2c <__aeabi_ddiv+0x49c>
 8001d2a:	e6ea      	b.n	8001b02 <__aeabi_ddiv+0x272>
 8001d2c:	4643      	mov	r3, r8
 8001d2e:	07de      	lsls	r6, r3, #31
 8001d30:	0858      	lsrs	r0, r3, #1
 8001d32:	086b      	lsrs	r3, r5, #1
 8001d34:	431e      	orrs	r6, r3
 8001d36:	07ed      	lsls	r5, r5, #31
 8001d38:	e6ea      	b.n	8001b10 <__aeabi_ddiv+0x280>
 8001d3a:	4648      	mov	r0, r9
 8001d3c:	f001 f926 	bl	8002f8c <__clzsi2>
 8001d40:	0001      	movs	r1, r0
 8001d42:	0002      	movs	r2, r0
 8001d44:	3115      	adds	r1, #21
 8001d46:	3220      	adds	r2, #32
 8001d48:	291c      	cmp	r1, #28
 8001d4a:	dc00      	bgt.n	8001d4e <__aeabi_ddiv+0x4be>
 8001d4c:	e61a      	b.n	8001984 <__aeabi_ddiv+0xf4>
 8001d4e:	464b      	mov	r3, r9
 8001d50:	3808      	subs	r0, #8
 8001d52:	4083      	lsls	r3, r0
 8001d54:	2500      	movs	r5, #0
 8001d56:	4698      	mov	r8, r3
 8001d58:	e620      	b.n	800199c <__aeabi_ddiv+0x10c>
 8001d5a:	f001 f917 	bl	8002f8c <__clzsi2>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	001a      	movs	r2, r3
 8001d62:	3215      	adds	r2, #21
 8001d64:	3020      	adds	r0, #32
 8001d66:	2a1c      	cmp	r2, #28
 8001d68:	dc00      	bgt.n	8001d6c <__aeabi_ddiv+0x4dc>
 8001d6a:	e630      	b.n	80019ce <__aeabi_ddiv+0x13e>
 8001d6c:	4654      	mov	r4, sl
 8001d6e:	3b08      	subs	r3, #8
 8001d70:	2200      	movs	r2, #0
 8001d72:	409c      	lsls	r4, r3
 8001d74:	e635      	b.n	80019e2 <__aeabi_ddiv+0x152>
 8001d76:	230f      	movs	r3, #15
 8001d78:	402b      	ands	r3, r5
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x4f0>
 8001d7e:	e652      	b.n	8001a26 <__aeabi_ddiv+0x196>
 8001d80:	2305      	movs	r3, #5
 8001d82:	425b      	negs	r3, r3
 8001d84:	42ab      	cmp	r3, r5
 8001d86:	419b      	sbcs	r3, r3
 8001d88:	3504      	adds	r5, #4
 8001d8a:	425b      	negs	r3, r3
 8001d8c:	08ed      	lsrs	r5, r5, #3
 8001d8e:	4498      	add	r8, r3
 8001d90:	e64a      	b.n	8001a28 <__aeabi_ddiv+0x198>
 8001d92:	428c      	cmp	r4, r1
 8001d94:	d1c5      	bne.n	8001d22 <__aeabi_ddiv+0x492>
 8001d96:	42af      	cmp	r7, r5
 8001d98:	d9c0      	bls.n	8001d1c <__aeabi_ddiv+0x48c>
 8001d9a:	4690      	mov	r8, r2
 8001d9c:	e716      	b.n	8001bcc <__aeabi_ddiv+0x33c>
 8001d9e:	428a      	cmp	r2, r1
 8001da0:	d800      	bhi.n	8001da4 <__aeabi_ddiv+0x514>
 8001da2:	e6ea      	b.n	8001b7a <__aeabi_ddiv+0x2ea>
 8001da4:	1e83      	subs	r3, r0, #2
 8001da6:	1909      	adds	r1, r1, r4
 8001da8:	e6e7      	b.n	8001b7a <__aeabi_ddiv+0x2ea>
 8001daa:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <__aeabi_ddiv+0x5c4>)
 8001dac:	0028      	movs	r0, r5
 8001dae:	445a      	add	r2, fp
 8001db0:	4643      	mov	r3, r8
 8001db2:	4095      	lsls	r5, r2
 8001db4:	4093      	lsls	r3, r2
 8001db6:	40c8      	lsrs	r0, r1
 8001db8:	1e6a      	subs	r2, r5, #1
 8001dba:	4195      	sbcs	r5, r2
 8001dbc:	4644      	mov	r4, r8
 8001dbe:	4303      	orrs	r3, r0
 8001dc0:	432b      	orrs	r3, r5
 8001dc2:	40cc      	lsrs	r4, r1
 8001dc4:	075a      	lsls	r2, r3, #29
 8001dc6:	d092      	beq.n	8001cee <__aeabi_ddiv+0x45e>
 8001dc8:	220f      	movs	r2, #15
 8001dca:	401a      	ands	r2, r3
 8001dcc:	2a04      	cmp	r2, #4
 8001dce:	d188      	bne.n	8001ce2 <__aeabi_ddiv+0x452>
 8001dd0:	e78d      	b.n	8001cee <__aeabi_ddiv+0x45e>
 8001dd2:	0035      	movs	r5, r6
 8001dd4:	4281      	cmp	r1, r0
 8001dd6:	d000      	beq.n	8001dda <__aeabi_ddiv+0x54a>
 8001dd8:	e74b      	b.n	8001c72 <__aeabi_ddiv+0x3e2>
 8001dda:	9a00      	ldr	r2, [sp, #0]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d000      	beq.n	8001de2 <__aeabi_ddiv+0x552>
 8001de0:	e747      	b.n	8001c72 <__aeabi_ddiv+0x3e2>
 8001de2:	e618      	b.n	8001a16 <__aeabi_ddiv+0x186>
 8001de4:	42ae      	cmp	r6, r5
 8001de6:	d99c      	bls.n	8001d22 <__aeabi_ddiv+0x492>
 8001de8:	2302      	movs	r3, #2
 8001dea:	425b      	negs	r3, r3
 8001dec:	469c      	mov	ip, r3
 8001dee:	9b00      	ldr	r3, [sp, #0]
 8001df0:	44e0      	add	r8, ip
 8001df2:	469c      	mov	ip, r3
 8001df4:	4465      	add	r5, ip
 8001df6:	429d      	cmp	r5, r3
 8001df8:	419b      	sbcs	r3, r3
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	191b      	adds	r3, r3, r4
 8001dfe:	18c9      	adds	r1, r1, r3
 8001e00:	e6e4      	b.n	8001bcc <__aeabi_ddiv+0x33c>
 8001e02:	4a15      	ldr	r2, [pc, #84]	; (8001e58 <__aeabi_ddiv+0x5c8>)
 8001e04:	445a      	add	r2, fp
 8001e06:	2a00      	cmp	r2, #0
 8001e08:	dc00      	bgt.n	8001e0c <__aeabi_ddiv+0x57c>
 8001e0a:	e744      	b.n	8001c96 <__aeabi_ddiv+0x406>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	2500      	movs	r5, #0
 8001e10:	4498      	add	r8, r3
 8001e12:	e609      	b.n	8001a28 <__aeabi_ddiv+0x198>
 8001e14:	0765      	lsls	r5, r4, #29
 8001e16:	0264      	lsls	r4, r4, #9
 8001e18:	0b24      	lsrs	r4, r4, #12
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	431d      	orrs	r5, r3
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e590      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001e22:	9e00      	ldr	r6, [sp, #0]
 8001e24:	3d02      	subs	r5, #2
 8001e26:	0072      	lsls	r2, r6, #1
 8001e28:	42b2      	cmp	r2, r6
 8001e2a:	41bf      	sbcs	r7, r7
 8001e2c:	427f      	negs	r7, r7
 8001e2e:	193c      	adds	r4, r7, r4
 8001e30:	1909      	adds	r1, r1, r4
 8001e32:	9200      	str	r2, [sp, #0]
 8001e34:	e7ce      	b.n	8001dd4 <__aeabi_ddiv+0x544>
 8001e36:	2480      	movs	r4, #128	; 0x80
 8001e38:	4643      	mov	r3, r8
 8001e3a:	0324      	lsls	r4, r4, #12
 8001e3c:	431c      	orrs	r4, r3
 8001e3e:	0324      	lsls	r4, r4, #12
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <__aeabi_ddiv+0x5cc>)
 8001e42:	0b24      	lsrs	r4, r4, #12
 8001e44:	e57e      	b.n	8001944 <__aeabi_ddiv+0xb4>
 8001e46:	9a00      	ldr	r2, [sp, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d3ea      	bcc.n	8001e22 <__aeabi_ddiv+0x592>
 8001e4c:	0035      	movs	r5, r6
 8001e4e:	e7c4      	b.n	8001dda <__aeabi_ddiv+0x54a>
 8001e50:	0000043e 	.word	0x0000043e
 8001e54:	0000041e 	.word	0x0000041e
 8001e58:	000003ff 	.word	0x000003ff
 8001e5c:	000007ff 	.word	0x000007ff

08001e60 <__eqdf2>:
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	464f      	mov	r7, r9
 8001e64:	4646      	mov	r6, r8
 8001e66:	46d6      	mov	lr, sl
 8001e68:	4694      	mov	ip, r2
 8001e6a:	4691      	mov	r9, r2
 8001e6c:	031a      	lsls	r2, r3, #12
 8001e6e:	0b12      	lsrs	r2, r2, #12
 8001e70:	4d18      	ldr	r5, [pc, #96]	; (8001ed4 <__eqdf2+0x74>)
 8001e72:	b5c0      	push	{r6, r7, lr}
 8001e74:	004c      	lsls	r4, r1, #1
 8001e76:	030f      	lsls	r7, r1, #12
 8001e78:	4692      	mov	sl, r2
 8001e7a:	005a      	lsls	r2, r3, #1
 8001e7c:	0006      	movs	r6, r0
 8001e7e:	4680      	mov	r8, r0
 8001e80:	0b3f      	lsrs	r7, r7, #12
 8001e82:	2001      	movs	r0, #1
 8001e84:	0d64      	lsrs	r4, r4, #21
 8001e86:	0fc9      	lsrs	r1, r1, #31
 8001e88:	0d52      	lsrs	r2, r2, #21
 8001e8a:	0fdb      	lsrs	r3, r3, #31
 8001e8c:	42ac      	cmp	r4, r5
 8001e8e:	d00a      	beq.n	8001ea6 <__eqdf2+0x46>
 8001e90:	42aa      	cmp	r2, r5
 8001e92:	d003      	beq.n	8001e9c <__eqdf2+0x3c>
 8001e94:	4294      	cmp	r4, r2
 8001e96:	d101      	bne.n	8001e9c <__eqdf2+0x3c>
 8001e98:	4557      	cmp	r7, sl
 8001e9a:	d00d      	beq.n	8001eb8 <__eqdf2+0x58>
 8001e9c:	bce0      	pop	{r5, r6, r7}
 8001e9e:	46ba      	mov	sl, r7
 8001ea0:	46b1      	mov	r9, r6
 8001ea2:	46a8      	mov	r8, r5
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea6:	003d      	movs	r5, r7
 8001ea8:	4335      	orrs	r5, r6
 8001eaa:	d1f7      	bne.n	8001e9c <__eqdf2+0x3c>
 8001eac:	42a2      	cmp	r2, r4
 8001eae:	d1f5      	bne.n	8001e9c <__eqdf2+0x3c>
 8001eb0:	4652      	mov	r2, sl
 8001eb2:	4665      	mov	r5, ip
 8001eb4:	432a      	orrs	r2, r5
 8001eb6:	d1f1      	bne.n	8001e9c <__eqdf2+0x3c>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	45c8      	cmp	r8, r9
 8001ebc:	d1ee      	bne.n	8001e9c <__eqdf2+0x3c>
 8001ebe:	4299      	cmp	r1, r3
 8001ec0:	d006      	beq.n	8001ed0 <__eqdf2+0x70>
 8001ec2:	2c00      	cmp	r4, #0
 8001ec4:	d1ea      	bne.n	8001e9c <__eqdf2+0x3c>
 8001ec6:	433e      	orrs	r6, r7
 8001ec8:	0030      	movs	r0, r6
 8001eca:	1e46      	subs	r6, r0, #1
 8001ecc:	41b0      	sbcs	r0, r6
 8001ece:	e7e5      	b.n	8001e9c <__eqdf2+0x3c>
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	e7e3      	b.n	8001e9c <__eqdf2+0x3c>
 8001ed4:	000007ff 	.word	0x000007ff

08001ed8 <__gedf2>:
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	464e      	mov	r6, r9
 8001edc:	4645      	mov	r5, r8
 8001ede:	4657      	mov	r7, sl
 8001ee0:	46de      	mov	lr, fp
 8001ee2:	0004      	movs	r4, r0
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	b5e0      	push	{r5, r6, r7, lr}
 8001ee8:	0016      	movs	r6, r2
 8001eea:	031b      	lsls	r3, r3, #12
 8001eec:	0b1b      	lsrs	r3, r3, #12
 8001eee:	4d32      	ldr	r5, [pc, #200]	; (8001fb8 <__gedf2+0xe0>)
 8001ef0:	030f      	lsls	r7, r1, #12
 8001ef2:	004a      	lsls	r2, r1, #1
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	0043      	lsls	r3, r0, #1
 8001ef8:	46a4      	mov	ip, r4
 8001efa:	46b0      	mov	r8, r6
 8001efc:	0b3f      	lsrs	r7, r7, #12
 8001efe:	0d52      	lsrs	r2, r2, #21
 8001f00:	0fc9      	lsrs	r1, r1, #31
 8001f02:	0d5b      	lsrs	r3, r3, #21
 8001f04:	0fc0      	lsrs	r0, r0, #31
 8001f06:	42aa      	cmp	r2, r5
 8001f08:	d029      	beq.n	8001f5e <__gedf2+0x86>
 8001f0a:	42ab      	cmp	r3, r5
 8001f0c:	d018      	beq.n	8001f40 <__gedf2+0x68>
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d12a      	bne.n	8001f68 <__gedf2+0x90>
 8001f12:	433c      	orrs	r4, r7
 8001f14:	46a3      	mov	fp, r4
 8001f16:	4265      	negs	r5, r4
 8001f18:	4165      	adcs	r5, r4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <__gedf2+0x4c>
 8001f1e:	464c      	mov	r4, r9
 8001f20:	4326      	orrs	r6, r4
 8001f22:	d027      	beq.n	8001f74 <__gedf2+0x9c>
 8001f24:	2d00      	cmp	r5, #0
 8001f26:	d115      	bne.n	8001f54 <__gedf2+0x7c>
 8001f28:	4281      	cmp	r1, r0
 8001f2a:	d028      	beq.n	8001f7e <__gedf2+0xa6>
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	3901      	subs	r1, #1
 8001f30:	4008      	ands	r0, r1
 8001f32:	3801      	subs	r0, #1
 8001f34:	bcf0      	pop	{r4, r5, r6, r7}
 8001f36:	46bb      	mov	fp, r7
 8001f38:	46b2      	mov	sl, r6
 8001f3a:	46a9      	mov	r9, r5
 8001f3c:	46a0      	mov	r8, r4
 8001f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f40:	464d      	mov	r5, r9
 8001f42:	432e      	orrs	r6, r5
 8001f44:	d12f      	bne.n	8001fa6 <__gedf2+0xce>
 8001f46:	2a00      	cmp	r2, #0
 8001f48:	d1ee      	bne.n	8001f28 <__gedf2+0x50>
 8001f4a:	433c      	orrs	r4, r7
 8001f4c:	4265      	negs	r5, r4
 8001f4e:	4165      	adcs	r5, r4
 8001f50:	2d00      	cmp	r5, #0
 8001f52:	d0e9      	beq.n	8001f28 <__gedf2+0x50>
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d1ed      	bne.n	8001f34 <__gedf2+0x5c>
 8001f58:	2001      	movs	r0, #1
 8001f5a:	4240      	negs	r0, r0
 8001f5c:	e7ea      	b.n	8001f34 <__gedf2+0x5c>
 8001f5e:	003d      	movs	r5, r7
 8001f60:	4325      	orrs	r5, r4
 8001f62:	d120      	bne.n	8001fa6 <__gedf2+0xce>
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d0eb      	beq.n	8001f40 <__gedf2+0x68>
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1dd      	bne.n	8001f28 <__gedf2+0x50>
 8001f6c:	464c      	mov	r4, r9
 8001f6e:	4326      	orrs	r6, r4
 8001f70:	d1da      	bne.n	8001f28 <__gedf2+0x50>
 8001f72:	e7db      	b.n	8001f2c <__gedf2+0x54>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2000      	movs	r0, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0db      	beq.n	8001f34 <__gedf2+0x5c>
 8001f7c:	e7d6      	b.n	8001f2c <__gedf2+0x54>
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dc0a      	bgt.n	8001f98 <__gedf2+0xc0>
 8001f82:	dbe7      	blt.n	8001f54 <__gedf2+0x7c>
 8001f84:	454f      	cmp	r7, r9
 8001f86:	d8d1      	bhi.n	8001f2c <__gedf2+0x54>
 8001f88:	d010      	beq.n	8001fac <__gedf2+0xd4>
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	454f      	cmp	r7, r9
 8001f8e:	d2d1      	bcs.n	8001f34 <__gedf2+0x5c>
 8001f90:	2900      	cmp	r1, #0
 8001f92:	d0e1      	beq.n	8001f58 <__gedf2+0x80>
 8001f94:	0008      	movs	r0, r1
 8001f96:	e7cd      	b.n	8001f34 <__gedf2+0x5c>
 8001f98:	4243      	negs	r3, r0
 8001f9a:	4158      	adcs	r0, r3
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	4240      	negs	r0, r0
 8001fa0:	4018      	ands	r0, r3
 8001fa2:	3801      	subs	r0, #1
 8001fa4:	e7c6      	b.n	8001f34 <__gedf2+0x5c>
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	4240      	negs	r0, r0
 8001faa:	e7c3      	b.n	8001f34 <__gedf2+0x5c>
 8001fac:	45c4      	cmp	ip, r8
 8001fae:	d8bd      	bhi.n	8001f2c <__gedf2+0x54>
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	45c4      	cmp	ip, r8
 8001fb4:	d2be      	bcs.n	8001f34 <__gedf2+0x5c>
 8001fb6:	e7eb      	b.n	8001f90 <__gedf2+0xb8>
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__ledf2>:
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	464e      	mov	r6, r9
 8001fc0:	4645      	mov	r5, r8
 8001fc2:	4657      	mov	r7, sl
 8001fc4:	46de      	mov	lr, fp
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	0018      	movs	r0, r3
 8001fca:	b5e0      	push	{r5, r6, r7, lr}
 8001fcc:	0016      	movs	r6, r2
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	0b1b      	lsrs	r3, r3, #12
 8001fd2:	4d31      	ldr	r5, [pc, #196]	; (8002098 <__ledf2+0xdc>)
 8001fd4:	030f      	lsls	r7, r1, #12
 8001fd6:	004a      	lsls	r2, r1, #1
 8001fd8:	4699      	mov	r9, r3
 8001fda:	0043      	lsls	r3, r0, #1
 8001fdc:	46a4      	mov	ip, r4
 8001fde:	46b0      	mov	r8, r6
 8001fe0:	0b3f      	lsrs	r7, r7, #12
 8001fe2:	0d52      	lsrs	r2, r2, #21
 8001fe4:	0fc9      	lsrs	r1, r1, #31
 8001fe6:	0d5b      	lsrs	r3, r3, #21
 8001fe8:	0fc0      	lsrs	r0, r0, #31
 8001fea:	42aa      	cmp	r2, r5
 8001fec:	d011      	beq.n	8002012 <__ledf2+0x56>
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d014      	beq.n	800201c <__ledf2+0x60>
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d12f      	bne.n	8002056 <__ledf2+0x9a>
 8001ff6:	433c      	orrs	r4, r7
 8001ff8:	46a3      	mov	fp, r4
 8001ffa:	4265      	negs	r5, r4
 8001ffc:	4165      	adcs	r5, r4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d114      	bne.n	800202c <__ledf2+0x70>
 8002002:	464c      	mov	r4, r9
 8002004:	4326      	orrs	r6, r4
 8002006:	d111      	bne.n	800202c <__ledf2+0x70>
 8002008:	465b      	mov	r3, fp
 800200a:	2000      	movs	r0, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d017      	beq.n	8002040 <__ledf2+0x84>
 8002010:	e010      	b.n	8002034 <__ledf2+0x78>
 8002012:	003d      	movs	r5, r7
 8002014:	4325      	orrs	r5, r4
 8002016:	d112      	bne.n	800203e <__ledf2+0x82>
 8002018:	4293      	cmp	r3, r2
 800201a:	d11c      	bne.n	8002056 <__ledf2+0x9a>
 800201c:	464d      	mov	r5, r9
 800201e:	432e      	orrs	r6, r5
 8002020:	d10d      	bne.n	800203e <__ledf2+0x82>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d104      	bne.n	8002030 <__ledf2+0x74>
 8002026:	433c      	orrs	r4, r7
 8002028:	4265      	negs	r5, r4
 800202a:	4165      	adcs	r5, r4
 800202c:	2d00      	cmp	r5, #0
 800202e:	d10d      	bne.n	800204c <__ledf2+0x90>
 8002030:	4281      	cmp	r1, r0
 8002032:	d016      	beq.n	8002062 <__ledf2+0xa6>
 8002034:	2002      	movs	r0, #2
 8002036:	3901      	subs	r1, #1
 8002038:	4008      	ands	r0, r1
 800203a:	3801      	subs	r0, #1
 800203c:	e000      	b.n	8002040 <__ledf2+0x84>
 800203e:	2002      	movs	r0, #2
 8002040:	bcf0      	pop	{r4, r5, r6, r7}
 8002042:	46bb      	mov	fp, r7
 8002044:	46b2      	mov	sl, r6
 8002046:	46a9      	mov	r9, r5
 8002048:	46a0      	mov	r8, r4
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204c:	2800      	cmp	r0, #0
 800204e:	d1f7      	bne.n	8002040 <__ledf2+0x84>
 8002050:	2001      	movs	r0, #1
 8002052:	4240      	negs	r0, r0
 8002054:	e7f4      	b.n	8002040 <__ledf2+0x84>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ea      	bne.n	8002030 <__ledf2+0x74>
 800205a:	464c      	mov	r4, r9
 800205c:	4326      	orrs	r6, r4
 800205e:	d1e7      	bne.n	8002030 <__ledf2+0x74>
 8002060:	e7e8      	b.n	8002034 <__ledf2+0x78>
 8002062:	429a      	cmp	r2, r3
 8002064:	dd06      	ble.n	8002074 <__ledf2+0xb8>
 8002066:	4243      	negs	r3, r0
 8002068:	4158      	adcs	r0, r3
 800206a:	2302      	movs	r3, #2
 800206c:	4240      	negs	r0, r0
 800206e:	4018      	ands	r0, r3
 8002070:	3801      	subs	r0, #1
 8002072:	e7e5      	b.n	8002040 <__ledf2+0x84>
 8002074:	429a      	cmp	r2, r3
 8002076:	dbe9      	blt.n	800204c <__ledf2+0x90>
 8002078:	454f      	cmp	r7, r9
 800207a:	d8db      	bhi.n	8002034 <__ledf2+0x78>
 800207c:	d006      	beq.n	800208c <__ledf2+0xd0>
 800207e:	2000      	movs	r0, #0
 8002080:	454f      	cmp	r7, r9
 8002082:	d2dd      	bcs.n	8002040 <__ledf2+0x84>
 8002084:	2900      	cmp	r1, #0
 8002086:	d0e3      	beq.n	8002050 <__ledf2+0x94>
 8002088:	0008      	movs	r0, r1
 800208a:	e7d9      	b.n	8002040 <__ledf2+0x84>
 800208c:	45c4      	cmp	ip, r8
 800208e:	d8d1      	bhi.n	8002034 <__ledf2+0x78>
 8002090:	2000      	movs	r0, #0
 8002092:	45c4      	cmp	ip, r8
 8002094:	d2d4      	bcs.n	8002040 <__ledf2+0x84>
 8002096:	e7f5      	b.n	8002084 <__ledf2+0xc8>
 8002098:	000007ff 	.word	0x000007ff

0800209c <__aeabi_dmul>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4657      	mov	r7, sl
 80020a0:	464e      	mov	r6, r9
 80020a2:	4645      	mov	r5, r8
 80020a4:	46de      	mov	lr, fp
 80020a6:	b5e0      	push	{r5, r6, r7, lr}
 80020a8:	4698      	mov	r8, r3
 80020aa:	030c      	lsls	r4, r1, #12
 80020ac:	004b      	lsls	r3, r1, #1
 80020ae:	0006      	movs	r6, r0
 80020b0:	4692      	mov	sl, r2
 80020b2:	b087      	sub	sp, #28
 80020b4:	0b24      	lsrs	r4, r4, #12
 80020b6:	0d5b      	lsrs	r3, r3, #21
 80020b8:	0fcf      	lsrs	r7, r1, #31
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d06c      	beq.n	8002198 <__aeabi_dmul+0xfc>
 80020be:	4add      	ldr	r2, [pc, #884]	; (8002434 <__aeabi_dmul+0x398>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dmul+0x2a>
 80020c4:	e086      	b.n	80021d4 <__aeabi_dmul+0x138>
 80020c6:	0f42      	lsrs	r2, r0, #29
 80020c8:	00e4      	lsls	r4, r4, #3
 80020ca:	4314      	orrs	r4, r2
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	0412      	lsls	r2, r2, #16
 80020d0:	4314      	orrs	r4, r2
 80020d2:	4ad9      	ldr	r2, [pc, #868]	; (8002438 <__aeabi_dmul+0x39c>)
 80020d4:	00c5      	lsls	r5, r0, #3
 80020d6:	4694      	mov	ip, r2
 80020d8:	4463      	add	r3, ip
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	4699      	mov	r9, r3
 80020e0:	469b      	mov	fp, r3
 80020e2:	4643      	mov	r3, r8
 80020e4:	4642      	mov	r2, r8
 80020e6:	031e      	lsls	r6, r3, #12
 80020e8:	0fd2      	lsrs	r2, r2, #31
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4650      	mov	r0, sl
 80020ee:	4690      	mov	r8, r2
 80020f0:	0b36      	lsrs	r6, r6, #12
 80020f2:	0d5b      	lsrs	r3, r3, #21
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dmul+0x5c>
 80020f6:	e078      	b.n	80021ea <__aeabi_dmul+0x14e>
 80020f8:	4ace      	ldr	r2, [pc, #824]	; (8002434 <__aeabi_dmul+0x398>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d01d      	beq.n	800213a <__aeabi_dmul+0x9e>
 80020fe:	49ce      	ldr	r1, [pc, #824]	; (8002438 <__aeabi_dmul+0x39c>)
 8002100:	0f42      	lsrs	r2, r0, #29
 8002102:	468c      	mov	ip, r1
 8002104:	9900      	ldr	r1, [sp, #0]
 8002106:	4463      	add	r3, ip
 8002108:	00f6      	lsls	r6, r6, #3
 800210a:	468c      	mov	ip, r1
 800210c:	4316      	orrs	r6, r2
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	449c      	add	ip, r3
 8002112:	0412      	lsls	r2, r2, #16
 8002114:	4663      	mov	r3, ip
 8002116:	4316      	orrs	r6, r2
 8002118:	00c2      	lsls	r2, r0, #3
 800211a:	2000      	movs	r0, #0
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	9900      	ldr	r1, [sp, #0]
 8002120:	4643      	mov	r3, r8
 8002122:	3101      	adds	r1, #1
 8002124:	468c      	mov	ip, r1
 8002126:	4649      	mov	r1, r9
 8002128:	407b      	eors	r3, r7
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	290f      	cmp	r1, #15
 800212e:	d900      	bls.n	8002132 <__aeabi_dmul+0x96>
 8002130:	e07e      	b.n	8002230 <__aeabi_dmul+0x194>
 8002132:	4bc2      	ldr	r3, [pc, #776]	; (800243c <__aeabi_dmul+0x3a0>)
 8002134:	0089      	lsls	r1, r1, #2
 8002136:	5859      	ldr	r1, [r3, r1]
 8002138:	468f      	mov	pc, r1
 800213a:	4652      	mov	r2, sl
 800213c:	9b00      	ldr	r3, [sp, #0]
 800213e:	4332      	orrs	r2, r6
 8002140:	d000      	beq.n	8002144 <__aeabi_dmul+0xa8>
 8002142:	e156      	b.n	80023f2 <__aeabi_dmul+0x356>
 8002144:	49bb      	ldr	r1, [pc, #748]	; (8002434 <__aeabi_dmul+0x398>)
 8002146:	2600      	movs	r6, #0
 8002148:	468c      	mov	ip, r1
 800214a:	4463      	add	r3, ip
 800214c:	4649      	mov	r1, r9
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2302      	movs	r3, #2
 8002152:	4319      	orrs	r1, r3
 8002154:	4689      	mov	r9, r1
 8002156:	2002      	movs	r0, #2
 8002158:	e7e1      	b.n	800211e <__aeabi_dmul+0x82>
 800215a:	4643      	mov	r3, r8
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	0034      	movs	r4, r6
 8002160:	0015      	movs	r5, r2
 8002162:	4683      	mov	fp, r0
 8002164:	465b      	mov	r3, fp
 8002166:	2b02      	cmp	r3, #2
 8002168:	d05e      	beq.n	8002228 <__aeabi_dmul+0x18c>
 800216a:	2b03      	cmp	r3, #3
 800216c:	d100      	bne.n	8002170 <__aeabi_dmul+0xd4>
 800216e:	e1f3      	b.n	8002558 <__aeabi_dmul+0x4bc>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d000      	beq.n	8002176 <__aeabi_dmul+0xda>
 8002174:	e118      	b.n	80023a8 <__aeabi_dmul+0x30c>
 8002176:	2200      	movs	r2, #0
 8002178:	2400      	movs	r4, #0
 800217a:	2500      	movs	r5, #0
 800217c:	9b01      	ldr	r3, [sp, #4]
 800217e:	0512      	lsls	r2, r2, #20
 8002180:	4322      	orrs	r2, r4
 8002182:	07db      	lsls	r3, r3, #31
 8002184:	431a      	orrs	r2, r3
 8002186:	0028      	movs	r0, r5
 8002188:	0011      	movs	r1, r2
 800218a:	b007      	add	sp, #28
 800218c:	bcf0      	pop	{r4, r5, r6, r7}
 800218e:	46bb      	mov	fp, r7
 8002190:	46b2      	mov	sl, r6
 8002192:	46a9      	mov	r9, r5
 8002194:	46a0      	mov	r8, r4
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002198:	0025      	movs	r5, r4
 800219a:	4305      	orrs	r5, r0
 800219c:	d100      	bne.n	80021a0 <__aeabi_dmul+0x104>
 800219e:	e141      	b.n	8002424 <__aeabi_dmul+0x388>
 80021a0:	2c00      	cmp	r4, #0
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dmul+0x10a>
 80021a4:	e1ad      	b.n	8002502 <__aeabi_dmul+0x466>
 80021a6:	0020      	movs	r0, r4
 80021a8:	f000 fef0 	bl	8002f8c <__clzsi2>
 80021ac:	0001      	movs	r1, r0
 80021ae:	0002      	movs	r2, r0
 80021b0:	390b      	subs	r1, #11
 80021b2:	231d      	movs	r3, #29
 80021b4:	0010      	movs	r0, r2
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	0031      	movs	r1, r6
 80021ba:	0035      	movs	r5, r6
 80021bc:	3808      	subs	r0, #8
 80021be:	4084      	lsls	r4, r0
 80021c0:	40d9      	lsrs	r1, r3
 80021c2:	4085      	lsls	r5, r0
 80021c4:	430c      	orrs	r4, r1
 80021c6:	489e      	ldr	r0, [pc, #632]	; (8002440 <__aeabi_dmul+0x3a4>)
 80021c8:	1a83      	subs	r3, r0, r2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	4699      	mov	r9, r3
 80021d0:	469b      	mov	fp, r3
 80021d2:	e786      	b.n	80020e2 <__aeabi_dmul+0x46>
 80021d4:	0005      	movs	r5, r0
 80021d6:	4325      	orrs	r5, r4
 80021d8:	d000      	beq.n	80021dc <__aeabi_dmul+0x140>
 80021da:	e11c      	b.n	8002416 <__aeabi_dmul+0x37a>
 80021dc:	2208      	movs	r2, #8
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2302      	movs	r3, #2
 80021e2:	2400      	movs	r4, #0
 80021e4:	4691      	mov	r9, r2
 80021e6:	469b      	mov	fp, r3
 80021e8:	e77b      	b.n	80020e2 <__aeabi_dmul+0x46>
 80021ea:	4652      	mov	r2, sl
 80021ec:	4332      	orrs	r2, r6
 80021ee:	d100      	bne.n	80021f2 <__aeabi_dmul+0x156>
 80021f0:	e10a      	b.n	8002408 <__aeabi_dmul+0x36c>
 80021f2:	2e00      	cmp	r6, #0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dmul+0x15c>
 80021f6:	e176      	b.n	80024e6 <__aeabi_dmul+0x44a>
 80021f8:	0030      	movs	r0, r6
 80021fa:	f000 fec7 	bl	8002f8c <__clzsi2>
 80021fe:	0002      	movs	r2, r0
 8002200:	3a0b      	subs	r2, #11
 8002202:	231d      	movs	r3, #29
 8002204:	0001      	movs	r1, r0
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	4652      	mov	r2, sl
 800220a:	3908      	subs	r1, #8
 800220c:	40da      	lsrs	r2, r3
 800220e:	408e      	lsls	r6, r1
 8002210:	4316      	orrs	r6, r2
 8002212:	4652      	mov	r2, sl
 8002214:	408a      	lsls	r2, r1
 8002216:	9b00      	ldr	r3, [sp, #0]
 8002218:	4989      	ldr	r1, [pc, #548]	; (8002440 <__aeabi_dmul+0x3a4>)
 800221a:	1a18      	subs	r0, r3, r0
 800221c:	0003      	movs	r3, r0
 800221e:	468c      	mov	ip, r1
 8002220:	4463      	add	r3, ip
 8002222:	2000      	movs	r0, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	e77a      	b.n	800211e <__aeabi_dmul+0x82>
 8002228:	2400      	movs	r4, #0
 800222a:	2500      	movs	r5, #0
 800222c:	4a81      	ldr	r2, [pc, #516]	; (8002434 <__aeabi_dmul+0x398>)
 800222e:	e7a5      	b.n	800217c <__aeabi_dmul+0xe0>
 8002230:	0c2f      	lsrs	r7, r5, #16
 8002232:	042d      	lsls	r5, r5, #16
 8002234:	0c2d      	lsrs	r5, r5, #16
 8002236:	002b      	movs	r3, r5
 8002238:	0c11      	lsrs	r1, r2, #16
 800223a:	0412      	lsls	r2, r2, #16
 800223c:	0c12      	lsrs	r2, r2, #16
 800223e:	4353      	muls	r3, r2
 8002240:	4698      	mov	r8, r3
 8002242:	0013      	movs	r3, r2
 8002244:	0028      	movs	r0, r5
 8002246:	437b      	muls	r3, r7
 8002248:	4699      	mov	r9, r3
 800224a:	4348      	muls	r0, r1
 800224c:	4448      	add	r0, r9
 800224e:	4683      	mov	fp, r0
 8002250:	4640      	mov	r0, r8
 8002252:	000b      	movs	r3, r1
 8002254:	0c00      	lsrs	r0, r0, #16
 8002256:	4682      	mov	sl, r0
 8002258:	4658      	mov	r0, fp
 800225a:	437b      	muls	r3, r7
 800225c:	4450      	add	r0, sl
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	4581      	cmp	r9, r0
 8002262:	d906      	bls.n	8002272 <__aeabi_dmul+0x1d6>
 8002264:	469a      	mov	sl, r3
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	025b      	lsls	r3, r3, #9
 800226a:	4699      	mov	r9, r3
 800226c:	44ca      	add	sl, r9
 800226e:	4653      	mov	r3, sl
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	0c03      	lsrs	r3, r0, #16
 8002274:	469b      	mov	fp, r3
 8002276:	4643      	mov	r3, r8
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	0400      	lsls	r0, r0, #16
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	4698      	mov	r8, r3
 8002280:	0003      	movs	r3, r0
 8002282:	4443      	add	r3, r8
 8002284:	9304      	str	r3, [sp, #16]
 8002286:	0c33      	lsrs	r3, r6, #16
 8002288:	4699      	mov	r9, r3
 800228a:	002b      	movs	r3, r5
 800228c:	0436      	lsls	r6, r6, #16
 800228e:	0c36      	lsrs	r6, r6, #16
 8002290:	4373      	muls	r3, r6
 8002292:	4698      	mov	r8, r3
 8002294:	0033      	movs	r3, r6
 8002296:	437b      	muls	r3, r7
 8002298:	469a      	mov	sl, r3
 800229a:	464b      	mov	r3, r9
 800229c:	435d      	muls	r5, r3
 800229e:	435f      	muls	r7, r3
 80022a0:	4643      	mov	r3, r8
 80022a2:	4455      	add	r5, sl
 80022a4:	0c18      	lsrs	r0, r3, #16
 80022a6:	1940      	adds	r0, r0, r5
 80022a8:	4582      	cmp	sl, r0
 80022aa:	d903      	bls.n	80022b4 <__aeabi_dmul+0x218>
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	025b      	lsls	r3, r3, #9
 80022b0:	469a      	mov	sl, r3
 80022b2:	4457      	add	r7, sl
 80022b4:	0c05      	lsrs	r5, r0, #16
 80022b6:	19eb      	adds	r3, r5, r7
 80022b8:	9305      	str	r3, [sp, #20]
 80022ba:	4643      	mov	r3, r8
 80022bc:	041d      	lsls	r5, r3, #16
 80022be:	0c2d      	lsrs	r5, r5, #16
 80022c0:	0400      	lsls	r0, r0, #16
 80022c2:	1940      	adds	r0, r0, r5
 80022c4:	0c25      	lsrs	r5, r4, #16
 80022c6:	0424      	lsls	r4, r4, #16
 80022c8:	0c24      	lsrs	r4, r4, #16
 80022ca:	0027      	movs	r7, r4
 80022cc:	4357      	muls	r7, r2
 80022ce:	436a      	muls	r2, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	002a      	movs	r2, r5
 80022d4:	0c3b      	lsrs	r3, r7, #16
 80022d6:	469a      	mov	sl, r3
 80022d8:	434a      	muls	r2, r1
 80022da:	4361      	muls	r1, r4
 80022dc:	4441      	add	r1, r8
 80022de:	4451      	add	r1, sl
 80022e0:	4483      	add	fp, r0
 80022e2:	4588      	cmp	r8, r1
 80022e4:	d903      	bls.n	80022ee <__aeabi_dmul+0x252>
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	4698      	mov	r8, r3
 80022ec:	4442      	add	r2, r8
 80022ee:	043f      	lsls	r7, r7, #16
 80022f0:	0c0b      	lsrs	r3, r1, #16
 80022f2:	0c3f      	lsrs	r7, r7, #16
 80022f4:	0409      	lsls	r1, r1, #16
 80022f6:	19c9      	adds	r1, r1, r7
 80022f8:	0027      	movs	r7, r4
 80022fa:	4698      	mov	r8, r3
 80022fc:	464b      	mov	r3, r9
 80022fe:	4377      	muls	r7, r6
 8002300:	435c      	muls	r4, r3
 8002302:	436e      	muls	r6, r5
 8002304:	435d      	muls	r5, r3
 8002306:	0c3b      	lsrs	r3, r7, #16
 8002308:	4699      	mov	r9, r3
 800230a:	19a4      	adds	r4, r4, r6
 800230c:	444c      	add	r4, r9
 800230e:	4442      	add	r2, r8
 8002310:	9503      	str	r5, [sp, #12]
 8002312:	42a6      	cmp	r6, r4
 8002314:	d904      	bls.n	8002320 <__aeabi_dmul+0x284>
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	4698      	mov	r8, r3
 800231c:	4445      	add	r5, r8
 800231e:	9503      	str	r5, [sp, #12]
 8002320:	9b02      	ldr	r3, [sp, #8]
 8002322:	043f      	lsls	r7, r7, #16
 8002324:	445b      	add	r3, fp
 8002326:	001e      	movs	r6, r3
 8002328:	4283      	cmp	r3, r0
 800232a:	4180      	sbcs	r0, r0
 800232c:	0423      	lsls	r3, r4, #16
 800232e:	4698      	mov	r8, r3
 8002330:	9b05      	ldr	r3, [sp, #20]
 8002332:	0c3f      	lsrs	r7, r7, #16
 8002334:	4447      	add	r7, r8
 8002336:	4698      	mov	r8, r3
 8002338:	1876      	adds	r6, r6, r1
 800233a:	428e      	cmp	r6, r1
 800233c:	4189      	sbcs	r1, r1
 800233e:	4447      	add	r7, r8
 8002340:	4240      	negs	r0, r0
 8002342:	183d      	adds	r5, r7, r0
 8002344:	46a8      	mov	r8, r5
 8002346:	4693      	mov	fp, r2
 8002348:	4249      	negs	r1, r1
 800234a:	468a      	mov	sl, r1
 800234c:	44c3      	add	fp, r8
 800234e:	429f      	cmp	r7, r3
 8002350:	41bf      	sbcs	r7, r7
 8002352:	4580      	cmp	r8, r0
 8002354:	4180      	sbcs	r0, r0
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	44da      	add	sl, fp
 800235a:	4698      	mov	r8, r3
 800235c:	4653      	mov	r3, sl
 800235e:	4240      	negs	r0, r0
 8002360:	427f      	negs	r7, r7
 8002362:	4307      	orrs	r7, r0
 8002364:	0c24      	lsrs	r4, r4, #16
 8002366:	4593      	cmp	fp, r2
 8002368:	4192      	sbcs	r2, r2
 800236a:	458a      	cmp	sl, r1
 800236c:	4189      	sbcs	r1, r1
 800236e:	193f      	adds	r7, r7, r4
 8002370:	0ddc      	lsrs	r4, r3, #23
 8002372:	9b04      	ldr	r3, [sp, #16]
 8002374:	0275      	lsls	r5, r6, #9
 8002376:	431d      	orrs	r5, r3
 8002378:	1e68      	subs	r0, r5, #1
 800237a:	4185      	sbcs	r5, r0
 800237c:	4653      	mov	r3, sl
 800237e:	4252      	negs	r2, r2
 8002380:	4249      	negs	r1, r1
 8002382:	430a      	orrs	r2, r1
 8002384:	18bf      	adds	r7, r7, r2
 8002386:	4447      	add	r7, r8
 8002388:	0df6      	lsrs	r6, r6, #23
 800238a:	027f      	lsls	r7, r7, #9
 800238c:	4335      	orrs	r5, r6
 800238e:	025a      	lsls	r2, r3, #9
 8002390:	433c      	orrs	r4, r7
 8002392:	4315      	orrs	r5, r2
 8002394:	01fb      	lsls	r3, r7, #7
 8002396:	d400      	bmi.n	800239a <__aeabi_dmul+0x2fe>
 8002398:	e0c1      	b.n	800251e <__aeabi_dmul+0x482>
 800239a:	2101      	movs	r1, #1
 800239c:	086a      	lsrs	r2, r5, #1
 800239e:	400d      	ands	r5, r1
 80023a0:	4315      	orrs	r5, r2
 80023a2:	07e2      	lsls	r2, r4, #31
 80023a4:	4315      	orrs	r5, r2
 80023a6:	0864      	lsrs	r4, r4, #1
 80023a8:	4926      	ldr	r1, [pc, #152]	; (8002444 <__aeabi_dmul+0x3a8>)
 80023aa:	4461      	add	r1, ip
 80023ac:	2900      	cmp	r1, #0
 80023ae:	dd56      	ble.n	800245e <__aeabi_dmul+0x3c2>
 80023b0:	076b      	lsls	r3, r5, #29
 80023b2:	d009      	beq.n	80023c8 <__aeabi_dmul+0x32c>
 80023b4:	220f      	movs	r2, #15
 80023b6:	402a      	ands	r2, r5
 80023b8:	2a04      	cmp	r2, #4
 80023ba:	d005      	beq.n	80023c8 <__aeabi_dmul+0x32c>
 80023bc:	1d2a      	adds	r2, r5, #4
 80023be:	42aa      	cmp	r2, r5
 80023c0:	41ad      	sbcs	r5, r5
 80023c2:	426d      	negs	r5, r5
 80023c4:	1964      	adds	r4, r4, r5
 80023c6:	0015      	movs	r5, r2
 80023c8:	01e3      	lsls	r3, r4, #7
 80023ca:	d504      	bpl.n	80023d6 <__aeabi_dmul+0x33a>
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	4a1e      	ldr	r2, [pc, #120]	; (8002448 <__aeabi_dmul+0x3ac>)
 80023d0:	00c9      	lsls	r1, r1, #3
 80023d2:	4014      	ands	r4, r2
 80023d4:	4461      	add	r1, ip
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <__aeabi_dmul+0x3b0>)
 80023d8:	4291      	cmp	r1, r2
 80023da:	dd00      	ble.n	80023de <__aeabi_dmul+0x342>
 80023dc:	e724      	b.n	8002228 <__aeabi_dmul+0x18c>
 80023de:	0762      	lsls	r2, r4, #29
 80023e0:	08ed      	lsrs	r5, r5, #3
 80023e2:	0264      	lsls	r4, r4, #9
 80023e4:	0549      	lsls	r1, r1, #21
 80023e6:	4315      	orrs	r5, r2
 80023e8:	0b24      	lsrs	r4, r4, #12
 80023ea:	0d4a      	lsrs	r2, r1, #21
 80023ec:	e6c6      	b.n	800217c <__aeabi_dmul+0xe0>
 80023ee:	9701      	str	r7, [sp, #4]
 80023f0:	e6b8      	b.n	8002164 <__aeabi_dmul+0xc8>
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <__aeabi_dmul+0x398>)
 80023f4:	2003      	movs	r0, #3
 80023f6:	4694      	mov	ip, r2
 80023f8:	4463      	add	r3, ip
 80023fa:	464a      	mov	r2, r9
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2303      	movs	r3, #3
 8002400:	431a      	orrs	r2, r3
 8002402:	4691      	mov	r9, r2
 8002404:	4652      	mov	r2, sl
 8002406:	e68a      	b.n	800211e <__aeabi_dmul+0x82>
 8002408:	4649      	mov	r1, r9
 800240a:	2301      	movs	r3, #1
 800240c:	4319      	orrs	r1, r3
 800240e:	4689      	mov	r9, r1
 8002410:	2600      	movs	r6, #0
 8002412:	2001      	movs	r0, #1
 8002414:	e683      	b.n	800211e <__aeabi_dmul+0x82>
 8002416:	220c      	movs	r2, #12
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2303      	movs	r3, #3
 800241c:	0005      	movs	r5, r0
 800241e:	4691      	mov	r9, r2
 8002420:	469b      	mov	fp, r3
 8002422:	e65e      	b.n	80020e2 <__aeabi_dmul+0x46>
 8002424:	2304      	movs	r3, #4
 8002426:	4699      	mov	r9, r3
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	2400      	movs	r4, #0
 8002430:	469b      	mov	fp, r3
 8002432:	e656      	b.n	80020e2 <__aeabi_dmul+0x46>
 8002434:	000007ff 	.word	0x000007ff
 8002438:	fffffc01 	.word	0xfffffc01
 800243c:	08018550 	.word	0x08018550
 8002440:	fffffc0d 	.word	0xfffffc0d
 8002444:	000003ff 	.word	0x000003ff
 8002448:	feffffff 	.word	0xfeffffff
 800244c:	000007fe 	.word	0x000007fe
 8002450:	2300      	movs	r3, #0
 8002452:	2480      	movs	r4, #128	; 0x80
 8002454:	2500      	movs	r5, #0
 8002456:	4a44      	ldr	r2, [pc, #272]	; (8002568 <__aeabi_dmul+0x4cc>)
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	0324      	lsls	r4, r4, #12
 800245c:	e68e      	b.n	800217c <__aeabi_dmul+0xe0>
 800245e:	2001      	movs	r0, #1
 8002460:	1a40      	subs	r0, r0, r1
 8002462:	2838      	cmp	r0, #56	; 0x38
 8002464:	dd00      	ble.n	8002468 <__aeabi_dmul+0x3cc>
 8002466:	e686      	b.n	8002176 <__aeabi_dmul+0xda>
 8002468:	281f      	cmp	r0, #31
 800246a:	dd5b      	ble.n	8002524 <__aeabi_dmul+0x488>
 800246c:	221f      	movs	r2, #31
 800246e:	0023      	movs	r3, r4
 8002470:	4252      	negs	r2, r2
 8002472:	1a51      	subs	r1, r2, r1
 8002474:	40cb      	lsrs	r3, r1
 8002476:	0019      	movs	r1, r3
 8002478:	2820      	cmp	r0, #32
 800247a:	d003      	beq.n	8002484 <__aeabi_dmul+0x3e8>
 800247c:	4a3b      	ldr	r2, [pc, #236]	; (800256c <__aeabi_dmul+0x4d0>)
 800247e:	4462      	add	r2, ip
 8002480:	4094      	lsls	r4, r2
 8002482:	4325      	orrs	r5, r4
 8002484:	1e6a      	subs	r2, r5, #1
 8002486:	4195      	sbcs	r5, r2
 8002488:	002a      	movs	r2, r5
 800248a:	430a      	orrs	r2, r1
 800248c:	2107      	movs	r1, #7
 800248e:	000d      	movs	r5, r1
 8002490:	2400      	movs	r4, #0
 8002492:	4015      	ands	r5, r2
 8002494:	4211      	tst	r1, r2
 8002496:	d05b      	beq.n	8002550 <__aeabi_dmul+0x4b4>
 8002498:	210f      	movs	r1, #15
 800249a:	2400      	movs	r4, #0
 800249c:	4011      	ands	r1, r2
 800249e:	2904      	cmp	r1, #4
 80024a0:	d053      	beq.n	800254a <__aeabi_dmul+0x4ae>
 80024a2:	1d11      	adds	r1, r2, #4
 80024a4:	4291      	cmp	r1, r2
 80024a6:	4192      	sbcs	r2, r2
 80024a8:	4252      	negs	r2, r2
 80024aa:	18a4      	adds	r4, r4, r2
 80024ac:	000a      	movs	r2, r1
 80024ae:	0223      	lsls	r3, r4, #8
 80024b0:	d54b      	bpl.n	800254a <__aeabi_dmul+0x4ae>
 80024b2:	2201      	movs	r2, #1
 80024b4:	2400      	movs	r4, #0
 80024b6:	2500      	movs	r5, #0
 80024b8:	e660      	b.n	800217c <__aeabi_dmul+0xe0>
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	031b      	lsls	r3, r3, #12
 80024be:	421c      	tst	r4, r3
 80024c0:	d009      	beq.n	80024d6 <__aeabi_dmul+0x43a>
 80024c2:	421e      	tst	r6, r3
 80024c4:	d107      	bne.n	80024d6 <__aeabi_dmul+0x43a>
 80024c6:	4333      	orrs	r3, r6
 80024c8:	031c      	lsls	r4, r3, #12
 80024ca:	4643      	mov	r3, r8
 80024cc:	0015      	movs	r5, r2
 80024ce:	0b24      	lsrs	r4, r4, #12
 80024d0:	4a25      	ldr	r2, [pc, #148]	; (8002568 <__aeabi_dmul+0x4cc>)
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	e652      	b.n	800217c <__aeabi_dmul+0xe0>
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	0312      	lsls	r2, r2, #12
 80024da:	4314      	orrs	r4, r2
 80024dc:	0324      	lsls	r4, r4, #12
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <__aeabi_dmul+0x4cc>)
 80024e0:	0b24      	lsrs	r4, r4, #12
 80024e2:	9701      	str	r7, [sp, #4]
 80024e4:	e64a      	b.n	800217c <__aeabi_dmul+0xe0>
 80024e6:	f000 fd51 	bl	8002f8c <__clzsi2>
 80024ea:	0003      	movs	r3, r0
 80024ec:	001a      	movs	r2, r3
 80024ee:	3215      	adds	r2, #21
 80024f0:	3020      	adds	r0, #32
 80024f2:	2a1c      	cmp	r2, #28
 80024f4:	dc00      	bgt.n	80024f8 <__aeabi_dmul+0x45c>
 80024f6:	e684      	b.n	8002202 <__aeabi_dmul+0x166>
 80024f8:	4656      	mov	r6, sl
 80024fa:	3b08      	subs	r3, #8
 80024fc:	2200      	movs	r2, #0
 80024fe:	409e      	lsls	r6, r3
 8002500:	e689      	b.n	8002216 <__aeabi_dmul+0x17a>
 8002502:	f000 fd43 	bl	8002f8c <__clzsi2>
 8002506:	0001      	movs	r1, r0
 8002508:	0002      	movs	r2, r0
 800250a:	3115      	adds	r1, #21
 800250c:	3220      	adds	r2, #32
 800250e:	291c      	cmp	r1, #28
 8002510:	dc00      	bgt.n	8002514 <__aeabi_dmul+0x478>
 8002512:	e64e      	b.n	80021b2 <__aeabi_dmul+0x116>
 8002514:	0034      	movs	r4, r6
 8002516:	3808      	subs	r0, #8
 8002518:	2500      	movs	r5, #0
 800251a:	4084      	lsls	r4, r0
 800251c:	e653      	b.n	80021c6 <__aeabi_dmul+0x12a>
 800251e:	9b00      	ldr	r3, [sp, #0]
 8002520:	469c      	mov	ip, r3
 8002522:	e741      	b.n	80023a8 <__aeabi_dmul+0x30c>
 8002524:	4912      	ldr	r1, [pc, #72]	; (8002570 <__aeabi_dmul+0x4d4>)
 8002526:	0022      	movs	r2, r4
 8002528:	4461      	add	r1, ip
 800252a:	002e      	movs	r6, r5
 800252c:	408d      	lsls	r5, r1
 800252e:	408a      	lsls	r2, r1
 8002530:	40c6      	lsrs	r6, r0
 8002532:	1e69      	subs	r1, r5, #1
 8002534:	418d      	sbcs	r5, r1
 8002536:	4332      	orrs	r2, r6
 8002538:	432a      	orrs	r2, r5
 800253a:	40c4      	lsrs	r4, r0
 800253c:	0753      	lsls	r3, r2, #29
 800253e:	d0b6      	beq.n	80024ae <__aeabi_dmul+0x412>
 8002540:	210f      	movs	r1, #15
 8002542:	4011      	ands	r1, r2
 8002544:	2904      	cmp	r1, #4
 8002546:	d1ac      	bne.n	80024a2 <__aeabi_dmul+0x406>
 8002548:	e7b1      	b.n	80024ae <__aeabi_dmul+0x412>
 800254a:	0765      	lsls	r5, r4, #29
 800254c:	0264      	lsls	r4, r4, #9
 800254e:	0b24      	lsrs	r4, r4, #12
 8002550:	08d2      	lsrs	r2, r2, #3
 8002552:	4315      	orrs	r5, r2
 8002554:	2200      	movs	r2, #0
 8002556:	e611      	b.n	800217c <__aeabi_dmul+0xe0>
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0312      	lsls	r2, r2, #12
 800255c:	4314      	orrs	r4, r2
 800255e:	0324      	lsls	r4, r4, #12
 8002560:	4a01      	ldr	r2, [pc, #4]	; (8002568 <__aeabi_dmul+0x4cc>)
 8002562:	0b24      	lsrs	r4, r4, #12
 8002564:	e60a      	b.n	800217c <__aeabi_dmul+0xe0>
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	000007ff 	.word	0x000007ff
 800256c:	0000043e 	.word	0x0000043e
 8002570:	0000041e 	.word	0x0000041e

08002574 <__aeabi_dsub>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	4657      	mov	r7, sl
 8002578:	464e      	mov	r6, r9
 800257a:	4645      	mov	r5, r8
 800257c:	46de      	mov	lr, fp
 800257e:	0004      	movs	r4, r0
 8002580:	b5e0      	push	{r5, r6, r7, lr}
 8002582:	001f      	movs	r7, r3
 8002584:	0010      	movs	r0, r2
 8002586:	030b      	lsls	r3, r1, #12
 8002588:	0f62      	lsrs	r2, r4, #29
 800258a:	004e      	lsls	r6, r1, #1
 800258c:	0fcd      	lsrs	r5, r1, #31
 800258e:	0a5b      	lsrs	r3, r3, #9
 8002590:	0339      	lsls	r1, r7, #12
 8002592:	4313      	orrs	r3, r2
 8002594:	0a49      	lsrs	r1, r1, #9
 8002596:	00e2      	lsls	r2, r4, #3
 8002598:	0f44      	lsrs	r4, r0, #29
 800259a:	4321      	orrs	r1, r4
 800259c:	4cc2      	ldr	r4, [pc, #776]	; (80028a8 <__aeabi_dsub+0x334>)
 800259e:	4691      	mov	r9, r2
 80025a0:	4692      	mov	sl, r2
 80025a2:	00c0      	lsls	r0, r0, #3
 80025a4:	007a      	lsls	r2, r7, #1
 80025a6:	4680      	mov	r8, r0
 80025a8:	0d76      	lsrs	r6, r6, #21
 80025aa:	0d52      	lsrs	r2, r2, #21
 80025ac:	0fff      	lsrs	r7, r7, #31
 80025ae:	42a2      	cmp	r2, r4
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x40>
 80025b2:	e0b4      	b.n	800271e <__aeabi_dsub+0x1aa>
 80025b4:	2401      	movs	r4, #1
 80025b6:	4067      	eors	r7, r4
 80025b8:	46bb      	mov	fp, r7
 80025ba:	42bd      	cmp	r5, r7
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x4c>
 80025be:	e088      	b.n	80026d2 <__aeabi_dsub+0x15e>
 80025c0:	1ab4      	subs	r4, r6, r2
 80025c2:	46a4      	mov	ip, r4
 80025c4:	2c00      	cmp	r4, #0
 80025c6:	dc00      	bgt.n	80025ca <__aeabi_dsub+0x56>
 80025c8:	e0b2      	b.n	8002730 <__aeabi_dsub+0x1bc>
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	d100      	bne.n	80025d0 <__aeabi_dsub+0x5c>
 80025ce:	e0c5      	b.n	800275c <__aeabi_dsub+0x1e8>
 80025d0:	4ab5      	ldr	r2, [pc, #724]	; (80028a8 <__aeabi_dsub+0x334>)
 80025d2:	4296      	cmp	r6, r2
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dsub+0x64>
 80025d6:	e28b      	b.n	8002af0 <__aeabi_dsub+0x57c>
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	0412      	lsls	r2, r2, #16
 80025dc:	4311      	orrs	r1, r2
 80025de:	4662      	mov	r2, ip
 80025e0:	2a38      	cmp	r2, #56	; 0x38
 80025e2:	dd00      	ble.n	80025e6 <__aeabi_dsub+0x72>
 80025e4:	e1a1      	b.n	800292a <__aeabi_dsub+0x3b6>
 80025e6:	2a1f      	cmp	r2, #31
 80025e8:	dd00      	ble.n	80025ec <__aeabi_dsub+0x78>
 80025ea:	e216      	b.n	8002a1a <__aeabi_dsub+0x4a6>
 80025ec:	2720      	movs	r7, #32
 80025ee:	000c      	movs	r4, r1
 80025f0:	1abf      	subs	r7, r7, r2
 80025f2:	40bc      	lsls	r4, r7
 80025f4:	0002      	movs	r2, r0
 80025f6:	46a0      	mov	r8, r4
 80025f8:	4664      	mov	r4, ip
 80025fa:	40b8      	lsls	r0, r7
 80025fc:	40e2      	lsrs	r2, r4
 80025fe:	4644      	mov	r4, r8
 8002600:	4314      	orrs	r4, r2
 8002602:	0002      	movs	r2, r0
 8002604:	1e50      	subs	r0, r2, #1
 8002606:	4182      	sbcs	r2, r0
 8002608:	4660      	mov	r0, ip
 800260a:	40c1      	lsrs	r1, r0
 800260c:	4322      	orrs	r2, r4
 800260e:	1a5b      	subs	r3, r3, r1
 8002610:	4649      	mov	r1, r9
 8002612:	1a8c      	subs	r4, r1, r2
 8002614:	45a1      	cmp	r9, r4
 8002616:	4192      	sbcs	r2, r2
 8002618:	4252      	negs	r2, r2
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	4698      	mov	r8, r3
 800261e:	4643      	mov	r3, r8
 8002620:	021b      	lsls	r3, r3, #8
 8002622:	d400      	bmi.n	8002626 <__aeabi_dsub+0xb2>
 8002624:	e117      	b.n	8002856 <__aeabi_dsub+0x2e2>
 8002626:	4643      	mov	r3, r8
 8002628:	025b      	lsls	r3, r3, #9
 800262a:	0a5b      	lsrs	r3, r3, #9
 800262c:	4698      	mov	r8, r3
 800262e:	4643      	mov	r3, r8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d100      	bne.n	8002636 <__aeabi_dsub+0xc2>
 8002634:	e16c      	b.n	8002910 <__aeabi_dsub+0x39c>
 8002636:	4640      	mov	r0, r8
 8002638:	f000 fca8 	bl	8002f8c <__clzsi2>
 800263c:	0002      	movs	r2, r0
 800263e:	3a08      	subs	r2, #8
 8002640:	2120      	movs	r1, #32
 8002642:	0020      	movs	r0, r4
 8002644:	4643      	mov	r3, r8
 8002646:	1a89      	subs	r1, r1, r2
 8002648:	4093      	lsls	r3, r2
 800264a:	40c8      	lsrs	r0, r1
 800264c:	4094      	lsls	r4, r2
 800264e:	4303      	orrs	r3, r0
 8002650:	4296      	cmp	r6, r2
 8002652:	dd00      	ble.n	8002656 <__aeabi_dsub+0xe2>
 8002654:	e157      	b.n	8002906 <__aeabi_dsub+0x392>
 8002656:	1b96      	subs	r6, r2, r6
 8002658:	1c71      	adds	r1, r6, #1
 800265a:	291f      	cmp	r1, #31
 800265c:	dd00      	ble.n	8002660 <__aeabi_dsub+0xec>
 800265e:	e1cb      	b.n	80029f8 <__aeabi_dsub+0x484>
 8002660:	2220      	movs	r2, #32
 8002662:	0018      	movs	r0, r3
 8002664:	0026      	movs	r6, r4
 8002666:	1a52      	subs	r2, r2, r1
 8002668:	4094      	lsls	r4, r2
 800266a:	4090      	lsls	r0, r2
 800266c:	40ce      	lsrs	r6, r1
 800266e:	40cb      	lsrs	r3, r1
 8002670:	1e62      	subs	r2, r4, #1
 8002672:	4194      	sbcs	r4, r2
 8002674:	4330      	orrs	r0, r6
 8002676:	4698      	mov	r8, r3
 8002678:	2600      	movs	r6, #0
 800267a:	4304      	orrs	r4, r0
 800267c:	0763      	lsls	r3, r4, #29
 800267e:	d009      	beq.n	8002694 <__aeabi_dsub+0x120>
 8002680:	230f      	movs	r3, #15
 8002682:	4023      	ands	r3, r4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d005      	beq.n	8002694 <__aeabi_dsub+0x120>
 8002688:	1d23      	adds	r3, r4, #4
 800268a:	42a3      	cmp	r3, r4
 800268c:	41a4      	sbcs	r4, r4
 800268e:	4264      	negs	r4, r4
 8002690:	44a0      	add	r8, r4
 8002692:	001c      	movs	r4, r3
 8002694:	4643      	mov	r3, r8
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	d400      	bmi.n	800269c <__aeabi_dsub+0x128>
 800269a:	e0df      	b.n	800285c <__aeabi_dsub+0x2e8>
 800269c:	4b82      	ldr	r3, [pc, #520]	; (80028a8 <__aeabi_dsub+0x334>)
 800269e:	3601      	adds	r6, #1
 80026a0:	429e      	cmp	r6, r3
 80026a2:	d100      	bne.n	80026a6 <__aeabi_dsub+0x132>
 80026a4:	e0fb      	b.n	800289e <__aeabi_dsub+0x32a>
 80026a6:	4642      	mov	r2, r8
 80026a8:	4b80      	ldr	r3, [pc, #512]	; (80028ac <__aeabi_dsub+0x338>)
 80026aa:	08e4      	lsrs	r4, r4, #3
 80026ac:	401a      	ands	r2, r3
 80026ae:	0013      	movs	r3, r2
 80026b0:	0571      	lsls	r1, r6, #21
 80026b2:	0752      	lsls	r2, r2, #29
 80026b4:	025b      	lsls	r3, r3, #9
 80026b6:	4322      	orrs	r2, r4
 80026b8:	0b1b      	lsrs	r3, r3, #12
 80026ba:	0d49      	lsrs	r1, r1, #21
 80026bc:	0509      	lsls	r1, r1, #20
 80026be:	07ed      	lsls	r5, r5, #31
 80026c0:	4319      	orrs	r1, r3
 80026c2:	4329      	orrs	r1, r5
 80026c4:	0010      	movs	r0, r2
 80026c6:	bcf0      	pop	{r4, r5, r6, r7}
 80026c8:	46bb      	mov	fp, r7
 80026ca:	46b2      	mov	sl, r6
 80026cc:	46a9      	mov	r9, r5
 80026ce:	46a0      	mov	r8, r4
 80026d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026d2:	1ab4      	subs	r4, r6, r2
 80026d4:	46a4      	mov	ip, r4
 80026d6:	2c00      	cmp	r4, #0
 80026d8:	dd58      	ble.n	800278c <__aeabi_dsub+0x218>
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d100      	bne.n	80026e0 <__aeabi_dsub+0x16c>
 80026de:	e09e      	b.n	800281e <__aeabi_dsub+0x2aa>
 80026e0:	4a71      	ldr	r2, [pc, #452]	; (80028a8 <__aeabi_dsub+0x334>)
 80026e2:	4296      	cmp	r6, r2
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x174>
 80026e6:	e13b      	b.n	8002960 <__aeabi_dsub+0x3ec>
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0412      	lsls	r2, r2, #16
 80026ec:	4311      	orrs	r1, r2
 80026ee:	4662      	mov	r2, ip
 80026f0:	2a38      	cmp	r2, #56	; 0x38
 80026f2:	dd00      	ble.n	80026f6 <__aeabi_dsub+0x182>
 80026f4:	e0c1      	b.n	800287a <__aeabi_dsub+0x306>
 80026f6:	2a1f      	cmp	r2, #31
 80026f8:	dc00      	bgt.n	80026fc <__aeabi_dsub+0x188>
 80026fa:	e1bb      	b.n	8002a74 <__aeabi_dsub+0x500>
 80026fc:	000c      	movs	r4, r1
 80026fe:	3a20      	subs	r2, #32
 8002700:	40d4      	lsrs	r4, r2
 8002702:	0022      	movs	r2, r4
 8002704:	4664      	mov	r4, ip
 8002706:	2c20      	cmp	r4, #32
 8002708:	d004      	beq.n	8002714 <__aeabi_dsub+0x1a0>
 800270a:	2740      	movs	r7, #64	; 0x40
 800270c:	1b3f      	subs	r7, r7, r4
 800270e:	40b9      	lsls	r1, r7
 8002710:	4308      	orrs	r0, r1
 8002712:	4680      	mov	r8, r0
 8002714:	4644      	mov	r4, r8
 8002716:	1e61      	subs	r1, r4, #1
 8002718:	418c      	sbcs	r4, r1
 800271a:	4314      	orrs	r4, r2
 800271c:	e0b1      	b.n	8002882 <__aeabi_dsub+0x30e>
 800271e:	000c      	movs	r4, r1
 8002720:	4304      	orrs	r4, r0
 8002722:	d02a      	beq.n	800277a <__aeabi_dsub+0x206>
 8002724:	46bb      	mov	fp, r7
 8002726:	42bd      	cmp	r5, r7
 8002728:	d02d      	beq.n	8002786 <__aeabi_dsub+0x212>
 800272a:	4c61      	ldr	r4, [pc, #388]	; (80028b0 <__aeabi_dsub+0x33c>)
 800272c:	46a4      	mov	ip, r4
 800272e:	44b4      	add	ip, r6
 8002730:	4664      	mov	r4, ip
 8002732:	2c00      	cmp	r4, #0
 8002734:	d05c      	beq.n	80027f0 <__aeabi_dsub+0x27c>
 8002736:	1b94      	subs	r4, r2, r6
 8002738:	46a4      	mov	ip, r4
 800273a:	2e00      	cmp	r6, #0
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1cc>
 800273e:	e115      	b.n	800296c <__aeabi_dsub+0x3f8>
 8002740:	464d      	mov	r5, r9
 8002742:	431d      	orrs	r5, r3
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x1d4>
 8002746:	e1c3      	b.n	8002ad0 <__aeabi_dsub+0x55c>
 8002748:	1e65      	subs	r5, r4, #1
 800274a:	2c01      	cmp	r4, #1
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x1dc>
 800274e:	e20c      	b.n	8002b6a <__aeabi_dsub+0x5f6>
 8002750:	4e55      	ldr	r6, [pc, #340]	; (80028a8 <__aeabi_dsub+0x334>)
 8002752:	42b4      	cmp	r4, r6
 8002754:	d100      	bne.n	8002758 <__aeabi_dsub+0x1e4>
 8002756:	e1f8      	b.n	8002b4a <__aeabi_dsub+0x5d6>
 8002758:	46ac      	mov	ip, r5
 800275a:	e10e      	b.n	800297a <__aeabi_dsub+0x406>
 800275c:	000a      	movs	r2, r1
 800275e:	4302      	orrs	r2, r0
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x1f0>
 8002762:	e136      	b.n	80029d2 <__aeabi_dsub+0x45e>
 8002764:	0022      	movs	r2, r4
 8002766:	3a01      	subs	r2, #1
 8002768:	2c01      	cmp	r4, #1
 800276a:	d100      	bne.n	800276e <__aeabi_dsub+0x1fa>
 800276c:	e1c6      	b.n	8002afc <__aeabi_dsub+0x588>
 800276e:	4c4e      	ldr	r4, [pc, #312]	; (80028a8 <__aeabi_dsub+0x334>)
 8002770:	45a4      	cmp	ip, r4
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x202>
 8002774:	e0f4      	b.n	8002960 <__aeabi_dsub+0x3ec>
 8002776:	4694      	mov	ip, r2
 8002778:	e731      	b.n	80025de <__aeabi_dsub+0x6a>
 800277a:	2401      	movs	r4, #1
 800277c:	4067      	eors	r7, r4
 800277e:	46bb      	mov	fp, r7
 8002780:	42bd      	cmp	r5, r7
 8002782:	d000      	beq.n	8002786 <__aeabi_dsub+0x212>
 8002784:	e71c      	b.n	80025c0 <__aeabi_dsub+0x4c>
 8002786:	4c4a      	ldr	r4, [pc, #296]	; (80028b0 <__aeabi_dsub+0x33c>)
 8002788:	46a4      	mov	ip, r4
 800278a:	44b4      	add	ip, r6
 800278c:	4664      	mov	r4, ip
 800278e:	2c00      	cmp	r4, #0
 8002790:	d100      	bne.n	8002794 <__aeabi_dsub+0x220>
 8002792:	e0cf      	b.n	8002934 <__aeabi_dsub+0x3c0>
 8002794:	1b94      	subs	r4, r2, r6
 8002796:	46a4      	mov	ip, r4
 8002798:	2e00      	cmp	r6, #0
 800279a:	d100      	bne.n	800279e <__aeabi_dsub+0x22a>
 800279c:	e15c      	b.n	8002a58 <__aeabi_dsub+0x4e4>
 800279e:	4e42      	ldr	r6, [pc, #264]	; (80028a8 <__aeabi_dsub+0x334>)
 80027a0:	42b2      	cmp	r2, r6
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dsub+0x232>
 80027a4:	e1ec      	b.n	8002b80 <__aeabi_dsub+0x60c>
 80027a6:	2680      	movs	r6, #128	; 0x80
 80027a8:	0436      	lsls	r6, r6, #16
 80027aa:	4333      	orrs	r3, r6
 80027ac:	4664      	mov	r4, ip
 80027ae:	2c38      	cmp	r4, #56	; 0x38
 80027b0:	dd00      	ble.n	80027b4 <__aeabi_dsub+0x240>
 80027b2:	e1b3      	b.n	8002b1c <__aeabi_dsub+0x5a8>
 80027b4:	2c1f      	cmp	r4, #31
 80027b6:	dd00      	ble.n	80027ba <__aeabi_dsub+0x246>
 80027b8:	e238      	b.n	8002c2c <__aeabi_dsub+0x6b8>
 80027ba:	2620      	movs	r6, #32
 80027bc:	1b36      	subs	r6, r6, r4
 80027be:	001c      	movs	r4, r3
 80027c0:	40b4      	lsls	r4, r6
 80027c2:	464f      	mov	r7, r9
 80027c4:	46a0      	mov	r8, r4
 80027c6:	4664      	mov	r4, ip
 80027c8:	40e7      	lsrs	r7, r4
 80027ca:	4644      	mov	r4, r8
 80027cc:	433c      	orrs	r4, r7
 80027ce:	464f      	mov	r7, r9
 80027d0:	40b7      	lsls	r7, r6
 80027d2:	003e      	movs	r6, r7
 80027d4:	1e77      	subs	r7, r6, #1
 80027d6:	41be      	sbcs	r6, r7
 80027d8:	4334      	orrs	r4, r6
 80027da:	4666      	mov	r6, ip
 80027dc:	40f3      	lsrs	r3, r6
 80027de:	18c9      	adds	r1, r1, r3
 80027e0:	1824      	adds	r4, r4, r0
 80027e2:	4284      	cmp	r4, r0
 80027e4:	419b      	sbcs	r3, r3
 80027e6:	425b      	negs	r3, r3
 80027e8:	4698      	mov	r8, r3
 80027ea:	0016      	movs	r6, r2
 80027ec:	4488      	add	r8, r1
 80027ee:	e04e      	b.n	800288e <__aeabi_dsub+0x31a>
 80027f0:	4a30      	ldr	r2, [pc, #192]	; (80028b4 <__aeabi_dsub+0x340>)
 80027f2:	1c74      	adds	r4, r6, #1
 80027f4:	4214      	tst	r4, r2
 80027f6:	d000      	beq.n	80027fa <__aeabi_dsub+0x286>
 80027f8:	e0d6      	b.n	80029a8 <__aeabi_dsub+0x434>
 80027fa:	464a      	mov	r2, r9
 80027fc:	431a      	orrs	r2, r3
 80027fe:	2e00      	cmp	r6, #0
 8002800:	d000      	beq.n	8002804 <__aeabi_dsub+0x290>
 8002802:	e15b      	b.n	8002abc <__aeabi_dsub+0x548>
 8002804:	2a00      	cmp	r2, #0
 8002806:	d100      	bne.n	800280a <__aeabi_dsub+0x296>
 8002808:	e1a5      	b.n	8002b56 <__aeabi_dsub+0x5e2>
 800280a:	000a      	movs	r2, r1
 800280c:	4302      	orrs	r2, r0
 800280e:	d000      	beq.n	8002812 <__aeabi_dsub+0x29e>
 8002810:	e1bb      	b.n	8002b8a <__aeabi_dsub+0x616>
 8002812:	464a      	mov	r2, r9
 8002814:	0759      	lsls	r1, r3, #29
 8002816:	08d2      	lsrs	r2, r2, #3
 8002818:	430a      	orrs	r2, r1
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	e027      	b.n	800286e <__aeabi_dsub+0x2fa>
 800281e:	000a      	movs	r2, r1
 8002820:	4302      	orrs	r2, r0
 8002822:	d100      	bne.n	8002826 <__aeabi_dsub+0x2b2>
 8002824:	e174      	b.n	8002b10 <__aeabi_dsub+0x59c>
 8002826:	0022      	movs	r2, r4
 8002828:	3a01      	subs	r2, #1
 800282a:	2c01      	cmp	r4, #1
 800282c:	d005      	beq.n	800283a <__aeabi_dsub+0x2c6>
 800282e:	4c1e      	ldr	r4, [pc, #120]	; (80028a8 <__aeabi_dsub+0x334>)
 8002830:	45a4      	cmp	ip, r4
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x2c2>
 8002834:	e094      	b.n	8002960 <__aeabi_dsub+0x3ec>
 8002836:	4694      	mov	ip, r2
 8002838:	e759      	b.n	80026ee <__aeabi_dsub+0x17a>
 800283a:	4448      	add	r0, r9
 800283c:	4548      	cmp	r0, r9
 800283e:	4192      	sbcs	r2, r2
 8002840:	185b      	adds	r3, r3, r1
 8002842:	4698      	mov	r8, r3
 8002844:	0004      	movs	r4, r0
 8002846:	4252      	negs	r2, r2
 8002848:	4490      	add	r8, r2
 800284a:	4643      	mov	r3, r8
 800284c:	2602      	movs	r6, #2
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	d500      	bpl.n	8002854 <__aeabi_dsub+0x2e0>
 8002852:	e0c4      	b.n	80029de <__aeabi_dsub+0x46a>
 8002854:	3e01      	subs	r6, #1
 8002856:	0763      	lsls	r3, r4, #29
 8002858:	d000      	beq.n	800285c <__aeabi_dsub+0x2e8>
 800285a:	e711      	b.n	8002680 <__aeabi_dsub+0x10c>
 800285c:	4643      	mov	r3, r8
 800285e:	46b4      	mov	ip, r6
 8002860:	0759      	lsls	r1, r3, #29
 8002862:	08e2      	lsrs	r2, r4, #3
 8002864:	430a      	orrs	r2, r1
 8002866:	08db      	lsrs	r3, r3, #3
 8002868:	490f      	ldr	r1, [pc, #60]	; (80028a8 <__aeabi_dsub+0x334>)
 800286a:	458c      	cmp	ip, r1
 800286c:	d040      	beq.n	80028f0 <__aeabi_dsub+0x37c>
 800286e:	4661      	mov	r1, ip
 8002870:	031b      	lsls	r3, r3, #12
 8002872:	0549      	lsls	r1, r1, #21
 8002874:	0b1b      	lsrs	r3, r3, #12
 8002876:	0d49      	lsrs	r1, r1, #21
 8002878:	e720      	b.n	80026bc <__aeabi_dsub+0x148>
 800287a:	4301      	orrs	r1, r0
 800287c:	000c      	movs	r4, r1
 800287e:	1e61      	subs	r1, r4, #1
 8002880:	418c      	sbcs	r4, r1
 8002882:	444c      	add	r4, r9
 8002884:	454c      	cmp	r4, r9
 8002886:	4192      	sbcs	r2, r2
 8002888:	4252      	negs	r2, r2
 800288a:	4690      	mov	r8, r2
 800288c:	4498      	add	r8, r3
 800288e:	4643      	mov	r3, r8
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	d5e0      	bpl.n	8002856 <__aeabi_dsub+0x2e2>
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__aeabi_dsub+0x334>)
 8002896:	3601      	adds	r6, #1
 8002898:	429e      	cmp	r6, r3
 800289a:	d000      	beq.n	800289e <__aeabi_dsub+0x32a>
 800289c:	e09f      	b.n	80029de <__aeabi_dsub+0x46a>
 800289e:	0031      	movs	r1, r6
 80028a0:	2300      	movs	r3, #0
 80028a2:	2200      	movs	r2, #0
 80028a4:	e70a      	b.n	80026bc <__aeabi_dsub+0x148>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	000007ff 	.word	0x000007ff
 80028ac:	ff7fffff 	.word	0xff7fffff
 80028b0:	fffff801 	.word	0xfffff801
 80028b4:	000007fe 	.word	0x000007fe
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d100      	bne.n	80028be <__aeabi_dsub+0x34a>
 80028bc:	e160      	b.n	8002b80 <__aeabi_dsub+0x60c>
 80028be:	000a      	movs	r2, r1
 80028c0:	4302      	orrs	r2, r0
 80028c2:	d04d      	beq.n	8002960 <__aeabi_dsub+0x3ec>
 80028c4:	464a      	mov	r2, r9
 80028c6:	075c      	lsls	r4, r3, #29
 80028c8:	08d2      	lsrs	r2, r2, #3
 80028ca:	4322      	orrs	r2, r4
 80028cc:	2480      	movs	r4, #128	; 0x80
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	0324      	lsls	r4, r4, #12
 80028d2:	4223      	tst	r3, r4
 80028d4:	d007      	beq.n	80028e6 <__aeabi_dsub+0x372>
 80028d6:	08ce      	lsrs	r6, r1, #3
 80028d8:	4226      	tst	r6, r4
 80028da:	d104      	bne.n	80028e6 <__aeabi_dsub+0x372>
 80028dc:	465d      	mov	r5, fp
 80028de:	0033      	movs	r3, r6
 80028e0:	08c2      	lsrs	r2, r0, #3
 80028e2:	0749      	lsls	r1, r1, #29
 80028e4:	430a      	orrs	r2, r1
 80028e6:	0f51      	lsrs	r1, r2, #29
 80028e8:	00d2      	lsls	r2, r2, #3
 80028ea:	08d2      	lsrs	r2, r2, #3
 80028ec:	0749      	lsls	r1, r1, #29
 80028ee:	430a      	orrs	r2, r1
 80028f0:	0011      	movs	r1, r2
 80028f2:	4319      	orrs	r1, r3
 80028f4:	d100      	bne.n	80028f8 <__aeabi_dsub+0x384>
 80028f6:	e1c8      	b.n	8002c8a <__aeabi_dsub+0x716>
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0309      	lsls	r1, r1, #12
 80028fc:	430b      	orrs	r3, r1
 80028fe:	031b      	lsls	r3, r3, #12
 8002900:	49d5      	ldr	r1, [pc, #852]	; (8002c58 <__aeabi_dsub+0x6e4>)
 8002902:	0b1b      	lsrs	r3, r3, #12
 8002904:	e6da      	b.n	80026bc <__aeabi_dsub+0x148>
 8002906:	49d5      	ldr	r1, [pc, #852]	; (8002c5c <__aeabi_dsub+0x6e8>)
 8002908:	1ab6      	subs	r6, r6, r2
 800290a:	400b      	ands	r3, r1
 800290c:	4698      	mov	r8, r3
 800290e:	e6b5      	b.n	800267c <__aeabi_dsub+0x108>
 8002910:	0020      	movs	r0, r4
 8002912:	f000 fb3b 	bl	8002f8c <__clzsi2>
 8002916:	0002      	movs	r2, r0
 8002918:	3218      	adds	r2, #24
 800291a:	2a1f      	cmp	r2, #31
 800291c:	dc00      	bgt.n	8002920 <__aeabi_dsub+0x3ac>
 800291e:	e68f      	b.n	8002640 <__aeabi_dsub+0xcc>
 8002920:	0023      	movs	r3, r4
 8002922:	3808      	subs	r0, #8
 8002924:	4083      	lsls	r3, r0
 8002926:	2400      	movs	r4, #0
 8002928:	e692      	b.n	8002650 <__aeabi_dsub+0xdc>
 800292a:	4308      	orrs	r0, r1
 800292c:	0002      	movs	r2, r0
 800292e:	1e50      	subs	r0, r2, #1
 8002930:	4182      	sbcs	r2, r0
 8002932:	e66d      	b.n	8002610 <__aeabi_dsub+0x9c>
 8002934:	4cca      	ldr	r4, [pc, #808]	; (8002c60 <__aeabi_dsub+0x6ec>)
 8002936:	1c72      	adds	r2, r6, #1
 8002938:	4222      	tst	r2, r4
 800293a:	d000      	beq.n	800293e <__aeabi_dsub+0x3ca>
 800293c:	e0ad      	b.n	8002a9a <__aeabi_dsub+0x526>
 800293e:	464a      	mov	r2, r9
 8002940:	431a      	orrs	r2, r3
 8002942:	2e00      	cmp	r6, #0
 8002944:	d1b8      	bne.n	80028b8 <__aeabi_dsub+0x344>
 8002946:	2a00      	cmp	r2, #0
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x3d8>
 800294a:	e158      	b.n	8002bfe <__aeabi_dsub+0x68a>
 800294c:	000a      	movs	r2, r1
 800294e:	4302      	orrs	r2, r0
 8002950:	d000      	beq.n	8002954 <__aeabi_dsub+0x3e0>
 8002952:	e159      	b.n	8002c08 <__aeabi_dsub+0x694>
 8002954:	464a      	mov	r2, r9
 8002956:	0759      	lsls	r1, r3, #29
 8002958:	08d2      	lsrs	r2, r2, #3
 800295a:	430a      	orrs	r2, r1
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	e786      	b.n	800286e <__aeabi_dsub+0x2fa>
 8002960:	464a      	mov	r2, r9
 8002962:	0759      	lsls	r1, r3, #29
 8002964:	08d2      	lsrs	r2, r2, #3
 8002966:	430a      	orrs	r2, r1
 8002968:	08db      	lsrs	r3, r3, #3
 800296a:	e7c1      	b.n	80028f0 <__aeabi_dsub+0x37c>
 800296c:	4dba      	ldr	r5, [pc, #744]	; (8002c58 <__aeabi_dsub+0x6e4>)
 800296e:	42aa      	cmp	r2, r5
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x400>
 8002972:	e11e      	b.n	8002bb2 <__aeabi_dsub+0x63e>
 8002974:	2580      	movs	r5, #128	; 0x80
 8002976:	042d      	lsls	r5, r5, #16
 8002978:	432b      	orrs	r3, r5
 800297a:	4664      	mov	r4, ip
 800297c:	2c38      	cmp	r4, #56	; 0x38
 800297e:	dc5d      	bgt.n	8002a3c <__aeabi_dsub+0x4c8>
 8002980:	2c1f      	cmp	r4, #31
 8002982:	dd00      	ble.n	8002986 <__aeabi_dsub+0x412>
 8002984:	e0d0      	b.n	8002b28 <__aeabi_dsub+0x5b4>
 8002986:	2520      	movs	r5, #32
 8002988:	4667      	mov	r7, ip
 800298a:	1b2d      	subs	r5, r5, r4
 800298c:	464e      	mov	r6, r9
 800298e:	001c      	movs	r4, r3
 8002990:	40fe      	lsrs	r6, r7
 8002992:	40ac      	lsls	r4, r5
 8002994:	4334      	orrs	r4, r6
 8002996:	464e      	mov	r6, r9
 8002998:	40ae      	lsls	r6, r5
 800299a:	0035      	movs	r5, r6
 800299c:	40fb      	lsrs	r3, r7
 800299e:	1e6e      	subs	r6, r5, #1
 80029a0:	41b5      	sbcs	r5, r6
 80029a2:	1ac9      	subs	r1, r1, r3
 80029a4:	432c      	orrs	r4, r5
 80029a6:	e04e      	b.n	8002a46 <__aeabi_dsub+0x4d2>
 80029a8:	464a      	mov	r2, r9
 80029aa:	1a14      	subs	r4, r2, r0
 80029ac:	45a1      	cmp	r9, r4
 80029ae:	4192      	sbcs	r2, r2
 80029b0:	4252      	negs	r2, r2
 80029b2:	4690      	mov	r8, r2
 80029b4:	1a5f      	subs	r7, r3, r1
 80029b6:	003a      	movs	r2, r7
 80029b8:	4647      	mov	r7, r8
 80029ba:	1bd2      	subs	r2, r2, r7
 80029bc:	4690      	mov	r8, r2
 80029be:	0212      	lsls	r2, r2, #8
 80029c0:	d500      	bpl.n	80029c4 <__aeabi_dsub+0x450>
 80029c2:	e08b      	b.n	8002adc <__aeabi_dsub+0x568>
 80029c4:	4642      	mov	r2, r8
 80029c6:	4322      	orrs	r2, r4
 80029c8:	d000      	beq.n	80029cc <__aeabi_dsub+0x458>
 80029ca:	e630      	b.n	800262e <__aeabi_dsub+0xba>
 80029cc:	2300      	movs	r3, #0
 80029ce:	2500      	movs	r5, #0
 80029d0:	e74d      	b.n	800286e <__aeabi_dsub+0x2fa>
 80029d2:	464a      	mov	r2, r9
 80029d4:	0759      	lsls	r1, r3, #29
 80029d6:	08d2      	lsrs	r2, r2, #3
 80029d8:	430a      	orrs	r2, r1
 80029da:	08db      	lsrs	r3, r3, #3
 80029dc:	e744      	b.n	8002868 <__aeabi_dsub+0x2f4>
 80029de:	4642      	mov	r2, r8
 80029e0:	4b9e      	ldr	r3, [pc, #632]	; (8002c5c <__aeabi_dsub+0x6e8>)
 80029e2:	0861      	lsrs	r1, r4, #1
 80029e4:	401a      	ands	r2, r3
 80029e6:	0013      	movs	r3, r2
 80029e8:	2201      	movs	r2, #1
 80029ea:	4014      	ands	r4, r2
 80029ec:	430c      	orrs	r4, r1
 80029ee:	07da      	lsls	r2, r3, #31
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	4698      	mov	r8, r3
 80029f4:	4314      	orrs	r4, r2
 80029f6:	e641      	b.n	800267c <__aeabi_dsub+0x108>
 80029f8:	001a      	movs	r2, r3
 80029fa:	3e1f      	subs	r6, #31
 80029fc:	40f2      	lsrs	r2, r6
 80029fe:	0016      	movs	r6, r2
 8002a00:	2920      	cmp	r1, #32
 8002a02:	d003      	beq.n	8002a0c <__aeabi_dsub+0x498>
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	1a51      	subs	r1, r2, r1
 8002a08:	408b      	lsls	r3, r1
 8002a0a:	431c      	orrs	r4, r3
 8002a0c:	1e62      	subs	r2, r4, #1
 8002a0e:	4194      	sbcs	r4, r2
 8002a10:	2300      	movs	r3, #0
 8002a12:	4334      	orrs	r4, r6
 8002a14:	4698      	mov	r8, r3
 8002a16:	2600      	movs	r6, #0
 8002a18:	e71d      	b.n	8002856 <__aeabi_dsub+0x2e2>
 8002a1a:	000c      	movs	r4, r1
 8002a1c:	3a20      	subs	r2, #32
 8002a1e:	40d4      	lsrs	r4, r2
 8002a20:	0022      	movs	r2, r4
 8002a22:	4664      	mov	r4, ip
 8002a24:	2c20      	cmp	r4, #32
 8002a26:	d004      	beq.n	8002a32 <__aeabi_dsub+0x4be>
 8002a28:	2740      	movs	r7, #64	; 0x40
 8002a2a:	1b3f      	subs	r7, r7, r4
 8002a2c:	40b9      	lsls	r1, r7
 8002a2e:	4308      	orrs	r0, r1
 8002a30:	4680      	mov	r8, r0
 8002a32:	4644      	mov	r4, r8
 8002a34:	1e61      	subs	r1, r4, #1
 8002a36:	418c      	sbcs	r4, r1
 8002a38:	4322      	orrs	r2, r4
 8002a3a:	e5e9      	b.n	8002610 <__aeabi_dsub+0x9c>
 8002a3c:	464c      	mov	r4, r9
 8002a3e:	4323      	orrs	r3, r4
 8002a40:	001c      	movs	r4, r3
 8002a42:	1e63      	subs	r3, r4, #1
 8002a44:	419c      	sbcs	r4, r3
 8002a46:	1b04      	subs	r4, r0, r4
 8002a48:	42a0      	cmp	r0, r4
 8002a4a:	419b      	sbcs	r3, r3
 8002a4c:	425b      	negs	r3, r3
 8002a4e:	1acb      	subs	r3, r1, r3
 8002a50:	4698      	mov	r8, r3
 8002a52:	465d      	mov	r5, fp
 8002a54:	0016      	movs	r6, r2
 8002a56:	e5e2      	b.n	800261e <__aeabi_dsub+0xaa>
 8002a58:	464e      	mov	r6, r9
 8002a5a:	431e      	orrs	r6, r3
 8002a5c:	d100      	bne.n	8002a60 <__aeabi_dsub+0x4ec>
 8002a5e:	e0ae      	b.n	8002bbe <__aeabi_dsub+0x64a>
 8002a60:	1e66      	subs	r6, r4, #1
 8002a62:	2c01      	cmp	r4, #1
 8002a64:	d100      	bne.n	8002a68 <__aeabi_dsub+0x4f4>
 8002a66:	e0fd      	b.n	8002c64 <__aeabi_dsub+0x6f0>
 8002a68:	4f7b      	ldr	r7, [pc, #492]	; (8002c58 <__aeabi_dsub+0x6e4>)
 8002a6a:	42bc      	cmp	r4, r7
 8002a6c:	d100      	bne.n	8002a70 <__aeabi_dsub+0x4fc>
 8002a6e:	e107      	b.n	8002c80 <__aeabi_dsub+0x70c>
 8002a70:	46b4      	mov	ip, r6
 8002a72:	e69b      	b.n	80027ac <__aeabi_dsub+0x238>
 8002a74:	4664      	mov	r4, ip
 8002a76:	2220      	movs	r2, #32
 8002a78:	1b12      	subs	r2, r2, r4
 8002a7a:	000c      	movs	r4, r1
 8002a7c:	4094      	lsls	r4, r2
 8002a7e:	0007      	movs	r7, r0
 8002a80:	4090      	lsls	r0, r2
 8002a82:	46a0      	mov	r8, r4
 8002a84:	4664      	mov	r4, ip
 8002a86:	1e42      	subs	r2, r0, #1
 8002a88:	4190      	sbcs	r0, r2
 8002a8a:	4662      	mov	r2, ip
 8002a8c:	40e7      	lsrs	r7, r4
 8002a8e:	4644      	mov	r4, r8
 8002a90:	40d1      	lsrs	r1, r2
 8002a92:	433c      	orrs	r4, r7
 8002a94:	4304      	orrs	r4, r0
 8002a96:	185b      	adds	r3, r3, r1
 8002a98:	e6f3      	b.n	8002882 <__aeabi_dsub+0x30e>
 8002a9a:	4c6f      	ldr	r4, [pc, #444]	; (8002c58 <__aeabi_dsub+0x6e4>)
 8002a9c:	42a2      	cmp	r2, r4
 8002a9e:	d100      	bne.n	8002aa2 <__aeabi_dsub+0x52e>
 8002aa0:	e0d5      	b.n	8002c4e <__aeabi_dsub+0x6da>
 8002aa2:	4448      	add	r0, r9
 8002aa4:	185b      	adds	r3, r3, r1
 8002aa6:	4548      	cmp	r0, r9
 8002aa8:	4189      	sbcs	r1, r1
 8002aaa:	4249      	negs	r1, r1
 8002aac:	185b      	adds	r3, r3, r1
 8002aae:	07dc      	lsls	r4, r3, #31
 8002ab0:	0840      	lsrs	r0, r0, #1
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	4698      	mov	r8, r3
 8002ab6:	0016      	movs	r6, r2
 8002ab8:	4304      	orrs	r4, r0
 8002aba:	e6cc      	b.n	8002856 <__aeabi_dsub+0x2e2>
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d000      	beq.n	8002ac2 <__aeabi_dsub+0x54e>
 8002ac0:	e082      	b.n	8002bc8 <__aeabi_dsub+0x654>
 8002ac2:	000a      	movs	r2, r1
 8002ac4:	4302      	orrs	r2, r0
 8002ac6:	d140      	bne.n	8002b4a <__aeabi_dsub+0x5d6>
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	2500      	movs	r5, #0
 8002acc:	031b      	lsls	r3, r3, #12
 8002ace:	e713      	b.n	80028f8 <__aeabi_dsub+0x384>
 8002ad0:	074b      	lsls	r3, r1, #29
 8002ad2:	08c2      	lsrs	r2, r0, #3
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	465d      	mov	r5, fp
 8002ad8:	08cb      	lsrs	r3, r1, #3
 8002ada:	e6c5      	b.n	8002868 <__aeabi_dsub+0x2f4>
 8002adc:	464a      	mov	r2, r9
 8002ade:	1a84      	subs	r4, r0, r2
 8002ae0:	42a0      	cmp	r0, r4
 8002ae2:	4192      	sbcs	r2, r2
 8002ae4:	1acb      	subs	r3, r1, r3
 8002ae6:	4252      	negs	r2, r2
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	4698      	mov	r8, r3
 8002aec:	465d      	mov	r5, fp
 8002aee:	e59e      	b.n	800262e <__aeabi_dsub+0xba>
 8002af0:	464a      	mov	r2, r9
 8002af2:	0759      	lsls	r1, r3, #29
 8002af4:	08d2      	lsrs	r2, r2, #3
 8002af6:	430a      	orrs	r2, r1
 8002af8:	08db      	lsrs	r3, r3, #3
 8002afa:	e6f9      	b.n	80028f0 <__aeabi_dsub+0x37c>
 8002afc:	464a      	mov	r2, r9
 8002afe:	1a14      	subs	r4, r2, r0
 8002b00:	45a1      	cmp	r9, r4
 8002b02:	4192      	sbcs	r2, r2
 8002b04:	1a5b      	subs	r3, r3, r1
 8002b06:	4252      	negs	r2, r2
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	4698      	mov	r8, r3
 8002b0c:	2601      	movs	r6, #1
 8002b0e:	e586      	b.n	800261e <__aeabi_dsub+0xaa>
 8002b10:	464a      	mov	r2, r9
 8002b12:	0759      	lsls	r1, r3, #29
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	430a      	orrs	r2, r1
 8002b18:	08db      	lsrs	r3, r3, #3
 8002b1a:	e6a5      	b.n	8002868 <__aeabi_dsub+0x2f4>
 8002b1c:	464c      	mov	r4, r9
 8002b1e:	4323      	orrs	r3, r4
 8002b20:	001c      	movs	r4, r3
 8002b22:	1e63      	subs	r3, r4, #1
 8002b24:	419c      	sbcs	r4, r3
 8002b26:	e65b      	b.n	80027e0 <__aeabi_dsub+0x26c>
 8002b28:	4665      	mov	r5, ip
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	3d20      	subs	r5, #32
 8002b2e:	40ee      	lsrs	r6, r5
 8002b30:	2c20      	cmp	r4, #32
 8002b32:	d005      	beq.n	8002b40 <__aeabi_dsub+0x5cc>
 8002b34:	2540      	movs	r5, #64	; 0x40
 8002b36:	1b2d      	subs	r5, r5, r4
 8002b38:	40ab      	lsls	r3, r5
 8002b3a:	464c      	mov	r4, r9
 8002b3c:	431c      	orrs	r4, r3
 8002b3e:	46a2      	mov	sl, r4
 8002b40:	4654      	mov	r4, sl
 8002b42:	1e63      	subs	r3, r4, #1
 8002b44:	419c      	sbcs	r4, r3
 8002b46:	4334      	orrs	r4, r6
 8002b48:	e77d      	b.n	8002a46 <__aeabi_dsub+0x4d2>
 8002b4a:	074b      	lsls	r3, r1, #29
 8002b4c:	08c2      	lsrs	r2, r0, #3
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	465d      	mov	r5, fp
 8002b52:	08cb      	lsrs	r3, r1, #3
 8002b54:	e6cc      	b.n	80028f0 <__aeabi_dsub+0x37c>
 8002b56:	000a      	movs	r2, r1
 8002b58:	4302      	orrs	r2, r0
 8002b5a:	d100      	bne.n	8002b5e <__aeabi_dsub+0x5ea>
 8002b5c:	e736      	b.n	80029cc <__aeabi_dsub+0x458>
 8002b5e:	074b      	lsls	r3, r1, #29
 8002b60:	08c2      	lsrs	r2, r0, #3
 8002b62:	431a      	orrs	r2, r3
 8002b64:	465d      	mov	r5, fp
 8002b66:	08cb      	lsrs	r3, r1, #3
 8002b68:	e681      	b.n	800286e <__aeabi_dsub+0x2fa>
 8002b6a:	464a      	mov	r2, r9
 8002b6c:	1a84      	subs	r4, r0, r2
 8002b6e:	42a0      	cmp	r0, r4
 8002b70:	4192      	sbcs	r2, r2
 8002b72:	1acb      	subs	r3, r1, r3
 8002b74:	4252      	negs	r2, r2
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	4698      	mov	r8, r3
 8002b7a:	465d      	mov	r5, fp
 8002b7c:	2601      	movs	r6, #1
 8002b7e:	e54e      	b.n	800261e <__aeabi_dsub+0xaa>
 8002b80:	074b      	lsls	r3, r1, #29
 8002b82:	08c2      	lsrs	r2, r0, #3
 8002b84:	431a      	orrs	r2, r3
 8002b86:	08cb      	lsrs	r3, r1, #3
 8002b88:	e6b2      	b.n	80028f0 <__aeabi_dsub+0x37c>
 8002b8a:	464a      	mov	r2, r9
 8002b8c:	1a14      	subs	r4, r2, r0
 8002b8e:	45a1      	cmp	r9, r4
 8002b90:	4192      	sbcs	r2, r2
 8002b92:	1a5f      	subs	r7, r3, r1
 8002b94:	4252      	negs	r2, r2
 8002b96:	1aba      	subs	r2, r7, r2
 8002b98:	4690      	mov	r8, r2
 8002b9a:	0212      	lsls	r2, r2, #8
 8002b9c:	d56b      	bpl.n	8002c76 <__aeabi_dsub+0x702>
 8002b9e:	464a      	mov	r2, r9
 8002ba0:	1a84      	subs	r4, r0, r2
 8002ba2:	42a0      	cmp	r0, r4
 8002ba4:	4192      	sbcs	r2, r2
 8002ba6:	1acb      	subs	r3, r1, r3
 8002ba8:	4252      	negs	r2, r2
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	4698      	mov	r8, r3
 8002bae:	465d      	mov	r5, fp
 8002bb0:	e564      	b.n	800267c <__aeabi_dsub+0x108>
 8002bb2:	074b      	lsls	r3, r1, #29
 8002bb4:	08c2      	lsrs	r2, r0, #3
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	465d      	mov	r5, fp
 8002bba:	08cb      	lsrs	r3, r1, #3
 8002bbc:	e698      	b.n	80028f0 <__aeabi_dsub+0x37c>
 8002bbe:	074b      	lsls	r3, r1, #29
 8002bc0:	08c2      	lsrs	r2, r0, #3
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	08cb      	lsrs	r3, r1, #3
 8002bc6:	e64f      	b.n	8002868 <__aeabi_dsub+0x2f4>
 8002bc8:	000a      	movs	r2, r1
 8002bca:	4302      	orrs	r2, r0
 8002bcc:	d090      	beq.n	8002af0 <__aeabi_dsub+0x57c>
 8002bce:	464a      	mov	r2, r9
 8002bd0:	075c      	lsls	r4, r3, #29
 8002bd2:	08d2      	lsrs	r2, r2, #3
 8002bd4:	4314      	orrs	r4, r2
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	08db      	lsrs	r3, r3, #3
 8002bda:	0312      	lsls	r2, r2, #12
 8002bdc:	4213      	tst	r3, r2
 8002bde:	d008      	beq.n	8002bf2 <__aeabi_dsub+0x67e>
 8002be0:	08ce      	lsrs	r6, r1, #3
 8002be2:	4216      	tst	r6, r2
 8002be4:	d105      	bne.n	8002bf2 <__aeabi_dsub+0x67e>
 8002be6:	08c0      	lsrs	r0, r0, #3
 8002be8:	0749      	lsls	r1, r1, #29
 8002bea:	4308      	orrs	r0, r1
 8002bec:	0004      	movs	r4, r0
 8002bee:	465d      	mov	r5, fp
 8002bf0:	0033      	movs	r3, r6
 8002bf2:	0f61      	lsrs	r1, r4, #29
 8002bf4:	00e2      	lsls	r2, r4, #3
 8002bf6:	0749      	lsls	r1, r1, #29
 8002bf8:	08d2      	lsrs	r2, r2, #3
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	e678      	b.n	80028f0 <__aeabi_dsub+0x37c>
 8002bfe:	074b      	lsls	r3, r1, #29
 8002c00:	08c2      	lsrs	r2, r0, #3
 8002c02:	431a      	orrs	r2, r3
 8002c04:	08cb      	lsrs	r3, r1, #3
 8002c06:	e632      	b.n	800286e <__aeabi_dsub+0x2fa>
 8002c08:	4448      	add	r0, r9
 8002c0a:	185b      	adds	r3, r3, r1
 8002c0c:	4548      	cmp	r0, r9
 8002c0e:	4192      	sbcs	r2, r2
 8002c10:	4698      	mov	r8, r3
 8002c12:	4252      	negs	r2, r2
 8002c14:	4490      	add	r8, r2
 8002c16:	4643      	mov	r3, r8
 8002c18:	0004      	movs	r4, r0
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	d400      	bmi.n	8002c20 <__aeabi_dsub+0x6ac>
 8002c1e:	e61a      	b.n	8002856 <__aeabi_dsub+0x2e2>
 8002c20:	4642      	mov	r2, r8
 8002c22:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <__aeabi_dsub+0x6e8>)
 8002c24:	2601      	movs	r6, #1
 8002c26:	401a      	ands	r2, r3
 8002c28:	4690      	mov	r8, r2
 8002c2a:	e614      	b.n	8002856 <__aeabi_dsub+0x2e2>
 8002c2c:	4666      	mov	r6, ip
 8002c2e:	001f      	movs	r7, r3
 8002c30:	3e20      	subs	r6, #32
 8002c32:	40f7      	lsrs	r7, r6
 8002c34:	2c20      	cmp	r4, #32
 8002c36:	d005      	beq.n	8002c44 <__aeabi_dsub+0x6d0>
 8002c38:	2640      	movs	r6, #64	; 0x40
 8002c3a:	1b36      	subs	r6, r6, r4
 8002c3c:	40b3      	lsls	r3, r6
 8002c3e:	464c      	mov	r4, r9
 8002c40:	431c      	orrs	r4, r3
 8002c42:	46a2      	mov	sl, r4
 8002c44:	4654      	mov	r4, sl
 8002c46:	1e63      	subs	r3, r4, #1
 8002c48:	419c      	sbcs	r4, r3
 8002c4a:	433c      	orrs	r4, r7
 8002c4c:	e5c8      	b.n	80027e0 <__aeabi_dsub+0x26c>
 8002c4e:	0011      	movs	r1, r2
 8002c50:	2300      	movs	r3, #0
 8002c52:	2200      	movs	r2, #0
 8002c54:	e532      	b.n	80026bc <__aeabi_dsub+0x148>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	000007ff 	.word	0x000007ff
 8002c5c:	ff7fffff 	.word	0xff7fffff
 8002c60:	000007fe 	.word	0x000007fe
 8002c64:	464a      	mov	r2, r9
 8002c66:	1814      	adds	r4, r2, r0
 8002c68:	4284      	cmp	r4, r0
 8002c6a:	4192      	sbcs	r2, r2
 8002c6c:	185b      	adds	r3, r3, r1
 8002c6e:	4698      	mov	r8, r3
 8002c70:	4252      	negs	r2, r2
 8002c72:	4490      	add	r8, r2
 8002c74:	e5e9      	b.n	800284a <__aeabi_dsub+0x2d6>
 8002c76:	4642      	mov	r2, r8
 8002c78:	4322      	orrs	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x70a>
 8002c7c:	e6a6      	b.n	80029cc <__aeabi_dsub+0x458>
 8002c7e:	e5ea      	b.n	8002856 <__aeabi_dsub+0x2e2>
 8002c80:	074b      	lsls	r3, r1, #29
 8002c82:	08c2      	lsrs	r2, r0, #3
 8002c84:	431a      	orrs	r2, r3
 8002c86:	08cb      	lsrs	r3, r1, #3
 8002c88:	e632      	b.n	80028f0 <__aeabi_dsub+0x37c>
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4901      	ldr	r1, [pc, #4]	; (8002c94 <__aeabi_dsub+0x720>)
 8002c8e:	0013      	movs	r3, r2
 8002c90:	e514      	b.n	80026bc <__aeabi_dsub+0x148>
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	000007ff 	.word	0x000007ff

08002c98 <__aeabi_dcmpun>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	0005      	movs	r5, r0
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <__aeabi_dcmpun+0x38>)
 8002c9e:	030c      	lsls	r4, r1, #12
 8002ca0:	0016      	movs	r6, r2
 8002ca2:	0049      	lsls	r1, r1, #1
 8002ca4:	031a      	lsls	r2, r3, #12
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	0b24      	lsrs	r4, r4, #12
 8002caa:	0d49      	lsrs	r1, r1, #21
 8002cac:	0b12      	lsrs	r2, r2, #12
 8002cae:	0d5b      	lsrs	r3, r3, #21
 8002cb0:	4281      	cmp	r1, r0
 8002cb2:	d008      	beq.n	8002cc6 <__aeabi_dcmpun+0x2e>
 8002cb4:	4906      	ldr	r1, [pc, #24]	; (8002cd0 <__aeabi_dcmpun+0x38>)
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d103      	bne.n	8002cc4 <__aeabi_dcmpun+0x2c>
 8002cbc:	4332      	orrs	r2, r6
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	1e42      	subs	r2, r0, #1
 8002cc2:	4190      	sbcs	r0, r2
 8002cc4:	bd70      	pop	{r4, r5, r6, pc}
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	432c      	orrs	r4, r5
 8002cca:	d1fb      	bne.n	8002cc4 <__aeabi_dcmpun+0x2c>
 8002ccc:	e7f2      	b.n	8002cb4 <__aeabi_dcmpun+0x1c>
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	000007ff 	.word	0x000007ff

08002cd4 <__aeabi_d2iz>:
 8002cd4:	000a      	movs	r2, r1
 8002cd6:	b530      	push	{r4, r5, lr}
 8002cd8:	4c13      	ldr	r4, [pc, #76]	; (8002d28 <__aeabi_d2iz+0x54>)
 8002cda:	0053      	lsls	r3, r2, #1
 8002cdc:	0309      	lsls	r1, r1, #12
 8002cde:	0005      	movs	r5, r0
 8002ce0:	0b09      	lsrs	r1, r1, #12
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	0d5b      	lsrs	r3, r3, #21
 8002ce6:	0fd2      	lsrs	r2, r2, #31
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	dd04      	ble.n	8002cf6 <__aeabi_d2iz+0x22>
 8002cec:	480f      	ldr	r0, [pc, #60]	; (8002d2c <__aeabi_d2iz+0x58>)
 8002cee:	4283      	cmp	r3, r0
 8002cf0:	dd02      	ble.n	8002cf8 <__aeabi_d2iz+0x24>
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <__aeabi_d2iz+0x5c>)
 8002cf4:	18d0      	adds	r0, r2, r3
 8002cf6:	bd30      	pop	{r4, r5, pc}
 8002cf8:	2080      	movs	r0, #128	; 0x80
 8002cfa:	0340      	lsls	r0, r0, #13
 8002cfc:	4301      	orrs	r1, r0
 8002cfe:	480d      	ldr	r0, [pc, #52]	; (8002d34 <__aeabi_d2iz+0x60>)
 8002d00:	1ac0      	subs	r0, r0, r3
 8002d02:	281f      	cmp	r0, #31
 8002d04:	dd08      	ble.n	8002d18 <__aeabi_d2iz+0x44>
 8002d06:	480c      	ldr	r0, [pc, #48]	; (8002d38 <__aeabi_d2iz+0x64>)
 8002d08:	1ac3      	subs	r3, r0, r3
 8002d0a:	40d9      	lsrs	r1, r3
 8002d0c:	000b      	movs	r3, r1
 8002d0e:	4258      	negs	r0, r3
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	d1f0      	bne.n	8002cf6 <__aeabi_d2iz+0x22>
 8002d14:	0018      	movs	r0, r3
 8002d16:	e7ee      	b.n	8002cf6 <__aeabi_d2iz+0x22>
 8002d18:	4c08      	ldr	r4, [pc, #32]	; (8002d3c <__aeabi_d2iz+0x68>)
 8002d1a:	40c5      	lsrs	r5, r0
 8002d1c:	46a4      	mov	ip, r4
 8002d1e:	4463      	add	r3, ip
 8002d20:	4099      	lsls	r1, r3
 8002d22:	000b      	movs	r3, r1
 8002d24:	432b      	orrs	r3, r5
 8002d26:	e7f2      	b.n	8002d0e <__aeabi_d2iz+0x3a>
 8002d28:	000003fe 	.word	0x000003fe
 8002d2c:	0000041d 	.word	0x0000041d
 8002d30:	7fffffff 	.word	0x7fffffff
 8002d34:	00000433 	.word	0x00000433
 8002d38:	00000413 	.word	0x00000413
 8002d3c:	fffffbed 	.word	0xfffffbed

08002d40 <__aeabi_i2d>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	2800      	cmp	r0, #0
 8002d44:	d016      	beq.n	8002d74 <__aeabi_i2d+0x34>
 8002d46:	17c3      	asrs	r3, r0, #31
 8002d48:	18c5      	adds	r5, r0, r3
 8002d4a:	405d      	eors	r5, r3
 8002d4c:	0fc4      	lsrs	r4, r0, #31
 8002d4e:	0028      	movs	r0, r5
 8002d50:	f000 f91c 	bl	8002f8c <__clzsi2>
 8002d54:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <__aeabi_i2d+0x5c>)
 8002d56:	1a12      	subs	r2, r2, r0
 8002d58:	280a      	cmp	r0, #10
 8002d5a:	dc16      	bgt.n	8002d8a <__aeabi_i2d+0x4a>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	002e      	movs	r6, r5
 8002d60:	3315      	adds	r3, #21
 8002d62:	409e      	lsls	r6, r3
 8002d64:	230b      	movs	r3, #11
 8002d66:	1a18      	subs	r0, r3, r0
 8002d68:	40c5      	lsrs	r5, r0
 8002d6a:	0553      	lsls	r3, r2, #21
 8002d6c:	032d      	lsls	r5, r5, #12
 8002d6e:	0b2d      	lsrs	r5, r5, #12
 8002d70:	0d5b      	lsrs	r3, r3, #21
 8002d72:	e003      	b.n	8002d7c <__aeabi_i2d+0x3c>
 8002d74:	2400      	movs	r4, #0
 8002d76:	2300      	movs	r3, #0
 8002d78:	2500      	movs	r5, #0
 8002d7a:	2600      	movs	r6, #0
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	432b      	orrs	r3, r5
 8002d80:	07e4      	lsls	r4, r4, #31
 8002d82:	4323      	orrs	r3, r4
 8002d84:	0030      	movs	r0, r6
 8002d86:	0019      	movs	r1, r3
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	380b      	subs	r0, #11
 8002d8c:	4085      	lsls	r5, r0
 8002d8e:	0553      	lsls	r3, r2, #21
 8002d90:	032d      	lsls	r5, r5, #12
 8002d92:	2600      	movs	r6, #0
 8002d94:	0b2d      	lsrs	r5, r5, #12
 8002d96:	0d5b      	lsrs	r3, r3, #21
 8002d98:	e7f0      	b.n	8002d7c <__aeabi_i2d+0x3c>
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	0000041e 	.word	0x0000041e

08002da0 <__aeabi_ui2d>:
 8002da0:	b510      	push	{r4, lr}
 8002da2:	1e04      	subs	r4, r0, #0
 8002da4:	d010      	beq.n	8002dc8 <__aeabi_ui2d+0x28>
 8002da6:	f000 f8f1 	bl	8002f8c <__clzsi2>
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <__aeabi_ui2d+0x48>)
 8002dac:	1a1b      	subs	r3, r3, r0
 8002dae:	280a      	cmp	r0, #10
 8002db0:	dc11      	bgt.n	8002dd6 <__aeabi_ui2d+0x36>
 8002db2:	220b      	movs	r2, #11
 8002db4:	0021      	movs	r1, r4
 8002db6:	1a12      	subs	r2, r2, r0
 8002db8:	40d1      	lsrs	r1, r2
 8002dba:	3015      	adds	r0, #21
 8002dbc:	030a      	lsls	r2, r1, #12
 8002dbe:	055b      	lsls	r3, r3, #21
 8002dc0:	4084      	lsls	r4, r0
 8002dc2:	0b12      	lsrs	r2, r2, #12
 8002dc4:	0d5b      	lsrs	r3, r3, #21
 8002dc6:	e001      	b.n	8002dcc <__aeabi_ui2d+0x2c>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2200      	movs	r2, #0
 8002dcc:	051b      	lsls	r3, r3, #20
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	0020      	movs	r0, r4
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	0022      	movs	r2, r4
 8002dd8:	380b      	subs	r0, #11
 8002dda:	4082      	lsls	r2, r0
 8002ddc:	055b      	lsls	r3, r3, #21
 8002dde:	0312      	lsls	r2, r2, #12
 8002de0:	2400      	movs	r4, #0
 8002de2:	0b12      	lsrs	r2, r2, #12
 8002de4:	0d5b      	lsrs	r3, r3, #21
 8002de6:	e7f1      	b.n	8002dcc <__aeabi_ui2d+0x2c>
 8002de8:	0000041e 	.word	0x0000041e

08002dec <__aeabi_f2d>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	0043      	lsls	r3, r0, #1
 8002df0:	0246      	lsls	r6, r0, #9
 8002df2:	0fc4      	lsrs	r4, r0, #31
 8002df4:	20fe      	movs	r0, #254	; 0xfe
 8002df6:	0e1b      	lsrs	r3, r3, #24
 8002df8:	1c59      	adds	r1, r3, #1
 8002dfa:	0a75      	lsrs	r5, r6, #9
 8002dfc:	4208      	tst	r0, r1
 8002dfe:	d00c      	beq.n	8002e1a <__aeabi_f2d+0x2e>
 8002e00:	22e0      	movs	r2, #224	; 0xe0
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4694      	mov	ip, r2
 8002e06:	076d      	lsls	r5, r5, #29
 8002e08:	0b36      	lsrs	r6, r6, #12
 8002e0a:	4463      	add	r3, ip
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	4333      	orrs	r3, r6
 8002e10:	07e4      	lsls	r4, r4, #31
 8002e12:	4323      	orrs	r3, r4
 8002e14:	0028      	movs	r0, r5
 8002e16:	0019      	movs	r1, r3
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d114      	bne.n	8002e48 <__aeabi_f2d+0x5c>
 8002e1e:	2d00      	cmp	r5, #0
 8002e20:	d01b      	beq.n	8002e5a <__aeabi_f2d+0x6e>
 8002e22:	0028      	movs	r0, r5
 8002e24:	f000 f8b2 	bl	8002f8c <__clzsi2>
 8002e28:	280a      	cmp	r0, #10
 8002e2a:	dc1c      	bgt.n	8002e66 <__aeabi_f2d+0x7a>
 8002e2c:	230b      	movs	r3, #11
 8002e2e:	002a      	movs	r2, r5
 8002e30:	1a1b      	subs	r3, r3, r0
 8002e32:	40da      	lsrs	r2, r3
 8002e34:	0003      	movs	r3, r0
 8002e36:	3315      	adds	r3, #21
 8002e38:	409d      	lsls	r5, r3
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <__aeabi_f2d+0x88>)
 8002e3c:	0312      	lsls	r2, r2, #12
 8002e3e:	1a1b      	subs	r3, r3, r0
 8002e40:	055b      	lsls	r3, r3, #21
 8002e42:	0b16      	lsrs	r6, r2, #12
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	e7e1      	b.n	8002e0c <__aeabi_f2d+0x20>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	d009      	beq.n	8002e60 <__aeabi_f2d+0x74>
 8002e4c:	0b32      	lsrs	r2, r6, #12
 8002e4e:	2680      	movs	r6, #128	; 0x80
 8002e50:	0336      	lsls	r6, r6, #12
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <__aeabi_f2d+0x8c>)
 8002e54:	076d      	lsls	r5, r5, #29
 8002e56:	4316      	orrs	r6, r2
 8002e58:	e7d8      	b.n	8002e0c <__aeabi_f2d+0x20>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	e7d5      	b.n	8002e0c <__aeabi_f2d+0x20>
 8002e60:	2600      	movs	r6, #0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <__aeabi_f2d+0x8c>)
 8002e64:	e7d2      	b.n	8002e0c <__aeabi_f2d+0x20>
 8002e66:	0003      	movs	r3, r0
 8002e68:	002a      	movs	r2, r5
 8002e6a:	3b0b      	subs	r3, #11
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	2500      	movs	r5, #0
 8002e70:	e7e3      	b.n	8002e3a <__aeabi_f2d+0x4e>
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	00000389 	.word	0x00000389
 8002e78:	000007ff 	.word	0x000007ff

08002e7c <__aeabi_d2f>:
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	004b      	lsls	r3, r1, #1
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	0308      	lsls	r0, r1, #12
 8002e84:	0d5b      	lsrs	r3, r3, #21
 8002e86:	4e3d      	ldr	r6, [pc, #244]	; (8002f7c <__aeabi_d2f+0x100>)
 8002e88:	0fcc      	lsrs	r4, r1, #31
 8002e8a:	0a40      	lsrs	r0, r0, #9
 8002e8c:	0f51      	lsrs	r1, r2, #29
 8002e8e:	1c5f      	adds	r7, r3, #1
 8002e90:	4308      	orrs	r0, r1
 8002e92:	00d5      	lsls	r5, r2, #3
 8002e94:	4237      	tst	r7, r6
 8002e96:	d00a      	beq.n	8002eae <__aeabi_d2f+0x32>
 8002e98:	4939      	ldr	r1, [pc, #228]	; (8002f80 <__aeabi_d2f+0x104>)
 8002e9a:	185e      	adds	r6, r3, r1
 8002e9c:	2efe      	cmp	r6, #254	; 0xfe
 8002e9e:	dd16      	ble.n	8002ece <__aeabi_d2f+0x52>
 8002ea0:	23ff      	movs	r3, #255	; 0xff
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	05db      	lsls	r3, r3, #23
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	07e0      	lsls	r0, r4, #31
 8002eaa:	4318      	orrs	r0, r3
 8002eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <__aeabi_d2f+0x44>
 8002eb2:	4328      	orrs	r0, r5
 8002eb4:	d027      	beq.n	8002f06 <__aeabi_d2f+0x8a>
 8002eb6:	2105      	movs	r1, #5
 8002eb8:	0189      	lsls	r1, r1, #6
 8002eba:	0a49      	lsrs	r1, r1, #9
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e7f1      	b.n	8002ea4 <__aeabi_d2f+0x28>
 8002ec0:	4305      	orrs	r5, r0
 8002ec2:	d0ed      	beq.n	8002ea0 <__aeabi_d2f+0x24>
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	03c9      	lsls	r1, r1, #15
 8002ec8:	23ff      	movs	r3, #255	; 0xff
 8002eca:	4301      	orrs	r1, r0
 8002ecc:	e7ea      	b.n	8002ea4 <__aeabi_d2f+0x28>
 8002ece:	2e00      	cmp	r6, #0
 8002ed0:	dd1c      	ble.n	8002f0c <__aeabi_d2f+0x90>
 8002ed2:	0192      	lsls	r2, r2, #6
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	1e4a      	subs	r2, r1, #1
 8002ed8:	4191      	sbcs	r1, r2
 8002eda:	00c0      	lsls	r0, r0, #3
 8002edc:	0f6d      	lsrs	r5, r5, #29
 8002ede:	4301      	orrs	r1, r0
 8002ee0:	4329      	orrs	r1, r5
 8002ee2:	074b      	lsls	r3, r1, #29
 8002ee4:	d048      	beq.n	8002f78 <__aeabi_d2f+0xfc>
 8002ee6:	230f      	movs	r3, #15
 8002ee8:	400b      	ands	r3, r1
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d000      	beq.n	8002ef0 <__aeabi_d2f+0x74>
 8002eee:	3104      	adds	r1, #4
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	04db      	lsls	r3, r3, #19
 8002ef4:	400b      	ands	r3, r1
 8002ef6:	d03f      	beq.n	8002f78 <__aeabi_d2f+0xfc>
 8002ef8:	1c72      	adds	r2, r6, #1
 8002efa:	2efe      	cmp	r6, #254	; 0xfe
 8002efc:	d0d0      	beq.n	8002ea0 <__aeabi_d2f+0x24>
 8002efe:	0189      	lsls	r1, r1, #6
 8002f00:	0a49      	lsrs	r1, r1, #9
 8002f02:	b2d3      	uxtb	r3, r2
 8002f04:	e7ce      	b.n	8002ea4 <__aeabi_d2f+0x28>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	e7cb      	b.n	8002ea4 <__aeabi_d2f+0x28>
 8002f0c:	0032      	movs	r2, r6
 8002f0e:	3217      	adds	r2, #23
 8002f10:	db22      	blt.n	8002f58 <__aeabi_d2f+0xdc>
 8002f12:	2180      	movs	r1, #128	; 0x80
 8002f14:	221e      	movs	r2, #30
 8002f16:	0409      	lsls	r1, r1, #16
 8002f18:	4308      	orrs	r0, r1
 8002f1a:	1b92      	subs	r2, r2, r6
 8002f1c:	2a1f      	cmp	r2, #31
 8002f1e:	dd1d      	ble.n	8002f5c <__aeabi_d2f+0xe0>
 8002f20:	2102      	movs	r1, #2
 8002f22:	4249      	negs	r1, r1
 8002f24:	1b8e      	subs	r6, r1, r6
 8002f26:	0001      	movs	r1, r0
 8002f28:	40f1      	lsrs	r1, r6
 8002f2a:	000e      	movs	r6, r1
 8002f2c:	2a20      	cmp	r2, #32
 8002f2e:	d004      	beq.n	8002f3a <__aeabi_d2f+0xbe>
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <__aeabi_d2f+0x108>)
 8002f32:	4694      	mov	ip, r2
 8002f34:	4463      	add	r3, ip
 8002f36:	4098      	lsls	r0, r3
 8002f38:	4305      	orrs	r5, r0
 8002f3a:	0029      	movs	r1, r5
 8002f3c:	1e4d      	subs	r5, r1, #1
 8002f3e:	41a9      	sbcs	r1, r5
 8002f40:	4331      	orrs	r1, r6
 8002f42:	2600      	movs	r6, #0
 8002f44:	074b      	lsls	r3, r1, #29
 8002f46:	d1ce      	bne.n	8002ee6 <__aeabi_d2f+0x6a>
 8002f48:	2080      	movs	r0, #128	; 0x80
 8002f4a:	000b      	movs	r3, r1
 8002f4c:	04c0      	lsls	r0, r0, #19
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4003      	ands	r3, r0
 8002f52:	4201      	tst	r1, r0
 8002f54:	d1d3      	bne.n	8002efe <__aeabi_d2f+0x82>
 8002f56:	e7af      	b.n	8002eb8 <__aeabi_d2f+0x3c>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7ac      	b.n	8002eb6 <__aeabi_d2f+0x3a>
 8002f5c:	490a      	ldr	r1, [pc, #40]	; (8002f88 <__aeabi_d2f+0x10c>)
 8002f5e:	468c      	mov	ip, r1
 8002f60:	0029      	movs	r1, r5
 8002f62:	4463      	add	r3, ip
 8002f64:	40d1      	lsrs	r1, r2
 8002f66:	409d      	lsls	r5, r3
 8002f68:	000a      	movs	r2, r1
 8002f6a:	0029      	movs	r1, r5
 8002f6c:	4098      	lsls	r0, r3
 8002f6e:	1e4d      	subs	r5, r1, #1
 8002f70:	41a9      	sbcs	r1, r5
 8002f72:	4301      	orrs	r1, r0
 8002f74:	4311      	orrs	r1, r2
 8002f76:	e7e4      	b.n	8002f42 <__aeabi_d2f+0xc6>
 8002f78:	0033      	movs	r3, r6
 8002f7a:	e79d      	b.n	8002eb8 <__aeabi_d2f+0x3c>
 8002f7c:	000007fe 	.word	0x000007fe
 8002f80:	fffffc80 	.word	0xfffffc80
 8002f84:	fffffca2 	.word	0xfffffca2
 8002f88:	fffffc82 	.word	0xfffffc82

08002f8c <__clzsi2>:
 8002f8c:	211c      	movs	r1, #28
 8002f8e:	2301      	movs	r3, #1
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	4298      	cmp	r0, r3
 8002f94:	d301      	bcc.n	8002f9a <__clzsi2+0xe>
 8002f96:	0c00      	lsrs	r0, r0, #16
 8002f98:	3910      	subs	r1, #16
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	4298      	cmp	r0, r3
 8002f9e:	d301      	bcc.n	8002fa4 <__clzsi2+0x18>
 8002fa0:	0a00      	lsrs	r0, r0, #8
 8002fa2:	3908      	subs	r1, #8
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	4298      	cmp	r0, r3
 8002fa8:	d301      	bcc.n	8002fae <__clzsi2+0x22>
 8002faa:	0900      	lsrs	r0, r0, #4
 8002fac:	3904      	subs	r1, #4
 8002fae:	a202      	add	r2, pc, #8	; (adr r2, 8002fb8 <__clzsi2+0x2c>)
 8002fb0:	5c10      	ldrb	r0, [r2, r0]
 8002fb2:	1840      	adds	r0, r0, r1
 8002fb4:	4770      	bx	lr
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	02020304 	.word	0x02020304
 8002fbc:	01010101 	.word	0x01010101
	...

08002fc8 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fca:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002fcc:	4b23      	ldr	r3, [pc, #140]	; (800305c <LoadROtopology+0x94>)
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002fd2:	4a23      	ldr	r2, [pc, #140]	; (8003060 <LoadROtopology+0x98>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d011      	beq.n	8002ffc <LoadROtopology+0x34>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002fd8:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002fda:	d017      	beq.n	800300c <LoadROtopology+0x44>
		N =(uint8_t )(temp >> 8);
 8002fdc:	4921      	ldr	r1, [pc, #132]	; (8003064 <LoadROtopology+0x9c>)
 8002fde:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002fe0:	4a21      	ldr	r2, [pc, #132]	; (8003068 <LoadROtopology+0xa0>)
 8002fe2:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002fe4:	4b1f      	ldr	r3, [pc, #124]	; (8003064 <LoadROtopology+0x9c>)
 8002fe6:	7818      	ldrb	r0, [r3, #0]
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d035      	beq.n	8003058 <LoadROtopology+0x90>
 8002fec:	2601      	movs	r6, #1
	uint16_t add =2, temp =0;
 8002fee:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ff0:	466b      	mov	r3, sp
 8002ff2:	1dd9      	adds	r1, r3, #7
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002ff8:	4d1c      	ldr	r5, [pc, #112]	; (800306c <LoadROtopology+0xa4>)
 8002ffa:	e00f      	b.n	800301c <LoadROtopology+0x54>
		N =1;
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <LoadROtopology+0x9c>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
		myID =0;
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <LoadROtopology+0xa0>)
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8003008:	20fa      	movs	r0, #250	; 0xfa
 800300a:	e025      	b.n	8003058 <LoadROtopology+0x90>
			N =1;
 800300c:	4a15      	ldr	r2, [pc, #84]	; (8003064 <LoadROtopology+0x9c>)
 800300e:	2101      	movs	r1, #1
 8003010:	7011      	strb	r1, [r2, #0]
 8003012:	e7e5      	b.n	8002fe0 <LoadROtopology+0x18>
		for(uint8_t i =1; i <= N; i++){
 8003014:	3601      	adds	r6, #1
 8003016:	b2f6      	uxtb	r6, r6
 8003018:	4286      	cmp	r6, r0
 800301a:	d81c      	bhi.n	8003056 <LoadROtopology+0x8e>
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 800301c:	4663      	mov	r3, ip
 800301e:	700b      	strb	r3, [r1, #0]
 8003020:	780b      	ldrb	r3, [r1, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b0a      	cmp	r3, #10
 8003026:	d8f5      	bhi.n	8003014 <LoadROtopology+0x4c>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8003028:	1e73      	subs	r3, r6, #1
 800302a:	009c      	lsls	r4, r3, #2
 800302c:	18e4      	adds	r4, r4, r3
 800302e:	0064      	lsls	r4, r4, #1
 8003030:	18e4      	adds	r4, r4, r3
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <LoadROtopology+0x94>)
 8003034:	18d7      	adds	r7, r2, r3
 8003036:	780b      	ldrb	r3, [r1, #0]
 8003038:	883f      	ldrh	r7, [r7, #0]
 800303a:	191b      	adds	r3, r3, r4
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8003040:	3202      	adds	r2, #2
 8003042:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8003044:	780b      	ldrb	r3, [r1, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	700b      	strb	r3, [r1, #0]
 800304c:	780b      	ldrb	r3, [r1, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b0a      	cmp	r3, #10
 8003052:	d9ee      	bls.n	8003032 <LoadROtopology+0x6a>
 8003054:	e7de      	b.n	8003014 <LoadROtopology+0x4c>
			}
		}
	}
	
	return result;
 8003056:	2000      	movs	r0, #0
}
 8003058:	b003      	add	sp, #12
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305c:	0801d800 	.word	0x0801d800
 8003060:	0000ffff 	.word	0x0000ffff
 8003064:	20000030 	.word	0x20000030
 8003068:	2000080e 	.word	0x2000080e
 800306c:	200002bc 	.word	0x200002bc

08003070 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8003070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <LoadEEportsDir+0x3c>)
 8003074:	781d      	ldrb	r5, [r3, #0]
 8003076:	2d00      	cmp	r5, #0
 8003078:	d016      	beq.n	80030a8 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 800307a:	490d      	ldr	r1, [pc, #52]	; (80030b0 <LoadEEportsDir+0x40>)
 800307c:	2002      	movs	r0, #2
 800307e:	f009 f9f5 	bl	800c46c <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8003082:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003084:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8003086:	4e09      	ldr	r6, [pc, #36]	; (80030ac <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003088:	4f09      	ldr	r7, [pc, #36]	; (80030b0 <LoadEEportsDir+0x40>)
	for(uint8_t i =1; i <= N; i++){
 800308a:	3401      	adds	r4, #1
 800308c:	b2e4      	uxtb	r4, r4
 800308e:	7833      	ldrb	r3, [r6, #0]
 8003090:	42a3      	cmp	r3, r4
 8003092:	d309      	bcc.n	80030a8 <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8003094:	1e61      	subs	r1, r4, #1
 8003096:	0049      	lsls	r1, r1, #1
 8003098:	19c9      	adds	r1, r1, r7
 800309a:	1c60      	adds	r0, r4, #1
 800309c:	f009 f9e6 	bl	800c46c <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80030a0:	2c19      	cmp	r4, #25
 80030a2:	d9f2      	bls.n	800308a <LoadEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 80030a4:	250a      	movs	r5, #10
 80030a6:	e7f0      	b.n	800308a <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 80030a8:	0028      	movs	r0, r5
 80030aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ac:	20000030 	.word	0x20000030
 80030b0:	20006740 	.word	0x20006740

080030b4 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 80030b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b6:	46de      	mov	lr, fp
 80030b8:	4657      	mov	r7, sl
 80030ba:	464e      	mov	r6, r9
 80030bc:	4645      	mov	r5, r8
 80030be:	b5e0      	push	{r5, r6, r7, lr}
 80030c0:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 80030c2:	466b      	mov	r3, sp
 80030c4:	2200      	movs	r2, #0
 80030c6:	80da      	strh	r2, [r3, #6]
 80030c8:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030ca:	2300      	movs	r3, #0
 80030cc:	4698      	mov	r8, r3
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <LoadEEalias+0x84>)
 80030d0:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 80030d2:	469a      	mov	sl, r3
 80030d4:	e010      	b.n	80030f8 <LoadEEalias+0x44>
 80030d6:	464b      	mov	r3, r9
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	444b      	add	r3, r9
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4453      	add	r3, sl
 80030e0:	2200      	movs	r2, #0
 80030e2:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80030e4:	4643      	mov	r3, r8
 80030e6:	3301      	adds	r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	4698      	mov	r8, r3
 80030ec:	3705      	adds	r7, #5
 80030ee:	b2bf      	uxth	r7, r7
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <LoadEEalias+0x88>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4543      	cmp	r3, r8
 80030f6:	d317      	bcc.n	8003128 <LoadEEalias+0x74>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80030f8:	1f7c      	subs	r4, r7, #5
 80030fa:	b2a4      	uxth	r4, r4
 80030fc:	4643      	mov	r3, r8
 80030fe:	009d      	lsls	r5, r3, #2
 8003100:	4445      	add	r5, r8
 8003102:	006d      	lsls	r5, r5, #1
 8003104:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8003106:	466b      	mov	r3, sp
 8003108:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 800310a:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 800310c:	0031      	movs	r1, r6
 800310e:	0020      	movs	r0, r4
 8003110:	f009 f9ac 	bl	800c46c <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8003114:	8833      	ldrh	r3, [r6, #0]
 8003116:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800311c:	3401      	adds	r4, #1
 800311e:	b2a4      	uxth	r4, r4
 8003120:	3502      	adds	r5, #2
 8003122:	42a7      	cmp	r7, r4
 8003124:	d1f2      	bne.n	800310c <LoadEEalias+0x58>
 8003126:	e7d6      	b.n	80030d6 <LoadEEalias+0x22>
	}
	
	return result;
}
 8003128:	2000      	movs	r0, #0
 800312a:	b003      	add	sp, #12
 800312c:	bcf0      	pop	{r4, r5, r6, r7}
 800312e:	46bb      	mov	fp, r7
 8003130:	46b2      	mov	sl, r6
 8003132:	46a9      	mov	r9, r5
 8003134:	46a0      	mov	r8, r4
 8003136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003138:	20000700 	.word	0x20000700
 800313c:	20000030 	.word	0x20000030

08003140 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	46d6      	mov	lr, sl
 8003144:	464f      	mov	r7, r9
 8003146:	4646      	mov	r6, r8
 8003148:	b5c0      	push	{r6, r7, lr}
 800314a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 800314c:	466b      	mov	r3, sp
 800314e:	2200      	movs	r2, #0
 8003150:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <LoadEEgroup+0xa0>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 800315a:	2400      	movs	r4, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 800315c:	4e21      	ldr	r6, [pc, #132]	; (80031e4 <LoadEEgroup+0xa4>)
	for(i =0; i < N; i++)			// N modules
 800315e:	4d20      	ldr	r5, [pc, #128]	; (80031e0 <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8003160:	b2e1      	uxtb	r1, r4
 8003162:	0049      	lsls	r1, r1, #1
 8003164:	1871      	adds	r1, r6, r1
 8003166:	0020      	movs	r0, r4
 8003168:	30cb      	adds	r0, #203	; 0xcb
 800316a:	b280      	uxth	r0, r0
 800316c:	f009 f97e 	bl	800c46c <EE_ReadVariable>
		add++;
 8003170:	1c63      	adds	r3, r4, #1
 8003172:	b29c      	uxth	r4, r3
	for(i =0; i < N; i++)			// N modules
 8003174:	782a      	ldrb	r2, [r5, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	429a      	cmp	r2, r3
 800317a:	d8f1      	bhi.n	8003160 <LoadEEgroup+0x20>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 800317c:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <LoadEEgroup+0xa8>)
 800317e:	4699      	mov	r9, r3
 8003180:	0027      	movs	r7, r4
 8003182:	379e      	adds	r7, #158	; 0x9e
 8003184:	b2bf      	uxth	r7, r7
 8003186:	34d0      	adds	r4, #208	; 0xd0
 8003188:	b2a3      	uxth	r3, r4
 800318a:	4698      	mov	r8, r3
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 800318c:	466b      	mov	r3, sp
 800318e:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003190:	2300      	movs	r3, #0
 8003192:	469a      	mov	sl, r3
 8003194:	e00b      	b.n	80031ae <LoadEEgroup+0x6e>
	uint16_t add =0, temp =0;
 8003196:	2400      	movs	r4, #0
 8003198:	e7f0      	b.n	800317c <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800319a:	464b      	mov	r3, r9
 800319c:	4652      	mov	r2, sl
 800319e:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 80031a0:	230a      	movs	r3, #10
 80031a2:	469c      	mov	ip, r3
 80031a4:	44e1      	add	r9, ip
 80031a6:	3705      	adds	r7, #5
 80031a8:	b2bf      	uxth	r7, r7
 80031aa:	4547      	cmp	r7, r8
 80031ac:	d010      	beq.n	80031d0 <LoadEEgroup+0x90>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80031ae:	1f7c      	subs	r4, r7, #5
 80031b0:	b2a4      	uxth	r4, r4
	uint16_t add =0, temp =0;
 80031b2:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 80031b4:	0031      	movs	r1, r6
 80031b6:	0020      	movs	r0, r4
 80031b8:	f009 f958 	bl	800c46c <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 80031bc:	8833      	ldrh	r3, [r6, #0]
 80031be:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	702b      	strb	r3, [r5, #0]
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80031c4:	3401      	adds	r4, #1
 80031c6:	b2a4      	uxth	r4, r4
 80031c8:	3502      	adds	r5, #2
 80031ca:	42bc      	cmp	r4, r7
 80031cc:	d1f2      	bne.n	80031b4 <LoadEEgroup+0x74>
 80031ce:	e7e4      	b.n	800319a <LoadEEgroup+0x5a>
	}
	
	return result;
}
 80031d0:	2000      	movs	r0, #0
 80031d2:	b002      	add	sp, #8
 80031d4:	bce0      	pop	{r5, r6, r7}
 80031d6:	46ba      	mov	sl, r7
 80031d8:	46b1      	mov	r9, r6
 80031da:	46a8      	mov	r8, r5
 80031dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	20000030 	.word	0x20000030
 80031e4:	2000065c 	.word	0x2000065c
 80031e8:	200005f8 	.word	0x200005f8

080031ec <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 80031f0:	210e      	movs	r1, #14
 80031f2:	4469      	add	r1, sp
 80031f4:	2300      	movs	r3, #0
 80031f6:	800b      	strh	r3, [r1, #0]
 80031f8:	aa03      	add	r2, sp, #12
 80031fa:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 80031fc:	20e4      	movs	r0, #228	; 0xe4
 80031fe:	f009 f935 	bl	800c46c <EE_ReadVariable>
	uint8_t direction =0;
 8003202:	2500      	movs	r5, #0
	if(!status1){
 8003204:	2800      	cmp	r0, #0
 8003206:	d102      	bne.n	800320e <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8003208:	230e      	movs	r3, #14
 800320a:	446b      	add	r3, sp
 800320c:	781d      	ldrb	r5, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 800320e:	210e      	movs	r1, #14
 8003210:	4469      	add	r1, sp
 8003212:	20e5      	movs	r0, #229	; 0xe5
 8003214:	f009 f92a 	bl	800c46c <EE_ReadVariable>
 8003218:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 800321a:	a903      	add	r1, sp, #12
 800321c:	20e6      	movs	r0, #230	; 0xe6
 800321e:	f009 f925 	bl	800c46c <EE_ReadVariable>
	if(!status1 && !status2){
 8003222:	4304      	orrs	r4, r0
 8003224:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8003226:	2600      	movs	r6, #0
	if(!status1 && !status2){
 8003228:	2c00      	cmp	r4, #0
 800322a:	d106      	bne.n	800323a <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 800322c:	230e      	movs	r3, #14
 800322e:	446b      	add	r3, sp
 8003230:	881e      	ldrh	r6, [r3, #0]
 8003232:	0436      	lsls	r6, r6, #16
 8003234:	ab03      	add	r3, sp, #12
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 800323a:	210e      	movs	r1, #14
 800323c:	4469      	add	r1, sp
 800323e:	20e7      	movs	r0, #231	; 0xe7
 8003240:	f009 f914 	bl	800c46c <EE_ReadVariable>
 8003244:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8003246:	a903      	add	r1, sp, #12
 8003248:	20e8      	movs	r0, #232	; 0xe8
 800324a:	f009 f90f 	bl	800c46c <EE_ReadVariable>
	if(!status1 && !status2){
 800324e:	4320      	orrs	r0, r4
 8003250:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8003252:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8003254:	2800      	cmp	r0, #0
 8003256:	d106      	bne.n	8003266 <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003258:	230e      	movs	r3, #14
 800325a:	446b      	add	r3, sp
 800325c:	881c      	ldrh	r4, [r3, #0]
 800325e:	0424      	lsls	r4, r4, #16
 8003260:	ab03      	add	r3, sp, #12
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8003266:	210e      	movs	r1, #14
 8003268:	4469      	add	r1, sp
 800326a:	20e9      	movs	r0, #233	; 0xe9
 800326c:	f009 f8fe 	bl	800c46c <EE_ReadVariable>
	if(!status1){
 8003270:	2800      	cmp	r0, #0
 8003272:	d107      	bne.n	8003284 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8003274:	230e      	movs	r3, #14
 8003276:	446b      	add	r3, sp
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	0a19      	lsrs	r1, r3, #8
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <LoadEEstreams+0x134>)
 800327e:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <LoadEEstreams+0x138>)
 8003282:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8003284:	210e      	movs	r1, #14
 8003286:	4469      	add	r1, sp
 8003288:	20ea      	movs	r0, #234	; 0xea
 800328a:	f009 f8ef 	bl	800c46c <EE_ReadVariable>
	if(!status1){
 800328e:	2800      	cmp	r0, #0
 8003290:	d107      	bne.n	80032a2 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8003292:	230e      	movs	r3, #14
 8003294:	446b      	add	r3, sp
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	0a19      	lsrs	r1, r3, #8
 800329a:	4a23      	ldr	r2, [pc, #140]	; (8003328 <LoadEEstreams+0x13c>)
 800329c:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 800329e:	4a23      	ldr	r2, [pc, #140]	; (800332c <LoadEEstreams+0x140>)
 80032a0:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 80032a2:	210e      	movs	r1, #14
 80032a4:	4469      	add	r1, sp
 80032a6:	20eb      	movs	r0, #235	; 0xeb
 80032a8:	f009 f8e0 	bl	800c46c <EE_ReadVariable>
	if(!status1){
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d107      	bne.n	80032c0 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 80032b0:	230e      	movs	r3, #14
 80032b2:	446b      	add	r3, sp
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	0a19      	lsrs	r1, r3, #8
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <LoadEEstreams+0x144>)
 80032ba:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <LoadEEstreams+0x148>)
 80032be:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <LoadEEstreams+0x134>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <LoadEEstreams+0xe4>
 80032c8:	4a16      	ldr	r2, [pc, #88]	; (8003324 <LoadEEstreams+0x138>)
 80032ca:	7812      	ldrb	r2, [r2, #0]
 80032cc:	2a00      	cmp	r2, #0
 80032ce:	d112      	bne.n	80032f6 <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 80032d0:	4b15      	ldr	r3, [pc, #84]	; (8003328 <LoadEEstreams+0x13c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <LoadEEstreams+0xf4>
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <LoadEEstreams+0x140>)
 80032da:	7812      	ldrb	r2, [r2, #0]
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d111      	bne.n	8003304 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 80032e0:	4b13      	ldr	r3, [pc, #76]	; (8003330 <LoadEEstreams+0x144>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <LoadEEstreams+0x104>
 80032e8:	4a12      	ldr	r2, [pc, #72]	; (8003334 <LoadEEstreams+0x148>)
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	2a00      	cmp	r2, #0
 80032ee:	d110      	bne.n	8003312 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 80032f0:	2000      	movs	r0, #0
 80032f2:	b004      	add	sp, #16
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80032f6:	9200      	str	r2, [sp, #0]
 80032f8:	0022      	movs	r2, r4
 80032fa:	0031      	movs	r1, r6
 80032fc:	0028      	movs	r0, r5
 80032fe:	f004 fcbf 	bl	8007c80 <SetupDMAStreams>
 8003302:	e7e5      	b.n	80032d0 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003304:	9200      	str	r2, [sp, #0]
 8003306:	0022      	movs	r2, r4
 8003308:	0031      	movs	r1, r6
 800330a:	0028      	movs	r0, r5
 800330c:	f004 fcb8 	bl	8007c80 <SetupDMAStreams>
 8003310:	e7e6      	b.n	80032e0 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003312:	9200      	str	r2, [sp, #0]
 8003314:	0022      	movs	r2, r4
 8003316:	0031      	movs	r1, r6
 8003318:	0028      	movs	r0, r5
 800331a:	f004 fcb1 	bl	8007c80 <SetupDMAStreams>
 800331e:	e7e7      	b.n	80032f0 <LoadEEstreams+0x104>
 8003320:	200008ca 	.word	0x200008ca
 8003324:	200005f5 	.word	0x200005f5
 8003328:	200008cb 	.word	0x200008cb
 800332c:	200005f6 	.word	0x200005f6
 8003330:	200008cc 	.word	0x200008cc
 8003334:	200005f7 	.word	0x200005f7

08003338 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 8003338:	b510      	push	{r4, lr}
 800333a:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 800333c:	208a      	movs	r0, #138	; 0x8a
 800333e:	466b      	mov	r3, sp
 8003340:	1d99      	adds	r1, r3, #6
 8003342:	0040      	lsls	r0, r0, #1
 8003344:	f009 f892 	bl	800c46c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003348:	2800      	cmp	r0, #0
 800334a:	d000      	beq.n	800334e <LoadEEparams+0x16>
 800334c:	e074      	b.n	8003438 <LoadEEparams+0x100>
		BOSMessaging.response =(uint8_t )temp1;
 800334e:	466b      	mov	r3, sp
 8003350:	3306      	adds	r3, #6
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	4a51      	ldr	r2, [pc, #324]	; (800349c <LoadEEparams+0x164>)
 8003356:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 800335c:	208e      	movs	r0, #142	; 0x8e
 800335e:	466b      	mov	r3, sp
 8003360:	1d99      	adds	r1, r3, #6
 8003362:	0040      	lsls	r0, r0, #1
 8003364:	f009 f882 	bl	800c46c <EE_ReadVariable>

	if(!status1){
 8003368:	2800      	cmp	r0, #0
 800336a:	d000      	beq.n	800336e <LoadEEparams+0x36>
 800336c:	e06b      	b.n	8003446 <LoadEEparams+0x10e>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 800336e:	466b      	mov	r3, sp
 8003370:	88db      	ldrh	r3, [r3, #6]
 8003372:	494a      	ldr	r1, [pc, #296]	; (800349c <LoadEEparams+0x164>)
 8003374:	0bda      	lsrs	r2, r3, #15
 8003376:	710a      	strb	r2, [r1, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	80cb      	strh	r3, [r1, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 800337c:	2016      	movs	r0, #22
 800337e:	466b      	mov	r3, sp
 8003380:	1d99      	adds	r1, r3, #6
 8003382:	30ff      	adds	r0, #255	; 0xff
 8003384:	f009 f872 	bl	800c46c <EE_ReadVariable>
	if(!status1)
 8003388:	2800      	cmp	r0, #0
 800338a:	d163      	bne.n	8003454 <LoadEEparams+0x11c>
		BOS.buttons.debounce =temp1;
 800338c:	466b      	mov	r3, sp
 800338e:	88da      	ldrh	r2, [r3, #6]
 8003390:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <LoadEEparams+0x168>)
 8003392:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003394:	208b      	movs	r0, #139	; 0x8b
 8003396:	466b      	mov	r3, sp
 8003398:	1d99      	adds	r1, r3, #6
 800339a:	0040      	lsls	r0, r0, #1
 800339c:	f009 f866 	bl	800c46c <EE_ReadVariable>
	if(!status1)
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d15a      	bne.n	800345a <LoadEEparams+0x122>
		BOS.buttons.singleClickTime =temp1;
 80033a4:	466b      	mov	r3, sp
 80033a6:	88da      	ldrh	r2, [r3, #6]
 80033a8:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <LoadEEparams+0x168>)
 80033aa:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 80033ac:	2018      	movs	r0, #24
 80033ae:	466b      	mov	r3, sp
 80033b0:	1d99      	adds	r1, r3, #6
 80033b2:	30ff      	adds	r0, #255	; 0xff
 80033b4:	f009 f85a 	bl	800c46c <EE_ReadVariable>
	if(!status1){
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d151      	bne.n	8003460 <LoadEEparams+0x128>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 80033bc:	466b      	mov	r3, sp
 80033be:	3306      	adds	r3, #6
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	4a37      	ldr	r2, [pc, #220]	; (80034a0 <LoadEEparams+0x168>)
 80033c4:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 80033ca:	208c      	movs	r0, #140	; 0x8c
 80033cc:	466b      	mov	r3, sp
 80033ce:	1d99      	adds	r1, r3, #6
 80033d0:	0040      	lsls	r0, r0, #1
 80033d2:	f009 f84b 	bl	800c46c <EE_ReadVariable>
 80033d6:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 80033d8:	201a      	movs	r0, #26
 80033da:	a901      	add	r1, sp, #4
 80033dc:	30ff      	adds	r0, #255	; 0xff
 80033de:	f009 f845 	bl	800c46c <EE_ReadVariable>
	if(!status1 && !status2){
 80033e2:	4304      	orrs	r4, r0
 80033e4:	b2a4      	uxth	r4, r4
 80033e6:	2c00      	cmp	r4, #0
 80033e8:	d141      	bne.n	800346e <LoadEEparams+0x136>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80033ea:	ab01      	add	r3, sp, #4
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	466a      	mov	r2, sp
 80033f2:	3206      	adds	r2, #6
 80033f4:	8812      	ldrh	r2, [r2, #0]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <LoadEEparams+0x168>)
 80033fa:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80033fc:	208d      	movs	r0, #141	; 0x8d
 80033fe:	466b      	mov	r3, sp
 8003400:	1d99      	adds	r1, r3, #6
 8003402:	0040      	lsls	r0, r0, #1
 8003404:	f009 f832 	bl	800c46c <EE_ReadVariable>
	if(!status1){
 8003408:	2800      	cmp	r0, #0
 800340a:	d13e      	bne.n	800348a <LoadEEparams+0x152>
		BOS.daylightsaving =(int8_t )temp1;
 800340c:	466b      	mov	r3, sp
 800340e:	3306      	adds	r3, #6
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <LoadEEparams+0x168>)
 8003414:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800341a:	201c      	movs	r0, #28
 800341c:	466b      	mov	r3, sp
 800341e:	1d99      	adds	r1, r3, #6
 8003420:	30ff      	adds	r0, #255	; 0xff
 8003422:	f009 f823 	bl	800c46c <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003426:	2800      	cmp	r0, #0
 8003428:	d135      	bne.n	8003496 <LoadEEparams+0x15e>
		BOS.disableCLI =(uint8_t )temp1;
 800342a:	466b      	mov	r3, sp
 800342c:	799a      	ldrb	r2, [r3, #6]
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <LoadEEparams+0x168>)
 8003430:	769a      	strb	r2, [r3, #26]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 8003432:	2000      	movs	r0, #0
 8003434:	b002      	add	sp, #8
 8003436:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <LoadEEparams+0x164>)
 800343a:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <LoadEEparams+0x16c>)
 800343c:	7811      	ldrb	r1, [r2, #0]
 800343e:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003440:	7852      	ldrb	r2, [r2, #1]
 8003442:	705a      	strb	r2, [r3, #1]
 8003444:	e78a      	b.n	800335c <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <LoadEEparams+0x164>)
 8003448:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <LoadEEparams+0x16c>)
 800344a:	7911      	ldrb	r1, [r2, #4]
 800344c:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 800344e:	88d2      	ldrh	r2, [r2, #6]
 8003450:	80da      	strh	r2, [r3, #6]
 8003452:	e793      	b.n	800337c <LoadEEparams+0x44>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 8003454:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <LoadEEparams+0x170>)
 8003456:	881a      	ldrh	r2, [r3, #0]
 8003458:	e79a      	b.n	8003390 <LoadEEparams+0x58>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <LoadEEparams+0x170>)
 800345c:	885a      	ldrh	r2, [r3, #2]
 800345e:	e7a3      	b.n	80033a8 <LoadEEparams+0x70>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <LoadEEparams+0x168>)
 8003462:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <LoadEEparams+0x170>)
 8003464:	7911      	ldrb	r1, [r2, #4]
 8003466:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 8003468:	7952      	ldrb	r2, [r2, #5]
 800346a:	715a      	strb	r2, [r3, #5]
 800346c:	e7ad      	b.n	80033ca <LoadEEparams+0x92>
	else if(CLI_LOW_Baudrate_Flag)
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <LoadEEparams+0x174>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <LoadEEparams+0x148>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <LoadEEparams+0x168>)
 8003478:	22e1      	movs	r2, #225	; 0xe1
 800347a:	0252      	lsls	r2, r2, #9
 800347c:	609a      	str	r2, [r3, #8]
 800347e:	e7bd      	b.n	80033fc <LoadEEparams+0xc4>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <LoadEEparams+0x170>)
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <LoadEEparams+0x168>)
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	e7b8      	b.n	80033fc <LoadEEparams+0xc4>
		BOS.hourformat =24;
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <LoadEEparams+0x168>)
 800348c:	2218      	movs	r2, #24
 800348e:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003490:	2200      	movs	r2, #0
 8003492:	731a      	strb	r2, [r3, #12]
 8003494:	e7c1      	b.n	800341a <LoadEEparams+0xe2>
		BOS.disableCLI =BOS_default.disableCLI;
 8003496:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <LoadEEparams+0x170>)
 8003498:	7e9a      	ldrb	r2, [r3, #26]
 800349a:	e7c8      	b.n	800342e <LoadEEparams+0xf6>
 800349c:	200061f8 	.word	0x200061f8
 80034a0:	20006278 	.word	0x20006278
 80034a4:	2000000c 	.word	0x2000000c
 80034a8:	20000014 	.word	0x20000014
 80034ac:	200002b7 	.word	0x200002b7

080034b0 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	46ce      	mov	lr, r9
 80034b4:	4647      	mov	r7, r8
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 80034ba:	231e      	movs	r3, #30
 80034bc:	446b      	add	r3, sp
 80034be:	2200      	movs	r2, #0
 80034c0:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80034c2:	4e36      	ldr	r6, [pc, #216]	; (800359c <LoadEEbuttons+0xec>)
	uint16_t temp16 =0, status1 =0;
 80034c4:	24ec      	movs	r4, #236	; 0xec
 80034c6:	2501      	movs	r5, #1
 80034c8:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80034ca:	2301      	movs	r3, #1
 80034cc:	4698      	mov	r8, r3
 80034ce:	e005      	b.n	80034dc <LoadEEbuttons+0x2c>
	for(uint8_t i =0; i <= NumOfPorts; i++){
 80034d0:	3501      	adds	r5, #1
 80034d2:	3404      	adds	r4, #4
 80034d4:	b2a4      	uxth	r4, r4
 80034d6:	3609      	adds	r6, #9
 80034d8:	2d05      	cmp	r5, #5
 80034da:	d059      	beq.n	8003590 <LoadEEbuttons+0xe0>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80034dc:	231e      	movs	r3, #30
 80034de:	446b      	add	r3, sp
 80034e0:	0019      	movs	r1, r3
 80034e2:	0020      	movs	r0, r4
 80034e4:	f008 ffc2 	bl	800c46c <EE_ReadVariable>
		if(!status1)									// This variable exists
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d1f1      	bne.n	80034d0 <LoadEEbuttons+0x20>
			temp8 =(uint8_t )(temp16 >> 8);
 80034ec:	466b      	mov	r3, sp
 80034ee:	8bdb      	ldrh	r3, [r3, #30]
 80034f0:	0a19      	lsrs	r1, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80034f2:	0b1a      	lsrs	r2, r3, #12
 80034f4:	42aa      	cmp	r2, r5
 80034f6:	d1eb      	bne.n	80034d0 <LoadEEbuttons+0x20>
 80034f8:	003a      	movs	r2, r7
 80034fa:	400a      	ands	r2, r1
 80034fc:	420f      	tst	r7, r1
 80034fe:	d0e7      	beq.n	80034d0 <LoadEEbuttons+0x20>
				button[i + 1].type =temp8 & 0x0F;
 8003500:	72b2      	strb	r2, [r6, #10]
				button[i + 1].events =(uint8_t )temp16;
 8003502:	7473      	strb	r3, [r6, #17]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003504:	00a8      	lsls	r0, r5, #2
 8003506:	b283      	uxth	r3, r0
 8003508:	4699      	mov	r9, r3
 800350a:	0018      	movs	r0, r3
 800350c:	30e9      	adds	r0, #233	; 0xe9
 800350e:	b280      	uxth	r0, r0
 8003510:	231e      	movs	r3, #30
 8003512:	446b      	add	r3, sp
 8003514:	0019      	movs	r1, r3
 8003516:	f008 ffa9 	bl	800c46c <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 800351a:	466b      	mov	r3, sp
 800351c:	8bdb      	ldrh	r3, [r3, #30]
 800351e:	0a1a      	lsrs	r2, r3, #8
 8003520:	72f2      	strb	r2, [r6, #11]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003522:	73b3      	strb	r3, [r6, #14]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003524:	4648      	mov	r0, r9
 8003526:	30ea      	adds	r0, #234	; 0xea
 8003528:	b280      	uxth	r0, r0
 800352a:	231e      	movs	r3, #30
 800352c:	446b      	add	r3, sp
 800352e:	0019      	movs	r1, r3
 8003530:	f008 ff9c 	bl	800c46c <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 8003534:	466b      	mov	r3, sp
 8003536:	8bdb      	ldrh	r3, [r3, #30]
 8003538:	0a1a      	lsrs	r2, r3, #8
 800353a:	7332      	strb	r2, [r6, #12]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 800353c:	73f3      	strb	r3, [r6, #15]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 800353e:	4648      	mov	r0, r9
 8003540:	30eb      	adds	r0, #235	; 0xeb
 8003542:	b280      	uxth	r0, r0
 8003544:	231e      	movs	r3, #30
 8003546:	446b      	add	r3, sp
 8003548:	0019      	movs	r1, r3
 800354a:	f008 ff8f 	bl	800c46c <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 800354e:	466b      	mov	r3, sp
 8003550:	8bdb      	ldrh	r3, [r3, #30]
 8003552:	0a1a      	lsrs	r2, r3, #8
 8003554:	7372      	strb	r2, [r6, #13]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 8003556:	7433      	strb	r3, [r6, #16]
				AddPortButton(button[i + 1].type,i + 1);
 8003558:	b2eb      	uxtb	r3, r5
 800355a:	7ab0      	ldrb	r0, [r6, #10]
 800355c:	4699      	mov	r9, r3
 800355e:	0019      	movs	r1, r3
 8003560:	f009 fc26 	bl	800cdb0 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 8003564:	7c71      	ldrb	r1, [r6, #17]
 8003566:	7af3      	ldrb	r3, [r6, #11]
 8003568:	104a      	asrs	r2, r1, #1
 800356a:	4640      	mov	r0, r8
 800356c:	4002      	ands	r2, r0
 800356e:	4001      	ands	r1, r0
 8003570:	2000      	movs	r0, #0
 8003572:	9005      	str	r0, [sp, #20]
 8003574:	7c30      	ldrb	r0, [r6, #16]
 8003576:	9004      	str	r0, [sp, #16]
 8003578:	7bf0      	ldrb	r0, [r6, #15]
 800357a:	9003      	str	r0, [sp, #12]
 800357c:	7bb0      	ldrb	r0, [r6, #14]
 800357e:	9002      	str	r0, [sp, #8]
 8003580:	7b70      	ldrb	r0, [r6, #13]
 8003582:	9001      	str	r0, [sp, #4]
 8003584:	7b30      	ldrb	r0, [r6, #12]
 8003586:	9000      	str	r0, [sp, #0]
 8003588:	4648      	mov	r0, r9
 800358a:	f009 fd29 	bl	800cfe0 <SetButtonEvents>
 800358e:	e79f      	b.n	80034d0 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 8003590:	2000      	movs	r0, #0
 8003592:	b009      	add	sp, #36	; 0x24
 8003594:	bcc0      	pop	{r6, r7}
 8003596:	46b9      	mov	r9, r7
 8003598:	46b0      	mov	r8, r6
 800359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800359c:	20001358 	.word	0x20001358

080035a0 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	46de      	mov	lr, fp
 80035a4:	4657      	mov	r7, sl
 80035a6:	464e      	mov	r6, r9
 80035a8:	4645      	mov	r5, r8
 80035aa:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 80035ac:	2032      	movs	r0, #50	; 0x32
 80035ae:	f010 fb05 	bl	8013bbc <malloc>
 80035b2:	4680      	mov	r8, r0
	if(snipBuffer == NULL)
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d06c      	beq.n	8003692 <LoadROsnippets+0xf2>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 80035b8:	4b38      	ldr	r3, [pc, #224]	; (800369c <LoadROsnippets+0xfc>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2bfe      	cmp	r3, #254	; 0xfe
 80035be:	d16a      	bne.n	8003696 <LoadROsnippets+0xf6>
 80035c0:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <LoadROsnippets+0x100>)
 80035c2:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 80035c4:	4c35      	ldr	r4, [pc, #212]	; (800369c <LoadROsnippets+0xfc>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80035c6:	2301      	movs	r3, #1
 80035c8:	4443      	add	r3, r8
 80035ca:	469a      	mov	sl, r3
 80035cc:	e026      	b.n	800361c <LoadROsnippets+0x7c>
		memset(snipBuffer,0,sizeof(snippet_t));
		i =0;
 80035ce:	2500      	movs	r5, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
			snipBuffer[i] =*(uint8_t* )currentAdd;
			++currentAdd;
			++i;
		}
		if(snipBuffer[i - 1] != 0)
 80035d0:	4643      	mov	r3, r8
 80035d2:	195b      	adds	r3, r3, r5
 80035d4:	3b01      	subs	r3, #1
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <LoadROsnippets+0x40>
			++i;	// String termination char was not recorded, then add one
 80035dc:	3501      	adds	r5, #1
 80035de:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 80035e0:	0028      	movs	r0, r5
 80035e2:	f010 faeb 	bl	8013bbc <malloc>
 80035e6:	465b      	mov	r3, fp
 80035e8:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 80035ea:	2800      	cmp	r0, #0
 80035ec:	d03d      	beq.n	800366a <LoadROsnippets+0xca>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 80035ee:	002a      	movs	r2, r5
 80035f0:	4641      	mov	r1, r8
 80035f2:	f010 fb05 	bl	8013c00 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80035f6:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <LoadROsnippets+0x104>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	3301      	adds	r3, #1
 80035fc:	4a29      	ldr	r2, [pc, #164]	; (80036a4 <LoadROsnippets+0x104>)
 80035fe:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003600:	002a      	movs	r2, r5
 8003602:	2100      	movs	r1, #0
 8003604:	4640      	mov	r0, r8
 8003606:	f010 fb04 	bl	8013c12 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 800360a:	783b      	ldrb	r3, [r7, #0]
 800360c:	2bfe      	cmp	r3, #254	; 0xfe
 800360e:	d136      	bne.n	800367e <LoadROsnippets+0xde>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 8003610:	3bea      	subs	r3, #234	; 0xea
 8003612:	469c      	mov	ip, r3
 8003614:	44e1      	add	r9, ip
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <LoadROsnippets+0x108>)
 8003618:	4599      	cmp	r9, r3
 800361a:	d030      	beq.n	800367e <LoadROsnippets+0xde>
		for(i =0; i < sizeof(snippet_t); i++)
 800361c:	0021      	movs	r1, r4
 800361e:	3114      	adds	r1, #20
BOS_Status LoadROsnippets(void){
 8003620:	0023      	movs	r3, r4
 8003622:	4642      	mov	r2, r8
 8003624:	1b16      	subs	r6, r2, r4
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	54f2      	strb	r2, [r6, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 800362a:	3301      	adds	r3, #1
 800362c:	428b      	cmp	r3, r1
 800362e:	d1fa      	bne.n	8003626 <LoadROsnippets+0x86>
 8003630:	3414      	adds	r4, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003632:	46cb      	mov	fp, r9
 8003634:	2214      	movs	r2, #20
 8003636:	4651      	mov	r1, sl
 8003638:	4648      	mov	r0, r9
 800363a:	f010 fae1 	bl	8013c00 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800363e:	2214      	movs	r2, #20
 8003640:	2100      	movs	r1, #0
 8003642:	4640      	mov	r0, r8
 8003644:	f010 fae5 	bl	8013c12 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003648:	0027      	movs	r7, r4
 800364a:	7823      	ldrb	r3, [r4, #0]
 800364c:	2bfd      	cmp	r3, #253	; 0xfd
 800364e:	d8be      	bhi.n	80035ce <LoadROsnippets+0x2e>
		i =0;
 8003650:	2500      	movs	r5, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003652:	3e14      	subs	r6, #20
 8003654:	5533      	strb	r3, [r6, r4]
			++currentAdd;
 8003656:	3401      	adds	r4, #1
			++i;
 8003658:	3501      	adds	r5, #1
 800365a:	b2ed      	uxtb	r5, r5
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800365c:	0027      	movs	r7, r4
 800365e:	7823      	ldrb	r3, [r4, #0]
 8003660:	2bfd      	cmp	r3, #253	; 0xfd
 8003662:	d8b5      	bhi.n	80035d0 <LoadROsnippets+0x30>
 8003664:	2d32      	cmp	r5, #50	; 0x32
 8003666:	d1f5      	bne.n	8003654 <LoadROsnippets+0xb4>
 8003668:	e7b2      	b.n	80035d0 <LoadROsnippets+0x30>
			memset(&snippets[s],0,sizeof(snippet_t));
 800366a:	2214      	movs	r2, #20
 800366c:	2100      	movs	r1, #0
 800366e:	4658      	mov	r0, fp
 8003670:	f010 facf 	bl	8013c12 <memset>
			free(snipBuffer);
 8003674:	4640      	mov	r0, r8
 8003676:	f010 faab 	bl	8013bd0 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 800367a:	200e      	movs	r0, #14
 800367c:	e003      	b.n	8003686 <LoadROsnippets+0xe6>
			break;
	}
	
	free(snipBuffer);
 800367e:	4640      	mov	r0, r8
 8003680:	f010 faa6 	bl	8013bd0 <free>
	return BOS_OK;
 8003684:	2000      	movs	r0, #0
}
 8003686:	bcf0      	pop	{r4, r5, r6, r7}
 8003688:	46bb      	mov	fp, r7
 800368a:	46b2      	mov	sl, r6
 800368c:	46a9      	mov	r9, r5
 800368e:	46a0      	mov	r8, r4
 8003690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003692:	20fb      	movs	r0, #251	; 0xfb
 8003694:	e7f7      	b.n	8003686 <LoadROsnippets+0xe6>
		return BOS_ERROR;
 8003696:	20ff      	movs	r0, #255	; 0xff
 8003698:	e7f5      	b.n	8003686 <LoadROsnippets+0xe6>
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	0801dc00 	.word	0x0801dc00
 80036a0:	20006294 	.word	0x20006294
 80036a4:	2000099f 	.word	0x2000099f
 80036a8:	200062f8 	.word	0x200062f8

080036ac <LoadEEvars>:
void LoadEEvars(void){
 80036ac:	b510      	push	{r4, lr}
	LoadROtopology();
 80036ae:	f7ff fc8b 	bl	8002fc8 <LoadROtopology>
	LoadEEportsDir();
 80036b2:	f7ff fcdd 	bl	8003070 <LoadEEportsDir>
	LoadEEalias();
 80036b6:	f7ff fcfd 	bl	80030b4 <LoadEEalias>
	LoadEEgroup();
 80036ba:	f7ff fd41 	bl	8003140 <LoadEEgroup>
	LoadEEstreams();
 80036be:	f7ff fd95 	bl	80031ec <LoadEEstreams>
	LoadEEparams();
 80036c2:	f7ff fe39 	bl	8003338 <LoadEEparams>
	LoadEEbuttons();
 80036c6:	f7ff fef3 	bl	80034b0 <LoadEEbuttons>
	LoadROsnippets();
 80036ca:	f7ff ff69 	bl	80035a0 <LoadROsnippets>
}
 80036ce:	bd10      	pop	{r4, pc}

080036d0 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <SaveEEportsDir+0x3c>)
 80036d4:	781d      	ldrb	r5, [r3, #0]
 80036d6:	2d00      	cmp	r5, #0
 80036d8:	d016      	beq.n	8003708 <SaveEEportsDir+0x38>
 80036da:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80036dc:	2500      	movs	r5, #0
		if(arrayPortsDir[i - 1])
 80036de:	4f0c      	ldr	r7, [pc, #48]	; (8003710 <SaveEEportsDir+0x40>)
	for(uint8_t i =1; i <= N; i++){
 80036e0:	001e      	movs	r6, r3
 80036e2:	e008      	b.n	80036f6 <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036e4:	1c60      	adds	r0, r4, #1
 80036e6:	f008 feed 	bl	800c4c4 <EE_WriteVariable>
 80036ea:	e009      	b.n	8003700 <SaveEEportsDir+0x30>
	for(uint8_t i =1; i <= N; i++){
 80036ec:	3401      	adds	r4, #1
 80036ee:	b2e4      	uxtb	r4, r4
 80036f0:	7833      	ldrb	r3, [r6, #0]
 80036f2:	42a3      	cmp	r3, r4
 80036f4:	d308      	bcc.n	8003708 <SaveEEportsDir+0x38>
		if(arrayPortsDir[i - 1])
 80036f6:	1e63      	subs	r3, r4, #1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	5bd9      	ldrh	r1, [r3, r7]
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d1f1      	bne.n	80036e4 <SaveEEportsDir+0x14>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003700:	2c19      	cmp	r4, #25
 8003702:	d9f3      	bls.n	80036ec <SaveEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8003704:	250a      	movs	r5, #10
 8003706:	e7f1      	b.n	80036ec <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 8003708:	0028      	movs	r0, r5
 800370a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800370c:	20000030 	.word	0x20000030
 8003710:	20006740 	.word	0x20006740

08003714 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003716:	46de      	mov	lr, fp
 8003718:	464f      	mov	r7, r9
 800371a:	4646      	mov	r6, r8
 800371c:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800371e:	2500      	movs	r5, #0
	uint16_t add =0, temp =0;
 8003720:	2300      	movs	r3, #0
 8003722:	4699      	mov	r9, r3
	    {
		if(moduleAlias[i][0]){
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <SaveEEalias+0x7c>)
 8003726:	469b      	mov	fp, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003728:	4f1a      	ldr	r7, [pc, #104]	; (8003794 <SaveEEalias+0x80>)
 800372a:	e004      	b.n	8003736 <SaveEEalias+0x22>
 800372c:	3501      	adds	r5, #1
 800372e:	b2ed      	uxtb	r5, r5
 8003730:	783b      	ldrb	r3, [r7, #0]
 8003732:	42ab      	cmp	r3, r5
 8003734:	d325      	bcc.n	8003782 <SaveEEalias+0x6e>
		if(moduleAlias[i][0]){
 8003736:	00ab      	lsls	r3, r5, #2
 8003738:	195b      	adds	r3, r3, r5
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	465a      	mov	r2, fp
 800373e:	5c9b      	ldrb	r3, [r3, r2]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0f3      	beq.n	800372c <SaveEEalias+0x18>
 8003744:	00ae      	lsls	r6, r5, #2
 8003746:	1976      	adds	r6, r6, r5
 8003748:	0076      	lsls	r6, r6, #1
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <SaveEEalias+0x7c>)
 800374c:	469c      	mov	ip, r3
 800374e:	4466      	add	r6, ip
 8003750:	464c      	mov	r4, r9
 8003752:	341c      	adds	r4, #28
 8003754:	b2a4      	uxth	r4, r4
 8003756:	464b      	mov	r3, r9
 8003758:	3321      	adds	r3, #33	; 0x21
 800375a:	b29b      	uxth	r3, r3
 800375c:	4698      	mov	r8, r3
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 800375e:	7833      	ldrb	r3, [r6, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	7871      	ldrb	r1, [r6, #1]
 8003764:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 8003766:	b289      	uxth	r1, r1
 8003768:	0020      	movs	r0, r4
 800376a:	f008 feab 	bl	800c4c4 <EE_WriteVariable>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800376e:	3602      	adds	r6, #2
 8003770:	3401      	adds	r4, #1
 8003772:	b2a4      	uxth	r4, r4
 8003774:	45a0      	cmp	r8, r4
 8003776:	d1f2      	bne.n	800375e <SaveEEalias+0x4a>
 8003778:	464b      	mov	r3, r9
 800377a:	3305      	adds	r3, #5
 800377c:	b29b      	uxth	r3, r3
 800377e:	4699      	mov	r9, r3
 8003780:	e7d4      	b.n	800372c <SaveEEalias+0x18>
			}
		}
	}
	
	return result;
}
 8003782:	2000      	movs	r0, #0
 8003784:	bce0      	pop	{r5, r6, r7}
 8003786:	46bb      	mov	fp, r7
 8003788:	46b1      	mov	r9, r6
 800378a:	46a8      	mov	r8, r5
 800378c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20000700 	.word	0x20000700
 8003794:	20000030 	.word	0x20000030

08003798 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	46de      	mov	lr, fp
 800379c:	4657      	mov	r7, sl
 800379e:	464e      	mov	r6, r9
 80037a0:	4645      	mov	r5, r8
 80037a2:	b5e0      	push	{r5, r6, r7, lr}
 80037a4:	000f      	movs	r7, r1
 80037a6:	0016      	movs	r6, r2
 80037a8:	001c      	movs	r4, r3
 80037aa:	ab0a      	add	r3, sp, #40	; 0x28
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	469b      	mov	fp, r3
 80037b0:	ab0b      	add	r3, sp, #44	; 0x2c
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	469a      	mov	sl, r3
 80037b6:	ab0c      	add	r3, sp, #48	; 0x30
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	4699      	mov	r9, r3
 80037bc:	ab0d      	add	r3, sp, #52	; 0x34
 80037be:	781d      	ldrb	r5, [r3, #0]
 80037c0:	ab0e      	add	r3, sp, #56	; 0x38
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 80037c6:	0001      	movs	r1, r0
 80037c8:	20e4      	movs	r0, #228	; 0xe4
 80037ca:	f008 fe7b 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 80037ce:	0a39      	lsrs	r1, r7, #8
 80037d0:	b289      	uxth	r1, r1
 80037d2:	20e5      	movs	r0, #229	; 0xe5
 80037d4:	f008 fe76 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80037d8:	b2b9      	uxth	r1, r7
 80037da:	20e6      	movs	r0, #230	; 0xe6
 80037dc:	f008 fe72 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80037e0:	0a31      	lsrs	r1, r6, #8
 80037e2:	b289      	uxth	r1, r1
 80037e4:	20e7      	movs	r0, #231	; 0xe7
 80037e6:	f008 fe6d 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80037ea:	b2b1      	uxth	r1, r6
 80037ec:	20e8      	movs	r0, #232	; 0xe8
 80037ee:	f008 fe69 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80037f2:	0224      	lsls	r4, r4, #8
 80037f4:	445c      	add	r4, fp
 80037f6:	b2a1      	uxth	r1, r4
 80037f8:	20e9      	movs	r0, #233	; 0xe9
 80037fa:	f008 fe63 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80037fe:	4653      	mov	r3, sl
 8003800:	0219      	lsls	r1, r3, #8
 8003802:	4449      	add	r1, r9
 8003804:	b289      	uxth	r1, r1
 8003806:	20ea      	movs	r0, #234	; 0xea
 8003808:	f008 fe5c 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800380c:	022d      	lsls	r5, r5, #8
 800380e:	4445      	add	r5, r8
 8003810:	b2a9      	uxth	r1, r5
 8003812:	20eb      	movs	r0, #235	; 0xeb
 8003814:	f008 fe56 	bl	800c4c4 <EE_WriteVariable>
	
	return result;
}
 8003818:	2000      	movs	r0, #0
 800381a:	bcf0      	pop	{r4, r5, r6, r7}
 800381c:	46bb      	mov	fp, r7
 800381e:	46b2      	mov	sl, r6
 8003820:	46a9      	mov	r9, r5
 8003822:	46a0      	mov	r8, r4
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003828 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003828:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 800382a:	4c1f      	ldr	r4, [pc, #124]	; (80038a8 <SaveEEparams+0x80>)
 800382c:	7863      	ldrb	r3, [r4, #1]
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	7821      	ldrb	r1, [r4, #0]
 8003832:	4319      	orrs	r1, r3
 8003834:	208a      	movs	r0, #138	; 0x8a
 8003836:	0040      	lsls	r0, r0, #1
 8003838:	f008 fe44 	bl	800c4c4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 800383c:	7921      	ldrb	r1, [r4, #4]
 800383e:	03c9      	lsls	r1, r1, #15
 8003840:	88e3      	ldrh	r3, [r4, #6]
 8003842:	4319      	orrs	r1, r3
 8003844:	b289      	uxth	r1, r1
 8003846:	208e      	movs	r0, #142	; 0x8e
 8003848:	0040      	lsls	r0, r0, #1
 800384a:	f008 fe3b 	bl	800c4c4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 800384e:	4c17      	ldr	r4, [pc, #92]	; (80038ac <SaveEEparams+0x84>)
 8003850:	8821      	ldrh	r1, [r4, #0]
 8003852:	2016      	movs	r0, #22
 8003854:	30ff      	adds	r0, #255	; 0xff
 8003856:	f008 fe35 	bl	800c4c4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800385a:	8861      	ldrh	r1, [r4, #2]
 800385c:	208b      	movs	r0, #139	; 0x8b
 800385e:	0040      	lsls	r0, r0, #1
 8003860:	f008 fe30 	bl	800c4c4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003864:	7963      	ldrb	r3, [r4, #5]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	7b21      	ldrb	r1, [r4, #12]
 800386a:	4319      	orrs	r1, r3
 800386c:	2018      	movs	r0, #24
 800386e:	30ff      	adds	r0, #255	; 0xff
 8003870:	f008 fe28 	bl	800c4c4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003874:	8921      	ldrh	r1, [r4, #8]
 8003876:	208c      	movs	r0, #140	; 0x8c
 8003878:	0040      	lsls	r0, r0, #1
 800387a:	f008 fe23 	bl	800c4c4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800387e:	8961      	ldrh	r1, [r4, #10]
 8003880:	201a      	movs	r0, #26
 8003882:	30ff      	adds	r0, #255	; 0xff
 8003884:	f008 fe1e 	bl	800c4c4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003888:	7b63      	ldrb	r3, [r4, #13]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	7921      	ldrb	r1, [r4, #4]
 800388e:	4319      	orrs	r1, r3
 8003890:	208d      	movs	r0, #141	; 0x8d
 8003892:	0040      	lsls	r0, r0, #1
 8003894:	f008 fe16 	bl	800c4c4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003898:	7ea1      	ldrb	r1, [r4, #26]
 800389a:	201c      	movs	r0, #28
 800389c:	30ff      	adds	r0, #255	; 0xff
 800389e:	f008 fe11 	bl	800c4c4 <EE_WriteVariable>
	
	return result;
}
 80038a2:	2000      	movs	r0, #0
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	200061f8 	.word	0x200061f8
 80038ac:	20006278 	.word	0x20006278

080038b0 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80038b2:	2234      	movs	r2, #52	; 0x34
 80038b4:	2100      	movs	r1, #0
 80038b6:	4810      	ldr	r0, [pc, #64]	; (80038f8 <ClearEEportsDir+0x48>)
 80038b8:	f010 f9ab 	bl	8013c12 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <ClearEEportsDir+0x4c>)
 80038be:	781d      	ldrb	r5, [r3, #0]
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	d016      	beq.n	80038f2 <ClearEEportsDir+0x42>
 80038c4:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80038c6:	2500      	movs	r5, #0
		if(arrayPortsDir[i - 1])
 80038c8:	4f0b      	ldr	r7, [pc, #44]	; (80038f8 <ClearEEportsDir+0x48>)
	for(uint8_t i =1; i <= N; i++){
 80038ca:	001e      	movs	r6, r3
 80038cc:	e008      	b.n	80038e0 <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80038ce:	1c60      	adds	r0, r4, #1
 80038d0:	f008 fdf8 	bl	800c4c4 <EE_WriteVariable>
 80038d4:	e009      	b.n	80038ea <ClearEEportsDir+0x3a>
	for(uint8_t i =1; i <= N; i++){
 80038d6:	3401      	adds	r4, #1
 80038d8:	b2e4      	uxtb	r4, r4
 80038da:	7833      	ldrb	r3, [r6, #0]
 80038dc:	42a3      	cmp	r3, r4
 80038de:	d308      	bcc.n	80038f2 <ClearEEportsDir+0x42>
		if(arrayPortsDir[i - 1])
 80038e0:	1e63      	subs	r3, r4, #1
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	5bd9      	ldrh	r1, [r3, r7]
 80038e6:	2900      	cmp	r1, #0
 80038e8:	d1f1      	bne.n	80038ce <ClearEEportsDir+0x1e>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80038ea:	2c19      	cmp	r4, #25
 80038ec:	d9f3      	bls.n	80038d6 <ClearEEportsDir+0x26>
			result =BOS_ERR_EEPROM;
 80038ee:	250a      	movs	r5, #10
 80038f0:	e7f1      	b.n	80038d6 <ClearEEportsDir+0x26>
	}
	
	return result;
}
 80038f2:	0028      	movs	r0, r5
 80038f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20006740 	.word	0x20006740
 80038fc:	20000030 	.word	0x20000030

08003900 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 8003900:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <EE_FormatForFactoryReset+0x20>)
 8003904:	4a07      	ldr	r2, [pc, #28]	; (8003924 <EE_FormatForFactoryReset+0x24>)
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d100      	bne.n	800390e <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
		}
	}
	
}
 800390c:	bd10      	pop	{r4, pc}
		if(EE_Format() == HAL_OK){
 800390e:	f008 fe89 	bl	800c624 <EE_Format>
 8003912:	2800      	cmp	r0, #0
 8003914:	d1fa      	bne.n	800390c <EE_FormatForFactoryReset+0xc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <EE_FormatForFactoryReset+0x24>)
 8003918:	4a01      	ldr	r2, [pc, #4]	; (8003920 <EE_FormatForFactoryReset+0x20>)
 800391a:	601a      	str	r2, [r3, #0]
}
 800391c:	e7f6      	b.n	800390c <EE_FormatForFactoryReset+0xc>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	beefdead 	.word	0xbeefdead
 8003924:	20007ff0 	.word	0x20007ff0

08003928 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003928:	b530      	push	{r4, r5, lr}
 800392a:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 800392c:	ab04      	add	r3, sp, #16
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	ab07      	add	r3, sp, #28
 8003932:	2212      	movs	r2, #18
 8003934:	446a      	add	r2, sp
 8003936:	a908      	add	r1, sp, #32
 8003938:	2001      	movs	r0, #1
 800393a:	f009 f905 	bl	800cb48 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800393e:	ac03      	add	r4, sp, #12
 8003940:	9400      	str	r4, [sp, #0]
 8003942:	ab05      	add	r3, sp, #20
 8003944:	220e      	movs	r2, #14
 8003946:	446a      	add	r2, sp
 8003948:	a906      	add	r1, sp, #24
 800394a:	2002      	movs	r0, #2
 800394c:	f009 f8fc 	bl	800cb48 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003950:	2301      	movs	r3, #1
 8003952:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2500      	movs	r5, #0
 8003956:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003958:	466b      	mov	r3, sp
 800395a:	8a5b      	ldrh	r3, [r3, #18]
 800395c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800395e:	a909      	add	r1, sp, #36	; 0x24
 8003960:	9808      	ldr	r0, [sp, #32]
 8003962:	f00e f9eb 	bl	8011d3c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003966:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003968:	2302      	movs	r3, #2
 800396a:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 800396c:	8823      	ldrh	r3, [r4, #0]
 800396e:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 8003970:	a909      	add	r1, sp, #36	; 0x24
 8003972:	9805      	ldr	r0, [sp, #20]
 8003974:	f00e f9e2 	bl	8011d3c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003978:	466b      	mov	r3, sp
 800397a:	8a59      	ldrh	r1, [r3, #18]
 800397c:	2200      	movs	r2, #0
 800397e:	9808      	ldr	r0, [sp, #32]
 8003980:	f00e fb60 	bl	8012044 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 8003984:	2005      	movs	r0, #5
 8003986:	f00a fc6f 	bl	800e268 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800398a:	8821      	ldrh	r1, [r4, #0]
 800398c:	9805      	ldr	r0, [sp, #20]
 800398e:	f00e fb53 	bl	8012038 <HAL_GPIO_ReadPin>
 8003992:	0003      	movs	r3, r0
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003994:	2000      	movs	r0, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <IsLowerCLIbaud+0x76>
}
 800399a:	b00f      	add	sp, #60	; 0x3c
 800399c:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800399e:	3312      	adds	r3, #18
 80039a0:	446b      	add	r3, sp
 80039a2:	8819      	ldrh	r1, [r3, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	9808      	ldr	r0, [sp, #32]
 80039a8:	f00e fb4c 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80039ac:	2005      	movs	r0, #5
 80039ae:	f00a fc5b 	bl	800e268 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80039b2:	ab03      	add	r3, sp, #12
 80039b4:	8819      	ldrh	r1, [r3, #0]
 80039b6:	9805      	ldr	r0, [sp, #20]
 80039b8:	f00e fb3e 	bl	8012038 <HAL_GPIO_ReadPin>
 80039bc:	3801      	subs	r0, #1
 80039be:	4243      	negs	r3, r0
 80039c0:	4158      	adcs	r0, r3
			return 1;
 80039c2:	b2c0      	uxtb	r0, r0
 80039c4:	e7e9      	b.n	800399a <IsLowerCLIbaud+0x72>
	...

080039c8 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80039c8:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80039ca:	4b04      	ldr	r3, [pc, #16]	; (80039dc <IsModuleParameter+0x14>)
 80039cc:	6899      	ldr	r1, [r3, #8]
 80039ce:	f7fc fb99 	bl	8000104 <strcmp>
 80039d2:	4243      	negs	r3, r0
 80039d4:	4158      	adcs	r0, r3
 80039d6:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000098 	.word	0x20000098

080039e0 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80039e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e2:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 80039e4:	491b      	ldr	r1, [pc, #108]	; (8003a54 <IsMathOperator+0x74>)
 80039e6:	f7fc fb8d 	bl	8000104 <strcmp>
 80039ea:	0006      	movs	r6, r0
 80039ec:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80039ee:	4c1a      	ldr	r4, [pc, #104]	; (8003a58 <IsMathOperator+0x78>)
		if(!strcmp(string,"="))
 80039f0:	2e00      	cmp	r6, #0
 80039f2:	d023      	beq.n	8003a3c <IsMathOperator+0x5c>
		else if(!strcmp(string,">"))
 80039f4:	0021      	movs	r1, r4
 80039f6:	0028      	movs	r0, r5
 80039f8:	f7fc fb84 	bl	8000104 <strcmp>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	d01f      	beq.n	8003a40 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003a00:	4916      	ldr	r1, [pc, #88]	; (8003a5c <IsMathOperator+0x7c>)
 8003a02:	0028      	movs	r0, r5
 8003a04:	f7fc fb7e 	bl	8000104 <strcmp>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d01b      	beq.n	8003a44 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003a0c:	4914      	ldr	r1, [pc, #80]	; (8003a60 <IsMathOperator+0x80>)
 8003a0e:	0028      	movs	r0, r5
 8003a10:	f7fc fb78 	bl	8000104 <strcmp>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d017      	beq.n	8003a48 <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003a18:	4912      	ldr	r1, [pc, #72]	; (8003a64 <IsMathOperator+0x84>)
 8003a1a:	0028      	movs	r0, r5
 8003a1c:	f7fc fb72 	bl	8000104 <strcmp>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d013      	beq.n	8003a4c <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 8003a24:	4910      	ldr	r1, [pc, #64]	; (8003a68 <IsMathOperator+0x88>)
 8003a26:	0028      	movs	r0, r5
 8003a28:	f7fc fb6c 	bl	8000104 <strcmp>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	d00f      	beq.n	8003a50 <IsMathOperator+0x70>
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003a30:	3f01      	subs	r7, #1
 8003a32:	b2ff      	uxtb	r7, r7
 8003a34:	2f00      	cmp	r7, #0
 8003a36:	d1db      	bne.n	80039f0 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
	}
	return 0;
}
 8003a38:	0038      	movs	r0, r7
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003a3c:	2701      	movs	r7, #1
 8003a3e:	e7fb      	b.n	8003a38 <IsMathOperator+0x58>
			return MATH_GREATER;
 8003a40:	2702      	movs	r7, #2
 8003a42:	e7f9      	b.n	8003a38 <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003a44:	2703      	movs	r7, #3
 8003a46:	e7f7      	b.n	8003a38 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003a48:	2704      	movs	r7, #4
 8003a4a:	e7f5      	b.n	8003a38 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003a4c:	2705      	movs	r7, #5
 8003a4e:	e7f3      	b.n	8003a38 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003a50:	2706      	movs	r7, #6
 8003a52:	e7f1      	b.n	8003a38 <IsMathOperator+0x58>
 8003a54:	08018590 	.word	0x08018590
 8003a58:	08018594 	.word	0x08018594
 8003a5c:	08018598 	.word	0x08018598
 8003a60:	0801859c 	.word	0x0801859c
 8003a64:	080185a0 	.word	0x080185a0
 8003a68:	080185a4 	.word	0x080185a4

08003a6c <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003a6c:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 8003a6e:	f00a fab3 	bl	800dfd8 <RTC_Init>
	GetTimeDate();
 8003a72:	f00a fb51 	bl	800e118 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 8003a76:	f008 fe39 	bl	800c6ec <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003a7a:	f009 f82f 	bl	800cadc <GPIO_Init>
	DMA_Init();
 8003a7e:	f007 fbdb 	bl	800b238 <DMA_Init>
	TIM_USEC_Init();
 8003a82:	f00a fb7d 	bl	800e180 <TIM_USEC_Init>
	CRC_Init();
 8003a86:	f008 fc45 	bl	800c314 <CRC_Init>
	TIM_MSEC_Init();
 8003a8a:	f00a fbab 	bl	800e1e4 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003a8e:	f009 f897 	bl	800cbc0 <IsFactoryReset>
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d13c      	bne.n	8003b10 <BOS_Init+0xa4>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 8003a96:	f7ff ff47 	bl	8003928 <IsLowerCLIbaud>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d043      	beq.n	8003b26 <BOS_Init+0xba>
		CLI_LOW_Baudrate_Flag =1;
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <BOS_Init+0x10c>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003aa4:	2032      	movs	r0, #50	; 0x32
 8003aa6:	f00a fbdf 	bl	800e268 <StartMilliDelay>
		Module_Peripheral_Init();
 8003aaa:	f006 fe03 	bl	800a6b4 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003aae:	4c33      	ldr	r4, [pc, #204]	; (8003b7c <BOS_Init+0x110>)
 8003ab0:	21e1      	movs	r1, #225	; 0xe1
 8003ab2:	0249      	lsls	r1, r1, #9
 8003ab4:	60a1      	str	r1, [r4, #8]
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
			UpdateBaudrate(port,BOS.clibaudrate);
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f00a fd90 	bl	800e5dc <UpdateBaudrate>
 8003abc:	68a1      	ldr	r1, [r4, #8]
 8003abe:	2002      	movs	r0, #2
 8003ac0:	f00a fd8c 	bl	800e5dc <UpdateBaudrate>
 8003ac4:	68a1      	ldr	r1, [r4, #8]
 8003ac6:	2003      	movs	r0, #3
 8003ac8:	f00a fd88 	bl	800e5dc <UpdateBaudrate>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003acc:	f7ff fdee 	bl	80036ac <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003ad0:	f00a fe18 	bl	800e704 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003ad4:	f008 f84a 	bl	800bb6c <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 8003ad8:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <BOS_Init+0x114>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d128      	bne.n	8003b32 <BOS_Init+0xc6>
	{
		IND_ON();
 8003ae0:	2580      	movs	r5, #128	; 0x80
 8003ae2:	012d      	lsls	r5, r5, #4
 8003ae4:	2490      	movs	r4, #144	; 0x90
 8003ae6:	05e4      	lsls	r4, r4, #23
 8003ae8:	2201      	movs	r2, #1
 8003aea:	0029      	movs	r1, r5
 8003aec:	0020      	movs	r0, r4
 8003aee:	f00e faa9 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003af2:	20fa      	movs	r0, #250	; 0xfa
 8003af4:	0040      	lsls	r0, r0, #1
 8003af6:	f00a fbb7 	bl	800e268 <StartMilliDelay>
 8003afa:	2200      	movs	r2, #0
 8003afc:	0029      	movs	r1, r5
 8003afe:	0020      	movs	r0, r4
 8003b00:	f00e faa0 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
		IND_OFF();
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003b04:	f003 fd94 	bl	8007630 <ResetUartORE>
	
	BOS_initialized =1;
 8003b08:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <BOS_Init+0x118>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
}
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
		EE_FormatForFactoryReset();
 8003b10:	f7ff fef6 	bl	8003900 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b14:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b18:	4b1b      	ldr	r3, [pc, #108]	; (8003b88 <BOS_Init+0x11c>)
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <BOS_Init+0x120>)
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	e7fd      	b.n	8003b22 <BOS_Init+0xb6>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003b26:	2032      	movs	r0, #50	; 0x32
 8003b28:	f00a fb9e 	bl	800e268 <StartMilliDelay>
		Module_Peripheral_Init();
 8003b2c:	f006 fdc2 	bl	800a6b4 <Module_Peripheral_Init>
 8003b30:	e7cc      	b.n	8003acc <BOS_Init+0x60>
		IND_ON();
 8003b32:	2580      	movs	r5, #128	; 0x80
 8003b34:	012d      	lsls	r5, r5, #4
 8003b36:	2490      	movs	r4, #144	; 0x90
 8003b38:	05e4      	lsls	r4, r4, #23
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	0029      	movs	r1, r5
 8003b3e:	0020      	movs	r0, r4
 8003b40:	f00e fa80 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003b44:	20fa      	movs	r0, #250	; 0xfa
 8003b46:	0040      	lsls	r0, r0, #1
 8003b48:	f00a fb8e 	bl	800e268 <StartMilliDelay>
		IND_OFF();
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	0029      	movs	r1, r5
 8003b50:	0020      	movs	r0, r4
 8003b52:	f00e fa77 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003b56:	2064      	movs	r0, #100	; 0x64
 8003b58:	f00a fb86 	bl	800e268 <StartMilliDelay>
		IND_ON();
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	0029      	movs	r1, r5
 8003b60:	0020      	movs	r0, r4
 8003b62:	f00e fa6f 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003b66:	2064      	movs	r0, #100	; 0x64
 8003b68:	f00a fb7e 	bl	800e268 <StartMilliDelay>
		IND_OFF();
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0029      	movs	r1, r5
 8003b70:	0020      	movs	r0, r4
 8003b72:	f00e fa67 	bl	8012044 <HAL_GPIO_WritePin>
 8003b76:	e7c5      	b.n	8003b04 <BOS_Init+0x98>
 8003b78:	200002b7 	.word	0x200002b7
 8003b7c:	20006278 	.word	0x20006278
 8003b80:	2000080e 	.word	0x2000080e
 8003b84:	200002b6 	.word	0x200002b6
 8003b88:	e000ed00 	.word	0xe000ed00
 8003b8c:	05fa0004 	.word	0x05fa0004

08003b90 <Module_Init>:
void Module_Init(void){
 8003b90:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003b92:	f00c fdbb 	bl	801070c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003b96:	f006 fb81 	bl	800a29c <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003b9a:	f7ff ff67 	bl	8003a6c <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003b9e:	f003 fd63 	bl	8007668 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003ba2:	f00a fe4d 	bl	800e840 <osKernelStart>
}
 8003ba6:	bd10      	pop	{r4, pc}

08003ba8 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003baa:	b083      	sub	sp, #12
 8003bac:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003bae:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003bb0:	4d0e      	ldr	r5, [pc, #56]	; (8003bec <ExploreNeighbors+0x44>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003bb2:	2703      	movs	r7, #3
 8003bb4:	e003      	b.n	8003bbe <ExploreNeighbors+0x16>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003bb6:	3401      	adds	r4, #1
 8003bb8:	b2e4      	uxtb	r4, r4
 8003bba:	2c04      	cmp	r4, #4
 8003bbc:	d012      	beq.n	8003be4 <ExploreNeighbors+0x3c>
		if(port != ignore){
 8003bbe:	42a6      	cmp	r6, r4
 8003bc0:	d0f9      	beq.n	8003bb6 <ExploreNeighbors+0xe>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <ExploreNeighbors+0x48>)
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	0a1a      	lsrs	r2, r3, #8
 8003bc8:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003bca:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 8003bcc:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003bce:	9700      	str	r7, [sp, #0]
 8003bd0:	230a      	movs	r3, #10
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	0020      	movs	r0, r4
 8003bd8:	f004 f950 	bl	8007e7c <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003bdc:	200a      	movs	r0, #10
 8003bde:	f00a fe34 	bl	800e84a <osDelay>
 8003be2:	e7e8      	b.n	8003bb6 <ExploreNeighbors+0xe>
		}
	}
	
	return result;
}
 8003be4:	2000      	movs	r0, #0
 8003be6:	b003      	add	sp, #12
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	200006d0 	.word	0x200006d0
 8003bf0:	20000064 	.word	0x20000064

08003bf4 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	46de      	mov	lr, fp
 8003bf8:	4657      	mov	r7, sl
 8003bfa:	464e      	mov	r6, r9
 8003bfc:	4645      	mov	r5, r8
 8003bfe:	b5e0      	push	{r5, r6, r7, lr}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003c04:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <FindBroadcastRoutes+0x130>)
 8003c06:	781d      	ldrb	r5, [r3, #0]
 8003c08:	1deb      	adds	r3, r5, #7
 8003c0a:	08db      	lsrs	r3, r3, #3
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	466a      	mov	r2, sp
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	469d      	mov	sp, r3
 8003c14:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	d009      	beq.n	8003c2e <FindBroadcastRoutes+0x3a>
 8003c1a:	4a43      	ldr	r2, [pc, #268]	; (8003d28 <FindBroadcastRoutes+0x134>)
 8003c1c:	2300      	movs	r3, #0
		modules[m] =0;
 8003c1e:	2100      	movs	r1, #0
 8003c20:	54e1      	strb	r1, [r4, r3]
		bcastRoutes[m] =0;
 8003c22:	8011      	strh	r1, [r2, #0]
	for(m =0; m < N; m++){
 8003c24:	3301      	adds	r3, #1
 8003c26:	3202      	adds	r2, #2
 8003c28:	b2de      	uxtb	r6, r3
 8003c2a:	42b5      	cmp	r5, r6
 8003c2c:	d8f8      	bhi.n	8003c20 <FindBroadcastRoutes+0x2c>
	}
	modules[src - 1] =++level;					// Tag the source
 8003c2e:	3801      	subs	r0, #1
 8003c30:	2301      	movs	r3, #1
 8003c32:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 8003c34:	2216      	movs	r2, #22
 8003c36:	4342      	muls	r2, r0
 8003c38:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <FindBroadcastRoutes+0x138>)
 8003c3a:	18d2      	adds	r2, r2, r3
	modules[src - 1] =++level;					// Tag the source
 8003c3c:	2100      	movs	r1, #0
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c3e:	4e3a      	ldr	r6, [pc, #232]	; (8003d28 <FindBroadcastRoutes+0x134>)
 8003c40:	0040      	lsls	r0, r0, #1
 8003c42:	2301      	movs	r3, #1
 8003c44:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c46:	3301      	adds	r3, #1
 8003c48:	469c      	mov	ip, r3
 8003c4a:	607d      	str	r5, [r7, #4]
 8003c4c:	46a3      	mov	fp, r4
 8003c4e:	e003      	b.n	8003c58 <FindBroadcastRoutes+0x64>
	for(p =1; p <= 6; p++){
 8003c50:	3101      	adds	r1, #1
 8003c52:	3202      	adds	r2, #2
 8003c54:	2906      	cmp	r1, #6
 8003c56:	d011      	beq.n	8003c7c <FindBroadcastRoutes+0x88>
		if(array[src - 1][p]){
 8003c58:	8853      	ldrh	r3, [r2, #2]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f8      	beq.n	8003c50 <FindBroadcastRoutes+0x5c>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003c5e:	5b85      	ldrh	r5, [r0, r6]
 8003c60:	46a9      	mov	r9, r5
 8003c62:	4645      	mov	r5, r8
 8003c64:	408d      	lsls	r5, r1
 8003c66:	46aa      	mov	sl, r5
 8003c68:	464d      	mov	r5, r9
 8003c6a:	4654      	mov	r4, sl
 8003c6c:	4325      	orrs	r5, r4
 8003c6e:	5385      	strh	r5, [r0, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003c70:	08db      	lsrs	r3, r3, #3
 8003c72:	445b      	add	r3, fp
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4664      	mov	r4, ip
 8003c78:	701c      	strb	r4, [r3, #0]
 8003c7a:	e7e9      	b.n	8003c50 <FindBroadcastRoutes+0x5c>
 8003c7c:	687d      	ldr	r5, [r7, #4]
 8003c7e:	465c      	mov	r4, fp
	++level;												// Move one level
 8003c80:	2302      	movs	r3, #2
 8003c82:	4699      	mov	r9, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 8003c84:	464b      	mov	r3, r9
 8003c86:	3301      	adds	r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4699      	mov	r9, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	d040      	beq.n	8003d12 <FindBroadcastRoutes+0x11e>
 8003c90:	4826      	ldr	r0, [pc, #152]	; (8003d2c <FindBroadcastRoutes+0x138>)
 8003c92:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003c94:	2600      	movs	r6, #0
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003c96:	2301      	movs	r3, #1
 8003c98:	425b      	negs	r3, r3
 8003c9a:	444b      	add	r3, r9
 8003c9c:	46b4      	mov	ip, r6
 8003c9e:	001e      	movs	r6, r3
 8003ca0:	e02a      	b.n	8003cf8 <FindBroadcastRoutes+0x104>
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003ca2:	3101      	adds	r1, #1
 8003ca4:	2907      	cmp	r1, #7
 8003ca6:	d01f      	beq.n	8003ce8 <FindBroadcastRoutes+0xf4>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003ca8:	004b      	lsls	r3, r1, #1
 8003caa:	5ac3      	ldrh	r3, [r0, r3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d0f8      	beq.n	8003ca2 <FindBroadcastRoutes+0xae>
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	5ce5      	ldrb	r5, [r4, r3]
 8003cb6:	2d00      	cmp	r5, #0
 8003cb8:	d1f3      	bne.n	8003ca2 <FindBroadcastRoutes+0xae>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003cba:	1e4d      	subs	r5, r1, #1
 8003cbc:	46aa      	mov	sl, r5
 8003cbe:	2501      	movs	r5, #1
 8003cc0:	4656      	mov	r6, sl
 8003cc2:	40b5      	lsls	r5, r6
 8003cc4:	46aa      	mov	sl, r5
 8003cc6:	4d18      	ldr	r5, [pc, #96]	; (8003d28 <FindBroadcastRoutes+0x134>)
 8003cc8:	5b55      	ldrh	r5, [r2, r5]
 8003cca:	46ab      	mov	fp, r5
 8003ccc:	4655      	mov	r5, sl
 8003cce:	465e      	mov	r6, fp
 8003cd0:	4335      	orrs	r5, r6
 8003cd2:	46aa      	mov	sl, r5
 8003cd4:	4d14      	ldr	r5, [pc, #80]	; (8003d28 <FindBroadcastRoutes+0x134>)
 8003cd6:	4656      	mov	r6, sl
 8003cd8:	5356      	strh	r6, [r2, r5]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003cda:	464d      	mov	r5, r9
 8003cdc:	54e5      	strb	r5, [r4, r3]
						++untaged;
 8003cde:	4663      	mov	r3, ip
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	469c      	mov	ip, r3
 8003ce6:	e7dc      	b.n	8003ca2 <FindBroadcastRoutes+0xae>
 8003ce8:	4642      	mov	r2, r8
 8003cea:	687d      	ldr	r5, [r7, #4]
 8003cec:	683e      	ldr	r6, [r7, #0]
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003cee:	3201      	adds	r2, #1
 8003cf0:	3016      	adds	r0, #22
 8003cf2:	b2d3      	uxtb	r3, r2
 8003cf4:	429d      	cmp	r5, r3
 8003cf6:	d909      	bls.n	8003d0c <FindBroadcastRoutes+0x118>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003cf8:	5ca3      	ldrb	r3, [r4, r2]
 8003cfa:	42b3      	cmp	r3, r6
 8003cfc:	d1f7      	bne.n	8003cee <FindBroadcastRoutes+0xfa>
 8003cfe:	0053      	lsls	r3, r2, #1
 8003d00:	2101      	movs	r1, #1
 8003d02:	607d      	str	r5, [r7, #4]
 8003d04:	4690      	mov	r8, r2
 8003d06:	603e      	str	r6, [r7, #0]
 8003d08:	001a      	movs	r2, r3
 8003d0a:	e7cd      	b.n	8003ca8 <FindBroadcastRoutes+0xb4>
 8003d0c:	4666      	mov	r6, ip
					}
				}
			}
		}
	} while(untaged);
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d1b8      	bne.n	8003c84 <FindBroadcastRoutes+0x90>
	
	return result;
}
 8003d12:	2000      	movs	r0, #0
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b003      	add	sp, #12
 8003d18:	bcf0      	pop	{r4, r5, r6, r7}
 8003d1a:	46bb      	mov	fp, r7
 8003d1c:	46b2      	mov	sl, r6
 8003d1e:	46a9      	mov	r9, r5
 8003d20:	46a0      	mov	r8, r4
 8003d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d24:	20000030 	.word	0x20000030
 8003d28:	200004fc 	.word	0x200004fc
 8003d2c:	200002bc 	.word	0x200002bc

08003d30 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d32:	0005      	movs	r5, r0
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003d34:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003d36:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d100      	bne.n	8003d3e <minArr+0xe>
		smallest =arr[0];
 8003d3c:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <minArr+0x38>)
 8003d40:	781e      	ldrb	r6, [r3, #0]
 8003d42:	2e00      	cmp	r6, #0
 8003d44:	dd0e      	ble.n	8003d64 <minArr+0x34>
 8003d46:	2300      	movs	r3, #0
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e002      	b.n	8003d52 <minArr+0x22>
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	42b3      	cmp	r3, r6
 8003d50:	da09      	bge.n	8003d66 <minArr+0x36>
		if((arr[i] < smallest) && !Q[i]){
 8003d52:	5cea      	ldrb	r2, [r5, r3]
 8003d54:	42a2      	cmp	r2, r4
 8003d56:	d2f9      	bcs.n	8003d4c <minArr+0x1c>
 8003d58:	5ccf      	ldrb	r7, [r1, r3]
 8003d5a:	2f00      	cmp	r7, #0
 8003d5c:	d1f6      	bne.n	8003d4c <minArr+0x1c>
			smallest =arr[i];
			index =i;
 8003d5e:	b2d8      	uxtb	r0, r3
			smallest =arr[i];
 8003d60:	0014      	movs	r4, r2
 8003d62:	e7f3      	b.n	8003d4c <minArr+0x1c>
	for(int i =0; i < N; i++){
 8003d64:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 8003d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d68:	20000030 	.word	0x20000030

08003d6c <QnotEmpty>:

/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	0001      	movs	r1, r0
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <QnotEmpty+0x20>)
 8003d72:	781c      	ldrb	r4, [r3, #0]
 8003d74:	2c00      	cmp	r4, #0
 8003d76:	dd07      	ble.n	8003d88 <QnotEmpty+0x1c>
 8003d78:	2300      	movs	r3, #0
	char temp =1;
 8003d7a:	2001      	movs	r0, #1
		temp &=Q[i];
 8003d7c:	5cca      	ldrb	r2, [r1, r3]
 8003d7e:	4010      	ands	r0, r2
	for(int i =0; i < N; i++){
 8003d80:	3301      	adds	r3, #1
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	dbfa      	blt.n	8003d7c <QnotEmpty+0x10>
	}
	
	return temp;
}
 8003d86:	bd10      	pop	{r4, pc}
	char temp =1;
 8003d88:	2001      	movs	r0, #1
 8003d8a:	e7fc      	b.n	8003d86 <QnotEmpty+0x1a>
 8003d8c:	20000030 	.word	0x20000030

08003d90 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	46de      	mov	lr, fp
 8003d94:	4657      	mov	r7, sl
 8003d96:	464e      	mov	r6, r9
 8003d98:	4645      	mov	r5, r8
 8003d9a:	b5e0      	push	{r5, r6, r7, lr}
 8003d9c:	b091      	sub	sp, #68	; 0x44
 8003d9e:	0006      	movs	r6, r0
 8003da0:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003da2:	2400      	movs	r4, #0
 8003da4:	9403      	str	r4, [sp, #12]
 8003da6:	222e      	movs	r2, #46	; 0x2e
 8003da8:	2100      	movs	r1, #0
 8003daa:	a804      	add	r0, sp, #16
 8003dac:	f00f ff31 	bl	8013c12 <memset>
	memset(route,0,sizeof(route));
 8003db0:	221a      	movs	r2, #26
 8003db2:	2100      	movs	r1, #0
 8003db4:	4858      	ldr	r0, [pc, #352]	; (8003f18 <FindRoute+0x188>)
 8003db6:	f00f ff2c 	bl	8013c12 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003dba:	0035      	movs	r5, r6
 8003dbc:	1e70      	subs	r0, r6, #1
 8003dbe:	4b57      	ldr	r3, [pc, #348]	; (8003f1c <FindRoute+0x18c>)
 8003dc0:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003dc2:	4b57      	ldr	r3, [pc, #348]	; (8003f20 <FindRoute+0x190>)
 8003dc4:	541c      	strb	r4, [r3, r0]
	for(int col =1; col <= 6; col++){
 8003dc6:	2616      	movs	r6, #22
 8003dc8:	4370      	muls	r0, r6
 8003dca:	4e56      	ldr	r6, [pc, #344]	; (8003f24 <FindRoute+0x194>)
 8003dcc:	1981      	adds	r1, r0, r6
 8003dce:	9101      	str	r1, [sp, #4]
 8003dd0:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003dd2:	4653      	mov	r3, sl
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	e002      	b.n	8003dde <FindRoute+0x4e>
	for(int col =1; col <= 6; col++){
 8003dd8:	3001      	adds	r0, #1
 8003dda:	2807      	cmp	r0, #7
 8003ddc:	d010      	beq.n	8003e00 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003dde:	0043      	lsls	r3, r0, #1
 8003de0:	5acb      	ldrh	r3, [r1, r3]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f8      	beq.n	8003dd8 <FindRoute+0x48>
 8003de6:	08db      	lsrs	r3, r3, #3
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d1f5      	bne.n	8003dd8 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003dec:	4b4b      	ldr	r3, [pc, #300]	; (8003f1c <FindRoute+0x18c>)
 8003dee:	4453      	add	r3, sl
 8003df0:	3b01      	subs	r3, #1
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003df6:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <FindRoute+0x188>)
 8003df8:	4652      	mov	r2, sl
 8003dfa:	701a      	strb	r2, [r3, #0]
			return col;
 8003dfc:	b2c0      	uxtb	r0, r0
 8003dfe:	e083      	b.n	8003f08 <FindRoute+0x178>
	for(int i =1; i <= N; i++){
 8003e00:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <FindRoute+0x198>)
 8003e02:	7819      	ldrb	r1, [r3, #0]
 8003e04:	2900      	cmp	r1, #0
 8003e06:	dd14      	ble.n	8003e32 <FindRoute+0xa2>
 8003e08:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003e0a:	4a44      	ldr	r2, [pc, #272]	; (8003f1c <FindRoute+0x18c>)
 8003e0c:	1e54      	subs	r4, r2, #1
 8003e0e:	22ff      	movs	r2, #255	; 0xff
 8003e10:	4690      	mov	r8, r2
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e12:	4a43      	ldr	r2, [pc, #268]	; (8003f20 <FindRoute+0x190>)
 8003e14:	1e50      	subs	r0, r2, #1
 8003e16:	2200      	movs	r2, #0
 8003e18:	4694      	mov	ip, r2
 8003e1a:	e002      	b.n	8003e22 <FindRoute+0x92>
	for(int i =1; i <= N; i++){
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	428b      	cmp	r3, r1
 8003e20:	dc07      	bgt.n	8003e32 <FindRoute+0xa2>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003e22:	429d      	cmp	r5, r3
 8003e24:	d0fa      	beq.n	8003e1c <FindRoute+0x8c>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003e26:	4642      	mov	r2, r8
 8003e28:	54e2      	strb	r2, [r4, r3]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003e2a:	181a      	adds	r2, r3, r0
 8003e2c:	4666      	mov	r6, ip
 8003e2e:	7016      	strb	r6, [r2, #0]
 8003e30:	e7f4      	b.n	8003e1c <FindRoute+0x8c>
	uint8_t u =0;
 8003e32:	2400      	movs	r4, #0
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <FindRoute+0x194>)
 8003e36:	4698      	mov	r8, r3
 8003e38:	230c      	movs	r3, #12
 8003e3a:	4443      	add	r3, r8
 8003e3c:	4699      	mov	r9, r3
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e3e:	4d37      	ldr	r5, [pc, #220]	; (8003f1c <FindRoute+0x18c>)
 8003e40:	46d3      	mov	fp, sl
	while(!QnotEmpty(Q)){
 8003e42:	a803      	add	r0, sp, #12
 8003e44:	f7ff ff92 	bl	8003d6c <QnotEmpty>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d12e      	bne.n	8003eaa <FindRoute+0x11a>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003e4c:	a903      	add	r1, sp, #12
 8003e4e:	4833      	ldr	r0, [pc, #204]	; (8003f1c <FindRoute+0x18c>)
 8003e50:	f7ff ff6e 	bl	8003d30 <minArr>
 8003e54:	3001      	adds	r0, #1
 8003e56:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003e58:	455c      	cmp	r4, fp
 8003e5a:	d00b      	beq.n	8003e74 <FindRoute+0xe4>
			Q[u - 1] =1;									// Remove u from Q
 8003e5c:	1e67      	subs	r7, r4, #1
 8003e5e:	ab03      	add	r3, sp, #12
 8003e60:	2201      	movs	r2, #1
 8003e62:	55da      	strb	r2, [r3, r7]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003e64:	2016      	movs	r0, #22
 8003e66:	4378      	muls	r0, r7
 8003e68:	4643      	mov	r3, r8
 8003e6a:	18c1      	adds	r1, r0, r3
 8003e6c:	4448      	add	r0, r9
				if(!Q[v - 1])								// v is still in Q
 8003e6e:	aa03      	add	r2, sp, #12
 8003e70:	46ba      	mov	sl, r7
 8003e72:	e005      	b.n	8003e80 <FindRoute+0xf0>
 8003e74:	46da      	mov	sl, fp
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003e76:	465c      	mov	r4, fp
 8003e78:	e018      	b.n	8003eac <FindRoute+0x11c>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003e7a:	3102      	adds	r1, #2
 8003e7c:	4281      	cmp	r1, r0
 8003e7e:	d0e0      	beq.n	8003e42 <FindRoute+0xb2>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003e80:	884b      	ldrh	r3, [r1, #2]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f9      	beq.n	8003e7a <FindRoute+0xea>
				v =(array[u - 1][n] >> 3);
 8003e86:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	5cd6      	ldrb	r6, [r2, r3]
 8003e8e:	2e00      	cmp	r6, #0
 8003e90:	d1f3      	bne.n	8003e7a <FindRoute+0xea>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003e92:	4656      	mov	r6, sl
 8003e94:	5dae      	ldrb	r6, [r5, r6]
 8003e96:	3601      	adds	r6, #1
 8003e98:	b2f6      	uxtb	r6, r6
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003e9a:	5cef      	ldrb	r7, [r5, r3]
 8003e9c:	42b7      	cmp	r7, r6
 8003e9e:	d9ec      	bls.n	8003e7a <FindRoute+0xea>
						routeDist[v - 1] =alt;
 8003ea0:	4f1e      	ldr	r7, [pc, #120]	; (8003f1c <FindRoute+0x18c>)
 8003ea2:	54fe      	strb	r6, [r7, r3]
						routePrev[v - 1] =u;
 8003ea4:	4e1e      	ldr	r6, [pc, #120]	; (8003f20 <FindRoute+0x190>)
 8003ea6:	54f4      	strb	r4, [r6, r3]
 8003ea8:	e7e7      	b.n	8003e7a <FindRoute+0xea>
 8003eaa:	46da      	mov	sl, fp
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <FindRoute+0x190>)
 8003eae:	191b      	adds	r3, r3, r4
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	7819      	ldrb	r1, [r3, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2900      	cmp	r1, #0
 8003eb8:	d00d      	beq.n	8003ed6 <FindRoute+0x146>
		route[j++] =u;          			// Push the vertex onto the stack
 8003eba:	4d17      	ldr	r5, [pc, #92]	; (8003f18 <FindRoute+0x188>)
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003ebc:	4818      	ldr	r0, [pc, #96]	; (8003f20 <FindRoute+0x190>)
 8003ebe:	e000      	b.n	8003ec2 <FindRoute+0x132>
 8003ec0:	0011      	movs	r1, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	54ac      	strb	r4, [r5, r2]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003eca:	1842      	adds	r2, r0, r1
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	000c      	movs	r4, r1
 8003ed2:	2a00      	cmp	r2, #0
 8003ed4:	d1f4      	bne.n	8003ec0 <FindRoute+0x130>
	for(int col =1; col <= 6; col++){
 8003ed6:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003ed8:	4c0f      	ldr	r4, [pc, #60]	; (8003f18 <FindRoute+0x188>)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <FindRoute+0x18c>)
 8003edc:	4453      	add	r3, sl
 8003ede:	001f      	movs	r7, r3
 8003ee0:	3f01      	subs	r7, #1
 8003ee2:	9901      	ldr	r1, [sp, #4]
 8003ee4:	e002      	b.n	8003eec <FindRoute+0x15c>
	for(int col =1; col <= 6; col++){
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	2807      	cmp	r0, #7
 8003eea:	d00c      	beq.n	8003f06 <FindRoute+0x176>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003eec:	0043      	lsls	r3, r0, #1
 8003eee:	5acb      	ldrh	r3, [r1, r3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f8      	beq.n	8003ee6 <FindRoute+0x156>
 8003ef4:	783a      	ldrb	r2, [r7, #0]
 8003ef6:	18a2      	adds	r2, r4, r2
 8003ef8:	3a01      	subs	r2, #1
 8003efa:	7812      	ldrb	r2, [r2, #0]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d1f1      	bne.n	8003ee6 <FindRoute+0x156>
			return col;
 8003f02:	b2c0      	uxtb	r0, r0
 8003f04:	e000      	b.n	8003f08 <FindRoute+0x178>
	return 0;
 8003f06:	2000      	movs	r0, #0
}
 8003f08:	b011      	add	sp, #68	; 0x44
 8003f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8003f0c:	46bb      	mov	fp, r7
 8003f0e:	46b2      	mov	sl, r6
 8003f10:	46a9      	mov	r9, r5
 8003f12:	46a0      	mov	r8, r4
 8003f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	20006340 	.word	0x20006340
 8003f1c:	20000894 	.word	0x20000894
 8003f20:	200008b0 	.word	0x200008b0
 8003f24:	200002bc 	.word	0x200002bc
 8003f28:	20000030 	.word	0x20000030

08003f2c <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2e:	46de      	mov	lr, fp
 8003f30:	4657      	mov	r7, sl
 8003f32:	464e      	mov	r6, r9
 8003f34:	4645      	mov	r5, r8
 8003f36:	b5e0      	push	{r5, r6, r7, lr}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	0006      	movs	r6, r0
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003f3c:	4c59      	ldr	r4, [pc, #356]	; (80040a4 <DisplayTopology+0x178>)
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	; (80040a8 <DisplayTopology+0x17c>)
 8003f40:	0022      	movs	r2, r4
 8003f42:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f44:	c223      	stmia	r2!, {r0, r1, r5}
 8003f46:	6819      	ldr	r1, [r3, #0]
 8003f48:	6011      	str	r1, [r2, #0]
 8003f4a:	889b      	ldrh	r3, [r3, #4]
 8003f4c:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f4e:	0020      	movs	r0, r4
 8003f50:	f7fc f8e2 	bl	8000118 <strlen>
 8003f54:	b282      	uxth	r2, r0
 8003f56:	2301      	movs	r3, #1
 8003f58:	425b      	negs	r3, r3
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	3333      	adds	r3, #51	; 0x33
 8003f5e:	0021      	movs	r1, r4
 8003f60:	0030      	movs	r0, r6
 8003f62:	f00a facb 	bl	800e4fc <writePxMutex>
 8003f66:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003f68:	4b50      	ldr	r3, [pc, #320]	; (80040ac <DisplayTopology+0x180>)
 8003f6a:	4698      	mov	r8, r3
 8003f6c:	4d4d      	ldr	r5, [pc, #308]	; (80040a4 <DisplayTopology+0x178>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f6e:	2701      	movs	r7, #1
 8003f70:	427f      	negs	r7, r7
		sprintf(pcUserMessage,"P%d\t",i);
 8003f72:	0022      	movs	r2, r4
 8003f74:	4641      	mov	r1, r8
 8003f76:	0028      	movs	r0, r5
 8003f78:	f010 fc04 	bl	8014784 <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f7c:	0028      	movs	r0, r5
 8003f7e:	f7fc f8cb 	bl	8000118 <strlen>
 8003f82:	b282      	uxth	r2, r0
 8003f84:	9700      	str	r7, [sp, #0]
 8003f86:	2332      	movs	r3, #50	; 0x32
 8003f88:	0029      	movs	r1, r5
 8003f8a:	0030      	movs	r0, r6
 8003f8c:	f00a fab6 	bl	800e4fc <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003f90:	3401      	adds	r4, #1
 8003f92:	2c04      	cmp	r4, #4
 8003f94:	d1ed      	bne.n	8003f72 <DisplayTopology+0x46>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003f96:	2301      	movs	r3, #1
 8003f98:	425b      	negs	r3, r3
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	3333      	adds	r3, #51	; 0x33
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	4943      	ldr	r1, [pc, #268]	; (80040b0 <DisplayTopology+0x184>)
 8003fa2:	0030      	movs	r0, r6
 8003fa4:	f00a faaa 	bl	800e4fc <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003fa8:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <DisplayTopology+0x188>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d068      	beq.n	8004082 <DisplayTopology+0x156>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4698      	mov	r8, r3
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003fb4:	4b40      	ldr	r3, [pc, #256]	; (80040b8 <DisplayTopology+0x18c>)
 8003fb6:	4699      	mov	r9, r3
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fb8:	2701      	movs	r7, #1
 8003fba:	427f      	negs	r7, r7
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003fbc:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <DisplayTopology+0x190>)
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	e02d      	b.n	800401e <DisplayTopology+0xf2>
 8003fc2:	2307      	movs	r3, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	08d2      	lsrs	r2, r2, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	4836      	ldr	r0, [pc, #216]	; (80040a4 <DisplayTopology+0x178>)
 8003fcc:	f010 fbda 	bl	8014784 <siprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <DisplayTopology+0x178>)
 8003fd2:	469b      	mov	fp, r3
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7fc f89f 	bl	8000118 <strlen>
 8003fda:	b282      	uxth	r2, r0
 8003fdc:	9700      	str	r7, [sp, #0]
 8003fde:	2332      	movs	r3, #50	; 0x32
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	0030      	movs	r0, r6
 8003fe4:	f00a fa8a 	bl	800e4fc <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003fe8:	3401      	adds	r4, #1
 8003fea:	2c04      	cmp	r4, #4
 8003fec:	d008      	beq.n	8004000 <DisplayTopology+0xd4>
			if(!array[row][col])
 8003fee:	0063      	lsls	r3, r4, #1
 8003ff0:	5aea      	ldrh	r2, [r5, r3]
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <DisplayTopology+0x96>
				sprintf(pcUserMessage,"%d\t",0);
 8003ff6:	4932      	ldr	r1, [pc, #200]	; (80040c0 <DisplayTopology+0x194>)
 8003ff8:	482a      	ldr	r0, [pc, #168]	; (80040a4 <DisplayTopology+0x178>)
 8003ffa:	f010 fbc3 	bl	8014784 <siprintf>
 8003ffe:	e7e7      	b.n	8003fd0 <DisplayTopology+0xa4>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8004000:	9700      	str	r7, [sp, #0]
 8004002:	2332      	movs	r3, #50	; 0x32
 8004004:	2202      	movs	r2, #2
 8004006:	492f      	ldr	r1, [pc, #188]	; (80040c4 <DisplayTopology+0x198>)
 8004008:	0030      	movs	r0, r6
 800400a:	f00a fa77 	bl	800e4fc <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 800400e:	4643      	mov	r3, r8
 8004010:	3301      	adds	r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	4698      	mov	r8, r3
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <DisplayTopology+0x188>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	4543      	cmp	r3, r8
 800401c:	d931      	bls.n	8004082 <DisplayTopology+0x156>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 800401e:	4643      	mov	r3, r8
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4c20      	ldr	r4, [pc, #128]	; (80040a4 <DisplayTopology+0x178>)
 8004024:	4649      	mov	r1, r9
 8004026:	0020      	movs	r0, r4
 8004028:	f010 fbac 	bl	8014784 <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800402c:	0020      	movs	r0, r4
 800402e:	f7fc f873 	bl	8000118 <strlen>
 8004032:	b282      	uxth	r2, r0
 8004034:	9700      	str	r7, [sp, #0]
 8004036:	2332      	movs	r3, #50	; 0x32
 8004038:	0021      	movs	r1, r4
 800403a:	0030      	movs	r0, r6
 800403c:	f00a fa5e 	bl	800e4fc <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <DisplayTopology+0x19c>)
 8004042:	469b      	mov	fp, r3
 8004044:	2516      	movs	r5, #22
 8004046:	4643      	mov	r3, r8
 8004048:	435d      	muls	r5, r3
 800404a:	465b      	mov	r3, fp
 800404c:	5aeb      	ldrh	r3, [r5, r3]
 800404e:	0059      	lsls	r1, r3, #1
 8004050:	18c9      	adds	r1, r1, r3
 8004052:	0049      	lsls	r1, r1, #1
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <DisplayTopology+0x1a0>)
 8004056:	18c9      	adds	r1, r1, r3
 8004058:	2205      	movs	r2, #5
 800405a:	0020      	movs	r0, r4
 800405c:	f010 fbe6 	bl	801482c <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8004060:	9700      	str	r7, [sp, #0]
 8004062:	2332      	movs	r3, #50	; 0x32
 8004064:	2205      	movs	r2, #5
 8004066:	0021      	movs	r1, r4
 8004068:	0030      	movs	r0, r6
 800406a:	f00a fa47 	bl	800e4fc <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 800406e:	9700      	str	r7, [sp, #0]
 8004070:	2332      	movs	r3, #50	; 0x32
 8004072:	2201      	movs	r2, #1
 8004074:	4916      	ldr	r1, [pc, #88]	; (80040d0 <DisplayTopology+0x1a4>)
 8004076:	0030      	movs	r0, r6
 8004078:	f00a fa40 	bl	800e4fc <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 800407c:	445d      	add	r5, fp
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 800407e:	2401      	movs	r4, #1
 8004080:	e7b5      	b.n	8003fee <DisplayTopology+0xc2>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8004082:	2301      	movs	r3, #1
 8004084:	425b      	negs	r3, r3
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	3333      	adds	r3, #51	; 0x33
 800408a:	2201      	movs	r2, #1
 800408c:	4911      	ldr	r1, [pc, #68]	; (80040d4 <DisplayTopology+0x1a8>)
 800408e:	0030      	movs	r0, r6
 8004090:	f00a fa34 	bl	800e4fc <writePxMutex>
}
 8004094:	b003      	add	sp, #12
 8004096:	bcf0      	pop	{r4, r5, r6, r7}
 8004098:	46bb      	mov	fp, r7
 800409a:	46b2      	mov	sl, r6
 800409c:	46a9      	mov	r9, r5
 800409e:	46a0      	mov	r8, r4
 80040a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	20000828 	.word	0x20000828
 80040a8:	080185a8 	.word	0x080185a8
 80040ac:	080185bc 	.word	0x080185bc
 80040b0:	080195cc 	.word	0x080195cc
 80040b4:	20000030 	.word	0x20000030
 80040b8:	080185c4 	.word	0x080185c4
 80040bc:	080185d4 	.word	0x080185d4
 80040c0:	080185d0 	.word	0x080185d0
 80040c4:	080186e0 	.word	0x080186e0
 80040c8:	200002bc 	.word	0x200002bc
 80040cc:	08018ce8 	.word	0x08018ce8
 80040d0:	080185b8 	.word	0x080185b8
 80040d4:	0801b254 	.word	0x0801b254

080040d8 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	46d6      	mov	lr, sl
 80040dc:	464f      	mov	r7, r9
 80040de:	4646      	mov	r6, r8
 80040e0:	b5c0      	push	{r6, r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	4680      	mov	r8, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 80040e6:	4c31      	ldr	r4, [pc, #196]	; (80041ac <DisplayPortsDir+0xd4>)
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <DisplayPortsDir+0xd8>)
 80040ea:	0022      	movs	r2, r4
 80040ec:	cb23      	ldmia	r3!, {r0, r1, r5}
 80040ee:	c223      	stmia	r2!, {r0, r1, r5}
 80040f0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80040f2:	c223      	stmia	r2!, {r0, r1, r5}
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 80040f8:	0020      	movs	r0, r4
 80040fa:	f7fc f80d 	bl	8000118 <strlen>
 80040fe:	b282      	uxth	r2, r0
 8004100:	2301      	movs	r3, #1
 8004102:	425b      	negs	r3, r3
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	3333      	adds	r3, #51	; 0x33
 8004108:	0021      	movs	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f00a f9f6 	bl	800e4fc <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <DisplayPortsDir+0xdc>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2701      	movs	r7, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02c      	beq.n	8004174 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800411a:	4e27      	ldr	r6, [pc, #156]	; (80041b8 <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 800411c:	4b27      	ldr	r3, [pc, #156]	; (80041bc <DisplayPortsDir+0xe4>)
 800411e:	4699      	mov	r9, r3
 8004120:	e024      	b.n	800416c <DisplayPortsDir+0x94>
 8004122:	4b22      	ldr	r3, [pc, #136]	; (80041ac <DisplayPortsDir+0xd4>)
 8004124:	469a      	mov	sl, r3
 8004126:	0023      	movs	r3, r4
 8004128:	003a      	movs	r2, r7
 800412a:	4649      	mov	r1, r9
 800412c:	4650      	mov	r0, sl
 800412e:	f010 fb29 	bl	8014784 <siprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8004132:	4650      	mov	r0, sl
 8004134:	f7fb fff0 	bl	8000118 <strlen>
 8004138:	b282      	uxth	r2, r0
 800413a:	2301      	movs	r3, #1
 800413c:	425b      	negs	r3, r3
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	3333      	adds	r3, #51	; 0x33
 8004142:	4651      	mov	r1, sl
 8004144:	4640      	mov	r0, r8
 8004146:	f00a f9d9 	bl	800e4fc <writePxMutex>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 800414a:	2c0a      	cmp	r4, #10
 800414c:	d008      	beq.n	8004160 <DisplayPortsDir+0x88>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800414e:	0021      	movs	r1, r4
 8004150:	3401      	adds	r4, #1
 8004152:	5baa      	ldrh	r2, [r5, r6]
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	410b      	asrs	r3, r1
 800415a:	4213      	tst	r3, r2
 800415c:	d0f5      	beq.n	800414a <DisplayPortsDir+0x72>
 800415e:	e7e0      	b.n	8004122 <DisplayPortsDir+0x4a>
	for(uint8_t i =1; i <= N; i++){
 8004160:	3701      	adds	r7, #1
 8004162:	b2ff      	uxtb	r7, r7
 8004164:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <DisplayPortsDir+0xdc>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	42bb      	cmp	r3, r7
 800416a:	d303      	bcc.n	8004174 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 800416c:	2400      	movs	r4, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800416e:	1e7d      	subs	r5, r7, #1
 8004170:	006d      	lsls	r5, r5, #1
 8004172:	e7ec      	b.n	800414e <DisplayPortsDir+0x76>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8004174:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <DisplayPortsDir+0xd4>)
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <DisplayPortsDir+0xe8>)
 8004178:	0022      	movs	r2, r4
 800417a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800417c:	c223      	stmia	r2!, {r0, r1, r5}
 800417e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004180:	c223      	stmia	r2!, {r0, r1, r5}
 8004182:	cb03      	ldmia	r3!, {r0, r1}
 8004184:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8004186:	0020      	movs	r0, r4
 8004188:	f7fb ffc6 	bl	8000118 <strlen>
 800418c:	b282      	uxth	r2, r0
 800418e:	2301      	movs	r3, #1
 8004190:	425b      	negs	r3, r3
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	3333      	adds	r3, #51	; 0x33
 8004196:	0021      	movs	r1, r4
 8004198:	4640      	mov	r0, r8
 800419a:	f00a f9af 	bl	800e4fc <writePxMutex>
	HAL_MAX_DELAY);
}
 800419e:	b002      	add	sp, #8
 80041a0:	bce0      	pop	{r5, r6, r7}
 80041a2:	46ba      	mov	sl, r7
 80041a4:	46b1      	mov	r9, r6
 80041a6:	46a8      	mov	r8, r5
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	20000828 	.word	0x20000828
 80041b0:	080185dc 	.word	0x080185dc
 80041b4:	20000030 	.word	0x20000030
 80041b8:	20006740 	.word	0x20006740
 80041bc:	080185f8 	.word	0x080185f8
 80041c0:	0801860c 	.word	0x0801860c

080041c4 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 80041c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c6:	46d6      	mov	lr, sl
 80041c8:	464f      	mov	r7, r9
 80041ca:	4646      	mov	r6, r8
 80041cc:	b5c0      	push	{r6, r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	4681      	mov	r9, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80041d2:	f00a fc59 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 80041d6:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 80041d8:	2300      	movs	r3, #0
 80041da:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 80041dc:	4b91      	ldr	r3, [pc, #580]	; (8004424 <DisplayModuleStatus+0x260>)
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	4d91      	ldr	r5, [pc, #580]	; (8004428 <DisplayModuleStatus+0x264>)
 80041e2:	4992      	ldr	r1, [pc, #584]	; (800442c <DisplayModuleStatus+0x268>)
 80041e4:	0028      	movs	r0, r5
 80041e6:	f010 facd 	bl	8014784 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041ea:	0029      	movs	r1, r5
 80041ec:	0020      	movs	r0, r4
 80041ee:	f010 fae9 	bl	80147c4 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 80041f2:	4b8f      	ldr	r3, [pc, #572]	; (8004430 <DisplayModuleStatus+0x26c>)
 80041f4:	781a      	ldrb	r2, [r3, #0]
 80041f6:	498f      	ldr	r1, [pc, #572]	; (8004434 <DisplayModuleStatus+0x270>)
 80041f8:	0028      	movs	r0, r5
 80041fa:	f010 fac3 	bl	8014784 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80041fe:	0029      	movs	r1, r5
 8004200:	0020      	movs	r0, r4
 8004202:	f010 fadf 	bl	80147c4 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8004206:	2306      	movs	r3, #6
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	3b04      	subs	r3, #4
 800420c:	2200      	movs	r2, #0
 800420e:	498a      	ldr	r1, [pc, #552]	; (8004438 <DisplayModuleStatus+0x274>)
 8004210:	0028      	movs	r0, r5
 8004212:	f010 fab7 	bl	8014784 <siprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8004216:	0029      	movs	r1, r5
 8004218:	0020      	movs	r0, r4
 800421a:	f010 fad3 	bl	80147c4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 800421e:	4a87      	ldr	r2, [pc, #540]	; (800443c <DisplayModuleStatus+0x278>)
 8004220:	4987      	ldr	r1, [pc, #540]	; (8004440 <DisplayModuleStatus+0x27c>)
 8004222:	0028      	movs	r0, r5
 8004224:	f010 faae 	bl	8014784 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004228:	0029      	movs	r1, r5
 800422a:	0020      	movs	r0, r4
 800422c:	f010 faca 	bl	80147c4 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8004230:	4a84      	ldr	r2, [pc, #528]	; (8004444 <DisplayModuleStatus+0x280>)
 8004232:	4985      	ldr	r1, [pc, #532]	; (8004448 <DisplayModuleStatus+0x284>)
 8004234:	0028      	movs	r0, r5
 8004236:	f010 faa5 	bl	8014784 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800423a:	0029      	movs	r1, r5
 800423c:	0020      	movs	r0, r4
 800423e:	f010 fac1 	bl	80147c4 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8004242:	4b82      	ldr	r3, [pc, #520]	; (800444c <DisplayModuleStatus+0x288>)
 8004244:	002a      	movs	r2, r5
 8004246:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004248:	c243      	stmia	r2!, {r0, r1, r6}
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	6011      	str	r1, [r2, #0]
 800424e:	8899      	ldrh	r1, [r3, #4]
 8004250:	8091      	strh	r1, [r2, #4]
 8004252:	799b      	ldrb	r3, [r3, #6]
 8004254:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004256:	0029      	movs	r1, r5
 8004258:	0020      	movs	r0, r4
 800425a:	f010 fab3 	bl	80147c4 <strcat>
 800425e:	2501      	movs	r5, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8004260:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <DisplayModuleStatus+0x28c>)
 8004262:	4698      	mov	r8, r3
 8004264:	4f70      	ldr	r7, [pc, #448]	; (8004428 <DisplayModuleStatus+0x264>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004266:	4b7b      	ldr	r3, [pc, #492]	; (8004454 <DisplayModuleStatus+0x290>)
 8004268:	469a      	mov	sl, r3
 800426a:	e00e      	b.n	800428a <DisplayModuleStatus+0xc6>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 800426c:	4b6e      	ldr	r3, [pc, #440]	; (8004428 <DisplayModuleStatus+0x264>)
 800426e:	4a7a      	ldr	r2, [pc, #488]	; (8004458 <DisplayModuleStatus+0x294>)
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	6019      	str	r1, [r3, #0]
 8004274:	8891      	ldrh	r1, [r2, #4]
 8004276:	8099      	strh	r1, [r3, #4]
 8004278:	7992      	ldrb	r2, [r2, #6]
 800427a:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 800427c:	496a      	ldr	r1, [pc, #424]	; (8004428 <DisplayModuleStatus+0x264>)
 800427e:	0020      	movs	r0, r4
 8004280:	f010 faa0 	bl	80147c4 <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004284:	3501      	adds	r5, #1
 8004286:	2d04      	cmp	r5, #4
 8004288:	d039      	beq.n	80042fe <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage,"P%d: ",i);
 800428a:	002a      	movs	r2, r5
 800428c:	4641      	mov	r1, r8
 800428e:	0038      	movs	r0, r7
 8004290:	f010 fa78 	bl	8014784 <siprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004294:	0039      	movs	r1, r7
 8004296:	0020      	movs	r0, r4
 8004298:	f010 fa94 	bl	80147c4 <strcat>
		switch(portStatus[i]){
 800429c:	4653      	mov	r3, sl
 800429e:	5ceb      	ldrb	r3, [r5, r3]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d8eb      	bhi.n	800427c <DisplayModuleStatus+0xb8>
 80042a4:	4653      	mov	r3, sl
 80042a6:	5ceb      	ldrb	r3, [r5, r3]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4a6c      	ldr	r2, [pc, #432]	; (800445c <DisplayModuleStatus+0x298>)
 80042ac:	58d3      	ldr	r3, [r2, r3]
 80042ae:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 80042b0:	495d      	ldr	r1, [pc, #372]	; (8004428 <DisplayModuleStatus+0x264>)
 80042b2:	4b6b      	ldr	r3, [pc, #428]	; (8004460 <DisplayModuleStatus+0x29c>)
 80042b4:	000a      	movs	r2, r1
 80042b6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042b8:	c243      	stmia	r2!, {r0, r1, r6}
 80042ba:	cb03      	ldmia	r3!, {r0, r1}
 80042bc:	c203      	stmia	r2!, {r0, r1}
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	7013      	strb	r3, [r2, #0]
				break;
 80042c2:	e7db      	b.n	800427c <DisplayModuleStatus+0xb8>
				sprintf(pcUserMessage,"Streaming\n\r");
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <DisplayModuleStatus+0x264>)
 80042c6:	4b67      	ldr	r3, [pc, #412]	; (8004464 <DisplayModuleStatus+0x2a0>)
 80042c8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042ca:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 80042cc:	e7d6      	b.n	800427c <DisplayModuleStatus+0xb8>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 80042ce:	4956      	ldr	r1, [pc, #344]	; (8004428 <DisplayModuleStatus+0x264>)
 80042d0:	4b65      	ldr	r3, [pc, #404]	; (8004468 <DisplayModuleStatus+0x2a4>)
 80042d2:	000a      	movs	r2, r1
 80042d4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042d6:	c243      	stmia	r2!, {r0, r1, r6}
 80042d8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042da:	c243      	stmia	r2!, {r0, r1, r6}
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	8013      	strh	r3, [r2, #0]
				break;
 80042e0:	e7cc      	b.n	800427c <DisplayModuleStatus+0xb8>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80042e2:	4951      	ldr	r1, [pc, #324]	; (8004428 <DisplayModuleStatus+0x264>)
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <DisplayModuleStatus+0x2a8>)
 80042e6:	000a      	movs	r2, r1
 80042e8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042ea:	c243      	stmia	r2!, {r0, r1, r6}
 80042ec:	cb43      	ldmia	r3!, {r0, r1, r6}
 80042ee:	c243      	stmia	r2!, {r0, r1, r6}
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	6011      	str	r1, [r2, #0]
 80042f4:	8899      	ldrh	r1, [r3, #4]
 80042f6:	8091      	strh	r1, [r2, #4]
 80042f8:	799b      	ldrb	r3, [r3, #6]
 80042fa:	7193      	strb	r3, [r2, #6]
				break;
 80042fc:	e7be      	b.n	800427c <DisplayModuleStatus+0xb8>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80042fe:	494a      	ldr	r1, [pc, #296]	; (8004428 <DisplayModuleStatus+0x264>)
 8004300:	4b5b      	ldr	r3, [pc, #364]	; (8004470 <DisplayModuleStatus+0x2ac>)
 8004302:	000a      	movs	r2, r1
 8004304:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004306:	c261      	stmia	r2!, {r0, r5, r6}
 8004308:	cb61      	ldmia	r3!, {r0, r5, r6}
 800430a:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800430c:	0020      	movs	r0, r4
 800430e:	f010 fa59 	bl	80147c4 <strcat>
	for(char i =1; i <= 6; i++){
 8004312:	4f58      	ldr	r7, [pc, #352]	; (8004474 <DisplayModuleStatus+0x2b0>)
	strcat((char* )pcOutputString,pcUserMessage);
 8004314:	2501      	movs	r5, #1
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
			strcat((char* )pcOutputString,pcUserMessage);
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004316:	4e44      	ldr	r6, [pc, #272]	; (8004428 <DisplayModuleStatus+0x264>)
 8004318:	e00e      	b.n	8004338 <DisplayModuleStatus+0x174>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800431a:	4b43      	ldr	r3, [pc, #268]	; (8004428 <DisplayModuleStatus+0x264>)
 800431c:	469a      	mov	sl, r3
 800431e:	002a      	movs	r2, r5
 8004320:	4955      	ldr	r1, [pc, #340]	; (8004478 <DisplayModuleStatus+0x2b4>)
 8004322:	0018      	movs	r0, r3
 8004324:	f010 fa2e 	bl	8014784 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004328:	4651      	mov	r1, sl
 800432a:	0020      	movs	r0, r4
 800432c:	f010 fa4a 	bl	80147c4 <strcat>
	for(char i =1; i <= 6; i++){
 8004330:	3501      	adds	r5, #1
 8004332:	3738      	adds	r7, #56	; 0x38
 8004334:	2d07      	cmp	r5, #7
 8004336:	d017      	beq.n	8004368 <DisplayModuleStatus+0x1a4>
		if(streamDMA[i - 1].Instance == 0){
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0ed      	beq.n	800431a <DisplayModuleStatus+0x156>
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 800433e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004340:	f006 f9f8 	bl	800a734 <GetPort>
 8004344:	4682      	mov	sl, r0
 8004346:	00ab      	lsls	r3, r5, #2
 8004348:	4a4c      	ldr	r2, [pc, #304]	; (800447c <DisplayModuleStatus+0x2b8>)
 800434a:	58d0      	ldr	r0, [r2, r3]
 800434c:	f006 f9f2 	bl	800a734 <GetPort>
 8004350:	9000      	str	r0, [sp, #0]
 8004352:	4653      	mov	r3, sl
 8004354:	002a      	movs	r2, r5
 8004356:	494a      	ldr	r1, [pc, #296]	; (8004480 <DisplayModuleStatus+0x2bc>)
 8004358:	0030      	movs	r0, r6
 800435a:	f010 fa13 	bl	8014784 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800435e:	0031      	movs	r1, r6
 8004360:	0020      	movs	r0, r4
 8004362:	f010 fa2f 	bl	80147c4 <strcat>
 8004366:	e7e3      	b.n	8004330 <DisplayModuleStatus+0x16c>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004368:	0020      	movs	r0, r4
 800436a:	f7fb fed5 	bl	8000118 <strlen>
 800436e:	1820      	adds	r0, r4, r0
 8004370:	2203      	movs	r2, #3
 8004372:	4944      	ldr	r1, [pc, #272]	; (8004484 <DisplayModuleStatus+0x2c0>)
 8004374:	f00f fc44 	bl	8013c00 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004378:	0020      	movs	r0, r4
 800437a:	f7fb fecd 	bl	8000118 <strlen>
 800437e:	1820      	adds	r0, r4, r0
 8004380:	221d      	movs	r2, #29
 8004382:	4941      	ldr	r1, [pc, #260]	; (8004488 <DisplayModuleStatus+0x2c4>)
 8004384:	f00f fc3c 	bl	8013c00 <memcpy>
	temp =strlen((char* )pcOutputString);
 8004388:	0020      	movs	r0, r4
 800438a:	f7fb fec5 	bl	8000118 <strlen>
 800438e:	4680      	mov	r8, r0
 8004390:	2500      	movs	r5, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004392:	4e3e      	ldr	r6, [pc, #248]	; (800448c <DisplayModuleStatus+0x2c8>)
 8004394:	4f23      	ldr	r7, [pc, #140]	; (8004424 <DisplayModuleStatus+0x260>)
 8004396:	e00c      	b.n	80043b2 <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004398:	4b23      	ldr	r3, [pc, #140]	; (8004428 <DisplayModuleStatus+0x264>)
 800439a:	469a      	mov	sl, r3
 800439c:	002a      	movs	r2, r5
 800439e:	493c      	ldr	r1, [pc, #240]	; (8004490 <DisplayModuleStatus+0x2cc>)
 80043a0:	0018      	movs	r0, r3
 80043a2:	f010 f9ef 	bl	8014784 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80043a6:	4651      	mov	r1, sl
 80043a8:	0020      	movs	r0, r4
 80043aa:	f010 fa0b 	bl	80147c4 <strcat>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 80043ae:	2d03      	cmp	r5, #3
 80043b0:	d00b      	beq.n	80043ca <DisplayModuleStatus+0x206>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 80043b2:	0029      	movs	r1, r5
 80043b4:	3501      	adds	r5, #1
 80043b6:	783b      	ldrb	r3, [r7, #0]
 80043b8:	3b01      	subs	r3, #1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	5b9a      	ldrh	r2, [r3, r6]
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	410b      	asrs	r3, r1
 80043c4:	4213      	tst	r3, r2
 80043c6:	d0f2      	beq.n	80043ae <DisplayModuleStatus+0x1ea>
 80043c8:	e7e6      	b.n	8004398 <DisplayModuleStatus+0x1d4>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 80043ca:	0020      	movs	r0, r4
 80043cc:	f7fb fea4 	bl	8000118 <strlen>
 80043d0:	4643      	mov	r3, r8
 80043d2:	041e      	lsls	r6, r3, #16
 80043d4:	0c36      	lsrs	r6, r6, #16
 80043d6:	42b0      	cmp	r0, r6
 80043d8:	d010      	beq.n	80043fc <DisplayModuleStatus+0x238>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80043da:	0020      	movs	r0, r4
 80043dc:	f7fb fe9c 	bl	8000118 <strlen>
 80043e0:	1820      	adds	r0, r4, r0
 80043e2:	2203      	movs	r2, #3
 80043e4:	4927      	ldr	r1, [pc, #156]	; (8004484 <DisplayModuleStatus+0x2c0>)
 80043e6:	f00f fc0b 	bl	8013c00 <memcpy>
	
	/* Display output */
	if(port)
 80043ea:	464b      	mov	r3, r9
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <DisplayModuleStatus+0x244>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80043f0:	b002      	add	sp, #8
 80043f2:	bce0      	pop	{r5, r6, r7}
 80043f4:	46ba      	mov	sl, r7
 80043f6:	46b1      	mov	r9, r6
 80043f8:	46a8      	mov	r8, r5
 80043fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80043fc:	1820      	adds	r0, r4, r0
 80043fe:	2205      	movs	r2, #5
 8004400:	4924      	ldr	r1, [pc, #144]	; (8004494 <DisplayModuleStatus+0x2d0>)
 8004402:	f00f fbfd 	bl	8013c00 <memcpy>
 8004406:	e7e8      	b.n	80043da <DisplayModuleStatus+0x216>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004408:	0020      	movs	r0, r4
 800440a:	f7fb fe85 	bl	8000118 <strlen>
 800440e:	b282      	uxth	r2, r0
 8004410:	2301      	movs	r3, #1
 8004412:	425b      	negs	r3, r3
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	3333      	adds	r3, #51	; 0x33
 8004418:	0021      	movs	r1, r4
 800441a:	4648      	mov	r0, r9
 800441c:	f00a f86e 	bl	800e4fc <writePxMutex>
}
 8004420:	e7e6      	b.n	80043f0 <DisplayModuleStatus+0x22c>
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	2000080e 	.word	0x2000080e
 8004428:	20000828 	.word	0x20000828
 800442c:	0801862c 	.word	0x0801862c
 8004430:	200002b8 	.word	0x200002b8
 8004434:	08018648 	.word	0x08018648
 8004438:	08018664 	.word	0x08018664
 800443c:	08018684 	.word	0x08018684
 8004440:	08018690 	.word	0x08018690
 8004444:	080186a8 	.word	0x080186a8
 8004448:	080186b4 	.word	0x080186b4
 800444c:	080186d0 	.word	0x080186d0
 8004450:	080186e4 	.word	0x080186e4
 8004454:	20000878 	.word	0x20000878
 8004458:	080186ec 	.word	0x080186ec
 800445c:	080187e8 	.word	0x080187e8
 8004460:	080186f4 	.word	0x080186f4
 8004464:	0801870c 	.word	0x0801870c
 8004468:	08018718 	.word	0x08018718
 800446c:	08018734 	.word	0x08018734
 8004470:	08018754 	.word	0x08018754
 8004474:	200011f4 	.word	0x200011f4
 8004478:	0801876c 	.word	0x0801876c
 800447c:	20000cd0 	.word	0x20000cd0
 8004480:	08018788 	.word	0x08018788
 8004484:	080186e0 	.word	0x080186e0
 8004488:	080187b8 	.word	0x080187b8
 800448c:	20006740 	.word	0x20006740
 8004490:	080187d8 	.word	0x080187d8
 8004494:	080187e0 	.word	0x080187e0

08004498 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800449a:	46c6      	mov	lr, r8
 800449c:	b500      	push	{lr}
 800449e:	0006      	movs	r6, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 80044a0:	4929      	ldr	r1, [pc, #164]	; (8004548 <GetID+0xb0>)
 80044a2:	f7fb fe2f 	bl	8000104 <strcmp>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d010      	beq.n	80044cc <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 80044aa:	4928      	ldr	r1, [pc, #160]	; (800454c <GetID+0xb4>)
 80044ac:	0030      	movs	r0, r6
 80044ae:	f7fb fe29 	bl	8000104 <strcmp>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d045      	beq.n	8004542 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 80044b6:	7833      	ldrb	r3, [r6, #0]
 80044b8:	4698      	mov	r8, r3
 80044ba:	2b23      	cmp	r3, #35	; 0x23
 80044bc:	d00b      	beq.n	80044d6 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <GetID+0xb8>)
 80044c0:	781f      	ldrb	r7, [r3, #0]
 80044c2:	2f00      	cmp	r7, #0
 80044c4:	d02a      	beq.n	800451c <GetID+0x84>
 80044c6:	4d23      	ldr	r5, [pc, #140]	; (8004554 <GetID+0xbc>)
 80044c8:	2400      	movs	r4, #0
 80044ca:	e01c      	b.n	8004506 <GetID+0x6e>
		return myID;
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <GetID+0xc0>)
 80044ce:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 80044d0:	bc80      	pop	{r7}
 80044d2:	46b8      	mov	r8, r7
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 80044d6:	1c70      	adds	r0, r6, #1
 80044d8:	f00f fb45 	bl	8013b66 <atol>
 80044dc:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <GetID+0x52>
 80044e2:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <GetID+0xb8>)
 80044e4:	7812      	ldrb	r2, [r2, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d206      	bcs.n	80044f8 <GetID+0x60>
		else if(id == myID)
 80044ea:	4a1b      	ldr	r2, [pc, #108]	; (8004558 <GetID+0xc0>)
 80044ec:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80044ee:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d1ed      	bne.n	80044d0 <GetID+0x38>
			return myID;
 80044f4:	b218      	sxth	r0, r3
 80044f6:	e7eb      	b.n	80044d0 <GetID+0x38>
			return id;
 80044f8:	b218      	sxth	r0, r3
 80044fa:	e7e9      	b.n	80044d0 <GetID+0x38>
		for(i =0; i < N; i++){
 80044fc:	3401      	adds	r4, #1
 80044fe:	b2e4      	uxtb	r4, r4
 8004500:	350a      	adds	r5, #10
 8004502:	42bc      	cmp	r4, r7
 8004504:	d00a      	beq.n	800451c <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004506:	0029      	movs	r1, r5
 8004508:	0030      	movs	r0, r6
 800450a:	f7fb fdfb 	bl	8000104 <strcmp>
 800450e:	2800      	cmp	r0, #0
 8004510:	d1f4      	bne.n	80044fc <GetID+0x64>
 8004512:	4643      	mov	r3, r8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f1      	beq.n	80044fc <GetID+0x64>
				return (i);
 8004518:	b220      	sxth	r0, r4
 800451a:	e7d9      	b.n	80044d0 <GetID+0x38>
 800451c:	4f0f      	ldr	r7, [pc, #60]	; (800455c <GetID+0xc4>)
		for(i =0; i < N; i++){
 800451e:	2500      	movs	r5, #0
			if(!strcmp(string,groupAlias[i]))
 8004520:	0039      	movs	r1, r7
 8004522:	0030      	movs	r0, r6
 8004524:	f7fb fdee 	bl	8000104 <strcmp>
 8004528:	2800      	cmp	r0, #0
 800452a:	d005      	beq.n	8004538 <GetID+0xa0>
		for(i =0; i < MaxNumOfGroups; i++){
 800452c:	3501      	adds	r5, #1
 800452e:	370a      	adds	r7, #10
 8004530:	2d0a      	cmp	r5, #10
 8004532:	d1f5      	bne.n	8004520 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004534:	2064      	movs	r0, #100	; 0x64
 8004536:	e7cb      	b.n	80044d0 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004538:	022c      	lsls	r4, r5, #8
 800453a:	20fe      	movs	r0, #254	; 0xfe
 800453c:	4320      	orrs	r0, r4
 800453e:	b200      	sxth	r0, r0
 8004540:	e7c6      	b.n	80044d0 <GetID+0x38>
		return BOS_BROADCAST;
 8004542:	20ff      	movs	r0, #255	; 0xff
 8004544:	e7c4      	b.n	80044d0 <GetID+0x38>
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	080187fc 	.word	0x080187fc
 800454c:	08018800 	.word	0x08018800
 8004550:	20000030 	.word	0x20000030
 8004554:	20000700 	.word	0x20000700
 8004558:	2000080e 	.word	0x2000080e
 800455c:	200005f8 	.word	0x200005f8

08004560 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 8004560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004562:	b083      	sub	sp, #12
 8004564:	9001      	str	r0, [sp, #4]
 8004566:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 8004568:	4c28      	ldr	r4, [pc, #160]	; (800460c <NameModule+0xac>)
 800456a:	0025      	movs	r5, r4
 800456c:	3510      	adds	r5, #16
		if(!strcmp(alias,BOSkeywords[i]))
 800456e:	0021      	movs	r1, r4
 8004570:	0030      	movs	r0, r6
 8004572:	f7fb fdc7 	bl	8000104 <strcmp>
 8004576:	2800      	cmp	r0, #0
 8004578:	d03f      	beq.n	80045fa <NameModule+0x9a>
	for(i =0; i < NumOfKeywords; i++){
 800457a:	3404      	adds	r4, #4
 800457c:	42ac      	cmp	r4, r5
 800457e:	d1f6      	bne.n	800456e <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <NameModule+0xb0>)
 8004582:	781f      	ldrb	r7, [r3, #0]
 8004584:	2f01      	cmp	r7, #1
 8004586:	dd0b      	ble.n	80045a0 <NameModule+0x40>
 8004588:	4c22      	ldr	r4, [pc, #136]	; (8004614 <NameModule+0xb4>)
 800458a:	2501      	movs	r5, #1
		if(!strcmp(alias,moduleAlias[i]))
 800458c:	0021      	movs	r1, r4
 800458e:	0030      	movs	r0, r6
 8004590:	f7fb fdb8 	bl	8000104 <strcmp>
 8004594:	2800      	cmp	r0, #0
 8004596:	d032      	beq.n	80045fe <NameModule+0x9e>
	for(i =1; i < N; i++){
 8004598:	3501      	adds	r5, #1
 800459a:	340a      	adds	r4, #10
 800459c:	42bd      	cmp	r5, r7
 800459e:	dbf5      	blt.n	800458c <NameModule+0x2c>
 80045a0:	4c1d      	ldr	r4, [pc, #116]	; (8004618 <NameModule+0xb8>)
 80045a2:	0025      	movs	r5, r4
 80045a4:	3564      	adds	r5, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 80045a6:	0021      	movs	r1, r4
 80045a8:	0030      	movs	r0, r6
 80045aa:	f7fb fdab 	bl	8000104 <strcmp>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d028      	beq.n	8004604 <NameModule+0xa4>
	for(i =0; i < MaxNumOfGroups; i++){
 80045b2:	340a      	adds	r4, #10
 80045b4:	42ac      	cmp	r4, r5
 80045b6:	d1f6      	bne.n	80045a6 <NameModule+0x46>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80045b8:	4c18      	ldr	r4, [pc, #96]	; (800461c <NameModule+0xbc>)
 80045ba:	4b19      	ldr	r3, [pc, #100]	; (8004620 <NameModule+0xc0>)
 80045bc:	601c      	str	r4, [r3, #0]
 80045be:	001f      	movs	r7, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 80045c4:	0028      	movs	r0, r5
 80045c6:	f7fb fda7 	bl	8000118 <strlen>
 80045ca:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80045cc:	0029      	movs	r1, r5
 80045ce:	0030      	movs	r0, r6
 80045d0:	f010 f91b 	bl	801480a <strncmp>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d017      	beq.n	8004608 <NameModule+0xa8>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80045d8:	6864      	ldr	r4, [r4, #4]
 80045da:	603c      	str	r4, [r7, #0]
 80045dc:	2c00      	cmp	r4, #0
 80045de:	d1ef      	bne.n	80045c0 <NameModule+0x60>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	0098      	lsls	r0, r3, #2
 80045e4:	469c      	mov	ip, r3
 80045e6:	4460      	add	r0, ip
 80045e8:	0040      	lsls	r0, r0, #1
 80045ea:	4f0e      	ldr	r7, [pc, #56]	; (8004624 <NameModule+0xc4>)
 80045ec:	19c0      	adds	r0, r0, r7
 80045ee:	0031      	movs	r1, r6
 80045f0:	f010 f903 	bl	80147fa <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80045f4:	f7ff f88e 	bl	8003714 <SaveEEalias>
	
	return result;
 80045f8:	e002      	b.n	8004600 <NameModule+0xa0>
			return BOS_ERR_Keyword;
 80045fa:	2006      	movs	r0, #6
 80045fc:	e000      	b.n	8004600 <NameModule+0xa0>
			return BOS_ERR_ExistingAlias;
 80045fe:	2007      	movs	r0, #7
}
 8004600:	b003      	add	sp, #12
 8004602:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004604:	2007      	movs	r0, #7
 8004606:	e7fb      	b.n	8004600 <NameModule+0xa0>
			return BOS_ERR_ExistingCmd;
 8004608:	2008      	movs	r0, #8
 800460a:	e7f9      	b.n	8004600 <NameModule+0xa0>
 800460c:	08018cc4 	.word	0x08018cc4
 8004610:	20000030 	.word	0x20000030
 8004614:	2000070a 	.word	0x2000070a
 8004618:	200005f8 	.word	0x200005f8
 800461c:	200000b0 	.word	0x200000b0
 8004620:	2000087c 	.word	0x2000087c
 8004624:	20000700 	.word	0x20000700

08004628 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462a:	46ce      	mov	lr, r9
 800462c:	b500      	push	{lr}
 800462e:	b082      	sub	sp, #8
 8004630:	9001      	str	r0, [sp, #4]
 8004632:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004634:	4f36      	ldr	r7, [pc, #216]	; (8004710 <AddModuleToGroup+0xe8>)
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004636:	003d      	movs	r5, r7
	for(i =0; i < MaxNumOfGroups; i++){
 8004638:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800463a:	0029      	movs	r1, r5
 800463c:	0030      	movs	r0, r6
 800463e:	f7fb fd61 	bl	8000104 <strcmp>
 8004642:	2800      	cmp	r0, #0
 8004644:	d047      	beq.n	80046d6 <AddModuleToGroup+0xae>
	for(i =0; i < MaxNumOfGroups; i++){
 8004646:	3401      	adds	r4, #1
 8004648:	350a      	adds	r5, #10
 800464a:	2c0a      	cmp	r4, #10
 800464c:	d1f5      	bne.n	800463a <AddModuleToGroup+0x12>
 800464e:	4c31      	ldr	r4, [pc, #196]	; (8004714 <AddModuleToGroup+0xec>)
 8004650:	0025      	movs	r5, r4
 8004652:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004654:	0021      	movs	r1, r4
 8004656:	0030      	movs	r0, r6
 8004658:	f7fb fd54 	bl	8000104 <strcmp>
 800465c:	2800      	cmp	r0, #0
 800465e:	d050      	beq.n	8004702 <AddModuleToGroup+0xda>
	for(j =0; j < NumOfKeywords; j++){
 8004660:	3404      	adds	r4, #4
 8004662:	42ac      	cmp	r4, r5
 8004664:	d1f6      	bne.n	8004654 <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004666:	4b2c      	ldr	r3, [pc, #176]	; (8004718 <AddModuleToGroup+0xf0>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	4699      	mov	r9, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	dd0b      	ble.n	8004688 <AddModuleToGroup+0x60>
 8004670:	4c2a      	ldr	r4, [pc, #168]	; (800471c <AddModuleToGroup+0xf4>)
 8004672:	2501      	movs	r5, #1
		if(!strcmp(group,moduleAlias[j]))
 8004674:	0021      	movs	r1, r4
 8004676:	0030      	movs	r0, r6
 8004678:	f7fb fd44 	bl	8000104 <strcmp>
 800467c:	2800      	cmp	r0, #0
 800467e:	d042      	beq.n	8004706 <AddModuleToGroup+0xde>
	for(j =1; j < N; j++){
 8004680:	3501      	adds	r5, #1
 8004682:	340a      	adds	r4, #10
 8004684:	454d      	cmp	r5, r9
 8004686:	dbf5      	blt.n	8004674 <AddModuleToGroup+0x4c>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004688:	4c25      	ldr	r4, [pc, #148]	; (8004720 <AddModuleToGroup+0xf8>)
 800468a:	4b26      	ldr	r3, [pc, #152]	; (8004724 <AddModuleToGroup+0xfc>)
 800468c:	601c      	str	r4, [r3, #0]
 800468e:	4699      	mov	r9, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004694:	0028      	movs	r0, r5
 8004696:	f7fb fd3f 	bl	8000118 <strlen>
 800469a:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800469c:	0029      	movs	r1, r5
 800469e:	0030      	movs	r0, r6
 80046a0:	f010 f8b3 	bl	801480a <strncmp>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d030      	beq.n	800470a <AddModuleToGroup+0xe2>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80046a8:	6864      	ldr	r4, [r4, #4]
 80046aa:	464b      	mov	r3, r9
 80046ac:	601c      	str	r4, [r3, #0]
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d1ee      	bne.n	8004690 <AddModuleToGroup+0x68>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 80046b2:	783b      	ldrb	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01b      	beq.n	80046f0 <AddModuleToGroup+0xc8>
	for(i =0; i < MaxNumOfGroups; i++){
 80046b8:	3401      	adds	r4, #1
 80046ba:	370a      	adds	r7, #10
 80046bc:	2c0a      	cmp	r4, #10
 80046be:	d1f8      	bne.n	80046b2 <AddModuleToGroup+0x8a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 80046c0:	9f01      	ldr	r7, [sp, #4]
 80046c2:	3f01      	subs	r7, #1
 80046c4:	4918      	ldr	r1, [pc, #96]	; (8004728 <AddModuleToGroup+0x100>)
 80046c6:	007f      	lsls	r7, r7, #1
 80046c8:	2201      	movs	r2, #1
 80046ca:	40a2      	lsls	r2, r4
 80046cc:	5a7b      	ldrh	r3, [r7, r1]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80046d2:	2000      	movs	r0, #0
 80046d4:	e008      	b.n	80046e8 <AddModuleToGroup+0xc0>
			groupModules[module - 1] |=(0x0001 << i);
 80046d6:	9f01      	ldr	r7, [sp, #4]
 80046d8:	3f01      	subs	r7, #1
 80046da:	4913      	ldr	r1, [pc, #76]	; (8004728 <AddModuleToGroup+0x100>)
 80046dc:	007f      	lsls	r7, r7, #1
 80046de:	2201      	movs	r2, #1
 80046e0:	40a2      	lsls	r2, r4
 80046e2:	5a7b      	ldrh	r3, [r7, r1]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	527b      	strh	r3, [r7, r1]
}
 80046e8:	b002      	add	sp, #8
 80046ea:	bc80      	pop	{r7}
 80046ec:	46b9      	mov	r9, r7
 80046ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i],group);
 80046f0:	00a0      	lsls	r0, r4, #2
 80046f2:	1900      	adds	r0, r0, r4
 80046f4:	0040      	lsls	r0, r0, #1
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <AddModuleToGroup+0xe8>)
 80046f8:	1818      	adds	r0, r3, r0
 80046fa:	0031      	movs	r1, r6
 80046fc:	f010 f87d 	bl	80147fa <strcpy>
			break;
 8004700:	e7de      	b.n	80046c0 <AddModuleToGroup+0x98>
			return BOS_ERR_Keyword;
 8004702:	2006      	movs	r0, #6
 8004704:	e7f0      	b.n	80046e8 <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingAlias;
 8004706:	2007      	movs	r0, #7
 8004708:	e7ee      	b.n	80046e8 <AddModuleToGroup+0xc0>
			return BOS_ERR_ExistingCmd;
 800470a:	2008      	movs	r0, #8
 800470c:	e7ec      	b.n	80046e8 <AddModuleToGroup+0xc0>
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	200005f8 	.word	0x200005f8
 8004714:	08018cc4 	.word	0x08018cc4
 8004718:	20000030 	.word	0x20000030
 800471c:	2000070a 	.word	0x2000070a
 8004720:	200000b0 	.word	0x200000b0
 8004724:	20000880 	.word	0x20000880
 8004728:	2000065c 	.word	0x2000065c

0800472c <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 800472c:	b510      	push	{r4, lr}
 800472e:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004730:	201e      	movs	r0, #30
 8004732:	f00f fa43 	bl	8013bbc <malloc>
 8004736:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004738:	221e      	movs	r2, #30
 800473a:	2100      	movs	r1, #0
 800473c:	f00f fa69 	bl	8013c12 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004740:	4908      	ldr	r1, [pc, #32]	; (8004764 <GetDateString+0x38>)
 8004742:	7d8b      	ldrb	r3, [r1, #22]
 8004744:	7d0a      	ldrb	r2, [r1, #20]
 8004746:	3a01      	subs	r2, #1
 8004748:	0092      	lsls	r2, r2, #2
 800474a:	4807      	ldr	r0, [pc, #28]	; (8004768 <GetDateString+0x3c>)
 800474c:	5812      	ldr	r2, [r2, r0]
 800474e:	8b08      	ldrh	r0, [r1, #24]
 8004750:	9001      	str	r0, [sp, #4]
 8004752:	7d49      	ldrb	r1, [r1, #21]
 8004754:	9100      	str	r1, [sp, #0]
 8004756:	4905      	ldr	r1, [pc, #20]	; (800476c <GetDateString+0x40>)
 8004758:	0020      	movs	r0, r4
 800475a:	f010 f813 	bl	8014784 <siprintf>
	return buffer;
}
 800475e:	0020      	movs	r0, r4
 8004760:	b002      	add	sp, #8
 8004762:	bd10      	pop	{r4, pc}
 8004764:	20006278 	.word	0x20006278
 8004768:	08018d98 	.word	0x08018d98
 800476c:	08018cd4 	.word	0x08018cd4

08004770 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004770:	b500      	push	{lr}
 8004772:	b085      	sub	sp, #20
 8004774:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <Bridge+0x24>)
 8004778:	7819      	ldrb	r1, [r3, #0]
 800477a:	2301      	movs	r3, #1
 800477c:	9303      	str	r3, [sp, #12]
 800477e:	3b02      	subs	r3, #2
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	3303      	adds	r3, #3
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	000b      	movs	r3, r1
 800478a:	f003 fe21 	bl	80083d0 <StartScastDMAStream>
}
 800478e:	b005      	add	sp, #20
 8004790:	bd00      	pop	{pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	2000080e 	.word	0x2000080e

08004798 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004798:	b530      	push	{r4, r5, lr}
 800479a:	b087      	sub	sp, #28
 800479c:	0005      	movs	r5, r0
 800479e:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 80047a0:	2300      	movs	r3, #0
 80047a2:	9304      	str	r3, [sp, #16]
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	9302      	str	r3, [sp, #8]
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2100      	movs	r1, #0
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fe fff1 	bl	8003798 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 80047b6:	1e6a      	subs	r2, r5, #1
 80047b8:	00d3      	lsls	r3, r2, #3
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4a14      	ldr	r2, [pc, #80]	; (8004810 <Unbridge+0x78>)
 80047c0:	589b      	ldr	r3, [r3, r2]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d014      	beq.n	80047f0 <Unbridge+0x58>
 80047c6:	1e62      	subs	r2, r4, #1
 80047c8:	00d3      	lsls	r3, r2, #3
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4a10      	ldr	r2, [pc, #64]	; (8004810 <Unbridge+0x78>)
 80047d0:	589b      	ldr	r3, [r3, r2]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d104      	bne.n	80047e0 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 80047d6:	0028      	movs	r0, r5
 80047d8:	f007 f9f4 	bl	800bbc4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047dc:	2000      	movs	r0, #0
 80047de:	e013      	b.n	8004808 <Unbridge+0x70>
		SwitchStreamDMAToMsg(port1);
 80047e0:	0028      	movs	r0, r5
 80047e2:	f007 f9ef 	bl	800bbc4 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80047e6:	0020      	movs	r0, r4
 80047e8:	f007 f9ec 	bl	800bbc4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047ec:	2000      	movs	r0, #0
 80047ee:	e00b      	b.n	8004808 <Unbridge+0x70>
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 80047f0:	1e62      	subs	r2, r4, #1
 80047f2:	00d3      	lsls	r3, r2, #3
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4a05      	ldr	r2, [pc, #20]	; (8004810 <Unbridge+0x78>)
 80047fa:	589b      	ldr	r3, [r3, r2]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 8004800:	0020      	movs	r0, r4
 8004802:	f007 f9df 	bl	800bbc4 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004806:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004808:	b007      	add	sp, #28
 800480a:	bd30      	pop	{r4, r5, pc}
		return BOS_ERR_WrongValue;
 800480c:	2068      	movs	r0, #104	; 0x68
 800480e:	e7fb      	b.n	8004808 <Unbridge+0x70>
 8004810:	200011f4 	.word	0x200011f4

08004814 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004814:	b530      	push	{r4, r5, lr}
	for(int i =0; string[i]; i++){
 8004816:	7803      	ldrb	r3, [r0, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00f      	beq.n	800483c <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 800481c:	4d08      	ldr	r5, [pc, #32]	; (8004840 <StringToLowerCase+0x2c>)
 800481e:	2403      	movs	r4, #3
 8004820:	e004      	b.n	800482c <StringToLowerCase+0x18>
 8004822:	7001      	strb	r1, [r0, #0]
	for(int i =0; string[i]; i++){
 8004824:	3001      	adds	r0, #1
 8004826:	7803      	ldrb	r3, [r0, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <StringToLowerCase+0x28>
		string[i] =tolower(string[i]);
 800482c:	5cea      	ldrb	r2, [r5, r3]
 800482e:	4022      	ands	r2, r4
 8004830:	0019      	movs	r1, r3
 8004832:	2a01      	cmp	r2, #1
 8004834:	d1f5      	bne.n	8004822 <StringToLowerCase+0xe>
 8004836:	3320      	adds	r3, #32
 8004838:	0019      	movs	r1, r3
 800483a:	e7f2      	b.n	8004822 <StringToLowerCase+0xe>
	}
}
 800483c:	bd30      	pop	{r4, r5, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	0801b505 	.word	0x0801b505

08004844 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004846:	46ce      	mov	lr, r9
 8004848:	4647      	mov	r7, r8
 800484a:	b580      	push	{r7, lr}
 800484c:	b089      	sub	sp, #36	; 0x24
 800484e:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004850:	4bde      	ldr	r3, [pc, #888]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004852:	781c      	ldrb	r4, [r3, #0]
 8004854:	2c05      	cmp	r4, #5
 8004856:	d100      	bne.n	800485a <ParseSnippetCondition+0x16>
 8004858:	e21a      	b.n	8004c90 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 800485a:	49dd      	ldr	r1, [pc, #884]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 800485c:	00a3      	lsls	r3, r4, #2
 800485e:	191a      	adds	r2, r3, r4
 8004860:	0092      	lsls	r2, r2, #2
 8004862:	2000      	movs	r0, #0
 8004864:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004866:	191a      	adds	r2, r3, r4
 8004868:	0092      	lsls	r2, r2, #2
 800486a:	188a      	adds	r2, r1, r2
 800486c:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 800486e:	1918      	adds	r0, r3, r4
 8004870:	0080      	lsls	r0, r0, #2
 8004872:	3002      	adds	r0, #2
 8004874:	1840      	adds	r0, r0, r1
 8004876:	2204      	movs	r2, #4
 8004878:	2100      	movs	r1, #0
 800487a:	f00f f9ca 	bl	8013c12 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 800487e:	782b      	ldrb	r3, [r5, #0]
 8004880:	2b62      	cmp	r3, #98	; 0x62
 8004882:	d102      	bne.n	800488a <ParseSnippetCondition+0x46>
 8004884:	78ab      	ldrb	r3, [r5, #2]
 8004886:	2b2e      	cmp	r3, #46	; 0x2e
 8004888:	d032      	beq.n	80048f0 <ParseSnippetCondition+0xac>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800488a:	4cd2      	ldr	r4, [pc, #840]	; (8004bd4 <ParseSnippetCondition+0x390>)
 800488c:	0029      	movs	r1, r5
 800488e:	0020      	movs	r0, r4
 8004890:	f00f ffb3 	bl	80147fa <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004894:	4dd0      	ldr	r5, [pc, #832]	; (8004bd8 <ParseSnippetCondition+0x394>)
 8004896:	0029      	movs	r1, r5
 8004898:	0020      	movs	r0, r4
 800489a:	f010 fe25 	bl	80154e8 <strtok>
 800489e:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 80048a0:	0029      	movs	r1, r5
 80048a2:	2000      	movs	r0, #0
 80048a4:	f010 fe20 	bl	80154e8 <strtok>
 80048a8:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 80048aa:	0029      	movs	r1, r5
 80048ac:	2000      	movs	r0, #0
 80048ae:	f010 fe1b 	bl	80154e8 <strtok>
 80048b2:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 80048b4:	2c00      	cmp	r4, #0
 80048b6:	d100      	bne.n	80048ba <ParseSnippetCondition+0x76>
 80048b8:	e1ec      	b.n	8004c94 <ParseSnippetCondition+0x450>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 80048ba:	0020      	movs	r0, r4
 80048bc:	f7ff f884 	bl	80039c8 <IsModuleParameter>
 80048c0:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80048c2:	d100      	bne.n	80048c6 <ParseSnippetCondition+0x82>
 80048c4:	e194      	b.n	8004bf0 <ParseSnippetCondition+0x3ac>
 80048c6:	2e00      	cmp	r6, #0
 80048c8:	d000      	beq.n	80048cc <ParseSnippetCondition+0x88>
 80048ca:	e193      	b.n	8004bf4 <ParseSnippetCondition+0x3b0>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 80048cc:	3667      	adds	r6, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	d000      	beq.n	80048d4 <ParseSnippetCondition+0x90>
 80048d2:	e1ba      	b.n	8004c4a <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 80048d4:	4dbd      	ldr	r5, [pc, #756]	; (8004bcc <ParseSnippetCondition+0x388>)
 80048d6:	782b      	ldrb	r3, [r5, #0]
 80048d8:	49bd      	ldr	r1, [pc, #756]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 80048da:	009a      	lsls	r2, r3, #2
 80048dc:	18d0      	adds	r0, r2, r3
 80048de:	0080      	lsls	r0, r0, #2
 80048e0:	3e65      	subs	r6, #101	; 0x65
 80048e2:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80048e4:	180a      	adds	r2, r1, r0
 80048e6:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80048e8:	3301      	adds	r3, #1
 80048ea:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 80048ec:	2600      	movs	r6, #0
 80048ee:	e1ac      	b.n	8004c4a <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048f0:	786f      	ldrb	r7, [r5, #1]
 80048f2:	3f30      	subs	r7, #48	; 0x30
 80048f4:	b2ff      	uxtb	r7, r7
	BOS_Status status =BOS_OK;
 80048f6:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048f8:	2f03      	cmp	r7, #3
 80048fa:	d900      	bls.n	80048fe <ParseSnippetCondition+0xba>
 80048fc:	e1a5      	b.n	8004c4a <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80048fe:	4ab4      	ldr	r2, [pc, #720]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004900:	00a3      	lsls	r3, r4, #2
 8004902:	1919      	adds	r1, r3, r4
 8004904:	0089      	lsls	r1, r1, #2
 8004906:	2001      	movs	r0, #1
 8004908:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 800490a:	1853      	adds	r3, r2, r1
 800490c:	2200      	movs	r2, #0
 800490e:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 8004910:	709f      	strb	r7, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 8004912:	1cee      	adds	r6, r5, #3
 8004914:	3207      	adds	r2, #7
 8004916:	49b1      	ldr	r1, [pc, #708]	; (8004bdc <ParseSnippetCondition+0x398>)
 8004918:	0030      	movs	r0, r6
 800491a:	f00f ff76 	bl	801480a <strncmp>
 800491e:	2800      	cmp	r0, #0
 8004920:	d124      	bne.n	800496c <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004922:	00a3      	lsls	r3, r4, #2
 8004924:	191c      	adds	r4, r3, r4
 8004926:	00a4      	lsls	r4, r4, #2
 8004928:	4ba9      	ldr	r3, [pc, #676]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 800492a:	191c      	adds	r4, r3, r4
 800492c:	2305      	movs	r3, #5
 800492e:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004930:	00fa      	lsls	r2, r7, #3
 8004932:	19d2      	adds	r2, r2, r7
 8004934:	4baa      	ldr	r3, [pc, #680]	; (8004be0 <ParseSnippetCondition+0x39c>)
 8004936:	189b      	adds	r3, r3, r2
 8004938:	7a1b      	ldrb	r3, [r3, #8]
 800493a:	2201      	movs	r2, #1
 800493c:	0016      	movs	r6, r2
 800493e:	401e      	ands	r6, r3
 8004940:	421a      	tst	r2, r3
 8004942:	d005      	beq.n	8004950 <ParseSnippetCondition+0x10c>
				status =BOS_OK;
 8004944:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004946:	4aa1      	ldr	r2, [pc, #644]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004948:	7813      	ldrb	r3, [r2, #0]
 800494a:	3301      	adds	r3, #1
 800494c:	7013      	strb	r3, [r2, #0]
 800494e:	e17c      	b.n	8004c4a <ParseSnippetCondition+0x406>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004950:	2301      	movs	r3, #1
 8004952:	9305      	str	r3, [sp, #20]
 8004954:	2300      	movs	r3, #0
 8004956:	9304      	str	r3, [sp, #16]
 8004958:	9303      	str	r3, [sp, #12]
 800495a:	9302      	str	r3, [sp, #8]
 800495c:	9301      	str	r3, [sp, #4]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2200      	movs	r2, #0
 8004962:	2101      	movs	r1, #1
 8004964:	0038      	movs	r0, r7
 8004966:	f008 fb3b 	bl	800cfe0 <SetButtonEvents>
 800496a:	e7ec      	b.n	8004946 <ParseSnippetCondition+0x102>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 800496c:	220e      	movs	r2, #14
 800496e:	499d      	ldr	r1, [pc, #628]	; (8004be4 <ParseSnippetCondition+0x3a0>)
 8004970:	0030      	movs	r0, r6
 8004972:	f00f ff4a 	bl	801480a <strncmp>
 8004976:	2800      	cmp	r0, #0
 8004978:	d120      	bne.n	80049bc <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 800497a:	00a3      	lsls	r3, r4, #2
 800497c:	191c      	adds	r4, r3, r4
 800497e:	00a4      	lsls	r4, r4, #2
 8004980:	4b93      	ldr	r3, [pc, #588]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004982:	191c      	adds	r4, r3, r4
 8004984:	2306      	movs	r3, #6
 8004986:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004988:	00fa      	lsls	r2, r7, #3
 800498a:	19d2      	adds	r2, r2, r7
 800498c:	4b94      	ldr	r3, [pc, #592]	; (8004be0 <ParseSnippetCondition+0x39c>)
 800498e:	189b      	adds	r3, r3, r2
 8004990:	7a1b      	ldrb	r3, [r3, #8]
 8004992:	2202      	movs	r2, #2
 8004994:	0016      	movs	r6, r2
 8004996:	401e      	ands	r6, r3
 8004998:	421a      	tst	r2, r3
 800499a:	d001      	beq.n	80049a0 <ParseSnippetCondition+0x15c>
				status =BOS_OK;
 800499c:	2600      	movs	r6, #0
 800499e:	e7d2      	b.n	8004946 <ParseSnippetCondition+0x102>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80049a0:	2301      	movs	r3, #1
 80049a2:	9305      	str	r3, [sp, #20]
 80049a4:	2300      	movs	r3, #0
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	9303      	str	r3, [sp, #12]
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	3a01      	subs	r2, #1
 80049b2:	2100      	movs	r1, #0
 80049b4:	0038      	movs	r0, r7
 80049b6:	f008 fb13 	bl	800cfe0 <SetButtonEvents>
 80049ba:	e7c4      	b.n	8004946 <ParseSnippetCondition+0x102>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 80049bc:	220c      	movs	r2, #12
 80049be:	498a      	ldr	r1, [pc, #552]	; (8004be8 <ParseSnippetCondition+0x3a4>)
 80049c0:	0030      	movs	r0, r6
 80049c2:	f00f ff22 	bl	801480a <strncmp>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d17b      	bne.n	8004ac2 <ParseSnippetCondition+0x27e>
				if(!button[port].pressedX1Sec){
 80049ca:	00fa      	lsls	r2, r7, #3
 80049cc:	19d2      	adds	r2, r2, r7
 80049ce:	4b84      	ldr	r3, [pc, #528]	; (8004be0 <ParseSnippetCondition+0x39c>)
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	789e      	ldrb	r6, [r3, #2]
 80049d4:	2e00      	cmp	r6, #0
 80049d6:	d00f      	beq.n	80049f8 <ParseSnippetCondition+0x1b4>
				else if(!button[port].pressedX2Sec){
 80049d8:	00fa      	lsls	r2, r7, #3
 80049da:	19d2      	adds	r2, r2, r7
 80049dc:	4b80      	ldr	r3, [pc, #512]	; (8004be0 <ParseSnippetCondition+0x39c>)
 80049de:	189b      	adds	r3, r3, r2
 80049e0:	78de      	ldrb	r6, [r3, #3]
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	d029      	beq.n	8004a3a <ParseSnippetCondition+0x1f6>
				else if(!button[port].pressedX3Sec){
 80049e6:	00fa      	lsls	r2, r7, #3
 80049e8:	19d2      	adds	r2, r2, r7
 80049ea:	4b7d      	ldr	r3, [pc, #500]	; (8004be0 <ParseSnippetCondition+0x39c>)
 80049ec:	189b      	adds	r3, r3, r2
 80049ee:	791e      	ldrb	r6, [r3, #4]
 80049f0:	2e00      	cmp	r6, #0
 80049f2:	d044      	beq.n	8004a7e <ParseSnippetCondition+0x23a>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80049f4:	260c      	movs	r6, #12
 80049f6:	e7a6      	b.n	8004946 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80049f8:	4b75      	ldr	r3, [pc, #468]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 80049fa:	4698      	mov	r8, r3
 80049fc:	00a3      	lsls	r3, r4, #2
 80049fe:	191b      	adds	r3, r3, r4
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4443      	add	r3, r8
 8004a04:	2209      	movs	r2, #9
 8004a06:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a08:	0028      	movs	r0, r5
 8004a0a:	300f      	adds	r0, #15
 8004a0c:	f00f f8a5 	bl	8013b5a <atoi>
 8004a10:	b2c3      	uxtb	r3, r0
 8004a12:	4a6e      	ldr	r2, [pc, #440]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004a14:	7811      	ldrb	r1, [r2, #0]
 8004a16:	008a      	lsls	r2, r1, #2
 8004a18:	1852      	adds	r2, r2, r1
 8004a1a:	0092      	lsls	r2, r2, #2
 8004a1c:	4442      	add	r2, r8
 8004a1e:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a20:	2201      	movs	r2, #1
 8004a22:	9205      	str	r2, [sp, #20]
 8004a24:	2200      	movs	r2, #0
 8004a26:	9204      	str	r2, [sp, #16]
 8004a28:	9203      	str	r2, [sp, #12]
 8004a2a:	9202      	str	r2, [sp, #8]
 8004a2c:	9201      	str	r2, [sp, #4]
 8004a2e:	9200      	str	r2, [sp, #0]
 8004a30:	2100      	movs	r1, #0
 8004a32:	0038      	movs	r0, r7
 8004a34:	f008 fad4 	bl	800cfe0 <SetButtonEvents>
					status =BOS_OK;
 8004a38:	e785      	b.n	8004946 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004a3c:	4698      	mov	r8, r3
 8004a3e:	00a3      	lsls	r3, r4, #2
 8004a40:	191b      	adds	r3, r3, r4
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4443      	add	r3, r8
 8004a46:	220a      	movs	r2, #10
 8004a48:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a4a:	0028      	movs	r0, r5
 8004a4c:	300f      	adds	r0, #15
 8004a4e:	f00f f884 	bl	8013b5a <atoi>
 8004a52:	b2c0      	uxtb	r0, r0
 8004a54:	4b5d      	ldr	r3, [pc, #372]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	0093      	lsls	r3, r2, #2
 8004a5a:	189b      	adds	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4443      	add	r3, r8
 8004a60:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a62:	2301      	movs	r3, #1
 8004a64:	9305      	str	r3, [sp, #20]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	9303      	str	r3, [sp, #12]
 8004a6c:	9302      	str	r3, [sp, #8]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	9000      	str	r0, [sp, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	0038      	movs	r0, r7
 8004a78:	f008 fab2 	bl	800cfe0 <SetButtonEvents>
					status =BOS_OK;
 8004a7c:	e763      	b.n	8004946 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004a7e:	4b54      	ldr	r3, [pc, #336]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004a80:	4698      	mov	r8, r3
 8004a82:	00a3      	lsls	r3, r4, #2
 8004a84:	191b      	adds	r3, r3, r4
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4443      	add	r3, r8
 8004a8a:	220b      	movs	r2, #11
 8004a8c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a8e:	0028      	movs	r0, r5
 8004a90:	300f      	adds	r0, #15
 8004a92:	f00f f862 	bl	8013b5a <atoi>
 8004a96:	b2c0      	uxtb	r0, r0
 8004a98:	4b4c      	ldr	r3, [pc, #304]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	0093      	lsls	r3, r2, #2
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4443      	add	r3, r8
 8004aa4:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	9305      	str	r3, [sp, #20]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	9303      	str	r3, [sp, #12]
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	9001      	str	r0, [sp, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2100      	movs	r1, #0
 8004aba:	0038      	movs	r0, r7
 8004abc:	f008 fa90 	bl	800cfe0 <SetButtonEvents>
					status =BOS_OK;
 8004ac0:	e741      	b.n	8004946 <ParseSnippetCondition+0x102>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004ac2:	220d      	movs	r2, #13
 8004ac4:	4949      	ldr	r1, [pc, #292]	; (8004bec <ParseSnippetCondition+0x3a8>)
 8004ac6:	0030      	movs	r0, r6
 8004ac8:	f00f fe9f 	bl	801480a <strncmp>
	BOS_Status status =BOS_OK;
 8004acc:	2600      	movs	r6, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d000      	beq.n	8004ad4 <ParseSnippetCondition+0x290>
 8004ad2:	e738      	b.n	8004946 <ParseSnippetCondition+0x102>
				if(!button[port].releasedY1Sec){
 8004ad4:	00fa      	lsls	r2, r7, #3
 8004ad6:	19d2      	adds	r2, r2, r7
 8004ad8:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <ParseSnippetCondition+0x39c>)
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	795e      	ldrb	r6, [r3, #5]
 8004ade:	2e00      	cmp	r6, #0
 8004ae0:	d00f      	beq.n	8004b02 <ParseSnippetCondition+0x2be>
				else if(!button[port].releasedY2Sec){
 8004ae2:	00fa      	lsls	r2, r7, #3
 8004ae4:	19d2      	adds	r2, r2, r7
 8004ae6:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <ParseSnippetCondition+0x39c>)
 8004ae8:	189b      	adds	r3, r3, r2
 8004aea:	799e      	ldrb	r6, [r3, #6]
 8004aec:	2e00      	cmp	r6, #0
 8004aee:	d02a      	beq.n	8004b46 <ParseSnippetCondition+0x302>
				else if(!button[port].releasedY3Sec){
 8004af0:	00fa      	lsls	r2, r7, #3
 8004af2:	19d2      	adds	r2, r2, r7
 8004af4:	4b3a      	ldr	r3, [pc, #232]	; (8004be0 <ParseSnippetCondition+0x39c>)
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	79de      	ldrb	r6, [r3, #7]
 8004afa:	2e00      	cmp	r6, #0
 8004afc:	d044      	beq.n	8004b88 <ParseSnippetCondition+0x344>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004afe:	260d      	movs	r6, #13
 8004b00:	e721      	b.n	8004946 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004b02:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004b04:	4698      	mov	r8, r3
 8004b06:	00a3      	lsls	r3, r4, #2
 8004b08:	191b      	adds	r3, r3, r4
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4443      	add	r3, r8
 8004b0e:	220c      	movs	r2, #12
 8004b10:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b12:	0028      	movs	r0, r5
 8004b14:	3010      	adds	r0, #16
 8004b16:	f00f f820 	bl	8013b5a <atoi>
 8004b1a:	b2c0      	uxtb	r0, r0
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004b1e:	781a      	ldrb	r2, [r3, #0]
 8004b20:	0093      	lsls	r3, r2, #2
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4443      	add	r3, r8
 8004b28:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	9305      	str	r3, [sp, #20]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	9303      	str	r3, [sp, #12]
 8004b34:	9002      	str	r0, [sp, #8]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	0038      	movs	r0, r7
 8004b40:	f008 fa4e 	bl	800cfe0 <SetButtonEvents>
					status =BOS_OK;
 8004b44:	e6ff      	b.n	8004946 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004b48:	4698      	mov	r8, r3
 8004b4a:	2314      	movs	r3, #20
 8004b4c:	4699      	mov	r9, r3
 8004b4e:	435c      	muls	r4, r3
 8004b50:	4444      	add	r4, r8
 8004b52:	3b07      	subs	r3, #7
 8004b54:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b56:	0028      	movs	r0, r5
 8004b58:	3010      	adds	r0, #16
 8004b5a:	f00e fffe 	bl	8013b5a <atoi>
 8004b5e:	b2c0      	uxtb	r0, r0
 8004b60:	4b1a      	ldr	r3, [pc, #104]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	464a      	mov	r2, r9
 8004b66:	4353      	muls	r3, r2
 8004b68:	4443      	add	r3, r8
 8004b6a:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	9305      	str	r3, [sp, #20]
 8004b70:	2100      	movs	r1, #0
 8004b72:	9104      	str	r1, [sp, #16]
 8004b74:	9003      	str	r0, [sp, #12]
 8004b76:	9102      	str	r1, [sp, #8]
 8004b78:	9101      	str	r1, [sp, #4]
 8004b7a:	9100      	str	r1, [sp, #0]
 8004b7c:	000b      	movs	r3, r1
 8004b7e:	000a      	movs	r2, r1
 8004b80:	0038      	movs	r0, r7
 8004b82:	f008 fa2d 	bl	800cfe0 <SetButtonEvents>
					status =BOS_OK;
 8004b86:	e6de      	b.n	8004946 <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <ParseSnippetCondition+0x38c>)
 8004b8a:	4698      	mov	r8, r3
 8004b8c:	2314      	movs	r3, #20
 8004b8e:	4699      	mov	r9, r3
 8004b90:	435c      	muls	r4, r3
 8004b92:	4444      	add	r4, r8
 8004b94:	3b06      	subs	r3, #6
 8004b96:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b98:	0028      	movs	r0, r5
 8004b9a:	3010      	adds	r0, #16
 8004b9c:	f00e ffdd 	bl	8013b5a <atoi>
 8004ba0:	b2c0      	uxtb	r0, r0
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <ParseSnippetCondition+0x388>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	464a      	mov	r2, r9
 8004ba8:	4353      	muls	r3, r2
 8004baa:	4443      	add	r3, r8
 8004bac:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004bae:	2301      	movs	r3, #1
 8004bb0:	9305      	str	r3, [sp, #20]
 8004bb2:	9004      	str	r0, [sp, #16]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	9103      	str	r1, [sp, #12]
 8004bb8:	9102      	str	r1, [sp, #8]
 8004bba:	9101      	str	r1, [sp, #4]
 8004bbc:	9100      	str	r1, [sp, #0]
 8004bbe:	000b      	movs	r3, r1
 8004bc0:	000a      	movs	r2, r1
 8004bc2:	0038      	movs	r0, r7
 8004bc4:	f008 fa0c 	bl	800cfe0 <SetButtonEvents>
					status =BOS_OK;
 8004bc8:	e6bd      	b.n	8004946 <ParseSnippetCondition+0x102>
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	2000099f 	.word	0x2000099f
 8004bd0:	20006294 	.word	0x20006294
 8004bd4:	20000904 	.word	0x20000904
 8004bd8:	080186e8 	.word	0x080186e8
 8004bdc:	08019600 	.word	0x08019600
 8004be0:	20001358 	.word	0x20001358
 8004be4:	08018db4 	.word	0x08018db4
 8004be8:	08018dc4 	.word	0x08018dc4
 8004bec:	08018dd4 	.word	0x08018dd4
			else if(secondPart != NULL && thirdPart != NULL){
 8004bf0:	2e00      	cmp	r6, #0
 8004bf2:	d051      	beq.n	8004c98 <ParseSnippetCondition+0x454>
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	d051      	beq.n	8004c9c <ParseSnippetCondition+0x458>
				modPar2 =IsModuleParameter(thirdPart);
 8004bf8:	0028      	movs	r0, r5
 8004bfa:	f7fe fee5 	bl	80039c8 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d029      	beq.n	8004c56 <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004c02:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <ParseSnippetCondition+0x460>)
 8004c04:	781d      	ldrb	r5, [r3, #0]
 8004c06:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <ParseSnippetCondition+0x464>)
 8004c08:	00ab      	lsls	r3, r5, #2
 8004c0a:	1959      	adds	r1, r3, r5
 8004c0c:	0089      	lsls	r1, r1, #2
 8004c0e:	2704      	movs	r7, #4
 8004c10:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c12:	1959      	adds	r1, r3, r5
 8004c14:	0089      	lsls	r1, r1, #2
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004c1a:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004c1c:	4c21      	ldr	r4, [pc, #132]	; (8004ca4 <ParseSnippetCondition+0x460>)
 8004c1e:	7825      	ldrb	r5, [r4, #0]
 8004c20:	0030      	movs	r0, r6
 8004c22:	f7fe fedd 	bl	80039e0 <IsMathOperator>
 8004c26:	4a20      	ldr	r2, [pc, #128]	; (8004ca8 <ParseSnippetCondition+0x464>)
 8004c28:	00ab      	lsls	r3, r5, #2
 8004c2a:	195b      	adds	r3, r3, r5
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	18d3      	adds	r3, r2, r3
 8004c30:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004c32:	7821      	ldrb	r1, [r4, #0]
 8004c34:	008b      	lsls	r3, r1, #2
 8004c36:	185b      	adds	r3, r3, r1
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	785b      	ldrb	r3, [r3, #1]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d02e      	beq.n	8004ca0 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004c42:	3101      	adds	r1, #1
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <ParseSnippetCondition+0x460>)
 8004c46:	7019      	strb	r1, [r3, #0]
				return BOS_OK;
 8004c48:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004c4a:	0030      	movs	r0, r6
 8004c4c:	b009      	add	sp, #36	; 0x24
 8004c4e:	bcc0      	pop	{r6, r7}
 8004c50:	46b9      	mov	r9, r7
 8004c52:	46b0      	mov	r8, r6
 8004c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004c56:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <ParseSnippetCondition+0x460>)
 8004c58:	4698      	mov	r8, r3
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	4f12      	ldr	r7, [pc, #72]	; (8004ca8 <ParseSnippetCondition+0x464>)
 8004c5e:	0093      	lsls	r3, r2, #2
 8004c60:	1899      	adds	r1, r3, r2
 8004c62:	0089      	lsls	r1, r1, #2
 8004c64:	2003      	movs	r0, #3
 8004c66:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c68:	187b      	adds	r3, r7, r1
 8004c6a:	70dc      	strb	r4, [r3, #3]
					float constant =atof(thirdPart);
 8004c6c:	0028      	movs	r0, r5
 8004c6e:	f00e ff6f 	bl	8013b50 <atof>
 8004c72:	f7fe f903 	bl	8002e7c <__aeabi_d2f>
 8004c76:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c78:	4643      	mov	r3, r8
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	0098      	lsls	r0, r3, #2
 8004c7e:	18c0      	adds	r0, r0, r3
 8004c80:	0080      	lsls	r0, r0, #2
 8004c82:	3006      	adds	r0, #6
 8004c84:	19c0      	adds	r0, r0, r7
 8004c86:	2204      	movs	r2, #4
 8004c88:	a907      	add	r1, sp, #28
 8004c8a:	f00e ffb9 	bl	8013c00 <memcpy>
 8004c8e:	e7c5      	b.n	8004c1c <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004c90:	260e      	movs	r6, #14
 8004c92:	e7da      	b.n	8004c4a <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 8004c94:	2667      	movs	r6, #103	; 0x67
 8004c96:	e7d8      	b.n	8004c4a <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8004c98:	2667      	movs	r6, #103	; 0x67
 8004c9a:	e7d6      	b.n	8004c4a <ParseSnippetCondition+0x406>
 8004c9c:	2667      	movs	r6, #103	; 0x67
 8004c9e:	e7d4      	b.n	8004c4a <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8004ca0:	2667      	movs	r6, #103	; 0x67
 8004ca2:	e7d2      	b.n	8004c4a <ParseSnippetCondition+0x406>
 8004ca4:	2000099f 	.word	0x2000099f
 8004ca8:	20006294 	.word	0x20006294

08004cac <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	000c      	movs	r4, r1
	switch(code){
 8004cb0:	2802      	cmp	r0, #2
 8004cb2:	d017      	beq.n	8004ce4 <AddSnippet+0x38>
 8004cb4:	2803      	cmp	r0, #3
 8004cb6:	d003      	beq.n	8004cc0 <AddSnippet+0x14>
 8004cb8:	2801      	cmp	r0, #1
 8004cba:	d00f      	beq.n	8004cdc <AddSnippet+0x30>
 8004cbc:	2000      	movs	r0, #0
}
 8004cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets - 1].state = true;
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <AddSnippet+0xec>)
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	3a01      	subs	r2, #1
 8004cc6:	0093      	lsls	r3, r2, #2
 8004cc8:	189b      	adds	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4a33      	ldr	r2, [pc, #204]	; (8004d9c <AddSnippet+0xf0>)
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004cd4:	f005 fb3a 	bl	800a34c <SaveToRO>
	return BOS_OK;
 8004cd8:	2000      	movs	r0, #0
			break;
 8004cda:	e7f0      	b.n	8004cbe <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004cdc:	0008      	movs	r0, r1
 8004cde:	f7ff fdb1 	bl	8004844 <ParseSnippetCondition>
 8004ce2:	e7ec      	b.n	8004cbe <AddSnippet+0x12>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004ce4:	4b2c      	ldr	r3, [pc, #176]	; (8004d98 <AddSnippet+0xec>)
 8004ce6:	781d      	ldrb	r5, [r3, #0]
 8004ce8:	3d01      	subs	r5, #1
 8004cea:	00ab      	lsls	r3, r5, #2
 8004cec:	195b      	adds	r3, r3, r5
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <AddSnippet+0xf0>)
 8004cf2:	18d3      	adds	r3, r2, r3
 8004cf4:	68de      	ldr	r6, [r3, #12]
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d032      	beq.n	8004d60 <AddSnippet+0xb4>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004cfa:	0030      	movs	r0, r6
 8004cfc:	f7fb fa0c 	bl	8000118 <strlen>
 8004d00:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004d02:	0020      	movs	r0, r4
 8004d04:	f7fb fa08 	bl	8000118 <strlen>
 8004d08:	1839      	adds	r1, r7, r0
 8004d0a:	3102      	adds	r1, #2
 8004d0c:	0030      	movs	r0, r6
 8004d0e:	f00f fce9 	bl	80146e4 <realloc>
 8004d12:	4e22      	ldr	r6, [pc, #136]	; (8004d9c <AddSnippet+0xf0>)
 8004d14:	00ab      	lsls	r3, r5, #2
 8004d16:	195d      	adds	r5, r3, r5
 8004d18:	00ad      	lsls	r5, r5, #2
 8004d1a:	1975      	adds	r5, r6, r5
 8004d1c:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004d1e:	4d1e      	ldr	r5, [pc, #120]	; (8004d98 <AddSnippet+0xec>)
 8004d20:	782a      	ldrb	r2, [r5, #0]
 8004d22:	3a01      	subs	r2, #1
 8004d24:	0093      	lsls	r3, r2, #2
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	18f3      	adds	r3, r6, r3
 8004d2c:	1c7a      	adds	r2, r7, #1
 8004d2e:	68d8      	ldr	r0, [r3, #12]
 8004d30:	1880      	adds	r0, r0, r2
 8004d32:	0021      	movs	r1, r4
 8004d34:	f00f fd61 	bl	80147fa <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004d38:	782a      	ldrb	r2, [r5, #0]
 8004d3a:	3a01      	subs	r2, #1
 8004d3c:	0093      	lsls	r3, r2, #2
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	18f3      	adds	r3, r6, r3
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2213      	movs	r2, #19
 8004d48:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004d4a:	782a      	ldrb	r2, [r5, #0]
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0093      	lsls	r3, r2, #2
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	18f6      	adds	r6, r6, r3
 8004d56:	68f3      	ldr	r3, [r6, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d012      	beq.n	8004d82 <AddSnippet+0xd6>
	return BOS_OK;
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	e7ae      	b.n	8004cbe <AddSnippet+0x12>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004d60:	0008      	movs	r0, r1
 8004d62:	f7fb f9d9 	bl	8000118 <strlen>
 8004d66:	3001      	adds	r0, #1
 8004d68:	f00e ff28 	bl	8013bbc <malloc>
 8004d6c:	00ab      	lsls	r3, r5, #2
 8004d6e:	195d      	adds	r5, r3, r5
 8004d70:	00ad      	lsls	r5, r5, #2
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <AddSnippet+0xf0>)
 8004d74:	195d      	adds	r5, r3, r5
 8004d76:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004d78:	0021      	movs	r1, r4
 8004d7a:	f00f fd3e 	bl	80147fa <strcpy>
	return BOS_OK;
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e79d      	b.n	8004cbe <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004d82:	0090      	lsls	r0, r2, #2
 8004d84:	1880      	adds	r0, r0, r2
 8004d86:	0080      	lsls	r0, r0, #2
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <AddSnippet+0xf0>)
 8004d8a:	1880      	adds	r0, r0, r2
 8004d8c:	2214      	movs	r2, #20
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f00e ff3f 	bl	8013c12 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004d94:	200e      	movs	r0, #14
 8004d96:	e792      	b.n	8004cbe <AddSnippet+0x12>
 8004d98:	2000099f 	.word	0x2000099f
 8004d9c:	20006294 	.word	0x20006294

08004da0 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da2:	46de      	mov	lr, fp
 8004da4:	4657      	mov	r7, sl
 8004da6:	464e      	mov	r6, r9
 8004da8:	4645      	mov	r5, r8
 8004daa:	b5e0      	push	{r5, r6, r7, lr}
 8004dac:	b08b      	sub	sp, #44	; 0x2c
 8004dae:	9004      	str	r0, [sp, #16]
 8004db0:	9103      	str	r1, [sp, #12]
 8004db2:	0015      	movs	r5, r2
 8004db4:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004db6:	2300      	movs	r3, #0
 8004db8:	9307      	str	r3, [sp, #28]
 8004dba:	2205      	movs	r2, #5
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	a808      	add	r0, sp, #32
 8004dc0:	f00e ff27 	bl	8013c12 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004dc4:	4bd8      	ldr	r3, [pc, #864]	; (8005128 <CLI_CommandParser+0x388>)
 8004dc6:	4699      	mov	r9, r3
 8004dc8:	e129      	b.n	800501e <CLI_CommandParser+0x27e>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004dca:	1ce9      	adds	r1, r5, #3
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f7ff ff6d 	bl	8004cac <AddSnippet>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d105      	bne.n	8004de2 <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 8004dd6:	4bd4      	ldr	r3, [pc, #848]	; (8005128 <CLI_CommandParser+0x388>)
 8004dd8:	2202      	movs	r2, #2
 8004dda:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004ddc:	230d      	movs	r3, #13
 8004dde:	7023      	strb	r3, [r4, #0]
 8004de0:	e027      	b.n	8004e32 <CLI_CommandParser+0x92>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004de2:	2252      	movs	r2, #82	; 0x52
 8004de4:	49d1      	ldr	r1, [pc, #836]	; (800512c <CLI_CommandParser+0x38c>)
 8004de6:	0020      	movs	r0, r4
 8004de8:	f00e ff0a 	bl	8013c00 <memcpy>
				recordSnippet =0;
 8004dec:	4bce      	ldr	r3, [pc, #824]	; (8005128 <CLI_CommandParser+0x388>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e01e      	b.n	8004e32 <CLI_CommandParser+0x92>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004df4:	2206      	movs	r2, #6
 8004df6:	49ce      	ldr	r1, [pc, #824]	; (8005130 <CLI_CommandParser+0x390>)
 8004df8:	0028      	movs	r0, r5
 8004dfa:	f00f fd06 	bl	801480a <strncmp>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d00b      	beq.n	8004e1a <CLI_CommandParser+0x7a>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004e02:	2e02      	cmp	r6, #2
 8004e04:	d000      	beq.n	8004e08 <CLI_CommandParser+0x68>
 8004e06:	e11a      	b.n	800503e <CLI_CommandParser+0x29e>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e08:	0029      	movs	r1, r5
 8004e0a:	2002      	movs	r0, #2
 8004e0c:	f7ff ff4e 	bl	8004cac <AddSnippet>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d124      	bne.n	8004e5e <CLI_CommandParser+0xbe>
				pcOutputString[0] ='\r';
 8004e14:	230d      	movs	r3, #13
 8004e16:	7023      	strb	r3, [r4, #0]
 8004e18:	e00b      	b.n	8004e32 <CLI_CommandParser+0x92>
			recordSnippet =0;
 8004e1a:	4bc3      	ldr	r3, [pc, #780]	; (8005128 <CLI_CommandParser+0x388>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004e20:	49c4      	ldr	r1, [pc, #784]	; (8005134 <CLI_CommandParser+0x394>)
 8004e22:	3003      	adds	r0, #3
 8004e24:	f7ff ff42 	bl	8004cac <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004e28:	2241      	movs	r2, #65	; 0x41
 8004e2a:	49c3      	ldr	r1, [pc, #780]	; (8005138 <CLI_CommandParser+0x398>)
 8004e2c:	0020      	movs	r0, r4
 8004e2e:	f00e fee7 	bl	8013c00 <memcpy>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004e32:	7823      	ldrb	r3, [r4, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d100      	bne.n	8004e3a <CLI_CommandParser+0x9a>
 8004e38:	e1a8      	b.n	800518c <CLI_CommandParser+0x3ec>
 8004e3a:	9b03      	ldr	r3, [sp, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d100      	bne.n	8004e42 <CLI_CommandParser+0xa2>
 8004e40:	e1bf      	b.n	80051c2 <CLI_CommandParser+0x422>
 8004e42:	2700      	movs	r7, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004e44:	0020      	movs	r0, r4
 8004e46:	f7fb f967 	bl	8000118 <strlen>
 8004e4a:	b282      	uxth	r2, r0
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	425b      	negs	r3, r3
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	3333      	adds	r3, #51	; 0x33
 8004e54:	0021      	movs	r1, r4
 8004e56:	9804      	ldr	r0, [sp, #16]
 8004e58:	f009 fb50 	bl	800e4fc <writePxMutex>
 8004e5c:	e0d4      	b.n	8005008 <CLI_CommandParser+0x268>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e5e:	2252      	movs	r2, #82	; 0x52
 8004e60:	49b2      	ldr	r1, [pc, #712]	; (800512c <CLI_CommandParser+0x38c>)
 8004e62:	0020      	movs	r0, r4
 8004e64:	f00e fecc 	bl	8013c00 <memcpy>
 8004e68:	e7e3      	b.n	8004e32 <CLI_CommandParser+0x92>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e6a:	2299      	movs	r2, #153	; 0x99
 8004e6c:	1c70      	adds	r0, r6, #1
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	0021      	movs	r1, r4
 8004e72:	f009 fd7f 	bl	800e974 <FreeRTOS_CLIProcessCommand>
 8004e76:	0007      	movs	r7, r0
 8004e78:	e0c2      	b.n	8005000 <CLI_CommandParser+0x260>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004e7a:	2227      	movs	r2, #39	; 0x27
 8004e7c:	49af      	ldr	r1, [pc, #700]	; (800513c <CLI_CommandParser+0x39c>)
 8004e7e:	0020      	movs	r0, r4
 8004e80:	f00e febe 	bl	8013c00 <memcpy>
					xReturned = pdFALSE;
 8004e84:	e7d5      	b.n	8004e32 <CLI_CommandParser+0x92>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004e86:	2225      	movs	r2, #37	; 0x25
 8004e88:	49ad      	ldr	r1, [pc, #692]	; (8005140 <CLI_CommandParser+0x3a0>)
 8004e8a:	0020      	movs	r0, r4
 8004e8c:	f00e feb8 	bl	8013c00 <memcpy>
					xReturned = pdFALSE;
 8004e90:	e7cf      	b.n	8004e32 <CLI_CommandParser+0x92>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004e92:	221a      	movs	r2, #26
 8004e94:	2100      	movs	r1, #0
 8004e96:	48ab      	ldr	r0, [pc, #684]	; (8005144 <CLI_CommandParser+0x3a4>)
 8004e98:	f00e febb 	bl	8013c12 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	0028      	movs	r0, r5
 8004ea0:	f7fb f93a 	bl	8000118 <strlen>
 8004ea4:	0007      	movs	r7, r0
 8004ea6:	a807      	add	r0, sp, #28
 8004ea8:	f7fb f936 	bl	8000118 <strlen>
 8004eac:	3f01      	subs	r7, #1
 8004eae:	1a3a      	subs	r2, r7, r0
 8004eb0:	0031      	movs	r1, r6
 8004eb2:	48a5      	ldr	r0, [pc, #660]	; (8005148 <CLI_CommandParser+0x3a8>)
 8004eb4:	f00f fcba 	bl	801482c <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004eb8:	0028      	movs	r0, r5
 8004eba:	f7fb f92d 	bl	8000118 <strlen>
 8004ebe:	0007      	movs	r7, r0
 8004ec0:	a807      	add	r0, sp, #28
 8004ec2:	f7fb f929 	bl	8000118 <strlen>
 8004ec6:	1a3b      	subs	r3, r7, r0
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2217      	movs	r2, #23
 8004ecc:	21ff      	movs	r1, #255	; 0xff
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f003 fa30 	bl	8008334 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ed4:	2299      	movs	r2, #153	; 0x99
 8004ed6:	0092      	lsls	r2, r2, #2
 8004ed8:	0021      	movs	r1, r4
 8004eda:	0030      	movs	r0, r6
 8004edc:	f009 fd4a 	bl	800e974 <FreeRTOS_CLIProcessCommand>
 8004ee0:	0007      	movs	r7, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004ee2:	0020      	movs	r0, r4
 8004ee4:	f7fb f918 	bl	8000118 <strlen>
 8004ee8:	1820      	adds	r0, r4, r0
 8004eea:	221d      	movs	r2, #29
 8004eec:	4997      	ldr	r1, [pc, #604]	; (800514c <CLI_CommandParser+0x3ac>)
 8004eee:	f00e fe87 	bl	8013c00 <memcpy>
 8004ef2:	e085      	b.n	8005000 <CLI_CommandParser+0x260>
					group =id >> 8;
 8004ef4:	9b05      	ldr	r3, [sp, #20]
 8004ef6:	1218      	asrs	r0, r3, #8
 8004ef8:	b2c3      	uxtb	r3, r0
 8004efa:	469a      	mov	sl, r3
 8004efc:	4b94      	ldr	r3, [pc, #592]	; (8005150 <CLI_CommandParser+0x3b0>)
 8004efe:	469b      	mov	fp, r3
 8004f00:	4652      	mov	r2, sl
 8004f02:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f04:	221a      	movs	r2, #26
 8004f06:	2100      	movs	r1, #0
 8004f08:	488e      	ldr	r0, [pc, #568]	; (8005144 <CLI_CommandParser+0x3a4>)
 8004f0a:	f00e fe82 	bl	8013c12 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f0e:	1c73      	adds	r3, r6, #1
 8004f10:	9305      	str	r3, [sp, #20]
 8004f12:	0028      	movs	r0, r5
 8004f14:	f7fb f900 	bl	8000118 <strlen>
 8004f18:	0006      	movs	r6, r0
 8004f1a:	a807      	add	r0, sp, #28
 8004f1c:	f7fb f8fc 	bl	8000118 <strlen>
 8004f20:	3e01      	subs	r6, #1
 8004f22:	1a32      	subs	r2, r6, r0
 8004f24:	9905      	ldr	r1, [sp, #20]
 8004f26:	4888      	ldr	r0, [pc, #544]	; (8005148 <CLI_CommandParser+0x3a8>)
 8004f28:	f00f fc80 	bl	801482c <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f2c:	0028      	movs	r0, r5
 8004f2e:	f7fb f8f3 	bl	8000118 <strlen>
 8004f32:	0006      	movs	r6, r0
 8004f34:	a807      	add	r0, sp, #28
 8004f36:	f7fb f8ef 	bl	8000118 <strlen>
 8004f3a:	1a33      	subs	r3, r6, r0
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2217      	movs	r2, #23
 8004f40:	4651      	mov	r1, sl
 8004f42:	4640      	mov	r0, r8
 8004f44:	f003 f9f6 	bl	8008334 <BroadcastMessage>
					if(InGroup(myID,group))
 8004f48:	4b82      	ldr	r3, [pc, #520]	; (8005154 <CLI_CommandParser+0x3b4>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	4a81      	ldr	r2, [pc, #516]	; (8005158 <CLI_CommandParser+0x3b8>)
 8004f52:	5a9b      	ldrh	r3, [r3, r2]
 8004f54:	465a      	mov	r2, fp
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	4113      	asrs	r3, r2
 8004f5a:	07db      	lsls	r3, r3, #31
 8004f5c:	d406      	bmi.n	8004f6c <CLI_CommandParser+0x1cc>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004f5e:	ab07      	add	r3, sp, #28
 8004f60:	0022      	movs	r2, r4
 8004f62:	497e      	ldr	r1, [pc, #504]	; (800515c <CLI_CommandParser+0x3bc>)
 8004f64:	0020      	movs	r0, r4
 8004f66:	f00f fc0d 	bl	8014784 <siprintf>
 8004f6a:	e049      	b.n	8005000 <CLI_CommandParser+0x260>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f6c:	2299      	movs	r2, #153	; 0x99
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	0021      	movs	r1, r4
 8004f72:	9805      	ldr	r0, [sp, #20]
 8004f74:	f009 fcfe 	bl	800e974 <FreeRTOS_CLIProcessCommand>
 8004f78:	0007      	movs	r7, r0
 8004f7a:	e7f0      	b.n	8004f5e <CLI_CommandParser+0x1be>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f7c:	0028      	movs	r0, r5
 8004f7e:	f7fb f8cb 	bl	8000118 <strlen>
 8004f82:	0007      	movs	r7, r0
 8004f84:	a807      	add	r0, sp, #28
 8004f86:	f7fb f8c7 	bl	8000118 <strlen>
 8004f8a:	3f01      	subs	r7, #1
 8004f8c:	1a3a      	subs	r2, r7, r0
 8004f8e:	0031      	movs	r1, r6
 8004f90:	486d      	ldr	r0, [pc, #436]	; (8005148 <CLI_CommandParser+0x3a8>)
 8004f92:	f00f fc4b 	bl	801482c <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004f96:	0028      	movs	r0, r5
 8004f98:	f7fb f8be 	bl	8000118 <strlen>
 8004f9c:	0006      	movs	r6, r0
 8004f9e:	a807      	add	r0, sp, #28
 8004fa0:	f7fb f8ba 	bl	8000118 <strlen>
 8004fa4:	3e01      	subs	r6, #1
 8004fa6:	1a36      	subs	r6, r6, r0
 8004fa8:	b2b2      	uxth	r2, r6
 8004faa:	2117      	movs	r1, #23
 8004fac:	4650      	mov	r0, sl
 8004fae:	f003 f9e9 	bl	8008384 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004fb2:	9a05      	ldr	r2, [sp, #20]
 8004fb4:	496a      	ldr	r1, [pc, #424]	; (8005160 <CLI_CommandParser+0x3c0>)
 8004fb6:	0020      	movs	r0, r4
 8004fb8:	f00f fbe4 	bl	8014784 <siprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004fbc:	7823      	ldrb	r3, [r4, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <CLI_CommandParser+0x228>
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d108      	bne.n	8004fda <CLI_CommandParser+0x23a>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004fc8:	0020      	movs	r0, r4
 8004fca:	f7fb f8a5 	bl	8000118 <strlen>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	0020      	movs	r0, r4
 8004fd4:	f00e fe1d 	bl	8013c12 <memset>
 8004fd8:	e07c      	b.n	80050d4 <CLI_CommandParser+0x334>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004fda:	0020      	movs	r0, r4
 8004fdc:	f7fb f89c 	bl	8000118 <strlen>
 8004fe0:	b282      	uxth	r2, r0
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	3331      	adds	r3, #49	; 0x31
 8004fe8:	0021      	movs	r1, r4
 8004fea:	9804      	ldr	r0, [sp, #16]
 8004fec:	f009 fa86 	bl	800e4fc <writePxMutex>
 8004ff0:	e7ea      	b.n	8004fc8 <CLI_CommandParser+0x228>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ff2:	2299      	movs	r2, #153	; 0x99
 8004ff4:	0092      	lsls	r2, r2, #2
 8004ff6:	0021      	movs	r1, r4
 8004ff8:	0028      	movs	r0, r5
 8004ffa:	f009 fcbb 	bl	800e974 <FreeRTOS_CLIProcessCommand>
 8004ffe:	0007      	movs	r7, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005000:	7823      	ldrb	r3, [r4, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d000      	beq.n	8005008 <CLI_CommandParser+0x268>
 8005006:	e07f      	b.n	8005108 <CLI_CommandParser+0x368>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005008:	0020      	movs	r0, r4
 800500a:	f7fb f885 	bl	8000118 <strlen>
 800500e:	0002      	movs	r2, r0
 8005010:	2100      	movs	r1, #0
 8005012:	0020      	movs	r0, r4
 8005014:	f00e fdfd 	bl	8013c12 <memset>
	} while(xReturned != pdFALSE);
 8005018:	2f00      	cmp	r7, #0
 800501a:	d100      	bne.n	800501e <CLI_CommandParser+0x27e>
 800501c:	e0be      	b.n	800519c <CLI_CommandParser+0x3fc>
		StringToLowerCase((char* )cInputString);
 800501e:	0028      	movs	r0, r5
 8005020:	f7ff fbf8 	bl	8004814 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8005024:	464b      	mov	r3, r9
 8005026:	781e      	ldrb	r6, [r3, #0]
 8005028:	2e00      	cmp	r6, #0
 800502a:	d000      	beq.n	800502e <CLI_CommandParser+0x28e>
 800502c:	e6e2      	b.n	8004df4 <CLI_CommandParser+0x54>
 800502e:	2203      	movs	r2, #3
 8005030:	494c      	ldr	r1, [pc, #304]	; (8005164 <CLI_CommandParser+0x3c4>)
 8005032:	0028      	movs	r0, r5
 8005034:	f00f fbe9 	bl	801480a <strncmp>
 8005038:	2800      	cmp	r0, #0
 800503a:	d100      	bne.n	800503e <CLI_CommandParser+0x29e>
 800503c:	e6c5      	b.n	8004dca <CLI_CommandParser+0x2a>
			loc =strchr((char* )cInputString,'.');
 800503e:	212e      	movs	r1, #46	; 0x2e
 8005040:	0028      	movs	r0, r5
 8005042:	f00f fbcc 	bl	80147de <strchr>
 8005046:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8005048:	d0d3      	beq.n	8004ff2 <CLI_CommandParser+0x252>
 800504a:	3803      	subs	r0, #3
 800504c:	2203      	movs	r2, #3
 800504e:	4946      	ldr	r1, [pc, #280]	; (8005168 <CLI_CommandParser+0x3c8>)
 8005050:	f00f fbdb 	bl	801480a <strncmp>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0cc      	beq.n	8004ff2 <CLI_CommandParser+0x252>
 8005058:	7873      	ldrb	r3, [r6, #1]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <CLI_CommandParser+0x3cc>)
 800505c:	5cd3      	ldrb	r3, [r2, r3]
 800505e:	075b      	lsls	r3, r3, #29
 8005060:	d4c7      	bmi.n	8004ff2 <CLI_CommandParser+0x252>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8005062:	1b72      	subs	r2, r6, r5
 8005064:	0029      	movs	r1, r5
 8005066:	a807      	add	r0, sp, #28
 8005068:	f00f fbe0 	bl	801482c <strncpy>
				id =GetID(idString);
 800506c:	a807      	add	r0, sp, #28
 800506e:	f7ff fa13 	bl	8004498 <GetID>
 8005072:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8005074:	4a37      	ldr	r2, [pc, #220]	; (8005154 <CLI_CommandParser+0x3b4>)
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	4690      	mov	r8, r2
 800507a:	4290      	cmp	r0, r2
 800507c:	d100      	bne.n	8005080 <CLI_CommandParser+0x2e0>
 800507e:	e6f4      	b.n	8004e6a <CLI_CommandParser+0xca>
				else if(id == BOS_ERR_WrongName){
 8005080:	2864      	cmp	r0, #100	; 0x64
 8005082:	d100      	bne.n	8005086 <CLI_CommandParser+0x2e6>
 8005084:	e6f9      	b.n	8004e7a <CLI_CommandParser+0xda>
				else if(id == BOS_ERR_WrongID){
 8005086:	2866      	cmp	r0, #102	; 0x66
 8005088:	d100      	bne.n	800508c <CLI_CommandParser+0x2ec>
 800508a:	e6fc      	b.n	8004e86 <CLI_CommandParser+0xe6>
				else if(id == BOS_BROADCAST){
 800508c:	28ff      	cmp	r0, #255	; 0xff
 800508e:	d100      	bne.n	8005092 <CLI_CommandParser+0x2f2>
 8005090:	e6ff      	b.n	8004e92 <CLI_CommandParser+0xf2>
				else if((uint8_t )id == BOS_MULTICAST){
 8005092:	466b      	mov	r3, sp
 8005094:	7d1b      	ldrb	r3, [r3, #20]
 8005096:	469a      	mov	sl, r3
 8005098:	2bfe      	cmp	r3, #254	; 0xfe
 800509a:	d100      	bne.n	800509e <CLI_CommandParser+0x2fe>
 800509c:	e72a      	b.n	8004ef4 <CLI_CommandParser+0x154>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 800509e:	3601      	adds	r6, #1
 80050a0:	2206      	movs	r2, #6
 80050a2:	4933      	ldr	r1, [pc, #204]	; (8005170 <CLI_CommandParser+0x3d0>)
 80050a4:	0030      	movs	r0, r6
 80050a6:	f00f fbb0 	bl	801480a <strncmp>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d000      	beq.n	80050b0 <CLI_CommandParser+0x310>
 80050ae:	e765      	b.n	8004f7c <CLI_CommandParser+0x1dc>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 80050b0:	4b30      	ldr	r3, [pc, #192]	; (8005174 <CLI_CommandParser+0x3d4>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 80050b6:	2119      	movs	r1, #25
 80050b8:	4650      	mov	r0, sl
 80050ba:	f003 f963 	bl	8008384 <SendMessageToModule>
						osDelay(100);
 80050be:	2064      	movs	r0, #100	; 0x64
 80050c0:	f009 fbc3 	bl	800e84a <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 80050c4:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <CLI_CommandParser+0x3d8>)
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <CLI_CommandParser+0x3b4>)
 80050ca:	7818      	ldrb	r0, [r3, #0]
 80050cc:	2300      	movs	r3, #0
 80050ce:	4651      	mov	r1, sl
 80050d0:	f005 fa86 	bl	800a5e0 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 80050d4:	4b27      	ldr	r3, [pc, #156]	; (8005174 <CLI_CommandParser+0x3d4>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d000      	beq.n	80050de <CLI_CommandParser+0x33e>
 80050dc:	e6a9      	b.n	8004e32 <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 80050de:	21fa      	movs	r1, #250	; 0xfa
 80050e0:	0089      	lsls	r1, r1, #2
 80050e2:	2001      	movs	r0, #1
 80050e4:	f00a ff0c 	bl	800ff00 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 80050e8:	4b24      	ldr	r3, [pc, #144]	; (800517c <CLI_CommandParser+0x3dc>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d100      	bne.n	80050f2 <CLI_CommandParser+0x352>
 80050f0:	e69f      	b.n	8004e32 <CLI_CommandParser+0x92>
							++timedoutMsg;
 80050f2:	4a23      	ldr	r2, [pc, #140]	; (8005180 <CLI_CommandParser+0x3e0>)
 80050f4:	8813      	ldrh	r3, [r2, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	0022      	movs	r2, r4
 80050fe:	4921      	ldr	r1, [pc, #132]	; (8005184 <CLI_CommandParser+0x3e4>)
 8005100:	0020      	movs	r0, r4
 8005102:	f00f fb3f 	bl	8014784 <siprintf>
 8005106:	e694      	b.n	8004e32 <CLI_CommandParser+0x92>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8005108:	9b03      	ldr	r3, [sp, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d100      	bne.n	8005110 <CLI_CommandParser+0x370>
 800510e:	e77b      	b.n	8005008 <CLI_CommandParser+0x268>
 8005110:	e698      	b.n	8004e44 <CLI_CommandParser+0xa4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8005112:	2301      	movs	r3, #1
 8005114:	425b      	negs	r3, r3
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	3333      	adds	r3, #51	; 0x33
 800511a:	2238      	movs	r2, #56	; 0x38
 800511c:	491a      	ldr	r1, [pc, #104]	; (8005188 <CLI_CommandParser+0x3e8>)
 800511e:	9804      	ldr	r0, [sp, #16]
 8005120:	f009 f9ec 	bl	800e4fc <writePxMutex>
}
 8005124:	e046      	b.n	80051b4 <CLI_CommandParser+0x414>
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	200009cc 	.word	0x200009cc
 800512c:	08018de8 	.word	0x08018de8
 8005130:	08018e3c 	.word	0x08018e3c
 8005134:	080185c0 	.word	0x080185c0
 8005138:	08018e44 	.word	0x08018e44
 800513c:	08018e8c 	.word	0x08018e8c
 8005140:	08018eb4 	.word	0x08018eb4
 8005144:	20000530 	.word	0x20000530
 8005148:	200006d0 	.word	0x200006d0
 800514c:	08018edc 	.word	0x08018edc
 8005150:	2000099e 	.word	0x2000099e
 8005154:	2000080e 	.word	0x2000080e
 8005158:	2000065c 	.word	0x2000065c
 800515c:	08018efc 	.word	0x08018efc
 8005160:	08018f30 	.word	0x08018f30
 8005164:	08018de4 	.word	0x08018de4
 8005168:	08018e88 	.word	0x08018e88
 800516c:	0801b505 	.word	0x0801b505
 8005170:	08018f28 	.word	0x08018f28
 8005174:	200061f8 	.word	0x200061f8
 8005178:	200002b8 	.word	0x200002b8
 800517c:	20000890 	.word	0x20000890
 8005180:	20000fe2 	.word	0x20000fe2
 8005184:	08018f54 	.word	0x08018f54
 8005188:	08018f74 	.word	0x08018f74
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800518c:	0020      	movs	r0, r4
 800518e:	f7fa ffc3 	bl	8000118 <strlen>
 8005192:	0002      	movs	r2, r0
 8005194:	2100      	movs	r1, #0
 8005196:	0020      	movs	r0, r4
 8005198:	f00e fd3b 	bl	8013c12 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 800519c:	2209      	movs	r2, #9
 800519e:	2100      	movs	r1, #0
 80051a0:	a807      	add	r0, sp, #28
 80051a2:	f00e fd36 	bl	8013c12 <memset>
	if(!recordSnippet && enableOutput)
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <CLI_CommandParser+0x434>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <CLI_CommandParser+0x414>
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1ae      	bne.n	8005112 <CLI_CommandParser+0x372>
}
 80051b4:	b00b      	add	sp, #44	; 0x2c
 80051b6:	bcf0      	pop	{r4, r5, r6, r7}
 80051b8:	46bb      	mov	fp, r7
 80051ba:	46b2      	mov	sl, r6
 80051bc:	46a9      	mov	r9, r5
 80051be:	46a0      	mov	r8, r4
 80051c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80051c2:	0020      	movs	r0, r4
 80051c4:	f7fa ffa8 	bl	8000118 <strlen>
 80051c8:	0002      	movs	r2, r0
 80051ca:	2100      	movs	r1, #0
 80051cc:	0020      	movs	r0, r4
 80051ce:	f00e fd20 	bl	8013c12 <memset>
	} while(xReturned != pdFALSE);
 80051d2:	e7e3      	b.n	800519c <CLI_CommandParser+0x3fc>
 80051d4:	200009cc 	.word	0x200009cc

080051d8 <prvCLITask>:
void prvCLITask(void *pvParameters){
 80051d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051da:	46de      	mov	lr, fp
 80051dc:	4657      	mov	r7, sl
 80051de:	464e      	mov	r6, r9
 80051e0:	4645      	mov	r5, r8
 80051e2:	b5e0      	push	{r5, r6, r7, lr}
 80051e4:	b087      	sub	sp, #28
	char cRxedChar ='\0';
 80051e6:	230f      	movs	r3, #15
 80051e8:	aa02      	add	r2, sp, #8
 80051ea:	4694      	mov	ip, r2
 80051ec:	4463      	add	r3, ip
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80051f2:	2101      	movs	r1, #1
 80051f4:	4249      	negs	r1, r1
 80051f6:	2001      	movs	r0, #1
 80051f8:	f00a fe82 	bl	800ff00 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80051fc:	f009 fc44 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 8005200:	4680      	mov	r8, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8005202:	23e1      	movs	r3, #225	; 0xe1
 8005204:	031b      	lsls	r3, r3, #12
 8005206:	4a5b      	ldr	r2, [pc, #364]	; (8005374 <prvCLITask+0x19c>)
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d00f      	beq.n	800522e <prvCLITask+0x56>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800520e:	2401      	movs	r4, #1
			if(port != PcPort)
 8005210:	4e59      	ldr	r6, [pc, #356]	; (8005378 <prvCLITask+0x1a0>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005212:	001d      	movs	r5, r3
 8005214:	e003      	b.n	800521e <prvCLITask+0x46>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8005216:	3401      	adds	r4, #1
 8005218:	b2e4      	uxtb	r4, r4
 800521a:	2c04      	cmp	r4, #4
 800521c:	d007      	beq.n	800522e <prvCLITask+0x56>
			if(port != PcPort)
 800521e:	7833      	ldrb	r3, [r6, #0]
 8005220:	42a3      	cmp	r3, r4
 8005222:	d0f8      	beq.n	8005216 <prvCLITask+0x3e>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005224:	0029      	movs	r1, r5
 8005226:	0020      	movs	r0, r4
 8005228:	f009 f9d8 	bl	800e5dc <UpdateBaudrate>
 800522c:	e7f3      	b.n	8005216 <prvCLITask+0x3e>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 800522e:	4b53      	ldr	r3, [pc, #332]	; (800537c <prvCLITask+0x1a4>)
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	0053      	lsls	r3, r2, #1
 8005234:	189b      	adds	r3, r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4a51      	ldr	r2, [pc, #324]	; (8005380 <prvCLITask+0x1a8>)
 800523a:	189b      	adds	r3, r3, r2
 800523c:	4a51      	ldr	r2, [pc, #324]	; (8005384 <prvCLITask+0x1ac>)
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	4c51      	ldr	r4, [pc, #324]	; (8005388 <prvCLITask+0x1b0>)
 8005242:	4d4d      	ldr	r5, [pc, #308]	; (8005378 <prvCLITask+0x1a0>)
 8005244:	7829      	ldrb	r1, [r5, #0]
 8005246:	9100      	str	r1, [sp, #0]
 8005248:	4950      	ldr	r1, [pc, #320]	; (800538c <prvCLITask+0x1b4>)
 800524a:	0020      	movs	r0, r4
 800524c:	f00f fa9a 	bl	8014784 <siprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005250:	22a4      	movs	r2, #164	; 0xa4
 8005252:	7828      	ldrb	r0, [r5, #0]
 8005254:	230a      	movs	r3, #10
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	494d      	ldr	r1, [pc, #308]	; (8005390 <prvCLITask+0x1b8>)
 800525a:	f009 f97b 	bl	800e554 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 800525e:	0020      	movs	r0, r4
 8005260:	f7fa ff5a 	bl	8000118 <strlen>
 8005264:	b282      	uxth	r2, r0
 8005266:	7828      	ldrb	r0, [r5, #0]
 8005268:	230a      	movs	r3, #10
 800526a:	0021      	movs	r1, r4
 800526c:	f009 f972 	bl	800e554 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005270:	2600      	movs	r6, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005272:	4b41      	ldr	r3, [pc, #260]	; (8005378 <prvCLITask+0x1a0>)
 8005274:	4699      	mov	r9, r3
 8005276:	4b47      	ldr	r3, [pc, #284]	; (8005394 <prvCLITask+0x1bc>)
 8005278:	469b      	mov	fp, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800527a:	001d      	movs	r5, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800527c:	2301      	movs	r3, #1
 800527e:	469a      	mov	sl, r3
 8005280:	9302      	str	r3, [sp, #8]
 8005282:	9603      	str	r6, [sp, #12]
 8005284:	e057      	b.n	8005336 <prvCLITask+0x15e>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8005286:	210f      	movs	r1, #15
 8005288:	ae02      	add	r6, sp, #8
 800528a:	46b4      	mov	ip, r6
 800528c:	4461      	add	r1, ip
 800528e:	700a      	strb	r2, [r1, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005290:	0062      	lsls	r2, r4, #1
 8005292:	1912      	adds	r2, r2, r4
 8005294:	0192      	lsls	r2, r2, #6
 8005296:	4940      	ldr	r1, [pc, #256]	; (8005398 <prvCLITask+0x1c0>)
 8005298:	188a      	adds	r2, r1, r2
 800529a:	2100      	movs	r1, #0
 800529c:	54d1      	strb	r1, [r2, r3]
				UARTRxBufIndex[PcPort - 1] =chr;
 800529e:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <prvCLITask+0x1bc>)
 80052a0:	5513      	strb	r3, [r2, r4]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 80052a2:	270f      	movs	r7, #15
 80052a4:	ab02      	add	r3, sp, #8
 80052a6:	469c      	mov	ip, r3
 80052a8:	4467      	add	r7, ip
 80052aa:	230a      	movs	r3, #10
 80052ac:	4652      	mov	r2, sl
 80052ae:	0039      	movs	r1, r7
 80052b0:	f009 f950 	bl	800e554 <writePxITMutex>
		if(cRxedChar == '\r'){
 80052b4:	783b      	ldrb	r3, [r7, #0]
 80052b6:	2b0d      	cmp	r3, #13
 80052b8:	d01e      	beq.n	80052f8 <prvCLITask+0x120>
			if(cRxedChar == '\n'){
 80052ba:	2b0a      	cmp	r3, #10
 80052bc:	d039      	beq.n	8005332 <prvCLITask+0x15a>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80052be:	2b08      	cmp	r3, #8
 80052c0:	d04c      	beq.n	800535c <prvCLITask+0x184>
 80052c2:	2b7f      	cmp	r3, #127	; 0x7f
 80052c4:	d04a      	beq.n	800535c <prvCLITask+0x184>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80052c6:	001a      	movs	r2, r3
 80052c8:	3a20      	subs	r2, #32
 80052ca:	2a5e      	cmp	r2, #94	; 0x5e
 80052cc:	d831      	bhi.n	8005332 <prvCLITask+0x15a>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 80052ce:	9903      	ldr	r1, [sp, #12]
 80052d0:	2931      	cmp	r1, #49	; 0x31
 80052d2:	dc2e      	bgt.n	8005332 <prvCLITask+0x15a>
						cInputString[cInputIndex] =cRxedChar;
 80052d4:	4a31      	ldr	r2, [pc, #196]	; (800539c <prvCLITask+0x1c4>)
 80052d6:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 80052d8:	1c4e      	adds	r6, r1, #1
 80052da:	b273      	sxtb	r3, r6
 80052dc:	9303      	str	r3, [sp, #12]
 80052de:	e028      	b.n	8005332 <prvCLITask+0x15a>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80052e0:	552e      	strb	r6, [r5, r4]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80052e2:	9b02      	ldr	r3, [sp, #8]
			if(UARTRxBuf[PcPort - 1][chr]){
 80052e4:	5cca      	ldrb	r2, [r1, r3]
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	d1cd      	bne.n	8005286 <prvCLITask+0xae>
			if(chr == MSG_RX_BUF_SIZE - 1){
 80052ea:	2bbf      	cmp	r3, #191	; 0xbf
 80052ec:	d0f8      	beq.n	80052e0 <prvCLITask+0x108>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80052ee:	3301      	adds	r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2bbf      	cmp	r3, #191	; 0xbf
 80052f4:	d9f6      	bls.n	80052e4 <prvCLITask+0x10c>
 80052f6:	e7d4      	b.n	80052a2 <prvCLITask+0xca>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 80052f8:	4b1f      	ldr	r3, [pc, #124]	; (8005378 <prvCLITask+0x1a0>)
 80052fa:	7818      	ldrb	r0, [r3, #0]
 80052fc:	230a      	movs	r3, #10
 80052fe:	2202      	movs	r2, #2
 8005300:	4927      	ldr	r1, [pc, #156]	; (80053a0 <prvCLITask+0x1c8>)
 8005302:	f009 f927 	bl	800e554 <writePxITMutex>
			if(cInputIndex == 0){
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d022      	beq.n	8005352 <prvCLITask+0x17a>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800530c:	4e23      	ldr	r6, [pc, #140]	; (800539c <prvCLITask+0x1c4>)
 800530e:	4b1a      	ldr	r3, [pc, #104]	; (8005378 <prvCLITask+0x1a0>)
 8005310:	7818      	ldrb	r0, [r3, #0]
 8005312:	4643      	mov	r3, r8
 8005314:	0032      	movs	r2, r6
 8005316:	4651      	mov	r1, sl
 8005318:	f7ff fd42 	bl	8004da0 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800531c:	0031      	movs	r1, r6
 800531e:	4821      	ldr	r0, [pc, #132]	; (80053a4 <prvCLITask+0x1cc>)
 8005320:	f00f fa6b 	bl	80147fa <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005324:	2232      	movs	r2, #50	; 0x32
 8005326:	2100      	movs	r1, #0
 8005328:	0030      	movs	r0, r6
 800532a:	f00e fc72 	bl	8013c12 <memset>
			cInputIndex =0;
 800532e:	2300      	movs	r3, #0
 8005330:	9303      	str	r3, [sp, #12]
		taskYIELD();
 8005332:	f00b f89f 	bl	8010474 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005336:	464b      	mov	r3, r9
 8005338:	7818      	ldrb	r0, [r3, #0]
 800533a:	1e44      	subs	r4, r0, #1
 800533c:	465b      	mov	r3, fp
 800533e:	5d1b      	ldrb	r3, [r3, r4]
 8005340:	2bbf      	cmp	r3, #191	; 0xbf
 8005342:	d8ae      	bhi.n	80052a2 <prvCLITask+0xca>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005344:	0061      	lsls	r1, r4, #1
 8005346:	1909      	adds	r1, r1, r4
 8005348:	0189      	lsls	r1, r1, #6
 800534a:	4a13      	ldr	r2, [pc, #76]	; (8005398 <prvCLITask+0x1c0>)
 800534c:	1851      	adds	r1, r2, r1
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800534e:	2600      	movs	r6, #0
 8005350:	e7c8      	b.n	80052e4 <prvCLITask+0x10c>
				strcpy((char* )cInputString,(char* )cLastInputString);
 8005352:	4914      	ldr	r1, [pc, #80]	; (80053a4 <prvCLITask+0x1cc>)
 8005354:	4811      	ldr	r0, [pc, #68]	; (800539c <prvCLITask+0x1c4>)
 8005356:	f00f fa50 	bl	80147fa <strcpy>
 800535a:	e7d7      	b.n	800530c <prvCLITask+0x134>
				if(cInputIndex > 0){
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	dde7      	ble.n	8005332 <prvCLITask+0x15a>
					cInputIndex--;
 8005362:	3b01      	subs	r3, #1
 8005364:	b25b      	sxtb	r3, r3
 8005366:	0019      	movs	r1, r3
 8005368:	9303      	str	r3, [sp, #12]
					cInputString[cInputIndex] ='\0';
 800536a:	4b0c      	ldr	r3, [pc, #48]	; (800539c <prvCLITask+0x1c4>)
 800536c:	2200      	movs	r2, #0
 800536e:	545a      	strb	r2, [r3, r1]
 8005370:	e7df      	b.n	8005332 <prvCLITask+0x15a>
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	20006278 	.word	0x20006278
 8005378:	200002b8 	.word	0x200002b8
 800537c:	20000064 	.word	0x20000064
 8005380:	08018ce8 	.word	0x08018ce8
 8005384:	2000080e 	.word	0x2000080e
 8005388:	200009a0 	.word	0x200009a0
 800538c:	08018fb0 	.word	0x08018fb0
 8005390:	08018fdc 	.word	0x08018fdc
 8005394:	20000c8c 	.word	0x20000c8c
 8005398:	20000a4c 	.word	0x20000a4c
 800539c:	200008d0 	.word	0x200008d0
 80053a0:	0801a80c 	.word	0x0801a80c
 80053a4:	2000096c 	.word	0x2000096c

080053a8 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80053a8:	b570      	push	{r4, r5, r6, lr}
 80053aa:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 80053ac:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <ParseSnippetCommand+0x78>)
 80053ae:	781a      	ldrb	r2, [r3, #0]
 80053b0:	3a01      	subs	r2, #1
 80053b2:	0093      	lsls	r3, r2, #2
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <ParseSnippetCommand+0x7c>)
 80053ba:	18d3      	adds	r3, r2, r3
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d02c      	beq.n	800541c <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 80053c2:	4b19      	ldr	r3, [pc, #100]	; (8005428 <ParseSnippetCommand+0x80>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <ParseSnippetCommand+0x80>)
 80053cc:	681e      	ldr	r6, [r3, #0]
 80053ce:	7833      	ldrb	r3, [r6, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 80053d4:	2113      	movs	r1, #19
 80053d6:	0030      	movs	r0, r6
 80053d8:	f00f fa01 	bl	80147de <strchr>
 80053dc:	1e05      	subs	r5, r0, #0
	if(ptrEnd != NULL){
 80053de:	d011      	beq.n	8005404 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 80053e0:	1b82      	subs	r2, r0, r6
 80053e2:	0031      	movs	r1, r6
 80053e4:	0020      	movs	r0, r4
 80053e6:	f00f fa21 	bl	801482c <strncpy>
		ptrStart =ptrEnd + 1;
 80053ea:	3501      	adds	r5, #1
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <ParseSnippetCommand+0x80>)
 80053ee:	601d      	str	r5, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 80053f0:	2001      	movs	r0, #1
}
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
		ptrStart =snippetBuffer;
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <ParseSnippetCommand+0x80>)
 80053f6:	6018      	str	r0, [r3, #0]
 80053f8:	e7e7      	b.n	80053ca <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <ParseSnippetCommand+0x80>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
		return false;
 8005400:	2000      	movs	r0, #0
 8005402:	e7f6      	b.n	80053f2 <ParseSnippetCommand+0x4a>
		strcpy((char* )cliBuffer,ptrStart);
 8005404:	0031      	movs	r1, r6
 8005406:	0020      	movs	r0, r4
 8005408:	f00f f9f7 	bl	80147fa <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 800540c:	0020      	movs	r0, r4
 800540e:	f7fa fe83 	bl	8000118 <strlen>
 8005412:	1836      	adds	r6, r6, r0
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <ParseSnippetCommand+0x80>)
 8005416:	601e      	str	r6, [r3, #0]
	return true;
 8005418:	2001      	movs	r0, #1
 800541a:	e7ea      	b.n	80053f2 <ParseSnippetCommand+0x4a>
		return false;
 800541c:	2000      	movs	r0, #0
 800541e:	e7e8      	b.n	80053f2 <ParseSnippetCommand+0x4a>
 8005420:	2000099f 	.word	0x2000099f
 8005424:	20006294 	.word	0x20006294
 8005428:	200009c8 	.word	0x200009c8

0800542c <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 800542c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542e:	b083      	sub	sp, #12
 8005430:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005432:	0083      	lsls	r3, r0, #2
 8005434:	181b      	adds	r3, r3, r0
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a3e      	ldr	r2, [pc, #248]	; (8005534 <CheckSnippetCondition+0x108>)
 800543a:	5c9b      	ldrb	r3, [r3, r2]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d021      	beq.n	8005484 <CheckSnippetCondition+0x58>
 8005440:	2000      	movs	r0, #0
 8005442:	2b03      	cmp	r3, #3
 8005444:	d130      	bne.n	80054a8 <CheckSnippetCondition+0x7c>
		case SNIP_COND_MODULE_EVENT:
			break;
			
		case SNIP_COND_MODULE_PARAM_CONST:
			// Get the constant and module parameter values. 
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8005446:	4d3b      	ldr	r5, [pc, #236]	; (8005534 <CheckSnippetCondition+0x108>)
 8005448:	00a6      	lsls	r6, r4, #2
 800544a:	1933      	adds	r3, r6, r4
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	18eb      	adds	r3, r5, r3
 8005450:	78da      	ldrb	r2, [r3, #3]
 8005452:	3a01      	subs	r2, #1
 8005454:	0053      	lsls	r3, r2, #1
 8005456:	189b      	adds	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4a37      	ldr	r2, [pc, #220]	; (8005538 <CheckSnippetCondition+0x10c>)
 800545c:	589b      	ldr	r3, [r3, r2]
 800545e:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005460:	1931      	adds	r1, r6, r4
 8005462:	0089      	lsls	r1, r1, #2
 8005464:	3106      	adds	r1, #6
 8005466:	1949      	adds	r1, r1, r5
 8005468:	2204      	movs	r2, #4
 800546a:	a801      	add	r0, sp, #4
 800546c:	f00e fbc8 	bl	8013c00 <memcpy>
			// Compare them mathematically
			switch(snippets[index].cond.mathOperator){
 8005470:	1936      	adds	r6, r6, r4
 8005472:	00b6      	lsls	r6, r6, #2
 8005474:	19ad      	adds	r5, r5, r6
 8005476:	786b      	ldrb	r3, [r5, #1]
 8005478:	2b06      	cmp	r3, #6
 800547a:	d853      	bhi.n	8005524 <CheckSnippetCondition+0xf8>
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4a2f      	ldr	r2, [pc, #188]	; (800553c <CheckSnippetCondition+0x110>)
 8005480:	58d3      	ldr	r3, [r2, r3]
 8005482:	469f      	mov	pc, r3
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8005484:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <CheckSnippetCondition+0x108>)
 8005486:	0080      	lsls	r0, r0, #2
 8005488:	1903      	adds	r3, r0, r4
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	18d3      	adds	r3, r2, r3
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 800548e:	7899      	ldrb	r1, [r3, #2]
 8005490:	00cb      	lsls	r3, r1, #3
 8005492:	185b      	adds	r3, r3, r1
 8005494:	1900      	adds	r0, r0, r4
 8005496:	0080      	lsls	r0, r0, #2
 8005498:	1812      	adds	r2, r2, r0
 800549a:	4929      	ldr	r1, [pc, #164]	; (8005540 <CheckSnippetCondition+0x114>)
 800549c:	5c58      	ldrb	r0, [r3, r1]
 800549e:	78d3      	ldrb	r3, [r2, #3]
 80054a0:	1ac0      	subs	r0, r0, r3
 80054a2:	4243      	negs	r3, r0
 80054a4:	4158      	adcs	r0, r3
 80054a6:	b2c0      	uxtb	r0, r0
		default:
			break;
	}
	
	return false;
}
 80054a8:	b003      	add	sp, #12
 80054aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if(flt1 == flt2)
 80054ac:	1c39      	adds	r1, r7, #0
 80054ae:	9801      	ldr	r0, [sp, #4]
 80054b0:	f7fb f80e 	bl	80004d0 <__aeabi_fcmpeq>
 80054b4:	1e43      	subs	r3, r0, #1
 80054b6:	4198      	sbcs	r0, r3
 80054b8:	e7f6      	b.n	80054a8 <CheckSnippetCondition+0x7c>
					if(flt1 > flt2)
 80054ba:	1c39      	adds	r1, r7, #0
 80054bc:	9801      	ldr	r0, [sp, #4]
 80054be:	f7fb f80d 	bl	80004dc <__aeabi_fcmplt>
 80054c2:	1e43      	subs	r3, r0, #1
 80054c4:	4198      	sbcs	r0, r3
 80054c6:	e7ef      	b.n	80054a8 <CheckSnippetCondition+0x7c>
					if(flt1 < flt2 && flt1 != 0.0f)
 80054c8:	1c39      	adds	r1, r7, #0
 80054ca:	9801      	ldr	r0, [sp, #4]
 80054cc:	f7fb f81a 	bl	8000504 <__aeabi_fcmpgt>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d029      	beq.n	8005528 <CheckSnippetCondition+0xfc>
 80054d4:	2100      	movs	r1, #0
 80054d6:	1c38      	adds	r0, r7, #0
 80054d8:	f7fa fffa 	bl	80004d0 <__aeabi_fcmpeq>
 80054dc:	4243      	negs	r3, r0
 80054de:	4158      	adcs	r0, r3
 80054e0:	e7e2      	b.n	80054a8 <CheckSnippetCondition+0x7c>
					if(flt1 >= flt2)
 80054e2:	1c39      	adds	r1, r7, #0
 80054e4:	9801      	ldr	r0, [sp, #4]
 80054e6:	f7fb f803 	bl	80004f0 <__aeabi_fcmple>
 80054ea:	1e43      	subs	r3, r0, #1
 80054ec:	4198      	sbcs	r0, r3
 80054ee:	e7db      	b.n	80054a8 <CheckSnippetCondition+0x7c>
					if(flt1 <= flt2 && flt1 != 0.0f)
 80054f0:	1c39      	adds	r1, r7, #0
 80054f2:	9801      	ldr	r0, [sp, #4]
 80054f4:	f7fb f810 	bl	8000518 <__aeabi_fcmpge>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d017      	beq.n	800552c <CheckSnippetCondition+0x100>
 80054fc:	2100      	movs	r1, #0
 80054fe:	1c38      	adds	r0, r7, #0
 8005500:	f7fa ffe6 	bl	80004d0 <__aeabi_fcmpeq>
 8005504:	4243      	negs	r3, r0
 8005506:	4158      	adcs	r0, r3
 8005508:	e7ce      	b.n	80054a8 <CheckSnippetCondition+0x7c>
					if(flt1 != flt2 && flt1 != 0.0f)
 800550a:	1c39      	adds	r1, r7, #0
 800550c:	9801      	ldr	r0, [sp, #4]
 800550e:	f7fa ffdf 	bl	80004d0 <__aeabi_fcmpeq>
 8005512:	2800      	cmp	r0, #0
 8005514:	d10c      	bne.n	8005530 <CheckSnippetCondition+0x104>
 8005516:	2100      	movs	r1, #0
 8005518:	1c38      	adds	r0, r7, #0
 800551a:	f7fa ffd9 	bl	80004d0 <__aeabi_fcmpeq>
 800551e:	4243      	negs	r3, r0
 8005520:	4158      	adcs	r0, r3
 8005522:	e7c1      	b.n	80054a8 <CheckSnippetCondition+0x7c>
			switch(snippets[index].cond.mathOperator){
 8005524:	2000      	movs	r0, #0
 8005526:	e7bf      	b.n	80054a8 <CheckSnippetCondition+0x7c>
	return false;
 8005528:	2000      	movs	r0, #0
 800552a:	e7bd      	b.n	80054a8 <CheckSnippetCondition+0x7c>
 800552c:	2000      	movs	r0, #0
 800552e:	e7bb      	b.n	80054a8 <CheckSnippetCondition+0x7c>
 8005530:	2000      	movs	r0, #0
 8005532:	e7b9      	b.n	80054a8 <CheckSnippetCondition+0x7c>
 8005534:	20006294 	.word	0x20006294
 8005538:	20000098 	.word	0x20000098
 800553c:	08019270 	.word	0x08019270
 8005540:	20001358 	.word	0x20001358

08005544 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	46ce      	mov	lr, r9
 8005548:	4647      	mov	r7, r8
 800554a:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800554c:	f009 fa9c 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 8005550:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 8005552:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <ExecuteSnippet+0x90>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d036      	beq.n	80055c8 <ExecuteSnippet+0x84>
 800555a:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 800555c:	4f1e      	ldr	r7, [pc, #120]	; (80055d8 <ExecuteSnippet+0x94>)
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <ExecuteSnippet+0x98>)
 8005560:	4698      	mov	r8, r3
 8005562:	e01a      	b.n	800559a <ExecuteSnippet+0x56>
 8005564:	4b1e      	ldr	r3, [pc, #120]	; (80055e0 <ExecuteSnippet+0x9c>)
 8005566:	7818      	ldrb	r0, [r3, #0]
 8005568:	0033      	movs	r3, r6
 800556a:	4642      	mov	r2, r8
 800556c:	2100      	movs	r1, #0
 800556e:	f7ff fc17 	bl	8004da0 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005572:	0030      	movs	r0, r6
 8005574:	f7fa fdd0 	bl	8000118 <strlen>
 8005578:	0002      	movs	r2, r0
 800557a:	2100      	movs	r1, #0
 800557c:	0030      	movs	r0, r6
 800557e:	f00e fb48 	bl	8013c12 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005582:	4649      	mov	r1, r9
 8005584:	68e8      	ldr	r0, [r5, #12]
 8005586:	f7ff ff0f 	bl	80053a8 <ParseSnippetCommand>
 800558a:	2800      	cmp	r0, #0
 800558c:	d1ea      	bne.n	8005564 <ExecuteSnippet+0x20>
	for(s =0; s < numOfRecordedSnippets; s++){
 800558e:	3401      	adds	r4, #1
 8005590:	b2a4      	uxth	r4, r4
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <ExecuteSnippet+0x90>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	42a3      	cmp	r3, r4
 8005598:	d916      	bls.n	80055c8 <ExecuteSnippet+0x84>
		if(snippets[s].state)								// Check for activated Snippets
 800559a:	00a3      	lsls	r3, r4, #2
 800559c:	191b      	adds	r3, r3, r4
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	7c1b      	ldrb	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f2      	beq.n	800558e <ExecuteSnippet+0x4a>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80055a8:	b2e0      	uxtb	r0, r4
 80055aa:	f7ff ff3f 	bl	800542c <CheckSnippetCondition>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d0ed      	beq.n	800558e <ExecuteSnippet+0x4a>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80055b2:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <ExecuteSnippet+0xa0>)
 80055b4:	2220      	movs	r2, #32
 80055b6:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <ExecuteSnippet+0x98>)
 80055ba:	4699      	mov	r9, r3
 80055bc:	00a3      	lsls	r3, r4, #2
 80055be:	191d      	adds	r5, r3, r4
 80055c0:	00ad      	lsls	r5, r5, #2
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <ExecuteSnippet+0x94>)
 80055c4:	195d      	adds	r5, r3, r5
 80055c6:	e7dc      	b.n	8005582 <ExecuteSnippet+0x3e>
			}
		}
	}
	
	return result;
}
 80055c8:	2000      	movs	r0, #0
 80055ca:	bcc0      	pop	{r6, r7}
 80055cc:	46b9      	mov	r9, r7
 80055ce:	46b0      	mov	r8, r6
 80055d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	2000099f 	.word	0x2000099f
 80055d8:	20006294 	.word	0x20006294
 80055dc:	20000938 	.word	0x20000938
 80055e0:	200002b8 	.word	0x200002b8
 80055e4:	200061f8 	.word	0x200061f8

080055e8 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 80055e8:	2000      	movs	r0, #0
 80055ea:	4770      	bx	lr

080055ec <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	0005      	movs	r5, r0
 80055f2:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 80055f8:	9300      	str	r3, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055fa:	aa01      	add	r2, sp, #4
 80055fc:	2101      	movs	r1, #1
 80055fe:	0020      	movs	r0, r4
 8005600:	f009 fa46 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005604:	2300      	movs	r3, #0
 8005606:	56c3      	ldrsb	r3, [r0, r3]
 8005608:	2b70      	cmp	r3, #112	; 0x70
 800560a:	d00c      	beq.n	8005626 <setBaudrateCommand+0x3a>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800560c:	466a      	mov	r2, sp
 800560e:	2102      	movs	r1, #2
 8005610:	0020      	movs	r0, r4
 8005612:	f009 fa3d 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005616:	f00e faa6 	bl	8013b66 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800561a:	2213      	movs	r2, #19
 800561c:	490f      	ldr	r1, [pc, #60]	; (800565c <setBaudrateCommand+0x70>)
 800561e:	0028      	movs	r0, r5
 8005620:	f00e faee 	bl	8013c00 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 8005624:	e016      	b.n	8005654 <setBaudrateCommand+0x68>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005626:	3001      	adds	r0, #1
 8005628:	f00e fa9d 	bl	8013b66 <atol>
 800562c:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800562e:	466a      	mov	r2, sp
 8005630:	2102      	movs	r1, #2
 8005632:	0020      	movs	r0, r4
 8005634:	f009 fa2c 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005638:	f00e fa95 	bl	8013b66 <atol>
 800563c:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 800563e:	b2f0      	uxtb	r0, r6
 8005640:	0021      	movs	r1, r4
 8005642:	f008 ffcb 	bl	800e5dc <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 8005646:	23ff      	movs	r3, #255	; 0xff
 8005648:	4033      	ands	r3, r6
 800564a:	0022      	movs	r2, r4
 800564c:	4904      	ldr	r1, [pc, #16]	; (8005660 <setBaudrateCommand+0x74>)
 800564e:	0028      	movs	r0, r5
 8005650:	f00f f898 	bl	8014784 <siprintf>
}
 8005654:	2000      	movs	r0, #0
 8005656:	b002      	add	sp, #8
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	080192b4 	.word	0x080192b4
 8005660:	0801928c 	.word	0x0801928c

08005664 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005664:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 8005666:	4b03      	ldr	r3, [pc, #12]	; (8005674 <flashsizeCommand+0x10>)
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	4903      	ldr	r1, [pc, #12]	; (8005678 <flashsizeCommand+0x14>)
 800566c:	f00f f88a 	bl	8014784 <siprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 8005670:	2000      	movs	r0, #0
 8005672:	bd10      	pop	{r4, pc}
 8005674:	1ffff7cc 	.word	0x1ffff7cc
 8005678:	080192c8 	.word	0x080192c8

0800567c <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800567c:	b510      	push	{r4, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	0004      	movs	r4, r0
 8005682:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005684:	2300      	movs	r3, #0
 8005686:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800568c:	aa01      	add	r2, sp, #4
 800568e:	2101      	movs	r1, #1
 8005690:	f009 f9fe 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005694:	7803      	ldrb	r3, [r0, #0]
 8005696:	3b32      	subs	r3, #50	; 0x32
 8005698:	2b01      	cmp	r3, #1
 800569a:	d907      	bls.n	80056ac <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800569c:	2215      	movs	r2, #21
 800569e:	490b      	ldr	r1, [pc, #44]	; (80056cc <GetReadPrecentageCommand+0x50>)
 80056a0:	0020      	movs	r0, r4
 80056a2:	f00e faad 	bl	8013c00 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80056a6:	2000      	movs	r0, #0
 80056a8:	b002      	add	sp, #8
 80056aa:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80056ac:	f00e fa5b 	bl	8013b66 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80056b0:	b2c0      	uxtb	r0, r0
 80056b2:	4669      	mov	r1, sp
 80056b4:	f007 ff94 	bl	800d5e0 <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80056b8:	9800      	ldr	r0, [sp, #0]
 80056ba:	f7fd fb97 	bl	8002dec <__aeabi_f2d>
 80056be:	0002      	movs	r2, r0
 80056c0:	000b      	movs	r3, r1
 80056c2:	4903      	ldr	r1, [pc, #12]	; (80056d0 <GetReadPrecentageCommand+0x54>)
 80056c4:	0020      	movs	r0, r4
 80056c6:	f00f f85d 	bl	8014784 <siprintf>
 80056ca:	e7ec      	b.n	80056a6 <GetReadPrecentageCommand+0x2a>
 80056cc:	0801930c 	.word	0x0801930c
 80056d0:	080192e8 	.word	0x080192e8

080056d4 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056d4:	b510      	push	{r4, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056da:	2300      	movs	r3, #0
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056e0:	4669      	mov	r1, sp
 80056e2:	a801      	add	r0, sp, #4
 80056e4:	f007 feba 	bl	800d45c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056e8:	a901      	add	r1, sp, #4
 80056ea:	0020      	movs	r0, r4
 80056ec:	f00f f885 	bl	80147fa <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 80056f0:	9800      	ldr	r0, [sp, #0]
 80056f2:	f7fd fb7b 	bl	8002dec <__aeabi_f2d>
 80056f6:	0002      	movs	r2, r0
 80056f8:	000b      	movs	r3, r1
 80056fa:	4903      	ldr	r1, [pc, #12]	; (8005708 <ReadVrefCommand+0x34>)
 80056fc:	0020      	movs	r0, r4
 80056fe:	f00f f841 	bl	8014784 <siprintf>
}
 8005702:	2000      	movs	r0, #0
 8005704:	b002      	add	sp, #8
 8005706:	bd10      	pop	{r4, pc}
 8005708:	08019324 	.word	0x08019324

0800570c <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800570c:	b510      	push	{r4, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005712:	2300      	movs	r3, #0
 8005714:	9301      	str	r3, [sp, #4]
 8005716:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005718:	4669      	mov	r1, sp
 800571a:	a801      	add	r0, sp, #4
 800571c:	f007 fe9e 	bl	800d45c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005720:	a901      	add	r1, sp, #4
 8005722:	0020      	movs	r0, r4
 8005724:	f00f f869 	bl	80147fa <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005728:	9801      	ldr	r0, [sp, #4]
 800572a:	f7fd fb5f 	bl	8002dec <__aeabi_f2d>
 800572e:	0002      	movs	r2, r0
 8005730:	000b      	movs	r3, r1
 8005732:	4903      	ldr	r1, [pc, #12]	; (8005740 <ReadTempCommand+0x34>)
 8005734:	0020      	movs	r0, r4
 8005736:	f00f f825 	bl	8014784 <siprintf>
}
 800573a:	2000      	movs	r0, #0
 800573c:	b002      	add	sp, #8
 800573e:	bd10      	pop	{r4, pc}
 8005740:	0801934c 	.word	0x0801934c

08005744 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	0006      	movs	r6, r0
 800574a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800574c:	2300      	movs	r3, #0
 800574e:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005750:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005752:	2300      	movs	r3, #0
 8005754:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005756:	aa03      	add	r2, sp, #12
 8005758:	2101      	movs	r1, #1
 800575a:	0020      	movs	r0, r4
 800575c:	f009 f998 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8005760:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005762:	aa02      	add	r2, sp, #8
 8005764:	2102      	movs	r1, #2
 8005766:	0020      	movs	r0, r4
 8005768:	f009 f992 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800576c:	0004      	movs	r4, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800576e:	782b      	ldrb	r3, [r5, #0]
 8005770:	3b32      	subs	r3, #50	; 0x32
 8005772:	2b01      	cmp	r3, #1
 8005774:	d907      	bls.n	8005786 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005776:	2215      	movs	r2, #21
 8005778:	4919      	ldr	r1, [pc, #100]	; (80057e0 <ADCReadCommand+0x9c>)
 800577a:	0030      	movs	r0, r6
 800577c:	f00e fa40 	bl	8013c00 <memcpy>
}
 8005780:	2000      	movs	r0, #0
 8005782:	b004      	add	sp, #16
 8005784:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005786:	0028      	movs	r0, r5
 8005788:	f00e f9ed 	bl	8013b66 <atol>
 800578c:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800578e:	4915      	ldr	r1, [pc, #84]	; (80057e4 <ADCReadCommand+0xa0>)
 8005790:	0020      	movs	r0, r4
 8005792:	f7fa fcb7 	bl	8000104 <strcmp>
 8005796:	2800      	cmp	r0, #0
 8005798:	d005      	beq.n	80057a6 <ADCReadCommand+0x62>
 800579a:	4913      	ldr	r1, [pc, #76]	; (80057e8 <ADCReadCommand+0xa4>)
 800579c:	0020      	movs	r0, r4
 800579e:	f7fa fcb1 	bl	8000104 <strcmp>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d116      	bne.n	80057d4 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 80057a6:	4c0f      	ldr	r4, [pc, #60]	; (80057e4 <ADCReadCommand+0xa0>)
 80057a8:	0021      	movs	r1, r4
 80057aa:	0028      	movs	r0, r5
 80057ac:	f007 fff8 	bl	800d7a0 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80057b0:	aa01      	add	r2, sp, #4
 80057b2:	0021      	movs	r1, r4
 80057b4:	0028      	movs	r0, r5
 80057b6:	f008 f825 	bl	800d804 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80057ba:	a901      	add	r1, sp, #4
 80057bc:	0030      	movs	r0, r6
 80057be:	f00f f81c 	bl	80147fa <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80057c2:	9801      	ldr	r0, [sp, #4]
 80057c4:	f7fa feda 	bl	800057c <__aeabi_f2uiz>
 80057c8:	b282      	uxth	r2, r0
 80057ca:	4908      	ldr	r1, [pc, #32]	; (80057ec <ADCReadCommand+0xa8>)
 80057cc:	0030      	movs	r0, r6
 80057ce:	f00e ffd9 	bl	8014784 <siprintf>
 80057d2:	e7d5      	b.n	8005780 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057d4:	2212      	movs	r2, #18
 80057d6:	4906      	ldr	r1, [pc, #24]	; (80057f0 <ADCReadCommand+0xac>)
 80057d8:	0030      	movs	r0, r6
 80057da:	f00e fa11 	bl	8013c00 <memcpy>
 80057de:	e7cf      	b.n	8005780 <ADCReadCommand+0x3c>
 80057e0:	0801930c 	.word	0x0801930c
 80057e4:	08019370 	.word	0x08019370
 80057e8:	08019374 	.word	0x08019374
 80057ec:	0801937c 	.word	0x0801937c
 80057f0:	0801938c 	.word	0x0801938c

080057f4 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f6:	46ce      	mov	lr, r9
 80057f8:	4647      	mov	r7, r8
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b085      	sub	sp, #20
 80057fe:	0005      	movs	r5, r0
 8005800:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005802:	2300      	movs	r3, #0
 8005804:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005806:	4b62      	ldr	r3, [pc, #392]	; (8005990 <testportCommand+0x19c>)
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	ab02      	add	r3, sp, #8
 800580c:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800580e:	aa03      	add	r2, sp, #12
 8005810:	2101      	movs	r1, #1
 8005812:	f009 f93d 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8005816:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005818:	495e      	ldr	r1, [pc, #376]	; (8005994 <testportCommand+0x1a0>)
 800581a:	f7fa fc73 	bl	8000104 <strcmp>
 800581e:	2800      	cmp	r0, #0
 8005820:	d175      	bne.n	800590e <testportCommand+0x11a>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005822:	4b5d      	ldr	r3, [pc, #372]	; (8005998 <testportCommand+0x1a4>)
 8005824:	781a      	ldrb	r2, [r3, #0]
 8005826:	4b5d      	ldr	r3, [pc, #372]	; (800599c <testportCommand+0x1a8>)
 8005828:	189b      	adds	r3, r3, r2
 800582a:	3b01      	subs	r3, #1
 800582c:	781e      	ldrb	r6, [r3, #0]
 800582e:	2401      	movs	r4, #1
			if(PcPort != ports){
 8005830:	4b59      	ldr	r3, [pc, #356]	; (8005998 <testportCommand+0x1a4>)
 8005832:	4699      	mov	r9, r3
 8005834:	e03e      	b.n	80058b4 <testportCommand+0xc0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005836:	0022      	movs	r2, r4
 8005838:	4959      	ldr	r1, [pc, #356]	; (80059a0 <testportCommand+0x1ac>)
 800583a:	0028      	movs	r0, r5
 800583c:	f00e ffa2 	bl	8014784 <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005840:	0028      	movs	r0, r5
 8005842:	f7fa fc69 	bl	8000118 <strlen>
 8005846:	b282      	uxth	r2, r0
 8005848:	4b53      	ldr	r3, [pc, #332]	; (8005998 <testportCommand+0x1a4>)
 800584a:	7818      	ldrb	r0, [r3, #0]
 800584c:	2364      	movs	r3, #100	; 0x64
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	3b5a      	subs	r3, #90	; 0x5a
 8005852:	0029      	movs	r1, r5
 8005854:	f008 fe52 	bl	800e4fc <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 8005858:	2254      	movs	r2, #84	; 0x54
 800585a:	4952      	ldr	r1, [pc, #328]	; (80059a4 <testportCommand+0x1b0>)
 800585c:	0028      	movs	r0, r5
 800585e:	f00e f9cf 	bl	8013c00 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005862:	0028      	movs	r0, r5
 8005864:	f7fa fc58 	bl	8000118 <strlen>
 8005868:	b282      	uxth	r2, r0
 800586a:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <testportCommand+0x1a4>)
 800586c:	7818      	ldrb	r0, [r3, #0]
 800586e:	2364      	movs	r3, #100	; 0x64
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	3b5a      	subs	r3, #90	; 0x5a
 8005874:	0029      	movs	r1, r5
 8005876:	f008 fe41 	bl	800e4fc <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800587a:	3601      	adds	r6, #1
 800587c:	4b46      	ldr	r3, [pc, #280]	; (8005998 <testportCommand+0x1a4>)
 800587e:	781a      	ldrb	r2, [r3, #0]
 8005880:	3a01      	subs	r2, #1
 8005882:	0053      	lsls	r3, r2, #1
 8005884:	189b      	adds	r3, r3, r2
 8005886:	019b      	lsls	r3, r3, #6
 8005888:	4a47      	ldr	r2, [pc, #284]	; (80059a8 <testportCommand+0x1b4>)
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	5d9b      	ldrb	r3, [r3, r6]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10d      	bne.n	80058ae <testportCommand+0xba>
 8005892:	4690      	mov	r8, r2
 8005894:	4f40      	ldr	r7, [pc, #256]	; (8005998 <testportCommand+0x1a4>)
					Delay_ms(1);
 8005896:	2001      	movs	r0, #1
 8005898:	f00a ff56 	bl	8010748 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 800589c:	783a      	ldrb	r2, [r7, #0]
 800589e:	3a01      	subs	r2, #1
 80058a0:	0053      	lsls	r3, r2, #1
 80058a2:	189b      	adds	r3, r3, r2
 80058a4:	019b      	lsls	r3, r3, #6
 80058a6:	4443      	add	r3, r8
 80058a8:	5d9b      	ldrb	r3, [r3, r6]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f3      	beq.n	8005896 <testportCommand+0xa2>
		for(ports =1; ports <= NumOfPorts; ports++){
 80058ae:	3401      	adds	r4, #1
 80058b0:	2c04      	cmp	r4, #4
 80058b2:	d035      	beq.n	8005920 <testportCommand+0x12c>
 80058b4:	b2e7      	uxtb	r7, r4
			if(PcPort != ports){
 80058b6:	464b      	mov	r3, r9
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	42bb      	cmp	r3, r7
 80058bc:	d0f7      	beq.n	80058ae <testportCommand+0xba>
				WriteVaule[0] =rand();
 80058be:	f00e fed3 	bl	8014668 <rand>
 80058c2:	466b      	mov	r3, sp
 80058c4:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 80058c6:	2364      	movs	r3, #100	; 0x64
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	3b5a      	subs	r3, #90	; 0x5a
 80058cc:	2201      	movs	r2, #1
 80058ce:	a902      	add	r1, sp, #8
 80058d0:	0038      	movs	r0, r7
 80058d2:	f008 fe13 	bl	800e4fc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80058d6:	0038      	movs	r0, r7
 80058d8:	f008 fdfa 	bl	800e4d0 <GetUart>
 80058dc:	6803      	ldr	r3, [r0, #0]
 80058de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 80058e0:	466a      	mov	r2, sp
 80058e2:	7a12      	ldrb	r2, [r2, #8]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d0a5      	beq.n	8005836 <testportCommand+0x42>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 80058ea:	0022      	movs	r2, r4
 80058ec:	492f      	ldr	r1, [pc, #188]	; (80059ac <testportCommand+0x1b8>)
 80058ee:	0028      	movs	r0, r5
 80058f0:	f00e ff48 	bl	8014784 <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80058f4:	0028      	movs	r0, r5
 80058f6:	f7fa fc0f 	bl	8000118 <strlen>
 80058fa:	b282      	uxth	r2, r0
 80058fc:	4b26      	ldr	r3, [pc, #152]	; (8005998 <testportCommand+0x1a4>)
 80058fe:	7818      	ldrb	r0, [r3, #0]
 8005900:	2364      	movs	r3, #100	; 0x64
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	3b5a      	subs	r3, #90	; 0x5a
 8005906:	0029      	movs	r1, r5
 8005908:	f008 fdf8 	bl	800e4fc <writePxMutex>
 800590c:	e7a4      	b.n	8005858 <testportCommand+0x64>
	else if(pcParameterString1[0] == 'p'){
 800590e:	2300      	movs	r3, #0
 8005910:	56e3      	ldrsb	r3, [r4, r3]
 8005912:	2b70      	cmp	r3, #112	; 0x70
 8005914:	d00a      	beq.n	800592c <testportCommand+0x138>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005916:	220f      	movs	r2, #15
 8005918:	4925      	ldr	r1, [pc, #148]	; (80059b0 <testportCommand+0x1bc>)
 800591a:	0028      	movs	r0, r5
 800591c:	f00e f970 	bl	8013c00 <memcpy>
}
 8005920:	2000      	movs	r0, #0
 8005922:	b005      	add	sp, #20
 8005924:	bcc0      	pop	{r6, r7}
 8005926:	46b9      	mov	r9, r7
 8005928:	46b0      	mov	r8, r6
 800592a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800592c:	1c60      	adds	r0, r4, #1
 800592e:	f00e f91a 	bl	8013b66 <atol>
 8005932:	0004      	movs	r4, r0
 8005934:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005936:	1e73      	subs	r3, r6, #1
 8005938:	2b02      	cmp	r3, #2
 800593a:	d905      	bls.n	8005948 <testportCommand+0x154>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800593c:	221b      	movs	r2, #27
 800593e:	491d      	ldr	r1, [pc, #116]	; (80059b4 <testportCommand+0x1c0>)
 8005940:	0028      	movs	r0, r5
 8005942:	f00e f95d 	bl	8013c00 <memcpy>
 8005946:	e7eb      	b.n	8005920 <testportCommand+0x12c>
				WriteVaule[0] =rand();
 8005948:	f00e fe8e 	bl	8014668 <rand>
 800594c:	466b      	mov	r3, sp
 800594e:	7218      	strb	r0, [r3, #8]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005950:	2364      	movs	r3, #100	; 0x64
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	3b32      	subs	r3, #50	; 0x32
 8005956:	2201      	movs	r2, #1
 8005958:	a902      	add	r1, sp, #8
 800595a:	0030      	movs	r0, r6
 800595c:	f008 fdce 	bl	800e4fc <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005960:	2000      	movs	r0, #0
 8005962:	f008 fdb5 	bl	800e4d0 <GetUart>
 8005966:	6803      	ldr	r3, [r0, #0]
 8005968:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 800596a:	466a      	mov	r2, sp
 800596c:	7a12      	ldrb	r2, [r2, #8]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	429a      	cmp	r2, r3
 8005972:	d006      	beq.n	8005982 <testportCommand+0x18e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	4022      	ands	r2, r4
 8005978:	490c      	ldr	r1, [pc, #48]	; (80059ac <testportCommand+0x1b8>)
 800597a:	0028      	movs	r0, r5
 800597c:	f00e ff02 	bl	8014784 <siprintf>
	return pdFALSE;
 8005980:	e7ce      	b.n	8005920 <testportCommand+0x12c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005982:	22ff      	movs	r2, #255	; 0xff
 8005984:	4022      	ands	r2, r4
 8005986:	4906      	ldr	r1, [pc, #24]	; (80059a0 <testportCommand+0x1ac>)
 8005988:	0028      	movs	r0, r5
 800598a:	f00e fefb 	bl	8014784 <siprintf>
 800598e:	e7c7      	b.n	8005920 <testportCommand+0x12c>
 8005990:	08019450 	.word	0x08019450
 8005994:	08018800 	.word	0x08018800
 8005998:	200002b8 	.word	0x200002b8
 800599c:	20000c8c 	.word	0x20000c8c
 80059a0:	080193a0 	.word	0x080193a0
 80059a4:	080193d0 	.word	0x080193d0
 80059a8:	20000a4c 	.word	0x20000a4c
 80059ac:	080193bc 	.word	0x080193bc
 80059b0:	08019424 	.word	0x08019424
 80059b4:	08019434 	.word	0x08019434

080059b8 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ba:	b083      	sub	sp, #12
 80059bc:	0005      	movs	r5, r0
 80059be:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059c6:	aa01      	add	r2, sp, #4
 80059c8:	2101      	movs	r1, #1
 80059ca:	0020      	movs	r0, r4
 80059cc:	f009 f860 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80059d0:	2300      	movs	r3, #0
 80059d2:	56c3      	ldrsb	r3, [r0, r3]
 80059d4:	2b70      	cmp	r3, #112	; 0x70
 80059d6:	d00e      	beq.n	80059f6 <unbridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059d8:	466a      	mov	r2, sp
 80059da:	2102      	movs	r1, #2
 80059dc:	0020      	movs	r0, r4
 80059de:	f009 f857 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059e2:	2300      	movs	r3, #0
 80059e4:	56c3      	ldrsb	r3, [r0, r3]
 80059e6:	2b70      	cmp	r3, #112	; 0x70
 80059e8:	d026      	beq.n	8005a38 <unbridgeCommand+0x80>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059ea:	220f      	movs	r2, #15
 80059ec:	4919      	ldr	r1, [pc, #100]	; (8005a54 <unbridgeCommand+0x9c>)
 80059ee:	0028      	movs	r0, r5
 80059f0:	f00e f906 	bl	8013c00 <memcpy>
 80059f4:	e02b      	b.n	8005a4e <unbridgeCommand+0x96>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059f6:	3001      	adds	r0, #1
 80059f8:	f00e f8b5 	bl	8013b66 <atol>
 80059fc:	0006      	movs	r6, r0
 80059fe:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a00:	466a      	mov	r2, sp
 8005a02:	2102      	movs	r1, #2
 8005a04:	0020      	movs	r0, r4
 8005a06:	f009 f843 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	56c3      	ldrsb	r3, [r0, r3]
 8005a0e:	2b70      	cmp	r3, #112	; 0x70
 8005a10:	d1eb      	bne.n	80059ea <unbridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a12:	3001      	adds	r0, #1
 8005a14:	f00e f8a7 	bl	8013b66 <atol>
 8005a18:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 8005a1a:	b2c1      	uxtb	r1, r0
 8005a1c:	0038      	movs	r0, r7
 8005a1e:	f7fe febb 	bl	8004798 <Unbridge>
	if(result == BOS_OK)
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d10c      	bne.n	8005a40 <unbridgeCommand+0x88>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a26:	22ff      	movs	r2, #255	; 0xff
 8005a28:	0023      	movs	r3, r4
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	4032      	ands	r2, r6
 8005a2e:	490a      	ldr	r1, [pc, #40]	; (8005a58 <unbridgeCommand+0xa0>)
 8005a30:	0028      	movs	r0, r5
 8005a32:	f00e fea7 	bl	8014784 <siprintf>
 8005a36:	e00a      	b.n	8005a4e <unbridgeCommand+0x96>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a38:	3001      	adds	r0, #1
 8005a3a:	f00e f894 	bl	8013b66 <atol>
	else if(result == BOS_ERR_WrongParam)
 8005a3e:	e7d4      	b.n	80059ea <unbridgeCommand+0x32>
 8005a40:	2867      	cmp	r0, #103	; 0x67
 8005a42:	d0d2      	beq.n	80059ea <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a44:	2219      	movs	r2, #25
 8005a46:	4905      	ldr	r1, [pc, #20]	; (8005a5c <unbridgeCommand+0xa4>)
 8005a48:	0028      	movs	r0, r5
 8005a4a:	f00e f8d9 	bl	8013c00 <memcpy>
}
 8005a4e:	2000      	movs	r0, #0
 8005a50:	b003      	add	sp, #12
 8005a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a54:	08019424 	.word	0x08019424
 8005a58:	08019454 	.word	0x08019454
 8005a5c:	08019474 	.word	0x08019474

08005a60 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	b083      	sub	sp, #12
 8005a64:	0005      	movs	r5, r0
 8005a66:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a6e:	aa01      	add	r2, sp, #4
 8005a70:	2101      	movs	r1, #1
 8005a72:	0020      	movs	r0, r4
 8005a74:	f009 f80c 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a78:	2300      	movs	r3, #0
 8005a7a:	56c3      	ldrsb	r3, [r0, r3]
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d00e      	beq.n	8005a9e <bridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a80:	466a      	mov	r2, sp
 8005a82:	2102      	movs	r1, #2
 8005a84:	0020      	movs	r0, r4
 8005a86:	f009 f803 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	56c3      	ldrsb	r3, [r0, r3]
 8005a8e:	2b70      	cmp	r3, #112	; 0x70
 8005a90:	d026      	beq.n	8005ae0 <bridgeCommand+0x80>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a92:	220f      	movs	r2, #15
 8005a94:	4919      	ldr	r1, [pc, #100]	; (8005afc <bridgeCommand+0x9c>)
 8005a96:	0028      	movs	r0, r5
 8005a98:	f00e f8b2 	bl	8013c00 <memcpy>
 8005a9c:	e02b      	b.n	8005af6 <bridgeCommand+0x96>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f00e f861 	bl	8013b66 <atol>
 8005aa4:	0006      	movs	r6, r0
 8005aa6:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005aa8:	466a      	mov	r2, sp
 8005aaa:	2102      	movs	r1, #2
 8005aac:	0020      	movs	r0, r4
 8005aae:	f008 ffef 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	56c3      	ldrsb	r3, [r0, r3]
 8005ab6:	2b70      	cmp	r3, #112	; 0x70
 8005ab8:	d1eb      	bne.n	8005a92 <bridgeCommand+0x32>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005aba:	3001      	adds	r0, #1
 8005abc:	f00e f853 	bl	8013b66 <atol>
 8005ac0:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005ac2:	b2c1      	uxtb	r1, r0
 8005ac4:	0038      	movs	r0, r7
 8005ac6:	f7fe fe53 	bl	8004770 <Bridge>
	if(result == BOS_OK)
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d10c      	bne.n	8005ae8 <bridgeCommand+0x88>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	0023      	movs	r3, r4
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	4032      	ands	r2, r6
 8005ad6:	490a      	ldr	r1, [pc, #40]	; (8005b00 <bridgeCommand+0xa0>)
 8005ad8:	0028      	movs	r0, r5
 8005ada:	f00e fe53 	bl	8014784 <siprintf>
 8005ade:	e00a      	b.n	8005af6 <bridgeCommand+0x96>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f00e f840 	bl	8013b66 <atol>
	else if(result == BOS_ERR_WrongParam)
 8005ae6:	e7d4      	b.n	8005a92 <bridgeCommand+0x32>
 8005ae8:	2867      	cmp	r0, #103	; 0x67
 8005aea:	d0d2      	beq.n	8005a92 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005aec:	2217      	movs	r2, #23
 8005aee:	4905      	ldr	r1, [pc, #20]	; (8005b04 <bridgeCommand+0xa4>)
 8005af0:	0028      	movs	r0, r5
 8005af2:	f00e f885 	bl	8013c00 <memcpy>
}
 8005af6:	2000      	movs	r0, #0
 8005af8:	b003      	add	sp, #12
 8005afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005afc:	08019424 	.word	0x08019424
 8005b00:	08019490 	.word	0x08019490
 8005b04:	080194b4 	.word	0x080194b4

08005b08 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b0a:	46de      	mov	lr, fp
 8005b0c:	4657      	mov	r7, sl
 8005b0e:	464e      	mov	r6, r9
 8005b10:	4645      	mov	r5, r8
 8005b12:	b5e0      	push	{r5, r6, r7, lr}
 8005b14:	b083      	sub	sp, #12
 8005b16:	4682      	mov	sl, r0
 8005b18:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005b1e:	aa01      	add	r2, sp, #4
 8005b20:	2101      	movs	r1, #1
 8005b22:	f008 ffb5 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005b26:	f00e f818 	bl	8013b5a <atoi>
 8005b2a:	0006      	movs	r6, r0
 8005b2c:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005b2e:	2c00      	cmp	r4, #0
 8005b30:	d003      	beq.n	8005b3a <delSnipCommand+0x32>
 8005b32:	4b2f      	ldr	r3, [pc, #188]	; (8005bf0 <delSnipCommand+0xe8>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	d20c      	bcs.n	8005b54 <delSnipCommand+0x4c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b3a:	2223      	movs	r2, #35	; 0x23
 8005b3c:	492d      	ldr	r1, [pc, #180]	; (8005bf4 <delSnipCommand+0xec>)
 8005b3e:	4650      	mov	r0, sl
 8005b40:	f00e f85e 	bl	8013c00 <memcpy>
}
 8005b44:	2000      	movs	r0, #0
 8005b46:	b003      	add	sp, #12
 8005b48:	bcf0      	pop	{r4, r5, r6, r7}
 8005b4a:	46bb      	mov	fp, r7
 8005b4c:	46b2      	mov	sl, r6
 8005b4e:	46a9      	mov	r9, r5
 8005b50:	46a0      	mov	r8, r4
 8005b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005b54:	25ff      	movs	r5, #255	; 0xff
 8005b56:	4005      	ands	r5, r0
 8005b58:	3d01      	subs	r5, #1
 8005b5a:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <delSnipCommand+0xf0>)
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	00ab      	lsls	r3, r5, #2
 8005b60:	4698      	mov	r8, r3
 8005b62:	195b      	adds	r3, r3, r5
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	2700      	movs	r7, #0
 8005b68:	464a      	mov	r2, r9
 8005b6a:	549f      	strb	r7, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	195b      	adds	r3, r3, r5
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	444b      	add	r3, r9
 8005b74:	469b      	mov	fp, r3
 8005b76:	705f      	strb	r7, [r3, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b78:	4643      	mov	r3, r8
 8005b7a:	1958      	adds	r0, r3, r5
 8005b7c:	0080      	lsls	r0, r0, #2
 8005b7e:	3002      	adds	r0, #2
 8005b80:	4448      	add	r0, r9
 8005b82:	2204      	movs	r2, #4
 8005b84:	2100      	movs	r1, #0
 8005b86:	f00e f844 	bl	8013c12 <memset>
		snippets[index - 1].state = false;
 8005b8a:	465b      	mov	r3, fp
 8005b8c:	741f      	strb	r7, [r3, #16]
		free(snippets[index - 1].cmd);
 8005b8e:	68d8      	ldr	r0, [r3, #12]
 8005b90:	f00e f81e 	bl	8013bd0 <free>
		snippets[index - 1].cmd = NULL;
 8005b94:	465d      	mov	r5, fp
 8005b96:	60ef      	str	r7, [r5, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <delSnipCommand+0xe8>)
 8005b9a:	781f      	ldrb	r7, [r3, #0]
 8005b9c:	42bc      	cmp	r4, r7
 8005b9e:	d21b      	bcs.n	8005bd8 <delSnipCommand+0xd0>
 8005ba0:	25ff      	movs	r5, #255	; 0xff
 8005ba2:	402e      	ands	r6, r5
 8005ba4:	00b5      	lsls	r5, r6, #2
 8005ba6:	19ad      	adds	r5, r5, r6
 8005ba8:	00ad      	lsls	r5, r5, #2
 8005baa:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <delSnipCommand+0xf0>)
 8005bac:	18ed      	adds	r5, r5, r3
 8005bae:	e00f      	b.n	8005bd0 <delSnipCommand+0xc8>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005bb0:	2214      	movs	r2, #20
 8005bb2:	0029      	movs	r1, r5
 8005bb4:	0028      	movs	r0, r5
 8005bb6:	3814      	subs	r0, #20
 8005bb8:	f00e f822 	bl	8013c00 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005bbc:	2214      	movs	r2, #20
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	0028      	movs	r0, r5
 8005bc2:	f00e f826 	bl	8013c12 <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005bc6:	3401      	adds	r4, #1
 8005bc8:	b2e4      	uxtb	r4, r4
 8005bca:	3514      	adds	r5, #20
 8005bcc:	42bc      	cmp	r4, r7
 8005bce:	d003      	beq.n	8005bd8 <delSnipCommand+0xd0>
			if(snippets[s].cond.conditionType){
 8005bd0:	782b      	ldrb	r3, [r5, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0f7      	beq.n	8005bc6 <delSnipCommand+0xbe>
 8005bd6:	e7eb      	b.n	8005bb0 <delSnipCommand+0xa8>
		--numOfRecordedSnippets;
 8005bd8:	1e7b      	subs	r3, r7, #1
 8005bda:	4a05      	ldr	r2, [pc, #20]	; (8005bf0 <delSnipCommand+0xe8>)
 8005bdc:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005bde:	f004 fbb5 	bl	800a34c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005be2:	2236      	movs	r2, #54	; 0x36
 8005be4:	4905      	ldr	r1, [pc, #20]	; (8005bfc <delSnipCommand+0xf4>)
 8005be6:	4650      	mov	r0, sl
 8005be8:	f00e f80a 	bl	8013c00 <memcpy>
 8005bec:	e7aa      	b.n	8005b44 <delSnipCommand+0x3c>
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	2000099f 	.word	0x2000099f
 8005bf4:	08019504 	.word	0x08019504
 8005bf8:	20006294 	.word	0x20006294
 8005bfc:	080194cc 	.word	0x080194cc

08005c00 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c00:	b510      	push	{r4, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	0004      	movs	r4, r0
 8005c06:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c0c:	aa01      	add	r2, sp, #4
 8005c0e:	2101      	movs	r1, #1
 8005c10:	f008 ff3e 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c14:	f00d ffa1 	bl	8013b5a <atoi>
 8005c18:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <pauseSnipCommand+0x26>
 8005c1e:	4a0f      	ldr	r2, [pc, #60]	; (8005c5c <pauseSnipCommand+0x5c>)
 8005c20:	7812      	ldrb	r2, [r2, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d207      	bcs.n	8005c36 <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c26:	2223      	movs	r2, #35	; 0x23
 8005c28:	490d      	ldr	r1, [pc, #52]	; (8005c60 <pauseSnipCommand+0x60>)
 8005c2a:	0020      	movs	r0, r4
 8005c2c:	f00d ffe8 	bl	8013c00 <memcpy>
}
 8005c30:	2000      	movs	r0, #0
 8005c32:	b002      	add	sp, #8
 8005c34:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005c36:	23ff      	movs	r3, #255	; 0xff
 8005c38:	4018      	ands	r0, r3
 8005c3a:	3801      	subs	r0, #1
 8005c3c:	0083      	lsls	r3, r0, #2
 8005c3e:	1818      	adds	r0, r3, r0
 8005c40:	0080      	lsls	r0, r0, #2
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <pauseSnipCommand+0x64>)
 8005c44:	1818      	adds	r0, r3, r0
 8005c46:	2300      	movs	r3, #0
 8005c48:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c4a:	f004 fb7f 	bl	800a34c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c4e:	2235      	movs	r2, #53	; 0x35
 8005c50:	4905      	ldr	r1, [pc, #20]	; (8005c68 <pauseSnipCommand+0x68>)
 8005c52:	0020      	movs	r0, r4
 8005c54:	f00d ffd4 	bl	8013c00 <memcpy>
 8005c58:	e7ea      	b.n	8005c30 <pauseSnipCommand+0x30>
 8005c5a:	46c0      	nop			; (mov r8, r8)
 8005c5c:	2000099f 	.word	0x2000099f
 8005c60:	08019504 	.word	0x08019504
 8005c64:	20006294 	.word	0x20006294
 8005c68:	08019528 	.word	0x08019528

08005c6c <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	0004      	movs	r4, r0
 8005c72:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c78:	aa01      	add	r2, sp, #4
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	f008 ff08 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c80:	f00d ff6b 	bl	8013b5a <atoi>
 8005c84:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <actSnipCommand+0x26>
 8005c8a:	4a0f      	ldr	r2, [pc, #60]	; (8005cc8 <actSnipCommand+0x5c>)
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d207      	bcs.n	8005ca2 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c92:	2223      	movs	r2, #35	; 0x23
 8005c94:	490d      	ldr	r1, [pc, #52]	; (8005ccc <actSnipCommand+0x60>)
 8005c96:	0020      	movs	r0, r4
 8005c98:	f00d ffb2 	bl	8013c00 <memcpy>
}
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005ca2:	23ff      	movs	r3, #255	; 0xff
 8005ca4:	4018      	ands	r0, r3
 8005ca6:	3801      	subs	r0, #1
 8005ca8:	0083      	lsls	r3, r0, #2
 8005caa:	1818      	adds	r0, r3, r0
 8005cac:	0080      	lsls	r0, r0, #2
 8005cae:	4b08      	ldr	r3, [pc, #32]	; (8005cd0 <actSnipCommand+0x64>)
 8005cb0:	1818      	adds	r0, r3, r0
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005cb6:	f004 fb49 	bl	800a34c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005cba:	2238      	movs	r2, #56	; 0x38
 8005cbc:	4905      	ldr	r1, [pc, #20]	; (8005cd4 <actSnipCommand+0x68>)
 8005cbe:	0020      	movs	r0, r4
 8005cc0:	f00d ff9e 	bl	8013c00 <memcpy>
 8005cc4:	e7ea      	b.n	8005c9c <actSnipCommand+0x30>
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	2000099f 	.word	0x2000099f
 8005ccc:	08019504 	.word	0x08019504
 8005cd0:	20006294 	.word	0x20006294
 8005cd4:	08019560 	.word	0x08019560

08005cd8 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	46de      	mov	lr, fp
 8005cdc:	4657      	mov	r7, sl
 8005cde:	464e      	mov	r6, r9
 8005ce0:	4645      	mov	r5, r8
 8005ce2:	b5e0      	push	{r5, r6, r7, lr}
 8005ce4:	b08b      	sub	sp, #44	; 0x2c
 8005ce6:	0005      	movs	r5, r0
	char status[2][7] ={"Paused", "Active"};
 8005ce8:	aa06      	add	r2, sp, #24
 8005cea:	4b7d      	ldr	r3, [pc, #500]	; (8005ee0 <snipCommand+0x208>)
 8005cec:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005cee:	c213      	stmia	r2!, {r0, r1, r4}
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cf4:	4b7b      	ldr	r3, [pc, #492]	; (8005ee4 <snipCommand+0x20c>)
 8005cf6:	7818      	ldrb	r0, [r3, #0]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	425b      	negs	r3, r3
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	3333      	adds	r3, #51	; 0x33
 8005d00:	2237      	movs	r2, #55	; 0x37
 8005d02:	4979      	ldr	r1, [pc, #484]	; (8005ee8 <snipCommand+0x210>)
 8005d04:	f008 fbfa 	bl	800e4fc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005d08:	4b78      	ldr	r3, [pc, #480]	; (8005eec <snipCommand+0x214>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d100      	bne.n	8005d12 <snipCommand+0x3a>
 8005d10:	e0d9      	b.n	8005ec6 <snipCommand+0x1ee>
 8005d12:	2300      	movs	r3, #0
 8005d14:	4698      	mov	r8, r3
		if(snippets[s].cond.conditionType)
 8005d16:	4b76      	ldr	r3, [pc, #472]	; (8005ef0 <snipCommand+0x218>)
 8005d18:	4699      	mov	r9, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005d1a:	4c76      	ldr	r4, [pc, #472]	; (8005ef4 <snipCommand+0x21c>)
 8005d1c:	e0a9      	b.n	8005e72 <snipCommand+0x19a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005d1e:	4b74      	ldr	r3, [pc, #464]	; (8005ef0 <snipCommand+0x218>)
 8005d20:	469b      	mov	fp, r3
 8005d22:	00be      	lsls	r6, r7, #2
 8005d24:	19f3      	adds	r3, r6, r7
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	445b      	add	r3, fp
 8005d2a:	7c1a      	ldrb	r2, [r3, #16]
 8005d2c:	00d3      	lsls	r3, r2, #3
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	aa06      	add	r2, sp, #24
 8005d32:	4694      	mov	ip, r2
 8005d34:	4463      	add	r3, ip
 8005d36:	4642      	mov	r2, r8
 8005d38:	496f      	ldr	r1, [pc, #444]	; (8005ef8 <snipCommand+0x220>)
 8005d3a:	0028      	movs	r0, r5
 8005d3c:	f00e fd22 	bl	8014784 <siprintf>
		switch(snippets[s].cond.conditionType){
 8005d40:	19f6      	adds	r6, r6, r7
 8005d42:	00b6      	lsls	r6, r6, #2
 8005d44:	465b      	mov	r3, fp
 8005d46:	5cf3      	ldrb	r3, [r6, r3]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d11c      	bne.n	8005d86 <snipCommand+0xae>
				switch(snippets[s].cond.buffer1[1]){
 8005d4c:	00bb      	lsls	r3, r7, #2
 8005d4e:	19db      	adds	r3, r3, r7
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4a67      	ldr	r2, [pc, #412]	; (8005ef0 <snipCommand+0x218>)
 8005d54:	18d3      	adds	r3, r2, r3
 8005d56:	78db      	ldrb	r3, [r3, #3]
 8005d58:	2b0b      	cmp	r3, #11
 8005d5a:	d840      	bhi.n	8005dde <snipCommand+0x106>
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d85f      	bhi.n	8005e20 <snipCommand+0x148>
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d04f      	beq.n	8005e04 <snipCommand+0x12c>
 8005d64:	2b06      	cmp	r3, #6
 8005d66:	d000      	beq.n	8005d6a <snipCommand+0x92>
 8005d68:	e091      	b.n	8005e8e <snipCommand+0x1b6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d6a:	00bb      	lsls	r3, r7, #2
 8005d6c:	19df      	adds	r7, r3, r7
 8005d6e:	00bf      	lsls	r7, r7, #2
 8005d70:	4b5f      	ldr	r3, [pc, #380]	; (8005ef0 <snipCommand+0x218>)
 8005d72:	19df      	adds	r7, r3, r7
 8005d74:	78bb      	ldrb	r3, [r7, #2]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	9200      	str	r2, [sp, #0]
 8005d7a:	002a      	movs	r2, r5
 8005d7c:	495f      	ldr	r1, [pc, #380]	; (8005efc <snipCommand+0x224>)
 8005d7e:	0028      	movs	r0, r5
 8005d80:	f00e fd00 	bl	8014784 <siprintf>
						break;
 8005d84:	e083      	b.n	8005e8e <snipCommand+0x1b6>
		switch(snippets[s].cond.conditionType){
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	d000      	beq.n	8005d8c <snipCommand+0xb4>
 8005d8a:	e080      	b.n	8005e8e <snipCommand+0x1b6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005d8c:	00b9      	lsls	r1, r7, #2
 8005d8e:	19c9      	adds	r1, r1, r7
 8005d90:	0089      	lsls	r1, r1, #2
 8005d92:	3106      	adds	r1, #6
 8005d94:	4e56      	ldr	r6, [pc, #344]	; (8005ef0 <snipCommand+0x218>)
 8005d96:	1989      	adds	r1, r1, r6
 8005d98:	2204      	movs	r2, #4
 8005d9a:	a805      	add	r0, sp, #20
 8005d9c:	f00d ff30 	bl	8013c00 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005da0:	00bb      	lsls	r3, r7, #2
 8005da2:	19df      	adds	r7, r3, r7
 8005da4:	00bf      	lsls	r7, r7, #2
 8005da6:	19f6      	adds	r6, r6, r7
 8005da8:	78f2      	ldrb	r2, [r6, #3]
 8005daa:	3a01      	subs	r2, #1
 8005dac:	0053      	lsls	r3, r2, #1
 8005dae:	189b      	adds	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a53      	ldr	r2, [pc, #332]	; (8005f00 <snipCommand+0x228>)
 8005db4:	18d3      	adds	r3, r2, r3
 8005db6:	689f      	ldr	r7, [r3, #8]
 8005db8:	9805      	ldr	r0, [sp, #20]
 8005dba:	f7fd f817 	bl	8002dec <__aeabi_f2d>
 8005dbe:	9002      	str	r0, [sp, #8]
 8005dc0:	9103      	str	r1, [sp, #12]
 8005dc2:	7873      	ldrb	r3, [r6, #1]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	005a      	lsls	r2, r3, #1
 8005dc8:	18d2      	adds	r2, r2, r3
 8005dca:	4b4e      	ldr	r3, [pc, #312]	; (8005f04 <snipCommand+0x22c>)
 8005dcc:	189b      	adds	r3, r3, r2
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	003b      	movs	r3, r7
 8005dd2:	002a      	movs	r2, r5
 8005dd4:	494c      	ldr	r1, [pc, #304]	; (8005f08 <snipCommand+0x230>)
 8005dd6:	0028      	movs	r0, r5
 8005dd8:	f00e fcd4 	bl	8014784 <siprintf>
				break;
 8005ddc:	e057      	b.n	8005e8e <snipCommand+0x1b6>
 8005dde:	3b0c      	subs	r3, #12
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d854      	bhi.n	8005e8e <snipCommand+0x1b6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005de4:	00bb      	lsls	r3, r7, #2
 8005de6:	19db      	adds	r3, r3, r7
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4f41      	ldr	r7, [pc, #260]	; (8005ef0 <snipCommand+0x218>)
 8005dec:	18ff      	adds	r7, r7, r3
 8005dee:	78bb      	ldrb	r3, [r7, #2]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	9201      	str	r2, [sp, #4]
 8005df4:	793a      	ldrb	r2, [r7, #4]
 8005df6:	9200      	str	r2, [sp, #0]
 8005df8:	002a      	movs	r2, r5
 8005dfa:	4944      	ldr	r1, [pc, #272]	; (8005f0c <snipCommand+0x234>)
 8005dfc:	0028      	movs	r0, r5
 8005dfe:	f00e fcc1 	bl	8014784 <siprintf>
						break;
 8005e02:	e044      	b.n	8005e8e <snipCommand+0x1b6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005e04:	00bb      	lsls	r3, r7, #2
 8005e06:	19df      	adds	r7, r3, r7
 8005e08:	00bf      	lsls	r7, r7, #2
 8005e0a:	4b39      	ldr	r3, [pc, #228]	; (8005ef0 <snipCommand+0x218>)
 8005e0c:	19df      	adds	r7, r3, r7
 8005e0e:	78bb      	ldrb	r3, [r7, #2]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	9200      	str	r2, [sp, #0]
 8005e14:	002a      	movs	r2, r5
 8005e16:	493e      	ldr	r1, [pc, #248]	; (8005f10 <snipCommand+0x238>)
 8005e18:	0028      	movs	r0, r5
 8005e1a:	f00e fcb3 	bl	8014784 <siprintf>
						break;
 8005e1e:	e036      	b.n	8005e8e <snipCommand+0x1b6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005e20:	00bb      	lsls	r3, r7, #2
 8005e22:	19db      	adds	r3, r3, r7
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4f32      	ldr	r7, [pc, #200]	; (8005ef0 <snipCommand+0x218>)
 8005e28:	18ff      	adds	r7, r7, r3
 8005e2a:	78bb      	ldrb	r3, [r7, #2]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	9201      	str	r2, [sp, #4]
 8005e30:	793a      	ldrb	r2, [r7, #4]
 8005e32:	9200      	str	r2, [sp, #0]
 8005e34:	002a      	movs	r2, r5
 8005e36:	4937      	ldr	r1, [pc, #220]	; (8005f14 <snipCommand+0x23c>)
 8005e38:	0028      	movs	r0, r5
 8005e3a:	f00e fca3 	bl	8014784 <siprintf>
						break;
 8005e3e:	e026      	b.n	8005e8e <snipCommand+0x1b6>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e40:	0028      	movs	r0, r5
 8005e42:	f7fa f969 	bl	8000118 <strlen>
 8005e46:	1828      	adds	r0, r5, r0
 8005e48:	220c      	movs	r2, #12
 8005e4a:	4933      	ldr	r1, [pc, #204]	; (8005f18 <snipCommand+0x240>)
 8005e4c:	f00d fed8 	bl	8013c00 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e50:	0028      	movs	r0, r5
 8005e52:	f7fa f961 	bl	8000118 <strlen>
 8005e56:	b282      	uxth	r2, r0
 8005e58:	4b22      	ldr	r3, [pc, #136]	; (8005ee4 <snipCommand+0x20c>)
 8005e5a:	7818      	ldrb	r0, [r3, #0]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	425b      	negs	r3, r3
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	3333      	adds	r3, #51	; 0x33
 8005e64:	0029      	movs	r1, r5
 8005e66:	f008 fb49 	bl	800e4fc <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e6a:	4b20      	ldr	r3, [pc, #128]	; (8005eec <snipCommand+0x214>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	4543      	cmp	r3, r8
 8005e70:	d929      	bls.n	8005ec6 <snipCommand+0x1ee>
 8005e72:	4647      	mov	r7, r8
 8005e74:	4643      	mov	r3, r8
 8005e76:	3301      	adds	r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4698      	mov	r8, r3
		if(snippets[s].cond.conditionType)
 8005e7c:	46ba      	mov	sl, r7
 8005e7e:	00bb      	lsls	r3, r7, #2
 8005e80:	19db      	adds	r3, r3, r7
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	464a      	mov	r2, r9
 8005e86:	5c9b      	ldrb	r3, [r3, r2]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d000      	beq.n	8005e8e <snipCommand+0x1b6>
 8005e8c:	e747      	b.n	8005d1e <snipCommand+0x46>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e8e:	4f19      	ldr	r7, [pc, #100]	; (8005ef4 <snipCommand+0x21c>)
 8005e90:	4653      	mov	r3, sl
 8005e92:	009e      	lsls	r6, r3, #2
 8005e94:	4456      	add	r6, sl
 8005e96:	00b6      	lsls	r6, r6, #2
 8005e98:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <snipCommand+0x218>)
 8005e9a:	199e      	adds	r6, r3, r6
 8005e9c:	0039      	movs	r1, r7
 8005e9e:	68f0      	ldr	r0, [r6, #12]
 8005ea0:	f7ff fa82 	bl	80053a8 <ParseSnippetCommand>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d0cb      	beq.n	8005e40 <snipCommand+0x168>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ea8:	0023      	movs	r3, r4
 8005eaa:	002a      	movs	r2, r5
 8005eac:	491b      	ldr	r1, [pc, #108]	; (8005f1c <snipCommand+0x244>)
 8005eae:	0028      	movs	r0, r5
 8005eb0:	f00e fc68 	bl	8014784 <siprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005eb4:	0020      	movs	r0, r4
 8005eb6:	f7fa f92f 	bl	8000118 <strlen>
 8005eba:	0002      	movs	r2, r0
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	0020      	movs	r0, r4
 8005ec0:	f00d fea7 	bl	8013c12 <memset>
 8005ec4:	e7ea      	b.n	8005e9c <snipCommand+0x1c4>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005ec6:	22b5      	movs	r2, #181	; 0xb5
 8005ec8:	4915      	ldr	r1, [pc, #84]	; (8005f20 <snipCommand+0x248>)
 8005eca:	0028      	movs	r0, r5
 8005ecc:	f00d fe98 	bl	8013c00 <memcpy>
}
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	b00b      	add	sp, #44	; 0x2c
 8005ed4:	bcf0      	pop	{r4, r5, r6, r7}
 8005ed6:	46bb      	mov	fp, r7
 8005ed8:	46b2      	mov	sl, r6
 8005eda:	46a9      	mov	r9, r5
 8005edc:	46a0      	mov	r8, r4
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	080184c0 	.word	0x080184c0
 8005ee4:	200002b8 	.word	0x200002b8
 8005ee8:	08019598 	.word	0x08019598
 8005eec:	2000099f 	.word	0x2000099f
 8005ef0:	20006294 	.word	0x20006294
 8005ef4:	200009d0 	.word	0x200009d0
 8005ef8:	080195d0 	.word	0x080195d0
 8005efc:	080195f0 	.word	0x080195f0
 8005f00:	20000098 	.word	0x20000098
 8005f04:	0801ad34 	.word	0x0801ad34
 8005f08:	0801963c 	.word	0x0801963c
 8005f0c:	08019620 	.word	0x08019620
 8005f10:	080195dc 	.word	0x080195dc
 8005f14:	08019608 	.word	0x08019608
 8005f18:	08019654 	.word	0x08019654
 8005f1c:	0801964c 	.word	0x0801964c
 8005f20:	08019660 	.word	0x08019660

08005f24 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f24:	b510      	push	{r4, lr}
 8005f26:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005f28:	f00a fc22 	bl	8010770 <HAL_GetDEVID>
	switch(dev){
 8005f2c:	0403      	lsls	r3, r0, #16
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <idcodeCommand+0x78>)
 8005f32:	4694      	mov	ip, r2
 8005f34:	4463      	add	r3, ip
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d82a      	bhi.n	8005f90 <idcodeCommand+0x6c>
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4a18      	ldr	r2, [pc, #96]	; (8005fa0 <idcodeCommand+0x7c>)
 8005f3e:	58d3      	ldr	r3, [r2, r3]
 8005f40:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005f42:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <idcodeCommand+0x80>)
 8005f44:	4918      	ldr	r1, [pc, #96]	; (8005fa8 <idcodeCommand+0x84>)
 8005f46:	0020      	movs	r0, r4
 8005f48:	f00e fc1c 	bl	8014784 <siprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005f4c:	f00a fc0a 	bl	8010764 <HAL_GetREVID>
 8005f50:	0b03      	lsrs	r3, r0, #12
 8005f52:	0022      	movs	r2, r4
 8005f54:	4915      	ldr	r1, [pc, #84]	; (8005fac <idcodeCommand+0x88>)
 8005f56:	0020      	movs	r0, r4
 8005f58:	f00e fc14 	bl	8014784 <siprintf>
}
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005f60:	4a13      	ldr	r2, [pc, #76]	; (8005fb0 <idcodeCommand+0x8c>)
 8005f62:	4911      	ldr	r1, [pc, #68]	; (8005fa8 <idcodeCommand+0x84>)
 8005f64:	0020      	movs	r0, r4
 8005f66:	f00e fc0d 	bl	8014784 <siprintf>
			break;
 8005f6a:	e7ef      	b.n	8005f4c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <idcodeCommand+0x90>)
 8005f6e:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <idcodeCommand+0x84>)
 8005f70:	0020      	movs	r0, r4
 8005f72:	f00e fc07 	bl	8014784 <siprintf>
			break;
 8005f76:	e7e9      	b.n	8005f4c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005f78:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <idcodeCommand+0x94>)
 8005f7a:	490b      	ldr	r1, [pc, #44]	; (8005fa8 <idcodeCommand+0x84>)
 8005f7c:	0020      	movs	r0, r4
 8005f7e:	f00e fc01 	bl	8014784 <siprintf>
			break;
 8005f82:	e7e3      	b.n	8005f4c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005f84:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <idcodeCommand+0x98>)
 8005f86:	4908      	ldr	r1, [pc, #32]	; (8005fa8 <idcodeCommand+0x84>)
 8005f88:	0020      	movs	r0, r4
 8005f8a:	f00e fbfb 	bl	8014784 <siprintf>
			break;
 8005f8e:	e7dd      	b.n	8005f4c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005f90:	4a0b      	ldr	r2, [pc, #44]	; (8005fc0 <idcodeCommand+0x9c>)
 8005f92:	4905      	ldr	r1, [pc, #20]	; (8005fa8 <idcodeCommand+0x84>)
 8005f94:	0020      	movs	r0, r4
 8005f96:	f00e fbf5 	bl	8014784 <siprintf>
			break;
 8005f9a:	e7d7      	b.n	8005f4c <idcodeCommand+0x28>
 8005f9c:	fffffbc0 	.word	0xfffffbc0
 8005fa0:	08019788 	.word	0x08019788
 8005fa4:	08019718 	.word	0x08019718
 8005fa8:	08019724 	.word	0x08019724
 8005fac:	08019770 	.word	0x08019770
 8005fb0:	08019738 	.word	0x08019738
 8005fb4:	08019744 	.word	0x08019744
 8005fb8:	08019750 	.word	0x08019750
 8005fbc:	0801975c 	.word	0x0801975c
 8005fc0:	08019768 	.word	0x08019768

08005fc4 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fc4:	b570      	push	{r4, r5, r6, lr}
 8005fc6:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005fc8:	220e      	movs	r2, #14
 8005fca:	4911      	ldr	r1, [pc, #68]	; (8006010 <uuidCommand+0x4c>)
 8005fcc:	f00d fe18 	bl	8013c00 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <uuidCommand+0x50>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4d10      	ldr	r5, [pc, #64]	; (8006018 <uuidCommand+0x54>)
 8005fd6:	0022      	movs	r2, r4
 8005fd8:	0029      	movs	r1, r5
 8005fda:	0020      	movs	r0, r4
 8005fdc:	f00e fbd2 	bl	8014784 <siprintf>
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <uuidCommand+0x58>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	0022      	movs	r2, r4
 8005fe6:	0029      	movs	r1, r5
 8005fe8:	0020      	movs	r0, r4
 8005fea:	f00e fbcb 	bl	8014784 <siprintf>
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <uuidCommand+0x5c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	0022      	movs	r2, r4
 8005ff4:	0029      	movs	r1, r5
 8005ff6:	0020      	movs	r0, r4
 8005ff8:	f00e fbc4 	bl	8014784 <siprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005ffc:	0020      	movs	r0, r4
 8005ffe:	f7fa f88b 	bl	8000118 <strlen>
 8006002:	1820      	adds	r0, r4, r0
 8006004:	2203      	movs	r2, #3
 8006006:	4907      	ldr	r1, [pc, #28]	; (8006024 <uuidCommand+0x60>)
 8006008:	f00d fdfa 	bl	8013c00 <memcpy>
}
 800600c:	2000      	movs	r0, #0
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	080197ac 	.word	0x080197ac
 8006014:	1ffff7ac 	.word	0x1ffff7ac
 8006018:	080197bc 	.word	0x080197bc
 800601c:	1ffff7b0 	.word	0x1ffff7b0
 8006020:	1ffff7b4 	.word	0x1ffff7b4
 8006024:	0801a80c 	.word	0x0801a80c

08006028 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006028:	b510      	push	{r4, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	0004      	movs	r4, r0
	GetTimeDate();
 800602e:	f008 f873 	bl	800e118 <GetTimeDate>
	if(BOS.hourformat == 24)
 8006032:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <timeCommand+0x78>)
 8006034:	7b5b      	ldrb	r3, [r3, #13]
 8006036:	2b18      	cmp	r3, #24
 8006038:	d004      	beq.n	8006044 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 800603a:	2b0c      	cmp	r3, #12
 800603c:	d00e      	beq.n	800605c <timeCommand+0x34>
}
 800603e:	2000      	movs	r0, #0
 8006040:	b004      	add	sp, #16
 8006042:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8006044:	4916      	ldr	r1, [pc, #88]	; (80060a0 <timeCommand+0x78>)
 8006046:	7c4b      	ldrb	r3, [r1, #17]
 8006048:	7c8a      	ldrb	r2, [r1, #18]
 800604a:	89c8      	ldrh	r0, [r1, #14]
 800604c:	9001      	str	r0, [sp, #4]
 800604e:	7c09      	ldrb	r1, [r1, #16]
 8006050:	9100      	str	r1, [sp, #0]
 8006052:	4914      	ldr	r1, [pc, #80]	; (80060a4 <timeCommand+0x7c>)
 8006054:	0020      	movs	r0, r4
 8006056:	f00e fb95 	bl	8014784 <siprintf>
 800605a:	e7f0      	b.n	800603e <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 800605c:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <timeCommand+0x78>)
 800605e:	7cdb      	ldrb	r3, [r3, #19]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d00f      	beq.n	8006084 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8006064:	2b02      	cmp	r3, #2
 8006066:	d1ea      	bne.n	800603e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8006068:	490d      	ldr	r1, [pc, #52]	; (80060a0 <timeCommand+0x78>)
 800606a:	7c4b      	ldrb	r3, [r1, #17]
 800606c:	7c8a      	ldrb	r2, [r1, #18]
 800606e:	480e      	ldr	r0, [pc, #56]	; (80060a8 <timeCommand+0x80>)
 8006070:	9002      	str	r0, [sp, #8]
 8006072:	89c8      	ldrh	r0, [r1, #14]
 8006074:	9001      	str	r0, [sp, #4]
 8006076:	7c09      	ldrb	r1, [r1, #16]
 8006078:	9100      	str	r1, [sp, #0]
 800607a:	490c      	ldr	r1, [pc, #48]	; (80060ac <timeCommand+0x84>)
 800607c:	0020      	movs	r0, r4
 800607e:	f00e fb81 	bl	8014784 <siprintf>
 8006082:	e7dc      	b.n	800603e <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8006084:	4906      	ldr	r1, [pc, #24]	; (80060a0 <timeCommand+0x78>)
 8006086:	7c4b      	ldrb	r3, [r1, #17]
 8006088:	7c8a      	ldrb	r2, [r1, #18]
 800608a:	4809      	ldr	r0, [pc, #36]	; (80060b0 <timeCommand+0x88>)
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	89c8      	ldrh	r0, [r1, #14]
 8006090:	9001      	str	r0, [sp, #4]
 8006092:	7c09      	ldrb	r1, [r1, #16]
 8006094:	9100      	str	r1, [sp, #0]
 8006096:	4905      	ldr	r1, [pc, #20]	; (80060ac <timeCommand+0x84>)
 8006098:	0020      	movs	r0, r4
 800609a:	f00e fb73 	bl	8014784 <siprintf>
 800609e:	e7ce      	b.n	800603e <timeCommand+0x16>
 80060a0:	20006278 	.word	0x20006278
 80060a4:	080197c4 	.word	0x080197c4
 80060a8:	0801981c 	.word	0x0801981c
 80060ac:	080197ec 	.word	0x080197ec
 80060b0:	08019818 	.word	0x08019818

080060b4 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060b4:	b510      	push	{r4, lr}
 80060b6:	0004      	movs	r4, r0
	GetTimeDate();
 80060b8:	f008 f82e 	bl	800e118 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 80060bc:	f7fe fb36 	bl	800472c <GetDateString>
 80060c0:	0002      	movs	r2, r0
 80060c2:	4903      	ldr	r1, [pc, #12]	; (80060d0 <dateCommand+0x1c>)
 80060c4:	0020      	movs	r0, r4
 80060c6:	f00e fb5d 	bl	8014784 <siprintf>
}
 80060ca:	2000      	movs	r0, #0
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	08019820 	.word	0x08019820

080060d4 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80060d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060d6:	46ce      	mov	lr, r9
 80060d8:	b500      	push	{lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	0005      	movs	r5, r0
 80060de:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060e0:	2300      	movs	r3, #0
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060e6:	aa01      	add	r2, sp, #4
 80060e8:	2101      	movs	r1, #1
 80060ea:	0030      	movs	r0, r6
 80060ec:	f008 fcd0 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 80060f0:	0004      	movs	r4, r0
 80060f2:	4b73      	ldr	r3, [pc, #460]	; (80062c0 <getCommand+0x1ec>)
 80060f4:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060f6:	2204      	movs	r2, #4
 80060f8:	4972      	ldr	r1, [pc, #456]	; (80062c4 <getCommand+0x1f0>)
 80060fa:	f00e fb86 	bl	801480a <strncmp>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d000      	beq.n	8006104 <getCommand+0x30>
 8006102:	e090      	b.n	8006226 <getCommand+0x152>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006104:	1d27      	adds	r7, r4, #4
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	1f1e      	subs	r6, r3, #4
 800610a:	0032      	movs	r2, r6
 800610c:	496e      	ldr	r1, [pc, #440]	; (80062c8 <getCommand+0x1f4>)
 800610e:	0038      	movs	r0, r7
 8006110:	f00e fb7b 	bl	801480a <strncmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	d11f      	bne.n	8006158 <getCommand+0x84>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8006118:	4b6c      	ldr	r3, [pc, #432]	; (80062cc <getCommand+0x1f8>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b60      	cmp	r3, #96	; 0x60
 800611e:	d009      	beq.n	8006134 <getCommand+0x60>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006120:	2b20      	cmp	r3, #32
 8006122:	d00d      	beq.n	8006140 <getCommand+0x6c>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006124:	2b00      	cmp	r3, #0
 8006126:	d011      	beq.n	800614c <getCommand+0x78>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006128:	0022      	movs	r2, r4
 800612a:	4969      	ldr	r1, [pc, #420]	; (80062d0 <getCommand+0x1fc>)
 800612c:	0028      	movs	r0, r5
 800612e:	f00e fb29 	bl	8014784 <siprintf>
 8006132:	e084      	b.n	800623e <getCommand+0x16a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006134:	4a67      	ldr	r2, [pc, #412]	; (80062d4 <getCommand+0x200>)
 8006136:	4968      	ldr	r1, [pc, #416]	; (80062d8 <getCommand+0x204>)
 8006138:	0028      	movs	r0, r5
 800613a:	f00e fb23 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 800613e:	e07e      	b.n	800623e <getCommand+0x16a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006140:	4a66      	ldr	r2, [pc, #408]	; (80062dc <getCommand+0x208>)
 8006142:	4965      	ldr	r1, [pc, #404]	; (80062d8 <getCommand+0x204>)
 8006144:	0028      	movs	r0, r5
 8006146:	f00e fb1d 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 800614a:	e078      	b.n	800623e <getCommand+0x16a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800614c:	4a64      	ldr	r2, [pc, #400]	; (80062e0 <getCommand+0x20c>)
 800614e:	4962      	ldr	r1, [pc, #392]	; (80062d8 <getCommand+0x204>)
 8006150:	0028      	movs	r0, r5
 8006152:	f00e fb17 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 8006156:	e072      	b.n	800623e <getCommand+0x16a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006158:	0032      	movs	r2, r6
 800615a:	4962      	ldr	r1, [pc, #392]	; (80062e4 <getCommand+0x210>)
 800615c:	0038      	movs	r0, r7
 800615e:	f00e fb54 	bl	801480a <strncmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	d119      	bne.n	800619a <getCommand+0xc6>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006166:	4b59      	ldr	r3, [pc, #356]	; (80062cc <getCommand+0x1f8>)
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d009      	beq.n	8006182 <getCommand+0xae>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 800616e:	2b01      	cmp	r3, #1
 8006170:	d00d      	beq.n	800618e <getCommand+0xba>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d8      	bne.n	8006128 <getCommand+0x54>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8006176:	4a5a      	ldr	r2, [pc, #360]	; (80062e0 <getCommand+0x20c>)
 8006178:	4957      	ldr	r1, [pc, #348]	; (80062d8 <getCommand+0x204>)
 800617a:	0028      	movs	r0, r5
 800617c:	f00e fb02 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 8006180:	e05d      	b.n	800623e <getCommand+0x16a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8006182:	4a54      	ldr	r2, [pc, #336]	; (80062d4 <getCommand+0x200>)
 8006184:	4954      	ldr	r1, [pc, #336]	; (80062d8 <getCommand+0x204>)
 8006186:	0028      	movs	r0, r5
 8006188:	f00e fafc 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 800618c:	e057      	b.n	800623e <getCommand+0x16a>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800618e:	4a53      	ldr	r2, [pc, #332]	; (80062dc <getCommand+0x208>)
 8006190:	4951      	ldr	r1, [pc, #324]	; (80062d8 <getCommand+0x204>)
 8006192:	0028      	movs	r0, r5
 8006194:	f00e faf6 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 8006198:	e051      	b.n	800623e <getCommand+0x16a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800619a:	0032      	movs	r2, r6
 800619c:	4952      	ldr	r1, [pc, #328]	; (80062e8 <getCommand+0x214>)
 800619e:	0038      	movs	r0, r7
 80061a0:	f00e fb33 	bl	801480a <strncmp>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	d022      	beq.n	80061ee <getCommand+0x11a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80061a8:	0032      	movs	r2, r6
 80061aa:	4950      	ldr	r1, [pc, #320]	; (80062ec <getCommand+0x218>)
 80061ac:	0038      	movs	r0, r7
 80061ae:	f00e fb2c 	bl	801480a <strncmp>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d022      	beq.n	80061fc <getCommand+0x128>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80061b6:	0032      	movs	r2, r6
 80061b8:	494d      	ldr	r1, [pc, #308]	; (80062f0 <getCommand+0x21c>)
 80061ba:	0038      	movs	r0, r7
 80061bc:	f00e fb25 	bl	801480a <strncmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d022      	beq.n	800620a <getCommand+0x136>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80061c4:	0032      	movs	r2, r6
 80061c6:	494b      	ldr	r1, [pc, #300]	; (80062f4 <getCommand+0x220>)
 80061c8:	0038      	movs	r0, r7
 80061ca:	f00e fb1e 	bl	801480a <strncmp>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	d022      	beq.n	8006218 <getCommand+0x144>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80061d2:	0032      	movs	r2, r6
 80061d4:	4948      	ldr	r1, [pc, #288]	; (80062f8 <getCommand+0x224>)
 80061d6:	0038      	movs	r0, r7
 80061d8:	f00e fb17 	bl	801480a <strncmp>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d129      	bne.n	8006234 <getCommand+0x160>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80061e0:	4b46      	ldr	r3, [pc, #280]	; (80062fc <getCommand+0x228>)
 80061e2:	795a      	ldrb	r2, [r3, #5]
 80061e4:	4946      	ldr	r1, [pc, #280]	; (8006300 <getCommand+0x22c>)
 80061e6:	0028      	movs	r0, r5
 80061e8:	f00e facc 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 80061ec:	e027      	b.n	800623e <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 80061ee:	4b43      	ldr	r3, [pc, #268]	; (80062fc <getCommand+0x228>)
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	4943      	ldr	r1, [pc, #268]	; (8006300 <getCommand+0x22c>)
 80061f4:	0028      	movs	r0, r5
 80061f6:	f00e fac5 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 80061fa:	e020      	b.n	800623e <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 80061fc:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <getCommand+0x228>)
 80061fe:	881a      	ldrh	r2, [r3, #0]
 8006200:	493f      	ldr	r1, [pc, #252]	; (8006300 <getCommand+0x22c>)
 8006202:	0028      	movs	r0, r5
 8006204:	f00e fabe 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 8006208:	e019      	b.n	800623e <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 800620a:	4b3c      	ldr	r3, [pc, #240]	; (80062fc <getCommand+0x228>)
 800620c:	885a      	ldrh	r2, [r3, #2]
 800620e:	493c      	ldr	r1, [pc, #240]	; (8006300 <getCommand+0x22c>)
 8006210:	0028      	movs	r0, r5
 8006212:	f00e fab7 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 8006216:	e012      	b.n	800623e <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006218:	4b38      	ldr	r3, [pc, #224]	; (80062fc <getCommand+0x228>)
 800621a:	791a      	ldrb	r2, [r3, #4]
 800621c:	4938      	ldr	r1, [pc, #224]	; (8006300 <getCommand+0x22c>)
 800621e:	0028      	movs	r0, r5
 8006220:	f00e fab0 	bl	8014784 <siprintf>
	if(result == BOS_ERR_WrongParam)
 8006224:	e00b      	b.n	800623e <getCommand+0x16a>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006226:	2205      	movs	r2, #5
 8006228:	4936      	ldr	r1, [pc, #216]	; (8006304 <getCommand+0x230>)
 800622a:	0020      	movs	r0, r4
 800622c:	f00e faed 	bl	801480a <strncmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	d009      	beq.n	8006248 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006234:	2213      	movs	r2, #19
 8006236:	4934      	ldr	r1, [pc, #208]	; (8006308 <getCommand+0x234>)
 8006238:	0028      	movs	r0, r5
 800623a:	f00d fce1 	bl	8013c00 <memcpy>
}
 800623e:	2000      	movs	r0, #0
 8006240:	b002      	add	sp, #8
 8006242:	bc80      	pop	{r7}
 8006244:	46b9      	mov	r9, r7
 8006246:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006248:	466a      	mov	r2, sp
 800624a:	2102      	movs	r1, #2
 800624c:	0030      	movs	r0, r6
 800624e:	f008 fc1f 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006252:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 8006254:	4e2d      	ldr	r6, [pc, #180]	; (800630c <getCommand+0x238>)
 8006256:	2400      	movs	r4, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006258:	0031      	movs	r1, r6
 800625a:	0038      	movs	r0, r7
 800625c:	f7f9 ff52 	bl	8000104 <strcmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	d01c      	beq.n	800629e <getCommand+0x1ca>
		for(i =0; i < MaxNumOfGroups; i++){
 8006264:	3401      	adds	r4, #1
 8006266:	b2e4      	uxtb	r4, r4
 8006268:	360a      	adds	r6, #10
 800626a:	2c0a      	cmp	r4, #10
 800626c:	d1f4      	bne.n	8006258 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 800626e:	003a      	movs	r2, r7
 8006270:	4927      	ldr	r1, [pc, #156]	; (8006310 <getCommand+0x23c>)
 8006272:	0028      	movs	r0, r5
 8006274:	f00e fa86 	bl	8014784 <siprintf>
			return pdFALSE;
 8006278:	e7e1      	b.n	800623e <getCommand+0x16a>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 800627a:	0033      	movs	r3, r6
 800627c:	002a      	movs	r2, r5
 800627e:	4925      	ldr	r1, [pc, #148]	; (8006314 <getCommand+0x240>)
 8006280:	0028      	movs	r0, r5
 8006282:	f00e fa7f 	bl	8014784 <siprintf>
			for(j =1; j <= N; j++)						// N modules
 8006286:	3601      	adds	r6, #1
 8006288:	b2f6      	uxtb	r6, r6
 800628a:	7823      	ldrb	r3, [r4, #0]
 800628c:	42b3      	cmp	r3, r6
 800628e:	d3d6      	bcc.n	800623e <getCommand+0x16a>
				if(InGroup(j,i)){
 8006290:	1e73      	subs	r3, r6, #1
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	464a      	mov	r2, r9
 8006296:	5a9b      	ldrh	r3, [r3, r2]
 8006298:	421f      	tst	r7, r3
 800629a:	d0f4      	beq.n	8006286 <getCommand+0x1b2>
 800629c:	e7ed      	b.n	800627a <getCommand+0x1a6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 800629e:	003a      	movs	r2, r7
 80062a0:	491d      	ldr	r1, [pc, #116]	; (8006318 <getCommand+0x244>)
 80062a2:	0028      	movs	r0, r5
 80062a4:	f00e fa6e 	bl	8014784 <siprintf>
			for(j =1; j <= N; j++)						// N modules
 80062a8:	4b1c      	ldr	r3, [pc, #112]	; (800631c <getCommand+0x248>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0c6      	beq.n	800623e <getCommand+0x16a>
 80062b0:	2701      	movs	r7, #1
 80062b2:	40a7      	lsls	r7, r4
 80062b4:	2601      	movs	r6, #1
				if(InGroup(j,i)){
 80062b6:	4b1a      	ldr	r3, [pc, #104]	; (8006320 <getCommand+0x24c>)
 80062b8:	4699      	mov	r9, r3
			for(j =1; j <= N; j++)						// N modules
 80062ba:	4c18      	ldr	r4, [pc, #96]	; (800631c <getCommand+0x248>)
 80062bc:	e7e8      	b.n	8006290 <getCommand+0x1bc>
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000a14 	.word	0x20000a14
 80062c4:	08019838 	.word	0x08019838
 80062c8:	08019840 	.word	0x08019840
 80062cc:	200061f8 	.word	0x200061f8
 80062d0:	080198d4 	.word	0x080198d4
 80062d4:	08018800 	.word	0x08018800
 80062d8:	080186c8 	.word	0x080186c8
 80062dc:	0801984c 	.word	0x0801984c
 80062e0:	08019850 	.word	0x08019850
 80062e4:	08019858 	.word	0x08019858
 80062e8:	08019860 	.word	0x08019860
 80062ec:	0801986c 	.word	0x0801986c
 80062f0:	08019878 	.word	0x08019878
 80062f4:	08019888 	.word	0x08019888
 80062f8:	0801989c 	.word	0x0801989c
 80062fc:	20006278 	.word	0x20006278
 8006300:	08018f4c 	.word	0x08018f4c
 8006304:	080198b0 	.word	0x080198b0
 8006308:	080198c0 	.word	0x080198c0
 800630c:	200005f8 	.word	0x200005f8
 8006310:	080198f4 	.word	0x080198f4
 8006314:	080198b8 	.word	0x080198b8
 8006318:	08019910 	.word	0x08019910
 800631c:	20000030 	.word	0x20000030
 8006320:	2000065c 	.word	0x2000065c

08006324 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	0005      	movs	r5, r0
 800632a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800632c:	2300      	movs	r3, #0
 800632e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006330:	aa01      	add	r2, sp, #4
 8006332:	2101      	movs	r1, #1
 8006334:	f008 fbac 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006338:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800633a:	9e01      	ldr	r6, [sp, #4]
 800633c:	0032      	movs	r2, r6
 800633e:	491e      	ldr	r1, [pc, #120]	; (80063b8 <defaultCommand+0x94>)
 8006340:	f00e fa63 	bl	801480a <strncmp>
 8006344:	2800      	cmp	r0, #0
 8006346:	d00e      	beq.n	8006366 <defaultCommand+0x42>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006348:	0032      	movs	r2, r6
 800634a:	491c      	ldr	r1, [pc, #112]	; (80063bc <defaultCommand+0x98>)
 800634c:	0020      	movs	r0, r4
 800634e:	f00e fa5c 	bl	801480a <strncmp>
 8006352:	2800      	cmp	r0, #0
 8006354:	d018      	beq.n	8006388 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006356:	220f      	movs	r2, #15
 8006358:	4919      	ldr	r1, [pc, #100]	; (80063c0 <defaultCommand+0x9c>)
 800635a:	0028      	movs	r0, r5
 800635c:	f00d fc50 	bl	8013c00 <memcpy>
}
 8006360:	2000      	movs	r0, #0
 8006362:	b002      	add	sp, #8
 8006364:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006366:	4917      	ldr	r1, [pc, #92]	; (80063c4 <defaultCommand+0xa0>)
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <defaultCommand+0xa4>)
 800636a:	000a      	movs	r2, r1
 800636c:	cb13      	ldmia	r3!, {r0, r1, r4}
 800636e:	c213      	stmia	r2!, {r0, r1, r4}
 8006370:	cb13      	ldmia	r3!, {r0, r1, r4}
 8006372:	c213      	stmia	r2!, {r0, r1, r4}
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006378:	f7fd fa56 	bl	8003828 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 800637c:	2227      	movs	r2, #39	; 0x27
 800637e:	4913      	ldr	r1, [pc, #76]	; (80063cc <defaultCommand+0xa8>)
 8006380:	0028      	movs	r0, r5
 8006382:	f00d fc3d 	bl	8013c00 <memcpy>
	if(result == BOS_ERR_WrongValue)
 8006386:	e7eb      	b.n	8006360 <defaultCommand+0x3c>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006388:	2200      	movs	r2, #0
 800638a:	2116      	movs	r1, #22
 800638c:	20ff      	movs	r0, #255	; 0xff
 800638e:	f001 fff9 	bl	8008384 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <defaultCommand+0xac>)
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006398:	2064      	movs	r0, #100	; 0x64
 800639a:	f008 fa56 	bl	800e84a <osDelay>
		ClearEEportsDir();
 800639e:	f7fd fa87 	bl	80038b0 <ClearEEportsDir>
		ClearROtopology();
 80063a2:	f004 f8f1 	bl	800a588 <ClearROtopology>
		osDelay(100);
 80063a6:	2064      	movs	r0, #100	; 0x64
 80063a8:	f008 fa4f 	bl	800e84a <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80063ac:	2240      	movs	r2, #64	; 0x40
 80063ae:	4909      	ldr	r1, [pc, #36]	; (80063d4 <defaultCommand+0xb0>)
 80063b0:	0028      	movs	r0, r5
 80063b2:	f00d fc25 	bl	8013c00 <memcpy>
	if(result == BOS_ERR_WrongValue)
 80063b6:	e7d3      	b.n	8006360 <defaultCommand+0x3c>
 80063b8:	08019924 	.word	0x08019924
 80063bc:	08019954 	.word	0x08019954
 80063c0:	0801995c 	.word	0x0801995c
 80063c4:	20006278 	.word	0x20006278
 80063c8:	20000014 	.word	0x20000014
 80063cc:	0801992c 	.word	0x0801992c
 80063d0:	20000690 	.word	0x20000690
 80063d4:	0801996c 	.word	0x0801996c

080063d8 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063da:	46ce      	mov	lr, r9
 80063dc:	4647      	mov	r7, r8
 80063de:	b580      	push	{r7, lr}
 80063e0:	b08f      	sub	sp, #60	; 0x3c
 80063e2:	0007      	movs	r7, r0
 80063e4:	0016      	movs	r6, r2
 80063e6:	2400      	movs	r4, #0
 80063e8:	2300      	movs	r3, #0
 80063ea:	4698      	mov	r8, r3
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063ec:	940d      	str	r4, [sp, #52]	; 0x34
 80063ee:	940c      	str	r4, [sp, #48]	; 0x30
 80063f0:	940b      	str	r4, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063f2:	940a      	str	r4, [sp, #40]	; 0x28
 80063f4:	9409      	str	r4, [sp, #36]	; 0x24
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063f6:	aa0d      	add	r2, sp, #52	; 0x34
 80063f8:	2101      	movs	r1, #1
 80063fa:	0030      	movs	r0, r6
 80063fc:	f008 fb48 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006400:	0005      	movs	r5, r0
 8006402:	4bd5      	ldr	r3, [pc, #852]	; (8006758 <setCommand+0x380>)
 8006404:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006406:	2204      	movs	r2, #4
 8006408:	49d4      	ldr	r1, [pc, #848]	; (800675c <setCommand+0x384>)
 800640a:	f00e f9fe 	bl	801480a <strncmp>
 800640e:	2800      	cmp	r0, #0
 8006410:	d015      	beq.n	800643e <setCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006412:	2204      	movs	r2, #4
 8006414:	49d2      	ldr	r1, [pc, #840]	; (8006760 <setCommand+0x388>)
 8006416:	0028      	movs	r0, r5
 8006418:	f00e f9f7 	bl	801480a <strncmp>
 800641c:	2800      	cmp	r0, #0
 800641e:	d100      	bne.n	8006422 <setCommand+0x4a>
 8006420:	e159      	b.n	80066d6 <setCommand+0x2fe>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006422:	2204      	movs	r2, #4
 8006424:	49cf      	ldr	r1, [pc, #828]	; (8006764 <setCommand+0x38c>)
 8006426:	0028      	movs	r0, r5
 8006428:	f00e f9ef 	bl	801480a <strncmp>
 800642c:	2800      	cmp	r0, #0
 800642e:	d100      	bne.n	8006432 <setCommand+0x5a>
 8006430:	e1fa      	b.n	8006828 <setCommand+0x450>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006432:	2213      	movs	r2, #19
 8006434:	49cc      	ldr	r1, [pc, #816]	; (8006768 <setCommand+0x390>)
 8006436:	0038      	movs	r0, r7
 8006438:	f00d fbe2 	bl	8013c00 <memcpy>
 800643c:	e359      	b.n	8006af2 <setCommand+0x71a>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800643e:	aa0c      	add	r2, sp, #48	; 0x30
 8006440:	2102      	movs	r1, #2
 8006442:	0030      	movs	r0, r6
 8006444:	f008 fb24 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006448:	0004      	movs	r4, r0
 800644a:	4bc8      	ldr	r3, [pc, #800]	; (800676c <setCommand+0x394>)
 800644c:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800644e:	4bc2      	ldr	r3, [pc, #776]	; (8006758 <setCommand+0x380>)
 8006450:	681d      	ldr	r5, [r3, #0]
 8006452:	3504      	adds	r5, #4
 8006454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006456:	1f1e      	subs	r6, r3, #4
 8006458:	0032      	movs	r2, r6
 800645a:	49c5      	ldr	r1, [pc, #788]	; (8006770 <setCommand+0x398>)
 800645c:	0028      	movs	r0, r5
 800645e:	f00e f9d4 	bl	801480a <strncmp>
 8006462:	2800      	cmp	r0, #0
 8006464:	d150      	bne.n	8006508 <setCommand+0x130>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006466:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006468:	002a      	movs	r2, r5
 800646a:	49c2      	ldr	r1, [pc, #776]	; (8006774 <setCommand+0x39c>)
 800646c:	0020      	movs	r0, r4
 800646e:	f00e f9cc 	bl	801480a <strncmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	d01a      	beq.n	80064ac <setCommand+0xd4>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006476:	002a      	movs	r2, r5
 8006478:	49bf      	ldr	r1, [pc, #764]	; (8006778 <setCommand+0x3a0>)
 800647a:	0020      	movs	r0, r4
 800647c:	f00e f9c5 	bl	801480a <strncmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	d01f      	beq.n	80064c4 <setCommand+0xec>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8006484:	002a      	movs	r2, r5
 8006486:	49bd      	ldr	r1, [pc, #756]	; (800677c <setCommand+0x3a4>)
 8006488:	0020      	movs	r0, r4
 800648a:	f00e f9be 	bl	801480a <strncmp>
 800648e:	2800      	cmp	r0, #0
 8006490:	d024      	beq.n	80064dc <setCommand+0x104>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006492:	002a      	movs	r2, r5
 8006494:	49ba      	ldr	r1, [pc, #744]	; (8006780 <setCommand+0x3a8>)
 8006496:	0020      	movs	r0, r4
 8006498:	f00e f9b7 	bl	801480a <strncmp>
 800649c:	2800      	cmp	r0, #0
 800649e:	d029      	beq.n	80064f4 <setCommand+0x11c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80064a0:	220f      	movs	r2, #15
 80064a2:	49b8      	ldr	r1, [pc, #736]	; (8006784 <setCommand+0x3ac>)
 80064a4:	0038      	movs	r0, r7
 80064a6:	f00d fbab 	bl	8013c00 <memcpy>
 80064aa:	e322      	b.n	8006af2 <setCommand+0x71a>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 80064ac:	4bb6      	ldr	r3, [pc, #728]	; (8006788 <setCommand+0x3b0>)
 80064ae:	2260      	movs	r2, #96	; 0x60
 80064b0:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064b2:	7859      	ldrb	r1, [r3, #1]
 80064b4:	0209      	lsls	r1, r1, #8
 80064b6:	2360      	movs	r3, #96	; 0x60
 80064b8:	4319      	orrs	r1, r3
 80064ba:	308a      	adds	r0, #138	; 0x8a
 80064bc:	0040      	lsls	r0, r0, #1
 80064be:	f006 f801 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80064c2:	e1a5      	b.n	8006810 <setCommand+0x438>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 80064c4:	4bb0      	ldr	r3, [pc, #704]	; (8006788 <setCommand+0x3b0>)
 80064c6:	2220      	movs	r2, #32
 80064c8:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064ca:	7859      	ldrb	r1, [r3, #1]
 80064cc:	0209      	lsls	r1, r1, #8
 80064ce:	2320      	movs	r3, #32
 80064d0:	4319      	orrs	r1, r3
 80064d2:	308a      	adds	r0, #138	; 0x8a
 80064d4:	0040      	lsls	r0, r0, #1
 80064d6:	f005 fff5 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80064da:	e199      	b.n	8006810 <setCommand+0x438>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80064dc:	4baa      	ldr	r3, [pc, #680]	; (8006788 <setCommand+0x3b0>)
 80064de:	2240      	movs	r2, #64	; 0x40
 80064e0:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064e2:	7859      	ldrb	r1, [r3, #1]
 80064e4:	0209      	lsls	r1, r1, #8
 80064e6:	2340      	movs	r3, #64	; 0x40
 80064e8:	4319      	orrs	r1, r3
 80064ea:	308a      	adds	r0, #138	; 0x8a
 80064ec:	0040      	lsls	r0, r0, #1
 80064ee:	f005 ffe9 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80064f2:	e18d      	b.n	8006810 <setCommand+0x438>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80064f4:	4ba4      	ldr	r3, [pc, #656]	; (8006788 <setCommand+0x3b0>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064fa:	7859      	ldrb	r1, [r3, #1]
 80064fc:	0209      	lsls	r1, r1, #8
 80064fe:	308a      	adds	r0, #138	; 0x8a
 8006500:	0040      	lsls	r0, r0, #1
 8006502:	f005 ffdf 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006506:	e183      	b.n	8006810 <setCommand+0x438>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006508:	0032      	movs	r2, r6
 800650a:	49a0      	ldr	r1, [pc, #640]	; (800678c <setCommand+0x3b4>)
 800650c:	0028      	movs	r0, r5
 800650e:	f00e f97c 	bl	801480a <strncmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	d149      	bne.n	80065aa <setCommand+0x1d2>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006518:	002a      	movs	r2, r5
 800651a:	4996      	ldr	r1, [pc, #600]	; (8006774 <setCommand+0x39c>)
 800651c:	0020      	movs	r0, r4
 800651e:	f00e f974 	bl	801480a <strncmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	d01d      	beq.n	8006562 <setCommand+0x18a>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006526:	002a      	movs	r2, r5
 8006528:	4993      	ldr	r1, [pc, #588]	; (8006778 <setCommand+0x3a0>)
 800652a:	0020      	movs	r0, r4
 800652c:	f00e f96d 	bl	801480a <strncmp>
 8006530:	2800      	cmp	r0, #0
 8006532:	d022      	beq.n	800657a <setCommand+0x1a2>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006534:	002a      	movs	r2, r5
 8006536:	498e      	ldr	r1, [pc, #568]	; (8006770 <setCommand+0x398>)
 8006538:	0020      	movs	r0, r4
 800653a:	f00e f966 	bl	801480a <strncmp>
 800653e:	2800      	cmp	r0, #0
 8006540:	d027      	beq.n	8006592 <setCommand+0x1ba>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006542:	002a      	movs	r2, r5
 8006544:	498e      	ldr	r1, [pc, #568]	; (8006780 <setCommand+0x3a8>)
 8006546:	0020      	movs	r0, r4
 8006548:	f00e f95f 	bl	801480a <strncmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	d1a7      	bne.n	80064a0 <setCommand+0xc8>
				BOSMessaging.trace =TRACE_NONE;
 8006550:	4b8d      	ldr	r3, [pc, #564]	; (8006788 <setCommand+0x3b0>)
 8006552:	2200      	movs	r2, #0
 8006554:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006556:	7819      	ldrb	r1, [r3, #0]
 8006558:	308a      	adds	r0, #138	; 0x8a
 800655a:	0040      	lsls	r0, r0, #1
 800655c:	f005 ffb2 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006560:	e156      	b.n	8006810 <setCommand+0x438>
				BOSMessaging.trace =TRACE_BOTH;
 8006562:	4b89      	ldr	r3, [pc, #548]	; (8006788 <setCommand+0x3b0>)
 8006564:	2203      	movs	r2, #3
 8006566:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	21c0      	movs	r1, #192	; 0xc0
 800656c:	0089      	lsls	r1, r1, #2
 800656e:	4319      	orrs	r1, r3
 8006570:	308a      	adds	r0, #138	; 0x8a
 8006572:	0040      	lsls	r0, r0, #1
 8006574:	f005 ffa6 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006578:	e14a      	b.n	8006810 <setCommand+0x438>
				BOSMessaging.trace =TRACE_MESSAGE;
 800657a:	4b83      	ldr	r3, [pc, #524]	; (8006788 <setCommand+0x3b0>)
 800657c:	2201      	movs	r2, #1
 800657e:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	0049      	lsls	r1, r1, #1
 8006586:	4319      	orrs	r1, r3
 8006588:	308a      	adds	r0, #138	; 0x8a
 800658a:	0040      	lsls	r0, r0, #1
 800658c:	f005 ff9a 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006590:	e13e      	b.n	8006810 <setCommand+0x438>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006592:	4b7d      	ldr	r3, [pc, #500]	; (8006788 <setCommand+0x3b0>)
 8006594:	2202      	movs	r2, #2
 8006596:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	0089      	lsls	r1, r1, #2
 800659e:	4319      	orrs	r1, r3
 80065a0:	308a      	adds	r0, #138	; 0x8a
 80065a2:	0040      	lsls	r0, r0, #1
 80065a4:	f005 ff8e 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80065a8:	e132      	b.n	8006810 <setCommand+0x438>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80065aa:	0032      	movs	r2, r6
 80065ac:	4978      	ldr	r1, [pc, #480]	; (8006790 <setCommand+0x3b8>)
 80065ae:	0028      	movs	r0, r5
 80065b0:	f00e f92b 	bl	801480a <strncmp>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	d02f      	beq.n	8006618 <setCommand+0x240>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80065b8:	0032      	movs	r2, r6
 80065ba:	4976      	ldr	r1, [pc, #472]	; (8006794 <setCommand+0x3bc>)
 80065bc:	0028      	movs	r0, r5
 80065be:	f00e f924 	bl	801480a <strncmp>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d058      	beq.n	8006678 <setCommand+0x2a0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80065c6:	0032      	movs	r2, r6
 80065c8:	4973      	ldr	r1, [pc, #460]	; (8006798 <setCommand+0x3c0>)
 80065ca:	0028      	movs	r0, r5
 80065cc:	f00e f91d 	bl	801480a <strncmp>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d05f      	beq.n	8006694 <setCommand+0x2bc>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80065d4:	0032      	movs	r2, r6
 80065d6:	4971      	ldr	r1, [pc, #452]	; (800679c <setCommand+0x3c4>)
 80065d8:	0028      	movs	r0, r5
 80065da:	f00e f916 	bl	801480a <strncmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	d066      	beq.n	80066b0 <setCommand+0x2d8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80065e2:	0032      	movs	r2, r6
 80065e4:	496e      	ldr	r1, [pc, #440]	; (80067a0 <setCommand+0x3c8>)
 80065e6:	0028      	movs	r0, r5
 80065e8:	f00e f90f 	bl	801480a <strncmp>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d000      	beq.n	80065f2 <setCommand+0x21a>
 80065f0:	e71f      	b.n	8006432 <setCommand+0x5a>
			temp16 =atoi((const char* )pcParameterString2);
 80065f2:	0020      	movs	r0, r4
 80065f4:	f00d fab1 	bl	8013b5a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80065f8:	1e43      	subs	r3, r0, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2bfe      	cmp	r3, #254	; 0xfe
 80065fe:	d900      	bls.n	8006602 <setCommand+0x22a>
 8006600:	e74e      	b.n	80064a0 <setCommand+0xc8>
				BOS.buttons.maxInterClickTime =temp16;
 8006602:	4b68      	ldr	r3, [pc, #416]	; (80067a4 <setCommand+0x3cc>)
 8006604:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006606:	0200      	lsls	r0, r0, #8
 8006608:	7919      	ldrb	r1, [r3, #4]
 800660a:	4301      	orrs	r1, r0
 800660c:	b289      	uxth	r1, r1
 800660e:	2018      	movs	r0, #24
 8006610:	30ff      	adds	r0, #255	; 0xff
 8006612:	f005 ff57 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006616:	e0fb      	b.n	8006810 <setCommand+0x438>
			temp2 =atoi((const char* )pcParameterString2);
 8006618:	0020      	movs	r0, r4
 800661a:	f00d fa9e 	bl	8013b5a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800661e:	23e1      	movs	r3, #225	; 0xe1
 8006620:	031b      	lsls	r3, r3, #12
 8006622:	4298      	cmp	r0, r3
 8006624:	d900      	bls.n	8006628 <setCommand+0x250>
 8006626:	e73b      	b.n	80064a0 <setCommand+0xc8>
				BOS.clibaudrate =temp2;
 8006628:	4c5e      	ldr	r4, [pc, #376]	; (80067a4 <setCommand+0x3cc>)
 800662a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800662c:	b281      	uxth	r1, r0
 800662e:	208c      	movs	r0, #140	; 0x8c
 8006630:	0040      	lsls	r0, r0, #1
 8006632:	f005 ff47 	bl	800c4c4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006636:	8961      	ldrh	r1, [r4, #10]
 8006638:	201a      	movs	r0, #26
 800663a:	30ff      	adds	r0, #255	; 0xff
 800663c:	f005 ff42 	bl	800c4c4 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006640:	4b45      	ldr	r3, [pc, #276]	; (8006758 <setCommand+0x380>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006648:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800664a:	4b48      	ldr	r3, [pc, #288]	; (800676c <setCommand+0x394>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4956      	ldr	r1, [pc, #344]	; (80067a8 <setCommand+0x3d0>)
 8006650:	0038      	movs	r0, r7
 8006652:	f00e f897 	bl	8014784 <siprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 8006656:	0038      	movs	r0, r7
 8006658:	f7f9 fd5e 	bl	8000118 <strlen>
 800665c:	1838      	adds	r0, r7, r0
 800665e:	2230      	movs	r2, #48	; 0x30
 8006660:	4952      	ldr	r1, [pc, #328]	; (80067ac <setCommand+0x3d4>)
 8006662:	f00d facd 	bl	8013c00 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 8006666:	0038      	movs	r0, r7
 8006668:	f7f9 fd56 	bl	8000118 <strlen>
 800666c:	1838      	adds	r0, r7, r0
 800666e:	22b2      	movs	r2, #178	; 0xb2
 8006670:	494f      	ldr	r1, [pc, #316]	; (80067b0 <setCommand+0x3d8>)
 8006672:	f00d fac5 	bl	8013c00 <memcpy>
 8006676:	e23c      	b.n	8006af2 <setCommand+0x71a>
			temp16 =atoi((const char* )pcParameterString2);
 8006678:	0020      	movs	r0, r4
 800667a:	f00d fa6e 	bl	8013b5a <atoi>
 800667e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006680:	2900      	cmp	r1, #0
 8006682:	d100      	bne.n	8006686 <setCommand+0x2ae>
 8006684:	e70c      	b.n	80064a0 <setCommand+0xc8>
				BOS.buttons.debounce =temp16;
 8006686:	4b47      	ldr	r3, [pc, #284]	; (80067a4 <setCommand+0x3cc>)
 8006688:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 800668a:	2016      	movs	r0, #22
 800668c:	30ff      	adds	r0, #255	; 0xff
 800668e:	f005 ff19 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 8006692:	e0bd      	b.n	8006810 <setCommand+0x438>
			temp16 =atoi((const char* )pcParameterString2);
 8006694:	0020      	movs	r0, r4
 8006696:	f00d fa60 	bl	8013b5a <atoi>
 800669a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800669c:	2900      	cmp	r1, #0
 800669e:	d100      	bne.n	80066a2 <setCommand+0x2ca>
 80066a0:	e6fe      	b.n	80064a0 <setCommand+0xc8>
				BOS.buttons.singleClickTime =temp16;
 80066a2:	4b40      	ldr	r3, [pc, #256]	; (80067a4 <setCommand+0x3cc>)
 80066a4:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80066a6:	208b      	movs	r0, #139	; 0x8b
 80066a8:	0040      	lsls	r0, r0, #1
 80066aa:	f005 ff0b 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80066ae:	e0af      	b.n	8006810 <setCommand+0x438>
			temp16 =atoi((const char* )pcParameterString2);
 80066b0:	0020      	movs	r0, r4
 80066b2:	f00d fa52 	bl	8013b5a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80066b6:	1e43      	subs	r3, r0, #1
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2bfe      	cmp	r3, #254	; 0xfe
 80066bc:	d900      	bls.n	80066c0 <setCommand+0x2e8>
 80066be:	e6ef      	b.n	80064a0 <setCommand+0xc8>
				BOS.buttons.minInterClickTime =temp16;
 80066c0:	b2c0      	uxtb	r0, r0
 80066c2:	4b38      	ldr	r3, [pc, #224]	; (80067a4 <setCommand+0x3cc>)
 80066c4:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80066c6:	7959      	ldrb	r1, [r3, #5]
 80066c8:	0209      	lsls	r1, r1, #8
 80066ca:	4301      	orrs	r1, r0
 80066cc:	2018      	movs	r0, #24
 80066ce:	30ff      	adds	r0, #255	; 0xff
 80066d0:	f005 fef8 	bl	800c4c4 <EE_WriteVariable>
	if(result == BOS_OK){
 80066d4:	e09c      	b.n	8006810 <setCommand+0x438>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80066d6:	aa0c      	add	r2, sp, #48	; 0x30
 80066d8:	2102      	movs	r1, #2
 80066da:	0030      	movs	r0, r6
 80066dc:	f008 f9d8 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 80066e0:	4b22      	ldr	r3, [pc, #136]	; (800676c <setCommand+0x394>)
 80066e2:	4699      	mov	r9, r3
 80066e4:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80066e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80066e8:	2103      	movs	r1, #3
 80066ea:	0030      	movs	r0, r6
 80066ec:	f008 f9d0 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 80066f0:	4c30      	ldr	r4, [pc, #192]	; (80067b4 <setCommand+0x3dc>)
 80066f2:	6020      	str	r0, [r4, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066f4:	aa0a      	add	r2, sp, #40	; 0x28
 80066f6:	2104      	movs	r1, #4
 80066f8:	0030      	movs	r0, r6
 80066fa:	f008 f9c9 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 80066fe:	4d2e      	ldr	r5, [pc, #184]	; (80067b8 <setCommand+0x3e0>)
 8006700:	6028      	str	r0, [r5, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006702:	aa09      	add	r2, sp, #36	; 0x24
 8006704:	2105      	movs	r1, #5
 8006706:	0030      	movs	r0, r6
 8006708:	f008 f9c2 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800670c:	4e2b      	ldr	r6, [pc, #172]	; (80067bc <setCommand+0x3e4>)
 800670e:	6030      	str	r0, [r6, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006710:	464b      	mov	r3, r9
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	f00d fa21 	bl	8013b5a <atoi>
 8006718:	b2c3      	uxtb	r3, r0
 800671a:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	f00d fa1c 	bl	8013b5a <atoi>
 8006722:	0004      	movs	r4, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006724:	6828      	ldr	r0, [r5, #0]
 8006726:	f00d fa18 	bl	8013b5a <atoi>
 800672a:	0005      	movs	r5, r0
		if(pcParameterString5 != NULL){
 800672c:	6836      	ldr	r6, [r6, #0]
 800672e:	2e00      	cmp	r6, #0
 8006730:	d04c      	beq.n	80067cc <setCommand+0x3f4>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006732:	2202      	movs	r2, #2
 8006734:	4922      	ldr	r1, [pc, #136]	; (80067c0 <setCommand+0x3e8>)
 8006736:	0030      	movs	r0, r6
 8006738:	f00e f867 	bl	801480a <strncmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	d043      	beq.n	80067c8 <setCommand+0x3f0>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006740:	2202      	movs	r2, #2
 8006742:	4920      	ldr	r1, [pc, #128]	; (80067c4 <setCommand+0x3ec>)
 8006744:	0030      	movs	r0, r6
 8006746:	f00e f860 	bl	801480a <strncmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	d000      	beq.n	8006750 <setCommand+0x378>
 800674e:	e1d6      	b.n	8006afe <setCommand+0x726>
				temp84 =RTC_PM;
 8006750:	2302      	movs	r3, #2
 8006752:	4698      	mov	r8, r3
 8006754:	e03a      	b.n	80067cc <setCommand+0x3f4>
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	20000a10 	.word	0x20000a10
 800675c:	08019838 	.word	0x08019838
 8006760:	08019ab0 	.word	0x08019ab0
 8006764:	08019abc 	.word	0x08019abc
 8006768:	080198c0 	.word	0x080198c0
 800676c:	20000a1c 	.word	0x20000a1c
 8006770:	08019840 	.word	0x08019840
 8006774:	08018800 	.word	0x08018800
 8006778:	080199ac 	.word	0x080199ac
 800677c:	080199b4 	.word	0x080199b4
 8006780:	08019850 	.word	0x08019850
 8006784:	0801995c 	.word	0x0801995c
 8006788:	200061f8 	.word	0x200061f8
 800678c:	08019858 	.word	0x08019858
 8006790:	08019860 	.word	0x08019860
 8006794:	0801986c 	.word	0x0801986c
 8006798:	08019878 	.word	0x08019878
 800679c:	08019888 	.word	0x08019888
 80067a0:	0801989c 	.word	0x0801989c
 80067a4:	20006278 	.word	0x20006278
 80067a8:	080199b8 	.word	0x080199b8
 80067ac:	080199cc 	.word	0x080199cc
 80067b0:	080199fc 	.word	0x080199fc
 80067b4:	20000a24 	.word	0x20000a24
 80067b8:	20000a28 	.word	0x20000a28
 80067bc:	20000a2c 	.word	0x20000a2c
 80067c0:	0801b1b4 	.word	0x0801b1b4
 80067c4:	08019ab8 	.word	0x08019ab8
				temp84 =RTC_AM;
 80067c8:	2301      	movs	r3, #1
 80067ca:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80067cc:	464b      	mov	r3, r9
 80067ce:	2b17      	cmp	r3, #23
 80067d0:	d900      	bls.n	80067d4 <setCommand+0x3fc>
 80067d2:	e665      	b.n	80064a0 <setCommand+0xc8>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 80067d4:	b2e4      	uxtb	r4, r4
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80067d6:	2c3b      	cmp	r4, #59	; 0x3b
 80067d8:	d900      	bls.n	80067dc <setCommand+0x404>
 80067da:	e661      	b.n	80064a0 <setCommand+0xc8>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 80067dc:	b2ed      	uxtb	r5, r5
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80067de:	2d3b      	cmp	r5, #59	; 0x3b
 80067e0:	d900      	bls.n	80067e4 <setCommand+0x40c>
 80067e2:	e65d      	b.n	80064a0 <setCommand+0xc8>
				GetTimeDate();
 80067e4:	f007 fc98 	bl	800e118 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80067e8:	4ec7      	ldr	r6, [pc, #796]	; (8006b08 <setCommand+0x730>)
 80067ea:	7d33      	ldrb	r3, [r6, #20]
 80067ec:	8b32      	ldrh	r2, [r6, #24]
 80067ee:	7d71      	ldrb	r1, [r6, #21]
 80067f0:	7db0      	ldrb	r0, [r6, #22]
 80067f2:	7b36      	ldrb	r6, [r6, #12]
 80067f4:	b276      	sxtb	r6, r6
 80067f6:	9604      	str	r6, [sp, #16]
 80067f8:	4646      	mov	r6, r8
 80067fa:	9603      	str	r6, [sp, #12]
 80067fc:	464e      	mov	r6, r9
 80067fe:	9602      	str	r6, [sp, #8]
 8006800:	9401      	str	r4, [sp, #4]
 8006802:	9500      	str	r5, [sp, #0]
 8006804:	f007 fc2e 	bl	800e064 <BOS_CalendarConfig>
 8006808:	0006      	movs	r6, r0
	if(result == BOS_OK){
 800680a:	2e00      	cmp	r6, #0
 800680c:	d000      	beq.n	8006810 <setCommand+0x438>
 800680e:	e16a      	b.n	8006ae6 <setCommand+0x70e>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006810:	4bbe      	ldr	r3, [pc, #760]	; (8006b0c <setCommand+0x734>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006818:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800681a:	4bbd      	ldr	r3, [pc, #756]	; (8006b10 <setCommand+0x738>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	49bd      	ldr	r1, [pc, #756]	; (8006b14 <setCommand+0x73c>)
 8006820:	0038      	movs	r0, r7
 8006822:	f00d ffaf 	bl	8014784 <siprintf>
	return pdFALSE;
 8006826:	e164      	b.n	8006af2 <setCommand+0x71a>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006828:	aa0c      	add	r2, sp, #48	; 0x30
 800682a:	2102      	movs	r1, #2
 800682c:	0030      	movs	r0, r6
 800682e:	f008 f92f 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006832:	4bb7      	ldr	r3, [pc, #732]	; (8006b10 <setCommand+0x738>)
 8006834:	4698      	mov	r8, r3
 8006836:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006838:	aa0b      	add	r2, sp, #44	; 0x2c
 800683a:	2103      	movs	r1, #3
 800683c:	0030      	movs	r0, r6
 800683e:	f008 f927 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006842:	4bb5      	ldr	r3, [pc, #724]	; (8006b18 <setCommand+0x740>)
 8006844:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006846:	aa0a      	add	r2, sp, #40	; 0x28
 8006848:	2104      	movs	r1, #4
 800684a:	0030      	movs	r0, r6
 800684c:	f008 f920 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006850:	4db2      	ldr	r5, [pc, #712]	; (8006b1c <setCommand+0x744>)
 8006852:	6028      	str	r0, [r5, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006854:	aa09      	add	r2, sp, #36	; 0x24
 8006856:	2105      	movs	r1, #5
 8006858:	0030      	movs	r0, r6
 800685a:	f008 f919 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800685e:	4eb0      	ldr	r6, [pc, #704]	; (8006b20 <setCommand+0x748>)
 8006860:	6030      	str	r0, [r6, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006862:	6828      	ldr	r0, [r5, #0]
 8006864:	f00d f979 	bl	8013b5a <atoi>
 8006868:	9006      	str	r0, [sp, #24]
		temp16 =atoi((const char* )pcParameterString5);		// year
 800686a:	6830      	ldr	r0, [r6, #0]
 800686c:	f00d f975 	bl	8013b5a <atoi>
 8006870:	9007      	str	r0, [sp, #28]
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006872:	4643      	mov	r3, r8
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	2206      	movs	r2, #6
 8006878:	49aa      	ldr	r1, [pc, #680]	; (8006b24 <setCommand+0x74c>)
 800687a:	0028      	movs	r0, r5
 800687c:	f00d ffc5 	bl	801480a <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x4ae>
 8006884:	e18c      	b.n	8006ba0 <setCommand+0x7c8>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006886:	2207      	movs	r2, #7
 8006888:	49a7      	ldr	r1, [pc, #668]	; (8006b28 <setCommand+0x750>)
 800688a:	0028      	movs	r0, r5
 800688c:	f00d ffbd 	bl	801480a <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x4be>
 8006894:	e1b6      	b.n	8006c04 <setCommand+0x82c>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006896:	2209      	movs	r2, #9
 8006898:	49a4      	ldr	r1, [pc, #656]	; (8006b2c <setCommand+0x754>)
 800689a:	0028      	movs	r0, r5
 800689c:	f00d ffb5 	bl	801480a <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x4ce>
 80068a4:	e1b0      	b.n	8006c08 <setCommand+0x830>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 80068a6:	2208      	movs	r2, #8
 80068a8:	49a1      	ldr	r1, [pc, #644]	; (8006b30 <setCommand+0x758>)
 80068aa:	0028      	movs	r0, r5
 80068ac:	f00d ffad 	bl	801480a <strncmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d100      	bne.n	80068b6 <setCommand+0x4de>
 80068b4:	e1aa      	b.n	8006c0c <setCommand+0x834>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 80068b6:	2206      	movs	r2, #6
 80068b8:	499e      	ldr	r1, [pc, #632]	; (8006b34 <setCommand+0x75c>)
 80068ba:	0028      	movs	r0, r5
 80068bc:	f00d ffa5 	bl	801480a <strncmp>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d100      	bne.n	80068c6 <setCommand+0x4ee>
 80068c4:	e1a4      	b.n	8006c10 <setCommand+0x838>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80068c6:	2208      	movs	r2, #8
 80068c8:	499b      	ldr	r1, [pc, #620]	; (8006b38 <setCommand+0x760>)
 80068ca:	0028      	movs	r0, r5
 80068cc:	f00d ff9d 	bl	801480a <strncmp>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d100      	bne.n	80068d6 <setCommand+0x4fe>
 80068d4:	e19e      	b.n	8006c14 <setCommand+0x83c>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80068d6:	2206      	movs	r2, #6
 80068d8:	4998      	ldr	r1, [pc, #608]	; (8006b3c <setCommand+0x764>)
 80068da:	0028      	movs	r0, r5
 80068dc:	f00d ff95 	bl	801480a <strncmp>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d100      	bne.n	80068e6 <setCommand+0x50e>
 80068e4:	e198      	b.n	8006c18 <setCommand+0x840>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068e6:	4b8c      	ldr	r3, [pc, #560]	; (8006b18 <setCommand+0x740>)
 80068e8:	681d      	ldr	r5, [r3, #0]
 80068ea:	2207      	movs	r2, #7
 80068ec:	4994      	ldr	r1, [pc, #592]	; (8006b40 <setCommand+0x768>)
 80068ee:	0028      	movs	r0, r5
 80068f0:	f00d ff8b 	bl	801480a <strncmp>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d100      	bne.n	80068fa <setCommand+0x522>
 80068f8:	e0ad      	b.n	8006a56 <setCommand+0x67e>
			result =BOS_ERR_WrongValue;
 80068fa:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068fc:	2202      	movs	r2, #2
 80068fe:	4991      	ldr	r1, [pc, #580]	; (8006b44 <setCommand+0x76c>)
 8006900:	0028      	movs	r0, r5
 8006902:	f00d ff82 	bl	801480a <strncmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	d100      	bne.n	800690c <setCommand+0x534>
 800690a:	e0a8      	b.n	8006a5e <setCommand+0x686>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800690c:	2208      	movs	r2, #8
 800690e:	498e      	ldr	r1, [pc, #568]	; (8006b48 <setCommand+0x770>)
 8006910:	0028      	movs	r0, r5
 8006912:	f00d ff7a 	bl	801480a <strncmp>
 8006916:	2800      	cmp	r0, #0
 8006918:	d100      	bne.n	800691c <setCommand+0x544>
 800691a:	e0a5      	b.n	8006a68 <setCommand+0x690>
 800691c:	2202      	movs	r2, #2
 800691e:	498b      	ldr	r1, [pc, #556]	; (8006b4c <setCommand+0x774>)
 8006920:	0028      	movs	r0, r5
 8006922:	f00d ff72 	bl	801480a <strncmp>
 8006926:	2800      	cmp	r0, #0
 8006928:	d100      	bne.n	800692c <setCommand+0x554>
 800692a:	e0a0      	b.n	8006a6e <setCommand+0x696>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800692c:	2205      	movs	r2, #5
 800692e:	4988      	ldr	r1, [pc, #544]	; (8006b50 <setCommand+0x778>)
 8006930:	0028      	movs	r0, r5
 8006932:	f00d ff6a 	bl	801480a <strncmp>
 8006936:	2800      	cmp	r0, #0
 8006938:	d100      	bne.n	800693c <setCommand+0x564>
 800693a:	e09b      	b.n	8006a74 <setCommand+0x69c>
 800693c:	2202      	movs	r2, #2
 800693e:	4985      	ldr	r1, [pc, #532]	; (8006b54 <setCommand+0x77c>)
 8006940:	0028      	movs	r0, r5
 8006942:	f00d ff62 	bl	801480a <strncmp>
 8006946:	2800      	cmp	r0, #0
 8006948:	d100      	bne.n	800694c <setCommand+0x574>
 800694a:	e096      	b.n	8006a7a <setCommand+0x6a2>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800694c:	2205      	movs	r2, #5
 800694e:	4982      	ldr	r1, [pc, #520]	; (8006b58 <setCommand+0x780>)
 8006950:	0028      	movs	r0, r5
 8006952:	f00d ff5a 	bl	801480a <strncmp>
 8006956:	2800      	cmp	r0, #0
 8006958:	d100      	bne.n	800695c <setCommand+0x584>
 800695a:	e091      	b.n	8006a80 <setCommand+0x6a8>
 800695c:	2202      	movs	r2, #2
 800695e:	497f      	ldr	r1, [pc, #508]	; (8006b5c <setCommand+0x784>)
 8006960:	0028      	movs	r0, r5
 8006962:	f00d ff52 	bl	801480a <strncmp>
 8006966:	2800      	cmp	r0, #0
 8006968:	d100      	bne.n	800696c <setCommand+0x594>
 800696a:	e08c      	b.n	8006a86 <setCommand+0x6ae>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 800696c:	2203      	movs	r2, #3
 800696e:	497c      	ldr	r1, [pc, #496]	; (8006b60 <setCommand+0x788>)
 8006970:	0028      	movs	r0, r5
 8006972:	f00d ff4a 	bl	801480a <strncmp>
 8006976:	2800      	cmp	r0, #0
 8006978:	d100      	bne.n	800697c <setCommand+0x5a4>
 800697a:	e087      	b.n	8006a8c <setCommand+0x6b4>
 800697c:	2202      	movs	r2, #2
 800697e:	4979      	ldr	r1, [pc, #484]	; (8006b64 <setCommand+0x78c>)
 8006980:	0028      	movs	r0, r5
 8006982:	f00d ff42 	bl	801480a <strncmp>
 8006986:	2800      	cmp	r0, #0
 8006988:	d100      	bne.n	800698c <setCommand+0x5b4>
 800698a:	e082      	b.n	8006a92 <setCommand+0x6ba>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 800698c:	2204      	movs	r2, #4
 800698e:	4976      	ldr	r1, [pc, #472]	; (8006b68 <setCommand+0x790>)
 8006990:	0028      	movs	r0, r5
 8006992:	f00d ff3a 	bl	801480a <strncmp>
 8006996:	2800      	cmp	r0, #0
 8006998:	d07e      	beq.n	8006a98 <setCommand+0x6c0>
 800699a:	2202      	movs	r2, #2
 800699c:	4973      	ldr	r1, [pc, #460]	; (8006b6c <setCommand+0x794>)
 800699e:	0028      	movs	r0, r5
 80069a0:	f00d ff33 	bl	801480a <strncmp>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d07a      	beq.n	8006a9e <setCommand+0x6c6>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80069a8:	2204      	movs	r2, #4
 80069aa:	4971      	ldr	r1, [pc, #452]	; (8006b70 <setCommand+0x798>)
 80069ac:	0028      	movs	r0, r5
 80069ae:	f00d ff2c 	bl	801480a <strncmp>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d076      	beq.n	8006aa4 <setCommand+0x6cc>
 80069b6:	2202      	movs	r2, #2
 80069b8:	496e      	ldr	r1, [pc, #440]	; (8006b74 <setCommand+0x79c>)
 80069ba:	0028      	movs	r0, r5
 80069bc:	f00d ff25 	bl	801480a <strncmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d072      	beq.n	8006aaa <setCommand+0x6d2>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80069c4:	2205      	movs	r2, #5
 80069c6:	496c      	ldr	r1, [pc, #432]	; (8006b78 <setCommand+0x7a0>)
 80069c8:	0028      	movs	r0, r5
 80069ca:	f00d ff1e 	bl	801480a <strncmp>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d06e      	beq.n	8006ab0 <setCommand+0x6d8>
 80069d2:	2202      	movs	r2, #2
 80069d4:	4969      	ldr	r1, [pc, #420]	; (8006b7c <setCommand+0x7a4>)
 80069d6:	0028      	movs	r0, r5
 80069d8:	f00d ff17 	bl	801480a <strncmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d06a      	beq.n	8006ab6 <setCommand+0x6de>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80069e0:	2209      	movs	r2, #9
 80069e2:	4967      	ldr	r1, [pc, #412]	; (8006b80 <setCommand+0x7a8>)
 80069e4:	0028      	movs	r0, r5
 80069e6:	f00d ff10 	bl	801480a <strncmp>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d066      	beq.n	8006abc <setCommand+0x6e4>
 80069ee:	2202      	movs	r2, #2
 80069f0:	4964      	ldr	r1, [pc, #400]	; (8006b84 <setCommand+0x7ac>)
 80069f2:	0028      	movs	r0, r5
 80069f4:	f00d ff09 	bl	801480a <strncmp>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d062      	beq.n	8006ac2 <setCommand+0x6ea>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 80069fc:	2207      	movs	r2, #7
 80069fe:	4962      	ldr	r1, [pc, #392]	; (8006b88 <setCommand+0x7b0>)
 8006a00:	0028      	movs	r0, r5
 8006a02:	f00d ff02 	bl	801480a <strncmp>
 8006a06:	2800      	cmp	r0, #0
 8006a08:	d05e      	beq.n	8006ac8 <setCommand+0x6f0>
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	495f      	ldr	r1, [pc, #380]	; (8006b8c <setCommand+0x7b4>)
 8006a0e:	0028      	movs	r0, r5
 8006a10:	f00d fefb 	bl	801480a <strncmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d05a      	beq.n	8006ace <setCommand+0x6f6>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006a18:	2208      	movs	r2, #8
 8006a1a:	495d      	ldr	r1, [pc, #372]	; (8006b90 <setCommand+0x7b8>)
 8006a1c:	0028      	movs	r0, r5
 8006a1e:	f00d fef4 	bl	801480a <strncmp>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d056      	beq.n	8006ad4 <setCommand+0x6fc>
 8006a26:	2202      	movs	r2, #2
 8006a28:	495a      	ldr	r1, [pc, #360]	; (8006b94 <setCommand+0x7bc>)
 8006a2a:	0028      	movs	r0, r5
 8006a2c:	f00d feed 	bl	801480a <strncmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d052      	beq.n	8006ada <setCommand+0x702>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006a34:	2208      	movs	r2, #8
 8006a36:	4958      	ldr	r1, [pc, #352]	; (8006b98 <setCommand+0x7c0>)
 8006a38:	0028      	movs	r0, r5
 8006a3a:	f00d fee6 	bl	801480a <strncmp>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d04e      	beq.n	8006ae0 <setCommand+0x708>
 8006a42:	2202      	movs	r2, #2
 8006a44:	4955      	ldr	r1, [pc, #340]	; (8006b9c <setCommand+0x7c4>)
 8006a46:	0028      	movs	r0, r5
 8006a48:	f00d fedf 	bl	801480a <strncmp>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d158      	bne.n	8006b02 <setCommand+0x72a>
			temp82 =DECEMBER;
 8006a50:	230c      	movs	r3, #12
 8006a52:	4699      	mov	r9, r3
 8006a54:	e005      	b.n	8006a62 <setCommand+0x68a>
			result =BOS_ERR_WrongValue;
 8006a56:	2668      	movs	r6, #104	; 0x68
			temp82 =JANUARY;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	e001      	b.n	8006a62 <setCommand+0x68a>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4699      	mov	r9, r3
		if(result == BOS_OK){
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	d142      	bne.n	8006aec <setCommand+0x714>
 8006a66:	e0a9      	b.n	8006bbc <setCommand+0x7e4>
			temp82 =FEBRUARY;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	4699      	mov	r9, r3
 8006a6c:	e7f9      	b.n	8006a62 <setCommand+0x68a>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	4699      	mov	r9, r3
 8006a72:	e7f6      	b.n	8006a62 <setCommand+0x68a>
			temp82 =MARCH;
 8006a74:	2303      	movs	r3, #3
 8006a76:	4699      	mov	r9, r3
 8006a78:	e7f3      	b.n	8006a62 <setCommand+0x68a>
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	4699      	mov	r9, r3
 8006a7e:	e7f0      	b.n	8006a62 <setCommand+0x68a>
			temp82 =APRIL;
 8006a80:	2304      	movs	r3, #4
 8006a82:	4699      	mov	r9, r3
 8006a84:	e7ed      	b.n	8006a62 <setCommand+0x68a>
 8006a86:	2304      	movs	r3, #4
 8006a88:	4699      	mov	r9, r3
 8006a8a:	e7ea      	b.n	8006a62 <setCommand+0x68a>
			temp82 =MAY;
 8006a8c:	2305      	movs	r3, #5
 8006a8e:	4699      	mov	r9, r3
 8006a90:	e7e7      	b.n	8006a62 <setCommand+0x68a>
 8006a92:	2305      	movs	r3, #5
 8006a94:	4699      	mov	r9, r3
 8006a96:	e7e4      	b.n	8006a62 <setCommand+0x68a>
			temp82 =JUNE;
 8006a98:	2306      	movs	r3, #6
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	e7e1      	b.n	8006a62 <setCommand+0x68a>
 8006a9e:	2306      	movs	r3, #6
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	e7de      	b.n	8006a62 <setCommand+0x68a>
			temp82 =JULY;
 8006aa4:	2307      	movs	r3, #7
 8006aa6:	4699      	mov	r9, r3
 8006aa8:	e7db      	b.n	8006a62 <setCommand+0x68a>
 8006aaa:	2307      	movs	r3, #7
 8006aac:	4699      	mov	r9, r3
 8006aae:	e7d8      	b.n	8006a62 <setCommand+0x68a>
			temp82 =AUGUST;
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	e7d5      	b.n	8006a62 <setCommand+0x68a>
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	4699      	mov	r9, r3
 8006aba:	e7d2      	b.n	8006a62 <setCommand+0x68a>
			temp82 =SEPTEMBER;
 8006abc:	2309      	movs	r3, #9
 8006abe:	4699      	mov	r9, r3
 8006ac0:	e7cf      	b.n	8006a62 <setCommand+0x68a>
 8006ac2:	2309      	movs	r3, #9
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	e7cc      	b.n	8006a62 <setCommand+0x68a>
			temp82 =OCTOBER;
 8006ac8:	230a      	movs	r3, #10
 8006aca:	4699      	mov	r9, r3
 8006acc:	e7c9      	b.n	8006a62 <setCommand+0x68a>
 8006ace:	230a      	movs	r3, #10
 8006ad0:	4699      	mov	r9, r3
 8006ad2:	e7c6      	b.n	8006a62 <setCommand+0x68a>
			temp82 =NOVEMBER;
 8006ad4:	230b      	movs	r3, #11
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	e7c3      	b.n	8006a62 <setCommand+0x68a>
 8006ada:	230b      	movs	r3, #11
 8006adc:	4699      	mov	r9, r3
 8006ade:	e7c0      	b.n	8006a62 <setCommand+0x68a>
			temp82 =DECEMBER;
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	4699      	mov	r9, r3
 8006ae4:	e7bd      	b.n	8006a62 <setCommand+0x68a>
	else if(result == BOS_ERR_WrongParam)
 8006ae6:	2e67      	cmp	r6, #103	; 0x67
 8006ae8:	d100      	bne.n	8006aec <setCommand+0x714>
 8006aea:	e4a2      	b.n	8006432 <setCommand+0x5a>
	else if(result == BOS_ERR_WrongValue)
 8006aec:	2e68      	cmp	r6, #104	; 0x68
 8006aee:	d100      	bne.n	8006af2 <setCommand+0x71a>
 8006af0:	e4d6      	b.n	80064a0 <setCommand+0xc8>
}
 8006af2:	2000      	movs	r0, #0
 8006af4:	b00f      	add	sp, #60	; 0x3c
 8006af6:	bcc0      	pop	{r6, r7}
 8006af8:	46b9      	mov	r9, r7
 8006afa:	46b0      	mov	r8, r6
 8006afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				result =BOS_ERR_WrongValue;
 8006afe:	2668      	movs	r6, #104	; 0x68
 8006b00:	e7f4      	b.n	8006aec <setCommand+0x714>
			result =BOS_ERR_WrongValue;
 8006b02:	2668      	movs	r6, #104	; 0x68
	else if(result == BOS_ERR_WrongParam)
 8006b04:	e7f2      	b.n	8006aec <setCommand+0x714>
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	20006278 	.word	0x20006278
 8006b0c:	20000a10 	.word	0x20000a10
 8006b10:	20000a1c 	.word	0x20000a1c
 8006b14:	080199b8 	.word	0x080199b8
 8006b18:	20000a24 	.word	0x20000a24
 8006b1c:	20000a28 	.word	0x20000a28
 8006b20:	20000a2c 	.word	0x20000a2c
 8006b24:	08019ac4 	.word	0x08019ac4
 8006b28:	08019acc 	.word	0x08019acc
 8006b2c:	08019ad4 	.word	0x08019ad4
 8006b30:	08019ae0 	.word	0x08019ae0
 8006b34:	08019aec 	.word	0x08019aec
 8006b38:	08019af4 	.word	0x08019af4
 8006b3c:	08019b00 	.word	0x08019b00
 8006b40:	08019b08 	.word	0x08019b08
 8006b44:	08019b10 	.word	0x08019b10
 8006b48:	08019b14 	.word	0x08019b14
 8006b4c:	08019b20 	.word	0x08019b20
 8006b50:	08019b24 	.word	0x08019b24
 8006b54:	08019b2c 	.word	0x08019b2c
 8006b58:	08019b30 	.word	0x08019b30
 8006b5c:	08019b38 	.word	0x08019b38
 8006b60:	08019b3c 	.word	0x08019b3c
 8006b64:	08019b40 	.word	0x08019b40
 8006b68:	08019b44 	.word	0x08019b44
 8006b6c:	08019b4c 	.word	0x08019b4c
 8006b70:	08019b50 	.word	0x08019b50
 8006b74:	08019b58 	.word	0x08019b58
 8006b78:	08019b5c 	.word	0x08019b5c
 8006b7c:	08019b64 	.word	0x08019b64
 8006b80:	08019b68 	.word	0x08019b68
 8006b84:	08019b74 	.word	0x08019b74
 8006b88:	08019b78 	.word	0x08019b78
 8006b8c:	08019b80 	.word	0x08019b80
 8006b90:	08019b84 	.word	0x08019b84
 8006b94:	08019b90 	.word	0x08019b90
 8006b98:	08019b94 	.word	0x08019b94
 8006b9c:	08019ba0 	.word	0x08019ba0
			temp81 =MONDAY;
 8006ba0:	2401      	movs	r4, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006ba2:	4b1e      	ldr	r3, [pc, #120]	; (8006c1c <setCommand+0x844>)
 8006ba4:	681d      	ldr	r5, [r3, #0]
 8006ba6:	2207      	movs	r2, #7
 8006ba8:	491d      	ldr	r1, [pc, #116]	; (8006c20 <setCommand+0x848>)
 8006baa:	0028      	movs	r0, r5
 8006bac:	f00d fe2d 	bl	801480a <strncmp>
 8006bb0:	2600      	movs	r6, #0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d000      	beq.n	8006bb8 <setCommand+0x7e0>
 8006bb6:	e6a1      	b.n	80068fc <setCommand+0x524>
			temp82 =JANUARY;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	4699      	mov	r9, r3
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006bbc:	466b      	mov	r3, sp
 8006bbe:	7e1d      	ldrb	r5, [r3, #24]
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006bc0:	1e6b      	subs	r3, r5, #1
 8006bc2:	2b1e      	cmp	r3, #30
 8006bc4:	d900      	bls.n	8006bc8 <setCommand+0x7f0>
 8006bc6:	e46b      	b.n	80064a0 <setCommand+0xc8>
		temp16 =atoi((const char* )pcParameterString5);		// year
 8006bc8:	466b      	mov	r3, sp
 8006bca:	8b9e      	ldrh	r6, [r3, #28]
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006bcc:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <setCommand+0x84c>)
 8006bce:	18f3      	adds	r3, r6, r3
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b64      	cmp	r3, #100	; 0x64
 8006bd4:	d900      	bls.n	8006bd8 <setCommand+0x800>
 8006bd6:	e463      	b.n	80064a0 <setCommand+0xc8>
				GetTimeDate();
 8006bd8:	f007 fa9e 	bl	800e118 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006bdc:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <setCommand+0x850>)
 8006bde:	220c      	movs	r2, #12
 8006be0:	569a      	ldrsb	r2, [r3, r2]
 8006be2:	9204      	str	r2, [sp, #16]
 8006be4:	7cda      	ldrb	r2, [r3, #19]
 8006be6:	9203      	str	r2, [sp, #12]
 8006be8:	7c9a      	ldrb	r2, [r3, #18]
 8006bea:	9202      	str	r2, [sp, #8]
 8006bec:	7c5a      	ldrb	r2, [r3, #17]
 8006bee:	9201      	str	r2, [sp, #4]
 8006bf0:	7c1b      	ldrb	r3, [r3, #16]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	0023      	movs	r3, r4
 8006bf6:	0032      	movs	r2, r6
 8006bf8:	0029      	movs	r1, r5
 8006bfa:	4648      	mov	r0, r9
 8006bfc:	f007 fa32 	bl	800e064 <BOS_CalendarConfig>
 8006c00:	0006      	movs	r6, r0
 8006c02:	e602      	b.n	800680a <setCommand+0x432>
			temp81 =TUESDAY;
 8006c04:	2402      	movs	r4, #2
 8006c06:	e7cc      	b.n	8006ba2 <setCommand+0x7ca>
			temp81 =WEDNESDAY;
 8006c08:	2403      	movs	r4, #3
 8006c0a:	e7ca      	b.n	8006ba2 <setCommand+0x7ca>
			temp81 =THURSDAY;
 8006c0c:	2404      	movs	r4, #4
 8006c0e:	e7c8      	b.n	8006ba2 <setCommand+0x7ca>
			temp81 =FRIDAY;
 8006c10:	2405      	movs	r4, #5
 8006c12:	e7c6      	b.n	8006ba2 <setCommand+0x7ca>
			temp81 =SATURDAY;
 8006c14:	2406      	movs	r4, #6
 8006c16:	e7c4      	b.n	8006ba2 <setCommand+0x7ca>
			temp81 =SUNDAY;
 8006c18:	2407      	movs	r4, #7
 8006c1a:	e7c2      	b.n	8006ba2 <setCommand+0x7ca>
 8006c1c:	20000a24 	.word	0x20000a24
 8006c20:	08019b08 	.word	0x08019b08
 8006c24:	fffff830 	.word	0xfffff830
 8006c28:	20006278 	.word	0x20006278

08006c2c <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c2c:	b530      	push	{r4, r5, lr}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	0004      	movs	r4, r0
 8006c32:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c38:	aa01      	add	r2, sp, #4
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	f007 ff28 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006c40:	2300      	movs	r3, #0
 8006c42:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006c44:	2500      	movs	r5, #0
	if(pcParameterString1[0] == 'p'){
 8006c46:	2b70      	cmp	r3, #112	; 0x70
 8006c48:	d007      	beq.n	8006c5a <removebuttonCommand+0x2e>
	result =RemovePortButton(port);
 8006c4a:	0028      	movs	r0, r5
 8006c4c:	f006 f942 	bl	800ced4 <RemovePortButton>
	if(result == BOS_OK){
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d007      	beq.n	8006c64 <removebuttonCommand+0x38>
}
 8006c54:	2000      	movs	r0, #0
 8006c56:	b003      	add	sp, #12
 8006c58:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	f00c ff83 	bl	8013b66 <atol>
 8006c60:	b2c5      	uxtb	r5, r0
 8006c62:	e7f2      	b.n	8006c4a <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006c64:	002b      	movs	r3, r5
 8006c66:	002a      	movs	r2, r5
 8006c68:	4902      	ldr	r1, [pc, #8]	; (8006c74 <removebuttonCommand+0x48>)
 8006c6a:	0020      	movs	r0, r4
 8006c6c:	f00d fd8a 	bl	8014784 <siprintf>
 8006c70:	e7f0      	b.n	8006c54 <removebuttonCommand+0x28>
 8006c72:	46c0      	nop			; (mov r8, r8)
 8006c74:	08019ba4 	.word	0x08019ba4

08006c78 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	9003      	str	r0, [sp, #12]
 8006c7e:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	9305      	str	r3, [sp, #20]
 8006c84:	9304      	str	r3, [sp, #16]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c86:	aa05      	add	r2, sp, #20
 8006c88:	2101      	movs	r1, #1
 8006c8a:	0028      	movs	r0, r5
 8006c8c:	f007 ff00 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006c90:	0004      	movs	r4, r0
 8006c92:	4b23      	ldr	r3, [pc, #140]	; (8006d20 <addbuttonCommand+0xa8>)
 8006c94:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c96:	9e05      	ldr	r6, [sp, #20]
 8006c98:	0032      	movs	r2, r6
 8006c9a:	4922      	ldr	r1, [pc, #136]	; (8006d24 <addbuttonCommand+0xac>)
 8006c9c:	f00d fdb5 	bl	801480a <strncmp>
		type =MOMENTARY_NO;
 8006ca0:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d017      	beq.n	8006cd6 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006ca6:	0032      	movs	r2, r6
 8006ca8:	491f      	ldr	r1, [pc, #124]	; (8006d28 <addbuttonCommand+0xb0>)
 8006caa:	0020      	movs	r0, r4
 8006cac:	f00d fdad 	bl	801480a <strncmp>
		type =MOMENTARY_NC;
 8006cb0:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d00f      	beq.n	8006cd6 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006cb6:	0032      	movs	r2, r6
 8006cb8:	491c      	ldr	r1, [pc, #112]	; (8006d2c <addbuttonCommand+0xb4>)
 8006cba:	0020      	movs	r0, r4
 8006cbc:	f00d fda5 	bl	801480a <strncmp>
		type =ONOFF_NO;
 8006cc0:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d007      	beq.n	8006cd6 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006cc6:	0032      	movs	r2, r6
 8006cc8:	4919      	ldr	r1, [pc, #100]	; (8006d30 <addbuttonCommand+0xb8>)
 8006cca:	0020      	movs	r0, r4
 8006ccc:	f00d fd9d 	bl	801480a <strncmp>
		type =ONOFF_NC;
 8006cd0:	4247      	negs	r7, r0
 8006cd2:	4147      	adcs	r7, r0
 8006cd4:	00bf      	lsls	r7, r7, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006cd6:	aa04      	add	r2, sp, #16
 8006cd8:	2102      	movs	r1, #2
 8006cda:	0028      	movs	r0, r5
 8006cdc:	f007 fed8 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006ce4:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006ce6:	2b70      	cmp	r3, #112	; 0x70
 8006ce8:	d008      	beq.n	8006cfc <addbuttonCommand+0x84>
	result =AddPortButton(type,port);
 8006cea:	0021      	movs	r1, r4
 8006cec:	0038      	movs	r0, r7
 8006cee:	f006 f85f 	bl	800cdb0 <AddPortButton>
	if(result == BOS_OK){
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d007      	beq.n	8006d06 <addbuttonCommand+0x8e>
}
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	b007      	add	sp, #28
 8006cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f00c ff32 	bl	8013b66 <atol>
 8006d02:	b2c4      	uxtb	r4, r0
 8006d04:	e7f1      	b.n	8006cea <addbuttonCommand+0x72>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <addbuttonCommand+0xa8>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	9905      	ldr	r1, [sp, #20]
 8006d0e:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006d10:	9400      	str	r4, [sp, #0]
 8006d12:	0023      	movs	r3, r4
 8006d14:	4907      	ldr	r1, [pc, #28]	; (8006d34 <addbuttonCommand+0xbc>)
 8006d16:	9803      	ldr	r0, [sp, #12]
 8006d18:	f00d fd34 	bl	8014784 <siprintf>
 8006d1c:	e7eb      	b.n	8006cf6 <addbuttonCommand+0x7e>
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	20000a0c 	.word	0x20000a0c
 8006d24:	08019bcc 	.word	0x08019bcc
 8006d28:	08019bdc 	.word	0x08019bdc
 8006d2c:	08019bec 	.word	0x08019bec
 8006d30:	08019bf8 	.word	0x08019bf8
 8006d34:	08019c04 	.word	0x08019c04

08006d38 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3a:	46de      	mov	lr, fp
 8006d3c:	4657      	mov	r7, sl
 8006d3e:	464e      	mov	r6, r9
 8006d40:	4645      	mov	r5, r8
 8006d42:	b5e0      	push	{r5, r6, r7, lr}
 8006d44:	b099      	sub	sp, #100	; 0x64
 8006d46:	9007      	str	r0, [sp, #28]
 8006d48:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	9517      	str	r5, [sp, #92]	; 0x5c
 8006d4e:	9516      	str	r5, [sp, #88]	; 0x58
 8006d50:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006d52:	9514      	str	r5, [sp, #80]	; 0x50
 8006d54:	9513      	str	r5, [sp, #76]	; 0x4c
 8006d56:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006d58:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006d5a:	950e      	str	r5, [sp, #56]	; 0x38
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	2100      	movs	r1, #0
 8006d60:	a80f      	add	r0, sp, #60	; 0x3c
 8006d62:	f00c ff56 	bl	8013c12 <memset>
 8006d66:	950b      	str	r5, [sp, #44]	; 0x2c
 8006d68:	2206      	movs	r2, #6
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	a80c      	add	r0, sp, #48	; 0x30
 8006d6e:	f00c ff50 	bl	8013c12 <memset>
 8006d72:	9508      	str	r5, [sp, #32]
 8006d74:	2206      	movs	r2, #6
 8006d76:	2100      	movs	r1, #0
 8006d78:	a809      	add	r0, sp, #36	; 0x24
 8006d7a:	f00c ff4a 	bl	8013c12 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d7e:	aa17      	add	r2, sp, #92	; 0x5c
 8006d80:	2101      	movs	r1, #1
 8006d82:	0020      	movs	r0, r4
 8006d84:	f007 fe84 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d88:	2300      	movs	r3, #0
 8006d8a:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4692      	mov	sl, r2
	if(pcParameterString1[0] == 'P'){
 8006d90:	2b50      	cmp	r3, #80	; 0x50
 8006d92:	d100      	bne.n	8006d96 <scastCommand+0x5e>
 8006d94:	e073      	b.n	8006e7e <scastCommand+0x146>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d96:	aa16      	add	r2, sp, #88	; 0x58
 8006d98:	2102      	movs	r1, #2
 8006d9a:	0020      	movs	r0, r4
 8006d9c:	f007 fe78 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006da0:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006da2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006da4:	a80e      	add	r0, sp, #56	; 0x38
 8006da6:	f00d fd41 	bl	801482c <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006daa:	a80e      	add	r0, sp, #56	; 0x38
 8006dac:	f7fd fb74 	bl	8004498 <GetID>
 8006db0:	b2c6      	uxtb	r6, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006db2:	aa15      	add	r2, sp, #84	; 0x54
 8006db4:	2103      	movs	r1, #3
 8006db6:	0020      	movs	r0, r4
 8006db8:	f007 fe6a 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4693      	mov	fp, r2
	if(pcParameterString3[0] == 'p'){
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d060      	beq.n	8006e8a <scastCommand+0x152>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006dc8:	aa14      	add	r2, sp, #80	; 0x50
 8006dca:	2104      	movs	r1, #4
 8006dcc:	0020      	movs	r0, r4
 8006dce:	f007 fe5f 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006dd2:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dd6:	a80b      	add	r0, sp, #44	; 0x2c
 8006dd8:	f00d fd28 	bl	801482c <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006ddc:	a80b      	add	r0, sp, #44	; 0x2c
 8006dde:	f7fd fb5b 	bl	8004498 <GetID>
 8006de2:	b2c7      	uxtb	r7, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006de4:	aa13      	add	r2, sp, #76	; 0x4c
 8006de6:	2105      	movs	r1, #5
 8006de8:	0020      	movs	r0, r4
 8006dea:	f007 fe51 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006dee:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006df2:	4699      	mov	r9, r3
 8006df4:	001a      	movs	r2, r3
 8006df6:	492f      	ldr	r1, [pc, #188]	; (8006eb4 <scastCommand+0x17c>)
 8006df8:	f00d fd07 	bl	801480a <strncmp>
		direction =FORWARD;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4698      	mov	r8, r3
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d011      	beq.n	8006e28 <scastCommand+0xf0>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006e04:	464a      	mov	r2, r9
 8006e06:	492c      	ldr	r1, [pc, #176]	; (8006eb8 <scastCommand+0x180>)
 8006e08:	0028      	movs	r0, r5
 8006e0a:	f00d fcfe 	bl	801480a <strncmp>
		direction =BACKWARD;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	4698      	mov	r8, r3
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d008      	beq.n	8006e28 <scastCommand+0xf0>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006e16:	464a      	mov	r2, r9
 8006e18:	4928      	ldr	r1, [pc, #160]	; (8006ebc <scastCommand+0x184>)
 8006e1a:	0028      	movs	r0, r5
 8006e1c:	f00d fcf5 	bl	801480a <strncmp>
		direction =BIDIRECTIONAL;
 8006e20:	4243      	negs	r3, r0
 8006e22:	4158      	adcs	r0, r3
 8006e24:	0043      	lsls	r3, r0, #1
 8006e26:	4698      	mov	r8, r3
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006e28:	464a      	mov	r2, r9
 8006e2a:	0029      	movs	r1, r5
 8006e2c:	a808      	add	r0, sp, #32
 8006e2e:	f00d fcfd 	bl	801482c <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006e32:	aa12      	add	r2, sp, #72	; 0x48
 8006e34:	2106      	movs	r1, #6
 8006e36:	0020      	movs	r0, r4
 8006e38:	f007 fe2a 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006e3c:	f00c fe93 	bl	8013b66 <atol>
 8006e40:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006e42:	aa11      	add	r2, sp, #68	; 0x44
 8006e44:	2107      	movs	r1, #7
 8006e46:	0020      	movs	r0, r4
 8006e48:	f007 fe22 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006e4c:	f00c fe8b 	bl	8013b66 <atol>
 8006e50:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006e52:	2300      	movs	r3, #0
 8006e54:	9303      	str	r3, [sp, #12]
 8006e56:	9002      	str	r0, [sp, #8]
 8006e58:	9501      	str	r5, [sp, #4]
 8006e5a:	4643      	mov	r3, r8
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	003b      	movs	r3, r7
 8006e60:	465a      	mov	r2, fp
 8006e62:	0031      	movs	r1, r6
 8006e64:	4650      	mov	r0, sl
 8006e66:	f001 fab3 	bl	80083d0 <StartScastDMAStream>
	if(result == BOS_OK){
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d013      	beq.n	8006e96 <scastCommand+0x15e>
}
 8006e6e:	2000      	movs	r0, #0
 8006e70:	b019      	add	sp, #100	; 0x64
 8006e72:	bcf0      	pop	{r4, r5, r6, r7}
 8006e74:	46bb      	mov	fp, r7
 8006e76:	46b2      	mov	sl, r6
 8006e78:	46a9      	mov	r9, r5
 8006e7a:	46a0      	mov	r8, r4
 8006e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e7e:	3001      	adds	r0, #1
 8006e80:	f00c fe71 	bl	8013b66 <atol>
 8006e84:	b2c3      	uxtb	r3, r0
 8006e86:	469a      	mov	sl, r3
 8006e88:	e785      	b.n	8006d96 <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f00c fe6b 	bl	8013b66 <atol>
 8006e90:	b2c3      	uxtb	r3, r0
 8006e92:	469b      	mov	fp, r3
 8006e94:	e798      	b.n	8006dc8 <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e96:	9404      	str	r4, [sp, #16]
 8006e98:	9503      	str	r5, [sp, #12]
 8006e9a:	ab0b      	add	r3, sp, #44	; 0x2c
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	465b      	mov	r3, fp
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	ab0e      	add	r3, sp, #56	; 0x38
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	4653      	mov	r3, sl
 8006ea8:	aa08      	add	r2, sp, #32
 8006eaa:	4905      	ldr	r1, [pc, #20]	; (8006ec0 <scastCommand+0x188>)
 8006eac:	9807      	ldr	r0, [sp, #28]
 8006eae:	f00d fc69 	bl	8014784 <siprintf>
 8006eb2:	e7dc      	b.n	8006e6e <scastCommand+0x136>
 8006eb4:	08019c38 	.word	0x08019c38
 8006eb8:	08019c40 	.word	0x08019c40
 8006ebc:	08019c4c 	.word	0x08019c4c
 8006ec0:	08019c5c 	.word	0x08019c5c

08006ec4 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	0004      	movs	r4, r0
	if(N > 1)
 8006eca:	4b26      	ldr	r3, [pc, #152]	; (8006f64 <infoCommand+0xa0>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006ece:	2600      	movs	r6, #0
	if(N > 1)
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d831      	bhi.n	8006f38 <infoCommand+0x74>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006ed4:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <infoCommand+0xa0>)
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	4923      	ldr	r1, [pc, #140]	; (8006f68 <infoCommand+0xa4>)
 8006eda:	0020      	movs	r0, r4
 8006edc:	f00d fc52 	bl	8014784 <siprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006ee0:	0020      	movs	r0, r4
 8006ee2:	f7f9 f919 	bl	8000118 <strlen>
 8006ee6:	b282      	uxth	r2, r0
 8006ee8:	4d20      	ldr	r5, [pc, #128]	; (8006f6c <infoCommand+0xa8>)
 8006eea:	7828      	ldrb	r0, [r5, #0]
 8006eec:	2701      	movs	r7, #1
 8006eee:	427f      	negs	r7, r7
 8006ef0:	9700      	str	r7, [sp, #0]
 8006ef2:	2332      	movs	r3, #50	; 0x32
 8006ef4:	0021      	movs	r1, r4
 8006ef6:	f007 fb01 	bl	800e4fc <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006efa:	2213      	movs	r2, #19
 8006efc:	491c      	ldr	r1, [pc, #112]	; (8006f70 <infoCommand+0xac>)
 8006efe:	0020      	movs	r0, r4
 8006f00:	f00c fe7e 	bl	8013c00 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006f04:	0020      	movs	r0, r4
 8006f06:	f7f9 f907 	bl	8000118 <strlen>
 8006f0a:	b282      	uxth	r2, r0
 8006f0c:	7828      	ldrb	r0, [r5, #0]
 8006f0e:	9700      	str	r7, [sp, #0]
 8006f10:	2332      	movs	r3, #50	; 0x32
 8006f12:	0021      	movs	r1, r4
 8006f14:	f007 faf2 	bl	800e4fc <writePxMutex>
	DisplayTopology(PcPort);
 8006f18:	7828      	ldrb	r0, [r5, #0]
 8006f1a:	f7fd f807 	bl	8003f2c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006f1e:	7828      	ldrb	r0, [r5, #0]
 8006f20:	f7fd f8da 	bl	80040d8 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006f24:	2e02      	cmp	r6, #2
 8006f26:	d00b      	beq.n	8006f40 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006f28:	2202      	movs	r2, #2
 8006f2a:	4912      	ldr	r1, [pc, #72]	; (8006f74 <infoCommand+0xb0>)
 8006f2c:	0020      	movs	r0, r4
 8006f2e:	f00c fe67 	bl	8013c00 <memcpy>
}
 8006f32:	2000      	movs	r0, #0
 8006f34:	b003      	add	sp, #12
 8006f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006f38:	f007 fb92 	bl	800e660 <ReadPortsDir>
 8006f3c:	0006      	movs	r6, r0
 8006f3e:	e7c9      	b.n	8006ed4 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006f40:	2244      	movs	r2, #68	; 0x44
 8006f42:	490d      	ldr	r1, [pc, #52]	; (8006f78 <infoCommand+0xb4>)
 8006f44:	0020      	movs	r0, r4
 8006f46:	f00c fe5b 	bl	8013c00 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f4a:	0020      	movs	r0, r4
 8006f4c:	f7f9 f8e4 	bl	8000118 <strlen>
 8006f50:	b282      	uxth	r2, r0
 8006f52:	4b06      	ldr	r3, [pc, #24]	; (8006f6c <infoCommand+0xa8>)
 8006f54:	7818      	ldrb	r0, [r3, #0]
 8006f56:	003b      	movs	r3, r7
 8006f58:	9700      	str	r7, [sp, #0]
 8006f5a:	3333      	adds	r3, #51	; 0x33
 8006f5c:	0021      	movs	r1, r4
 8006f5e:	f007 facd 	bl	800e4fc <writePxMutex>
 8006f62:	e7e1      	b.n	8006f28 <infoCommand+0x64>
 8006f64:	20000030 	.word	0x20000030
 8006f68:	08019ce4 	.word	0x08019ce4
 8006f6c:	200002b8 	.word	0x200002b8
 8006f70:	08019d00 	.word	0x08019d00
 8006f74:	080186e8 	.word	0x080186e8
 8006f78:	08019d14 	.word	0x08019d14

08006f7c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f7c:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f7fd f920 	bl	80041c4 <DisplayModuleStatus>
}
 8006f84:	2000      	movs	r0, #0
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f8a:	46d6      	mov	lr, sl
 8006f8c:	464f      	mov	r7, r9
 8006f8e:	4646      	mov	r6, r8
 8006f90:	b5c0      	push	{r6, r7, lr}
 8006f92:	b08e      	sub	sp, #56	; 0x38
 8006f94:	0005      	movs	r5, r0
 8006f96:	0017      	movs	r7, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006f98:	2400      	movs	r4, #0
 8006f9a:	9404      	str	r4, [sp, #16]
 8006f9c:	2223      	movs	r2, #35	; 0x23
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	a805      	add	r0, sp, #20
 8006fa2:	f00c fe36 	bl	8013c12 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006fa6:	9401      	str	r4, [sp, #4]
 8006fa8:	2206      	movs	r2, #6
 8006faa:	2100      	movs	r1, #0
 8006fac:	a802      	add	r0, sp, #8
 8006fae:	f00c fe30 	bl	8013c12 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fb2:	4c58      	ldr	r4, [pc, #352]	; (8007114 <groupCommand+0x18c>)
 8006fb4:	0022      	movs	r2, r4
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	0038      	movs	r0, r7
 8006fba:	f007 fd69 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006fbe:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	a801      	add	r0, sp, #4
 8006fc4:	f00d fc32 	bl	801482c <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006fc8:	4c53      	ldr	r4, [pc, #332]	; (8007118 <groupCommand+0x190>)
 8006fca:	0026      	movs	r6, r4
 8006fcc:	3664      	adds	r6, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006fce:	0021      	movs	r1, r4
 8006fd0:	a801      	add	r0, sp, #4
 8006fd2:	f7f9 f897 	bl	8000104 <strcmp>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d01b      	beq.n	8007012 <groupCommand+0x8a>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006fda:	340a      	adds	r4, #10
 8006fdc:	42a6      	cmp	r6, r4
 8006fde:	d1f6      	bne.n	8006fce <groupCommand+0x46>
	type =1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	4699      	mov	r9, r3
	count =2;
 8006fe4:	4b4d      	ldr	r3, [pc, #308]	; (800711c <groupCommand+0x194>)
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006fea:	3208      	adds	r2, #8
 8006fec:	494c      	ldr	r1, [pc, #304]	; (8007120 <groupCommand+0x198>)
 8006fee:	0028      	movs	r0, r5
 8006ff0:	f00c fe06 	bl	8013c00 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006ff4:	4a4b      	ldr	r2, [pc, #300]	; (8007124 <groupCommand+0x19c>)
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	0038      	movs	r0, r7
 8006ffa:	f007 fd49 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8006ffe:	1e01      	subs	r1, r0, #0
 8007000:	4b49      	ldr	r3, [pc, #292]	; (8007128 <groupCommand+0x1a0>)
 8007002:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8007004:	d100      	bne.n	8007008 <groupCommand+0x80>
 8007006:	e072      	b.n	80070ee <groupCommand+0x166>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8007008:	4b46      	ldr	r3, [pc, #280]	; (8007124 <groupCommand+0x19c>)
 800700a:	4698      	mov	r8, r3
		if(count > 2)
 800700c:	4b43      	ldr	r3, [pc, #268]	; (800711c <groupCommand+0x194>)
 800700e:	469a      	mov	sl, r3
 8007010:	e02b      	b.n	800706a <groupCommand+0xe2>
			type =0;
 8007012:	2300      	movs	r3, #0
 8007014:	4699      	mov	r9, r3
 8007016:	e7e5      	b.n	8006fe4 <groupCommand+0x5c>
	else if(count == 2)
 8007018:	4b40      	ldr	r3, [pc, #256]	; (800711c <groupCommand+0x194>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b25b      	sxtb	r3, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d03d      	beq.n	800709e <groupCommand+0x116>
	else if(result == BOS_ERR_Keyword)
 8007022:	2806      	cmp	r0, #6
 8007024:	d04b      	beq.n	80070be <groupCommand+0x136>
	else if(result == BOS_ERR_ExistingAlias)
 8007026:	2807      	cmp	r0, #7
 8007028:	d04f      	beq.n	80070ca <groupCommand+0x142>
	else if(result == BOS_ERR_ExistingCmd)
 800702a:	2808      	cmp	r0, #8
 800702c:	d158      	bne.n	80070e0 <groupCommand+0x158>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 800702e:	aa01      	add	r2, sp, #4
 8007030:	493e      	ldr	r1, [pc, #248]	; (800712c <groupCommand+0x1a4>)
 8007032:	0028      	movs	r0, r5
 8007034:	f00d fba6 	bl	8014784 <siprintf>
 8007038:	e052      	b.n	80070e0 <groupCommand+0x158>
			strcat((char* )pcWriteBuffer,", ");
 800703a:	0028      	movs	r0, r5
 800703c:	f7f9 f86c 	bl	8000118 <strlen>
 8007040:	1828      	adds	r0, r5, r0
 8007042:	2203      	movs	r2, #3
 8007044:	493a      	ldr	r1, [pc, #232]	; (8007130 <groupCommand+0x1a8>)
 8007046:	f00c fddb 	bl	8013c00 <memcpy>
		strcat((char* )pcWriteBuffer,module);
 800704a:	a904      	add	r1, sp, #16
 800704c:	0028      	movs	r0, r5
 800704e:	f00d fbb9 	bl	80147c4 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8007052:	3401      	adds	r4, #1
 8007054:	b261      	sxtb	r1, r4
 8007056:	4b31      	ldr	r3, [pc, #196]	; (800711c <groupCommand+0x194>)
 8007058:	7019      	strb	r1, [r3, #0]
 800705a:	4a32      	ldr	r2, [pc, #200]	; (8007124 <groupCommand+0x19c>)
 800705c:	0038      	movs	r0, r7
 800705e:	f007 fd17 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8007062:	1e01      	subs	r1, r0, #0
 8007064:	4b30      	ldr	r3, [pc, #192]	; (8007128 <groupCommand+0x1a0>)
 8007066:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8007068:	d041      	beq.n	80070ee <groupCommand+0x166>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 800706a:	4643      	mov	r3, r8
 800706c:	681e      	ldr	r6, [r3, #0]
 800706e:	ac04      	add	r4, sp, #16
 8007070:	0032      	movs	r2, r6
 8007072:	0020      	movs	r0, r4
 8007074:	f00d fbda 	bl	801482c <strncpy>
		module[xParameterStringLength] ='\0';
 8007078:	2300      	movs	r3, #0
 800707a:	55a3      	strb	r3, [r4, r6]
		modID =GetID(module);
 800707c:	0020      	movs	r0, r4
 800707e:	f7fd fa0b 	bl	8004498 <GetID>
		if(modID < 0)
 8007082:	2800      	cmp	r0, #0
 8007084:	db27      	blt.n	80070d6 <groupCommand+0x14e>
		result =AddModuleToGroup(modID,alias);
 8007086:	b2c0      	uxtb	r0, r0
 8007088:	a901      	add	r1, sp, #4
 800708a:	f7fd facd 	bl	8004628 <AddModuleToGroup>
		if(result != BOS_OK)
 800708e:	2800      	cmp	r0, #0
 8007090:	d1c2      	bne.n	8007018 <groupCommand+0x90>
		if(count > 2)
 8007092:	4653      	mov	r3, sl
 8007094:	2400      	movs	r4, #0
 8007096:	571c      	ldrsb	r4, [r3, r4]
 8007098:	2c02      	cmp	r4, #2
 800709a:	ddd6      	ble.n	800704a <groupCommand+0xc2>
 800709c:	e7cd      	b.n	800703a <groupCommand+0xb2>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 800709e:	aa01      	add	r2, sp, #4
 80070a0:	4924      	ldr	r1, [pc, #144]	; (8007134 <groupCommand+0x1ac>)
 80070a2:	0028      	movs	r0, r5
 80070a4:	f00d fb6e 	bl	8014784 <siprintf>
 80070a8:	e01a      	b.n	80070e0 <groupCommand+0x158>
		sprintf(module,(char* )pcMessageOKnew,alias);
 80070aa:	aa01      	add	r2, sp, #4
 80070ac:	4922      	ldr	r1, [pc, #136]	; (8007138 <groupCommand+0x1b0>)
 80070ae:	a804      	add	r0, sp, #16
 80070b0:	f00d fb68 	bl	8014784 <siprintf>
		strcat((char* )pcWriteBuffer,module);
 80070b4:	a904      	add	r1, sp, #16
 80070b6:	0028      	movs	r0, r5
 80070b8:	f00d fb84 	bl	80147c4 <strcat>
 80070bc:	e010      	b.n	80070e0 <groupCommand+0x158>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 80070be:	aa01      	add	r2, sp, #4
 80070c0:	491e      	ldr	r1, [pc, #120]	; (800713c <groupCommand+0x1b4>)
 80070c2:	0028      	movs	r0, r5
 80070c4:	f00d fb5e 	bl	8014784 <siprintf>
 80070c8:	e00a      	b.n	80070e0 <groupCommand+0x158>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 80070ca:	aa01      	add	r2, sp, #4
 80070cc:	491c      	ldr	r1, [pc, #112]	; (8007140 <groupCommand+0x1b8>)
 80070ce:	0028      	movs	r0, r5
 80070d0:	f00d fb58 	bl	8014784 <siprintf>
 80070d4:	e004      	b.n	80070e0 <groupCommand+0x158>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 80070d6:	aa04      	add	r2, sp, #16
 80070d8:	491a      	ldr	r1, [pc, #104]	; (8007144 <groupCommand+0x1bc>)
 80070da:	0028      	movs	r0, r5
 80070dc:	f00d fb52 	bl	8014784 <siprintf>
}
 80070e0:	2000      	movs	r0, #0
 80070e2:	b00e      	add	sp, #56	; 0x38
 80070e4:	bce0      	pop	{r5, r6, r7}
 80070e6:	46ba      	mov	sl, r7
 80070e8:	46b1      	mov	r9, r6
 80070ea:	46a8      	mov	r8, r5
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 80070ee:	4b0b      	ldr	r3, [pc, #44]	; (800711c <groupCommand+0x194>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	b25b      	sxtb	r3, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d0d2      	beq.n	800709e <groupCommand+0x116>
	else if(result == BOS_OK && type){
 80070f8:	464b      	mov	r3, r9
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1d5      	bne.n	80070aa <groupCommand+0x122>
		sprintf(module,(char* )pcMessageOKexist,alias);
 80070fe:	aa01      	add	r2, sp, #4
 8007100:	4911      	ldr	r1, [pc, #68]	; (8007148 <groupCommand+0x1c0>)
 8007102:	a804      	add	r0, sp, #16
 8007104:	f00d fb3e 	bl	8014784 <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8007108:	a904      	add	r1, sp, #16
 800710a:	0028      	movs	r0, r5
 800710c:	f00d fb5a 	bl	80147c4 <strcat>
 8007110:	e7e6      	b.n	80070e0 <groupCommand+0x158>
 8007112:	46c0      	nop			; (mov r8, r8)
 8007114:	20000a3c 	.word	0x20000a3c
 8007118:	200005f8 	.word	0x200005f8
 800711c:	20000a02 	.word	0x20000a02
 8007120:	08019d58 	.word	0x08019d58
 8007124:	20000a30 	.word	0x20000a30
 8007128:	20000a04 	.word	0x20000a04
 800712c:	08019e44 	.word	0x08019e44
 8007130:	08019d64 	.word	0x08019d64
 8007134:	08019d68 	.word	0x08019d68
 8007138:	08019d94 	.word	0x08019d94
 800713c:	08019dd0 	.word	0x08019dd0
 8007140:	08019e10 	.word	0x08019e10
 8007144:	08019e84 	.word	0x08019e84
 8007148:	08019db0 	.word	0x08019db0

0800714c <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	0004      	movs	r4, r0
 8007150:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8007152:	4d1c      	ldr	r5, [pc, #112]	; (80071c4 <nameCommand+0x78>)
 8007154:	002a      	movs	r2, r5
 8007156:	2101      	movs	r1, #1
 8007158:	f007 fc9a 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800715c:	0001      	movs	r1, r0
 800715e:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <nameCommand+0x7c>)
 8007160:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8007162:	682b      	ldr	r3, [r5, #0]
 8007164:	2b09      	cmp	r3, #9
 8007166:	dd01      	ble.n	800716c <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8007168:	2300      	movs	r3, #0
 800716a:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <nameCommand+0x80>)
 800716e:	7818      	ldrb	r0, [r3, #0]
 8007170:	f7fd f9f6 	bl	8004560 <NameModule>
	if(result == BOS_OK)
 8007174:	2800      	cmp	r0, #0
 8007176:	d007      	beq.n	8007188 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8007178:	2806      	cmp	r0, #6
 800717a:	d00e      	beq.n	800719a <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 800717c:	2807      	cmp	r0, #7
 800717e:	d013      	beq.n	80071a8 <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8007180:	2808      	cmp	r0, #8
 8007182:	d018      	beq.n	80071b6 <nameCommand+0x6a>
}
 8007184:	2000      	movs	r0, #0
 8007186:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <nameCommand+0x7c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a0f      	ldr	r2, [pc, #60]	; (80071cc <nameCommand+0x80>)
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	490f      	ldr	r1, [pc, #60]	; (80071d0 <nameCommand+0x84>)
 8007192:	0020      	movs	r0, r4
 8007194:	f00d faf6 	bl	8014784 <siprintf>
 8007198:	e7f4      	b.n	8007184 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800719a:	4b0b      	ldr	r3, [pc, #44]	; (80071c8 <nameCommand+0x7c>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	490d      	ldr	r1, [pc, #52]	; (80071d4 <nameCommand+0x88>)
 80071a0:	0020      	movs	r0, r4
 80071a2:	f00d faef 	bl	8014784 <siprintf>
 80071a6:	e7ed      	b.n	8007184 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 80071a8:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <nameCommand+0x7c>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	490a      	ldr	r1, [pc, #40]	; (80071d8 <nameCommand+0x8c>)
 80071ae:	0020      	movs	r0, r4
 80071b0:	f00d fae8 	bl	8014784 <siprintf>
 80071b4:	e7e6      	b.n	8007184 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 80071b6:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <nameCommand+0x7c>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4908      	ldr	r1, [pc, #32]	; (80071dc <nameCommand+0x90>)
 80071bc:	0020      	movs	r0, r4
 80071be:	f00d fae1 	bl	8014784 <siprintf>
 80071c2:	e7df      	b.n	8007184 <nameCommand+0x38>
 80071c4:	20000a38 	.word	0x20000a38
 80071c8:	20000a08 	.word	0x20000a08
 80071cc:	2000080e 	.word	0x2000080e
 80071d0:	08019ea8 	.word	0x08019ea8
 80071d4:	08019dd0 	.word	0x08019dd0
 80071d8:	08019e10 	.word	0x08019e10
 80071dc:	08019e44 	.word	0x08019e44

080071e0 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b085      	sub	sp, #20
 80071e4:	9003      	str	r0, [sp, #12]
 80071e6:	0014      	movs	r4, r2
 80071e8:	2600      	movs	r6, #0
 80071ea:	2700      	movs	r7, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80071ec:	4a4a      	ldr	r2, [pc, #296]	; (8007318 <bootloaderUpdateCommand+0x138>)
 80071ee:	2101      	movs	r1, #1
 80071f0:	0020      	movs	r0, r4
 80071f2:	f007 fc4d 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d044      	beq.n	8007284 <bootloaderUpdateCommand+0xa4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <bootloaderUpdateCommand+0x138>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	4947      	ldr	r1, [pc, #284]	; (800731c <bootloaderUpdateCommand+0x13c>)
 8007200:	f00d fb03 	bl	801480a <strncmp>
 8007204:	2800      	cmp	r0, #0
 8007206:	d135      	bne.n	8007274 <bootloaderUpdateCommand+0x94>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007208:	4a45      	ldr	r2, [pc, #276]	; (8007320 <bootloaderUpdateCommand+0x140>)
 800720a:	2102      	movs	r1, #2
 800720c:	0020      	movs	r0, r4
 800720e:	f007 fc3f 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8007212:	4d44      	ldr	r5, [pc, #272]	; (8007324 <bootloaderUpdateCommand+0x144>)
 8007214:	6028      	str	r0, [r5, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007216:	4a44      	ldr	r2, [pc, #272]	; (8007328 <bootloaderUpdateCommand+0x148>)
 8007218:	2103      	movs	r1, #3
 800721a:	0020      	movs	r0, r4
 800721c:	f007 fc38 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 8007220:	4b42      	ldr	r3, [pc, #264]	; (800732c <bootloaderUpdateCommand+0x14c>)
 8007222:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007224:	6828      	ldr	r0, [r5, #0]
 8007226:	2300      	movs	r3, #0
 8007228:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 800722a:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 800722c:	2b23      	cmp	r3, #35	; 0x23
 800722e:	d054      	beq.n	80072da <bootloaderUpdateCommand+0xfa>
			if(pcParameterString3[0] == 'p'){
 8007230:	4b3e      	ldr	r3, [pc, #248]	; (800732c <bootloaderUpdateCommand+0x14c>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	56c3      	ldrsb	r3, [r0, r3]
 8007238:	2b70      	cmp	r3, #112	; 0x70
 800723a:	d054      	beq.n	80072e6 <bootloaderUpdateCommand+0x106>
				result =BOS_ERR_WrongValue;
 800723c:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 800723e:	4b3c      	ldr	r3, [pc, #240]	; (8007330 <bootloaderUpdateCommand+0x150>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	42b3      	cmp	r3, r6
 8007244:	d054      	beq.n	80072f0 <bootloaderUpdateCommand+0x110>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007246:	4b3b      	ldr	r3, [pc, #236]	; (8007334 <bootloaderUpdateCommand+0x154>)
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 800724c:	4b3a      	ldr	r3, [pc, #232]	; (8007338 <bootloaderUpdateCommand+0x158>)
 800724e:	701f      	strb	r7, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007250:	3201      	adds	r2, #1
 8007252:	211a      	movs	r1, #26
 8007254:	0030      	movs	r0, r6
 8007256:	f001 f895 	bl	8008384 <SendMessageToModule>
				osDelay(100);
 800725a:	2064      	movs	r0, #100	; 0x64
 800725c:	f007 faf5 	bl	800e84a <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8007260:	4b36      	ldr	r3, [pc, #216]	; (800733c <bootloaderUpdateCommand+0x15c>)
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	4b32      	ldr	r3, [pc, #200]	; (8007330 <bootloaderUpdateCommand+0x150>)
 8007266:	7818      	ldrb	r0, [r3, #0]
 8007268:	003b      	movs	r3, r7
 800726a:	0031      	movs	r1, r6
 800726c:	f003 f9b8 	bl	800a5e0 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007270:	2c68      	cmp	r4, #104	; 0x68
 8007272:	d104      	bne.n	800727e <bootloaderUpdateCommand+0x9e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007274:	220f      	movs	r2, #15
 8007276:	4932      	ldr	r1, [pc, #200]	; (8007340 <bootloaderUpdateCommand+0x160>)
 8007278:	9803      	ldr	r0, [sp, #12]
 800727a:	f00c fcc1 	bl	8013c00 <memcpy>
}
 800727e:	2000      	movs	r0, #0
 8007280:	b005      	add	sp, #20
 8007282:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007284:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <bootloaderUpdateCommand+0x150>)
 8007286:	781a      	ldrb	r2, [r3, #0]
 8007288:	492e      	ldr	r1, [pc, #184]	; (8007344 <bootloaderUpdateCommand+0x164>)
 800728a:	9c03      	ldr	r4, [sp, #12]
 800728c:	0020      	movs	r0, r4
 800728e:	f00d fa79 	bl	8014784 <siprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007292:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <bootloaderUpdateCommand+0x168>)
 8007294:	6819      	ldr	r1, [r3, #0]
 8007296:	0020      	movs	r0, r4
 8007298:	f00d fa94 	bl	80147c4 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800729c:	0020      	movs	r0, r4
 800729e:	f7f8 ff3b 	bl	8000118 <strlen>
 80072a2:	b282      	uxth	r2, r0
 80072a4:	4b25      	ldr	r3, [pc, #148]	; (800733c <bootloaderUpdateCommand+0x15c>)
 80072a6:	7818      	ldrb	r0, [r3, #0]
 80072a8:	2301      	movs	r3, #1
 80072aa:	425b      	negs	r3, r3
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	3333      	adds	r3, #51	; 0x33
 80072b0:	0021      	movs	r1, r4
 80072b2:	f007 f923 	bl	800e4fc <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80072b6:	4b25      	ldr	r3, [pc, #148]	; (800734c <bootloaderUpdateCommand+0x16c>)
 80072b8:	4a25      	ldr	r2, [pc, #148]	; (8007350 <bootloaderUpdateCommand+0x170>)
 80072ba:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <bootloaderUpdateCommand+0x174>)
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80072c2:	200a      	movs	r0, #10
 80072c4:	f007 fac1 	bl	800e84a <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	4b22      	ldr	r3, [pc, #136]	; (8007358 <bootloaderUpdateCommand+0x178>)
 80072ce:	4a23      	ldr	r2, [pc, #140]	; (800735c <bootloaderUpdateCommand+0x17c>)
 80072d0:	60da      	str	r2, [r3, #12]
 80072d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	e7fd      	b.n	80072d6 <bootloaderUpdateCommand+0xf6>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80072da:	3001      	adds	r0, #1
 80072dc:	f00c fc43 	bl	8013b66 <atol>
 80072e0:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 80072e2:	2400      	movs	r4, #0
 80072e4:	e7a4      	b.n	8007230 <bootloaderUpdateCommand+0x50>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 80072e6:	3001      	adds	r0, #1
 80072e8:	f00c fc3d 	bl	8013b66 <atol>
 80072ec:	b2c7      	uxtb	r7, r0
 80072ee:	e7a6      	b.n	800723e <bootloaderUpdateCommand+0x5e>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80072f0:	2300      	movs	r3, #0
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	3319      	adds	r3, #25
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	0038      	movs	r0, r7
 80072fc:	f000 fdbe 	bl	8007e7c <SendMessageFromPort>
				osDelay(100);
 8007300:	2064      	movs	r0, #100	; 0x64
 8007302:	f007 faa2 	bl	800e84a <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007306:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <bootloaderUpdateCommand+0x150>)
 8007308:	7818      	ldrb	r0, [r3, #0]
 800730a:	4b0c      	ldr	r3, [pc, #48]	; (800733c <bootloaderUpdateCommand+0x15c>)
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	003b      	movs	r3, r7
 8007310:	0001      	movs	r1, r0
 8007312:	f003 f965 	bl	800a5e0 <remoteBootloaderUpdate>
 8007316:	e7ab      	b.n	8007270 <bootloaderUpdateCommand+0x90>
 8007318:	20000a34 	.word	0x20000a34
 800731c:	08019ee0 	.word	0x08019ee0
 8007320:	20000a40 	.word	0x20000a40
 8007324:	20000a18 	.word	0x20000a18
 8007328:	20000a44 	.word	0x20000a44
 800732c:	20000a20 	.word	0x20000a20
 8007330:	2000080e 	.word	0x2000080e
 8007334:	200061f8 	.word	0x200061f8
 8007338:	200006d0 	.word	0x200006d0
 800733c:	200002b8 	.word	0x200002b8
 8007340:	0801995c 	.word	0x0801995c
 8007344:	08019ec0 	.word	0x08019ec0
 8007348:	20000068 	.word	0x20000068
 800734c:	20007ff0 	.word	0x20007ff0
 8007350:	deadbeef 	.word	0xdeadbeef
 8007354:	20000690 	.word	0x20000690
 8007358:	e000ed00 	.word	0xe000ed00
 800735c:	05fa0004 	.word	0x05fa0004

08007360 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007360:	b570      	push	{r4, r5, r6, lr}
	if(!moduleAlias[myID][0])
 8007362:	4b14      	ldr	r3, [pc, #80]	; (80073b4 <pingCommand+0x54>)
 8007364:	781a      	ldrb	r2, [r3, #0]
 8007366:	0093      	lsls	r3, r2, #2
 8007368:	189b      	adds	r3, r3, r2
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	4912      	ldr	r1, [pc, #72]	; (80073b8 <pingCommand+0x58>)
 800736e:	5c5b      	ldrb	r3, [r3, r1]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d115      	bne.n	80073a0 <pingCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8007374:	4911      	ldr	r1, [pc, #68]	; (80073bc <pingCommand+0x5c>)
 8007376:	f00d fa05 	bl	8014784 <siprintf>
	RTOS_IND_blink(200);
 800737a:	2580      	movs	r5, #128	; 0x80
 800737c:	012d      	lsls	r5, r5, #4
 800737e:	2490      	movs	r4, #144	; 0x90
 8007380:	05e4      	lsls	r4, r4, #23
 8007382:	2201      	movs	r2, #1
 8007384:	0029      	movs	r1, r5
 8007386:	0020      	movs	r0, r4
 8007388:	f00a fe5c 	bl	8012044 <HAL_GPIO_WritePin>
 800738c:	20c8      	movs	r0, #200	; 0xc8
 800738e:	f007 fa5c 	bl	800e84a <osDelay>
 8007392:	2200      	movs	r2, #0
 8007394:	0029      	movs	r1, r5
 8007396:	0020      	movs	r0, r4
 8007398:	f00a fe54 	bl	8012044 <HAL_GPIO_WritePin>
}
 800739c:	2000      	movs	r0, #0
 800739e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 80073a0:	0093      	lsls	r3, r2, #2
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4904      	ldr	r1, [pc, #16]	; (80073b8 <pingCommand+0x58>)
 80073a8:	185b      	adds	r3, r3, r1
 80073aa:	4905      	ldr	r1, [pc, #20]	; (80073c0 <pingCommand+0x60>)
 80073ac:	f00d f9ea 	bl	8014784 <siprintf>
 80073b0:	e7e3      	b.n	800737a <pingCommand+0x1a>
 80073b2:	46c0      	nop			; (mov r8, r8)
 80073b4:	2000080e 	.word	0x2000080e
 80073b8:	20000700 	.word	0x20000700
 80073bc:	08019ee4 	.word	0x08019ee4
 80073c0:	08019ef8 	.word	0x08019ef8

080073c4 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073c4:	b510      	push	{r4, lr}
 80073c6:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80073c8:	2241      	movs	r2, #65	; 0x41
 80073ca:	4904      	ldr	r1, [pc, #16]	; (80073dc <prvRunTimeStatsCommand+0x18>)
 80073cc:	f00c fc18 	bl	8013c00 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80073d0:	0020      	movs	r0, r4
 80073d2:	3040      	adds	r0, #64	; 0x40
 80073d4:	f008 fd24 	bl	800fe20 <vTaskGetRunTimeStats>
}
 80073d8:	2000      	movs	r0, #0
 80073da:	bd10      	pop	{r4, pc}
 80073dc:	08019f14 	.word	0x08019f14

080073e0 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80073e0:	b510      	push	{r4, lr}
 80073e2:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80073e4:	2250      	movs	r2, #80	; 0x50
 80073e6:	4904      	ldr	r1, [pc, #16]	; (80073f8 <prvTaskStatsCommand+0x18>)
 80073e8:	f00c fc0a 	bl	8013c00 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80073ec:	0020      	movs	r0, r4
 80073ee:	304f      	adds	r0, #79	; 0x4f
 80073f0:	f008 fca8 	bl	800fd44 <vTaskList>
}
 80073f4:	2000      	movs	r0, #0
 80073f6:	bd10      	pop	{r4, pc}
 80073f8:	08019f58 	.word	0x08019f58

080073fc <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	4b03      	ldr	r3, [pc, #12]	; (8007410 <resetCommand+0x14>)
 8007402:	4a04      	ldr	r2, [pc, #16]	; (8007414 <resetCommand+0x18>)
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	e7fd      	b.n	800740a <resetCommand+0xe>
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	e000ed00 	.word	0xe000ed00
 8007414:	05fa0004 	.word	0x05fa0004

08007418 <RegisterUserCLICommands>:
}
 8007418:	4770      	bx	lr
	...

0800741c <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 800741c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800741e:	4835      	ldr	r0, [pc, #212]	; (80074f4 <vRegisterCLICommands+0xd8>)
 8007420:	f007 fa90 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007424:	4834      	ldr	r0, [pc, #208]	; (80074f8 <vRegisterCLICommands+0xdc>)
 8007426:	f007 fa8d 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800742a:	4834      	ldr	r0, [pc, #208]	; (80074fc <vRegisterCLICommands+0xe0>)
 800742c:	f007 fa8a 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007430:	4833      	ldr	r0, [pc, #204]	; (8007500 <vRegisterCLICommands+0xe4>)
 8007432:	f007 fa87 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007436:	4833      	ldr	r0, [pc, #204]	; (8007504 <vRegisterCLICommands+0xe8>)
 8007438:	f007 fa84 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800743c:	4832      	ldr	r0, [pc, #200]	; (8007508 <vRegisterCLICommands+0xec>)
 800743e:	f007 fa81 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007442:	4832      	ldr	r0, [pc, #200]	; (800750c <vRegisterCLICommands+0xf0>)
 8007444:	f007 fa7e 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007448:	4831      	ldr	r0, [pc, #196]	; (8007510 <vRegisterCLICommands+0xf4>)
 800744a:	f007 fa7b 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800744e:	4831      	ldr	r0, [pc, #196]	; (8007514 <vRegisterCLICommands+0xf8>)
 8007450:	f007 fa78 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007454:	4830      	ldr	r0, [pc, #192]	; (8007518 <vRegisterCLICommands+0xfc>)
 8007456:	f007 fa75 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800745a:	4830      	ldr	r0, [pc, #192]	; (800751c <vRegisterCLICommands+0x100>)
 800745c:	f007 fa72 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007460:	482f      	ldr	r0, [pc, #188]	; (8007520 <vRegisterCLICommands+0x104>)
 8007462:	f007 fa6f 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007466:	482f      	ldr	r0, [pc, #188]	; (8007524 <vRegisterCLICommands+0x108>)
 8007468:	f007 fa6c 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800746c:	482e      	ldr	r0, [pc, #184]	; (8007528 <vRegisterCLICommands+0x10c>)
 800746e:	f007 fa69 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007472:	482e      	ldr	r0, [pc, #184]	; (800752c <vRegisterCLICommands+0x110>)
 8007474:	f007 fa66 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007478:	482d      	ldr	r0, [pc, #180]	; (8007530 <vRegisterCLICommands+0x114>)
 800747a:	f007 fa63 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800747e:	482d      	ldr	r0, [pc, #180]	; (8007534 <vRegisterCLICommands+0x118>)
 8007480:	f007 fa60 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007484:	482c      	ldr	r0, [pc, #176]	; (8007538 <vRegisterCLICommands+0x11c>)
 8007486:	f007 fa5d 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800748a:	482c      	ldr	r0, [pc, #176]	; (800753c <vRegisterCLICommands+0x120>)
 800748c:	f007 fa5a 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007490:	482b      	ldr	r0, [pc, #172]	; (8007540 <vRegisterCLICommands+0x124>)
 8007492:	f007 fa57 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007496:	482b      	ldr	r0, [pc, #172]	; (8007544 <vRegisterCLICommands+0x128>)
 8007498:	f007 fa54 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800749c:	482a      	ldr	r0, [pc, #168]	; (8007548 <vRegisterCLICommands+0x12c>)
 800749e:	f007 fa51 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80074a2:	482a      	ldr	r0, [pc, #168]	; (800754c <vRegisterCLICommands+0x130>)
 80074a4:	f007 fa4e 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80074a8:	4829      	ldr	r0, [pc, #164]	; (8007550 <vRegisterCLICommands+0x134>)
 80074aa:	f007 fa4b 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80074ae:	4829      	ldr	r0, [pc, #164]	; (8007554 <vRegisterCLICommands+0x138>)
 80074b0:	f007 fa48 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80074b4:	4828      	ldr	r0, [pc, #160]	; (8007558 <vRegisterCLICommands+0x13c>)
 80074b6:	f007 fa45 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80074ba:	4828      	ldr	r0, [pc, #160]	; (800755c <vRegisterCLICommands+0x140>)
 80074bc:	f007 fa42 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80074c0:	4827      	ldr	r0, [pc, #156]	; (8007560 <vRegisterCLICommands+0x144>)
 80074c2:	f007 fa3f 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80074c6:	4827      	ldr	r0, [pc, #156]	; (8007564 <vRegisterCLICommands+0x148>)
 80074c8:	f007 fa3c 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80074cc:	4826      	ldr	r0, [pc, #152]	; (8007568 <vRegisterCLICommands+0x14c>)
 80074ce:	f007 fa39 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80074d2:	4826      	ldr	r0, [pc, #152]	; (800756c <vRegisterCLICommands+0x150>)
 80074d4:	f007 fa36 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80074d8:	4825      	ldr	r0, [pc, #148]	; (8007570 <vRegisterCLICommands+0x154>)
 80074da:	f007 fa33 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80074de:	4825      	ldr	r0, [pc, #148]	; (8007574 <vRegisterCLICommands+0x158>)
 80074e0:	f007 fa30 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80074e4:	4b24      	ldr	r3, [pc, #144]	; (8007578 <vRegisterCLICommands+0x15c>)
 80074e6:	2223      	movs	r2, #35	; 0x23
 80074e8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80074ea:	f003 f907 	bl	800a6fc <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80074ee:	f7ff ff93 	bl	8007418 <RegisterUserCLICommands>
}
 80074f2:	bd10      	pop	{r4, pc}
 80074f4:	0801ad88 	.word	0x0801ad88
 80074f8:	0801ad78 	.word	0x0801ad78
 80074fc:	0801ad68 	.word	0x0801ad68
 8007500:	0801ac84 	.word	0x0801ac84
 8007504:	0801acd4 	.word	0x0801acd4
 8007508:	0801ada8 	.word	0x0801ada8
 800750c:	0801ad48 	.word	0x0801ad48
 8007510:	0801ad04 	.word	0x0801ad04
 8007514:	0801adf8 	.word	0x0801adf8
 8007518:	0801ad24 	.word	0x0801ad24
 800751c:	0801adb8 	.word	0x0801adb8
 8007520:	0801ac74 	.word	0x0801ac74
 8007524:	0801ad98 	.word	0x0801ad98
 8007528:	0801add8 	.word	0x0801add8
 800752c:	0801acf4 	.word	0x0801acf4
 8007530:	0801acb4 	.word	0x0801acb4
 8007534:	0801ae18 	.word	0x0801ae18
 8007538:	0801aca4 	.word	0x0801aca4
 800753c:	0801adc8 	.word	0x0801adc8
 8007540:	0801ae38 	.word	0x0801ae38
 8007544:	0801ad14 	.word	0x0801ad14
 8007548:	0801ace4 	.word	0x0801ace4
 800754c:	0801ade8 	.word	0x0801ade8
 8007550:	0801ac64 	.word	0x0801ac64
 8007554:	0801ad58 	.word	0x0801ad58
 8007558:	0801acc4 	.word	0x0801acc4
 800755c:	0801ac94 	.word	0x0801ac94
 8007560:	0801ae28 	.word	0x0801ae28
 8007564:	0801ae08 	.word	0x0801ae08
 8007568:	0801ac24 	.word	0x0801ac24
 800756c:	0801ac44 	.word	0x0801ac44
 8007570:	0801ac54 	.word	0x0801ac54
 8007574:	0801ac34 	.word	0x0801ac34
 8007578:	200061f4 	.word	0x200061f4

0800757c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	0005      	movs	r5, r0
 8007580:	000e      	movs	r6, r1
 8007582:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007584:	f003 f8d6 	bl	800a734 <GetPort>
 8007588:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <StartDMAstream+0x44>)
 800758c:	5c1b      	ldrb	r3, [r3, r0]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d902      	bls.n	8007598 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007592:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007594:	2b03      	cmp	r3, #3
 8007596:	d112      	bne.n	80075be <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8007598:	0020      	movs	r0, r4
 800759a:	f003 fecf 	bl	800b33c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 800759e:	1e63      	subs	r3, r4, #1
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4a08      	ldr	r2, [pc, #32]	; (80075c4 <StartDMAstream+0x48>)
 80075a4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80075a6:	4a06      	ldr	r2, [pc, #24]	; (80075c0 <StartDMAstream+0x44>)
 80075a8:	2102      	movs	r1, #2
 80075aa:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80075ac:	4a06      	ldr	r2, [pc, #24]	; (80075c8 <StartDMAstream+0x4c>)
 80075ae:	2100      	movs	r1, #0
 80075b0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80075b2:	003a      	movs	r2, r7
 80075b4:	0031      	movs	r1, r6
 80075b6:	0028      	movs	r0, r5
 80075b8:	f004 fb3a 	bl	800bc30 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80075bc:	2000      	movs	r0, #0
}
 80075be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c0:	20000878 	.word	0x20000878
 80075c4:	20000cd4 	.word	0x20000cd4
 80075c8:	20000cc8 	.word	0x20000cc8

080075cc <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80075d0:	4b12      	ldr	r3, [pc, #72]	; (800761c <DMA_IRQHandler+0x50>)
 80075d2:	5c1b      	ldrb	r3, [r3, r0]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d008      	beq.n	80075ea <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80075d8:	3c01      	subs	r4, #1
 80075da:	00e0      	lsls	r0, r4, #3
 80075dc:	1b00      	subs	r0, r0, r4
 80075de:	00c0      	lsls	r0, r0, #3
 80075e0:	4c0f      	ldr	r4, [pc, #60]	; (8007620 <DMA_IRQHandler+0x54>)
 80075e2:	1900      	adds	r0, r0, r4
 80075e4:	f009 fe02 	bl	80111ec <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80075ea:	1e45      	subs	r5, r0, #1
 80075ec:	00e8      	lsls	r0, r5, #3
 80075ee:	1b40      	subs	r0, r0, r5
 80075f0:	00c0      	lsls	r0, r0, #3
 80075f2:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <DMA_IRQHandler+0x58>)
 80075f4:	18c0      	adds	r0, r0, r3
 80075f6:	f009 fdf9 	bl	80111ec <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80075fa:	00aa      	lsls	r2, r5, #2
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <DMA_IRQHandler+0x5c>)
 80075fe:	58d2      	ldr	r2, [r2, r3]
 8007600:	2a00      	cmp	r2, #0
 8007602:	d006      	beq.n	8007612 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007604:	4909      	ldr	r1, [pc, #36]	; (800762c <DMA_IRQHandler+0x60>)
 8007606:	00ad      	lsls	r5, r5, #2
 8007608:	586b      	ldr	r3, [r5, r1]
 800760a:	3301      	adds	r3, #1
 800760c:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800760e:	429a      	cmp	r2, r3
 8007610:	d8ea      	bhi.n	80075e8 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007612:	0020      	movs	r0, r4
 8007614:	f003 fe66 	bl	800b2e4 <StopStreamDMA>
}
 8007618:	e7e6      	b.n	80075e8 <DMA_IRQHandler+0x1c>
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	20000878 	.word	0x20000878
 8007620:	20000ffc 	.word	0x20000ffc
 8007624:	200011f4 	.word	0x200011f4
 8007628:	20000ce0 	.word	0x20000ce0
 800762c:	20000cc8 	.word	0x20000cc8

08007630 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <ResetUartORE+0x24>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	2308      	movs	r3, #8
 8007636:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007638:	4a07      	ldr	r2, [pc, #28]	; (8007658 <ResetUartORE+0x28>)
 800763a:	6812      	ldr	r2, [r2, #0]
 800763c:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800763e:	4a07      	ldr	r2, [pc, #28]	; (800765c <ResetUartORE+0x2c>)
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007644:	4a06      	ldr	r2, [pc, #24]	; (8007660 <ResetUartORE+0x30>)
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800764a:	4a06      	ldr	r2, [pc, #24]	; (8007664 <ResetUartORE+0x34>)
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	6213      	str	r3, [r2, #32]
#endif
}
 8007650:	4770      	bx	lr
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	20006414 	.word	0x20006414
 8007658:	20006584 	.word	0x20006584
 800765c:	20006364 	.word	0x20006364
 8007660:	20006510 	.word	0x20006510
 8007664:	20006498 	.word	0x20006498

08007668 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b08b      	sub	sp, #44	; 0x2c
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 800766c:	25a0      	movs	r5, #160	; 0xa0
 800766e:	006d      	lsls	r5, r5, #1
 8007670:	2400      	movs	r4, #0
 8007672:	9403      	str	r4, [sp, #12]
 8007674:	9402      	str	r4, [sp, #8]
 8007676:	4b3c      	ldr	r3, [pc, #240]	; (8007768 <MX_FREERTOS_Init+0x100>)
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	2603      	movs	r6, #3
 800767c:	9600      	str	r6, [sp, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	002a      	movs	r2, r5
 8007682:	493a      	ldr	r1, [pc, #232]	; (800776c <MX_FREERTOS_Init+0x104>)
 8007684:	483a      	ldr	r0, [pc, #232]	; (8007770 <MX_FREERTOS_Init+0x108>)
 8007686:	f007 fe71 	bl	800f36c <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 800768a:	9403      	str	r4, [sp, #12]
 800768c:	9402      	str	r4, [sp, #8]
 800768e:	4b39      	ldr	r3, [pc, #228]	; (8007774 <MX_FREERTOS_Init+0x10c>)
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	9600      	str	r6, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	002a      	movs	r2, r5
 8007698:	4937      	ldr	r1, [pc, #220]	; (8007778 <MX_FREERTOS_Init+0x110>)
 800769a:	4838      	ldr	r0, [pc, #224]	; (800777c <MX_FREERTOS_Init+0x114>)
 800769c:	f007 fe66 	bl	800f36c <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80076a0:	9403      	str	r4, [sp, #12]
 80076a2:	9402      	str	r4, [sp, #8]
 80076a4:	4b36      	ldr	r3, [pc, #216]	; (8007780 <MX_FREERTOS_Init+0x118>)
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	9600      	str	r6, [sp, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	002a      	movs	r2, r5
 80076ae:	4935      	ldr	r1, [pc, #212]	; (8007784 <MX_FREERTOS_Init+0x11c>)
 80076b0:	4835      	ldr	r0, [pc, #212]	; (8007788 <MX_FREERTOS_Init+0x120>)
 80076b2:	f007 fe5b 	bl	800f36c <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 80076b6:	f7ff feb1 	bl	800741c <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80076ba:	9403      	str	r4, [sp, #12]
 80076bc:	9402      	str	r4, [sp, #8]
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <MX_FREERTOS_Init+0x124>)
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	9600      	str	r6, [sp, #0]
 80076c4:	2300      	movs	r3, #0
 80076c6:	002a      	movs	r2, r5
 80076c8:	4931      	ldr	r1, [pc, #196]	; (8007790 <MX_FREERTOS_Init+0x128>)
 80076ca:	4832      	ldr	r0, [pc, #200]	; (8007794 <MX_FREERTOS_Init+0x12c>)
 80076cc:	f007 fe4e 	bl	800f36c <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80076d0:	4e31      	ldr	r6, [pc, #196]	; (8007798 <MX_FREERTOS_Init+0x130>)
 80076d2:	9403      	str	r4, [sp, #12]
 80076d4:	9402      	str	r4, [sp, #8]
 80076d6:	4b31      	ldr	r3, [pc, #196]	; (800779c <MX_FREERTOS_Init+0x134>)
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	2704      	movs	r7, #4
 80076dc:	9700      	str	r7, [sp, #0]
 80076de:	2301      	movs	r3, #1
 80076e0:	002a      	movs	r2, r5
 80076e2:	492f      	ldr	r1, [pc, #188]	; (80077a0 <MX_FREERTOS_Init+0x138>)
 80076e4:	0030      	movs	r0, r6
 80076e6:	f007 fe41 	bl	800f36c <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80076ea:	9403      	str	r4, [sp, #12]
 80076ec:	9402      	str	r4, [sp, #8]
 80076ee:	4b2d      	ldr	r3, [pc, #180]	; (80077a4 <MX_FREERTOS_Init+0x13c>)
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	9700      	str	r7, [sp, #0]
 80076f4:	2302      	movs	r3, #2
 80076f6:	002a      	movs	r2, r5
 80076f8:	492b      	ldr	r1, [pc, #172]	; (80077a8 <MX_FREERTOS_Init+0x140>)
 80076fa:	0030      	movs	r0, r6
 80076fc:	f007 fe36 	bl	800f36c <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007700:	9403      	str	r4, [sp, #12]
 8007702:	9402      	str	r4, [sp, #8]
 8007704:	4b29      	ldr	r3, [pc, #164]	; (80077ac <MX_FREERTOS_Init+0x144>)
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	9700      	str	r7, [sp, #0]
 800770a:	2303      	movs	r3, #3
 800770c:	002a      	movs	r2, r5
 800770e:	4928      	ldr	r1, [pc, #160]	; (80077b0 <MX_FREERTOS_Init+0x148>)
 8007710:	0030      	movs	r0, r6
 8007712:	f007 fe2b 	bl	800f36c <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007716:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007718:	2101      	movs	r1, #1
 800771a:	a809      	add	r0, sp, #36	; 0x24
 800771c:	f007 f89d 	bl	800e85a <osSemaphoreCreate>
 8007720:	4e24      	ldr	r6, [pc, #144]	; (80077b4 <MX_FREERTOS_Init+0x14c>)
 8007722:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007724:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007726:	2101      	movs	r1, #1
 8007728:	a808      	add	r0, sp, #32
 800772a:	f007 f896 	bl	800e85a <osSemaphoreCreate>
 800772e:	4d22      	ldr	r5, [pc, #136]	; (80077b8 <MX_FREERTOS_Init+0x150>)
 8007730:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007732:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007734:	2101      	movs	r1, #1
 8007736:	a807      	add	r0, sp, #28
 8007738:	f007 f88f 	bl	800e85a <osSemaphoreCreate>
 800773c:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 800773e:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007740:	2101      	movs	r1, #1
 8007742:	a806      	add	r0, sp, #24
 8007744:	f007 f889 	bl	800e85a <osSemaphoreCreate>
 8007748:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 800774a:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800774c:	2101      	movs	r1, #1
 800774e:	a805      	add	r0, sp, #20
 8007750:	f007 f883 	bl	800e85a <osSemaphoreCreate>
 8007754:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007756:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007758:	2101      	movs	r1, #1
 800775a:	a804      	add	r0, sp, #16
 800775c:	f007 f87d 	bl	800e85a <osSemaphoreCreate>
 8007760:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007762:	b00b      	add	sp, #44	; 0x2c
 8007764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	20000d14 	.word	0x20000d14
 800776c:	0801ae48 	.word	0x0801ae48
 8007770:	08007b39 	.word	0x08007b39
 8007774:	20000cec 	.word	0x20000cec
 8007778:	0801ae54 	.word	0x0801ae54
 800777c:	08008579 	.word	0x08008579
 8007780:	20000d10 	.word	0x20000d10
 8007784:	0801ae60 	.word	0x0801ae60
 8007788:	08013b4f 	.word	0x08013b4f
 800778c:	20000de8 	.word	0x20000de8
 8007790:	0801ae6c 	.word	0x0801ae6c
 8007794:	080051d9 	.word	0x080051d9
 8007798:	08008999 	.word	0x08008999
 800779c:	20000cf0 	.word	0x20000cf0
 80077a0:	0801ae74 	.word	0x0801ae74
 80077a4:	20000cf4 	.word	0x20000cf4
 80077a8:	0801ae80 	.word	0x0801ae80
 80077ac:	20000cf8 	.word	0x20000cf8
 80077b0:	0801ae8c 	.word	0x0801ae8c
 80077b4:	2000631c 	.word	0x2000631c
 80077b8:	200062fc 	.word	0x200062fc

080077bc <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 80077bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077be:	46de      	mov	lr, fp
 80077c0:	4657      	mov	r7, sl
 80077c2:	464e      	mov	r6, r9
 80077c4:	4645      	mov	r5, r8
 80077c6:	b5e0      	push	{r5, r6, r7, lr}
 80077c8:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80077ca:	4bca      	ldr	r3, [pc, #808]	; (8007af4 <ExecuteMonitor+0x338>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d006      	beq.n	80077e0 <ExecuteMonitor+0x24>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 80077d2:	b003      	add	sp, #12
 80077d4:	bcf0      	pop	{r4, r5, r6, r7}
 80077d6:	46bb      	mov	fp, r7
 80077d8:	46b2      	mov	sl, r6
 80077da:	46a9      	mov	r9, r5
 80077dc:	46a0      	mov	r8, r4
 80077de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Monitor_time =0;
 80077e0:	4bc4      	ldr	r3, [pc, #784]	; (8007af4 <ExecuteMonitor+0x338>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
	flag=0;
 80077e6:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 80077e8:	3220      	adds	r2, #32
 80077ea:	715a      	strb	r2, [r3, #5]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80077ec:	4bc2      	ldr	r3, [pc, #776]	; (8007af8 <ExecuteMonitor+0x33c>)
 80077ee:	3301      	adds	r3, #1
 80077f0:	469b      	mov	fp, r3
 80077f2:	4bc2      	ldr	r3, [pc, #776]	; (8007afc <ExecuteMonitor+0x340>)
 80077f4:	3304      	adds	r3, #4
 80077f6:	9301      	str	r3, [sp, #4]
 80077f8:	e176      	b.n	8007ae8 <ExecuteMonitor+0x32c>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80077fa:	49c1      	ldr	r1, [pc, #772]	; (8007b00 <ExecuteMonitor+0x344>)
 80077fc:	780a      	ldrb	r2, [r1, #0]
 80077fe:	1c50      	adds	r0, r2, #1
 8007800:	7008      	strb	r0, [r1, #0]
 8007802:	49be      	ldr	r1, [pc, #760]	; (8007afc <ExecuteMonitor+0x340>)
 8007804:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 8007806:	4abf      	ldr	r2, [pc, #764]	; (8007b04 <ExecuteMonitor+0x348>)
 8007808:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 800780a:	4bba      	ldr	r3, [pc, #744]	; (8007af4 <ExecuteMonitor+0x338>)
 800780c:	715f      	strb	r7, [r3, #5]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800780e:	4bbd      	ldr	r3, [pc, #756]	; (8007b04 <ExecuteMonitor+0x348>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2220      	movs	r2, #32
 8007814:	4393      	bics	r3, r2
 8007816:	d00e      	beq.n	8007836 <ExecuteMonitor+0x7a>
 8007818:	4bb6      	ldr	r3, [pc, #728]	; (8007af4 <ExecuteMonitor+0x338>)
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	1e5a      	subs	r2, r3, #1
 800781e:	2a01      	cmp	r2, #1
 8007820:	d800      	bhi.n	8007824 <ExecuteMonitor+0x68>
 8007822:	e0a0      	b.n	8007966 <ExecuteMonitor+0x1aa>
		            	    perviousCharacter= INTIAL_VALUE;
 8007824:	7035      	strb	r5, [r6, #0]
		            	    Delay_us(100);
 8007826:	2064      	movs	r0, #100	; 0x64
 8007828:	f006 fd0c 	bl	800e244 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 800782c:	7963      	ldrb	r3, [r4, #5]
 800782e:	7832      	ldrb	r2, [r6, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d1e2      	bne.n	80077fa <ExecuteMonitor+0x3e>
 8007834:	e7eb      	b.n	800780e <ExecuteMonitor+0x52>
                   if(flag == NonActive)
 8007836:	4baf      	ldr	r3, [pc, #700]	; (8007af4 <ExecuteMonitor+0x338>)
 8007838:	791b      	ldrb	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d000      	beq.n	8007840 <ExecuteMonitor+0x84>
 800783e:	e092      	b.n	8007966 <ExecuteMonitor+0x1aa>
                	   nonProcessingParameterIndex=0;
 8007840:	4baf      	ldr	r3, [pc, #700]	; (8007b00 <ExecuteMonitor+0x344>)
 8007842:	2200      	movs	r2, #0
 8007844:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8007846:	4bad      	ldr	r3, [pc, #692]	; (8007afc <ExecuteMonitor+0x340>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b5b      	cmp	r3, #91	; 0x5b
 800784c:	d020      	beq.n	8007890 <ExecuteMonitor+0xd4>
 		            else if(FirstCharacterInParameter == '#')
 800784e:	2b23      	cmp	r3, #35	; 0x23
 8007850:	d05b      	beq.n	800790a <ExecuteMonitor+0x14e>
 		            else if(FirstCharacterInParameter == '=')
 8007852:	2b3d      	cmp	r3, #61	; 0x3d
 8007854:	d069      	beq.n	800792a <ExecuteMonitor+0x16e>
               	   desiredArray=ParameterLocationIn2dArray;
 8007856:	4ca8      	ldr	r4, [pc, #672]	; (8007af8 <ExecuteMonitor+0x33c>)
 8007858:	7823      	ldrb	r3, [r4, #0]
 800785a:	4aab      	ldr	r2, [pc, #684]	; (8007b08 <ExecuteMonitor+0x34c>)
 800785c:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800785e:	0118      	lsls	r0, r3, #4
 8007860:	1ac3      	subs	r3, r0, r3
 8007862:	48aa      	ldr	r0, [pc, #680]	; (8007b0c <ExecuteMonitor+0x350>)
 8007864:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8007866:	220f      	movs	r2, #15
 8007868:	0021      	movs	r1, r4
 800786a:	f00c f9c9 	bl	8013c00 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800786e:	2214      	movs	r2, #20
 8007870:	2100      	movs	r1, #0
 8007872:	48a2      	ldr	r0, [pc, #648]	; (8007afc <ExecuteMonitor+0x340>)
 8007874:	f00c f9cd 	bl	8013c12 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007878:	2214      	movs	r2, #20
 800787a:	2100      	movs	r1, #0
 800787c:	0020      	movs	r0, r4
 800787e:	f00c f9c8 	bl	8013c12 <memset>
		                    nonProcessingParameterIndex=0;
 8007882:	464b      	mov	r3, r9
 8007884:	4642      	mov	r2, r8
 8007886:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 8007888:	2703      	movs	r7, #3
 800788a:	1c3d      	adds	r5, r7, #0
							if(currentCharacter != perviousCharacter)
 800788c:	4c99      	ldr	r4, [pc, #612]	; (8007af4 <ExecuteMonitor+0x338>)
 800788e:	e7c9      	b.n	8007824 <ExecuteMonitor+0x68>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007890:	4b9f      	ldr	r3, [pc, #636]	; (8007b10 <ExecuteMonitor+0x354>)
 8007892:	781f      	ldrb	r7, [r3, #0]
 8007894:	4b99      	ldr	r3, [pc, #612]	; (8007afc <ExecuteMonitor+0x340>)
 8007896:	7858      	ldrb	r0, [r3, #1]
 8007898:	210a      	movs	r1, #10
 800789a:	f7f8 fcdf 	bl	800025c <__aeabi_uidivmod>
 800789e:	b2c9      	uxtb	r1, r1
 80078a0:	2403      	movs	r4, #3
 80078a2:	42b9      	cmp	r1, r7
 80078a4:	d02e      	beq.n	8007904 <ExecuteMonitor+0x148>
 80078a6:	4d95      	ldr	r5, [pc, #596]	; (8007afc <ExecuteMonitor+0x340>)
 80078a8:	5d28      	ldrb	r0, [r5, r4]
 80078aa:	210a      	movs	r1, #10
 80078ac:	f7f8 fcd6 	bl	800025c <__aeabi_uidivmod>
 80078b0:	b2c9      	uxtb	r1, r1
 80078b2:	0023      	movs	r3, r4
 80078b4:	3402      	adds	r4, #2
 80078b6:	b2e4      	uxtb	r4, r4
 80078b8:	42b9      	cmp	r1, r7
 80078ba:	d1f5      	bne.n	80078a8 <ExecuteMonitor+0xec>
 80078bc:	001d      	movs	r5, r3
 		            			nonProcessingParameterIndex++;
 80078be:	1c6c      	adds	r4, r5, #1
 80078c0:	b2e4      	uxtb	r4, r4
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80078c2:	4b8e      	ldr	r3, [pc, #568]	; (8007afc <ExecuteMonitor+0x340>)
 80078c4:	5d1f      	ldrb	r7, [r3, r4]
 80078c6:	210a      	movs	r1, #10
 80078c8:	0038      	movs	r0, r7
 80078ca:	f7f8 fcc7 	bl	800025c <__aeabi_uidivmod>
 80078ce:	4b8a      	ldr	r3, [pc, #552]	; (8007af8 <ExecuteMonitor+0x33c>)
 80078d0:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80078d2:	2f5d      	cmp	r7, #93	; 0x5d
 80078d4:	d008      	beq.n	80078e8 <ExecuteMonitor+0x12c>
 80078d6:	3502      	adds	r5, #2
 80078d8:	b2eb      	uxtb	r3, r5
 80078da:	4988      	ldr	r1, [pc, #544]	; (8007afc <ExecuteMonitor+0x340>)
 80078dc:	5cca      	ldrb	r2, [r1, r3]
 80078de:	001c      	movs	r4, r3
 80078e0:	3301      	adds	r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2a5d      	cmp	r2, #93	; 0x5d
 80078e6:	d1f9      	bne.n	80078dc <ExecuteMonitor+0x120>
 		            	nonProcessingParameterIndex++;
 80078e8:	3401      	adds	r4, #1
 80078ea:	b2e1      	uxtb	r1, r4
 		            	processingParameterIndex=1;
 80078ec:	4b89      	ldr	r3, [pc, #548]	; (8007b14 <ExecuteMonitor+0x358>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80078f2:	4881      	ldr	r0, [pc, #516]	; (8007af8 <ExecuteMonitor+0x33c>)
 80078f4:	3213      	adds	r2, #19
 80078f6:	1a52      	subs	r2, r2, r1
 80078f8:	4c80      	ldr	r4, [pc, #512]	; (8007afc <ExecuteMonitor+0x340>)
 80078fa:	1861      	adds	r1, r4, r1
 80078fc:	3001      	adds	r0, #1
 80078fe:	f00c f97f 	bl	8013c00 <memcpy>
 8007902:	e7a8      	b.n	8007856 <ExecuteMonitor+0x9a>
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007904:	2301      	movs	r3, #1
 8007906:	001d      	movs	r5, r3
 8007908:	e7d9      	b.n	80078be <ExecuteMonitor+0x102>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800790a:	4c7b      	ldr	r4, [pc, #492]	; (8007af8 <ExecuteMonitor+0x33c>)
 800790c:	4d7b      	ldr	r5, [pc, #492]	; (8007afc <ExecuteMonitor+0x340>)
 800790e:	7868      	ldrb	r0, [r5, #1]
 8007910:	210a      	movs	r1, #10
 8007912:	f7f8 fca3 	bl	800025c <__aeabi_uidivmod>
 8007916:	7021      	strb	r1, [r4, #0]
 		            	processingParameterIndex=1;
 8007918:	4b7e      	ldr	r3, [pc, #504]	; (8007b14 <ExecuteMonitor+0x358>)
 800791a:	2201      	movs	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800791e:	1c60      	adds	r0, r4, #1
 8007920:	1ca9      	adds	r1, r5, #2
 8007922:	3211      	adds	r2, #17
 8007924:	f00c f96c 	bl	8013c00 <memcpy>
 8007928:	e795      	b.n	8007856 <ExecuteMonitor+0x9a>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800792a:	4b74      	ldr	r3, [pc, #464]	; (8007afc <ExecuteMonitor+0x340>)
 800792c:	7858      	ldrb	r0, [r3, #1]
 800792e:	210a      	movs	r1, #10
 8007930:	f7f8 fc94 	bl	800025c <__aeabi_uidivmod>
 8007934:	4b76      	ldr	r3, [pc, #472]	; (8007b10 <ExecuteMonitor+0x354>)
 8007936:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007938:	4b70      	ldr	r3, [pc, #448]	; (8007afc <ExecuteMonitor+0x340>)
 800793a:	7898      	ldrb	r0, [r3, #2]
 800793c:	210a      	movs	r1, #10
 800793e:	f7f8 fc8d 	bl	800025c <__aeabi_uidivmod>
 8007942:	4b75      	ldr	r3, [pc, #468]	; (8007b18 <ExecuteMonitor+0x35c>)
 8007944:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007946:	4b6d      	ldr	r3, [pc, #436]	; (8007afc <ExecuteMonitor+0x340>)
 8007948:	78d8      	ldrb	r0, [r3, #3]
 800794a:	210a      	movs	r1, #10
 800794c:	f7f8 fc86 	bl	800025c <__aeabi_uidivmod>
 8007950:	4b69      	ldr	r3, [pc, #420]	; (8007af8 <ExecuteMonitor+0x33c>)
 8007952:	7019      	strb	r1, [r3, #0]
                	    processingParameterIndex=1;
 8007954:	4b6f      	ldr	r3, [pc, #444]	; (8007b14 <ExecuteMonitor+0x358>)
 8007956:	2201      	movs	r2, #1
 8007958:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800795a:	320f      	adds	r2, #15
 800795c:	9901      	ldr	r1, [sp, #4]
 800795e:	4658      	mov	r0, fp
 8007960:	f00c f94e 	bl	8013c00 <memcpy>
 8007964:	e777      	b.n	8007856 <ExecuteMonitor+0x9a>
                   if(flag == RUN_FOR_ONCE)
 8007966:	2b01      	cmp	r3, #1
 8007968:	d014      	beq.n	8007994 <ExecuteMonitor+0x1d8>
                   if(flag == CONTINUOUS_RUN)
 800796a:	4b62      	ldr	r3, [pc, #392]	; (8007af4 <ExecuteMonitor+0x338>)
 800796c:	791b      	ldrb	r3, [r3, #4]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d187      	bne.n	8007882 <ExecuteMonitor+0xc6>
                	finalMatrixIndex=0;
 8007972:	2300      	movs	r3, #0
 8007974:	4a69      	ldr	r2, [pc, #420]	; (8007b1c <ExecuteMonitor+0x360>)
 8007976:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007978:	4a69      	ldr	r2, [pc, #420]	; (8007b20 <ExecuteMonitor+0x364>)
 800797a:	2101      	movs	r1, #1
 800797c:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 800797e:	4a69      	ldr	r2, [pc, #420]	; (8007b24 <ExecuteMonitor+0x368>)
 8007980:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 8007982:	4b65      	ldr	r3, [pc, #404]	; (8007b18 <ExecuteMonitor+0x35c>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d100      	bne.n	800798c <ExecuteMonitor+0x1d0>
 800798a:	e07e      	b.n	8007a8a <ExecuteMonitor+0x2ce>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800798c:	0017      	movs	r7, r2
 800798e:	4e64      	ldr	r6, [pc, #400]	; (8007b20 <ExecuteMonitor+0x364>)
 8007990:	4d62      	ldr	r5, [pc, #392]	; (8007b1c <ExecuteMonitor+0x360>)
 8007992:	e061      	b.n	8007a58 <ExecuteMonitor+0x29c>
                	finalMatrixIndex=0;
 8007994:	4b61      	ldr	r3, [pc, #388]	; (8007b1c <ExecuteMonitor+0x360>)
 8007996:	2100      	movs	r1, #0
 8007998:	7019      	strb	r1, [r3, #0]
                	twoDMatrixIndex=1;
 800799a:	4b61      	ldr	r3, [pc, #388]	; (8007b20 <ExecuteMonitor+0x364>)
 800799c:	2201      	movs	r2, #1
 800799e:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 80079a0:	4b60      	ldr	r3, [pc, #384]	; (8007b24 <ExecuteMonitor+0x368>)
 80079a2:	7019      	strb	r1, [r3, #0]
		           while(counter != numCommandParameters)
 80079a4:	4b5c      	ldr	r3, [pc, #368]	; (8007b18 <ExecuteMonitor+0x35c>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d02a      	beq.n	8007a02 <ExecuteMonitor+0x246>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80079ac:	4b5d      	ldr	r3, [pc, #372]	; (8007b24 <ExecuteMonitor+0x368>)
 80079ae:	469a      	mov	sl, r3
 80079b0:	4f5b      	ldr	r7, [pc, #364]	; (8007b20 <ExecuteMonitor+0x364>)
 80079b2:	4d5a      	ldr	r5, [pc, #360]	; (8007b1c <ExecuteMonitor+0x360>)
 80079b4:	e00b      	b.n	80079ce <ExecuteMonitor+0x212>
		                   counter++;
 80079b6:	4a5b      	ldr	r2, [pc, #364]	; (8007b24 <ExecuteMonitor+0x368>)
 80079b8:	7813      	ldrb	r3, [r2, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80079c0:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <ExecuteMonitor+0x364>)
 80079c2:	2101      	movs	r1, #1
 80079c4:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 80079c6:	4a54      	ldr	r2, [pc, #336]	; (8007b18 <ExecuteMonitor+0x35c>)
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d019      	beq.n	8007a02 <ExecuteMonitor+0x246>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80079ce:	4653      	mov	r3, sl
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	7838      	ldrb	r0, [r7, #0]
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	703b      	strb	r3, [r7, #0]
 80079d8:	7829      	ldrb	r1, [r5, #0]
 80079da:	1c4b      	adds	r3, r1, #1
 80079dc:	702b      	strb	r3, [r5, #0]
 80079de:	4c52      	ldr	r4, [pc, #328]	; (8007b28 <ExecuteMonitor+0x36c>)
 80079e0:	0113      	lsls	r3, r2, #4
 80079e2:	1a9a      	subs	r2, r3, r2
 80079e4:	4b49      	ldr	r3, [pc, #292]	; (8007b0c <ExecuteMonitor+0x350>)
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	5c1b      	ldrb	r3, [r3, r0]
 80079ea:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 80079ec:	2001      	movs	r0, #1
 80079ee:	f008 feab 	bl	8010748 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80079f2:	782b      	ldrb	r3, [r5, #0]
 80079f4:	18e4      	adds	r4, r4, r3
 80079f6:	3c01      	subs	r4, #1
 80079f8:	7823      	ldrb	r3, [r4, #0]
 80079fa:	2220      	movs	r2, #32
 80079fc:	4393      	bics	r3, r2
 80079fe:	d1e6      	bne.n	80079ce <ExecuteMonitor+0x212>
 8007a00:	e7d9      	b.n	80079b6 <ExecuteMonitor+0x1fa>
		          		   flag=0;
 8007a02:	4b3c      	ldr	r3, [pc, #240]	; (8007af4 <ExecuteMonitor+0x338>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 8007a08:	4b46      	ldr	r3, [pc, #280]	; (8007b24 <ExecuteMonitor+0x368>)
 8007a0a:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007a0c:	4b47      	ldr	r3, [pc, #284]	; (8007b2c <ExecuteMonitor+0x370>)
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	2300      	movs	r3, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007a12:	4f47      	ldr	r7, [pc, #284]	; (8007b30 <ExecuteMonitor+0x374>)
 8007a14:	4d44      	ldr	r5, [pc, #272]	; (8007b28 <ExecuteMonitor+0x36c>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007a16:	4c45      	ldr	r4, [pc, #276]	; (8007b2c <ExecuteMonitor+0x370>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007a18:	18fa      	adds	r2, r7, r3
 8007a1a:	3281      	adds	r2, #129	; 0x81
 8007a1c:	32ff      	adds	r2, #255	; 0xff
 8007a1e:	5ceb      	ldrb	r3, [r5, r3]
 8007a20:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8007a22:	2001      	movs	r0, #1
 8007a24:	f008 fe90 	bl	8010748 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007a28:	7823      	ldrb	r3, [r4, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	7023      	strb	r3, [r4, #0]
 8007a30:	2b3f      	cmp	r3, #63	; 0x3f
 8007a32:	d9f1      	bls.n	8007a18 <ExecuteMonitor+0x25c>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007a34:	2240      	movs	r2, #64	; 0x40
 8007a36:	2100      	movs	r1, #0
 8007a38:	483b      	ldr	r0, [pc, #236]	; (8007b28 <ExecuteMonitor+0x36c>)
 8007a3a:	f00c f8ea 	bl	8013c12 <memset>
 8007a3e:	e794      	b.n	800796a <ExecuteMonitor+0x1ae>
   		             counter++;
 8007a40:	4a38      	ldr	r2, [pc, #224]	; (8007b24 <ExecuteMonitor+0x368>)
 8007a42:	7813      	ldrb	r3, [r2, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 8007a4a:	4a35      	ldr	r2, [pc, #212]	; (8007b20 <ExecuteMonitor+0x364>)
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 8007a50:	4a31      	ldr	r2, [pc, #196]	; (8007b18 <ExecuteMonitor+0x35c>)
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d018      	beq.n	8007a8a <ExecuteMonitor+0x2ce>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007a58:	783a      	ldrb	r2, [r7, #0]
 8007a5a:	7830      	ldrb	r0, [r6, #0]
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	7033      	strb	r3, [r6, #0]
 8007a60:	7829      	ldrb	r1, [r5, #0]
 8007a62:	1c4b      	adds	r3, r1, #1
 8007a64:	702b      	strb	r3, [r5, #0]
 8007a66:	4c30      	ldr	r4, [pc, #192]	; (8007b28 <ExecuteMonitor+0x36c>)
 8007a68:	0113      	lsls	r3, r2, #4
 8007a6a:	1a9a      	subs	r2, r3, r2
 8007a6c:	4b27      	ldr	r3, [pc, #156]	; (8007b0c <ExecuteMonitor+0x350>)
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	5c1b      	ldrb	r3, [r3, r0]
 8007a72:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 8007a74:	2001      	movs	r0, #1
 8007a76:	f008 fe67 	bl	8010748 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007a7a:	782b      	ldrb	r3, [r5, #0]
 8007a7c:	18e4      	adds	r4, r4, r3
 8007a7e:	3c01      	subs	r4, #1
 8007a80:	7823      	ldrb	r3, [r4, #0]
 8007a82:	2220      	movs	r2, #32
 8007a84:	4393      	bics	r3, r2
 8007a86:	d1e7      	bne.n	8007a58 <ExecuteMonitor+0x29c>
 8007a88:	e7da      	b.n	8007a40 <ExecuteMonitor+0x284>
		            counter=0;
 8007a8a:	4b26      	ldr	r3, [pc, #152]	; (8007b24 <ExecuteMonitor+0x368>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 8007a90:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <ExecuteMonitor+0x338>)
 8007a92:	791b      	ldrb	r3, [r3, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01d      	beq.n	8007ad4 <ExecuteMonitor+0x318>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007a98:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <ExecuteMonitor+0x370>)
 8007a9a:	4699      	mov	r9, r3
 8007a9c:	2500      	movs	r5, #0
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007a9e:	4f24      	ldr	r7, [pc, #144]	; (8007b30 <ExecuteMonitor+0x374>)
 8007aa0:	4e21      	ldr	r6, [pc, #132]	; (8007b28 <ExecuteMonitor+0x36c>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	701d      	strb	r5, [r3, #0]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	4c20      	ldr	r4, [pc, #128]	; (8007b2c <ExecuteMonitor+0x370>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007aaa:	18fa      	adds	r2, r7, r3
 8007aac:	3281      	adds	r2, #129	; 0x81
 8007aae:	32ff      	adds	r2, #255	; 0xff
 8007ab0:	5cf3      	ldrb	r3, [r6, r3]
 8007ab2:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8007ab4:	20c8      	movs	r0, #200	; 0xc8
 8007ab6:	f006 fbc5 	bl	800e244 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007aba:	7823      	ldrb	r3, [r4, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	7023      	strb	r3, [r4, #0]
 8007ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8007ac4:	d9f1      	bls.n	8007aaa <ExecuteMonitor+0x2ee>
  	          		 Delay_ms(Monitor_time);
 8007ac6:	4c0b      	ldr	r4, [pc, #44]	; (8007af4 <ExecuteMonitor+0x338>)
 8007ac8:	6820      	ldr	r0, [r4, #0]
 8007aca:	f008 fe3d 	bl	8010748 <HAL_Delay>
                  while(flag != NonActive)
 8007ace:	7923      	ldrb	r3, [r4, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <ExecuteMonitor+0x2e6>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007ad4:	2240      	movs	r2, #64	; 0x40
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4813      	ldr	r0, [pc, #76]	; (8007b28 <ExecuteMonitor+0x36c>)
 8007ada:	f00c f89a 	bl	8013c12 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007ade:	22c0      	movs	r2, #192	; 0xc0
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4814      	ldr	r0, [pc, #80]	; (8007b34 <ExecuteMonitor+0x378>)
 8007ae4:	f00c f895 	bl	8013c12 <memset>
		                    nonProcessingParameterIndex=0;
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <ExecuteMonitor+0x344>)
 8007aea:	4699      	mov	r9, r3
 8007aec:	2300      	movs	r3, #0
 8007aee:	4698      	mov	r8, r3
		            	    perviousCharacter= INTIAL_VALUE;
 8007af0:	4e04      	ldr	r6, [pc, #16]	; (8007b04 <ExecuteMonitor+0x348>)
 8007af2:	e6c6      	b.n	8007882 <ExecuteMonitor+0xc6>
 8007af4:	20000000 	.word	0x20000000
 8007af8:	20000cfc 	.word	0x20000cfc
 8007afc:	20000d58 	.word	0x20000d58
 8007b00:	20006319 	.word	0x20006319
 8007b04:	200062f8 	.word	0x200062f8
 8007b08:	2000633b 	.word	0x2000633b
 8007b0c:	20000d6c 	.word	0x20000d6c
 8007b10:	2000633a 	.word	0x2000633a
 8007b14:	20006318 	.word	0x20006318
 8007b18:	20006338 	.word	0x20006338
 8007b1c:	2000633c 	.word	0x2000633c
 8007b20:	20006339 	.word	0x20006339
 8007b24:	2000631a 	.word	0x2000631a
 8007b28:	20000d18 	.word	0x20000d18
 8007b2c:	200062f9 	.word	0x200062f9
 8007b30:	20000a4c 	.word	0x20000a4c
 8007b34:	20000bcc 	.word	0x20000bcc

08007b38 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3a:	46c6      	mov	lr, r8
 8007b3c:	b500      	push	{lr}
		switch(indMode){
 8007b3e:	4c2b      	ldr	r4, [pc, #172]	; (8007bec <StartDefaultTask+0xb4>)
				indMode =IND_OFF;
 8007b40:	0026      	movs	r6, r4
				indMode =IND_OFF;
 8007b42:	46a0      	mov	r8, r4
 8007b44:	e021      	b.n	8007b8a <StartDefaultTask+0x52>
				RTOS_IND_blink(100);
 8007b46:	2580      	movs	r5, #128	; 0x80
 8007b48:	012d      	lsls	r5, r5, #4
 8007b4a:	2790      	movs	r7, #144	; 0x90
 8007b4c:	05ff      	lsls	r7, r7, #23
 8007b4e:	2201      	movs	r2, #1
 8007b50:	0029      	movs	r1, r5
 8007b52:	0038      	movs	r0, r7
 8007b54:	f00a fa76 	bl	8012044 <HAL_GPIO_WritePin>
 8007b58:	2064      	movs	r0, #100	; 0x64
 8007b5a:	f006 fe76 	bl	800e84a <osDelay>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	0029      	movs	r1, r5
 8007b62:	0038      	movs	r0, r7
 8007b64:	f00a fa6e 	bl	8012044 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	7033      	strb	r3, [r6, #0]
		CheckAttachedButtons();
 8007b6c:	f005 feb0 	bl	800d8d0 <CheckAttachedButtons>
		ExecuteSnippet();
 8007b70:	f7fd fce8 	bl	8005544 <ExecuteSnippet>
		ExecuteMonitor();
 8007b74:	f7ff fe22 	bl	80077bc <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <StartDefaultTask+0xb8>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <StartDefaultTask+0x4e>
			delayButtonStateReset = false;
 8007b80:	4b1c      	ldr	r3, [pc, #112]	; (8007bf4 <StartDefaultTask+0xbc>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007b86:	f008 fc75 	bl	8010474 <vPortYield>
		switch(indMode){
 8007b8a:	7823      	ldrb	r3, [r4, #0]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d0da      	beq.n	8007b46 <StartDefaultTask+0xe>
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d016      	beq.n	8007bc2 <StartDefaultTask+0x8a>
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d1e9      	bne.n	8007b6c <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 8007b98:	2580      	movs	r5, #128	; 0x80
 8007b9a:	012d      	lsls	r5, r5, #4
 8007b9c:	2790      	movs	r7, #144	; 0x90
 8007b9e:	05ff      	lsls	r7, r7, #23
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	0029      	movs	r1, r5
 8007ba4:	0038      	movs	r0, r7
 8007ba6:	f00a fa4d 	bl	8012044 <HAL_GPIO_WritePin>
 8007baa:	20c8      	movs	r0, #200	; 0xc8
 8007bac:	f006 fe4d 	bl	800e84a <osDelay>
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	0029      	movs	r1, r5
 8007bb4:	0038      	movs	r0, r7
 8007bb6:	f00a fa45 	bl	8012044 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007bba:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <StartDefaultTask+0xb4>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
				break;
 8007bc0:	e7d4      	b.n	8007b6c <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8007bc2:	2580      	movs	r5, #128	; 0x80
 8007bc4:	012d      	lsls	r5, r5, #4
 8007bc6:	2790      	movs	r7, #144	; 0x90
 8007bc8:	05ff      	lsls	r7, r7, #23
 8007bca:	2201      	movs	r2, #1
 8007bcc:	0029      	movs	r1, r5
 8007bce:	0038      	movs	r0, r7
 8007bd0:	f00a fa38 	bl	8012044 <HAL_GPIO_WritePin>
 8007bd4:	201e      	movs	r0, #30
 8007bd6:	f006 fe38 	bl	800e84a <osDelay>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	0029      	movs	r1, r5
 8007bde:	0038      	movs	r0, r7
 8007be0:	f00a fa30 	bl	8012044 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007be4:	2300      	movs	r3, #0
 8007be6:	4642      	mov	r2, r8
 8007be8:	7013      	strb	r3, [r2, #0]
				break;
 8007bea:	e7bf      	b.n	8007b6c <StartDefaultTask+0x34>
 8007bec:	20000690 	.word	0x20000690
 8007bf0:	2000138a 	.word	0x2000138a
 8007bf4:	20001388 	.word	0x20001388

08007bf8 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007bf8:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007bfa:	4b04      	ldr	r3, [pc, #16]	; (8007c0c <vMainConfigureTimerForRunTimeStats+0x14>)
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	4904      	ldr	r1, [pc, #16]	; (8007c10 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007c00:	f7f8 faa6 	bl	8000150 <__udivsi3>
 8007c04:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007c06:	6018      	str	r0, [r3, #0]
}
 8007c08:	bd10      	pop	{r4, pc}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	200000a8 	.word	0x200000a8
 8007c10:	00002710 	.word	0x00002710
 8007c14:	20000de4 	.word	0x20000de4

08007c18 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007c18:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007c1a:	4b0f      	ldr	r3, [pc, #60]	; (8007c58 <ulMainGetRunTimeCounterValue+0x40>)
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	21fa      	movs	r1, #250	; 0xfa
 8007c20:	0089      	lsls	r1, r1, #2
 8007c22:	f7f8 fa95 	bl	8000150 <__udivsi3>
 8007c26:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <ulMainGetRunTimeCounterValue+0x44>)
 8007c2a:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007c2c:	f007 fd2c 	bl	800f688 <xTaskGetTickCountFromISR>
 8007c30:	0003      	movs	r3, r0
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007c32:	4a0b      	ldr	r2, [pc, #44]	; (8007c60 <ulMainGetRunTimeCounterValue+0x48>)
 8007c34:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c36:	1b28      	subs	r0, r5, r4
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007c38:	0152      	lsls	r2, r2, #5
 8007c3a:	d503      	bpl.n	8007c44 <ulMainGetRunTimeCounterValue+0x2c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007c3c:	3301      	adds	r3, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007c3e:	4a07      	ldr	r2, [pc, #28]	; (8007c5c <ulMainGetRunTimeCounterValue+0x44>)
 8007c40:	6810      	ldr	r0, [r2, #0]
 8007c42:	1a28      	subs	r0, r5, r0
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007c44:	009c      	lsls	r4, r3, #2
 8007c46:	18e4      	adds	r4, r4, r3
 8007c48:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007c4a:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <ulMainGetRunTimeCounterValue+0x4c>)
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	f7f8 fa7f 	bl	8000150 <__udivsi3>
 8007c52:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007c54:	bd70      	pop	{r4, r5, r6, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	200000a8 	.word	0x200000a8
 8007c5c:	e000e018 	.word	0xe000e018
 8007c60:	e000ed04 	.word	0xe000ed04
 8007c64:	20000de4 	.word	0x20000de4

08007c68 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007c68:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007c6a:	f008 fbab 	bl	80103c4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007c6e:	b2c4      	uxtb	r4, r0
 8007c70:	0020      	movs	r0, r4
 8007c72:	f003 fb37 	bl	800b2e4 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007c76:	0020      	movs	r0, r4
 8007c78:	f003 ffa4 	bl	800bbc4 <SwitchStreamDMAToMsg>
}
 8007c7c:	bd10      	pop	{r4, pc}
	...

08007c80 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	0005      	movs	r5, r0
 8007c86:	000c      	movs	r4, r1
 8007c88:	0016      	movs	r6, r2
 8007c8a:	220f      	movs	r2, #15
 8007c8c:	446a      	add	r2, sp
 8007c8e:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007c90:	aa08      	add	r2, sp, #32
 8007c92:	7810      	ldrb	r0, [r2, #0]
 8007c94:	4283      	cmp	r3, r0
 8007c96:	d057      	beq.n	8007d48 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d100      	bne.n	8007c9e <SetupDMAStreams+0x1e>
 8007c9c:	e0ba      	b.n	8007e14 <SetupDMAStreams+0x194>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d100      	bne.n	8007ca4 <SetupDMAStreams+0x24>
 8007ca2:	e0ba      	b.n	8007e1a <SetupDMAStreams+0x19a>
	if(direction == FORWARD){
 8007ca4:	2d00      	cmp	r5, #0
 8007ca6:	d054      	beq.n	8007d52 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8007ca8:	2d01      	cmp	r5, #1
 8007caa:	d100      	bne.n	8007cae <SetupDMAStreams+0x2e>
 8007cac:	e089      	b.n	8007dc2 <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8007cae:	2067      	movs	r0, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007cb0:	2d02      	cmp	r5, #2
 8007cb2:	d000      	beq.n	8007cb6 <SetupDMAStreams+0x36>
 8007cb4:	e0af      	b.n	8007e16 <SetupDMAStreams+0x196>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f006 fc0a 	bl	800e4d0 <GetUart>
 8007cbc:	0005      	movs	r5, r0
 8007cbe:	ab08      	add	r3, sp, #32
 8007cc0:	7818      	ldrb	r0, [r3, #0]
 8007cc2:	f006 fc05 	bl	800e4d0 <GetUart>
 8007cc6:	0001      	movs	r1, r0
 8007cc8:	2201      	movs	r2, #1
 8007cca:	0028      	movs	r0, r5
 8007ccc:	f7ff fc56 	bl	800757c <StartDMAstream>
 8007cd0:	2817      	cmp	r0, #23
 8007cd2:	d100      	bne.n	8007cd6 <SetupDMAStreams+0x56>
 8007cd4:	e09f      	b.n	8007e16 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007cd6:	0170      	lsls	r0, r6, #5
 8007cd8:	1b80      	subs	r0, r0, r6
 8007cda:	0080      	lsls	r0, r0, #2
 8007cdc:	1980      	adds	r0, r0, r6
 8007cde:	00c0      	lsls	r0, r0, #3
 8007ce0:	21fa      	movs	r1, #250	; 0xfa
 8007ce2:	0089      	lsls	r1, r1, #2
 8007ce4:	f7f8 fa34 	bl	8000150 <__udivsi3>
 8007ce8:	0005      	movs	r5, r0
 8007cea:	4b4d      	ldr	r3, [pc, #308]	; (8007e20 <SetupDMAStreams+0x1a0>)
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	230f      	movs	r3, #15
 8007cf0:	446b      	add	r3, sp
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	0001      	movs	r1, r0
 8007cf6:	484b      	ldr	r0, [pc, #300]	; (8007e24 <SetupDMAStreams+0x1a4>)
 8007cf8:	f008 fa12 	bl	8010120 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007cfc:	466b      	mov	r3, sp
 8007cfe:	7bdb      	ldrb	r3, [r3, #15]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a48      	ldr	r2, [pc, #288]	; (8007e28 <SetupDMAStreams+0x1a8>)
 8007d06:	509c      	str	r4, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007d08:	ab08      	add	r3, sp, #32
 8007d0a:	7818      	ldrb	r0, [r3, #0]
 8007d0c:	f006 fbe0 	bl	800e4d0 <GetUart>
 8007d10:	0006      	movs	r6, r0
 8007d12:	466b      	mov	r3, sp
 8007d14:	7bd8      	ldrb	r0, [r3, #15]
 8007d16:	f006 fbdb 	bl	800e4d0 <GetUart>
 8007d1a:	0001      	movs	r1, r0
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	0030      	movs	r0, r6
 8007d20:	f7ff fc2c 	bl	800757c <StartDMAstream>
 8007d24:	2817      	cmp	r0, #23
 8007d26:	d076      	beq.n	8007e16 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007d28:	4b3d      	ldr	r3, [pc, #244]	; (8007e20 <SetupDMAStreams+0x1a0>)
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	ab08      	add	r3, sp, #32
 8007d2e:	2200      	movs	r2, #0
 8007d30:	0029      	movs	r1, r5
 8007d32:	483c      	ldr	r0, [pc, #240]	; (8007e24 <SetupDMAStreams+0x1a4>)
 8007d34:	f008 f9f4 	bl	8010120 <xTimerCreate>
 8007d38:	0006      	movs	r6, r0
		dmaStreamTotal[dst - 1] =count;
 8007d3a:	ab08      	add	r3, sp, #32
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4a39      	ldr	r2, [pc, #228]	; (8007e28 <SetupDMAStreams+0x1a8>)
 8007d44:	509c      	str	r4, [r3, r2]
 8007d46:	e02c      	b.n	8007da2 <SetupDMAStreams+0x122>
		portStatus[src] =STREAM;
 8007d48:	4a38      	ldr	r2, [pc, #224]	; (8007e2c <SetupDMAStreams+0x1ac>)
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007d4e:	2067      	movs	r0, #103	; 0x67
 8007d50:	e061      	b.n	8007e16 <SetupDMAStreams+0x196>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007d52:	0018      	movs	r0, r3
 8007d54:	f006 fbbc 	bl	800e4d0 <GetUart>
 8007d58:	0005      	movs	r5, r0
 8007d5a:	ab08      	add	r3, sp, #32
 8007d5c:	7818      	ldrb	r0, [r3, #0]
 8007d5e:	f006 fbb7 	bl	800e4d0 <GetUart>
 8007d62:	0001      	movs	r1, r0
 8007d64:	2201      	movs	r2, #1
 8007d66:	0028      	movs	r0, r5
 8007d68:	f7ff fc08 	bl	800757c <StartDMAstream>
 8007d6c:	2817      	cmp	r0, #23
 8007d6e:	d052      	beq.n	8007e16 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007d70:	250f      	movs	r5, #15
 8007d72:	446d      	add	r5, sp
 8007d74:	0170      	lsls	r0, r6, #5
 8007d76:	1b80      	subs	r0, r0, r6
 8007d78:	0080      	lsls	r0, r0, #2
 8007d7a:	1980      	adds	r0, r0, r6
 8007d7c:	00c0      	lsls	r0, r0, #3
 8007d7e:	21fa      	movs	r1, #250	; 0xfa
 8007d80:	0089      	lsls	r1, r1, #2
 8007d82:	f7f8 f9e5 	bl	8000150 <__udivsi3>
 8007d86:	0001      	movs	r1, r0
 8007d88:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <SetupDMAStreams+0x1a0>)
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	002b      	movs	r3, r5
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4824      	ldr	r0, [pc, #144]	; (8007e24 <SetupDMAStreams+0x1a4>)
 8007d92:	f008 f9c5 	bl	8010120 <xTimerCreate>
 8007d96:	0006      	movs	r6, r0
		dmaStreamTotal[src - 1] =count;
 8007d98:	782b      	ldrb	r3, [r5, #0]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4a22      	ldr	r2, [pc, #136]	; (8007e28 <SetupDMAStreams+0x1a8>)
 8007da0:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 8007da2:	2000      	movs	r0, #0
	if(xTimerStream != NULL)
 8007da4:	2e00      	cmp	r6, #0
 8007da6:	d036      	beq.n	8007e16 <SetupDMAStreams+0x196>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007da8:	f007 fc68 	bl	800f67c <xTaskGetTickCount>
 8007dac:	0002      	movs	r2, r0
 8007dae:	2301      	movs	r3, #1
 8007db0:	425b      	negs	r3, r3
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	2101      	movs	r1, #1
 8007db8:	0030      	movs	r0, r6
 8007dba:	f008 f9cf 	bl	801015c <xTimerGenericCommand>
	return BOS_OK;
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	e029      	b.n	8007e16 <SetupDMAStreams+0x196>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007dc2:	f006 fb85 	bl	800e4d0 <GetUart>
 8007dc6:	0005      	movs	r5, r0
 8007dc8:	230f      	movs	r3, #15
 8007dca:	446b      	add	r3, sp
 8007dcc:	7818      	ldrb	r0, [r3, #0]
 8007dce:	f006 fb7f 	bl	800e4d0 <GetUart>
 8007dd2:	0001      	movs	r1, r0
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	0028      	movs	r0, r5
 8007dd8:	f7ff fbd0 	bl	800757c <StartDMAstream>
 8007ddc:	2817      	cmp	r0, #23
 8007dde:	d01a      	beq.n	8007e16 <SetupDMAStreams+0x196>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007de0:	0170      	lsls	r0, r6, #5
 8007de2:	1b80      	subs	r0, r0, r6
 8007de4:	0080      	lsls	r0, r0, #2
 8007de6:	1980      	adds	r0, r0, r6
 8007de8:	00c0      	lsls	r0, r0, #3
 8007dea:	21fa      	movs	r1, #250	; 0xfa
 8007dec:	0089      	lsls	r1, r1, #2
 8007dee:	f7f8 f9af 	bl	8000150 <__udivsi3>
 8007df2:	0001      	movs	r1, r0
 8007df4:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <SetupDMAStreams+0x1a0>)
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	ab08      	add	r3, sp, #32
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	4809      	ldr	r0, [pc, #36]	; (8007e24 <SetupDMAStreams+0x1a4>)
 8007dfe:	f008 f98f 	bl	8010120 <xTimerCreate>
 8007e02:	0006      	movs	r6, r0
		dmaStreamTotal[src - 1] =count;
 8007e04:	230f      	movs	r3, #15
 8007e06:	446b      	add	r3, sp
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4a06      	ldr	r2, [pc, #24]	; (8007e28 <SetupDMAStreams+0x1a8>)
 8007e10:	509c      	str	r4, [r3, r2]
 8007e12:	e7c6      	b.n	8007da2 <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 8007e14:	2067      	movs	r0, #103	; 0x67
}
 8007e16:	b004      	add	sp, #16
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 8007e1a:	2067      	movs	r0, #103	; 0x67
 8007e1c:	e7fb      	b.n	8007e16 <SetupDMAStreams+0x196>
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	08007c69 	.word	0x08007c69
 8007e24:	0801ae98 	.word	0x0801ae98
 8007e28:	20000ce0 	.word	0x20000ce0
 8007e2c:	20000878 	.word	0x20000878

08007e30 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007e30:	b510      	push	{r4, lr}
	switch(port){
 8007e32:	2802      	cmp	r0, #2
 8007e34:	d00c      	beq.n	8007e50 <NotifyMessagingTask+0x20>
 8007e36:	2803      	cmp	r0, #3
 8007e38:	d012      	beq.n	8007e60 <NotifyMessagingTask+0x30>
 8007e3a:	2801      	cmp	r0, #1
 8007e3c:	d000      	beq.n	8007e40 <NotifyMessagingTask+0x10>
			break;
#endif
		default:
			break;
	}
}
 8007e3e:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <NotifyMessagingTask+0x40>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	2202      	movs	r2, #2
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f008 f8a5 	bl	800ff98 <xTaskGenericNotify>
			break;
 8007e4e:	e7f6      	b.n	8007e3e <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007e50:	4b08      	ldr	r3, [pc, #32]	; (8007e74 <NotifyMessagingTask+0x44>)
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	2300      	movs	r3, #0
 8007e56:	2202      	movs	r2, #2
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f008 f89d 	bl	800ff98 <xTaskGenericNotify>
			break;
 8007e5e:	e7ee      	b.n	8007e3e <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <NotifyMessagingTask+0x48>)
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	2202      	movs	r2, #2
 8007e68:	2100      	movs	r1, #0
 8007e6a:	f008 f895 	bl	800ff98 <xTaskGenericNotify>
}
 8007e6e:	e7e6      	b.n	8007e3e <NotifyMessagingTask+0xe>
 8007e70:	20000cf0 	.word	0x20000cf0
 8007e74:	20000cf4 	.word	0x20000cf4
 8007e78:	20000cf8 	.word	0x20000cf8

08007e7c <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7e:	46de      	mov	lr, fp
 8007e80:	4657      	mov	r7, sl
 8007e82:	464e      	mov	r6, r9
 8007e84:	4645      	mov	r5, r8
 8007e86:	b5e0      	push	{r5, r6, r7, lr}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	0004      	movs	r4, r0
 8007e8c:	000e      	movs	r6, r1
 8007e8e:	0015      	movs	r5, r2
 8007e90:	9302      	str	r3, [sp, #8]
 8007e92:	ab0e      	add	r3, sp, #56	; 0x38
 8007e94:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007e96:	0003      	movs	r3, r0
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	d100      	bne.n	8007e9e <SendMessageFromPort+0x22>
 8007e9c:	e1e5      	b.n	800826a <SendMessageFromPort+0x3ee>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d148      	bne.n	8007f34 <SendMessageFromPort+0xb8>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007ea2:	2afd      	cmp	r2, #253	; 0xfd
 8007ea4:	d800      	bhi.n	8007ea8 <SendMessageFromPort+0x2c>
 8007ea6:	e1e2      	b.n	800826e <SendMessageFromPort+0x3f2>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f007 fb4d 	bl	800f548 <uxTaskPriorityGet>
 8007eae:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007eb0:	2105      	movs	r1, #5
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f007 fb58 	bl	800f568 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8007eb8:	4bc4      	ldr	r3, [pc, #784]	; (80081cc <SendMessageFromPort+0x350>)
 8007eba:	2248      	movs	r2, #72	; 0x48
 8007ebc:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007ebe:	3212      	adds	r2, #18
 8007ec0:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	d000      	beq.n	8007ec8 <SendMessageFromPort+0x4c>
 8007ec6:	e1ea      	b.n	800829e <SendMessageFromPort+0x422>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8007ec8:	1e7b      	subs	r3, r7, #1
 8007eca:	4ac1      	ldr	r2, [pc, #772]	; (80081d0 <SendMessageFromPort+0x354>)
 8007ecc:	5cd2      	ldrb	r2, [r2, r3]
 8007ece:	4690      	mov	r8, r2
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007ed0:	4fc0      	ldr	r7, [pc, #768]	; (80081d4 <SendMessageFromPort+0x358>)
 8007ed2:	00d9      	lsls	r1, r3, #3
 8007ed4:	1ac9      	subs	r1, r1, r3
 8007ed6:	00c9      	lsls	r1, r1, #3
 8007ed8:	4bbf      	ldr	r3, [pc, #764]	; (80081d8 <SendMessageFromPort+0x35c>)
 8007eda:	18c9      	adds	r1, r1, r3
 8007edc:	0038      	movs	r0, r7
 8007ede:	f00b fe8f 	bl	8013c00 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007ee2:	1efb      	subs	r3, r7, #3
 8007ee4:	4699      	mov	r9, r3
 8007ee6:	4642      	mov	r2, r8
 8007ee8:	709a      	strb	r2, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007eea:	2303      	movs	r3, #3
 8007eec:	4443      	add	r3, r8
 8007eee:	469b      	mov	fp, r3
 8007ef0:	4bba      	ldr	r3, [pc, #744]	; (80081dc <SendMessageFromPort+0x360>)
 8007ef2:	469a      	mov	sl, r3
 8007ef4:	465a      	mov	r2, fp
 8007ef6:	4649      	mov	r1, r9
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f00b fe81 	bl	8013c00 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007efe:	4643      	mov	r3, r8
 8007f00:	b29f      	uxth	r7, r3
 8007f02:	4659      	mov	r1, fp
 8007f04:	4650      	mov	r0, sl
 8007f06:	f004 fa27 	bl	800c358 <CalculateCRC8>
 8007f0a:	464b      	mov	r3, r9
 8007f0c:	465a      	mov	r2, fp
 8007f0e:	5498      	strb	r0, [r3, r2]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007f10:	2238      	movs	r2, #56	; 0x38
 8007f12:	2100      	movs	r1, #0
 8007f14:	4650      	mov	r0, sl
 8007f16:	f00b fe7c 	bl	8013c12 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007f1a:	2dfd      	cmp	r5, #253	; 0xfd
 8007f1c:	d800      	bhi.n	8007f20 <SendMessageFromPort+0xa4>
 8007f1e:	e10d      	b.n	800813c <SendMessageFromPort+0x2c0>
		ACK_FLAG =false; rejected_FLAG=false;
	}

	/* Transmit the message - multi-cast or broadcast */
	else{
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d000      	beq.n	8007f28 <SendMessageFromPort+0xac>
 8007f26:	e0ff      	b.n	8008128 <SendMessageFromPort+0x2ac>
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	d000      	beq.n	8007f2e <SendMessageFromPort+0xb2>
 8007f2c:	e0fc      	b.n	8008128 <SendMessageFromPort+0x2ac>
			src =message[4];
 8007f2e:	4ba7      	ldr	r3, [pc, #668]	; (80081cc <SendMessageFromPort+0x350>)
 8007f30:	791e      	ldrb	r6, [r3, #4]
 8007f32:	e0f9      	b.n	8008128 <SendMessageFromPort+0x2ac>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d002      	beq.n	8007f3e <SendMessageFromPort+0xc2>
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	d100      	bne.n	8007f3e <SendMessageFromPort+0xc2>
 8007f3c:	e199      	b.n	8008272 <SendMessageFromPort+0x3f6>
	TaskPriority =uxTaskPriorityGet( NULL);
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f007 fb02 	bl	800f548 <uxTaskPriorityGet>
 8007f44:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007f46:	2105      	movs	r1, #5
 8007f48:	2000      	movs	r0, #0
 8007f4a:	f007 fb0d 	bl	800f568 <vTaskPrioritySet>
	message[0] ='H';
 8007f4e:	4b9f      	ldr	r3, [pc, #636]	; (80081cc <SendMessageFromPort+0x350>)
 8007f50:	2248      	movs	r2, #72	; 0x48
 8007f52:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007f54:	3212      	adds	r2, #18
 8007f56:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0b4      	beq.n	8007ec8 <SendMessageFromPort+0x4c>
		if(src == 0)
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	d100      	bne.n	8007f64 <SendMessageFromPort+0xe8>
 8007f62:	e07e      	b.n	8008062 <SendMessageFromPort+0x1e6>
		message[2] =length;
 8007f64:	4a99      	ldr	r2, [pc, #612]	; (80081cc <SendMessageFromPort+0x350>)
 8007f66:	2300      	movs	r3, #0
 8007f68:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007f6a:	70d5      	strb	r5, [r2, #3]
		message[4] =src;
 8007f6c:	7116      	strb	r6, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f6e:	499c      	ldr	r1, [pc, #624]	; (80081e0 <SendMessageFromPort+0x364>)
 8007f70:	790b      	ldrb	r3, [r1, #4]
 8007f72:	011b      	lsls	r3, r3, #4
 8007f74:	7848      	ldrb	r0, [r1, #1]
 8007f76:	0080      	lsls	r0, r0, #2
 8007f78:	4303      	orrs	r3, r0
 8007f7a:	7809      	ldrb	r1, [r1, #0]
 8007f7c:	430b      	orrs	r3, r1
		if(code > 0xFF)
 8007f7e:	21ff      	movs	r1, #255	; 0xff
 8007f80:	468c      	mov	ip, r1
 8007f82:	9802      	ldr	r0, [sp, #8]
 8007f84:	4584      	cmp	ip, r0
 8007f86:	4189      	sbcs	r1, r1
 8007f88:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007f8a:	0049      	lsls	r1, r1, #1
 8007f8c:	430b      	orrs	r3, r1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007f92:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 8007f94:	2200      	movs	r2, #0
 8007f96:	4693      	mov	fp, r2
 8007f98:	28ff      	cmp	r0, #255	; 0xff
 8007f9a:	d904      	bls.n	8007fa6 <SendMessageFromPort+0x12a>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007f9c:	0a02      	lsrs	r2, r0, #8
 8007f9e:	498b      	ldr	r1, [pc, #556]	; (80081cc <SendMessageFromPort+0x350>)
 8007fa0:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007fa6:	2f2e      	cmp	r7, #46	; 0x2e
 8007fa8:	d95e      	bls.n	8008068 <SendMessageFromPort+0x1ec>
			message[5] |=0x80;
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	4252      	negs	r2, r2
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	4a86      	ldr	r2, [pc, #536]	; (80081cc <SendMessageFromPort+0x350>)
 8007fb2:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007fb4:	4b8b      	ldr	r3, [pc, #556]	; (80081e4 <SendMessageFromPort+0x368>)
 8007fb6:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007fb8:	232e      	movs	r3, #46	; 0x2e
 8007fba:	469a      	mov	sl, r3
					totalNumberOfParams -=numberOfParams;
 8007fbc:	4b89      	ldr	r3, [pc, #548]	; (80081e4 <SendMessageFromPort+0x368>)
 8007fbe:	4699      	mov	r9, r3
					ptrShift +=numberOfParams;
 8007fc0:	4b89      	ldr	r3, [pc, #548]	; (80081e8 <SendMessageFromPort+0x36c>)
 8007fc2:	4698      	mov	r8, r3
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007fc4:	4653      	mov	r3, sl
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	9b02      	ldr	r3, [sp, #8]
 8007fca:	002a      	movs	r2, r5
 8007fcc:	0031      	movs	r1, r6
 8007fce:	0020      	movs	r0, r4
 8007fd0:	f7ff ff54 	bl	8007e7c <SendMessageFromPort>
					osDelay(10);
 8007fd4:	200a      	movs	r0, #10
 8007fd6:	f006 fc38 	bl	800e84a <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007fda:	464b      	mov	r3, r9
 8007fdc:	881f      	ldrh	r7, [r3, #0]
 8007fde:	3f2e      	subs	r7, #46	; 0x2e
 8007fe0:	b2bf      	uxth	r7, r7
 8007fe2:	801f      	strh	r7, [r3, #0]
					ptrShift +=numberOfParams;
 8007fe4:	4643      	mov	r3, r8
 8007fe6:	8819      	ldrh	r1, [r3, #0]
 8007fe8:	312e      	adds	r1, #46	; 0x2e
 8007fea:	b289      	uxth	r1, r1
 8007fec:	8019      	strh	r1, [r3, #0]
			while(totalNumberOfParams != 0){
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d04a      	beq.n	8008088 <SendMessageFromPort+0x20c>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007ff2:	2f2d      	cmp	r7, #45	; 0x2d
 8007ff4:	d8e6      	bhi.n	8007fc4 <SendMessageFromPort+0x148>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007ff6:	4b75      	ldr	r3, [pc, #468]	; (80081cc <SendMessageFromPort+0x350>)
 8007ff8:	7958      	ldrb	r0, [r3, #5]
 8007ffa:	227f      	movs	r2, #127	; 0x7f
 8007ffc:	4002      	ands	r2, r0
 8007ffe:	715a      	strb	r2, [r3, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008000:	465a      	mov	r2, fp
 8008002:	1dd0      	adds	r0, r2, #7
 8008004:	18c0      	adds	r0, r0, r3
 8008006:	4b79      	ldr	r3, [pc, #484]	; (80081ec <SendMessageFromPort+0x370>)
 8008008:	18c9      	adds	r1, r1, r3
 800800a:	003a      	movs	r2, r7
 800800c:	f00b fdf8 	bl	8013c00 <memcpy>
					ptrShift =0;
 8008010:	2300      	movs	r3, #0
 8008012:	4a75      	ldr	r2, [pc, #468]	; (80081e8 <SendMessageFromPort+0x36c>)
 8008014:	8013      	strh	r3, [r2, #0]
					totalNumberOfParams =0;
 8008016:	4a73      	ldr	r2, [pc, #460]	; (80081e4 <SendMessageFromPort+0x368>)
 8008018:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 800801a:	465b      	mov	r3, fp
 800801c:	1d19      	adds	r1, r3, #4
 800801e:	19c9      	adds	r1, r1, r7
 8008020:	b2cb      	uxtb	r3, r1
 8008022:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8008024:	4b72      	ldr	r3, [pc, #456]	; (80081f0 <SendMessageFromPort+0x374>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d05f      	beq.n	80080ec <SendMessageFromPort+0x270>
			if(dstGroupID < BOS_BROADCAST){
 800802c:	4b71      	ldr	r3, [pc, #452]	; (80081f4 <SendMessageFromPort+0x378>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2bff      	cmp	r3, #255	; 0xff
 8008032:	d100      	bne.n	8008036 <SendMessageFromPort+0x1ba>
 8008034:	e121      	b.n	800827a <SendMessageFromPort+0x3fe>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008036:	4a70      	ldr	r2, [pc, #448]	; (80081f8 <SendMessageFromPort+0x37c>)
 8008038:	7812      	ldrb	r2, [r2, #0]
 800803a:	4694      	mov	ip, r2
 800803c:	2a00      	cmp	r2, #0
 800803e:	d07b      	beq.n	8008138 <SendMessageFromPort+0x2bc>
 8008040:	2201      	movs	r2, #1
 8008042:	409a      	lsls	r2, r3
 8008044:	4690      	mov	r8, r2
 8008046:	486d      	ldr	r0, [pc, #436]	; (80081fc <SendMessageFromPort+0x380>)
 8008048:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 800804a:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800804c:	495f      	ldr	r1, [pc, #380]	; (80081cc <SendMessageFromPort+0x350>)
 800804e:	4689      	mov	r9, r1
 8008050:	44b9      	add	r9, r7
 8008052:	0029      	movs	r1, r5
 8008054:	4665      	mov	r5, ip
 8008056:	46a4      	mov	ip, r4
 8008058:	4644      	mov	r4, r8
 800805a:	46b0      	mov	r8, r6
 800805c:	465e      	mov	r6, fp
 800805e:	468b      	mov	fp, r1
 8008060:	e01b      	b.n	800809a <SendMessageFromPort+0x21e>
			src =myID;
 8008062:	4b67      	ldr	r3, [pc, #412]	; (8008200 <SendMessageFromPort+0x384>)
 8008064:	781e      	ldrb	r6, [r3, #0]
 8008066:	e77d      	b.n	8007f64 <SendMessageFromPort+0xe8>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8008068:	465b      	mov	r3, fp
 800806a:	3307      	adds	r3, #7
 800806c:	4857      	ldr	r0, [pc, #348]	; (80081cc <SendMessageFromPort+0x350>)
 800806e:	1818      	adds	r0, r3, r0
 8008070:	4b5d      	ldr	r3, [pc, #372]	; (80081e8 <SendMessageFromPort+0x36c>)
 8008072:	8819      	ldrh	r1, [r3, #0]
 8008074:	4b5d      	ldr	r3, [pc, #372]	; (80081ec <SendMessageFromPort+0x370>)
 8008076:	18c9      	adds	r1, r1, r3
 8008078:	003a      	movs	r2, r7
 800807a:	f00b fdc1 	bl	8013c00 <memcpy>
			length =numberOfParams + shift + 4;
 800807e:	1d39      	adds	r1, r7, #4
 8008080:	4459      	add	r1, fp
 8008082:	b2cb      	uxtb	r3, r1
 8008084:	469a      	mov	sl, r3
 8008086:	e7cd      	b.n	8008024 <SendMessageFromPort+0x1a8>
 8008088:	2300      	movs	r3, #0
 800808a:	469a      	mov	sl, r3
 800808c:	372e      	adds	r7, #46	; 0x2e
 800808e:	e7c9      	b.n	8008024 <SendMessageFromPort+0x1a8>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8008090:	3301      	adds	r3, #1
 8008092:	b29b      	uxth	r3, r3
 8008094:	3002      	adds	r0, #2
 8008096:	42ab      	cmp	r3, r5
 8008098:	d80d      	bhi.n	80080b6 <SendMessageFromPort+0x23a>
					if(InGroup(i,dstGroupID)){
 800809a:	8801      	ldrh	r1, [r0, #0]
 800809c:	420c      	tst	r4, r1
 800809e:	d0f7      	beq.n	8008090 <SendMessageFromPort+0x214>
						++groupMembers;							// Add this member
 80080a0:	3201      	adds	r2, #1
 80080a2:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80080a4:	18b9      	adds	r1, r7, r2
 80080a6:	292c      	cmp	r1, #44	; 0x2c
 80080a8:	dd00      	ble.n	80080ac <SendMessageFromPort+0x230>
 80080aa:	e0e4      	b.n	8008276 <SendMessageFromPort+0x3fa>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80080ac:	4649      	mov	r1, r9
 80080ae:	1889      	adds	r1, r1, r2
 80080b0:	1989      	adds	r1, r1, r6
 80080b2:	718b      	strb	r3, [r1, #6]
 80080b4:	e7ec      	b.n	8008090 <SendMessageFromPort+0x214>
 80080b6:	4664      	mov	r4, ip
 80080b8:	465d      	mov	r5, fp
 80080ba:	46b3      	mov	fp, r6
 80080bc:	4646      	mov	r6, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80080be:	4659      	mov	r1, fp
 80080c0:	3107      	adds	r1, #7
 80080c2:	19c9      	adds	r1, r1, r7
 80080c4:	1889      	adds	r1, r1, r2
 80080c6:	4b41      	ldr	r3, [pc, #260]	; (80081cc <SendMessageFromPort+0x350>)
 80080c8:	545a      	strb	r2, [r3, r1]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80080ca:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80080cc:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80080ce:	2f2b      	cmp	r7, #43	; 0x2b
 80080d0:	dc58      	bgt.n	8008184 <SendMessageFromPort+0x308>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80080d2:	484c      	ldr	r0, [pc, #304]	; (8008204 <SendMessageFromPort+0x388>)
 80080d4:	7803      	ldrb	r3, [r0, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	7003      	strb	r3, [r0, #0]
 80080dc:	483b      	ldr	r0, [pc, #236]	; (80081cc <SendMessageFromPort+0x350>)
 80080de:	1841      	adds	r1, r0, r1
 80080e0:	704b      	strb	r3, [r1, #1]
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80080e2:	4651      	mov	r1, sl
 80080e4:	3102      	adds	r1, #2
 80080e6:	188a      	adds	r2, r1, r2
 80080e8:	b2d3      	uxtb	r3, r2
 80080ea:	469a      	mov	sl, r3
	message[2] =length;
 80080ec:	4b37      	ldr	r3, [pc, #220]	; (80081cc <SendMessageFromPort+0x350>)
 80080ee:	4699      	mov	r9, r3
 80080f0:	4652      	mov	r2, sl
 80080f2:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80080f4:	2303      	movs	r3, #3
 80080f6:	4453      	add	r3, sl
 80080f8:	469b      	mov	fp, r3
 80080fa:	4b38      	ldr	r3, [pc, #224]	; (80081dc <SendMessageFromPort+0x360>)
 80080fc:	4698      	mov	r8, r3
 80080fe:	465a      	mov	r2, fp
 8008100:	4649      	mov	r1, r9
 8008102:	0018      	movs	r0, r3
 8008104:	f00b fd7c 	bl	8013c00 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8008108:	4653      	mov	r3, sl
 800810a:	b29f      	uxth	r7, r3
 800810c:	4659      	mov	r1, fp
 800810e:	4640      	mov	r0, r8
 8008110:	f004 f922 	bl	800c358 <CalculateCRC8>
 8008114:	464b      	mov	r3, r9
 8008116:	465a      	mov	r2, fp
 8008118:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer,0,sizeof(crcBuffer));
 800811a:	2238      	movs	r2, #56	; 0x38
 800811c:	2100      	movs	r1, #0
 800811e:	4640      	mov	r0, r8
 8008120:	f00b fd77 	bl	8013c12 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8008124:	2dfd      	cmp	r5, #253	; 0xfd
 8008126:	d909      	bls.n	800813c <SendMessageFromPort+0x2c0>
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8008128:	0030      	movs	r0, r6
 800812a:	f7fb fd63 	bl	8003bf4 <FindBroadcastRoutes>
 800812e:	2500      	movs	r5, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008130:	4b35      	ldr	r3, [pc, #212]	; (8008208 <SendMessageFromPort+0x38c>)
 8008132:	4698      	mov	r8, r3
 8008134:	4e32      	ldr	r6, [pc, #200]	; (8008200 <SendMessageFromPort+0x384>)
 8008136:	e078      	b.n	800822a <SendMessageFromPort+0x3ae>
			uint8_t groupMembers =0;
 8008138:	2200      	movs	r2, #0
 800813a:	e7c0      	b.n	80080be <SendMessageFromPort+0x242>
		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	3b2c      	subs	r3, #44	; 0x2c
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b01      	cmp	r3, #1
 8008144:	d90a      	bls.n	800815c <SendMessageFromPort+0x2e0>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8008146:	4b26      	ldr	r3, [pc, #152]	; (80081e0 <SendMessageFromPort+0x364>)
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	2500      	movs	r5, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00c      	beq.n	800816a <SendMessageFromPort+0x2ee>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8008150:	3704      	adds	r7, #4
 8008152:	b2bf      	uxth	r7, r7
 8008154:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <SendMessageFromPort+0x350>)
 8008156:	4698      	mov	r8, r3
				if(ACK_FLAG == true)
 8008158:	4e2c      	ldr	r6, [pc, #176]	; (800820c <SendMessageFromPort+0x390>)
 800815a:	e026      	b.n	80081aa <SendMessageFromPort+0x32e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 800815c:	1d3a      	adds	r2, r7, #4
 800815e:	b292      	uxth	r2, r2
 8008160:	2332      	movs	r3, #50	; 0x32
 8008162:	491a      	ldr	r1, [pc, #104]	; (80081cc <SendMessageFromPort+0x350>)
 8008164:	0020      	movs	r0, r4
 8008166:	f006 fa15 	bl	800e594 <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 800816a:	2300      	movs	r3, #0
 800816c:	4a27      	ldr	r2, [pc, #156]	; (800820c <SendMessageFromPort+0x390>)
 800816e:	7013      	strb	r3, [r2, #0]
 8008170:	4a27      	ldr	r2, [pc, #156]	; (8008210 <SendMessageFromPort+0x394>)
 8008172:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8008174:	9903      	ldr	r1, [sp, #12]
 8008176:	2000      	movs	r0, #0
 8008178:	f007 f9f6 	bl	800f568 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <SendMessageFromPort+0x398>)
 800817e:	2202      	movs	r2, #2
 8008180:	701a      	strb	r2, [r3, #0]
	
	return result;
 8008182:	2000      	movs	r0, #0
}
 8008184:	b005      	add	sp, #20
 8008186:	bcf0      	pop	{r4, r5, r6, r7}
 8008188:	46bb      	mov	fp, r7
 800818a:	46b2      	mov	sl, r6
 800818c:	46a9      	mov	r9, r5
 800818e:	46a0      	mov	r8, r4
 8008190:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8008192:	2332      	movs	r3, #50	; 0x32
 8008194:	003a      	movs	r2, r7
 8008196:	490d      	ldr	r1, [pc, #52]	; (80081cc <SendMessageFromPort+0x350>)
 8008198:	0020      	movs	r0, r4
 800819a:	f006 f9fb 	bl	800e594 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800819e:	1c6b      	adds	r3, r5, #1
 80081a0:	b2dd      	uxtb	r5, r3
 80081a2:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <SendMessageFromPort+0x364>)
 80081a4:	88d2      	ldrh	r2, [r2, #6]
 80081a6:	42aa      	cmp	r2, r5
 80081a8:	d9df      	bls.n	800816a <SendMessageFromPort+0x2ee>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80081aa:	2332      	movs	r3, #50	; 0x32
 80081ac:	003a      	movs	r2, r7
 80081ae:	4641      	mov	r1, r8
 80081b0:	0020      	movs	r0, r4
 80081b2:	f006 f9ef 	bl	800e594 <writePxDMAMutex>
				osDelay(200);
 80081b6:	20c8      	movs	r0, #200	; 0xc8
 80081b8:	f006 fb47 	bl	800e84a <osDelay>
				if(ACK_FLAG == true)
 80081bc:	7833      	ldrb	r3, [r6, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1d3      	bne.n	800816a <SendMessageFromPort+0x2ee>
				if(rejected_FLAG == true)
 80081c2:	4b13      	ldr	r3, [pc, #76]	; (8008210 <SendMessageFromPort+0x394>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0e9      	beq.n	800819e <SendMessageFromPort+0x322>
 80081ca:	e7e2      	b.n	8008192 <SendMessageFromPort+0x316>
 80081cc:	20000694 	.word	0x20000694
 80081d0:	200006cc 	.word	0x200006cc
 80081d4:	20000697 	.word	0x20000697
 80081d8:	2000054c 	.word	0x2000054c
 80081dc:	20000c90 	.word	0x20000c90
 80081e0:	200061f8 	.word	0x200061f8
 80081e4:	20000dee 	.word	0x20000dee
 80081e8:	20000dec 	.word	0x20000dec
 80081ec:	200006d0 	.word	0x200006d0
 80081f0:	200002b5 	.word	0x200002b5
 80081f4:	20000031 	.word	0x20000031
 80081f8:	20000030 	.word	0x20000030
 80081fc:	2000065c 	.word	0x2000065c
 8008200:	2000080e 	.word	0x2000080e
 8008204:	200004f8 	.word	0x200004f8
 8008208:	200004fc 	.word	0x200004fc
 800820c:	200002b4 	.word	0x200002b4
 8008210:	20000884 	.word	0x20000884
 8008214:	20000890 	.word	0x20000890
			rejected_FLAG=false;
 8008218:	4b23      	ldr	r3, [pc, #140]	; (80082a8 <SendMessageFromPort+0x42c>)
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 800821e:	200a      	movs	r0, #10
 8008220:	f006 f810 	bl	800e244 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008224:	3501      	adds	r5, #1
 8008226:	2d03      	cmp	r5, #3
 8008228:	d0a4      	beq.n	8008174 <SendMessageFromPort+0x2f8>
 800822a:	1c68      	adds	r0, r5, #1
 800822c:	b2c0      	uxtb	r0, r0
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800822e:	7833      	ldrb	r3, [r6, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	4642      	mov	r2, r8
 8008236:	5a9b      	ldrh	r3, [r3, r2]
 8008238:	412b      	asrs	r3, r5
 800823a:	07db      	lsls	r3, r3, #31
 800823c:	d5ec      	bpl.n	8008218 <SendMessageFromPort+0x39c>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800823e:	1d3b      	adds	r3, r7, #4
 8008240:	b29b      	uxth	r3, r3
 8008242:	4699      	mov	r9, r3
 8008244:	2332      	movs	r3, #50	; 0x32
 8008246:	464a      	mov	r2, r9
 8008248:	4918      	ldr	r1, [pc, #96]	; (80082ac <SendMessageFromPort+0x430>)
 800824a:	f006 f9a3 	bl	800e594 <writePxDMAMutex>
				osDelay(200);
 800824e:	20c8      	movs	r0, #200	; 0xc8
 8008250:	f006 fafb 	bl	800e84a <osDelay>
				if(rejected_FLAG == true)
 8008254:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <SendMessageFromPort+0x42c>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0dd      	beq.n	8008218 <SendMessageFromPort+0x39c>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 800825c:	2332      	movs	r3, #50	; 0x32
 800825e:	464a      	mov	r2, r9
 8008260:	4912      	ldr	r1, [pc, #72]	; (80082ac <SendMessageFromPort+0x430>)
 8008262:	0020      	movs	r0, r4
 8008264:	f006 f996 	bl	800e594 <writePxDMAMutex>
 8008268:	e7d6      	b.n	8008218 <SendMessageFromPort+0x39c>
		return BOS_ERR_WrongParam;
 800826a:	2067      	movs	r0, #103	; 0x67
 800826c:	e78a      	b.n	8008184 <SendMessageFromPort+0x308>
 800826e:	2067      	movs	r0, #103	; 0x67
 8008270:	e788      	b.n	8008184 <SendMessageFromPort+0x308>
 8008272:	2067      	movs	r0, #103	; 0x67
 8008274:	e786      	b.n	8008184 <SendMessageFromPort+0x308>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008276:	2069      	movs	r0, #105	; 0x69
 8008278:	e784      	b.n	8008184 <SendMessageFromPort+0x308>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800827a:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 800827c:	2f2c      	cmp	r7, #44	; 0x2c
 800827e:	d900      	bls.n	8008282 <SendMessageFromPort+0x406>
 8008280:	e780      	b.n	8008184 <SendMessageFromPort+0x308>
				message[7 + shift + numberOfParams] =++bcastID;
 8008282:	4a0b      	ldr	r2, [pc, #44]	; (80082b0 <SendMessageFromPort+0x434>)
 8008284:	7813      	ldrb	r3, [r2, #0]
 8008286:	3301      	adds	r3, #1
 8008288:	b2db      	uxtb	r3, r3
 800828a:	7013      	strb	r3, [r2, #0]
 800828c:	4a07      	ldr	r2, [pc, #28]	; (80082ac <SendMessageFromPort+0x430>)
 800828e:	445a      	add	r2, fp
 8008290:	19d7      	adds	r7, r2, r7
 8008292:	71fb      	strb	r3, [r7, #7]
				length +=1;		// + bcastID
 8008294:	4651      	mov	r1, sl
 8008296:	3101      	adds	r1, #1
 8008298:	b2cb      	uxtb	r3, r1
 800829a:	469a      	mov	sl, r3
 800829c:	e726      	b.n	80080ec <SendMessageFromPort+0x270>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800829e:	9b02      	ldr	r3, [sp, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d100      	bne.n	80082a6 <SendMessageFromPort+0x42a>
 80082a4:	e610      	b.n	8007ec8 <SendMessageFromPort+0x4c>
 80082a6:	e65d      	b.n	8007f64 <SendMessageFromPort+0xe8>
 80082a8:	20000884 	.word	0x20000884
 80082ac:	20000694 	.word	0x20000694
 80082b0:	200004f8 	.word	0x200004f8

080082b4 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80082b4:	b530      	push	{r4, r5, lr}
 80082b6:	b083      	sub	sp, #12
 80082b8:	0004      	movs	r4, r0
	AddBcastPayload = false;
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <ForwardReceivedMessage+0x34>)
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80082c0:	1e42      	subs	r2, r0, #1
 80082c2:	00d3      	lsls	r3, r2, #3
 80082c4:	1a9b      	subs	r3, r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4a08      	ldr	r2, [pc, #32]	; (80082ec <ForwardReceivedMessage+0x38>)
 80082ca:	5c9d      	ldrb	r5, [r3, r2]
	port =FindRoute(myID,dst);
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <ForwardReceivedMessage+0x3c>)
 80082ce:	7818      	ldrb	r0, [r3, #0]
 80082d0:	0029      	movs	r1, r5
 80082d2:	f7fb fd5d 	bl	8003d90 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80082d6:	9400      	str	r4, [sp, #0]
 80082d8:	2300      	movs	r3, #0
 80082da:	002a      	movs	r2, r5
 80082dc:	2100      	movs	r1, #0
 80082de:	f7ff fdcd 	bl	8007e7c <SendMessageFromPort>
}
 80082e2:	2000      	movs	r0, #0
 80082e4:	b003      	add	sp, #12
 80082e6:	bd30      	pop	{r4, r5, pc}
 80082e8:	200002b5 	.word	0x200002b5
 80082ec:	2000054c 	.word	0x2000054c
 80082f0:	2000080e 	.word	0x2000080e

080082f4 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80082f4:	b500      	push	{lr}
 80082f6:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80082f8:	4b0c      	ldr	r3, [pc, #48]	; (800832c <BroadcastReceivedMessage+0x38>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80082fe:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <BroadcastReceivedMessage+0x3c>)
 8008300:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008302:	28ff      	cmp	r0, #255	; 0xff
 8008304:	d009      	beq.n	800831a <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8008306:	9100      	str	r1, [sp, #0]
 8008308:	2300      	movs	r3, #0
 800830a:	22fe      	movs	r2, #254	; 0xfe
 800830c:	2100      	movs	r1, #0
 800830e:	2000      	movs	r0, #0
 8008310:	f7ff fdb4 	bl	8007e7c <SendMessageFromPort>
}
 8008314:	2000      	movs	r0, #0
 8008316:	b003      	add	sp, #12
 8008318:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 800831a:	9100      	str	r1, [sp, #0]
 800831c:	2300      	movs	r3, #0
 800831e:	32ff      	adds	r2, #255	; 0xff
 8008320:	2100      	movs	r1, #0
 8008322:	2000      	movs	r0, #0
 8008324:	f7ff fdaa 	bl	8007e7c <SendMessageFromPort>
 8008328:	e7f4      	b.n	8008314 <BroadcastReceivedMessage+0x20>
 800832a:	46c0      	nop			; (mov r8, r8)
 800832c:	200002b5 	.word	0x200002b5
 8008330:	20000031 	.word	0x20000031

08008334 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008334:	b530      	push	{r4, r5, lr}
 8008336:	b083      	sub	sp, #12
 8008338:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800833a:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <BroadcastMessage+0x44>)
 800833c:	2501      	movs	r5, #1
 800833e:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8008340:	4b0e      	ldr	r3, [pc, #56]	; (800837c <BroadcastMessage+0x48>)
 8008342:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008344:	29ff      	cmp	r1, #255	; 0xff
 8008346:	d00e      	beq.n	8008366 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8008348:	9400      	str	r4, [sp, #0]
 800834a:	0013      	movs	r3, r2
 800834c:	22fe      	movs	r2, #254	; 0xfe
 800834e:	0001      	movs	r1, r0
 8008350:	2000      	movs	r0, #0
 8008352:	f7ff fd93 	bl	8007e7c <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8008356:	0022      	movs	r2, r4
 8008358:	2100      	movs	r1, #0
 800835a:	4809      	ldr	r0, [pc, #36]	; (8008380 <BroadcastMessage+0x4c>)
 800835c:	f00b fc59 	bl	8013c12 <memset>
}
 8008360:	2000      	movs	r0, #0
 8008362:	b003      	add	sp, #12
 8008364:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8008366:	9400      	str	r4, [sp, #0]
 8008368:	0013      	movs	r3, r2
 800836a:	22ff      	movs	r2, #255	; 0xff
 800836c:	0001      	movs	r1, r0
 800836e:	2000      	movs	r0, #0
 8008370:	f7ff fd84 	bl	8007e7c <SendMessageFromPort>
 8008374:	e7ef      	b.n	8008356 <BroadcastMessage+0x22>
 8008376:	46c0      	nop			; (mov r8, r8)
 8008378:	200002b5 	.word	0x200002b5
 800837c:	20000031 	.word	0x20000031
 8008380:	200006d0 	.word	0x200006d0

08008384 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008386:	b083      	sub	sp, #12
 8008388:	0004      	movs	r4, r0
 800838a:	000e      	movs	r6, r1
 800838c:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 800838e:	28ff      	cmp	r0, #255	; 0xff
 8008390:	d012      	beq.n	80083b8 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8008392:	4f0d      	ldr	r7, [pc, #52]	; (80083c8 <SendMessageToModule+0x44>)
 8008394:	7838      	ldrb	r0, [r7, #0]
 8008396:	0021      	movs	r1, r4
 8008398:	f7fb fcfa 	bl	8003d90 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 800839c:	7839      	ldrb	r1, [r7, #0]
 800839e:	9500      	str	r5, [sp, #0]
 80083a0:	0033      	movs	r3, r6
 80083a2:	0022      	movs	r2, r4
 80083a4:	f7ff fd6a 	bl	8007e7c <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80083a8:	002a      	movs	r2, r5
 80083aa:	2100      	movs	r1, #0
 80083ac:	4807      	ldr	r0, [pc, #28]	; (80083cc <SendMessageToModule+0x48>)
 80083ae:	f00b fc30 	bl	8013c12 <memset>
}
 80083b2:	2000      	movs	r0, #0
 80083b4:	b003      	add	sp, #12
 80083b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80083b8:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <SendMessageToModule+0x44>)
 80083ba:	7818      	ldrb	r0, [r3, #0]
 80083bc:	0013      	movs	r3, r2
 80083be:	000a      	movs	r2, r1
 80083c0:	21ff      	movs	r1, #255	; 0xff
 80083c2:	f7ff ffb7 	bl	8008334 <BroadcastMessage>
 80083c6:	e7f4      	b.n	80083b2 <SendMessageToModule+0x2e>
 80083c8:	2000080e 	.word	0x2000080e
 80083cc:	200006d0 	.word	0x200006d0

080083d0 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80083d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083d2:	46de      	mov	lr, fp
 80083d4:	4657      	mov	r7, sl
 80083d6:	464e      	mov	r6, r9
 80083d8:	4645      	mov	r5, r8
 80083da:	b5e0      	push	{r5, r6, r7, lr}
 80083dc:	b091      	sub	sp, #68	; 0x44
 80083de:	900f      	str	r0, [sp, #60]	; 0x3c
 80083e0:	000f      	movs	r7, r1
 80083e2:	920e      	str	r2, [sp, #56]	; 0x38
 80083e4:	001e      	movs	r6, r3
 80083e6:	ab1a      	add	r3, sp, #104	; 0x68
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	4699      	mov	r9, r3
 80083ec:	ab1d      	add	r3, sp, #116	; 0x74
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80083f2:	4b5e      	ldr	r3, [pc, #376]	; (800856c <StartScastDMAStream+0x19c>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	428b      	cmp	r3, r1
 80083f8:	d120      	bne.n	800843c <StartScastDMAStream+0x6c>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80083fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083fc:	0e1b      	lsrs	r3, r3, #24
 80083fe:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8008400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008402:	0c1b      	lsrs	r3, r3, #16
 8008404:	b2db      	uxtb	r3, r3
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8008408:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800840a:	0a1b      	lsrs	r3, r3, #8
 800840c:	b2db      	uxtb	r3, r3
 800840e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008410:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008412:	0e1b      	lsrs	r3, r3, #24
 8008414:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008416:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	b2db      	uxtb	r3, r3
 800841c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 800841e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	b2db      	uxtb	r3, r3
 8008424:	4698      	mov	r8, r3
 8008426:	4d52      	ldr	r5, [pc, #328]	; (8008570 <StartScastDMAStream+0x1a0>)
 8008428:	231a      	movs	r3, #26
 800842a:	469a      	mov	sl, r3
 800842c:	44aa      	add	sl, r5
				temp2 =dstP;
 800842e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008430:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008432:	4c50      	ldr	r4, [pc, #320]	; (8008574 <StartScastDMAStream+0x1a4>)
 8008434:	464b      	mov	r3, r9
 8008436:	46c1      	mov	r9, r8
 8008438:	4698      	mov	r8, r3
 800843a:	e058      	b.n	80084ee <StartScastDMAStream+0x11e>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800843c:	4b4d      	ldr	r3, [pc, #308]	; (8008574 <StartScastDMAStream+0x1a4>)
 800843e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008440:	0e12      	lsrs	r2, r2, #24
 8008442:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8008444:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008446:	0c12      	lsrs	r2, r2, #16
 8008448:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 800844a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800844c:	0a12      	lsrs	r2, r2, #8
 800844e:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8008450:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008452:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008454:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008456:	0e12      	lsrs	r2, r2, #24
 8008458:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 800845a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800845c:	0c12      	lsrs	r2, r2, #16
 800845e:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8008460:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008462:	0a12      	lsrs	r2, r2, #8
 8008464:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008466:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008468:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 800846a:	464a      	mov	r2, r9
 800846c:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 800846e:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8008470:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8008472:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008474:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8008476:	465a      	mov	r2, fp
 8008478:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 800847a:	220d      	movs	r2, #13
 800847c:	211c      	movs	r1, #28
 800847e:	0038      	movs	r0, r7
 8008480:	f7ff ff80 	bl	8008384 <SendMessageToModule>
		return result;
 8008484:	e055      	b.n	8008532 <StartScastDMAStream+0x162>
				temp1 =FindRoute(route[i],srcM);
 8008486:	0039      	movs	r1, r7
 8008488:	f7fb fc82 	bl	8003d90 <FindRoute>
 800848c:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 800848e:	0031      	movs	r1, r6
 8008490:	0038      	movs	r0, r7
 8008492:	f7fb fc7d 	bl	8003d90 <FindRoute>
			if(route[i] == dstM){
 8008496:	9a06      	ldr	r2, [sp, #24]
 8008498:	7850      	ldrb	r0, [r2, #1]
				temp2 =dstP;
 800849a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 800849c:	42b0      	cmp	r0, r6
 800849e:	d135      	bne.n	800850c <StartScastDMAStream+0x13c>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80084a0:	9a08      	ldr	r2, [sp, #32]
 80084a2:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80084a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084a6:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80084a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084aa:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80084ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084ae:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80084b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b2:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80084b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b6:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 80084b8:	464a      	mov	r2, r9
 80084ba:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 80084bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80084be:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 80084c0:	4642      	mov	r2, r8
 80084c2:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 80084c4:	9a07      	ldr	r2, [sp, #28]
 80084c6:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 80084c8:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 80084ca:	465b      	mov	r3, fp
 80084cc:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 80084ce:	0031      	movs	r1, r6
 80084d0:	0038      	movs	r0, r7
 80084d2:	f7fb fc5d 	bl	8003d90 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	7858      	ldrb	r0, [r3, #1]
 80084da:	220c      	movs	r2, #12
 80084dc:	211b      	movs	r1, #27
 80084de:	f7ff ff51 	bl	8008384 <SendMessageToModule>
			osDelay(10);
 80084e2:	200a      	movs	r0, #10
 80084e4:	f006 f9b1 	bl	800e84a <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 80084e8:	3501      	adds	r5, #1
 80084ea:	4555      	cmp	r5, sl
 80084ec:	d013      	beq.n	8008516 <StartScastDMAStream+0x146>
		FindRoute(srcM,dstM);
 80084ee:	0031      	movs	r1, r6
 80084f0:	0038      	movs	r0, r7
 80084f2:	f7fb fc4d 	bl	8003d90 <FindRoute>
		if(route[i]){
 80084f6:	9506      	str	r5, [sp, #24]
 80084f8:	7868      	ldrb	r0, [r5, #1]
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d0f4      	beq.n	80084e8 <StartScastDMAStream+0x118>
			if(route[i + 1]){
 80084fe:	78a9      	ldrb	r1, [r5, #2]
 8008500:	2900      	cmp	r1, #0
 8008502:	d0c0      	beq.n	8008486 <StartScastDMAStream+0xb6>
				temp1 =FindRoute(route[i],route[i + 1]);
 8008504:	f7fb fc44 	bl	8003d90 <FindRoute>
 8008508:	9007      	str	r0, [sp, #28]
 800850a:	e7c0      	b.n	800848e <StartScastDMAStream+0xbe>
				temp2 =FindRoute(route[i],route[i - 1]);
 800850c:	7811      	ldrb	r1, [r2, #0]
 800850e:	f7fb fc3f 	bl	8003d90 <FindRoute>
 8008512:	0003      	movs	r3, r0
 8008514:	e7c4      	b.n	80084a0 <StartScastDMAStream+0xd0>
 8008516:	46c1      	mov	r9, r8
		}
	}
	
	if(srcM == dstM)
 8008518:	42b7      	cmp	r7, r6
 800851a:	d112      	bne.n	8008542 <StartScastDMAStream+0x172>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800851c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008522:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008524:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008526:	4648      	mov	r0, r9
 8008528:	f7ff fbaa 	bl	8007c80 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 800852c:	465b      	mov	r3, fp
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10d      	bne.n	800854e <StartScastDMAStream+0x17e>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8008532:	2000      	movs	r0, #0
 8008534:	b011      	add	sp, #68	; 0x44
 8008536:	bcf0      	pop	{r4, r5, r6, r7}
 8008538:	46bb      	mov	fp, r7
 800853a:	46b2      	mov	sl, r6
 800853c:	46a9      	mov	r9, r5
 800853e:	46a0      	mov	r8, r4
 8008540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8008542:	0031      	movs	r1, r6
 8008544:	0038      	movs	r0, r7
 8008546:	f7fb fc23 	bl	8003d90 <FindRoute>
 800854a:	900e      	str	r0, [sp, #56]	; 0x38
 800854c:	e7e6      	b.n	800851c <StartScastDMAStream+0x14c>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800854e:	2300      	movs	r3, #0
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	9302      	str	r3, [sp, #8]
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800855e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008560:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008562:	4648      	mov	r0, r9
 8008564:	f7fb f918 	bl	8003798 <SaveEEstreams>
 8008568:	e7e3      	b.n	8008532 <StartScastDMAStream+0x162>
 800856a:	46c0      	nop			; (mov r8, r8)
 800856c:	2000080e 	.word	0x2000080e
 8008570:	2000633f 	.word	0x2000633f
 8008574:	200006d0 	.word	0x200006d0

08008578 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800857a:	46de      	mov	lr, fp
 800857c:	4657      	mov	r7, sl
 800857e:	464e      	mov	r6, r9
 8008580:	4645      	mov	r5, r8
 8008582:	b5e0      	push	{r5, r6, r7, lr}
 8008584:	b087      	sub	sp, #28
 8008586:	e1a2      	b.n	80088ce <BackEndTask+0x356>
			/* A. Check for BOS messages */
			if(portStatus[port] == MSG || portStatus[port] == FREE){
				/* A.1. Look for HZ delimiter and determine packet start */
				/* Note this parses only a single packet on each pass TODO update to parse all */

				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8008588:	1e63      	subs	r3, r4, #1
 800858a:	4698      	mov	r8, r3
 800858c:	9b01      	ldr	r3, [sp, #4]
 800858e:	9303      	str	r3, [sp, #12]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2bbf      	cmp	r3, #191	; 0xbf
 8008594:	dd00      	ble.n	8008598 <BackEndTask+0x20>
 8008596:	e1d3      	b.n	8008940 <BackEndTask+0x3c8>
 8008598:	001a      	movs	r2, r3
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 800859a:	1c68      	adds	r0, r5, #1
 800859c:	e1c5      	b.n	800892a <BackEndTask+0x3b2>
						packetStart =i;
						break;
					}
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800859e:	2abf      	cmp	r2, #191	; 0xbf
 80085a0:	d004      	beq.n	80085ac <BackEndTask+0x34>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80085a2:	3201      	adds	r2, #1
 80085a4:	2ac0      	cmp	r2, #192	; 0xc0
 80085a6:	d000      	beq.n	80085aa <BackEndTask+0x32>
 80085a8:	e1bf      	b.n	800892a <BackEndTask+0x3b2>
 80085aa:	e1c9      	b.n	8008940 <BackEndTask+0x3c8>
 80085ac:	0029      	movs	r1, r5
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80085ae:	5caa      	ldrb	r2, [r5, r2]
 80085b0:	2a48      	cmp	r2, #72	; 0x48
 80085b2:	d028      	beq.n	8008606 <BackEndTask+0x8e>
						break;
					}
					else{
						/* B. Did not find any messaging packets. Check for CLI enter key (0xD) */
						if(i == MSG_RX_BUF_SIZE - 1){
							if(BOS.disableCLI == false){
 80085b4:	4acb      	ldr	r2, [pc, #812]	; (80088e4 <BackEndTask+0x36c>)
 80085b6:	7e92      	ldrb	r2, [r2, #26]
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d02b      	beq.n	8008614 <BackEndTask+0x9c>
		for(port =1; port <= NumOfPorts; port++){
 80085bc:	3401      	adds	r4, #1
 80085be:	3601      	adds	r6, #1
 80085c0:	35c0      	adds	r5, #192	; 0xc0
 80085c2:	3701      	adds	r7, #1
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	2338      	movs	r3, #56	; 0x38
 80085cc:	469c      	mov	ip, r3
 80085ce:	44e1      	add	r9, ip
 80085d0:	2c04      	cmp	r4, #4
 80085d2:	d100      	bne.n	80085d6 <BackEndTask+0x5e>
 80085d4:	e179      	b.n	80088ca <BackEndTask+0x352>
 80085d6:	b2e3      	uxtb	r3, r4
 80085d8:	469b      	mov	fp, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 80085da:	9602      	str	r6, [sp, #8]
 80085dc:	7873      	ldrb	r3, [r6, #1]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d9d2      	bls.n	8008588 <BackEndTask+0x10>
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
				++rejectedMsg;
			}

			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
 80085e2:	783b      	ldrb	r3, [r7, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0e9      	beq.n	80085bc <BackEndTask+0x44>
				MsgDMAStopped[port - 1] = false;
 80085e8:	2300      	movs	r3, #0
 80085ea:	703b      	strb	r3, [r7, #0]
				if(portStatus[port] == OVERRUN)
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	2b05      	cmp	r3, #5
 80085f2:	d100      	bne.n	80085f6 <BackEndTask+0x7e>
 80085f4:	e165      	b.n	80088c2 <BackEndTask+0x34a>
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 80085f6:	4658      	mov	r0, fp
 80085f8:	f005 ff6a 	bl	800e4d0 <GetUart>
 80085fc:	22c0      	movs	r2, #192	; 0xc0
 80085fe:	0029      	movs	r1, r5
 8008600:	f00a fe0a 	bl	8013218 <HAL_UART_Receive_DMA>
 8008604:	e7da      	b.n	80085bc <BackEndTask+0x44>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8008606:	782a      	ldrb	r2, [r5, #0]
 8008608:	2a5a      	cmp	r2, #90	; 0x5a
 800860a:	d1d3      	bne.n	80085b4 <BackEndTask+0x3c>
						packetStart = MSG_RX_BUF_SIZE - 1;
 800860c:	4bb6      	ldr	r3, [pc, #728]	; (80088e8 <BackEndTask+0x370>)
 800860e:	3265      	adds	r2, #101	; 0x65
 8008610:	601a      	str	r2, [r3, #0]
						break;
 8008612:	e195      	b.n	8008940 <BackEndTask+0x3c8>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008614:	1c6a      	adds	r2, r5, #1
 8008616:	4694      	mov	ip, r2
 8008618:	e023      	b.n	8008662 <BackEndTask+0xea>
 800861a:	2bbf      	cmp	r3, #191	; 0xbf
 800861c:	d11e      	bne.n	800865c <BackEndTask+0xe4>
 800861e:	780a      	ldrb	r2, [r1, #0]
 8008620:	2a00      	cmp	r2, #0
 8008622:	d1cb      	bne.n	80085bc <BackEndTask+0x44>
										UARTRxBuf[port - 1][j] =0;
 8008624:	4642      	mov	r2, r8
 8008626:	0052      	lsls	r2, r2, #1
 8008628:	4442      	add	r2, r8
 800862a:	0192      	lsls	r2, r2, #6
 800862c:	49af      	ldr	r1, [pc, #700]	; (80088ec <BackEndTask+0x374>)
 800862e:	188a      	adds	r2, r1, r2
 8008630:	2100      	movs	r1, #0
 8008632:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8008634:	3301      	adds	r3, #1
 8008636:	9a03      	ldr	r2, [sp, #12]
 8008638:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800863a:	4bad      	ldr	r3, [pc, #692]	; (80088f0 <BackEndTask+0x378>)
 800863c:	781a      	ldrb	r2, [r3, #0]
 800863e:	48ad      	ldr	r0, [pc, #692]	; (80088f4 <BackEndTask+0x37c>)
 8008640:	5481      	strb	r1, [r0, r2]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8008642:	2203      	movs	r2, #3
 8008644:	9902      	ldr	r1, [sp, #8]
 8008646:	704a      	strb	r2, [r1, #1]
										PcPort =port;
 8008648:	465a      	mov	r2, fp
 800864a:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 800864c:	4baa      	ldr	r3, [pc, #680]	; (80088f8 <BackEndTask+0x380>)
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	2202      	movs	r2, #2
 8008654:	2100      	movs	r1, #0
 8008656:	f007 fc9f 	bl	800ff98 <xTaskGenericNotify>
										break;
 800865a:	e7af      	b.n	80085bc <BackEndTask+0x44>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 800865c:	3301      	adds	r3, #1
 800865e:	2bc0      	cmp	r3, #192	; 0xc0
 8008660:	d0ac      	beq.n	80085bc <BackEndTask+0x44>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008662:	5cca      	ldrb	r2, [r1, r3]
 8008664:	2a0d      	cmp	r2, #13
 8008666:	d1f9      	bne.n	800865c <BackEndTask+0xe4>
 8008668:	2bbe      	cmp	r3, #190	; 0xbe
 800866a:	dcd6      	bgt.n	800861a <BackEndTask+0xa2>
 800866c:	4662      	mov	r2, ip
 800866e:	5cd2      	ldrb	r2, [r2, r3]
 8008670:	2a00      	cmp	r2, #0
 8008672:	d0d7      	beq.n	8008624 <BackEndTask+0xac>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8008674:	3301      	adds	r3, #1
 8008676:	e7f4      	b.n	8008662 <BackEndTask+0xea>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8008678:	22bf      	movs	r2, #191	; 0xbf
 800867a:	5ca9      	ldrb	r1, [r5, r2]
 800867c:	4a9f      	ldr	r2, [pc, #636]	; (80088fc <BackEndTask+0x384>)
 800867e:	6011      	str	r1, [r2, #0]
					parseStart =0;
 8008680:	4a9f      	ldr	r2, [pc, #636]	; (8008900 <BackEndTask+0x388>)
 8008682:	2100      	movs	r1, #0
 8008684:	6011      	str	r1, [r2, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8008686:	4a9d      	ldr	r2, [pc, #628]	; (80088fc <BackEndTask+0x384>)
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	4692      	mov	sl, r2
 800868c:	3203      	adds	r2, #3
 800868e:	9204      	str	r2, [sp, #16]
 8008690:	189a      	adds	r2, r3, r2
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8008692:	2abf      	cmp	r2, #191	; 0xbf
 8008694:	dc64      	bgt.n	8008760 <BackEndTask+0x1e8>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8008696:	499b      	ldr	r1, [pc, #620]	; (8008904 <BackEndTask+0x38c>)
 8008698:	600a      	str	r2, [r1, #0]
				if(packetStart != packetEnd) // Non-empty packet
 800869a:	4a9a      	ldr	r2, [pc, #616]	; (8008904 <BackEndTask+0x38c>)
 800869c:	6812      	ldr	r2, [r2, #0]
 800869e:	4293      	cmp	r3, r2
 80086a0:	d028      	beq.n	80086f4 <BackEndTask+0x17c>
					if(packetStart < packetEnd){
 80086a2:	da61      	bge.n	8008768 <BackEndTask+0x1f0>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 80086a4:	3bc0      	subs	r3, #192	; 0xc0
 80086a6:	0019      	movs	r1, r3
 80086a8:	0063      	lsls	r3, r4, #1
 80086aa:	191b      	adds	r3, r3, r4
 80086ac:	019b      	lsls	r3, r3, #6
 80086ae:	18c9      	adds	r1, r1, r3
 80086b0:	4b8e      	ldr	r3, [pc, #568]	; (80088ec <BackEndTask+0x374>)
 80086b2:	18c9      	adds	r1, r1, r3
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	4894      	ldr	r0, [pc, #592]	; (8008908 <BackEndTask+0x390>)
 80086b8:	f00b faa2 	bl	8013c00 <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 80086bc:	4651      	mov	r1, sl
 80086be:	3103      	adds	r1, #3
 80086c0:	b289      	uxth	r1, r1
 80086c2:	4b91      	ldr	r3, [pc, #580]	; (8008908 <BackEndTask+0x390>)
 80086c4:	469a      	mov	sl, r3
 80086c6:	0018      	movs	r0, r3
 80086c8:	f003 fe46 	bl	800c358 <CalculateCRC8>
 80086cc:	9004      	str	r0, [sp, #16]
					memset(crcBuffer,0,sizeof(crcBuffer));
 80086ce:	2238      	movs	r2, #56	; 0x38
 80086d0:	2100      	movs	r1, #0
 80086d2:	4650      	mov	r0, sl
 80086d4:	f00b fa9d 	bl	8013c12 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 80086d8:	4b8a      	ldr	r3, [pc, #552]	; (8008904 <BackEndTask+0x38c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	469a      	mov	sl, r3
 80086de:	4643      	mov	r3, r8
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4443      	add	r3, r8
 80086e4:	019b      	lsls	r3, r3, #6
 80086e6:	4a81      	ldr	r2, [pc, #516]	; (80088ec <BackEndTask+0x374>)
 80086e8:	18d3      	adds	r3, r2, r3
 80086ea:	4652      	mov	r2, sl
 80086ec:	5c9b      	ldrb	r3, [r3, r2]
 80086ee:	9a04      	ldr	r2, [sp, #16]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d052      	beq.n	800879a <BackEndTask+0x222>
				if(packetStart < packetEnd){
 80086f4:	4b7c      	ldr	r3, [pc, #496]	; (80088e8 <BackEndTask+0x370>)
 80086f6:	6818      	ldr	r0, [r3, #0]
 80086f8:	4a82      	ldr	r2, [pc, #520]	; (8008904 <BackEndTask+0x38c>)
 80086fa:	6813      	ldr	r3, [r2, #0]
 80086fc:	4698      	mov	r8, r3
 80086fe:	4298      	cmp	r0, r3
 8008700:	db00      	blt.n	8008704 <BackEndTask+0x18c>
 8008702:	e0c4      	b.n	800888e <BackEndTask+0x316>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8008704:	4a7d      	ldr	r2, [pc, #500]	; (80088fc <BackEndTask+0x384>)
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	3204      	adds	r2, #4
 800870a:	38c0      	subs	r0, #192	; 0xc0
 800870c:	0063      	lsls	r3, r4, #1
 800870e:	191b      	adds	r3, r3, r4
 8008710:	019b      	lsls	r3, r3, #6
 8008712:	18c0      	adds	r0, r0, r3
 8008714:	4b75      	ldr	r3, [pc, #468]	; (80088ec <BackEndTask+0x374>)
 8008716:	18c0      	adds	r0, r0, r3
 8008718:	2100      	movs	r1, #0
 800871a:	f00b fa7a 	bl	8013c12 <memset>
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 800871e:	4643      	mov	r3, r8
 8008720:	2bbf      	cmp	r3, #191	; 0xbf
 8008722:	d100      	bne.n	8008726 <BackEndTask+0x1ae>
 8008724:	e0cb      	b.n	80088be <BackEndTask+0x346>
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8008726:	3301      	adds	r3, #1
 8008728:	b2db      	uxtb	r3, r3
 800872a:	9a03      	ldr	r2, [sp, #12]
 800872c:	7013      	strb	r3, [r2, #0]
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 800872e:	464b      	mov	r3, r9
 8008730:	7858      	ldrb	r0, [r3, #1]
 8008732:	2200      	movs	r2, #0
 8008734:	212d      	movs	r1, #45	; 0x2d
 8008736:	f7ff fe25 	bl	8008384 <SendMessageToModule>
				++rejectedMsg;
 800873a:	4a74      	ldr	r2, [pc, #464]	; (800890c <BackEndTask+0x394>)
 800873c:	8813      	ldrh	r3, [r2, #0]
 800873e:	3301      	adds	r3, #1
 8008740:	8013      	strh	r3, [r2, #0]
 8008742:	e74e      	b.n	80085e2 <BackEndTask+0x6a>
					packetLength =UARTRxBuf[port - 1][0];
 8008744:	7829      	ldrb	r1, [r5, #0]
 8008746:	4a6d      	ldr	r2, [pc, #436]	; (80088fc <BackEndTask+0x384>)
 8008748:	6011      	str	r1, [r2, #0]
					parseStart =1;
 800874a:	4a6d      	ldr	r2, [pc, #436]	; (8008900 <BackEndTask+0x388>)
 800874c:	2101      	movs	r1, #1
 800874e:	6011      	str	r1, [r2, #0]
 8008750:	e799      	b.n	8008686 <BackEndTask+0x10e>
					packetLength =UARTRxBuf[port - 1][1];
 8008752:	7869      	ldrb	r1, [r5, #1]
 8008754:	4a69      	ldr	r2, [pc, #420]	; (80088fc <BackEndTask+0x384>)
 8008756:	6011      	str	r1, [r2, #0]
					parseStart =2;
 8008758:	4a69      	ldr	r2, [pc, #420]	; (8008900 <BackEndTask+0x388>)
 800875a:	2102      	movs	r1, #2
 800875c:	6011      	str	r1, [r2, #0]
 800875e:	e792      	b.n	8008686 <BackEndTask+0x10e>
					packetEnd -= MSG_RX_BUF_SIZE;
 8008760:	3ac0      	subs	r2, #192	; 0xc0
 8008762:	4968      	ldr	r1, [pc, #416]	; (8008904 <BackEndTask+0x38c>)
 8008764:	600a      	str	r2, [r1, #0]
 8008766:	e798      	b.n	800869a <BackEndTask+0x122>
						MSG_RX_BUF_SIZE - packetStart);
 8008768:	22c0      	movs	r2, #192	; 0xc0
 800876a:	1ad2      	subs	r2, r2, r3
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 800876c:	3bc0      	subs	r3, #192	; 0xc0
 800876e:	0019      	movs	r1, r3
 8008770:	0063      	lsls	r3, r4, #1
 8008772:	191b      	adds	r3, r3, r4
 8008774:	019b      	lsls	r3, r3, #6
 8008776:	18c9      	adds	r1, r1, r3
 8008778:	4b5c      	ldr	r3, [pc, #368]	; (80088ec <BackEndTask+0x374>)
 800877a:	18c9      	adds	r1, r1, r3
 800877c:	9205      	str	r2, [sp, #20]
 800877e:	4862      	ldr	r0, [pc, #392]	; (8008908 <BackEndTask+0x390>)
 8008780:	f00b fa3e 	bl	8013c00 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8008784:	4960      	ldr	r1, [pc, #384]	; (8008908 <BackEndTask+0x390>)
 8008786:	9b05      	ldr	r3, [sp, #20]
 8008788:	469c      	mov	ip, r3
 800878a:	4461      	add	r1, ip
 800878c:	0008      	movs	r0, r1
 800878e:	9a04      	ldr	r2, [sp, #16]
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	0029      	movs	r1, r5
 8008794:	f00b fa34 	bl	8013c00 <memcpy>
 8008798:	e790      	b.n	80086bc <BackEndTask+0x144>
						portStatus[port] =MSG;
 800879a:	2301      	movs	r3, #1
 800879c:	9a02      	ldr	r2, [sp, #8]
 800879e:	7053      	strb	r3, [r2, #1]
						messageLength[port - 1] =packetLength;
 80087a0:	4b56      	ldr	r3, [pc, #344]	; (80088fc <BackEndTask+0x384>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4698      	mov	r8, r3
 80087a6:	4b5a      	ldr	r3, [pc, #360]	; (8008910 <BackEndTask+0x398>)
 80087a8:	4642      	mov	r2, r8
 80087aa:	551a      	strb	r2, [r3, r4]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 80087ac:	4b54      	ldr	r3, [pc, #336]	; (8008900 <BackEndTask+0x388>)
 80087ae:	6819      	ldr	r1, [r3, #0]
 80087b0:	22bf      	movs	r2, #191	; 0xbf
 80087b2:	1a52      	subs	r2, r2, r1
 80087b4:	4590      	cmp	r8, r2
 80087b6:	dc31      	bgt.n	800881c <BackEndTask+0x2a4>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80087b8:	39c0      	subs	r1, #192	; 0xc0
 80087ba:	0063      	lsls	r3, r4, #1
 80087bc:	191b      	adds	r3, r3, r4
 80087be:	019b      	lsls	r3, r3, #6
 80087c0:	18c9      	adds	r1, r1, r3
 80087c2:	4b4a      	ldr	r3, [pc, #296]	; (80088ec <BackEndTask+0x374>)
 80087c4:	18c9      	adds	r1, r1, r3
 80087c6:	4642      	mov	r2, r8
 80087c8:	4648      	mov	r0, r9
 80087ca:	f00b fa19 	bl	8013c00 <memcpy>
						if(packetStart < packetEnd){
 80087ce:	4b46      	ldr	r3, [pc, #280]	; (80088e8 <BackEndTask+0x370>)
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	4582      	cmp	sl, r0
 80087d4:	dd3e      	ble.n	8008854 <BackEndTask+0x2dc>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 80087d6:	4642      	mov	r2, r8
 80087d8:	3204      	adds	r2, #4
 80087da:	38c0      	subs	r0, #192	; 0xc0
 80087dc:	0063      	lsls	r3, r4, #1
 80087de:	191b      	adds	r3, r3, r4
 80087e0:	019b      	lsls	r3, r3, #6
 80087e2:	18c0      	adds	r0, r0, r3
 80087e4:	4b41      	ldr	r3, [pc, #260]	; (80088ec <BackEndTask+0x374>)
 80087e6:	18c0      	adds	r0, r0, r3
 80087e8:	2100      	movs	r1, #0
 80087ea:	f00b fa12 	bl	8013c12 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 80087ee:	4653      	mov	r3, sl
 80087f0:	2bbf      	cmp	r3, #191	; 0xbf
 80087f2:	d046      	beq.n	8008882 <BackEndTask+0x30a>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 80087f4:	3301      	adds	r3, #1
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	9a03      	ldr	r2, [sp, #12]
 80087fa:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 80087fc:	4a45      	ldr	r2, [pc, #276]	; (8008914 <BackEndTask+0x39c>)
 80087fe:	8813      	ldrh	r3, [r2, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8008804:	464b      	mov	r3, r9
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4a43      	ldr	r2, [pc, #268]	; (8008918 <BackEndTask+0x3a0>)
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d001      	beq.n	8008814 <BackEndTask+0x29c>
 8008810:	2bfd      	cmp	r3, #253	; 0xfd
 8008812:	d938      	bls.n	8008886 <BackEndTask+0x30e>
							NotifyMessagingTask(port);
 8008814:	4658      	mov	r0, fp
 8008816:	f7ff fb0b 	bl	8007e30 <NotifyMessagingTask>
 800881a:	e6cf      	b.n	80085bc <BackEndTask+0x44>
							MSG_RX_BUF_SIZE - parseStart);
 800881c:	22c0      	movs	r2, #192	; 0xc0
 800881e:	1a52      	subs	r2, r2, r1
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8008820:	39c0      	subs	r1, #192	; 0xc0
 8008822:	0063      	lsls	r3, r4, #1
 8008824:	191b      	adds	r3, r3, r4
 8008826:	019b      	lsls	r3, r3, #6
 8008828:	18c9      	adds	r1, r1, r3
 800882a:	4b30      	ldr	r3, [pc, #192]	; (80088ec <BackEndTask+0x374>)
 800882c:	18c9      	adds	r1, r1, r3
 800882e:	9202      	str	r2, [sp, #8]
 8008830:	4648      	mov	r0, r9
 8008832:	f00b f9e5 	bl	8013c00 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8008836:	9a02      	ldr	r2, [sp, #8]
 8008838:	0010      	movs	r0, r2
 800883a:	3838      	subs	r0, #56	; 0x38
 800883c:	00e3      	lsls	r3, r4, #3
 800883e:	1b1b      	subs	r3, r3, r4
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	18c0      	adds	r0, r0, r3
 8008844:	4b35      	ldr	r3, [pc, #212]	; (800891c <BackEndTask+0x3a4>)
 8008846:	18c0      	adds	r0, r0, r3
 8008848:	4643      	mov	r3, r8
 800884a:	1a9a      	subs	r2, r3, r2
 800884c:	0029      	movs	r1, r5
 800884e:	f00b f9d7 	bl	8013c00 <memcpy>
 8008852:	e7bc      	b.n	80087ce <BackEndTask+0x256>
							MSG_RX_BUF_SIZE - packetStart);
 8008854:	22c0      	movs	r2, #192	; 0xc0
 8008856:	1a12      	subs	r2, r2, r0
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8008858:	38c0      	subs	r0, #192	; 0xc0
 800885a:	0063      	lsls	r3, r4, #1
 800885c:	191b      	adds	r3, r3, r4
 800885e:	019b      	lsls	r3, r3, #6
 8008860:	18c0      	adds	r0, r0, r3
 8008862:	4b22      	ldr	r3, [pc, #136]	; (80088ec <BackEndTask+0x374>)
 8008864:	18c0      	adds	r0, r0, r3
 8008866:	9202      	str	r2, [sp, #8]
 8008868:	2100      	movs	r1, #0
 800886a:	f00b f9d2 	bl	8013c12 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800886e:	4643      	mov	r3, r8
 8008870:	3304      	adds	r3, #4
 8008872:	001a      	movs	r2, r3
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	1ad2      	subs	r2, r2, r3
 8008878:	2100      	movs	r1, #0
 800887a:	0028      	movs	r0, r5
 800887c:	f00b f9c9 	bl	8013c12 <memset>
 8008880:	e7b5      	b.n	80087ee <BackEndTask+0x276>
							UARTRxBufIndex[port - 1] =0;
 8008882:	2300      	movs	r3, #0
 8008884:	e7b8      	b.n	80087f8 <BackEndTask+0x280>
							ForwardReceivedMessage(port);
 8008886:	4658      	mov	r0, fp
 8008888:	f7ff fd14 	bl	80082b4 <ForwardReceivedMessage>
 800888c:	e696      	b.n	80085bc <BackEndTask+0x44>
					MSG_RX_BUF_SIZE - packetStart);
 800888e:	22c0      	movs	r2, #192	; 0xc0
 8008890:	1a13      	subs	r3, r2, r0
 8008892:	469a      	mov	sl, r3
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8008894:	38c0      	subs	r0, #192	; 0xc0
 8008896:	0063      	lsls	r3, r4, #1
 8008898:	191b      	adds	r3, r3, r4
 800889a:	019b      	lsls	r3, r3, #6
 800889c:	18c0      	adds	r0, r0, r3
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <BackEndTask+0x374>)
 80088a0:	18c0      	adds	r0, r0, r3
 80088a2:	4652      	mov	r2, sl
 80088a4:	2100      	movs	r1, #0
 80088a6:	f00b f9b4 	bl	8013c12 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 80088aa:	4b14      	ldr	r3, [pc, #80]	; (80088fc <BackEndTask+0x384>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	3204      	adds	r2, #4
 80088b0:	4653      	mov	r3, sl
 80088b2:	1ad2      	subs	r2, r2, r3
 80088b4:	2100      	movs	r1, #0
 80088b6:	0028      	movs	r0, r5
 80088b8:	f00b f9ab 	bl	8013c12 <memset>
 80088bc:	e72f      	b.n	800871e <BackEndTask+0x1a6>
					UARTRxBufIndex[port - 1] =0;
 80088be:	2300      	movs	r3, #0
 80088c0:	e733      	b.n	800872a <BackEndTask+0x1b2>
					portStatus[port] =FREE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	9a02      	ldr	r2, [sp, #8]
 80088c6:	7053      	strb	r3, [r2, #1]
 80088c8:	e695      	b.n	80085f6 <BackEndTask+0x7e>
			}
		}

		taskYIELD();
 80088ca:	f007 fdd3 	bl	8010474 <vPortYield>
		for(port =1; port <= NumOfPorts; port++){
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <BackEndTask+0x37c>)
 80088d0:	469b      	mov	fp, r3
 80088d2:	4d06      	ldr	r5, [pc, #24]	; (80088ec <BackEndTask+0x374>)
 80088d4:	4f12      	ldr	r7, [pc, #72]	; (8008920 <BackEndTask+0x3a8>)
 80088d6:	4b13      	ldr	r3, [pc, #76]	; (8008924 <BackEndTask+0x3ac>)
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <BackEndTask+0x3a4>)
 80088dc:	4699      	mov	r9, r3
void BackEndTask(void *argument){
 80088de:	2401      	movs	r4, #1
 80088e0:	465e      	mov	r6, fp
 80088e2:	e678      	b.n	80085d6 <BackEndTask+0x5e>
 80088e4:	20006278 	.word	0x20006278
 80088e8:	20000f88 	.word	0x20000f88
 80088ec:	20000a4c 	.word	0x20000a4c
 80088f0:	200002b8 	.word	0x200002b8
 80088f4:	20000878 	.word	0x20000878
 80088f8:	20000de8 	.word	0x20000de8
 80088fc:	20000f84 	.word	0x20000f84
 8008900:	20000f8c 	.word	0x20000f8c
 8008904:	20000f80 	.word	0x20000f80
 8008908:	20000c90 	.word	0x20000c90
 800890c:	20000fe0 	.word	0x20000fe0
 8008910:	200006cb 	.word	0x200006cb
 8008914:	20000e28 	.word	0x20000e28
 8008918:	2000080e 	.word	0x2000080e
 800891c:	2000054c 	.word	0x2000054c
 8008920:	20000a48 	.word	0x20000a48
 8008924:	20000c8c 	.word	0x20000c8c
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8008928:	3201      	adds	r2, #1
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 800892a:	2abe      	cmp	r2, #190	; 0xbe
 800892c:	dd00      	ble.n	8008930 <BackEndTask+0x3b8>
 800892e:	e636      	b.n	800859e <BackEndTask+0x26>
 8008930:	5ca9      	ldrb	r1, [r5, r2]
 8008932:	2948      	cmp	r1, #72	; 0x48
 8008934:	d1f8      	bne.n	8008928 <BackEndTask+0x3b0>
 8008936:	5c81      	ldrb	r1, [r0, r2]
 8008938:	295a      	cmp	r1, #90	; 0x5a
 800893a:	d1f5      	bne.n	8008928 <BackEndTask+0x3b0>
						packetStart =i;
 800893c:	4b10      	ldr	r3, [pc, #64]	; (8008980 <BackEndTask+0x408>)
 800893e:	601a      	str	r2, [r3, #0]
				totalnumberofrecevedmesg++;
 8008940:	4b10      	ldr	r3, [pc, #64]	; (8008984 <BackEndTask+0x40c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	3301      	adds	r3, #1
 8008948:	4a0e      	ldr	r2, [pc, #56]	; (8008984 <BackEndTask+0x40c>)
 800894a:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <BackEndTask+0x408>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2bbd      	cmp	r3, #189	; 0xbd
 8008952:	d100      	bne.n	8008956 <BackEndTask+0x3de>
 8008954:	e690      	b.n	8008678 <BackEndTask+0x100>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8008956:	2bbe      	cmp	r3, #190	; 0xbe
 8008958:	d100      	bne.n	800895c <BackEndTask+0x3e4>
 800895a:	e6f3      	b.n	8008744 <BackEndTask+0x1cc>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 800895c:	2bbf      	cmp	r3, #191	; 0xbf
 800895e:	d100      	bne.n	8008962 <BackEndTask+0x3ea>
 8008960:	e6f7      	b.n	8008752 <BackEndTask+0x1da>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8008962:	4642      	mov	r2, r8
 8008964:	0052      	lsls	r2, r2, #1
 8008966:	4442      	add	r2, r8
 8008968:	0191      	lsls	r1, r2, #6
 800896a:	4a07      	ldr	r2, [pc, #28]	; (8008988 <BackEndTask+0x410>)
 800896c:	1852      	adds	r2, r2, r1
 800896e:	18d2      	adds	r2, r2, r3
 8008970:	7891      	ldrb	r1, [r2, #2]
 8008972:	4a06      	ldr	r2, [pc, #24]	; (800898c <BackEndTask+0x414>)
 8008974:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 8008976:	1cda      	adds	r2, r3, #3
 8008978:	4905      	ldr	r1, [pc, #20]	; (8008990 <BackEndTask+0x418>)
 800897a:	600a      	str	r2, [r1, #0]
 800897c:	e683      	b.n	8008686 <BackEndTask+0x10e>
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	20000f88 	.word	0x20000f88
 8008984:	20000fe4 	.word	0x20000fe4
 8008988:	20000a4c 	.word	0x20000a4c
 800898c:	20000f84 	.word	0x20000f84
 8008990:	20000f8c 	.word	0x20000f8c

08008994 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008994:	2001      	movs	r0, #1
 8008996:	4770      	bx	lr

08008998 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899a:	46de      	mov	lr, fp
 800899c:	4657      	mov	r7, sl
 800899e:	464e      	mov	r6, r9
 80089a0:	4645      	mov	r5, r8
 80089a2:	b5e0      	push	{r5, r6, r7, lr}
 80089a4:	b093      	sub	sp, #76	; 0x4c
 80089a6:	2300      	movs	r3, #0
 80089a8:	9305      	str	r3, [sp, #20]
 80089aa:	9309      	str	r3, [sp, #36]	; 0x24
	port =(int8_t )(unsigned )argument;
 80089ac:	b2c3      	uxtb	r3, r0
 80089ae:	9308      	str	r3, [sp, #32]
 80089b0:	27ff      	movs	r7, #255	; 0xff
 80089b2:	4007      	ands	r7, r0
		if(messageLength[port - 1]){
 80089b4:	1e7c      	subs	r4, r7, #1
 80089b6:	00e3      	lsls	r3, r4, #3
 80089b8:	1b1b      	subs	r3, r3, r4
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	930a      	str	r3, [sp, #40]	; 0x28
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80089be:	4ae0      	ldr	r2, [pc, #896]	; (8008d40 <PxMessagingTask+0x3a8>)
 80089c0:	18d2      	adds	r2, r2, r3
 80089c2:	9204      	str	r2, [sp, #16]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	930c      	str	r3, [sp, #48]	; 0x30
	HAL_StatusTypeDef status =HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	930b      	str	r3, [sp, #44]	; 0x2c
	BOS_Status result =BOS_OK;
 80089cc:	2500      	movs	r5, #0
			if(cMessage[port - 1][2] >> 7){
 80089ce:	00e3      	lsls	r3, r4, #3
 80089d0:	1b1b      	subs	r3, r3, r4
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	469a      	mov	sl, r3
 80089d6:	0013      	movs	r3, r2
 80089d8:	9207      	str	r2, [sp, #28]
 80089da:	3302      	adds	r3, #2
 80089dc:	469b      	mov	fp, r3
 80089de:	4656      	mov	r6, sl
 80089e0:	46aa      	mov	sl, r5
 80089e2:	e029      	b.n	8008a38 <PxMessagingTask+0xa0>
				code =cMessage[port - 1][3 + shift];
 80089e4:	4bd6      	ldr	r3, [pc, #856]	; (8008d40 <PxMessagingTask+0x3a8>)
 80089e6:	199b      	adds	r3, r3, r6
 80089e8:	1818      	adds	r0, r3, r0
 80089ea:	78c3      	ldrb	r3, [r0, #3]
 80089ec:	4699      	mov	r9, r3
 80089ee:	e057      	b.n	8008aa0 <PxMessagingTask+0x108>
				BOSMessaging.Acknowledgment =false;
 80089f0:	4bd4      	ldr	r3, [pc, #848]	; (8008d44 <PxMessagingTask+0x3ac>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 80089f6:	212c      	movs	r1, #44	; 0x2c
 80089f8:	9805      	ldr	r0, [sp, #20]
 80089fa:	f7ff fcc3 	bl	8008384 <SendMessageToModule>
 80089fe:	e052      	b.n	8008aa6 <PxMessagingTask+0x10e>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008a00:	464b      	mov	r3, r9
 8008a02:	2b19      	cmp	r3, #25
 8008a04:	d069      	beq.n	8008ada <PxMessagingTask+0x142>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008a06:	2b1a      	cmp	r3, #26
 8008a08:	d071      	beq.n	8008aee <PxMessagingTask+0x156>
		if(result == BOS_ERR_UnknownMessage){
 8008a0a:	4653      	mov	r3, sl
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <PxMessagingTask+0x7c>
 8008a10:	f001 fb72 	bl	800a0f8 <PxMessagingTask+0x1760>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008a14:	4dcc      	ldr	r5, [pc, #816]	; (8008d48 <PxMessagingTask+0x3b0>)
 8008a16:	5d2a      	ldrb	r2, [r5, r4]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	9804      	ldr	r0, [sp, #16]
 8008a1c:	f00b f8f9 	bl	8013c12 <memset>
		messageLength[port - 1] =0;
 8008a20:	2300      	movs	r3, #0
 8008a22:	552b      	strb	r3, [r5, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008a24:	4bc9      	ldr	r3, [pc, #804]	; (8008d4c <PxMessagingTask+0x3b4>)
 8008a26:	5ddb      	ldrb	r3, [r3, r7]
 8008a28:	3b02      	subs	r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d902      	bls.n	8008a34 <PxMessagingTask+0x9c>
			portStatus[port] =FREE;
 8008a2e:	4bc7      	ldr	r3, [pc, #796]	; (8008d4c <PxMessagingTask+0x3b4>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 8008a34:	f007 fd1e 	bl	8010474 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008a38:	2101      	movs	r1, #1
 8008a3a:	4249      	negs	r1, r1
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	f007 fa5f 	bl	800ff00 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008a42:	4bc1      	ldr	r3, [pc, #772]	; (8008d48 <PxMessagingTask+0x3b0>)
 8008a44:	5d1b      	ldrb	r3, [r3, r4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0df      	beq.n	8008a0a <PxMessagingTask+0x72>
			if(cMessage[port - 1][2] >> 7){
 8008a4a:	465b      	mov	r3, fp
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	09da      	lsrs	r2, r3, #7
 8008a50:	49bf      	ldr	r1, [pc, #764]	; (8008d50 <PxMessagingTask+0x3b8>)
 8008a52:	700a      	strb	r2, [r1, #0]
			dst =cMessage[port - 1][0];
 8008a54:	4aba      	ldr	r2, [pc, #744]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008a56:	5cb2      	ldrb	r2, [r6, r2]
 8008a58:	4690      	mov	r8, r2
			src =cMessage[port - 1][1];
 8008a5a:	9a07      	ldr	r2, [sp, #28]
 8008a5c:	7852      	ldrb	r2, [r2, #1]
 8008a5e:	9205      	str	r2, [sp, #20]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8008a60:	2201      	movs	r2, #1
 8008a62:	0010      	movs	r0, r2
 8008a64:	4018      	ands	r0, r3
			shift =0;
 8008a66:	9006      	str	r0, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008a68:	49b6      	ldr	r1, [pc, #728]	; (8008d44 <PxMessagingTask+0x3ac>)
 8008a6a:	4689      	mov	r9, r1
 8008a6c:	071d      	lsls	r5, r3, #28
 8008a6e:	0fad      	lsrs	r5, r5, #30
 8008a70:	704d      	strb	r5, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008a72:	091d      	lsrs	r5, r3, #4
 8008a74:	0011      	movs	r1, r2
 8008a76:	4029      	ands	r1, r5
 8008a78:	468c      	mov	ip, r1
 8008a7a:	000a      	movs	r2, r1
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	70ca      	strb	r2, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008a80:	2260      	movs	r2, #96	; 0x60
 8008a82:	401a      	ands	r2, r3
 8008a84:	700a      	strb	r2, [r1, #0]
			if(extendCode == true){
 8008a86:	079b      	lsls	r3, r3, #30
 8008a88:	d5ac      	bpl.n	80089e4 <PxMessagingTask+0x4c>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008a8a:	4bad      	ldr	r3, [pc, #692]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008a8c:	199b      	adds	r3, r3, r6
 8008a8e:	181b      	adds	r3, r3, r0
 8008a90:	791a      	ldrb	r2, [r3, #4]
 8008a92:	0212      	lsls	r2, r2, #8
 8008a94:	78db      	ldrb	r3, [r3, #3]
 8008a96:	189b      	adds	r3, r3, r2
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	4699      	mov	r9, r3
				++shift;
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	9306      	str	r3, [sp, #24]
			if(true == BOSMessaging.received_Acknowledgment){
 8008aa0:	4663      	mov	r3, ip
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1a4      	bne.n	80089f0 <PxMessagingTask+0x58>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008aa6:	4643      	mov	r3, r8
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2bfc      	cmp	r3, #252	; 0xfc
 8008aae:	d82b      	bhi.n	8008b08 <PxMessagingTask+0x170>
 8008ab0:	4ba8      	ldr	r3, [pc, #672]	; (8008d54 <PxMessagingTask+0x3bc>)
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	4543      	cmp	r3, r8
 8008ab6:	d101      	bne.n	8008abc <PxMessagingTask+0x124>
 8008ab8:	f001 fb52 	bl	800a160 <PxMessagingTask+0x17c8>
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <PxMessagingTask+0x12c>
 8008ac0:	f001 fb47 	bl	800a152 <PxMessagingTask+0x17ba>
				ForwardReceivedMessage(port);
 8008ac4:	9808      	ldr	r0, [sp, #32]
 8008ac6:	f7ff fbf5 	bl	80082b4 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008aca:	4b9e      	ldr	r3, [pc, #632]	; (8008d44 <PxMessagingTask+0x3ac>)
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d096      	beq.n	8008a00 <PxMessagingTask+0x68>
					indMode =IND_SHORT_BLINK;
 8008ad2:	4ba1      	ldr	r3, [pc, #644]	; (8008d58 <PxMessagingTask+0x3c0>)
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	701a      	strb	r2, [r3, #0]
 8008ad8:	e792      	b.n	8008a00 <PxMessagingTask+0x68>
					Delay_ms(100);
 8008ada:	2064      	movs	r0, #100	; 0x64
 8008adc:	f007 fe34 	bl	8010748 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9a08      	ldr	r2, [sp, #32]
 8008ae4:	4641      	mov	r1, r8
 8008ae6:	9805      	ldr	r0, [sp, #20]
 8008ae8:	f001 fd7a 	bl	800a5e0 <remoteBootloaderUpdate>
 8008aec:	e78d      	b.n	8008a0a <PxMessagingTask+0x72>
					Delay_ms(100);
 8008aee:	2064      	movs	r0, #100	; 0x64
 8008af0:	f007 fe2a 	bl	8010748 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008af4:	4b92      	ldr	r3, [pc, #584]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008af6:	199b      	adds	r3, r3, r6
 8008af8:	9a06      	ldr	r2, [sp, #24]
 8008afa:	5c9b      	ldrb	r3, [r3, r2]
 8008afc:	9a08      	ldr	r2, [sp, #32]
 8008afe:	4641      	mov	r1, r8
 8008b00:	9805      	ldr	r0, [sp, #20]
 8008b02:	f001 fd6d 	bl	800a5e0 <remoteBootloaderUpdate>
 8008b06:	e780      	b.n	8008a0a <PxMessagingTask+0x72>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008b08:	4643      	mov	r3, r8
 8008b0a:	2bff      	cmp	r3, #255	; 0xff
 8008b0c:	d041      	beq.n	8008b92 <PxMessagingTask+0x1fa>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008b0e:	2bfe      	cmp	r3, #254	; 0xfe
 8008b10:	d001      	beq.n	8008b16 <PxMessagingTask+0x17e>
 8008b12:	f001 fb25 	bl	800a160 <PxMessagingTask+0x17c8>
 8008b16:	4b8c      	ldr	r3, [pc, #560]	; (8008d48 <PxMessagingTask+0x3b0>)
 8008b18:	5d1a      	ldrb	r2, [r3, r4]
 8008b1a:	4b89      	ldr	r3, [pc, #548]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008b1c:	199b      	adds	r3, r3, r6
 8008b1e:	189b      	adds	r3, r3, r2
 8008b20:	3b01      	subs	r3, #1
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	4a8d      	ldr	r2, [pc, #564]	; (8008d5c <PxMessagingTask+0x3c4>)
 8008b26:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8008b28:	2103      	movs	r1, #3
 8008b2a:	468a      	mov	sl, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d100      	bne.n	8008b32 <PxMessagingTask+0x19a>
 8008b30:	e770      	b.n	8008a14 <PxMessagingTask+0x7c>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008b32:	4a8a      	ldr	r2, [pc, #552]	; (8008d5c <PxMessagingTask+0x3c4>)
 8008b34:	7013      	strb	r3, [r2, #0]
 8008b36:	4a8a      	ldr	r2, [pc, #552]	; (8008d60 <PxMessagingTask+0x3c8>)
 8008b38:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8008b3a:	9908      	ldr	r1, [sp, #32]
 8008b3c:	20fe      	movs	r0, #254	; 0xfe
 8008b3e:	f7ff fbd9 	bl	80082f4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008b42:	4b81      	ldr	r3, [pc, #516]	; (8008d48 <PxMessagingTask+0x3b0>)
 8008b44:	5d19      	ldrb	r1, [r3, r4]
 8008b46:	4b7e      	ldr	r3, [pc, #504]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008b48:	199b      	adds	r3, r3, r6
 8008b4a:	185b      	adds	r3, r3, r1
 8008b4c:	1e5a      	subs	r2, r3, #1
 8008b4e:	2000      	movs	r0, #0
 8008b50:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8008b52:	3b02      	subs	r3, #2
 8008b54:	781a      	ldrb	r2, [r3, #0]
 8008b56:	9209      	str	r2, [sp, #36]	; 0x24
					for(i =0; i < temp; i++){
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	d101      	bne.n	8008b60 <PxMessagingTask+0x1c8>
 8008b5c:	f001 fae1 	bl	800a122 <PxMessagingTask+0x178a>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8008b60:	4b7c      	ldr	r3, [pc, #496]	; (8008d54 <PxMessagingTask+0x3bc>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	469c      	mov	ip, r3
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	18c8      	adds	r0, r1, r3
 8008b6a:	1a80      	subs	r0, r0, r2
 8008b6c:	3802      	subs	r0, #2
 8008b6e:	4b74      	ldr	r3, [pc, #464]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008b70:	18c0      	adds	r0, r0, r3
 8008b72:	2300      	movs	r3, #0
 8008b74:	4665      	mov	r5, ip
 8008b76:	468c      	mov	ip, r1
 8008b78:	0011      	movs	r1, r2
 8008b7a:	5cc2      	ldrb	r2, [r0, r3]
 8008b7c:	42aa      	cmp	r2, r5
 8008b7e:	d101      	bne.n	8008b84 <PxMessagingTask+0x1ec>
 8008b80:	f001 fad3 	bl	800a12a <PxMessagingTask+0x1792>
					for(i =0; i < temp; i++){
 8008b84:	3301      	adds	r3, #1
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	428a      	cmp	r2, r1
 8008b8a:	d3f6      	bcc.n	8008b7a <PxMessagingTask+0x1e2>
					result =BOS_ERR_WrongID;
 8008b8c:	2366      	movs	r3, #102	; 0x66
 8008b8e:	469a      	mov	sl, r3
 8008b90:	e740      	b.n	8008a14 <PxMessagingTask+0x7c>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008b92:	4b6d      	ldr	r3, [pc, #436]	; (8008d48 <PxMessagingTask+0x3b0>)
 8008b94:	5d1a      	ldrb	r2, [r3, r4]
 8008b96:	4b6a      	ldr	r3, [pc, #424]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008b98:	199b      	adds	r3, r3, r6
 8008b9a:	189b      	adds	r3, r3, r2
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	4a6e      	ldr	r2, [pc, #440]	; (8008d5c <PxMessagingTask+0x3c4>)
 8008ba2:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	468a      	mov	sl, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d100      	bne.n	8008bae <PxMessagingTask+0x216>
 8008bac:	e72d      	b.n	8008a0a <PxMessagingTask+0x72>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008bae:	4a6b      	ldr	r2, [pc, #428]	; (8008d5c <PxMessagingTask+0x3c4>)
 8008bb0:	7013      	strb	r3, [r2, #0]
 8008bb2:	4a6b      	ldr	r2, [pc, #428]	; (8008d60 <PxMessagingTask+0x3c8>)
 8008bb4:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008bb6:	9908      	ldr	r1, [sp, #32]
 8008bb8:	20ff      	movs	r0, #255	; 0xff
 8008bba:	f7ff fb9b 	bl	80082f4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008bbe:	4b62      	ldr	r3, [pc, #392]	; (8008d48 <PxMessagingTask+0x3b0>)
 8008bc0:	5d1a      	ldrb	r2, [r3, r4]
 8008bc2:	4b5f      	ldr	r3, [pc, #380]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008bc4:	199b      	adds	r3, r3, r6
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	2200      	movs	r2, #0
 8008bcc:	701a      	strb	r2, [r3, #0]
				if(result == BOS_OK){
 8008bce:	f001 facc 	bl	800a16a <PxMessagingTask+0x17d2>
							for(p =0; p < numOfParams; p++){
 8008bd2:	4653      	mov	r3, sl
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d022      	beq.n	8008c1e <PxMessagingTask+0x286>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008bd8:	9b05      	ldr	r3, [sp, #20]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	469c      	mov	ip, r3
 8008bde:	005a      	lsls	r2, r3, #1
 8008be0:	4b60      	ldr	r3, [pc, #384]	; (8008d64 <PxMessagingTask+0x3cc>)
 8008be2:	5ad3      	ldrh	r3, [r2, r3]
 8008be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008be6:	4690      	mov	r8, r2
 8008be8:	4445      	add	r5, r8
 8008bea:	4a55      	ldr	r2, [pc, #340]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008bec:	18ad      	adds	r5, r5, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2080      	movs	r0, #128	; 0x80
 8008bf2:	0200      	lsls	r0, r0, #8
 8008bf4:	46a0      	mov	r8, r4
 8008bf6:	4654      	mov	r4, sl
 8008bf8:	46b1      	mov	r9, r6
 8008bfa:	001e      	movs	r6, r3
 8008bfc:	5ca9      	ldrb	r1, [r5, r2]
 8008bfe:	3901      	subs	r1, #1
 8008c00:	0003      	movs	r3, r0
 8008c02:	410b      	asrs	r3, r1
 8008c04:	431e      	orrs	r6, r3
 8008c06:	b2b6      	uxth	r6, r6
							for(p =0; p < numOfParams; p++){
 8008c08:	3201      	adds	r2, #1
 8008c0a:	b2d3      	uxtb	r3, r2
 8008c0c:	42a3      	cmp	r3, r4
 8008c0e:	d3f5      	bcc.n	8008bfc <PxMessagingTask+0x264>
 8008c10:	4644      	mov	r4, r8
 8008c12:	0033      	movs	r3, r6
 8008c14:	464e      	mov	r6, r9
 8008c16:	4662      	mov	r2, ip
 8008c18:	0050      	lsls	r0, r2, #1
 8008c1a:	4a52      	ldr	r2, [pc, #328]	; (8008d64 <PxMessagingTask+0x3cc>)
 8008c1c:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8008c1e:	4b52      	ldr	r3, [pc, #328]	; (8008d68 <PxMessagingTask+0x3d0>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
							break;
 8008c24:	2300      	movs	r3, #0
 8008c26:	469a      	mov	sl, r3
 8008c28:	e6f4      	b.n	8008a14 <PxMessagingTask+0x7c>
							indMode =IND_PING;
 8008c2a:	4b4b      	ldr	r3, [pc, #300]	; (8008d58 <PxMessagingTask+0x3c0>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008c30:	200a      	movs	r0, #10
 8008c32:	f005 fe0a 	bl	800e84a <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008c36:	4b43      	ldr	r3, [pc, #268]	; (8008d44 <PxMessagingTask+0x3ac>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	2240      	movs	r2, #64	; 0x40
 8008c3c:	4393      	bics	r3, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4692      	mov	sl, r2
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	d000      	beq.n	8008c48 <PxMessagingTask+0x2b0>
 8008c46:	e6e5      	b.n	8008a14 <PxMessagingTask+0x7c>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008c48:	2102      	movs	r1, #2
 8008c4a:	9805      	ldr	r0, [sp, #20]
 8008c4c:	f7ff fb9a 	bl	8008384 <SendMessageToModule>
 8008c50:	e6e0      	b.n	8008a14 <PxMessagingTask+0x7c>
							if(!moduleAlias[myID][0])
 8008c52:	4b40      	ldr	r3, [pc, #256]	; (8008d54 <PxMessagingTask+0x3bc>)
 8008c54:	781a      	ldrb	r2, [r3, #0]
 8008c56:	0093      	lsls	r3, r2, #2
 8008c58:	189b      	adds	r3, r3, r2
 8008c5a:	005b      	lsls	r3, r3, #1
 8008c5c:	4a43      	ldr	r2, [pc, #268]	; (8008d6c <PxMessagingTask+0x3d4>)
 8008c5e:	5c9b      	ldrb	r3, [r3, r2]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d118      	bne.n	8008c96 <PxMessagingTask+0x2fe>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008c64:	9a05      	ldr	r2, [sp, #20]
 8008c66:	4942      	ldr	r1, [pc, #264]	; (8008d70 <PxMessagingTask+0x3d8>)
 8008c68:	4842      	ldr	r0, [pc, #264]	; (8008d74 <PxMessagingTask+0x3dc>)
 8008c6a:	f00b fd8b 	bl	8014784 <siprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008c6e:	4d41      	ldr	r5, [pc, #260]	; (8008d74 <PxMessagingTask+0x3dc>)
 8008c70:	0028      	movs	r0, r5
 8008c72:	f7f7 fa51 	bl	8000118 <strlen>
 8008c76:	b282      	uxth	r2, r0
 8008c78:	4b3f      	ldr	r3, [pc, #252]	; (8008d78 <PxMessagingTask+0x3e0>)
 8008c7a:	7818      	ldrb	r0, [r3, #0]
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	425b      	negs	r3, r3
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	3333      	adds	r3, #51	; 0x33
 8008c84:	0029      	movs	r1, r5
 8008c86:	f005 fc39 	bl	800e4fc <writePxMutex>
							responseStatus =BOS_OK;
 8008c8a:	4b37      	ldr	r3, [pc, #220]	; (8008d68 <PxMessagingTask+0x3d0>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	701a      	strb	r2, [r3, #0]
							break;
 8008c90:	2300      	movs	r3, #0
 8008c92:	469a      	mov	sl, r3
 8008c94:	e6be      	b.n	8008a14 <PxMessagingTask+0x7c>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8008c96:	230a      	movs	r3, #10
 8008c98:	9905      	ldr	r1, [sp, #20]
 8008c9a:	434b      	muls	r3, r1
 8008c9c:	4a33      	ldr	r2, [pc, #204]	; (8008d6c <PxMessagingTask+0x3d4>)
 8008c9e:	189b      	adds	r3, r3, r2
 8008ca0:	000a      	movs	r2, r1
 8008ca2:	4936      	ldr	r1, [pc, #216]	; (8008d7c <PxMessagingTask+0x3e4>)
 8008ca4:	4833      	ldr	r0, [pc, #204]	; (8008d74 <PxMessagingTask+0x3dc>)
 8008ca6:	f00b fd6d 	bl	8014784 <siprintf>
 8008caa:	e7e0      	b.n	8008c6e <PxMessagingTask+0x2d6>
							IND_ON();
 8008cac:	2180      	movs	r1, #128	; 0x80
 8008cae:	2090      	movs	r0, #144	; 0x90
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	0109      	lsls	r1, r1, #4
 8008cb4:	05c0      	lsls	r0, r0, #23
 8008cb6:	f009 f9c5 	bl	8012044 <HAL_GPIO_WritePin>
							break;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	469a      	mov	sl, r3
 8008cbe:	e6a9      	b.n	8008a14 <PxMessagingTask+0x7c>
							IND_OFF();
 8008cc0:	2180      	movs	r1, #128	; 0x80
 8008cc2:	2090      	movs	r0, #144	; 0x90
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	0109      	lsls	r1, r1, #4
 8008cc8:	05c0      	lsls	r0, r0, #23
 8008cca:	f009 f9bb 	bl	8012044 <HAL_GPIO_WritePin>
							break;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	469a      	mov	sl, r3
 8008cd2:	e69f      	b.n	8008a14 <PxMessagingTask+0x7c>
							IND_toggle();
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	2090      	movs	r0, #144	; 0x90
 8008cd8:	0109      	lsls	r1, r1, #4
 8008cda:	05c0      	lsls	r0, r0, #23
 8008cdc:	f009 f9b8 	bl	8012050 <HAL_GPIO_TogglePin>
							break;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	469a      	mov	sl, r3
 8008ce4:	e696      	b.n	8008a14 <PxMessagingTask+0x7c>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008ce6:	4b26      	ldr	r3, [pc, #152]	; (8008d80 <PxMessagingTask+0x3e8>)
 8008ce8:	469c      	mov	ip, r3
 8008cea:	00a3      	lsls	r3, r4, #2
 8008cec:	4a14      	ldr	r2, [pc, #80]	; (8008d40 <PxMessagingTask+0x3a8>)
 8008cee:	4691      	mov	r9, r2
 8008cf0:	44b1      	add	r9, r6
 8008cf2:	464a      	mov	r2, r9
 8008cf4:	1950      	adds	r0, r2, r5
 8008cf6:	7881      	ldrb	r1, [r0, #2]
 8008cf8:	4688      	mov	r8, r1
 8008cfa:	9905      	ldr	r1, [sp, #20]
 8008cfc:	0209      	lsls	r1, r1, #8
 8008cfe:	4441      	add	r1, r8
 8008d00:	4662      	mov	r2, ip
 8008d02:	5299      	strh	r1, [r3, r2]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008d04:	4463      	add	r3, ip
 8008d06:	464a      	mov	r2, r9
 8008d08:	5d51      	ldrb	r1, [r2, r5]
 8008d0a:	0209      	lsls	r1, r1, #8
 8008d0c:	7842      	ldrb	r2, [r0, #1]
 8008d0e:	1852      	adds	r2, r2, r1
 8008d10:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8008d12:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <PxMessagingTask+0x3ec>)
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <PxMessagingTask+0x3f0>)
 8008d18:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008d1a:	0a1b      	lsrs	r3, r3, #8
 8008d1c:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008d1e:	9d08      	ldr	r5, [sp, #32]
 8008d20:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8008d22:	2002      	movs	r0, #2
 8008d24:	f005 fd91 	bl	800e84a <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008d28:	2303      	movs	r3, #3
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	3308      	adds	r3, #8
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	0028      	movs	r0, r5
 8008d34:	f7ff f8a2 	bl	8007e7c <SendMessageFromPort>
							break;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	469a      	mov	sl, r3
 8008d3c:	e66a      	b.n	8008a14 <PxMessagingTask+0x7c>
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	2000054c 	.word	0x2000054c
 8008d44:	200061f8 	.word	0x200061f8
 8008d48:	200006cc 	.word	0x200006cc
 8008d4c:	20000878 	.word	0x20000878
 8008d50:	20000691 	.word	0x20000691
 8008d54:	2000080e 	.word	0x2000080e
 8008d58:	20000690 	.word	0x20000690
 8008d5c:	20000e2a 	.word	0x20000e2a
 8008d60:	200004f8 	.word	0x200004f8
 8008d64:	20006740 	.word	0x20006740
 8008d68:	20000890 	.word	0x20000890
 8008d6c:	20000700 	.word	0x20000700
 8008d70:	08019ee4 	.word	0x08019ee4
 8008d74:	20000f90 	.word	0x20000f90
 8008d78:	200002b8 	.word	0x200002b8
 8008d7c:	08019ef8 	.word	0x08019ef8
 8008d80:	20000810 	.word	0x20000810
 8008d84:	20000064 	.word	0x20000064
 8008d88:	200006d0 	.word	0x200006d0
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008d8c:	4bcf      	ldr	r3, [pc, #828]	; (80090cc <PxMessagingTask+0x734>)
 8008d8e:	469c      	mov	ip, r3
 8008d90:	00a3      	lsls	r3, r4, #2
 8008d92:	4acf      	ldr	r2, [pc, #828]	; (80090d0 <PxMessagingTask+0x738>)
 8008d94:	4691      	mov	r9, r2
 8008d96:	44b1      	add	r9, r6
 8008d98:	464a      	mov	r2, r9
 8008d9a:	1950      	adds	r0, r2, r5
 8008d9c:	7881      	ldrb	r1, [r0, #2]
 8008d9e:	4688      	mov	r8, r1
 8008da0:	9905      	ldr	r1, [sp, #20]
 8008da2:	0209      	lsls	r1, r1, #8
 8008da4:	4441      	add	r1, r8
 8008da6:	4662      	mov	r2, ip
 8008da8:	5299      	strh	r1, [r3, r2]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008daa:	4463      	add	r3, ip
 8008dac:	464a      	mov	r2, r9
 8008dae:	5d51      	ldrb	r1, [r2, r5]
 8008db0:	0209      	lsls	r1, r1, #8
 8008db2:	7842      	ldrb	r2, [r0, #1]
 8008db4:	1852      	adds	r2, r2, r1
 8008db6:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8008db8:	4bc6      	ldr	r3, [pc, #792]	; (80090d4 <PxMessagingTask+0x73c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]
							break;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	469a      	mov	sl, r3
 8008dc2:	e627      	b.n	8008a14 <PxMessagingTask+0x7c>
							ExploreNeighbors(port);
 8008dc4:	9808      	ldr	r0, [sp, #32]
 8008dc6:	f7fa feef 	bl	8003ba8 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008dca:	4bc3      	ldr	r3, [pc, #780]	; (80090d8 <PxMessagingTask+0x740>)
 8008dcc:	2202      	movs	r2, #2
 8008dce:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008dd0:	200a      	movs	r0, #10
 8008dd2:	f005 fd3a 	bl	800e84a <osDelay>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008dd6:	4bbd      	ldr	r3, [pc, #756]	; (80090cc <PxMessagingTask+0x734>)
 8008dd8:	4698      	mov	r8, r3
 8008dda:	2501      	movs	r5, #1
							temp =0;
 8008ddc:	2300      	movs	r3, #0
									messageParams[temp] =p;
 8008dde:	4642      	mov	r2, r8
 8008de0:	46a0      	mov	r8, r4
 8008de2:	46b1      	mov	r9, r6
 8008de4:	001e      	movs	r6, r3
 8008de6:	0014      	movs	r4, r2
 8008de8:	e004      	b.n	8008df4 <PxMessagingTask+0x45c>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008dea:	3501      	adds	r5, #1
 8008dec:	b2ed      	uxtb	r5, r5
 8008dee:	3404      	adds	r4, #4
 8008df0:	2d04      	cmp	r5, #4
 8008df2:	d00e      	beq.n	8008e12 <PxMessagingTask+0x47a>
								if(neighbors[p - 1][0]){
 8008df4:	8823      	ldrh	r3, [r4, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0f7      	beq.n	8008dea <PxMessagingTask+0x452>
									messageParams[temp] =p;
 8008dfa:	4bb8      	ldr	r3, [pc, #736]	; (80090dc <PxMessagingTask+0x744>)
 8008dfc:	559d      	strb	r5, [r3, r6]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008dfe:	1c70      	adds	r0, r6, #1
 8008e00:	469c      	mov	ip, r3
 8008e02:	4460      	add	r0, ip
 8008e04:	2204      	movs	r2, #4
 8008e06:	0021      	movs	r1, r4
 8008e08:	f00a fefa 	bl	8013c00 <memcpy>
									temp +=5;
 8008e0c:	3605      	adds	r6, #5
 8008e0e:	b2f6      	uxtb	r6, r6
 8008e10:	e7eb      	b.n	8008dea <PxMessagingTask+0x452>
 8008e12:	4644      	mov	r4, r8
 8008e14:	0033      	movs	r3, r6
 8008e16:	9609      	str	r6, [sp, #36]	; 0x24
 8008e18:	464e      	mov	r6, r9
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	210d      	movs	r1, #13
 8008e1e:	9805      	ldr	r0, [sp, #20]
 8008e20:	f7ff fab0 	bl	8008384 <SendMessageToModule>
							break;
 8008e24:	2300      	movs	r3, #0
 8008e26:	469a      	mov	sl, r3
 8008e28:	e5f4      	b.n	8008a14 <PxMessagingTask+0x7c>
							temp =numOfParams / 5;
 8008e2a:	2105      	movs	r1, #5
 8008e2c:	4650      	mov	r0, sl
 8008e2e:	f7f7 f98f 	bl	8000150 <__udivsi3>
 8008e32:	b2c3      	uxtb	r3, r0
 8008e34:	9309      	str	r3, [sp, #36]	; 0x24
							for(uint8_t k =0; k < temp; k++){
 8008e36:	4653      	mov	r3, sl
 8008e38:	2b04      	cmp	r3, #4
 8008e3a:	d921      	bls.n	8008e80 <PxMessagingTask+0x4e8>
 8008e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e3e:	1c53      	adds	r3, r2, #1
 8008e40:	195d      	adds	r5, r3, r5
 8008e42:	4ba3      	ldr	r3, [pc, #652]	; (80090d0 <PxMessagingTask+0x738>)
 8008e44:	46a8      	mov	r8, r5
 8008e46:	4498      	add	r8, r3
 8008e48:	2500      	movs	r5, #0
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008e4a:	4ba5      	ldr	r3, [pc, #660]	; (80090e0 <PxMessagingTask+0x748>)
 8008e4c:	4699      	mov	r9, r3
 8008e4e:	4643      	mov	r3, r8
 8008e50:	46a0      	mov	r8, r4
 8008e52:	9706      	str	r7, [sp, #24]
 8008e54:	0017      	movs	r7, r2
 8008e56:	46b2      	mov	sl, r6
 8008e58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e5a:	001c      	movs	r4, r3
 8008e5c:	1be3      	subs	r3, r4, r7
 8008e5e:	5d98      	ldrb	r0, [r3, r6]
 8008e60:	3801      	subs	r0, #1
 8008e62:	0080      	lsls	r0, r0, #2
 8008e64:	4448      	add	r0, r9
 8008e66:	2204      	movs	r2, #4
 8008e68:	0021      	movs	r1, r4
 8008e6a:	f00a fec9 	bl	8013c00 <memcpy>
							for(uint8_t k =0; k < temp; k++){
 8008e6e:	3501      	adds	r5, #1
 8008e70:	b2ed      	uxtb	r5, r5
 8008e72:	3405      	adds	r4, #5
 8008e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	d8f0      	bhi.n	8008e5c <PxMessagingTask+0x4c4>
 8008e7a:	4644      	mov	r4, r8
 8008e7c:	9f06      	ldr	r7, [sp, #24]
 8008e7e:	4656      	mov	r6, sl
							responseStatus =BOS_OK;
 8008e80:	4b94      	ldr	r3, [pc, #592]	; (80090d4 <PxMessagingTask+0x73c>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	701a      	strb	r2, [r3, #0]
							break;
 8008e86:	2300      	movs	r3, #0
 8008e88:	469a      	mov	sl, r3
 8008e8a:	e5c3      	b.n	8008a14 <PxMessagingTask+0x7c>
 8008e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8e:	18eb      	adds	r3, r5, r3
 8008e90:	3b01      	subs	r3, #1
 8008e92:	4a8f      	ldr	r2, [pc, #572]	; (80090d0 <PxMessagingTask+0x738>)
 8008e94:	4699      	mov	r9, r3
 8008e96:	4491      	add	r9, r2
							for(uint8_t k =0; k < temp; k++){
 8008e98:	2301      	movs	r3, #1
 8008e9a:	46a0      	mov	r8, r4
 8008e9c:	001c      	movs	r4, r3
 8008e9e:	e002      	b.n	8008ea6 <PxMessagingTask+0x50e>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008ea0:	3401      	adds	r4, #1
 8008ea2:	2c04      	cmp	r4, #4
 8008ea4:	d00a      	beq.n	8008ebc <PxMessagingTask+0x524>
 8008ea6:	b2e0      	uxtb	r0, r4
								if(p != port)
 8008ea8:	9b08      	ldr	r3, [sp, #32]
 8008eaa:	4298      	cmp	r0, r3
 8008eac:	d0f8      	beq.n	8008ea0 <PxMessagingTask+0x508>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008eae:	f005 fb0f 	bl	800e4d0 <GetUart>
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	5d19      	ldrb	r1, [r3, r4]
 8008eb6:	f005 fb9b 	bl	800e5f0 <SwapUartPins>
 8008eba:	e7f1      	b.n	8008ea0 <PxMessagingTask+0x508>
 8008ebc:	4644      	mov	r4, r8
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008ebe:	9808      	ldr	r0, [sp, #32]
 8008ec0:	f005 fb06 	bl	800e4d0 <GetUart>
 8008ec4:	4b82      	ldr	r3, [pc, #520]	; (80090d0 <PxMessagingTask+0x738>)
 8008ec6:	199b      	adds	r3, r3, r6
 8008ec8:	195d      	adds	r5, r3, r5
 8008eca:	7aa9      	ldrb	r1, [r5, #10]
 8008ecc:	f005 fb90 	bl	800e5f0 <SwapUartPins>
							break;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	469a      	mov	sl, r3
 8008ed4:	e59e      	b.n	8008a14 <PxMessagingTask+0x7c>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008ed6:	002a      	movs	r2, r5
 8008ed8:	4b7d      	ldr	r3, [pc, #500]	; (80090d0 <PxMessagingTask+0x738>)
 8008eda:	199b      	adds	r3, r3, r6
 8008edc:	5d5b      	ldrb	r3, [r3, r5]
 8008ede:	469a      	mov	sl, r3
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d108      	bne.n	8008ef6 <PxMessagingTask+0x55e>
								myID =cMessage[port - 1][1 + shift];
 8008ee4:	2238      	movs	r2, #56	; 0x38
 8008ee6:	4362      	muls	r2, r4
 8008ee8:	4b79      	ldr	r3, [pc, #484]	; (80090d0 <PxMessagingTask+0x738>)
 8008eea:	189b      	adds	r3, r3, r2
 8008eec:	195d      	adds	r5, r3, r5
 8008eee:	786a      	ldrb	r2, [r5, #1]
 8008ef0:	4b7c      	ldr	r3, [pc, #496]	; (80090e4 <PxMessagingTask+0x74c>)
 8008ef2:	701a      	strb	r2, [r3, #0]
 8008ef4:	e58e      	b.n	8008a14 <PxMessagingTask+0x7c>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d002      	beq.n	8008f00 <PxMessagingTask+0x568>
 8008efa:	2300      	movs	r3, #0
 8008efc:	469a      	mov	sl, r3
 8008efe:	e589      	b.n	8008a14 <PxMessagingTask+0x7c>
								messageParams[0] =0; /* change own ID */
 8008f00:	4976      	ldr	r1, [pc, #472]	; (80090dc <PxMessagingTask+0x744>)
 8008f02:	2500      	movs	r5, #0
 8008f04:	700d      	strb	r5, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8008f06:	2038      	movs	r0, #56	; 0x38
 8008f08:	4360      	muls	r0, r4
 8008f0a:	4b71      	ldr	r3, [pc, #452]	; (80090d0 <PxMessagingTask+0x738>)
 8008f0c:	181b      	adds	r3, r3, r0
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	785a      	ldrb	r2, [r3, #1]
 8008f12:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8008f14:	7898      	ldrb	r0, [r3, #2]
 8008f16:	2303      	movs	r3, #3
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	330d      	adds	r3, #13
 8008f1c:	002a      	movs	r2, r5
 8008f1e:	0029      	movs	r1, r5
 8008f20:	f7fe ffac 	bl	8007e7c <SendMessageFromPort>
 8008f24:	46aa      	mov	sl, r5
 8008f26:	e575      	b.n	8008a14 <PxMessagingTask+0x7c>
							if(longMessage){
 8008f28:	4b6f      	ldr	r3, [pc, #444]	; (80090e8 <PxMessagingTask+0x750>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	4699      	mov	r9, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d014      	beq.n	8008f5c <PxMessagingTask+0x5c4>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008f32:	4b6e      	ldr	r3, [pc, #440]	; (80090ec <PxMessagingTask+0x754>)
 8008f34:	4699      	mov	r9, r3
 8008f36:	881b      	ldrh	r3, [r3, #0]
 8008f38:	4698      	mov	r8, r3
 8008f3a:	486d      	ldr	r0, [pc, #436]	; (80090f0 <PxMessagingTask+0x758>)
 8008f3c:	4440      	add	r0, r8
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f40:	469c      	mov	ip, r3
 8008f42:	4465      	add	r5, ip
 8008f44:	4962      	ldr	r1, [pc, #392]	; (80090d0 <PxMessagingTask+0x738>)
 8008f46:	1869      	adds	r1, r5, r1
 8008f48:	4652      	mov	r2, sl
 8008f4a:	f00a fe59 	bl	8013c00 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008f4e:	4645      	mov	r5, r8
 8008f50:	4455      	add	r5, sl
 8008f52:	464b      	mov	r3, r9
 8008f54:	801d      	strh	r5, [r3, #0]
 8008f56:	2300      	movs	r3, #0
 8008f58:	469a      	mov	sl, r3
 8008f5a:	e55b      	b.n	8008a14 <PxMessagingTask+0x7c>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008f5c:	4b63      	ldr	r3, [pc, #396]	; (80090ec <PxMessagingTask+0x754>)
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	4698      	mov	r8, r3
 8008f62:	4b63      	ldr	r3, [pc, #396]	; (80090f0 <PxMessagingTask+0x758>)
 8008f64:	4443      	add	r3, r8
 8008f66:	0018      	movs	r0, r3
 8008f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6a:	469c      	mov	ip, r3
 8008f6c:	4465      	add	r5, ip
 8008f6e:	4958      	ldr	r1, [pc, #352]	; (80090d0 <PxMessagingTask+0x738>)
 8008f70:	1869      	adds	r1, r5, r1
 8008f72:	4652      	mov	r2, sl
 8008f74:	f00a fe44 	bl	8013c00 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008f78:	4645      	mov	r5, r8
 8008f7a:	4455      	add	r5, sl
 8008f7c:	b2ad      	uxth	r5, r5
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8008f7e:	2116      	movs	r1, #22
 8008f80:	0028      	movs	r0, r5
 8008f82:	f7f7 f8e5 	bl	8000150 <__udivsi3>
 8008f86:	4b5b      	ldr	r3, [pc, #364]	; (80090f4 <PxMessagingTask+0x75c>)
 8008f88:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8008f8a:	002a      	movs	r2, r5
 8008f8c:	4958      	ldr	r1, [pc, #352]	; (80090f0 <PxMessagingTask+0x758>)
 8008f8e:	485a      	ldr	r0, [pc, #360]	; (80090f8 <PxMessagingTask+0x760>)
 8008f90:	f00a fe36 	bl	8013c00 <memcpy>
								longMessageLastPtr =0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	4a55      	ldr	r2, [pc, #340]	; (80090ec <PxMessagingTask+0x754>)
 8008f98:	8013      	strh	r3, [r2, #0]
 8008f9a:	46ca      	mov	sl, r9
 8008f9c:	e53a      	b.n	8008a14 <PxMessagingTask+0x7c>
							ReadPortsDirMSG(src);
 8008f9e:	9805      	ldr	r0, [sp, #20]
 8008fa0:	f005 fb8c 	bl	800e6bc <ReadPortsDirMSG>
								break;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	469a      	mov	sl, r3
 8008fa8:	e534      	b.n	8008a14 <PxMessagingTask+0x7c>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008faa:	4b49      	ldr	r3, [pc, #292]	; (80090d0 <PxMessagingTask+0x738>)
 8008fac:	199b      	adds	r3, r3, r6
 8008fae:	5d5a      	ldrb	r2, [r3, r5]
 8008fb0:	0612      	lsls	r2, r2, #24
 8008fb2:	195b      	adds	r3, r3, r5
 8008fb4:	78d9      	ldrb	r1, [r3, #3]
 8008fb6:	1852      	adds	r2, r2, r1
 8008fb8:	7859      	ldrb	r1, [r3, #1]
 8008fba:	0409      	lsls	r1, r1, #16
 8008fbc:	1852      	adds	r2, r2, r1
 8008fbe:	7899      	ldrb	r1, [r3, #2]
 8008fc0:	0209      	lsls	r1, r1, #8
 8008fc2:	4690      	mov	r8, r2
 8008fc4:	4488      	add	r8, r1
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	2bff      	cmp	r3, #255	; 0xff
 8008fca:	d015      	beq.n	8008ff8 <PxMessagingTask+0x660>
								for(p =0; p < numOfParams; p++){
 8008fcc:	4653      	mov	r3, sl
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d010      	beq.n	8008ff4 <PxMessagingTask+0x65c>
 8008fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd4:	469c      	mov	ip, r3
 8008fd6:	4465      	add	r5, ip
 8008fd8:	3504      	adds	r5, #4
 8008fda:	4b3d      	ldr	r3, [pc, #244]	; (80090d0 <PxMessagingTask+0x738>)
 8008fdc:	46a9      	mov	r9, r5
 8008fde:	4499      	add	r9, r3
 8008fe0:	2500      	movs	r5, #0
 8008fe2:	4643      	mov	r3, r8
 8008fe4:	9306      	str	r3, [sp, #24]
 8008fe6:	46a0      	mov	r8, r4
 8008fe8:	0033      	movs	r3, r6
 8008fea:	464e      	mov	r6, r9
 8008fec:	46b9      	mov	r9, r7
 8008fee:	4657      	mov	r7, sl
 8008ff0:	469a      	mov	sl, r3
 8008ff2:	e015      	b.n	8009020 <PxMessagingTask+0x688>
							temp =temp32 =0;
 8008ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff6:	e50d      	b.n	8008a14 <PxMessagingTask+0x7c>
									UpdateBaudrate(p,temp32);
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	f005 faee 	bl	800e5dc <UpdateBaudrate>
 8009000:	4641      	mov	r1, r8
 8009002:	2002      	movs	r0, #2
 8009004:	f005 faea 	bl	800e5dc <UpdateBaudrate>
 8009008:	4641      	mov	r1, r8
 800900a:	2003      	movs	r0, #3
 800900c:	f005 fae6 	bl	800e5dc <UpdateBaudrate>
							temp =temp32 =0;
 8009010:	2300      	movs	r3, #0
 8009012:	9309      	str	r3, [sp, #36]	; 0x24
 8009014:	469a      	mov	sl, r3
 8009016:	e4fd      	b.n	8008a14 <PxMessagingTask+0x7c>
								for(p =0; p < numOfParams; p++){
 8009018:	3501      	adds	r5, #1
 800901a:	b2eb      	uxtb	r3, r5
 800901c:	429f      	cmp	r7, r3
 800901e:	d908      	bls.n	8009032 <PxMessagingTask+0x69a>
									temp =cMessage[port - 1][4 + shift + p];
 8009020:	5d74      	ldrb	r4, [r6, r5]
									if(temp > 0 && temp <= NumOfPorts){
 8009022:	1e63      	subs	r3, r4, #1
 8009024:	2b02      	cmp	r3, #2
 8009026:	d8f7      	bhi.n	8009018 <PxMessagingTask+0x680>
										UpdateBaudrate(temp,temp32);
 8009028:	9906      	ldr	r1, [sp, #24]
 800902a:	0020      	movs	r0, r4
 800902c:	f005 fad6 	bl	800e5dc <UpdateBaudrate>
 8009030:	e7f2      	b.n	8009018 <PxMessagingTask+0x680>
 8009032:	9409      	str	r4, [sp, #36]	; 0x24
 8009034:	4644      	mov	r4, r8
 8009036:	464f      	mov	r7, r9
 8009038:	4656      	mov	r6, sl
 800903a:	2300      	movs	r3, #0
 800903c:	469a      	mov	sl, r3
 800903e:	e4e9      	b.n	8008a14 <PxMessagingTask+0x7c>
							SaveToRO();
 8009040:	f001 f984 	bl	800a34c <SaveToRO>
							SaveEEportsDir();
 8009044:	f7fa fb44 	bl	80036d0 <SaveEEportsDir>
							indMode =IND_PING;
 8009048:	4b23      	ldr	r3, [pc, #140]	; (80090d8 <PxMessagingTask+0x740>)
 800904a:	2201      	movs	r2, #1
 800904c:	701a      	strb	r2, [r3, #0]
							break;
 800904e:	2300      	movs	r3, #0
 8009050:	469a      	mov	sl, r3
 8009052:	e4df      	b.n	8008a14 <PxMessagingTask+0x7c>
							ClearEEportsDir();
 8009054:	f7fa fc2c 	bl	80038b0 <ClearEEportsDir>
							ClearROtopology();
 8009058:	f001 fa96 	bl	800a588 <ClearROtopology>
							osDelay(100);
 800905c:	2064      	movs	r0, #100	; 0x64
 800905e:	f005 fbf4 	bl	800e84a <osDelay>
							indMode =IND_TOPOLOGY;
 8009062:	4b1d      	ldr	r3, [pc, #116]	; (80090d8 <PxMessagingTask+0x740>)
 8009064:	2202      	movs	r2, #2
 8009066:	701a      	strb	r2, [r3, #0]
							break;
 8009068:	2300      	movs	r3, #0
 800906a:	469a      	mov	sl, r3
 800906c:	e4d2      	b.n	8008a14 <PxMessagingTask+0x7c>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800906e:	f005 fd0b 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 8009072:	4681      	mov	r9, r0
							if(dst == BOS_BROADCAST)
 8009074:	4643      	mov	r3, r8
 8009076:	2bff      	cmp	r3, #255	; 0xff
 8009078:	d012      	beq.n	80090a0 <PxMessagingTask+0x708>
							else if(dst == BOS_MULTICAST)
 800907a:	2bfe      	cmp	r3, #254	; 0xfe
 800907c:	d01a      	beq.n	80090b4 <PxMessagingTask+0x71c>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800907e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009080:	469c      	mov	ip, r3
 8009082:	4465      	add	r5, ip
 8009084:	4912      	ldr	r1, [pc, #72]	; (80090d0 <PxMessagingTask+0x738>)
 8009086:	1869      	adds	r1, r5, r1
 8009088:	4652      	mov	r2, sl
 800908a:	481c      	ldr	r0, [pc, #112]	; (80090fc <PxMessagingTask+0x764>)
 800908c:	f00a fdb8 	bl	8013c00 <memcpy>
								temp =PcPort;
 8009090:	4d1b      	ldr	r5, [pc, #108]	; (8009100 <PxMessagingTask+0x768>)
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8009092:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <PxMessagingTask+0x76c>)
 8009094:	469a      	mov	sl, r3
 8009096:	9406      	str	r4, [sp, #24]
 8009098:	46b8      	mov	r8, r7
 800909a:	464f      	mov	r7, r9
 800909c:	46b1      	mov	r9, r6
 800909e:	e035      	b.n	800910c <PxMessagingTask+0x774>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 80090a0:	4652      	mov	r2, sl
 80090a2:	3a01      	subs	r2, #1
 80090a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a6:	18e9      	adds	r1, r5, r3
 80090a8:	4d09      	ldr	r5, [pc, #36]	; (80090d0 <PxMessagingTask+0x738>)
 80090aa:	1949      	adds	r1, r1, r5
 80090ac:	4813      	ldr	r0, [pc, #76]	; (80090fc <PxMessagingTask+0x764>)
 80090ae:	f00a fda7 	bl	8013c00 <memcpy>
 80090b2:	e7ed      	b.n	8009090 <PxMessagingTask+0x6f8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 80090b4:	4653      	mov	r3, sl
 80090b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b8:	1a9a      	subs	r2, r3, r2
 80090ba:	3a02      	subs	r2, #2
 80090bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090be:	18e9      	adds	r1, r5, r3
 80090c0:	4d03      	ldr	r5, [pc, #12]	; (80090d0 <PxMessagingTask+0x738>)
 80090c2:	1949      	adds	r1, r1, r5
 80090c4:	480d      	ldr	r0, [pc, #52]	; (80090fc <PxMessagingTask+0x764>)
 80090c6:	f00a fd9b 	bl	8013c00 <memcpy>
 80090ca:	e7e1      	b.n	8009090 <PxMessagingTask+0x6f8>
 80090cc:	20000810 	.word	0x20000810
 80090d0:	2000054c 	.word	0x2000054c
 80090d4:	20000890 	.word	0x20000890
 80090d8:	20000690 	.word	0x20000690
 80090dc:	200006d0 	.word	0x200006d0
 80090e0:	2000081c 	.word	0x2000081c
 80090e4:	2000080e 	.word	0x2000080e
 80090e8:	20000691 	.word	0x20000691
 80090ec:	20000692 	.word	0x20000692
 80090f0:	20000e60 	.word	0x20000e60
 80090f4:	20000030 	.word	0x20000030
 80090f8:	200002bc 	.word	0x200002bc
 80090fc:	20000e2c 	.word	0x20000e2c
 8009100:	200002b8 	.word	0x200002b8
 8009104:	200061f8 	.word	0x200061f8
							} while(xReturned != pdFALSE);
 8009108:	2c00      	cmp	r4, #0
 800910a:	d022      	beq.n	8009152 <PxMessagingTask+0x7ba>
								temp =PcPort;
 800910c:	782e      	ldrb	r6, [r5, #0]
								PcPort =port;
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	702b      	strb	r3, [r5, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8009112:	2299      	movs	r2, #153	; 0x99
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	0039      	movs	r1, r7
 8009118:	48d0      	ldr	r0, [pc, #832]	; (800945c <PxMessagingTask+0xac4>)
 800911a:	f005 fc2b 	bl	800e974 <FreeRTOS_CLIProcessCommand>
 800911e:	0004      	movs	r4, r0
								PcPort =temp;
 8009120:	702e      	strb	r6, [r5, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8009122:	4653      	mov	r3, sl
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b60      	cmp	r3, #96	; 0x60
 8009128:	d1ee      	bne.n	8009108 <PxMessagingTask+0x770>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800912a:	0038      	movs	r0, r7
 800912c:	f7f6 fff4 	bl	8000118 <strlen>
 8009130:	0002      	movs	r2, r0
 8009132:	0039      	movs	r1, r7
 8009134:	48ca      	ldr	r0, [pc, #808]	; (8009460 <PxMessagingTask+0xac8>)
 8009136:	f00a fd63 	bl	8013c00 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800913a:	0038      	movs	r0, r7
 800913c:	f7f6 ffec 	bl	8000118 <strlen>
 8009140:	b282      	uxth	r2, r0
 8009142:	2118      	movs	r1, #24
 8009144:	9805      	ldr	r0, [sp, #20]
 8009146:	f7ff f91d 	bl	8008384 <SendMessageToModule>
									osDelay(10);
 800914a:	200a      	movs	r0, #10
 800914c:	f005 fb7d 	bl	800e84a <osDelay>
 8009150:	e7da      	b.n	8009108 <PxMessagingTask+0x770>
 8009152:	9c06      	ldr	r4, [sp, #24]
 8009154:	9609      	str	r6, [sp, #36]	; 0x24
 8009156:	4647      	mov	r7, r8
 8009158:	464e      	mov	r6, r9
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800915a:	2232      	movs	r2, #50	; 0x32
 800915c:	2100      	movs	r1, #0
 800915e:	48bf      	ldr	r0, [pc, #764]	; (800945c <PxMessagingTask+0xac4>)
 8009160:	f00a fd57 	bl	8013c12 <memset>
							break;
 8009164:	2300      	movs	r3, #0
 8009166:	469a      	mov	sl, r3
 8009168:	e454      	b.n	8008a14 <PxMessagingTask+0x7c>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800916a:	f005 fc8d 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 800916e:	4680      	mov	r8, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8009170:	f7f6 ffd2 	bl	8000118 <strlen>
 8009174:	0002      	movs	r2, r0
 8009176:	2100      	movs	r1, #0
 8009178:	4640      	mov	r0, r8
 800917a:	f00a fd4a 	bl	8013c12 <memset>
							if(longMessage){
 800917e:	4bb9      	ldr	r3, [pc, #740]	; (8009464 <PxMessagingTask+0xacc>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	4699      	mov	r9, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d012      	beq.n	80091ae <PxMessagingTask+0x816>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8009188:	4bb7      	ldr	r3, [pc, #732]	; (8009468 <PxMessagingTask+0xad0>)
 800918a:	4699      	mov	r9, r3
 800918c:	8818      	ldrh	r0, [r3, #0]
 800918e:	4440      	add	r0, r8
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	469c      	mov	ip, r3
 8009194:	4465      	add	r5, ip
 8009196:	49b5      	ldr	r1, [pc, #724]	; (800946c <PxMessagingTask+0xad4>)
 8009198:	1869      	adds	r1, r5, r1
 800919a:	4652      	mov	r2, sl
 800919c:	f00a fd30 	bl	8013c00 <memcpy>
								longMessageLastPtr +=numOfParams;
 80091a0:	464b      	mov	r3, r9
 80091a2:	881d      	ldrh	r5, [r3, #0]
 80091a4:	4455      	add	r5, sl
 80091a6:	801d      	strh	r5, [r3, #0]
 80091a8:	2300      	movs	r3, #0
 80091aa:	469a      	mov	sl, r3
 80091ac:	e432      	b.n	8008a14 <PxMessagingTask+0x7c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80091ae:	4bae      	ldr	r3, [pc, #696]	; (8009468 <PxMessagingTask+0xad0>)
 80091b0:	8818      	ldrh	r0, [r3, #0]
 80091b2:	4440      	add	r0, r8
 80091b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b6:	469c      	mov	ip, r3
 80091b8:	4465      	add	r5, ip
 80091ba:	49ac      	ldr	r1, [pc, #688]	; (800946c <PxMessagingTask+0xad4>)
 80091bc:	1869      	adds	r1, r5, r1
 80091be:	4652      	mov	r2, sl
 80091c0:	f00a fd1e 	bl	8013c00 <memcpy>
								longMessageLastPtr =0;
 80091c4:	2100      	movs	r1, #0
 80091c6:	4ba8      	ldr	r3, [pc, #672]	; (8009468 <PxMessagingTask+0xad0>)
 80091c8:	8019      	strh	r1, [r3, #0]
								responseStatus =BOS_OK;
 80091ca:	4ba9      	ldr	r3, [pc, #676]	; (8009470 <PxMessagingTask+0xad8>)
 80091cc:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 80091ce:	000b      	movs	r3, r1
 80091d0:	000a      	movs	r2, r1
 80091d2:	48a8      	ldr	r0, [pc, #672]	; (8009474 <PxMessagingTask+0xadc>)
 80091d4:	6800      	ldr	r0, [r0, #0]
 80091d6:	f006 fedf 	bl	800ff98 <xTaskGenericNotify>
 80091da:	46ca      	mov	sl, r9
 80091dc:	e41a      	b.n	8008a14 <PxMessagingTask+0x7c>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80091de:	4ba6      	ldr	r3, [pc, #664]	; (8009478 <PxMessagingTask+0xae0>)
 80091e0:	4aa6      	ldr	r2, [pc, #664]	; (800947c <PxMessagingTask+0xae4>)
 80091e2:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 80091e4:	4ba6      	ldr	r3, [pc, #664]	; (8009480 <PxMessagingTask+0xae8>)
 80091e6:	2201      	movs	r2, #1
 80091e8:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 80091ea:	200a      	movs	r0, #10
 80091ec:	f005 fb2d 	bl	800e84a <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	4ba3      	ldr	r3, [pc, #652]	; (8009484 <PxMessagingTask+0xaec>)
 80091f6:	4aa4      	ldr	r2, [pc, #656]	; (8009488 <PxMessagingTask+0xaf0>)
 80091f8:	60da      	str	r2, [r3, #12]
 80091fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	e7fd      	b.n	80091fe <PxMessagingTask+0x866>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8009202:	4b9a      	ldr	r3, [pc, #616]	; (800946c <PxMessagingTask+0xad4>)
 8009204:	4698      	mov	r8, r3
 8009206:	44b0      	add	r8, r6
 8009208:	4643      	mov	r3, r8
 800920a:	5d58      	ldrb	r0, [r3, r5]
 800920c:	2300      	movs	r3, #0
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	3319      	adds	r3, #25
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	f7fe fe31 	bl	8007e7c <SendMessageFromPort>
							osDelay(100);
 800921a:	2064      	movs	r0, #100	; 0x64
 800921c:	f005 fb15 	bl	800e84a <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8009220:	4643      	mov	r3, r8
 8009222:	5d5b      	ldrb	r3, [r3, r5]
 8009224:	4a99      	ldr	r2, [pc, #612]	; (800948c <PxMessagingTask+0xaf4>)
 8009226:	7811      	ldrb	r1, [r2, #0]
 8009228:	9a08      	ldr	r2, [sp, #32]
 800922a:	9805      	ldr	r0, [sp, #20]
 800922c:	f001 f9d8 	bl	800a5e0 <remoteBootloaderUpdate>
							break;
 8009230:	2300      	movs	r3, #0
 8009232:	469a      	mov	sl, r3
 8009234:	f7ff fbee 	bl	8008a14 <PxMessagingTask+0x7c>
							temp =cMessage[port - 1][11 + shift];
 8009238:	46a8      	mov	r8, r5
 800923a:	230b      	movs	r3, #11
 800923c:	4699      	mov	r9, r3
 800923e:	44a9      	add	r9, r5
							if(numOfParams == 15)
 8009240:	4653      	mov	r3, sl
 8009242:	2b0f      	cmp	r3, #15
 8009244:	d00f      	beq.n	8009266 <PxMessagingTask+0x8ce>
							temp =cMessage[port - 1][11 + shift];
 8009246:	2238      	movs	r2, #56	; 0x38
 8009248:	4362      	muls	r2, r4
 800924a:	4b88      	ldr	r3, [pc, #544]	; (800946c <PxMessagingTask+0xad4>)
 800924c:	189b      	adds	r3, r3, r2
 800924e:	464a      	mov	r2, r9
 8009250:	5c9d      	ldrb	r5, [r3, r2]
							if(numOfParams == 17)
 8009252:	4653      	mov	r3, sl
 8009254:	2b11      	cmp	r3, #17
 8009256:	d10c      	bne.n	8009272 <PxMessagingTask+0x8da>
								temp =cMessage[port - 1][15 + shift];
 8009258:	2238      	movs	r2, #56	; 0x38
 800925a:	4362      	muls	r2, r4
 800925c:	4b83      	ldr	r3, [pc, #524]	; (800946c <PxMessagingTask+0xad4>)
 800925e:	189b      	adds	r3, r3, r2
 8009260:	4443      	add	r3, r8
 8009262:	7bdd      	ldrb	r5, [r3, #15]
 8009264:	e005      	b.n	8009272 <PxMessagingTask+0x8da>
								temp =cMessage[port - 1][13 + shift];
 8009266:	2238      	movs	r2, #56	; 0x38
 8009268:	4362      	muls	r2, r4
 800926a:	4b80      	ldr	r3, [pc, #512]	; (800946c <PxMessagingTask+0xad4>)
 800926c:	189b      	adds	r3, r3, r2
 800926e:	195d      	adds	r5, r3, r5
 8009270:	7b6d      	ldrb	r5, [r5, #13]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009272:	4643      	mov	r3, r8
 8009274:	1c58      	adds	r0, r3, #1
 8009276:	900f      	str	r0, [sp, #60]	; 0x3c
 8009278:	3302      	adds	r3, #2
 800927a:	9306      	str	r3, [sp, #24]
 800927c:	4642      	mov	r2, r8
 800927e:	3203      	adds	r2, #3
 8009280:	0011      	movs	r1, r2
 8009282:	9210      	str	r2, [sp, #64]	; 0x40
 8009284:	4b79      	ldr	r3, [pc, #484]	; (800946c <PxMessagingTask+0xad4>)
 8009286:	199b      	adds	r3, r3, r6
 8009288:	4642      	mov	r2, r8
 800928a:	5c9a      	ldrb	r2, [r3, r2]
 800928c:	0612      	lsls	r2, r2, #24
 800928e:	5c59      	ldrb	r1, [r3, r1]
 8009290:	1852      	adds	r2, r2, r1
 8009292:	5c19      	ldrb	r1, [r3, r0]
 8009294:	0409      	lsls	r1, r1, #16
 8009296:	1852      	adds	r2, r2, r1
 8009298:	9906      	ldr	r1, [sp, #24]
 800929a:	5c59      	ldrb	r1, [r3, r1]
 800929c:	0209      	lsls	r1, r1, #8
 800929e:	1852      	adds	r2, r2, r1
 80092a0:	920d      	str	r2, [sp, #52]	; 0x34
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80092a2:	4642      	mov	r2, r8
 80092a4:	3204      	adds	r2, #4
 80092a6:	9211      	str	r2, [sp, #68]	; 0x44
 80092a8:	2105      	movs	r1, #5
 80092aa:	4441      	add	r1, r8
 80092ac:	468c      	mov	ip, r1
 80092ae:	4641      	mov	r1, r8
 80092b0:	3106      	adds	r1, #6
 80092b2:	9109      	str	r1, [sp, #36]	; 0x24
 80092b4:	4640      	mov	r0, r8
 80092b6:	3007      	adds	r0, #7
 80092b8:	5c99      	ldrb	r1, [r3, r2]
 80092ba:	0609      	lsls	r1, r1, #24
 80092bc:	4662      	mov	r2, ip
 80092be:	5c9a      	ldrb	r2, [r3, r2]
 80092c0:	0412      	lsls	r2, r2, #16
 80092c2:	188a      	adds	r2, r1, r2
 80092c4:	5c19      	ldrb	r1, [r3, r0]
 80092c6:	1852      	adds	r2, r2, r1
 80092c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ca:	5c5b      	ldrb	r3, [r3, r1]
 80092cc:	021b      	lsls	r3, r3, #8
 80092ce:	18d3      	adds	r3, r2, r3
 80092d0:	930e      	str	r3, [sp, #56]	; 0x38
							if(temp == false){
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	d15a      	bne.n	800938c <PxMessagingTask+0x9f4>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 80092d6:	4b65      	ldr	r3, [pc, #404]	; (800946c <PxMessagingTask+0xad4>)
 80092d8:	199b      	adds	r3, r3, r6
 80092da:	4443      	add	r3, r8
 80092dc:	7a5b      	ldrb	r3, [r3, #9]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d007      	beq.n	80092f2 <PxMessagingTask+0x95a>
 80092e2:	2138      	movs	r1, #56	; 0x38
 80092e4:	4361      	muls	r1, r4
 80092e6:	4a61      	ldr	r2, [pc, #388]	; (800946c <PxMessagingTask+0xad4>)
 80092e8:	1852      	adds	r2, r2, r1
 80092ea:	4442      	add	r2, r8
 80092ec:	7a91      	ldrb	r1, [r2, #10]
 80092ee:	2900      	cmp	r1, #0
 80092f0:	d123      	bne.n	800933a <PxMessagingTask+0x9a2>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 80092f2:	4b5e      	ldr	r3, [pc, #376]	; (800946c <PxMessagingTask+0xad4>)
 80092f4:	199b      	adds	r3, r3, r6
 80092f6:	464a      	mov	r2, r9
 80092f8:	5c9b      	ldrb	r3, [r3, r2]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <PxMessagingTask+0x976>
 80092fe:	2138      	movs	r1, #56	; 0x38
 8009300:	4361      	muls	r1, r4
 8009302:	4a5a      	ldr	r2, [pc, #360]	; (800946c <PxMessagingTask+0xad4>)
 8009304:	1852      	adds	r2, r2, r1
 8009306:	4442      	add	r2, r8
 8009308:	7b11      	ldrb	r1, [r2, #12]
 800930a:	2900      	cmp	r1, #0
 800930c:	d121      	bne.n	8009352 <PxMessagingTask+0x9ba>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800930e:	4b57      	ldr	r3, [pc, #348]	; (800946c <PxMessagingTask+0xad4>)
 8009310:	199b      	adds	r3, r3, r6
 8009312:	4443      	add	r3, r8
 8009314:	7b5b      	ldrb	r3, [r3, #13]
 8009316:	9309      	str	r3, [sp, #36]	; 0x24
 8009318:	469a      	mov	sl, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d101      	bne.n	8009322 <PxMessagingTask+0x98a>
 800931e:	f7ff fb79 	bl	8008a14 <PxMessagingTask+0x7c>
 8009322:	2238      	movs	r2, #56	; 0x38
 8009324:	4362      	muls	r2, r4
 8009326:	4b51      	ldr	r3, [pc, #324]	; (800946c <PxMessagingTask+0xad4>)
 8009328:	189b      	adds	r3, r3, r2
 800932a:	4443      	add	r3, r8
 800932c:	7b9b      	ldrb	r3, [r3, #14]
 800932e:	469a      	mov	sl, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d11a      	bne.n	800936a <PxMessagingTask+0x9d2>
 8009334:	9309      	str	r3, [sp, #36]	; 0x24
 8009336:	f7ff fb6d 	bl	8008a14 <PxMessagingTask+0x7c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800933a:	2038      	movs	r0, #56	; 0x38
 800933c:	4360      	muls	r0, r4
 800933e:	4a4b      	ldr	r2, [pc, #300]	; (800946c <PxMessagingTask+0xad4>)
 8009340:	1812      	adds	r2, r2, r0
 8009342:	4442      	add	r2, r8
 8009344:	7a10      	ldrb	r0, [r2, #8]
 8009346:	9100      	str	r1, [sp, #0]
 8009348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800934c:	f7fe fc98 	bl	8007c80 <SetupDMAStreams>
 8009350:	e7cf      	b.n	80092f2 <PxMessagingTask+0x95a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8009352:	2038      	movs	r0, #56	; 0x38
 8009354:	4360      	muls	r0, r4
 8009356:	4a45      	ldr	r2, [pc, #276]	; (800946c <PxMessagingTask+0xad4>)
 8009358:	1812      	adds	r2, r2, r0
 800935a:	4442      	add	r2, r8
 800935c:	7a10      	ldrb	r0, [r2, #8]
 800935e:	9100      	str	r1, [sp, #0]
 8009360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009362:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009364:	f7fe fc8c 	bl	8007c80 <SetupDMAStreams>
 8009368:	e7d1      	b.n	800930e <PxMessagingTask+0x976>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800936a:	2238      	movs	r2, #56	; 0x38
 800936c:	4362      	muls	r2, r4
 800936e:	4b3f      	ldr	r3, [pc, #252]	; (800946c <PxMessagingTask+0xad4>)
 8009370:	189b      	adds	r3, r3, r2
 8009372:	4443      	add	r3, r8
 8009374:	7a18      	ldrb	r0, [r3, #8]
 8009376:	4653      	mov	r3, sl
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800937e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009380:	f7fe fc7e 	bl	8007c80 <SetupDMAStreams>
 8009384:	9509      	str	r5, [sp, #36]	; 0x24
 8009386:	46aa      	mov	sl, r5
 8009388:	f7ff fb44 	bl	8008a14 <PxMessagingTask+0x7c>
 800938c:	4663      	mov	r3, ip
 800938e:	9304      	str	r3, [sp, #16]
 8009390:	4683      	mov	fp, r0
 8009392:	4655      	mov	r5, sl
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009394:	2338      	movs	r3, #56	; 0x38
 8009396:	4363      	muls	r3, r4
 8009398:	4e34      	ldr	r6, [pc, #208]	; (800946c <PxMessagingTask+0xad4>)
 800939a:	18f6      	adds	r6, r6, r3
 800939c:	4641      	mov	r1, r8
 800939e:	1877      	adds	r7, r6, r1
 80093a0:	7a39      	ldrb	r1, [r7, #8]
 80093a2:	20e4      	movs	r0, #228	; 0xe4
 80093a4:	f003 f88e 	bl	800c4c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 80093a8:	4641      	mov	r1, r8
 80093aa:	5c73      	ldrb	r3, [r6, r1]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093b0:	5c71      	ldrb	r1, [r6, r1]
 80093b2:	18c9      	adds	r1, r1, r3
 80093b4:	b289      	uxth	r1, r1
 80093b6:	20e5      	movs	r0, #229	; 0xe5
 80093b8:	f003 f884 	bl	800c4c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 80093bc:	9906      	ldr	r1, [sp, #24]
 80093be:	5c73      	ldrb	r3, [r6, r1]
 80093c0:	021b      	lsls	r3, r3, #8
 80093c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80093c4:	5c71      	ldrb	r1, [r6, r1]
 80093c6:	18c9      	adds	r1, r1, r3
 80093c8:	b289      	uxth	r1, r1
 80093ca:	20e6      	movs	r0, #230	; 0xe6
 80093cc:	f003 f87a 	bl	800c4c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80093d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80093d2:	5c73      	ldrb	r3, [r6, r1]
 80093d4:	021b      	lsls	r3, r3, #8
 80093d6:	9a04      	ldr	r2, [sp, #16]
 80093d8:	5cb1      	ldrb	r1, [r6, r2]
 80093da:	18c9      	adds	r1, r1, r3
 80093dc:	b289      	uxth	r1, r1
 80093de:	20e7      	movs	r0, #231	; 0xe7
 80093e0:	f003 f870 	bl	800c4c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80093e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e6:	5cf3      	ldrb	r3, [r6, r3]
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	465a      	mov	r2, fp
 80093ec:	5cb1      	ldrb	r1, [r6, r2]
 80093ee:	18c9      	adds	r1, r1, r3
 80093f0:	b289      	uxth	r1, r1
 80093f2:	20e8      	movs	r0, #232	; 0xe8
 80093f4:	f003 f866 	bl	800c4c4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 80093f8:	7a7b      	ldrb	r3, [r7, #9]
 80093fa:	021b      	lsls	r3, r3, #8
 80093fc:	7ab9      	ldrb	r1, [r7, #10]
 80093fe:	18c9      	adds	r1, r1, r3
 8009400:	b289      	uxth	r1, r1
 8009402:	20e9      	movs	r0, #233	; 0xe9
 8009404:	f003 f85e 	bl	800c4c4 <EE_WriteVariable>
								if(numOfParams == 19)
 8009408:	2d13      	cmp	r5, #19
 800940a:	d00a      	beq.n	8009422 <PxMessagingTask+0xa8a>
								if(numOfParams == 21)
 800940c:	2d15      	cmp	r5, #21
 800940e:	d017      	beq.n	8009440 <PxMessagingTask+0xaa8>
  __ASM volatile ("dsb 0xF":::"memory");
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	4b1b      	ldr	r3, [pc, #108]	; (8009484 <PxMessagingTask+0xaec>)
 8009416:	4a1c      	ldr	r2, [pc, #112]	; (8009488 <PxMessagingTask+0xaf0>)
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	e7fd      	b.n	800941e <PxMessagingTask+0xa86>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8009422:	2338      	movs	r3, #56	; 0x38
 8009424:	4363      	muls	r3, r4
 8009426:	4c11      	ldr	r4, [pc, #68]	; (800946c <PxMessagingTask+0xad4>)
 8009428:	18e4      	adds	r4, r4, r3
 800942a:	464b      	mov	r3, r9
 800942c:	5ce3      	ldrb	r3, [r4, r3]
 800942e:	021b      	lsls	r3, r3, #8
 8009430:	4444      	add	r4, r8
 8009432:	7b21      	ldrb	r1, [r4, #12]
 8009434:	18c9      	adds	r1, r1, r3
 8009436:	b289      	uxth	r1, r1
 8009438:	20ea      	movs	r0, #234	; 0xea
 800943a:	f003 f843 	bl	800c4c4 <EE_WriteVariable>
								if(numOfParams == 21)
 800943e:	e7e7      	b.n	8009410 <PxMessagingTask+0xa78>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8009440:	2338      	movs	r3, #56	; 0x38
 8009442:	435c      	muls	r4, r3
 8009444:	4b09      	ldr	r3, [pc, #36]	; (800946c <PxMessagingTask+0xad4>)
 8009446:	191b      	adds	r3, r3, r4
 8009448:	4443      	add	r3, r8
 800944a:	7b5a      	ldrb	r2, [r3, #13]
 800944c:	0212      	lsls	r2, r2, #8
 800944e:	7b99      	ldrb	r1, [r3, #14]
 8009450:	1889      	adds	r1, r1, r2
 8009452:	b289      	uxth	r1, r1
 8009454:	20eb      	movs	r0, #235	; 0xeb
 8009456:	f003 f835 	bl	800c4c4 <EE_WriteVariable>
 800945a:	e7d9      	b.n	8009410 <PxMessagingTask+0xa78>
 800945c:	20000e2c 	.word	0x20000e2c
 8009460:	200006d0 	.word	0x200006d0
 8009464:	20000691 	.word	0x20000691
 8009468:	20000692 	.word	0x20000692
 800946c:	2000054c 	.word	0x2000054c
 8009470:	20000890 	.word	0x20000890
 8009474:	20000de8 	.word	0x20000de8
 8009478:	20007ff0 	.word	0x20007ff0
 800947c:	deadbeef 	.word	0xdeadbeef
 8009480:	20000690 	.word	0x20000690
 8009484:	e000ed00 	.word	0xe000ed00
 8009488:	05fa0004 	.word	0x05fa0004
 800948c:	2000080e 	.word	0x2000080e
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8009490:	48f2      	ldr	r0, [pc, #968]	; (800985c <PxMessagingTask+0xec4>)
 8009492:	1980      	adds	r0, r0, r6
 8009494:	1942      	adds	r2, r0, r5
 8009496:	7a93      	ldrb	r3, [r2, #10]
 8009498:	9306      	str	r3, [sp, #24]
 800949a:	7ad1      	ldrb	r1, [r2, #11]
 800949c:	4688      	mov	r8, r1
 800949e:	49f0      	ldr	r1, [pc, #960]	; (8009860 <PxMessagingTask+0xec8>)
 80094a0:	7809      	ldrb	r1, [r1, #0]
 80094a2:	4689      	mov	r9, r1
 80094a4:	7a51      	ldrb	r1, [r2, #9]
 80094a6:	468a      	mov	sl, r1
 80094a8:	7b11      	ldrb	r1, [r2, #12]
 80094aa:	1e4b      	subs	r3, r1, #1
 80094ac:	4199      	sbcs	r1, r3
 80094ae:	9103      	str	r1, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80094b0:	7911      	ldrb	r1, [r2, #4]
 80094b2:	0609      	lsls	r1, r1, #24
 80094b4:	468c      	mov	ip, r1
 80094b6:	7951      	ldrb	r1, [r2, #5]
 80094b8:	0409      	lsls	r1, r1, #16
 80094ba:	4461      	add	r1, ip
 80094bc:	79d3      	ldrb	r3, [r2, #7]
 80094be:	469c      	mov	ip, r3
 80094c0:	4461      	add	r1, ip
 80094c2:	7993      	ldrb	r3, [r2, #6]
 80094c4:	021b      	lsls	r3, r3, #8
 80094c6:	469c      	mov	ip, r3
 80094c8:	4461      	add	r1, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80094ca:	9102      	str	r1, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80094cc:	5d41      	ldrb	r1, [r0, r5]
 80094ce:	0609      	lsls	r1, r1, #24
 80094d0:	78d0      	ldrb	r0, [r2, #3]
 80094d2:	1809      	adds	r1, r1, r0
 80094d4:	7850      	ldrb	r0, [r2, #1]
 80094d6:	0400      	lsls	r0, r0, #16
 80094d8:	1809      	adds	r1, r1, r0
 80094da:	7890      	ldrb	r0, [r2, #2]
 80094dc:	0200      	lsls	r0, r0, #8
 80094de:	1809      	adds	r1, r1, r0
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80094e0:	9101      	str	r1, [sp, #4]
 80094e2:	7a12      	ldrb	r2, [r2, #8]
 80094e4:	9200      	str	r2, [sp, #0]
 80094e6:	9b06      	ldr	r3, [sp, #24]
 80094e8:	4642      	mov	r2, r8
 80094ea:	4649      	mov	r1, r9
 80094ec:	4650      	mov	r0, sl
 80094ee:	f7fe ff6f 	bl	80083d0 <StartScastDMAStream>
							break;
 80094f2:	2300      	movs	r3, #0
 80094f4:	469a      	mov	sl, r3
 80094f6:	f7ff fa8d 	bl	8008a14 <PxMessagingTask+0x7c>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80094fa:	4bd8      	ldr	r3, [pc, #864]	; (800985c <PxMessagingTask+0xec4>)
 80094fc:	199b      	adds	r3, r3, r6
 80094fe:	5d5b      	ldrb	r3, [r3, r5]
 8009500:	469a      	mov	sl, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	d000      	beq.n	8009508 <PxMessagingTask+0xb70>
 8009506:	e07f      	b.n	8009608 <PxMessagingTask+0xc70>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009508:	2238      	movs	r2, #56	; 0x38
 800950a:	4362      	muls	r2, r4
 800950c:	4bd3      	ldr	r3, [pc, #844]	; (800985c <PxMessagingTask+0xec4>)
 800950e:	189b      	adds	r3, r3, r2
 8009510:	195d      	adds	r5, r3, r5
 8009512:	78ab      	ldrb	r3, [r5, #2]
 8009514:	061b      	lsls	r3, r3, #24
 8009516:	78ea      	ldrb	r2, [r5, #3]
 8009518:	0412      	lsls	r2, r2, #16
 800951a:	189b      	adds	r3, r3, r2
 800951c:	796a      	ldrb	r2, [r5, #5]
 800951e:	189b      	adds	r3, r3, r2
 8009520:	792a      	ldrb	r2, [r5, #4]
 8009522:	0212      	lsls	r2, r2, #8
 8009524:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009526:	786a      	ldrb	r2, [r5, #1]
 8009528:	3a01      	subs	r2, #1
 800952a:	b2d1      	uxtb	r1, r2
 800952c:	2907      	cmp	r1, #7
 800952e:	d901      	bls.n	8009534 <PxMessagingTask+0xb9c>
 8009530:	f7ff fa6b 	bl	8008a0a <PxMessagingTask+0x72>
 8009534:	b2d2      	uxtb	r2, r2
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	49ca      	ldr	r1, [pc, #808]	; (8009864 <PxMessagingTask+0xecc>)
 800953a:	588a      	ldr	r2, [r1, r2]
 800953c:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800953e:	781a      	ldrb	r2, [r3, #0]
 8009540:	4bc9      	ldr	r3, [pc, #804]	; (8009868 <PxMessagingTask+0xed0>)
 8009542:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009544:	2201      	movs	r2, #1
 8009546:	211f      	movs	r1, #31
 8009548:	9805      	ldr	r0, [sp, #20]
 800954a:	f7fe ff1b 	bl	8008384 <SendMessageToModule>
										break;
 800954e:	f7ff fa61 	bl	8008a14 <PxMessagingTask+0x7c>
										messageParams[0] =*(__IO int8_t* )temp32;
 8009552:	781a      	ldrb	r2, [r3, #0]
 8009554:	4bc4      	ldr	r3, [pc, #784]	; (8009868 <PxMessagingTask+0xed0>)
 8009556:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009558:	2201      	movs	r2, #1
 800955a:	211f      	movs	r1, #31
 800955c:	9805      	ldr	r0, [sp, #20]
 800955e:	f7fe ff11 	bl	8008384 <SendMessageToModule>
										break;
 8009562:	f7ff fa57 	bl	8008a14 <PxMessagingTask+0x7c>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009566:	8819      	ldrh	r1, [r3, #0]
 8009568:	4abf      	ldr	r2, [pc, #764]	; (8009868 <PxMessagingTask+0xed0>)
 800956a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	0a1b      	lsrs	r3, r3, #8
 8009570:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8009572:	2202      	movs	r2, #2
 8009574:	211f      	movs	r1, #31
 8009576:	9805      	ldr	r0, [sp, #20]
 8009578:	f7fe ff04 	bl	8008384 <SendMessageToModule>
										break;
 800957c:	f7ff fa4a 	bl	8008a14 <PxMessagingTask+0x7c>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009580:	8819      	ldrh	r1, [r3, #0]
 8009582:	4ab9      	ldr	r2, [pc, #740]	; (8009868 <PxMessagingTask+0xed0>)
 8009584:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	b21b      	sxth	r3, r3
 800958a:	121b      	asrs	r3, r3, #8
 800958c:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800958e:	2202      	movs	r2, #2
 8009590:	211f      	movs	r1, #31
 8009592:	9805      	ldr	r0, [sp, #20]
 8009594:	f7fe fef6 	bl	8008384 <SendMessageToModule>
										break;
 8009598:	f7ff fa3c 	bl	8008a14 <PxMessagingTask+0x7c>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800959c:	6819      	ldr	r1, [r3, #0]
 800959e:	4ab2      	ldr	r2, [pc, #712]	; (8009868 <PxMessagingTask+0xed0>)
 80095a0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80095a2:	6819      	ldr	r1, [r3, #0]
 80095a4:	0a09      	lsrs	r1, r1, #8
 80095a6:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80095a8:	6819      	ldr	r1, [r3, #0]
 80095aa:	0c09      	lsrs	r1, r1, #16
 80095ac:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	0e1b      	lsrs	r3, r3, #24
 80095b2:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80095b4:	2204      	movs	r2, #4
 80095b6:	211f      	movs	r1, #31
 80095b8:	9805      	ldr	r0, [sp, #20]
 80095ba:	f7fe fee3 	bl	8008384 <SendMessageToModule>
										break;
 80095be:	f7ff fa29 	bl	8008a14 <PxMessagingTask+0x7c>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	4aa8      	ldr	r2, [pc, #672]	; (8009868 <PxMessagingTask+0xed0>)
 80095c6:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80095c8:	6819      	ldr	r1, [r3, #0]
 80095ca:	1209      	asrs	r1, r1, #8
 80095cc:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80095ce:	6819      	ldr	r1, [r3, #0]
 80095d0:	1409      	asrs	r1, r1, #16
 80095d2:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	161b      	asrs	r3, r3, #24
 80095d8:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80095da:	2204      	movs	r2, #4
 80095dc:	211f      	movs	r1, #31
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	f7fe fed0 	bl	8008384 <SendMessageToModule>
										break;
 80095e4:	f7ff fa16 	bl	8008a14 <PxMessagingTask+0x7c>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80095e8:	7819      	ldrb	r1, [r3, #0]
 80095ea:	4a9f      	ldr	r2, [pc, #636]	; (8009868 <PxMessagingTask+0xed0>)
 80095ec:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80095ee:	7859      	ldrb	r1, [r3, #1]
 80095f0:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80095f2:	7899      	ldrb	r1, [r3, #2]
 80095f4:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80095f6:	78db      	ldrb	r3, [r3, #3]
 80095f8:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80095fa:	2208      	movs	r2, #8
 80095fc:	211f      	movs	r1, #31
 80095fe:	9805      	ldr	r0, [sp, #20]
 8009600:	f7fe fec0 	bl	8008384 <SendMessageToModule>
										break; // You cannot bitwise floats
 8009604:	f7ff fa06 	bl	8008a14 <PxMessagingTask+0x7c>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8009608:	2b02      	cmp	r3, #2
 800960a:	d01d      	beq.n	8009648 <PxMessagingTask+0xcb0>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800960c:	d801      	bhi.n	8009612 <PxMessagingTask+0xc7a>
 800960e:	f000 fd80 	bl	800a112 <PxMessagingTask+0x177a>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 8009612:	001d      	movs	r5, r3
 8009614:	3d04      	subs	r5, #4
 8009616:	00ad      	lsls	r5, r5, #2
 8009618:	4b94      	ldr	r3, [pc, #592]	; (800986c <PxMessagingTask+0xed4>)
 800961a:	58ea      	ldr	r2, [r5, r3]
 800961c:	250f      	movs	r5, #15
 800961e:	4015      	ands	r5, r2
 8009620:	46aa      	mov	sl, r5
 8009622:	4b91      	ldr	r3, [pc, #580]	; (8009868 <PxMessagingTask+0xed0>)
 8009624:	701d      	strb	r5, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8009626:	d100      	bne.n	800962a <PxMessagingTask+0xc92>
 8009628:	e0af      	b.n	800978a <PxMessagingTask+0xdf2>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800962a:	0c12      	lsrs	r2, r2, #16
 800962c:	2380      	movs	r3, #128	; 0x80
 800962e:	059b      	lsls	r3, r3, #22
 8009630:	18d3      	adds	r3, r2, r3
									switch(messageParams[0]) // requested format
 8009632:	3d01      	subs	r5, #1
 8009634:	b2e9      	uxtb	r1, r5
 8009636:	2907      	cmp	r1, #7
 8009638:	d901      	bls.n	800963e <PxMessagingTask+0xca6>
 800963a:	f000 fd59 	bl	800a0f0 <PxMessagingTask+0x1758>
 800963e:	b2ed      	uxtb	r5, r5
 8009640:	00ad      	lsls	r5, r5, #2
 8009642:	498b      	ldr	r1, [pc, #556]	; (8009870 <PxMessagingTask+0xed8>)
 8009644:	5949      	ldr	r1, [r1, r5]
 8009646:	468f      	mov	pc, r1
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009648:	4b84      	ldr	r3, [pc, #528]	; (800985c <PxMessagingTask+0xec4>)
 800964a:	2038      	movs	r0, #56	; 0x38
 800964c:	4360      	muls	r0, r4
 800964e:	1818      	adds	r0, r3, r0
 8009650:	1841      	adds	r1, r0, r1
 8009652:	3901      	subs	r1, #1
 8009654:	2000      	movs	r0, #0
 8009656:	7008      	strb	r0, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009658:	1c68      	adds	r0, r5, #1
 800965a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800965c:	4694      	mov	ip, r2
 800965e:	4460      	add	r0, ip
 8009660:	18c0      	adds	r0, r0, r3
 8009662:	f7fa f9b1 	bl	80039c8 <IsModuleParameter>
 8009666:	1e05      	subs	r5, r0, #0
 8009668:	9009      	str	r0, [sp, #36]	; 0x24
								if(temp == 0){ // Parameter does not exist
 800966a:	d013      	beq.n	8009694 <PxMessagingTask+0xcfc>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800966c:	3d01      	subs	r5, #1
 800966e:	4a81      	ldr	r2, [pc, #516]	; (8009874 <PxMessagingTask+0xedc>)
 8009670:	230c      	movs	r3, #12
 8009672:	435d      	muls	r5, r3
 8009674:	58ab      	ldr	r3, [r5, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8009676:	1952      	adds	r2, r2, r5
 8009678:	7912      	ldrb	r2, [r2, #4]
 800967a:	497b      	ldr	r1, [pc, #492]	; (8009868 <PxMessagingTask+0xed0>)
 800967c:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800967e:	3a01      	subs	r2, #1
 8009680:	b2d1      	uxtb	r1, r2
 8009682:	2907      	cmp	r1, #7
 8009684:	d901      	bls.n	800968a <PxMessagingTask+0xcf2>
 8009686:	f000 fd2f 	bl	800a0e8 <PxMessagingTask+0x1750>
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	0092      	lsls	r2, r2, #2
 800968e:	497a      	ldr	r1, [pc, #488]	; (8009878 <PxMessagingTask+0xee0>)
 8009690:	588a      	ldr	r2, [r1, r2]
 8009692:	4697      	mov	pc, r2
									SendMessageToModule(src,
 8009694:	2201      	movs	r2, #1
 8009696:	211f      	movs	r1, #31
 8009698:	9805      	ldr	r0, [sp, #20]
 800969a:	f7fe fe73 	bl	8008384 <SendMessageToModule>
 800969e:	46aa      	mov	sl, r5
 80096a0:	f7ff f9b8 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =*(__IO uint8_t* )temp32;
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	4b70      	ldr	r3, [pc, #448]	; (8009868 <PxMessagingTask+0xed0>)
 80096a8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80096aa:	2202      	movs	r2, #2
 80096ac:	211f      	movs	r1, #31
 80096ae:	9805      	ldr	r0, [sp, #20]
 80096b0:	f7fe fe68 	bl	8008384 <SendMessageToModule>
											break;
 80096b4:	2300      	movs	r3, #0
 80096b6:	469a      	mov	sl, r3
 80096b8:	f7ff f9ac 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =*(__IO int8_t* )temp32;
 80096bc:	781a      	ldrb	r2, [r3, #0]
 80096be:	4b6a      	ldr	r3, [pc, #424]	; (8009868 <PxMessagingTask+0xed0>)
 80096c0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80096c2:	2202      	movs	r2, #2
 80096c4:	211f      	movs	r1, #31
 80096c6:	9805      	ldr	r0, [sp, #20]
 80096c8:	f7fe fe5c 	bl	8008384 <SendMessageToModule>
											break;
 80096cc:	2300      	movs	r3, #0
 80096ce:	469a      	mov	sl, r3
 80096d0:	f7ff f9a0 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80096d4:	8819      	ldrh	r1, [r3, #0]
 80096d6:	4a64      	ldr	r2, [pc, #400]	; (8009868 <PxMessagingTask+0xed0>)
 80096d8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	0a1b      	lsrs	r3, r3, #8
 80096de:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80096e0:	2203      	movs	r2, #3
 80096e2:	211f      	movs	r1, #31
 80096e4:	9805      	ldr	r0, [sp, #20]
 80096e6:	f7fe fe4d 	bl	8008384 <SendMessageToModule>
											break;
 80096ea:	2300      	movs	r3, #0
 80096ec:	469a      	mov	sl, r3
 80096ee:	f7ff f991 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80096f2:	8819      	ldrh	r1, [r3, #0]
 80096f4:	4a5c      	ldr	r2, [pc, #368]	; (8009868 <PxMessagingTask+0xed0>)
 80096f6:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b21b      	sxth	r3, r3
 80096fc:	121b      	asrs	r3, r3, #8
 80096fe:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009700:	2203      	movs	r2, #3
 8009702:	211f      	movs	r1, #31
 8009704:	9805      	ldr	r0, [sp, #20]
 8009706:	f7fe fe3d 	bl	8008384 <SendMessageToModule>
											break;
 800970a:	2300      	movs	r3, #0
 800970c:	469a      	mov	sl, r3
 800970e:	f7ff f981 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	4a54      	ldr	r2, [pc, #336]	; (8009868 <PxMessagingTask+0xed0>)
 8009716:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009718:	6819      	ldr	r1, [r3, #0]
 800971a:	0a09      	lsrs	r1, r1, #8
 800971c:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	0c09      	lsrs	r1, r1, #16
 8009722:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	0e1b      	lsrs	r3, r3, #24
 8009728:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800972a:	2205      	movs	r2, #5
 800972c:	211f      	movs	r1, #31
 800972e:	9805      	ldr	r0, [sp, #20]
 8009730:	f7fe fe28 	bl	8008384 <SendMessageToModule>
											break;
 8009734:	2300      	movs	r3, #0
 8009736:	469a      	mov	sl, r3
 8009738:	f7ff f96c 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800973c:	6819      	ldr	r1, [r3, #0]
 800973e:	4a4a      	ldr	r2, [pc, #296]	; (8009868 <PxMessagingTask+0xed0>)
 8009740:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	1209      	asrs	r1, r1, #8
 8009746:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009748:	6819      	ldr	r1, [r3, #0]
 800974a:	1409      	asrs	r1, r1, #16
 800974c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	161b      	asrs	r3, r3, #24
 8009752:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009754:	2205      	movs	r2, #5
 8009756:	211f      	movs	r1, #31
 8009758:	9805      	ldr	r0, [sp, #20]
 800975a:	f7fe fe13 	bl	8008384 <SendMessageToModule>
											break;
 800975e:	2300      	movs	r3, #0
 8009760:	469a      	mov	sl, r3
 8009762:	f7ff f957 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009766:	7819      	ldrb	r1, [r3, #0]
 8009768:	4a3f      	ldr	r2, [pc, #252]	; (8009868 <PxMessagingTask+0xed0>)
 800976a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800976c:	7859      	ldrb	r1, [r3, #1]
 800976e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009770:	7899      	ldrb	r1, [r3, #2]
 8009772:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009774:	78db      	ldrb	r3, [r3, #3]
 8009776:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009778:	2209      	movs	r2, #9
 800977a:	211f      	movs	r1, #31
 800977c:	9805      	ldr	r0, [sp, #20]
 800977e:	f7fe fe01 	bl	8008384 <SendMessageToModule>
											break;
 8009782:	2300      	movs	r3, #0
 8009784:	469a      	mov	sl, r3
 8009786:	f7ff f945 	bl	8008a14 <PxMessagingTask+0x7c>
									SendMessageToModule(src,
 800978a:	2201      	movs	r2, #1
 800978c:	211f      	movs	r1, #31
 800978e:	9805      	ldr	r0, [sp, #20]
 8009790:	f7fe fdf8 	bl	8008384 <SendMessageToModule>
 8009794:	f7ff f93e 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	4b33      	ldr	r3, [pc, #204]	; (8009868 <PxMessagingTask+0xed0>)
 800979c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800979e:	2202      	movs	r2, #2
 80097a0:	211f      	movs	r1, #31
 80097a2:	9805      	ldr	r0, [sp, #20]
 80097a4:	f7fe fdee 	bl	8008384 <SendMessageToModule>
											break;
 80097a8:	2300      	movs	r3, #0
 80097aa:	469a      	mov	sl, r3
 80097ac:	f7ff f932 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =*(__IO int8_t* )temp32;
 80097b0:	781a      	ldrb	r2, [r3, #0]
 80097b2:	4b2d      	ldr	r3, [pc, #180]	; (8009868 <PxMessagingTask+0xed0>)
 80097b4:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80097b6:	2202      	movs	r2, #2
 80097b8:	211f      	movs	r1, #31
 80097ba:	9805      	ldr	r0, [sp, #20]
 80097bc:	f7fe fde2 	bl	8008384 <SendMessageToModule>
											break;
 80097c0:	2300      	movs	r3, #0
 80097c2:	469a      	mov	sl, r3
 80097c4:	f7ff f926 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80097c8:	8819      	ldrh	r1, [r3, #0]
 80097ca:	4a27      	ldr	r2, [pc, #156]	; (8009868 <PxMessagingTask+0xed0>)
 80097cc:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	0a1b      	lsrs	r3, r3, #8
 80097d2:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80097d4:	2203      	movs	r2, #3
 80097d6:	211f      	movs	r1, #31
 80097d8:	9805      	ldr	r0, [sp, #20]
 80097da:	f7fe fdd3 	bl	8008384 <SendMessageToModule>
											break;
 80097de:	2300      	movs	r3, #0
 80097e0:	469a      	mov	sl, r3
 80097e2:	f7ff f917 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80097e6:	8819      	ldrh	r1, [r3, #0]
 80097e8:	4a1f      	ldr	r2, [pc, #124]	; (8009868 <PxMessagingTask+0xed0>)
 80097ea:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	b21b      	sxth	r3, r3
 80097f0:	121b      	asrs	r3, r3, #8
 80097f2:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80097f4:	2203      	movs	r2, #3
 80097f6:	211f      	movs	r1, #31
 80097f8:	9805      	ldr	r0, [sp, #20]
 80097fa:	f7fe fdc3 	bl	8008384 <SendMessageToModule>
											break;
 80097fe:	2300      	movs	r3, #0
 8009800:	469a      	mov	sl, r3
 8009802:	f7ff f907 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009806:	6819      	ldr	r1, [r3, #0]
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <PxMessagingTask+0xed0>)
 800980a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800980c:	6819      	ldr	r1, [r3, #0]
 800980e:	0a09      	lsrs	r1, r1, #8
 8009810:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	0c09      	lsrs	r1, r1, #16
 8009816:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	0e1b      	lsrs	r3, r3, #24
 800981c:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800981e:	2205      	movs	r2, #5
 8009820:	211f      	movs	r1, #31
 8009822:	9805      	ldr	r0, [sp, #20]
 8009824:	f7fe fdae 	bl	8008384 <SendMessageToModule>
											break;
 8009828:	2300      	movs	r3, #0
 800982a:	469a      	mov	sl, r3
 800982c:	f7ff f8f2 	bl	8008a14 <PxMessagingTask+0x7c>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009830:	6819      	ldr	r1, [r3, #0]
 8009832:	4a0d      	ldr	r2, [pc, #52]	; (8009868 <PxMessagingTask+0xed0>)
 8009834:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009836:	6819      	ldr	r1, [r3, #0]
 8009838:	1209      	asrs	r1, r1, #8
 800983a:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800983c:	6819      	ldr	r1, [r3, #0]
 800983e:	1409      	asrs	r1, r1, #16
 8009840:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	161b      	asrs	r3, r3, #24
 8009846:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009848:	2205      	movs	r2, #5
 800984a:	211f      	movs	r1, #31
 800984c:	9805      	ldr	r0, [sp, #20]
 800984e:	f7fe fd99 	bl	8008384 <SendMessageToModule>
											break;
 8009852:	2300      	movs	r3, #0
 8009854:	469a      	mov	sl, r3
 8009856:	f7ff f8dd 	bl	8008a14 <PxMessagingTask+0x7c>
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	2000054c 	.word	0x2000054c
 8009860:	2000080e 	.word	0x2000080e
 8009864:	0801aea4 	.word	0x0801aea4
 8009868:	200006d0 	.word	0x200006d0
 800986c:	20006200 	.word	0x20006200
 8009870:	0801aec4 	.word	0x0801aec4
 8009874:	20000098 	.word	0x20000098
 8009878:	0801aee4 	.word	0x0801aee4
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800987c:	7819      	ldrb	r1, [r3, #0]
 800987e:	4bd9      	ldr	r3, [pc, #868]	; (8009be4 <PxMessagingTask+0x124c>)
 8009880:	7059      	strb	r1, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009882:	49d9      	ldr	r1, [pc, #868]	; (8009be8 <PxMessagingTask+0x1250>)
 8009884:	1851      	adds	r1, r2, r1
 8009886:	7809      	ldrb	r1, [r1, #0]
 8009888:	7099      	strb	r1, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800988a:	49d8      	ldr	r1, [pc, #864]	; (8009bec <PxMessagingTask+0x1254>)
 800988c:	1851      	adds	r1, r2, r1
 800988e:	7809      	ldrb	r1, [r1, #0]
 8009890:	70d9      	strb	r1, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009892:	49d7      	ldr	r1, [pc, #860]	; (8009bf0 <PxMessagingTask+0x1258>)
 8009894:	468c      	mov	ip, r1
 8009896:	4462      	add	r2, ip
 8009898:	7812      	ldrb	r2, [r2, #0]
 800989a:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800989c:	2209      	movs	r2, #9
 800989e:	211f      	movs	r1, #31
 80098a0:	9805      	ldr	r0, [sp, #20]
 80098a2:	f7fe fd6f 	bl	8008384 <SendMessageToModule>
											break;
 80098a6:	2300      	movs	r3, #0
 80098a8:	469a      	mov	sl, r3
 80098aa:	f7ff f8b3 	bl	8008a14 <PxMessagingTask+0x7c>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80098ae:	4bd1      	ldr	r3, [pc, #836]	; (8009bf4 <PxMessagingTask+0x125c>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	2002      	movs	r0, #2
 80098b6:	4240      	negs	r0, r0
 80098b8:	17c1      	asrs	r1, r0, #31
 80098ba:	1812      	adds	r2, r2, r0
 80098bc:	414b      	adcs	r3, r1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00b      	beq.n	80098da <PxMessagingTask+0xf42>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80098c2:	4bcd      	ldr	r3, [pc, #820]	; (8009bf8 <PxMessagingTask+0x1260>)
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	2b10      	cmp	r3, #16
 80098c8:	d101      	bne.n	80098ce <PxMessagingTask+0xf36>
 80098ca:	f000 fc26 	bl	800a11a <PxMessagingTask+0x1782>
								responseStatus =BOS_OK;
 80098ce:	2500      	movs	r5, #0
 80098d0:	4bc9      	ldr	r3, [pc, #804]	; (8009bf8 <PxMessagingTask+0x1260>)
 80098d2:	701d      	strb	r5, [r3, #0]
 80098d4:	46aa      	mov	sl, r5
 80098d6:	f7ff f89d 	bl	8008a14 <PxMessagingTask+0x7c>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <PxMessagingTask+0xf4a>
 80098de:	2a01      	cmp	r2, #1
 80098e0:	d8ef      	bhi.n	80098c2 <PxMessagingTask+0xf2a>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 80098e2:	2138      	movs	r1, #56	; 0x38
 80098e4:	4361      	muls	r1, r4
 80098e6:	4ac5      	ldr	r2, [pc, #788]	; (8009bfc <PxMessagingTask+0x1264>)
 80098e8:	1852      	adds	r2, r2, r1
 80098ea:	5d52      	ldrb	r2, [r2, r5]
 80098ec:	4692      	mov	sl, r2
 80098ee:	4ac4      	ldr	r2, [pc, #784]	; (8009c00 <PxMessagingTask+0x1268>)
 80098f0:	4651      	mov	r1, sl
 80098f2:	7011      	strb	r1, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 80098f4:	2908      	cmp	r1, #8
 80098f6:	d8e4      	bhi.n	80098c2 <PxMessagingTask+0xf2a>
 80098f8:	008a      	lsls	r2, r1, #2
 80098fa:	49c2      	ldr	r1, [pc, #776]	; (8009c04 <PxMessagingTask+0x126c>)
 80098fc:	588a      	ldr	r2, [r1, r2]
 80098fe:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009900:	4bbd      	ldr	r3, [pc, #756]	; (8009bf8 <PxMessagingTask+0x1260>)
 8009902:	2210      	movs	r2, #16
 8009904:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009906:	f7ff f885 	bl	8008a14 <PxMessagingTask+0x7c>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800990a:	4aba      	ldr	r2, [pc, #744]	; (8009bf4 <PxMessagingTask+0x125c>)
 800990c:	2038      	movs	r0, #56	; 0x38
 800990e:	4360      	muls	r0, r4
 8009910:	49ba      	ldr	r1, [pc, #744]	; (8009bfc <PxMessagingTask+0x1264>)
 8009912:	1809      	adds	r1, r1, r0
 8009914:	1949      	adds	r1, r1, r5
 8009916:	784b      	ldrb	r3, [r1, #1]
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	2300      	movs	r3, #0
 800991c:	6053      	str	r3, [r2, #4]
										break;
 800991e:	e7d0      	b.n	80098c2 <PxMessagingTask+0xf2a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009920:	4ab4      	ldr	r2, [pc, #720]	; (8009bf4 <PxMessagingTask+0x125c>)
 8009922:	2038      	movs	r0, #56	; 0x38
 8009924:	4360      	muls	r0, r4
 8009926:	49b5      	ldr	r1, [pc, #724]	; (8009bfc <PxMessagingTask+0x1264>)
 8009928:	1809      	adds	r1, r1, r0
 800992a:	1949      	adds	r1, r1, r5
 800992c:	2301      	movs	r3, #1
 800992e:	56cb      	ldrsb	r3, [r1, r3]
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	17db      	asrs	r3, r3, #31
 8009934:	6053      	str	r3, [r2, #4]
										break;
 8009936:	e7c4      	b.n	80098c2 <PxMessagingTask+0xf2a>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 8009938:	4aae      	ldr	r2, [pc, #696]	; (8009bf4 <PxMessagingTask+0x125c>)
 800993a:	2038      	movs	r0, #56	; 0x38
 800993c:	4360      	muls	r0, r4
 800993e:	49af      	ldr	r1, [pc, #700]	; (8009bfc <PxMessagingTask+0x1264>)
 8009940:	1809      	adds	r1, r1, r0
 8009942:	1949      	adds	r1, r1, r5
 8009944:	788b      	ldrb	r3, [r1, #2]
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	7849      	ldrb	r1, [r1, #1]
 800994a:	185b      	adds	r3, r3, r1
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	17db      	asrs	r3, r3, #31
 8009950:	6053      	str	r3, [r2, #4]
										break;
 8009952:	e7b6      	b.n	80098c2 <PxMessagingTask+0xf2a>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009954:	4aa7      	ldr	r2, [pc, #668]	; (8009bf4 <PxMessagingTask+0x125c>)
 8009956:	2038      	movs	r0, #56	; 0x38
 8009958:	4360      	muls	r0, r4
 800995a:	49a8      	ldr	r1, [pc, #672]	; (8009bfc <PxMessagingTask+0x1264>)
 800995c:	1809      	adds	r1, r1, r0
 800995e:	1949      	adds	r1, r1, r5
 8009960:	788b      	ldrb	r3, [r1, #2]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	7849      	ldrb	r1, [r1, #1]
 8009966:	185b      	adds	r3, r3, r1
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	17db      	asrs	r3, r3, #31
 800996c:	6053      	str	r3, [r2, #4]
										break;
 800996e:	e7a8      	b.n	80098c2 <PxMessagingTask+0xf2a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009970:	4aa0      	ldr	r2, [pc, #640]	; (8009bf4 <PxMessagingTask+0x125c>)
 8009972:	2038      	movs	r0, #56	; 0x38
 8009974:	4360      	muls	r0, r4
 8009976:	49a1      	ldr	r1, [pc, #644]	; (8009bfc <PxMessagingTask+0x1264>)
 8009978:	1809      	adds	r1, r1, r0
 800997a:	1949      	adds	r1, r1, r5
 800997c:	788b      	ldrb	r3, [r1, #2]
 800997e:	021b      	lsls	r3, r3, #8
 8009980:	78c8      	ldrb	r0, [r1, #3]
 8009982:	0400      	lsls	r0, r0, #16
 8009984:	181b      	adds	r3, r3, r0
 8009986:	7848      	ldrb	r0, [r1, #1]
 8009988:	181b      	adds	r3, r3, r0
 800998a:	7909      	ldrb	r1, [r1, #4]
 800998c:	0609      	lsls	r1, r1, #24
 800998e:	185b      	adds	r3, r3, r1
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	2300      	movs	r3, #0
 8009994:	6053      	str	r3, [r2, #4]
										break;
 8009996:	e794      	b.n	80098c2 <PxMessagingTask+0xf2a>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 8009998:	4a96      	ldr	r2, [pc, #600]	; (8009bf4 <PxMessagingTask+0x125c>)
 800999a:	2038      	movs	r0, #56	; 0x38
 800999c:	4360      	muls	r0, r4
 800999e:	4997      	ldr	r1, [pc, #604]	; (8009bfc <PxMessagingTask+0x1264>)
 80099a0:	1809      	adds	r1, r1, r0
 80099a2:	1949      	adds	r1, r1, r5
 80099a4:	788b      	ldrb	r3, [r1, #2]
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	7848      	ldrb	r0, [r1, #1]
 80099aa:	181b      	adds	r3, r3, r0
 80099ac:	78c8      	ldrb	r0, [r1, #3]
 80099ae:	0400      	lsls	r0, r0, #16
 80099b0:	181b      	adds	r3, r3, r0
 80099b2:	7909      	ldrb	r1, [r1, #4]
 80099b4:	0609      	lsls	r1, r1, #24
 80099b6:	185b      	adds	r3, r3, r1
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	17db      	asrs	r3, r3, #31
 80099bc:	6053      	str	r3, [r2, #4]
										break;
 80099be:	e780      	b.n	80098c2 <PxMessagingTask+0xf2a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80099c0:	4a8c      	ldr	r2, [pc, #560]	; (8009bf4 <PxMessagingTask+0x125c>)
 80099c2:	2038      	movs	r0, #56	; 0x38
 80099c4:	4360      	muls	r0, r4
 80099c6:	498d      	ldr	r1, [pc, #564]	; (8009bfc <PxMessagingTask+0x1264>)
 80099c8:	1809      	adds	r1, r1, r0
 80099ca:	1949      	adds	r1, r1, r5
 80099cc:	788b      	ldrb	r3, [r1, #2]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	78c8      	ldrb	r0, [r1, #3]
 80099d2:	0400      	lsls	r0, r0, #16
 80099d4:	181b      	adds	r3, r3, r0
 80099d6:	7848      	ldrb	r0, [r1, #1]
 80099d8:	181b      	adds	r3, r3, r0
 80099da:	7909      	ldrb	r1, [r1, #4]
 80099dc:	0609      	lsls	r1, r1, #24
 80099de:	185b      	adds	r3, r3, r1
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	2300      	movs	r3, #0
 80099e4:	6053      	str	r3, [r2, #4]
										break;
 80099e6:	e76c      	b.n	80098c2 <PxMessagingTask+0xf2a>
							responseStatus =BOS_OK; // Initialize response
 80099e8:	4b83      	ldr	r3, [pc, #524]	; (8009bf8 <PxMessagingTask+0x1260>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 80099ee:	46a8      	mov	r8, r5
 80099f0:	4b82      	ldr	r3, [pc, #520]	; (8009bfc <PxMessagingTask+0x1264>)
 80099f2:	199b      	adds	r3, r3, r6
 80099f4:	5d5b      	ldrb	r3, [r3, r5]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d100      	bne.n	80099fc <PxMessagingTask+0x1064>
 80099fa:	e12f      	b.n	8009c5c <PxMessagingTask+0x12c4>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 80099fc:	2b1e      	cmp	r3, #30
 80099fe:	d900      	bls.n	8009a02 <PxMessagingTask+0x106a>
 8009a00:	e114      	b.n	8009c2c <PxMessagingTask+0x1294>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8009a02:	1e5d      	subs	r5, r3, #1
 8009a04:	00aa      	lsls	r2, r5, #2
 8009a06:	4b80      	ldr	r3, [pc, #512]	; (8009c08 <PxMessagingTask+0x1270>)
 8009a08:	58d2      	ldr	r2, [r2, r3]
 8009a0a:	0c13      	lsrs	r3, r2, #16
 8009a0c:	2180      	movs	r1, #128	; 0x80
 8009a0e:	0589      	lsls	r1, r1, #22
 8009a10:	468c      	mov	ip, r1
 8009a12:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 8009a14:	2101      	movs	r1, #1
 8009a16:	4441      	add	r1, r8
 8009a18:	4689      	mov	r9, r1
 8009a1a:	2038      	movs	r0, #56	; 0x38
 8009a1c:	4360      	muls	r0, r4
 8009a1e:	4977      	ldr	r1, [pc, #476]	; (8009bfc <PxMessagingTask+0x1264>)
 8009a20:	1809      	adds	r1, r1, r0
 8009a22:	4648      	mov	r0, r9
 8009a24:	5c09      	ldrb	r1, [r1, r0]
 8009a26:	468a      	mov	sl, r1
 8009a28:	3901      	subs	r1, #1
 8009a2a:	b2c8      	uxtb	r0, r1
 8009a2c:	2807      	cmp	r0, #7
 8009a2e:	d80d      	bhi.n	8009a4c <PxMessagingTask+0x10b4>
 8009a30:	b2c9      	uxtb	r1, r1
 8009a32:	0089      	lsls	r1, r1, #2
 8009a34:	4875      	ldr	r0, [pc, #468]	; (8009c0c <PxMessagingTask+0x1274>)
 8009a36:	5841      	ldr	r1, [r0, r1]
 8009a38:	468f      	mov	pc, r1
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009a3a:	0712      	lsls	r2, r2, #28
 8009a3c:	d022      	beq.n	8009a84 <PxMessagingTask+0x10ec>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009a3e:	2138      	movs	r1, #56	; 0x38
 8009a40:	4361      	muls	r1, r4
 8009a42:	4a6e      	ldr	r2, [pc, #440]	; (8009bfc <PxMessagingTask+0x1264>)
 8009a44:	1852      	adds	r2, r2, r1
 8009a46:	4442      	add	r2, r8
 8009a48:	7892      	ldrb	r2, [r2, #2]
 8009a4a:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009a4c:	2338      	movs	r3, #56	; 0x38
 8009a4e:	4363      	muls	r3, r4
 8009a50:	4a6a      	ldr	r2, [pc, #424]	; (8009bfc <PxMessagingTask+0x1264>)
 8009a52:	18d2      	adds	r2, r2, r3
 8009a54:	4643      	mov	r3, r8
 8009a56:	5cd3      	ldrb	r3, [r2, r3]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	0098      	lsls	r0, r3, #2
 8009a5c:	496a      	ldr	r1, [pc, #424]	; (8009c08 <PxMessagingTask+0x1270>)
 8009a5e:	5841      	ldr	r1, [r0, r1]
 8009a60:	4648      	mov	r0, r9
 8009a62:	5c12      	ldrb	r2, [r2, r0]
 8009a64:	200f      	movs	r0, #15
 8009a66:	4008      	ands	r0, r1
 8009a68:	4290      	cmp	r0, r2
 8009a6a:	d100      	bne.n	8009a6e <PxMessagingTask+0x10d6>
 8009a6c:	e0e1      	b.n	8009c32 <PxMessagingTask+0x129a>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4867      	ldr	r0, [pc, #412]	; (8009c10 <PxMessagingTask+0x1278>)
 8009a72:	4684      	mov	ip, r0
 8009a74:	4462      	add	r2, ip
 8009a76:	400a      	ands	r2, r1
 8009a78:	4963      	ldr	r1, [pc, #396]	; (8009c08 <PxMessagingTask+0x1270>)
 8009a7a:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009a7c:	4b5e      	ldr	r3, [pc, #376]	; (8009bf8 <PxMessagingTask+0x1260>)
 8009a7e:	2214      	movs	r2, #20
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	e0d6      	b.n	8009c32 <PxMessagingTask+0x129a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009a84:	2001      	movs	r0, #1
 8009a86:	f00a f899 	bl	8013bbc <malloc>
 8009a8a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009a8c:	d005      	beq.n	8009a9a <PxMessagingTask+0x1102>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009a8e:	00ad      	lsls	r5, r5, #2
 8009a90:	0400      	lsls	r0, r0, #16
 8009a92:	4450      	add	r0, sl
 8009a94:	4a5c      	ldr	r2, [pc, #368]	; (8009c08 <PxMessagingTask+0x1270>)
 8009a96:	50a8      	str	r0, [r5, r2]
 8009a98:	e7d1      	b.n	8009a3e <PxMessagingTask+0x10a6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009a9a:	4b57      	ldr	r3, [pc, #348]	; (8009bf8 <PxMessagingTask+0x1260>)
 8009a9c:	2212      	movs	r2, #18
 8009a9e:	701a      	strb	r2, [r3, #0]
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009aa0:	e7d4      	b.n	8009a4c <PxMessagingTask+0x10b4>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009aa2:	0712      	lsls	r2, r2, #28
 8009aa4:	d008      	beq.n	8009ab8 <PxMessagingTask+0x1120>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009aa6:	2138      	movs	r1, #56	; 0x38
 8009aa8:	4361      	muls	r1, r4
 8009aaa:	4a54      	ldr	r2, [pc, #336]	; (8009bfc <PxMessagingTask+0x1264>)
 8009aac:	1852      	adds	r2, r2, r1
 8009aae:	4442      	add	r2, r8
 8009ab0:	7892      	ldrb	r2, [r2, #2]
 8009ab2:	b252      	sxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e7c9      	b.n	8009a4c <PxMessagingTask+0x10b4>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f00a f87f 	bl	8013bbc <malloc>
 8009abe:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009ac0:	d100      	bne.n	8009ac4 <PxMessagingTask+0x112c>
 8009ac2:	e339      	b.n	800a138 <PxMessagingTask+0x17a0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009ac4:	00ad      	lsls	r5, r5, #2
 8009ac6:	0400      	lsls	r0, r0, #16
 8009ac8:	3002      	adds	r0, #2
 8009aca:	4a4f      	ldr	r2, [pc, #316]	; (8009c08 <PxMessagingTask+0x1270>)
 8009acc:	50a8      	str	r0, [r5, r2]
 8009ace:	e7ea      	b.n	8009aa6 <PxMessagingTask+0x110e>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009ad0:	0712      	lsls	r2, r2, #28
 8009ad2:	d00b      	beq.n	8009aec <PxMessagingTask+0x1154>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009ad4:	2138      	movs	r1, #56	; 0x38
 8009ad6:	4361      	muls	r1, r4
 8009ad8:	4a48      	ldr	r2, [pc, #288]	; (8009bfc <PxMessagingTask+0x1264>)
 8009ada:	1852      	adds	r2, r2, r1
 8009adc:	4442      	add	r2, r8
 8009ade:	78d1      	ldrb	r1, [r2, #3]
 8009ae0:	0209      	lsls	r1, r1, #8
 8009ae2:	7892      	ldrb	r2, [r2, #2]
 8009ae4:	1852      	adds	r2, r2, r1
 8009ae6:	b292      	uxth	r2, r2
 8009ae8:	801a      	strh	r2, [r3, #0]
 8009aea:	e7af      	b.n	8009a4c <PxMessagingTask+0x10b4>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009aec:	2002      	movs	r0, #2
 8009aee:	f00a f865 	bl	8013bbc <malloc>
 8009af2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009af4:	d100      	bne.n	8009af8 <PxMessagingTask+0x1160>
 8009af6:	e31f      	b.n	800a138 <PxMessagingTask+0x17a0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009af8:	00ad      	lsls	r5, r5, #2
 8009afa:	0400      	lsls	r0, r0, #16
 8009afc:	3003      	adds	r0, #3
 8009afe:	4a42      	ldr	r2, [pc, #264]	; (8009c08 <PxMessagingTask+0x1270>)
 8009b00:	50a8      	str	r0, [r5, r2]
 8009b02:	e7e7      	b.n	8009ad4 <PxMessagingTask+0x113c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009b04:	0712      	lsls	r2, r2, #28
 8009b06:	d00b      	beq.n	8009b20 <PxMessagingTask+0x1188>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009b08:	2138      	movs	r1, #56	; 0x38
 8009b0a:	4361      	muls	r1, r4
 8009b0c:	4a3b      	ldr	r2, [pc, #236]	; (8009bfc <PxMessagingTask+0x1264>)
 8009b0e:	1852      	adds	r2, r2, r1
 8009b10:	4442      	add	r2, r8
 8009b12:	78d1      	ldrb	r1, [r2, #3]
 8009b14:	0209      	lsls	r1, r1, #8
 8009b16:	7892      	ldrb	r2, [r2, #2]
 8009b18:	1852      	adds	r2, r2, r1
 8009b1a:	b212      	sxth	r2, r2
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e795      	b.n	8009a4c <PxMessagingTask+0x10b4>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 8009b20:	2002      	movs	r0, #2
 8009b22:	f00a f84b 	bl	8013bbc <malloc>
 8009b26:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009b28:	d100      	bne.n	8009b2c <PxMessagingTask+0x1194>
 8009b2a:	e305      	b.n	800a138 <PxMessagingTask+0x17a0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009b2c:	00ad      	lsls	r5, r5, #2
 8009b2e:	0400      	lsls	r0, r0, #16
 8009b30:	3004      	adds	r0, #4
 8009b32:	4a35      	ldr	r2, [pc, #212]	; (8009c08 <PxMessagingTask+0x1270>)
 8009b34:	50a8      	str	r0, [r5, r2]
 8009b36:	e7e7      	b.n	8009b08 <PxMessagingTask+0x1170>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009b38:	0712      	lsls	r2, r2, #28
 8009b3a:	d010      	beq.n	8009b5e <PxMessagingTask+0x11c6>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009b3c:	2238      	movs	r2, #56	; 0x38
 8009b3e:	4362      	muls	r2, r4
 8009b40:	492e      	ldr	r1, [pc, #184]	; (8009bfc <PxMessagingTask+0x1264>)
 8009b42:	1889      	adds	r1, r1, r2
 8009b44:	4441      	add	r1, r8
 8009b46:	78ca      	ldrb	r2, [r1, #3]
 8009b48:	0212      	lsls	r2, r2, #8
 8009b4a:	7908      	ldrb	r0, [r1, #4]
 8009b4c:	0400      	lsls	r0, r0, #16
 8009b4e:	1812      	adds	r2, r2, r0
 8009b50:	7888      	ldrb	r0, [r1, #2]
 8009b52:	1812      	adds	r2, r2, r0
 8009b54:	7949      	ldrb	r1, [r1, #5]
 8009b56:	0609      	lsls	r1, r1, #24
 8009b58:	1852      	adds	r2, r2, r1
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	e776      	b.n	8009a4c <PxMessagingTask+0x10b4>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009b5e:	2004      	movs	r0, #4
 8009b60:	f00a f82c 	bl	8013bbc <malloc>
 8009b64:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009b66:	d100      	bne.n	8009b6a <PxMessagingTask+0x11d2>
 8009b68:	e2e6      	b.n	800a138 <PxMessagingTask+0x17a0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009b6a:	00ad      	lsls	r5, r5, #2
 8009b6c:	0400      	lsls	r0, r0, #16
 8009b6e:	3005      	adds	r0, #5
 8009b70:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <PxMessagingTask+0x1270>)
 8009b72:	50a8      	str	r0, [r5, r2]
 8009b74:	e7e2      	b.n	8009b3c <PxMessagingTask+0x11a4>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009b76:	0712      	lsls	r2, r2, #28
 8009b78:	d010      	beq.n	8009b9c <PxMessagingTask+0x1204>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009b7a:	2238      	movs	r2, #56	; 0x38
 8009b7c:	4362      	muls	r2, r4
 8009b7e:	491f      	ldr	r1, [pc, #124]	; (8009bfc <PxMessagingTask+0x1264>)
 8009b80:	1889      	adds	r1, r1, r2
 8009b82:	4441      	add	r1, r8
 8009b84:	78ca      	ldrb	r2, [r1, #3]
 8009b86:	0212      	lsls	r2, r2, #8
 8009b88:	7888      	ldrb	r0, [r1, #2]
 8009b8a:	1812      	adds	r2, r2, r0
 8009b8c:	7908      	ldrb	r0, [r1, #4]
 8009b8e:	0400      	lsls	r0, r0, #16
 8009b90:	1812      	adds	r2, r2, r0
 8009b92:	7949      	ldrb	r1, [r1, #5]
 8009b94:	0609      	lsls	r1, r1, #24
 8009b96:	1852      	adds	r2, r2, r1
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	e757      	b.n	8009a4c <PxMessagingTask+0x10b4>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009b9c:	2004      	movs	r0, #4
 8009b9e:	f00a f80d 	bl	8013bbc <malloc>
 8009ba2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009ba4:	d100      	bne.n	8009ba8 <PxMessagingTask+0x1210>
 8009ba6:	e2c7      	b.n	800a138 <PxMessagingTask+0x17a0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009ba8:	00ad      	lsls	r5, r5, #2
 8009baa:	0400      	lsls	r0, r0, #16
 8009bac:	3006      	adds	r0, #6
 8009bae:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <PxMessagingTask+0x1270>)
 8009bb0:	50a8      	str	r0, [r5, r2]
 8009bb2:	e7e2      	b.n	8009b7a <PxMessagingTask+0x11e2>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009bb4:	0712      	lsls	r2, r2, #28
 8009bb6:	d02d      	beq.n	8009c14 <PxMessagingTask+0x127c>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009bb8:	2238      	movs	r2, #56	; 0x38
 8009bba:	4362      	muls	r2, r4
 8009bbc:	490f      	ldr	r1, [pc, #60]	; (8009bfc <PxMessagingTask+0x1264>)
 8009bbe:	1889      	adds	r1, r1, r2
 8009bc0:	4441      	add	r1, r8
 8009bc2:	78ca      	ldrb	r2, [r1, #3]
 8009bc4:	0212      	lsls	r2, r2, #8
 8009bc6:	7908      	ldrb	r0, [r1, #4]
 8009bc8:	0400      	lsls	r0, r0, #16
 8009bca:	1812      	adds	r2, r2, r0
 8009bcc:	7888      	ldrb	r0, [r1, #2]
 8009bce:	1812      	adds	r2, r2, r0
 8009bd0:	7949      	ldrb	r1, [r1, #5]
 8009bd2:	0609      	lsls	r1, r1, #24
 8009bd4:	1852      	adds	r2, r2, r1
 8009bd6:	4907      	ldr	r1, [pc, #28]	; (8009bf4 <PxMessagingTask+0x125c>)
 8009bd8:	600a      	str	r2, [r1, #0]
 8009bda:	2000      	movs	r0, #0
 8009bdc:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	e734      	b.n	8009a4c <PxMessagingTask+0x10b4>
 8009be2:	46c0      	nop			; (mov r8, r8)
 8009be4:	200006d0 	.word	0x200006d0
 8009be8:	20000001 	.word	0x20000001
 8009bec:	20000002 	.word	0x20000002
 8009bf0:	20000003 	.word	0x20000003
 8009bf4:	20000888 	.word	0x20000888
 8009bf8:	20000890 	.word	0x20000890
 8009bfc:	2000054c 	.word	0x2000054c
 8009c00:	20000094 	.word	0x20000094
 8009c04:	0801af04 	.word	0x0801af04
 8009c08:	20006200 	.word	0x20006200
 8009c0c:	0801af28 	.word	0x0801af28
 8009c10:	0000fff0 	.word	0x0000fff0
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009c14:	2004      	movs	r0, #4
 8009c16:	f009 ffd1 	bl	8013bbc <malloc>
 8009c1a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009c1c:	d100      	bne.n	8009c20 <PxMessagingTask+0x1288>
 8009c1e:	e28b      	b.n	800a138 <PxMessagingTask+0x17a0>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009c20:	00ad      	lsls	r5, r5, #2
 8009c22:	0400      	lsls	r0, r0, #16
 8009c24:	3007      	adds	r0, #7
 8009c26:	4ad2      	ldr	r2, [pc, #840]	; (8009f70 <PxMessagingTask+0x15d8>)
 8009c28:	50a8      	str	r0, [r5, r2]
 8009c2a:	e7c5      	b.n	8009bb8 <PxMessagingTask+0x1220>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8009c2c:	4bd1      	ldr	r3, [pc, #836]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009c2e:	2213      	movs	r2, #19
 8009c30:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009c32:	4bd1      	ldr	r3, [pc, #836]	; (8009f78 <PxMessagingTask+0x15e0>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2240      	movs	r2, #64	; 0x40
 8009c38:	4393      	bics	r3, r2
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	4692      	mov	sl, r2
 8009c3e:	2b20      	cmp	r3, #32
 8009c40:	d001      	beq.n	8009c46 <PxMessagingTask+0x12ae>
 8009c42:	f7fe fee7 	bl	8008a14 <PxMessagingTask+0x7c>
								messageParams[0] =responseStatus;
 8009c46:	4bcb      	ldr	r3, [pc, #812]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	4bcc      	ldr	r3, [pc, #816]	; (8009f7c <PxMessagingTask+0x15e4>)
 8009c4c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009c4e:	2201      	movs	r2, #1
 8009c50:	2121      	movs	r1, #33	; 0x21
 8009c52:	9805      	ldr	r0, [sp, #20]
 8009c54:	f7fe fb96 	bl	8008384 <SendMessageToModule>
 8009c58:	f7fe fedc 	bl	8008a14 <PxMessagingTask+0x7c>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009c5c:	2238      	movs	r2, #56	; 0x38
 8009c5e:	4362      	muls	r2, r4
 8009c60:	4bc7      	ldr	r3, [pc, #796]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009c62:	189b      	adds	r3, r3, r2
 8009c64:	195d      	adds	r5, r3, r5
 8009c66:	78ab      	ldrb	r3, [r5, #2]
 8009c68:	061b      	lsls	r3, r3, #24
 8009c6a:	78ea      	ldrb	r2, [r5, #3]
 8009c6c:	0412      	lsls	r2, r2, #16
 8009c6e:	189b      	adds	r3, r3, r2
 8009c70:	796a      	ldrb	r2, [r5, #5]
 8009c72:	189b      	adds	r3, r3, r2
 8009c74:	792d      	ldrb	r5, [r5, #4]
 8009c76:	022d      	lsls	r5, r5, #8
 8009c78:	195d      	adds	r5, r3, r5
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 8009c7a:	23e0      	movs	r3, #224	; 0xe0
 8009c7c:	061b      	lsls	r3, r3, #24
 8009c7e:	18ea      	adds	r2, r5, r3
 8009c80:	2380      	movs	r3, #128	; 0x80
 8009c82:	021b      	lsls	r3, r3, #8
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d26e      	bcs.n	8009d66 <PxMessagingTask+0x13ce>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 8009c88:	2238      	movs	r2, #56	; 0x38
 8009c8a:	4362      	muls	r2, r4
 8009c8c:	4bbc      	ldr	r3, [pc, #752]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009c8e:	189b      	adds	r3, r3, r2
 8009c90:	4443      	add	r3, r8
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	2a07      	cmp	r2, #7
 8009c9a:	d8ca      	bhi.n	8009c32 <PxMessagingTask+0x129a>
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4ab8      	ldr	r2, [pc, #736]	; (8009f84 <PxMessagingTask+0x15ec>)
 8009ca2:	58d3      	ldr	r3, [r2, r3]
 8009ca4:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 8009ca6:	2238      	movs	r2, #56	; 0x38
 8009ca8:	4362      	muls	r2, r4
 8009caa:	4bb5      	ldr	r3, [pc, #724]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009cac:	189b      	adds	r3, r3, r2
 8009cae:	4443      	add	r3, r8
 8009cb0:	799b      	ldrb	r3, [r3, #6]
 8009cb2:	702b      	strb	r3, [r5, #0]
											break;
 8009cb4:	e7bd      	b.n	8009c32 <PxMessagingTask+0x129a>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009cb6:	2238      	movs	r2, #56	; 0x38
 8009cb8:	4362      	muls	r2, r4
 8009cba:	4bb1      	ldr	r3, [pc, #708]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009cbc:	189b      	adds	r3, r3, r2
 8009cbe:	4443      	add	r3, r8
 8009cc0:	799b      	ldrb	r3, [r3, #6]
 8009cc2:	b25b      	sxtb	r3, r3
 8009cc4:	702b      	strb	r3, [r5, #0]
											break;
 8009cc6:	e7b4      	b.n	8009c32 <PxMessagingTask+0x129a>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009cc8:	2238      	movs	r2, #56	; 0x38
 8009cca:	4362      	muls	r2, r4
 8009ccc:	4bac      	ldr	r3, [pc, #688]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009cce:	189b      	adds	r3, r3, r2
 8009cd0:	4443      	add	r3, r8
 8009cd2:	79da      	ldrb	r2, [r3, #7]
 8009cd4:	0212      	lsls	r2, r2, #8
 8009cd6:	799b      	ldrb	r3, [r3, #6]
 8009cd8:	189b      	adds	r3, r3, r2
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	802b      	strh	r3, [r5, #0]
											break;
 8009cde:	e7a8      	b.n	8009c32 <PxMessagingTask+0x129a>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009ce0:	2238      	movs	r2, #56	; 0x38
 8009ce2:	4362      	muls	r2, r4
 8009ce4:	4ba6      	ldr	r3, [pc, #664]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009ce6:	189b      	adds	r3, r3, r2
 8009ce8:	4443      	add	r3, r8
 8009cea:	79da      	ldrb	r2, [r3, #7]
 8009cec:	0212      	lsls	r2, r2, #8
 8009cee:	799b      	ldrb	r3, [r3, #6]
 8009cf0:	189b      	adds	r3, r3, r2
 8009cf2:	b21b      	sxth	r3, r3
 8009cf4:	802b      	strh	r3, [r5, #0]
											break;
 8009cf6:	e79c      	b.n	8009c32 <PxMessagingTask+0x129a>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009cf8:	2338      	movs	r3, #56	; 0x38
 8009cfa:	4363      	muls	r3, r4
 8009cfc:	4aa0      	ldr	r2, [pc, #640]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009cfe:	18d2      	adds	r2, r2, r3
 8009d00:	4442      	add	r2, r8
 8009d02:	79d3      	ldrb	r3, [r2, #7]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	7a11      	ldrb	r1, [r2, #8]
 8009d08:	0409      	lsls	r1, r1, #16
 8009d0a:	185b      	adds	r3, r3, r1
 8009d0c:	7991      	ldrb	r1, [r2, #6]
 8009d0e:	185b      	adds	r3, r3, r1
 8009d10:	7a52      	ldrb	r2, [r2, #9]
 8009d12:	0612      	lsls	r2, r2, #24
 8009d14:	189b      	adds	r3, r3, r2
 8009d16:	602b      	str	r3, [r5, #0]
											break;
 8009d18:	e78b      	b.n	8009c32 <PxMessagingTask+0x129a>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009d1a:	2338      	movs	r3, #56	; 0x38
 8009d1c:	4363      	muls	r3, r4
 8009d1e:	4a98      	ldr	r2, [pc, #608]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009d20:	18d2      	adds	r2, r2, r3
 8009d22:	4442      	add	r2, r8
 8009d24:	79d3      	ldrb	r3, [r2, #7]
 8009d26:	021b      	lsls	r3, r3, #8
 8009d28:	7991      	ldrb	r1, [r2, #6]
 8009d2a:	185b      	adds	r3, r3, r1
 8009d2c:	7a11      	ldrb	r1, [r2, #8]
 8009d2e:	0409      	lsls	r1, r1, #16
 8009d30:	185b      	adds	r3, r3, r1
 8009d32:	7a52      	ldrb	r2, [r2, #9]
 8009d34:	0612      	lsls	r2, r2, #24
 8009d36:	189b      	adds	r3, r3, r2
 8009d38:	602b      	str	r3, [r5, #0]
											break;
 8009d3a:	e77a      	b.n	8009c32 <PxMessagingTask+0x129a>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009d3c:	2338      	movs	r3, #56	; 0x38
 8009d3e:	4363      	muls	r3, r4
 8009d40:	4a8f      	ldr	r2, [pc, #572]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009d42:	18d2      	adds	r2, r2, r3
 8009d44:	4442      	add	r2, r8
 8009d46:	79d3      	ldrb	r3, [r2, #7]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	7a11      	ldrb	r1, [r2, #8]
 8009d4c:	0409      	lsls	r1, r1, #16
 8009d4e:	185b      	adds	r3, r3, r1
 8009d50:	7991      	ldrb	r1, [r2, #6]
 8009d52:	185b      	adds	r3, r3, r1
 8009d54:	7a52      	ldrb	r2, [r2, #9]
 8009d56:	0612      	lsls	r2, r2, #24
 8009d58:	189b      	adds	r3, r3, r2
 8009d5a:	4a8b      	ldr	r2, [pc, #556]	; (8009f88 <PxMessagingTask+0x15f0>)
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	2100      	movs	r1, #0
 8009d60:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009d62:	602b      	str	r3, [r5, #0]
											break;
 8009d64:	e765      	b.n	8009c32 <PxMessagingTask+0x129a>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009d66:	2280      	movs	r2, #128	; 0x80
 8009d68:	0292      	lsls	r2, r2, #10
 8009d6a:	23f8      	movs	r3, #248	; 0xf8
 8009d6c:	061b      	lsls	r3, r3, #24
 8009d6e:	18eb      	adds	r3, r5, r3
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d303      	bcc.n	8009d7c <PxMessagingTask+0x13e4>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009d74:	4b7f      	ldr	r3, [pc, #508]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009d76:	2215      	movs	r2, #21
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	e75a      	b.n	8009c32 <PxMessagingTask+0x129a>
									HAL_FLASH_Unlock();
 8009d7c:	f007 fea6 	bl	8011acc <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009d80:	464b      	mov	r3, r9
 8009d82:	2b22      	cmp	r3, #34	; 0x22
 8009d84:	d012      	beq.n	8009dac <PxMessagingTask+0x1414>
									if(responseStatus == BOS_OK){
 8009d86:	4b7b      	ldr	r3, [pc, #492]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d11a      	bne.n	8009dc4 <PxMessagingTask+0x142c>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009d8e:	2238      	movs	r2, #56	; 0x38
 8009d90:	4362      	muls	r2, r4
 8009d92:	4b7b      	ldr	r3, [pc, #492]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009d94:	189b      	adds	r3, r3, r2
 8009d96:	4443      	add	r3, r8
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	2a07      	cmp	r2, #7
 8009da0:	d810      	bhi.n	8009dc4 <PxMessagingTask+0x142c>
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4a79      	ldr	r2, [pc, #484]	; (8009f8c <PxMessagingTask+0x15f4>)
 8009da8:	58d3      	ldr	r3, [r2, r3]
 8009daa:	469f      	mov	pc, r3
										EraseSector(temp32);
 8009dac:	0028      	movs	r0, r5
 8009dae:	f002 fe6b 	bl	800ca88 <EraseSector>
 8009db2:	e7e8      	b.n	8009d86 <PxMessagingTask+0x13ee>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009db4:	882b      	ldrh	r3, [r5, #0]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	4a75      	ldr	r2, [pc, #468]	; (8009f90 <PxMessagingTask+0x15f8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d00c      	beq.n	8009dd8 <PxMessagingTask+0x1440>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009dbe:	4b6d      	ldr	r3, [pc, #436]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009dc0:	2216      	movs	r2, #22
 8009dc2:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8009dc4:	f007 fe96 	bl	8011af4 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d100      	bne.n	8009dd0 <PxMessagingTask+0x1438>
 8009dce:	e730      	b.n	8009c32 <PxMessagingTask+0x129a>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009dd0:	4b68      	ldr	r3, [pc, #416]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009dd2:	2216      	movs	r2, #22
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	e72c      	b.n	8009c32 <PxMessagingTask+0x129a>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009dd8:	2238      	movs	r2, #56	; 0x38
 8009dda:	4362      	muls	r2, r4
 8009ddc:	4b68      	ldr	r3, [pc, #416]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009dde:	189b      	adds	r3, r3, r2
 8009de0:	4443      	add	r3, r8
 8009de2:	799a      	ldrb	r2, [r3, #6]
 8009de4:	2300      	movs	r3, #0
 8009de6:	4968      	ldr	r1, [pc, #416]	; (8009f88 <PxMessagingTask+0x15f0>)
 8009de8:	600a      	str	r2, [r1, #0]
 8009dea:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009dec:	0029      	movs	r1, r5
 8009dee:	2001      	movs	r0, #1
 8009df0:	f007 feb8 	bl	8011b64 <HAL_FLASH_Program>
 8009df4:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 8009df6:	e7e5      	b.n	8009dc4 <PxMessagingTask+0x142c>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009df8:	882b      	ldrh	r3, [r5, #0]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4a64      	ldr	r2, [pc, #400]	; (8009f90 <PxMessagingTask+0x15f8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <PxMessagingTask+0x1472>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009e02:	4b5c      	ldr	r3, [pc, #368]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009e04:	2216      	movs	r2, #22
 8009e06:	701a      	strb	r2, [r3, #0]
													break;
 8009e08:	e7dc      	b.n	8009dc4 <PxMessagingTask+0x142c>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009e0a:	2238      	movs	r2, #56	; 0x38
 8009e0c:	4362      	muls	r2, r4
 8009e0e:	4b5c      	ldr	r3, [pc, #368]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009e10:	189b      	adds	r3, r3, r2
 8009e12:	4443      	add	r3, r8
 8009e14:	79da      	ldrb	r2, [r3, #7]
 8009e16:	0212      	lsls	r2, r2, #8
 8009e18:	799b      	ldrb	r3, [r3, #6]
 8009e1a:	18d2      	adds	r2, r2, r3
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	495a      	ldr	r1, [pc, #360]	; (8009f88 <PxMessagingTask+0x15f0>)
 8009e20:	600a      	str	r2, [r1, #0]
 8009e22:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009e24:	0029      	movs	r1, r5
 8009e26:	2001      	movs	r0, #1
 8009e28:	f007 fe9c 	bl	8011b64 <HAL_FLASH_Program>
 8009e2c:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 8009e2e:	e7c9      	b.n	8009dc4 <PxMessagingTask+0x142c>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	3301      	adds	r3, #1
 8009e34:	d003      	beq.n	8009e3e <PxMessagingTask+0x14a6>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009e36:	4b4f      	ldr	r3, [pc, #316]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009e38:	2216      	movs	r2, #22
 8009e3a:	701a      	strb	r2, [r3, #0]
													break;
 8009e3c:	e7c2      	b.n	8009dc4 <PxMessagingTask+0x142c>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009e3e:	2238      	movs	r2, #56	; 0x38
 8009e40:	4362      	muls	r2, r4
 8009e42:	4b4f      	ldr	r3, [pc, #316]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009e44:	189b      	adds	r3, r3, r2
 8009e46:	4443      	add	r3, r8
 8009e48:	79da      	ldrb	r2, [r3, #7]
 8009e4a:	0212      	lsls	r2, r2, #8
 8009e4c:	7a19      	ldrb	r1, [r3, #8]
 8009e4e:	0409      	lsls	r1, r1, #16
 8009e50:	1852      	adds	r2, r2, r1
 8009e52:	7999      	ldrb	r1, [r3, #6]
 8009e54:	1852      	adds	r2, r2, r1
 8009e56:	7a5b      	ldrb	r3, [r3, #9]
 8009e58:	061b      	lsls	r3, r3, #24
 8009e5a:	18d2      	adds	r2, r2, r3
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	494a      	ldr	r1, [pc, #296]	; (8009f88 <PxMessagingTask+0x15f0>)
 8009e60:	600a      	str	r2, [r1, #0]
 8009e62:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009e64:	0029      	movs	r1, r5
 8009e66:	2002      	movs	r0, #2
 8009e68:	f007 fe7c 	bl	8011b64 <HAL_FLASH_Program>
 8009e6c:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 8009e6e:	e7a9      	b.n	8009dc4 <PxMessagingTask+0x142c>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	3301      	adds	r3, #1
 8009e74:	d003      	beq.n	8009e7e <PxMessagingTask+0x14e6>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009e76:	4b3f      	ldr	r3, [pc, #252]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009e78:	2216      	movs	r2, #22
 8009e7a:	701a      	strb	r2, [r3, #0]
													break;
 8009e7c:	e7a2      	b.n	8009dc4 <PxMessagingTask+0x142c>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009e7e:	2238      	movs	r2, #56	; 0x38
 8009e80:	4362      	muls	r2, r4
 8009e82:	4b3f      	ldr	r3, [pc, #252]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009e84:	189b      	adds	r3, r3, r2
 8009e86:	4443      	add	r3, r8
 8009e88:	79da      	ldrb	r2, [r3, #7]
 8009e8a:	0212      	lsls	r2, r2, #8
 8009e8c:	7a19      	ldrb	r1, [r3, #8]
 8009e8e:	0409      	lsls	r1, r1, #16
 8009e90:	1852      	adds	r2, r2, r1
 8009e92:	7999      	ldrb	r1, [r3, #6]
 8009e94:	1852      	adds	r2, r2, r1
 8009e96:	7a5b      	ldrb	r3, [r3, #9]
 8009e98:	061b      	lsls	r3, r3, #24
 8009e9a:	18d2      	adds	r2, r2, r3
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	493a      	ldr	r1, [pc, #232]	; (8009f88 <PxMessagingTask+0x15f0>)
 8009ea0:	600a      	str	r2, [r1, #0]
 8009ea2:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009ea4:	0029      	movs	r1, r5
 8009ea6:	2003      	movs	r0, #3
 8009ea8:	f007 fe5c 	bl	8011b64 <HAL_FLASH_Program>
 8009eac:	900b      	str	r0, [sp, #44]	; 0x2c
													break;
 8009eae:	e789      	b.n	8009dc4 <PxMessagingTask+0x142c>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009eb0:	4b33      	ldr	r3, [pc, #204]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009eb2:	199b      	adds	r3, r3, r6
 8009eb4:	5d5a      	ldrb	r2, [r3, r5]
 8009eb6:	4b2f      	ldr	r3, [pc, #188]	; (8009f74 <PxMessagingTask+0x15dc>)
 8009eb8:	701a      	strb	r2, [r3, #0]
							break;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	469a      	mov	sl, r3
 8009ebe:	f7fe fda9 	bl	8008a14 <PxMessagingTask+0x7c>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	3a01      	subs	r2, #1
 8009ec6:	b292      	uxth	r2, r2
 8009ec8:	1c69      	adds	r1, r5, #1
 8009eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ecc:	469c      	mov	ip, r3
 8009ece:	4461      	add	r1, ip
 8009ed0:	4b2b      	ldr	r3, [pc, #172]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009ed2:	18c9      	adds	r1, r1, r3
 8009ed4:	199b      	adds	r3, r3, r6
 8009ed6:	5d58      	ldrb	r0, [r3, r5]
 8009ed8:	230a      	movs	r3, #10
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	f004 fb0e 	bl	800e4fc <writePxMutex>
							break;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	469a      	mov	sl, r3
 8009ee4:	f7fe fd96 	bl	8008a14 <PxMessagingTask+0x7c>
							switch(cMessage[port - 1][0 + shift]){
 8009ee8:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009eea:	199b      	adds	r3, r3, r6
 8009eec:	5d5b      	ldrb	r3, [r3, r5]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d100      	bne.n	8009ef4 <PxMessagingTask+0x155c>
 8009ef2:	e083      	b.n	8009ffc <PxMessagingTask+0x1664>
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d100      	bne.n	8009efa <PxMessagingTask+0x1562>
 8009ef8:	e0a8      	b.n	800a04c <PxMessagingTask+0x16b4>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d056      	beq.n	8009fac <PxMessagingTask+0x1614>
							ADCPort =cMessage[port - 1][shift];
 8009efe:	4b20      	ldr	r3, [pc, #128]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009f00:	199b      	adds	r3, r3, r6
 8009f02:	5d58      	ldrb	r0, [r3, r5]
 8009f04:	4a23      	ldr	r2, [pc, #140]	; (8009f94 <PxMessagingTask+0x15fc>)
 8009f06:	8010      	strh	r0, [r2, #0]
							ADCSide =cMessage[port - 1][shift + 1];
 8009f08:	195b      	adds	r3, r3, r5
 8009f0a:	785b      	ldrb	r3, [r3, #1]
 8009f0c:	4a22      	ldr	r2, [pc, #136]	; (8009f98 <PxMessagingTask+0x1600>)
 8009f0e:	8013      	strh	r3, [r2, #0]
							if(0 == ADCSide){
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d100      	bne.n	8009f16 <PxMessagingTask+0x157e>
 8009f14:	e0ac      	b.n	800a070 <PxMessagingTask+0x16d8>
							else if(1 == ADCSide){
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d100      	bne.n	8009f1c <PxMessagingTask+0x1584>
 8009f1a:	e0b5      	b.n	800a088 <PxMessagingTask+0x16f0>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8009f1c:	491f      	ldr	r1, [pc, #124]	; (8009f9c <PxMessagingTask+0x1604>)
 8009f1e:	4820      	ldr	r0, [pc, #128]	; (8009fa0 <PxMessagingTask+0x1608>)
 8009f20:	f003 fa9c 	bl	800d45c <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8009f24:	4b16      	ldr	r3, [pc, #88]	; (8009f80 <PxMessagingTask+0x15e8>)
 8009f26:	4698      	mov	r8, r3
 8009f28:	44b0      	add	r8, r6
 8009f2a:	4643      	mov	r3, r8
 8009f2c:	5d58      	ldrb	r0, [r3, r5]
 8009f2e:	4b19      	ldr	r3, [pc, #100]	; (8009f94 <PxMessagingTask+0x15fc>)
 8009f30:	8018      	strh	r0, [r3, #0]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8009f32:	491c      	ldr	r1, [pc, #112]	; (8009fa4 <PxMessagingTask+0x160c>)
 8009f34:	f003 fb54 	bl	800d5e0 <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009f38:	4445      	add	r5, r8
 8009f3a:	79ab      	ldrb	r3, [r5, #6]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	79ea      	ldrb	r2, [r5, #7]
 8009f40:	0412      	lsls	r2, r2, #16
 8009f42:	189b      	adds	r3, r3, r2
 8009f44:	796a      	ldrb	r2, [r5, #5]
 8009f46:	189b      	adds	r3, r3, r2
 8009f48:	7a2a      	ldrb	r2, [r5, #8]
 8009f4a:	0612      	lsls	r2, r2, #24
 8009f4c:	189b      	adds	r3, r3, r2
 8009f4e:	4a16      	ldr	r2, [pc, #88]	; (8009fa8 <PxMessagingTask+0x1610>)
 8009f50:	61d3      	str	r3, [r2, #28]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009f52:	7aab      	ldrb	r3, [r5, #10]
 8009f54:	021b      	lsls	r3, r3, #8
 8009f56:	7ae9      	ldrb	r1, [r5, #11]
 8009f58:	0409      	lsls	r1, r1, #16
 8009f5a:	185b      	adds	r3, r3, r1
 8009f5c:	7a69      	ldrb	r1, [r5, #9]
 8009f5e:	185b      	adds	r3, r3, r1
 8009f60:	7b29      	ldrb	r1, [r5, #12]
 8009f62:	0609      	lsls	r1, r1, #24
 8009f64:	185b      	adds	r3, r3, r1
 8009f66:	6213      	str	r3, [r2, #32]
							break;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	469a      	mov	sl, r3
 8009f6c:	f7fe fd52 	bl	8008a14 <PxMessagingTask+0x7c>
 8009f70:	20006200 	.word	0x20006200
 8009f74:	20000890 	.word	0x20000890
 8009f78:	200061f8 	.word	0x200061f8
 8009f7c:	200006d0 	.word	0x200006d0
 8009f80:	2000054c 	.word	0x2000054c
 8009f84:	0801af48 	.word	0x0801af48
 8009f88:	20000888 	.word	0x20000888
 8009f8c:	0801af68 	.word	0x0801af68
 8009f90:	0000ffff 	.word	0x0000ffff
 8009f94:	20000df4 	.word	0x20000df4
 8009f98:	20000df6 	.word	0x20000df6
 8009f9c:	20000e00 	.word	0x20000e00
 8009fa0:	20000dfc 	.word	0x20000dfc
 8009fa4:	20000df0 	.word	0x20000df0
 8009fa8:	20000e04 	.word	0x20000e04
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009fac:	2238      	movs	r2, #56	; 0x38
 8009fae:	4362      	muls	r2, r4
 8009fb0:	4b75      	ldr	r3, [pc, #468]	; (800a188 <PxMessagingTask+0x17f0>)
 8009fb2:	189b      	adds	r3, r3, r2
 8009fb4:	195b      	adds	r3, r3, r5
 8009fb6:	789a      	ldrb	r2, [r3, #2]
 8009fb8:	0212      	lsls	r2, r2, #8
 8009fba:	78d9      	ldrb	r1, [r3, #3]
 8009fbc:	0409      	lsls	r1, r1, #16
 8009fbe:	1852      	adds	r2, r2, r1
 8009fc0:	7859      	ldrb	r1, [r3, #1]
 8009fc2:	1852      	adds	r2, r2, r1
 8009fc4:	7919      	ldrb	r1, [r3, #4]
 8009fc6:	0609      	lsls	r1, r1, #24
 8009fc8:	1852      	adds	r2, r2, r1
 8009fca:	4970      	ldr	r1, [pc, #448]	; (800a18c <PxMessagingTask+0x17f4>)
 8009fcc:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009fce:	799a      	ldrb	r2, [r3, #6]
 8009fd0:	0212      	lsls	r2, r2, #8
 8009fd2:	79d8      	ldrb	r0, [r3, #7]
 8009fd4:	0400      	lsls	r0, r0, #16
 8009fd6:	1812      	adds	r2, r2, r0
 8009fd8:	7958      	ldrb	r0, [r3, #5]
 8009fda:	1812      	adds	r2, r2, r0
 8009fdc:	7a18      	ldrb	r0, [r3, #8]
 8009fde:	0600      	lsls	r0, r0, #24
 8009fe0:	1812      	adds	r2, r2, r0
 8009fe2:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009fe4:	7a9a      	ldrb	r2, [r3, #10]
 8009fe6:	0212      	lsls	r2, r2, #8
 8009fe8:	7ad8      	ldrb	r0, [r3, #11]
 8009fea:	0400      	lsls	r0, r0, #16
 8009fec:	1812      	adds	r2, r2, r0
 8009fee:	7a58      	ldrb	r0, [r3, #9]
 8009ff0:	1812      	adds	r2, r2, r0
 8009ff2:	7b1b      	ldrb	r3, [r3, #12]
 8009ff4:	061b      	lsls	r3, r3, #24
 8009ff6:	18d3      	adds	r3, r2, r3
 8009ff8:	608b      	str	r3, [r1, #8]
									break;
 8009ffa:	e780      	b.n	8009efe <PxMessagingTask+0x1566>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009ffc:	2238      	movs	r2, #56	; 0x38
 8009ffe:	4362      	muls	r2, r4
 800a000:	4b61      	ldr	r3, [pc, #388]	; (800a188 <PxMessagingTask+0x17f0>)
 800a002:	189b      	adds	r3, r3, r2
 800a004:	195b      	adds	r3, r3, r5
 800a006:	789a      	ldrb	r2, [r3, #2]
 800a008:	0212      	lsls	r2, r2, #8
 800a00a:	78d9      	ldrb	r1, [r3, #3]
 800a00c:	0409      	lsls	r1, r1, #16
 800a00e:	1852      	adds	r2, r2, r1
 800a010:	7859      	ldrb	r1, [r3, #1]
 800a012:	1852      	adds	r2, r2, r1
 800a014:	7919      	ldrb	r1, [r3, #4]
 800a016:	0609      	lsls	r1, r1, #24
 800a018:	1852      	adds	r2, r2, r1
 800a01a:	495c      	ldr	r1, [pc, #368]	; (800a18c <PxMessagingTask+0x17f4>)
 800a01c:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800a01e:	799a      	ldrb	r2, [r3, #6]
 800a020:	0212      	lsls	r2, r2, #8
 800a022:	79d8      	ldrb	r0, [r3, #7]
 800a024:	0400      	lsls	r0, r0, #16
 800a026:	1812      	adds	r2, r2, r0
 800a028:	7958      	ldrb	r0, [r3, #5]
 800a02a:	1812      	adds	r2, r2, r0
 800a02c:	7a18      	ldrb	r0, [r3, #8]
 800a02e:	0600      	lsls	r0, r0, #24
 800a030:	1812      	adds	r2, r2, r0
 800a032:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800a034:	7a9a      	ldrb	r2, [r3, #10]
 800a036:	0212      	lsls	r2, r2, #8
 800a038:	7ad8      	ldrb	r0, [r3, #11]
 800a03a:	0400      	lsls	r0, r0, #16
 800a03c:	1812      	adds	r2, r2, r0
 800a03e:	7a58      	ldrb	r0, [r3, #9]
 800a040:	1812      	adds	r2, r2, r0
 800a042:	7b1b      	ldrb	r3, [r3, #12]
 800a044:	061b      	lsls	r3, r3, #24
 800a046:	18d3      	adds	r3, r2, r3
 800a048:	614b      	str	r3, [r1, #20]
									break;
 800a04a:	e758      	b.n	8009efe <PxMessagingTask+0x1566>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800a04c:	2338      	movs	r3, #56	; 0x38
 800a04e:	4363      	muls	r3, r4
 800a050:	4a4d      	ldr	r2, [pc, #308]	; (800a188 <PxMessagingTask+0x17f0>)
 800a052:	18d2      	adds	r2, r2, r3
 800a054:	1952      	adds	r2, r2, r5
 800a056:	7893      	ldrb	r3, [r2, #2]
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	78d1      	ldrb	r1, [r2, #3]
 800a05c:	0409      	lsls	r1, r1, #16
 800a05e:	185b      	adds	r3, r3, r1
 800a060:	7851      	ldrb	r1, [r2, #1]
 800a062:	185b      	adds	r3, r3, r1
 800a064:	7912      	ldrb	r2, [r2, #4]
 800a066:	0612      	lsls	r2, r2, #24
 800a068:	189b      	adds	r3, r3, r2
 800a06a:	4a48      	ldr	r2, [pc, #288]	; (800a18c <PxMessagingTask+0x17f4>)
 800a06c:	6193      	str	r3, [r2, #24]
 800a06e:	e746      	b.n	8009efe <PxMessagingTask+0x1566>
								ADCSelectChannel(ADCPort,"top");
 800a070:	4b47      	ldr	r3, [pc, #284]	; (800a190 <PxMessagingTask+0x17f8>)
 800a072:	4698      	mov	r8, r3
 800a074:	0019      	movs	r1, r3
 800a076:	f003 fb93 	bl	800d7a0 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 800a07a:	4b46      	ldr	r3, [pc, #280]	; (800a194 <PxMessagingTask+0x17fc>)
 800a07c:	7818      	ldrb	r0, [r3, #0]
 800a07e:	4a46      	ldr	r2, [pc, #280]	; (800a198 <PxMessagingTask+0x1800>)
 800a080:	4641      	mov	r1, r8
 800a082:	f003 fbbf 	bl	800d804 <ReadADCChannel>
 800a086:	e749      	b.n	8009f1c <PxMessagingTask+0x1584>
								ADCSelectChannel(ADCPort,"bottom");
 800a088:	4b44      	ldr	r3, [pc, #272]	; (800a19c <PxMessagingTask+0x1804>)
 800a08a:	4698      	mov	r8, r3
 800a08c:	0019      	movs	r1, r3
 800a08e:	f003 fb87 	bl	800d7a0 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800a092:	4b40      	ldr	r3, [pc, #256]	; (800a194 <PxMessagingTask+0x17fc>)
 800a094:	7818      	ldrb	r0, [r3, #0]
 800a096:	4a40      	ldr	r2, [pc, #256]	; (800a198 <PxMessagingTask+0x1800>)
 800a098:	4641      	mov	r1, r8
 800a09a:	f003 fbb3 	bl	800d804 <ReadADCChannel>
 800a09e:	e73d      	b.n	8009f1c <PxMessagingTask+0x1584>
							ACK_FLAG =1;
 800a0a0:	4b3f      	ldr	r3, [pc, #252]	; (800a1a0 <PxMessagingTask+0x1808>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	701a      	strb	r2, [r3, #0]
							break;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f7fe fcb3 	bl	8008a14 <PxMessagingTask+0x7c>
							rejected_FLAG =1;
 800a0ae:	4b3d      	ldr	r3, [pc, #244]	; (800a1a4 <PxMessagingTask+0x180c>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	701a      	strb	r2, [r3, #0]
							break;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	469a      	mov	sl, r3
 800a0b8:	f7fe fcac 	bl	8008a14 <PxMessagingTask+0x7c>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800a0bc:	9500      	str	r5, [sp, #0]
 800a0be:	4643      	mov	r3, r8
 800a0c0:	9a05      	ldr	r2, [sp, #20]
 800a0c2:	9908      	ldr	r1, [sp, #32]
 800a0c4:	4648      	mov	r0, r9
 800a0c6:	f7fe fc65 	bl	8008994 <User_MessagingParser>
 800a0ca:	4682      	mov	sl, r0
							if(result == BOS_ERR_UnknownMessage){
 800a0cc:	2801      	cmp	r0, #1
 800a0ce:	d001      	beq.n	800a0d4 <PxMessagingTask+0x173c>
 800a0d0:	f7fe fca0 	bl	8008a14 <PxMessagingTask+0x7c>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800a0d4:	9500      	str	r5, [sp, #0]
 800a0d6:	4643      	mov	r3, r8
 800a0d8:	9a05      	ldr	r2, [sp, #20]
 800a0da:	9908      	ldr	r1, [sp, #32]
 800a0dc:	4648      	mov	r0, r9
 800a0de:	f000 fe3b 	bl	800ad58 <Module_MessagingTask>
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	f7fe fc91 	bl	8008a0a <PxMessagingTask+0x72>
									messageParams[0] =modParam[temp - 1].paramFormat;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	469a      	mov	sl, r3
 800a0ec:	f7fe fc8d 	bl	8008a0a <PxMessagingTask+0x72>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	469a      	mov	sl, r3
 800a0f4:	f7fe fc89 	bl	8008a0a <PxMessagingTask+0x72>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	9805      	ldr	r0, [sp, #20]
 800a0fe:	f7fe f941 	bl	8008384 <SendMessageToModule>
			result =BOS_OK;
 800a102:	2300      	movs	r3, #0
 800a104:	469a      	mov	sl, r3
 800a106:	f7fe fc85 	bl	8008a14 <PxMessagingTask+0x7c>
 800a10a:	2300      	movs	r3, #0
 800a10c:	469a      	mov	sl, r3
 800a10e:	f7fe fc81 	bl	8008a14 <PxMessagingTask+0x7c>
								}
 800a112:	2300      	movs	r3, #0
 800a114:	469a      	mov	sl, r3
 800a116:	f7fe fc7d 	bl	8008a14 <PxMessagingTask+0x7c>
 800a11a:	2300      	movs	r3, #0
 800a11c:	469a      	mov	sl, r3
 800a11e:	f7fe fc79 	bl	8008a14 <PxMessagingTask+0x7c>
					result =BOS_ERR_WrongID;
 800a122:	2366      	movs	r3, #102	; 0x66
 800a124:	469a      	mov	sl, r3
		if(result == BOS_ERR_UnknownMessage){
 800a126:	f7fe fc75 	bl	8008a14 <PxMessagingTask+0x7c>
 800a12a:	4661      	mov	r1, ip
				shift +=4;
 800a12c:	9d06      	ldr	r5, [sp, #24]
 800a12e:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 800a130:	1b48      	subs	r0, r1, r5
 800a132:	b2c3      	uxtb	r3, r0
 800a134:	469a      	mov	sl, r3
				if(result == BOS_OK){
 800a136:	e01f      	b.n	800a178 <PxMessagingTask+0x17e0>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800a138:	2338      	movs	r3, #56	; 0x38
 800a13a:	4363      	muls	r3, r4
 800a13c:	4a12      	ldr	r2, [pc, #72]	; (800a188 <PxMessagingTask+0x17f0>)
 800a13e:	18d2      	adds	r2, r2, r3
 800a140:	4643      	mov	r3, r8
 800a142:	5cd3      	ldrb	r3, [r2, r3]
 800a144:	3b01      	subs	r3, #1
 800a146:	0098      	lsls	r0, r3, #2
 800a148:	4917      	ldr	r1, [pc, #92]	; (800a1a8 <PxMessagingTask+0x1810>)
 800a14a:	5841      	ldr	r1, [r0, r1]
 800a14c:	4648      	mov	r0, r9
 800a14e:	5c12      	ldrb	r2, [r2, r0]
 800a150:	e48d      	b.n	8009a6e <PxMessagingTask+0x10d6>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a152:	4543      	cmp	r3, r8
 800a154:	d004      	beq.n	800a160 <PxMessagingTask+0x17c8>
 800a156:	464b      	mov	r3, r9
 800a158:	2b10      	cmp	r3, #16
 800a15a:	d001      	beq.n	800a160 <PxMessagingTask+0x17c8>
 800a15c:	f7fe fcb2 	bl	8008ac4 <PxMessagingTask+0x12c>
				if(result == BOS_OK){
 800a160:	4653      	mov	r3, sl
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <PxMessagingTask+0x17d2>
 800a166:	f7fe fc50 	bl	8008a0a <PxMessagingTask+0x72>
				shift +=4;
 800a16a:	9d06      	ldr	r5, [sp, #24]
 800a16c:	3504      	adds	r5, #4
				numOfParams =messageLength[port - 1] - shift;
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <PxMessagingTask+0x1814>)
 800a170:	5d19      	ldrb	r1, [r3, r4]
 800a172:	1b48      	subs	r0, r1, r5
 800a174:	b2c3      	uxtb	r3, r0
 800a176:	469a      	mov	sl, r3
					switch(code){
 800a178:	464b      	mov	r3, r9
 800a17a:	2b2d      	cmp	r3, #45	; 0x2d
 800a17c:	d89e      	bhi.n	800a0bc <PxMessagingTask+0x1724>
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4a0b      	ldr	r2, [pc, #44]	; (800a1b0 <PxMessagingTask+0x1818>)
 800a182:	58d3      	ldr	r3, [r2, r3]
 800a184:	469f      	mov	pc, r3
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	2000054c 	.word	0x2000054c
 800a18c:	20000e04 	.word	0x20000e04
 800a190:	08019370 	.word	0x08019370
 800a194:	20000df4 	.word	0x20000df4
 800a198:	20000df8 	.word	0x20000df8
 800a19c:	08019374 	.word	0x08019374
 800a1a0:	200002b4 	.word	0x200002b4
 800a1a4:	20000884 	.word	0x20000884
 800a1a8:	20006200 	.word	0x20006200
 800a1ac:	200006cc 	.word	0x200006cc
 800a1b0:	0801af88 	.word	0x0801af88

0800a1b4 <unitCommand>:
 |															Commands																 	|
 -----------------------------------------------------------------------
 */

static portBASE_TYPE unitCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	0004      	movs	r4, r0
 800a1ba:	0010      	movs	r0, r2
	Module_Status result = H2AR3_OK;
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9301      	str	r3, [sp, #4]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* 1st parameter for naming of uart port: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 800a1c0:	aa01      	add	r2, sp, #4
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	f004 fc64 	bl	800ea90 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 800a1c8:	7803      	ldrb	r3, [r0, #0]
 800a1ca:	2b76      	cmp	r3, #118	; 0x76
 800a1cc:	d009      	beq.n	800a1e2 <unitCommand+0x2e>
		unit = Volt;
		strcpy((char*) pcWriteBuffer,
				(char*) "Used measurement unit: Volt\r\n");
	} else if (!strncmp((const char*) pcParameterString1, "a", 1)) {
 800a1ce:	2b61      	cmp	r3, #97	; 0x61
 800a1d0:	d010      	beq.n	800a1f4 <unitCommand+0x40>
		result = H2AR3_ERR_WrongParams;
	}

	/* Respond to the command */
	if (H2AR3_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 800a1d2:	2213      	movs	r2, #19
 800a1d4:	490c      	ldr	r1, [pc, #48]	; (800a208 <unitCommand+0x54>)
 800a1d6:	0020      	movs	r0, r4
 800a1d8:	f009 fd12 	bl	8013c00 <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a1dc:	2000      	movs	r0, #0
 800a1de:	b002      	add	sp, #8
 800a1e0:	bd10      	pop	{r4, pc}
		unit = Volt;
 800a1e2:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <unitCommand+0x58>)
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 800a1e8:	321d      	adds	r2, #29
 800a1ea:	4909      	ldr	r1, [pc, #36]	; (800a210 <unitCommand+0x5c>)
 800a1ec:	0020      	movs	r0, r4
 800a1ee:	f009 fd07 	bl	8013c00 <memcpy>
	if (H2AR3_ERR_WrongParams == result) {
 800a1f2:	e7f3      	b.n	800a1dc <unitCommand+0x28>
		unit = Amp;
 800a1f4:	4b05      	ldr	r3, [pc, #20]	; (800a20c <unitCommand+0x58>)
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 800a1fa:	321e      	adds	r2, #30
 800a1fc:	4905      	ldr	r1, [pc, #20]	; (800a214 <unitCommand+0x60>)
 800a1fe:	0020      	movs	r0, r4
 800a200:	f009 fcfe 	bl	8013c00 <memcpy>
	if (H2AR3_ERR_WrongParams == result) {
 800a204:	e7ea      	b.n	800a1dc <unitCommand+0x28>
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	080192b4 	.word	0x080192b4
 800a20c:	200000a4 	.word	0x200000a4
 800a210:	0801b040 	.word	0x0801b040
 800a214:	0801b060 	.word	0x0801b060

0800a218 <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 800a218:	b510      	push	{r4, lr}
 800a21a:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800a21c:	4b12      	ldr	r3, [pc, #72]	; (800a268 <CheckForEnterKey+0x50>)
 800a21e:	781c      	ldrb	r4, [r3, #0]
 800a220:	3c01      	subs	r4, #1
 800a222:	0061      	lsls	r1, r4, #1
 800a224:	1909      	adds	r1, r1, r4
 800a226:	0189      	lsls	r1, r1, #6
 800a228:	4b10      	ldr	r3, [pc, #64]	; (800a26c <CheckForEnterKey+0x54>)
 800a22a:	18c9      	adds	r1, r1, r3
 800a22c:	2300      	movs	r3, #0
 800a22e:	0018      	movs	r0, r3
 800a230:	5cca      	ldrb	r2, [r1, r3]
 800a232:	2a0d      	cmp	r2, #13
 800a234:	d003      	beq.n	800a23e <CheckForEnterKey+0x26>
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800a236:	3301      	adds	r3, #1
 800a238:	2bc0      	cmp	r3, #192	; 0xc0
 800a23a:	d1f8      	bne.n	800a22e <CheckForEnterKey+0x16>
 800a23c:	e011      	b.n	800a262 <CheckForEnterKey+0x4a>
			UARTRxBuf[PcPort - 1][chr] = 0;
 800a23e:	0063      	lsls	r3, r4, #1
 800a240:	191c      	adds	r4, r3, r4
 800a242:	01a4      	lsls	r4, r4, #6
 800a244:	4b09      	ldr	r3, [pc, #36]	; (800a26c <CheckForEnterKey+0x54>)
 800a246:	191c      	adds	r4, r3, r4
 800a248:	2300      	movs	r3, #0
 800a24a:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800a24c:	4a08      	ldr	r2, [pc, #32]	; (800a270 <CheckForEnterKey+0x58>)
 800a24e:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 800a250:	4a08      	ldr	r2, [pc, #32]	; (800a274 <CheckForEnterKey+0x5c>)
 800a252:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 800a254:	4a08      	ldr	r2, [pc, #32]	; (800a278 <CheckForEnterKey+0x60>)
 800a256:	6810      	ldr	r0, [r2, #0]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	2200      	movs	r2, #0
 800a25c:	2103      	movs	r1, #3
 800a25e:	f005 ff7d 	bl	801015c <xTimerGenericCommand>
}
 800a262:	b002      	add	sp, #8
 800a264:	bd10      	pop	{r4, pc}
 800a266:	46c0      	nop			; (mov r8, r8)
 800a268:	200002b8 	.word	0x200002b8
 800a26c:	20000a4c 	.word	0x20000a4c
 800a270:	20000ff0 	.word	0x20000ff0
 800a274:	200063d4 	.word	0x200063d4
 800a278:	20000ff8 	.word	0x20000ff8

0800a27c <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 800a27c:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 800a27e:	f006 f8a1 	bl	80103c4 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800a282:	28ff      	cmp	r0, #255	; 0xff
 800a284:	d000      	beq.n	800a288 <HandleTimeout+0xc>
}
 800a286:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 800a288:	2300      	movs	r3, #0
 800a28a:	4a02      	ldr	r2, [pc, #8]	; (800a294 <HandleTimeout+0x18>)
 800a28c:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 800a28e:	4a02      	ldr	r2, [pc, #8]	; (800a298 <HandleTimeout+0x1c>)
 800a290:	7013      	strb	r3, [r2, #0]
}
 800a292:	e7f8      	b.n	800a286 <HandleTimeout+0xa>
 800a294:	200063d4 	.word	0x200063d4
 800a298:	20000ff0 	.word	0x20000ff0

0800a29c <SystemClock_Config>:
void SystemClock_Config(void) {
 800a29c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a29e:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2a0:	2401      	movs	r4, #1
 800a2a2:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a2a4:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a2a6:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2ac:	2702      	movs	r7, #2
 800a2ae:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2b0:	2680      	movs	r6, #128	; 0x80
 800a2b2:	0276      	lsls	r6, r6, #9
 800a2b4:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a2b6:	2380      	movs	r3, #128	; 0x80
 800a2b8:	035b      	lsls	r3, r3, #13
 800a2ba:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a2bc:	2500      	movs	r5, #0
 800a2be:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a2c0:	a80d      	add	r0, sp, #52	; 0x34
 800a2c2:	f007 fed5 	bl	8012070 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800a2c6:	2307      	movs	r3, #7
 800a2c8:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a2ca:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2cc:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a2ce:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	a809      	add	r0, sp, #36	; 0x24
 800a2d4:	f008 f990 	bl	80125f8 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	; (800a344 <SystemClock_Config+0xa8>)
 800a2da:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a2dc:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a2de:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a2e0:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a2e2:	a802      	add	r0, sp, #8
 800a2e4:	f008 fb38 	bl	8012958 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800a2e8:	4d17      	ldr	r5, [pc, #92]	; (800a348 <SystemClock_Config+0xac>)
 800a2ea:	69ea      	ldr	r2, [r5, #28]
 800a2ec:	2180      	movs	r1, #128	; 0x80
 800a2ee:	0549      	lsls	r1, r1, #21
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	61ea      	str	r2, [r5, #28]
 800a2f4:	69eb      	ldr	r3, [r5, #28]
 800a2f6:	400b      	ands	r3, r1
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800a2fc:	f007 feae 	bl	801205c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a300:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a302:	23c0      	movs	r3, #192	; 0xc0
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a308:	a802      	add	r0, sp, #8
 800a30a:	f008 fb25 	bl	8012958 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800a30e:	f008 faff 	bl	8012910 <HAL_RCC_GetHCLKFreq>
 800a312:	21fa      	movs	r1, #250	; 0xfa
 800a314:	0089      	lsls	r1, r1, #2
 800a316:	f7f5 ff1b 	bl	8000150 <__udivsi3>
 800a31a:	f006 fd7f 	bl	8010e1c <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a31e:	2004      	movs	r0, #4
 800a320:	f006 fd98 	bl	8010e54 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800a324:	69ab      	ldr	r3, [r5, #24]
 800a326:	4323      	orrs	r3, r4
 800a328:	61ab      	str	r3, [r5, #24]
 800a32a:	69ab      	ldr	r3, [r5, #24]
 800a32c:	401c      	ands	r4, r3
 800a32e:	9401      	str	r4, [sp, #4]
 800a330:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a332:	2001      	movs	r0, #1
 800a334:	2200      	movs	r2, #0
 800a336:	2100      	movs	r1, #0
 800a338:	4240      	negs	r0, r0
 800a33a:	f006 fd29 	bl	8010d90 <HAL_NVIC_SetPriority>
}
 800a33e:	b01b      	add	sp, #108	; 0x6c
 800a340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a342:	46c0      	nop			; (mov r8, r8)
 800a344:	00040003 	.word	0x00040003
 800a348:	40021000 	.word	0x40021000

0800a34c <SaveToRO>:
uint8_t SaveToRO(void) {
 800a34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34e:	46de      	mov	lr, fp
 800a350:	4657      	mov	r7, sl
 800a352:	464e      	mov	r6, r9
 800a354:	4645      	mov	r5, r8
 800a356:	b5e0      	push	{r5, r6, r7, lr}
 800a358:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800a35a:	2300      	movs	r3, #0
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	2211      	movs	r2, #17
 800a360:	2100      	movs	r1, #0
 800a362:	a803      	add	r0, sp, #12
 800a364:	f009 fc55 	bl	8013c12 <memset>
	HAL_FLASH_Unlock();
 800a368:	f007 fbb0 	bl	8011acc <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800a36c:	487c      	ldr	r0, [pc, #496]	; (800a560 <SaveToRO+0x214>)
 800a36e:	f007 fc71 	bl	8011c54 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800a372:	487c      	ldr	r0, [pc, #496]	; (800a564 <SaveToRO+0x218>)
 800a374:	f007 fbc8 	bl	8011b08 <FLASH_WaitForLastOperation>
 800a378:	9000      	str	r0, [sp, #0]
 800a37a:	9001      	str	r0, [sp, #4]
	if (FlashStatus != HAL_OK) {
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d112      	bne.n	800a3a6 <SaveToRO+0x5a>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a380:	4a79      	ldr	r2, [pc, #484]	; (800a568 <SaveToRO+0x21c>)
 800a382:	6913      	ldr	r3, [r2, #16]
 800a384:	2102      	movs	r1, #2
 800a386:	438b      	bics	r3, r1
 800a388:	6113      	str	r3, [r2, #16]
	if (myID) {
 800a38a:	4b78      	ldr	r3, [pc, #480]	; (800a56c <SaveToRO+0x220>)
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d115      	bne.n	800a3be <SaveToRO+0x72>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a392:	4b77      	ldr	r3, [pc, #476]	; (800a570 <SaveToRO+0x224>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d100      	bne.n	800a39c <SaveToRO+0x50>
 800a39a:	e0dd      	b.n	800a558 <SaveToRO+0x20c>
 800a39c:	9d00      	ldr	r5, [sp, #0]
 800a39e:	4e75      	ldr	r6, [pc, #468]	; (800a574 <SaveToRO+0x228>)
		if (snippets[s].cond.conditionType) {
 800a3a0:	4b75      	ldr	r3, [pc, #468]	; (800a578 <SaveToRO+0x22c>)
 800a3a2:	469a      	mov	sl, r3
 800a3a4:	e092      	b.n	800a4cc <SaveToRO+0x180>
		return pFlash.ErrorCode;
 800a3a6:	4b75      	ldr	r3, [pc, #468]	; (800a57c <SaveToRO+0x230>)
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	9301      	str	r3, [sp, #4]
}
 800a3ae:	9801      	ldr	r0, [sp, #4]
 800a3b0:	b009      	add	sp, #36	; 0x24
 800a3b2:	bcf0      	pop	{r4, r5, r6, r7}
 800a3b4:	46bb      	mov	fp, r7
 800a3b6:	46b2      	mov	sl, r6
 800a3b8:	46a9      	mov	r9, r5
 800a3ba:	46a0      	mov	r8, r4
 800a3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800a3be:	4a70      	ldr	r2, [pc, #448]	; (800a580 <SaveToRO+0x234>)
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	0212      	lsls	r2, r2, #8
 800a3c4:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4965      	ldr	r1, [pc, #404]	; (800a560 <SaveToRO+0x214>)
 800a3cc:	2001      	movs	r0, #1
 800a3ce:	f007 fbc9 	bl	8011b64 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800a3d2:	4864      	ldr	r0, [pc, #400]	; (800a564 <SaveToRO+0x218>)
 800a3d4:	f007 fb98 	bl	8011b08 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d111      	bne.n	800a400 <SaveToRO+0xb4>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a3dc:	4a62      	ldr	r2, [pc, #392]	; (800a568 <SaveToRO+0x21c>)
 800a3de:	6913      	ldr	r3, [r2, #16]
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	438b      	bics	r3, r1
 800a3e4:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800a3e6:	4b66      	ldr	r3, [pc, #408]	; (800a580 <SaveToRO+0x234>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800a3ee:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0ce      	beq.n	800a392 <SaveToRO+0x46>
 800a3f4:	2316      	movs	r3, #22
 800a3f6:	469b      	mov	fp, r3
 800a3f8:	4b62      	ldr	r3, [pc, #392]	; (800a584 <SaveToRO+0x238>)
 800a3fa:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 800a3fc:	4698      	mov	r8, r3
 800a3fe:	e02c      	b.n	800a45a <SaveToRO+0x10e>
			return pFlash.ErrorCode;
 800a400:	4b5e      	ldr	r3, [pc, #376]	; (800a57c <SaveToRO+0x230>)
 800a402:	69db      	ldr	r3, [r3, #28]
 800a404:	b2db      	uxtb	r3, r3
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	e7d1      	b.n	800a3ae <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800a40a:	4b5c      	ldr	r3, [pc, #368]	; (800a57c <SaveToRO+0x230>)
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	e7cc      	b.n	800a3ae <SaveToRO+0x62>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a414:	3402      	adds	r4, #2
 800a416:	42b4      	cmp	r4, r6
 800a418:	d017      	beq.n	800a44a <SaveToRO+0xfe>
				if (array[i - 1][0]) {
 800a41a:	4643      	mov	r3, r8
 800a41c:	5afb      	ldrh	r3, [r7, r3]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0f8      	beq.n	800a414 <SaveToRO+0xc8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800a422:	8822      	ldrh	r2, [r4, #0]
 800a424:	4b4e      	ldr	r3, [pc, #312]	; (800a560 <SaveToRO+0x214>)
 800a426:	18e9      	adds	r1, r5, r3
 800a428:	2300      	movs	r3, #0
 800a42a:	2001      	movs	r0, #1
 800a42c:	f007 fb9a 	bl	8011b64 <HAL_FLASH_Program>
					add += 2;
 800a430:	3502      	adds	r5, #2
 800a432:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800a434:	484b      	ldr	r0, [pc, #300]	; (800a564 <SaveToRO+0x218>)
 800a436:	f007 fb67 	bl	8011b08 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d1e5      	bne.n	800a40a <SaveToRO+0xbe>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a43e:	4a4a      	ldr	r2, [pc, #296]	; (800a568 <SaveToRO+0x21c>)
 800a440:	6913      	ldr	r3, [r2, #16]
 800a442:	2101      	movs	r1, #1
 800a444:	438b      	bics	r3, r1
 800a446:	6113      	str	r3, [r2, #16]
 800a448:	e7e4      	b.n	800a414 <SaveToRO+0xc8>
		for (uint8_t i = 1; i <= N; i++) {
 800a44a:	464b      	mov	r3, r9
 800a44c:	3301      	adds	r3, #1
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	4699      	mov	r9, r3
 800a452:	4b4b      	ldr	r3, [pc, #300]	; (800a580 <SaveToRO+0x234>)
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	454b      	cmp	r3, r9
 800a458:	d39b      	bcc.n	800a392 <SaveToRO+0x46>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a45a:	465e      	mov	r6, fp
 800a45c:	464b      	mov	r3, r9
 800a45e:	435e      	muls	r6, r3
 800a460:	0034      	movs	r4, r6
 800a462:	3c16      	subs	r4, #22
 800a464:	4454      	add	r4, sl
 800a466:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 800a468:	1e5f      	subs	r7, r3, #1
 800a46a:	465b      	mov	r3, fp
 800a46c:	435f      	muls	r7, r3
 800a46e:	e7d4      	b.n	800a41a <SaveToRO+0xce>
					return pFlash.ErrorCode;
 800a470:	4b42      	ldr	r3, [pc, #264]	; (800a57c <SaveToRO+0x230>)
 800a472:	69db      	ldr	r3, [r3, #28]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	e799      	b.n	800a3ae <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a47a:	4643      	mov	r3, r8
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	2201      	movs	r2, #1
 800a480:	4393      	bics	r3, r2
 800a482:	4642      	mov	r2, r8
 800a484:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a486:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a488:	3401      	adds	r4, #1
 800a48a:	b2e4      	uxtb	r4, r4
 800a48c:	68ef      	ldr	r7, [r5, #12]
 800a48e:	0038      	movs	r0, r7
 800a490:	f7f5 fe42 	bl	8000118 <strlen>
 800a494:	3001      	adds	r0, #1
 800a496:	0840      	lsrs	r0, r0, #1
 800a498:	4284      	cmp	r4, r0
 800a49a:	d210      	bcs.n	800a4be <SaveToRO+0x172>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800a49c:	0063      	lsls	r3, r4, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a49e:	5afa      	ldrh	r2, [r7, r3]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	0031      	movs	r1, r6
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	f007 fb5d 	bl	8011b64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a4aa:	4658      	mov	r0, fp
 800a4ac:	f007 fb2c 	bl	8011b08 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d0e2      	beq.n	800a47a <SaveToRO+0x12e>
					return pFlash.ErrorCode;
 800a4b4:	4b31      	ldr	r3, [pc, #196]	; (800a57c <SaveToRO+0x230>)
 800a4b6:	69db      	ldr	r3, [r3, #28]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	e777      	b.n	800a3ae <SaveToRO+0x62>
 800a4be:	464d      	mov	r5, r9
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	b2ed      	uxtb	r5, r5
 800a4c4:	4b2a      	ldr	r3, [pc, #168]	; (800a570 <SaveToRO+0x224>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	d945      	bls.n	800a558 <SaveToRO+0x20c>
		if (snippets[s].cond.conditionType) {
 800a4cc:	9500      	str	r5, [sp, #0]
 800a4ce:	00ab      	lsls	r3, r5, #2
 800a4d0:	195b      	adds	r3, r3, r5
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	5c9b      	ldrb	r3, [r3, r2]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d0f1      	beq.n	800a4c0 <SaveToRO+0x174>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a4dc:	23fe      	movs	r3, #254	; 0xfe
 800a4de:	aa02      	add	r2, sp, #8
 800a4e0:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800a4e2:	00a9      	lsls	r1, r5, #2
 800a4e4:	1949      	adds	r1, r1, r5
 800a4e6:	0089      	lsls	r1, r1, #2
 800a4e8:	4b23      	ldr	r3, [pc, #140]	; (800a578 <SaveToRO+0x22c>)
 800a4ea:	469c      	mov	ip, r3
 800a4ec:	4461      	add	r1, ip
 800a4ee:	2214      	movs	r2, #20
 800a4f0:	ab02      	add	r3, sp, #8
 800a4f2:	1c58      	adds	r0, r3, #1
 800a4f4:	f009 fb84 	bl	8013c00 <memcpy>
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a4f8:	2314      	movs	r3, #20
 800a4fa:	469b      	mov	fp, r3
 800a4fc:	44b3      	add	fp, r6
						*(uint16_t*) &snipBuffer[j * 2]);
 800a4fe:	ab02      	add	r3, sp, #8
 800a500:	1b9b      	subs	r3, r3, r6
 800a502:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation(
 800a504:	4b17      	ldr	r3, [pc, #92]	; (800a564 <SaveToRO+0x218>)
 800a506:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a508:	4f17      	ldr	r7, [pc, #92]	; (800a568 <SaveToRO+0x21c>)
 800a50a:	4644      	mov	r4, r8
 800a50c:	46a8      	mov	r8, r5
 800a50e:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a510:	5ba2      	ldrh	r2, [r4, r6]
 800a512:	2300      	movs	r3, #0
 800a514:	0031      	movs	r1, r6
 800a516:	2001      	movs	r0, #1
 800a518:	f007 fb24 	bl	8011b64 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a51c:	4648      	mov	r0, r9
 800a51e:	f007 faf3 	bl	8011b08 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a522:	2800      	cmp	r0, #0
 800a524:	d1a4      	bne.n	800a470 <SaveToRO+0x124>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2201      	movs	r2, #1
 800a52a:	4393      	bics	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800a52e:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a530:	42b5      	cmp	r5, r6
 800a532:	d1ed      	bne.n	800a510 <SaveToRO+0x1c4>
 800a534:	0004      	movs	r4, r0
 800a536:	4645      	mov	r5, r8
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a538:	9a00      	ldr	r2, [sp, #0]
 800a53a:	0093      	lsls	r3, r2, #2
 800a53c:	4694      	mov	ip, r2
 800a53e:	4463      	add	r3, ip
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4a0d      	ldr	r2, [pc, #52]	; (800a578 <SaveToRO+0x22c>)
 800a544:	4691      	mov	r9, r2
 800a546:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation(
 800a548:	4b06      	ldr	r3, [pc, #24]	; (800a564 <SaveToRO+0x218>)
 800a54a:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <SaveToRO+0x21c>)
 800a54e:	4698      	mov	r8, r3
 800a550:	464b      	mov	r3, r9
 800a552:	46a9      	mov	r9, r5
 800a554:	001d      	movs	r5, r3
 800a556:	e799      	b.n	800a48c <SaveToRO+0x140>
	HAL_FLASH_Lock();
 800a558:	f007 facc 	bl	8011af4 <HAL_FLASH_Lock>
	return result;
 800a55c:	e727      	b.n	800a3ae <SaveToRO+0x62>
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	0801d800 	.word	0x0801d800
 800a564:	0000c350 	.word	0x0000c350
 800a568:	40022000 	.word	0x40022000
 800a56c:	2000080e 	.word	0x2000080e
 800a570:	2000099f 	.word	0x2000099f
 800a574:	0801dc00 	.word	0x0801dc00
 800a578:	20006294 	.word	0x20006294
 800a57c:	200067b8 	.word	0x200067b8
 800a580:	20000030 	.word	0x20000030
 800a584:	200002bc 	.word	0x200002bc

0800a588 <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800a588:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800a58a:	228f      	movs	r2, #143	; 0x8f
 800a58c:	0092      	lsls	r2, r2, #2
 800a58e:	2100      	movs	r1, #0
 800a590:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <ClearROtopology+0x20>)
 800a592:	f009 fb3e 	bl	8013c12 <memset>
	N = 1;
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <ClearROtopology+0x24>)
 800a598:	2201      	movs	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800a59c:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <ClearROtopology+0x28>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800a5a2:	f7ff fed3 	bl	800a34c <SaveToRO>
}
 800a5a6:	bd10      	pop	{r4, pc}
 800a5a8:	200002bc 	.word	0x200002bc
 800a5ac:	20000030 	.word	0x20000030
 800a5b0:	2000080e 	.word	0x2000080e

0800a5b4 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a5b4:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a5b6:	f003 ff8b 	bl	800e4d0 <GetUart>
 800a5ba:	0004      	movs	r4, r0
	huart->Init.BaudRate =57600;
 800a5bc:	23e1      	movs	r3, #225	; 0xe1
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a5c2:	2380      	movs	r3, #128	; 0x80
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a5c8:	2380      	movs	r3, #128	; 0x80
 800a5ca:	015b      	lsls	r3, r3, #5
 800a5cc:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a5ce:	f009 f963 	bl	8013898 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a5d2:	6822      	ldr	r2, [r4, #0]
 800a5d4:	6813      	ldr	r3, [r2, #0]
 800a5d6:	2120      	movs	r1, #32
 800a5d8:	430b      	orrs	r3, r1
 800a5da:	6013      	str	r3, [r2, #0]
}
 800a5dc:	bd10      	pop	{r4, pc}
	...

0800a5e0 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5e2:	46c6      	mov	lr, r8
 800a5e4:	b500      	push	{lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	4680      	mov	r8, r0
 800a5ea:	000e      	movs	r6, r1
 800a5ec:	0014      	movs	r4, r2
 800a5ee:	001f      	movs	r7, r3
	myOutport =FindRoute(myID,dst);
 800a5f0:	4b2c      	ldr	r3, [pc, #176]	; (800a6a4 <remoteBootloaderUpdate+0xc4>)
 800a5f2:	7818      	ldrb	r0, [r3, #0]
 800a5f4:	f7f9 fbcc 	bl	8003d90 <FindRoute>
 800a5f8:	0005      	movs	r5, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a5fa:	2f00      	cmp	r7, #0
 800a5fc:	d035      	beq.n	800a66a <remoteBootloaderUpdate+0x8a>
 800a5fe:	4b29      	ldr	r3, [pc, #164]	; (800a6a4 <remoteBootloaderUpdate+0xc4>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	42b3      	cmp	r3, r6
 800a604:	d024      	beq.n	800a650 <remoteBootloaderUpdate+0x70>
	if(src == myID){
 800a606:	4b27      	ldr	r3, [pc, #156]	; (800a6a4 <remoteBootloaderUpdate+0xc4>)
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	4543      	cmp	r3, r8
 800a60c:	d131      	bne.n	800a672 <remoteBootloaderUpdate+0x92>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a60e:	f004 fa3b 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 800a612:	4680      	mov	r8, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a614:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <remoteBootloaderUpdate+0xc8>)
 800a616:	6819      	ldr	r1, [r3, #0]
 800a618:	003b      	movs	r3, r7
 800a61a:	0032      	movs	r2, r6
 800a61c:	4640      	mov	r0, r8
 800a61e:	f00a f8b1 	bl	8014784 <siprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a622:	4b22      	ldr	r3, [pc, #136]	; (800a6ac <remoteBootloaderUpdate+0xcc>)
 800a624:	6819      	ldr	r1, [r3, #0]
 800a626:	4640      	mov	r0, r8
 800a628:	f00a f8cc 	bl	80147c4 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a62c:	4640      	mov	r0, r8
 800a62e:	f7f5 fd73 	bl	8000118 <strlen>
 800a632:	b282      	uxth	r2, r0
 800a634:	2332      	movs	r3, #50	; 0x32
 800a636:	4641      	mov	r1, r8
 800a638:	0020      	movs	r0, r4
 800a63a:	f003 ff8b 	bl	800e554 <writePxITMutex>
		Delay_ms(100);
 800a63e:	2064      	movs	r0, #100	; 0x64
 800a640:	f006 f882 	bl	8010748 <HAL_Delay>
 800a644:	e015      	b.n	800a672 <remoteBootloaderUpdate+0x92>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a646:	f004 fa1f 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 800a64a:	4680      	mov	r8, r0
		myOutport =outport;
 800a64c:	003d      	movs	r5, r7
 800a64e:	e7e1      	b.n	800a614 <remoteBootloaderUpdate+0x34>
	if(src == myID){
 800a650:	4546      	cmp	r6, r8
 800a652:	d0f8      	beq.n	800a646 <remoteBootloaderUpdate+0x66>
		myOutport =outport;
 800a654:	003d      	movs	r5, r7
 800a656:	e00c      	b.n	800a672 <remoteBootloaderUpdate+0x92>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a658:	f004 fa16 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 800a65c:	4680      	mov	r8, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a65e:	4b14      	ldr	r3, [pc, #80]	; (800a6b0 <remoteBootloaderUpdate+0xd0>)
 800a660:	6819      	ldr	r1, [r3, #0]
 800a662:	0032      	movs	r2, r6
 800a664:	f00a f88e 	bl	8014784 <siprintf>
 800a668:	e7db      	b.n	800a622 <remoteBootloaderUpdate+0x42>
	if(src == myID){
 800a66a:	4b0e      	ldr	r3, [pc, #56]	; (800a6a4 <remoteBootloaderUpdate+0xc4>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	4543      	cmp	r3, r8
 800a670:	d0f2      	beq.n	800a658 <remoteBootloaderUpdate+0x78>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a672:	0020      	movs	r0, r4
 800a674:	f7ff ff9e 	bl	800a5b4 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a678:	0028      	movs	r0, r5
 800a67a:	f7ff ff9b 	bl	800a5b4 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <remoteBootloaderUpdate+0xc4>)
 800a680:	7819      	ldrb	r1, [r3, #0]
 800a682:	2300      	movs	r3, #0
 800a684:	9303      	str	r3, [sp, #12]
 800a686:	3b01      	subs	r3, #1
 800a688:	9302      	str	r3, [sp, #8]
 800a68a:	9301      	str	r3, [sp, #4]
 800a68c:	3303      	adds	r3, #3
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	000b      	movs	r3, r1
 800a692:	002a      	movs	r2, r5
 800a694:	0020      	movs	r0, r4
 800a696:	f7fd fe9b 	bl	80083d0 <StartScastDMAStream>
}
 800a69a:	b004      	add	sp, #16
 800a69c:	bc80      	pop	{r7}
 800a69e:	46b8      	mov	r8, r7
 800a6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a2:	46c0      	nop			; (mov r8, r8)
 800a6a4:	2000080e 	.word	0x2000080e
 800a6a8:	2000008c 	.word	0x2000008c
 800a6ac:	20000090 	.word	0x20000090
 800a6b0:	20000088 	.word	0x20000088

0800a6b4 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800a6b4:	b500      	push	{lr}
 800a6b6:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800a6b8:	f003 fde8 	bl	800e28c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a6bc:	f003 fdfe 	bl	800e2bc <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a6c0:	f003 fe14 	bl	800e2ec <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800a6c4:	f003 fe2a 	bl	800e31c <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 800a6c8:	f003 fe40 	bl	800e34c <MX_USART6_UART_Init>
	xTaskCreate(VoltAmpTask, (const char* ) "VoltAmpTask",
 800a6cc:	22a0      	movs	r2, #160	; 0xa0
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	9302      	str	r3, [sp, #8]
 800a6d4:	4b06      	ldr	r3, [pc, #24]	; (800a6f0 <Module_Peripheral_Init+0x3c>)
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	2303      	movs	r3, #3
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	0052      	lsls	r2, r2, #1
 800a6e0:	4904      	ldr	r1, [pc, #16]	; (800a6f4 <Module_Peripheral_Init+0x40>)
 800a6e2:	4805      	ldr	r0, [pc, #20]	; (800a6f8 <Module_Peripheral_Init+0x44>)
 800a6e4:	f004 fe42 	bl	800f36c <xTaskGenericCreate>
	MX_ADC_Init();
 800a6e8:	f002 fe8e 	bl	800d408 <MX_ADC_Init>
}
 800a6ec:	b005      	add	sp, #20
 800a6ee:	bd00      	pop	{pc}
 800a6f0:	20000fec 	.word	0x20000fec
 800a6f4:	0801b080 	.word	0x0801b080
 800a6f8:	0800aaa5 	.word	0x0800aaa5

0800a6fc <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800a6fc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <RegisterModuleCLICommands+0x24>)
 800a700:	f004 f920 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 800a704:	4807      	ldr	r0, [pc, #28]	; (800a724 <RegisterModuleCLICommands+0x28>)
 800a706:	f004 f91d 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 800a70a:	4807      	ldr	r0, [pc, #28]	; (800a728 <RegisterModuleCLICommands+0x2c>)
 800a70c:	f004 f91a 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 800a710:	4806      	ldr	r0, [pc, #24]	; (800a72c <RegisterModuleCLICommands+0x30>)
 800a712:	f004 f917 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800a716:	4806      	ldr	r0, [pc, #24]	; (800a730 <RegisterModuleCLICommands+0x34>)
 800a718:	f004 f914 	bl	800e944 <FreeRTOS_CLIRegisterCommand>
}
 800a71c:	bd10      	pop	{r4, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	0801b2ac 	.word	0x0801b2ac
 800a724:	0801b2cc 	.word	0x0801b2cc
 800a728:	0801b2bc 	.word	0x0801b2bc
 800a72c:	0801b2dc 	.word	0x0801b2dc
 800a730:	0801b29c 	.word	0x0801b29c

0800a734 <GetPort>:
	if (huart->Instance == USART2)
 800a734:	6800      	ldr	r0, [r0, #0]
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <GetPort+0x2c>)
 800a738:	4298      	cmp	r0, r3
 800a73a:	d00c      	beq.n	800a756 <GetPort+0x22>
	else if (huart->Instance == USART6)
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <GetPort+0x30>)
 800a73e:	4298      	cmp	r0, r3
 800a740:	d00b      	beq.n	800a75a <GetPort+0x26>
		return P3;
 800a742:	4b09      	ldr	r3, [pc, #36]	; (800a768 <GetPort+0x34>)
 800a744:	469c      	mov	ip, r3
 800a746:	4460      	add	r0, ip
 800a748:	1e43      	subs	r3, r0, #1
 800a74a:	4198      	sbcs	r0, r3
 800a74c:	4240      	negs	r0, r0
 800a74e:	2302      	movs	r3, #2
 800a750:	4398      	bics	r0, r3
 800a752:	3003      	adds	r0, #3
}
 800a754:	4770      	bx	lr
		return P1;
 800a756:	2001      	movs	r0, #1
 800a758:	e7fc      	b.n	800a754 <GetPort+0x20>
		return P2;
 800a75a:	2002      	movs	r0, #2
 800a75c:	e7fa      	b.n	800a754 <GetPort+0x20>
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	40004400 	.word	0x40004400
 800a764:	40011400 	.word	0x40011400
 800a768:	bfffb800 	.word	0xbfffb800

0800a76c <SendResults>:
		uint8_t Module, float *Buffer) {
 800a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a76e:	b087      	sub	sp, #28
 800a770:	1c05      	adds	r5, r0, #0
 800a772:	000c      	movs	r4, r1
 800a774:	9302      	str	r3, [sp, #8]
 800a776:	ab0c      	add	r3, sp, #48	; 0x30
 800a778:	781e      	ldrb	r6, [r3, #0]
	uint32_t RawMsgInt = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 800a77e:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a780:	f004 f982 	bl	800ea88 <FreeRTOS_CLIGetOutputBuffer>
 800a784:	9003      	str	r0, [sp, #12]
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a786:	2c04      	cmp	r4, #4
 800a788:	d100      	bne.n	800a78c <SendResults+0x20>
 800a78a:	e0cd      	b.n	800a928 <SendResults+0x1bc>
 800a78c:	2c02      	cmp	r4, #2
 800a78e:	d11d      	bne.n	800a7cc <SendResults+0x60>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800a790:	4b67      	ldr	r3, [pc, #412]	; (800a930 <SendResults+0x1c4>)
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	2b05      	cmp	r3, #5
 800a796:	d07c      	beq.n	800a892 <SendResults+0x126>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800a798:	2b07      	cmp	r3, #7
 800a79a:	d000      	beq.n	800a79e <SendResults+0x32>
 800a79c:	e0bd      	b.n	800a91a <SendResults+0x1ae>
			if (Module == myID) {
 800a79e:	4b65      	ldr	r3, [pc, #404]	; (800a934 <SendResults+0x1c8>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	42b3      	cmp	r3, r6
 800a7a4:	d100      	bne.n	800a7a8 <SendResults+0x3c>
 800a7a6:	e0a2      	b.n	800a8ee <SendResults+0x182>
				messageParams[0] = Port;
 800a7a8:	4b63      	ldr	r3, [pc, #396]	; (800a938 <SendResults+0x1cc>)
 800a7aa:	9a02      	ldr	r2, [sp, #8]
 800a7ac:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a7ae:	aa05      	add	r2, sp, #20
 800a7b0:	78d1      	ldrb	r1, [r2, #3]
 800a7b2:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a7b4:	7891      	ldrb	r1, [r2, #2]
 800a7b6:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a7b8:	7851      	ldrb	r1, [r2, #1]
 800a7ba:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a7bc:	7812      	ldrb	r2, [r2, #0]
 800a7be:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a7c0:	2205      	movs	r2, #5
 800a7c2:	2123      	movs	r1, #35	; 0x23
 800a7c4:	0030      	movs	r0, r6
 800a7c6:	f7fd fddd 	bl	8008384 <SendMessageToModule>
 800a7ca:	e0a6      	b.n	800a91a <SendResults+0x1ae>
		strUnit = malloc(6 * sizeof(char));
 800a7cc:	2006      	movs	r0, #6
 800a7ce:	f009 f9f5 	bl	8013bbc <malloc>
 800a7d2:	0007      	movs	r7, r0
		memset(strUnit, 0, (6 * sizeof(char)));
 800a7d4:	2206      	movs	r2, #6
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	f009 fa1b 	bl	8013c12 <memset>
		if (unit == Volt) {
 800a7dc:	4b57      	ldr	r3, [pc, #348]	; (800a93c <SendResults+0x1d0>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d00d      	beq.n	800a800 <SendResults+0x94>
		} else if (unit == Amp) {
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d011      	beq.n	800a80c <SendResults+0xa0>
			sprintf((char*) strUnit, "Volt");
 800a7e8:	4b55      	ldr	r3, [pc, #340]	; (800a940 <SendResults+0x1d4>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	603a      	str	r2, [r7, #0]
 800a7ee:	791b      	ldrb	r3, [r3, #4]
 800a7f0:	713b      	strb	r3, [r7, #4]
	switch (Mode) {
 800a7f2:	2c08      	cmp	r4, #8
 800a7f4:	d900      	bls.n	800a7f8 <SendResults+0x8c>
 800a7f6:	e094      	b.n	800a922 <SendResults+0x1b6>
 800a7f8:	00a3      	lsls	r3, r4, #2
 800a7fa:	4a52      	ldr	r2, [pc, #328]	; (800a944 <SendResults+0x1d8>)
 800a7fc:	58d3      	ldr	r3, [r2, r3]
 800a7fe:	469f      	mov	pc, r3
			sprintf((char*) strUnit, "Volt");
 800a800:	4b4f      	ldr	r3, [pc, #316]	; (800a940 <SendResults+0x1d4>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	603a      	str	r2, [r7, #0]
 800a806:	791b      	ldrb	r3, [r3, #4]
 800a808:	713b      	strb	r3, [r7, #4]
 800a80a:	e7f2      	b.n	800a7f2 <SendResults+0x86>
			sprintf((char*) strUnit, "Amp");
 800a80c:	4b4e      	ldr	r3, [pc, #312]	; (800a948 <SendResults+0x1dc>)
 800a80e:	603b      	str	r3, [r7, #0]
 800a810:	e7ef      	b.n	800a7f2 <SendResults+0x86>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800a812:	4b47      	ldr	r3, [pc, #284]	; (800a930 <SendResults+0x1c4>)
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b05      	cmp	r3, #5
 800a818:	d01d      	beq.n	800a856 <SendResults+0xea>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800a81a:	2b07      	cmp	r3, #7
 800a81c:	d17d      	bne.n	800a91a <SendResults+0x1ae>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 800a81e:	1c28      	adds	r0, r5, #0
 800a820:	f7f8 fae4 	bl	8002dec <__aeabi_f2d>
 800a824:	9000      	str	r0, [sp, #0]
 800a826:	9101      	str	r1, [sp, #4]
 800a828:	003a      	movs	r2, r7
 800a82a:	4948      	ldr	r1, [pc, #288]	; (800a94c <SendResults+0x1e0>)
 800a82c:	9d03      	ldr	r5, [sp, #12]
 800a82e:	0028      	movs	r0, r5
 800a830:	f009 ffa8 	bl	8014784 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a834:	0028      	movs	r0, r5
 800a836:	f7f5 fc6f 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a83a:	23fa      	movs	r3, #250	; 0xfa
 800a83c:	b282      	uxth	r2, r0
 800a83e:	4944      	ldr	r1, [pc, #272]	; (800a950 <SendResults+0x1e4>)
 800a840:	7808      	ldrb	r0, [r1, #0]
 800a842:	2101      	movs	r1, #1
 800a844:	4249      	negs	r1, r1
 800a846:	9100      	str	r1, [sp, #0]
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	0029      	movs	r1, r5
 800a84c:	f003 fe56 	bl	800e4fc <writePxMutex>
			CheckForEnterKey();
 800a850:	f7ff fce2 	bl	800a218 <CheckForEnterKey>
 800a854:	e061      	b.n	800a91a <SendResults+0x1ae>
			RawMsgInt = Raw_Msg * 10;
 800a856:	493f      	ldr	r1, [pc, #252]	; (800a954 <SendResults+0x1e8>)
 800a858:	1c28      	adds	r0, r5, #0
 800a85a:	f7f6 f971 	bl	8000b40 <__aeabi_fmul>
 800a85e:	f7f5 fe8d 	bl	800057c <__aeabi_f2uiz>
 800a862:	0003      	movs	r3, r0
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800a864:	003a      	movs	r2, r7
 800a866:	493c      	ldr	r1, [pc, #240]	; (800a958 <SendResults+0x1ec>)
 800a868:	9d03      	ldr	r5, [sp, #12]
 800a86a:	0028      	movs	r0, r5
 800a86c:	f009 ff8a 	bl	8014784 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a870:	0028      	movs	r0, r5
 800a872:	f7f5 fc51 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a876:	23fa      	movs	r3, #250	; 0xfa
 800a878:	b282      	uxth	r2, r0
 800a87a:	4935      	ldr	r1, [pc, #212]	; (800a950 <SendResults+0x1e4>)
 800a87c:	7808      	ldrb	r0, [r1, #0]
 800a87e:	2101      	movs	r1, #1
 800a880:	4249      	negs	r1, r1
 800a882:	9100      	str	r1, [sp, #0]
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	0029      	movs	r1, r5
 800a888:	f003 fe38 	bl	800e4fc <writePxMutex>
			CheckForEnterKey();
 800a88c:	f7ff fcc4 	bl	800a218 <CheckForEnterKey>
 800a890:	e043      	b.n	800a91a <SendResults+0x1ae>
			RawMsgInt = Raw_Msg * 10;
 800a892:	4930      	ldr	r1, [pc, #192]	; (800a954 <SendResults+0x1e8>)
 800a894:	1c28      	adds	r0, r5, #0
 800a896:	f7f6 f953 	bl	8000b40 <__aeabi_fmul>
 800a89a:	f7f5 fe6f 	bl	800057c <__aeabi_f2uiz>
 800a89e:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800a8a0:	4b24      	ldr	r3, [pc, #144]	; (800a934 <SendResults+0x1c8>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	42b3      	cmp	r3, r6
 800a8a6:	d011      	beq.n	800a8cc <SendResults+0x160>
				messageParams[0] = Port;
 800a8a8:	4b23      	ldr	r3, [pc, #140]	; (800a938 <SendResults+0x1cc>)
 800a8aa:	9a02      	ldr	r2, [sp, #8]
 800a8ac:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a8ae:	aa04      	add	r2, sp, #16
 800a8b0:	78d1      	ldrb	r1, [r2, #3]
 800a8b2:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a8b4:	7891      	ldrb	r1, [r2, #2]
 800a8b6:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a8b8:	7851      	ldrb	r1, [r2, #1]
 800a8ba:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a8bc:	7812      	ldrb	r2, [r2, #0]
 800a8be:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a8c0:	2205      	movs	r2, #5
 800a8c2:	2123      	movs	r1, #35	; 0x23
 800a8c4:	0030      	movs	r0, r6
 800a8c6:	f7fd fd5d 	bl	8008384 <SendMessageToModule>
 800a8ca:	e026      	b.n	800a91a <SendResults+0x1ae>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a8cc:	ab04      	add	r3, sp, #16
 800a8ce:	78da      	ldrb	r2, [r3, #3]
 800a8d0:	4922      	ldr	r1, [pc, #136]	; (800a95c <SendResults+0x1f0>)
 800a8d2:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a8d4:	789a      	ldrb	r2, [r3, #2]
 800a8d6:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a8d8:	785a      	ldrb	r2, [r3, #1]
 800a8da:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a8e0:	230a      	movs	r3, #10
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2204      	movs	r2, #4
 800a8e6:	9802      	ldr	r0, [sp, #8]
 800a8e8:	f003 fe08 	bl	800e4fc <writePxMutex>
 800a8ec:	e015      	b.n	800a91a <SendResults+0x1ae>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a8ee:	ab05      	add	r3, sp, #20
 800a8f0:	78da      	ldrb	r2, [r3, #3]
 800a8f2:	491a      	ldr	r1, [pc, #104]	; (800a95c <SendResults+0x1f0>)
 800a8f4:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a8f6:	789a      	ldrb	r2, [r3, #2]
 800a8f8:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a8fa:	785a      	ldrb	r2, [r3, #1]
 800a8fc:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a902:	230a      	movs	r3, #10
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	2204      	movs	r2, #4
 800a908:	9802      	ldr	r0, [sp, #8]
 800a90a:	f003 fdf7 	bl	800e4fc <writePxMutex>
 800a90e:	e004      	b.n	800a91a <SendResults+0x1ae>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800a910:	2204      	movs	r2, #4
 800a912:	a905      	add	r1, sp, #20
 800a914:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a916:	f009 f973 	bl	8013c00 <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a91a:	3c02      	subs	r4, #2
 800a91c:	23fd      	movs	r3, #253	; 0xfd
 800a91e:	421c      	tst	r4, r3
 800a920:	d002      	beq.n	800a928 <SendResults+0x1bc>
		free(strUnit);
 800a922:	0038      	movs	r0, r7
 800a924:	f009 f954 	bl	8013bd0 <free>
}
 800a928:	2000      	movs	r0, #0
 800a92a:	b007      	add	sp, #28
 800a92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	20000095 	.word	0x20000095
 800a934:	2000080e 	.word	0x2000080e
 800a938:	200006d0 	.word	0x200006d0
 800a93c:	200000a4 	.word	0x200000a4
 800a940:	0801b08c 	.word	0x0801b08c
 800a944:	0801b0b4 	.word	0x0801b0b4
 800a948:	00706d41 	.word	0x00706d41
 800a94c:	0801b0a4 	.word	0x0801b0a4
 800a950:	200002b8 	.word	0x200002b8
 800a954:	41200000 	.word	0x41200000
 800a958:	0801b094 	.word	0x0801b094
 800a95c:	20000ff4 	.word	0x20000ff4

0800a960 <CalculationVolt>:
float CalculationVolt(void) {
 800a960:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH9();
 800a962:	f000 fc23 	bl	800b1ac <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800a966:	4c1a      	ldr	r4, [pc, #104]	; (800a9d0 <CalculationVolt+0x70>)
 800a968:	0020      	movs	r0, r4
 800a96a:	f006 f873 	bl	8010a54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a96e:	21fa      	movs	r1, #250	; 0xfa
 800a970:	0089      	lsls	r1, r1, #2
 800a972:	0020      	movs	r0, r4
 800a974:	f006 f8c0 	bl	8010af8 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800a978:	0020      	movs	r0, r4
 800a97a:	f006 f95f 	bl	8010c3c <HAL_ADC_GetValue>
 800a97e:	4d15      	ldr	r5, [pc, #84]	; (800a9d4 <CalculationVolt+0x74>)
 800a980:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800a982:	0020      	movs	r0, r4
 800a984:	f006 f896 	bl	8010ab4 <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800a988:	f000 fc22 	bl	800b1d0 <ADC_Deselect_CH9>
	return tmp_adc;
 800a98c:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Volt);
 800a98e:	4b12      	ldr	r3, [pc, #72]	; (800a9d8 <CalculationVolt+0x78>)
 800a990:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800a992:	6818      	ldr	r0, [r3, #0]
 800a994:	f7f6 fbd6 	bl	8001144 <__aeabi_ui2f>
 800a998:	f7f8 fa28 	bl	8002dec <__aeabi_f2d>
 800a99c:	4a0f      	ldr	r2, [pc, #60]	; (800a9dc <CalculationVolt+0x7c>)
 800a99e:	4b10      	ldr	r3, [pc, #64]	; (800a9e0 <CalculationVolt+0x80>)
 800a9a0:	f7f7 fb7c 	bl	800209c <__aeabi_dmul>
 800a9a4:	f7f8 fa6a 	bl	8002e7c <__aeabi_d2f>
	_volt = _volt - VRef;
 800a9a8:	f7f8 fa20 	bl	8002dec <__aeabi_f2d>
 800a9ac:	4a0d      	ldr	r2, [pc, #52]	; (800a9e4 <CalculationVolt+0x84>)
 800a9ae:	4b0e      	ldr	r3, [pc, #56]	; (800a9e8 <CalculationVolt+0x88>)
 800a9b0:	f7f7 fde0 	bl	8002574 <__aeabi_dsub>
 800a9b4:	f7f8 fa62 	bl	8002e7c <__aeabi_d2f>
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <CalculationVolt+0x8c>)
 800a9ba:	6018      	str	r0, [r3, #0]
	measured_volt = _volt * (4000150/(50*150))+40/*voltRatio*/; /////////////////final volt calculation here
 800a9bc:	490c      	ldr	r1, [pc, #48]	; (800a9f0 <CalculationVolt+0x90>)
 800a9be:	f7f6 f8bf 	bl	8000b40 <__aeabi_fmul>
 800a9c2:	490c      	ldr	r1, [pc, #48]	; (800a9f4 <CalculationVolt+0x94>)
 800a9c4:	f7f5 fe62 	bl	800068c <__aeabi_fadd>
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	; (800a9f8 <CalculationVolt+0x98>)
 800a9ca:	6018      	str	r0, [r3, #0]
}
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	20006638 	.word	0x20006638
 800a9d4:	20006488 	.word	0x20006488
 800a9d8:	20006494 	.word	0x20006494
 800a9dc:	e734d9b4 	.word	0xe734d9b4
 800a9e0:	3f4a680c 	.word	0x3f4a680c
 800a9e4:	66666666 	.word	0x66666666
 800a9e8:	3ffa6666 	.word	0x3ffa6666
 800a9ec:	20006360 	.word	0x20006360
 800a9f0:	44054000 	.word	0x44054000
 800a9f4:	42200000 	.word	0x42200000
 800a9f8:	200065f4 	.word	0x200065f4

0800a9fc <CalculationAmp>:
float CalculationAmp(void) {
 800a9fc:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH7();
 800a9fe:	f000 fbb1 	bl	800b164 <ADC_Select_CH7>
		HAL_ADC_Start(&hadc);
 800aa02:	4c1c      	ldr	r4, [pc, #112]	; (800aa74 <CalculationAmp+0x78>)
 800aa04:	0020      	movs	r0, r4
 800aa06:	f006 f825 	bl	8010a54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800aa0a:	21fa      	movs	r1, #250	; 0xfa
 800aa0c:	0089      	lsls	r1, r1, #2
 800aa0e:	0020      	movs	r0, r4
 800aa10:	f006 f872 	bl	8010af8 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800aa14:	0020      	movs	r0, r4
 800aa16:	f006 f911 	bl	8010c3c <HAL_ADC_GetValue>
 800aa1a:	4d17      	ldr	r5, [pc, #92]	; (800aa78 <CalculationAmp+0x7c>)
 800aa1c:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800aa1e:	0020      	movs	r0, r4
 800aa20:	f006 f848 	bl	8010ab4 <HAL_ADC_Stop>
		ADC_Deselect_CH7();
 800aa24:	f000 fbb0 	bl	800b188 <ADC_Deselect_CH7>
	return tmp_adc;
 800aa28:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Amp);
 800aa2a:	4b14      	ldr	r3, [pc, #80]	; (800aa7c <CalculationAmp+0x80>)
 800aa2c:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	f7f6 fb88 	bl	8001144 <__aeabi_ui2f>
 800aa34:	f7f8 f9da 	bl	8002dec <__aeabi_f2d>
 800aa38:	4a11      	ldr	r2, [pc, #68]	; (800aa80 <CalculationAmp+0x84>)
 800aa3a:	4b12      	ldr	r3, [pc, #72]	; (800aa84 <CalculationAmp+0x88>)
 800aa3c:	f7f7 fb2e 	bl	800209c <__aeabi_dmul>
 800aa40:	f7f8 fa1c 	bl	8002e7c <__aeabi_d2f>
	_volt = _volt - VRef;
 800aa44:	f7f8 f9d2 	bl	8002dec <__aeabi_f2d>
 800aa48:	4a0f      	ldr	r2, [pc, #60]	; (800aa88 <CalculationAmp+0x8c>)
 800aa4a:	4b10      	ldr	r3, [pc, #64]	; (800aa8c <CalculationAmp+0x90>)
 800aa4c:	f7f7 fd92 	bl	8002574 <__aeabi_dsub>
 800aa50:	f7f8 fa14 	bl	8002e7c <__aeabi_d2f>
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <CalculationAmp+0x94>)
 800aa56:	6018      	str	r0, [r3, #0]
	measured_amp = ((_volt * 100) / shuntResistor) * ampTranRatio; /////////////////final amp calculation here
 800aa58:	490e      	ldr	r1, [pc, #56]	; (800aa94 <CalculationAmp+0x98>)
 800aa5a:	f7f6 f871 	bl	8000b40 <__aeabi_fmul>
 800aa5e:	f7f8 f9c5 	bl	8002dec <__aeabi_f2d>
 800aa62:	4a0d      	ldr	r2, [pc, #52]	; (800aa98 <CalculationAmp+0x9c>)
 800aa64:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <CalculationAmp+0xa0>)
 800aa66:	f7f6 ff13 	bl	8001890 <__aeabi_ddiv>
 800aa6a:	f7f8 fa07 	bl	8002e7c <__aeabi_d2f>
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <CalculationAmp+0xa4>)
 800aa70:	6018      	str	r0, [r3, #0]
}
 800aa72:	bd70      	pop	{r4, r5, r6, pc}
 800aa74:	20006638 	.word	0x20006638
 800aa78:	20006488 	.word	0x20006488
 800aa7c:	20006494 	.word	0x20006494
 800aa80:	e734d9b4 	.word	0xe734d9b4
 800aa84:	3f4a680c 	.word	0x3f4a680c
 800aa88:	66666666 	.word	0x66666666
 800aa8c:	3ffa6666 	.word	0x3ffa6666
 800aa90:	20006360 	.word	0x20006360
 800aa94:	42c80000 	.word	0x42c80000
 800aa98:	9999999a 	.word	0x9999999a
 800aa9c:	3fb99999 	.word	0x3fb99999
 800aaa0:	20006484 	.word	0x20006484

0800aaa4 <VoltAmpTask>:
void VoltAmpTask(void *argument) {
 800aaa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa6:	46c6      	mov	lr, r8
 800aaa8:	b500      	push	{lr}
 800aaaa:	b082      	sub	sp, #8
	HAL_ADC_Start_IT(&hadc);
 800aaac:	483b      	ldr	r0, [pc, #236]	; (800ab9c <VoltAmpTask+0xf8>)
 800aaae:	f006 f881 	bl	8010bb4 <HAL_ADC_Start_IT>
		switch (unit) {
 800aab2:	4c3b      	ldr	r4, [pc, #236]	; (800aba0 <VoltAmpTask+0xfc>)
			DATA_To_SEND = CalculationVolt();
 800aab4:	4e3b      	ldr	r6, [pc, #236]	; (800aba4 <VoltAmpTask+0x100>)
			DATA_To_SEND = CalculationVolt();
 800aab6:	46b0      	mov	r8, r6
 800aab8:	e02e      	b.n	800ab18 <VoltAmpTask+0x74>
			DATA_To_SEND = CalculationVolt();
 800aaba:	f7ff ff51 	bl	800a960 <CalculationVolt>
 800aabe:	6030      	str	r0, [r6, #0]
		switch (global_mode) {
 800aac0:	4b39      	ldr	r3, [pc, #228]	; (800aba8 <VoltAmpTask+0x104>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d031      	beq.n	800ab2c <VoltAmpTask+0x88>
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d04c      	beq.n	800ab66 <VoltAmpTask+0xc2>
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d008      	beq.n	800aae2 <VoltAmpTask+0x3e>
			global_mode = IDLE_CASE;
 800aad0:	4b35      	ldr	r3, [pc, #212]	; (800aba8 <VoltAmpTask+0x104>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	701a      	strb	r2, [r3, #0]
			break;
 800aad6:	e01d      	b.n	800ab14 <VoltAmpTask+0x70>
			DATA_To_SEND = CalculationAmp();
 800aad8:	f7ff ff90 	bl	800a9fc <CalculationAmp>
 800aadc:	4b31      	ldr	r3, [pc, #196]	; (800aba4 <VoltAmpTask+0x100>)
 800aade:	6018      	str	r0, [r3, #0]
			break;
 800aae0:	e7ee      	b.n	800aac0 <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800aae2:	f005 fe2b 	bl	801073c <HAL_GetTick>
 800aae6:	0007      	movs	r7, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800aae8:	4b2d      	ldr	r3, [pc, #180]	; (800aba0 <VoltAmpTask+0xfc>)
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	4b2e      	ldr	r3, [pc, #184]	; (800aba8 <VoltAmpTask+0x104>)
 800aaee:	7819      	ldrb	r1, [r3, #0]
 800aaf0:	4b2c      	ldr	r3, [pc, #176]	; (800aba4 <VoltAmpTask+0x100>)
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	f7ff fe37 	bl	800a76c <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800aafe:	4d2b      	ldr	r5, [pc, #172]	; (800abac <VoltAmpTask+0x108>)
 800ab00:	e001      	b.n	800ab06 <VoltAmpTask+0x62>
				taskYIELD();
 800ab02:	f005 fcb7 	bl	8010474 <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800ab06:	f005 fe19 	bl	801073c <HAL_GetTick>
 800ab0a:	1bc0      	subs	r0, r0, r7
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	4298      	cmp	r0, r3
 800ab12:	d3f6      	bcc.n	800ab02 <VoltAmpTask+0x5e>
		taskYIELD();
 800ab14:	f005 fcae 	bl	8010474 <vPortYield>
		switch (unit) {
 800ab18:	7823      	ldrb	r3, [r4, #0]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d0cd      	beq.n	800aaba <VoltAmpTask+0x16>
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d0da      	beq.n	800aad8 <VoltAmpTask+0x34>
			DATA_To_SEND = CalculationVolt();
 800ab22:	f7ff ff1d 	bl	800a960 <CalculationVolt>
 800ab26:	4643      	mov	r3, r8
 800ab28:	6018      	str	r0, [r3, #0]
			break;
 800ab2a:	e7c9      	b.n	800aac0 <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800ab2c:	f005 fe06 	bl	801073c <HAL_GetTick>
 800ab30:	0007      	movs	r7, r0
			SendResults(DATA_To_SEND, global_mode, unit, global_port,
 800ab32:	4b1f      	ldr	r3, [pc, #124]	; (800abb0 <VoltAmpTask+0x10c>)
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	4a1a      	ldr	r2, [pc, #104]	; (800aba0 <VoltAmpTask+0xfc>)
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	491b      	ldr	r1, [pc, #108]	; (800aba8 <VoltAmpTask+0x104>)
 800ab3c:	7809      	ldrb	r1, [r1, #0]
 800ab3e:	4819      	ldr	r0, [pc, #100]	; (800aba4 <VoltAmpTask+0x100>)
 800ab40:	6800      	ldr	r0, [r0, #0]
 800ab42:	2500      	movs	r5, #0
 800ab44:	9501      	str	r5, [sp, #4]
 800ab46:	4d1b      	ldr	r5, [pc, #108]	; (800abb4 <VoltAmpTask+0x110>)
 800ab48:	782d      	ldrb	r5, [r5, #0]
 800ab4a:	9500      	str	r5, [sp, #0]
 800ab4c:	f7ff fe0e 	bl	800a76c <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800ab50:	4d16      	ldr	r5, [pc, #88]	; (800abac <VoltAmpTask+0x108>)
 800ab52:	e001      	b.n	800ab58 <VoltAmpTask+0xb4>
				taskYIELD();
 800ab54:	f005 fc8e 	bl	8010474 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800ab58:	f005 fdf0 	bl	801073c <HAL_GetTick>
 800ab5c:	1bc0      	subs	r0, r0, r7
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	4298      	cmp	r0, r3
 800ab62:	d3f7      	bcc.n	800ab54 <VoltAmpTask+0xb0>
 800ab64:	e7d6      	b.n	800ab14 <VoltAmpTask+0x70>
			t0 = HAL_GetTick();
 800ab66:	f005 fde9 	bl	801073c <HAL_GetTick>
 800ab6a:	0007      	movs	r7, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0,ptr_read_buffer);
 800ab6c:	4b0c      	ldr	r3, [pc, #48]	; (800aba0 <VoltAmpTask+0xfc>)
 800ab6e:	781a      	ldrb	r2, [r3, #0]
 800ab70:	4b0d      	ldr	r3, [pc, #52]	; (800aba8 <VoltAmpTask+0x104>)
 800ab72:	7819      	ldrb	r1, [r3, #0]
 800ab74:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <VoltAmpTask+0x100>)
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	4b0f      	ldr	r3, [pc, #60]	; (800abb8 <VoltAmpTask+0x114>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	f7ff fdf3 	bl	800a76c <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800ab86:	4d09      	ldr	r5, [pc, #36]	; (800abac <VoltAmpTask+0x108>)
 800ab88:	e001      	b.n	800ab8e <VoltAmpTask+0xea>
				taskYIELD();
 800ab8a:	f005 fc73 	bl	8010474 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800ab8e:	f005 fdd5 	bl	801073c <HAL_GetTick>
 800ab92:	1bc0      	subs	r0, r0, r7
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	4298      	cmp	r0, r3
 800ab98:	d3f7      	bcc.n	800ab8a <VoltAmpTask+0xe6>
 800ab9a:	e7bb      	b.n	800ab14 <VoltAmpTask+0x70>
 800ab9c:	20006638 	.word	0x20006638
 800aba0:	200000a4 	.word	0x200000a4
 800aba4:	20000fe8 	.word	0x20000fe8
 800aba8:	200063d4 	.word	0x200063d4
 800abac:	20006580 	.word	0x20006580
 800abb0:	200063d5 	.word	0x200063d5
 800abb4:	200065f8 	.word	0x200065f8
 800abb8:	20006490 	.word	0x20006490

0800abbc <SampleV>:
uint8_t SampleV(float *volt) {
 800abbc:	b510      	push	{r4, lr}
 800abbe:	0004      	movs	r4, r0
	*volt = CalculationVolt();
 800abc0:	f7ff fece 	bl	800a960 <CalculationVolt>
 800abc4:	6020      	str	r0, [r4, #0]
}
 800abc6:	2000      	movs	r0, #0
 800abc8:	bd10      	pop	{r4, pc}

0800abca <SampleA>:
uint8_t SampleA(float *curr) {
 800abca:	b510      	push	{r4, lr}
 800abcc:	0004      	movs	r4, r0
	*curr = CalculationAmp();
 800abce:	f7ff ff15 	bl	800a9fc <CalculationAmp>
 800abd2:	6020      	str	r0, [r4, #0]
}
 800abd4:	2000      	movs	r0, #0
 800abd6:	bd10      	pop	{r4, pc}

0800abd8 <sampleCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE sampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800abd8:	b510      	push	{r4, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	0004      	movs	r4, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	switch (unit) {
 800abde:	4b13      	ldr	r3, [pc, #76]	; (800ac2c <sampleCommand+0x54>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d005      	beq.n	800abf2 <sampleCommand+0x1a>
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d01c      	beq.n	800ac24 <sampleCommand+0x4c>
		break;
	case Amp:
		SampleA(&DATA_To_SEND1);
		break;
	default:
		SampleV(&DATA_To_SEND1);
 800abea:	4811      	ldr	r0, [pc, #68]	; (800ac30 <sampleCommand+0x58>)
 800abec:	f7ff ffe6 	bl	800abbc <SampleV>
 800abf0:	e002      	b.n	800abf8 <sampleCommand+0x20>
		SampleV(&DATA_To_SEND1);
 800abf2:	480f      	ldr	r0, [pc, #60]	; (800ac30 <sampleCommand+0x58>)
 800abf4:	f7ff ffe2 	bl	800abbc <SampleV>
	}

	global_mode = SAMPLE_CLI_CASE;
 800abf8:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <sampleCommand+0x5c>)
 800abfa:	2206      	movs	r2, #6
 800abfc:	701a      	strb	r2, [r3, #0]
	SendResults(DATA_To_SEND1, global_mode, unit, 0, 0, NULL);
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <sampleCommand+0x54>)
 800ac00:	781a      	ldrb	r2, [r3, #0]
 800ac02:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <sampleCommand+0x58>)
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	2300      	movs	r3, #0
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	2106      	movs	r1, #6
 800ac0e:	f7ff fdad 	bl	800a76c <SendResults>

	if (result != H2AR3_OK)
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800ac12:	2299      	movs	r2, #153	; 0x99
 800ac14:	0092      	lsls	r2, r2, #2
 800ac16:	2100      	movs	r1, #0
 800ac18:	0020      	movs	r0, r4
 800ac1a:	f008 fffa 	bl	8013c12 <memset>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800ac1e:	2000      	movs	r0, #0
 800ac20:	b002      	add	sp, #8
 800ac22:	bd10      	pop	{r4, pc}
		SampleA(&DATA_To_SEND1);
 800ac24:	4802      	ldr	r0, [pc, #8]	; (800ac30 <sampleCommand+0x58>)
 800ac26:	f7ff ffd0 	bl	800abca <SampleA>
		break;
 800ac2a:	e7e5      	b.n	800abf8 <sampleCommand+0x20>
 800ac2c:	200000a4 	.word	0x200000a4
 800ac30:	20000008 	.word	0x20000008
 800ac34:	200063d4 	.word	0x200063d4

0800ac38 <StreamVToPort>:
		uint32_t Timeout) {
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	b082      	sub	sp, #8
	global_port = Port;
 800ac3c:	4c19      	ldr	r4, [pc, #100]	; (800aca4 <StreamVToPort+0x6c>)
 800ac3e:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800ac40:	4819      	ldr	r0, [pc, #100]	; (800aca8 <StreamVToPort+0x70>)
 800ac42:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800ac44:	4919      	ldr	r1, [pc, #100]	; (800acac <StreamVToPort+0x74>)
 800ac46:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800ac48:	4a19      	ldr	r2, [pc, #100]	; (800acb0 <StreamVToPort+0x78>)
 800ac4a:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800ac4c:	4a19      	ldr	r2, [pc, #100]	; (800acb4 <StreamVToPort+0x7c>)
 800ac4e:	2102      	movs	r1, #2
 800ac50:	7011      	strb	r1, [r2, #0]
	unit = Volt;
 800ac52:	4a19      	ldr	r2, [pc, #100]	; (800acb8 <StreamVToPort+0x80>)
 800ac54:	3901      	subs	r1, #1
 800ac56:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800ac58:	1e5a      	subs	r2, r3, #1
 800ac5a:	3203      	adds	r2, #3
 800ac5c:	d902      	bls.n	800ac64 <StreamVToPort+0x2c>
}
 800ac5e:	2000      	movs	r0, #0
 800ac60:	b002      	add	sp, #8
 800ac62:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800ac64:	0158      	lsls	r0, r3, #5
 800ac66:	1ac0      	subs	r0, r0, r3
 800ac68:	0080      	lsls	r0, r0, #2
 800ac6a:	18c0      	adds	r0, r0, r3
 800ac6c:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800ac6e:	21fa      	movs	r1, #250	; 0xfa
 800ac70:	0089      	lsls	r1, r1, #2
 800ac72:	f7f5 fa6d 	bl	8000150 <__udivsi3>
 800ac76:	0001      	movs	r1, r0
 800ac78:	4b10      	ldr	r3, [pc, #64]	; (800acbc <StreamVToPort+0x84>)
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	23ff      	movs	r3, #255	; 0xff
 800ac7e:	2200      	movs	r2, #0
 800ac80:	480f      	ldr	r0, [pc, #60]	; (800acc0 <StreamVToPort+0x88>)
 800ac82:	f005 fa4d 	bl	8010120 <xTimerCreate>
 800ac86:	0004      	movs	r4, r0
 800ac88:	4b0e      	ldr	r3, [pc, #56]	; (800acc4 <StreamVToPort+0x8c>)
 800ac8a:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800ac8c:	f004 fcf6 	bl	800f67c <xTaskGetTickCount>
 800ac90:	0002      	movs	r2, r0
 800ac92:	2301      	movs	r3, #1
 800ac94:	425b      	negs	r3, r3
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	0020      	movs	r0, r4
 800ac9e:	f005 fa5d 	bl	801015c <xTimerGenericCommand>
 800aca2:	e7dc      	b.n	800ac5e <StreamVToPort+0x26>
 800aca4:	200063d5 	.word	0x200063d5
 800aca8:	200065f8 	.word	0x200065f8
 800acac:	20006580 	.word	0x20006580
 800acb0:	200065fc 	.word	0x200065fc
 800acb4:	200063d4 	.word	0x200063d4
 800acb8:	200000a4 	.word	0x200000a4
 800acbc:	0800a27d 	.word	0x0800a27d
 800acc0:	0801b0d8 	.word	0x0801b0d8
 800acc4:	20000ff8 	.word	0x20000ff8

0800acc8 <StreamAToPort>:
		uint32_t Timeout) {
 800acc8:	b510      	push	{r4, lr}
 800acca:	b082      	sub	sp, #8
	global_port = Port;
 800accc:	4c19      	ldr	r4, [pc, #100]	; (800ad34 <StreamAToPort+0x6c>)
 800acce:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800acd0:	4819      	ldr	r0, [pc, #100]	; (800ad38 <StreamAToPort+0x70>)
 800acd2:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800acd4:	4919      	ldr	r1, [pc, #100]	; (800ad3c <StreamAToPort+0x74>)
 800acd6:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800acd8:	4a19      	ldr	r2, [pc, #100]	; (800ad40 <StreamAToPort+0x78>)
 800acda:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800acdc:	2202      	movs	r2, #2
 800acde:	4919      	ldr	r1, [pc, #100]	; (800ad44 <StreamAToPort+0x7c>)
 800ace0:	700a      	strb	r2, [r1, #0]
	unit = Amp;
 800ace2:	4919      	ldr	r1, [pc, #100]	; (800ad48 <StreamAToPort+0x80>)
 800ace4:	700a      	strb	r2, [r1, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800ace6:	1e5a      	subs	r2, r3, #1
 800ace8:	3203      	adds	r2, #3
 800acea:	d902      	bls.n	800acf2 <StreamAToPort+0x2a>
}
 800acec:	2000      	movs	r0, #0
 800acee:	b002      	add	sp, #8
 800acf0:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800acf2:	0158      	lsls	r0, r3, #5
 800acf4:	1ac0      	subs	r0, r0, r3
 800acf6:	0080      	lsls	r0, r0, #2
 800acf8:	18c0      	adds	r0, r0, r3
 800acfa:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800acfc:	21fa      	movs	r1, #250	; 0xfa
 800acfe:	0089      	lsls	r1, r1, #2
 800ad00:	f7f5 fa26 	bl	8000150 <__udivsi3>
 800ad04:	0001      	movs	r1, r0
 800ad06:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <StreamAToPort+0x84>)
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	23ff      	movs	r3, #255	; 0xff
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	4810      	ldr	r0, [pc, #64]	; (800ad50 <StreamAToPort+0x88>)
 800ad10:	f005 fa06 	bl	8010120 <xTimerCreate>
 800ad14:	0004      	movs	r4, r0
 800ad16:	4b0f      	ldr	r3, [pc, #60]	; (800ad54 <StreamAToPort+0x8c>)
 800ad18:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800ad1a:	f004 fcaf 	bl	800f67c <xTaskGetTickCount>
 800ad1e:	0002      	movs	r2, r0
 800ad20:	2301      	movs	r3, #1
 800ad22:	425b      	negs	r3, r3
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	2300      	movs	r3, #0
 800ad28:	2101      	movs	r1, #1
 800ad2a:	0020      	movs	r0, r4
 800ad2c:	f005 fa16 	bl	801015c <xTimerGenericCommand>
 800ad30:	e7dc      	b.n	800acec <StreamAToPort+0x24>
 800ad32:	46c0      	nop			; (mov r8, r8)
 800ad34:	200063d5 	.word	0x200063d5
 800ad38:	200065f8 	.word	0x200065f8
 800ad3c:	20006580 	.word	0x20006580
 800ad40:	200065fc 	.word	0x200065fc
 800ad44:	200063d4 	.word	0x200063d4
 800ad48:	200000a4 	.word	0x200000a4
 800ad4c:	0800a27d 	.word	0x0800a27d
 800ad50:	0801b0d8 	.word	0x0801b0d8
 800ad54:	20000ff8 	.word	0x20000ff8

0800ad58 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800ad58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad5a:	46c6      	mov	lr, r8
 800ad5c:	b500      	push	{lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	ab08      	add	r3, sp, #32
 800ad62:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800ad64:	4b39      	ldr	r3, [pc, #228]	; (800ae4c <Module_MessagingTask+0xf4>)
 800ad66:	469c      	mov	ip, r3
 800ad68:	4460      	add	r0, ip
 800ad6a:	b283      	uxth	r3, r0
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d86a      	bhi.n	800ae46 <Module_MessagingTask+0xee>
 800ad70:	0098      	lsls	r0, r3, #2
 800ad72:	4b37      	ldr	r3, [pc, #220]	; (800ae50 <Module_MessagingTask+0xf8>)
 800ad74:	581b      	ldr	r3, [r3, r0]
 800ad76:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ad78:	1e4f      	subs	r7, r1, #1
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ad7a:	4836      	ldr	r0, [pc, #216]	; (800ae54 <Module_MessagingTask+0xfc>)
 800ad7c:	00fd      	lsls	r5, r7, #3
 800ad7e:	1bee      	subs	r6, r5, r7
 800ad80:	00f6      	lsls	r6, r6, #3
 800ad82:	1986      	adds	r6, r0, r6
 800ad84:	1931      	adds	r1, r6, r4
 800ad86:	798b      	ldrb	r3, [r1, #6]
 800ad88:	061b      	lsls	r3, r3, #24
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 16)
 800ad8a:	79ca      	ldrb	r2, [r1, #7]
 800ad8c:	0412      	lsls	r2, r2, #16
 800ad8e:	189b      	adds	r3, r3, r2
				+ cMessage[port - 1][9 + shift];
 800ad90:	7a4a      	ldrb	r2, [r1, #9]
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ad92:	189b      	adds	r3, r3, r2
				+ ((uint32_t) cMessage[port - 1][8 + shift] << 8)
 800ad94:	7a0a      	ldrb	r2, [r1, #8]
 800ad96:	0212      	lsls	r2, r2, #8
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ad98:	4698      	mov	r8, r3
 800ad9a:	4490      	add	r8, r2
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ad9c:	788a      	ldrb	r2, [r1, #2]
 800ad9e:	0612      	lsls	r2, r2, #24
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 16)
 800ada0:	78cb      	ldrb	r3, [r1, #3]
 800ada2:	041b      	lsls	r3, r3, #16
 800ada4:	469c      	mov	ip, r3
 800ada6:	4462      	add	r2, ip
				+ cMessage[port - 1][5 + shift];
 800ada8:	794b      	ldrb	r3, [r1, #5]
 800adaa:	469c      	mov	ip, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800adac:	4462      	add	r2, ip
				+ ((uint32_t) cMessage[port - 1][4 + shift] << 8)
 800adae:	7909      	ldrb	r1, [r1, #4]
 800adb0:	0209      	lsls	r1, r1, #8
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800adb2:	1852      	adds	r2, r2, r1
		StreamVToPort(cMessage[port - 1][1 + shift],
 800adb4:	5d31      	ldrb	r1, [r6, r4]
 800adb6:	1934      	adds	r4, r6, r4
 800adb8:	7860      	ldrb	r0, [r4, #1]
 800adba:	4643      	mov	r3, r8
 800adbc:	f7ff ff3c 	bl	800ac38 <StreamVToPort>
	Module_Status result = H2AR3_OK;
 800adc0:	2000      	movs	r0, #0
}
 800adc2:	b002      	add	sp, #8
 800adc4:	bc80      	pop	{r7}
 800adc6:	46b8      	mov	r8, r7
 800adc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800adca:	1e4f      	subs	r7, r1, #1
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800adcc:	4821      	ldr	r0, [pc, #132]	; (800ae54 <Module_MessagingTask+0xfc>)
 800adce:	00fd      	lsls	r5, r7, #3
 800add0:	1bee      	subs	r6, r5, r7
 800add2:	00f6      	lsls	r6, r6, #3
 800add4:	1986      	adds	r6, r0, r6
 800add6:	1931      	adds	r1, r6, r4
 800add8:	798b      	ldrb	r3, [r1, #6]
 800adda:	061b      	lsls	r3, r3, #24
						+ ((uint32_t) cMessage[port - 1][7 + shift] << 16)
 800addc:	79ca      	ldrb	r2, [r1, #7]
 800adde:	0412      	lsls	r2, r2, #16
 800ade0:	189b      	adds	r3, r3, r2
						+ cMessage[port - 1][9 + shift];
 800ade2:	7a4a      	ldrb	r2, [r1, #9]
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ade4:	189b      	adds	r3, r3, r2
						+ ((uint32_t) cMessage[port - 1][8 + shift] << 8)
 800ade6:	7a0a      	ldrb	r2, [r1, #8]
 800ade8:	0212      	lsls	r2, r2, #8
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800adea:	4698      	mov	r8, r3
 800adec:	4490      	add	r8, r2
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800adee:	788a      	ldrb	r2, [r1, #2]
 800adf0:	0612      	lsls	r2, r2, #24
						+ ((uint32_t) cMessage[port - 1][3 + shift] << 16)
 800adf2:	78cb      	ldrb	r3, [r1, #3]
 800adf4:	041b      	lsls	r3, r3, #16
 800adf6:	469c      	mov	ip, r3
 800adf8:	4462      	add	r2, ip
						+ cMessage[port - 1][5 + shift];
 800adfa:	794b      	ldrb	r3, [r1, #5]
 800adfc:	469c      	mov	ip, r3
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800adfe:	4462      	add	r2, ip
						+ ((uint32_t) cMessage[port - 1][4 + shift] << 8)
 800ae00:	7909      	ldrb	r1, [r1, #4]
 800ae02:	0209      	lsls	r1, r1, #8
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ae04:	1852      	adds	r2, r2, r1
				StreamAToPort(cMessage[port - 1][1 + shift],
 800ae06:	5d31      	ldrb	r1, [r6, r4]
 800ae08:	1934      	adds	r4, r6, r4
 800ae0a:	7860      	ldrb	r0, [r4, #1]
 800ae0c:	4643      	mov	r3, r8
 800ae0e:	f7ff ff5b 	bl	800acc8 <StreamAToPort>
	Module_Status result = H2AR3_OK;
 800ae12:	2000      	movs	r0, #0
		break;
 800ae14:	e7d5      	b.n	800adc2 <Module_MessagingTask+0x6a>
		global_mode = IDLE_CASE;
 800ae16:	4b10      	ldr	r3, [pc, #64]	; (800ae58 <Module_MessagingTask+0x100>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
		xTimerStop(xTimer, portMAX_DELAY);
 800ae1c:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <Module_MessagingTask+0x104>)
 800ae1e:	6818      	ldr	r0, [r3, #0]
 800ae20:	2301      	movs	r3, #1
 800ae22:	425b      	negs	r3, r3
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	2300      	movs	r3, #0
 800ae28:	2103      	movs	r1, #3
 800ae2a:	f005 f997 	bl	801015c <xTimerGenericCommand>
	Module_Status result = H2AR3_OK;
 800ae2e:	2000      	movs	r0, #0
		break;
 800ae30:	e7c7      	b.n	800adc2 <Module_MessagingTask+0x6a>
		SampleV(&H2AR3_Read_V);
 800ae32:	480b      	ldr	r0, [pc, #44]	; (800ae60 <Module_MessagingTask+0x108>)
 800ae34:	f7ff fec2 	bl	800abbc <SampleV>
	Module_Status result = H2AR3_OK;
 800ae38:	2000      	movs	r0, #0
		break;
 800ae3a:	e7c2      	b.n	800adc2 <Module_MessagingTask+0x6a>
		SampleA(&H2AR3_Read_A);
 800ae3c:	4809      	ldr	r0, [pc, #36]	; (800ae64 <Module_MessagingTask+0x10c>)
 800ae3e:	f7ff fec4 	bl	800abca <SampleA>
	Module_Status result = H2AR3_OK;
 800ae42:	2000      	movs	r0, #0
		break;
 800ae44:	e7bd      	b.n	800adc2 <Module_MessagingTask+0x6a>
	Module_Status result = H2AR3_OK;
 800ae46:	2001      	movs	r0, #1
 800ae48:	e7bb      	b.n	800adc2 <Module_MessagingTask+0x6a>
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	fffff7cc 	.word	0xfffff7cc
 800ae50:	0801b0ec 	.word	0x0801b0ec
 800ae54:	2000054c 	.word	0x2000054c
 800ae58:	200063d4 	.word	0x200063d4
 800ae5c:	20000ff8 	.word	0x20000ff8
 800ae60:	20006508 	.word	0x20006508
 800ae64:	2000650c 	.word	0x2000650c

0800ae68 <Stop>:
uint8_t Stop(void) {
 800ae68:	b500      	push	{lr}
 800ae6a:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4a06      	ldr	r2, [pc, #24]	; (800ae88 <Stop+0x20>)
 800ae70:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800ae72:	4a06      	ldr	r2, [pc, #24]	; (800ae8c <Stop+0x24>)
 800ae74:	6810      	ldr	r0, [r2, #0]
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2103      	movs	r1, #3
 800ae7c:	f005 f96e 	bl	801015c <xTimerGenericCommand>
}
 800ae80:	2000      	movs	r0, #0
 800ae82:	b003      	add	sp, #12
 800ae84:	bd00      	pop	{pc}
 800ae86:	46c0      	nop			; (mov r8, r8)
 800ae88:	200063d4 	.word	0x200063d4
 800ae8c:	20000ff8 	.word	0x20000ff8

0800ae90 <stopCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE stopCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800ae90:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	volt_buffer = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <stopCommand+0x14>)
 800ae96:	6013      	str	r3, [r2, #0]
	amp_buffer = 0;
 800ae98:	4a03      	ldr	r2, [pc, #12]	; (800aea8 <stopCommand+0x18>)
 800ae9a:	6013      	str	r3, [r2, #0]
	Stop();
 800ae9c:	f7ff ffe4 	bl	800ae68 <Stop>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800aea0:	2000      	movs	r0, #0
 800aea2:	bd10      	pop	{r4, pc}
 800aea4:	2000648c 	.word	0x2000648c
 800aea8:	2000635c 	.word	0x2000635c

0800aeac <StreamVToCLI>:
{
 800aeac:	b510      	push	{r4, lr}
 800aeae:	b082      	sub	sp, #8
	global_period=Period;
 800aeb0:	4b1a      	ldr	r3, [pc, #104]	; (800af1c <StreamVToCLI+0x70>)
 800aeb2:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800aeb4:	4b1a      	ldr	r3, [pc, #104]	; (800af20 <StreamVToCLI+0x74>)
 800aeb6:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	4a1a      	ldr	r2, [pc, #104]	; (800af24 <StreamVToCLI+0x78>)
 800aebc:	7013      	strb	r3, [r2, #0]
	unit=Volt;
 800aebe:	4a1a      	ldr	r2, [pc, #104]	; (800af28 <StreamVToCLI+0x7c>)
 800aec0:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800aec2:	1e4b      	subs	r3, r1, #1
 800aec4:	3303      	adds	r3, #3
 800aec6:	d909      	bls.n	800aedc <StreamVToCLI+0x30>
	if (global_timeout > 0)
 800aec8:	4b15      	ldr	r3, [pc, #84]	; (800af20 <StreamVToCLI+0x74>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <StreamVToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800aed0:	4b16      	ldr	r3, [pc, #88]	; (800af2c <StreamVToCLI+0x80>)
 800aed2:	2201      	movs	r2, #1
 800aed4:	701a      	strb	r2, [r3, #0]
}
 800aed6:	2000      	movs	r0, #0
 800aed8:	b002      	add	sp, #8
 800aeda:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800aedc:	0148      	lsls	r0, r1, #5
 800aede:	1a40      	subs	r0, r0, r1
 800aee0:	0080      	lsls	r0, r0, #2
 800aee2:	1840      	adds	r0, r0, r1
 800aee4:	00c0      	lsls	r0, r0, #3
 800aee6:	21fa      	movs	r1, #250	; 0xfa
 800aee8:	0089      	lsls	r1, r1, #2
 800aeea:	f7f5 f931 	bl	8000150 <__udivsi3>
 800aeee:	0001      	movs	r1, r0
 800aef0:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <StreamVToCLI+0x84>)
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	23ff      	movs	r3, #255	; 0xff
 800aef6:	2200      	movs	r2, #0
 800aef8:	480e      	ldr	r0, [pc, #56]	; (800af34 <StreamVToCLI+0x88>)
 800aefa:	f005 f911 	bl	8010120 <xTimerCreate>
 800aefe:	0004      	movs	r4, r0
 800af00:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <StreamVToCLI+0x8c>)
 800af02:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800af04:	f004 fbba 	bl	800f67c <xTaskGetTickCount>
 800af08:	0002      	movs	r2, r0
 800af0a:	2301      	movs	r3, #1
 800af0c:	425b      	negs	r3, r3
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	2300      	movs	r3, #0
 800af12:	2101      	movs	r1, #1
 800af14:	0020      	movs	r0, r4
 800af16:	f005 f921 	bl	801015c <xTimerGenericCommand>
 800af1a:	e7d5      	b.n	800aec8 <StreamVToCLI+0x1c>
 800af1c:	20006580 	.word	0x20006580
 800af20:	200065fc 	.word	0x200065fc
 800af24:	200063d4 	.word	0x200063d4
 800af28:	200000a4 	.word	0x200000a4
 800af2c:	20000ff0 	.word	0x20000ff0
 800af30:	0800a27d 	.word	0x0800a27d
 800af34:	0801b100 	.word	0x0801b100
 800af38:	20000ff8 	.word	0x20000ff8

0800af3c <StreamAToCLI>:
{
 800af3c:	b510      	push	{r4, lr}
 800af3e:	b082      	sub	sp, #8
	global_period=Period;
 800af40:	4b1b      	ldr	r3, [pc, #108]	; (800afb0 <StreamAToCLI+0x74>)
 800af42:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800af44:	4b1b      	ldr	r3, [pc, #108]	; (800afb4 <StreamAToCLI+0x78>)
 800af46:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800af48:	4b1b      	ldr	r3, [pc, #108]	; (800afb8 <StreamAToCLI+0x7c>)
 800af4a:	2201      	movs	r2, #1
 800af4c:	701a      	strb	r2, [r3, #0]
	unit=Amp;
 800af4e:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <StreamAToCLI+0x80>)
 800af50:	3201      	adds	r2, #1
 800af52:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800af54:	1e4b      	subs	r3, r1, #1
 800af56:	3303      	adds	r3, #3
 800af58:	d909      	bls.n	800af6e <StreamAToCLI+0x32>
	if (global_timeout > 0)
 800af5a:	4b16      	ldr	r3, [pc, #88]	; (800afb4 <StreamAToCLI+0x78>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d002      	beq.n	800af68 <StreamAToCLI+0x2c>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800af62:	4b17      	ldr	r3, [pc, #92]	; (800afc0 <StreamAToCLI+0x84>)
 800af64:	2201      	movs	r2, #1
 800af66:	701a      	strb	r2, [r3, #0]
}
 800af68:	2000      	movs	r0, #0
 800af6a:	b002      	add	sp, #8
 800af6c:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800af6e:	0148      	lsls	r0, r1, #5
 800af70:	1a40      	subs	r0, r0, r1
 800af72:	0080      	lsls	r0, r0, #2
 800af74:	1840      	adds	r0, r0, r1
 800af76:	00c0      	lsls	r0, r0, #3
 800af78:	21fa      	movs	r1, #250	; 0xfa
 800af7a:	0089      	lsls	r1, r1, #2
 800af7c:	f7f5 f8e8 	bl	8000150 <__udivsi3>
 800af80:	0001      	movs	r1, r0
 800af82:	4b10      	ldr	r3, [pc, #64]	; (800afc4 <StreamAToCLI+0x88>)
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	23ff      	movs	r3, #255	; 0xff
 800af88:	2200      	movs	r2, #0
 800af8a:	480f      	ldr	r0, [pc, #60]	; (800afc8 <StreamAToCLI+0x8c>)
 800af8c:	f005 f8c8 	bl	8010120 <xTimerCreate>
 800af90:	0004      	movs	r4, r0
 800af92:	4b0e      	ldr	r3, [pc, #56]	; (800afcc <StreamAToCLI+0x90>)
 800af94:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800af96:	f004 fb71 	bl	800f67c <xTaskGetTickCount>
 800af9a:	0002      	movs	r2, r0
 800af9c:	2301      	movs	r3, #1
 800af9e:	425b      	negs	r3, r3
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	2300      	movs	r3, #0
 800afa4:	2101      	movs	r1, #1
 800afa6:	0020      	movs	r0, r4
 800afa8:	f005 f8d8 	bl	801015c <xTimerGenericCommand>
 800afac:	e7d5      	b.n	800af5a <StreamAToCLI+0x1e>
 800afae:	46c0      	nop			; (mov r8, r8)
 800afb0:	20006580 	.word	0x20006580
 800afb4:	200065fc 	.word	0x200065fc
 800afb8:	200063d4 	.word	0x200063d4
 800afbc:	200000a4 	.word	0x200000a4
 800afc0:	20000ff0 	.word	0x20000ff0
 800afc4:	0800a27d 	.word	0x0800a27d
 800afc8:	0801b100 	.word	0x0801b100
 800afcc:	20000ff8 	.word	0x20000ff8

0800afd0 <demoCommand>:
	return pdFALSE;
}
/*-----------------------------------------------------------*/

portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800afd0:	b530      	push	{r4, r5, lr}
 800afd2:	b083      	sub	sp, #12
 800afd4:	0005      	movs	r5, r0



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800afd6:	222d      	movs	r2, #45	; 0x2d
 800afd8:	491e      	ldr	r1, [pc, #120]	; (800b054 <demoCommand+0x84>)
 800afda:	f008 fe11 	bl	8013c00 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800afde:	0028      	movs	r0, r5
 800afe0:	f7f5 f89a 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800afe4:	b282      	uxth	r2, r0
 800afe6:	4b1c      	ldr	r3, [pc, #112]	; (800b058 <demoCommand+0x88>)
 800afe8:	7818      	ldrb	r0, [r3, #0]
 800afea:	2301      	movs	r3, #1
 800afec:	425b      	negs	r3, r3
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	3333      	adds	r3, #51	; 0x33
 800aff2:	0029      	movs	r1, r5
 800aff4:	f003 fa82 	bl	800e4fc <writePxMutex>
		switch (unit) {
 800aff8:	4b18      	ldr	r3, [pc, #96]	; (800b05c <demoCommand+0x8c>)
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d007      	beq.n	800b010 <demoCommand+0x40>
 800b000:	2b02      	cmp	r3, #2
 800b002:	d020      	beq.n	800b046 <demoCommand+0x76>
			break;
		case Amp:
			StreamAToCLI(500, 10000);
			break;
		default:
			StreamVToCLI(500, 10000);
 800b004:	20fa      	movs	r0, #250	; 0xfa
 800b006:	4916      	ldr	r1, [pc, #88]	; (800b060 <demoCommand+0x90>)
 800b008:	0040      	lsls	r0, r0, #1
 800b00a:	f7ff ff4f 	bl	800aeac <StreamVToCLI>
 800b00e:	e004      	b.n	800b01a <demoCommand+0x4a>
			StreamVToCLI(500, 10000);
 800b010:	20fa      	movs	r0, #250	; 0xfa
 800b012:	4913      	ldr	r1, [pc, #76]	; (800b060 <demoCommand+0x90>)
 800b014:	0040      	lsls	r0, r0, #1
 800b016:	f7ff ff49 	bl	800aeac <StreamVToCLI>
		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800b01a:	4b12      	ldr	r3, [pc, #72]	; (800b064 <demoCommand+0x94>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d006      	beq.n	800b030 <demoCommand+0x60>
 800b022:	4c10      	ldr	r4, [pc, #64]	; (800b064 <demoCommand+0x94>)
			Delay_ms(1);
 800b024:	2001      	movs	r0, #1
 800b026:	f005 fb8f 	bl	8010748 <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800b02a:	7823      	ldrb	r3, [r4, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1f9      	bne.n	800b024 <demoCommand+0x54>
	if (result != H2AR3_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800b030:	0028      	movs	r0, r5
 800b032:	f7f5 f871 	bl	8000118 <strlen>
 800b036:	0002      	movs	r2, r0
 800b038:	2100      	movs	r1, #0
 800b03a:	0028      	movs	r0, r5
 800b03c:	f008 fde9 	bl	8013c12 <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800b040:	2000      	movs	r0, #0
 800b042:	b003      	add	sp, #12
 800b044:	bd30      	pop	{r4, r5, pc}
			StreamAToCLI(500, 10000);
 800b046:	20fa      	movs	r0, #250	; 0xfa
 800b048:	4905      	ldr	r1, [pc, #20]	; (800b060 <demoCommand+0x90>)
 800b04a:	0040      	lsls	r0, r0, #1
 800b04c:	f7ff ff76 	bl	800af3c <StreamAToCLI>
			break;
 800b050:	e7e3      	b.n	800b01a <demoCommand+0x4a>
 800b052:	46c0      	nop			; (mov r8, r8)
 800b054:	0801b114 	.word	0x0801b114
 800b058:	200002b8 	.word	0x200002b8
 800b05c:	200000a4 	.word	0x200000a4
 800b060:	00002710 	.word	0x00002710
 800b064:	20000ff0 	.word	0x20000ff0

0800b068 <streamCommand>:
{
 800b068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b06a:	46ce      	mov	lr, r9
 800b06c:	4647      	mov	r7, r8
 800b06e:	b580      	push	{r7, lr}
 800b070:	b085      	sub	sp, #20
 800b072:	0005      	movs	r5, r0
 800b074:	4688      	mov	r8, r1
 800b076:	0014      	movs	r4, r2
	*pcWriteBuffer = '\0';
 800b078:	2300      	movs	r3, #0
 800b07a:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800b07c:	9300      	str	r3, [sp, #0]
	portBASE_TYPE timeoutStrLen = 0;
 800b07e:	9301      	str	r3, [sp, #4]
	portBASE_TYPE portStrLen = 0;
 800b080:	9302      	str	r3, [sp, #8]
	portBASE_TYPE modStrLen = 0;
 800b082:	9303      	str	r3, [sp, #12]
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &periodStrLen);
 800b084:	466a      	mov	r2, sp
 800b086:	2101      	movs	r1, #1
 800b088:	0020      	movs	r0, r4
 800b08a:	f003 fd01 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800b08e:	0006      	movs	r6, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &timeoutStrLen);
 800b090:	aa01      	add	r2, sp, #4
 800b092:	2102      	movs	r1, #2
 800b094:	0020      	movs	r0, r4
 800b096:	f003 fcfb 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800b09a:	0007      	movs	r7, r0
	if ((pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800b09c:	2e00      	cmp	r6, #0
 800b09e:	d034      	beq.n	800b10a <streamCommand+0xa2>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d032      	beq.n	800b10a <streamCommand+0xa2>
	*pPeriod = atoi(pPeriodMSStr);
 800b0a4:	0030      	movs	r0, r6
 800b0a6:	f008 fd58 	bl	8013b5a <atoi>
 800b0aa:	4681      	mov	r9, r0
	*pTimeout = atoi(pTimeoutMSStr);
 800b0ac:	0038      	movs	r0, r7
 800b0ae:	f008 fd54 	bl	8013b5a <atoi>
 800b0b2:	0007      	movs	r7, r0
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &portStrLen);
 800b0b4:	aa02      	add	r2, sp, #8
 800b0b6:	2103      	movs	r1, #3
 800b0b8:	0020      	movs	r0, r4
 800b0ba:	f003 fce9 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800b0be:	0006      	movs	r6, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &modStrLen);
 800b0c0:	aa03      	add	r2, sp, #12
 800b0c2:	2104      	movs	r1, #4
 800b0c4:	0020      	movs	r0, r4
 800b0c6:	f003 fce3 	bl	800ea90 <FreeRTOS_CLIGetParameter>
 800b0ca:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800b0cc:	d01b      	beq.n	800b106 <streamCommand+0x9e>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800b0ce:	2e00      	cmp	r6, #0
 800b0d0:	d01b      	beq.n	800b10a <streamCommand+0xa2>
	*pPort = atoi(pPortStr);
 800b0d2:	0030      	movs	r0, r6
 800b0d4:	f008 fd41 	bl	8013b5a <atoi>
 800b0d8:	b2c6      	uxtb	r6, r0
	*pModule = atoi(pModStr);
 800b0da:	0020      	movs	r0, r4
 800b0dc:	f008 fd3d 	bl	8013b5a <atoi>
 800b0e0:	b2c1      	uxtb	r1, r0
            if(unit == Volt)
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <streamCommand+0xf0>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
	*pPortOrCLI = false;
 800b0e6:	2200      	movs	r2, #0
            if(unit == Volt)
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d014      	beq.n	800b116 <streamCommand+0xae>
            else if(unit == Amp)
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d018      	beq.n	800b122 <streamCommand+0xba>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800b0f0:	4a1a      	ldr	r2, [pc, #104]	; (800b15c <streamCommand+0xf4>)
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	0028      	movs	r0, r5
 800b0f6:	f009 fb11 	bl	801471c <sniprintf>
}
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	b005      	add	sp, #20
 800b0fe:	bcc0      	pop	{r6, r7}
 800b100:	46b9      	mov	r9, r7
 800b102:	46b0      	mov	r8, r6
 800b104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((pModStr == NULL) && (pPortStr == NULL))
 800b106:	2e00      	cmp	r6, #0
 800b108:	d018      	beq.n	800b13c <streamCommand+0xd4>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800b10a:	4a15      	ldr	r2, [pc, #84]	; (800b160 <streamCommand+0xf8>)
 800b10c:	4641      	mov	r1, r8
 800b10e:	0028      	movs	r0, r5
 800b110:	f009 fb04 	bl	801471c <sniprintf>
		return pdFALSE;
 800b114:	e7f1      	b.n	800b0fa <streamCommand+0x92>
				StreamVToPort(port, module, period, timeout);
 800b116:	003b      	movs	r3, r7
 800b118:	464a      	mov	r2, r9
 800b11a:	0030      	movs	r0, r6
 800b11c:	f7ff fd8c 	bl	800ac38 <StreamVToPort>
 800b120:	e7e6      	b.n	800b0f0 <streamCommand+0x88>
    		if (portOrCLI) {
 800b122:	2a00      	cmp	r2, #0
 800b124:	d004      	beq.n	800b130 <streamCommand+0xc8>
    			StreamAToCLI(period, timeout);
 800b126:	0039      	movs	r1, r7
 800b128:	4648      	mov	r0, r9
 800b12a:	f7ff ff07 	bl	800af3c <StreamAToCLI>
 800b12e:	e7df      	b.n	800b0f0 <streamCommand+0x88>
    			StreamAToPort(port, module, period, timeout);
 800b130:	003b      	movs	r3, r7
 800b132:	464a      	mov	r2, r9
 800b134:	0030      	movs	r0, r6
 800b136:	f7ff fdc7 	bl	800acc8 <StreamAToPort>
 800b13a:	e7d9      	b.n	800b0f0 <streamCommand+0x88>
            if(unit == Volt)
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <streamCommand+0xf0>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d104      	bne.n	800b14e <streamCommand+0xe6>
				StreamVToCLI(period, timeout);
 800b144:	0039      	movs	r1, r7
 800b146:	4648      	mov	r0, r9
 800b148:	f7ff feb0 	bl	800aeac <StreamVToCLI>
 800b14c:	e7d0      	b.n	800b0f0 <streamCommand+0x88>
	*pPortOrCLI = true;
 800b14e:	2201      	movs	r2, #1
	uint8_t module = 0;
 800b150:	2100      	movs	r1, #0
	uint8_t port = 0;
 800b152:	000e      	movs	r6, r1
 800b154:	e7ca      	b.n	800b0ec <streamCommand+0x84>
 800b156:	46c0      	nop			; (mov r8, r8)
 800b158:	200000a4 	.word	0x200000a4
 800b15c:	0801a80c 	.word	0x0801a80c
 800b160:	0801b144 	.word	0x0801b144

0800b164 <ADC_Select_CH7>:
 Description   : source file Contains Peripheral ADC setup .
 */
/* Includes ------------------------------------------------------------------*/
#include <H2AR3_adc.h>

void ADC_Select_CH7(void) {
 800b164:	b500      	push	{lr}
 800b166:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800b168:	2307      	movs	r3, #7
 800b16a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	015b      	lsls	r3, r3, #5
 800b170:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800b172:	2304      	movs	r3, #4
 800b174:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b176:	a901      	add	r1, sp, #4
 800b178:	4802      	ldr	r0, [pc, #8]	; (800b184 <ADC_Select_CH7+0x20>)
 800b17a:	f005 fd65 	bl	8010c48 <HAL_ADC_ConfigChannel>

	}

}
 800b17e:	b005      	add	sp, #20
 800b180:	bd00      	pop	{pc}
 800b182:	46c0      	nop			; (mov r8, r8)
 800b184:	20006638 	.word	0x20006638

0800b188 <ADC_Deselect_CH7>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH7(void) {
 800b188:	b500      	push	{lr}
 800b18a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800b18c:	2307      	movs	r3, #7
 800b18e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800b190:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <ADC_Deselect_CH7+0x1c>)
 800b192:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800b194:	2304      	movs	r3, #4
 800b196:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b198:	a901      	add	r1, sp, #4
 800b19a:	4803      	ldr	r0, [pc, #12]	; (800b1a8 <ADC_Deselect_CH7+0x20>)
 800b19c:	f005 fd54 	bl	8010c48 <HAL_ADC_ConfigChannel>

	}
}
 800b1a0:	b005      	add	sp, #20
 800b1a2:	bd00      	pop	{pc}
 800b1a4:	00001001 	.word	0x00001001
 800b1a8:	20006638 	.word	0x20006638

0800b1ac <ADC_Select_CH9>:


void ADC_Select_CH9(void) {
 800b1ac:	b500      	push	{lr}
 800b1ae:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800b1b0:	2309      	movs	r3, #9
 800b1b2:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b1b4:	2380      	movs	r3, #128	; 0x80
 800b1b6:	015b      	lsls	r3, r3, #5
 800b1b8:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800b1ba:	2304      	movs	r3, #4
 800b1bc:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b1be:	a901      	add	r1, sp, #4
 800b1c0:	4802      	ldr	r0, [pc, #8]	; (800b1cc <ADC_Select_CH9+0x20>)
 800b1c2:	f005 fd41 	bl	8010c48 <HAL_ADC_ConfigChannel>

	}

}
 800b1c6:	b005      	add	sp, #20
 800b1c8:	bd00      	pop	{pc}
 800b1ca:	46c0      	nop			; (mov r8, r8)
 800b1cc:	20006638 	.word	0x20006638

0800b1d0 <ADC_Deselect_CH9>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH9(void) {
 800b1d0:	b500      	push	{lr}
 800b1d2:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800b1d4:	2309      	movs	r3, #9
 800b1d6:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <ADC_Deselect_CH9+0x1c>)
 800b1da:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800b1dc:	2304      	movs	r3, #4
 800b1de:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800b1e0:	a901      	add	r1, sp, #4
 800b1e2:	4803      	ldr	r0, [pc, #12]	; (800b1f0 <ADC_Deselect_CH9+0x20>)
 800b1e4:	f005 fd30 	bl	8010c48 <HAL_ADC_ConfigChannel>

	}
}
 800b1e8:	b005      	add	sp, #20
 800b1ea:	bd00      	pop	{pc}
 800b1ec:	00001001 	.word	0x00001001
 800b1f0:	20006638 	.word	0x20006638

0800b1f4 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b1f4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b1f6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b1fc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b1fe:	2280      	movs	r2, #128	; 0x80
 800b200:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b202:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b204:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b206:	3320      	adds	r3, #32
 800b208:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b20a:	2380      	movs	r3, #128	; 0x80
 800b20c:	019b      	lsls	r3, r3, #6
 800b20e:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b210:	f005 ff64 	bl	80110dc <HAL_DMA_Init>
}
 800b214:	bd10      	pop	{r4, pc}

0800b216 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b216:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b218:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b21a:	2310      	movs	r3, #16
 800b21c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b21e:	2300      	movs	r3, #0
 800b220:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b222:	2280      	movs	r2, #128	; 0x80
 800b224:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b226:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b228:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b22a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b22c:	2380      	movs	r3, #128	; 0x80
 800b22e:	019b      	lsls	r3, r3, #6
 800b230:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b232:	f005 ff53 	bl	80110dc <HAL_DMA_Init>
}
 800b236:	bd10      	pop	{r4, pc}

0800b238 <DMA_Init>:
{
 800b238:	b510      	push	{r4, lr}
 800b23a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800b23c:	4b18      	ldr	r3, [pc, #96]	; (800b2a0 <DMA_Init+0x68>)
 800b23e:	6959      	ldr	r1, [r3, #20]
 800b240:	2201      	movs	r2, #1
 800b242:	4311      	orrs	r1, r2
 800b244:	6159      	str	r1, [r3, #20]
 800b246:	6959      	ldr	r1, [r3, #20]
 800b248:	400a      	ands	r2, r1
 800b24a:	9200      	str	r2, [sp, #0]
 800b24c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b24e:	6959      	ldr	r1, [r3, #20]
 800b250:	2202      	movs	r2, #2
 800b252:	4311      	orrs	r1, r2
 800b254:	6159      	str	r1, [r3, #20]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	401a      	ands	r2, r3
 800b25a:	9201      	str	r2, [sp, #4]
 800b25c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800b25e:	4c11      	ldr	r4, [pc, #68]	; (800b2a4 <DMA_Init+0x6c>)
 800b260:	4911      	ldr	r1, [pc, #68]	; (800b2a8 <DMA_Init+0x70>)
 800b262:	0020      	movs	r0, r4
 800b264:	f7ff ffc6 	bl	800b1f4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800b268:	0020      	movs	r0, r4
 800b26a:	3038      	adds	r0, #56	; 0x38
 800b26c:	490f      	ldr	r1, [pc, #60]	; (800b2ac <DMA_Init+0x74>)
 800b26e:	f7ff ffc1 	bl	800b1f4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800b272:	0020      	movs	r0, r4
 800b274:	3070      	adds	r0, #112	; 0x70
 800b276:	490e      	ldr	r1, [pc, #56]	; (800b2b0 <DMA_Init+0x78>)
 800b278:	f7ff ffbc 	bl	800b1f4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b27c:	4c0d      	ldr	r4, [pc, #52]	; (800b2b4 <DMA_Init+0x7c>)
 800b27e:	490e      	ldr	r1, [pc, #56]	; (800b2b8 <DMA_Init+0x80>)
 800b280:	0020      	movs	r0, r4
 800b282:	f7ff ffc8 	bl	800b216 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b286:	0020      	movs	r0, r4
 800b288:	3038      	adds	r0, #56	; 0x38
 800b28a:	490c      	ldr	r1, [pc, #48]	; (800b2bc <DMA_Init+0x84>)
 800b28c:	f7ff ffc3 	bl	800b216 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b290:	0020      	movs	r0, r4
 800b292:	3070      	adds	r0, #112	; 0x70
 800b294:	490a      	ldr	r1, [pc, #40]	; (800b2c0 <DMA_Init+0x88>)
 800b296:	f7ff ffbe 	bl	800b216 <DMA_MSG_TX_CH_Init>
}
 800b29a:	b002      	add	sp, #8
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	40021000 	.word	0x40021000
 800b2a4:	20000ffc 	.word	0x20000ffc
 800b2a8:	40020008 	.word	0x40020008
 800b2ac:	40020030 	.word	0x40020030
 800b2b0:	40020058 	.word	0x40020058
 800b2b4:	2000114c 	.word	0x2000114c
 800b2b8:	4002001c 	.word	0x4002001c
 800b2bc:	40020044 	.word	0x40020044
 800b2c0:	40020080 	.word	0x40020080

0800b2c4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b2c4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b2c6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b2cc:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b2ce:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b2d0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b2d2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b2d4:	3320      	adds	r3, #32
 800b2d6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	015b      	lsls	r3, r3, #5
 800b2dc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b2de:	f005 fefd 	bl	80110dc <HAL_DMA_Init>
}
 800b2e2:	bd10      	pop	{r4, pc}

0800b2e4 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800b2e4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800b2e6:	1e44      	subs	r4, r0, #1
 800b2e8:	00e5      	lsls	r5, r4, #3
 800b2ea:	1b28      	subs	r0, r5, r4
 800b2ec:	00c0      	lsls	r0, r0, #3
 800b2ee:	4e07      	ldr	r6, [pc, #28]	; (800b30c <StopStreamDMA+0x28>)
 800b2f0:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800b2f2:	f005 ff52 	bl	801119a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800b2f6:	1b2d      	subs	r5, r5, r4
 800b2f8:	00ed      	lsls	r5, r5, #3
 800b2fa:	59aa      	ldr	r2, [r5, r6]
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800b300:	00a4      	lsls	r4, r4, #2
 800b302:	4a03      	ldr	r2, [pc, #12]	; (800b310 <StopStreamDMA+0x2c>)
 800b304:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800b306:	4a03      	ldr	r2, [pc, #12]	; (800b314 <StopStreamDMA+0x30>)
 800b308:	50a3      	str	r3, [r4, r2]

}
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	200011f4 	.word	0x200011f4
 800b310:	20000cc8 	.word	0x20000cc8
 800b314:	20000ce0 	.word	0x20000ce0

0800b318 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800b318:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800b31a:	1e45      	subs	r5, r0, #1
 800b31c:	00ec      	lsls	r4, r5, #3
 800b31e:	1b60      	subs	r0, r4, r5
 800b320:	00c0      	lsls	r0, r0, #3
 800b322:	4e05      	ldr	r6, [pc, #20]	; (800b338 <StopMsgDMA+0x20>)
 800b324:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800b326:	f005 ff38 	bl	801119a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800b32a:	1b64      	subs	r4, r4, r5
 800b32c:	00e4      	lsls	r4, r4, #3
 800b32e:	59a3      	ldr	r3, [r4, r6]
 800b330:	2200      	movs	r2, #0
 800b332:	605a      	str	r2, [r3, #4]
}
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	20000ffc 	.word	0x20000ffc

0800b33c <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800b33c:	b510      	push	{r4, lr}
 800b33e:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800b340:	f7ff ffea 	bl	800b318 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800b344:	3c01      	subs	r4, #1
 800b346:	00e0      	lsls	r0, r4, #3
 800b348:	1b02      	subs	r2, r0, r4
 800b34a:	00d2      	lsls	r2, r2, #3
 800b34c:	4903      	ldr	r1, [pc, #12]	; (800b35c <SwitchMsgDMAToStream+0x20>)
 800b34e:	5851      	ldr	r1, [r2, r1]
 800b350:	4b03      	ldr	r3, [pc, #12]	; (800b360 <SwitchMsgDMAToStream+0x24>)
 800b352:	18d0      	adds	r0, r2, r3
 800b354:	f7ff ffb6 	bl	800b2c4 <DMA_STREAM_CH_Init>
}
 800b358:	bd10      	pop	{r4, pc}
 800b35a:	46c0      	nop			; (mov r8, r8)
 800b35c:	20000ffc 	.word	0x20000ffc
 800b360:	200011f4 	.word	0x200011f4

0800b364 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b364:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b366:	6803      	ldr	r3, [r0, #0]
 800b368:	4821      	ldr	r0, [pc, #132]	; (800b3f0 <SetupDMAInterrupts+0x8c>)
 800b36a:	4283      	cmp	r3, r0
 800b36c:	d037      	beq.n	800b3de <SetupDMAInterrupts+0x7a>
 800b36e:	d90e      	bls.n	800b38e <SetupDMAInterrupts+0x2a>
 800b370:	4820      	ldr	r0, [pc, #128]	; (800b3f4 <SetupDMAInterrupts+0x90>)
 800b372:	4283      	cmp	r3, r0
 800b374:	d033      	beq.n	800b3de <SetupDMAInterrupts+0x7a>
 800b376:	d919      	bls.n	800b3ac <SetupDMAInterrupts+0x48>
 800b378:	481f      	ldr	r0, [pc, #124]	; (800b3f8 <SetupDMAInterrupts+0x94>)
 800b37a:	4283      	cmp	r3, r0
 800b37c:	d024      	beq.n	800b3c8 <SetupDMAInterrupts+0x64>
 800b37e:	d92b      	bls.n	800b3d8 <SetupDMAInterrupts+0x74>
 800b380:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <SetupDMAInterrupts+0x98>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d020      	beq.n	800b3c8 <SetupDMAInterrupts+0x64>
 800b386:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <SetupDMAInterrupts+0x9c>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d01d      	beq.n	800b3c8 <SetupDMAInterrupts+0x64>
 800b38c:	e00d      	b.n	800b3aa <SetupDMAInterrupts+0x46>
 800b38e:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <SetupDMAInterrupts+0xa0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d107      	bne.n	800b3a4 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b394:	2200      	movs	r2, #0
 800b396:	2009      	movs	r0, #9
 800b398:	f005 fcfa 	bl	8010d90 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b39c:	2009      	movs	r0, #9
 800b39e:	f005 fd29 	bl	8010df4 <HAL_NVIC_EnableIRQ>
			break;
 800b3a2:	e002      	b.n	800b3aa <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800b3a4:	4a18      	ldr	r2, [pc, #96]	; (800b408 <SetupDMAInterrupts+0xa4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d019      	beq.n	800b3de <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800b3aa:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b3ac:	4817      	ldr	r0, [pc, #92]	; (800b40c <SetupDMAInterrupts+0xa8>)
 800b3ae:	4283      	cmp	r3, r0
 800b3b0:	d00a      	beq.n	800b3c8 <SetupDMAInterrupts+0x64>
 800b3b2:	d903      	bls.n	800b3bc <SetupDMAInterrupts+0x58>
 800b3b4:	4a16      	ldr	r2, [pc, #88]	; (800b410 <SetupDMAInterrupts+0xac>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d006      	beq.n	800b3c8 <SetupDMAInterrupts+0x64>
 800b3ba:	e7f6      	b.n	800b3aa <SetupDMAInterrupts+0x46>
 800b3bc:	4a15      	ldr	r2, [pc, #84]	; (800b414 <SetupDMAInterrupts+0xb0>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d002      	beq.n	800b3c8 <SetupDMAInterrupts+0x64>
 800b3c2:	4a15      	ldr	r2, [pc, #84]	; (800b418 <SetupDMAInterrupts+0xb4>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d1f0      	bne.n	800b3aa <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	200b      	movs	r0, #11
 800b3cc:	f005 fce0 	bl	8010d90 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b3d0:	200b      	movs	r0, #11
 800b3d2:	f005 fd0f 	bl	8010df4 <HAL_NVIC_EnableIRQ>
}
 800b3d6:	e7e8      	b.n	800b3aa <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800b3d8:	4a10      	ldr	r2, [pc, #64]	; (800b41c <SetupDMAInterrupts+0xb8>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d1e5      	bne.n	800b3aa <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b3de:	2200      	movs	r2, #0
 800b3e0:	200a      	movs	r0, #10
 800b3e2:	f005 fcd5 	bl	8010d90 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b3e6:	200a      	movs	r0, #10
 800b3e8:	f005 fd04 	bl	8010df4 <HAL_NVIC_EnableIRQ>
			break;
 800b3ec:	e7dd      	b.n	800b3aa <SetupDMAInterrupts+0x46>
 800b3ee:	46c0      	nop			; (mov r8, r8)
 800b3f0:	40020030 	.word	0x40020030
 800b3f4:	40020408 	.word	0x40020408
 800b3f8:	40020430 	.word	0x40020430
 800b3fc:	40020444 	.word	0x40020444
 800b400:	40020458 	.word	0x40020458
 800b404:	40020008 	.word	0x40020008
 800b408:	4002001c 	.word	0x4002001c
 800b40c:	4002006c 	.word	0x4002006c
 800b410:	40020080 	.word	0x40020080
 800b414:	40020044 	.word	0x40020044
 800b418:	40020058 	.word	0x40020058
 800b41c:	4002041c 	.word	0x4002041c

0800b420 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b420:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b422:	6803      	ldr	r3, [r0, #0]
 800b424:	491b      	ldr	r1, [pc, #108]	; (800b494 <UnSetupDMAInterrupts+0x74>)
 800b426:	428b      	cmp	r3, r1
 800b428:	d02f      	beq.n	800b48a <UnSetupDMAInterrupts+0x6a>
 800b42a:	d90e      	bls.n	800b44a <UnSetupDMAInterrupts+0x2a>
 800b42c:	491a      	ldr	r1, [pc, #104]	; (800b498 <UnSetupDMAInterrupts+0x78>)
 800b42e:	428b      	cmp	r3, r1
 800b430:	d02b      	beq.n	800b48a <UnSetupDMAInterrupts+0x6a>
 800b432:	d915      	bls.n	800b460 <UnSetupDMAInterrupts+0x40>
 800b434:	4919      	ldr	r1, [pc, #100]	; (800b49c <UnSetupDMAInterrupts+0x7c>)
 800b436:	428b      	cmp	r3, r1
 800b438:	d020      	beq.n	800b47c <UnSetupDMAInterrupts+0x5c>
 800b43a:	d923      	bls.n	800b484 <UnSetupDMAInterrupts+0x64>
 800b43c:	4a18      	ldr	r2, [pc, #96]	; (800b4a0 <UnSetupDMAInterrupts+0x80>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d01c      	beq.n	800b47c <UnSetupDMAInterrupts+0x5c>
 800b442:	4a18      	ldr	r2, [pc, #96]	; (800b4a4 <UnSetupDMAInterrupts+0x84>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d019      	beq.n	800b47c <UnSetupDMAInterrupts+0x5c>
 800b448:	e009      	b.n	800b45e <UnSetupDMAInterrupts+0x3e>
 800b44a:	4a17      	ldr	r2, [pc, #92]	; (800b4a8 <UnSetupDMAInterrupts+0x88>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d103      	bne.n	800b458 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b450:	2009      	movs	r0, #9
 800b452:	f005 fcd9 	bl	8010e08 <HAL_NVIC_DisableIRQ>
			break;
 800b456:	e002      	b.n	800b45e <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800b458:	4a14      	ldr	r2, [pc, #80]	; (800b4ac <UnSetupDMAInterrupts+0x8c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d015      	beq.n	800b48a <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800b45e:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b460:	4913      	ldr	r1, [pc, #76]	; (800b4b0 <UnSetupDMAInterrupts+0x90>)
 800b462:	428b      	cmp	r3, r1
 800b464:	d00a      	beq.n	800b47c <UnSetupDMAInterrupts+0x5c>
 800b466:	d903      	bls.n	800b470 <UnSetupDMAInterrupts+0x50>
 800b468:	4a12      	ldr	r2, [pc, #72]	; (800b4b4 <UnSetupDMAInterrupts+0x94>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d006      	beq.n	800b47c <UnSetupDMAInterrupts+0x5c>
 800b46e:	e7f6      	b.n	800b45e <UnSetupDMAInterrupts+0x3e>
 800b470:	4a11      	ldr	r2, [pc, #68]	; (800b4b8 <UnSetupDMAInterrupts+0x98>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d002      	beq.n	800b47c <UnSetupDMAInterrupts+0x5c>
 800b476:	4a11      	ldr	r2, [pc, #68]	; (800b4bc <UnSetupDMAInterrupts+0x9c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d1f0      	bne.n	800b45e <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b47c:	200b      	movs	r0, #11
 800b47e:	f005 fcc3 	bl	8010e08 <HAL_NVIC_DisableIRQ>
}
 800b482:	e7ec      	b.n	800b45e <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800b484:	4a0e      	ldr	r2, [pc, #56]	; (800b4c0 <UnSetupDMAInterrupts+0xa0>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d1e9      	bne.n	800b45e <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b48a:	200a      	movs	r0, #10
 800b48c:	f005 fcbc 	bl	8010e08 <HAL_NVIC_DisableIRQ>
			break;
 800b490:	e7e5      	b.n	800b45e <UnSetupDMAInterrupts+0x3e>
 800b492:	46c0      	nop			; (mov r8, r8)
 800b494:	40020030 	.word	0x40020030
 800b498:	40020408 	.word	0x40020408
 800b49c:	40020430 	.word	0x40020430
 800b4a0:	40020444 	.word	0x40020444
 800b4a4:	40020458 	.word	0x40020458
 800b4a8:	40020008 	.word	0x40020008
 800b4ac:	4002001c 	.word	0x4002001c
 800b4b0:	4002006c 	.word	0x4002006c
 800b4b4:	40020080 	.word	0x40020080
 800b4b8:	40020044 	.word	0x40020044
 800b4bc:	40020058 	.word	0x40020058
 800b4c0:	4002041c 	.word	0x4002041c

0800b4c4 <DMA_MSG_TX_UnSetup>:
{	
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b4c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b4ca:	f7ff ffa9 	bl	800b420 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b4ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b4d4:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b4d6:	bd10      	pop	{r4, pc}

0800b4d8 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b4d8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b4da:	6803      	ldr	r3, [r0, #0]
 800b4dc:	4ac3      	ldr	r2, [pc, #780]	; (800b7ec <RemapAndLinkDMAtoUARTRx+0x314>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d03e      	beq.n	800b560 <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b4e2:	4ac3      	ldr	r2, [pc, #780]	; (800b7f0 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d100      	bne.n	800b4ea <RemapAndLinkDMAtoUARTRx+0x12>
 800b4e8:	e096      	b.n	800b618 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b4ea:	4ac2      	ldr	r2, [pc, #776]	; (800b7f4 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d100      	bne.n	800b4f2 <RemapAndLinkDMAtoUARTRx+0x1a>
 800b4f0:	e0eb      	b.n	800b6ca <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b4f2:	4ac1      	ldr	r2, [pc, #772]	; (800b7f8 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d100      	bne.n	800b4fa <RemapAndLinkDMAtoUARTRx+0x22>
 800b4f8:	e141      	b.n	800b77e <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b4fa:	4ac0      	ldr	r2, [pc, #768]	; (800b7fc <RemapAndLinkDMAtoUARTRx+0x324>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d100      	bne.n	800b502 <RemapAndLinkDMAtoUARTRx+0x2a>
 800b500:	e1bd      	b.n	800b87e <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b502:	4abf      	ldr	r2, [pc, #764]	; (800b800 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d100      	bne.n	800b50a <RemapAndLinkDMAtoUARTRx+0x32>
 800b508:	e213      	b.n	800b932 <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b50a:	4abe      	ldr	r2, [pc, #760]	; (800b804 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d100      	bne.n	800b512 <RemapAndLinkDMAtoUARTRx+0x3a>
 800b510:	e269      	b.n	800b9e6 <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b512:	4abd      	ldr	r2, [pc, #756]	; (800b808 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d136      	bne.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
 800b518:	680b      	ldr	r3, [r1, #0]
 800b51a:	4abc      	ldr	r2, [pc, #752]	; (800b80c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d100      	bne.n	800b522 <RemapAndLinkDMAtoUARTRx+0x4a>
 800b520:	e2bb      	b.n	800ba9a <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b522:	4abb      	ldr	r2, [pc, #748]	; (800b810 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d100      	bne.n	800b52a <RemapAndLinkDMAtoUARTRx+0x52>
 800b528:	e2c1      	b.n	800baae <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b52a:	4aba      	ldr	r2, [pc, #744]	; (800b814 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d100      	bne.n	800b532 <RemapAndLinkDMAtoUARTRx+0x5a>
 800b530:	e2c9      	b.n	800bac6 <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b532:	4ab9      	ldr	r2, [pc, #740]	; (800b818 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d100      	bne.n	800b53a <RemapAndLinkDMAtoUARTRx+0x62>
 800b538:	e2d1      	b.n	800bade <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b53a:	4ab8      	ldr	r2, [pc, #736]	; (800b81c <RemapAndLinkDMAtoUARTRx+0x344>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d100      	bne.n	800b542 <RemapAndLinkDMAtoUARTRx+0x6a>
 800b540:	e2d9      	b.n	800baf6 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b542:	4ab7      	ldr	r2, [pc, #732]	; (800b820 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d11e      	bne.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b548:	4ab6      	ldr	r2, [pc, #728]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b54a:	23a8      	movs	r3, #168	; 0xa8
 800b54c:	58d4      	ldr	r4, [r2, r3]
 800b54e:	4db6      	ldr	r5, [pc, #728]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b550:	402c      	ands	r4, r5
 800b552:	50d4      	str	r4, [r2, r3]
 800b554:	58d5      	ldr	r5, [r2, r3]
 800b556:	24f0      	movs	r4, #240	; 0xf0
 800b558:	0124      	lsls	r4, r4, #4
 800b55a:	432c      	orrs	r4, r5
 800b55c:	50d4      	str	r4, [r2, r3]
 800b55e:	e012      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b560:	680b      	ldr	r3, [r1, #0]
 800b562:	4aaa      	ldr	r2, [pc, #680]	; (800b80c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d011      	beq.n	800b58c <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b568:	4aa9      	ldr	r2, [pc, #676]	; (800b810 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d019      	beq.n	800b5a2 <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b56e:	4aa9      	ldr	r2, [pc, #676]	; (800b814 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d022      	beq.n	800b5ba <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b574:	4aa8      	ldr	r2, [pc, #672]	; (800b818 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d02b      	beq.n	800b5d2 <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b57a:	4aa8      	ldr	r2, [pc, #672]	; (800b81c <RemapAndLinkDMAtoUARTRx+0x344>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d034      	beq.n	800b5ea <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b580:	4aa7      	ldr	r2, [pc, #668]	; (800b820 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d03c      	beq.n	800b600 <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b586:	6641      	str	r1, [r0, #100]	; 0x64
 800b588:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b58c:	4aa7      	ldr	r2, [pc, #668]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b58e:	23a8      	movs	r3, #168	; 0xa8
 800b590:	58d4      	ldr	r4, [r2, r3]
 800b592:	250f      	movs	r5, #15
 800b594:	43ac      	bics	r4, r5
 800b596:	50d4      	str	r4, [r2, r3]
 800b598:	58d4      	ldr	r4, [r2, r3]
 800b59a:	3d07      	subs	r5, #7
 800b59c:	432c      	orrs	r4, r5
 800b59e:	50d4      	str	r4, [r2, r3]
 800b5a0:	e7f1      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b5a2:	4aa2      	ldr	r2, [pc, #648]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b5a4:	23a8      	movs	r3, #168	; 0xa8
 800b5a6:	58d4      	ldr	r4, [r2, r3]
 800b5a8:	4d9f      	ldr	r5, [pc, #636]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b5aa:	402c      	ands	r4, r5
 800b5ac:	50d4      	str	r4, [r2, r3]
 800b5ae:	58d5      	ldr	r5, [r2, r3]
 800b5b0:	2480      	movs	r4, #128	; 0x80
 800b5b2:	0124      	lsls	r4, r4, #4
 800b5b4:	432c      	orrs	r4, r5
 800b5b6:	50d4      	str	r4, [r2, r3]
 800b5b8:	e7e5      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b5ba:	4a9c      	ldr	r2, [pc, #624]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b5bc:	23a8      	movs	r3, #168	; 0xa8
 800b5be:	58d4      	ldr	r4, [r2, r3]
 800b5c0:	4d9b      	ldr	r5, [pc, #620]	; (800b830 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b5c2:	402c      	ands	r4, r5
 800b5c4:	50d4      	str	r4, [r2, r3]
 800b5c6:	58d5      	ldr	r5, [r2, r3]
 800b5c8:	2480      	movs	r4, #128	; 0x80
 800b5ca:	0324      	lsls	r4, r4, #12
 800b5cc:	432c      	orrs	r4, r5
 800b5ce:	50d4      	str	r4, [r2, r3]
 800b5d0:	e7d9      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b5d2:	4a96      	ldr	r2, [pc, #600]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b5d4:	23a8      	movs	r3, #168	; 0xa8
 800b5d6:	58d4      	ldr	r4, [r2, r3]
 800b5d8:	4d96      	ldr	r5, [pc, #600]	; (800b834 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b5da:	402c      	ands	r4, r5
 800b5dc:	50d4      	str	r4, [r2, r3]
 800b5de:	58d5      	ldr	r5, [r2, r3]
 800b5e0:	2480      	movs	r4, #128	; 0x80
 800b5e2:	0424      	lsls	r4, r4, #16
 800b5e4:	432c      	orrs	r4, r5
 800b5e6:	50d4      	str	r4, [r2, r3]
 800b5e8:	e7cd      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b5ea:	4a8e      	ldr	r2, [pc, #568]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b5ec:	23a8      	movs	r3, #168	; 0xa8
 800b5ee:	58d4      	ldr	r4, [r2, r3]
 800b5f0:	25f0      	movs	r5, #240	; 0xf0
 800b5f2:	43ac      	bics	r4, r5
 800b5f4:	50d4      	str	r4, [r2, r3]
 800b5f6:	58d4      	ldr	r4, [r2, r3]
 800b5f8:	3d70      	subs	r5, #112	; 0x70
 800b5fa:	432c      	orrs	r4, r5
 800b5fc:	50d4      	str	r4, [r2, r3]
 800b5fe:	e7c2      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b600:	4a88      	ldr	r2, [pc, #544]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b602:	23a8      	movs	r3, #168	; 0xa8
 800b604:	58d4      	ldr	r4, [r2, r3]
 800b606:	4d88      	ldr	r5, [pc, #544]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b608:	402c      	ands	r4, r5
 800b60a:	50d4      	str	r4, [r2, r3]
 800b60c:	58d5      	ldr	r5, [r2, r3]
 800b60e:	2480      	movs	r4, #128	; 0x80
 800b610:	0124      	lsls	r4, r4, #4
 800b612:	432c      	orrs	r4, r5
 800b614:	50d4      	str	r4, [r2, r3]
 800b616:	e7b6      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b618:	680b      	ldr	r3, [r1, #0]
 800b61a:	4a7c      	ldr	r2, [pc, #496]	; (800b80c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d01a      	beq.n	800b656 <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b620:	4a7b      	ldr	r2, [pc, #492]	; (800b810 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d022      	beq.n	800b66c <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b626:	4a7b      	ldr	r2, [pc, #492]	; (800b814 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d02b      	beq.n	800b684 <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b62c:	4a7a      	ldr	r2, [pc, #488]	; (800b818 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d034      	beq.n	800b69c <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b632:	4a7a      	ldr	r2, [pc, #488]	; (800b81c <RemapAndLinkDMAtoUARTRx+0x344>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d03d      	beq.n	800b6b4 <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b638:	4a79      	ldr	r2, [pc, #484]	; (800b820 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d1a3      	bne.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b63e:	4a79      	ldr	r2, [pc, #484]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b640:	23a8      	movs	r3, #168	; 0xa8
 800b642:	58d4      	ldr	r4, [r2, r3]
 800b644:	4d78      	ldr	r5, [pc, #480]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b646:	402c      	ands	r4, r5
 800b648:	50d4      	str	r4, [r2, r3]
 800b64a:	58d5      	ldr	r5, [r2, r3]
 800b64c:	2490      	movs	r4, #144	; 0x90
 800b64e:	0124      	lsls	r4, r4, #4
 800b650:	432c      	orrs	r4, r5
 800b652:	50d4      	str	r4, [r2, r3]
 800b654:	e797      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b656:	4a75      	ldr	r2, [pc, #468]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b658:	23a8      	movs	r3, #168	; 0xa8
 800b65a:	58d4      	ldr	r4, [r2, r3]
 800b65c:	250f      	movs	r5, #15
 800b65e:	43ac      	bics	r4, r5
 800b660:	50d4      	str	r4, [r2, r3]
 800b662:	58d4      	ldr	r4, [r2, r3]
 800b664:	3d06      	subs	r5, #6
 800b666:	432c      	orrs	r4, r5
 800b668:	50d4      	str	r4, [r2, r3]
 800b66a:	e78c      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b66c:	4a6f      	ldr	r2, [pc, #444]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b66e:	23a8      	movs	r3, #168	; 0xa8
 800b670:	58d4      	ldr	r4, [r2, r3]
 800b672:	4d6d      	ldr	r5, [pc, #436]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b674:	402c      	ands	r4, r5
 800b676:	50d4      	str	r4, [r2, r3]
 800b678:	58d5      	ldr	r5, [r2, r3]
 800b67a:	2490      	movs	r4, #144	; 0x90
 800b67c:	0124      	lsls	r4, r4, #4
 800b67e:	432c      	orrs	r4, r5
 800b680:	50d4      	str	r4, [r2, r3]
 800b682:	e780      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b684:	4a69      	ldr	r2, [pc, #420]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b686:	23a8      	movs	r3, #168	; 0xa8
 800b688:	58d4      	ldr	r4, [r2, r3]
 800b68a:	4d69      	ldr	r5, [pc, #420]	; (800b830 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b68c:	402c      	ands	r4, r5
 800b68e:	50d4      	str	r4, [r2, r3]
 800b690:	58d5      	ldr	r5, [r2, r3]
 800b692:	2490      	movs	r4, #144	; 0x90
 800b694:	0324      	lsls	r4, r4, #12
 800b696:	432c      	orrs	r4, r5
 800b698:	50d4      	str	r4, [r2, r3]
 800b69a:	e774      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b69c:	4a63      	ldr	r2, [pc, #396]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b69e:	23a8      	movs	r3, #168	; 0xa8
 800b6a0:	58d4      	ldr	r4, [r2, r3]
 800b6a2:	4d64      	ldr	r5, [pc, #400]	; (800b834 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b6a4:	402c      	ands	r4, r5
 800b6a6:	50d4      	str	r4, [r2, r3]
 800b6a8:	58d5      	ldr	r5, [r2, r3]
 800b6aa:	2490      	movs	r4, #144	; 0x90
 800b6ac:	0424      	lsls	r4, r4, #16
 800b6ae:	432c      	orrs	r4, r5
 800b6b0:	50d4      	str	r4, [r2, r3]
 800b6b2:	e768      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b6b4:	4a5b      	ldr	r2, [pc, #364]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b6b6:	23a8      	movs	r3, #168	; 0xa8
 800b6b8:	58d4      	ldr	r4, [r2, r3]
 800b6ba:	25f0      	movs	r5, #240	; 0xf0
 800b6bc:	43ac      	bics	r4, r5
 800b6be:	50d4      	str	r4, [r2, r3]
 800b6c0:	58d4      	ldr	r4, [r2, r3]
 800b6c2:	3d60      	subs	r5, #96	; 0x60
 800b6c4:	432c      	orrs	r4, r5
 800b6c6:	50d4      	str	r4, [r2, r3]
 800b6c8:	e75d      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b6ca:	680b      	ldr	r3, [r1, #0]
 800b6cc:	4a4f      	ldr	r2, [pc, #316]	; (800b80c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d01b      	beq.n	800b70a <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b6d2:	4a4f      	ldr	r2, [pc, #316]	; (800b810 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d023      	beq.n	800b720 <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b6d8:	4a4e      	ldr	r2, [pc, #312]	; (800b814 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d02c      	beq.n	800b738 <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b6de:	4a4e      	ldr	r2, [pc, #312]	; (800b818 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d035      	beq.n	800b750 <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b6e4:	4a4d      	ldr	r2, [pc, #308]	; (800b81c <RemapAndLinkDMAtoUARTRx+0x344>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d03e      	beq.n	800b768 <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b6ea:	4a4d      	ldr	r2, [pc, #308]	; (800b820 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d000      	beq.n	800b6f2 <RemapAndLinkDMAtoUARTRx+0x21a>
 800b6f0:	e749      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b6f2:	4a4c      	ldr	r2, [pc, #304]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b6f4:	23a8      	movs	r3, #168	; 0xa8
 800b6f6:	58d4      	ldr	r4, [r2, r3]
 800b6f8:	4d4b      	ldr	r5, [pc, #300]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b6fa:	402c      	ands	r4, r5
 800b6fc:	50d4      	str	r4, [r2, r3]
 800b6fe:	58d5      	ldr	r5, [r2, r3]
 800b700:	24a0      	movs	r4, #160	; 0xa0
 800b702:	0124      	lsls	r4, r4, #4
 800b704:	432c      	orrs	r4, r5
 800b706:	50d4      	str	r4, [r2, r3]
 800b708:	e73d      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b70a:	4a48      	ldr	r2, [pc, #288]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b70c:	23a8      	movs	r3, #168	; 0xa8
 800b70e:	58d4      	ldr	r4, [r2, r3]
 800b710:	250f      	movs	r5, #15
 800b712:	43ac      	bics	r4, r5
 800b714:	50d4      	str	r4, [r2, r3]
 800b716:	58d4      	ldr	r4, [r2, r3]
 800b718:	3d05      	subs	r5, #5
 800b71a:	432c      	orrs	r4, r5
 800b71c:	50d4      	str	r4, [r2, r3]
 800b71e:	e732      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b720:	4a42      	ldr	r2, [pc, #264]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b722:	23a8      	movs	r3, #168	; 0xa8
 800b724:	58d4      	ldr	r4, [r2, r3]
 800b726:	4d40      	ldr	r5, [pc, #256]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b728:	402c      	ands	r4, r5
 800b72a:	50d4      	str	r4, [r2, r3]
 800b72c:	58d5      	ldr	r5, [r2, r3]
 800b72e:	24a0      	movs	r4, #160	; 0xa0
 800b730:	0124      	lsls	r4, r4, #4
 800b732:	432c      	orrs	r4, r5
 800b734:	50d4      	str	r4, [r2, r3]
 800b736:	e726      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b738:	4a3c      	ldr	r2, [pc, #240]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b73a:	23a8      	movs	r3, #168	; 0xa8
 800b73c:	58d4      	ldr	r4, [r2, r3]
 800b73e:	4d3c      	ldr	r5, [pc, #240]	; (800b830 <RemapAndLinkDMAtoUARTRx+0x358>)
 800b740:	402c      	ands	r4, r5
 800b742:	50d4      	str	r4, [r2, r3]
 800b744:	58d5      	ldr	r5, [r2, r3]
 800b746:	24a0      	movs	r4, #160	; 0xa0
 800b748:	0324      	lsls	r4, r4, #12
 800b74a:	432c      	orrs	r4, r5
 800b74c:	50d4      	str	r4, [r2, r3]
 800b74e:	e71a      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b750:	4a36      	ldr	r2, [pc, #216]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b752:	23a8      	movs	r3, #168	; 0xa8
 800b754:	58d4      	ldr	r4, [r2, r3]
 800b756:	4d37      	ldr	r5, [pc, #220]	; (800b834 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b758:	402c      	ands	r4, r5
 800b75a:	50d4      	str	r4, [r2, r3]
 800b75c:	58d5      	ldr	r5, [r2, r3]
 800b75e:	24a0      	movs	r4, #160	; 0xa0
 800b760:	0424      	lsls	r4, r4, #16
 800b762:	432c      	orrs	r4, r5
 800b764:	50d4      	str	r4, [r2, r3]
 800b766:	e70e      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b768:	4a2e      	ldr	r2, [pc, #184]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b76a:	23a8      	movs	r3, #168	; 0xa8
 800b76c:	58d4      	ldr	r4, [r2, r3]
 800b76e:	25f0      	movs	r5, #240	; 0xf0
 800b770:	43ac      	bics	r4, r5
 800b772:	50d4      	str	r4, [r2, r3]
 800b774:	58d4      	ldr	r4, [r2, r3]
 800b776:	3d50      	subs	r5, #80	; 0x50
 800b778:	432c      	orrs	r4, r5
 800b77a:	50d4      	str	r4, [r2, r3]
 800b77c:	e703      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b77e:	680b      	ldr	r3, [r1, #0]
 800b780:	4a22      	ldr	r2, [pc, #136]	; (800b80c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d01b      	beq.n	800b7be <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b786:	4a22      	ldr	r2, [pc, #136]	; (800b810 <RemapAndLinkDMAtoUARTRx+0x338>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d023      	beq.n	800b7d4 <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b78c:	4a21      	ldr	r2, [pc, #132]	; (800b814 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d052      	beq.n	800b838 <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b792:	4a21      	ldr	r2, [pc, #132]	; (800b818 <RemapAndLinkDMAtoUARTRx+0x340>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d05b      	beq.n	800b850 <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b798:	4a20      	ldr	r2, [pc, #128]	; (800b81c <RemapAndLinkDMAtoUARTRx+0x344>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d064      	beq.n	800b868 <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b79e:	4a20      	ldr	r2, [pc, #128]	; (800b820 <RemapAndLinkDMAtoUARTRx+0x348>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d000      	beq.n	800b7a6 <RemapAndLinkDMAtoUARTRx+0x2ce>
 800b7a4:	e6ef      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b7a6:	4a1f      	ldr	r2, [pc, #124]	; (800b824 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800b7a8:	23a8      	movs	r3, #168	; 0xa8
 800b7aa:	58d4      	ldr	r4, [r2, r3]
 800b7ac:	4d1e      	ldr	r5, [pc, #120]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b7ae:	402c      	ands	r4, r5
 800b7b0:	50d4      	str	r4, [r2, r3]
 800b7b2:	58d5      	ldr	r5, [r2, r3]
 800b7b4:	24b0      	movs	r4, #176	; 0xb0
 800b7b6:	0124      	lsls	r4, r4, #4
 800b7b8:	432c      	orrs	r4, r5
 800b7ba:	50d4      	str	r4, [r2, r3]
 800b7bc:	e6e3      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b7be:	4a1b      	ldr	r2, [pc, #108]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b7c0:	23a8      	movs	r3, #168	; 0xa8
 800b7c2:	58d4      	ldr	r4, [r2, r3]
 800b7c4:	250f      	movs	r5, #15
 800b7c6:	43ac      	bics	r4, r5
 800b7c8:	50d4      	str	r4, [r2, r3]
 800b7ca:	58d4      	ldr	r4, [r2, r3]
 800b7cc:	3d04      	subs	r5, #4
 800b7ce:	432c      	orrs	r4, r5
 800b7d0:	50d4      	str	r4, [r2, r3]
 800b7d2:	e6d8      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b7d4:	4a15      	ldr	r2, [pc, #84]	; (800b82c <RemapAndLinkDMAtoUARTRx+0x354>)
 800b7d6:	23a8      	movs	r3, #168	; 0xa8
 800b7d8:	58d4      	ldr	r4, [r2, r3]
 800b7da:	4d13      	ldr	r5, [pc, #76]	; (800b828 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b7dc:	402c      	ands	r4, r5
 800b7de:	50d4      	str	r4, [r2, r3]
 800b7e0:	58d5      	ldr	r5, [r2, r3]
 800b7e2:	24b0      	movs	r4, #176	; 0xb0
 800b7e4:	0124      	lsls	r4, r4, #4
 800b7e6:	432c      	orrs	r4, r5
 800b7e8:	50d4      	str	r4, [r2, r3]
 800b7ea:	e6cc      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
 800b7ec:	40013800 	.word	0x40013800
 800b7f0:	40004400 	.word	0x40004400
 800b7f4:	40004800 	.word	0x40004800
 800b7f8:	40004c00 	.word	0x40004c00
 800b7fc:	40005000 	.word	0x40005000
 800b800:	40011400 	.word	0x40011400
 800b804:	40011800 	.word	0x40011800
 800b808:	40011c00 	.word	0x40011c00
 800b80c:	40020008 	.word	0x40020008
 800b810:	40020030 	.word	0x40020030
 800b814:	40020058 	.word	0x40020058
 800b818:	4002006c 	.word	0x4002006c
 800b81c:	4002041c 	.word	0x4002041c
 800b820:	40020430 	.word	0x40020430
 800b824:	40020400 	.word	0x40020400
 800b828:	fffff0ff 	.word	0xfffff0ff
 800b82c:	40020000 	.word	0x40020000
 800b830:	fff0ffff 	.word	0xfff0ffff
 800b834:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b838:	4ab4      	ldr	r2, [pc, #720]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b83a:	23a8      	movs	r3, #168	; 0xa8
 800b83c:	58d4      	ldr	r4, [r2, r3]
 800b83e:	4db4      	ldr	r5, [pc, #720]	; (800bb10 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b840:	402c      	ands	r4, r5
 800b842:	50d4      	str	r4, [r2, r3]
 800b844:	58d5      	ldr	r5, [r2, r3]
 800b846:	24b0      	movs	r4, #176	; 0xb0
 800b848:	0324      	lsls	r4, r4, #12
 800b84a:	432c      	orrs	r4, r5
 800b84c:	50d4      	str	r4, [r2, r3]
 800b84e:	e69a      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b850:	4aae      	ldr	r2, [pc, #696]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b852:	23a8      	movs	r3, #168	; 0xa8
 800b854:	58d4      	ldr	r4, [r2, r3]
 800b856:	4daf      	ldr	r5, [pc, #700]	; (800bb14 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b858:	402c      	ands	r4, r5
 800b85a:	50d4      	str	r4, [r2, r3]
 800b85c:	58d5      	ldr	r5, [r2, r3]
 800b85e:	24b0      	movs	r4, #176	; 0xb0
 800b860:	0424      	lsls	r4, r4, #16
 800b862:	432c      	orrs	r4, r5
 800b864:	50d4      	str	r4, [r2, r3]
 800b866:	e68e      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b868:	4aab      	ldr	r2, [pc, #684]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b86a:	23a8      	movs	r3, #168	; 0xa8
 800b86c:	58d4      	ldr	r4, [r2, r3]
 800b86e:	25f0      	movs	r5, #240	; 0xf0
 800b870:	43ac      	bics	r4, r5
 800b872:	50d4      	str	r4, [r2, r3]
 800b874:	58d4      	ldr	r4, [r2, r3]
 800b876:	3d40      	subs	r5, #64	; 0x40
 800b878:	432c      	orrs	r4, r5
 800b87a:	50d4      	str	r4, [r2, r3]
 800b87c:	e683      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b87e:	680b      	ldr	r3, [r1, #0]
 800b880:	4aa6      	ldr	r2, [pc, #664]	; (800bb1c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d01b      	beq.n	800b8be <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b886:	4aa6      	ldr	r2, [pc, #664]	; (800bb20 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d023      	beq.n	800b8d4 <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b88c:	4aa5      	ldr	r2, [pc, #660]	; (800bb24 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d02c      	beq.n	800b8ec <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b892:	4aa5      	ldr	r2, [pc, #660]	; (800bb28 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d035      	beq.n	800b904 <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b898:	4aa4      	ldr	r2, [pc, #656]	; (800bb2c <RemapAndLinkDMAtoUARTRx+0x654>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d03e      	beq.n	800b91c <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b89e:	4aa4      	ldr	r2, [pc, #656]	; (800bb30 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d000      	beq.n	800b8a6 <RemapAndLinkDMAtoUARTRx+0x3ce>
 800b8a4:	e66f      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b8a6:	4a9c      	ldr	r2, [pc, #624]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b8a8:	23a8      	movs	r3, #168	; 0xa8
 800b8aa:	58d4      	ldr	r4, [r2, r3]
 800b8ac:	4da1      	ldr	r5, [pc, #644]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b8ae:	402c      	ands	r4, r5
 800b8b0:	50d4      	str	r4, [r2, r3]
 800b8b2:	58d5      	ldr	r5, [r2, r3]
 800b8b4:	24c0      	movs	r4, #192	; 0xc0
 800b8b6:	0124      	lsls	r4, r4, #4
 800b8b8:	432c      	orrs	r4, r5
 800b8ba:	50d4      	str	r4, [r2, r3]
 800b8bc:	e663      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b8be:	4a93      	ldr	r2, [pc, #588]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b8c0:	23a8      	movs	r3, #168	; 0xa8
 800b8c2:	58d4      	ldr	r4, [r2, r3]
 800b8c4:	250f      	movs	r5, #15
 800b8c6:	43ac      	bics	r4, r5
 800b8c8:	50d4      	str	r4, [r2, r3]
 800b8ca:	58d4      	ldr	r4, [r2, r3]
 800b8cc:	3d03      	subs	r5, #3
 800b8ce:	432c      	orrs	r4, r5
 800b8d0:	50d4      	str	r4, [r2, r3]
 800b8d2:	e658      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b8d4:	4a8d      	ldr	r2, [pc, #564]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b8d6:	23a8      	movs	r3, #168	; 0xa8
 800b8d8:	58d4      	ldr	r4, [r2, r3]
 800b8da:	4d96      	ldr	r5, [pc, #600]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b8dc:	402c      	ands	r4, r5
 800b8de:	50d4      	str	r4, [r2, r3]
 800b8e0:	58d5      	ldr	r5, [r2, r3]
 800b8e2:	24c0      	movs	r4, #192	; 0xc0
 800b8e4:	0124      	lsls	r4, r4, #4
 800b8e6:	432c      	orrs	r4, r5
 800b8e8:	50d4      	str	r4, [r2, r3]
 800b8ea:	e64c      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b8ec:	4a87      	ldr	r2, [pc, #540]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b8ee:	23a8      	movs	r3, #168	; 0xa8
 800b8f0:	58d4      	ldr	r4, [r2, r3]
 800b8f2:	4d87      	ldr	r5, [pc, #540]	; (800bb10 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b8f4:	402c      	ands	r4, r5
 800b8f6:	50d4      	str	r4, [r2, r3]
 800b8f8:	58d5      	ldr	r5, [r2, r3]
 800b8fa:	24c0      	movs	r4, #192	; 0xc0
 800b8fc:	0324      	lsls	r4, r4, #12
 800b8fe:	432c      	orrs	r4, r5
 800b900:	50d4      	str	r4, [r2, r3]
 800b902:	e640      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b904:	4a81      	ldr	r2, [pc, #516]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b906:	23a8      	movs	r3, #168	; 0xa8
 800b908:	58d4      	ldr	r4, [r2, r3]
 800b90a:	4d82      	ldr	r5, [pc, #520]	; (800bb14 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b90c:	402c      	ands	r4, r5
 800b90e:	50d4      	str	r4, [r2, r3]
 800b910:	58d5      	ldr	r5, [r2, r3]
 800b912:	24c0      	movs	r4, #192	; 0xc0
 800b914:	0424      	lsls	r4, r4, #16
 800b916:	432c      	orrs	r4, r5
 800b918:	50d4      	str	r4, [r2, r3]
 800b91a:	e634      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b91c:	4a7e      	ldr	r2, [pc, #504]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b91e:	23a8      	movs	r3, #168	; 0xa8
 800b920:	58d4      	ldr	r4, [r2, r3]
 800b922:	25f0      	movs	r5, #240	; 0xf0
 800b924:	43ac      	bics	r4, r5
 800b926:	50d4      	str	r4, [r2, r3]
 800b928:	58d4      	ldr	r4, [r2, r3]
 800b92a:	3d30      	subs	r5, #48	; 0x30
 800b92c:	432c      	orrs	r4, r5
 800b92e:	50d4      	str	r4, [r2, r3]
 800b930:	e629      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b932:	680b      	ldr	r3, [r1, #0]
 800b934:	4a79      	ldr	r2, [pc, #484]	; (800bb1c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d01b      	beq.n	800b972 <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b93a:	4a79      	ldr	r2, [pc, #484]	; (800bb20 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d023      	beq.n	800b988 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b940:	4a78      	ldr	r2, [pc, #480]	; (800bb24 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d02c      	beq.n	800b9a0 <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b946:	4a78      	ldr	r2, [pc, #480]	; (800bb28 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d035      	beq.n	800b9b8 <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b94c:	4a77      	ldr	r2, [pc, #476]	; (800bb2c <RemapAndLinkDMAtoUARTRx+0x654>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d03e      	beq.n	800b9d0 <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b952:	4a77      	ldr	r2, [pc, #476]	; (800bb30 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d000      	beq.n	800b95a <RemapAndLinkDMAtoUARTRx+0x482>
 800b958:	e615      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b95a:	4a6f      	ldr	r2, [pc, #444]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b95c:	23a8      	movs	r3, #168	; 0xa8
 800b95e:	58d4      	ldr	r4, [r2, r3]
 800b960:	4d74      	ldr	r5, [pc, #464]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b962:	402c      	ands	r4, r5
 800b964:	50d4      	str	r4, [r2, r3]
 800b966:	58d5      	ldr	r5, [r2, r3]
 800b968:	24d0      	movs	r4, #208	; 0xd0
 800b96a:	0124      	lsls	r4, r4, #4
 800b96c:	432c      	orrs	r4, r5
 800b96e:	50d4      	str	r4, [r2, r3]
 800b970:	e609      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b972:	4a66      	ldr	r2, [pc, #408]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b974:	23a8      	movs	r3, #168	; 0xa8
 800b976:	58d4      	ldr	r4, [r2, r3]
 800b978:	250f      	movs	r5, #15
 800b97a:	43ac      	bics	r4, r5
 800b97c:	50d4      	str	r4, [r2, r3]
 800b97e:	58d4      	ldr	r4, [r2, r3]
 800b980:	3d02      	subs	r5, #2
 800b982:	432c      	orrs	r4, r5
 800b984:	50d4      	str	r4, [r2, r3]
 800b986:	e5fe      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b988:	4a60      	ldr	r2, [pc, #384]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b98a:	23a8      	movs	r3, #168	; 0xa8
 800b98c:	58d4      	ldr	r4, [r2, r3]
 800b98e:	4d69      	ldr	r5, [pc, #420]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800b990:	402c      	ands	r4, r5
 800b992:	50d4      	str	r4, [r2, r3]
 800b994:	58d5      	ldr	r5, [r2, r3]
 800b996:	24d0      	movs	r4, #208	; 0xd0
 800b998:	0124      	lsls	r4, r4, #4
 800b99a:	432c      	orrs	r4, r5
 800b99c:	50d4      	str	r4, [r2, r3]
 800b99e:	e5f2      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b9a0:	4a5a      	ldr	r2, [pc, #360]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b9a2:	23a8      	movs	r3, #168	; 0xa8
 800b9a4:	58d4      	ldr	r4, [r2, r3]
 800b9a6:	4d5a      	ldr	r5, [pc, #360]	; (800bb10 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b9a8:	402c      	ands	r4, r5
 800b9aa:	50d4      	str	r4, [r2, r3]
 800b9ac:	58d5      	ldr	r5, [r2, r3]
 800b9ae:	24d0      	movs	r4, #208	; 0xd0
 800b9b0:	0324      	lsls	r4, r4, #12
 800b9b2:	432c      	orrs	r4, r5
 800b9b4:	50d4      	str	r4, [r2, r3]
 800b9b6:	e5e6      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b9b8:	4a54      	ldr	r2, [pc, #336]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b9ba:	23a8      	movs	r3, #168	; 0xa8
 800b9bc:	58d4      	ldr	r4, [r2, r3]
 800b9be:	4d55      	ldr	r5, [pc, #340]	; (800bb14 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b9c0:	402c      	ands	r4, r5
 800b9c2:	50d4      	str	r4, [r2, r3]
 800b9c4:	58d5      	ldr	r5, [r2, r3]
 800b9c6:	24d0      	movs	r4, #208	; 0xd0
 800b9c8:	0424      	lsls	r4, r4, #16
 800b9ca:	432c      	orrs	r4, r5
 800b9cc:	50d4      	str	r4, [r2, r3]
 800b9ce:	e5da      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b9d0:	4a51      	ldr	r2, [pc, #324]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b9d2:	23a8      	movs	r3, #168	; 0xa8
 800b9d4:	58d4      	ldr	r4, [r2, r3]
 800b9d6:	25f0      	movs	r5, #240	; 0xf0
 800b9d8:	43ac      	bics	r4, r5
 800b9da:	50d4      	str	r4, [r2, r3]
 800b9dc:	58d4      	ldr	r4, [r2, r3]
 800b9de:	3d20      	subs	r5, #32
 800b9e0:	432c      	orrs	r4, r5
 800b9e2:	50d4      	str	r4, [r2, r3]
 800b9e4:	e5cf      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b9e6:	680b      	ldr	r3, [r1, #0]
 800b9e8:	4a4c      	ldr	r2, [pc, #304]	; (800bb1c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d01b      	beq.n	800ba26 <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b9ee:	4a4c      	ldr	r2, [pc, #304]	; (800bb20 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d023      	beq.n	800ba3c <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b9f4:	4a4b      	ldr	r2, [pc, #300]	; (800bb24 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d02c      	beq.n	800ba54 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b9fa:	4a4b      	ldr	r2, [pc, #300]	; (800bb28 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d035      	beq.n	800ba6c <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800ba00:	4a4a      	ldr	r2, [pc, #296]	; (800bb2c <RemapAndLinkDMAtoUARTRx+0x654>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d03e      	beq.n	800ba84 <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800ba06:	4a4a      	ldr	r2, [pc, #296]	; (800bb30 <RemapAndLinkDMAtoUARTRx+0x658>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d000      	beq.n	800ba0e <RemapAndLinkDMAtoUARTRx+0x536>
 800ba0c:	e5bb      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800ba0e:	4a42      	ldr	r2, [pc, #264]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ba10:	23a8      	movs	r3, #168	; 0xa8
 800ba12:	58d4      	ldr	r4, [r2, r3]
 800ba14:	4d47      	ldr	r5, [pc, #284]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800ba16:	402c      	ands	r4, r5
 800ba18:	50d4      	str	r4, [r2, r3]
 800ba1a:	58d5      	ldr	r5, [r2, r3]
 800ba1c:	24e0      	movs	r4, #224	; 0xe0
 800ba1e:	0124      	lsls	r4, r4, #4
 800ba20:	432c      	orrs	r4, r5
 800ba22:	50d4      	str	r4, [r2, r3]
 800ba24:	e5af      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800ba26:	4a39      	ldr	r2, [pc, #228]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800ba28:	23a8      	movs	r3, #168	; 0xa8
 800ba2a:	58d4      	ldr	r4, [r2, r3]
 800ba2c:	250f      	movs	r5, #15
 800ba2e:	43ac      	bics	r4, r5
 800ba30:	50d4      	str	r4, [r2, r3]
 800ba32:	58d4      	ldr	r4, [r2, r3]
 800ba34:	3d01      	subs	r5, #1
 800ba36:	432c      	orrs	r4, r5
 800ba38:	50d4      	str	r4, [r2, r3]
 800ba3a:	e5a4      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800ba3c:	4a33      	ldr	r2, [pc, #204]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800ba3e:	23a8      	movs	r3, #168	; 0xa8
 800ba40:	58d4      	ldr	r4, [r2, r3]
 800ba42:	4d3c      	ldr	r5, [pc, #240]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800ba44:	402c      	ands	r4, r5
 800ba46:	50d4      	str	r4, [r2, r3]
 800ba48:	58d5      	ldr	r5, [r2, r3]
 800ba4a:	24e0      	movs	r4, #224	; 0xe0
 800ba4c:	0124      	lsls	r4, r4, #4
 800ba4e:	432c      	orrs	r4, r5
 800ba50:	50d4      	str	r4, [r2, r3]
 800ba52:	e598      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800ba54:	4a2d      	ldr	r2, [pc, #180]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800ba56:	23a8      	movs	r3, #168	; 0xa8
 800ba58:	58d4      	ldr	r4, [r2, r3]
 800ba5a:	4d2d      	ldr	r5, [pc, #180]	; (800bb10 <RemapAndLinkDMAtoUARTRx+0x638>)
 800ba5c:	402c      	ands	r4, r5
 800ba5e:	50d4      	str	r4, [r2, r3]
 800ba60:	58d5      	ldr	r5, [r2, r3]
 800ba62:	24e0      	movs	r4, #224	; 0xe0
 800ba64:	0324      	lsls	r4, r4, #12
 800ba66:	432c      	orrs	r4, r5
 800ba68:	50d4      	str	r4, [r2, r3]
 800ba6a:	e58c      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800ba6c:	4a27      	ldr	r2, [pc, #156]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800ba6e:	23a8      	movs	r3, #168	; 0xa8
 800ba70:	58d4      	ldr	r4, [r2, r3]
 800ba72:	4d28      	ldr	r5, [pc, #160]	; (800bb14 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ba74:	402c      	ands	r4, r5
 800ba76:	50d4      	str	r4, [r2, r3]
 800ba78:	58d5      	ldr	r5, [r2, r3]
 800ba7a:	24e0      	movs	r4, #224	; 0xe0
 800ba7c:	0424      	lsls	r4, r4, #16
 800ba7e:	432c      	orrs	r4, r5
 800ba80:	50d4      	str	r4, [r2, r3]
 800ba82:	e580      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800ba84:	4a24      	ldr	r2, [pc, #144]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ba86:	23a8      	movs	r3, #168	; 0xa8
 800ba88:	58d4      	ldr	r4, [r2, r3]
 800ba8a:	25f0      	movs	r5, #240	; 0xf0
 800ba8c:	43ac      	bics	r4, r5
 800ba8e:	50d4      	str	r4, [r2, r3]
 800ba90:	58d4      	ldr	r4, [r2, r3]
 800ba92:	3d10      	subs	r5, #16
 800ba94:	432c      	orrs	r4, r5
 800ba96:	50d4      	str	r4, [r2, r3]
 800ba98:	e575      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ba9a:	4a1c      	ldr	r2, [pc, #112]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800ba9c:	23a8      	movs	r3, #168	; 0xa8
 800ba9e:	58d5      	ldr	r5, [r2, r3]
 800baa0:	260f      	movs	r6, #15
 800baa2:	43b5      	bics	r5, r6
 800baa4:	50d5      	str	r5, [r2, r3]
 800baa6:	58d4      	ldr	r4, [r2, r3]
 800baa8:	4334      	orrs	r4, r6
 800baaa:	50d4      	str	r4, [r2, r3]
 800baac:	e56b      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800baae:	4a17      	ldr	r2, [pc, #92]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800bab0:	23a8      	movs	r3, #168	; 0xa8
 800bab2:	58d4      	ldr	r4, [r2, r3]
 800bab4:	4d1f      	ldr	r5, [pc, #124]	; (800bb34 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800bab6:	402c      	ands	r4, r5
 800bab8:	50d4      	str	r4, [r2, r3]
 800baba:	58d5      	ldr	r5, [r2, r3]
 800babc:	24f0      	movs	r4, #240	; 0xf0
 800babe:	0124      	lsls	r4, r4, #4
 800bac0:	432c      	orrs	r4, r5
 800bac2:	50d4      	str	r4, [r2, r3]
 800bac4:	e55f      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800bac6:	4a11      	ldr	r2, [pc, #68]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800bac8:	23a8      	movs	r3, #168	; 0xa8
 800baca:	58d4      	ldr	r4, [r2, r3]
 800bacc:	4d10      	ldr	r5, [pc, #64]	; (800bb10 <RemapAndLinkDMAtoUARTRx+0x638>)
 800bace:	402c      	ands	r4, r5
 800bad0:	50d4      	str	r4, [r2, r3]
 800bad2:	58d5      	ldr	r5, [r2, r3]
 800bad4:	24f0      	movs	r4, #240	; 0xf0
 800bad6:	0324      	lsls	r4, r4, #12
 800bad8:	432c      	orrs	r4, r5
 800bada:	50d4      	str	r4, [r2, r3]
 800badc:	e553      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800bade:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <RemapAndLinkDMAtoUARTRx+0x634>)
 800bae0:	23a8      	movs	r3, #168	; 0xa8
 800bae2:	58d4      	ldr	r4, [r2, r3]
 800bae4:	4d0b      	ldr	r5, [pc, #44]	; (800bb14 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800bae6:	402c      	ands	r4, r5
 800bae8:	50d4      	str	r4, [r2, r3]
 800baea:	58d5      	ldr	r5, [r2, r3]
 800baec:	24f0      	movs	r4, #240	; 0xf0
 800baee:	0424      	lsls	r4, r4, #16
 800baf0:	432c      	orrs	r4, r5
 800baf2:	50d4      	str	r4, [r2, r3]
 800baf4:	e547      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800baf6:	4a08      	ldr	r2, [pc, #32]	; (800bb18 <RemapAndLinkDMAtoUARTRx+0x640>)
 800baf8:	23a8      	movs	r3, #168	; 0xa8
 800bafa:	58d5      	ldr	r5, [r2, r3]
 800bafc:	26f0      	movs	r6, #240	; 0xf0
 800bafe:	43b5      	bics	r5, r6
 800bb00:	50d5      	str	r5, [r2, r3]
 800bb02:	58d4      	ldr	r4, [r2, r3]
 800bb04:	4334      	orrs	r4, r6
 800bb06:	50d4      	str	r4, [r2, r3]
 800bb08:	e53d      	b.n	800b586 <RemapAndLinkDMAtoUARTRx+0xae>
 800bb0a:	46c0      	nop			; (mov r8, r8)
 800bb0c:	40020000 	.word	0x40020000
 800bb10:	fff0ffff 	.word	0xfff0ffff
 800bb14:	ff0fffff 	.word	0xff0fffff
 800bb18:	40020400 	.word	0x40020400
 800bb1c:	40020008 	.word	0x40020008
 800bb20:	40020030 	.word	0x40020030
 800bb24:	40020058 	.word	0x40020058
 800bb28:	4002006c 	.word	0x4002006c
 800bb2c:	4002041c 	.word	0x4002041c
 800bb30:	40020430 	.word	0x40020430
 800bb34:	fffff0ff 	.word	0xfffff0ff

0800bb38 <DMA_MSG_RX_Setup>:
{	
 800bb38:	b570      	push	{r4, r5, r6, lr}
 800bb3a:	0004      	movs	r4, r0
 800bb3c:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800bb3e:	f7ff fccb 	bl	800b4d8 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800bb42:	2100      	movs	r1, #0
 800bb44:	0028      	movs	r0, r5
 800bb46:	f7ff fc0d 	bl	800b364 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800bb4a:	0020      	movs	r0, r4
 800bb4c:	f7fe fdf2 	bl	800a734 <GetPort>
 800bb50:	3801      	subs	r0, #1
 800bb52:	0041      	lsls	r1, r0, #1
 800bb54:	1809      	adds	r1, r1, r0
 800bb56:	0189      	lsls	r1, r1, #6
 800bb58:	4803      	ldr	r0, [pc, #12]	; (800bb68 <DMA_MSG_RX_Setup+0x30>)
 800bb5a:	1809      	adds	r1, r1, r0
 800bb5c:	22c0      	movs	r2, #192	; 0xc0
 800bb5e:	0020      	movs	r0, r4
 800bb60:	f007 fb5a 	bl	8013218 <HAL_UART_Receive_DMA>
}
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	46c0      	nop			; (mov r8, r8)
 800bb68:	20000a4c 	.word	0x20000a4c

0800bb6c <SetupMessagingRxDMAs>:
{	
 800bb6c:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800bb6e:	4b0e      	ldr	r3, [pc, #56]	; (800bba8 <SetupMessagingRxDMAs+0x3c>)
 800bb70:	785b      	ldrb	r3, [r3, #1]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d008      	beq.n	800bb88 <SetupMessagingRxDMAs+0x1c>
	if (portStatus[P2] == FREE)	
 800bb76:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <SetupMessagingRxDMAs+0x3c>)
 800bb78:	789b      	ldrb	r3, [r3, #2]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d009      	beq.n	800bb92 <SetupMessagingRxDMAs+0x26>
	if (portStatus[P3] == FREE)
 800bb7e:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <SetupMessagingRxDMAs+0x3c>)
 800bb80:	78db      	ldrb	r3, [r3, #3]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00a      	beq.n	800bb9c <SetupMessagingRxDMAs+0x30>
}
 800bb86:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800bb88:	4908      	ldr	r1, [pc, #32]	; (800bbac <SetupMessagingRxDMAs+0x40>)
 800bb8a:	4809      	ldr	r0, [pc, #36]	; (800bbb0 <SetupMessagingRxDMAs+0x44>)
 800bb8c:	f7ff ffd4 	bl	800bb38 <DMA_MSG_RX_Setup>
 800bb90:	e7f1      	b.n	800bb76 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800bb92:	4908      	ldr	r1, [pc, #32]	; (800bbb4 <SetupMessagingRxDMAs+0x48>)
 800bb94:	4808      	ldr	r0, [pc, #32]	; (800bbb8 <SetupMessagingRxDMAs+0x4c>)
 800bb96:	f7ff ffcf 	bl	800bb38 <DMA_MSG_RX_Setup>
 800bb9a:	e7f0      	b.n	800bb7e <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800bb9c:	4907      	ldr	r1, [pc, #28]	; (800bbbc <SetupMessagingRxDMAs+0x50>)
 800bb9e:	4808      	ldr	r0, [pc, #32]	; (800bbc0 <SetupMessagingRxDMAs+0x54>)
 800bba0:	f7ff ffca 	bl	800bb38 <DMA_MSG_RX_Setup>
}
 800bba4:	e7ef      	b.n	800bb86 <SetupMessagingRxDMAs+0x1a>
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	20000878 	.word	0x20000878
 800bbac:	20000ffc 	.word	0x20000ffc
 800bbb0:	20006584 	.word	0x20006584
 800bbb4:	20001034 	.word	0x20001034
 800bbb8:	20006498 	.word	0x20006498
 800bbbc:	2000106c 	.word	0x2000106c
 800bbc0:	20006364 	.word	0x20006364

0800bbc4 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800bbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc6:	46c6      	mov	lr, r8
 800bbc8:	b500      	push	{lr}
 800bbca:	0007      	movs	r7, r0
	StopStreamDMA(port);
 800bbcc:	f7ff fb8a 	bl	800b2e4 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800bbd0:	1e7c      	subs	r4, r7, #1
 800bbd2:	00e5      	lsls	r5, r4, #3
 800bbd4:	1b2e      	subs	r6, r5, r4
 800bbd6:	00f6      	lsls	r6, r6, #3
 800bbd8:	4b11      	ldr	r3, [pc, #68]	; (800bc20 <SwitchStreamDMAToMsg+0x5c>)
 800bbda:	18f6      	adds	r6, r6, r3
 800bbdc:	4b11      	ldr	r3, [pc, #68]	; (800bc24 <SwitchStreamDMAToMsg+0x60>)
 800bbde:	4698      	mov	r8, r3
 800bbe0:	1b2b      	subs	r3, r5, r4
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	5899      	ldr	r1, [r3, r2]
 800bbe8:	0030      	movs	r0, r6
 800bbea:	f7ff fb03 	bl	800b1f4 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800bbee:	1b2b      	subs	r3, r5, r4
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	4443      	add	r3, r8
 800bbf4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bbf6:	f7fe fd9d 	bl	800a734 <GetPort>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	4a0a      	ldr	r2, [pc, #40]	; (800bc28 <SwitchStreamDMAToMsg+0x64>)
 800bbfe:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800bc00:	1b2d      	subs	r5, r5, r4
 800bc02:	00ed      	lsls	r5, r5, #3
 800bc04:	4642      	mov	r2, r8
 800bc06:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port - 1] = 0;
 800bc08:	00a4      	lsls	r4, r4, #2
 800bc0a:	4a08      	ldr	r2, [pc, #32]	; (800bc2c <SwitchStreamDMAToMsg+0x68>)
 800bc0c:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800bc0e:	0038      	movs	r0, r7
 800bc10:	f002 fc5e 	bl	800e4d0 <GetUart>
 800bc14:	0031      	movs	r1, r6
 800bc16:	f7ff ff8f 	bl	800bb38 <DMA_MSG_RX_Setup>
}
 800bc1a:	bc80      	pop	{r7}
 800bc1c:	46b8      	mov	r8, r7
 800bc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc20:	20000ffc 	.word	0x20000ffc
 800bc24:	200011f4 	.word	0x200011f4
 800bc28:	20000878 	.word	0x20000878
 800bc2c:	20000cd4 	.word	0x20000cd4

0800bc30 <DMA_STREAM_Setup>:
{	
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	0005      	movs	r5, r0
 800bc34:	000f      	movs	r7, r1
 800bc36:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800bc38:	f7fe fd7c 	bl	800a734 <GetPort>
	hDMA = &streamDMA[port-1];
 800bc3c:	3801      	subs	r0, #1
 800bc3e:	00c4      	lsls	r4, r0, #3
 800bc40:	1a24      	subs	r4, r4, r0
 800bc42:	00e4      	lsls	r4, r4, #3
 800bc44:	4809      	ldr	r0, [pc, #36]	; (800bc6c <DMA_STREAM_Setup+0x3c>)
 800bc46:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800bc48:	0021      	movs	r1, r4
 800bc4a:	0028      	movs	r0, r5
 800bc4c:	f7ff fc44 	bl	800b4d8 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800bc50:	2101      	movs	r1, #1
 800bc52:	0020      	movs	r0, r4
 800bc54:	f7ff fb86 	bl	800b364 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800bc58:	2369      	movs	r3, #105	; 0x69
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	3128      	adds	r1, #40	; 0x28
 800bc62:	0032      	movs	r2, r6
 800bc64:	0028      	movs	r0, r5
 800bc66:	f007 fad7 	bl	8013218 <HAL_UART_Receive_DMA>
}
 800bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc6c:	200011f4 	.word	0x200011f4

0800bc70 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800bc70:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800bc72:	6803      	ldr	r3, [r0, #0]
 800bc74:	4ac3      	ldr	r2, [pc, #780]	; (800bf84 <RemapAndLinkDMAtoUARTTx+0x314>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d03e      	beq.n	800bcf8 <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800bc7a:	4ac3      	ldr	r2, [pc, #780]	; (800bf88 <RemapAndLinkDMAtoUARTTx+0x318>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d100      	bne.n	800bc82 <RemapAndLinkDMAtoUARTTx+0x12>
 800bc80:	e096      	b.n	800bdb0 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800bc82:	4ac2      	ldr	r2, [pc, #776]	; (800bf8c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d100      	bne.n	800bc8a <RemapAndLinkDMAtoUARTTx+0x1a>
 800bc88:	e0eb      	b.n	800be62 <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800bc8a:	4ac1      	ldr	r2, [pc, #772]	; (800bf90 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d100      	bne.n	800bc92 <RemapAndLinkDMAtoUARTTx+0x22>
 800bc90:	e141      	b.n	800bf16 <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800bc92:	4ac0      	ldr	r2, [pc, #768]	; (800bf94 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d100      	bne.n	800bc9a <RemapAndLinkDMAtoUARTTx+0x2a>
 800bc98:	e1bd      	b.n	800c016 <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800bc9a:	4abf      	ldr	r2, [pc, #764]	; (800bf98 <RemapAndLinkDMAtoUARTTx+0x328>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d100      	bne.n	800bca2 <RemapAndLinkDMAtoUARTTx+0x32>
 800bca0:	e213      	b.n	800c0ca <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800bca2:	4abe      	ldr	r2, [pc, #760]	; (800bf9c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d100      	bne.n	800bcaa <RemapAndLinkDMAtoUARTTx+0x3a>
 800bca8:	e269      	b.n	800c17e <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800bcaa:	4abd      	ldr	r2, [pc, #756]	; (800bfa0 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d136      	bne.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
 800bcb0:	680b      	ldr	r3, [r1, #0]
 800bcb2:	4abc      	ldr	r2, [pc, #752]	; (800bfa4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d100      	bne.n	800bcba <RemapAndLinkDMAtoUARTTx+0x4a>
 800bcb8:	e2bb      	b.n	800c232 <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800bcba:	4abb      	ldr	r2, [pc, #748]	; (800bfa8 <RemapAndLinkDMAtoUARTTx+0x338>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d100      	bne.n	800bcc2 <RemapAndLinkDMAtoUARTTx+0x52>
 800bcc0:	e2c1      	b.n	800c246 <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800bcc2:	4aba      	ldr	r2, [pc, #744]	; (800bfac <RemapAndLinkDMAtoUARTTx+0x33c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d100      	bne.n	800bcca <RemapAndLinkDMAtoUARTTx+0x5a>
 800bcc8:	e2c9      	b.n	800c25e <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800bcca:	4ab9      	ldr	r2, [pc, #740]	; (800bfb0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d100      	bne.n	800bcd2 <RemapAndLinkDMAtoUARTTx+0x62>
 800bcd0:	e2d1      	b.n	800c276 <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800bcd2:	4ab8      	ldr	r2, [pc, #736]	; (800bfb4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d100      	bne.n	800bcda <RemapAndLinkDMAtoUARTTx+0x6a>
 800bcd8:	e2d7      	b.n	800c28a <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800bcda:	4ab7      	ldr	r2, [pc, #732]	; (800bfb8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d11e      	bne.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800bce0:	4ab6      	ldr	r2, [pc, #728]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bce2:	23a8      	movs	r3, #168	; 0xa8
 800bce4:	58d4      	ldr	r4, [r2, r3]
 800bce6:	4db6      	ldr	r5, [pc, #728]	; (800bfc0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800bce8:	402c      	ands	r4, r5
 800bcea:	50d4      	str	r4, [r2, r3]
 800bcec:	58d5      	ldr	r5, [r2, r3]
 800bcee:	24f0      	movs	r4, #240	; 0xf0
 800bcf0:	0324      	lsls	r4, r4, #12
 800bcf2:	432c      	orrs	r4, r5
 800bcf4:	50d4      	str	r4, [r2, r3]
 800bcf6:	e012      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800bcf8:	680b      	ldr	r3, [r1, #0]
 800bcfa:	4aaa      	ldr	r2, [pc, #680]	; (800bfa4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d011      	beq.n	800bd24 <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800bd00:	4aa9      	ldr	r2, [pc, #676]	; (800bfa8 <RemapAndLinkDMAtoUARTTx+0x338>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d019      	beq.n	800bd3a <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800bd06:	4aa9      	ldr	r2, [pc, #676]	; (800bfac <RemapAndLinkDMAtoUARTTx+0x33c>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d022      	beq.n	800bd52 <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800bd0c:	4aa8      	ldr	r2, [pc, #672]	; (800bfb0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d02b      	beq.n	800bd6a <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800bd12:	4aa8      	ldr	r2, [pc, #672]	; (800bfb4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d033      	beq.n	800bd80 <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800bd18:	4aa7      	ldr	r2, [pc, #668]	; (800bfb8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d03c      	beq.n	800bd98 <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800bd1e:	6601      	str	r1, [r0, #96]	; 0x60
 800bd20:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bd22:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800bd24:	4aa7      	ldr	r2, [pc, #668]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bd26:	23a8      	movs	r3, #168	; 0xa8
 800bd28:	58d4      	ldr	r4, [r2, r3]
 800bd2a:	25f0      	movs	r5, #240	; 0xf0
 800bd2c:	43ac      	bics	r4, r5
 800bd2e:	50d4      	str	r4, [r2, r3]
 800bd30:	58d4      	ldr	r4, [r2, r3]
 800bd32:	3d70      	subs	r5, #112	; 0x70
 800bd34:	432c      	orrs	r4, r5
 800bd36:	50d4      	str	r4, [r2, r3]
 800bd38:	e7f1      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800bd3a:	4aa2      	ldr	r2, [pc, #648]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bd3c:	23a8      	movs	r3, #168	; 0xa8
 800bd3e:	58d4      	ldr	r4, [r2, r3]
 800bd40:	4da1      	ldr	r5, [pc, #644]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800bd42:	402c      	ands	r4, r5
 800bd44:	50d4      	str	r4, [r2, r3]
 800bd46:	58d5      	ldr	r5, [r2, r3]
 800bd48:	2480      	movs	r4, #128	; 0x80
 800bd4a:	0224      	lsls	r4, r4, #8
 800bd4c:	432c      	orrs	r4, r5
 800bd4e:	50d4      	str	r4, [r2, r3]
 800bd50:	e7e5      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800bd52:	4a9c      	ldr	r2, [pc, #624]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bd54:	23a8      	movs	r3, #168	; 0xa8
 800bd56:	58d4      	ldr	r4, [r2, r3]
 800bd58:	4d9c      	ldr	r5, [pc, #624]	; (800bfcc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800bd5a:	402c      	ands	r4, r5
 800bd5c:	50d4      	str	r4, [r2, r3]
 800bd5e:	58d5      	ldr	r5, [r2, r3]
 800bd60:	2480      	movs	r4, #128	; 0x80
 800bd62:	0524      	lsls	r4, r4, #20
 800bd64:	432c      	orrs	r4, r5
 800bd66:	50d4      	str	r4, [r2, r3]
 800bd68:	e7d9      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800bd6a:	4a94      	ldr	r2, [pc, #592]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bd6c:	23a8      	movs	r3, #168	; 0xa8
 800bd6e:	58d4      	ldr	r4, [r2, r3]
 800bd70:	250f      	movs	r5, #15
 800bd72:	43ac      	bics	r4, r5
 800bd74:	50d4      	str	r4, [r2, r3]
 800bd76:	58d4      	ldr	r4, [r2, r3]
 800bd78:	3d07      	subs	r5, #7
 800bd7a:	432c      	orrs	r4, r5
 800bd7c:	50d4      	str	r4, [r2, r3]
 800bd7e:	e7ce      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800bd80:	4a8e      	ldr	r2, [pc, #568]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bd82:	23a8      	movs	r3, #168	; 0xa8
 800bd84:	58d4      	ldr	r4, [r2, r3]
 800bd86:	4d90      	ldr	r5, [pc, #576]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800bd88:	402c      	ands	r4, r5
 800bd8a:	50d4      	str	r4, [r2, r3]
 800bd8c:	58d5      	ldr	r5, [r2, r3]
 800bd8e:	2480      	movs	r4, #128	; 0x80
 800bd90:	0224      	lsls	r4, r4, #8
 800bd92:	432c      	orrs	r4, r5
 800bd94:	50d4      	str	r4, [r2, r3]
 800bd96:	e7c2      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800bd98:	4a88      	ldr	r2, [pc, #544]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bd9a:	23a8      	movs	r3, #168	; 0xa8
 800bd9c:	58d4      	ldr	r4, [r2, r3]
 800bd9e:	4d88      	ldr	r5, [pc, #544]	; (800bfc0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800bda0:	402c      	ands	r4, r5
 800bda2:	50d4      	str	r4, [r2, r3]
 800bda4:	58d5      	ldr	r5, [r2, r3]
 800bda6:	2480      	movs	r4, #128	; 0x80
 800bda8:	0324      	lsls	r4, r4, #12
 800bdaa:	432c      	orrs	r4, r5
 800bdac:	50d4      	str	r4, [r2, r3]
 800bdae:	e7b6      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800bdb0:	680b      	ldr	r3, [r1, #0]
 800bdb2:	4a7c      	ldr	r2, [pc, #496]	; (800bfa4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d01a      	beq.n	800bdee <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800bdb8:	4a7b      	ldr	r2, [pc, #492]	; (800bfa8 <RemapAndLinkDMAtoUARTTx+0x338>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d022      	beq.n	800be04 <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800bdbe:	4a7b      	ldr	r2, [pc, #492]	; (800bfac <RemapAndLinkDMAtoUARTTx+0x33c>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d02b      	beq.n	800be1c <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800bdc4:	4a7a      	ldr	r2, [pc, #488]	; (800bfb0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d034      	beq.n	800be34 <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800bdca:	4a7a      	ldr	r2, [pc, #488]	; (800bfb4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d03c      	beq.n	800be4a <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800bdd0:	4a79      	ldr	r2, [pc, #484]	; (800bfb8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d1a3      	bne.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800bdd6:	4a79      	ldr	r2, [pc, #484]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bdd8:	23a8      	movs	r3, #168	; 0xa8
 800bdda:	58d4      	ldr	r4, [r2, r3]
 800bddc:	4d78      	ldr	r5, [pc, #480]	; (800bfc0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800bdde:	402c      	ands	r4, r5
 800bde0:	50d4      	str	r4, [r2, r3]
 800bde2:	58d5      	ldr	r5, [r2, r3]
 800bde4:	2490      	movs	r4, #144	; 0x90
 800bde6:	0324      	lsls	r4, r4, #12
 800bde8:	432c      	orrs	r4, r5
 800bdea:	50d4      	str	r4, [r2, r3]
 800bdec:	e797      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800bdee:	4a75      	ldr	r2, [pc, #468]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bdf0:	23a8      	movs	r3, #168	; 0xa8
 800bdf2:	58d4      	ldr	r4, [r2, r3]
 800bdf4:	25f0      	movs	r5, #240	; 0xf0
 800bdf6:	43ac      	bics	r4, r5
 800bdf8:	50d4      	str	r4, [r2, r3]
 800bdfa:	58d4      	ldr	r4, [r2, r3]
 800bdfc:	3d60      	subs	r5, #96	; 0x60
 800bdfe:	432c      	orrs	r4, r5
 800be00:	50d4      	str	r4, [r2, r3]
 800be02:	e78c      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800be04:	4a6f      	ldr	r2, [pc, #444]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800be06:	23a8      	movs	r3, #168	; 0xa8
 800be08:	58d4      	ldr	r4, [r2, r3]
 800be0a:	4d6f      	ldr	r5, [pc, #444]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800be0c:	402c      	ands	r4, r5
 800be0e:	50d4      	str	r4, [r2, r3]
 800be10:	58d5      	ldr	r5, [r2, r3]
 800be12:	2490      	movs	r4, #144	; 0x90
 800be14:	0224      	lsls	r4, r4, #8
 800be16:	432c      	orrs	r4, r5
 800be18:	50d4      	str	r4, [r2, r3]
 800be1a:	e780      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800be1c:	4a69      	ldr	r2, [pc, #420]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800be1e:	23a8      	movs	r3, #168	; 0xa8
 800be20:	58d4      	ldr	r4, [r2, r3]
 800be22:	4d6a      	ldr	r5, [pc, #424]	; (800bfcc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800be24:	402c      	ands	r4, r5
 800be26:	50d4      	str	r4, [r2, r3]
 800be28:	58d5      	ldr	r5, [r2, r3]
 800be2a:	2490      	movs	r4, #144	; 0x90
 800be2c:	0524      	lsls	r4, r4, #20
 800be2e:	432c      	orrs	r4, r5
 800be30:	50d4      	str	r4, [r2, r3]
 800be32:	e774      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800be34:	4a61      	ldr	r2, [pc, #388]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800be36:	23a8      	movs	r3, #168	; 0xa8
 800be38:	58d4      	ldr	r4, [r2, r3]
 800be3a:	250f      	movs	r5, #15
 800be3c:	43ac      	bics	r4, r5
 800be3e:	50d4      	str	r4, [r2, r3]
 800be40:	58d4      	ldr	r4, [r2, r3]
 800be42:	3d06      	subs	r5, #6
 800be44:	432c      	orrs	r4, r5
 800be46:	50d4      	str	r4, [r2, r3]
 800be48:	e769      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800be4a:	4a5c      	ldr	r2, [pc, #368]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800be4c:	23a8      	movs	r3, #168	; 0xa8
 800be4e:	58d4      	ldr	r4, [r2, r3]
 800be50:	4d5d      	ldr	r5, [pc, #372]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800be52:	402c      	ands	r4, r5
 800be54:	50d4      	str	r4, [r2, r3]
 800be56:	58d5      	ldr	r5, [r2, r3]
 800be58:	2490      	movs	r4, #144	; 0x90
 800be5a:	0224      	lsls	r4, r4, #8
 800be5c:	432c      	orrs	r4, r5
 800be5e:	50d4      	str	r4, [r2, r3]
 800be60:	e75d      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800be62:	680b      	ldr	r3, [r1, #0]
 800be64:	4a4f      	ldr	r2, [pc, #316]	; (800bfa4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d01b      	beq.n	800bea2 <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800be6a:	4a4f      	ldr	r2, [pc, #316]	; (800bfa8 <RemapAndLinkDMAtoUARTTx+0x338>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d023      	beq.n	800beb8 <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800be70:	4a4e      	ldr	r2, [pc, #312]	; (800bfac <RemapAndLinkDMAtoUARTTx+0x33c>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d02c      	beq.n	800bed0 <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800be76:	4a4e      	ldr	r2, [pc, #312]	; (800bfb0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d035      	beq.n	800bee8 <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800be7c:	4a4d      	ldr	r2, [pc, #308]	; (800bfb4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d03d      	beq.n	800befe <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800be82:	4a4d      	ldr	r2, [pc, #308]	; (800bfb8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d000      	beq.n	800be8a <RemapAndLinkDMAtoUARTTx+0x21a>
 800be88:	e749      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800be8a:	4a4c      	ldr	r2, [pc, #304]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800be8c:	23a8      	movs	r3, #168	; 0xa8
 800be8e:	58d4      	ldr	r4, [r2, r3]
 800be90:	4d4b      	ldr	r5, [pc, #300]	; (800bfc0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800be92:	402c      	ands	r4, r5
 800be94:	50d4      	str	r4, [r2, r3]
 800be96:	58d5      	ldr	r5, [r2, r3]
 800be98:	24a0      	movs	r4, #160	; 0xa0
 800be9a:	0324      	lsls	r4, r4, #12
 800be9c:	432c      	orrs	r4, r5
 800be9e:	50d4      	str	r4, [r2, r3]
 800bea0:	e73d      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800bea2:	4a48      	ldr	r2, [pc, #288]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bea4:	23a8      	movs	r3, #168	; 0xa8
 800bea6:	58d4      	ldr	r4, [r2, r3]
 800bea8:	25f0      	movs	r5, #240	; 0xf0
 800beaa:	43ac      	bics	r4, r5
 800beac:	50d4      	str	r4, [r2, r3]
 800beae:	58d4      	ldr	r4, [r2, r3]
 800beb0:	3d50      	subs	r5, #80	; 0x50
 800beb2:	432c      	orrs	r4, r5
 800beb4:	50d4      	str	r4, [r2, r3]
 800beb6:	e732      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800beb8:	4a42      	ldr	r2, [pc, #264]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800beba:	23a8      	movs	r3, #168	; 0xa8
 800bebc:	58d4      	ldr	r4, [r2, r3]
 800bebe:	4d42      	ldr	r5, [pc, #264]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800bec0:	402c      	ands	r4, r5
 800bec2:	50d4      	str	r4, [r2, r3]
 800bec4:	58d5      	ldr	r5, [r2, r3]
 800bec6:	24a0      	movs	r4, #160	; 0xa0
 800bec8:	0224      	lsls	r4, r4, #8
 800beca:	432c      	orrs	r4, r5
 800becc:	50d4      	str	r4, [r2, r3]
 800bece:	e726      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800bed0:	4a3c      	ldr	r2, [pc, #240]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bed2:	23a8      	movs	r3, #168	; 0xa8
 800bed4:	58d4      	ldr	r4, [r2, r3]
 800bed6:	4d3d      	ldr	r5, [pc, #244]	; (800bfcc <RemapAndLinkDMAtoUARTTx+0x35c>)
 800bed8:	402c      	ands	r4, r5
 800beda:	50d4      	str	r4, [r2, r3]
 800bedc:	58d5      	ldr	r5, [r2, r3]
 800bede:	24a0      	movs	r4, #160	; 0xa0
 800bee0:	0524      	lsls	r4, r4, #20
 800bee2:	432c      	orrs	r4, r5
 800bee4:	50d4      	str	r4, [r2, r3]
 800bee6:	e71a      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800bee8:	4a34      	ldr	r2, [pc, #208]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800beea:	23a8      	movs	r3, #168	; 0xa8
 800beec:	58d4      	ldr	r4, [r2, r3]
 800beee:	250f      	movs	r5, #15
 800bef0:	43ac      	bics	r4, r5
 800bef2:	50d4      	str	r4, [r2, r3]
 800bef4:	58d4      	ldr	r4, [r2, r3]
 800bef6:	3d05      	subs	r5, #5
 800bef8:	432c      	orrs	r4, r5
 800befa:	50d4      	str	r4, [r2, r3]
 800befc:	e70f      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800befe:	4a2f      	ldr	r2, [pc, #188]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bf00:	23a8      	movs	r3, #168	; 0xa8
 800bf02:	58d4      	ldr	r4, [r2, r3]
 800bf04:	4d30      	ldr	r5, [pc, #192]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800bf06:	402c      	ands	r4, r5
 800bf08:	50d4      	str	r4, [r2, r3]
 800bf0a:	58d5      	ldr	r5, [r2, r3]
 800bf0c:	24a0      	movs	r4, #160	; 0xa0
 800bf0e:	0224      	lsls	r4, r4, #8
 800bf10:	432c      	orrs	r4, r5
 800bf12:	50d4      	str	r4, [r2, r3]
 800bf14:	e703      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800bf16:	680b      	ldr	r3, [r1, #0]
 800bf18:	4a22      	ldr	r2, [pc, #136]	; (800bfa4 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d01b      	beq.n	800bf56 <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800bf1e:	4a22      	ldr	r2, [pc, #136]	; (800bfa8 <RemapAndLinkDMAtoUARTTx+0x338>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d023      	beq.n	800bf6c <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800bf24:	4a21      	ldr	r2, [pc, #132]	; (800bfac <RemapAndLinkDMAtoUARTTx+0x33c>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d052      	beq.n	800bfd0 <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800bf2a:	4a21      	ldr	r2, [pc, #132]	; (800bfb0 <RemapAndLinkDMAtoUARTTx+0x340>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d05b      	beq.n	800bfe8 <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800bf30:	4a20      	ldr	r2, [pc, #128]	; (800bfb4 <RemapAndLinkDMAtoUARTTx+0x344>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d063      	beq.n	800bffe <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800bf36:	4a20      	ldr	r2, [pc, #128]	; (800bfb8 <RemapAndLinkDMAtoUARTTx+0x348>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d000      	beq.n	800bf3e <RemapAndLinkDMAtoUARTTx+0x2ce>
 800bf3c:	e6ef      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800bf3e:	4a1f      	ldr	r2, [pc, #124]	; (800bfbc <RemapAndLinkDMAtoUARTTx+0x34c>)
 800bf40:	23a8      	movs	r3, #168	; 0xa8
 800bf42:	58d4      	ldr	r4, [r2, r3]
 800bf44:	4d1e      	ldr	r5, [pc, #120]	; (800bfc0 <RemapAndLinkDMAtoUARTTx+0x350>)
 800bf46:	402c      	ands	r4, r5
 800bf48:	50d4      	str	r4, [r2, r3]
 800bf4a:	58d5      	ldr	r5, [r2, r3]
 800bf4c:	24b0      	movs	r4, #176	; 0xb0
 800bf4e:	0324      	lsls	r4, r4, #12
 800bf50:	432c      	orrs	r4, r5
 800bf52:	50d4      	str	r4, [r2, r3]
 800bf54:	e6e3      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800bf56:	4a1b      	ldr	r2, [pc, #108]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bf58:	23a8      	movs	r3, #168	; 0xa8
 800bf5a:	58d4      	ldr	r4, [r2, r3]
 800bf5c:	25f0      	movs	r5, #240	; 0xf0
 800bf5e:	43ac      	bics	r4, r5
 800bf60:	50d4      	str	r4, [r2, r3]
 800bf62:	58d4      	ldr	r4, [r2, r3]
 800bf64:	3d40      	subs	r5, #64	; 0x40
 800bf66:	432c      	orrs	r4, r5
 800bf68:	50d4      	str	r4, [r2, r3]
 800bf6a:	e6d8      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800bf6c:	4a15      	ldr	r2, [pc, #84]	; (800bfc4 <RemapAndLinkDMAtoUARTTx+0x354>)
 800bf6e:	23a8      	movs	r3, #168	; 0xa8
 800bf70:	58d4      	ldr	r4, [r2, r3]
 800bf72:	4d15      	ldr	r5, [pc, #84]	; (800bfc8 <RemapAndLinkDMAtoUARTTx+0x358>)
 800bf74:	402c      	ands	r4, r5
 800bf76:	50d4      	str	r4, [r2, r3]
 800bf78:	58d5      	ldr	r5, [r2, r3]
 800bf7a:	24b0      	movs	r4, #176	; 0xb0
 800bf7c:	0224      	lsls	r4, r4, #8
 800bf7e:	432c      	orrs	r4, r5
 800bf80:	50d4      	str	r4, [r2, r3]
 800bf82:	e6cc      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
 800bf84:	40013800 	.word	0x40013800
 800bf88:	40004400 	.word	0x40004400
 800bf8c:	40004800 	.word	0x40004800
 800bf90:	40004c00 	.word	0x40004c00
 800bf94:	40005000 	.word	0x40005000
 800bf98:	40011400 	.word	0x40011400
 800bf9c:	40011800 	.word	0x40011800
 800bfa0:	40011c00 	.word	0x40011c00
 800bfa4:	4002001c 	.word	0x4002001c
 800bfa8:	40020044 	.word	0x40020044
 800bfac:	40020080 	.word	0x40020080
 800bfb0:	40020408 	.word	0x40020408
 800bfb4:	40020444 	.word	0x40020444
 800bfb8:	40020458 	.word	0x40020458
 800bfbc:	40020400 	.word	0x40020400
 800bfc0:	fff0ffff 	.word	0xfff0ffff
 800bfc4:	40020000 	.word	0x40020000
 800bfc8:	ffff0fff 	.word	0xffff0fff
 800bfcc:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800bfd0:	4ab4      	ldr	r2, [pc, #720]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bfd2:	23a8      	movs	r3, #168	; 0xa8
 800bfd4:	58d4      	ldr	r4, [r2, r3]
 800bfd6:	4db4      	ldr	r5, [pc, #720]	; (800c2a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800bfd8:	402c      	ands	r4, r5
 800bfda:	50d4      	str	r4, [r2, r3]
 800bfdc:	58d5      	ldr	r5, [r2, r3]
 800bfde:	24b0      	movs	r4, #176	; 0xb0
 800bfe0:	0524      	lsls	r4, r4, #20
 800bfe2:	432c      	orrs	r4, r5
 800bfe4:	50d4      	str	r4, [r2, r3]
 800bfe6:	e69a      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800bfe8:	4ab0      	ldr	r2, [pc, #704]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bfea:	23a8      	movs	r3, #168	; 0xa8
 800bfec:	58d4      	ldr	r4, [r2, r3]
 800bfee:	250f      	movs	r5, #15
 800bff0:	43ac      	bics	r4, r5
 800bff2:	50d4      	str	r4, [r2, r3]
 800bff4:	58d4      	ldr	r4, [r2, r3]
 800bff6:	3d04      	subs	r5, #4
 800bff8:	432c      	orrs	r4, r5
 800bffa:	50d4      	str	r4, [r2, r3]
 800bffc:	e68f      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800bffe:	4aab      	ldr	r2, [pc, #684]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c000:	23a8      	movs	r3, #168	; 0xa8
 800c002:	58d4      	ldr	r4, [r2, r3]
 800c004:	4daa      	ldr	r5, [pc, #680]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c006:	402c      	ands	r4, r5
 800c008:	50d4      	str	r4, [r2, r3]
 800c00a:	58d5      	ldr	r5, [r2, r3]
 800c00c:	24b0      	movs	r4, #176	; 0xb0
 800c00e:	0224      	lsls	r4, r4, #8
 800c010:	432c      	orrs	r4, r5
 800c012:	50d4      	str	r4, [r2, r3]
 800c014:	e683      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800c016:	680b      	ldr	r3, [r1, #0]
 800c018:	4aa6      	ldr	r2, [pc, #664]	; (800c2b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d01b      	beq.n	800c056 <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800c01e:	4aa6      	ldr	r2, [pc, #664]	; (800c2b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d023      	beq.n	800c06c <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800c024:	4aa5      	ldr	r2, [pc, #660]	; (800c2bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d02c      	beq.n	800c084 <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800c02a:	4aa5      	ldr	r2, [pc, #660]	; (800c2c0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d035      	beq.n	800c09c <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800c030:	4aa4      	ldr	r2, [pc, #656]	; (800c2c4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d03d      	beq.n	800c0b2 <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800c036:	4aa4      	ldr	r2, [pc, #656]	; (800c2c8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d000      	beq.n	800c03e <RemapAndLinkDMAtoUARTTx+0x3ce>
 800c03c:	e66f      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800c03e:	4a9b      	ldr	r2, [pc, #620]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c040:	23a8      	movs	r3, #168	; 0xa8
 800c042:	58d4      	ldr	r4, [r2, r3]
 800c044:	4da1      	ldr	r5, [pc, #644]	; (800c2cc <RemapAndLinkDMAtoUARTTx+0x65c>)
 800c046:	402c      	ands	r4, r5
 800c048:	50d4      	str	r4, [r2, r3]
 800c04a:	58d5      	ldr	r5, [r2, r3]
 800c04c:	24c0      	movs	r4, #192	; 0xc0
 800c04e:	0324      	lsls	r4, r4, #12
 800c050:	432c      	orrs	r4, r5
 800c052:	50d4      	str	r4, [r2, r3]
 800c054:	e663      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800c056:	4a93      	ldr	r2, [pc, #588]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c058:	23a8      	movs	r3, #168	; 0xa8
 800c05a:	58d4      	ldr	r4, [r2, r3]
 800c05c:	25f0      	movs	r5, #240	; 0xf0
 800c05e:	43ac      	bics	r4, r5
 800c060:	50d4      	str	r4, [r2, r3]
 800c062:	58d4      	ldr	r4, [r2, r3]
 800c064:	3d30      	subs	r5, #48	; 0x30
 800c066:	432c      	orrs	r4, r5
 800c068:	50d4      	str	r4, [r2, r3]
 800c06a:	e658      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800c06c:	4a8d      	ldr	r2, [pc, #564]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c06e:	23a8      	movs	r3, #168	; 0xa8
 800c070:	58d4      	ldr	r4, [r2, r3]
 800c072:	4d8f      	ldr	r5, [pc, #572]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c074:	402c      	ands	r4, r5
 800c076:	50d4      	str	r4, [r2, r3]
 800c078:	58d5      	ldr	r5, [r2, r3]
 800c07a:	24c0      	movs	r4, #192	; 0xc0
 800c07c:	0224      	lsls	r4, r4, #8
 800c07e:	432c      	orrs	r4, r5
 800c080:	50d4      	str	r4, [r2, r3]
 800c082:	e64c      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800c084:	4a87      	ldr	r2, [pc, #540]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c086:	23a8      	movs	r3, #168	; 0xa8
 800c088:	58d4      	ldr	r4, [r2, r3]
 800c08a:	4d87      	ldr	r5, [pc, #540]	; (800c2a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c08c:	402c      	ands	r4, r5
 800c08e:	50d4      	str	r4, [r2, r3]
 800c090:	58d5      	ldr	r5, [r2, r3]
 800c092:	24c0      	movs	r4, #192	; 0xc0
 800c094:	0524      	lsls	r4, r4, #20
 800c096:	432c      	orrs	r4, r5
 800c098:	50d4      	str	r4, [r2, r3]
 800c09a:	e640      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800c09c:	4a83      	ldr	r2, [pc, #524]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c09e:	23a8      	movs	r3, #168	; 0xa8
 800c0a0:	58d4      	ldr	r4, [r2, r3]
 800c0a2:	250f      	movs	r5, #15
 800c0a4:	43ac      	bics	r4, r5
 800c0a6:	50d4      	str	r4, [r2, r3]
 800c0a8:	58d4      	ldr	r4, [r2, r3]
 800c0aa:	3d03      	subs	r5, #3
 800c0ac:	432c      	orrs	r4, r5
 800c0ae:	50d4      	str	r4, [r2, r3]
 800c0b0:	e635      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800c0b2:	4a7e      	ldr	r2, [pc, #504]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c0b4:	23a8      	movs	r3, #168	; 0xa8
 800c0b6:	58d4      	ldr	r4, [r2, r3]
 800c0b8:	4d7d      	ldr	r5, [pc, #500]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c0ba:	402c      	ands	r4, r5
 800c0bc:	50d4      	str	r4, [r2, r3]
 800c0be:	58d5      	ldr	r5, [r2, r3]
 800c0c0:	24c0      	movs	r4, #192	; 0xc0
 800c0c2:	0224      	lsls	r4, r4, #8
 800c0c4:	432c      	orrs	r4, r5
 800c0c6:	50d4      	str	r4, [r2, r3]
 800c0c8:	e629      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800c0ca:	680b      	ldr	r3, [r1, #0]
 800c0cc:	4a79      	ldr	r2, [pc, #484]	; (800c2b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d01b      	beq.n	800c10a <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800c0d2:	4a79      	ldr	r2, [pc, #484]	; (800c2b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d023      	beq.n	800c120 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800c0d8:	4a78      	ldr	r2, [pc, #480]	; (800c2bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d02c      	beq.n	800c138 <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800c0de:	4a78      	ldr	r2, [pc, #480]	; (800c2c0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d035      	beq.n	800c150 <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800c0e4:	4a77      	ldr	r2, [pc, #476]	; (800c2c4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d03d      	beq.n	800c166 <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800c0ea:	4a77      	ldr	r2, [pc, #476]	; (800c2c8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d000      	beq.n	800c0f2 <RemapAndLinkDMAtoUARTTx+0x482>
 800c0f0:	e615      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800c0f2:	4a6e      	ldr	r2, [pc, #440]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c0f4:	23a8      	movs	r3, #168	; 0xa8
 800c0f6:	58d4      	ldr	r4, [r2, r3]
 800c0f8:	4d74      	ldr	r5, [pc, #464]	; (800c2cc <RemapAndLinkDMAtoUARTTx+0x65c>)
 800c0fa:	402c      	ands	r4, r5
 800c0fc:	50d4      	str	r4, [r2, r3]
 800c0fe:	58d5      	ldr	r5, [r2, r3]
 800c100:	24d0      	movs	r4, #208	; 0xd0
 800c102:	0324      	lsls	r4, r4, #12
 800c104:	432c      	orrs	r4, r5
 800c106:	50d4      	str	r4, [r2, r3]
 800c108:	e609      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c10a:	4a66      	ldr	r2, [pc, #408]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c10c:	23a8      	movs	r3, #168	; 0xa8
 800c10e:	58d4      	ldr	r4, [r2, r3]
 800c110:	25f0      	movs	r5, #240	; 0xf0
 800c112:	43ac      	bics	r4, r5
 800c114:	50d4      	str	r4, [r2, r3]
 800c116:	58d4      	ldr	r4, [r2, r3]
 800c118:	3d20      	subs	r5, #32
 800c11a:	432c      	orrs	r4, r5
 800c11c:	50d4      	str	r4, [r2, r3]
 800c11e:	e5fe      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c120:	4a60      	ldr	r2, [pc, #384]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c122:	23a8      	movs	r3, #168	; 0xa8
 800c124:	58d4      	ldr	r4, [r2, r3]
 800c126:	4d62      	ldr	r5, [pc, #392]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c128:	402c      	ands	r4, r5
 800c12a:	50d4      	str	r4, [r2, r3]
 800c12c:	58d5      	ldr	r5, [r2, r3]
 800c12e:	24d0      	movs	r4, #208	; 0xd0
 800c130:	0224      	lsls	r4, r4, #8
 800c132:	432c      	orrs	r4, r5
 800c134:	50d4      	str	r4, [r2, r3]
 800c136:	e5f2      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c138:	4a5a      	ldr	r2, [pc, #360]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c13a:	23a8      	movs	r3, #168	; 0xa8
 800c13c:	58d4      	ldr	r4, [r2, r3]
 800c13e:	4d5a      	ldr	r5, [pc, #360]	; (800c2a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c140:	402c      	ands	r4, r5
 800c142:	50d4      	str	r4, [r2, r3]
 800c144:	58d5      	ldr	r5, [r2, r3]
 800c146:	24d0      	movs	r4, #208	; 0xd0
 800c148:	0524      	lsls	r4, r4, #20
 800c14a:	432c      	orrs	r4, r5
 800c14c:	50d4      	str	r4, [r2, r3]
 800c14e:	e5e6      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c150:	4a56      	ldr	r2, [pc, #344]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c152:	23a8      	movs	r3, #168	; 0xa8
 800c154:	58d4      	ldr	r4, [r2, r3]
 800c156:	250f      	movs	r5, #15
 800c158:	43ac      	bics	r4, r5
 800c15a:	50d4      	str	r4, [r2, r3]
 800c15c:	58d4      	ldr	r4, [r2, r3]
 800c15e:	3d02      	subs	r5, #2
 800c160:	432c      	orrs	r4, r5
 800c162:	50d4      	str	r4, [r2, r3]
 800c164:	e5db      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c166:	4a51      	ldr	r2, [pc, #324]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c168:	23a8      	movs	r3, #168	; 0xa8
 800c16a:	58d4      	ldr	r4, [r2, r3]
 800c16c:	4d50      	ldr	r5, [pc, #320]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c16e:	402c      	ands	r4, r5
 800c170:	50d4      	str	r4, [r2, r3]
 800c172:	58d5      	ldr	r5, [r2, r3]
 800c174:	24d0      	movs	r4, #208	; 0xd0
 800c176:	0224      	lsls	r4, r4, #8
 800c178:	432c      	orrs	r4, r5
 800c17a:	50d4      	str	r4, [r2, r3]
 800c17c:	e5cf      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c17e:	680b      	ldr	r3, [r1, #0]
 800c180:	4a4c      	ldr	r2, [pc, #304]	; (800c2b4 <RemapAndLinkDMAtoUARTTx+0x644>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d01b      	beq.n	800c1be <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c186:	4a4c      	ldr	r2, [pc, #304]	; (800c2b8 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d023      	beq.n	800c1d4 <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c18c:	4a4b      	ldr	r2, [pc, #300]	; (800c2bc <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d02c      	beq.n	800c1ec <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c192:	4a4b      	ldr	r2, [pc, #300]	; (800c2c0 <RemapAndLinkDMAtoUARTTx+0x650>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d035      	beq.n	800c204 <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c198:	4a4a      	ldr	r2, [pc, #296]	; (800c2c4 <RemapAndLinkDMAtoUARTTx+0x654>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d03d      	beq.n	800c21a <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c19e:	4a4a      	ldr	r2, [pc, #296]	; (800c2c8 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d000      	beq.n	800c1a6 <RemapAndLinkDMAtoUARTTx+0x536>
 800c1a4:	e5bb      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c1a6:	4a41      	ldr	r2, [pc, #260]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c1a8:	23a8      	movs	r3, #168	; 0xa8
 800c1aa:	58d4      	ldr	r4, [r2, r3]
 800c1ac:	4d47      	ldr	r5, [pc, #284]	; (800c2cc <RemapAndLinkDMAtoUARTTx+0x65c>)
 800c1ae:	402c      	ands	r4, r5
 800c1b0:	50d4      	str	r4, [r2, r3]
 800c1b2:	58d5      	ldr	r5, [r2, r3]
 800c1b4:	24e0      	movs	r4, #224	; 0xe0
 800c1b6:	0324      	lsls	r4, r4, #12
 800c1b8:	432c      	orrs	r4, r5
 800c1ba:	50d4      	str	r4, [r2, r3]
 800c1bc:	e5af      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c1be:	4a39      	ldr	r2, [pc, #228]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c1c0:	23a8      	movs	r3, #168	; 0xa8
 800c1c2:	58d4      	ldr	r4, [r2, r3]
 800c1c4:	25f0      	movs	r5, #240	; 0xf0
 800c1c6:	43ac      	bics	r4, r5
 800c1c8:	50d4      	str	r4, [r2, r3]
 800c1ca:	58d4      	ldr	r4, [r2, r3]
 800c1cc:	3d10      	subs	r5, #16
 800c1ce:	432c      	orrs	r4, r5
 800c1d0:	50d4      	str	r4, [r2, r3]
 800c1d2:	e5a4      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c1d4:	4a33      	ldr	r2, [pc, #204]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c1d6:	23a8      	movs	r3, #168	; 0xa8
 800c1d8:	58d4      	ldr	r4, [r2, r3]
 800c1da:	4d35      	ldr	r5, [pc, #212]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c1dc:	402c      	ands	r4, r5
 800c1de:	50d4      	str	r4, [r2, r3]
 800c1e0:	58d5      	ldr	r5, [r2, r3]
 800c1e2:	24e0      	movs	r4, #224	; 0xe0
 800c1e4:	0224      	lsls	r4, r4, #8
 800c1e6:	432c      	orrs	r4, r5
 800c1e8:	50d4      	str	r4, [r2, r3]
 800c1ea:	e598      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c1ec:	4a2d      	ldr	r2, [pc, #180]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c1ee:	23a8      	movs	r3, #168	; 0xa8
 800c1f0:	58d4      	ldr	r4, [r2, r3]
 800c1f2:	4d2d      	ldr	r5, [pc, #180]	; (800c2a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c1f4:	402c      	ands	r4, r5
 800c1f6:	50d4      	str	r4, [r2, r3]
 800c1f8:	58d5      	ldr	r5, [r2, r3]
 800c1fa:	24e0      	movs	r4, #224	; 0xe0
 800c1fc:	0524      	lsls	r4, r4, #20
 800c1fe:	432c      	orrs	r4, r5
 800c200:	50d4      	str	r4, [r2, r3]
 800c202:	e58c      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c204:	4a29      	ldr	r2, [pc, #164]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c206:	23a8      	movs	r3, #168	; 0xa8
 800c208:	58d4      	ldr	r4, [r2, r3]
 800c20a:	250f      	movs	r5, #15
 800c20c:	43ac      	bics	r4, r5
 800c20e:	50d4      	str	r4, [r2, r3]
 800c210:	58d4      	ldr	r4, [r2, r3]
 800c212:	3d01      	subs	r5, #1
 800c214:	432c      	orrs	r4, r5
 800c216:	50d4      	str	r4, [r2, r3]
 800c218:	e581      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c21a:	4a24      	ldr	r2, [pc, #144]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c21c:	23a8      	movs	r3, #168	; 0xa8
 800c21e:	58d4      	ldr	r4, [r2, r3]
 800c220:	4d23      	ldr	r5, [pc, #140]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c222:	402c      	ands	r4, r5
 800c224:	50d4      	str	r4, [r2, r3]
 800c226:	58d5      	ldr	r5, [r2, r3]
 800c228:	24e0      	movs	r4, #224	; 0xe0
 800c22a:	0224      	lsls	r4, r4, #8
 800c22c:	432c      	orrs	r4, r5
 800c22e:	50d4      	str	r4, [r2, r3]
 800c230:	e575      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c232:	4a1c      	ldr	r2, [pc, #112]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c234:	23a8      	movs	r3, #168	; 0xa8
 800c236:	58d5      	ldr	r5, [r2, r3]
 800c238:	26f0      	movs	r6, #240	; 0xf0
 800c23a:	43b5      	bics	r5, r6
 800c23c:	50d5      	str	r5, [r2, r3]
 800c23e:	58d4      	ldr	r4, [r2, r3]
 800c240:	4334      	orrs	r4, r6
 800c242:	50d4      	str	r4, [r2, r3]
 800c244:	e56b      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c246:	4a17      	ldr	r2, [pc, #92]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c248:	23a8      	movs	r3, #168	; 0xa8
 800c24a:	58d4      	ldr	r4, [r2, r3]
 800c24c:	4d18      	ldr	r5, [pc, #96]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c24e:	402c      	ands	r4, r5
 800c250:	50d4      	str	r4, [r2, r3]
 800c252:	58d5      	ldr	r5, [r2, r3]
 800c254:	24f0      	movs	r4, #240	; 0xf0
 800c256:	0224      	lsls	r4, r4, #8
 800c258:	432c      	orrs	r4, r5
 800c25a:	50d4      	str	r4, [r2, r3]
 800c25c:	e55f      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c25e:	4a11      	ldr	r2, [pc, #68]	; (800c2a4 <RemapAndLinkDMAtoUARTTx+0x634>)
 800c260:	23a8      	movs	r3, #168	; 0xa8
 800c262:	58d4      	ldr	r4, [r2, r3]
 800c264:	4d10      	ldr	r5, [pc, #64]	; (800c2a8 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c266:	402c      	ands	r4, r5
 800c268:	50d4      	str	r4, [r2, r3]
 800c26a:	58d5      	ldr	r5, [r2, r3]
 800c26c:	24f0      	movs	r4, #240	; 0xf0
 800c26e:	0524      	lsls	r4, r4, #20
 800c270:	432c      	orrs	r4, r5
 800c272:	50d4      	str	r4, [r2, r3]
 800c274:	e553      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c276:	4a0d      	ldr	r2, [pc, #52]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c278:	23a8      	movs	r3, #168	; 0xa8
 800c27a:	58d5      	ldr	r5, [r2, r3]
 800c27c:	260f      	movs	r6, #15
 800c27e:	43b5      	bics	r5, r6
 800c280:	50d5      	str	r5, [r2, r3]
 800c282:	58d4      	ldr	r4, [r2, r3]
 800c284:	4334      	orrs	r4, r6
 800c286:	50d4      	str	r4, [r2, r3]
 800c288:	e549      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c28a:	4a08      	ldr	r2, [pc, #32]	; (800c2ac <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c28c:	23a8      	movs	r3, #168	; 0xa8
 800c28e:	58d4      	ldr	r4, [r2, r3]
 800c290:	4d07      	ldr	r5, [pc, #28]	; (800c2b0 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c292:	402c      	ands	r4, r5
 800c294:	50d4      	str	r4, [r2, r3]
 800c296:	58d5      	ldr	r5, [r2, r3]
 800c298:	24f0      	movs	r4, #240	; 0xf0
 800c29a:	0224      	lsls	r4, r4, #8
 800c29c:	432c      	orrs	r4, r5
 800c29e:	50d4      	str	r4, [r2, r3]
 800c2a0:	e53d      	b.n	800bd1e <RemapAndLinkDMAtoUARTTx+0xae>
 800c2a2:	46c0      	nop			; (mov r8, r8)
 800c2a4:	40020000 	.word	0x40020000
 800c2a8:	f0ffffff 	.word	0xf0ffffff
 800c2ac:	40020400 	.word	0x40020400
 800c2b0:	ffff0fff 	.word	0xffff0fff
 800c2b4:	4002001c 	.word	0x4002001c
 800c2b8:	40020044 	.word	0x40020044
 800c2bc:	40020080 	.word	0x40020080
 800c2c0:	40020408 	.word	0x40020408
 800c2c4:	40020444 	.word	0x40020444
 800c2c8:	40020458 	.word	0x40020458
 800c2cc:	fff0ffff 	.word	0xfff0ffff

0800c2d0 <DMA_MSG_TX_Setup>:
{	
 800c2d0:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <DMA_MSG_TX_Setup+0x38>)
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d012      	beq.n	800c300 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <DMA_MSG_TX_Setup+0x38>)
 800c2dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d010      	beq.n	800c304 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c2e2:	4a09      	ldr	r2, [pc, #36]	; (800c308 <DMA_MSG_TX_Setup+0x38>)
 800c2e4:	2394      	movs	r3, #148	; 0x94
 800c2e6:	58d3      	ldr	r3, [r2, r3]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d007      	beq.n	800c2fc <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c2ec:	0021      	movs	r1, r4
 800c2ee:	f7ff fcbf 	bl	800bc70 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	0020      	movs	r0, r4
 800c2f6:	f7ff f835 	bl	800b364 <SetupDMAInterrupts>
}
 800c2fa:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c2fc:	4c03      	ldr	r4, [pc, #12]	; (800c30c <DMA_MSG_TX_Setup+0x3c>)
 800c2fe:	e7f5      	b.n	800c2ec <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c300:	4c01      	ldr	r4, [pc, #4]	; (800c308 <DMA_MSG_TX_Setup+0x38>)
 800c302:	e7f3      	b.n	800c2ec <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c304:	4c02      	ldr	r4, [pc, #8]	; (800c310 <DMA_MSG_TX_Setup+0x40>)
 800c306:	e7f1      	b.n	800c2ec <DMA_MSG_TX_Setup+0x1c>
 800c308:	2000114c 	.word	0x2000114c
 800c30c:	200011bc 	.word	0x200011bc
 800c310:	20001184 	.word	0x20001184

0800c314 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c314:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c316:	4807      	ldr	r0, [pc, #28]	; (800c334 <CRC_Init+0x20>)
 800c318:	4b07      	ldr	r3, [pc, #28]	; (800c338 <CRC_Init+0x24>)
 800c31a:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c31c:	2310      	movs	r3, #16
 800c31e:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800c320:	2300      	movs	r3, #0
 800c322:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c324:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800c326:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800c328:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c32a:	3303      	adds	r3, #3
 800c32c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c32e:	f004 fe05 	bl	8010f3c <HAL_CRC_Init>
}
 800c332:	bd10      	pop	{r4, pc}
 800c334:	20006684 	.word	0x20006684
 800c338:	40023000 	.word	0x40023000

0800c33c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c33c:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c33e:	4a05      	ldr	r2, [pc, #20]	; (800c354 <HAL_CRC_MspInit+0x18>)
 800c340:	6951      	ldr	r1, [r2, #20]
 800c342:	2340      	movs	r3, #64	; 0x40
 800c344:	4319      	orrs	r1, r3
 800c346:	6151      	str	r1, [r2, #20]
 800c348:	6952      	ldr	r2, [r2, #20]
 800c34a:	4013      	ands	r3, r2
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	9b01      	ldr	r3, [sp, #4]
}
 800c350:	b002      	add	sp, #8
 800c352:	4770      	bx	lr
 800c354:	40021000 	.word	0x40021000

0800c358 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	0004      	movs	r4, r0
 800c35c:	000d      	movs	r5, r1
  uint8_t pTemp;
  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800c35e:	2800      	cmp	r0, #0
 800c360:	d015      	beq.n	800c38e <CalculateCRC8+0x36>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800c362:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800c364:	2900      	cmp	r1, #0
 800c366:	d100      	bne.n	800c36a <CalculateCRC8+0x12>
}
 800c368:	bd70      	pop	{r4, r5, r6, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c36a:	088e      	lsrs	r6, r1, #2
 800c36c:	0032      	movs	r2, r6
 800c36e:	0021      	movs	r1, r4
 800c370:	4808      	ldr	r0, [pc, #32]	; (800c394 <CalculateCRC8+0x3c>)
 800c372:	f004 fe3f 	bl	8010ff4 <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800c376:	07ab      	lsls	r3, r5, #30
 800c378:	d101      	bne.n	800c37e <CalculateCRC8+0x26>
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c37a:	b2c0      	uxtb	r0, r0
 800c37c:	e7f4      	b.n	800c368 <CalculateCRC8+0x10>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800c37e:	00b1      	lsls	r1, r6, #2
 800c380:	1861      	adds	r1, r4, r1
 800c382:	2201      	movs	r2, #1
 800c384:	4803      	ldr	r0, [pc, #12]	; (800c394 <CalculateCRC8+0x3c>)
 800c386:	f004 fe0a 	bl	8010f9e <HAL_CRC_Accumulate>
 800c38a:	b2c0      	uxtb	r0, r0
 800c38c:	e7ec      	b.n	800c368 <CalculateCRC8+0x10>
  return 0;
 800c38e:	2000      	movs	r0, #0
 800c390:	e7ea      	b.n	800c368 <CalculateCRC8+0x10>
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	20006684 	.word	0x20006684

0800c398 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	0006      	movs	r6, r0
 800c39c:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800c39e:	f005 fb95 	bl	8011acc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c3a2:	4b2a      	ldr	r3, [pc, #168]	; (800c44c <EE_VerifyPageFullWriteVariable+0xb4>)
 800c3a4:	881a      	ldrh	r2, [r3, #0]
 800c3a6:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c3a8:	4b29      	ldr	r3, [pc, #164]	; (800c450 <EE_VerifyPageFullWriteVariable+0xb8>)
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d104      	bne.n	800c3bc <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 800c3b2:	4928      	ldr	r1, [pc, #160]	; (800c454 <EE_VerifyPageFullWriteVariable+0xbc>)
 800c3b4:	428a      	cmp	r2, r1
 800c3b6:	d007      	beq.n	800c3c8 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800c3b8:	3302      	adds	r3, #2
 800c3ba:	e005      	b.n	800c3c8 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	d140      	bne.n	800c442 <EE_VerifyPageFullWriteVariable+0xaa>
				if(PageStatusB == RECEIVE_DATA){
 800c3c0:	4924      	ldr	r1, [pc, #144]	; (800c454 <EE_VerifyPageFullWriteVariable+0xbc>)
 800c3c2:	428b      	cmp	r3, r1
 800c3c4:	d03f      	beq.n	800c446 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEA; /* PageA valid */
 800c3c6:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800c3c8:	4a23      	ldr	r2, [pc, #140]	; (800c458 <EE_VerifyPageFullWriteVariable+0xc0>)
 800c3ca:	189c      	adds	r4, r3, r2
 800c3cc:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800c3ce:	02db      	lsls	r3, r3, #11
 800c3d0:	4a22      	ldr	r2, [pc, #136]	; (800c45c <EE_VerifyPageFullWriteVariable+0xc4>)
 800c3d2:	4694      	mov	ip, r2
 800c3d4:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	3201      	adds	r2, #1
 800c3da:	d006      	beq.n	800c3ea <EE_VerifyPageFullWriteVariable+0x52>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800c3dc:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800c3de:	429c      	cmp	r4, r3
 800c3e0:	d3f9      	bcc.n	800c3d6 <EE_VerifyPageFullWriteVariable+0x3e>
		}
	}
	
	HAL_FLASH_Lock();
 800c3e2:	f005 fb87 	bl	8011af4 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800c3e6:	2080      	movs	r0, #128	; 0x80
}
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800c3ea:	002a      	movs	r2, r5
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	0021      	movs	r1, r4
 800c3f0:	2001      	movs	r0, #1
 800c3f2:	f005 fbb7 	bl	8011b64 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c3f6:	481a      	ldr	r0, [pc, #104]	; (800c460 <EE_VerifyPageFullWriteVariable+0xc8>)
 800c3f8:	f005 fb86 	bl	8011b08 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d003      	beq.n	800c408 <EE_VerifyPageFullWriteVariable+0x70>
				return pFlash.ErrorCode;
 800c400:	4b18      	ldr	r3, [pc, #96]	; (800c464 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c402:	69d8      	ldr	r0, [r3, #28]
 800c404:	b280      	uxth	r0, r0
 800c406:	e7ef      	b.n	800c3e8 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c408:	4a17      	ldr	r2, [pc, #92]	; (800c468 <EE_VerifyPageFullWriteVariable+0xd0>)
 800c40a:	6913      	ldr	r3, [r2, #16]
 800c40c:	2101      	movs	r1, #1
 800c40e:	438b      	bics	r3, r1
 800c410:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800c412:	1ca1      	adds	r1, r4, #2
 800c414:	0032      	movs	r2, r6
 800c416:	2300      	movs	r3, #0
 800c418:	2001      	movs	r0, #1
 800c41a:	f005 fba3 	bl	8011b64 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c41e:	4810      	ldr	r0, [pc, #64]	; (800c460 <EE_VerifyPageFullWriteVariable+0xc8>)
 800c420:	f005 fb72 	bl	8011b08 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800c424:	2800      	cmp	r0, #0
 800c426:	d003      	beq.n	800c430 <EE_VerifyPageFullWriteVariable+0x98>
				return pFlash.ErrorCode;
 800c428:	4b0e      	ldr	r3, [pc, #56]	; (800c464 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c42a:	69d8      	ldr	r0, [r3, #28]
 800c42c:	b280      	uxth	r0, r0
 800c42e:	e7db      	b.n	800c3e8 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c430:	4a0d      	ldr	r2, [pc, #52]	; (800c468 <EE_VerifyPageFullWriteVariable+0xd0>)
 800c432:	6913      	ldr	r3, [r2, #16]
 800c434:	2101      	movs	r1, #1
 800c436:	438b      	bics	r3, r1
 800c438:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800c43a:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c43c:	69d8      	ldr	r0, [r3, #28]
 800c43e:	b280      	uxth	r0, r0
 800c440:	e7d2      	b.n	800c3e8 <EE_VerifyPageFullWriteVariable+0x50>
		return NO_VALID_PAGE;
 800c442:	20ab      	movs	r0, #171	; 0xab
 800c444:	e7d0      	b.n	800c3e8 <EE_VerifyPageFullWriteVariable+0x50>
					return PAGEB; /* PageB valid */
 800c446:	2302      	movs	r3, #2
 800c448:	e7be      	b.n	800c3c8 <EE_VerifyPageFullWriteVariable+0x30>
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	0801e000 	.word	0x0801e000
 800c450:	0801f000 	.word	0x0801f000
 800c454:	0000eeee 	.word	0x0000eeee
 800c458:	0001003c 	.word	0x0001003c
 800c45c:	0801effe 	.word	0x0801effe
 800c460:	0000c350 	.word	0x0000c350
 800c464:	200067b8 	.word	0x200067b8
 800c468:	40022000 	.word	0x40022000

0800c46c <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800c46c:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c46e:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <EE_ReadVariable+0x48>)
 800c470:	881c      	ldrh	r4, [r3, #0]
 800c472:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c474:	4b10      	ldr	r3, [pc, #64]	; (800c4b8 <EE_ReadVariable+0x4c>)
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800c47a:	2c00      	cmp	r4, #0
 800c47c:	d009      	beq.n	800c492 <EE_ReadVariable+0x26>
			else if(PageStatusB == VALID_PAGE){
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d006      	beq.n	800c490 <EE_ReadVariable+0x24>
		return NO_VALID_PAGE;
 800c482:	20ab      	movs	r0, #171	; 0xab
 800c484:	e003      	b.n	800c48e <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800c486:	3b02      	subs	r3, #2
 800c488:	881b      	ldrh	r3, [r3, #0]
 800c48a:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 800c48c:	2000      	movs	r0, #0
}
 800c48e:	bd10      	pop	{r4, pc}
				return PAGEB; /* PageB valid */
 800c490:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800c492:	02e3      	lsls	r3, r4, #11
 800c494:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <EE_ReadVariable+0x50>)
 800c496:	4694      	mov	ip, r2
 800c498:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800c49a:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 800c49c:	4a08      	ldr	r2, [pc, #32]	; (800c4c0 <EE_ReadVariable+0x54>)
 800c49e:	4694      	mov	ip, r2
 800c4a0:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 800c4a2:	881a      	ldrh	r2, [r3, #0]
 800c4a4:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800c4a6:	4282      	cmp	r2, r0
 800c4a8:	d0ed      	beq.n	800c486 <EE_ReadVariable+0x1a>
			Address =Address - 4;
 800c4aa:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	d8f8      	bhi.n	800c4a2 <EE_ReadVariable+0x36>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800c4b0:	2001      	movs	r0, #1
 800c4b2:	e7ec      	b.n	800c48e <EE_ReadVariable+0x22>
 800c4b4:	0801e000 	.word	0x0801e000
 800c4b8:	0801f000 	.word	0x0801f000
 800c4bc:	0801effe 	.word	0x0801effe
 800c4c0:	0801e002 	.word	0x0801e002

0800c4c4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800c4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4c6:	46de      	mov	lr, fp
 800c4c8:	4657      	mov	r7, sl
 800c4ca:	464e      	mov	r6, r9
 800c4cc:	4645      	mov	r5, r8
 800c4ce:	b5e0      	push	{r5, r6, r7, lr}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	0006      	movs	r6, r0
 800c4d4:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 800c4d6:	f005 faf9 	bl	8011acc <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800c4da:	0029      	movs	r1, r5
 800c4dc:	0030      	movs	r0, r6
 800c4de:	f7ff ff5b 	bl	800c398 <EE_VerifyPageFullWriteVariable>
 800c4e2:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800c4e4:	2880      	cmp	r0, #128	; 0x80
 800c4e6:	d009      	beq.n	800c4fc <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 800c4e8:	f005 fb04 	bl	8011af4 <HAL_FLASH_Lock>
}
 800c4ec:	0020      	movs	r0, r4
 800c4ee:	b003      	add	sp, #12
 800c4f0:	bcf0      	pop	{r4, r5, r6, r7}
 800c4f2:	46bb      	mov	fp, r7
 800c4f4:	46b2      	mov	sl, r6
 800c4f6:	46a9      	mov	r9, r5
 800c4f8:	46a0      	mov	r8, r4
 800c4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800c4fc:	f005 fae6 	bl	8011acc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c500:	4b40      	ldr	r3, [pc, #256]	; (800c604 <EE_WriteVariable+0x140>)
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c506:	4a40      	ldr	r2, [pc, #256]	; (800c608 <EE_WriteVariable+0x144>)
 800c508:	8812      	ldrh	r2, [r2, #0]
 800c50a:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d007      	beq.n	800c520 <EE_WriteVariable+0x5c>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800c510:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800c512:	2a00      	cmp	r2, #0
 800c514:	d1e8      	bne.n	800c4e8 <EE_WriteVariable+0x24>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800c516:	4b3c      	ldr	r3, [pc, #240]	; (800c608 <EE_WriteVariable+0x144>)
 800c518:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800c51a:	4b3a      	ldr	r3, [pc, #232]	; (800c604 <EE_WriteVariable+0x140>)
 800c51c:	469a      	mov	sl, r3
 800c51e:	e003      	b.n	800c528 <EE_WriteVariable+0x64>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800c520:	4b38      	ldr	r3, [pc, #224]	; (800c604 <EE_WriteVariable+0x140>)
 800c522:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800c524:	4b38      	ldr	r3, [pc, #224]	; (800c608 <EE_WriteVariable+0x144>)
 800c526:	469a      	mov	sl, r3
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800c528:	4a38      	ldr	r2, [pc, #224]	; (800c60c <EE_WriteVariable+0x148>)
 800c52a:	2300      	movs	r3, #0
 800c52c:	4651      	mov	r1, sl
 800c52e:	2001      	movs	r0, #1
 800c530:	f005 fb18 	bl	8011b64 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c534:	4836      	ldr	r0, [pc, #216]	; (800c610 <EE_WriteVariable+0x14c>)
 800c536:	f005 fae7 	bl	8011b08 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d003      	beq.n	800c546 <EE_WriteVariable+0x82>
		return pFlash.ErrorCode;
 800c53e:	4b35      	ldr	r3, [pc, #212]	; (800c614 <EE_WriteVariable+0x150>)
 800c540:	69dc      	ldr	r4, [r3, #28]
 800c542:	b2a4      	uxth	r4, r4
 800c544:	e7d0      	b.n	800c4e8 <EE_WriteVariable+0x24>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c546:	4a34      	ldr	r2, [pc, #208]	; (800c618 <EE_WriteVariable+0x154>)
 800c548:	6913      	ldr	r3, [r2, #16]
 800c54a:	2101      	movs	r1, #1
 800c54c:	438b      	bics	r3, r1
 800c54e:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800c550:	0029      	movs	r1, r5
 800c552:	0030      	movs	r0, r6
 800c554:	f7ff ff20 	bl	800c398 <EE_VerifyPageFullWriteVariable>
 800c558:	9001      	str	r0, [sp, #4]
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d150      	bne.n	800c600 <EE_WriteVariable+0x13c>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c55e:	2501      	movs	r5, #1
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
		{
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c560:	4b2e      	ldr	r3, [pc, #184]	; (800c61c <EE_WriteVariable+0x158>)
 800c562:	4698      	mov	r8, r3
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c564:	4699      	mov	r9, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c566:	4f2e      	ldr	r7, [pc, #184]	; (800c620 <EE_WriteVariable+0x15c>)
 800c568:	e003      	b.n	800c572 <EE_WriteVariable+0xae>
 800c56a:	3501      	adds	r5, #1
 800c56c:	b2ad      	uxth	r5, r5
 800c56e:	42bd      	cmp	r5, r7
 800c570:	d00f      	beq.n	800c592 <EE_WriteVariable+0xce>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800c572:	42ae      	cmp	r6, r5
 800c574:	d0f9      	beq.n	800c56a <EE_WriteVariable+0xa6>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c576:	4641      	mov	r1, r8
 800c578:	0028      	movs	r0, r5
 800c57a:	f7ff ff77 	bl	800c46c <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800c57e:	2801      	cmp	r0, #1
 800c580:	d0f3      	beq.n	800c56a <EE_WriteVariable+0xa6>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c582:	464b      	mov	r3, r9
 800c584:	8819      	ldrh	r1, [r3, #0]
 800c586:	0028      	movs	r0, r5
 800c588:	f7ff ff06 	bl	800c398 <EE_VerifyPageFullWriteVariable>
 800c58c:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800c58e:	d0ec      	beq.n	800c56a <EE_WriteVariable+0xa6>
 800c590:	e7aa      	b.n	800c4e8 <EE_WriteVariable+0x24>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800c592:	4658      	mov	r0, fp
 800c594:	f005 fb5e 	bl	8011c54 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c598:	481d      	ldr	r0, [pc, #116]	; (800c610 <EE_WriteVariable+0x14c>)
 800c59a:	f005 fab5 	bl	8011b08 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d003      	beq.n	800c5aa <EE_WriteVariable+0xe6>
		return pFlash.ErrorCode;
 800c5a2:	4b1c      	ldr	r3, [pc, #112]	; (800c614 <EE_WriteVariable+0x150>)
 800c5a4:	69dc      	ldr	r4, [r3, #28]
 800c5a6:	b2a4      	uxth	r4, r4
 800c5a8:	e79e      	b.n	800c4e8 <EE_WriteVariable+0x24>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800c5aa:	2080      	movs	r0, #128	; 0x80
 800c5ac:	0100      	lsls	r0, r0, #4
 800c5ae:	4458      	add	r0, fp
 800c5b0:	f005 fb50 	bl	8011c54 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5b4:	4816      	ldr	r0, [pc, #88]	; (800c610 <EE_WriteVariable+0x14c>)
 800c5b6:	f005 faa7 	bl	8011b08 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	d003      	beq.n	800c5c6 <EE_WriteVariable+0x102>
			return pFlash.ErrorCode;
 800c5be:	4b15      	ldr	r3, [pc, #84]	; (800c614 <EE_WriteVariable+0x150>)
 800c5c0:	69dc      	ldr	r4, [r3, #28]
 800c5c2:	b2a4      	uxth	r4, r4
 800c5c4:	e790      	b.n	800c4e8 <EE_WriteVariable+0x24>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c5c6:	4a14      	ldr	r2, [pc, #80]	; (800c618 <EE_WriteVariable+0x154>)
 800c5c8:	6913      	ldr	r3, [r2, #16]
 800c5ca:	2102      	movs	r1, #2
 800c5cc:	438b      	bics	r3, r1
 800c5ce:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4651      	mov	r1, sl
 800c5d6:	2001      	movs	r0, #1
 800c5d8:	f005 fac4 	bl	8011b64 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5dc:	480c      	ldr	r0, [pc, #48]	; (800c610 <EE_WriteVariable+0x14c>)
 800c5de:	f005 fa93 	bl	8011b08 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c5e2:	2800      	cmp	r0, #0
 800c5e4:	d003      	beq.n	800c5ee <EE_WriteVariable+0x12a>
		return pFlash.ErrorCode;
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <EE_WriteVariable+0x150>)
 800c5e8:	69dc      	ldr	r4, [r3, #28]
 800c5ea:	b2a4      	uxth	r4, r4
 800c5ec:	e77c      	b.n	800c4e8 <EE_WriteVariable+0x24>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c5ee:	4a0a      	ldr	r2, [pc, #40]	; (800c618 <EE_WriteVariable+0x154>)
 800c5f0:	6913      	ldr	r3, [r2, #16]
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	438b      	bics	r3, r1
 800c5f6:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800c5f8:	f005 fa7c 	bl	8011af4 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800c5fc:	9c01      	ldr	r4, [sp, #4]
 800c5fe:	e773      	b.n	800c4e8 <EE_WriteVariable+0x24>
		return EepromStatus;
 800c600:	9c01      	ldr	r4, [sp, #4]
 800c602:	e771      	b.n	800c4e8 <EE_WriteVariable+0x24>
 800c604:	0801e000 	.word	0x0801e000
 800c608:	0801f000 	.word	0x0801f000
 800c60c:	0000eeee 	.word	0x0000eeee
 800c610:	0000c350 	.word	0x0000c350
 800c614:	200067b8 	.word	0x200067b8
 800c618:	40022000 	.word	0x40022000
 800c61c:	20001344 	.word	0x20001344
 800c620:	00000401 	.word	0x00000401

0800c624 <EE_Format>:
uint16_t EE_Format(void){
 800c624:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800c626:	f005 fa51 	bl	8011acc <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c62a:	4829      	ldr	r0, [pc, #164]	; (800c6d0 <EE_Format+0xac>)
 800c62c:	f005 fb12 	bl	8011c54 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c630:	4828      	ldr	r0, [pc, #160]	; (800c6d4 <EE_Format+0xb0>)
 800c632:	f005 fa69 	bl	8011b08 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c636:	2800      	cmp	r0, #0
 800c638:	d003      	beq.n	800c642 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800c63a:	4b27      	ldr	r3, [pc, #156]	; (800c6d8 <EE_Format+0xb4>)
 800c63c:	69d8      	ldr	r0, [r3, #28]
 800c63e:	b280      	uxth	r0, r0
}
 800c640:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c642:	4826      	ldr	r0, [pc, #152]	; (800c6dc <EE_Format+0xb8>)
 800c644:	f005 fb06 	bl	8011c54 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c648:	4822      	ldr	r0, [pc, #136]	; (800c6d4 <EE_Format+0xb0>)
 800c64a:	f005 fa5d 	bl	8011b08 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c64e:	2800      	cmp	r0, #0
 800c650:	d003      	beq.n	800c65a <EE_Format+0x36>
			return pFlash.ErrorCode;
 800c652:	4b21      	ldr	r3, [pc, #132]	; (800c6d8 <EE_Format+0xb4>)
 800c654:	69d8      	ldr	r0, [r3, #28]
 800c656:	b280      	uxth	r0, r0
 800c658:	e7f2      	b.n	800c640 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c65a:	4a21      	ldr	r2, [pc, #132]	; (800c6e0 <EE_Format+0xbc>)
 800c65c:	6913      	ldr	r3, [r2, #16]
 800c65e:	2102      	movs	r1, #2
 800c660:	438b      	bics	r3, r1
 800c662:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c664:	2200      	movs	r2, #0
 800c666:	2300      	movs	r3, #0
 800c668:	4919      	ldr	r1, [pc, #100]	; (800c6d0 <EE_Format+0xac>)
 800c66a:	2001      	movs	r0, #1
 800c66c:	f005 fa7a 	bl	8011b64 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c670:	4818      	ldr	r0, [pc, #96]	; (800c6d4 <EE_Format+0xb0>)
 800c672:	f005 fa49 	bl	8011b08 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c676:	2800      	cmp	r0, #0
 800c678:	d003      	beq.n	800c682 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800c67a:	4b17      	ldr	r3, [pc, #92]	; (800c6d8 <EE_Format+0xb4>)
 800c67c:	69d8      	ldr	r0, [r3, #28]
 800c67e:	b280      	uxth	r0, r0
 800c680:	e7de      	b.n	800c640 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c682:	4a17      	ldr	r2, [pc, #92]	; (800c6e0 <EE_Format+0xbc>)
 800c684:	6913      	ldr	r3, [r2, #16]
 800c686:	2101      	movs	r1, #1
 800c688:	438b      	bics	r3, r1
 800c68a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c68c:	4815      	ldr	r0, [pc, #84]	; (800c6e4 <EE_Format+0xc0>)
 800c68e:	f005 fae1 	bl	8011c54 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c692:	4810      	ldr	r0, [pc, #64]	; (800c6d4 <EE_Format+0xb0>)
 800c694:	f005 fa38 	bl	8011b08 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c698:	2800      	cmp	r0, #0
 800c69a:	d003      	beq.n	800c6a4 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800c69c:	4b0e      	ldr	r3, [pc, #56]	; (800c6d8 <EE_Format+0xb4>)
 800c69e:	69d8      	ldr	r0, [r3, #28]
 800c6a0:	b280      	uxth	r0, r0
 800c6a2:	e7cd      	b.n	800c640 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c6a4:	4810      	ldr	r0, [pc, #64]	; (800c6e8 <EE_Format+0xc4>)
 800c6a6:	f005 fad5 	bl	8011c54 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6aa:	480a      	ldr	r0, [pc, #40]	; (800c6d4 <EE_Format+0xb0>)
 800c6ac:	f005 fa2c 	bl	8011b08 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d003      	beq.n	800c6bc <EE_Format+0x98>
			return pFlash.ErrorCode;
 800c6b4:	4b08      	ldr	r3, [pc, #32]	; (800c6d8 <EE_Format+0xb4>)
 800c6b6:	69d8      	ldr	r0, [r3, #28]
 800c6b8:	b280      	uxth	r0, r0
 800c6ba:	e7c1      	b.n	800c640 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c6bc:	4a08      	ldr	r2, [pc, #32]	; (800c6e0 <EE_Format+0xbc>)
 800c6be:	6913      	ldr	r3, [r2, #16]
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	438b      	bics	r3, r1
 800c6c4:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800c6c6:	f005 fa15 	bl	8011af4 <HAL_FLASH_Lock>
	return FlashStatus;
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	e7b8      	b.n	800c640 <EE_Format+0x1c>
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	0801e000 	.word	0x0801e000
 800c6d4:	0000c350 	.word	0x0000c350
 800c6d8:	200067b8 	.word	0x200067b8
 800c6dc:	0801e800 	.word	0x0801e800
 800c6e0:	40022000 	.word	0x40022000
 800c6e4:	0801f000 	.word	0x0801f000
 800c6e8:	0801f800 	.word	0x0801f800

0800c6ec <EE_Init>:
uint16_t EE_Init(void){
 800c6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ee:	46ce      	mov	lr, r9
 800c6f0:	4647      	mov	r7, r8
 800c6f2:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 800c6f4:	f005 f9ea 	bl	8011acc <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c6f8:	4bbf      	ldr	r3, [pc, #764]	; (800c9f8 <EE_Init+0x30c>)
 800c6fa:	881b      	ldrh	r3, [r3, #0]
 800c6fc:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c6fe:	4abf      	ldr	r2, [pc, #764]	; (800c9fc <EE_Init+0x310>)
 800c700:	8812      	ldrh	r2, [r2, #0]
 800c702:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800c704:	49be      	ldr	r1, [pc, #760]	; (800ca00 <EE_Init+0x314>)
 800c706:	428b      	cmp	r3, r1
 800c708:	d100      	bne.n	800c70c <EE_Init+0x20>
 800c70a:	e075      	b.n	800c7f8 <EE_Init+0x10c>
 800c70c:	49bd      	ldr	r1, [pc, #756]	; (800ca04 <EE_Init+0x318>)
 800c70e:	428b      	cmp	r3, r1
 800c710:	d012      	beq.n	800c738 <EE_Init+0x4c>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d100      	bne.n	800c718 <EE_Init+0x2c>
 800c716:	e10b      	b.n	800c930 <EE_Init+0x244>
			FlashStatus =EE_Format();
 800c718:	f7ff ff84 	bl	800c624 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c71c:	48ba      	ldr	r0, [pc, #744]	; (800ca08 <EE_Init+0x31c>)
 800c71e:	f005 f9f3 	bl	8011b08 <FLASH_WaitForLastOperation>
 800c722:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800c724:	2d00      	cmp	r5, #0
 800c726:	d102      	bne.n	800c72e <EE_Init+0x42>
	HAL_FLASH_Lock();
 800c728:	f005 f9e4 	bl	8011af4 <HAL_FLASH_Lock>
	return HAL_OK;
 800c72c:	2500      	movs	r5, #0
}
 800c72e:	0028      	movs	r0, r5
 800c730:	bcc0      	pop	{r6, r7}
 800c732:	46b9      	mov	r9, r7
 800c734:	46b0      	mov	r8, r6
 800c736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800c738:	2a00      	cmp	r2, #0
 800c73a:	d00d      	beq.n	800c758 <EE_Init+0x6c>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800c73c:	4bb0      	ldr	r3, [pc, #704]	; (800ca00 <EE_Init+0x314>)
 800c73e:	429a      	cmp	r2, r3
 800c740:	d028      	beq.n	800c794 <EE_Init+0xa8>
				FlashStatus =EE_Format();
 800c742:	f7ff ff6f 	bl	800c624 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c746:	48b0      	ldr	r0, [pc, #704]	; (800ca08 <EE_Init+0x31c>)
 800c748:	f005 f9de 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d0eb      	beq.n	800c728 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 800c750:	4bae      	ldr	r3, [pc, #696]	; (800ca0c <EE_Init+0x320>)
 800c752:	69dd      	ldr	r5, [r3, #28]
 800c754:	b2ad      	uxth	r5, r5
 800c756:	e7ea      	b.n	800c72e <EE_Init+0x42>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c758:	48a7      	ldr	r0, [pc, #668]	; (800c9f8 <EE_Init+0x30c>)
 800c75a:	f005 fa7b 	bl	8011c54 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c75e:	48aa      	ldr	r0, [pc, #680]	; (800ca08 <EE_Init+0x31c>)
 800c760:	f005 f9d2 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c764:	2800      	cmp	r0, #0
 800c766:	d003      	beq.n	800c770 <EE_Init+0x84>
					return pFlash.ErrorCode;
 800c768:	4ba8      	ldr	r3, [pc, #672]	; (800ca0c <EE_Init+0x320>)
 800c76a:	69dd      	ldr	r5, [r3, #28]
 800c76c:	b2ad      	uxth	r5, r5
 800c76e:	e7de      	b.n	800c72e <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c770:	48a7      	ldr	r0, [pc, #668]	; (800ca10 <EE_Init+0x324>)
 800c772:	f005 fa6f 	bl	8011c54 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c776:	48a4      	ldr	r0, [pc, #656]	; (800ca08 <EE_Init+0x31c>)
 800c778:	f005 f9c6 	bl	8011b08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c77c:	2800      	cmp	r0, #0
 800c77e:	d105      	bne.n	800c78c <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c780:	4aa4      	ldr	r2, [pc, #656]	; (800ca14 <EE_Init+0x328>)
 800c782:	6913      	ldr	r3, [r2, #16]
 800c784:	2102      	movs	r1, #2
 800c786:	438b      	bics	r3, r1
 800c788:	6113      	str	r3, [r2, #16]
 800c78a:	e7cd      	b.n	800c728 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800c78c:	4b9f      	ldr	r3, [pc, #636]	; (800ca0c <EE_Init+0x320>)
 800c78e:	69dd      	ldr	r5, [r3, #28]
 800c790:	b2ad      	uxth	r5, r5
 800c792:	e7cc      	b.n	800c72e <EE_Init+0x42>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c794:	4898      	ldr	r0, [pc, #608]	; (800c9f8 <EE_Init+0x30c>)
 800c796:	f005 fa5d 	bl	8011c54 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c79a:	489b      	ldr	r0, [pc, #620]	; (800ca08 <EE_Init+0x31c>)
 800c79c:	f005 f9b4 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d003      	beq.n	800c7ac <EE_Init+0xc0>
					return pFlash.ErrorCode;
 800c7a4:	4b99      	ldr	r3, [pc, #612]	; (800ca0c <EE_Init+0x320>)
 800c7a6:	69dd      	ldr	r5, [r3, #28]
 800c7a8:	b2ad      	uxth	r5, r5
 800c7aa:	e7c0      	b.n	800c72e <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c7ac:	4898      	ldr	r0, [pc, #608]	; (800ca10 <EE_Init+0x324>)
 800c7ae:	f005 fa51 	bl	8011c54 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7b2:	4895      	ldr	r0, [pc, #596]	; (800ca08 <EE_Init+0x31c>)
 800c7b4:	f005 f9a8 	bl	8011b08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	d003      	beq.n	800c7c4 <EE_Init+0xd8>
						return pFlash.ErrorCode;
 800c7bc:	4b93      	ldr	r3, [pc, #588]	; (800ca0c <EE_Init+0x320>)
 800c7be:	69dd      	ldr	r5, [r3, #28]
 800c7c0:	b2ad      	uxth	r5, r5
 800c7c2:	e7b4      	b.n	800c72e <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c7c4:	4a93      	ldr	r2, [pc, #588]	; (800ca14 <EE_Init+0x328>)
 800c7c6:	6913      	ldr	r3, [r2, #16]
 800c7c8:	2102      	movs	r1, #2
 800c7ca:	438b      	bics	r3, r1
 800c7cc:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	498a      	ldr	r1, [pc, #552]	; (800c9fc <EE_Init+0x310>)
 800c7d4:	2001      	movs	r0, #1
 800c7d6:	f005 f9c5 	bl	8011b64 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7da:	488b      	ldr	r0, [pc, #556]	; (800ca08 <EE_Init+0x31c>)
 800c7dc:	f005 f994 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d105      	bne.n	800c7f0 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c7e4:	4a8b      	ldr	r2, [pc, #556]	; (800ca14 <EE_Init+0x328>)
 800c7e6:	6913      	ldr	r3, [r2, #16]
 800c7e8:	2101      	movs	r1, #1
 800c7ea:	438b      	bics	r3, r1
 800c7ec:	6113      	str	r3, [r2, #16]
 800c7ee:	e79b      	b.n	800c728 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 800c7f0:	4b86      	ldr	r3, [pc, #536]	; (800ca0c <EE_Init+0x320>)
 800c7f2:	69dd      	ldr	r5, [r3, #28]
 800c7f4:	b2ad      	uxth	r5, r5
 800c7f6:	e79a      	b.n	800c72e <EE_Init+0x42>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800c7f8:	2a00      	cmp	r2, #0
 800c7fa:	d158      	bne.n	800c8ae <EE_Init+0x1c2>
 800c7fc:	2401      	movs	r4, #1
	int16_t x =-1;
 800c7fe:	2601      	movs	r6, #1
 800c800:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800c802:	4f85      	ldr	r7, [pc, #532]	; (800ca18 <EE_Init+0x32c>)
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c804:	4b85      	ldr	r3, [pc, #532]	; (800ca1c <EE_Init+0x330>)
 800c806:	4698      	mov	r8, r3
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c808:	4699      	mov	r9, r3
 800c80a:	e005      	b.n	800c818 <EE_Init+0x12c>
						x =VarIdx;
 800c80c:	b226      	sxth	r6, r4
 800c80e:	e008      	b.n	800c822 <EE_Init+0x136>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c810:	3401      	adds	r4, #1
 800c812:	4b83      	ldr	r3, [pc, #524]	; (800ca20 <EE_Init+0x334>)
 800c814:	429c      	cmp	r4, r3
 800c816:	d018      	beq.n	800c84a <EE_Init+0x15e>
 800c818:	b2a5      	uxth	r5, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800c81a:	883b      	ldrh	r3, [r7, #0]
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	42ab      	cmp	r3, r5
 800c820:	d0f4      	beq.n	800c80c <EE_Init+0x120>
					if(VarIdx != x){
 800c822:	42a6      	cmp	r6, r4
 800c824:	d0f4      	beq.n	800c810 <EE_Init+0x124>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c826:	4641      	mov	r1, r8
 800c828:	0028      	movs	r0, r5
 800c82a:	f7ff fe1f 	bl	800c46c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c82e:	2801      	cmp	r0, #1
 800c830:	d0ee      	beq.n	800c810 <EE_Init+0x124>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c832:	464b      	mov	r3, r9
 800c834:	8819      	ldrh	r1, [r3, #0]
 800c836:	0028      	movs	r0, r5
 800c838:	f7ff fdae 	bl	800c398 <EE_VerifyPageFullWriteVariable>
 800c83c:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c83e:	4872      	ldr	r0, [pc, #456]	; (800ca08 <EE_Init+0x31c>)
 800c840:	f005 f962 	bl	8011b08 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c844:	2800      	cmp	r0, #0
 800c846:	d0e3      	beq.n	800c810 <EE_Init+0x124>
 800c848:	e771      	b.n	800c72e <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c84a:	2200      	movs	r2, #0
 800c84c:	2300      	movs	r3, #0
 800c84e:	496a      	ldr	r1, [pc, #424]	; (800c9f8 <EE_Init+0x30c>)
 800c850:	2001      	movs	r0, #1
 800c852:	f005 f987 	bl	8011b64 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c856:	486c      	ldr	r0, [pc, #432]	; (800ca08 <EE_Init+0x31c>)
 800c858:	f005 f956 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d003      	beq.n	800c868 <EE_Init+0x17c>
					return pFlash.ErrorCode;
 800c860:	4b6a      	ldr	r3, [pc, #424]	; (800ca0c <EE_Init+0x320>)
 800c862:	69dd      	ldr	r5, [r3, #28]
 800c864:	b2ad      	uxth	r5, r5
 800c866:	e762      	b.n	800c72e <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c868:	4a6a      	ldr	r2, [pc, #424]	; (800ca14 <EE_Init+0x328>)
 800c86a:	6913      	ldr	r3, [r2, #16]
 800c86c:	2101      	movs	r1, #1
 800c86e:	438b      	bics	r3, r1
 800c870:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c872:	4862      	ldr	r0, [pc, #392]	; (800c9fc <EE_Init+0x310>)
 800c874:	f005 f9ee 	bl	8011c54 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c878:	4863      	ldr	r0, [pc, #396]	; (800ca08 <EE_Init+0x31c>)
 800c87a:	f005 f945 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c87e:	2800      	cmp	r0, #0
 800c880:	d003      	beq.n	800c88a <EE_Init+0x19e>
					return pFlash.ErrorCode;
 800c882:	4b62      	ldr	r3, [pc, #392]	; (800ca0c <EE_Init+0x320>)
 800c884:	69dd      	ldr	r5, [r3, #28]
 800c886:	b2ad      	uxth	r5, r5
 800c888:	e751      	b.n	800c72e <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c88a:	4866      	ldr	r0, [pc, #408]	; (800ca24 <EE_Init+0x338>)
 800c88c:	f005 f9e2 	bl	8011c54 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c890:	485d      	ldr	r0, [pc, #372]	; (800ca08 <EE_Init+0x31c>)
 800c892:	f005 f939 	bl	8011b08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c896:	2800      	cmp	r0, #0
 800c898:	d105      	bne.n	800c8a6 <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c89a:	4a5e      	ldr	r2, [pc, #376]	; (800ca14 <EE_Init+0x328>)
 800c89c:	6913      	ldr	r3, [r2, #16]
 800c89e:	2102      	movs	r1, #2
 800c8a0:	438b      	bics	r3, r1
 800c8a2:	6113      	str	r3, [r2, #16]
 800c8a4:	e740      	b.n	800c728 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800c8a6:	4b59      	ldr	r3, [pc, #356]	; (800ca0c <EE_Init+0x320>)
 800c8a8:	69dd      	ldr	r5, [r3, #28]
 800c8aa:	b2ad      	uxth	r5, r5
 800c8ac:	e73f      	b.n	800c72e <EE_Init+0x42>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800c8ae:	4b55      	ldr	r3, [pc, #340]	; (800ca04 <EE_Init+0x318>)
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d00b      	beq.n	800c8cc <EE_Init+0x1e0>
				FlashStatus =EE_Format();
 800c8b4:	f7ff feb6 	bl	800c624 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c8b8:	4853      	ldr	r0, [pc, #332]	; (800ca08 <EE_Init+0x31c>)
 800c8ba:	f005 f925 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d100      	bne.n	800c8c4 <EE_Init+0x1d8>
 800c8c2:	e731      	b.n	800c728 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 800c8c4:	4b51      	ldr	r3, [pc, #324]	; (800ca0c <EE_Init+0x320>)
 800c8c6:	69dd      	ldr	r5, [r3, #28]
 800c8c8:	b2ad      	uxth	r5, r5
 800c8ca:	e730      	b.n	800c72e <EE_Init+0x42>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c8cc:	484b      	ldr	r0, [pc, #300]	; (800c9fc <EE_Init+0x310>)
 800c8ce:	f005 f9c1 	bl	8011c54 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c8d2:	484d      	ldr	r0, [pc, #308]	; (800ca08 <EE_Init+0x31c>)
 800c8d4:	f005 f918 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d003      	beq.n	800c8e4 <EE_Init+0x1f8>
					return pFlash.ErrorCode;
 800c8dc:	4b4b      	ldr	r3, [pc, #300]	; (800ca0c <EE_Init+0x320>)
 800c8de:	69dd      	ldr	r5, [r3, #28]
 800c8e0:	b2ad      	uxth	r5, r5
 800c8e2:	e724      	b.n	800c72e <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c8e4:	484f      	ldr	r0, [pc, #316]	; (800ca24 <EE_Init+0x338>)
 800c8e6:	f005 f9b5 	bl	8011c54 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c8ea:	4847      	ldr	r0, [pc, #284]	; (800ca08 <EE_Init+0x31c>)
 800c8ec:	f005 f90c 	bl	8011b08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d003      	beq.n	800c8fc <EE_Init+0x210>
						return pFlash.ErrorCode;
 800c8f4:	4b45      	ldr	r3, [pc, #276]	; (800ca0c <EE_Init+0x320>)
 800c8f6:	69dd      	ldr	r5, [r3, #28]
 800c8f8:	b2ad      	uxth	r5, r5
 800c8fa:	e718      	b.n	800c72e <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c8fc:	4a45      	ldr	r2, [pc, #276]	; (800ca14 <EE_Init+0x328>)
 800c8fe:	6913      	ldr	r3, [r2, #16]
 800c900:	2102      	movs	r1, #2
 800c902:	438b      	bics	r3, r1
 800c904:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c906:	2200      	movs	r2, #0
 800c908:	2300      	movs	r3, #0
 800c90a:	493b      	ldr	r1, [pc, #236]	; (800c9f8 <EE_Init+0x30c>)
 800c90c:	2001      	movs	r0, #1
 800c90e:	f005 f929 	bl	8011b64 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c912:	483d      	ldr	r0, [pc, #244]	; (800ca08 <EE_Init+0x31c>)
 800c914:	f005 f8f8 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c918:	2800      	cmp	r0, #0
 800c91a:	d105      	bne.n	800c928 <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c91c:	4a3d      	ldr	r2, [pc, #244]	; (800ca14 <EE_Init+0x328>)
 800c91e:	6913      	ldr	r3, [r2, #16]
 800c920:	2101      	movs	r1, #1
 800c922:	438b      	bics	r3, r1
 800c924:	6113      	str	r3, [r2, #16]
 800c926:	e6ff      	b.n	800c728 <EE_Init+0x3c>
					return pFlash.ErrorCode;
 800c928:	4b38      	ldr	r3, [pc, #224]	; (800ca0c <EE_Init+0x320>)
 800c92a:	69dd      	ldr	r5, [r3, #28]
 800c92c:	b2ad      	uxth	r5, r5
 800c92e:	e6fe      	b.n	800c72e <EE_Init+0x42>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800c930:	2a00      	cmp	r2, #0
 800c932:	d00a      	beq.n	800c94a <EE_Init+0x25e>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800c934:	4b33      	ldr	r3, [pc, #204]	; (800ca04 <EE_Init+0x318>)
 800c936:	429a      	cmp	r2, r3
 800c938:	d011      	beq.n	800c95e <EE_Init+0x272>
 800c93a:	2401      	movs	r4, #1
	int16_t x =-1;
 800c93c:	2601      	movs	r6, #1
 800c93e:	4276      	negs	r6, r6
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c940:	4f39      	ldr	r7, [pc, #228]	; (800ca28 <EE_Init+0x33c>)
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c942:	4b36      	ldr	r3, [pc, #216]	; (800ca1c <EE_Init+0x330>)
 800c944:	4698      	mov	r8, r3
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c946:	4699      	mov	r9, r3
 800c948:	e02d      	b.n	800c9a6 <EE_Init+0x2ba>
				FlashStatus =EE_Format();
 800c94a:	f7ff fe6b 	bl	800c624 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c94e:	482e      	ldr	r0, [pc, #184]	; (800ca08 <EE_Init+0x31c>)
 800c950:	f005 f8da 	bl	8011b08 <FLASH_WaitForLastOperation>
 800c954:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 800c956:	2d00      	cmp	r5, #0
 800c958:	d100      	bne.n	800c95c <EE_Init+0x270>
 800c95a:	e6e5      	b.n	800c728 <EE_Init+0x3c>
 800c95c:	e6e7      	b.n	800c72e <EE_Init+0x42>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c95e:	4827      	ldr	r0, [pc, #156]	; (800c9fc <EE_Init+0x310>)
 800c960:	f005 f978 	bl	8011c54 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c964:	4828      	ldr	r0, [pc, #160]	; (800ca08 <EE_Init+0x31c>)
 800c966:	f005 f8cf 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d003      	beq.n	800c976 <EE_Init+0x28a>
					return pFlash.ErrorCode;
 800c96e:	4b27      	ldr	r3, [pc, #156]	; (800ca0c <EE_Init+0x320>)
 800c970:	69dd      	ldr	r5, [r3, #28]
 800c972:	b2ad      	uxth	r5, r5
 800c974:	e6db      	b.n	800c72e <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c976:	482b      	ldr	r0, [pc, #172]	; (800ca24 <EE_Init+0x338>)
 800c978:	f005 f96c 	bl	8011c54 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c97c:	4822      	ldr	r0, [pc, #136]	; (800ca08 <EE_Init+0x31c>)
 800c97e:	f005 f8c3 	bl	8011b08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c982:	2800      	cmp	r0, #0
 800c984:	d105      	bne.n	800c992 <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c986:	4a23      	ldr	r2, [pc, #140]	; (800ca14 <EE_Init+0x328>)
 800c988:	6913      	ldr	r3, [r2, #16]
 800c98a:	2102      	movs	r1, #2
 800c98c:	438b      	bics	r3, r1
 800c98e:	6113      	str	r3, [r2, #16]
 800c990:	e6ca      	b.n	800c728 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800c992:	4b1e      	ldr	r3, [pc, #120]	; (800ca0c <EE_Init+0x320>)
 800c994:	69dd      	ldr	r5, [r3, #28]
 800c996:	b2ad      	uxth	r5, r5
 800c998:	e6c9      	b.n	800c72e <EE_Init+0x42>
						x =VarIdx;
 800c99a:	b226      	sxth	r6, r4
 800c99c:	e008      	b.n	800c9b0 <EE_Init+0x2c4>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c99e:	3401      	adds	r4, #1
 800c9a0:	4b1f      	ldr	r3, [pc, #124]	; (800ca20 <EE_Init+0x334>)
 800c9a2:	429c      	cmp	r4, r3
 800c9a4:	d018      	beq.n	800c9d8 <EE_Init+0x2ec>
 800c9a6:	b2a5      	uxth	r5, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c9a8:	883b      	ldrh	r3, [r7, #0]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	42ab      	cmp	r3, r5
 800c9ae:	d0f4      	beq.n	800c99a <EE_Init+0x2ae>
					if(VarIdx != x){
 800c9b0:	42a6      	cmp	r6, r4
 800c9b2:	d0f4      	beq.n	800c99e <EE_Init+0x2b2>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c9b4:	4641      	mov	r1, r8
 800c9b6:	0028      	movs	r0, r5
 800c9b8:	f7ff fd58 	bl	800c46c <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c9bc:	2801      	cmp	r0, #1
 800c9be:	d0ee      	beq.n	800c99e <EE_Init+0x2b2>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c9c0:	464b      	mov	r3, r9
 800c9c2:	8819      	ldrh	r1, [r3, #0]
 800c9c4:	0028      	movs	r0, r5
 800c9c6:	f7ff fce7 	bl	800c398 <EE_VerifyPageFullWriteVariable>
 800c9ca:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c9cc:	480e      	ldr	r0, [pc, #56]	; (800ca08 <EE_Init+0x31c>)
 800c9ce:	f005 f89b 	bl	8011b08 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d0e3      	beq.n	800c99e <EE_Init+0x2b2>
 800c9d6:	e6aa      	b.n	800c72e <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2300      	movs	r3, #0
 800c9dc:	4907      	ldr	r1, [pc, #28]	; (800c9fc <EE_Init+0x310>)
 800c9de:	2001      	movs	r0, #1
 800c9e0:	f005 f8c0 	bl	8011b64 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c9e4:	4808      	ldr	r0, [pc, #32]	; (800ca08 <EE_Init+0x31c>)
 800c9e6:	f005 f88f 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d01e      	beq.n	800ca2c <EE_Init+0x340>
					return pFlash.ErrorCode;
 800c9ee:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <EE_Init+0x320>)
 800c9f0:	69dd      	ldr	r5, [r3, #28]
 800c9f2:	b2ad      	uxth	r5, r5
 800c9f4:	e69b      	b.n	800c72e <EE_Init+0x42>
 800c9f6:	46c0      	nop			; (mov r8, r8)
 800c9f8:	0801e000 	.word	0x0801e000
 800c9fc:	0801f000 	.word	0x0801f000
 800ca00:	0000eeee 	.word	0x0000eeee
 800ca04:	0000ffff 	.word	0x0000ffff
 800ca08:	0000c350 	.word	0x0000c350
 800ca0c:	200067b8 	.word	0x200067b8
 800ca10:	0801e800 	.word	0x0801e800
 800ca14:	40022000 	.word	0x40022000
 800ca18:	0801e006 	.word	0x0801e006
 800ca1c:	20001344 	.word	0x20001344
 800ca20:	00000401 	.word	0x00000401
 800ca24:	0801f800 	.word	0x0801f800
 800ca28:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ca2c:	4a11      	ldr	r2, [pc, #68]	; (800ca74 <EE_Init+0x388>)
 800ca2e:	6913      	ldr	r3, [r2, #16]
 800ca30:	2101      	movs	r1, #1
 800ca32:	438b      	bics	r3, r1
 800ca34:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800ca36:	4810      	ldr	r0, [pc, #64]	; (800ca78 <EE_Init+0x38c>)
 800ca38:	f005 f90c 	bl	8011c54 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ca3c:	480f      	ldr	r0, [pc, #60]	; (800ca7c <EE_Init+0x390>)
 800ca3e:	f005 f863 	bl	8011b08 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d003      	beq.n	800ca4e <EE_Init+0x362>
					return pFlash.ErrorCode;
 800ca46:	4b0e      	ldr	r3, [pc, #56]	; (800ca80 <EE_Init+0x394>)
 800ca48:	69dd      	ldr	r5, [r3, #28]
 800ca4a:	b2ad      	uxth	r5, r5
 800ca4c:	e66f      	b.n	800c72e <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800ca4e:	480d      	ldr	r0, [pc, #52]	; (800ca84 <EE_Init+0x398>)
 800ca50:	f005 f900 	bl	8011c54 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ca54:	4809      	ldr	r0, [pc, #36]	; (800ca7c <EE_Init+0x390>)
 800ca56:	f005 f857 	bl	8011b08 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	d105      	bne.n	800ca6a <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800ca5e:	4a05      	ldr	r2, [pc, #20]	; (800ca74 <EE_Init+0x388>)
 800ca60:	6913      	ldr	r3, [r2, #16]
 800ca62:	2102      	movs	r1, #2
 800ca64:	438b      	bics	r3, r1
 800ca66:	6113      	str	r3, [r2, #16]
 800ca68:	e65e      	b.n	800c728 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 800ca6a:	4b05      	ldr	r3, [pc, #20]	; (800ca80 <EE_Init+0x394>)
 800ca6c:	69dd      	ldr	r5, [r3, #28]
 800ca6e:	b2ad      	uxth	r5, r5
 800ca70:	e65d      	b.n	800c72e <EE_Init+0x42>
 800ca72:	46c0      	nop			; (mov r8, r8)
 800ca74:	40022000 	.word	0x40022000
 800ca78:	0801e000 	.word	0x0801e000
 800ca7c:	0000c350 	.word	0x0000c350
 800ca80:	200067b8 	.word	0x200067b8
 800ca84:	0801e800 	.word	0x0801e800

0800ca88 <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800ca88:	b500      	push	{lr}
 800ca8a:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800ca90:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800ca92:	3301      	adds	r3, #1
 800ca94:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800ca96:	4669      	mov	r1, sp
 800ca98:	a801      	add	r0, sp, #4
 800ca9a:	f005 f8ed 	bl	8011c78 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	d102      	bne.n	800caa8 <EraseSector+0x20>
 800caa2:	9b00      	ldr	r3, [sp, #0]
 800caa4:	3301      	adds	r3, #1
 800caa6:	d002      	beq.n	800caae <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800caa8:	4b02      	ldr	r3, [pc, #8]	; (800cab4 <EraseSector+0x2c>)
 800caaa:	2216      	movs	r2, #22
 800caac:	701a      	strb	r2, [r3, #0]

	return result;
}
 800caae:	2000      	movs	r0, #0
 800cab0:	b005      	add	sp, #20
 800cab2:	bd00      	pop	{pc}
 800cab4:	20000890 	.word	0x20000890

0800cab8 <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800cab8:	b500      	push	{lr}
 800caba:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800cabc:	2380      	movs	r3, #128	; 0x80
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cac2:	2301      	movs	r3, #1
 800cac4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800caca:	3303      	adds	r3, #3
 800cacc:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800cace:	2090      	movs	r0, #144	; 0x90
 800cad0:	a901      	add	r1, sp, #4
 800cad2:	05c0      	lsls	r0, r0, #23
 800cad4:	f005 f932 	bl	8011d3c <HAL_GPIO_Init>
}
 800cad8:	b007      	add	sp, #28
 800cada:	bd00      	pop	{pc}

0800cadc <GPIO_Init>:
{
 800cadc:	b500      	push	{lr}
 800cade:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800cae0:	4b18      	ldr	r3, [pc, #96]	; (800cb44 <GPIO_Init+0x68>)
 800cae2:	6959      	ldr	r1, [r3, #20]
 800cae4:	2080      	movs	r0, #128	; 0x80
 800cae6:	0300      	lsls	r0, r0, #12
 800cae8:	4301      	orrs	r1, r0
 800caea:	6159      	str	r1, [r3, #20]
 800caec:	695a      	ldr	r2, [r3, #20]
 800caee:	4002      	ands	r2, r0
 800caf0:	9201      	str	r2, [sp, #4]
 800caf2:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800caf4:	6959      	ldr	r1, [r3, #20]
 800caf6:	2080      	movs	r0, #128	; 0x80
 800caf8:	0280      	lsls	r0, r0, #10
 800cafa:	4301      	orrs	r1, r0
 800cafc:	6159      	str	r1, [r3, #20]
 800cafe:	695a      	ldr	r2, [r3, #20]
 800cb00:	4002      	ands	r2, r0
 800cb02:	9202      	str	r2, [sp, #8]
 800cb04:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800cb06:	6959      	ldr	r1, [r3, #20]
 800cb08:	2080      	movs	r0, #128	; 0x80
 800cb0a:	0340      	lsls	r0, r0, #13
 800cb0c:	4301      	orrs	r1, r0
 800cb0e:	6159      	str	r1, [r3, #20]
 800cb10:	695a      	ldr	r2, [r3, #20]
 800cb12:	4002      	ands	r2, r0
 800cb14:	9203      	str	r2, [sp, #12]
 800cb16:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800cb18:	6959      	ldr	r1, [r3, #20]
 800cb1a:	2080      	movs	r0, #128	; 0x80
 800cb1c:	02c0      	lsls	r0, r0, #11
 800cb1e:	4301      	orrs	r1, r0
 800cb20:	6159      	str	r1, [r3, #20]
 800cb22:	695a      	ldr	r2, [r3, #20]
 800cb24:	4002      	ands	r2, r0
 800cb26:	9204      	str	r2, [sp, #16]
 800cb28:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800cb2a:	695a      	ldr	r2, [r3, #20]
 800cb2c:	2180      	movs	r1, #128	; 0x80
 800cb2e:	03c9      	lsls	r1, r1, #15
 800cb30:	430a      	orrs	r2, r1
 800cb32:	615a      	str	r2, [r3, #20]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	400b      	ands	r3, r1
 800cb38:	9305      	str	r3, [sp, #20]
 800cb3a:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800cb3c:	f7ff ffbc 	bl	800cab8 <IND_LED_Init>
}
 800cb40:	b007      	add	sp, #28
 800cb42:	bd00      	pop	{pc}
 800cb44:	40021000 	.word	0x40021000

0800cb48 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	000e      	movs	r6, r1
 800cb4c:	0015      	movs	r5, r2
 800cb4e:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800cb50:	f001 fcbe 	bl	800e4d0 <GetUart>
 800cb54:	0004      	movs	r4, r0


#ifdef _Usart2	
	if (huart == &huart2)
 800cb56:	4a16      	ldr	r2, [pc, #88]	; (800cbb0 <GetPortGPIOs+0x68>)
 800cb58:	4290      	cmp	r0, r2
 800cb5a:	d011      	beq.n	800cb80 <GetPortGPIOs+0x38>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800cb5c:	4b15      	ldr	r3, [pc, #84]	; (800cbb4 <GetPortGPIOs+0x6c>)
 800cb5e:	4298      	cmp	r0, r3
 800cb60:	d019      	beq.n	800cb96 <GetPortGPIOs+0x4e>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800cb62:	4b15      	ldr	r3, [pc, #84]	; (800cbb8 <GetPortGPIOs+0x70>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800cb64:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800cb66:	429c      	cmp	r4, r3
 800cb68:	d114      	bne.n	800cb94 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cb6a:	2390      	movs	r3, #144	; 0x90
 800cb6c:	05db      	lsls	r3, r3, #23
 800cb6e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800cb70:	2210      	movs	r2, #16
 800cb72:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800cb74:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800cb76:	2320      	movs	r3, #32
 800cb78:	9a06      	ldr	r2, [sp, #24]
 800cb7a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	e009      	b.n	800cb94 <GetPortGPIOs+0x4c>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cb80:	2390      	movs	r3, #144	; 0x90
 800cb82:	05db      	lsls	r3, r3, #23
 800cb84:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800cb86:	2204      	movs	r2, #4
 800cb88:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800cb8a:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800cb8c:	2308      	movs	r3, #8
 800cb8e:	9a06      	ldr	r2, [sp, #24]
 800cb90:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb92:	2000      	movs	r0, #0
	
	return result;	
}
 800cb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cb96:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <GetPortGPIOs+0x74>)
 800cb98:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800cb9a:	2280      	movs	r2, #128	; 0x80
 800cb9c:	00d2      	lsls	r2, r2, #3
 800cb9e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800cba0:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800cba2:	2380      	movs	r3, #128	; 0x80
 800cba4:	011b      	lsls	r3, r3, #4
 800cba6:	9a06      	ldr	r2, [sp, #24]
 800cba8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cbaa:	2000      	movs	r0, #0
 800cbac:	e7f2      	b.n	800cb94 <GetPortGPIOs+0x4c>
 800cbae:	46c0      	nop			; (mov r8, r8)
 800cbb0:	20006584 	.word	0x20006584
 800cbb4:	20006364 	.word	0x20006364
 800cbb8:	20006498 	.word	0x20006498
 800cbbc:	48000400 	.word	0x48000400

0800cbc0 <IsFactoryReset>:
{
 800cbc0:	b530      	push	{r4, r5, lr}
 800cbc2:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800cbc4:	4b39      	ldr	r3, [pc, #228]	; (800ccac <IsFactoryReset+0xec>)
 800cbc6:	6959      	ldr	r1, [r3, #20]
 800cbc8:	2080      	movs	r0, #128	; 0x80
 800cbca:	0280      	lsls	r0, r0, #10
 800cbcc:	4301      	orrs	r1, r0
 800cbce:	6159      	str	r1, [r3, #20]
 800cbd0:	695a      	ldr	r2, [r3, #20]
 800cbd2:	4002      	ands	r2, r0
 800cbd4:	9203      	str	r2, [sp, #12]
 800cbd6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800cbd8:	6959      	ldr	r1, [r3, #20]
 800cbda:	2080      	movs	r0, #128	; 0x80
 800cbdc:	02c0      	lsls	r0, r0, #11
 800cbde:	4301      	orrs	r1, r0
 800cbe0:	6159      	str	r1, [r3, #20]
 800cbe2:	695a      	ldr	r2, [r3, #20]
 800cbe4:	4002      	ands	r2, r0
 800cbe6:	9204      	str	r2, [sp, #16]
 800cbe8:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800cbea:	6959      	ldr	r1, [r3, #20]
 800cbec:	2080      	movs	r0, #128	; 0x80
 800cbee:	0300      	lsls	r0, r0, #12
 800cbf0:	4301      	orrs	r1, r0
 800cbf2:	6159      	str	r1, [r3, #20]
 800cbf4:	695a      	ldr	r2, [r3, #20]
 800cbf6:	4002      	ands	r2, r0
 800cbf8:	9205      	str	r2, [sp, #20]
 800cbfa:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800cbfc:	695a      	ldr	r2, [r3, #20]
 800cbfe:	2180      	movs	r1, #128	; 0x80
 800cc00:	0349      	lsls	r1, r1, #13
 800cc02:	430a      	orrs	r2, r1
 800cc04:	615a      	str	r2, [r3, #20]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	400b      	ands	r3, r1
 800cc0a:	9306      	str	r3, [sp, #24]
 800cc0c:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cc0e:	ab08      	add	r3, sp, #32
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	ab0b      	add	r3, sp, #44	; 0x2c
 800cc14:	2222      	movs	r2, #34	; 0x22
 800cc16:	446a      	add	r2, sp
 800cc18:	a90c      	add	r1, sp, #48	; 0x30
 800cc1a:	2001      	movs	r0, #1
 800cc1c:	f7ff ff94 	bl	800cb48 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cc20:	ac07      	add	r4, sp, #28
 800cc22:	9400      	str	r4, [sp, #0]
 800cc24:	ab09      	add	r3, sp, #36	; 0x24
 800cc26:	221e      	movs	r2, #30
 800cc28:	446a      	add	r2, sp
 800cc2a:	a90a      	add	r1, sp, #40	; 0x28
 800cc2c:	2003      	movs	r0, #3
 800cc2e:	f7ff ff8b 	bl	800cb48 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc32:	2301      	movs	r3, #1
 800cc34:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc36:	2500      	movs	r5, #0
 800cc38:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800cc3a:	466b      	mov	r3, sp
 800cc3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800cc3e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800cc40:	a90d      	add	r1, sp, #52	; 0x34
 800cc42:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc44:	f005 f87a 	bl	8011d3c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc48:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cc4e:	8823      	ldrh	r3, [r4, #0]
 800cc50:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cc52:	a90d      	add	r1, sp, #52	; 0x34
 800cc54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc56:	f005 f871 	bl	8011d3c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800cc5a:	466b      	mov	r3, sp
 800cc5c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800cc5e:	2200      	movs	r2, #0
 800cc60:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc62:	f005 f9ef 	bl	8012044 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800cc66:	2005      	movs	r0, #5
 800cc68:	f001 fafe 	bl	800e268 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800cc6c:	8821      	ldrh	r1, [r4, #0]
 800cc6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc70:	f005 f9e2 	bl	8012038 <HAL_GPIO_ReadPin>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d006      	beq.n	800cc86 <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800cc78:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <IsFactoryReset+0xf0>)
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	4252      	negs	r2, r2
 800cc7e:	601a      	str	r2, [r3, #0]
	return 0;
 800cc80:	2000      	movs	r0, #0
}
 800cc82:	b013      	add	sp, #76	; 0x4c
 800cc84:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800cc86:	2322      	movs	r3, #34	; 0x22
 800cc88:	446b      	add	r3, sp
 800cc8a:	8819      	ldrh	r1, [r3, #0]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc90:	f005 f9d8 	bl	8012044 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800cc94:	2005      	movs	r0, #5
 800cc96:	f001 fae7 	bl	800e268 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800cc9a:	ab07      	add	r3, sp, #28
 800cc9c:	8819      	ldrh	r1, [r3, #0]
 800cc9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cca0:	f005 f9ca 	bl	8012038 <HAL_GPIO_ReadPin>
 800cca4:	2801      	cmp	r0, #1
 800cca6:	d1e7      	bne.n	800cc78 <IsFactoryReset+0xb8>
 800cca8:	e7eb      	b.n	800cc82 <IsFactoryReset+0xc2>
 800ccaa:	46c0      	nop			; (mov r8, r8)
 800ccac:	40021000 	.word	0x40021000
 800ccb0:	20007ff0 	.word	0x20007ff0

0800ccb4 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800ccb8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ccba:	00c2      	lsls	r2, r0, #3
 800ccbc:	1812      	adds	r2, r2, r0
 800ccbe:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <CheckForTimedButtonPress+0x74>)
 800ccc0:	189b      	adds	r3, r3, r2
 800ccc2:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800ccc4:	0082      	lsls	r2, r0, #2
 800ccc6:	4b1a      	ldr	r3, [pc, #104]	; (800cd30 <CheckForTimedButtonPress+0x78>)
 800ccc8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800ccca:	0163      	lsls	r3, r4, #5
 800cccc:	1b1b      	subs	r3, r3, r4
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	191b      	adds	r3, r3, r4
 800ccd2:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800ccd4:	4299      	cmp	r1, r3
 800ccd6:	d01c      	beq.n	800cd12 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ccd8:	00c2      	lsls	r2, r0, #3
 800ccda:	1812      	adds	r2, r2, r0
 800ccdc:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <CheckForTimedButtonPress+0x74>)
 800ccde:	189b      	adds	r3, r3, r2
 800cce0:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 800cce2:	0163      	lsls	r3, r4, #5
 800cce4:	1b1b      	subs	r3, r3, r4
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	191b      	adds	r3, r3, r4
 800ccea:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800ccec:	4299      	cmp	r1, r3
 800ccee:	d017      	beq.n	800cd20 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 800ccf0:	00c2      	lsls	r2, r0, #3
 800ccf2:	1812      	adds	r2, r2, r0
 800ccf4:	4b0d      	ldr	r3, [pc, #52]	; (800cd2c <CheckForTimedButtonPress+0x74>)
 800ccf6:	189b      	adds	r3, r3, r2
 800ccf8:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 800ccfa:	0163      	lsls	r3, r4, #5
 800ccfc:	1b1b      	subs	r3, r3, r4
 800ccfe:	009b      	lsls	r3, r3, #2
 800cd00:	191b      	adds	r3, r3, r4
 800cd02:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800cd04:	4299      	cmp	r1, r3
 800cd06:	d109      	bne.n	800cd1c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 800cd08:	0010      	movs	r0, r2
 800cd0a:	4b08      	ldr	r3, [pc, #32]	; (800cd2c <CheckForTimedButtonPress+0x74>)
 800cd0c:	220a      	movs	r2, #10
 800cd0e:	54c2      	strb	r2, [r0, r3]
 800cd10:	e004      	b.n	800cd1c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800cd12:	00c3      	lsls	r3, r0, #3
 800cd14:	1818      	adds	r0, r3, r0
 800cd16:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <CheckForTimedButtonPress+0x74>)
 800cd18:	2209      	movs	r2, #9
 800cd1a:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800cd20:	0010      	movs	r0, r2
 800cd22:	4b02      	ldr	r3, [pc, #8]	; (800cd2c <CheckForTimedButtonPress+0x74>)
 800cd24:	220a      	movs	r2, #10
 800cd26:	54c2      	strb	r2, [r0, r3]
 800cd28:	e7f8      	b.n	800cd1c <CheckForTimedButtonPress+0x64>
 800cd2a:	46c0      	nop			; (mov r8, r8)
 800cd2c:	20001358 	.word	0x20001358
 800cd30:	20001390 	.word	0x20001390

0800cd34 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800cd34:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800cd36:	00c2      	lsls	r2, r0, #3
 800cd38:	1812      	adds	r2, r2, r0
 800cd3a:	4b1b      	ldr	r3, [pc, #108]	; (800cda8 <CheckForTimedButtonRelease+0x74>)
 800cd3c:	189b      	adds	r3, r3, r2
 800cd3e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800cd40:	0082      	lsls	r2, r0, #2
 800cd42:	4b1a      	ldr	r3, [pc, #104]	; (800cdac <CheckForTimedButtonRelease+0x78>)
 800cd44:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800cd46:	0163      	lsls	r3, r4, #5
 800cd48:	1b1b      	subs	r3, r3, r4
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	191b      	adds	r3, r3, r4
 800cd4e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800cd50:	4299      	cmp	r1, r3
 800cd52:	d01c      	beq.n	800cd8e <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800cd54:	00c2      	lsls	r2, r0, #3
 800cd56:	1812      	adds	r2, r2, r0
 800cd58:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <CheckForTimedButtonRelease+0x74>)
 800cd5a:	189b      	adds	r3, r3, r2
 800cd5c:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800cd5e:	0163      	lsls	r3, r4, #5
 800cd60:	1b1b      	subs	r3, r3, r4
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	191b      	adds	r3, r3, r4
 800cd66:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800cd68:	4299      	cmp	r1, r3
 800cd6a:	d017      	beq.n	800cd9c <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800cd6c:	00c2      	lsls	r2, r0, #3
 800cd6e:	1812      	adds	r2, r2, r0
 800cd70:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <CheckForTimedButtonRelease+0x74>)
 800cd72:	189b      	adds	r3, r3, r2
 800cd74:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 800cd76:	0163      	lsls	r3, r4, #5
 800cd78:	1b1b      	subs	r3, r3, r4
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	191b      	adds	r3, r3, r4
 800cd7e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800cd80:	4299      	cmp	r1, r3
 800cd82:	d109      	bne.n	800cd98 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800cd84:	0010      	movs	r0, r2
 800cd86:	4b08      	ldr	r3, [pc, #32]	; (800cda8 <CheckForTimedButtonRelease+0x74>)
 800cd88:	220d      	movs	r2, #13
 800cd8a:	54c2      	strb	r2, [r0, r3]
 800cd8c:	e004      	b.n	800cd98 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800cd8e:	00c3      	lsls	r3, r0, #3
 800cd90:	1818      	adds	r0, r3, r0
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <CheckForTimedButtonRelease+0x74>)
 800cd94:	220c      	movs	r2, #12
 800cd96:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800cd98:	2000      	movs	r0, #0
 800cd9a:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800cd9c:	0010      	movs	r0, r2
 800cd9e:	4b02      	ldr	r3, [pc, #8]	; (800cda8 <CheckForTimedButtonRelease+0x74>)
 800cda0:	220d      	movs	r2, #13
 800cda2:	54c2      	strb	r2, [r0, r3]
 800cda4:	e7f8      	b.n	800cd98 <CheckForTimedButtonRelease+0x64>
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	20001358 	.word	0x20001358
 800cdac:	200013a0 	.word	0x200013a0

0800cdb0 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	b08d      	sub	sp, #52	; 0x34
 800cdb4:	0006      	movs	r6, r0
 800cdb6:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800cdb8:	4b41      	ldr	r3, [pc, #260]	; (800cec0 <AddPortButton+0x110>)
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d157      	bne.n	800ce70 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800cdc0:	4b40      	ldr	r3, [pc, #256]	; (800cec4 <AddPortButton+0x114>)
 800cdc2:	2204      	movs	r2, #4
 800cdc4:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800cdc6:	4b3e      	ldr	r3, [pc, #248]	; (800cec0 <AddPortButton+0x110>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d15a      	bne.n	800ce84 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800cdce:	2512      	movs	r5, #18
 800cdd0:	446d      	add	r5, sp
 800cdd2:	af04      	add	r7, sp, #16
 800cdd4:	9700      	str	r7, [sp, #0]
 800cdd6:	ab05      	add	r3, sp, #20
 800cdd8:	002a      	movs	r2, r5
 800cdda:	a906      	add	r1, sp, #24
 800cddc:	0020      	movs	r0, r4
 800cdde:	f7ff feb3 	bl	800cb48 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800cde2:	882b      	ldrh	r3, [r5, #0]
 800cde4:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cde6:	2301      	movs	r3, #1
 800cde8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdea:	2500      	movs	r5, #0
 800cdec:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800cdee:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800cdf0:	a907      	add	r1, sp, #28
 800cdf2:	9806      	ldr	r0, [sp, #24]
 800cdf4:	f004 ffa2 	bl	8011d3c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800cdf8:	883b      	ldrh	r3, [r7, #0]
 800cdfa:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cdfc:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cdfe:	2302      	movs	r3, #2
 800ce00:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800ce02:	a907      	add	r1, sp, #28
 800ce04:	9805      	ldr	r0, [sp, #20]
 800ce06:	f004 ff99 	bl	8011d3c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800ce0a:	00e2      	lsls	r2, r4, #3
 800ce0c:	1912      	adds	r2, r2, r4
 800ce0e:	4b2e      	ldr	r3, [pc, #184]	; (800cec8 <AddPortButton+0x118>)
 800ce10:	189b      	adds	r3, r3, r2
 800ce12:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800ce14:	0025      	movs	r5, r4
 800ce16:	353a      	adds	r5, #58	; 0x3a
 800ce18:	00ad      	lsls	r5, r5, #2
 800ce1a:	210e      	movs	r1, #14
 800ce1c:	4469      	add	r1, sp
 800ce1e:	0028      	movs	r0, r5
 800ce20:	f7ff fb24 	bl	800c46c <EE_ReadVariable>
	if (!res)											// This variable exists
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d133      	bne.n	800ce90 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800ce28:	230e      	movs	r3, #14
 800ce2a:	446b      	add	r3, sp
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	0a1a      	lsrs	r2, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800ce30:	0b1b      	lsrs	r3, r3, #12
 800ce32:	42a3      	cmp	r3, r4
 800ce34:	d103      	bne.n	800ce3e <AddPortButton+0x8e>
 800ce36:	230f      	movs	r3, #15
 800ce38:	4013      	ands	r3, r2
 800ce3a:	42b3      	cmp	r3, r6
 800ce3c:	d015      	beq.n	800ce6a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800ce3e:	0324      	lsls	r4, r4, #12
 800ce40:	0231      	lsls	r1, r6, #8
 800ce42:	4321      	orrs	r1, r4
 800ce44:	b289      	uxth	r1, r1
 800ce46:	230e      	movs	r3, #14
 800ce48:	446b      	add	r3, sp
 800ce4a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800ce4c:	0028      	movs	r0, r5
 800ce4e:	f7ff fb39 	bl	800c4c4 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800ce52:	1c68      	adds	r0, r5, #1
 800ce54:	2100      	movs	r1, #0
 800ce56:	f7ff fb35 	bl	800c4c4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800ce5a:	1ca8      	adds	r0, r5, #2
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	f7ff fb31 	bl	800c4c4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800ce62:	1ce8      	adds	r0, r5, #3
 800ce64:	2100      	movs	r1, #0
 800ce66:	f7ff fb2d 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	b00d      	add	sp, #52	; 0x34
 800ce6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800ce70:	008d      	lsls	r5, r1, #2
 800ce72:	4b16      	ldr	r3, [pc, #88]	; (800cecc <AddPortButton+0x11c>)
 800ce74:	58e8      	ldr	r0, [r5, r3]
 800ce76:	f001 fd35 	bl	800e8e4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800ce7a:	4b15      	ldr	r3, [pc, #84]	; (800ced0 <AddPortButton+0x120>)
 800ce7c:	58e8      	ldr	r0, [r5, r3]
 800ce7e:	f001 fd31 	bl	800e8e4 <osSemaphoreRelease>
 800ce82:	e79d      	b.n	800cdc0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800ce84:	0020      	movs	r0, r4
 800ce86:	f001 fb23 	bl	800e4d0 <GetUart>
 800ce8a:	f006 f8a8 	bl	8012fde <HAL_UART_DeInit>
 800ce8e:	e79e      	b.n	800cdce <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800ce90:	0324      	lsls	r4, r4, #12
 800ce92:	0231      	lsls	r1, r6, #8
 800ce94:	4321      	orrs	r1, r4
 800ce96:	b289      	uxth	r1, r1
 800ce98:	230e      	movs	r3, #14
 800ce9a:	446b      	add	r3, sp
 800ce9c:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800ce9e:	0028      	movs	r0, r5
 800cea0:	f7ff fb10 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800cea4:	1c68      	adds	r0, r5, #1
 800cea6:	2100      	movs	r1, #0
 800cea8:	f7ff fb0c 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800ceac:	1ca8      	adds	r0, r5, #2
 800ceae:	2100      	movs	r1, #0
 800ceb0:	f7ff fb08 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800ceb4:	1ce8      	adds	r0, r5, #3
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	f7ff fb04 	bl	800c4c4 <EE_WriteVariable>
 800cebc:	e7d5      	b.n	800ce6a <AddPortButton+0xba>
 800cebe:	46c0      	nop			; (mov r8, r8)
 800cec0:	200002b6 	.word	0x200002b6
 800cec4:	20000878 	.word	0x20000878
 800cec8:	20001358 	.word	0x20001358
 800cecc:	2000631c 	.word	0x2000631c
 800ced0:	200062fc 	.word	0x200062fc

0800ced4 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800ceda:	4836      	ldr	r0, [pc, #216]	; (800cfb4 <RemovePortButton+0xe0>)
 800cedc:	00e9      	lsls	r1, r5, #3
 800cede:	1949      	adds	r1, r1, r5
 800cee0:	1842      	adds	r2, r0, r1
 800cee2:	2300      	movs	r3, #0
 800cee4:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800cee6:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800cee8:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800ceea:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800ceec:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800ceee:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800cef0:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800cef2:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800cef4:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800cef6:	002c      	movs	r4, r5
 800cef8:	343a      	adds	r4, #58	; 0x3a
 800cefa:	00a4      	lsls	r4, r4, #2
 800cefc:	466b      	mov	r3, sp
 800cefe:	1d99      	adds	r1, r3, #6
 800cf00:	0020      	movs	r0, r4
 800cf02:	f7ff fab3 	bl	800c46c <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d02b      	beq.n	800cf62 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800cf0a:	0028      	movs	r0, r5
 800cf0c:	f001 fae0 	bl	800e4d0 <GetUart>
 800cf10:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 800cf12:	6803      	ldr	r3, [r0, #0]
 800cf14:	4a28      	ldr	r2, [pc, #160]	; (800cfb8 <RemovePortButton+0xe4>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d034      	beq.n	800cf84 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800cf1a:	4a28      	ldr	r2, [pc, #160]	; (800cfbc <RemovePortButton+0xe8>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d035      	beq.n	800cf8c <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800cf20:	4a27      	ldr	r2, [pc, #156]	; (800cfc0 <RemovePortButton+0xec>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d036      	beq.n	800cf94 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800cf26:	4a27      	ldr	r2, [pc, #156]	; (800cfc4 <RemovePortButton+0xf0>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d037      	beq.n	800cf9c <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800cf2c:	4a26      	ldr	r2, [pc, #152]	; (800cfc8 <RemovePortButton+0xf4>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d03c      	beq.n	800cfac <RemovePortButton+0xd8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800cf32:	4a26      	ldr	r2, [pc, #152]	; (800cfcc <RemovePortButton+0xf8>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d035      	beq.n	800cfa4 <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800cf38:	4a25      	ldr	r2, [pc, #148]	; (800cfd0 <RemovePortButton+0xfc>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d038      	beq.n	800cfb0 <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800cf3e:	4a25      	ldr	r2, [pc, #148]	; (800cfd4 <RemovePortButton+0x100>)
 800cf40:	4694      	mov	ip, r2
 800cf42:	4463      	add	r3, ip
 800cf44:	1e5c      	subs	r4, r3, #1
 800cf46:	41a3      	sbcs	r3, r4
 800cf48:	425c      	negs	r4, r3
 800cf4a:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800cf4c:	4b22      	ldr	r3, [pc, #136]	; (800cfd8 <RemovePortButton+0x104>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800cf52:	3201      	adds	r2, #1
 800cf54:	4921      	ldr	r1, [pc, #132]	; (800cfdc <RemovePortButton+0x108>)
 800cf56:	0030      	movs	r0, r6
 800cf58:	f006 f89a 	bl	8013090 <HAL_UART_Receive_IT>

	return result;
}
 800cf5c:	0020      	movs	r0, r4
 800cf5e:	b002      	add	sp, #8
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800cf62:	2100      	movs	r1, #0
 800cf64:	0020      	movs	r0, r4
 800cf66:	f7ff faad 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800cf6a:	1c60      	adds	r0, r4, #1
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	f7ff faa9 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800cf72:	1ca0      	adds	r0, r4, #2
 800cf74:	2100      	movs	r1, #0
 800cf76:	f7ff faa5 	bl	800c4c4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800cf7a:	1ce0      	adds	r0, r4, #3
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	f7ff faa1 	bl	800c4c4 <EE_WriteVariable>
 800cf82:	e7c2      	b.n	800cf0a <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800cf84:	f001 f982 	bl	800e28c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800cf88:	2400      	movs	r4, #0
 800cf8a:	e7df      	b.n	800cf4c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800cf8c:	f001 f996 	bl	800e2bc <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800cf90:	2400      	movs	r4, #0
 800cf92:	e7db      	b.n	800cf4c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800cf94:	f001 f9aa 	bl	800e2ec <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800cf98:	2400      	movs	r4, #0
 800cf9a:	e7d7      	b.n	800cf4c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800cf9c:	f001 f9be 	bl	800e31c <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800cfa0:	2400      	movs	r4, #0
 800cfa2:	e7d3      	b.n	800cf4c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800cfa4:	f001 f9d2 	bl	800e34c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800cfa8:	2400      	movs	r4, #0
 800cfaa:	e7cf      	b.n	800cf4c <RemovePortButton+0x78>
 800cfac:	2400      	movs	r4, #0
 800cfae:	e7cd      	b.n	800cf4c <RemovePortButton+0x78>
 800cfb0:	2400      	movs	r4, #0
 800cfb2:	e7cb      	b.n	800cf4c <RemovePortButton+0x78>
 800cfb4:	20001358 	.word	0x20001358
 800cfb8:	40013800 	.word	0x40013800
 800cfbc:	40004400 	.word	0x40004400
 800cfc0:	40004800 	.word	0x40004800
 800cfc4:	40004c00 	.word	0x40004c00
 800cfc8:	40005000 	.word	0x40005000
 800cfcc:	40011400 	.word	0x40011400
 800cfd0:	40011800 	.word	0x40011800
 800cfd4:	bffee400 	.word	0xbffee400
 800cfd8:	20000878 	.word	0x20000878
 800cfdc:	200005f4 	.word	0x200005f4

0800cfe0 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe2:	46de      	mov	lr, fp
 800cfe4:	4657      	mov	r7, sl
 800cfe6:	464e      	mov	r6, r9
 800cfe8:	4645      	mov	r5, r8
 800cfea:	b5e0      	push	{r5, r6, r7, lr}
 800cfec:	b085      	sub	sp, #20
 800cfee:	0005      	movs	r5, r0
 800cff0:	469c      	mov	ip, r3
 800cff2:	9301      	str	r3, [sp, #4]
 800cff4:	ab0e      	add	r3, sp, #56	; 0x38
 800cff6:	781e      	ldrb	r6, [r3, #0]
 800cff8:	ab0f      	add	r3, sp, #60	; 0x3c
 800cffa:	781f      	ldrb	r7, [r3, #0]
 800cffc:	ab10      	add	r3, sp, #64	; 0x40
 800cffe:	7818      	ldrb	r0, [r3, #0]
 800d000:	4681      	mov	r9, r0
 800d002:	ab11      	add	r3, sp, #68	; 0x44
 800d004:	7818      	ldrb	r0, [r3, #0]
 800d006:	4682      	mov	sl, r0
 800d008:	ab12      	add	r3, sp, #72	; 0x48
 800d00a:	7818      	ldrb	r0, [r3, #0]
 800d00c:	4680      	mov	r8, r0
 800d00e:	ab13      	add	r3, sp, #76	; 0x4c
 800d010:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800d012:	00ec      	lsls	r4, r5, #3
 800d014:	1964      	adds	r4, r4, r5
 800d016:	4bcd      	ldr	r3, [pc, #820]	; (800d34c <SetButtonEvents+0x36c>)
 800d018:	191b      	adds	r3, r3, r4
 800d01a:	785b      	ldrb	r3, [r3, #1]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d100      	bne.n	800d022 <SetButtonEvents+0x42>
 800d020:	e08c      	b.n	800d13c <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800d022:	00ec      	lsls	r4, r5, #3
 800d024:	1964      	adds	r4, r4, r5
 800d026:	4bc9      	ldr	r3, [pc, #804]	; (800d34c <SetButtonEvents+0x36c>)
 800d028:	191b      	adds	r3, r3, r4
 800d02a:	4664      	mov	r4, ip
 800d02c:	709c      	strb	r4, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800d02e:	70de      	strb	r6, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800d030:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800d032:	464c      	mov	r4, r9
 800d034:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800d036:	4654      	mov	r4, sl
 800d038:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800d03a:	4644      	mov	r4, r8
 800d03c:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800d03e:	2801      	cmp	r0, #1
 800d040:	d100      	bne.n	800d044 <SetButtonEvents+0x64>
 800d042:	e0ec      	b.n	800d21e <SetButtonEvents+0x23e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800d044:	2800      	cmp	r0, #0
 800d046:	d000      	beq.n	800d04a <SetButtonEvents+0x6a>
 800d048:	e124      	b.n	800d294 <SetButtonEvents+0x2b4>
 800d04a:	2900      	cmp	r1, #0
 800d04c:	d000      	beq.n	800d050 <SetButtonEvents+0x70>
 800d04e:	e170      	b.n	800d332 <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800d050:	00e9      	lsls	r1, r5, #3
 800d052:	1949      	adds	r1, r1, r5
 800d054:	4bbd      	ldr	r3, [pc, #756]	; (800d34c <SetButtonEvents+0x36c>)
 800d056:	185b      	adds	r3, r3, r1
 800d058:	7a19      	ldrb	r1, [r3, #8]
 800d05a:	2401      	movs	r4, #1
 800d05c:	43a1      	bics	r1, r4
 800d05e:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800d060:	2a00      	cmp	r2, #0
 800d062:	d100      	bne.n	800d066 <SetButtonEvents+0x86>
 800d064:	e0c3      	b.n	800d1ee <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800d066:	00ea      	lsls	r2, r5, #3
 800d068:	1952      	adds	r2, r2, r5
 800d06a:	4bb8      	ldr	r3, [pc, #736]	; (800d34c <SetButtonEvents+0x36c>)
 800d06c:	189b      	adds	r3, r3, r2
 800d06e:	7a1a      	ldrb	r2, [r3, #8]
 800d070:	2102      	movs	r1, #2
 800d072:	430a      	orrs	r2, r1
 800d074:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800d076:	2801      	cmp	r0, #1
 800d078:	d100      	bne.n	800d07c <SetButtonEvents+0x9c>
 800d07a:	e0da      	b.n	800d232 <SetButtonEvents+0x252>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d100      	bne.n	800d082 <SetButtonEvents+0xa2>
 800d080:	e0bd      	b.n	800d1fe <SetButtonEvents+0x21e>
 800d082:	e107      	b.n	800d294 <SetButtonEvents+0x2b4>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800d084:	00ea      	lsls	r2, r5, #3
 800d086:	1952      	adds	r2, r2, r5
 800d088:	4bb0      	ldr	r3, [pc, #704]	; (800d34c <SetButtonEvents+0x36c>)
 800d08a:	189b      	adds	r3, r3, r2
 800d08c:	7a1a      	ldrb	r2, [r3, #8]
 800d08e:	2110      	movs	r1, #16
 800d090:	430a      	orrs	r2, r1
 800d092:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800d094:	2801      	cmp	r0, #1
 800d096:	d100      	bne.n	800d09a <SetButtonEvents+0xba>
 800d098:	e0e3      	b.n	800d262 <SetButtonEvents+0x282>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d000      	beq.n	800d0a0 <SetButtonEvents+0xc0>
 800d09e:	e0f9      	b.n	800d294 <SetButtonEvents+0x2b4>
 800d0a0:	464b      	mov	r3, r9
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d063      	beq.n	800d16e <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800d0a6:	00ea      	lsls	r2, r5, #3
 800d0a8:	1952      	adds	r2, r2, r5
 800d0aa:	4ba8      	ldr	r3, [pc, #672]	; (800d34c <SetButtonEvents+0x36c>)
 800d0ac:	189b      	adds	r3, r3, r2
 800d0ae:	7a1a      	ldrb	r2, [r3, #8]
 800d0b0:	2120      	movs	r1, #32
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800d0b6:	e00a      	b.n	800d0ce <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800d0b8:	00ea      	lsls	r2, r5, #3
 800d0ba:	1952      	adds	r2, r2, r5
 800d0bc:	4ba3      	ldr	r3, [pc, #652]	; (800d34c <SetButtonEvents+0x36c>)
 800d0be:	189b      	adds	r3, r3, r2
 800d0c0:	7a1a      	ldrb	r2, [r3, #8]
 800d0c2:	2120      	movs	r1, #32
 800d0c4:	430a      	orrs	r2, r1
 800d0c6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d0c8:	2801      	cmp	r0, #1
 800d0ca:	d100      	bne.n	800d0ce <SetButtonEvents+0xee>
 800d0cc:	e0d1      	b.n	800d272 <SetButtonEvents+0x292>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d000      	beq.n	800d0d4 <SetButtonEvents+0xf4>
 800d0d2:	e0df      	b.n	800d294 <SetButtonEvents+0x2b4>
 800d0d4:	4653      	mov	r3, sl
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d054      	beq.n	800d184 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800d0da:	00ea      	lsls	r2, r5, #3
 800d0dc:	1952      	adds	r2, r2, r5
 800d0de:	4b9b      	ldr	r3, [pc, #620]	; (800d34c <SetButtonEvents+0x36c>)
 800d0e0:	189b      	adds	r3, r3, r2
 800d0e2:	7a1a      	ldrb	r2, [r3, #8]
 800d0e4:	2140      	movs	r1, #64	; 0x40
 800d0e6:	430a      	orrs	r2, r1
 800d0e8:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800d0ea:	e00a      	b.n	800d102 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800d0ec:	00ea      	lsls	r2, r5, #3
 800d0ee:	1952      	adds	r2, r2, r5
 800d0f0:	4b96      	ldr	r3, [pc, #600]	; (800d34c <SetButtonEvents+0x36c>)
 800d0f2:	189b      	adds	r3, r3, r2
 800d0f4:	7a1a      	ldrb	r2, [r3, #8]
 800d0f6:	2140      	movs	r1, #64	; 0x40
 800d0f8:	430a      	orrs	r2, r1
 800d0fa:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d0fc:	2801      	cmp	r0, #1
 800d0fe:	d100      	bne.n	800d102 <SetButtonEvents+0x122>
 800d100:	e0bf      	b.n	800d282 <SetButtonEvents+0x2a2>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800d102:	2800      	cmp	r0, #0
 800d104:	d046      	beq.n	800d194 <SetButtonEvents+0x1b4>
 800d106:	e0c5      	b.n	800d294 <SetButtonEvents+0x2b4>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800d108:	0a19      	lsrs	r1, r3, #8
 800d10a:	0209      	lsls	r1, r1, #8
 800d10c:	4301      	orrs	r1, r0
 800d10e:	ab02      	add	r3, sp, #8
 800d110:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800d112:	0020      	movs	r0, r4
 800d114:	f7ff f9d6 	bl	800c4c4 <EE_WriteVariable>
 800d118:	e0d3      	b.n	800d2c2 <SetButtonEvents+0x2e2>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800d11a:	464b      	mov	r3, r9
 800d11c:	4319      	orrs	r1, r3
 800d11e:	4658      	mov	r0, fp
 800d120:	f7ff f9d0 	bl	800c4c4 <EE_WriteVariable>
 800d124:	e0dd      	b.n	800d2e2 <SetButtonEvents+0x302>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800d126:	0019      	movs	r1, r3
 800d128:	0028      	movs	r0, r5
 800d12a:	f7ff f9cb 	bl	800c4c4 <EE_WriteVariable>
 800d12e:	e0ea      	b.n	800d306 <SetButtonEvents+0x326>
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800d130:	0019      	movs	r1, r3
 800d132:	0020      	movs	r0, r4
 800d134:	f7ff f9c6 	bl	800c4c4 <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800d138:	2000      	movs	r0, #0
 800d13a:	e0f3      	b.n	800d324 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800d13c:	200b      	movs	r0, #11
 800d13e:	e0f1      	b.n	800d324 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800d140:	200b      	movs	r0, #11
 800d142:	e0ef      	b.n	800d324 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800d144:	00ea      	lsls	r2, r5, #3
 800d146:	1952      	adds	r2, r2, r5
 800d148:	4b80      	ldr	r3, [pc, #512]	; (800d34c <SetButtonEvents+0x36c>)
 800d14a:	189b      	adds	r3, r3, r2
 800d14c:	7a1a      	ldrb	r2, [r3, #8]
 800d14e:	2108      	movs	r1, #8
 800d150:	438a      	bics	r2, r1
 800d152:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800d154:	2f00      	cmp	r7, #0
 800d156:	d195      	bne.n	800d084 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800d158:	00ea      	lsls	r2, r5, #3
 800d15a:	1952      	adds	r2, r2, r5
 800d15c:	4b7b      	ldr	r3, [pc, #492]	; (800d34c <SetButtonEvents+0x36c>)
 800d15e:	189b      	adds	r3, r3, r2
 800d160:	7a1a      	ldrb	r2, [r3, #8]
 800d162:	2110      	movs	r1, #16
 800d164:	438a      	bics	r2, r1
 800d166:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800d168:	464b      	mov	r3, r9
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1a4      	bne.n	800d0b8 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800d16e:	00ea      	lsls	r2, r5, #3
 800d170:	1952      	adds	r2, r2, r5
 800d172:	4b76      	ldr	r3, [pc, #472]	; (800d34c <SetButtonEvents+0x36c>)
 800d174:	189b      	adds	r3, r3, r2
 800d176:	7a1a      	ldrb	r2, [r3, #8]
 800d178:	2120      	movs	r1, #32
 800d17a:	438a      	bics	r2, r1
 800d17c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800d17e:	4653      	mov	r3, sl
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1b3      	bne.n	800d0ec <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800d184:	00ea      	lsls	r2, r5, #3
 800d186:	1952      	adds	r2, r2, r5
 800d188:	4b70      	ldr	r3, [pc, #448]	; (800d34c <SetButtonEvents+0x36c>)
 800d18a:	189b      	adds	r3, r3, r2
 800d18c:	7a1a      	ldrb	r2, [r3, #8]
 800d18e:	2140      	movs	r1, #64	; 0x40
 800d190:	438a      	bics	r2, r1
 800d192:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800d194:	4643      	mov	r3, r8
 800d196:	2b00      	cmp	r3, #0
 800d198:	d173      	bne.n	800d282 <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800d19a:	00ea      	lsls	r2, r5, #3
 800d19c:	1952      	adds	r2, r2, r5
 800d19e:	4b6b      	ldr	r3, [pc, #428]	; (800d34c <SetButtonEvents+0x36c>)
 800d1a0:	189b      	adds	r3, r3, r2
 800d1a2:	7a19      	ldrb	r1, [r3, #8]
 800d1a4:	227f      	movs	r2, #127	; 0x7f
 800d1a6:	400a      	ands	r2, r1
 800d1a8:	721a      	strb	r2, [r3, #8]
 800d1aa:	e073      	b.n	800d294 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800d1ac:	00ea      	lsls	r2, r5, #3
 800d1ae:	1952      	adds	r2, r2, r5
 800d1b0:	4b66      	ldr	r3, [pc, #408]	; (800d34c <SetButtonEvents+0x36c>)
 800d1b2:	189b      	adds	r3, r3, r2
 800d1b4:	7a1a      	ldrb	r2, [r3, #8]
 800d1b6:	2104      	movs	r1, #4
 800d1b8:	438a      	bics	r2, r1
 800d1ba:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800d1bc:	2e00      	cmp	r6, #0
 800d1be:	d0c1      	beq.n	800d144 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800d1c0:	00ea      	lsls	r2, r5, #3
 800d1c2:	1952      	adds	r2, r2, r5
 800d1c4:	4b61      	ldr	r3, [pc, #388]	; (800d34c <SetButtonEvents+0x36c>)
 800d1c6:	189b      	adds	r3, r3, r2
 800d1c8:	7a1a      	ldrb	r2, [r3, #8]
 800d1ca:	2108      	movs	r1, #8
 800d1cc:	430a      	orrs	r2, r1
 800d1ce:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d1d0:	2801      	cmp	r0, #1
 800d1d2:	d03e      	beq.n	800d252 <SetButtonEvents+0x272>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d15d      	bne.n	800d294 <SetButtonEvents+0x2b4>
 800d1d8:	2f00      	cmp	r7, #0
 800d1da:	d0bd      	beq.n	800d158 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800d1dc:	00ea      	lsls	r2, r5, #3
 800d1de:	1952      	adds	r2, r2, r5
 800d1e0:	4b5a      	ldr	r3, [pc, #360]	; (800d34c <SetButtonEvents+0x36c>)
 800d1e2:	189b      	adds	r3, r3, r2
 800d1e4:	7a1a      	ldrb	r2, [r3, #8]
 800d1e6:	2110      	movs	r1, #16
 800d1e8:	430a      	orrs	r2, r1
 800d1ea:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d1ec:	e755      	b.n	800d09a <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800d1ee:	00ea      	lsls	r2, r5, #3
 800d1f0:	1952      	adds	r2, r2, r5
 800d1f2:	4b56      	ldr	r3, [pc, #344]	; (800d34c <SetButtonEvents+0x36c>)
 800d1f4:	189b      	adds	r3, r3, r2
 800d1f6:	7a1a      	ldrb	r2, [r3, #8]
 800d1f8:	2102      	movs	r1, #2
 800d1fa:	438a      	bics	r2, r1
 800d1fc:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800d1fe:	9b01      	ldr	r3, [sp, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d0d3      	beq.n	800d1ac <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800d204:	00ea      	lsls	r2, r5, #3
 800d206:	1952      	adds	r2, r2, r5
 800d208:	4b50      	ldr	r3, [pc, #320]	; (800d34c <SetButtonEvents+0x36c>)
 800d20a:	189b      	adds	r3, r3, r2
 800d20c:	7a1a      	ldrb	r2, [r3, #8]
 800d20e:	2104      	movs	r1, #4
 800d210:	430a      	orrs	r2, r1
 800d212:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d214:	2801      	cmp	r0, #1
 800d216:	d014      	beq.n	800d242 <SetButtonEvents+0x262>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0cf      	beq.n	800d1bc <SetButtonEvents+0x1dc>
 800d21c:	e03a      	b.n	800d294 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800d21e:	00eb      	lsls	r3, r5, #3
 800d220:	195b      	adds	r3, r3, r5
 800d222:	4a4a      	ldr	r2, [pc, #296]	; (800d34c <SetButtonEvents+0x36c>)
 800d224:	18d2      	adds	r2, r2, r3
 800d226:	7a13      	ldrb	r3, [r2, #8]
 800d228:	2101      	movs	r1, #1
 800d22a:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800d22c:	2102      	movs	r1, #2
 800d22e:	430b      	orrs	r3, r1
 800d230:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800d232:	00ea      	lsls	r2, r5, #3
 800d234:	1952      	adds	r2, r2, r5
 800d236:	4b45      	ldr	r3, [pc, #276]	; (800d34c <SetButtonEvents+0x36c>)
 800d238:	189b      	adds	r3, r3, r2
 800d23a:	7a1a      	ldrb	r2, [r3, #8]
 800d23c:	2104      	movs	r1, #4
 800d23e:	430a      	orrs	r2, r1
 800d240:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800d242:	00ea      	lsls	r2, r5, #3
 800d244:	1952      	adds	r2, r2, r5
 800d246:	4b41      	ldr	r3, [pc, #260]	; (800d34c <SetButtonEvents+0x36c>)
 800d248:	189b      	adds	r3, r3, r2
 800d24a:	7a1a      	ldrb	r2, [r3, #8]
 800d24c:	2108      	movs	r1, #8
 800d24e:	430a      	orrs	r2, r1
 800d250:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800d252:	00ea      	lsls	r2, r5, #3
 800d254:	1952      	adds	r2, r2, r5
 800d256:	4b3d      	ldr	r3, [pc, #244]	; (800d34c <SetButtonEvents+0x36c>)
 800d258:	189b      	adds	r3, r3, r2
 800d25a:	7a1a      	ldrb	r2, [r3, #8]
 800d25c:	2110      	movs	r1, #16
 800d25e:	430a      	orrs	r2, r1
 800d260:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800d262:	00ea      	lsls	r2, r5, #3
 800d264:	1952      	adds	r2, r2, r5
 800d266:	4b39      	ldr	r3, [pc, #228]	; (800d34c <SetButtonEvents+0x36c>)
 800d268:	189b      	adds	r3, r3, r2
 800d26a:	7a1a      	ldrb	r2, [r3, #8]
 800d26c:	2120      	movs	r1, #32
 800d26e:	430a      	orrs	r2, r1
 800d270:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800d272:	00ea      	lsls	r2, r5, #3
 800d274:	1952      	adds	r2, r2, r5
 800d276:	4b35      	ldr	r3, [pc, #212]	; (800d34c <SetButtonEvents+0x36c>)
 800d278:	189b      	adds	r3, r3, r2
 800d27a:	7a1a      	ldrb	r2, [r3, #8]
 800d27c:	2140      	movs	r1, #64	; 0x40
 800d27e:	430a      	orrs	r2, r1
 800d280:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800d282:	00ea      	lsls	r2, r5, #3
 800d284:	1952      	adds	r2, r2, r5
 800d286:	4b31      	ldr	r3, [pc, #196]	; (800d34c <SetButtonEvents+0x36c>)
 800d288:	189b      	adds	r3, r3, r2
 800d28a:	7a19      	ldrb	r1, [r3, #8]
 800d28c:	2280      	movs	r2, #128	; 0x80
 800d28e:	4252      	negs	r2, r2
 800d290:	430a      	orrs	r2, r1
 800d292:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800d294:	002c      	movs	r4, r5
 800d296:	343a      	adds	r4, #58	; 0x3a
 800d298:	00a4      	lsls	r4, r4, #2
 800d29a:	ab02      	add	r3, sp, #8
 800d29c:	1d99      	adds	r1, r3, #6
 800d29e:	0020      	movs	r0, r4
 800d2a0:	f7ff f8e4 	bl	800c46c <EE_ReadVariable>
	if (!res)											// This variable exists
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d000      	beq.n	800d2aa <SetButtonEvents+0x2ca>
 800d2a8:	e74a      	b.n	800d140 <SetButtonEvents+0x160>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800d2aa:	ab02      	add	r3, sp, #8
 800d2ac:	1d9a      	adds	r2, r3, #6
 800d2ae:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800d2b0:	00e8      	lsls	r0, r5, #3
 800d2b2:	1945      	adds	r5, r0, r5
 800d2b4:	4825      	ldr	r0, [pc, #148]	; (800d34c <SetButtonEvents+0x36c>)
 800d2b6:	1940      	adds	r0, r0, r5
 800d2b8:	7a00      	ldrb	r0, [r0, #8]
 800d2ba:	7812      	ldrb	r2, [r2, #0]
 800d2bc:	4282      	cmp	r2, r0
 800d2be:	d000      	beq.n	800d2c2 <SetButtonEvents+0x2e2>
 800d2c0:	e722      	b.n	800d108 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800d2c2:	1c63      	adds	r3, r4, #1
 800d2c4:	469b      	mov	fp, r3
 800d2c6:	ab02      	add	r3, sp, #8
 800d2c8:	1d9d      	adds	r5, r3, #6
 800d2ca:	0029      	movs	r1, r5
 800d2cc:	4658      	mov	r0, fp
 800d2ce:	f7ff f8cd 	bl	800c46c <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	0219      	lsls	r1, r3, #8
 800d2d6:	882a      	ldrh	r2, [r5, #0]
 800d2d8:	464b      	mov	r3, r9
 800d2da:	430b      	orrs	r3, r1
		if (temp16
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d000      	beq.n	800d2e2 <SetButtonEvents+0x302>
 800d2e0:	e71b      	b.n	800d11a <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800d2e2:	1ca5      	adds	r5, r4, #2
 800d2e4:	2306      	movs	r3, #6
 800d2e6:	aa02      	add	r2, sp, #8
 800d2e8:	4694      	mov	ip, r2
 800d2ea:	4463      	add	r3, ip
 800d2ec:	4699      	mov	r9, r3
 800d2ee:	0019      	movs	r1, r3
 800d2f0:	0028      	movs	r0, r5
 800d2f2:	f7ff f8bb 	bl	800c46c <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800d2f6:	0236      	lsls	r6, r6, #8
 800d2f8:	464b      	mov	r3, r9
 800d2fa:	881a      	ldrh	r2, [r3, #0]
 800d2fc:	4653      	mov	r3, sl
 800d2fe:	4333      	orrs	r3, r6
		if (temp16
 800d300:	429a      	cmp	r2, r3
 800d302:	d000      	beq.n	800d306 <SetButtonEvents+0x326>
 800d304:	e70f      	b.n	800d126 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800d306:	3403      	adds	r4, #3
 800d308:	ab02      	add	r3, sp, #8
 800d30a:	1d9d      	adds	r5, r3, #6
 800d30c:	0029      	movs	r1, r5
 800d30e:	0020      	movs	r0, r4
 800d310:	f7ff f8ac 	bl	800c46c <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800d314:	023f      	lsls	r7, r7, #8
 800d316:	882a      	ldrh	r2, [r5, #0]
 800d318:	4643      	mov	r3, r8
 800d31a:	433b      	orrs	r3, r7
	return result;
 800d31c:	2000      	movs	r0, #0
		if (temp16
 800d31e:	429a      	cmp	r2, r3
 800d320:	d000      	beq.n	800d324 <SetButtonEvents+0x344>
 800d322:	e705      	b.n	800d130 <SetButtonEvents+0x150>
}
 800d324:	b005      	add	sp, #20
 800d326:	bcf0      	pop	{r4, r5, r6, r7}
 800d328:	46bb      	mov	fp, r7
 800d32a:	46b2      	mov	sl, r6
 800d32c:	46a9      	mov	r9, r5
 800d32e:	46a0      	mov	r8, r4
 800d330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 800d332:	00e9      	lsls	r1, r5, #3
 800d334:	1949      	adds	r1, r1, r5
 800d336:	4b05      	ldr	r3, [pc, #20]	; (800d34c <SetButtonEvents+0x36c>)
 800d338:	185b      	adds	r3, r3, r1
 800d33a:	7a19      	ldrb	r1, [r3, #8]
 800d33c:	2401      	movs	r4, #1
 800d33e:	4321      	orrs	r1, r4
 800d340:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800d342:	2800      	cmp	r0, #0
 800d344:	d100      	bne.n	800d348 <SetButtonEvents+0x368>
 800d346:	e68b      	b.n	800d060 <SetButtonEvents+0x80>
 800d348:	e7a4      	b.n	800d294 <SetButtonEvents+0x2b4>
 800d34a:	46c0      	nop			; (mov r8, r8)
 800d34c:	20001358 	.word	0x20001358

0800d350 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800d350:	b500      	push	{lr}
 800d352:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d354:	2214      	movs	r2, #20
 800d356:	2100      	movs	r1, #0
 800d358:	a803      	add	r0, sp, #12
 800d35a:	f006 fc5a 	bl	8013c12 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800d35e:	4b13      	ldr	r3, [pc, #76]	; (800d3ac <HAL_ADC_MspInit+0x5c>)
 800d360:	6999      	ldr	r1, [r3, #24]
 800d362:	2080      	movs	r0, #128	; 0x80
 800d364:	0080      	lsls	r0, r0, #2
 800d366:	4301      	orrs	r1, r0
 800d368:	6199      	str	r1, [r3, #24]
 800d36a:	699a      	ldr	r2, [r3, #24]
 800d36c:	4002      	ands	r2, r0
 800d36e:	9201      	str	r2, [sp, #4]
 800d370:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d372:	695a      	ldr	r2, [r3, #20]
 800d374:	2180      	movs	r1, #128	; 0x80
 800d376:	0289      	lsls	r1, r1, #10
 800d378:	430a      	orrs	r2, r1
 800d37a:	615a      	str	r2, [r3, #20]
 800d37c:	695b      	ldr	r3, [r3, #20]
 800d37e:	400b      	ands	r3, r1
 800d380:	9302      	str	r3, [sp, #8]
 800d382:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800d384:	4b0a      	ldr	r3, [pc, #40]	; (800d3b0 <HAL_ADC_MspInit+0x60>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d001      	beq.n	800d390 <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800d38c:	b009      	add	sp, #36	; 0x24
 800d38e:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800d390:	333b      	adds	r3, #59	; 0x3b
 800d392:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d394:	3b39      	subs	r3, #57	; 0x39
 800d396:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d398:	2300      	movs	r3, #0
 800d39a:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800d39c:	3871      	subs	r0, #113	; 0x71
 800d39e:	38ff      	subs	r0, #255	; 0xff
 800d3a0:	a903      	add	r1, sp, #12
 800d3a2:	05c0      	lsls	r0, r0, #23
 800d3a4:	f004 fcca 	bl	8011d3c <HAL_GPIO_Init>
}
 800d3a8:	e7f0      	b.n	800d38c <HAL_ADC_MspInit+0x3c>
 800d3aa:	46c0      	nop			; (mov r8, r8)
 800d3ac:	40021000 	.word	0x40021000
 800d3b0:	20001389 	.word	0x20001389

0800d3b4 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800d3b4:	6803      	ldr	r3, [r0, #0]
 800d3b6:	4a0d      	ldr	r2, [pc, #52]	; (800d3ec <Get_channel+0x38>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d003      	beq.n	800d3c4 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800d3bc:	4a0c      	ldr	r2, [pc, #48]	; (800d3f0 <Get_channel+0x3c>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d008      	beq.n	800d3d4 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800d3c2:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <Get_channel+0x40>)
 800d3c6:	4299      	cmp	r1, r3
 800d3c8:	d00c      	beq.n	800d3e4 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 800d3ca:	4b0b      	ldr	r3, [pc, #44]	; (800d3f8 <Get_channel+0x44>)
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	d1f8      	bne.n	800d3c2 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800d3d0:	2003      	movs	r0, #3
 800d3d2:	e7f6      	b.n	800d3c2 <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800d3d4:	4b07      	ldr	r3, [pc, #28]	; (800d3f4 <Get_channel+0x40>)
 800d3d6:	4299      	cmp	r1, r3
 800d3d8:	d006      	beq.n	800d3e8 <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 800d3da:	4b07      	ldr	r3, [pc, #28]	; (800d3f8 <Get_channel+0x44>)
 800d3dc:	4299      	cmp	r1, r3
 800d3de:	d1f0      	bne.n	800d3c2 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 800d3e0:	2005      	movs	r0, #5
 800d3e2:	e7ee      	b.n	800d3c2 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800d3e4:	2002      	movs	r0, #2
 800d3e6:	e7ec      	b.n	800d3c2 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 800d3e8:	2004      	movs	r0, #4
 800d3ea:	e7ea      	b.n	800d3c2 <Get_channel+0xe>
 800d3ec:	40004400 	.word	0x40004400
 800d3f0:	40011400 	.word	0x40011400
 800d3f4:	08019370 	.word	0x08019370
 800d3f8:	08019374 	.word	0x08019374

0800d3fc <Error_Handler>:

void Error_Handler(void) {
 800d3fc:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800d3fe:	2064      	movs	r0, #100	; 0x64
 800d400:	f003 f9a2 	bl	8010748 <HAL_Delay>

}
 800d404:	bd10      	pop	{r4, pc}
	...

0800d408 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800d408:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800d40a:	4811      	ldr	r0, [pc, #68]	; (800d450 <MX_ADC_Init+0x48>)
 800d40c:	4b11      	ldr	r3, [pc, #68]	; (800d454 <MX_ADC_Init+0x4c>)
 800d40e:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d410:	2380      	movs	r3, #128	; 0x80
 800d412:	061b      	lsls	r3, r3, #24
 800d414:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800d416:	2300      	movs	r3, #0
 800d418:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d41a:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800d41c:	2201      	movs	r2, #1
 800d41e:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d420:	2104      	movs	r1, #4
 800d422:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800d424:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800d426:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800d428:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800d42a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d42c:	21c2      	movs	r1, #194	; 0xc2
 800d42e:	31ff      	adds	r1, #255	; 0xff
 800d430:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d432:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800d434:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800d436:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800d438:	f003 fa60 	bl	80108fc <HAL_ADC_Init>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d103      	bne.n	800d448 <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800d440:	4b05      	ldr	r3, [pc, #20]	; (800d458 <MX_ADC_Init+0x50>)
 800d442:	2201      	movs	r2, #1
 800d444:	701a      	strb	r2, [r3, #0]
}
 800d446:	bd10      	pop	{r4, pc}
		Error_Handler();
 800d448:	f7ff ffd8 	bl	800d3fc <Error_Handler>
 800d44c:	e7f8      	b.n	800d440 <MX_ADC_Init+0x38>
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	20006638 	.word	0x20006638
 800d454:	40012400 	.word	0x40012400
 800d458:	20001346 	.word	0x20001346

0800d45c <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800d45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d45e:	46c6      	mov	lr, r8
 800d460:	b500      	push	{lr}
 800d462:	0006      	movs	r6, r0
 800d464:	000d      	movs	r5, r1
	if (0 == ADC_flag)
 800d466:	4b4f      	ldr	r3, [pc, #316]	; (800d5a4 <ReadTempAndVref+0x148>)
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d100      	bne.n	800d470 <ReadTempAndVref+0x14>
 800d46e:	e089      	b.n	800d584 <ReadTempAndVref+0x128>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d470:	494d      	ldr	r1, [pc, #308]	; (800d5a8 <ReadTempAndVref+0x14c>)
 800d472:	2310      	movs	r3, #16
 800d474:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d476:	2380      	movs	r3, #128	; 0x80
 800d478:	015b      	lsls	r3, r3, #5
 800d47a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d47c:	2301      	movs	r3, #1
 800d47e:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d480:	484a      	ldr	r0, [pc, #296]	; (800d5ac <ReadTempAndVref+0x150>)
 800d482:	f003 fbe1 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d486:	2800      	cmp	r0, #0
 800d488:	d000      	beq.n	800d48c <ReadTempAndVref+0x30>
 800d48a:	e07e      	b.n	800d58a <ReadTempAndVref+0x12e>
	HAL_ADC_Start(&hadc);
 800d48c:	4c47      	ldr	r4, [pc, #284]	; (800d5ac <ReadTempAndVref+0x150>)
 800d48e:	0020      	movs	r0, r4
 800d490:	f003 fae0 	bl	8010a54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800d494:	2164      	movs	r1, #100	; 0x64
 800d496:	0020      	movs	r0, r4
 800d498:	f003 fb2e 	bl	8010af8 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800d49c:	0020      	movs	r0, r4
 800d49e:	f003 fbcd 	bl	8010c3c <HAL_ADC_GetValue>
 800d4a2:	4b43      	ldr	r3, [pc, #268]	; (800d5b0 <ReadTempAndVref+0x154>)
 800d4a4:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800d4a6:	0400      	lsls	r0, r0, #16
 800d4a8:	0c00      	lsrs	r0, r0, #16
 800d4aa:	f7f5 fc49 	bl	8002d40 <__aeabi_i2d>
 800d4ae:	4a41      	ldr	r2, [pc, #260]	; (800d5b4 <ReadTempAndVref+0x158>)
 800d4b0:	4b41      	ldr	r3, [pc, #260]	; (800d5b8 <ReadTempAndVref+0x15c>)
 800d4b2:	f7f4 fdf3 	bl	800209c <__aeabi_dmul>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	4b40      	ldr	r3, [pc, #256]	; (800d5bc <ReadTempAndVref+0x160>)
 800d4ba:	f7f4 f9e9 	bl	8001890 <__aeabi_ddiv>
 800d4be:	4a40      	ldr	r2, [pc, #256]	; (800d5c0 <ReadTempAndVref+0x164>)
 800d4c0:	4b40      	ldr	r3, [pc, #256]	; (800d5c4 <ReadTempAndVref+0x168>)
 800d4c2:	f7f5 f857 	bl	8002574 <__aeabi_dsub>
 800d4c6:	4a40      	ldr	r2, [pc, #256]	; (800d5c8 <ReadTempAndVref+0x16c>)
 800d4c8:	4b40      	ldr	r3, [pc, #256]	; (800d5cc <ReadTempAndVref+0x170>)
 800d4ca:	f7f4 f9e1 	bl	8001890 <__aeabi_ddiv>
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	4b3f      	ldr	r3, [pc, #252]	; (800d5d0 <ReadTempAndVref+0x174>)
 800d4d2:	f7f3 fe73 	bl	80011bc <__aeabi_dadd>
 800d4d6:	f7f5 fcd1 	bl	8002e7c <__aeabi_d2f>
 800d4da:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800d4dc:	0020      	movs	r0, r4
 800d4de:	f003 fae9 	bl	8010ab4 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d4e2:	4931      	ldr	r1, [pc, #196]	; (800d5a8 <ReadTempAndVref+0x14c>)
 800d4e4:	2310      	movs	r3, #16
 800d4e6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800d4e8:	4b3a      	ldr	r3, [pc, #232]	; (800d5d4 <ReadTempAndVref+0x178>)
 800d4ea:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	f003 fba9 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d14a      	bne.n	800d590 <ReadTempAndVref+0x134>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d4fa:	492b      	ldr	r1, [pc, #172]	; (800d5a8 <ReadTempAndVref+0x14c>)
 800d4fc:	2311      	movs	r3, #17
 800d4fe:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d500:	2380      	movs	r3, #128	; 0x80
 800d502:	015b      	lsls	r3, r3, #5
 800d504:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800d506:	2305      	movs	r3, #5
 800d508:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d50a:	4828      	ldr	r0, [pc, #160]	; (800d5ac <ReadTempAndVref+0x150>)
 800d50c:	f003 fb9c 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d510:	2800      	cmp	r0, #0
 800d512:	d140      	bne.n	800d596 <ReadTempAndVref+0x13a>
	HAL_ADC_Start(&hadc);
 800d514:	4b25      	ldr	r3, [pc, #148]	; (800d5ac <ReadTempAndVref+0x150>)
 800d516:	4698      	mov	r8, r3
 800d518:	0018      	movs	r0, r3
 800d51a:	f003 fa9b 	bl	8010a54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800d51e:	2164      	movs	r1, #100	; 0x64
 800d520:	4640      	mov	r0, r8
 800d522:	f003 fae9 	bl	8010af8 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800d526:	4640      	mov	r0, r8
 800d528:	f003 fb88 	bl	8010c3c <HAL_ADC_GetValue>
 800d52c:	0004      	movs	r4, r0
 800d52e:	4b2a      	ldr	r3, [pc, #168]	; (800d5d8 <ReadTempAndVref+0x17c>)
 800d530:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800d532:	4b2a      	ldr	r3, [pc, #168]	; (800d5dc <ReadTempAndVref+0x180>)
 800d534:	8818      	ldrh	r0, [r3, #0]
 800d536:	f7f5 fc03 	bl	8002d40 <__aeabi_i2d>
 800d53a:	4a1e      	ldr	r2, [pc, #120]	; (800d5b4 <ReadTempAndVref+0x158>)
 800d53c:	4b1e      	ldr	r3, [pc, #120]	; (800d5b8 <ReadTempAndVref+0x15c>)
 800d53e:	f7f4 fdad 	bl	800209c <__aeabi_dmul>
 800d542:	0006      	movs	r6, r0
 800d544:	000f      	movs	r7, r1
 800d546:	0420      	lsls	r0, r4, #16
 800d548:	0c00      	lsrs	r0, r0, #16
 800d54a:	f7f5 fbf9 	bl	8002d40 <__aeabi_i2d>
 800d54e:	0002      	movs	r2, r0
 800d550:	000b      	movs	r3, r1
 800d552:	0030      	movs	r0, r6
 800d554:	0039      	movs	r1, r7
 800d556:	f7f4 f99b 	bl	8001890 <__aeabi_ddiv>
 800d55a:	f7f5 fc8f 	bl	8002e7c <__aeabi_d2f>
 800d55e:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800d560:	4640      	mov	r0, r8
 800d562:	f003 faa7 	bl	8010ab4 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d566:	4910      	ldr	r1, [pc, #64]	; (800d5a8 <ReadTempAndVref+0x14c>)
 800d568:	2311      	movs	r3, #17
 800d56a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800d56c:	4b19      	ldr	r3, [pc, #100]	; (800d5d4 <ReadTempAndVref+0x178>)
 800d56e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d570:	2301      	movs	r3, #1
 800d572:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d574:	4640      	mov	r0, r8
 800d576:	f003 fb67 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d10e      	bne.n	800d59c <ReadTempAndVref+0x140>
}
 800d57e:	bc80      	pop	{r7}
 800d580:	46b8      	mov	r8, r7
 800d582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800d584:	f7ff ff40 	bl	800d408 <MX_ADC_Init>
 800d588:	e772      	b.n	800d470 <ReadTempAndVref+0x14>
		Error_Handler();
 800d58a:	f7ff ff37 	bl	800d3fc <Error_Handler>
 800d58e:	e77d      	b.n	800d48c <ReadTempAndVref+0x30>
		Error_Handler();
 800d590:	f7ff ff34 	bl	800d3fc <Error_Handler>
 800d594:	e7b1      	b.n	800d4fa <ReadTempAndVref+0x9e>
		Error_Handler();
 800d596:	f7ff ff31 	bl	800d3fc <Error_Handler>
 800d59a:	e7bb      	b.n	800d514 <ReadTempAndVref+0xb8>
		Error_Handler();
 800d59c:	f7ff ff2e 	bl	800d3fc <Error_Handler>
}
 800d5a0:	e7ed      	b.n	800d57e <ReadTempAndVref+0x122>
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	20001346 	.word	0x20001346
 800d5a8:	200013b0 	.word	0x200013b0
 800d5ac:	20006638 	.word	0x20006638
 800d5b0:	2000134a 	.word	0x2000134a
 800d5b4:	66666666 	.word	0x66666666
 800d5b8:	400a6666 	.word	0x400a6666
 800d5bc:	40affe00 	.word	0x40affe00
 800d5c0:	28f5c28f 	.word	0x28f5c28f
 800d5c4:	3ff68f5c 	.word	0x3ff68f5c
 800d5c8:	33333333 	.word	0x33333333
 800d5cc:	40113333 	.word	0x40113333
 800d5d0:	40390000 	.word	0x40390000
 800d5d4:	00001001 	.word	0x00001001
 800d5d8:	20001348 	.word	0x20001348
 800d5dc:	1ffff7ba 	.word	0x1ffff7ba

0800d5e0 <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	0004      	movs	r4, r0
 800d5e6:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800d5e8:	1e83      	subs	r3, r0, #2
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	d901      	bls.n	800d5f2 <GetReadPrecentage+0x12>
}
 800d5ee:	b006      	add	sp, #24
 800d5f0:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800d5f2:	4b49      	ldr	r3, [pc, #292]	; (800d718 <GetReadPrecentage+0x138>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d04f      	beq.n	800d69a <GetReadPrecentage+0xba>
		Channel = Get_channel(GetUart(port), "bottom");
 800d5fa:	0020      	movs	r0, r4
 800d5fc:	f000 ff68 	bl	800e4d0 <GetUart>
 800d600:	4946      	ldr	r1, [pc, #280]	; (800d71c <GetReadPrecentage+0x13c>)
 800d602:	f7ff fed7 	bl	800d3b4 <Get_channel>
 800d606:	4b46      	ldr	r3, [pc, #280]	; (800d720 <GetReadPrecentage+0x140>)
 800d608:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800d60a:	4946      	ldr	r1, [pc, #280]	; (800d724 <GetReadPrecentage+0x144>)
 800d60c:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d60e:	2380      	movs	r3, #128	; 0x80
 800d610:	015b      	lsls	r3, r3, #5
 800d612:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d614:	2301      	movs	r3, #1
 800d616:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d618:	4843      	ldr	r0, [pc, #268]	; (800d728 <GetReadPrecentage+0x148>)
 800d61a:	f003 fb15 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d61e:	2800      	cmp	r0, #0
 800d620:	d176      	bne.n	800d710 <GetReadPrecentage+0x130>
		HAL_ADC_Start(&hadc);
 800d622:	4c41      	ldr	r4, [pc, #260]	; (800d728 <GetReadPrecentage+0x148>)
 800d624:	0020      	movs	r0, r4
 800d626:	f003 fa15 	bl	8010a54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800d62a:	2164      	movs	r1, #100	; 0x64
 800d62c:	0020      	movs	r0, r4
 800d62e:	f003 fa63 	bl	8010af8 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800d632:	0020      	movs	r0, r4
 800d634:	f003 fb02 	bl	8010c3c <HAL_ADC_GetValue>
 800d638:	f7f3 fd84 	bl	8001144 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800d63c:	f7f5 fbd6 	bl	8002dec <__aeabi_f2d>
 800d640:	4a3a      	ldr	r2, [pc, #232]	; (800d72c <GetReadPrecentage+0x14c>)
 800d642:	4b3b      	ldr	r3, [pc, #236]	; (800d730 <GetReadPrecentage+0x150>)
 800d644:	f7f4 fd2a 	bl	800209c <__aeabi_dmul>
 800d648:	2200      	movs	r2, #0
 800d64a:	4b3a      	ldr	r3, [pc, #232]	; (800d734 <GetReadPrecentage+0x154>)
 800d64c:	f7f4 f920 	bl	8001890 <__aeabi_ddiv>
 800d650:	f7f5 fc14 	bl	8002e7c <__aeabi_d2f>
 800d654:	4b38      	ldr	r3, [pc, #224]	; (800d738 <GetReadPrecentage+0x158>)
 800d656:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 800d658:	4938      	ldr	r1, [pc, #224]	; (800d73c <GetReadPrecentage+0x15c>)
 800d65a:	f7f3 fa71 	bl	8000b40 <__aeabi_fmul>
 800d65e:	f7f5 fbc5 	bl	8002dec <__aeabi_f2d>
 800d662:	4a32      	ldr	r2, [pc, #200]	; (800d72c <GetReadPrecentage+0x14c>)
 800d664:	4b32      	ldr	r3, [pc, #200]	; (800d730 <GetReadPrecentage+0x150>)
 800d666:	f7f4 f913 	bl	8001890 <__aeabi_ddiv>
 800d66a:	f7f5 fc07 	bl	8002e7c <__aeabi_d2f>
 800d66e:	4b34      	ldr	r3, [pc, #208]	; (800d740 <GetReadPrecentage+0x160>)
 800d670:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 800d672:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800d674:	0020      	movs	r0, r4
 800d676:	f003 fa1d 	bl	8010ab4 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d67a:	492a      	ldr	r1, [pc, #168]	; (800d724 <GetReadPrecentage+0x144>)
 800d67c:	4b28      	ldr	r3, [pc, #160]	; (800d720 <GetReadPrecentage+0x140>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d682:	4b30      	ldr	r3, [pc, #192]	; (800d744 <GetReadPrecentage+0x164>)
 800d684:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d686:	2301      	movs	r3, #1
 800d688:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d68a:	0020      	movs	r0, r4
 800d68c:	f003 fadc 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d690:	2800      	cmp	r0, #0
 800d692:	d0ac      	beq.n	800d5ee <GetReadPrecentage+0xe>
			Error_Handler();
 800d694:	f7ff feb2 	bl	800d3fc <Error_Handler>
 800d698:	e7a9      	b.n	800d5ee <GetReadPrecentage+0xe>
			MX_ADC_Init();
 800d69a:	f7ff feb5 	bl	800d408 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800d69e:	0020      	movs	r0, r4
 800d6a0:	f000 ff16 	bl	800e4d0 <GetUart>
 800d6a4:	f005 fc9b 	bl	8012fde <HAL_UART_DeInit>
			if (port == 3) {
 800d6a8:	2c03      	cmp	r4, #3
 800d6aa:	d018      	beq.n	800d6de <GetReadPrecentage+0xfe>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800d6ac:	2690      	movs	r6, #144	; 0x90
 800d6ae:	05f6      	lsls	r6, r6, #23
 800d6b0:	2104      	movs	r1, #4
 800d6b2:	0030      	movs	r0, r6
 800d6b4:	f004 fc2c 	bl	8011f10 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d6b8:	2304      	movs	r3, #4
 800d6ba:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6bc:	3b03      	subs	r3, #3
 800d6be:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d6c0:	3302      	adds	r3, #2
 800d6c2:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6c4:	a901      	add	r1, sp, #4
 800d6c6:	0030      	movs	r0, r6
 800d6c8:	f004 fb38 	bl	8011d3c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800d6cc:	4b1e      	ldr	r3, [pc, #120]	; (800d748 <GetReadPrecentage+0x168>)
 800d6ce:	2206      	movs	r2, #6
 800d6d0:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800d6d2:	3a05      	subs	r2, #5
 800d6d4:	2104      	movs	r1, #4
 800d6d6:	0030      	movs	r0, r6
 800d6d8:	f004 fcb4 	bl	8012044 <HAL_GPIO_WritePin>
 800d6dc:	e78d      	b.n	800d5fa <GetReadPrecentage+0x1a>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800d6de:	2690      	movs	r6, #144	; 0x90
 800d6e0:	05f6      	lsls	r6, r6, #23
 800d6e2:	2110      	movs	r1, #16
 800d6e4:	0030      	movs	r0, r6
 800d6e6:	f004 fc13 	bl	8011f10 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d6ea:	2310      	movs	r3, #16
 800d6ec:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d6ee:	3b0f      	subs	r3, #15
 800d6f0:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d6f2:	3302      	adds	r3, #2
 800d6f4:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6f6:	a901      	add	r1, sp, #4
 800d6f8:	0030      	movs	r0, r6
 800d6fa:	f004 fb1f 	bl	8011d3c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800d6fe:	4b12      	ldr	r3, [pc, #72]	; (800d748 <GetReadPrecentage+0x168>)
 800d700:	2206      	movs	r2, #6
 800d702:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800d704:	3a05      	subs	r2, #5
 800d706:	2110      	movs	r1, #16
 800d708:	0030      	movs	r0, r6
 800d70a:	f004 fc9b 	bl	8012044 <HAL_GPIO_WritePin>
 800d70e:	e774      	b.n	800d5fa <GetReadPrecentage+0x1a>
			Error_Handler();
 800d710:	f7ff fe74 	bl	800d3fc <Error_Handler>
 800d714:	e785      	b.n	800d622 <GetReadPrecentage+0x42>
 800d716:	46c0      	nop			; (mov r8, r8)
 800d718:	20001346 	.word	0x20001346
 800d71c:	08019374 	.word	0x08019374
 800d720:	20001354 	.word	0x20001354
 800d724:	200013b0 	.word	0x200013b0
 800d728:	20006638 	.word	0x20006638
 800d72c:	66666666 	.word	0x66666666
 800d730:	400a6666 	.word	0x400a6666
 800d734:	40affe00 	.word	0x40affe00
 800d738:	2000138c 	.word	0x2000138c
 800d73c:	42c80000 	.word	0x42c80000
 800d740:	20001380 	.word	0x20001380
 800d744:	00001001 	.word	0x00001001
 800d748:	20000878 	.word	0x20000878

0800d74c <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800d74c:	2802      	cmp	r0, #2
 800d74e:	d004      	beq.n	800d75a <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800d750:	2803      	cmp	r0, #3
 800d752:	d010      	beq.n	800d776 <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800d754:	4b0f      	ldr	r3, [pc, #60]	; (800d794 <Get_Rank+0x48>)
 800d756:	7818      	ldrb	r0, [r3, #0]
}
 800d758:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800d75a:	4b0f      	ldr	r3, [pc, #60]	; (800d798 <Get_Rank+0x4c>)
 800d75c:	4299      	cmp	r1, r3
 800d75e:	d006      	beq.n	800d76e <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 800d760:	4b0e      	ldr	r3, [pc, #56]	; (800d79c <Get_Rank+0x50>)
 800d762:	4299      	cmp	r1, r3
 800d764:	d1f6      	bne.n	800d754 <Get_Rank+0x8>
		Rank_t = 1;
 800d766:	4b0b      	ldr	r3, [pc, #44]	; (800d794 <Get_Rank+0x48>)
 800d768:	2201      	movs	r2, #1
 800d76a:	701a      	strb	r2, [r3, #0]
 800d76c:	e7f2      	b.n	800d754 <Get_Rank+0x8>
		Rank_t = 0;
 800d76e:	4b09      	ldr	r3, [pc, #36]	; (800d794 <Get_Rank+0x48>)
 800d770:	2200      	movs	r2, #0
 800d772:	701a      	strb	r2, [r3, #0]
 800d774:	e7ee      	b.n	800d754 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 800d776:	4b08      	ldr	r3, [pc, #32]	; (800d798 <Get_Rank+0x4c>)
 800d778:	4299      	cmp	r1, r3
 800d77a:	d006      	beq.n	800d78a <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800d77c:	4b07      	ldr	r3, [pc, #28]	; (800d79c <Get_Rank+0x50>)
 800d77e:	4299      	cmp	r1, r3
 800d780:	d1e8      	bne.n	800d754 <Get_Rank+0x8>
		Rank_t = 3;
 800d782:	4b04      	ldr	r3, [pc, #16]	; (800d794 <Get_Rank+0x48>)
 800d784:	2203      	movs	r2, #3
 800d786:	701a      	strb	r2, [r3, #0]
 800d788:	e7e4      	b.n	800d754 <Get_Rank+0x8>
		Rank_t = 2;
 800d78a:	4b02      	ldr	r3, [pc, #8]	; (800d794 <Get_Rank+0x48>)
 800d78c:	2202      	movs	r2, #2
 800d78e:	701a      	strb	r2, [r3, #0]
 800d790:	e7e0      	b.n	800d754 <Get_Rank+0x8>
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	20001355 	.word	0x20001355
 800d798:	08019370 	.word	0x08019370
 800d79c:	08019374 	.word	0x08019374

0800d7a0 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800d7a0:	b570      	push	{r4, r5, r6, lr}
 800d7a2:	0004      	movs	r4, r0
 800d7a4:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800d7a6:	1e83      	subs	r3, r0, #2
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d900      	bls.n	800d7ae <ADCSelectChannel+0xe>
}
 800d7ac:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800d7ae:	4b10      	ldr	r3, [pc, #64]	; (800d7f0 <ADCSelectChannel+0x50>)
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 800d7b4:	f000 fe8c 	bl	800e4d0 <GetUart>
 800d7b8:	f005 fc11 	bl	8012fde <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <ADCSelectChannel+0x54>)
 800d7be:	191b      	adds	r3, r3, r4
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	2206      	movs	r2, #6
 800d7c4:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800d7c6:	0020      	movs	r0, r4
 800d7c8:	f000 fe82 	bl	800e4d0 <GetUart>
 800d7cc:	0029      	movs	r1, r5
 800d7ce:	f7ff fdf1 	bl	800d3b4 <Get_channel>
 800d7d2:	4b09      	ldr	r3, [pc, #36]	; (800d7f8 <ADCSelectChannel+0x58>)
 800d7d4:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 800d7d6:	0029      	movs	r1, r5
 800d7d8:	0020      	movs	r0, r4
 800d7da:	f7ff ffb7 	bl	800d74c <Get_Rank>
 800d7de:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <ADCSelectChannel+0x5c>)
 800d7e0:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 800d7e2:	4b07      	ldr	r3, [pc, #28]	; (800d800 <ADCSelectChannel+0x60>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d1e0      	bne.n	800d7ac <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800d7ea:	f7ff fe0d 	bl	800d408 <MX_ADC_Init>
}
 800d7ee:	e7dd      	b.n	800d7ac <ADCSelectChannel+0xc>
 800d7f0:	20001389 	.word	0x20001389
 800d7f4:	20000878 	.word	0x20000878
 800d7f8:	20001354 	.word	0x20001354
 800d7fc:	20001355 	.word	0x20001355
 800d800:	20001346 	.word	0x20001346

0800d804 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	0005      	movs	r5, r0
 800d808:	000e      	movs	r6, r1
 800d80a:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800d80c:	4b26      	ldr	r3, [pc, #152]	; (800d8a8 <ReadADCChannel+0xa4>)
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	2b01      	cmp	r3, #1
 800d812:	d008      	beq.n	800d826 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800d814:	4b25      	ldr	r3, [pc, #148]	; (800d8ac <ReadADCChannel+0xa8>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	005b      	lsls	r3, r3, #1
 800d81a:	4a25      	ldr	r2, [pc, #148]	; (800d8b0 <ReadADCChannel+0xac>)
 800d81c:	5a98      	ldrh	r0, [r3, r2]
 800d81e:	f7f3 fc91 	bl	8001144 <__aeabi_ui2f>
 800d822:	6020      	str	r0, [r4, #0]
}
 800d824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800d826:	f000 fe53 	bl	800e4d0 <GetUart>
 800d82a:	0031      	movs	r1, r6
 800d82c:	f7ff fdc2 	bl	800d3b4 <Get_channel>
 800d830:	4f20      	ldr	r7, [pc, #128]	; (800d8b4 <ReadADCChannel+0xb0>)
 800d832:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 800d834:	0031      	movs	r1, r6
 800d836:	0028      	movs	r0, r5
 800d838:	f7ff ff88 	bl	800d74c <Get_Rank>
 800d83c:	4b1b      	ldr	r3, [pc, #108]	; (800d8ac <ReadADCChannel+0xa8>)
 800d83e:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800d840:	491d      	ldr	r1, [pc, #116]	; (800d8b8 <ReadADCChannel+0xb4>)
 800d842:	783b      	ldrb	r3, [r7, #0]
 800d844:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d846:	2380      	movs	r3, #128	; 0x80
 800d848:	015b      	lsls	r3, r3, #5
 800d84a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d84c:	2303      	movs	r3, #3
 800d84e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d850:	481a      	ldr	r0, [pc, #104]	; (800d8bc <ReadADCChannel+0xb8>)
 800d852:	f003 f9f9 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d856:	2800      	cmp	r0, #0
 800d858:	d122      	bne.n	800d8a0 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800d85a:	4d18      	ldr	r5, [pc, #96]	; (800d8bc <ReadADCChannel+0xb8>)
 800d85c:	0028      	movs	r0, r5
 800d85e:	f003 f8f9 	bl	8010a54 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800d862:	2164      	movs	r1, #100	; 0x64
 800d864:	0028      	movs	r0, r5
 800d866:	f003 f947 	bl	8010af8 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800d86a:	0028      	movs	r0, r5
 800d86c:	f003 f9e6 	bl	8010c3c <HAL_ADC_GetValue>
 800d870:	4b0e      	ldr	r3, [pc, #56]	; (800d8ac <ReadADCChannel+0xa8>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	4a0e      	ldr	r2, [pc, #56]	; (800d8b0 <ReadADCChannel+0xac>)
 800d878:	52d0      	strh	r0, [r2, r3]
		HAL_ADC_Stop(&hadc);
 800d87a:	0028      	movs	r0, r5
 800d87c:	f003 f91a 	bl	8010ab4 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d880:	490d      	ldr	r1, [pc, #52]	; (800d8b8 <ReadADCChannel+0xb4>)
 800d882:	4b0c      	ldr	r3, [pc, #48]	; (800d8b4 <ReadADCChannel+0xb0>)
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d888:	4b0d      	ldr	r3, [pc, #52]	; (800d8c0 <ReadADCChannel+0xbc>)
 800d88a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d88c:	2303      	movs	r3, #3
 800d88e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d890:	0028      	movs	r0, r5
 800d892:	f003 f9d9 	bl	8010c48 <HAL_ADC_ConfigChannel>
 800d896:	2800      	cmp	r0, #0
 800d898:	d0bc      	beq.n	800d814 <ReadADCChannel+0x10>
			Error_Handler();
 800d89a:	f7ff fdaf 	bl	800d3fc <Error_Handler>
 800d89e:	e7b9      	b.n	800d814 <ReadADCChannel+0x10>
			Error_Handler();
 800d8a0:	f7ff fdac 	bl	800d3fc <Error_Handler>
 800d8a4:	e7d9      	b.n	800d85a <ReadADCChannel+0x56>
 800d8a6:	46c0      	nop			; (mov r8, r8)
 800d8a8:	20001346 	.word	0x20001346
 800d8ac:	20001355 	.word	0x20001355
 800d8b0:	2000134c 	.word	0x2000134c
 800d8b4:	20001354 	.word	0x20001354
 800d8b8:	200013b0 	.word	0x200013b0
 800d8bc:	20006638 	.word	0x20006638
 800d8c0:	00001001 	.word	0x00001001

0800d8c4 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800d8c4:	4770      	bx	lr

0800d8c6 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800d8c6:	4770      	bx	lr

0800d8c8 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800d8c8:	4770      	bx	lr

0800d8ca <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800d8ca:	4770      	bx	lr

0800d8cc <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800d8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8d2:	46de      	mov	lr, fp
 800d8d4:	4657      	mov	r7, sl
 800d8d6:	464e      	mov	r6, r9
 800d8d8:	4645      	mov	r5, r8
 800d8da:	b5e0      	push	{r5, r6, r7, lr}
 800d8dc:	b089      	sub	sp, #36	; 0x24
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800d8de:	4dbd      	ldr	r5, [pc, #756]	; (800dbd4 <CheckAttachedButtons+0x304>)
 800d8e0:	4ebd      	ldr	r6, [pc, #756]	; (800dbd8 <CheckAttachedButtons+0x308>)
 800d8e2:	4bbe      	ldr	r3, [pc, #760]	; (800dbdc <CheckAttachedButtons+0x30c>)
 800d8e4:	4698      	mov	r8, r3
 800d8e6:	4bbe      	ldr	r3, [pc, #760]	; (800dbe0 <CheckAttachedButtons+0x310>)
 800d8e8:	4699      	mov	r9, r3
 800d8ea:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9303      	str	r3, [sp, #12]
 800d8f0:	9302      	str	r3, [sp, #8]
 800d8f2:	e121      	b.n	800db38 <CheckAttachedButtons+0x268>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800d8f4:	230e      	movs	r3, #14
 800d8f6:	aa02      	add	r2, sp, #8
 800d8f8:	4694      	mov	ip, r2
 800d8fa:	4463      	add	r3, ip
 800d8fc:	8819      	ldrh	r1, [r3, #0]
 800d8fe:	2201      	movs	r2, #1
 800d900:	9807      	ldr	r0, [sp, #28]
 800d902:	f004 fb9f 	bl	8012044 <HAL_GPIO_WritePin>
				Delay_us(10);
 800d906:	200a      	movs	r0, #10
 800d908:	f000 fc9c 	bl	800e244 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800d90c:	ab05      	add	r3, sp, #20
 800d90e:	8819      	ldrh	r1, [r3, #0]
 800d910:	9806      	ldr	r0, [sp, #24]
 800d912:	f004 fb91 	bl	8012038 <HAL_GPIO_ReadPin>
 800d916:	9002      	str	r0, [sp, #8]
 800d918:	e134      	b.n	800db84 <CheckAttachedButtons+0x2b4>
			switch (button[i].type) {
 800d91a:	2b04      	cmp	r3, #4
 800d91c:	d10e      	bne.n	800d93c <CheckAttachedButtons+0x6c>
				if (connected == GPIO_PIN_SET)
 800d91e:	9b02      	ldr	r3, [sp, #8]
 800d920:	2b01      	cmp	r3, #1
 800d922:	d100      	bne.n	800d926 <CheckAttachedButtons+0x56>
 800d924:	e1d7      	b.n	800dcd6 <CheckAttachedButtons+0x406>
				else if (connected == GPIO_PIN_RESET)
 800d926:	2b00      	cmp	r3, #0
 800d928:	d108      	bne.n	800d93c <CheckAttachedButtons+0x6c>
 800d92a:	2302      	movs	r3, #2
 800d92c:	9303      	str	r3, [sp, #12]
 800d92e:	e031      	b.n	800d994 <CheckAttachedButtons+0xc4>
				if (connected == GPIO_PIN_SET)
 800d930:	9b02      	ldr	r3, [sp, #8]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d02c      	beq.n	800d990 <CheckAttachedButtons+0xc0>
				else if (connected == GPIO_PIN_RESET)
 800d936:	2b00      	cmp	r3, #0
 800d938:	d100      	bne.n	800d93c <CheckAttachedButtons+0x6c>
 800d93a:	e1c9      	b.n	800dcd0 <CheckAttachedButtons+0x400>
			if (state == CLOSED || state == ON) {
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	2b04      	cmp	r3, #4
 800d940:	d028      	beq.n	800d994 <CheckAttachedButtons+0xc4>
 800d942:	2b02      	cmp	r3, #2
 800d944:	d026      	beq.n	800d994 <CheckAttachedButtons+0xc4>
			if (state == OPEN || state == OFF) {
 800d946:	23fd      	movs	r3, #253	; 0xfd
 800d948:	9a03      	ldr	r2, [sp, #12]
 800d94a:	4013      	ands	r3, r2
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d129      	bne.n	800d9a4 <CheckAttachedButtons+0xd4>
				if (releaseCounter[i] < 0xFFFF)
 800d950:	0031      	movs	r1, r6
 800d952:	6872      	ldr	r2, [r6, #4]
 800d954:	48a3      	ldr	r0, [pc, #652]	; (800dbe4 <CheckAttachedButtons+0x314>)
					releaseCounter[i] = 0;		// Reset debounce counter
 800d956:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 800d958:	4282      	cmp	r2, r0
 800d95a:	d800      	bhi.n	800d95e <CheckAttachedButtons+0x8e>
					++releaseCounter[i];		// Advance the debounce counter
 800d95c:	1c53      	adds	r3, r2, #1
 800d95e:	604b      	str	r3, [r1, #4]
				if (clicked == 2
 800d960:	4ba1      	ldr	r3, [pc, #644]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b02      	cmp	r3, #2
 800d966:	d045      	beq.n	800d9f4 <CheckAttachedButtons+0x124>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800d968:	464b      	mov	r3, r9
 800d96a:	785a      	ldrb	r2, [r3, #1]
 800d96c:	4b9f      	ldr	r3, [pc, #636]	; (800dbec <CheckAttachedButtons+0x31c>)
 800d96e:	795b      	ldrb	r3, [r3, #5]
 800d970:	429a      	cmp	r2, r3
 800d972:	d917      	bls.n	800d9a4 <CheckAttachedButtons+0xd4>
					clicked = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	4a9c      	ldr	r2, [pc, #624]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800d978:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800d97a:	464a      	mov	r2, r9
 800d97c:	7053      	strb	r3, [r2, #1]
 800d97e:	e011      	b.n	800d9a4 <CheckAttachedButtons+0xd4>
				if (connected == GPIO_PIN_SET)
 800d980:	9b02      	ldr	r3, [sp, #8]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d02f      	beq.n	800d9e6 <CheckAttachedButtons+0x116>
				else if (connected == GPIO_PIN_RESET)
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1d8      	bne.n	800d93c <CheckAttachedButtons+0x6c>
					state = OFF;
 800d98a:	2301      	movs	r3, #1
 800d98c:	9303      	str	r3, [sp, #12]
 800d98e:	e7df      	b.n	800d950 <CheckAttachedButtons+0x80>
					state = CLOSED;
 800d990:	2304      	movs	r3, #4
 800d992:	9303      	str	r3, [sp, #12]
				if (pressCounter[i] < 0xFFFF)
 800d994:	4643      	mov	r3, r8
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4a92      	ldr	r2, [pc, #584]	; (800dbe4 <CheckAttachedButtons+0x314>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d826      	bhi.n	800d9ec <CheckAttachedButtons+0x11c>
					++pressCounter[i];			// Advance the debounce counter
 800d99e:	3301      	adds	r3, #1
 800d9a0:	4642      	mov	r2, r8
 800d9a2:	6053      	str	r3, [r2, #4]
			if (pressCounter[i] < BOS.buttons.debounce) {
 800d9a4:	4647      	mov	r7, r8
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	4b90      	ldr	r3, [pc, #576]	; (800dbec <CheckAttachedButtons+0x31c>)
 800d9aa:	881b      	ldrh	r3, [r3, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d352      	bcc.n	800da56 <CheckAttachedButtons+0x186>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800d9b0:	d02a      	beq.n	800da08 <CheckAttachedButtons+0x138>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800d9b2:	6872      	ldr	r2, [r6, #4]
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d201      	bcs.n	800d9bc <CheckAttachedButtons+0xec>
					releaseCounter[i] = 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	6073      	str	r3, [r6, #4]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a8b      	ldr	r2, [pc, #556]	; (800dbec <CheckAttachedButtons+0x31c>)
 800d9c0:	8852      	ldrh	r2, [r2, #2]
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d938      	bls.n	800da38 <CheckAttachedButtons+0x168>
						&& pressCounter[i] < 500) {
 800d9c6:	22fa      	movs	r2, #250	; 0xfa
 800d9c8:	0052      	lsls	r2, r2, #1
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d234      	bcs.n	800da38 <CheckAttachedButtons+0x168>
					if (clicked == 0)
 800d9ce:	4b86      	ldr	r3, [pc, #536]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d11e      	bne.n	800da14 <CheckAttachedButtons+0x144>
						clicked = 1;		// Record a possible single click
 800d9d6:	4b84      	ldr	r3, [pc, #528]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800d9d8:	3af4      	subs	r2, #244	; 0xf4
 800d9da:	3aff      	subs	r2, #255	; 0xff
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	e03a      	b.n	800da56 <CheckAttachedButtons+0x186>
					state = CLOSED;
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	9303      	str	r3, [sp, #12]
 800d9e4:	e7d6      	b.n	800d994 <CheckAttachedButtons+0xc4>
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	e7d3      	b.n	800d994 <CheckAttachedButtons+0xc4>
					pressCounter[i] = 0;			// Reset debounce counter
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	4642      	mov	r2, r8
 800d9f0:	6053      	str	r3, [r2, #4]
 800d9f2:	e7d7      	b.n	800d9a4 <CheckAttachedButtons+0xd4>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800d9f4:	464b      	mov	r3, r9
 800d9f6:	785b      	ldrb	r3, [r3, #1]
 800d9f8:	4a7c      	ldr	r2, [pc, #496]	; (800dbec <CheckAttachedButtons+0x31c>)
 800d9fa:	7952      	ldrb	r2, [r2, #5]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d3b9      	bcc.n	800d974 <CheckAttachedButtons+0xa4>
					++dblCounter[i];
 800da00:	3301      	adds	r3, #1
 800da02:	464a      	mov	r2, r9
 800da04:	7053      	strb	r3, [r2, #1]
 800da06:	e7cd      	b.n	800d9a4 <CheckAttachedButtons+0xd4>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800da08:	2207      	movs	r2, #7
 800da0a:	4651      	mov	r1, sl
 800da0c:	724a      	strb	r2, [r1, #9]
					++pressCounter[i];
 800da0e:	1c5a      	adds	r2, r3, #1
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	e7ce      	b.n	800d9b2 <CheckAttachedButtons+0xe2>
					else if (clicked == 2) {
 800da14:	2b02      	cmp	r3, #2
 800da16:	d11e      	bne.n	800da56 <CheckAttachedButtons+0x186>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800da18:	4649      	mov	r1, r9
 800da1a:	784b      	ldrb	r3, [r1, #1]
 800da1c:	4a73      	ldr	r2, [pc, #460]	; (800dbec <CheckAttachedButtons+0x31c>)
 800da1e:	7912      	ldrb	r2, [r2, #4]
 800da20:	429a      	cmp	r2, r3
 800da22:	d218      	bcs.n	800da56 <CheckAttachedButtons+0x186>
										< BOS.buttons.maxInterClickTime) {
 800da24:	4a71      	ldr	r2, [pc, #452]	; (800dbec <CheckAttachedButtons+0x31c>)
								&& dblCounter[i]
 800da26:	7952      	ldrb	r2, [r2, #5]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d914      	bls.n	800da56 <CheckAttachedButtons+0x186>
							clicked = 3;	// Record a possible double click
 800da2c:	4b6e      	ldr	r3, [pc, #440]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800da2e:	2203      	movs	r2, #3
 800da30:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800da32:	2300      	movs	r3, #0
 800da34:	704b      	strb	r3, [r1, #1]
 800da36:	e00e      	b.n	800da56 <CheckAttachedButtons+0x186>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800da38:	3bf5      	subs	r3, #245	; 0xf5
 800da3a:	3bff      	subs	r3, #255	; 0xff
 800da3c:	4a6c      	ldr	r2, [pc, #432]	; (800dbf0 <CheckAttachedButtons+0x320>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d809      	bhi.n	800da56 <CheckAttachedButtons+0x186>
					if (clicked)
 800da42:	4b69      	ldr	r3, [pc, #420]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d002      	beq.n	800da50 <CheckAttachedButtons+0x180>
						clicked = 0;						// Cannot be a click
 800da4a:	4b67      	ldr	r3, [pc, #412]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800da50:	0020      	movs	r0, r4
 800da52:	f7ff f931 	bl	800ccb8 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800da56:	0031      	movs	r1, r6
 800da58:	6872      	ldr	r2, [r6, #4]
 800da5a:	4b64      	ldr	r3, [pc, #400]	; (800dbec <CheckAttachedButtons+0x31c>)
 800da5c:	881b      	ldrh	r3, [r3, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d349      	bcc.n	800daf6 <CheckAttachedButtons+0x226>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800da62:	d028      	beq.n	800dab6 <CheckAttachedButtons+0x1e6>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	4293      	cmp	r3, r2
 800da68:	d201      	bcs.n	800da6e <CheckAttachedButtons+0x19e>
					pressCounter[i] = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	607b      	str	r3, [r7, #4]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800da6e:	684b      	ldr	r3, [r1, #4]
 800da70:	4a5e      	ldr	r2, [pc, #376]	; (800dbec <CheckAttachedButtons+0x31c>)
 800da72:	8852      	ldrh	r2, [r2, #2]
 800da74:	4293      	cmp	r3, r2
 800da76:	d939      	bls.n	800daec <CheckAttachedButtons+0x21c>
						&& releaseCounter[i] < 500) {
 800da78:	22fa      	movs	r2, #250	; 0xfa
 800da7a:	0052      	lsls	r2, r2, #1
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d235      	bcs.n	800daec <CheckAttachedButtons+0x21c>
					if (clicked == 1) {
 800da80:	4b59      	ldr	r3, [pc, #356]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d01c      	beq.n	800dac2 <CheckAttachedButtons+0x1f2>
					} else if (clicked == 3) {
 800da88:	2b03      	cmp	r3, #3
 800da8a:	d134      	bne.n	800daf6 <CheckAttachedButtons+0x226>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800da8c:	3303      	adds	r3, #3
 800da8e:	4652      	mov	r2, sl
 800da90:	7253      	strb	r3, [r2, #9]
						clicked = 0;			// Prepare for a single click
 800da92:	4b55      	ldr	r3, [pc, #340]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800da94:	2200      	movs	r2, #0
 800da96:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800da98:	4b56      	ldr	r3, [pc, #344]	; (800dbf4 <CheckAttachedButtons+0x324>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d13e      	bne.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800daa0:	4653      	mov	r3, sl
 800daa2:	7c5b      	ldrb	r3, [r3, #17]
 800daa4:	079b      	lsls	r3, r3, #30
 800daa6:	d53a      	bpl.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800daa8:	4b52      	ldr	r3, [pc, #328]	; (800dbf4 <CheckAttachedButtons+0x324>)
 800daaa:	2201      	movs	r2, #1
 800daac:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800daae:	0020      	movs	r0, r4
 800dab0:	f7ff ff0a 	bl	800d8c8 <buttonDblClickedCallback>
 800dab4:	e033      	b.n	800db1e <CheckAttachedButtons+0x24e>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800dab6:	2208      	movs	r2, #8
 800dab8:	4650      	mov	r0, sl
 800daba:	7242      	strb	r2, [r0, #9]
					++releaseCounter[i];
 800dabc:	1c5a      	adds	r2, r3, #1
 800dabe:	6072      	str	r2, [r6, #4]
 800dac0:	e7d0      	b.n	800da64 <CheckAttachedButtons+0x194>
						button[i].state = CLICKED;// Record a single button click event
 800dac2:	3304      	adds	r3, #4
 800dac4:	4652      	mov	r2, sl
 800dac6:	7253      	strb	r3, [r2, #9]
						clicked = 2;			// Prepare for a double click
 800dac8:	4b47      	ldr	r3, [pc, #284]	; (800dbe8 <CheckAttachedButtons+0x318>)
 800daca:	2202      	movs	r2, #2
 800dacc:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800dace:	4b49      	ldr	r3, [pc, #292]	; (800dbf4 <CheckAttachedButtons+0x324>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d123      	bne.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800dad6:	4653      	mov	r3, sl
 800dad8:	7c5b      	ldrb	r3, [r3, #17]
 800dada:	07db      	lsls	r3, r3, #31
 800dadc:	d51f      	bpl.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dade:	4b45      	ldr	r3, [pc, #276]	; (800dbf4 <CheckAttachedButtons+0x324>)
 800dae0:	2201      	movs	r2, #1
 800dae2:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 800dae4:	0020      	movs	r0, r4
 800dae6:	f7ff feee 	bl	800d8c6 <buttonClickedCallback>
 800daea:	e018      	b.n	800db1e <CheckAttachedButtons+0x24e>
						&& releaseCounter[i] < 0xFFFF) {
 800daec:	3bf5      	subs	r3, #245	; 0xf5
 800daee:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800daf0:	4a3f      	ldr	r2, [pc, #252]	; (800dbf0 <CheckAttachedButtons+0x320>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d909      	bls.n	800db0a <CheckAttachedButtons+0x23a>
			switch (button[i].state) {
 800daf6:	4653      	mov	r3, sl
 800daf8:	7a5b      	ldrb	r3, [r3, #9]
 800dafa:	3b05      	subs	r3, #5
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	2a09      	cmp	r2, #9
 800db00:	d80d      	bhi.n	800db1e <CheckAttachedButtons+0x24e>
 800db02:	0093      	lsls	r3, r2, #2
 800db04:	4a3c      	ldr	r2, [pc, #240]	; (800dbf8 <CheckAttachedButtons+0x328>)
 800db06:	58d3      	ldr	r3, [r2, r3]
 800db08:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800db0a:	0020      	movs	r0, r4
 800db0c:	f7ff f912 	bl	800cd34 <CheckForTimedButtonRelease>
 800db10:	e7f1      	b.n	800daf6 <CheckAttachedButtons+0x226>
				buttonPressedCallback(i);
 800db12:	0020      	movs	r0, r4
 800db14:	f7ff f8ce 	bl	800ccb4 <buttonPressedCallback>
				button[i].state = NONE;
 800db18:	2300      	movs	r3, #0
 800db1a:	4652      	mov	r2, sl
 800db1c:	7253      	strb	r3, [r2, #9]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800db1e:	3401      	adds	r4, #1
 800db20:	b2e4      	uxtb	r4, r4
 800db22:	3509      	adds	r5, #9
 800db24:	3604      	adds	r6, #4
 800db26:	2304      	movs	r3, #4
 800db28:	469c      	mov	ip, r3
 800db2a:	44e0      	add	r8, ip
 800db2c:	3b03      	subs	r3, #3
 800db2e:	469c      	mov	ip, r3
 800db30:	44e1      	add	r9, ip
 800db32:	2c04      	cmp	r4, #4
 800db34:	d100      	bne.n	800db38 <CheckAttachedButtons+0x268>
 800db36:	e0d1      	b.n	800dcdc <CheckAttachedButtons+0x40c>
		if (button[i].type)			// Only check defined butons
 800db38:	46aa      	mov	sl, r5
 800db3a:	7aab      	ldrb	r3, [r5, #10]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d0ee      	beq.n	800db1e <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)
 800db40:	4b2c      	ldr	r3, [pc, #176]	; (800dbf4 <CheckAttachedButtons+0x324>)
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d100      	bne.n	800db4a <CheckAttachedButtons+0x27a>
				button[i].state = NONE;
 800db48:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800db4a:	230e      	movs	r3, #14
 800db4c:	aa02      	add	r2, sp, #8
 800db4e:	4694      	mov	ip, r2
 800db50:	4463      	add	r3, ip
 800db52:	469b      	mov	fp, r3
 800db54:	af05      	add	r7, sp, #20
 800db56:	9700      	str	r7, [sp, #0]
 800db58:	ab06      	add	r3, sp, #24
 800db5a:	465a      	mov	r2, fp
 800db5c:	a907      	add	r1, sp, #28
 800db5e:	0020      	movs	r0, r4
 800db60:	f7fe fff2 	bl	800cb48 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800db64:	465b      	mov	r3, fp
 800db66:	8819      	ldrh	r1, [r3, #0]
 800db68:	2200      	movs	r2, #0
 800db6a:	9807      	ldr	r0, [sp, #28]
 800db6c:	f004 fa6a 	bl	8012044 <HAL_GPIO_WritePin>
			Delay_us(10);
 800db70:	200a      	movs	r0, #10
 800db72:	f000 fb67 	bl	800e244 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800db76:	8839      	ldrh	r1, [r7, #0]
 800db78:	9806      	ldr	r0, [sp, #24]
 800db7a:	f004 fa5d 	bl	8012038 <HAL_GPIO_ReadPin>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d100      	bne.n	800db84 <CheckAttachedButtons+0x2b4>
 800db82:	e6b7      	b.n	800d8f4 <CheckAttachedButtons+0x24>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800db84:	230e      	movs	r3, #14
 800db86:	aa02      	add	r2, sp, #8
 800db88:	4694      	mov	ip, r2
 800db8a:	4463      	add	r3, ip
 800db8c:	8819      	ldrh	r1, [r3, #0]
 800db8e:	2200      	movs	r2, #0
 800db90:	9807      	ldr	r0, [sp, #28]
 800db92:	f004 fa57 	bl	8012044 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800db96:	4653      	mov	r3, sl
 800db98:	7a9b      	ldrb	r3, [r3, #10]
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d100      	bne.n	800dba0 <CheckAttachedButtons+0x2d0>
 800db9e:	e6ef      	b.n	800d980 <CheckAttachedButtons+0xb0>
 800dba0:	d900      	bls.n	800dba4 <CheckAttachedButtons+0x2d4>
 800dba2:	e6ba      	b.n	800d91a <CheckAttachedButtons+0x4a>
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d100      	bne.n	800dbaa <CheckAttachedButtons+0x2da>
 800dba8:	e6c2      	b.n	800d930 <CheckAttachedButtons+0x60>
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d000      	beq.n	800dbb0 <CheckAttachedButtons+0x2e0>
 800dbae:	e6c5      	b.n	800d93c <CheckAttachedButtons+0x6c>
				if (connected == GPIO_PIN_SET)
 800dbb0:	9b02      	ldr	r3, [sp, #8]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d100      	bne.n	800dbb8 <CheckAttachedButtons+0x2e8>
 800dbb6:	e713      	b.n	800d9e0 <CheckAttachedButtons+0x110>
				else if (connected == GPIO_PIN_RESET)
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d000      	beq.n	800dbbe <CheckAttachedButtons+0x2ee>
 800dbbc:	e6be      	b.n	800d93c <CheckAttachedButtons+0x6c>
					state = OPEN;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	9303      	str	r3, [sp, #12]
 800dbc2:	e6c5      	b.n	800d950 <CheckAttachedButtons+0x80>
				buttonReleasedCallback(i);
 800dbc4:	0020      	movs	r0, r4
 800dbc6:	f7ff fe7d 	bl	800d8c4 <buttonReleasedCallback>
				button[i].state = NONE;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	4652      	mov	r2, sl
 800dbce:	7253      	strb	r3, [r2, #9]
				break;
 800dbd0:	e7a5      	b.n	800db1e <CheckAttachedButtons+0x24e>
 800dbd2:	46c0      	nop			; (mov r8, r8)
 800dbd4:	20001358 	.word	0x20001358
 800dbd8:	200013a0 	.word	0x200013a0
 800dbdc:	20001390 	.word	0x20001390
 800dbe0:	20001384 	.word	0x20001384
 800dbe4:	0000fffe 	.word	0x0000fffe
 800dbe8:	2000137c 	.word	0x2000137c
 800dbec:	20006278 	.word	0x20006278
 800dbf0:	0000fe0a 	.word	0x0000fe0a
 800dbf4:	20001388 	.word	0x20001388
 800dbf8:	0801b2ec 	.word	0x0801b2ec
				if (!delayButtonStateReset
 800dbfc:	4b3b      	ldr	r3, [pc, #236]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d18c      	bne.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800dc04:	4653      	mov	r3, sl
 800dc06:	7c5b      	ldrb	r3, [r3, #17]
 800dc08:	075b      	lsls	r3, r3, #29
 800dc0a:	d588      	bpl.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dc0c:	4b37      	ldr	r3, [pc, #220]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc0e:	2201      	movs	r2, #1
 800dc10:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800dc12:	2101      	movs	r1, #1
 800dc14:	0020      	movs	r0, r4
 800dc16:	f7ff fe58 	bl	800d8ca <buttonPressedForXCallback>
 800dc1a:	e780      	b.n	800db1e <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800dc1c:	4b33      	ldr	r3, [pc, #204]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d000      	beq.n	800dc26 <CheckAttachedButtons+0x356>
 800dc24:	e77b      	b.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800dc26:	4653      	mov	r3, sl
 800dc28:	7c5b      	ldrb	r3, [r3, #17]
 800dc2a:	071b      	lsls	r3, r3, #28
 800dc2c:	d400      	bmi.n	800dc30 <CheckAttachedButtons+0x360>
 800dc2e:	e776      	b.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dc30:	4b2e      	ldr	r3, [pc, #184]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc32:	2201      	movs	r2, #1
 800dc34:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800dc36:	2102      	movs	r1, #2
 800dc38:	0020      	movs	r0, r4
 800dc3a:	f7ff fe46 	bl	800d8ca <buttonPressedForXCallback>
 800dc3e:	e76e      	b.n	800db1e <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800dc40:	4b2a      	ldr	r3, [pc, #168]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d000      	beq.n	800dc4a <CheckAttachedButtons+0x37a>
 800dc48:	e769      	b.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800dc4a:	4653      	mov	r3, sl
 800dc4c:	7c5b      	ldrb	r3, [r3, #17]
 800dc4e:	06db      	lsls	r3, r3, #27
 800dc50:	d400      	bmi.n	800dc54 <CheckAttachedButtons+0x384>
 800dc52:	e764      	b.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dc54:	4b25      	ldr	r3, [pc, #148]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc56:	2201      	movs	r2, #1
 800dc58:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800dc5a:	2103      	movs	r1, #3
 800dc5c:	0020      	movs	r0, r4
 800dc5e:	f7ff fe34 	bl	800d8ca <buttonPressedForXCallback>
 800dc62:	e75c      	b.n	800db1e <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800dc64:	4b21      	ldr	r3, [pc, #132]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d000      	beq.n	800dc6e <CheckAttachedButtons+0x39e>
 800dc6c:	e757      	b.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800dc6e:	4653      	mov	r3, sl
 800dc70:	7c5b      	ldrb	r3, [r3, #17]
 800dc72:	069b      	lsls	r3, r3, #26
 800dc74:	d400      	bmi.n	800dc78 <CheckAttachedButtons+0x3a8>
 800dc76:	e752      	b.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dc78:	4b1c      	ldr	r3, [pc, #112]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800dc7e:	2101      	movs	r1, #1
 800dc80:	0020      	movs	r0, r4
 800dc82:	f7ff fe23 	bl	800d8cc <buttonReleasedForYCallback>
 800dc86:	e74a      	b.n	800db1e <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800dc88:	4b18      	ldr	r3, [pc, #96]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d000      	beq.n	800dc92 <CheckAttachedButtons+0x3c2>
 800dc90:	e745      	b.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800dc92:	4653      	mov	r3, sl
 800dc94:	7c5b      	ldrb	r3, [r3, #17]
 800dc96:	065b      	lsls	r3, r3, #25
 800dc98:	d400      	bmi.n	800dc9c <CheckAttachedButtons+0x3cc>
 800dc9a:	e740      	b.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dc9c:	4b13      	ldr	r3, [pc, #76]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800dca2:	2102      	movs	r1, #2
 800dca4:	0020      	movs	r0, r4
 800dca6:	f7ff fe11 	bl	800d8cc <buttonReleasedForYCallback>
 800dcaa:	e738      	b.n	800db1e <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800dcac:	4b0f      	ldr	r3, [pc, #60]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d000      	beq.n	800dcb6 <CheckAttachedButtons+0x3e6>
 800dcb4:	e733      	b.n	800db1e <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800dcb6:	4653      	mov	r3, sl
 800dcb8:	7c5b      	ldrb	r3, [r3, #17]
 800dcba:	2b7f      	cmp	r3, #127	; 0x7f
 800dcbc:	d800      	bhi.n	800dcc0 <CheckAttachedButtons+0x3f0>
 800dcbe:	e72e      	b.n	800db1e <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800dcc0:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <CheckAttachedButtons+0x41c>)
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800dcc6:	2103      	movs	r1, #3
 800dcc8:	0020      	movs	r0, r4
 800dcca:	f7ff fdff 	bl	800d8cc <buttonReleasedForYCallback>
 800dcce:	e726      	b.n	800db1e <CheckAttachedButtons+0x24e>
					state = OPEN;
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	9303      	str	r3, [sp, #12]
 800dcd4:	e63c      	b.n	800d950 <CheckAttachedButtons+0x80>
					state = OFF;
 800dcd6:	9b02      	ldr	r3, [sp, #8]
 800dcd8:	9303      	str	r3, [sp, #12]
			if (state == OPEN || state == OFF) {
 800dcda:	e639      	b.n	800d950 <CheckAttachedButtons+0x80>
}
 800dcdc:	b009      	add	sp, #36	; 0x24
 800dcde:	bcf0      	pop	{r4, r5, r6, r7}
 800dce0:	46bb      	mov	fp, r7
 800dce2:	46b2      	mov	sl, r6
 800dce4:	46a9      	mov	r9, r5
 800dce6:	46a0      	mov	r8, r4
 800dce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcea:	46c0      	nop			; (mov r8, r8)
 800dcec:	20001388 	.word	0x20001388

0800dcf0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800dcf0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800dcf2:	f002 fd1b 	bl	801072c <HAL_IncTick>
  osSystickHandler();  
 800dcf6:	f000 fe1b 	bl	800e930 <osSystickHandler>

}
 800dcfa:	bd10      	pop	{r4, pc}

0800dcfc <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800dcfc:	e7fe      	b.n	800dcfc <HardFault_Handler>
	...

0800dd00 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800dd00:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800dd02:	4802      	ldr	r0, [pc, #8]	; (800dd0c <USART1_IRQHandler+0xc>)
 800dd04:	f005 fea1 	bl	8013a4a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dd08:	bd10      	pop	{r4, pc}
 800dd0a:	46c0      	nop			; (mov r8, r8)
 800dd0c:	20006414 	.word	0x20006414

0800dd10 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800dd10:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800dd12:	4802      	ldr	r0, [pc, #8]	; (800dd1c <USART2_IRQHandler+0xc>)
 800dd14:	f005 fe99 	bl	8013a4a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	46c0      	nop			; (mov r8, r8)
 800dd1c:	20006584 	.word	0x20006584

0800dd20 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800dd20:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dd22:	4805      	ldr	r0, [pc, #20]	; (800dd38 <USART3_8_IRQHandler+0x18>)
 800dd24:	f005 fe91 	bl	8013a4a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800dd28:	4804      	ldr	r0, [pc, #16]	; (800dd3c <USART3_8_IRQHandler+0x1c>)
 800dd2a:	f005 fe8e 	bl	8013a4a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800dd2e:	4804      	ldr	r0, [pc, #16]	; (800dd40 <USART3_8_IRQHandler+0x20>)
 800dd30:	f005 fe8b 	bl	8013a4a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dd34:	bd10      	pop	{r4, pc}
 800dd36:	46c0      	nop			; (mov r8, r8)
 800dd38:	20006364 	.word	0x20006364
 800dd3c:	20006510 	.word	0x20006510
 800dd40:	20006498 	.word	0x20006498

0800dd44 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800dd44:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800dd46:	2001      	movs	r0, #1
 800dd48:	f7f9 fc40 	bl	80075cc <DMA_IRQHandler>
	
}
 800dd4c:	bd10      	pop	{r4, pc}
	...

0800dd50 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800dd50:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800dd52:	4b0c      	ldr	r3, [pc, #48]	; (800dd84 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	06db      	lsls	r3, r3, #27
 800dd58:	d40b      	bmi.n	800dd72 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800dd5a:	4b0b      	ldr	r3, [pc, #44]	; (800dd88 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	05db      	lsls	r3, r3, #23
 800dd60:	d40b      	bmi.n	800dd7a <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800dd62:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	06db      	lsls	r3, r3, #27
 800dd68:	d506      	bpl.n	800dd78 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800dd6a:	4808      	ldr	r0, [pc, #32]	; (800dd8c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800dd6c:	f003 fa3e 	bl	80111ec <HAL_DMA_IRQHandler>
	}
}
 800dd70:	e002      	b.n	800dd78 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800dd72:	2005      	movs	r0, #5
 800dd74:	f7f9 fc2a 	bl	80075cc <DMA_IRQHandler>
}
 800dd78:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800dd7a:	2002      	movs	r0, #2
 800dd7c:	f7f9 fc26 	bl	80075cc <DMA_IRQHandler>
 800dd80:	e7fa      	b.n	800dd78 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800dd82:	46c0      	nop			; (mov r8, r8)
 800dd84:	40020400 	.word	0x40020400
 800dd88:	40020000 	.word	0x40020000
 800dd8c:	2000114c 	.word	0x2000114c

0800dd90 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800dd90:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800dd92:	4b14      	ldr	r3, [pc, #80]	; (800dde4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	03db      	lsls	r3, r3, #15
 800dd98:	d413      	bmi.n	800ddc2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800dd9a:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	02db      	lsls	r3, r3, #11
 800dda0:	d413      	bmi.n	800ddca <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800dda2:	4b11      	ldr	r3, [pc, #68]	; (800dde8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	05db      	lsls	r3, r3, #23
 800dda8:	d413      	bmi.n	800ddd2 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800ddaa:	4b0e      	ldr	r3, [pc, #56]	; (800dde4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	04db      	lsls	r3, r3, #19
 800ddb0:	d413      	bmi.n	800ddda <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800ddb2:	4b0c      	ldr	r3, [pc, #48]	; (800dde4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	01db      	lsls	r3, r3, #7
 800ddb8:	d506      	bpl.n	800ddc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800ddba:	480c      	ldr	r0, [pc, #48]	; (800ddec <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800ddbc:	f003 fa16 	bl	80111ec <HAL_DMA_IRQHandler>
	}
}
 800ddc0:	e002      	b.n	800ddc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800ddc2:	2003      	movs	r0, #3
 800ddc4:	f7f9 fc02 	bl	80075cc <DMA_IRQHandler>
}
 800ddc8:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800ddca:	2004      	movs	r0, #4
 800ddcc:	f7f9 fbfe 	bl	80075cc <DMA_IRQHandler>
 800ddd0:	e7fa      	b.n	800ddc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800ddd2:	2006      	movs	r0, #6
 800ddd4:	f7f9 fbfa 	bl	80075cc <DMA_IRQHandler>
 800ddd8:	e7f6      	b.n	800ddc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800ddda:	4805      	ldr	r0, [pc, #20]	; (800ddf0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800dddc:	f003 fa06 	bl	80111ec <HAL_DMA_IRQHandler>
 800dde0:	e7f2      	b.n	800ddc8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800dde2:	46c0      	nop			; (mov r8, r8)
 800dde4:	40020000 	.word	0x40020000
 800dde8:	40020400 	.word	0x40020400
 800ddec:	200011bc 	.word	0x200011bc
 800ddf0:	20001184 	.word	0x20001184

0800ddf4 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddf4:	b510      	push	{r4, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800ddfe:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800de04:	f7fd fb5e 	bl	800b4c4 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800de08:	0020      	movs	r0, r4
 800de0a:	f7fc fc93 	bl	800a734 <GetPort>
 800de0e:	0080      	lsls	r0, r0, #2
 800de10:	4b03      	ldr	r3, [pc, #12]	; (800de20 <HAL_UART_TxCpltCallback+0x2c>)
 800de12:	58c0      	ldr	r0, [r0, r3]
 800de14:	a901      	add	r1, sp, #4
 800de16:	f001 f8d9 	bl	800efcc <xQueueGiveFromISR>
}
 800de1a:	b002      	add	sp, #8
 800de1c:	bd10      	pop	{r4, pc}
 800de1e:	46c0      	nop			; (mov r8, r8)
 800de20:	200062fc 	.word	0x200062fc

0800de24 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de24:	b510      	push	{r4, lr}
 800de26:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800de28:	2369      	movs	r3, #105	; 0x69
 800de2a:	2201      	movs	r2, #1
 800de2c:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800de2e:	f7fc fc81 	bl	800a734 <GetPort>
	if (portStatus[port] == STREAM) {
 800de32:	4b0c      	ldr	r3, [pc, #48]	; (800de64 <HAL_UART_ErrorCallback+0x40>)
 800de34:	5c1b      	ldrb	r3, [r3, r0]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d005      	beq.n	800de46 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800de3a:	4b0b      	ldr	r3, [pc, #44]	; (800de68 <HAL_UART_ErrorCallback+0x44>)
 800de3c:	1818      	adds	r0, r3, r0
 800de3e:	3801      	subs	r0, #1
 800de40:	2301      	movs	r3, #1
 800de42:	7003      	strb	r3, [r0, #0]
	}	
}
 800de44:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800de46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	b292      	uxth	r2, r2
 800de4e:	1e43      	subs	r3, r0, #1
 800de50:	009b      	lsls	r3, r3, #2
 800de52:	4906      	ldr	r1, [pc, #24]	; (800de6c <HAL_UART_ErrorCallback+0x48>)
 800de54:	585b      	ldr	r3, [r3, r1]
 800de56:	6819      	ldr	r1, [r3, #0]
 800de58:	3128      	adds	r1, #40	; 0x28
 800de5a:	0020      	movs	r0, r4
 800de5c:	f005 f9dc 	bl	8013218 <HAL_UART_Receive_DMA>
 800de60:	e7f0      	b.n	800de44 <HAL_UART_ErrorCallback+0x20>
 800de62:	46c0      	nop			; (mov r8, r8)
 800de64:	20000878 	.word	0x20000878
 800de68:	20000a48 	.word	0x20000a48
 800de6c:	20000cd4 	.word	0x20000cd4

0800de70 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800de70:	b510      	push	{r4, lr}
 800de72:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800de74:	f7fc fc5e 	bl	800a734 <GetPort>
 800de78:	4b13      	ldr	r3, [pc, #76]	; (800dec8 <HAL_UART_RxCpltCallback+0x58>)
 800de7a:	5c1b      	ldrb	r3, [r3, r0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d006      	beq.n	800de8e <HAL_UART_RxCpltCallback+0x1e>
 800de80:	0020      	movs	r0, r4
 800de82:	f7fc fc57 	bl	800a734 <GetPort>
 800de86:	4b10      	ldr	r3, [pc, #64]	; (800dec8 <HAL_UART_RxCpltCallback+0x58>)
 800de88:	5c1b      	ldrb	r3, [r3, r0]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d11a      	bne.n	800dec4 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800de8e:	0020      	movs	r0, r4
 800de90:	f7fc fc50 	bl	800a734 <GetPort>
 800de94:	4b0d      	ldr	r3, [pc, #52]	; (800decc <HAL_UART_RxCpltCallback+0x5c>)
 800de96:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800de98:	0020      	movs	r0, r4
 800de9a:	f7fc fc4b 	bl	800a734 <GetPort>
 800de9e:	4b0a      	ldr	r3, [pc, #40]	; (800dec8 <HAL_UART_RxCpltCallback+0x58>)
 800dea0:	2205      	movs	r2, #5
 800dea2:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800dea4:	0020      	movs	r0, r4
 800dea6:	f7fc fc45 	bl	800a734 <GetPort>
 800deaa:	4b09      	ldr	r3, [pc, #36]	; (800ded0 <HAL_UART_RxCpltCallback+0x60>)
 800deac:	181b      	adds	r3, r3, r0
 800deae:	3b01      	subs	r3, #1
 800deb0:	2200      	movs	r2, #0
 800deb2:	701a      	strb	r2, [r3, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800deb4:	0020      	movs	r0, r4
 800deb6:	f7fc fc3d 	bl	800a734 <GetPort>
 800deba:	4b06      	ldr	r3, [pc, #24]	; (800ded4 <HAL_UART_RxCpltCallback+0x64>)
 800debc:	181b      	adds	r3, r3, r0
 800debe:	3b01      	subs	r3, #1
 800dec0:	2201      	movs	r2, #1
 800dec2:	701a      	strb	r2, [r3, #0]
	}

}
 800dec4:	bd10      	pop	{r4, pc}
 800dec6:	46c0      	nop			; (mov r8, r8)
 800dec8:	20000878 	.word	0x20000878
 800decc:	200061f8 	.word	0x200061f8
 800ded0:	20000c8c 	.word	0x20000c8c
 800ded4:	20000a48 	.word	0x20000a48

0800ded8 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800ded8:	b672      	cpsid	i
	for( ;; );
 800deda:	e7fe      	b.n	800deda <vApplicationStackOverflowHook+0x2>

0800dedc <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800dedc:	b672      	cpsid	i
	for( ;; );
 800dede:	e7fe      	b.n	800dede <vApplicationMallocFailedHook+0x2>

0800dee0 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	46ce      	mov	lr, r9
 800dee4:	4647      	mov	r7, r8
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b08f      	sub	sp, #60	; 0x3c
 800deea:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800deec:	ac05      	add	r4, sp, #20
 800deee:	4b34      	ldr	r3, [pc, #208]	; (800dfc0 <RTC_CalendarConfig+0xe0>)
 800def0:	0022      	movs	r2, r4
 800def2:	cb43      	ldmia	r3!, {r0, r1, r6}
 800def4:	c243      	stmia	r2!, {r0, r1, r6}
 800def6:	aa02      	add	r2, sp, #8
 800def8:	4b32      	ldr	r3, [pc, #200]	; (800dfc4 <RTC_CalendarConfig+0xe4>)
 800defa:	cb03      	ldmia	r3!, {r0, r1}
 800defc:	c203      	stmia	r2!, {r0, r1}
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800df02:	2015      	movs	r0, #21
 800df04:	ab02      	add	r3, sp, #8
 800df06:	469c      	mov	ip, r3
 800df08:	4460      	add	r0, ip
 800df0a:	f005 fe26 	bl	8013b5a <atoi>
 800df0e:	b2c3      	uxtb	r3, r0
 800df10:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800df12:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800df14:	a806      	add	r0, sp, #24
 800df16:	f005 fe20 	bl	8013b5a <atoi>
 800df1a:	b2c3      	uxtb	r3, r0
 800df1c:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800df1e:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800df20:	4e29      	ldr	r6, [pc, #164]	; (800dfc8 <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800df22:	2401      	movs	r4, #1
 800df24:	e003      	b.n	800df2e <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800df26:	3401      	adds	r4, #1
 800df28:	3604      	adds	r6, #4
 800df2a:	2c0d      	cmp	r4, #13
 800df2c:	d007      	beq.n	800df3e <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800df2e:	6831      	ldr	r1, [r6, #0]
 800df30:	a805      	add	r0, sp, #20
 800df32:	f7f2 f8e7 	bl	8000104 <strcmp>
 800df36:	2800      	cmp	r0, #0
 800df38:	d1f5      	bne.n	800df26 <RTC_CalendarConfig+0x46>
			month = i + 1;
 800df3a:	b2e5      	uxtb	r5, r4
 800df3c:	e7f3      	b.n	800df26 <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800df3e:	ab02      	add	r3, sp, #8
 800df40:	1d98      	adds	r0, r3, #6
 800df42:	f005 fe0a 	bl	8013b5a <atoi>
 800df46:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800df48:	af05      	add	r7, sp, #20
 800df4a:	2400      	movs	r4, #0
 800df4c:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800df4e:	ab02      	add	r3, sp, #8
 800df50:	1cd8      	adds	r0, r3, #3
 800df52:	f005 fe02 	bl	8013b5a <atoi>
 800df56:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800df58:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800df5a:	a802      	add	r0, sp, #8
 800df5c:	f005 fdfd 	bl	8013b5a <atoi>
 800df60:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800df62:	a90d      	add	r1, sp, #52	; 0x34
 800df64:	464b      	mov	r3, r9
 800df66:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800df68:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800df6a:	4643      	mov	r3, r8
 800df6c:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800df6e:	2301      	movs	r3, #1
 800df70:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800df72:	2200      	movs	r2, #0
 800df74:	4815      	ldr	r0, [pc, #84]	; (800dfcc <RTC_CalendarConfig+0xec>)
 800df76:	f004 fea5 	bl	8012cc4 <HAL_RTC_SetDate>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	d11c      	bne.n	800dfb8 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800df7e:	a908      	add	r1, sp, #32
 800df80:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800df82:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800df88:	2300      	movs	r3, #0
 800df8a:	720b      	strb	r3, [r1, #8]
 800df8c:	4a10      	ldr	r2, [pc, #64]	; (800dfd0 <RTC_CalendarConfig+0xf0>)
 800df8e:	3018      	adds	r0, #24
 800df90:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800df92:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800df94:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800df96:	2200      	movs	r2, #0
 800df98:	480c      	ldr	r0, [pc, #48]	; (800dfcc <RTC_CalendarConfig+0xec>)
 800df9a:	f004 fe13 	bl	8012bc4 <HAL_RTC_SetTime>
 800df9e:	1e04      	subs	r4, r0, #0
 800dfa0:	d10c      	bne.n	800dfbc <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dfa2:	4a0c      	ldr	r2, [pc, #48]	; (800dfd4 <RTC_CalendarConfig+0xf4>)
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	4809      	ldr	r0, [pc, #36]	; (800dfcc <RTC_CalendarConfig+0xec>)
 800dfa8:	f004 ff50 	bl	8012e4c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800dfac:	0020      	movs	r0, r4
 800dfae:	b00f      	add	sp, #60	; 0x3c
 800dfb0:	bcc0      	pop	{r6, r7}
 800dfb2:	46b9      	mov	r9, r7
 800dfb4:	46b0      	mov	r8, r6
 800dfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800dfb8:	24ff      	movs	r4, #255	; 0xff
 800dfba:	e7f7      	b.n	800dfac <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800dfbc:	24ff      	movs	r4, #255	; 0xff
 800dfbe:	e7f5      	b.n	800dfac <RTC_CalendarConfig+0xcc>
 800dfc0:	08018684 	.word	0x08018684
 800dfc4:	080186a8 	.word	0x080186a8
 800dfc8:	20000034 	.word	0x20000034
 800dfcc:	200066a8 	.word	0x200066a8
 800dfd0:	20006278 	.word	0x20006278
 800dfd4:	000032f2 	.word	0x000032f2

0800dfd8 <RTC_Init>:
{
 800dfd8:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800dfda:	4a1c      	ldr	r2, [pc, #112]	; (800e04c <RTC_Init+0x74>)
 800dfdc:	6a11      	ldr	r1, [r2, #32]
 800dfde:	2380      	movs	r3, #128	; 0x80
 800dfe0:	021b      	lsls	r3, r3, #8
 800dfe2:	430b      	orrs	r3, r1
 800dfe4:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800dfe6:	481a      	ldr	r0, [pc, #104]	; (800e050 <RTC_Init+0x78>)
 800dfe8:	4b1a      	ldr	r3, [pc, #104]	; (800e054 <RTC_Init+0x7c>)
 800dfea:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800dfec:	2300      	movs	r3, #0
 800dfee:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800dff0:	227c      	movs	r2, #124	; 0x7c
 800dff2:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800dff4:	4a18      	ldr	r2, [pc, #96]	; (800e058 <RTC_Init+0x80>)
 800dff6:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dff8:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dffa:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dffc:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800dffe:	f004 fd83 	bl	8012b08 <HAL_RTC_Init>
 800e002:	1e04      	subs	r4, r0, #0
 800e004:	d11f      	bne.n	800e046 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e006:	2101      	movs	r1, #1
 800e008:	4811      	ldr	r0, [pc, #68]	; (800e050 <RTC_Init+0x78>)
 800e00a:	f004 ff25 	bl	8012e58 <HAL_RTCEx_BKUPRead>
 800e00e:	4b13      	ldr	r3, [pc, #76]	; (800e05c <RTC_Init+0x84>)
 800e010:	4298      	cmp	r0, r3
 800e012:	d10e      	bne.n	800e032 <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e014:	4b0d      	ldr	r3, [pc, #52]	; (800e04c <RTC_Init+0x74>)
 800e016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e018:	011b      	lsls	r3, r3, #4
 800e01a:	d502      	bpl.n	800e022 <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800e01c:	4b10      	ldr	r3, [pc, #64]	; (800e060 <RTC_Init+0x88>)
 800e01e:	2200      	movs	r2, #0
 800e020:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e022:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <RTC_Init+0x74>)
 800e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e026:	015b      	lsls	r3, r3, #5
 800e028:	d505      	bpl.n	800e036 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800e02a:	4b0d      	ldr	r3, [pc, #52]	; (800e060 <RTC_Init+0x88>)
 800e02c:	2201      	movs	r2, #1
 800e02e:	701a      	strb	r2, [r3, #0]
 800e030:	e001      	b.n	800e036 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800e032:	f7ff ff55 	bl	800dee0 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e036:	4a05      	ldr	r2, [pc, #20]	; (800e04c <RTC_Init+0x74>)
 800e038:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e03a:	2380      	movs	r3, #128	; 0x80
 800e03c:	045b      	lsls	r3, r3, #17
 800e03e:	430b      	orrs	r3, r1
 800e040:	6253      	str	r3, [r2, #36]	; 0x24
}
 800e042:	0020      	movs	r0, r4
 800e044:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e046:	24ff      	movs	r4, #255	; 0xff
 800e048:	e7fb      	b.n	800e042 <RTC_Init+0x6a>
 800e04a:	46c0      	nop			; (mov r8, r8)
 800e04c:	40021000 	.word	0x40021000
 800e050:	200066a8 	.word	0x200066a8
 800e054:	40002800 	.word	0x40002800
 800e058:	000007cf 	.word	0x000007cf
 800e05c:	000032f2 	.word	0x000032f2
 800e060:	200013bc 	.word	0x200013bc

0800e064 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e066:	46c6      	mov	lr, r8
 800e068:	b500      	push	{lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	ac0c      	add	r4, sp, #48	; 0x30
 800e06e:	7827      	ldrb	r7, [r4, #0]
 800e070:	ac0d      	add	r4, sp, #52	; 0x34
 800e072:	7824      	ldrb	r4, [r4, #0]
 800e074:	46a0      	mov	r8, r4
 800e076:	ac0e      	add	r4, sp, #56	; 0x38
 800e078:	7825      	ldrb	r5, [r4, #0]
 800e07a:	ac0f      	add	r4, sp, #60	; 0x3c
 800e07c:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e07e:	ac05      	add	r4, sp, #20
 800e080:	3230      	adds	r2, #48	; 0x30
 800e082:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e084:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e086:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e088:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e08a:	2200      	movs	r2, #0
 800e08c:	0021      	movs	r1, r4
 800e08e:	481f      	ldr	r0, [pc, #124]	; (800e10c <BOS_CalendarConfig+0xa8>)
 800e090:	f004 fe18 	bl	8012cc4 <HAL_RTC_SetDate>
 800e094:	2800      	cmp	r0, #0
 800e096:	d134      	bne.n	800e102 <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e098:	466b      	mov	r3, sp
 800e09a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e09c:	4642      	mov	r2, r8
 800e09e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e0a0:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e0a6:	2e01      	cmp	r6, #1
 800e0a8:	d01e      	beq.n	800e0e8 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e0aa:	2e02      	cmp	r6, #2
 800e0ac:	d022      	beq.n	800e0f4 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e0ae:	4b18      	ldr	r3, [pc, #96]	; (800e110 <BOS_CalendarConfig+0xac>)
 800e0b0:	2218      	movs	r2, #24
 800e0b2:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	4669      	mov	r1, sp
 800e0b8:	4814      	ldr	r0, [pc, #80]	; (800e10c <BOS_CalendarConfig+0xa8>)
 800e0ba:	f004 fd83 	bl	8012bc4 <HAL_RTC_SetTime>
 800e0be:	1e04      	subs	r4, r0, #0
 800e0c0:	d121      	bne.n	800e106 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e0c2:	4a13      	ldr	r2, [pc, #76]	; (800e110 <BOS_CalendarConfig+0xac>)
 800e0c4:	7b53      	ldrb	r3, [r2, #13]
 800e0c6:	021b      	lsls	r3, r3, #8
 800e0c8:	7911      	ldrb	r1, [r2, #4]
 800e0ca:	4319      	orrs	r1, r3
 800e0cc:	208d      	movs	r0, #141	; 0x8d
 800e0ce:	0040      	lsls	r0, r0, #1
 800e0d0:	f7fe f9f8 	bl	800c4c4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e0d4:	4a0f      	ldr	r2, [pc, #60]	; (800e114 <BOS_CalendarConfig+0xb0>)
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	480c      	ldr	r0, [pc, #48]	; (800e10c <BOS_CalendarConfig+0xa8>)
 800e0da:	f004 feb7 	bl	8012e4c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800e0de:	0020      	movs	r0, r4
 800e0e0:	b006      	add	sp, #24
 800e0e2:	bc80      	pop	{r7}
 800e0e4:	46b8      	mov	r8, r7
 800e0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e0e8:	466a      	mov	r2, sp
 800e0ea:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e0ec:	4b08      	ldr	r3, [pc, #32]	; (800e110 <BOS_CalendarConfig+0xac>)
 800e0ee:	220c      	movs	r2, #12
 800e0f0:	735a      	strb	r2, [r3, #13]
 800e0f2:	e7df      	b.n	800e0b4 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e0f4:	2340      	movs	r3, #64	; 0x40
 800e0f6:	466a      	mov	r2, sp
 800e0f8:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e0fa:	4b05      	ldr	r3, [pc, #20]	; (800e110 <BOS_CalendarConfig+0xac>)
 800e0fc:	220c      	movs	r2, #12
 800e0fe:	735a      	strb	r2, [r3, #13]
 800e100:	e7d8      	b.n	800e0b4 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e102:	24ff      	movs	r4, #255	; 0xff
 800e104:	e7eb      	b.n	800e0de <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800e106:	24ff      	movs	r4, #255	; 0xff
 800e108:	e7e9      	b.n	800e0de <BOS_CalendarConfig+0x7a>
 800e10a:	46c0      	nop			; (mov r8, r8)
 800e10c:	200066a8 	.word	0x200066a8
 800e110:	20006278 	.word	0x20006278
 800e114:	000032f2 	.word	0x000032f2

0800e118 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e118:	b530      	push	{r4, r5, lr}
 800e11a:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e11c:	4d16      	ldr	r5, [pc, #88]	; (800e178 <GetTimeDate+0x60>)
 800e11e:	2200      	movs	r2, #0
 800e120:	a902      	add	r1, sp, #8
 800e122:	0028      	movs	r0, r5
 800e124:	f004 fe4a 	bl	8012dbc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e128:	ac07      	add	r4, sp, #28
 800e12a:	2200      	movs	r2, #0
 800e12c:	0021      	movs	r1, r4
 800e12e:	0028      	movs	r0, r5
 800e130:	f004 fe6a 	bl	8012e08 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e134:	4b11      	ldr	r3, [pc, #68]	; (800e17c <GetTimeDate+0x64>)
 800e136:	aa02      	add	r2, sp, #8
 800e138:	7a12      	ldrb	r2, [r2, #8]
 800e13a:	09d2      	lsrs	r2, r2, #7
 800e13c:	3201      	adds	r2, #1
 800e13e:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e140:	9a03      	ldr	r2, [sp, #12]
 800e142:	9201      	str	r2, [sp, #4]
 800e144:	0852      	lsrs	r2, r2, #1
 800e146:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e148:	aa02      	add	r2, sp, #8
 800e14a:	7892      	ldrb	r2, [r2, #2]
 800e14c:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e14e:	aa02      	add	r2, sp, #8
 800e150:	7852      	ldrb	r2, [r2, #1]
 800e152:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e154:	aa02      	add	r2, sp, #8
 800e156:	7812      	ldrb	r2, [r2, #0]
 800e158:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e15a:	78a2      	ldrb	r2, [r4, #2]
 800e15c:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e15e:	7862      	ldrb	r2, [r4, #1]
 800e160:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e162:	7822      	ldrb	r2, [r4, #0]
 800e164:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e166:	78e2      	ldrb	r2, [r4, #3]
 800e168:	21fa      	movs	r1, #250	; 0xfa
 800e16a:	00c9      	lsls	r1, r1, #3
 800e16c:	468c      	mov	ip, r1
 800e16e:	4462      	add	r2, ip
 800e170:	831a      	strh	r2, [r3, #24]
}
 800e172:	b009      	add	sp, #36	; 0x24
 800e174:	bd30      	pop	{r4, r5, pc}
 800e176:	46c0      	nop			; (mov r8, r8)
 800e178:	200066a8 	.word	0x200066a8
 800e17c:	20006278 	.word	0x20006278

0800e180 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e180:	b530      	push	{r4, r5, lr}
 800e182:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e184:	4a12      	ldr	r2, [pc, #72]	; (800e1d0 <TIM_USEC_Init+0x50>)
 800e186:	69d1      	ldr	r1, [r2, #28]
 800e188:	2080      	movs	r0, #128	; 0x80
 800e18a:	0040      	lsls	r0, r0, #1
 800e18c:	4301      	orrs	r1, r0
 800e18e:	61d1      	str	r1, [r2, #28]
 800e190:	69d3      	ldr	r3, [r2, #28]
 800e192:	4003      	ands	r3, r0
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e198:	4c0e      	ldr	r4, [pc, #56]	; (800e1d4 <TIM_USEC_Init+0x54>)
 800e19a:	4b0f      	ldr	r3, [pc, #60]	; (800e1d8 <TIM_USEC_Init+0x58>)
 800e19c:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e19e:	f004 fbcb 	bl	8012938 <HAL_RCC_GetPCLK1Freq>
 800e1a2:	490e      	ldr	r1, [pc, #56]	; (800e1dc <TIM_USEC_Init+0x5c>)
 800e1a4:	f7f1 ffd4 	bl	8000150 <__udivsi3>
 800e1a8:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e1aa:	2500      	movs	r5, #0
 800e1ac:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e1ae:	4b0c      	ldr	r3, [pc, #48]	; (800e1e0 <TIM_USEC_Init+0x60>)
 800e1b0:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e1b2:	0020      	movs	r0, r4
 800e1b4:	f004 fed2 	bl	8012f5c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e1b8:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e1ba:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e1bc:	a902      	add	r1, sp, #8
 800e1be:	0020      	movs	r0, r4
 800e1c0:	f004 fee6 	bl	8012f90 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e1c4:	0020      	movs	r0, r4
 800e1c6:	f004 fe4e 	bl	8012e66 <HAL_TIM_Base_Start>
}
 800e1ca:	b005      	add	sp, #20
 800e1cc:	bd30      	pop	{r4, r5, pc}
 800e1ce:	46c0      	nop			; (mov r8, r8)
 800e1d0:	40021000 	.word	0x40021000
 800e1d4:	20006704 	.word	0x20006704
 800e1d8:	40002000 	.word	0x40002000
 800e1dc:	000f4240 	.word	0x000f4240
 800e1e0:	0000ffff 	.word	0x0000ffff

0800e1e4 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e1e4:	b530      	push	{r4, r5, lr}
 800e1e6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e1e8:	4a12      	ldr	r2, [pc, #72]	; (800e234 <TIM_MSEC_Init+0x50>)
 800e1ea:	6991      	ldr	r1, [r2, #24]
 800e1ec:	2080      	movs	r0, #128	; 0x80
 800e1ee:	0240      	lsls	r0, r0, #9
 800e1f0:	4301      	orrs	r1, r0
 800e1f2:	6191      	str	r1, [r2, #24]
 800e1f4:	6993      	ldr	r3, [r2, #24]
 800e1f6:	4003      	ands	r3, r0
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e1fc:	4c0e      	ldr	r4, [pc, #56]	; (800e238 <TIM_MSEC_Init+0x54>)
 800e1fe:	4b0f      	ldr	r3, [pc, #60]	; (800e23c <TIM_MSEC_Init+0x58>)
 800e200:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e202:	f004 fb99 	bl	8012938 <HAL_RCC_GetPCLK1Freq>
 800e206:	21fa      	movs	r1, #250	; 0xfa
 800e208:	0089      	lsls	r1, r1, #2
 800e20a:	f7f1 ffa1 	bl	8000150 <__udivsi3>
 800e20e:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e210:	2500      	movs	r5, #0
 800e212:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e214:	4b0a      	ldr	r3, [pc, #40]	; (800e240 <TIM_MSEC_Init+0x5c>)
 800e216:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e218:	0020      	movs	r0, r4
 800e21a:	f004 fe9f 	bl	8012f5c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e21e:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e220:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e222:	a902      	add	r1, sp, #8
 800e224:	0020      	movs	r0, r4
 800e226:	f004 feb3 	bl	8012f90 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e22a:	0020      	movs	r0, r4
 800e22c:	f004 fe1b 	bl	8012e66 <HAL_TIM_Base_Start>
}
 800e230:	b005      	add	sp, #20
 800e232:	bd30      	pop	{r4, r5, pc}
 800e234:	40021000 	.word	0x40021000
 800e238:	200066c8 	.word	0x200066c8
 800e23c:	40014000 	.word	0x40014000
 800e240:	0000ffff 	.word	0x0000ffff

0800e244 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e244:	b510      	push	{r4, lr}
 800e246:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e248:	f002 f920 	bl	801048c <vPortEnterCritical>
	
	if (Delay)
 800e24c:	2c00      	cmp	r4, #0
 800e24e:	d006      	beq.n	800e25e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e250:	4b04      	ldr	r3, [pc, #16]	; (800e264 <StartMicroDelay+0x20>)
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e256:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e258:	1a5b      	subs	r3, r3, r1
 800e25a:	42a3      	cmp	r3, r4
 800e25c:	d9fb      	bls.n	800e256 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e25e:	f002 f921 	bl	80104a4 <vPortExitCritical>
}
 800e262:	bd10      	pop	{r4, pc}
 800e264:	20006704 	.word	0x20006704

0800e268 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e268:	b510      	push	{r4, lr}
 800e26a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e26c:	f002 f90e 	bl	801048c <vPortEnterCritical>
	
	if (Delay)
 800e270:	2c00      	cmp	r4, #0
 800e272:	d006      	beq.n	800e282 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e274:	4b04      	ldr	r3, [pc, #16]	; (800e288 <StartMilliDelay+0x20>)
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e27a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e27c:	1a5b      	subs	r3, r3, r1
 800e27e:	42a3      	cmp	r3, r4
 800e280:	d9fb      	bls.n	800e27a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e282:	f002 f90f 	bl	80104a4 <vPortExitCritical>
}
 800e286:	bd10      	pop	{r4, pc}
 800e288:	200066c8 	.word	0x200066c8

0800e28c <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800e28c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800e28e:	4809      	ldr	r0, [pc, #36]	; (800e2b4 <MX_USART1_UART_Init+0x28>)
 800e290:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <MX_USART1_UART_Init+0x2c>)
 800e292:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e294:	23e1      	movs	r3, #225	; 0xe1
 800e296:	031b      	lsls	r3, r3, #12
 800e298:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e29a:	2300      	movs	r3, #0
 800e29c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e29e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e2a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e2a2:	220c      	movs	r2, #12
 800e2a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e2a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e2a8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e2aa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e2ac:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e2ae:	f005 faf3 	bl	8013898 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e2b2:	bd10      	pop	{r4, pc}
 800e2b4:	20006414 	.word	0x20006414
 800e2b8:	40013800 	.word	0x40013800

0800e2bc <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e2bc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e2be:	4809      	ldr	r0, [pc, #36]	; (800e2e4 <MX_USART2_UART_Init+0x28>)
 800e2c0:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <MX_USART2_UART_Init+0x2c>)
 800e2c2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e2c4:	23e1      	movs	r3, #225	; 0xe1
 800e2c6:	031b      	lsls	r3, r3, #12
 800e2c8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e2ce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e2d0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e2d2:	220c      	movs	r2, #12
 800e2d4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e2d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e2d8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e2da:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e2dc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e2de:	f005 fadb 	bl	8013898 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800e2e2:	bd10      	pop	{r4, pc}
 800e2e4:	20006584 	.word	0x20006584
 800e2e8:	40004400 	.word	0x40004400

0800e2ec <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e2ec:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e2ee:	4809      	ldr	r0, [pc, #36]	; (800e314 <MX_USART3_UART_Init+0x28>)
 800e2f0:	4b09      	ldr	r3, [pc, #36]	; (800e318 <MX_USART3_UART_Init+0x2c>)
 800e2f2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e2f4:	23e1      	movs	r3, #225	; 0xe1
 800e2f6:	031b      	lsls	r3, r3, #12
 800e2f8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e2fe:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e300:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e302:	220c      	movs	r2, #12
 800e304:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e306:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e308:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e30a:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e30c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e30e:	f005 fac3 	bl	8013898 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e312:	bd10      	pop	{r4, pc}
 800e314:	20006364 	.word	0x20006364
 800e318:	40004800 	.word	0x40004800

0800e31c <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800e31c:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800e31e:	4809      	ldr	r0, [pc, #36]	; (800e344 <MX_USART4_UART_Init+0x28>)
 800e320:	4b09      	ldr	r3, [pc, #36]	; (800e348 <MX_USART4_UART_Init+0x2c>)
 800e322:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e324:	23e1      	movs	r3, #225	; 0xe1
 800e326:	031b      	lsls	r3, r3, #12
 800e328:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e32a:	2300      	movs	r3, #0
 800e32c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e32e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e330:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e332:	220c      	movs	r2, #12
 800e334:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e336:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e338:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e33a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e33c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e33e:	f005 faab 	bl	8013898 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e342:	bd10      	pop	{r4, pc}
 800e344:	20006510 	.word	0x20006510
 800e348:	40004c00 	.word	0x40004c00

0800e34c <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e34c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e34e:	4809      	ldr	r0, [pc, #36]	; (800e374 <MX_USART6_UART_Init+0x28>)
 800e350:	4b09      	ldr	r3, [pc, #36]	; (800e378 <MX_USART6_UART_Init+0x2c>)
 800e352:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e354:	23e1      	movs	r3, #225	; 0xe1
 800e356:	031b      	lsls	r3, r3, #12
 800e358:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e35a:	2300      	movs	r3, #0
 800e35c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e35e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e360:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e362:	220c      	movs	r2, #12
 800e364:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e366:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e368:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e36a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e36c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e36e:	f005 fa93 	bl	8013898 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e372:	bd10      	pop	{r4, pc}
 800e374:	20006498 	.word	0x20006498
 800e378:	40011400 	.word	0x40011400

0800e37c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e37e:	46ce      	mov	lr, r9
 800e380:	4647      	mov	r7, r8
 800e382:	b580      	push	{r7, lr}
 800e384:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART2)
 800e386:	6803      	ldr	r3, [r0, #0]
 800e388:	4a4c      	ldr	r2, [pc, #304]	; (800e4bc <HAL_UART_MspInit+0x140>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d00a      	beq.n	800e3a4 <HAL_UART_MspInit+0x28>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e38e:	4a4c      	ldr	r2, [pc, #304]	; (800e4c0 <HAL_UART_MspInit+0x144>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d033      	beq.n	800e3fc <HAL_UART_MspInit+0x80>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e394:	4a4b      	ldr	r2, [pc, #300]	; (800e4c4 <HAL_UART_MspInit+0x148>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d060      	beq.n	800e45c <HAL_UART_MspInit+0xe0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e39a:	b009      	add	sp, #36	; 0x24
 800e39c:	bcc0      	pop	{r6, r7}
 800e39e:	46b9      	mov	r9, r7
 800e3a0:	46b0      	mov	r8, r6
 800e3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800e3a4:	4a48      	ldr	r2, [pc, #288]	; (800e4c8 <HAL_UART_MspInit+0x14c>)
 800e3a6:	69d1      	ldr	r1, [r2, #28]
 800e3a8:	2080      	movs	r0, #128	; 0x80
 800e3aa:	0280      	lsls	r0, r0, #10
 800e3ac:	4301      	orrs	r1, r0
 800e3ae:	61d1      	str	r1, [r2, #28]
 800e3b0:	69d3      	ldr	r3, [r2, #28]
 800e3b2:	4003      	ands	r3, r0
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e3b8:	2304      	movs	r3, #4
 800e3ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3bc:	2702      	movs	r7, #2
 800e3be:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e3c0:	2401      	movs	r4, #1
 800e3c2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e3c4:	2603      	movs	r6, #3
 800e3c6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e3c8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e3ca:	2590      	movs	r5, #144	; 0x90
 800e3cc:	05ed      	lsls	r5, r5, #23
 800e3ce:	a903      	add	r1, sp, #12
 800e3d0:	0028      	movs	r0, r5
 800e3d2:	f003 fcb3 	bl	8011d3c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e3d6:	2308      	movs	r3, #8
 800e3d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3da:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e3dc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e3de:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;
 800e3e0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e3e2:	a903      	add	r1, sp, #12
 800e3e4:	0028      	movs	r0, r5
 800e3e6:	f003 fca9 	bl	8011d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	2101      	movs	r1, #1
 800e3ee:	201c      	movs	r0, #28
 800e3f0:	f002 fcce 	bl	8010d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e3f4:	201c      	movs	r0, #28
 800e3f6:	f002 fcfd 	bl	8010df4 <HAL_NVIC_EnableIRQ>
 800e3fa:	e7ce      	b.n	800e39a <HAL_UART_MspInit+0x1e>
    __USART3_CLK_ENABLE();
 800e3fc:	4a32      	ldr	r2, [pc, #200]	; (800e4c8 <HAL_UART_MspInit+0x14c>)
 800e3fe:	69d1      	ldr	r1, [r2, #28]
 800e400:	2080      	movs	r0, #128	; 0x80
 800e402:	02c0      	lsls	r0, r0, #11
 800e404:	4301      	orrs	r1, r0
 800e406:	61d1      	str	r1, [r2, #28]
 800e408:	69d3      	ldr	r3, [r2, #28]
 800e40a:	4003      	ands	r3, r0
 800e40c:	9301      	str	r3, [sp, #4]
 800e40e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e410:	2380      	movs	r3, #128	; 0x80
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e416:	2302      	movs	r3, #2
 800e418:	4698      	mov	r8, r3
 800e41a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e41c:	2701      	movs	r7, #1
 800e41e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e420:	2603      	movs	r6, #3
 800e422:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e424:	2504      	movs	r5, #4
 800e426:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e428:	4c28      	ldr	r4, [pc, #160]	; (800e4cc <HAL_UART_MspInit+0x150>)
 800e42a:	a903      	add	r1, sp, #12
 800e42c:	0020      	movs	r0, r4
 800e42e:	f003 fc85 	bl	8011d3c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e432:	2380      	movs	r3, #128	; 0x80
 800e434:	011b      	lsls	r3, r3, #4
 800e436:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e438:	4643      	mov	r3, r8
 800e43a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e43c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e43e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;
 800e440:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e442:	a903      	add	r1, sp, #12
 800e444:	0020      	movs	r0, r4
 800e446:	f003 fc79 	bl	8011d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e44a:	2200      	movs	r2, #0
 800e44c:	2101      	movs	r1, #1
 800e44e:	201d      	movs	r0, #29
 800e450:	f002 fc9e 	bl	8010d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e454:	201d      	movs	r0, #29
 800e456:	f002 fccd 	bl	8010df4 <HAL_NVIC_EnableIRQ>
 800e45a:	e79e      	b.n	800e39a <HAL_UART_MspInit+0x1e>
    __USART6_CLK_ENABLE();
 800e45c:	4b1a      	ldr	r3, [pc, #104]	; (800e4c8 <HAL_UART_MspInit+0x14c>)
 800e45e:	699a      	ldr	r2, [r3, #24]
 800e460:	2420      	movs	r4, #32
 800e462:	4322      	orrs	r2, r4
 800e464:	619a      	str	r2, [r3, #24]
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	4023      	ands	r3, r4
 800e46a:	9302      	str	r3, [sp, #8]
 800e46c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e46e:	2310      	movs	r3, #16
 800e470:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e472:	3b0e      	subs	r3, #14
 800e474:	4699      	mov	r9, r3
 800e476:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e478:	3b01      	subs	r3, #1
 800e47a:	4698      	mov	r8, r3
 800e47c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e47e:	2703      	movs	r7, #3
 800e480:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e482:	2605      	movs	r6, #5
 800e484:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e486:	2590      	movs	r5, #144	; 0x90
 800e488:	05ed      	lsls	r5, r5, #23
 800e48a:	a903      	add	r1, sp, #12
 800e48c:	0028      	movs	r0, r5
 800e48e:	f003 fc55 	bl	8011d3c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e492:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e494:	464b      	mov	r3, r9
 800e496:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e498:	4643      	mov	r3, r8
 800e49a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e49c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;
 800e49e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e4a0:	a903      	add	r1, sp, #12
 800e4a2:	0028      	movs	r0, r5
 800e4a4:	f003 fc4a 	bl	8011d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	2101      	movs	r1, #1
 800e4ac:	201d      	movs	r0, #29
 800e4ae:	f002 fc6f 	bl	8010d90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e4b2:	201d      	movs	r0, #29
 800e4b4:	f002 fc9e 	bl	8010df4 <HAL_NVIC_EnableIRQ>
}
 800e4b8:	e76f      	b.n	800e39a <HAL_UART_MspInit+0x1e>
 800e4ba:	46c0      	nop			; (mov r8, r8)
 800e4bc:	40004400 	.word	0x40004400
 800e4c0:	40004800 	.word	0x40004800
 800e4c4:	40011400 	.word	0x40011400
 800e4c8:	40021000 	.word	0x40021000
 800e4cc:	48000400 	.word	0x48000400

0800e4d0 <GetUart>:
}

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
 800e4d0:	0003      	movs	r3, r0
	switch (port)
 800e4d2:	2802      	cmp	r0, #2
 800e4d4:	d007      	beq.n	800e4e6 <GetUart+0x16>
 800e4d6:	2803      	cmp	r0, #3
 800e4d8:	d007      	beq.n	800e4ea <GetUart+0x1a>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e4da:	2000      	movs	r0, #0
	switch (port)
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d000      	beq.n	800e4e2 <GetUart+0x12>
	}		
}
 800e4e0:	4770      	bx	lr
			return P1uart;	
 800e4e2:	4803      	ldr	r0, [pc, #12]	; (800e4f0 <GetUart+0x20>)
 800e4e4:	e7fc      	b.n	800e4e0 <GetUart+0x10>
	switch (port)
 800e4e6:	4803      	ldr	r0, [pc, #12]	; (800e4f4 <GetUart+0x24>)
 800e4e8:	e7fa      	b.n	800e4e0 <GetUart+0x10>
			return P3uart;
 800e4ea:	4803      	ldr	r0, [pc, #12]	; (800e4f8 <GetUart+0x28>)
 800e4ec:	e7f8      	b.n	800e4e0 <GetUart+0x10>
 800e4ee:	46c0      	nop			; (mov r8, r8)
 800e4f0:	20006584 	.word	0x20006584
 800e4f4:	20006498 	.word	0x20006498
 800e4f8:	20006364 	.word	0x20006364

0800e4fc <writePxMutex>:
{
 800e4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4fe:	46ce      	mov	lr, r9
 800e500:	b500      	push	{lr}
 800e502:	b082      	sub	sp, #8
 800e504:	0006      	movs	r6, r0
 800e506:	000f      	movs	r7, r1
 800e508:	4691      	mov	r9, r2
 800e50a:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e50c:	f7ff ffe0 	bl	800e4d0 <GetUart>
 800e510:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e512:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800e514:	2800      	cmp	r0, #0
 800e516:	d016      	beq.n	800e546 <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e518:	00b3      	lsls	r3, r6, #2
 800e51a:	4a0d      	ldr	r2, [pc, #52]	; (800e550 <writePxMutex+0x54>)
 800e51c:	5898      	ldr	r0, [r3, r2]
 800e51e:	9901      	ldr	r1, [sp, #4]
 800e520:	f000 f9b2 	bl	800e888 <osSemaphoreWait>
 800e524:	2800      	cmp	r0, #0
 800e526:	d10e      	bne.n	800e546 <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e528:	9b08      	ldr	r3, [sp, #32]
 800e52a:	464a      	mov	r2, r9
 800e52c:	0039      	movs	r1, r7
 800e52e:	0028      	movs	r0, r5
 800e530:	f005 f906 	bl	8013740 <HAL_UART_Transmit>
 800e534:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e536:	d001      	beq.n	800e53c <writePxMutex+0x40>
 800e538:	2803      	cmp	r0, #3
 800e53a:	d1f5      	bne.n	800e528 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e53c:	00b6      	lsls	r6, r6, #2
 800e53e:	4b04      	ldr	r3, [pc, #16]	; (800e550 <writePxMutex+0x54>)
 800e540:	58f0      	ldr	r0, [r6, r3]
 800e542:	f000 f9cf 	bl	800e8e4 <osSemaphoreRelease>
}
 800e546:	0020      	movs	r0, r4
 800e548:	b002      	add	sp, #8
 800e54a:	bc80      	pop	{r7}
 800e54c:	46b9      	mov	r9, r7
 800e54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e550:	200062fc 	.word	0x200062fc

0800e554 <writePxITMutex>:
{
 800e554:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e556:	b083      	sub	sp, #12
 800e558:	0004      	movs	r4, r0
 800e55a:	9101      	str	r1, [sp, #4]
 800e55c:	0017      	movs	r7, r2
 800e55e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e560:	f7ff ffb6 	bl	800e4d0 <GetUart>
 800e564:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e566:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800e568:	2e00      	cmp	r6, #0
 800e56a:	d009      	beq.n	800e580 <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e56c:	00a4      	lsls	r4, r4, #2
 800e56e:	4b08      	ldr	r3, [pc, #32]	; (800e590 <writePxITMutex+0x3c>)
 800e570:	58e0      	ldr	r0, [r4, r3]
 800e572:	0029      	movs	r1, r5
 800e574:	f000 f988 	bl	800e888 <osSemaphoreWait>
 800e578:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e57a:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <writePxITMutex+0x30>
}
 800e580:	b003      	add	sp, #12
 800e582:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e584:	003a      	movs	r2, r7
 800e586:	9901      	ldr	r1, [sp, #4]
 800e588:	0030      	movs	r0, r6
 800e58a:	f004 fd44 	bl	8013016 <HAL_UART_Transmit_IT>
 800e58e:	e7f7      	b.n	800e580 <writePxITMutex+0x2c>
 800e590:	200062fc 	.word	0x200062fc

0800e594 <writePxDMAMutex>:
{
 800e594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e596:	b083      	sub	sp, #12
 800e598:	0004      	movs	r4, r0
 800e59a:	9101      	str	r1, [sp, #4]
 800e59c:	0017      	movs	r7, r2
 800e59e:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e5a0:	f7ff ff96 	bl	800e4d0 <GetUart>
 800e5a4:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e5a6:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800e5a8:	2e00      	cmp	r6, #0
 800e5aa:	d009      	beq.n	800e5c0 <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e5ac:	00a4      	lsls	r4, r4, #2
 800e5ae:	4b0a      	ldr	r3, [pc, #40]	; (800e5d8 <writePxDMAMutex+0x44>)
 800e5b0:	58e0      	ldr	r0, [r4, r3]
 800e5b2:	0029      	movs	r1, r5
 800e5b4:	f000 f968 	bl	800e888 <osSemaphoreWait>
 800e5b8:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e5ba:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <writePxDMAMutex+0x30>
}
 800e5c0:	b003      	add	sp, #12
 800e5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e5c4:	0030      	movs	r0, r6
 800e5c6:	f7fd fe83 	bl	800c2d0 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e5ca:	003a      	movs	r2, r7
 800e5cc:	9901      	ldr	r1, [sp, #4]
 800e5ce:	0030      	movs	r0, r6
 800e5d0:	f004 fdd0 	bl	8013174 <HAL_UART_Transmit_DMA>
 800e5d4:	e7f4      	b.n	800e5c0 <writePxDMAMutex+0x2c>
 800e5d6:	46c0      	nop			; (mov r8, r8)
 800e5d8:	200062fc 	.word	0x200062fc

0800e5dc <UpdateBaudrate>:
{
 800e5dc:	b510      	push	{r4, lr}
 800e5de:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e5e0:	f7ff ff76 	bl	800e4d0 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e5e4:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e5e6:	f005 f957 	bl	8013898 <HAL_UART_Init>
}
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	bd10      	pop	{r4, pc}
	...

0800e5f0 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e5f0:	b570      	push	{r4, r5, r6, lr}
 800e5f2:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e5f4:	d003      	beq.n	800e5fe <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e5f6:	2901      	cmp	r1, #1
 800e5f8:	d002      	beq.n	800e600 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e5fa:	2900      	cmp	r1, #0
 800e5fc:	d016      	beq.n	800e62c <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e5fe:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e600:	f7fc f898 	bl	800a734 <GetPort>
 800e604:	4b14      	ldr	r3, [pc, #80]	; (800e658 <SwapUartPins+0x68>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	3b01      	subs	r3, #1
 800e60a:	4d14      	ldr	r5, [pc, #80]	; (800e65c <SwapUartPins+0x6c>)
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	3801      	subs	r0, #1
 800e610:	2180      	movs	r1, #128	; 0x80
 800e612:	0209      	lsls	r1, r1, #8
 800e614:	000a      	movs	r2, r1
 800e616:	4102      	asrs	r2, r0
 800e618:	5b58      	ldrh	r0, [r3, r5]
 800e61a:	4302      	orrs	r2, r0
 800e61c:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e61e:	2308      	movs	r3, #8
 800e620:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e622:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e624:	0020      	movs	r0, r4
 800e626:	f005 f937 	bl	8013898 <HAL_UART_Init>
 800e62a:	e7e8      	b.n	800e5fe <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e62c:	f7fc f882 	bl	800a734 <GetPort>
 800e630:	4b09      	ldr	r3, [pc, #36]	; (800e658 <SwapUartPins+0x68>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	3b01      	subs	r3, #1
 800e636:	4d09      	ldr	r5, [pc, #36]	; (800e65c <SwapUartPins+0x6c>)
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	3801      	subs	r0, #1
 800e63c:	2180      	movs	r1, #128	; 0x80
 800e63e:	0209      	lsls	r1, r1, #8
 800e640:	4101      	asrs	r1, r0
 800e642:	5b5a      	ldrh	r2, [r3, r5]
 800e644:	438a      	bics	r2, r1
 800e646:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e648:	2308      	movs	r3, #8
 800e64a:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e64c:	2300      	movs	r3, #0
 800e64e:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e650:	0020      	movs	r0, r4
 800e652:	f005 f921 	bl	8013898 <HAL_UART_Init>
}
 800e656:	e7d2      	b.n	800e5fe <SwapUartPins+0xe>
 800e658:	2000080e 	.word	0x2000080e
 800e65c:	20006740 	.word	0x20006740

0800e660 <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800e660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e662:	46c6      	mov	lr, r8
 800e664:	b500      	push	{lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800e666:	4b12      	ldr	r3, [pc, #72]	; (800e6b0 <ReadPortsDir+0x50>)
 800e668:	781f      	ldrb	r7, [r3, #0]
 800e66a:	2f00      	cmp	r7, #0
 800e66c:	d01c      	beq.n	800e6a8 <ReadPortsDir+0x48>
 800e66e:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800e670:	2700      	movs	r7, #0
		if (i != myID) {
 800e672:	4e10      	ldr	r6, [pc, #64]	; (800e6b4 <ReadPortsDir+0x54>)
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800e674:	4b10      	ldr	r3, [pc, #64]	; (800e6b8 <ReadPortsDir+0x58>)
 800e676:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= N; i++) {
 800e678:	4d0d      	ldr	r5, [pc, #52]	; (800e6b0 <ReadPortsDir+0x50>)
 800e67a:	e004      	b.n	800e686 <ReadPortsDir+0x26>
 800e67c:	3401      	adds	r4, #1
 800e67e:	b2e4      	uxtb	r4, r4
 800e680:	782b      	ldrb	r3, [r5, #0]
 800e682:	42a3      	cmp	r3, r4
 800e684:	d310      	bcc.n	800e6a8 <ReadPortsDir+0x48>
		if (i != myID) {
 800e686:	7833      	ldrb	r3, [r6, #0]
 800e688:	42a3      	cmp	r3, r4
 800e68a:	d0f7      	beq.n	800e67c <ReadPortsDir+0x1c>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800e68c:	2200      	movs	r2, #0
 800e68e:	2113      	movs	r1, #19
 800e690:	0020      	movs	r0, r4
 800e692:	f7f9 fe77 	bl	8008384 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800e696:	2032      	movs	r0, #50	; 0x32
 800e698:	f7ff fde6 	bl	800e268 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800e69c:	4643      	mov	r3, r8
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0eb      	beq.n	800e67c <ReadPortsDir+0x1c>
				result = BOS_ERR_NoResponse;
 800e6a4:	2702      	movs	r7, #2
 800e6a6:	e7e9      	b.n	800e67c <ReadPortsDir+0x1c>
			}
		}
	}

	return result;
}
 800e6a8:	0038      	movs	r0, r7
 800e6aa:	bc80      	pop	{r7}
 800e6ac:	46b8      	mov	r8, r7
 800e6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6b0:	20000030 	.word	0x20000030
 800e6b4:	2000080e 	.word	0x2000080e
 800e6b8:	20000890 	.word	0x20000890

0800e6bc <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800e6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6be:	46c6      	mov	lr, r8
 800e6c0:	b500      	push	{lr}
 800e6c2:	4680      	mov	r8, r0
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800e6c4:	2401      	movs	r4, #1
	uint16_t temp =0;
 800e6c6:	2600      	movs	r6, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e6c8:	2780      	movs	r7, #128	; 0x80
 800e6ca:	023f      	lsls	r7, r7, #8
 800e6cc:	e002      	b.n	800e6d4 <ReadPortsDirMSG+0x18>
	for (int p = 1; p <= NumOfPorts; p++) {
 800e6ce:	3401      	adds	r4, #1
 800e6d0:	2c04      	cmp	r4, #4
 800e6d2:	d00b      	beq.n	800e6ec <ReadPortsDirMSG+0x30>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e6d4:	b2e5      	uxtb	r5, r4
 800e6d6:	0028      	movs	r0, r5
 800e6d8:	f7ff fefa 	bl	800e4d0 <GetUart>
 800e6dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6de:	42bb      	cmp	r3, r7
 800e6e0:	d1f5      	bne.n	800e6ce <ReadPortsDirMSG+0x12>
			messageParams[temp++] = p;
 800e6e2:	1c73      	adds	r3, r6, #1
 800e6e4:	4a06      	ldr	r2, [pc, #24]	; (800e700 <ReadPortsDirMSG+0x44>)
 800e6e6:	5595      	strb	r5, [r2, r6]
 800e6e8:	b29e      	uxth	r6, r3
 800e6ea:	e7f0      	b.n	800e6ce <ReadPortsDirMSG+0x12>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800e6ec:	0032      	movs	r2, r6
 800e6ee:	2114      	movs	r1, #20
 800e6f0:	4640      	mov	r0, r8
 800e6f2:	f7f9 fe47 	bl	8008384 <SendMessageToModule>
	return result;
}
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	bc80      	pop	{r7}
 800e6fa:	46b8      	mov	r8, r7
 800e6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6fe:	46c0      	nop			; (mov r8, r8)
 800e700:	200006d0 	.word	0x200006d0

0800e704 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800e704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e706:	2400      	movs	r4, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e708:	4f0f      	ldr	r7, [pc, #60]	; (800e748 <UpdateMyPortsDir+0x44>)
 800e70a:	4e10      	ldr	r6, [pc, #64]	; (800e74c <UpdateMyPortsDir+0x48>)
 800e70c:	2580      	movs	r5, #128	; 0x80
 800e70e:	022d      	lsls	r5, r5, #8
 800e710:	e007      	b.n	800e722 <UpdateMyPortsDir+0x1e>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800e712:	f7ff fedd 	bl	800e4d0 <GetUart>
 800e716:	2101      	movs	r1, #1
 800e718:	f7ff ff6a 	bl	800e5f0 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e71c:	3401      	adds	r4, #1
 800e71e:	2c03      	cmp	r4, #3
 800e720:	d00f      	beq.n	800e742 <UpdateMyPortsDir+0x3e>
 800e722:	1c60      	adds	r0, r4, #1
 800e724:	b2c0      	uxtb	r0, r0
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e726:	7833      	ldrb	r3, [r6, #0]
 800e728:	3b01      	subs	r3, #1
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	5bdb      	ldrh	r3, [r3, r7]
 800e72e:	002a      	movs	r2, r5
 800e730:	4122      	asrs	r2, r4
 800e732:	421a      	tst	r2, r3
 800e734:	d1ed      	bne.n	800e712 <UpdateMyPortsDir+0xe>
			SwapUartPins(GetUart(p), NORMAL);
 800e736:	f7ff fecb 	bl	800e4d0 <GetUart>
 800e73a:	2100      	movs	r1, #0
 800e73c:	f7ff ff58 	bl	800e5f0 <SwapUartPins>
 800e740:	e7ec      	b.n	800e71c <UpdateMyPortsDir+0x18>
		}
	}

	return result;
}
 800e742:	2000      	movs	r0, #0
 800e744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e746:	46c0      	nop			; (mov r8, r8)
 800e748:	20006740 	.word	0x20006740
 800e74c:	2000080e 	.word	0x2000080e

0800e750 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e750:	4816      	ldr	r0, [pc, #88]	; (800e7ac <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e754:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e756:	e003      	b.n	800e760 <LoopCopyDataInit>

0800e758 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e758:	4b15      	ldr	r3, [pc, #84]	; (800e7b0 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e75a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e75c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e75e:	3104      	adds	r1, #4

0800e760 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e760:	4814      	ldr	r0, [pc, #80]	; (800e7b4 <LoopForever+0xc>)
  ldr r3, =_edata
 800e762:	4b15      	ldr	r3, [pc, #84]	; (800e7b8 <LoopForever+0x10>)
  adds r2, r0, r1
 800e764:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e766:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e768:	d3f6      	bcc.n	800e758 <CopyDataInit>
  ldr r2, =_sbss
 800e76a:	4a14      	ldr	r2, [pc, #80]	; (800e7bc <LoopForever+0x14>)
  b LoopFillZerobss
 800e76c:	e002      	b.n	800e774 <LoopFillZerobss>

0800e76e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e76e:	2300      	movs	r3, #0
  str  r3, [r2]
 800e770:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e772:	3204      	adds	r2, #4

0800e774 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e774:	4b12      	ldr	r3, [pc, #72]	; (800e7c0 <LoopForever+0x18>)
  cmp r2, r3
 800e776:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e778:	d3f9      	bcc.n	800e76e <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e77a:	4812      	ldr	r0, [pc, #72]	; (800e7c4 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e77c:	4912      	ldr	r1, [pc, #72]	; (800e7c8 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e77e:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e780:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e782:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e784:	d005      	beq.n	800e792 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e786:	f000 f82b 	bl	800e7e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e78a:	f005 f9f3 	bl	8013b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e78e:	f005 f9da 	bl	8013b46 <main>

0800e792 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e792:	480e      	ldr	r0, [pc, #56]	; (800e7cc <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e794:	490e      	ldr	r1, [pc, #56]	; (800e7d0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e796:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e798:	480e      	ldr	r0, [pc, #56]	; (800e7d4 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e79a:	490d      	ldr	r1, [pc, #52]	; (800e7d0 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e79c:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e79e:	480e      	ldr	r0, [pc, #56]	; (800e7d8 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e7a0:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e7a2:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e7a4:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e7a6:	4700      	bx	r0

0800e7a8 <LoopForever>:


LoopForever:
    b LoopForever
 800e7a8:	e7fe      	b.n	800e7a8 <LoopForever>
 800e7aa:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e7ac:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e7b0:	0801ba84 	.word	0x0801ba84
  ldr r0, =_sdata
 800e7b4:	2000000c 	.word	0x2000000c
  ldr r3, =_edata
 800e7b8:	20000294 	.word	0x20000294
  ldr r2, =_sbss
 800e7bc:	20000298 	.word	0x20000298
  ldr r3, = _ebss
 800e7c0:	200067e8 	.word	0x200067e8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e7c4:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e7c8:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e7cc:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e7d0:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e7d4:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e7d8:	1fffd800 	.word	0x1fffd800

0800e7dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e7dc:	e7fe      	b.n	800e7dc <ADC1_COMP_IRQHandler>
	...

0800e7e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e7e0:	4b11      	ldr	r3, [pc, #68]	; (800e828 <SystemInit+0x48>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	430a      	orrs	r2, r1
 800e7e8:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e7ea:	685a      	ldr	r2, [r3, #4]
 800e7ec:	480f      	ldr	r0, [pc, #60]	; (800e82c <SystemInit+0x4c>)
 800e7ee:	4002      	ands	r2, r0
 800e7f0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	480e      	ldr	r0, [pc, #56]	; (800e830 <SystemInit+0x50>)
 800e7f6:	4002      	ands	r2, r0
 800e7f8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	480d      	ldr	r0, [pc, #52]	; (800e834 <SystemInit+0x54>)
 800e7fe:	4002      	ands	r2, r0
 800e800:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	480c      	ldr	r0, [pc, #48]	; (800e838 <SystemInit+0x58>)
 800e806:	4002      	ands	r2, r0
 800e808:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e80c:	200f      	movs	r0, #15
 800e80e:	4382      	bics	r2, r0
 800e810:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e814:	4809      	ldr	r0, [pc, #36]	; (800e83c <SystemInit+0x5c>)
 800e816:	4002      	ands	r2, r0
 800e818:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e81a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e81c:	438a      	bics	r2, r1
 800e81e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e820:	2200      	movs	r2, #0
 800e822:	609a      	str	r2, [r3, #8]

}
 800e824:	4770      	bx	lr
 800e826:	46c0      	nop			; (mov r8, r8)
 800e828:	40021000 	.word	0x40021000
 800e82c:	08ffb80c 	.word	0x08ffb80c
 800e830:	fef6ffff 	.word	0xfef6ffff
 800e834:	fffbffff 	.word	0xfffbffff
 800e838:	ffc0ffff 	.word	0xffc0ffff
 800e83c:	fff0feac 	.word	0xfff0feac

0800e840 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e840:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e842:	f000 feeb 	bl	800f61c <vTaskStartScheduler>
  
  return osOK;
}
 800e846:	2000      	movs	r0, #0
 800e848:	bd10      	pop	{r4, pc}

0800e84a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e84a:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d100      	bne.n	800e852 <osDelay+0x8>
 800e850:	3001      	adds	r0, #1
 800e852:	f001 f82b 	bl	800f8ac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e856:	2000      	movs	r0, #0
 800e858:	bd10      	pop	{r4, pc}

0800e85a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e85a:	b510      	push	{r4, lr}
 800e85c:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e85e:	2901      	cmp	r1, #1
 800e860:	d005      	beq.n	800e86e <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e862:	2100      	movs	r1, #0
 800e864:	f000 faf7 	bl	800ee56 <xQueueCreateCountingSemaphore>
 800e868:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e86a:	0020      	movs	r0, r4
 800e86c:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e86e:	2203      	movs	r2, #3
 800e870:	2100      	movs	r1, #0
 800e872:	f000 fad2 	bl	800ee1a <xQueueGenericCreate>
 800e876:	1e04      	subs	r4, r0, #0
 800e878:	d0f7      	beq.n	800e86a <osSemaphoreCreate+0x10>
 800e87a:	2300      	movs	r3, #0
 800e87c:	2200      	movs	r2, #0
 800e87e:	2100      	movs	r1, #0
 800e880:	f000 faf3 	bl	800ee6a <xQueueGenericSend>
 800e884:	e7f1      	b.n	800e86a <osSemaphoreCreate+0x10>
	...

0800e888 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e888:	b500      	push	{lr}
 800e88a:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e88c:	2300      	movs	r3, #0
 800e88e:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e890:	2800      	cmp	r0, #0
 800e892:	d020      	beq.n	800e8d6 <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e894:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00e      	beq.n	800e8ba <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e89c:	aa01      	add	r2, sp, #4
 800e89e:	2100      	movs	r1, #0
 800e8a0:	f000 fc4f 	bl	800f142 <xQueueReceiveFromISR>
 800e8a4:	2801      	cmp	r0, #1
 800e8a6:	d118      	bne.n	800e8da <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e8a8:	9801      	ldr	r0, [sp, #4]
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d011      	beq.n	800e8d2 <osSemaphoreWait+0x4a>
 800e8ae:	4b0c      	ldr	r3, [pc, #48]	; (800e8e0 <osSemaphoreWait+0x58>)
 800e8b0:	2280      	movs	r2, #128	; 0x80
 800e8b2:	0552      	lsls	r2, r2, #21
 800e8b4:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	e00b      	b.n	800e8d2 <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	000a      	movs	r2, r1
 800e8be:	2100      	movs	r1, #0
 800e8c0:	f000 fbaf 	bl	800f022 <xQueueGenericReceive>
    return osErrorOS;
 800e8c4:	3801      	subs	r0, #1
 800e8c6:	4243      	negs	r3, r0
 800e8c8:	4158      	adcs	r0, r3
 800e8ca:	4240      	negs	r0, r0
 800e8cc:	23fe      	movs	r3, #254	; 0xfe
 800e8ce:	4398      	bics	r0, r3
 800e8d0:	30ff      	adds	r0, #255	; 0xff
}
 800e8d2:	b003      	add	sp, #12
 800e8d4:	bd00      	pop	{pc}
    return osErrorParameter;
 800e8d6:	2080      	movs	r0, #128	; 0x80
 800e8d8:	e7fb      	b.n	800e8d2 <osSemaphoreWait+0x4a>
      return osErrorOS;
 800e8da:	20ff      	movs	r0, #255	; 0xff
 800e8dc:	e7f9      	b.n	800e8d2 <osSemaphoreWait+0x4a>
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	e000ed04 	.word	0xe000ed04

0800e8e4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e8e4:	b510      	push	{r4, lr}
 800e8e6:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	9301      	str	r3, [sp, #4]
 800e8ec:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800e8f0:	2c00      	cmp	r4, #0
 800e8f2:	d00d      	beq.n	800e910 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e8f4:	a901      	add	r1, sp, #4
 800e8f6:	f000 fb69 	bl	800efcc <xQueueGiveFromISR>
 800e8fa:	2801      	cmp	r0, #1
 800e8fc:	d113      	bne.n	800e926 <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e8fe:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e900:	9b01      	ldr	r3, [sp, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00c      	beq.n	800e920 <osSemaphoreRelease+0x3c>
 800e906:	4b09      	ldr	r3, [pc, #36]	; (800e92c <osSemaphoreRelease+0x48>)
 800e908:	2280      	movs	r2, #128	; 0x80
 800e90a:	0552      	lsls	r2, r2, #21
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	e007      	b.n	800e920 <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e910:	2300      	movs	r3, #0
 800e912:	2200      	movs	r2, #0
 800e914:	2100      	movs	r1, #0
 800e916:	f000 faa8 	bl	800ee6a <xQueueGenericSend>
 800e91a:	2801      	cmp	r0, #1
 800e91c:	d000      	beq.n	800e920 <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800e91e:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800e920:	0020      	movs	r0, r4
 800e922:	b002      	add	sp, #8
 800e924:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800e926:	24ff      	movs	r4, #255	; 0xff
 800e928:	e7fa      	b.n	800e920 <osSemaphoreRelease+0x3c>
 800e92a:	46c0      	nop			; (mov r8, r8)
 800e92c:	e000ed04 	.word	0xe000ed04

0800e930 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e930:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e932:	f001 f989 	bl	800fc48 <xTaskGetSchedulerState>
 800e936:	2801      	cmp	r0, #1
 800e938:	d100      	bne.n	800e93c <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e93a:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e93c:	f001 fde6 	bl	801050c <xPortSysTickHandler>
}
 800e940:	e7fb      	b.n	800e93a <osSystickHandler+0xa>
	...

0800e944 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e944:	b570      	push	{r4, r5, r6, lr}
 800e946:	0005      	movs	r5, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e948:	2008      	movs	r0, #8
 800e94a:	f001 fe1b 	bl	8010584 <pvPortMalloc>
 800e94e:	0004      	movs	r4, r0
portBASE_TYPE xReturn = pdFAIL;
 800e950:	2000      	movs	r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800e952:	2c00      	cmp	r4, #0
 800e954:	d00b      	beq.n	800e96e <FreeRTOS_CLIRegisterCommand+0x2a>
	{
		taskENTER_CRITICAL();
 800e956:	f001 fd99 	bl	801048c <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e95a:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e95c:	2300      	movs	r3, #0
 800e95e:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e960:	4b03      	ldr	r3, [pc, #12]	; (800e970 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e966:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e968:	f001 fd9c 	bl	80104a4 <vPortExitCritical>

		xReturn = pdPASS;
 800e96c:	2001      	movs	r0, #1
	}

	return xReturn;
}
 800e96e:	bd70      	pop	{r4, r5, r6, pc}
 800e970:	200000ac 	.word	0x200000ac

0800e974 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e976:	46de      	mov	lr, fp
 800e978:	4657      	mov	r7, sl
 800e97a:	464e      	mov	r6, r9
 800e97c:	4645      	mov	r5, r8
 800e97e:	b5e0      	push	{r5, r6, r7, lr}
 800e980:	b083      	sub	sp, #12
 800e982:	0006      	movs	r6, r0
 800e984:	4689      	mov	r9, r1
 800e986:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e988:	4b3b      	ldr	r3, [pc, #236]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d012      	beq.n	800e9b6 <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	0032      	movs	r2, r6
 800e996:	9901      	ldr	r1, [sp, #4]
 800e998:	4648      	mov	r0, r9
 800e99a:	4798      	blx	r3
 800e99c:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e99e:	d102      	bne.n	800e9a6 <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800e9a0:	4b35      	ldr	r3, [pc, #212]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e9a6:	0028      	movs	r0, r5
 800e9a8:	b003      	add	sp, #12
 800e9aa:	bcf0      	pop	{r4, r5, r6, r7}
 800e9ac:	46bb      	mov	fp, r7
 800e9ae:	46b2      	mov	sl, r6
 800e9b0:	46a9      	mov	r9, r5
 800e9b2:	46a0      	mov	r8, r4
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e9b6:	4c31      	ldr	r4, [pc, #196]	; (800ea7c <FreeRTOS_CLIProcessCommand+0x108>)
 800e9b8:	4b2f      	ldr	r3, [pc, #188]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800e9ba:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e9bc:	2320      	movs	r3, #32
 800e9be:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e9c0:	4b2d      	ldr	r3, [pc, #180]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800e9c2:	469b      	mov	fp, r3
 800e9c4:	e00a      	b.n	800e9dc <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e9c6:	0029      	movs	r1, r5
 800e9c8:	0030      	movs	r0, r6
 800e9ca:	f005 ff1e 	bl	801480a <strncmp>
 800e9ce:	1e05      	subs	r5, r0, #0
 800e9d0:	d012      	beq.n	800e9f8 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e9d2:	6864      	ldr	r4, [r4, #4]
 800e9d4:	465b      	mov	r3, fp
 800e9d6:	601c      	str	r4, [r3, #0]
 800e9d8:	2c00      	cmp	r4, #0
 800e9da:	d015      	beq.n	800ea08 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e9dc:	6827      	ldr	r7, [r4, #0]
 800e9de:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e9e0:	0028      	movs	r0, r5
 800e9e2:	f7f1 fb99 	bl	8000118 <strlen>
 800e9e6:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e9e8:	5c33      	ldrb	r3, [r6, r0]
 800e9ea:	4651      	mov	r1, sl
 800e9ec:	438b      	bics	r3, r1
 800e9ee:	b259      	sxtb	r1, r3
 800e9f0:	4688      	mov	r8, r1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1ed      	bne.n	800e9d2 <FreeRTOS_CLIProcessCommand+0x5e>
 800e9f6:	e7e6      	b.n	800e9c6 <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e9f8:	7b3f      	ldrb	r7, [r7, #12]
 800e9fa:	b27f      	sxtb	r7, r7
 800e9fc:	2f00      	cmp	r7, #0
 800e9fe:	da0a      	bge.n	800ea16 <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ea00:	4b1d      	ldr	r3, [pc, #116]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d1c3      	bne.n	800e990 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ea08:	9a01      	ldr	r2, [sp, #4]
 800ea0a:	491d      	ldr	r1, [pc, #116]	; (800ea80 <FreeRTOS_CLIProcessCommand+0x10c>)
 800ea0c:	4648      	mov	r0, r9
 800ea0e:	f005 ff0d 	bl	801482c <strncpy>
		xReturn = pdFALSE;
 800ea12:	2500      	movs	r5, #0
	return xReturn;
 800ea14:	e7c7      	b.n	800e9a6 <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ea16:	2300      	movs	r3, #0
 800ea18:	56f3      	ldrsb	r3, [r6, r3]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d02a      	beq.n	800ea74 <FreeRTOS_CLIProcessCommand+0x100>
 800ea1e:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ea20:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ea22:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800ea24:	2001      	movs	r0, #1
 800ea26:	e00b      	b.n	800ea40 <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800ea28:	2a01      	cmp	r2, #1
 800ea2a:	d004      	beq.n	800ea36 <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800ea2c:	4643      	mov	r3, r8
 800ea2e:	3301      	adds	r3, #1
 800ea30:	b25b      	sxtb	r3, r3
 800ea32:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800ea34:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800ea36:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800ea38:	2300      	movs	r3, #0
 800ea3a:	56e3      	ldrsb	r3, [r4, r3]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d003      	beq.n	800ea48 <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800ea40:	2b20      	cmp	r3, #32
 800ea42:	d0f1      	beq.n	800ea28 <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800ea44:	000a      	movs	r2, r1
 800ea46:	e7f6      	b.n	800ea36 <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ea48:	2a01      	cmp	r2, #1
 800ea4a:	d00e      	beq.n	800ea6a <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d0d9      	beq.n	800ea08 <FreeRTOS_CLIProcessCommand+0x94>
 800ea54:	4547      	cmp	r7, r8
 800ea56:	d09b      	beq.n	800e990 <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ea58:	9a01      	ldr	r2, [sp, #4]
 800ea5a:	490a      	ldr	r1, [pc, #40]	; (800ea84 <FreeRTOS_CLIProcessCommand+0x110>)
 800ea5c:	4648      	mov	r0, r9
 800ea5e:	f005 fee5 	bl	801482c <strncpy>
		pxCommand = NULL;
 800ea62:	4b05      	ldr	r3, [pc, #20]	; (800ea78 <FreeRTOS_CLIProcessCommand+0x104>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	601a      	str	r2, [r3, #0]
 800ea68:	e79d      	b.n	800e9a6 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800ea6a:	4643      	mov	r3, r8
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	b25b      	sxtb	r3, r3
 800ea70:	4698      	mov	r8, r3
 800ea72:	e7eb      	b.n	800ea4c <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800ea74:	4698      	mov	r8, r3
 800ea76:	e7e9      	b.n	800ea4c <FreeRTOS_CLIProcessCommand+0xd8>
 800ea78:	20001628 	.word	0x20001628
 800ea7c:	200000b0 	.word	0x200000b0
 800ea80:	0801b36c 	.word	0x0801b36c
 800ea84:	0801b314 	.word	0x0801b314

0800ea88 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ea88:	4800      	ldr	r0, [pc, #0]	; (800ea8c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ea8a:	4770      	bx	lr
 800ea8c:	200013c0 	.word	0x200013c0

0800ea90 <FreeRTOS_CLIGetParameter>:
{
 800ea90:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ea96:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ea98:	e00d      	b.n	800eab6 <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	56c3      	ldrsb	r3, [r0, r3]
 800ea9e:	2b20      	cmp	r3, #32
 800eaa0:	d104      	bne.n	800eaac <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800eaa2:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	56c3      	ldrsb	r3, [r0, r3]
 800eaa8:	2b20      	cmp	r3, #32
 800eaaa:	d0fa      	beq.n	800eaa2 <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d029      	beq.n	800eb04 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800eab0:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800eab2:	42a1      	cmp	r1, r4
 800eab4:	d00f      	beq.n	800ead6 <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800eab6:	428c      	cmp	r4, r1
 800eab8:	d026      	beq.n	800eb08 <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eaba:	2300      	movs	r3, #0
 800eabc:	56c3      	ldrsb	r3, [r0, r3]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d006      	beq.n	800ead0 <FreeRTOS_CLIGetParameter+0x40>
 800eac2:	2b20      	cmp	r3, #32
 800eac4:	d0e9      	beq.n	800ea9a <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800eac6:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eac8:	2300      	movs	r3, #0
 800eaca:	56c3      	ldrsb	r3, [r0, r3]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1f8      	bne.n	800eac2 <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ead0:	2300      	movs	r3, #0
 800ead2:	56c3      	ldrsb	r3, [r0, r3]
 800ead4:	e7ea      	b.n	800eaac <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ead6:	2300      	movs	r3, #0
 800ead8:	56c3      	ldrsb	r3, [r0, r3]
 800eada:	0001      	movs	r1, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d00f      	beq.n	800eb00 <FreeRTOS_CLIGetParameter+0x70>
 800eae0:	2b20      	cmp	r3, #32
 800eae2:	d007      	beq.n	800eaf4 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800eae4:	6813      	ldr	r3, [r2, #0]
 800eae6:	3301      	adds	r3, #1
 800eae8:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800eaea:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eaec:	2300      	movs	r3, #0
 800eaee:	56cb      	ldrsb	r3, [r1, r3]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1f5      	bne.n	800eae0 <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800eaf4:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800eaf6:	1e5a      	subs	r2, r3, #1
 800eaf8:	4193      	sbcs	r3, r2
 800eafa:	425b      	negs	r3, r3
 800eafc:	4018      	ands	r0, r3
 800eafe:	e004      	b.n	800eb0a <FreeRTOS_CLIGetParameter+0x7a>
 800eb00:	2000      	movs	r0, #0
 800eb02:	e002      	b.n	800eb0a <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800eb04:	2000      	movs	r0, #0
 800eb06:	e000      	b.n	800eb0a <FreeRTOS_CLIGetParameter+0x7a>
 800eb08:	2000      	movs	r0, #0
}
 800eb0a:	bd10      	pop	{r4, pc}

0800eb0c <prvHelpCommand>:
{
 800eb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb0e:	46c6      	mov	lr, r8
 800eb10:	b500      	push	{lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	0005      	movs	r5, r0
 800eb16:	000c      	movs	r4, r1
 800eb18:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800eb1e:	aa01      	add	r2, sp, #4
 800eb20:	2101      	movs	r1, #1
 800eb22:	f7ff ffb5 	bl	800ea90 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d02a      	beq.n	800eb80 <prvHelpCommand+0x74>
 800eb2a:	2206      	movs	r2, #6
 800eb2c:	4932      	ldr	r1, [pc, #200]	; (800ebf8 <prvHelpCommand+0xec>)
 800eb2e:	f005 fe6c 	bl	801480a <strncmp>
 800eb32:	1e06      	subs	r6, r0, #0
 800eb34:	d14b      	bne.n	800ebce <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800eb36:	4b31      	ldr	r3, [pc, #196]	; (800ebfc <prvHelpCommand+0xf0>)
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	2b07      	cmp	r3, #7
 800eb3c:	d015      	beq.n	800eb6a <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800eb3e:	1c5a      	adds	r2, r3, #1
 800eb40:	b2d2      	uxtb	r2, r2
 800eb42:	4690      	mov	r8, r2
 800eb44:	4a2d      	ldr	r2, [pc, #180]	; (800ebfc <prvHelpCommand+0xf0>)
 800eb46:	4641      	mov	r1, r8
 800eb48:	7011      	strb	r1, [r2, #0]
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	4a2c      	ldr	r2, [pc, #176]	; (800ec00 <prvHelpCommand+0xf4>)
 800eb4e:	5899      	ldr	r1, [r3, r2]
 800eb50:	0022      	movs	r2, r4
 800eb52:	0028      	movs	r0, r5
 800eb54:	f005 fe6a 	bl	801482c <strncpy>
			xReturn = pdTRUE;
 800eb58:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800eb5a:	4643      	mov	r3, r8
 800eb5c:	2b07      	cmp	r3, #7
 800eb5e:	d136      	bne.n	800ebce <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800eb60:	4b26      	ldr	r3, [pc, #152]	; (800ebfc <prvHelpCommand+0xf0>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	701a      	strb	r2, [r3, #0]
 800eb66:	0037      	movs	r7, r6
 800eb68:	e031      	b.n	800ebce <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800eb6a:	4b24      	ldr	r3, [pc, #144]	; (800ebfc <prvHelpCommand+0xf0>)
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	701a      	strb	r2, [r3, #0]
 800eb70:	4b23      	ldr	r3, [pc, #140]	; (800ec00 <prvHelpCommand+0xf4>)
 800eb72:	6819      	ldr	r1, [r3, #0]
 800eb74:	0022      	movs	r2, r4
 800eb76:	0028      	movs	r0, r5
 800eb78:	f005 fe58 	bl	801482c <strncpy>
			xReturn = pdTRUE;
 800eb7c:	2701      	movs	r7, #1
 800eb7e:	e026      	b.n	800ebce <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800eb80:	4b20      	ldr	r3, [pc, #128]	; (800ec04 <prvHelpCommand+0xf8>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d027      	beq.n	800ebd8 <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800eb88:	4b1f      	ldr	r3, [pc, #124]	; (800ec08 <prvHelpCommand+0xfc>)
 800eb8a:	781e      	ldrb	r6, [r3, #0]
 800eb8c:	4b1f      	ldr	r3, [pc, #124]	; (800ec0c <prvHelpCommand+0x100>)
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	42b3      	cmp	r3, r6
 800eb92:	d228      	bcs.n	800ebe6 <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800eb94:	0022      	movs	r2, r4
 800eb96:	3a08      	subs	r2, #8
 800eb98:	4b1a      	ldr	r3, [pc, #104]	; (800ec04 <prvHelpCommand+0xf8>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6859      	ldr	r1, [r3, #4]
 800eba0:	0028      	movs	r0, r5
 800eba2:	3008      	adds	r0, #8
 800eba4:	f005 fe42 	bl	801482c <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800eba8:	1c68      	adds	r0, r5, #1
 800ebaa:	4919      	ldr	r1, [pc, #100]	; (800ec10 <prvHelpCommand+0x104>)
 800ebac:	f005 fe25 	bl	80147fa <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ebb0:	2328      	movs	r3, #40	; 0x28
 800ebb2:	702b      	strb	r3, [r5, #0]
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	71ab      	strb	r3, [r5, #6]
 800ebb8:	3b09      	subs	r3, #9
 800ebba:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800ebbc:	4b11      	ldr	r3, [pc, #68]	; (800ec04 <prvHelpCommand+0xf8>)
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	6857      	ldr	r7, [r2, #4]
 800ebc2:	601f      	str	r7, [r3, #0]
		counter++;
 800ebc4:	3601      	adds	r6, #1
 800ebc6:	4b10      	ldr	r3, [pc, #64]	; (800ec08 <prvHelpCommand+0xfc>)
 800ebc8:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800ebca:	1e7b      	subs	r3, r7, #1
 800ebcc:	419f      	sbcs	r7, r3
}
 800ebce:	0038      	movs	r0, r7
 800ebd0:	b002      	add	sp, #8
 800ebd2:	bc80      	pop	{r7}
 800ebd4:	46b8      	mov	r8, r7
 800ebd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ebd8:	4b0a      	ldr	r3, [pc, #40]	; (800ec04 <prvHelpCommand+0xf8>)
 800ebda:	4a0e      	ldr	r2, [pc, #56]	; (800ec14 <prvHelpCommand+0x108>)
 800ebdc:	601a      	str	r2, [r3, #0]
			counter = 1;
 800ebde:	4b0a      	ldr	r3, [pc, #40]	; (800ec08 <prvHelpCommand+0xfc>)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
 800ebe4:	e7d0      	b.n	800eb88 <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ebe6:	4b07      	ldr	r3, [pc, #28]	; (800ec04 <prvHelpCommand+0xf8>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6859      	ldr	r1, [r3, #4]
 800ebee:	0022      	movs	r2, r4
 800ebf0:	0028      	movs	r0, r5
 800ebf2:	f005 fe1b 	bl	801482c <strncpy>
 800ebf6:	e7e1      	b.n	800ebbc <prvHelpCommand+0xb0>
 800ebf8:	08019924 	.word	0x08019924
 800ebfc:	20001630 	.word	0x20001630
 800ec00:	2000006c 	.word	0x2000006c
 800ec04:	2000162c 	.word	0x2000162c
 800ec08:	20001624 	.word	0x20001624
 800ec0c:	200061f4 	.word	0x200061f4
 800ec10:	08018d84 	.word	0x08018d84
 800ec14:	200000b0 	.word	0x200000b0

0800ec18 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec18:	0003      	movs	r3, r0
 800ec1a:	3308      	adds	r3, #8
 800ec1c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ec1e:	2201      	movs	r2, #1
 800ec20:	4252      	negs	r2, r2
 800ec22:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec24:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec26:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ec2c:	4770      	bx	lr

0800ec2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ec32:	4770      	bx	lr

0800ec34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ec34:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ec36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ec38:	689a      	ldr	r2, [r3, #8]
 800ec3a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ec3c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ec3e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ec40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ec42:	6803      	ldr	r3, [r0, #0]
 800ec44:	3301      	adds	r3, #1
 800ec46:	6003      	str	r3, [r0, #0]
}
 800ec48:	4770      	bx	lr

0800ec4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec4a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec4c:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec4e:	0003      	movs	r3, r0
 800ec50:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800ec52:	1c62      	adds	r2, r4, #1
 800ec54:	d00e      	beq.n	800ec74 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ec56:	001a      	movs	r2, r3
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	681d      	ldr	r5, [r3, #0]
 800ec5c:	42a5      	cmp	r5, r4
 800ec5e:	d9fa      	bls.n	800ec56 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec60:	6853      	ldr	r3, [r2, #4]
 800ec62:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec64:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec66:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec68:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ec6a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ec6c:	6803      	ldr	r3, [r0, #0]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	6003      	str	r3, [r0, #0]
}
 800ec72:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec74:	6902      	ldr	r2, [r0, #16]
 800ec76:	e7f3      	b.n	800ec60 <vListInsert+0x16>

0800ec78 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ec78:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec7a:	6841      	ldr	r1, [r0, #4]
 800ec7c:	6882      	ldr	r2, [r0, #8]
 800ec7e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec80:	6841      	ldr	r1, [r0, #4]
 800ec82:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	4282      	cmp	r2, r0
 800ec88:	d005      	beq.n	800ec96 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	1e50      	subs	r0, r2, #1
 800ec92:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ec94:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec96:	6882      	ldr	r2, [r0, #8]
 800ec98:	605a      	str	r2, [r3, #4]
 800ec9a:	e7f6      	b.n	800ec8a <uxListRemove+0x12>

0800ec9c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ec9c:	b570      	push	{r4, r5, r6, lr}
 800ec9e:	0004      	movs	r4, r0
 800eca0:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eca2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800eca4:	2a00      	cmp	r2, #0
 800eca6:	d10d      	bne.n	800ecc4 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800eca8:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d003      	beq.n	800ecb8 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ecb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ecb8:	6860      	ldr	r0, [r4, #4]
 800ecba:	f001 f813 	bl	800fce4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	6063      	str	r3, [r4, #4]
 800ecc2:	e7f5      	b.n	800ecb0 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ecc4:	2d00      	cmp	r5, #0
 800ecc6:	d10e      	bne.n	800ece6 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ecc8:	6880      	ldr	r0, [r0, #8]
 800ecca:	f004 ff99 	bl	8013c00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ecce:	68a3      	ldr	r3, [r4, #8]
 800ecd0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ecd2:	4694      	mov	ip, r2
 800ecd4:	4463      	add	r3, ip
 800ecd6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ecd8:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecda:	6862      	ldr	r2, [r4, #4]
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d3e7      	bcc.n	800ecb0 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ece0:	6823      	ldr	r3, [r4, #0]
 800ece2:	60a3      	str	r3, [r4, #8]
 800ece4:	e7e4      	b.n	800ecb0 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ece6:	68c0      	ldr	r0, [r0, #12]
 800ece8:	f004 ff8a 	bl	8013c00 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ecec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ecee:	425a      	negs	r2, r3
 800ecf0:	68e1      	ldr	r1, [r4, #12]
 800ecf2:	1acb      	subs	r3, r1, r3
 800ecf4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ecf6:	6821      	ldr	r1, [r4, #0]
 800ecf8:	428b      	cmp	r3, r1
 800ecfa:	d203      	bcs.n	800ed04 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ecfc:	6863      	ldr	r3, [r4, #4]
 800ecfe:	469c      	mov	ip, r3
 800ed00:	4462      	add	r2, ip
 800ed02:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ed04:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ed06:	2d02      	cmp	r5, #2
 800ed08:	d1d2      	bne.n	800ecb0 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d0cf      	beq.n	800ecb0 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800ed10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed12:	3b01      	subs	r3, #1
 800ed14:	63a3      	str	r3, [r4, #56]	; 0x38
 800ed16:	e7cb      	b.n	800ecb0 <prvCopyDataToQueue+0x14>

0800ed18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ed18:	b510      	push	{r4, lr}
 800ed1a:	0003      	movs	r3, r0
 800ed1c:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ed1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed20:	2a00      	cmp	r2, #0
 800ed22:	d00a      	beq.n	800ed3a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ed24:	68d9      	ldr	r1, [r3, #12]
 800ed26:	1889      	adds	r1, r1, r2
 800ed28:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ed2a:	685c      	ldr	r4, [r3, #4]
 800ed2c:	42a1      	cmp	r1, r4
 800ed2e:	d301      	bcc.n	800ed34 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ed30:	6819      	ldr	r1, [r3, #0]
 800ed32:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ed34:	68d9      	ldr	r1, [r3, #12]
 800ed36:	f004 ff63 	bl	8013c00 <memcpy>
	}
}
 800ed3a:	bd10      	pop	{r4, pc}

0800ed3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed40:	f001 fba4 	bl	801048c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ed44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	dd13      	ble.n	800ed72 <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed4a:	0025      	movs	r5, r4
 800ed4c:	3524      	adds	r5, #36	; 0x24
 800ed4e:	e007      	b.n	800ed60 <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800ed50:	f000 ff74 	bl	800fc3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800ed54:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed56:	3b01      	subs	r3, #1
 800ed58:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ed5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	dd08      	ble.n	800ed72 <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d005      	beq.n	800ed72 <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed66:	0028      	movs	r0, r5
 800ed68:	f000 fef6 	bl	800fb58 <xTaskRemoveFromEventList>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d0f1      	beq.n	800ed54 <prvUnlockQueue+0x18>
 800ed70:	e7ee      	b.n	800ed50 <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800ed72:	2301      	movs	r3, #1
 800ed74:	425b      	negs	r3, r3
 800ed76:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800ed78:	f001 fb94 	bl	80104a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed7c:	f001 fb86 	bl	801048c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ed80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	dd13      	ble.n	800edae <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed86:	0025      	movs	r5, r4
 800ed88:	3510      	adds	r5, #16
 800ed8a:	e007      	b.n	800ed9c <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800ed8c:	f000 ff56 	bl	800fc3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800ed90:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed92:	3b01      	subs	r3, #1
 800ed94:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ed96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dd08      	ble.n	800edae <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed9c:	6923      	ldr	r3, [r4, #16]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d005      	beq.n	800edae <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eda2:	0028      	movs	r0, r5
 800eda4:	f000 fed8 	bl	800fb58 <xTaskRemoveFromEventList>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d0f1      	beq.n	800ed90 <prvUnlockQueue+0x54>
 800edac:	e7ee      	b.n	800ed8c <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800edae:	2301      	movs	r3, #1
 800edb0:	425b      	negs	r3, r3
 800edb2:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800edb4:	f001 fb76 	bl	80104a4 <vPortExitCritical>
}
 800edb8:	bd70      	pop	{r4, r5, r6, pc}

0800edba <xQueueGenericReset>:
{
 800edba:	b570      	push	{r4, r5, r6, lr}
 800edbc:	0004      	movs	r4, r0
 800edbe:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800edc0:	f001 fb64 	bl	801048c <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800edc4:	6822      	ldr	r2, [r4, #0]
 800edc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800edc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800edca:	434b      	muls	r3, r1
 800edcc:	18d0      	adds	r0, r2, r3
 800edce:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800edd0:	2000      	movs	r0, #0
 800edd2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800edd4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800edd6:	1a5b      	subs	r3, r3, r1
 800edd8:	18d3      	adds	r3, r2, r3
 800edda:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800eddc:	2301      	movs	r3, #1
 800edde:	425b      	negs	r3, r3
 800ede0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ede2:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ede4:	2d00      	cmp	r5, #0
 800ede6:	d10f      	bne.n	800ee08 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ede8:	6923      	ldr	r3, [r4, #16]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d103      	bne.n	800edf6 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800edee:	f001 fb59 	bl	80104a4 <vPortExitCritical>
}
 800edf2:	2001      	movs	r0, #1
 800edf4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800edf6:	0020      	movs	r0, r4
 800edf8:	3010      	adds	r0, #16
 800edfa:	f000 fead 	bl	800fb58 <xTaskRemoveFromEventList>
 800edfe:	2801      	cmp	r0, #1
 800ee00:	d1f5      	bne.n	800edee <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800ee02:	f001 fb37 	bl	8010474 <vPortYield>
 800ee06:	e7f2      	b.n	800edee <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ee08:	0020      	movs	r0, r4
 800ee0a:	3010      	adds	r0, #16
 800ee0c:	f7ff ff04 	bl	800ec18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ee10:	0020      	movs	r0, r4
 800ee12:	3024      	adds	r0, #36	; 0x24
 800ee14:	f7ff ff00 	bl	800ec18 <vListInitialise>
 800ee18:	e7e9      	b.n	800edee <xQueueGenericReset+0x34>

0800ee1a <xQueueGenericCreate>:
{
 800ee1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1c:	0006      	movs	r6, r0
 800ee1e:	000d      	movs	r5, r1
 800ee20:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ee22:	2900      	cmp	r1, #0
 800ee24:	d007      	beq.n	800ee36 <xQueueGenericCreate+0x1c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee26:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ee28:	3055      	adds	r0, #85	; 0x55
 800ee2a:	f001 fbab 	bl	8010584 <pvPortMalloc>
 800ee2e:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ee30:	d00f      	beq.n	800ee52 <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800ee32:	3054      	adds	r0, #84	; 0x54
 800ee34:	e004      	b.n	800ee40 <xQueueGenericCreate+0x26>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ee36:	2054      	movs	r0, #84	; 0x54
 800ee38:	f001 fba4 	bl	8010584 <pvPortMalloc>
 800ee3c:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ee3e:	d008      	beq.n	800ee52 <xQueueGenericCreate+0x38>
 800ee40:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ee42:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ee44:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee46:	2101      	movs	r1, #1
 800ee48:	0020      	movs	r0, r4
 800ee4a:	f7ff ffb6 	bl	800edba <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800ee4e:	2350      	movs	r3, #80	; 0x50
 800ee50:	54e7      	strb	r7, [r4, r3]
}
 800ee52:	0020      	movs	r0, r4
 800ee54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ee56 <xQueueCreateCountingSemaphore>:
	{
 800ee56:	b510      	push	{r4, lr}
 800ee58:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	2100      	movs	r1, #0
 800ee5e:	f7ff ffdc 	bl	800ee1a <xQueueGenericCreate>
		if( xHandle != NULL )
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d000      	beq.n	800ee68 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ee66:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ee68:	bd10      	pop	{r4, pc}

0800ee6a <xQueueGenericSend>:
{
 800ee6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee6c:	46c6      	mov	lr, r8
 800ee6e:	b500      	push	{lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	0004      	movs	r4, r0
 800ee74:	9100      	str	r1, [sp, #0]
 800ee76:	9201      	str	r2, [sp, #4]
 800ee78:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee7a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4698      	mov	r8, r3
 800ee80:	e030      	b.n	800eee4 <xQueueGenericSend+0x7a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee82:	003a      	movs	r2, r7
 800ee84:	9900      	ldr	r1, [sp, #0]
 800ee86:	0020      	movs	r0, r4
 800ee88:	f7ff ff08 	bl	800ec9c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d108      	bne.n	800eea4 <xQueueGenericSend+0x3a>
					else if( xYieldRequired != pdFALSE )
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d10f      	bne.n	800eeb6 <xQueueGenericSend+0x4c>
				taskEXIT_CRITICAL();
 800ee96:	f001 fb05 	bl	80104a4 <vPortExitCritical>
				return pdPASS;
 800ee9a:	2001      	movs	r0, #1
}
 800ee9c:	b004      	add	sp, #16
 800ee9e:	bc80      	pop	{r7}
 800eea0:	46b8      	mov	r8, r7
 800eea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800eea4:	0020      	movs	r0, r4
 800eea6:	3024      	adds	r0, #36	; 0x24
 800eea8:	f000 fe56 	bl	800fb58 <xTaskRemoveFromEventList>
 800eeac:	2801      	cmp	r0, #1
 800eeae:	d1f2      	bne.n	800ee96 <xQueueGenericSend+0x2c>
							queueYIELD_IF_USING_PREEMPTION();
 800eeb0:	f001 fae0 	bl	8010474 <vPortYield>
 800eeb4:	e7ef      	b.n	800ee96 <xQueueGenericSend+0x2c>
						queueYIELD_IF_USING_PREEMPTION();
 800eeb6:	f001 fadd 	bl	8010474 <vPortYield>
 800eeba:	e7ec      	b.n	800ee96 <xQueueGenericSend+0x2c>
					taskEXIT_CRITICAL();
 800eebc:	f001 faf2 	bl	80104a4 <vPortExitCritical>
					return errQUEUE_FULL;
 800eec0:	2000      	movs	r0, #0
 800eec2:	e7eb      	b.n	800ee9c <xQueueGenericSend+0x32>
					vTaskSetTimeOutState( &xTimeOut );
 800eec4:	a802      	add	r0, sp, #8
 800eec6:	f000 fe83 	bl	800fbd0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eeca:	e018      	b.n	800eefe <xQueueGenericSend+0x94>
		prvLockQueue( pxQueue );
 800eecc:	4643      	mov	r3, r8
 800eece:	6463      	str	r3, [r4, #68]	; 0x44
 800eed0:	e01e      	b.n	800ef10 <xQueueGenericSend+0xa6>
 800eed2:	4643      	mov	r3, r8
 800eed4:	64a3      	str	r3, [r4, #72]	; 0x48
 800eed6:	e01e      	b.n	800ef16 <xQueueGenericSend+0xac>
				prvUnlockQueue( pxQueue );
 800eed8:	0020      	movs	r0, r4
 800eeda:	f7ff ff2f 	bl	800ed3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eede:	f000 fc6f 	bl	800f7c0 <xTaskResumeAll>
{
 800eee2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800eee4:	f001 fad2 	bl	801048c <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eee8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eeea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d3c8      	bcc.n	800ee82 <xQueueGenericSend+0x18>
 800eef0:	2f02      	cmp	r7, #2
 800eef2:	d0c6      	beq.n	800ee82 <xQueueGenericSend+0x18>
				if( xTicksToWait == ( TickType_t ) 0 )
 800eef4:	9b01      	ldr	r3, [sp, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d0e0      	beq.n	800eebc <xQueueGenericSend+0x52>
				else if( xEntryTimeSet == pdFALSE )
 800eefa:	2d00      	cmp	r5, #0
 800eefc:	d0e2      	beq.n	800eec4 <xQueueGenericSend+0x5a>
		taskEXIT_CRITICAL();
 800eefe:	f001 fad1 	bl	80104a4 <vPortExitCritical>
		vTaskSuspendAll();
 800ef02:	f000 fbb3 	bl	800f66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef06:	f001 fac1 	bl	801048c <vPortEnterCritical>
 800ef0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	d0dd      	beq.n	800eecc <xQueueGenericSend+0x62>
 800ef10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ef12:	1c53      	adds	r3, r2, #1
 800ef14:	d0dd      	beq.n	800eed2 <xQueueGenericSend+0x68>
 800ef16:	f001 fac5 	bl	80104a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef1a:	a901      	add	r1, sp, #4
 800ef1c:	a802      	add	r0, sp, #8
 800ef1e:	f000 fe63 	bl	800fbe8 <xTaskCheckForTimeOut>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	d116      	bne.n	800ef54 <xQueueGenericSend+0xea>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef26:	f001 fab1 	bl	801048c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ef2a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ef2c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ef2e:	f001 fab9 	bl	80104a4 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ef32:	42ae      	cmp	r6, r5
 800ef34:	d1d0      	bne.n	800eed8 <xQueueGenericSend+0x6e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ef36:	0020      	movs	r0, r4
 800ef38:	3010      	adds	r0, #16
 800ef3a:	9901      	ldr	r1, [sp, #4]
 800ef3c:	f000 fdd6 	bl	800faec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef40:	0020      	movs	r0, r4
 800ef42:	f7ff fefb 	bl	800ed3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef46:	f000 fc3b 	bl	800f7c0 <xTaskResumeAll>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	d1c9      	bne.n	800eee2 <xQueueGenericSend+0x78>
					portYIELD_WITHIN_API();
 800ef4e:	f001 fa91 	bl	8010474 <vPortYield>
 800ef52:	e7c6      	b.n	800eee2 <xQueueGenericSend+0x78>
			prvUnlockQueue( pxQueue );
 800ef54:	0020      	movs	r0, r4
 800ef56:	f7ff fef1 	bl	800ed3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef5a:	f000 fc31 	bl	800f7c0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e79c      	b.n	800ee9c <xQueueGenericSend+0x32>

0800ef62 <xQueueGenericSendFromISR>:
{
 800ef62:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef64:	b083      	sub	sp, #12
 800ef66:	0004      	movs	r4, r0
 800ef68:	9100      	str	r1, [sp, #0]
 800ef6a:	9201      	str	r2, [sp, #4]
 800ef6c:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef6e:	f001 faa3 	bl	80104b8 <ulSetInterruptMaskFromISR>
 800ef72:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d308      	bcc.n	800ef8e <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800ef7c:	2700      	movs	r7, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef7e:	2d02      	cmp	r5, #2
 800ef80:	d005      	beq.n	800ef8e <xQueueGenericSendFromISR+0x2c>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ef82:	0030      	movs	r0, r6
 800ef84:	f001 fa9d 	bl	80104c2 <vClearInterruptMaskFromISR>
}
 800ef88:	0038      	movs	r0, r7
 800ef8a:	b003      	add	sp, #12
 800ef8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef8e:	002a      	movs	r2, r5
 800ef90:	9900      	ldr	r1, [sp, #0]
 800ef92:	0020      	movs	r0, r4
 800ef94:	f7ff fe82 	bl	800ec9c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ef98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	d004      	beq.n	800efa8 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800ef9e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800efa0:	3301      	adds	r3, #1
 800efa2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800efa4:	2701      	movs	r7, #1
 800efa6:	e7ec      	b.n	800ef82 <xQueueGenericSendFromISR+0x20>
 800efa8:	2701      	movs	r7, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efac:	2b00      	cmp	r3, #0
 800efae:	d0e8      	beq.n	800ef82 <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efb0:	0020      	movs	r0, r4
 800efb2:	3024      	adds	r0, #36	; 0x24
 800efb4:	f000 fdd0 	bl	800fb58 <xTaskRemoveFromEventList>
 800efb8:	2800      	cmp	r0, #0
 800efba:	d0e2      	beq.n	800ef82 <xQueueGenericSendFromISR+0x20>
							if( pxHigherPriorityTaskWoken != NULL )
 800efbc:	9a01      	ldr	r2, [sp, #4]
 800efbe:	2a00      	cmp	r2, #0
 800efc0:	d002      	beq.n	800efc8 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800efc2:	2301      	movs	r3, #1
 800efc4:	6013      	str	r3, [r2, #0]
 800efc6:	e7dc      	b.n	800ef82 <xQueueGenericSendFromISR+0x20>
			xReturn = pdPASS;
 800efc8:	2701      	movs	r7, #1
 800efca:	e7da      	b.n	800ef82 <xQueueGenericSendFromISR+0x20>

0800efcc <xQueueGiveFromISR>:
{
 800efcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efce:	0004      	movs	r4, r0
 800efd0:	000e      	movs	r6, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800efd2:	f001 fa71 	bl	80104b8 <ulSetInterruptMaskFromISR>
 800efd6:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800efd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800efda:	2700      	movs	r7, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800efdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800efde:	4293      	cmp	r3, r2
 800efe0:	d209      	bcs.n	800eff6 <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800efe2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efe4:	3301      	adds	r3, #1
 800efe6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800efe8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800efea:	3301      	adds	r3, #1
 800efec:	d008      	beq.n	800f000 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800efee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eff0:	3301      	adds	r3, #1
 800eff2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eff4:	2701      	movs	r7, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eff6:	0028      	movs	r0, r5
 800eff8:	f001 fa63 	bl	80104c2 <vClearInterruptMaskFromISR>
}
 800effc:	0038      	movs	r0, r7
 800effe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f000:	3701      	adds	r7, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d0f6      	beq.n	800eff6 <xQueueGiveFromISR+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f008:	0020      	movs	r0, r4
 800f00a:	3024      	adds	r0, #36	; 0x24
 800f00c:	f000 fda4 	bl	800fb58 <xTaskRemoveFromEventList>
 800f010:	2800      	cmp	r0, #0
 800f012:	d0f0      	beq.n	800eff6 <xQueueGiveFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
 800f014:	2e00      	cmp	r6, #0
 800f016:	d002      	beq.n	800f01e <xQueueGiveFromISR+0x52>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f018:	2301      	movs	r3, #1
 800f01a:	6033      	str	r3, [r6, #0]
 800f01c:	e7eb      	b.n	800eff6 <xQueueGiveFromISR+0x2a>
			xReturn = pdPASS;
 800f01e:	2701      	movs	r7, #1
 800f020:	e7e9      	b.n	800eff6 <xQueueGiveFromISR+0x2a>

0800f022 <xQueueGenericReceive>:
{
 800f022:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f024:	b085      	sub	sp, #20
 800f026:	0004      	movs	r4, r0
 800f028:	9100      	str	r1, [sp, #0]
 800f02a:	9201      	str	r2, [sp, #4]
 800f02c:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800f02e:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f030:	2600      	movs	r6, #0
 800f032:	e048      	b.n	800f0c6 <xQueueGenericReceive+0xa4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f034:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f036:	9900      	ldr	r1, [sp, #0]
 800f038:	0020      	movs	r0, r4
 800f03a:	f7ff fe6d 	bl	800ed18 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f03e:	2d00      	cmp	r5, #0
 800f040:	d11a      	bne.n	800f078 <xQueueGenericReceive+0x56>
					--( pxQueue->uxMessagesWaiting );
 800f042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f044:	3b01      	subs	r3, #1
 800f046:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d007      	beq.n	800f05e <xQueueGenericReceive+0x3c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f04e:	6923      	ldr	r3, [r4, #16]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d108      	bne.n	800f066 <xQueueGenericReceive+0x44>
				taskEXIT_CRITICAL();
 800f054:	f001 fa26 	bl	80104a4 <vPortExitCritical>
				return pdPASS;
 800f058:	2001      	movs	r0, #1
}
 800f05a:	b005      	add	sp, #20
 800f05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f05e:	f000 ff41 	bl	800fee4 <pvTaskIncrementMutexHeldCount>
 800f062:	6060      	str	r0, [r4, #4]
 800f064:	e7f3      	b.n	800f04e <xQueueGenericReceive+0x2c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f066:	0020      	movs	r0, r4
 800f068:	3010      	adds	r0, #16
 800f06a:	f000 fd75 	bl	800fb58 <xTaskRemoveFromEventList>
 800f06e:	2801      	cmp	r0, #1
 800f070:	d1f0      	bne.n	800f054 <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800f072:	f001 f9ff 	bl	8010474 <vPortYield>
 800f076:	e7ed      	b.n	800f054 <xQueueGenericReceive+0x32>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f078:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d0e9      	beq.n	800f054 <xQueueGenericReceive+0x32>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f080:	0020      	movs	r0, r4
 800f082:	3024      	adds	r0, #36	; 0x24
 800f084:	f000 fd68 	bl	800fb58 <xTaskRemoveFromEventList>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d0e3      	beq.n	800f054 <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800f08c:	f001 f9f2 	bl	8010474 <vPortYield>
 800f090:	e7e0      	b.n	800f054 <xQueueGenericReceive+0x32>
					taskEXIT_CRITICAL();
 800f092:	f001 fa07 	bl	80104a4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f096:	2000      	movs	r0, #0
 800f098:	e7df      	b.n	800f05a <xQueueGenericReceive+0x38>
					vTaskSetTimeOutState( &xTimeOut );
 800f09a:	a802      	add	r0, sp, #8
 800f09c:	f000 fd98 	bl	800fbd0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f0a0:	e01b      	b.n	800f0da <xQueueGenericReceive+0xb8>
		prvLockQueue( pxQueue );
 800f0a2:	6466      	str	r6, [r4, #68]	; 0x44
 800f0a4:	e022      	b.n	800f0ec <xQueueGenericReceive+0xca>
 800f0a6:	64a6      	str	r6, [r4, #72]	; 0x48
 800f0a8:	e023      	b.n	800f0f2 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800f0aa:	f001 f9ef 	bl	801048c <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f0ae:	6860      	ldr	r0, [r4, #4]
 800f0b0:	f000 fdda 	bl	800fc68 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f0b4:	f001 f9f6 	bl	80104a4 <vPortExitCritical>
 800f0b8:	e02d      	b.n	800f116 <xQueueGenericReceive+0xf4>
				prvUnlockQueue( pxQueue );
 800f0ba:	0020      	movs	r0, r4
 800f0bc:	f7ff fe3e 	bl	800ed3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0c0:	f000 fb7e 	bl	800f7c0 <xTaskResumeAll>
{
 800f0c4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f0c6:	f001 f9e1 	bl	801048c <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1b1      	bne.n	800f034 <xQueueGenericReceive+0x12>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0d0:	9b01      	ldr	r3, [sp, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0dd      	beq.n	800f092 <xQueueGenericReceive+0x70>
				else if( xEntryTimeSet == pdFALSE )
 800f0d6:	2f00      	cmp	r7, #0
 800f0d8:	d0df      	beq.n	800f09a <xQueueGenericReceive+0x78>
		taskEXIT_CRITICAL();
 800f0da:	f001 f9e3 	bl	80104a4 <vPortExitCritical>
		vTaskSuspendAll();
 800f0de:	f000 fac5 	bl	800f66c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0e2:	f001 f9d3 	bl	801048c <vPortEnterCritical>
 800f0e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	d0da      	beq.n	800f0a2 <xQueueGenericReceive+0x80>
 800f0ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	d0d9      	beq.n	800f0a6 <xQueueGenericReceive+0x84>
 800f0f2:	f001 f9d7 	bl	80104a4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0f6:	a901      	add	r1, sp, #4
 800f0f8:	a802      	add	r0, sp, #8
 800f0fa:	f000 fd75 	bl	800fbe8 <xTaskCheckForTimeOut>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d118      	bne.n	800f134 <xQueueGenericReceive+0x112>
	taskENTER_CRITICAL();
 800f102:	f001 f9c3 	bl	801048c <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f106:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f108:	f001 f9cc 	bl	80104a4 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f10c:	2f00      	cmp	r7, #0
 800f10e:	d1d4      	bne.n	800f0ba <xQueueGenericReceive+0x98>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f110:	6823      	ldr	r3, [r4, #0]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d0c9      	beq.n	800f0aa <xQueueGenericReceive+0x88>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f116:	0020      	movs	r0, r4
 800f118:	3024      	adds	r0, #36	; 0x24
 800f11a:	9901      	ldr	r1, [sp, #4]
 800f11c:	f000 fce6 	bl	800faec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f120:	0020      	movs	r0, r4
 800f122:	f7ff fe0b 	bl	800ed3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f126:	f000 fb4b 	bl	800f7c0 <xTaskResumeAll>
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d1ca      	bne.n	800f0c4 <xQueueGenericReceive+0xa2>
					portYIELD_WITHIN_API();
 800f12e:	f001 f9a1 	bl	8010474 <vPortYield>
 800f132:	e7c7      	b.n	800f0c4 <xQueueGenericReceive+0xa2>
			prvUnlockQueue( pxQueue );
 800f134:	0020      	movs	r0, r4
 800f136:	f7ff fe01 	bl	800ed3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f13a:	f000 fb41 	bl	800f7c0 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f13e:	2000      	movs	r0, #0
 800f140:	e78b      	b.n	800f05a <xQueueGenericReceive+0x38>

0800f142 <xQueueReceiveFromISR>:
{
 800f142:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f144:	b083      	sub	sp, #12
 800f146:	0004      	movs	r4, r0
 800f148:	000e      	movs	r6, r1
 800f14a:	9201      	str	r2, [sp, #4]
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f14c:	f001 f9b4 	bl	80104b8 <ulSetInterruptMaskFromISR>
 800f150:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f154:	2700      	movs	r7, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f156:	2b00      	cmp	r3, #0
 800f158:	d105      	bne.n	800f166 <xQueueReceiveFromISR+0x24>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f15a:	0028      	movs	r0, r5
 800f15c:	f001 f9b1 	bl	80104c2 <vClearInterruptMaskFromISR>
}
 800f160:	0038      	movs	r0, r7
 800f162:	b003      	add	sp, #12
 800f164:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f166:	0031      	movs	r1, r6
 800f168:	0020      	movs	r0, r4
 800f16a:	f7ff fdd5 	bl	800ed18 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f16e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f170:	3b01      	subs	r3, #1
 800f172:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f174:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f176:	3301      	adds	r3, #1
 800f178:	d004      	beq.n	800f184 <xQueueReceiveFromISR+0x42>
				++( pxQueue->xRxLock );
 800f17a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f17c:	3301      	adds	r3, #1
 800f17e:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f180:	2701      	movs	r7, #1
 800f182:	e7ea      	b.n	800f15a <xQueueReceiveFromISR+0x18>
 800f184:	3701      	adds	r7, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f186:	6923      	ldr	r3, [r4, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0e6      	beq.n	800f15a <xQueueReceiveFromISR+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f18c:	0020      	movs	r0, r4
 800f18e:	3010      	adds	r0, #16
 800f190:	f000 fce2 	bl	800fb58 <xTaskRemoveFromEventList>
 800f194:	2800      	cmp	r0, #0
 800f196:	d0e0      	beq.n	800f15a <xQueueReceiveFromISR+0x18>
						if( pxHigherPriorityTaskWoken != NULL )
 800f198:	9a01      	ldr	r2, [sp, #4]
 800f19a:	2a00      	cmp	r2, #0
 800f19c:	d002      	beq.n	800f1a4 <xQueueReceiveFromISR+0x62>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	6013      	str	r3, [r2, #0]
 800f1a2:	e7da      	b.n	800f15a <xQueueReceiveFromISR+0x18>
			xReturn = pdPASS;
 800f1a4:	2701      	movs	r7, #1
 800f1a6:	e7d8      	b.n	800f15a <xQueueReceiveFromISR+0x18>

0800f1a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f1a8:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1aa:	4a08      	ldr	r2, [pc, #32]	; (800f1cc <vQueueAddToRegistry+0x24>)
 800f1ac:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f1ae:	6814      	ldr	r4, [r2, #0]
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	d004      	beq.n	800f1be <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	3208      	adds	r2, #8
 800f1b8:	2b08      	cmp	r3, #8
 800f1ba:	d1f8      	bne.n	800f1ae <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f1bc:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f1be:	4a03      	ldr	r2, [pc, #12]	; (800f1cc <vQueueAddToRegistry+0x24>)
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f1c4:	18d3      	adds	r3, r2, r3
 800f1c6:	6058      	str	r0, [r3, #4]
				break;
 800f1c8:	e7f8      	b.n	800f1bc <vQueueAddToRegistry+0x14>
 800f1ca:	46c0      	nop			; (mov r8, r8)
 800f1cc:	20006774 	.word	0x20006774

0800f1d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	0004      	movs	r4, r0
 800f1d4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f1d6:	f001 f959 	bl	801048c <vPortEnterCritical>
 800f1da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f1dc:	3301      	adds	r3, #1
 800f1de:	d00b      	beq.n	800f1f8 <vQueueWaitForMessageRestricted+0x28>
 800f1e0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	d00b      	beq.n	800f1fe <vQueueWaitForMessageRestricted+0x2e>
 800f1e6:	f001 f95d 	bl	80104a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f1ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d009      	beq.n	800f204 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f1f0:	0020      	movs	r0, r4
 800f1f2:	f7ff fda3 	bl	800ed3c <prvUnlockQueue>
	}
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	6463      	str	r3, [r4, #68]	; 0x44
 800f1fc:	e7f0      	b.n	800f1e0 <vQueueWaitForMessageRestricted+0x10>
 800f1fe:	2300      	movs	r3, #0
 800f200:	64a3      	str	r3, [r4, #72]	; 0x48
 800f202:	e7f0      	b.n	800f1e6 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f204:	0020      	movs	r0, r4
 800f206:	3024      	adds	r0, #36	; 0x24
 800f208:	0029      	movs	r1, r5
 800f20a:	f000 fc8f 	bl	800fb2c <vTaskPlaceOnEventListRestricted>
 800f20e:	e7ef      	b.n	800f1f0 <vQueueWaitForMessageRestricted+0x20>

0800f210 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f212:	46de      	mov	lr, fp
 800f214:	4657      	mov	r7, sl
 800f216:	464e      	mov	r6, r9
 800f218:	4645      	mov	r5, r8
 800f21a:	b5e0      	push	{r5, r6, r7, lr}
 800f21c:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f21e:	680b      	ldr	r3, [r1, #0]
 800f220:	469b      	mov	fp, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d045      	beq.n	800f2b2 <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f226:	684b      	ldr	r3, [r1, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	604b      	str	r3, [r1, #4]
 800f22c:	2008      	movs	r0, #8
 800f22e:	4684      	mov	ip, r0
 800f230:	448c      	add	ip, r1
 800f232:	4563      	cmp	r3, ip
 800f234:	d007      	beq.n	800f246 <prvListTaskWithinSingleList+0x36>
 800f236:	684b      	ldr	r3, [r1, #4]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800f23c:	2300      	movs	r3, #0
 800f23e:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f240:	3302      	adds	r3, #2
 800f242:	4699      	mov	r9, r3
 800f244:	e01c      	b.n	800f280 <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f246:	68cb      	ldr	r3, [r1, #12]
 800f248:	604b      	str	r3, [r1, #4]
 800f24a:	e7f4      	b.n	800f236 <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	604b      	str	r3, [r1, #4]
 800f250:	e01b      	b.n	800f28a <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f252:	4648      	mov	r0, r9
 800f254:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f256:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800f258:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f25a:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800f25c:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f25e:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f260:	783d      	ldrb	r5, [r7, #0]
 800f262:	2da5      	cmp	r5, #165	; 0xa5
 800f264:	d123      	bne.n	800f2ae <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800f266:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f268:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f26a:	5d78      	ldrb	r0, [r7, r5]
 800f26c:	28a5      	cmp	r0, #165	; 0xa5
 800f26e:	d0fb      	beq.n	800f268 <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f270:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800f272:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800f274:	2001      	movs	r0, #1
 800f276:	4682      	mov	sl, r0
 800f278:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800f27a:	3420      	adds	r4, #32
 800f27c:	4598      	cmp	r8, r3
 800f27e:	d018      	beq.n	800f2b2 <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f280:	684b      	ldr	r3, [r1, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	604b      	str	r3, [r1, #4]
 800f286:	459c      	cmp	ip, r3
 800f288:	d0e0      	beq.n	800f24c <prvListTaskWithinSingleList+0x3c>
 800f28a:	684b      	ldr	r3, [r1, #4]
 800f28c:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f28e:	0026      	movs	r6, r4
 800f290:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f292:	001d      	movs	r5, r3
 800f294:	3534      	adds	r5, #52	; 0x34
 800f296:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f298:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800f29a:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f29c:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f29e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800f2a0:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800f2a2:	2a03      	cmp	r2, #3
 800f2a4:	d1d7      	bne.n	800f256 <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f2a6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	d1d2      	bne.n	800f252 <prvListTaskWithinSingleList+0x42>
 800f2ac:	e7d3      	b.n	800f256 <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800f2ae:	2500      	movs	r5, #0
 800f2b0:	e7de      	b.n	800f270 <prvListTaskWithinSingleList+0x60>
	}
 800f2b2:	4658      	mov	r0, fp
 800f2b4:	bcf0      	pop	{r4, r5, r6, r7}
 800f2b6:	46bb      	mov	fp, r7
 800f2b8:	46b2      	mov	sl, r6
 800f2ba:	46a9      	mov	r9, r5
 800f2bc:	46a0      	mov	r8, r4
 800f2be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2c0:	4b08      	ldr	r3, [pc, #32]	; (800f2e4 <prvResetNextTaskUnblockTime+0x24>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d104      	bne.n	800f2d4 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f2ca:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <prvResetNextTaskUnblockTime+0x28>)
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	4252      	negs	r2, r2
 800f2d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800f2d2:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f2d4:	4b03      	ldr	r3, [pc, #12]	; (800f2e4 <prvResetNextTaskUnblockTime+0x24>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f2da:	68db      	ldr	r3, [r3, #12]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	4b02      	ldr	r3, [pc, #8]	; (800f2e8 <prvResetNextTaskUnblockTime+0x28>)
 800f2e0:	601a      	str	r2, [r3, #0]
}
 800f2e2:	e7f6      	b.n	800f2d2 <prvResetNextTaskUnblockTime+0x12>
 800f2e4:	20001638 	.word	0x20001638
 800f2e8:	200000b8 	.word	0x200000b8

0800f2ec <prvAddCurrentTaskToDelayedList>:
{
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f2f0:	4b0e      	ldr	r3, [pc, #56]	; (800f32c <prvAddCurrentTaskToDelayedList+0x40>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f2f6:	4b0e      	ldr	r3, [pc, #56]	; (800f330 <prvAddCurrentTaskToDelayedList+0x44>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4283      	cmp	r3, r0
 800f2fc:	d907      	bls.n	800f30e <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f2fe:	4b0d      	ldr	r3, [pc, #52]	; (800f334 <prvAddCurrentTaskToDelayedList+0x48>)
 800f300:	6818      	ldr	r0, [r3, #0]
 800f302:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <prvAddCurrentTaskToDelayedList+0x40>)
 800f304:	6819      	ldr	r1, [r3, #0]
 800f306:	3104      	adds	r1, #4
 800f308:	f7ff fc9f 	bl	800ec4a <vListInsert>
}
 800f30c:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f30e:	4b0a      	ldr	r3, [pc, #40]	; (800f338 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f310:	6818      	ldr	r0, [r3, #0]
 800f312:	4b06      	ldr	r3, [pc, #24]	; (800f32c <prvAddCurrentTaskToDelayedList+0x40>)
 800f314:	6819      	ldr	r1, [r3, #0]
 800f316:	3104      	adds	r1, #4
 800f318:	f7ff fc97 	bl	800ec4a <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f31c:	4b07      	ldr	r3, [pc, #28]	; (800f33c <prvAddCurrentTaskToDelayedList+0x50>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	42a3      	cmp	r3, r4
 800f322:	d9f3      	bls.n	800f30c <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800f324:	4b05      	ldr	r3, [pc, #20]	; (800f33c <prvAddCurrentTaskToDelayedList+0x50>)
 800f326:	601c      	str	r4, [r3, #0]
}
 800f328:	e7f0      	b.n	800f30c <prvAddCurrentTaskToDelayedList+0x20>
 800f32a:	46c0      	nop			; (mov r8, r8)
 800f32c:	20001634 	.word	0x20001634
 800f330:	20001754 	.word	0x20001754
 800f334:	2000163c 	.word	0x2000163c
 800f338:	20001638 	.word	0x20001638
 800f33c:	200000b8 	.word	0x200000b8

0800f340 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f340:	b510      	push	{r4, lr}
 800f342:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f344:	f005 fa59 	bl	80147fa <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f348:	0020      	movs	r0, r4
 800f34a:	f7f0 fee5 	bl	8000118 <strlen>
 800f34e:	280b      	cmp	r0, #11
 800f350:	dc08      	bgt.n	800f364 <prvWriteNameToBuffer+0x24>
 800f352:	1823      	adds	r3, r4, r0
 800f354:	0021      	movs	r1, r4
 800f356:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800f358:	2220      	movs	r2, #32
 800f35a:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f35c:	3301      	adds	r3, #1
 800f35e:	428b      	cmp	r3, r1
 800f360:	d1fb      	bne.n	800f35a <prvWriteNameToBuffer+0x1a>
 800f362:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f364:	1820      	adds	r0, r4, r0
 800f366:	2300      	movs	r3, #0
 800f368:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f36a:	bd10      	pop	{r4, pc}

0800f36c <xTaskGenericCreate>:
{
 800f36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f36e:	46c6      	mov	lr, r8
 800f370:	b500      	push	{lr}
 800f372:	b082      	sub	sp, #8
 800f374:	9000      	str	r0, [sp, #0]
 800f376:	000f      	movs	r7, r1
 800f378:	0016      	movs	r6, r2
 800f37a:	9301      	str	r3, [sp, #4]
 800f37c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f37e:	2d00      	cmp	r5, #0
 800f380:	d05a      	beq.n	800f438 <xTaskGenericCreate+0xcc>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f382:	2060      	movs	r0, #96	; 0x60
 800f384:	f001 f8fe 	bl	8010584 <pvPortMalloc>
 800f388:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f38a:	d060      	beq.n	800f44e <xTaskGenericCreate+0xe2>
				pxNewTCB->pxStack = pxStack;
 800f38c:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f38e:	00b2      	lsls	r2, r6, #2
 800f390:	21a5      	movs	r1, #165	; 0xa5
 800f392:	0028      	movs	r0, r5
 800f394:	f004 fc3d 	bl	8013c12 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f398:	4b5d      	ldr	r3, [pc, #372]	; (800f510 <xTaskGenericCreate+0x1a4>)
 800f39a:	18f2      	adds	r2, r6, r3
 800f39c:	0092      	lsls	r2, r2, #2
 800f39e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f3a0:	469c      	mov	ip, r3
 800f3a2:	4462      	add	r2, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f3a4:	2307      	movs	r3, #7
 800f3a6:	439a      	bics	r2, r3
 800f3a8:	4690      	mov	r8, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3aa:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f3ac:	0021      	movs	r1, r4
 800f3ae:	3134      	adds	r1, #52	; 0x34
 800f3b0:	5cfa      	ldrb	r2, [r7, r3]
 800f3b2:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800f3b4:	2a00      	cmp	r2, #0
 800f3b6:	d002      	beq.n	800f3be <xTaskGenericCreate+0x52>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	2b0d      	cmp	r3, #13
 800f3bc:	d1f8      	bne.n	800f3b0 <xTaskGenericCreate+0x44>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f3be:	2340      	movs	r3, #64	; 0x40
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3c4:	9f08      	ldr	r7, [sp, #32]
 800f3c6:	2f06      	cmp	r7, #6
 800f3c8:	d900      	bls.n	800f3cc <xTaskGenericCreate+0x60>
 800f3ca:	2706      	movs	r7, #6
	pxTCB->uxPriority = uxPriority;
 800f3cc:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f3ce:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f3d0:	2600      	movs	r6, #0
 800f3d2:	6526      	str	r6, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f3d4:	1d25      	adds	r5, r4, #4
 800f3d6:	0028      	movs	r0, r5
 800f3d8:	f7ff fc29 	bl	800ec2e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f3dc:	0020      	movs	r0, r4
 800f3de:	3018      	adds	r0, #24
 800f3e0:	f7ff fc25 	bl	800ec2e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f3e4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3e6:	2307      	movs	r3, #7
 800f3e8:	1bdb      	subs	r3, r3, r7
 800f3ea:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f3ec:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f3ee:	6566      	str	r6, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f3f0:	65a6      	str	r6, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f3f2:	235c      	movs	r3, #92	; 0x5c
 800f3f4:	54e6      	strb	r6, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3f6:	9a01      	ldr	r2, [sp, #4]
 800f3f8:	9900      	ldr	r1, [sp, #0]
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	f000 fffe 	bl	80103fc <pxPortInitialiseStack>
 800f400:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f404:	2b00      	cmp	r3, #0
 800f406:	d000      	beq.n	800f40a <xTaskGenericCreate+0x9e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f408:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f40a:	f001 f83f 	bl	801048c <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f40e:	4a41      	ldr	r2, [pc, #260]	; (800f514 <xTaskGenericCreate+0x1a8>)
 800f410:	6813      	ldr	r3, [r2, #0]
 800f412:	3301      	adds	r3, #1
 800f414:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f416:	4b40      	ldr	r3, [pc, #256]	; (800f518 <xTaskGenericCreate+0x1ac>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d01b      	beq.n	800f456 <xTaskGenericCreate+0xea>
				if( xSchedulerRunning == pdFALSE )
 800f41e:	4b3f      	ldr	r3, [pc, #252]	; (800f51c <xTaskGenericCreate+0x1b0>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d11c      	bne.n	800f460 <xTaskGenericCreate+0xf4>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f426:	4b3c      	ldr	r3, [pc, #240]	; (800f518 <xTaskGenericCreate+0x1ac>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f42c:	9a08      	ldr	r2, [sp, #32]
 800f42e:	4293      	cmp	r3, r2
 800f430:	d816      	bhi.n	800f460 <xTaskGenericCreate+0xf4>
						pxCurrentTCB = pxNewTCB;
 800f432:	4b39      	ldr	r3, [pc, #228]	; (800f518 <xTaskGenericCreate+0x1ac>)
 800f434:	601c      	str	r4, [r3, #0]
 800f436:	e013      	b.n	800f460 <xTaskGenericCreate+0xf4>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f438:	0090      	lsls	r0, r2, #2
 800f43a:	f001 f8a3 	bl	8010584 <pvPortMalloc>
 800f43e:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800f440:	d19f      	bne.n	800f382 <xTaskGenericCreate+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f442:	2001      	movs	r0, #1
 800f444:	4240      	negs	r0, r0
}
 800f446:	b002      	add	sp, #8
 800f448:	bc80      	pop	{r7}
 800f44a:	46b8      	mov	r8, r7
 800f44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800f44e:	0028      	movs	r0, r5
 800f450:	f001 f924 	bl	801069c <vPortFree>
	if( pxNewTCB != NULL )
 800f454:	e7f5      	b.n	800f442 <xTaskGenericCreate+0xd6>
				pxCurrentTCB =  pxNewTCB;
 800f456:	4b30      	ldr	r3, [pc, #192]	; (800f518 <xTaskGenericCreate+0x1ac>)
 800f458:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f45a:	6813      	ldr	r3, [r2, #0]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d024      	beq.n	800f4aa <xTaskGenericCreate+0x13e>
			uxTaskNumber++;
 800f460:	4a2f      	ldr	r2, [pc, #188]	; (800f520 <xTaskGenericCreate+0x1b4>)
 800f462:	6813      	ldr	r3, [r2, #0]
 800f464:	3301      	adds	r3, #1
 800f466:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f468:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f46a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f46c:	4a2d      	ldr	r2, [pc, #180]	; (800f524 <xTaskGenericCreate+0x1b8>)
 800f46e:	6812      	ldr	r2, [r2, #0]
 800f470:	4293      	cmp	r3, r2
 800f472:	d901      	bls.n	800f478 <xTaskGenericCreate+0x10c>
 800f474:	4a2b      	ldr	r2, [pc, #172]	; (800f524 <xTaskGenericCreate+0x1b8>)
 800f476:	6013      	str	r3, [r2, #0]
 800f478:	0098      	lsls	r0, r3, #2
 800f47a:	18c0      	adds	r0, r0, r3
 800f47c:	0080      	lsls	r0, r0, #2
 800f47e:	4b2a      	ldr	r3, [pc, #168]	; (800f528 <xTaskGenericCreate+0x1bc>)
 800f480:	18c0      	adds	r0, r0, r3
 800f482:	0029      	movs	r1, r5
 800f484:	f7ff fbd6 	bl	800ec34 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f488:	f001 f80c 	bl	80104a4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f48c:	4b23      	ldr	r3, [pc, #140]	; (800f51c <xTaskGenericCreate+0x1b0>)
 800f48e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f490:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f492:	2b00      	cmp	r3, #0
 800f494:	d0d7      	beq.n	800f446 <xTaskGenericCreate+0xda>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f496:	4b20      	ldr	r3, [pc, #128]	; (800f518 <xTaskGenericCreate+0x1ac>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f49c:	9a08      	ldr	r2, [sp, #32]
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d2d1      	bcs.n	800f446 <xTaskGenericCreate+0xda>
				taskYIELD_IF_USING_PREEMPTION();
 800f4a2:	f000 ffe7 	bl	8010474 <vPortYield>
			xReturn = pdPASS;
 800f4a6:	2001      	movs	r0, #1
 800f4a8:	e7cd      	b.n	800f446 <xTaskGenericCreate+0xda>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f4aa:	4e1f      	ldr	r6, [pc, #124]	; (800f528 <xTaskGenericCreate+0x1bc>)
 800f4ac:	0030      	movs	r0, r6
 800f4ae:	f7ff fbb3 	bl	800ec18 <vListInitialise>
 800f4b2:	0030      	movs	r0, r6
 800f4b4:	3014      	adds	r0, #20
 800f4b6:	f7ff fbaf 	bl	800ec18 <vListInitialise>
 800f4ba:	0030      	movs	r0, r6
 800f4bc:	3028      	adds	r0, #40	; 0x28
 800f4be:	f7ff fbab 	bl	800ec18 <vListInitialise>
 800f4c2:	0030      	movs	r0, r6
 800f4c4:	303c      	adds	r0, #60	; 0x3c
 800f4c6:	f7ff fba7 	bl	800ec18 <vListInitialise>
 800f4ca:	0030      	movs	r0, r6
 800f4cc:	3050      	adds	r0, #80	; 0x50
 800f4ce:	f7ff fba3 	bl	800ec18 <vListInitialise>
 800f4d2:	0030      	movs	r0, r6
 800f4d4:	3064      	adds	r0, #100	; 0x64
 800f4d6:	f7ff fb9f 	bl	800ec18 <vListInitialise>
 800f4da:	0030      	movs	r0, r6
 800f4dc:	3078      	adds	r0, #120	; 0x78
 800f4de:	f7ff fb9b 	bl	800ec18 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800f4e2:	4f12      	ldr	r7, [pc, #72]	; (800f52c <xTaskGenericCreate+0x1c0>)
 800f4e4:	0038      	movs	r0, r7
 800f4e6:	f7ff fb97 	bl	800ec18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f4ea:	4e11      	ldr	r6, [pc, #68]	; (800f530 <xTaskGenericCreate+0x1c4>)
 800f4ec:	0030      	movs	r0, r6
 800f4ee:	f7ff fb93 	bl	800ec18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f4f2:	4810      	ldr	r0, [pc, #64]	; (800f534 <xTaskGenericCreate+0x1c8>)
 800f4f4:	f7ff fb90 	bl	800ec18 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f4f8:	480f      	ldr	r0, [pc, #60]	; (800f538 <xTaskGenericCreate+0x1cc>)
 800f4fa:	f7ff fb8d 	bl	800ec18 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f4fe:	480f      	ldr	r0, [pc, #60]	; (800f53c <xTaskGenericCreate+0x1d0>)
 800f500:	f7ff fb8a 	bl	800ec18 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f504:	4b0e      	ldr	r3, [pc, #56]	; (800f540 <xTaskGenericCreate+0x1d4>)
 800f506:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f508:	4b0e      	ldr	r3, [pc, #56]	; (800f544 <xTaskGenericCreate+0x1d8>)
 800f50a:	601e      	str	r6, [r3, #0]
}
 800f50c:	e7a8      	b.n	800f460 <xTaskGenericCreate+0xf4>
 800f50e:	46c0      	nop			; (mov r8, r8)
 800f510:	3fffffff 	.word	0x3fffffff
 800f514:	200016d0 	.word	0x200016d0
 800f518:	20001634 	.word	0x20001634
 800f51c:	20001728 	.word	0x20001728
 800f520:	200016dc 	.word	0x200016dc
 800f524:	200016e4 	.word	0x200016e4
 800f528:	20001640 	.word	0x20001640
 800f52c:	200016e8 	.word	0x200016e8
 800f530:	200016fc 	.word	0x200016fc
 800f534:	20001714 	.word	0x20001714
 800f538:	20001740 	.word	0x20001740
 800f53c:	2000172c 	.word	0x2000172c
 800f540:	20001638 	.word	0x20001638
 800f544:	2000163c 	.word	0x2000163c

0800f548 <uxTaskPriorityGet>:
	{
 800f548:	b510      	push	{r4, lr}
 800f54a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f54c:	f000 ff9e 	bl	801048c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f550:	2c00      	cmp	r4, #0
 800f552:	d004      	beq.n	800f55e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f554:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f556:	f000 ffa5 	bl	80104a4 <vPortExitCritical>
	}
 800f55a:	0020      	movs	r0, r4
 800f55c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f55e:	4b01      	ldr	r3, [pc, #4]	; (800f564 <uxTaskPriorityGet+0x1c>)
 800f560:	681c      	ldr	r4, [r3, #0]
 800f562:	e7f7      	b.n	800f554 <uxTaskPriorityGet+0xc>
 800f564:	20001634 	.word	0x20001634

0800f568 <vTaskPrioritySet>:
	{
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	0004      	movs	r4, r0
 800f56c:	000d      	movs	r5, r1
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f56e:	2906      	cmp	r1, #6
 800f570:	d900      	bls.n	800f574 <vTaskPrioritySet+0xc>
 800f572:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800f574:	f000 ff8a 	bl	801048c <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f578:	2c00      	cmp	r4, #0
 800f57a:	d00e      	beq.n	800f59a <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f57c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f57e:	4295      	cmp	r5, r2
 800f580:	d027      	beq.n	800f5d2 <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800f582:	d90d      	bls.n	800f5a0 <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800f584:	4b22      	ldr	r3, [pc, #136]	; (800f610 <vTaskPrioritySet+0xa8>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	42a3      	cmp	r3, r4
 800f58a:	d025      	beq.n	800f5d8 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f58c:	4b20      	ldr	r3, [pc, #128]	; (800f610 <vTaskPrioritySet+0xa8>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f592:	2600      	movs	r6, #0
 800f594:	429d      	cmp	r5, r3
 800f596:	4176      	adcs	r6, r6
 800f598:	e007      	b.n	800f5aa <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f59a:	4b1d      	ldr	r3, [pc, #116]	; (800f610 <vTaskPrioritySet+0xa8>)
 800f59c:	681c      	ldr	r4, [r3, #0]
 800f59e:	e7ed      	b.n	800f57c <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800f5a0:	4b1b      	ldr	r3, [pc, #108]	; (800f610 <vTaskPrioritySet+0xa8>)
 800f5a2:	681e      	ldr	r6, [r3, #0]
 800f5a4:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f5a6:	4273      	negs	r3, r6
 800f5a8:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f5aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f5ac:	4282      	cmp	r2, r0
 800f5ae:	d015      	beq.n	800f5dc <vTaskPrioritySet+0x74>
					pxTCB->uxBasePriority = uxNewPriority;
 800f5b0:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f5b2:	69a3      	ldr	r3, [r4, #24]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	db02      	blt.n	800f5be <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5b8:	2107      	movs	r1, #7
 800f5ba:	1b4d      	subs	r5, r1, r5
 800f5bc:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f5be:	0083      	lsls	r3, r0, #2
 800f5c0:	181b      	adds	r3, r3, r0
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4a13      	ldr	r2, [pc, #76]	; (800f614 <vTaskPrioritySet+0xac>)
 800f5c6:	189b      	adds	r3, r3, r2
 800f5c8:	6962      	ldr	r2, [r4, #20]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d008      	beq.n	800f5e0 <vTaskPrioritySet+0x78>
				if( xYieldRequired == pdTRUE )
 800f5ce:	2e01      	cmp	r6, #1
 800f5d0:	d01a      	beq.n	800f608 <vTaskPrioritySet+0xa0>
		taskEXIT_CRITICAL();
 800f5d2:	f000 ff67 	bl	80104a4 <vPortExitCritical>
	}
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f5d8:	2600      	movs	r6, #0
 800f5da:	e7e6      	b.n	800f5aa <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800f5dc:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f5de:	e7e7      	b.n	800f5b0 <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f5e0:	1d25      	adds	r5, r4, #4
 800f5e2:	0028      	movs	r0, r5
 800f5e4:	f7ff fb48 	bl	800ec78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f5e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f5ea:	4a0b      	ldr	r2, [pc, #44]	; (800f618 <vTaskPrioritySet+0xb0>)
 800f5ec:	6812      	ldr	r2, [r2, #0]
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d901      	bls.n	800f5f6 <vTaskPrioritySet+0x8e>
 800f5f2:	4a09      	ldr	r2, [pc, #36]	; (800f618 <vTaskPrioritySet+0xb0>)
 800f5f4:	6013      	str	r3, [r2, #0]
 800f5f6:	0098      	lsls	r0, r3, #2
 800f5f8:	18c0      	adds	r0, r0, r3
 800f5fa:	0080      	lsls	r0, r0, #2
 800f5fc:	4b05      	ldr	r3, [pc, #20]	; (800f614 <vTaskPrioritySet+0xac>)
 800f5fe:	18c0      	adds	r0, r0, r3
 800f600:	0029      	movs	r1, r5
 800f602:	f7ff fb17 	bl	800ec34 <vListInsertEnd>
 800f606:	e7e2      	b.n	800f5ce <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800f608:	f000 ff34 	bl	8010474 <vPortYield>
 800f60c:	e7e1      	b.n	800f5d2 <vTaskPrioritySet+0x6a>
 800f60e:	46c0      	nop			; (mov r8, r8)
 800f610:	20001634 	.word	0x20001634
 800f614:	20001640 	.word	0x20001640
 800f618:	200016e4 	.word	0x200016e4

0800f61c <vTaskStartScheduler>:
{
 800f61c:	b500      	push	{lr}
 800f61e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f620:	2300      	movs	r3, #0
 800f622:	9303      	str	r3, [sp, #12]
 800f624:	9302      	str	r3, [sp, #8]
 800f626:	9301      	str	r3, [sp, #4]
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	22a0      	movs	r2, #160	; 0xa0
 800f62c:	490b      	ldr	r1, [pc, #44]	; (800f65c <vTaskStartScheduler+0x40>)
 800f62e:	480c      	ldr	r0, [pc, #48]	; (800f660 <vTaskStartScheduler+0x44>)
 800f630:	f7ff fe9c 	bl	800f36c <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f634:	2801      	cmp	r0, #1
 800f636:	d001      	beq.n	800f63c <vTaskStartScheduler+0x20>
}
 800f638:	b005      	add	sp, #20
 800f63a:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800f63c:	f000 fd52 	bl	80100e4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f640:	2801      	cmp	r0, #1
 800f642:	d1f9      	bne.n	800f638 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f644:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f646:	4b07      	ldr	r3, [pc, #28]	; (800f664 <vTaskStartScheduler+0x48>)
 800f648:	2201      	movs	r2, #1
 800f64a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f64c:	4b06      	ldr	r3, [pc, #24]	; (800f668 <vTaskStartScheduler+0x4c>)
 800f64e:	2200      	movs	r2, #0
 800f650:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f652:	f7f8 fad1 	bl	8007bf8 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f656:	f000 fee3 	bl	8010420 <xPortStartScheduler>
}
 800f65a:	e7ed      	b.n	800f638 <vTaskStartScheduler+0x1c>
 800f65c:	0801b450 	.word	0x0801b450
 800f660:	0800f8e5 	.word	0x0800f8e5
 800f664:	20001728 	.word	0x20001728
 800f668:	20001754 	.word	0x20001754

0800f66c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f66c:	4a02      	ldr	r2, [pc, #8]	; (800f678 <vTaskSuspendAll+0xc>)
 800f66e:	6813      	ldr	r3, [r2, #0]
 800f670:	3301      	adds	r3, #1
 800f672:	6013      	str	r3, [r2, #0]
}
 800f674:	4770      	bx	lr
 800f676:	46c0      	nop			; (mov r8, r8)
 800f678:	200016d8 	.word	0x200016d8

0800f67c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f67c:	4b01      	ldr	r3, [pc, #4]	; (800f684 <xTaskGetTickCount+0x8>)
 800f67e:	6818      	ldr	r0, [r3, #0]
}
 800f680:	4770      	bx	lr
 800f682:	46c0      	nop			; (mov r8, r8)
 800f684:	20001754 	.word	0x20001754

0800f688 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f688:	4b01      	ldr	r3, [pc, #4]	; (800f690 <xTaskGetTickCountFromISR+0x8>)
 800f68a:	6818      	ldr	r0, [r3, #0]
}
 800f68c:	4770      	bx	lr
 800f68e:	46c0      	nop			; (mov r8, r8)
 800f690:	20001754 	.word	0x20001754

0800f694 <xTaskIncrementTick>:
{
 800f694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f696:	46d6      	mov	lr, sl
 800f698:	464f      	mov	r7, r9
 800f69a:	4646      	mov	r6, r8
 800f69c:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f69e:	4b3d      	ldr	r3, [pc, #244]	; (800f794 <xTaskIncrementTick+0x100>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d165      	bne.n	800f772 <xTaskIncrementTick+0xde>
		++xTickCount;
 800f6a6:	4b3c      	ldr	r3, [pc, #240]	; (800f798 <xTaskIncrementTick+0x104>)
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	3201      	adds	r2, #1
 800f6ac:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f6ae:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f6b0:	2f00      	cmp	r7, #0
 800f6b2:	d00f      	beq.n	800f6d4 <xTaskIncrementTick+0x40>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f6b4:	4b39      	ldr	r3, [pc, #228]	; (800f79c <xTaskIncrementTick+0x108>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f6b8:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f6ba:	42bb      	cmp	r3, r7
 800f6bc:	d84a      	bhi.n	800f754 <xTaskIncrementTick+0xc0>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6be:	4b38      	ldr	r3, [pc, #224]	; (800f7a0 <xTaskIncrementTick+0x10c>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d040      	beq.n	800f74a <xTaskIncrementTick+0xb6>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f6c8:	4b35      	ldr	r3, [pc, #212]	; (800f7a0 <xTaskIncrementTick+0x10c>)
 800f6ca:	4698      	mov	r8, r3
						prvAddTaskToReadyList( pxTCB );
 800f6cc:	4b35      	ldr	r3, [pc, #212]	; (800f7a4 <xTaskIncrementTick+0x110>)
 800f6ce:	4699      	mov	r9, r3
 800f6d0:	469a      	mov	sl, r3
 800f6d2:	e011      	b.n	800f6f8 <xTaskIncrementTick+0x64>
				taskSWITCH_DELAYED_LISTS();
 800f6d4:	4a32      	ldr	r2, [pc, #200]	; (800f7a0 <xTaskIncrementTick+0x10c>)
 800f6d6:	6811      	ldr	r1, [r2, #0]
 800f6d8:	4b33      	ldr	r3, [pc, #204]	; (800f7a8 <xTaskIncrementTick+0x114>)
 800f6da:	6818      	ldr	r0, [r3, #0]
 800f6dc:	6010      	str	r0, [r2, #0]
 800f6de:	6019      	str	r1, [r3, #0]
 800f6e0:	4a32      	ldr	r2, [pc, #200]	; (800f7ac <xTaskIncrementTick+0x118>)
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	f7ff fdea 	bl	800f2c0 <prvResetNextTaskUnblockTime>
 800f6ec:	e7e2      	b.n	800f6b4 <xTaskIncrementTick+0x20>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6ee:	4b2c      	ldr	r3, [pc, #176]	; (800f7a0 <xTaskIncrementTick+0x10c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d029      	beq.n	800f74c <xTaskIncrementTick+0xb8>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f6f8:	4643      	mov	r3, r8
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f700:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f702:	429f      	cmp	r7, r3
 800f704:	d332      	bcc.n	800f76c <xTaskIncrementTick+0xd8>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f706:	1d25      	adds	r5, r4, #4
 800f708:	0028      	movs	r0, r5
 800f70a:	f7ff fab5 	bl	800ec78 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f70e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f710:	2b00      	cmp	r3, #0
 800f712:	d003      	beq.n	800f71c <xTaskIncrementTick+0x88>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f714:	0020      	movs	r0, r4
 800f716:	3018      	adds	r0, #24
 800f718:	f7ff faae 	bl	800ec78 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f71c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f71e:	464a      	mov	r2, r9
 800f720:	6812      	ldr	r2, [r2, #0]
 800f722:	4293      	cmp	r3, r2
 800f724:	d901      	bls.n	800f72a <xTaskIncrementTick+0x96>
 800f726:	4652      	mov	r2, sl
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	0098      	lsls	r0, r3, #2
 800f72c:	18c0      	adds	r0, r0, r3
 800f72e:	0080      	lsls	r0, r0, #2
 800f730:	4b1f      	ldr	r3, [pc, #124]	; (800f7b0 <xTaskIncrementTick+0x11c>)
 800f732:	18c0      	adds	r0, r0, r3
 800f734:	0029      	movs	r1, r5
 800f736:	f7ff fa7d 	bl	800ec34 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f73a:	4b1e      	ldr	r3, [pc, #120]	; (800f7b4 <xTaskIncrementTick+0x120>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f742:	429a      	cmp	r2, r3
 800f744:	d3d3      	bcc.n	800f6ee <xTaskIncrementTick+0x5a>
								xSwitchRequired = pdTRUE;
 800f746:	2601      	movs	r6, #1
 800f748:	e7d1      	b.n	800f6ee <xTaskIncrementTick+0x5a>
BaseType_t xSwitchRequired = pdFALSE;
 800f74a:	2600      	movs	r6, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800f74c:	4b13      	ldr	r3, [pc, #76]	; (800f79c <xTaskIncrementTick+0x108>)
 800f74e:	2201      	movs	r2, #1
 800f750:	4252      	negs	r2, r2
 800f752:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f754:	4b17      	ldr	r3, [pc, #92]	; (800f7b4 <xTaskIncrementTick+0x120>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75a:	0093      	lsls	r3, r2, #2
 800f75c:	189b      	adds	r3, r3, r2
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4a13      	ldr	r2, [pc, #76]	; (800f7b0 <xTaskIncrementTick+0x11c>)
 800f762:	589b      	ldr	r3, [r3, r2]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d909      	bls.n	800f77c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800f768:	2601      	movs	r6, #1
 800f76a:	e007      	b.n	800f77c <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800f76c:	4a0b      	ldr	r2, [pc, #44]	; (800f79c <xTaskIncrementTick+0x108>)
 800f76e:	6013      	str	r3, [r2, #0]
							break;
 800f770:	e7f0      	b.n	800f754 <xTaskIncrementTick+0xc0>
		++uxPendedTicks;
 800f772:	4a11      	ldr	r2, [pc, #68]	; (800f7b8 <xTaskIncrementTick+0x124>)
 800f774:	6813      	ldr	r3, [r2, #0]
 800f776:	3301      	adds	r3, #1
 800f778:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f77a:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800f77c:	4b0f      	ldr	r3, [pc, #60]	; (800f7bc <xTaskIncrementTick+0x128>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d000      	beq.n	800f786 <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800f784:	2601      	movs	r6, #1
}
 800f786:	0030      	movs	r0, r6
 800f788:	bce0      	pop	{r5, r6, r7}
 800f78a:	46ba      	mov	sl, r7
 800f78c:	46b1      	mov	r9, r6
 800f78e:	46a8      	mov	r8, r5
 800f790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f792:	46c0      	nop			; (mov r8, r8)
 800f794:	200016d8 	.word	0x200016d8
 800f798:	20001754 	.word	0x20001754
 800f79c:	200000b8 	.word	0x200000b8
 800f7a0:	20001638 	.word	0x20001638
 800f7a4:	200016e4 	.word	0x200016e4
 800f7a8:	2000163c 	.word	0x2000163c
 800f7ac:	20001710 	.word	0x20001710
 800f7b0:	20001640 	.word	0x20001640
 800f7b4:	20001634 	.word	0x20001634
 800f7b8:	200016d4 	.word	0x200016d4
 800f7bc:	20001758 	.word	0x20001758

0800f7c0 <xTaskResumeAll>:
{
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	46ce      	mov	lr, r9
 800f7c4:	4647      	mov	r7, r8
 800f7c6:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800f7c8:	f000 fe60 	bl	801048c <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f7cc:	4b2f      	ldr	r3, [pc, #188]	; (800f88c <xTaskResumeAll+0xcc>)
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	3a01      	subs	r2, #1
 800f7d2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7d4:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7d6:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d14d      	bne.n	800f878 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7dc:	4b2c      	ldr	r3, [pc, #176]	; (800f890 <xTaskResumeAll+0xd0>)
 800f7de:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7e0:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d048      	beq.n	800f878 <xTaskResumeAll+0xb8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7e6:	4e2b      	ldr	r6, [pc, #172]	; (800f894 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f7e8:	46b0      	mov	r8, r6
					prvAddTaskToReadyList( pxTCB );
 800f7ea:	4f2b      	ldr	r7, [pc, #172]	; (800f898 <xTaskResumeAll+0xd8>)
 800f7ec:	46b9      	mov	r9, r7
 800f7ee:	e00d      	b.n	800f80c <xTaskResumeAll+0x4c>
 800f7f0:	0098      	lsls	r0, r3, #2
 800f7f2:	18c0      	adds	r0, r0, r3
 800f7f4:	0080      	lsls	r0, r0, #2
 800f7f6:	4b29      	ldr	r3, [pc, #164]	; (800f89c <xTaskResumeAll+0xdc>)
 800f7f8:	18c0      	adds	r0, r0, r3
 800f7fa:	0029      	movs	r1, r5
 800f7fc:	f7ff fa1a 	bl	800ec34 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f800:	4b27      	ldr	r3, [pc, #156]	; (800f8a0 <xTaskResumeAll+0xe0>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f808:	429a      	cmp	r2, r3
 800f80a:	d214      	bcs.n	800f836 <xTaskResumeAll+0x76>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f80c:	6833      	ldr	r3, [r6, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d015      	beq.n	800f83e <xTaskResumeAll+0x7e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f812:	4643      	mov	r3, r8
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f818:	0020      	movs	r0, r4
 800f81a:	3018      	adds	r0, #24
 800f81c:	f7ff fa2c 	bl	800ec78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f820:	1d25      	adds	r5, r4, #4
 800f822:	0028      	movs	r0, r5
 800f824:	f7ff fa28 	bl	800ec78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f82a:	683a      	ldr	r2, [r7, #0]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d9df      	bls.n	800f7f0 <xTaskResumeAll+0x30>
 800f830:	464a      	mov	r2, r9
 800f832:	6013      	str	r3, [r2, #0]
 800f834:	e7dc      	b.n	800f7f0 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
 800f836:	4b1b      	ldr	r3, [pc, #108]	; (800f8a4 <xTaskResumeAll+0xe4>)
 800f838:	2201      	movs	r2, #1
 800f83a:	601a      	str	r2, [r3, #0]
 800f83c:	e7e6      	b.n	800f80c <xTaskResumeAll+0x4c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f83e:	4b1a      	ldr	r3, [pc, #104]	; (800f8a8 <xTaskResumeAll+0xe8>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d013      	beq.n	800f86e <xTaskResumeAll+0xae>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f846:	4b18      	ldr	r3, [pc, #96]	; (800f8a8 <xTaskResumeAll+0xe8>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00f      	beq.n	800f86e <xTaskResumeAll+0xae>
							xYieldPending = pdTRUE;
 800f84e:	4e15      	ldr	r6, [pc, #84]	; (800f8a4 <xTaskResumeAll+0xe4>)
 800f850:	2501      	movs	r5, #1
						--uxPendedTicks;
 800f852:	4c15      	ldr	r4, [pc, #84]	; (800f8a8 <xTaskResumeAll+0xe8>)
 800f854:	e005      	b.n	800f862 <xTaskResumeAll+0xa2>
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	3b01      	subs	r3, #1
 800f85a:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f85c:	6823      	ldr	r3, [r4, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d005      	beq.n	800f86e <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
 800f862:	f7ff ff17 	bl	800f694 <xTaskIncrementTick>
 800f866:	2800      	cmp	r0, #0
 800f868:	d0f5      	beq.n	800f856 <xTaskResumeAll+0x96>
							xYieldPending = pdTRUE;
 800f86a:	6035      	str	r5, [r6, #0]
 800f86c:	e7f3      	b.n	800f856 <xTaskResumeAll+0x96>
				if( xYieldPending == pdTRUE )
 800f86e:	4b0d      	ldr	r3, [pc, #52]	; (800f8a4 <xTaskResumeAll+0xe4>)
 800f870:	681c      	ldr	r4, [r3, #0]
 800f872:	2c01      	cmp	r4, #1
 800f874:	d007      	beq.n	800f886 <xTaskResumeAll+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 800f876:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f878:	f000 fe14 	bl	80104a4 <vPortExitCritical>
}
 800f87c:	0020      	movs	r0, r4
 800f87e:	bcc0      	pop	{r6, r7}
 800f880:	46b9      	mov	r9, r7
 800f882:	46b0      	mov	r8, r6
 800f884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800f886:	f000 fdf5 	bl	8010474 <vPortYield>
 800f88a:	e7f5      	b.n	800f878 <xTaskResumeAll+0xb8>
 800f88c:	200016d8 	.word	0x200016d8
 800f890:	200016d0 	.word	0x200016d0
 800f894:	20001714 	.word	0x20001714
 800f898:	200016e4 	.word	0x200016e4
 800f89c:	20001640 	.word	0x20001640
 800f8a0:	20001634 	.word	0x20001634
 800f8a4:	20001758 	.word	0x20001758
 800f8a8:	200016d4 	.word	0x200016d4

0800f8ac <vTaskDelay>:
	{
 800f8ac:	b510      	push	{r4, lr}
 800f8ae:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8b0:	d010      	beq.n	800f8d4 <vTaskDelay+0x28>
			vTaskSuspendAll();
 800f8b2:	f7ff fedb 	bl	800f66c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f8b6:	4b09      	ldr	r3, [pc, #36]	; (800f8dc <vTaskDelay+0x30>)
 800f8b8:	6818      	ldr	r0, [r3, #0]
 800f8ba:	1904      	adds	r4, r0, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f8bc:	4b08      	ldr	r3, [pc, #32]	; (800f8e0 <vTaskDelay+0x34>)
 800f8be:	6818      	ldr	r0, [r3, #0]
 800f8c0:	3004      	adds	r0, #4
 800f8c2:	f7ff f9d9 	bl	800ec78 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f8c6:	0020      	movs	r0, r4
 800f8c8:	f7ff fd10 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f8cc:	f7ff ff78 	bl	800f7c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d101      	bne.n	800f8d8 <vTaskDelay+0x2c>
			portYIELD_WITHIN_API();
 800f8d4:	f000 fdce 	bl	8010474 <vPortYield>
	}
 800f8d8:	bd10      	pop	{r4, pc}
 800f8da:	46c0      	nop			; (mov r8, r8)
 800f8dc:	20001754 	.word	0x20001754
 800f8e0:	20001634 	.word	0x20001634

0800f8e4 <prvIdleTask>:
{
 800f8e4:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f8e6:	4e16      	ldr	r6, [pc, #88]	; (800f940 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f8e8:	4d16      	ldr	r5, [pc, #88]	; (800f944 <prvIdleTask+0x60>)
 800f8ea:	e003      	b.n	800f8f4 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f8ec:	4b16      	ldr	r3, [pc, #88]	; (800f948 <prvIdleTask+0x64>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d822      	bhi.n	800f93a <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f8f4:	6833      	ldr	r3, [r6, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d0f8      	beq.n	800f8ec <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f8fa:	f7ff feb7 	bl	800f66c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f8fe:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800f900:	f7ff ff5e 	bl	800f7c0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f904:	2c00      	cmp	r4, #0
 800f906:	d0f5      	beq.n	800f8f4 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f908:	f000 fdc0 	bl	801048c <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f90c:	4b0d      	ldr	r3, [pc, #52]	; (800f944 <prvIdleTask+0x60>)
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f912:	1d20      	adds	r0, r4, #4
 800f914:	f7ff f9b0 	bl	800ec78 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f918:	4a0c      	ldr	r2, [pc, #48]	; (800f94c <prvIdleTask+0x68>)
 800f91a:	6813      	ldr	r3, [r2, #0]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f920:	4a07      	ldr	r2, [pc, #28]	; (800f940 <prvIdleTask+0x5c>)
 800f922:	6813      	ldr	r3, [r2, #0]
 800f924:	3b01      	subs	r3, #1
 800f926:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f928:	f000 fdbc 	bl	80104a4 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f92c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f92e:	f000 feb5 	bl	801069c <vPortFree>
		vPortFree( pxTCB );
 800f932:	0020      	movs	r0, r4
 800f934:	f000 feb2 	bl	801069c <vPortFree>
	}
 800f938:	e7dc      	b.n	800f8f4 <prvIdleTask+0x10>
				taskYIELD();
 800f93a:	f000 fd9b 	bl	8010474 <vPortYield>
 800f93e:	e7d9      	b.n	800f8f4 <prvIdleTask+0x10>
 800f940:	200016e0 	.word	0x200016e0
 800f944:	20001740 	.word	0x20001740
 800f948:	20001640 	.word	0x20001640
 800f94c:	200016d0 	.word	0x200016d0

0800f950 <uxTaskGetSystemState>:
	{
 800f950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f952:	46c6      	mov	lr, r8
 800f954:	b500      	push	{lr}
 800f956:	0006      	movs	r6, r0
 800f958:	000d      	movs	r5, r1
 800f95a:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f95c:	f7ff fe86 	bl	800f66c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f960:	4b1e      	ldr	r3, [pc, #120]	; (800f9dc <uxTaskGetSystemState+0x8c>)
 800f962:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f964:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f966:	42ab      	cmp	r3, r5
 800f968:	d832      	bhi.n	800f9d0 <uxTaskGetSystemState+0x80>
 800f96a:	4d1d      	ldr	r5, [pc, #116]	; (800f9e0 <uxTaskGetSystemState+0x90>)
 800f96c:	002f      	movs	r7, r5
 800f96e:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f970:	0160      	lsls	r0, r4, #5
 800f972:	1830      	adds	r0, r6, r0
 800f974:	2201      	movs	r2, #1
 800f976:	0029      	movs	r1, r5
 800f978:	f7ff fc4a 	bl	800f210 <prvListTaskWithinSingleList>
 800f97c:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f97e:	002b      	movs	r3, r5
 800f980:	3d14      	subs	r5, #20
 800f982:	42bb      	cmp	r3, r7
 800f984:	d1f4      	bne.n	800f970 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f986:	4b17      	ldr	r3, [pc, #92]	; (800f9e4 <uxTaskGetSystemState+0x94>)
 800f988:	6819      	ldr	r1, [r3, #0]
 800f98a:	0160      	lsls	r0, r4, #5
 800f98c:	1830      	adds	r0, r6, r0
 800f98e:	2202      	movs	r2, #2
 800f990:	f7ff fc3e 	bl	800f210 <prvListTaskWithinSingleList>
 800f994:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f996:	4b14      	ldr	r3, [pc, #80]	; (800f9e8 <uxTaskGetSystemState+0x98>)
 800f998:	6819      	ldr	r1, [r3, #0]
 800f99a:	0160      	lsls	r0, r4, #5
 800f99c:	1830      	adds	r0, r6, r0
 800f99e:	2202      	movs	r2, #2
 800f9a0:	f7ff fc36 	bl	800f210 <prvListTaskWithinSingleList>
 800f9a4:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f9a6:	0160      	lsls	r0, r4, #5
 800f9a8:	1830      	adds	r0, r6, r0
 800f9aa:	2204      	movs	r2, #4
 800f9ac:	490f      	ldr	r1, [pc, #60]	; (800f9ec <uxTaskGetSystemState+0x9c>)
 800f9ae:	f7ff fc2f 	bl	800f210 <prvListTaskWithinSingleList>
 800f9b2:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f9b4:	0160      	lsls	r0, r4, #5
 800f9b6:	1830      	adds	r0, r6, r0
 800f9b8:	2203      	movs	r2, #3
 800f9ba:	490d      	ldr	r1, [pc, #52]	; (800f9f0 <uxTaskGetSystemState+0xa0>)
 800f9bc:	f7ff fc28 	bl	800f210 <prvListTaskWithinSingleList>
 800f9c0:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f9c2:	4643      	mov	r3, r8
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d003      	beq.n	800f9d0 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f9c8:	f7f8 f926 	bl	8007c18 <ulMainGetRunTimeCounterValue>
 800f9cc:	4643      	mov	r3, r8
 800f9ce:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f9d0:	f7ff fef6 	bl	800f7c0 <xTaskResumeAll>
	}
 800f9d4:	0020      	movs	r0, r4
 800f9d6:	bc80      	pop	{r7}
 800f9d8:	46b8      	mov	r8, r7
 800f9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9dc:	200016d0 	.word	0x200016d0
 800f9e0:	200016b8 	.word	0x200016b8
 800f9e4:	20001638 	.word	0x20001638
 800f9e8:	2000163c 	.word	0x2000163c
 800f9ec:	20001740 	.word	0x20001740
 800f9f0:	2000172c 	.word	0x2000172c

0800f9f4 <vTaskSwitchContext>:
{
 800f9f4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9f6:	4b36      	ldr	r3, [pc, #216]	; (800fad0 <vTaskSwitchContext+0xdc>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d003      	beq.n	800fa06 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f9fe:	4b35      	ldr	r3, [pc, #212]	; (800fad4 <vTaskSwitchContext+0xe0>)
 800fa00:	2201      	movs	r2, #1
 800fa02:	601a      	str	r2, [r3, #0]
}
 800fa04:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fa06:	4b33      	ldr	r3, [pc, #204]	; (800fad4 <vTaskSwitchContext+0xe0>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fa0c:	f7f8 f904 	bl	8007c18 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fa10:	4b31      	ldr	r3, [pc, #196]	; (800fad8 <vTaskSwitchContext+0xe4>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4298      	cmp	r0, r3
 800fa16:	d905      	bls.n	800fa24 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fa18:	4a30      	ldr	r2, [pc, #192]	; (800fadc <vTaskSwitchContext+0xe8>)
 800fa1a:	6812      	ldr	r2, [r2, #0]
 800fa1c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fa1e:	1acb      	subs	r3, r1, r3
 800fa20:	181b      	adds	r3, r3, r0
 800fa22:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fa24:	4b2c      	ldr	r3, [pc, #176]	; (800fad8 <vTaskSwitchContext+0xe4>)
 800fa26:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fa28:	4b2c      	ldr	r3, [pc, #176]	; (800fadc <vTaskSwitchContext+0xe8>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	6812      	ldr	r2, [r2, #0]
 800fa30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d937      	bls.n	800faa6 <vTaskSwitchContext+0xb2>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fa36:	4b29      	ldr	r3, [pc, #164]	; (800fadc <vTaskSwitchContext+0xe8>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa3c:	2214      	movs	r2, #20
 800fa3e:	4928      	ldr	r1, [pc, #160]	; (800fae0 <vTaskSwitchContext+0xec>)
 800fa40:	f004 f8d0 	bl	8013be4 <memcmp>
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d135      	bne.n	800fab4 <vTaskSwitchContext+0xc0>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fa48:	4b26      	ldr	r3, [pc, #152]	; (800fae4 <vTaskSwitchContext+0xf0>)
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	0093      	lsls	r3, r2, #2
 800fa4e:	189b      	adds	r3, r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	4a25      	ldr	r2, [pc, #148]	; (800fae8 <vTaskSwitchContext+0xf4>)
 800fa54:	589b      	ldr	r3, [r3, r2]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10b      	bne.n	800fa72 <vTaskSwitchContext+0x7e>
 800fa5a:	4a22      	ldr	r2, [pc, #136]	; (800fae4 <vTaskSwitchContext+0xf0>)
 800fa5c:	4822      	ldr	r0, [pc, #136]	; (800fae8 <vTaskSwitchContext+0xf4>)
 800fa5e:	6813      	ldr	r3, [r2, #0]
 800fa60:	3b01      	subs	r3, #1
 800fa62:	6013      	str	r3, [r2, #0]
 800fa64:	6811      	ldr	r1, [r2, #0]
 800fa66:	008b      	lsls	r3, r1, #2
 800fa68:	185b      	adds	r3, r3, r1
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	581b      	ldr	r3, [r3, r0]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d0f5      	beq.n	800fa5e <vTaskSwitchContext+0x6a>
 800fa72:	4b1c      	ldr	r3, [pc, #112]	; (800fae4 <vTaskSwitchContext+0xf0>)
 800fa74:	6819      	ldr	r1, [r3, #0]
 800fa76:	4c1c      	ldr	r4, [pc, #112]	; (800fae8 <vTaskSwitchContext+0xf4>)
 800fa78:	008b      	lsls	r3, r1, #2
 800fa7a:	185a      	adds	r2, r3, r1
 800fa7c:	0092      	lsls	r2, r2, #2
 800fa7e:	18a2      	adds	r2, r4, r2
 800fa80:	6850      	ldr	r0, [r2, #4]
 800fa82:	6840      	ldr	r0, [r0, #4]
 800fa84:	6050      	str	r0, [r2, #4]
 800fa86:	185b      	adds	r3, r3, r1
 800fa88:	009b      	lsls	r3, r3, #2
 800fa8a:	3308      	adds	r3, #8
 800fa8c:	191b      	adds	r3, r3, r4
 800fa8e:	4298      	cmp	r0, r3
 800fa90:	d017      	beq.n	800fac2 <vTaskSwitchContext+0xce>
 800fa92:	008b      	lsls	r3, r1, #2
 800fa94:	1859      	adds	r1, r3, r1
 800fa96:	0089      	lsls	r1, r1, #2
 800fa98:	4b13      	ldr	r3, [pc, #76]	; (800fae8 <vTaskSwitchContext+0xf4>)
 800fa9a:	1859      	adds	r1, r3, r1
 800fa9c:	684b      	ldr	r3, [r1, #4]
 800fa9e:	68da      	ldr	r2, [r3, #12]
 800faa0:	4b0e      	ldr	r3, [pc, #56]	; (800fadc <vTaskSwitchContext+0xe8>)
 800faa2:	601a      	str	r2, [r3, #0]
}
 800faa4:	e7ae      	b.n	800fa04 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800faa6:	4b0d      	ldr	r3, [pc, #52]	; (800fadc <vTaskSwitchContext+0xe8>)
 800faa8:	6818      	ldr	r0, [r3, #0]
 800faaa:	6819      	ldr	r1, [r3, #0]
 800faac:	3134      	adds	r1, #52	; 0x34
 800faae:	f7fe fa13 	bl	800ded8 <vApplicationStackOverflowHook>
 800fab2:	e7c0      	b.n	800fa36 <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fab4:	4b09      	ldr	r3, [pc, #36]	; (800fadc <vTaskSwitchContext+0xe8>)
 800fab6:	6818      	ldr	r0, [r3, #0]
 800fab8:	6819      	ldr	r1, [r3, #0]
 800faba:	3134      	adds	r1, #52	; 0x34
 800fabc:	f7fe fa0c 	bl	800ded8 <vApplicationStackOverflowHook>
 800fac0:	e7c2      	b.n	800fa48 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fac2:	6840      	ldr	r0, [r0, #4]
 800fac4:	008b      	lsls	r3, r1, #2
 800fac6:	185b      	adds	r3, r3, r1
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	18e3      	adds	r3, r4, r3
 800facc:	6058      	str	r0, [r3, #4]
 800face:	e7e0      	b.n	800fa92 <vTaskSwitchContext+0x9e>
 800fad0:	200016d8 	.word	0x200016d8
 800fad4:	20001758 	.word	0x20001758
 800fad8:	200016cc 	.word	0x200016cc
 800fadc:	20001634 	.word	0x20001634
 800fae0:	0801b480 	.word	0x0801b480
 800fae4:	200016e4 	.word	0x200016e4
 800fae8:	20001640 	.word	0x20001640

0800faec <vTaskPlaceOnEventList>:
{
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	000c      	movs	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800faf0:	4d0b      	ldr	r5, [pc, #44]	; (800fb20 <vTaskPlaceOnEventList+0x34>)
 800faf2:	6829      	ldr	r1, [r5, #0]
 800faf4:	3118      	adds	r1, #24
 800faf6:	f7ff f8a8 	bl	800ec4a <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fafa:	6828      	ldr	r0, [r5, #0]
 800fafc:	3004      	adds	r0, #4
 800fafe:	f7ff f8bb 	bl	800ec78 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fb02:	1c63      	adds	r3, r4, #1
 800fb04:	d005      	beq.n	800fb12 <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800fb06:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <vTaskPlaceOnEventList+0x38>)
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fb0c:	f7ff fbee 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
}
 800fb10:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fb12:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <vTaskPlaceOnEventList+0x34>)
 800fb14:	6819      	ldr	r1, [r3, #0]
 800fb16:	3104      	adds	r1, #4
 800fb18:	4803      	ldr	r0, [pc, #12]	; (800fb28 <vTaskPlaceOnEventList+0x3c>)
 800fb1a:	f7ff f88b 	bl	800ec34 <vListInsertEnd>
 800fb1e:	e7f7      	b.n	800fb10 <vTaskPlaceOnEventList+0x24>
 800fb20:	20001634 	.word	0x20001634
 800fb24:	20001754 	.word	0x20001754
 800fb28:	2000172c 	.word	0x2000172c

0800fb2c <vTaskPlaceOnEventListRestricted>:
	{
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	000c      	movs	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb30:	4d07      	ldr	r5, [pc, #28]	; (800fb50 <vTaskPlaceOnEventListRestricted+0x24>)
 800fb32:	6829      	ldr	r1, [r5, #0]
 800fb34:	3118      	adds	r1, #24
 800fb36:	f7ff f87d 	bl	800ec34 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fb3a:	6828      	ldr	r0, [r5, #0]
 800fb3c:	3004      	adds	r0, #4
 800fb3e:	f7ff f89b 	bl	800ec78 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800fb42:	4b04      	ldr	r3, [pc, #16]	; (800fb54 <vTaskPlaceOnEventListRestricted+0x28>)
 800fb44:	6818      	ldr	r0, [r3, #0]
 800fb46:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fb48:	f7ff fbd0 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
	}
 800fb4c:	bd70      	pop	{r4, r5, r6, pc}
 800fb4e:	46c0      	nop			; (mov r8, r8)
 800fb50:	20001634 	.word	0x20001634
 800fb54:	20001754 	.word	0x20001754

0800fb58 <xTaskRemoveFromEventList>:
{
 800fb58:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fb5a:	68c3      	ldr	r3, [r0, #12]
 800fb5c:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb5e:	0025      	movs	r5, r4
 800fb60:	3518      	adds	r5, #24
 800fb62:	0028      	movs	r0, r5
 800fb64:	f7ff f888 	bl	800ec78 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb68:	4b13      	ldr	r3, [pc, #76]	; (800fbb8 <xTaskRemoveFromEventList+0x60>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d11e      	bne.n	800fbae <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fb70:	1d25      	adds	r5, r4, #4
 800fb72:	0028      	movs	r0, r5
 800fb74:	f7ff f880 	bl	800ec78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fb7a:	4a10      	ldr	r2, [pc, #64]	; (800fbbc <xTaskRemoveFromEventList+0x64>)
 800fb7c:	6812      	ldr	r2, [r2, #0]
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d901      	bls.n	800fb86 <xTaskRemoveFromEventList+0x2e>
 800fb82:	4a0e      	ldr	r2, [pc, #56]	; (800fbbc <xTaskRemoveFromEventList+0x64>)
 800fb84:	6013      	str	r3, [r2, #0]
 800fb86:	0098      	lsls	r0, r3, #2
 800fb88:	18c0      	adds	r0, r0, r3
 800fb8a:	0080      	lsls	r0, r0, #2
 800fb8c:	4b0c      	ldr	r3, [pc, #48]	; (800fbc0 <xTaskRemoveFromEventList+0x68>)
 800fb8e:	18c0      	adds	r0, r0, r3
 800fb90:	0029      	movs	r1, r5
 800fb92:	f7ff f84f 	bl	800ec34 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb96:	4b0b      	ldr	r3, [pc, #44]	; (800fbc4 <xTaskRemoveFromEventList+0x6c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fb9e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d903      	bls.n	800fbac <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 800fba4:	4b08      	ldr	r3, [pc, #32]	; (800fbc8 <xTaskRemoveFromEventList+0x70>)
 800fba6:	2201      	movs	r2, #1
 800fba8:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fbaa:	3001      	adds	r0, #1
}
 800fbac:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbae:	0029      	movs	r1, r5
 800fbb0:	4806      	ldr	r0, [pc, #24]	; (800fbcc <xTaskRemoveFromEventList+0x74>)
 800fbb2:	f7ff f83f 	bl	800ec34 <vListInsertEnd>
 800fbb6:	e7ee      	b.n	800fb96 <xTaskRemoveFromEventList+0x3e>
 800fbb8:	200016d8 	.word	0x200016d8
 800fbbc:	200016e4 	.word	0x200016e4
 800fbc0:	20001640 	.word	0x20001640
 800fbc4:	20001634 	.word	0x20001634
 800fbc8:	20001758 	.word	0x20001758
 800fbcc:	20001714 	.word	0x20001714

0800fbd0 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fbd0:	4b03      	ldr	r3, [pc, #12]	; (800fbe0 <vTaskSetTimeOutState+0x10>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fbd6:	4b03      	ldr	r3, [pc, #12]	; (800fbe4 <vTaskSetTimeOutState+0x14>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	6043      	str	r3, [r0, #4]
}
 800fbdc:	4770      	bx	lr
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	20001710 	.word	0x20001710
 800fbe4:	20001754 	.word	0x20001754

0800fbe8 <xTaskCheckForTimeOut>:
{
 800fbe8:	b570      	push	{r4, r5, r6, lr}
 800fbea:	0004      	movs	r4, r0
 800fbec:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800fbee:	f000 fc4d 	bl	801048c <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fbf2:	4b10      	ldr	r3, [pc, #64]	; (800fc34 <xTaskCheckForTimeOut+0x4c>)
 800fbf4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fbf6:	682b      	ldr	r3, [r5, #0]
 800fbf8:	1c59      	adds	r1, r3, #1
 800fbfa:	d015      	beq.n	800fc28 <xTaskCheckForTimeOut+0x40>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fbfc:	490e      	ldr	r1, [pc, #56]	; (800fc38 <xTaskCheckForTimeOut+0x50>)
 800fbfe:	6809      	ldr	r1, [r1, #0]
 800fc00:	6820      	ldr	r0, [r4, #0]
 800fc02:	4288      	cmp	r0, r1
 800fc04:	d003      	beq.n	800fc0e <xTaskCheckForTimeOut+0x26>
			xReturn = pdTRUE;
 800fc06:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fc08:	6861      	ldr	r1, [r4, #4]
 800fc0a:	4291      	cmp	r1, r2
 800fc0c:	d90d      	bls.n	800fc2a <xTaskCheckForTimeOut+0x42>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fc0e:	6861      	ldr	r1, [r4, #4]
 800fc10:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800fc12:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fc14:	4283      	cmp	r3, r0
 800fc16:	d908      	bls.n	800fc2a <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fc18:	1a8a      	subs	r2, r1, r2
 800fc1a:	18d3      	adds	r3, r2, r3
 800fc1c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800fc1e:	0020      	movs	r0, r4
 800fc20:	f7ff ffd6 	bl	800fbd0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fc24:	2600      	movs	r6, #0
 800fc26:	e000      	b.n	800fc2a <xTaskCheckForTimeOut+0x42>
				xReturn = pdFALSE;
 800fc28:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800fc2a:	f000 fc3b 	bl	80104a4 <vPortExitCritical>
}
 800fc2e:	0030      	movs	r0, r6
 800fc30:	bd70      	pop	{r4, r5, r6, pc}
 800fc32:	46c0      	nop			; (mov r8, r8)
 800fc34:	20001754 	.word	0x20001754
 800fc38:	20001710 	.word	0x20001710

0800fc3c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fc3c:	4b01      	ldr	r3, [pc, #4]	; (800fc44 <vTaskMissedYield+0x8>)
 800fc3e:	2201      	movs	r2, #1
 800fc40:	601a      	str	r2, [r3, #0]
}
 800fc42:	4770      	bx	lr
 800fc44:	20001758 	.word	0x20001758

0800fc48 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <xTaskGetSchedulerState+0x18>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fc4c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d004      	beq.n	800fc5c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc52:	4b04      	ldr	r3, [pc, #16]	; (800fc64 <xTaskGetSchedulerState+0x1c>)
 800fc54:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fc56:	4243      	negs	r3, r0
 800fc58:	4158      	adcs	r0, r3
 800fc5a:	0040      	lsls	r0, r0, #1
	}
 800fc5c:	4770      	bx	lr
 800fc5e:	46c0      	nop			; (mov r8, r8)
 800fc60:	20001728 	.word	0x20001728
 800fc64:	200016d8 	.word	0x200016d8

0800fc68 <vTaskPriorityInherit>:
	{
 800fc68:	b570      	push	{r4, r5, r6, lr}
 800fc6a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fc6c:	d01a      	beq.n	800fca4 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fc6e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fc70:	4b19      	ldr	r3, [pc, #100]	; (800fcd8 <vTaskPriorityInherit+0x70>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d214      	bcs.n	800fca4 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc7a:	6983      	ldr	r3, [r0, #24]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	db05      	blt.n	800fc8c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc80:	4b15      	ldr	r3, [pc, #84]	; (800fcd8 <vTaskPriorityInherit+0x70>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fc86:	2307      	movs	r3, #7
 800fc88:	1a5b      	subs	r3, r3, r1
 800fc8a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fc8c:	0093      	lsls	r3, r2, #2
 800fc8e:	189b      	adds	r3, r3, r2
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4a12      	ldr	r2, [pc, #72]	; (800fcdc <vTaskPriorityInherit+0x74>)
 800fc94:	189b      	adds	r3, r3, r2
 800fc96:	6962      	ldr	r2, [r4, #20]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d004      	beq.n	800fca6 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fc9c:	4b0e      	ldr	r3, [pc, #56]	; (800fcd8 <vTaskPriorityInherit+0x70>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800fca4:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fca6:	1d25      	adds	r5, r4, #4
 800fca8:	0028      	movs	r0, r5
 800fcaa:	f7fe ffe5 	bl	800ec78 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fcae:	4b0a      	ldr	r3, [pc, #40]	; (800fcd8 <vTaskPriorityInherit+0x70>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800fcb6:	4a0a      	ldr	r2, [pc, #40]	; (800fce0 <vTaskPriorityInherit+0x78>)
 800fcb8:	6812      	ldr	r2, [r2, #0]
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d808      	bhi.n	800fcd0 <vTaskPriorityInherit+0x68>
 800fcbe:	0098      	lsls	r0, r3, #2
 800fcc0:	18c0      	adds	r0, r0, r3
 800fcc2:	0080      	lsls	r0, r0, #2
 800fcc4:	4b05      	ldr	r3, [pc, #20]	; (800fcdc <vTaskPriorityInherit+0x74>)
 800fcc6:	18c0      	adds	r0, r0, r3
 800fcc8:	0029      	movs	r1, r5
 800fcca:	f7fe ffb3 	bl	800ec34 <vListInsertEnd>
	}
 800fcce:	e7e9      	b.n	800fca4 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800fcd0:	4a03      	ldr	r2, [pc, #12]	; (800fce0 <vTaskPriorityInherit+0x78>)
 800fcd2:	6013      	str	r3, [r2, #0]
 800fcd4:	e7f3      	b.n	800fcbe <vTaskPriorityInherit+0x56>
 800fcd6:	46c0      	nop			; (mov r8, r8)
 800fcd8:	20001634 	.word	0x20001634
 800fcdc:	20001640 	.word	0x20001640
 800fce0:	200016e4 	.word	0x200016e4

0800fce4 <xTaskPriorityDisinherit>:
	{
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fce8:	d023      	beq.n	800fd32 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800fcea:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800fcec:	3b01      	subs	r3, #1
 800fcee:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fcf0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fcf2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800fcf4:	428a      	cmp	r2, r1
 800fcf6:	d01e      	beq.n	800fd36 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800fcf8:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d000      	beq.n	800fd00 <xTaskPriorityDisinherit+0x1c>
	}
 800fcfe:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fd00:	1d25      	adds	r5, r4, #4
 800fd02:	0028      	movs	r0, r5
 800fd04:	f7fe ffb8 	bl	800ec78 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fd08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fd0a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd0c:	2207      	movs	r2, #7
 800fd0e:	1ad2      	subs	r2, r2, r3
 800fd10:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fd12:	4a0a      	ldr	r2, [pc, #40]	; (800fd3c <xTaskPriorityDisinherit+0x58>)
 800fd14:	6812      	ldr	r2, [r2, #0]
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d901      	bls.n	800fd1e <xTaskPriorityDisinherit+0x3a>
 800fd1a:	4a08      	ldr	r2, [pc, #32]	; (800fd3c <xTaskPriorityDisinherit+0x58>)
 800fd1c:	6013      	str	r3, [r2, #0]
 800fd1e:	0098      	lsls	r0, r3, #2
 800fd20:	18c0      	adds	r0, r0, r3
 800fd22:	0080      	lsls	r0, r0, #2
 800fd24:	4b06      	ldr	r3, [pc, #24]	; (800fd40 <xTaskPriorityDisinherit+0x5c>)
 800fd26:	18c0      	adds	r0, r0, r3
 800fd28:	0029      	movs	r1, r5
 800fd2a:	f7fe ff83 	bl	800ec34 <vListInsertEnd>
					xReturn = pdTRUE;
 800fd2e:	2001      	movs	r0, #1
 800fd30:	e7e5      	b.n	800fcfe <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800fd32:	2000      	movs	r0, #0
 800fd34:	e7e3      	b.n	800fcfe <xTaskPriorityDisinherit+0x1a>
 800fd36:	2000      	movs	r0, #0
 800fd38:	e7e1      	b.n	800fcfe <xTaskPriorityDisinherit+0x1a>
 800fd3a:	46c0      	nop			; (mov r8, r8)
 800fd3c:	200016e4 	.word	0x200016e4
 800fd40:	20001640 	.word	0x20001640

0800fd44 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd46:	46ce      	mov	lr, r9
 800fd48:	4647      	mov	r7, r8
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b085      	sub	sp, #20
 800fd4e:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fd50:	2300      	movs	r3, #0
 800fd52:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fd54:	4b30      	ldr	r3, [pc, #192]	; (800fe18 <vTaskList+0xd4>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fd5a:	6818      	ldr	r0, [r3, #0]
 800fd5c:	0140      	lsls	r0, r0, #5
 800fd5e:	f000 fc11 	bl	8010584 <pvPortMalloc>
 800fd62:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 800fd64:	d053      	beq.n	800fe0e <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800fd66:	9903      	ldr	r1, [sp, #12]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	f7ff fdf1 	bl	800f950 <uxTaskGetSystemState>
 800fd6e:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800fd70:	2300      	movs	r3, #0
 800fd72:	9302      	str	r3, [sp, #8]
 800fd74:	9a02      	ldr	r2, [sp, #8]
 800fd76:	9b03      	ldr	r3, [sp, #12]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d245      	bcs.n	800fe08 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fd7c:	2343      	movs	r3, #67	; 0x43
 800fd7e:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fd80:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fd82:	4b26      	ldr	r3, [pc, #152]	; (800fe1c <vTaskList+0xd8>)
 800fd84:	4699      	mov	r9, r3
 800fd86:	e02a      	b.n	800fdde <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fd88:	3a02      	subs	r2, #2
 800fd8a:	1e53      	subs	r3, r2, #1
 800fd8c:	419a      	sbcs	r2, r3
 800fd8e:	4256      	negs	r6, r2
 800fd90:	43be      	bics	r6, r7
 800fd92:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fd94:	9b02      	ldr	r3, [sp, #8]
 800fd96:	015b      	lsls	r3, r3, #5
 800fd98:	18eb      	adds	r3, r5, r3
 800fd9a:	6859      	ldr	r1, [r3, #4]
 800fd9c:	0020      	movs	r0, r4
 800fd9e:	f7ff facf 	bl	800f340 <prvWriteNameToBuffer>
 800fda2:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fda4:	9b02      	ldr	r3, [sp, #8]
 800fda6:	9a02      	ldr	r2, [sp, #8]
 800fda8:	9902      	ldr	r1, [sp, #8]
 800fdaa:	015b      	lsls	r3, r3, #5
 800fdac:	18eb      	adds	r3, r5, r3
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	0149      	lsls	r1, r1, #5
 800fdb2:	1869      	adds	r1, r5, r1
 800fdb4:	6889      	ldr	r1, [r1, #8]
 800fdb6:	9101      	str	r1, [sp, #4]
 800fdb8:	0152      	lsls	r2, r2, #5
 800fdba:	18aa      	adds	r2, r5, r2
 800fdbc:	8b92      	ldrh	r2, [r2, #28]
 800fdbe:	9200      	str	r2, [sp, #0]
 800fdc0:	0032      	movs	r2, r6
 800fdc2:	4649      	mov	r1, r9
 800fdc4:	f004 fcde 	bl	8014784 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800fdc8:	0020      	movs	r0, r4
 800fdca:	f7f0 f9a5 	bl	8000118 <strlen>
 800fdce:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800fdd0:	9b02      	ldr	r3, [sp, #8]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	9302      	str	r3, [sp, #8]
 800fdd6:	9a02      	ldr	r2, [sp, #8]
 800fdd8:	9b03      	ldr	r3, [sp, #12]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d214      	bcs.n	800fe08 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fdde:	9b02      	ldr	r3, [sp, #8]
 800fde0:	015b      	lsls	r3, r3, #5
 800fde2:	18eb      	adds	r3, r5, r3
 800fde4:	7b1a      	ldrb	r2, [r3, #12]
 800fde6:	2a03      	cmp	r2, #3
 800fde8:	d00c      	beq.n	800fe04 <vTaskList+0xc0>
 800fdea:	d803      	bhi.n	800fdf4 <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 800fdec:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fdee:	2a01      	cmp	r2, #1
 800fdf0:	d1ca      	bne.n	800fd88 <vTaskList+0x44>
 800fdf2:	e7cf      	b.n	800fd94 <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fdf4:	3a04      	subs	r2, #4
 800fdf6:	1e53      	subs	r3, r2, #1
 800fdf8:	419a      	sbcs	r2, r3
 800fdfa:	4256      	negs	r6, r2
 800fdfc:	4643      	mov	r3, r8
 800fdfe:	439e      	bics	r6, r3
 800fe00:	3644      	adds	r6, #68	; 0x44
 800fe02:	e7c7      	b.n	800fd94 <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fe04:	2653      	movs	r6, #83	; 0x53
 800fe06:	e7c5      	b.n	800fd94 <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fe08:	0028      	movs	r0, r5
 800fe0a:	f000 fc47 	bl	801069c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe0e:	b005      	add	sp, #20
 800fe10:	bcc0      	pop	{r6, r7}
 800fe12:	46b9      	mov	r9, r7
 800fe14:	46b0      	mov	r8, r6
 800fe16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe18:	200016d0 	.word	0x200016d0
 800fe1c:	0801b458 	.word	0x0801b458

0800fe20 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fe20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe22:	46c6      	mov	lr, r8
 800fe24:	b500      	push	{lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fe2e:	4b2a      	ldr	r3, [pc, #168]	; (800fed8 <vTaskGetRunTimeStats+0xb8>)
 800fe30:	681a      	ldr	r2, [r3, #0]
 800fe32:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fe34:	6818      	ldr	r0, [r3, #0]
 800fe36:	0140      	lsls	r0, r0, #5
 800fe38:	f000 fba4 	bl	8010584 <pvPortMalloc>
 800fe3c:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800fe3e:	d015      	beq.n	800fe6c <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800fe40:	9903      	ldr	r1, [sp, #12]
 800fe42:	aa01      	add	r2, sp, #4
 800fe44:	f7ff fd84 	bl	800f950 <uxTaskGetSystemState>
 800fe48:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800fe4a:	9d01      	ldr	r5, [sp, #4]
 800fe4c:	2164      	movs	r1, #100	; 0x64
 800fe4e:	0028      	movs	r0, r5
 800fe50:	f7f0 f97e 	bl	8000150 <__udivsi3>
 800fe54:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fe56:	2d63      	cmp	r5, #99	; 0x63
 800fe58:	d905      	bls.n	800fe66 <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	9302      	str	r3, [sp, #8]
 800fe5e:	9a02      	ldr	r2, [sp, #8]
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d318      	bcc.n	800fe98 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fe66:	0038      	movs	r0, r7
 800fe68:	f000 fc18 	bl	801069c <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe6c:	b004      	add	sp, #16
 800fe6e:	bc80      	pop	{r7}
 800fe70:	46b8      	mov	r8, r7
 800fe72:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800fe74:	9b02      	ldr	r3, [sp, #8]
 800fe76:	015b      	lsls	r3, r3, #5
 800fe78:	18fb      	adds	r3, r7, r3
 800fe7a:	699a      	ldr	r2, [r3, #24]
 800fe7c:	4917      	ldr	r1, [pc, #92]	; (800fedc <vTaskGetRunTimeStats+0xbc>)
 800fe7e:	f004 fc81 	bl	8014784 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800fe82:	0020      	movs	r0, r4
 800fe84:	f7f0 f948 	bl	8000118 <strlen>
 800fe88:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800fe8a:	9b02      	ldr	r3, [sp, #8]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	9302      	str	r3, [sp, #8]
 800fe90:	9a02      	ldr	r2, [sp, #8]
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d2e6      	bcs.n	800fe66 <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800fe98:	9b02      	ldr	r3, [sp, #8]
 800fe9a:	015b      	lsls	r3, r3, #5
 800fe9c:	18fb      	adds	r3, r7, r3
 800fe9e:	699e      	ldr	r6, [r3, #24]
 800fea0:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fea2:	9b02      	ldr	r3, [sp, #8]
 800fea4:	015b      	lsls	r3, r3, #5
 800fea6:	18fb      	adds	r3, r7, r3
 800fea8:	6859      	ldr	r1, [r3, #4]
 800feaa:	0020      	movs	r0, r4
 800feac:	f7ff fa48 	bl	800f340 <prvWriteNameToBuffer>
 800feb0:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800feb2:	42ae      	cmp	r6, r5
 800feb4:	d3de      	bcc.n	800fe74 <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800feb6:	9b02      	ldr	r3, [sp, #8]
 800feb8:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800feba:	0029      	movs	r1, r5
 800febc:	0030      	movs	r0, r6
 800febe:	f7f0 f947 	bl	8000150 <__udivsi3>
 800fec2:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800fec4:	4642      	mov	r2, r8
 800fec6:	0152      	lsls	r2, r2, #5
 800fec8:	18ba      	adds	r2, r7, r2
 800feca:	6992      	ldr	r2, [r2, #24]
 800fecc:	4904      	ldr	r1, [pc, #16]	; (800fee0 <vTaskGetRunTimeStats+0xc0>)
 800fece:	0020      	movs	r0, r4
 800fed0:	f004 fc58 	bl	8014784 <siprintf>
 800fed4:	e7d5      	b.n	800fe82 <vTaskGetRunTimeStats+0x62>
 800fed6:	46c0      	nop			; (mov r8, r8)
 800fed8:	200016d0 	.word	0x200016d0
 800fedc:	0801b474 	.word	0x0801b474
 800fee0:	0801b468 	.word	0x0801b468

0800fee4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fee4:	4b05      	ldr	r3, [pc, #20]	; (800fefc <pvTaskIncrementMutexHeldCount+0x18>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d004      	beq.n	800fef6 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800feec:	4b03      	ldr	r3, [pc, #12]	; (800fefc <pvTaskIncrementMutexHeldCount+0x18>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800fef2:	3301      	adds	r3, #1
 800fef4:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fef6:	4b01      	ldr	r3, [pc, #4]	; (800fefc <pvTaskIncrementMutexHeldCount+0x18>)
 800fef8:	6818      	ldr	r0, [r3, #0]
	}
 800fefa:	4770      	bx	lr
 800fefc:	20001634 	.word	0x20001634

0800ff00 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ff00:	b570      	push	{r4, r5, r6, lr}
 800ff02:	0004      	movs	r4, r0
 800ff04:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ff06:	f000 fac1 	bl	801048c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ff0a:	4b20      	ldr	r3, [pc, #128]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d106      	bne.n	800ff22 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800ff14:	4b1d      	ldr	r3, [pc, #116]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	235c      	movs	r3, #92	; 0x5c
 800ff1a:	2101      	movs	r1, #1
 800ff1c:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800ff1e:	2d00      	cmp	r5, #0
 800ff20:	d117      	bne.n	800ff52 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ff22:	f000 fabf 	bl	80104a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ff26:	f000 fab1 	bl	801048c <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ff2a:	4b18      	ldr	r3, [pc, #96]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800ff30:	2d00      	cmp	r5, #0
 800ff32:	d005      	beq.n	800ff40 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800ff34:	2c00      	cmp	r4, #0
 800ff36:	d022      	beq.n	800ff7e <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ff38:	4b14      	ldr	r3, [pc, #80]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800ff40:	4b12      	ldr	r3, [pc, #72]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	235c      	movs	r3, #92	; 0x5c
 800ff46:	2100      	movs	r1, #0
 800ff48:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800ff4a:	f000 faab 	bl	80104a4 <vPortExitCritical>

		return ulReturn;
	}
 800ff4e:	0028      	movs	r0, r5
 800ff50:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ff52:	4b0e      	ldr	r3, [pc, #56]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	3004      	adds	r0, #4
 800ff58:	f7fe fe8e 	bl	800ec78 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800ff5c:	1c6b      	adds	r3, r5, #1
 800ff5e:	d007      	beq.n	800ff70 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800ff60:	4b0b      	ldr	r3, [pc, #44]	; (800ff90 <ulTaskNotifyTake+0x90>)
 800ff62:	6818      	ldr	r0, [r3, #0]
 800ff64:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ff66:	f7ff f9c1 	bl	800f2ec <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ff6a:	f000 fa83 	bl	8010474 <vPortYield>
 800ff6e:	e7d8      	b.n	800ff22 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ff70:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff72:	6819      	ldr	r1, [r3, #0]
 800ff74:	3104      	adds	r1, #4
 800ff76:	4807      	ldr	r0, [pc, #28]	; (800ff94 <ulTaskNotifyTake+0x94>)
 800ff78:	f7fe fe5c 	bl	800ec34 <vListInsertEnd>
 800ff7c:	e7f5      	b.n	800ff6a <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800ff7e:	4b03      	ldr	r3, [pc, #12]	; (800ff8c <ulTaskNotifyTake+0x8c>)
 800ff80:	681a      	ldr	r2, [r3, #0]
 800ff82:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800ff84:	3b01      	subs	r3, #1
 800ff86:	6593      	str	r3, [r2, #88]	; 0x58
 800ff88:	e7da      	b.n	800ff40 <ulTaskNotifyTake+0x40>
 800ff8a:	46c0      	nop			; (mov r8, r8)
 800ff8c:	20001634 	.word	0x20001634
 800ff90:	20001754 	.word	0x20001754
 800ff94:	2000172c 	.word	0x2000172c

0800ff98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9a:	0005      	movs	r5, r0
 800ff9c:	000f      	movs	r7, r1
 800ff9e:	0014      	movs	r4, r2
 800ffa0:	001e      	movs	r6, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800ffa2:	f000 fa73 	bl	801048c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d001      	beq.n	800ffae <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ffaa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800ffac:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800ffae:	225c      	movs	r2, #92	; 0x5c
 800ffb0:	5cab      	ldrb	r3, [r5, r2]
 800ffb2:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800ffb4:	2102      	movs	r1, #2
 800ffb6:	54a9      	strb	r1, [r5, r2]

			switch( eAction )
 800ffb8:	2c03      	cmp	r4, #3
 800ffba:	d018      	beq.n	800ffee <xTaskGenericNotify+0x56>
 800ffbc:	d807      	bhi.n	800ffce <xTaskGenericNotify+0x36>
 800ffbe:	2c01      	cmp	r4, #1
 800ffc0:	d00b      	beq.n	800ffda <xTaskGenericNotify+0x42>
 800ffc2:	2c02      	cmp	r4, #2
 800ffc4:	d10c      	bne.n	800ffe0 <xTaskGenericNotify+0x48>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ffc6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800ffc8:	3201      	adds	r2, #1
 800ffca:	65aa      	str	r2, [r5, #88]	; 0x58
					break;
 800ffcc:	e008      	b.n	800ffe0 <xTaskGenericNotify+0x48>
			switch( eAction )
 800ffce:	2c04      	cmp	r4, #4
 800ffd0:	d106      	bne.n	800ffe0 <xTaskGenericNotify+0x48>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d02a      	beq.n	801002c <xTaskGenericNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ffd6:	65af      	str	r7, [r5, #88]	; 0x58
 800ffd8:	e002      	b.n	800ffe0 <xTaskGenericNotify+0x48>
					pxTCB->ulNotifiedValue |= ulValue;
 800ffda:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800ffdc:	430f      	orrs	r7, r1
 800ffde:	65af      	str	r7, [r5, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800ffe0:	2401      	movs	r4, #1
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	d005      	beq.n	800fff2 <xTaskGenericNotify+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ffe6:	f000 fa5d 	bl	80104a4 <vPortExitCritical>

		return xReturn;
	}
 800ffea:	0020      	movs	r0, r4
 800ffec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 800ffee:	65af      	str	r7, [r5, #88]	; 0x58
					break;
 800fff0:	e7f6      	b.n	800ffe0 <xTaskGenericNotify+0x48>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fff2:	1d2c      	adds	r4, r5, #4
 800fff4:	0020      	movs	r0, r4
 800fff6:	f7fe fe3f 	bl	800ec78 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fffa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fffc:	4a0c      	ldr	r2, [pc, #48]	; (8010030 <xTaskGenericNotify+0x98>)
 800fffe:	6812      	ldr	r2, [r2, #0]
 8010000:	4293      	cmp	r3, r2
 8010002:	d901      	bls.n	8010008 <xTaskGenericNotify+0x70>
 8010004:	4a0a      	ldr	r2, [pc, #40]	; (8010030 <xTaskGenericNotify+0x98>)
 8010006:	6013      	str	r3, [r2, #0]
 8010008:	0098      	lsls	r0, r3, #2
 801000a:	18c0      	adds	r0, r0, r3
 801000c:	0080      	lsls	r0, r0, #2
 801000e:	4b09      	ldr	r3, [pc, #36]	; (8010034 <xTaskGenericNotify+0x9c>)
 8010010:	18c0      	adds	r0, r0, r3
 8010012:	0021      	movs	r1, r4
 8010014:	f7fe fe0e 	bl	800ec34 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010018:	4b07      	ldr	r3, [pc, #28]	; (8010038 <xTaskGenericNotify+0xa0>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801001e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010020:	2401      	movs	r4, #1
 8010022:	429a      	cmp	r2, r3
 8010024:	d9df      	bls.n	800ffe6 <xTaskGenericNotify+0x4e>
					taskYIELD_IF_USING_PREEMPTION();
 8010026:	f000 fa25 	bl	8010474 <vPortYield>
 801002a:	e7dc      	b.n	800ffe6 <xTaskGenericNotify+0x4e>
						xReturn = pdFAIL;
 801002c:	2400      	movs	r4, #0
 801002e:	e7da      	b.n	800ffe6 <xTaskGenericNotify+0x4e>
 8010030:	200016e4 	.word	0x200016e4
 8010034:	20001640 	.word	0x20001640
 8010038:	20001634 	.word	0x20001634

0801003c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801003c:	b510      	push	{r4, lr}
 801003e:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010040:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010042:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010044:	4291      	cmp	r1, r2
 8010046:	d80c      	bhi.n	8010062 <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010048:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801004a:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801004c:	69a3      	ldr	r3, [r4, #24]
 801004e:	429a      	cmp	r2, r3
 8010050:	d300      	bcc.n	8010054 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8010052:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010054:	1d21      	adds	r1, r4, #4
 8010056:	4b09      	ldr	r3, [pc, #36]	; (801007c <prvInsertTimerInActiveList+0x40>)
 8010058:	6818      	ldr	r0, [r3, #0]
 801005a:	f7fe fdf6 	bl	800ec4a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801005e:	2000      	movs	r0, #0
 8010060:	e7f7      	b.n	8010052 <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010062:	429a      	cmp	r2, r3
 8010064:	d202      	bcs.n	801006c <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 8010066:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010068:	4299      	cmp	r1, r3
 801006a:	d2f2      	bcs.n	8010052 <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801006c:	1d21      	adds	r1, r4, #4
 801006e:	4b04      	ldr	r3, [pc, #16]	; (8010080 <prvInsertTimerInActiveList+0x44>)
 8010070:	6818      	ldr	r0, [r3, #0]
 8010072:	f7fe fdea 	bl	800ec4a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010076:	2000      	movs	r0, #0
 8010078:	e7eb      	b.n	8010052 <prvInsertTimerInActiveList+0x16>
 801007a:	46c0      	nop			; (mov r8, r8)
 801007c:	20001760 	.word	0x20001760
 8010080:	2000175c 	.word	0x2000175c

08010084 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010084:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010086:	f000 fa01 	bl	801048c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801008a:	4b10      	ldr	r3, [pc, #64]	; (80100cc <prvCheckForValidListAndQueue+0x48>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d002      	beq.n	8010098 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010092:	f000 fa07 	bl	80104a4 <vPortExitCritical>
}
 8010096:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010098:	4d0d      	ldr	r5, [pc, #52]	; (80100d0 <prvCheckForValidListAndQueue+0x4c>)
 801009a:	0028      	movs	r0, r5
 801009c:	f7fe fdbc 	bl	800ec18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80100a0:	4c0c      	ldr	r4, [pc, #48]	; (80100d4 <prvCheckForValidListAndQueue+0x50>)
 80100a2:	0020      	movs	r0, r4
 80100a4:	f7fe fdb8 	bl	800ec18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80100a8:	4b0b      	ldr	r3, [pc, #44]	; (80100d8 <prvCheckForValidListAndQueue+0x54>)
 80100aa:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80100ac:	4b0b      	ldr	r3, [pc, #44]	; (80100dc <prvCheckForValidListAndQueue+0x58>)
 80100ae:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80100b0:	2200      	movs	r2, #0
 80100b2:	2110      	movs	r1, #16
 80100b4:	2004      	movs	r0, #4
 80100b6:	f7fe feb0 	bl	800ee1a <xQueueGenericCreate>
 80100ba:	4b04      	ldr	r3, [pc, #16]	; (80100cc <prvCheckForValidListAndQueue+0x48>)
 80100bc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80100be:	2800      	cmp	r0, #0
 80100c0:	d0e7      	beq.n	8010092 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80100c2:	4907      	ldr	r1, [pc, #28]	; (80100e0 <prvCheckForValidListAndQueue+0x5c>)
 80100c4:	f7ff f870 	bl	800f1a8 <vQueueAddToRegistry>
 80100c8:	e7e3      	b.n	8010092 <prvCheckForValidListAndQueue+0xe>
 80100ca:	46c0      	nop			; (mov r8, r8)
 80100cc:	20001790 	.word	0x20001790
 80100d0:	20001764 	.word	0x20001764
 80100d4:	20001778 	.word	0x20001778
 80100d8:	2000175c 	.word	0x2000175c
 80100dc:	20001760 	.word	0x20001760
 80100e0:	0801b494 	.word	0x0801b494

080100e4 <xTimerCreateTimerTask>:
{
 80100e4:	b500      	push	{lr}
 80100e6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 80100e8:	f7ff ffcc 	bl	8010084 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80100ec:	4b09      	ldr	r3, [pc, #36]	; (8010114 <xTimerCreateTimerTask+0x30>)
 80100ee:	681b      	ldr	r3, [r3, #0]
BaseType_t xReturn = pdFAIL;
 80100f0:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00b      	beq.n	801010e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80100f6:	2300      	movs	r3, #0
 80100f8:	9303      	str	r3, [sp, #12]
 80100fa:	9302      	str	r3, [sp, #8]
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	3303      	adds	r3, #3
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	2300      	movs	r3, #0
 8010104:	22a0      	movs	r2, #160	; 0xa0
 8010106:	4904      	ldr	r1, [pc, #16]	; (8010118 <xTimerCreateTimerTask+0x34>)
 8010108:	4804      	ldr	r0, [pc, #16]	; (801011c <xTimerCreateTimerTask+0x38>)
 801010a:	f7ff f92f 	bl	800f36c <xTaskGenericCreate>
}
 801010e:	b005      	add	sp, #20
 8010110:	bd00      	pop	{pc}
 8010112:	46c0      	nop			; (mov r8, r8)
 8010114:	20001790 	.word	0x20001790
 8010118:	0801b49c 	.word	0x0801b49c
 801011c:	0801025d 	.word	0x0801025d

08010120 <xTimerCreate>:
{
 8010120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010122:	b083      	sub	sp, #12
 8010124:	0007      	movs	r7, r0
 8010126:	000d      	movs	r5, r1
 8010128:	0016      	movs	r6, r2
 801012a:	9301      	str	r3, [sp, #4]
		pxNewTimer = NULL;
 801012c:	2400      	movs	r4, #0
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 801012e:	2900      	cmp	r1, #0
 8010130:	d010      	beq.n	8010154 <xTimerCreate+0x34>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8010132:	202c      	movs	r0, #44	; 0x2c
 8010134:	f000 fa26 	bl	8010584 <pvPortMalloc>
 8010138:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 801013a:	d00b      	beq.n	8010154 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 801013c:	f7ff ffa2 	bl	8010084 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8010140:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010142:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8010144:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8010146:	9b01      	ldr	r3, [sp, #4]
 8010148:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801014a:	9b08      	ldr	r3, [sp, #32]
 801014c:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801014e:	1d20      	adds	r0, r4, #4
 8010150:	f7fe fd6d 	bl	800ec2e <vListInitialiseItem>
}
 8010154:	0020      	movs	r0, r4
 8010156:	b003      	add	sp, #12
 8010158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801015c <xTimerGenericCommand>:
{
 801015c:	b530      	push	{r4, r5, lr}
 801015e:	b085      	sub	sp, #20
 8010160:	0004      	movs	r4, r0
 8010162:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 8010164:	4b12      	ldr	r3, [pc, #72]	; (80101b0 <xTimerGenericCommand+0x54>)
 8010166:	6818      	ldr	r0, [r3, #0]
 8010168:	2800      	cmp	r0, #0
 801016a:	d01f      	beq.n	80101ac <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 801016c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801016e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010170:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010172:	2905      	cmp	r1, #5
 8010174:	dc13      	bgt.n	801019e <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010176:	f7ff fd67 	bl	800fc48 <xTaskGetSchedulerState>
 801017a:	2802      	cmp	r0, #2
 801017c:	d007      	beq.n	801018e <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801017e:	4b0c      	ldr	r3, [pc, #48]	; (80101b0 <xTimerGenericCommand+0x54>)
 8010180:	6818      	ldr	r0, [r3, #0]
 8010182:	2300      	movs	r3, #0
 8010184:	2200      	movs	r2, #0
 8010186:	4669      	mov	r1, sp
 8010188:	f7fe fe6f 	bl	800ee6a <xQueueGenericSend>
 801018c:	e00c      	b.n	80101a8 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801018e:	4b08      	ldr	r3, [pc, #32]	; (80101b0 <xTimerGenericCommand+0x54>)
 8010190:	6818      	ldr	r0, [r3, #0]
 8010192:	2300      	movs	r3, #0
 8010194:	9a08      	ldr	r2, [sp, #32]
 8010196:	4669      	mov	r1, sp
 8010198:	f7fe fe67 	bl	800ee6a <xQueueGenericSend>
 801019c:	e004      	b.n	80101a8 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801019e:	2300      	movs	r3, #0
 80101a0:	002a      	movs	r2, r5
 80101a2:	4669      	mov	r1, sp
 80101a4:	f7fe fedd 	bl	800ef62 <xQueueGenericSendFromISR>
}
 80101a8:	b005      	add	sp, #20
 80101aa:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80101ac:	2000      	movs	r0, #0
	return xReturn;
 80101ae:	e7fb      	b.n	80101a8 <xTimerGenericCommand+0x4c>
 80101b0:	20001790 	.word	0x20001790

080101b4 <prvSampleTimeNow>:
{
 80101b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101b6:	46d6      	mov	lr, sl
 80101b8:	464f      	mov	r7, r9
 80101ba:	4646      	mov	r6, r8
 80101bc:	b5c0      	push	{r6, r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 80101c2:	f7ff fa5b 	bl	800f67c <xTaskGetTickCount>
 80101c6:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 80101c8:	4b21      	ldr	r3, [pc, #132]	; (8010250 <prvSampleTimeNow+0x9c>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4283      	cmp	r3, r0
 80101ce:	d80a      	bhi.n	80101e6 <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 80101d0:	2300      	movs	r3, #0
 80101d2:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80101d4:	4b1e      	ldr	r3, [pc, #120]	; (8010250 <prvSampleTimeNow+0x9c>)
 80101d6:	601c      	str	r4, [r3, #0]
}
 80101d8:	0020      	movs	r0, r4
 80101da:	b004      	add	sp, #16
 80101dc:	bce0      	pop	{r5, r6, r7}
 80101de:	46ba      	mov	sl, r7
 80101e0:	46b1      	mov	r9, r6
 80101e2:	46a8      	mov	r8, r5
 80101e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101e6:	4b1b      	ldr	r3, [pc, #108]	; (8010254 <prvSampleTimeNow+0xa0>)
 80101e8:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80101ea:	2300      	movs	r3, #0
 80101ec:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80101ee:	4643      	mov	r3, r8
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	2a00      	cmp	r2, #0
 80101f6:	d023      	beq.n	8010240 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80101fe:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010200:	1d2f      	adds	r7, r5, #4
 8010202:	0038      	movs	r0, r7
 8010204:	f7fe fd38 	bl	800ec78 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010208:	0028      	movs	r0, r5
 801020a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801020c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801020e:	69eb      	ldr	r3, [r5, #28]
 8010210:	2b01      	cmp	r3, #1
 8010212:	d1ec      	bne.n	80101ee <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010214:	69ab      	ldr	r3, [r5, #24]
 8010216:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010218:	459a      	cmp	sl, r3
 801021a:	d209      	bcs.n	8010230 <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801021c:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801021e:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010220:	4b0c      	ldr	r3, [pc, #48]	; (8010254 <prvSampleTimeNow+0xa0>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	9303      	str	r3, [sp, #12]
 8010226:	0039      	movs	r1, r7
 8010228:	0018      	movs	r0, r3
 801022a:	f7fe fd0e 	bl	800ec4a <vListInsert>
 801022e:	e7de      	b.n	80101ee <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010230:	464b      	mov	r3, r9
 8010232:	9300      	str	r3, [sp, #0]
 8010234:	4652      	mov	r2, sl
 8010236:	4649      	mov	r1, r9
 8010238:	0028      	movs	r0, r5
 801023a:	f7ff ff8f 	bl	801015c <xTimerGenericCommand>
 801023e:	e7d6      	b.n	80101ee <prvSampleTimeNow+0x3a>
	pxCurrentTimerList = pxOverflowTimerList;
 8010240:	4a05      	ldr	r2, [pc, #20]	; (8010258 <prvSampleTimeNow+0xa4>)
 8010242:	4904      	ldr	r1, [pc, #16]	; (8010254 <prvSampleTimeNow+0xa0>)
 8010244:	6810      	ldr	r0, [r2, #0]
 8010246:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8010248:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 801024a:	2301      	movs	r3, #1
 801024c:	6033      	str	r3, [r6, #0]
 801024e:	e7c1      	b.n	80101d4 <prvSampleTimeNow+0x20>
 8010250:	2000178c 	.word	0x2000178c
 8010254:	2000175c 	.word	0x2000175c
 8010258:	20001760 	.word	0x20001760

0801025c <prvTimerTask>:
{
 801025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025e:	46c6      	mov	lr, r8
 8010260:	b500      	push	{lr}
 8010262:	b08c      	sub	sp, #48	; 0x30
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010264:	2500      	movs	r5, #0
 8010266:	4e54      	ldr	r6, [pc, #336]	; (80103b8 <prvTimerTask+0x15c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010268:	4b54      	ldr	r3, [pc, #336]	; (80103bc <prvTimerTask+0x160>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681f      	ldr	r7, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801026e:	2f00      	cmp	r7, #0
 8010270:	d100      	bne.n	8010274 <prvTimerTask+0x18>
 8010272:	e094      	b.n	801039e <prvTimerTask+0x142>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8010278:	f7ff f9f8 	bl	800f66c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801027c:	a808      	add	r0, sp, #32
 801027e:	f7ff ff99 	bl	80101b4 <prvSampleTimeNow>
 8010282:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010284:	9b08      	ldr	r3, [sp, #32]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d000      	beq.n	801028c <prvTimerTask+0x30>
 801028a:	e092      	b.n	80103b2 <prvTimerTask+0x156>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801028c:	42b8      	cmp	r0, r7
 801028e:	d20a      	bcs.n	80102a6 <prvTimerTask+0x4a>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010290:	1b39      	subs	r1, r7, r4
 8010292:	4b4b      	ldr	r3, [pc, #300]	; (80103c0 <prvTimerTask+0x164>)
 8010294:	6818      	ldr	r0, [r3, #0]
 8010296:	f7fe ff9b 	bl	800f1d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801029a:	f7ff fa91 	bl	800f7c0 <xTaskResumeAll>
 801029e:	2800      	cmp	r0, #0
 80102a0:	d026      	beq.n	80102f0 <prvTimerTask+0x94>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80102a2:	4f47      	ldr	r7, [pc, #284]	; (80103c0 <prvTimerTask+0x164>)
}
 80102a4:	e034      	b.n	8010310 <prvTimerTask+0xb4>
				( void ) xTaskResumeAll();
 80102a6:	f7ff fa8b 	bl	800f7c0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80102aa:	4b44      	ldr	r3, [pc, #272]	; (80103bc <prvTimerTask+0x160>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	4698      	mov	r8, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102b4:	1d18      	adds	r0, r3, #4
 80102b6:	f7fe fcdf 	bl	800ec78 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80102ba:	4643      	mov	r3, r8
 80102bc:	69db      	ldr	r3, [r3, #28]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d004      	beq.n	80102cc <prvTimerTask+0x70>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102c2:	4643      	mov	r3, r8
 80102c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c6:	4640      	mov	r0, r8
 80102c8:	4798      	blx	r3
}
 80102ca:	e7ea      	b.n	80102a2 <prvTimerTask+0x46>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80102cc:	4643      	mov	r3, r8
 80102ce:	699b      	ldr	r3, [r3, #24]
 80102d0:	18f9      	adds	r1, r7, r3
 80102d2:	003b      	movs	r3, r7
 80102d4:	0022      	movs	r2, r4
 80102d6:	4640      	mov	r0, r8
 80102d8:	f7ff feb0 	bl	801003c <prvInsertTimerInActiveList>
 80102dc:	2801      	cmp	r0, #1
 80102de:	d1f0      	bne.n	80102c2 <prvTimerTask+0x66>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102e0:	9500      	str	r5, [sp, #0]
 80102e2:	002b      	movs	r3, r5
 80102e4:	003a      	movs	r2, r7
 80102e6:	0029      	movs	r1, r5
 80102e8:	4640      	mov	r0, r8
 80102ea:	f7ff ff37 	bl	801015c <xTimerGenericCommand>
			( void ) xResult;
 80102ee:	e7e8      	b.n	80102c2 <prvTimerTask+0x66>
					portYIELD_WITHIN_API();
 80102f0:	f000 f8c0 	bl	8010474 <vPortYield>
 80102f4:	e7d5      	b.n	80102a2 <prvTimerTask+0x46>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80102f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102f8:	9303      	str	r3, [sp, #12]
 80102fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102fc:	9304      	str	r3, [sp, #16]
 80102fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010300:	9305      	str	r3, [sp, #20]
 8010302:	9903      	ldr	r1, [sp, #12]
 8010304:	9804      	ldr	r0, [sp, #16]
 8010306:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010308:	9b08      	ldr	r3, [sp, #32]
 801030a:	9303      	str	r3, [sp, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	da0b      	bge.n	8010328 <prvTimerTask+0xcc>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010310:	002b      	movs	r3, r5
 8010312:	002a      	movs	r2, r5
 8010314:	a908      	add	r1, sp, #32
 8010316:	6838      	ldr	r0, [r7, #0]
 8010318:	f7fe fe83 	bl	800f022 <xQueueGenericReceive>
 801031c:	2800      	cmp	r0, #0
 801031e:	d0a3      	beq.n	8010268 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010320:	9b08      	ldr	r3, [sp, #32]
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	2b00      	cmp	r3, #0
 8010326:	dbe6      	blt.n	80102f6 <prvTimerTask+0x9a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010328:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 801032a:	6963      	ldr	r3, [r4, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d002      	beq.n	8010336 <prvTimerTask+0xda>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010330:	1d20      	adds	r0, r4, #4
 8010332:	f7fe fca1 	bl	800ec78 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010336:	a807      	add	r0, sp, #28
 8010338:	f7ff ff3c 	bl	80101b4 <prvSampleTimeNow>
 801033c:	0002      	movs	r2, r0
			switch( xMessage.xMessageID )
 801033e:	9b08      	ldr	r3, [sp, #32]
 8010340:	9303      	str	r3, [sp, #12]
 8010342:	2b09      	cmp	r3, #9
 8010344:	d8e4      	bhi.n	8010310 <prvTimerTask+0xb4>
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	58f3      	ldr	r3, [r6, r3]
 801034a:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 801034c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801034e:	69a0      	ldr	r0, [r4, #24]
 8010350:	4684      	mov	ip, r0
 8010352:	4463      	add	r3, ip
 8010354:	0019      	movs	r1, r3
 8010356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010358:	0020      	movs	r0, r4
 801035a:	f7ff fe6f 	bl	801003c <prvInsertTimerInActiveList>
 801035e:	2801      	cmp	r0, #1
 8010360:	d1d6      	bne.n	8010310 <prvTimerTask+0xb4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010362:	0020      	movs	r0, r4
 8010364:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010366:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010368:	69e3      	ldr	r3, [r4, #28]
 801036a:	2b01      	cmp	r3, #1
 801036c:	d1d0      	bne.n	8010310 <prvTimerTask+0xb4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801036e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010370:	69a1      	ldr	r1, [r4, #24]
 8010372:	468c      	mov	ip, r1
 8010374:	4463      	add	r3, ip
 8010376:	001a      	movs	r2, r3
 8010378:	9500      	str	r5, [sp, #0]
 801037a:	002b      	movs	r3, r5
 801037c:	0029      	movs	r1, r5
 801037e:	0020      	movs	r0, r4
 8010380:	f7ff feec 	bl	801015c <xTimerGenericCommand>
							( void ) xResult;
 8010384:	e7c4      	b.n	8010310 <prvTimerTask+0xb4>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010386:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010388:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801038a:	1841      	adds	r1, r0, r1
 801038c:	0003      	movs	r3, r0
 801038e:	0020      	movs	r0, r4
 8010390:	f7ff fe54 	bl	801003c <prvInsertTimerInActiveList>
					break;
 8010394:	e7bc      	b.n	8010310 <prvTimerTask+0xb4>
					vPortFree( pxTimer );
 8010396:	0020      	movs	r0, r4
 8010398:	f000 f980 	bl	801069c <vPortFree>
					break;
 801039c:	e7b8      	b.n	8010310 <prvTimerTask+0xb4>
	vTaskSuspendAll();
 801039e:	f7ff f965 	bl	800f66c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80103a2:	a808      	add	r0, sp, #32
 80103a4:	f7ff ff06 	bl	80101b4 <prvSampleTimeNow>
 80103a8:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80103aa:	9b08      	ldr	r3, [sp, #32]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d100      	bne.n	80103b2 <prvTimerTask+0x156>
 80103b0:	e76e      	b.n	8010290 <prvTimerTask+0x34>
			( void ) xTaskResumeAll();
 80103b2:	f7ff fa05 	bl	800f7c0 <xTaskResumeAll>
 80103b6:	e774      	b.n	80102a2 <prvTimerTask+0x46>
 80103b8:	0801b4a4 	.word	0x0801b4a4
 80103bc:	2000175c 	.word	0x2000175c
 80103c0:	20001790 	.word	0x20001790

080103c4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80103c4:	b510      	push	{r4, lr}
 80103c6:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 80103c8:	f000 f860 	bl	801048c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80103cc:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80103ce:	f000 f869 	bl	80104a4 <vPortExitCritical>

	return pvReturn;
}
 80103d2:	0020      	movs	r0, r4
 80103d4:	bd10      	pop	{r4, pc}

080103d6 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 80103d6:	b672      	cpsid	i
	for( ;; );
 80103d8:	e7fe      	b.n	80103d8 <prvTaskExitError+0x2>
	...

080103dc <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80103dc:	4a06      	ldr	r2, [pc, #24]	; (80103f8 <pxCurrentTCBConst2>)
 80103de:	6813      	ldr	r3, [r2, #0]
 80103e0:	6818      	ldr	r0, [r3, #0]
 80103e2:	3020      	adds	r0, #32
 80103e4:	f380 8809 	msr	PSP, r0
 80103e8:	2002      	movs	r0, #2
 80103ea:	f380 8814 	msr	CONTROL, r0
 80103ee:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80103f0:	46ae      	mov	lr, r5
 80103f2:	b662      	cpsie	i
 80103f4:	bd00      	pop	{pc}
 80103f6:	46c0      	nop			; (mov r8, r8)

080103f8 <pxCurrentTCBConst2>:
 80103f8:	20001634 	.word	0x20001634

080103fc <pxPortInitialiseStack>:
{
 80103fc:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103fe:	1f03      	subs	r3, r0, #4
 8010400:	2480      	movs	r4, #128	; 0x80
 8010402:	0464      	lsls	r4, r4, #17
 8010404:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010406:	3b04      	subs	r3, #4
 8010408:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801040a:	3b04      	subs	r3, #4
 801040c:	4902      	ldr	r1, [pc, #8]	; (8010418 <pxPortInitialiseStack+0x1c>)
 801040e:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010410:	3b14      	subs	r3, #20
 8010412:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010414:	3840      	subs	r0, #64	; 0x40
}
 8010416:	bd10      	pop	{r4, pc}
 8010418:	080103d7 	.word	0x080103d7

0801041c <SVC_Handler>:
}
 801041c:	4770      	bx	lr
	...

08010420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010420:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010422:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <xPortStartScheduler+0x40>)
 8010424:	6819      	ldr	r1, [r3, #0]
 8010426:	22ff      	movs	r2, #255	; 0xff
 8010428:	0412      	lsls	r2, r2, #16
 801042a:	430a      	orrs	r2, r1
 801042c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 801042e:	6819      	ldr	r1, [r3, #0]
 8010430:	22ff      	movs	r2, #255	; 0xff
 8010432:	0612      	lsls	r2, r2, #24
 8010434:	430a      	orrs	r2, r1
 8010436:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010438:	4b0a      	ldr	r3, [pc, #40]	; (8010464 <xPortStartScheduler+0x44>)
 801043a:	6818      	ldr	r0, [r3, #0]
 801043c:	21fa      	movs	r1, #250	; 0xfa
 801043e:	0089      	lsls	r1, r1, #2
 8010440:	f7ef fe86 	bl	8000150 <__udivsi3>
 8010444:	3801      	subs	r0, #1
 8010446:	4b08      	ldr	r3, [pc, #32]	; (8010468 <xPortStartScheduler+0x48>)
 8010448:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801044a:	4b08      	ldr	r3, [pc, #32]	; (801046c <xPortStartScheduler+0x4c>)
 801044c:	2207      	movs	r2, #7
 801044e:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010450:	4b07      	ldr	r3, [pc, #28]	; (8010470 <xPortStartScheduler+0x50>)
 8010452:	2200      	movs	r2, #0
 8010454:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8010456:	f7ff ffc1 	bl	80103dc <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 801045a:	b672      	cpsid	i
	for( ;; );
 801045c:	e7fe      	b.n	801045c <xPortStartScheduler+0x3c>
 801045e:	46c0      	nop			; (mov r8, r8)
 8010460:	e000ed20 	.word	0xe000ed20
 8010464:	200000a8 	.word	0x200000a8
 8010468:	e000e014 	.word	0xe000e014
 801046c:	e000e010 	.word	0xe000e010
 8010470:	200000bc 	.word	0x200000bc

08010474 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010474:	4b04      	ldr	r3, [pc, #16]	; (8010488 <vPortYield+0x14>)
 8010476:	2280      	movs	r2, #128	; 0x80
 8010478:	0552      	lsls	r2, r2, #21
 801047a:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 801047c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010480:	f3bf 8f6f 	isb	sy
}
 8010484:	4770      	bx	lr
 8010486:	46c0      	nop			; (mov r8, r8)
 8010488:	e000ed04 	.word	0xe000ed04

0801048c <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 801048c:	b672      	cpsid	i
    uxCriticalNesting++;
 801048e:	4a04      	ldr	r2, [pc, #16]	; (80104a0 <vPortEnterCritical+0x14>)
 8010490:	6813      	ldr	r3, [r2, #0]
 8010492:	3301      	adds	r3, #1
 8010494:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010496:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801049a:	f3bf 8f6f 	isb	sy
}
 801049e:	4770      	bx	lr
 80104a0:	200000bc 	.word	0x200000bc

080104a4 <vPortExitCritical>:
    uxCriticalNesting--;
 80104a4:	4a03      	ldr	r2, [pc, #12]	; (80104b4 <vPortExitCritical+0x10>)
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	3b01      	subs	r3, #1
 80104aa:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d100      	bne.n	80104b2 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 80104b0:	b662      	cpsie	i
}
 80104b2:	4770      	bx	lr
 80104b4:	200000bc 	.word	0x200000bc

080104b8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80104b8:	f3ef 8010 	mrs	r0, PRIMASK
 80104bc:	b672      	cpsid	i
 80104be:	4770      	bx	lr
}
 80104c0:	2000      	movs	r0, #0

080104c2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80104c2:	f380 8810 	msr	PRIMASK, r0
 80104c6:	4770      	bx	lr

080104c8 <PendSV_Handler>:
	__asm volatile
 80104c8:	f3ef 8009 	mrs	r0, PSP
 80104cc:	4b0e      	ldr	r3, [pc, #56]	; (8010508 <pxCurrentTCBConst>)
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	3820      	subs	r0, #32
 80104d2:	6010      	str	r0, [r2, #0]
 80104d4:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80104d6:	4644      	mov	r4, r8
 80104d8:	464d      	mov	r5, r9
 80104da:	4656      	mov	r6, sl
 80104dc:	465f      	mov	r7, fp
 80104de:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80104e0:	b508      	push	{r3, lr}
 80104e2:	b672      	cpsid	i
 80104e4:	f7ff fa86 	bl	800f9f4 <vTaskSwitchContext>
 80104e8:	b662      	cpsie	i
 80104ea:	bc0c      	pop	{r2, r3}
 80104ec:	6811      	ldr	r1, [r2, #0]
 80104ee:	6808      	ldr	r0, [r1, #0]
 80104f0:	3010      	adds	r0, #16
 80104f2:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80104f4:	46a0      	mov	r8, r4
 80104f6:	46a9      	mov	r9, r5
 80104f8:	46b2      	mov	sl, r6
 80104fa:	46bb      	mov	fp, r7
 80104fc:	f380 8809 	msr	PSP, r0
 8010500:	3820      	subs	r0, #32
 8010502:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010504:	4718      	bx	r3
 8010506:	46c0      	nop			; (mov r8, r8)

08010508 <pxCurrentTCBConst>:
 8010508:	20001634 	.word	0x20001634

0801050c <xPortSysTickHandler>:
{
 801050c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801050e:	f7ff ffd3 	bl	80104b8 <ulSetInterruptMaskFromISR>
 8010512:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010514:	f7ff f8be 	bl	800f694 <xTaskIncrementTick>
 8010518:	2800      	cmp	r0, #0
 801051a:	d003      	beq.n	8010524 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801051c:	4b03      	ldr	r3, [pc, #12]	; (801052c <xPortSysTickHandler+0x20>)
 801051e:	2280      	movs	r2, #128	; 0x80
 8010520:	0552      	lsls	r2, r2, #21
 8010522:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010524:	0020      	movs	r0, r4
 8010526:	f7ff ffcc 	bl	80104c2 <vClearInterruptMaskFromISR>
}
 801052a:	bd10      	pop	{r4, pc}
 801052c:	e000ed04 	.word	0xe000ed04

08010530 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010530:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010532:	4b12      	ldr	r3, [pc, #72]	; (801057c <prvInsertBlockIntoFreeList+0x4c>)
 8010534:	001a      	movs	r2, r3
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4283      	cmp	r3, r0
 801053a:	d3fb      	bcc.n	8010534 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801053c:	6851      	ldr	r1, [r2, #4]
 801053e:	1854      	adds	r4, r2, r1
 8010540:	42a0      	cmp	r0, r4
 8010542:	d008      	beq.n	8010556 <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010544:	6841      	ldr	r1, [r0, #4]
 8010546:	1844      	adds	r4, r0, r1
 8010548:	42a3      	cmp	r3, r4
 801054a:	d009      	beq.n	8010560 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801054c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801054e:	4290      	cmp	r0, r2
 8010550:	d000      	beq.n	8010554 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010552:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010554:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010556:	6840      	ldr	r0, [r0, #4]
 8010558:	1841      	adds	r1, r0, r1
 801055a:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 801055c:	0010      	movs	r0, r2
 801055e:	e7f1      	b.n	8010544 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010560:	4c07      	ldr	r4, [pc, #28]	; (8010580 <prvInsertBlockIntoFreeList+0x50>)
 8010562:	6824      	ldr	r4, [r4, #0]
 8010564:	42a3      	cmp	r3, r4
 8010566:	d006      	beq.n	8010576 <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	1859      	adds	r1, r3, r1
 801056c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801056e:	6813      	ldr	r3, [r2, #0]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6003      	str	r3, [r0, #0]
 8010574:	e7eb      	b.n	801054e <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010576:	6004      	str	r4, [r0, #0]
 8010578:	e7e9      	b.n	801054e <prvInsertBlockIntoFreeList+0x1e>
 801057a:	46c0      	nop			; (mov r8, r8)
 801057c:	200061dc 	.word	0x200061dc
 8010580:	20001794 	.word	0x20001794

08010584 <pvPortMalloc>:
{
 8010584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010586:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010588:	f7ff f870 	bl	800f66c <vTaskSuspendAll>
		if( pxEnd == NULL )
 801058c:	4b3c      	ldr	r3, [pc, #240]	; (8010680 <pvPortMalloc+0xfc>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d015      	beq.n	80105c0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010594:	4b3b      	ldr	r3, [pc, #236]	; (8010684 <pvPortMalloc+0x100>)
 8010596:	681d      	ldr	r5, [r3, #0]
 8010598:	422c      	tst	r4, r5
 801059a:	d136      	bne.n	801060a <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 801059c:	2c00      	cmp	r4, #0
 801059e:	d03b      	beq.n	8010618 <pvPortMalloc+0x94>
				xWantedSize += xHeapStructSize;
 80105a0:	0022      	movs	r2, r4
 80105a2:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80105a4:	0763      	lsls	r3, r4, #29
 80105a6:	d002      	beq.n	80105ae <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80105a8:	2307      	movs	r3, #7
 80105aa:	439a      	bics	r2, r3
 80105ac:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80105ae:	2a00      	cmp	r2, #0
 80105b0:	d032      	beq.n	8010618 <pvPortMalloc+0x94>
 80105b2:	4b35      	ldr	r3, [pc, #212]	; (8010688 <pvPortMalloc+0x104>)
 80105b4:	681f      	ldr	r7, [r3, #0]
 80105b6:	4297      	cmp	r7, r2
 80105b8:	d331      	bcc.n	801061e <pvPortMalloc+0x9a>
				pxBlock = xStart.pxNextFreeBlock;
 80105ba:	4934      	ldr	r1, [pc, #208]	; (801068c <pvPortMalloc+0x108>)
 80105bc:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80105be:	e033      	b.n	8010628 <pvPortMalloc+0xa4>
	ulAddress = ( uint32_t ) ucHeap;
 80105c0:	4a33      	ldr	r2, [pc, #204]	; (8010690 <pvPortMalloc+0x10c>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80105c2:	0753      	lsls	r3, r2, #29
 80105c4:	d01f      	beq.n	8010606 <pvPortMalloc+0x82>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80105c6:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80105c8:	2307      	movs	r3, #7
 80105ca:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80105cc:	4b31      	ldr	r3, [pc, #196]	; (8010694 <pvPortMalloc+0x110>)
 80105ce:	469c      	mov	ip, r3
 80105d0:	4462      	add	r2, ip
 80105d2:	1a53      	subs	r3, r2, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80105d4:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80105d6:	482d      	ldr	r0, [pc, #180]	; (801068c <pvPortMalloc+0x108>)
 80105d8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80105da:	2100      	movs	r1, #0
 80105dc:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80105de:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80105e0:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80105e2:	2007      	movs	r0, #7
 80105e4:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80105e6:	4826      	ldr	r0, [pc, #152]	; (8010680 <pvPortMalloc+0xfc>)
 80105e8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80105ea:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80105ec:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80105ee:	1a99      	subs	r1, r3, r2
 80105f0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80105f2:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105f4:	4b28      	ldr	r3, [pc, #160]	; (8010698 <pvPortMalloc+0x114>)
 80105f6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80105f8:	4b23      	ldr	r3, [pc, #140]	; (8010688 <pvPortMalloc+0x104>)
 80105fa:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80105fc:	4b21      	ldr	r3, [pc, #132]	; (8010684 <pvPortMalloc+0x100>)
 80105fe:	2280      	movs	r2, #128	; 0x80
 8010600:	0612      	lsls	r2, r2, #24
 8010602:	601a      	str	r2, [r3, #0]
}
 8010604:	e7c6      	b.n	8010594 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010606:	4b23      	ldr	r3, [pc, #140]	; (8010694 <pvPortMalloc+0x110>)
 8010608:	e7e5      	b.n	80105d6 <pvPortMalloc+0x52>
	( void ) xTaskResumeAll();
 801060a:	f7ff f8d9 	bl	800f7c0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 801060e:	f7fd fc65 	bl	800dedc <vApplicationMallocFailedHook>
 8010612:	2600      	movs	r6, #0
}
 8010614:	0030      	movs	r0, r6
 8010616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 8010618:	f7ff f8d2 	bl	800f7c0 <xTaskResumeAll>
		if( pvReturn == NULL )
 801061c:	e7f7      	b.n	801060e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 801061e:	f7ff f8cf 	bl	800f7c0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010622:	e7f4      	b.n	801060e <pvPortMalloc+0x8a>
 8010624:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010626:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010628:	6863      	ldr	r3, [r4, #4]
 801062a:	4293      	cmp	r3, r2
 801062c:	d202      	bcs.n	8010634 <pvPortMalloc+0xb0>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d1f7      	bne.n	8010624 <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 8010634:	4b12      	ldr	r3, [pc, #72]	; (8010680 <pvPortMalloc+0xfc>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	42a3      	cmp	r3, r4
 801063a:	d018      	beq.n	801066e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801063c:	680e      	ldr	r6, [r1, #0]
 801063e:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010640:	6823      	ldr	r3, [r4, #0]
 8010642:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010644:	6863      	ldr	r3, [r4, #4]
 8010646:	1a9b      	subs	r3, r3, r2
 8010648:	2b10      	cmp	r3, #16
 801064a:	d813      	bhi.n	8010674 <pvPortMalloc+0xf0>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801064c:	6863      	ldr	r3, [r4, #4]
 801064e:	1aff      	subs	r7, r7, r3
 8010650:	4a0d      	ldr	r2, [pc, #52]	; (8010688 <pvPortMalloc+0x104>)
 8010652:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010654:	4a10      	ldr	r2, [pc, #64]	; (8010698 <pvPortMalloc+0x114>)
 8010656:	6812      	ldr	r2, [r2, #0]
 8010658:	4297      	cmp	r7, r2
 801065a:	d201      	bcs.n	8010660 <pvPortMalloc+0xdc>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801065c:	4a0e      	ldr	r2, [pc, #56]	; (8010698 <pvPortMalloc+0x114>)
 801065e:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010660:	431d      	orrs	r5, r3
 8010662:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010664:	2300      	movs	r3, #0
 8010666:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010668:	f7ff f8aa 	bl	800f7c0 <xTaskResumeAll>
		if( pvReturn == NULL )
 801066c:	e7d2      	b.n	8010614 <pvPortMalloc+0x90>
	( void ) xTaskResumeAll();
 801066e:	f7ff f8a7 	bl	800f7c0 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010672:	e7cc      	b.n	801060e <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010674:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010676:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010678:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 801067a:	f7ff ff59 	bl	8010530 <prvInsertBlockIntoFreeList>
 801067e:	e7e5      	b.n	801064c <pvPortMalloc+0xc8>
 8010680:	20001794 	.word	0x20001794
 8010684:	200061d0 	.word	0x200061d0
 8010688:	200061d4 	.word	0x200061d4
 801068c:	200061dc 	.word	0x200061dc
 8010690:	20001798 	.word	0x20001798
 8010694:	00004a38 	.word	0x00004a38
 8010698:	200061d8 	.word	0x200061d8

0801069c <vPortFree>:
{
 801069c:	b510      	push	{r4, lr}
	if( pv != NULL )
 801069e:	2800      	cmp	r0, #0
 80106a0:	d00b      	beq.n	80106ba <vPortFree+0x1e>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106a2:	0003      	movs	r3, r0
 80106a4:	3b08      	subs	r3, #8
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	4a0d      	ldr	r2, [pc, #52]	; (80106e0 <vPortFree+0x44>)
 80106aa:	6812      	ldr	r2, [r2, #0]
 80106ac:	421a      	tst	r2, r3
 80106ae:	d004      	beq.n	80106ba <vPortFree+0x1e>
			if( pxLink->pxNextFreeBlock == NULL )
 80106b0:	0001      	movs	r1, r0
 80106b2:	3908      	subs	r1, #8
 80106b4:	6809      	ldr	r1, [r1, #0]
 80106b6:	2900      	cmp	r1, #0
 80106b8:	d000      	beq.n	80106bc <vPortFree+0x20>
}
 80106ba:	bd10      	pop	{r4, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106bc:	3808      	subs	r0, #8
 80106be:	0004      	movs	r4, r0
 80106c0:	4393      	bics	r3, r2
 80106c2:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 80106c4:	f7fe ffd2 	bl	800f66c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106c8:	4a06      	ldr	r2, [pc, #24]	; (80106e4 <vPortFree+0x48>)
 80106ca:	6863      	ldr	r3, [r4, #4]
 80106cc:	6811      	ldr	r1, [r2, #0]
 80106ce:	468c      	mov	ip, r1
 80106d0:	4463      	add	r3, ip
 80106d2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106d4:	0020      	movs	r0, r4
 80106d6:	f7ff ff2b 	bl	8010530 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80106da:	f7ff f871 	bl	800f7c0 <xTaskResumeAll>
}
 80106de:	e7ec      	b.n	80106ba <vPortFree+0x1e>
 80106e0:	200061d0 	.word	0x200061d0
 80106e4:	200061d4 	.word	0x200061d4

080106e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80106e8:	b510      	push	{r4, lr}
 80106ea:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80106ec:	f002 f910 	bl	8012910 <HAL_RCC_GetHCLKFreq>
 80106f0:	21fa      	movs	r1, #250	; 0xfa
 80106f2:	0089      	lsls	r1, r1, #2
 80106f4:	f7ef fd2c 	bl	8000150 <__udivsi3>
 80106f8:	f000 fb90 	bl	8010e1c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80106fc:	2001      	movs	r0, #1
 80106fe:	2200      	movs	r2, #0
 8010700:	0021      	movs	r1, r4
 8010702:	4240      	negs	r0, r0
 8010704:	f000 fb44 	bl	8010d90 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010708:	2000      	movs	r0, #0
 801070a:	bd10      	pop	{r4, pc}

0801070c <HAL_Init>:
{
 801070c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801070e:	4a06      	ldr	r2, [pc, #24]	; (8010728 <HAL_Init+0x1c>)
 8010710:	6813      	ldr	r3, [r2, #0]
 8010712:	2110      	movs	r1, #16
 8010714:	430b      	orrs	r3, r1
 8010716:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010718:	2000      	movs	r0, #0
 801071a:	f7ff ffe5 	bl	80106e8 <HAL_InitTick>
  HAL_MspInit();
 801071e:	f001 fc9b 	bl	8012058 <HAL_MspInit>
}
 8010722:	2000      	movs	r0, #0
 8010724:	bd10      	pop	{r4, pc}
 8010726:	46c0      	nop			; (mov r8, r8)
 8010728:	40022000 	.word	0x40022000

0801072c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 801072c:	4a02      	ldr	r2, [pc, #8]	; (8010738 <HAL_IncTick+0xc>)
 801072e:	6813      	ldr	r3, [r2, #0]
 8010730:	3301      	adds	r3, #1
 8010732:	6013      	str	r3, [r2, #0]
}
 8010734:	4770      	bx	lr
 8010736:	46c0      	nop			; (mov r8, r8)
 8010738:	200061e4 	.word	0x200061e4

0801073c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 801073c:	4b01      	ldr	r3, [pc, #4]	; (8010744 <HAL_GetTick+0x8>)
 801073e:	6818      	ldr	r0, [r3, #0]
}
 8010740:	4770      	bx	lr
 8010742:	46c0      	nop			; (mov r8, r8)
 8010744:	200061e4 	.word	0x200061e4

08010748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010748:	b510      	push	{r4, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801074e:	f7ff fff5 	bl	801073c <HAL_GetTick>
 8010752:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010754:	f7ff fff2 	bl	801073c <HAL_GetTick>
 8010758:	9b01      	ldr	r3, [sp, #4]
 801075a:	1b00      	subs	r0, r0, r4
 801075c:	4298      	cmp	r0, r3
 801075e:	d3f9      	bcc.n	8010754 <HAL_Delay+0xc>
  {
  }
}
 8010760:	b002      	add	sp, #8
 8010762:	bd10      	pop	{r4, pc}

08010764 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010764:	4b01      	ldr	r3, [pc, #4]	; (801076c <HAL_GetREVID+0x8>)
 8010766:	6818      	ldr	r0, [r3, #0]
 8010768:	0c00      	lsrs	r0, r0, #16
}
 801076a:	4770      	bx	lr
 801076c:	40015800 	.word	0x40015800

08010770 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010770:	4b02      	ldr	r3, [pc, #8]	; (801077c <HAL_GetDEVID+0xc>)
 8010772:	6818      	ldr	r0, [r3, #0]
 8010774:	0500      	lsls	r0, r0, #20
 8010776:	0d00      	lsrs	r0, r0, #20
}
 8010778:	4770      	bx	lr
 801077a:	46c0      	nop			; (mov r8, r8)
 801077c:	40015800 	.word	0x40015800

08010780 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010780:	b570      	push	{r4, r5, r6, lr}
 8010782:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010784:	6803      	ldr	r3, [r0, #0]
 8010786:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010788:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 801078a:	0752      	lsls	r2, r2, #29
 801078c:	d521      	bpl.n	80107d2 <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801078e:	689a      	ldr	r2, [r3, #8]
 8010790:	0752      	lsls	r2, r2, #29
 8010792:	d506      	bpl.n	80107a2 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010794:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010796:	0792      	lsls	r2, r2, #30
 8010798:	d403      	bmi.n	80107a2 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 801079a:	689a      	ldr	r2, [r3, #8]
 801079c:	2110      	movs	r1, #16
 801079e:	430a      	orrs	r2, r1
 80107a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80107a2:	f7ff ffcb 	bl	801073c <HAL_GetTick>
 80107a6:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80107a8:	2604      	movs	r6, #4
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	689b      	ldr	r3, [r3, #8]
 80107ae:	421e      	tst	r6, r3
 80107b0:	d00e      	beq.n	80107d0 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80107b2:	f7ff ffc3 	bl	801073c <HAL_GetTick>
 80107b6:	1b40      	subs	r0, r0, r5
 80107b8:	2802      	cmp	r0, #2
 80107ba:	d9f6      	bls.n	80107aa <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80107bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80107be:	2210      	movs	r2, #16
 80107c0:	4313      	orrs	r3, r2
 80107c2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80107c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80107c6:	3a0f      	subs	r2, #15
 80107c8:	4313      	orrs	r3, r2
 80107ca:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80107cc:	2001      	movs	r0, #1
 80107ce:	e000      	b.n	80107d2 <ADC_ConversionStop+0x52>
  return HAL_OK;
 80107d0:	2000      	movs	r0, #0
}
 80107d2:	bd70      	pop	{r4, r5, r6, pc}

080107d4 <ADC_Disable>:
{
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80107d8:	6802      	ldr	r2, [r0, #0]
 80107da:	6891      	ldr	r1, [r2, #8]
 80107dc:	2303      	movs	r3, #3
 80107de:	400b      	ands	r3, r1
  return HAL_OK;
 80107e0:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d000      	beq.n	80107e8 <ADC_Disable+0x14>
}
 80107e6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80107e8:	6813      	ldr	r3, [r2, #0]
 80107ea:	07db      	lsls	r3, r3, #31
 80107ec:	d402      	bmi.n	80107f4 <ADC_Disable+0x20>
 80107ee:	68d3      	ldr	r3, [r2, #12]
 80107f0:	041b      	lsls	r3, r3, #16
 80107f2:	d5f8      	bpl.n	80107e6 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80107f4:	6891      	ldr	r1, [r2, #8]
 80107f6:	2305      	movs	r3, #5
 80107f8:	400b      	ands	r3, r1
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d009      	beq.n	8010812 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80107fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010800:	2210      	movs	r2, #16
 8010802:	4313      	orrs	r3, r2
 8010804:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010806:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010808:	3a0f      	subs	r2, #15
 801080a:	4313      	orrs	r3, r2
 801080c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 801080e:	2001      	movs	r0, #1
 8010810:	e7e9      	b.n	80107e6 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8010812:	6893      	ldr	r3, [r2, #8]
 8010814:	2102      	movs	r1, #2
 8010816:	430b      	orrs	r3, r1
 8010818:	6093      	str	r3, [r2, #8]
 801081a:	6823      	ldr	r3, [r4, #0]
 801081c:	2203      	movs	r2, #3
 801081e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010820:	f7ff ff8c 	bl	801073c <HAL_GetTick>
 8010824:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010826:	2601      	movs	r6, #1
 8010828:	6823      	ldr	r3, [r4, #0]
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	421e      	tst	r6, r3
 801082e:	d00e      	beq.n	801084e <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010830:	f7ff ff84 	bl	801073c <HAL_GetTick>
 8010834:	1b40      	subs	r0, r0, r5
 8010836:	2802      	cmp	r0, #2
 8010838:	d9f6      	bls.n	8010828 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801083a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801083c:	2210      	movs	r2, #16
 801083e:	4313      	orrs	r3, r2
 8010840:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010842:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010844:	3a0f      	subs	r2, #15
 8010846:	4313      	orrs	r3, r2
 8010848:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 801084a:	2001      	movs	r0, #1
 801084c:	e7cb      	b.n	80107e6 <ADC_Disable+0x12>
  return HAL_OK;
 801084e:	2000      	movs	r0, #0
 8010850:	e7c9      	b.n	80107e6 <ADC_Disable+0x12>
	...

08010854 <ADC_Enable>:
{
 8010854:	b570      	push	{r4, r5, r6, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801085e:	6803      	ldr	r3, [r0, #0]
 8010860:	6899      	ldr	r1, [r3, #8]
 8010862:	2203      	movs	r2, #3
 8010864:	400a      	ands	r2, r1
 8010866:	2a01      	cmp	r2, #1
 8010868:	d02d      	beq.n	80108c6 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 801086a:	6899      	ldr	r1, [r3, #8]
 801086c:	4a20      	ldr	r2, [pc, #128]	; (80108f0 <ADC_Enable+0x9c>)
 801086e:	4211      	tst	r1, r2
 8010870:	d131      	bne.n	80108d6 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010872:	689a      	ldr	r2, [r3, #8]
 8010874:	2101      	movs	r1, #1
 8010876:	430a      	orrs	r2, r1
 8010878:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 801087a:	4b1e      	ldr	r3, [pc, #120]	; (80108f4 <ADC_Enable+0xa0>)
 801087c:	6818      	ldr	r0, [r3, #0]
 801087e:	491e      	ldr	r1, [pc, #120]	; (80108f8 <ADC_Enable+0xa4>)
 8010880:	f7ef fc66 	bl	8000150 <__udivsi3>
 8010884:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010886:	9b01      	ldr	r3, [sp, #4]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d005      	beq.n	8010898 <ADC_Enable+0x44>
      wait_loop_index--;
 801088c:	9b01      	ldr	r3, [sp, #4]
 801088e:	3b01      	subs	r3, #1
 8010890:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010892:	9b01      	ldr	r3, [sp, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d1f9      	bne.n	801088c <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010898:	f7ff ff50 	bl	801073c <HAL_GetTick>
 801089c:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801089e:	2601      	movs	r6, #1
 80108a0:	6823      	ldr	r3, [r4, #0]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	421e      	tst	r6, r3
 80108a6:	d121      	bne.n	80108ec <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80108a8:	f7ff ff48 	bl	801073c <HAL_GetTick>
 80108ac:	1b40      	subs	r0, r0, r5
 80108ae:	2802      	cmp	r0, #2
 80108b0:	d9f6      	bls.n	80108a0 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80108b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80108b4:	2210      	movs	r2, #16
 80108b6:	4313      	orrs	r3, r2
 80108b8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80108ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80108bc:	3a0f      	subs	r2, #15
 80108be:	4313      	orrs	r3, r2
 80108c0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80108c2:	2001      	movs	r0, #1
 80108c4:	e010      	b.n	80108e8 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80108c6:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80108c8:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80108ca:	07d2      	lsls	r2, r2, #31
 80108cc:	d40c      	bmi.n	80108e8 <ADC_Enable+0x94>
 80108ce:	68da      	ldr	r2, [r3, #12]
 80108d0:	0412      	lsls	r2, r2, #16
 80108d2:	d409      	bmi.n	80108e8 <ADC_Enable+0x94>
 80108d4:	e7c9      	b.n	801086a <ADC_Enable+0x16>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80108d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80108d8:	2210      	movs	r2, #16
 80108da:	4313      	orrs	r3, r2
 80108dc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80108de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80108e0:	3a0f      	subs	r2, #15
 80108e2:	4313      	orrs	r3, r2
 80108e4:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80108e6:	2001      	movs	r0, #1
}
 80108e8:	b002      	add	sp, #8
 80108ea:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80108ec:	2000      	movs	r0, #0
 80108ee:	e7fb      	b.n	80108e8 <ADC_Enable+0x94>
 80108f0:	80000017 	.word	0x80000017
 80108f4:	200000a8 	.word	0x200000a8
 80108f8:	000f4240 	.word	0x000f4240

080108fc <HAL_ADC_Init>:
{
 80108fc:	b570      	push	{r4, r5, r6, lr}
 80108fe:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010900:	d100      	bne.n	8010904 <HAL_ADC_Init+0x8>
 8010902:	e09e      	b.n	8010a42 <HAL_ADC_Init+0x146>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010904:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010906:	2b00      	cmp	r3, #0
 8010908:	d074      	beq.n	80109f4 <HAL_ADC_Init+0xf8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 801090a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801090c:	06db      	lsls	r3, r3, #27
 801090e:	d500      	bpl.n	8010912 <HAL_ADC_Init+0x16>
 8010910:	e091      	b.n	8010a36 <HAL_ADC_Init+0x13a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010912:	6822      	ldr	r2, [r4, #0]
 8010914:	6891      	ldr	r1, [r2, #8]
 8010916:	2004      	movs	r0, #4
 8010918:	0005      	movs	r5, r0
 801091a:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 801091c:	4208      	tst	r0, r1
 801091e:	d000      	beq.n	8010922 <HAL_ADC_Init+0x26>
 8010920:	e089      	b.n	8010a36 <HAL_ADC_Init+0x13a>
    ADC_STATE_CLR_SET(hadc->State,
 8010922:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010924:	4b48      	ldr	r3, [pc, #288]	; (8010a48 <HAL_ADC_Init+0x14c>)
 8010926:	4019      	ands	r1, r3
 8010928:	3306      	adds	r3, #6
 801092a:	33ff      	adds	r3, #255	; 0xff
 801092c:	4319      	orrs	r1, r3
 801092e:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010930:	6891      	ldr	r1, [r2, #8]
 8010932:	3301      	adds	r3, #1
 8010934:	400b      	ands	r3, r1
 8010936:	2b01      	cmp	r3, #1
 8010938:	d062      	beq.n	8010a00 <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->CFGR1,
 801093a:	68d3      	ldr	r3, [r2, #12]
 801093c:	2118      	movs	r1, #24
 801093e:	438b      	bics	r3, r1
 8010940:	68a1      	ldr	r1, [r4, #8]
 8010942:	430b      	orrs	r3, r1
 8010944:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	6913      	ldr	r3, [r2, #16]
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	089b      	lsrs	r3, r3, #2
 801094e:	6861      	ldr	r1, [r4, #4]
 8010950:	430b      	orrs	r3, r1
 8010952:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010954:	6822      	ldr	r2, [r4, #0]
 8010956:	68d3      	ldr	r3, [r2, #12]
 8010958:	493c      	ldr	r1, [pc, #240]	; (8010a4c <HAL_ADC_Init+0x150>)
 801095a:	400b      	ands	r3, r1
 801095c:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801095e:	69a3      	ldr	r3, [r4, #24]
 8010960:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010962:	69e3      	ldr	r3, [r4, #28]
 8010964:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010966:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010968:	6a21      	ldr	r1, [r4, #32]
 801096a:	034b      	lsls	r3, r1, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 801096c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801096e:	2801      	cmp	r0, #1
 8010970:	d04d      	beq.n	8010a0e <HAL_ADC_Init+0x112>
 8010972:	2080      	movs	r0, #128	; 0x80
 8010974:	0140      	lsls	r0, r0, #5
 8010976:	68e6      	ldr	r6, [r4, #12]
 8010978:	4332      	orrs	r2, r6
 801097a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801097c:	6923      	ldr	r3, [r4, #16]
 801097e:	2b02      	cmp	r3, #2
 8010980:	d047      	beq.n	8010a12 <HAL_ADC_Init+0x116>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010984:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010986:	4313      	orrs	r3, r2
 8010988:	4303      	orrs	r3, r0
 801098a:	432b      	orrs	r3, r5
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 801098c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801098e:	2a01      	cmp	r2, #1
 8010990:	d041      	beq.n	8010a16 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010992:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010994:	21c2      	movs	r1, #194	; 0xc2
 8010996:	31ff      	adds	r1, #255	; 0xff
 8010998:	428a      	cmp	r2, r1
 801099a:	d002      	beq.n	80109a2 <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 801099c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801099e:	430a      	orrs	r2, r1
 80109a0:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80109a2:	6821      	ldr	r1, [r4, #0]
 80109a4:	68ca      	ldr	r2, [r1, #12]
 80109a6:	431a      	orrs	r2, r3
 80109a8:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80109aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80109ac:	2180      	movs	r1, #128	; 0x80
 80109ae:	0549      	lsls	r1, r1, #21
 80109b0:	428a      	cmp	r2, r1
 80109b2:	d002      	beq.n	80109ba <HAL_ADC_Init+0xbe>
 80109b4:	3a01      	subs	r2, #1
 80109b6:	2a06      	cmp	r2, #6
 80109b8:	d80a      	bhi.n	80109d0 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80109ba:	6820      	ldr	r0, [r4, #0]
 80109bc:	6941      	ldr	r1, [r0, #20]
 80109be:	2207      	movs	r2, #7
 80109c0:	4391      	bics	r1, r2
 80109c2:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80109c4:	6821      	ldr	r1, [r4, #0]
 80109c6:	6948      	ldr	r0, [r1, #20]
 80109c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80109ca:	402a      	ands	r2, r5
 80109cc:	4302      	orrs	r2, r0
 80109ce:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80109d0:	6822      	ldr	r2, [r4, #0]
 80109d2:	68d2      	ldr	r2, [r2, #12]
 80109d4:	491e      	ldr	r1, [pc, #120]	; (8010a50 <HAL_ADC_Init+0x154>)
 80109d6:	400a      	ands	r2, r1
 80109d8:	429a      	cmp	r2, r3
 80109da:	d022      	beq.n	8010a22 <HAL_ADC_Init+0x126>
      ADC_STATE_CLR_SET(hadc->State,
 80109dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80109de:	2212      	movs	r2, #18
 80109e0:	4393      	bics	r3, r2
 80109e2:	3a02      	subs	r2, #2
 80109e4:	4313      	orrs	r3, r2
 80109e6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80109e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80109ea:	3a0f      	subs	r2, #15
 80109ec:	4313      	orrs	r3, r2
 80109ee:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80109f0:	2001      	movs	r0, #1
 80109f2:	e025      	b.n	8010a40 <HAL_ADC_Init+0x144>
    ADC_CLEAR_ERRORCODE(hadc);
 80109f4:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80109f6:	2240      	movs	r2, #64	; 0x40
 80109f8:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80109fa:	f7fc fca9 	bl	800d350 <HAL_ADC_MspInit>
 80109fe:	e784      	b.n	801090a <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010a00:	6813      	ldr	r3, [r2, #0]
 8010a02:	07db      	lsls	r3, r3, #31
 8010a04:	d4a6      	bmi.n	8010954 <HAL_ADC_Init+0x58>
 8010a06:	68d3      	ldr	r3, [r2, #12]
 8010a08:	041b      	lsls	r3, r3, #16
 8010a0a:	d4a3      	bmi.n	8010954 <HAL_ADC_Init+0x58>
 8010a0c:	e795      	b.n	801093a <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010a0e:	0028      	movs	r0, r5
 8010a10:	e7b1      	b.n	8010976 <HAL_ADC_Init+0x7a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010a12:	2504      	movs	r5, #4
 8010a14:	e7b5      	b.n	8010982 <HAL_ADC_Init+0x86>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010a16:	2900      	cmp	r1, #0
 8010a18:	d1bb      	bne.n	8010992 <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010a1a:	2280      	movs	r2, #128	; 0x80
 8010a1c:	0252      	lsls	r2, r2, #9
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	e7b7      	b.n	8010992 <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 8010a22:	2300      	movs	r3, #0
 8010a24:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010a26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a28:	2203      	movs	r2, #3
 8010a2a:	4393      	bics	r3, r2
 8010a2c:	3a02      	subs	r2, #2
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010a32:	2000      	movs	r0, #0
 8010a34:	e004      	b.n	8010a40 <HAL_ADC_Init+0x144>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a38:	2210      	movs	r2, #16
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010a3e:	2001      	movs	r0, #1
}
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010a42:	2001      	movs	r0, #1
 8010a44:	e7fc      	b.n	8010a40 <HAL_ADC_Init+0x144>
 8010a46:	46c0      	nop			; (mov r8, r8)
 8010a48:	fffffefd 	.word	0xfffffefd
 8010a4c:	fffe0219 	.word	0xfffe0219
 8010a50:	833fffe7 	.word	0x833fffe7

08010a54 <HAL_ADC_Start>:
{
 8010a54:	b510      	push	{r4, lr}
 8010a56:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010a58:	6803      	ldr	r3, [r0, #0]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	075b      	lsls	r3, r3, #29
 8010a5e:	d423      	bmi.n	8010aa8 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010a60:	2340      	movs	r3, #64	; 0x40
 8010a62:	5cc3      	ldrb	r3, [r0, r3]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d021      	beq.n	8010aac <HAL_ADC_Start+0x58>
 8010a68:	2340      	movs	r3, #64	; 0x40
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010a6e:	69c3      	ldr	r3, [r0, #28]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d114      	bne.n	8010a9e <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010a74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a76:	4a0e      	ldr	r2, [pc, #56]	; (8010ab0 <HAL_ADC_Start+0x5c>)
 8010a78:	401a      	ands	r2, r3
 8010a7a:	2380      	movs	r3, #128	; 0x80
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010a82:	2300      	movs	r3, #0
 8010a84:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010a86:	2240      	movs	r2, #64	; 0x40
 8010a88:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	3a24      	subs	r2, #36	; 0x24
 8010a8e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010a90:	6822      	ldr	r2, [r4, #0]
 8010a92:	6893      	ldr	r3, [r2, #8]
 8010a94:	2104      	movs	r1, #4
 8010a96:	430b      	orrs	r3, r1
 8010a98:	6093      	str	r3, [r2, #8]
 8010a9a:	2000      	movs	r0, #0
}
 8010a9c:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010a9e:	f7ff fed9 	bl	8010854 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	d1fa      	bne.n	8010a9c <HAL_ADC_Start+0x48>
 8010aa6:	e7e5      	b.n	8010a74 <HAL_ADC_Start+0x20>
    tmp_hal_status = HAL_BUSY;
 8010aa8:	2002      	movs	r0, #2
 8010aaa:	e7f7      	b.n	8010a9c <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010aac:	2002      	movs	r0, #2
 8010aae:	e7f5      	b.n	8010a9c <HAL_ADC_Start+0x48>
 8010ab0:	fffff0fe 	.word	0xfffff0fe

08010ab4 <HAL_ADC_Stop>:
{ 
 8010ab4:	b510      	push	{r4, lr}
 8010ab6:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010ab8:	2340      	movs	r3, #64	; 0x40
 8010aba:	5cc3      	ldrb	r3, [r0, r3]
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d017      	beq.n	8010af0 <HAL_ADC_Stop+0x3c>
 8010ac0:	2340      	movs	r3, #64	; 0x40
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010ac6:	f7ff fe5b 	bl	8010780 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d003      	beq.n	8010ad6 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010ace:	2340      	movs	r3, #64	; 0x40
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	54e2      	strb	r2, [r4, r3]
}
 8010ad4:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010ad6:	0020      	movs	r0, r4
 8010ad8:	f7ff fe7c 	bl	80107d4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010adc:	2800      	cmp	r0, #0
 8010ade:	d1f6      	bne.n	8010ace <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010ae0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ae2:	4a04      	ldr	r2, [pc, #16]	; (8010af4 <HAL_ADC_Stop+0x40>)
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	3204      	adds	r2, #4
 8010ae8:	32ff      	adds	r2, #255	; 0xff
 8010aea:	4313      	orrs	r3, r2
 8010aec:	6463      	str	r3, [r4, #68]	; 0x44
 8010aee:	e7ee      	b.n	8010ace <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010af0:	2002      	movs	r0, #2
 8010af2:	e7ef      	b.n	8010ad4 <HAL_ADC_Stop+0x20>
 8010af4:	fffffefe 	.word	0xfffffefe

08010af8 <HAL_ADC_PollForConversion>:
{
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	0006      	movs	r6, r0
 8010afc:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010afe:	6945      	ldr	r5, [r0, #20]
 8010b00:	2d08      	cmp	r5, #8
 8010b02:	d004      	beq.n	8010b0e <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010b04:	6803      	ldr	r3, [r0, #0]
 8010b06:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010b08:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010b0a:	07db      	lsls	r3, r3, #31
 8010b0c:	d418      	bmi.n	8010b40 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010b0e:	f7ff fe15 	bl	801073c <HAL_GetTick>
 8010b12:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010b14:	6832      	ldr	r2, [r6, #0]
 8010b16:	6813      	ldr	r3, [r2, #0]
 8010b18:	421d      	tst	r5, r3
 8010b1a:	d11a      	bne.n	8010b52 <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 8010b1c:	1c63      	adds	r3, r4, #1
 8010b1e:	d0fa      	beq.n	8010b16 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010b20:	2c00      	cmp	r4, #0
 8010b22:	d004      	beq.n	8010b2e <HAL_ADC_PollForConversion+0x36>
 8010b24:	f7ff fe0a 	bl	801073c <HAL_GetTick>
 8010b28:	1bc0      	subs	r0, r0, r7
 8010b2a:	42a0      	cmp	r0, r4
 8010b2c:	d9f2      	bls.n	8010b14 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010b2e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010b30:	2204      	movs	r2, #4
 8010b32:	4313      	orrs	r3, r2
 8010b34:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010b36:	2340      	movs	r3, #64	; 0x40
 8010b38:	2200      	movs	r2, #0
 8010b3a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010b3c:	2003      	movs	r0, #3
 8010b3e:	e02d      	b.n	8010b9c <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010b40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010b42:	2220      	movs	r2, #32
 8010b44:	4313      	orrs	r3, r2
 8010b46:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010b48:	2340      	movs	r3, #64	; 0x40
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010b4e:	2001      	movs	r0, #1
 8010b50:	e024      	b.n	8010b9c <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010b52:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010b54:	2380      	movs	r3, #128	; 0x80
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	430b      	orrs	r3, r1
 8010b5a:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010b5c:	68d1      	ldr	r1, [r2, #12]
 8010b5e:	23c0      	movs	r3, #192	; 0xc0
 8010b60:	011b      	lsls	r3, r3, #4
 8010b62:	4219      	tst	r1, r3
 8010b64:	d113      	bne.n	8010b8e <HAL_ADC_PollForConversion+0x96>
 8010b66:	6a33      	ldr	r3, [r6, #32]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d110      	bne.n	8010b8e <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010b6c:	6813      	ldr	r3, [r2, #0]
 8010b6e:	071b      	lsls	r3, r3, #28
 8010b70:	d50d      	bpl.n	8010b8e <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010b72:	6893      	ldr	r3, [r2, #8]
 8010b74:	075b      	lsls	r3, r3, #29
 8010b76:	d412      	bmi.n	8010b9e <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010b78:	6853      	ldr	r3, [r2, #4]
 8010b7a:	210c      	movs	r1, #12
 8010b7c:	438b      	bics	r3, r1
 8010b7e:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010b80:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010b82:	4a0b      	ldr	r2, [pc, #44]	; (8010bb0 <HAL_ADC_PollForConversion+0xb8>)
 8010b84:	4013      	ands	r3, r2
 8010b86:	3204      	adds	r2, #4
 8010b88:	32ff      	adds	r2, #255	; 0xff
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010b8e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010b90:	69b3      	ldr	r3, [r6, #24]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d102      	bne.n	8010b9c <HAL_ADC_PollForConversion+0xa4>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010b96:	6833      	ldr	r3, [r6, #0]
 8010b98:	220c      	movs	r2, #12
 8010b9a:	601a      	str	r2, [r3, #0]
}
 8010b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010b9e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010ba0:	2220      	movs	r2, #32
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010ba6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010ba8:	3a1f      	subs	r2, #31
 8010baa:	4313      	orrs	r3, r2
 8010bac:	64b3      	str	r3, [r6, #72]	; 0x48
 8010bae:	e7ee      	b.n	8010b8e <HAL_ADC_PollForConversion+0x96>
 8010bb0:	fffffefe 	.word	0xfffffefe

08010bb4 <HAL_ADC_Start_IT>:
{
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010bb8:	6803      	ldr	r3, [r0, #0]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	075b      	lsls	r3, r3, #29
 8010bbe:	d436      	bmi.n	8010c2e <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 8010bc0:	2340      	movs	r3, #64	; 0x40
 8010bc2:	5cc3      	ldrb	r3, [r0, r3]
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d034      	beq.n	8010c32 <HAL_ADC_Start_IT+0x7e>
 8010bc8:	2340      	movs	r3, #64	; 0x40
 8010bca:	2201      	movs	r2, #1
 8010bcc:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010bce:	69c3      	ldr	r3, [r0, #28]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d11c      	bne.n	8010c0e <HAL_ADC_Start_IT+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8010bd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bd6:	4a18      	ldr	r2, [pc, #96]	; (8010c38 <HAL_ADC_Start_IT+0x84>)
 8010bd8:	401a      	ands	r2, r3
 8010bda:	2380      	movs	r3, #128	; 0x80
 8010bdc:	005b      	lsls	r3, r3, #1
 8010bde:	4313      	orrs	r3, r2
 8010be0:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010be2:	2300      	movs	r3, #0
 8010be4:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010be6:	2240      	movs	r2, #64	; 0x40
 8010be8:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	3a24      	subs	r2, #36	; 0x24
 8010bee:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8010bf0:	6963      	ldr	r3, [r4, #20]
 8010bf2:	2b08      	cmp	r3, #8
 8010bf4:	d010      	beq.n	8010c18 <HAL_ADC_Start_IT+0x64>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8010bf6:	6822      	ldr	r2, [r4, #0]
 8010bf8:	6853      	ldr	r3, [r2, #4]
 8010bfa:	211c      	movs	r1, #28
 8010bfc:	430b      	orrs	r3, r1
 8010bfe:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010c00:	6822      	ldr	r2, [r4, #0]
 8010c02:	6893      	ldr	r3, [r2, #8]
 8010c04:	2104      	movs	r1, #4
 8010c06:	430b      	orrs	r3, r1
 8010c08:	6093      	str	r3, [r2, #8]
 8010c0a:	2000      	movs	r0, #0
}
 8010c0c:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010c0e:	f7ff fe21 	bl	8010854 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d1fa      	bne.n	8010c0c <HAL_ADC_Start_IT+0x58>
 8010c16:	e7dd      	b.n	8010bd4 <HAL_ADC_Start_IT+0x20>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010c18:	6822      	ldr	r2, [r4, #0]
 8010c1a:	6853      	ldr	r3, [r2, #4]
 8010c1c:	2104      	movs	r1, #4
 8010c1e:	438b      	bics	r3, r1
 8010c20:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8010c22:	6822      	ldr	r2, [r4, #0]
 8010c24:	6853      	ldr	r3, [r2, #4]
 8010c26:	3114      	adds	r1, #20
 8010c28:	430b      	orrs	r3, r1
 8010c2a:	6053      	str	r3, [r2, #4]
          break;
 8010c2c:	e7e8      	b.n	8010c00 <HAL_ADC_Start_IT+0x4c>
    tmp_hal_status = HAL_BUSY;
 8010c2e:	2002      	movs	r0, #2
 8010c30:	e7ec      	b.n	8010c0c <HAL_ADC_Start_IT+0x58>
    __HAL_LOCK(hadc);
 8010c32:	2002      	movs	r0, #2
 8010c34:	e7ea      	b.n	8010c0c <HAL_ADC_Start_IT+0x58>
 8010c36:	46c0      	nop			; (mov r8, r8)
 8010c38:	fffff0fe 	.word	0xfffff0fe

08010c3c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010c3c:	6803      	ldr	r3, [r0, #0]
 8010c3e:	2208      	movs	r2, #8
 8010c40:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010c42:	6803      	ldr	r3, [r0, #0]
 8010c44:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010c46:	4770      	bx	lr

08010c48 <HAL_ADC_ConfigChannel>:
{
 8010c48:	b530      	push	{r4, r5, lr}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010c52:	3340      	adds	r3, #64	; 0x40
 8010c54:	5cc3      	ldrb	r3, [r0, r3]
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d100      	bne.n	8010c5c <HAL_ADC_ConfigChannel+0x14>
 8010c5a:	e088      	b.n	8010d6e <HAL_ADC_ConfigChannel+0x126>
 8010c5c:	2340      	movs	r3, #64	; 0x40
 8010c5e:	2201      	movs	r2, #1
 8010c60:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010c62:	6803      	ldr	r3, [r0, #0]
 8010c64:	689a      	ldr	r2, [r3, #8]
 8010c66:	0752      	lsls	r2, r2, #29
 8010c68:	d475      	bmi.n	8010d56 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8010c6a:	4a42      	ldr	r2, [pc, #264]	; (8010d74 <HAL_ADC_ConfigChannel+0x12c>)
 8010c6c:	6848      	ldr	r0, [r1, #4]
 8010c6e:	4290      	cmp	r0, r2
 8010c70:	d050      	beq.n	8010d14 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010c72:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010c74:	2201      	movs	r2, #1
 8010c76:	680d      	ldr	r5, [r1, #0]
 8010c78:	40aa      	lsls	r2, r5
 8010c7a:	4302      	orrs	r2, r0
 8010c7c:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010c7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010c80:	2280      	movs	r2, #128	; 0x80
 8010c82:	0552      	lsls	r2, r2, #21
 8010c84:	4293      	cmp	r3, r2
 8010c86:	d013      	beq.n	8010cb0 <HAL_ADC_ConfigChannel+0x68>
 8010c88:	3b01      	subs	r3, #1
 8010c8a:	2b06      	cmp	r3, #6
 8010c8c:	d910      	bls.n	8010cb0 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010c8e:	6822      	ldr	r2, [r4, #0]
 8010c90:	6950      	ldr	r0, [r2, #20]
 8010c92:	2307      	movs	r3, #7
 8010c94:	4003      	ands	r3, r0
 8010c96:	6888      	ldr	r0, [r1, #8]
 8010c98:	4298      	cmp	r0, r3
 8010c9a:	d009      	beq.n	8010cb0 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010c9c:	6950      	ldr	r0, [r2, #20]
 8010c9e:	2307      	movs	r3, #7
 8010ca0:	4398      	bics	r0, r3
 8010ca2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010ca4:	6822      	ldr	r2, [r4, #0]
 8010ca6:	6950      	ldr	r0, [r2, #20]
 8010ca8:	688d      	ldr	r5, [r1, #8]
 8010caa:	402b      	ands	r3, r5
 8010cac:	4303      	orrs	r3, r0
 8010cae:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010cb0:	680b      	ldr	r3, [r1, #0]
 8010cb2:	001a      	movs	r2, r3
 8010cb4:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010cb6:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010cb8:	2a02      	cmp	r2, #2
 8010cba:	d851      	bhi.n	8010d60 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010cbc:	4a2e      	ldr	r2, [pc, #184]	; (8010d78 <HAL_ADC_ConfigChannel+0x130>)
 8010cbe:	6810      	ldr	r0, [r2, #0]
 8010cc0:	2b10      	cmp	r3, #16
 8010cc2:	d024      	beq.n	8010d0e <HAL_ADC_ConfigChannel+0xc6>
 8010cc4:	3b11      	subs	r3, #17
 8010cc6:	425a      	negs	r2, r3
 8010cc8:	415a      	adcs	r2, r3
 8010cca:	4253      	negs	r3, r2
 8010ccc:	4a2b      	ldr	r2, [pc, #172]	; (8010d7c <HAL_ADC_ConfigChannel+0x134>)
 8010cce:	4013      	ands	r3, r2
 8010cd0:	2280      	movs	r2, #128	; 0x80
 8010cd2:	0452      	lsls	r2, r2, #17
 8010cd4:	4694      	mov	ip, r2
 8010cd6:	4463      	add	r3, ip
 8010cd8:	4303      	orrs	r3, r0
 8010cda:	4a27      	ldr	r2, [pc, #156]	; (8010d78 <HAL_ADC_ConfigChannel+0x130>)
 8010cdc:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010cde:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010ce0:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010ce2:	2b10      	cmp	r3, #16
 8010ce4:	d13c      	bne.n	8010d60 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010ce6:	4b26      	ldr	r3, [pc, #152]	; (8010d80 <HAL_ADC_ConfigChannel+0x138>)
 8010ce8:	6818      	ldr	r0, [r3, #0]
 8010cea:	4926      	ldr	r1, [pc, #152]	; (8010d84 <HAL_ADC_ConfigChannel+0x13c>)
 8010cec:	f7ef fa30 	bl	8000150 <__udivsi3>
 8010cf0:	0083      	lsls	r3, r0, #2
 8010cf2:	181b      	adds	r3, r3, r0
 8010cf4:	005b      	lsls	r3, r3, #1
 8010cf6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010cf8:	9b01      	ldr	r3, [sp, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d035      	beq.n	8010d6a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010cfe:	9b01      	ldr	r3, [sp, #4]
 8010d00:	3b01      	subs	r3, #1
 8010d02:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010d04:	9b01      	ldr	r3, [sp, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1f9      	bne.n	8010cfe <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	e028      	b.n	8010d60 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010d0e:	2380      	movs	r3, #128	; 0x80
 8010d10:	041b      	lsls	r3, r3, #16
 8010d12:	e7e1      	b.n	8010cd8 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d16:	2001      	movs	r0, #1
 8010d18:	680d      	ldr	r5, [r1, #0]
 8010d1a:	40a8      	lsls	r0, r5
 8010d1c:	4382      	bics	r2, r0
 8010d1e:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010d20:	680b      	ldr	r3, [r1, #0]
 8010d22:	001a      	movs	r2, r3
 8010d24:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010d26:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010d28:	2a02      	cmp	r2, #2
 8010d2a:	d819      	bhi.n	8010d60 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010d2c:	4a12      	ldr	r2, [pc, #72]	; (8010d78 <HAL_ADC_ConfigChannel+0x130>)
 8010d2e:	6811      	ldr	r1, [r2, #0]
 8010d30:	2b10      	cmp	r3, #16
 8010d32:	d00e      	beq.n	8010d52 <HAL_ADC_ConfigChannel+0x10a>
 8010d34:	3b11      	subs	r3, #17
 8010d36:	425a      	negs	r2, r3
 8010d38:	415a      	adcs	r2, r3
 8010d3a:	4252      	negs	r2, r2
 8010d3c:	23c0      	movs	r3, #192	; 0xc0
 8010d3e:	041b      	lsls	r3, r3, #16
 8010d40:	4013      	ands	r3, r2
 8010d42:	4a11      	ldr	r2, [pc, #68]	; (8010d88 <HAL_ADC_ConfigChannel+0x140>)
 8010d44:	4694      	mov	ip, r2
 8010d46:	4463      	add	r3, ip
 8010d48:	400b      	ands	r3, r1
 8010d4a:	4a0b      	ldr	r2, [pc, #44]	; (8010d78 <HAL_ADC_ConfigChannel+0x130>)
 8010d4c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010d4e:	2000      	movs	r0, #0
 8010d50:	e006      	b.n	8010d60 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010d52:	4b0e      	ldr	r3, [pc, #56]	; (8010d8c <HAL_ADC_ConfigChannel+0x144>)
 8010d54:	e7f8      	b.n	8010d48 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010d56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010d58:	2220      	movs	r2, #32
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010d5e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010d60:	2340      	movs	r3, #64	; 0x40
 8010d62:	2200      	movs	r2, #0
 8010d64:	54e2      	strb	r2, [r4, r3]
}
 8010d66:	b003      	add	sp, #12
 8010d68:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	e7f8      	b.n	8010d60 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8010d6e:	2002      	movs	r0, #2
 8010d70:	e7f9      	b.n	8010d66 <HAL_ADC_ConfigChannel+0x11e>
 8010d72:	46c0      	nop			; (mov r8, r8)
 8010d74:	00001001 	.word	0x00001001
 8010d78:	40012708 	.word	0x40012708
 8010d7c:	ff400000 	.word	0xff400000
 8010d80:	200000a8 	.word	0x200000a8
 8010d84:	000f4240 	.word	0x000f4240
 8010d88:	feffffff 	.word	0xfeffffff
 8010d8c:	ff7fffff 	.word	0xff7fffff

08010d90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010d90:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010d92:	2800      	cmp	r0, #0
 8010d94:	db14      	blt.n	8010dc0 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010d96:	0884      	lsrs	r4, r0, #2
 8010d98:	00a4      	lsls	r4, r4, #2
 8010d9a:	4b14      	ldr	r3, [pc, #80]	; (8010dec <HAL_NVIC_SetPriority+0x5c>)
 8010d9c:	469c      	mov	ip, r3
 8010d9e:	4464      	add	r4, ip
 8010da0:	26c0      	movs	r6, #192	; 0xc0
 8010da2:	00b6      	lsls	r6, r6, #2
 8010da4:	59a5      	ldr	r5, [r4, r6]
 8010da6:	2203      	movs	r2, #3
 8010da8:	4010      	ands	r0, r2
 8010daa:	00c0      	lsls	r0, r0, #3
 8010dac:	23ff      	movs	r3, #255	; 0xff
 8010dae:	001a      	movs	r2, r3
 8010db0:	4082      	lsls	r2, r0
 8010db2:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010db4:	0189      	lsls	r1, r1, #6
 8010db6:	400b      	ands	r3, r1
 8010db8:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010dba:	432b      	orrs	r3, r5
 8010dbc:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010dc0:	230f      	movs	r3, #15
 8010dc2:	4003      	ands	r3, r0
 8010dc4:	3b08      	subs	r3, #8
 8010dc6:	089b      	lsrs	r3, r3, #2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4a09      	ldr	r2, [pc, #36]	; (8010df0 <HAL_NVIC_SetPriority+0x60>)
 8010dcc:	4694      	mov	ip, r2
 8010dce:	4463      	add	r3, ip
 8010dd0:	69dd      	ldr	r5, [r3, #28]
 8010dd2:	2403      	movs	r4, #3
 8010dd4:	4020      	ands	r0, r4
 8010dd6:	00c0      	lsls	r0, r0, #3
 8010dd8:	22ff      	movs	r2, #255	; 0xff
 8010dda:	0014      	movs	r4, r2
 8010ddc:	4084      	lsls	r4, r0
 8010dde:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010de0:	0189      	lsls	r1, r1, #6
 8010de2:	400a      	ands	r2, r1
 8010de4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010de6:	432a      	orrs	r2, r5
 8010de8:	61da      	str	r2, [r3, #28]
 8010dea:	e7e8      	b.n	8010dbe <HAL_NVIC_SetPriority+0x2e>
 8010dec:	e000e100 	.word	0xe000e100
 8010df0:	e000ed00 	.word	0xe000ed00

08010df4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010df4:	231f      	movs	r3, #31
 8010df6:	4018      	ands	r0, r3
 8010df8:	3b1e      	subs	r3, #30
 8010dfa:	4083      	lsls	r3, r0
 8010dfc:	4a01      	ldr	r2, [pc, #4]	; (8010e04 <HAL_NVIC_EnableIRQ+0x10>)
 8010dfe:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010e00:	4770      	bx	lr
 8010e02:	46c0      	nop			; (mov r8, r8)
 8010e04:	e000e100 	.word	0xe000e100

08010e08 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010e08:	231f      	movs	r3, #31
 8010e0a:	4018      	ands	r0, r3
 8010e0c:	3b1e      	subs	r3, #30
 8010e0e:	4083      	lsls	r3, r0
 8010e10:	4901      	ldr	r1, [pc, #4]	; (8010e18 <HAL_NVIC_DisableIRQ+0x10>)
 8010e12:	2280      	movs	r2, #128	; 0x80
 8010e14:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010e16:	4770      	bx	lr
 8010e18:	e000e100 	.word	0xe000e100

08010e1c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010e1c:	3801      	subs	r0, #1
 8010e1e:	2380      	movs	r3, #128	; 0x80
 8010e20:	045b      	lsls	r3, r3, #17
 8010e22:	4298      	cmp	r0, r3
 8010e24:	d20f      	bcs.n	8010e46 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010e26:	4a09      	ldr	r2, [pc, #36]	; (8010e4c <HAL_SYSTICK_Config+0x30>)
 8010e28:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010e2a:	4809      	ldr	r0, [pc, #36]	; (8010e50 <HAL_SYSTICK_Config+0x34>)
 8010e2c:	6a03      	ldr	r3, [r0, #32]
 8010e2e:	021b      	lsls	r3, r3, #8
 8010e30:	0a1b      	lsrs	r3, r3, #8
 8010e32:	21c0      	movs	r1, #192	; 0xc0
 8010e34:	0609      	lsls	r1, r1, #24
 8010e36:	430b      	orrs	r3, r1
 8010e38:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010e3e:	3307      	adds	r3, #7
 8010e40:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010e42:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010e44:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010e46:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8010e48:	e7fc      	b.n	8010e44 <HAL_SYSTICK_Config+0x28>
 8010e4a:	46c0      	nop			; (mov r8, r8)
 8010e4c:	e000e010 	.word	0xe000e010
 8010e50:	e000ed00 	.word	0xe000ed00

08010e54 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010e54:	2804      	cmp	r0, #4
 8010e56:	d005      	beq.n	8010e64 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010e58:	4a05      	ldr	r2, [pc, #20]	; (8010e70 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010e5a:	6813      	ldr	r3, [r2, #0]
 8010e5c:	2104      	movs	r1, #4
 8010e5e:	438b      	bics	r3, r1
 8010e60:	6013      	str	r3, [r2, #0]
  }
}
 8010e62:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010e64:	4a02      	ldr	r2, [pc, #8]	; (8010e70 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010e66:	6813      	ldr	r3, [r2, #0]
 8010e68:	2104      	movs	r1, #4
 8010e6a:	430b      	orrs	r3, r1
 8010e6c:	6013      	str	r3, [r2, #0]
 8010e6e:	e7f8      	b.n	8010e62 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010e70:	e000e010 	.word	0xe000e010

08010e74 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e76:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010e78:	0892      	lsrs	r2, r2, #2
 8010e7a:	2d03      	cmp	r5, #3
 8010e7c:	d927      	bls.n	8010ece <CRC_Handle_8+0x5a>
 8010e7e:	000c      	movs	r4, r1
 8010e80:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010e82:	7823      	ldrb	r3, [r4, #0]
 8010e84:	061b      	lsls	r3, r3, #24
 8010e86:	7866      	ldrb	r6, [r4, #1]
 8010e88:	0436      	lsls	r6, r6, #16
 8010e8a:	4333      	orrs	r3, r6
 8010e8c:	78e6      	ldrb	r6, [r4, #3]
 8010e8e:	4333      	orrs	r3, r6
 8010e90:	78a6      	ldrb	r6, [r4, #2]
 8010e92:	0236      	lsls	r6, r6, #8
 8010e94:	4333      	orrs	r3, r6
 8010e96:	6806      	ldr	r6, [r0, #0]
 8010e98:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8010e9a:	3701      	adds	r7, #1
 8010e9c:	3404      	adds	r4, #4
 8010e9e:	4297      	cmp	r7, r2
 8010ea0:	d3ef      	bcc.n	8010e82 <CRC_Handle_8+0xe>
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	2d03      	cmp	r5, #3
 8010ea6:	d900      	bls.n	8010eaa <CRC_Handle_8+0x36>
 8010ea8:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010eaa:	2203      	movs	r2, #3
 8010eac:	0014      	movs	r4, r2
 8010eae:	402c      	ands	r4, r5
 8010eb0:	422a      	tst	r2, r5
 8010eb2:	d012      	beq.n	8010eda <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 8010eb4:	2c01      	cmp	r4, #1
 8010eb6:	d00c      	beq.n	8010ed2 <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010eb8:	2c02      	cmp	r4, #2
 8010eba:	d111      	bne.n	8010ee0 <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	5cca      	ldrb	r2, [r1, r3]
 8010ec0:	0212      	lsls	r2, r2, #8
 8010ec2:	18cb      	adds	r3, r1, r3
 8010ec4:	785b      	ldrb	r3, [r3, #1]
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	6802      	ldr	r2, [r0, #0]
 8010eca:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 8010ecc:	e005      	b.n	8010eda <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e7eb      	b.n	8010eaa <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	5c5b      	ldrb	r3, [r3, r1]
 8010ed6:	6802      	ldr	r2, [r0, #0]
 8010ed8:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010eda:	6803      	ldr	r3, [r0, #0]
 8010edc:	6818      	ldr	r0, [r3, #0]
}
 8010ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 8010ee0:	2c03      	cmp	r4, #3
 8010ee2:	d1fa      	bne.n	8010eda <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010ee4:	009b      	lsls	r3, r3, #2
 8010ee6:	5ccc      	ldrb	r4, [r1, r3]
 8010ee8:	0224      	lsls	r4, r4, #8
 8010eea:	18cb      	adds	r3, r1, r3
 8010eec:	785a      	ldrb	r2, [r3, #1]
 8010eee:	4322      	orrs	r2, r4
 8010ef0:	6801      	ldr	r1, [r0, #0]
 8010ef2:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010ef4:	789b      	ldrb	r3, [r3, #2]
 8010ef6:	6802      	ldr	r2, [r0, #0]
 8010ef8:	7013      	strb	r3, [r2, #0]
 8010efa:	e7ee      	b.n	8010eda <CRC_Handle_8+0x66>

08010efc <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010efe:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010f00:	0852      	lsrs	r2, r2, #1
 8010f02:	2e01      	cmp	r6, #1
 8010f04:	d918      	bls.n	8010f38 <CRC_Handle_16+0x3c>
 8010f06:	000c      	movs	r4, r1
 8010f08:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010f0a:	8823      	ldrh	r3, [r4, #0]
 8010f0c:	041b      	lsls	r3, r3, #16
 8010f0e:	8867      	ldrh	r7, [r4, #2]
 8010f10:	433b      	orrs	r3, r7
 8010f12:	6807      	ldr	r7, [r0, #0]
 8010f14:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010f16:	3501      	adds	r5, #1
 8010f18:	3404      	adds	r4, #4
 8010f1a:	4295      	cmp	r5, r2
 8010f1c:	d3f5      	bcc.n	8010f0a <CRC_Handle_16+0xe>
 8010f1e:	2301      	movs	r3, #1
 8010f20:	2e01      	cmp	r6, #1
 8010f22:	d900      	bls.n	8010f26 <CRC_Handle_16+0x2a>
 8010f24:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 8010f26:	07f2      	lsls	r2, r6, #31
 8010f28:	d503      	bpl.n	8010f32 <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010f2a:	009b      	lsls	r3, r3, #2
 8010f2c:	5a5b      	ldrh	r3, [r3, r1]
 8010f2e:	6802      	ldr	r2, [r0, #0]
 8010f30:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010f32:	6803      	ldr	r3, [r0, #0]
 8010f34:	6818      	ldr	r0, [r3, #0]
}
 8010f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 8010f38:	2300      	movs	r3, #0
 8010f3a:	e7f4      	b.n	8010f26 <CRC_Handle_16+0x2a>

08010f3c <HAL_CRC_Init>:
{
 8010f3c:	b510      	push	{r4, lr}
 8010f3e:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010f40:	d029      	beq.n	8010f96 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010f42:	7f43      	ldrb	r3, [r0, #29]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d01e      	beq.n	8010f86 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010f48:	2302      	movs	r3, #2
 8010f4a:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010f4c:	0020      	movs	r0, r4
 8010f4e:	f000 f8ab 	bl	80110a8 <HAL_CRCEx_Init>
 8010f52:	2800      	cmp	r0, #0
 8010f54:	d121      	bne.n	8010f9a <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010f56:	7963      	ldrb	r3, [r4, #5]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d118      	bne.n	8010f8e <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	4252      	negs	r2, r2
 8010f62:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010f64:	6822      	ldr	r2, [r4, #0]
 8010f66:	6893      	ldr	r3, [r2, #8]
 8010f68:	2160      	movs	r1, #96	; 0x60
 8010f6a:	438b      	bics	r3, r1
 8010f6c:	6961      	ldr	r1, [r4, #20]
 8010f6e:	430b      	orrs	r3, r1
 8010f70:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010f72:	6822      	ldr	r2, [r4, #0]
 8010f74:	6893      	ldr	r3, [r2, #8]
 8010f76:	2180      	movs	r1, #128	; 0x80
 8010f78:	438b      	bics	r3, r1
 8010f7a:	69a1      	ldr	r1, [r4, #24]
 8010f7c:	430b      	orrs	r3, r1
 8010f7e:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010f80:	2301      	movs	r3, #1
 8010f82:	7763      	strb	r3, [r4, #29]
}
 8010f84:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010f86:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010f88:	f7fb f9d8 	bl	800c33c <HAL_CRC_MspInit>
 8010f8c:	e7dc      	b.n	8010f48 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010f8e:	6823      	ldr	r3, [r4, #0]
 8010f90:	6922      	ldr	r2, [r4, #16]
 8010f92:	611a      	str	r2, [r3, #16]
 8010f94:	e7e6      	b.n	8010f64 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010f96:	2001      	movs	r0, #1
 8010f98:	e7f4      	b.n	8010f84 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010f9a:	2001      	movs	r0, #1
 8010f9c:	e7f2      	b.n	8010f84 <HAL_CRC_Init+0x48>

08010f9e <HAL_CRC_Accumulate>:
{
 8010f9e:	b510      	push	{r4, lr}
 8010fa0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010fa2:	7f03      	ldrb	r3, [r0, #28]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d023      	beq.n	8010ff0 <HAL_CRC_Accumulate+0x52>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010fac:	3301      	adds	r3, #1
 8010fae:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010fb0:	6a03      	ldr	r3, [r0, #32]
 8010fb2:	2b02      	cmp	r3, #2
 8010fb4:	d019      	beq.n	8010fea <HAL_CRC_Accumulate+0x4c>
 8010fb6:	2b03      	cmp	r3, #3
 8010fb8:	d007      	beq.n	8010fca <HAL_CRC_Accumulate+0x2c>
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d012      	beq.n	8010fe4 <HAL_CRC_Accumulate+0x46>
 8010fbe:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	7723      	strb	r3, [r4, #28]
}
 8010fc8:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010fca:	2a00      	cmp	r2, #0
 8010fcc:	d007      	beq.n	8010fde <HAL_CRC_Accumulate+0x40>
 8010fce:	000b      	movs	r3, r1
 8010fd0:	0092      	lsls	r2, r2, #2
 8010fd2:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010fd4:	6822      	ldr	r2, [r4, #0]
 8010fd6:	cb01      	ldmia	r3!, {r0}
 8010fd8:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010fda:	428b      	cmp	r3, r1
 8010fdc:	d1fa      	bne.n	8010fd4 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010fde:	6823      	ldr	r3, [r4, #0]
 8010fe0:	6818      	ldr	r0, [r3, #0]
      break;
 8010fe2:	e7ed      	b.n	8010fc0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010fe4:	f7ff ff46 	bl	8010e74 <CRC_Handle_8>
      break;
 8010fe8:	e7ea      	b.n	8010fc0 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010fea:	f7ff ff87 	bl	8010efc <CRC_Handle_16>
      break;
 8010fee:	e7e7      	b.n	8010fc0 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010ff0:	2002      	movs	r0, #2
 8010ff2:	e7e9      	b.n	8010fc8 <HAL_CRC_Accumulate+0x2a>

08010ff4 <HAL_CRC_Calculate>:
{
 8010ff4:	b570      	push	{r4, r5, r6, lr}
 8010ff6:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010ff8:	7f03      	ldrb	r3, [r0, #28]
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	d029      	beq.n	8011052 <HAL_CRC_Calculate+0x5e>
 8010ffe:	2501      	movs	r5, #1
 8011000:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011002:	2302      	movs	r3, #2
 8011004:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8011006:	6800      	ldr	r0, [r0, #0]
 8011008:	6883      	ldr	r3, [r0, #8]
 801100a:	432b      	orrs	r3, r5
 801100c:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801100e:	6a23      	ldr	r3, [r4, #32]
 8011010:	2b02      	cmp	r3, #2
 8011012:	d01a      	beq.n	801104a <HAL_CRC_Calculate+0x56>
 8011014:	2b03      	cmp	r3, #3
 8011016:	d007      	beq.n	8011028 <HAL_CRC_Calculate+0x34>
 8011018:	2b01      	cmp	r3, #1
 801101a:	d012      	beq.n	8011042 <HAL_CRC_Calculate+0x4e>
 801101c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801101e:	2301      	movs	r3, #1
 8011020:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8011022:	2300      	movs	r3, #0
 8011024:	7723      	strb	r3, [r4, #28]
}
 8011026:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8011028:	2a00      	cmp	r2, #0
 801102a:	d007      	beq.n	801103c <HAL_CRC_Calculate+0x48>
 801102c:	000b      	movs	r3, r1
 801102e:	0092      	lsls	r2, r2, #2
 8011030:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8011032:	6822      	ldr	r2, [r4, #0]
 8011034:	cb01      	ldmia	r3!, {r0}
 8011036:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8011038:	428b      	cmp	r3, r1
 801103a:	d1fa      	bne.n	8011032 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	6818      	ldr	r0, [r3, #0]
      break;
 8011040:	e7ed      	b.n	801101e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8011042:	0020      	movs	r0, r4
 8011044:	f7ff ff16 	bl	8010e74 <CRC_Handle_8>
      break;
 8011048:	e7e9      	b.n	801101e <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 801104a:	0020      	movs	r0, r4
 801104c:	f7ff ff56 	bl	8010efc <CRC_Handle_16>
      break;
 8011050:	e7e5      	b.n	801101e <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8011052:	2002      	movs	r0, #2
 8011054:	e7e7      	b.n	8011026 <HAL_CRC_Calculate+0x32>

08011056 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011056:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011058:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 801105a:	2501      	movs	r5, #1
 801105c:	002c      	movs	r4, r5
 801105e:	409c      	lsls	r4, r3
 8011060:	4221      	tst	r1, r4
 8011062:	d105      	bne.n	8011070 <HAL_CRCEx_Polynomial_Set+0x1a>
 8011064:	3b01      	subs	r3, #1
 8011066:	d2f9      	bcs.n	801105c <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8011068:	2a10      	cmp	r2, #16
 801106a:	d103      	bne.n	8011074 <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 801106c:	2001      	movs	r0, #1
 801106e:	e00e      	b.n	801108e <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8011070:	2a10      	cmp	r2, #16
 8011072:	d011      	beq.n	8011098 <HAL_CRCEx_Polynomial_Set+0x42>
 8011074:	2a18      	cmp	r2, #24
 8011076:	d00b      	beq.n	8011090 <HAL_CRCEx_Polynomial_Set+0x3a>
 8011078:	2a08      	cmp	r2, #8
 801107a:	d011      	beq.n	80110a0 <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 801107c:	6803      	ldr	r3, [r0, #0]
 801107e:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011080:	6801      	ldr	r1, [r0, #0]
 8011082:	688b      	ldr	r3, [r1, #8]
 8011084:	2018      	movs	r0, #24
 8011086:	4383      	bics	r3, r0
 8011088:	431a      	orrs	r2, r3
 801108a:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 801108c:	2000      	movs	r0, #0
}
 801108e:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011090:	2b06      	cmp	r3, #6
 8011092:	d9f3      	bls.n	801107c <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8011094:	2001      	movs	r0, #1
 8011096:	e7fa      	b.n	801108e <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8011098:	2b07      	cmp	r3, #7
 801109a:	d9ef      	bls.n	801107c <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 801109c:	2001      	movs	r0, #1
 801109e:	e7f6      	b.n	801108e <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 80110a0:	2b0f      	cmp	r3, #15
 80110a2:	d9eb      	bls.n	801107c <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 80110a4:	2001      	movs	r0, #1
 80110a6:	e7f2      	b.n	801108e <HAL_CRCEx_Polynomial_Set+0x38>

080110a8 <HAL_CRCEx_Init>:
{
 80110a8:	b510      	push	{r4, lr}
 80110aa:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80110ac:	7900      	ldrb	r0, [r0, #4]
 80110ae:	2800      	cmp	r0, #0
 80110b0:	d108      	bne.n	80110c4 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80110b2:	681a      	ldr	r2, [r3, #0]
 80110b4:	4908      	ldr	r1, [pc, #32]	; (80110d8 <HAL_CRCEx_Init+0x30>)
 80110b6:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	6893      	ldr	r3, [r2, #8]
 80110bc:	2118      	movs	r1, #24
 80110be:	438b      	bics	r3, r1
 80110c0:	6093      	str	r3, [r2, #8]
}
 80110c2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80110c4:	68da      	ldr	r2, [r3, #12]
 80110c6:	6899      	ldr	r1, [r3, #8]
 80110c8:	0018      	movs	r0, r3
 80110ca:	f7ff ffc4 	bl	8011056 <HAL_CRCEx_Polynomial_Set>
 80110ce:	1e43      	subs	r3, r0, #1
 80110d0:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80110d2:	b2c0      	uxtb	r0, r0
 80110d4:	e7f5      	b.n	80110c2 <HAL_CRCEx_Init+0x1a>
 80110d6:	46c0      	nop			; (mov r8, r8)
 80110d8:	04c11db7 	.word	0x04c11db7

080110dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80110dc:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80110de:	2800      	cmp	r0, #0
 80110e0:	d022      	beq.n	8011128 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80110e2:	2321      	movs	r3, #33	; 0x21
 80110e4:	5cc3      	ldrb	r3, [r0, r3]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d102      	bne.n	80110f0 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80110ea:	3320      	adds	r3, #32
 80110ec:	2200      	movs	r2, #0
 80110ee:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80110f0:	2121      	movs	r1, #33	; 0x21
 80110f2:	2302      	movs	r3, #2
 80110f4:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80110f6:	6804      	ldr	r4, [r0, #0]
 80110f8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80110fa:	4a0c      	ldr	r2, [pc, #48]	; (801112c <HAL_DMA_Init+0x50>)
 80110fc:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80110fe:	6843      	ldr	r3, [r0, #4]
 8011100:	6885      	ldr	r5, [r0, #8]
 8011102:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011104:	68c5      	ldr	r5, [r0, #12]
 8011106:	432b      	orrs	r3, r5
 8011108:	6905      	ldr	r5, [r0, #16]
 801110a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801110c:	6945      	ldr	r5, [r0, #20]
 801110e:	432b      	orrs	r3, r5
 8011110:	6985      	ldr	r5, [r0, #24]
 8011112:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8011114:	69c5      	ldr	r5, [r0, #28]
 8011116:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011118:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801111a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801111c:	2300      	movs	r3, #0
 801111e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011120:	3301      	adds	r3, #1
 8011122:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8011124:	2000      	movs	r0, #0
}  
 8011126:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011128:	2001      	movs	r0, #1
 801112a:	e7fc      	b.n	8011126 <HAL_DMA_Init+0x4a>
 801112c:	ffffc00f 	.word	0xffffc00f

08011130 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011130:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8011132:	2420      	movs	r4, #32
 8011134:	5d04      	ldrb	r4, [r0, r4]
 8011136:	2c01      	cmp	r4, #1
 8011138:	d02d      	beq.n	8011196 <HAL_DMA_Start_IT+0x66>
 801113a:	2601      	movs	r6, #1
 801113c:	2420      	movs	r4, #32
 801113e:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011140:	3401      	adds	r4, #1
 8011142:	2502      	movs	r5, #2
 8011144:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011146:	6805      	ldr	r5, [r0, #0]
 8011148:	682c      	ldr	r4, [r5, #0]
 801114a:	43b4      	bics	r4, r6
 801114c:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801114e:	6804      	ldr	r4, [r0, #0]
 8011150:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011152:	6843      	ldr	r3, [r0, #4]
 8011154:	2b10      	cmp	r3, #16
 8011156:	d019      	beq.n	801118c <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011158:	6803      	ldr	r3, [r0, #0]
 801115a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 801115c:	6803      	ldr	r3, [r0, #0]
 801115e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011160:	6802      	ldr	r2, [r0, #0]
 8011162:	6813      	ldr	r3, [r2, #0]
 8011164:	2102      	movs	r1, #2
 8011166:	430b      	orrs	r3, r1
 8011168:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801116a:	6802      	ldr	r2, [r0, #0]
 801116c:	6813      	ldr	r3, [r2, #0]
 801116e:	3102      	adds	r1, #2
 8011170:	430b      	orrs	r3, r1
 8011172:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011174:	6802      	ldr	r2, [r0, #0]
 8011176:	6813      	ldr	r3, [r2, #0]
 8011178:	3104      	adds	r1, #4
 801117a:	430b      	orrs	r3, r1
 801117c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801117e:	6802      	ldr	r2, [r0, #0]
 8011180:	6813      	ldr	r3, [r2, #0]
 8011182:	3907      	subs	r1, #7
 8011184:	430b      	orrs	r3, r1
 8011186:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011188:	2000      	movs	r0, #0
} 
 801118a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 801118c:	6803      	ldr	r3, [r0, #0]
 801118e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8011190:	6803      	ldr	r3, [r0, #0]
 8011192:	60d9      	str	r1, [r3, #12]
 8011194:	e7e4      	b.n	8011160 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8011196:	2002      	movs	r0, #2
 8011198:	e7f7      	b.n	801118a <HAL_DMA_Start_IT+0x5a>

0801119a <HAL_DMA_Abort>:
{
 801119a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801119c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801119e:	6802      	ldr	r2, [r0, #0]
 80111a0:	6813      	ldr	r3, [r2, #0]
 80111a2:	2101      	movs	r1, #1
 80111a4:	438b      	bics	r3, r1
 80111a6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80111a8:	f7ff fac8 	bl	801073c <HAL_GetTick>
 80111ac:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80111ae:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80111b0:	27fa      	movs	r7, #250	; 0xfa
 80111b2:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80111b4:	6823      	ldr	r3, [r4, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	421e      	tst	r6, r3
 80111ba:	d00f      	beq.n	80111dc <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80111bc:	f7ff fabe 	bl	801073c <HAL_GetTick>
 80111c0:	1b40      	subs	r0, r0, r5
 80111c2:	42b8      	cmp	r0, r7
 80111c4:	d9f6      	bls.n	80111b4 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80111c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80111c8:	2220      	movs	r2, #32
 80111ca:	4313      	orrs	r3, r2
 80111cc:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80111ce:	2321      	movs	r3, #33	; 0x21
 80111d0:	2103      	movs	r1, #3
 80111d2:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80111d4:	2300      	movs	r3, #0
 80111d6:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80111d8:	2003      	movs	r0, #3
 80111da:	e006      	b.n	80111ea <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80111dc:	2321      	movs	r3, #33	; 0x21
 80111de:	2201      	movs	r2, #1
 80111e0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80111e2:	3b01      	subs	r3, #1
 80111e4:	2200      	movs	r2, #0
 80111e6:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80111e8:	2000      	movs	r0, #0
}
 80111ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111ec <HAL_DMA_IRQHandler>:
{        
 80111ec:	b510      	push	{r4, lr}
 80111ee:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80111f0:	6803      	ldr	r3, [r0, #0]
 80111f2:	4ab1      	ldr	r2, [pc, #708]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d97e      	bls.n	80112f6 <HAL_DMA_IRQHandler+0x10a>
 80111f8:	4ab0      	ldr	r2, [pc, #704]	; (80114bc <HAL_DMA_IRQHandler+0x2d0>)
 80111fa:	6811      	ldr	r1, [r2, #0]
 80111fc:	4ab0      	ldr	r2, [pc, #704]	; (80114c0 <HAL_DMA_IRQHandler+0x2d4>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d026      	beq.n	8011250 <HAL_DMA_IRQHandler+0x64>
 8011202:	4ab0      	ldr	r2, [pc, #704]	; (80114c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d05e      	beq.n	80112c6 <HAL_DMA_IRQHandler+0xda>
 8011208:	4aaf      	ldr	r2, [pc, #700]	; (80114c8 <HAL_DMA_IRQHandler+0x2dc>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d05d      	beq.n	80112ca <HAL_DMA_IRQHandler+0xde>
 801120e:	4aaf      	ldr	r2, [pc, #700]	; (80114cc <HAL_DMA_IRQHandler+0x2e0>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d05d      	beq.n	80112d0 <HAL_DMA_IRQHandler+0xe4>
 8011214:	4aae      	ldr	r2, [pc, #696]	; (80114d0 <HAL_DMA_IRQHandler+0x2e4>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d05d      	beq.n	80112d6 <HAL_DMA_IRQHandler+0xea>
 801121a:	4aae      	ldr	r2, [pc, #696]	; (80114d4 <HAL_DMA_IRQHandler+0x2e8>)
 801121c:	4293      	cmp	r3, r2
 801121e:	d05d      	beq.n	80112dc <HAL_DMA_IRQHandler+0xf0>
 8011220:	4aa5      	ldr	r2, [pc, #660]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d05d      	beq.n	80112e2 <HAL_DMA_IRQHandler+0xf6>
 8011226:	4aac      	ldr	r2, [pc, #688]	; (80114d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d05d      	beq.n	80112e8 <HAL_DMA_IRQHandler+0xfc>
 801122c:	4aab      	ldr	r2, [pc, #684]	; (80114dc <HAL_DMA_IRQHandler+0x2f0>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d05c      	beq.n	80112ec <HAL_DMA_IRQHandler+0x100>
 8011232:	4aab      	ldr	r2, [pc, #684]	; (80114e0 <HAL_DMA_IRQHandler+0x2f4>)
 8011234:	4293      	cmp	r3, r2
 8011236:	d05b      	beq.n	80112f0 <HAL_DMA_IRQHandler+0x104>
 8011238:	4aaa      	ldr	r2, [pc, #680]	; (80114e4 <HAL_DMA_IRQHandler+0x2f8>)
 801123a:	189a      	adds	r2, r3, r2
 801123c:	4250      	negs	r0, r2
 801123e:	4142      	adcs	r2, r0
 8011240:	4252      	negs	r2, r2
 8011242:	48a9      	ldr	r0, [pc, #676]	; (80114e8 <HAL_DMA_IRQHandler+0x2fc>)
 8011244:	4002      	ands	r2, r0
 8011246:	2080      	movs	r0, #128	; 0x80
 8011248:	0300      	lsls	r0, r0, #12
 801124a:	4684      	mov	ip, r0
 801124c:	4462      	add	r2, ip
 801124e:	e000      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 8011250:	2208      	movs	r2, #8
 8011252:	420a      	tst	r2, r1
 8011254:	d001      	beq.n	801125a <HAL_DMA_IRQHandler+0x6e>
 8011256:	f000 fbfb 	bl	8011a50 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801125a:	4a98      	ldr	r2, [pc, #608]	; (80114bc <HAL_DMA_IRQHandler+0x2d0>)
 801125c:	6811      	ldr	r1, [r2, #0]
 801125e:	4a98      	ldr	r2, [pc, #608]	; (80114c0 <HAL_DMA_IRQHandler+0x2d4>)
 8011260:	4293      	cmp	r3, r2
 8011262:	d100      	bne.n	8011266 <HAL_DMA_IRQHandler+0x7a>
 8011264:	e18d      	b.n	8011582 <HAL_DMA_IRQHandler+0x396>
 8011266:	4a97      	ldr	r2, [pc, #604]	; (80114c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d100      	bne.n	801126e <HAL_DMA_IRQHandler+0x82>
 801126c:	e18e      	b.n	801158c <HAL_DMA_IRQHandler+0x3a0>
 801126e:	4a96      	ldr	r2, [pc, #600]	; (80114c8 <HAL_DMA_IRQHandler+0x2dc>)
 8011270:	4293      	cmp	r3, r2
 8011272:	d100      	bne.n	8011276 <HAL_DMA_IRQHandler+0x8a>
 8011274:	e18c      	b.n	8011590 <HAL_DMA_IRQHandler+0x3a4>
 8011276:	4a95      	ldr	r2, [pc, #596]	; (80114cc <HAL_DMA_IRQHandler+0x2e0>)
 8011278:	4293      	cmp	r3, r2
 801127a:	d100      	bne.n	801127e <HAL_DMA_IRQHandler+0x92>
 801127c:	e18b      	b.n	8011596 <HAL_DMA_IRQHandler+0x3aa>
 801127e:	4a94      	ldr	r2, [pc, #592]	; (80114d0 <HAL_DMA_IRQHandler+0x2e4>)
 8011280:	4293      	cmp	r3, r2
 8011282:	d100      	bne.n	8011286 <HAL_DMA_IRQHandler+0x9a>
 8011284:	e18a      	b.n	801159c <HAL_DMA_IRQHandler+0x3b0>
 8011286:	4a93      	ldr	r2, [pc, #588]	; (80114d4 <HAL_DMA_IRQHandler+0x2e8>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d100      	bne.n	801128e <HAL_DMA_IRQHandler+0xa2>
 801128c:	e189      	b.n	80115a2 <HAL_DMA_IRQHandler+0x3b6>
 801128e:	4a8a      	ldr	r2, [pc, #552]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d100      	bne.n	8011296 <HAL_DMA_IRQHandler+0xaa>
 8011294:	e188      	b.n	80115a8 <HAL_DMA_IRQHandler+0x3bc>
 8011296:	4a90      	ldr	r2, [pc, #576]	; (80114d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d100      	bne.n	801129e <HAL_DMA_IRQHandler+0xb2>
 801129c:	e187      	b.n	80115ae <HAL_DMA_IRQHandler+0x3c2>
 801129e:	4a8f      	ldr	r2, [pc, #572]	; (80114dc <HAL_DMA_IRQHandler+0x2f0>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d100      	bne.n	80112a6 <HAL_DMA_IRQHandler+0xba>
 80112a4:	e185      	b.n	80115b2 <HAL_DMA_IRQHandler+0x3c6>
 80112a6:	4a8e      	ldr	r2, [pc, #568]	; (80114e0 <HAL_DMA_IRQHandler+0x2f4>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d100      	bne.n	80112ae <HAL_DMA_IRQHandler+0xc2>
 80112ac:	e183      	b.n	80115b6 <HAL_DMA_IRQHandler+0x3ca>
 80112ae:	4a8d      	ldr	r2, [pc, #564]	; (80114e4 <HAL_DMA_IRQHandler+0x2f8>)
 80112b0:	189a      	adds	r2, r3, r2
 80112b2:	4250      	negs	r0, r2
 80112b4:	4142      	adcs	r2, r0
 80112b6:	4252      	negs	r2, r2
 80112b8:	488c      	ldr	r0, [pc, #560]	; (80114ec <HAL_DMA_IRQHandler+0x300>)
 80112ba:	4002      	ands	r2, r0
 80112bc:	2080      	movs	r0, #128	; 0x80
 80112be:	02c0      	lsls	r0, r0, #11
 80112c0:	4684      	mov	ip, r0
 80112c2:	4462      	add	r2, ip
 80112c4:	e15e      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80112c6:	2280      	movs	r2, #128	; 0x80
 80112c8:	e7c3      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112ca:	2280      	movs	r2, #128	; 0x80
 80112cc:	0112      	lsls	r2, r2, #4
 80112ce:	e7c0      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112d0:	2280      	movs	r2, #128	; 0x80
 80112d2:	0212      	lsls	r2, r2, #8
 80112d4:	e7bd      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112d6:	2280      	movs	r2, #128	; 0x80
 80112d8:	0312      	lsls	r2, r2, #12
 80112da:	e7ba      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112dc:	2280      	movs	r2, #128	; 0x80
 80112de:	0412      	lsls	r2, r2, #16
 80112e0:	e7b7      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112e2:	2280      	movs	r2, #128	; 0x80
 80112e4:	0512      	lsls	r2, r2, #20
 80112e6:	e7b4      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112e8:	2208      	movs	r2, #8
 80112ea:	e7b2      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112ec:	2280      	movs	r2, #128	; 0x80
 80112ee:	e7b0      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112f0:	2280      	movs	r2, #128	; 0x80
 80112f2:	0112      	lsls	r2, r2, #4
 80112f4:	e7ad      	b.n	8011252 <HAL_DMA_IRQHandler+0x66>
 80112f6:	4a7e      	ldr	r2, [pc, #504]	; (80114f0 <HAL_DMA_IRQHandler+0x304>)
 80112f8:	6811      	ldr	r1, [r2, #0]
 80112fa:	4a71      	ldr	r2, [pc, #452]	; (80114c0 <HAL_DMA_IRQHandler+0x2d4>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d026      	beq.n	801134e <HAL_DMA_IRQHandler+0x162>
 8011300:	4a70      	ldr	r2, [pc, #448]	; (80114c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d05d      	beq.n	80113c2 <HAL_DMA_IRQHandler+0x1d6>
 8011306:	4a70      	ldr	r2, [pc, #448]	; (80114c8 <HAL_DMA_IRQHandler+0x2dc>)
 8011308:	4293      	cmp	r3, r2
 801130a:	d05c      	beq.n	80113c6 <HAL_DMA_IRQHandler+0x1da>
 801130c:	4a6f      	ldr	r2, [pc, #444]	; (80114cc <HAL_DMA_IRQHandler+0x2e0>)
 801130e:	4293      	cmp	r3, r2
 8011310:	d05c      	beq.n	80113cc <HAL_DMA_IRQHandler+0x1e0>
 8011312:	4a6f      	ldr	r2, [pc, #444]	; (80114d0 <HAL_DMA_IRQHandler+0x2e4>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d05c      	beq.n	80113d2 <HAL_DMA_IRQHandler+0x1e6>
 8011318:	4a6e      	ldr	r2, [pc, #440]	; (80114d4 <HAL_DMA_IRQHandler+0x2e8>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d05c      	beq.n	80113d8 <HAL_DMA_IRQHandler+0x1ec>
 801131e:	4a66      	ldr	r2, [pc, #408]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d05c      	beq.n	80113de <HAL_DMA_IRQHandler+0x1f2>
 8011324:	4a6c      	ldr	r2, [pc, #432]	; (80114d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011326:	4293      	cmp	r3, r2
 8011328:	d05c      	beq.n	80113e4 <HAL_DMA_IRQHandler+0x1f8>
 801132a:	4a6c      	ldr	r2, [pc, #432]	; (80114dc <HAL_DMA_IRQHandler+0x2f0>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d05b      	beq.n	80113e8 <HAL_DMA_IRQHandler+0x1fc>
 8011330:	4a6b      	ldr	r2, [pc, #428]	; (80114e0 <HAL_DMA_IRQHandler+0x2f4>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d05a      	beq.n	80113ec <HAL_DMA_IRQHandler+0x200>
 8011336:	4a6b      	ldr	r2, [pc, #428]	; (80114e4 <HAL_DMA_IRQHandler+0x2f8>)
 8011338:	189a      	adds	r2, r3, r2
 801133a:	4250      	negs	r0, r2
 801133c:	4142      	adcs	r2, r0
 801133e:	4252      	negs	r2, r2
 8011340:	4869      	ldr	r0, [pc, #420]	; (80114e8 <HAL_DMA_IRQHandler+0x2fc>)
 8011342:	4002      	ands	r2, r0
 8011344:	2080      	movs	r0, #128	; 0x80
 8011346:	0300      	lsls	r0, r0, #12
 8011348:	4684      	mov	ip, r0
 801134a:	4462      	add	r2, ip
 801134c:	e000      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 801134e:	2208      	movs	r2, #8
 8011350:	420a      	tst	r2, r1
 8011352:	d000      	beq.n	8011356 <HAL_DMA_IRQHandler+0x16a>
 8011354:	e376      	b.n	8011a44 <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011356:	4a66      	ldr	r2, [pc, #408]	; (80114f0 <HAL_DMA_IRQHandler+0x304>)
 8011358:	6811      	ldr	r1, [r2, #0]
 801135a:	4a59      	ldr	r2, [pc, #356]	; (80114c0 <HAL_DMA_IRQHandler+0x2d4>)
 801135c:	4293      	cmp	r3, r2
 801135e:	d100      	bne.n	8011362 <HAL_DMA_IRQHandler+0x176>
 8011360:	e12c      	b.n	80115bc <HAL_DMA_IRQHandler+0x3d0>
 8011362:	4a58      	ldr	r2, [pc, #352]	; (80114c4 <HAL_DMA_IRQHandler+0x2d8>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d100      	bne.n	801136a <HAL_DMA_IRQHandler+0x17e>
 8011368:	e16e      	b.n	8011648 <HAL_DMA_IRQHandler+0x45c>
 801136a:	4a57      	ldr	r2, [pc, #348]	; (80114c8 <HAL_DMA_IRQHandler+0x2dc>)
 801136c:	4293      	cmp	r3, r2
 801136e:	d100      	bne.n	8011372 <HAL_DMA_IRQHandler+0x186>
 8011370:	e16c      	b.n	801164c <HAL_DMA_IRQHandler+0x460>
 8011372:	4a56      	ldr	r2, [pc, #344]	; (80114cc <HAL_DMA_IRQHandler+0x2e0>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d100      	bne.n	801137a <HAL_DMA_IRQHandler+0x18e>
 8011378:	e16b      	b.n	8011652 <HAL_DMA_IRQHandler+0x466>
 801137a:	4a55      	ldr	r2, [pc, #340]	; (80114d0 <HAL_DMA_IRQHandler+0x2e4>)
 801137c:	4293      	cmp	r3, r2
 801137e:	d100      	bne.n	8011382 <HAL_DMA_IRQHandler+0x196>
 8011380:	e16a      	b.n	8011658 <HAL_DMA_IRQHandler+0x46c>
 8011382:	4a54      	ldr	r2, [pc, #336]	; (80114d4 <HAL_DMA_IRQHandler+0x2e8>)
 8011384:	4293      	cmp	r3, r2
 8011386:	d100      	bne.n	801138a <HAL_DMA_IRQHandler+0x19e>
 8011388:	e169      	b.n	801165e <HAL_DMA_IRQHandler+0x472>
 801138a:	4a4b      	ldr	r2, [pc, #300]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 801138c:	4293      	cmp	r3, r2
 801138e:	d100      	bne.n	8011392 <HAL_DMA_IRQHandler+0x1a6>
 8011390:	e168      	b.n	8011664 <HAL_DMA_IRQHandler+0x478>
 8011392:	4a51      	ldr	r2, [pc, #324]	; (80114d8 <HAL_DMA_IRQHandler+0x2ec>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d100      	bne.n	801139a <HAL_DMA_IRQHandler+0x1ae>
 8011398:	e167      	b.n	801166a <HAL_DMA_IRQHandler+0x47e>
 801139a:	4a50      	ldr	r2, [pc, #320]	; (80114dc <HAL_DMA_IRQHandler+0x2f0>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d100      	bne.n	80113a2 <HAL_DMA_IRQHandler+0x1b6>
 80113a0:	e165      	b.n	801166e <HAL_DMA_IRQHandler+0x482>
 80113a2:	4a4f      	ldr	r2, [pc, #316]	; (80114e0 <HAL_DMA_IRQHandler+0x2f4>)
 80113a4:	4293      	cmp	r3, r2
 80113a6:	d100      	bne.n	80113aa <HAL_DMA_IRQHandler+0x1be>
 80113a8:	e163      	b.n	8011672 <HAL_DMA_IRQHandler+0x486>
 80113aa:	4a4e      	ldr	r2, [pc, #312]	; (80114e4 <HAL_DMA_IRQHandler+0x2f8>)
 80113ac:	189a      	adds	r2, r3, r2
 80113ae:	4250      	negs	r0, r2
 80113b0:	4142      	adcs	r2, r0
 80113b2:	4252      	negs	r2, r2
 80113b4:	484d      	ldr	r0, [pc, #308]	; (80114ec <HAL_DMA_IRQHandler+0x300>)
 80113b6:	4002      	ands	r2, r0
 80113b8:	2080      	movs	r0, #128	; 0x80
 80113ba:	02c0      	lsls	r0, r0, #11
 80113bc:	4684      	mov	ip, r0
 80113be:	4462      	add	r2, ip
 80113c0:	e0fd      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80113c2:	2280      	movs	r2, #128	; 0x80
 80113c4:	e7c4      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113c6:	2280      	movs	r2, #128	; 0x80
 80113c8:	0112      	lsls	r2, r2, #4
 80113ca:	e7c1      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113cc:	2280      	movs	r2, #128	; 0x80
 80113ce:	0212      	lsls	r2, r2, #8
 80113d0:	e7be      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113d2:	2280      	movs	r2, #128	; 0x80
 80113d4:	0312      	lsls	r2, r2, #12
 80113d6:	e7bb      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113d8:	2280      	movs	r2, #128	; 0x80
 80113da:	0412      	lsls	r2, r2, #16
 80113dc:	e7b8      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113de:	2280      	movs	r2, #128	; 0x80
 80113e0:	0512      	lsls	r2, r2, #20
 80113e2:	e7b5      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113e4:	2208      	movs	r2, #8
 80113e6:	e7b3      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113e8:	2280      	movs	r2, #128	; 0x80
 80113ea:	e7b1      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
 80113ec:	2280      	movs	r2, #128	; 0x80
 80113ee:	0112      	lsls	r2, r2, #4
 80113f0:	e7ae      	b.n	8011350 <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	2108      	movs	r1, #8
 80113f6:	438a      	bics	r2, r1
 80113f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	4a2e      	ldr	r2, [pc, #184]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d978      	bls.n	80114f4 <HAL_DMA_IRQHandler+0x308>
 8011402:	4a2f      	ldr	r2, [pc, #188]	; (80114c0 <HAL_DMA_IRQHandler+0x2d4>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d027      	beq.n	8011458 <HAL_DMA_IRQHandler+0x26c>
 8011408:	4a2e      	ldr	r2, [pc, #184]	; (80114c4 <HAL_DMA_IRQHandler+0x2d8>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d03c      	beq.n	8011488 <HAL_DMA_IRQHandler+0x29c>
 801140e:	4a2e      	ldr	r2, [pc, #184]	; (80114c8 <HAL_DMA_IRQHandler+0x2dc>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d03b      	beq.n	801148c <HAL_DMA_IRQHandler+0x2a0>
 8011414:	4a2d      	ldr	r2, [pc, #180]	; (80114cc <HAL_DMA_IRQHandler+0x2e0>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d03b      	beq.n	8011492 <HAL_DMA_IRQHandler+0x2a6>
 801141a:	4a2d      	ldr	r2, [pc, #180]	; (80114d0 <HAL_DMA_IRQHandler+0x2e4>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d03b      	beq.n	8011498 <HAL_DMA_IRQHandler+0x2ac>
 8011420:	4a2c      	ldr	r2, [pc, #176]	; (80114d4 <HAL_DMA_IRQHandler+0x2e8>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d03b      	beq.n	801149e <HAL_DMA_IRQHandler+0x2b2>
 8011426:	4a24      	ldr	r2, [pc, #144]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011428:	4293      	cmp	r3, r2
 801142a:	d03b      	beq.n	80114a4 <HAL_DMA_IRQHandler+0x2b8>
 801142c:	4a2a      	ldr	r2, [pc, #168]	; (80114d8 <HAL_DMA_IRQHandler+0x2ec>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d03b      	beq.n	80114aa <HAL_DMA_IRQHandler+0x2be>
 8011432:	4a2a      	ldr	r2, [pc, #168]	; (80114dc <HAL_DMA_IRQHandler+0x2f0>)
 8011434:	4293      	cmp	r3, r2
 8011436:	d03a      	beq.n	80114ae <HAL_DMA_IRQHandler+0x2c2>
 8011438:	4a29      	ldr	r2, [pc, #164]	; (80114e0 <HAL_DMA_IRQHandler+0x2f4>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d039      	beq.n	80114b2 <HAL_DMA_IRQHandler+0x2c6>
 801143e:	4a29      	ldr	r2, [pc, #164]	; (80114e4 <HAL_DMA_IRQHandler+0x2f8>)
 8011440:	4694      	mov	ip, r2
 8011442:	4463      	add	r3, ip
 8011444:	425a      	negs	r2, r3
 8011446:	4153      	adcs	r3, r2
 8011448:	425b      	negs	r3, r3
 801144a:	4a27      	ldr	r2, [pc, #156]	; (80114e8 <HAL_DMA_IRQHandler+0x2fc>)
 801144c:	4013      	ands	r3, r2
 801144e:	2280      	movs	r2, #128	; 0x80
 8011450:	0312      	lsls	r2, r2, #12
 8011452:	4694      	mov	ip, r2
 8011454:	4463      	add	r3, ip
 8011456:	e000      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 8011458:	2308      	movs	r3, #8
 801145a:	4a18      	ldr	r2, [pc, #96]	; (80114bc <HAL_DMA_IRQHandler+0x2d0>)
 801145c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 801145e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011460:	2201      	movs	r2, #1
 8011462:	4313      	orrs	r3, r2
 8011464:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011466:	2321      	movs	r3, #33	; 0x21
 8011468:	3203      	adds	r2, #3
 801146a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 801146c:	3b01      	subs	r3, #1
 801146e:	2200      	movs	r2, #0
 8011470:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011472:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 8011478:	0020      	movs	r0, r4
 801147a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801147c:	6823      	ldr	r3, [r4, #0]
 801147e:	4a0e      	ldr	r2, [pc, #56]	; (80114b8 <HAL_DMA_IRQHandler+0x2cc>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d800      	bhi.n	8011486 <HAL_DMA_IRQHandler+0x29a>
 8011484:	e767      	b.n	8011356 <HAL_DMA_IRQHandler+0x16a>
 8011486:	e6e8      	b.n	801125a <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011488:	2380      	movs	r3, #128	; 0x80
 801148a:	e7e6      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 801148c:	2380      	movs	r3, #128	; 0x80
 801148e:	011b      	lsls	r3, r3, #4
 8011490:	e7e3      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 8011492:	2380      	movs	r3, #128	; 0x80
 8011494:	021b      	lsls	r3, r3, #8
 8011496:	e7e0      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	031b      	lsls	r3, r3, #12
 801149c:	e7dd      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 801149e:	2380      	movs	r3, #128	; 0x80
 80114a0:	041b      	lsls	r3, r3, #16
 80114a2:	e7da      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 80114a4:	2380      	movs	r3, #128	; 0x80
 80114a6:	051b      	lsls	r3, r3, #20
 80114a8:	e7d7      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 80114aa:	2308      	movs	r3, #8
 80114ac:	e7d5      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 80114ae:	2380      	movs	r3, #128	; 0x80
 80114b0:	e7d3      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 80114b2:	2380      	movs	r3, #128	; 0x80
 80114b4:	011b      	lsls	r3, r3, #4
 80114b6:	e7d0      	b.n	801145a <HAL_DMA_IRQHandler+0x26e>
 80114b8:	40020080 	.word	0x40020080
 80114bc:	40020400 	.word	0x40020400
 80114c0:	40020008 	.word	0x40020008
 80114c4:	4002001c 	.word	0x4002001c
 80114c8:	40020030 	.word	0x40020030
 80114cc:	40020044 	.word	0x40020044
 80114d0:	40020058 	.word	0x40020058
 80114d4:	4002006c 	.word	0x4002006c
 80114d8:	40020408 	.word	0x40020408
 80114dc:	4002041c 	.word	0x4002041c
 80114e0:	40020430 	.word	0x40020430
 80114e4:	bffdfbbc 	.word	0xbffdfbbc
 80114e8:	fff88000 	.word	0xfff88000
 80114ec:	fffc4000 	.word	0xfffc4000
 80114f0:	40020000 	.word	0x40020000
 80114f4:	4ab3      	ldr	r2, [pc, #716]	; (80117c4 <HAL_DMA_IRQHandler+0x5d8>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d027      	beq.n	801154a <HAL_DMA_IRQHandler+0x35e>
 80114fa:	4ab3      	ldr	r2, [pc, #716]	; (80117c8 <HAL_DMA_IRQHandler+0x5dc>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d028      	beq.n	8011552 <HAL_DMA_IRQHandler+0x366>
 8011500:	4ab2      	ldr	r2, [pc, #712]	; (80117cc <HAL_DMA_IRQHandler+0x5e0>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d027      	beq.n	8011556 <HAL_DMA_IRQHandler+0x36a>
 8011506:	4ab2      	ldr	r2, [pc, #712]	; (80117d0 <HAL_DMA_IRQHandler+0x5e4>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d027      	beq.n	801155c <HAL_DMA_IRQHandler+0x370>
 801150c:	4ab1      	ldr	r2, [pc, #708]	; (80117d4 <HAL_DMA_IRQHandler+0x5e8>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d027      	beq.n	8011562 <HAL_DMA_IRQHandler+0x376>
 8011512:	4ab1      	ldr	r2, [pc, #708]	; (80117d8 <HAL_DMA_IRQHandler+0x5ec>)
 8011514:	4293      	cmp	r3, r2
 8011516:	d027      	beq.n	8011568 <HAL_DMA_IRQHandler+0x37c>
 8011518:	4ab0      	ldr	r2, [pc, #704]	; (80117dc <HAL_DMA_IRQHandler+0x5f0>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d027      	beq.n	801156e <HAL_DMA_IRQHandler+0x382>
 801151e:	4ab0      	ldr	r2, [pc, #704]	; (80117e0 <HAL_DMA_IRQHandler+0x5f4>)
 8011520:	4293      	cmp	r3, r2
 8011522:	d027      	beq.n	8011574 <HAL_DMA_IRQHandler+0x388>
 8011524:	4aaf      	ldr	r2, [pc, #700]	; (80117e4 <HAL_DMA_IRQHandler+0x5f8>)
 8011526:	4293      	cmp	r3, r2
 8011528:	d026      	beq.n	8011578 <HAL_DMA_IRQHandler+0x38c>
 801152a:	4aaf      	ldr	r2, [pc, #700]	; (80117e8 <HAL_DMA_IRQHandler+0x5fc>)
 801152c:	4293      	cmp	r3, r2
 801152e:	d025      	beq.n	801157c <HAL_DMA_IRQHandler+0x390>
 8011530:	4aae      	ldr	r2, [pc, #696]	; (80117ec <HAL_DMA_IRQHandler+0x600>)
 8011532:	4694      	mov	ip, r2
 8011534:	4463      	add	r3, ip
 8011536:	425a      	negs	r2, r3
 8011538:	4153      	adcs	r3, r2
 801153a:	425b      	negs	r3, r3
 801153c:	4aac      	ldr	r2, [pc, #688]	; (80117f0 <HAL_DMA_IRQHandler+0x604>)
 801153e:	4013      	ands	r3, r2
 8011540:	2280      	movs	r2, #128	; 0x80
 8011542:	0312      	lsls	r2, r2, #12
 8011544:	4694      	mov	ip, r2
 8011546:	4463      	add	r3, ip
 8011548:	e000      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 801154a:	2308      	movs	r3, #8
 801154c:	4aa9      	ldr	r2, [pc, #676]	; (80117f4 <HAL_DMA_IRQHandler+0x608>)
 801154e:	6053      	str	r3, [r2, #4]
 8011550:	e785      	b.n	801145e <HAL_DMA_IRQHandler+0x272>
 8011552:	2380      	movs	r3, #128	; 0x80
 8011554:	e7fa      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 8011556:	2380      	movs	r3, #128	; 0x80
 8011558:	011b      	lsls	r3, r3, #4
 801155a:	e7f7      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 801155c:	2380      	movs	r3, #128	; 0x80
 801155e:	021b      	lsls	r3, r3, #8
 8011560:	e7f4      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 8011562:	2380      	movs	r3, #128	; 0x80
 8011564:	031b      	lsls	r3, r3, #12
 8011566:	e7f1      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 8011568:	2380      	movs	r3, #128	; 0x80
 801156a:	041b      	lsls	r3, r3, #16
 801156c:	e7ee      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 801156e:	2380      	movs	r3, #128	; 0x80
 8011570:	051b      	lsls	r3, r3, #20
 8011572:	e7eb      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 8011574:	2308      	movs	r3, #8
 8011576:	e7e9      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 8011578:	2380      	movs	r3, #128	; 0x80
 801157a:	e7e7      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
 801157c:	2380      	movs	r3, #128	; 0x80
 801157e:	011b      	lsls	r3, r3, #4
 8011580:	e7e4      	b.n	801154c <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011582:	2204      	movs	r2, #4
 8011584:	420a      	tst	r2, r1
 8011586:	d11d      	bne.n	80115c4 <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011588:	6821      	ldr	r1, [r4, #0]
 801158a:	e085      	b.n	8011698 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801158c:	2240      	movs	r2, #64	; 0x40
 801158e:	e7f9      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 8011590:	2280      	movs	r2, #128	; 0x80
 8011592:	00d2      	lsls	r2, r2, #3
 8011594:	e7f6      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 8011596:	2280      	movs	r2, #128	; 0x80
 8011598:	01d2      	lsls	r2, r2, #7
 801159a:	e7f3      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 801159c:	2280      	movs	r2, #128	; 0x80
 801159e:	02d2      	lsls	r2, r2, #11
 80115a0:	e7f0      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 80115a2:	2280      	movs	r2, #128	; 0x80
 80115a4:	03d2      	lsls	r2, r2, #15
 80115a6:	e7ed      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 80115a8:	2280      	movs	r2, #128	; 0x80
 80115aa:	04d2      	lsls	r2, r2, #19
 80115ac:	e7ea      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 80115ae:	2204      	movs	r2, #4
 80115b0:	e7e8      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 80115b2:	2240      	movs	r2, #64	; 0x40
 80115b4:	e7e6      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 80115b6:	2280      	movs	r2, #128	; 0x80
 80115b8:	00d2      	lsls	r2, r2, #3
 80115ba:	e7e3      	b.n	8011584 <HAL_DMA_IRQHandler+0x398>
 80115bc:	2204      	movs	r2, #4
 80115be:	420a      	tst	r2, r1
 80115c0:	d100      	bne.n	80115c4 <HAL_DMA_IRQHandler+0x3d8>
 80115c2:	e208      	b.n	80119d6 <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	0752      	lsls	r2, r2, #29
 80115c8:	d561      	bpl.n	801168e <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	0692      	lsls	r2, r2, #26
 80115ce:	d403      	bmi.n	80115d8 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	2104      	movs	r1, #4
 80115d4:	438a      	bics	r2, r1
 80115d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80115d8:	6823      	ldr	r3, [r4, #0]
 80115da:	4a80      	ldr	r2, [pc, #512]	; (80117dc <HAL_DMA_IRQHandler+0x5f0>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d800      	bhi.n	80115e2 <HAL_DMA_IRQHandler+0x3f6>
 80115e0:	e0a8      	b.n	8011734 <HAL_DMA_IRQHandler+0x548>
 80115e2:	4a78      	ldr	r2, [pc, #480]	; (80117c4 <HAL_DMA_IRQHandler+0x5d8>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d047      	beq.n	8011678 <HAL_DMA_IRQHandler+0x48c>
 80115e8:	4a77      	ldr	r2, [pc, #476]	; (80117c8 <HAL_DMA_IRQHandler+0x5dc>)
 80115ea:	4293      	cmp	r3, r2
 80115ec:	d100      	bne.n	80115f0 <HAL_DMA_IRQHandler+0x404>
 80115ee:	e089      	b.n	8011704 <HAL_DMA_IRQHandler+0x518>
 80115f0:	4a76      	ldr	r2, [pc, #472]	; (80117cc <HAL_DMA_IRQHandler+0x5e0>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d100      	bne.n	80115f8 <HAL_DMA_IRQHandler+0x40c>
 80115f6:	e087      	b.n	8011708 <HAL_DMA_IRQHandler+0x51c>
 80115f8:	4a75      	ldr	r2, [pc, #468]	; (80117d0 <HAL_DMA_IRQHandler+0x5e4>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d100      	bne.n	8011600 <HAL_DMA_IRQHandler+0x414>
 80115fe:	e086      	b.n	801170e <HAL_DMA_IRQHandler+0x522>
 8011600:	4a74      	ldr	r2, [pc, #464]	; (80117d4 <HAL_DMA_IRQHandler+0x5e8>)
 8011602:	4293      	cmp	r3, r2
 8011604:	d100      	bne.n	8011608 <HAL_DMA_IRQHandler+0x41c>
 8011606:	e085      	b.n	8011714 <HAL_DMA_IRQHandler+0x528>
 8011608:	4a73      	ldr	r2, [pc, #460]	; (80117d8 <HAL_DMA_IRQHandler+0x5ec>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d100      	bne.n	8011610 <HAL_DMA_IRQHandler+0x424>
 801160e:	e084      	b.n	801171a <HAL_DMA_IRQHandler+0x52e>
 8011610:	4a72      	ldr	r2, [pc, #456]	; (80117dc <HAL_DMA_IRQHandler+0x5f0>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d100      	bne.n	8011618 <HAL_DMA_IRQHandler+0x42c>
 8011616:	e083      	b.n	8011720 <HAL_DMA_IRQHandler+0x534>
 8011618:	4a71      	ldr	r2, [pc, #452]	; (80117e0 <HAL_DMA_IRQHandler+0x5f4>)
 801161a:	4293      	cmp	r3, r2
 801161c:	d100      	bne.n	8011620 <HAL_DMA_IRQHandler+0x434>
 801161e:	e082      	b.n	8011726 <HAL_DMA_IRQHandler+0x53a>
 8011620:	4a70      	ldr	r2, [pc, #448]	; (80117e4 <HAL_DMA_IRQHandler+0x5f8>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d100      	bne.n	8011628 <HAL_DMA_IRQHandler+0x43c>
 8011626:	e080      	b.n	801172a <HAL_DMA_IRQHandler+0x53e>
 8011628:	4a6f      	ldr	r2, [pc, #444]	; (80117e8 <HAL_DMA_IRQHandler+0x5fc>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d07f      	beq.n	801172e <HAL_DMA_IRQHandler+0x542>
 801162e:	4a6f      	ldr	r2, [pc, #444]	; (80117ec <HAL_DMA_IRQHandler+0x600>)
 8011630:	4694      	mov	ip, r2
 8011632:	4463      	add	r3, ip
 8011634:	425a      	negs	r2, r3
 8011636:	4153      	adcs	r3, r2
 8011638:	425b      	negs	r3, r3
 801163a:	4a6f      	ldr	r2, [pc, #444]	; (80117f8 <HAL_DMA_IRQHandler+0x60c>)
 801163c:	4013      	ands	r3, r2
 801163e:	2280      	movs	r2, #128	; 0x80
 8011640:	02d2      	lsls	r2, r2, #11
 8011642:	4694      	mov	ip, r2
 8011644:	4463      	add	r3, ip
 8011646:	e018      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011648:	2240      	movs	r2, #64	; 0x40
 801164a:	e7b8      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 801164c:	2280      	movs	r2, #128	; 0x80
 801164e:	00d2      	lsls	r2, r2, #3
 8011650:	e7b5      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 8011652:	2280      	movs	r2, #128	; 0x80
 8011654:	01d2      	lsls	r2, r2, #7
 8011656:	e7b2      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 8011658:	2280      	movs	r2, #128	; 0x80
 801165a:	02d2      	lsls	r2, r2, #11
 801165c:	e7af      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 801165e:	2280      	movs	r2, #128	; 0x80
 8011660:	03d2      	lsls	r2, r2, #15
 8011662:	e7ac      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 8011664:	2280      	movs	r2, #128	; 0x80
 8011666:	04d2      	lsls	r2, r2, #19
 8011668:	e7a9      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 801166a:	2204      	movs	r2, #4
 801166c:	e7a7      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 801166e:	2240      	movs	r2, #64	; 0x40
 8011670:	e7a5      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
 8011672:	2280      	movs	r2, #128	; 0x80
 8011674:	00d2      	lsls	r2, r2, #3
 8011676:	e7a2      	b.n	80115be <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011678:	2304      	movs	r3, #4
 801167a:	4a60      	ldr	r2, [pc, #384]	; (80117fc <HAL_DMA_IRQHandler+0x610>)
 801167c:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 801167e:	2321      	movs	r3, #33	; 0x21
 8011680:	2211      	movs	r2, #17
 8011682:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 801168a:	0020      	movs	r0, r4
 801168c:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801168e:	6821      	ldr	r1, [r4, #0]
 8011690:	4b52      	ldr	r3, [pc, #328]	; (80117dc <HAL_DMA_IRQHandler+0x5f0>)
 8011692:	4299      	cmp	r1, r3
 8011694:	d800      	bhi.n	8011698 <HAL_DMA_IRQHandler+0x4ac>
 8011696:	e19f      	b.n	80119d8 <HAL_DMA_IRQHandler+0x7ec>
 8011698:	4b58      	ldr	r3, [pc, #352]	; (80117fc <HAL_DMA_IRQHandler+0x610>)
 801169a:	6818      	ldr	r0, [r3, #0]
 801169c:	4a49      	ldr	r2, [pc, #292]	; (80117c4 <HAL_DMA_IRQHandler+0x5d8>)
 801169e:	4291      	cmp	r1, r2
 80116a0:	d100      	bne.n	80116a4 <HAL_DMA_IRQHandler+0x4b8>
 80116a2:	e0af      	b.n	8011804 <HAL_DMA_IRQHandler+0x618>
 80116a4:	4a48      	ldr	r2, [pc, #288]	; (80117c8 <HAL_DMA_IRQHandler+0x5dc>)
 80116a6:	4291      	cmp	r1, r2
 80116a8:	d100      	bne.n	80116ac <HAL_DMA_IRQHandler+0x4c0>
 80116aa:	e0ee      	b.n	801188a <HAL_DMA_IRQHandler+0x69e>
 80116ac:	4a47      	ldr	r2, [pc, #284]	; (80117cc <HAL_DMA_IRQHandler+0x5e0>)
 80116ae:	4291      	cmp	r1, r2
 80116b0:	d100      	bne.n	80116b4 <HAL_DMA_IRQHandler+0x4c8>
 80116b2:	e0ec      	b.n	801188e <HAL_DMA_IRQHandler+0x6a2>
 80116b4:	4a46      	ldr	r2, [pc, #280]	; (80117d0 <HAL_DMA_IRQHandler+0x5e4>)
 80116b6:	4291      	cmp	r1, r2
 80116b8:	d100      	bne.n	80116bc <HAL_DMA_IRQHandler+0x4d0>
 80116ba:	e0eb      	b.n	8011894 <HAL_DMA_IRQHandler+0x6a8>
 80116bc:	4b45      	ldr	r3, [pc, #276]	; (80117d4 <HAL_DMA_IRQHandler+0x5e8>)
 80116be:	4299      	cmp	r1, r3
 80116c0:	d100      	bne.n	80116c4 <HAL_DMA_IRQHandler+0x4d8>
 80116c2:	e0ea      	b.n	801189a <HAL_DMA_IRQHandler+0x6ae>
 80116c4:	4b44      	ldr	r3, [pc, #272]	; (80117d8 <HAL_DMA_IRQHandler+0x5ec>)
 80116c6:	4299      	cmp	r1, r3
 80116c8:	d100      	bne.n	80116cc <HAL_DMA_IRQHandler+0x4e0>
 80116ca:	e0e9      	b.n	80118a0 <HAL_DMA_IRQHandler+0x6b4>
 80116cc:	4b43      	ldr	r3, [pc, #268]	; (80117dc <HAL_DMA_IRQHandler+0x5f0>)
 80116ce:	4299      	cmp	r1, r3
 80116d0:	d100      	bne.n	80116d4 <HAL_DMA_IRQHandler+0x4e8>
 80116d2:	e0e8      	b.n	80118a6 <HAL_DMA_IRQHandler+0x6ba>
 80116d4:	4b42      	ldr	r3, [pc, #264]	; (80117e0 <HAL_DMA_IRQHandler+0x5f4>)
 80116d6:	4299      	cmp	r1, r3
 80116d8:	d100      	bne.n	80116dc <HAL_DMA_IRQHandler+0x4f0>
 80116da:	e0e7      	b.n	80118ac <HAL_DMA_IRQHandler+0x6c0>
 80116dc:	4b41      	ldr	r3, [pc, #260]	; (80117e4 <HAL_DMA_IRQHandler+0x5f8>)
 80116de:	4299      	cmp	r1, r3
 80116e0:	d100      	bne.n	80116e4 <HAL_DMA_IRQHandler+0x4f8>
 80116e2:	e0e5      	b.n	80118b0 <HAL_DMA_IRQHandler+0x6c4>
 80116e4:	4b40      	ldr	r3, [pc, #256]	; (80117e8 <HAL_DMA_IRQHandler+0x5fc>)
 80116e6:	4299      	cmp	r1, r3
 80116e8:	d100      	bne.n	80116ec <HAL_DMA_IRQHandler+0x500>
 80116ea:	e0e3      	b.n	80118b4 <HAL_DMA_IRQHandler+0x6c8>
 80116ec:	4b3f      	ldr	r3, [pc, #252]	; (80117ec <HAL_DMA_IRQHandler+0x600>)
 80116ee:	18ca      	adds	r2, r1, r3
 80116f0:	4253      	negs	r3, r2
 80116f2:	415a      	adcs	r2, r3
 80116f4:	4252      	negs	r2, r2
 80116f6:	4b42      	ldr	r3, [pc, #264]	; (8011800 <HAL_DMA_IRQHandler+0x614>)
 80116f8:	4013      	ands	r3, r2
 80116fa:	2280      	movs	r2, #128	; 0x80
 80116fc:	0292      	lsls	r2, r2, #10
 80116fe:	4694      	mov	ip, r2
 8011700:	4463      	add	r3, ip
 8011702:	e080      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011704:	2340      	movs	r3, #64	; 0x40
 8011706:	e7b8      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 8011708:	2380      	movs	r3, #128	; 0x80
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	e7b5      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 801170e:	2380      	movs	r3, #128	; 0x80
 8011710:	01db      	lsls	r3, r3, #7
 8011712:	e7b2      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 8011714:	2380      	movs	r3, #128	; 0x80
 8011716:	02db      	lsls	r3, r3, #11
 8011718:	e7af      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 801171a:	2380      	movs	r3, #128	; 0x80
 801171c:	03db      	lsls	r3, r3, #15
 801171e:	e7ac      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 8011720:	2380      	movs	r3, #128	; 0x80
 8011722:	04db      	lsls	r3, r3, #19
 8011724:	e7a9      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 8011726:	2304      	movs	r3, #4
 8011728:	e7a7      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 801172a:	2340      	movs	r3, #64	; 0x40
 801172c:	e7a5      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 801172e:	2380      	movs	r3, #128	; 0x80
 8011730:	00db      	lsls	r3, r3, #3
 8011732:	e7a2      	b.n	801167a <HAL_DMA_IRQHandler+0x48e>
 8011734:	4a23      	ldr	r2, [pc, #140]	; (80117c4 <HAL_DMA_IRQHandler+0x5d8>)
 8011736:	4293      	cmp	r3, r2
 8011738:	d027      	beq.n	801178a <HAL_DMA_IRQHandler+0x59e>
 801173a:	4a23      	ldr	r2, [pc, #140]	; (80117c8 <HAL_DMA_IRQHandler+0x5dc>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d028      	beq.n	8011792 <HAL_DMA_IRQHandler+0x5a6>
 8011740:	4a22      	ldr	r2, [pc, #136]	; (80117cc <HAL_DMA_IRQHandler+0x5e0>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d027      	beq.n	8011796 <HAL_DMA_IRQHandler+0x5aa>
 8011746:	4a22      	ldr	r2, [pc, #136]	; (80117d0 <HAL_DMA_IRQHandler+0x5e4>)
 8011748:	4293      	cmp	r3, r2
 801174a:	d027      	beq.n	801179c <HAL_DMA_IRQHandler+0x5b0>
 801174c:	4a21      	ldr	r2, [pc, #132]	; (80117d4 <HAL_DMA_IRQHandler+0x5e8>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d027      	beq.n	80117a2 <HAL_DMA_IRQHandler+0x5b6>
 8011752:	4a21      	ldr	r2, [pc, #132]	; (80117d8 <HAL_DMA_IRQHandler+0x5ec>)
 8011754:	4293      	cmp	r3, r2
 8011756:	d027      	beq.n	80117a8 <HAL_DMA_IRQHandler+0x5bc>
 8011758:	4a20      	ldr	r2, [pc, #128]	; (80117dc <HAL_DMA_IRQHandler+0x5f0>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d027      	beq.n	80117ae <HAL_DMA_IRQHandler+0x5c2>
 801175e:	4a20      	ldr	r2, [pc, #128]	; (80117e0 <HAL_DMA_IRQHandler+0x5f4>)
 8011760:	4293      	cmp	r3, r2
 8011762:	d027      	beq.n	80117b4 <HAL_DMA_IRQHandler+0x5c8>
 8011764:	4a1f      	ldr	r2, [pc, #124]	; (80117e4 <HAL_DMA_IRQHandler+0x5f8>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d026      	beq.n	80117b8 <HAL_DMA_IRQHandler+0x5cc>
 801176a:	4a1f      	ldr	r2, [pc, #124]	; (80117e8 <HAL_DMA_IRQHandler+0x5fc>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d025      	beq.n	80117bc <HAL_DMA_IRQHandler+0x5d0>
 8011770:	4a1e      	ldr	r2, [pc, #120]	; (80117ec <HAL_DMA_IRQHandler+0x600>)
 8011772:	4694      	mov	ip, r2
 8011774:	4463      	add	r3, ip
 8011776:	425a      	negs	r2, r3
 8011778:	4153      	adcs	r3, r2
 801177a:	425b      	negs	r3, r3
 801177c:	4a1e      	ldr	r2, [pc, #120]	; (80117f8 <HAL_DMA_IRQHandler+0x60c>)
 801177e:	4013      	ands	r3, r2
 8011780:	2280      	movs	r2, #128	; 0x80
 8011782:	02d2      	lsls	r2, r2, #11
 8011784:	4694      	mov	ip, r2
 8011786:	4463      	add	r3, ip
 8011788:	e000      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 801178a:	2304      	movs	r3, #4
 801178c:	4a19      	ldr	r2, [pc, #100]	; (80117f4 <HAL_DMA_IRQHandler+0x608>)
 801178e:	6053      	str	r3, [r2, #4]
 8011790:	e775      	b.n	801167e <HAL_DMA_IRQHandler+0x492>
 8011792:	2340      	movs	r3, #64	; 0x40
 8011794:	e7fa      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 8011796:	2380      	movs	r3, #128	; 0x80
 8011798:	00db      	lsls	r3, r3, #3
 801179a:	e7f7      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 801179c:	2380      	movs	r3, #128	; 0x80
 801179e:	01db      	lsls	r3, r3, #7
 80117a0:	e7f4      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117a2:	2380      	movs	r3, #128	; 0x80
 80117a4:	02db      	lsls	r3, r3, #11
 80117a6:	e7f1      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117a8:	2380      	movs	r3, #128	; 0x80
 80117aa:	03db      	lsls	r3, r3, #15
 80117ac:	e7ee      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117ae:	2380      	movs	r3, #128	; 0x80
 80117b0:	04db      	lsls	r3, r3, #19
 80117b2:	e7eb      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117b4:	2304      	movs	r3, #4
 80117b6:	e7e9      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117b8:	2340      	movs	r3, #64	; 0x40
 80117ba:	e7e7      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117bc:	2380      	movs	r3, #128	; 0x80
 80117be:	00db      	lsls	r3, r3, #3
 80117c0:	e7e4      	b.n	801178c <HAL_DMA_IRQHandler+0x5a0>
 80117c2:	46c0      	nop			; (mov r8, r8)
 80117c4:	40020008 	.word	0x40020008
 80117c8:	4002001c 	.word	0x4002001c
 80117cc:	40020030 	.word	0x40020030
 80117d0:	40020044 	.word	0x40020044
 80117d4:	40020058 	.word	0x40020058
 80117d8:	4002006c 	.word	0x4002006c
 80117dc:	40020080 	.word	0x40020080
 80117e0:	40020408 	.word	0x40020408
 80117e4:	4002041c 	.word	0x4002041c
 80117e8:	40020430 	.word	0x40020430
 80117ec:	bffdfbbc 	.word	0xbffdfbbc
 80117f0:	fff88000 	.word	0xfff88000
 80117f4:	40020000 	.word	0x40020000
 80117f8:	fffc4000 	.word	0xfffc4000
 80117fc:	40020400 	.word	0x40020400
 8011800:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011804:	2302      	movs	r3, #2
 8011806:	4003      	ands	r3, r0
 8011808:	1e5a      	subs	r2, r3, #1
 801180a:	4193      	sbcs	r3, r2
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d100      	bne.n	8011814 <HAL_DMA_IRQHandler+0x628>
 8011812:	e080      	b.n	8011916 <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011814:	680b      	ldr	r3, [r1, #0]
 8011816:	079b      	lsls	r3, r3, #30
 8011818:	d57d      	bpl.n	8011916 <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801181a:	680b      	ldr	r3, [r1, #0]
 801181c:	069b      	lsls	r3, r3, #26
 801181e:	d403      	bmi.n	8011828 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011820:	680b      	ldr	r3, [r1, #0]
 8011822:	2202      	movs	r2, #2
 8011824:	4393      	bics	r3, r2
 8011826:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011828:	6823      	ldr	r3, [r4, #0]
 801182a:	4a8d      	ldr	r2, [pc, #564]	; (8011a60 <HAL_DMA_IRQHandler+0x874>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d800      	bhi.n	8011832 <HAL_DMA_IRQHandler+0x646>
 8011830:	e08a      	b.n	8011948 <HAL_DMA_IRQHandler+0x75c>
 8011832:	4a8c      	ldr	r2, [pc, #560]	; (8011a64 <HAL_DMA_IRQHandler+0x878>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d05e      	beq.n	80118f6 <HAL_DMA_IRQHandler+0x70a>
 8011838:	4a8b      	ldr	r2, [pc, #556]	; (8011a68 <HAL_DMA_IRQHandler+0x87c>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d100      	bne.n	8011840 <HAL_DMA_IRQHandler+0x654>
 801183e:	e06b      	b.n	8011918 <HAL_DMA_IRQHandler+0x72c>
 8011840:	4a8a      	ldr	r2, [pc, #552]	; (8011a6c <HAL_DMA_IRQHandler+0x880>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d06a      	beq.n	801191c <HAL_DMA_IRQHandler+0x730>
 8011846:	4a8a      	ldr	r2, [pc, #552]	; (8011a70 <HAL_DMA_IRQHandler+0x884>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d06a      	beq.n	8011922 <HAL_DMA_IRQHandler+0x736>
 801184c:	4a89      	ldr	r2, [pc, #548]	; (8011a74 <HAL_DMA_IRQHandler+0x888>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d06a      	beq.n	8011928 <HAL_DMA_IRQHandler+0x73c>
 8011852:	4a89      	ldr	r2, [pc, #548]	; (8011a78 <HAL_DMA_IRQHandler+0x88c>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d06a      	beq.n	801192e <HAL_DMA_IRQHandler+0x742>
 8011858:	4a81      	ldr	r2, [pc, #516]	; (8011a60 <HAL_DMA_IRQHandler+0x874>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d06a      	beq.n	8011934 <HAL_DMA_IRQHandler+0x748>
 801185e:	4a87      	ldr	r2, [pc, #540]	; (8011a7c <HAL_DMA_IRQHandler+0x890>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d06a      	beq.n	801193a <HAL_DMA_IRQHandler+0x74e>
 8011864:	4a86      	ldr	r2, [pc, #536]	; (8011a80 <HAL_DMA_IRQHandler+0x894>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d069      	beq.n	801193e <HAL_DMA_IRQHandler+0x752>
 801186a:	4a86      	ldr	r2, [pc, #536]	; (8011a84 <HAL_DMA_IRQHandler+0x898>)
 801186c:	4293      	cmp	r3, r2
 801186e:	d068      	beq.n	8011942 <HAL_DMA_IRQHandler+0x756>
 8011870:	4a85      	ldr	r2, [pc, #532]	; (8011a88 <HAL_DMA_IRQHandler+0x89c>)
 8011872:	4694      	mov	ip, r2
 8011874:	4463      	add	r3, ip
 8011876:	425a      	negs	r2, r3
 8011878:	4153      	adcs	r3, r2
 801187a:	425b      	negs	r3, r3
 801187c:	4a83      	ldr	r2, [pc, #524]	; (8011a8c <HAL_DMA_IRQHandler+0x8a0>)
 801187e:	4013      	ands	r3, r2
 8011880:	2280      	movs	r2, #128	; 0x80
 8011882:	0292      	lsls	r2, r2, #10
 8011884:	4694      	mov	ip, r2
 8011886:	4463      	add	r3, ip
 8011888:	e036      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801188a:	2320      	movs	r3, #32
 801188c:	e7bb      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 801188e:	2380      	movs	r3, #128	; 0x80
 8011890:	009b      	lsls	r3, r3, #2
 8011892:	e7b8      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 8011894:	2380      	movs	r3, #128	; 0x80
 8011896:	019b      	lsls	r3, r3, #6
 8011898:	e7b5      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 801189a:	2380      	movs	r3, #128	; 0x80
 801189c:	029b      	lsls	r3, r3, #10
 801189e:	e7b2      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 80118a0:	2380      	movs	r3, #128	; 0x80
 80118a2:	039b      	lsls	r3, r3, #14
 80118a4:	e7af      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 80118a6:	2380      	movs	r3, #128	; 0x80
 80118a8:	049b      	lsls	r3, r3, #18
 80118aa:	e7ac      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 80118ac:	2302      	movs	r3, #2
 80118ae:	e7aa      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 80118b0:	2320      	movs	r3, #32
 80118b2:	e7a8      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 80118b4:	2380      	movs	r3, #128	; 0x80
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	e7a5      	b.n	8011806 <HAL_DMA_IRQHandler+0x61a>
 80118ba:	2302      	movs	r3, #2
 80118bc:	4003      	ands	r3, r0
 80118be:	1e5a      	subs	r2, r3, #1
 80118c0:	4193      	sbcs	r3, r2
 80118c2:	b2db      	uxtb	r3, r3
 80118c4:	e7a3      	b.n	801180e <HAL_DMA_IRQHandler+0x622>
 80118c6:	2320      	movs	r3, #32
 80118c8:	e7f8      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118ca:	2380      	movs	r3, #128	; 0x80
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	e7f5      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118d0:	2380      	movs	r3, #128	; 0x80
 80118d2:	019b      	lsls	r3, r3, #6
 80118d4:	e7f2      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118d6:	2380      	movs	r3, #128	; 0x80
 80118d8:	029b      	lsls	r3, r3, #10
 80118da:	e7ef      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118dc:	2380      	movs	r3, #128	; 0x80
 80118de:	039b      	lsls	r3, r3, #14
 80118e0:	e7ec      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118e2:	2380      	movs	r3, #128	; 0x80
 80118e4:	049b      	lsls	r3, r3, #18
 80118e6:	e7e9      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118e8:	2302      	movs	r3, #2
 80118ea:	e7e7      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118ec:	2320      	movs	r3, #32
 80118ee:	e7e5      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
 80118f0:	2380      	movs	r3, #128	; 0x80
 80118f2:	009b      	lsls	r3, r3, #2
 80118f4:	e7e2      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80118f6:	2302      	movs	r3, #2
 80118f8:	4a65      	ldr	r2, [pc, #404]	; (8011a90 <HAL_DMA_IRQHandler+0x8a4>)
 80118fa:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80118fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80118fe:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011900:	2321      	movs	r3, #33	; 0x21
 8011902:	2201      	movs	r2, #1
 8011904:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011906:	3b01      	subs	r3, #1
 8011908:	2200      	movs	r2, #0
 801190a:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801190c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801190e:	2b00      	cmp	r3, #0
 8011910:	d001      	beq.n	8011916 <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 8011912:	0020      	movs	r0, r4
 8011914:	4798      	blx	r3
}  
 8011916:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011918:	2320      	movs	r3, #32
 801191a:	e7ed      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 801191c:	2380      	movs	r3, #128	; 0x80
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	e7ea      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 8011922:	2380      	movs	r3, #128	; 0x80
 8011924:	019b      	lsls	r3, r3, #6
 8011926:	e7e7      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 8011928:	2380      	movs	r3, #128	; 0x80
 801192a:	029b      	lsls	r3, r3, #10
 801192c:	e7e4      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 801192e:	2380      	movs	r3, #128	; 0x80
 8011930:	039b      	lsls	r3, r3, #14
 8011932:	e7e1      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 8011934:	2380      	movs	r3, #128	; 0x80
 8011936:	049b      	lsls	r3, r3, #18
 8011938:	e7de      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 801193a:	2302      	movs	r3, #2
 801193c:	e7dc      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 801193e:	2320      	movs	r3, #32
 8011940:	e7da      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 8011942:	2380      	movs	r3, #128	; 0x80
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	e7d7      	b.n	80118f8 <HAL_DMA_IRQHandler+0x70c>
 8011948:	4a46      	ldr	r2, [pc, #280]	; (8011a64 <HAL_DMA_IRQHandler+0x878>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d027      	beq.n	801199e <HAL_DMA_IRQHandler+0x7b2>
 801194e:	4a46      	ldr	r2, [pc, #280]	; (8011a68 <HAL_DMA_IRQHandler+0x87c>)
 8011950:	4293      	cmp	r3, r2
 8011952:	d028      	beq.n	80119a6 <HAL_DMA_IRQHandler+0x7ba>
 8011954:	4a45      	ldr	r2, [pc, #276]	; (8011a6c <HAL_DMA_IRQHandler+0x880>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d027      	beq.n	80119aa <HAL_DMA_IRQHandler+0x7be>
 801195a:	4a45      	ldr	r2, [pc, #276]	; (8011a70 <HAL_DMA_IRQHandler+0x884>)
 801195c:	4293      	cmp	r3, r2
 801195e:	d027      	beq.n	80119b0 <HAL_DMA_IRQHandler+0x7c4>
 8011960:	4a44      	ldr	r2, [pc, #272]	; (8011a74 <HAL_DMA_IRQHandler+0x888>)
 8011962:	4293      	cmp	r3, r2
 8011964:	d027      	beq.n	80119b6 <HAL_DMA_IRQHandler+0x7ca>
 8011966:	4a44      	ldr	r2, [pc, #272]	; (8011a78 <HAL_DMA_IRQHandler+0x88c>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d027      	beq.n	80119bc <HAL_DMA_IRQHandler+0x7d0>
 801196c:	4a3c      	ldr	r2, [pc, #240]	; (8011a60 <HAL_DMA_IRQHandler+0x874>)
 801196e:	4293      	cmp	r3, r2
 8011970:	d027      	beq.n	80119c2 <HAL_DMA_IRQHandler+0x7d6>
 8011972:	4a42      	ldr	r2, [pc, #264]	; (8011a7c <HAL_DMA_IRQHandler+0x890>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d027      	beq.n	80119c8 <HAL_DMA_IRQHandler+0x7dc>
 8011978:	4a41      	ldr	r2, [pc, #260]	; (8011a80 <HAL_DMA_IRQHandler+0x894>)
 801197a:	4293      	cmp	r3, r2
 801197c:	d026      	beq.n	80119cc <HAL_DMA_IRQHandler+0x7e0>
 801197e:	4a41      	ldr	r2, [pc, #260]	; (8011a84 <HAL_DMA_IRQHandler+0x898>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d025      	beq.n	80119d0 <HAL_DMA_IRQHandler+0x7e4>
 8011984:	4a40      	ldr	r2, [pc, #256]	; (8011a88 <HAL_DMA_IRQHandler+0x89c>)
 8011986:	4694      	mov	ip, r2
 8011988:	4463      	add	r3, ip
 801198a:	425a      	negs	r2, r3
 801198c:	4153      	adcs	r3, r2
 801198e:	425b      	negs	r3, r3
 8011990:	4a3e      	ldr	r2, [pc, #248]	; (8011a8c <HAL_DMA_IRQHandler+0x8a0>)
 8011992:	4013      	ands	r3, r2
 8011994:	2280      	movs	r2, #128	; 0x80
 8011996:	0292      	lsls	r2, r2, #10
 8011998:	4694      	mov	ip, r2
 801199a:	4463      	add	r3, ip
 801199c:	e000      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 801199e:	2302      	movs	r3, #2
 80119a0:	4a3c      	ldr	r2, [pc, #240]	; (8011a94 <HAL_DMA_IRQHandler+0x8a8>)
 80119a2:	6053      	str	r3, [r2, #4]
 80119a4:	e7aa      	b.n	80118fc <HAL_DMA_IRQHandler+0x710>
 80119a6:	2320      	movs	r3, #32
 80119a8:	e7fa      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119aa:	2380      	movs	r3, #128	; 0x80
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	e7f7      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119b0:	2380      	movs	r3, #128	; 0x80
 80119b2:	019b      	lsls	r3, r3, #6
 80119b4:	e7f4      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119b6:	2380      	movs	r3, #128	; 0x80
 80119b8:	029b      	lsls	r3, r3, #10
 80119ba:	e7f1      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119bc:	2380      	movs	r3, #128	; 0x80
 80119be:	039b      	lsls	r3, r3, #14
 80119c0:	e7ee      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119c2:	2380      	movs	r3, #128	; 0x80
 80119c4:	049b      	lsls	r3, r3, #18
 80119c6:	e7eb      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119c8:	2302      	movs	r3, #2
 80119ca:	e7e9      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119cc:	2320      	movs	r3, #32
 80119ce:	e7e7      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
 80119d0:	2380      	movs	r3, #128	; 0x80
 80119d2:	009b      	lsls	r3, r3, #2
 80119d4:	e7e4      	b.n	80119a0 <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80119d6:	6821      	ldr	r1, [r4, #0]
 80119d8:	4b2e      	ldr	r3, [pc, #184]	; (8011a94 <HAL_DMA_IRQHandler+0x8a8>)
 80119da:	6818      	ldr	r0, [r3, #0]
 80119dc:	4a21      	ldr	r2, [pc, #132]	; (8011a64 <HAL_DMA_IRQHandler+0x878>)
 80119de:	4291      	cmp	r1, r2
 80119e0:	d100      	bne.n	80119e4 <HAL_DMA_IRQHandler+0x7f8>
 80119e2:	e76a      	b.n	80118ba <HAL_DMA_IRQHandler+0x6ce>
 80119e4:	4a20      	ldr	r2, [pc, #128]	; (8011a68 <HAL_DMA_IRQHandler+0x87c>)
 80119e6:	4291      	cmp	r1, r2
 80119e8:	d100      	bne.n	80119ec <HAL_DMA_IRQHandler+0x800>
 80119ea:	e76c      	b.n	80118c6 <HAL_DMA_IRQHandler+0x6da>
 80119ec:	4a1f      	ldr	r2, [pc, #124]	; (8011a6c <HAL_DMA_IRQHandler+0x880>)
 80119ee:	4291      	cmp	r1, r2
 80119f0:	d100      	bne.n	80119f4 <HAL_DMA_IRQHandler+0x808>
 80119f2:	e76a      	b.n	80118ca <HAL_DMA_IRQHandler+0x6de>
 80119f4:	4a1e      	ldr	r2, [pc, #120]	; (8011a70 <HAL_DMA_IRQHandler+0x884>)
 80119f6:	4291      	cmp	r1, r2
 80119f8:	d100      	bne.n	80119fc <HAL_DMA_IRQHandler+0x810>
 80119fa:	e769      	b.n	80118d0 <HAL_DMA_IRQHandler+0x6e4>
 80119fc:	4b1d      	ldr	r3, [pc, #116]	; (8011a74 <HAL_DMA_IRQHandler+0x888>)
 80119fe:	4299      	cmp	r1, r3
 8011a00:	d100      	bne.n	8011a04 <HAL_DMA_IRQHandler+0x818>
 8011a02:	e768      	b.n	80118d6 <HAL_DMA_IRQHandler+0x6ea>
 8011a04:	4b1c      	ldr	r3, [pc, #112]	; (8011a78 <HAL_DMA_IRQHandler+0x88c>)
 8011a06:	4299      	cmp	r1, r3
 8011a08:	d100      	bne.n	8011a0c <HAL_DMA_IRQHandler+0x820>
 8011a0a:	e767      	b.n	80118dc <HAL_DMA_IRQHandler+0x6f0>
 8011a0c:	4b14      	ldr	r3, [pc, #80]	; (8011a60 <HAL_DMA_IRQHandler+0x874>)
 8011a0e:	4299      	cmp	r1, r3
 8011a10:	d100      	bne.n	8011a14 <HAL_DMA_IRQHandler+0x828>
 8011a12:	e766      	b.n	80118e2 <HAL_DMA_IRQHandler+0x6f6>
 8011a14:	4b19      	ldr	r3, [pc, #100]	; (8011a7c <HAL_DMA_IRQHandler+0x890>)
 8011a16:	4299      	cmp	r1, r3
 8011a18:	d100      	bne.n	8011a1c <HAL_DMA_IRQHandler+0x830>
 8011a1a:	e765      	b.n	80118e8 <HAL_DMA_IRQHandler+0x6fc>
 8011a1c:	4b18      	ldr	r3, [pc, #96]	; (8011a80 <HAL_DMA_IRQHandler+0x894>)
 8011a1e:	4299      	cmp	r1, r3
 8011a20:	d100      	bne.n	8011a24 <HAL_DMA_IRQHandler+0x838>
 8011a22:	e763      	b.n	80118ec <HAL_DMA_IRQHandler+0x700>
 8011a24:	4b17      	ldr	r3, [pc, #92]	; (8011a84 <HAL_DMA_IRQHandler+0x898>)
 8011a26:	4299      	cmp	r1, r3
 8011a28:	d100      	bne.n	8011a2c <HAL_DMA_IRQHandler+0x840>
 8011a2a:	e761      	b.n	80118f0 <HAL_DMA_IRQHandler+0x704>
 8011a2c:	4b16      	ldr	r3, [pc, #88]	; (8011a88 <HAL_DMA_IRQHandler+0x89c>)
 8011a2e:	18ca      	adds	r2, r1, r3
 8011a30:	4253      	negs	r3, r2
 8011a32:	415a      	adcs	r2, r3
 8011a34:	4252      	negs	r2, r2
 8011a36:	4b15      	ldr	r3, [pc, #84]	; (8011a8c <HAL_DMA_IRQHandler+0x8a0>)
 8011a38:	4013      	ands	r3, r2
 8011a3a:	2280      	movs	r2, #128	; 0x80
 8011a3c:	0292      	lsls	r2, r2, #10
 8011a3e:	4694      	mov	ip, r2
 8011a40:	4463      	add	r3, ip
 8011a42:	e73b      	b.n	80118bc <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	0712      	lsls	r2, r2, #28
 8011a48:	d500      	bpl.n	8011a4c <HAL_DMA_IRQHandler+0x860>
 8011a4a:	e4d2      	b.n	80113f2 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011a4c:	6823      	ldr	r3, [r4, #0]
 8011a4e:	e482      	b.n	8011356 <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011a50:	681a      	ldr	r2, [r3, #0]
 8011a52:	0712      	lsls	r2, r2, #28
 8011a54:	d500      	bpl.n	8011a58 <HAL_DMA_IRQHandler+0x86c>
 8011a56:	e4cc      	b.n	80113f2 <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	f7ff fbfe 	bl	801125a <HAL_DMA_IRQHandler+0x6e>
 8011a5e:	46c0      	nop			; (mov r8, r8)
 8011a60:	40020080 	.word	0x40020080
 8011a64:	40020008 	.word	0x40020008
 8011a68:	4002001c 	.word	0x4002001c
 8011a6c:	40020030 	.word	0x40020030
 8011a70:	40020044 	.word	0x40020044
 8011a74:	40020058 	.word	0x40020058
 8011a78:	4002006c 	.word	0x4002006c
 8011a7c:	40020408 	.word	0x40020408
 8011a80:	4002041c 	.word	0x4002041c
 8011a84:	40020430 	.word	0x40020430
 8011a88:	bffdfbbc 	.word	0xbffdfbbc
 8011a8c:	fffe2000 	.word	0xfffe2000
 8011a90:	40020400 	.word	0x40020400
 8011a94:	40020000 	.word	0x40020000

08011a98 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011a98:	4b0a      	ldr	r3, [pc, #40]	; (8011ac4 <FLASH_SetErrorCode+0x2c>)
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	06db      	lsls	r3, r3, #27
 8011a9e:	d504      	bpl.n	8011aaa <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011aa0:	4a09      	ldr	r2, [pc, #36]	; (8011ac8 <FLASH_SetErrorCode+0x30>)
 8011aa2:	69d3      	ldr	r3, [r2, #28]
 8011aa4:	2102      	movs	r1, #2
 8011aa6:	430b      	orrs	r3, r1
 8011aa8:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011aaa:	4b06      	ldr	r3, [pc, #24]	; (8011ac4 <FLASH_SetErrorCode+0x2c>)
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	075b      	lsls	r3, r3, #29
 8011ab0:	d504      	bpl.n	8011abc <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011ab2:	4a05      	ldr	r2, [pc, #20]	; (8011ac8 <FLASH_SetErrorCode+0x30>)
 8011ab4:	69d3      	ldr	r3, [r2, #28]
 8011ab6:	2101      	movs	r1, #1
 8011ab8:	430b      	orrs	r3, r1
 8011aba:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011abc:	4b01      	ldr	r3, [pc, #4]	; (8011ac4 <FLASH_SetErrorCode+0x2c>)
 8011abe:	2214      	movs	r2, #20
 8011ac0:	60da      	str	r2, [r3, #12]
}  
 8011ac2:	4770      	bx	lr
 8011ac4:	40022000 	.word	0x40022000
 8011ac8:	200067b8 	.word	0x200067b8

08011acc <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011acc:	4b06      	ldr	r3, [pc, #24]	; (8011ae8 <HAL_FLASH_Unlock+0x1c>)
 8011ace:	691b      	ldr	r3, [r3, #16]
 8011ad0:	061b      	lsls	r3, r3, #24
 8011ad2:	d506      	bpl.n	8011ae2 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011ad4:	4b04      	ldr	r3, [pc, #16]	; (8011ae8 <HAL_FLASH_Unlock+0x1c>)
 8011ad6:	4a05      	ldr	r2, [pc, #20]	; (8011aec <HAL_FLASH_Unlock+0x20>)
 8011ad8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011ada:	4a05      	ldr	r2, [pc, #20]	; (8011af0 <HAL_FLASH_Unlock+0x24>)
 8011adc:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011ade:	2000      	movs	r0, #0
}
 8011ae0:	4770      	bx	lr
    return HAL_ERROR;
 8011ae2:	2001      	movs	r0, #1
 8011ae4:	e7fc      	b.n	8011ae0 <HAL_FLASH_Unlock+0x14>
 8011ae6:	46c0      	nop			; (mov r8, r8)
 8011ae8:	40022000 	.word	0x40022000
 8011aec:	45670123 	.word	0x45670123
 8011af0:	cdef89ab 	.word	0xcdef89ab

08011af4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011af4:	4a03      	ldr	r2, [pc, #12]	; (8011b04 <HAL_FLASH_Lock+0x10>)
 8011af6:	6913      	ldr	r3, [r2, #16]
 8011af8:	2180      	movs	r1, #128	; 0x80
 8011afa:	430b      	orrs	r3, r1
 8011afc:	6113      	str	r3, [r2, #16]
}
 8011afe:	2000      	movs	r0, #0
 8011b00:	4770      	bx	lr
 8011b02:	46c0      	nop			; (mov r8, r8)
 8011b04:	40022000 	.word	0x40022000

08011b08 <FLASH_WaitForLastOperation>:
{
 8011b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b0a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011b0c:	f7fe fe16 	bl	801073c <HAL_GetTick>
 8011b10:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011b12:	4e13      	ldr	r6, [pc, #76]	; (8011b60 <FLASH_WaitForLastOperation+0x58>)
 8011b14:	2501      	movs	r5, #1
 8011b16:	68f3      	ldr	r3, [r6, #12]
 8011b18:	421d      	tst	r5, r3
 8011b1a:	d00a      	beq.n	8011b32 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011b1c:	1c63      	adds	r3, r4, #1
 8011b1e:	d0fa      	beq.n	8011b16 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011b20:	2c00      	cmp	r4, #0
 8011b22:	d01b      	beq.n	8011b5c <FLASH_WaitForLastOperation+0x54>
 8011b24:	f7fe fe0a 	bl	801073c <HAL_GetTick>
 8011b28:	1bc0      	subs	r0, r0, r7
 8011b2a:	42a0      	cmp	r0, r4
 8011b2c:	d9f3      	bls.n	8011b16 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011b2e:	2003      	movs	r0, #3
 8011b30:	e00f      	b.n	8011b52 <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011b32:	4b0b      	ldr	r3, [pc, #44]	; (8011b60 <FLASH_WaitForLastOperation+0x58>)
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	069b      	lsls	r3, r3, #26
 8011b38:	d502      	bpl.n	8011b40 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011b3a:	4b09      	ldr	r3, [pc, #36]	; (8011b60 <FLASH_WaitForLastOperation+0x58>)
 8011b3c:	2220      	movs	r2, #32
 8011b3e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011b40:	4b07      	ldr	r3, [pc, #28]	; (8011b60 <FLASH_WaitForLastOperation+0x58>)
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	06db      	lsls	r3, r3, #27
 8011b46:	d405      	bmi.n	8011b54 <FLASH_WaitForLastOperation+0x4c>
 8011b48:	4b05      	ldr	r3, [pc, #20]	; (8011b60 <FLASH_WaitForLastOperation+0x58>)
 8011b4a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011b4c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011b4e:	075b      	lsls	r3, r3, #29
 8011b50:	d400      	bmi.n	8011b54 <FLASH_WaitForLastOperation+0x4c>
}
 8011b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 8011b54:	f7ff ffa0 	bl	8011a98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011b58:	2001      	movs	r0, #1
 8011b5a:	e7fa      	b.n	8011b52 <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 8011b5c:	2003      	movs	r0, #3
 8011b5e:	e7f8      	b.n	8011b52 <FLASH_WaitForLastOperation+0x4a>
 8011b60:	40022000 	.word	0x40022000

08011b64 <HAL_FLASH_Program>:
{
 8011b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b66:	46de      	mov	lr, fp
 8011b68:	4657      	mov	r7, sl
 8011b6a:	464e      	mov	r6, r9
 8011b6c:	4645      	mov	r5, r8
 8011b6e:	b5e0      	push	{r5, r6, r7, lr}
 8011b70:	b083      	sub	sp, #12
 8011b72:	0004      	movs	r4, r0
 8011b74:	000e      	movs	r6, r1
 8011b76:	9201      	str	r2, [sp, #4]
 8011b78:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011b7a:	4b2a      	ldr	r3, [pc, #168]	; (8011c24 <HAL_FLASH_Program+0xc0>)
 8011b7c:	7e1b      	ldrb	r3, [r3, #24]
 8011b7e:	2b01      	cmp	r3, #1
 8011b80:	d04e      	beq.n	8011c20 <HAL_FLASH_Program+0xbc>
 8011b82:	4b28      	ldr	r3, [pc, #160]	; (8011c24 <HAL_FLASH_Program+0xc0>)
 8011b84:	2201      	movs	r2, #1
 8011b86:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011b88:	4827      	ldr	r0, [pc, #156]	; (8011c28 <HAL_FLASH_Program+0xc4>)
 8011b8a:	f7ff ffbd 	bl	8011b08 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d13c      	bne.n	8011c0c <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011b92:	2c01      	cmp	r4, #1
 8011b94:	d010      	beq.n	8011bb8 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 8011b96:	3c02      	subs	r4, #2
 8011b98:	4260      	negs	r0, r4
 8011b9a:	4144      	adcs	r4, r0
 8011b9c:	4264      	negs	r4, r4
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	439c      	bics	r4, r3
 8011ba2:	46a0      	mov	r8, r4
 8011ba4:	3303      	adds	r3, #3
 8011ba6:	469c      	mov	ip, r3
 8011ba8:	44e0      	add	r8, ip
 8011baa:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011bac:	4b1d      	ldr	r3, [pc, #116]	; (8011c24 <HAL_FLASH_Program+0xc0>)
 8011bae:	469b      	mov	fp, r3
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011bb4:	4c1d      	ldr	r4, [pc, #116]	; (8011c2c <HAL_FLASH_Program+0xc8>)
 8011bb6:	e021      	b.n	8011bfc <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	4698      	mov	r8, r3
 8011bbc:	e7f5      	b.n	8011baa <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011bbe:	2220      	movs	r2, #32
 8011bc0:	1ad2      	subs	r2, r2, r3
 8011bc2:	4649      	mov	r1, r9
 8011bc4:	4091      	lsls	r1, r2
 8011bc6:	000a      	movs	r2, r1
 8011bc8:	9901      	ldr	r1, [sp, #4]
 8011bca:	40d9      	lsrs	r1, r3
 8011bcc:	000b      	movs	r3, r1
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011bd2:	465a      	mov	r2, fp
 8011bd4:	4651      	mov	r1, sl
 8011bd6:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011bd8:	6922      	ldr	r2, [r4, #16]
 8011bda:	2701      	movs	r7, #1
 8011bdc:	433a      	orrs	r2, r7
 8011bde:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011be0:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011be2:	4811      	ldr	r0, [pc, #68]	; (8011c28 <HAL_FLASH_Program+0xc4>)
 8011be4:	f7ff ff90 	bl	8011b08 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011be8:	6923      	ldr	r3, [r4, #16]
 8011bea:	43bb      	bics	r3, r7
 8011bec:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	d10c      	bne.n	8011c0c <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 8011bf2:	3501      	adds	r5, #1
 8011bf4:	3602      	adds	r6, #2
 8011bf6:	b2eb      	uxtb	r3, r5
 8011bf8:	4598      	cmp	r8, r3
 8011bfa:	d907      	bls.n	8011c0c <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011bfc:	012b      	lsls	r3, r5, #4
 8011bfe:	2220      	movs	r2, #32
 8011c00:	4252      	negs	r2, r2
 8011c02:	189a      	adds	r2, r3, r2
 8011c04:	d4db      	bmi.n	8011bbe <HAL_FLASH_Program+0x5a>
 8011c06:	464b      	mov	r3, r9
 8011c08:	40d3      	lsrs	r3, r2
 8011c0a:	e7e1      	b.n	8011bd0 <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 8011c0c:	4b05      	ldr	r3, [pc, #20]	; (8011c24 <HAL_FLASH_Program+0xc0>)
 8011c0e:	2200      	movs	r2, #0
 8011c10:	761a      	strb	r2, [r3, #24]
}
 8011c12:	b003      	add	sp, #12
 8011c14:	bcf0      	pop	{r4, r5, r6, r7}
 8011c16:	46bb      	mov	fp, r7
 8011c18:	46b2      	mov	sl, r6
 8011c1a:	46a9      	mov	r9, r5
 8011c1c:	46a0      	mov	r8, r4
 8011c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011c20:	2002      	movs	r0, #2
 8011c22:	e7f6      	b.n	8011c12 <HAL_FLASH_Program+0xae>
 8011c24:	200067b8 	.word	0x200067b8
 8011c28:	0000c350 	.word	0x0000c350
 8011c2c:	40022000 	.word	0x40022000

08011c30 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011c30:	4b06      	ldr	r3, [pc, #24]	; (8011c4c <FLASH_MassErase+0x1c>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011c36:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <FLASH_MassErase+0x20>)
 8011c38:	691a      	ldr	r2, [r3, #16]
 8011c3a:	2104      	movs	r1, #4
 8011c3c:	430a      	orrs	r2, r1
 8011c3e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011c40:	691a      	ldr	r2, [r3, #16]
 8011c42:	313c      	adds	r1, #60	; 0x3c
 8011c44:	430a      	orrs	r2, r1
 8011c46:	611a      	str	r2, [r3, #16]
}
 8011c48:	4770      	bx	lr
 8011c4a:	46c0      	nop			; (mov r8, r8)
 8011c4c:	200067b8 	.word	0x200067b8
 8011c50:	40022000 	.word	0x40022000

08011c54 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011c54:	4b06      	ldr	r3, [pc, #24]	; (8011c70 <FLASH_PageErase+0x1c>)
 8011c56:	2200      	movs	r2, #0
 8011c58:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011c5a:	4b06      	ldr	r3, [pc, #24]	; (8011c74 <FLASH_PageErase+0x20>)
 8011c5c:	691a      	ldr	r2, [r3, #16]
 8011c5e:	2102      	movs	r1, #2
 8011c60:	430a      	orrs	r2, r1
 8011c62:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011c64:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011c66:	691a      	ldr	r2, [r3, #16]
 8011c68:	313e      	adds	r1, #62	; 0x3e
 8011c6a:	430a      	orrs	r2, r1
 8011c6c:	611a      	str	r2, [r3, #16]
}
 8011c6e:	4770      	bx	lr
 8011c70:	200067b8 	.word	0x200067b8
 8011c74:	40022000 	.word	0x40022000

08011c78 <HAL_FLASHEx_Erase>:
{
 8011c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c7a:	46ce      	mov	lr, r9
 8011c7c:	4647      	mov	r7, r8
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	0005      	movs	r5, r0
 8011c82:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011c84:	4b2a      	ldr	r3, [pc, #168]	; (8011d30 <HAL_FLASHEx_Erase+0xb8>)
 8011c86:	7e1b      	ldrb	r3, [r3, #24]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d04e      	beq.n	8011d2a <HAL_FLASHEx_Erase+0xb2>
 8011c8c:	4b28      	ldr	r3, [pc, #160]	; (8011d30 <HAL_FLASHEx_Erase+0xb8>)
 8011c8e:	2201      	movs	r2, #1
 8011c90:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011c92:	6803      	ldr	r3, [r0, #0]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d02a      	beq.n	8011cee <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011c98:	4826      	ldr	r0, [pc, #152]	; (8011d34 <HAL_FLASHEx_Erase+0xbc>)
 8011c9a:	f7ff ff35 	bl	8011b08 <FLASH_WaitForLastOperation>
 8011c9e:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011ca0:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d12a      	bne.n	8011cfc <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 8011ca6:	3b01      	subs	r3, #1
 8011ca8:	4642      	mov	r2, r8
 8011caa:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011cac:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011cae:	68ab      	ldr	r3, [r5, #8]
 8011cb0:	02db      	lsls	r3, r3, #11
 8011cb2:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011cb4:	429c      	cmp	r4, r3
 8011cb6:	d236      	bcs.n	8011d26 <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011cb8:	4b1e      	ldr	r3, [pc, #120]	; (8011d34 <HAL_FLASHEx_Erase+0xbc>)
 8011cba:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011cbc:	4e1e      	ldr	r6, [pc, #120]	; (8011d38 <HAL_FLASHEx_Erase+0xc0>)
 8011cbe:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 8011cc0:	0020      	movs	r0, r4
 8011cc2:	f7ff ffc7 	bl	8011c54 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011cc6:	4648      	mov	r0, r9
 8011cc8:	f7ff ff1e 	bl	8011b08 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011ccc:	6933      	ldr	r3, [r6, #16]
 8011cce:	43bb      	bics	r3, r7
 8011cd0:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d124      	bne.n	8011d20 <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 8011cd6:	2380      	movs	r3, #128	; 0x80
 8011cd8:	011b      	lsls	r3, r3, #4
 8011cda:	469c      	mov	ip, r3
 8011cdc:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011cde:	68ab      	ldr	r3, [r5, #8]
 8011ce0:	02db      	lsls	r3, r3, #11
 8011ce2:	686a      	ldr	r2, [r5, #4]
 8011ce4:	4694      	mov	ip, r2
 8011ce6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011ce8:	42a3      	cmp	r3, r4
 8011cea:	d8e9      	bhi.n	8011cc0 <HAL_FLASHEx_Erase+0x48>
 8011cec:	e006      	b.n	8011cfc <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011cee:	4811      	ldr	r0, [pc, #68]	; (8011d34 <HAL_FLASHEx_Erase+0xbc>)
 8011cf0:	f7ff ff0a 	bl	8011b08 <FLASH_WaitForLastOperation>
 8011cf4:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011cf6:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d006      	beq.n	8011d0a <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 8011cfc:	4b0c      	ldr	r3, [pc, #48]	; (8011d30 <HAL_FLASHEx_Erase+0xb8>)
 8011cfe:	2200      	movs	r2, #0
 8011d00:	761a      	strb	r2, [r3, #24]
}
 8011d02:	bcc0      	pop	{r6, r7}
 8011d04:	46b9      	mov	r9, r7
 8011d06:	46b0      	mov	r8, r6
 8011d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011d0a:	f7ff ff91 	bl	8011c30 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011d0e:	4809      	ldr	r0, [pc, #36]	; (8011d34 <HAL_FLASHEx_Erase+0xbc>)
 8011d10:	f7ff fefa 	bl	8011b08 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011d14:	4a08      	ldr	r2, [pc, #32]	; (8011d38 <HAL_FLASHEx_Erase+0xc0>)
 8011d16:	6913      	ldr	r3, [r2, #16]
 8011d18:	2104      	movs	r1, #4
 8011d1a:	438b      	bics	r3, r1
 8011d1c:	6113      	str	r3, [r2, #16]
 8011d1e:	e7ed      	b.n	8011cfc <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 8011d20:	4643      	mov	r3, r8
 8011d22:	601c      	str	r4, [r3, #0]
            break;
 8011d24:	e7ea      	b.n	8011cfc <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011d26:	2001      	movs	r0, #1
 8011d28:	e7e8      	b.n	8011cfc <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 8011d2a:	2002      	movs	r0, #2
 8011d2c:	e7e9      	b.n	8011d02 <HAL_FLASHEx_Erase+0x8a>
 8011d2e:	46c0      	nop			; (mov r8, r8)
 8011d30:	200067b8 	.word	0x200067b8
 8011d34:	0000c350 	.word	0x0000c350
 8011d38:	40022000 	.word	0x40022000

08011d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d3e:	46de      	mov	lr, fp
 8011d40:	4657      	mov	r7, sl
 8011d42:	464e      	mov	r6, r9
 8011d44:	4645      	mov	r5, r8
 8011d46:	b5e0      	push	{r5, r6, r7, lr}
 8011d48:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011d4a:	680a      	ldr	r2, [r1, #0]
 8011d4c:	2a00      	cmp	r2, #0
 8011d4e:	d100      	bne.n	8011d52 <HAL_GPIO_Init+0x16>
 8011d50:	e0c9      	b.n	8011ee6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 8011d52:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011d54:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011d56:	2510      	movs	r5, #16
 8011d58:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011d5a:	2580      	movs	r5, #128	; 0x80
 8011d5c:	056d      	lsls	r5, r5, #21
 8011d5e:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011d60:	4d64      	ldr	r5, [pc, #400]	; (8011ef4 <HAL_GPIO_Init+0x1b8>)
 8011d62:	1945      	adds	r5, r0, r5
 8011d64:	1e6e      	subs	r6, r5, #1
 8011d66:	41b5      	sbcs	r5, r6
 8011d68:	3504      	adds	r5, #4
 8011d6a:	46a9      	mov	r9, r5
 8011d6c:	e044      	b.n	8011df8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8011d6e:	08da      	lsrs	r2, r3, #3
 8011d70:	0092      	lsls	r2, r2, #2
 8011d72:	1882      	adds	r2, r0, r2
 8011d74:	9201      	str	r2, [sp, #4]
 8011d76:	6a15      	ldr	r5, [r2, #32]
 8011d78:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011d7a:	2507      	movs	r5, #7
 8011d7c:	401d      	ands	r5, r3
 8011d7e:	00ad      	lsls	r5, r5, #2
 8011d80:	270f      	movs	r7, #15
 8011d82:	40af      	lsls	r7, r5
 8011d84:	46bb      	mov	fp, r7
 8011d86:	4657      	mov	r7, sl
 8011d88:	465a      	mov	r2, fp
 8011d8a:	4397      	bics	r7, r2
 8011d8c:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011d8e:	690f      	ldr	r7, [r1, #16]
 8011d90:	40af      	lsls	r7, r5
 8011d92:	003d      	movs	r5, r7
 8011d94:	4652      	mov	r2, sl
 8011d96:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 8011d98:	9a01      	ldr	r2, [sp, #4]
 8011d9a:	6215      	str	r5, [r2, #32]
 8011d9c:	e037      	b.n	8011e0e <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011d9e:	2500      	movs	r5, #0
 8011da0:	465f      	mov	r7, fp
 8011da2:	40bd      	lsls	r5, r7
 8011da4:	4657      	mov	r7, sl
 8011da6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011da8:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011daa:	4a53      	ldr	r2, [pc, #332]	; (8011ef8 <HAL_GPIO_Init+0x1bc>)
 8011dac:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011dae:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011db0:	684f      	ldr	r7, [r1, #4]
 8011db2:	03ff      	lsls	r7, r7, #15
 8011db4:	d500      	bpl.n	8011db8 <HAL_GPIO_Init+0x7c>
 8011db6:	e08e      	b.n	8011ed6 <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011db8:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011dba:	4f4f      	ldr	r7, [pc, #316]	; (8011ef8 <HAL_GPIO_Init+0x1bc>)
 8011dbc:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 8011dbe:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011dc0:	684f      	ldr	r7, [r1, #4]
 8011dc2:	03bf      	lsls	r7, r7, #14
 8011dc4:	d500      	bpl.n	8011dc8 <HAL_GPIO_Init+0x8c>
 8011dc6:	e088      	b.n	8011eda <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011dc8:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011dca:	4f4b      	ldr	r7, [pc, #300]	; (8011ef8 <HAL_GPIO_Init+0x1bc>)
 8011dcc:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011dce:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011dd0:	684f      	ldr	r7, [r1, #4]
 8011dd2:	02ff      	lsls	r7, r7, #11
 8011dd4:	d500      	bpl.n	8011dd8 <HAL_GPIO_Init+0x9c>
 8011dd6:	e082      	b.n	8011ede <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011dd8:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011dda:	4f47      	ldr	r7, [pc, #284]	; (8011ef8 <HAL_GPIO_Init+0x1bc>)
 8011ddc:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 8011dde:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011de0:	684f      	ldr	r7, [r1, #4]
 8011de2:	02bf      	lsls	r7, r7, #10
 8011de4:	d47d      	bmi.n	8011ee2 <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011de6:	402a      	ands	r2, r5
 8011de8:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011dea:	4a43      	ldr	r2, [pc, #268]	; (8011ef8 <HAL_GPIO_Init+0x1bc>)
 8011dec:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 8011dee:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011df0:	680a      	ldr	r2, [r1, #0]
 8011df2:	0015      	movs	r5, r2
 8011df4:	40dd      	lsrs	r5, r3
 8011df6:	d076      	beq.n	8011ee6 <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011df8:	0025      	movs	r5, r4
 8011dfa:	409d      	lsls	r5, r3
 8011dfc:	0016      	movs	r6, r2
 8011dfe:	402e      	ands	r6, r5
    if(iocurrent)
 8011e00:	422a      	tst	r2, r5
 8011e02:	d0f4      	beq.n	8011dee <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011e04:	684a      	ldr	r2, [r1, #4]
 8011e06:	4665      	mov	r5, ip
 8011e08:	43aa      	bics	r2, r5
 8011e0a:	2a02      	cmp	r2, #2
 8011e0c:	d0af      	beq.n	8011d6e <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8011e0e:	6802      	ldr	r2, [r0, #0]
 8011e10:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011e12:	005d      	lsls	r5, r3, #1
 8011e14:	2203      	movs	r2, #3
 8011e16:	40aa      	lsls	r2, r5
 8011e18:	43d7      	mvns	r7, r2
 8011e1a:	46ba      	mov	sl, r7
 8011e1c:	465f      	mov	r7, fp
 8011e1e:	4397      	bics	r7, r2
 8011e20:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011e22:	684a      	ldr	r2, [r1, #4]
 8011e24:	2703      	movs	r7, #3
 8011e26:	403a      	ands	r2, r7
 8011e28:	40aa      	lsls	r2, r5
 8011e2a:	465f      	mov	r7, fp
 8011e2c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8011e2e:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011e30:	684a      	ldr	r2, [r1, #4]
 8011e32:	4667      	mov	r7, ip
 8011e34:	43ba      	bics	r2, r7
 8011e36:	3a01      	subs	r2, #1
 8011e38:	2a01      	cmp	r2, #1
 8011e3a:	d812      	bhi.n	8011e62 <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 8011e3c:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011e3e:	4657      	mov	r7, sl
 8011e40:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011e42:	68ca      	ldr	r2, [r1, #12]
 8011e44:	40aa      	lsls	r2, r5
 8011e46:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8011e48:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8011e4a:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011e4c:	0027      	movs	r7, r4
 8011e4e:	409f      	lsls	r7, r3
 8011e50:	43ba      	bics	r2, r7
 8011e52:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011e54:	684a      	ldr	r2, [r1, #4]
 8011e56:	0912      	lsrs	r2, r2, #4
 8011e58:	4022      	ands	r2, r4
 8011e5a:	409a      	lsls	r2, r3
 8011e5c:	465f      	mov	r7, fp
 8011e5e:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8011e60:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8011e62:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011e64:	4657      	mov	r7, sl
 8011e66:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011e68:	688a      	ldr	r2, [r1, #8]
 8011e6a:	40aa      	lsls	r2, r5
 8011e6c:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8011e6e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011e70:	684a      	ldr	r2, [r1, #4]
 8011e72:	4645      	mov	r5, r8
 8011e74:	422a      	tst	r2, r5
 8011e76:	d0ba      	beq.n	8011dee <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011e78:	4a20      	ldr	r2, [pc, #128]	; (8011efc <HAL_GPIO_Init+0x1c0>)
 8011e7a:	6995      	ldr	r5, [r2, #24]
 8011e7c:	4325      	orrs	r5, r4
 8011e7e:	6195      	str	r5, [r2, #24]
 8011e80:	6992      	ldr	r2, [r2, #24]
 8011e82:	4022      	ands	r2, r4
 8011e84:	9203      	str	r2, [sp, #12]
 8011e86:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011e88:	089a      	lsrs	r2, r3, #2
 8011e8a:	0092      	lsls	r2, r2, #2
 8011e8c:	4d1c      	ldr	r5, [pc, #112]	; (8011f00 <HAL_GPIO_Init+0x1c4>)
 8011e8e:	46aa      	mov	sl, r5
 8011e90:	4452      	add	r2, sl
 8011e92:	6895      	ldr	r5, [r2, #8]
 8011e94:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011e96:	2503      	movs	r5, #3
 8011e98:	401d      	ands	r5, r3
 8011e9a:	00ad      	lsls	r5, r5, #2
 8011e9c:	46ab      	mov	fp, r5
 8011e9e:	250f      	movs	r5, #15
 8011ea0:	465f      	mov	r7, fp
 8011ea2:	40bd      	lsls	r5, r7
 8011ea4:	4657      	mov	r7, sl
 8011ea6:	43af      	bics	r7, r5
 8011ea8:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011eaa:	2590      	movs	r5, #144	; 0x90
 8011eac:	05ed      	lsls	r5, r5, #23
 8011eae:	42a8      	cmp	r0, r5
 8011eb0:	d100      	bne.n	8011eb4 <HAL_GPIO_Init+0x178>
 8011eb2:	e774      	b.n	8011d9e <HAL_GPIO_Init+0x62>
 8011eb4:	4d13      	ldr	r5, [pc, #76]	; (8011f04 <HAL_GPIO_Init+0x1c8>)
 8011eb6:	42a8      	cmp	r0, r5
 8011eb8:	d007      	beq.n	8011eca <HAL_GPIO_Init+0x18e>
 8011eba:	4d13      	ldr	r5, [pc, #76]	; (8011f08 <HAL_GPIO_Init+0x1cc>)
 8011ebc:	42a8      	cmp	r0, r5
 8011ebe:	d006      	beq.n	8011ece <HAL_GPIO_Init+0x192>
 8011ec0:	4d12      	ldr	r5, [pc, #72]	; (8011f0c <HAL_GPIO_Init+0x1d0>)
 8011ec2:	42a8      	cmp	r0, r5
 8011ec4:	d005      	beq.n	8011ed2 <HAL_GPIO_Init+0x196>
 8011ec6:	464d      	mov	r5, r9
 8011ec8:	e76a      	b.n	8011da0 <HAL_GPIO_Init+0x64>
 8011eca:	0025      	movs	r5, r4
 8011ecc:	e768      	b.n	8011da0 <HAL_GPIO_Init+0x64>
 8011ece:	2502      	movs	r5, #2
 8011ed0:	e766      	b.n	8011da0 <HAL_GPIO_Init+0x64>
 8011ed2:	2503      	movs	r5, #3
 8011ed4:	e764      	b.n	8011da0 <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 8011ed6:	4332      	orrs	r2, r6
 8011ed8:	e76f      	b.n	8011dba <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 8011eda:	4332      	orrs	r2, r6
 8011edc:	e775      	b.n	8011dca <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 8011ede:	4332      	orrs	r2, r6
 8011ee0:	e77b      	b.n	8011dda <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 8011ee2:	4316      	orrs	r6, r2
 8011ee4:	e781      	b.n	8011dea <HAL_GPIO_Init+0xae>
  } 
}
 8011ee6:	b005      	add	sp, #20
 8011ee8:	bcf0      	pop	{r4, r5, r6, r7}
 8011eea:	46bb      	mov	fp, r7
 8011eec:	46b2      	mov	sl, r6
 8011eee:	46a9      	mov	r9, r5
 8011ef0:	46a0      	mov	r8, r4
 8011ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ef4:	b7fff000 	.word	0xb7fff000
 8011ef8:	40010400 	.word	0x40010400
 8011efc:	40021000 	.word	0x40021000
 8011f00:	40010000 	.word	0x40010000
 8011f04:	48000400 	.word	0x48000400
 8011f08:	48000800 	.word	0x48000800
 8011f0c:	48000c00 	.word	0x48000c00

08011f10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f12:	46de      	mov	lr, fp
 8011f14:	4657      	mov	r7, sl
 8011f16:	464e      	mov	r6, r9
 8011f18:	4645      	mov	r5, r8
 8011f1a:	b5e0      	push	{r5, r6, r7, lr}
 8011f1c:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011f1e:	2900      	cmp	r1, #0
 8011f20:	d076      	beq.n	8012010 <HAL_GPIO_DeInit+0x100>
  uint32_t position = 0x00;
 8011f22:	2300      	movs	r3, #0

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011f24:	2203      	movs	r2, #3
 8011f26:	4691      	mov	r9, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011f28:	3204      	adds	r2, #4
 8011f2a:	4693      	mov	fp, r2
 8011f2c:	3208      	adds	r2, #8
 8011f2e:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011f30:	4a3b      	ldr	r2, [pc, #236]	; (8012020 <HAL_GPIO_DeInit+0x110>)
 8011f32:	1882      	adds	r2, r0, r2
 8011f34:	1e54      	subs	r4, r2, #1
 8011f36:	41a2      	sbcs	r2, r4
 8011f38:	3204      	adds	r2, #4
 8011f3a:	9201      	str	r2, [sp, #4]
 8011f3c:	e009      	b.n	8011f52 <HAL_GPIO_DeInit+0x42>
 8011f3e:	2700      	movs	r7, #0
 8011f40:	46b8      	mov	r8, r7
 8011f42:	4647      	mov	r7, r8
 8011f44:	40a7      	lsls	r7, r4
 8011f46:	42b7      	cmp	r7, r6
 8011f48:	d050      	beq.n	8011fec <HAL_GPIO_DeInit+0xdc>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011f4a:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011f4c:	000a      	movs	r2, r1
 8011f4e:	40da      	lsrs	r2, r3
 8011f50:	d05e      	beq.n	8012010 <HAL_GPIO_DeInit+0x100>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011f52:	2201      	movs	r2, #1
 8011f54:	409a      	lsls	r2, r3
 8011f56:	000d      	movs	r5, r1
 8011f58:	4015      	ands	r5, r2
    if (iocurrent)
 8011f5a:	4211      	tst	r1, r2
 8011f5c:	d0f5      	beq.n	8011f4a <HAL_GPIO_DeInit+0x3a>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011f5e:	6802      	ldr	r2, [r0, #0]
 8011f60:	005c      	lsls	r4, r3, #1
 8011f62:	464e      	mov	r6, r9
 8011f64:	40a6      	lsls	r6, r4
 8011f66:	0034      	movs	r4, r6
 8011f68:	43b2      	bics	r2, r6
 8011f6a:	6002      	str	r2, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011f6c:	08da      	lsrs	r2, r3, #3
 8011f6e:	0092      	lsls	r2, r2, #2
 8011f70:	1882      	adds	r2, r0, r2
 8011f72:	6a16      	ldr	r6, [r2, #32]
 8011f74:	46b0      	mov	r8, r6
 8011f76:	465f      	mov	r7, fp
 8011f78:	401f      	ands	r7, r3
 8011f7a:	00bf      	lsls	r7, r7, #2
 8011f7c:	46bc      	mov	ip, r7
 8011f7e:	4657      	mov	r7, sl
 8011f80:	4666      	mov	r6, ip
 8011f82:	40b7      	lsls	r7, r6
 8011f84:	003e      	movs	r6, r7
 8011f86:	4647      	mov	r7, r8
 8011f88:	43b7      	bics	r7, r6
 8011f8a:	6217      	str	r7, [r2, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011f8c:	6882      	ldr	r2, [r0, #8]
 8011f8e:	43a2      	bics	r2, r4
 8011f90:	6082      	str	r2, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011f92:	6842      	ldr	r2, [r0, #4]
 8011f94:	2601      	movs	r6, #1
 8011f96:	409e      	lsls	r6, r3
 8011f98:	43b2      	bics	r2, r6
 8011f9a:	6042      	str	r2, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011f9c:	68c2      	ldr	r2, [r0, #12]
 8011f9e:	43a2      	bics	r2, r4
 8011fa0:	60c2      	str	r2, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011fa2:	089a      	lsrs	r2, r3, #2
 8011fa4:	0092      	lsls	r2, r2, #2
 8011fa6:	4c1f      	ldr	r4, [pc, #124]	; (8012024 <HAL_GPIO_DeInit+0x114>)
 8011fa8:	46a4      	mov	ip, r4
 8011faa:	4462      	add	r2, ip
 8011fac:	6896      	ldr	r6, [r2, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011fae:	464c      	mov	r4, r9
 8011fb0:	401c      	ands	r4, r3
 8011fb2:	00a4      	lsls	r4, r4, #2
 8011fb4:	4657      	mov	r7, sl
 8011fb6:	40a7      	lsls	r7, r4
 8011fb8:	46bc      	mov	ip, r7
 8011fba:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011fbc:	2790      	movs	r7, #144	; 0x90
 8011fbe:	05ff      	lsls	r7, r7, #23
 8011fc0:	42b8      	cmp	r0, r7
 8011fc2:	d0bc      	beq.n	8011f3e <HAL_GPIO_DeInit+0x2e>
 8011fc4:	4f18      	ldr	r7, [pc, #96]	; (8012028 <HAL_GPIO_DeInit+0x118>)
 8011fc6:	42b8      	cmp	r0, r7
 8011fc8:	d008      	beq.n	8011fdc <HAL_GPIO_DeInit+0xcc>
 8011fca:	4f18      	ldr	r7, [pc, #96]	; (801202c <HAL_GPIO_DeInit+0x11c>)
 8011fcc:	42b8      	cmp	r0, r7
 8011fce:	d008      	beq.n	8011fe2 <HAL_GPIO_DeInit+0xd2>
 8011fd0:	4f17      	ldr	r7, [pc, #92]	; (8012030 <HAL_GPIO_DeInit+0x120>)
 8011fd2:	42b8      	cmp	r0, r7
 8011fd4:	d008      	beq.n	8011fe8 <HAL_GPIO_DeInit+0xd8>
 8011fd6:	9f01      	ldr	r7, [sp, #4]
 8011fd8:	46b8      	mov	r8, r7
 8011fda:	e7b2      	b.n	8011f42 <HAL_GPIO_DeInit+0x32>
 8011fdc:	2701      	movs	r7, #1
 8011fde:	46b8      	mov	r8, r7
 8011fe0:	e7af      	b.n	8011f42 <HAL_GPIO_DeInit+0x32>
 8011fe2:	2702      	movs	r7, #2
 8011fe4:	46b8      	mov	r8, r7
 8011fe6:	e7ac      	b.n	8011f42 <HAL_GPIO_DeInit+0x32>
 8011fe8:	46c8      	mov	r8, r9
 8011fea:	e7aa      	b.n	8011f42 <HAL_GPIO_DeInit+0x32>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011fec:	6894      	ldr	r4, [r2, #8]
 8011fee:	4666      	mov	r6, ip
 8011ff0:	43b4      	bics	r4, r6
 8011ff2:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011ff4:	4a0f      	ldr	r2, [pc, #60]	; (8012034 <HAL_GPIO_DeInit+0x124>)
 8011ff6:	6814      	ldr	r4, [r2, #0]
 8011ff8:	43ac      	bics	r4, r5
 8011ffa:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011ffc:	6854      	ldr	r4, [r2, #4]
 8011ffe:	43ac      	bics	r4, r5
 8012000:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8012002:	6894      	ldr	r4, [r2, #8]
 8012004:	43ac      	bics	r4, r5
 8012006:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8012008:	68d4      	ldr	r4, [r2, #12]
 801200a:	43ac      	bics	r4, r5
 801200c:	60d4      	str	r4, [r2, #12]
 801200e:	e79c      	b.n	8011f4a <HAL_GPIO_DeInit+0x3a>
  }
}
 8012010:	b003      	add	sp, #12
 8012012:	bcf0      	pop	{r4, r5, r6, r7}
 8012014:	46bb      	mov	fp, r7
 8012016:	46b2      	mov	sl, r6
 8012018:	46a9      	mov	r9, r5
 801201a:	46a0      	mov	r8, r4
 801201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801201e:	46c0      	nop			; (mov r8, r8)
 8012020:	b7fff000 	.word	0xb7fff000
 8012024:	40010000 	.word	0x40010000
 8012028:	48000400 	.word	0x48000400
 801202c:	48000800 	.word	0x48000800
 8012030:	48000c00 	.word	0x48000c00
 8012034:	40010400 	.word	0x40010400

08012038 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012038:	6900      	ldr	r0, [r0, #16]
 801203a:	4008      	ands	r0, r1
 801203c:	1e41      	subs	r1, r0, #1
 801203e:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8012040:	b2c0      	uxtb	r0, r0
  }
 8012042:	4770      	bx	lr

08012044 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012044:	2a00      	cmp	r2, #0
 8012046:	d001      	beq.n	801204c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012048:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801204a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801204c:	6281      	str	r1, [r0, #40]	; 0x28
}
 801204e:	e7fc      	b.n	801204a <HAL_GPIO_WritePin+0x6>

08012050 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012050:	6943      	ldr	r3, [r0, #20]
 8012052:	4059      	eors	r1, r3
 8012054:	6141      	str	r1, [r0, #20]
}
 8012056:	4770      	bx	lr

08012058 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012058:	4770      	bx	lr
	...

0801205c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801205c:	4a03      	ldr	r2, [pc, #12]	; (801206c <HAL_PWR_EnableBkUpAccess+0x10>)
 801205e:	6811      	ldr	r1, [r2, #0]
 8012060:	2380      	movs	r3, #128	; 0x80
 8012062:	005b      	lsls	r3, r3, #1
 8012064:	430b      	orrs	r3, r1
 8012066:	6013      	str	r3, [r2, #0]
}
 8012068:	4770      	bx	lr
 801206a:	46c0      	nop			; (mov r8, r8)
 801206c:	40007000 	.word	0x40007000

08012070 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012072:	46c6      	mov	lr, r8
 8012074:	b500      	push	{lr}
 8012076:	b082      	sub	sp, #8
 8012078:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801207a:	6803      	ldr	r3, [r0, #0]
 801207c:	07db      	lsls	r3, r3, #31
 801207e:	d538      	bpl.n	80120f2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012080:	4bbd      	ldr	r3, [pc, #756]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012082:	685a      	ldr	r2, [r3, #4]
 8012084:	230c      	movs	r3, #12
 8012086:	4013      	ands	r3, r2
 8012088:	2b04      	cmp	r3, #4
 801208a:	d02a      	beq.n	80120e2 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801208c:	4bba      	ldr	r3, [pc, #744]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801208e:	685a      	ldr	r2, [r3, #4]
 8012090:	230c      	movs	r3, #12
 8012092:	4013      	ands	r3, r2
 8012094:	2b08      	cmp	r3, #8
 8012096:	d108      	bne.n	80120aa <HAL_RCC_OscConfig+0x3a>
 8012098:	4bb7      	ldr	r3, [pc, #732]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	22c0      	movs	r2, #192	; 0xc0
 801209e:	0252      	lsls	r2, r2, #9
 80120a0:	4013      	ands	r3, r2
 80120a2:	2280      	movs	r2, #128	; 0x80
 80120a4:	0252      	lsls	r2, r2, #9
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d01b      	beq.n	80120e2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80120aa:	4bb3      	ldr	r3, [pc, #716]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	49b3      	ldr	r1, [pc, #716]	; (801237c <HAL_RCC_OscConfig+0x30c>)
 80120b0:	400a      	ands	r2, r1
 80120b2:	601a      	str	r2, [r3, #0]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	49b2      	ldr	r1, [pc, #712]	; (8012380 <HAL_RCC_OscConfig+0x310>)
 80120b8:	400a      	ands	r2, r1
 80120ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80120bc:	f7fe fb3e 	bl	801073c <HAL_GetTick>
 80120c0:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120c2:	4fad      	ldr	r7, [pc, #692]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80120c4:	2680      	movs	r6, #128	; 0x80
 80120c6:	02b6      	lsls	r6, r6, #10
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	4233      	tst	r3, r6
 80120cc:	d039      	beq.n	8012142 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120ce:	f7fe fb35 	bl	801073c <HAL_GetTick>
 80120d2:	1b40      	subs	r0, r0, r5
 80120d4:	2864      	cmp	r0, #100	; 0x64
 80120d6:	d9f7      	bls.n	80120c8 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80120d8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80120da:	b002      	add	sp, #8
 80120dc:	bc80      	pop	{r7}
 80120de:	46b8      	mov	r8, r7
 80120e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80120e2:	4ba5      	ldr	r3, [pc, #660]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	039b      	lsls	r3, r3, #14
 80120e8:	d503      	bpl.n	80120f2 <HAL_RCC_OscConfig+0x82>
 80120ea:	6863      	ldr	r3, [r4, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d100      	bne.n	80120f2 <HAL_RCC_OscConfig+0x82>
 80120f0:	e274      	b.n	80125dc <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80120f2:	6823      	ldr	r3, [r4, #0]
 80120f4:	079b      	lsls	r3, r3, #30
 80120f6:	d400      	bmi.n	80120fa <HAL_RCC_OscConfig+0x8a>
 80120f8:	e08d      	b.n	8012216 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80120fa:	4b9f      	ldr	r3, [pc, #636]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80120fc:	685b      	ldr	r3, [r3, #4]
 80120fe:	220c      	movs	r2, #12
 8012100:	421a      	tst	r2, r3
 8012102:	d077      	beq.n	80121f4 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012104:	4b9c      	ldr	r3, [pc, #624]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012106:	685a      	ldr	r2, [r3, #4]
 8012108:	230c      	movs	r3, #12
 801210a:	4013      	ands	r3, r2
 801210c:	2b08      	cmp	r3, #8
 801210e:	d068      	beq.n	80121e2 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012110:	68e3      	ldr	r3, [r4, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d100      	bne.n	8012118 <HAL_RCC_OscConfig+0xa8>
 8012116:	e0a1      	b.n	801225c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012118:	4a97      	ldr	r2, [pc, #604]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801211a:	6813      	ldr	r3, [r2, #0]
 801211c:	2101      	movs	r1, #1
 801211e:	430b      	orrs	r3, r1
 8012120:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012122:	f7fe fb0b 	bl	801073c <HAL_GetTick>
 8012126:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012128:	4f93      	ldr	r7, [pc, #588]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801212a:	2602      	movs	r6, #2
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	421e      	tst	r6, r3
 8012130:	d000      	beq.n	8012134 <HAL_RCC_OscConfig+0xc4>
 8012132:	e08a      	b.n	801224a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012134:	f7fe fb02 	bl	801073c <HAL_GetTick>
 8012138:	1b40      	subs	r0, r0, r5
 801213a:	2864      	cmp	r0, #100	; 0x64
 801213c:	d9f6      	bls.n	801212c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801213e:	2003      	movs	r0, #3
 8012140:	e7cb      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012142:	6863      	ldr	r3, [r4, #4]
 8012144:	2b01      	cmp	r3, #1
 8012146:	d00b      	beq.n	8012160 <HAL_RCC_OscConfig+0xf0>
 8012148:	2b00      	cmp	r3, #0
 801214a:	d122      	bne.n	8012192 <HAL_RCC_OscConfig+0x122>
 801214c:	4b8a      	ldr	r3, [pc, #552]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	498a      	ldr	r1, [pc, #552]	; (801237c <HAL_RCC_OscConfig+0x30c>)
 8012152:	400a      	ands	r2, r1
 8012154:	601a      	str	r2, [r3, #0]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	4989      	ldr	r1, [pc, #548]	; (8012380 <HAL_RCC_OscConfig+0x310>)
 801215a:	400a      	ands	r2, r1
 801215c:	601a      	str	r2, [r3, #0]
 801215e:	e005      	b.n	801216c <HAL_RCC_OscConfig+0xfc>
 8012160:	4a85      	ldr	r2, [pc, #532]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012162:	6811      	ldr	r1, [r2, #0]
 8012164:	2380      	movs	r3, #128	; 0x80
 8012166:	025b      	lsls	r3, r3, #9
 8012168:	430b      	orrs	r3, r1
 801216a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801216c:	6863      	ldr	r3, [r4, #4]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d027      	beq.n	80121c2 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8012172:	f7fe fae3 	bl	801073c <HAL_GetTick>
 8012176:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012178:	4f7f      	ldr	r7, [pc, #508]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801217a:	2680      	movs	r6, #128	; 0x80
 801217c:	02b6      	lsls	r6, r6, #10
 801217e:	683b      	ldr	r3, [r7, #0]
 8012180:	4233      	tst	r3, r6
 8012182:	d1b6      	bne.n	80120f2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012184:	f7fe fada 	bl	801073c <HAL_GetTick>
 8012188:	1b40      	subs	r0, r0, r5
 801218a:	2864      	cmp	r0, #100	; 0x64
 801218c:	d9f7      	bls.n	801217e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 801218e:	2003      	movs	r0, #3
 8012190:	e7a3      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012192:	2b05      	cmp	r3, #5
 8012194:	d009      	beq.n	80121aa <HAL_RCC_OscConfig+0x13a>
 8012196:	4b78      	ldr	r3, [pc, #480]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	4978      	ldr	r1, [pc, #480]	; (801237c <HAL_RCC_OscConfig+0x30c>)
 801219c:	400a      	ands	r2, r1
 801219e:	601a      	str	r2, [r3, #0]
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	4977      	ldr	r1, [pc, #476]	; (8012380 <HAL_RCC_OscConfig+0x310>)
 80121a4:	400a      	ands	r2, r1
 80121a6:	601a      	str	r2, [r3, #0]
 80121a8:	e7e0      	b.n	801216c <HAL_RCC_OscConfig+0xfc>
 80121aa:	4b73      	ldr	r3, [pc, #460]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80121ac:	6819      	ldr	r1, [r3, #0]
 80121ae:	2280      	movs	r2, #128	; 0x80
 80121b0:	02d2      	lsls	r2, r2, #11
 80121b2:	430a      	orrs	r2, r1
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	6819      	ldr	r1, [r3, #0]
 80121b8:	2280      	movs	r2, #128	; 0x80
 80121ba:	0252      	lsls	r2, r2, #9
 80121bc:	430a      	orrs	r2, r1
 80121be:	601a      	str	r2, [r3, #0]
 80121c0:	e7d4      	b.n	801216c <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80121c2:	f7fe fabb 	bl	801073c <HAL_GetTick>
 80121c6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80121c8:	4f6b      	ldr	r7, [pc, #428]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80121ca:	2680      	movs	r6, #128	; 0x80
 80121cc:	02b6      	lsls	r6, r6, #10
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	4233      	tst	r3, r6
 80121d2:	d08e      	beq.n	80120f2 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80121d4:	f7fe fab2 	bl	801073c <HAL_GetTick>
 80121d8:	1b40      	subs	r0, r0, r5
 80121da:	2864      	cmp	r0, #100	; 0x64
 80121dc:	d9f7      	bls.n	80121ce <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80121de:	2003      	movs	r0, #3
 80121e0:	e77b      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80121e2:	4b65      	ldr	r3, [pc, #404]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	22c0      	movs	r2, #192	; 0xc0
 80121e8:	0252      	lsls	r2, r2, #9
 80121ea:	4013      	ands	r3, r2
 80121ec:	2280      	movs	r2, #128	; 0x80
 80121ee:	0212      	lsls	r2, r2, #8
 80121f0:	4293      	cmp	r3, r2
 80121f2:	d18d      	bne.n	8012110 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80121f4:	4b60      	ldr	r3, [pc, #384]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	079b      	lsls	r3, r3, #30
 80121fa:	d504      	bpl.n	8012206 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80121fc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80121fe:	68e3      	ldr	r3, [r4, #12]
 8012200:	2b01      	cmp	r3, #1
 8012202:	d000      	beq.n	8012206 <HAL_RCC_OscConfig+0x196>
 8012204:	e769      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012206:	495c      	ldr	r1, [pc, #368]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012208:	680a      	ldr	r2, [r1, #0]
 801220a:	6923      	ldr	r3, [r4, #16]
 801220c:	00db      	lsls	r3, r3, #3
 801220e:	20f8      	movs	r0, #248	; 0xf8
 8012210:	4382      	bics	r2, r0
 8012212:	4313      	orrs	r3, r2
 8012214:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012216:	6823      	ldr	r3, [r4, #0]
 8012218:	071b      	lsls	r3, r3, #28
 801221a:	d547      	bpl.n	80122ac <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801221c:	6a23      	ldr	r3, [r4, #32]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d030      	beq.n	8012284 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012222:	4a55      	ldr	r2, [pc, #340]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012224:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012226:	2101      	movs	r1, #1
 8012228:	430b      	orrs	r3, r1
 801222a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801222c:	f7fe fa86 	bl	801073c <HAL_GetTick>
 8012230:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012232:	4f51      	ldr	r7, [pc, #324]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012234:	2602      	movs	r6, #2
 8012236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012238:	421e      	tst	r6, r3
 801223a:	d137      	bne.n	80122ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801223c:	f7fe fa7e 	bl	801073c <HAL_GetTick>
 8012240:	1b40      	subs	r0, r0, r5
 8012242:	2864      	cmp	r0, #100	; 0x64
 8012244:	d9f7      	bls.n	8012236 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012246:	2003      	movs	r0, #3
 8012248:	e747      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801224a:	494b      	ldr	r1, [pc, #300]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801224c:	680a      	ldr	r2, [r1, #0]
 801224e:	6923      	ldr	r3, [r4, #16]
 8012250:	00db      	lsls	r3, r3, #3
 8012252:	20f8      	movs	r0, #248	; 0xf8
 8012254:	4382      	bics	r2, r0
 8012256:	4313      	orrs	r3, r2
 8012258:	600b      	str	r3, [r1, #0]
 801225a:	e7dc      	b.n	8012216 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 801225c:	4a46      	ldr	r2, [pc, #280]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801225e:	6813      	ldr	r3, [r2, #0]
 8012260:	2101      	movs	r1, #1
 8012262:	438b      	bics	r3, r1
 8012264:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012266:	f7fe fa69 	bl	801073c <HAL_GetTick>
 801226a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801226c:	4f42      	ldr	r7, [pc, #264]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801226e:	2602      	movs	r6, #2
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	421e      	tst	r6, r3
 8012274:	d0cf      	beq.n	8012216 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012276:	f7fe fa61 	bl	801073c <HAL_GetTick>
 801227a:	1b40      	subs	r0, r0, r5
 801227c:	2864      	cmp	r0, #100	; 0x64
 801227e:	d9f7      	bls.n	8012270 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012280:	2003      	movs	r0, #3
 8012282:	e72a      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8012284:	4a3c      	ldr	r2, [pc, #240]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012286:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012288:	2101      	movs	r1, #1
 801228a:	438b      	bics	r3, r1
 801228c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801228e:	f7fe fa55 	bl	801073c <HAL_GetTick>
 8012292:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012294:	4f38      	ldr	r7, [pc, #224]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 8012296:	2602      	movs	r6, #2
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	421e      	tst	r6, r3
 801229c:	d006      	beq.n	80122ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801229e:	f7fe fa4d 	bl	801073c <HAL_GetTick>
 80122a2:	1b40      	subs	r0, r0, r5
 80122a4:	2864      	cmp	r0, #100	; 0x64
 80122a6:	d9f7      	bls.n	8012298 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80122a8:	2003      	movs	r0, #3
 80122aa:	e716      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80122ac:	6823      	ldr	r3, [r4, #0]
 80122ae:	075b      	lsls	r3, r3, #29
 80122b0:	d442      	bmi.n	8012338 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80122b2:	6823      	ldr	r3, [r4, #0]
 80122b4:	06db      	lsls	r3, r3, #27
 80122b6:	d512      	bpl.n	80122de <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80122b8:	6963      	ldr	r3, [r4, #20]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d100      	bne.n	80122c0 <HAL_RCC_OscConfig+0x250>
 80122be:	e0ce      	b.n	801245e <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80122c0:	3305      	adds	r3, #5
 80122c2:	d000      	beq.n	80122c6 <HAL_RCC_OscConfig+0x256>
 80122c4:	e0ec      	b.n	80124a0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80122c6:	4a2c      	ldr	r2, [pc, #176]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80122c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80122ca:	2104      	movs	r1, #4
 80122cc:	438b      	bics	r3, r1
 80122ce:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80122d0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80122d2:	69a3      	ldr	r3, [r4, #24]
 80122d4:	00db      	lsls	r3, r3, #3
 80122d6:	20f8      	movs	r0, #248	; 0xf8
 80122d8:	4381      	bics	r1, r0
 80122da:	430b      	orrs	r3, r1
 80122dc:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80122de:	6823      	ldr	r3, [r4, #0]
 80122e0:	069b      	lsls	r3, r3, #26
 80122e2:	d400      	bmi.n	80122e6 <HAL_RCC_OscConfig+0x276>
 80122e4:	e106      	b.n	80124f4 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80122e6:	4b24      	ldr	r3, [pc, #144]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	230c      	movs	r3, #12
 80122ec:	4013      	ands	r3, r2
 80122ee:	2b0c      	cmp	r3, #12
 80122f0:	d100      	bne.n	80122f4 <HAL_RCC_OscConfig+0x284>
 80122f2:	e0f6      	b.n	80124e2 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80122f4:	4b20      	ldr	r3, [pc, #128]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 80122f6:	685a      	ldr	r2, [r3, #4]
 80122f8:	230c      	movs	r3, #12
 80122fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80122fc:	2b08      	cmp	r3, #8
 80122fe:	d100      	bne.n	8012302 <HAL_RCC_OscConfig+0x292>
 8012300:	e0e7      	b.n	80124d2 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012302:	69e3      	ldr	r3, [r4, #28]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d100      	bne.n	801230a <HAL_RCC_OscConfig+0x29a>
 8012308:	e116      	b.n	8012538 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801230a:	4a1b      	ldr	r2, [pc, #108]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801230c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801230e:	2380      	movs	r3, #128	; 0x80
 8012310:	025b      	lsls	r3, r3, #9
 8012312:	430b      	orrs	r3, r1
 8012314:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012316:	f7fe fa11 	bl	801073c <HAL_GetTick>
 801231a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801231c:	4f16      	ldr	r7, [pc, #88]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801231e:	2680      	movs	r6, #128	; 0x80
 8012320:	0276      	lsls	r6, r6, #9
 8012322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012324:	4233      	tst	r3, r6
 8012326:	d000      	beq.n	801232a <HAL_RCC_OscConfig+0x2ba>
 8012328:	e0e4      	b.n	80124f4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801232a:	f7fe fa07 	bl	801073c <HAL_GetTick>
 801232e:	1b40      	subs	r0, r0, r5
 8012330:	2864      	cmp	r0, #100	; 0x64
 8012332:	d9f6      	bls.n	8012322 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012334:	2003      	movs	r0, #3
 8012336:	e6d0      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012338:	4a0f      	ldr	r2, [pc, #60]	; (8012378 <HAL_RCC_OscConfig+0x308>)
 801233a:	69d1      	ldr	r1, [r2, #28]
 801233c:	2080      	movs	r0, #128	; 0x80
 801233e:	0540      	lsls	r0, r0, #21
 8012340:	4301      	orrs	r1, r0
 8012342:	61d1      	str	r1, [r2, #28]
 8012344:	69d3      	ldr	r3, [r2, #28]
 8012346:	4003      	ands	r3, r0
 8012348:	9301      	str	r3, [sp, #4]
 801234a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801234c:	4a0d      	ldr	r2, [pc, #52]	; (8012384 <HAL_RCC_OscConfig+0x314>)
 801234e:	6811      	ldr	r1, [r2, #0]
 8012350:	2380      	movs	r3, #128	; 0x80
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	430b      	orrs	r3, r1
 8012356:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012358:	f7fe f9f0 	bl	801073c <HAL_GetTick>
 801235c:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801235e:	4f09      	ldr	r7, [pc, #36]	; (8012384 <HAL_RCC_OscConfig+0x314>)
 8012360:	2680      	movs	r6, #128	; 0x80
 8012362:	0076      	lsls	r6, r6, #1
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	4233      	tst	r3, r6
 8012368:	d10e      	bne.n	8012388 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801236a:	f7fe f9e7 	bl	801073c <HAL_GetTick>
 801236e:	1b40      	subs	r0, r0, r5
 8012370:	2864      	cmp	r0, #100	; 0x64
 8012372:	d9f7      	bls.n	8012364 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012374:	2003      	movs	r0, #3
 8012376:	e6b0      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
 8012378:	40021000 	.word	0x40021000
 801237c:	fffeffff 	.word	0xfffeffff
 8012380:	fffbffff 	.word	0xfffbffff
 8012384:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012388:	4b96      	ldr	r3, [pc, #600]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 801238a:	6a1a      	ldr	r2, [r3, #32]
 801238c:	2101      	movs	r1, #1
 801238e:	438a      	bics	r2, r1
 8012390:	621a      	str	r2, [r3, #32]
 8012392:	6a1a      	ldr	r2, [r3, #32]
 8012394:	3103      	adds	r1, #3
 8012396:	438a      	bics	r2, r1
 8012398:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 801239a:	f7fe f9cf 	bl	801073c <HAL_GetTick>
 801239e:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80123a0:	4f90      	ldr	r7, [pc, #576]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80123a2:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80123a4:	4b90      	ldr	r3, [pc, #576]	; (80125e8 <HAL_RCC_OscConfig+0x578>)
 80123a6:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80123a8:	6a3b      	ldr	r3, [r7, #32]
 80123aa:	421e      	tst	r6, r3
 80123ac:	d006      	beq.n	80123bc <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80123ae:	f7fe f9c5 	bl	801073c <HAL_GetTick>
 80123b2:	1b40      	subs	r0, r0, r5
 80123b4:	4540      	cmp	r0, r8
 80123b6:	d9f7      	bls.n	80123a8 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 80123b8:	2003      	movs	r0, #3
 80123ba:	e68e      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80123bc:	68a3      	ldr	r3, [r4, #8]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d00b      	beq.n	80123da <HAL_RCC_OscConfig+0x36a>
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d123      	bne.n	801240e <HAL_RCC_OscConfig+0x39e>
 80123c6:	4b87      	ldr	r3, [pc, #540]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80123c8:	6a1a      	ldr	r2, [r3, #32]
 80123ca:	2101      	movs	r1, #1
 80123cc:	438a      	bics	r2, r1
 80123ce:	621a      	str	r2, [r3, #32]
 80123d0:	6a1a      	ldr	r2, [r3, #32]
 80123d2:	3103      	adds	r1, #3
 80123d4:	438a      	bics	r2, r1
 80123d6:	621a      	str	r2, [r3, #32]
 80123d8:	e004      	b.n	80123e4 <HAL_RCC_OscConfig+0x374>
 80123da:	4a82      	ldr	r2, [pc, #520]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80123dc:	6a13      	ldr	r3, [r2, #32]
 80123de:	2101      	movs	r1, #1
 80123e0:	430b      	orrs	r3, r1
 80123e2:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80123e4:	68a3      	ldr	r3, [r4, #8]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d027      	beq.n	801243a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80123ea:	f7fe f9a7 	bl	801073c <HAL_GetTick>
 80123ee:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80123f0:	4f7c      	ldr	r7, [pc, #496]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80123f2:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80123f4:	4b7c      	ldr	r3, [pc, #496]	; (80125e8 <HAL_RCC_OscConfig+0x578>)
 80123f6:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80123f8:	6a3b      	ldr	r3, [r7, #32]
 80123fa:	421e      	tst	r6, r3
 80123fc:	d000      	beq.n	8012400 <HAL_RCC_OscConfig+0x390>
 80123fe:	e758      	b.n	80122b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012400:	f7fe f99c 	bl	801073c <HAL_GetTick>
 8012404:	1b40      	subs	r0, r0, r5
 8012406:	4540      	cmp	r0, r8
 8012408:	d9f6      	bls.n	80123f8 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 801240a:	2003      	movs	r0, #3
 801240c:	e665      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801240e:	2b05      	cmp	r3, #5
 8012410:	d009      	beq.n	8012426 <HAL_RCC_OscConfig+0x3b6>
 8012412:	4b74      	ldr	r3, [pc, #464]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012414:	6a1a      	ldr	r2, [r3, #32]
 8012416:	2101      	movs	r1, #1
 8012418:	438a      	bics	r2, r1
 801241a:	621a      	str	r2, [r3, #32]
 801241c:	6a1a      	ldr	r2, [r3, #32]
 801241e:	3103      	adds	r1, #3
 8012420:	438a      	bics	r2, r1
 8012422:	621a      	str	r2, [r3, #32]
 8012424:	e7de      	b.n	80123e4 <HAL_RCC_OscConfig+0x374>
 8012426:	4b6f      	ldr	r3, [pc, #444]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012428:	6a1a      	ldr	r2, [r3, #32]
 801242a:	2104      	movs	r1, #4
 801242c:	430a      	orrs	r2, r1
 801242e:	621a      	str	r2, [r3, #32]
 8012430:	6a1a      	ldr	r2, [r3, #32]
 8012432:	3903      	subs	r1, #3
 8012434:	430a      	orrs	r2, r1
 8012436:	621a      	str	r2, [r3, #32]
 8012438:	e7d4      	b.n	80123e4 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801243a:	f7fe f97f 	bl	801073c <HAL_GetTick>
 801243e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012440:	4f68      	ldr	r7, [pc, #416]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012442:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012444:	4b68      	ldr	r3, [pc, #416]	; (80125e8 <HAL_RCC_OscConfig+0x578>)
 8012446:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012448:	6a3b      	ldr	r3, [r7, #32]
 801244a:	421e      	tst	r6, r3
 801244c:	d100      	bne.n	8012450 <HAL_RCC_OscConfig+0x3e0>
 801244e:	e730      	b.n	80122b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012450:	f7fe f974 	bl	801073c <HAL_GetTick>
 8012454:	1b40      	subs	r0, r0, r5
 8012456:	4540      	cmp	r0, r8
 8012458:	d9f6      	bls.n	8012448 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 801245a:	2003      	movs	r0, #3
 801245c:	e63d      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801245e:	4b61      	ldr	r3, [pc, #388]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012462:	2104      	movs	r1, #4
 8012464:	430a      	orrs	r2, r1
 8012466:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801246a:	3903      	subs	r1, #3
 801246c:	430a      	orrs	r2, r1
 801246e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012470:	f7fe f964 	bl	801073c <HAL_GetTick>
 8012474:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012476:	4f5b      	ldr	r7, [pc, #364]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012478:	2602      	movs	r6, #2
 801247a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801247c:	421e      	tst	r6, r3
 801247e:	d106      	bne.n	801248e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012480:	f7fe f95c 	bl	801073c <HAL_GetTick>
 8012484:	1b40      	subs	r0, r0, r5
 8012486:	2864      	cmp	r0, #100	; 0x64
 8012488:	d9f7      	bls.n	801247a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 801248a:	2003      	movs	r0, #3
 801248c:	e625      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 801248e:	4955      	ldr	r1, [pc, #340]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012490:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8012492:	69a3      	ldr	r3, [r4, #24]
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	20f8      	movs	r0, #248	; 0xf8
 8012498:	4382      	bics	r2, r0
 801249a:	4313      	orrs	r3, r2
 801249c:	634b      	str	r3, [r1, #52]	; 0x34
 801249e:	e71e      	b.n	80122de <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80124a0:	4b50      	ldr	r3, [pc, #320]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80124a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124a4:	2104      	movs	r1, #4
 80124a6:	430a      	orrs	r2, r1
 80124a8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80124aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124ac:	3903      	subs	r1, #3
 80124ae:	438a      	bics	r2, r1
 80124b0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80124b2:	f7fe f943 	bl	801073c <HAL_GetTick>
 80124b6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80124b8:	4f4a      	ldr	r7, [pc, #296]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80124ba:	2602      	movs	r6, #2
 80124bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124be:	421e      	tst	r6, r3
 80124c0:	d100      	bne.n	80124c4 <HAL_RCC_OscConfig+0x454>
 80124c2:	e70c      	b.n	80122de <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80124c4:	f7fe f93a 	bl	801073c <HAL_GetTick>
 80124c8:	1b40      	subs	r0, r0, r5
 80124ca:	2864      	cmp	r0, #100	; 0x64
 80124cc:	d9f6      	bls.n	80124bc <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80124ce:	2003      	movs	r0, #3
 80124d0:	e603      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80124d2:	4b44      	ldr	r3, [pc, #272]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	22c0      	movs	r2, #192	; 0xc0
 80124d8:	0252      	lsls	r2, r2, #9
 80124da:	4013      	ands	r3, r2
 80124dc:	4293      	cmp	r3, r2
 80124de:	d000      	beq.n	80124e2 <HAL_RCC_OscConfig+0x472>
 80124e0:	e70f      	b.n	8012302 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80124e2:	4b40      	ldr	r3, [pc, #256]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80124e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124e6:	03db      	lsls	r3, r3, #15
 80124e8:	d504      	bpl.n	80124f4 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 80124ea:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80124ec:	69e3      	ldr	r3, [r4, #28]
 80124ee:	2b01      	cmp	r3, #1
 80124f0:	d000      	beq.n	80124f4 <HAL_RCC_OscConfig+0x484>
 80124f2:	e5f2      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80124f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80124f6:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d100      	bne.n	80124fe <HAL_RCC_OscConfig+0x48e>
 80124fc:	e5ed      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80124fe:	4a39      	ldr	r2, [pc, #228]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012500:	6851      	ldr	r1, [r2, #4]
 8012502:	220c      	movs	r2, #12
 8012504:	400a      	ands	r2, r1
 8012506:	2a08      	cmp	r2, #8
 8012508:	d06a      	beq.n	80125e0 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801250a:	2b02      	cmp	r3, #2
 801250c:	d029      	beq.n	8012562 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801250e:	4a35      	ldr	r2, [pc, #212]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012510:	6813      	ldr	r3, [r2, #0]
 8012512:	4936      	ldr	r1, [pc, #216]	; (80125ec <HAL_RCC_OscConfig+0x57c>)
 8012514:	400b      	ands	r3, r1
 8012516:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012518:	f7fe f910 	bl	801073c <HAL_GetTick>
 801251c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801251e:	4e31      	ldr	r6, [pc, #196]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012520:	2580      	movs	r5, #128	; 0x80
 8012522:	04ad      	lsls	r5, r5, #18
 8012524:	6833      	ldr	r3, [r6, #0]
 8012526:	422b      	tst	r3, r5
 8012528:	d056      	beq.n	80125d8 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801252a:	f7fe f907 	bl	801073c <HAL_GetTick>
 801252e:	1b00      	subs	r0, r0, r4
 8012530:	2864      	cmp	r0, #100	; 0x64
 8012532:	d9f7      	bls.n	8012524 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012534:	2003      	movs	r0, #3
 8012536:	e5d0      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012538:	4a2a      	ldr	r2, [pc, #168]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 801253a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801253c:	492c      	ldr	r1, [pc, #176]	; (80125f0 <HAL_RCC_OscConfig+0x580>)
 801253e:	400b      	ands	r3, r1
 8012540:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012542:	f7fe f8fb 	bl	801073c <HAL_GetTick>
 8012546:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012548:	4f26      	ldr	r7, [pc, #152]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 801254a:	2680      	movs	r6, #128	; 0x80
 801254c:	0276      	lsls	r6, r6, #9
 801254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012550:	4233      	tst	r3, r6
 8012552:	d0cf      	beq.n	80124f4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012554:	f7fe f8f2 	bl	801073c <HAL_GetTick>
 8012558:	1b40      	subs	r0, r0, r5
 801255a:	2864      	cmp	r0, #100	; 0x64
 801255c:	d9f7      	bls.n	801254e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801255e:	2003      	movs	r0, #3
 8012560:	e5bb      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012562:	4a20      	ldr	r2, [pc, #128]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012564:	6813      	ldr	r3, [r2, #0]
 8012566:	4921      	ldr	r1, [pc, #132]	; (80125ec <HAL_RCC_OscConfig+0x57c>)
 8012568:	400b      	ands	r3, r1
 801256a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801256c:	f7fe f8e6 	bl	801073c <HAL_GetTick>
 8012570:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012572:	4f1c      	ldr	r7, [pc, #112]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 8012574:	2680      	movs	r6, #128	; 0x80
 8012576:	04b6      	lsls	r6, r6, #18
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	4233      	tst	r3, r6
 801257c:	d006      	beq.n	801258c <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801257e:	f7fe f8dd 	bl	801073c <HAL_GetTick>
 8012582:	1b40      	subs	r0, r0, r5
 8012584:	2864      	cmp	r0, #100	; 0x64
 8012586:	d9f7      	bls.n	8012578 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012588:	2003      	movs	r0, #3
 801258a:	e5a6      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801258c:	4b15      	ldr	r3, [pc, #84]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 801258e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012590:	210f      	movs	r1, #15
 8012592:	438a      	bics	r2, r1
 8012594:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012596:	430a      	orrs	r2, r1
 8012598:	62da      	str	r2, [r3, #44]	; 0x2c
 801259a:	6859      	ldr	r1, [r3, #4]
 801259c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801259e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80125a0:	4302      	orrs	r2, r0
 80125a2:	4814      	ldr	r0, [pc, #80]	; (80125f4 <HAL_RCC_OscConfig+0x584>)
 80125a4:	4001      	ands	r1, r0
 80125a6:	430a      	orrs	r2, r1
 80125a8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80125aa:	6819      	ldr	r1, [r3, #0]
 80125ac:	2280      	movs	r2, #128	; 0x80
 80125ae:	0452      	lsls	r2, r2, #17
 80125b0:	430a      	orrs	r2, r1
 80125b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80125b4:	f7fe f8c2 	bl	801073c <HAL_GetTick>
 80125b8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80125ba:	4e0a      	ldr	r6, [pc, #40]	; (80125e4 <HAL_RCC_OscConfig+0x574>)
 80125bc:	2580      	movs	r5, #128	; 0x80
 80125be:	04ad      	lsls	r5, r5, #18
 80125c0:	6833      	ldr	r3, [r6, #0]
 80125c2:	422b      	tst	r3, r5
 80125c4:	d106      	bne.n	80125d4 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80125c6:	f7fe f8b9 	bl	801073c <HAL_GetTick>
 80125ca:	1b00      	subs	r0, r0, r4
 80125cc:	2864      	cmp	r0, #100	; 0x64
 80125ce:	d9f7      	bls.n	80125c0 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80125d0:	2003      	movs	r0, #3
 80125d2:	e582      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80125d4:	2000      	movs	r0, #0
 80125d6:	e580      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
 80125d8:	2000      	movs	r0, #0
 80125da:	e57e      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 80125dc:	2001      	movs	r0, #1
 80125de:	e57c      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80125e0:	2001      	movs	r0, #1
 80125e2:	e57a      	b.n	80120da <HAL_RCC_OscConfig+0x6a>
 80125e4:	40021000 	.word	0x40021000
 80125e8:	00001388 	.word	0x00001388
 80125ec:	feffffff 	.word	0xfeffffff
 80125f0:	fffeffff 	.word	0xfffeffff
 80125f4:	ffc27fff 	.word	0xffc27fff

080125f8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80125f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125fa:	46ce      	mov	lr, r9
 80125fc:	4647      	mov	r7, r8
 80125fe:	b580      	push	{r7, lr}
 8012600:	0004      	movs	r4, r0
 8012602:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012604:	4b96      	ldr	r3, [pc, #600]	; (8012860 <HAL_RCC_ClockConfig+0x268>)
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	2301      	movs	r3, #1
 801260a:	4013      	ands	r3, r2
 801260c:	428b      	cmp	r3, r1
 801260e:	d300      	bcc.n	8012612 <HAL_RCC_ClockConfig+0x1a>
 8012610:	e086      	b.n	8012720 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012612:	4993      	ldr	r1, [pc, #588]	; (8012860 <HAL_RCC_ClockConfig+0x268>)
 8012614:	680b      	ldr	r3, [r1, #0]
 8012616:	2201      	movs	r2, #1
 8012618:	4393      	bics	r3, r2
 801261a:	432b      	orrs	r3, r5
 801261c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801261e:	680b      	ldr	r3, [r1, #0]
 8012620:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012622:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012624:	42aa      	cmp	r2, r5
 8012626:	d000      	beq.n	801262a <HAL_RCC_ClockConfig+0x32>
 8012628:	e111      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801262a:	6823      	ldr	r3, [r4, #0]
 801262c:	079b      	lsls	r3, r3, #30
 801262e:	d506      	bpl.n	801263e <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012630:	4a8c      	ldr	r2, [pc, #560]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012632:	6853      	ldr	r3, [r2, #4]
 8012634:	21f0      	movs	r1, #240	; 0xf0
 8012636:	438b      	bics	r3, r1
 8012638:	68a1      	ldr	r1, [r4, #8]
 801263a:	430b      	orrs	r3, r1
 801263c:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801263e:	6823      	ldr	r3, [r4, #0]
 8012640:	07db      	lsls	r3, r3, #31
 8012642:	d400      	bmi.n	8012646 <HAL_RCC_ClockConfig+0x4e>
 8012644:	e0f5      	b.n	8012832 <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012646:	6862      	ldr	r2, [r4, #4]
 8012648:	2a01      	cmp	r2, #1
 801264a:	d009      	beq.n	8012660 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801264c:	2a02      	cmp	r2, #2
 801264e:	d02b      	beq.n	80126a8 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012650:	2a03      	cmp	r2, #3
 8012652:	d02f      	beq.n	80126b4 <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012654:	4b83      	ldr	r3, [pc, #524]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	079b      	lsls	r3, r3, #30
 801265a:	d406      	bmi.n	801266a <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 801265c:	2001      	movs	r0, #1
 801265e:	e0f6      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012660:	4b80      	ldr	r3, [pc, #512]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	039b      	lsls	r3, r3, #14
 8012666:	d400      	bmi.n	801266a <HAL_RCC_ClockConfig+0x72>
 8012668:	e0f5      	b.n	8012856 <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801266a:	497e      	ldr	r1, [pc, #504]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 801266c:	684b      	ldr	r3, [r1, #4]
 801266e:	2003      	movs	r0, #3
 8012670:	4383      	bics	r3, r0
 8012672:	4313      	orrs	r3, r2
 8012674:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012676:	f7fe f861 	bl	801073c <HAL_GetTick>
 801267a:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801267c:	6863      	ldr	r3, [r4, #4]
 801267e:	2b01      	cmp	r3, #1
 8012680:	d01e      	beq.n	80126c0 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012682:	2b02      	cmp	r3, #2
 8012684:	d02c      	beq.n	80126e0 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012686:	2b03      	cmp	r3, #3
 8012688:	d03a      	beq.n	8012700 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801268a:	4f76      	ldr	r7, [pc, #472]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 801268c:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801268e:	4b76      	ldr	r3, [pc, #472]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 8012690:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	421e      	tst	r6, r3
 8012696:	d100      	bne.n	801269a <HAL_RCC_ClockConfig+0xa2>
 8012698:	e0cb      	b.n	8012832 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801269a:	f7fe f84f 	bl	801073c <HAL_GetTick>
 801269e:	1b40      	subs	r0, r0, r5
 80126a0:	4540      	cmp	r0, r8
 80126a2:	d9f6      	bls.n	8012692 <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 80126a4:	2003      	movs	r0, #3
 80126a6:	e0d2      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126a8:	4b6e      	ldr	r3, [pc, #440]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	019b      	lsls	r3, r3, #6
 80126ae:	d4dc      	bmi.n	801266a <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80126b0:	2001      	movs	r0, #1
 80126b2:	e0cc      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126b4:	4b6b      	ldr	r3, [pc, #428]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80126b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126b8:	03db      	lsls	r3, r3, #15
 80126ba:	d4d6      	bmi.n	801266a <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 80126bc:	2001      	movs	r0, #1
 80126be:	e0c6      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80126c0:	4f68      	ldr	r7, [pc, #416]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80126c2:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126c4:	4b68      	ldr	r3, [pc, #416]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 80126c6:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4033      	ands	r3, r6
 80126cc:	2b04      	cmp	r3, #4
 80126ce:	d100      	bne.n	80126d2 <HAL_RCC_ClockConfig+0xda>
 80126d0:	e0af      	b.n	8012832 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126d2:	f7fe f833 	bl	801073c <HAL_GetTick>
 80126d6:	1b40      	subs	r0, r0, r5
 80126d8:	4540      	cmp	r0, r8
 80126da:	d9f5      	bls.n	80126c8 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 80126dc:	2003      	movs	r0, #3
 80126de:	e0b6      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80126e0:	4f60      	ldr	r7, [pc, #384]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80126e2:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126e4:	4b60      	ldr	r3, [pc, #384]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 80126e6:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	4033      	ands	r3, r6
 80126ec:	2b08      	cmp	r3, #8
 80126ee:	d100      	bne.n	80126f2 <HAL_RCC_ClockConfig+0xfa>
 80126f0:	e09f      	b.n	8012832 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126f2:	f7fe f823 	bl	801073c <HAL_GetTick>
 80126f6:	1b40      	subs	r0, r0, r5
 80126f8:	4540      	cmp	r0, r8
 80126fa:	d9f5      	bls.n	80126e8 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 80126fc:	2003      	movs	r0, #3
 80126fe:	e0a6      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012700:	4f58      	ldr	r7, [pc, #352]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012702:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012704:	4b58      	ldr	r3, [pc, #352]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 8012706:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	4033      	ands	r3, r6
 801270c:	2b0c      	cmp	r3, #12
 801270e:	d100      	bne.n	8012712 <HAL_RCC_ClockConfig+0x11a>
 8012710:	e08f      	b.n	8012832 <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012712:	f7fe f813 	bl	801073c <HAL_GetTick>
 8012716:	1b40      	subs	r0, r0, r5
 8012718:	4540      	cmp	r0, r8
 801271a:	d9f5      	bls.n	8012708 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 801271c:	2003      	movs	r0, #3
 801271e:	e096      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012720:	6803      	ldr	r3, [r0, #0]
 8012722:	079b      	lsls	r3, r3, #30
 8012724:	d506      	bpl.n	8012734 <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012726:	4a4f      	ldr	r2, [pc, #316]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012728:	6853      	ldr	r3, [r2, #4]
 801272a:	21f0      	movs	r1, #240	; 0xf0
 801272c:	438b      	bics	r3, r1
 801272e:	6881      	ldr	r1, [r0, #8]
 8012730:	430b      	orrs	r3, r1
 8012732:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012734:	6823      	ldr	r3, [r4, #0]
 8012736:	07db      	lsls	r3, r3, #31
 8012738:	d570      	bpl.n	801281c <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801273a:	6862      	ldr	r2, [r4, #4]
 801273c:	2a01      	cmp	r2, #1
 801273e:	d009      	beq.n	8012754 <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012740:	2a02      	cmp	r2, #2
 8012742:	d02c      	beq.n	801279e <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012744:	2a03      	cmp	r2, #3
 8012746:	d030      	beq.n	80127aa <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012748:	4b46      	ldr	r3, [pc, #280]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	079b      	lsls	r3, r3, #30
 801274e:	d406      	bmi.n	801275e <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8012750:	2001      	movs	r0, #1
 8012752:	e07c      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012754:	4b43      	ldr	r3, [pc, #268]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	039b      	lsls	r3, r3, #14
 801275a:	d400      	bmi.n	801275e <HAL_RCC_ClockConfig+0x166>
 801275c:	e07d      	b.n	801285a <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801275e:	4941      	ldr	r1, [pc, #260]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012760:	684b      	ldr	r3, [r1, #4]
 8012762:	2003      	movs	r0, #3
 8012764:	4383      	bics	r3, r0
 8012766:	4313      	orrs	r3, r2
 8012768:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801276a:	f7fd ffe7 	bl	801073c <HAL_GetTick>
 801276e:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012770:	6863      	ldr	r3, [r4, #4]
 8012772:	2b01      	cmp	r3, #1
 8012774:	d01f      	beq.n	80127b6 <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012776:	2b02      	cmp	r3, #2
 8012778:	d02e      	beq.n	80127d8 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801277a:	2b03      	cmp	r3, #3
 801277c:	d03d      	beq.n	80127fa <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801277e:	4b39      	ldr	r3, [pc, #228]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 8012780:	4698      	mov	r8, r3
 8012782:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012784:	4b38      	ldr	r3, [pc, #224]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 8012786:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012788:	4643      	mov	r3, r8
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	421f      	tst	r7, r3
 801278e:	d045      	beq.n	801281c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012790:	f7fd ffd4 	bl	801073c <HAL_GetTick>
 8012794:	1b80      	subs	r0, r0, r6
 8012796:	4548      	cmp	r0, r9
 8012798:	d9f6      	bls.n	8012788 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 801279a:	2003      	movs	r0, #3
 801279c:	e057      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801279e:	4b31      	ldr	r3, [pc, #196]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	019b      	lsls	r3, r3, #6
 80127a4:	d4db      	bmi.n	801275e <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80127a6:	2001      	movs	r0, #1
 80127a8:	e051      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80127aa:	4b2e      	ldr	r3, [pc, #184]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80127ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ae:	03db      	lsls	r3, r3, #15
 80127b0:	d4d5      	bmi.n	801275e <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 80127b2:	2001      	movs	r0, #1
 80127b4:	e04b      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80127b6:	4b2b      	ldr	r3, [pc, #172]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80127b8:	4698      	mov	r8, r3
 80127ba:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127bc:	4b2a      	ldr	r3, [pc, #168]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 80127be:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80127c0:	4643      	mov	r3, r8
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	403b      	ands	r3, r7
 80127c6:	2b04      	cmp	r3, #4
 80127c8:	d028      	beq.n	801281c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127ca:	f7fd ffb7 	bl	801073c <HAL_GetTick>
 80127ce:	1b80      	subs	r0, r0, r6
 80127d0:	4548      	cmp	r0, r9
 80127d2:	d9f5      	bls.n	80127c0 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 80127d4:	2003      	movs	r0, #3
 80127d6:	e03a      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80127d8:	4b22      	ldr	r3, [pc, #136]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80127da:	4698      	mov	r8, r3
 80127dc:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127de:	4b22      	ldr	r3, [pc, #136]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 80127e0:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80127e2:	4643      	mov	r3, r8
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	403b      	ands	r3, r7
 80127e8:	2b08      	cmp	r3, #8
 80127ea:	d017      	beq.n	801281c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80127ec:	f7fd ffa6 	bl	801073c <HAL_GetTick>
 80127f0:	1b80      	subs	r0, r0, r6
 80127f2:	4548      	cmp	r0, r9
 80127f4:	d9f5      	bls.n	80127e2 <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 80127f6:	2003      	movs	r0, #3
 80127f8:	e029      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80127fa:	4b1a      	ldr	r3, [pc, #104]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 80127fc:	4698      	mov	r8, r3
 80127fe:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012800:	4b19      	ldr	r3, [pc, #100]	; (8012868 <HAL_RCC_ClockConfig+0x270>)
 8012802:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012804:	4643      	mov	r3, r8
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	403b      	ands	r3, r7
 801280a:	2b0c      	cmp	r3, #12
 801280c:	d006      	beq.n	801281c <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801280e:	f7fd ff95 	bl	801073c <HAL_GetTick>
 8012812:	1b80      	subs	r0, r0, r6
 8012814:	4548      	cmp	r0, r9
 8012816:	d9f5      	bls.n	8012804 <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8012818:	2003      	movs	r0, #3
 801281a:	e018      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801281c:	4910      	ldr	r1, [pc, #64]	; (8012860 <HAL_RCC_ClockConfig+0x268>)
 801281e:	680b      	ldr	r3, [r1, #0]
 8012820:	2201      	movs	r2, #1
 8012822:	4393      	bics	r3, r2
 8012824:	432b      	orrs	r3, r5
 8012826:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012828:	680b      	ldr	r3, [r1, #0]
 801282a:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801282c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801282e:	42aa      	cmp	r2, r5
 8012830:	d10d      	bne.n	801284e <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012832:	6823      	ldr	r3, [r4, #0]
 8012834:	075b      	lsls	r3, r3, #29
 8012836:	d506      	bpl.n	8012846 <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012838:	4a0a      	ldr	r2, [pc, #40]	; (8012864 <HAL_RCC_ClockConfig+0x26c>)
 801283a:	6853      	ldr	r3, [r2, #4]
 801283c:	490b      	ldr	r1, [pc, #44]	; (801286c <HAL_RCC_ClockConfig+0x274>)
 801283e:	400b      	ands	r3, r1
 8012840:	68e1      	ldr	r1, [r4, #12]
 8012842:	430b      	orrs	r3, r1
 8012844:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8012846:	2000      	movs	r0, #0
 8012848:	f7fd ff4e 	bl	80106e8 <HAL_InitTick>
  
  return HAL_OK;
 801284c:	2000      	movs	r0, #0
}
 801284e:	bcc0      	pop	{r6, r7}
 8012850:	46b9      	mov	r9, r7
 8012852:	46b0      	mov	r8, r6
 8012854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8012856:	2001      	movs	r0, #1
 8012858:	e7f9      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 801285a:	2001      	movs	r0, #1
 801285c:	e7f7      	b.n	801284e <HAL_RCC_ClockConfig+0x256>
 801285e:	46c0      	nop			; (mov r8, r8)
 8012860:	40022000 	.word	0x40022000
 8012864:	40021000 	.word	0x40021000
 8012868:	00001388 	.word	0x00001388
 801286c:	fffff8ff 	.word	0xfffff8ff

08012870 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012870:	b510      	push	{r4, lr}
 8012872:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012874:	aa04      	add	r2, sp, #16
 8012876:	4b20      	ldr	r3, [pc, #128]	; (80128f8 <HAL_RCC_GetSysClockFreq+0x88>)
 8012878:	cb13      	ldmia	r3!, {r0, r1, r4}
 801287a:	c213      	stmia	r2!, {r0, r1, r4}
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012880:	466a      	mov	r2, sp
 8012882:	4b1e      	ldr	r3, [pc, #120]	; (80128fc <HAL_RCC_GetSysClockFreq+0x8c>)
 8012884:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012886:	c213      	stmia	r2!, {r0, r1, r4}
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801288c:	4b1c      	ldr	r3, [pc, #112]	; (8012900 <HAL_RCC_GetSysClockFreq+0x90>)
 801288e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012890:	200c      	movs	r0, #12
 8012892:	4018      	ands	r0, r3
 8012894:	2808      	cmp	r0, #8
 8012896:	d00a      	beq.n	80128ae <HAL_RCC_GetSysClockFreq+0x3e>
 8012898:	380c      	subs	r0, #12
 801289a:	1e43      	subs	r3, r0, #1
 801289c:	4198      	sbcs	r0, r3
 801289e:	4240      	negs	r0, r0
 80128a0:	4b18      	ldr	r3, [pc, #96]	; (8012904 <HAL_RCC_GetSysClockFreq+0x94>)
 80128a2:	4018      	ands	r0, r3
 80128a4:	4b18      	ldr	r3, [pc, #96]	; (8012908 <HAL_RCC_GetSysClockFreq+0x98>)
 80128a6:	469c      	mov	ip, r3
 80128a8:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80128aa:	b008      	add	sp, #32
 80128ac:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80128ae:	0c99      	lsrs	r1, r3, #18
 80128b0:	220f      	movs	r2, #15
 80128b2:	4011      	ands	r1, r2
 80128b4:	a804      	add	r0, sp, #16
 80128b6:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80128b8:	4911      	ldr	r1, [pc, #68]	; (8012900 <HAL_RCC_GetSysClockFreq+0x90>)
 80128ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80128bc:	400a      	ands	r2, r1
 80128be:	4669      	mov	r1, sp
 80128c0:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80128c2:	22c0      	movs	r2, #192	; 0xc0
 80128c4:	0252      	lsls	r2, r2, #9
 80128c6:	4013      	ands	r3, r2
 80128c8:	2280      	movs	r2, #128	; 0x80
 80128ca:	0252      	lsls	r2, r2, #9
 80128cc:	4293      	cmp	r3, r2
 80128ce:	d008      	beq.n	80128e2 <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80128d0:	22c0      	movs	r2, #192	; 0xc0
 80128d2:	0252      	lsls	r2, r2, #9
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d009      	beq.n	80128ec <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80128d8:	480c      	ldr	r0, [pc, #48]	; (801290c <HAL_RCC_GetSysClockFreq+0x9c>)
 80128da:	f7ed fc39 	bl	8000150 <__udivsi3>
 80128de:	4360      	muls	r0, r4
 80128e0:	e7e3      	b.n	80128aa <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80128e2:	480a      	ldr	r0, [pc, #40]	; (801290c <HAL_RCC_GetSysClockFreq+0x9c>)
 80128e4:	f7ed fc34 	bl	8000150 <__udivsi3>
 80128e8:	4360      	muls	r0, r4
 80128ea:	e7de      	b.n	80128aa <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 80128ec:	4806      	ldr	r0, [pc, #24]	; (8012908 <HAL_RCC_GetSysClockFreq+0x98>)
 80128ee:	f7ed fc2f 	bl	8000150 <__udivsi3>
 80128f2:	4360      	muls	r0, r4
 80128f4:	e7d9      	b.n	80128aa <HAL_RCC_GetSysClockFreq+0x3a>
 80128f6:	46c0      	nop			; (mov r8, r8)
 80128f8:	0801b4cc 	.word	0x0801b4cc
 80128fc:	0801b4e0 	.word	0x0801b4e0
 8012900:	40021000 	.word	0x40021000
 8012904:	fd9da600 	.word	0xfd9da600
 8012908:	02dc6c00 	.word	0x02dc6c00
 801290c:	007a1200 	.word	0x007a1200

08012910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012910:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012912:	f7ff ffad 	bl	8012870 <HAL_RCC_GetSysClockFreq>
 8012916:	4b05      	ldr	r3, [pc, #20]	; (801292c <HAL_RCC_GetHCLKFreq+0x1c>)
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	061b      	lsls	r3, r3, #24
 801291c:	0f1b      	lsrs	r3, r3, #28
 801291e:	4a04      	ldr	r2, [pc, #16]	; (8012930 <HAL_RCC_GetHCLKFreq+0x20>)
 8012920:	5cd3      	ldrb	r3, [r2, r3]
 8012922:	40d8      	lsrs	r0, r3
 8012924:	4b03      	ldr	r3, [pc, #12]	; (8012934 <HAL_RCC_GetHCLKFreq+0x24>)
 8012926:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012928:	bd10      	pop	{r4, pc}
 801292a:	46c0      	nop			; (mov r8, r8)
 801292c:	40021000 	.word	0x40021000
 8012930:	0801b4f4 	.word	0x0801b4f4
 8012934:	200000a8 	.word	0x200000a8

08012938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012938:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801293a:	f7ff ffe9 	bl	8012910 <HAL_RCC_GetHCLKFreq>
 801293e:	4b04      	ldr	r3, [pc, #16]	; (8012950 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012940:	685b      	ldr	r3, [r3, #4]
 8012942:	055b      	lsls	r3, r3, #21
 8012944:	0f5b      	lsrs	r3, r3, #29
 8012946:	4a03      	ldr	r2, [pc, #12]	; (8012954 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012948:	5cd3      	ldrb	r3, [r2, r3]
 801294a:	40d8      	lsrs	r0, r3
}    
 801294c:	bd10      	pop	{r4, pc}
 801294e:	46c0      	nop			; (mov r8, r8)
 8012950:	40021000 	.word	0x40021000
 8012954:	0801b4f4 	.word	0x0801b4f4

08012958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295a:	46c6      	mov	lr, r8
 801295c:	b500      	push	{lr}
 801295e:	b082      	sub	sp, #8
 8012960:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012962:	6803      	ldr	r3, [r0, #0]
 8012964:	03db      	lsls	r3, r3, #15
 8012966:	d507      	bpl.n	8012978 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012968:	4b43      	ldr	r3, [pc, #268]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801296a:	6a1b      	ldr	r3, [r3, #32]
 801296c:	6842      	ldr	r2, [r0, #4]
 801296e:	4053      	eors	r3, r2
 8012970:	22c0      	movs	r2, #192	; 0xc0
 8012972:	0092      	lsls	r2, r2, #2
 8012974:	4213      	tst	r3, r2
 8012976:	d136      	bne.n	80129e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012978:	6823      	ldr	r3, [r4, #0]
 801297a:	07db      	lsls	r3, r3, #31
 801297c:	d506      	bpl.n	801298c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801297e:	4a3e      	ldr	r2, [pc, #248]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012980:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012982:	2103      	movs	r1, #3
 8012984:	438b      	bics	r3, r1
 8012986:	68a1      	ldr	r1, [r4, #8]
 8012988:	430b      	orrs	r3, r1
 801298a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801298c:	6823      	ldr	r3, [r4, #0]
 801298e:	079b      	lsls	r3, r3, #30
 8012990:	d506      	bpl.n	80129a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012992:	4a39      	ldr	r2, [pc, #228]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012994:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012996:	4939      	ldr	r1, [pc, #228]	; (8012a7c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012998:	400b      	ands	r3, r1
 801299a:	68e1      	ldr	r1, [r4, #12]
 801299c:	430b      	orrs	r3, r1
 801299e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80129a0:	6823      	ldr	r3, [r4, #0]
 80129a2:	035b      	lsls	r3, r3, #13
 80129a4:	d506      	bpl.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80129a6:	4a34      	ldr	r2, [pc, #208]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80129a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80129aa:	4935      	ldr	r1, [pc, #212]	; (8012a80 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80129ac:	400b      	ands	r3, r1
 80129ae:	6921      	ldr	r1, [r4, #16]
 80129b0:	430b      	orrs	r3, r1
 80129b2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	069b      	lsls	r3, r3, #26
 80129b8:	d506      	bpl.n	80129c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80129ba:	4a2f      	ldr	r2, [pc, #188]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80129bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80129be:	2110      	movs	r1, #16
 80129c0:	438b      	bics	r3, r1
 80129c2:	6961      	ldr	r1, [r4, #20]
 80129c4:	430b      	orrs	r3, r1
 80129c6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80129c8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80129ca:	6823      	ldr	r3, [r4, #0]
 80129cc:	055b      	lsls	r3, r3, #21
 80129ce:	d506      	bpl.n	80129de <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80129d0:	4a29      	ldr	r2, [pc, #164]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80129d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80129d4:	2140      	movs	r1, #64	; 0x40
 80129d6:	438b      	bics	r3, r1
 80129d8:	69a1      	ldr	r1, [r4, #24]
 80129da:	430b      	orrs	r3, r1
 80129dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80129de:	b002      	add	sp, #8
 80129e0:	bc80      	pop	{r7}
 80129e2:	46b8      	mov	r8, r7
 80129e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80129e6:	4a24      	ldr	r2, [pc, #144]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80129e8:	69d1      	ldr	r1, [r2, #28]
 80129ea:	2080      	movs	r0, #128	; 0x80
 80129ec:	0540      	lsls	r0, r0, #21
 80129ee:	4301      	orrs	r1, r0
 80129f0:	61d1      	str	r1, [r2, #28]
 80129f2:	69d3      	ldr	r3, [r2, #28]
 80129f4:	4003      	ands	r3, r0
 80129f6:	9301      	str	r3, [sp, #4]
 80129f8:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80129fa:	4a22      	ldr	r2, [pc, #136]	; (8012a84 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80129fc:	6811      	ldr	r1, [r2, #0]
 80129fe:	2380      	movs	r3, #128	; 0x80
 8012a00:	005b      	lsls	r3, r3, #1
 8012a02:	430b      	orrs	r3, r1
 8012a04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012a06:	f7fd fe99 	bl	801073c <HAL_GetTick>
 8012a0a:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012a0c:	4f1d      	ldr	r7, [pc, #116]	; (8012a84 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012a0e:	2680      	movs	r6, #128	; 0x80
 8012a10:	0076      	lsls	r6, r6, #1
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	4233      	tst	r3, r6
 8012a16:	d106      	bne.n	8012a26 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012a18:	f7fd fe90 	bl	801073c <HAL_GetTick>
 8012a1c:	1b40      	subs	r0, r0, r5
 8012a1e:	2864      	cmp	r0, #100	; 0x64
 8012a20:	d9f7      	bls.n	8012a12 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012a22:	2003      	movs	r0, #3
 8012a24:	e7db      	b.n	80129de <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012a26:	4b14      	ldr	r3, [pc, #80]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012a28:	6a18      	ldr	r0, [r3, #32]
 8012a2a:	4a17      	ldr	r2, [pc, #92]	; (8012a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012a2c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012a2e:	6a1d      	ldr	r5, [r3, #32]
 8012a30:	2180      	movs	r1, #128	; 0x80
 8012a32:	0249      	lsls	r1, r1, #9
 8012a34:	4329      	orrs	r1, r5
 8012a36:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012a38:	6a19      	ldr	r1, [r3, #32]
 8012a3a:	4d14      	ldr	r5, [pc, #80]	; (8012a8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012a3c:	4029      	ands	r1, r5
 8012a3e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012a40:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012a42:	0783      	lsls	r3, r0, #30
 8012a44:	d407      	bmi.n	8012a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012a46:	4a0c      	ldr	r2, [pc, #48]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012a48:	6a13      	ldr	r3, [r2, #32]
 8012a4a:	490f      	ldr	r1, [pc, #60]	; (8012a88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012a4c:	400b      	ands	r3, r1
 8012a4e:	6861      	ldr	r1, [r4, #4]
 8012a50:	430b      	orrs	r3, r1
 8012a52:	6213      	str	r3, [r2, #32]
 8012a54:	e790      	b.n	8012978 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012a56:	f7fd fe71 	bl	801073c <HAL_GetTick>
 8012a5a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a5c:	4f06      	ldr	r7, [pc, #24]	; (8012a78 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012a5e:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012a60:	4b0b      	ldr	r3, [pc, #44]	; (8012a90 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8012a62:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012a64:	6a3b      	ldr	r3, [r7, #32]
 8012a66:	421e      	tst	r6, r3
 8012a68:	d1ed      	bne.n	8012a46 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012a6a:	f7fd fe67 	bl	801073c <HAL_GetTick>
 8012a6e:	1b40      	subs	r0, r0, r5
 8012a70:	4540      	cmp	r0, r8
 8012a72:	d9f7      	bls.n	8012a64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 8012a74:	2003      	movs	r0, #3
 8012a76:	e7b2      	b.n	80129de <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012a78:	40021000 	.word	0x40021000
 8012a7c:	fffcffff 	.word	0xfffcffff
 8012a80:	fff3ffff 	.word	0xfff3ffff
 8012a84:	40007000 	.word	0x40007000
 8012a88:	fffffcff 	.word	0xfffffcff
 8012a8c:	fffeffff 	.word	0xfffeffff
 8012a90:	00001388 	.word	0x00001388

08012a94 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012a94:	4770      	bx	lr

08012a96 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a98:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012a9a:	6802      	ldr	r2, [r0, #0]
 8012a9c:	68d3      	ldr	r3, [r2, #12]
 8012a9e:	21a0      	movs	r1, #160	; 0xa0
 8012aa0:	438b      	bics	r3, r1
 8012aa2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012aa4:	f7fd fe4a 	bl	801073c <HAL_GetTick>
 8012aa8:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012aaa:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012aac:	27fa      	movs	r7, #250	; 0xfa
 8012aae:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012ab0:	6823      	ldr	r3, [r4, #0]
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	421e      	tst	r6, r3
 8012ab6:	d106      	bne.n	8012ac6 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012ab8:	f7fd fe40 	bl	801073c <HAL_GetTick>
 8012abc:	1b40      	subs	r0, r0, r5
 8012abe:	42b8      	cmp	r0, r7
 8012ac0:	d9f6      	bls.n	8012ab0 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012ac2:	2003      	movs	r0, #3
 8012ac4:	e000      	b.n	8012ac8 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012ac6:	2000      	movs	r0, #0
}
 8012ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012aca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012acc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ace:	6803      	ldr	r3, [r0, #0]
 8012ad0:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012ad2:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ad4:	0652      	lsls	r2, r2, #25
 8012ad6:	d500      	bpl.n	8012ada <RTC_EnterInitMode+0x10>
}
 8012ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8012ada:	2201      	movs	r2, #1
 8012adc:	4252      	negs	r2, r2
 8012ade:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8012ae0:	f7fd fe2c 	bl	801073c <HAL_GetTick>
 8012ae4:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ae6:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012ae8:	27fa      	movs	r7, #250	; 0xfa
 8012aea:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	68db      	ldr	r3, [r3, #12]
 8012af0:	421e      	tst	r6, r3
 8012af2:	d106      	bne.n	8012b02 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012af4:	f7fd fe22 	bl	801073c <HAL_GetTick>
 8012af8:	1b40      	subs	r0, r0, r5
 8012afa:	42b8      	cmp	r0, r7
 8012afc:	d9f6      	bls.n	8012aec <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012afe:	2003      	movs	r0, #3
 8012b00:	e7ea      	b.n	8012ad8 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012b02:	2000      	movs	r0, #0
 8012b04:	e7e8      	b.n	8012ad8 <RTC_EnterInitMode+0xe>
	...

08012b08 <HAL_RTC_Init>:
{
 8012b08:	b570      	push	{r4, r5, r6, lr}
 8012b0a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012b0c:	d046      	beq.n	8012b9c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012b0e:	7f43      	ldrb	r3, [r0, #29]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d013      	beq.n	8012b3c <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012b14:	2302      	movs	r3, #2
 8012b16:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	22ca      	movs	r2, #202	; 0xca
 8012b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	3a77      	subs	r2, #119	; 0x77
 8012b22:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012b24:	0020      	movs	r0, r4
 8012b26:	f7ff ffd0 	bl	8012aca <RTC_EnterInitMode>
 8012b2a:	2800      	cmp	r0, #0
 8012b2c:	d00a      	beq.n	8012b44 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	22ff      	movs	r2, #255	; 0xff
 8012b32:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012b34:	2304      	movs	r3, #4
 8012b36:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012b38:	2001      	movs	r0, #1
}
 8012b3a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012b3c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012b3e:	f7ff ffa9 	bl	8012a94 <HAL_RTC_MspInit>
 8012b42:	e7e7      	b.n	8012b14 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012b44:	6822      	ldr	r2, [r4, #0]
 8012b46:	6893      	ldr	r3, [r2, #8]
 8012b48:	4915      	ldr	r1, [pc, #84]	; (8012ba0 <HAL_RTC_Init+0x98>)
 8012b4a:	400b      	ands	r3, r1
 8012b4c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012b4e:	6822      	ldr	r2, [r4, #0]
 8012b50:	6891      	ldr	r1, [r2, #8]
 8012b52:	6863      	ldr	r3, [r4, #4]
 8012b54:	6925      	ldr	r5, [r4, #16]
 8012b56:	432b      	orrs	r3, r5
 8012b58:	6965      	ldr	r5, [r4, #20]
 8012b5a:	432b      	orrs	r3, r5
 8012b5c:	430b      	orrs	r3, r1
 8012b5e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	68e2      	ldr	r2, [r4, #12]
 8012b64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012b66:	6822      	ldr	r2, [r4, #0]
 8012b68:	6911      	ldr	r1, [r2, #16]
 8012b6a:	68a3      	ldr	r3, [r4, #8]
 8012b6c:	041b      	lsls	r3, r3, #16
 8012b6e:	430b      	orrs	r3, r1
 8012b70:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012b72:	6822      	ldr	r2, [r4, #0]
 8012b74:	68d3      	ldr	r3, [r2, #12]
 8012b76:	2180      	movs	r1, #128	; 0x80
 8012b78:	438b      	bics	r3, r1
 8012b7a:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012b7c:	6822      	ldr	r2, [r4, #0]
 8012b7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012b80:	4908      	ldr	r1, [pc, #32]	; (8012ba4 <HAL_RTC_Init+0x9c>)
 8012b82:	400b      	ands	r3, r1
 8012b84:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012b86:	6822      	ldr	r2, [r4, #0]
 8012b88:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012b8a:	69a1      	ldr	r1, [r4, #24]
 8012b8c:	430b      	orrs	r3, r1
 8012b8e:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012b90:	6823      	ldr	r3, [r4, #0]
 8012b92:	22ff      	movs	r2, #255	; 0xff
 8012b94:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012b96:	2301      	movs	r3, #1
 8012b98:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8012b9a:	e7ce      	b.n	8012b3a <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 8012b9c:	2001      	movs	r0, #1
 8012b9e:	e7cc      	b.n	8012b3a <HAL_RTC_Init+0x32>
 8012ba0:	ff8fffbf 	.word	0xff8fffbf
 8012ba4:	fffbffff 	.word	0xfffbffff

08012ba8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012ba8:	2809      	cmp	r0, #9
 8012baa:	d909      	bls.n	8012bc0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012bac:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012bae:	3301      	adds	r3, #1
    Value -= 10;
 8012bb0:	380a      	subs	r0, #10
 8012bb2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012bb4:	2809      	cmp	r0, #9
 8012bb6:	d8fa      	bhi.n	8012bae <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012bb8:	011b      	lsls	r3, r3, #4
 8012bba:	4318      	orrs	r0, r3
 8012bbc:	b2c0      	uxtb	r0, r0
}
 8012bbe:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	e7f9      	b.n	8012bb8 <RTC_ByteToBcd2+0x10>

08012bc4 <HAL_RTC_SetTime>:
{
 8012bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bc6:	0004      	movs	r4, r0
 8012bc8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012bca:	7f03      	ldrb	r3, [r0, #28]
 8012bcc:	2b01      	cmp	r3, #1
 8012bce:	d100      	bne.n	8012bd2 <HAL_RTC_SetTime+0xe>
 8012bd0:	e072      	b.n	8012cb8 <HAL_RTC_SetTime+0xf4>
 8012bd2:	2301      	movs	r3, #1
 8012bd4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012bda:	2a00      	cmp	r2, #0
 8012bdc:	d144      	bne.n	8012c68 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012bde:	6803      	ldr	r3, [r0, #0]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	065b      	lsls	r3, r3, #25
 8012be4:	d401      	bmi.n	8012bea <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 8012be6:	2300      	movs	r3, #0
 8012be8:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012bea:	7830      	ldrb	r0, [r6, #0]
 8012bec:	f7ff ffdc 	bl	8012ba8 <RTC_ByteToBcd2>
 8012bf0:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012bf2:	7870      	ldrb	r0, [r6, #1]
 8012bf4:	f7ff ffd8 	bl	8012ba8 <RTC_ByteToBcd2>
 8012bf8:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012bfa:	78b0      	ldrb	r0, [r6, #2]
 8012bfc:	f7ff ffd4 	bl	8012ba8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012c00:	7a33      	ldrb	r3, [r6, #8]
 8012c02:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012c04:	4303      	orrs	r3, r0
 8012c06:	042d      	lsls	r5, r5, #16
 8012c08:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012c0a:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012c0c:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c0e:	6823      	ldr	r3, [r4, #0]
 8012c10:	22ca      	movs	r2, #202	; 0xca
 8012c12:	625a      	str	r2, [r3, #36]	; 0x24
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	3a77      	subs	r2, #119	; 0x77
 8012c18:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012c1a:	0020      	movs	r0, r4
 8012c1c:	f7ff ff55 	bl	8012aca <RTC_EnterInitMode>
 8012c20:	1e07      	subs	r7, r0, #0
 8012c22:	d132      	bne.n	8012c8a <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012c24:	6823      	ldr	r3, [r4, #0]
 8012c26:	4825      	ldr	r0, [pc, #148]	; (8012cbc <HAL_RTC_SetTime+0xf8>)
 8012c28:	4005      	ands	r5, r0
 8012c2a:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012c2c:	6822      	ldr	r2, [r4, #0]
 8012c2e:	6893      	ldr	r3, [r2, #8]
 8012c30:	4923      	ldr	r1, [pc, #140]	; (8012cc0 <HAL_RTC_SetTime+0xfc>)
 8012c32:	400b      	ands	r3, r1
 8012c34:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012c36:	6822      	ldr	r2, [r4, #0]
 8012c38:	6891      	ldr	r1, [r2, #8]
 8012c3a:	68f3      	ldr	r3, [r6, #12]
 8012c3c:	6930      	ldr	r0, [r6, #16]
 8012c3e:	4303      	orrs	r3, r0
 8012c40:	430b      	orrs	r3, r1
 8012c42:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012c44:	6822      	ldr	r2, [r4, #0]
 8012c46:	68d3      	ldr	r3, [r2, #12]
 8012c48:	2180      	movs	r1, #128	; 0x80
 8012c4a:	438b      	bics	r3, r1
 8012c4c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012c4e:	6823      	ldr	r3, [r4, #0]
 8012c50:	689b      	ldr	r3, [r3, #8]
 8012c52:	069b      	lsls	r3, r3, #26
 8012c54:	d522      	bpl.n	8012c9c <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c56:	6823      	ldr	r3, [r4, #0]
 8012c58:	22ff      	movs	r2, #255	; 0xff
 8012c5a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012c60:	2300      	movs	r3, #0
 8012c62:	7723      	strb	r3, [r4, #28]
}
 8012c64:	0038      	movs	r0, r7
 8012c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012c68:	6803      	ldr	r3, [r0, #0]
 8012c6a:	689b      	ldr	r3, [r3, #8]
 8012c6c:	065b      	lsls	r3, r3, #25
 8012c6e:	d401      	bmi.n	8012c74 <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8012c70:	2300      	movs	r3, #0
 8012c72:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012c74:	7835      	ldrb	r5, [r6, #0]
 8012c76:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012c78:	7870      	ldrb	r0, [r6, #1]
 8012c7a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012c7c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012c7e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012c80:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012c82:	7a30      	ldrb	r0, [r6, #8]
 8012c84:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012c86:	4305      	orrs	r5, r0
 8012c88:	e7c1      	b.n	8012c0e <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	22ff      	movs	r2, #255	; 0xff
 8012c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012c90:	2304      	movs	r3, #4
 8012c92:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012c94:	2300      	movs	r3, #0
 8012c96:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012c98:	2701      	movs	r7, #1
 8012c9a:	e7e3      	b.n	8012c64 <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012c9c:	0020      	movs	r0, r4
 8012c9e:	f7ff fefa 	bl	8012a96 <HAL_RTC_WaitForSynchro>
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	d0d7      	beq.n	8012c56 <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	22ff      	movs	r2, #255	; 0xff
 8012caa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012cac:	2304      	movs	r3, #4
 8012cae:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012cb4:	2701      	movs	r7, #1
 8012cb6:	e7d5      	b.n	8012c64 <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 8012cb8:	2702      	movs	r7, #2
 8012cba:	e7d3      	b.n	8012c64 <HAL_RTC_SetTime+0xa0>
 8012cbc:	007f7f7f 	.word	0x007f7f7f
 8012cc0:	fffbffff 	.word	0xfffbffff

08012cc4 <HAL_RTC_SetDate>:
{
 8012cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cc6:	46c6      	mov	lr, r8
 8012cc8:	b500      	push	{lr}
 8012cca:	0004      	movs	r4, r0
 8012ccc:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012cce:	7f03      	ldrb	r3, [r0, #28]
 8012cd0:	2b01      	cmp	r3, #1
 8012cd2:	d037      	beq.n	8012d44 <HAL_RTC_SetDate+0x80>
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012cd8:	3301      	adds	r3, #1
 8012cda:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012cdc:	2a00      	cmp	r2, #0
 8012cde:	d133      	bne.n	8012d48 <HAL_RTC_SetDate+0x84>
 8012ce0:	784b      	ldrb	r3, [r1, #1]
 8012ce2:	06da      	lsls	r2, r3, #27
 8012ce4:	d503      	bpl.n	8012cee <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012ce6:	2210      	movs	r2, #16
 8012ce8:	4393      	bics	r3, r2
 8012cea:	330a      	adds	r3, #10
 8012cec:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012cee:	78f0      	ldrb	r0, [r6, #3]
 8012cf0:	f7ff ff5a 	bl	8012ba8 <RTC_ByteToBcd2>
 8012cf4:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012cf6:	7870      	ldrb	r0, [r6, #1]
 8012cf8:	f7ff ff56 	bl	8012ba8 <RTC_ByteToBcd2>
 8012cfc:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012cfe:	78b0      	ldrb	r0, [r6, #2]
 8012d00:	f7ff ff52 	bl	8012ba8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012d04:	7833      	ldrb	r3, [r6, #0]
 8012d06:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012d08:	4303      	orrs	r3, r0
 8012d0a:	042d      	lsls	r5, r5, #16
 8012d0c:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012d0e:	4643      	mov	r3, r8
 8012d10:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012d12:	4305      	orrs	r5, r0
 8012d14:	e022      	b.n	8012d5c <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012d16:	6823      	ldr	r3, [r4, #0]
 8012d18:	22ff      	movs	r2, #255	; 0xff
 8012d1a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012d1c:	2304      	movs	r3, #4
 8012d1e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012d20:	2300      	movs	r3, #0
 8012d22:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012d24:	2601      	movs	r6, #1
 8012d26:	e038      	b.n	8012d9a <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012d28:	0020      	movs	r0, r4
 8012d2a:	f7ff feb4 	bl	8012a96 <HAL_RTC_WaitForSynchro>
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d02c      	beq.n	8012d8c <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	22ff      	movs	r2, #255	; 0xff
 8012d36:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012d38:	2304      	movs	r3, #4
 8012d3a:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012d40:	2601      	movs	r6, #1
 8012d42:	e02a      	b.n	8012d9a <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 8012d44:	2602      	movs	r6, #2
 8012d46:	e028      	b.n	8012d9a <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012d48:	78cd      	ldrb	r5, [r1, #3]
 8012d4a:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012d4c:	7848      	ldrb	r0, [r1, #1]
 8012d4e:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012d50:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012d52:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012d54:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012d56:	7808      	ldrb	r0, [r1, #0]
 8012d58:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012d5a:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	22ca      	movs	r2, #202	; 0xca
 8012d60:	625a      	str	r2, [r3, #36]	; 0x24
 8012d62:	6823      	ldr	r3, [r4, #0]
 8012d64:	3a77      	subs	r2, #119	; 0x77
 8012d66:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012d68:	0020      	movs	r0, r4
 8012d6a:	f7ff feae 	bl	8012aca <RTC_EnterInitMode>
 8012d6e:	1e06      	subs	r6, r0, #0
 8012d70:	d1d1      	bne.n	8012d16 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012d72:	6823      	ldr	r3, [r4, #0]
 8012d74:	480b      	ldr	r0, [pc, #44]	; (8012da4 <HAL_RTC_SetDate+0xe0>)
 8012d76:	4005      	ands	r5, r0
 8012d78:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012d7a:	6822      	ldr	r2, [r4, #0]
 8012d7c:	68d3      	ldr	r3, [r2, #12]
 8012d7e:	2180      	movs	r1, #128	; 0x80
 8012d80:	438b      	bics	r3, r1
 8012d82:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012d84:	6823      	ldr	r3, [r4, #0]
 8012d86:	689b      	ldr	r3, [r3, #8]
 8012d88:	069b      	lsls	r3, r3, #26
 8012d8a:	d5cd      	bpl.n	8012d28 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012d8c:	6823      	ldr	r3, [r4, #0]
 8012d8e:	22ff      	movs	r2, #255	; 0xff
 8012d90:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012d92:	2301      	movs	r3, #1
 8012d94:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012d96:	2300      	movs	r3, #0
 8012d98:	7723      	strb	r3, [r4, #28]
}
 8012d9a:	0030      	movs	r0, r6
 8012d9c:	bc80      	pop	{r7}
 8012d9e:	46b8      	mov	r8, r7
 8012da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da2:	46c0      	nop			; (mov r8, r8)
 8012da4:	00ffff3f 	.word	0x00ffff3f

08012da8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012da8:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012daa:	0902      	lsrs	r2, r0, #4
 8012dac:	0090      	lsls	r0, r2, #2
 8012dae:	1880      	adds	r0, r0, r2
 8012db0:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012db2:	220f      	movs	r2, #15
 8012db4:	4013      	ands	r3, r2
 8012db6:	18c0      	adds	r0, r0, r3
 8012db8:	b2c0      	uxtb	r0, r0
}
 8012dba:	4770      	bx	lr

08012dbc <HAL_RTC_GetTime>:
{
 8012dbc:	b570      	push	{r4, r5, r6, lr}
 8012dbe:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012dc0:	6803      	ldr	r3, [r0, #0]
 8012dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dc4:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012dc6:	6803      	ldr	r3, [r0, #0]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	490e      	ldr	r1, [pc, #56]	; (8012e04 <HAL_RTC_GetTime+0x48>)
 8012dcc:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012dce:	0c19      	lsrs	r1, r3, #16
 8012dd0:	203f      	movs	r0, #63	; 0x3f
 8012dd2:	4008      	ands	r0, r1
 8012dd4:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012dd6:	0a1e      	lsrs	r6, r3, #8
 8012dd8:	b2f6      	uxtb	r6, r6
 8012dda:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012ddc:	b2dd      	uxtb	r5, r3
 8012dde:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012de0:	2340      	movs	r3, #64	; 0x40
 8012de2:	400b      	ands	r3, r1
 8012de4:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 8012de6:	2a00      	cmp	r2, #0
 8012de8:	d10a      	bne.n	8012e00 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012dea:	f7ff ffdd 	bl	8012da8 <RTC_Bcd2ToByte>
 8012dee:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012df0:	0030      	movs	r0, r6
 8012df2:	f7ff ffd9 	bl	8012da8 <RTC_Bcd2ToByte>
 8012df6:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012df8:	0028      	movs	r0, r5
 8012dfa:	f7ff ffd5 	bl	8012da8 <RTC_Bcd2ToByte>
 8012dfe:	70a0      	strb	r0, [r4, #2]
}
 8012e00:	2000      	movs	r0, #0
 8012e02:	bd70      	pop	{r4, r5, r6, pc}
 8012e04:	007f7f7f 	.word	0x007f7f7f

08012e08 <HAL_RTC_GetDate>:
{
 8012e08:	b570      	push	{r4, r5, r6, lr}
 8012e0a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012e0c:	6803      	ldr	r3, [r0, #0]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	490d      	ldr	r1, [pc, #52]	; (8012e48 <HAL_RTC_GetDate+0x40>)
 8012e12:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012e14:	0c18      	lsrs	r0, r3, #16
 8012e16:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012e18:	04dd      	lsls	r5, r3, #19
 8012e1a:	0eed      	lsrs	r5, r5, #27
 8012e1c:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012e1e:	b2de      	uxtb	r6, r3
 8012e20:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012e22:	041b      	lsls	r3, r3, #16
 8012e24:	0f5b      	lsrs	r3, r3, #29
 8012e26:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012e28:	2a00      	cmp	r2, #0
 8012e2a:	d10a      	bne.n	8012e42 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012e2c:	f7ff ffbc 	bl	8012da8 <RTC_Bcd2ToByte>
 8012e30:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012e32:	0028      	movs	r0, r5
 8012e34:	f7ff ffb8 	bl	8012da8 <RTC_Bcd2ToByte>
 8012e38:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012e3a:	0030      	movs	r0, r6
 8012e3c:	f7ff ffb4 	bl	8012da8 <RTC_Bcd2ToByte>
 8012e40:	70a0      	strb	r0, [r4, #2]
}
 8012e42:	2000      	movs	r0, #0
 8012e44:	bd70      	pop	{r4, r5, r6, pc}
 8012e46:	46c0      	nop			; (mov r8, r8)
 8012e48:	00ffff3f 	.word	0x00ffff3f

08012e4c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012e4c:	6803      	ldr	r3, [r0, #0]
 8012e4e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012e50:	0089      	lsls	r1, r1, #2
 8012e52:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012e54:	600a      	str	r2, [r1, #0]
}
 8012e56:	4770      	bx	lr

08012e58 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012e58:	6803      	ldr	r3, [r0, #0]
 8012e5a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012e5c:	0089      	lsls	r1, r1, #2
 8012e5e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012e60:	6808      	ldr	r0, [r1, #0]
}
 8012e62:	4770      	bx	lr

08012e64 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012e64:	4770      	bx	lr

08012e66 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012e66:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012e68:	2239      	movs	r2, #57	; 0x39
 8012e6a:	2302      	movs	r3, #2
 8012e6c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012e6e:	6804      	ldr	r4, [r0, #0]
 8012e70:	6823      	ldr	r3, [r4, #0]
 8012e72:	2101      	movs	r1, #1
 8012e74:	430b      	orrs	r3, r1
 8012e76:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012e78:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012e7a:	2000      	movs	r0, #0
 8012e7c:	bd10      	pop	{r4, pc}
	...

08012e80 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012e80:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012e82:	4a2f      	ldr	r2, [pc, #188]	; (8012f40 <TIM_Base_SetConfig+0xc0>)
 8012e84:	4290      	cmp	r0, r2
 8012e86:	d044      	beq.n	8012f12 <TIM_Base_SetConfig+0x92>
 8012e88:	2280      	movs	r2, #128	; 0x80
 8012e8a:	05d2      	lsls	r2, r2, #23
 8012e8c:	4290      	cmp	r0, r2
 8012e8e:	d032      	beq.n	8012ef6 <TIM_Base_SetConfig+0x76>
 8012e90:	4a2c      	ldr	r2, [pc, #176]	; (8012f44 <TIM_Base_SetConfig+0xc4>)
 8012e92:	4290      	cmp	r0, r2
 8012e94:	d04f      	beq.n	8012f36 <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012e96:	4a2c      	ldr	r2, [pc, #176]	; (8012f48 <TIM_Base_SetConfig+0xc8>)
 8012e98:	4290      	cmp	r0, r2
 8012e9a:	d030      	beq.n	8012efe <TIM_Base_SetConfig+0x7e>
 8012e9c:	4a2b      	ldr	r2, [pc, #172]	; (8012f4c <TIM_Base_SetConfig+0xcc>)
 8012e9e:	4290      	cmp	r0, r2
 8012ea0:	d01f      	beq.n	8012ee2 <TIM_Base_SetConfig+0x62>
 8012ea2:	4a2b      	ldr	r2, [pc, #172]	; (8012f50 <TIM_Base_SetConfig+0xd0>)
 8012ea4:	4290      	cmp	r0, r2
 8012ea6:	d012      	beq.n	8012ece <TIM_Base_SetConfig+0x4e>
 8012ea8:	4a2a      	ldr	r2, [pc, #168]	; (8012f54 <TIM_Base_SetConfig+0xd4>)
 8012eaa:	4290      	cmp	r0, r2
 8012eac:	d005      	beq.n	8012eba <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012eae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012eb0:	688b      	ldr	r3, [r1, #8]
 8012eb2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012eb4:	680b      	ldr	r3, [r1, #0]
 8012eb6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012eb8:	e03a      	b.n	8012f30 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012eba:	4a27      	ldr	r2, [pc, #156]	; (8012f58 <TIM_Base_SetConfig+0xd8>)
 8012ebc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ebe:	68ca      	ldr	r2, [r1, #12]
 8012ec0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012ec2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ec4:	688b      	ldr	r3, [r1, #8]
 8012ec6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012ec8:	680b      	ldr	r3, [r1, #0]
 8012eca:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ecc:	e02e      	b.n	8012f2c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012ece:	4a22      	ldr	r2, [pc, #136]	; (8012f58 <TIM_Base_SetConfig+0xd8>)
 8012ed0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ed2:	68ca      	ldr	r2, [r1, #12]
 8012ed4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012ed6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ed8:	688b      	ldr	r3, [r1, #8]
 8012eda:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012edc:	680b      	ldr	r3, [r1, #0]
 8012ede:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ee0:	e024      	b.n	8012f2c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012ee2:	4a1d      	ldr	r2, [pc, #116]	; (8012f58 <TIM_Base_SetConfig+0xd8>)
 8012ee4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ee6:	68ca      	ldr	r2, [r1, #12]
 8012ee8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012eea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012eec:	688b      	ldr	r3, [r1, #8]
 8012eee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012ef0:	680b      	ldr	r3, [r1, #0]
 8012ef2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012ef4:	e01a      	b.n	8012f2c <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ef6:	2270      	movs	r2, #112	; 0x70
 8012ef8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012efa:	684a      	ldr	r2, [r1, #4]
 8012efc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012efe:	4a16      	ldr	r2, [pc, #88]	; (8012f58 <TIM_Base_SetConfig+0xd8>)
 8012f00:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f02:	68ca      	ldr	r2, [r1, #12]
 8012f04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012f06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012f08:	688b      	ldr	r3, [r1, #8]
 8012f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012f0c:	680b      	ldr	r3, [r1, #0]
 8012f0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012f10:	e00e      	b.n	8012f30 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012f12:	2270      	movs	r2, #112	; 0x70
 8012f14:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012f16:	684a      	ldr	r2, [r1, #4]
 8012f18:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012f1a:	4a0f      	ldr	r2, [pc, #60]	; (8012f58 <TIM_Base_SetConfig+0xd8>)
 8012f1c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f1e:	68ca      	ldr	r2, [r1, #12]
 8012f20:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012f22:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012f24:	688b      	ldr	r3, [r1, #8]
 8012f26:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012f28:	680b      	ldr	r3, [r1, #0]
 8012f2a:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012f2c:	690b      	ldr	r3, [r1, #16]
 8012f2e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012f30:	2301      	movs	r3, #1
 8012f32:	6143      	str	r3, [r0, #20]
}
 8012f34:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012f36:	2270      	movs	r2, #112	; 0x70
 8012f38:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012f3a:	684a      	ldr	r2, [r1, #4]
 8012f3c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012f3e:	e7de      	b.n	8012efe <TIM_Base_SetConfig+0x7e>
 8012f40:	40012c00 	.word	0x40012c00
 8012f44:	40000400 	.word	0x40000400
 8012f48:	40002000 	.word	0x40002000
 8012f4c:	40014000 	.word	0x40014000
 8012f50:	40014400 	.word	0x40014400
 8012f54:	40014800 	.word	0x40014800
 8012f58:	fffffcff 	.word	0xfffffcff

08012f5c <HAL_TIM_Base_Init>:
{
 8012f5c:	b570      	push	{r4, r5, r6, lr}
 8012f5e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012f60:	d014      	beq.n	8012f8c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012f62:	2339      	movs	r3, #57	; 0x39
 8012f64:	5cc3      	ldrb	r3, [r0, r3]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00a      	beq.n	8012f80 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012f6a:	2539      	movs	r5, #57	; 0x39
 8012f6c:	2302      	movs	r3, #2
 8012f6e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f70:	0021      	movs	r1, r4
 8012f72:	c901      	ldmia	r1!, {r0}
 8012f74:	f7ff ff84 	bl	8012e80 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012f78:	2301      	movs	r3, #1
 8012f7a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012f7c:	2000      	movs	r0, #0
}
 8012f7e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012f80:	3338      	adds	r3, #56	; 0x38
 8012f82:	2200      	movs	r2, #0
 8012f84:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012f86:	f7ff ff6d 	bl	8012e64 <HAL_TIM_Base_MspInit>
 8012f8a:	e7ee      	b.n	8012f6a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012f8c:	2001      	movs	r0, #1
 8012f8e:	e7f6      	b.n	8012f7e <HAL_TIM_Base_Init+0x22>

08012f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012f92:	2338      	movs	r3, #56	; 0x38
 8012f94:	5cc3      	ldrb	r3, [r0, r3]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d01e      	beq.n	8012fd8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012f9a:	2238      	movs	r2, #56	; 0x38
 8012f9c:	2501      	movs	r5, #1
 8012f9e:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012fa0:	2439      	movs	r4, #57	; 0x39
 8012fa2:	2302      	movs	r3, #2
 8012fa4:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012fa6:	6806      	ldr	r6, [r0, #0]
 8012fa8:	6873      	ldr	r3, [r6, #4]
 8012faa:	2770      	movs	r7, #112	; 0x70
 8012fac:	43bb      	bics	r3, r7
 8012fae:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012fb0:	6806      	ldr	r6, [r0, #0]
 8012fb2:	6873      	ldr	r3, [r6, #4]
 8012fb4:	680f      	ldr	r7, [r1, #0]
 8012fb6:	433b      	orrs	r3, r7
 8012fb8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012fba:	6806      	ldr	r6, [r0, #0]
 8012fbc:	68b3      	ldr	r3, [r6, #8]
 8012fbe:	2780      	movs	r7, #128	; 0x80
 8012fc0:	43bb      	bics	r3, r7
 8012fc2:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012fc4:	6806      	ldr	r6, [r0, #0]
 8012fc6:	68b3      	ldr	r3, [r6, #8]
 8012fc8:	6849      	ldr	r1, [r1, #4]
 8012fca:	430b      	orrs	r3, r1
 8012fcc:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012fce:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012fd4:	2000      	movs	r0, #0
}
 8012fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012fd8:	2002      	movs	r0, #2
 8012fda:	e7fc      	b.n	8012fd6 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012fdc <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012fdc:	4770      	bx	lr

08012fde <HAL_UART_DeInit>:
{
 8012fde:	b570      	push	{r4, r5, r6, lr}
 8012fe0:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012fe2:	d016      	beq.n	8013012 <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012fe4:	2669      	movs	r6, #105	; 0x69
 8012fe6:	2302      	movs	r3, #2
 8012fe8:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8012fea:	6802      	ldr	r2, [r0, #0]
 8012fec:	6813      	ldr	r3, [r2, #0]
 8012fee:	2101      	movs	r1, #1
 8012ff0:	438b      	bics	r3, r1
 8012ff2:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012ff4:	6803      	ldr	r3, [r0, #0]
 8012ff6:	2500      	movs	r5, #0
 8012ff8:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012ffa:	6803      	ldr	r3, [r0, #0]
 8012ffc:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012ffe:	6803      	ldr	r3, [r0, #0]
 8013000:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8013002:	f7ff ffeb 	bl	8012fdc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013006:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8013008:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 801300a:	2368      	movs	r3, #104	; 0x68
 801300c:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801300e:	2000      	movs	r0, #0
}
 8013010:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8013012:	2001      	movs	r0, #1
 8013014:	e7fc      	b.n	8013010 <HAL_UART_DeInit+0x32>

08013016 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013016:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013018:	2369      	movs	r3, #105	; 0x69
 801301a:	5cc3      	ldrb	r3, [r0, r3]
 801301c:	2b01      	cmp	r3, #1
 801301e:	d003      	beq.n	8013028 <HAL_UART_Transmit_IT+0x12>
 8013020:	2369      	movs	r3, #105	; 0x69
 8013022:	5cc3      	ldrb	r3, [r0, r3]
 8013024:	2b22      	cmp	r3, #34	; 0x22
 8013026:	d12b      	bne.n	8013080 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8013028:	2900      	cmp	r1, #0
 801302a:	d02b      	beq.n	8013084 <HAL_UART_Transmit_IT+0x6e>
 801302c:	2a00      	cmp	r2, #0
 801302e:	d02b      	beq.n	8013088 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013030:	2368      	movs	r3, #104	; 0x68
 8013032:	5cc3      	ldrb	r3, [r0, r3]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d029      	beq.n	801308c <HAL_UART_Transmit_IT+0x76>
 8013038:	2368      	movs	r3, #104	; 0x68
 801303a:	2401      	movs	r4, #1
 801303c:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 801303e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013040:	3b18      	subs	r3, #24
 8013042:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8013044:	3302      	adds	r3, #2
 8013046:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013048:	2300      	movs	r3, #0
 801304a:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801304c:	3369      	adds	r3, #105	; 0x69
 801304e:	5cc3      	ldrb	r3, [r0, r3]
 8013050:	2b22      	cmp	r3, #34	; 0x22
 8013052:	d011      	beq.n	8013078 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013054:	2369      	movs	r3, #105	; 0x69
 8013056:	2212      	movs	r2, #18
 8013058:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801305a:	6802      	ldr	r2, [r0, #0]
 801305c:	6893      	ldr	r3, [r2, #8]
 801305e:	2101      	movs	r1, #1
 8013060:	430b      	orrs	r3, r1
 8013062:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013064:	2368      	movs	r3, #104	; 0x68
 8013066:	2200      	movs	r2, #0
 8013068:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801306a:	6802      	ldr	r2, [r0, #0]
 801306c:	6813      	ldr	r3, [r2, #0]
 801306e:	317f      	adds	r1, #127	; 0x7f
 8013070:	430b      	orrs	r3, r1
 8013072:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8013074:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013076:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013078:	3347      	adds	r3, #71	; 0x47
 801307a:	2232      	movs	r2, #50	; 0x32
 801307c:	54c2      	strb	r2, [r0, r3]
 801307e:	e7ec      	b.n	801305a <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8013080:	2002      	movs	r0, #2
 8013082:	e7f8      	b.n	8013076 <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 8013084:	2001      	movs	r0, #1
 8013086:	e7f6      	b.n	8013076 <HAL_UART_Transmit_IT+0x60>
 8013088:	2001      	movs	r0, #1
 801308a:	e7f4      	b.n	8013076 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 801308c:	2002      	movs	r0, #2
 801308e:	e7f2      	b.n	8013076 <HAL_UART_Transmit_IT+0x60>

08013090 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013090:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013092:	2369      	movs	r3, #105	; 0x69
 8013094:	5cc3      	ldrb	r3, [r0, r3]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d003      	beq.n	80130a2 <HAL_UART_Receive_IT+0x12>
 801309a:	2369      	movs	r3, #105	; 0x69
 801309c:	5cc3      	ldrb	r3, [r0, r3]
 801309e:	2b12      	cmp	r3, #18
 80130a0:	d15d      	bne.n	801315e <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 80130a2:	2900      	cmp	r1, #0
 80130a4:	d05d      	beq.n	8013162 <HAL_UART_Receive_IT+0xd2>
 80130a6:	2a00      	cmp	r2, #0
 80130a8:	d05d      	beq.n	8013166 <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80130aa:	2368      	movs	r3, #104	; 0x68
 80130ac:	5cc3      	ldrb	r3, [r0, r3]
 80130ae:	2b01      	cmp	r3, #1
 80130b0:	d05b      	beq.n	801316a <HAL_UART_Receive_IT+0xda>
 80130b2:	2368      	movs	r3, #104	; 0x68
 80130b4:	2401      	movs	r4, #1
 80130b6:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 80130b8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80130ba:	3b10      	subs	r3, #16
 80130bc:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80130be:	3302      	adds	r3, #2
 80130c0:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80130c2:	6883      	ldr	r3, [r0, #8]
 80130c4:	2280      	movs	r2, #128	; 0x80
 80130c6:	0152      	lsls	r2, r2, #5
 80130c8:	4293      	cmp	r3, r2
 80130ca:	d008      	beq.n	80130de <HAL_UART_Receive_IT+0x4e>
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d115      	bne.n	80130fc <HAL_UART_Receive_IT+0x6c>
 80130d0:	6903      	ldr	r3, [r0, #16]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10e      	bne.n	80130f4 <HAL_UART_Receive_IT+0x64>
 80130d6:	335c      	adds	r3, #92	; 0x5c
 80130d8:	22ff      	movs	r2, #255	; 0xff
 80130da:	52c2      	strh	r2, [r0, r3]
 80130dc:	e012      	b.n	8013104 <HAL_UART_Receive_IT+0x74>
 80130de:	6903      	ldr	r3, [r0, #16]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d103      	bne.n	80130ec <HAL_UART_Receive_IT+0x5c>
 80130e4:	335c      	adds	r3, #92	; 0x5c
 80130e6:	4a22      	ldr	r2, [pc, #136]	; (8013170 <HAL_UART_Receive_IT+0xe0>)
 80130e8:	52c2      	strh	r2, [r0, r3]
 80130ea:	e00b      	b.n	8013104 <HAL_UART_Receive_IT+0x74>
 80130ec:	235c      	movs	r3, #92	; 0x5c
 80130ee:	22ff      	movs	r2, #255	; 0xff
 80130f0:	52c2      	strh	r2, [r0, r3]
 80130f2:	e007      	b.n	8013104 <HAL_UART_Receive_IT+0x74>
 80130f4:	235c      	movs	r3, #92	; 0x5c
 80130f6:	227f      	movs	r2, #127	; 0x7f
 80130f8:	52c2      	strh	r2, [r0, r3]
 80130fa:	e003      	b.n	8013104 <HAL_UART_Receive_IT+0x74>
 80130fc:	2280      	movs	r2, #128	; 0x80
 80130fe:	0552      	lsls	r2, r2, #21
 8013100:	4293      	cmp	r3, r2
 8013102:	d01d      	beq.n	8013140 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013104:	2300      	movs	r3, #0
 8013106:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013108:	3369      	adds	r3, #105	; 0x69
 801310a:	5cc3      	ldrb	r3, [r0, r3]
 801310c:	2b12      	cmp	r3, #18
 801310e:	d022      	beq.n	8013156 <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013110:	2369      	movs	r3, #105	; 0x69
 8013112:	2222      	movs	r2, #34	; 0x22
 8013114:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013116:	6802      	ldr	r2, [r0, #0]
 8013118:	6811      	ldr	r1, [r2, #0]
 801311a:	2380      	movs	r3, #128	; 0x80
 801311c:	005b      	lsls	r3, r3, #1
 801311e:	430b      	orrs	r3, r1
 8013120:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013122:	6802      	ldr	r2, [r0, #0]
 8013124:	6893      	ldr	r3, [r2, #8]
 8013126:	2101      	movs	r1, #1
 8013128:	430b      	orrs	r3, r1
 801312a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801312c:	2368      	movs	r3, #104	; 0x68
 801312e:	2200      	movs	r2, #0
 8013130:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013132:	6802      	ldr	r2, [r0, #0]
 8013134:	6813      	ldr	r3, [r2, #0]
 8013136:	311f      	adds	r1, #31
 8013138:	430b      	orrs	r3, r1
 801313a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 801313c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801313e:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013140:	6903      	ldr	r3, [r0, #16]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <HAL_UART_Receive_IT+0xbe>
 8013146:	335c      	adds	r3, #92	; 0x5c
 8013148:	227f      	movs	r2, #127	; 0x7f
 801314a:	52c2      	strh	r2, [r0, r3]
 801314c:	e7da      	b.n	8013104 <HAL_UART_Receive_IT+0x74>
 801314e:	235c      	movs	r3, #92	; 0x5c
 8013150:	223f      	movs	r2, #63	; 0x3f
 8013152:	52c2      	strh	r2, [r0, r3]
 8013154:	e7d6      	b.n	8013104 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013156:	3357      	adds	r3, #87	; 0x57
 8013158:	2232      	movs	r2, #50	; 0x32
 801315a:	54c2      	strb	r2, [r0, r3]
 801315c:	e7db      	b.n	8013116 <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 801315e:	2002      	movs	r0, #2
 8013160:	e7ed      	b.n	801313e <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8013162:	2001      	movs	r0, #1
 8013164:	e7eb      	b.n	801313e <HAL_UART_Receive_IT+0xae>
 8013166:	2001      	movs	r0, #1
 8013168:	e7e9      	b.n	801313e <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 801316a:	2002      	movs	r0, #2
 801316c:	e7e7      	b.n	801313e <HAL_UART_Receive_IT+0xae>
 801316e:	46c0      	nop			; (mov r8, r8)
 8013170:	000001ff 	.word	0x000001ff

08013174 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013174:	b510      	push	{r4, lr}
 8013176:	0004      	movs	r4, r0
 8013178:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801317a:	2269      	movs	r2, #105	; 0x69
 801317c:	5c82      	ldrb	r2, [r0, r2]
 801317e:	2a01      	cmp	r2, #1
 8013180:	d003      	beq.n	801318a <HAL_UART_Transmit_DMA+0x16>
 8013182:	2269      	movs	r2, #105	; 0x69
 8013184:	5c82      	ldrb	r2, [r0, r2]
 8013186:	2a22      	cmp	r2, #34	; 0x22
 8013188:	d137      	bne.n	80131fa <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 801318a:	2900      	cmp	r1, #0
 801318c:	d037      	beq.n	80131fe <HAL_UART_Transmit_DMA+0x8a>
 801318e:	2b00      	cmp	r3, #0
 8013190:	d037      	beq.n	8013202 <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013192:	2268      	movs	r2, #104	; 0x68
 8013194:	5ca2      	ldrb	r2, [r4, r2]
 8013196:	2a01      	cmp	r2, #1
 8013198:	d035      	beq.n	8013206 <HAL_UART_Transmit_DMA+0x92>
 801319a:	2268      	movs	r2, #104	; 0x68
 801319c:	2001      	movs	r0, #1
 801319e:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 80131a0:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80131a2:	3a18      	subs	r2, #24
 80131a4:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80131a6:	3202      	adds	r2, #2
 80131a8:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131aa:	2200      	movs	r2, #0
 80131ac:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80131ae:	3269      	adds	r2, #105	; 0x69
 80131b0:	5ca2      	ldrb	r2, [r4, r2]
 80131b2:	2a22      	cmp	r2, #34	; 0x22
 80131b4:	d01d      	beq.n	80131f2 <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80131b6:	2269      	movs	r2, #105	; 0x69
 80131b8:	2012      	movs	r0, #18
 80131ba:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80131bc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80131be:	4813      	ldr	r0, [pc, #76]	; (801320c <HAL_UART_Transmit_DMA+0x98>)
 80131c0:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80131c2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80131c4:	4812      	ldr	r0, [pc, #72]	; (8013210 <HAL_UART_Transmit_DMA+0x9c>)
 80131c6:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80131c8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80131ca:	4812      	ldr	r0, [pc, #72]	; (8013214 <HAL_UART_Transmit_DMA+0xa0>)
 80131cc:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80131ce:	6822      	ldr	r2, [r4, #0]
 80131d0:	3228      	adds	r2, #40	; 0x28
 80131d2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80131d4:	f7fd ffac 	bl	8011130 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80131d8:	6823      	ldr	r3, [r4, #0]
 80131da:	2240      	movs	r2, #64	; 0x40
 80131dc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80131de:	6822      	ldr	r2, [r4, #0]
 80131e0:	6893      	ldr	r3, [r2, #8]
 80131e2:	2180      	movs	r1, #128	; 0x80
 80131e4:	430b      	orrs	r3, r1
 80131e6:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80131e8:	2368      	movs	r3, #104	; 0x68
 80131ea:	2200      	movs	r2, #0
 80131ec:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80131ee:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80131f0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80131f2:	3247      	adds	r2, #71	; 0x47
 80131f4:	3031      	adds	r0, #49	; 0x31
 80131f6:	54a0      	strb	r0, [r4, r2]
 80131f8:	e7e0      	b.n	80131bc <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 80131fa:	2002      	movs	r0, #2
 80131fc:	e7f8      	b.n	80131f0 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 80131fe:	2001      	movs	r0, #1
 8013200:	e7f6      	b.n	80131f0 <HAL_UART_Transmit_DMA+0x7c>
 8013202:	2001      	movs	r0, #1
 8013204:	e7f4      	b.n	80131f0 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8013206:	2002      	movs	r0, #2
 8013208:	e7f2      	b.n	80131f0 <HAL_UART_Transmit_DMA+0x7c>
 801320a:	46c0      	nop			; (mov r8, r8)
 801320c:	080132b5 	.word	0x080132b5
 8013210:	080132e7 	.word	0x080132e7
 8013214:	08013337 	.word	0x08013337

08013218 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013218:	b510      	push	{r4, lr}
 801321a:	0004      	movs	r4, r0
 801321c:	0008      	movs	r0, r1
 801321e:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013220:	2269      	movs	r2, #105	; 0x69
 8013222:	5ca2      	ldrb	r2, [r4, r2]
 8013224:	2a01      	cmp	r2, #1
 8013226:	d003      	beq.n	8013230 <HAL_UART_Receive_DMA+0x18>
 8013228:	2269      	movs	r2, #105	; 0x69
 801322a:	5ca2      	ldrb	r2, [r4, r2]
 801322c:	2a12      	cmp	r2, #18
 801322e:	d133      	bne.n	8013298 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8013230:	2800      	cmp	r0, #0
 8013232:	d033      	beq.n	801329c <HAL_UART_Receive_DMA+0x84>
 8013234:	2b00      	cmp	r3, #0
 8013236:	d033      	beq.n	80132a0 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013238:	2268      	movs	r2, #104	; 0x68
 801323a:	5ca2      	ldrb	r2, [r4, r2]
 801323c:	2a01      	cmp	r2, #1
 801323e:	d031      	beq.n	80132a4 <HAL_UART_Receive_DMA+0x8c>
 8013240:	2268      	movs	r2, #104	; 0x68
 8013242:	2101      	movs	r1, #1
 8013244:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8013246:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013248:	3a10      	subs	r2, #16
 801324a:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801324c:	2200      	movs	r2, #0
 801324e:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013250:	3269      	adds	r2, #105	; 0x69
 8013252:	5ca2      	ldrb	r2, [r4, r2]
 8013254:	2a12      	cmp	r2, #18
 8013256:	d01b      	beq.n	8013290 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013258:	2269      	movs	r2, #105	; 0x69
 801325a:	2122      	movs	r1, #34	; 0x22
 801325c:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801325e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013260:	4911      	ldr	r1, [pc, #68]	; (80132a8 <HAL_UART_Receive_DMA+0x90>)
 8013262:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013264:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013266:	4911      	ldr	r1, [pc, #68]	; (80132ac <HAL_UART_Receive_DMA+0x94>)
 8013268:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801326a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801326c:	4910      	ldr	r1, [pc, #64]	; (80132b0 <HAL_UART_Receive_DMA+0x98>)
 801326e:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013270:	6821      	ldr	r1, [r4, #0]
 8013272:	3124      	adds	r1, #36	; 0x24
 8013274:	0002      	movs	r2, r0
 8013276:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013278:	f7fd ff5a 	bl	8011130 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801327c:	6822      	ldr	r2, [r4, #0]
 801327e:	6893      	ldr	r3, [r2, #8]
 8013280:	2140      	movs	r1, #64	; 0x40
 8013282:	430b      	orrs	r3, r1
 8013284:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8013286:	2368      	movs	r3, #104	; 0x68
 8013288:	2200      	movs	r2, #0
 801328a:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 801328c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801328e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013290:	3257      	adds	r2, #87	; 0x57
 8013292:	3131      	adds	r1, #49	; 0x31
 8013294:	54a1      	strb	r1, [r4, r2]
 8013296:	e7e2      	b.n	801325e <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 8013298:	2002      	movs	r0, #2
 801329a:	e7f8      	b.n	801328e <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 801329c:	2001      	movs	r0, #1
 801329e:	e7f6      	b.n	801328e <HAL_UART_Receive_DMA+0x76>
 80132a0:	2001      	movs	r0, #1
 80132a2:	e7f4      	b.n	801328e <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 80132a4:	2002      	movs	r0, #2
 80132a6:	e7f2      	b.n	801328e <HAL_UART_Receive_DMA+0x76>
 80132a8:	080132f1 	.word	0x080132f1
 80132ac:	0801332d 	.word	0x0801332d
 80132b0:	08013337 	.word	0x08013337

080132b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80132b4:	b510      	push	{r4, lr}
 80132b6:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80132b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	069b      	lsls	r3, r3, #26
 80132c0:	d40d      	bmi.n	80132de <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 80132c2:	2352      	movs	r3, #82	; 0x52
 80132c4:	2200      	movs	r2, #0
 80132c6:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80132c8:	6802      	ldr	r2, [r0, #0]
 80132ca:	6893      	ldr	r3, [r2, #8]
 80132cc:	2180      	movs	r1, #128	; 0x80
 80132ce:	438b      	bics	r3, r1
 80132d0:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80132d2:	6802      	ldr	r2, [r0, #0]
 80132d4:	6813      	ldr	r3, [r2, #0]
 80132d6:	3940      	subs	r1, #64	; 0x40
 80132d8:	430b      	orrs	r3, r1
 80132da:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80132dc:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80132de:	f7fa fd89 	bl	800ddf4 <HAL_UART_TxCpltCallback>
}
 80132e2:	e7fb      	b.n	80132dc <UART_DMATransmitCplt+0x28>

080132e4 <HAL_UART_TxHalfCpltCallback>:
}
 80132e4:	4770      	bx	lr

080132e6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80132e6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80132e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80132ea:	f7ff fffb 	bl	80132e4 <HAL_UART_TxHalfCpltCallback>
}
 80132ee:	bd10      	pop	{r4, pc}

080132f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80132f0:	b510      	push	{r4, lr}
 80132f2:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80132f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	069b      	lsls	r3, r3, #26
 80132fc:	d40e      	bmi.n	801331c <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 80132fe:	235a      	movs	r3, #90	; 0x5a
 8013300:	2200      	movs	r2, #0
 8013302:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013304:	6802      	ldr	r2, [r0, #0]
 8013306:	6893      	ldr	r3, [r2, #8]
 8013308:	2140      	movs	r1, #64	; 0x40
 801330a:	438b      	bics	r3, r1
 801330c:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801330e:	2369      	movs	r3, #105	; 0x69
 8013310:	5cc3      	ldrb	r3, [r0, r3]
 8013312:	2b32      	cmp	r3, #50	; 0x32
 8013314:	d005      	beq.n	8013322 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013316:	2369      	movs	r3, #105	; 0x69
 8013318:	2201      	movs	r2, #1
 801331a:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801331c:	f7fa fda8 	bl	800de70 <HAL_UART_RxCpltCallback>
}
 8013320:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013322:	3337      	adds	r3, #55	; 0x37
 8013324:	2212      	movs	r2, #18
 8013326:	54c2      	strb	r2, [r0, r3]
 8013328:	e7f8      	b.n	801331c <UART_DMAReceiveCplt+0x2c>

0801332a <HAL_UART_RxHalfCpltCallback>:
}
 801332a:	4770      	bx	lr

0801332c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801332c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801332e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013330:	f7ff fffb 	bl	801332a <HAL_UART_RxHalfCpltCallback>
}
 8013334:	bd10      	pop	{r4, pc}

08013336 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013336:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013338:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801333a:	2300      	movs	r3, #0
 801333c:	225a      	movs	r2, #90	; 0x5a
 801333e:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013340:	3a08      	subs	r2, #8
 8013342:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013344:	3369      	adds	r3, #105	; 0x69
 8013346:	3a51      	subs	r2, #81	; 0x51
 8013348:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801334a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801334c:	320f      	adds	r2, #15
 801334e:	4313      	orrs	r3, r2
 8013350:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8013352:	f7fa fd67 	bl	800de24 <HAL_UART_ErrorCallback>
}
 8013356:	bd10      	pop	{r4, pc}

08013358 <UART_SetConfig>:
{
 8013358:	b570      	push	{r4, r5, r6, lr}
 801335a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801335c:	6801      	ldr	r1, [r0, #0]
 801335e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013360:	6883      	ldr	r3, [r0, #8]
 8013362:	6900      	ldr	r0, [r0, #16]
 8013364:	4303      	orrs	r3, r0
 8013366:	6960      	ldr	r0, [r4, #20]
 8013368:	4303      	orrs	r3, r0
 801336a:	69e0      	ldr	r0, [r4, #28]
 801336c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801336e:	487a      	ldr	r0, [pc, #488]	; (8013558 <UART_SetConfig+0x200>)
 8013370:	4002      	ands	r2, r0
 8013372:	4313      	orrs	r3, r2
 8013374:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013376:	6822      	ldr	r2, [r4, #0]
 8013378:	6853      	ldr	r3, [r2, #4]
 801337a:	4978      	ldr	r1, [pc, #480]	; (801355c <UART_SetConfig+0x204>)
 801337c:	400b      	ands	r3, r1
 801337e:	68e1      	ldr	r1, [r4, #12]
 8013380:	430b      	orrs	r3, r1
 8013382:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013384:	6821      	ldr	r1, [r4, #0]
 8013386:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013388:	69a3      	ldr	r3, [r4, #24]
 801338a:	6a20      	ldr	r0, [r4, #32]
 801338c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801338e:	4874      	ldr	r0, [pc, #464]	; (8013560 <UART_SetConfig+0x208>)
 8013390:	4002      	ands	r2, r0
 8013392:	4313      	orrs	r3, r2
 8013394:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013396:	6825      	ldr	r5, [r4, #0]
 8013398:	4b72      	ldr	r3, [pc, #456]	; (8013564 <UART_SetConfig+0x20c>)
 801339a:	429d      	cmp	r5, r3
 801339c:	d021      	beq.n	80133e2 <UART_SetConfig+0x8a>
 801339e:	4b72      	ldr	r3, [pc, #456]	; (8013568 <UART_SetConfig+0x210>)
 80133a0:	429d      	cmp	r5, r3
 80133a2:	d03a      	beq.n	801341a <UART_SetConfig+0xc2>
 80133a4:	4b71      	ldr	r3, [pc, #452]	; (801356c <UART_SetConfig+0x214>)
 80133a6:	429d      	cmp	r5, r3
 80133a8:	d061      	beq.n	801346e <UART_SetConfig+0x116>
 80133aa:	4b71      	ldr	r3, [pc, #452]	; (8013570 <UART_SetConfig+0x218>)
 80133ac:	429d      	cmp	r5, r3
 80133ae:	d100      	bne.n	80133b2 <UART_SetConfig+0x5a>
 80133b0:	e0a8      	b.n	8013504 <UART_SetConfig+0x1ac>
 80133b2:	4b70      	ldr	r3, [pc, #448]	; (8013574 <UART_SetConfig+0x21c>)
 80133b4:	429d      	cmp	r5, r3
 80133b6:	d100      	bne.n	80133ba <UART_SetConfig+0x62>
 80133b8:	e0a4      	b.n	8013504 <UART_SetConfig+0x1ac>
 80133ba:	4b6f      	ldr	r3, [pc, #444]	; (8013578 <UART_SetConfig+0x220>)
 80133bc:	429d      	cmp	r5, r3
 80133be:	d100      	bne.n	80133c2 <UART_SetConfig+0x6a>
 80133c0:	e0a0      	b.n	8013504 <UART_SetConfig+0x1ac>
 80133c2:	4b6e      	ldr	r3, [pc, #440]	; (801357c <UART_SetConfig+0x224>)
 80133c4:	429d      	cmp	r5, r3
 80133c6:	d100      	bne.n	80133ca <UART_SetConfig+0x72>
 80133c8:	e09c      	b.n	8013504 <UART_SetConfig+0x1ac>
 80133ca:	4b6d      	ldr	r3, [pc, #436]	; (8013580 <UART_SetConfig+0x228>)
 80133cc:	429d      	cmp	r5, r3
 80133ce:	d100      	bne.n	80133d2 <UART_SetConfig+0x7a>
 80133d0:	e098      	b.n	8013504 <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133d2:	2380      	movs	r3, #128	; 0x80
 80133d4:	021b      	lsls	r3, r3, #8
 80133d6:	69e2      	ldr	r2, [r4, #28]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d100      	bne.n	80133de <UART_SetConfig+0x86>
 80133dc:	e08c      	b.n	80134f8 <UART_SetConfig+0x1a0>
 80133de:	2001      	movs	r0, #1
 80133e0:	e089      	b.n	80134f6 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80133e2:	4b68      	ldr	r3, [pc, #416]	; (8013584 <UART_SetConfig+0x22c>)
 80133e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80133e6:	2303      	movs	r3, #3
 80133e8:	4013      	ands	r3, r2
 80133ea:	2b02      	cmp	r3, #2
 80133ec:	d100      	bne.n	80133f0 <UART_SetConfig+0x98>
 80133ee:	e0a6      	b.n	801353e <UART_SetConfig+0x1e6>
 80133f0:	d82f      	bhi.n	8013452 <UART_SetConfig+0xfa>
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d069      	beq.n	80134ca <UART_SetConfig+0x172>
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d120      	bne.n	801343c <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133fa:	2380      	movs	r3, #128	; 0x80
 80133fc:	021b      	lsls	r3, r3, #8
 80133fe:	69e2      	ldr	r2, [r4, #28]
 8013400:	429a      	cmp	r2, r3
 8013402:	d049      	beq.n	8013498 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013404:	f7ff fa34 	bl	8012870 <HAL_RCC_GetSysClockFreq>
 8013408:	6825      	ldr	r5, [r4, #0]
 801340a:	6861      	ldr	r1, [r4, #4]
 801340c:	f7ec fea0 	bl	8000150 <__udivsi3>
 8013410:	0400      	lsls	r0, r0, #16
 8013412:	0c00      	lsrs	r0, r0, #16
 8013414:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013416:	2000      	movs	r0, #0
        break;
 8013418:	e06d      	b.n	80134f6 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801341a:	4b5a      	ldr	r3, [pc, #360]	; (8013584 <UART_SetConfig+0x22c>)
 801341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801341e:	22c0      	movs	r2, #192	; 0xc0
 8013420:	0292      	lsls	r2, r2, #10
 8013422:	4013      	ands	r3, r2
 8013424:	2280      	movs	r2, #128	; 0x80
 8013426:	0292      	lsls	r2, r2, #10
 8013428:	4293      	cmp	r3, r2
 801342a:	d100      	bne.n	801342e <UART_SetConfig+0xd6>
 801342c:	e087      	b.n	801353e <UART_SetConfig+0x1e6>
 801342e:	d80c      	bhi.n	801344a <UART_SetConfig+0xf2>
 8013430:	2b00      	cmp	r3, #0
 8013432:	d04a      	beq.n	80134ca <UART_SetConfig+0x172>
 8013434:	2280      	movs	r2, #128	; 0x80
 8013436:	0252      	lsls	r2, r2, #9
 8013438:	4293      	cmp	r3, r2
 801343a:	d0de      	beq.n	80133fa <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801343c:	2380      	movs	r3, #128	; 0x80
 801343e:	021b      	lsls	r3, r3, #8
 8013440:	69e2      	ldr	r2, [r4, #28]
 8013442:	429a      	cmp	r2, r3
 8013444:	d05b      	beq.n	80134fe <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 8013446:	2001      	movs	r0, #1
 8013448:	e055      	b.n	80134f6 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801344a:	22c0      	movs	r2, #192	; 0xc0
 801344c:	0292      	lsls	r2, r2, #10
 801344e:	4293      	cmp	r3, r2
 8013450:	d1f4      	bne.n	801343c <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013452:	2380      	movs	r3, #128	; 0x80
 8013454:	021b      	lsls	r3, r3, #8
 8013456:	69e2      	ldr	r2, [r4, #28]
 8013458:	429a      	cmp	r2, r3
 801345a:	d02f      	beq.n	80134bc <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801345c:	6861      	ldr	r1, [r4, #4]
 801345e:	484a      	ldr	r0, [pc, #296]	; (8013588 <UART_SetConfig+0x230>)
 8013460:	f7ec fe76 	bl	8000150 <__udivsi3>
 8013464:	0400      	lsls	r0, r0, #16
 8013466:	0c00      	lsrs	r0, r0, #16
 8013468:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801346a:	2000      	movs	r0, #0
        break;
 801346c:	e043      	b.n	80134f6 <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801346e:	4b45      	ldr	r3, [pc, #276]	; (8013584 <UART_SetConfig+0x22c>)
 8013470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013472:	22c0      	movs	r2, #192	; 0xc0
 8013474:	0312      	lsls	r2, r2, #12
 8013476:	4013      	ands	r3, r2
 8013478:	2280      	movs	r2, #128	; 0x80
 801347a:	0312      	lsls	r2, r2, #12
 801347c:	4293      	cmp	r3, r2
 801347e:	d051      	beq.n	8013524 <UART_SetConfig+0x1cc>
 8013480:	d813      	bhi.n	80134aa <UART_SetConfig+0x152>
 8013482:	2b00      	cmp	r3, #0
 8013484:	d021      	beq.n	80134ca <UART_SetConfig+0x172>
 8013486:	2280      	movs	r2, #128	; 0x80
 8013488:	02d2      	lsls	r2, r2, #11
 801348a:	4293      	cmp	r3, r2
 801348c:	d1d6      	bne.n	801343c <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801348e:	2380      	movs	r3, #128	; 0x80
 8013490:	021b      	lsls	r3, r3, #8
 8013492:	69e2      	ldr	r2, [r4, #28]
 8013494:	429a      	cmp	r2, r3
 8013496:	d1b5      	bne.n	8013404 <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013498:	f7ff f9ea 	bl	8012870 <HAL_RCC_GetSysClockFreq>
 801349c:	0040      	lsls	r0, r0, #1
 801349e:	6861      	ldr	r1, [r4, #4]
 80134a0:	f7ec fe56 	bl	8000150 <__udivsi3>
 80134a4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80134a6:	2000      	movs	r0, #0
        break;
 80134a8:	e01c      	b.n	80134e4 <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80134aa:	22c0      	movs	r2, #192	; 0xc0
 80134ac:	0312      	lsls	r2, r2, #12
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d1c4      	bne.n	801343c <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134b2:	2380      	movs	r3, #128	; 0x80
 80134b4:	021b      	lsls	r3, r3, #8
 80134b6:	69e2      	ldr	r2, [r4, #28]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d1cf      	bne.n	801345c <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80134bc:	6861      	ldr	r1, [r4, #4]
 80134be:	4833      	ldr	r0, [pc, #204]	; (801358c <UART_SetConfig+0x234>)
 80134c0:	f7ec fe46 	bl	8000150 <__udivsi3>
 80134c4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80134c6:	2000      	movs	r0, #0
        break;
 80134c8:	e00c      	b.n	80134e4 <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134ca:	2380      	movs	r3, #128	; 0x80
 80134cc:	021b      	lsls	r3, r3, #8
 80134ce:	69e2      	ldr	r2, [r4, #28]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d11c      	bne.n	801350e <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80134d4:	f7ff fa30 	bl	8012938 <HAL_RCC_GetPCLK1Freq>
 80134d8:	0040      	lsls	r0, r0, #1
 80134da:	6861      	ldr	r1, [r4, #4]
 80134dc:	f7ec fe38 	bl	8000150 <__udivsi3>
 80134e0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80134e2:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80134e4:	220f      	movs	r2, #15
 80134e6:	0019      	movs	r1, r3
 80134e8:	4391      	bics	r1, r2
 80134ea:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80134ec:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80134ee:	071b      	lsls	r3, r3, #28
 80134f0:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80134f2:	4313      	orrs	r3, r2
 80134f4:	60cb      	str	r3, [r1, #12]
}
 80134f6:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 80134f8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80134fa:	2300      	movs	r3, #0
 80134fc:	e7f2      	b.n	80134e4 <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80134fe:	2001      	movs	r0, #1
 8013500:	2300      	movs	r3, #0
 8013502:	e7ef      	b.n	80134e4 <UART_SetConfig+0x18c>
 8013504:	2380      	movs	r3, #128	; 0x80
 8013506:	021b      	lsls	r3, r3, #8
 8013508:	69e2      	ldr	r2, [r4, #28]
 801350a:	429a      	cmp	r2, r3
 801350c:	d0e2      	beq.n	80134d4 <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801350e:	f7ff fa13 	bl	8012938 <HAL_RCC_GetPCLK1Freq>
 8013512:	6825      	ldr	r5, [r4, #0]
 8013514:	6861      	ldr	r1, [r4, #4]
 8013516:	f7ec fe1b 	bl	8000150 <__udivsi3>
 801351a:	0400      	lsls	r0, r0, #16
 801351c:	0c00      	lsrs	r0, r0, #16
 801351e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013520:	2000      	movs	r0, #0
  return ret;
 8013522:	e7e8      	b.n	80134f6 <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013524:	2380      	movs	r3, #128	; 0x80
 8013526:	021b      	lsls	r3, r3, #8
 8013528:	69e2      	ldr	r2, [r4, #28]
 801352a:	429a      	cmp	r2, r3
 801352c:	d10c      	bne.n	8013548 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 801352e:	6861      	ldr	r1, [r4, #4]
 8013530:	2080      	movs	r0, #128	; 0x80
 8013532:	0240      	lsls	r0, r0, #9
 8013534:	f7ec fe0c 	bl	8000150 <__udivsi3>
 8013538:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801353a:	2000      	movs	r0, #0
        break;
 801353c:	e7d2      	b.n	80134e4 <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801353e:	2380      	movs	r3, #128	; 0x80
 8013540:	021b      	lsls	r3, r3, #8
 8013542:	69e2      	ldr	r2, [r4, #28]
 8013544:	429a      	cmp	r2, r3
 8013546:	d0f2      	beq.n	801352e <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013548:	6861      	ldr	r1, [r4, #4]
 801354a:	2080      	movs	r0, #128	; 0x80
 801354c:	0200      	lsls	r0, r0, #8
 801354e:	f7ec fdff 	bl	8000150 <__udivsi3>
 8013552:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013554:	2000      	movs	r0, #0
        break;
 8013556:	e7ce      	b.n	80134f6 <UART_SetConfig+0x19e>
 8013558:	efff69f3 	.word	0xefff69f3
 801355c:	ffffcfff 	.word	0xffffcfff
 8013560:	fffff4ff 	.word	0xfffff4ff
 8013564:	40013800 	.word	0x40013800
 8013568:	40004400 	.word	0x40004400
 801356c:	40004800 	.word	0x40004800
 8013570:	40004c00 	.word	0x40004c00
 8013574:	40005000 	.word	0x40005000
 8013578:	40011400 	.word	0x40011400
 801357c:	40011800 	.word	0x40011800
 8013580:	40011c00 	.word	0x40011c00
 8013584:	40021000 	.word	0x40021000
 8013588:	007a1200 	.word	0x007a1200
 801358c:	00f42400 	.word	0x00f42400

08013590 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013590:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013592:	07db      	lsls	r3, r3, #31
 8013594:	d506      	bpl.n	80135a4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013596:	6802      	ldr	r2, [r0, #0]
 8013598:	6853      	ldr	r3, [r2, #4]
 801359a:	492c      	ldr	r1, [pc, #176]	; (801364c <UART_AdvFeatureConfig+0xbc>)
 801359c:	400b      	ands	r3, r1
 801359e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80135a0:	430b      	orrs	r3, r1
 80135a2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80135a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135a6:	079b      	lsls	r3, r3, #30
 80135a8:	d506      	bpl.n	80135b8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80135aa:	6802      	ldr	r2, [r0, #0]
 80135ac:	6853      	ldr	r3, [r2, #4]
 80135ae:	4928      	ldr	r1, [pc, #160]	; (8013650 <UART_AdvFeatureConfig+0xc0>)
 80135b0:	400b      	ands	r3, r1
 80135b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80135b4:	430b      	orrs	r3, r1
 80135b6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80135b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135ba:	075b      	lsls	r3, r3, #29
 80135bc:	d506      	bpl.n	80135cc <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80135be:	6802      	ldr	r2, [r0, #0]
 80135c0:	6853      	ldr	r3, [r2, #4]
 80135c2:	4924      	ldr	r1, [pc, #144]	; (8013654 <UART_AdvFeatureConfig+0xc4>)
 80135c4:	400b      	ands	r3, r1
 80135c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80135c8:	430b      	orrs	r3, r1
 80135ca:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80135cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135ce:	071b      	lsls	r3, r3, #28
 80135d0:	d506      	bpl.n	80135e0 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80135d2:	6802      	ldr	r2, [r0, #0]
 80135d4:	6853      	ldr	r3, [r2, #4]
 80135d6:	4920      	ldr	r1, [pc, #128]	; (8013658 <UART_AdvFeatureConfig+0xc8>)
 80135d8:	400b      	ands	r3, r1
 80135da:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80135dc:	430b      	orrs	r3, r1
 80135de:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80135e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135e2:	06db      	lsls	r3, r3, #27
 80135e4:	d506      	bpl.n	80135f4 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80135e6:	6802      	ldr	r2, [r0, #0]
 80135e8:	6893      	ldr	r3, [r2, #8]
 80135ea:	491c      	ldr	r1, [pc, #112]	; (801365c <UART_AdvFeatureConfig+0xcc>)
 80135ec:	400b      	ands	r3, r1
 80135ee:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80135f0:	430b      	orrs	r3, r1
 80135f2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80135f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80135f6:	069b      	lsls	r3, r3, #26
 80135f8:	d506      	bpl.n	8013608 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80135fa:	6802      	ldr	r2, [r0, #0]
 80135fc:	6893      	ldr	r3, [r2, #8]
 80135fe:	4918      	ldr	r1, [pc, #96]	; (8013660 <UART_AdvFeatureConfig+0xd0>)
 8013600:	400b      	ands	r3, r1
 8013602:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013604:	430b      	orrs	r3, r1
 8013606:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013608:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801360a:	065b      	lsls	r3, r3, #25
 801360c:	d50b      	bpl.n	8013626 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801360e:	6802      	ldr	r2, [r0, #0]
 8013610:	6853      	ldr	r3, [r2, #4]
 8013612:	4914      	ldr	r1, [pc, #80]	; (8013664 <UART_AdvFeatureConfig+0xd4>)
 8013614:	400b      	ands	r3, r1
 8013616:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013618:	430b      	orrs	r3, r1
 801361a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801361c:	2380      	movs	r3, #128	; 0x80
 801361e:	035b      	lsls	r3, r3, #13
 8013620:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013622:	429a      	cmp	r2, r3
 8013624:	d00a      	beq.n	801363c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013626:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013628:	061b      	lsls	r3, r3, #24
 801362a:	d506      	bpl.n	801363a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801362c:	6802      	ldr	r2, [r0, #0]
 801362e:	6853      	ldr	r3, [r2, #4]
 8013630:	490d      	ldr	r1, [pc, #52]	; (8013668 <UART_AdvFeatureConfig+0xd8>)
 8013632:	400b      	ands	r3, r1
 8013634:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013636:	430b      	orrs	r3, r1
 8013638:	6053      	str	r3, [r2, #4]
}
 801363a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801363c:	6802      	ldr	r2, [r0, #0]
 801363e:	6853      	ldr	r3, [r2, #4]
 8013640:	490a      	ldr	r1, [pc, #40]	; (801366c <UART_AdvFeatureConfig+0xdc>)
 8013642:	400b      	ands	r3, r1
 8013644:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013646:	430b      	orrs	r3, r1
 8013648:	6053      	str	r3, [r2, #4]
 801364a:	e7ec      	b.n	8013626 <UART_AdvFeatureConfig+0x96>
 801364c:	fffdffff 	.word	0xfffdffff
 8013650:	fffeffff 	.word	0xfffeffff
 8013654:	fffbffff 	.word	0xfffbffff
 8013658:	ffff7fff 	.word	0xffff7fff
 801365c:	ffffefff 	.word	0xffffefff
 8013660:	ffffdfff 	.word	0xffffdfff
 8013664:	ffefffff 	.word	0xffefffff
 8013668:	fff7ffff 	.word	0xfff7ffff
 801366c:	ff9fffff 	.word	0xff9fffff

08013670 <UART_WaitOnFlagUntilTimeout>:
{
 8013670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013672:	46c6      	mov	lr, r8
 8013674:	b500      	push	{lr}
 8013676:	0007      	movs	r7, r0
 8013678:	000c      	movs	r4, r1
 801367a:	0016      	movs	r6, r2
 801367c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801367e:	f7fd f85d 	bl	801073c <HAL_GetTick>
 8013682:	4680      	mov	r8, r0
  if(Status == RESET)
 8013684:	2e00      	cmp	r6, #0
 8013686:	d029      	beq.n	80136dc <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	69da      	ldr	r2, [r3, #28]
 801368c:	4022      	ands	r2, r4
 801368e:	42a2      	cmp	r2, r4
 8013690:	d152      	bne.n	8013738 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013692:	1c6a      	adds	r2, r5, #1
 8013694:	d0f9      	beq.n	801368a <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013696:	2d00      	cmp	r5, #0
 8013698:	d005      	beq.n	80136a6 <UART_WaitOnFlagUntilTimeout+0x36>
 801369a:	f7fd f84f 	bl	801073c <HAL_GetTick>
 801369e:	4643      	mov	r3, r8
 80136a0:	1ac0      	subs	r0, r0, r3
 80136a2:	42a8      	cmp	r0, r5
 80136a4:	d9f0      	bls.n	8013688 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80136a6:	683a      	ldr	r2, [r7, #0]
 80136a8:	6813      	ldr	r3, [r2, #0]
 80136aa:	2180      	movs	r1, #128	; 0x80
 80136ac:	438b      	bics	r3, r1
 80136ae:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80136b0:	683a      	ldr	r2, [r7, #0]
 80136b2:	6813      	ldr	r3, [r2, #0]
 80136b4:	3960      	subs	r1, #96	; 0x60
 80136b6:	438b      	bics	r3, r1
 80136b8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80136ba:	683a      	ldr	r2, [r7, #0]
 80136bc:	6813      	ldr	r3, [r2, #0]
 80136be:	491f      	ldr	r1, [pc, #124]	; (801373c <UART_WaitOnFlagUntilTimeout+0xcc>)
 80136c0:	400b      	ands	r3, r1
 80136c2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80136c4:	6839      	ldr	r1, [r7, #0]
 80136c6:	688b      	ldr	r3, [r1, #8]
 80136c8:	2201      	movs	r2, #1
 80136ca:	4393      	bics	r3, r2
 80136cc:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 80136ce:	2369      	movs	r3, #105	; 0x69
 80136d0:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 80136d2:	3b01      	subs	r3, #1
 80136d4:	2200      	movs	r2, #0
 80136d6:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80136d8:	2003      	movs	r0, #3
 80136da:	e02a      	b.n	8013732 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	69d9      	ldr	r1, [r3, #28]
 80136e0:	4021      	ands	r1, r4
 80136e2:	42a1      	cmp	r1, r4
 80136e4:	d024      	beq.n	8013730 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 80136e6:	1c6a      	adds	r2, r5, #1
 80136e8:	d0f9      	beq.n	80136de <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80136ea:	2d00      	cmp	r5, #0
 80136ec:	d005      	beq.n	80136fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80136ee:	f7fd f825 	bl	801073c <HAL_GetTick>
 80136f2:	4643      	mov	r3, r8
 80136f4:	1ac0      	subs	r0, r0, r3
 80136f6:	42a8      	cmp	r0, r5
 80136f8:	d9f0      	bls.n	80136dc <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80136fa:	683a      	ldr	r2, [r7, #0]
 80136fc:	6813      	ldr	r3, [r2, #0]
 80136fe:	2180      	movs	r1, #128	; 0x80
 8013700:	438b      	bics	r3, r1
 8013702:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	6813      	ldr	r3, [r2, #0]
 8013708:	3960      	subs	r1, #96	; 0x60
 801370a:	438b      	bics	r3, r1
 801370c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801370e:	683a      	ldr	r2, [r7, #0]
 8013710:	6813      	ldr	r3, [r2, #0]
 8013712:	490a      	ldr	r1, [pc, #40]	; (801373c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013714:	400b      	ands	r3, r1
 8013716:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013718:	6839      	ldr	r1, [r7, #0]
 801371a:	688b      	ldr	r3, [r1, #8]
 801371c:	2201      	movs	r2, #1
 801371e:	4393      	bics	r3, r2
 8013720:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013722:	2369      	movs	r3, #105	; 0x69
 8013724:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8013726:	3b01      	subs	r3, #1
 8013728:	2200      	movs	r2, #0
 801372a:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 801372c:	2003      	movs	r0, #3
 801372e:	e000      	b.n	8013732 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013730:	0030      	movs	r0, r6
}
 8013732:	bc80      	pop	{r7}
 8013734:	46b8      	mov	r8, r7
 8013736:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013738:	2000      	movs	r0, #0
 801373a:	e7fa      	b.n	8013732 <UART_WaitOnFlagUntilTimeout+0xc2>
 801373c:	fffffeff 	.word	0xfffffeff

08013740 <HAL_UART_Transmit>:
{
 8013740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013742:	46c6      	mov	lr, r8
 8013744:	b500      	push	{lr}
 8013746:	0004      	movs	r4, r0
 8013748:	000d      	movs	r5, r1
 801374a:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801374c:	2369      	movs	r3, #105	; 0x69
 801374e:	5cc3      	ldrb	r3, [r0, r3]
 8013750:	2b01      	cmp	r3, #1
 8013752:	d003      	beq.n	801375c <HAL_UART_Transmit+0x1c>
 8013754:	2369      	movs	r3, #105	; 0x69
 8013756:	5cc3      	ldrb	r3, [r0, r3]
 8013758:	2b22      	cmp	r3, #34	; 0x22
 801375a:	d152      	bne.n	8013802 <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 801375c:	2d00      	cmp	r5, #0
 801375e:	d054      	beq.n	801380a <HAL_UART_Transmit+0xca>
 8013760:	2a00      	cmp	r2, #0
 8013762:	d054      	beq.n	801380e <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8013764:	2368      	movs	r3, #104	; 0x68
 8013766:	5ce3      	ldrb	r3, [r4, r3]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d052      	beq.n	8013812 <HAL_UART_Transmit+0xd2>
 801376c:	2368      	movs	r3, #104	; 0x68
 801376e:	2101      	movs	r1, #1
 8013770:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013772:	2300      	movs	r3, #0
 8013774:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013776:	3369      	adds	r3, #105	; 0x69
 8013778:	5ce3      	ldrb	r3, [r4, r3]
 801377a:	2b22      	cmp	r3, #34	; 0x22
 801377c:	d009      	beq.n	8013792 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801377e:	2369      	movs	r3, #105	; 0x69
 8013780:	2112      	movs	r1, #18
 8013782:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8013784:	2350      	movs	r3, #80	; 0x50
 8013786:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013788:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801378a:	2380      	movs	r3, #128	; 0x80
 801378c:	015b      	lsls	r3, r3, #5
 801378e:	4698      	mov	r8, r3
 8013790:	e00a      	b.n	80137a8 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013792:	3347      	adds	r3, #71	; 0x47
 8013794:	3131      	adds	r1, #49	; 0x31
 8013796:	54e1      	strb	r1, [r4, r3]
 8013798:	e7f4      	b.n	8013784 <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 801379a:	782b      	ldrb	r3, [r5, #0]
 801379c:	6822      	ldr	r2, [r4, #0]
 801379e:	8513      	strh	r3, [r2, #40]	; 0x28
 80137a0:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 80137a2:	5ba2      	ldrh	r2, [r4, r6]
 80137a4:	2a00      	cmp	r2, #0
 80137a6:	d016      	beq.n	80137d6 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80137a8:	3a01      	subs	r2, #1
 80137aa:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80137ac:	003b      	movs	r3, r7
 80137ae:	2200      	movs	r2, #0
 80137b0:	2180      	movs	r1, #128	; 0x80
 80137b2:	0020      	movs	r0, r4
 80137b4:	f7ff ff5c 	bl	8013670 <UART_WaitOnFlagUntilTimeout>
 80137b8:	2800      	cmp	r0, #0
 80137ba:	d12c      	bne.n	8013816 <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80137bc:	68a3      	ldr	r3, [r4, #8]
 80137be:	4543      	cmp	r3, r8
 80137c0:	d1eb      	bne.n	801379a <HAL_UART_Transmit+0x5a>
 80137c2:	6923      	ldr	r3, [r4, #16]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1e8      	bne.n	801379a <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80137c8:	882b      	ldrh	r3, [r5, #0]
 80137ca:	05db      	lsls	r3, r3, #23
 80137cc:	0ddb      	lsrs	r3, r3, #23
 80137ce:	6822      	ldr	r2, [r4, #0]
 80137d0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80137d2:	3502      	adds	r5, #2
 80137d4:	e7e5      	b.n	80137a2 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80137d6:	003b      	movs	r3, r7
 80137d8:	2140      	movs	r1, #64	; 0x40
 80137da:	0020      	movs	r0, r4
 80137dc:	f7ff ff48 	bl	8013670 <UART_WaitOnFlagUntilTimeout>
 80137e0:	2800      	cmp	r0, #0
 80137e2:	d11a      	bne.n	801381a <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80137e4:	2369      	movs	r3, #105	; 0x69
 80137e6:	5ce3      	ldrb	r3, [r4, r3]
 80137e8:	2b32      	cmp	r3, #50	; 0x32
 80137ea:	d006      	beq.n	80137fa <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80137ec:	2369      	movs	r3, #105	; 0x69
 80137ee:	2201      	movs	r2, #1
 80137f0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80137f2:	2368      	movs	r3, #104	; 0x68
 80137f4:	2200      	movs	r2, #0
 80137f6:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80137f8:	e004      	b.n	8013804 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80137fa:	3337      	adds	r3, #55	; 0x37
 80137fc:	2222      	movs	r2, #34	; 0x22
 80137fe:	54e2      	strb	r2, [r4, r3]
 8013800:	e7f7      	b.n	80137f2 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8013802:	2002      	movs	r0, #2
}
 8013804:	bc80      	pop	{r7}
 8013806:	46b8      	mov	r8, r7
 8013808:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 801380a:	2001      	movs	r0, #1
 801380c:	e7fa      	b.n	8013804 <HAL_UART_Transmit+0xc4>
 801380e:	2001      	movs	r0, #1
 8013810:	e7f8      	b.n	8013804 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013812:	2002      	movs	r0, #2
 8013814:	e7f6      	b.n	8013804 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013816:	2003      	movs	r0, #3
 8013818:	e7f4      	b.n	8013804 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 801381a:	2003      	movs	r0, #3
 801381c:	e7f2      	b.n	8013804 <HAL_UART_Transmit+0xc4>
	...

08013820 <UART_CheckIdleState>:
{
 8013820:	b510      	push	{r4, lr}
 8013822:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013824:	2300      	movs	r3, #0
 8013826:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013828:	6803      	ldr	r3, [r0, #0]
 801382a:	4a18      	ldr	r2, [pc, #96]	; (801388c <UART_CheckIdleState+0x6c>)
 801382c:	4293      	cmp	r3, r2
 801382e:	d005      	beq.n	801383c <UART_CheckIdleState+0x1c>
 8013830:	4a17      	ldr	r2, [pc, #92]	; (8013890 <UART_CheckIdleState+0x70>)
 8013832:	4293      	cmp	r3, r2
 8013834:	d002      	beq.n	801383c <UART_CheckIdleState+0x1c>
 8013836:	4a17      	ldr	r2, [pc, #92]	; (8013894 <UART_CheckIdleState+0x74>)
 8013838:	4293      	cmp	r3, r2
 801383a:	d106      	bne.n	801384a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	071b      	lsls	r3, r3, #28
 8013840:	d40b      	bmi.n	801385a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013842:	6823      	ldr	r3, [r4, #0]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	075b      	lsls	r3, r3, #29
 8013848:	d413      	bmi.n	8013872 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 801384a:	2369      	movs	r3, #105	; 0x69
 801384c:	2201      	movs	r2, #1
 801384e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013850:	3b01      	subs	r3, #1
 8013852:	2200      	movs	r2, #0
 8013854:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013856:	2000      	movs	r0, #0
}
 8013858:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801385a:	23fa      	movs	r3, #250	; 0xfa
 801385c:	2180      	movs	r1, #128	; 0x80
 801385e:	009b      	lsls	r3, r3, #2
 8013860:	2200      	movs	r2, #0
 8013862:	0389      	lsls	r1, r1, #14
 8013864:	0020      	movs	r0, r4
 8013866:	f7ff ff03 	bl	8013670 <UART_WaitOnFlagUntilTimeout>
 801386a:	2800      	cmp	r0, #0
 801386c:	d0e9      	beq.n	8013842 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 801386e:	2003      	movs	r0, #3
 8013870:	e7f2      	b.n	8013858 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013872:	23fa      	movs	r3, #250	; 0xfa
 8013874:	2180      	movs	r1, #128	; 0x80
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	2200      	movs	r2, #0
 801387a:	03c9      	lsls	r1, r1, #15
 801387c:	0020      	movs	r0, r4
 801387e:	f7ff fef7 	bl	8013670 <UART_WaitOnFlagUntilTimeout>
 8013882:	2800      	cmp	r0, #0
 8013884:	d0e1      	beq.n	801384a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013886:	2003      	movs	r0, #3
 8013888:	e7e6      	b.n	8013858 <UART_CheckIdleState+0x38>
 801388a:	46c0      	nop			; (mov r8, r8)
 801388c:	40013800 	.word	0x40013800
 8013890:	40004400 	.word	0x40004400
 8013894:	40004800 	.word	0x40004800

08013898 <HAL_UART_Init>:
{
 8013898:	b510      	push	{r4, lr}
 801389a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801389c:	d030      	beq.n	8013900 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 801389e:	2369      	movs	r3, #105	; 0x69
 80138a0:	5cc3      	ldrb	r3, [r0, r3]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d022      	beq.n	80138ec <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80138a6:	2369      	movs	r3, #105	; 0x69
 80138a8:	2202      	movs	r2, #2
 80138aa:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80138ac:	6822      	ldr	r2, [r4, #0]
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	2101      	movs	r1, #1
 80138b2:	438b      	bics	r3, r1
 80138b4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80138b6:	0020      	movs	r0, r4
 80138b8:	f7ff fd4e 	bl	8013358 <UART_SetConfig>
 80138bc:	2801      	cmp	r0, #1
 80138be:	d014      	beq.n	80138ea <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80138c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d118      	bne.n	80138f8 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80138c6:	6822      	ldr	r2, [r4, #0]
 80138c8:	6853      	ldr	r3, [r2, #4]
 80138ca:	490e      	ldr	r1, [pc, #56]	; (8013904 <HAL_UART_Init+0x6c>)
 80138cc:	400b      	ands	r3, r1
 80138ce:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80138d0:	6822      	ldr	r2, [r4, #0]
 80138d2:	6893      	ldr	r3, [r2, #8]
 80138d4:	212a      	movs	r1, #42	; 0x2a
 80138d6:	438b      	bics	r3, r1
 80138d8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80138da:	6822      	ldr	r2, [r4, #0]
 80138dc:	6813      	ldr	r3, [r2, #0]
 80138de:	3929      	subs	r1, #41	; 0x29
 80138e0:	430b      	orrs	r3, r1
 80138e2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80138e4:	0020      	movs	r0, r4
 80138e6:	f7ff ff9b 	bl	8013820 <UART_CheckIdleState>
}
 80138ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80138ec:	3368      	adds	r3, #104	; 0x68
 80138ee:	2200      	movs	r2, #0
 80138f0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80138f2:	f7fa fd43 	bl	800e37c <HAL_UART_MspInit>
 80138f6:	e7d6      	b.n	80138a6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80138f8:	0020      	movs	r0, r4
 80138fa:	f7ff fe49 	bl	8013590 <UART_AdvFeatureConfig>
 80138fe:	e7e2      	b.n	80138c6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013900:	2001      	movs	r0, #1
 8013902:	e7f2      	b.n	80138ea <HAL_UART_Init+0x52>
 8013904:	ffffb7ff 	.word	0xffffb7ff

08013908 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013908:	2369      	movs	r3, #105	; 0x69
 801390a:	5cc3      	ldrb	r3, [r0, r3]
 801390c:	2b12      	cmp	r3, #18
 801390e:	d003      	beq.n	8013918 <UART_Transmit_IT+0x10>
 8013910:	2369      	movs	r3, #105	; 0x69
 8013912:	5cc3      	ldrb	r3, [r0, r3]
 8013914:	2b32      	cmp	r3, #50	; 0x32
 8013916:	d12d      	bne.n	8013974 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013918:	2352      	movs	r3, #82	; 0x52
 801391a:	5ac3      	ldrh	r3, [r0, r3]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d10b      	bne.n	8013938 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013920:	6802      	ldr	r2, [r0, #0]
 8013922:	6813      	ldr	r3, [r2, #0]
 8013924:	2180      	movs	r1, #128	; 0x80
 8013926:	438b      	bics	r3, r1
 8013928:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801392a:	6802      	ldr	r2, [r0, #0]
 801392c:	6813      	ldr	r3, [r2, #0]
 801392e:	3940      	subs	r1, #64	; 0x40
 8013930:	430b      	orrs	r3, r1
 8013932:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8013934:	2000      	movs	r0, #0
 8013936:	e00f      	b.n	8013958 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013938:	2380      	movs	r3, #128	; 0x80
 801393a:	015b      	lsls	r3, r3, #5
 801393c:	6882      	ldr	r2, [r0, #8]
 801393e:	429a      	cmp	r2, r3
 8013940:	d00b      	beq.n	801395a <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013942:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013944:	1c5a      	adds	r2, r3, #1
 8013946:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	6802      	ldr	r2, [r0, #0]
 801394c:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 801394e:	2252      	movs	r2, #82	; 0x52
 8013950:	5a83      	ldrh	r3, [r0, r2]
 8013952:	3b01      	subs	r3, #1
 8013954:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8013956:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013958:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801395a:	6903      	ldr	r3, [r0, #16]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d1f0      	bne.n	8013942 <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013960:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	05db      	lsls	r3, r3, #23
 8013966:	0ddb      	lsrs	r3, r3, #23
 8013968:	6802      	ldr	r2, [r0, #0]
 801396a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 801396c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801396e:	3302      	adds	r3, #2
 8013970:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013972:	e7ec      	b.n	801394e <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8013974:	2002      	movs	r0, #2
 8013976:	e7ef      	b.n	8013958 <UART_Transmit_IT+0x50>

08013978 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013978:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801397a:	6802      	ldr	r2, [r0, #0]
 801397c:	6813      	ldr	r3, [r2, #0]
 801397e:	2140      	movs	r1, #64	; 0x40
 8013980:	438b      	bics	r3, r1
 8013982:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013984:	2369      	movs	r3, #105	; 0x69
 8013986:	5cc3      	ldrb	r3, [r0, r3]
 8013988:	2b32      	cmp	r3, #50	; 0x32
 801398a:	d00a      	beq.n	80139a2 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801398c:	6801      	ldr	r1, [r0, #0]
 801398e:	688b      	ldr	r3, [r1, #8]
 8013990:	2201      	movs	r2, #1
 8013992:	4393      	bics	r3, r2
 8013994:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013996:	2369      	movs	r3, #105	; 0x69
 8013998:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 801399a:	f7fa fa2b 	bl	800ddf4 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801399e:	2000      	movs	r0, #0
 80139a0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80139a2:	3337      	adds	r3, #55	; 0x37
 80139a4:	2222      	movs	r2, #34	; 0x22
 80139a6:	54c2      	strb	r2, [r0, r3]
 80139a8:	e7f7      	b.n	801399a <UART_EndTransmit_IT+0x22>
	...

080139ac <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80139ac:	b510      	push	{r4, lr}
 80139ae:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80139b0:	2269      	movs	r2, #105	; 0x69
 80139b2:	5c82      	ldrb	r2, [r0, r2]
 80139b4:	2a22      	cmp	r2, #34	; 0x22
 80139b6:	d003      	beq.n	80139c0 <UART_Receive_IT+0x14>
 80139b8:	2269      	movs	r2, #105	; 0x69
 80139ba:	5c82      	ldrb	r2, [r0, r2]
 80139bc:	2a32      	cmp	r2, #50	; 0x32
 80139be:	d13f      	bne.n	8013a40 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 80139c0:	225c      	movs	r2, #92	; 0x5c
 80139c2:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139c4:	2180      	movs	r1, #128	; 0x80
 80139c6:	0149      	lsls	r1, r1, #5
 80139c8:	689a      	ldr	r2, [r3, #8]
 80139ca:	428a      	cmp	r2, r1
 80139cc:	d028      	beq.n	8013a20 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80139d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80139d4:	1c4c      	adds	r4, r1, #1
 80139d6:	655c      	str	r4, [r3, #84]	; 0x54
 80139d8:	4002      	ands	r2, r0
 80139da:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 80139dc:	215a      	movs	r1, #90	; 0x5a
 80139de:	5a5a      	ldrh	r2, [r3, r1]
 80139e0:	3a01      	subs	r2, #1
 80139e2:	b292      	uxth	r2, r2
 80139e4:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80139e6:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 80139e8:	2a00      	cmp	r2, #0
 80139ea:	d118      	bne.n	8013a1e <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80139ec:	6819      	ldr	r1, [r3, #0]
 80139ee:	680a      	ldr	r2, [r1, #0]
 80139f0:	3020      	adds	r0, #32
 80139f2:	4382      	bics	r2, r0
 80139f4:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80139f6:	2269      	movs	r2, #105	; 0x69
 80139f8:	5c9a      	ldrb	r2, [r3, r2]
 80139fa:	2a32      	cmp	r2, #50	; 0x32
 80139fc:	d01c      	beq.n	8013a38 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80139fe:	6819      	ldr	r1, [r3, #0]
 8013a00:	680a      	ldr	r2, [r1, #0]
 8013a02:	4810      	ldr	r0, [pc, #64]	; (8013a44 <UART_Receive_IT+0x98>)
 8013a04:	4002      	ands	r2, r0
 8013a06:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013a08:	6818      	ldr	r0, [r3, #0]
 8013a0a:	6882      	ldr	r2, [r0, #8]
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	438a      	bics	r2, r1
 8013a10:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 8013a12:	2269      	movs	r2, #105	; 0x69
 8013a14:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 8013a16:	0018      	movs	r0, r3
 8013a18:	f7fa fa2a 	bl	800de70 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013a1c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013a1e:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a20:	691a      	ldr	r2, [r3, #16]
 8013a22:	2a00      	cmp	r2, #0
 8013a24:	d1d3      	bne.n	80139ce <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013a2a:	4002      	ands	r2, r0
 8013a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013a2e:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8013a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a32:	3202      	adds	r2, #2
 8013a34:	655a      	str	r2, [r3, #84]	; 0x54
 8013a36:	e7d1      	b.n	80139dc <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013a38:	3237      	adds	r2, #55	; 0x37
 8013a3a:	2112      	movs	r1, #18
 8013a3c:	5499      	strb	r1, [r3, r2]
 8013a3e:	e7ea      	b.n	8013a16 <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8013a40:	2002      	movs	r0, #2
 8013a42:	e7ec      	b.n	8013a1e <UART_Receive_IT+0x72>
 8013a44:	fffffeff 	.word	0xfffffeff

08013a48 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013a48:	4770      	bx	lr

08013a4a <HAL_UART_IRQHandler>:
{
 8013a4a:	b510      	push	{r4, lr}
 8013a4c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013a4e:	6803      	ldr	r3, [r0, #0]
 8013a50:	69da      	ldr	r2, [r3, #28]
 8013a52:	07d2      	lsls	r2, r2, #31
 8013a54:	d509      	bpl.n	8013a6a <HAL_UART_IRQHandler+0x20>
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	05d2      	lsls	r2, r2, #23
 8013a5a:	d506      	bpl.n	8013a6a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013a60:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013a62:	4313      	orrs	r3, r2
 8013a64:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a66:	2369      	movs	r3, #105	; 0x69
 8013a68:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	69da      	ldr	r2, [r3, #28]
 8013a6e:	0792      	lsls	r2, r2, #30
 8013a70:	d50b      	bpl.n	8013a8a <HAL_UART_IRQHandler+0x40>
 8013a72:	689a      	ldr	r2, [r3, #8]
 8013a74:	07d2      	lsls	r2, r2, #31
 8013a76:	d508      	bpl.n	8013a8a <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013a78:	2202      	movs	r2, #2
 8013a7a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013a7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a7e:	3202      	adds	r2, #2
 8013a80:	4313      	orrs	r3, r2
 8013a82:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013a84:	2369      	movs	r3, #105	; 0x69
 8013a86:	3a03      	subs	r2, #3
 8013a88:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013a8a:	6823      	ldr	r3, [r4, #0]
 8013a8c:	69da      	ldr	r2, [r3, #28]
 8013a8e:	0752      	lsls	r2, r2, #29
 8013a90:	d50b      	bpl.n	8013aaa <HAL_UART_IRQHandler+0x60>
 8013a92:	689a      	ldr	r2, [r3, #8]
 8013a94:	07d2      	lsls	r2, r2, #31
 8013a96:	d508      	bpl.n	8013aaa <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013a98:	2204      	movs	r2, #4
 8013a9a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013a9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013a9e:	3a02      	subs	r2, #2
 8013aa0:	4313      	orrs	r3, r2
 8013aa2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013aa4:	2369      	movs	r3, #105	; 0x69
 8013aa6:	3a01      	subs	r2, #1
 8013aa8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013aaa:	6823      	ldr	r3, [r4, #0]
 8013aac:	69da      	ldr	r2, [r3, #28]
 8013aae:	0712      	lsls	r2, r2, #28
 8013ab0:	d50a      	bpl.n	8013ac8 <HAL_UART_IRQHandler+0x7e>
 8013ab2:	689a      	ldr	r2, [r3, #8]
 8013ab4:	07d2      	lsls	r2, r2, #31
 8013ab6:	d507      	bpl.n	8013ac8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013ab8:	2208      	movs	r2, #8
 8013aba:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013abc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013ac2:	2369      	movs	r3, #105	; 0x69
 8013ac4:	3a07      	subs	r2, #7
 8013ac6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013ac8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d11c      	bne.n	8013b08 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013ace:	6823      	ldr	r3, [r4, #0]
 8013ad0:	69da      	ldr	r2, [r3, #28]
 8013ad2:	02d2      	lsls	r2, r2, #11
 8013ad4:	d502      	bpl.n	8013adc <HAL_UART_IRQHandler+0x92>
 8013ad6:	689a      	ldr	r2, [r3, #8]
 8013ad8:	0252      	lsls	r2, r2, #9
 8013ada:	d419      	bmi.n	8013b10 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013adc:	6823      	ldr	r3, [r4, #0]
 8013ade:	69da      	ldr	r2, [r3, #28]
 8013ae0:	0692      	lsls	r2, r2, #26
 8013ae2:	d502      	bpl.n	8013aea <HAL_UART_IRQHandler+0xa0>
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	069b      	lsls	r3, r3, #26
 8013ae8:	d41c      	bmi.n	8013b24 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013aea:	6823      	ldr	r3, [r4, #0]
 8013aec:	69da      	ldr	r2, [r3, #28]
 8013aee:	0612      	lsls	r2, r2, #24
 8013af0:	d502      	bpl.n	8013af8 <HAL_UART_IRQHandler+0xae>
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	061b      	lsls	r3, r3, #24
 8013af6:	d41e      	bmi.n	8013b36 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013af8:	6823      	ldr	r3, [r4, #0]
 8013afa:	69da      	ldr	r2, [r3, #28]
 8013afc:	0652      	lsls	r2, r2, #25
 8013afe:	d502      	bpl.n	8013b06 <HAL_UART_IRQHandler+0xbc>
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	065b      	lsls	r3, r3, #25
 8013b04:	d41b      	bmi.n	8013b3e <HAL_UART_IRQHandler+0xf4>
}
 8013b06:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013b08:	0020      	movs	r0, r4
 8013b0a:	f7fa f98b 	bl	800de24 <HAL_UART_ErrorCallback>
 8013b0e:	e7de      	b.n	8013ace <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013b10:	2280      	movs	r2, #128	; 0x80
 8013b12:	0352      	lsls	r2, r2, #13
 8013b14:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013b16:	2369      	movs	r3, #105	; 0x69
 8013b18:	2201      	movs	r2, #1
 8013b1a:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013b1c:	0020      	movs	r0, r4
 8013b1e:	f7ff ff93 	bl	8013a48 <HAL_UARTEx_WakeupCallback>
 8013b22:	e7db      	b.n	8013adc <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013b24:	0020      	movs	r0, r4
 8013b26:	f7ff ff41 	bl	80139ac <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013b2a:	6822      	ldr	r2, [r4, #0]
 8013b2c:	6993      	ldr	r3, [r2, #24]
 8013b2e:	2108      	movs	r1, #8
 8013b30:	430b      	orrs	r3, r1
 8013b32:	6193      	str	r3, [r2, #24]
 8013b34:	e7d9      	b.n	8013aea <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013b36:	0020      	movs	r0, r4
 8013b38:	f7ff fee6 	bl	8013908 <UART_Transmit_IT>
 8013b3c:	e7dc      	b.n	8013af8 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8013b3e:	0020      	movs	r0, r4
 8013b40:	f7ff ff1a 	bl	8013978 <UART_EndTransmit_IT>
}
 8013b44:	e7df      	b.n	8013b06 <HAL_UART_IRQHandler+0xbc>

08013b46 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013b46:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013b48:	f7f0 f822 	bl	8003b90 <Module_Init>

	//Don't place your code here.
	for(;;){}
 8013b4c:	e7fe      	b.n	8013b4c <main+0x6>

08013b4e <UserTask>:
/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){

	while(1){
 8013b4e:	e7fe      	b.n	8013b4e <UserTask>

08013b50 <atof>:
 8013b50:	b510      	push	{r4, lr}
 8013b52:	2100      	movs	r1, #0
 8013b54:	f001 fcba 	bl	80154cc <strtod>
 8013b58:	bd10      	pop	{r4, pc}

08013b5a <atoi>:
 8013b5a:	b510      	push	{r4, lr}
 8013b5c:	220a      	movs	r2, #10
 8013b5e:	2100      	movs	r1, #0
 8013b60:	f001 fdb4 	bl	80156cc <strtol>
 8013b64:	bd10      	pop	{r4, pc}

08013b66 <atol>:
 8013b66:	b510      	push	{r4, lr}
 8013b68:	220a      	movs	r2, #10
 8013b6a:	2100      	movs	r1, #0
 8013b6c:	f001 fdae 	bl	80156cc <strtol>
 8013b70:	bd10      	pop	{r4, pc}
	...

08013b74 <__libc_init_array>:
 8013b74:	b570      	push	{r4, r5, r6, lr}
 8013b76:	2600      	movs	r6, #0
 8013b78:	4d0c      	ldr	r5, [pc, #48]	; (8013bac <__libc_init_array+0x38>)
 8013b7a:	4c0d      	ldr	r4, [pc, #52]	; (8013bb0 <__libc_init_array+0x3c>)
 8013b7c:	1b64      	subs	r4, r4, r5
 8013b7e:	10a4      	asrs	r4, r4, #2
 8013b80:	42a6      	cmp	r6, r4
 8013b82:	d109      	bne.n	8013b98 <__libc_init_array+0x24>
 8013b84:	2600      	movs	r6, #0
 8013b86:	f004 fc8f 	bl	80184a8 <_init>
 8013b8a:	4d0a      	ldr	r5, [pc, #40]	; (8013bb4 <__libc_init_array+0x40>)
 8013b8c:	4c0a      	ldr	r4, [pc, #40]	; (8013bb8 <__libc_init_array+0x44>)
 8013b8e:	1b64      	subs	r4, r4, r5
 8013b90:	10a4      	asrs	r4, r4, #2
 8013b92:	42a6      	cmp	r6, r4
 8013b94:	d105      	bne.n	8013ba2 <__libc_init_array+0x2e>
 8013b96:	bd70      	pop	{r4, r5, r6, pc}
 8013b98:	00b3      	lsls	r3, r6, #2
 8013b9a:	58eb      	ldr	r3, [r5, r3]
 8013b9c:	4798      	blx	r3
 8013b9e:	3601      	adds	r6, #1
 8013ba0:	e7ee      	b.n	8013b80 <__libc_init_array+0xc>
 8013ba2:	00b3      	lsls	r3, r6, #2
 8013ba4:	58eb      	ldr	r3, [r5, r3]
 8013ba6:	4798      	blx	r3
 8013ba8:	3601      	adds	r6, #1
 8013baa:	e7f2      	b.n	8013b92 <__libc_init_array+0x1e>
 8013bac:	0801ba70 	.word	0x0801ba70
 8013bb0:	0801ba70 	.word	0x0801ba70
 8013bb4:	0801ba70 	.word	0x0801ba70
 8013bb8:	0801ba74 	.word	0x0801ba74

08013bbc <malloc>:
 8013bbc:	b510      	push	{r4, lr}
 8013bbe:	4b03      	ldr	r3, [pc, #12]	; (8013bcc <malloc+0x10>)
 8013bc0:	0001      	movs	r1, r0
 8013bc2:	6818      	ldr	r0, [r3, #0]
 8013bc4:	f000 f878 	bl	8013cb8 <_malloc_r>
 8013bc8:	bd10      	pop	{r4, pc}
 8013bca:	46c0      	nop			; (mov r8, r8)
 8013bcc:	200000c0 	.word	0x200000c0

08013bd0 <free>:
 8013bd0:	b510      	push	{r4, lr}
 8013bd2:	4b03      	ldr	r3, [pc, #12]	; (8013be0 <free+0x10>)
 8013bd4:	0001      	movs	r1, r0
 8013bd6:	6818      	ldr	r0, [r3, #0]
 8013bd8:	f000 f824 	bl	8013c24 <_free_r>
 8013bdc:	bd10      	pop	{r4, pc}
 8013bde:	46c0      	nop			; (mov r8, r8)
 8013be0:	200000c0 	.word	0x200000c0

08013be4 <memcmp>:
 8013be4:	b530      	push	{r4, r5, lr}
 8013be6:	2400      	movs	r4, #0
 8013be8:	3901      	subs	r1, #1
 8013bea:	42a2      	cmp	r2, r4
 8013bec:	d101      	bne.n	8013bf2 <memcmp+0xe>
 8013bee:	2000      	movs	r0, #0
 8013bf0:	e005      	b.n	8013bfe <memcmp+0x1a>
 8013bf2:	5d03      	ldrb	r3, [r0, r4]
 8013bf4:	3401      	adds	r4, #1
 8013bf6:	5d0d      	ldrb	r5, [r1, r4]
 8013bf8:	42ab      	cmp	r3, r5
 8013bfa:	d0f6      	beq.n	8013bea <memcmp+0x6>
 8013bfc:	1b58      	subs	r0, r3, r5
 8013bfe:	bd30      	pop	{r4, r5, pc}

08013c00 <memcpy>:
 8013c00:	2300      	movs	r3, #0
 8013c02:	b510      	push	{r4, lr}
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d100      	bne.n	8013c0a <memcpy+0xa>
 8013c08:	bd10      	pop	{r4, pc}
 8013c0a:	5ccc      	ldrb	r4, [r1, r3]
 8013c0c:	54c4      	strb	r4, [r0, r3]
 8013c0e:	3301      	adds	r3, #1
 8013c10:	e7f8      	b.n	8013c04 <memcpy+0x4>

08013c12 <memset>:
 8013c12:	0003      	movs	r3, r0
 8013c14:	1882      	adds	r2, r0, r2
 8013c16:	4293      	cmp	r3, r2
 8013c18:	d100      	bne.n	8013c1c <memset+0xa>
 8013c1a:	4770      	bx	lr
 8013c1c:	7019      	strb	r1, [r3, #0]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	e7f9      	b.n	8013c16 <memset+0x4>
	...

08013c24 <_free_r>:
 8013c24:	b570      	push	{r4, r5, r6, lr}
 8013c26:	0005      	movs	r5, r0
 8013c28:	2900      	cmp	r1, #0
 8013c2a:	d010      	beq.n	8013c4e <_free_r+0x2a>
 8013c2c:	1f0c      	subs	r4, r1, #4
 8013c2e:	6823      	ldr	r3, [r4, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	da00      	bge.n	8013c36 <_free_r+0x12>
 8013c34:	18e4      	adds	r4, r4, r3
 8013c36:	0028      	movs	r0, r5
 8013c38:	f002 ffc6 	bl	8016bc8 <__malloc_lock>
 8013c3c:	4a1d      	ldr	r2, [pc, #116]	; (8013cb4 <_free_r+0x90>)
 8013c3e:	6813      	ldr	r3, [r2, #0]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d105      	bne.n	8013c50 <_free_r+0x2c>
 8013c44:	6063      	str	r3, [r4, #4]
 8013c46:	6014      	str	r4, [r2, #0]
 8013c48:	0028      	movs	r0, r5
 8013c4a:	f002 ffc5 	bl	8016bd8 <__malloc_unlock>
 8013c4e:	bd70      	pop	{r4, r5, r6, pc}
 8013c50:	42a3      	cmp	r3, r4
 8013c52:	d908      	bls.n	8013c66 <_free_r+0x42>
 8013c54:	6821      	ldr	r1, [r4, #0]
 8013c56:	1860      	adds	r0, r4, r1
 8013c58:	4283      	cmp	r3, r0
 8013c5a:	d1f3      	bne.n	8013c44 <_free_r+0x20>
 8013c5c:	6818      	ldr	r0, [r3, #0]
 8013c5e:	685b      	ldr	r3, [r3, #4]
 8013c60:	1841      	adds	r1, r0, r1
 8013c62:	6021      	str	r1, [r4, #0]
 8013c64:	e7ee      	b.n	8013c44 <_free_r+0x20>
 8013c66:	001a      	movs	r2, r3
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d001      	beq.n	8013c72 <_free_r+0x4e>
 8013c6e:	42a3      	cmp	r3, r4
 8013c70:	d9f9      	bls.n	8013c66 <_free_r+0x42>
 8013c72:	6811      	ldr	r1, [r2, #0]
 8013c74:	1850      	adds	r0, r2, r1
 8013c76:	42a0      	cmp	r0, r4
 8013c78:	d10b      	bne.n	8013c92 <_free_r+0x6e>
 8013c7a:	6820      	ldr	r0, [r4, #0]
 8013c7c:	1809      	adds	r1, r1, r0
 8013c7e:	1850      	adds	r0, r2, r1
 8013c80:	6011      	str	r1, [r2, #0]
 8013c82:	4283      	cmp	r3, r0
 8013c84:	d1e0      	bne.n	8013c48 <_free_r+0x24>
 8013c86:	6818      	ldr	r0, [r3, #0]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	1841      	adds	r1, r0, r1
 8013c8c:	6011      	str	r1, [r2, #0]
 8013c8e:	6053      	str	r3, [r2, #4]
 8013c90:	e7da      	b.n	8013c48 <_free_r+0x24>
 8013c92:	42a0      	cmp	r0, r4
 8013c94:	d902      	bls.n	8013c9c <_free_r+0x78>
 8013c96:	230c      	movs	r3, #12
 8013c98:	602b      	str	r3, [r5, #0]
 8013c9a:	e7d5      	b.n	8013c48 <_free_r+0x24>
 8013c9c:	6821      	ldr	r1, [r4, #0]
 8013c9e:	1860      	adds	r0, r4, r1
 8013ca0:	4283      	cmp	r3, r0
 8013ca2:	d103      	bne.n	8013cac <_free_r+0x88>
 8013ca4:	6818      	ldr	r0, [r3, #0]
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	1841      	adds	r1, r0, r1
 8013caa:	6021      	str	r1, [r4, #0]
 8013cac:	6063      	str	r3, [r4, #4]
 8013cae:	6054      	str	r4, [r2, #4]
 8013cb0:	e7ca      	b.n	8013c48 <_free_r+0x24>
 8013cb2:	46c0      	nop			; (mov r8, r8)
 8013cb4:	200061e8 	.word	0x200061e8

08013cb8 <_malloc_r>:
 8013cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cba:	2303      	movs	r3, #3
 8013cbc:	1ccd      	adds	r5, r1, #3
 8013cbe:	439d      	bics	r5, r3
 8013cc0:	3508      	adds	r5, #8
 8013cc2:	0006      	movs	r6, r0
 8013cc4:	2d0c      	cmp	r5, #12
 8013cc6:	d21f      	bcs.n	8013d08 <_malloc_r+0x50>
 8013cc8:	250c      	movs	r5, #12
 8013cca:	42a9      	cmp	r1, r5
 8013ccc:	d81e      	bhi.n	8013d0c <_malloc_r+0x54>
 8013cce:	0030      	movs	r0, r6
 8013cd0:	f002 ff7a 	bl	8016bc8 <__malloc_lock>
 8013cd4:	4925      	ldr	r1, [pc, #148]	; (8013d6c <_malloc_r+0xb4>)
 8013cd6:	680a      	ldr	r2, [r1, #0]
 8013cd8:	0014      	movs	r4, r2
 8013cda:	2c00      	cmp	r4, #0
 8013cdc:	d11a      	bne.n	8013d14 <_malloc_r+0x5c>
 8013cde:	4f24      	ldr	r7, [pc, #144]	; (8013d70 <_malloc_r+0xb8>)
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d104      	bne.n	8013cf0 <_malloc_r+0x38>
 8013ce6:	0021      	movs	r1, r4
 8013ce8:	0030      	movs	r0, r6
 8013cea:	f000 fd05 	bl	80146f8 <_sbrk_r>
 8013cee:	6038      	str	r0, [r7, #0]
 8013cf0:	0029      	movs	r1, r5
 8013cf2:	0030      	movs	r0, r6
 8013cf4:	f000 fd00 	bl	80146f8 <_sbrk_r>
 8013cf8:	1c43      	adds	r3, r0, #1
 8013cfa:	d12b      	bne.n	8013d54 <_malloc_r+0x9c>
 8013cfc:	230c      	movs	r3, #12
 8013cfe:	0030      	movs	r0, r6
 8013d00:	6033      	str	r3, [r6, #0]
 8013d02:	f002 ff69 	bl	8016bd8 <__malloc_unlock>
 8013d06:	e003      	b.n	8013d10 <_malloc_r+0x58>
 8013d08:	2d00      	cmp	r5, #0
 8013d0a:	dade      	bge.n	8013cca <_malloc_r+0x12>
 8013d0c:	230c      	movs	r3, #12
 8013d0e:	6033      	str	r3, [r6, #0]
 8013d10:	2000      	movs	r0, #0
 8013d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d14:	6823      	ldr	r3, [r4, #0]
 8013d16:	1b5b      	subs	r3, r3, r5
 8013d18:	d419      	bmi.n	8013d4e <_malloc_r+0x96>
 8013d1a:	2b0b      	cmp	r3, #11
 8013d1c:	d903      	bls.n	8013d26 <_malloc_r+0x6e>
 8013d1e:	6023      	str	r3, [r4, #0]
 8013d20:	18e4      	adds	r4, r4, r3
 8013d22:	6025      	str	r5, [r4, #0]
 8013d24:	e003      	b.n	8013d2e <_malloc_r+0x76>
 8013d26:	6863      	ldr	r3, [r4, #4]
 8013d28:	42a2      	cmp	r2, r4
 8013d2a:	d10e      	bne.n	8013d4a <_malloc_r+0x92>
 8013d2c:	600b      	str	r3, [r1, #0]
 8013d2e:	0030      	movs	r0, r6
 8013d30:	f002 ff52 	bl	8016bd8 <__malloc_unlock>
 8013d34:	0020      	movs	r0, r4
 8013d36:	2207      	movs	r2, #7
 8013d38:	300b      	adds	r0, #11
 8013d3a:	1d23      	adds	r3, r4, #4
 8013d3c:	4390      	bics	r0, r2
 8013d3e:	1ac2      	subs	r2, r0, r3
 8013d40:	4298      	cmp	r0, r3
 8013d42:	d0e6      	beq.n	8013d12 <_malloc_r+0x5a>
 8013d44:	1a1b      	subs	r3, r3, r0
 8013d46:	50a3      	str	r3, [r4, r2]
 8013d48:	e7e3      	b.n	8013d12 <_malloc_r+0x5a>
 8013d4a:	6053      	str	r3, [r2, #4]
 8013d4c:	e7ef      	b.n	8013d2e <_malloc_r+0x76>
 8013d4e:	0022      	movs	r2, r4
 8013d50:	6864      	ldr	r4, [r4, #4]
 8013d52:	e7c2      	b.n	8013cda <_malloc_r+0x22>
 8013d54:	2303      	movs	r3, #3
 8013d56:	1cc4      	adds	r4, r0, #3
 8013d58:	439c      	bics	r4, r3
 8013d5a:	42a0      	cmp	r0, r4
 8013d5c:	d0e1      	beq.n	8013d22 <_malloc_r+0x6a>
 8013d5e:	1a21      	subs	r1, r4, r0
 8013d60:	0030      	movs	r0, r6
 8013d62:	f000 fcc9 	bl	80146f8 <_sbrk_r>
 8013d66:	1c43      	adds	r3, r0, #1
 8013d68:	d1db      	bne.n	8013d22 <_malloc_r+0x6a>
 8013d6a:	e7c7      	b.n	8013cfc <_malloc_r+0x44>
 8013d6c:	200061e8 	.word	0x200061e8
 8013d70:	200061ec 	.word	0x200061ec

08013d74 <__cvt>:
 8013d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d76:	001e      	movs	r6, r3
 8013d78:	2300      	movs	r3, #0
 8013d7a:	0014      	movs	r4, r2
 8013d7c:	b08b      	sub	sp, #44	; 0x2c
 8013d7e:	429e      	cmp	r6, r3
 8013d80:	da04      	bge.n	8013d8c <__cvt+0x18>
 8013d82:	2180      	movs	r1, #128	; 0x80
 8013d84:	0609      	lsls	r1, r1, #24
 8013d86:	1873      	adds	r3, r6, r1
 8013d88:	001e      	movs	r6, r3
 8013d8a:	232d      	movs	r3, #45	; 0x2d
 8013d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d8e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013d90:	7013      	strb	r3, [r2, #0]
 8013d92:	2320      	movs	r3, #32
 8013d94:	2203      	movs	r2, #3
 8013d96:	439f      	bics	r7, r3
 8013d98:	2f46      	cmp	r7, #70	; 0x46
 8013d9a:	d007      	beq.n	8013dac <__cvt+0x38>
 8013d9c:	003b      	movs	r3, r7
 8013d9e:	3b45      	subs	r3, #69	; 0x45
 8013da0:	4259      	negs	r1, r3
 8013da2:	414b      	adcs	r3, r1
 8013da4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013da6:	3a01      	subs	r2, #1
 8013da8:	18cb      	adds	r3, r1, r3
 8013daa:	9310      	str	r3, [sp, #64]	; 0x40
 8013dac:	ab09      	add	r3, sp, #36	; 0x24
 8013dae:	9304      	str	r3, [sp, #16]
 8013db0:	ab08      	add	r3, sp, #32
 8013db2:	9303      	str	r3, [sp, #12]
 8013db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013db6:	9200      	str	r2, [sp, #0]
 8013db8:	9302      	str	r3, [sp, #8]
 8013dba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013dbc:	0022      	movs	r2, r4
 8013dbe:	9301      	str	r3, [sp, #4]
 8013dc0:	0033      	movs	r3, r6
 8013dc2:	f001 fd39 	bl	8015838 <_dtoa_r>
 8013dc6:	0005      	movs	r5, r0
 8013dc8:	2f47      	cmp	r7, #71	; 0x47
 8013dca:	d102      	bne.n	8013dd2 <__cvt+0x5e>
 8013dcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013dce:	07db      	lsls	r3, r3, #31
 8013dd0:	d528      	bpl.n	8013e24 <__cvt+0xb0>
 8013dd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013dd4:	18eb      	adds	r3, r5, r3
 8013dd6:	9307      	str	r3, [sp, #28]
 8013dd8:	2f46      	cmp	r7, #70	; 0x46
 8013dda:	d114      	bne.n	8013e06 <__cvt+0x92>
 8013ddc:	782b      	ldrb	r3, [r5, #0]
 8013dde:	2b30      	cmp	r3, #48	; 0x30
 8013de0:	d10c      	bne.n	8013dfc <__cvt+0x88>
 8013de2:	2200      	movs	r2, #0
 8013de4:	2300      	movs	r3, #0
 8013de6:	0020      	movs	r0, r4
 8013de8:	0031      	movs	r1, r6
 8013dea:	f7ec fb37 	bl	800045c <__aeabi_dcmpeq>
 8013dee:	2800      	cmp	r0, #0
 8013df0:	d104      	bne.n	8013dfc <__cvt+0x88>
 8013df2:	2301      	movs	r3, #1
 8013df4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013df6:	1a9b      	subs	r3, r3, r2
 8013df8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013dfa:	6013      	str	r3, [r2, #0]
 8013dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013dfe:	9a07      	ldr	r2, [sp, #28]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	18d3      	adds	r3, r2, r3
 8013e04:	9307      	str	r3, [sp, #28]
 8013e06:	2200      	movs	r2, #0
 8013e08:	2300      	movs	r3, #0
 8013e0a:	0020      	movs	r0, r4
 8013e0c:	0031      	movs	r1, r6
 8013e0e:	f7ec fb25 	bl	800045c <__aeabi_dcmpeq>
 8013e12:	2800      	cmp	r0, #0
 8013e14:	d001      	beq.n	8013e1a <__cvt+0xa6>
 8013e16:	9b07      	ldr	r3, [sp, #28]
 8013e18:	9309      	str	r3, [sp, #36]	; 0x24
 8013e1a:	2230      	movs	r2, #48	; 0x30
 8013e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e1e:	9907      	ldr	r1, [sp, #28]
 8013e20:	428b      	cmp	r3, r1
 8013e22:	d306      	bcc.n	8013e32 <__cvt+0xbe>
 8013e24:	0028      	movs	r0, r5
 8013e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013e2a:	1b5b      	subs	r3, r3, r5
 8013e2c:	6013      	str	r3, [r2, #0]
 8013e2e:	b00b      	add	sp, #44	; 0x2c
 8013e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e32:	1c59      	adds	r1, r3, #1
 8013e34:	9109      	str	r1, [sp, #36]	; 0x24
 8013e36:	701a      	strb	r2, [r3, #0]
 8013e38:	e7f0      	b.n	8013e1c <__cvt+0xa8>

08013e3a <__exponent>:
 8013e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e3c:	1c83      	adds	r3, r0, #2
 8013e3e:	b087      	sub	sp, #28
 8013e40:	9303      	str	r3, [sp, #12]
 8013e42:	0005      	movs	r5, r0
 8013e44:	000c      	movs	r4, r1
 8013e46:	232b      	movs	r3, #43	; 0x2b
 8013e48:	7002      	strb	r2, [r0, #0]
 8013e4a:	2900      	cmp	r1, #0
 8013e4c:	da01      	bge.n	8013e52 <__exponent+0x18>
 8013e4e:	424c      	negs	r4, r1
 8013e50:	3302      	adds	r3, #2
 8013e52:	706b      	strb	r3, [r5, #1]
 8013e54:	2c09      	cmp	r4, #9
 8013e56:	dd31      	ble.n	8013ebc <__exponent+0x82>
 8013e58:	270a      	movs	r7, #10
 8013e5a:	ab04      	add	r3, sp, #16
 8013e5c:	1dde      	adds	r6, r3, #7
 8013e5e:	0020      	movs	r0, r4
 8013e60:	0039      	movs	r1, r7
 8013e62:	9601      	str	r6, [sp, #4]
 8013e64:	f7ec fae4 	bl	8000430 <__aeabi_idivmod>
 8013e68:	3e01      	subs	r6, #1
 8013e6a:	3130      	adds	r1, #48	; 0x30
 8013e6c:	0020      	movs	r0, r4
 8013e6e:	7031      	strb	r1, [r6, #0]
 8013e70:	0039      	movs	r1, r7
 8013e72:	9402      	str	r4, [sp, #8]
 8013e74:	f7ec f9f6 	bl	8000264 <__divsi3>
 8013e78:	9b02      	ldr	r3, [sp, #8]
 8013e7a:	0004      	movs	r4, r0
 8013e7c:	2b63      	cmp	r3, #99	; 0x63
 8013e7e:	dcee      	bgt.n	8013e5e <__exponent+0x24>
 8013e80:	9b01      	ldr	r3, [sp, #4]
 8013e82:	3430      	adds	r4, #48	; 0x30
 8013e84:	1e9a      	subs	r2, r3, #2
 8013e86:	0013      	movs	r3, r2
 8013e88:	9903      	ldr	r1, [sp, #12]
 8013e8a:	7014      	strb	r4, [r2, #0]
 8013e8c:	a804      	add	r0, sp, #16
 8013e8e:	3007      	adds	r0, #7
 8013e90:	4298      	cmp	r0, r3
 8013e92:	d80e      	bhi.n	8013eb2 <__exponent+0x78>
 8013e94:	ab04      	add	r3, sp, #16
 8013e96:	3307      	adds	r3, #7
 8013e98:	2000      	movs	r0, #0
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d804      	bhi.n	8013ea8 <__exponent+0x6e>
 8013e9e:	ab04      	add	r3, sp, #16
 8013ea0:	3009      	adds	r0, #9
 8013ea2:	18c0      	adds	r0, r0, r3
 8013ea4:	9b01      	ldr	r3, [sp, #4]
 8013ea6:	1ac0      	subs	r0, r0, r3
 8013ea8:	9b03      	ldr	r3, [sp, #12]
 8013eaa:	1818      	adds	r0, r3, r0
 8013eac:	1b40      	subs	r0, r0, r5
 8013eae:	b007      	add	sp, #28
 8013eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eb2:	7818      	ldrb	r0, [r3, #0]
 8013eb4:	3301      	adds	r3, #1
 8013eb6:	7008      	strb	r0, [r1, #0]
 8013eb8:	3101      	adds	r1, #1
 8013eba:	e7e7      	b.n	8013e8c <__exponent+0x52>
 8013ebc:	2330      	movs	r3, #48	; 0x30
 8013ebe:	18e4      	adds	r4, r4, r3
 8013ec0:	70ab      	strb	r3, [r5, #2]
 8013ec2:	1d28      	adds	r0, r5, #4
 8013ec4:	70ec      	strb	r4, [r5, #3]
 8013ec6:	e7f1      	b.n	8013eac <__exponent+0x72>

08013ec8 <_printf_float>:
 8013ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eca:	b095      	sub	sp, #84	; 0x54
 8013ecc:	000c      	movs	r4, r1
 8013ece:	9208      	str	r2, [sp, #32]
 8013ed0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8013ed4:	0007      	movs	r7, r0
 8013ed6:	f002 fe55 	bl	8016b84 <_localeconv_r>
 8013eda:	6803      	ldr	r3, [r0, #0]
 8013edc:	0018      	movs	r0, r3
 8013ede:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ee0:	f7ec f91a 	bl	8000118 <strlen>
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	9312      	str	r3, [sp, #72]	; 0x48
 8013ee8:	7e23      	ldrb	r3, [r4, #24]
 8013eea:	2207      	movs	r2, #7
 8013eec:	001e      	movs	r6, r3
 8013eee:	6823      	ldr	r3, [r4, #0]
 8013ef0:	900d      	str	r0, [sp, #52]	; 0x34
 8013ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8013ef4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013ef6:	682b      	ldr	r3, [r5, #0]
 8013ef8:	05c9      	lsls	r1, r1, #23
 8013efa:	d547      	bpl.n	8013f8c <_printf_float+0xc4>
 8013efc:	189b      	adds	r3, r3, r2
 8013efe:	4393      	bics	r3, r2
 8013f00:	001a      	movs	r2, r3
 8013f02:	3208      	adds	r2, #8
 8013f04:	602a      	str	r2, [r5, #0]
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	685b      	ldr	r3, [r3, #4]
 8013f0a:	64a2      	str	r2, [r4, #72]	; 0x48
 8013f0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013f0e:	2201      	movs	r2, #1
 8013f10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8013f12:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013f14:	930a      	str	r3, [sp, #40]	; 0x28
 8013f16:	006b      	lsls	r3, r5, #1
 8013f18:	085b      	lsrs	r3, r3, #1
 8013f1a:	930e      	str	r3, [sp, #56]	; 0x38
 8013f1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f1e:	4ba8      	ldr	r3, [pc, #672]	; (80141c0 <_printf_float+0x2f8>)
 8013f20:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013f22:	4252      	negs	r2, r2
 8013f24:	f7ee feb8 	bl	8002c98 <__aeabi_dcmpun>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d131      	bne.n	8013f90 <_printf_float+0xc8>
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	4ba4      	ldr	r3, [pc, #656]	; (80141c0 <_printf_float+0x2f8>)
 8013f30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f32:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013f34:	4252      	negs	r2, r2
 8013f36:	f7ec faa1 	bl	800047c <__aeabi_dcmple>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d128      	bne.n	8013f90 <_printf_float+0xc8>
 8013f3e:	2200      	movs	r2, #0
 8013f40:	2300      	movs	r3, #0
 8013f42:	0029      	movs	r1, r5
 8013f44:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f46:	f7ec fa8f 	bl	8000468 <__aeabi_dcmplt>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d003      	beq.n	8013f56 <_printf_float+0x8e>
 8013f4e:	0023      	movs	r3, r4
 8013f50:	222d      	movs	r2, #45	; 0x2d
 8013f52:	3343      	adds	r3, #67	; 0x43
 8013f54:	701a      	strb	r2, [r3, #0]
 8013f56:	4d9b      	ldr	r5, [pc, #620]	; (80141c4 <_printf_float+0x2fc>)
 8013f58:	2e47      	cmp	r6, #71	; 0x47
 8013f5a:	d900      	bls.n	8013f5e <_printf_float+0x96>
 8013f5c:	4d9a      	ldr	r5, [pc, #616]	; (80141c8 <_printf_float+0x300>)
 8013f5e:	2303      	movs	r3, #3
 8013f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f62:	6123      	str	r3, [r4, #16]
 8013f64:	3301      	adds	r3, #1
 8013f66:	439a      	bics	r2, r3
 8013f68:	2300      	movs	r3, #0
 8013f6a:	6022      	str	r2, [r4, #0]
 8013f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8013f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f70:	0021      	movs	r1, r4
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	0038      	movs	r0, r7
 8013f76:	9b08      	ldr	r3, [sp, #32]
 8013f78:	aa13      	add	r2, sp, #76	; 0x4c
 8013f7a:	f000 f9f3 	bl	8014364 <_printf_common>
 8013f7e:	1c43      	adds	r3, r0, #1
 8013f80:	d000      	beq.n	8013f84 <_printf_float+0xbc>
 8013f82:	e09e      	b.n	80140c2 <_printf_float+0x1fa>
 8013f84:	2001      	movs	r0, #1
 8013f86:	4240      	negs	r0, r0
 8013f88:	b015      	add	sp, #84	; 0x54
 8013f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f8c:	3307      	adds	r3, #7
 8013f8e:	e7b6      	b.n	8013efe <_printf_float+0x36>
 8013f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f92:	002b      	movs	r3, r5
 8013f94:	0010      	movs	r0, r2
 8013f96:	0029      	movs	r1, r5
 8013f98:	f7ee fe7e 	bl	8002c98 <__aeabi_dcmpun>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	d00a      	beq.n	8013fb6 <_printf_float+0xee>
 8013fa0:	2d00      	cmp	r5, #0
 8013fa2:	da03      	bge.n	8013fac <_printf_float+0xe4>
 8013fa4:	0023      	movs	r3, r4
 8013fa6:	222d      	movs	r2, #45	; 0x2d
 8013fa8:	3343      	adds	r3, #67	; 0x43
 8013faa:	701a      	strb	r2, [r3, #0]
 8013fac:	4d87      	ldr	r5, [pc, #540]	; (80141cc <_printf_float+0x304>)
 8013fae:	2e47      	cmp	r6, #71	; 0x47
 8013fb0:	d9d5      	bls.n	8013f5e <_printf_float+0x96>
 8013fb2:	4d87      	ldr	r5, [pc, #540]	; (80141d0 <_printf_float+0x308>)
 8013fb4:	e7d3      	b.n	8013f5e <_printf_float+0x96>
 8013fb6:	2220      	movs	r2, #32
 8013fb8:	0031      	movs	r1, r6
 8013fba:	6863      	ldr	r3, [r4, #4]
 8013fbc:	4391      	bics	r1, r2
 8013fbe:	910e      	str	r1, [sp, #56]	; 0x38
 8013fc0:	1c5a      	adds	r2, r3, #1
 8013fc2:	d147      	bne.n	8014054 <_printf_float+0x18c>
 8013fc4:	3307      	adds	r3, #7
 8013fc6:	6063      	str	r3, [r4, #4]
 8013fc8:	2380      	movs	r3, #128	; 0x80
 8013fca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013fcc:	00db      	lsls	r3, r3, #3
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	9206      	str	r2, [sp, #24]
 8013fd4:	aa12      	add	r2, sp, #72	; 0x48
 8013fd6:	9205      	str	r2, [sp, #20]
 8013fd8:	aa11      	add	r2, sp, #68	; 0x44
 8013fda:	9203      	str	r2, [sp, #12]
 8013fdc:	2223      	movs	r2, #35	; 0x23
 8013fde:	a908      	add	r1, sp, #32
 8013fe0:	6023      	str	r3, [r4, #0]
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	6863      	ldr	r3, [r4, #4]
 8013fe6:	1852      	adds	r2, r2, r1
 8013fe8:	9202      	str	r2, [sp, #8]
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	0038      	movs	r0, r7
 8013fee:	002b      	movs	r3, r5
 8013ff0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ff2:	9604      	str	r6, [sp, #16]
 8013ff4:	f7ff febe 	bl	8013d74 <__cvt>
 8013ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ffa:	0005      	movs	r5, r0
 8013ffc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013ffe:	2b47      	cmp	r3, #71	; 0x47
 8014000:	d108      	bne.n	8014014 <_printf_float+0x14c>
 8014002:	1ccb      	adds	r3, r1, #3
 8014004:	db02      	blt.n	801400c <_printf_float+0x144>
 8014006:	6863      	ldr	r3, [r4, #4]
 8014008:	4299      	cmp	r1, r3
 801400a:	dd46      	ble.n	801409a <_printf_float+0x1d2>
 801400c:	0033      	movs	r3, r6
 801400e:	3b02      	subs	r3, #2
 8014010:	b2db      	uxtb	r3, r3
 8014012:	001e      	movs	r6, r3
 8014014:	2e65      	cmp	r6, #101	; 0x65
 8014016:	d824      	bhi.n	8014062 <_printf_float+0x19a>
 8014018:	0020      	movs	r0, r4
 801401a:	0032      	movs	r2, r6
 801401c:	3901      	subs	r1, #1
 801401e:	3050      	adds	r0, #80	; 0x50
 8014020:	9111      	str	r1, [sp, #68]	; 0x44
 8014022:	f7ff ff0a 	bl	8013e3a <__exponent>
 8014026:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014028:	900a      	str	r0, [sp, #40]	; 0x28
 801402a:	1813      	adds	r3, r2, r0
 801402c:	6123      	str	r3, [r4, #16]
 801402e:	2a01      	cmp	r2, #1
 8014030:	dc02      	bgt.n	8014038 <_printf_float+0x170>
 8014032:	6822      	ldr	r2, [r4, #0]
 8014034:	07d2      	lsls	r2, r2, #31
 8014036:	d501      	bpl.n	801403c <_printf_float+0x174>
 8014038:	3301      	adds	r3, #1
 801403a:	6123      	str	r3, [r4, #16]
 801403c:	2323      	movs	r3, #35	; 0x23
 801403e:	aa08      	add	r2, sp, #32
 8014040:	189b      	adds	r3, r3, r2
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d100      	bne.n	801404a <_printf_float+0x182>
 8014048:	e791      	b.n	8013f6e <_printf_float+0xa6>
 801404a:	0023      	movs	r3, r4
 801404c:	222d      	movs	r2, #45	; 0x2d
 801404e:	3343      	adds	r3, #67	; 0x43
 8014050:	701a      	strb	r2, [r3, #0]
 8014052:	e78c      	b.n	8013f6e <_printf_float+0xa6>
 8014054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014056:	2a47      	cmp	r2, #71	; 0x47
 8014058:	d1b6      	bne.n	8013fc8 <_printf_float+0x100>
 801405a:	2b00      	cmp	r3, #0
 801405c:	d1b4      	bne.n	8013fc8 <_printf_float+0x100>
 801405e:	3301      	adds	r3, #1
 8014060:	e7b1      	b.n	8013fc6 <_printf_float+0xfe>
 8014062:	2e66      	cmp	r6, #102	; 0x66
 8014064:	d11b      	bne.n	801409e <_printf_float+0x1d6>
 8014066:	6863      	ldr	r3, [r4, #4]
 8014068:	2900      	cmp	r1, #0
 801406a:	dd0d      	ble.n	8014088 <_printf_float+0x1c0>
 801406c:	6121      	str	r1, [r4, #16]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d102      	bne.n	8014078 <_printf_float+0x1b0>
 8014072:	6822      	ldr	r2, [r4, #0]
 8014074:	07d2      	lsls	r2, r2, #31
 8014076:	d502      	bpl.n	801407e <_printf_float+0x1b6>
 8014078:	3301      	adds	r3, #1
 801407a:	1859      	adds	r1, r3, r1
 801407c:	6121      	str	r1, [r4, #16]
 801407e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014080:	65a3      	str	r3, [r4, #88]	; 0x58
 8014082:	2300      	movs	r3, #0
 8014084:	930a      	str	r3, [sp, #40]	; 0x28
 8014086:	e7d9      	b.n	801403c <_printf_float+0x174>
 8014088:	2b00      	cmp	r3, #0
 801408a:	d103      	bne.n	8014094 <_printf_float+0x1cc>
 801408c:	2201      	movs	r2, #1
 801408e:	6821      	ldr	r1, [r4, #0]
 8014090:	4211      	tst	r1, r2
 8014092:	d000      	beq.n	8014096 <_printf_float+0x1ce>
 8014094:	1c9a      	adds	r2, r3, #2
 8014096:	6122      	str	r2, [r4, #16]
 8014098:	e7f1      	b.n	801407e <_printf_float+0x1b6>
 801409a:	2367      	movs	r3, #103	; 0x67
 801409c:	001e      	movs	r6, r3
 801409e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80140a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80140a2:	4293      	cmp	r3, r2
 80140a4:	db06      	blt.n	80140b4 <_printf_float+0x1ec>
 80140a6:	6822      	ldr	r2, [r4, #0]
 80140a8:	6123      	str	r3, [r4, #16]
 80140aa:	07d2      	lsls	r2, r2, #31
 80140ac:	d5e7      	bpl.n	801407e <_printf_float+0x1b6>
 80140ae:	3301      	adds	r3, #1
 80140b0:	6123      	str	r3, [r4, #16]
 80140b2:	e7e4      	b.n	801407e <_printf_float+0x1b6>
 80140b4:	2101      	movs	r1, #1
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	dc01      	bgt.n	80140be <_printf_float+0x1f6>
 80140ba:	1849      	adds	r1, r1, r1
 80140bc:	1ac9      	subs	r1, r1, r3
 80140be:	1852      	adds	r2, r2, r1
 80140c0:	e7e9      	b.n	8014096 <_printf_float+0x1ce>
 80140c2:	6822      	ldr	r2, [r4, #0]
 80140c4:	0553      	lsls	r3, r2, #21
 80140c6:	d408      	bmi.n	80140da <_printf_float+0x212>
 80140c8:	6923      	ldr	r3, [r4, #16]
 80140ca:	002a      	movs	r2, r5
 80140cc:	0038      	movs	r0, r7
 80140ce:	9908      	ldr	r1, [sp, #32]
 80140d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80140d2:	47a8      	blx	r5
 80140d4:	1c43      	adds	r3, r0, #1
 80140d6:	d129      	bne.n	801412c <_printf_float+0x264>
 80140d8:	e754      	b.n	8013f84 <_printf_float+0xbc>
 80140da:	2e65      	cmp	r6, #101	; 0x65
 80140dc:	d800      	bhi.n	80140e0 <_printf_float+0x218>
 80140de:	e0ec      	b.n	80142ba <_printf_float+0x3f2>
 80140e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80140e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80140e4:	2200      	movs	r2, #0
 80140e6:	2300      	movs	r3, #0
 80140e8:	f7ec f9b8 	bl	800045c <__aeabi_dcmpeq>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d034      	beq.n	801415a <_printf_float+0x292>
 80140f0:	2301      	movs	r3, #1
 80140f2:	0038      	movs	r0, r7
 80140f4:	4a37      	ldr	r2, [pc, #220]	; (80141d4 <_printf_float+0x30c>)
 80140f6:	9908      	ldr	r1, [sp, #32]
 80140f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80140fa:	47a8      	blx	r5
 80140fc:	1c43      	adds	r3, r0, #1
 80140fe:	d100      	bne.n	8014102 <_printf_float+0x23a>
 8014100:	e740      	b.n	8013f84 <_printf_float+0xbc>
 8014102:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014106:	4293      	cmp	r3, r2
 8014108:	db02      	blt.n	8014110 <_printf_float+0x248>
 801410a:	6823      	ldr	r3, [r4, #0]
 801410c:	07db      	lsls	r3, r3, #31
 801410e:	d50d      	bpl.n	801412c <_printf_float+0x264>
 8014110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014112:	0038      	movs	r0, r7
 8014114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014118:	9908      	ldr	r1, [sp, #32]
 801411a:	47a8      	blx	r5
 801411c:	2500      	movs	r5, #0
 801411e:	1c43      	adds	r3, r0, #1
 8014120:	d100      	bne.n	8014124 <_printf_float+0x25c>
 8014122:	e72f      	b.n	8013f84 <_printf_float+0xbc>
 8014124:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014126:	3b01      	subs	r3, #1
 8014128:	42ab      	cmp	r3, r5
 801412a:	dc0a      	bgt.n	8014142 <_printf_float+0x27a>
 801412c:	6823      	ldr	r3, [r4, #0]
 801412e:	079b      	lsls	r3, r3, #30
 8014130:	d500      	bpl.n	8014134 <_printf_float+0x26c>
 8014132:	e114      	b.n	801435e <_printf_float+0x496>
 8014134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014136:	68e0      	ldr	r0, [r4, #12]
 8014138:	4298      	cmp	r0, r3
 801413a:	db00      	blt.n	801413e <_printf_float+0x276>
 801413c:	e724      	b.n	8013f88 <_printf_float+0xc0>
 801413e:	0018      	movs	r0, r3
 8014140:	e722      	b.n	8013f88 <_printf_float+0xc0>
 8014142:	0022      	movs	r2, r4
 8014144:	2301      	movs	r3, #1
 8014146:	0038      	movs	r0, r7
 8014148:	9908      	ldr	r1, [sp, #32]
 801414a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801414c:	321a      	adds	r2, #26
 801414e:	47b0      	blx	r6
 8014150:	1c43      	adds	r3, r0, #1
 8014152:	d100      	bne.n	8014156 <_printf_float+0x28e>
 8014154:	e716      	b.n	8013f84 <_printf_float+0xbc>
 8014156:	3501      	adds	r5, #1
 8014158:	e7e4      	b.n	8014124 <_printf_float+0x25c>
 801415a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801415c:	2b00      	cmp	r3, #0
 801415e:	dc3b      	bgt.n	80141d8 <_printf_float+0x310>
 8014160:	2301      	movs	r3, #1
 8014162:	0038      	movs	r0, r7
 8014164:	4a1b      	ldr	r2, [pc, #108]	; (80141d4 <_printf_float+0x30c>)
 8014166:	9908      	ldr	r1, [sp, #32]
 8014168:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801416a:	47b0      	blx	r6
 801416c:	1c43      	adds	r3, r0, #1
 801416e:	d100      	bne.n	8014172 <_printf_float+0x2aa>
 8014170:	e708      	b.n	8013f84 <_printf_float+0xbc>
 8014172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014176:	4313      	orrs	r3, r2
 8014178:	d102      	bne.n	8014180 <_printf_float+0x2b8>
 801417a:	6823      	ldr	r3, [r4, #0]
 801417c:	07db      	lsls	r3, r3, #31
 801417e:	d5d5      	bpl.n	801412c <_printf_float+0x264>
 8014180:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014182:	0038      	movs	r0, r7
 8014184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014186:	9908      	ldr	r1, [sp, #32]
 8014188:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801418a:	47b0      	blx	r6
 801418c:	1c43      	adds	r3, r0, #1
 801418e:	d100      	bne.n	8014192 <_printf_float+0x2ca>
 8014190:	e6f8      	b.n	8013f84 <_printf_float+0xbc>
 8014192:	2300      	movs	r3, #0
 8014194:	930a      	str	r3, [sp, #40]	; 0x28
 8014196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801419a:	425b      	negs	r3, r3
 801419c:	4293      	cmp	r3, r2
 801419e:	dc01      	bgt.n	80141a4 <_printf_float+0x2dc>
 80141a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141a2:	e792      	b.n	80140ca <_printf_float+0x202>
 80141a4:	0022      	movs	r2, r4
 80141a6:	2301      	movs	r3, #1
 80141a8:	0038      	movs	r0, r7
 80141aa:	9908      	ldr	r1, [sp, #32]
 80141ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80141ae:	321a      	adds	r2, #26
 80141b0:	47b0      	blx	r6
 80141b2:	1c43      	adds	r3, r0, #1
 80141b4:	d100      	bne.n	80141b8 <_printf_float+0x2f0>
 80141b6:	e6e5      	b.n	8013f84 <_printf_float+0xbc>
 80141b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141ba:	3301      	adds	r3, #1
 80141bc:	e7ea      	b.n	8014194 <_printf_float+0x2cc>
 80141be:	46c0      	nop			; (mov r8, r8)
 80141c0:	7fefffff 	.word	0x7fefffff
 80141c4:	0801b60c 	.word	0x0801b60c
 80141c8:	0801b610 	.word	0x0801b610
 80141cc:	0801b614 	.word	0x0801b614
 80141d0:	0801b618 	.word	0x0801b618
 80141d4:	0801b61c 	.word	0x0801b61c
 80141d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80141dc:	920a      	str	r2, [sp, #40]	; 0x28
 80141de:	429a      	cmp	r2, r3
 80141e0:	dd00      	ble.n	80141e4 <_printf_float+0x31c>
 80141e2:	930a      	str	r3, [sp, #40]	; 0x28
 80141e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	dc3d      	bgt.n	8014266 <_printf_float+0x39e>
 80141ea:	2300      	movs	r3, #0
 80141ec:	930e      	str	r3, [sp, #56]	; 0x38
 80141ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f0:	43db      	mvns	r3, r3
 80141f2:	17db      	asrs	r3, r3, #31
 80141f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80141f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80141f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80141fa:	930c      	str	r3, [sp, #48]	; 0x30
 80141fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141fe:	4013      	ands	r3, r2
 8014200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014202:	1ad3      	subs	r3, r2, r3
 8014204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014206:	4293      	cmp	r3, r2
 8014208:	dc36      	bgt.n	8014278 <_printf_float+0x3b0>
 801420a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801420c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801420e:	4293      	cmp	r3, r2
 8014210:	db40      	blt.n	8014294 <_printf_float+0x3cc>
 8014212:	6823      	ldr	r3, [r4, #0]
 8014214:	07db      	lsls	r3, r3, #31
 8014216:	d43d      	bmi.n	8014294 <_printf_float+0x3cc>
 8014218:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801421a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801421c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	1a52      	subs	r2, r2, r1
 8014222:	920a      	str	r2, [sp, #40]	; 0x28
 8014224:	429a      	cmp	r2, r3
 8014226:	dd00      	ble.n	801422a <_printf_float+0x362>
 8014228:	930a      	str	r3, [sp, #40]	; 0x28
 801422a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801422c:	2b00      	cmp	r3, #0
 801422e:	dc3a      	bgt.n	80142a6 <_printf_float+0x3de>
 8014230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014232:	2500      	movs	r5, #0
 8014234:	43db      	mvns	r3, r3
 8014236:	17db      	asrs	r3, r3, #31
 8014238:	930b      	str	r3, [sp, #44]	; 0x2c
 801423a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801423c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801423e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014240:	1a9b      	subs	r3, r3, r2
 8014242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014244:	400a      	ands	r2, r1
 8014246:	1a9b      	subs	r3, r3, r2
 8014248:	42ab      	cmp	r3, r5
 801424a:	dc00      	bgt.n	801424e <_printf_float+0x386>
 801424c:	e76e      	b.n	801412c <_printf_float+0x264>
 801424e:	0022      	movs	r2, r4
 8014250:	2301      	movs	r3, #1
 8014252:	0038      	movs	r0, r7
 8014254:	9908      	ldr	r1, [sp, #32]
 8014256:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014258:	321a      	adds	r2, #26
 801425a:	47b0      	blx	r6
 801425c:	1c43      	adds	r3, r0, #1
 801425e:	d100      	bne.n	8014262 <_printf_float+0x39a>
 8014260:	e690      	b.n	8013f84 <_printf_float+0xbc>
 8014262:	3501      	adds	r5, #1
 8014264:	e7e9      	b.n	801423a <_printf_float+0x372>
 8014266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014268:	002a      	movs	r2, r5
 801426a:	0038      	movs	r0, r7
 801426c:	9908      	ldr	r1, [sp, #32]
 801426e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014270:	47b0      	blx	r6
 8014272:	1c43      	adds	r3, r0, #1
 8014274:	d1b9      	bne.n	80141ea <_printf_float+0x322>
 8014276:	e685      	b.n	8013f84 <_printf_float+0xbc>
 8014278:	0022      	movs	r2, r4
 801427a:	2301      	movs	r3, #1
 801427c:	0038      	movs	r0, r7
 801427e:	9908      	ldr	r1, [sp, #32]
 8014280:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014282:	321a      	adds	r2, #26
 8014284:	47b0      	blx	r6
 8014286:	1c43      	adds	r3, r0, #1
 8014288:	d100      	bne.n	801428c <_printf_float+0x3c4>
 801428a:	e67b      	b.n	8013f84 <_printf_float+0xbc>
 801428c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801428e:	3301      	adds	r3, #1
 8014290:	930e      	str	r3, [sp, #56]	; 0x38
 8014292:	e7b0      	b.n	80141f6 <_printf_float+0x32e>
 8014294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014296:	0038      	movs	r0, r7
 8014298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801429a:	9908      	ldr	r1, [sp, #32]
 801429c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801429e:	47b0      	blx	r6
 80142a0:	1c43      	adds	r3, r0, #1
 80142a2:	d1b9      	bne.n	8014218 <_printf_float+0x350>
 80142a4:	e66e      	b.n	8013f84 <_printf_float+0xbc>
 80142a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142a8:	0038      	movs	r0, r7
 80142aa:	18ea      	adds	r2, r5, r3
 80142ac:	9908      	ldr	r1, [sp, #32]
 80142ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80142b2:	47a8      	blx	r5
 80142b4:	1c43      	adds	r3, r0, #1
 80142b6:	d1bb      	bne.n	8014230 <_printf_float+0x368>
 80142b8:	e664      	b.n	8013f84 <_printf_float+0xbc>
 80142ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142bc:	2b01      	cmp	r3, #1
 80142be:	dc02      	bgt.n	80142c6 <_printf_float+0x3fe>
 80142c0:	2301      	movs	r3, #1
 80142c2:	421a      	tst	r2, r3
 80142c4:	d038      	beq.n	8014338 <_printf_float+0x470>
 80142c6:	2301      	movs	r3, #1
 80142c8:	002a      	movs	r2, r5
 80142ca:	0038      	movs	r0, r7
 80142cc:	9908      	ldr	r1, [sp, #32]
 80142ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80142d0:	47b0      	blx	r6
 80142d2:	1c43      	adds	r3, r0, #1
 80142d4:	d100      	bne.n	80142d8 <_printf_float+0x410>
 80142d6:	e655      	b.n	8013f84 <_printf_float+0xbc>
 80142d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142da:	0038      	movs	r0, r7
 80142dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142de:	9908      	ldr	r1, [sp, #32]
 80142e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80142e2:	47b0      	blx	r6
 80142e4:	1c43      	adds	r3, r0, #1
 80142e6:	d100      	bne.n	80142ea <_printf_float+0x422>
 80142e8:	e64c      	b.n	8013f84 <_printf_float+0xbc>
 80142ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80142ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80142ee:	2200      	movs	r2, #0
 80142f0:	2300      	movs	r3, #0
 80142f2:	f7ec f8b3 	bl	800045c <__aeabi_dcmpeq>
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d11c      	bne.n	8014334 <_printf_float+0x46c>
 80142fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142fc:	1c6a      	adds	r2, r5, #1
 80142fe:	3b01      	subs	r3, #1
 8014300:	0038      	movs	r0, r7
 8014302:	9908      	ldr	r1, [sp, #32]
 8014304:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014306:	47a8      	blx	r5
 8014308:	1c43      	adds	r3, r0, #1
 801430a:	d10f      	bne.n	801432c <_printf_float+0x464>
 801430c:	e63a      	b.n	8013f84 <_printf_float+0xbc>
 801430e:	0022      	movs	r2, r4
 8014310:	2301      	movs	r3, #1
 8014312:	0038      	movs	r0, r7
 8014314:	9908      	ldr	r1, [sp, #32]
 8014316:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014318:	321a      	adds	r2, #26
 801431a:	47b0      	blx	r6
 801431c:	1c43      	adds	r3, r0, #1
 801431e:	d100      	bne.n	8014322 <_printf_float+0x45a>
 8014320:	e630      	b.n	8013f84 <_printf_float+0xbc>
 8014322:	3501      	adds	r5, #1
 8014324:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014326:	3b01      	subs	r3, #1
 8014328:	42ab      	cmp	r3, r5
 801432a:	dcf0      	bgt.n	801430e <_printf_float+0x446>
 801432c:	0022      	movs	r2, r4
 801432e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014330:	3250      	adds	r2, #80	; 0x50
 8014332:	e6cb      	b.n	80140cc <_printf_float+0x204>
 8014334:	2500      	movs	r5, #0
 8014336:	e7f5      	b.n	8014324 <_printf_float+0x45c>
 8014338:	002a      	movs	r2, r5
 801433a:	e7e1      	b.n	8014300 <_printf_float+0x438>
 801433c:	0022      	movs	r2, r4
 801433e:	2301      	movs	r3, #1
 8014340:	0038      	movs	r0, r7
 8014342:	9908      	ldr	r1, [sp, #32]
 8014344:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014346:	3219      	adds	r2, #25
 8014348:	47b0      	blx	r6
 801434a:	1c43      	adds	r3, r0, #1
 801434c:	d100      	bne.n	8014350 <_printf_float+0x488>
 801434e:	e619      	b.n	8013f84 <_printf_float+0xbc>
 8014350:	3501      	adds	r5, #1
 8014352:	68e3      	ldr	r3, [r4, #12]
 8014354:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014356:	1a9b      	subs	r3, r3, r2
 8014358:	42ab      	cmp	r3, r5
 801435a:	dcef      	bgt.n	801433c <_printf_float+0x474>
 801435c:	e6ea      	b.n	8014134 <_printf_float+0x26c>
 801435e:	2500      	movs	r5, #0
 8014360:	e7f7      	b.n	8014352 <_printf_float+0x48a>
 8014362:	46c0      	nop			; (mov r8, r8)

08014364 <_printf_common>:
 8014364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014366:	0015      	movs	r5, r2
 8014368:	9301      	str	r3, [sp, #4]
 801436a:	688a      	ldr	r2, [r1, #8]
 801436c:	690b      	ldr	r3, [r1, #16]
 801436e:	000c      	movs	r4, r1
 8014370:	9000      	str	r0, [sp, #0]
 8014372:	4293      	cmp	r3, r2
 8014374:	da00      	bge.n	8014378 <_printf_common+0x14>
 8014376:	0013      	movs	r3, r2
 8014378:	0022      	movs	r2, r4
 801437a:	602b      	str	r3, [r5, #0]
 801437c:	3243      	adds	r2, #67	; 0x43
 801437e:	7812      	ldrb	r2, [r2, #0]
 8014380:	2a00      	cmp	r2, #0
 8014382:	d001      	beq.n	8014388 <_printf_common+0x24>
 8014384:	3301      	adds	r3, #1
 8014386:	602b      	str	r3, [r5, #0]
 8014388:	6823      	ldr	r3, [r4, #0]
 801438a:	069b      	lsls	r3, r3, #26
 801438c:	d502      	bpl.n	8014394 <_printf_common+0x30>
 801438e:	682b      	ldr	r3, [r5, #0]
 8014390:	3302      	adds	r3, #2
 8014392:	602b      	str	r3, [r5, #0]
 8014394:	6822      	ldr	r2, [r4, #0]
 8014396:	2306      	movs	r3, #6
 8014398:	0017      	movs	r7, r2
 801439a:	401f      	ands	r7, r3
 801439c:	421a      	tst	r2, r3
 801439e:	d027      	beq.n	80143f0 <_printf_common+0x8c>
 80143a0:	0023      	movs	r3, r4
 80143a2:	3343      	adds	r3, #67	; 0x43
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	1e5a      	subs	r2, r3, #1
 80143a8:	4193      	sbcs	r3, r2
 80143aa:	6822      	ldr	r2, [r4, #0]
 80143ac:	0692      	lsls	r2, r2, #26
 80143ae:	d430      	bmi.n	8014412 <_printf_common+0xae>
 80143b0:	0022      	movs	r2, r4
 80143b2:	9901      	ldr	r1, [sp, #4]
 80143b4:	9800      	ldr	r0, [sp, #0]
 80143b6:	9e08      	ldr	r6, [sp, #32]
 80143b8:	3243      	adds	r2, #67	; 0x43
 80143ba:	47b0      	blx	r6
 80143bc:	1c43      	adds	r3, r0, #1
 80143be:	d025      	beq.n	801440c <_printf_common+0xa8>
 80143c0:	2306      	movs	r3, #6
 80143c2:	6820      	ldr	r0, [r4, #0]
 80143c4:	682a      	ldr	r2, [r5, #0]
 80143c6:	68e1      	ldr	r1, [r4, #12]
 80143c8:	2500      	movs	r5, #0
 80143ca:	4003      	ands	r3, r0
 80143cc:	2b04      	cmp	r3, #4
 80143ce:	d103      	bne.n	80143d8 <_printf_common+0x74>
 80143d0:	1a8d      	subs	r5, r1, r2
 80143d2:	43eb      	mvns	r3, r5
 80143d4:	17db      	asrs	r3, r3, #31
 80143d6:	401d      	ands	r5, r3
 80143d8:	68a3      	ldr	r3, [r4, #8]
 80143da:	6922      	ldr	r2, [r4, #16]
 80143dc:	4293      	cmp	r3, r2
 80143de:	dd01      	ble.n	80143e4 <_printf_common+0x80>
 80143e0:	1a9b      	subs	r3, r3, r2
 80143e2:	18ed      	adds	r5, r5, r3
 80143e4:	2700      	movs	r7, #0
 80143e6:	42bd      	cmp	r5, r7
 80143e8:	d120      	bne.n	801442c <_printf_common+0xc8>
 80143ea:	2000      	movs	r0, #0
 80143ec:	e010      	b.n	8014410 <_printf_common+0xac>
 80143ee:	3701      	adds	r7, #1
 80143f0:	68e3      	ldr	r3, [r4, #12]
 80143f2:	682a      	ldr	r2, [r5, #0]
 80143f4:	1a9b      	subs	r3, r3, r2
 80143f6:	42bb      	cmp	r3, r7
 80143f8:	ddd2      	ble.n	80143a0 <_printf_common+0x3c>
 80143fa:	0022      	movs	r2, r4
 80143fc:	2301      	movs	r3, #1
 80143fe:	9901      	ldr	r1, [sp, #4]
 8014400:	9800      	ldr	r0, [sp, #0]
 8014402:	9e08      	ldr	r6, [sp, #32]
 8014404:	3219      	adds	r2, #25
 8014406:	47b0      	blx	r6
 8014408:	1c43      	adds	r3, r0, #1
 801440a:	d1f0      	bne.n	80143ee <_printf_common+0x8a>
 801440c:	2001      	movs	r0, #1
 801440e:	4240      	negs	r0, r0
 8014410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014412:	2030      	movs	r0, #48	; 0x30
 8014414:	18e1      	adds	r1, r4, r3
 8014416:	3143      	adds	r1, #67	; 0x43
 8014418:	7008      	strb	r0, [r1, #0]
 801441a:	0021      	movs	r1, r4
 801441c:	1c5a      	adds	r2, r3, #1
 801441e:	3145      	adds	r1, #69	; 0x45
 8014420:	7809      	ldrb	r1, [r1, #0]
 8014422:	18a2      	adds	r2, r4, r2
 8014424:	3243      	adds	r2, #67	; 0x43
 8014426:	3302      	adds	r3, #2
 8014428:	7011      	strb	r1, [r2, #0]
 801442a:	e7c1      	b.n	80143b0 <_printf_common+0x4c>
 801442c:	0022      	movs	r2, r4
 801442e:	2301      	movs	r3, #1
 8014430:	9901      	ldr	r1, [sp, #4]
 8014432:	9800      	ldr	r0, [sp, #0]
 8014434:	9e08      	ldr	r6, [sp, #32]
 8014436:	321a      	adds	r2, #26
 8014438:	47b0      	blx	r6
 801443a:	1c43      	adds	r3, r0, #1
 801443c:	d0e6      	beq.n	801440c <_printf_common+0xa8>
 801443e:	3701      	adds	r7, #1
 8014440:	e7d1      	b.n	80143e6 <_printf_common+0x82>
	...

08014444 <_printf_i>:
 8014444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014446:	b08b      	sub	sp, #44	; 0x2c
 8014448:	9206      	str	r2, [sp, #24]
 801444a:	000a      	movs	r2, r1
 801444c:	3243      	adds	r2, #67	; 0x43
 801444e:	9307      	str	r3, [sp, #28]
 8014450:	9005      	str	r0, [sp, #20]
 8014452:	9204      	str	r2, [sp, #16]
 8014454:	7e0a      	ldrb	r2, [r1, #24]
 8014456:	000c      	movs	r4, r1
 8014458:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801445a:	2a78      	cmp	r2, #120	; 0x78
 801445c:	d806      	bhi.n	801446c <_printf_i+0x28>
 801445e:	2a62      	cmp	r2, #98	; 0x62
 8014460:	d808      	bhi.n	8014474 <_printf_i+0x30>
 8014462:	2a00      	cmp	r2, #0
 8014464:	d100      	bne.n	8014468 <_printf_i+0x24>
 8014466:	e0c0      	b.n	80145ea <_printf_i+0x1a6>
 8014468:	2a58      	cmp	r2, #88	; 0x58
 801446a:	d052      	beq.n	8014512 <_printf_i+0xce>
 801446c:	0026      	movs	r6, r4
 801446e:	3642      	adds	r6, #66	; 0x42
 8014470:	7032      	strb	r2, [r6, #0]
 8014472:	e022      	b.n	80144ba <_printf_i+0x76>
 8014474:	0010      	movs	r0, r2
 8014476:	3863      	subs	r0, #99	; 0x63
 8014478:	2815      	cmp	r0, #21
 801447a:	d8f7      	bhi.n	801446c <_printf_i+0x28>
 801447c:	f7eb fe5e 	bl	800013c <__gnu_thumb1_case_shi>
 8014480:	001f0016 	.word	0x001f0016
 8014484:	fff6fff6 	.word	0xfff6fff6
 8014488:	fff6fff6 	.word	0xfff6fff6
 801448c:	fff6001f 	.word	0xfff6001f
 8014490:	fff6fff6 	.word	0xfff6fff6
 8014494:	00a8fff6 	.word	0x00a8fff6
 8014498:	009a0036 	.word	0x009a0036
 801449c:	fff6fff6 	.word	0xfff6fff6
 80144a0:	fff600b9 	.word	0xfff600b9
 80144a4:	fff60036 	.word	0xfff60036
 80144a8:	009efff6 	.word	0x009efff6
 80144ac:	0026      	movs	r6, r4
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	3642      	adds	r6, #66	; 0x42
 80144b2:	1d11      	adds	r1, r2, #4
 80144b4:	6019      	str	r1, [r3, #0]
 80144b6:	6813      	ldr	r3, [r2, #0]
 80144b8:	7033      	strb	r3, [r6, #0]
 80144ba:	2301      	movs	r3, #1
 80144bc:	e0a7      	b.n	801460e <_printf_i+0x1ca>
 80144be:	6808      	ldr	r0, [r1, #0]
 80144c0:	6819      	ldr	r1, [r3, #0]
 80144c2:	1d0a      	adds	r2, r1, #4
 80144c4:	0605      	lsls	r5, r0, #24
 80144c6:	d50b      	bpl.n	80144e0 <_printf_i+0x9c>
 80144c8:	680d      	ldr	r5, [r1, #0]
 80144ca:	601a      	str	r2, [r3, #0]
 80144cc:	2d00      	cmp	r5, #0
 80144ce:	da03      	bge.n	80144d8 <_printf_i+0x94>
 80144d0:	232d      	movs	r3, #45	; 0x2d
 80144d2:	9a04      	ldr	r2, [sp, #16]
 80144d4:	426d      	negs	r5, r5
 80144d6:	7013      	strb	r3, [r2, #0]
 80144d8:	4b61      	ldr	r3, [pc, #388]	; (8014660 <_printf_i+0x21c>)
 80144da:	270a      	movs	r7, #10
 80144dc:	9303      	str	r3, [sp, #12]
 80144de:	e032      	b.n	8014546 <_printf_i+0x102>
 80144e0:	680d      	ldr	r5, [r1, #0]
 80144e2:	601a      	str	r2, [r3, #0]
 80144e4:	0641      	lsls	r1, r0, #25
 80144e6:	d5f1      	bpl.n	80144cc <_printf_i+0x88>
 80144e8:	b22d      	sxth	r5, r5
 80144ea:	e7ef      	b.n	80144cc <_printf_i+0x88>
 80144ec:	680d      	ldr	r5, [r1, #0]
 80144ee:	6819      	ldr	r1, [r3, #0]
 80144f0:	1d08      	adds	r0, r1, #4
 80144f2:	6018      	str	r0, [r3, #0]
 80144f4:	062e      	lsls	r6, r5, #24
 80144f6:	d501      	bpl.n	80144fc <_printf_i+0xb8>
 80144f8:	680d      	ldr	r5, [r1, #0]
 80144fa:	e003      	b.n	8014504 <_printf_i+0xc0>
 80144fc:	066d      	lsls	r5, r5, #25
 80144fe:	d5fb      	bpl.n	80144f8 <_printf_i+0xb4>
 8014500:	680d      	ldr	r5, [r1, #0]
 8014502:	b2ad      	uxth	r5, r5
 8014504:	4b56      	ldr	r3, [pc, #344]	; (8014660 <_printf_i+0x21c>)
 8014506:	270a      	movs	r7, #10
 8014508:	9303      	str	r3, [sp, #12]
 801450a:	2a6f      	cmp	r2, #111	; 0x6f
 801450c:	d117      	bne.n	801453e <_printf_i+0xfa>
 801450e:	2708      	movs	r7, #8
 8014510:	e015      	b.n	801453e <_printf_i+0xfa>
 8014512:	3145      	adds	r1, #69	; 0x45
 8014514:	700a      	strb	r2, [r1, #0]
 8014516:	4a52      	ldr	r2, [pc, #328]	; (8014660 <_printf_i+0x21c>)
 8014518:	9203      	str	r2, [sp, #12]
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	6821      	ldr	r1, [r4, #0]
 801451e:	ca20      	ldmia	r2!, {r5}
 8014520:	601a      	str	r2, [r3, #0]
 8014522:	0608      	lsls	r0, r1, #24
 8014524:	d550      	bpl.n	80145c8 <_printf_i+0x184>
 8014526:	07cb      	lsls	r3, r1, #31
 8014528:	d502      	bpl.n	8014530 <_printf_i+0xec>
 801452a:	2320      	movs	r3, #32
 801452c:	4319      	orrs	r1, r3
 801452e:	6021      	str	r1, [r4, #0]
 8014530:	2710      	movs	r7, #16
 8014532:	2d00      	cmp	r5, #0
 8014534:	d103      	bne.n	801453e <_printf_i+0xfa>
 8014536:	2320      	movs	r3, #32
 8014538:	6822      	ldr	r2, [r4, #0]
 801453a:	439a      	bics	r2, r3
 801453c:	6022      	str	r2, [r4, #0]
 801453e:	0023      	movs	r3, r4
 8014540:	2200      	movs	r2, #0
 8014542:	3343      	adds	r3, #67	; 0x43
 8014544:	701a      	strb	r2, [r3, #0]
 8014546:	6863      	ldr	r3, [r4, #4]
 8014548:	60a3      	str	r3, [r4, #8]
 801454a:	2b00      	cmp	r3, #0
 801454c:	db03      	blt.n	8014556 <_printf_i+0x112>
 801454e:	2204      	movs	r2, #4
 8014550:	6821      	ldr	r1, [r4, #0]
 8014552:	4391      	bics	r1, r2
 8014554:	6021      	str	r1, [r4, #0]
 8014556:	2d00      	cmp	r5, #0
 8014558:	d102      	bne.n	8014560 <_printf_i+0x11c>
 801455a:	9e04      	ldr	r6, [sp, #16]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d00c      	beq.n	801457a <_printf_i+0x136>
 8014560:	9e04      	ldr	r6, [sp, #16]
 8014562:	0028      	movs	r0, r5
 8014564:	0039      	movs	r1, r7
 8014566:	f7eb fe79 	bl	800025c <__aeabi_uidivmod>
 801456a:	9b03      	ldr	r3, [sp, #12]
 801456c:	3e01      	subs	r6, #1
 801456e:	5c5b      	ldrb	r3, [r3, r1]
 8014570:	7033      	strb	r3, [r6, #0]
 8014572:	002b      	movs	r3, r5
 8014574:	0005      	movs	r5, r0
 8014576:	429f      	cmp	r7, r3
 8014578:	d9f3      	bls.n	8014562 <_printf_i+0x11e>
 801457a:	2f08      	cmp	r7, #8
 801457c:	d109      	bne.n	8014592 <_printf_i+0x14e>
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	07db      	lsls	r3, r3, #31
 8014582:	d506      	bpl.n	8014592 <_printf_i+0x14e>
 8014584:	6863      	ldr	r3, [r4, #4]
 8014586:	6922      	ldr	r2, [r4, #16]
 8014588:	4293      	cmp	r3, r2
 801458a:	dc02      	bgt.n	8014592 <_printf_i+0x14e>
 801458c:	2330      	movs	r3, #48	; 0x30
 801458e:	3e01      	subs	r6, #1
 8014590:	7033      	strb	r3, [r6, #0]
 8014592:	9b04      	ldr	r3, [sp, #16]
 8014594:	1b9b      	subs	r3, r3, r6
 8014596:	6123      	str	r3, [r4, #16]
 8014598:	9b07      	ldr	r3, [sp, #28]
 801459a:	0021      	movs	r1, r4
 801459c:	9300      	str	r3, [sp, #0]
 801459e:	9805      	ldr	r0, [sp, #20]
 80145a0:	9b06      	ldr	r3, [sp, #24]
 80145a2:	aa09      	add	r2, sp, #36	; 0x24
 80145a4:	f7ff fede 	bl	8014364 <_printf_common>
 80145a8:	1c43      	adds	r3, r0, #1
 80145aa:	d135      	bne.n	8014618 <_printf_i+0x1d4>
 80145ac:	2001      	movs	r0, #1
 80145ae:	4240      	negs	r0, r0
 80145b0:	b00b      	add	sp, #44	; 0x2c
 80145b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b4:	2220      	movs	r2, #32
 80145b6:	6809      	ldr	r1, [r1, #0]
 80145b8:	430a      	orrs	r2, r1
 80145ba:	6022      	str	r2, [r4, #0]
 80145bc:	0022      	movs	r2, r4
 80145be:	2178      	movs	r1, #120	; 0x78
 80145c0:	3245      	adds	r2, #69	; 0x45
 80145c2:	7011      	strb	r1, [r2, #0]
 80145c4:	4a27      	ldr	r2, [pc, #156]	; (8014664 <_printf_i+0x220>)
 80145c6:	e7a7      	b.n	8014518 <_printf_i+0xd4>
 80145c8:	0648      	lsls	r0, r1, #25
 80145ca:	d5ac      	bpl.n	8014526 <_printf_i+0xe2>
 80145cc:	b2ad      	uxth	r5, r5
 80145ce:	e7aa      	b.n	8014526 <_printf_i+0xe2>
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	680d      	ldr	r5, [r1, #0]
 80145d4:	1d10      	adds	r0, r2, #4
 80145d6:	6949      	ldr	r1, [r1, #20]
 80145d8:	6018      	str	r0, [r3, #0]
 80145da:	6813      	ldr	r3, [r2, #0]
 80145dc:	062e      	lsls	r6, r5, #24
 80145de:	d501      	bpl.n	80145e4 <_printf_i+0x1a0>
 80145e0:	6019      	str	r1, [r3, #0]
 80145e2:	e002      	b.n	80145ea <_printf_i+0x1a6>
 80145e4:	066d      	lsls	r5, r5, #25
 80145e6:	d5fb      	bpl.n	80145e0 <_printf_i+0x19c>
 80145e8:	8019      	strh	r1, [r3, #0]
 80145ea:	2300      	movs	r3, #0
 80145ec:	9e04      	ldr	r6, [sp, #16]
 80145ee:	6123      	str	r3, [r4, #16]
 80145f0:	e7d2      	b.n	8014598 <_printf_i+0x154>
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	1d11      	adds	r1, r2, #4
 80145f6:	6019      	str	r1, [r3, #0]
 80145f8:	6816      	ldr	r6, [r2, #0]
 80145fa:	2100      	movs	r1, #0
 80145fc:	0030      	movs	r0, r6
 80145fe:	6862      	ldr	r2, [r4, #4]
 8014600:	f002 fad6 	bl	8016bb0 <memchr>
 8014604:	2800      	cmp	r0, #0
 8014606:	d001      	beq.n	801460c <_printf_i+0x1c8>
 8014608:	1b80      	subs	r0, r0, r6
 801460a:	6060      	str	r0, [r4, #4]
 801460c:	6863      	ldr	r3, [r4, #4]
 801460e:	6123      	str	r3, [r4, #16]
 8014610:	2300      	movs	r3, #0
 8014612:	9a04      	ldr	r2, [sp, #16]
 8014614:	7013      	strb	r3, [r2, #0]
 8014616:	e7bf      	b.n	8014598 <_printf_i+0x154>
 8014618:	6923      	ldr	r3, [r4, #16]
 801461a:	0032      	movs	r2, r6
 801461c:	9906      	ldr	r1, [sp, #24]
 801461e:	9805      	ldr	r0, [sp, #20]
 8014620:	9d07      	ldr	r5, [sp, #28]
 8014622:	47a8      	blx	r5
 8014624:	1c43      	adds	r3, r0, #1
 8014626:	d0c1      	beq.n	80145ac <_printf_i+0x168>
 8014628:	6823      	ldr	r3, [r4, #0]
 801462a:	079b      	lsls	r3, r3, #30
 801462c:	d415      	bmi.n	801465a <_printf_i+0x216>
 801462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014630:	68e0      	ldr	r0, [r4, #12]
 8014632:	4298      	cmp	r0, r3
 8014634:	dabc      	bge.n	80145b0 <_printf_i+0x16c>
 8014636:	0018      	movs	r0, r3
 8014638:	e7ba      	b.n	80145b0 <_printf_i+0x16c>
 801463a:	0022      	movs	r2, r4
 801463c:	2301      	movs	r3, #1
 801463e:	9906      	ldr	r1, [sp, #24]
 8014640:	9805      	ldr	r0, [sp, #20]
 8014642:	9e07      	ldr	r6, [sp, #28]
 8014644:	3219      	adds	r2, #25
 8014646:	47b0      	blx	r6
 8014648:	1c43      	adds	r3, r0, #1
 801464a:	d0af      	beq.n	80145ac <_printf_i+0x168>
 801464c:	3501      	adds	r5, #1
 801464e:	68e3      	ldr	r3, [r4, #12]
 8014650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014652:	1a9b      	subs	r3, r3, r2
 8014654:	42ab      	cmp	r3, r5
 8014656:	dcf0      	bgt.n	801463a <_printf_i+0x1f6>
 8014658:	e7e9      	b.n	801462e <_printf_i+0x1ea>
 801465a:	2500      	movs	r5, #0
 801465c:	e7f7      	b.n	801464e <_printf_i+0x20a>
 801465e:	46c0      	nop			; (mov r8, r8)
 8014660:	0801b61e 	.word	0x0801b61e
 8014664:	0801b62f 	.word	0x0801b62f

08014668 <rand>:
 8014668:	4b16      	ldr	r3, [pc, #88]	; (80146c4 <rand+0x5c>)
 801466a:	b510      	push	{r4, lr}
 801466c:	681c      	ldr	r4, [r3, #0]
 801466e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014670:	2b00      	cmp	r3, #0
 8014672:	d116      	bne.n	80146a2 <rand+0x3a>
 8014674:	2018      	movs	r0, #24
 8014676:	f7ff faa1 	bl	8013bbc <malloc>
 801467a:	1e02      	subs	r2, r0, #0
 801467c:	63a0      	str	r0, [r4, #56]	; 0x38
 801467e:	d104      	bne.n	801468a <rand+0x22>
 8014680:	214e      	movs	r1, #78	; 0x4e
 8014682:	4b11      	ldr	r3, [pc, #68]	; (80146c8 <rand+0x60>)
 8014684:	4811      	ldr	r0, [pc, #68]	; (80146cc <rand+0x64>)
 8014686:	f001 f82d 	bl	80156e4 <__assert_func>
 801468a:	4b11      	ldr	r3, [pc, #68]	; (80146d0 <rand+0x68>)
 801468c:	2100      	movs	r1, #0
 801468e:	6003      	str	r3, [r0, #0]
 8014690:	4b10      	ldr	r3, [pc, #64]	; (80146d4 <rand+0x6c>)
 8014692:	6043      	str	r3, [r0, #4]
 8014694:	4b10      	ldr	r3, [pc, #64]	; (80146d8 <rand+0x70>)
 8014696:	6083      	str	r3, [r0, #8]
 8014698:	230b      	movs	r3, #11
 801469a:	8183      	strh	r3, [r0, #12]
 801469c:	2001      	movs	r0, #1
 801469e:	6110      	str	r0, [r2, #16]
 80146a0:	6151      	str	r1, [r2, #20]
 80146a2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80146a4:	4a0d      	ldr	r2, [pc, #52]	; (80146dc <rand+0x74>)
 80146a6:	6920      	ldr	r0, [r4, #16]
 80146a8:	6961      	ldr	r1, [r4, #20]
 80146aa:	4b0d      	ldr	r3, [pc, #52]	; (80146e0 <rand+0x78>)
 80146ac:	f7eb ff3e 	bl	800052c <__aeabi_lmul>
 80146b0:	2201      	movs	r2, #1
 80146b2:	2300      	movs	r3, #0
 80146b4:	1880      	adds	r0, r0, r2
 80146b6:	4159      	adcs	r1, r3
 80146b8:	6120      	str	r0, [r4, #16]
 80146ba:	6161      	str	r1, [r4, #20]
 80146bc:	0048      	lsls	r0, r1, #1
 80146be:	0840      	lsrs	r0, r0, #1
 80146c0:	bd10      	pop	{r4, pc}
 80146c2:	46c0      	nop			; (mov r8, r8)
 80146c4:	200000c0 	.word	0x200000c0
 80146c8:	0801b640 	.word	0x0801b640
 80146cc:	0801b657 	.word	0x0801b657
 80146d0:	abcd330e 	.word	0xabcd330e
 80146d4:	e66d1234 	.word	0xe66d1234
 80146d8:	0005deec 	.word	0x0005deec
 80146dc:	4c957f2d 	.word	0x4c957f2d
 80146e0:	5851f42d 	.word	0x5851f42d

080146e4 <realloc>:
 80146e4:	b510      	push	{r4, lr}
 80146e6:	4b03      	ldr	r3, [pc, #12]	; (80146f4 <realloc+0x10>)
 80146e8:	000a      	movs	r2, r1
 80146ea:	0001      	movs	r1, r0
 80146ec:	6818      	ldr	r0, [r3, #0]
 80146ee:	f002 ff53 	bl	8017598 <_realloc_r>
 80146f2:	bd10      	pop	{r4, pc}
 80146f4:	200000c0 	.word	0x200000c0

080146f8 <_sbrk_r>:
 80146f8:	2300      	movs	r3, #0
 80146fa:	b570      	push	{r4, r5, r6, lr}
 80146fc:	4d06      	ldr	r5, [pc, #24]	; (8014718 <_sbrk_r+0x20>)
 80146fe:	0004      	movs	r4, r0
 8014700:	0008      	movs	r0, r1
 8014702:	602b      	str	r3, [r5, #0]
 8014704:	f003 feb6 	bl	8018474 <_sbrk>
 8014708:	1c43      	adds	r3, r0, #1
 801470a:	d103      	bne.n	8014714 <_sbrk_r+0x1c>
 801470c:	682b      	ldr	r3, [r5, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d000      	beq.n	8014714 <_sbrk_r+0x1c>
 8014712:	6023      	str	r3, [r4, #0]
 8014714:	bd70      	pop	{r4, r5, r6, pc}
 8014716:	46c0      	nop			; (mov r8, r8)
 8014718:	200067d8 	.word	0x200067d8

0801471c <sniprintf>:
 801471c:	b40c      	push	{r2, r3}
 801471e:	b530      	push	{r4, r5, lr}
 8014720:	4b17      	ldr	r3, [pc, #92]	; (8014780 <sniprintf+0x64>)
 8014722:	000c      	movs	r4, r1
 8014724:	681d      	ldr	r5, [r3, #0]
 8014726:	b09d      	sub	sp, #116	; 0x74
 8014728:	2900      	cmp	r1, #0
 801472a:	da08      	bge.n	801473e <sniprintf+0x22>
 801472c:	238b      	movs	r3, #139	; 0x8b
 801472e:	2001      	movs	r0, #1
 8014730:	602b      	str	r3, [r5, #0]
 8014732:	4240      	negs	r0, r0
 8014734:	b01d      	add	sp, #116	; 0x74
 8014736:	bc30      	pop	{r4, r5}
 8014738:	bc08      	pop	{r3}
 801473a:	b002      	add	sp, #8
 801473c:	4718      	bx	r3
 801473e:	2382      	movs	r3, #130	; 0x82
 8014740:	466a      	mov	r2, sp
 8014742:	009b      	lsls	r3, r3, #2
 8014744:	8293      	strh	r3, [r2, #20]
 8014746:	2300      	movs	r3, #0
 8014748:	9002      	str	r0, [sp, #8]
 801474a:	9006      	str	r0, [sp, #24]
 801474c:	4299      	cmp	r1, r3
 801474e:	d000      	beq.n	8014752 <sniprintf+0x36>
 8014750:	1e4b      	subs	r3, r1, #1
 8014752:	9304      	str	r3, [sp, #16]
 8014754:	9307      	str	r3, [sp, #28]
 8014756:	2301      	movs	r3, #1
 8014758:	466a      	mov	r2, sp
 801475a:	425b      	negs	r3, r3
 801475c:	82d3      	strh	r3, [r2, #22]
 801475e:	0028      	movs	r0, r5
 8014760:	ab21      	add	r3, sp, #132	; 0x84
 8014762:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014764:	a902      	add	r1, sp, #8
 8014766:	9301      	str	r3, [sp, #4]
 8014768:	f002 ff9e 	bl	80176a8 <_svfiprintf_r>
 801476c:	1c43      	adds	r3, r0, #1
 801476e:	da01      	bge.n	8014774 <sniprintf+0x58>
 8014770:	238b      	movs	r3, #139	; 0x8b
 8014772:	602b      	str	r3, [r5, #0]
 8014774:	2c00      	cmp	r4, #0
 8014776:	d0dd      	beq.n	8014734 <sniprintf+0x18>
 8014778:	2300      	movs	r3, #0
 801477a:	9a02      	ldr	r2, [sp, #8]
 801477c:	7013      	strb	r3, [r2, #0]
 801477e:	e7d9      	b.n	8014734 <sniprintf+0x18>
 8014780:	200000c0 	.word	0x200000c0

08014784 <siprintf>:
 8014784:	b40e      	push	{r1, r2, r3}
 8014786:	b500      	push	{lr}
 8014788:	490b      	ldr	r1, [pc, #44]	; (80147b8 <siprintf+0x34>)
 801478a:	b09c      	sub	sp, #112	; 0x70
 801478c:	ab1d      	add	r3, sp, #116	; 0x74
 801478e:	9002      	str	r0, [sp, #8]
 8014790:	9006      	str	r0, [sp, #24]
 8014792:	9107      	str	r1, [sp, #28]
 8014794:	9104      	str	r1, [sp, #16]
 8014796:	4809      	ldr	r0, [pc, #36]	; (80147bc <siprintf+0x38>)
 8014798:	4909      	ldr	r1, [pc, #36]	; (80147c0 <siprintf+0x3c>)
 801479a:	cb04      	ldmia	r3!, {r2}
 801479c:	9105      	str	r1, [sp, #20]
 801479e:	6800      	ldr	r0, [r0, #0]
 80147a0:	a902      	add	r1, sp, #8
 80147a2:	9301      	str	r3, [sp, #4]
 80147a4:	f002 ff80 	bl	80176a8 <_svfiprintf_r>
 80147a8:	2300      	movs	r3, #0
 80147aa:	9a02      	ldr	r2, [sp, #8]
 80147ac:	7013      	strb	r3, [r2, #0]
 80147ae:	b01c      	add	sp, #112	; 0x70
 80147b0:	bc08      	pop	{r3}
 80147b2:	b003      	add	sp, #12
 80147b4:	4718      	bx	r3
 80147b6:	46c0      	nop			; (mov r8, r8)
 80147b8:	7fffffff 	.word	0x7fffffff
 80147bc:	200000c0 	.word	0x200000c0
 80147c0:	ffff0208 	.word	0xffff0208

080147c4 <strcat>:
 80147c4:	0002      	movs	r2, r0
 80147c6:	b510      	push	{r4, lr}
 80147c8:	7813      	ldrb	r3, [r2, #0]
 80147ca:	0014      	movs	r4, r2
 80147cc:	3201      	adds	r2, #1
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d1fa      	bne.n	80147c8 <strcat+0x4>
 80147d2:	5cca      	ldrb	r2, [r1, r3]
 80147d4:	54e2      	strb	r2, [r4, r3]
 80147d6:	3301      	adds	r3, #1
 80147d8:	2a00      	cmp	r2, #0
 80147da:	d1fa      	bne.n	80147d2 <strcat+0xe>
 80147dc:	bd10      	pop	{r4, pc}

080147de <strchr>:
 80147de:	b2c9      	uxtb	r1, r1
 80147e0:	7803      	ldrb	r3, [r0, #0]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d004      	beq.n	80147f0 <strchr+0x12>
 80147e6:	428b      	cmp	r3, r1
 80147e8:	d100      	bne.n	80147ec <strchr+0xe>
 80147ea:	4770      	bx	lr
 80147ec:	3001      	adds	r0, #1
 80147ee:	e7f7      	b.n	80147e0 <strchr+0x2>
 80147f0:	424b      	negs	r3, r1
 80147f2:	4159      	adcs	r1, r3
 80147f4:	4249      	negs	r1, r1
 80147f6:	4008      	ands	r0, r1
 80147f8:	e7f7      	b.n	80147ea <strchr+0xc>

080147fa <strcpy>:
 80147fa:	0003      	movs	r3, r0
 80147fc:	780a      	ldrb	r2, [r1, #0]
 80147fe:	3101      	adds	r1, #1
 8014800:	701a      	strb	r2, [r3, #0]
 8014802:	3301      	adds	r3, #1
 8014804:	2a00      	cmp	r2, #0
 8014806:	d1f9      	bne.n	80147fc <strcpy+0x2>
 8014808:	4770      	bx	lr

0801480a <strncmp>:
 801480a:	b530      	push	{r4, r5, lr}
 801480c:	0005      	movs	r5, r0
 801480e:	1e10      	subs	r0, r2, #0
 8014810:	d00b      	beq.n	801482a <strncmp+0x20>
 8014812:	2400      	movs	r4, #0
 8014814:	3a01      	subs	r2, #1
 8014816:	5d2b      	ldrb	r3, [r5, r4]
 8014818:	5d08      	ldrb	r0, [r1, r4]
 801481a:	4283      	cmp	r3, r0
 801481c:	d104      	bne.n	8014828 <strncmp+0x1e>
 801481e:	4294      	cmp	r4, r2
 8014820:	d002      	beq.n	8014828 <strncmp+0x1e>
 8014822:	3401      	adds	r4, #1
 8014824:	2b00      	cmp	r3, #0
 8014826:	d1f6      	bne.n	8014816 <strncmp+0xc>
 8014828:	1a18      	subs	r0, r3, r0
 801482a:	bd30      	pop	{r4, r5, pc}

0801482c <strncpy>:
 801482c:	0003      	movs	r3, r0
 801482e:	b530      	push	{r4, r5, lr}
 8014830:	001d      	movs	r5, r3
 8014832:	2a00      	cmp	r2, #0
 8014834:	d006      	beq.n	8014844 <strncpy+0x18>
 8014836:	780c      	ldrb	r4, [r1, #0]
 8014838:	3a01      	subs	r2, #1
 801483a:	3301      	adds	r3, #1
 801483c:	702c      	strb	r4, [r5, #0]
 801483e:	3101      	adds	r1, #1
 8014840:	2c00      	cmp	r4, #0
 8014842:	d1f5      	bne.n	8014830 <strncpy+0x4>
 8014844:	2100      	movs	r1, #0
 8014846:	189a      	adds	r2, r3, r2
 8014848:	4293      	cmp	r3, r2
 801484a:	d100      	bne.n	801484e <strncpy+0x22>
 801484c:	bd30      	pop	{r4, r5, pc}
 801484e:	7019      	strb	r1, [r3, #0]
 8014850:	3301      	adds	r3, #1
 8014852:	e7f9      	b.n	8014848 <strncpy+0x1c>

08014854 <sulp>:
 8014854:	b570      	push	{r4, r5, r6, lr}
 8014856:	0016      	movs	r6, r2
 8014858:	000d      	movs	r5, r1
 801485a:	f002 fd4b 	bl	80172f4 <__ulp>
 801485e:	2e00      	cmp	r6, #0
 8014860:	d00d      	beq.n	801487e <sulp+0x2a>
 8014862:	236b      	movs	r3, #107	; 0x6b
 8014864:	006a      	lsls	r2, r5, #1
 8014866:	0d52      	lsrs	r2, r2, #21
 8014868:	1a9b      	subs	r3, r3, r2
 801486a:	2b00      	cmp	r3, #0
 801486c:	dd07      	ble.n	801487e <sulp+0x2a>
 801486e:	2400      	movs	r4, #0
 8014870:	4a03      	ldr	r2, [pc, #12]	; (8014880 <sulp+0x2c>)
 8014872:	051b      	lsls	r3, r3, #20
 8014874:	189d      	adds	r5, r3, r2
 8014876:	002b      	movs	r3, r5
 8014878:	0022      	movs	r2, r4
 801487a:	f7ed fc0f 	bl	800209c <__aeabi_dmul>
 801487e:	bd70      	pop	{r4, r5, r6, pc}
 8014880:	3ff00000 	.word	0x3ff00000

08014884 <_strtod_l>:
 8014884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014886:	001d      	movs	r5, r3
 8014888:	2300      	movs	r3, #0
 801488a:	b0a7      	sub	sp, #156	; 0x9c
 801488c:	9322      	str	r3, [sp, #136]	; 0x88
 801488e:	4bae      	ldr	r3, [pc, #696]	; (8014b48 <_strtod_l+0x2c4>)
 8014890:	9005      	str	r0, [sp, #20]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	9108      	str	r1, [sp, #32]
 8014896:	0018      	movs	r0, r3
 8014898:	9307      	str	r3, [sp, #28]
 801489a:	921d      	str	r2, [sp, #116]	; 0x74
 801489c:	f7eb fc3c 	bl	8000118 <strlen>
 80148a0:	2600      	movs	r6, #0
 80148a2:	0004      	movs	r4, r0
 80148a4:	2700      	movs	r7, #0
 80148a6:	9b08      	ldr	r3, [sp, #32]
 80148a8:	9321      	str	r3, [sp, #132]	; 0x84
 80148aa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80148ac:	7813      	ldrb	r3, [r2, #0]
 80148ae:	2b2b      	cmp	r3, #43	; 0x2b
 80148b0:	d058      	beq.n	8014964 <_strtod_l+0xe0>
 80148b2:	d844      	bhi.n	801493e <_strtod_l+0xba>
 80148b4:	2b0d      	cmp	r3, #13
 80148b6:	d83d      	bhi.n	8014934 <_strtod_l+0xb0>
 80148b8:	2b08      	cmp	r3, #8
 80148ba:	d83d      	bhi.n	8014938 <_strtod_l+0xb4>
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d047      	beq.n	8014950 <_strtod_l+0xcc>
 80148c0:	2300      	movs	r3, #0
 80148c2:	9310      	str	r3, [sp, #64]	; 0x40
 80148c4:	2200      	movs	r2, #0
 80148c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80148c8:	920a      	str	r2, [sp, #40]	; 0x28
 80148ca:	9306      	str	r3, [sp, #24]
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	2b30      	cmp	r3, #48	; 0x30
 80148d0:	d000      	beq.n	80148d4 <_strtod_l+0x50>
 80148d2:	e083      	b.n	80149dc <_strtod_l+0x158>
 80148d4:	9b06      	ldr	r3, [sp, #24]
 80148d6:	3220      	adds	r2, #32
 80148d8:	785b      	ldrb	r3, [r3, #1]
 80148da:	4393      	bics	r3, r2
 80148dc:	2b58      	cmp	r3, #88	; 0x58
 80148de:	d000      	beq.n	80148e2 <_strtod_l+0x5e>
 80148e0:	e072      	b.n	80149c8 <_strtod_l+0x144>
 80148e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148e4:	9502      	str	r5, [sp, #8]
 80148e6:	9301      	str	r3, [sp, #4]
 80148e8:	ab22      	add	r3, sp, #136	; 0x88
 80148ea:	9300      	str	r3, [sp, #0]
 80148ec:	4a97      	ldr	r2, [pc, #604]	; (8014b4c <_strtod_l+0x2c8>)
 80148ee:	ab23      	add	r3, sp, #140	; 0x8c
 80148f0:	9805      	ldr	r0, [sp, #20]
 80148f2:	a921      	add	r1, sp, #132	; 0x84
 80148f4:	f001 fe3e 	bl	8016574 <__gethex>
 80148f8:	2307      	movs	r3, #7
 80148fa:	0005      	movs	r5, r0
 80148fc:	0004      	movs	r4, r0
 80148fe:	401d      	ands	r5, r3
 8014900:	4218      	tst	r0, r3
 8014902:	d006      	beq.n	8014912 <_strtod_l+0x8e>
 8014904:	2d06      	cmp	r5, #6
 8014906:	d12f      	bne.n	8014968 <_strtod_l+0xe4>
 8014908:	9b06      	ldr	r3, [sp, #24]
 801490a:	3301      	adds	r3, #1
 801490c:	9321      	str	r3, [sp, #132]	; 0x84
 801490e:	2300      	movs	r3, #0
 8014910:	9310      	str	r3, [sp, #64]	; 0x40
 8014912:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014914:	2b00      	cmp	r3, #0
 8014916:	d002      	beq.n	801491e <_strtod_l+0x9a>
 8014918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801491a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801491c:	601a      	str	r2, [r3, #0]
 801491e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014920:	2b00      	cmp	r3, #0
 8014922:	d01c      	beq.n	801495e <_strtod_l+0xda>
 8014924:	2380      	movs	r3, #128	; 0x80
 8014926:	0032      	movs	r2, r6
 8014928:	061b      	lsls	r3, r3, #24
 801492a:	18fb      	adds	r3, r7, r3
 801492c:	0010      	movs	r0, r2
 801492e:	0019      	movs	r1, r3
 8014930:	b027      	add	sp, #156	; 0x9c
 8014932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014934:	2b20      	cmp	r3, #32
 8014936:	d1c3      	bne.n	80148c0 <_strtod_l+0x3c>
 8014938:	3201      	adds	r2, #1
 801493a:	9221      	str	r2, [sp, #132]	; 0x84
 801493c:	e7b5      	b.n	80148aa <_strtod_l+0x26>
 801493e:	2b2d      	cmp	r3, #45	; 0x2d
 8014940:	d1be      	bne.n	80148c0 <_strtod_l+0x3c>
 8014942:	3b2c      	subs	r3, #44	; 0x2c
 8014944:	9310      	str	r3, [sp, #64]	; 0x40
 8014946:	1c53      	adds	r3, r2, #1
 8014948:	9321      	str	r3, [sp, #132]	; 0x84
 801494a:	7853      	ldrb	r3, [r2, #1]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d1b9      	bne.n	80148c4 <_strtod_l+0x40>
 8014950:	9b08      	ldr	r3, [sp, #32]
 8014952:	9321      	str	r3, [sp, #132]	; 0x84
 8014954:	2300      	movs	r3, #0
 8014956:	9310      	str	r3, [sp, #64]	; 0x40
 8014958:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801495a:	2b00      	cmp	r3, #0
 801495c:	d1dc      	bne.n	8014918 <_strtod_l+0x94>
 801495e:	0032      	movs	r2, r6
 8014960:	003b      	movs	r3, r7
 8014962:	e7e3      	b.n	801492c <_strtod_l+0xa8>
 8014964:	2300      	movs	r3, #0
 8014966:	e7ed      	b.n	8014944 <_strtod_l+0xc0>
 8014968:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801496a:	2a00      	cmp	r2, #0
 801496c:	d007      	beq.n	801497e <_strtod_l+0xfa>
 801496e:	2135      	movs	r1, #53	; 0x35
 8014970:	a824      	add	r0, sp, #144	; 0x90
 8014972:	f002 fdbe 	bl	80174f2 <__copybits>
 8014976:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014978:	9805      	ldr	r0, [sp, #20]
 801497a:	f002 f979 	bl	8016c70 <_Bfree>
 801497e:	1e68      	subs	r0, r5, #1
 8014980:	2805      	cmp	r0, #5
 8014982:	d806      	bhi.n	8014992 <_strtod_l+0x10e>
 8014984:	f7eb fbd0 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014988:	1c190b0e 	.word	0x1c190b0e
 801498c:	030e      	.short	0x030e
 801498e:	2700      	movs	r7, #0
 8014990:	003e      	movs	r6, r7
 8014992:	0723      	lsls	r3, r4, #28
 8014994:	d5bd      	bpl.n	8014912 <_strtod_l+0x8e>
 8014996:	2380      	movs	r3, #128	; 0x80
 8014998:	061b      	lsls	r3, r3, #24
 801499a:	431f      	orrs	r7, r3
 801499c:	e7b9      	b.n	8014912 <_strtod_l+0x8e>
 801499e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80149a0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80149a2:	e7f6      	b.n	8014992 <_strtod_l+0x10e>
 80149a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80149a6:	4a6a      	ldr	r2, [pc, #424]	; (8014b50 <_strtod_l+0x2cc>)
 80149a8:	496a      	ldr	r1, [pc, #424]	; (8014b54 <_strtod_l+0x2d0>)
 80149aa:	401a      	ands	r2, r3
 80149ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80149ae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80149b0:	185b      	adds	r3, r3, r1
 80149b2:	051b      	lsls	r3, r3, #20
 80149b4:	431a      	orrs	r2, r3
 80149b6:	0017      	movs	r7, r2
 80149b8:	e7eb      	b.n	8014992 <_strtod_l+0x10e>
 80149ba:	2600      	movs	r6, #0
 80149bc:	4f66      	ldr	r7, [pc, #408]	; (8014b58 <_strtod_l+0x2d4>)
 80149be:	e7e8      	b.n	8014992 <_strtod_l+0x10e>
 80149c0:	2601      	movs	r6, #1
 80149c2:	4f66      	ldr	r7, [pc, #408]	; (8014b5c <_strtod_l+0x2d8>)
 80149c4:	4276      	negs	r6, r6
 80149c6:	e7e4      	b.n	8014992 <_strtod_l+0x10e>
 80149c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149ca:	1c5a      	adds	r2, r3, #1
 80149cc:	9221      	str	r2, [sp, #132]	; 0x84
 80149ce:	785b      	ldrb	r3, [r3, #1]
 80149d0:	2b30      	cmp	r3, #48	; 0x30
 80149d2:	d0f9      	beq.n	80149c8 <_strtod_l+0x144>
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d09c      	beq.n	8014912 <_strtod_l+0x8e>
 80149d8:	2301      	movs	r3, #1
 80149da:	930a      	str	r3, [sp, #40]	; 0x28
 80149dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149de:	220a      	movs	r2, #10
 80149e0:	9311      	str	r3, [sp, #68]	; 0x44
 80149e2:	2300      	movs	r3, #0
 80149e4:	930e      	str	r3, [sp, #56]	; 0x38
 80149e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80149e8:	9309      	str	r3, [sp, #36]	; 0x24
 80149ea:	9821      	ldr	r0, [sp, #132]	; 0x84
 80149ec:	7805      	ldrb	r5, [r0, #0]
 80149ee:	002b      	movs	r3, r5
 80149f0:	3b30      	subs	r3, #48	; 0x30
 80149f2:	b2d9      	uxtb	r1, r3
 80149f4:	2909      	cmp	r1, #9
 80149f6:	d927      	bls.n	8014a48 <_strtod_l+0x1c4>
 80149f8:	0022      	movs	r2, r4
 80149fa:	9907      	ldr	r1, [sp, #28]
 80149fc:	f7ff ff05 	bl	801480a <strncmp>
 8014a00:	2800      	cmp	r0, #0
 8014a02:	d033      	beq.n	8014a6c <_strtod_l+0x1e8>
 8014a04:	2000      	movs	r0, #0
 8014a06:	002b      	movs	r3, r5
 8014a08:	4684      	mov	ip, r0
 8014a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a0c:	900c      	str	r0, [sp, #48]	; 0x30
 8014a0e:	9206      	str	r2, [sp, #24]
 8014a10:	2220      	movs	r2, #32
 8014a12:	0019      	movs	r1, r3
 8014a14:	4391      	bics	r1, r2
 8014a16:	000a      	movs	r2, r1
 8014a18:	2100      	movs	r1, #0
 8014a1a:	9107      	str	r1, [sp, #28]
 8014a1c:	2a45      	cmp	r2, #69	; 0x45
 8014a1e:	d000      	beq.n	8014a22 <_strtod_l+0x19e>
 8014a20:	e0c5      	b.n	8014bae <_strtod_l+0x32a>
 8014a22:	9b06      	ldr	r3, [sp, #24]
 8014a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a26:	4303      	orrs	r3, r0
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	428b      	cmp	r3, r1
 8014a2c:	d090      	beq.n	8014950 <_strtod_l+0xcc>
 8014a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a30:	9308      	str	r3, [sp, #32]
 8014a32:	3301      	adds	r3, #1
 8014a34:	9321      	str	r3, [sp, #132]	; 0x84
 8014a36:	9b08      	ldr	r3, [sp, #32]
 8014a38:	785b      	ldrb	r3, [r3, #1]
 8014a3a:	2b2b      	cmp	r3, #43	; 0x2b
 8014a3c:	d075      	beq.n	8014b2a <_strtod_l+0x2a6>
 8014a3e:	000c      	movs	r4, r1
 8014a40:	2b2d      	cmp	r3, #45	; 0x2d
 8014a42:	d178      	bne.n	8014b36 <_strtod_l+0x2b2>
 8014a44:	2401      	movs	r4, #1
 8014a46:	e071      	b.n	8014b2c <_strtod_l+0x2a8>
 8014a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a4a:	2908      	cmp	r1, #8
 8014a4c:	dc09      	bgt.n	8014a62 <_strtod_l+0x1de>
 8014a4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014a50:	4351      	muls	r1, r2
 8014a52:	185b      	adds	r3, r3, r1
 8014a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a58:	3001      	adds	r0, #1
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8014a5e:	9021      	str	r0, [sp, #132]	; 0x84
 8014a60:	e7c3      	b.n	80149ea <_strtod_l+0x166>
 8014a62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014a64:	4351      	muls	r1, r2
 8014a66:	185b      	adds	r3, r3, r1
 8014a68:	930e      	str	r3, [sp, #56]	; 0x38
 8014a6a:	e7f4      	b.n	8014a56 <_strtod_l+0x1d2>
 8014a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a70:	191c      	adds	r4, r3, r4
 8014a72:	9421      	str	r4, [sp, #132]	; 0x84
 8014a74:	7823      	ldrb	r3, [r4, #0]
 8014a76:	2a00      	cmp	r2, #0
 8014a78:	d039      	beq.n	8014aee <_strtod_l+0x26a>
 8014a7a:	900c      	str	r0, [sp, #48]	; 0x30
 8014a7c:	9206      	str	r2, [sp, #24]
 8014a7e:	001a      	movs	r2, r3
 8014a80:	3a30      	subs	r2, #48	; 0x30
 8014a82:	2a09      	cmp	r2, #9
 8014a84:	d912      	bls.n	8014aac <_strtod_l+0x228>
 8014a86:	2201      	movs	r2, #1
 8014a88:	4694      	mov	ip, r2
 8014a8a:	e7c1      	b.n	8014a10 <_strtod_l+0x18c>
 8014a8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a8e:	3001      	adds	r0, #1
 8014a90:	1c5a      	adds	r2, r3, #1
 8014a92:	9221      	str	r2, [sp, #132]	; 0x84
 8014a94:	785b      	ldrb	r3, [r3, #1]
 8014a96:	2b30      	cmp	r3, #48	; 0x30
 8014a98:	d0f8      	beq.n	8014a8c <_strtod_l+0x208>
 8014a9a:	001a      	movs	r2, r3
 8014a9c:	3a31      	subs	r2, #49	; 0x31
 8014a9e:	2a08      	cmp	r2, #8
 8014aa0:	d83e      	bhi.n	8014b20 <_strtod_l+0x29c>
 8014aa2:	900c      	str	r0, [sp, #48]	; 0x30
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014aa8:	9006      	str	r0, [sp, #24]
 8014aaa:	9211      	str	r2, [sp, #68]	; 0x44
 8014aac:	001a      	movs	r2, r3
 8014aae:	9906      	ldr	r1, [sp, #24]
 8014ab0:	1c44      	adds	r4, r0, #1
 8014ab2:	3a30      	subs	r2, #48	; 0x30
 8014ab4:	2b30      	cmp	r3, #48	; 0x30
 8014ab6:	d013      	beq.n	8014ae0 <_strtod_l+0x25c>
 8014ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aba:	191b      	adds	r3, r3, r4
 8014abc:	930c      	str	r3, [sp, #48]	; 0x30
 8014abe:	1844      	adds	r4, r0, r1
 8014ac0:	000b      	movs	r3, r1
 8014ac2:	210a      	movs	r1, #10
 8014ac4:	429c      	cmp	r4, r3
 8014ac6:	d114      	bne.n	8014af2 <_strtod_l+0x26e>
 8014ac8:	9b06      	ldr	r3, [sp, #24]
 8014aca:	1c59      	adds	r1, r3, #1
 8014acc:	1809      	adds	r1, r1, r0
 8014ace:	1818      	adds	r0, r3, r0
 8014ad0:	2808      	cmp	r0, #8
 8014ad2:	dc1c      	bgt.n	8014b0e <_strtod_l+0x28a>
 8014ad4:	230a      	movs	r3, #10
 8014ad6:	2400      	movs	r4, #0
 8014ad8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014ada:	4343      	muls	r3, r0
 8014adc:	18d3      	adds	r3, r2, r3
 8014ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ae0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ae2:	0020      	movs	r0, r4
 8014ae4:	1c5a      	adds	r2, r3, #1
 8014ae6:	9221      	str	r2, [sp, #132]	; 0x84
 8014ae8:	785b      	ldrb	r3, [r3, #1]
 8014aea:	9106      	str	r1, [sp, #24]
 8014aec:	e7c7      	b.n	8014a7e <_strtod_l+0x1fa>
 8014aee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014af0:	e7d1      	b.n	8014a96 <_strtod_l+0x212>
 8014af2:	2b08      	cmp	r3, #8
 8014af4:	dc04      	bgt.n	8014b00 <_strtod_l+0x27c>
 8014af6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014af8:	434d      	muls	r5, r1
 8014afa:	950b      	str	r5, [sp, #44]	; 0x2c
 8014afc:	3301      	adds	r3, #1
 8014afe:	e7e1      	b.n	8014ac4 <_strtod_l+0x240>
 8014b00:	1c5d      	adds	r5, r3, #1
 8014b02:	2d10      	cmp	r5, #16
 8014b04:	dcfa      	bgt.n	8014afc <_strtod_l+0x278>
 8014b06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014b08:	434d      	muls	r5, r1
 8014b0a:	950e      	str	r5, [sp, #56]	; 0x38
 8014b0c:	e7f6      	b.n	8014afc <_strtod_l+0x278>
 8014b0e:	2400      	movs	r4, #0
 8014b10:	2910      	cmp	r1, #16
 8014b12:	dce5      	bgt.n	8014ae0 <_strtod_l+0x25c>
 8014b14:	230a      	movs	r3, #10
 8014b16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014b18:	4343      	muls	r3, r0
 8014b1a:	18d3      	adds	r3, r2, r3
 8014b1c:	930e      	str	r3, [sp, #56]	; 0x38
 8014b1e:	e7df      	b.n	8014ae0 <_strtod_l+0x25c>
 8014b20:	2200      	movs	r2, #0
 8014b22:	920c      	str	r2, [sp, #48]	; 0x30
 8014b24:	9206      	str	r2, [sp, #24]
 8014b26:	3201      	adds	r2, #1
 8014b28:	e7ae      	b.n	8014a88 <_strtod_l+0x204>
 8014b2a:	2400      	movs	r4, #0
 8014b2c:	9b08      	ldr	r3, [sp, #32]
 8014b2e:	3302      	adds	r3, #2
 8014b30:	9321      	str	r3, [sp, #132]	; 0x84
 8014b32:	9b08      	ldr	r3, [sp, #32]
 8014b34:	789b      	ldrb	r3, [r3, #2]
 8014b36:	001a      	movs	r2, r3
 8014b38:	3a30      	subs	r2, #48	; 0x30
 8014b3a:	2a09      	cmp	r2, #9
 8014b3c:	d914      	bls.n	8014b68 <_strtod_l+0x2e4>
 8014b3e:	9a08      	ldr	r2, [sp, #32]
 8014b40:	9221      	str	r2, [sp, #132]	; 0x84
 8014b42:	2200      	movs	r2, #0
 8014b44:	e032      	b.n	8014bac <_strtod_l+0x328>
 8014b46:	46c0      	nop			; (mov r8, r8)
 8014b48:	0801b88c 	.word	0x0801b88c
 8014b4c:	0801b6b8 	.word	0x0801b6b8
 8014b50:	ffefffff 	.word	0xffefffff
 8014b54:	00000433 	.word	0x00000433
 8014b58:	7ff00000 	.word	0x7ff00000
 8014b5c:	7fffffff 	.word	0x7fffffff
 8014b60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b62:	1c5a      	adds	r2, r3, #1
 8014b64:	9221      	str	r2, [sp, #132]	; 0x84
 8014b66:	785b      	ldrb	r3, [r3, #1]
 8014b68:	2b30      	cmp	r3, #48	; 0x30
 8014b6a:	d0f9      	beq.n	8014b60 <_strtod_l+0x2dc>
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	9207      	str	r2, [sp, #28]
 8014b70:	001a      	movs	r2, r3
 8014b72:	3a31      	subs	r2, #49	; 0x31
 8014b74:	2a08      	cmp	r2, #8
 8014b76:	d81a      	bhi.n	8014bae <_strtod_l+0x32a>
 8014b78:	3b30      	subs	r3, #48	; 0x30
 8014b7a:	001a      	movs	r2, r3
 8014b7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b7e:	9307      	str	r3, [sp, #28]
 8014b80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b82:	1c59      	adds	r1, r3, #1
 8014b84:	9121      	str	r1, [sp, #132]	; 0x84
 8014b86:	785b      	ldrb	r3, [r3, #1]
 8014b88:	001d      	movs	r5, r3
 8014b8a:	3d30      	subs	r5, #48	; 0x30
 8014b8c:	2d09      	cmp	r5, #9
 8014b8e:	d939      	bls.n	8014c04 <_strtod_l+0x380>
 8014b90:	9d07      	ldr	r5, [sp, #28]
 8014b92:	1b49      	subs	r1, r1, r5
 8014b94:	4daf      	ldr	r5, [pc, #700]	; (8014e54 <_strtod_l+0x5d0>)
 8014b96:	9507      	str	r5, [sp, #28]
 8014b98:	2908      	cmp	r1, #8
 8014b9a:	dc03      	bgt.n	8014ba4 <_strtod_l+0x320>
 8014b9c:	9207      	str	r2, [sp, #28]
 8014b9e:	42aa      	cmp	r2, r5
 8014ba0:	dd00      	ble.n	8014ba4 <_strtod_l+0x320>
 8014ba2:	9507      	str	r5, [sp, #28]
 8014ba4:	2c00      	cmp	r4, #0
 8014ba6:	d002      	beq.n	8014bae <_strtod_l+0x32a>
 8014ba8:	9a07      	ldr	r2, [sp, #28]
 8014baa:	4252      	negs	r2, r2
 8014bac:	9207      	str	r2, [sp, #28]
 8014bae:	9a06      	ldr	r2, [sp, #24]
 8014bb0:	2a00      	cmp	r2, #0
 8014bb2:	d14b      	bne.n	8014c4c <_strtod_l+0x3c8>
 8014bb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bb6:	4310      	orrs	r0, r2
 8014bb8:	d000      	beq.n	8014bbc <_strtod_l+0x338>
 8014bba:	e6aa      	b.n	8014912 <_strtod_l+0x8e>
 8014bbc:	4662      	mov	r2, ip
 8014bbe:	2a00      	cmp	r2, #0
 8014bc0:	d000      	beq.n	8014bc4 <_strtod_l+0x340>
 8014bc2:	e6c5      	b.n	8014950 <_strtod_l+0xcc>
 8014bc4:	2b69      	cmp	r3, #105	; 0x69
 8014bc6:	d025      	beq.n	8014c14 <_strtod_l+0x390>
 8014bc8:	dc21      	bgt.n	8014c0e <_strtod_l+0x38a>
 8014bca:	2b49      	cmp	r3, #73	; 0x49
 8014bcc:	d022      	beq.n	8014c14 <_strtod_l+0x390>
 8014bce:	2b4e      	cmp	r3, #78	; 0x4e
 8014bd0:	d000      	beq.n	8014bd4 <_strtod_l+0x350>
 8014bd2:	e6bd      	b.n	8014950 <_strtod_l+0xcc>
 8014bd4:	49a0      	ldr	r1, [pc, #640]	; (8014e58 <_strtod_l+0x5d4>)
 8014bd6:	a821      	add	r0, sp, #132	; 0x84
 8014bd8:	f001 ff1a 	bl	8016a10 <__match>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d100      	bne.n	8014be2 <_strtod_l+0x35e>
 8014be0:	e6b6      	b.n	8014950 <_strtod_l+0xcc>
 8014be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	2b28      	cmp	r3, #40	; 0x28
 8014be8:	d12a      	bne.n	8014c40 <_strtod_l+0x3bc>
 8014bea:	499c      	ldr	r1, [pc, #624]	; (8014e5c <_strtod_l+0x5d8>)
 8014bec:	aa24      	add	r2, sp, #144	; 0x90
 8014bee:	a821      	add	r0, sp, #132	; 0x84
 8014bf0:	f001 ff22 	bl	8016a38 <__hexnan>
 8014bf4:	2805      	cmp	r0, #5
 8014bf6:	d123      	bne.n	8014c40 <_strtod_l+0x3bc>
 8014bf8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014bfa:	4a99      	ldr	r2, [pc, #612]	; (8014e60 <_strtod_l+0x5dc>)
 8014bfc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014bfe:	431a      	orrs	r2, r3
 8014c00:	0017      	movs	r7, r2
 8014c02:	e686      	b.n	8014912 <_strtod_l+0x8e>
 8014c04:	210a      	movs	r1, #10
 8014c06:	434a      	muls	r2, r1
 8014c08:	18d2      	adds	r2, r2, r3
 8014c0a:	3a30      	subs	r2, #48	; 0x30
 8014c0c:	e7b8      	b.n	8014b80 <_strtod_l+0x2fc>
 8014c0e:	2b6e      	cmp	r3, #110	; 0x6e
 8014c10:	d0e0      	beq.n	8014bd4 <_strtod_l+0x350>
 8014c12:	e69d      	b.n	8014950 <_strtod_l+0xcc>
 8014c14:	4993      	ldr	r1, [pc, #588]	; (8014e64 <_strtod_l+0x5e0>)
 8014c16:	a821      	add	r0, sp, #132	; 0x84
 8014c18:	f001 fefa 	bl	8016a10 <__match>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	d100      	bne.n	8014c22 <_strtod_l+0x39e>
 8014c20:	e696      	b.n	8014950 <_strtod_l+0xcc>
 8014c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c24:	4990      	ldr	r1, [pc, #576]	; (8014e68 <_strtod_l+0x5e4>)
 8014c26:	3b01      	subs	r3, #1
 8014c28:	a821      	add	r0, sp, #132	; 0x84
 8014c2a:	9321      	str	r3, [sp, #132]	; 0x84
 8014c2c:	f001 fef0 	bl	8016a10 <__match>
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d102      	bne.n	8014c3a <_strtod_l+0x3b6>
 8014c34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c36:	3301      	adds	r3, #1
 8014c38:	9321      	str	r3, [sp, #132]	; 0x84
 8014c3a:	2600      	movs	r6, #0
 8014c3c:	4f88      	ldr	r7, [pc, #544]	; (8014e60 <_strtod_l+0x5dc>)
 8014c3e:	e668      	b.n	8014912 <_strtod_l+0x8e>
 8014c40:	488a      	ldr	r0, [pc, #552]	; (8014e6c <_strtod_l+0x5e8>)
 8014c42:	f002 ff93 	bl	8017b6c <nan>
 8014c46:	0006      	movs	r6, r0
 8014c48:	000f      	movs	r7, r1
 8014c4a:	e662      	b.n	8014912 <_strtod_l+0x8e>
 8014c4c:	9b07      	ldr	r3, [sp, #28]
 8014c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c50:	1a9b      	subs	r3, r3, r2
 8014c52:	930a      	str	r3, [sp, #40]	; 0x28
 8014c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d101      	bne.n	8014c5e <_strtod_l+0x3da>
 8014c5a:	9b06      	ldr	r3, [sp, #24]
 8014c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c5e:	9c06      	ldr	r4, [sp, #24]
 8014c60:	2c10      	cmp	r4, #16
 8014c62:	dd00      	ble.n	8014c66 <_strtod_l+0x3e2>
 8014c64:	2410      	movs	r4, #16
 8014c66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014c68:	f7ee f89a 	bl	8002da0 <__aeabi_ui2d>
 8014c6c:	9b06      	ldr	r3, [sp, #24]
 8014c6e:	0006      	movs	r6, r0
 8014c70:	000f      	movs	r7, r1
 8014c72:	2b09      	cmp	r3, #9
 8014c74:	dd15      	ble.n	8014ca2 <_strtod_l+0x41e>
 8014c76:	0022      	movs	r2, r4
 8014c78:	4b7d      	ldr	r3, [pc, #500]	; (8014e70 <_strtod_l+0x5ec>)
 8014c7a:	3a09      	subs	r2, #9
 8014c7c:	00d2      	lsls	r2, r2, #3
 8014c7e:	189b      	adds	r3, r3, r2
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	f7ed fa0a 	bl	800209c <__aeabi_dmul>
 8014c88:	0006      	movs	r6, r0
 8014c8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014c8c:	000f      	movs	r7, r1
 8014c8e:	f7ee f887 	bl	8002da0 <__aeabi_ui2d>
 8014c92:	0002      	movs	r2, r0
 8014c94:	000b      	movs	r3, r1
 8014c96:	0030      	movs	r0, r6
 8014c98:	0039      	movs	r1, r7
 8014c9a:	f7ec fa8f 	bl	80011bc <__aeabi_dadd>
 8014c9e:	0006      	movs	r6, r0
 8014ca0:	000f      	movs	r7, r1
 8014ca2:	9b06      	ldr	r3, [sp, #24]
 8014ca4:	2b0f      	cmp	r3, #15
 8014ca6:	dc39      	bgt.n	8014d1c <_strtod_l+0x498>
 8014ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d100      	bne.n	8014cb0 <_strtod_l+0x42c>
 8014cae:	e630      	b.n	8014912 <_strtod_l+0x8e>
 8014cb0:	dd24      	ble.n	8014cfc <_strtod_l+0x478>
 8014cb2:	2b16      	cmp	r3, #22
 8014cb4:	dc09      	bgt.n	8014cca <_strtod_l+0x446>
 8014cb6:	00dd      	lsls	r5, r3, #3
 8014cb8:	0032      	movs	r2, r6
 8014cba:	003b      	movs	r3, r7
 8014cbc:	4c6c      	ldr	r4, [pc, #432]	; (8014e70 <_strtod_l+0x5ec>)
 8014cbe:	1964      	adds	r4, r4, r5
 8014cc0:	6820      	ldr	r0, [r4, #0]
 8014cc2:	6861      	ldr	r1, [r4, #4]
 8014cc4:	f7ed f9ea 	bl	800209c <__aeabi_dmul>
 8014cc8:	e7bd      	b.n	8014c46 <_strtod_l+0x3c2>
 8014cca:	2325      	movs	r3, #37	; 0x25
 8014ccc:	9a06      	ldr	r2, [sp, #24]
 8014cce:	1a9b      	subs	r3, r3, r2
 8014cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	db22      	blt.n	8014d1c <_strtod_l+0x498>
 8014cd6:	240f      	movs	r4, #15
 8014cd8:	9b06      	ldr	r3, [sp, #24]
 8014cda:	4d65      	ldr	r5, [pc, #404]	; (8014e70 <_strtod_l+0x5ec>)
 8014cdc:	1ae4      	subs	r4, r4, r3
 8014cde:	00e1      	lsls	r1, r4, #3
 8014ce0:	1869      	adds	r1, r5, r1
 8014ce2:	0032      	movs	r2, r6
 8014ce4:	6808      	ldr	r0, [r1, #0]
 8014ce6:	6849      	ldr	r1, [r1, #4]
 8014ce8:	003b      	movs	r3, r7
 8014cea:	f7ed f9d7 	bl	800209c <__aeabi_dmul>
 8014cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cf0:	1b1c      	subs	r4, r3, r4
 8014cf2:	00e4      	lsls	r4, r4, #3
 8014cf4:	192c      	adds	r4, r5, r4
 8014cf6:	6822      	ldr	r2, [r4, #0]
 8014cf8:	6863      	ldr	r3, [r4, #4]
 8014cfa:	e7e3      	b.n	8014cc4 <_strtod_l+0x440>
 8014cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cfe:	3316      	adds	r3, #22
 8014d00:	db0c      	blt.n	8014d1c <_strtod_l+0x498>
 8014d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d04:	9a07      	ldr	r2, [sp, #28]
 8014d06:	0030      	movs	r0, r6
 8014d08:	1a9a      	subs	r2, r3, r2
 8014d0a:	4b59      	ldr	r3, [pc, #356]	; (8014e70 <_strtod_l+0x5ec>)
 8014d0c:	00d2      	lsls	r2, r2, #3
 8014d0e:	189b      	adds	r3, r3, r2
 8014d10:	0039      	movs	r1, r7
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	f7ec fdbb 	bl	8001890 <__aeabi_ddiv>
 8014d1a:	e794      	b.n	8014c46 <_strtod_l+0x3c2>
 8014d1c:	9b06      	ldr	r3, [sp, #24]
 8014d1e:	1b1c      	subs	r4, r3, r4
 8014d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d22:	18e4      	adds	r4, r4, r3
 8014d24:	2c00      	cmp	r4, #0
 8014d26:	dd70      	ble.n	8014e0a <_strtod_l+0x586>
 8014d28:	230f      	movs	r3, #15
 8014d2a:	0021      	movs	r1, r4
 8014d2c:	4019      	ands	r1, r3
 8014d2e:	421c      	tst	r4, r3
 8014d30:	d00a      	beq.n	8014d48 <_strtod_l+0x4c4>
 8014d32:	00cb      	lsls	r3, r1, #3
 8014d34:	494e      	ldr	r1, [pc, #312]	; (8014e70 <_strtod_l+0x5ec>)
 8014d36:	0032      	movs	r2, r6
 8014d38:	18c9      	adds	r1, r1, r3
 8014d3a:	6808      	ldr	r0, [r1, #0]
 8014d3c:	6849      	ldr	r1, [r1, #4]
 8014d3e:	003b      	movs	r3, r7
 8014d40:	f7ed f9ac 	bl	800209c <__aeabi_dmul>
 8014d44:	0006      	movs	r6, r0
 8014d46:	000f      	movs	r7, r1
 8014d48:	230f      	movs	r3, #15
 8014d4a:	439c      	bics	r4, r3
 8014d4c:	d048      	beq.n	8014de0 <_strtod_l+0x55c>
 8014d4e:	3326      	adds	r3, #38	; 0x26
 8014d50:	33ff      	adds	r3, #255	; 0xff
 8014d52:	429c      	cmp	r4, r3
 8014d54:	dd22      	ble.n	8014d9c <_strtod_l+0x518>
 8014d56:	2300      	movs	r3, #0
 8014d58:	9306      	str	r3, [sp, #24]
 8014d5a:	9307      	str	r3, [sp, #28]
 8014d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8014d60:	2322      	movs	r3, #34	; 0x22
 8014d62:	2600      	movs	r6, #0
 8014d64:	9a05      	ldr	r2, [sp, #20]
 8014d66:	4f3e      	ldr	r7, [pc, #248]	; (8014e60 <_strtod_l+0x5dc>)
 8014d68:	6013      	str	r3, [r2, #0]
 8014d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d6c:	42b3      	cmp	r3, r6
 8014d6e:	d100      	bne.n	8014d72 <_strtod_l+0x4ee>
 8014d70:	e5cf      	b.n	8014912 <_strtod_l+0x8e>
 8014d72:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014d74:	9805      	ldr	r0, [sp, #20]
 8014d76:	f001 ff7b 	bl	8016c70 <_Bfree>
 8014d7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d7c:	9805      	ldr	r0, [sp, #20]
 8014d7e:	f001 ff77 	bl	8016c70 <_Bfree>
 8014d82:	9907      	ldr	r1, [sp, #28]
 8014d84:	9805      	ldr	r0, [sp, #20]
 8014d86:	f001 ff73 	bl	8016c70 <_Bfree>
 8014d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014d8c:	9805      	ldr	r0, [sp, #20]
 8014d8e:	f001 ff6f 	bl	8016c70 <_Bfree>
 8014d92:	9906      	ldr	r1, [sp, #24]
 8014d94:	9805      	ldr	r0, [sp, #20]
 8014d96:	f001 ff6b 	bl	8016c70 <_Bfree>
 8014d9a:	e5ba      	b.n	8014912 <_strtod_l+0x8e>
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	0030      	movs	r0, r6
 8014da0:	0039      	movs	r1, r7
 8014da2:	001d      	movs	r5, r3
 8014da4:	1124      	asrs	r4, r4, #4
 8014da6:	2c01      	cmp	r4, #1
 8014da8:	dc1d      	bgt.n	8014de6 <_strtod_l+0x562>
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d001      	beq.n	8014db2 <_strtod_l+0x52e>
 8014dae:	0006      	movs	r6, r0
 8014db0:	000f      	movs	r7, r1
 8014db2:	4b30      	ldr	r3, [pc, #192]	; (8014e74 <_strtod_l+0x5f0>)
 8014db4:	00ed      	lsls	r5, r5, #3
 8014db6:	18ff      	adds	r7, r7, r3
 8014db8:	4b2f      	ldr	r3, [pc, #188]	; (8014e78 <_strtod_l+0x5f4>)
 8014dba:	0032      	movs	r2, r6
 8014dbc:	195d      	adds	r5, r3, r5
 8014dbe:	6828      	ldr	r0, [r5, #0]
 8014dc0:	6869      	ldr	r1, [r5, #4]
 8014dc2:	003b      	movs	r3, r7
 8014dc4:	f7ed f96a 	bl	800209c <__aeabi_dmul>
 8014dc8:	4b25      	ldr	r3, [pc, #148]	; (8014e60 <_strtod_l+0x5dc>)
 8014dca:	4a2c      	ldr	r2, [pc, #176]	; (8014e7c <_strtod_l+0x5f8>)
 8014dcc:	0006      	movs	r6, r0
 8014dce:	400b      	ands	r3, r1
 8014dd0:	4293      	cmp	r3, r2
 8014dd2:	d8c0      	bhi.n	8014d56 <_strtod_l+0x4d2>
 8014dd4:	4a2a      	ldr	r2, [pc, #168]	; (8014e80 <_strtod_l+0x5fc>)
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	d913      	bls.n	8014e02 <_strtod_l+0x57e>
 8014dda:	2601      	movs	r6, #1
 8014ddc:	4f29      	ldr	r7, [pc, #164]	; (8014e84 <_strtod_l+0x600>)
 8014dde:	4276      	negs	r6, r6
 8014de0:	2300      	movs	r3, #0
 8014de2:	9308      	str	r3, [sp, #32]
 8014de4:	e087      	b.n	8014ef6 <_strtod_l+0x672>
 8014de6:	2201      	movs	r2, #1
 8014de8:	4214      	tst	r4, r2
 8014dea:	d007      	beq.n	8014dfc <_strtod_l+0x578>
 8014dec:	4a22      	ldr	r2, [pc, #136]	; (8014e78 <_strtod_l+0x5f4>)
 8014dee:	00eb      	lsls	r3, r5, #3
 8014df0:	189b      	adds	r3, r3, r2
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	685b      	ldr	r3, [r3, #4]
 8014df6:	f7ed f951 	bl	800209c <__aeabi_dmul>
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	3501      	adds	r5, #1
 8014dfe:	1064      	asrs	r4, r4, #1
 8014e00:	e7d1      	b.n	8014da6 <_strtod_l+0x522>
 8014e02:	23d4      	movs	r3, #212	; 0xd4
 8014e04:	049b      	lsls	r3, r3, #18
 8014e06:	18cf      	adds	r7, r1, r3
 8014e08:	e7ea      	b.n	8014de0 <_strtod_l+0x55c>
 8014e0a:	2c00      	cmp	r4, #0
 8014e0c:	d0e8      	beq.n	8014de0 <_strtod_l+0x55c>
 8014e0e:	4264      	negs	r4, r4
 8014e10:	220f      	movs	r2, #15
 8014e12:	0023      	movs	r3, r4
 8014e14:	4013      	ands	r3, r2
 8014e16:	4214      	tst	r4, r2
 8014e18:	d00a      	beq.n	8014e30 <_strtod_l+0x5ac>
 8014e1a:	00da      	lsls	r2, r3, #3
 8014e1c:	4b14      	ldr	r3, [pc, #80]	; (8014e70 <_strtod_l+0x5ec>)
 8014e1e:	0030      	movs	r0, r6
 8014e20:	189b      	adds	r3, r3, r2
 8014e22:	0039      	movs	r1, r7
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	685b      	ldr	r3, [r3, #4]
 8014e28:	f7ec fd32 	bl	8001890 <__aeabi_ddiv>
 8014e2c:	0006      	movs	r6, r0
 8014e2e:	000f      	movs	r7, r1
 8014e30:	1124      	asrs	r4, r4, #4
 8014e32:	d0d5      	beq.n	8014de0 <_strtod_l+0x55c>
 8014e34:	2c1f      	cmp	r4, #31
 8014e36:	dd27      	ble.n	8014e88 <_strtod_l+0x604>
 8014e38:	2300      	movs	r3, #0
 8014e3a:	9306      	str	r3, [sp, #24]
 8014e3c:	9307      	str	r3, [sp, #28]
 8014e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e40:	9309      	str	r3, [sp, #36]	; 0x24
 8014e42:	2322      	movs	r3, #34	; 0x22
 8014e44:	9a05      	ldr	r2, [sp, #20]
 8014e46:	2600      	movs	r6, #0
 8014e48:	6013      	str	r3, [r2, #0]
 8014e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e4c:	2700      	movs	r7, #0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d18f      	bne.n	8014d72 <_strtod_l+0x4ee>
 8014e52:	e55e      	b.n	8014912 <_strtod_l+0x8e>
 8014e54:	00004e1f 	.word	0x00004e1f
 8014e58:	0801b619 	.word	0x0801b619
 8014e5c:	0801b6cc 	.word	0x0801b6cc
 8014e60:	7ff00000 	.word	0x7ff00000
 8014e64:	0801b611 	.word	0x0801b611
 8014e68:	0801b7a8 	.word	0x0801b7a8
 8014e6c:	0801b7a4 	.word	0x0801b7a4
 8014e70:	0801b928 	.word	0x0801b928
 8014e74:	fcb00000 	.word	0xfcb00000
 8014e78:	0801b900 	.word	0x0801b900
 8014e7c:	7ca00000 	.word	0x7ca00000
 8014e80:	7c900000 	.word	0x7c900000
 8014e84:	7fefffff 	.word	0x7fefffff
 8014e88:	2310      	movs	r3, #16
 8014e8a:	0022      	movs	r2, r4
 8014e8c:	401a      	ands	r2, r3
 8014e8e:	9208      	str	r2, [sp, #32]
 8014e90:	421c      	tst	r4, r3
 8014e92:	d001      	beq.n	8014e98 <_strtod_l+0x614>
 8014e94:	335a      	adds	r3, #90	; 0x5a
 8014e96:	9308      	str	r3, [sp, #32]
 8014e98:	0030      	movs	r0, r6
 8014e9a:	0039      	movs	r1, r7
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	4dca      	ldr	r5, [pc, #808]	; (80151c8 <_strtod_l+0x944>)
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	4214      	tst	r4, r2
 8014ea4:	d004      	beq.n	8014eb0 <_strtod_l+0x62c>
 8014ea6:	682a      	ldr	r2, [r5, #0]
 8014ea8:	686b      	ldr	r3, [r5, #4]
 8014eaa:	f7ed f8f7 	bl	800209c <__aeabi_dmul>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	1064      	asrs	r4, r4, #1
 8014eb2:	3508      	adds	r5, #8
 8014eb4:	2c00      	cmp	r4, #0
 8014eb6:	d1f3      	bne.n	8014ea0 <_strtod_l+0x61c>
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d001      	beq.n	8014ec0 <_strtod_l+0x63c>
 8014ebc:	0006      	movs	r6, r0
 8014ebe:	000f      	movs	r7, r1
 8014ec0:	9b08      	ldr	r3, [sp, #32]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d00f      	beq.n	8014ee6 <_strtod_l+0x662>
 8014ec6:	236b      	movs	r3, #107	; 0x6b
 8014ec8:	0079      	lsls	r1, r7, #1
 8014eca:	0d49      	lsrs	r1, r1, #21
 8014ecc:	003a      	movs	r2, r7
 8014ece:	1a5b      	subs	r3, r3, r1
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	dd08      	ble.n	8014ee6 <_strtod_l+0x662>
 8014ed4:	2b1f      	cmp	r3, #31
 8014ed6:	dc00      	bgt.n	8014eda <_strtod_l+0x656>
 8014ed8:	e126      	b.n	8015128 <_strtod_l+0x8a4>
 8014eda:	2600      	movs	r6, #0
 8014edc:	2b34      	cmp	r3, #52	; 0x34
 8014ede:	dc00      	bgt.n	8014ee2 <_strtod_l+0x65e>
 8014ee0:	e11b      	b.n	801511a <_strtod_l+0x896>
 8014ee2:	27dc      	movs	r7, #220	; 0xdc
 8014ee4:	04bf      	lsls	r7, r7, #18
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	2300      	movs	r3, #0
 8014eea:	0030      	movs	r0, r6
 8014eec:	0039      	movs	r1, r7
 8014eee:	f7eb fab5 	bl	800045c <__aeabi_dcmpeq>
 8014ef2:	2800      	cmp	r0, #0
 8014ef4:	d1a0      	bne.n	8014e38 <_strtod_l+0x5b4>
 8014ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014efa:	9300      	str	r3, [sp, #0]
 8014efc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014efe:	9b06      	ldr	r3, [sp, #24]
 8014f00:	9805      	ldr	r0, [sp, #20]
 8014f02:	f001 ff1d 	bl	8016d40 <__s2b>
 8014f06:	900b      	str	r0, [sp, #44]	; 0x2c
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d100      	bne.n	8014f0e <_strtod_l+0x68a>
 8014f0c:	e723      	b.n	8014d56 <_strtod_l+0x4d2>
 8014f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f10:	9907      	ldr	r1, [sp, #28]
 8014f12:	17da      	asrs	r2, r3, #31
 8014f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f16:	1a5b      	subs	r3, r3, r1
 8014f18:	401a      	ands	r2, r3
 8014f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f1c:	9215      	str	r2, [sp, #84]	; 0x54
 8014f1e:	43db      	mvns	r3, r3
 8014f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f22:	17db      	asrs	r3, r3, #31
 8014f24:	401a      	ands	r2, r3
 8014f26:	2300      	movs	r3, #0
 8014f28:	921c      	str	r2, [sp, #112]	; 0x70
 8014f2a:	9306      	str	r3, [sp, #24]
 8014f2c:	9307      	str	r3, [sp, #28]
 8014f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f30:	9805      	ldr	r0, [sp, #20]
 8014f32:	6859      	ldr	r1, [r3, #4]
 8014f34:	f001 fe58 	bl	8016be8 <_Balloc>
 8014f38:	9009      	str	r0, [sp, #36]	; 0x24
 8014f3a:	2800      	cmp	r0, #0
 8014f3c:	d100      	bne.n	8014f40 <_strtod_l+0x6bc>
 8014f3e:	e70f      	b.n	8014d60 <_strtod_l+0x4dc>
 8014f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f44:	691b      	ldr	r3, [r3, #16]
 8014f46:	310c      	adds	r1, #12
 8014f48:	1c9a      	adds	r2, r3, #2
 8014f4a:	0092      	lsls	r2, r2, #2
 8014f4c:	300c      	adds	r0, #12
 8014f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8014f50:	f7fe fe56 	bl	8013c00 <memcpy>
 8014f54:	ab24      	add	r3, sp, #144	; 0x90
 8014f56:	9301      	str	r3, [sp, #4]
 8014f58:	ab23      	add	r3, sp, #140	; 0x8c
 8014f5a:	9300      	str	r3, [sp, #0]
 8014f5c:	0032      	movs	r2, r6
 8014f5e:	003b      	movs	r3, r7
 8014f60:	9805      	ldr	r0, [sp, #20]
 8014f62:	960e      	str	r6, [sp, #56]	; 0x38
 8014f64:	970f      	str	r7, [sp, #60]	; 0x3c
 8014f66:	f002 fa39 	bl	80173dc <__d2b>
 8014f6a:	9022      	str	r0, [sp, #136]	; 0x88
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	d100      	bne.n	8014f72 <_strtod_l+0x6ee>
 8014f70:	e6f6      	b.n	8014d60 <_strtod_l+0x4dc>
 8014f72:	2101      	movs	r1, #1
 8014f74:	9805      	ldr	r0, [sp, #20]
 8014f76:	f001 ff77 	bl	8016e68 <__i2b>
 8014f7a:	9007      	str	r0, [sp, #28]
 8014f7c:	2800      	cmp	r0, #0
 8014f7e:	d100      	bne.n	8014f82 <_strtod_l+0x6fe>
 8014f80:	e6ee      	b.n	8014d60 <_strtod_l+0x4dc>
 8014f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	da00      	bge.n	8014f8a <_strtod_l+0x706>
 8014f88:	e0d3      	b.n	8015132 <_strtod_l+0x8ae>
 8014f8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014f8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014f8e:	189d      	adds	r5, r3, r2
 8014f90:	9908      	ldr	r1, [sp, #32]
 8014f92:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014f94:	1a5b      	subs	r3, r3, r1
 8014f96:	2136      	movs	r1, #54	; 0x36
 8014f98:	189b      	adds	r3, r3, r2
 8014f9a:	1a8a      	subs	r2, r1, r2
 8014f9c:	498b      	ldr	r1, [pc, #556]	; (80151cc <_strtod_l+0x948>)
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	2001      	movs	r0, #1
 8014fa2:	428b      	cmp	r3, r1
 8014fa4:	db00      	blt.n	8014fa8 <_strtod_l+0x724>
 8014fa6:	e0cf      	b.n	8015148 <_strtod_l+0x8c4>
 8014fa8:	1ac9      	subs	r1, r1, r3
 8014faa:	1a52      	subs	r2, r2, r1
 8014fac:	291f      	cmp	r1, #31
 8014fae:	dd00      	ble.n	8014fb2 <_strtod_l+0x72e>
 8014fb0:	e0c3      	b.n	801513a <_strtod_l+0x8b6>
 8014fb2:	4088      	lsls	r0, r1
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	9014      	str	r0, [sp, #80]	; 0x50
 8014fb8:	9312      	str	r3, [sp, #72]	; 0x48
 8014fba:	18ab      	adds	r3, r5, r2
 8014fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8014fbe:	18a4      	adds	r4, r4, r2
 8014fc0:	9b08      	ldr	r3, [sp, #32]
 8014fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fc4:	191c      	adds	r4, r3, r4
 8014fc6:	002b      	movs	r3, r5
 8014fc8:	4295      	cmp	r5, r2
 8014fca:	dd00      	ble.n	8014fce <_strtod_l+0x74a>
 8014fcc:	0013      	movs	r3, r2
 8014fce:	42a3      	cmp	r3, r4
 8014fd0:	dd00      	ble.n	8014fd4 <_strtod_l+0x750>
 8014fd2:	0023      	movs	r3, r4
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	dd04      	ble.n	8014fe2 <_strtod_l+0x75e>
 8014fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014fda:	1ae4      	subs	r4, r4, r3
 8014fdc:	1ad2      	subs	r2, r2, r3
 8014fde:	920c      	str	r2, [sp, #48]	; 0x30
 8014fe0:	1aed      	subs	r5, r5, r3
 8014fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	dd17      	ble.n	8015018 <_strtod_l+0x794>
 8014fe8:	001a      	movs	r2, r3
 8014fea:	9907      	ldr	r1, [sp, #28]
 8014fec:	9805      	ldr	r0, [sp, #20]
 8014fee:	f002 f801 	bl	8016ff4 <__pow5mult>
 8014ff2:	9007      	str	r0, [sp, #28]
 8014ff4:	2800      	cmp	r0, #0
 8014ff6:	d100      	bne.n	8014ffa <_strtod_l+0x776>
 8014ff8:	e6b2      	b.n	8014d60 <_strtod_l+0x4dc>
 8014ffa:	0001      	movs	r1, r0
 8014ffc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014ffe:	9805      	ldr	r0, [sp, #20]
 8015000:	f001 ff48 	bl	8016e94 <__multiply>
 8015004:	9011      	str	r0, [sp, #68]	; 0x44
 8015006:	2800      	cmp	r0, #0
 8015008:	d100      	bne.n	801500c <_strtod_l+0x788>
 801500a:	e6a9      	b.n	8014d60 <_strtod_l+0x4dc>
 801500c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801500e:	9805      	ldr	r0, [sp, #20]
 8015010:	f001 fe2e 	bl	8016c70 <_Bfree>
 8015014:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015016:	9322      	str	r3, [sp, #136]	; 0x88
 8015018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801501a:	2b00      	cmp	r3, #0
 801501c:	dd00      	ble.n	8015020 <_strtod_l+0x79c>
 801501e:	e096      	b.n	801514e <_strtod_l+0x8ca>
 8015020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015022:	2b00      	cmp	r3, #0
 8015024:	dd08      	ble.n	8015038 <_strtod_l+0x7b4>
 8015026:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015028:	9909      	ldr	r1, [sp, #36]	; 0x24
 801502a:	9805      	ldr	r0, [sp, #20]
 801502c:	f001 ffe2 	bl	8016ff4 <__pow5mult>
 8015030:	9009      	str	r0, [sp, #36]	; 0x24
 8015032:	2800      	cmp	r0, #0
 8015034:	d100      	bne.n	8015038 <_strtod_l+0x7b4>
 8015036:	e693      	b.n	8014d60 <_strtod_l+0x4dc>
 8015038:	2c00      	cmp	r4, #0
 801503a:	dd08      	ble.n	801504e <_strtod_l+0x7ca>
 801503c:	0022      	movs	r2, r4
 801503e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015040:	9805      	ldr	r0, [sp, #20]
 8015042:	f002 f833 	bl	80170ac <__lshift>
 8015046:	9009      	str	r0, [sp, #36]	; 0x24
 8015048:	2800      	cmp	r0, #0
 801504a:	d100      	bne.n	801504e <_strtod_l+0x7ca>
 801504c:	e688      	b.n	8014d60 <_strtod_l+0x4dc>
 801504e:	2d00      	cmp	r5, #0
 8015050:	dd08      	ble.n	8015064 <_strtod_l+0x7e0>
 8015052:	002a      	movs	r2, r5
 8015054:	9907      	ldr	r1, [sp, #28]
 8015056:	9805      	ldr	r0, [sp, #20]
 8015058:	f002 f828 	bl	80170ac <__lshift>
 801505c:	9007      	str	r0, [sp, #28]
 801505e:	2800      	cmp	r0, #0
 8015060:	d100      	bne.n	8015064 <_strtod_l+0x7e0>
 8015062:	e67d      	b.n	8014d60 <_strtod_l+0x4dc>
 8015064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015066:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015068:	9805      	ldr	r0, [sp, #20]
 801506a:	f002 f8ab 	bl	80171c4 <__mdiff>
 801506e:	9006      	str	r0, [sp, #24]
 8015070:	2800      	cmp	r0, #0
 8015072:	d100      	bne.n	8015076 <_strtod_l+0x7f2>
 8015074:	e674      	b.n	8014d60 <_strtod_l+0x4dc>
 8015076:	2200      	movs	r2, #0
 8015078:	68c3      	ldr	r3, [r0, #12]
 801507a:	9907      	ldr	r1, [sp, #28]
 801507c:	60c2      	str	r2, [r0, #12]
 801507e:	9311      	str	r3, [sp, #68]	; 0x44
 8015080:	f002 f884 	bl	801718c <__mcmp>
 8015084:	2800      	cmp	r0, #0
 8015086:	da6c      	bge.n	8015162 <_strtod_l+0x8de>
 8015088:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801508a:	4333      	orrs	r3, r6
 801508c:	d000      	beq.n	8015090 <_strtod_l+0x80c>
 801508e:	e097      	b.n	80151c0 <_strtod_l+0x93c>
 8015090:	033b      	lsls	r3, r7, #12
 8015092:	d000      	beq.n	8015096 <_strtod_l+0x812>
 8015094:	e094      	b.n	80151c0 <_strtod_l+0x93c>
 8015096:	22d6      	movs	r2, #214	; 0xd6
 8015098:	4b4d      	ldr	r3, [pc, #308]	; (80151d0 <_strtod_l+0x94c>)
 801509a:	04d2      	lsls	r2, r2, #19
 801509c:	403b      	ands	r3, r7
 801509e:	4293      	cmp	r3, r2
 80150a0:	d800      	bhi.n	80150a4 <_strtod_l+0x820>
 80150a2:	e08d      	b.n	80151c0 <_strtod_l+0x93c>
 80150a4:	9b06      	ldr	r3, [sp, #24]
 80150a6:	695b      	ldr	r3, [r3, #20]
 80150a8:	930a      	str	r3, [sp, #40]	; 0x28
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d105      	bne.n	80150ba <_strtod_l+0x836>
 80150ae:	9b06      	ldr	r3, [sp, #24]
 80150b0:	691b      	ldr	r3, [r3, #16]
 80150b2:	930a      	str	r3, [sp, #40]	; 0x28
 80150b4:	2b01      	cmp	r3, #1
 80150b6:	dc00      	bgt.n	80150ba <_strtod_l+0x836>
 80150b8:	e082      	b.n	80151c0 <_strtod_l+0x93c>
 80150ba:	9906      	ldr	r1, [sp, #24]
 80150bc:	2201      	movs	r2, #1
 80150be:	9805      	ldr	r0, [sp, #20]
 80150c0:	f001 fff4 	bl	80170ac <__lshift>
 80150c4:	9907      	ldr	r1, [sp, #28]
 80150c6:	9006      	str	r0, [sp, #24]
 80150c8:	f002 f860 	bl	801718c <__mcmp>
 80150cc:	2800      	cmp	r0, #0
 80150ce:	dd77      	ble.n	80151c0 <_strtod_l+0x93c>
 80150d0:	9908      	ldr	r1, [sp, #32]
 80150d2:	003b      	movs	r3, r7
 80150d4:	4a3e      	ldr	r2, [pc, #248]	; (80151d0 <_strtod_l+0x94c>)
 80150d6:	2900      	cmp	r1, #0
 80150d8:	d100      	bne.n	80150dc <_strtod_l+0x858>
 80150da:	e09e      	b.n	801521a <_strtod_l+0x996>
 80150dc:	0011      	movs	r1, r2
 80150de:	20d6      	movs	r0, #214	; 0xd6
 80150e0:	4039      	ands	r1, r7
 80150e2:	04c0      	lsls	r0, r0, #19
 80150e4:	4281      	cmp	r1, r0
 80150e6:	dd00      	ble.n	80150ea <_strtod_l+0x866>
 80150e8:	e097      	b.n	801521a <_strtod_l+0x996>
 80150ea:	23dc      	movs	r3, #220	; 0xdc
 80150ec:	049b      	lsls	r3, r3, #18
 80150ee:	4299      	cmp	r1, r3
 80150f0:	dc00      	bgt.n	80150f4 <_strtod_l+0x870>
 80150f2:	e6a6      	b.n	8014e42 <_strtod_l+0x5be>
 80150f4:	4b37      	ldr	r3, [pc, #220]	; (80151d4 <_strtod_l+0x950>)
 80150f6:	0030      	movs	r0, r6
 80150f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80150fa:	2300      	movs	r3, #0
 80150fc:	931a      	str	r3, [sp, #104]	; 0x68
 80150fe:	0039      	movs	r1, r7
 8015100:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015104:	f7ec ffca 	bl	800209c <__aeabi_dmul>
 8015108:	0006      	movs	r6, r0
 801510a:	000f      	movs	r7, r1
 801510c:	4308      	orrs	r0, r1
 801510e:	d000      	beq.n	8015112 <_strtod_l+0x88e>
 8015110:	e62f      	b.n	8014d72 <_strtod_l+0x4ee>
 8015112:	2322      	movs	r3, #34	; 0x22
 8015114:	9a05      	ldr	r2, [sp, #20]
 8015116:	6013      	str	r3, [r2, #0]
 8015118:	e62b      	b.n	8014d72 <_strtod_l+0x4ee>
 801511a:	2101      	movs	r1, #1
 801511c:	3b20      	subs	r3, #32
 801511e:	4249      	negs	r1, r1
 8015120:	4099      	lsls	r1, r3
 8015122:	400a      	ands	r2, r1
 8015124:	0017      	movs	r7, r2
 8015126:	e6de      	b.n	8014ee6 <_strtod_l+0x662>
 8015128:	2201      	movs	r2, #1
 801512a:	4252      	negs	r2, r2
 801512c:	409a      	lsls	r2, r3
 801512e:	4016      	ands	r6, r2
 8015130:	e6d9      	b.n	8014ee6 <_strtod_l+0x662>
 8015132:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015134:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015136:	1ad4      	subs	r4, r2, r3
 8015138:	e72a      	b.n	8014f90 <_strtod_l+0x70c>
 801513a:	4927      	ldr	r1, [pc, #156]	; (80151d8 <_strtod_l+0x954>)
 801513c:	1acb      	subs	r3, r1, r3
 801513e:	0001      	movs	r1, r0
 8015140:	4099      	lsls	r1, r3
 8015142:	9112      	str	r1, [sp, #72]	; 0x48
 8015144:	9014      	str	r0, [sp, #80]	; 0x50
 8015146:	e738      	b.n	8014fba <_strtod_l+0x736>
 8015148:	2300      	movs	r3, #0
 801514a:	9312      	str	r3, [sp, #72]	; 0x48
 801514c:	e7fa      	b.n	8015144 <_strtod_l+0x8c0>
 801514e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015150:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015152:	9805      	ldr	r0, [sp, #20]
 8015154:	f001 ffaa 	bl	80170ac <__lshift>
 8015158:	9022      	str	r0, [sp, #136]	; 0x88
 801515a:	2800      	cmp	r0, #0
 801515c:	d000      	beq.n	8015160 <_strtod_l+0x8dc>
 801515e:	e75f      	b.n	8015020 <_strtod_l+0x79c>
 8015160:	e5fe      	b.n	8014d60 <_strtod_l+0x4dc>
 8015162:	970c      	str	r7, [sp, #48]	; 0x30
 8015164:	2800      	cmp	r0, #0
 8015166:	d176      	bne.n	8015256 <_strtod_l+0x9d2>
 8015168:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801516a:	033b      	lsls	r3, r7, #12
 801516c:	0b1b      	lsrs	r3, r3, #12
 801516e:	2a00      	cmp	r2, #0
 8015170:	d038      	beq.n	80151e4 <_strtod_l+0x960>
 8015172:	4a1a      	ldr	r2, [pc, #104]	; (80151dc <_strtod_l+0x958>)
 8015174:	4293      	cmp	r3, r2
 8015176:	d138      	bne.n	80151ea <_strtod_l+0x966>
 8015178:	2201      	movs	r2, #1
 801517a:	9b08      	ldr	r3, [sp, #32]
 801517c:	4252      	negs	r2, r2
 801517e:	0031      	movs	r1, r6
 8015180:	0010      	movs	r0, r2
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00b      	beq.n	801519e <_strtod_l+0x91a>
 8015186:	24d4      	movs	r4, #212	; 0xd4
 8015188:	4b11      	ldr	r3, [pc, #68]	; (80151d0 <_strtod_l+0x94c>)
 801518a:	0010      	movs	r0, r2
 801518c:	403b      	ands	r3, r7
 801518e:	04e4      	lsls	r4, r4, #19
 8015190:	42a3      	cmp	r3, r4
 8015192:	d804      	bhi.n	801519e <_strtod_l+0x91a>
 8015194:	306c      	adds	r0, #108	; 0x6c
 8015196:	0d1b      	lsrs	r3, r3, #20
 8015198:	1ac3      	subs	r3, r0, r3
 801519a:	409a      	lsls	r2, r3
 801519c:	0010      	movs	r0, r2
 801519e:	4281      	cmp	r1, r0
 80151a0:	d123      	bne.n	80151ea <_strtod_l+0x966>
 80151a2:	4b0f      	ldr	r3, [pc, #60]	; (80151e0 <_strtod_l+0x95c>)
 80151a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d102      	bne.n	80151b0 <_strtod_l+0x92c>
 80151aa:	1c4b      	adds	r3, r1, #1
 80151ac:	d100      	bne.n	80151b0 <_strtod_l+0x92c>
 80151ae:	e5d7      	b.n	8014d60 <_strtod_l+0x4dc>
 80151b0:	4b07      	ldr	r3, [pc, #28]	; (80151d0 <_strtod_l+0x94c>)
 80151b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80151b4:	2600      	movs	r6, #0
 80151b6:	401a      	ands	r2, r3
 80151b8:	0013      	movs	r3, r2
 80151ba:	2280      	movs	r2, #128	; 0x80
 80151bc:	0352      	lsls	r2, r2, #13
 80151be:	189f      	adds	r7, r3, r2
 80151c0:	9b08      	ldr	r3, [sp, #32]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d196      	bne.n	80150f4 <_strtod_l+0x870>
 80151c6:	e5d4      	b.n	8014d72 <_strtod_l+0x4ee>
 80151c8:	0801b6e0 	.word	0x0801b6e0
 80151cc:	fffffc02 	.word	0xfffffc02
 80151d0:	7ff00000 	.word	0x7ff00000
 80151d4:	39500000 	.word	0x39500000
 80151d8:	fffffbe2 	.word	0xfffffbe2
 80151dc:	000fffff 	.word	0x000fffff
 80151e0:	7fefffff 	.word	0x7fefffff
 80151e4:	4333      	orrs	r3, r6
 80151e6:	d100      	bne.n	80151ea <_strtod_l+0x966>
 80151e8:	e772      	b.n	80150d0 <_strtod_l+0x84c>
 80151ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d01d      	beq.n	801522c <_strtod_l+0x9a8>
 80151f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151f4:	4213      	tst	r3, r2
 80151f6:	d0e3      	beq.n	80151c0 <_strtod_l+0x93c>
 80151f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151fa:	0030      	movs	r0, r6
 80151fc:	0039      	movs	r1, r7
 80151fe:	9a08      	ldr	r2, [sp, #32]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d017      	beq.n	8015234 <_strtod_l+0x9b0>
 8015204:	f7ff fb26 	bl	8014854 <sulp>
 8015208:	0002      	movs	r2, r0
 801520a:	000b      	movs	r3, r1
 801520c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801520e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015210:	f7eb ffd4 	bl	80011bc <__aeabi_dadd>
 8015214:	0006      	movs	r6, r0
 8015216:	000f      	movs	r7, r1
 8015218:	e7d2      	b.n	80151c0 <_strtod_l+0x93c>
 801521a:	2601      	movs	r6, #1
 801521c:	4013      	ands	r3, r2
 801521e:	4a9b      	ldr	r2, [pc, #620]	; (801548c <_strtod_l+0xc08>)
 8015220:	4276      	negs	r6, r6
 8015222:	189b      	adds	r3, r3, r2
 8015224:	4a9a      	ldr	r2, [pc, #616]	; (8015490 <_strtod_l+0xc0c>)
 8015226:	431a      	orrs	r2, r3
 8015228:	0017      	movs	r7, r2
 801522a:	e7c9      	b.n	80151c0 <_strtod_l+0x93c>
 801522c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801522e:	4233      	tst	r3, r6
 8015230:	d0c6      	beq.n	80151c0 <_strtod_l+0x93c>
 8015232:	e7e1      	b.n	80151f8 <_strtod_l+0x974>
 8015234:	f7ff fb0e 	bl	8014854 <sulp>
 8015238:	0002      	movs	r2, r0
 801523a:	000b      	movs	r3, r1
 801523c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801523e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015240:	f7ed f998 	bl	8002574 <__aeabi_dsub>
 8015244:	2200      	movs	r2, #0
 8015246:	2300      	movs	r3, #0
 8015248:	0006      	movs	r6, r0
 801524a:	000f      	movs	r7, r1
 801524c:	f7eb f906 	bl	800045c <__aeabi_dcmpeq>
 8015250:	2800      	cmp	r0, #0
 8015252:	d0b5      	beq.n	80151c0 <_strtod_l+0x93c>
 8015254:	e5f5      	b.n	8014e42 <_strtod_l+0x5be>
 8015256:	9907      	ldr	r1, [sp, #28]
 8015258:	9806      	ldr	r0, [sp, #24]
 801525a:	f002 f923 	bl	80174a4 <__ratio>
 801525e:	2380      	movs	r3, #128	; 0x80
 8015260:	2200      	movs	r2, #0
 8015262:	05db      	lsls	r3, r3, #23
 8015264:	0004      	movs	r4, r0
 8015266:	000d      	movs	r5, r1
 8015268:	f7eb f908 	bl	800047c <__aeabi_dcmple>
 801526c:	2800      	cmp	r0, #0
 801526e:	d079      	beq.n	8015364 <_strtod_l+0xae0>
 8015270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015272:	2b00      	cmp	r3, #0
 8015274:	d04b      	beq.n	801530e <_strtod_l+0xa8a>
 8015276:	2300      	movs	r3, #0
 8015278:	4c86      	ldr	r4, [pc, #536]	; (8015494 <_strtod_l+0xc10>)
 801527a:	2500      	movs	r5, #0
 801527c:	9312      	str	r3, [sp, #72]	; 0x48
 801527e:	9413      	str	r4, [sp, #76]	; 0x4c
 8015280:	4c84      	ldr	r4, [pc, #528]	; (8015494 <_strtod_l+0xc10>)
 8015282:	4a85      	ldr	r2, [pc, #532]	; (8015498 <_strtod_l+0xc14>)
 8015284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015286:	4013      	ands	r3, r2
 8015288:	9314      	str	r3, [sp, #80]	; 0x50
 801528a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801528c:	4b83      	ldr	r3, [pc, #524]	; (801549c <_strtod_l+0xc18>)
 801528e:	429a      	cmp	r2, r3
 8015290:	d000      	beq.n	8015294 <_strtod_l+0xa10>
 8015292:	e0b0      	b.n	80153f6 <_strtod_l+0xb72>
 8015294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015296:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015298:	921a      	str	r2, [sp, #104]	; 0x68
 801529a:	931b      	str	r3, [sp, #108]	; 0x6c
 801529c:	4a80      	ldr	r2, [pc, #512]	; (80154a0 <_strtod_l+0xc1c>)
 801529e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152a0:	4694      	mov	ip, r2
 80152a2:	4463      	add	r3, ip
 80152a4:	001f      	movs	r7, r3
 80152a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80152aa:	0030      	movs	r0, r6
 80152ac:	0039      	movs	r1, r7
 80152ae:	920c      	str	r2, [sp, #48]	; 0x30
 80152b0:	930d      	str	r3, [sp, #52]	; 0x34
 80152b2:	f002 f81f 	bl	80172f4 <__ulp>
 80152b6:	0002      	movs	r2, r0
 80152b8:	000b      	movs	r3, r1
 80152ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80152bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80152be:	f7ec feed 	bl	800209c <__aeabi_dmul>
 80152c2:	0032      	movs	r2, r6
 80152c4:	003b      	movs	r3, r7
 80152c6:	f7eb ff79 	bl	80011bc <__aeabi_dadd>
 80152ca:	4a73      	ldr	r2, [pc, #460]	; (8015498 <_strtod_l+0xc14>)
 80152cc:	4b75      	ldr	r3, [pc, #468]	; (80154a4 <_strtod_l+0xc20>)
 80152ce:	0006      	movs	r6, r0
 80152d0:	400a      	ands	r2, r1
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d95e      	bls.n	8015394 <_strtod_l+0xb10>
 80152d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152d8:	4a73      	ldr	r2, [pc, #460]	; (80154a8 <_strtod_l+0xc24>)
 80152da:	4293      	cmp	r3, r2
 80152dc:	d103      	bne.n	80152e6 <_strtod_l+0xa62>
 80152de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152e0:	3301      	adds	r3, #1
 80152e2:	d100      	bne.n	80152e6 <_strtod_l+0xa62>
 80152e4:	e53c      	b.n	8014d60 <_strtod_l+0x4dc>
 80152e6:	2601      	movs	r6, #1
 80152e8:	4f6f      	ldr	r7, [pc, #444]	; (80154a8 <_strtod_l+0xc24>)
 80152ea:	4276      	negs	r6, r6
 80152ec:	9922      	ldr	r1, [sp, #136]	; 0x88
 80152ee:	9805      	ldr	r0, [sp, #20]
 80152f0:	f001 fcbe 	bl	8016c70 <_Bfree>
 80152f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80152f6:	9805      	ldr	r0, [sp, #20]
 80152f8:	f001 fcba 	bl	8016c70 <_Bfree>
 80152fc:	9907      	ldr	r1, [sp, #28]
 80152fe:	9805      	ldr	r0, [sp, #20]
 8015300:	f001 fcb6 	bl	8016c70 <_Bfree>
 8015304:	9906      	ldr	r1, [sp, #24]
 8015306:	9805      	ldr	r0, [sp, #20]
 8015308:	f001 fcb2 	bl	8016c70 <_Bfree>
 801530c:	e60f      	b.n	8014f2e <_strtod_l+0x6aa>
 801530e:	2e00      	cmp	r6, #0
 8015310:	d11c      	bne.n	801534c <_strtod_l+0xac8>
 8015312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015314:	031b      	lsls	r3, r3, #12
 8015316:	d11f      	bne.n	8015358 <_strtod_l+0xad4>
 8015318:	2200      	movs	r2, #0
 801531a:	0020      	movs	r0, r4
 801531c:	0029      	movs	r1, r5
 801531e:	4b5d      	ldr	r3, [pc, #372]	; (8015494 <_strtod_l+0xc10>)
 8015320:	f7eb f8a2 	bl	8000468 <__aeabi_dcmplt>
 8015324:	2800      	cmp	r0, #0
 8015326:	d11a      	bne.n	801535e <_strtod_l+0xada>
 8015328:	0020      	movs	r0, r4
 801532a:	0029      	movs	r1, r5
 801532c:	2200      	movs	r2, #0
 801532e:	4b5f      	ldr	r3, [pc, #380]	; (80154ac <_strtod_l+0xc28>)
 8015330:	f7ec feb4 	bl	800209c <__aeabi_dmul>
 8015334:	0005      	movs	r5, r0
 8015336:	000c      	movs	r4, r1
 8015338:	2380      	movs	r3, #128	; 0x80
 801533a:	061b      	lsls	r3, r3, #24
 801533c:	18e3      	adds	r3, r4, r3
 801533e:	951e      	str	r5, [sp, #120]	; 0x78
 8015340:	931f      	str	r3, [sp, #124]	; 0x7c
 8015342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015344:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015346:	9212      	str	r2, [sp, #72]	; 0x48
 8015348:	9313      	str	r3, [sp, #76]	; 0x4c
 801534a:	e79a      	b.n	8015282 <_strtod_l+0x9fe>
 801534c:	2e01      	cmp	r6, #1
 801534e:	d103      	bne.n	8015358 <_strtod_l+0xad4>
 8015350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015352:	2b00      	cmp	r3, #0
 8015354:	d100      	bne.n	8015358 <_strtod_l+0xad4>
 8015356:	e574      	b.n	8014e42 <_strtod_l+0x5be>
 8015358:	2300      	movs	r3, #0
 801535a:	4c55      	ldr	r4, [pc, #340]	; (80154b0 <_strtod_l+0xc2c>)
 801535c:	e78d      	b.n	801527a <_strtod_l+0x9f6>
 801535e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015360:	4c52      	ldr	r4, [pc, #328]	; (80154ac <_strtod_l+0xc28>)
 8015362:	e7e9      	b.n	8015338 <_strtod_l+0xab4>
 8015364:	2200      	movs	r2, #0
 8015366:	0020      	movs	r0, r4
 8015368:	0029      	movs	r1, r5
 801536a:	4b50      	ldr	r3, [pc, #320]	; (80154ac <_strtod_l+0xc28>)
 801536c:	f7ec fe96 	bl	800209c <__aeabi_dmul>
 8015370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015372:	0005      	movs	r5, r0
 8015374:	000b      	movs	r3, r1
 8015376:	000c      	movs	r4, r1
 8015378:	2a00      	cmp	r2, #0
 801537a:	d107      	bne.n	801538c <_strtod_l+0xb08>
 801537c:	2280      	movs	r2, #128	; 0x80
 801537e:	0612      	lsls	r2, r2, #24
 8015380:	188b      	adds	r3, r1, r2
 8015382:	9016      	str	r0, [sp, #88]	; 0x58
 8015384:	9317      	str	r3, [sp, #92]	; 0x5c
 8015386:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801538a:	e7dc      	b.n	8015346 <_strtod_l+0xac2>
 801538c:	0002      	movs	r2, r0
 801538e:	9216      	str	r2, [sp, #88]	; 0x58
 8015390:	9317      	str	r3, [sp, #92]	; 0x5c
 8015392:	e7f8      	b.n	8015386 <_strtod_l+0xb02>
 8015394:	23d4      	movs	r3, #212	; 0xd4
 8015396:	049b      	lsls	r3, r3, #18
 8015398:	18cf      	adds	r7, r1, r3
 801539a:	9b08      	ldr	r3, [sp, #32]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d1a5      	bne.n	80152ec <_strtod_l+0xa68>
 80153a0:	4b3d      	ldr	r3, [pc, #244]	; (8015498 <_strtod_l+0xc14>)
 80153a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153a4:	403b      	ands	r3, r7
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d1a0      	bne.n	80152ec <_strtod_l+0xa68>
 80153aa:	0028      	movs	r0, r5
 80153ac:	0021      	movs	r1, r4
 80153ae:	f7eb f91b 	bl	80005e8 <__aeabi_d2lz>
 80153b2:	f7eb f955 	bl	8000660 <__aeabi_l2d>
 80153b6:	0002      	movs	r2, r0
 80153b8:	000b      	movs	r3, r1
 80153ba:	0028      	movs	r0, r5
 80153bc:	0021      	movs	r1, r4
 80153be:	f7ed f8d9 	bl	8002574 <__aeabi_dsub>
 80153c2:	033b      	lsls	r3, r7, #12
 80153c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80153c6:	0b1b      	lsrs	r3, r3, #12
 80153c8:	4333      	orrs	r3, r6
 80153ca:	4313      	orrs	r3, r2
 80153cc:	0004      	movs	r4, r0
 80153ce:	000d      	movs	r5, r1
 80153d0:	4a38      	ldr	r2, [pc, #224]	; (80154b4 <_strtod_l+0xc30>)
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d055      	beq.n	8015482 <_strtod_l+0xbfe>
 80153d6:	4b38      	ldr	r3, [pc, #224]	; (80154b8 <_strtod_l+0xc34>)
 80153d8:	f7eb f846 	bl	8000468 <__aeabi_dcmplt>
 80153dc:	2800      	cmp	r0, #0
 80153de:	d000      	beq.n	80153e2 <_strtod_l+0xb5e>
 80153e0:	e4c7      	b.n	8014d72 <_strtod_l+0x4ee>
 80153e2:	0020      	movs	r0, r4
 80153e4:	0029      	movs	r1, r5
 80153e6:	4a35      	ldr	r2, [pc, #212]	; (80154bc <_strtod_l+0xc38>)
 80153e8:	4b30      	ldr	r3, [pc, #192]	; (80154ac <_strtod_l+0xc28>)
 80153ea:	f7eb f851 	bl	8000490 <__aeabi_dcmpgt>
 80153ee:	2800      	cmp	r0, #0
 80153f0:	d100      	bne.n	80153f4 <_strtod_l+0xb70>
 80153f2:	e77b      	b.n	80152ec <_strtod_l+0xa68>
 80153f4:	e4bd      	b.n	8014d72 <_strtod_l+0x4ee>
 80153f6:	9b08      	ldr	r3, [sp, #32]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d02b      	beq.n	8015454 <_strtod_l+0xbd0>
 80153fc:	23d4      	movs	r3, #212	; 0xd4
 80153fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015400:	04db      	lsls	r3, r3, #19
 8015402:	429a      	cmp	r2, r3
 8015404:	d826      	bhi.n	8015454 <_strtod_l+0xbd0>
 8015406:	0028      	movs	r0, r5
 8015408:	0021      	movs	r1, r4
 801540a:	4a2d      	ldr	r2, [pc, #180]	; (80154c0 <_strtod_l+0xc3c>)
 801540c:	4b2d      	ldr	r3, [pc, #180]	; (80154c4 <_strtod_l+0xc40>)
 801540e:	f7eb f835 	bl	800047c <__aeabi_dcmple>
 8015412:	2800      	cmp	r0, #0
 8015414:	d017      	beq.n	8015446 <_strtod_l+0xbc2>
 8015416:	0028      	movs	r0, r5
 8015418:	0021      	movs	r1, r4
 801541a:	f7eb f8c7 	bl	80005ac <__aeabi_d2uiz>
 801541e:	2800      	cmp	r0, #0
 8015420:	d100      	bne.n	8015424 <_strtod_l+0xba0>
 8015422:	3001      	adds	r0, #1
 8015424:	f7ed fcbc 	bl	8002da0 <__aeabi_ui2d>
 8015428:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801542a:	0005      	movs	r5, r0
 801542c:	000b      	movs	r3, r1
 801542e:	000c      	movs	r4, r1
 8015430:	2a00      	cmp	r2, #0
 8015432:	d122      	bne.n	801547a <_strtod_l+0xbf6>
 8015434:	2280      	movs	r2, #128	; 0x80
 8015436:	0612      	lsls	r2, r2, #24
 8015438:	188b      	adds	r3, r1, r2
 801543a:	9018      	str	r0, [sp, #96]	; 0x60
 801543c:	9319      	str	r3, [sp, #100]	; 0x64
 801543e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015442:	9212      	str	r2, [sp, #72]	; 0x48
 8015444:	9313      	str	r3, [sp, #76]	; 0x4c
 8015446:	22d6      	movs	r2, #214	; 0xd6
 8015448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801544a:	04d2      	lsls	r2, r2, #19
 801544c:	189b      	adds	r3, r3, r2
 801544e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015450:	1a9b      	subs	r3, r3, r2
 8015452:	9313      	str	r3, [sp, #76]	; 0x4c
 8015454:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015456:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015458:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801545a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801545c:	f001 ff4a 	bl	80172f4 <__ulp>
 8015460:	0002      	movs	r2, r0
 8015462:	000b      	movs	r3, r1
 8015464:	0030      	movs	r0, r6
 8015466:	0039      	movs	r1, r7
 8015468:	f7ec fe18 	bl	800209c <__aeabi_dmul>
 801546c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801546e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015470:	f7eb fea4 	bl	80011bc <__aeabi_dadd>
 8015474:	0006      	movs	r6, r0
 8015476:	000f      	movs	r7, r1
 8015478:	e78f      	b.n	801539a <_strtod_l+0xb16>
 801547a:	0002      	movs	r2, r0
 801547c:	9218      	str	r2, [sp, #96]	; 0x60
 801547e:	9319      	str	r3, [sp, #100]	; 0x64
 8015480:	e7dd      	b.n	801543e <_strtod_l+0xbba>
 8015482:	4b11      	ldr	r3, [pc, #68]	; (80154c8 <_strtod_l+0xc44>)
 8015484:	f7ea fff0 	bl	8000468 <__aeabi_dcmplt>
 8015488:	e7b1      	b.n	80153ee <_strtod_l+0xb6a>
 801548a:	46c0      	nop			; (mov r8, r8)
 801548c:	fff00000 	.word	0xfff00000
 8015490:	000fffff 	.word	0x000fffff
 8015494:	3ff00000 	.word	0x3ff00000
 8015498:	7ff00000 	.word	0x7ff00000
 801549c:	7fe00000 	.word	0x7fe00000
 80154a0:	fcb00000 	.word	0xfcb00000
 80154a4:	7c9fffff 	.word	0x7c9fffff
 80154a8:	7fefffff 	.word	0x7fefffff
 80154ac:	3fe00000 	.word	0x3fe00000
 80154b0:	bff00000 	.word	0xbff00000
 80154b4:	94a03595 	.word	0x94a03595
 80154b8:	3fdfffff 	.word	0x3fdfffff
 80154bc:	35afe535 	.word	0x35afe535
 80154c0:	ffc00000 	.word	0xffc00000
 80154c4:	41dfffff 	.word	0x41dfffff
 80154c8:	3fcfffff 	.word	0x3fcfffff

080154cc <strtod>:
 80154cc:	b510      	push	{r4, lr}
 80154ce:	000a      	movs	r2, r1
 80154d0:	0001      	movs	r1, r0
 80154d2:	4803      	ldr	r0, [pc, #12]	; (80154e0 <strtod+0x14>)
 80154d4:	4b03      	ldr	r3, [pc, #12]	; (80154e4 <strtod+0x18>)
 80154d6:	6800      	ldr	r0, [r0, #0]
 80154d8:	f7ff f9d4 	bl	8014884 <_strtod_l>
 80154dc:	bd10      	pop	{r4, pc}
 80154de:	46c0      	nop			; (mov r8, r8)
 80154e0:	200000c0 	.word	0x200000c0
 80154e4:	20000128 	.word	0x20000128

080154e8 <strtok>:
 80154e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ea:	4b16      	ldr	r3, [pc, #88]	; (8015544 <strtok+0x5c>)
 80154ec:	0005      	movs	r5, r0
 80154ee:	681f      	ldr	r7, [r3, #0]
 80154f0:	000e      	movs	r6, r1
 80154f2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80154f4:	2c00      	cmp	r4, #0
 80154f6:	d11d      	bne.n	8015534 <strtok+0x4c>
 80154f8:	2050      	movs	r0, #80	; 0x50
 80154fa:	f7fe fb5f 	bl	8013bbc <malloc>
 80154fe:	1e02      	subs	r2, r0, #0
 8015500:	65b8      	str	r0, [r7, #88]	; 0x58
 8015502:	d104      	bne.n	801550e <strtok+0x26>
 8015504:	2157      	movs	r1, #87	; 0x57
 8015506:	4b10      	ldr	r3, [pc, #64]	; (8015548 <strtok+0x60>)
 8015508:	4810      	ldr	r0, [pc, #64]	; (801554c <strtok+0x64>)
 801550a:	f000 f8eb 	bl	80156e4 <__assert_func>
 801550e:	6004      	str	r4, [r0, #0]
 8015510:	6044      	str	r4, [r0, #4]
 8015512:	6084      	str	r4, [r0, #8]
 8015514:	60c4      	str	r4, [r0, #12]
 8015516:	6104      	str	r4, [r0, #16]
 8015518:	6144      	str	r4, [r0, #20]
 801551a:	6184      	str	r4, [r0, #24]
 801551c:	6284      	str	r4, [r0, #40]	; 0x28
 801551e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8015520:	6304      	str	r4, [r0, #48]	; 0x30
 8015522:	6344      	str	r4, [r0, #52]	; 0x34
 8015524:	6384      	str	r4, [r0, #56]	; 0x38
 8015526:	63c4      	str	r4, [r0, #60]	; 0x3c
 8015528:	6404      	str	r4, [r0, #64]	; 0x40
 801552a:	6444      	str	r4, [r0, #68]	; 0x44
 801552c:	6484      	str	r4, [r0, #72]	; 0x48
 801552e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8015530:	7704      	strb	r4, [r0, #28]
 8015532:	6244      	str	r4, [r0, #36]	; 0x24
 8015534:	0031      	movs	r1, r6
 8015536:	0028      	movs	r0, r5
 8015538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801553a:	2301      	movs	r3, #1
 801553c:	f000 f808 	bl	8015550 <__strtok_r>
 8015540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015542:	46c0      	nop			; (mov r8, r8)
 8015544:	200000c0 	.word	0x200000c0
 8015548:	0801b640 	.word	0x0801b640
 801554c:	0801b708 	.word	0x0801b708

08015550 <__strtok_r>:
 8015550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015552:	2800      	cmp	r0, #0
 8015554:	d102      	bne.n	801555c <__strtok_r+0xc>
 8015556:	6810      	ldr	r0, [r2, #0]
 8015558:	2800      	cmp	r0, #0
 801555a:	d013      	beq.n	8015584 <__strtok_r+0x34>
 801555c:	0004      	movs	r4, r0
 801555e:	0020      	movs	r0, r4
 8015560:	000e      	movs	r6, r1
 8015562:	7805      	ldrb	r5, [r0, #0]
 8015564:	3401      	adds	r4, #1
 8015566:	7837      	ldrb	r7, [r6, #0]
 8015568:	2f00      	cmp	r7, #0
 801556a:	d104      	bne.n	8015576 <__strtok_r+0x26>
 801556c:	2d00      	cmp	r5, #0
 801556e:	d10f      	bne.n	8015590 <__strtok_r+0x40>
 8015570:	0028      	movs	r0, r5
 8015572:	6015      	str	r5, [r2, #0]
 8015574:	e006      	b.n	8015584 <__strtok_r+0x34>
 8015576:	3601      	adds	r6, #1
 8015578:	42bd      	cmp	r5, r7
 801557a:	d1f4      	bne.n	8015566 <__strtok_r+0x16>
 801557c:	2b00      	cmp	r3, #0
 801557e:	d1ee      	bne.n	801555e <__strtok_r+0xe>
 8015580:	6014      	str	r4, [r2, #0]
 8015582:	7003      	strb	r3, [r0, #0]
 8015584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015586:	002f      	movs	r7, r5
 8015588:	e00f      	b.n	80155aa <__strtok_r+0x5a>
 801558a:	3301      	adds	r3, #1
 801558c:	2e00      	cmp	r6, #0
 801558e:	d104      	bne.n	801559a <__strtok_r+0x4a>
 8015590:	0023      	movs	r3, r4
 8015592:	3401      	adds	r4, #1
 8015594:	781d      	ldrb	r5, [r3, #0]
 8015596:	0027      	movs	r7, r4
 8015598:	000b      	movs	r3, r1
 801559a:	781e      	ldrb	r6, [r3, #0]
 801559c:	42b5      	cmp	r5, r6
 801559e:	d1f4      	bne.n	801558a <__strtok_r+0x3a>
 80155a0:	2d00      	cmp	r5, #0
 80155a2:	d0f0      	beq.n	8015586 <__strtok_r+0x36>
 80155a4:	2300      	movs	r3, #0
 80155a6:	3c01      	subs	r4, #1
 80155a8:	7023      	strb	r3, [r4, #0]
 80155aa:	6017      	str	r7, [r2, #0]
 80155ac:	e7ea      	b.n	8015584 <__strtok_r+0x34>
	...

080155b0 <_strtol_l.isra.0>:
 80155b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155b2:	b087      	sub	sp, #28
 80155b4:	001e      	movs	r6, r3
 80155b6:	9005      	str	r0, [sp, #20]
 80155b8:	9101      	str	r1, [sp, #4]
 80155ba:	9202      	str	r2, [sp, #8]
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d045      	beq.n	801564c <_strtol_l.isra.0+0x9c>
 80155c0:	0008      	movs	r0, r1
 80155c2:	2b24      	cmp	r3, #36	; 0x24
 80155c4:	d842      	bhi.n	801564c <_strtol_l.isra.0+0x9c>
 80155c6:	4b3f      	ldr	r3, [pc, #252]	; (80156c4 <_strtol_l.isra.0+0x114>)
 80155c8:	2208      	movs	r2, #8
 80155ca:	469c      	mov	ip, r3
 80155cc:	0003      	movs	r3, r0
 80155ce:	4661      	mov	r1, ip
 80155d0:	781c      	ldrb	r4, [r3, #0]
 80155d2:	1c45      	adds	r5, r0, #1
 80155d4:	5d09      	ldrb	r1, [r1, r4]
 80155d6:	0028      	movs	r0, r5
 80155d8:	000f      	movs	r7, r1
 80155da:	4017      	ands	r7, r2
 80155dc:	4211      	tst	r1, r2
 80155de:	d1f5      	bne.n	80155cc <_strtol_l.isra.0+0x1c>
 80155e0:	2c2d      	cmp	r4, #45	; 0x2d
 80155e2:	d13a      	bne.n	801565a <_strtol_l.isra.0+0xaa>
 80155e4:	2701      	movs	r7, #1
 80155e6:	782c      	ldrb	r4, [r5, #0]
 80155e8:	1c9d      	adds	r5, r3, #2
 80155ea:	2e00      	cmp	r6, #0
 80155ec:	d065      	beq.n	80156ba <_strtol_l.isra.0+0x10a>
 80155ee:	2e10      	cmp	r6, #16
 80155f0:	d109      	bne.n	8015606 <_strtol_l.isra.0+0x56>
 80155f2:	2c30      	cmp	r4, #48	; 0x30
 80155f4:	d107      	bne.n	8015606 <_strtol_l.isra.0+0x56>
 80155f6:	2220      	movs	r2, #32
 80155f8:	782b      	ldrb	r3, [r5, #0]
 80155fa:	4393      	bics	r3, r2
 80155fc:	2b58      	cmp	r3, #88	; 0x58
 80155fe:	d157      	bne.n	80156b0 <_strtol_l.isra.0+0x100>
 8015600:	2610      	movs	r6, #16
 8015602:	786c      	ldrb	r4, [r5, #1]
 8015604:	3502      	adds	r5, #2
 8015606:	4b30      	ldr	r3, [pc, #192]	; (80156c8 <_strtol_l.isra.0+0x118>)
 8015608:	0031      	movs	r1, r6
 801560a:	18fb      	adds	r3, r7, r3
 801560c:	0018      	movs	r0, r3
 801560e:	9303      	str	r3, [sp, #12]
 8015610:	f7ea fe24 	bl	800025c <__aeabi_uidivmod>
 8015614:	2300      	movs	r3, #0
 8015616:	2201      	movs	r2, #1
 8015618:	4684      	mov	ip, r0
 801561a:	0018      	movs	r0, r3
 801561c:	9104      	str	r1, [sp, #16]
 801561e:	4252      	negs	r2, r2
 8015620:	0021      	movs	r1, r4
 8015622:	3930      	subs	r1, #48	; 0x30
 8015624:	2909      	cmp	r1, #9
 8015626:	d81d      	bhi.n	8015664 <_strtol_l.isra.0+0xb4>
 8015628:	000c      	movs	r4, r1
 801562a:	42a6      	cmp	r6, r4
 801562c:	dd28      	ble.n	8015680 <_strtol_l.isra.0+0xd0>
 801562e:	2b00      	cmp	r3, #0
 8015630:	db24      	blt.n	801567c <_strtol_l.isra.0+0xcc>
 8015632:	0013      	movs	r3, r2
 8015634:	4584      	cmp	ip, r0
 8015636:	d306      	bcc.n	8015646 <_strtol_l.isra.0+0x96>
 8015638:	d102      	bne.n	8015640 <_strtol_l.isra.0+0x90>
 801563a:	9904      	ldr	r1, [sp, #16]
 801563c:	42a1      	cmp	r1, r4
 801563e:	db02      	blt.n	8015646 <_strtol_l.isra.0+0x96>
 8015640:	2301      	movs	r3, #1
 8015642:	4370      	muls	r0, r6
 8015644:	1820      	adds	r0, r4, r0
 8015646:	782c      	ldrb	r4, [r5, #0]
 8015648:	3501      	adds	r5, #1
 801564a:	e7e9      	b.n	8015620 <_strtol_l.isra.0+0x70>
 801564c:	f000 ff12 	bl	8016474 <__errno>
 8015650:	2316      	movs	r3, #22
 8015652:	6003      	str	r3, [r0, #0]
 8015654:	2000      	movs	r0, #0
 8015656:	b007      	add	sp, #28
 8015658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801565a:	2c2b      	cmp	r4, #43	; 0x2b
 801565c:	d1c5      	bne.n	80155ea <_strtol_l.isra.0+0x3a>
 801565e:	782c      	ldrb	r4, [r5, #0]
 8015660:	1c9d      	adds	r5, r3, #2
 8015662:	e7c2      	b.n	80155ea <_strtol_l.isra.0+0x3a>
 8015664:	0021      	movs	r1, r4
 8015666:	3941      	subs	r1, #65	; 0x41
 8015668:	2919      	cmp	r1, #25
 801566a:	d801      	bhi.n	8015670 <_strtol_l.isra.0+0xc0>
 801566c:	3c37      	subs	r4, #55	; 0x37
 801566e:	e7dc      	b.n	801562a <_strtol_l.isra.0+0x7a>
 8015670:	0021      	movs	r1, r4
 8015672:	3961      	subs	r1, #97	; 0x61
 8015674:	2919      	cmp	r1, #25
 8015676:	d803      	bhi.n	8015680 <_strtol_l.isra.0+0xd0>
 8015678:	3c57      	subs	r4, #87	; 0x57
 801567a:	e7d6      	b.n	801562a <_strtol_l.isra.0+0x7a>
 801567c:	0013      	movs	r3, r2
 801567e:	e7e2      	b.n	8015646 <_strtol_l.isra.0+0x96>
 8015680:	2b00      	cmp	r3, #0
 8015682:	da09      	bge.n	8015698 <_strtol_l.isra.0+0xe8>
 8015684:	2322      	movs	r3, #34	; 0x22
 8015686:	9a05      	ldr	r2, [sp, #20]
 8015688:	9803      	ldr	r0, [sp, #12]
 801568a:	6013      	str	r3, [r2, #0]
 801568c:	9b02      	ldr	r3, [sp, #8]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d0e1      	beq.n	8015656 <_strtol_l.isra.0+0xa6>
 8015692:	1e6b      	subs	r3, r5, #1
 8015694:	9301      	str	r3, [sp, #4]
 8015696:	e007      	b.n	80156a8 <_strtol_l.isra.0+0xf8>
 8015698:	2f00      	cmp	r7, #0
 801569a:	d000      	beq.n	801569e <_strtol_l.isra.0+0xee>
 801569c:	4240      	negs	r0, r0
 801569e:	9a02      	ldr	r2, [sp, #8]
 80156a0:	2a00      	cmp	r2, #0
 80156a2:	d0d8      	beq.n	8015656 <_strtol_l.isra.0+0xa6>
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d1f4      	bne.n	8015692 <_strtol_l.isra.0+0xe2>
 80156a8:	9b02      	ldr	r3, [sp, #8]
 80156aa:	9a01      	ldr	r2, [sp, #4]
 80156ac:	601a      	str	r2, [r3, #0]
 80156ae:	e7d2      	b.n	8015656 <_strtol_l.isra.0+0xa6>
 80156b0:	2430      	movs	r4, #48	; 0x30
 80156b2:	2e00      	cmp	r6, #0
 80156b4:	d1a7      	bne.n	8015606 <_strtol_l.isra.0+0x56>
 80156b6:	3608      	adds	r6, #8
 80156b8:	e7a5      	b.n	8015606 <_strtol_l.isra.0+0x56>
 80156ba:	2c30      	cmp	r4, #48	; 0x30
 80156bc:	d09b      	beq.n	80155f6 <_strtol_l.isra.0+0x46>
 80156be:	260a      	movs	r6, #10
 80156c0:	e7a1      	b.n	8015606 <_strtol_l.isra.0+0x56>
 80156c2:	46c0      	nop			; (mov r8, r8)
 80156c4:	0801b505 	.word	0x0801b505
 80156c8:	7fffffff 	.word	0x7fffffff

080156cc <strtol>:
 80156cc:	b510      	push	{r4, lr}
 80156ce:	0013      	movs	r3, r2
 80156d0:	000a      	movs	r2, r1
 80156d2:	0001      	movs	r1, r0
 80156d4:	4802      	ldr	r0, [pc, #8]	; (80156e0 <strtol+0x14>)
 80156d6:	6800      	ldr	r0, [r0, #0]
 80156d8:	f7ff ff6a 	bl	80155b0 <_strtol_l.isra.0>
 80156dc:	bd10      	pop	{r4, pc}
 80156de:	46c0      	nop			; (mov r8, r8)
 80156e0:	200000c0 	.word	0x200000c0

080156e4 <__assert_func>:
 80156e4:	b530      	push	{r4, r5, lr}
 80156e6:	0014      	movs	r4, r2
 80156e8:	001a      	movs	r2, r3
 80156ea:	4b09      	ldr	r3, [pc, #36]	; (8015710 <__assert_func+0x2c>)
 80156ec:	0005      	movs	r5, r0
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	b085      	sub	sp, #20
 80156f2:	68d8      	ldr	r0, [r3, #12]
 80156f4:	4b07      	ldr	r3, [pc, #28]	; (8015714 <__assert_func+0x30>)
 80156f6:	2c00      	cmp	r4, #0
 80156f8:	d101      	bne.n	80156fe <__assert_func+0x1a>
 80156fa:	4b07      	ldr	r3, [pc, #28]	; (8015718 <__assert_func+0x34>)
 80156fc:	001c      	movs	r4, r3
 80156fe:	9301      	str	r3, [sp, #4]
 8015700:	9100      	str	r1, [sp, #0]
 8015702:	002b      	movs	r3, r5
 8015704:	4905      	ldr	r1, [pc, #20]	; (801571c <__assert_func+0x38>)
 8015706:	9402      	str	r4, [sp, #8]
 8015708:	f000 feba 	bl	8016480 <fiprintf>
 801570c:	f002 fb10 	bl	8017d30 <abort>
 8015710:	200000c0 	.word	0x200000c0
 8015714:	0801b769 	.word	0x0801b769
 8015718:	0801b7a4 	.word	0x0801b7a4
 801571c:	0801b776 	.word	0x0801b776

08015720 <quorem>:
 8015720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015722:	0006      	movs	r6, r0
 8015724:	690d      	ldr	r5, [r1, #16]
 8015726:	6933      	ldr	r3, [r6, #16]
 8015728:	b087      	sub	sp, #28
 801572a:	2000      	movs	r0, #0
 801572c:	9102      	str	r1, [sp, #8]
 801572e:	42ab      	cmp	r3, r5
 8015730:	db6b      	blt.n	801580a <quorem+0xea>
 8015732:	000b      	movs	r3, r1
 8015734:	3d01      	subs	r5, #1
 8015736:	00ac      	lsls	r4, r5, #2
 8015738:	3314      	adds	r3, #20
 801573a:	9305      	str	r3, [sp, #20]
 801573c:	191b      	adds	r3, r3, r4
 801573e:	9303      	str	r3, [sp, #12]
 8015740:	0033      	movs	r3, r6
 8015742:	3314      	adds	r3, #20
 8015744:	9301      	str	r3, [sp, #4]
 8015746:	191c      	adds	r4, r3, r4
 8015748:	9b03      	ldr	r3, [sp, #12]
 801574a:	6827      	ldr	r7, [r4, #0]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	0038      	movs	r0, r7
 8015750:	9300      	str	r3, [sp, #0]
 8015752:	3301      	adds	r3, #1
 8015754:	0019      	movs	r1, r3
 8015756:	9304      	str	r3, [sp, #16]
 8015758:	f7ea fcfa 	bl	8000150 <__udivsi3>
 801575c:	9b04      	ldr	r3, [sp, #16]
 801575e:	9000      	str	r0, [sp, #0]
 8015760:	429f      	cmp	r7, r3
 8015762:	d329      	bcc.n	80157b8 <quorem+0x98>
 8015764:	2300      	movs	r3, #0
 8015766:	469c      	mov	ip, r3
 8015768:	9801      	ldr	r0, [sp, #4]
 801576a:	9f05      	ldr	r7, [sp, #20]
 801576c:	9304      	str	r3, [sp, #16]
 801576e:	cf08      	ldmia	r7!, {r3}
 8015770:	9a00      	ldr	r2, [sp, #0]
 8015772:	b299      	uxth	r1, r3
 8015774:	4351      	muls	r1, r2
 8015776:	0c1b      	lsrs	r3, r3, #16
 8015778:	4353      	muls	r3, r2
 801577a:	4461      	add	r1, ip
 801577c:	0c0a      	lsrs	r2, r1, #16
 801577e:	189b      	adds	r3, r3, r2
 8015780:	0c1a      	lsrs	r2, r3, #16
 8015782:	9305      	str	r3, [sp, #20]
 8015784:	6803      	ldr	r3, [r0, #0]
 8015786:	4694      	mov	ip, r2
 8015788:	b29a      	uxth	r2, r3
 801578a:	9b04      	ldr	r3, [sp, #16]
 801578c:	b289      	uxth	r1, r1
 801578e:	18d2      	adds	r2, r2, r3
 8015790:	6803      	ldr	r3, [r0, #0]
 8015792:	1a52      	subs	r2, r2, r1
 8015794:	0c19      	lsrs	r1, r3, #16
 8015796:	466b      	mov	r3, sp
 8015798:	8a9b      	ldrh	r3, [r3, #20]
 801579a:	1acb      	subs	r3, r1, r3
 801579c:	1411      	asrs	r1, r2, #16
 801579e:	185b      	adds	r3, r3, r1
 80157a0:	1419      	asrs	r1, r3, #16
 80157a2:	b292      	uxth	r2, r2
 80157a4:	041b      	lsls	r3, r3, #16
 80157a6:	431a      	orrs	r2, r3
 80157a8:	9b03      	ldr	r3, [sp, #12]
 80157aa:	9104      	str	r1, [sp, #16]
 80157ac:	c004      	stmia	r0!, {r2}
 80157ae:	42bb      	cmp	r3, r7
 80157b0:	d2dd      	bcs.n	801576e <quorem+0x4e>
 80157b2:	6823      	ldr	r3, [r4, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d02e      	beq.n	8015816 <quorem+0xf6>
 80157b8:	0030      	movs	r0, r6
 80157ba:	9902      	ldr	r1, [sp, #8]
 80157bc:	f001 fce6 	bl	801718c <__mcmp>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	db21      	blt.n	8015808 <quorem+0xe8>
 80157c4:	0030      	movs	r0, r6
 80157c6:	2400      	movs	r4, #0
 80157c8:	9b00      	ldr	r3, [sp, #0]
 80157ca:	9902      	ldr	r1, [sp, #8]
 80157cc:	3301      	adds	r3, #1
 80157ce:	9300      	str	r3, [sp, #0]
 80157d0:	3014      	adds	r0, #20
 80157d2:	3114      	adds	r1, #20
 80157d4:	6802      	ldr	r2, [r0, #0]
 80157d6:	c908      	ldmia	r1!, {r3}
 80157d8:	b292      	uxth	r2, r2
 80157da:	1914      	adds	r4, r2, r4
 80157dc:	b29a      	uxth	r2, r3
 80157de:	1aa2      	subs	r2, r4, r2
 80157e0:	6804      	ldr	r4, [r0, #0]
 80157e2:	0c1b      	lsrs	r3, r3, #16
 80157e4:	0c24      	lsrs	r4, r4, #16
 80157e6:	1ae3      	subs	r3, r4, r3
 80157e8:	1414      	asrs	r4, r2, #16
 80157ea:	191b      	adds	r3, r3, r4
 80157ec:	141c      	asrs	r4, r3, #16
 80157ee:	b292      	uxth	r2, r2
 80157f0:	041b      	lsls	r3, r3, #16
 80157f2:	4313      	orrs	r3, r2
 80157f4:	c008      	stmia	r0!, {r3}
 80157f6:	9b03      	ldr	r3, [sp, #12]
 80157f8:	428b      	cmp	r3, r1
 80157fa:	d2eb      	bcs.n	80157d4 <quorem+0xb4>
 80157fc:	9a01      	ldr	r2, [sp, #4]
 80157fe:	00ab      	lsls	r3, r5, #2
 8015800:	18d3      	adds	r3, r2, r3
 8015802:	681a      	ldr	r2, [r3, #0]
 8015804:	2a00      	cmp	r2, #0
 8015806:	d010      	beq.n	801582a <quorem+0x10a>
 8015808:	9800      	ldr	r0, [sp, #0]
 801580a:	b007      	add	sp, #28
 801580c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801580e:	6823      	ldr	r3, [r4, #0]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d104      	bne.n	801581e <quorem+0xfe>
 8015814:	3d01      	subs	r5, #1
 8015816:	9b01      	ldr	r3, [sp, #4]
 8015818:	3c04      	subs	r4, #4
 801581a:	42a3      	cmp	r3, r4
 801581c:	d3f7      	bcc.n	801580e <quorem+0xee>
 801581e:	6135      	str	r5, [r6, #16]
 8015820:	e7ca      	b.n	80157b8 <quorem+0x98>
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	2a00      	cmp	r2, #0
 8015826:	d104      	bne.n	8015832 <quorem+0x112>
 8015828:	3d01      	subs	r5, #1
 801582a:	9a01      	ldr	r2, [sp, #4]
 801582c:	3b04      	subs	r3, #4
 801582e:	429a      	cmp	r2, r3
 8015830:	d3f7      	bcc.n	8015822 <quorem+0x102>
 8015832:	6135      	str	r5, [r6, #16]
 8015834:	e7e8      	b.n	8015808 <quorem+0xe8>
	...

08015838 <_dtoa_r>:
 8015838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801583a:	b09d      	sub	sp, #116	; 0x74
 801583c:	9202      	str	r2, [sp, #8]
 801583e:	9303      	str	r3, [sp, #12]
 8015840:	9b02      	ldr	r3, [sp, #8]
 8015842:	9c03      	ldr	r4, [sp, #12]
 8015844:	930a      	str	r3, [sp, #40]	; 0x28
 8015846:	940b      	str	r4, [sp, #44]	; 0x2c
 8015848:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801584a:	0007      	movs	r7, r0
 801584c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801584e:	2c00      	cmp	r4, #0
 8015850:	d10e      	bne.n	8015870 <_dtoa_r+0x38>
 8015852:	2010      	movs	r0, #16
 8015854:	f7fe f9b2 	bl	8013bbc <malloc>
 8015858:	1e02      	subs	r2, r0, #0
 801585a:	6278      	str	r0, [r7, #36]	; 0x24
 801585c:	d104      	bne.n	8015868 <_dtoa_r+0x30>
 801585e:	21ea      	movs	r1, #234	; 0xea
 8015860:	4bc0      	ldr	r3, [pc, #768]	; (8015b64 <_dtoa_r+0x32c>)
 8015862:	48c1      	ldr	r0, [pc, #772]	; (8015b68 <_dtoa_r+0x330>)
 8015864:	f7ff ff3e 	bl	80156e4 <__assert_func>
 8015868:	6044      	str	r4, [r0, #4]
 801586a:	6084      	str	r4, [r0, #8]
 801586c:	6004      	str	r4, [r0, #0]
 801586e:	60c4      	str	r4, [r0, #12]
 8015870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015872:	6819      	ldr	r1, [r3, #0]
 8015874:	2900      	cmp	r1, #0
 8015876:	d00a      	beq.n	801588e <_dtoa_r+0x56>
 8015878:	685a      	ldr	r2, [r3, #4]
 801587a:	2301      	movs	r3, #1
 801587c:	4093      	lsls	r3, r2
 801587e:	604a      	str	r2, [r1, #4]
 8015880:	608b      	str	r3, [r1, #8]
 8015882:	0038      	movs	r0, r7
 8015884:	f001 f9f4 	bl	8016c70 <_Bfree>
 8015888:	2200      	movs	r2, #0
 801588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588c:	601a      	str	r2, [r3, #0]
 801588e:	9b03      	ldr	r3, [sp, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	da21      	bge.n	80158d8 <_dtoa_r+0xa0>
 8015894:	2301      	movs	r3, #1
 8015896:	602b      	str	r3, [r5, #0]
 8015898:	9b03      	ldr	r3, [sp, #12]
 801589a:	005b      	lsls	r3, r3, #1
 801589c:	085b      	lsrs	r3, r3, #1
 801589e:	930b      	str	r3, [sp, #44]	; 0x2c
 80158a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80158a2:	4bb2      	ldr	r3, [pc, #712]	; (8015b6c <_dtoa_r+0x334>)
 80158a4:	002a      	movs	r2, r5
 80158a6:	9318      	str	r3, [sp, #96]	; 0x60
 80158a8:	401a      	ands	r2, r3
 80158aa:	429a      	cmp	r2, r3
 80158ac:	d117      	bne.n	80158de <_dtoa_r+0xa6>
 80158ae:	4bb0      	ldr	r3, [pc, #704]	; (8015b70 <_dtoa_r+0x338>)
 80158b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80158b2:	0328      	lsls	r0, r5, #12
 80158b4:	6013      	str	r3, [r2, #0]
 80158b6:	9b02      	ldr	r3, [sp, #8]
 80158b8:	0b00      	lsrs	r0, r0, #12
 80158ba:	4318      	orrs	r0, r3
 80158bc:	d101      	bne.n	80158c2 <_dtoa_r+0x8a>
 80158be:	f000 fdc3 	bl	8016448 <_dtoa_r+0xc10>
 80158c2:	48ac      	ldr	r0, [pc, #688]	; (8015b74 <_dtoa_r+0x33c>)
 80158c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80158c6:	9005      	str	r0, [sp, #20]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d002      	beq.n	80158d2 <_dtoa_r+0x9a>
 80158cc:	4baa      	ldr	r3, [pc, #680]	; (8015b78 <_dtoa_r+0x340>)
 80158ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80158d0:	6013      	str	r3, [r2, #0]
 80158d2:	9805      	ldr	r0, [sp, #20]
 80158d4:	b01d      	add	sp, #116	; 0x74
 80158d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158d8:	2300      	movs	r3, #0
 80158da:	602b      	str	r3, [r5, #0]
 80158dc:	e7e0      	b.n	80158a0 <_dtoa_r+0x68>
 80158de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80158e2:	9312      	str	r3, [sp, #72]	; 0x48
 80158e4:	9413      	str	r4, [sp, #76]	; 0x4c
 80158e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80158e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80158ea:	2200      	movs	r2, #0
 80158ec:	2300      	movs	r3, #0
 80158ee:	f7ea fdb5 	bl	800045c <__aeabi_dcmpeq>
 80158f2:	1e04      	subs	r4, r0, #0
 80158f4:	d00b      	beq.n	801590e <_dtoa_r+0xd6>
 80158f6:	2301      	movs	r3, #1
 80158f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80158fa:	6013      	str	r3, [r2, #0]
 80158fc:	4b9f      	ldr	r3, [pc, #636]	; (8015b7c <_dtoa_r+0x344>)
 80158fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015900:	9305      	str	r3, [sp, #20]
 8015902:	2a00      	cmp	r2, #0
 8015904:	d0e5      	beq.n	80158d2 <_dtoa_r+0x9a>
 8015906:	4a9e      	ldr	r2, [pc, #632]	; (8015b80 <_dtoa_r+0x348>)
 8015908:	9926      	ldr	r1, [sp, #152]	; 0x98
 801590a:	600a      	str	r2, [r1, #0]
 801590c:	e7e1      	b.n	80158d2 <_dtoa_r+0x9a>
 801590e:	ab1a      	add	r3, sp, #104	; 0x68
 8015910:	9301      	str	r3, [sp, #4]
 8015912:	ab1b      	add	r3, sp, #108	; 0x6c
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	0038      	movs	r0, r7
 8015918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801591a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801591c:	f001 fd5e 	bl	80173dc <__d2b>
 8015920:	006e      	lsls	r6, r5, #1
 8015922:	9004      	str	r0, [sp, #16]
 8015924:	0d76      	lsrs	r6, r6, #21
 8015926:	d100      	bne.n	801592a <_dtoa_r+0xf2>
 8015928:	e07c      	b.n	8015a24 <_dtoa_r+0x1ec>
 801592a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801592c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801592e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015930:	4a94      	ldr	r2, [pc, #592]	; (8015b84 <_dtoa_r+0x34c>)
 8015932:	031b      	lsls	r3, r3, #12
 8015934:	0b1b      	lsrs	r3, r3, #12
 8015936:	431a      	orrs	r2, r3
 8015938:	0011      	movs	r1, r2
 801593a:	4b93      	ldr	r3, [pc, #588]	; (8015b88 <_dtoa_r+0x350>)
 801593c:	9416      	str	r4, [sp, #88]	; 0x58
 801593e:	18f6      	adds	r6, r6, r3
 8015940:	2200      	movs	r2, #0
 8015942:	4b92      	ldr	r3, [pc, #584]	; (8015b8c <_dtoa_r+0x354>)
 8015944:	f7ec fe16 	bl	8002574 <__aeabi_dsub>
 8015948:	4a91      	ldr	r2, [pc, #580]	; (8015b90 <_dtoa_r+0x358>)
 801594a:	4b92      	ldr	r3, [pc, #584]	; (8015b94 <_dtoa_r+0x35c>)
 801594c:	f7ec fba6 	bl	800209c <__aeabi_dmul>
 8015950:	4a91      	ldr	r2, [pc, #580]	; (8015b98 <_dtoa_r+0x360>)
 8015952:	4b92      	ldr	r3, [pc, #584]	; (8015b9c <_dtoa_r+0x364>)
 8015954:	f7eb fc32 	bl	80011bc <__aeabi_dadd>
 8015958:	0004      	movs	r4, r0
 801595a:	0030      	movs	r0, r6
 801595c:	000d      	movs	r5, r1
 801595e:	f7ed f9ef 	bl	8002d40 <__aeabi_i2d>
 8015962:	4a8f      	ldr	r2, [pc, #572]	; (8015ba0 <_dtoa_r+0x368>)
 8015964:	4b8f      	ldr	r3, [pc, #572]	; (8015ba4 <_dtoa_r+0x36c>)
 8015966:	f7ec fb99 	bl	800209c <__aeabi_dmul>
 801596a:	0002      	movs	r2, r0
 801596c:	000b      	movs	r3, r1
 801596e:	0020      	movs	r0, r4
 8015970:	0029      	movs	r1, r5
 8015972:	f7eb fc23 	bl	80011bc <__aeabi_dadd>
 8015976:	0004      	movs	r4, r0
 8015978:	000d      	movs	r5, r1
 801597a:	f7ed f9ab 	bl	8002cd4 <__aeabi_d2iz>
 801597e:	2200      	movs	r2, #0
 8015980:	9002      	str	r0, [sp, #8]
 8015982:	2300      	movs	r3, #0
 8015984:	0020      	movs	r0, r4
 8015986:	0029      	movs	r1, r5
 8015988:	f7ea fd6e 	bl	8000468 <__aeabi_dcmplt>
 801598c:	2800      	cmp	r0, #0
 801598e:	d00b      	beq.n	80159a8 <_dtoa_r+0x170>
 8015990:	9802      	ldr	r0, [sp, #8]
 8015992:	f7ed f9d5 	bl	8002d40 <__aeabi_i2d>
 8015996:	002b      	movs	r3, r5
 8015998:	0022      	movs	r2, r4
 801599a:	f7ea fd5f 	bl	800045c <__aeabi_dcmpeq>
 801599e:	4243      	negs	r3, r0
 80159a0:	4158      	adcs	r0, r3
 80159a2:	9b02      	ldr	r3, [sp, #8]
 80159a4:	1a1b      	subs	r3, r3, r0
 80159a6:	9302      	str	r3, [sp, #8]
 80159a8:	2301      	movs	r3, #1
 80159aa:	9315      	str	r3, [sp, #84]	; 0x54
 80159ac:	9b02      	ldr	r3, [sp, #8]
 80159ae:	2b16      	cmp	r3, #22
 80159b0:	d80f      	bhi.n	80159d2 <_dtoa_r+0x19a>
 80159b2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80159b4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80159b6:	00da      	lsls	r2, r3, #3
 80159b8:	4b7b      	ldr	r3, [pc, #492]	; (8015ba8 <_dtoa_r+0x370>)
 80159ba:	189b      	adds	r3, r3, r2
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	f7ea fd52 	bl	8000468 <__aeabi_dcmplt>
 80159c4:	2800      	cmp	r0, #0
 80159c6:	d049      	beq.n	8015a5c <_dtoa_r+0x224>
 80159c8:	9b02      	ldr	r3, [sp, #8]
 80159ca:	3b01      	subs	r3, #1
 80159cc:	9302      	str	r3, [sp, #8]
 80159ce:	2300      	movs	r3, #0
 80159d0:	9315      	str	r3, [sp, #84]	; 0x54
 80159d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80159d4:	1b9e      	subs	r6, r3, r6
 80159d6:	2300      	movs	r3, #0
 80159d8:	9308      	str	r3, [sp, #32]
 80159da:	0033      	movs	r3, r6
 80159dc:	3b01      	subs	r3, #1
 80159de:	930d      	str	r3, [sp, #52]	; 0x34
 80159e0:	d504      	bpl.n	80159ec <_dtoa_r+0x1b4>
 80159e2:	2301      	movs	r3, #1
 80159e4:	1b9b      	subs	r3, r3, r6
 80159e6:	9308      	str	r3, [sp, #32]
 80159e8:	2300      	movs	r3, #0
 80159ea:	930d      	str	r3, [sp, #52]	; 0x34
 80159ec:	9b02      	ldr	r3, [sp, #8]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	db36      	blt.n	8015a60 <_dtoa_r+0x228>
 80159f2:	9a02      	ldr	r2, [sp, #8]
 80159f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159f6:	4694      	mov	ip, r2
 80159f8:	4463      	add	r3, ip
 80159fa:	930d      	str	r3, [sp, #52]	; 0x34
 80159fc:	2300      	movs	r3, #0
 80159fe:	9214      	str	r2, [sp, #80]	; 0x50
 8015a00:	930e      	str	r3, [sp, #56]	; 0x38
 8015a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a04:	2401      	movs	r4, #1
 8015a06:	2b09      	cmp	r3, #9
 8015a08:	d862      	bhi.n	8015ad0 <_dtoa_r+0x298>
 8015a0a:	2b05      	cmp	r3, #5
 8015a0c:	dd02      	ble.n	8015a14 <_dtoa_r+0x1dc>
 8015a0e:	2400      	movs	r4, #0
 8015a10:	3b04      	subs	r3, #4
 8015a12:	9322      	str	r3, [sp, #136]	; 0x88
 8015a14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015a16:	1e98      	subs	r0, r3, #2
 8015a18:	2803      	cmp	r0, #3
 8015a1a:	d862      	bhi.n	8015ae2 <_dtoa_r+0x2aa>
 8015a1c:	f7ea fb84 	bl	8000128 <__gnu_thumb1_case_uqi>
 8015a20:	56343629 	.word	0x56343629
 8015a24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015a26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015a28:	189e      	adds	r6, r3, r2
 8015a2a:	4b60      	ldr	r3, [pc, #384]	; (8015bac <_dtoa_r+0x374>)
 8015a2c:	18f2      	adds	r2, r6, r3
 8015a2e:	2a20      	cmp	r2, #32
 8015a30:	dd0f      	ble.n	8015a52 <_dtoa_r+0x21a>
 8015a32:	2340      	movs	r3, #64	; 0x40
 8015a34:	1a9b      	subs	r3, r3, r2
 8015a36:	409d      	lsls	r5, r3
 8015a38:	4b5d      	ldr	r3, [pc, #372]	; (8015bb0 <_dtoa_r+0x378>)
 8015a3a:	9802      	ldr	r0, [sp, #8]
 8015a3c:	18f3      	adds	r3, r6, r3
 8015a3e:	40d8      	lsrs	r0, r3
 8015a40:	4328      	orrs	r0, r5
 8015a42:	f7ed f9ad 	bl	8002da0 <__aeabi_ui2d>
 8015a46:	2301      	movs	r3, #1
 8015a48:	4c5a      	ldr	r4, [pc, #360]	; (8015bb4 <_dtoa_r+0x37c>)
 8015a4a:	3e01      	subs	r6, #1
 8015a4c:	1909      	adds	r1, r1, r4
 8015a4e:	9316      	str	r3, [sp, #88]	; 0x58
 8015a50:	e776      	b.n	8015940 <_dtoa_r+0x108>
 8015a52:	2320      	movs	r3, #32
 8015a54:	9802      	ldr	r0, [sp, #8]
 8015a56:	1a9b      	subs	r3, r3, r2
 8015a58:	4098      	lsls	r0, r3
 8015a5a:	e7f2      	b.n	8015a42 <_dtoa_r+0x20a>
 8015a5c:	9015      	str	r0, [sp, #84]	; 0x54
 8015a5e:	e7b8      	b.n	80159d2 <_dtoa_r+0x19a>
 8015a60:	9b08      	ldr	r3, [sp, #32]
 8015a62:	9a02      	ldr	r2, [sp, #8]
 8015a64:	1a9b      	subs	r3, r3, r2
 8015a66:	9308      	str	r3, [sp, #32]
 8015a68:	4253      	negs	r3, r2
 8015a6a:	930e      	str	r3, [sp, #56]	; 0x38
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	9314      	str	r3, [sp, #80]	; 0x50
 8015a70:	e7c7      	b.n	8015a02 <_dtoa_r+0x1ca>
 8015a72:	2300      	movs	r3, #0
 8015a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	dc36      	bgt.n	8015aea <_dtoa_r+0x2b2>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	001a      	movs	r2, r3
 8015a80:	930c      	str	r3, [sp, #48]	; 0x30
 8015a82:	9306      	str	r3, [sp, #24]
 8015a84:	9223      	str	r2, [sp, #140]	; 0x8c
 8015a86:	e00d      	b.n	8015aa4 <_dtoa_r+0x26c>
 8015a88:	2301      	movs	r3, #1
 8015a8a:	e7f3      	b.n	8015a74 <_dtoa_r+0x23c>
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a92:	4694      	mov	ip, r2
 8015a94:	9b02      	ldr	r3, [sp, #8]
 8015a96:	4463      	add	r3, ip
 8015a98:	930c      	str	r3, [sp, #48]	; 0x30
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	9306      	str	r3, [sp, #24]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	dc00      	bgt.n	8015aa4 <_dtoa_r+0x26c>
 8015aa2:	2301      	movs	r3, #1
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015aa8:	6042      	str	r2, [r0, #4]
 8015aaa:	3204      	adds	r2, #4
 8015aac:	0015      	movs	r5, r2
 8015aae:	3514      	adds	r5, #20
 8015ab0:	6841      	ldr	r1, [r0, #4]
 8015ab2:	429d      	cmp	r5, r3
 8015ab4:	d91d      	bls.n	8015af2 <_dtoa_r+0x2ba>
 8015ab6:	0038      	movs	r0, r7
 8015ab8:	f001 f896 	bl	8016be8 <_Balloc>
 8015abc:	9005      	str	r0, [sp, #20]
 8015abe:	2800      	cmp	r0, #0
 8015ac0:	d11b      	bne.n	8015afa <_dtoa_r+0x2c2>
 8015ac2:	21d5      	movs	r1, #213	; 0xd5
 8015ac4:	0002      	movs	r2, r0
 8015ac6:	4b3c      	ldr	r3, [pc, #240]	; (8015bb8 <_dtoa_r+0x380>)
 8015ac8:	0049      	lsls	r1, r1, #1
 8015aca:	e6ca      	b.n	8015862 <_dtoa_r+0x2a>
 8015acc:	2301      	movs	r3, #1
 8015ace:	e7de      	b.n	8015a8e <_dtoa_r+0x256>
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	940f      	str	r4, [sp, #60]	; 0x3c
 8015ad4:	9322      	str	r3, [sp, #136]	; 0x88
 8015ad6:	3b01      	subs	r3, #1
 8015ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8015ada:	9306      	str	r3, [sp, #24]
 8015adc:	2200      	movs	r2, #0
 8015ade:	3313      	adds	r3, #19
 8015ae0:	e7d0      	b.n	8015a84 <_dtoa_r+0x24c>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ae6:	3b02      	subs	r3, #2
 8015ae8:	e7f6      	b.n	8015ad8 <_dtoa_r+0x2a0>
 8015aea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015aec:	930c      	str	r3, [sp, #48]	; 0x30
 8015aee:	9306      	str	r3, [sp, #24]
 8015af0:	e7d8      	b.n	8015aa4 <_dtoa_r+0x26c>
 8015af2:	3101      	adds	r1, #1
 8015af4:	6041      	str	r1, [r0, #4]
 8015af6:	0052      	lsls	r2, r2, #1
 8015af8:	e7d8      	b.n	8015aac <_dtoa_r+0x274>
 8015afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015afc:	9a05      	ldr	r2, [sp, #20]
 8015afe:	601a      	str	r2, [r3, #0]
 8015b00:	9b06      	ldr	r3, [sp, #24]
 8015b02:	2b0e      	cmp	r3, #14
 8015b04:	d900      	bls.n	8015b08 <_dtoa_r+0x2d0>
 8015b06:	e0eb      	b.n	8015ce0 <_dtoa_r+0x4a8>
 8015b08:	2c00      	cmp	r4, #0
 8015b0a:	d100      	bne.n	8015b0e <_dtoa_r+0x2d6>
 8015b0c:	e0e8      	b.n	8015ce0 <_dtoa_r+0x4a8>
 8015b0e:	9b02      	ldr	r3, [sp, #8]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dd68      	ble.n	8015be6 <_dtoa_r+0x3ae>
 8015b14:	001a      	movs	r2, r3
 8015b16:	210f      	movs	r1, #15
 8015b18:	4b23      	ldr	r3, [pc, #140]	; (8015ba8 <_dtoa_r+0x370>)
 8015b1a:	400a      	ands	r2, r1
 8015b1c:	00d2      	lsls	r2, r2, #3
 8015b1e:	189b      	adds	r3, r3, r2
 8015b20:	681d      	ldr	r5, [r3, #0]
 8015b22:	685e      	ldr	r6, [r3, #4]
 8015b24:	9b02      	ldr	r3, [sp, #8]
 8015b26:	111c      	asrs	r4, r3, #4
 8015b28:	2302      	movs	r3, #2
 8015b2a:	9310      	str	r3, [sp, #64]	; 0x40
 8015b2c:	9b02      	ldr	r3, [sp, #8]
 8015b2e:	05db      	lsls	r3, r3, #23
 8015b30:	d50b      	bpl.n	8015b4a <_dtoa_r+0x312>
 8015b32:	4b22      	ldr	r3, [pc, #136]	; (8015bbc <_dtoa_r+0x384>)
 8015b34:	400c      	ands	r4, r1
 8015b36:	6a1a      	ldr	r2, [r3, #32]
 8015b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b3a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015b3c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015b3e:	f7eb fea7 	bl	8001890 <__aeabi_ddiv>
 8015b42:	2303      	movs	r3, #3
 8015b44:	900a      	str	r0, [sp, #40]	; 0x28
 8015b46:	910b      	str	r1, [sp, #44]	; 0x2c
 8015b48:	9310      	str	r3, [sp, #64]	; 0x40
 8015b4a:	4b1c      	ldr	r3, [pc, #112]	; (8015bbc <_dtoa_r+0x384>)
 8015b4c:	9307      	str	r3, [sp, #28]
 8015b4e:	2c00      	cmp	r4, #0
 8015b50:	d136      	bne.n	8015bc0 <_dtoa_r+0x388>
 8015b52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b56:	002a      	movs	r2, r5
 8015b58:	0033      	movs	r3, r6
 8015b5a:	f7eb fe99 	bl	8001890 <__aeabi_ddiv>
 8015b5e:	900a      	str	r0, [sp, #40]	; 0x28
 8015b60:	910b      	str	r1, [sp, #44]	; 0x2c
 8015b62:	e05c      	b.n	8015c1e <_dtoa_r+0x3e6>
 8015b64:	0801b640 	.word	0x0801b640
 8015b68:	0801b7b2 	.word	0x0801b7b2
 8015b6c:	7ff00000 	.word	0x7ff00000
 8015b70:	0000270f 	.word	0x0000270f
 8015b74:	0801b7ae 	.word	0x0801b7ae
 8015b78:	0801b7b1 	.word	0x0801b7b1
 8015b7c:	0801b61c 	.word	0x0801b61c
 8015b80:	0801b61d 	.word	0x0801b61d
 8015b84:	3ff00000 	.word	0x3ff00000
 8015b88:	fffffc01 	.word	0xfffffc01
 8015b8c:	3ff80000 	.word	0x3ff80000
 8015b90:	636f4361 	.word	0x636f4361
 8015b94:	3fd287a7 	.word	0x3fd287a7
 8015b98:	8b60c8b3 	.word	0x8b60c8b3
 8015b9c:	3fc68a28 	.word	0x3fc68a28
 8015ba0:	509f79fb 	.word	0x509f79fb
 8015ba4:	3fd34413 	.word	0x3fd34413
 8015ba8:	0801b928 	.word	0x0801b928
 8015bac:	00000432 	.word	0x00000432
 8015bb0:	00000412 	.word	0x00000412
 8015bb4:	fe100000 	.word	0xfe100000
 8015bb8:	0801b811 	.word	0x0801b811
 8015bbc:	0801b900 	.word	0x0801b900
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	421c      	tst	r4, r3
 8015bc4:	d00b      	beq.n	8015bde <_dtoa_r+0x3a6>
 8015bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bc8:	0028      	movs	r0, r5
 8015bca:	3301      	adds	r3, #1
 8015bcc:	9310      	str	r3, [sp, #64]	; 0x40
 8015bce:	9b07      	ldr	r3, [sp, #28]
 8015bd0:	0031      	movs	r1, r6
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	f7ec fa61 	bl	800209c <__aeabi_dmul>
 8015bda:	0005      	movs	r5, r0
 8015bdc:	000e      	movs	r6, r1
 8015bde:	9b07      	ldr	r3, [sp, #28]
 8015be0:	1064      	asrs	r4, r4, #1
 8015be2:	3308      	adds	r3, #8
 8015be4:	e7b2      	b.n	8015b4c <_dtoa_r+0x314>
 8015be6:	2302      	movs	r3, #2
 8015be8:	9310      	str	r3, [sp, #64]	; 0x40
 8015bea:	9b02      	ldr	r3, [sp, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d016      	beq.n	8015c1e <_dtoa_r+0x3e6>
 8015bf0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015bf2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015bf4:	425c      	negs	r4, r3
 8015bf6:	230f      	movs	r3, #15
 8015bf8:	4ab5      	ldr	r2, [pc, #724]	; (8015ed0 <_dtoa_r+0x698>)
 8015bfa:	4023      	ands	r3, r4
 8015bfc:	00db      	lsls	r3, r3, #3
 8015bfe:	18d3      	adds	r3, r2, r3
 8015c00:	681a      	ldr	r2, [r3, #0]
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	f7ec fa4a 	bl	800209c <__aeabi_dmul>
 8015c08:	2601      	movs	r6, #1
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	900a      	str	r0, [sp, #40]	; 0x28
 8015c0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015c10:	4db0      	ldr	r5, [pc, #704]	; (8015ed4 <_dtoa_r+0x69c>)
 8015c12:	1124      	asrs	r4, r4, #4
 8015c14:	2c00      	cmp	r4, #0
 8015c16:	d000      	beq.n	8015c1a <_dtoa_r+0x3e2>
 8015c18:	e094      	b.n	8015d44 <_dtoa_r+0x50c>
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d19f      	bne.n	8015b5e <_dtoa_r+0x326>
 8015c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d100      	bne.n	8015c26 <_dtoa_r+0x3ee>
 8015c24:	e09b      	b.n	8015d5e <_dtoa_r+0x526>
 8015c26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015c28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	0020      	movs	r0, r4
 8015c2e:	0029      	movs	r1, r5
 8015c30:	4ba9      	ldr	r3, [pc, #676]	; (8015ed8 <_dtoa_r+0x6a0>)
 8015c32:	f7ea fc19 	bl	8000468 <__aeabi_dcmplt>
 8015c36:	2800      	cmp	r0, #0
 8015c38:	d100      	bne.n	8015c3c <_dtoa_r+0x404>
 8015c3a:	e090      	b.n	8015d5e <_dtoa_r+0x526>
 8015c3c:	9b06      	ldr	r3, [sp, #24]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d100      	bne.n	8015c44 <_dtoa_r+0x40c>
 8015c42:	e08c      	b.n	8015d5e <_dtoa_r+0x526>
 8015c44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	dd46      	ble.n	8015cd8 <_dtoa_r+0x4a0>
 8015c4a:	9b02      	ldr	r3, [sp, #8]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	0020      	movs	r0, r4
 8015c50:	0029      	movs	r1, r5
 8015c52:	1e5e      	subs	r6, r3, #1
 8015c54:	4ba1      	ldr	r3, [pc, #644]	; (8015edc <_dtoa_r+0x6a4>)
 8015c56:	f7ec fa21 	bl	800209c <__aeabi_dmul>
 8015c5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015c5c:	900a      	str	r0, [sp, #40]	; 0x28
 8015c5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015c60:	3301      	adds	r3, #1
 8015c62:	9310      	str	r3, [sp, #64]	; 0x40
 8015c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015c66:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015c68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015c6a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015c6c:	9307      	str	r3, [sp, #28]
 8015c6e:	f7ed f867 	bl	8002d40 <__aeabi_i2d>
 8015c72:	0022      	movs	r2, r4
 8015c74:	002b      	movs	r3, r5
 8015c76:	f7ec fa11 	bl	800209c <__aeabi_dmul>
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	4b98      	ldr	r3, [pc, #608]	; (8015ee0 <_dtoa_r+0x6a8>)
 8015c7e:	f7eb fa9d 	bl	80011bc <__aeabi_dadd>
 8015c82:	9010      	str	r0, [sp, #64]	; 0x40
 8015c84:	9111      	str	r1, [sp, #68]	; 0x44
 8015c86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8015c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c8e:	4a95      	ldr	r2, [pc, #596]	; (8015ee4 <_dtoa_r+0x6ac>)
 8015c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c92:	4694      	mov	ip, r2
 8015c94:	4463      	add	r3, ip
 8015c96:	9317      	str	r3, [sp, #92]	; 0x5c
 8015c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c9a:	9b07      	ldr	r3, [sp, #28]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d161      	bne.n	8015d64 <_dtoa_r+0x52c>
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	0020      	movs	r0, r4
 8015ca4:	0029      	movs	r1, r5
 8015ca6:	4b90      	ldr	r3, [pc, #576]	; (8015ee8 <_dtoa_r+0x6b0>)
 8015ca8:	f7ec fc64 	bl	8002574 <__aeabi_dsub>
 8015cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015cb0:	0004      	movs	r4, r0
 8015cb2:	000d      	movs	r5, r1
 8015cb4:	f7ea fbec 	bl	8000490 <__aeabi_dcmpgt>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d000      	beq.n	8015cbe <_dtoa_r+0x486>
 8015cbc:	e2b5      	b.n	801622a <_dtoa_r+0x9f2>
 8015cbe:	488b      	ldr	r0, [pc, #556]	; (8015eec <_dtoa_r+0x6b4>)
 8015cc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015cc2:	4684      	mov	ip, r0
 8015cc4:	4461      	add	r1, ip
 8015cc6:	000b      	movs	r3, r1
 8015cc8:	0020      	movs	r0, r4
 8015cca:	0029      	movs	r1, r5
 8015ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cce:	f7ea fbcb 	bl	8000468 <__aeabi_dcmplt>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	d000      	beq.n	8015cd8 <_dtoa_r+0x4a0>
 8015cd6:	e2a5      	b.n	8016224 <_dtoa_r+0x9ec>
 8015cd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015cda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8015cde:	940b      	str	r4, [sp, #44]	; 0x2c
 8015ce0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	da00      	bge.n	8015ce8 <_dtoa_r+0x4b0>
 8015ce6:	e171      	b.n	8015fcc <_dtoa_r+0x794>
 8015ce8:	9a02      	ldr	r2, [sp, #8]
 8015cea:	2a0e      	cmp	r2, #14
 8015cec:	dd00      	ble.n	8015cf0 <_dtoa_r+0x4b8>
 8015cee:	e16d      	b.n	8015fcc <_dtoa_r+0x794>
 8015cf0:	4b77      	ldr	r3, [pc, #476]	; (8015ed0 <_dtoa_r+0x698>)
 8015cf2:	00d2      	lsls	r2, r2, #3
 8015cf4:	189b      	adds	r3, r3, r2
 8015cf6:	685c      	ldr	r4, [r3, #4]
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	9308      	str	r3, [sp, #32]
 8015cfc:	9409      	str	r4, [sp, #36]	; 0x24
 8015cfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	db00      	blt.n	8015d06 <_dtoa_r+0x4ce>
 8015d04:	e0f6      	b.n	8015ef4 <_dtoa_r+0x6bc>
 8015d06:	9b06      	ldr	r3, [sp, #24]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	dd00      	ble.n	8015d0e <_dtoa_r+0x4d6>
 8015d0c:	e0f2      	b.n	8015ef4 <_dtoa_r+0x6bc>
 8015d0e:	d000      	beq.n	8015d12 <_dtoa_r+0x4da>
 8015d10:	e288      	b.n	8016224 <_dtoa_r+0x9ec>
 8015d12:	9808      	ldr	r0, [sp, #32]
 8015d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d16:	2200      	movs	r2, #0
 8015d18:	4b73      	ldr	r3, [pc, #460]	; (8015ee8 <_dtoa_r+0x6b0>)
 8015d1a:	f7ec f9bf 	bl	800209c <__aeabi_dmul>
 8015d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d22:	f7ea fbbf 	bl	80004a4 <__aeabi_dcmpge>
 8015d26:	9e06      	ldr	r6, [sp, #24]
 8015d28:	0035      	movs	r5, r6
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	d000      	beq.n	8015d30 <_dtoa_r+0x4f8>
 8015d2e:	e25f      	b.n	80161f0 <_dtoa_r+0x9b8>
 8015d30:	9b05      	ldr	r3, [sp, #20]
 8015d32:	9a05      	ldr	r2, [sp, #20]
 8015d34:	3301      	adds	r3, #1
 8015d36:	9307      	str	r3, [sp, #28]
 8015d38:	2331      	movs	r3, #49	; 0x31
 8015d3a:	7013      	strb	r3, [r2, #0]
 8015d3c:	9b02      	ldr	r3, [sp, #8]
 8015d3e:	3301      	adds	r3, #1
 8015d40:	9302      	str	r3, [sp, #8]
 8015d42:	e25a      	b.n	80161fa <_dtoa_r+0x9c2>
 8015d44:	4234      	tst	r4, r6
 8015d46:	d007      	beq.n	8015d58 <_dtoa_r+0x520>
 8015d48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	9310      	str	r3, [sp, #64]	; 0x40
 8015d4e:	682a      	ldr	r2, [r5, #0]
 8015d50:	686b      	ldr	r3, [r5, #4]
 8015d52:	f7ec f9a3 	bl	800209c <__aeabi_dmul>
 8015d56:	0033      	movs	r3, r6
 8015d58:	1064      	asrs	r4, r4, #1
 8015d5a:	3508      	adds	r5, #8
 8015d5c:	e75a      	b.n	8015c14 <_dtoa_r+0x3dc>
 8015d5e:	9e02      	ldr	r6, [sp, #8]
 8015d60:	9b06      	ldr	r3, [sp, #24]
 8015d62:	e780      	b.n	8015c66 <_dtoa_r+0x42e>
 8015d64:	9b07      	ldr	r3, [sp, #28]
 8015d66:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015d68:	1e5a      	subs	r2, r3, #1
 8015d6a:	4b59      	ldr	r3, [pc, #356]	; (8015ed0 <_dtoa_r+0x698>)
 8015d6c:	00d2      	lsls	r2, r2, #3
 8015d6e:	189b      	adds	r3, r3, r2
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	2900      	cmp	r1, #0
 8015d76:	d051      	beq.n	8015e1c <_dtoa_r+0x5e4>
 8015d78:	2000      	movs	r0, #0
 8015d7a:	495d      	ldr	r1, [pc, #372]	; (8015ef0 <_dtoa_r+0x6b8>)
 8015d7c:	f7eb fd88 	bl	8001890 <__aeabi_ddiv>
 8015d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d84:	f7ec fbf6 	bl	8002574 <__aeabi_dsub>
 8015d88:	9a05      	ldr	r2, [sp, #20]
 8015d8a:	9b05      	ldr	r3, [sp, #20]
 8015d8c:	4694      	mov	ip, r2
 8015d8e:	9310      	str	r3, [sp, #64]	; 0x40
 8015d90:	9b07      	ldr	r3, [sp, #28]
 8015d92:	900a      	str	r0, [sp, #40]	; 0x28
 8015d94:	910b      	str	r1, [sp, #44]	; 0x2c
 8015d96:	4463      	add	r3, ip
 8015d98:	9319      	str	r3, [sp, #100]	; 0x64
 8015d9a:	0029      	movs	r1, r5
 8015d9c:	0020      	movs	r0, r4
 8015d9e:	f7ec ff99 	bl	8002cd4 <__aeabi_d2iz>
 8015da2:	9017      	str	r0, [sp, #92]	; 0x5c
 8015da4:	f7ec ffcc 	bl	8002d40 <__aeabi_i2d>
 8015da8:	0002      	movs	r2, r0
 8015daa:	000b      	movs	r3, r1
 8015dac:	0020      	movs	r0, r4
 8015dae:	0029      	movs	r1, r5
 8015db0:	f7ec fbe0 	bl	8002574 <__aeabi_dsub>
 8015db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015db6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015db8:	3301      	adds	r3, #1
 8015dba:	9307      	str	r3, [sp, #28]
 8015dbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015dbe:	0004      	movs	r4, r0
 8015dc0:	3330      	adds	r3, #48	; 0x30
 8015dc2:	7013      	strb	r3, [r2, #0]
 8015dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dc8:	000d      	movs	r5, r1
 8015dca:	f7ea fb4d 	bl	8000468 <__aeabi_dcmplt>
 8015dce:	2800      	cmp	r0, #0
 8015dd0:	d175      	bne.n	8015ebe <_dtoa_r+0x686>
 8015dd2:	0022      	movs	r2, r4
 8015dd4:	002b      	movs	r3, r5
 8015dd6:	2000      	movs	r0, #0
 8015dd8:	493f      	ldr	r1, [pc, #252]	; (8015ed8 <_dtoa_r+0x6a0>)
 8015dda:	f7ec fbcb 	bl	8002574 <__aeabi_dsub>
 8015dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015de2:	f7ea fb41 	bl	8000468 <__aeabi_dcmplt>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d000      	beq.n	8015dec <_dtoa_r+0x5b4>
 8015dea:	e0d1      	b.n	8015f90 <_dtoa_r+0x758>
 8015dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015dee:	9a07      	ldr	r2, [sp, #28]
 8015df0:	4293      	cmp	r3, r2
 8015df2:	d100      	bne.n	8015df6 <_dtoa_r+0x5be>
 8015df4:	e770      	b.n	8015cd8 <_dtoa_r+0x4a0>
 8015df6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	4b37      	ldr	r3, [pc, #220]	; (8015edc <_dtoa_r+0x6a4>)
 8015dfe:	f7ec f94d 	bl	800209c <__aeabi_dmul>
 8015e02:	4b36      	ldr	r3, [pc, #216]	; (8015edc <_dtoa_r+0x6a4>)
 8015e04:	900a      	str	r0, [sp, #40]	; 0x28
 8015e06:	910b      	str	r1, [sp, #44]	; 0x2c
 8015e08:	2200      	movs	r2, #0
 8015e0a:	0020      	movs	r0, r4
 8015e0c:	0029      	movs	r1, r5
 8015e0e:	f7ec f945 	bl	800209c <__aeabi_dmul>
 8015e12:	9b07      	ldr	r3, [sp, #28]
 8015e14:	0004      	movs	r4, r0
 8015e16:	000d      	movs	r5, r1
 8015e18:	9310      	str	r3, [sp, #64]	; 0x40
 8015e1a:	e7be      	b.n	8015d9a <_dtoa_r+0x562>
 8015e1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e20:	f7ec f93c 	bl	800209c <__aeabi_dmul>
 8015e24:	9a05      	ldr	r2, [sp, #20]
 8015e26:	9b05      	ldr	r3, [sp, #20]
 8015e28:	4694      	mov	ip, r2
 8015e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015e2c:	9b07      	ldr	r3, [sp, #28]
 8015e2e:	9010      	str	r0, [sp, #64]	; 0x40
 8015e30:	9111      	str	r1, [sp, #68]	; 0x44
 8015e32:	4463      	add	r3, ip
 8015e34:	9319      	str	r3, [sp, #100]	; 0x64
 8015e36:	0029      	movs	r1, r5
 8015e38:	0020      	movs	r0, r4
 8015e3a:	f7ec ff4b 	bl	8002cd4 <__aeabi_d2iz>
 8015e3e:	9017      	str	r0, [sp, #92]	; 0x5c
 8015e40:	f7ec ff7e 	bl	8002d40 <__aeabi_i2d>
 8015e44:	0002      	movs	r2, r0
 8015e46:	000b      	movs	r3, r1
 8015e48:	0020      	movs	r0, r4
 8015e4a:	0029      	movs	r1, r5
 8015e4c:	f7ec fb92 	bl	8002574 <__aeabi_dsub>
 8015e50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e54:	3330      	adds	r3, #48	; 0x30
 8015e56:	7013      	strb	r3, [r2, #0]
 8015e58:	0013      	movs	r3, r2
 8015e5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	0004      	movs	r4, r0
 8015e60:	000d      	movs	r5, r1
 8015e62:	930a      	str	r3, [sp, #40]	; 0x28
 8015e64:	4293      	cmp	r3, r2
 8015e66:	d12c      	bne.n	8015ec2 <_dtoa_r+0x68a>
 8015e68:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e6a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015e6c:	9a05      	ldr	r2, [sp, #20]
 8015e6e:	9b07      	ldr	r3, [sp, #28]
 8015e70:	4694      	mov	ip, r2
 8015e72:	4463      	add	r3, ip
 8015e74:	2200      	movs	r2, #0
 8015e76:	9307      	str	r3, [sp, #28]
 8015e78:	4b1d      	ldr	r3, [pc, #116]	; (8015ef0 <_dtoa_r+0x6b8>)
 8015e7a:	f7eb f99f 	bl	80011bc <__aeabi_dadd>
 8015e7e:	0002      	movs	r2, r0
 8015e80:	000b      	movs	r3, r1
 8015e82:	0020      	movs	r0, r4
 8015e84:	0029      	movs	r1, r5
 8015e86:	f7ea fb03 	bl	8000490 <__aeabi_dcmpgt>
 8015e8a:	2800      	cmp	r0, #0
 8015e8c:	d000      	beq.n	8015e90 <_dtoa_r+0x658>
 8015e8e:	e07f      	b.n	8015f90 <_dtoa_r+0x758>
 8015e90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e94:	2000      	movs	r0, #0
 8015e96:	4916      	ldr	r1, [pc, #88]	; (8015ef0 <_dtoa_r+0x6b8>)
 8015e98:	f7ec fb6c 	bl	8002574 <__aeabi_dsub>
 8015e9c:	0002      	movs	r2, r0
 8015e9e:	000b      	movs	r3, r1
 8015ea0:	0020      	movs	r0, r4
 8015ea2:	0029      	movs	r1, r5
 8015ea4:	f7ea fae0 	bl	8000468 <__aeabi_dcmplt>
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d100      	bne.n	8015eae <_dtoa_r+0x676>
 8015eac:	e714      	b.n	8015cd8 <_dtoa_r+0x4a0>
 8015eae:	9b07      	ldr	r3, [sp, #28]
 8015eb0:	001a      	movs	r2, r3
 8015eb2:	3a01      	subs	r2, #1
 8015eb4:	9207      	str	r2, [sp, #28]
 8015eb6:	7812      	ldrb	r2, [r2, #0]
 8015eb8:	2a30      	cmp	r2, #48	; 0x30
 8015eba:	d0f8      	beq.n	8015eae <_dtoa_r+0x676>
 8015ebc:	9307      	str	r3, [sp, #28]
 8015ebe:	9602      	str	r6, [sp, #8]
 8015ec0:	e054      	b.n	8015f6c <_dtoa_r+0x734>
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	4b05      	ldr	r3, [pc, #20]	; (8015edc <_dtoa_r+0x6a4>)
 8015ec6:	f7ec f8e9 	bl	800209c <__aeabi_dmul>
 8015eca:	0004      	movs	r4, r0
 8015ecc:	000d      	movs	r5, r1
 8015ece:	e7b2      	b.n	8015e36 <_dtoa_r+0x5fe>
 8015ed0:	0801b928 	.word	0x0801b928
 8015ed4:	0801b900 	.word	0x0801b900
 8015ed8:	3ff00000 	.word	0x3ff00000
 8015edc:	40240000 	.word	0x40240000
 8015ee0:	401c0000 	.word	0x401c0000
 8015ee4:	fcc00000 	.word	0xfcc00000
 8015ee8:	40140000 	.word	0x40140000
 8015eec:	7cc00000 	.word	0x7cc00000
 8015ef0:	3fe00000 	.word	0x3fe00000
 8015ef4:	9b06      	ldr	r3, [sp, #24]
 8015ef6:	9e05      	ldr	r6, [sp, #20]
 8015ef8:	3b01      	subs	r3, #1
 8015efa:	199b      	adds	r3, r3, r6
 8015efc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015efe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015f00:	930a      	str	r3, [sp, #40]	; 0x28
 8015f02:	9a08      	ldr	r2, [sp, #32]
 8015f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f06:	0020      	movs	r0, r4
 8015f08:	0029      	movs	r1, r5
 8015f0a:	f7eb fcc1 	bl	8001890 <__aeabi_ddiv>
 8015f0e:	f7ec fee1 	bl	8002cd4 <__aeabi_d2iz>
 8015f12:	9006      	str	r0, [sp, #24]
 8015f14:	f7ec ff14 	bl	8002d40 <__aeabi_i2d>
 8015f18:	9a08      	ldr	r2, [sp, #32]
 8015f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f1c:	f7ec f8be 	bl	800209c <__aeabi_dmul>
 8015f20:	0002      	movs	r2, r0
 8015f22:	000b      	movs	r3, r1
 8015f24:	0020      	movs	r0, r4
 8015f26:	0029      	movs	r1, r5
 8015f28:	f7ec fb24 	bl	8002574 <__aeabi_dsub>
 8015f2c:	0033      	movs	r3, r6
 8015f2e:	9a06      	ldr	r2, [sp, #24]
 8015f30:	3601      	adds	r6, #1
 8015f32:	3230      	adds	r2, #48	; 0x30
 8015f34:	701a      	strb	r2, [r3, #0]
 8015f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015f38:	9607      	str	r6, [sp, #28]
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d139      	bne.n	8015fb2 <_dtoa_r+0x77a>
 8015f3e:	0002      	movs	r2, r0
 8015f40:	000b      	movs	r3, r1
 8015f42:	f7eb f93b 	bl	80011bc <__aeabi_dadd>
 8015f46:	9a08      	ldr	r2, [sp, #32]
 8015f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f4a:	0004      	movs	r4, r0
 8015f4c:	000d      	movs	r5, r1
 8015f4e:	f7ea fa9f 	bl	8000490 <__aeabi_dcmpgt>
 8015f52:	2800      	cmp	r0, #0
 8015f54:	d11b      	bne.n	8015f8e <_dtoa_r+0x756>
 8015f56:	9a08      	ldr	r2, [sp, #32]
 8015f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f5a:	0020      	movs	r0, r4
 8015f5c:	0029      	movs	r1, r5
 8015f5e:	f7ea fa7d 	bl	800045c <__aeabi_dcmpeq>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	d002      	beq.n	8015f6c <_dtoa_r+0x734>
 8015f66:	9b06      	ldr	r3, [sp, #24]
 8015f68:	07db      	lsls	r3, r3, #31
 8015f6a:	d410      	bmi.n	8015f8e <_dtoa_r+0x756>
 8015f6c:	0038      	movs	r0, r7
 8015f6e:	9904      	ldr	r1, [sp, #16]
 8015f70:	f000 fe7e 	bl	8016c70 <_Bfree>
 8015f74:	2300      	movs	r3, #0
 8015f76:	9a07      	ldr	r2, [sp, #28]
 8015f78:	9802      	ldr	r0, [sp, #8]
 8015f7a:	7013      	strb	r3, [r2, #0]
 8015f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015f7e:	3001      	adds	r0, #1
 8015f80:	6018      	str	r0, [r3, #0]
 8015f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d100      	bne.n	8015f8a <_dtoa_r+0x752>
 8015f88:	e4a3      	b.n	80158d2 <_dtoa_r+0x9a>
 8015f8a:	601a      	str	r2, [r3, #0]
 8015f8c:	e4a1      	b.n	80158d2 <_dtoa_r+0x9a>
 8015f8e:	9e02      	ldr	r6, [sp, #8]
 8015f90:	9b07      	ldr	r3, [sp, #28]
 8015f92:	9307      	str	r3, [sp, #28]
 8015f94:	3b01      	subs	r3, #1
 8015f96:	781a      	ldrb	r2, [r3, #0]
 8015f98:	2a39      	cmp	r2, #57	; 0x39
 8015f9a:	d106      	bne.n	8015faa <_dtoa_r+0x772>
 8015f9c:	9a05      	ldr	r2, [sp, #20]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d1f7      	bne.n	8015f92 <_dtoa_r+0x75a>
 8015fa2:	2230      	movs	r2, #48	; 0x30
 8015fa4:	9905      	ldr	r1, [sp, #20]
 8015fa6:	3601      	adds	r6, #1
 8015fa8:	700a      	strb	r2, [r1, #0]
 8015faa:	781a      	ldrb	r2, [r3, #0]
 8015fac:	3201      	adds	r2, #1
 8015fae:	701a      	strb	r2, [r3, #0]
 8015fb0:	e785      	b.n	8015ebe <_dtoa_r+0x686>
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	4bad      	ldr	r3, [pc, #692]	; (801626c <_dtoa_r+0xa34>)
 8015fb6:	f7ec f871 	bl	800209c <__aeabi_dmul>
 8015fba:	2200      	movs	r2, #0
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	0004      	movs	r4, r0
 8015fc0:	000d      	movs	r5, r1
 8015fc2:	f7ea fa4b 	bl	800045c <__aeabi_dcmpeq>
 8015fc6:	2800      	cmp	r0, #0
 8015fc8:	d09b      	beq.n	8015f02 <_dtoa_r+0x6ca>
 8015fca:	e7cf      	b.n	8015f6c <_dtoa_r+0x734>
 8015fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fce:	2a00      	cmp	r2, #0
 8015fd0:	d100      	bne.n	8015fd4 <_dtoa_r+0x79c>
 8015fd2:	e082      	b.n	80160da <_dtoa_r+0x8a2>
 8015fd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015fd6:	2a01      	cmp	r2, #1
 8015fd8:	dc66      	bgt.n	80160a8 <_dtoa_r+0x870>
 8015fda:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015fdc:	2a00      	cmp	r2, #0
 8015fde:	d05f      	beq.n	80160a0 <_dtoa_r+0x868>
 8015fe0:	4aa3      	ldr	r2, [pc, #652]	; (8016270 <_dtoa_r+0xa38>)
 8015fe2:	189b      	adds	r3, r3, r2
 8015fe4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015fe6:	9c08      	ldr	r4, [sp, #32]
 8015fe8:	9a08      	ldr	r2, [sp, #32]
 8015fea:	2101      	movs	r1, #1
 8015fec:	18d2      	adds	r2, r2, r3
 8015fee:	9208      	str	r2, [sp, #32]
 8015ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015ff2:	0038      	movs	r0, r7
 8015ff4:	18d3      	adds	r3, r2, r3
 8015ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8015ff8:	f000 ff36 	bl	8016e68 <__i2b>
 8015ffc:	0005      	movs	r5, r0
 8015ffe:	2c00      	cmp	r4, #0
 8016000:	dd0e      	ble.n	8016020 <_dtoa_r+0x7e8>
 8016002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016004:	2b00      	cmp	r3, #0
 8016006:	dd0b      	ble.n	8016020 <_dtoa_r+0x7e8>
 8016008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801600a:	0023      	movs	r3, r4
 801600c:	4294      	cmp	r4, r2
 801600e:	dd00      	ble.n	8016012 <_dtoa_r+0x7da>
 8016010:	0013      	movs	r3, r2
 8016012:	9a08      	ldr	r2, [sp, #32]
 8016014:	1ae4      	subs	r4, r4, r3
 8016016:	1ad2      	subs	r2, r2, r3
 8016018:	9208      	str	r2, [sp, #32]
 801601a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	930d      	str	r3, [sp, #52]	; 0x34
 8016020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016022:	2b00      	cmp	r3, #0
 8016024:	d01f      	beq.n	8016066 <_dtoa_r+0x82e>
 8016026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016028:	2b00      	cmp	r3, #0
 801602a:	d05a      	beq.n	80160e2 <_dtoa_r+0x8aa>
 801602c:	2e00      	cmp	r6, #0
 801602e:	dd11      	ble.n	8016054 <_dtoa_r+0x81c>
 8016030:	0029      	movs	r1, r5
 8016032:	0032      	movs	r2, r6
 8016034:	0038      	movs	r0, r7
 8016036:	f000 ffdd 	bl	8016ff4 <__pow5mult>
 801603a:	9a04      	ldr	r2, [sp, #16]
 801603c:	0001      	movs	r1, r0
 801603e:	0005      	movs	r5, r0
 8016040:	0038      	movs	r0, r7
 8016042:	f000 ff27 	bl	8016e94 <__multiply>
 8016046:	9904      	ldr	r1, [sp, #16]
 8016048:	9007      	str	r0, [sp, #28]
 801604a:	0038      	movs	r0, r7
 801604c:	f000 fe10 	bl	8016c70 <_Bfree>
 8016050:	9b07      	ldr	r3, [sp, #28]
 8016052:	9304      	str	r3, [sp, #16]
 8016054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016056:	1b9a      	subs	r2, r3, r6
 8016058:	42b3      	cmp	r3, r6
 801605a:	d004      	beq.n	8016066 <_dtoa_r+0x82e>
 801605c:	0038      	movs	r0, r7
 801605e:	9904      	ldr	r1, [sp, #16]
 8016060:	f000 ffc8 	bl	8016ff4 <__pow5mult>
 8016064:	9004      	str	r0, [sp, #16]
 8016066:	2101      	movs	r1, #1
 8016068:	0038      	movs	r0, r7
 801606a:	f000 fefd 	bl	8016e68 <__i2b>
 801606e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016070:	0006      	movs	r6, r0
 8016072:	2b00      	cmp	r3, #0
 8016074:	dd37      	ble.n	80160e6 <_dtoa_r+0x8ae>
 8016076:	001a      	movs	r2, r3
 8016078:	0001      	movs	r1, r0
 801607a:	0038      	movs	r0, r7
 801607c:	f000 ffba 	bl	8016ff4 <__pow5mult>
 8016080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016082:	0006      	movs	r6, r0
 8016084:	2b01      	cmp	r3, #1
 8016086:	dd33      	ble.n	80160f0 <_dtoa_r+0x8b8>
 8016088:	2300      	movs	r3, #0
 801608a:	9307      	str	r3, [sp, #28]
 801608c:	6933      	ldr	r3, [r6, #16]
 801608e:	3303      	adds	r3, #3
 8016090:	009b      	lsls	r3, r3, #2
 8016092:	18f3      	adds	r3, r6, r3
 8016094:	6858      	ldr	r0, [r3, #4]
 8016096:	f000 fe9f 	bl	8016dd8 <__hi0bits>
 801609a:	2320      	movs	r3, #32
 801609c:	1a18      	subs	r0, r3, r0
 801609e:	e03f      	b.n	8016120 <_dtoa_r+0x8e8>
 80160a0:	2336      	movs	r3, #54	; 0x36
 80160a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80160a4:	1a9b      	subs	r3, r3, r2
 80160a6:	e79d      	b.n	8015fe4 <_dtoa_r+0x7ac>
 80160a8:	9b06      	ldr	r3, [sp, #24]
 80160aa:	1e5e      	subs	r6, r3, #1
 80160ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160ae:	42b3      	cmp	r3, r6
 80160b0:	db08      	blt.n	80160c4 <_dtoa_r+0x88c>
 80160b2:	1b9e      	subs	r6, r3, r6
 80160b4:	9b06      	ldr	r3, [sp, #24]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	da0c      	bge.n	80160d4 <_dtoa_r+0x89c>
 80160ba:	9b08      	ldr	r3, [sp, #32]
 80160bc:	9a06      	ldr	r2, [sp, #24]
 80160be:	1a9c      	subs	r4, r3, r2
 80160c0:	2300      	movs	r3, #0
 80160c2:	e791      	b.n	8015fe8 <_dtoa_r+0x7b0>
 80160c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160c8:	1af3      	subs	r3, r6, r3
 80160ca:	18d3      	adds	r3, r2, r3
 80160cc:	960e      	str	r6, [sp, #56]	; 0x38
 80160ce:	9314      	str	r3, [sp, #80]	; 0x50
 80160d0:	2600      	movs	r6, #0
 80160d2:	e7ef      	b.n	80160b4 <_dtoa_r+0x87c>
 80160d4:	9c08      	ldr	r4, [sp, #32]
 80160d6:	9b06      	ldr	r3, [sp, #24]
 80160d8:	e786      	b.n	8015fe8 <_dtoa_r+0x7b0>
 80160da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80160dc:	9c08      	ldr	r4, [sp, #32]
 80160de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80160e0:	e78d      	b.n	8015ffe <_dtoa_r+0x7c6>
 80160e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160e4:	e7ba      	b.n	801605c <_dtoa_r+0x824>
 80160e6:	2300      	movs	r3, #0
 80160e8:	9307      	str	r3, [sp, #28]
 80160ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80160ec:	2b01      	cmp	r3, #1
 80160ee:	dc13      	bgt.n	8016118 <_dtoa_r+0x8e0>
 80160f0:	2300      	movs	r3, #0
 80160f2:	9307      	str	r3, [sp, #28]
 80160f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d10e      	bne.n	8016118 <_dtoa_r+0x8e0>
 80160fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160fc:	031b      	lsls	r3, r3, #12
 80160fe:	d10b      	bne.n	8016118 <_dtoa_r+0x8e0>
 8016100:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016104:	4213      	tst	r3, r2
 8016106:	d007      	beq.n	8016118 <_dtoa_r+0x8e0>
 8016108:	9b08      	ldr	r3, [sp, #32]
 801610a:	3301      	adds	r3, #1
 801610c:	9308      	str	r3, [sp, #32]
 801610e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016110:	3301      	adds	r3, #1
 8016112:	930d      	str	r3, [sp, #52]	; 0x34
 8016114:	2301      	movs	r3, #1
 8016116:	9307      	str	r3, [sp, #28]
 8016118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801611a:	2001      	movs	r0, #1
 801611c:	2b00      	cmp	r3, #0
 801611e:	d1b5      	bne.n	801608c <_dtoa_r+0x854>
 8016120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016122:	221f      	movs	r2, #31
 8016124:	1818      	adds	r0, r3, r0
 8016126:	0003      	movs	r3, r0
 8016128:	4013      	ands	r3, r2
 801612a:	4210      	tst	r0, r2
 801612c:	d046      	beq.n	80161bc <_dtoa_r+0x984>
 801612e:	3201      	adds	r2, #1
 8016130:	1ad2      	subs	r2, r2, r3
 8016132:	2a04      	cmp	r2, #4
 8016134:	dd3f      	ble.n	80161b6 <_dtoa_r+0x97e>
 8016136:	221c      	movs	r2, #28
 8016138:	1ad3      	subs	r3, r2, r3
 801613a:	9a08      	ldr	r2, [sp, #32]
 801613c:	18e4      	adds	r4, r4, r3
 801613e:	18d2      	adds	r2, r2, r3
 8016140:	9208      	str	r2, [sp, #32]
 8016142:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016144:	18d3      	adds	r3, r2, r3
 8016146:	930d      	str	r3, [sp, #52]	; 0x34
 8016148:	9b08      	ldr	r3, [sp, #32]
 801614a:	2b00      	cmp	r3, #0
 801614c:	dd05      	ble.n	801615a <_dtoa_r+0x922>
 801614e:	001a      	movs	r2, r3
 8016150:	0038      	movs	r0, r7
 8016152:	9904      	ldr	r1, [sp, #16]
 8016154:	f000 ffaa 	bl	80170ac <__lshift>
 8016158:	9004      	str	r0, [sp, #16]
 801615a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801615c:	2b00      	cmp	r3, #0
 801615e:	dd05      	ble.n	801616c <_dtoa_r+0x934>
 8016160:	0031      	movs	r1, r6
 8016162:	001a      	movs	r2, r3
 8016164:	0038      	movs	r0, r7
 8016166:	f000 ffa1 	bl	80170ac <__lshift>
 801616a:	0006      	movs	r6, r0
 801616c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801616e:	2b00      	cmp	r3, #0
 8016170:	d026      	beq.n	80161c0 <_dtoa_r+0x988>
 8016172:	0031      	movs	r1, r6
 8016174:	9804      	ldr	r0, [sp, #16]
 8016176:	f001 f809 	bl	801718c <__mcmp>
 801617a:	2800      	cmp	r0, #0
 801617c:	da20      	bge.n	80161c0 <_dtoa_r+0x988>
 801617e:	9b02      	ldr	r3, [sp, #8]
 8016180:	220a      	movs	r2, #10
 8016182:	3b01      	subs	r3, #1
 8016184:	9302      	str	r3, [sp, #8]
 8016186:	0038      	movs	r0, r7
 8016188:	2300      	movs	r3, #0
 801618a:	9904      	ldr	r1, [sp, #16]
 801618c:	f000 fd94 	bl	8016cb8 <__multadd>
 8016190:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016192:	9004      	str	r0, [sp, #16]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d100      	bne.n	801619a <_dtoa_r+0x962>
 8016198:	e160      	b.n	801645c <_dtoa_r+0xc24>
 801619a:	2300      	movs	r3, #0
 801619c:	0029      	movs	r1, r5
 801619e:	220a      	movs	r2, #10
 80161a0:	0038      	movs	r0, r7
 80161a2:	f000 fd89 	bl	8016cb8 <__multadd>
 80161a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161a8:	0005      	movs	r5, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	dc47      	bgt.n	801623e <_dtoa_r+0xa06>
 80161ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80161b0:	2b02      	cmp	r3, #2
 80161b2:	dc0d      	bgt.n	80161d0 <_dtoa_r+0x998>
 80161b4:	e043      	b.n	801623e <_dtoa_r+0xa06>
 80161b6:	2a04      	cmp	r2, #4
 80161b8:	d0c6      	beq.n	8016148 <_dtoa_r+0x910>
 80161ba:	0013      	movs	r3, r2
 80161bc:	331c      	adds	r3, #28
 80161be:	e7bc      	b.n	801613a <_dtoa_r+0x902>
 80161c0:	9b06      	ldr	r3, [sp, #24]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	dc35      	bgt.n	8016232 <_dtoa_r+0x9fa>
 80161c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80161c8:	2b02      	cmp	r3, #2
 80161ca:	dd32      	ble.n	8016232 <_dtoa_r+0x9fa>
 80161cc:	9b06      	ldr	r3, [sp, #24]
 80161ce:	930c      	str	r3, [sp, #48]	; 0x30
 80161d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d10c      	bne.n	80161f0 <_dtoa_r+0x9b8>
 80161d6:	0031      	movs	r1, r6
 80161d8:	2205      	movs	r2, #5
 80161da:	0038      	movs	r0, r7
 80161dc:	f000 fd6c 	bl	8016cb8 <__multadd>
 80161e0:	0006      	movs	r6, r0
 80161e2:	0001      	movs	r1, r0
 80161e4:	9804      	ldr	r0, [sp, #16]
 80161e6:	f000 ffd1 	bl	801718c <__mcmp>
 80161ea:	2800      	cmp	r0, #0
 80161ec:	dd00      	ble.n	80161f0 <_dtoa_r+0x9b8>
 80161ee:	e59f      	b.n	8015d30 <_dtoa_r+0x4f8>
 80161f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80161f2:	43db      	mvns	r3, r3
 80161f4:	9302      	str	r3, [sp, #8]
 80161f6:	9b05      	ldr	r3, [sp, #20]
 80161f8:	9307      	str	r3, [sp, #28]
 80161fa:	2400      	movs	r4, #0
 80161fc:	0031      	movs	r1, r6
 80161fe:	0038      	movs	r0, r7
 8016200:	f000 fd36 	bl	8016c70 <_Bfree>
 8016204:	2d00      	cmp	r5, #0
 8016206:	d100      	bne.n	801620a <_dtoa_r+0x9d2>
 8016208:	e6b0      	b.n	8015f6c <_dtoa_r+0x734>
 801620a:	2c00      	cmp	r4, #0
 801620c:	d005      	beq.n	801621a <_dtoa_r+0x9e2>
 801620e:	42ac      	cmp	r4, r5
 8016210:	d003      	beq.n	801621a <_dtoa_r+0x9e2>
 8016212:	0021      	movs	r1, r4
 8016214:	0038      	movs	r0, r7
 8016216:	f000 fd2b 	bl	8016c70 <_Bfree>
 801621a:	0029      	movs	r1, r5
 801621c:	0038      	movs	r0, r7
 801621e:	f000 fd27 	bl	8016c70 <_Bfree>
 8016222:	e6a3      	b.n	8015f6c <_dtoa_r+0x734>
 8016224:	2600      	movs	r6, #0
 8016226:	0035      	movs	r5, r6
 8016228:	e7e2      	b.n	80161f0 <_dtoa_r+0x9b8>
 801622a:	9602      	str	r6, [sp, #8]
 801622c:	9e07      	ldr	r6, [sp, #28]
 801622e:	0035      	movs	r5, r6
 8016230:	e57e      	b.n	8015d30 <_dtoa_r+0x4f8>
 8016232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016234:	2b00      	cmp	r3, #0
 8016236:	d100      	bne.n	801623a <_dtoa_r+0xa02>
 8016238:	e0c8      	b.n	80163cc <_dtoa_r+0xb94>
 801623a:	9b06      	ldr	r3, [sp, #24]
 801623c:	930c      	str	r3, [sp, #48]	; 0x30
 801623e:	2c00      	cmp	r4, #0
 8016240:	dd05      	ble.n	801624e <_dtoa_r+0xa16>
 8016242:	0029      	movs	r1, r5
 8016244:	0022      	movs	r2, r4
 8016246:	0038      	movs	r0, r7
 8016248:	f000 ff30 	bl	80170ac <__lshift>
 801624c:	0005      	movs	r5, r0
 801624e:	9b07      	ldr	r3, [sp, #28]
 8016250:	0028      	movs	r0, r5
 8016252:	2b00      	cmp	r3, #0
 8016254:	d01f      	beq.n	8016296 <_dtoa_r+0xa5e>
 8016256:	0038      	movs	r0, r7
 8016258:	6869      	ldr	r1, [r5, #4]
 801625a:	f000 fcc5 	bl	8016be8 <_Balloc>
 801625e:	1e04      	subs	r4, r0, #0
 8016260:	d10c      	bne.n	801627c <_dtoa_r+0xa44>
 8016262:	0002      	movs	r2, r0
 8016264:	4b03      	ldr	r3, [pc, #12]	; (8016274 <_dtoa_r+0xa3c>)
 8016266:	4904      	ldr	r1, [pc, #16]	; (8016278 <_dtoa_r+0xa40>)
 8016268:	f7ff fafb 	bl	8015862 <_dtoa_r+0x2a>
 801626c:	40240000 	.word	0x40240000
 8016270:	00000433 	.word	0x00000433
 8016274:	0801b811 	.word	0x0801b811
 8016278:	000002ea 	.word	0x000002ea
 801627c:	0029      	movs	r1, r5
 801627e:	692b      	ldr	r3, [r5, #16]
 8016280:	310c      	adds	r1, #12
 8016282:	1c9a      	adds	r2, r3, #2
 8016284:	0092      	lsls	r2, r2, #2
 8016286:	300c      	adds	r0, #12
 8016288:	f7fd fcba 	bl	8013c00 <memcpy>
 801628c:	2201      	movs	r2, #1
 801628e:	0021      	movs	r1, r4
 8016290:	0038      	movs	r0, r7
 8016292:	f000 ff0b 	bl	80170ac <__lshift>
 8016296:	002c      	movs	r4, r5
 8016298:	0005      	movs	r5, r0
 801629a:	9b05      	ldr	r3, [sp, #20]
 801629c:	9308      	str	r3, [sp, #32]
 801629e:	0031      	movs	r1, r6
 80162a0:	9804      	ldr	r0, [sp, #16]
 80162a2:	f7ff fa3d 	bl	8015720 <quorem>
 80162a6:	0003      	movs	r3, r0
 80162a8:	0021      	movs	r1, r4
 80162aa:	3330      	adds	r3, #48	; 0x30
 80162ac:	900e      	str	r0, [sp, #56]	; 0x38
 80162ae:	9804      	ldr	r0, [sp, #16]
 80162b0:	9306      	str	r3, [sp, #24]
 80162b2:	f000 ff6b 	bl	801718c <__mcmp>
 80162b6:	002a      	movs	r2, r5
 80162b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80162ba:	0031      	movs	r1, r6
 80162bc:	0038      	movs	r0, r7
 80162be:	f000 ff81 	bl	80171c4 <__mdiff>
 80162c2:	68c3      	ldr	r3, [r0, #12]
 80162c4:	9007      	str	r0, [sp, #28]
 80162c6:	9310      	str	r3, [sp, #64]	; 0x40
 80162c8:	2301      	movs	r3, #1
 80162ca:	930d      	str	r3, [sp, #52]	; 0x34
 80162cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d104      	bne.n	80162dc <_dtoa_r+0xaa4>
 80162d2:	0001      	movs	r1, r0
 80162d4:	9804      	ldr	r0, [sp, #16]
 80162d6:	f000 ff59 	bl	801718c <__mcmp>
 80162da:	900d      	str	r0, [sp, #52]	; 0x34
 80162dc:	0038      	movs	r0, r7
 80162de:	9907      	ldr	r1, [sp, #28]
 80162e0:	f000 fcc6 	bl	8016c70 <_Bfree>
 80162e4:	2301      	movs	r3, #1
 80162e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80162ea:	4018      	ands	r0, r3
 80162ec:	9b08      	ldr	r3, [sp, #32]
 80162ee:	3301      	adds	r3, #1
 80162f0:	9307      	str	r3, [sp, #28]
 80162f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80162f4:	4313      	orrs	r3, r2
 80162f6:	4303      	orrs	r3, r0
 80162f8:	d10c      	bne.n	8016314 <_dtoa_r+0xadc>
 80162fa:	9b06      	ldr	r3, [sp, #24]
 80162fc:	2b39      	cmp	r3, #57	; 0x39
 80162fe:	d025      	beq.n	801634c <_dtoa_r+0xb14>
 8016300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016302:	2b00      	cmp	r3, #0
 8016304:	dd02      	ble.n	801630c <_dtoa_r+0xad4>
 8016306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016308:	3331      	adds	r3, #49	; 0x31
 801630a:	9306      	str	r3, [sp, #24]
 801630c:	9b08      	ldr	r3, [sp, #32]
 801630e:	9a06      	ldr	r2, [sp, #24]
 8016310:	701a      	strb	r2, [r3, #0]
 8016312:	e773      	b.n	80161fc <_dtoa_r+0x9c4>
 8016314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016316:	2b00      	cmp	r3, #0
 8016318:	db03      	blt.n	8016322 <_dtoa_r+0xaea>
 801631a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801631c:	4313      	orrs	r3, r2
 801631e:	4303      	orrs	r3, r0
 8016320:	d11f      	bne.n	8016362 <_dtoa_r+0xb2a>
 8016322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016324:	2b00      	cmp	r3, #0
 8016326:	ddf1      	ble.n	801630c <_dtoa_r+0xad4>
 8016328:	9904      	ldr	r1, [sp, #16]
 801632a:	2201      	movs	r2, #1
 801632c:	0038      	movs	r0, r7
 801632e:	f000 febd 	bl	80170ac <__lshift>
 8016332:	0031      	movs	r1, r6
 8016334:	9004      	str	r0, [sp, #16]
 8016336:	f000 ff29 	bl	801718c <__mcmp>
 801633a:	2800      	cmp	r0, #0
 801633c:	dc03      	bgt.n	8016346 <_dtoa_r+0xb0e>
 801633e:	d1e5      	bne.n	801630c <_dtoa_r+0xad4>
 8016340:	9b06      	ldr	r3, [sp, #24]
 8016342:	07db      	lsls	r3, r3, #31
 8016344:	d5e2      	bpl.n	801630c <_dtoa_r+0xad4>
 8016346:	9b06      	ldr	r3, [sp, #24]
 8016348:	2b39      	cmp	r3, #57	; 0x39
 801634a:	d1dc      	bne.n	8016306 <_dtoa_r+0xace>
 801634c:	2339      	movs	r3, #57	; 0x39
 801634e:	9a08      	ldr	r2, [sp, #32]
 8016350:	7013      	strb	r3, [r2, #0]
 8016352:	9b07      	ldr	r3, [sp, #28]
 8016354:	9307      	str	r3, [sp, #28]
 8016356:	3b01      	subs	r3, #1
 8016358:	781a      	ldrb	r2, [r3, #0]
 801635a:	2a39      	cmp	r2, #57	; 0x39
 801635c:	d06c      	beq.n	8016438 <_dtoa_r+0xc00>
 801635e:	3201      	adds	r2, #1
 8016360:	e7d6      	b.n	8016310 <_dtoa_r+0xad8>
 8016362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016364:	2b00      	cmp	r3, #0
 8016366:	dd07      	ble.n	8016378 <_dtoa_r+0xb40>
 8016368:	9b06      	ldr	r3, [sp, #24]
 801636a:	2b39      	cmp	r3, #57	; 0x39
 801636c:	d0ee      	beq.n	801634c <_dtoa_r+0xb14>
 801636e:	9b06      	ldr	r3, [sp, #24]
 8016370:	9a08      	ldr	r2, [sp, #32]
 8016372:	3301      	adds	r3, #1
 8016374:	7013      	strb	r3, [r2, #0]
 8016376:	e741      	b.n	80161fc <_dtoa_r+0x9c4>
 8016378:	9b08      	ldr	r3, [sp, #32]
 801637a:	9a06      	ldr	r2, [sp, #24]
 801637c:	701a      	strb	r2, [r3, #0]
 801637e:	2301      	movs	r3, #1
 8016380:	9a05      	ldr	r2, [sp, #20]
 8016382:	1a9b      	subs	r3, r3, r2
 8016384:	9a08      	ldr	r2, [sp, #32]
 8016386:	189b      	adds	r3, r3, r2
 8016388:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801638a:	429a      	cmp	r2, r3
 801638c:	d03e      	beq.n	801640c <_dtoa_r+0xbd4>
 801638e:	2300      	movs	r3, #0
 8016390:	220a      	movs	r2, #10
 8016392:	9904      	ldr	r1, [sp, #16]
 8016394:	0038      	movs	r0, r7
 8016396:	f000 fc8f 	bl	8016cb8 <__multadd>
 801639a:	2300      	movs	r3, #0
 801639c:	9004      	str	r0, [sp, #16]
 801639e:	220a      	movs	r2, #10
 80163a0:	0021      	movs	r1, r4
 80163a2:	0038      	movs	r0, r7
 80163a4:	42ac      	cmp	r4, r5
 80163a6:	d106      	bne.n	80163b6 <_dtoa_r+0xb7e>
 80163a8:	f000 fc86 	bl	8016cb8 <__multadd>
 80163ac:	0004      	movs	r4, r0
 80163ae:	0005      	movs	r5, r0
 80163b0:	9b07      	ldr	r3, [sp, #28]
 80163b2:	9308      	str	r3, [sp, #32]
 80163b4:	e773      	b.n	801629e <_dtoa_r+0xa66>
 80163b6:	f000 fc7f 	bl	8016cb8 <__multadd>
 80163ba:	0029      	movs	r1, r5
 80163bc:	0004      	movs	r4, r0
 80163be:	2300      	movs	r3, #0
 80163c0:	220a      	movs	r2, #10
 80163c2:	0038      	movs	r0, r7
 80163c4:	f000 fc78 	bl	8016cb8 <__multadd>
 80163c8:	0005      	movs	r5, r0
 80163ca:	e7f1      	b.n	80163b0 <_dtoa_r+0xb78>
 80163cc:	9b06      	ldr	r3, [sp, #24]
 80163ce:	930c      	str	r3, [sp, #48]	; 0x30
 80163d0:	2400      	movs	r4, #0
 80163d2:	0031      	movs	r1, r6
 80163d4:	9804      	ldr	r0, [sp, #16]
 80163d6:	f7ff f9a3 	bl	8015720 <quorem>
 80163da:	9b05      	ldr	r3, [sp, #20]
 80163dc:	3030      	adds	r0, #48	; 0x30
 80163de:	5518      	strb	r0, [r3, r4]
 80163e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163e2:	3401      	adds	r4, #1
 80163e4:	9006      	str	r0, [sp, #24]
 80163e6:	42a3      	cmp	r3, r4
 80163e8:	dd07      	ble.n	80163fa <_dtoa_r+0xbc2>
 80163ea:	2300      	movs	r3, #0
 80163ec:	220a      	movs	r2, #10
 80163ee:	0038      	movs	r0, r7
 80163f0:	9904      	ldr	r1, [sp, #16]
 80163f2:	f000 fc61 	bl	8016cb8 <__multadd>
 80163f6:	9004      	str	r0, [sp, #16]
 80163f8:	e7eb      	b.n	80163d2 <_dtoa_r+0xb9a>
 80163fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163fc:	2001      	movs	r0, #1
 80163fe:	2b00      	cmp	r3, #0
 8016400:	dd00      	ble.n	8016404 <_dtoa_r+0xbcc>
 8016402:	0018      	movs	r0, r3
 8016404:	2400      	movs	r4, #0
 8016406:	9b05      	ldr	r3, [sp, #20]
 8016408:	181b      	adds	r3, r3, r0
 801640a:	9307      	str	r3, [sp, #28]
 801640c:	9904      	ldr	r1, [sp, #16]
 801640e:	2201      	movs	r2, #1
 8016410:	0038      	movs	r0, r7
 8016412:	f000 fe4b 	bl	80170ac <__lshift>
 8016416:	0031      	movs	r1, r6
 8016418:	9004      	str	r0, [sp, #16]
 801641a:	f000 feb7 	bl	801718c <__mcmp>
 801641e:	2800      	cmp	r0, #0
 8016420:	dc97      	bgt.n	8016352 <_dtoa_r+0xb1a>
 8016422:	d102      	bne.n	801642a <_dtoa_r+0xbf2>
 8016424:	9b06      	ldr	r3, [sp, #24]
 8016426:	07db      	lsls	r3, r3, #31
 8016428:	d493      	bmi.n	8016352 <_dtoa_r+0xb1a>
 801642a:	9b07      	ldr	r3, [sp, #28]
 801642c:	9307      	str	r3, [sp, #28]
 801642e:	3b01      	subs	r3, #1
 8016430:	781a      	ldrb	r2, [r3, #0]
 8016432:	2a30      	cmp	r2, #48	; 0x30
 8016434:	d0fa      	beq.n	801642c <_dtoa_r+0xbf4>
 8016436:	e6e1      	b.n	80161fc <_dtoa_r+0x9c4>
 8016438:	9a05      	ldr	r2, [sp, #20]
 801643a:	429a      	cmp	r2, r3
 801643c:	d18a      	bne.n	8016354 <_dtoa_r+0xb1c>
 801643e:	9b02      	ldr	r3, [sp, #8]
 8016440:	3301      	adds	r3, #1
 8016442:	9302      	str	r3, [sp, #8]
 8016444:	2331      	movs	r3, #49	; 0x31
 8016446:	e795      	b.n	8016374 <_dtoa_r+0xb3c>
 8016448:	4b08      	ldr	r3, [pc, #32]	; (801646c <_dtoa_r+0xc34>)
 801644a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801644c:	9305      	str	r3, [sp, #20]
 801644e:	4b08      	ldr	r3, [pc, #32]	; (8016470 <_dtoa_r+0xc38>)
 8016450:	2a00      	cmp	r2, #0
 8016452:	d001      	beq.n	8016458 <_dtoa_r+0xc20>
 8016454:	f7ff fa3b 	bl	80158ce <_dtoa_r+0x96>
 8016458:	f7ff fa3b 	bl	80158d2 <_dtoa_r+0x9a>
 801645c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801645e:	2b00      	cmp	r3, #0
 8016460:	dcb6      	bgt.n	80163d0 <_dtoa_r+0xb98>
 8016462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016464:	2b02      	cmp	r3, #2
 8016466:	dd00      	ble.n	801646a <_dtoa_r+0xc32>
 8016468:	e6b2      	b.n	80161d0 <_dtoa_r+0x998>
 801646a:	e7b1      	b.n	80163d0 <_dtoa_r+0xb98>
 801646c:	0801b7a5 	.word	0x0801b7a5
 8016470:	0801b7ad 	.word	0x0801b7ad

08016474 <__errno>:
 8016474:	4b01      	ldr	r3, [pc, #4]	; (801647c <__errno+0x8>)
 8016476:	6818      	ldr	r0, [r3, #0]
 8016478:	4770      	bx	lr
 801647a:	46c0      	nop			; (mov r8, r8)
 801647c:	200000c0 	.word	0x200000c0

08016480 <fiprintf>:
 8016480:	b40e      	push	{r1, r2, r3}
 8016482:	b503      	push	{r0, r1, lr}
 8016484:	0001      	movs	r1, r0
 8016486:	ab03      	add	r3, sp, #12
 8016488:	4804      	ldr	r0, [pc, #16]	; (801649c <fiprintf+0x1c>)
 801648a:	cb04      	ldmia	r3!, {r2}
 801648c:	6800      	ldr	r0, [r0, #0]
 801648e:	9301      	str	r3, [sp, #4]
 8016490:	f001 fa32 	bl	80178f8 <_vfiprintf_r>
 8016494:	b002      	add	sp, #8
 8016496:	bc08      	pop	{r3}
 8016498:	b003      	add	sp, #12
 801649a:	4718      	bx	r3
 801649c:	200000c0 	.word	0x200000c0

080164a0 <rshift>:
 80164a0:	0002      	movs	r2, r0
 80164a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164a4:	6907      	ldr	r7, [r0, #16]
 80164a6:	3214      	adds	r2, #20
 80164a8:	0013      	movs	r3, r2
 80164aa:	b085      	sub	sp, #20
 80164ac:	114e      	asrs	r6, r1, #5
 80164ae:	42b7      	cmp	r7, r6
 80164b0:	dd31      	ble.n	8016516 <rshift+0x76>
 80164b2:	00b3      	lsls	r3, r6, #2
 80164b4:	18d3      	adds	r3, r2, r3
 80164b6:	251f      	movs	r5, #31
 80164b8:	9301      	str	r3, [sp, #4]
 80164ba:	000b      	movs	r3, r1
 80164bc:	00bc      	lsls	r4, r7, #2
 80164be:	402b      	ands	r3, r5
 80164c0:	1914      	adds	r4, r2, r4
 80164c2:	9302      	str	r3, [sp, #8]
 80164c4:	4229      	tst	r1, r5
 80164c6:	d10c      	bne.n	80164e2 <rshift+0x42>
 80164c8:	0015      	movs	r5, r2
 80164ca:	9901      	ldr	r1, [sp, #4]
 80164cc:	428c      	cmp	r4, r1
 80164ce:	d838      	bhi.n	8016542 <rshift+0xa2>
 80164d0:	9901      	ldr	r1, [sp, #4]
 80164d2:	2300      	movs	r3, #0
 80164d4:	3903      	subs	r1, #3
 80164d6:	428c      	cmp	r4, r1
 80164d8:	d301      	bcc.n	80164de <rshift+0x3e>
 80164da:	1bbb      	subs	r3, r7, r6
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	18d3      	adds	r3, r2, r3
 80164e0:	e019      	b.n	8016516 <rshift+0x76>
 80164e2:	2120      	movs	r1, #32
 80164e4:	9b02      	ldr	r3, [sp, #8]
 80164e6:	9d01      	ldr	r5, [sp, #4]
 80164e8:	1acb      	subs	r3, r1, r3
 80164ea:	9303      	str	r3, [sp, #12]
 80164ec:	cd02      	ldmia	r5!, {r1}
 80164ee:	9b02      	ldr	r3, [sp, #8]
 80164f0:	4694      	mov	ip, r2
 80164f2:	40d9      	lsrs	r1, r3
 80164f4:	9100      	str	r1, [sp, #0]
 80164f6:	42ac      	cmp	r4, r5
 80164f8:	d816      	bhi.n	8016528 <rshift+0x88>
 80164fa:	9d01      	ldr	r5, [sp, #4]
 80164fc:	2300      	movs	r3, #0
 80164fe:	3501      	adds	r5, #1
 8016500:	42ac      	cmp	r4, r5
 8016502:	d302      	bcc.n	801650a <rshift+0x6a>
 8016504:	1bbb      	subs	r3, r7, r6
 8016506:	009b      	lsls	r3, r3, #2
 8016508:	3b04      	subs	r3, #4
 801650a:	9900      	ldr	r1, [sp, #0]
 801650c:	18d3      	adds	r3, r2, r3
 801650e:	6019      	str	r1, [r3, #0]
 8016510:	2900      	cmp	r1, #0
 8016512:	d000      	beq.n	8016516 <rshift+0x76>
 8016514:	3304      	adds	r3, #4
 8016516:	1a99      	subs	r1, r3, r2
 8016518:	1089      	asrs	r1, r1, #2
 801651a:	6101      	str	r1, [r0, #16]
 801651c:	4293      	cmp	r3, r2
 801651e:	d101      	bne.n	8016524 <rshift+0x84>
 8016520:	2300      	movs	r3, #0
 8016522:	6143      	str	r3, [r0, #20]
 8016524:	b005      	add	sp, #20
 8016526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016528:	682b      	ldr	r3, [r5, #0]
 801652a:	9903      	ldr	r1, [sp, #12]
 801652c:	408b      	lsls	r3, r1
 801652e:	9900      	ldr	r1, [sp, #0]
 8016530:	4319      	orrs	r1, r3
 8016532:	4663      	mov	r3, ip
 8016534:	c302      	stmia	r3!, {r1}
 8016536:	469c      	mov	ip, r3
 8016538:	cd02      	ldmia	r5!, {r1}
 801653a:	9b02      	ldr	r3, [sp, #8]
 801653c:	40d9      	lsrs	r1, r3
 801653e:	9100      	str	r1, [sp, #0]
 8016540:	e7d9      	b.n	80164f6 <rshift+0x56>
 8016542:	c908      	ldmia	r1!, {r3}
 8016544:	c508      	stmia	r5!, {r3}
 8016546:	e7c1      	b.n	80164cc <rshift+0x2c>

08016548 <__hexdig_fun>:
 8016548:	0002      	movs	r2, r0
 801654a:	3a30      	subs	r2, #48	; 0x30
 801654c:	0003      	movs	r3, r0
 801654e:	2a09      	cmp	r2, #9
 8016550:	d802      	bhi.n	8016558 <__hexdig_fun+0x10>
 8016552:	3b20      	subs	r3, #32
 8016554:	b2d8      	uxtb	r0, r3
 8016556:	4770      	bx	lr
 8016558:	0002      	movs	r2, r0
 801655a:	3a61      	subs	r2, #97	; 0x61
 801655c:	2a05      	cmp	r2, #5
 801655e:	d801      	bhi.n	8016564 <__hexdig_fun+0x1c>
 8016560:	3b47      	subs	r3, #71	; 0x47
 8016562:	e7f7      	b.n	8016554 <__hexdig_fun+0xc>
 8016564:	001a      	movs	r2, r3
 8016566:	3a41      	subs	r2, #65	; 0x41
 8016568:	2000      	movs	r0, #0
 801656a:	2a05      	cmp	r2, #5
 801656c:	d8f3      	bhi.n	8016556 <__hexdig_fun+0xe>
 801656e:	3b27      	subs	r3, #39	; 0x27
 8016570:	e7f0      	b.n	8016554 <__hexdig_fun+0xc>
	...

08016574 <__gethex>:
 8016574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016576:	b08d      	sub	sp, #52	; 0x34
 8016578:	930a      	str	r3, [sp, #40]	; 0x28
 801657a:	4bbd      	ldr	r3, [pc, #756]	; (8016870 <__gethex+0x2fc>)
 801657c:	9005      	str	r0, [sp, #20]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	9109      	str	r1, [sp, #36]	; 0x24
 8016582:	0018      	movs	r0, r3
 8016584:	9202      	str	r2, [sp, #8]
 8016586:	9307      	str	r3, [sp, #28]
 8016588:	f7e9 fdc6 	bl	8000118 <strlen>
 801658c:	2202      	movs	r2, #2
 801658e:	9b07      	ldr	r3, [sp, #28]
 8016590:	4252      	negs	r2, r2
 8016592:	181b      	adds	r3, r3, r0
 8016594:	3b01      	subs	r3, #1
 8016596:	781b      	ldrb	r3, [r3, #0]
 8016598:	9003      	str	r0, [sp, #12]
 801659a:	930b      	str	r3, [sp, #44]	; 0x2c
 801659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801659e:	6819      	ldr	r1, [r3, #0]
 80165a0:	1c8b      	adds	r3, r1, #2
 80165a2:	1a52      	subs	r2, r2, r1
 80165a4:	18d1      	adds	r1, r2, r3
 80165a6:	9301      	str	r3, [sp, #4]
 80165a8:	9108      	str	r1, [sp, #32]
 80165aa:	9901      	ldr	r1, [sp, #4]
 80165ac:	3301      	adds	r3, #1
 80165ae:	7808      	ldrb	r0, [r1, #0]
 80165b0:	2830      	cmp	r0, #48	; 0x30
 80165b2:	d0f7      	beq.n	80165a4 <__gethex+0x30>
 80165b4:	f7ff ffc8 	bl	8016548 <__hexdig_fun>
 80165b8:	1e04      	subs	r4, r0, #0
 80165ba:	d13e      	bne.n	801663a <__gethex+0xc6>
 80165bc:	9a03      	ldr	r2, [sp, #12]
 80165be:	9907      	ldr	r1, [sp, #28]
 80165c0:	9801      	ldr	r0, [sp, #4]
 80165c2:	f7fe f922 	bl	801480a <strncmp>
 80165c6:	1e07      	subs	r7, r0, #0
 80165c8:	d000      	beq.n	80165cc <__gethex+0x58>
 80165ca:	e06f      	b.n	80166ac <__gethex+0x138>
 80165cc:	9b01      	ldr	r3, [sp, #4]
 80165ce:	9a03      	ldr	r2, [sp, #12]
 80165d0:	5c98      	ldrb	r0, [r3, r2]
 80165d2:	189d      	adds	r5, r3, r2
 80165d4:	f7ff ffb8 	bl	8016548 <__hexdig_fun>
 80165d8:	2301      	movs	r3, #1
 80165da:	9304      	str	r3, [sp, #16]
 80165dc:	2800      	cmp	r0, #0
 80165de:	d034      	beq.n	801664a <__gethex+0xd6>
 80165e0:	9501      	str	r5, [sp, #4]
 80165e2:	9b01      	ldr	r3, [sp, #4]
 80165e4:	7818      	ldrb	r0, [r3, #0]
 80165e6:	2830      	cmp	r0, #48	; 0x30
 80165e8:	d009      	beq.n	80165fe <__gethex+0x8a>
 80165ea:	f7ff ffad 	bl	8016548 <__hexdig_fun>
 80165ee:	4243      	negs	r3, r0
 80165f0:	4143      	adcs	r3, r0
 80165f2:	9304      	str	r3, [sp, #16]
 80165f4:	2301      	movs	r3, #1
 80165f6:	002c      	movs	r4, r5
 80165f8:	9308      	str	r3, [sp, #32]
 80165fa:	9d01      	ldr	r5, [sp, #4]
 80165fc:	e004      	b.n	8016608 <__gethex+0x94>
 80165fe:	9b01      	ldr	r3, [sp, #4]
 8016600:	3301      	adds	r3, #1
 8016602:	9301      	str	r3, [sp, #4]
 8016604:	e7ed      	b.n	80165e2 <__gethex+0x6e>
 8016606:	3501      	adds	r5, #1
 8016608:	7828      	ldrb	r0, [r5, #0]
 801660a:	f7ff ff9d 	bl	8016548 <__hexdig_fun>
 801660e:	1e07      	subs	r7, r0, #0
 8016610:	d1f9      	bne.n	8016606 <__gethex+0x92>
 8016612:	0028      	movs	r0, r5
 8016614:	9a03      	ldr	r2, [sp, #12]
 8016616:	9907      	ldr	r1, [sp, #28]
 8016618:	f7fe f8f7 	bl	801480a <strncmp>
 801661c:	2800      	cmp	r0, #0
 801661e:	d112      	bne.n	8016646 <__gethex+0xd2>
 8016620:	2c00      	cmp	r4, #0
 8016622:	d107      	bne.n	8016634 <__gethex+0xc0>
 8016624:	9b03      	ldr	r3, [sp, #12]
 8016626:	18ed      	adds	r5, r5, r3
 8016628:	002c      	movs	r4, r5
 801662a:	7828      	ldrb	r0, [r5, #0]
 801662c:	f7ff ff8c 	bl	8016548 <__hexdig_fun>
 8016630:	2800      	cmp	r0, #0
 8016632:	d106      	bne.n	8016642 <__gethex+0xce>
 8016634:	1b67      	subs	r7, r4, r5
 8016636:	00bf      	lsls	r7, r7, #2
 8016638:	e007      	b.n	801664a <__gethex+0xd6>
 801663a:	2300      	movs	r3, #0
 801663c:	001c      	movs	r4, r3
 801663e:	9304      	str	r3, [sp, #16]
 8016640:	e7db      	b.n	80165fa <__gethex+0x86>
 8016642:	3501      	adds	r5, #1
 8016644:	e7f1      	b.n	801662a <__gethex+0xb6>
 8016646:	2c00      	cmp	r4, #0
 8016648:	d1f4      	bne.n	8016634 <__gethex+0xc0>
 801664a:	2220      	movs	r2, #32
 801664c:	782b      	ldrb	r3, [r5, #0]
 801664e:	002e      	movs	r6, r5
 8016650:	4393      	bics	r3, r2
 8016652:	2b50      	cmp	r3, #80	; 0x50
 8016654:	d11d      	bne.n	8016692 <__gethex+0x11e>
 8016656:	786b      	ldrb	r3, [r5, #1]
 8016658:	2b2b      	cmp	r3, #43	; 0x2b
 801665a:	d02c      	beq.n	80166b6 <__gethex+0x142>
 801665c:	2b2d      	cmp	r3, #45	; 0x2d
 801665e:	d02e      	beq.n	80166be <__gethex+0x14a>
 8016660:	2300      	movs	r3, #0
 8016662:	1c6e      	adds	r6, r5, #1
 8016664:	9306      	str	r3, [sp, #24]
 8016666:	7830      	ldrb	r0, [r6, #0]
 8016668:	f7ff ff6e 	bl	8016548 <__hexdig_fun>
 801666c:	1e43      	subs	r3, r0, #1
 801666e:	b2db      	uxtb	r3, r3
 8016670:	2b18      	cmp	r3, #24
 8016672:	d82b      	bhi.n	80166cc <__gethex+0x158>
 8016674:	3810      	subs	r0, #16
 8016676:	0004      	movs	r4, r0
 8016678:	7870      	ldrb	r0, [r6, #1]
 801667a:	f7ff ff65 	bl	8016548 <__hexdig_fun>
 801667e:	1e43      	subs	r3, r0, #1
 8016680:	b2db      	uxtb	r3, r3
 8016682:	3601      	adds	r6, #1
 8016684:	2b18      	cmp	r3, #24
 8016686:	d91c      	bls.n	80166c2 <__gethex+0x14e>
 8016688:	9b06      	ldr	r3, [sp, #24]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d000      	beq.n	8016690 <__gethex+0x11c>
 801668e:	4264      	negs	r4, r4
 8016690:	193f      	adds	r7, r7, r4
 8016692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016694:	601e      	str	r6, [r3, #0]
 8016696:	9b04      	ldr	r3, [sp, #16]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d019      	beq.n	80166d0 <__gethex+0x15c>
 801669c:	2600      	movs	r6, #0
 801669e:	9b08      	ldr	r3, [sp, #32]
 80166a0:	42b3      	cmp	r3, r6
 80166a2:	d100      	bne.n	80166a6 <__gethex+0x132>
 80166a4:	3606      	adds	r6, #6
 80166a6:	0030      	movs	r0, r6
 80166a8:	b00d      	add	sp, #52	; 0x34
 80166aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166ac:	2301      	movs	r3, #1
 80166ae:	0027      	movs	r7, r4
 80166b0:	9d01      	ldr	r5, [sp, #4]
 80166b2:	9304      	str	r3, [sp, #16]
 80166b4:	e7c9      	b.n	801664a <__gethex+0xd6>
 80166b6:	2300      	movs	r3, #0
 80166b8:	9306      	str	r3, [sp, #24]
 80166ba:	1cae      	adds	r6, r5, #2
 80166bc:	e7d3      	b.n	8016666 <__gethex+0xf2>
 80166be:	2301      	movs	r3, #1
 80166c0:	e7fa      	b.n	80166b8 <__gethex+0x144>
 80166c2:	230a      	movs	r3, #10
 80166c4:	435c      	muls	r4, r3
 80166c6:	1824      	adds	r4, r4, r0
 80166c8:	3c10      	subs	r4, #16
 80166ca:	e7d5      	b.n	8016678 <__gethex+0x104>
 80166cc:	002e      	movs	r6, r5
 80166ce:	e7e0      	b.n	8016692 <__gethex+0x11e>
 80166d0:	9b01      	ldr	r3, [sp, #4]
 80166d2:	9904      	ldr	r1, [sp, #16]
 80166d4:	1aeb      	subs	r3, r5, r3
 80166d6:	3b01      	subs	r3, #1
 80166d8:	2b07      	cmp	r3, #7
 80166da:	dc0a      	bgt.n	80166f2 <__gethex+0x17e>
 80166dc:	9805      	ldr	r0, [sp, #20]
 80166de:	f000 fa83 	bl	8016be8 <_Balloc>
 80166e2:	1e04      	subs	r4, r0, #0
 80166e4:	d108      	bne.n	80166f8 <__gethex+0x184>
 80166e6:	0002      	movs	r2, r0
 80166e8:	21de      	movs	r1, #222	; 0xde
 80166ea:	4b62      	ldr	r3, [pc, #392]	; (8016874 <__gethex+0x300>)
 80166ec:	4862      	ldr	r0, [pc, #392]	; (8016878 <__gethex+0x304>)
 80166ee:	f7fe fff9 	bl	80156e4 <__assert_func>
 80166f2:	3101      	adds	r1, #1
 80166f4:	105b      	asrs	r3, r3, #1
 80166f6:	e7ef      	b.n	80166d8 <__gethex+0x164>
 80166f8:	0003      	movs	r3, r0
 80166fa:	3314      	adds	r3, #20
 80166fc:	9304      	str	r3, [sp, #16]
 80166fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016700:	2300      	movs	r3, #0
 8016702:	001e      	movs	r6, r3
 8016704:	9306      	str	r3, [sp, #24]
 8016706:	9b01      	ldr	r3, [sp, #4]
 8016708:	42ab      	cmp	r3, r5
 801670a:	d340      	bcc.n	801678e <__gethex+0x21a>
 801670c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801670e:	9b04      	ldr	r3, [sp, #16]
 8016710:	c540      	stmia	r5!, {r6}
 8016712:	1aed      	subs	r5, r5, r3
 8016714:	10ad      	asrs	r5, r5, #2
 8016716:	0030      	movs	r0, r6
 8016718:	6125      	str	r5, [r4, #16]
 801671a:	f000 fb5d 	bl	8016dd8 <__hi0bits>
 801671e:	9b02      	ldr	r3, [sp, #8]
 8016720:	016d      	lsls	r5, r5, #5
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	1a2e      	subs	r6, r5, r0
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	429e      	cmp	r6, r3
 801672a:	dd5a      	ble.n	80167e2 <__gethex+0x26e>
 801672c:	1af6      	subs	r6, r6, r3
 801672e:	0031      	movs	r1, r6
 8016730:	0020      	movs	r0, r4
 8016732:	f000 ff00 	bl	8017536 <__any_on>
 8016736:	1e05      	subs	r5, r0, #0
 8016738:	d016      	beq.n	8016768 <__gethex+0x1f4>
 801673a:	2501      	movs	r5, #1
 801673c:	211f      	movs	r1, #31
 801673e:	0028      	movs	r0, r5
 8016740:	1e73      	subs	r3, r6, #1
 8016742:	4019      	ands	r1, r3
 8016744:	4088      	lsls	r0, r1
 8016746:	0001      	movs	r1, r0
 8016748:	115a      	asrs	r2, r3, #5
 801674a:	9804      	ldr	r0, [sp, #16]
 801674c:	0092      	lsls	r2, r2, #2
 801674e:	5812      	ldr	r2, [r2, r0]
 8016750:	420a      	tst	r2, r1
 8016752:	d009      	beq.n	8016768 <__gethex+0x1f4>
 8016754:	42ab      	cmp	r3, r5
 8016756:	dd06      	ble.n	8016766 <__gethex+0x1f2>
 8016758:	0020      	movs	r0, r4
 801675a:	1eb1      	subs	r1, r6, #2
 801675c:	f000 feeb 	bl	8017536 <__any_on>
 8016760:	3502      	adds	r5, #2
 8016762:	2800      	cmp	r0, #0
 8016764:	d100      	bne.n	8016768 <__gethex+0x1f4>
 8016766:	2502      	movs	r5, #2
 8016768:	0031      	movs	r1, r6
 801676a:	0020      	movs	r0, r4
 801676c:	f7ff fe98 	bl	80164a0 <rshift>
 8016770:	19bf      	adds	r7, r7, r6
 8016772:	9b02      	ldr	r3, [sp, #8]
 8016774:	689b      	ldr	r3, [r3, #8]
 8016776:	9303      	str	r3, [sp, #12]
 8016778:	42bb      	cmp	r3, r7
 801677a:	da42      	bge.n	8016802 <__gethex+0x28e>
 801677c:	0021      	movs	r1, r4
 801677e:	9805      	ldr	r0, [sp, #20]
 8016780:	f000 fa76 	bl	8016c70 <_Bfree>
 8016784:	2300      	movs	r3, #0
 8016786:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016788:	26a3      	movs	r6, #163	; 0xa3
 801678a:	6013      	str	r3, [r2, #0]
 801678c:	e78b      	b.n	80166a6 <__gethex+0x132>
 801678e:	1e6b      	subs	r3, r5, #1
 8016790:	9308      	str	r3, [sp, #32]
 8016792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	4293      	cmp	r3, r2
 8016798:	d014      	beq.n	80167c4 <__gethex+0x250>
 801679a:	9b06      	ldr	r3, [sp, #24]
 801679c:	2b20      	cmp	r3, #32
 801679e:	d104      	bne.n	80167aa <__gethex+0x236>
 80167a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167a2:	c340      	stmia	r3!, {r6}
 80167a4:	2600      	movs	r6, #0
 80167a6:	9309      	str	r3, [sp, #36]	; 0x24
 80167a8:	9606      	str	r6, [sp, #24]
 80167aa:	9b08      	ldr	r3, [sp, #32]
 80167ac:	7818      	ldrb	r0, [r3, #0]
 80167ae:	f7ff fecb 	bl	8016548 <__hexdig_fun>
 80167b2:	230f      	movs	r3, #15
 80167b4:	4018      	ands	r0, r3
 80167b6:	9b06      	ldr	r3, [sp, #24]
 80167b8:	9d08      	ldr	r5, [sp, #32]
 80167ba:	4098      	lsls	r0, r3
 80167bc:	3304      	adds	r3, #4
 80167be:	4306      	orrs	r6, r0
 80167c0:	9306      	str	r3, [sp, #24]
 80167c2:	e7a0      	b.n	8016706 <__gethex+0x192>
 80167c4:	2301      	movs	r3, #1
 80167c6:	9a03      	ldr	r2, [sp, #12]
 80167c8:	1a9d      	subs	r5, r3, r2
 80167ca:	9b08      	ldr	r3, [sp, #32]
 80167cc:	195d      	adds	r5, r3, r5
 80167ce:	9b01      	ldr	r3, [sp, #4]
 80167d0:	429d      	cmp	r5, r3
 80167d2:	d3e2      	bcc.n	801679a <__gethex+0x226>
 80167d4:	0028      	movs	r0, r5
 80167d6:	9907      	ldr	r1, [sp, #28]
 80167d8:	f7fe f817 	bl	801480a <strncmp>
 80167dc:	2800      	cmp	r0, #0
 80167de:	d1dc      	bne.n	801679a <__gethex+0x226>
 80167e0:	e791      	b.n	8016706 <__gethex+0x192>
 80167e2:	9b01      	ldr	r3, [sp, #4]
 80167e4:	2500      	movs	r5, #0
 80167e6:	429e      	cmp	r6, r3
 80167e8:	dac3      	bge.n	8016772 <__gethex+0x1fe>
 80167ea:	1b9e      	subs	r6, r3, r6
 80167ec:	0021      	movs	r1, r4
 80167ee:	0032      	movs	r2, r6
 80167f0:	9805      	ldr	r0, [sp, #20]
 80167f2:	f000 fc5b 	bl	80170ac <__lshift>
 80167f6:	0003      	movs	r3, r0
 80167f8:	3314      	adds	r3, #20
 80167fa:	0004      	movs	r4, r0
 80167fc:	1bbf      	subs	r7, r7, r6
 80167fe:	9304      	str	r3, [sp, #16]
 8016800:	e7b7      	b.n	8016772 <__gethex+0x1fe>
 8016802:	9b02      	ldr	r3, [sp, #8]
 8016804:	685e      	ldr	r6, [r3, #4]
 8016806:	42be      	cmp	r6, r7
 8016808:	dd71      	ble.n	80168ee <__gethex+0x37a>
 801680a:	9b01      	ldr	r3, [sp, #4]
 801680c:	1bf6      	subs	r6, r6, r7
 801680e:	42b3      	cmp	r3, r6
 8016810:	dc38      	bgt.n	8016884 <__gethex+0x310>
 8016812:	9b02      	ldr	r3, [sp, #8]
 8016814:	68db      	ldr	r3, [r3, #12]
 8016816:	2b02      	cmp	r3, #2
 8016818:	d026      	beq.n	8016868 <__gethex+0x2f4>
 801681a:	2b03      	cmp	r3, #3
 801681c:	d02e      	beq.n	801687c <__gethex+0x308>
 801681e:	2b01      	cmp	r3, #1
 8016820:	d119      	bne.n	8016856 <__gethex+0x2e2>
 8016822:	9b01      	ldr	r3, [sp, #4]
 8016824:	42b3      	cmp	r3, r6
 8016826:	d116      	bne.n	8016856 <__gethex+0x2e2>
 8016828:	2b01      	cmp	r3, #1
 801682a:	d10d      	bne.n	8016848 <__gethex+0x2d4>
 801682c:	9b02      	ldr	r3, [sp, #8]
 801682e:	2662      	movs	r6, #98	; 0x62
 8016830:	685b      	ldr	r3, [r3, #4]
 8016832:	9301      	str	r3, [sp, #4]
 8016834:	9a01      	ldr	r2, [sp, #4]
 8016836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016838:	601a      	str	r2, [r3, #0]
 801683a:	2301      	movs	r3, #1
 801683c:	9a04      	ldr	r2, [sp, #16]
 801683e:	6123      	str	r3, [r4, #16]
 8016840:	6013      	str	r3, [r2, #0]
 8016842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016844:	601c      	str	r4, [r3, #0]
 8016846:	e72e      	b.n	80166a6 <__gethex+0x132>
 8016848:	9901      	ldr	r1, [sp, #4]
 801684a:	0020      	movs	r0, r4
 801684c:	3901      	subs	r1, #1
 801684e:	f000 fe72 	bl	8017536 <__any_on>
 8016852:	2800      	cmp	r0, #0
 8016854:	d1ea      	bne.n	801682c <__gethex+0x2b8>
 8016856:	0021      	movs	r1, r4
 8016858:	9805      	ldr	r0, [sp, #20]
 801685a:	f000 fa09 	bl	8016c70 <_Bfree>
 801685e:	2300      	movs	r3, #0
 8016860:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016862:	2650      	movs	r6, #80	; 0x50
 8016864:	6013      	str	r3, [r2, #0]
 8016866:	e71e      	b.n	80166a6 <__gethex+0x132>
 8016868:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801686a:	2b00      	cmp	r3, #0
 801686c:	d1f3      	bne.n	8016856 <__gethex+0x2e2>
 801686e:	e7dd      	b.n	801682c <__gethex+0x2b8>
 8016870:	0801b88c 	.word	0x0801b88c
 8016874:	0801b811 	.word	0x0801b811
 8016878:	0801b822 	.word	0x0801b822
 801687c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801687e:	2b00      	cmp	r3, #0
 8016880:	d1d4      	bne.n	801682c <__gethex+0x2b8>
 8016882:	e7e8      	b.n	8016856 <__gethex+0x2e2>
 8016884:	1e77      	subs	r7, r6, #1
 8016886:	2d00      	cmp	r5, #0
 8016888:	d12f      	bne.n	80168ea <__gethex+0x376>
 801688a:	2f00      	cmp	r7, #0
 801688c:	d004      	beq.n	8016898 <__gethex+0x324>
 801688e:	0039      	movs	r1, r7
 8016890:	0020      	movs	r0, r4
 8016892:	f000 fe50 	bl	8017536 <__any_on>
 8016896:	0005      	movs	r5, r0
 8016898:	231f      	movs	r3, #31
 801689a:	117a      	asrs	r2, r7, #5
 801689c:	401f      	ands	r7, r3
 801689e:	3b1e      	subs	r3, #30
 80168a0:	40bb      	lsls	r3, r7
 80168a2:	9904      	ldr	r1, [sp, #16]
 80168a4:	0092      	lsls	r2, r2, #2
 80168a6:	5852      	ldr	r2, [r2, r1]
 80168a8:	421a      	tst	r2, r3
 80168aa:	d001      	beq.n	80168b0 <__gethex+0x33c>
 80168ac:	2302      	movs	r3, #2
 80168ae:	431d      	orrs	r5, r3
 80168b0:	9b01      	ldr	r3, [sp, #4]
 80168b2:	0031      	movs	r1, r6
 80168b4:	1b9b      	subs	r3, r3, r6
 80168b6:	2602      	movs	r6, #2
 80168b8:	0020      	movs	r0, r4
 80168ba:	9301      	str	r3, [sp, #4]
 80168bc:	f7ff fdf0 	bl	80164a0 <rshift>
 80168c0:	9b02      	ldr	r3, [sp, #8]
 80168c2:	685f      	ldr	r7, [r3, #4]
 80168c4:	2d00      	cmp	r5, #0
 80168c6:	d041      	beq.n	801694c <__gethex+0x3d8>
 80168c8:	9b02      	ldr	r3, [sp, #8]
 80168ca:	68db      	ldr	r3, [r3, #12]
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d010      	beq.n	80168f2 <__gethex+0x37e>
 80168d0:	2b03      	cmp	r3, #3
 80168d2:	d012      	beq.n	80168fa <__gethex+0x386>
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d106      	bne.n	80168e6 <__gethex+0x372>
 80168d8:	07aa      	lsls	r2, r5, #30
 80168da:	d504      	bpl.n	80168e6 <__gethex+0x372>
 80168dc:	9a04      	ldr	r2, [sp, #16]
 80168de:	6810      	ldr	r0, [r2, #0]
 80168e0:	4305      	orrs	r5, r0
 80168e2:	421d      	tst	r5, r3
 80168e4:	d10c      	bne.n	8016900 <__gethex+0x38c>
 80168e6:	2310      	movs	r3, #16
 80168e8:	e02f      	b.n	801694a <__gethex+0x3d6>
 80168ea:	2501      	movs	r5, #1
 80168ec:	e7d4      	b.n	8016898 <__gethex+0x324>
 80168ee:	2601      	movs	r6, #1
 80168f0:	e7e8      	b.n	80168c4 <__gethex+0x350>
 80168f2:	2301      	movs	r3, #1
 80168f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80168f6:	1a9b      	subs	r3, r3, r2
 80168f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80168fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d0f2      	beq.n	80168e6 <__gethex+0x372>
 8016900:	6923      	ldr	r3, [r4, #16]
 8016902:	2000      	movs	r0, #0
 8016904:	9303      	str	r3, [sp, #12]
 8016906:	009b      	lsls	r3, r3, #2
 8016908:	9304      	str	r3, [sp, #16]
 801690a:	0023      	movs	r3, r4
 801690c:	9a04      	ldr	r2, [sp, #16]
 801690e:	3314      	adds	r3, #20
 8016910:	1899      	adds	r1, r3, r2
 8016912:	681a      	ldr	r2, [r3, #0]
 8016914:	1c55      	adds	r5, r2, #1
 8016916:	d01e      	beq.n	8016956 <__gethex+0x3e2>
 8016918:	3201      	adds	r2, #1
 801691a:	601a      	str	r2, [r3, #0]
 801691c:	0023      	movs	r3, r4
 801691e:	3314      	adds	r3, #20
 8016920:	2e02      	cmp	r6, #2
 8016922:	d140      	bne.n	80169a6 <__gethex+0x432>
 8016924:	9a02      	ldr	r2, [sp, #8]
 8016926:	9901      	ldr	r1, [sp, #4]
 8016928:	6812      	ldr	r2, [r2, #0]
 801692a:	3a01      	subs	r2, #1
 801692c:	428a      	cmp	r2, r1
 801692e:	d10b      	bne.n	8016948 <__gethex+0x3d4>
 8016930:	114a      	asrs	r2, r1, #5
 8016932:	211f      	movs	r1, #31
 8016934:	9801      	ldr	r0, [sp, #4]
 8016936:	0092      	lsls	r2, r2, #2
 8016938:	4001      	ands	r1, r0
 801693a:	2001      	movs	r0, #1
 801693c:	0005      	movs	r5, r0
 801693e:	408d      	lsls	r5, r1
 8016940:	58d3      	ldr	r3, [r2, r3]
 8016942:	422b      	tst	r3, r5
 8016944:	d000      	beq.n	8016948 <__gethex+0x3d4>
 8016946:	2601      	movs	r6, #1
 8016948:	2320      	movs	r3, #32
 801694a:	431e      	orrs	r6, r3
 801694c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801694e:	601c      	str	r4, [r3, #0]
 8016950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016952:	601f      	str	r7, [r3, #0]
 8016954:	e6a7      	b.n	80166a6 <__gethex+0x132>
 8016956:	c301      	stmia	r3!, {r0}
 8016958:	4299      	cmp	r1, r3
 801695a:	d8da      	bhi.n	8016912 <__gethex+0x39e>
 801695c:	9b03      	ldr	r3, [sp, #12]
 801695e:	68a2      	ldr	r2, [r4, #8]
 8016960:	4293      	cmp	r3, r2
 8016962:	db17      	blt.n	8016994 <__gethex+0x420>
 8016964:	6863      	ldr	r3, [r4, #4]
 8016966:	9805      	ldr	r0, [sp, #20]
 8016968:	1c59      	adds	r1, r3, #1
 801696a:	f000 f93d 	bl	8016be8 <_Balloc>
 801696e:	1e05      	subs	r5, r0, #0
 8016970:	d103      	bne.n	801697a <__gethex+0x406>
 8016972:	0002      	movs	r2, r0
 8016974:	2184      	movs	r1, #132	; 0x84
 8016976:	4b1c      	ldr	r3, [pc, #112]	; (80169e8 <__gethex+0x474>)
 8016978:	e6b8      	b.n	80166ec <__gethex+0x178>
 801697a:	0021      	movs	r1, r4
 801697c:	6923      	ldr	r3, [r4, #16]
 801697e:	310c      	adds	r1, #12
 8016980:	1c9a      	adds	r2, r3, #2
 8016982:	0092      	lsls	r2, r2, #2
 8016984:	300c      	adds	r0, #12
 8016986:	f7fd f93b 	bl	8013c00 <memcpy>
 801698a:	0021      	movs	r1, r4
 801698c:	9805      	ldr	r0, [sp, #20]
 801698e:	f000 f96f 	bl	8016c70 <_Bfree>
 8016992:	002c      	movs	r4, r5
 8016994:	6923      	ldr	r3, [r4, #16]
 8016996:	1c5a      	adds	r2, r3, #1
 8016998:	6122      	str	r2, [r4, #16]
 801699a:	2201      	movs	r2, #1
 801699c:	3304      	adds	r3, #4
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	18e3      	adds	r3, r4, r3
 80169a2:	605a      	str	r2, [r3, #4]
 80169a4:	e7ba      	b.n	801691c <__gethex+0x3a8>
 80169a6:	6922      	ldr	r2, [r4, #16]
 80169a8:	9903      	ldr	r1, [sp, #12]
 80169aa:	428a      	cmp	r2, r1
 80169ac:	dd09      	ble.n	80169c2 <__gethex+0x44e>
 80169ae:	2101      	movs	r1, #1
 80169b0:	0020      	movs	r0, r4
 80169b2:	f7ff fd75 	bl	80164a0 <rshift>
 80169b6:	9b02      	ldr	r3, [sp, #8]
 80169b8:	3701      	adds	r7, #1
 80169ba:	689b      	ldr	r3, [r3, #8]
 80169bc:	42bb      	cmp	r3, r7
 80169be:	dac2      	bge.n	8016946 <__gethex+0x3d2>
 80169c0:	e6dc      	b.n	801677c <__gethex+0x208>
 80169c2:	221f      	movs	r2, #31
 80169c4:	9d01      	ldr	r5, [sp, #4]
 80169c6:	9901      	ldr	r1, [sp, #4]
 80169c8:	2601      	movs	r6, #1
 80169ca:	4015      	ands	r5, r2
 80169cc:	4211      	tst	r1, r2
 80169ce:	d0bb      	beq.n	8016948 <__gethex+0x3d4>
 80169d0:	9a04      	ldr	r2, [sp, #16]
 80169d2:	189b      	adds	r3, r3, r2
 80169d4:	3b04      	subs	r3, #4
 80169d6:	6818      	ldr	r0, [r3, #0]
 80169d8:	f000 f9fe 	bl	8016dd8 <__hi0bits>
 80169dc:	2320      	movs	r3, #32
 80169de:	1b5d      	subs	r5, r3, r5
 80169e0:	42a8      	cmp	r0, r5
 80169e2:	dbe4      	blt.n	80169ae <__gethex+0x43a>
 80169e4:	e7b0      	b.n	8016948 <__gethex+0x3d4>
 80169e6:	46c0      	nop			; (mov r8, r8)
 80169e8:	0801b811 	.word	0x0801b811

080169ec <L_shift>:
 80169ec:	2308      	movs	r3, #8
 80169ee:	b570      	push	{r4, r5, r6, lr}
 80169f0:	2520      	movs	r5, #32
 80169f2:	1a9a      	subs	r2, r3, r2
 80169f4:	0092      	lsls	r2, r2, #2
 80169f6:	1aad      	subs	r5, r5, r2
 80169f8:	6843      	ldr	r3, [r0, #4]
 80169fa:	6806      	ldr	r6, [r0, #0]
 80169fc:	001c      	movs	r4, r3
 80169fe:	40ac      	lsls	r4, r5
 8016a00:	40d3      	lsrs	r3, r2
 8016a02:	4334      	orrs	r4, r6
 8016a04:	6004      	str	r4, [r0, #0]
 8016a06:	6043      	str	r3, [r0, #4]
 8016a08:	3004      	adds	r0, #4
 8016a0a:	4288      	cmp	r0, r1
 8016a0c:	d3f4      	bcc.n	80169f8 <L_shift+0xc>
 8016a0e:	bd70      	pop	{r4, r5, r6, pc}

08016a10 <__match>:
 8016a10:	b530      	push	{r4, r5, lr}
 8016a12:	6803      	ldr	r3, [r0, #0]
 8016a14:	780c      	ldrb	r4, [r1, #0]
 8016a16:	3301      	adds	r3, #1
 8016a18:	2c00      	cmp	r4, #0
 8016a1a:	d102      	bne.n	8016a22 <__match+0x12>
 8016a1c:	6003      	str	r3, [r0, #0]
 8016a1e:	2001      	movs	r0, #1
 8016a20:	bd30      	pop	{r4, r5, pc}
 8016a22:	781a      	ldrb	r2, [r3, #0]
 8016a24:	0015      	movs	r5, r2
 8016a26:	3d41      	subs	r5, #65	; 0x41
 8016a28:	2d19      	cmp	r5, #25
 8016a2a:	d800      	bhi.n	8016a2e <__match+0x1e>
 8016a2c:	3220      	adds	r2, #32
 8016a2e:	3101      	adds	r1, #1
 8016a30:	42a2      	cmp	r2, r4
 8016a32:	d0ef      	beq.n	8016a14 <__match+0x4>
 8016a34:	2000      	movs	r0, #0
 8016a36:	e7f3      	b.n	8016a20 <__match+0x10>

08016a38 <__hexnan>:
 8016a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a3a:	680b      	ldr	r3, [r1, #0]
 8016a3c:	b08b      	sub	sp, #44	; 0x2c
 8016a3e:	115c      	asrs	r4, r3, #5
 8016a40:	00a4      	lsls	r4, r4, #2
 8016a42:	9201      	str	r2, [sp, #4]
 8016a44:	1912      	adds	r2, r2, r4
 8016a46:	0019      	movs	r1, r3
 8016a48:	9202      	str	r2, [sp, #8]
 8016a4a:	221f      	movs	r2, #31
 8016a4c:	4011      	ands	r1, r2
 8016a4e:	9008      	str	r0, [sp, #32]
 8016a50:	9106      	str	r1, [sp, #24]
 8016a52:	4213      	tst	r3, r2
 8016a54:	d002      	beq.n	8016a5c <__hexnan+0x24>
 8016a56:	9b02      	ldr	r3, [sp, #8]
 8016a58:	3304      	adds	r3, #4
 8016a5a:	9302      	str	r3, [sp, #8]
 8016a5c:	9b02      	ldr	r3, [sp, #8]
 8016a5e:	2500      	movs	r5, #0
 8016a60:	1f1e      	subs	r6, r3, #4
 8016a62:	0037      	movs	r7, r6
 8016a64:	0034      	movs	r4, r6
 8016a66:	9b08      	ldr	r3, [sp, #32]
 8016a68:	6035      	str	r5, [r6, #0]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	9507      	str	r5, [sp, #28]
 8016a6e:	9305      	str	r3, [sp, #20]
 8016a70:	9503      	str	r5, [sp, #12]
 8016a72:	9b05      	ldr	r3, [sp, #20]
 8016a74:	3301      	adds	r3, #1
 8016a76:	9309      	str	r3, [sp, #36]	; 0x24
 8016a78:	9b05      	ldr	r3, [sp, #20]
 8016a7a:	785b      	ldrb	r3, [r3, #1]
 8016a7c:	9304      	str	r3, [sp, #16]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d028      	beq.n	8016ad4 <__hexnan+0x9c>
 8016a82:	9804      	ldr	r0, [sp, #16]
 8016a84:	f7ff fd60 	bl	8016548 <__hexdig_fun>
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	d154      	bne.n	8016b36 <__hexnan+0xfe>
 8016a8c:	9b04      	ldr	r3, [sp, #16]
 8016a8e:	2b20      	cmp	r3, #32
 8016a90:	d819      	bhi.n	8016ac6 <__hexnan+0x8e>
 8016a92:	9b03      	ldr	r3, [sp, #12]
 8016a94:	9a07      	ldr	r2, [sp, #28]
 8016a96:	4293      	cmp	r3, r2
 8016a98:	dd12      	ble.n	8016ac0 <__hexnan+0x88>
 8016a9a:	42bc      	cmp	r4, r7
 8016a9c:	d206      	bcs.n	8016aac <__hexnan+0x74>
 8016a9e:	2d07      	cmp	r5, #7
 8016aa0:	dc04      	bgt.n	8016aac <__hexnan+0x74>
 8016aa2:	002a      	movs	r2, r5
 8016aa4:	0039      	movs	r1, r7
 8016aa6:	0020      	movs	r0, r4
 8016aa8:	f7ff ffa0 	bl	80169ec <L_shift>
 8016aac:	9b01      	ldr	r3, [sp, #4]
 8016aae:	2508      	movs	r5, #8
 8016ab0:	429c      	cmp	r4, r3
 8016ab2:	d905      	bls.n	8016ac0 <__hexnan+0x88>
 8016ab4:	1f27      	subs	r7, r4, #4
 8016ab6:	2500      	movs	r5, #0
 8016ab8:	003c      	movs	r4, r7
 8016aba:	9b03      	ldr	r3, [sp, #12]
 8016abc:	603d      	str	r5, [r7, #0]
 8016abe:	9307      	str	r3, [sp, #28]
 8016ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac2:	9305      	str	r3, [sp, #20]
 8016ac4:	e7d5      	b.n	8016a72 <__hexnan+0x3a>
 8016ac6:	9b04      	ldr	r3, [sp, #16]
 8016ac8:	2b29      	cmp	r3, #41	; 0x29
 8016aca:	d158      	bne.n	8016b7e <__hexnan+0x146>
 8016acc:	9b05      	ldr	r3, [sp, #20]
 8016ace:	9a08      	ldr	r2, [sp, #32]
 8016ad0:	3302      	adds	r3, #2
 8016ad2:	6013      	str	r3, [r2, #0]
 8016ad4:	9b03      	ldr	r3, [sp, #12]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d051      	beq.n	8016b7e <__hexnan+0x146>
 8016ada:	42bc      	cmp	r4, r7
 8016adc:	d206      	bcs.n	8016aec <__hexnan+0xb4>
 8016ade:	2d07      	cmp	r5, #7
 8016ae0:	dc04      	bgt.n	8016aec <__hexnan+0xb4>
 8016ae2:	002a      	movs	r2, r5
 8016ae4:	0039      	movs	r1, r7
 8016ae6:	0020      	movs	r0, r4
 8016ae8:	f7ff ff80 	bl	80169ec <L_shift>
 8016aec:	9b01      	ldr	r3, [sp, #4]
 8016aee:	429c      	cmp	r4, r3
 8016af0:	d935      	bls.n	8016b5e <__hexnan+0x126>
 8016af2:	001a      	movs	r2, r3
 8016af4:	0023      	movs	r3, r4
 8016af6:	cb02      	ldmia	r3!, {r1}
 8016af8:	c202      	stmia	r2!, {r1}
 8016afa:	429e      	cmp	r6, r3
 8016afc:	d2fb      	bcs.n	8016af6 <__hexnan+0xbe>
 8016afe:	9b02      	ldr	r3, [sp, #8]
 8016b00:	1c61      	adds	r1, r4, #1
 8016b02:	1eda      	subs	r2, r3, #3
 8016b04:	2304      	movs	r3, #4
 8016b06:	4291      	cmp	r1, r2
 8016b08:	d805      	bhi.n	8016b16 <__hexnan+0xde>
 8016b0a:	9b02      	ldr	r3, [sp, #8]
 8016b0c:	3b04      	subs	r3, #4
 8016b0e:	1b1c      	subs	r4, r3, r4
 8016b10:	08a4      	lsrs	r4, r4, #2
 8016b12:	3401      	adds	r4, #1
 8016b14:	00a3      	lsls	r3, r4, #2
 8016b16:	9a01      	ldr	r2, [sp, #4]
 8016b18:	18d4      	adds	r4, r2, r3
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	c408      	stmia	r4!, {r3}
 8016b1e:	42a6      	cmp	r6, r4
 8016b20:	d2fc      	bcs.n	8016b1c <__hexnan+0xe4>
 8016b22:	6833      	ldr	r3, [r6, #0]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d104      	bne.n	8016b32 <__hexnan+0xfa>
 8016b28:	9b01      	ldr	r3, [sp, #4]
 8016b2a:	429e      	cmp	r6, r3
 8016b2c:	d125      	bne.n	8016b7a <__hexnan+0x142>
 8016b2e:	2301      	movs	r3, #1
 8016b30:	6033      	str	r3, [r6, #0]
 8016b32:	2005      	movs	r0, #5
 8016b34:	e024      	b.n	8016b80 <__hexnan+0x148>
 8016b36:	9b03      	ldr	r3, [sp, #12]
 8016b38:	3501      	adds	r5, #1
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	9303      	str	r3, [sp, #12]
 8016b3e:	2d08      	cmp	r5, #8
 8016b40:	dd06      	ble.n	8016b50 <__hexnan+0x118>
 8016b42:	9b01      	ldr	r3, [sp, #4]
 8016b44:	429c      	cmp	r4, r3
 8016b46:	d9bb      	bls.n	8016ac0 <__hexnan+0x88>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	2501      	movs	r5, #1
 8016b4c:	3c04      	subs	r4, #4
 8016b4e:	6023      	str	r3, [r4, #0]
 8016b50:	220f      	movs	r2, #15
 8016b52:	6823      	ldr	r3, [r4, #0]
 8016b54:	4010      	ands	r0, r2
 8016b56:	011b      	lsls	r3, r3, #4
 8016b58:	4318      	orrs	r0, r3
 8016b5a:	6020      	str	r0, [r4, #0]
 8016b5c:	e7b0      	b.n	8016ac0 <__hexnan+0x88>
 8016b5e:	9b06      	ldr	r3, [sp, #24]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d0de      	beq.n	8016b22 <__hexnan+0xea>
 8016b64:	2220      	movs	r2, #32
 8016b66:	1ad2      	subs	r2, r2, r3
 8016b68:	2301      	movs	r3, #1
 8016b6a:	425b      	negs	r3, r3
 8016b6c:	40d3      	lsrs	r3, r2
 8016b6e:	9c02      	ldr	r4, [sp, #8]
 8016b70:	3c04      	subs	r4, #4
 8016b72:	6822      	ldr	r2, [r4, #0]
 8016b74:	4013      	ands	r3, r2
 8016b76:	6023      	str	r3, [r4, #0]
 8016b78:	e7d3      	b.n	8016b22 <__hexnan+0xea>
 8016b7a:	3e04      	subs	r6, #4
 8016b7c:	e7d1      	b.n	8016b22 <__hexnan+0xea>
 8016b7e:	2004      	movs	r0, #4
 8016b80:	b00b      	add	sp, #44	; 0x2c
 8016b82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016b84 <_localeconv_r>:
 8016b84:	4800      	ldr	r0, [pc, #0]	; (8016b88 <_localeconv_r+0x4>)
 8016b86:	4770      	bx	lr
 8016b88:	20000218 	.word	0x20000218

08016b8c <__ascii_mbtowc>:
 8016b8c:	b082      	sub	sp, #8
 8016b8e:	2900      	cmp	r1, #0
 8016b90:	d100      	bne.n	8016b94 <__ascii_mbtowc+0x8>
 8016b92:	a901      	add	r1, sp, #4
 8016b94:	1e10      	subs	r0, r2, #0
 8016b96:	d006      	beq.n	8016ba6 <__ascii_mbtowc+0x1a>
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d006      	beq.n	8016baa <__ascii_mbtowc+0x1e>
 8016b9c:	7813      	ldrb	r3, [r2, #0]
 8016b9e:	600b      	str	r3, [r1, #0]
 8016ba0:	7810      	ldrb	r0, [r2, #0]
 8016ba2:	1e43      	subs	r3, r0, #1
 8016ba4:	4198      	sbcs	r0, r3
 8016ba6:	b002      	add	sp, #8
 8016ba8:	4770      	bx	lr
 8016baa:	2002      	movs	r0, #2
 8016bac:	4240      	negs	r0, r0
 8016bae:	e7fa      	b.n	8016ba6 <__ascii_mbtowc+0x1a>

08016bb0 <memchr>:
 8016bb0:	b2c9      	uxtb	r1, r1
 8016bb2:	1882      	adds	r2, r0, r2
 8016bb4:	4290      	cmp	r0, r2
 8016bb6:	d101      	bne.n	8016bbc <memchr+0xc>
 8016bb8:	2000      	movs	r0, #0
 8016bba:	4770      	bx	lr
 8016bbc:	7803      	ldrb	r3, [r0, #0]
 8016bbe:	428b      	cmp	r3, r1
 8016bc0:	d0fb      	beq.n	8016bba <memchr+0xa>
 8016bc2:	3001      	adds	r0, #1
 8016bc4:	e7f6      	b.n	8016bb4 <memchr+0x4>
	...

08016bc8 <__malloc_lock>:
 8016bc8:	b510      	push	{r4, lr}
 8016bca:	4802      	ldr	r0, [pc, #8]	; (8016bd4 <__malloc_lock+0xc>)
 8016bcc:	f001 fa87 	bl	80180de <__retarget_lock_acquire_recursive>
 8016bd0:	bd10      	pop	{r4, pc}
 8016bd2:	46c0      	nop			; (mov r8, r8)
 8016bd4:	200067e0 	.word	0x200067e0

08016bd8 <__malloc_unlock>:
 8016bd8:	b510      	push	{r4, lr}
 8016bda:	4802      	ldr	r0, [pc, #8]	; (8016be4 <__malloc_unlock+0xc>)
 8016bdc:	f001 fa80 	bl	80180e0 <__retarget_lock_release_recursive>
 8016be0:	bd10      	pop	{r4, pc}
 8016be2:	46c0      	nop			; (mov r8, r8)
 8016be4:	200067e0 	.word	0x200067e0

08016be8 <_Balloc>:
 8016be8:	b570      	push	{r4, r5, r6, lr}
 8016bea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016bec:	0006      	movs	r6, r0
 8016bee:	000c      	movs	r4, r1
 8016bf0:	2d00      	cmp	r5, #0
 8016bf2:	d10e      	bne.n	8016c12 <_Balloc+0x2a>
 8016bf4:	2010      	movs	r0, #16
 8016bf6:	f7fc ffe1 	bl	8013bbc <malloc>
 8016bfa:	1e02      	subs	r2, r0, #0
 8016bfc:	6270      	str	r0, [r6, #36]	; 0x24
 8016bfe:	d104      	bne.n	8016c0a <_Balloc+0x22>
 8016c00:	2166      	movs	r1, #102	; 0x66
 8016c02:	4b19      	ldr	r3, [pc, #100]	; (8016c68 <_Balloc+0x80>)
 8016c04:	4819      	ldr	r0, [pc, #100]	; (8016c6c <_Balloc+0x84>)
 8016c06:	f7fe fd6d 	bl	80156e4 <__assert_func>
 8016c0a:	6045      	str	r5, [r0, #4]
 8016c0c:	6085      	str	r5, [r0, #8]
 8016c0e:	6005      	str	r5, [r0, #0]
 8016c10:	60c5      	str	r5, [r0, #12]
 8016c12:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8016c14:	68eb      	ldr	r3, [r5, #12]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d013      	beq.n	8016c42 <_Balloc+0x5a>
 8016c1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016c1c:	00a2      	lsls	r2, r4, #2
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	189b      	adds	r3, r3, r2
 8016c22:	6818      	ldr	r0, [r3, #0]
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d118      	bne.n	8016c5a <_Balloc+0x72>
 8016c28:	2101      	movs	r1, #1
 8016c2a:	000d      	movs	r5, r1
 8016c2c:	40a5      	lsls	r5, r4
 8016c2e:	1d6a      	adds	r2, r5, #5
 8016c30:	0030      	movs	r0, r6
 8016c32:	0092      	lsls	r2, r2, #2
 8016c34:	f000 fca2 	bl	801757c <_calloc_r>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d00c      	beq.n	8016c56 <_Balloc+0x6e>
 8016c3c:	6044      	str	r4, [r0, #4]
 8016c3e:	6085      	str	r5, [r0, #8]
 8016c40:	e00d      	b.n	8016c5e <_Balloc+0x76>
 8016c42:	2221      	movs	r2, #33	; 0x21
 8016c44:	2104      	movs	r1, #4
 8016c46:	0030      	movs	r0, r6
 8016c48:	f000 fc98 	bl	801757c <_calloc_r>
 8016c4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016c4e:	60e8      	str	r0, [r5, #12]
 8016c50:	68db      	ldr	r3, [r3, #12]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d1e1      	bne.n	8016c1a <_Balloc+0x32>
 8016c56:	2000      	movs	r0, #0
 8016c58:	bd70      	pop	{r4, r5, r6, pc}
 8016c5a:	6802      	ldr	r2, [r0, #0]
 8016c5c:	601a      	str	r2, [r3, #0]
 8016c5e:	2300      	movs	r3, #0
 8016c60:	6103      	str	r3, [r0, #16]
 8016c62:	60c3      	str	r3, [r0, #12]
 8016c64:	e7f8      	b.n	8016c58 <_Balloc+0x70>
 8016c66:	46c0      	nop			; (mov r8, r8)
 8016c68:	0801b640 	.word	0x0801b640
 8016c6c:	0801b8a0 	.word	0x0801b8a0

08016c70 <_Bfree>:
 8016c70:	b570      	push	{r4, r5, r6, lr}
 8016c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016c74:	0005      	movs	r5, r0
 8016c76:	000c      	movs	r4, r1
 8016c78:	2e00      	cmp	r6, #0
 8016c7a:	d10e      	bne.n	8016c9a <_Bfree+0x2a>
 8016c7c:	2010      	movs	r0, #16
 8016c7e:	f7fc ff9d 	bl	8013bbc <malloc>
 8016c82:	1e02      	subs	r2, r0, #0
 8016c84:	6268      	str	r0, [r5, #36]	; 0x24
 8016c86:	d104      	bne.n	8016c92 <_Bfree+0x22>
 8016c88:	218a      	movs	r1, #138	; 0x8a
 8016c8a:	4b09      	ldr	r3, [pc, #36]	; (8016cb0 <_Bfree+0x40>)
 8016c8c:	4809      	ldr	r0, [pc, #36]	; (8016cb4 <_Bfree+0x44>)
 8016c8e:	f7fe fd29 	bl	80156e4 <__assert_func>
 8016c92:	6046      	str	r6, [r0, #4]
 8016c94:	6086      	str	r6, [r0, #8]
 8016c96:	6006      	str	r6, [r0, #0]
 8016c98:	60c6      	str	r6, [r0, #12]
 8016c9a:	2c00      	cmp	r4, #0
 8016c9c:	d007      	beq.n	8016cae <_Bfree+0x3e>
 8016c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016ca0:	6862      	ldr	r2, [r4, #4]
 8016ca2:	68db      	ldr	r3, [r3, #12]
 8016ca4:	0092      	lsls	r2, r2, #2
 8016ca6:	189b      	adds	r3, r3, r2
 8016ca8:	681a      	ldr	r2, [r3, #0]
 8016caa:	6022      	str	r2, [r4, #0]
 8016cac:	601c      	str	r4, [r3, #0]
 8016cae:	bd70      	pop	{r4, r5, r6, pc}
 8016cb0:	0801b640 	.word	0x0801b640
 8016cb4:	0801b8a0 	.word	0x0801b8a0

08016cb8 <__multadd>:
 8016cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cba:	000e      	movs	r6, r1
 8016cbc:	9001      	str	r0, [sp, #4]
 8016cbe:	000c      	movs	r4, r1
 8016cc0:	001d      	movs	r5, r3
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	690f      	ldr	r7, [r1, #16]
 8016cc6:	3614      	adds	r6, #20
 8016cc8:	6833      	ldr	r3, [r6, #0]
 8016cca:	3001      	adds	r0, #1
 8016ccc:	b299      	uxth	r1, r3
 8016cce:	4351      	muls	r1, r2
 8016cd0:	0c1b      	lsrs	r3, r3, #16
 8016cd2:	4353      	muls	r3, r2
 8016cd4:	1949      	adds	r1, r1, r5
 8016cd6:	0c0d      	lsrs	r5, r1, #16
 8016cd8:	195b      	adds	r3, r3, r5
 8016cda:	0c1d      	lsrs	r5, r3, #16
 8016cdc:	b289      	uxth	r1, r1
 8016cde:	041b      	lsls	r3, r3, #16
 8016ce0:	185b      	adds	r3, r3, r1
 8016ce2:	c608      	stmia	r6!, {r3}
 8016ce4:	4287      	cmp	r7, r0
 8016ce6:	dcef      	bgt.n	8016cc8 <__multadd+0x10>
 8016ce8:	2d00      	cmp	r5, #0
 8016cea:	d022      	beq.n	8016d32 <__multadd+0x7a>
 8016cec:	68a3      	ldr	r3, [r4, #8]
 8016cee:	42bb      	cmp	r3, r7
 8016cf0:	dc19      	bgt.n	8016d26 <__multadd+0x6e>
 8016cf2:	6863      	ldr	r3, [r4, #4]
 8016cf4:	9801      	ldr	r0, [sp, #4]
 8016cf6:	1c59      	adds	r1, r3, #1
 8016cf8:	f7ff ff76 	bl	8016be8 <_Balloc>
 8016cfc:	1e06      	subs	r6, r0, #0
 8016cfe:	d105      	bne.n	8016d0c <__multadd+0x54>
 8016d00:	0002      	movs	r2, r0
 8016d02:	21b5      	movs	r1, #181	; 0xb5
 8016d04:	4b0c      	ldr	r3, [pc, #48]	; (8016d38 <__multadd+0x80>)
 8016d06:	480d      	ldr	r0, [pc, #52]	; (8016d3c <__multadd+0x84>)
 8016d08:	f7fe fcec 	bl	80156e4 <__assert_func>
 8016d0c:	0021      	movs	r1, r4
 8016d0e:	6923      	ldr	r3, [r4, #16]
 8016d10:	310c      	adds	r1, #12
 8016d12:	1c9a      	adds	r2, r3, #2
 8016d14:	0092      	lsls	r2, r2, #2
 8016d16:	300c      	adds	r0, #12
 8016d18:	f7fc ff72 	bl	8013c00 <memcpy>
 8016d1c:	0021      	movs	r1, r4
 8016d1e:	9801      	ldr	r0, [sp, #4]
 8016d20:	f7ff ffa6 	bl	8016c70 <_Bfree>
 8016d24:	0034      	movs	r4, r6
 8016d26:	1d3b      	adds	r3, r7, #4
 8016d28:	009b      	lsls	r3, r3, #2
 8016d2a:	18e3      	adds	r3, r4, r3
 8016d2c:	605d      	str	r5, [r3, #4]
 8016d2e:	1c7b      	adds	r3, r7, #1
 8016d30:	6123      	str	r3, [r4, #16]
 8016d32:	0020      	movs	r0, r4
 8016d34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016d36:	46c0      	nop			; (mov r8, r8)
 8016d38:	0801b811 	.word	0x0801b811
 8016d3c:	0801b8a0 	.word	0x0801b8a0

08016d40 <__s2b>:
 8016d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d42:	0006      	movs	r6, r0
 8016d44:	0018      	movs	r0, r3
 8016d46:	000c      	movs	r4, r1
 8016d48:	3008      	adds	r0, #8
 8016d4a:	2109      	movs	r1, #9
 8016d4c:	9301      	str	r3, [sp, #4]
 8016d4e:	0015      	movs	r5, r2
 8016d50:	f7e9 fa88 	bl	8000264 <__divsi3>
 8016d54:	2301      	movs	r3, #1
 8016d56:	2100      	movs	r1, #0
 8016d58:	4283      	cmp	r3, r0
 8016d5a:	db0a      	blt.n	8016d72 <__s2b+0x32>
 8016d5c:	0030      	movs	r0, r6
 8016d5e:	f7ff ff43 	bl	8016be8 <_Balloc>
 8016d62:	1e01      	subs	r1, r0, #0
 8016d64:	d108      	bne.n	8016d78 <__s2b+0x38>
 8016d66:	0002      	movs	r2, r0
 8016d68:	4b19      	ldr	r3, [pc, #100]	; (8016dd0 <__s2b+0x90>)
 8016d6a:	481a      	ldr	r0, [pc, #104]	; (8016dd4 <__s2b+0x94>)
 8016d6c:	31ce      	adds	r1, #206	; 0xce
 8016d6e:	f7fe fcb9 	bl	80156e4 <__assert_func>
 8016d72:	005b      	lsls	r3, r3, #1
 8016d74:	3101      	adds	r1, #1
 8016d76:	e7ef      	b.n	8016d58 <__s2b+0x18>
 8016d78:	9b08      	ldr	r3, [sp, #32]
 8016d7a:	6143      	str	r3, [r0, #20]
 8016d7c:	2301      	movs	r3, #1
 8016d7e:	6103      	str	r3, [r0, #16]
 8016d80:	2d09      	cmp	r5, #9
 8016d82:	dd18      	ble.n	8016db6 <__s2b+0x76>
 8016d84:	0023      	movs	r3, r4
 8016d86:	3309      	adds	r3, #9
 8016d88:	001f      	movs	r7, r3
 8016d8a:	9300      	str	r3, [sp, #0]
 8016d8c:	1964      	adds	r4, r4, r5
 8016d8e:	783b      	ldrb	r3, [r7, #0]
 8016d90:	220a      	movs	r2, #10
 8016d92:	0030      	movs	r0, r6
 8016d94:	3b30      	subs	r3, #48	; 0x30
 8016d96:	f7ff ff8f 	bl	8016cb8 <__multadd>
 8016d9a:	3701      	adds	r7, #1
 8016d9c:	0001      	movs	r1, r0
 8016d9e:	42a7      	cmp	r7, r4
 8016da0:	d1f5      	bne.n	8016d8e <__s2b+0x4e>
 8016da2:	002c      	movs	r4, r5
 8016da4:	9b00      	ldr	r3, [sp, #0]
 8016da6:	3c08      	subs	r4, #8
 8016da8:	191c      	adds	r4, r3, r4
 8016daa:	002f      	movs	r7, r5
 8016dac:	9b01      	ldr	r3, [sp, #4]
 8016dae:	429f      	cmp	r7, r3
 8016db0:	db04      	blt.n	8016dbc <__s2b+0x7c>
 8016db2:	0008      	movs	r0, r1
 8016db4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016db6:	2509      	movs	r5, #9
 8016db8:	340a      	adds	r4, #10
 8016dba:	e7f6      	b.n	8016daa <__s2b+0x6a>
 8016dbc:	1b63      	subs	r3, r4, r5
 8016dbe:	5ddb      	ldrb	r3, [r3, r7]
 8016dc0:	220a      	movs	r2, #10
 8016dc2:	0030      	movs	r0, r6
 8016dc4:	3b30      	subs	r3, #48	; 0x30
 8016dc6:	f7ff ff77 	bl	8016cb8 <__multadd>
 8016dca:	3701      	adds	r7, #1
 8016dcc:	0001      	movs	r1, r0
 8016dce:	e7ed      	b.n	8016dac <__s2b+0x6c>
 8016dd0:	0801b811 	.word	0x0801b811
 8016dd4:	0801b8a0 	.word	0x0801b8a0

08016dd8 <__hi0bits>:
 8016dd8:	0003      	movs	r3, r0
 8016dda:	0c02      	lsrs	r2, r0, #16
 8016ddc:	2000      	movs	r0, #0
 8016dde:	4282      	cmp	r2, r0
 8016de0:	d101      	bne.n	8016de6 <__hi0bits+0xe>
 8016de2:	041b      	lsls	r3, r3, #16
 8016de4:	3010      	adds	r0, #16
 8016de6:	0e1a      	lsrs	r2, r3, #24
 8016de8:	d101      	bne.n	8016dee <__hi0bits+0x16>
 8016dea:	3008      	adds	r0, #8
 8016dec:	021b      	lsls	r3, r3, #8
 8016dee:	0f1a      	lsrs	r2, r3, #28
 8016df0:	d101      	bne.n	8016df6 <__hi0bits+0x1e>
 8016df2:	3004      	adds	r0, #4
 8016df4:	011b      	lsls	r3, r3, #4
 8016df6:	0f9a      	lsrs	r2, r3, #30
 8016df8:	d101      	bne.n	8016dfe <__hi0bits+0x26>
 8016dfa:	3002      	adds	r0, #2
 8016dfc:	009b      	lsls	r3, r3, #2
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	db03      	blt.n	8016e0a <__hi0bits+0x32>
 8016e02:	3001      	adds	r0, #1
 8016e04:	005b      	lsls	r3, r3, #1
 8016e06:	d400      	bmi.n	8016e0a <__hi0bits+0x32>
 8016e08:	2020      	movs	r0, #32
 8016e0a:	4770      	bx	lr

08016e0c <__lo0bits>:
 8016e0c:	6803      	ldr	r3, [r0, #0]
 8016e0e:	0002      	movs	r2, r0
 8016e10:	2107      	movs	r1, #7
 8016e12:	0018      	movs	r0, r3
 8016e14:	4008      	ands	r0, r1
 8016e16:	420b      	tst	r3, r1
 8016e18:	d00d      	beq.n	8016e36 <__lo0bits+0x2a>
 8016e1a:	3906      	subs	r1, #6
 8016e1c:	2000      	movs	r0, #0
 8016e1e:	420b      	tst	r3, r1
 8016e20:	d105      	bne.n	8016e2e <__lo0bits+0x22>
 8016e22:	3002      	adds	r0, #2
 8016e24:	4203      	tst	r3, r0
 8016e26:	d003      	beq.n	8016e30 <__lo0bits+0x24>
 8016e28:	40cb      	lsrs	r3, r1
 8016e2a:	0008      	movs	r0, r1
 8016e2c:	6013      	str	r3, [r2, #0]
 8016e2e:	4770      	bx	lr
 8016e30:	089b      	lsrs	r3, r3, #2
 8016e32:	6013      	str	r3, [r2, #0]
 8016e34:	e7fb      	b.n	8016e2e <__lo0bits+0x22>
 8016e36:	b299      	uxth	r1, r3
 8016e38:	2900      	cmp	r1, #0
 8016e3a:	d101      	bne.n	8016e40 <__lo0bits+0x34>
 8016e3c:	2010      	movs	r0, #16
 8016e3e:	0c1b      	lsrs	r3, r3, #16
 8016e40:	b2d9      	uxtb	r1, r3
 8016e42:	2900      	cmp	r1, #0
 8016e44:	d101      	bne.n	8016e4a <__lo0bits+0x3e>
 8016e46:	3008      	adds	r0, #8
 8016e48:	0a1b      	lsrs	r3, r3, #8
 8016e4a:	0719      	lsls	r1, r3, #28
 8016e4c:	d101      	bne.n	8016e52 <__lo0bits+0x46>
 8016e4e:	3004      	adds	r0, #4
 8016e50:	091b      	lsrs	r3, r3, #4
 8016e52:	0799      	lsls	r1, r3, #30
 8016e54:	d101      	bne.n	8016e5a <__lo0bits+0x4e>
 8016e56:	3002      	adds	r0, #2
 8016e58:	089b      	lsrs	r3, r3, #2
 8016e5a:	07d9      	lsls	r1, r3, #31
 8016e5c:	d4e9      	bmi.n	8016e32 <__lo0bits+0x26>
 8016e5e:	3001      	adds	r0, #1
 8016e60:	085b      	lsrs	r3, r3, #1
 8016e62:	d1e6      	bne.n	8016e32 <__lo0bits+0x26>
 8016e64:	2020      	movs	r0, #32
 8016e66:	e7e2      	b.n	8016e2e <__lo0bits+0x22>

08016e68 <__i2b>:
 8016e68:	b510      	push	{r4, lr}
 8016e6a:	000c      	movs	r4, r1
 8016e6c:	2101      	movs	r1, #1
 8016e6e:	f7ff febb 	bl	8016be8 <_Balloc>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	d106      	bne.n	8016e84 <__i2b+0x1c>
 8016e76:	21a0      	movs	r1, #160	; 0xa0
 8016e78:	0002      	movs	r2, r0
 8016e7a:	4b04      	ldr	r3, [pc, #16]	; (8016e8c <__i2b+0x24>)
 8016e7c:	4804      	ldr	r0, [pc, #16]	; (8016e90 <__i2b+0x28>)
 8016e7e:	0049      	lsls	r1, r1, #1
 8016e80:	f7fe fc30 	bl	80156e4 <__assert_func>
 8016e84:	2301      	movs	r3, #1
 8016e86:	6144      	str	r4, [r0, #20]
 8016e88:	6103      	str	r3, [r0, #16]
 8016e8a:	bd10      	pop	{r4, pc}
 8016e8c:	0801b811 	.word	0x0801b811
 8016e90:	0801b8a0 	.word	0x0801b8a0

08016e94 <__multiply>:
 8016e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e96:	690b      	ldr	r3, [r1, #16]
 8016e98:	0014      	movs	r4, r2
 8016e9a:	6912      	ldr	r2, [r2, #16]
 8016e9c:	000d      	movs	r5, r1
 8016e9e:	b089      	sub	sp, #36	; 0x24
 8016ea0:	4293      	cmp	r3, r2
 8016ea2:	da01      	bge.n	8016ea8 <__multiply+0x14>
 8016ea4:	0025      	movs	r5, r4
 8016ea6:	000c      	movs	r4, r1
 8016ea8:	692f      	ldr	r7, [r5, #16]
 8016eaa:	6926      	ldr	r6, [r4, #16]
 8016eac:	6869      	ldr	r1, [r5, #4]
 8016eae:	19bb      	adds	r3, r7, r6
 8016eb0:	9302      	str	r3, [sp, #8]
 8016eb2:	68ab      	ldr	r3, [r5, #8]
 8016eb4:	19ba      	adds	r2, r7, r6
 8016eb6:	4293      	cmp	r3, r2
 8016eb8:	da00      	bge.n	8016ebc <__multiply+0x28>
 8016eba:	3101      	adds	r1, #1
 8016ebc:	f7ff fe94 	bl	8016be8 <_Balloc>
 8016ec0:	9001      	str	r0, [sp, #4]
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	d106      	bne.n	8016ed4 <__multiply+0x40>
 8016ec6:	215e      	movs	r1, #94	; 0x5e
 8016ec8:	0002      	movs	r2, r0
 8016eca:	4b48      	ldr	r3, [pc, #288]	; (8016fec <__multiply+0x158>)
 8016ecc:	4848      	ldr	r0, [pc, #288]	; (8016ff0 <__multiply+0x15c>)
 8016ece:	31ff      	adds	r1, #255	; 0xff
 8016ed0:	f7fe fc08 	bl	80156e4 <__assert_func>
 8016ed4:	9b01      	ldr	r3, [sp, #4]
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	3314      	adds	r3, #20
 8016eda:	469c      	mov	ip, r3
 8016edc:	19bb      	adds	r3, r7, r6
 8016ede:	009b      	lsls	r3, r3, #2
 8016ee0:	4463      	add	r3, ip
 8016ee2:	9303      	str	r3, [sp, #12]
 8016ee4:	4663      	mov	r3, ip
 8016ee6:	9903      	ldr	r1, [sp, #12]
 8016ee8:	428b      	cmp	r3, r1
 8016eea:	d32c      	bcc.n	8016f46 <__multiply+0xb2>
 8016eec:	002b      	movs	r3, r5
 8016eee:	0022      	movs	r2, r4
 8016ef0:	3314      	adds	r3, #20
 8016ef2:	00bf      	lsls	r7, r7, #2
 8016ef4:	3214      	adds	r2, #20
 8016ef6:	9306      	str	r3, [sp, #24]
 8016ef8:	00b6      	lsls	r6, r6, #2
 8016efa:	19db      	adds	r3, r3, r7
 8016efc:	9304      	str	r3, [sp, #16]
 8016efe:	1993      	adds	r3, r2, r6
 8016f00:	9307      	str	r3, [sp, #28]
 8016f02:	2304      	movs	r3, #4
 8016f04:	9305      	str	r3, [sp, #20]
 8016f06:	002b      	movs	r3, r5
 8016f08:	9904      	ldr	r1, [sp, #16]
 8016f0a:	3315      	adds	r3, #21
 8016f0c:	9200      	str	r2, [sp, #0]
 8016f0e:	4299      	cmp	r1, r3
 8016f10:	d305      	bcc.n	8016f1e <__multiply+0x8a>
 8016f12:	1b4b      	subs	r3, r1, r5
 8016f14:	3b15      	subs	r3, #21
 8016f16:	089b      	lsrs	r3, r3, #2
 8016f18:	3301      	adds	r3, #1
 8016f1a:	009b      	lsls	r3, r3, #2
 8016f1c:	9305      	str	r3, [sp, #20]
 8016f1e:	9b07      	ldr	r3, [sp, #28]
 8016f20:	9a00      	ldr	r2, [sp, #0]
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d311      	bcc.n	8016f4a <__multiply+0xb6>
 8016f26:	9b02      	ldr	r3, [sp, #8]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	dd06      	ble.n	8016f3a <__multiply+0xa6>
 8016f2c:	9b03      	ldr	r3, [sp, #12]
 8016f2e:	3b04      	subs	r3, #4
 8016f30:	9303      	str	r3, [sp, #12]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	9300      	str	r3, [sp, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d054      	beq.n	8016fe4 <__multiply+0x150>
 8016f3a:	9b01      	ldr	r3, [sp, #4]
 8016f3c:	9a02      	ldr	r2, [sp, #8]
 8016f3e:	0018      	movs	r0, r3
 8016f40:	611a      	str	r2, [r3, #16]
 8016f42:	b009      	add	sp, #36	; 0x24
 8016f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f46:	c304      	stmia	r3!, {r2}
 8016f48:	e7cd      	b.n	8016ee6 <__multiply+0x52>
 8016f4a:	9b00      	ldr	r3, [sp, #0]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	b298      	uxth	r0, r3
 8016f50:	2800      	cmp	r0, #0
 8016f52:	d01c      	beq.n	8016f8e <__multiply+0xfa>
 8016f54:	4667      	mov	r7, ip
 8016f56:	2400      	movs	r4, #0
 8016f58:	9e06      	ldr	r6, [sp, #24]
 8016f5a:	ce02      	ldmia	r6!, {r1}
 8016f5c:	683a      	ldr	r2, [r7, #0]
 8016f5e:	b28b      	uxth	r3, r1
 8016f60:	4343      	muls	r3, r0
 8016f62:	0c09      	lsrs	r1, r1, #16
 8016f64:	4341      	muls	r1, r0
 8016f66:	b292      	uxth	r2, r2
 8016f68:	189b      	adds	r3, r3, r2
 8016f6a:	191b      	adds	r3, r3, r4
 8016f6c:	000c      	movs	r4, r1
 8016f6e:	683a      	ldr	r2, [r7, #0]
 8016f70:	0c11      	lsrs	r1, r2, #16
 8016f72:	1861      	adds	r1, r4, r1
 8016f74:	0c1c      	lsrs	r4, r3, #16
 8016f76:	1909      	adds	r1, r1, r4
 8016f78:	0c0c      	lsrs	r4, r1, #16
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	0409      	lsls	r1, r1, #16
 8016f7e:	430b      	orrs	r3, r1
 8016f80:	c708      	stmia	r7!, {r3}
 8016f82:	9b04      	ldr	r3, [sp, #16]
 8016f84:	42b3      	cmp	r3, r6
 8016f86:	d8e8      	bhi.n	8016f5a <__multiply+0xc6>
 8016f88:	4663      	mov	r3, ip
 8016f8a:	9a05      	ldr	r2, [sp, #20]
 8016f8c:	509c      	str	r4, [r3, r2]
 8016f8e:	9b00      	ldr	r3, [sp, #0]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	0c1e      	lsrs	r6, r3, #16
 8016f94:	d020      	beq.n	8016fd8 <__multiply+0x144>
 8016f96:	4663      	mov	r3, ip
 8016f98:	002c      	movs	r4, r5
 8016f9a:	4660      	mov	r0, ip
 8016f9c:	2700      	movs	r7, #0
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	3414      	adds	r4, #20
 8016fa2:	6822      	ldr	r2, [r4, #0]
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	b291      	uxth	r1, r2
 8016fa8:	4371      	muls	r1, r6
 8016faa:	6802      	ldr	r2, [r0, #0]
 8016fac:	0c12      	lsrs	r2, r2, #16
 8016fae:	1889      	adds	r1, r1, r2
 8016fb0:	19cf      	adds	r7, r1, r7
 8016fb2:	0439      	lsls	r1, r7, #16
 8016fb4:	430b      	orrs	r3, r1
 8016fb6:	6003      	str	r3, [r0, #0]
 8016fb8:	cc02      	ldmia	r4!, {r1}
 8016fba:	6843      	ldr	r3, [r0, #4]
 8016fbc:	0c09      	lsrs	r1, r1, #16
 8016fbe:	4371      	muls	r1, r6
 8016fc0:	b29b      	uxth	r3, r3
 8016fc2:	0c3f      	lsrs	r7, r7, #16
 8016fc4:	18cb      	adds	r3, r1, r3
 8016fc6:	9a04      	ldr	r2, [sp, #16]
 8016fc8:	19db      	adds	r3, r3, r7
 8016fca:	0c1f      	lsrs	r7, r3, #16
 8016fcc:	3004      	adds	r0, #4
 8016fce:	42a2      	cmp	r2, r4
 8016fd0:	d8e7      	bhi.n	8016fa2 <__multiply+0x10e>
 8016fd2:	4662      	mov	r2, ip
 8016fd4:	9905      	ldr	r1, [sp, #20]
 8016fd6:	5053      	str	r3, [r2, r1]
 8016fd8:	9b00      	ldr	r3, [sp, #0]
 8016fda:	3304      	adds	r3, #4
 8016fdc:	9300      	str	r3, [sp, #0]
 8016fde:	2304      	movs	r3, #4
 8016fe0:	449c      	add	ip, r3
 8016fe2:	e79c      	b.n	8016f1e <__multiply+0x8a>
 8016fe4:	9b02      	ldr	r3, [sp, #8]
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	9302      	str	r3, [sp, #8]
 8016fea:	e79c      	b.n	8016f26 <__multiply+0x92>
 8016fec:	0801b811 	.word	0x0801b811
 8016ff0:	0801b8a0 	.word	0x0801b8a0

08016ff4 <__pow5mult>:
 8016ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ff6:	2303      	movs	r3, #3
 8016ff8:	0015      	movs	r5, r2
 8016ffa:	0007      	movs	r7, r0
 8016ffc:	000e      	movs	r6, r1
 8016ffe:	401a      	ands	r2, r3
 8017000:	421d      	tst	r5, r3
 8017002:	d008      	beq.n	8017016 <__pow5mult+0x22>
 8017004:	4925      	ldr	r1, [pc, #148]	; (801709c <__pow5mult+0xa8>)
 8017006:	3a01      	subs	r2, #1
 8017008:	0092      	lsls	r2, r2, #2
 801700a:	5852      	ldr	r2, [r2, r1]
 801700c:	2300      	movs	r3, #0
 801700e:	0031      	movs	r1, r6
 8017010:	f7ff fe52 	bl	8016cb8 <__multadd>
 8017014:	0006      	movs	r6, r0
 8017016:	10ad      	asrs	r5, r5, #2
 8017018:	d03d      	beq.n	8017096 <__pow5mult+0xa2>
 801701a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801701c:	2c00      	cmp	r4, #0
 801701e:	d10f      	bne.n	8017040 <__pow5mult+0x4c>
 8017020:	2010      	movs	r0, #16
 8017022:	f7fc fdcb 	bl	8013bbc <malloc>
 8017026:	1e02      	subs	r2, r0, #0
 8017028:	6278      	str	r0, [r7, #36]	; 0x24
 801702a:	d105      	bne.n	8017038 <__pow5mult+0x44>
 801702c:	21d7      	movs	r1, #215	; 0xd7
 801702e:	4b1c      	ldr	r3, [pc, #112]	; (80170a0 <__pow5mult+0xac>)
 8017030:	481c      	ldr	r0, [pc, #112]	; (80170a4 <__pow5mult+0xb0>)
 8017032:	0049      	lsls	r1, r1, #1
 8017034:	f7fe fb56 	bl	80156e4 <__assert_func>
 8017038:	6044      	str	r4, [r0, #4]
 801703a:	6084      	str	r4, [r0, #8]
 801703c:	6004      	str	r4, [r0, #0]
 801703e:	60c4      	str	r4, [r0, #12]
 8017040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017042:	689c      	ldr	r4, [r3, #8]
 8017044:	9301      	str	r3, [sp, #4]
 8017046:	2c00      	cmp	r4, #0
 8017048:	d108      	bne.n	801705c <__pow5mult+0x68>
 801704a:	0038      	movs	r0, r7
 801704c:	4916      	ldr	r1, [pc, #88]	; (80170a8 <__pow5mult+0xb4>)
 801704e:	f7ff ff0b 	bl	8016e68 <__i2b>
 8017052:	9b01      	ldr	r3, [sp, #4]
 8017054:	0004      	movs	r4, r0
 8017056:	6098      	str	r0, [r3, #8]
 8017058:	2300      	movs	r3, #0
 801705a:	6003      	str	r3, [r0, #0]
 801705c:	2301      	movs	r3, #1
 801705e:	421d      	tst	r5, r3
 8017060:	d00a      	beq.n	8017078 <__pow5mult+0x84>
 8017062:	0031      	movs	r1, r6
 8017064:	0022      	movs	r2, r4
 8017066:	0038      	movs	r0, r7
 8017068:	f7ff ff14 	bl	8016e94 <__multiply>
 801706c:	0031      	movs	r1, r6
 801706e:	9001      	str	r0, [sp, #4]
 8017070:	0038      	movs	r0, r7
 8017072:	f7ff fdfd 	bl	8016c70 <_Bfree>
 8017076:	9e01      	ldr	r6, [sp, #4]
 8017078:	106d      	asrs	r5, r5, #1
 801707a:	d00c      	beq.n	8017096 <__pow5mult+0xa2>
 801707c:	6820      	ldr	r0, [r4, #0]
 801707e:	2800      	cmp	r0, #0
 8017080:	d107      	bne.n	8017092 <__pow5mult+0x9e>
 8017082:	0022      	movs	r2, r4
 8017084:	0021      	movs	r1, r4
 8017086:	0038      	movs	r0, r7
 8017088:	f7ff ff04 	bl	8016e94 <__multiply>
 801708c:	2300      	movs	r3, #0
 801708e:	6020      	str	r0, [r4, #0]
 8017090:	6003      	str	r3, [r0, #0]
 8017092:	0004      	movs	r4, r0
 8017094:	e7e2      	b.n	801705c <__pow5mult+0x68>
 8017096:	0030      	movs	r0, r6
 8017098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801709a:	46c0      	nop			; (mov r8, r8)
 801709c:	0801b9f0 	.word	0x0801b9f0
 80170a0:	0801b640 	.word	0x0801b640
 80170a4:	0801b8a0 	.word	0x0801b8a0
 80170a8:	00000271 	.word	0x00000271

080170ac <__lshift>:
 80170ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170ae:	000c      	movs	r4, r1
 80170b0:	0017      	movs	r7, r2
 80170b2:	6923      	ldr	r3, [r4, #16]
 80170b4:	1155      	asrs	r5, r2, #5
 80170b6:	b087      	sub	sp, #28
 80170b8:	18eb      	adds	r3, r5, r3
 80170ba:	9302      	str	r3, [sp, #8]
 80170bc:	3301      	adds	r3, #1
 80170be:	9301      	str	r3, [sp, #4]
 80170c0:	6849      	ldr	r1, [r1, #4]
 80170c2:	68a3      	ldr	r3, [r4, #8]
 80170c4:	9004      	str	r0, [sp, #16]
 80170c6:	9a01      	ldr	r2, [sp, #4]
 80170c8:	4293      	cmp	r3, r2
 80170ca:	db11      	blt.n	80170f0 <__lshift+0x44>
 80170cc:	9804      	ldr	r0, [sp, #16]
 80170ce:	f7ff fd8b 	bl	8016be8 <_Balloc>
 80170d2:	0002      	movs	r2, r0
 80170d4:	2300      	movs	r3, #0
 80170d6:	3214      	adds	r2, #20
 80170d8:	0006      	movs	r6, r0
 80170da:	0011      	movs	r1, r2
 80170dc:	9203      	str	r2, [sp, #12]
 80170de:	4298      	cmp	r0, r3
 80170e0:	d10d      	bne.n	80170fe <__lshift+0x52>
 80170e2:	21da      	movs	r1, #218	; 0xda
 80170e4:	0002      	movs	r2, r0
 80170e6:	4b27      	ldr	r3, [pc, #156]	; (8017184 <__lshift+0xd8>)
 80170e8:	4827      	ldr	r0, [pc, #156]	; (8017188 <__lshift+0xdc>)
 80170ea:	31ff      	adds	r1, #255	; 0xff
 80170ec:	f7fe fafa 	bl	80156e4 <__assert_func>
 80170f0:	3101      	adds	r1, #1
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	e7e7      	b.n	80170c6 <__lshift+0x1a>
 80170f6:	2200      	movs	r2, #0
 80170f8:	0098      	lsls	r0, r3, #2
 80170fa:	500a      	str	r2, [r1, r0]
 80170fc:	3301      	adds	r3, #1
 80170fe:	42ab      	cmp	r3, r5
 8017100:	dbf9      	blt.n	80170f6 <__lshift+0x4a>
 8017102:	43eb      	mvns	r3, r5
 8017104:	17db      	asrs	r3, r3, #31
 8017106:	401d      	ands	r5, r3
 8017108:	9b03      	ldr	r3, [sp, #12]
 801710a:	00ad      	lsls	r5, r5, #2
 801710c:	211f      	movs	r1, #31
 801710e:	0038      	movs	r0, r7
 8017110:	195d      	adds	r5, r3, r5
 8017112:	0023      	movs	r3, r4
 8017114:	6922      	ldr	r2, [r4, #16]
 8017116:	3314      	adds	r3, #20
 8017118:	0092      	lsls	r2, r2, #2
 801711a:	4008      	ands	r0, r1
 801711c:	4684      	mov	ip, r0
 801711e:	189a      	adds	r2, r3, r2
 8017120:	420f      	tst	r7, r1
 8017122:	d02a      	beq.n	801717a <__lshift+0xce>
 8017124:	3101      	adds	r1, #1
 8017126:	1a09      	subs	r1, r1, r0
 8017128:	9105      	str	r1, [sp, #20]
 801712a:	2100      	movs	r1, #0
 801712c:	9503      	str	r5, [sp, #12]
 801712e:	4667      	mov	r7, ip
 8017130:	6818      	ldr	r0, [r3, #0]
 8017132:	40b8      	lsls	r0, r7
 8017134:	4301      	orrs	r1, r0
 8017136:	9803      	ldr	r0, [sp, #12]
 8017138:	c002      	stmia	r0!, {r1}
 801713a:	cb02      	ldmia	r3!, {r1}
 801713c:	9003      	str	r0, [sp, #12]
 801713e:	9805      	ldr	r0, [sp, #20]
 8017140:	40c1      	lsrs	r1, r0
 8017142:	429a      	cmp	r2, r3
 8017144:	d8f3      	bhi.n	801712e <__lshift+0x82>
 8017146:	0020      	movs	r0, r4
 8017148:	3015      	adds	r0, #21
 801714a:	2304      	movs	r3, #4
 801714c:	4282      	cmp	r2, r0
 801714e:	d304      	bcc.n	801715a <__lshift+0xae>
 8017150:	1b13      	subs	r3, r2, r4
 8017152:	3b15      	subs	r3, #21
 8017154:	089b      	lsrs	r3, r3, #2
 8017156:	3301      	adds	r3, #1
 8017158:	009b      	lsls	r3, r3, #2
 801715a:	50e9      	str	r1, [r5, r3]
 801715c:	2900      	cmp	r1, #0
 801715e:	d002      	beq.n	8017166 <__lshift+0xba>
 8017160:	9b02      	ldr	r3, [sp, #8]
 8017162:	3302      	adds	r3, #2
 8017164:	9301      	str	r3, [sp, #4]
 8017166:	9b01      	ldr	r3, [sp, #4]
 8017168:	9804      	ldr	r0, [sp, #16]
 801716a:	3b01      	subs	r3, #1
 801716c:	0021      	movs	r1, r4
 801716e:	6133      	str	r3, [r6, #16]
 8017170:	f7ff fd7e 	bl	8016c70 <_Bfree>
 8017174:	0030      	movs	r0, r6
 8017176:	b007      	add	sp, #28
 8017178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801717a:	cb02      	ldmia	r3!, {r1}
 801717c:	c502      	stmia	r5!, {r1}
 801717e:	429a      	cmp	r2, r3
 8017180:	d8fb      	bhi.n	801717a <__lshift+0xce>
 8017182:	e7f0      	b.n	8017166 <__lshift+0xba>
 8017184:	0801b811 	.word	0x0801b811
 8017188:	0801b8a0 	.word	0x0801b8a0

0801718c <__mcmp>:
 801718c:	6902      	ldr	r2, [r0, #16]
 801718e:	690b      	ldr	r3, [r1, #16]
 8017190:	b530      	push	{r4, r5, lr}
 8017192:	0004      	movs	r4, r0
 8017194:	1ad0      	subs	r0, r2, r3
 8017196:	429a      	cmp	r2, r3
 8017198:	d10d      	bne.n	80171b6 <__mcmp+0x2a>
 801719a:	009b      	lsls	r3, r3, #2
 801719c:	3414      	adds	r4, #20
 801719e:	3114      	adds	r1, #20
 80171a0:	18e2      	adds	r2, r4, r3
 80171a2:	18c9      	adds	r1, r1, r3
 80171a4:	3a04      	subs	r2, #4
 80171a6:	3904      	subs	r1, #4
 80171a8:	6815      	ldr	r5, [r2, #0]
 80171aa:	680b      	ldr	r3, [r1, #0]
 80171ac:	429d      	cmp	r5, r3
 80171ae:	d003      	beq.n	80171b8 <__mcmp+0x2c>
 80171b0:	2001      	movs	r0, #1
 80171b2:	429d      	cmp	r5, r3
 80171b4:	d303      	bcc.n	80171be <__mcmp+0x32>
 80171b6:	bd30      	pop	{r4, r5, pc}
 80171b8:	4294      	cmp	r4, r2
 80171ba:	d3f3      	bcc.n	80171a4 <__mcmp+0x18>
 80171bc:	e7fb      	b.n	80171b6 <__mcmp+0x2a>
 80171be:	4240      	negs	r0, r0
 80171c0:	e7f9      	b.n	80171b6 <__mcmp+0x2a>
	...

080171c4 <__mdiff>:
 80171c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171c6:	000e      	movs	r6, r1
 80171c8:	0007      	movs	r7, r0
 80171ca:	0011      	movs	r1, r2
 80171cc:	0030      	movs	r0, r6
 80171ce:	b087      	sub	sp, #28
 80171d0:	0014      	movs	r4, r2
 80171d2:	f7ff ffdb 	bl	801718c <__mcmp>
 80171d6:	1e05      	subs	r5, r0, #0
 80171d8:	d110      	bne.n	80171fc <__mdiff+0x38>
 80171da:	0001      	movs	r1, r0
 80171dc:	0038      	movs	r0, r7
 80171de:	f7ff fd03 	bl	8016be8 <_Balloc>
 80171e2:	1e02      	subs	r2, r0, #0
 80171e4:	d104      	bne.n	80171f0 <__mdiff+0x2c>
 80171e6:	4b40      	ldr	r3, [pc, #256]	; (80172e8 <__mdiff+0x124>)
 80171e8:	4940      	ldr	r1, [pc, #256]	; (80172ec <__mdiff+0x128>)
 80171ea:	4841      	ldr	r0, [pc, #260]	; (80172f0 <__mdiff+0x12c>)
 80171ec:	f7fe fa7a 	bl	80156e4 <__assert_func>
 80171f0:	2301      	movs	r3, #1
 80171f2:	6145      	str	r5, [r0, #20]
 80171f4:	6103      	str	r3, [r0, #16]
 80171f6:	0010      	movs	r0, r2
 80171f8:	b007      	add	sp, #28
 80171fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171fc:	2301      	movs	r3, #1
 80171fe:	9301      	str	r3, [sp, #4]
 8017200:	2800      	cmp	r0, #0
 8017202:	db04      	blt.n	801720e <__mdiff+0x4a>
 8017204:	0023      	movs	r3, r4
 8017206:	0034      	movs	r4, r6
 8017208:	001e      	movs	r6, r3
 801720a:	2300      	movs	r3, #0
 801720c:	9301      	str	r3, [sp, #4]
 801720e:	0038      	movs	r0, r7
 8017210:	6861      	ldr	r1, [r4, #4]
 8017212:	f7ff fce9 	bl	8016be8 <_Balloc>
 8017216:	1e02      	subs	r2, r0, #0
 8017218:	d103      	bne.n	8017222 <__mdiff+0x5e>
 801721a:	2190      	movs	r1, #144	; 0x90
 801721c:	4b32      	ldr	r3, [pc, #200]	; (80172e8 <__mdiff+0x124>)
 801721e:	0089      	lsls	r1, r1, #2
 8017220:	e7e3      	b.n	80171ea <__mdiff+0x26>
 8017222:	9b01      	ldr	r3, [sp, #4]
 8017224:	2700      	movs	r7, #0
 8017226:	60c3      	str	r3, [r0, #12]
 8017228:	6920      	ldr	r0, [r4, #16]
 801722a:	3414      	adds	r4, #20
 801722c:	9401      	str	r4, [sp, #4]
 801722e:	9b01      	ldr	r3, [sp, #4]
 8017230:	0084      	lsls	r4, r0, #2
 8017232:	191b      	adds	r3, r3, r4
 8017234:	0034      	movs	r4, r6
 8017236:	9302      	str	r3, [sp, #8]
 8017238:	6933      	ldr	r3, [r6, #16]
 801723a:	3414      	adds	r4, #20
 801723c:	0099      	lsls	r1, r3, #2
 801723e:	1863      	adds	r3, r4, r1
 8017240:	9303      	str	r3, [sp, #12]
 8017242:	0013      	movs	r3, r2
 8017244:	3314      	adds	r3, #20
 8017246:	469c      	mov	ip, r3
 8017248:	9305      	str	r3, [sp, #20]
 801724a:	9b01      	ldr	r3, [sp, #4]
 801724c:	9304      	str	r3, [sp, #16]
 801724e:	9b04      	ldr	r3, [sp, #16]
 8017250:	cc02      	ldmia	r4!, {r1}
 8017252:	cb20      	ldmia	r3!, {r5}
 8017254:	9304      	str	r3, [sp, #16]
 8017256:	b2ab      	uxth	r3, r5
 8017258:	19df      	adds	r7, r3, r7
 801725a:	b28b      	uxth	r3, r1
 801725c:	1afb      	subs	r3, r7, r3
 801725e:	0c2d      	lsrs	r5, r5, #16
 8017260:	0c09      	lsrs	r1, r1, #16
 8017262:	1a69      	subs	r1, r5, r1
 8017264:	141d      	asrs	r5, r3, #16
 8017266:	1949      	adds	r1, r1, r5
 8017268:	140f      	asrs	r7, r1, #16
 801726a:	b29b      	uxth	r3, r3
 801726c:	0409      	lsls	r1, r1, #16
 801726e:	430b      	orrs	r3, r1
 8017270:	4661      	mov	r1, ip
 8017272:	c108      	stmia	r1!, {r3}
 8017274:	9b03      	ldr	r3, [sp, #12]
 8017276:	468c      	mov	ip, r1
 8017278:	42a3      	cmp	r3, r4
 801727a:	d8e8      	bhi.n	801724e <__mdiff+0x8a>
 801727c:	0031      	movs	r1, r6
 801727e:	9c03      	ldr	r4, [sp, #12]
 8017280:	3115      	adds	r1, #21
 8017282:	2304      	movs	r3, #4
 8017284:	428c      	cmp	r4, r1
 8017286:	d304      	bcc.n	8017292 <__mdiff+0xce>
 8017288:	1ba3      	subs	r3, r4, r6
 801728a:	3b15      	subs	r3, #21
 801728c:	089b      	lsrs	r3, r3, #2
 801728e:	3301      	adds	r3, #1
 8017290:	009b      	lsls	r3, r3, #2
 8017292:	9901      	ldr	r1, [sp, #4]
 8017294:	18cc      	adds	r4, r1, r3
 8017296:	9905      	ldr	r1, [sp, #20]
 8017298:	0026      	movs	r6, r4
 801729a:	18cb      	adds	r3, r1, r3
 801729c:	469c      	mov	ip, r3
 801729e:	9902      	ldr	r1, [sp, #8]
 80172a0:	428e      	cmp	r6, r1
 80172a2:	d310      	bcc.n	80172c6 <__mdiff+0x102>
 80172a4:	9e02      	ldr	r6, [sp, #8]
 80172a6:	1ee5      	subs	r5, r4, #3
 80172a8:	2100      	movs	r1, #0
 80172aa:	42ae      	cmp	r6, r5
 80172ac:	d304      	bcc.n	80172b8 <__mdiff+0xf4>
 80172ae:	0031      	movs	r1, r6
 80172b0:	3103      	adds	r1, #3
 80172b2:	1b09      	subs	r1, r1, r4
 80172b4:	0889      	lsrs	r1, r1, #2
 80172b6:	0089      	lsls	r1, r1, #2
 80172b8:	185b      	adds	r3, r3, r1
 80172ba:	3b04      	subs	r3, #4
 80172bc:	6819      	ldr	r1, [r3, #0]
 80172be:	2900      	cmp	r1, #0
 80172c0:	d00f      	beq.n	80172e2 <__mdiff+0x11e>
 80172c2:	6110      	str	r0, [r2, #16]
 80172c4:	e797      	b.n	80171f6 <__mdiff+0x32>
 80172c6:	ce02      	ldmia	r6!, {r1}
 80172c8:	b28d      	uxth	r5, r1
 80172ca:	19ed      	adds	r5, r5, r7
 80172cc:	0c0f      	lsrs	r7, r1, #16
 80172ce:	1429      	asrs	r1, r5, #16
 80172d0:	1879      	adds	r1, r7, r1
 80172d2:	140f      	asrs	r7, r1, #16
 80172d4:	b2ad      	uxth	r5, r5
 80172d6:	0409      	lsls	r1, r1, #16
 80172d8:	430d      	orrs	r5, r1
 80172da:	4661      	mov	r1, ip
 80172dc:	c120      	stmia	r1!, {r5}
 80172de:	468c      	mov	ip, r1
 80172e0:	e7dd      	b.n	801729e <__mdiff+0xda>
 80172e2:	3801      	subs	r0, #1
 80172e4:	e7e9      	b.n	80172ba <__mdiff+0xf6>
 80172e6:	46c0      	nop			; (mov r8, r8)
 80172e8:	0801b811 	.word	0x0801b811
 80172ec:	00000232 	.word	0x00000232
 80172f0:	0801b8a0 	.word	0x0801b8a0

080172f4 <__ulp>:
 80172f4:	4b0f      	ldr	r3, [pc, #60]	; (8017334 <__ulp+0x40>)
 80172f6:	4019      	ands	r1, r3
 80172f8:	4b0f      	ldr	r3, [pc, #60]	; (8017338 <__ulp+0x44>)
 80172fa:	18c9      	adds	r1, r1, r3
 80172fc:	2900      	cmp	r1, #0
 80172fe:	dd04      	ble.n	801730a <__ulp+0x16>
 8017300:	2200      	movs	r2, #0
 8017302:	000b      	movs	r3, r1
 8017304:	0010      	movs	r0, r2
 8017306:	0019      	movs	r1, r3
 8017308:	4770      	bx	lr
 801730a:	4249      	negs	r1, r1
 801730c:	2200      	movs	r2, #0
 801730e:	2300      	movs	r3, #0
 8017310:	1509      	asrs	r1, r1, #20
 8017312:	2913      	cmp	r1, #19
 8017314:	dc04      	bgt.n	8017320 <__ulp+0x2c>
 8017316:	2080      	movs	r0, #128	; 0x80
 8017318:	0300      	lsls	r0, r0, #12
 801731a:	4108      	asrs	r0, r1
 801731c:	0003      	movs	r3, r0
 801731e:	e7f1      	b.n	8017304 <__ulp+0x10>
 8017320:	3914      	subs	r1, #20
 8017322:	2001      	movs	r0, #1
 8017324:	291e      	cmp	r1, #30
 8017326:	dc02      	bgt.n	801732e <__ulp+0x3a>
 8017328:	2080      	movs	r0, #128	; 0x80
 801732a:	0600      	lsls	r0, r0, #24
 801732c:	40c8      	lsrs	r0, r1
 801732e:	0002      	movs	r2, r0
 8017330:	e7e8      	b.n	8017304 <__ulp+0x10>
 8017332:	46c0      	nop			; (mov r8, r8)
 8017334:	7ff00000 	.word	0x7ff00000
 8017338:	fcc00000 	.word	0xfcc00000

0801733c <__b2d>:
 801733c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801733e:	0006      	movs	r6, r0
 8017340:	6903      	ldr	r3, [r0, #16]
 8017342:	3614      	adds	r6, #20
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	18f3      	adds	r3, r6, r3
 8017348:	1f1d      	subs	r5, r3, #4
 801734a:	682c      	ldr	r4, [r5, #0]
 801734c:	000f      	movs	r7, r1
 801734e:	0020      	movs	r0, r4
 8017350:	9301      	str	r3, [sp, #4]
 8017352:	f7ff fd41 	bl	8016dd8 <__hi0bits>
 8017356:	2320      	movs	r3, #32
 8017358:	1a1b      	subs	r3, r3, r0
 801735a:	491f      	ldr	r1, [pc, #124]	; (80173d8 <__b2d+0x9c>)
 801735c:	603b      	str	r3, [r7, #0]
 801735e:	280a      	cmp	r0, #10
 8017360:	dc16      	bgt.n	8017390 <__b2d+0x54>
 8017362:	230b      	movs	r3, #11
 8017364:	0027      	movs	r7, r4
 8017366:	1a1b      	subs	r3, r3, r0
 8017368:	40df      	lsrs	r7, r3
 801736a:	4339      	orrs	r1, r7
 801736c:	469c      	mov	ip, r3
 801736e:	000b      	movs	r3, r1
 8017370:	2100      	movs	r1, #0
 8017372:	42ae      	cmp	r6, r5
 8017374:	d202      	bcs.n	801737c <__b2d+0x40>
 8017376:	9901      	ldr	r1, [sp, #4]
 8017378:	3908      	subs	r1, #8
 801737a:	6809      	ldr	r1, [r1, #0]
 801737c:	3015      	adds	r0, #21
 801737e:	4084      	lsls	r4, r0
 8017380:	4660      	mov	r0, ip
 8017382:	40c1      	lsrs	r1, r0
 8017384:	430c      	orrs	r4, r1
 8017386:	0022      	movs	r2, r4
 8017388:	0010      	movs	r0, r2
 801738a:	0019      	movs	r1, r3
 801738c:	b003      	add	sp, #12
 801738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017390:	2700      	movs	r7, #0
 8017392:	42ae      	cmp	r6, r5
 8017394:	d202      	bcs.n	801739c <__b2d+0x60>
 8017396:	9d01      	ldr	r5, [sp, #4]
 8017398:	3d08      	subs	r5, #8
 801739a:	682f      	ldr	r7, [r5, #0]
 801739c:	230b      	movs	r3, #11
 801739e:	425b      	negs	r3, r3
 80173a0:	469c      	mov	ip, r3
 80173a2:	4484      	add	ip, r0
 80173a4:	280b      	cmp	r0, #11
 80173a6:	d013      	beq.n	80173d0 <__b2d+0x94>
 80173a8:	4663      	mov	r3, ip
 80173aa:	2020      	movs	r0, #32
 80173ac:	409c      	lsls	r4, r3
 80173ae:	1ac0      	subs	r0, r0, r3
 80173b0:	003b      	movs	r3, r7
 80173b2:	40c3      	lsrs	r3, r0
 80173b4:	431c      	orrs	r4, r3
 80173b6:	4321      	orrs	r1, r4
 80173b8:	000b      	movs	r3, r1
 80173ba:	2100      	movs	r1, #0
 80173bc:	42b5      	cmp	r5, r6
 80173be:	d901      	bls.n	80173c4 <__b2d+0x88>
 80173c0:	3d04      	subs	r5, #4
 80173c2:	6829      	ldr	r1, [r5, #0]
 80173c4:	4664      	mov	r4, ip
 80173c6:	40c1      	lsrs	r1, r0
 80173c8:	40a7      	lsls	r7, r4
 80173ca:	430f      	orrs	r7, r1
 80173cc:	003a      	movs	r2, r7
 80173ce:	e7db      	b.n	8017388 <__b2d+0x4c>
 80173d0:	4321      	orrs	r1, r4
 80173d2:	000b      	movs	r3, r1
 80173d4:	e7fa      	b.n	80173cc <__b2d+0x90>
 80173d6:	46c0      	nop			; (mov r8, r8)
 80173d8:	3ff00000 	.word	0x3ff00000

080173dc <__d2b>:
 80173dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80173de:	2101      	movs	r1, #1
 80173e0:	0014      	movs	r4, r2
 80173e2:	001e      	movs	r6, r3
 80173e4:	9f08      	ldr	r7, [sp, #32]
 80173e6:	f7ff fbff 	bl	8016be8 <_Balloc>
 80173ea:	1e05      	subs	r5, r0, #0
 80173ec:	d105      	bne.n	80173fa <__d2b+0x1e>
 80173ee:	0002      	movs	r2, r0
 80173f0:	4b26      	ldr	r3, [pc, #152]	; (801748c <__d2b+0xb0>)
 80173f2:	4927      	ldr	r1, [pc, #156]	; (8017490 <__d2b+0xb4>)
 80173f4:	4827      	ldr	r0, [pc, #156]	; (8017494 <__d2b+0xb8>)
 80173f6:	f7fe f975 	bl	80156e4 <__assert_func>
 80173fa:	0333      	lsls	r3, r6, #12
 80173fc:	0076      	lsls	r6, r6, #1
 80173fe:	0b1b      	lsrs	r3, r3, #12
 8017400:	0d76      	lsrs	r6, r6, #21
 8017402:	d124      	bne.n	801744e <__d2b+0x72>
 8017404:	9301      	str	r3, [sp, #4]
 8017406:	2c00      	cmp	r4, #0
 8017408:	d027      	beq.n	801745a <__d2b+0x7e>
 801740a:	4668      	mov	r0, sp
 801740c:	9400      	str	r4, [sp, #0]
 801740e:	f7ff fcfd 	bl	8016e0c <__lo0bits>
 8017412:	9c00      	ldr	r4, [sp, #0]
 8017414:	2800      	cmp	r0, #0
 8017416:	d01e      	beq.n	8017456 <__d2b+0x7a>
 8017418:	9b01      	ldr	r3, [sp, #4]
 801741a:	2120      	movs	r1, #32
 801741c:	001a      	movs	r2, r3
 801741e:	1a09      	subs	r1, r1, r0
 8017420:	408a      	lsls	r2, r1
 8017422:	40c3      	lsrs	r3, r0
 8017424:	4322      	orrs	r2, r4
 8017426:	616a      	str	r2, [r5, #20]
 8017428:	9301      	str	r3, [sp, #4]
 801742a:	9c01      	ldr	r4, [sp, #4]
 801742c:	61ac      	str	r4, [r5, #24]
 801742e:	1e63      	subs	r3, r4, #1
 8017430:	419c      	sbcs	r4, r3
 8017432:	3401      	adds	r4, #1
 8017434:	612c      	str	r4, [r5, #16]
 8017436:	2e00      	cmp	r6, #0
 8017438:	d018      	beq.n	801746c <__d2b+0x90>
 801743a:	4b17      	ldr	r3, [pc, #92]	; (8017498 <__d2b+0xbc>)
 801743c:	18f6      	adds	r6, r6, r3
 801743e:	2335      	movs	r3, #53	; 0x35
 8017440:	1836      	adds	r6, r6, r0
 8017442:	1a18      	subs	r0, r3, r0
 8017444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017446:	603e      	str	r6, [r7, #0]
 8017448:	6018      	str	r0, [r3, #0]
 801744a:	0028      	movs	r0, r5
 801744c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801744e:	2280      	movs	r2, #128	; 0x80
 8017450:	0352      	lsls	r2, r2, #13
 8017452:	4313      	orrs	r3, r2
 8017454:	e7d6      	b.n	8017404 <__d2b+0x28>
 8017456:	616c      	str	r4, [r5, #20]
 8017458:	e7e7      	b.n	801742a <__d2b+0x4e>
 801745a:	a801      	add	r0, sp, #4
 801745c:	f7ff fcd6 	bl	8016e0c <__lo0bits>
 8017460:	2401      	movs	r4, #1
 8017462:	9b01      	ldr	r3, [sp, #4]
 8017464:	612c      	str	r4, [r5, #16]
 8017466:	616b      	str	r3, [r5, #20]
 8017468:	3020      	adds	r0, #32
 801746a:	e7e4      	b.n	8017436 <__d2b+0x5a>
 801746c:	4b0b      	ldr	r3, [pc, #44]	; (801749c <__d2b+0xc0>)
 801746e:	18c0      	adds	r0, r0, r3
 8017470:	4b0b      	ldr	r3, [pc, #44]	; (80174a0 <__d2b+0xc4>)
 8017472:	6038      	str	r0, [r7, #0]
 8017474:	18e3      	adds	r3, r4, r3
 8017476:	009b      	lsls	r3, r3, #2
 8017478:	18eb      	adds	r3, r5, r3
 801747a:	6958      	ldr	r0, [r3, #20]
 801747c:	f7ff fcac 	bl	8016dd8 <__hi0bits>
 8017480:	0164      	lsls	r4, r4, #5
 8017482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017484:	1a24      	subs	r4, r4, r0
 8017486:	601c      	str	r4, [r3, #0]
 8017488:	e7df      	b.n	801744a <__d2b+0x6e>
 801748a:	46c0      	nop			; (mov r8, r8)
 801748c:	0801b811 	.word	0x0801b811
 8017490:	0000030a 	.word	0x0000030a
 8017494:	0801b8a0 	.word	0x0801b8a0
 8017498:	fffffbcd 	.word	0xfffffbcd
 801749c:	fffffbce 	.word	0xfffffbce
 80174a0:	3fffffff 	.word	0x3fffffff

080174a4 <__ratio>:
 80174a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174a6:	b085      	sub	sp, #20
 80174a8:	000d      	movs	r5, r1
 80174aa:	a902      	add	r1, sp, #8
 80174ac:	0004      	movs	r4, r0
 80174ae:	f7ff ff45 	bl	801733c <__b2d>
 80174b2:	9000      	str	r0, [sp, #0]
 80174b4:	9101      	str	r1, [sp, #4]
 80174b6:	9e00      	ldr	r6, [sp, #0]
 80174b8:	9f01      	ldr	r7, [sp, #4]
 80174ba:	0028      	movs	r0, r5
 80174bc:	a903      	add	r1, sp, #12
 80174be:	f7ff ff3d 	bl	801733c <__b2d>
 80174c2:	6924      	ldr	r4, [r4, #16]
 80174c4:	692d      	ldr	r5, [r5, #16]
 80174c6:	0002      	movs	r2, r0
 80174c8:	1b65      	subs	r5, r4, r5
 80174ca:	016c      	lsls	r4, r5, #5
 80174cc:	46a4      	mov	ip, r4
 80174ce:	9d03      	ldr	r5, [sp, #12]
 80174d0:	9c02      	ldr	r4, [sp, #8]
 80174d2:	000b      	movs	r3, r1
 80174d4:	1b64      	subs	r4, r4, r5
 80174d6:	4464      	add	r4, ip
 80174d8:	0525      	lsls	r5, r4, #20
 80174da:	2c00      	cmp	r4, #0
 80174dc:	dd07      	ble.n	80174ee <__ratio+0x4a>
 80174de:	9901      	ldr	r1, [sp, #4]
 80174e0:	186f      	adds	r7, r5, r1
 80174e2:	0030      	movs	r0, r6
 80174e4:	0039      	movs	r1, r7
 80174e6:	f7ea f9d3 	bl	8001890 <__aeabi_ddiv>
 80174ea:	b005      	add	sp, #20
 80174ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174ee:	1b4b      	subs	r3, r1, r5
 80174f0:	e7f7      	b.n	80174e2 <__ratio+0x3e>

080174f2 <__copybits>:
 80174f2:	b570      	push	{r4, r5, r6, lr}
 80174f4:	0015      	movs	r5, r2
 80174f6:	6913      	ldr	r3, [r2, #16]
 80174f8:	3514      	adds	r5, #20
 80174fa:	009c      	lsls	r4, r3, #2
 80174fc:	0006      	movs	r6, r0
 80174fe:	002b      	movs	r3, r5
 8017500:	3901      	subs	r1, #1
 8017502:	1149      	asrs	r1, r1, #5
 8017504:	3101      	adds	r1, #1
 8017506:	0089      	lsls	r1, r1, #2
 8017508:	1841      	adds	r1, r0, r1
 801750a:	192c      	adds	r4, r5, r4
 801750c:	429c      	cmp	r4, r3
 801750e:	d80d      	bhi.n	801752c <__copybits+0x3a>
 8017510:	0015      	movs	r5, r2
 8017512:	3511      	adds	r5, #17
 8017514:	2300      	movs	r3, #0
 8017516:	42a5      	cmp	r5, r4
 8017518:	d803      	bhi.n	8017522 <__copybits+0x30>
 801751a:	1aa3      	subs	r3, r4, r2
 801751c:	3b11      	subs	r3, #17
 801751e:	089b      	lsrs	r3, r3, #2
 8017520:	009b      	lsls	r3, r3, #2
 8017522:	18c0      	adds	r0, r0, r3
 8017524:	2300      	movs	r3, #0
 8017526:	4281      	cmp	r1, r0
 8017528:	d803      	bhi.n	8017532 <__copybits+0x40>
 801752a:	bd70      	pop	{r4, r5, r6, pc}
 801752c:	cb20      	ldmia	r3!, {r5}
 801752e:	c620      	stmia	r6!, {r5}
 8017530:	e7ec      	b.n	801750c <__copybits+0x1a>
 8017532:	c008      	stmia	r0!, {r3}
 8017534:	e7f7      	b.n	8017526 <__copybits+0x34>

08017536 <__any_on>:
 8017536:	0002      	movs	r2, r0
 8017538:	6900      	ldr	r0, [r0, #16]
 801753a:	b510      	push	{r4, lr}
 801753c:	3214      	adds	r2, #20
 801753e:	114b      	asrs	r3, r1, #5
 8017540:	4298      	cmp	r0, r3
 8017542:	db13      	blt.n	801756c <__any_on+0x36>
 8017544:	dd0c      	ble.n	8017560 <__any_on+0x2a>
 8017546:	241f      	movs	r4, #31
 8017548:	0008      	movs	r0, r1
 801754a:	4020      	ands	r0, r4
 801754c:	4221      	tst	r1, r4
 801754e:	d007      	beq.n	8017560 <__any_on+0x2a>
 8017550:	0099      	lsls	r1, r3, #2
 8017552:	588c      	ldr	r4, [r1, r2]
 8017554:	0021      	movs	r1, r4
 8017556:	40c1      	lsrs	r1, r0
 8017558:	4081      	lsls	r1, r0
 801755a:	2001      	movs	r0, #1
 801755c:	428c      	cmp	r4, r1
 801755e:	d104      	bne.n	801756a <__any_on+0x34>
 8017560:	009b      	lsls	r3, r3, #2
 8017562:	18d3      	adds	r3, r2, r3
 8017564:	4293      	cmp	r3, r2
 8017566:	d803      	bhi.n	8017570 <__any_on+0x3a>
 8017568:	2000      	movs	r0, #0
 801756a:	bd10      	pop	{r4, pc}
 801756c:	0003      	movs	r3, r0
 801756e:	e7f7      	b.n	8017560 <__any_on+0x2a>
 8017570:	3b04      	subs	r3, #4
 8017572:	6819      	ldr	r1, [r3, #0]
 8017574:	2900      	cmp	r1, #0
 8017576:	d0f5      	beq.n	8017564 <__any_on+0x2e>
 8017578:	2001      	movs	r0, #1
 801757a:	e7f6      	b.n	801756a <__any_on+0x34>

0801757c <_calloc_r>:
 801757c:	434a      	muls	r2, r1
 801757e:	b570      	push	{r4, r5, r6, lr}
 8017580:	0011      	movs	r1, r2
 8017582:	0015      	movs	r5, r2
 8017584:	f7fc fb98 	bl	8013cb8 <_malloc_r>
 8017588:	1e04      	subs	r4, r0, #0
 801758a:	d003      	beq.n	8017594 <_calloc_r+0x18>
 801758c:	002a      	movs	r2, r5
 801758e:	2100      	movs	r1, #0
 8017590:	f7fc fb3f 	bl	8013c12 <memset>
 8017594:	0020      	movs	r0, r4
 8017596:	bd70      	pop	{r4, r5, r6, pc}

08017598 <_realloc_r>:
 8017598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801759a:	0007      	movs	r7, r0
 801759c:	000d      	movs	r5, r1
 801759e:	0016      	movs	r6, r2
 80175a0:	2900      	cmp	r1, #0
 80175a2:	d105      	bne.n	80175b0 <_realloc_r+0x18>
 80175a4:	0011      	movs	r1, r2
 80175a6:	f7fc fb87 	bl	8013cb8 <_malloc_r>
 80175aa:	0004      	movs	r4, r0
 80175ac:	0020      	movs	r0, r4
 80175ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175b0:	2a00      	cmp	r2, #0
 80175b2:	d103      	bne.n	80175bc <_realloc_r+0x24>
 80175b4:	f7fc fb36 	bl	8013c24 <_free_r>
 80175b8:	0034      	movs	r4, r6
 80175ba:	e7f7      	b.n	80175ac <_realloc_r+0x14>
 80175bc:	f000 fe11 	bl	80181e2 <_malloc_usable_size_r>
 80175c0:	002c      	movs	r4, r5
 80175c2:	42b0      	cmp	r0, r6
 80175c4:	d2f2      	bcs.n	80175ac <_realloc_r+0x14>
 80175c6:	0031      	movs	r1, r6
 80175c8:	0038      	movs	r0, r7
 80175ca:	f7fc fb75 	bl	8013cb8 <_malloc_r>
 80175ce:	1e04      	subs	r4, r0, #0
 80175d0:	d0ec      	beq.n	80175ac <_realloc_r+0x14>
 80175d2:	0029      	movs	r1, r5
 80175d4:	0032      	movs	r2, r6
 80175d6:	f7fc fb13 	bl	8013c00 <memcpy>
 80175da:	0029      	movs	r1, r5
 80175dc:	0038      	movs	r0, r7
 80175de:	f7fc fb21 	bl	8013c24 <_free_r>
 80175e2:	e7e3      	b.n	80175ac <_realloc_r+0x14>

080175e4 <__ssputs_r>:
 80175e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175e6:	688e      	ldr	r6, [r1, #8]
 80175e8:	b085      	sub	sp, #20
 80175ea:	0007      	movs	r7, r0
 80175ec:	000c      	movs	r4, r1
 80175ee:	9203      	str	r2, [sp, #12]
 80175f0:	9301      	str	r3, [sp, #4]
 80175f2:	429e      	cmp	r6, r3
 80175f4:	d83c      	bhi.n	8017670 <__ssputs_r+0x8c>
 80175f6:	2390      	movs	r3, #144	; 0x90
 80175f8:	898a      	ldrh	r2, [r1, #12]
 80175fa:	00db      	lsls	r3, r3, #3
 80175fc:	421a      	tst	r2, r3
 80175fe:	d034      	beq.n	801766a <__ssputs_r+0x86>
 8017600:	2503      	movs	r5, #3
 8017602:	6909      	ldr	r1, [r1, #16]
 8017604:	6823      	ldr	r3, [r4, #0]
 8017606:	1a5b      	subs	r3, r3, r1
 8017608:	9302      	str	r3, [sp, #8]
 801760a:	6963      	ldr	r3, [r4, #20]
 801760c:	9802      	ldr	r0, [sp, #8]
 801760e:	435d      	muls	r5, r3
 8017610:	0feb      	lsrs	r3, r5, #31
 8017612:	195d      	adds	r5, r3, r5
 8017614:	9b01      	ldr	r3, [sp, #4]
 8017616:	106d      	asrs	r5, r5, #1
 8017618:	3301      	adds	r3, #1
 801761a:	181b      	adds	r3, r3, r0
 801761c:	42ab      	cmp	r3, r5
 801761e:	d900      	bls.n	8017622 <__ssputs_r+0x3e>
 8017620:	001d      	movs	r5, r3
 8017622:	0553      	lsls	r3, r2, #21
 8017624:	d532      	bpl.n	801768c <__ssputs_r+0xa8>
 8017626:	0029      	movs	r1, r5
 8017628:	0038      	movs	r0, r7
 801762a:	f7fc fb45 	bl	8013cb8 <_malloc_r>
 801762e:	1e06      	subs	r6, r0, #0
 8017630:	d109      	bne.n	8017646 <__ssputs_r+0x62>
 8017632:	230c      	movs	r3, #12
 8017634:	603b      	str	r3, [r7, #0]
 8017636:	2340      	movs	r3, #64	; 0x40
 8017638:	2001      	movs	r0, #1
 801763a:	89a2      	ldrh	r2, [r4, #12]
 801763c:	4240      	negs	r0, r0
 801763e:	4313      	orrs	r3, r2
 8017640:	81a3      	strh	r3, [r4, #12]
 8017642:	b005      	add	sp, #20
 8017644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017646:	9a02      	ldr	r2, [sp, #8]
 8017648:	6921      	ldr	r1, [r4, #16]
 801764a:	f7fc fad9 	bl	8013c00 <memcpy>
 801764e:	89a3      	ldrh	r3, [r4, #12]
 8017650:	4a14      	ldr	r2, [pc, #80]	; (80176a4 <__ssputs_r+0xc0>)
 8017652:	401a      	ands	r2, r3
 8017654:	2380      	movs	r3, #128	; 0x80
 8017656:	4313      	orrs	r3, r2
 8017658:	81a3      	strh	r3, [r4, #12]
 801765a:	9b02      	ldr	r3, [sp, #8]
 801765c:	6126      	str	r6, [r4, #16]
 801765e:	18f6      	adds	r6, r6, r3
 8017660:	6026      	str	r6, [r4, #0]
 8017662:	6165      	str	r5, [r4, #20]
 8017664:	9e01      	ldr	r6, [sp, #4]
 8017666:	1aed      	subs	r5, r5, r3
 8017668:	60a5      	str	r5, [r4, #8]
 801766a:	9b01      	ldr	r3, [sp, #4]
 801766c:	429e      	cmp	r6, r3
 801766e:	d900      	bls.n	8017672 <__ssputs_r+0x8e>
 8017670:	9e01      	ldr	r6, [sp, #4]
 8017672:	0032      	movs	r2, r6
 8017674:	9903      	ldr	r1, [sp, #12]
 8017676:	6820      	ldr	r0, [r4, #0]
 8017678:	f000 fda0 	bl	80181bc <memmove>
 801767c:	68a3      	ldr	r3, [r4, #8]
 801767e:	2000      	movs	r0, #0
 8017680:	1b9b      	subs	r3, r3, r6
 8017682:	60a3      	str	r3, [r4, #8]
 8017684:	6823      	ldr	r3, [r4, #0]
 8017686:	199e      	adds	r6, r3, r6
 8017688:	6026      	str	r6, [r4, #0]
 801768a:	e7da      	b.n	8017642 <__ssputs_r+0x5e>
 801768c:	002a      	movs	r2, r5
 801768e:	0038      	movs	r0, r7
 8017690:	f7ff ff82 	bl	8017598 <_realloc_r>
 8017694:	1e06      	subs	r6, r0, #0
 8017696:	d1e0      	bne.n	801765a <__ssputs_r+0x76>
 8017698:	0038      	movs	r0, r7
 801769a:	6921      	ldr	r1, [r4, #16]
 801769c:	f7fc fac2 	bl	8013c24 <_free_r>
 80176a0:	e7c7      	b.n	8017632 <__ssputs_r+0x4e>
 80176a2:	46c0      	nop			; (mov r8, r8)
 80176a4:	fffffb7f 	.word	0xfffffb7f

080176a8 <_svfiprintf_r>:
 80176a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176aa:	b0a1      	sub	sp, #132	; 0x84
 80176ac:	9003      	str	r0, [sp, #12]
 80176ae:	001d      	movs	r5, r3
 80176b0:	898b      	ldrh	r3, [r1, #12]
 80176b2:	000f      	movs	r7, r1
 80176b4:	0016      	movs	r6, r2
 80176b6:	061b      	lsls	r3, r3, #24
 80176b8:	d511      	bpl.n	80176de <_svfiprintf_r+0x36>
 80176ba:	690b      	ldr	r3, [r1, #16]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d10e      	bne.n	80176de <_svfiprintf_r+0x36>
 80176c0:	2140      	movs	r1, #64	; 0x40
 80176c2:	f7fc faf9 	bl	8013cb8 <_malloc_r>
 80176c6:	6038      	str	r0, [r7, #0]
 80176c8:	6138      	str	r0, [r7, #16]
 80176ca:	2800      	cmp	r0, #0
 80176cc:	d105      	bne.n	80176da <_svfiprintf_r+0x32>
 80176ce:	230c      	movs	r3, #12
 80176d0:	9a03      	ldr	r2, [sp, #12]
 80176d2:	3801      	subs	r0, #1
 80176d4:	6013      	str	r3, [r2, #0]
 80176d6:	b021      	add	sp, #132	; 0x84
 80176d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176da:	2340      	movs	r3, #64	; 0x40
 80176dc:	617b      	str	r3, [r7, #20]
 80176de:	2300      	movs	r3, #0
 80176e0:	ac08      	add	r4, sp, #32
 80176e2:	6163      	str	r3, [r4, #20]
 80176e4:	3320      	adds	r3, #32
 80176e6:	7663      	strb	r3, [r4, #25]
 80176e8:	3310      	adds	r3, #16
 80176ea:	76a3      	strb	r3, [r4, #26]
 80176ec:	9507      	str	r5, [sp, #28]
 80176ee:	0035      	movs	r5, r6
 80176f0:	782b      	ldrb	r3, [r5, #0]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d001      	beq.n	80176fa <_svfiprintf_r+0x52>
 80176f6:	2b25      	cmp	r3, #37	; 0x25
 80176f8:	d147      	bne.n	801778a <_svfiprintf_r+0xe2>
 80176fa:	1bab      	subs	r3, r5, r6
 80176fc:	9305      	str	r3, [sp, #20]
 80176fe:	42b5      	cmp	r5, r6
 8017700:	d00c      	beq.n	801771c <_svfiprintf_r+0x74>
 8017702:	0032      	movs	r2, r6
 8017704:	0039      	movs	r1, r7
 8017706:	9803      	ldr	r0, [sp, #12]
 8017708:	f7ff ff6c 	bl	80175e4 <__ssputs_r>
 801770c:	1c43      	adds	r3, r0, #1
 801770e:	d100      	bne.n	8017712 <_svfiprintf_r+0x6a>
 8017710:	e0ae      	b.n	8017870 <_svfiprintf_r+0x1c8>
 8017712:	6962      	ldr	r2, [r4, #20]
 8017714:	9b05      	ldr	r3, [sp, #20]
 8017716:	4694      	mov	ip, r2
 8017718:	4463      	add	r3, ip
 801771a:	6163      	str	r3, [r4, #20]
 801771c:	782b      	ldrb	r3, [r5, #0]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d100      	bne.n	8017724 <_svfiprintf_r+0x7c>
 8017722:	e0a5      	b.n	8017870 <_svfiprintf_r+0x1c8>
 8017724:	2201      	movs	r2, #1
 8017726:	2300      	movs	r3, #0
 8017728:	4252      	negs	r2, r2
 801772a:	6062      	str	r2, [r4, #4]
 801772c:	a904      	add	r1, sp, #16
 801772e:	3254      	adds	r2, #84	; 0x54
 8017730:	1852      	adds	r2, r2, r1
 8017732:	1c6e      	adds	r6, r5, #1
 8017734:	6023      	str	r3, [r4, #0]
 8017736:	60e3      	str	r3, [r4, #12]
 8017738:	60a3      	str	r3, [r4, #8]
 801773a:	7013      	strb	r3, [r2, #0]
 801773c:	65a3      	str	r3, [r4, #88]	; 0x58
 801773e:	2205      	movs	r2, #5
 8017740:	7831      	ldrb	r1, [r6, #0]
 8017742:	4854      	ldr	r0, [pc, #336]	; (8017894 <_svfiprintf_r+0x1ec>)
 8017744:	f7ff fa34 	bl	8016bb0 <memchr>
 8017748:	1c75      	adds	r5, r6, #1
 801774a:	2800      	cmp	r0, #0
 801774c:	d11f      	bne.n	801778e <_svfiprintf_r+0xe6>
 801774e:	6822      	ldr	r2, [r4, #0]
 8017750:	06d3      	lsls	r3, r2, #27
 8017752:	d504      	bpl.n	801775e <_svfiprintf_r+0xb6>
 8017754:	2353      	movs	r3, #83	; 0x53
 8017756:	a904      	add	r1, sp, #16
 8017758:	185b      	adds	r3, r3, r1
 801775a:	2120      	movs	r1, #32
 801775c:	7019      	strb	r1, [r3, #0]
 801775e:	0713      	lsls	r3, r2, #28
 8017760:	d504      	bpl.n	801776c <_svfiprintf_r+0xc4>
 8017762:	2353      	movs	r3, #83	; 0x53
 8017764:	a904      	add	r1, sp, #16
 8017766:	185b      	adds	r3, r3, r1
 8017768:	212b      	movs	r1, #43	; 0x2b
 801776a:	7019      	strb	r1, [r3, #0]
 801776c:	7833      	ldrb	r3, [r6, #0]
 801776e:	2b2a      	cmp	r3, #42	; 0x2a
 8017770:	d016      	beq.n	80177a0 <_svfiprintf_r+0xf8>
 8017772:	0035      	movs	r5, r6
 8017774:	2100      	movs	r1, #0
 8017776:	200a      	movs	r0, #10
 8017778:	68e3      	ldr	r3, [r4, #12]
 801777a:	782a      	ldrb	r2, [r5, #0]
 801777c:	1c6e      	adds	r6, r5, #1
 801777e:	3a30      	subs	r2, #48	; 0x30
 8017780:	2a09      	cmp	r2, #9
 8017782:	d94e      	bls.n	8017822 <_svfiprintf_r+0x17a>
 8017784:	2900      	cmp	r1, #0
 8017786:	d111      	bne.n	80177ac <_svfiprintf_r+0x104>
 8017788:	e017      	b.n	80177ba <_svfiprintf_r+0x112>
 801778a:	3501      	adds	r5, #1
 801778c:	e7b0      	b.n	80176f0 <_svfiprintf_r+0x48>
 801778e:	4b41      	ldr	r3, [pc, #260]	; (8017894 <_svfiprintf_r+0x1ec>)
 8017790:	6822      	ldr	r2, [r4, #0]
 8017792:	1ac0      	subs	r0, r0, r3
 8017794:	2301      	movs	r3, #1
 8017796:	4083      	lsls	r3, r0
 8017798:	4313      	orrs	r3, r2
 801779a:	002e      	movs	r6, r5
 801779c:	6023      	str	r3, [r4, #0]
 801779e:	e7ce      	b.n	801773e <_svfiprintf_r+0x96>
 80177a0:	9b07      	ldr	r3, [sp, #28]
 80177a2:	1d19      	adds	r1, r3, #4
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	9107      	str	r1, [sp, #28]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	db01      	blt.n	80177b0 <_svfiprintf_r+0x108>
 80177ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80177ae:	e004      	b.n	80177ba <_svfiprintf_r+0x112>
 80177b0:	425b      	negs	r3, r3
 80177b2:	60e3      	str	r3, [r4, #12]
 80177b4:	2302      	movs	r3, #2
 80177b6:	4313      	orrs	r3, r2
 80177b8:	6023      	str	r3, [r4, #0]
 80177ba:	782b      	ldrb	r3, [r5, #0]
 80177bc:	2b2e      	cmp	r3, #46	; 0x2e
 80177be:	d10a      	bne.n	80177d6 <_svfiprintf_r+0x12e>
 80177c0:	786b      	ldrb	r3, [r5, #1]
 80177c2:	2b2a      	cmp	r3, #42	; 0x2a
 80177c4:	d135      	bne.n	8017832 <_svfiprintf_r+0x18a>
 80177c6:	9b07      	ldr	r3, [sp, #28]
 80177c8:	3502      	adds	r5, #2
 80177ca:	1d1a      	adds	r2, r3, #4
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	9207      	str	r2, [sp, #28]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	db2b      	blt.n	801782c <_svfiprintf_r+0x184>
 80177d4:	9309      	str	r3, [sp, #36]	; 0x24
 80177d6:	4e30      	ldr	r6, [pc, #192]	; (8017898 <_svfiprintf_r+0x1f0>)
 80177d8:	2203      	movs	r2, #3
 80177da:	0030      	movs	r0, r6
 80177dc:	7829      	ldrb	r1, [r5, #0]
 80177de:	f7ff f9e7 	bl	8016bb0 <memchr>
 80177e2:	2800      	cmp	r0, #0
 80177e4:	d006      	beq.n	80177f4 <_svfiprintf_r+0x14c>
 80177e6:	2340      	movs	r3, #64	; 0x40
 80177e8:	1b80      	subs	r0, r0, r6
 80177ea:	4083      	lsls	r3, r0
 80177ec:	6822      	ldr	r2, [r4, #0]
 80177ee:	3501      	adds	r5, #1
 80177f0:	4313      	orrs	r3, r2
 80177f2:	6023      	str	r3, [r4, #0]
 80177f4:	7829      	ldrb	r1, [r5, #0]
 80177f6:	2206      	movs	r2, #6
 80177f8:	4828      	ldr	r0, [pc, #160]	; (801789c <_svfiprintf_r+0x1f4>)
 80177fa:	1c6e      	adds	r6, r5, #1
 80177fc:	7621      	strb	r1, [r4, #24]
 80177fe:	f7ff f9d7 	bl	8016bb0 <memchr>
 8017802:	2800      	cmp	r0, #0
 8017804:	d03c      	beq.n	8017880 <_svfiprintf_r+0x1d8>
 8017806:	4b26      	ldr	r3, [pc, #152]	; (80178a0 <_svfiprintf_r+0x1f8>)
 8017808:	2b00      	cmp	r3, #0
 801780a:	d125      	bne.n	8017858 <_svfiprintf_r+0x1b0>
 801780c:	2207      	movs	r2, #7
 801780e:	9b07      	ldr	r3, [sp, #28]
 8017810:	3307      	adds	r3, #7
 8017812:	4393      	bics	r3, r2
 8017814:	3308      	adds	r3, #8
 8017816:	9307      	str	r3, [sp, #28]
 8017818:	6963      	ldr	r3, [r4, #20]
 801781a:	9a04      	ldr	r2, [sp, #16]
 801781c:	189b      	adds	r3, r3, r2
 801781e:	6163      	str	r3, [r4, #20]
 8017820:	e765      	b.n	80176ee <_svfiprintf_r+0x46>
 8017822:	4343      	muls	r3, r0
 8017824:	0035      	movs	r5, r6
 8017826:	2101      	movs	r1, #1
 8017828:	189b      	adds	r3, r3, r2
 801782a:	e7a6      	b.n	801777a <_svfiprintf_r+0xd2>
 801782c:	2301      	movs	r3, #1
 801782e:	425b      	negs	r3, r3
 8017830:	e7d0      	b.n	80177d4 <_svfiprintf_r+0x12c>
 8017832:	2300      	movs	r3, #0
 8017834:	200a      	movs	r0, #10
 8017836:	001a      	movs	r2, r3
 8017838:	3501      	adds	r5, #1
 801783a:	6063      	str	r3, [r4, #4]
 801783c:	7829      	ldrb	r1, [r5, #0]
 801783e:	1c6e      	adds	r6, r5, #1
 8017840:	3930      	subs	r1, #48	; 0x30
 8017842:	2909      	cmp	r1, #9
 8017844:	d903      	bls.n	801784e <_svfiprintf_r+0x1a6>
 8017846:	2b00      	cmp	r3, #0
 8017848:	d0c5      	beq.n	80177d6 <_svfiprintf_r+0x12e>
 801784a:	9209      	str	r2, [sp, #36]	; 0x24
 801784c:	e7c3      	b.n	80177d6 <_svfiprintf_r+0x12e>
 801784e:	4342      	muls	r2, r0
 8017850:	0035      	movs	r5, r6
 8017852:	2301      	movs	r3, #1
 8017854:	1852      	adds	r2, r2, r1
 8017856:	e7f1      	b.n	801783c <_svfiprintf_r+0x194>
 8017858:	ab07      	add	r3, sp, #28
 801785a:	9300      	str	r3, [sp, #0]
 801785c:	003a      	movs	r2, r7
 801785e:	0021      	movs	r1, r4
 8017860:	4b10      	ldr	r3, [pc, #64]	; (80178a4 <_svfiprintf_r+0x1fc>)
 8017862:	9803      	ldr	r0, [sp, #12]
 8017864:	f7fc fb30 	bl	8013ec8 <_printf_float>
 8017868:	9004      	str	r0, [sp, #16]
 801786a:	9b04      	ldr	r3, [sp, #16]
 801786c:	3301      	adds	r3, #1
 801786e:	d1d3      	bne.n	8017818 <_svfiprintf_r+0x170>
 8017870:	89bb      	ldrh	r3, [r7, #12]
 8017872:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017874:	065b      	lsls	r3, r3, #25
 8017876:	d400      	bmi.n	801787a <_svfiprintf_r+0x1d2>
 8017878:	e72d      	b.n	80176d6 <_svfiprintf_r+0x2e>
 801787a:	2001      	movs	r0, #1
 801787c:	4240      	negs	r0, r0
 801787e:	e72a      	b.n	80176d6 <_svfiprintf_r+0x2e>
 8017880:	ab07      	add	r3, sp, #28
 8017882:	9300      	str	r3, [sp, #0]
 8017884:	003a      	movs	r2, r7
 8017886:	0021      	movs	r1, r4
 8017888:	4b06      	ldr	r3, [pc, #24]	; (80178a4 <_svfiprintf_r+0x1fc>)
 801788a:	9803      	ldr	r0, [sp, #12]
 801788c:	f7fc fdda 	bl	8014444 <_printf_i>
 8017890:	e7ea      	b.n	8017868 <_svfiprintf_r+0x1c0>
 8017892:	46c0      	nop			; (mov r8, r8)
 8017894:	0801b9fc 	.word	0x0801b9fc
 8017898:	0801ba02 	.word	0x0801ba02
 801789c:	0801ba06 	.word	0x0801ba06
 80178a0:	08013ec9 	.word	0x08013ec9
 80178a4:	080175e5 	.word	0x080175e5

080178a8 <__sfputc_r>:
 80178a8:	6893      	ldr	r3, [r2, #8]
 80178aa:	b510      	push	{r4, lr}
 80178ac:	3b01      	subs	r3, #1
 80178ae:	6093      	str	r3, [r2, #8]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	da04      	bge.n	80178be <__sfputc_r+0x16>
 80178b4:	6994      	ldr	r4, [r2, #24]
 80178b6:	42a3      	cmp	r3, r4
 80178b8:	db07      	blt.n	80178ca <__sfputc_r+0x22>
 80178ba:	290a      	cmp	r1, #10
 80178bc:	d005      	beq.n	80178ca <__sfputc_r+0x22>
 80178be:	6813      	ldr	r3, [r2, #0]
 80178c0:	1c58      	adds	r0, r3, #1
 80178c2:	6010      	str	r0, [r2, #0]
 80178c4:	7019      	strb	r1, [r3, #0]
 80178c6:	0008      	movs	r0, r1
 80178c8:	bd10      	pop	{r4, pc}
 80178ca:	f000 f955 	bl	8017b78 <__swbuf_r>
 80178ce:	0001      	movs	r1, r0
 80178d0:	e7f9      	b.n	80178c6 <__sfputc_r+0x1e>

080178d2 <__sfputs_r>:
 80178d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d4:	0006      	movs	r6, r0
 80178d6:	000f      	movs	r7, r1
 80178d8:	0014      	movs	r4, r2
 80178da:	18d5      	adds	r5, r2, r3
 80178dc:	42ac      	cmp	r4, r5
 80178de:	d101      	bne.n	80178e4 <__sfputs_r+0x12>
 80178e0:	2000      	movs	r0, #0
 80178e2:	e007      	b.n	80178f4 <__sfputs_r+0x22>
 80178e4:	7821      	ldrb	r1, [r4, #0]
 80178e6:	003a      	movs	r2, r7
 80178e8:	0030      	movs	r0, r6
 80178ea:	f7ff ffdd 	bl	80178a8 <__sfputc_r>
 80178ee:	3401      	adds	r4, #1
 80178f0:	1c43      	adds	r3, r0, #1
 80178f2:	d1f3      	bne.n	80178dc <__sfputs_r+0xa>
 80178f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080178f8 <_vfiprintf_r>:
 80178f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178fa:	b0a1      	sub	sp, #132	; 0x84
 80178fc:	0006      	movs	r6, r0
 80178fe:	000c      	movs	r4, r1
 8017900:	001f      	movs	r7, r3
 8017902:	9203      	str	r2, [sp, #12]
 8017904:	2800      	cmp	r0, #0
 8017906:	d004      	beq.n	8017912 <_vfiprintf_r+0x1a>
 8017908:	6983      	ldr	r3, [r0, #24]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d101      	bne.n	8017912 <_vfiprintf_r+0x1a>
 801790e:	f000 fb45 	bl	8017f9c <__sinit>
 8017912:	4b8e      	ldr	r3, [pc, #568]	; (8017b4c <_vfiprintf_r+0x254>)
 8017914:	429c      	cmp	r4, r3
 8017916:	d11c      	bne.n	8017952 <_vfiprintf_r+0x5a>
 8017918:	6874      	ldr	r4, [r6, #4]
 801791a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801791c:	07db      	lsls	r3, r3, #31
 801791e:	d405      	bmi.n	801792c <_vfiprintf_r+0x34>
 8017920:	89a3      	ldrh	r3, [r4, #12]
 8017922:	059b      	lsls	r3, r3, #22
 8017924:	d402      	bmi.n	801792c <_vfiprintf_r+0x34>
 8017926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017928:	f000 fbd9 	bl	80180de <__retarget_lock_acquire_recursive>
 801792c:	89a3      	ldrh	r3, [r4, #12]
 801792e:	071b      	lsls	r3, r3, #28
 8017930:	d502      	bpl.n	8017938 <_vfiprintf_r+0x40>
 8017932:	6923      	ldr	r3, [r4, #16]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d11d      	bne.n	8017974 <_vfiprintf_r+0x7c>
 8017938:	0021      	movs	r1, r4
 801793a:	0030      	movs	r0, r6
 801793c:	f000 f980 	bl	8017c40 <__swsetup_r>
 8017940:	2800      	cmp	r0, #0
 8017942:	d017      	beq.n	8017974 <_vfiprintf_r+0x7c>
 8017944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017946:	07db      	lsls	r3, r3, #31
 8017948:	d50d      	bpl.n	8017966 <_vfiprintf_r+0x6e>
 801794a:	2001      	movs	r0, #1
 801794c:	4240      	negs	r0, r0
 801794e:	b021      	add	sp, #132	; 0x84
 8017950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017952:	4b7f      	ldr	r3, [pc, #508]	; (8017b50 <_vfiprintf_r+0x258>)
 8017954:	429c      	cmp	r4, r3
 8017956:	d101      	bne.n	801795c <_vfiprintf_r+0x64>
 8017958:	68b4      	ldr	r4, [r6, #8]
 801795a:	e7de      	b.n	801791a <_vfiprintf_r+0x22>
 801795c:	4b7d      	ldr	r3, [pc, #500]	; (8017b54 <_vfiprintf_r+0x25c>)
 801795e:	429c      	cmp	r4, r3
 8017960:	d1db      	bne.n	801791a <_vfiprintf_r+0x22>
 8017962:	68f4      	ldr	r4, [r6, #12]
 8017964:	e7d9      	b.n	801791a <_vfiprintf_r+0x22>
 8017966:	89a3      	ldrh	r3, [r4, #12]
 8017968:	059b      	lsls	r3, r3, #22
 801796a:	d4ee      	bmi.n	801794a <_vfiprintf_r+0x52>
 801796c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801796e:	f000 fbb7 	bl	80180e0 <__retarget_lock_release_recursive>
 8017972:	e7ea      	b.n	801794a <_vfiprintf_r+0x52>
 8017974:	2300      	movs	r3, #0
 8017976:	ad08      	add	r5, sp, #32
 8017978:	616b      	str	r3, [r5, #20]
 801797a:	3320      	adds	r3, #32
 801797c:	766b      	strb	r3, [r5, #25]
 801797e:	3310      	adds	r3, #16
 8017980:	76ab      	strb	r3, [r5, #26]
 8017982:	9707      	str	r7, [sp, #28]
 8017984:	9f03      	ldr	r7, [sp, #12]
 8017986:	783b      	ldrb	r3, [r7, #0]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d001      	beq.n	8017990 <_vfiprintf_r+0x98>
 801798c:	2b25      	cmp	r3, #37	; 0x25
 801798e:	d14e      	bne.n	8017a2e <_vfiprintf_r+0x136>
 8017990:	9b03      	ldr	r3, [sp, #12]
 8017992:	1afb      	subs	r3, r7, r3
 8017994:	9305      	str	r3, [sp, #20]
 8017996:	9b03      	ldr	r3, [sp, #12]
 8017998:	429f      	cmp	r7, r3
 801799a:	d00d      	beq.n	80179b8 <_vfiprintf_r+0xc0>
 801799c:	9b05      	ldr	r3, [sp, #20]
 801799e:	0021      	movs	r1, r4
 80179a0:	0030      	movs	r0, r6
 80179a2:	9a03      	ldr	r2, [sp, #12]
 80179a4:	f7ff ff95 	bl	80178d2 <__sfputs_r>
 80179a8:	1c43      	adds	r3, r0, #1
 80179aa:	d100      	bne.n	80179ae <_vfiprintf_r+0xb6>
 80179ac:	e0b5      	b.n	8017b1a <_vfiprintf_r+0x222>
 80179ae:	696a      	ldr	r2, [r5, #20]
 80179b0:	9b05      	ldr	r3, [sp, #20]
 80179b2:	4694      	mov	ip, r2
 80179b4:	4463      	add	r3, ip
 80179b6:	616b      	str	r3, [r5, #20]
 80179b8:	783b      	ldrb	r3, [r7, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d100      	bne.n	80179c0 <_vfiprintf_r+0xc8>
 80179be:	e0ac      	b.n	8017b1a <_vfiprintf_r+0x222>
 80179c0:	2201      	movs	r2, #1
 80179c2:	1c7b      	adds	r3, r7, #1
 80179c4:	9303      	str	r3, [sp, #12]
 80179c6:	2300      	movs	r3, #0
 80179c8:	4252      	negs	r2, r2
 80179ca:	606a      	str	r2, [r5, #4]
 80179cc:	a904      	add	r1, sp, #16
 80179ce:	3254      	adds	r2, #84	; 0x54
 80179d0:	1852      	adds	r2, r2, r1
 80179d2:	602b      	str	r3, [r5, #0]
 80179d4:	60eb      	str	r3, [r5, #12]
 80179d6:	60ab      	str	r3, [r5, #8]
 80179d8:	7013      	strb	r3, [r2, #0]
 80179da:	65ab      	str	r3, [r5, #88]	; 0x58
 80179dc:	9b03      	ldr	r3, [sp, #12]
 80179de:	2205      	movs	r2, #5
 80179e0:	7819      	ldrb	r1, [r3, #0]
 80179e2:	485d      	ldr	r0, [pc, #372]	; (8017b58 <_vfiprintf_r+0x260>)
 80179e4:	f7ff f8e4 	bl	8016bb0 <memchr>
 80179e8:	9b03      	ldr	r3, [sp, #12]
 80179ea:	1c5f      	adds	r7, r3, #1
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d120      	bne.n	8017a32 <_vfiprintf_r+0x13a>
 80179f0:	682a      	ldr	r2, [r5, #0]
 80179f2:	06d3      	lsls	r3, r2, #27
 80179f4:	d504      	bpl.n	8017a00 <_vfiprintf_r+0x108>
 80179f6:	2353      	movs	r3, #83	; 0x53
 80179f8:	a904      	add	r1, sp, #16
 80179fa:	185b      	adds	r3, r3, r1
 80179fc:	2120      	movs	r1, #32
 80179fe:	7019      	strb	r1, [r3, #0]
 8017a00:	0713      	lsls	r3, r2, #28
 8017a02:	d504      	bpl.n	8017a0e <_vfiprintf_r+0x116>
 8017a04:	2353      	movs	r3, #83	; 0x53
 8017a06:	a904      	add	r1, sp, #16
 8017a08:	185b      	adds	r3, r3, r1
 8017a0a:	212b      	movs	r1, #43	; 0x2b
 8017a0c:	7019      	strb	r1, [r3, #0]
 8017a0e:	9b03      	ldr	r3, [sp, #12]
 8017a10:	781b      	ldrb	r3, [r3, #0]
 8017a12:	2b2a      	cmp	r3, #42	; 0x2a
 8017a14:	d016      	beq.n	8017a44 <_vfiprintf_r+0x14c>
 8017a16:	2100      	movs	r1, #0
 8017a18:	68eb      	ldr	r3, [r5, #12]
 8017a1a:	9f03      	ldr	r7, [sp, #12]
 8017a1c:	783a      	ldrb	r2, [r7, #0]
 8017a1e:	1c78      	adds	r0, r7, #1
 8017a20:	3a30      	subs	r2, #48	; 0x30
 8017a22:	4684      	mov	ip, r0
 8017a24:	2a09      	cmp	r2, #9
 8017a26:	d94f      	bls.n	8017ac8 <_vfiprintf_r+0x1d0>
 8017a28:	2900      	cmp	r1, #0
 8017a2a:	d111      	bne.n	8017a50 <_vfiprintf_r+0x158>
 8017a2c:	e017      	b.n	8017a5e <_vfiprintf_r+0x166>
 8017a2e:	3701      	adds	r7, #1
 8017a30:	e7a9      	b.n	8017986 <_vfiprintf_r+0x8e>
 8017a32:	4b49      	ldr	r3, [pc, #292]	; (8017b58 <_vfiprintf_r+0x260>)
 8017a34:	682a      	ldr	r2, [r5, #0]
 8017a36:	1ac0      	subs	r0, r0, r3
 8017a38:	2301      	movs	r3, #1
 8017a3a:	4083      	lsls	r3, r0
 8017a3c:	4313      	orrs	r3, r2
 8017a3e:	602b      	str	r3, [r5, #0]
 8017a40:	9703      	str	r7, [sp, #12]
 8017a42:	e7cb      	b.n	80179dc <_vfiprintf_r+0xe4>
 8017a44:	9b07      	ldr	r3, [sp, #28]
 8017a46:	1d19      	adds	r1, r3, #4
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	9107      	str	r1, [sp, #28]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	db01      	blt.n	8017a54 <_vfiprintf_r+0x15c>
 8017a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a52:	e004      	b.n	8017a5e <_vfiprintf_r+0x166>
 8017a54:	425b      	negs	r3, r3
 8017a56:	60eb      	str	r3, [r5, #12]
 8017a58:	2302      	movs	r3, #2
 8017a5a:	4313      	orrs	r3, r2
 8017a5c:	602b      	str	r3, [r5, #0]
 8017a5e:	783b      	ldrb	r3, [r7, #0]
 8017a60:	2b2e      	cmp	r3, #46	; 0x2e
 8017a62:	d10a      	bne.n	8017a7a <_vfiprintf_r+0x182>
 8017a64:	787b      	ldrb	r3, [r7, #1]
 8017a66:	2b2a      	cmp	r3, #42	; 0x2a
 8017a68:	d137      	bne.n	8017ada <_vfiprintf_r+0x1e2>
 8017a6a:	9b07      	ldr	r3, [sp, #28]
 8017a6c:	3702      	adds	r7, #2
 8017a6e:	1d1a      	adds	r2, r3, #4
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	9207      	str	r2, [sp, #28]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	db2d      	blt.n	8017ad4 <_vfiprintf_r+0x1dc>
 8017a78:	9309      	str	r3, [sp, #36]	; 0x24
 8017a7a:	2203      	movs	r2, #3
 8017a7c:	7839      	ldrb	r1, [r7, #0]
 8017a7e:	4837      	ldr	r0, [pc, #220]	; (8017b5c <_vfiprintf_r+0x264>)
 8017a80:	f7ff f896 	bl	8016bb0 <memchr>
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d007      	beq.n	8017a98 <_vfiprintf_r+0x1a0>
 8017a88:	4b34      	ldr	r3, [pc, #208]	; (8017b5c <_vfiprintf_r+0x264>)
 8017a8a:	682a      	ldr	r2, [r5, #0]
 8017a8c:	1ac0      	subs	r0, r0, r3
 8017a8e:	2340      	movs	r3, #64	; 0x40
 8017a90:	4083      	lsls	r3, r0
 8017a92:	4313      	orrs	r3, r2
 8017a94:	3701      	adds	r7, #1
 8017a96:	602b      	str	r3, [r5, #0]
 8017a98:	7839      	ldrb	r1, [r7, #0]
 8017a9a:	1c7b      	adds	r3, r7, #1
 8017a9c:	2206      	movs	r2, #6
 8017a9e:	4830      	ldr	r0, [pc, #192]	; (8017b60 <_vfiprintf_r+0x268>)
 8017aa0:	9303      	str	r3, [sp, #12]
 8017aa2:	7629      	strb	r1, [r5, #24]
 8017aa4:	f7ff f884 	bl	8016bb0 <memchr>
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	d045      	beq.n	8017b38 <_vfiprintf_r+0x240>
 8017aac:	4b2d      	ldr	r3, [pc, #180]	; (8017b64 <_vfiprintf_r+0x26c>)
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d127      	bne.n	8017b02 <_vfiprintf_r+0x20a>
 8017ab2:	2207      	movs	r2, #7
 8017ab4:	9b07      	ldr	r3, [sp, #28]
 8017ab6:	3307      	adds	r3, #7
 8017ab8:	4393      	bics	r3, r2
 8017aba:	3308      	adds	r3, #8
 8017abc:	9307      	str	r3, [sp, #28]
 8017abe:	696b      	ldr	r3, [r5, #20]
 8017ac0:	9a04      	ldr	r2, [sp, #16]
 8017ac2:	189b      	adds	r3, r3, r2
 8017ac4:	616b      	str	r3, [r5, #20]
 8017ac6:	e75d      	b.n	8017984 <_vfiprintf_r+0x8c>
 8017ac8:	210a      	movs	r1, #10
 8017aca:	434b      	muls	r3, r1
 8017acc:	4667      	mov	r7, ip
 8017ace:	189b      	adds	r3, r3, r2
 8017ad0:	3909      	subs	r1, #9
 8017ad2:	e7a3      	b.n	8017a1c <_vfiprintf_r+0x124>
 8017ad4:	2301      	movs	r3, #1
 8017ad6:	425b      	negs	r3, r3
 8017ad8:	e7ce      	b.n	8017a78 <_vfiprintf_r+0x180>
 8017ada:	2300      	movs	r3, #0
 8017adc:	001a      	movs	r2, r3
 8017ade:	3701      	adds	r7, #1
 8017ae0:	606b      	str	r3, [r5, #4]
 8017ae2:	7839      	ldrb	r1, [r7, #0]
 8017ae4:	1c78      	adds	r0, r7, #1
 8017ae6:	3930      	subs	r1, #48	; 0x30
 8017ae8:	4684      	mov	ip, r0
 8017aea:	2909      	cmp	r1, #9
 8017aec:	d903      	bls.n	8017af6 <_vfiprintf_r+0x1fe>
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d0c3      	beq.n	8017a7a <_vfiprintf_r+0x182>
 8017af2:	9209      	str	r2, [sp, #36]	; 0x24
 8017af4:	e7c1      	b.n	8017a7a <_vfiprintf_r+0x182>
 8017af6:	230a      	movs	r3, #10
 8017af8:	435a      	muls	r2, r3
 8017afa:	4667      	mov	r7, ip
 8017afc:	1852      	adds	r2, r2, r1
 8017afe:	3b09      	subs	r3, #9
 8017b00:	e7ef      	b.n	8017ae2 <_vfiprintf_r+0x1ea>
 8017b02:	ab07      	add	r3, sp, #28
 8017b04:	9300      	str	r3, [sp, #0]
 8017b06:	0022      	movs	r2, r4
 8017b08:	0029      	movs	r1, r5
 8017b0a:	0030      	movs	r0, r6
 8017b0c:	4b16      	ldr	r3, [pc, #88]	; (8017b68 <_vfiprintf_r+0x270>)
 8017b0e:	f7fc f9db 	bl	8013ec8 <_printf_float>
 8017b12:	9004      	str	r0, [sp, #16]
 8017b14:	9b04      	ldr	r3, [sp, #16]
 8017b16:	3301      	adds	r3, #1
 8017b18:	d1d1      	bne.n	8017abe <_vfiprintf_r+0x1c6>
 8017b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b1c:	07db      	lsls	r3, r3, #31
 8017b1e:	d405      	bmi.n	8017b2c <_vfiprintf_r+0x234>
 8017b20:	89a3      	ldrh	r3, [r4, #12]
 8017b22:	059b      	lsls	r3, r3, #22
 8017b24:	d402      	bmi.n	8017b2c <_vfiprintf_r+0x234>
 8017b26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b28:	f000 fada 	bl	80180e0 <__retarget_lock_release_recursive>
 8017b2c:	89a3      	ldrh	r3, [r4, #12]
 8017b2e:	065b      	lsls	r3, r3, #25
 8017b30:	d500      	bpl.n	8017b34 <_vfiprintf_r+0x23c>
 8017b32:	e70a      	b.n	801794a <_vfiprintf_r+0x52>
 8017b34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017b36:	e70a      	b.n	801794e <_vfiprintf_r+0x56>
 8017b38:	ab07      	add	r3, sp, #28
 8017b3a:	9300      	str	r3, [sp, #0]
 8017b3c:	0022      	movs	r2, r4
 8017b3e:	0029      	movs	r1, r5
 8017b40:	0030      	movs	r0, r6
 8017b42:	4b09      	ldr	r3, [pc, #36]	; (8017b68 <_vfiprintf_r+0x270>)
 8017b44:	f7fc fc7e 	bl	8014444 <_printf_i>
 8017b48:	e7e3      	b.n	8017b12 <_vfiprintf_r+0x21a>
 8017b4a:	46c0      	nop			; (mov r8, r8)
 8017b4c:	0801ba30 	.word	0x0801ba30
 8017b50:	0801ba50 	.word	0x0801ba50
 8017b54:	0801ba10 	.word	0x0801ba10
 8017b58:	0801b9fc 	.word	0x0801b9fc
 8017b5c:	0801ba02 	.word	0x0801ba02
 8017b60:	0801ba06 	.word	0x0801ba06
 8017b64:	08013ec9 	.word	0x08013ec9
 8017b68:	080178d3 	.word	0x080178d3

08017b6c <nan>:
 8017b6c:	2000      	movs	r0, #0
 8017b6e:	4901      	ldr	r1, [pc, #4]	; (8017b74 <nan+0x8>)
 8017b70:	4770      	bx	lr
 8017b72:	46c0      	nop			; (mov r8, r8)
 8017b74:	7ff80000 	.word	0x7ff80000

08017b78 <__swbuf_r>:
 8017b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b7a:	0005      	movs	r5, r0
 8017b7c:	000e      	movs	r6, r1
 8017b7e:	0014      	movs	r4, r2
 8017b80:	2800      	cmp	r0, #0
 8017b82:	d004      	beq.n	8017b8e <__swbuf_r+0x16>
 8017b84:	6983      	ldr	r3, [r0, #24]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d101      	bne.n	8017b8e <__swbuf_r+0x16>
 8017b8a:	f000 fa07 	bl	8017f9c <__sinit>
 8017b8e:	4b22      	ldr	r3, [pc, #136]	; (8017c18 <__swbuf_r+0xa0>)
 8017b90:	429c      	cmp	r4, r3
 8017b92:	d12e      	bne.n	8017bf2 <__swbuf_r+0x7a>
 8017b94:	686c      	ldr	r4, [r5, #4]
 8017b96:	69a3      	ldr	r3, [r4, #24]
 8017b98:	60a3      	str	r3, [r4, #8]
 8017b9a:	89a3      	ldrh	r3, [r4, #12]
 8017b9c:	071b      	lsls	r3, r3, #28
 8017b9e:	d532      	bpl.n	8017c06 <__swbuf_r+0x8e>
 8017ba0:	6923      	ldr	r3, [r4, #16]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d02f      	beq.n	8017c06 <__swbuf_r+0x8e>
 8017ba6:	6823      	ldr	r3, [r4, #0]
 8017ba8:	6922      	ldr	r2, [r4, #16]
 8017baa:	b2f7      	uxtb	r7, r6
 8017bac:	1a98      	subs	r0, r3, r2
 8017bae:	6963      	ldr	r3, [r4, #20]
 8017bb0:	b2f6      	uxtb	r6, r6
 8017bb2:	4283      	cmp	r3, r0
 8017bb4:	dc05      	bgt.n	8017bc2 <__swbuf_r+0x4a>
 8017bb6:	0021      	movs	r1, r4
 8017bb8:	0028      	movs	r0, r5
 8017bba:	f000 f94d 	bl	8017e58 <_fflush_r>
 8017bbe:	2800      	cmp	r0, #0
 8017bc0:	d127      	bne.n	8017c12 <__swbuf_r+0x9a>
 8017bc2:	68a3      	ldr	r3, [r4, #8]
 8017bc4:	3001      	adds	r0, #1
 8017bc6:	3b01      	subs	r3, #1
 8017bc8:	60a3      	str	r3, [r4, #8]
 8017bca:	6823      	ldr	r3, [r4, #0]
 8017bcc:	1c5a      	adds	r2, r3, #1
 8017bce:	6022      	str	r2, [r4, #0]
 8017bd0:	701f      	strb	r7, [r3, #0]
 8017bd2:	6963      	ldr	r3, [r4, #20]
 8017bd4:	4283      	cmp	r3, r0
 8017bd6:	d004      	beq.n	8017be2 <__swbuf_r+0x6a>
 8017bd8:	89a3      	ldrh	r3, [r4, #12]
 8017bda:	07db      	lsls	r3, r3, #31
 8017bdc:	d507      	bpl.n	8017bee <__swbuf_r+0x76>
 8017bde:	2e0a      	cmp	r6, #10
 8017be0:	d105      	bne.n	8017bee <__swbuf_r+0x76>
 8017be2:	0021      	movs	r1, r4
 8017be4:	0028      	movs	r0, r5
 8017be6:	f000 f937 	bl	8017e58 <_fflush_r>
 8017bea:	2800      	cmp	r0, #0
 8017bec:	d111      	bne.n	8017c12 <__swbuf_r+0x9a>
 8017bee:	0030      	movs	r0, r6
 8017bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bf2:	4b0a      	ldr	r3, [pc, #40]	; (8017c1c <__swbuf_r+0xa4>)
 8017bf4:	429c      	cmp	r4, r3
 8017bf6:	d101      	bne.n	8017bfc <__swbuf_r+0x84>
 8017bf8:	68ac      	ldr	r4, [r5, #8]
 8017bfa:	e7cc      	b.n	8017b96 <__swbuf_r+0x1e>
 8017bfc:	4b08      	ldr	r3, [pc, #32]	; (8017c20 <__swbuf_r+0xa8>)
 8017bfe:	429c      	cmp	r4, r3
 8017c00:	d1c9      	bne.n	8017b96 <__swbuf_r+0x1e>
 8017c02:	68ec      	ldr	r4, [r5, #12]
 8017c04:	e7c7      	b.n	8017b96 <__swbuf_r+0x1e>
 8017c06:	0021      	movs	r1, r4
 8017c08:	0028      	movs	r0, r5
 8017c0a:	f000 f819 	bl	8017c40 <__swsetup_r>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d0c9      	beq.n	8017ba6 <__swbuf_r+0x2e>
 8017c12:	2601      	movs	r6, #1
 8017c14:	4276      	negs	r6, r6
 8017c16:	e7ea      	b.n	8017bee <__swbuf_r+0x76>
 8017c18:	0801ba30 	.word	0x0801ba30
 8017c1c:	0801ba50 	.word	0x0801ba50
 8017c20:	0801ba10 	.word	0x0801ba10

08017c24 <__ascii_wctomb>:
 8017c24:	0003      	movs	r3, r0
 8017c26:	1e08      	subs	r0, r1, #0
 8017c28:	d005      	beq.n	8017c36 <__ascii_wctomb+0x12>
 8017c2a:	2aff      	cmp	r2, #255	; 0xff
 8017c2c:	d904      	bls.n	8017c38 <__ascii_wctomb+0x14>
 8017c2e:	228a      	movs	r2, #138	; 0x8a
 8017c30:	2001      	movs	r0, #1
 8017c32:	601a      	str	r2, [r3, #0]
 8017c34:	4240      	negs	r0, r0
 8017c36:	4770      	bx	lr
 8017c38:	2001      	movs	r0, #1
 8017c3a:	700a      	strb	r2, [r1, #0]
 8017c3c:	e7fb      	b.n	8017c36 <__ascii_wctomb+0x12>
	...

08017c40 <__swsetup_r>:
 8017c40:	4b37      	ldr	r3, [pc, #220]	; (8017d20 <__swsetup_r+0xe0>)
 8017c42:	b570      	push	{r4, r5, r6, lr}
 8017c44:	681d      	ldr	r5, [r3, #0]
 8017c46:	0006      	movs	r6, r0
 8017c48:	000c      	movs	r4, r1
 8017c4a:	2d00      	cmp	r5, #0
 8017c4c:	d005      	beq.n	8017c5a <__swsetup_r+0x1a>
 8017c4e:	69ab      	ldr	r3, [r5, #24]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d102      	bne.n	8017c5a <__swsetup_r+0x1a>
 8017c54:	0028      	movs	r0, r5
 8017c56:	f000 f9a1 	bl	8017f9c <__sinit>
 8017c5a:	4b32      	ldr	r3, [pc, #200]	; (8017d24 <__swsetup_r+0xe4>)
 8017c5c:	429c      	cmp	r4, r3
 8017c5e:	d10f      	bne.n	8017c80 <__swsetup_r+0x40>
 8017c60:	686c      	ldr	r4, [r5, #4]
 8017c62:	230c      	movs	r3, #12
 8017c64:	5ee2      	ldrsh	r2, [r4, r3]
 8017c66:	b293      	uxth	r3, r2
 8017c68:	0711      	lsls	r1, r2, #28
 8017c6a:	d42d      	bmi.n	8017cc8 <__swsetup_r+0x88>
 8017c6c:	06d9      	lsls	r1, r3, #27
 8017c6e:	d411      	bmi.n	8017c94 <__swsetup_r+0x54>
 8017c70:	2309      	movs	r3, #9
 8017c72:	2001      	movs	r0, #1
 8017c74:	6033      	str	r3, [r6, #0]
 8017c76:	3337      	adds	r3, #55	; 0x37
 8017c78:	4313      	orrs	r3, r2
 8017c7a:	81a3      	strh	r3, [r4, #12]
 8017c7c:	4240      	negs	r0, r0
 8017c7e:	bd70      	pop	{r4, r5, r6, pc}
 8017c80:	4b29      	ldr	r3, [pc, #164]	; (8017d28 <__swsetup_r+0xe8>)
 8017c82:	429c      	cmp	r4, r3
 8017c84:	d101      	bne.n	8017c8a <__swsetup_r+0x4a>
 8017c86:	68ac      	ldr	r4, [r5, #8]
 8017c88:	e7eb      	b.n	8017c62 <__swsetup_r+0x22>
 8017c8a:	4b28      	ldr	r3, [pc, #160]	; (8017d2c <__swsetup_r+0xec>)
 8017c8c:	429c      	cmp	r4, r3
 8017c8e:	d1e8      	bne.n	8017c62 <__swsetup_r+0x22>
 8017c90:	68ec      	ldr	r4, [r5, #12]
 8017c92:	e7e6      	b.n	8017c62 <__swsetup_r+0x22>
 8017c94:	075b      	lsls	r3, r3, #29
 8017c96:	d513      	bpl.n	8017cc0 <__swsetup_r+0x80>
 8017c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c9a:	2900      	cmp	r1, #0
 8017c9c:	d008      	beq.n	8017cb0 <__swsetup_r+0x70>
 8017c9e:	0023      	movs	r3, r4
 8017ca0:	3344      	adds	r3, #68	; 0x44
 8017ca2:	4299      	cmp	r1, r3
 8017ca4:	d002      	beq.n	8017cac <__swsetup_r+0x6c>
 8017ca6:	0030      	movs	r0, r6
 8017ca8:	f7fb ffbc 	bl	8013c24 <_free_r>
 8017cac:	2300      	movs	r3, #0
 8017cae:	6363      	str	r3, [r4, #52]	; 0x34
 8017cb0:	2224      	movs	r2, #36	; 0x24
 8017cb2:	89a3      	ldrh	r3, [r4, #12]
 8017cb4:	4393      	bics	r3, r2
 8017cb6:	81a3      	strh	r3, [r4, #12]
 8017cb8:	2300      	movs	r3, #0
 8017cba:	6063      	str	r3, [r4, #4]
 8017cbc:	6923      	ldr	r3, [r4, #16]
 8017cbe:	6023      	str	r3, [r4, #0]
 8017cc0:	2308      	movs	r3, #8
 8017cc2:	89a2      	ldrh	r2, [r4, #12]
 8017cc4:	4313      	orrs	r3, r2
 8017cc6:	81a3      	strh	r3, [r4, #12]
 8017cc8:	6923      	ldr	r3, [r4, #16]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d10b      	bne.n	8017ce6 <__swsetup_r+0xa6>
 8017cce:	21a0      	movs	r1, #160	; 0xa0
 8017cd0:	2280      	movs	r2, #128	; 0x80
 8017cd2:	89a3      	ldrh	r3, [r4, #12]
 8017cd4:	0089      	lsls	r1, r1, #2
 8017cd6:	0092      	lsls	r2, r2, #2
 8017cd8:	400b      	ands	r3, r1
 8017cda:	4293      	cmp	r3, r2
 8017cdc:	d003      	beq.n	8017ce6 <__swsetup_r+0xa6>
 8017cde:	0021      	movs	r1, r4
 8017ce0:	0030      	movs	r0, r6
 8017ce2:	f000 fa27 	bl	8018134 <__smakebuf_r>
 8017ce6:	220c      	movs	r2, #12
 8017ce8:	5ea3      	ldrsh	r3, [r4, r2]
 8017cea:	2001      	movs	r0, #1
 8017cec:	001a      	movs	r2, r3
 8017cee:	b299      	uxth	r1, r3
 8017cf0:	4002      	ands	r2, r0
 8017cf2:	4203      	tst	r3, r0
 8017cf4:	d00f      	beq.n	8017d16 <__swsetup_r+0xd6>
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	60a2      	str	r2, [r4, #8]
 8017cfa:	6962      	ldr	r2, [r4, #20]
 8017cfc:	4252      	negs	r2, r2
 8017cfe:	61a2      	str	r2, [r4, #24]
 8017d00:	2000      	movs	r0, #0
 8017d02:	6922      	ldr	r2, [r4, #16]
 8017d04:	4282      	cmp	r2, r0
 8017d06:	d1ba      	bne.n	8017c7e <__swsetup_r+0x3e>
 8017d08:	060a      	lsls	r2, r1, #24
 8017d0a:	d5b8      	bpl.n	8017c7e <__swsetup_r+0x3e>
 8017d0c:	2240      	movs	r2, #64	; 0x40
 8017d0e:	4313      	orrs	r3, r2
 8017d10:	81a3      	strh	r3, [r4, #12]
 8017d12:	3801      	subs	r0, #1
 8017d14:	e7b3      	b.n	8017c7e <__swsetup_r+0x3e>
 8017d16:	0788      	lsls	r0, r1, #30
 8017d18:	d400      	bmi.n	8017d1c <__swsetup_r+0xdc>
 8017d1a:	6962      	ldr	r2, [r4, #20]
 8017d1c:	60a2      	str	r2, [r4, #8]
 8017d1e:	e7ef      	b.n	8017d00 <__swsetup_r+0xc0>
 8017d20:	200000c0 	.word	0x200000c0
 8017d24:	0801ba30 	.word	0x0801ba30
 8017d28:	0801ba50 	.word	0x0801ba50
 8017d2c:	0801ba10 	.word	0x0801ba10

08017d30 <abort>:
 8017d30:	2006      	movs	r0, #6
 8017d32:	b510      	push	{r4, lr}
 8017d34:	f000 fa88 	bl	8018248 <raise>
 8017d38:	2001      	movs	r0, #1
 8017d3a:	f000 fbb3 	bl	80184a4 <_exit>
	...

08017d40 <__sflush_r>:
 8017d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d42:	898b      	ldrh	r3, [r1, #12]
 8017d44:	0005      	movs	r5, r0
 8017d46:	000c      	movs	r4, r1
 8017d48:	071a      	lsls	r2, r3, #28
 8017d4a:	d45f      	bmi.n	8017e0c <__sflush_r+0xcc>
 8017d4c:	684a      	ldr	r2, [r1, #4]
 8017d4e:	2a00      	cmp	r2, #0
 8017d50:	dc04      	bgt.n	8017d5c <__sflush_r+0x1c>
 8017d52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8017d54:	2a00      	cmp	r2, #0
 8017d56:	dc01      	bgt.n	8017d5c <__sflush_r+0x1c>
 8017d58:	2000      	movs	r0, #0
 8017d5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017d5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017d5e:	2f00      	cmp	r7, #0
 8017d60:	d0fa      	beq.n	8017d58 <__sflush_r+0x18>
 8017d62:	2200      	movs	r2, #0
 8017d64:	2180      	movs	r1, #128	; 0x80
 8017d66:	682e      	ldr	r6, [r5, #0]
 8017d68:	602a      	str	r2, [r5, #0]
 8017d6a:	001a      	movs	r2, r3
 8017d6c:	0149      	lsls	r1, r1, #5
 8017d6e:	400a      	ands	r2, r1
 8017d70:	420b      	tst	r3, r1
 8017d72:	d034      	beq.n	8017dde <__sflush_r+0x9e>
 8017d74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017d76:	89a3      	ldrh	r3, [r4, #12]
 8017d78:	075b      	lsls	r3, r3, #29
 8017d7a:	d506      	bpl.n	8017d8a <__sflush_r+0x4a>
 8017d7c:	6863      	ldr	r3, [r4, #4]
 8017d7e:	1ac0      	subs	r0, r0, r3
 8017d80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d001      	beq.n	8017d8a <__sflush_r+0x4a>
 8017d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d88:	1ac0      	subs	r0, r0, r3
 8017d8a:	0002      	movs	r2, r0
 8017d8c:	6a21      	ldr	r1, [r4, #32]
 8017d8e:	2300      	movs	r3, #0
 8017d90:	0028      	movs	r0, r5
 8017d92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017d94:	47b8      	blx	r7
 8017d96:	89a1      	ldrh	r1, [r4, #12]
 8017d98:	1c43      	adds	r3, r0, #1
 8017d9a:	d106      	bne.n	8017daa <__sflush_r+0x6a>
 8017d9c:	682b      	ldr	r3, [r5, #0]
 8017d9e:	2b1d      	cmp	r3, #29
 8017da0:	d831      	bhi.n	8017e06 <__sflush_r+0xc6>
 8017da2:	4a2c      	ldr	r2, [pc, #176]	; (8017e54 <__sflush_r+0x114>)
 8017da4:	40da      	lsrs	r2, r3
 8017da6:	07d3      	lsls	r3, r2, #31
 8017da8:	d52d      	bpl.n	8017e06 <__sflush_r+0xc6>
 8017daa:	2300      	movs	r3, #0
 8017dac:	6063      	str	r3, [r4, #4]
 8017dae:	6923      	ldr	r3, [r4, #16]
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	04cb      	lsls	r3, r1, #19
 8017db4:	d505      	bpl.n	8017dc2 <__sflush_r+0x82>
 8017db6:	1c43      	adds	r3, r0, #1
 8017db8:	d102      	bne.n	8017dc0 <__sflush_r+0x80>
 8017dba:	682b      	ldr	r3, [r5, #0]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d100      	bne.n	8017dc2 <__sflush_r+0x82>
 8017dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8017dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dc4:	602e      	str	r6, [r5, #0]
 8017dc6:	2900      	cmp	r1, #0
 8017dc8:	d0c6      	beq.n	8017d58 <__sflush_r+0x18>
 8017dca:	0023      	movs	r3, r4
 8017dcc:	3344      	adds	r3, #68	; 0x44
 8017dce:	4299      	cmp	r1, r3
 8017dd0:	d002      	beq.n	8017dd8 <__sflush_r+0x98>
 8017dd2:	0028      	movs	r0, r5
 8017dd4:	f7fb ff26 	bl	8013c24 <_free_r>
 8017dd8:	2000      	movs	r0, #0
 8017dda:	6360      	str	r0, [r4, #52]	; 0x34
 8017ddc:	e7bd      	b.n	8017d5a <__sflush_r+0x1a>
 8017dde:	2301      	movs	r3, #1
 8017de0:	0028      	movs	r0, r5
 8017de2:	6a21      	ldr	r1, [r4, #32]
 8017de4:	47b8      	blx	r7
 8017de6:	1c43      	adds	r3, r0, #1
 8017de8:	d1c5      	bne.n	8017d76 <__sflush_r+0x36>
 8017dea:	682b      	ldr	r3, [r5, #0]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d0c2      	beq.n	8017d76 <__sflush_r+0x36>
 8017df0:	2b1d      	cmp	r3, #29
 8017df2:	d001      	beq.n	8017df8 <__sflush_r+0xb8>
 8017df4:	2b16      	cmp	r3, #22
 8017df6:	d101      	bne.n	8017dfc <__sflush_r+0xbc>
 8017df8:	602e      	str	r6, [r5, #0]
 8017dfa:	e7ad      	b.n	8017d58 <__sflush_r+0x18>
 8017dfc:	2340      	movs	r3, #64	; 0x40
 8017dfe:	89a2      	ldrh	r2, [r4, #12]
 8017e00:	4313      	orrs	r3, r2
 8017e02:	81a3      	strh	r3, [r4, #12]
 8017e04:	e7a9      	b.n	8017d5a <__sflush_r+0x1a>
 8017e06:	2340      	movs	r3, #64	; 0x40
 8017e08:	430b      	orrs	r3, r1
 8017e0a:	e7fa      	b.n	8017e02 <__sflush_r+0xc2>
 8017e0c:	690f      	ldr	r7, [r1, #16]
 8017e0e:	2f00      	cmp	r7, #0
 8017e10:	d0a2      	beq.n	8017d58 <__sflush_r+0x18>
 8017e12:	680a      	ldr	r2, [r1, #0]
 8017e14:	600f      	str	r7, [r1, #0]
 8017e16:	1bd2      	subs	r2, r2, r7
 8017e18:	9201      	str	r2, [sp, #4]
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	079b      	lsls	r3, r3, #30
 8017e1e:	d100      	bne.n	8017e22 <__sflush_r+0xe2>
 8017e20:	694a      	ldr	r2, [r1, #20]
 8017e22:	60a2      	str	r2, [r4, #8]
 8017e24:	9b01      	ldr	r3, [sp, #4]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	dc00      	bgt.n	8017e2c <__sflush_r+0xec>
 8017e2a:	e795      	b.n	8017d58 <__sflush_r+0x18>
 8017e2c:	003a      	movs	r2, r7
 8017e2e:	0028      	movs	r0, r5
 8017e30:	9b01      	ldr	r3, [sp, #4]
 8017e32:	6a21      	ldr	r1, [r4, #32]
 8017e34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017e36:	47b0      	blx	r6
 8017e38:	2800      	cmp	r0, #0
 8017e3a:	dc06      	bgt.n	8017e4a <__sflush_r+0x10a>
 8017e3c:	2340      	movs	r3, #64	; 0x40
 8017e3e:	2001      	movs	r0, #1
 8017e40:	89a2      	ldrh	r2, [r4, #12]
 8017e42:	4240      	negs	r0, r0
 8017e44:	4313      	orrs	r3, r2
 8017e46:	81a3      	strh	r3, [r4, #12]
 8017e48:	e787      	b.n	8017d5a <__sflush_r+0x1a>
 8017e4a:	9b01      	ldr	r3, [sp, #4]
 8017e4c:	183f      	adds	r7, r7, r0
 8017e4e:	1a1b      	subs	r3, r3, r0
 8017e50:	9301      	str	r3, [sp, #4]
 8017e52:	e7e7      	b.n	8017e24 <__sflush_r+0xe4>
 8017e54:	20400001 	.word	0x20400001

08017e58 <_fflush_r>:
 8017e58:	690b      	ldr	r3, [r1, #16]
 8017e5a:	b570      	push	{r4, r5, r6, lr}
 8017e5c:	0005      	movs	r5, r0
 8017e5e:	000c      	movs	r4, r1
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d102      	bne.n	8017e6a <_fflush_r+0x12>
 8017e64:	2500      	movs	r5, #0
 8017e66:	0028      	movs	r0, r5
 8017e68:	bd70      	pop	{r4, r5, r6, pc}
 8017e6a:	2800      	cmp	r0, #0
 8017e6c:	d004      	beq.n	8017e78 <_fflush_r+0x20>
 8017e6e:	6983      	ldr	r3, [r0, #24]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d101      	bne.n	8017e78 <_fflush_r+0x20>
 8017e74:	f000 f892 	bl	8017f9c <__sinit>
 8017e78:	4b14      	ldr	r3, [pc, #80]	; (8017ecc <_fflush_r+0x74>)
 8017e7a:	429c      	cmp	r4, r3
 8017e7c:	d11b      	bne.n	8017eb6 <_fflush_r+0x5e>
 8017e7e:	686c      	ldr	r4, [r5, #4]
 8017e80:	220c      	movs	r2, #12
 8017e82:	5ea3      	ldrsh	r3, [r4, r2]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d0ed      	beq.n	8017e64 <_fflush_r+0xc>
 8017e88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017e8a:	07d2      	lsls	r2, r2, #31
 8017e8c:	d404      	bmi.n	8017e98 <_fflush_r+0x40>
 8017e8e:	059b      	lsls	r3, r3, #22
 8017e90:	d402      	bmi.n	8017e98 <_fflush_r+0x40>
 8017e92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017e94:	f000 f923 	bl	80180de <__retarget_lock_acquire_recursive>
 8017e98:	0028      	movs	r0, r5
 8017e9a:	0021      	movs	r1, r4
 8017e9c:	f7ff ff50 	bl	8017d40 <__sflush_r>
 8017ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ea2:	0005      	movs	r5, r0
 8017ea4:	07db      	lsls	r3, r3, #31
 8017ea6:	d4de      	bmi.n	8017e66 <_fflush_r+0xe>
 8017ea8:	89a3      	ldrh	r3, [r4, #12]
 8017eaa:	059b      	lsls	r3, r3, #22
 8017eac:	d4db      	bmi.n	8017e66 <_fflush_r+0xe>
 8017eae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017eb0:	f000 f916 	bl	80180e0 <__retarget_lock_release_recursive>
 8017eb4:	e7d7      	b.n	8017e66 <_fflush_r+0xe>
 8017eb6:	4b06      	ldr	r3, [pc, #24]	; (8017ed0 <_fflush_r+0x78>)
 8017eb8:	429c      	cmp	r4, r3
 8017eba:	d101      	bne.n	8017ec0 <_fflush_r+0x68>
 8017ebc:	68ac      	ldr	r4, [r5, #8]
 8017ebe:	e7df      	b.n	8017e80 <_fflush_r+0x28>
 8017ec0:	4b04      	ldr	r3, [pc, #16]	; (8017ed4 <_fflush_r+0x7c>)
 8017ec2:	429c      	cmp	r4, r3
 8017ec4:	d1dc      	bne.n	8017e80 <_fflush_r+0x28>
 8017ec6:	68ec      	ldr	r4, [r5, #12]
 8017ec8:	e7da      	b.n	8017e80 <_fflush_r+0x28>
 8017eca:	46c0      	nop			; (mov r8, r8)
 8017ecc:	0801ba30 	.word	0x0801ba30
 8017ed0:	0801ba50 	.word	0x0801ba50
 8017ed4:	0801ba10 	.word	0x0801ba10

08017ed8 <std>:
 8017ed8:	2300      	movs	r3, #0
 8017eda:	b510      	push	{r4, lr}
 8017edc:	0004      	movs	r4, r0
 8017ede:	6003      	str	r3, [r0, #0]
 8017ee0:	6043      	str	r3, [r0, #4]
 8017ee2:	6083      	str	r3, [r0, #8]
 8017ee4:	8181      	strh	r1, [r0, #12]
 8017ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8017ee8:	0019      	movs	r1, r3
 8017eea:	81c2      	strh	r2, [r0, #14]
 8017eec:	6103      	str	r3, [r0, #16]
 8017eee:	6143      	str	r3, [r0, #20]
 8017ef0:	6183      	str	r3, [r0, #24]
 8017ef2:	2208      	movs	r2, #8
 8017ef4:	305c      	adds	r0, #92	; 0x5c
 8017ef6:	f7fb fe8c 	bl	8013c12 <memset>
 8017efa:	4b05      	ldr	r3, [pc, #20]	; (8017f10 <std+0x38>)
 8017efc:	6263      	str	r3, [r4, #36]	; 0x24
 8017efe:	4b05      	ldr	r3, [pc, #20]	; (8017f14 <std+0x3c>)
 8017f00:	6224      	str	r4, [r4, #32]
 8017f02:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f04:	4b04      	ldr	r3, [pc, #16]	; (8017f18 <std+0x40>)
 8017f06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f08:	4b04      	ldr	r3, [pc, #16]	; (8017f1c <std+0x44>)
 8017f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8017f0c:	bd10      	pop	{r4, pc}
 8017f0e:	46c0      	nop			; (mov r8, r8)
 8017f10:	08018289 	.word	0x08018289
 8017f14:	080182b1 	.word	0x080182b1
 8017f18:	080182e9 	.word	0x080182e9
 8017f1c:	08018315 	.word	0x08018315

08017f20 <_cleanup_r>:
 8017f20:	b510      	push	{r4, lr}
 8017f22:	4902      	ldr	r1, [pc, #8]	; (8017f2c <_cleanup_r+0xc>)
 8017f24:	f000 f8ba 	bl	801809c <_fwalk_reent>
 8017f28:	bd10      	pop	{r4, pc}
 8017f2a:	46c0      	nop			; (mov r8, r8)
 8017f2c:	08017e59 	.word	0x08017e59

08017f30 <__sfmoreglue>:
 8017f30:	b570      	push	{r4, r5, r6, lr}
 8017f32:	2568      	movs	r5, #104	; 0x68
 8017f34:	1e4a      	subs	r2, r1, #1
 8017f36:	4355      	muls	r5, r2
 8017f38:	000e      	movs	r6, r1
 8017f3a:	0029      	movs	r1, r5
 8017f3c:	3174      	adds	r1, #116	; 0x74
 8017f3e:	f7fb febb 	bl	8013cb8 <_malloc_r>
 8017f42:	1e04      	subs	r4, r0, #0
 8017f44:	d008      	beq.n	8017f58 <__sfmoreglue+0x28>
 8017f46:	2100      	movs	r1, #0
 8017f48:	002a      	movs	r2, r5
 8017f4a:	6001      	str	r1, [r0, #0]
 8017f4c:	6046      	str	r6, [r0, #4]
 8017f4e:	300c      	adds	r0, #12
 8017f50:	60a0      	str	r0, [r4, #8]
 8017f52:	3268      	adds	r2, #104	; 0x68
 8017f54:	f7fb fe5d 	bl	8013c12 <memset>
 8017f58:	0020      	movs	r0, r4
 8017f5a:	bd70      	pop	{r4, r5, r6, pc}

08017f5c <__sfp_lock_acquire>:
 8017f5c:	b510      	push	{r4, lr}
 8017f5e:	4802      	ldr	r0, [pc, #8]	; (8017f68 <__sfp_lock_acquire+0xc>)
 8017f60:	f000 f8bd 	bl	80180de <__retarget_lock_acquire_recursive>
 8017f64:	bd10      	pop	{r4, pc}
 8017f66:	46c0      	nop			; (mov r8, r8)
 8017f68:	200067e4 	.word	0x200067e4

08017f6c <__sfp_lock_release>:
 8017f6c:	b510      	push	{r4, lr}
 8017f6e:	4802      	ldr	r0, [pc, #8]	; (8017f78 <__sfp_lock_release+0xc>)
 8017f70:	f000 f8b6 	bl	80180e0 <__retarget_lock_release_recursive>
 8017f74:	bd10      	pop	{r4, pc}
 8017f76:	46c0      	nop			; (mov r8, r8)
 8017f78:	200067e4 	.word	0x200067e4

08017f7c <__sinit_lock_acquire>:
 8017f7c:	b510      	push	{r4, lr}
 8017f7e:	4802      	ldr	r0, [pc, #8]	; (8017f88 <__sinit_lock_acquire+0xc>)
 8017f80:	f000 f8ad 	bl	80180de <__retarget_lock_acquire_recursive>
 8017f84:	bd10      	pop	{r4, pc}
 8017f86:	46c0      	nop			; (mov r8, r8)
 8017f88:	200067df 	.word	0x200067df

08017f8c <__sinit_lock_release>:
 8017f8c:	b510      	push	{r4, lr}
 8017f8e:	4802      	ldr	r0, [pc, #8]	; (8017f98 <__sinit_lock_release+0xc>)
 8017f90:	f000 f8a6 	bl	80180e0 <__retarget_lock_release_recursive>
 8017f94:	bd10      	pop	{r4, pc}
 8017f96:	46c0      	nop			; (mov r8, r8)
 8017f98:	200067df 	.word	0x200067df

08017f9c <__sinit>:
 8017f9c:	b513      	push	{r0, r1, r4, lr}
 8017f9e:	0004      	movs	r4, r0
 8017fa0:	f7ff ffec 	bl	8017f7c <__sinit_lock_acquire>
 8017fa4:	69a3      	ldr	r3, [r4, #24]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d002      	beq.n	8017fb0 <__sinit+0x14>
 8017faa:	f7ff ffef 	bl	8017f8c <__sinit_lock_release>
 8017fae:	bd13      	pop	{r0, r1, r4, pc}
 8017fb0:	64a3      	str	r3, [r4, #72]	; 0x48
 8017fb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8017fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8017fb6:	4b13      	ldr	r3, [pc, #76]	; (8018004 <__sinit+0x68>)
 8017fb8:	4a13      	ldr	r2, [pc, #76]	; (8018008 <__sinit+0x6c>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8017fbe:	9301      	str	r3, [sp, #4]
 8017fc0:	42a3      	cmp	r3, r4
 8017fc2:	d101      	bne.n	8017fc8 <__sinit+0x2c>
 8017fc4:	2301      	movs	r3, #1
 8017fc6:	61a3      	str	r3, [r4, #24]
 8017fc8:	0020      	movs	r0, r4
 8017fca:	f000 f81f 	bl	801800c <__sfp>
 8017fce:	6060      	str	r0, [r4, #4]
 8017fd0:	0020      	movs	r0, r4
 8017fd2:	f000 f81b 	bl	801800c <__sfp>
 8017fd6:	60a0      	str	r0, [r4, #8]
 8017fd8:	0020      	movs	r0, r4
 8017fda:	f000 f817 	bl	801800c <__sfp>
 8017fde:	2200      	movs	r2, #0
 8017fe0:	2104      	movs	r1, #4
 8017fe2:	60e0      	str	r0, [r4, #12]
 8017fe4:	6860      	ldr	r0, [r4, #4]
 8017fe6:	f7ff ff77 	bl	8017ed8 <std>
 8017fea:	2201      	movs	r2, #1
 8017fec:	2109      	movs	r1, #9
 8017fee:	68a0      	ldr	r0, [r4, #8]
 8017ff0:	f7ff ff72 	bl	8017ed8 <std>
 8017ff4:	2202      	movs	r2, #2
 8017ff6:	2112      	movs	r1, #18
 8017ff8:	68e0      	ldr	r0, [r4, #12]
 8017ffa:	f7ff ff6d 	bl	8017ed8 <std>
 8017ffe:	2301      	movs	r3, #1
 8018000:	61a3      	str	r3, [r4, #24]
 8018002:	e7d2      	b.n	8017faa <__sinit+0xe>
 8018004:	0801b608 	.word	0x0801b608
 8018008:	08017f21 	.word	0x08017f21

0801800c <__sfp>:
 801800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801800e:	0007      	movs	r7, r0
 8018010:	f7ff ffa4 	bl	8017f5c <__sfp_lock_acquire>
 8018014:	4b1f      	ldr	r3, [pc, #124]	; (8018094 <__sfp+0x88>)
 8018016:	681e      	ldr	r6, [r3, #0]
 8018018:	69b3      	ldr	r3, [r6, #24]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d102      	bne.n	8018024 <__sfp+0x18>
 801801e:	0030      	movs	r0, r6
 8018020:	f7ff ffbc 	bl	8017f9c <__sinit>
 8018024:	3648      	adds	r6, #72	; 0x48
 8018026:	68b4      	ldr	r4, [r6, #8]
 8018028:	6873      	ldr	r3, [r6, #4]
 801802a:	3b01      	subs	r3, #1
 801802c:	d504      	bpl.n	8018038 <__sfp+0x2c>
 801802e:	6833      	ldr	r3, [r6, #0]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d022      	beq.n	801807a <__sfp+0x6e>
 8018034:	6836      	ldr	r6, [r6, #0]
 8018036:	e7f6      	b.n	8018026 <__sfp+0x1a>
 8018038:	220c      	movs	r2, #12
 801803a:	5ea5      	ldrsh	r5, [r4, r2]
 801803c:	2d00      	cmp	r5, #0
 801803e:	d11a      	bne.n	8018076 <__sfp+0x6a>
 8018040:	0020      	movs	r0, r4
 8018042:	4b15      	ldr	r3, [pc, #84]	; (8018098 <__sfp+0x8c>)
 8018044:	3058      	adds	r0, #88	; 0x58
 8018046:	60e3      	str	r3, [r4, #12]
 8018048:	6665      	str	r5, [r4, #100]	; 0x64
 801804a:	f000 f847 	bl	80180dc <__retarget_lock_init_recursive>
 801804e:	f7ff ff8d 	bl	8017f6c <__sfp_lock_release>
 8018052:	0020      	movs	r0, r4
 8018054:	2208      	movs	r2, #8
 8018056:	0029      	movs	r1, r5
 8018058:	6025      	str	r5, [r4, #0]
 801805a:	60a5      	str	r5, [r4, #8]
 801805c:	6065      	str	r5, [r4, #4]
 801805e:	6125      	str	r5, [r4, #16]
 8018060:	6165      	str	r5, [r4, #20]
 8018062:	61a5      	str	r5, [r4, #24]
 8018064:	305c      	adds	r0, #92	; 0x5c
 8018066:	f7fb fdd4 	bl	8013c12 <memset>
 801806a:	6365      	str	r5, [r4, #52]	; 0x34
 801806c:	63a5      	str	r5, [r4, #56]	; 0x38
 801806e:	64a5      	str	r5, [r4, #72]	; 0x48
 8018070:	64e5      	str	r5, [r4, #76]	; 0x4c
 8018072:	0020      	movs	r0, r4
 8018074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018076:	3468      	adds	r4, #104	; 0x68
 8018078:	e7d7      	b.n	801802a <__sfp+0x1e>
 801807a:	2104      	movs	r1, #4
 801807c:	0038      	movs	r0, r7
 801807e:	f7ff ff57 	bl	8017f30 <__sfmoreglue>
 8018082:	1e04      	subs	r4, r0, #0
 8018084:	6030      	str	r0, [r6, #0]
 8018086:	d1d5      	bne.n	8018034 <__sfp+0x28>
 8018088:	f7ff ff70 	bl	8017f6c <__sfp_lock_release>
 801808c:	230c      	movs	r3, #12
 801808e:	603b      	str	r3, [r7, #0]
 8018090:	e7ef      	b.n	8018072 <__sfp+0x66>
 8018092:	46c0      	nop			; (mov r8, r8)
 8018094:	0801b608 	.word	0x0801b608
 8018098:	ffff0001 	.word	0xffff0001

0801809c <_fwalk_reent>:
 801809c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801809e:	0004      	movs	r4, r0
 80180a0:	0006      	movs	r6, r0
 80180a2:	2700      	movs	r7, #0
 80180a4:	9101      	str	r1, [sp, #4]
 80180a6:	3448      	adds	r4, #72	; 0x48
 80180a8:	6863      	ldr	r3, [r4, #4]
 80180aa:	68a5      	ldr	r5, [r4, #8]
 80180ac:	9300      	str	r3, [sp, #0]
 80180ae:	9b00      	ldr	r3, [sp, #0]
 80180b0:	3b01      	subs	r3, #1
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	d504      	bpl.n	80180c0 <_fwalk_reent+0x24>
 80180b6:	6824      	ldr	r4, [r4, #0]
 80180b8:	2c00      	cmp	r4, #0
 80180ba:	d1f5      	bne.n	80180a8 <_fwalk_reent+0xc>
 80180bc:	0038      	movs	r0, r7
 80180be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80180c0:	89ab      	ldrh	r3, [r5, #12]
 80180c2:	2b01      	cmp	r3, #1
 80180c4:	d908      	bls.n	80180d8 <_fwalk_reent+0x3c>
 80180c6:	220e      	movs	r2, #14
 80180c8:	5eab      	ldrsh	r3, [r5, r2]
 80180ca:	3301      	adds	r3, #1
 80180cc:	d004      	beq.n	80180d8 <_fwalk_reent+0x3c>
 80180ce:	0029      	movs	r1, r5
 80180d0:	0030      	movs	r0, r6
 80180d2:	9b01      	ldr	r3, [sp, #4]
 80180d4:	4798      	blx	r3
 80180d6:	4307      	orrs	r7, r0
 80180d8:	3568      	adds	r5, #104	; 0x68
 80180da:	e7e8      	b.n	80180ae <_fwalk_reent+0x12>

080180dc <__retarget_lock_init_recursive>:
 80180dc:	4770      	bx	lr

080180de <__retarget_lock_acquire_recursive>:
 80180de:	4770      	bx	lr

080180e0 <__retarget_lock_release_recursive>:
 80180e0:	4770      	bx	lr
	...

080180e4 <__swhatbuf_r>:
 80180e4:	b570      	push	{r4, r5, r6, lr}
 80180e6:	000e      	movs	r6, r1
 80180e8:	001d      	movs	r5, r3
 80180ea:	230e      	movs	r3, #14
 80180ec:	5ec9      	ldrsh	r1, [r1, r3]
 80180ee:	0014      	movs	r4, r2
 80180f0:	b096      	sub	sp, #88	; 0x58
 80180f2:	2900      	cmp	r1, #0
 80180f4:	da07      	bge.n	8018106 <__swhatbuf_r+0x22>
 80180f6:	2300      	movs	r3, #0
 80180f8:	602b      	str	r3, [r5, #0]
 80180fa:	89b3      	ldrh	r3, [r6, #12]
 80180fc:	061b      	lsls	r3, r3, #24
 80180fe:	d411      	bmi.n	8018124 <__swhatbuf_r+0x40>
 8018100:	2380      	movs	r3, #128	; 0x80
 8018102:	00db      	lsls	r3, r3, #3
 8018104:	e00f      	b.n	8018126 <__swhatbuf_r+0x42>
 8018106:	466a      	mov	r2, sp
 8018108:	f000 f930 	bl	801836c <_fstat_r>
 801810c:	2800      	cmp	r0, #0
 801810e:	dbf2      	blt.n	80180f6 <__swhatbuf_r+0x12>
 8018110:	23f0      	movs	r3, #240	; 0xf0
 8018112:	9901      	ldr	r1, [sp, #4]
 8018114:	021b      	lsls	r3, r3, #8
 8018116:	4019      	ands	r1, r3
 8018118:	4b05      	ldr	r3, [pc, #20]	; (8018130 <__swhatbuf_r+0x4c>)
 801811a:	18c9      	adds	r1, r1, r3
 801811c:	424b      	negs	r3, r1
 801811e:	4159      	adcs	r1, r3
 8018120:	6029      	str	r1, [r5, #0]
 8018122:	e7ed      	b.n	8018100 <__swhatbuf_r+0x1c>
 8018124:	2340      	movs	r3, #64	; 0x40
 8018126:	2000      	movs	r0, #0
 8018128:	6023      	str	r3, [r4, #0]
 801812a:	b016      	add	sp, #88	; 0x58
 801812c:	bd70      	pop	{r4, r5, r6, pc}
 801812e:	46c0      	nop			; (mov r8, r8)
 8018130:	ffffe000 	.word	0xffffe000

08018134 <__smakebuf_r>:
 8018134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018136:	2602      	movs	r6, #2
 8018138:	898b      	ldrh	r3, [r1, #12]
 801813a:	0005      	movs	r5, r0
 801813c:	000c      	movs	r4, r1
 801813e:	4233      	tst	r3, r6
 8018140:	d006      	beq.n	8018150 <__smakebuf_r+0x1c>
 8018142:	0023      	movs	r3, r4
 8018144:	3347      	adds	r3, #71	; 0x47
 8018146:	6023      	str	r3, [r4, #0]
 8018148:	6123      	str	r3, [r4, #16]
 801814a:	2301      	movs	r3, #1
 801814c:	6163      	str	r3, [r4, #20]
 801814e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018150:	466a      	mov	r2, sp
 8018152:	ab01      	add	r3, sp, #4
 8018154:	f7ff ffc6 	bl	80180e4 <__swhatbuf_r>
 8018158:	9900      	ldr	r1, [sp, #0]
 801815a:	0007      	movs	r7, r0
 801815c:	0028      	movs	r0, r5
 801815e:	f7fb fdab 	bl	8013cb8 <_malloc_r>
 8018162:	2800      	cmp	r0, #0
 8018164:	d108      	bne.n	8018178 <__smakebuf_r+0x44>
 8018166:	220c      	movs	r2, #12
 8018168:	5ea3      	ldrsh	r3, [r4, r2]
 801816a:	059a      	lsls	r2, r3, #22
 801816c:	d4ef      	bmi.n	801814e <__smakebuf_r+0x1a>
 801816e:	2203      	movs	r2, #3
 8018170:	4393      	bics	r3, r2
 8018172:	431e      	orrs	r6, r3
 8018174:	81a6      	strh	r6, [r4, #12]
 8018176:	e7e4      	b.n	8018142 <__smakebuf_r+0xe>
 8018178:	4b0f      	ldr	r3, [pc, #60]	; (80181b8 <__smakebuf_r+0x84>)
 801817a:	62ab      	str	r3, [r5, #40]	; 0x28
 801817c:	2380      	movs	r3, #128	; 0x80
 801817e:	89a2      	ldrh	r2, [r4, #12]
 8018180:	6020      	str	r0, [r4, #0]
 8018182:	4313      	orrs	r3, r2
 8018184:	81a3      	strh	r3, [r4, #12]
 8018186:	9b00      	ldr	r3, [sp, #0]
 8018188:	6120      	str	r0, [r4, #16]
 801818a:	6163      	str	r3, [r4, #20]
 801818c:	9b01      	ldr	r3, [sp, #4]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d00d      	beq.n	80181ae <__smakebuf_r+0x7a>
 8018192:	0028      	movs	r0, r5
 8018194:	230e      	movs	r3, #14
 8018196:	5ee1      	ldrsh	r1, [r4, r3]
 8018198:	f000 f8fa 	bl	8018390 <_isatty_r>
 801819c:	2800      	cmp	r0, #0
 801819e:	d006      	beq.n	80181ae <__smakebuf_r+0x7a>
 80181a0:	2203      	movs	r2, #3
 80181a2:	89a3      	ldrh	r3, [r4, #12]
 80181a4:	4393      	bics	r3, r2
 80181a6:	001a      	movs	r2, r3
 80181a8:	2301      	movs	r3, #1
 80181aa:	4313      	orrs	r3, r2
 80181ac:	81a3      	strh	r3, [r4, #12]
 80181ae:	89a0      	ldrh	r0, [r4, #12]
 80181b0:	4307      	orrs	r7, r0
 80181b2:	81a7      	strh	r7, [r4, #12]
 80181b4:	e7cb      	b.n	801814e <__smakebuf_r+0x1a>
 80181b6:	46c0      	nop			; (mov r8, r8)
 80181b8:	08017f21 	.word	0x08017f21

080181bc <memmove>:
 80181bc:	b510      	push	{r4, lr}
 80181be:	4288      	cmp	r0, r1
 80181c0:	d902      	bls.n	80181c8 <memmove+0xc>
 80181c2:	188b      	adds	r3, r1, r2
 80181c4:	4298      	cmp	r0, r3
 80181c6:	d303      	bcc.n	80181d0 <memmove+0x14>
 80181c8:	2300      	movs	r3, #0
 80181ca:	e007      	b.n	80181dc <memmove+0x20>
 80181cc:	5c8b      	ldrb	r3, [r1, r2]
 80181ce:	5483      	strb	r3, [r0, r2]
 80181d0:	3a01      	subs	r2, #1
 80181d2:	d2fb      	bcs.n	80181cc <memmove+0x10>
 80181d4:	bd10      	pop	{r4, pc}
 80181d6:	5ccc      	ldrb	r4, [r1, r3]
 80181d8:	54c4      	strb	r4, [r0, r3]
 80181da:	3301      	adds	r3, #1
 80181dc:	429a      	cmp	r2, r3
 80181de:	d1fa      	bne.n	80181d6 <memmove+0x1a>
 80181e0:	e7f8      	b.n	80181d4 <memmove+0x18>

080181e2 <_malloc_usable_size_r>:
 80181e2:	1f0b      	subs	r3, r1, #4
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	1f18      	subs	r0, r3, #4
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	da01      	bge.n	80181f0 <_malloc_usable_size_r+0xe>
 80181ec:	580b      	ldr	r3, [r1, r0]
 80181ee:	18c0      	adds	r0, r0, r3
 80181f0:	4770      	bx	lr

080181f2 <_raise_r>:
 80181f2:	b570      	push	{r4, r5, r6, lr}
 80181f4:	0004      	movs	r4, r0
 80181f6:	000d      	movs	r5, r1
 80181f8:	291f      	cmp	r1, #31
 80181fa:	d904      	bls.n	8018206 <_raise_r+0x14>
 80181fc:	2316      	movs	r3, #22
 80181fe:	6003      	str	r3, [r0, #0]
 8018200:	2001      	movs	r0, #1
 8018202:	4240      	negs	r0, r0
 8018204:	bd70      	pop	{r4, r5, r6, pc}
 8018206:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8018208:	2b00      	cmp	r3, #0
 801820a:	d004      	beq.n	8018216 <_raise_r+0x24>
 801820c:	008a      	lsls	r2, r1, #2
 801820e:	189b      	adds	r3, r3, r2
 8018210:	681a      	ldr	r2, [r3, #0]
 8018212:	2a00      	cmp	r2, #0
 8018214:	d108      	bne.n	8018228 <_raise_r+0x36>
 8018216:	0020      	movs	r0, r4
 8018218:	f000 f832 	bl	8018280 <_getpid_r>
 801821c:	002a      	movs	r2, r5
 801821e:	0001      	movs	r1, r0
 8018220:	0020      	movs	r0, r4
 8018222:	f000 f81b 	bl	801825c <_kill_r>
 8018226:	e7ed      	b.n	8018204 <_raise_r+0x12>
 8018228:	2000      	movs	r0, #0
 801822a:	2a01      	cmp	r2, #1
 801822c:	d0ea      	beq.n	8018204 <_raise_r+0x12>
 801822e:	1c51      	adds	r1, r2, #1
 8018230:	d103      	bne.n	801823a <_raise_r+0x48>
 8018232:	2316      	movs	r3, #22
 8018234:	3001      	adds	r0, #1
 8018236:	6023      	str	r3, [r4, #0]
 8018238:	e7e4      	b.n	8018204 <_raise_r+0x12>
 801823a:	2400      	movs	r4, #0
 801823c:	0028      	movs	r0, r5
 801823e:	601c      	str	r4, [r3, #0]
 8018240:	4790      	blx	r2
 8018242:	0020      	movs	r0, r4
 8018244:	e7de      	b.n	8018204 <_raise_r+0x12>
	...

08018248 <raise>:
 8018248:	b510      	push	{r4, lr}
 801824a:	4b03      	ldr	r3, [pc, #12]	; (8018258 <raise+0x10>)
 801824c:	0001      	movs	r1, r0
 801824e:	6818      	ldr	r0, [r3, #0]
 8018250:	f7ff ffcf 	bl	80181f2 <_raise_r>
 8018254:	bd10      	pop	{r4, pc}
 8018256:	46c0      	nop			; (mov r8, r8)
 8018258:	200000c0 	.word	0x200000c0

0801825c <_kill_r>:
 801825c:	2300      	movs	r3, #0
 801825e:	b570      	push	{r4, r5, r6, lr}
 8018260:	4d06      	ldr	r5, [pc, #24]	; (801827c <_kill_r+0x20>)
 8018262:	0004      	movs	r4, r0
 8018264:	0008      	movs	r0, r1
 8018266:	0011      	movs	r1, r2
 8018268:	602b      	str	r3, [r5, #0]
 801826a:	f000 f8eb 	bl	8018444 <_kill>
 801826e:	1c43      	adds	r3, r0, #1
 8018270:	d103      	bne.n	801827a <_kill_r+0x1e>
 8018272:	682b      	ldr	r3, [r5, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d000      	beq.n	801827a <_kill_r+0x1e>
 8018278:	6023      	str	r3, [r4, #0]
 801827a:	bd70      	pop	{r4, r5, r6, pc}
 801827c:	200067d8 	.word	0x200067d8

08018280 <_getpid_r>:
 8018280:	b510      	push	{r4, lr}
 8018282:	f000 f8cf 	bl	8018424 <_getpid>
 8018286:	bd10      	pop	{r4, pc}

08018288 <__sread>:
 8018288:	b570      	push	{r4, r5, r6, lr}
 801828a:	000c      	movs	r4, r1
 801828c:	250e      	movs	r5, #14
 801828e:	5f49      	ldrsh	r1, [r1, r5]
 8018290:	f000 f8a4 	bl	80183dc <_read_r>
 8018294:	2800      	cmp	r0, #0
 8018296:	db03      	blt.n	80182a0 <__sread+0x18>
 8018298:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801829a:	181b      	adds	r3, r3, r0
 801829c:	6563      	str	r3, [r4, #84]	; 0x54
 801829e:	bd70      	pop	{r4, r5, r6, pc}
 80182a0:	89a3      	ldrh	r3, [r4, #12]
 80182a2:	4a02      	ldr	r2, [pc, #8]	; (80182ac <__sread+0x24>)
 80182a4:	4013      	ands	r3, r2
 80182a6:	81a3      	strh	r3, [r4, #12]
 80182a8:	e7f9      	b.n	801829e <__sread+0x16>
 80182aa:	46c0      	nop			; (mov r8, r8)
 80182ac:	ffffefff 	.word	0xffffefff

080182b0 <__swrite>:
 80182b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182b2:	001f      	movs	r7, r3
 80182b4:	898b      	ldrh	r3, [r1, #12]
 80182b6:	0005      	movs	r5, r0
 80182b8:	000c      	movs	r4, r1
 80182ba:	0016      	movs	r6, r2
 80182bc:	05db      	lsls	r3, r3, #23
 80182be:	d505      	bpl.n	80182cc <__swrite+0x1c>
 80182c0:	230e      	movs	r3, #14
 80182c2:	5ec9      	ldrsh	r1, [r1, r3]
 80182c4:	2200      	movs	r2, #0
 80182c6:	2302      	movs	r3, #2
 80182c8:	f000 f874 	bl	80183b4 <_lseek_r>
 80182cc:	89a3      	ldrh	r3, [r4, #12]
 80182ce:	4a05      	ldr	r2, [pc, #20]	; (80182e4 <__swrite+0x34>)
 80182d0:	0028      	movs	r0, r5
 80182d2:	4013      	ands	r3, r2
 80182d4:	81a3      	strh	r3, [r4, #12]
 80182d6:	0032      	movs	r2, r6
 80182d8:	230e      	movs	r3, #14
 80182da:	5ee1      	ldrsh	r1, [r4, r3]
 80182dc:	003b      	movs	r3, r7
 80182de:	f000 f81f 	bl	8018320 <_write_r>
 80182e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182e4:	ffffefff 	.word	0xffffefff

080182e8 <__sseek>:
 80182e8:	b570      	push	{r4, r5, r6, lr}
 80182ea:	000c      	movs	r4, r1
 80182ec:	250e      	movs	r5, #14
 80182ee:	5f49      	ldrsh	r1, [r1, r5]
 80182f0:	f000 f860 	bl	80183b4 <_lseek_r>
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	1c42      	adds	r2, r0, #1
 80182f8:	d103      	bne.n	8018302 <__sseek+0x1a>
 80182fa:	4a05      	ldr	r2, [pc, #20]	; (8018310 <__sseek+0x28>)
 80182fc:	4013      	ands	r3, r2
 80182fe:	81a3      	strh	r3, [r4, #12]
 8018300:	bd70      	pop	{r4, r5, r6, pc}
 8018302:	2280      	movs	r2, #128	; 0x80
 8018304:	0152      	lsls	r2, r2, #5
 8018306:	4313      	orrs	r3, r2
 8018308:	81a3      	strh	r3, [r4, #12]
 801830a:	6560      	str	r0, [r4, #84]	; 0x54
 801830c:	e7f8      	b.n	8018300 <__sseek+0x18>
 801830e:	46c0      	nop			; (mov r8, r8)
 8018310:	ffffefff 	.word	0xffffefff

08018314 <__sclose>:
 8018314:	b510      	push	{r4, lr}
 8018316:	230e      	movs	r3, #14
 8018318:	5ec9      	ldrsh	r1, [r1, r3]
 801831a:	f000 f815 	bl	8018348 <_close_r>
 801831e:	bd10      	pop	{r4, pc}

08018320 <_write_r>:
 8018320:	b570      	push	{r4, r5, r6, lr}
 8018322:	0004      	movs	r4, r0
 8018324:	0008      	movs	r0, r1
 8018326:	0011      	movs	r1, r2
 8018328:	001a      	movs	r2, r3
 801832a:	2300      	movs	r3, #0
 801832c:	4d05      	ldr	r5, [pc, #20]	; (8018344 <_write_r+0x24>)
 801832e:	602b      	str	r3, [r5, #0]
 8018330:	f000 f8b0 	bl	8018494 <_write>
 8018334:	1c43      	adds	r3, r0, #1
 8018336:	d103      	bne.n	8018340 <_write_r+0x20>
 8018338:	682b      	ldr	r3, [r5, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d000      	beq.n	8018340 <_write_r+0x20>
 801833e:	6023      	str	r3, [r4, #0]
 8018340:	bd70      	pop	{r4, r5, r6, pc}
 8018342:	46c0      	nop			; (mov r8, r8)
 8018344:	200067d8 	.word	0x200067d8

08018348 <_close_r>:
 8018348:	2300      	movs	r3, #0
 801834a:	b570      	push	{r4, r5, r6, lr}
 801834c:	4d06      	ldr	r5, [pc, #24]	; (8018368 <_close_r+0x20>)
 801834e:	0004      	movs	r4, r0
 8018350:	0008      	movs	r0, r1
 8018352:	602b      	str	r3, [r5, #0]
 8018354:	f000 f856 	bl	8018404 <_close>
 8018358:	1c43      	adds	r3, r0, #1
 801835a:	d103      	bne.n	8018364 <_close_r+0x1c>
 801835c:	682b      	ldr	r3, [r5, #0]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d000      	beq.n	8018364 <_close_r+0x1c>
 8018362:	6023      	str	r3, [r4, #0]
 8018364:	bd70      	pop	{r4, r5, r6, pc}
 8018366:	46c0      	nop			; (mov r8, r8)
 8018368:	200067d8 	.word	0x200067d8

0801836c <_fstat_r>:
 801836c:	2300      	movs	r3, #0
 801836e:	b570      	push	{r4, r5, r6, lr}
 8018370:	4d06      	ldr	r5, [pc, #24]	; (801838c <_fstat_r+0x20>)
 8018372:	0004      	movs	r4, r0
 8018374:	0008      	movs	r0, r1
 8018376:	0011      	movs	r1, r2
 8018378:	602b      	str	r3, [r5, #0]
 801837a:	f000 f84b 	bl	8018414 <_fstat>
 801837e:	1c43      	adds	r3, r0, #1
 8018380:	d103      	bne.n	801838a <_fstat_r+0x1e>
 8018382:	682b      	ldr	r3, [r5, #0]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d000      	beq.n	801838a <_fstat_r+0x1e>
 8018388:	6023      	str	r3, [r4, #0]
 801838a:	bd70      	pop	{r4, r5, r6, pc}
 801838c:	200067d8 	.word	0x200067d8

08018390 <_isatty_r>:
 8018390:	2300      	movs	r3, #0
 8018392:	b570      	push	{r4, r5, r6, lr}
 8018394:	4d06      	ldr	r5, [pc, #24]	; (80183b0 <_isatty_r+0x20>)
 8018396:	0004      	movs	r4, r0
 8018398:	0008      	movs	r0, r1
 801839a:	602b      	str	r3, [r5, #0]
 801839c:	f000 f84a 	bl	8018434 <_isatty>
 80183a0:	1c43      	adds	r3, r0, #1
 80183a2:	d103      	bne.n	80183ac <_isatty_r+0x1c>
 80183a4:	682b      	ldr	r3, [r5, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d000      	beq.n	80183ac <_isatty_r+0x1c>
 80183aa:	6023      	str	r3, [r4, #0]
 80183ac:	bd70      	pop	{r4, r5, r6, pc}
 80183ae:	46c0      	nop			; (mov r8, r8)
 80183b0:	200067d8 	.word	0x200067d8

080183b4 <_lseek_r>:
 80183b4:	b570      	push	{r4, r5, r6, lr}
 80183b6:	0004      	movs	r4, r0
 80183b8:	0008      	movs	r0, r1
 80183ba:	0011      	movs	r1, r2
 80183bc:	001a      	movs	r2, r3
 80183be:	2300      	movs	r3, #0
 80183c0:	4d05      	ldr	r5, [pc, #20]	; (80183d8 <_lseek_r+0x24>)
 80183c2:	602b      	str	r3, [r5, #0]
 80183c4:	f000 f846 	bl	8018454 <_lseek>
 80183c8:	1c43      	adds	r3, r0, #1
 80183ca:	d103      	bne.n	80183d4 <_lseek_r+0x20>
 80183cc:	682b      	ldr	r3, [r5, #0]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d000      	beq.n	80183d4 <_lseek_r+0x20>
 80183d2:	6023      	str	r3, [r4, #0]
 80183d4:	bd70      	pop	{r4, r5, r6, pc}
 80183d6:	46c0      	nop			; (mov r8, r8)
 80183d8:	200067d8 	.word	0x200067d8

080183dc <_read_r>:
 80183dc:	b570      	push	{r4, r5, r6, lr}
 80183de:	0004      	movs	r4, r0
 80183e0:	0008      	movs	r0, r1
 80183e2:	0011      	movs	r1, r2
 80183e4:	001a      	movs	r2, r3
 80183e6:	2300      	movs	r3, #0
 80183e8:	4d05      	ldr	r5, [pc, #20]	; (8018400 <_read_r+0x24>)
 80183ea:	602b      	str	r3, [r5, #0]
 80183ec:	f000 f83a 	bl	8018464 <_read>
 80183f0:	1c43      	adds	r3, r0, #1
 80183f2:	d103      	bne.n	80183fc <_read_r+0x20>
 80183f4:	682b      	ldr	r3, [r5, #0]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d000      	beq.n	80183fc <_read_r+0x20>
 80183fa:	6023      	str	r3, [r4, #0]
 80183fc:	bd70      	pop	{r4, r5, r6, pc}
 80183fe:	46c0      	nop			; (mov r8, r8)
 8018400:	200067d8 	.word	0x200067d8

08018404 <_close>:
 8018404:	2258      	movs	r2, #88	; 0x58
 8018406:	2001      	movs	r0, #1
 8018408:	4b01      	ldr	r3, [pc, #4]	; (8018410 <_close+0xc>)
 801840a:	4240      	negs	r0, r0
 801840c:	601a      	str	r2, [r3, #0]
 801840e:	4770      	bx	lr
 8018410:	200067d8 	.word	0x200067d8

08018414 <_fstat>:
 8018414:	2258      	movs	r2, #88	; 0x58
 8018416:	2001      	movs	r0, #1
 8018418:	4b01      	ldr	r3, [pc, #4]	; (8018420 <_fstat+0xc>)
 801841a:	4240      	negs	r0, r0
 801841c:	601a      	str	r2, [r3, #0]
 801841e:	4770      	bx	lr
 8018420:	200067d8 	.word	0x200067d8

08018424 <_getpid>:
 8018424:	2258      	movs	r2, #88	; 0x58
 8018426:	2001      	movs	r0, #1
 8018428:	4b01      	ldr	r3, [pc, #4]	; (8018430 <_getpid+0xc>)
 801842a:	4240      	negs	r0, r0
 801842c:	601a      	str	r2, [r3, #0]
 801842e:	4770      	bx	lr
 8018430:	200067d8 	.word	0x200067d8

08018434 <_isatty>:
 8018434:	2258      	movs	r2, #88	; 0x58
 8018436:	4b02      	ldr	r3, [pc, #8]	; (8018440 <_isatty+0xc>)
 8018438:	2000      	movs	r0, #0
 801843a:	601a      	str	r2, [r3, #0]
 801843c:	4770      	bx	lr
 801843e:	46c0      	nop			; (mov r8, r8)
 8018440:	200067d8 	.word	0x200067d8

08018444 <_kill>:
 8018444:	2258      	movs	r2, #88	; 0x58
 8018446:	2001      	movs	r0, #1
 8018448:	4b01      	ldr	r3, [pc, #4]	; (8018450 <_kill+0xc>)
 801844a:	4240      	negs	r0, r0
 801844c:	601a      	str	r2, [r3, #0]
 801844e:	4770      	bx	lr
 8018450:	200067d8 	.word	0x200067d8

08018454 <_lseek>:
 8018454:	2258      	movs	r2, #88	; 0x58
 8018456:	2001      	movs	r0, #1
 8018458:	4b01      	ldr	r3, [pc, #4]	; (8018460 <_lseek+0xc>)
 801845a:	4240      	negs	r0, r0
 801845c:	601a      	str	r2, [r3, #0]
 801845e:	4770      	bx	lr
 8018460:	200067d8 	.word	0x200067d8

08018464 <_read>:
 8018464:	2258      	movs	r2, #88	; 0x58
 8018466:	2001      	movs	r0, #1
 8018468:	4b01      	ldr	r3, [pc, #4]	; (8018470 <_read+0xc>)
 801846a:	4240      	negs	r0, r0
 801846c:	601a      	str	r2, [r3, #0]
 801846e:	4770      	bx	lr
 8018470:	200067d8 	.word	0x200067d8

08018474 <_sbrk>:
 8018474:	4a05      	ldr	r2, [pc, #20]	; (801848c <_sbrk+0x18>)
 8018476:	0003      	movs	r3, r0
 8018478:	6811      	ldr	r1, [r2, #0]
 801847a:	2900      	cmp	r1, #0
 801847c:	d101      	bne.n	8018482 <_sbrk+0xe>
 801847e:	4904      	ldr	r1, [pc, #16]	; (8018490 <_sbrk+0x1c>)
 8018480:	6011      	str	r1, [r2, #0]
 8018482:	6810      	ldr	r0, [r2, #0]
 8018484:	18c3      	adds	r3, r0, r3
 8018486:	6013      	str	r3, [r2, #0]
 8018488:	4770      	bx	lr
 801848a:	46c0      	nop			; (mov r8, r8)
 801848c:	200061f0 	.word	0x200061f0
 8018490:	200067e8 	.word	0x200067e8

08018494 <_write>:
 8018494:	2258      	movs	r2, #88	; 0x58
 8018496:	2001      	movs	r0, #1
 8018498:	4b01      	ldr	r3, [pc, #4]	; (80184a0 <_write+0xc>)
 801849a:	4240      	negs	r0, r0
 801849c:	601a      	str	r2, [r3, #0]
 801849e:	4770      	bx	lr
 80184a0:	200067d8 	.word	0x200067d8

080184a4 <_exit>:
 80184a4:	e7fe      	b.n	80184a4 <_exit>
	...

080184a8 <_init>:
 80184a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184aa:	46c0      	nop			; (mov r8, r8)
 80184ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ae:	bc08      	pop	{r3}
 80184b0:	469e      	mov	lr, r3
 80184b2:	4770      	bx	lr

080184b4 <_fini>:
 80184b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184b6:	46c0      	nop			; (mov r8, r8)
 80184b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ba:	bc08      	pop	{r3}
 80184bc:	469e      	mov	lr, r3
 80184be:	4770      	bx	lr
