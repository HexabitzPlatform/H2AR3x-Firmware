
H2AR3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017140  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003328  08017200  08017200  00027200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a528  0801a528  00030290  2**0
                  CONTENTS
  4 .ARM          00000000  0801a528  0801a528  00030290  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801a528  0801a528  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a528  0801a528  0002a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a52c  0801a52c  0002a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801a530  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000284  2000000c  0801a53c  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006544  20000290  0801a7c0  00030290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200067d4  0801a7c0  000367d4  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054ea6  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000083f2  00000000  00000000  0008515e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a728  00000000  00000000  0008d550  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001d38  00000000  00000000  000a7c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000020a0  00000000  00000000  000a99b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0001af5f  00000000  00000000  000aba50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00025d58  00000000  00000000  000c69af  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    000835f0  00000000  00000000  000ec707  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0016fcf7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000062a0  00000000  00000000  0016fd74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000290 	.word	0x20000290
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080171e4 	.word	0x080171e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000294 	.word	0x20000294
 8000100:	080171e4 	.word	0x080171e4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fd41 	bl	8001ec0 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc99 	bl	8001d80 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd33 	bl	8001ec0 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fd29 	bl	8001ec0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fcbb 	bl	8001df8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fcb1 	bl	8001df8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	1c08      	adds	r0, r1, #0
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 faa3 	bl	80009f8 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa25 	bl	800090c <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fa95 	bl	80009f8 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			; (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fa8b 	bl	80009f8 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fa33 	bl	800095c <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fa29 	bl	800095c <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_lmul>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	46ce      	mov	lr, r9
 800051c:	4647      	mov	r7, r8
 800051e:	0415      	lsls	r5, r2, #16
 8000520:	0c2d      	lsrs	r5, r5, #16
 8000522:	002e      	movs	r6, r5
 8000524:	b580      	push	{r7, lr}
 8000526:	0407      	lsls	r7, r0, #16
 8000528:	0c14      	lsrs	r4, r2, #16
 800052a:	0c3f      	lsrs	r7, r7, #16
 800052c:	4699      	mov	r9, r3
 800052e:	0c03      	lsrs	r3, r0, #16
 8000530:	437e      	muls	r6, r7
 8000532:	435d      	muls	r5, r3
 8000534:	4367      	muls	r7, r4
 8000536:	4363      	muls	r3, r4
 8000538:	197f      	adds	r7, r7, r5
 800053a:	0c34      	lsrs	r4, r6, #16
 800053c:	19e4      	adds	r4, r4, r7
 800053e:	469c      	mov	ip, r3
 8000540:	42a5      	cmp	r5, r4
 8000542:	d903      	bls.n	800054c <__aeabi_lmul+0x34>
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	025b      	lsls	r3, r3, #9
 8000548:	4698      	mov	r8, r3
 800054a:	44c4      	add	ip, r8
 800054c:	464b      	mov	r3, r9
 800054e:	4343      	muls	r3, r0
 8000550:	4351      	muls	r1, r2
 8000552:	0c25      	lsrs	r5, r4, #16
 8000554:	0436      	lsls	r6, r6, #16
 8000556:	4465      	add	r5, ip
 8000558:	0c36      	lsrs	r6, r6, #16
 800055a:	0424      	lsls	r4, r4, #16
 800055c:	19a4      	adds	r4, r4, r6
 800055e:	195b      	adds	r3, r3, r5
 8000560:	1859      	adds	r1, r3, r1
 8000562:	0020      	movs	r0, r4
 8000564:	bc0c      	pop	{r2, r3}
 8000566:	4690      	mov	r8, r2
 8000568:	4699      	mov	r9, r3
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	; 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffc6 	bl	8000504 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f000 fd81 	bl	8001084 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fbb7 	bl	8000cfc <__aeabi_fsub>
 800058e:	f000 fd79 	bl	8001084 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	; 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff73 	bl	8000490 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 fac3 	bl	8002b3c <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f001 ff58 	bl	8002474 <__aeabi_dsub>
 80005c4:	f002 faba 	bl	8002b3c <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__aeabi_fadd>:
 80005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005da:	4647      	mov	r7, r8
 80005dc:	46ce      	mov	lr, r9
 80005de:	0243      	lsls	r3, r0, #9
 80005e0:	0a5b      	lsrs	r3, r3, #9
 80005e2:	0044      	lsls	r4, r0, #1
 80005e4:	0fc2      	lsrs	r2, r0, #31
 80005e6:	469c      	mov	ip, r3
 80005e8:	0048      	lsls	r0, r1, #1
 80005ea:	00dd      	lsls	r5, r3, #3
 80005ec:	024b      	lsls	r3, r1, #9
 80005ee:	0e24      	lsrs	r4, r4, #24
 80005f0:	0a5b      	lsrs	r3, r3, #9
 80005f2:	0e00      	lsrs	r0, r0, #24
 80005f4:	b580      	push	{r7, lr}
 80005f6:	4698      	mov	r8, r3
 80005f8:	0026      	movs	r6, r4
 80005fa:	4691      	mov	r9, r2
 80005fc:	0fc9      	lsrs	r1, r1, #31
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	1a27      	subs	r7, r4, r0
 8000602:	428a      	cmp	r2, r1
 8000604:	d029      	beq.n	800065a <__aeabi_fadd+0x82>
 8000606:	2f00      	cmp	r7, #0
 8000608:	dd15      	ble.n	8000636 <__aeabi_fadd+0x5e>
 800060a:	2800      	cmp	r0, #0
 800060c:	d14a      	bne.n	80006a4 <__aeabi_fadd+0xcc>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d000      	beq.n	8000614 <__aeabi_fadd+0x3c>
 8000612:	e095      	b.n	8000740 <__aeabi_fadd+0x168>
 8000614:	08ed      	lsrs	r5, r5, #3
 8000616:	2cff      	cmp	r4, #255	; 0xff
 8000618:	d100      	bne.n	800061c <__aeabi_fadd+0x44>
 800061a:	e088      	b.n	800072e <__aeabi_fadd+0x156>
 800061c:	026b      	lsls	r3, r5, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	b2e6      	uxtb	r6, r4
 8000622:	025b      	lsls	r3, r3, #9
 8000624:	05f6      	lsls	r6, r6, #23
 8000626:	0a58      	lsrs	r0, r3, #9
 8000628:	4330      	orrs	r0, r6
 800062a:	07d2      	lsls	r2, r2, #31
 800062c:	4310      	orrs	r0, r2
 800062e:	bc0c      	pop	{r2, r3}
 8000630:	4690      	mov	r8, r2
 8000632:	4699      	mov	r9, r3
 8000634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000636:	2f00      	cmp	r7, #0
 8000638:	d000      	beq.n	800063c <__aeabi_fadd+0x64>
 800063a:	e087      	b.n	800074c <__aeabi_fadd+0x174>
 800063c:	1c60      	adds	r0, r4, #1
 800063e:	b2c0      	uxtb	r0, r0
 8000640:	2801      	cmp	r0, #1
 8000642:	dc00      	bgt.n	8000646 <__aeabi_fadd+0x6e>
 8000644:	e0b6      	b.n	80007b4 <__aeabi_fadd+0x1dc>
 8000646:	1aee      	subs	r6, r5, r3
 8000648:	0172      	lsls	r2, r6, #5
 800064a:	d500      	bpl.n	800064e <__aeabi_fadd+0x76>
 800064c:	e0c5      	b.n	80007da <__aeabi_fadd+0x202>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d13d      	bne.n	80006ce <__aeabi_fadd+0xf6>
 8000652:	2200      	movs	r2, #0
 8000654:	2600      	movs	r6, #0
 8000656:	2300      	movs	r3, #0
 8000658:	e7e3      	b.n	8000622 <__aeabi_fadd+0x4a>
 800065a:	2f00      	cmp	r7, #0
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0x88>
 800065e:	e096      	b.n	800078e <__aeabi_fadd+0x1b6>
 8000660:	2800      	cmp	r0, #0
 8000662:	d05d      	beq.n	8000720 <__aeabi_fadd+0x148>
 8000664:	2cff      	cmp	r4, #255	; 0xff
 8000666:	d060      	beq.n	800072a <__aeabi_fadd+0x152>
 8000668:	2280      	movs	r2, #128	; 0x80
 800066a:	04d2      	lsls	r2, r2, #19
 800066c:	4313      	orrs	r3, r2
 800066e:	2f1b      	cmp	r7, #27
 8000670:	dd00      	ble.n	8000674 <__aeabi_fadd+0x9c>
 8000672:	e0ec      	b.n	800084e <__aeabi_fadd+0x276>
 8000674:	2220      	movs	r2, #32
 8000676:	1bd2      	subs	r2, r2, r7
 8000678:	0018      	movs	r0, r3
 800067a:	4093      	lsls	r3, r2
 800067c:	40f8      	lsrs	r0, r7
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	4193      	sbcs	r3, r2
 8000682:	4303      	orrs	r3, r0
 8000684:	18ed      	adds	r5, r5, r3
 8000686:	016b      	lsls	r3, r5, #5
 8000688:	d57b      	bpl.n	8000782 <__aeabi_fadd+0x1aa>
 800068a:	3401      	adds	r4, #1
 800068c:	2cff      	cmp	r4, #255	; 0xff
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0xba>
 8000690:	e0b7      	b.n	8000802 <__aeabi_fadd+0x22a>
 8000692:	2201      	movs	r2, #1
 8000694:	2607      	movs	r6, #7
 8000696:	402a      	ands	r2, r5
 8000698:	086b      	lsrs	r3, r5, #1
 800069a:	4d9a      	ldr	r5, [pc, #616]	; (8000904 <__aeabi_fadd+0x32c>)
 800069c:	401d      	ands	r5, r3
 800069e:	4315      	orrs	r5, r2
 80006a0:	402e      	ands	r6, r5
 80006a2:	e029      	b.n	80006f8 <__aeabi_fadd+0x120>
 80006a4:	2cff      	cmp	r4, #255	; 0xff
 80006a6:	d0b5      	beq.n	8000614 <__aeabi_fadd+0x3c>
 80006a8:	2280      	movs	r2, #128	; 0x80
 80006aa:	04d2      	lsls	r2, r2, #19
 80006ac:	4313      	orrs	r3, r2
 80006ae:	2f1b      	cmp	r7, #27
 80006b0:	dd00      	ble.n	80006b4 <__aeabi_fadd+0xdc>
 80006b2:	e0b2      	b.n	800081a <__aeabi_fadd+0x242>
 80006b4:	2220      	movs	r2, #32
 80006b6:	1bd2      	subs	r2, r2, r7
 80006b8:	0019      	movs	r1, r3
 80006ba:	4093      	lsls	r3, r2
 80006bc:	40f9      	lsrs	r1, r7
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	4193      	sbcs	r3, r2
 80006c2:	430b      	orrs	r3, r1
 80006c4:	1aed      	subs	r5, r5, r3
 80006c6:	016b      	lsls	r3, r5, #5
 80006c8:	d55b      	bpl.n	8000782 <__aeabi_fadd+0x1aa>
 80006ca:	01ad      	lsls	r5, r5, #6
 80006cc:	09ae      	lsrs	r6, r5, #6
 80006ce:	0030      	movs	r0, r6
 80006d0:	f002 fbac 	bl	8002e2c <__clzsi2>
 80006d4:	3805      	subs	r0, #5
 80006d6:	4086      	lsls	r6, r0
 80006d8:	4284      	cmp	r4, r0
 80006da:	dc65      	bgt.n	80007a8 <__aeabi_fadd+0x1d0>
 80006dc:	1b04      	subs	r4, r0, r4
 80006de:	0033      	movs	r3, r6
 80006e0:	2020      	movs	r0, #32
 80006e2:	3401      	adds	r4, #1
 80006e4:	40e3      	lsrs	r3, r4
 80006e6:	1b04      	subs	r4, r0, r4
 80006e8:	40a6      	lsls	r6, r4
 80006ea:	1e75      	subs	r5, r6, #1
 80006ec:	41ae      	sbcs	r6, r5
 80006ee:	4333      	orrs	r3, r6
 80006f0:	2607      	movs	r6, #7
 80006f2:	001d      	movs	r5, r3
 80006f4:	2400      	movs	r4, #0
 80006f6:	401e      	ands	r6, r3
 80006f8:	2201      	movs	r2, #1
 80006fa:	464b      	mov	r3, r9
 80006fc:	401a      	ands	r2, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d004      	beq.n	800070c <__aeabi_fadd+0x134>
 8000702:	230f      	movs	r3, #15
 8000704:	402b      	ands	r3, r5
 8000706:	2b04      	cmp	r3, #4
 8000708:	d000      	beq.n	800070c <__aeabi_fadd+0x134>
 800070a:	3504      	adds	r5, #4
 800070c:	016b      	lsls	r3, r5, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x13a>
 8000710:	e780      	b.n	8000614 <__aeabi_fadd+0x3c>
 8000712:	3401      	adds	r4, #1
 8000714:	b2e6      	uxtb	r6, r4
 8000716:	2cff      	cmp	r4, #255	; 0xff
 8000718:	d12f      	bne.n	800077a <__aeabi_fadd+0x1a2>
 800071a:	26ff      	movs	r6, #255	; 0xff
 800071c:	2300      	movs	r3, #0
 800071e:	e780      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d152      	bne.n	80007ca <__aeabi_fadd+0x1f2>
 8000724:	2cff      	cmp	r4, #255	; 0xff
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x152>
 8000728:	e774      	b.n	8000614 <__aeabi_fadd+0x3c>
 800072a:	000a      	movs	r2, r1
 800072c:	08ed      	lsrs	r5, r5, #3
 800072e:	2d00      	cmp	r5, #0
 8000730:	d0f3      	beq.n	800071a <__aeabi_fadd+0x142>
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	03db      	lsls	r3, r3, #15
 8000736:	432b      	orrs	r3, r5
 8000738:	025b      	lsls	r3, r3, #9
 800073a:	0a5b      	lsrs	r3, r3, #9
 800073c:	26ff      	movs	r6, #255	; 0xff
 800073e:	e770      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000740:	3f01      	subs	r7, #1
 8000742:	2f00      	cmp	r7, #0
 8000744:	d0be      	beq.n	80006c4 <__aeabi_fadd+0xec>
 8000746:	2cff      	cmp	r4, #255	; 0xff
 8000748:	d1b1      	bne.n	80006ae <__aeabi_fadd+0xd6>
 800074a:	e763      	b.n	8000614 <__aeabi_fadd+0x3c>
 800074c:	2c00      	cmp	r4, #0
 800074e:	d047      	beq.n	80007e0 <__aeabi_fadd+0x208>
 8000750:	28ff      	cmp	r0, #255	; 0xff
 8000752:	d069      	beq.n	8000828 <__aeabi_fadd+0x250>
 8000754:	2480      	movs	r4, #128	; 0x80
 8000756:	04e4      	lsls	r4, r4, #19
 8000758:	427a      	negs	r2, r7
 800075a:	4325      	orrs	r5, r4
 800075c:	2a1b      	cmp	r2, #27
 800075e:	dd00      	ble.n	8000762 <__aeabi_fadd+0x18a>
 8000760:	e0c5      	b.n	80008ee <__aeabi_fadd+0x316>
 8000762:	002c      	movs	r4, r5
 8000764:	2620      	movs	r6, #32
 8000766:	40d4      	lsrs	r4, r2
 8000768:	1ab2      	subs	r2, r6, r2
 800076a:	4095      	lsls	r5, r2
 800076c:	1e6a      	subs	r2, r5, #1
 800076e:	4195      	sbcs	r5, r2
 8000770:	4325      	orrs	r5, r4
 8000772:	1b5d      	subs	r5, r3, r5
 8000774:	0004      	movs	r4, r0
 8000776:	4689      	mov	r9, r1
 8000778:	e7a5      	b.n	80006c6 <__aeabi_fadd+0xee>
 800077a:	01ab      	lsls	r3, r5, #6
 800077c:	0a5b      	lsrs	r3, r3, #9
 800077e:	e750      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000780:	2400      	movs	r4, #0
 8000782:	2201      	movs	r2, #1
 8000784:	464b      	mov	r3, r9
 8000786:	401a      	ands	r2, r3
 8000788:	076b      	lsls	r3, r5, #29
 800078a:	d1ba      	bne.n	8000702 <__aeabi_fadd+0x12a>
 800078c:	e742      	b.n	8000614 <__aeabi_fadd+0x3c>
 800078e:	2f00      	cmp	r7, #0
 8000790:	d13b      	bne.n	800080a <__aeabi_fadd+0x232>
 8000792:	3401      	adds	r4, #1
 8000794:	b2e0      	uxtb	r0, r4
 8000796:	2801      	cmp	r0, #1
 8000798:	dd4a      	ble.n	8000830 <__aeabi_fadd+0x258>
 800079a:	2cff      	cmp	r4, #255	; 0xff
 800079c:	d0bd      	beq.n	800071a <__aeabi_fadd+0x142>
 800079e:	2607      	movs	r6, #7
 80007a0:	18ed      	adds	r5, r5, r3
 80007a2:	086d      	lsrs	r5, r5, #1
 80007a4:	402e      	ands	r6, r5
 80007a6:	e7a7      	b.n	80006f8 <__aeabi_fadd+0x120>
 80007a8:	2307      	movs	r3, #7
 80007aa:	4d57      	ldr	r5, [pc, #348]	; (8000908 <__aeabi_fadd+0x330>)
 80007ac:	1a24      	subs	r4, r4, r0
 80007ae:	4035      	ands	r5, r6
 80007b0:	401e      	ands	r6, r3
 80007b2:	e7a1      	b.n	80006f8 <__aeabi_fadd+0x120>
 80007b4:	2c00      	cmp	r4, #0
 80007b6:	d11b      	bne.n	80007f0 <__aeabi_fadd+0x218>
 80007b8:	2d00      	cmp	r5, #0
 80007ba:	d16e      	bne.n	800089a <__aeabi_fadd+0x2c2>
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x1ea>
 80007c0:	e09a      	b.n	80008f8 <__aeabi_fadd+0x320>
 80007c2:	000a      	movs	r2, r1
 80007c4:	001d      	movs	r5, r3
 80007c6:	003c      	movs	r4, r7
 80007c8:	e724      	b.n	8000614 <__aeabi_fadd+0x3c>
 80007ca:	3f01      	subs	r7, #1
 80007cc:	2f00      	cmp	r7, #0
 80007ce:	d100      	bne.n	80007d2 <__aeabi_fadd+0x1fa>
 80007d0:	e758      	b.n	8000684 <__aeabi_fadd+0xac>
 80007d2:	2cff      	cmp	r4, #255	; 0xff
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x200>
 80007d6:	e74a      	b.n	800066e <__aeabi_fadd+0x96>
 80007d8:	e7a7      	b.n	800072a <__aeabi_fadd+0x152>
 80007da:	1b5e      	subs	r6, r3, r5
 80007dc:	4689      	mov	r9, r1
 80007de:	e776      	b.n	80006ce <__aeabi_fadd+0xf6>
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d11c      	bne.n	800081e <__aeabi_fadd+0x246>
 80007e4:	000a      	movs	r2, r1
 80007e6:	28ff      	cmp	r0, #255	; 0xff
 80007e8:	d01f      	beq.n	800082a <__aeabi_fadd+0x252>
 80007ea:	0004      	movs	r4, r0
 80007ec:	001d      	movs	r5, r3
 80007ee:	e711      	b.n	8000614 <__aeabi_fadd+0x3c>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d15d      	bne.n	80008b0 <__aeabi_fadd+0x2d8>
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d117      	bne.n	8000828 <__aeabi_fadd+0x250>
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	2200      	movs	r2, #0
 80007fc:	03db      	lsls	r3, r3, #15
 80007fe:	26ff      	movs	r6, #255	; 0xff
 8000800:	e70f      	b.n	8000622 <__aeabi_fadd+0x4a>
 8000802:	000a      	movs	r2, r1
 8000804:	26ff      	movs	r6, #255	; 0xff
 8000806:	2300      	movs	r3, #0
 8000808:	e70b      	b.n	8000622 <__aeabi_fadd+0x4a>
 800080a:	2c00      	cmp	r4, #0
 800080c:	d121      	bne.n	8000852 <__aeabi_fadd+0x27a>
 800080e:	2d00      	cmp	r5, #0
 8000810:	d166      	bne.n	80008e0 <__aeabi_fadd+0x308>
 8000812:	28ff      	cmp	r0, #255	; 0xff
 8000814:	d1e9      	bne.n	80007ea <__aeabi_fadd+0x212>
 8000816:	001d      	movs	r5, r3
 8000818:	e787      	b.n	800072a <__aeabi_fadd+0x152>
 800081a:	2301      	movs	r3, #1
 800081c:	e752      	b.n	80006c4 <__aeabi_fadd+0xec>
 800081e:	1c7a      	adds	r2, r7, #1
 8000820:	d0a7      	beq.n	8000772 <__aeabi_fadd+0x19a>
 8000822:	43fa      	mvns	r2, r7
 8000824:	28ff      	cmp	r0, #255	; 0xff
 8000826:	d199      	bne.n	800075c <__aeabi_fadd+0x184>
 8000828:	000a      	movs	r2, r1
 800082a:	001d      	movs	r5, r3
 800082c:	24ff      	movs	r4, #255	; 0xff
 800082e:	e6f1      	b.n	8000614 <__aeabi_fadd+0x3c>
 8000830:	2e00      	cmp	r6, #0
 8000832:	d121      	bne.n	8000878 <__aeabi_fadd+0x2a0>
 8000834:	2d00      	cmp	r5, #0
 8000836:	d04f      	beq.n	80008d8 <__aeabi_fadd+0x300>
 8000838:	2b00      	cmp	r3, #0
 800083a:	d04c      	beq.n	80008d6 <__aeabi_fadd+0x2fe>
 800083c:	18ed      	adds	r5, r5, r3
 800083e:	016b      	lsls	r3, r5, #5
 8000840:	d59e      	bpl.n	8000780 <__aeabi_fadd+0x1a8>
 8000842:	4b31      	ldr	r3, [pc, #196]	; (8000908 <__aeabi_fadd+0x330>)
 8000844:	3607      	adds	r6, #7
 8000846:	402e      	ands	r6, r5
 8000848:	2401      	movs	r4, #1
 800084a:	401d      	ands	r5, r3
 800084c:	e754      	b.n	80006f8 <__aeabi_fadd+0x120>
 800084e:	2301      	movs	r3, #1
 8000850:	e718      	b.n	8000684 <__aeabi_fadd+0xac>
 8000852:	28ff      	cmp	r0, #255	; 0xff
 8000854:	d0df      	beq.n	8000816 <__aeabi_fadd+0x23e>
 8000856:	2480      	movs	r4, #128	; 0x80
 8000858:	04e4      	lsls	r4, r4, #19
 800085a:	427f      	negs	r7, r7
 800085c:	4325      	orrs	r5, r4
 800085e:	2f1b      	cmp	r7, #27
 8000860:	dc4d      	bgt.n	80008fe <__aeabi_fadd+0x326>
 8000862:	2620      	movs	r6, #32
 8000864:	1bf6      	subs	r6, r6, r7
 8000866:	002c      	movs	r4, r5
 8000868:	40b5      	lsls	r5, r6
 800086a:	40fc      	lsrs	r4, r7
 800086c:	1e6a      	subs	r2, r5, #1
 800086e:	4195      	sbcs	r5, r2
 8000870:	4325      	orrs	r5, r4
 8000872:	18ed      	adds	r5, r5, r3
 8000874:	0004      	movs	r4, r0
 8000876:	e706      	b.n	8000686 <__aeabi_fadd+0xae>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d0cc      	beq.n	8000816 <__aeabi_fadd+0x23e>
 800087c:	2b00      	cmp	r3, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fadd+0x2aa>
 8000880:	e753      	b.n	800072a <__aeabi_fadd+0x152>
 8000882:	2180      	movs	r1, #128	; 0x80
 8000884:	4660      	mov	r0, ip
 8000886:	03c9      	lsls	r1, r1, #15
 8000888:	4208      	tst	r0, r1
 800088a:	d003      	beq.n	8000894 <__aeabi_fadd+0x2bc>
 800088c:	4640      	mov	r0, r8
 800088e:	4208      	tst	r0, r1
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x2bc>
 8000892:	001d      	movs	r5, r3
 8000894:	2101      	movs	r1, #1
 8000896:	4011      	ands	r1, r2
 8000898:	e747      	b.n	800072a <__aeabi_fadd+0x152>
 800089a:	2b00      	cmp	r3, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x2c8>
 800089e:	e6b9      	b.n	8000614 <__aeabi_fadd+0x3c>
 80008a0:	1aea      	subs	r2, r5, r3
 80008a2:	0150      	lsls	r0, r2, #5
 80008a4:	d525      	bpl.n	80008f2 <__aeabi_fadd+0x31a>
 80008a6:	2607      	movs	r6, #7
 80008a8:	1b5d      	subs	r5, r3, r5
 80008aa:	402e      	ands	r6, r5
 80008ac:	4689      	mov	r9, r1
 80008ae:	e723      	b.n	80006f8 <__aeabi_fadd+0x120>
 80008b0:	24ff      	movs	r4, #255	; 0xff
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fadd+0x2e0>
 80008b6:	e6ad      	b.n	8000614 <__aeabi_fadd+0x3c>
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	4660      	mov	r0, ip
 80008bc:	03d2      	lsls	r2, r2, #15
 80008be:	4210      	tst	r0, r2
 80008c0:	d004      	beq.n	80008cc <__aeabi_fadd+0x2f4>
 80008c2:	4640      	mov	r0, r8
 80008c4:	4210      	tst	r0, r2
 80008c6:	d101      	bne.n	80008cc <__aeabi_fadd+0x2f4>
 80008c8:	001d      	movs	r5, r3
 80008ca:	4689      	mov	r9, r1
 80008cc:	2201      	movs	r2, #1
 80008ce:	464b      	mov	r3, r9
 80008d0:	24ff      	movs	r4, #255	; 0xff
 80008d2:	401a      	ands	r2, r3
 80008d4:	e69e      	b.n	8000614 <__aeabi_fadd+0x3c>
 80008d6:	002b      	movs	r3, r5
 80008d8:	08dd      	lsrs	r5, r3, #3
 80008da:	000a      	movs	r2, r1
 80008dc:	2400      	movs	r4, #0
 80008de:	e69d      	b.n	800061c <__aeabi_fadd+0x44>
 80008e0:	1c7a      	adds	r2, r7, #1
 80008e2:	d0c6      	beq.n	8000872 <__aeabi_fadd+0x29a>
 80008e4:	43ff      	mvns	r7, r7
 80008e6:	28ff      	cmp	r0, #255	; 0xff
 80008e8:	d1b9      	bne.n	800085e <__aeabi_fadd+0x286>
 80008ea:	001d      	movs	r5, r3
 80008ec:	e71d      	b.n	800072a <__aeabi_fadd+0x152>
 80008ee:	2501      	movs	r5, #1
 80008f0:	e73f      	b.n	8000772 <__aeabi_fadd+0x19a>
 80008f2:	1e15      	subs	r5, r2, #0
 80008f4:	d000      	beq.n	80008f8 <__aeabi_fadd+0x320>
 80008f6:	e744      	b.n	8000782 <__aeabi_fadd+0x1aa>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2300      	movs	r3, #0
 80008fc:	e691      	b.n	8000622 <__aeabi_fadd+0x4a>
 80008fe:	2501      	movs	r5, #1
 8000900:	e7b7      	b.n	8000872 <__aeabi_fadd+0x29a>
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	7dffffff 	.word	0x7dffffff
 8000908:	fbffffff 	.word	0xfbffffff

0800090c <__eqsf2>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	0042      	lsls	r2, r0, #1
 8000910:	024e      	lsls	r6, r1, #9
 8000912:	004c      	lsls	r4, r1, #1
 8000914:	0245      	lsls	r5, r0, #9
 8000916:	0a6d      	lsrs	r5, r5, #9
 8000918:	0e12      	lsrs	r2, r2, #24
 800091a:	0fc3      	lsrs	r3, r0, #31
 800091c:	0a76      	lsrs	r6, r6, #9
 800091e:	0e24      	lsrs	r4, r4, #24
 8000920:	0fc9      	lsrs	r1, r1, #31
 8000922:	2aff      	cmp	r2, #255	; 0xff
 8000924:	d00f      	beq.n	8000946 <__eqsf2+0x3a>
 8000926:	2cff      	cmp	r4, #255	; 0xff
 8000928:	d011      	beq.n	800094e <__eqsf2+0x42>
 800092a:	2001      	movs	r0, #1
 800092c:	42a2      	cmp	r2, r4
 800092e:	d000      	beq.n	8000932 <__eqsf2+0x26>
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	42b5      	cmp	r5, r6
 8000934:	d1fc      	bne.n	8000930 <__eqsf2+0x24>
 8000936:	428b      	cmp	r3, r1
 8000938:	d00d      	beq.n	8000956 <__eqsf2+0x4a>
 800093a:	2a00      	cmp	r2, #0
 800093c:	d1f8      	bne.n	8000930 <__eqsf2+0x24>
 800093e:	0028      	movs	r0, r5
 8000940:	1e45      	subs	r5, r0, #1
 8000942:	41a8      	sbcs	r0, r5
 8000944:	e7f4      	b.n	8000930 <__eqsf2+0x24>
 8000946:	2001      	movs	r0, #1
 8000948:	2d00      	cmp	r5, #0
 800094a:	d1f1      	bne.n	8000930 <__eqsf2+0x24>
 800094c:	e7eb      	b.n	8000926 <__eqsf2+0x1a>
 800094e:	2001      	movs	r0, #1
 8000950:	2e00      	cmp	r6, #0
 8000952:	d1ed      	bne.n	8000930 <__eqsf2+0x24>
 8000954:	e7e9      	b.n	800092a <__eqsf2+0x1e>
 8000956:	2000      	movs	r0, #0
 8000958:	e7ea      	b.n	8000930 <__eqsf2+0x24>
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <__gesf2>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	004a      	lsls	r2, r1, #1
 8000960:	024e      	lsls	r6, r1, #9
 8000962:	0245      	lsls	r5, r0, #9
 8000964:	0044      	lsls	r4, r0, #1
 8000966:	0a6d      	lsrs	r5, r5, #9
 8000968:	0e24      	lsrs	r4, r4, #24
 800096a:	0fc3      	lsrs	r3, r0, #31
 800096c:	0a76      	lsrs	r6, r6, #9
 800096e:	0e12      	lsrs	r2, r2, #24
 8000970:	0fc9      	lsrs	r1, r1, #31
 8000972:	2cff      	cmp	r4, #255	; 0xff
 8000974:	d015      	beq.n	80009a2 <__gesf2+0x46>
 8000976:	2aff      	cmp	r2, #255	; 0xff
 8000978:	d00e      	beq.n	8000998 <__gesf2+0x3c>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d115      	bne.n	80009aa <__gesf2+0x4e>
 800097e:	2a00      	cmp	r2, #0
 8000980:	d101      	bne.n	8000986 <__gesf2+0x2a>
 8000982:	2e00      	cmp	r6, #0
 8000984:	d01c      	beq.n	80009c0 <__gesf2+0x64>
 8000986:	2d00      	cmp	r5, #0
 8000988:	d014      	beq.n	80009b4 <__gesf2+0x58>
 800098a:	428b      	cmp	r3, r1
 800098c:	d027      	beq.n	80009de <__gesf2+0x82>
 800098e:	2002      	movs	r0, #2
 8000990:	3b01      	subs	r3, #1
 8000992:	4018      	ands	r0, r3
 8000994:	3801      	subs	r0, #1
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	2e00      	cmp	r6, #0
 800099a:	d0ee      	beq.n	800097a <__gesf2+0x1e>
 800099c:	2002      	movs	r0, #2
 800099e:	4240      	negs	r0, r0
 80009a0:	e7f9      	b.n	8000996 <__gesf2+0x3a>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d1fa      	bne.n	800099c <__gesf2+0x40>
 80009a6:	2aff      	cmp	r2, #255	; 0xff
 80009a8:	d00e      	beq.n	80009c8 <__gesf2+0x6c>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d10e      	bne.n	80009cc <__gesf2+0x70>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d0ed      	beq.n	800098e <__gesf2+0x32>
 80009b2:	e00b      	b.n	80009cc <__gesf2+0x70>
 80009b4:	2301      	movs	r3, #1
 80009b6:	3901      	subs	r1, #1
 80009b8:	4399      	bics	r1, r3
 80009ba:	0008      	movs	r0, r1
 80009bc:	3001      	adds	r0, #1
 80009be:	e7ea      	b.n	8000996 <__gesf2+0x3a>
 80009c0:	2000      	movs	r0, #0
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d0e7      	beq.n	8000996 <__gesf2+0x3a>
 80009c6:	e7e2      	b.n	800098e <__gesf2+0x32>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d1e7      	bne.n	800099c <__gesf2+0x40>
 80009cc:	428b      	cmp	r3, r1
 80009ce:	d1de      	bne.n	800098e <__gesf2+0x32>
 80009d0:	4294      	cmp	r4, r2
 80009d2:	dd05      	ble.n	80009e0 <__gesf2+0x84>
 80009d4:	2102      	movs	r1, #2
 80009d6:	1e58      	subs	r0, r3, #1
 80009d8:	4008      	ands	r0, r1
 80009da:	3801      	subs	r0, #1
 80009dc:	e7db      	b.n	8000996 <__gesf2+0x3a>
 80009de:	2400      	movs	r4, #0
 80009e0:	42a2      	cmp	r2, r4
 80009e2:	dc04      	bgt.n	80009ee <__gesf2+0x92>
 80009e4:	42b5      	cmp	r5, r6
 80009e6:	d8d2      	bhi.n	800098e <__gesf2+0x32>
 80009e8:	2000      	movs	r0, #0
 80009ea:	42b5      	cmp	r5, r6
 80009ec:	d2d3      	bcs.n	8000996 <__gesf2+0x3a>
 80009ee:	1e58      	subs	r0, r3, #1
 80009f0:	2301      	movs	r3, #1
 80009f2:	4398      	bics	r0, r3
 80009f4:	3001      	adds	r0, #1
 80009f6:	e7ce      	b.n	8000996 <__gesf2+0x3a>

080009f8 <__lesf2>:
 80009f8:	b530      	push	{r4, r5, lr}
 80009fa:	0042      	lsls	r2, r0, #1
 80009fc:	0244      	lsls	r4, r0, #9
 80009fe:	024d      	lsls	r5, r1, #9
 8000a00:	0fc3      	lsrs	r3, r0, #31
 8000a02:	0048      	lsls	r0, r1, #1
 8000a04:	0a64      	lsrs	r4, r4, #9
 8000a06:	0e12      	lsrs	r2, r2, #24
 8000a08:	0a6d      	lsrs	r5, r5, #9
 8000a0a:	0e00      	lsrs	r0, r0, #24
 8000a0c:	0fc9      	lsrs	r1, r1, #31
 8000a0e:	2aff      	cmp	r2, #255	; 0xff
 8000a10:	d012      	beq.n	8000a38 <__lesf2+0x40>
 8000a12:	28ff      	cmp	r0, #255	; 0xff
 8000a14:	d00c      	beq.n	8000a30 <__lesf2+0x38>
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d112      	bne.n	8000a40 <__lesf2+0x48>
 8000a1a:	2800      	cmp	r0, #0
 8000a1c:	d119      	bne.n	8000a52 <__lesf2+0x5a>
 8000a1e:	2d00      	cmp	r5, #0
 8000a20:	d117      	bne.n	8000a52 <__lesf2+0x5a>
 8000a22:	2c00      	cmp	r4, #0
 8000a24:	d02b      	beq.n	8000a7e <__lesf2+0x86>
 8000a26:	2002      	movs	r0, #2
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4018      	ands	r0, r3
 8000a2c:	3801      	subs	r0, #1
 8000a2e:	e026      	b.n	8000a7e <__lesf2+0x86>
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d0f0      	beq.n	8000a16 <__lesf2+0x1e>
 8000a34:	2002      	movs	r0, #2
 8000a36:	e022      	b.n	8000a7e <__lesf2+0x86>
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	d1fb      	bne.n	8000a34 <__lesf2+0x3c>
 8000a3c:	28ff      	cmp	r0, #255	; 0xff
 8000a3e:	d01f      	beq.n	8000a80 <__lesf2+0x88>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d11f      	bne.n	8000a84 <__lesf2+0x8c>
 8000a44:	2d00      	cmp	r5, #0
 8000a46:	d11d      	bne.n	8000a84 <__lesf2+0x8c>
 8000a48:	2002      	movs	r0, #2
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	4018      	ands	r0, r3
 8000a4e:	3801      	subs	r0, #1
 8000a50:	e015      	b.n	8000a7e <__lesf2+0x86>
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	d00e      	beq.n	8000a74 <__lesf2+0x7c>
 8000a56:	428b      	cmp	r3, r1
 8000a58:	d1e5      	bne.n	8000a26 <__lesf2+0x2e>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4290      	cmp	r0, r2
 8000a5e:	dc04      	bgt.n	8000a6a <__lesf2+0x72>
 8000a60:	42ac      	cmp	r4, r5
 8000a62:	d8e0      	bhi.n	8000a26 <__lesf2+0x2e>
 8000a64:	2000      	movs	r0, #0
 8000a66:	42ac      	cmp	r4, r5
 8000a68:	d209      	bcs.n	8000a7e <__lesf2+0x86>
 8000a6a:	1e58      	subs	r0, r3, #1
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4398      	bics	r0, r3
 8000a70:	3001      	adds	r0, #1
 8000a72:	e004      	b.n	8000a7e <__lesf2+0x86>
 8000a74:	2301      	movs	r3, #1
 8000a76:	3901      	subs	r1, #1
 8000a78:	4399      	bics	r1, r3
 8000a7a:	0008      	movs	r0, r1
 8000a7c:	3001      	adds	r0, #1
 8000a7e:	bd30      	pop	{r4, r5, pc}
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d1d7      	bne.n	8000a34 <__lesf2+0x3c>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d1ce      	bne.n	8000a26 <__lesf2+0x2e>
 8000a88:	4282      	cmp	r2, r0
 8000a8a:	dde7      	ble.n	8000a5c <__lesf2+0x64>
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	1e58      	subs	r0, r3, #1
 8000a90:	4008      	ands	r0, r1
 8000a92:	3801      	subs	r0, #1
 8000a94:	e7f3      	b.n	8000a7e <__lesf2+0x86>
 8000a96:	46c0      	nop			; (mov r8, r8)

08000a98 <__aeabi_fmul>:
 8000a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9a:	464e      	mov	r6, r9
 8000a9c:	4657      	mov	r7, sl
 8000a9e:	4645      	mov	r5, r8
 8000aa0:	46de      	mov	lr, fp
 8000aa2:	b5e0      	push	{r5, r6, r7, lr}
 8000aa4:	0243      	lsls	r3, r0, #9
 8000aa6:	0a5b      	lsrs	r3, r3, #9
 8000aa8:	0045      	lsls	r5, r0, #1
 8000aaa:	b083      	sub	sp, #12
 8000aac:	1c0f      	adds	r7, r1, #0
 8000aae:	4699      	mov	r9, r3
 8000ab0:	0e2d      	lsrs	r5, r5, #24
 8000ab2:	0fc6      	lsrs	r6, r0, #31
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d057      	beq.n	8000b68 <__aeabi_fmul+0xd0>
 8000ab8:	2dff      	cmp	r5, #255	; 0xff
 8000aba:	d024      	beq.n	8000b06 <__aeabi_fmul+0x6e>
 8000abc:	2080      	movs	r0, #128	; 0x80
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	04c0      	lsls	r0, r0, #19
 8000ac2:	4318      	orrs	r0, r3
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4681      	mov	r9, r0
 8000ac8:	469a      	mov	sl, r3
 8000aca:	469b      	mov	fp, r3
 8000acc:	3d7f      	subs	r5, #127	; 0x7f
 8000ace:	027c      	lsls	r4, r7, #9
 8000ad0:	007a      	lsls	r2, r7, #1
 8000ad2:	0ffb      	lsrs	r3, r7, #31
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	0e12      	lsrs	r2, r2, #24
 8000ad8:	4698      	mov	r8, r3
 8000ada:	d023      	beq.n	8000b24 <__aeabi_fmul+0x8c>
 8000adc:	2aff      	cmp	r2, #255	; 0xff
 8000ade:	d04b      	beq.n	8000b78 <__aeabi_fmul+0xe0>
 8000ae0:	00e3      	lsls	r3, r4, #3
 8000ae2:	2480      	movs	r4, #128	; 0x80
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	04e4      	lsls	r4, r4, #19
 8000ae8:	3a7f      	subs	r2, #127	; 0x7f
 8000aea:	431c      	orrs	r4, r3
 8000aec:	18ad      	adds	r5, r5, r2
 8000aee:	1c6b      	adds	r3, r5, #1
 8000af0:	4647      	mov	r7, r8
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	4653      	mov	r3, sl
 8000af6:	4077      	eors	r7, r6
 8000af8:	003a      	movs	r2, r7
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d848      	bhi.n	8000b90 <__aeabi_fmul+0xf8>
 8000afe:	497d      	ldr	r1, [pc, #500]	; (8000cf4 <__aeabi_fmul+0x25c>)
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	58cb      	ldr	r3, [r1, r3]
 8000b04:	469f      	mov	pc, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fmul+0x74>
 8000b0a:	e085      	b.n	8000c18 <__aeabi_fmul+0x180>
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	469a      	mov	sl, r3
 8000b10:	3b06      	subs	r3, #6
 8000b12:	469b      	mov	fp, r3
 8000b14:	027c      	lsls	r4, r7, #9
 8000b16:	007a      	lsls	r2, r7, #1
 8000b18:	0ffb      	lsrs	r3, r7, #31
 8000b1a:	25ff      	movs	r5, #255	; 0xff
 8000b1c:	0a64      	lsrs	r4, r4, #9
 8000b1e:	0e12      	lsrs	r2, r2, #24
 8000b20:	4698      	mov	r8, r3
 8000b22:	d1db      	bne.n	8000adc <__aeabi_fmul+0x44>
 8000b24:	2c00      	cmp	r4, #0
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fmul+0x92>
 8000b28:	e090      	b.n	8000c4c <__aeabi_fmul+0x1b4>
 8000b2a:	4652      	mov	r2, sl
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	4692      	mov	sl, r2
 8000b32:	2001      	movs	r0, #1
 8000b34:	e7db      	b.n	8000aee <__aeabi_fmul+0x56>
 8000b36:	464c      	mov	r4, r9
 8000b38:	4658      	mov	r0, fp
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	2802      	cmp	r0, #2
 8000b3e:	d024      	beq.n	8000b8a <__aeabi_fmul+0xf2>
 8000b40:	2803      	cmp	r0, #3
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fmul+0xae>
 8000b44:	e0cf      	b.n	8000ce6 <__aeabi_fmul+0x24e>
 8000b46:	2200      	movs	r2, #0
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2801      	cmp	r0, #1
 8000b4c:	d14d      	bne.n	8000bea <__aeabi_fmul+0x152>
 8000b4e:	0258      	lsls	r0, r3, #9
 8000b50:	05d2      	lsls	r2, r2, #23
 8000b52:	0a40      	lsrs	r0, r0, #9
 8000b54:	07ff      	lsls	r7, r7, #31
 8000b56:	4310      	orrs	r0, r2
 8000b58:	4338      	orrs	r0, r7
 8000b5a:	b003      	add	sp, #12
 8000b5c:	bc3c      	pop	{r2, r3, r4, r5}
 8000b5e:	4690      	mov	r8, r2
 8000b60:	4699      	mov	r9, r3
 8000b62:	46a2      	mov	sl, r4
 8000b64:	46ab      	mov	fp, r5
 8000b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d15b      	bne.n	8000c24 <__aeabi_fmul+0x18c>
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	469a      	mov	sl, r3
 8000b70:	3b03      	subs	r3, #3
 8000b72:	2500      	movs	r5, #0
 8000b74:	469b      	mov	fp, r3
 8000b76:	e7aa      	b.n	8000ace <__aeabi_fmul+0x36>
 8000b78:	35ff      	adds	r5, #255	; 0xff
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d160      	bne.n	8000c40 <__aeabi_fmul+0x1a8>
 8000b7e:	4652      	mov	r2, sl
 8000b80:	2302      	movs	r3, #2
 8000b82:	431a      	orrs	r2, r3
 8000b84:	4692      	mov	sl, r2
 8000b86:	2002      	movs	r0, #2
 8000b88:	e7b1      	b.n	8000aee <__aeabi_fmul+0x56>
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e7de      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000b90:	464b      	mov	r3, r9
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	469c      	mov	ip, r3
 8000b96:	464b      	mov	r3, r9
 8000b98:	0426      	lsls	r6, r4, #16
 8000b9a:	0c36      	lsrs	r6, r6, #16
 8000b9c:	0418      	lsls	r0, r3, #16
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	0c22      	lsrs	r2, r4, #16
 8000ba4:	4664      	mov	r4, ip
 8000ba6:	0c00      	lsrs	r0, r0, #16
 8000ba8:	4343      	muls	r3, r0
 8000baa:	434e      	muls	r6, r1
 8000bac:	4350      	muls	r0, r2
 8000bae:	4354      	muls	r4, r2
 8000bb0:	1980      	adds	r0, r0, r6
 8000bb2:	0c1a      	lsrs	r2, r3, #16
 8000bb4:	1812      	adds	r2, r2, r0
 8000bb6:	4296      	cmp	r6, r2
 8000bb8:	d903      	bls.n	8000bc2 <__aeabi_fmul+0x12a>
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	0249      	lsls	r1, r1, #9
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4464      	add	r4, ip
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	0410      	lsls	r0, r2, #16
 8000bc8:	18c0      	adds	r0, r0, r3
 8000bca:	0183      	lsls	r3, r0, #6
 8000bcc:	1e5e      	subs	r6, r3, #1
 8000bce:	41b3      	sbcs	r3, r6
 8000bd0:	0e80      	lsrs	r0, r0, #26
 8000bd2:	4318      	orrs	r0, r3
 8000bd4:	0c13      	lsrs	r3, r2, #16
 8000bd6:	191b      	adds	r3, r3, r4
 8000bd8:	019b      	lsls	r3, r3, #6
 8000bda:	4303      	orrs	r3, r0
 8000bdc:	001c      	movs	r4, r3
 8000bde:	0123      	lsls	r3, r4, #4
 8000be0:	d579      	bpl.n	8000cd6 <__aeabi_fmul+0x23e>
 8000be2:	2301      	movs	r3, #1
 8000be4:	0862      	lsrs	r2, r4, #1
 8000be6:	401c      	ands	r4, r3
 8000be8:	4314      	orrs	r4, r2
 8000bea:	9a01      	ldr	r2, [sp, #4]
 8000bec:	327f      	adds	r2, #127	; 0x7f
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	dd4d      	ble.n	8000c8e <__aeabi_fmul+0x1f6>
 8000bf2:	0763      	lsls	r3, r4, #29
 8000bf4:	d004      	beq.n	8000c00 <__aeabi_fmul+0x168>
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	4023      	ands	r3, r4
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	d000      	beq.n	8000c00 <__aeabi_fmul+0x168>
 8000bfe:	3404      	adds	r4, #4
 8000c00:	0123      	lsls	r3, r4, #4
 8000c02:	d503      	bpl.n	8000c0c <__aeabi_fmul+0x174>
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <__aeabi_fmul+0x260>)
 8000c06:	9a01      	ldr	r2, [sp, #4]
 8000c08:	401c      	ands	r4, r3
 8000c0a:	3280      	adds	r2, #128	; 0x80
 8000c0c:	2afe      	cmp	r2, #254	; 0xfe
 8000c0e:	dcbc      	bgt.n	8000b8a <__aeabi_fmul+0xf2>
 8000c10:	01a3      	lsls	r3, r4, #6
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	e79a      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	3b09      	subs	r3, #9
 8000c1e:	25ff      	movs	r5, #255	; 0xff
 8000c20:	469b      	mov	fp, r3
 8000c22:	e754      	b.n	8000ace <__aeabi_fmul+0x36>
 8000c24:	0018      	movs	r0, r3
 8000c26:	f002 f901 	bl	8002e2c <__clzsi2>
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	1f43      	subs	r3, r0, #5
 8000c2e:	2576      	movs	r5, #118	; 0x76
 8000c30:	409a      	lsls	r2, r3
 8000c32:	2300      	movs	r3, #0
 8000c34:	426d      	negs	r5, r5
 8000c36:	4691      	mov	r9, r2
 8000c38:	1a2d      	subs	r5, r5, r0
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	469b      	mov	fp, r3
 8000c3e:	e746      	b.n	8000ace <__aeabi_fmul+0x36>
 8000c40:	4652      	mov	r2, sl
 8000c42:	2303      	movs	r3, #3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	4692      	mov	sl, r2
 8000c48:	2003      	movs	r0, #3
 8000c4a:	e750      	b.n	8000aee <__aeabi_fmul+0x56>
 8000c4c:	0020      	movs	r0, r4
 8000c4e:	f002 f8ed 	bl	8002e2c <__clzsi2>
 8000c52:	1f43      	subs	r3, r0, #5
 8000c54:	1a2d      	subs	r5, r5, r0
 8000c56:	409c      	lsls	r4, r3
 8000c58:	3d76      	subs	r5, #118	; 0x76
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	e747      	b.n	8000aee <__aeabi_fmul+0x56>
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	2700      	movs	r7, #0
 8000c62:	03db      	lsls	r3, r3, #15
 8000c64:	22ff      	movs	r2, #255	; 0xff
 8000c66:	e772      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000c68:	4642      	mov	r2, r8
 8000c6a:	e766      	b.n	8000b3a <__aeabi_fmul+0xa2>
 8000c6c:	464c      	mov	r4, r9
 8000c6e:	0032      	movs	r2, r6
 8000c70:	4658      	mov	r0, fp
 8000c72:	e762      	b.n	8000b3a <__aeabi_fmul+0xa2>
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	464a      	mov	r2, r9
 8000c78:	03db      	lsls	r3, r3, #15
 8000c7a:	421a      	tst	r2, r3
 8000c7c:	d022      	beq.n	8000cc4 <__aeabi_fmul+0x22c>
 8000c7e:	421c      	tst	r4, r3
 8000c80:	d120      	bne.n	8000cc4 <__aeabi_fmul+0x22c>
 8000c82:	4323      	orrs	r3, r4
 8000c84:	025b      	lsls	r3, r3, #9
 8000c86:	0a5b      	lsrs	r3, r3, #9
 8000c88:	4647      	mov	r7, r8
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	e75f      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	1a9a      	subs	r2, r3, r2
 8000c92:	2a1b      	cmp	r2, #27
 8000c94:	dc21      	bgt.n	8000cda <__aeabi_fmul+0x242>
 8000c96:	0023      	movs	r3, r4
 8000c98:	9901      	ldr	r1, [sp, #4]
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	319e      	adds	r1, #158	; 0x9e
 8000c9e:	408c      	lsls	r4, r1
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	0023      	movs	r3, r4
 8000ca4:	1e5c      	subs	r4, r3, #1
 8000ca6:	41a3      	sbcs	r3, r4
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	075a      	lsls	r2, r3, #29
 8000cac:	d004      	beq.n	8000cb8 <__aeabi_fmul+0x220>
 8000cae:	220f      	movs	r2, #15
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	2a04      	cmp	r2, #4
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fmul+0x220>
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	015a      	lsls	r2, r3, #5
 8000cba:	d411      	bmi.n	8000ce0 <__aeabi_fmul+0x248>
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	0a5b      	lsrs	r3, r3, #9
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e744      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	03db      	lsls	r3, r3, #15
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	025b      	lsls	r3, r3, #9
 8000cce:	0a5b      	lsrs	r3, r3, #9
 8000cd0:	0037      	movs	r7, r6
 8000cd2:	22ff      	movs	r2, #255	; 0xff
 8000cd4:	e73b      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000cd6:	9501      	str	r5, [sp, #4]
 8000cd8:	e787      	b.n	8000bea <__aeabi_fmul+0x152>
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e736      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e733      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	03db      	lsls	r3, r3, #15
 8000cea:	4323      	orrs	r3, r4
 8000cec:	025b      	lsls	r3, r3, #9
 8000cee:	0a5b      	lsrs	r3, r3, #9
 8000cf0:	22ff      	movs	r2, #255	; 0xff
 8000cf2:	e72c      	b.n	8000b4e <__aeabi_fmul+0xb6>
 8000cf4:	08017234 	.word	0x08017234
 8000cf8:	f7ffffff 	.word	0xf7ffffff

08000cfc <__aeabi_fsub>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	4647      	mov	r7, r8
 8000d00:	46ce      	mov	lr, r9
 8000d02:	0044      	lsls	r4, r0, #1
 8000d04:	0fc2      	lsrs	r2, r0, #31
 8000d06:	b580      	push	{r7, lr}
 8000d08:	0247      	lsls	r7, r0, #9
 8000d0a:	0248      	lsls	r0, r1, #9
 8000d0c:	0a40      	lsrs	r0, r0, #9
 8000d0e:	4684      	mov	ip, r0
 8000d10:	4666      	mov	r6, ip
 8000d12:	0048      	lsls	r0, r1, #1
 8000d14:	0a7f      	lsrs	r7, r7, #9
 8000d16:	0e24      	lsrs	r4, r4, #24
 8000d18:	00f6      	lsls	r6, r6, #3
 8000d1a:	0025      	movs	r5, r4
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	00fb      	lsls	r3, r7, #3
 8000d20:	0e00      	lsrs	r0, r0, #24
 8000d22:	0fc9      	lsrs	r1, r1, #31
 8000d24:	46b1      	mov	r9, r6
 8000d26:	28ff      	cmp	r0, #255	; 0xff
 8000d28:	d100      	bne.n	8000d2c <__aeabi_fsub+0x30>
 8000d2a:	e085      	b.n	8000e38 <__aeabi_fsub+0x13c>
 8000d2c:	2601      	movs	r6, #1
 8000d2e:	4071      	eors	r1, r6
 8000d30:	1a26      	subs	r6, r4, r0
 8000d32:	4291      	cmp	r1, r2
 8000d34:	d057      	beq.n	8000de6 <__aeabi_fsub+0xea>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	dd43      	ble.n	8000dc2 <__aeabi_fsub+0xc6>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fsub+0x44>
 8000d3e:	e07f      	b.n	8000e40 <__aeabi_fsub+0x144>
 8000d40:	4649      	mov	r1, r9
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x4c>
 8000d46:	e0aa      	b.n	8000e9e <__aeabi_fsub+0x1a2>
 8000d48:	3e01      	subs	r6, #1
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x54>
 8000d4e:	e0f7      	b.n	8000f40 <__aeabi_fsub+0x244>
 8000d50:	1a5b      	subs	r3, r3, r1
 8000d52:	015a      	lsls	r2, r3, #5
 8000d54:	d400      	bmi.n	8000d58 <__aeabi_fsub+0x5c>
 8000d56:	e08b      	b.n	8000e70 <__aeabi_fsub+0x174>
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	099c      	lsrs	r4, r3, #6
 8000d5c:	0020      	movs	r0, r4
 8000d5e:	f002 f865 	bl	8002e2c <__clzsi2>
 8000d62:	3805      	subs	r0, #5
 8000d64:	4084      	lsls	r4, r0
 8000d66:	4285      	cmp	r5, r0
 8000d68:	dd00      	ble.n	8000d6c <__aeabi_fsub+0x70>
 8000d6a:	e0d3      	b.n	8000f14 <__aeabi_fsub+0x218>
 8000d6c:	1b45      	subs	r5, r0, r5
 8000d6e:	0023      	movs	r3, r4
 8000d70:	2020      	movs	r0, #32
 8000d72:	3501      	adds	r5, #1
 8000d74:	40eb      	lsrs	r3, r5
 8000d76:	1b45      	subs	r5, r0, r5
 8000d78:	40ac      	lsls	r4, r5
 8000d7a:	1e62      	subs	r2, r4, #1
 8000d7c:	4194      	sbcs	r4, r2
 8000d7e:	4323      	orrs	r3, r4
 8000d80:	2407      	movs	r4, #7
 8000d82:	2500      	movs	r5, #0
 8000d84:	401c      	ands	r4, r3
 8000d86:	2201      	movs	r2, #1
 8000d88:	4641      	mov	r1, r8
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d004      	beq.n	8000d9a <__aeabi_fsub+0x9e>
 8000d90:	210f      	movs	r1, #15
 8000d92:	4019      	ands	r1, r3
 8000d94:	2904      	cmp	r1, #4
 8000d96:	d000      	beq.n	8000d9a <__aeabi_fsub+0x9e>
 8000d98:	3304      	adds	r3, #4
 8000d9a:	0159      	lsls	r1, r3, #5
 8000d9c:	d400      	bmi.n	8000da0 <__aeabi_fsub+0xa4>
 8000d9e:	e080      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000da0:	3501      	adds	r5, #1
 8000da2:	b2ec      	uxtb	r4, r5
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d000      	beq.n	8000daa <__aeabi_fsub+0xae>
 8000da8:	e0a3      	b.n	8000ef2 <__aeabi_fsub+0x1f6>
 8000daa:	24ff      	movs	r4, #255	; 0xff
 8000dac:	2300      	movs	r3, #0
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	05e4      	lsls	r4, r4, #23
 8000db2:	0a58      	lsrs	r0, r3, #9
 8000db4:	07d2      	lsls	r2, r2, #31
 8000db6:	4320      	orrs	r0, r4
 8000db8:	4310      	orrs	r0, r2
 8000dba:	bc0c      	pop	{r2, r3}
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d174      	bne.n	8000eb0 <__aeabi_fsub+0x1b4>
 8000dc6:	1c60      	adds	r0, r4, #1
 8000dc8:	b2c0      	uxtb	r0, r0
 8000dca:	2801      	cmp	r0, #1
 8000dcc:	dc00      	bgt.n	8000dd0 <__aeabi_fsub+0xd4>
 8000dce:	e0a7      	b.n	8000f20 <__aeabi_fsub+0x224>
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	1a9c      	subs	r4, r3, r2
 8000dd4:	0162      	lsls	r2, r4, #5
 8000dd6:	d500      	bpl.n	8000dda <__aeabi_fsub+0xde>
 8000dd8:	e0b6      	b.n	8000f48 <__aeabi_fsub+0x24c>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d1be      	bne.n	8000d5c <__aeabi_fsub+0x60>
 8000dde:	2200      	movs	r2, #0
 8000de0:	2400      	movs	r4, #0
 8000de2:	2300      	movs	r3, #0
 8000de4:	e7e3      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_fsub+0xf0>
 8000dea:	e085      	b.n	8000ef8 <__aeabi_fsub+0x1fc>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d046      	beq.n	8000e7e <__aeabi_fsub+0x182>
 8000df0:	2cff      	cmp	r4, #255	; 0xff
 8000df2:	d049      	beq.n	8000e88 <__aeabi_fsub+0x18c>
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	4648      	mov	r0, r9
 8000df8:	04d2      	lsls	r2, r2, #19
 8000dfa:	4310      	orrs	r0, r2
 8000dfc:	4681      	mov	r9, r0
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2e1b      	cmp	r6, #27
 8000e02:	dc09      	bgt.n	8000e18 <__aeabi_fsub+0x11c>
 8000e04:	2020      	movs	r0, #32
 8000e06:	464c      	mov	r4, r9
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	4084      	lsls	r4, r0
 8000e0c:	464a      	mov	r2, r9
 8000e0e:	0020      	movs	r0, r4
 8000e10:	40f2      	lsrs	r2, r6
 8000e12:	1e44      	subs	r4, r0, #1
 8000e14:	41a0      	sbcs	r0, r4
 8000e16:	4302      	orrs	r2, r0
 8000e18:	189b      	adds	r3, r3, r2
 8000e1a:	015a      	lsls	r2, r3, #5
 8000e1c:	d528      	bpl.n	8000e70 <__aeabi_fsub+0x174>
 8000e1e:	3501      	adds	r5, #1
 8000e20:	2dff      	cmp	r5, #255	; 0xff
 8000e22:	d100      	bne.n	8000e26 <__aeabi_fsub+0x12a>
 8000e24:	e0a8      	b.n	8000f78 <__aeabi_fsub+0x27c>
 8000e26:	2201      	movs	r2, #1
 8000e28:	2407      	movs	r4, #7
 8000e2a:	4994      	ldr	r1, [pc, #592]	; (800107c <__aeabi_fsub+0x380>)
 8000e2c:	401a      	ands	r2, r3
 8000e2e:	085b      	lsrs	r3, r3, #1
 8000e30:	400b      	ands	r3, r1
 8000e32:	4313      	orrs	r3, r2
 8000e34:	401c      	ands	r4, r3
 8000e36:	e7a6      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000e38:	2e00      	cmp	r6, #0
 8000e3a:	d000      	beq.n	8000e3e <__aeabi_fsub+0x142>
 8000e3c:	e778      	b.n	8000d30 <__aeabi_fsub+0x34>
 8000e3e:	e775      	b.n	8000d2c <__aeabi_fsub+0x30>
 8000e40:	2cff      	cmp	r4, #255	; 0xff
 8000e42:	d054      	beq.n	8000eee <__aeabi_fsub+0x1f2>
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	4649      	mov	r1, r9
 8000e48:	04d2      	lsls	r2, r2, #19
 8000e4a:	4311      	orrs	r1, r2
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2e1b      	cmp	r6, #27
 8000e52:	dc09      	bgt.n	8000e68 <__aeabi_fsub+0x16c>
 8000e54:	2120      	movs	r1, #32
 8000e56:	4648      	mov	r0, r9
 8000e58:	1b89      	subs	r1, r1, r6
 8000e5a:	4088      	lsls	r0, r1
 8000e5c:	464a      	mov	r2, r9
 8000e5e:	0001      	movs	r1, r0
 8000e60:	40f2      	lsrs	r2, r6
 8000e62:	1e48      	subs	r0, r1, #1
 8000e64:	4181      	sbcs	r1, r0
 8000e66:	430a      	orrs	r2, r1
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	015a      	lsls	r2, r3, #5
 8000e6c:	d500      	bpl.n	8000e70 <__aeabi_fsub+0x174>
 8000e6e:	e773      	b.n	8000d58 <__aeabi_fsub+0x5c>
 8000e70:	2201      	movs	r2, #1
 8000e72:	4641      	mov	r1, r8
 8000e74:	400a      	ands	r2, r1
 8000e76:	0759      	lsls	r1, r3, #29
 8000e78:	d000      	beq.n	8000e7c <__aeabi_fsub+0x180>
 8000e7a:	e789      	b.n	8000d90 <__aeabi_fsub+0x94>
 8000e7c:	e011      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000e7e:	4648      	mov	r0, r9
 8000e80:	2800      	cmp	r0, #0
 8000e82:	d158      	bne.n	8000f36 <__aeabi_fsub+0x23a>
 8000e84:	2cff      	cmp	r4, #255	; 0xff
 8000e86:	d10c      	bne.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000e88:	08db      	lsrs	r3, r3, #3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x194>
 8000e8e:	e78c      	b.n	8000daa <__aeabi_fsub+0xae>
 8000e90:	2080      	movs	r0, #128	; 0x80
 8000e92:	03c0      	lsls	r0, r0, #15
 8000e94:	4303      	orrs	r3, r0
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	0a5b      	lsrs	r3, r3, #9
 8000e9a:	24ff      	movs	r4, #255	; 0xff
 8000e9c:	e787      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000e9e:	2cff      	cmp	r4, #255	; 0xff
 8000ea0:	d025      	beq.n	8000eee <__aeabi_fsub+0x1f2>
 8000ea2:	08db      	lsrs	r3, r3, #3
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d0f0      	beq.n	8000e8a <__aeabi_fsub+0x18e>
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	0a5b      	lsrs	r3, r3, #9
 8000eac:	b2ec      	uxtb	r4, r5
 8000eae:	e77e      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d04d      	beq.n	8000f50 <__aeabi_fsub+0x254>
 8000eb4:	28ff      	cmp	r0, #255	; 0xff
 8000eb6:	d018      	beq.n	8000eea <__aeabi_fsub+0x1ee>
 8000eb8:	2480      	movs	r4, #128	; 0x80
 8000eba:	04e4      	lsls	r4, r4, #19
 8000ebc:	4272      	negs	r2, r6
 8000ebe:	4323      	orrs	r3, r4
 8000ec0:	2a1b      	cmp	r2, #27
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_fsub+0x1ca>
 8000ec4:	e0c4      	b.n	8001050 <__aeabi_fsub+0x354>
 8000ec6:	001c      	movs	r4, r3
 8000ec8:	2520      	movs	r5, #32
 8000eca:	40d4      	lsrs	r4, r2
 8000ecc:	1aaa      	subs	r2, r5, r2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	4193      	sbcs	r3, r2
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	464a      	mov	r2, r9
 8000ed8:	0005      	movs	r5, r0
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	4688      	mov	r8, r1
 8000ede:	e738      	b.n	8000d52 <__aeabi_fsub+0x56>
 8000ee0:	1c72      	adds	r2, r6, #1
 8000ee2:	d0f8      	beq.n	8000ed6 <__aeabi_fsub+0x1da>
 8000ee4:	43f2      	mvns	r2, r6
 8000ee6:	28ff      	cmp	r0, #255	; 0xff
 8000ee8:	d1ea      	bne.n	8000ec0 <__aeabi_fsub+0x1c4>
 8000eea:	000a      	movs	r2, r1
 8000eec:	464b      	mov	r3, r9
 8000eee:	25ff      	movs	r5, #255	; 0xff
 8000ef0:	e7d7      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000ef2:	019b      	lsls	r3, r3, #6
 8000ef4:	0a5b      	lsrs	r3, r3, #9
 8000ef6:	e75a      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d141      	bne.n	8000f80 <__aeabi_fsub+0x284>
 8000efc:	1c65      	adds	r5, r4, #1
 8000efe:	b2e9      	uxtb	r1, r5
 8000f00:	2901      	cmp	r1, #1
 8000f02:	dd45      	ble.n	8000f90 <__aeabi_fsub+0x294>
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d100      	bne.n	8000f0a <__aeabi_fsub+0x20e>
 8000f08:	e74f      	b.n	8000daa <__aeabi_fsub+0xae>
 8000f0a:	2407      	movs	r4, #7
 8000f0c:	444b      	add	r3, r9
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	401c      	ands	r4, r3
 8000f12:	e738      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000f14:	2207      	movs	r2, #7
 8000f16:	4b5a      	ldr	r3, [pc, #360]	; (8001080 <__aeabi_fsub+0x384>)
 8000f18:	1a2d      	subs	r5, r5, r0
 8000f1a:	4023      	ands	r3, r4
 8000f1c:	4014      	ands	r4, r2
 8000f1e:	e732      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000f20:	2c00      	cmp	r4, #0
 8000f22:	d11d      	bne.n	8000f60 <__aeabi_fsub+0x264>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d17a      	bne.n	800101e <__aeabi_fsub+0x322>
 8000f28:	464b      	mov	r3, r9
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x234>
 8000f2e:	e091      	b.n	8001054 <__aeabi_fsub+0x358>
 8000f30:	000a      	movs	r2, r1
 8000f32:	2500      	movs	r5, #0
 8000f34:	e7b5      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f36:	3e01      	subs	r6, #1
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d119      	bne.n	8000f70 <__aeabi_fsub+0x274>
 8000f3c:	444b      	add	r3, r9
 8000f3e:	e76c      	b.n	8000e1a <__aeabi_fsub+0x11e>
 8000f40:	2cff      	cmp	r4, #255	; 0xff
 8000f42:	d184      	bne.n	8000e4e <__aeabi_fsub+0x152>
 8000f44:	25ff      	movs	r5, #255	; 0xff
 8000f46:	e7ac      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f48:	464a      	mov	r2, r9
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	1ad4      	subs	r4, r2, r3
 8000f4e:	e705      	b.n	8000d5c <__aeabi_fsub+0x60>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1c5      	bne.n	8000ee0 <__aeabi_fsub+0x1e4>
 8000f54:	000a      	movs	r2, r1
 8000f56:	28ff      	cmp	r0, #255	; 0xff
 8000f58:	d0c8      	beq.n	8000eec <__aeabi_fsub+0x1f0>
 8000f5a:	0005      	movs	r5, r0
 8000f5c:	464b      	mov	r3, r9
 8000f5e:	e7a0      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d149      	bne.n	8000ff8 <__aeabi_fsub+0x2fc>
 8000f64:	464b      	mov	r3, r9
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d077      	beq.n	800105a <__aeabi_fsub+0x35e>
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	25ff      	movs	r5, #255	; 0xff
 8000f6e:	e798      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8000f70:	2cff      	cmp	r4, #255	; 0xff
 8000f72:	d000      	beq.n	8000f76 <__aeabi_fsub+0x27a>
 8000f74:	e743      	b.n	8000dfe <__aeabi_fsub+0x102>
 8000f76:	e787      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000f78:	000a      	movs	r2, r1
 8000f7a:	24ff      	movs	r4, #255	; 0xff
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e716      	b.n	8000dae <__aeabi_fsub+0xb2>
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d115      	bne.n	8000fb0 <__aeabi_fsub+0x2b4>
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d157      	bne.n	8001038 <__aeabi_fsub+0x33c>
 8000f88:	28ff      	cmp	r0, #255	; 0xff
 8000f8a:	d1e6      	bne.n	8000f5a <__aeabi_fsub+0x25e>
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	e77b      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000f90:	2c00      	cmp	r4, #0
 8000f92:	d120      	bne.n	8000fd6 <__aeabi_fsub+0x2da>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d057      	beq.n	8001048 <__aeabi_fsub+0x34c>
 8000f98:	4649      	mov	r1, r9
 8000f9a:	2900      	cmp	r1, #0
 8000f9c:	d053      	beq.n	8001046 <__aeabi_fsub+0x34a>
 8000f9e:	444b      	add	r3, r9
 8000fa0:	015a      	lsls	r2, r3, #5
 8000fa2:	d568      	bpl.n	8001076 <__aeabi_fsub+0x37a>
 8000fa4:	2407      	movs	r4, #7
 8000fa6:	4a36      	ldr	r2, [pc, #216]	; (8001080 <__aeabi_fsub+0x384>)
 8000fa8:	401c      	ands	r4, r3
 8000faa:	2501      	movs	r5, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	e6ea      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8000fb0:	28ff      	cmp	r0, #255	; 0xff
 8000fb2:	d0eb      	beq.n	8000f8c <__aeabi_fsub+0x290>
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	04d2      	lsls	r2, r2, #19
 8000fb8:	4276      	negs	r6, r6
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	2e1b      	cmp	r6, #27
 8000fbe:	dc53      	bgt.n	8001068 <__aeabi_fsub+0x36c>
 8000fc0:	2520      	movs	r5, #32
 8000fc2:	1bad      	subs	r5, r5, r6
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	40ab      	lsls	r3, r5
 8000fc8:	40f2      	lsrs	r2, r6
 8000fca:	1e5c      	subs	r4, r3, #1
 8000fcc:	41a3      	sbcs	r3, r4
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	444b      	add	r3, r9
 8000fd2:	0005      	movs	r5, r0
 8000fd4:	e721      	b.n	8000e1a <__aeabi_fsub+0x11e>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0d8      	beq.n	8000f8c <__aeabi_fsub+0x290>
 8000fda:	4649      	mov	r1, r9
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	d100      	bne.n	8000fe2 <__aeabi_fsub+0x2e6>
 8000fe0:	e752      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	03c9      	lsls	r1, r1, #15
 8000fe6:	420f      	tst	r7, r1
 8000fe8:	d100      	bne.n	8000fec <__aeabi_fsub+0x2f0>
 8000fea:	e74d      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000fec:	4660      	mov	r0, ip
 8000fee:	4208      	tst	r0, r1
 8000ff0:	d000      	beq.n	8000ff4 <__aeabi_fsub+0x2f8>
 8000ff2:	e749      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	e747      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8000ff8:	4648      	mov	r0, r9
 8000ffa:	25ff      	movs	r5, #255	; 0xff
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_fsub+0x306>
 8001000:	e74f      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	03d2      	lsls	r2, r2, #15
 8001006:	4217      	tst	r7, r2
 8001008:	d004      	beq.n	8001014 <__aeabi_fsub+0x318>
 800100a:	4660      	mov	r0, ip
 800100c:	4210      	tst	r0, r2
 800100e:	d101      	bne.n	8001014 <__aeabi_fsub+0x318>
 8001010:	464b      	mov	r3, r9
 8001012:	4688      	mov	r8, r1
 8001014:	2201      	movs	r2, #1
 8001016:	4641      	mov	r1, r8
 8001018:	25ff      	movs	r5, #255	; 0xff
 800101a:	400a      	ands	r2, r1
 800101c:	e741      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 800101e:	4648      	mov	r0, r9
 8001020:	2800      	cmp	r0, #0
 8001022:	d01f      	beq.n	8001064 <__aeabi_fsub+0x368>
 8001024:	1a1a      	subs	r2, r3, r0
 8001026:	0150      	lsls	r0, r2, #5
 8001028:	d520      	bpl.n	800106c <__aeabi_fsub+0x370>
 800102a:	464a      	mov	r2, r9
 800102c:	2407      	movs	r4, #7
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	401c      	ands	r4, r3
 8001032:	4688      	mov	r8, r1
 8001034:	2500      	movs	r5, #0
 8001036:	e6a6      	b.n	8000d86 <__aeabi_fsub+0x8a>
 8001038:	1c74      	adds	r4, r6, #1
 800103a:	d0c9      	beq.n	8000fd0 <__aeabi_fsub+0x2d4>
 800103c:	43f6      	mvns	r6, r6
 800103e:	28ff      	cmp	r0, #255	; 0xff
 8001040:	d1bc      	bne.n	8000fbc <__aeabi_fsub+0x2c0>
 8001042:	464b      	mov	r3, r9
 8001044:	e720      	b.n	8000e88 <__aeabi_fsub+0x18c>
 8001046:	4699      	mov	r9, r3
 8001048:	464b      	mov	r3, r9
 800104a:	2500      	movs	r5, #0
 800104c:	08db      	lsrs	r3, r3, #3
 800104e:	e72b      	b.n	8000ea8 <__aeabi_fsub+0x1ac>
 8001050:	2301      	movs	r3, #1
 8001052:	e740      	b.n	8000ed6 <__aeabi_fsub+0x1da>
 8001054:	2200      	movs	r2, #0
 8001056:	2300      	movs	r3, #0
 8001058:	e6a9      	b.n	8000dae <__aeabi_fsub+0xb2>
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	2200      	movs	r2, #0
 800105e:	03db      	lsls	r3, r3, #15
 8001060:	24ff      	movs	r4, #255	; 0xff
 8001062:	e6a4      	b.n	8000dae <__aeabi_fsub+0xb2>
 8001064:	2500      	movs	r5, #0
 8001066:	e71c      	b.n	8000ea2 <__aeabi_fsub+0x1a6>
 8001068:	2301      	movs	r3, #1
 800106a:	e7b1      	b.n	8000fd0 <__aeabi_fsub+0x2d4>
 800106c:	2a00      	cmp	r2, #0
 800106e:	d0f1      	beq.n	8001054 <__aeabi_fsub+0x358>
 8001070:	0013      	movs	r3, r2
 8001072:	2500      	movs	r5, #0
 8001074:	e6fc      	b.n	8000e70 <__aeabi_fsub+0x174>
 8001076:	2500      	movs	r5, #0
 8001078:	e6fa      	b.n	8000e70 <__aeabi_fsub+0x174>
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	7dffffff 	.word	0x7dffffff
 8001080:	fbffffff 	.word	0xfbffffff

08001084 <__aeabi_f2iz>:
 8001084:	0241      	lsls	r1, r0, #9
 8001086:	0042      	lsls	r2, r0, #1
 8001088:	0fc3      	lsrs	r3, r0, #31
 800108a:	0a49      	lsrs	r1, r1, #9
 800108c:	0e12      	lsrs	r2, r2, #24
 800108e:	2000      	movs	r0, #0
 8001090:	2a7e      	cmp	r2, #126	; 0x7e
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x2c>
 8001094:	2a9d      	cmp	r2, #157	; 0x9d
 8001096:	d80c      	bhi.n	80010b2 <__aeabi_f2iz+0x2e>
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	0400      	lsls	r0, r0, #16
 800109c:	4301      	orrs	r1, r0
 800109e:	2a95      	cmp	r2, #149	; 0x95
 80010a0:	dc0a      	bgt.n	80010b8 <__aeabi_f2iz+0x34>
 80010a2:	2096      	movs	r0, #150	; 0x96
 80010a4:	1a82      	subs	r2, r0, r2
 80010a6:	40d1      	lsrs	r1, r2
 80010a8:	4248      	negs	r0, r1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_f2iz+0x2c>
 80010ae:	0008      	movs	r0, r1
 80010b0:	4770      	bx	lr
 80010b2:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <__aeabi_f2iz+0x3c>)
 80010b4:	1898      	adds	r0, r3, r2
 80010b6:	e7fb      	b.n	80010b0 <__aeabi_f2iz+0x2c>
 80010b8:	3a96      	subs	r2, #150	; 0x96
 80010ba:	4091      	lsls	r1, r2
 80010bc:	e7f4      	b.n	80010a8 <__aeabi_f2iz+0x24>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	7fffffff 	.word	0x7fffffff

080010c4 <__aeabi_ui2f>:
 80010c4:	b570      	push	{r4, r5, r6, lr}
 80010c6:	1e04      	subs	r4, r0, #0
 80010c8:	d034      	beq.n	8001134 <__aeabi_ui2f+0x70>
 80010ca:	f001 feaf 	bl	8002e2c <__clzsi2>
 80010ce:	229e      	movs	r2, #158	; 0x9e
 80010d0:	1a12      	subs	r2, r2, r0
 80010d2:	2a96      	cmp	r2, #150	; 0x96
 80010d4:	dc07      	bgt.n	80010e6 <__aeabi_ui2f+0x22>
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	2808      	cmp	r0, #8
 80010da:	dd2e      	ble.n	800113a <__aeabi_ui2f+0x76>
 80010dc:	3808      	subs	r0, #8
 80010de:	4084      	lsls	r4, r0
 80010e0:	0260      	lsls	r0, r4, #9
 80010e2:	0a40      	lsrs	r0, r0, #9
 80010e4:	e021      	b.n	800112a <__aeabi_ui2f+0x66>
 80010e6:	2a99      	cmp	r2, #153	; 0x99
 80010e8:	dd09      	ble.n	80010fe <__aeabi_ui2f+0x3a>
 80010ea:	0003      	movs	r3, r0
 80010ec:	0021      	movs	r1, r4
 80010ee:	331b      	adds	r3, #27
 80010f0:	4099      	lsls	r1, r3
 80010f2:	1e4b      	subs	r3, r1, #1
 80010f4:	4199      	sbcs	r1, r3
 80010f6:	2305      	movs	r3, #5
 80010f8:	1a1b      	subs	r3, r3, r0
 80010fa:	40dc      	lsrs	r4, r3
 80010fc:	430c      	orrs	r4, r1
 80010fe:	2805      	cmp	r0, #5
 8001100:	dd01      	ble.n	8001106 <__aeabi_ui2f+0x42>
 8001102:	1f43      	subs	r3, r0, #5
 8001104:	409c      	lsls	r4, r3
 8001106:	0023      	movs	r3, r4
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <__aeabi_ui2f+0x7c>)
 800110a:	400b      	ands	r3, r1
 800110c:	0765      	lsls	r5, r4, #29
 800110e:	d009      	beq.n	8001124 <__aeabi_ui2f+0x60>
 8001110:	250f      	movs	r5, #15
 8001112:	402c      	ands	r4, r5
 8001114:	2c04      	cmp	r4, #4
 8001116:	d005      	beq.n	8001124 <__aeabi_ui2f+0x60>
 8001118:	3304      	adds	r3, #4
 800111a:	015c      	lsls	r4, r3, #5
 800111c:	d502      	bpl.n	8001124 <__aeabi_ui2f+0x60>
 800111e:	229f      	movs	r2, #159	; 0x9f
 8001120:	400b      	ands	r3, r1
 8001122:	1a12      	subs	r2, r2, r0
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	0a58      	lsrs	r0, r3, #9
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	0240      	lsls	r0, r0, #9
 800112c:	05d2      	lsls	r2, r2, #23
 800112e:	0a40      	lsrs	r0, r0, #9
 8001130:	4310      	orrs	r0, r2
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	2200      	movs	r2, #0
 8001136:	2000      	movs	r0, #0
 8001138:	e7f7      	b.n	800112a <__aeabi_ui2f+0x66>
 800113a:	0260      	lsls	r0, r4, #9
 800113c:	0a40      	lsrs	r0, r0, #9
 800113e:	e7f4      	b.n	800112a <__aeabi_ui2f+0x66>
 8001140:	fbffffff 	.word	0xfbffffff

08001144 <__aeabi_dadd>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	464f      	mov	r7, r9
 8001148:	4646      	mov	r6, r8
 800114a:	46d6      	mov	lr, sl
 800114c:	000c      	movs	r4, r1
 800114e:	0309      	lsls	r1, r1, #12
 8001150:	b5c0      	push	{r6, r7, lr}
 8001152:	0a49      	lsrs	r1, r1, #9
 8001154:	0f47      	lsrs	r7, r0, #29
 8001156:	005e      	lsls	r6, r3, #1
 8001158:	4339      	orrs	r1, r7
 800115a:	031f      	lsls	r7, r3, #12
 800115c:	0fdb      	lsrs	r3, r3, #31
 800115e:	469c      	mov	ip, r3
 8001160:	0065      	lsls	r5, r4, #1
 8001162:	0a7b      	lsrs	r3, r7, #9
 8001164:	0f57      	lsrs	r7, r2, #29
 8001166:	431f      	orrs	r7, r3
 8001168:	0d6d      	lsrs	r5, r5, #21
 800116a:	0fe4      	lsrs	r4, r4, #31
 800116c:	0d76      	lsrs	r6, r6, #21
 800116e:	46a1      	mov	r9, r4
 8001170:	00c0      	lsls	r0, r0, #3
 8001172:	46b8      	mov	r8, r7
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	1bab      	subs	r3, r5, r6
 8001178:	4564      	cmp	r4, ip
 800117a:	d07b      	beq.n	8001274 <__aeabi_dadd+0x130>
 800117c:	2b00      	cmp	r3, #0
 800117e:	dd5f      	ble.n	8001240 <__aeabi_dadd+0xfc>
 8001180:	2e00      	cmp	r6, #0
 8001182:	d000      	beq.n	8001186 <__aeabi_dadd+0x42>
 8001184:	e0a4      	b.n	80012d0 <__aeabi_dadd+0x18c>
 8001186:	003e      	movs	r6, r7
 8001188:	4316      	orrs	r6, r2
 800118a:	d100      	bne.n	800118e <__aeabi_dadd+0x4a>
 800118c:	e112      	b.n	80013b4 <__aeabi_dadd+0x270>
 800118e:	1e5e      	subs	r6, r3, #1
 8001190:	2e00      	cmp	r6, #0
 8001192:	d000      	beq.n	8001196 <__aeabi_dadd+0x52>
 8001194:	e19e      	b.n	80014d4 <__aeabi_dadd+0x390>
 8001196:	1a87      	subs	r7, r0, r2
 8001198:	4643      	mov	r3, r8
 800119a:	42b8      	cmp	r0, r7
 800119c:	4180      	sbcs	r0, r0
 800119e:	2501      	movs	r5, #1
 80011a0:	1ac9      	subs	r1, r1, r3
 80011a2:	4240      	negs	r0, r0
 80011a4:	1a09      	subs	r1, r1, r0
 80011a6:	020b      	lsls	r3, r1, #8
 80011a8:	d400      	bmi.n	80011ac <__aeabi_dadd+0x68>
 80011aa:	e131      	b.n	8001410 <__aeabi_dadd+0x2cc>
 80011ac:	0249      	lsls	r1, r1, #9
 80011ae:	0a4e      	lsrs	r6, r1, #9
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dadd+0x72>
 80011b4:	e16e      	b.n	8001494 <__aeabi_dadd+0x350>
 80011b6:	0030      	movs	r0, r6
 80011b8:	f001 fe38 	bl	8002e2c <__clzsi2>
 80011bc:	0003      	movs	r3, r0
 80011be:	3b08      	subs	r3, #8
 80011c0:	2b1f      	cmp	r3, #31
 80011c2:	dd00      	ble.n	80011c6 <__aeabi_dadd+0x82>
 80011c4:	e161      	b.n	800148a <__aeabi_dadd+0x346>
 80011c6:	2220      	movs	r2, #32
 80011c8:	0039      	movs	r1, r7
 80011ca:	1ad2      	subs	r2, r2, r3
 80011cc:	409e      	lsls	r6, r3
 80011ce:	40d1      	lsrs	r1, r2
 80011d0:	409f      	lsls	r7, r3
 80011d2:	430e      	orrs	r6, r1
 80011d4:	429d      	cmp	r5, r3
 80011d6:	dd00      	ble.n	80011da <__aeabi_dadd+0x96>
 80011d8:	e151      	b.n	800147e <__aeabi_dadd+0x33a>
 80011da:	1b5d      	subs	r5, r3, r5
 80011dc:	1c6b      	adds	r3, r5, #1
 80011de:	2b1f      	cmp	r3, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0xa0>
 80011e2:	e17c      	b.n	80014de <__aeabi_dadd+0x39a>
 80011e4:	2120      	movs	r1, #32
 80011e6:	1ac9      	subs	r1, r1, r3
 80011e8:	003d      	movs	r5, r7
 80011ea:	0030      	movs	r0, r6
 80011ec:	408f      	lsls	r7, r1
 80011ee:	4088      	lsls	r0, r1
 80011f0:	40dd      	lsrs	r5, r3
 80011f2:	1e79      	subs	r1, r7, #1
 80011f4:	418f      	sbcs	r7, r1
 80011f6:	0031      	movs	r1, r6
 80011f8:	2207      	movs	r2, #7
 80011fa:	4328      	orrs	r0, r5
 80011fc:	40d9      	lsrs	r1, r3
 80011fe:	2500      	movs	r5, #0
 8001200:	4307      	orrs	r7, r0
 8001202:	403a      	ands	r2, r7
 8001204:	2a00      	cmp	r2, #0
 8001206:	d009      	beq.n	800121c <__aeabi_dadd+0xd8>
 8001208:	230f      	movs	r3, #15
 800120a:	403b      	ands	r3, r7
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <__aeabi_dadd+0xd8>
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	42bb      	cmp	r3, r7
 8001214:	41bf      	sbcs	r7, r7
 8001216:	427f      	negs	r7, r7
 8001218:	19c9      	adds	r1, r1, r7
 800121a:	001f      	movs	r7, r3
 800121c:	020b      	lsls	r3, r1, #8
 800121e:	d400      	bmi.n	8001222 <__aeabi_dadd+0xde>
 8001220:	e226      	b.n	8001670 <__aeabi_dadd+0x52c>
 8001222:	1c6a      	adds	r2, r5, #1
 8001224:	4bc6      	ldr	r3, [pc, #792]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001226:	0555      	lsls	r5, r2, #21
 8001228:	0d6d      	lsrs	r5, r5, #21
 800122a:	429a      	cmp	r2, r3
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0xec>
 800122e:	e106      	b.n	800143e <__aeabi_dadd+0x2fa>
 8001230:	4ac4      	ldr	r2, [pc, #784]	; (8001544 <__aeabi_dadd+0x400>)
 8001232:	08ff      	lsrs	r7, r7, #3
 8001234:	400a      	ands	r2, r1
 8001236:	0753      	lsls	r3, r2, #29
 8001238:	0252      	lsls	r2, r2, #9
 800123a:	433b      	orrs	r3, r7
 800123c:	0b12      	lsrs	r2, r2, #12
 800123e:	e08e      	b.n	800135e <__aeabi_dadd+0x21a>
 8001240:	2b00      	cmp	r3, #0
 8001242:	d000      	beq.n	8001246 <__aeabi_dadd+0x102>
 8001244:	e0b8      	b.n	80013b8 <__aeabi_dadd+0x274>
 8001246:	1c6b      	adds	r3, r5, #1
 8001248:	055b      	lsls	r3, r3, #21
 800124a:	0d5b      	lsrs	r3, r3, #21
 800124c:	2b01      	cmp	r3, #1
 800124e:	dc00      	bgt.n	8001252 <__aeabi_dadd+0x10e>
 8001250:	e130      	b.n	80014b4 <__aeabi_dadd+0x370>
 8001252:	1a87      	subs	r7, r0, r2
 8001254:	4643      	mov	r3, r8
 8001256:	42b8      	cmp	r0, r7
 8001258:	41b6      	sbcs	r6, r6
 800125a:	1acb      	subs	r3, r1, r3
 800125c:	4276      	negs	r6, r6
 800125e:	1b9e      	subs	r6, r3, r6
 8001260:	0233      	lsls	r3, r6, #8
 8001262:	d500      	bpl.n	8001266 <__aeabi_dadd+0x122>
 8001264:	e14c      	b.n	8001500 <__aeabi_dadd+0x3bc>
 8001266:	003b      	movs	r3, r7
 8001268:	4333      	orrs	r3, r6
 800126a:	d1a1      	bne.n	80011b0 <__aeabi_dadd+0x6c>
 800126c:	2200      	movs	r2, #0
 800126e:	2400      	movs	r4, #0
 8001270:	2500      	movs	r5, #0
 8001272:	e070      	b.n	8001356 <__aeabi_dadd+0x212>
 8001274:	2b00      	cmp	r3, #0
 8001276:	dc00      	bgt.n	800127a <__aeabi_dadd+0x136>
 8001278:	e0e5      	b.n	8001446 <__aeabi_dadd+0x302>
 800127a:	2e00      	cmp	r6, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_dadd+0x13c>
 800127e:	e083      	b.n	8001388 <__aeabi_dadd+0x244>
 8001280:	4eaf      	ldr	r6, [pc, #700]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001282:	42b5      	cmp	r5, r6
 8001284:	d060      	beq.n	8001348 <__aeabi_dadd+0x204>
 8001286:	2680      	movs	r6, #128	; 0x80
 8001288:	0436      	lsls	r6, r6, #16
 800128a:	4337      	orrs	r7, r6
 800128c:	46b8      	mov	r8, r7
 800128e:	2b38      	cmp	r3, #56	; 0x38
 8001290:	dc00      	bgt.n	8001294 <__aeabi_dadd+0x150>
 8001292:	e13e      	b.n	8001512 <__aeabi_dadd+0x3ce>
 8001294:	4643      	mov	r3, r8
 8001296:	4313      	orrs	r3, r2
 8001298:	001f      	movs	r7, r3
 800129a:	1e7a      	subs	r2, r7, #1
 800129c:	4197      	sbcs	r7, r2
 800129e:	183f      	adds	r7, r7, r0
 80012a0:	4287      	cmp	r7, r0
 80012a2:	4180      	sbcs	r0, r0
 80012a4:	4240      	negs	r0, r0
 80012a6:	1809      	adds	r1, r1, r0
 80012a8:	020b      	lsls	r3, r1, #8
 80012aa:	d400      	bmi.n	80012ae <__aeabi_dadd+0x16a>
 80012ac:	e0b0      	b.n	8001410 <__aeabi_dadd+0x2cc>
 80012ae:	4ba4      	ldr	r3, [pc, #656]	; (8001540 <__aeabi_dadd+0x3fc>)
 80012b0:	3501      	adds	r5, #1
 80012b2:	429d      	cmp	r5, r3
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x174>
 80012b6:	e0c3      	b.n	8001440 <__aeabi_dadd+0x2fc>
 80012b8:	4aa2      	ldr	r2, [pc, #648]	; (8001544 <__aeabi_dadd+0x400>)
 80012ba:	087b      	lsrs	r3, r7, #1
 80012bc:	400a      	ands	r2, r1
 80012be:	2101      	movs	r1, #1
 80012c0:	400f      	ands	r7, r1
 80012c2:	431f      	orrs	r7, r3
 80012c4:	0851      	lsrs	r1, r2, #1
 80012c6:	07d3      	lsls	r3, r2, #31
 80012c8:	2207      	movs	r2, #7
 80012ca:	431f      	orrs	r7, r3
 80012cc:	403a      	ands	r2, r7
 80012ce:	e799      	b.n	8001204 <__aeabi_dadd+0xc0>
 80012d0:	4e9b      	ldr	r6, [pc, #620]	; (8001540 <__aeabi_dadd+0x3fc>)
 80012d2:	42b5      	cmp	r5, r6
 80012d4:	d038      	beq.n	8001348 <__aeabi_dadd+0x204>
 80012d6:	2680      	movs	r6, #128	; 0x80
 80012d8:	0436      	lsls	r6, r6, #16
 80012da:	4337      	orrs	r7, r6
 80012dc:	46b8      	mov	r8, r7
 80012de:	2b38      	cmp	r3, #56	; 0x38
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_dadd+0x1a0>
 80012e2:	e0dc      	b.n	800149e <__aeabi_dadd+0x35a>
 80012e4:	2b1f      	cmp	r3, #31
 80012e6:	dc00      	bgt.n	80012ea <__aeabi_dadd+0x1a6>
 80012e8:	e130      	b.n	800154c <__aeabi_dadd+0x408>
 80012ea:	001e      	movs	r6, r3
 80012ec:	4647      	mov	r7, r8
 80012ee:	3e20      	subs	r6, #32
 80012f0:	40f7      	lsrs	r7, r6
 80012f2:	46bc      	mov	ip, r7
 80012f4:	2b20      	cmp	r3, #32
 80012f6:	d004      	beq.n	8001302 <__aeabi_dadd+0x1be>
 80012f8:	2640      	movs	r6, #64	; 0x40
 80012fa:	1af3      	subs	r3, r6, r3
 80012fc:	4646      	mov	r6, r8
 80012fe:	409e      	lsls	r6, r3
 8001300:	4332      	orrs	r2, r6
 8001302:	0017      	movs	r7, r2
 8001304:	4663      	mov	r3, ip
 8001306:	1e7a      	subs	r2, r7, #1
 8001308:	4197      	sbcs	r7, r2
 800130a:	431f      	orrs	r7, r3
 800130c:	e0cc      	b.n	80014a8 <__aeabi_dadd+0x364>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d100      	bne.n	8001314 <__aeabi_dadd+0x1d0>
 8001312:	e204      	b.n	800171e <__aeabi_dadd+0x5da>
 8001314:	4643      	mov	r3, r8
 8001316:	4313      	orrs	r3, r2
 8001318:	d100      	bne.n	800131c <__aeabi_dadd+0x1d8>
 800131a:	e159      	b.n	80015d0 <__aeabi_dadd+0x48c>
 800131c:	074b      	lsls	r3, r1, #29
 800131e:	08c0      	lsrs	r0, r0, #3
 8001320:	4318      	orrs	r0, r3
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	08c9      	lsrs	r1, r1, #3
 8001326:	031b      	lsls	r3, r3, #12
 8001328:	4219      	tst	r1, r3
 800132a:	d008      	beq.n	800133e <__aeabi_dadd+0x1fa>
 800132c:	4645      	mov	r5, r8
 800132e:	08ed      	lsrs	r5, r5, #3
 8001330:	421d      	tst	r5, r3
 8001332:	d104      	bne.n	800133e <__aeabi_dadd+0x1fa>
 8001334:	4643      	mov	r3, r8
 8001336:	08d0      	lsrs	r0, r2, #3
 8001338:	0759      	lsls	r1, r3, #29
 800133a:	4308      	orrs	r0, r1
 800133c:	0029      	movs	r1, r5
 800133e:	0f42      	lsrs	r2, r0, #29
 8001340:	00c9      	lsls	r1, r1, #3
 8001342:	4d7f      	ldr	r5, [pc, #508]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001344:	4311      	orrs	r1, r2
 8001346:	00c0      	lsls	r0, r0, #3
 8001348:	074b      	lsls	r3, r1, #29
 800134a:	08ca      	lsrs	r2, r1, #3
 800134c:	497c      	ldr	r1, [pc, #496]	; (8001540 <__aeabi_dadd+0x3fc>)
 800134e:	08c0      	lsrs	r0, r0, #3
 8001350:	4303      	orrs	r3, r0
 8001352:	428d      	cmp	r5, r1
 8001354:	d068      	beq.n	8001428 <__aeabi_dadd+0x2e4>
 8001356:	0312      	lsls	r2, r2, #12
 8001358:	056d      	lsls	r5, r5, #21
 800135a:	0b12      	lsrs	r2, r2, #12
 800135c:	0d6d      	lsrs	r5, r5, #21
 800135e:	2100      	movs	r1, #0
 8001360:	0312      	lsls	r2, r2, #12
 8001362:	0018      	movs	r0, r3
 8001364:	0b13      	lsrs	r3, r2, #12
 8001366:	0d0a      	lsrs	r2, r1, #20
 8001368:	0512      	lsls	r2, r2, #20
 800136a:	431a      	orrs	r2, r3
 800136c:	4b76      	ldr	r3, [pc, #472]	; (8001548 <__aeabi_dadd+0x404>)
 800136e:	052d      	lsls	r5, r5, #20
 8001370:	4013      	ands	r3, r2
 8001372:	432b      	orrs	r3, r5
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	07e4      	lsls	r4, r4, #31
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	4323      	orrs	r3, r4
 800137c:	0019      	movs	r1, r3
 800137e:	bc1c      	pop	{r2, r3, r4}
 8001380:	4690      	mov	r8, r2
 8001382:	4699      	mov	r9, r3
 8001384:	46a2      	mov	sl, r4
 8001386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001388:	003e      	movs	r6, r7
 800138a:	4316      	orrs	r6, r2
 800138c:	d012      	beq.n	80013b4 <__aeabi_dadd+0x270>
 800138e:	1e5e      	subs	r6, r3, #1
 8001390:	2e00      	cmp	r6, #0
 8001392:	d000      	beq.n	8001396 <__aeabi_dadd+0x252>
 8001394:	e100      	b.n	8001598 <__aeabi_dadd+0x454>
 8001396:	1887      	adds	r7, r0, r2
 8001398:	4287      	cmp	r7, r0
 800139a:	4180      	sbcs	r0, r0
 800139c:	4441      	add	r1, r8
 800139e:	4240      	negs	r0, r0
 80013a0:	1809      	adds	r1, r1, r0
 80013a2:	2501      	movs	r5, #1
 80013a4:	020b      	lsls	r3, r1, #8
 80013a6:	d533      	bpl.n	8001410 <__aeabi_dadd+0x2cc>
 80013a8:	2502      	movs	r5, #2
 80013aa:	e785      	b.n	80012b8 <__aeabi_dadd+0x174>
 80013ac:	4664      	mov	r4, ip
 80013ae:	0033      	movs	r3, r6
 80013b0:	4641      	mov	r1, r8
 80013b2:	0010      	movs	r0, r2
 80013b4:	001d      	movs	r5, r3
 80013b6:	e7c7      	b.n	8001348 <__aeabi_dadd+0x204>
 80013b8:	2d00      	cmp	r5, #0
 80013ba:	d000      	beq.n	80013be <__aeabi_dadd+0x27a>
 80013bc:	e0da      	b.n	8001574 <__aeabi_dadd+0x430>
 80013be:	000c      	movs	r4, r1
 80013c0:	4304      	orrs	r4, r0
 80013c2:	d0f3      	beq.n	80013ac <__aeabi_dadd+0x268>
 80013c4:	1c5c      	adds	r4, r3, #1
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x286>
 80013c8:	e19f      	b.n	800170a <__aeabi_dadd+0x5c6>
 80013ca:	4c5d      	ldr	r4, [pc, #372]	; (8001540 <__aeabi_dadd+0x3fc>)
 80013cc:	42a6      	cmp	r6, r4
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x28e>
 80013d0:	e12f      	b.n	8001632 <__aeabi_dadd+0x4ee>
 80013d2:	43db      	mvns	r3, r3
 80013d4:	2b38      	cmp	r3, #56	; 0x38
 80013d6:	dd00      	ble.n	80013da <__aeabi_dadd+0x296>
 80013d8:	e166      	b.n	80016a8 <__aeabi_dadd+0x564>
 80013da:	2b1f      	cmp	r3, #31
 80013dc:	dd00      	ble.n	80013e0 <__aeabi_dadd+0x29c>
 80013de:	e183      	b.n	80016e8 <__aeabi_dadd+0x5a4>
 80013e0:	2420      	movs	r4, #32
 80013e2:	0005      	movs	r5, r0
 80013e4:	1ae4      	subs	r4, r4, r3
 80013e6:	000f      	movs	r7, r1
 80013e8:	40dd      	lsrs	r5, r3
 80013ea:	40d9      	lsrs	r1, r3
 80013ec:	40a0      	lsls	r0, r4
 80013ee:	4643      	mov	r3, r8
 80013f0:	40a7      	lsls	r7, r4
 80013f2:	1a5b      	subs	r3, r3, r1
 80013f4:	1e44      	subs	r4, r0, #1
 80013f6:	41a0      	sbcs	r0, r4
 80013f8:	4698      	mov	r8, r3
 80013fa:	432f      	orrs	r7, r5
 80013fc:	4338      	orrs	r0, r7
 80013fe:	1a17      	subs	r7, r2, r0
 8001400:	42ba      	cmp	r2, r7
 8001402:	4192      	sbcs	r2, r2
 8001404:	4643      	mov	r3, r8
 8001406:	4252      	negs	r2, r2
 8001408:	1a99      	subs	r1, r3, r2
 800140a:	4664      	mov	r4, ip
 800140c:	0035      	movs	r5, r6
 800140e:	e6ca      	b.n	80011a6 <__aeabi_dadd+0x62>
 8001410:	2207      	movs	r2, #7
 8001412:	403a      	ands	r2, r7
 8001414:	2a00      	cmp	r2, #0
 8001416:	d000      	beq.n	800141a <__aeabi_dadd+0x2d6>
 8001418:	e6f6      	b.n	8001208 <__aeabi_dadd+0xc4>
 800141a:	074b      	lsls	r3, r1, #29
 800141c:	08ca      	lsrs	r2, r1, #3
 800141e:	4948      	ldr	r1, [pc, #288]	; (8001540 <__aeabi_dadd+0x3fc>)
 8001420:	08ff      	lsrs	r7, r7, #3
 8001422:	433b      	orrs	r3, r7
 8001424:	428d      	cmp	r5, r1
 8001426:	d196      	bne.n	8001356 <__aeabi_dadd+0x212>
 8001428:	0019      	movs	r1, r3
 800142a:	4311      	orrs	r1, r2
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x2ec>
 800142e:	e19e      	b.n	800176e <__aeabi_dadd+0x62a>
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0309      	lsls	r1, r1, #12
 8001434:	430a      	orrs	r2, r1
 8001436:	0312      	lsls	r2, r2, #12
 8001438:	0b12      	lsrs	r2, r2, #12
 800143a:	4d41      	ldr	r5, [pc, #260]	; (8001540 <__aeabi_dadd+0x3fc>)
 800143c:	e78f      	b.n	800135e <__aeabi_dadd+0x21a>
 800143e:	0015      	movs	r5, r2
 8001440:	2200      	movs	r2, #0
 8001442:	2300      	movs	r3, #0
 8001444:	e78b      	b.n	800135e <__aeabi_dadd+0x21a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d000      	beq.n	800144c <__aeabi_dadd+0x308>
 800144a:	e0c7      	b.n	80015dc <__aeabi_dadd+0x498>
 800144c:	1c6b      	adds	r3, r5, #1
 800144e:	055f      	lsls	r7, r3, #21
 8001450:	0d7f      	lsrs	r7, r7, #21
 8001452:	2f01      	cmp	r7, #1
 8001454:	dc00      	bgt.n	8001458 <__aeabi_dadd+0x314>
 8001456:	e0f1      	b.n	800163c <__aeabi_dadd+0x4f8>
 8001458:	4d39      	ldr	r5, [pc, #228]	; (8001540 <__aeabi_dadd+0x3fc>)
 800145a:	42ab      	cmp	r3, r5
 800145c:	d100      	bne.n	8001460 <__aeabi_dadd+0x31c>
 800145e:	e0b9      	b.n	80015d4 <__aeabi_dadd+0x490>
 8001460:	1885      	adds	r5, r0, r2
 8001462:	000a      	movs	r2, r1
 8001464:	4285      	cmp	r5, r0
 8001466:	4189      	sbcs	r1, r1
 8001468:	4442      	add	r2, r8
 800146a:	4249      	negs	r1, r1
 800146c:	1851      	adds	r1, r2, r1
 800146e:	2207      	movs	r2, #7
 8001470:	07cf      	lsls	r7, r1, #31
 8001472:	086d      	lsrs	r5, r5, #1
 8001474:	432f      	orrs	r7, r5
 8001476:	0849      	lsrs	r1, r1, #1
 8001478:	403a      	ands	r2, r7
 800147a:	001d      	movs	r5, r3
 800147c:	e6c2      	b.n	8001204 <__aeabi_dadd+0xc0>
 800147e:	2207      	movs	r2, #7
 8001480:	4930      	ldr	r1, [pc, #192]	; (8001544 <__aeabi_dadd+0x400>)
 8001482:	1aed      	subs	r5, r5, r3
 8001484:	4031      	ands	r1, r6
 8001486:	403a      	ands	r2, r7
 8001488:	e6bc      	b.n	8001204 <__aeabi_dadd+0xc0>
 800148a:	003e      	movs	r6, r7
 800148c:	3828      	subs	r0, #40	; 0x28
 800148e:	4086      	lsls	r6, r0
 8001490:	2700      	movs	r7, #0
 8001492:	e69f      	b.n	80011d4 <__aeabi_dadd+0x90>
 8001494:	0038      	movs	r0, r7
 8001496:	f001 fcc9 	bl	8002e2c <__clzsi2>
 800149a:	3020      	adds	r0, #32
 800149c:	e68e      	b.n	80011bc <__aeabi_dadd+0x78>
 800149e:	4643      	mov	r3, r8
 80014a0:	4313      	orrs	r3, r2
 80014a2:	001f      	movs	r7, r3
 80014a4:	1e7a      	subs	r2, r7, #1
 80014a6:	4197      	sbcs	r7, r2
 80014a8:	1bc7      	subs	r7, r0, r7
 80014aa:	42b8      	cmp	r0, r7
 80014ac:	4180      	sbcs	r0, r0
 80014ae:	4240      	negs	r0, r0
 80014b0:	1a09      	subs	r1, r1, r0
 80014b2:	e678      	b.n	80011a6 <__aeabi_dadd+0x62>
 80014b4:	000e      	movs	r6, r1
 80014b6:	003b      	movs	r3, r7
 80014b8:	4306      	orrs	r6, r0
 80014ba:	4313      	orrs	r3, r2
 80014bc:	2d00      	cmp	r5, #0
 80014be:	d161      	bne.n	8001584 <__aeabi_dadd+0x440>
 80014c0:	2e00      	cmp	r6, #0
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x382>
 80014c4:	e0f4      	b.n	80016b0 <__aeabi_dadd+0x56c>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d100      	bne.n	80014cc <__aeabi_dadd+0x388>
 80014ca:	e11b      	b.n	8001704 <__aeabi_dadd+0x5c0>
 80014cc:	4664      	mov	r4, ip
 80014ce:	0039      	movs	r1, r7
 80014d0:	0010      	movs	r0, r2
 80014d2:	e739      	b.n	8001348 <__aeabi_dadd+0x204>
 80014d4:	4f1a      	ldr	r7, [pc, #104]	; (8001540 <__aeabi_dadd+0x3fc>)
 80014d6:	42bb      	cmp	r3, r7
 80014d8:	d07a      	beq.n	80015d0 <__aeabi_dadd+0x48c>
 80014da:	0033      	movs	r3, r6
 80014dc:	e6ff      	b.n	80012de <__aeabi_dadd+0x19a>
 80014de:	0030      	movs	r0, r6
 80014e0:	3d1f      	subs	r5, #31
 80014e2:	40e8      	lsrs	r0, r5
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <__aeabi_dadd+0x3ac>
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	409e      	lsls	r6, r3
 80014ee:	4337      	orrs	r7, r6
 80014f0:	1e7b      	subs	r3, r7, #1
 80014f2:	419f      	sbcs	r7, r3
 80014f4:	2207      	movs	r2, #7
 80014f6:	4307      	orrs	r7, r0
 80014f8:	403a      	ands	r2, r7
 80014fa:	2100      	movs	r1, #0
 80014fc:	2500      	movs	r5, #0
 80014fe:	e789      	b.n	8001414 <__aeabi_dadd+0x2d0>
 8001500:	1a17      	subs	r7, r2, r0
 8001502:	4643      	mov	r3, r8
 8001504:	42ba      	cmp	r2, r7
 8001506:	41b6      	sbcs	r6, r6
 8001508:	1a59      	subs	r1, r3, r1
 800150a:	4276      	negs	r6, r6
 800150c:	1b8e      	subs	r6, r1, r6
 800150e:	4664      	mov	r4, ip
 8001510:	e64e      	b.n	80011b0 <__aeabi_dadd+0x6c>
 8001512:	2b1f      	cmp	r3, #31
 8001514:	dd00      	ble.n	8001518 <__aeabi_dadd+0x3d4>
 8001516:	e0ad      	b.n	8001674 <__aeabi_dadd+0x530>
 8001518:	2620      	movs	r6, #32
 800151a:	4647      	mov	r7, r8
 800151c:	1af6      	subs	r6, r6, r3
 800151e:	40b7      	lsls	r7, r6
 8001520:	46b9      	mov	r9, r7
 8001522:	0017      	movs	r7, r2
 8001524:	46b2      	mov	sl, r6
 8001526:	40df      	lsrs	r7, r3
 8001528:	464e      	mov	r6, r9
 800152a:	433e      	orrs	r6, r7
 800152c:	0037      	movs	r7, r6
 800152e:	4656      	mov	r6, sl
 8001530:	40b2      	lsls	r2, r6
 8001532:	1e56      	subs	r6, r2, #1
 8001534:	41b2      	sbcs	r2, r6
 8001536:	4317      	orrs	r7, r2
 8001538:	4642      	mov	r2, r8
 800153a:	40da      	lsrs	r2, r3
 800153c:	1889      	adds	r1, r1, r2
 800153e:	e6ae      	b.n	800129e <__aeabi_dadd+0x15a>
 8001540:	000007ff 	.word	0x000007ff
 8001544:	ff7fffff 	.word	0xff7fffff
 8001548:	800fffff 	.word	0x800fffff
 800154c:	2620      	movs	r6, #32
 800154e:	4647      	mov	r7, r8
 8001550:	1af6      	subs	r6, r6, r3
 8001552:	40b7      	lsls	r7, r6
 8001554:	46b9      	mov	r9, r7
 8001556:	0017      	movs	r7, r2
 8001558:	46b2      	mov	sl, r6
 800155a:	40df      	lsrs	r7, r3
 800155c:	464e      	mov	r6, r9
 800155e:	433e      	orrs	r6, r7
 8001560:	0037      	movs	r7, r6
 8001562:	4656      	mov	r6, sl
 8001564:	40b2      	lsls	r2, r6
 8001566:	1e56      	subs	r6, r2, #1
 8001568:	41b2      	sbcs	r2, r6
 800156a:	4317      	orrs	r7, r2
 800156c:	4642      	mov	r2, r8
 800156e:	40da      	lsrs	r2, r3
 8001570:	1a89      	subs	r1, r1, r2
 8001572:	e799      	b.n	80014a8 <__aeabi_dadd+0x364>
 8001574:	4c7f      	ldr	r4, [pc, #508]	; (8001774 <__aeabi_dadd+0x630>)
 8001576:	42a6      	cmp	r6, r4
 8001578:	d05b      	beq.n	8001632 <__aeabi_dadd+0x4ee>
 800157a:	2480      	movs	r4, #128	; 0x80
 800157c:	0424      	lsls	r4, r4, #16
 800157e:	425b      	negs	r3, r3
 8001580:	4321      	orrs	r1, r4
 8001582:	e727      	b.n	80013d4 <__aeabi_dadd+0x290>
 8001584:	2e00      	cmp	r6, #0
 8001586:	d10c      	bne.n	80015a2 <__aeabi_dadd+0x45e>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <__aeabi_dadd+0x44a>
 800158c:	e0cb      	b.n	8001726 <__aeabi_dadd+0x5e2>
 800158e:	4664      	mov	r4, ip
 8001590:	0039      	movs	r1, r7
 8001592:	0010      	movs	r0, r2
 8001594:	4d77      	ldr	r5, [pc, #476]	; (8001774 <__aeabi_dadd+0x630>)
 8001596:	e6d7      	b.n	8001348 <__aeabi_dadd+0x204>
 8001598:	4f76      	ldr	r7, [pc, #472]	; (8001774 <__aeabi_dadd+0x630>)
 800159a:	42bb      	cmp	r3, r7
 800159c:	d018      	beq.n	80015d0 <__aeabi_dadd+0x48c>
 800159e:	0033      	movs	r3, r6
 80015a0:	e675      	b.n	800128e <__aeabi_dadd+0x14a>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d014      	beq.n	80015d0 <__aeabi_dadd+0x48c>
 80015a6:	074b      	lsls	r3, r1, #29
 80015a8:	08c0      	lsrs	r0, r0, #3
 80015aa:	4318      	orrs	r0, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	08c9      	lsrs	r1, r1, #3
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	4219      	tst	r1, r3
 80015b4:	d007      	beq.n	80015c6 <__aeabi_dadd+0x482>
 80015b6:	08fc      	lsrs	r4, r7, #3
 80015b8:	421c      	tst	r4, r3
 80015ba:	d104      	bne.n	80015c6 <__aeabi_dadd+0x482>
 80015bc:	0779      	lsls	r1, r7, #29
 80015be:	08d0      	lsrs	r0, r2, #3
 80015c0:	4308      	orrs	r0, r1
 80015c2:	46e1      	mov	r9, ip
 80015c4:	0021      	movs	r1, r4
 80015c6:	464c      	mov	r4, r9
 80015c8:	0f42      	lsrs	r2, r0, #29
 80015ca:	00c9      	lsls	r1, r1, #3
 80015cc:	4311      	orrs	r1, r2
 80015ce:	00c0      	lsls	r0, r0, #3
 80015d0:	4d68      	ldr	r5, [pc, #416]	; (8001774 <__aeabi_dadd+0x630>)
 80015d2:	e6b9      	b.n	8001348 <__aeabi_dadd+0x204>
 80015d4:	001d      	movs	r5, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	2300      	movs	r3, #0
 80015da:	e6c0      	b.n	800135e <__aeabi_dadd+0x21a>
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d15b      	bne.n	8001698 <__aeabi_dadd+0x554>
 80015e0:	000d      	movs	r5, r1
 80015e2:	4305      	orrs	r5, r0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_dadd+0x4a4>
 80015e6:	e6e2      	b.n	80013ae <__aeabi_dadd+0x26a>
 80015e8:	1c5d      	adds	r5, r3, #1
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x4aa>
 80015ec:	e0b0      	b.n	8001750 <__aeabi_dadd+0x60c>
 80015ee:	4d61      	ldr	r5, [pc, #388]	; (8001774 <__aeabi_dadd+0x630>)
 80015f0:	42ae      	cmp	r6, r5
 80015f2:	d01f      	beq.n	8001634 <__aeabi_dadd+0x4f0>
 80015f4:	43db      	mvns	r3, r3
 80015f6:	2b38      	cmp	r3, #56	; 0x38
 80015f8:	dc71      	bgt.n	80016de <__aeabi_dadd+0x59a>
 80015fa:	2b1f      	cmp	r3, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dadd+0x4bc>
 80015fe:	e096      	b.n	800172e <__aeabi_dadd+0x5ea>
 8001600:	2520      	movs	r5, #32
 8001602:	000f      	movs	r7, r1
 8001604:	1aed      	subs	r5, r5, r3
 8001606:	40af      	lsls	r7, r5
 8001608:	46b9      	mov	r9, r7
 800160a:	0007      	movs	r7, r0
 800160c:	46aa      	mov	sl, r5
 800160e:	40df      	lsrs	r7, r3
 8001610:	464d      	mov	r5, r9
 8001612:	433d      	orrs	r5, r7
 8001614:	002f      	movs	r7, r5
 8001616:	4655      	mov	r5, sl
 8001618:	40a8      	lsls	r0, r5
 800161a:	40d9      	lsrs	r1, r3
 800161c:	1e45      	subs	r5, r0, #1
 800161e:	41a8      	sbcs	r0, r5
 8001620:	4488      	add	r8, r1
 8001622:	4307      	orrs	r7, r0
 8001624:	18bf      	adds	r7, r7, r2
 8001626:	4297      	cmp	r7, r2
 8001628:	4192      	sbcs	r2, r2
 800162a:	4251      	negs	r1, r2
 800162c:	4441      	add	r1, r8
 800162e:	0035      	movs	r5, r6
 8001630:	e63a      	b.n	80012a8 <__aeabi_dadd+0x164>
 8001632:	4664      	mov	r4, ip
 8001634:	0035      	movs	r5, r6
 8001636:	4641      	mov	r1, r8
 8001638:	0010      	movs	r0, r2
 800163a:	e685      	b.n	8001348 <__aeabi_dadd+0x204>
 800163c:	000b      	movs	r3, r1
 800163e:	4303      	orrs	r3, r0
 8001640:	2d00      	cmp	r5, #0
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x502>
 8001644:	e663      	b.n	800130e <__aeabi_dadd+0x1ca>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f5      	beq.n	8001636 <__aeabi_dadd+0x4f2>
 800164a:	4643      	mov	r3, r8
 800164c:	4313      	orrs	r3, r2
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x50e>
 8001650:	e67a      	b.n	8001348 <__aeabi_dadd+0x204>
 8001652:	1887      	adds	r7, r0, r2
 8001654:	4287      	cmp	r7, r0
 8001656:	4180      	sbcs	r0, r0
 8001658:	2207      	movs	r2, #7
 800165a:	4441      	add	r1, r8
 800165c:	4240      	negs	r0, r0
 800165e:	1809      	adds	r1, r1, r0
 8001660:	403a      	ands	r2, r7
 8001662:	020b      	lsls	r3, r1, #8
 8001664:	d400      	bmi.n	8001668 <__aeabi_dadd+0x524>
 8001666:	e6d5      	b.n	8001414 <__aeabi_dadd+0x2d0>
 8001668:	4b43      	ldr	r3, [pc, #268]	; (8001778 <__aeabi_dadd+0x634>)
 800166a:	3501      	adds	r5, #1
 800166c:	4019      	ands	r1, r3
 800166e:	e5c9      	b.n	8001204 <__aeabi_dadd+0xc0>
 8001670:	0038      	movs	r0, r7
 8001672:	e669      	b.n	8001348 <__aeabi_dadd+0x204>
 8001674:	001e      	movs	r6, r3
 8001676:	4647      	mov	r7, r8
 8001678:	3e20      	subs	r6, #32
 800167a:	40f7      	lsrs	r7, r6
 800167c:	46bc      	mov	ip, r7
 800167e:	2b20      	cmp	r3, #32
 8001680:	d004      	beq.n	800168c <__aeabi_dadd+0x548>
 8001682:	2640      	movs	r6, #64	; 0x40
 8001684:	1af3      	subs	r3, r6, r3
 8001686:	4646      	mov	r6, r8
 8001688:	409e      	lsls	r6, r3
 800168a:	4332      	orrs	r2, r6
 800168c:	0017      	movs	r7, r2
 800168e:	4663      	mov	r3, ip
 8001690:	1e7a      	subs	r2, r7, #1
 8001692:	4197      	sbcs	r7, r2
 8001694:	431f      	orrs	r7, r3
 8001696:	e602      	b.n	800129e <__aeabi_dadd+0x15a>
 8001698:	4d36      	ldr	r5, [pc, #216]	; (8001774 <__aeabi_dadd+0x630>)
 800169a:	42ae      	cmp	r6, r5
 800169c:	d0ca      	beq.n	8001634 <__aeabi_dadd+0x4f0>
 800169e:	2580      	movs	r5, #128	; 0x80
 80016a0:	042d      	lsls	r5, r5, #16
 80016a2:	425b      	negs	r3, r3
 80016a4:	4329      	orrs	r1, r5
 80016a6:	e7a6      	b.n	80015f6 <__aeabi_dadd+0x4b2>
 80016a8:	4308      	orrs	r0, r1
 80016aa:	1e41      	subs	r1, r0, #1
 80016ac:	4188      	sbcs	r0, r1
 80016ae:	e6a6      	b.n	80013fe <__aeabi_dadd+0x2ba>
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dadd+0x572>
 80016b4:	e648      	b.n	8001348 <__aeabi_dadd+0x204>
 80016b6:	1a87      	subs	r7, r0, r2
 80016b8:	4643      	mov	r3, r8
 80016ba:	42b8      	cmp	r0, r7
 80016bc:	41b6      	sbcs	r6, r6
 80016be:	1acb      	subs	r3, r1, r3
 80016c0:	4276      	negs	r6, r6
 80016c2:	1b9e      	subs	r6, r3, r6
 80016c4:	0233      	lsls	r3, r6, #8
 80016c6:	d54b      	bpl.n	8001760 <__aeabi_dadd+0x61c>
 80016c8:	1a17      	subs	r7, r2, r0
 80016ca:	4643      	mov	r3, r8
 80016cc:	42ba      	cmp	r2, r7
 80016ce:	4192      	sbcs	r2, r2
 80016d0:	1a59      	subs	r1, r3, r1
 80016d2:	4252      	negs	r2, r2
 80016d4:	1a89      	subs	r1, r1, r2
 80016d6:	2207      	movs	r2, #7
 80016d8:	4664      	mov	r4, ip
 80016da:	403a      	ands	r2, r7
 80016dc:	e592      	b.n	8001204 <__aeabi_dadd+0xc0>
 80016de:	4301      	orrs	r1, r0
 80016e0:	000f      	movs	r7, r1
 80016e2:	1e79      	subs	r1, r7, #1
 80016e4:	418f      	sbcs	r7, r1
 80016e6:	e79d      	b.n	8001624 <__aeabi_dadd+0x4e0>
 80016e8:	001c      	movs	r4, r3
 80016ea:	000f      	movs	r7, r1
 80016ec:	3c20      	subs	r4, #32
 80016ee:	40e7      	lsrs	r7, r4
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d003      	beq.n	80016fc <__aeabi_dadd+0x5b8>
 80016f4:	2440      	movs	r4, #64	; 0x40
 80016f6:	1ae3      	subs	r3, r4, r3
 80016f8:	4099      	lsls	r1, r3
 80016fa:	4308      	orrs	r0, r1
 80016fc:	1e41      	subs	r1, r0, #1
 80016fe:	4188      	sbcs	r0, r1
 8001700:	4338      	orrs	r0, r7
 8001702:	e67c      	b.n	80013fe <__aeabi_dadd+0x2ba>
 8001704:	2200      	movs	r2, #0
 8001706:	2400      	movs	r4, #0
 8001708:	e625      	b.n	8001356 <__aeabi_dadd+0x212>
 800170a:	1a17      	subs	r7, r2, r0
 800170c:	4643      	mov	r3, r8
 800170e:	42ba      	cmp	r2, r7
 8001710:	4192      	sbcs	r2, r2
 8001712:	1a59      	subs	r1, r3, r1
 8001714:	4252      	negs	r2, r2
 8001716:	1a89      	subs	r1, r1, r2
 8001718:	4664      	mov	r4, ip
 800171a:	0035      	movs	r5, r6
 800171c:	e543      	b.n	80011a6 <__aeabi_dadd+0x62>
 800171e:	4641      	mov	r1, r8
 8001720:	0010      	movs	r0, r2
 8001722:	4d14      	ldr	r5, [pc, #80]	; (8001774 <__aeabi_dadd+0x630>)
 8001724:	e610      	b.n	8001348 <__aeabi_dadd+0x204>
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	2400      	movs	r4, #0
 800172a:	0312      	lsls	r2, r2, #12
 800172c:	e680      	b.n	8001430 <__aeabi_dadd+0x2ec>
 800172e:	001d      	movs	r5, r3
 8001730:	000f      	movs	r7, r1
 8001732:	3d20      	subs	r5, #32
 8001734:	40ef      	lsrs	r7, r5
 8001736:	46bc      	mov	ip, r7
 8001738:	2b20      	cmp	r3, #32
 800173a:	d003      	beq.n	8001744 <__aeabi_dadd+0x600>
 800173c:	2540      	movs	r5, #64	; 0x40
 800173e:	1aeb      	subs	r3, r5, r3
 8001740:	4099      	lsls	r1, r3
 8001742:	4308      	orrs	r0, r1
 8001744:	0007      	movs	r7, r0
 8001746:	4663      	mov	r3, ip
 8001748:	1e78      	subs	r0, r7, #1
 800174a:	4187      	sbcs	r7, r0
 800174c:	431f      	orrs	r7, r3
 800174e:	e769      	b.n	8001624 <__aeabi_dadd+0x4e0>
 8001750:	1887      	adds	r7, r0, r2
 8001752:	4297      	cmp	r7, r2
 8001754:	419b      	sbcs	r3, r3
 8001756:	4441      	add	r1, r8
 8001758:	425b      	negs	r3, r3
 800175a:	18c9      	adds	r1, r1, r3
 800175c:	0035      	movs	r5, r6
 800175e:	e5a3      	b.n	80012a8 <__aeabi_dadd+0x164>
 8001760:	003b      	movs	r3, r7
 8001762:	4333      	orrs	r3, r6
 8001764:	d0ce      	beq.n	8001704 <__aeabi_dadd+0x5c0>
 8001766:	2207      	movs	r2, #7
 8001768:	0031      	movs	r1, r6
 800176a:	403a      	ands	r2, r7
 800176c:	e652      	b.n	8001414 <__aeabi_dadd+0x2d0>
 800176e:	2300      	movs	r3, #0
 8001770:	001a      	movs	r2, r3
 8001772:	e5f4      	b.n	800135e <__aeabi_dadd+0x21a>
 8001774:	000007ff 	.word	0x000007ff
 8001778:	ff7fffff 	.word	0xff7fffff

0800177c <__aeabi_ddiv>:
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	4657      	mov	r7, sl
 8001780:	46de      	mov	lr, fp
 8001782:	464e      	mov	r6, r9
 8001784:	4645      	mov	r5, r8
 8001786:	b5e0      	push	{r5, r6, r7, lr}
 8001788:	4683      	mov	fp, r0
 800178a:	0007      	movs	r7, r0
 800178c:	030e      	lsls	r6, r1, #12
 800178e:	0048      	lsls	r0, r1, #1
 8001790:	b085      	sub	sp, #20
 8001792:	4692      	mov	sl, r2
 8001794:	001c      	movs	r4, r3
 8001796:	0b36      	lsrs	r6, r6, #12
 8001798:	0d40      	lsrs	r0, r0, #21
 800179a:	0fcd      	lsrs	r5, r1, #31
 800179c:	2800      	cmp	r0, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_ddiv+0x26>
 80017a0:	e09d      	b.n	80018de <__aeabi_ddiv+0x162>
 80017a2:	4b95      	ldr	r3, [pc, #596]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80017a4:	4298      	cmp	r0, r3
 80017a6:	d039      	beq.n	800181c <__aeabi_ddiv+0xa0>
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	00f6      	lsls	r6, r6, #3
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431e      	orrs	r6, r3
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <__aeabi_ddiv+0x280>)
 80017b2:	0f7b      	lsrs	r3, r7, #29
 80017b4:	4333      	orrs	r3, r6
 80017b6:	4699      	mov	r9, r3
 80017b8:	4694      	mov	ip, r2
 80017ba:	0003      	movs	r3, r0
 80017bc:	4463      	add	r3, ip
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2600      	movs	r6, #0
 80017c4:	00ff      	lsls	r7, r7, #3
 80017c6:	9302      	str	r3, [sp, #8]
 80017c8:	0323      	lsls	r3, r4, #12
 80017ca:	0b1b      	lsrs	r3, r3, #12
 80017cc:	4698      	mov	r8, r3
 80017ce:	0063      	lsls	r3, r4, #1
 80017d0:	0fe4      	lsrs	r4, r4, #31
 80017d2:	4652      	mov	r2, sl
 80017d4:	0d5b      	lsrs	r3, r3, #21
 80017d6:	9401      	str	r4, [sp, #4]
 80017d8:	d100      	bne.n	80017dc <__aeabi_ddiv+0x60>
 80017da:	e0b3      	b.n	8001944 <__aeabi_ddiv+0x1c8>
 80017dc:	4986      	ldr	r1, [pc, #536]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80017de:	428b      	cmp	r3, r1
 80017e0:	d100      	bne.n	80017e4 <__aeabi_ddiv+0x68>
 80017e2:	e09e      	b.n	8001922 <__aeabi_ddiv+0x1a6>
 80017e4:	4642      	mov	r2, r8
 80017e6:	00d1      	lsls	r1, r2, #3
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0412      	lsls	r2, r2, #16
 80017ec:	430a      	orrs	r2, r1
 80017ee:	4651      	mov	r1, sl
 80017f0:	0f49      	lsrs	r1, r1, #29
 80017f2:	4311      	orrs	r1, r2
 80017f4:	468b      	mov	fp, r1
 80017f6:	4981      	ldr	r1, [pc, #516]	; (80019fc <__aeabi_ddiv+0x280>)
 80017f8:	4652      	mov	r2, sl
 80017fa:	468c      	mov	ip, r1
 80017fc:	9900      	ldr	r1, [sp, #0]
 80017fe:	4463      	add	r3, ip
 8001800:	1acb      	subs	r3, r1, r3
 8001802:	2100      	movs	r1, #0
 8001804:	00d2      	lsls	r2, r2, #3
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	002b      	movs	r3, r5
 800180a:	4063      	eors	r3, r4
 800180c:	469a      	mov	sl, r3
 800180e:	2e0f      	cmp	r6, #15
 8001810:	d900      	bls.n	8001814 <__aeabi_ddiv+0x98>
 8001812:	e105      	b.n	8001a20 <__aeabi_ddiv+0x2a4>
 8001814:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <__aeabi_ddiv+0x284>)
 8001816:	00b6      	lsls	r6, r6, #2
 8001818:	599b      	ldr	r3, [r3, r6]
 800181a:	469f      	mov	pc, r3
 800181c:	465b      	mov	r3, fp
 800181e:	4333      	orrs	r3, r6
 8001820:	4699      	mov	r9, r3
 8001822:	d000      	beq.n	8001826 <__aeabi_ddiv+0xaa>
 8001824:	e0b8      	b.n	8001998 <__aeabi_ddiv+0x21c>
 8001826:	2302      	movs	r3, #2
 8001828:	2608      	movs	r6, #8
 800182a:	2700      	movs	r7, #0
 800182c:	9000      	str	r0, [sp, #0]
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	e7ca      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 8001832:	46cb      	mov	fp, r9
 8001834:	003a      	movs	r2, r7
 8001836:	9902      	ldr	r1, [sp, #8]
 8001838:	9501      	str	r5, [sp, #4]
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	469a      	mov	sl, r3
 800183e:	2902      	cmp	r1, #2
 8001840:	d027      	beq.n	8001892 <__aeabi_ddiv+0x116>
 8001842:	2903      	cmp	r1, #3
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0xcc>
 8001846:	e280      	b.n	8001d4a <__aeabi_ddiv+0x5ce>
 8001848:	2901      	cmp	r1, #1
 800184a:	d044      	beq.n	80018d6 <__aeabi_ddiv+0x15a>
 800184c:	496d      	ldr	r1, [pc, #436]	; (8001a04 <__aeabi_ddiv+0x288>)
 800184e:	9b00      	ldr	r3, [sp, #0]
 8001850:	468c      	mov	ip, r1
 8001852:	4463      	add	r3, ip
 8001854:	001c      	movs	r4, r3
 8001856:	2c00      	cmp	r4, #0
 8001858:	dd38      	ble.n	80018cc <__aeabi_ddiv+0x150>
 800185a:	0753      	lsls	r3, r2, #29
 800185c:	d000      	beq.n	8001860 <__aeabi_ddiv+0xe4>
 800185e:	e213      	b.n	8001c88 <__aeabi_ddiv+0x50c>
 8001860:	08d2      	lsrs	r2, r2, #3
 8001862:	465b      	mov	r3, fp
 8001864:	01db      	lsls	r3, r3, #7
 8001866:	d509      	bpl.n	800187c <__aeabi_ddiv+0x100>
 8001868:	4659      	mov	r1, fp
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <__aeabi_ddiv+0x28c>)
 800186c:	4019      	ands	r1, r3
 800186e:	468b      	mov	fp, r1
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	00c9      	lsls	r1, r1, #3
 8001874:	468c      	mov	ip, r1
 8001876:	9b00      	ldr	r3, [sp, #0]
 8001878:	4463      	add	r3, ip
 800187a:	001c      	movs	r4, r3
 800187c:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <__aeabi_ddiv+0x290>)
 800187e:	429c      	cmp	r4, r3
 8001880:	dc07      	bgt.n	8001892 <__aeabi_ddiv+0x116>
 8001882:	465b      	mov	r3, fp
 8001884:	0564      	lsls	r4, r4, #21
 8001886:	075f      	lsls	r7, r3, #29
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	4317      	orrs	r7, r2
 800188c:	0b1b      	lsrs	r3, r3, #12
 800188e:	0d62      	lsrs	r2, r4, #21
 8001890:	e002      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001892:	2300      	movs	r3, #0
 8001894:	2700      	movs	r7, #0
 8001896:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <__aeabi_ddiv+0x27c>)
 8001898:	2100      	movs	r1, #0
 800189a:	031b      	lsls	r3, r3, #12
 800189c:	0b1c      	lsrs	r4, r3, #12
 800189e:	0d0b      	lsrs	r3, r1, #20
 80018a0:	051b      	lsls	r3, r3, #20
 80018a2:	4323      	orrs	r3, r4
 80018a4:	0514      	lsls	r4, r2, #20
 80018a6:	4a5a      	ldr	r2, [pc, #360]	; (8001a10 <__aeabi_ddiv+0x294>)
 80018a8:	0038      	movs	r0, r7
 80018aa:	4013      	ands	r3, r2
 80018ac:	431c      	orrs	r4, r3
 80018ae:	4653      	mov	r3, sl
 80018b0:	0064      	lsls	r4, r4, #1
 80018b2:	07db      	lsls	r3, r3, #31
 80018b4:	0864      	lsrs	r4, r4, #1
 80018b6:	431c      	orrs	r4, r3
 80018b8:	0021      	movs	r1, r4
 80018ba:	b005      	add	sp, #20
 80018bc:	bc3c      	pop	{r2, r3, r4, r5}
 80018be:	4690      	mov	r8, r2
 80018c0:	4699      	mov	r9, r3
 80018c2:	46a2      	mov	sl, r4
 80018c4:	46ab      	mov	fp, r5
 80018c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c8:	2201      	movs	r2, #1
 80018ca:	4252      	negs	r2, r2
 80018cc:	2301      	movs	r3, #1
 80018ce:	1b1b      	subs	r3, r3, r4
 80018d0:	2b38      	cmp	r3, #56	; 0x38
 80018d2:	dc00      	bgt.n	80018d6 <__aeabi_ddiv+0x15a>
 80018d4:	e1ad      	b.n	8001c32 <__aeabi_ddiv+0x4b6>
 80018d6:	2200      	movs	r2, #0
 80018d8:	2300      	movs	r3, #0
 80018da:	2700      	movs	r7, #0
 80018dc:	e7dc      	b.n	8001898 <__aeabi_ddiv+0x11c>
 80018de:	465b      	mov	r3, fp
 80018e0:	4333      	orrs	r3, r6
 80018e2:	4699      	mov	r9, r3
 80018e4:	d05e      	beq.n	80019a4 <__aeabi_ddiv+0x228>
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	d100      	bne.n	80018ec <__aeabi_ddiv+0x170>
 80018ea:	e18a      	b.n	8001c02 <__aeabi_ddiv+0x486>
 80018ec:	0030      	movs	r0, r6
 80018ee:	f001 fa9d 	bl	8002e2c <__clzsi2>
 80018f2:	0003      	movs	r3, r0
 80018f4:	3b0b      	subs	r3, #11
 80018f6:	2b1c      	cmp	r3, #28
 80018f8:	dd00      	ble.n	80018fc <__aeabi_ddiv+0x180>
 80018fa:	e17b      	b.n	8001bf4 <__aeabi_ddiv+0x478>
 80018fc:	221d      	movs	r2, #29
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	465a      	mov	r2, fp
 8001902:	0001      	movs	r1, r0
 8001904:	40da      	lsrs	r2, r3
 8001906:	3908      	subs	r1, #8
 8001908:	408e      	lsls	r6, r1
 800190a:	0013      	movs	r3, r2
 800190c:	465f      	mov	r7, fp
 800190e:	4333      	orrs	r3, r6
 8001910:	4699      	mov	r9, r3
 8001912:	408f      	lsls	r7, r1
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <__aeabi_ddiv+0x298>)
 8001916:	2600      	movs	r6, #0
 8001918:	1a1b      	subs	r3, r3, r0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	e752      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 8001922:	4641      	mov	r1, r8
 8001924:	4653      	mov	r3, sl
 8001926:	430b      	orrs	r3, r1
 8001928:	493b      	ldr	r1, [pc, #236]	; (8001a18 <__aeabi_ddiv+0x29c>)
 800192a:	469b      	mov	fp, r3
 800192c:	468c      	mov	ip, r1
 800192e:	9b00      	ldr	r3, [sp, #0]
 8001930:	4463      	add	r3, ip
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	465b      	mov	r3, fp
 8001936:	2b00      	cmp	r3, #0
 8001938:	d13b      	bne.n	80019b2 <__aeabi_ddiv+0x236>
 800193a:	2302      	movs	r3, #2
 800193c:	2200      	movs	r2, #0
 800193e:	431e      	orrs	r6, r3
 8001940:	2102      	movs	r1, #2
 8001942:	e761      	b.n	8001808 <__aeabi_ddiv+0x8c>
 8001944:	4643      	mov	r3, r8
 8001946:	4313      	orrs	r3, r2
 8001948:	469b      	mov	fp, r3
 800194a:	d037      	beq.n	80019bc <__aeabi_ddiv+0x240>
 800194c:	4643      	mov	r3, r8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <__aeabi_ddiv+0x1d8>
 8001952:	e162      	b.n	8001c1a <__aeabi_ddiv+0x49e>
 8001954:	4640      	mov	r0, r8
 8001956:	f001 fa69 	bl	8002e2c <__clzsi2>
 800195a:	0003      	movs	r3, r0
 800195c:	3b0b      	subs	r3, #11
 800195e:	2b1c      	cmp	r3, #28
 8001960:	dd00      	ble.n	8001964 <__aeabi_ddiv+0x1e8>
 8001962:	e153      	b.n	8001c0c <__aeabi_ddiv+0x490>
 8001964:	0002      	movs	r2, r0
 8001966:	4641      	mov	r1, r8
 8001968:	3a08      	subs	r2, #8
 800196a:	4091      	lsls	r1, r2
 800196c:	4688      	mov	r8, r1
 800196e:	211d      	movs	r1, #29
 8001970:	1acb      	subs	r3, r1, r3
 8001972:	4651      	mov	r1, sl
 8001974:	40d9      	lsrs	r1, r3
 8001976:	000b      	movs	r3, r1
 8001978:	4641      	mov	r1, r8
 800197a:	430b      	orrs	r3, r1
 800197c:	469b      	mov	fp, r3
 800197e:	4653      	mov	r3, sl
 8001980:	4093      	lsls	r3, r2
 8001982:	001a      	movs	r2, r3
 8001984:	9b00      	ldr	r3, [sp, #0]
 8001986:	4925      	ldr	r1, [pc, #148]	; (8001a1c <__aeabi_ddiv+0x2a0>)
 8001988:	469c      	mov	ip, r3
 800198a:	4460      	add	r0, ip
 800198c:	0003      	movs	r3, r0
 800198e:	468c      	mov	ip, r1
 8001990:	4463      	add	r3, ip
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2100      	movs	r1, #0
 8001996:	e737      	b.n	8001808 <__aeabi_ddiv+0x8c>
 8001998:	2303      	movs	r3, #3
 800199a:	46b1      	mov	r9, r6
 800199c:	9000      	str	r0, [sp, #0]
 800199e:	260c      	movs	r6, #12
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	e711      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	2604      	movs	r6, #4
 80019ac:	2700      	movs	r7, #0
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	e70a      	b.n	80017c8 <__aeabi_ddiv+0x4c>
 80019b2:	2303      	movs	r3, #3
 80019b4:	46c3      	mov	fp, r8
 80019b6:	431e      	orrs	r6, r3
 80019b8:	2103      	movs	r1, #3
 80019ba:	e725      	b.n	8001808 <__aeabi_ddiv+0x8c>
 80019bc:	3301      	adds	r3, #1
 80019be:	431e      	orrs	r6, r3
 80019c0:	2200      	movs	r2, #0
 80019c2:	2101      	movs	r1, #1
 80019c4:	e720      	b.n	8001808 <__aeabi_ddiv+0x8c>
 80019c6:	2300      	movs	r3, #0
 80019c8:	469a      	mov	sl, r3
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	2700      	movs	r7, #0
 80019ce:	031b      	lsls	r3, r3, #12
 80019d0:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80019d2:	e761      	b.n	8001898 <__aeabi_ddiv+0x11c>
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	4649      	mov	r1, r9
 80019d8:	031b      	lsls	r3, r3, #12
 80019da:	4219      	tst	r1, r3
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x264>
 80019de:	e0e2      	b.n	8001ba6 <__aeabi_ddiv+0x42a>
 80019e0:	4659      	mov	r1, fp
 80019e2:	4219      	tst	r1, r3
 80019e4:	d000      	beq.n	80019e8 <__aeabi_ddiv+0x26c>
 80019e6:	e0de      	b.n	8001ba6 <__aeabi_ddiv+0x42a>
 80019e8:	430b      	orrs	r3, r1
 80019ea:	031b      	lsls	r3, r3, #12
 80019ec:	0017      	movs	r7, r2
 80019ee:	0b1b      	lsrs	r3, r3, #12
 80019f0:	46a2      	mov	sl, r4
 80019f2:	4a01      	ldr	r2, [pc, #4]	; (80019f8 <__aeabi_ddiv+0x27c>)
 80019f4:	e750      	b.n	8001898 <__aeabi_ddiv+0x11c>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	000007ff 	.word	0x000007ff
 80019fc:	fffffc01 	.word	0xfffffc01
 8001a00:	08017274 	.word	0x08017274
 8001a04:	000003ff 	.word	0x000003ff
 8001a08:	feffffff 	.word	0xfeffffff
 8001a0c:	000007fe 	.word	0x000007fe
 8001a10:	800fffff 	.word	0x800fffff
 8001a14:	fffffc0d 	.word	0xfffffc0d
 8001a18:	fffff801 	.word	0xfffff801
 8001a1c:	000003f3 	.word	0x000003f3
 8001a20:	45d9      	cmp	r9, fp
 8001a22:	d900      	bls.n	8001a26 <__aeabi_ddiv+0x2aa>
 8001a24:	e0cb      	b.n	8001bbe <__aeabi_ddiv+0x442>
 8001a26:	d100      	bne.n	8001a2a <__aeabi_ddiv+0x2ae>
 8001a28:	e0c6      	b.n	8001bb8 <__aeabi_ddiv+0x43c>
 8001a2a:	003c      	movs	r4, r7
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	2700      	movs	r7, #0
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	465b      	mov	r3, fp
 8001a38:	0e16      	lsrs	r6, r2, #24
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	431e      	orrs	r6, r3
 8001a3e:	0213      	lsls	r3, r2, #8
 8001a40:	4698      	mov	r8, r3
 8001a42:	0433      	lsls	r3, r6, #16
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	4699      	mov	r9, r3
 8001a48:	0c31      	lsrs	r1, r6, #16
 8001a4a:	9101      	str	r1, [sp, #4]
 8001a4c:	f7fe fbfc 	bl	8000248 <__aeabi_uidivmod>
 8001a50:	464a      	mov	r2, r9
 8001a52:	4342      	muls	r2, r0
 8001a54:	040b      	lsls	r3, r1, #16
 8001a56:	0c21      	lsrs	r1, r4, #16
 8001a58:	0005      	movs	r5, r0
 8001a5a:	4319      	orrs	r1, r3
 8001a5c:	428a      	cmp	r2, r1
 8001a5e:	d907      	bls.n	8001a70 <__aeabi_ddiv+0x2f4>
 8001a60:	1989      	adds	r1, r1, r6
 8001a62:	3d01      	subs	r5, #1
 8001a64:	428e      	cmp	r6, r1
 8001a66:	d803      	bhi.n	8001a70 <__aeabi_ddiv+0x2f4>
 8001a68:	428a      	cmp	r2, r1
 8001a6a:	d901      	bls.n	8001a70 <__aeabi_ddiv+0x2f4>
 8001a6c:	1e85      	subs	r5, r0, #2
 8001a6e:	1989      	adds	r1, r1, r6
 8001a70:	1a88      	subs	r0, r1, r2
 8001a72:	9901      	ldr	r1, [sp, #4]
 8001a74:	f7fe fbe8 	bl	8000248 <__aeabi_uidivmod>
 8001a78:	0409      	lsls	r1, r1, #16
 8001a7a:	468c      	mov	ip, r1
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	0421      	lsls	r1, r4, #16
 8001a80:	4664      	mov	r4, ip
 8001a82:	4342      	muls	r2, r0
 8001a84:	0c09      	lsrs	r1, r1, #16
 8001a86:	0003      	movs	r3, r0
 8001a88:	4321      	orrs	r1, r4
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d904      	bls.n	8001a98 <__aeabi_ddiv+0x31c>
 8001a8e:	1989      	adds	r1, r1, r6
 8001a90:	3b01      	subs	r3, #1
 8001a92:	428e      	cmp	r6, r1
 8001a94:	d800      	bhi.n	8001a98 <__aeabi_ddiv+0x31c>
 8001a96:	e0f1      	b.n	8001c7c <__aeabi_ddiv+0x500>
 8001a98:	042d      	lsls	r5, r5, #16
 8001a9a:	431d      	orrs	r5, r3
 8001a9c:	46ab      	mov	fp, r5
 8001a9e:	4643      	mov	r3, r8
 8001aa0:	1a89      	subs	r1, r1, r2
 8001aa2:	4642      	mov	r2, r8
 8001aa4:	0c28      	lsrs	r0, r5, #16
 8001aa6:	0412      	lsls	r2, r2, #16
 8001aa8:	0c1d      	lsrs	r5, r3, #16
 8001aaa:	465b      	mov	r3, fp
 8001aac:	0c14      	lsrs	r4, r2, #16
 8001aae:	0022      	movs	r2, r4
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	435a      	muls	r2, r3
 8001ab6:	9403      	str	r4, [sp, #12]
 8001ab8:	436b      	muls	r3, r5
 8001aba:	4344      	muls	r4, r0
 8001abc:	9502      	str	r5, [sp, #8]
 8001abe:	4368      	muls	r0, r5
 8001ac0:	191b      	adds	r3, r3, r4
 8001ac2:	0c15      	lsrs	r5, r2, #16
 8001ac4:	18eb      	adds	r3, r5, r3
 8001ac6:	429c      	cmp	r4, r3
 8001ac8:	d903      	bls.n	8001ad2 <__aeabi_ddiv+0x356>
 8001aca:	2480      	movs	r4, #128	; 0x80
 8001acc:	0264      	lsls	r4, r4, #9
 8001ace:	46a4      	mov	ip, r4
 8001ad0:	4460      	add	r0, ip
 8001ad2:	0c1c      	lsrs	r4, r3, #16
 8001ad4:	0415      	lsls	r5, r2, #16
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	0c2d      	lsrs	r5, r5, #16
 8001ada:	1820      	adds	r0, r4, r0
 8001adc:	195d      	adds	r5, r3, r5
 8001ade:	4281      	cmp	r1, r0
 8001ae0:	d377      	bcc.n	8001bd2 <__aeabi_ddiv+0x456>
 8001ae2:	d073      	beq.n	8001bcc <__aeabi_ddiv+0x450>
 8001ae4:	1a0c      	subs	r4, r1, r0
 8001ae6:	4aa2      	ldr	r2, [pc, #648]	; (8001d70 <__aeabi_ddiv+0x5f4>)
 8001ae8:	1b7d      	subs	r5, r7, r5
 8001aea:	42af      	cmp	r7, r5
 8001aec:	41bf      	sbcs	r7, r7
 8001aee:	4694      	mov	ip, r2
 8001af0:	9b00      	ldr	r3, [sp, #0]
 8001af2:	427f      	negs	r7, r7
 8001af4:	4463      	add	r3, ip
 8001af6:	1be0      	subs	r0, r4, r7
 8001af8:	001c      	movs	r4, r3
 8001afa:	4286      	cmp	r6, r0
 8001afc:	d100      	bne.n	8001b00 <__aeabi_ddiv+0x384>
 8001afe:	e0db      	b.n	8001cb8 <__aeabi_ddiv+0x53c>
 8001b00:	9901      	ldr	r1, [sp, #4]
 8001b02:	f7fe fba1 	bl	8000248 <__aeabi_uidivmod>
 8001b06:	464a      	mov	r2, r9
 8001b08:	4342      	muls	r2, r0
 8001b0a:	040b      	lsls	r3, r1, #16
 8001b0c:	0c29      	lsrs	r1, r5, #16
 8001b0e:	0007      	movs	r7, r0
 8001b10:	4319      	orrs	r1, r3
 8001b12:	428a      	cmp	r2, r1
 8001b14:	d907      	bls.n	8001b26 <__aeabi_ddiv+0x3aa>
 8001b16:	1989      	adds	r1, r1, r6
 8001b18:	3f01      	subs	r7, #1
 8001b1a:	428e      	cmp	r6, r1
 8001b1c:	d803      	bhi.n	8001b26 <__aeabi_ddiv+0x3aa>
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d901      	bls.n	8001b26 <__aeabi_ddiv+0x3aa>
 8001b22:	1e87      	subs	r7, r0, #2
 8001b24:	1989      	adds	r1, r1, r6
 8001b26:	1a88      	subs	r0, r1, r2
 8001b28:	9901      	ldr	r1, [sp, #4]
 8001b2a:	f7fe fb8d 	bl	8000248 <__aeabi_uidivmod>
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	464a      	mov	r2, r9
 8001b32:	4689      	mov	r9, r1
 8001b34:	0429      	lsls	r1, r5, #16
 8001b36:	464d      	mov	r5, r9
 8001b38:	4342      	muls	r2, r0
 8001b3a:	0c09      	lsrs	r1, r1, #16
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	4329      	orrs	r1, r5
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d907      	bls.n	8001b54 <__aeabi_ddiv+0x3d8>
 8001b44:	1989      	adds	r1, r1, r6
 8001b46:	3b01      	subs	r3, #1
 8001b48:	428e      	cmp	r6, r1
 8001b4a:	d803      	bhi.n	8001b54 <__aeabi_ddiv+0x3d8>
 8001b4c:	428a      	cmp	r2, r1
 8001b4e:	d901      	bls.n	8001b54 <__aeabi_ddiv+0x3d8>
 8001b50:	1e83      	subs	r3, r0, #2
 8001b52:	1989      	adds	r1, r1, r6
 8001b54:	043f      	lsls	r7, r7, #16
 8001b56:	1a89      	subs	r1, r1, r2
 8001b58:	003a      	movs	r2, r7
 8001b5a:	9f03      	ldr	r7, [sp, #12]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	0038      	movs	r0, r7
 8001b60:	0413      	lsls	r3, r2, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	4358      	muls	r0, r3
 8001b66:	4681      	mov	r9, r0
 8001b68:	9802      	ldr	r0, [sp, #8]
 8001b6a:	0c15      	lsrs	r5, r2, #16
 8001b6c:	436f      	muls	r7, r5
 8001b6e:	4343      	muls	r3, r0
 8001b70:	4345      	muls	r5, r0
 8001b72:	4648      	mov	r0, r9
 8001b74:	0c00      	lsrs	r0, r0, #16
 8001b76:	4684      	mov	ip, r0
 8001b78:	19db      	adds	r3, r3, r7
 8001b7a:	4463      	add	r3, ip
 8001b7c:	429f      	cmp	r7, r3
 8001b7e:	d903      	bls.n	8001b88 <__aeabi_ddiv+0x40c>
 8001b80:	2080      	movs	r0, #128	; 0x80
 8001b82:	0240      	lsls	r0, r0, #9
 8001b84:	4684      	mov	ip, r0
 8001b86:	4465      	add	r5, ip
 8001b88:	4648      	mov	r0, r9
 8001b8a:	0c1f      	lsrs	r7, r3, #16
 8001b8c:	0400      	lsls	r0, r0, #16
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	0c00      	lsrs	r0, r0, #16
 8001b92:	197d      	adds	r5, r7, r5
 8001b94:	1818      	adds	r0, r3, r0
 8001b96:	42a9      	cmp	r1, r5
 8001b98:	d200      	bcs.n	8001b9c <__aeabi_ddiv+0x420>
 8001b9a:	e084      	b.n	8001ca6 <__aeabi_ddiv+0x52a>
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_ddiv+0x424>
 8001b9e:	e07f      	b.n	8001ca0 <__aeabi_ddiv+0x524>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	e657      	b.n	8001856 <__aeabi_ddiv+0xda>
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	464a      	mov	r2, r9
 8001baa:	031b      	lsls	r3, r3, #12
 8001bac:	4313      	orrs	r3, r2
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	0b1b      	lsrs	r3, r3, #12
 8001bb2:	46aa      	mov	sl, r5
 8001bb4:	4a6f      	ldr	r2, [pc, #444]	; (8001d74 <__aeabi_ddiv+0x5f8>)
 8001bb6:	e66f      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001bb8:	42ba      	cmp	r2, r7
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x442>
 8001bbc:	e735      	b.n	8001a2a <__aeabi_ddiv+0x2ae>
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	07dc      	lsls	r4, r3, #31
 8001bc2:	0858      	lsrs	r0, r3, #1
 8001bc4:	087b      	lsrs	r3, r7, #1
 8001bc6:	431c      	orrs	r4, r3
 8001bc8:	07ff      	lsls	r7, r7, #31
 8001bca:	e734      	b.n	8001a36 <__aeabi_ddiv+0x2ba>
 8001bcc:	2400      	movs	r4, #0
 8001bce:	42af      	cmp	r7, r5
 8001bd0:	d289      	bcs.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001bd2:	4447      	add	r7, r8
 8001bd4:	4547      	cmp	r7, r8
 8001bd6:	41a4      	sbcs	r4, r4
 8001bd8:	465b      	mov	r3, fp
 8001bda:	4264      	negs	r4, r4
 8001bdc:	19a4      	adds	r4, r4, r6
 8001bde:	1864      	adds	r4, r4, r1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	42a6      	cmp	r6, r4
 8001be4:	d21e      	bcs.n	8001c24 <__aeabi_ddiv+0x4a8>
 8001be6:	42a0      	cmp	r0, r4
 8001be8:	d86d      	bhi.n	8001cc6 <__aeabi_ddiv+0x54a>
 8001bea:	d100      	bne.n	8001bee <__aeabi_ddiv+0x472>
 8001bec:	e0b6      	b.n	8001d5c <__aeabi_ddiv+0x5e0>
 8001bee:	1a24      	subs	r4, r4, r0
 8001bf0:	469b      	mov	fp, r3
 8001bf2:	e778      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	465a      	mov	r2, fp
 8001bf8:	3b28      	subs	r3, #40	; 0x28
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	2700      	movs	r7, #0
 8001bfe:	4691      	mov	r9, r2
 8001c00:	e688      	b.n	8001914 <__aeabi_ddiv+0x198>
 8001c02:	4658      	mov	r0, fp
 8001c04:	f001 f912 	bl	8002e2c <__clzsi2>
 8001c08:	3020      	adds	r0, #32
 8001c0a:	e672      	b.n	80018f2 <__aeabi_ddiv+0x176>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	4652      	mov	r2, sl
 8001c10:	3b28      	subs	r3, #40	; 0x28
 8001c12:	409a      	lsls	r2, r3
 8001c14:	4693      	mov	fp, r2
 8001c16:	2200      	movs	r2, #0
 8001c18:	e6b4      	b.n	8001984 <__aeabi_ddiv+0x208>
 8001c1a:	4650      	mov	r0, sl
 8001c1c:	f001 f906 	bl	8002e2c <__clzsi2>
 8001c20:	3020      	adds	r0, #32
 8001c22:	e69a      	b.n	800195a <__aeabi_ddiv+0x1de>
 8001c24:	42a6      	cmp	r6, r4
 8001c26:	d1e2      	bne.n	8001bee <__aeabi_ddiv+0x472>
 8001c28:	45b8      	cmp	r8, r7
 8001c2a:	d9dc      	bls.n	8001be6 <__aeabi_ddiv+0x46a>
 8001c2c:	1a34      	subs	r4, r6, r0
 8001c2e:	469b      	mov	fp, r3
 8001c30:	e759      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001c32:	2b1f      	cmp	r3, #31
 8001c34:	dc65      	bgt.n	8001d02 <__aeabi_ddiv+0x586>
 8001c36:	4c50      	ldr	r4, [pc, #320]	; (8001d78 <__aeabi_ddiv+0x5fc>)
 8001c38:	9900      	ldr	r1, [sp, #0]
 8001c3a:	46a4      	mov	ip, r4
 8001c3c:	465c      	mov	r4, fp
 8001c3e:	4461      	add	r1, ip
 8001c40:	0008      	movs	r0, r1
 8001c42:	408c      	lsls	r4, r1
 8001c44:	0011      	movs	r1, r2
 8001c46:	4082      	lsls	r2, r0
 8001c48:	40d9      	lsrs	r1, r3
 8001c4a:	1e50      	subs	r0, r2, #1
 8001c4c:	4182      	sbcs	r2, r0
 8001c4e:	430c      	orrs	r4, r1
 8001c50:	4314      	orrs	r4, r2
 8001c52:	465a      	mov	r2, fp
 8001c54:	40da      	lsrs	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	0762      	lsls	r2, r4, #29
 8001c5a:	d009      	beq.n	8001c70 <__aeabi_ddiv+0x4f4>
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	4022      	ands	r2, r4
 8001c60:	2a04      	cmp	r2, #4
 8001c62:	d005      	beq.n	8001c70 <__aeabi_ddiv+0x4f4>
 8001c64:	0022      	movs	r2, r4
 8001c66:	1d14      	adds	r4, r2, #4
 8001c68:	4294      	cmp	r4, r2
 8001c6a:	4189      	sbcs	r1, r1
 8001c6c:	4249      	negs	r1, r1
 8001c6e:	185b      	adds	r3, r3, r1
 8001c70:	021a      	lsls	r2, r3, #8
 8001c72:	d562      	bpl.n	8001d3a <__aeabi_ddiv+0x5be>
 8001c74:	2201      	movs	r2, #1
 8001c76:	2300      	movs	r3, #0
 8001c78:	2700      	movs	r7, #0
 8001c7a:	e60d      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	d800      	bhi.n	8001c82 <__aeabi_ddiv+0x506>
 8001c80:	e70a      	b.n	8001a98 <__aeabi_ddiv+0x31c>
 8001c82:	1e83      	subs	r3, r0, #2
 8001c84:	1989      	adds	r1, r1, r6
 8001c86:	e707      	b.n	8001a98 <__aeabi_ddiv+0x31c>
 8001c88:	230f      	movs	r3, #15
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_ddiv+0x516>
 8001c90:	e5e6      	b.n	8001860 <__aeabi_ddiv+0xe4>
 8001c92:	1d17      	adds	r7, r2, #4
 8001c94:	4297      	cmp	r7, r2
 8001c96:	4192      	sbcs	r2, r2
 8001c98:	4253      	negs	r3, r2
 8001c9a:	449b      	add	fp, r3
 8001c9c:	08fa      	lsrs	r2, r7, #3
 8001c9e:	e5e0      	b.n	8001862 <__aeabi_ddiv+0xe6>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_ddiv+0x52a>
 8001ca4:	e5d7      	b.n	8001856 <__aeabi_ddiv+0xda>
 8001ca6:	1871      	adds	r1, r6, r1
 8001ca8:	1e53      	subs	r3, r2, #1
 8001caa:	42b1      	cmp	r1, r6
 8001cac:	d327      	bcc.n	8001cfe <__aeabi_ddiv+0x582>
 8001cae:	42a9      	cmp	r1, r5
 8001cb0:	d315      	bcc.n	8001cde <__aeabi_ddiv+0x562>
 8001cb2:	d058      	beq.n	8001d66 <__aeabi_ddiv+0x5ea>
 8001cb4:	001a      	movs	r2, r3
 8001cb6:	e773      	b.n	8001ba0 <__aeabi_ddiv+0x424>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	dc00      	bgt.n	8001cbe <__aeabi_ddiv+0x542>
 8001cbc:	e604      	b.n	80018c8 <__aeabi_ddiv+0x14c>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	449b      	add	fp, r3
 8001cc4:	e5cd      	b.n	8001862 <__aeabi_ddiv+0xe6>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	4447      	add	r7, r8
 8001cca:	4547      	cmp	r7, r8
 8001ccc:	4189      	sbcs	r1, r1
 8001cce:	425b      	negs	r3, r3
 8001cd0:	469c      	mov	ip, r3
 8001cd2:	4249      	negs	r1, r1
 8001cd4:	1989      	adds	r1, r1, r6
 8001cd6:	190c      	adds	r4, r1, r4
 8001cd8:	44e3      	add	fp, ip
 8001cda:	1a24      	subs	r4, r4, r0
 8001cdc:	e703      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001cde:	4643      	mov	r3, r8
 8001ce0:	005f      	lsls	r7, r3, #1
 8001ce2:	4547      	cmp	r7, r8
 8001ce4:	419b      	sbcs	r3, r3
 8001ce6:	46b8      	mov	r8, r7
 8001ce8:	425b      	negs	r3, r3
 8001cea:	199e      	adds	r6, r3, r6
 8001cec:	3a02      	subs	r2, #2
 8001cee:	1989      	adds	r1, r1, r6
 8001cf0:	42a9      	cmp	r1, r5
 8001cf2:	d000      	beq.n	8001cf6 <__aeabi_ddiv+0x57a>
 8001cf4:	e754      	b.n	8001ba0 <__aeabi_ddiv+0x424>
 8001cf6:	4540      	cmp	r0, r8
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0x580>
 8001cfa:	e751      	b.n	8001ba0 <__aeabi_ddiv+0x424>
 8001cfc:	e5ab      	b.n	8001856 <__aeabi_ddiv+0xda>
 8001cfe:	001a      	movs	r2, r3
 8001d00:	e7f6      	b.n	8001cf0 <__aeabi_ddiv+0x574>
 8001d02:	211f      	movs	r1, #31
 8001d04:	465f      	mov	r7, fp
 8001d06:	4249      	negs	r1, r1
 8001d08:	1b0c      	subs	r4, r1, r4
 8001d0a:	40e7      	lsrs	r7, r4
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d007      	beq.n	8001d20 <__aeabi_ddiv+0x5a4>
 8001d10:	491a      	ldr	r1, [pc, #104]	; (8001d7c <__aeabi_ddiv+0x600>)
 8001d12:	9b00      	ldr	r3, [sp, #0]
 8001d14:	468c      	mov	ip, r1
 8001d16:	4463      	add	r3, ip
 8001d18:	0018      	movs	r0, r3
 8001d1a:	465b      	mov	r3, fp
 8001d1c:	4083      	lsls	r3, r0
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	1e50      	subs	r0, r2, #1
 8001d22:	4182      	sbcs	r2, r0
 8001d24:	433a      	orrs	r2, r7
 8001d26:	2707      	movs	r7, #7
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4017      	ands	r7, r2
 8001d2c:	d009      	beq.n	8001d42 <__aeabi_ddiv+0x5c6>
 8001d2e:	210f      	movs	r1, #15
 8001d30:	2300      	movs	r3, #0
 8001d32:	4011      	ands	r1, r2
 8001d34:	0014      	movs	r4, r2
 8001d36:	2904      	cmp	r1, #4
 8001d38:	d195      	bne.n	8001c66 <__aeabi_ddiv+0x4ea>
 8001d3a:	0022      	movs	r2, r4
 8001d3c:	075f      	lsls	r7, r3, #29
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	0b1b      	lsrs	r3, r3, #12
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	4317      	orrs	r7, r2
 8001d46:	2200      	movs	r2, #0
 8001d48:	e5a6      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	031b      	lsls	r3, r3, #12
 8001d50:	430b      	orrs	r3, r1
 8001d52:	031b      	lsls	r3, r3, #12
 8001d54:	0017      	movs	r7, r2
 8001d56:	0b1b      	lsrs	r3, r3, #12
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <__aeabi_ddiv+0x5f8>)
 8001d5a:	e59d      	b.n	8001898 <__aeabi_ddiv+0x11c>
 8001d5c:	42bd      	cmp	r5, r7
 8001d5e:	d8b2      	bhi.n	8001cc6 <__aeabi_ddiv+0x54a>
 8001d60:	469b      	mov	fp, r3
 8001d62:	2400      	movs	r4, #0
 8001d64:	e6bf      	b.n	8001ae6 <__aeabi_ddiv+0x36a>
 8001d66:	4580      	cmp	r8, r0
 8001d68:	d3b9      	bcc.n	8001cde <__aeabi_ddiv+0x562>
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	e7c3      	b.n	8001cf6 <__aeabi_ddiv+0x57a>
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	000003ff 	.word	0x000003ff
 8001d74:	000007ff 	.word	0x000007ff
 8001d78:	0000041e 	.word	0x0000041e
 8001d7c:	0000043e 	.word	0x0000043e

08001d80 <__eqdf2>:
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	464f      	mov	r7, r9
 8001d84:	4646      	mov	r6, r8
 8001d86:	46d6      	mov	lr, sl
 8001d88:	4684      	mov	ip, r0
 8001d8a:	b5c0      	push	{r6, r7, lr}
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4e19      	ldr	r6, [pc, #100]	; (8001df4 <__eqdf2+0x74>)
 8001d90:	0318      	lsls	r0, r3, #12
 8001d92:	030f      	lsls	r7, r1, #12
 8001d94:	004d      	lsls	r5, r1, #1
 8001d96:	0b00      	lsrs	r0, r0, #12
 8001d98:	005c      	lsls	r4, r3, #1
 8001d9a:	4682      	mov	sl, r0
 8001d9c:	0b3f      	lsrs	r7, r7, #12
 8001d9e:	0d6d      	lsrs	r5, r5, #21
 8001da0:	0fc9      	lsrs	r1, r1, #31
 8001da2:	4691      	mov	r9, r2
 8001da4:	0d64      	lsrs	r4, r4, #21
 8001da6:	0fdb      	lsrs	r3, r3, #31
 8001da8:	2001      	movs	r0, #1
 8001daa:	42b5      	cmp	r5, r6
 8001dac:	d00a      	beq.n	8001dc4 <__eqdf2+0x44>
 8001dae:	42b4      	cmp	r4, r6
 8001db0:	d003      	beq.n	8001dba <__eqdf2+0x3a>
 8001db2:	42a5      	cmp	r5, r4
 8001db4:	d101      	bne.n	8001dba <__eqdf2+0x3a>
 8001db6:	4557      	cmp	r7, sl
 8001db8:	d00c      	beq.n	8001dd4 <__eqdf2+0x54>
 8001dba:	bc1c      	pop	{r2, r3, r4}
 8001dbc:	4690      	mov	r8, r2
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	46a2      	mov	sl, r4
 8001dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc4:	4666      	mov	r6, ip
 8001dc6:	433e      	orrs	r6, r7
 8001dc8:	d1f7      	bne.n	8001dba <__eqdf2+0x3a>
 8001dca:	42ac      	cmp	r4, r5
 8001dcc:	d1f5      	bne.n	8001dba <__eqdf2+0x3a>
 8001dce:	4654      	mov	r4, sl
 8001dd0:	4314      	orrs	r4, r2
 8001dd2:	d1f2      	bne.n	8001dba <__eqdf2+0x3a>
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	45c8      	cmp	r8, r9
 8001dd8:	d1ef      	bne.n	8001dba <__eqdf2+0x3a>
 8001dda:	4299      	cmp	r1, r3
 8001ddc:	d007      	beq.n	8001dee <__eqdf2+0x6e>
 8001dde:	2d00      	cmp	r5, #0
 8001de0:	d1eb      	bne.n	8001dba <__eqdf2+0x3a>
 8001de2:	4663      	mov	r3, ip
 8001de4:	431f      	orrs	r7, r3
 8001de6:	0038      	movs	r0, r7
 8001de8:	1e47      	subs	r7, r0, #1
 8001dea:	41b8      	sbcs	r0, r7
 8001dec:	e7e5      	b.n	8001dba <__eqdf2+0x3a>
 8001dee:	2000      	movs	r0, #0
 8001df0:	e7e3      	b.n	8001dba <__eqdf2+0x3a>
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	000007ff 	.word	0x000007ff

08001df8 <__gedf2>:
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	464f      	mov	r7, r9
 8001dfc:	4646      	mov	r6, r8
 8001dfe:	46d6      	mov	lr, sl
 8001e00:	004d      	lsls	r5, r1, #1
 8001e02:	b5c0      	push	{r6, r7, lr}
 8001e04:	030e      	lsls	r6, r1, #12
 8001e06:	0fc9      	lsrs	r1, r1, #31
 8001e08:	468a      	mov	sl, r1
 8001e0a:	492c      	ldr	r1, [pc, #176]	; (8001ebc <__gedf2+0xc4>)
 8001e0c:	031f      	lsls	r7, r3, #12
 8001e0e:	005c      	lsls	r4, r3, #1
 8001e10:	4680      	mov	r8, r0
 8001e12:	0b36      	lsrs	r6, r6, #12
 8001e14:	0d6d      	lsrs	r5, r5, #21
 8001e16:	4691      	mov	r9, r2
 8001e18:	0b3f      	lsrs	r7, r7, #12
 8001e1a:	0d64      	lsrs	r4, r4, #21
 8001e1c:	0fdb      	lsrs	r3, r3, #31
 8001e1e:	428d      	cmp	r5, r1
 8001e20:	d01e      	beq.n	8001e60 <__gedf2+0x68>
 8001e22:	428c      	cmp	r4, r1
 8001e24:	d016      	beq.n	8001e54 <__gedf2+0x5c>
 8001e26:	2d00      	cmp	r5, #0
 8001e28:	d11e      	bne.n	8001e68 <__gedf2+0x70>
 8001e2a:	4330      	orrs	r0, r6
 8001e2c:	4684      	mov	ip, r0
 8001e2e:	2c00      	cmp	r4, #0
 8001e30:	d101      	bne.n	8001e36 <__gedf2+0x3e>
 8001e32:	433a      	orrs	r2, r7
 8001e34:	d023      	beq.n	8001e7e <__gedf2+0x86>
 8001e36:	4662      	mov	r2, ip
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d01a      	beq.n	8001e72 <__gedf2+0x7a>
 8001e3c:	459a      	cmp	sl, r3
 8001e3e:	d029      	beq.n	8001e94 <__gedf2+0x9c>
 8001e40:	4651      	mov	r1, sl
 8001e42:	2002      	movs	r0, #2
 8001e44:	3901      	subs	r1, #1
 8001e46:	4008      	ands	r0, r1
 8001e48:	3801      	subs	r0, #1
 8001e4a:	bc1c      	pop	{r2, r3, r4}
 8001e4c:	4690      	mov	r8, r2
 8001e4e:	4699      	mov	r9, r3
 8001e50:	46a2      	mov	sl, r4
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	0039      	movs	r1, r7
 8001e56:	4311      	orrs	r1, r2
 8001e58:	d0e5      	beq.n	8001e26 <__gedf2+0x2e>
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	4240      	negs	r0, r0
 8001e5e:	e7f4      	b.n	8001e4a <__gedf2+0x52>
 8001e60:	4330      	orrs	r0, r6
 8001e62:	d1fa      	bne.n	8001e5a <__gedf2+0x62>
 8001e64:	42ac      	cmp	r4, r5
 8001e66:	d00f      	beq.n	8001e88 <__gedf2+0x90>
 8001e68:	2c00      	cmp	r4, #0
 8001e6a:	d10f      	bne.n	8001e8c <__gedf2+0x94>
 8001e6c:	433a      	orrs	r2, r7
 8001e6e:	d0e7      	beq.n	8001e40 <__gedf2+0x48>
 8001e70:	e00c      	b.n	8001e8c <__gedf2+0x94>
 8001e72:	2201      	movs	r2, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	4393      	bics	r3, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	3001      	adds	r0, #1
 8001e7c:	e7e5      	b.n	8001e4a <__gedf2+0x52>
 8001e7e:	4663      	mov	r3, ip
 8001e80:	2000      	movs	r0, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0e1      	beq.n	8001e4a <__gedf2+0x52>
 8001e86:	e7db      	b.n	8001e40 <__gedf2+0x48>
 8001e88:	433a      	orrs	r2, r7
 8001e8a:	d1e6      	bne.n	8001e5a <__gedf2+0x62>
 8001e8c:	459a      	cmp	sl, r3
 8001e8e:	d1d7      	bne.n	8001e40 <__gedf2+0x48>
 8001e90:	42a5      	cmp	r5, r4
 8001e92:	dcd5      	bgt.n	8001e40 <__gedf2+0x48>
 8001e94:	42a5      	cmp	r5, r4
 8001e96:	db05      	blt.n	8001ea4 <__gedf2+0xac>
 8001e98:	42be      	cmp	r6, r7
 8001e9a:	d8d1      	bhi.n	8001e40 <__gedf2+0x48>
 8001e9c:	d008      	beq.n	8001eb0 <__gedf2+0xb8>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	42be      	cmp	r6, r7
 8001ea2:	d2d2      	bcs.n	8001e4a <__gedf2+0x52>
 8001ea4:	4650      	mov	r0, sl
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	3801      	subs	r0, #1
 8001eaa:	4398      	bics	r0, r3
 8001eac:	3001      	adds	r0, #1
 8001eae:	e7cc      	b.n	8001e4a <__gedf2+0x52>
 8001eb0:	45c8      	cmp	r8, r9
 8001eb2:	d8c5      	bhi.n	8001e40 <__gedf2+0x48>
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	45c8      	cmp	r8, r9
 8001eb8:	d3f4      	bcc.n	8001ea4 <__gedf2+0xac>
 8001eba:	e7c6      	b.n	8001e4a <__gedf2+0x52>
 8001ebc:	000007ff 	.word	0x000007ff

08001ec0 <__ledf2>:
 8001ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec2:	464f      	mov	r7, r9
 8001ec4:	4646      	mov	r6, r8
 8001ec6:	46d6      	mov	lr, sl
 8001ec8:	004d      	lsls	r5, r1, #1
 8001eca:	b5c0      	push	{r6, r7, lr}
 8001ecc:	030e      	lsls	r6, r1, #12
 8001ece:	0fc9      	lsrs	r1, r1, #31
 8001ed0:	468a      	mov	sl, r1
 8001ed2:	492e      	ldr	r1, [pc, #184]	; (8001f8c <__ledf2+0xcc>)
 8001ed4:	031f      	lsls	r7, r3, #12
 8001ed6:	005c      	lsls	r4, r3, #1
 8001ed8:	4680      	mov	r8, r0
 8001eda:	0b36      	lsrs	r6, r6, #12
 8001edc:	0d6d      	lsrs	r5, r5, #21
 8001ede:	4691      	mov	r9, r2
 8001ee0:	0b3f      	lsrs	r7, r7, #12
 8001ee2:	0d64      	lsrs	r4, r4, #21
 8001ee4:	0fdb      	lsrs	r3, r3, #31
 8001ee6:	428d      	cmp	r5, r1
 8001ee8:	d018      	beq.n	8001f1c <__ledf2+0x5c>
 8001eea:	428c      	cmp	r4, r1
 8001eec:	d011      	beq.n	8001f12 <__ledf2+0x52>
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d118      	bne.n	8001f24 <__ledf2+0x64>
 8001ef2:	4330      	orrs	r0, r6
 8001ef4:	4684      	mov	ip, r0
 8001ef6:	2c00      	cmp	r4, #0
 8001ef8:	d11e      	bne.n	8001f38 <__ledf2+0x78>
 8001efa:	433a      	orrs	r2, r7
 8001efc:	d11c      	bne.n	8001f38 <__ledf2+0x78>
 8001efe:	4663      	mov	r3, ip
 8001f00:	2000      	movs	r0, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d030      	beq.n	8001f68 <__ledf2+0xa8>
 8001f06:	4651      	mov	r1, sl
 8001f08:	2002      	movs	r0, #2
 8001f0a:	3901      	subs	r1, #1
 8001f0c:	4008      	ands	r0, r1
 8001f0e:	3801      	subs	r0, #1
 8001f10:	e02a      	b.n	8001f68 <__ledf2+0xa8>
 8001f12:	0039      	movs	r1, r7
 8001f14:	4311      	orrs	r1, r2
 8001f16:	d0ea      	beq.n	8001eee <__ledf2+0x2e>
 8001f18:	2002      	movs	r0, #2
 8001f1a:	e025      	b.n	8001f68 <__ledf2+0xa8>
 8001f1c:	4330      	orrs	r0, r6
 8001f1e:	d1fb      	bne.n	8001f18 <__ledf2+0x58>
 8001f20:	42ac      	cmp	r4, r5
 8001f22:	d026      	beq.n	8001f72 <__ledf2+0xb2>
 8001f24:	2c00      	cmp	r4, #0
 8001f26:	d126      	bne.n	8001f76 <__ledf2+0xb6>
 8001f28:	433a      	orrs	r2, r7
 8001f2a:	d124      	bne.n	8001f76 <__ledf2+0xb6>
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	2002      	movs	r0, #2
 8001f30:	3901      	subs	r1, #1
 8001f32:	4008      	ands	r0, r1
 8001f34:	3801      	subs	r0, #1
 8001f36:	e017      	b.n	8001f68 <__ledf2+0xa8>
 8001f38:	4662      	mov	r2, ip
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	d00f      	beq.n	8001f5e <__ledf2+0x9e>
 8001f3e:	459a      	cmp	sl, r3
 8001f40:	d1e1      	bne.n	8001f06 <__ledf2+0x46>
 8001f42:	42a5      	cmp	r5, r4
 8001f44:	db05      	blt.n	8001f52 <__ledf2+0x92>
 8001f46:	42be      	cmp	r6, r7
 8001f48:	d8dd      	bhi.n	8001f06 <__ledf2+0x46>
 8001f4a:	d019      	beq.n	8001f80 <__ledf2+0xc0>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	42be      	cmp	r6, r7
 8001f50:	d20a      	bcs.n	8001f68 <__ledf2+0xa8>
 8001f52:	4650      	mov	r0, sl
 8001f54:	2301      	movs	r3, #1
 8001f56:	3801      	subs	r0, #1
 8001f58:	4398      	bics	r0, r3
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	e004      	b.n	8001f68 <__ledf2+0xa8>
 8001f5e:	2201      	movs	r2, #1
 8001f60:	3b01      	subs	r3, #1
 8001f62:	4393      	bics	r3, r2
 8001f64:	0018      	movs	r0, r3
 8001f66:	3001      	adds	r0, #1
 8001f68:	bc1c      	pop	{r2, r3, r4}
 8001f6a:	4690      	mov	r8, r2
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	46a2      	mov	sl, r4
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f72:	433a      	orrs	r2, r7
 8001f74:	d1d0      	bne.n	8001f18 <__ledf2+0x58>
 8001f76:	459a      	cmp	sl, r3
 8001f78:	d1c5      	bne.n	8001f06 <__ledf2+0x46>
 8001f7a:	42a5      	cmp	r5, r4
 8001f7c:	dcc3      	bgt.n	8001f06 <__ledf2+0x46>
 8001f7e:	e7e0      	b.n	8001f42 <__ledf2+0x82>
 8001f80:	45c8      	cmp	r8, r9
 8001f82:	d8c0      	bhi.n	8001f06 <__ledf2+0x46>
 8001f84:	2000      	movs	r0, #0
 8001f86:	45c8      	cmp	r8, r9
 8001f88:	d3e3      	bcc.n	8001f52 <__ledf2+0x92>
 8001f8a:	e7ed      	b.n	8001f68 <__ledf2+0xa8>
 8001f8c:	000007ff 	.word	0x000007ff

08001f90 <__aeabi_dmul>:
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	4657      	mov	r7, sl
 8001f94:	46de      	mov	lr, fp
 8001f96:	464e      	mov	r6, r9
 8001f98:	4645      	mov	r5, r8
 8001f9a:	b5e0      	push	{r5, r6, r7, lr}
 8001f9c:	4683      	mov	fp, r0
 8001f9e:	0006      	movs	r6, r0
 8001fa0:	030f      	lsls	r7, r1, #12
 8001fa2:	0048      	lsls	r0, r1, #1
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	4692      	mov	sl, r2
 8001fa8:	001d      	movs	r5, r3
 8001faa:	0b3f      	lsrs	r7, r7, #12
 8001fac:	0d40      	lsrs	r0, r0, #21
 8001fae:	0fcc      	lsrs	r4, r1, #31
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dmul+0x26>
 8001fb4:	e06f      	b.n	8002096 <__aeabi_dmul+0x106>
 8001fb6:	4bde      	ldr	r3, [pc, #888]	; (8002330 <__aeabi_dmul+0x3a0>)
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	d038      	beq.n	800202e <__aeabi_dmul+0x9e>
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	00ff      	lsls	r7, r7, #3
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431f      	orrs	r7, r3
 8001fc4:	0f73      	lsrs	r3, r6, #29
 8001fc6:	433b      	orrs	r3, r7
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	4bda      	ldr	r3, [pc, #872]	; (8002334 <__aeabi_dmul+0x3a4>)
 8001fcc:	2700      	movs	r7, #0
 8001fce:	4699      	mov	r9, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	469b      	mov	fp, r3
 8001fd4:	00f6      	lsls	r6, r6, #3
 8001fd6:	4481      	add	r9, r0
 8001fd8:	032b      	lsls	r3, r5, #12
 8001fda:	0069      	lsls	r1, r5, #1
 8001fdc:	0b1b      	lsrs	r3, r3, #12
 8001fde:	4652      	mov	r2, sl
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	0d49      	lsrs	r1, r1, #21
 8001fe4:	0fed      	lsrs	r5, r5, #31
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dmul+0x5c>
 8001fea:	e085      	b.n	80020f8 <__aeabi_dmul+0x168>
 8001fec:	4bd0      	ldr	r3, [pc, #832]	; (8002330 <__aeabi_dmul+0x3a0>)
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0x64>
 8001ff2:	e073      	b.n	80020dc <__aeabi_dmul+0x14c>
 8001ff4:	4643      	mov	r3, r8
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	4652      	mov	r2, sl
 8002000:	48cc      	ldr	r0, [pc, #816]	; (8002334 <__aeabi_dmul+0x3a4>)
 8002002:	0f52      	lsrs	r2, r2, #29
 8002004:	4684      	mov	ip, r0
 8002006:	4313      	orrs	r3, r2
 8002008:	4652      	mov	r2, sl
 800200a:	2000      	movs	r0, #0
 800200c:	4461      	add	r1, ip
 800200e:	00d2      	lsls	r2, r2, #3
 8002010:	4489      	add	r9, r1
 8002012:	0021      	movs	r1, r4
 8002014:	4069      	eors	r1, r5
 8002016:	9100      	str	r1, [sp, #0]
 8002018:	468c      	mov	ip, r1
 800201a:	2101      	movs	r1, #1
 800201c:	4449      	add	r1, r9
 800201e:	468a      	mov	sl, r1
 8002020:	2f0f      	cmp	r7, #15
 8002022:	d900      	bls.n	8002026 <__aeabi_dmul+0x96>
 8002024:	e090      	b.n	8002148 <__aeabi_dmul+0x1b8>
 8002026:	49c4      	ldr	r1, [pc, #784]	; (8002338 <__aeabi_dmul+0x3a8>)
 8002028:	00bf      	lsls	r7, r7, #2
 800202a:	59cf      	ldr	r7, [r1, r7]
 800202c:	46bf      	mov	pc, r7
 800202e:	465b      	mov	r3, fp
 8002030:	433b      	orrs	r3, r7
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	d000      	beq.n	8002038 <__aeabi_dmul+0xa8>
 8002036:	e16a      	b.n	800230e <__aeabi_dmul+0x37e>
 8002038:	2302      	movs	r3, #2
 800203a:	2708      	movs	r7, #8
 800203c:	2600      	movs	r6, #0
 800203e:	4681      	mov	r9, r0
 8002040:	469b      	mov	fp, r3
 8002042:	e7c9      	b.n	8001fd8 <__aeabi_dmul+0x48>
 8002044:	0032      	movs	r2, r6
 8002046:	4658      	mov	r0, fp
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	4661      	mov	r1, ip
 800204c:	9100      	str	r1, [sp, #0]
 800204e:	2802      	cmp	r0, #2
 8002050:	d100      	bne.n	8002054 <__aeabi_dmul+0xc4>
 8002052:	e075      	b.n	8002140 <__aeabi_dmul+0x1b0>
 8002054:	2803      	cmp	r0, #3
 8002056:	d100      	bne.n	800205a <__aeabi_dmul+0xca>
 8002058:	e1fe      	b.n	8002458 <__aeabi_dmul+0x4c8>
 800205a:	2801      	cmp	r0, #1
 800205c:	d000      	beq.n	8002060 <__aeabi_dmul+0xd0>
 800205e:	e12c      	b.n	80022ba <__aeabi_dmul+0x32a>
 8002060:	2300      	movs	r3, #0
 8002062:	2700      	movs	r7, #0
 8002064:	2600      	movs	r6, #0
 8002066:	2500      	movs	r5, #0
 8002068:	033f      	lsls	r7, r7, #12
 800206a:	0d2a      	lsrs	r2, r5, #20
 800206c:	0b3f      	lsrs	r7, r7, #12
 800206e:	48b3      	ldr	r0, [pc, #716]	; (800233c <__aeabi_dmul+0x3ac>)
 8002070:	0512      	lsls	r2, r2, #20
 8002072:	433a      	orrs	r2, r7
 8002074:	4002      	ands	r2, r0
 8002076:	051b      	lsls	r3, r3, #20
 8002078:	4313      	orrs	r3, r2
 800207a:	9a00      	ldr	r2, [sp, #0]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	07d1      	lsls	r1, r2, #31
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	430b      	orrs	r3, r1
 8002084:	0030      	movs	r0, r6
 8002086:	0019      	movs	r1, r3
 8002088:	b007      	add	sp, #28
 800208a:	bc3c      	pop	{r2, r3, r4, r5}
 800208c:	4690      	mov	r8, r2
 800208e:	4699      	mov	r9, r3
 8002090:	46a2      	mov	sl, r4
 8002092:	46ab      	mov	fp, r5
 8002094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002096:	465b      	mov	r3, fp
 8002098:	433b      	orrs	r3, r7
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	d100      	bne.n	80020a0 <__aeabi_dmul+0x110>
 800209e:	e12f      	b.n	8002300 <__aeabi_dmul+0x370>
 80020a0:	2f00      	cmp	r7, #0
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dmul+0x116>
 80020a4:	e1a5      	b.n	80023f2 <__aeabi_dmul+0x462>
 80020a6:	0038      	movs	r0, r7
 80020a8:	f000 fec0 	bl	8002e2c <__clzsi2>
 80020ac:	0003      	movs	r3, r0
 80020ae:	3b0b      	subs	r3, #11
 80020b0:	2b1c      	cmp	r3, #28
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dmul+0x126>
 80020b4:	e196      	b.n	80023e4 <__aeabi_dmul+0x454>
 80020b6:	221d      	movs	r2, #29
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	465a      	mov	r2, fp
 80020bc:	0001      	movs	r1, r0
 80020be:	40da      	lsrs	r2, r3
 80020c0:	465e      	mov	r6, fp
 80020c2:	3908      	subs	r1, #8
 80020c4:	408f      	lsls	r7, r1
 80020c6:	0013      	movs	r3, r2
 80020c8:	408e      	lsls	r6, r1
 80020ca:	433b      	orrs	r3, r7
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	4b9c      	ldr	r3, [pc, #624]	; (8002340 <__aeabi_dmul+0x3b0>)
 80020d0:	2700      	movs	r7, #0
 80020d2:	1a1b      	subs	r3, r3, r0
 80020d4:	4699      	mov	r9, r3
 80020d6:	2300      	movs	r3, #0
 80020d8:	469b      	mov	fp, r3
 80020da:	e77d      	b.n	8001fd8 <__aeabi_dmul+0x48>
 80020dc:	4641      	mov	r1, r8
 80020de:	4653      	mov	r3, sl
 80020e0:	430b      	orrs	r3, r1
 80020e2:	4993      	ldr	r1, [pc, #588]	; (8002330 <__aeabi_dmul+0x3a0>)
 80020e4:	468c      	mov	ip, r1
 80020e6:	44e1      	add	r9, ip
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d000      	beq.n	80020ee <__aeabi_dmul+0x15e>
 80020ec:	e11a      	b.n	8002324 <__aeabi_dmul+0x394>
 80020ee:	2202      	movs	r2, #2
 80020f0:	2002      	movs	r0, #2
 80020f2:	4317      	orrs	r7, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	e78c      	b.n	8002012 <__aeabi_dmul+0x82>
 80020f8:	4313      	orrs	r3, r2
 80020fa:	d100      	bne.n	80020fe <__aeabi_dmul+0x16e>
 80020fc:	e10d      	b.n	800231a <__aeabi_dmul+0x38a>
 80020fe:	4643      	mov	r3, r8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d100      	bne.n	8002106 <__aeabi_dmul+0x176>
 8002104:	e181      	b.n	800240a <__aeabi_dmul+0x47a>
 8002106:	4640      	mov	r0, r8
 8002108:	f000 fe90 	bl	8002e2c <__clzsi2>
 800210c:	0002      	movs	r2, r0
 800210e:	3a0b      	subs	r2, #11
 8002110:	2a1c      	cmp	r2, #28
 8002112:	dd00      	ble.n	8002116 <__aeabi_dmul+0x186>
 8002114:	e172      	b.n	80023fc <__aeabi_dmul+0x46c>
 8002116:	0001      	movs	r1, r0
 8002118:	4643      	mov	r3, r8
 800211a:	3908      	subs	r1, #8
 800211c:	408b      	lsls	r3, r1
 800211e:	4698      	mov	r8, r3
 8002120:	231d      	movs	r3, #29
 8002122:	1a9a      	subs	r2, r3, r2
 8002124:	4653      	mov	r3, sl
 8002126:	40d3      	lsrs	r3, r2
 8002128:	001a      	movs	r2, r3
 800212a:	4643      	mov	r3, r8
 800212c:	4313      	orrs	r3, r2
 800212e:	4652      	mov	r2, sl
 8002130:	408a      	lsls	r2, r1
 8002132:	4649      	mov	r1, r9
 8002134:	1a08      	subs	r0, r1, r0
 8002136:	4982      	ldr	r1, [pc, #520]	; (8002340 <__aeabi_dmul+0x3b0>)
 8002138:	4689      	mov	r9, r1
 800213a:	4481      	add	r9, r0
 800213c:	2000      	movs	r0, #0
 800213e:	e768      	b.n	8002012 <__aeabi_dmul+0x82>
 8002140:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <__aeabi_dmul+0x3a0>)
 8002142:	2700      	movs	r7, #0
 8002144:	2600      	movs	r6, #0
 8002146:	e78e      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002148:	0c14      	lsrs	r4, r2, #16
 800214a:	0412      	lsls	r2, r2, #16
 800214c:	0c12      	lsrs	r2, r2, #16
 800214e:	0011      	movs	r1, r2
 8002150:	0c37      	lsrs	r7, r6, #16
 8002152:	0436      	lsls	r6, r6, #16
 8002154:	0c35      	lsrs	r5, r6, #16
 8002156:	4379      	muls	r1, r7
 8002158:	0028      	movs	r0, r5
 800215a:	468c      	mov	ip, r1
 800215c:	002e      	movs	r6, r5
 800215e:	4360      	muls	r0, r4
 8002160:	4460      	add	r0, ip
 8002162:	4683      	mov	fp, r0
 8002164:	4356      	muls	r6, r2
 8002166:	0021      	movs	r1, r4
 8002168:	0c30      	lsrs	r0, r6, #16
 800216a:	4680      	mov	r8, r0
 800216c:	4658      	mov	r0, fp
 800216e:	4379      	muls	r1, r7
 8002170:	4440      	add	r0, r8
 8002172:	9102      	str	r1, [sp, #8]
 8002174:	4584      	cmp	ip, r0
 8002176:	d906      	bls.n	8002186 <__aeabi_dmul+0x1f6>
 8002178:	4688      	mov	r8, r1
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0249      	lsls	r1, r1, #9
 800217e:	468c      	mov	ip, r1
 8002180:	44e0      	add	r8, ip
 8002182:	4641      	mov	r1, r8
 8002184:	9102      	str	r1, [sp, #8]
 8002186:	0436      	lsls	r6, r6, #16
 8002188:	0c01      	lsrs	r1, r0, #16
 800218a:	0c36      	lsrs	r6, r6, #16
 800218c:	0400      	lsls	r0, r0, #16
 800218e:	468b      	mov	fp, r1
 8002190:	1981      	adds	r1, r0, r6
 8002192:	0c1e      	lsrs	r6, r3, #16
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	9103      	str	r1, [sp, #12]
 800219a:	0019      	movs	r1, r3
 800219c:	4379      	muls	r1, r7
 800219e:	468c      	mov	ip, r1
 80021a0:	0028      	movs	r0, r5
 80021a2:	4375      	muls	r5, r6
 80021a4:	4465      	add	r5, ip
 80021a6:	46a8      	mov	r8, r5
 80021a8:	4358      	muls	r0, r3
 80021aa:	0c05      	lsrs	r5, r0, #16
 80021ac:	4445      	add	r5, r8
 80021ae:	4377      	muls	r7, r6
 80021b0:	42a9      	cmp	r1, r5
 80021b2:	d903      	bls.n	80021bc <__aeabi_dmul+0x22c>
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0249      	lsls	r1, r1, #9
 80021b8:	468c      	mov	ip, r1
 80021ba:	4467      	add	r7, ip
 80021bc:	0c29      	lsrs	r1, r5, #16
 80021be:	468c      	mov	ip, r1
 80021c0:	0039      	movs	r1, r7
 80021c2:	0400      	lsls	r0, r0, #16
 80021c4:	0c00      	lsrs	r0, r0, #16
 80021c6:	042d      	lsls	r5, r5, #16
 80021c8:	182d      	adds	r5, r5, r0
 80021ca:	4461      	add	r1, ip
 80021cc:	44ab      	add	fp, r5
 80021ce:	9105      	str	r1, [sp, #20]
 80021d0:	4659      	mov	r1, fp
 80021d2:	9104      	str	r1, [sp, #16]
 80021d4:	9901      	ldr	r1, [sp, #4]
 80021d6:	040f      	lsls	r7, r1, #16
 80021d8:	0c3f      	lsrs	r7, r7, #16
 80021da:	0c08      	lsrs	r0, r1, #16
 80021dc:	0039      	movs	r1, r7
 80021de:	4351      	muls	r1, r2
 80021e0:	4342      	muls	r2, r0
 80021e2:	4690      	mov	r8, r2
 80021e4:	0002      	movs	r2, r0
 80021e6:	468c      	mov	ip, r1
 80021e8:	0c09      	lsrs	r1, r1, #16
 80021ea:	468b      	mov	fp, r1
 80021ec:	4362      	muls	r2, r4
 80021ee:	437c      	muls	r4, r7
 80021f0:	4444      	add	r4, r8
 80021f2:	445c      	add	r4, fp
 80021f4:	45a0      	cmp	r8, r4
 80021f6:	d903      	bls.n	8002200 <__aeabi_dmul+0x270>
 80021f8:	2180      	movs	r1, #128	; 0x80
 80021fa:	0249      	lsls	r1, r1, #9
 80021fc:	4688      	mov	r8, r1
 80021fe:	4442      	add	r2, r8
 8002200:	0c21      	lsrs	r1, r4, #16
 8002202:	4688      	mov	r8, r1
 8002204:	4661      	mov	r1, ip
 8002206:	0409      	lsls	r1, r1, #16
 8002208:	0c09      	lsrs	r1, r1, #16
 800220a:	468c      	mov	ip, r1
 800220c:	0039      	movs	r1, r7
 800220e:	4359      	muls	r1, r3
 8002210:	4343      	muls	r3, r0
 8002212:	4370      	muls	r0, r6
 8002214:	437e      	muls	r6, r7
 8002216:	0c0f      	lsrs	r7, r1, #16
 8002218:	18f6      	adds	r6, r6, r3
 800221a:	0424      	lsls	r4, r4, #16
 800221c:	19be      	adds	r6, r7, r6
 800221e:	4464      	add	r4, ip
 8002220:	4442      	add	r2, r8
 8002222:	468c      	mov	ip, r1
 8002224:	42b3      	cmp	r3, r6
 8002226:	d903      	bls.n	8002230 <__aeabi_dmul+0x2a0>
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	025b      	lsls	r3, r3, #9
 800222c:	4698      	mov	r8, r3
 800222e:	4440      	add	r0, r8
 8002230:	9b02      	ldr	r3, [sp, #8]
 8002232:	4661      	mov	r1, ip
 8002234:	4698      	mov	r8, r3
 8002236:	9b04      	ldr	r3, [sp, #16]
 8002238:	0437      	lsls	r7, r6, #16
 800223a:	4443      	add	r3, r8
 800223c:	469b      	mov	fp, r3
 800223e:	45ab      	cmp	fp, r5
 8002240:	41ad      	sbcs	r5, r5
 8002242:	426b      	negs	r3, r5
 8002244:	040d      	lsls	r5, r1, #16
 8002246:	9905      	ldr	r1, [sp, #20]
 8002248:	0c2d      	lsrs	r5, r5, #16
 800224a:	468c      	mov	ip, r1
 800224c:	197f      	adds	r7, r7, r5
 800224e:	4467      	add	r7, ip
 8002250:	18fd      	adds	r5, r7, r3
 8002252:	46a8      	mov	r8, r5
 8002254:	465d      	mov	r5, fp
 8002256:	192d      	adds	r5, r5, r4
 8002258:	42a5      	cmp	r5, r4
 800225a:	41a4      	sbcs	r4, r4
 800225c:	4693      	mov	fp, r2
 800225e:	4264      	negs	r4, r4
 8002260:	46a4      	mov	ip, r4
 8002262:	44c3      	add	fp, r8
 8002264:	44dc      	add	ip, fp
 8002266:	428f      	cmp	r7, r1
 8002268:	41bf      	sbcs	r7, r7
 800226a:	4598      	cmp	r8, r3
 800226c:	419b      	sbcs	r3, r3
 800226e:	4593      	cmp	fp, r2
 8002270:	4192      	sbcs	r2, r2
 8002272:	45a4      	cmp	ip, r4
 8002274:	41a4      	sbcs	r4, r4
 8002276:	425b      	negs	r3, r3
 8002278:	427f      	negs	r7, r7
 800227a:	431f      	orrs	r7, r3
 800227c:	0c36      	lsrs	r6, r6, #16
 800227e:	4252      	negs	r2, r2
 8002280:	4264      	negs	r4, r4
 8002282:	19bf      	adds	r7, r7, r6
 8002284:	4322      	orrs	r2, r4
 8002286:	18bf      	adds	r7, r7, r2
 8002288:	4662      	mov	r2, ip
 800228a:	1838      	adds	r0, r7, r0
 800228c:	0243      	lsls	r3, r0, #9
 800228e:	0dd2      	lsrs	r2, r2, #23
 8002290:	9903      	ldr	r1, [sp, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	026a      	lsls	r2, r5, #9
 8002296:	430a      	orrs	r2, r1
 8002298:	1e50      	subs	r0, r2, #1
 800229a:	4182      	sbcs	r2, r0
 800229c:	4661      	mov	r1, ip
 800229e:	0ded      	lsrs	r5, r5, #23
 80022a0:	432a      	orrs	r2, r5
 80022a2:	024e      	lsls	r6, r1, #9
 80022a4:	4332      	orrs	r2, r6
 80022a6:	01d9      	lsls	r1, r3, #7
 80022a8:	d400      	bmi.n	80022ac <__aeabi_dmul+0x31c>
 80022aa:	e0b3      	b.n	8002414 <__aeabi_dmul+0x484>
 80022ac:	2601      	movs	r6, #1
 80022ae:	0850      	lsrs	r0, r2, #1
 80022b0:	4032      	ands	r2, r6
 80022b2:	4302      	orrs	r2, r0
 80022b4:	07de      	lsls	r6, r3, #31
 80022b6:	4332      	orrs	r2, r6
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	4c22      	ldr	r4, [pc, #136]	; (8002344 <__aeabi_dmul+0x3b4>)
 80022bc:	4454      	add	r4, sl
 80022be:	2c00      	cmp	r4, #0
 80022c0:	dd62      	ble.n	8002388 <__aeabi_dmul+0x3f8>
 80022c2:	0751      	lsls	r1, r2, #29
 80022c4:	d009      	beq.n	80022da <__aeabi_dmul+0x34a>
 80022c6:	200f      	movs	r0, #15
 80022c8:	4010      	ands	r0, r2
 80022ca:	2804      	cmp	r0, #4
 80022cc:	d005      	beq.n	80022da <__aeabi_dmul+0x34a>
 80022ce:	1d10      	adds	r0, r2, #4
 80022d0:	4290      	cmp	r0, r2
 80022d2:	4192      	sbcs	r2, r2
 80022d4:	4252      	negs	r2, r2
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	0002      	movs	r2, r0
 80022da:	01d9      	lsls	r1, r3, #7
 80022dc:	d504      	bpl.n	80022e8 <__aeabi_dmul+0x358>
 80022de:	2480      	movs	r4, #128	; 0x80
 80022e0:	4819      	ldr	r0, [pc, #100]	; (8002348 <__aeabi_dmul+0x3b8>)
 80022e2:	00e4      	lsls	r4, r4, #3
 80022e4:	4003      	ands	r3, r0
 80022e6:	4454      	add	r4, sl
 80022e8:	4818      	ldr	r0, [pc, #96]	; (800234c <__aeabi_dmul+0x3bc>)
 80022ea:	4284      	cmp	r4, r0
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dmul+0x360>
 80022ee:	e727      	b.n	8002140 <__aeabi_dmul+0x1b0>
 80022f0:	075e      	lsls	r6, r3, #29
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	0b1f      	lsrs	r7, r3, #12
 80022f8:	0563      	lsls	r3, r4, #21
 80022fa:	4316      	orrs	r6, r2
 80022fc:	0d5b      	lsrs	r3, r3, #21
 80022fe:	e6b2      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002300:	2300      	movs	r3, #0
 8002302:	4699      	mov	r9, r3
 8002304:	3301      	adds	r3, #1
 8002306:	2704      	movs	r7, #4
 8002308:	2600      	movs	r6, #0
 800230a:	469b      	mov	fp, r3
 800230c:	e664      	b.n	8001fd8 <__aeabi_dmul+0x48>
 800230e:	2303      	movs	r3, #3
 8002310:	9701      	str	r7, [sp, #4]
 8002312:	4681      	mov	r9, r0
 8002314:	270c      	movs	r7, #12
 8002316:	469b      	mov	fp, r3
 8002318:	e65e      	b.n	8001fd8 <__aeabi_dmul+0x48>
 800231a:	2201      	movs	r2, #1
 800231c:	2001      	movs	r0, #1
 800231e:	4317      	orrs	r7, r2
 8002320:	2200      	movs	r2, #0
 8002322:	e676      	b.n	8002012 <__aeabi_dmul+0x82>
 8002324:	2303      	movs	r3, #3
 8002326:	2003      	movs	r0, #3
 8002328:	431f      	orrs	r7, r3
 800232a:	4643      	mov	r3, r8
 800232c:	e671      	b.n	8002012 <__aeabi_dmul+0x82>
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	000007ff 	.word	0x000007ff
 8002334:	fffffc01 	.word	0xfffffc01
 8002338:	080172b4 	.word	0x080172b4
 800233c:	800fffff 	.word	0x800fffff
 8002340:	fffffc0d 	.word	0xfffffc0d
 8002344:	000003ff 	.word	0x000003ff
 8002348:	feffffff 	.word	0xfeffffff
 800234c:	000007fe 	.word	0x000007fe
 8002350:	2300      	movs	r3, #0
 8002352:	2780      	movs	r7, #128	; 0x80
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	033f      	lsls	r7, r7, #12
 8002358:	2600      	movs	r6, #0
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <__aeabi_dmul+0x4d8>)
 800235c:	e683      	b.n	8002066 <__aeabi_dmul+0xd6>
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	0032      	movs	r2, r6
 8002362:	46a4      	mov	ip, r4
 8002364:	4658      	mov	r0, fp
 8002366:	e670      	b.n	800204a <__aeabi_dmul+0xba>
 8002368:	46ac      	mov	ip, r5
 800236a:	e66e      	b.n	800204a <__aeabi_dmul+0xba>
 800236c:	2780      	movs	r7, #128	; 0x80
 800236e:	9901      	ldr	r1, [sp, #4]
 8002370:	033f      	lsls	r7, r7, #12
 8002372:	4239      	tst	r1, r7
 8002374:	d02d      	beq.n	80023d2 <__aeabi_dmul+0x442>
 8002376:	423b      	tst	r3, r7
 8002378:	d12b      	bne.n	80023d2 <__aeabi_dmul+0x442>
 800237a:	431f      	orrs	r7, r3
 800237c:	033f      	lsls	r7, r7, #12
 800237e:	0b3f      	lsrs	r7, r7, #12
 8002380:	9500      	str	r5, [sp, #0]
 8002382:	0016      	movs	r6, r2
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <__aeabi_dmul+0x4d8>)
 8002386:	e66e      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002388:	2501      	movs	r5, #1
 800238a:	1b2d      	subs	r5, r5, r4
 800238c:	2d38      	cmp	r5, #56	; 0x38
 800238e:	dd00      	ble.n	8002392 <__aeabi_dmul+0x402>
 8002390:	e666      	b.n	8002060 <__aeabi_dmul+0xd0>
 8002392:	2d1f      	cmp	r5, #31
 8002394:	dc40      	bgt.n	8002418 <__aeabi_dmul+0x488>
 8002396:	4835      	ldr	r0, [pc, #212]	; (800246c <__aeabi_dmul+0x4dc>)
 8002398:	001c      	movs	r4, r3
 800239a:	4450      	add	r0, sl
 800239c:	0016      	movs	r6, r2
 800239e:	4082      	lsls	r2, r0
 80023a0:	4084      	lsls	r4, r0
 80023a2:	40ee      	lsrs	r6, r5
 80023a4:	1e50      	subs	r0, r2, #1
 80023a6:	4182      	sbcs	r2, r0
 80023a8:	4334      	orrs	r4, r6
 80023aa:	4314      	orrs	r4, r2
 80023ac:	40eb      	lsrs	r3, r5
 80023ae:	0762      	lsls	r2, r4, #29
 80023b0:	d009      	beq.n	80023c6 <__aeabi_dmul+0x436>
 80023b2:	220f      	movs	r2, #15
 80023b4:	4022      	ands	r2, r4
 80023b6:	2a04      	cmp	r2, #4
 80023b8:	d005      	beq.n	80023c6 <__aeabi_dmul+0x436>
 80023ba:	0022      	movs	r2, r4
 80023bc:	1d14      	adds	r4, r2, #4
 80023be:	4294      	cmp	r4, r2
 80023c0:	4180      	sbcs	r0, r0
 80023c2:	4240      	negs	r0, r0
 80023c4:	181b      	adds	r3, r3, r0
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	d53e      	bpl.n	8002448 <__aeabi_dmul+0x4b8>
 80023ca:	2301      	movs	r3, #1
 80023cc:	2700      	movs	r7, #0
 80023ce:	2600      	movs	r6, #0
 80023d0:	e649      	b.n	8002066 <__aeabi_dmul+0xd6>
 80023d2:	2780      	movs	r7, #128	; 0x80
 80023d4:	9b01      	ldr	r3, [sp, #4]
 80023d6:	033f      	lsls	r7, r7, #12
 80023d8:	431f      	orrs	r7, r3
 80023da:	033f      	lsls	r7, r7, #12
 80023dc:	0b3f      	lsrs	r7, r7, #12
 80023de:	9400      	str	r4, [sp, #0]
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <__aeabi_dmul+0x4d8>)
 80023e2:	e640      	b.n	8002066 <__aeabi_dmul+0xd6>
 80023e4:	0003      	movs	r3, r0
 80023e6:	465a      	mov	r2, fp
 80023e8:	3b28      	subs	r3, #40	; 0x28
 80023ea:	409a      	lsls	r2, r3
 80023ec:	2600      	movs	r6, #0
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	e66d      	b.n	80020ce <__aeabi_dmul+0x13e>
 80023f2:	4658      	mov	r0, fp
 80023f4:	f000 fd1a 	bl	8002e2c <__clzsi2>
 80023f8:	3020      	adds	r0, #32
 80023fa:	e657      	b.n	80020ac <__aeabi_dmul+0x11c>
 80023fc:	0003      	movs	r3, r0
 80023fe:	4652      	mov	r2, sl
 8002400:	3b28      	subs	r3, #40	; 0x28
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	2200      	movs	r2, #0
 8002408:	e693      	b.n	8002132 <__aeabi_dmul+0x1a2>
 800240a:	4650      	mov	r0, sl
 800240c:	f000 fd0e 	bl	8002e2c <__clzsi2>
 8002410:	3020      	adds	r0, #32
 8002412:	e67b      	b.n	800210c <__aeabi_dmul+0x17c>
 8002414:	46ca      	mov	sl, r9
 8002416:	e750      	b.n	80022ba <__aeabi_dmul+0x32a>
 8002418:	201f      	movs	r0, #31
 800241a:	001e      	movs	r6, r3
 800241c:	4240      	negs	r0, r0
 800241e:	1b04      	subs	r4, r0, r4
 8002420:	40e6      	lsrs	r6, r4
 8002422:	2d20      	cmp	r5, #32
 8002424:	d003      	beq.n	800242e <__aeabi_dmul+0x49e>
 8002426:	4c12      	ldr	r4, [pc, #72]	; (8002470 <__aeabi_dmul+0x4e0>)
 8002428:	4454      	add	r4, sl
 800242a:	40a3      	lsls	r3, r4
 800242c:	431a      	orrs	r2, r3
 800242e:	1e50      	subs	r0, r2, #1
 8002430:	4182      	sbcs	r2, r0
 8002432:	4332      	orrs	r2, r6
 8002434:	2607      	movs	r6, #7
 8002436:	2700      	movs	r7, #0
 8002438:	4016      	ands	r6, r2
 800243a:	d009      	beq.n	8002450 <__aeabi_dmul+0x4c0>
 800243c:	200f      	movs	r0, #15
 800243e:	2300      	movs	r3, #0
 8002440:	4010      	ands	r0, r2
 8002442:	0014      	movs	r4, r2
 8002444:	2804      	cmp	r0, #4
 8002446:	d1b9      	bne.n	80023bc <__aeabi_dmul+0x42c>
 8002448:	0022      	movs	r2, r4
 800244a:	075e      	lsls	r6, r3, #29
 800244c:	025b      	lsls	r3, r3, #9
 800244e:	0b1f      	lsrs	r7, r3, #12
 8002450:	08d2      	lsrs	r2, r2, #3
 8002452:	4316      	orrs	r6, r2
 8002454:	2300      	movs	r3, #0
 8002456:	e606      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002458:	2780      	movs	r7, #128	; 0x80
 800245a:	033f      	lsls	r7, r7, #12
 800245c:	431f      	orrs	r7, r3
 800245e:	033f      	lsls	r7, r7, #12
 8002460:	0b3f      	lsrs	r7, r7, #12
 8002462:	0016      	movs	r6, r2
 8002464:	4b00      	ldr	r3, [pc, #0]	; (8002468 <__aeabi_dmul+0x4d8>)
 8002466:	e5fe      	b.n	8002066 <__aeabi_dmul+0xd6>
 8002468:	000007ff 	.word	0x000007ff
 800246c:	0000041e 	.word	0x0000041e
 8002470:	0000043e 	.word	0x0000043e

08002474 <__aeabi_dsub>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	4657      	mov	r7, sl
 8002478:	464e      	mov	r6, r9
 800247a:	4645      	mov	r5, r8
 800247c:	46de      	mov	lr, fp
 800247e:	000c      	movs	r4, r1
 8002480:	0309      	lsls	r1, r1, #12
 8002482:	b5e0      	push	{r5, r6, r7, lr}
 8002484:	0a49      	lsrs	r1, r1, #9
 8002486:	0f46      	lsrs	r6, r0, #29
 8002488:	005f      	lsls	r7, r3, #1
 800248a:	4331      	orrs	r1, r6
 800248c:	031e      	lsls	r6, r3, #12
 800248e:	0fdb      	lsrs	r3, r3, #31
 8002490:	0a76      	lsrs	r6, r6, #9
 8002492:	469b      	mov	fp, r3
 8002494:	0f53      	lsrs	r3, r2, #29
 8002496:	4333      	orrs	r3, r6
 8002498:	4ec8      	ldr	r6, [pc, #800]	; (80027bc <__aeabi_dsub+0x348>)
 800249a:	0065      	lsls	r5, r4, #1
 800249c:	00c0      	lsls	r0, r0, #3
 800249e:	0fe4      	lsrs	r4, r4, #31
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	0d6d      	lsrs	r5, r5, #21
 80024a4:	46a2      	mov	sl, r4
 80024a6:	4681      	mov	r9, r0
 80024a8:	0d7f      	lsrs	r7, r7, #21
 80024aa:	469c      	mov	ip, r3
 80024ac:	4690      	mov	r8, r2
 80024ae:	42b7      	cmp	r7, r6
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x40>
 80024b2:	e0b9      	b.n	8002628 <__aeabi_dsub+0x1b4>
 80024b4:	465b      	mov	r3, fp
 80024b6:	2601      	movs	r6, #1
 80024b8:	4073      	eors	r3, r6
 80024ba:	469b      	mov	fp, r3
 80024bc:	1bee      	subs	r6, r5, r7
 80024be:	45a3      	cmp	fp, r4
 80024c0:	d100      	bne.n	80024c4 <__aeabi_dsub+0x50>
 80024c2:	e083      	b.n	80025cc <__aeabi_dsub+0x158>
 80024c4:	2e00      	cmp	r6, #0
 80024c6:	dd63      	ble.n	8002590 <__aeabi_dsub+0x11c>
 80024c8:	2f00      	cmp	r7, #0
 80024ca:	d000      	beq.n	80024ce <__aeabi_dsub+0x5a>
 80024cc:	e0b1      	b.n	8002632 <__aeabi_dsub+0x1be>
 80024ce:	4663      	mov	r3, ip
 80024d0:	4313      	orrs	r3, r2
 80024d2:	d100      	bne.n	80024d6 <__aeabi_dsub+0x62>
 80024d4:	e123      	b.n	800271e <__aeabi_dsub+0x2aa>
 80024d6:	1e73      	subs	r3, r6, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d000      	beq.n	80024de <__aeabi_dsub+0x6a>
 80024dc:	e1ba      	b.n	8002854 <__aeabi_dsub+0x3e0>
 80024de:	1a86      	subs	r6, r0, r2
 80024e0:	4663      	mov	r3, ip
 80024e2:	42b0      	cmp	r0, r6
 80024e4:	4180      	sbcs	r0, r0
 80024e6:	2501      	movs	r5, #1
 80024e8:	1ac9      	subs	r1, r1, r3
 80024ea:	4240      	negs	r0, r0
 80024ec:	1a09      	subs	r1, r1, r0
 80024ee:	020b      	lsls	r3, r1, #8
 80024f0:	d400      	bmi.n	80024f4 <__aeabi_dsub+0x80>
 80024f2:	e147      	b.n	8002784 <__aeabi_dsub+0x310>
 80024f4:	0249      	lsls	r1, r1, #9
 80024f6:	0a4b      	lsrs	r3, r1, #9
 80024f8:	4698      	mov	r8, r3
 80024fa:	4643      	mov	r3, r8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x8e>
 8002500:	e189      	b.n	8002816 <__aeabi_dsub+0x3a2>
 8002502:	4640      	mov	r0, r8
 8002504:	f000 fc92 	bl	8002e2c <__clzsi2>
 8002508:	0003      	movs	r3, r0
 800250a:	3b08      	subs	r3, #8
 800250c:	2b1f      	cmp	r3, #31
 800250e:	dd00      	ble.n	8002512 <__aeabi_dsub+0x9e>
 8002510:	e17c      	b.n	800280c <__aeabi_dsub+0x398>
 8002512:	2220      	movs	r2, #32
 8002514:	0030      	movs	r0, r6
 8002516:	1ad2      	subs	r2, r2, r3
 8002518:	4641      	mov	r1, r8
 800251a:	40d0      	lsrs	r0, r2
 800251c:	4099      	lsls	r1, r3
 800251e:	0002      	movs	r2, r0
 8002520:	409e      	lsls	r6, r3
 8002522:	430a      	orrs	r2, r1
 8002524:	429d      	cmp	r5, r3
 8002526:	dd00      	ble.n	800252a <__aeabi_dsub+0xb6>
 8002528:	e16a      	b.n	8002800 <__aeabi_dsub+0x38c>
 800252a:	1b5d      	subs	r5, r3, r5
 800252c:	1c6b      	adds	r3, r5, #1
 800252e:	2b1f      	cmp	r3, #31
 8002530:	dd00      	ble.n	8002534 <__aeabi_dsub+0xc0>
 8002532:	e194      	b.n	800285e <__aeabi_dsub+0x3ea>
 8002534:	2120      	movs	r1, #32
 8002536:	0010      	movs	r0, r2
 8002538:	0035      	movs	r5, r6
 800253a:	1ac9      	subs	r1, r1, r3
 800253c:	408e      	lsls	r6, r1
 800253e:	40da      	lsrs	r2, r3
 8002540:	4088      	lsls	r0, r1
 8002542:	40dd      	lsrs	r5, r3
 8002544:	1e71      	subs	r1, r6, #1
 8002546:	418e      	sbcs	r6, r1
 8002548:	0011      	movs	r1, r2
 800254a:	2207      	movs	r2, #7
 800254c:	4328      	orrs	r0, r5
 800254e:	2500      	movs	r5, #0
 8002550:	4306      	orrs	r6, r0
 8002552:	4032      	ands	r2, r6
 8002554:	2a00      	cmp	r2, #0
 8002556:	d009      	beq.n	800256c <__aeabi_dsub+0xf8>
 8002558:	230f      	movs	r3, #15
 800255a:	4033      	ands	r3, r6
 800255c:	2b04      	cmp	r3, #4
 800255e:	d005      	beq.n	800256c <__aeabi_dsub+0xf8>
 8002560:	1d33      	adds	r3, r6, #4
 8002562:	42b3      	cmp	r3, r6
 8002564:	41b6      	sbcs	r6, r6
 8002566:	4276      	negs	r6, r6
 8002568:	1989      	adds	r1, r1, r6
 800256a:	001e      	movs	r6, r3
 800256c:	020b      	lsls	r3, r1, #8
 800256e:	d400      	bmi.n	8002572 <__aeabi_dsub+0xfe>
 8002570:	e23d      	b.n	80029ee <__aeabi_dsub+0x57a>
 8002572:	1c6a      	adds	r2, r5, #1
 8002574:	4b91      	ldr	r3, [pc, #580]	; (80027bc <__aeabi_dsub+0x348>)
 8002576:	0555      	lsls	r5, r2, #21
 8002578:	0d6d      	lsrs	r5, r5, #21
 800257a:	429a      	cmp	r2, r3
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x10c>
 800257e:	e119      	b.n	80027b4 <__aeabi_dsub+0x340>
 8002580:	4a8f      	ldr	r2, [pc, #572]	; (80027c0 <__aeabi_dsub+0x34c>)
 8002582:	08f6      	lsrs	r6, r6, #3
 8002584:	400a      	ands	r2, r1
 8002586:	0757      	lsls	r7, r2, #29
 8002588:	0252      	lsls	r2, r2, #9
 800258a:	4337      	orrs	r7, r6
 800258c:	0b12      	lsrs	r2, r2, #12
 800258e:	e09b      	b.n	80026c8 <__aeabi_dsub+0x254>
 8002590:	2e00      	cmp	r6, #0
 8002592:	d000      	beq.n	8002596 <__aeabi_dsub+0x122>
 8002594:	e0c5      	b.n	8002722 <__aeabi_dsub+0x2ae>
 8002596:	1c6e      	adds	r6, r5, #1
 8002598:	0576      	lsls	r6, r6, #21
 800259a:	0d76      	lsrs	r6, r6, #21
 800259c:	2e01      	cmp	r6, #1
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dsub+0x12e>
 80025a0:	e148      	b.n	8002834 <__aeabi_dsub+0x3c0>
 80025a2:	4667      	mov	r7, ip
 80025a4:	1a86      	subs	r6, r0, r2
 80025a6:	1bcb      	subs	r3, r1, r7
 80025a8:	42b0      	cmp	r0, r6
 80025aa:	41bf      	sbcs	r7, r7
 80025ac:	427f      	negs	r7, r7
 80025ae:	46b8      	mov	r8, r7
 80025b0:	001f      	movs	r7, r3
 80025b2:	4643      	mov	r3, r8
 80025b4:	1aff      	subs	r7, r7, r3
 80025b6:	003b      	movs	r3, r7
 80025b8:	46b8      	mov	r8, r7
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	d500      	bpl.n	80025c0 <__aeabi_dsub+0x14c>
 80025be:	e15f      	b.n	8002880 <__aeabi_dsub+0x40c>
 80025c0:	4337      	orrs	r7, r6
 80025c2:	d19a      	bne.n	80024fa <__aeabi_dsub+0x86>
 80025c4:	2200      	movs	r2, #0
 80025c6:	2400      	movs	r4, #0
 80025c8:	2500      	movs	r5, #0
 80025ca:	e079      	b.n	80026c0 <__aeabi_dsub+0x24c>
 80025cc:	2e00      	cmp	r6, #0
 80025ce:	dc00      	bgt.n	80025d2 <__aeabi_dsub+0x15e>
 80025d0:	e0fa      	b.n	80027c8 <__aeabi_dsub+0x354>
 80025d2:	2f00      	cmp	r7, #0
 80025d4:	d100      	bne.n	80025d8 <__aeabi_dsub+0x164>
 80025d6:	e08d      	b.n	80026f4 <__aeabi_dsub+0x280>
 80025d8:	4b78      	ldr	r3, [pc, #480]	; (80027bc <__aeabi_dsub+0x348>)
 80025da:	429d      	cmp	r5, r3
 80025dc:	d067      	beq.n	80026ae <__aeabi_dsub+0x23a>
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	4667      	mov	r7, ip
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	431f      	orrs	r7, r3
 80025e6:	46bc      	mov	ip, r7
 80025e8:	2e38      	cmp	r6, #56	; 0x38
 80025ea:	dc00      	bgt.n	80025ee <__aeabi_dsub+0x17a>
 80025ec:	e152      	b.n	8002894 <__aeabi_dsub+0x420>
 80025ee:	4663      	mov	r3, ip
 80025f0:	4313      	orrs	r3, r2
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	4193      	sbcs	r3, r2
 80025f6:	181e      	adds	r6, r3, r0
 80025f8:	4286      	cmp	r6, r0
 80025fa:	4180      	sbcs	r0, r0
 80025fc:	4240      	negs	r0, r0
 80025fe:	1809      	adds	r1, r1, r0
 8002600:	020b      	lsls	r3, r1, #8
 8002602:	d400      	bmi.n	8002606 <__aeabi_dsub+0x192>
 8002604:	e0be      	b.n	8002784 <__aeabi_dsub+0x310>
 8002606:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <__aeabi_dsub+0x348>)
 8002608:	3501      	adds	r5, #1
 800260a:	429d      	cmp	r5, r3
 800260c:	d100      	bne.n	8002610 <__aeabi_dsub+0x19c>
 800260e:	e0d2      	b.n	80027b6 <__aeabi_dsub+0x342>
 8002610:	4a6b      	ldr	r2, [pc, #428]	; (80027c0 <__aeabi_dsub+0x34c>)
 8002612:	0873      	lsrs	r3, r6, #1
 8002614:	400a      	ands	r2, r1
 8002616:	2101      	movs	r1, #1
 8002618:	400e      	ands	r6, r1
 800261a:	431e      	orrs	r6, r3
 800261c:	0851      	lsrs	r1, r2, #1
 800261e:	07d3      	lsls	r3, r2, #31
 8002620:	2207      	movs	r2, #7
 8002622:	431e      	orrs	r6, r3
 8002624:	4032      	ands	r2, r6
 8002626:	e795      	b.n	8002554 <__aeabi_dsub+0xe0>
 8002628:	001e      	movs	r6, r3
 800262a:	4316      	orrs	r6, r2
 800262c:	d000      	beq.n	8002630 <__aeabi_dsub+0x1bc>
 800262e:	e745      	b.n	80024bc <__aeabi_dsub+0x48>
 8002630:	e740      	b.n	80024b4 <__aeabi_dsub+0x40>
 8002632:	4b62      	ldr	r3, [pc, #392]	; (80027bc <__aeabi_dsub+0x348>)
 8002634:	429d      	cmp	r5, r3
 8002636:	d03a      	beq.n	80026ae <__aeabi_dsub+0x23a>
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	4667      	mov	r7, ip
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431f      	orrs	r7, r3
 8002640:	46bc      	mov	ip, r7
 8002642:	2e38      	cmp	r6, #56	; 0x38
 8002644:	dd00      	ble.n	8002648 <__aeabi_dsub+0x1d4>
 8002646:	e0eb      	b.n	8002820 <__aeabi_dsub+0x3ac>
 8002648:	2e1f      	cmp	r6, #31
 800264a:	dc00      	bgt.n	800264e <__aeabi_dsub+0x1da>
 800264c:	e13a      	b.n	80028c4 <__aeabi_dsub+0x450>
 800264e:	0033      	movs	r3, r6
 8002650:	4667      	mov	r7, ip
 8002652:	3b20      	subs	r3, #32
 8002654:	40df      	lsrs	r7, r3
 8002656:	003b      	movs	r3, r7
 8002658:	2e20      	cmp	r6, #32
 800265a:	d005      	beq.n	8002668 <__aeabi_dsub+0x1f4>
 800265c:	2740      	movs	r7, #64	; 0x40
 800265e:	1bbf      	subs	r7, r7, r6
 8002660:	4666      	mov	r6, ip
 8002662:	40be      	lsls	r6, r7
 8002664:	4332      	orrs	r2, r6
 8002666:	4690      	mov	r8, r2
 8002668:	4646      	mov	r6, r8
 800266a:	1e72      	subs	r2, r6, #1
 800266c:	4196      	sbcs	r6, r2
 800266e:	4333      	orrs	r3, r6
 8002670:	e0da      	b.n	8002828 <__aeabi_dsub+0x3b4>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x204>
 8002676:	e214      	b.n	8002aa2 <__aeabi_dsub+0x62e>
 8002678:	4663      	mov	r3, ip
 800267a:	4313      	orrs	r3, r2
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x20c>
 800267e:	e168      	b.n	8002952 <__aeabi_dsub+0x4de>
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	074e      	lsls	r6, r1, #29
 8002684:	08c0      	lsrs	r0, r0, #3
 8002686:	08c9      	lsrs	r1, r1, #3
 8002688:	031b      	lsls	r3, r3, #12
 800268a:	4306      	orrs	r6, r0
 800268c:	4219      	tst	r1, r3
 800268e:	d008      	beq.n	80026a2 <__aeabi_dsub+0x22e>
 8002690:	4660      	mov	r0, ip
 8002692:	08c0      	lsrs	r0, r0, #3
 8002694:	4218      	tst	r0, r3
 8002696:	d104      	bne.n	80026a2 <__aeabi_dsub+0x22e>
 8002698:	4663      	mov	r3, ip
 800269a:	0001      	movs	r1, r0
 800269c:	08d2      	lsrs	r2, r2, #3
 800269e:	075e      	lsls	r6, r3, #29
 80026a0:	4316      	orrs	r6, r2
 80026a2:	00f3      	lsls	r3, r6, #3
 80026a4:	4699      	mov	r9, r3
 80026a6:	00c9      	lsls	r1, r1, #3
 80026a8:	0f72      	lsrs	r2, r6, #29
 80026aa:	4d44      	ldr	r5, [pc, #272]	; (80027bc <__aeabi_dsub+0x348>)
 80026ac:	4311      	orrs	r1, r2
 80026ae:	464b      	mov	r3, r9
 80026b0:	08de      	lsrs	r6, r3, #3
 80026b2:	4b42      	ldr	r3, [pc, #264]	; (80027bc <__aeabi_dsub+0x348>)
 80026b4:	074f      	lsls	r7, r1, #29
 80026b6:	4337      	orrs	r7, r6
 80026b8:	08ca      	lsrs	r2, r1, #3
 80026ba:	429d      	cmp	r5, r3
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x24c>
 80026be:	e06e      	b.n	800279e <__aeabi_dsub+0x32a>
 80026c0:	0312      	lsls	r2, r2, #12
 80026c2:	056d      	lsls	r5, r5, #21
 80026c4:	0b12      	lsrs	r2, r2, #12
 80026c6:	0d6d      	lsrs	r5, r5, #21
 80026c8:	2100      	movs	r1, #0
 80026ca:	0312      	lsls	r2, r2, #12
 80026cc:	0b13      	lsrs	r3, r2, #12
 80026ce:	0d0a      	lsrs	r2, r1, #20
 80026d0:	0512      	lsls	r2, r2, #20
 80026d2:	431a      	orrs	r2, r3
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <__aeabi_dsub+0x350>)
 80026d6:	052d      	lsls	r5, r5, #20
 80026d8:	4013      	ands	r3, r2
 80026da:	432b      	orrs	r3, r5
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	07e4      	lsls	r4, r4, #31
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	4323      	orrs	r3, r4
 80026e4:	0038      	movs	r0, r7
 80026e6:	0019      	movs	r1, r3
 80026e8:	bc3c      	pop	{r2, r3, r4, r5}
 80026ea:	4690      	mov	r8, r2
 80026ec:	4699      	mov	r9, r3
 80026ee:	46a2      	mov	sl, r4
 80026f0:	46ab      	mov	fp, r5
 80026f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f4:	4663      	mov	r3, ip
 80026f6:	4313      	orrs	r3, r2
 80026f8:	d011      	beq.n	800271e <__aeabi_dsub+0x2aa>
 80026fa:	1e73      	subs	r3, r6, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d000      	beq.n	8002702 <__aeabi_dsub+0x28e>
 8002700:	e107      	b.n	8002912 <__aeabi_dsub+0x49e>
 8002702:	1886      	adds	r6, r0, r2
 8002704:	4286      	cmp	r6, r0
 8002706:	4180      	sbcs	r0, r0
 8002708:	4461      	add	r1, ip
 800270a:	4240      	negs	r0, r0
 800270c:	1809      	adds	r1, r1, r0
 800270e:	2501      	movs	r5, #1
 8002710:	020b      	lsls	r3, r1, #8
 8002712:	d537      	bpl.n	8002784 <__aeabi_dsub+0x310>
 8002714:	2502      	movs	r5, #2
 8002716:	e77b      	b.n	8002610 <__aeabi_dsub+0x19c>
 8002718:	003e      	movs	r6, r7
 800271a:	4661      	mov	r1, ip
 800271c:	4691      	mov	r9, r2
 800271e:	0035      	movs	r5, r6
 8002720:	e7c5      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002722:	465c      	mov	r4, fp
 8002724:	2d00      	cmp	r5, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x2b6>
 8002728:	e0e1      	b.n	80028ee <__aeabi_dsub+0x47a>
 800272a:	000b      	movs	r3, r1
 800272c:	4303      	orrs	r3, r0
 800272e:	d0f3      	beq.n	8002718 <__aeabi_dsub+0x2a4>
 8002730:	1c73      	adds	r3, r6, #1
 8002732:	d100      	bne.n	8002736 <__aeabi_dsub+0x2c2>
 8002734:	e1ac      	b.n	8002a90 <__aeabi_dsub+0x61c>
 8002736:	4b21      	ldr	r3, [pc, #132]	; (80027bc <__aeabi_dsub+0x348>)
 8002738:	429f      	cmp	r7, r3
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x2ca>
 800273c:	e13a      	b.n	80029b4 <__aeabi_dsub+0x540>
 800273e:	43f3      	mvns	r3, r6
 8002740:	2b38      	cmp	r3, #56	; 0x38
 8002742:	dd00      	ble.n	8002746 <__aeabi_dsub+0x2d2>
 8002744:	e16f      	b.n	8002a26 <__aeabi_dsub+0x5b2>
 8002746:	2b1f      	cmp	r3, #31
 8002748:	dd00      	ble.n	800274c <__aeabi_dsub+0x2d8>
 800274a:	e18c      	b.n	8002a66 <__aeabi_dsub+0x5f2>
 800274c:	2520      	movs	r5, #32
 800274e:	000e      	movs	r6, r1
 8002750:	1aed      	subs	r5, r5, r3
 8002752:	40ae      	lsls	r6, r5
 8002754:	46b0      	mov	r8, r6
 8002756:	0006      	movs	r6, r0
 8002758:	46aa      	mov	sl, r5
 800275a:	40de      	lsrs	r6, r3
 800275c:	4645      	mov	r5, r8
 800275e:	4335      	orrs	r5, r6
 8002760:	002e      	movs	r6, r5
 8002762:	4655      	mov	r5, sl
 8002764:	40d9      	lsrs	r1, r3
 8002766:	40a8      	lsls	r0, r5
 8002768:	4663      	mov	r3, ip
 800276a:	1e45      	subs	r5, r0, #1
 800276c:	41a8      	sbcs	r0, r5
 800276e:	1a5b      	subs	r3, r3, r1
 8002770:	469c      	mov	ip, r3
 8002772:	4330      	orrs	r0, r6
 8002774:	1a16      	subs	r6, r2, r0
 8002776:	42b2      	cmp	r2, r6
 8002778:	4192      	sbcs	r2, r2
 800277a:	4663      	mov	r3, ip
 800277c:	4252      	negs	r2, r2
 800277e:	1a99      	subs	r1, r3, r2
 8002780:	003d      	movs	r5, r7
 8002782:	e6b4      	b.n	80024ee <__aeabi_dsub+0x7a>
 8002784:	2207      	movs	r2, #7
 8002786:	4032      	ands	r2, r6
 8002788:	2a00      	cmp	r2, #0
 800278a:	d000      	beq.n	800278e <__aeabi_dsub+0x31a>
 800278c:	e6e4      	b.n	8002558 <__aeabi_dsub+0xe4>
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <__aeabi_dsub+0x348>)
 8002790:	08f6      	lsrs	r6, r6, #3
 8002792:	074f      	lsls	r7, r1, #29
 8002794:	4337      	orrs	r7, r6
 8002796:	08ca      	lsrs	r2, r1, #3
 8002798:	429d      	cmp	r5, r3
 800279a:	d000      	beq.n	800279e <__aeabi_dsub+0x32a>
 800279c:	e790      	b.n	80026c0 <__aeabi_dsub+0x24c>
 800279e:	003b      	movs	r3, r7
 80027a0:	4313      	orrs	r3, r2
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dsub+0x332>
 80027a4:	e1a6      	b.n	8002af4 <__aeabi_dsub+0x680>
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	431a      	orrs	r2, r3
 80027ac:	0312      	lsls	r2, r2, #12
 80027ae:	0b12      	lsrs	r2, r2, #12
 80027b0:	4d02      	ldr	r5, [pc, #8]	; (80027bc <__aeabi_dsub+0x348>)
 80027b2:	e789      	b.n	80026c8 <__aeabi_dsub+0x254>
 80027b4:	0015      	movs	r5, r2
 80027b6:	2200      	movs	r2, #0
 80027b8:	2700      	movs	r7, #0
 80027ba:	e785      	b.n	80026c8 <__aeabi_dsub+0x254>
 80027bc:	000007ff 	.word	0x000007ff
 80027c0:	ff7fffff 	.word	0xff7fffff
 80027c4:	800fffff 	.word	0x800fffff
 80027c8:	2e00      	cmp	r6, #0
 80027ca:	d000      	beq.n	80027ce <__aeabi_dsub+0x35a>
 80027cc:	e0c7      	b.n	800295e <__aeabi_dsub+0x4ea>
 80027ce:	1c6b      	adds	r3, r5, #1
 80027d0:	055e      	lsls	r6, r3, #21
 80027d2:	0d76      	lsrs	r6, r6, #21
 80027d4:	2e01      	cmp	r6, #1
 80027d6:	dc00      	bgt.n	80027da <__aeabi_dsub+0x366>
 80027d8:	e0f0      	b.n	80029bc <__aeabi_dsub+0x548>
 80027da:	4dc8      	ldr	r5, [pc, #800]	; (8002afc <__aeabi_dsub+0x688>)
 80027dc:	42ab      	cmp	r3, r5
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x36e>
 80027e0:	e0b9      	b.n	8002956 <__aeabi_dsub+0x4e2>
 80027e2:	1885      	adds	r5, r0, r2
 80027e4:	000a      	movs	r2, r1
 80027e6:	4285      	cmp	r5, r0
 80027e8:	4189      	sbcs	r1, r1
 80027ea:	4462      	add	r2, ip
 80027ec:	4249      	negs	r1, r1
 80027ee:	1851      	adds	r1, r2, r1
 80027f0:	2207      	movs	r2, #7
 80027f2:	07ce      	lsls	r6, r1, #31
 80027f4:	086d      	lsrs	r5, r5, #1
 80027f6:	432e      	orrs	r6, r5
 80027f8:	0849      	lsrs	r1, r1, #1
 80027fa:	4032      	ands	r2, r6
 80027fc:	001d      	movs	r5, r3
 80027fe:	e6a9      	b.n	8002554 <__aeabi_dsub+0xe0>
 8002800:	49bf      	ldr	r1, [pc, #764]	; (8002b00 <__aeabi_dsub+0x68c>)
 8002802:	1aed      	subs	r5, r5, r3
 8002804:	4011      	ands	r1, r2
 8002806:	2207      	movs	r2, #7
 8002808:	4032      	ands	r2, r6
 800280a:	e6a3      	b.n	8002554 <__aeabi_dsub+0xe0>
 800280c:	0032      	movs	r2, r6
 800280e:	3828      	subs	r0, #40	; 0x28
 8002810:	4082      	lsls	r2, r0
 8002812:	2600      	movs	r6, #0
 8002814:	e686      	b.n	8002524 <__aeabi_dsub+0xb0>
 8002816:	0030      	movs	r0, r6
 8002818:	f000 fb08 	bl	8002e2c <__clzsi2>
 800281c:	3020      	adds	r0, #32
 800281e:	e673      	b.n	8002508 <__aeabi_dsub+0x94>
 8002820:	4663      	mov	r3, ip
 8002822:	4313      	orrs	r3, r2
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	4193      	sbcs	r3, r2
 8002828:	1ac6      	subs	r6, r0, r3
 800282a:	42b0      	cmp	r0, r6
 800282c:	4180      	sbcs	r0, r0
 800282e:	4240      	negs	r0, r0
 8002830:	1a09      	subs	r1, r1, r0
 8002832:	e65c      	b.n	80024ee <__aeabi_dsub+0x7a>
 8002834:	000e      	movs	r6, r1
 8002836:	4667      	mov	r7, ip
 8002838:	4306      	orrs	r6, r0
 800283a:	4317      	orrs	r7, r2
 800283c:	2d00      	cmp	r5, #0
 800283e:	d15e      	bne.n	80028fe <__aeabi_dsub+0x48a>
 8002840:	2e00      	cmp	r6, #0
 8002842:	d000      	beq.n	8002846 <__aeabi_dsub+0x3d2>
 8002844:	e0f3      	b.n	8002a2e <__aeabi_dsub+0x5ba>
 8002846:	2f00      	cmp	r7, #0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x3d8>
 800284a:	e11e      	b.n	8002a8a <__aeabi_dsub+0x616>
 800284c:	465c      	mov	r4, fp
 800284e:	4661      	mov	r1, ip
 8002850:	4691      	mov	r9, r2
 8002852:	e72c      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002854:	4fa9      	ldr	r7, [pc, #676]	; (8002afc <__aeabi_dsub+0x688>)
 8002856:	42be      	cmp	r6, r7
 8002858:	d07b      	beq.n	8002952 <__aeabi_dsub+0x4de>
 800285a:	001e      	movs	r6, r3
 800285c:	e6f1      	b.n	8002642 <__aeabi_dsub+0x1ce>
 800285e:	0010      	movs	r0, r2
 8002860:	3d1f      	subs	r5, #31
 8002862:	40e8      	lsrs	r0, r5
 8002864:	2b20      	cmp	r3, #32
 8002866:	d003      	beq.n	8002870 <__aeabi_dsub+0x3fc>
 8002868:	2140      	movs	r1, #64	; 0x40
 800286a:	1acb      	subs	r3, r1, r3
 800286c:	409a      	lsls	r2, r3
 800286e:	4316      	orrs	r6, r2
 8002870:	1e73      	subs	r3, r6, #1
 8002872:	419e      	sbcs	r6, r3
 8002874:	2207      	movs	r2, #7
 8002876:	4306      	orrs	r6, r0
 8002878:	4032      	ands	r2, r6
 800287a:	2100      	movs	r1, #0
 800287c:	2500      	movs	r5, #0
 800287e:	e783      	b.n	8002788 <__aeabi_dsub+0x314>
 8002880:	1a16      	subs	r6, r2, r0
 8002882:	4663      	mov	r3, ip
 8002884:	42b2      	cmp	r2, r6
 8002886:	4180      	sbcs	r0, r0
 8002888:	1a59      	subs	r1, r3, r1
 800288a:	4240      	negs	r0, r0
 800288c:	1a0b      	subs	r3, r1, r0
 800288e:	4698      	mov	r8, r3
 8002890:	465c      	mov	r4, fp
 8002892:	e632      	b.n	80024fa <__aeabi_dsub+0x86>
 8002894:	2e1f      	cmp	r6, #31
 8002896:	dd00      	ble.n	800289a <__aeabi_dsub+0x426>
 8002898:	e0ab      	b.n	80029f2 <__aeabi_dsub+0x57e>
 800289a:	2720      	movs	r7, #32
 800289c:	1bbb      	subs	r3, r7, r6
 800289e:	469a      	mov	sl, r3
 80028a0:	4663      	mov	r3, ip
 80028a2:	4657      	mov	r7, sl
 80028a4:	40bb      	lsls	r3, r7
 80028a6:	4699      	mov	r9, r3
 80028a8:	0013      	movs	r3, r2
 80028aa:	464f      	mov	r7, r9
 80028ac:	40f3      	lsrs	r3, r6
 80028ae:	431f      	orrs	r7, r3
 80028b0:	003b      	movs	r3, r7
 80028b2:	4657      	mov	r7, sl
 80028b4:	40ba      	lsls	r2, r7
 80028b6:	1e57      	subs	r7, r2, #1
 80028b8:	41ba      	sbcs	r2, r7
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4662      	mov	r2, ip
 80028be:	40f2      	lsrs	r2, r6
 80028c0:	1889      	adds	r1, r1, r2
 80028c2:	e698      	b.n	80025f6 <__aeabi_dsub+0x182>
 80028c4:	2720      	movs	r7, #32
 80028c6:	1bbb      	subs	r3, r7, r6
 80028c8:	469a      	mov	sl, r3
 80028ca:	4663      	mov	r3, ip
 80028cc:	4657      	mov	r7, sl
 80028ce:	40bb      	lsls	r3, r7
 80028d0:	4699      	mov	r9, r3
 80028d2:	0013      	movs	r3, r2
 80028d4:	464f      	mov	r7, r9
 80028d6:	40f3      	lsrs	r3, r6
 80028d8:	431f      	orrs	r7, r3
 80028da:	003b      	movs	r3, r7
 80028dc:	4657      	mov	r7, sl
 80028de:	40ba      	lsls	r2, r7
 80028e0:	1e57      	subs	r7, r2, #1
 80028e2:	41ba      	sbcs	r2, r7
 80028e4:	4313      	orrs	r3, r2
 80028e6:	4662      	mov	r2, ip
 80028e8:	40f2      	lsrs	r2, r6
 80028ea:	1a89      	subs	r1, r1, r2
 80028ec:	e79c      	b.n	8002828 <__aeabi_dsub+0x3b4>
 80028ee:	4b83      	ldr	r3, [pc, #524]	; (8002afc <__aeabi_dsub+0x688>)
 80028f0:	429f      	cmp	r7, r3
 80028f2:	d05f      	beq.n	80029b4 <__aeabi_dsub+0x540>
 80028f4:	2580      	movs	r5, #128	; 0x80
 80028f6:	042d      	lsls	r5, r5, #16
 80028f8:	4273      	negs	r3, r6
 80028fa:	4329      	orrs	r1, r5
 80028fc:	e720      	b.n	8002740 <__aeabi_dsub+0x2cc>
 80028fe:	2e00      	cmp	r6, #0
 8002900:	d10c      	bne.n	800291c <__aeabi_dsub+0x4a8>
 8002902:	2f00      	cmp	r7, #0
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x494>
 8002906:	e0d0      	b.n	8002aaa <__aeabi_dsub+0x636>
 8002908:	465c      	mov	r4, fp
 800290a:	4661      	mov	r1, ip
 800290c:	4691      	mov	r9, r2
 800290e:	4d7b      	ldr	r5, [pc, #492]	; (8002afc <__aeabi_dsub+0x688>)
 8002910:	e6cd      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002912:	4f7a      	ldr	r7, [pc, #488]	; (8002afc <__aeabi_dsub+0x688>)
 8002914:	42be      	cmp	r6, r7
 8002916:	d01c      	beq.n	8002952 <__aeabi_dsub+0x4de>
 8002918:	001e      	movs	r6, r3
 800291a:	e665      	b.n	80025e8 <__aeabi_dsub+0x174>
 800291c:	2f00      	cmp	r7, #0
 800291e:	d018      	beq.n	8002952 <__aeabi_dsub+0x4de>
 8002920:	08c0      	lsrs	r0, r0, #3
 8002922:	074e      	lsls	r6, r1, #29
 8002924:	4306      	orrs	r6, r0
 8002926:	2080      	movs	r0, #128	; 0x80
 8002928:	08c9      	lsrs	r1, r1, #3
 800292a:	0300      	lsls	r0, r0, #12
 800292c:	4201      	tst	r1, r0
 800292e:	d008      	beq.n	8002942 <__aeabi_dsub+0x4ce>
 8002930:	4663      	mov	r3, ip
 8002932:	08dc      	lsrs	r4, r3, #3
 8002934:	4204      	tst	r4, r0
 8002936:	d104      	bne.n	8002942 <__aeabi_dsub+0x4ce>
 8002938:	0021      	movs	r1, r4
 800293a:	46da      	mov	sl, fp
 800293c:	08d2      	lsrs	r2, r2, #3
 800293e:	075e      	lsls	r6, r3, #29
 8002940:	4316      	orrs	r6, r2
 8002942:	00f3      	lsls	r3, r6, #3
 8002944:	4699      	mov	r9, r3
 8002946:	2401      	movs	r4, #1
 8002948:	4653      	mov	r3, sl
 800294a:	00c9      	lsls	r1, r1, #3
 800294c:	0f72      	lsrs	r2, r6, #29
 800294e:	4311      	orrs	r1, r2
 8002950:	401c      	ands	r4, r3
 8002952:	4d6a      	ldr	r5, [pc, #424]	; (8002afc <__aeabi_dsub+0x688>)
 8002954:	e6ab      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002956:	001d      	movs	r5, r3
 8002958:	2200      	movs	r2, #0
 800295a:	2700      	movs	r7, #0
 800295c:	e6b4      	b.n	80026c8 <__aeabi_dsub+0x254>
 800295e:	2d00      	cmp	r5, #0
 8002960:	d159      	bne.n	8002a16 <__aeabi_dsub+0x5a2>
 8002962:	000b      	movs	r3, r1
 8002964:	4303      	orrs	r3, r0
 8002966:	d100      	bne.n	800296a <__aeabi_dsub+0x4f6>
 8002968:	e6d6      	b.n	8002718 <__aeabi_dsub+0x2a4>
 800296a:	1c73      	adds	r3, r6, #1
 800296c:	d100      	bne.n	8002970 <__aeabi_dsub+0x4fc>
 800296e:	e0b2      	b.n	8002ad6 <__aeabi_dsub+0x662>
 8002970:	4b62      	ldr	r3, [pc, #392]	; (8002afc <__aeabi_dsub+0x688>)
 8002972:	429f      	cmp	r7, r3
 8002974:	d01e      	beq.n	80029b4 <__aeabi_dsub+0x540>
 8002976:	43f3      	mvns	r3, r6
 8002978:	2b38      	cmp	r3, #56	; 0x38
 800297a:	dc6f      	bgt.n	8002a5c <__aeabi_dsub+0x5e8>
 800297c:	2b1f      	cmp	r3, #31
 800297e:	dd00      	ble.n	8002982 <__aeabi_dsub+0x50e>
 8002980:	e097      	b.n	8002ab2 <__aeabi_dsub+0x63e>
 8002982:	2520      	movs	r5, #32
 8002984:	000e      	movs	r6, r1
 8002986:	1aed      	subs	r5, r5, r3
 8002988:	40ae      	lsls	r6, r5
 800298a:	46b0      	mov	r8, r6
 800298c:	0006      	movs	r6, r0
 800298e:	46aa      	mov	sl, r5
 8002990:	40de      	lsrs	r6, r3
 8002992:	4645      	mov	r5, r8
 8002994:	4335      	orrs	r5, r6
 8002996:	002e      	movs	r6, r5
 8002998:	4655      	mov	r5, sl
 800299a:	40a8      	lsls	r0, r5
 800299c:	40d9      	lsrs	r1, r3
 800299e:	1e45      	subs	r5, r0, #1
 80029a0:	41a8      	sbcs	r0, r5
 80029a2:	448c      	add	ip, r1
 80029a4:	4306      	orrs	r6, r0
 80029a6:	18b6      	adds	r6, r6, r2
 80029a8:	4296      	cmp	r6, r2
 80029aa:	4192      	sbcs	r2, r2
 80029ac:	4251      	negs	r1, r2
 80029ae:	4461      	add	r1, ip
 80029b0:	003d      	movs	r5, r7
 80029b2:	e625      	b.n	8002600 <__aeabi_dsub+0x18c>
 80029b4:	003d      	movs	r5, r7
 80029b6:	4661      	mov	r1, ip
 80029b8:	4691      	mov	r9, r2
 80029ba:	e678      	b.n	80026ae <__aeabi_dsub+0x23a>
 80029bc:	000b      	movs	r3, r1
 80029be:	4303      	orrs	r3, r0
 80029c0:	2d00      	cmp	r5, #0
 80029c2:	d000      	beq.n	80029c6 <__aeabi_dsub+0x552>
 80029c4:	e655      	b.n	8002672 <__aeabi_dsub+0x1fe>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f5      	beq.n	80029b6 <__aeabi_dsub+0x542>
 80029ca:	4663      	mov	r3, ip
 80029cc:	4313      	orrs	r3, r2
 80029ce:	d100      	bne.n	80029d2 <__aeabi_dsub+0x55e>
 80029d0:	e66d      	b.n	80026ae <__aeabi_dsub+0x23a>
 80029d2:	1886      	adds	r6, r0, r2
 80029d4:	4286      	cmp	r6, r0
 80029d6:	4180      	sbcs	r0, r0
 80029d8:	4461      	add	r1, ip
 80029da:	4240      	negs	r0, r0
 80029dc:	1809      	adds	r1, r1, r0
 80029de:	2200      	movs	r2, #0
 80029e0:	020b      	lsls	r3, r1, #8
 80029e2:	d400      	bmi.n	80029e6 <__aeabi_dsub+0x572>
 80029e4:	e6d0      	b.n	8002788 <__aeabi_dsub+0x314>
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <__aeabi_dsub+0x68c>)
 80029e8:	3501      	adds	r5, #1
 80029ea:	4019      	ands	r1, r3
 80029ec:	e5b2      	b.n	8002554 <__aeabi_dsub+0xe0>
 80029ee:	46b1      	mov	r9, r6
 80029f0:	e65d      	b.n	80026ae <__aeabi_dsub+0x23a>
 80029f2:	0033      	movs	r3, r6
 80029f4:	4667      	mov	r7, ip
 80029f6:	3b20      	subs	r3, #32
 80029f8:	40df      	lsrs	r7, r3
 80029fa:	003b      	movs	r3, r7
 80029fc:	2e20      	cmp	r6, #32
 80029fe:	d005      	beq.n	8002a0c <__aeabi_dsub+0x598>
 8002a00:	2740      	movs	r7, #64	; 0x40
 8002a02:	1bbf      	subs	r7, r7, r6
 8002a04:	4666      	mov	r6, ip
 8002a06:	40be      	lsls	r6, r7
 8002a08:	4332      	orrs	r2, r6
 8002a0a:	4690      	mov	r8, r2
 8002a0c:	4646      	mov	r6, r8
 8002a0e:	1e72      	subs	r2, r6, #1
 8002a10:	4196      	sbcs	r6, r2
 8002a12:	4333      	orrs	r3, r6
 8002a14:	e5ef      	b.n	80025f6 <__aeabi_dsub+0x182>
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <__aeabi_dsub+0x688>)
 8002a18:	429f      	cmp	r7, r3
 8002a1a:	d0cb      	beq.n	80029b4 <__aeabi_dsub+0x540>
 8002a1c:	2580      	movs	r5, #128	; 0x80
 8002a1e:	042d      	lsls	r5, r5, #16
 8002a20:	4273      	negs	r3, r6
 8002a22:	4329      	orrs	r1, r5
 8002a24:	e7a8      	b.n	8002978 <__aeabi_dsub+0x504>
 8002a26:	4308      	orrs	r0, r1
 8002a28:	1e41      	subs	r1, r0, #1
 8002a2a:	4188      	sbcs	r0, r1
 8002a2c:	e6a2      	b.n	8002774 <__aeabi_dsub+0x300>
 8002a2e:	2f00      	cmp	r7, #0
 8002a30:	d100      	bne.n	8002a34 <__aeabi_dsub+0x5c0>
 8002a32:	e63c      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002a34:	4663      	mov	r3, ip
 8002a36:	1a86      	subs	r6, r0, r2
 8002a38:	1acf      	subs	r7, r1, r3
 8002a3a:	42b0      	cmp	r0, r6
 8002a3c:	419b      	sbcs	r3, r3
 8002a3e:	425b      	negs	r3, r3
 8002a40:	1afb      	subs	r3, r7, r3
 8002a42:	4698      	mov	r8, r3
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	d54e      	bpl.n	8002ae6 <__aeabi_dsub+0x672>
 8002a48:	1a16      	subs	r6, r2, r0
 8002a4a:	4663      	mov	r3, ip
 8002a4c:	42b2      	cmp	r2, r6
 8002a4e:	4192      	sbcs	r2, r2
 8002a50:	1a59      	subs	r1, r3, r1
 8002a52:	4252      	negs	r2, r2
 8002a54:	1a89      	subs	r1, r1, r2
 8002a56:	465c      	mov	r4, fp
 8002a58:	2200      	movs	r2, #0
 8002a5a:	e57b      	b.n	8002554 <__aeabi_dsub+0xe0>
 8002a5c:	4301      	orrs	r1, r0
 8002a5e:	000e      	movs	r6, r1
 8002a60:	1e71      	subs	r1, r6, #1
 8002a62:	418e      	sbcs	r6, r1
 8002a64:	e79f      	b.n	80029a6 <__aeabi_dsub+0x532>
 8002a66:	001d      	movs	r5, r3
 8002a68:	000e      	movs	r6, r1
 8002a6a:	3d20      	subs	r5, #32
 8002a6c:	40ee      	lsrs	r6, r5
 8002a6e:	46b0      	mov	r8, r6
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d004      	beq.n	8002a7e <__aeabi_dsub+0x60a>
 8002a74:	2540      	movs	r5, #64	; 0x40
 8002a76:	1aeb      	subs	r3, r5, r3
 8002a78:	4099      	lsls	r1, r3
 8002a7a:	4308      	orrs	r0, r1
 8002a7c:	4681      	mov	r9, r0
 8002a7e:	4648      	mov	r0, r9
 8002a80:	4643      	mov	r3, r8
 8002a82:	1e41      	subs	r1, r0, #1
 8002a84:	4188      	sbcs	r0, r1
 8002a86:	4318      	orrs	r0, r3
 8002a88:	e674      	b.n	8002774 <__aeabi_dsub+0x300>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2400      	movs	r4, #0
 8002a8e:	e617      	b.n	80026c0 <__aeabi_dsub+0x24c>
 8002a90:	1a16      	subs	r6, r2, r0
 8002a92:	4663      	mov	r3, ip
 8002a94:	42b2      	cmp	r2, r6
 8002a96:	4192      	sbcs	r2, r2
 8002a98:	1a59      	subs	r1, r3, r1
 8002a9a:	4252      	negs	r2, r2
 8002a9c:	1a89      	subs	r1, r1, r2
 8002a9e:	003d      	movs	r5, r7
 8002aa0:	e525      	b.n	80024ee <__aeabi_dsub+0x7a>
 8002aa2:	4661      	mov	r1, ip
 8002aa4:	4691      	mov	r9, r2
 8002aa6:	4d15      	ldr	r5, [pc, #84]	; (8002afc <__aeabi_dsub+0x688>)
 8002aa8:	e601      	b.n	80026ae <__aeabi_dsub+0x23a>
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	2400      	movs	r4, #0
 8002aae:	0312      	lsls	r2, r2, #12
 8002ab0:	e679      	b.n	80027a6 <__aeabi_dsub+0x332>
 8002ab2:	001d      	movs	r5, r3
 8002ab4:	000e      	movs	r6, r1
 8002ab6:	3d20      	subs	r5, #32
 8002ab8:	40ee      	lsrs	r6, r5
 8002aba:	46b0      	mov	r8, r6
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d004      	beq.n	8002aca <__aeabi_dsub+0x656>
 8002ac0:	2540      	movs	r5, #64	; 0x40
 8002ac2:	1aeb      	subs	r3, r5, r3
 8002ac4:	4099      	lsls	r1, r3
 8002ac6:	4308      	orrs	r0, r1
 8002ac8:	4681      	mov	r9, r0
 8002aca:	464e      	mov	r6, r9
 8002acc:	4643      	mov	r3, r8
 8002ace:	1e71      	subs	r1, r6, #1
 8002ad0:	418e      	sbcs	r6, r1
 8002ad2:	431e      	orrs	r6, r3
 8002ad4:	e767      	b.n	80029a6 <__aeabi_dsub+0x532>
 8002ad6:	1886      	adds	r6, r0, r2
 8002ad8:	4296      	cmp	r6, r2
 8002ada:	419b      	sbcs	r3, r3
 8002adc:	4461      	add	r1, ip
 8002ade:	425b      	negs	r3, r3
 8002ae0:	18c9      	adds	r1, r1, r3
 8002ae2:	003d      	movs	r5, r7
 8002ae4:	e58c      	b.n	8002600 <__aeabi_dsub+0x18c>
 8002ae6:	4647      	mov	r7, r8
 8002ae8:	4337      	orrs	r7, r6
 8002aea:	d0ce      	beq.n	8002a8a <__aeabi_dsub+0x616>
 8002aec:	2207      	movs	r2, #7
 8002aee:	4641      	mov	r1, r8
 8002af0:	4032      	ands	r2, r6
 8002af2:	e649      	b.n	8002788 <__aeabi_dsub+0x314>
 8002af4:	2700      	movs	r7, #0
 8002af6:	003a      	movs	r2, r7
 8002af8:	e5e6      	b.n	80026c8 <__aeabi_dsub+0x254>
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	000007ff 	.word	0x000007ff
 8002b00:	ff7fffff 	.word	0xff7fffff

08002b04 <__aeabi_dcmpun>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4e0c      	ldr	r6, [pc, #48]	; (8002b38 <__aeabi_dcmpun+0x34>)
 8002b08:	030d      	lsls	r5, r1, #12
 8002b0a:	031c      	lsls	r4, r3, #12
 8002b0c:	0049      	lsls	r1, r1, #1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	0b2d      	lsrs	r5, r5, #12
 8002b12:	0d49      	lsrs	r1, r1, #21
 8002b14:	0b24      	lsrs	r4, r4, #12
 8002b16:	0d5b      	lsrs	r3, r3, #21
 8002b18:	42b1      	cmp	r1, r6
 8002b1a:	d008      	beq.n	8002b2e <__aeabi_dcmpun+0x2a>
 8002b1c:	4906      	ldr	r1, [pc, #24]	; (8002b38 <__aeabi_dcmpun+0x34>)
 8002b1e:	2000      	movs	r0, #0
 8002b20:	428b      	cmp	r3, r1
 8002b22:	d103      	bne.n	8002b2c <__aeabi_dcmpun+0x28>
 8002b24:	4314      	orrs	r4, r2
 8002b26:	0020      	movs	r0, r4
 8002b28:	1e44      	subs	r4, r0, #1
 8002b2a:	41a0      	sbcs	r0, r4
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
 8002b2e:	4305      	orrs	r5, r0
 8002b30:	2001      	movs	r0, #1
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	d1fa      	bne.n	8002b2c <__aeabi_dcmpun+0x28>
 8002b36:	e7f1      	b.n	8002b1c <__aeabi_dcmpun+0x18>
 8002b38:	000007ff 	.word	0x000007ff

08002b3c <__aeabi_d2iz>:
 8002b3c:	b530      	push	{r4, r5, lr}
 8002b3e:	4d14      	ldr	r5, [pc, #80]	; (8002b90 <__aeabi_d2iz+0x54>)
 8002b40:	030a      	lsls	r2, r1, #12
 8002b42:	004b      	lsls	r3, r1, #1
 8002b44:	0b12      	lsrs	r2, r2, #12
 8002b46:	0d5b      	lsrs	r3, r3, #21
 8002b48:	0fc9      	lsrs	r1, r1, #31
 8002b4a:	2400      	movs	r4, #0
 8002b4c:	42ab      	cmp	r3, r5
 8002b4e:	dd11      	ble.n	8002b74 <__aeabi_d2iz+0x38>
 8002b50:	4c10      	ldr	r4, [pc, #64]	; (8002b94 <__aeabi_d2iz+0x58>)
 8002b52:	42a3      	cmp	r3, r4
 8002b54:	dc10      	bgt.n	8002b78 <__aeabi_d2iz+0x3c>
 8002b56:	2480      	movs	r4, #128	; 0x80
 8002b58:	0364      	lsls	r4, r4, #13
 8002b5a:	4322      	orrs	r2, r4
 8002b5c:	4c0e      	ldr	r4, [pc, #56]	; (8002b98 <__aeabi_d2iz+0x5c>)
 8002b5e:	1ae4      	subs	r4, r4, r3
 8002b60:	2c1f      	cmp	r4, #31
 8002b62:	dd0c      	ble.n	8002b7e <__aeabi_d2iz+0x42>
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <__aeabi_d2iz+0x60>)
 8002b66:	1ac3      	subs	r3, r0, r3
 8002b68:	40da      	lsrs	r2, r3
 8002b6a:	0013      	movs	r3, r2
 8002b6c:	425c      	negs	r4, r3
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	d100      	bne.n	8002b74 <__aeabi_d2iz+0x38>
 8002b72:	001c      	movs	r4, r3
 8002b74:	0020      	movs	r0, r4
 8002b76:	bd30      	pop	{r4, r5, pc}
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <__aeabi_d2iz+0x64>)
 8002b7a:	18cc      	adds	r4, r1, r3
 8002b7c:	e7fa      	b.n	8002b74 <__aeabi_d2iz+0x38>
 8002b7e:	4d09      	ldr	r5, [pc, #36]	; (8002ba4 <__aeabi_d2iz+0x68>)
 8002b80:	40e0      	lsrs	r0, r4
 8002b82:	46ac      	mov	ip, r5
 8002b84:	4463      	add	r3, ip
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	4303      	orrs	r3, r0
 8002b8c:	e7ee      	b.n	8002b6c <__aeabi_d2iz+0x30>
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	000003fe 	.word	0x000003fe
 8002b94:	0000041d 	.word	0x0000041d
 8002b98:	00000433 	.word	0x00000433
 8002b9c:	00000413 	.word	0x00000413
 8002ba0:	7fffffff 	.word	0x7fffffff
 8002ba4:	fffffbed 	.word	0xfffffbed

08002ba8 <__aeabi_i2d>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d02d      	beq.n	8002c0a <__aeabi_i2d+0x62>
 8002bae:	17c3      	asrs	r3, r0, #31
 8002bb0:	18c5      	adds	r5, r0, r3
 8002bb2:	405d      	eors	r5, r3
 8002bb4:	0fc4      	lsrs	r4, r0, #31
 8002bb6:	0028      	movs	r0, r5
 8002bb8:	f000 f938 	bl	8002e2c <__clzsi2>
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <__aeabi_i2d+0x6c>)
 8002bbe:	1a1b      	subs	r3, r3, r0
 8002bc0:	055b      	lsls	r3, r3, #21
 8002bc2:	0d5b      	lsrs	r3, r3, #21
 8002bc4:	280a      	cmp	r0, #10
 8002bc6:	dd15      	ble.n	8002bf4 <__aeabi_i2d+0x4c>
 8002bc8:	380b      	subs	r0, #11
 8002bca:	4085      	lsls	r5, r0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	032d      	lsls	r5, r5, #12
 8002bd0:	0b2d      	lsrs	r5, r5, #12
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	0010      	movs	r0, r2
 8002bd6:	032d      	lsls	r5, r5, #12
 8002bd8:	0d0a      	lsrs	r2, r1, #20
 8002bda:	0b2d      	lsrs	r5, r5, #12
 8002bdc:	0512      	lsls	r2, r2, #20
 8002bde:	432a      	orrs	r2, r5
 8002be0:	4d0d      	ldr	r5, [pc, #52]	; (8002c18 <__aeabi_i2d+0x70>)
 8002be2:	051b      	lsls	r3, r3, #20
 8002be4:	402a      	ands	r2, r5
 8002be6:	4313      	orrs	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	07e4      	lsls	r4, r4, #31
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	4323      	orrs	r3, r4
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	0029      	movs	r1, r5
 8002bf8:	3215      	adds	r2, #21
 8002bfa:	4091      	lsls	r1, r2
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	210b      	movs	r1, #11
 8002c00:	1a08      	subs	r0, r1, r0
 8002c02:	40c5      	lsrs	r5, r0
 8002c04:	032d      	lsls	r5, r5, #12
 8002c06:	0b2d      	lsrs	r5, r5, #12
 8002c08:	e7e3      	b.n	8002bd2 <__aeabi_i2d+0x2a>
 8002c0a:	2400      	movs	r4, #0
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2500      	movs	r5, #0
 8002c10:	2200      	movs	r2, #0
 8002c12:	e7de      	b.n	8002bd2 <__aeabi_i2d+0x2a>
 8002c14:	0000041e 	.word	0x0000041e
 8002c18:	800fffff 	.word	0x800fffff

08002c1c <__aeabi_ui2d>:
 8002c1c:	b510      	push	{r4, lr}
 8002c1e:	1e04      	subs	r4, r0, #0
 8002c20:	d025      	beq.n	8002c6e <__aeabi_ui2d+0x52>
 8002c22:	f000 f903 	bl	8002e2c <__clzsi2>
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <__aeabi_ui2d+0x5c>)
 8002c28:	1a1b      	subs	r3, r3, r0
 8002c2a:	055b      	lsls	r3, r3, #21
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	280a      	cmp	r0, #10
 8002c30:	dd12      	ble.n	8002c58 <__aeabi_ui2d+0x3c>
 8002c32:	380b      	subs	r0, #11
 8002c34:	4084      	lsls	r4, r0
 8002c36:	2200      	movs	r2, #0
 8002c38:	0324      	lsls	r4, r4, #12
 8002c3a:	0b24      	lsrs	r4, r4, #12
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	0010      	movs	r0, r2
 8002c40:	0324      	lsls	r4, r4, #12
 8002c42:	0d0a      	lsrs	r2, r1, #20
 8002c44:	0b24      	lsrs	r4, r4, #12
 8002c46:	0512      	lsls	r2, r2, #20
 8002c48:	4322      	orrs	r2, r4
 8002c4a:	4c0c      	ldr	r4, [pc, #48]	; (8002c7c <__aeabi_ui2d+0x60>)
 8002c4c:	051b      	lsls	r3, r3, #20
 8002c4e:	4022      	ands	r2, r4
 8002c50:	4313      	orrs	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	0859      	lsrs	r1, r3, #1
 8002c56:	bd10      	pop	{r4, pc}
 8002c58:	0002      	movs	r2, r0
 8002c5a:	0021      	movs	r1, r4
 8002c5c:	3215      	adds	r2, #21
 8002c5e:	4091      	lsls	r1, r2
 8002c60:	000a      	movs	r2, r1
 8002c62:	210b      	movs	r1, #11
 8002c64:	1a08      	subs	r0, r1, r0
 8002c66:	40c4      	lsrs	r4, r0
 8002c68:	0324      	lsls	r4, r4, #12
 8002c6a:	0b24      	lsrs	r4, r4, #12
 8002c6c:	e7e6      	b.n	8002c3c <__aeabi_ui2d+0x20>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2400      	movs	r4, #0
 8002c72:	2200      	movs	r2, #0
 8002c74:	e7e2      	b.n	8002c3c <__aeabi_ui2d+0x20>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	0000041e 	.word	0x0000041e
 8002c7c:	800fffff 	.word	0x800fffff

08002c80 <__aeabi_f2d>:
 8002c80:	0041      	lsls	r1, r0, #1
 8002c82:	0e09      	lsrs	r1, r1, #24
 8002c84:	1c4b      	adds	r3, r1, #1
 8002c86:	b570      	push	{r4, r5, r6, lr}
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	0246      	lsls	r6, r0, #9
 8002c8c:	0a75      	lsrs	r5, r6, #9
 8002c8e:	0fc4      	lsrs	r4, r0, #31
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	dd14      	ble.n	8002cbe <__aeabi_f2d+0x3e>
 8002c94:	23e0      	movs	r3, #224	; 0xe0
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	076d      	lsls	r5, r5, #29
 8002c9a:	0b36      	lsrs	r6, r6, #12
 8002c9c:	18cb      	adds	r3, r1, r3
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	0d0a      	lsrs	r2, r1, #20
 8002ca2:	0028      	movs	r0, r5
 8002ca4:	0512      	lsls	r2, r2, #20
 8002ca6:	4d1c      	ldr	r5, [pc, #112]	; (8002d18 <__aeabi_f2d+0x98>)
 8002ca8:	4332      	orrs	r2, r6
 8002caa:	055b      	lsls	r3, r3, #21
 8002cac:	402a      	ands	r2, r5
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	07e4      	lsls	r4, r4, #31
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	4323      	orrs	r3, r4
 8002cba:	0019      	movs	r1, r3
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	2900      	cmp	r1, #0
 8002cc0:	d114      	bne.n	8002cec <__aeabi_f2d+0x6c>
 8002cc2:	2d00      	cmp	r5, #0
 8002cc4:	d01e      	beq.n	8002d04 <__aeabi_f2d+0x84>
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f000 f8b0 	bl	8002e2c <__clzsi2>
 8002ccc:	280a      	cmp	r0, #10
 8002cce:	dc1c      	bgt.n	8002d0a <__aeabi_f2d+0x8a>
 8002cd0:	230b      	movs	r3, #11
 8002cd2:	002a      	movs	r2, r5
 8002cd4:	1a1b      	subs	r3, r3, r0
 8002cd6:	40da      	lsrs	r2, r3
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3315      	adds	r3, #21
 8002cdc:	409d      	lsls	r5, r3
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <__aeabi_f2d+0x9c>)
 8002ce0:	0312      	lsls	r2, r2, #12
 8002ce2:	1a1b      	subs	r3, r3, r0
 8002ce4:	055b      	lsls	r3, r3, #21
 8002ce6:	0b16      	lsrs	r6, r2, #12
 8002ce8:	0d5b      	lsrs	r3, r3, #21
 8002cea:	e7d8      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002cec:	2d00      	cmp	r5, #0
 8002cee:	d006      	beq.n	8002cfe <__aeabi_f2d+0x7e>
 8002cf0:	0b32      	lsrs	r2, r6, #12
 8002cf2:	2680      	movs	r6, #128	; 0x80
 8002cf4:	0336      	lsls	r6, r6, #12
 8002cf6:	076d      	lsls	r5, r5, #29
 8002cf8:	4316      	orrs	r6, r2
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <__aeabi_f2d+0xa0>)
 8002cfc:	e7cf      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <__aeabi_f2d+0xa0>)
 8002d00:	2600      	movs	r6, #0
 8002d02:	e7cc      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002d04:	2300      	movs	r3, #0
 8002d06:	2600      	movs	r6, #0
 8002d08:	e7c9      	b.n	8002c9e <__aeabi_f2d+0x1e>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	002a      	movs	r2, r5
 8002d0e:	3b0b      	subs	r3, #11
 8002d10:	409a      	lsls	r2, r3
 8002d12:	2500      	movs	r5, #0
 8002d14:	e7e3      	b.n	8002cde <__aeabi_f2d+0x5e>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	800fffff 	.word	0x800fffff
 8002d1c:	00000389 	.word	0x00000389
 8002d20:	000007ff 	.word	0x000007ff

08002d24 <__aeabi_d2f>:
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	004c      	lsls	r4, r1, #1
 8002d28:	0d64      	lsrs	r4, r4, #21
 8002d2a:	030b      	lsls	r3, r1, #12
 8002d2c:	1c62      	adds	r2, r4, #1
 8002d2e:	0a5b      	lsrs	r3, r3, #9
 8002d30:	0f46      	lsrs	r6, r0, #29
 8002d32:	0552      	lsls	r2, r2, #21
 8002d34:	0fc9      	lsrs	r1, r1, #31
 8002d36:	431e      	orrs	r6, r3
 8002d38:	00c5      	lsls	r5, r0, #3
 8002d3a:	0d52      	lsrs	r2, r2, #21
 8002d3c:	2a01      	cmp	r2, #1
 8002d3e:	dd29      	ble.n	8002d94 <__aeabi_d2f+0x70>
 8002d40:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <__aeabi_d2f+0xfc>)
 8002d42:	18e7      	adds	r7, r4, r3
 8002d44:	2ffe      	cmp	r7, #254	; 0xfe
 8002d46:	dc1c      	bgt.n	8002d82 <__aeabi_d2f+0x5e>
 8002d48:	2f00      	cmp	r7, #0
 8002d4a:	dd3b      	ble.n	8002dc4 <__aeabi_d2f+0xa0>
 8002d4c:	0180      	lsls	r0, r0, #6
 8002d4e:	1e43      	subs	r3, r0, #1
 8002d50:	4198      	sbcs	r0, r3
 8002d52:	2207      	movs	r2, #7
 8002d54:	00f3      	lsls	r3, r6, #3
 8002d56:	0f6d      	lsrs	r5, r5, #29
 8002d58:	4303      	orrs	r3, r0
 8002d5a:	432b      	orrs	r3, r5
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d004      	beq.n	8002d6c <__aeabi_d2f+0x48>
 8002d62:	220f      	movs	r2, #15
 8002d64:	401a      	ands	r2, r3
 8002d66:	2a04      	cmp	r2, #4
 8002d68:	d000      	beq.n	8002d6c <__aeabi_d2f+0x48>
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	04d2      	lsls	r2, r2, #19
 8002d70:	401a      	ands	r2, r3
 8002d72:	d024      	beq.n	8002dbe <__aeabi_d2f+0x9a>
 8002d74:	3701      	adds	r7, #1
 8002d76:	b2fa      	uxtb	r2, r7
 8002d78:	2fff      	cmp	r7, #255	; 0xff
 8002d7a:	d002      	beq.n	8002d82 <__aeabi_d2f+0x5e>
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	0a58      	lsrs	r0, r3, #9
 8002d80:	e001      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	2000      	movs	r0, #0
 8002d86:	0240      	lsls	r0, r0, #9
 8002d88:	05d2      	lsls	r2, r2, #23
 8002d8a:	0a40      	lsrs	r0, r0, #9
 8002d8c:	07c9      	lsls	r1, r1, #31
 8002d8e:	4310      	orrs	r0, r2
 8002d90:	4308      	orrs	r0, r1
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	4335      	orrs	r5, r6
 8002d96:	2c00      	cmp	r4, #0
 8002d98:	d104      	bne.n	8002da4 <__aeabi_d2f+0x80>
 8002d9a:	2d00      	cmp	r5, #0
 8002d9c:	d10a      	bne.n	8002db4 <__aeabi_d2f+0x90>
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2000      	movs	r0, #0
 8002da2:	e7f0      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d0ec      	beq.n	8002d82 <__aeabi_d2f+0x5e>
 8002da8:	2080      	movs	r0, #128	; 0x80
 8002daa:	03c0      	lsls	r0, r0, #15
 8002dac:	4330      	orrs	r0, r6
 8002dae:	22ff      	movs	r2, #255	; 0xff
 8002db0:	e7e9      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002db2:	2400      	movs	r4, #0
 8002db4:	2300      	movs	r3, #0
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	0a58      	lsrs	r0, r3, #9
 8002dba:	b2e2      	uxtb	r2, r4
 8002dbc:	e7e3      	b.n	8002d86 <__aeabi_d2f+0x62>
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	003c      	movs	r4, r7
 8002dc2:	e7f8      	b.n	8002db6 <__aeabi_d2f+0x92>
 8002dc4:	003b      	movs	r3, r7
 8002dc6:	3317      	adds	r3, #23
 8002dc8:	dbf3      	blt.n	8002db2 <__aeabi_d2f+0x8e>
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	4333      	orrs	r3, r6
 8002dd0:	261e      	movs	r6, #30
 8002dd2:	1bf6      	subs	r6, r6, r7
 8002dd4:	2e1f      	cmp	r6, #31
 8002dd6:	dd14      	ble.n	8002e02 <__aeabi_d2f+0xde>
 8002dd8:	2202      	movs	r2, #2
 8002dda:	4252      	negs	r2, r2
 8002ddc:	1bd7      	subs	r7, r2, r7
 8002dde:	001a      	movs	r2, r3
 8002de0:	40fa      	lsrs	r2, r7
 8002de2:	0017      	movs	r7, r2
 8002de4:	2e20      	cmp	r6, #32
 8002de6:	d004      	beq.n	8002df2 <__aeabi_d2f+0xce>
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <__aeabi_d2f+0x100>)
 8002dea:	4694      	mov	ip, r2
 8002dec:	4464      	add	r4, ip
 8002dee:	40a3      	lsls	r3, r4
 8002df0:	431d      	orrs	r5, r3
 8002df2:	002b      	movs	r3, r5
 8002df4:	1e5d      	subs	r5, r3, #1
 8002df6:	41ab      	sbcs	r3, r5
 8002df8:	2207      	movs	r2, #7
 8002dfa:	433b      	orrs	r3, r7
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	2700      	movs	r7, #0
 8002e00:	e7ad      	b.n	8002d5e <__aeabi_d2f+0x3a>
 8002e02:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <__aeabi_d2f+0x104>)
 8002e04:	0028      	movs	r0, r5
 8002e06:	18a2      	adds	r2, r4, r2
 8002e08:	4095      	lsls	r5, r2
 8002e0a:	4093      	lsls	r3, r2
 8002e0c:	1e6c      	subs	r4, r5, #1
 8002e0e:	41a5      	sbcs	r5, r4
 8002e10:	40f0      	lsrs	r0, r6
 8002e12:	2207      	movs	r2, #7
 8002e14:	432b      	orrs	r3, r5
 8002e16:	4303      	orrs	r3, r0
 8002e18:	401a      	ands	r2, r3
 8002e1a:	2700      	movs	r7, #0
 8002e1c:	e79f      	b.n	8002d5e <__aeabi_d2f+0x3a>
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	fffffc80 	.word	0xfffffc80
 8002e24:	fffffca2 	.word	0xfffffca2
 8002e28:	fffffc82 	.word	0xfffffc82

08002e2c <__clzsi2>:
 8002e2c:	211c      	movs	r1, #28
 8002e2e:	2301      	movs	r3, #1
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d301      	bcc.n	8002e3a <__clzsi2+0xe>
 8002e36:	0c00      	lsrs	r0, r0, #16
 8002e38:	3910      	subs	r1, #16
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d301      	bcc.n	8002e44 <__clzsi2+0x18>
 8002e40:	0a00      	lsrs	r0, r0, #8
 8002e42:	3908      	subs	r1, #8
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	4298      	cmp	r0, r3
 8002e48:	d301      	bcc.n	8002e4e <__clzsi2+0x22>
 8002e4a:	0900      	lsrs	r0, r0, #4
 8002e4c:	3904      	subs	r1, #4
 8002e4e:	a202      	add	r2, pc, #8	; (adr r2, 8002e58 <__clzsi2+0x2c>)
 8002e50:	5c10      	ldrb	r0, [r2, r0]
 8002e52:	1840      	adds	r0, r0, r1
 8002e54:	4770      	bx	lr
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	02020304 	.word	0x02020304
 8002e5c:	01010101 	.word	0x01010101
	...

08002e68 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e6a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <LoadROtopology+0x94>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002e72:	4a23      	ldr	r2, [pc, #140]	; (8002f00 <LoadROtopology+0x98>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d033      	beq.n	8002ee0 <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002e78:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002e7a:	d039      	beq.n	8002ef0 <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002e7c:	4921      	ldr	r1, [pc, #132]	; (8002f04 <LoadROtopology+0x9c>)
 8002e7e:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002e80:	4a21      	ldr	r2, [pc, #132]	; (8002f08 <LoadROtopology+0xa0>)
 8002e82:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <LoadROtopology+0x9c>)
 8002e86:	781e      	ldrb	r6, [r3, #0]
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d035      	beq.n	8002ef8 <LoadROtopology+0x90>
 8002e8c:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002e8e:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002e90:	466b      	mov	r3, sp
 8002e92:	1dd9      	adds	r1, r3, #7
 8002e94:	2300      	movs	r3, #0
 8002e96:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002e98:	4d1c      	ldr	r5, [pc, #112]	; (8002f0c <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002e9a:	4663      	mov	r3, ip
 8002e9c:	700b      	strb	r3, [r1, #0]
 8002e9e:	780b      	ldrb	r3, [r1, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b0a      	cmp	r3, #10
 8002ea4:	d815      	bhi.n	8002ed2 <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002ea6:	1e63      	subs	r3, r4, #1
 8002ea8:	0098      	lsls	r0, r3, #2
 8002eaa:	18c0      	adds	r0, r0, r3
 8002eac:	0040      	lsls	r0, r0, #1
 8002eae:	18c0      	adds	r0, r0, r3
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <LoadROtopology+0x94>)
 8002eb2:	18d7      	adds	r7, r2, r3
 8002eb4:	780b      	ldrb	r3, [r1, #0]
 8002eb6:	883f      	ldrh	r7, [r7, #0]
 8002eb8:	181b      	adds	r3, r3, r0
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002ebe:	3202      	adds	r2, #2
 8002ec0:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002ec2:	780b      	ldrb	r3, [r1, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	700b      	strb	r3, [r1, #0]
 8002eca:	780b      	ldrb	r3, [r1, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b0a      	cmp	r3, #10
 8002ed0:	d9ee      	bls.n	8002eb0 <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002ed2:	3401      	adds	r4, #1
 8002ed4:	b2e4      	uxtb	r4, r4
 8002ed6:	42b4      	cmp	r4, r6
 8002ed8:	d9df      	bls.n	8002e9a <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002eda:	2000      	movs	r0, #0
}
 8002edc:	b003      	add	sp, #12
 8002ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	; (8002f04 <LoadROtopology+0x9c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <LoadROtopology+0xa0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002eec:	20fa      	movs	r0, #250	; 0xfa
 8002eee:	e7f5      	b.n	8002edc <LoadROtopology+0x74>
			N =1;
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <LoadROtopology+0x9c>)
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	7011      	strb	r1, [r2, #0]
 8002ef6:	e7c3      	b.n	8002e80 <LoadROtopology+0x18>
	return result;
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e7ef      	b.n	8002edc <LoadROtopology+0x74>
 8002efc:	0801d800 	.word	0x0801d800
 8002f00:	0000ffff 	.word	0x0000ffff
 8002f04:	20000030 	.word	0x20000030
 8002f08:	20000806 	.word	0x20000806
 8002f0c:	200002b4 	.word	0x200002b4

08002f10 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002f12:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <LoadEEportsDir+0x40>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002f16:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f1c:	490d      	ldr	r1, [pc, #52]	; (8002f54 <LoadEEportsDir+0x44>)
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f009 f95e 	bl	800c1e0 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002f24:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002f26:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002f28:	4f09      	ldr	r7, [pc, #36]	; (8002f50 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f2a:	4e0a      	ldr	r6, [pc, #40]	; (8002f54 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002f2c:	3401      	adds	r4, #1
 8002f2e:	b2e4      	uxtb	r4, r4
 8002f30:	783b      	ldrb	r3, [r7, #0]
 8002f32:	42a3      	cmp	r3, r4
 8002f34:	d30a      	bcc.n	8002f4c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002f36:	1e61      	subs	r1, r4, #1
 8002f38:	0049      	lsls	r1, r1, #1
 8002f3a:	1989      	adds	r1, r1, r6
 8002f3c:	1c60      	adds	r0, r4, #1
 8002f3e:	f009 f94f 	bl	800c1e0 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002f42:	1ca3      	adds	r3, r4, #2
 8002f44:	2b1b      	cmp	r3, #27
 8002f46:	ddf1      	ble.n	8002f2c <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002f48:	250a      	movs	r5, #10
 8002f4a:	e7ef      	b.n	8002f2c <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f50:	20000030 	.word	0x20000030
 8002f54:	20006738 	.word	0x20006738

08002f58 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	46de      	mov	lr, fp
 8002f5c:	4657      	mov	r7, sl
 8002f5e:	464e      	mov	r6, r9
 8002f60:	4645      	mov	r5, r8
 8002f62:	b5e0      	push	{r5, r6, r7, lr}
 8002f64:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f66:	466b      	mov	r3, sp
 8002f68:	2200      	movs	r2, #0
 8002f6a:	80da      	strh	r2, [r3, #6]
 8002f6c:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f6e:	2700      	movs	r7, #0
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <LoadEEalias+0x7c>)
 8002f72:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002f74:	469b      	mov	fp, r3
 8002f76:	e00c      	b.n	8002f92 <LoadEEalias+0x3a>
 8002f78:	464b      	mov	r3, r9
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	444b      	add	r3, r9
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	445b      	add	r3, fp
 8002f82:	2200      	movs	r2, #0
 8002f84:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002f86:	3701      	adds	r7, #1
 8002f88:	b2ff      	uxtb	r7, r7
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <LoadEEalias+0x80>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	42bb      	cmp	r3, r7
 8002f90:	d317      	bcc.n	8002fc2 <LoadEEalias+0x6a>
 8002f92:	00bd      	lsls	r5, r7, #2
 8002f94:	19ed      	adds	r5, r5, r7
 8002f96:	006d      	lsls	r5, r5, #1
 8002f98:	4455      	add	r5, sl
 8002f9a:	1d63      	adds	r3, r4, #5
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002fa0:	466b      	mov	r3, sp
 8002fa2:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002fa4:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002fa6:	0031      	movs	r1, r6
 8002fa8:	0020      	movs	r0, r4
 8002faa:	f009 f919 	bl	800c1e0 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002fae:	8833      	ldrh	r3, [r6, #0]
 8002fb0:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	702b      	strb	r3, [r5, #0]
 8002fb6:	3401      	adds	r4, #1
 8002fb8:	b2a4      	uxth	r4, r4
 8002fba:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002fbc:	45a0      	cmp	r8, r4
 8002fbe:	d1f2      	bne.n	8002fa6 <LoadEEalias+0x4e>
 8002fc0:	e7da      	b.n	8002f78 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	b003      	add	sp, #12
 8002fc6:	bc3c      	pop	{r2, r3, r4, r5}
 8002fc8:	4690      	mov	r8, r2
 8002fca:	4699      	mov	r9, r3
 8002fcc:	46a2      	mov	sl, r4
 8002fce:	46ab      	mov	fp, r5
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	200006f8 	.word	0x200006f8
 8002fd8:	20000030 	.word	0x20000030

08002fdc <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fde:	46d6      	mov	lr, sl
 8002fe0:	464f      	mov	r7, r9
 8002fe2:	4646      	mov	r6, r8
 8002fe4:	b5c0      	push	{r6, r7, lr}
 8002fe6:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002fe8:	466b      	mov	r3, sp
 8002fea:	2200      	movs	r2, #0
 8002fec:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <LoadEEgroup+0x9c>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01d      	beq.n	8003032 <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002ff6:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ff8:	4e20      	ldr	r6, [pc, #128]	; (800307c <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002ffa:	4c1f      	ldr	r4, [pc, #124]	; (8003078 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002ffc:	b2e9      	uxtb	r1, r5
 8002ffe:	0049      	lsls	r1, r1, #1
 8003000:	1871      	adds	r1, r6, r1
 8003002:	0028      	movs	r0, r5
 8003004:	30cb      	adds	r0, #203	; 0xcb
 8003006:	b280      	uxth	r0, r0
 8003008:	f009 f8ea 	bl	800c1e0 <EE_ReadVariable>
		add++;
 800300c:	3501      	adds	r5, #1
 800300e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8003010:	7822      	ldrb	r2, [r4, #0]
 8003012:	b2eb      	uxtb	r3, r5
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f1      	bhi.n	8002ffc <LoadEEgroup+0x20>
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <LoadEEgroup+0xa4>)
 800301a:	4699      	mov	r9, r3
 800301c:	002c      	movs	r4, r5
 800301e:	3499      	adds	r4, #153	; 0x99
 8003020:	b2a4      	uxth	r4, r4
 8003022:	35cb      	adds	r5, #203	; 0xcb
 8003024:	b2ab      	uxth	r3, r5
 8003026:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8003028:	466b      	mov	r3, sp
 800302a:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 800302c:	2300      	movs	r3, #0
 800302e:	469a      	mov	sl, r3
 8003030:	e009      	b.n	8003046 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8003032:	2500      	movs	r5, #0
 8003034:	e7f0      	b.n	8003018 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8003036:	464b      	mov	r3, r9
 8003038:	4652      	mov	r2, sl
 800303a:	725a      	strb	r2, [r3, #9]
 800303c:	230a      	movs	r3, #10
 800303e:	469c      	mov	ip, r3
 8003040:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8003042:	4544      	cmp	r4, r8
 8003044:	d010      	beq.n	8003068 <LoadEEgroup+0x8c>
 8003046:	1d67      	adds	r7, r4, #5
 8003048:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 800304a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 800304c:	0031      	movs	r1, r6
 800304e:	0020      	movs	r0, r4
 8003050:	f009 f8c6 	bl	800c1e0 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8003054:	8833      	ldrh	r3, [r6, #0]
 8003056:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8003058:	0a1b      	lsrs	r3, r3, #8
 800305a:	702b      	strb	r3, [r5, #0]
 800305c:	3401      	adds	r4, #1
 800305e:	b2a4      	uxth	r4, r4
 8003060:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8003062:	42bc      	cmp	r4, r7
 8003064:	d1f2      	bne.n	800304c <LoadEEgroup+0x70>
 8003066:	e7e6      	b.n	8003036 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8003068:	2000      	movs	r0, #0
 800306a:	b002      	add	sp, #8
 800306c:	bc1c      	pop	{r2, r3, r4}
 800306e:	4690      	mov	r8, r2
 8003070:	4699      	mov	r9, r3
 8003072:	46a2      	mov	sl, r4
 8003074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	20000030 	.word	0x20000030
 800307c:	20000654 	.word	0x20000654
 8003080:	200005f0 	.word	0x200005f0

08003084 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8003088:	210e      	movs	r1, #14
 800308a:	4469      	add	r1, sp
 800308c:	2300      	movs	r3, #0
 800308e:	800b      	strh	r3, [r1, #0]
 8003090:	aa03      	add	r2, sp, #12
 8003092:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8003094:	20e4      	movs	r0, #228	; 0xe4
 8003096:	f009 f8a3 	bl	800c1e0 <EE_ReadVariable>
	uint8_t direction =0;
 800309a:	2600      	movs	r6, #0
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d102      	bne.n	80030a6 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 80030a0:	230e      	movs	r3, #14
 80030a2:	446b      	add	r3, sp
 80030a4:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 80030a6:	210e      	movs	r1, #14
 80030a8:	4469      	add	r1, sp
 80030aa:	20e5      	movs	r0, #229	; 0xe5
 80030ac:	f009 f898 	bl	800c1e0 <EE_ReadVariable>
 80030b0:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 80030b2:	a903      	add	r1, sp, #12
 80030b4:	20e6      	movs	r0, #230	; 0xe6
 80030b6:	f009 f893 	bl	800c1e0 <EE_ReadVariable>
	if(!status1 && !status2){
 80030ba:	4304      	orrs	r4, r0
 80030bc:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 80030be:	2500      	movs	r5, #0
	if(!status1 && !status2){
 80030c0:	2c00      	cmp	r4, #0
 80030c2:	d106      	bne.n	80030d2 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 80030c4:	230e      	movs	r3, #14
 80030c6:	446b      	add	r3, sp
 80030c8:	881d      	ldrh	r5, [r3, #0]
 80030ca:	042d      	lsls	r5, r5, #16
 80030cc:	ab03      	add	r3, sp, #12
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 80030d2:	210e      	movs	r1, #14
 80030d4:	4469      	add	r1, sp
 80030d6:	20e7      	movs	r0, #231	; 0xe7
 80030d8:	f009 f882 	bl	800c1e0 <EE_ReadVariable>
 80030dc:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 80030de:	a903      	add	r1, sp, #12
 80030e0:	20e8      	movs	r0, #232	; 0xe8
 80030e2:	f009 f87d 	bl	800c1e0 <EE_ReadVariable>
	if(!status1 && !status2){
 80030e6:	4320      	orrs	r0, r4
 80030e8:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 80030ea:	2400      	movs	r4, #0
	if(!status1 && !status2){
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d106      	bne.n	80030fe <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 80030f0:	230e      	movs	r3, #14
 80030f2:	446b      	add	r3, sp
 80030f4:	881c      	ldrh	r4, [r3, #0]
 80030f6:	0424      	lsls	r4, r4, #16
 80030f8:	ab03      	add	r3, sp, #12
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 80030fe:	210e      	movs	r1, #14
 8003100:	4469      	add	r1, sp
 8003102:	20e9      	movs	r0, #233	; 0xe9
 8003104:	f009 f86c 	bl	800c1e0 <EE_ReadVariable>
	if(!status1){
 8003108:	2800      	cmp	r0, #0
 800310a:	d107      	bne.n	800311c <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 800310c:	230e      	movs	r3, #14
 800310e:	446b      	add	r3, sp
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	0a19      	lsrs	r1, r3, #8
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <LoadEEstreams+0x134>)
 8003116:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <LoadEEstreams+0x138>)
 800311a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800311c:	210e      	movs	r1, #14
 800311e:	4469      	add	r1, sp
 8003120:	20ea      	movs	r0, #234	; 0xea
 8003122:	f009 f85d 	bl	800c1e0 <EE_ReadVariable>
	if(!status1){
 8003126:	2800      	cmp	r0, #0
 8003128:	d107      	bne.n	800313a <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 800312a:	230e      	movs	r3, #14
 800312c:	446b      	add	r3, sp
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	0a19      	lsrs	r1, r3, #8
 8003132:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <LoadEEstreams+0x13c>)
 8003134:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8003136:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <LoadEEstreams+0x140>)
 8003138:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 800313a:	210e      	movs	r1, #14
 800313c:	4469      	add	r1, sp
 800313e:	20eb      	movs	r0, #235	; 0xeb
 8003140:	f009 f84e 	bl	800c1e0 <EE_ReadVariable>
	if(!status1){
 8003144:	2800      	cmp	r0, #0
 8003146:	d107      	bne.n	8003158 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003148:	230e      	movs	r3, #14
 800314a:	446b      	add	r3, sp
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	0a19      	lsrs	r1, r3, #8
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <LoadEEstreams+0x144>)
 8003152:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <LoadEEstreams+0x148>)
 8003156:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <LoadEEstreams+0x134>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <LoadEEstreams+0xe4>
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <LoadEEstreams+0x138>)
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	2a00      	cmp	r2, #0
 8003166:	d112      	bne.n	800318e <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003168:	4b15      	ldr	r3, [pc, #84]	; (80031c0 <LoadEEstreams+0x13c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <LoadEEstreams+0xf4>
 8003170:	4a14      	ldr	r2, [pc, #80]	; (80031c4 <LoadEEstreams+0x140>)
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	2a00      	cmp	r2, #0
 8003176:	d111      	bne.n	800319c <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <LoadEEstreams+0x144>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <LoadEEstreams+0x104>
 8003180:	4a12      	ldr	r2, [pc, #72]	; (80031cc <LoadEEstreams+0x148>)
 8003182:	7812      	ldrb	r2, [r2, #0]
 8003184:	2a00      	cmp	r2, #0
 8003186:	d110      	bne.n	80031aa <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003188:	2000      	movs	r0, #0
 800318a:	b004      	add	sp, #16
 800318c:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800318e:	9200      	str	r2, [sp, #0]
 8003190:	0022      	movs	r2, r4
 8003192:	0029      	movs	r1, r5
 8003194:	0030      	movs	r0, r6
 8003196:	f004 fc87 	bl	8007aa8 <SetupDMAStreams>
 800319a:	e7e5      	b.n	8003168 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 800319c:	9200      	str	r2, [sp, #0]
 800319e:	0022      	movs	r2, r4
 80031a0:	0029      	movs	r1, r5
 80031a2:	0030      	movs	r0, r6
 80031a4:	f004 fc80 	bl	8007aa8 <SetupDMAStreams>
 80031a8:	e7e6      	b.n	8003178 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80031aa:	9200      	str	r2, [sp, #0]
 80031ac:	0022      	movs	r2, r4
 80031ae:	0029      	movs	r1, r5
 80031b0:	0030      	movs	r0, r6
 80031b2:	f004 fc79 	bl	8007aa8 <SetupDMAStreams>
 80031b6:	e7e7      	b.n	8003188 <LoadEEstreams+0x104>
 80031b8:	200008c2 	.word	0x200008c2
 80031bc:	200005ed 	.word	0x200005ed
 80031c0:	200008c3 	.word	0x200008c3
 80031c4:	200005ee 	.word	0x200005ee
 80031c8:	200008c4 	.word	0x200008c4
 80031cc:	200005ef 	.word	0x200005ef

080031d0 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 80031d0:	b510      	push	{r4, lr}
 80031d2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80031d4:	208a      	movs	r0, #138	; 0x8a
 80031d6:	466b      	mov	r3, sp
 80031d8:	1d99      	adds	r1, r3, #6
 80031da:	0040      	lsls	r0, r0, #1
 80031dc:	f009 f800 	bl	800c1e0 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d000      	beq.n	80031e6 <LoadEEparams+0x16>
 80031e4:	e075      	b.n	80032d2 <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 80031e6:	466b      	mov	r3, sp
 80031e8:	3306      	adds	r3, #6
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	4a55      	ldr	r2, [pc, #340]	; (8003344 <LoadEEparams+0x174>)
 80031ee:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80031f4:	208e      	movs	r0, #142	; 0x8e
 80031f6:	466b      	mov	r3, sp
 80031f8:	1d99      	adds	r1, r3, #6
 80031fa:	0040      	lsls	r0, r0, #1
 80031fc:	f008 fff0 	bl	800c1e0 <EE_ReadVariable>

	if(!status1){
 8003200:	2800      	cmp	r0, #0
 8003202:	d000      	beq.n	8003206 <LoadEEparams+0x36>
 8003204:	e06c      	b.n	80032e0 <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003206:	466b      	mov	r3, sp
 8003208:	3306      	adds	r3, #6
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	4a4d      	ldr	r2, [pc, #308]	; (8003344 <LoadEEparams+0x174>)
 800320e:	0bd9      	lsrs	r1, r3, #15
 8003210:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003212:	085b      	lsrs	r3, r3, #1
 8003214:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003216:	2016      	movs	r0, #22
 8003218:	466b      	mov	r3, sp
 800321a:	1d99      	adds	r1, r3, #6
 800321c:	30ff      	adds	r0, #255	; 0xff
 800321e:	f008 ffdf 	bl	800c1e0 <EE_ReadVariable>
	if(!status1)
 8003222:	2800      	cmp	r0, #0
 8003224:	d163      	bne.n	80032ee <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 8003226:	466b      	mov	r3, sp
 8003228:	88da      	ldrh	r2, [r3, #6]
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <LoadEEparams+0x178>)
 800322c:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800322e:	208b      	movs	r0, #139	; 0x8b
 8003230:	466b      	mov	r3, sp
 8003232:	1d99      	adds	r1, r3, #6
 8003234:	0040      	lsls	r0, r0, #1
 8003236:	f008 ffd3 	bl	800c1e0 <EE_ReadVariable>
	if(!status1)
 800323a:	2800      	cmp	r0, #0
 800323c:	d15c      	bne.n	80032f8 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 800323e:	466b      	mov	r3, sp
 8003240:	88da      	ldrh	r2, [r3, #6]
 8003242:	4b41      	ldr	r3, [pc, #260]	; (8003348 <LoadEEparams+0x178>)
 8003244:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003246:	2018      	movs	r0, #24
 8003248:	466b      	mov	r3, sp
 800324a:	1d99      	adds	r1, r3, #6
 800324c:	30ff      	adds	r0, #255	; 0xff
 800324e:	f008 ffc7 	bl	800c1e0 <EE_ReadVariable>
	if(!status1){
 8003252:	2800      	cmp	r0, #0
 8003254:	d155      	bne.n	8003302 <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003256:	466b      	mov	r3, sp
 8003258:	3306      	adds	r3, #6
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <LoadEEparams+0x178>)
 800325e:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003264:	208c      	movs	r0, #140	; 0x8c
 8003266:	466b      	mov	r3, sp
 8003268:	1d99      	adds	r1, r3, #6
 800326a:	0040      	lsls	r0, r0, #1
 800326c:	f008 ffb8 	bl	800c1e0 <EE_ReadVariable>
 8003270:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003272:	201a      	movs	r0, #26
 8003274:	a901      	add	r1, sp, #4
 8003276:	30ff      	adds	r0, #255	; 0xff
 8003278:	f008 ffb2 	bl	800c1e0 <EE_ReadVariable>
	if(!status1 && !status2){
 800327c:	4304      	orrs	r4, r0
 800327e:	b2a4      	uxth	r4, r4
 8003280:	2c00      	cmp	r4, #0
 8003282:	d145      	bne.n	8003310 <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003284:	ab01      	add	r3, sp, #4
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	041b      	lsls	r3, r3, #16
 800328a:	466a      	mov	r2, sp
 800328c:	3206      	adds	r2, #6
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	4a2d      	ldr	r2, [pc, #180]	; (8003348 <LoadEEparams+0x178>)
 8003294:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003296:	208d      	movs	r0, #141	; 0x8d
 8003298:	466b      	mov	r3, sp
 800329a:	1d99      	adds	r1, r3, #6
 800329c:	0040      	lsls	r0, r0, #1
 800329e:	f008 ff9f 	bl	800c1e0 <EE_ReadVariable>
	if(!status1){
 80032a2:	2800      	cmp	r0, #0
 80032a4:	d142      	bne.n	800332c <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 80032a6:	466b      	mov	r3, sp
 80032a8:	3306      	adds	r3, #6
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <LoadEEparams+0x178>)
 80032ae:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80032b4:	201c      	movs	r0, #28
 80032b6:	466b      	mov	r3, sp
 80032b8:	1d99      	adds	r1, r3, #6
 80032ba:	30ff      	adds	r0, #255	; 0xff
 80032bc:	f008 ff90 	bl	800c1e0 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d039      	beq.n	8003338 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 80032c4:	4b21      	ldr	r3, [pc, #132]	; (800334c <LoadEEparams+0x17c>)
 80032c6:	7e9a      	ldrb	r2, [r3, #26]
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <LoadEEparams+0x178>)
 80032ca:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 80032cc:	2000      	movs	r0, #0
 80032ce:	b002      	add	sp, #8
 80032d0:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <LoadEEparams+0x174>)
 80032d4:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <LoadEEparams+0x180>)
 80032d6:	7811      	ldrb	r1, [r2, #0]
 80032d8:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80032da:	7852      	ldrb	r2, [r2, #1]
 80032dc:	705a      	strb	r2, [r3, #1]
 80032de:	e789      	b.n	80031f4 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <LoadEEparams+0x174>)
 80032e2:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <LoadEEparams+0x180>)
 80032e4:	7911      	ldrb	r1, [r2, #4]
 80032e6:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80032e8:	88d2      	ldrh	r2, [r2, #6]
 80032ea:	80da      	strh	r2, [r3, #6]
 80032ec:	e793      	b.n	8003216 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <LoadEEparams+0x17c>)
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <LoadEEparams+0x178>)
 80032f4:	801a      	strh	r2, [r3, #0]
 80032f6:	e79a      	b.n	800322e <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <LoadEEparams+0x17c>)
 80032fa:	885a      	ldrh	r2, [r3, #2]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <LoadEEparams+0x178>)
 80032fe:	805a      	strh	r2, [r3, #2]
 8003300:	e7a1      	b.n	8003246 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <LoadEEparams+0x178>)
 8003304:	4a11      	ldr	r2, [pc, #68]	; (800334c <LoadEEparams+0x17c>)
 8003306:	7911      	ldrb	r1, [r2, #4]
 8003308:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800330a:	7952      	ldrb	r2, [r2, #5]
 800330c:	715a      	strb	r2, [r3, #5]
 800330e:	e7a9      	b.n	8003264 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <LoadEEparams+0x184>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <LoadEEparams+0x178>)
 800331a:	22e1      	movs	r2, #225	; 0xe1
 800331c:	0252      	lsls	r2, r2, #9
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	e7b9      	b.n	8003296 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <LoadEEparams+0x17c>)
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <LoadEEparams+0x178>)
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	e7b4      	b.n	8003296 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <LoadEEparams+0x178>)
 800332e:	2218      	movs	r2, #24
 8003330:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003332:	2200      	movs	r2, #0
 8003334:	731a      	strb	r2, [r3, #12]
 8003336:	e7bd      	b.n	80032b4 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 8003338:	466b      	mov	r3, sp
 800333a:	88da      	ldrh	r2, [r3, #6]
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <LoadEEparams+0x178>)
 800333e:	769a      	strb	r2, [r3, #26]
 8003340:	e7c4      	b.n	80032cc <LoadEEparams+0xfc>
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	200061f0 	.word	0x200061f0
 8003348:	20006270 	.word	0x20006270
 800334c:	20000014 	.word	0x20000014
 8003350:	2000000c 	.word	0x2000000c
 8003354:	200002af 	.word	0x200002af

08003358 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	46ce      	mov	lr, r9
 800335c:	4647      	mov	r7, r8
 800335e:	b580      	push	{r7, lr}
 8003360:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003362:	231e      	movs	r3, #30
 8003364:	446b      	add	r3, sp
 8003366:	2200      	movs	r2, #0
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	2501      	movs	r5, #1
 800336c:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800336e:	001e      	movs	r6, r3
 8003370:	230f      	movs	r3, #15
 8003372:	4698      	mov	r8, r3
 8003374:	e004      	b.n	8003380 <LoadEEbuttons+0x28>
 8003376:	3404      	adds	r4, #4
 8003378:	b2a4      	uxth	r4, r4
 800337a:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800337c:	2d05      	cmp	r5, #5
 800337e:	d058      	beq.n	8003432 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003380:	0031      	movs	r1, r6
 8003382:	0020      	movs	r0, r4
 8003384:	f008 ff2c 	bl	800c1e0 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003388:	2800      	cmp	r0, #0
 800338a:	d1f4      	bne.n	8003376 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 800338c:	8831      	ldrh	r1, [r6, #0]
 800338e:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003390:	091a      	lsrs	r2, r3, #4
 8003392:	42aa      	cmp	r2, r5
 8003394:	d1ef      	bne.n	8003376 <LoadEEbuttons+0x1e>
 8003396:	4640      	mov	r0, r8
 8003398:	4003      	ands	r3, r0
 800339a:	d0ec      	beq.n	8003376 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 800339c:	00d0      	lsls	r0, r2, #3
 800339e:	1882      	adds	r2, r0, r2
 80033a0:	4827      	ldr	r0, [pc, #156]	; (8003440 <LoadEEbuttons+0xe8>)
 80033a2:	4681      	mov	r9, r0
 80033a4:	4491      	add	r9, r2
 80033a6:	464a      	mov	r2, r9
 80033a8:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 80033aa:	7211      	strb	r1, [r2, #8]
 80033ac:	00af      	lsls	r7, r5, #2
 80033ae:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80033b0:	0038      	movs	r0, r7
 80033b2:	30e9      	adds	r0, #233	; 0xe9
 80033b4:	b280      	uxth	r0, r0
 80033b6:	0031      	movs	r1, r6
 80033b8:	f008 ff12 	bl	800c1e0 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80033bc:	8833      	ldrh	r3, [r6, #0]
 80033be:	0a1a      	lsrs	r2, r3, #8
 80033c0:	4649      	mov	r1, r9
 80033c2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80033c4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80033c6:	0038      	movs	r0, r7
 80033c8:	30ea      	adds	r0, #234	; 0xea
 80033ca:	b280      	uxth	r0, r0
 80033cc:	0031      	movs	r1, r6
 80033ce:	f008 ff07 	bl	800c1e0 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80033d2:	8833      	ldrh	r3, [r6, #0]
 80033d4:	0a1a      	lsrs	r2, r3, #8
 80033d6:	4649      	mov	r1, r9
 80033d8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80033da:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80033dc:	37eb      	adds	r7, #235	; 0xeb
 80033de:	b2b8      	uxth	r0, r7
 80033e0:	0031      	movs	r1, r6
 80033e2:	f008 fefd 	bl	800c1e0 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80033e6:	8833      	ldrh	r3, [r6, #0]
 80033e8:	0a1a      	lsrs	r2, r3, #8
 80033ea:	4649      	mov	r1, r9
 80033ec:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80033ee:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80033f0:	b2ef      	uxtb	r7, r5
 80033f2:	7848      	ldrb	r0, [r1, #1]
 80033f4:	0039      	movs	r1, r7
 80033f6:	f009 fb8d 	bl	800cb14 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80033fa:	464b      	mov	r3, r9
 80033fc:	7a19      	ldrb	r1, [r3, #8]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	104a      	asrs	r2, r1, #1
 8003402:	2001      	movs	r0, #1
 8003404:	4002      	ands	r2, r0
 8003406:	4001      	ands	r1, r0
 8003408:	2000      	movs	r0, #0
 800340a:	9005      	str	r0, [sp, #20]
 800340c:	4648      	mov	r0, r9
 800340e:	79c0      	ldrb	r0, [r0, #7]
 8003410:	9004      	str	r0, [sp, #16]
 8003412:	4648      	mov	r0, r9
 8003414:	7980      	ldrb	r0, [r0, #6]
 8003416:	9003      	str	r0, [sp, #12]
 8003418:	4648      	mov	r0, r9
 800341a:	7940      	ldrb	r0, [r0, #5]
 800341c:	9002      	str	r0, [sp, #8]
 800341e:	4648      	mov	r0, r9
 8003420:	7900      	ldrb	r0, [r0, #4]
 8003422:	9001      	str	r0, [sp, #4]
 8003424:	4648      	mov	r0, r9
 8003426:	78c0      	ldrb	r0, [r0, #3]
 8003428:	9000      	str	r0, [sp, #0]
 800342a:	0038      	movs	r0, r7
 800342c:	f009 fc8a 	bl	800cd44 <SetButtonEvents>
 8003430:	e7a1      	b.n	8003376 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 8003432:	2000      	movs	r0, #0
 8003434:	b009      	add	sp, #36	; 0x24
 8003436:	bc0c      	pop	{r2, r3}
 8003438:	4690      	mov	r8, r2
 800343a:	4699      	mov	r9, r3
 800343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20001350 	.word	0x20001350

08003444 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003446:	46de      	mov	lr, fp
 8003448:	4657      	mov	r7, sl
 800344a:	464e      	mov	r6, r9
 800344c:	b5c0      	push	{r6, r7, lr}
 800344e:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003450:	2032      	movs	r0, #50	; 0x32
 8003452:	f010 f9dd 	bl	8013810 <malloc>
 8003456:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003458:	d100      	bne.n	800345c <LoadROsnippets+0x18>
 800345a:	e071      	b.n	8003540 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800345c:	4b39      	ldr	r3, [pc, #228]	; (8003544 <LoadROsnippets+0x100>)
 800345e:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8003460:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003462:	2bfe      	cmp	r3, #254	; 0xfe
 8003464:	d166      	bne.n	8003534 <LoadROsnippets+0xf0>
 8003466:	4e38      	ldr	r6, [pc, #224]	; (8003548 <LoadROsnippets+0x104>)
 8003468:	3b9a      	subs	r3, #154	; 0x9a
 800346a:	469b      	mov	fp, r3
 800346c:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800346e:	4d35      	ldr	r5, [pc, #212]	; (8003544 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003470:	1c7b      	adds	r3, r7, #1
 8003472:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <LoadROsnippets+0x108>)
 8003476:	4699      	mov	r9, r3
 8003478:	e023      	b.n	80034c2 <LoadROsnippets+0x7e>
		i =0;
 800347a:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 800347c:	193b      	adds	r3, r7, r4
 800347e:	3b01      	subs	r3, #1
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8003486:	3401      	adds	r4, #1
 8003488:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 800348a:	0020      	movs	r0, r4
 800348c:	f010 f9c0 	bl	8013810 <malloc>
 8003490:	4653      	mov	r3, sl
 8003492:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003494:	2800      	cmp	r0, #0
 8003496:	d03f      	beq.n	8003518 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003498:	0022      	movs	r2, r4
 800349a:	0039      	movs	r1, r7
 800349c:	f010 f9ed 	bl	801387a <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80034a0:	464b      	mov	r3, r9
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	464a      	mov	r2, r9
 80034a8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80034aa:	0022      	movs	r2, r4
 80034ac:	2100      	movs	r1, #0
 80034ae:	0038      	movs	r0, r7
 80034b0:	f010 f9ec 	bl	801388c <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80034b4:	9b00      	ldr	r3, [sp, #0]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2bfe      	cmp	r3, #254	; 0xfe
 80034ba:	d137      	bne.n	800352c <LoadROsnippets+0xe8>
 80034bc:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80034be:	455e      	cmp	r6, fp
 80034c0:	d034      	beq.n	800352c <LoadROsnippets+0xe8>
 80034c2:	0028      	movs	r0, r5
 80034c4:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 80034c6:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80034c8:	1b79      	subs	r1, r7, r5
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	54ca      	strb	r2, [r1, r3]
 80034ce:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80034d0:	4283      	cmp	r3, r0
 80034d2:	d1fa      	bne.n	80034ca <LoadROsnippets+0x86>
 80034d4:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80034d6:	46b2      	mov	sl, r6
 80034d8:	2214      	movs	r2, #20
 80034da:	9901      	ldr	r1, [sp, #4]
 80034dc:	0030      	movs	r0, r6
 80034de:	f010 f9cc 	bl	801387a <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 80034e2:	2214      	movs	r2, #20
 80034e4:	2100      	movs	r1, #0
 80034e6:	0038      	movs	r0, r7
 80034e8:	f010 f9d0 	bl	801388c <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80034ec:	9500      	str	r5, [sp, #0]
 80034ee:	782a      	ldrb	r2, [r5, #0]
 80034f0:	1c93      	adds	r3, r2, #2
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d9c0      	bls.n	800347a <LoadROsnippets+0x36>
 80034f8:	0039      	movs	r1, r7
		i =0;
 80034fa:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80034fc:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 80034fe:	3501      	adds	r5, #1
			++i;
 8003500:	3401      	adds	r4, #1
 8003502:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003504:	9500      	str	r5, [sp, #0]
 8003506:	782a      	ldrb	r2, [r5, #0]
 8003508:	1c93      	adds	r3, r2, #2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d9b5      	bls.n	800347c <LoadROsnippets+0x38>
 8003510:	3101      	adds	r1, #1
 8003512:	2c32      	cmp	r4, #50	; 0x32
 8003514:	d1f2      	bne.n	80034fc <LoadROsnippets+0xb8>
 8003516:	e7b1      	b.n	800347c <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003518:	2214      	movs	r2, #20
 800351a:	2100      	movs	r1, #0
 800351c:	4650      	mov	r0, sl
 800351e:	f010 f9b5 	bl	801388c <memset>
			free(snipBuffer);
 8003522:	0038      	movs	r0, r7
 8003524:	f010 f97e 	bl	8013824 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003528:	200e      	movs	r0, #14
 800352a:	e003      	b.n	8003534 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 800352c:	0038      	movs	r0, r7
 800352e:	f010 f979 	bl	8013824 <free>
	return BOS_OK;
 8003532:	2000      	movs	r0, #0
}
 8003534:	b002      	add	sp, #8
 8003536:	bc1c      	pop	{r2, r3, r4}
 8003538:	4691      	mov	r9, r2
 800353a:	469a      	mov	sl, r3
 800353c:	46a3      	mov	fp, r4
 800353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003540:	20fb      	movs	r0, #251	; 0xfb
 8003542:	e7f7      	b.n	8003534 <LoadROsnippets+0xf0>
 8003544:	0801dc00 	.word	0x0801dc00
 8003548:	2000628c 	.word	0x2000628c
 800354c:	20000997 	.word	0x20000997

08003550 <LoadEEvars>:
void LoadEEvars(void){
 8003550:	b510      	push	{r4, lr}
	LoadROtopology();
 8003552:	f7ff fc89 	bl	8002e68 <LoadROtopology>
	LoadEEportsDir();
 8003556:	f7ff fcdb 	bl	8002f10 <LoadEEportsDir>
	LoadEEalias();
 800355a:	f7ff fcfd 	bl	8002f58 <LoadEEalias>
	LoadEEgroup();
 800355e:	f7ff fd3d 	bl	8002fdc <LoadEEgroup>
	LoadEEstreams();
 8003562:	f7ff fd8f 	bl	8003084 <LoadEEstreams>
	LoadEEparams();
 8003566:	f7ff fe33 	bl	80031d0 <LoadEEparams>
	LoadEEbuttons();
 800356a:	f7ff fef5 	bl	8003358 <LoadEEbuttons>
	LoadROsnippets();
 800356e:	f7ff ff69 	bl	8003444 <LoadROsnippets>
}
 8003572:	bd10      	pop	{r4, pc}

08003574 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <SaveEEportsDir+0x4c>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d01a      	beq.n	80035b6 <SaveEEportsDir+0x42>
 8003580:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003586:	4e0f      	ldr	r6, [pc, #60]	; (80035c4 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 8003588:	4f0d      	ldr	r7, [pc, #52]	; (80035c0 <SaveEEportsDir+0x4c>)
 800358a:	e008      	b.n	800359e <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800358c:	1c60      	adds	r0, r4, #1
 800358e:	f008 fe57 	bl	800c240 <EE_WriteVariable>
 8003592:	e00a      	b.n	80035aa <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003594:	3401      	adds	r4, #1
 8003596:	b2e4      	uxtb	r4, r4
 8003598:	783b      	ldrb	r3, [r7, #0]
 800359a:	42a3      	cmp	r3, r4
 800359c:	d30d      	bcc.n	80035ba <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 800359e:	0025      	movs	r5, r4
 80035a0:	1e63      	subs	r3, r4, #1
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	5b99      	ldrh	r1, [r3, r6]
 80035a6:	2900      	cmp	r1, #0
 80035a8:	d1f0      	bne.n	800358c <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80035aa:	3502      	adds	r5, #2
 80035ac:	2d1b      	cmp	r5, #27
 80035ae:	ddf1      	ble.n	8003594 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80035b0:	230a      	movs	r3, #10
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	e7ee      	b.n	8003594 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80035ba:	9801      	ldr	r0, [sp, #4]
 80035bc:	b003      	add	sp, #12
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c0:	20000030 	.word	0x20000030
 80035c4:	20006738 	.word	0x20006738

080035c8 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	46d6      	mov	lr, sl
 80035cc:	464f      	mov	r7, r9
 80035ce:	4646      	mov	r6, r8
 80035d0:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035d2:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 80035d8:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <SaveEEalias+0x7c>)
 80035da:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80035dc:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <SaveEEalias+0x80>)
 80035de:	4699      	mov	r9, r3
 80035e0:	e005      	b.n	80035ee <SaveEEalias+0x26>
 80035e2:	3601      	adds	r6, #1
 80035e4:	b2f6      	uxtb	r6, r6
 80035e6:	464b      	mov	r3, r9
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	42b3      	cmp	r3, r6
 80035ec:	d324      	bcc.n	8003638 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 80035ee:	00b3      	lsls	r3, r6, #2
 80035f0:	199b      	adds	r3, r3, r6
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4652      	mov	r2, sl
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f2      	beq.n	80035e2 <SaveEEalias+0x1a>
 80035fc:	00b5      	lsls	r5, r6, #2
 80035fe:	19ad      	adds	r5, r5, r6
 8003600:	006d      	lsls	r5, r5, #1
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <SaveEEalias+0x7c>)
 8003604:	469c      	mov	ip, r3
 8003606:	4465      	add	r5, ip
 8003608:	4644      	mov	r4, r8
 800360a:	341c      	adds	r4, #28
 800360c:	b2a4      	uxth	r4, r4
 800360e:	4647      	mov	r7, r8
 8003610:	3721      	adds	r7, #33	; 0x21
 8003612:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003614:	782b      	ldrb	r3, [r5, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	7869      	ldrb	r1, [r5, #1]
 800361a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800361c:	b289      	uxth	r1, r1
 800361e:	0020      	movs	r0, r4
 8003620:	f008 fe0e 	bl	800c240 <EE_WriteVariable>
 8003624:	3502      	adds	r5, #2
 8003626:	3401      	adds	r4, #1
 8003628:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800362a:	42bc      	cmp	r4, r7
 800362c:	d1f2      	bne.n	8003614 <SaveEEalias+0x4c>
 800362e:	4643      	mov	r3, r8
 8003630:	3305      	adds	r3, #5
 8003632:	b29b      	uxth	r3, r3
 8003634:	4698      	mov	r8, r3
 8003636:	e7d4      	b.n	80035e2 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 8003638:	2000      	movs	r0, #0
 800363a:	bc1c      	pop	{r2, r3, r4}
 800363c:	4690      	mov	r8, r2
 800363e:	4699      	mov	r9, r3
 8003640:	46a2      	mov	sl, r4
 8003642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003644:	200006f8 	.word	0x200006f8
 8003648:	20000030 	.word	0x20000030

0800364c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	46de      	mov	lr, fp
 8003650:	4657      	mov	r7, sl
 8003652:	464e      	mov	r6, r9
 8003654:	4645      	mov	r5, r8
 8003656:	b5e0      	push	{r5, r6, r7, lr}
 8003658:	000f      	movs	r7, r1
 800365a:	0016      	movs	r6, r2
 800365c:	4699      	mov	r9, r3
 800365e:	ab0a      	add	r3, sp, #40	; 0x28
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	469b      	mov	fp, r3
 8003664:	ab0b      	add	r3, sp, #44	; 0x2c
 8003666:	781d      	ldrb	r5, [r3, #0]
 8003668:	ab0c      	add	r3, sp, #48	; 0x30
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	469a      	mov	sl, r3
 800366e:	ab0d      	add	r3, sp, #52	; 0x34
 8003670:	781c      	ldrb	r4, [r3, #0]
 8003672:	ab0e      	add	r3, sp, #56	; 0x38
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003678:	b281      	uxth	r1, r0
 800367a:	20e4      	movs	r0, #228	; 0xe4
 800367c:	f008 fde0 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 8003680:	0a39      	lsrs	r1, r7, #8
 8003682:	b289      	uxth	r1, r1
 8003684:	20e5      	movs	r0, #229	; 0xe5
 8003686:	f008 fddb 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 800368a:	b2b9      	uxth	r1, r7
 800368c:	20e6      	movs	r0, #230	; 0xe6
 800368e:	f008 fdd7 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003692:	0a31      	lsrs	r1, r6, #8
 8003694:	b289      	uxth	r1, r1
 8003696:	20e7      	movs	r0, #231	; 0xe7
 8003698:	f008 fdd2 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800369c:	b2b1      	uxth	r1, r6
 800369e:	20e8      	movs	r0, #232	; 0xe8
 80036a0:	f008 fdce 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80036a4:	464b      	mov	r3, r9
 80036a6:	0219      	lsls	r1, r3, #8
 80036a8:	4459      	add	r1, fp
 80036aa:	b289      	uxth	r1, r1
 80036ac:	20e9      	movs	r0, #233	; 0xe9
 80036ae:	f008 fdc7 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80036b2:	022d      	lsls	r5, r5, #8
 80036b4:	4455      	add	r5, sl
 80036b6:	b2a9      	uxth	r1, r5
 80036b8:	20ea      	movs	r0, #234	; 0xea
 80036ba:	f008 fdc1 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80036be:	0224      	lsls	r4, r4, #8
 80036c0:	4444      	add	r4, r8
 80036c2:	b2a1      	uxth	r1, r4
 80036c4:	20eb      	movs	r0, #235	; 0xeb
 80036c6:	f008 fdbb 	bl	800c240 <EE_WriteVariable>
	
	return result;
}
 80036ca:	2000      	movs	r0, #0
 80036cc:	bc3c      	pop	{r2, r3, r4, r5}
 80036ce:	4690      	mov	r8, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	46a2      	mov	sl, r4
 80036d4:	46ab      	mov	fp, r5
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036d8 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80036d8:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80036da:	4c1f      	ldr	r4, [pc, #124]	; (8003758 <SaveEEparams+0x80>)
 80036dc:	7863      	ldrb	r3, [r4, #1]
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	7821      	ldrb	r1, [r4, #0]
 80036e2:	4319      	orrs	r1, r3
 80036e4:	208a      	movs	r0, #138	; 0x8a
 80036e6:	0040      	lsls	r0, r0, #1
 80036e8:	f008 fdaa 	bl	800c240 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80036ec:	7921      	ldrb	r1, [r4, #4]
 80036ee:	03c9      	lsls	r1, r1, #15
 80036f0:	88e3      	ldrh	r3, [r4, #6]
 80036f2:	4319      	orrs	r1, r3
 80036f4:	b289      	uxth	r1, r1
 80036f6:	208e      	movs	r0, #142	; 0x8e
 80036f8:	0040      	lsls	r0, r0, #1
 80036fa:	f008 fda1 	bl	800c240 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80036fe:	4c17      	ldr	r4, [pc, #92]	; (800375c <SaveEEparams+0x84>)
 8003700:	8821      	ldrh	r1, [r4, #0]
 8003702:	2016      	movs	r0, #22
 8003704:	30ff      	adds	r0, #255	; 0xff
 8003706:	f008 fd9b 	bl	800c240 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800370a:	8861      	ldrh	r1, [r4, #2]
 800370c:	208b      	movs	r0, #139	; 0x8b
 800370e:	0040      	lsls	r0, r0, #1
 8003710:	f008 fd96 	bl	800c240 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003714:	7963      	ldrb	r3, [r4, #5]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	7b21      	ldrb	r1, [r4, #12]
 800371a:	4319      	orrs	r1, r3
 800371c:	2018      	movs	r0, #24
 800371e:	30ff      	adds	r0, #255	; 0xff
 8003720:	f008 fd8e 	bl	800c240 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003724:	8921      	ldrh	r1, [r4, #8]
 8003726:	208c      	movs	r0, #140	; 0x8c
 8003728:	0040      	lsls	r0, r0, #1
 800372a:	f008 fd89 	bl	800c240 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800372e:	8961      	ldrh	r1, [r4, #10]
 8003730:	201a      	movs	r0, #26
 8003732:	30ff      	adds	r0, #255	; 0xff
 8003734:	f008 fd84 	bl	800c240 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003738:	7b63      	ldrb	r3, [r4, #13]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	7921      	ldrb	r1, [r4, #4]
 800373e:	4319      	orrs	r1, r3
 8003740:	208d      	movs	r0, #141	; 0x8d
 8003742:	0040      	lsls	r0, r0, #1
 8003744:	f008 fd7c 	bl	800c240 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003748:	7ea1      	ldrb	r1, [r4, #26]
 800374a:	201c      	movs	r0, #28
 800374c:	30ff      	adds	r0, #255	; 0xff
 800374e:	f008 fd77 	bl	800c240 <EE_WriteVariable>
	
	return result;
}
 8003752:	2000      	movs	r0, #0
 8003754:	bd10      	pop	{r4, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	200061f0 	.word	0x200061f0
 800375c:	20006270 	.word	0x20006270

08003760 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003764:	2234      	movs	r2, #52	; 0x34
 8003766:	2100      	movs	r1, #0
 8003768:	4813      	ldr	r0, [pc, #76]	; (80037b8 <ClearEEportsDir+0x58>)
 800376a:	f010 f88f 	bl	801388c <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <ClearEEportsDir+0x5c>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d01a      	beq.n	80037ac <ClearEEportsDir+0x4c>
 8003776:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800377c:	4e0e      	ldr	r6, [pc, #56]	; (80037b8 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 800377e:	4f0f      	ldr	r7, [pc, #60]	; (80037bc <ClearEEportsDir+0x5c>)
 8003780:	e008      	b.n	8003794 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003782:	1c60      	adds	r0, r4, #1
 8003784:	f008 fd5c 	bl	800c240 <EE_WriteVariable>
 8003788:	e00a      	b.n	80037a0 <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 800378a:	3401      	adds	r4, #1
 800378c:	b2e4      	uxtb	r4, r4
 800378e:	783b      	ldrb	r3, [r7, #0]
 8003790:	42a3      	cmp	r3, r4
 8003792:	d30d      	bcc.n	80037b0 <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003794:	0025      	movs	r5, r4
 8003796:	1e63      	subs	r3, r4, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	5b99      	ldrh	r1, [r3, r6]
 800379c:	2900      	cmp	r1, #0
 800379e:	d1f0      	bne.n	8003782 <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80037a0:	3502      	adds	r5, #2
 80037a2:	2d1b      	cmp	r5, #27
 80037a4:	ddf1      	ble.n	800378a <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 80037a6:	230a      	movs	r3, #10
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	e7ee      	b.n	800378a <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80037b0:	9801      	ldr	r0, [sp, #4]
 80037b2:	b003      	add	sp, #12
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	20006738 	.word	0x20006738
 80037bc:	20000030 	.word	0x20000030

080037c0 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 80037c0:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <EE_FormatForFactoryReset+0x1c>)
 80037c4:	4a06      	ldr	r2, [pc, #24]	; (80037e0 <EE_FormatForFactoryReset+0x20>)
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d006      	beq.n	80037da <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 80037cc:	f008 fde0 	bl	800c390 <EE_Format>
 80037d0:	2800      	cmp	r0, #0
 80037d2:	d102      	bne.n	80037da <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80037d4:	4b02      	ldr	r3, [pc, #8]	; (80037e0 <EE_FormatForFactoryReset+0x20>)
 80037d6:	4a01      	ldr	r2, [pc, #4]	; (80037dc <EE_FormatForFactoryReset+0x1c>)
 80037d8:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 80037da:	bd10      	pop	{r4, pc}
 80037dc:	beefdead 	.word	0xbeefdead
 80037e0:	20007ff0 	.word	0x20007ff0

080037e4 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80037e8:	2512      	movs	r5, #18
 80037ea:	446d      	add	r5, sp
 80037ec:	ab04      	add	r3, sp, #16
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	ab07      	add	r3, sp, #28
 80037f2:	002a      	movs	r2, r5
 80037f4:	a908      	add	r1, sp, #32
 80037f6:	2001      	movs	r0, #1
 80037f8:	f009 f858 	bl	800c8ac <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80037fc:	ac03      	add	r4, sp, #12
 80037fe:	9400      	str	r4, [sp, #0]
 8003800:	ab05      	add	r3, sp, #20
 8003802:	220e      	movs	r2, #14
 8003804:	446a      	add	r2, sp
 8003806:	a906      	add	r1, sp, #24
 8003808:	2002      	movs	r0, #2
 800380a:	f009 f84f 	bl	800c8ac <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800380e:	2301      	movs	r3, #1
 8003810:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2600      	movs	r6, #0
 8003814:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003816:	882b      	ldrh	r3, [r5, #0]
 8003818:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800381a:	a909      	add	r1, sp, #36	; 0x24
 800381c:	9808      	ldr	r0, [sp, #32]
 800381e:	f00e f8ab 	bl	8011978 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003822:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003824:	2302      	movs	r3, #2
 8003826:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003828:	8823      	ldrh	r3, [r4, #0]
 800382a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800382c:	a909      	add	r1, sp, #36	; 0x24
 800382e:	9805      	ldr	r0, [sp, #20]
 8003830:	f00e f8a2 	bl	8011978 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003834:	8829      	ldrh	r1, [r5, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	9808      	ldr	r0, [sp, #32]
 800383a:	f00e fa11 	bl	8011c60 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800383e:	2005      	movs	r0, #5
 8003840:	f00a fb72 	bl	800df28 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003844:	8821      	ldrh	r1, [r4, #0]
 8003846:	9805      	ldr	r0, [sp, #20]
 8003848:	f00e fa04 	bl	8011c54 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800384c:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800384e:	2800      	cmp	r0, #0
 8003850:	d002      	beq.n	8003858 <IsLowerCLIbaud+0x74>
}
 8003852:	0018      	movs	r0, r3
 8003854:	b00e      	add	sp, #56	; 0x38
 8003856:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003858:	3312      	adds	r3, #18
 800385a:	446b      	add	r3, sp
 800385c:	8819      	ldrh	r1, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	9808      	ldr	r0, [sp, #32]
 8003862:	f00e f9fd 	bl	8011c60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003866:	2005      	movs	r0, #5
 8003868:	f00a fb5e 	bl	800df28 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800386c:	ab03      	add	r3, sp, #12
 800386e:	8819      	ldrh	r1, [r3, #0]
 8003870:	9805      	ldr	r0, [sp, #20]
 8003872:	f00e f9ef 	bl	8011c54 <HAL_GPIO_ReadPin>
 8003876:	3801      	subs	r0, #1
 8003878:	4243      	negs	r3, r0
 800387a:	4143      	adcs	r3, r0
			return 1;
 800387c:	b2db      	uxtb	r3, r3
 800387e:	e7e8      	b.n	8003852 <IsLowerCLIbaud+0x6e>

08003880 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003880:	b510      	push	{r4, lr}
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <IsModuleParameter+0x14>)
 8003884:	6899      	ldr	r1, [r3, #8]
 8003886:	f7fc fc3d 	bl	8000104 <strcmp>
 800388a:	4243      	negs	r3, r0
 800388c:	4158      	adcs	r0, r3
 800388e:	b2c0      	uxtb	r0, r0
			return i + 1;
	}
	return 0;
}
 8003890:	bd10      	pop	{r4, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	20000098 	.word	0x20000098

08003898 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800389c:	491b      	ldr	r1, [pc, #108]	; (800390c <IsMathOperator+0x74>)
 800389e:	f7fc fc31 	bl	8000104 <strcmp>
 80038a2:	0006      	movs	r6, r0
 80038a4:	2506      	movs	r5, #6
 80038a6:	2e00      	cmp	r6, #0
 80038a8:	d023      	beq.n	80038f2 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80038aa:	4919      	ldr	r1, [pc, #100]	; (8003910 <IsMathOperator+0x78>)
 80038ac:	0020      	movs	r0, r4
 80038ae:	f7fc fc29 	bl	8000104 <strcmp>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d01f      	beq.n	80038f6 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80038b6:	4917      	ldr	r1, [pc, #92]	; (8003914 <IsMathOperator+0x7c>)
 80038b8:	0020      	movs	r0, r4
 80038ba:	f7fc fc23 	bl	8000104 <strcmp>
 80038be:	2800      	cmp	r0, #0
 80038c0:	d01b      	beq.n	80038fa <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80038c2:	4915      	ldr	r1, [pc, #84]	; (8003918 <IsMathOperator+0x80>)
 80038c4:	0020      	movs	r0, r4
 80038c6:	f7fc fc1d 	bl	8000104 <strcmp>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d017      	beq.n	80038fe <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80038ce:	4913      	ldr	r1, [pc, #76]	; (800391c <IsMathOperator+0x84>)
 80038d0:	0020      	movs	r0, r4
 80038d2:	f7fc fc17 	bl	8000104 <strcmp>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d013      	beq.n	8003902 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80038da:	4911      	ldr	r1, [pc, #68]	; (8003920 <IsMathOperator+0x88>)
 80038dc:	0020      	movs	r0, r4
 80038de:	f7fc fc11 	bl	8000104 <strcmp>
 80038e2:	2800      	cmp	r0, #0
 80038e4:	d00f      	beq.n	8003906 <IsMathOperator+0x6e>
 80038e6:	3d01      	subs	r5, #1
 80038e8:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	d1db      	bne.n	80038a6 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80038ee:	2000      	movs	r0, #0
}
 80038f0:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80038f2:	2001      	movs	r0, #1
 80038f4:	e7fc      	b.n	80038f0 <IsMathOperator+0x58>
			return MATH_GREATER;
 80038f6:	2002      	movs	r0, #2
 80038f8:	e7fa      	b.n	80038f0 <IsMathOperator+0x58>
			return MATH_SMALLER;
 80038fa:	2003      	movs	r0, #3
 80038fc:	e7f8      	b.n	80038f0 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80038fe:	2004      	movs	r0, #4
 8003900:	e7f6      	b.n	80038f0 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003902:	2005      	movs	r0, #5
 8003904:	e7f4      	b.n	80038f0 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003906:	2006      	movs	r0, #6
 8003908:	e7f2      	b.n	80038f0 <IsMathOperator+0x58>
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	08017560 	.word	0x08017560
 8003910:	08017564 	.word	0x08017564
 8003914:	08017568 	.word	0x08017568
 8003918:	0801756c 	.word	0x0801756c
 800391c:	08017570 	.word	0x08017570
 8003920:	08017574 	.word	0x08017574

08003924 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003924:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 8003926:	f00a f9b7 	bl	800dc98 <RTC_Init>
	GetTimeDate();
 800392a:	f00a fa55 	bl	800ddd8 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 800392e:	f008 fd93 	bl	800c458 <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003932:	f008 ff85 	bl	800c840 <GPIO_Init>
	DMA_Init();
 8003936:	f007 fb43 	bl	800afc0 <DMA_Init>
	TIM_USEC_Init();
 800393a:	f00a fa81 	bl	800de40 <TIM_USEC_Init>
	CRC_Init();
 800393e:	f008 fba1 	bl	800c084 <CRC_Init>
	TIM_MSEC_Init();
 8003942:	f00a faaf 	bl	800dea4 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003946:	f008 ffed 	bl	800c924 <IsFactoryReset>
 800394a:	2800      	cmp	r0, #0
 800394c:	d14c      	bne.n	80039e8 <BOS_Init+0xc4>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800394e:	f7ff ff49 	bl	80037e4 <IsLowerCLIbaud>
 8003952:	2800      	cmp	r0, #0
 8003954:	d053      	beq.n	80039fe <BOS_Init+0xda>
		CLI_LOW_Baudrate_Flag =1;
 8003956:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <BOS_Init+0x10c>)
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800395c:	2032      	movs	r0, #50	; 0x32
 800395e:	f00a fae3 	bl	800df28 <StartMilliDelay>
		Module_Peripheral_Init();
 8003962:	f006 fd75 	bl	800a450 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003966:	4c33      	ldr	r4, [pc, #204]	; (8003a34 <BOS_Init+0x110>)
 8003968:	21e1      	movs	r1, #225	; 0xe1
 800396a:	0249      	lsls	r1, r1, #9
 800396c:	60a1      	str	r1, [r4, #8]
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
			UpdateBaudrate(port,BOS.clibaudrate);
 800396e:	2001      	movs	r0, #1
 8003970:	f00a fc88 	bl	800e284 <UpdateBaudrate>
 8003974:	68a1      	ldr	r1, [r4, #8]
 8003976:	2002      	movs	r0, #2
 8003978:	f00a fc84 	bl	800e284 <UpdateBaudrate>
 800397c:	68a1      	ldr	r1, [r4, #8]
 800397e:	2003      	movs	r0, #3
 8003980:	f00a fc80 	bl	800e284 <UpdateBaudrate>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
		Module_Peripheral_Init();
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003984:	f7ff fde4 	bl	8003550 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003988:	f00a fd0e 	bl	800e3a8 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 800398c:	f007 ffac 	bl	800b8e8 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <BOS_Init+0x114>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d038      	beq.n	8003a0a <BOS_Init+0xe6>
		IND_ON();
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003998:	2580      	movs	r5, #128	; 0x80
 800399a:	012d      	lsls	r5, r5, #4
 800399c:	2490      	movs	r4, #144	; 0x90
 800399e:	05e4      	lsls	r4, r4, #23
 80039a0:	2201      	movs	r2, #1
 80039a2:	0029      	movs	r1, r5
 80039a4:	0020      	movs	r0, r4
 80039a6:	f00e f95b 	bl	8011c60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80039aa:	20fa      	movs	r0, #250	; 0xfa
 80039ac:	0040      	lsls	r0, r0, #1
 80039ae:	f00a fabb 	bl	800df28 <StartMilliDelay>
		IND_OFF();
 80039b2:	2200      	movs	r2, #0
 80039b4:	0029      	movs	r1, r5
 80039b6:	0020      	movs	r0, r4
 80039b8:	f00e f952 	bl	8011c60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80039bc:	2064      	movs	r0, #100	; 0x64
 80039be:	f00a fab3 	bl	800df28 <StartMilliDelay>
		IND_ON();
 80039c2:	2201      	movs	r2, #1
 80039c4:	0029      	movs	r1, r5
 80039c6:	0020      	movs	r0, r4
 80039c8:	f00e f94a 	bl	8011c60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80039cc:	2064      	movs	r0, #100	; 0x64
 80039ce:	f00a faab 	bl	800df28 <StartMilliDelay>
		IND_OFF();
 80039d2:	2200      	movs	r2, #0
 80039d4:	0029      	movs	r1, r5
 80039d6:	0020      	movs	r0, r4
 80039d8:	f00e f942 	bl	8011c60 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80039dc:	f003 fd28 	bl	8007430 <ResetUartORE>
	
	BOS_initialized =1;
 80039e0:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <BOS_Init+0x118>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
}
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
		EE_FormatForFactoryReset();
 80039e8:	f7ff feea 	bl	80037c0 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039ec:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <BOS_Init+0x11c>)
 80039f2:	4a14      	ldr	r2, [pc, #80]	; (8003a44 <BOS_Init+0x120>)
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	e7fd      	b.n	80039fa <BOS_Init+0xd6>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80039fe:	2032      	movs	r0, #50	; 0x32
 8003a00:	f00a fa92 	bl	800df28 <StartMilliDelay>
		Module_Peripheral_Init();
 8003a04:	f006 fd24 	bl	800a450 <Module_Peripheral_Init>
 8003a08:	e7bc      	b.n	8003984 <BOS_Init+0x60>
		IND_ON();
 8003a0a:	2580      	movs	r5, #128	; 0x80
 8003a0c:	012d      	lsls	r5, r5, #4
 8003a0e:	2490      	movs	r4, #144	; 0x90
 8003a10:	05e4      	lsls	r4, r4, #23
 8003a12:	2201      	movs	r2, #1
 8003a14:	0029      	movs	r1, r5
 8003a16:	0020      	movs	r0, r4
 8003a18:	f00e f922 	bl	8011c60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003a1c:	20fa      	movs	r0, #250	; 0xfa
 8003a1e:	0040      	lsls	r0, r0, #1
 8003a20:	f00a fa82 	bl	800df28 <StartMilliDelay>
 8003a24:	2200      	movs	r2, #0
 8003a26:	0029      	movs	r1, r5
 8003a28:	0020      	movs	r0, r4
 8003a2a:	f00e f919 	bl	8011c60 <HAL_GPIO_WritePin>
 8003a2e:	e7d5      	b.n	80039dc <BOS_Init+0xb8>
 8003a30:	200002af 	.word	0x200002af
 8003a34:	20006270 	.word	0x20006270
 8003a38:	20000806 	.word	0x20000806
 8003a3c:	200002ae 	.word	0x200002ae
 8003a40:	e000ed00 	.word	0xe000ed00
 8003a44:	05fa0004 	.word	0x05fa0004

08003a48 <Module_Init>:
void Module_Init(void){
 8003a48:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003a4a:	f00c fc8b 	bl	8010364 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003a4e:	f006 fb0d 	bl	800a06c <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 8003a52:	f7ff ff67 	bl	8003924 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003a56:	f003 fd07 	bl	8007468 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003a5a:	f00a fd4b 	bl	800e4f4 <osKernelStart>
}
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	b083      	sub	sp, #12
 8003a64:	0007      	movs	r7, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a66:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a68:	4d0d      	ldr	r5, [pc, #52]	; (8003aa0 <ExploreNeighbors+0x40>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a6a:	2603      	movs	r6, #3
		if(port != ignore){
 8003a6c:	42a7      	cmp	r7, r4
 8003a6e:	d00f      	beq.n	8003a90 <ExploreNeighbors+0x30>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <ExploreNeighbors+0x44>)
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	0a1a      	lsrs	r2, r3, #8
 8003a76:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003a78:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 8003a7a:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003a7c:	9600      	str	r6, [sp, #0]
 8003a7e:	230a      	movs	r3, #10
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	0020      	movs	r0, r4
 8003a86:	f004 f911 	bl	8007cac <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003a8a:	200a      	movs	r0, #10
 8003a8c:	f00a fd37 	bl	800e4fe <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a90:	3401      	adds	r4, #1
 8003a92:	b2e4      	uxtb	r4, r4
 8003a94:	2c04      	cmp	r4, #4
 8003a96:	d1e9      	bne.n	8003a6c <ExploreNeighbors+0xc>
		}
	}
	
	return result;
}
 8003a98:	2000      	movs	r0, #0
 8003a9a:	b003      	add	sp, #12
 8003a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	200006c8 	.word	0x200006c8
 8003aa4:	20000064 	.word	0x20000064

08003aa8 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aaa:	46de      	mov	lr, fp
 8003aac:	4657      	mov	r7, sl
 8003aae:	464e      	mov	r6, r9
 8003ab0:	4645      	mov	r5, r8
 8003ab2:	b5e0      	push	{r5, r6, r7, lr}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003ab8:	4b47      	ldr	r3, [pc, #284]	; (8003bd8 <FindBroadcastRoutes+0x130>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	469c      	mov	ip, r3
 8003abe:	3307      	adds	r3, #7
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	466a      	mov	r2, sp
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	469d      	mov	sp, r3
 8003aca:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003acc:	4663      	mov	r3, ip
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00d      	beq.n	8003aee <FindBroadcastRoutes+0x46>
 8003ad2:	0023      	movs	r3, r4
 8003ad4:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <FindBroadcastRoutes+0x134>)
 8003ad6:	4661      	mov	r1, ip
 8003ad8:	1e4d      	subs	r5, r1, #1
 8003ada:	b2ed      	uxtb	r5, r5
 8003adc:	3501      	adds	r5, #1
 8003ade:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 8003ae4:	8011      	strh	r1, [r2, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003aea:	42ab      	cmp	r3, r5
 8003aec:	d1f9      	bne.n	8003ae2 <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003aee:	3801      	subs	r0, #1
 8003af0:	2301      	movs	r3, #1
 8003af2:	5423      	strb	r3, [r4, r0]
 8003af4:	2216      	movs	r2, #22
 8003af6:	4342      	muls	r2, r0
 8003af8:	3202      	adds	r2, #2
 8003afa:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <FindBroadcastRoutes+0x138>)
 8003afc:	18d2      	adds	r2, r2, r3
 8003afe:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b00:	4d36      	ldr	r5, [pc, #216]	; (8003bdc <FindBroadcastRoutes+0x134>)
 8003b02:	0040      	lsls	r0, r0, #1
 8003b04:	2301      	movs	r3, #1
 8003b06:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b08:	46a3      	mov	fp, r4
 8003b0a:	e003      	b.n	8003b14 <FindBroadcastRoutes+0x6c>
 8003b0c:	3101      	adds	r1, #1
 8003b0e:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003b10:	2906      	cmp	r1, #6
 8003b12:	d011      	beq.n	8003b38 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 8003b14:	8813      	ldrh	r3, [r2, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f8      	beq.n	8003b0c <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003b1a:	5b46      	ldrh	r6, [r0, r5]
 8003b1c:	46b1      	mov	r9, r6
 8003b1e:	4646      	mov	r6, r8
 8003b20:	408e      	lsls	r6, r1
 8003b22:	46b2      	mov	sl, r6
 8003b24:	464e      	mov	r6, r9
 8003b26:	4654      	mov	r4, sl
 8003b28:	4326      	orrs	r6, r4
 8003b2a:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003b2c:	08db      	lsrs	r3, r3, #3
 8003b2e:	445b      	add	r3, fp
 8003b30:	3b01      	subs	r3, #1
 8003b32:	2402      	movs	r4, #2
 8003b34:	701c      	strb	r4, [r3, #0]
 8003b36:	e7e9      	b.n	8003b0c <FindBroadcastRoutes+0x64>
 8003b38:	465c      	mov	r4, fp
	++level;												// Move one level
 8003b3a:	2602      	movs	r6, #2
 8003b3c:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <FindBroadcastRoutes+0x138>)
 8003b3e:	3302      	adds	r3, #2
 8003b40:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b42:	2301      	movs	r3, #1
 8003b44:	469b      	mov	fp, r3
 8003b46:	46b0      	mov	r8, r6
 8003b48:	0026      	movs	r6, r4
		++level;											// Move one level
 8003b4a:	4643      	mov	r3, r8
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b52:	4663      	mov	r3, ip
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d035      	beq.n	8003bc4 <FindBroadcastRoutes+0x11c>
 8003b58:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4443      	add	r3, r8
 8003b62:	4699      	mov	r9, r3
 8003b64:	e01e      	b.n	8003ba4 <FindBroadcastRoutes+0xfc>
 8003b66:	3001      	adds	r0, #1
 8003b68:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003b6a:	2806      	cmp	r0, #6
 8003b6c:	d015      	beq.n	8003b9a <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003b6e:	880b      	ldrh	r3, [r1, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f8      	beq.n	8003b66 <FindBroadcastRoutes+0xbe>
 8003b74:	08db      	lsrs	r3, r3, #3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	5cf5      	ldrb	r5, [r6, r3]
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	d1f3      	bne.n	8003b66 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003b7e:	4a17      	ldr	r2, [pc, #92]	; (8003bdc <FindBroadcastRoutes+0x134>)
 8003b80:	5aa5      	ldrh	r5, [r4, r2]
 8003b82:	465a      	mov	r2, fp
 8003b84:	4082      	lsls	r2, r0
 8003b86:	4315      	orrs	r5, r2
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <FindBroadcastRoutes+0x134>)
 8003b8a:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e7e5      	b.n	8003b66 <FindBroadcastRoutes+0xbe>
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003b9e:	b2d3      	uxtb	r3, r2
 8003ba0:	4563      	cmp	r3, ip
 8003ba2:	d20c      	bcs.n	8003bbe <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003ba4:	5cb3      	ldrb	r3, [r6, r2]
 8003ba6:	454b      	cmp	r3, r9
 8003ba8:	d1f8      	bne.n	8003b9c <FindBroadcastRoutes+0xf4>
 8003baa:	2116      	movs	r1, #22
 8003bac:	4351      	muls	r1, r2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	469a      	mov	sl, r3
 8003bb2:	4451      	add	r1, sl
 8003bb4:	0053      	lsls	r3, r2, #1
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	60ba      	str	r2, [r7, #8]
 8003bba:	001c      	movs	r4, r3
 8003bbc:	e7d7      	b.n	8003b6e <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1c2      	bne.n	8003b4a <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b005      	add	sp, #20
 8003bca:	bc3c      	pop	{r2, r3, r4, r5}
 8003bcc:	4690      	mov	r8, r2
 8003bce:	4699      	mov	r9, r3
 8003bd0:	46a2      	mov	sl, r4
 8003bd2:	46ab      	mov	fp, r5
 8003bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	20000030 	.word	0x20000030
 8003bdc:	200004f4 	.word	0x200004f4
 8003be0:	200002b4 	.word	0x200002b4

08003be4 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003be4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003be6:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003be8:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d100      	bne.n	8003bf0 <minArr+0xc>
		smallest =arr[0];
 8003bee:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <minArr+0x38>)
 8003bf2:	781d      	ldrb	r5, [r3, #0]
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	dd0e      	ble.n	8003c16 <minArr+0x32>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2700      	movs	r7, #0
 8003bfc:	e002      	b.n	8003c04 <minArr+0x20>
 8003bfe:	3301      	adds	r3, #1
 8003c00:	42ab      	cmp	r3, r5
 8003c02:	da09      	bge.n	8003c18 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 8003c04:	5cc2      	ldrb	r2, [r0, r3]
 8003c06:	42a2      	cmp	r2, r4
 8003c08:	d2f9      	bcs.n	8003bfe <minArr+0x1a>
 8003c0a:	5cce      	ldrb	r6, [r1, r3]
 8003c0c:	2e00      	cmp	r6, #0
 8003c0e:	d1f6      	bne.n	8003bfe <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003c10:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8003c12:	0014      	movs	r4, r2
 8003c14:	e7f3      	b.n	8003bfe <minArr+0x1a>
	for(int i =0; i < N; i++){
 8003c16:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003c18:	0038      	movs	r0, r7
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1c:	20000030 	.word	0x20000030

08003c20 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <QnotEmpty+0x20>)
 8003c22:	7819      	ldrb	r1, [r3, #0]
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d008      	beq.n	8003c3a <QnotEmpty+0x1a>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	1841      	adds	r1, r0, r1
	char temp =1;
 8003c2c:	2001      	movs	r0, #1
		temp &=Q[i];
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	4010      	ands	r0, r2
 8003c32:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003c34:	428b      	cmp	r3, r1
 8003c36:	d1fa      	bne.n	8003c2e <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003c38:	4770      	bx	lr
	char temp =1;
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e7fc      	b.n	8003c38 <QnotEmpty+0x18>
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	20000030 	.word	0x20000030

08003c44 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	46de      	mov	lr, fp
 8003c48:	4657      	mov	r7, sl
 8003c4a:	464e      	mov	r6, r9
 8003c4c:	4645      	mov	r5, r8
 8003c4e:	b5e0      	push	{r5, r6, r7, lr}
 8003c50:	b08f      	sub	sp, #60	; 0x3c
 8003c52:	0005      	movs	r5, r0
 8003c54:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003c56:	2232      	movs	r2, #50	; 0x32
 8003c58:	2100      	movs	r1, #0
 8003c5a:	a801      	add	r0, sp, #4
 8003c5c:	f00f fe16 	bl	801388c <memset>
	memset(route,0,sizeof(route));
 8003c60:	221a      	movs	r2, #26
 8003c62:	2100      	movs	r1, #0
 8003c64:	485a      	ldr	r0, [pc, #360]	; (8003dd0 <FindRoute+0x18c>)
 8003c66:	f00f fe11 	bl	801388c <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003c6a:	0029      	movs	r1, r5
 8003c6c:	1e68      	subs	r0, r5, #1
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <FindRoute+0x190>)
 8003c72:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <FindRoute+0x194>)
 8003c76:	5413      	strb	r3, [r2, r0]
 8003c78:	2516      	movs	r5, #22
 8003c7a:	4345      	muls	r5, r0
 8003c7c:	3502      	adds	r5, #2
 8003c7e:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <FindRoute+0x198>)
 8003c80:	18ed      	adds	r5, r5, r3
 8003c82:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003c84:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003c86:	4653      	mov	r3, sl
 8003c88:	b29c      	uxth	r4, r3
 8003c8a:	e003      	b.n	8003c94 <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	3202      	adds	r2, #2
 8003c90:	2807      	cmp	r0, #7
 8003c92:	d00f      	beq.n	8003cb4 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003c94:	8813      	ldrh	r3, [r2, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f8      	beq.n	8003c8c <FindRoute+0x48>
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	42a3      	cmp	r3, r4
 8003c9e:	d1f5      	bne.n	8003c8c <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <FindRoute+0x190>)
 8003ca2:	4453      	add	r3, sl
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <FindRoute+0x18c>)
 8003cac:	4652      	mov	r2, sl
 8003cae:	701a      	strb	r2, [r3, #0]
			return col;
 8003cb0:	b2c0      	uxtb	r0, r0
 8003cb2:	e085      	b.n	8003dc0 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <FindRoute+0x19c>)
 8003cb6:	781e      	ldrb	r6, [r3, #0]
 8003cb8:	2e00      	cmp	r6, #0
 8003cba:	dd11      	ble.n	8003ce0 <FindRoute+0x9c>
 8003cbc:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003cbe:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003cc0:	4f45      	ldr	r7, [pc, #276]	; (8003dd8 <FindRoute+0x194>)
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	46ac      	mov	ip, r5
 8003cc6:	e002      	b.n	8003cce <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003cc8:	3301      	adds	r3, #1
 8003cca:	42b3      	cmp	r3, r6
 8003ccc:	dc07      	bgt.n	8003cde <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	d0fa      	beq.n	8003cc8 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	4d3f      	ldr	r5, [pc, #252]	; (8003dd4 <FindRoute+0x190>)
 8003cd6:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003cd8:	18ba      	adds	r2, r7, r2
 8003cda:	7010      	strb	r0, [r2, #0]
 8003cdc:	e7f4      	b.n	8003cc8 <FindRoute+0x84>
 8003cde:	4665      	mov	r5, ip
	uint8_t u =0;
 8003ce0:	2400      	movs	r4, #0
 8003ce2:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <FindRoute+0x198>)
 8003ce4:	4698      	mov	r8, r3
 8003ce6:	230e      	movs	r3, #14
 8003ce8:	4443      	add	r3, r8
 8003cea:	4656      	mov	r6, sl
 8003cec:	469b      	mov	fp, r3
 8003cee:	46a9      	mov	r9, r5
 8003cf0:	e01d      	b.n	8003d2e <FindRoute+0xea>
 8003cf2:	464d      	mov	r5, r9
 8003cf4:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003cf6:	0034      	movs	r4, r6
 8003cf8:	e034      	b.n	8003d64 <FindRoute+0x120>
 8003cfa:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003cfc:	4281      	cmp	r1, r0
 8003cfe:	d015      	beq.n	8003d2c <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003d00:	880b      	ldrh	r3, [r1, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f9      	beq.n	8003cfa <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003d06:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	5cd7      	ldrb	r7, [r2, r3]
 8003d0e:	2f00      	cmp	r7, #0
 8003d10:	d1f3      	bne.n	8003cfa <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003d12:	4f30      	ldr	r7, [pc, #192]	; (8003dd4 <FindRoute+0x190>)
 8003d14:	5d7f      	ldrb	r7, [r7, r5]
 8003d16:	3701      	adds	r7, #1
 8003d18:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003d1a:	4e2e      	ldr	r6, [pc, #184]	; (8003dd4 <FindRoute+0x190>)
 8003d1c:	5cf6      	ldrb	r6, [r6, r3]
 8003d1e:	42be      	cmp	r6, r7
 8003d20:	d9eb      	bls.n	8003cfa <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003d22:	4e2c      	ldr	r6, [pc, #176]	; (8003dd4 <FindRoute+0x190>)
 8003d24:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003d26:	4e2c      	ldr	r6, [pc, #176]	; (8003dd8 <FindRoute+0x194>)
 8003d28:	54f4      	strb	r4, [r6, r3]
 8003d2a:	e7e6      	b.n	8003cfa <FindRoute+0xb6>
 8003d2c:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003d2e:	a801      	add	r0, sp, #4
 8003d30:	f7ff ff76 	bl	8003c20 <QnotEmpty>
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d113      	bne.n	8003d60 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003d38:	a901      	add	r1, sp, #4
 8003d3a:	4826      	ldr	r0, [pc, #152]	; (8003dd4 <FindRoute+0x190>)
 8003d3c:	f7ff ff52 	bl	8003be4 <minArr>
 8003d40:	3001      	adds	r0, #1
 8003d42:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003d44:	42b4      	cmp	r4, r6
 8003d46:	d0d4      	beq.n	8003cf2 <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003d48:	1e65      	subs	r5, r4, #1
 8003d4a:	ab01      	add	r3, sp, #4
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	555a      	strb	r2, [r3, r5]
 8003d50:	2016      	movs	r0, #22
 8003d52:	4368      	muls	r0, r5
 8003d54:	1c81      	adds	r1, r0, #2
 8003d56:	4441      	add	r1, r8
 8003d58:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	46b2      	mov	sl, r6
 8003d5e:	e7cf      	b.n	8003d00 <FindRoute+0xbc>
 8003d60:	464d      	mov	r5, r9
 8003d62:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <FindRoute+0x194>)
 8003d66:	191b      	adds	r3, r3, r4
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	d00e      	beq.n	8003d90 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003d72:	4917      	ldr	r1, [pc, #92]	; (8003dd0 <FindRoute+0x18c>)
 8003d74:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d76:	4e18      	ldr	r6, [pc, #96]	; (8003dd8 <FindRoute+0x194>)
 8003d78:	e000      	b.n	8003d7c <FindRoute+0x138>
 8003d7a:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003d7c:	1c58      	adds	r0, r3, #1
 8003d7e:	4661      	mov	r1, ip
 8003d80:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d82:	18b3      	adds	r3, r6, r2
 8003d84:	3b01      	subs	r3, #1
 8003d86:	7819      	ldrb	r1, [r3, #0]
 8003d88:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003d8a:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	d1f4      	bne.n	8003d7a <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003d90:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003d92:	490f      	ldr	r1, [pc, #60]	; (8003dd0 <FindRoute+0x18c>)
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <FindRoute+0x190>)
 8003d96:	4453      	add	r3, sl
 8003d98:	001f      	movs	r7, r3
 8003d9a:	3f01      	subs	r7, #1
 8003d9c:	e003      	b.n	8003da6 <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003d9e:	3001      	adds	r0, #1
 8003da0:	3502      	adds	r5, #2
 8003da2:	2807      	cmp	r0, #7
 8003da4:	d00b      	beq.n	8003dbe <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003da6:	882b      	ldrh	r3, [r5, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f8      	beq.n	8003d9e <FindRoute+0x15a>
 8003dac:	783a      	ldrb	r2, [r7, #0]
 8003dae:	188a      	adds	r2, r1, r2
 8003db0:	3a01      	subs	r2, #1
 8003db2:	7812      	ldrb	r2, [r2, #0]
 8003db4:	08db      	lsrs	r3, r3, #3
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d1f1      	bne.n	8003d9e <FindRoute+0x15a>
			return col;
 8003dba:	b2c0      	uxtb	r0, r0
 8003dbc:	e000      	b.n	8003dc0 <FindRoute+0x17c>
	return 0;
 8003dbe:	2000      	movs	r0, #0
}
 8003dc0:	b00f      	add	sp, #60	; 0x3c
 8003dc2:	bc3c      	pop	{r2, r3, r4, r5}
 8003dc4:	4690      	mov	r8, r2
 8003dc6:	4699      	mov	r9, r3
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	46ab      	mov	fp, r5
 8003dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20006338 	.word	0x20006338
 8003dd4:	2000088c 	.word	0x2000088c
 8003dd8:	200008a8 	.word	0x200008a8
 8003ddc:	200002b4 	.word	0x200002b4
 8003de0:	20000030 	.word	0x20000030

08003de4 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de6:	46de      	mov	lr, fp
 8003de8:	4657      	mov	r7, sl
 8003dea:	4646      	mov	r6, r8
 8003dec:	b5c0      	push	{r6, r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	0005      	movs	r5, r0
 8003df2:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003df4:	4c55      	ldr	r4, [pc, #340]	; (8003f4c <DisplayTopology+0x168>)
 8003df6:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <DisplayTopology+0x16c>)
 8003df8:	0022      	movs	r2, r4
 8003dfa:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003dfc:	c243      	stmia	r2!, {r0, r1, r6}
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	6011      	str	r1, [r2, #0]
 8003e02:	889b      	ldrh	r3, [r3, #4]
 8003e04:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e06:	0020      	movs	r0, r4
 8003e08:	f7fc f986 	bl	8000118 <strlen>
 8003e0c:	b282      	uxth	r2, r0
 8003e0e:	2301      	movs	r3, #1
 8003e10:	425b      	negs	r3, r3
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	3333      	adds	r3, #51	; 0x33
 8003e16:	0021      	movs	r1, r4
 8003e18:	0028      	movs	r0, r5
 8003e1a:	f00a f9c5 	bl	800e1a8 <writePxMutex>
 8003e1e:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003e20:	4f4c      	ldr	r7, [pc, #304]	; (8003f54 <DisplayTopology+0x170>)
 8003e22:	4d4a      	ldr	r5, [pc, #296]	; (8003f4c <DisplayTopology+0x168>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e24:	2601      	movs	r6, #1
 8003e26:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003e28:	0022      	movs	r2, r4
 8003e2a:	0039      	movs	r1, r7
 8003e2c:	0028      	movs	r0, r5
 8003e2e:	f010 fabb 	bl	80143a8 <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e32:	0028      	movs	r0, r5
 8003e34:	f7fc f970 	bl	8000118 <strlen>
 8003e38:	b282      	uxth	r2, r0
 8003e3a:	9600      	str	r6, [sp, #0]
 8003e3c:	2332      	movs	r3, #50	; 0x32
 8003e3e:	0029      	movs	r1, r5
 8003e40:	9803      	ldr	r0, [sp, #12]
 8003e42:	f00a f9b1 	bl	800e1a8 <writePxMutex>
 8003e46:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003e48:	2c04      	cmp	r4, #4
 8003e4a:	d1ed      	bne.n	8003e28 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	425b      	negs	r3, r3
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	3333      	adds	r3, #51	; 0x33
 8003e54:	2203      	movs	r2, #3
 8003e56:	4940      	ldr	r1, [pc, #256]	; (8003f58 <DisplayTopology+0x174>)
 8003e58:	9803      	ldr	r0, [sp, #12]
 8003e5a:	f00a f9a5 	bl	800e1a8 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003e5e:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <DisplayTopology+0x178>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d063      	beq.n	8003f2e <DisplayTopology+0x14a>
 8003e66:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e68:	2701      	movs	r7, #1
 8003e6a:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003e6c:	4b3c      	ldr	r3, [pc, #240]	; (8003f60 <DisplayTopology+0x17c>)
 8003e6e:	4698      	mov	r8, r3
 8003e70:	2308      	movs	r3, #8
 8003e72:	4443      	add	r3, r8
 8003e74:	469a      	mov	sl, r3
 8003e76:	e029      	b.n	8003ecc <DisplayTopology+0xe8>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003e78:	2307      	movs	r3, #7
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	08d2      	lsrs	r2, r2, #3
 8003e7e:	4939      	ldr	r1, [pc, #228]	; (8003f64 <DisplayTopology+0x180>)
 8003e80:	4832      	ldr	r0, [pc, #200]	; (8003f4c <DisplayTopology+0x168>)
 8003e82:	f010 fa91 	bl	80143a8 <siprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e86:	4d31      	ldr	r5, [pc, #196]	; (8003f4c <DisplayTopology+0x168>)
 8003e88:	0028      	movs	r0, r5
 8003e8a:	f7fc f945 	bl	8000118 <strlen>
 8003e8e:	b282      	uxth	r2, r0
 8003e90:	9700      	str	r7, [sp, #0]
 8003e92:	2332      	movs	r3, #50	; 0x32
 8003e94:	0029      	movs	r1, r5
 8003e96:	9803      	ldr	r0, [sp, #12]
 8003e98:	f00a f986 	bl	800e1a8 <writePxMutex>
 8003e9c:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003e9e:	455c      	cmp	r4, fp
 8003ea0:	d007      	beq.n	8003eb2 <DisplayTopology+0xce>
			if(!array[row][col])
 8003ea2:	8822      	ldrh	r2, [r4, #0]
 8003ea4:	2a00      	cmp	r2, #0
 8003ea6:	d1e7      	bne.n	8003e78 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003ea8:	492f      	ldr	r1, [pc, #188]	; (8003f68 <DisplayTopology+0x184>)
 8003eaa:	4828      	ldr	r0, [pc, #160]	; (8003f4c <DisplayTopology+0x168>)
 8003eac:	f010 fa7c 	bl	80143a8 <siprintf>
 8003eb0:	e7e9      	b.n	8003e86 <DisplayTopology+0xa2>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003eb2:	9700      	str	r7, [sp, #0]
 8003eb4:	2332      	movs	r3, #50	; 0x32
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	492c      	ldr	r1, [pc, #176]	; (8003f6c <DisplayTopology+0x188>)
 8003eba:	9803      	ldr	r0, [sp, #12]
 8003ebc:	f00a f974 	bl	800e1a8 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	b2f6      	uxtb	r6, r6
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <DisplayTopology+0x178>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	42b3      	cmp	r3, r6
 8003eca:	d930      	bls.n	8003f2e <DisplayTopology+0x14a>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003ecc:	1c72      	adds	r2, r6, #1
 8003ece:	4c1f      	ldr	r4, [pc, #124]	; (8003f4c <DisplayTopology+0x168>)
 8003ed0:	4927      	ldr	r1, [pc, #156]	; (8003f70 <DisplayTopology+0x18c>)
 8003ed2:	0020      	movs	r0, r4
 8003ed4:	f010 fa68 	bl	80143a8 <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003ed8:	0020      	movs	r0, r4
 8003eda:	f7fc f91d 	bl	8000118 <strlen>
 8003ede:	b282      	uxth	r2, r0
 8003ee0:	9700      	str	r7, [sp, #0]
 8003ee2:	2332      	movs	r3, #50	; 0x32
 8003ee4:	0021      	movs	r1, r4
 8003ee6:	9803      	ldr	r0, [sp, #12]
 8003ee8:	f00a f95e 	bl	800e1a8 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003eec:	2516      	movs	r5, #22
 8003eee:	4375      	muls	r5, r6
 8003ef0:	4643      	mov	r3, r8
 8003ef2:	5aeb      	ldrh	r3, [r5, r3]
 8003ef4:	0059      	lsls	r1, r3, #1
 8003ef6:	18c9      	adds	r1, r1, r3
 8003ef8:	0049      	lsls	r1, r1, #1
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <DisplayTopology+0x190>)
 8003efc:	18c9      	adds	r1, r1, r3
 8003efe:	2205      	movs	r2, #5
 8003f00:	0020      	movs	r0, r4
 8003f02:	f010 faa6 	bl	8014452 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003f06:	9700      	str	r7, [sp, #0]
 8003f08:	2332      	movs	r3, #50	; 0x32
 8003f0a:	2205      	movs	r2, #5
 8003f0c:	0021      	movs	r1, r4
 8003f0e:	9c03      	ldr	r4, [sp, #12]
 8003f10:	0020      	movs	r0, r4
 8003f12:	f00a f949 	bl	800e1a8 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003f16:	9700      	str	r7, [sp, #0]
 8003f18:	2332      	movs	r3, #50	; 0x32
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4916      	ldr	r1, [pc, #88]	; (8003f78 <DisplayTopology+0x194>)
 8003f1e:	0020      	movs	r0, r4
 8003f20:	f00a f942 	bl	800e1a8 <writePxMutex>
 8003f24:	1cac      	adds	r4, r5, #2
 8003f26:	4444      	add	r4, r8
 8003f28:	4455      	add	r5, sl
 8003f2a:	46ab      	mov	fp, r5
 8003f2c:	e7b9      	b.n	8003ea2 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003f2e:	2301      	movs	r3, #1
 8003f30:	425b      	negs	r3, r3
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	3333      	adds	r3, #51	; 0x33
 8003f36:	2201      	movs	r2, #1
 8003f38:	4910      	ldr	r1, [pc, #64]	; (8003f7c <DisplayTopology+0x198>)
 8003f3a:	9803      	ldr	r0, [sp, #12]
 8003f3c:	f00a f934 	bl	800e1a8 <writePxMutex>
}
 8003f40:	b004      	add	sp, #16
 8003f42:	bc1c      	pop	{r2, r3, r4}
 8003f44:	4690      	mov	r8, r2
 8003f46:	469a      	mov	sl, r3
 8003f48:	46a3      	mov	fp, r4
 8003f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4c:	20000820 	.word	0x20000820
 8003f50:	08017524 	.word	0x08017524
 8003f54:	08017538 	.word	0x08017538
 8003f58:	08018c4c 	.word	0x08018c4c
 8003f5c:	20000030 	.word	0x20000030
 8003f60:	200002b4 	.word	0x200002b4
 8003f64:	08017550 	.word	0x08017550
 8003f68:	0801754c 	.word	0x0801754c
 8003f6c:	080173cc 	.word	0x080173cc
 8003f70:	08017540 	.word	0x08017540
 8003f74:	0801758c 	.word	0x0801758c
 8003f78:	08017534 	.word	0x08017534
 8003f7c:	08019fbc 	.word	0x08019fbc

08003f80 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f82:	46c6      	mov	lr, r8
 8003f84:	b500      	push	{lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	0005      	movs	r5, r0
 8003f8a:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003f8c:	4c30      	ldr	r4, [pc, #192]	; (8004050 <DisplayPortsDir+0xd0>)
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <DisplayPortsDir+0xd4>)
 8003f90:	0022      	movs	r2, r4
 8003f92:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f94:	c243      	stmia	r2!, {r0, r1, r6}
 8003f96:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003f98:	c243      	stmia	r2!, {r0, r1, r6}
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	f7fc f8ba 	bl	8000118 <strlen>
 8003fa4:	b282      	uxth	r2, r0
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	425b      	negs	r3, r3
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	3333      	adds	r3, #51	; 0x33
 8003fae:	0021      	movs	r1, r4
 8003fb0:	0028      	movs	r0, r5
 8003fb2:	f00a f8f9 	bl	800e1a8 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003fb6:	4b28      	ldr	r3, [pc, #160]	; (8004058 <DisplayPortsDir+0xd8>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	4690      	mov	r8, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d02c      	beq.n	800401c <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003fc2:	4e26      	ldr	r6, [pc, #152]	; (800405c <DisplayPortsDir+0xdc>)
 8003fc4:	e025      	b.n	8004012 <DisplayPortsDir+0x92>
 8003fc6:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003fc8:	2c0a      	cmp	r4, #10
 8003fca:	d01a      	beq.n	8004002 <DisplayPortsDir+0x82>
 8003fcc:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003fce:	5ba9      	ldrh	r1, [r5, r6]
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0212      	lsls	r2, r2, #8
 8003fd4:	411a      	asrs	r2, r3
 8003fd6:	420a      	tst	r2, r1
 8003fd8:	d0f5      	beq.n	8003fc6 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003fda:	4f1d      	ldr	r7, [pc, #116]	; (8004050 <DisplayPortsDir+0xd0>)
 8003fdc:	0023      	movs	r3, r4
 8003fde:	4642      	mov	r2, r8
 8003fe0:	491f      	ldr	r1, [pc, #124]	; (8004060 <DisplayPortsDir+0xe0>)
 8003fe2:	0038      	movs	r0, r7
 8003fe4:	f010 f9e0 	bl	80143a8 <siprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003fe8:	0038      	movs	r0, r7
 8003fea:	f7fc f895 	bl	8000118 <strlen>
 8003fee:	b282      	uxth	r2, r0
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	425b      	negs	r3, r3
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	3333      	adds	r3, #51	; 0x33
 8003ff8:	0039      	movs	r1, r7
 8003ffa:	9803      	ldr	r0, [sp, #12]
 8003ffc:	f00a f8d4 	bl	800e1a8 <writePxMutex>
 8004000:	e7e1      	b.n	8003fc6 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8004002:	4643      	mov	r3, r8
 8004004:	3301      	adds	r3, #1
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4698      	mov	r8, r3
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <DisplayPortsDir+0xd8>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	4543      	cmp	r3, r8
 8004010:	d304      	bcc.n	800401c <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8004012:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004014:	4642      	mov	r2, r8
 8004016:	1e55      	subs	r5, r2, #1
 8004018:	006d      	lsls	r5, r5, #1
 800401a:	e7d7      	b.n	8003fcc <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 800401c:	4c0c      	ldr	r4, [pc, #48]	; (8004050 <DisplayPortsDir+0xd0>)
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <DisplayPortsDir+0xe4>)
 8004020:	0022      	movs	r2, r4
 8004022:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004024:	c223      	stmia	r2!, {r0, r1, r5}
 8004026:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004028:	c223      	stmia	r2!, {r0, r1, r5}
 800402a:	cb03      	ldmia	r3!, {r0, r1}
 800402c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 800402e:	0020      	movs	r0, r4
 8004030:	f7fc f872 	bl	8000118 <strlen>
 8004034:	b282      	uxth	r2, r0
 8004036:	2301      	movs	r3, #1
 8004038:	425b      	negs	r3, r3
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	3333      	adds	r3, #51	; 0x33
 800403e:	0021      	movs	r1, r4
 8004040:	9803      	ldr	r0, [sp, #12]
 8004042:	f00a f8b1 	bl	800e1a8 <writePxMutex>
	HAL_MAX_DELAY);
}
 8004046:	b004      	add	sp, #16
 8004048:	bc04      	pop	{r2}
 800404a:	4690      	mov	r8, r2
 800404c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20000820 	.word	0x20000820
 8004054:	080174d4 	.word	0x080174d4
 8004058:	20000030 	.word	0x20000030
 800405c:	20006738 	.word	0x20006738
 8004060:	080174f0 	.word	0x080174f0
 8004064:	08017504 	.word	0x08017504

08004068 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8004068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800406a:	46c6      	mov	lr, r8
 800406c:	b500      	push	{lr}
 800406e:	b084      	sub	sp, #16
 8004070:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004072:	f00a fb55 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 8004076:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8004078:	2300      	movs	r3, #0
 800407a:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 800407c:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <DisplayModuleStatus+0x24c>)
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	4d8d      	ldr	r5, [pc, #564]	; (80042b8 <DisplayModuleStatus+0x250>)
 8004082:	498e      	ldr	r1, [pc, #568]	; (80042bc <DisplayModuleStatus+0x254>)
 8004084:	0028      	movs	r0, r5
 8004086:	f010 f98f 	bl	80143a8 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800408a:	0029      	movs	r1, r5
 800408c:	0020      	movs	r0, r4
 800408e:	f010 f9ab 	bl	80143e8 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8004092:	4b8b      	ldr	r3, [pc, #556]	; (80042c0 <DisplayModuleStatus+0x258>)
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	498b      	ldr	r1, [pc, #556]	; (80042c4 <DisplayModuleStatus+0x25c>)
 8004098:	0028      	movs	r0, r5
 800409a:	f010 f985 	bl	80143a8 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 800409e:	0029      	movs	r1, r5
 80040a0:	0020      	movs	r0, r4
 80040a2:	f010 f9a1 	bl	80143e8 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 80040a6:	2306      	movs	r3, #6
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	3b04      	subs	r3, #4
 80040ac:	2200      	movs	r2, #0
 80040ae:	4986      	ldr	r1, [pc, #536]	; (80042c8 <DisplayModuleStatus+0x260>)
 80040b0:	0028      	movs	r0, r5
 80040b2:	f010 f979 	bl	80143a8 <siprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 80040b6:	0029      	movs	r1, r5
 80040b8:	0020      	movs	r0, r4
 80040ba:	f010 f995 	bl	80143e8 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 80040be:	4a83      	ldr	r2, [pc, #524]	; (80042cc <DisplayModuleStatus+0x264>)
 80040c0:	4983      	ldr	r1, [pc, #524]	; (80042d0 <DisplayModuleStatus+0x268>)
 80040c2:	0028      	movs	r0, r5
 80040c4:	f010 f970 	bl	80143a8 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040c8:	0029      	movs	r1, r5
 80040ca:	0020      	movs	r0, r4
 80040cc:	f010 f98c 	bl	80143e8 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 80040d0:	4a80      	ldr	r2, [pc, #512]	; (80042d4 <DisplayModuleStatus+0x26c>)
 80040d2:	4981      	ldr	r1, [pc, #516]	; (80042d8 <DisplayModuleStatus+0x270>)
 80040d4:	0028      	movs	r0, r5
 80040d6:	f010 f967 	bl	80143a8 <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 80040da:	0029      	movs	r1, r5
 80040dc:	0020      	movs	r0, r4
 80040de:	f010 f983 	bl	80143e8 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 80040e2:	4b7e      	ldr	r3, [pc, #504]	; (80042dc <DisplayModuleStatus+0x274>)
 80040e4:	002a      	movs	r2, r5
 80040e6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040e8:	c243      	stmia	r2!, {r0, r1, r6}
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	8899      	ldrh	r1, [r3, #4]
 80040f0:	8091      	strh	r1, [r2, #4]
 80040f2:	799b      	ldrb	r3, [r3, #6]
 80040f4:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 80040f6:	0029      	movs	r1, r5
 80040f8:	0020      	movs	r0, r4
 80040fa:	f010 f975 	bl	80143e8 <strcat>
 80040fe:	2601      	movs	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8004100:	4d6d      	ldr	r5, [pc, #436]	; (80042b8 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8004102:	4b77      	ldr	r3, [pc, #476]	; (80042e0 <DisplayModuleStatus+0x278>)
 8004104:	4698      	mov	r8, r3
 8004106:	e00e      	b.n	8004126 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8004108:	4b6b      	ldr	r3, [pc, #428]	; (80042b8 <DisplayModuleStatus+0x250>)
 800410a:	4a76      	ldr	r2, [pc, #472]	; (80042e4 <DisplayModuleStatus+0x27c>)
 800410c:	6811      	ldr	r1, [r2, #0]
 800410e:	6019      	str	r1, [r3, #0]
 8004110:	8891      	ldrh	r1, [r2, #4]
 8004112:	8099      	strh	r1, [r3, #4]
 8004114:	7992      	ldrb	r2, [r2, #6]
 8004116:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004118:	4967      	ldr	r1, [pc, #412]	; (80042b8 <DisplayModuleStatus+0x250>)
 800411a:	0020      	movs	r0, r4
 800411c:	f010 f964 	bl	80143e8 <strcat>
 8004120:	3601      	adds	r6, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8004122:	2e04      	cmp	r6, #4
 8004124:	d039      	beq.n	800419a <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8004126:	0032      	movs	r2, r6
 8004128:	496f      	ldr	r1, [pc, #444]	; (80042e8 <DisplayModuleStatus+0x280>)
 800412a:	0028      	movs	r0, r5
 800412c:	f010 f93c 	bl	80143a8 <siprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004130:	0029      	movs	r1, r5
 8004132:	0020      	movs	r0, r4
 8004134:	f010 f958 	bl	80143e8 <strcat>
		switch(portStatus[i]){
 8004138:	4643      	mov	r3, r8
 800413a:	5cf3      	ldrb	r3, [r6, r3]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d8eb      	bhi.n	8004118 <DisplayModuleStatus+0xb0>
 8004140:	4643      	mov	r3, r8
 8004142:	5cf3      	ldrb	r3, [r6, r3]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4a69      	ldr	r2, [pc, #420]	; (80042ec <DisplayModuleStatus+0x284>)
 8004148:	58d3      	ldr	r3, [r2, r3]
 800414a:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 800414c:	495a      	ldr	r1, [pc, #360]	; (80042b8 <DisplayModuleStatus+0x250>)
 800414e:	4b68      	ldr	r3, [pc, #416]	; (80042f0 <DisplayModuleStatus+0x288>)
 8004150:	000a      	movs	r2, r1
 8004152:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004154:	c283      	stmia	r2!, {r0, r1, r7}
 8004156:	cb03      	ldmia	r3!, {r0, r1}
 8004158:	c203      	stmia	r2!, {r0, r1}
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	7013      	strb	r3, [r2, #0]
				break;
 800415e:	e7db      	b.n	8004118 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004160:	4a55      	ldr	r2, [pc, #340]	; (80042b8 <DisplayModuleStatus+0x250>)
 8004162:	4b64      	ldr	r3, [pc, #400]	; (80042f4 <DisplayModuleStatus+0x28c>)
 8004164:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004166:	c283      	stmia	r2!, {r0, r1, r7}
				break;
 8004168:	e7d6      	b.n	8004118 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800416a:	4953      	ldr	r1, [pc, #332]	; (80042b8 <DisplayModuleStatus+0x250>)
 800416c:	4b62      	ldr	r3, [pc, #392]	; (80042f8 <DisplayModuleStatus+0x290>)
 800416e:	000a      	movs	r2, r1
 8004170:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004172:	c283      	stmia	r2!, {r0, r1, r7}
 8004174:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004176:	c283      	stmia	r2!, {r0, r1, r7}
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	8013      	strh	r3, [r2, #0]
				break;
 800417c:	e7cc      	b.n	8004118 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 800417e:	494e      	ldr	r1, [pc, #312]	; (80042b8 <DisplayModuleStatus+0x250>)
 8004180:	4b5e      	ldr	r3, [pc, #376]	; (80042fc <DisplayModuleStatus+0x294>)
 8004182:	000a      	movs	r2, r1
 8004184:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004186:	c283      	stmia	r2!, {r0, r1, r7}
 8004188:	cb83      	ldmia	r3!, {r0, r1, r7}
 800418a:	c283      	stmia	r2!, {r0, r1, r7}
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	6011      	str	r1, [r2, #0]
 8004190:	8899      	ldrh	r1, [r3, #4]
 8004192:	8091      	strh	r1, [r2, #4]
 8004194:	799b      	ldrb	r3, [r3, #6]
 8004196:	7193      	strb	r3, [r2, #6]
				break;
 8004198:	e7be      	b.n	8004118 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800419a:	4947      	ldr	r1, [pc, #284]	; (80042b8 <DisplayModuleStatus+0x250>)
 800419c:	4b58      	ldr	r3, [pc, #352]	; (8004300 <DisplayModuleStatus+0x298>)
 800419e:	000a      	movs	r2, r1
 80041a0:	cb61      	ldmia	r3!, {r0, r5, r6}
 80041a2:	c261      	stmia	r2!, {r0, r5, r6}
 80041a4:	cb61      	ldmia	r3!, {r0, r5, r6}
 80041a6:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 80041a8:	0020      	movs	r0, r4
 80041aa:	f010 f91d 	bl	80143e8 <strcat>
 80041ae:	4e55      	ldr	r6, [pc, #340]	; (8004304 <DisplayModuleStatus+0x29c>)
 80041b0:	2701      	movs	r7, #1
 80041b2:	e00d      	b.n	80041d0 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80041b4:	4d40      	ldr	r5, [pc, #256]	; (80042b8 <DisplayModuleStatus+0x250>)
 80041b6:	003a      	movs	r2, r7
 80041b8:	4953      	ldr	r1, [pc, #332]	; (8004308 <DisplayModuleStatus+0x2a0>)
 80041ba:	0028      	movs	r0, r5
 80041bc:	f010 f8f4 	bl	80143a8 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041c0:	0029      	movs	r1, r5
 80041c2:	0020      	movs	r0, r4
 80041c4:	f010 f910 	bl	80143e8 <strcat>
 80041c8:	3701      	adds	r7, #1
 80041ca:	3638      	adds	r6, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80041cc:	2f07      	cmp	r7, #7
 80041ce:	d018      	beq.n	8004202 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 80041d0:	6833      	ldr	r3, [r6, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0ee      	beq.n	80041b4 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80041d6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80041d8:	f006 f97a 	bl	800a4d0 <GetPort>
 80041dc:	0005      	movs	r5, r0
 80041de:	00bb      	lsls	r3, r7, #2
 80041e0:	3b04      	subs	r3, #4
 80041e2:	4a4a      	ldr	r2, [pc, #296]	; (800430c <DisplayModuleStatus+0x2a4>)
 80041e4:	58d0      	ldr	r0, [r2, r3]
 80041e6:	f006 f973 	bl	800a4d0 <GetPort>
 80041ea:	9000      	str	r0, [sp, #0]
 80041ec:	002b      	movs	r3, r5
 80041ee:	003a      	movs	r2, r7
 80041f0:	4947      	ldr	r1, [pc, #284]	; (8004310 <DisplayModuleStatus+0x2a8>)
 80041f2:	4831      	ldr	r0, [pc, #196]	; (80042b8 <DisplayModuleStatus+0x250>)
 80041f4:	f010 f8d8 	bl	80143a8 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80041f8:	492f      	ldr	r1, [pc, #188]	; (80042b8 <DisplayModuleStatus+0x250>)
 80041fa:	0020      	movs	r0, r4
 80041fc:	f010 f8f4 	bl	80143e8 <strcat>
 8004200:	e7e2      	b.n	80041c8 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8004202:	0020      	movs	r0, r4
 8004204:	f7fb ff88 	bl	8000118 <strlen>
 8004208:	1820      	adds	r0, r4, r0
 800420a:	2203      	movs	r2, #3
 800420c:	4941      	ldr	r1, [pc, #260]	; (8004314 <DisplayModuleStatus+0x2ac>)
 800420e:	f00f fb34 	bl	801387a <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8004212:	0020      	movs	r0, r4
 8004214:	f7fb ff80 	bl	8000118 <strlen>
 8004218:	1820      	adds	r0, r4, r0
 800421a:	221d      	movs	r2, #29
 800421c:	493e      	ldr	r1, [pc, #248]	; (8004318 <DisplayModuleStatus+0x2b0>)
 800421e:	f00f fb2c 	bl	801387a <memcpy>
	temp =strlen((char* )pcOutputString);
 8004222:	0020      	movs	r0, r4
 8004224:	f7fb ff78 	bl	8000118 <strlen>
 8004228:	4680      	mov	r8, r0
 800422a:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800422c:	4e3b      	ldr	r6, [pc, #236]	; (800431c <DisplayModuleStatus+0x2b4>)
 800422e:	4f21      	ldr	r7, [pc, #132]	; (80042b4 <DisplayModuleStatus+0x24c>)
 8004230:	e002      	b.n	8004238 <DisplayModuleStatus+0x1d0>
 8004232:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004234:	2d03      	cmp	r5, #3
 8004236:	d013      	beq.n	8004260 <DisplayModuleStatus+0x1f8>
 8004238:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800423a:	783b      	ldrb	r3, [r7, #0]
 800423c:	3b01      	subs	r3, #1
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	5b99      	ldrh	r1, [r3, r6]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	4113      	asrs	r3, r2
 8004248:	420b      	tst	r3, r1
 800424a:	d0f2      	beq.n	8004232 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 800424c:	002a      	movs	r2, r5
 800424e:	4934      	ldr	r1, [pc, #208]	; (8004320 <DisplayModuleStatus+0x2b8>)
 8004250:	4819      	ldr	r0, [pc, #100]	; (80042b8 <DisplayModuleStatus+0x250>)
 8004252:	f010 f8a9 	bl	80143a8 <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004256:	4918      	ldr	r1, [pc, #96]	; (80042b8 <DisplayModuleStatus+0x250>)
 8004258:	0020      	movs	r0, r4
 800425a:	f010 f8c5 	bl	80143e8 <strcat>
 800425e:	e7e8      	b.n	8004232 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004260:	0020      	movs	r0, r4
 8004262:	f7fb ff59 	bl	8000118 <strlen>
 8004266:	4643      	mov	r3, r8
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	0c1b      	lsrs	r3, r3, #16
 800426c:	4298      	cmp	r0, r3
 800426e:	d00e      	beq.n	800428e <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004270:	0020      	movs	r0, r4
 8004272:	f7fb ff51 	bl	8000118 <strlen>
 8004276:	1820      	adds	r0, r4, r0
 8004278:	2203      	movs	r2, #3
 800427a:	4926      	ldr	r1, [pc, #152]	; (8004314 <DisplayModuleStatus+0x2ac>)
 800427c:	f00f fafd 	bl	801387a <memcpy>
	
	/* Display output */
	if(port)
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8004286:	b004      	add	sp, #16
 8004288:	bc04      	pop	{r2}
 800428a:	4690      	mov	r8, r2
 800428c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 800428e:	1820      	adds	r0, r4, r0
 8004290:	2205      	movs	r2, #5
 8004292:	4924      	ldr	r1, [pc, #144]	; (8004324 <DisplayModuleStatus+0x2bc>)
 8004294:	f00f faf1 	bl	801387a <memcpy>
 8004298:	e7ea      	b.n	8004270 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800429a:	0020      	movs	r0, r4
 800429c:	f7fb ff3c 	bl	8000118 <strlen>
 80042a0:	b282      	uxth	r2, r0
 80042a2:	2301      	movs	r3, #1
 80042a4:	425b      	negs	r3, r3
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	3333      	adds	r3, #51	; 0x33
 80042aa:	0021      	movs	r1, r4
 80042ac:	9803      	ldr	r0, [sp, #12]
 80042ae:	f009 ff7b 	bl	800e1a8 <writePxMutex>
}
 80042b2:	e7e8      	b.n	8004286 <DisplayModuleStatus+0x21e>
 80042b4:	20000806 	.word	0x20000806
 80042b8:	20000820 	.word	0x20000820
 80042bc:	08017318 	.word	0x08017318
 80042c0:	200002b0 	.word	0x200002b0
 80042c4:	08017334 	.word	0x08017334
 80042c8:	08017350 	.word	0x08017350
 80042cc:	08017370 	.word	0x08017370
 80042d0:	0801737c 	.word	0x0801737c
 80042d4:	08017394 	.word	0x08017394
 80042d8:	080173a0 	.word	0x080173a0
 80042dc:	080173bc 	.word	0x080173bc
 80042e0:	20000870 	.word	0x20000870
 80042e4:	080173d8 	.word	0x080173d8
 80042e8:	080173d0 	.word	0x080173d0
 80042ec:	080172f4 	.word	0x080172f4
 80042f0:	080173e0 	.word	0x080173e0
 80042f4:	080173f8 	.word	0x080173f8
 80042f8:	08017404 	.word	0x08017404
 80042fc:	08017420 	.word	0x08017420
 8004300:	08017440 	.word	0x08017440
 8004304:	200011ec 	.word	0x200011ec
 8004308:	08017458 	.word	0x08017458
 800430c:	20000ccc 	.word	0x20000ccc
 8004310:	08017474 	.word	0x08017474
 8004314:	080173cc 	.word	0x080173cc
 8004318:	080174a4 	.word	0x080174a4
 800431c:	20006738 	.word	0x20006738
 8004320:	080174c4 	.word	0x080174c4
 8004324:	080174cc 	.word	0x080174cc

08004328 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432a:	46c6      	mov	lr, r8
 800432c:	b500      	push	{lr}
 800432e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004330:	4929      	ldr	r1, [pc, #164]	; (80043d8 <GetID+0xb0>)
 8004332:	f7fb fee7 	bl	8000104 <strcmp>
 8004336:	2800      	cmp	r0, #0
 8004338:	d010      	beq.n	800435c <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800433a:	4928      	ldr	r1, [pc, #160]	; (80043dc <GetID+0xb4>)
 800433c:	0028      	movs	r0, r5
 800433e:	f7fb fee1 	bl	8000104 <strcmp>
 8004342:	2800      	cmp	r0, #0
 8004344:	d045      	beq.n	80043d2 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004346:	782b      	ldrb	r3, [r5, #0]
 8004348:	4698      	mov	r8, r3
 800434a:	2b23      	cmp	r3, #35	; 0x23
 800434c:	d00b      	beq.n	8004366 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <GetID+0xb8>)
 8004350:	781f      	ldrb	r7, [r3, #0]
 8004352:	2f00      	cmp	r7, #0
 8004354:	d02a      	beq.n	80043ac <GetID+0x84>
 8004356:	4e23      	ldr	r6, [pc, #140]	; (80043e4 <GetID+0xbc>)
 8004358:	2400      	movs	r4, #0
 800435a:	e01c      	b.n	8004396 <GetID+0x6e>
		return myID;
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <GetID+0xc0>)
 800435e:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004360:	bc04      	pop	{r2}
 8004362:	4690      	mov	r8, r2
 8004364:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 8004366:	1c68      	adds	r0, r5, #1
 8004368:	f00f fa15 	bl	8013796 <atol>
 800436c:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <GetID+0x52>
 8004372:	4a1b      	ldr	r2, [pc, #108]	; (80043e0 <GetID+0xb8>)
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d206      	bcs.n	8004388 <GetID+0x60>
		else if(id == myID)
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <GetID+0xc0>)
 800437c:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 800437e:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004380:	429a      	cmp	r2, r3
 8004382:	d1ed      	bne.n	8004360 <GetID+0x38>
			return myID;
 8004384:	b210      	sxth	r0, r2
 8004386:	e7eb      	b.n	8004360 <GetID+0x38>
			return id;
 8004388:	b218      	sxth	r0, r3
 800438a:	e7e9      	b.n	8004360 <GetID+0x38>
		for(i =0; i < N; i++){
 800438c:	3401      	adds	r4, #1
 800438e:	b2e4      	uxtb	r4, r4
 8004390:	360a      	adds	r6, #10
 8004392:	42bc      	cmp	r4, r7
 8004394:	d00a      	beq.n	80043ac <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 8004396:	0031      	movs	r1, r6
 8004398:	0028      	movs	r0, r5
 800439a:	f7fb feb3 	bl	8000104 <strcmp>
 800439e:	2800      	cmp	r0, #0
 80043a0:	d1f4      	bne.n	800438c <GetID+0x64>
 80043a2:	4643      	mov	r3, r8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f1      	beq.n	800438c <GetID+0x64>
				return (i);
 80043a8:	b220      	sxth	r0, r4
 80043aa:	e7d9      	b.n	8004360 <GetID+0x38>
 80043ac:	4f0f      	ldr	r7, [pc, #60]	; (80043ec <GetID+0xc4>)
		for(i =0; i < N; i++){
 80043ae:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 80043b0:	0039      	movs	r1, r7
 80043b2:	0028      	movs	r0, r5
 80043b4:	f7fb fea6 	bl	8000104 <strcmp>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d005      	beq.n	80043c8 <GetID+0xa0>
 80043bc:	3601      	adds	r6, #1
 80043be:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80043c0:	2e0a      	cmp	r6, #10
 80043c2:	d1f5      	bne.n	80043b0 <GetID+0x88>
		return BOS_ERR_WrongName;
 80043c4:	2064      	movs	r0, #100	; 0x64
 80043c6:	e7cb      	b.n	8004360 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 80043c8:	0234      	lsls	r4, r6, #8
 80043ca:	20fe      	movs	r0, #254	; 0xfe
 80043cc:	4320      	orrs	r0, r4
 80043ce:	b200      	sxth	r0, r0
 80043d0:	e7c6      	b.n	8004360 <GetID+0x38>
		return BOS_BROADCAST;
 80043d2:	20ff      	movs	r0, #255	; 0xff
 80043d4:	e7c4      	b.n	8004360 <GetID+0x38>
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	08017558 	.word	0x08017558
 80043dc:	0801755c 	.word	0x0801755c
 80043e0:	20000030 	.word	0x20000030
 80043e4:	200006f8 	.word	0x200006f8
 80043e8:	20000806 	.word	0x20000806
 80043ec:	200005f0 	.word	0x200005f0

080043f0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b083      	sub	sp, #12
 80043f4:	9001      	str	r0, [sp, #4]
 80043f6:	000d      	movs	r5, r1
 80043f8:	4c2a      	ldr	r4, [pc, #168]	; (80044a4 <NameModule+0xb4>)
 80043fa:	0027      	movs	r7, r4
 80043fc:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80043fe:	0021      	movs	r1, r4
 8004400:	0028      	movs	r0, r5
 8004402:	f7fb fe7f 	bl	8000104 <strcmp>
 8004406:	2800      	cmp	r0, #0
 8004408:	d043      	beq.n	8004492 <NameModule+0xa2>
 800440a:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 800440c:	42bc      	cmp	r4, r7
 800440e:	d1f6      	bne.n	80043fe <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <NameModule+0xb8>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d90f      	bls.n	8004438 <NameModule+0x48>
 8004418:	4c24      	ldr	r4, [pc, #144]	; (80044ac <NameModule+0xbc>)
 800441a:	009f      	lsls	r7, r3, #2
 800441c:	18ff      	adds	r7, r7, r3
 800441e:	007f      	lsls	r7, r7, #1
 8004420:	0023      	movs	r3, r4
 8004422:	3b0a      	subs	r3, #10
 8004424:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004426:	0021      	movs	r1, r4
 8004428:	0028      	movs	r0, r5
 800442a:	f7fb fe6b 	bl	8000104 <strcmp>
 800442e:	2800      	cmp	r0, #0
 8004430:	d031      	beq.n	8004496 <NameModule+0xa6>
 8004432:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004434:	42bc      	cmp	r4, r7
 8004436:	d1f6      	bne.n	8004426 <NameModule+0x36>
 8004438:	4c1d      	ldr	r4, [pc, #116]	; (80044b0 <NameModule+0xc0>)
 800443a:	0027      	movs	r7, r4
 800443c:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 800443e:	0021      	movs	r1, r4
 8004440:	0028      	movs	r0, r5
 8004442:	f7fb fe5f 	bl	8000104 <strcmp>
 8004446:	2800      	cmp	r0, #0
 8004448:	d028      	beq.n	800449c <NameModule+0xac>
 800444a:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800444c:	42bc      	cmp	r4, r7
 800444e:	d1f6      	bne.n	800443e <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004450:	4c18      	ldr	r4, [pc, #96]	; (80044b4 <NameModule+0xc4>)
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <NameModule+0xc8>)
 8004454:	601c      	str	r4, [r3, #0]
 8004456:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800445c:	0038      	movs	r0, r7
 800445e:	f7fb fe5b 	bl	8000118 <strlen>
 8004462:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004464:	0039      	movs	r1, r7
 8004466:	0028      	movs	r0, r5
 8004468:	f00f ffe2 	bl	8014430 <strncmp>
 800446c:	2800      	cmp	r0, #0
 800446e:	d017      	beq.n	80044a0 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004470:	6864      	ldr	r4, [r4, #4]
 8004472:	6034      	str	r4, [r6, #0]
 8004474:	2c00      	cmp	r4, #0
 8004476:	d1ef      	bne.n	8004458 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8004478:	9b01      	ldr	r3, [sp, #4]
 800447a:	0098      	lsls	r0, r3, #2
 800447c:	469c      	mov	ip, r3
 800447e:	4460      	add	r0, ip
 8004480:	0040      	lsls	r0, r0, #1
 8004482:	4e0e      	ldr	r6, [pc, #56]	; (80044bc <NameModule+0xcc>)
 8004484:	1980      	adds	r0, r0, r6
 8004486:	0029      	movs	r1, r5
 8004488:	f00f ffca 	bl	8014420 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 800448c:	f7ff f89c 	bl	80035c8 <SaveEEalias>
	
	return result;
 8004490:	e002      	b.n	8004498 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004492:	2006      	movs	r0, #6
 8004494:	e000      	b.n	8004498 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 8004496:	2007      	movs	r0, #7
}
 8004498:	b003      	add	sp, #12
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800449c:	2007      	movs	r0, #7
 800449e:	e7fb      	b.n	8004498 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80044a0:	2008      	movs	r0, #8
 80044a2:	e7f9      	b.n	8004498 <NameModule+0xa8>
 80044a4:	08017308 	.word	0x08017308
 80044a8:	20000030 	.word	0x20000030
 80044ac:	20000702 	.word	0x20000702
 80044b0:	200005f0 	.word	0x200005f0
 80044b4:	200000b0 	.word	0x200000b0
 80044b8:	20000874 	.word	0x20000874
 80044bc:	200006f8 	.word	0x200006f8

080044c0 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	46c6      	mov	lr, r8
 80044c4:	b500      	push	{lr}
 80044c6:	0007      	movs	r7, r0
 80044c8:	000e      	movs	r6, r1
 80044ca:	4d3a      	ldr	r5, [pc, #232]	; (80045b4 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80044cc:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80044ce:	0029      	movs	r1, r5
 80044d0:	0030      	movs	r0, r6
 80044d2:	f7fb fe17 	bl	8000104 <strcmp>
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d050      	beq.n	800457c <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 80044da:	3401      	adds	r4, #1
 80044dc:	350a      	adds	r5, #10
 80044de:	2c0a      	cmp	r4, #10
 80044e0:	d1f5      	bne.n	80044ce <AddModuleToGroup+0xe>
 80044e2:	4c35      	ldr	r4, [pc, #212]	; (80045b8 <AddModuleToGroup+0xf8>)
 80044e4:	0025      	movs	r5, r4
 80044e6:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80044e8:	0021      	movs	r1, r4
 80044ea:	0030      	movs	r0, r6
 80044ec:	f7fb fe0a 	bl	8000104 <strcmp>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d058      	beq.n	80045a6 <AddModuleToGroup+0xe6>
 80044f4:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80044f6:	42ac      	cmp	r4, r5
 80044f8:	d1f6      	bne.n	80044e8 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80044fa:	4b30      	ldr	r3, [pc, #192]	; (80045bc <AddModuleToGroup+0xfc>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d90f      	bls.n	8004522 <AddModuleToGroup+0x62>
 8004502:	4c2f      	ldr	r4, [pc, #188]	; (80045c0 <AddModuleToGroup+0x100>)
 8004504:	009d      	lsls	r5, r3, #2
 8004506:	18ed      	adds	r5, r5, r3
 8004508:	006d      	lsls	r5, r5, #1
 800450a:	0023      	movs	r3, r4
 800450c:	3b0a      	subs	r3, #10
 800450e:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 8004510:	0021      	movs	r1, r4
 8004512:	0030      	movs	r0, r6
 8004514:	f7fb fdf6 	bl	8000104 <strcmp>
 8004518:	2800      	cmp	r0, #0
 800451a:	d046      	beq.n	80045aa <AddModuleToGroup+0xea>
 800451c:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800451e:	42ac      	cmp	r4, r5
 8004520:	d1f6      	bne.n	8004510 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004522:	4c28      	ldr	r4, [pc, #160]	; (80045c4 <AddModuleToGroup+0x104>)
 8004524:	4b28      	ldr	r3, [pc, #160]	; (80045c8 <AddModuleToGroup+0x108>)
 8004526:	601c      	str	r4, [r3, #0]
 8004528:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800452e:	0028      	movs	r0, r5
 8004530:	f7fb fdf2 	bl	8000118 <strlen>
 8004534:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004536:	0029      	movs	r1, r5
 8004538:	0030      	movs	r0, r6
 800453a:	f00f ff79 	bl	8014430 <strncmp>
 800453e:	2800      	cmp	r0, #0
 8004540:	d035      	beq.n	80045ae <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004542:	6864      	ldr	r4, [r4, #4]
 8004544:	4643      	mov	r3, r8
 8004546:	601c      	str	r4, [r3, #0]
 8004548:	2c00      	cmp	r4, #0
 800454a:	d1ee      	bne.n	800452a <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 800454c:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <AddModuleToGroup+0xf4>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01e      	beq.n	8004592 <AddModuleToGroup+0xd2>
 8004554:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <AddModuleToGroup+0xf4>)
 8004556:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004558:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	2a00      	cmp	r2, #0
 800455e:	d019      	beq.n	8004594 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004560:	3401      	adds	r4, #1
 8004562:	330a      	adds	r3, #10
 8004564:	2c0a      	cmp	r4, #10
 8004566:	d1f8      	bne.n	800455a <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 8004568:	3f01      	subs	r7, #1
 800456a:	4918      	ldr	r1, [pc, #96]	; (80045cc <AddModuleToGroup+0x10c>)
 800456c:	007f      	lsls	r7, r7, #1
 800456e:	2201      	movs	r2, #1
 8004570:	40a2      	lsls	r2, r4
 8004572:	5a7b      	ldrh	r3, [r7, r1]
 8004574:	4313      	orrs	r3, r2
 8004576:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 8004578:	2000      	movs	r0, #0
 800457a:	e007      	b.n	800458c <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 800457c:	3f01      	subs	r7, #1
 800457e:	4913      	ldr	r1, [pc, #76]	; (80045cc <AddModuleToGroup+0x10c>)
 8004580:	007f      	lsls	r7, r7, #1
 8004582:	2201      	movs	r2, #1
 8004584:	40a2      	lsls	r2, r4
 8004586:	5a7b      	ldrh	r3, [r7, r1]
 8004588:	4313      	orrs	r3, r2
 800458a:	527b      	strh	r3, [r7, r1]
}
 800458c:	bc04      	pop	{r2}
 800458e:	4690      	mov	r8, r2
 8004590:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004592:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004594:	00a0      	lsls	r0, r4, #2
 8004596:	1900      	adds	r0, r0, r4
 8004598:	0040      	lsls	r0, r0, #1
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <AddModuleToGroup+0xf4>)
 800459c:	1818      	adds	r0, r3, r0
 800459e:	0031      	movs	r1, r6
 80045a0:	f00f ff3e 	bl	8014420 <strcpy>
			break;
 80045a4:	e7e0      	b.n	8004568 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 80045a6:	2006      	movs	r0, #6
 80045a8:	e7f0      	b.n	800458c <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 80045aa:	2007      	movs	r0, #7
 80045ac:	e7ee      	b.n	800458c <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80045ae:	2008      	movs	r0, #8
 80045b0:	e7ec      	b.n	800458c <AddModuleToGroup+0xcc>
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	200005f0 	.word	0x200005f0
 80045b8:	08017308 	.word	0x08017308
 80045bc:	20000030 	.word	0x20000030
 80045c0:	20000702 	.word	0x20000702
 80045c4:	200000b0 	.word	0x200000b0
 80045c8:	20000878 	.word	0x20000878
 80045cc:	20000654 	.word	0x20000654

080045d0 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80045d0:	b510      	push	{r4, lr}
 80045d2:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80045d4:	201e      	movs	r0, #30
 80045d6:	f00f f91b 	bl	8013810 <malloc>
 80045da:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80045dc:	221e      	movs	r2, #30
 80045de:	2100      	movs	r1, #0
 80045e0:	f00f f954 	bl	801388c <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80045e4:	4908      	ldr	r1, [pc, #32]	; (8004608 <GetDateString+0x38>)
 80045e6:	7d8b      	ldrb	r3, [r1, #22]
 80045e8:	7d0a      	ldrb	r2, [r1, #20]
 80045ea:	3a01      	subs	r2, #1
 80045ec:	0092      	lsls	r2, r2, #2
 80045ee:	4807      	ldr	r0, [pc, #28]	; (800460c <GetDateString+0x3c>)
 80045f0:	5812      	ldr	r2, [r2, r0]
 80045f2:	8b08      	ldrh	r0, [r1, #24]
 80045f4:	9001      	str	r0, [sp, #4]
 80045f6:	7d49      	ldrb	r1, [r1, #21]
 80045f8:	9100      	str	r1, [sp, #0]
 80045fa:	4905      	ldr	r1, [pc, #20]	; (8004610 <GetDateString+0x40>)
 80045fc:	0020      	movs	r0, r4
 80045fe:	f00f fed3 	bl	80143a8 <siprintf>
	return buffer;
}
 8004602:	0020      	movs	r0, r4
 8004604:	b002      	add	sp, #8
 8004606:	bd10      	pop	{r4, pc}
 8004608:	20006270 	.word	0x20006270
 800460c:	08017b00 	.word	0x08017b00
 8004610:	08017578 	.word	0x08017578

08004614 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004614:	b500      	push	{lr}
 8004616:	b085      	sub	sp, #20
 8004618:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <Bridge+0x24>)
 800461c:	7819      	ldrb	r1, [r3, #0]
 800461e:	2301      	movs	r3, #1
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	3b02      	subs	r3, #2
 8004624:	9302      	str	r3, [sp, #8]
 8004626:	9301      	str	r3, [sp, #4]
 8004628:	3303      	adds	r3, #3
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	000b      	movs	r3, r1
 800462e:	f003 fde9 	bl	8008204 <StartScastDMAStream>
}
 8004632:	b005      	add	sp, #20
 8004634:	bd00      	pop	{pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	20000806 	.word	0x20000806

0800463c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800463c:	b530      	push	{r4, r5, lr}
 800463e:	b087      	sub	sp, #28
 8004640:	0004      	movs	r4, r0
 8004642:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004644:	2300      	movs	r3, #0
 8004646:	9304      	str	r3, [sp, #16]
 8004648:	9303      	str	r3, [sp, #12]
 800464a:	9302      	str	r3, [sp, #8]
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	2000      	movs	r0, #0
 8004656:	f7fe fff9 	bl	800364c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800465a:	1e62      	subs	r2, r4, #1
 800465c:	00d3      	lsls	r3, r2, #3
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <Unbridge+0x78>)
 8004664:	589b      	ldr	r3, [r3, r2]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d015      	beq.n	8004696 <Unbridge+0x5a>
 800466a:	1e6a      	subs	r2, r5, #1
 800466c:	00d3      	lsls	r3, r2, #3
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <Unbridge+0x78>)
 8004674:	589b      	ldr	r3, [r3, r2]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800467a:	0020      	movs	r0, r4
 800467c:	f007 f960 	bl	800b940 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004680:	2000      	movs	r0, #0
 8004682:	e006      	b.n	8004692 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004684:	0020      	movs	r0, r4
 8004686:	f007 f95b 	bl	800b940 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800468a:	0028      	movs	r0, r5
 800468c:	f007 f958 	bl	800b940 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004690:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 8004692:	b007      	add	sp, #28
 8004694:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 8004696:	1e6a      	subs	r2, r5, #1
 8004698:	00d3      	lsls	r3, r2, #3
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <Unbridge+0x78>)
 80046a0:	589b      	ldr	r3, [r3, r2]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80046a6:	0028      	movs	r0, r5
 80046a8:	f007 f94a 	bl	800b940 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80046ac:	2000      	movs	r0, #0
 80046ae:	e7f0      	b.n	8004692 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80046b0:	2068      	movs	r0, #104	; 0x68
 80046b2:	e7ee      	b.n	8004692 <Unbridge+0x56>
 80046b4:	200011ec 	.word	0x200011ec

080046b8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80046bc:	7804      	ldrb	r4, [r0, #0]
 80046be:	2c00      	cmp	r4, #0
 80046c0:	d010      	beq.n	80046e4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80046c2:	2603      	movs	r6, #3
 80046c4:	e004      	b.n	80046d0 <StringToLowerCase+0x18>
 80046c6:	702a      	strb	r2, [r5, #0]
 80046c8:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80046ca:	782c      	ldrb	r4, [r5, #0]
 80046cc:	2c00      	cmp	r4, #0
 80046ce:	d009      	beq.n	80046e4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80046d0:	f00f f890 	bl	80137f4 <__locale_ctype_ptr>
 80046d4:	1900      	adds	r0, r0, r4
 80046d6:	7843      	ldrb	r3, [r0, #1]
 80046d8:	4033      	ands	r3, r6
 80046da:	0022      	movs	r2, r4
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d1f2      	bne.n	80046c6 <StringToLowerCase+0xe>
 80046e0:	3220      	adds	r2, #32
 80046e2:	e7f0      	b.n	80046c6 <StringToLowerCase+0xe>
	}
}
 80046e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080046e8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80046e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ea:	46c6      	mov	lr, r8
 80046ec:	b500      	push	{lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80046f2:	4bdc      	ldr	r3, [pc, #880]	; (8004a64 <ParseSnippetCondition+0x37c>)
 80046f4:	781c      	ldrb	r4, [r3, #0]
 80046f6:	2c05      	cmp	r4, #5
 80046f8:	d100      	bne.n	80046fc <ParseSnippetCondition+0x14>
 80046fa:	e210      	b.n	8004b1e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80046fc:	49da      	ldr	r1, [pc, #872]	; (8004a68 <ParseSnippetCondition+0x380>)
 80046fe:	00a3      	lsls	r3, r4, #2
 8004700:	191a      	adds	r2, r3, r4
 8004702:	0092      	lsls	r2, r2, #2
 8004704:	2000      	movs	r0, #0
 8004706:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004708:	191a      	adds	r2, r3, r4
 800470a:	0092      	lsls	r2, r2, #2
 800470c:	188a      	adds	r2, r1, r2
 800470e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004710:	1918      	adds	r0, r3, r4
 8004712:	0080      	lsls	r0, r0, #2
 8004714:	3002      	adds	r0, #2
 8004716:	1840      	adds	r0, r0, r1
 8004718:	2204      	movs	r2, #4
 800471a:	2100      	movs	r1, #0
 800471c:	f00f f8b6 	bl	801388c <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004720:	782b      	ldrb	r3, [r5, #0]
 8004722:	2b62      	cmp	r3, #98	; 0x62
 8004724:	d102      	bne.n	800472c <ParseSnippetCondition+0x44>
 8004726:	78ab      	ldrb	r3, [r5, #2]
 8004728:	2b2e      	cmp	r3, #46	; 0x2e
 800472a:	d032      	beq.n	8004792 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800472c:	4ecf      	ldr	r6, [pc, #828]	; (8004a6c <ParseSnippetCondition+0x384>)
 800472e:	0029      	movs	r1, r5
 8004730:	0030      	movs	r0, r6
 8004732:	f00f fe75 	bl	8014420 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004736:	4cce      	ldr	r4, [pc, #824]	; (8004a70 <ParseSnippetCondition+0x388>)
 8004738:	0021      	movs	r1, r4
 800473a:	0030      	movs	r0, r6
 800473c:	f010 fcf0 	bl	8015120 <strtok>
 8004740:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004742:	0021      	movs	r1, r4
 8004744:	2000      	movs	r0, #0
 8004746:	f010 fceb 	bl	8015120 <strtok>
 800474a:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800474c:	0021      	movs	r1, r4
 800474e:	2000      	movs	r0, #0
 8004750:	f010 fce6 	bl	8015120 <strtok>
 8004754:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004756:	2d00      	cmp	r5, #0
 8004758:	d100      	bne.n	800475c <ParseSnippetCondition+0x74>
 800475a:	e1e5      	b.n	8004b28 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800475c:	0028      	movs	r0, r5
 800475e:	f7ff f88f 	bl	8003880 <IsModuleParameter>
 8004762:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004764:	d100      	bne.n	8004768 <ParseSnippetCondition+0x80>
 8004766:	e18f      	b.n	8004a88 <ParseSnippetCondition+0x3a0>
 8004768:	2e00      	cmp	r6, #0
 800476a:	d000      	beq.n	800476e <ParseSnippetCondition+0x86>
 800476c:	e18e      	b.n	8004a8c <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 800476e:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004770:	2c00      	cmp	r4, #0
 8004772:	d000      	beq.n	8004776 <ParseSnippetCondition+0x8e>
 8004774:	e1d4      	b.n	8004b20 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004776:	4cbb      	ldr	r4, [pc, #748]	; (8004a64 <ParseSnippetCondition+0x37c>)
 8004778:	7823      	ldrb	r3, [r4, #0]
 800477a:	49bb      	ldr	r1, [pc, #748]	; (8004a68 <ParseSnippetCondition+0x380>)
 800477c:	009a      	lsls	r2, r3, #2
 800477e:	18d0      	adds	r0, r2, r3
 8004780:	0080      	lsls	r0, r0, #2
 8004782:	3602      	adds	r6, #2
 8004784:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004786:	180a      	adds	r2, r1, r0
 8004788:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800478a:	3301      	adds	r3, #1
 800478c:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 800478e:	2000      	movs	r0, #0
 8004790:	e1c6      	b.n	8004b20 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004792:	786e      	ldrb	r6, [r5, #1]
 8004794:	3e30      	subs	r6, #48	; 0x30
 8004796:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 8004798:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800479a:	2e03      	cmp	r6, #3
 800479c:	d900      	bls.n	80047a0 <ParseSnippetCondition+0xb8>
 800479e:	e1bf      	b.n	8004b20 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80047a0:	4ab1      	ldr	r2, [pc, #708]	; (8004a68 <ParseSnippetCondition+0x380>)
 80047a2:	00a3      	lsls	r3, r4, #2
 80047a4:	1919      	adds	r1, r3, r4
 80047a6:	0089      	lsls	r1, r1, #2
 80047a8:	3001      	adds	r0, #1
 80047aa:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80047ac:	1853      	adds	r3, r2, r1
 80047ae:	2200      	movs	r2, #0
 80047b0:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80047b2:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80047b4:	1cef      	adds	r7, r5, #3
 80047b6:	3207      	adds	r2, #7
 80047b8:	49ae      	ldr	r1, [pc, #696]	; (8004a74 <ParseSnippetCondition+0x38c>)
 80047ba:	0038      	movs	r0, r7
 80047bc:	f00f fe38 	bl	8014430 <strncmp>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d121      	bne.n	8004808 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80047c4:	00a3      	lsls	r3, r4, #2
 80047c6:	191c      	adds	r4, r3, r4
 80047c8:	00a4      	lsls	r4, r4, #2
 80047ca:	4ba7      	ldr	r3, [pc, #668]	; (8004a68 <ParseSnippetCondition+0x380>)
 80047cc:	191c      	adds	r4, r3, r4
 80047ce:	2305      	movs	r3, #5
 80047d0:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80047d2:	00f2      	lsls	r2, r6, #3
 80047d4:	1992      	adds	r2, r2, r6
 80047d6:	4ba8      	ldr	r3, [pc, #672]	; (8004a78 <ParseSnippetCondition+0x390>)
 80047d8:	189b      	adds	r3, r3, r2
 80047da:	7a1b      	ldrb	r3, [r3, #8]
 80047dc:	07db      	lsls	r3, r3, #31
 80047de:	d504      	bpl.n	80047ea <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80047e0:	4aa0      	ldr	r2, [pc, #640]	; (8004a64 <ParseSnippetCondition+0x37c>)
 80047e2:	7813      	ldrb	r3, [r2, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	7013      	strb	r3, [r2, #0]
 80047e8:	e19a      	b.n	8004b20 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80047ea:	2301      	movs	r3, #1
 80047ec:	9305      	str	r3, [sp, #20]
 80047ee:	2300      	movs	r3, #0
 80047f0:	9304      	str	r3, [sp, #16]
 80047f2:	9303      	str	r3, [sp, #12]
 80047f4:	9302      	str	r3, [sp, #8]
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	2101      	movs	r1, #1
 80047fe:	0030      	movs	r0, r6
 8004800:	f008 faa0 	bl	800cd44 <SetButtonEvents>
				status =BOS_OK;
 8004804:	2000      	movs	r0, #0
 8004806:	e7eb      	b.n	80047e0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004808:	220e      	movs	r2, #14
 800480a:	499c      	ldr	r1, [pc, #624]	; (8004a7c <ParseSnippetCondition+0x394>)
 800480c:	0038      	movs	r0, r7
 800480e:	f00f fe0f 	bl	8014430 <strncmp>
 8004812:	2800      	cmp	r0, #0
 8004814:	d11c      	bne.n	8004850 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004816:	00a3      	lsls	r3, r4, #2
 8004818:	191c      	adds	r4, r3, r4
 800481a:	00a4      	lsls	r4, r4, #2
 800481c:	4b92      	ldr	r3, [pc, #584]	; (8004a68 <ParseSnippetCondition+0x380>)
 800481e:	191c      	adds	r4, r3, r4
 8004820:	2306      	movs	r3, #6
 8004822:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004824:	00f2      	lsls	r2, r6, #3
 8004826:	1992      	adds	r2, r2, r6
 8004828:	4b93      	ldr	r3, [pc, #588]	; (8004a78 <ParseSnippetCondition+0x390>)
 800482a:	189b      	adds	r3, r3, r2
 800482c:	7a1b      	ldrb	r3, [r3, #8]
 800482e:	079b      	lsls	r3, r3, #30
 8004830:	d4d6      	bmi.n	80047e0 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004832:	2301      	movs	r3, #1
 8004834:	9305      	str	r3, [sp, #20]
 8004836:	2300      	movs	r3, #0
 8004838:	9304      	str	r3, [sp, #16]
 800483a:	9303      	str	r3, [sp, #12]
 800483c:	9302      	str	r3, [sp, #8]
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	2100      	movs	r1, #0
 8004846:	0030      	movs	r0, r6
 8004848:	f008 fa7c 	bl	800cd44 <SetButtonEvents>
				status =BOS_OK;
 800484c:	2000      	movs	r0, #0
 800484e:	e7c7      	b.n	80047e0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004850:	220c      	movs	r2, #12
 8004852:	498b      	ldr	r1, [pc, #556]	; (8004a80 <ParseSnippetCondition+0x398>)
 8004854:	0038      	movs	r0, r7
 8004856:	f00f fdeb 	bl	8014430 <strncmp>
 800485a:	2800      	cmp	r0, #0
 800485c:	d17a      	bne.n	8004954 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 800485e:	00f2      	lsls	r2, r6, #3
 8004860:	1992      	adds	r2, r2, r6
 8004862:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <ParseSnippetCondition+0x390>)
 8004864:	189b      	adds	r3, r3, r2
 8004866:	789b      	ldrb	r3, [r3, #2]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d030      	beq.n	80048ce <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 800486c:	00f2      	lsls	r2, r6, #3
 800486e:	1992      	adds	r2, r2, r6
 8004870:	4b81      	ldr	r3, [pc, #516]	; (8004a78 <ParseSnippetCondition+0x390>)
 8004872:	189b      	adds	r3, r3, r2
 8004874:	78db      	ldrb	r3, [r3, #3]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d04a      	beq.n	8004910 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800487a:	00f2      	lsls	r2, r6, #3
 800487c:	1992      	adds	r2, r2, r6
 800487e:	4b7e      	ldr	r3, [pc, #504]	; (8004a78 <ParseSnippetCondition+0x390>)
 8004880:	189b      	adds	r3, r3, r2
 8004882:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004884:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1aa      	bne.n	80047e0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800488a:	4f77      	ldr	r7, [pc, #476]	; (8004a68 <ParseSnippetCondition+0x380>)
 800488c:	00a3      	lsls	r3, r4, #2
 800488e:	191b      	adds	r3, r3, r4
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	18fb      	adds	r3, r7, r3
 8004894:	220b      	movs	r2, #11
 8004896:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004898:	0028      	movs	r0, r5
 800489a:	300f      	adds	r0, #15
 800489c:	f00e ff75 	bl	801378a <atoi>
 80048a0:	b2c0      	uxtb	r0, r0
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <ParseSnippetCondition+0x37c>)
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	0093      	lsls	r3, r2, #2
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	18ff      	adds	r7, r7, r3
 80048ae:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 80048b0:	2301      	movs	r3, #1
 80048b2:	9305      	str	r3, [sp, #20]
 80048b4:	2300      	movs	r3, #0
 80048b6:	9304      	str	r3, [sp, #16]
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9302      	str	r3, [sp, #8]
 80048bc:	9001      	str	r0, [sp, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2100      	movs	r1, #0
 80048c4:	0030      	movs	r0, r6
 80048c6:	f008 fa3d 	bl	800cd44 <SetButtonEvents>
					status =BOS_OK;
 80048ca:	2000      	movs	r0, #0
 80048cc:	e788      	b.n	80047e0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80048ce:	4f66      	ldr	r7, [pc, #408]	; (8004a68 <ParseSnippetCondition+0x380>)
 80048d0:	00a3      	lsls	r3, r4, #2
 80048d2:	191b      	adds	r3, r3, r4
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2209      	movs	r2, #9
 80048da:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80048dc:	0028      	movs	r0, r5
 80048de:	300f      	adds	r0, #15
 80048e0:	f00e ff53 	bl	801378a <atoi>
 80048e4:	b2c3      	uxtb	r3, r0
 80048e6:	4a5f      	ldr	r2, [pc, #380]	; (8004a64 <ParseSnippetCondition+0x37c>)
 80048e8:	7811      	ldrb	r1, [r2, #0]
 80048ea:	008a      	lsls	r2, r1, #2
 80048ec:	1852      	adds	r2, r2, r1
 80048ee:	0092      	lsls	r2, r2, #2
 80048f0:	18bf      	adds	r7, r7, r2
 80048f2:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048f4:	2201      	movs	r2, #1
 80048f6:	9205      	str	r2, [sp, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	9204      	str	r2, [sp, #16]
 80048fc:	9203      	str	r2, [sp, #12]
 80048fe:	9202      	str	r2, [sp, #8]
 8004900:	9201      	str	r2, [sp, #4]
 8004902:	9200      	str	r2, [sp, #0]
 8004904:	2100      	movs	r1, #0
 8004906:	0030      	movs	r0, r6
 8004908:	f008 fa1c 	bl	800cd44 <SetButtonEvents>
					status =BOS_OK;
 800490c:	2000      	movs	r0, #0
 800490e:	e767      	b.n	80047e0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004910:	4f55      	ldr	r7, [pc, #340]	; (8004a68 <ParseSnippetCondition+0x380>)
 8004912:	00a3      	lsls	r3, r4, #2
 8004914:	191b      	adds	r3, r3, r4
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	220a      	movs	r2, #10
 800491c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800491e:	0028      	movs	r0, r5
 8004920:	300f      	adds	r0, #15
 8004922:	f00e ff32 	bl	801378a <atoi>
 8004926:	b2c0      	uxtb	r0, r0
 8004928:	4b4e      	ldr	r3, [pc, #312]	; (8004a64 <ParseSnippetCondition+0x37c>)
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	0093      	lsls	r3, r2, #2
 800492e:	189b      	adds	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	18ff      	adds	r7, r7, r3
 8004934:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004936:	2301      	movs	r3, #1
 8004938:	9305      	str	r3, [sp, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9304      	str	r3, [sp, #16]
 800493e:	9303      	str	r3, [sp, #12]
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	9000      	str	r0, [sp, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	0030      	movs	r0, r6
 800494c:	f008 f9fa 	bl	800cd44 <SetButtonEvents>
					status =BOS_OK;
 8004950:	2000      	movs	r0, #0
 8004952:	e745      	b.n	80047e0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004954:	220d      	movs	r2, #13
 8004956:	494b      	ldr	r1, [pc, #300]	; (8004a84 <ParseSnippetCondition+0x39c>)
 8004958:	0038      	movs	r0, r7
 800495a:	f00f fd69 	bl	8014430 <strncmp>
 800495e:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004960:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004962:	2b00      	cmp	r3, #0
 8004964:	d000      	beq.n	8004968 <ParseSnippetCondition+0x280>
 8004966:	e73b      	b.n	80047e0 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004968:	00f2      	lsls	r2, r6, #3
 800496a:	1992      	adds	r2, r2, r6
 800496c:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <ParseSnippetCondition+0x390>)
 800496e:	189b      	adds	r3, r3, r2
 8004970:	795b      	ldrb	r3, [r3, #5]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d031      	beq.n	80049da <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004976:	00f2      	lsls	r2, r6, #3
 8004978:	1992      	adds	r2, r2, r6
 800497a:	4b3f      	ldr	r3, [pc, #252]	; (8004a78 <ParseSnippetCondition+0x390>)
 800497c:	189b      	adds	r3, r3, r2
 800497e:	799b      	ldrb	r3, [r3, #6]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d04c      	beq.n	8004a1e <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004984:	00f2      	lsls	r2, r6, #3
 8004986:	1992      	adds	r2, r2, r6
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <ParseSnippetCondition+0x390>)
 800498a:	189b      	adds	r3, r3, r2
 800498c:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 800498e:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004990:	2b00      	cmp	r3, #0
 8004992:	d000      	beq.n	8004996 <ParseSnippetCondition+0x2ae>
 8004994:	e724      	b.n	80047e0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004996:	4f34      	ldr	r7, [pc, #208]	; (8004a68 <ParseSnippetCondition+0x380>)
 8004998:	3314      	adds	r3, #20
 800499a:	4698      	mov	r8, r3
 800499c:	435c      	muls	r4, r3
 800499e:	193c      	adds	r4, r7, r4
 80049a0:	3b06      	subs	r3, #6
 80049a2:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80049a4:	0028      	movs	r0, r5
 80049a6:	3010      	adds	r0, #16
 80049a8:	f00e feef 	bl	801378a <atoi>
 80049ac:	b2c0      	uxtb	r0, r0
 80049ae:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <ParseSnippetCondition+0x37c>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	4642      	mov	r2, r8
 80049b4:	4353      	muls	r3, r2
 80049b6:	18ff      	adds	r7, r7, r3
 80049b8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 80049ba:	2301      	movs	r3, #1
 80049bc:	9305      	str	r3, [sp, #20]
 80049be:	9004      	str	r0, [sp, #16]
 80049c0:	2400      	movs	r4, #0
 80049c2:	9403      	str	r4, [sp, #12]
 80049c4:	9402      	str	r4, [sp, #8]
 80049c6:	9401      	str	r4, [sp, #4]
 80049c8:	9400      	str	r4, [sp, #0]
 80049ca:	0023      	movs	r3, r4
 80049cc:	0022      	movs	r2, r4
 80049ce:	0021      	movs	r1, r4
 80049d0:	0030      	movs	r0, r6
 80049d2:	f008 f9b7 	bl	800cd44 <SetButtonEvents>
					status =BOS_OK;
 80049d6:	0020      	movs	r0, r4
 80049d8:	e702      	b.n	80047e0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 80049da:	4f23      	ldr	r7, [pc, #140]	; (8004a68 <ParseSnippetCondition+0x380>)
 80049dc:	00a3      	lsls	r3, r4, #2
 80049de:	191b      	adds	r3, r3, r4
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	220c      	movs	r2, #12
 80049e6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80049e8:	0028      	movs	r0, r5
 80049ea:	3010      	adds	r0, #16
 80049ec:	f00e fecd 	bl	801378a <atoi>
 80049f0:	b2c0      	uxtb	r0, r0
 80049f2:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <ParseSnippetCondition+0x37c>)
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	0093      	lsls	r3, r2, #2
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	18ff      	adds	r7, r7, r3
 80049fe:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004a00:	2301      	movs	r3, #1
 8004a02:	9305      	str	r3, [sp, #20]
 8004a04:	2300      	movs	r3, #0
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	9303      	str	r3, [sp, #12]
 8004a0a:	9002      	str	r0, [sp, #8]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2100      	movs	r1, #0
 8004a14:	0030      	movs	r0, r6
 8004a16:	f008 f995 	bl	800cd44 <SetButtonEvents>
					status =BOS_OK;
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e6e0      	b.n	80047e0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004a1e:	4f12      	ldr	r7, [pc, #72]	; (8004a68 <ParseSnippetCondition+0x380>)
 8004a20:	00a3      	lsls	r3, r4, #2
 8004a22:	191b      	adds	r3, r3, r4
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	220d      	movs	r2, #13
 8004a2a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004a2c:	0028      	movs	r0, r5
 8004a2e:	3010      	adds	r0, #16
 8004a30:	f00e feab 	bl	801378a <atoi>
 8004a34:	b2c0      	uxtb	r0, r0
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <ParseSnippetCondition+0x37c>)
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	0093      	lsls	r3, r2, #2
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	18ff      	adds	r7, r7, r3
 8004a42:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004a44:	2301      	movs	r3, #1
 8004a46:	9305      	str	r3, [sp, #20]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9304      	str	r3, [sp, #16]
 8004a4c:	9003      	str	r0, [sp, #12]
 8004a4e:	9302      	str	r3, [sp, #8]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2200      	movs	r2, #0
 8004a56:	2100      	movs	r1, #0
 8004a58:	0030      	movs	r0, r6
 8004a5a:	f008 f973 	bl	800cd44 <SetButtonEvents>
					status =BOS_OK;
 8004a5e:	2000      	movs	r0, #0
 8004a60:	e6be      	b.n	80047e0 <ParseSnippetCondition+0xf8>
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	20000997 	.word	0x20000997
 8004a68:	2000628c 	.word	0x2000628c
 8004a6c:	200008fc 	.word	0x200008fc
 8004a70:	080173d4 	.word	0x080173d4
 8004a74:	08018c80 	.word	0x08018c80
 8004a78:	20001350 	.word	0x20001350
 8004a7c:	08017d04 	.word	0x08017d04
 8004a80:	08017d14 	.word	0x08017d14
 8004a84:	08017d24 	.word	0x08017d24
			else if(secondPart != NULL && thirdPart != NULL){
 8004a88:	2e00      	cmp	r6, #0
 8004a8a:	d04f      	beq.n	8004b2c <ParseSnippetCondition+0x444>
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	d04f      	beq.n	8004b30 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004a90:	0020      	movs	r0, r4
 8004a92:	f7fe fef5 	bl	8003880 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d024      	beq.n	8004ae4 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004a9a:	4b27      	ldr	r3, [pc, #156]	; (8004b38 <ParseSnippetCondition+0x450>)
 8004a9c:	781c      	ldrb	r4, [r3, #0]
 8004a9e:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <ParseSnippetCondition+0x454>)
 8004aa0:	00a3      	lsls	r3, r4, #2
 8004aa2:	1919      	adds	r1, r3, r4
 8004aa4:	0089      	lsls	r1, r1, #2
 8004aa6:	2704      	movs	r7, #4
 8004aa8:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004aaa:	1919      	adds	r1, r3, r4
 8004aac:	0089      	lsls	r1, r1, #2
 8004aae:	1851      	adds	r1, r2, r1
 8004ab0:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004ab2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004ab4:	4d20      	ldr	r5, [pc, #128]	; (8004b38 <ParseSnippetCondition+0x450>)
 8004ab6:	782c      	ldrb	r4, [r5, #0]
 8004ab8:	0030      	movs	r0, r6
 8004aba:	f7fe feed 	bl	8003898 <IsMathOperator>
 8004abe:	491f      	ldr	r1, [pc, #124]	; (8004b3c <ParseSnippetCondition+0x454>)
 8004ac0:	00a3      	lsls	r3, r4, #2
 8004ac2:	191b      	adds	r3, r3, r4
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18cb      	adds	r3, r1, r3
 8004ac8:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004aca:	782a      	ldrb	r2, [r5, #0]
 8004acc:	0093      	lsls	r3, r2, #2
 8004ace:	189b      	adds	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	18cb      	adds	r3, r1, r3
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02c      	beq.n	8004b34 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004ada:	3201      	adds	r2, #1
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <ParseSnippetCondition+0x450>)
 8004ade:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	e01d      	b.n	8004b20 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004ae4:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <ParseSnippetCondition+0x450>)
 8004ae6:	4698      	mov	r8, r3
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	4f14      	ldr	r7, [pc, #80]	; (8004b3c <ParseSnippetCondition+0x454>)
 8004aec:	0093      	lsls	r3, r2, #2
 8004aee:	1899      	adds	r1, r3, r2
 8004af0:	0089      	lsls	r1, r1, #2
 8004af2:	2003      	movs	r0, #3
 8004af4:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004af6:	187b      	adds	r3, r7, r1
 8004af8:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004afa:	0020      	movs	r0, r4
 8004afc:	f00e fe40 	bl	8013780 <atof>
 8004b00:	f7fe f910 	bl	8002d24 <__aeabi_d2f>
 8004b04:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004b06:	4643      	mov	r3, r8
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	0098      	lsls	r0, r3, #2
 8004b0c:	18c0      	adds	r0, r0, r3
 8004b0e:	0080      	lsls	r0, r0, #2
 8004b10:	3006      	adds	r0, #6
 8004b12:	19c0      	adds	r0, r0, r7
 8004b14:	2204      	movs	r2, #4
 8004b16:	a907      	add	r1, sp, #28
 8004b18:	f00e feaf 	bl	801387a <memcpy>
 8004b1c:	e7ca      	b.n	8004ab4 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004b1e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004b20:	b008      	add	sp, #32
 8004b22:	bc04      	pop	{r2}
 8004b24:	4690      	mov	r8, r2
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004b28:	2067      	movs	r0, #103	; 0x67
 8004b2a:	e7f9      	b.n	8004b20 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004b2c:	2067      	movs	r0, #103	; 0x67
 8004b2e:	e7f7      	b.n	8004b20 <ParseSnippetCondition+0x438>
 8004b30:	2067      	movs	r0, #103	; 0x67
 8004b32:	e7f5      	b.n	8004b20 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004b34:	2067      	movs	r0, #103	; 0x67
 8004b36:	e7f3      	b.n	8004b20 <ParseSnippetCondition+0x438>
 8004b38:	20000997 	.word	0x20000997
 8004b3c:	2000628c 	.word	0x2000628c

08004b40 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	000c      	movs	r4, r1
	switch(code){
 8004b44:	2802      	cmp	r0, #2
 8004b46:	d017      	beq.n	8004b78 <AddSnippet+0x38>
 8004b48:	2803      	cmp	r0, #3
 8004b4a:	d003      	beq.n	8004b54 <AddSnippet+0x14>
 8004b4c:	2801      	cmp	r0, #1
 8004b4e:	d00f      	beq.n	8004b70 <AddSnippet+0x30>
	return BOS_OK;
 8004b50:	2000      	movs	r0, #0
 8004b52:	e00c      	b.n	8004b6e <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004b54:	4b35      	ldr	r3, [pc, #212]	; (8004c2c <AddSnippet+0xec>)
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	3a01      	subs	r2, #1
 8004b5a:	0093      	lsls	r3, r2, #2
 8004b5c:	189b      	adds	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4a33      	ldr	r2, [pc, #204]	; (8004c30 <AddSnippet+0xf0>)
 8004b62:	18d3      	adds	r3, r2, r3
 8004b64:	2201      	movs	r2, #1
 8004b66:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004b68:	f005 fad8 	bl	800a11c <SaveToRO>
	return BOS_OK;
 8004b6c:	2000      	movs	r0, #0
}
 8004b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004b70:	0008      	movs	r0, r1
 8004b72:	f7ff fdb9 	bl	80046e8 <ParseSnippetCondition>
 8004b76:	e7fa      	b.n	8004b6e <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004b78:	4b2c      	ldr	r3, [pc, #176]	; (8004c2c <AddSnippet+0xec>)
 8004b7a:	781d      	ldrb	r5, [r3, #0]
 8004b7c:	3d01      	subs	r5, #1
 8004b7e:	00ab      	lsls	r3, r5, #2
 8004b80:	195b      	adds	r3, r3, r5
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <AddSnippet+0xf0>)
 8004b86:	18d3      	adds	r3, r2, r3
 8004b88:	68de      	ldr	r6, [r3, #12]
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	d03d      	beq.n	8004c0a <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004b8e:	0030      	movs	r0, r6
 8004b90:	f7fb fac2 	bl	8000118 <strlen>
 8004b94:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004b96:	0020      	movs	r0, r4
 8004b98:	f7fb fabe 	bl	8000118 <strlen>
 8004b9c:	1839      	adds	r1, r7, r0
 8004b9e:	3102      	adds	r1, #2
 8004ba0:	0030      	movs	r0, r6
 8004ba2:	f00f fbb3 	bl	801430c <realloc>
 8004ba6:	4e22      	ldr	r6, [pc, #136]	; (8004c30 <AddSnippet+0xf0>)
 8004ba8:	00ab      	lsls	r3, r5, #2
 8004baa:	195d      	adds	r5, r3, r5
 8004bac:	00ad      	lsls	r5, r5, #2
 8004bae:	1975      	adds	r5, r6, r5
 8004bb0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004bb2:	4d1e      	ldr	r5, [pc, #120]	; (8004c2c <AddSnippet+0xec>)
 8004bb4:	782a      	ldrb	r2, [r5, #0]
 8004bb6:	3a01      	subs	r2, #1
 8004bb8:	0093      	lsls	r3, r2, #2
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	18f3      	adds	r3, r6, r3
 8004bc0:	1c7a      	adds	r2, r7, #1
 8004bc2:	68d8      	ldr	r0, [r3, #12]
 8004bc4:	1880      	adds	r0, r0, r2
 8004bc6:	0021      	movs	r1, r4
 8004bc8:	f00f fc2a 	bl	8014420 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004bcc:	782a      	ldrb	r2, [r5, #0]
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	0093      	lsls	r3, r2, #2
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18f6      	adds	r6, r6, r3
 8004bd8:	68f3      	ldr	r3, [r6, #12]
 8004bda:	2213      	movs	r2, #19
 8004bdc:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <AddSnippet+0xec>)
 8004be0:	781a      	ldrb	r2, [r3, #0]
 8004be2:	3a01      	subs	r2, #1
 8004be4:	0093      	lsls	r3, r2, #2
 8004be6:	189b      	adds	r3, r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4911      	ldr	r1, [pc, #68]	; (8004c30 <AddSnippet+0xf0>)
 8004bec:	18cb      	adds	r3, r1, r3
 8004bee:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004bf0:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1bb      	bne.n	8004b6e <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004bf6:	0090      	lsls	r0, r2, #2
 8004bf8:	1880      	adds	r0, r0, r2
 8004bfa:	0080      	lsls	r0, r0, #2
 8004bfc:	1840      	adds	r0, r0, r1
 8004bfe:	2214      	movs	r2, #20
 8004c00:	2100      	movs	r1, #0
 8004c02:	f00e fe43 	bl	801388c <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004c06:	200e      	movs	r0, #14
 8004c08:	e7b1      	b.n	8004b6e <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004c0a:	0008      	movs	r0, r1
 8004c0c:	f7fb fa84 	bl	8000118 <strlen>
 8004c10:	3001      	adds	r0, #1
 8004c12:	f00e fdfd 	bl	8013810 <malloc>
 8004c16:	00ab      	lsls	r3, r5, #2
 8004c18:	195d      	adds	r5, r3, r5
 8004c1a:	00ad      	lsls	r5, r5, #2
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <AddSnippet+0xf0>)
 8004c1e:	195d      	adds	r5, r3, r5
 8004c20:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004c22:	0021      	movs	r1, r4
 8004c24:	f00f fbfc 	bl	8014420 <strcpy>
 8004c28:	e7d9      	b.n	8004bde <AddSnippet+0x9e>
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	20000997 	.word	0x20000997
 8004c30:	2000628c 	.word	0x2000628c

08004c34 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	46de      	mov	lr, fp
 8004c38:	4657      	mov	r7, sl
 8004c3a:	464e      	mov	r6, r9
 8004c3c:	4645      	mov	r5, r8
 8004c3e:	b5e0      	push	{r5, r6, r7, lr}
 8004c40:	b08b      	sub	sp, #44	; 0x2c
 8004c42:	9004      	str	r0, [sp, #16]
 8004c44:	4688      	mov	r8, r1
 8004c46:	9203      	str	r2, [sp, #12]
 8004c48:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004c4a:	2209      	movs	r2, #9
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	a807      	add	r0, sp, #28
 8004c50:	f00e fe1c 	bl	801388c <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004c54:	4fd5      	ldr	r7, [pc, #852]	; (8004fac <CLI_CommandParser+0x378>)
				if(id == myID){
 8004c56:	002e      	movs	r6, r5
 8004c58:	e034      	b.n	8004cc4 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004c5a:	2252      	movs	r2, #82	; 0x52
 8004c5c:	49d4      	ldr	r1, [pc, #848]	; (8004fb0 <CLI_CommandParser+0x37c>)
 8004c5e:	0020      	movs	r0, r4
 8004c60:	f00e fe0b 	bl	801387a <memcpy>
				recordSnippet =0;
 8004c64:	4bd1      	ldr	r3, [pc, #836]	; (8004fac <CLI_CommandParser+0x378>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e044      	b.n	8004cf6 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004c6c:	2206      	movs	r2, #6
 8004c6e:	49d1      	ldr	r1, [pc, #836]	; (8004fb4 <CLI_CommandParser+0x380>)
 8004c70:	9803      	ldr	r0, [sp, #12]
 8004c72:	f00f fbdd 	bl	8014430 <strncmp>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d053      	beq.n	8004d22 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004c7a:	2d02      	cmp	r5, #2
 8004c7c:	d05e      	beq.n	8004d3c <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004c7e:	212e      	movs	r1, #46	; 0x2e
 8004c80:	9803      	ldr	r0, [sp, #12]
 8004c82:	f00f fbbf 	bl	8014404 <strchr>
 8004c86:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c88:	d006      	beq.n	8004c98 <CLI_CommandParser+0x64>
 8004c8a:	3803      	subs	r0, #3
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	49ca      	ldr	r1, [pc, #808]	; (8004fb8 <CLI_CommandParser+0x384>)
 8004c90:	f00f fbce 	bl	8014430 <strncmp>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d160      	bne.n	8004d5a <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004c98:	2299      	movs	r2, #153	; 0x99
 8004c9a:	0092      	lsls	r2, r2, #2
 8004c9c:	0021      	movs	r1, r4
 8004c9e:	9803      	ldr	r0, [sp, #12]
 8004ca0:	f009 fcc0 	bl	800e624 <FreeRTOS_CLIProcessCommand>
 8004ca4:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ca6:	7823      	ldrb	r3, [r4, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d000      	beq.n	8004cae <CLI_CommandParser+0x7a>
 8004cac:	e16f      	b.n	8004f8e <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004cae:	0020      	movs	r0, r4
 8004cb0:	f7fb fa32 	bl	8000118 <strlen>
 8004cb4:	0002      	movs	r2, r0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	0020      	movs	r0, r4
 8004cba:	f00e fde7 	bl	801388c <memset>
	} while(xReturned != pdFALSE);
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	d100      	bne.n	8004cc4 <CLI_CommandParser+0x90>
 8004cc2:	e1ab      	b.n	800501c <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004cc4:	9803      	ldr	r0, [sp, #12]
 8004cc6:	f7ff fcf7 	bl	80046b8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004cca:	783d      	ldrb	r5, [r7, #0]
 8004ccc:	2d00      	cmp	r5, #0
 8004cce:	d1cd      	bne.n	8004c6c <CLI_CommandParser+0x38>
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	49ba      	ldr	r1, [pc, #744]	; (8004fbc <CLI_CommandParser+0x388>)
 8004cd4:	9803      	ldr	r0, [sp, #12]
 8004cd6:	f00f fbab 	bl	8014430 <strncmp>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d1cf      	bne.n	8004c7e <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	1cd9      	adds	r1, r3, #3
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f7ff ff2c 	bl	8004b40 <AddSnippet>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d1b6      	bne.n	8004c5a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004cec:	4baf      	ldr	r3, [pc, #700]	; (8004fac <CLI_CommandParser+0x378>)
 8004cee:	2202      	movs	r2, #2
 8004cf0:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004cf2:	230d      	movs	r3, #13
 8004cf4:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004cf6:	7823      	ldrb	r3, [r4, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d100      	bne.n	8004cfe <CLI_CommandParser+0xca>
 8004cfc:	e186      	b.n	800500c <CLI_CommandParser+0x3d8>
 8004cfe:	4643      	mov	r3, r8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d100      	bne.n	8004d06 <CLI_CommandParser+0xd2>
 8004d04:	e19d      	b.n	8005042 <CLI_CommandParser+0x40e>
 8004d06:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d08:	0020      	movs	r0, r4
 8004d0a:	f7fb fa05 	bl	8000118 <strlen>
 8004d0e:	b282      	uxth	r2, r0
 8004d10:	2301      	movs	r3, #1
 8004d12:	425b      	negs	r3, r3
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	3333      	adds	r3, #51	; 0x33
 8004d18:	0021      	movs	r1, r4
 8004d1a:	9804      	ldr	r0, [sp, #16]
 8004d1c:	f009 fa44 	bl	800e1a8 <writePxMutex>
 8004d20:	e7c5      	b.n	8004cae <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004d22:	4ba2      	ldr	r3, [pc, #648]	; (8004fac <CLI_CommandParser+0x378>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004d28:	49a5      	ldr	r1, [pc, #660]	; (8004fc0 <CLI_CommandParser+0x38c>)
 8004d2a:	3003      	adds	r0, #3
 8004d2c:	f7ff ff08 	bl	8004b40 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004d30:	2241      	movs	r2, #65	; 0x41
 8004d32:	49a4      	ldr	r1, [pc, #656]	; (8004fc4 <CLI_CommandParser+0x390>)
 8004d34:	0020      	movs	r0, r4
 8004d36:	f00e fda0 	bl	801387a <memcpy>
			xReturned = pdFALSE;
 8004d3a:	e7dc      	b.n	8004cf6 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	2002      	movs	r0, #2
 8004d40:	f7ff fefe 	bl	8004b40 <AddSnippet>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d102      	bne.n	8004d4e <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004d48:	230d      	movs	r3, #13
 8004d4a:	7023      	strb	r3, [r4, #0]
 8004d4c:	e7d3      	b.n	8004cf6 <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d4e:	2252      	movs	r2, #82	; 0x52
 8004d50:	4997      	ldr	r1, [pc, #604]	; (8004fb0 <CLI_CommandParser+0x37c>)
 8004d52:	0020      	movs	r0, r4
 8004d54:	f00e fd91 	bl	801387a <memcpy>
 8004d58:	e7cd      	b.n	8004cf6 <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d5a:	f00e fd4b 	bl	80137f4 <__locale_ctype_ptr>
 8004d5e:	786b      	ldrb	r3, [r5, #1]
 8004d60:	18c0      	adds	r0, r0, r3
 8004d62:	7843      	ldrb	r3, [r0, #1]
 8004d64:	075b      	lsls	r3, r3, #29
 8004d66:	d497      	bmi.n	8004c98 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004d68:	9903      	ldr	r1, [sp, #12]
 8004d6a:	1a6a      	subs	r2, r5, r1
 8004d6c:	a807      	add	r0, sp, #28
 8004d6e:	f00f fb70 	bl	8014452 <strncpy>
				id =GetID(idString);
 8004d72:	a807      	add	r0, sp, #28
 8004d74:	f7ff fad8 	bl	8004328 <GetID>
 8004d78:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004d7a:	4a93      	ldr	r2, [pc, #588]	; (8004fc8 <CLI_CommandParser+0x394>)
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	4693      	mov	fp, r2
 8004d80:	4290      	cmp	r0, r2
 8004d82:	d03d      	beq.n	8004e00 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004d84:	2864      	cmp	r0, #100	; 0x64
 8004d86:	d043      	beq.n	8004e10 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004d88:	2866      	cmp	r0, #102	; 0x66
 8004d8a:	d047      	beq.n	8004e1c <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004d8c:	28ff      	cmp	r0, #255	; 0xff
 8004d8e:	d04b      	beq.n	8004e28 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004d90:	466b      	mov	r3, sp
 8004d92:	7d1b      	ldrb	r3, [r3, #20]
 8004d94:	469a      	mov	sl, r3
 8004d96:	2bfe      	cmp	r3, #254	; 0xfe
 8004d98:	d078      	beq.n	8004e8c <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004d9a:	3501      	adds	r5, #1
 8004d9c:	2206      	movs	r2, #6
 8004d9e:	498b      	ldr	r1, [pc, #556]	; (8004fcc <CLI_CommandParser+0x398>)
 8004da0:	0028      	movs	r0, r5
 8004da2:	f00f fb45 	bl	8014430 <strncmp>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d000      	beq.n	8004dac <CLI_CommandParser+0x178>
 8004daa:	e0b4      	b.n	8004f16 <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004dac:	4b88      	ldr	r3, [pc, #544]	; (8004fd0 <CLI_CommandParser+0x39c>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004db2:	2119      	movs	r1, #25
 8004db4:	4650      	mov	r0, sl
 8004db6:	f003 f9ff 	bl	80081b8 <SendMessageToModule>
						osDelay(100);
 8004dba:	2064      	movs	r0, #100	; 0x64
 8004dbc:	f009 fb9f 	bl	800e4fe <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004dc0:	4b84      	ldr	r3, [pc, #528]	; (8004fd4 <CLI_CommandParser+0x3a0>)
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	4b80      	ldr	r3, [pc, #512]	; (8004fc8 <CLI_CommandParser+0x394>)
 8004dc6:	7818      	ldrb	r0, [r3, #0]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4651      	mov	r1, sl
 8004dcc:	f005 fada 	bl	800a384 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004dd0:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <CLI_CommandParser+0x39c>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b60      	cmp	r3, #96	; 0x60
 8004dd6:	d18e      	bne.n	8004cf6 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004dd8:	21fa      	movs	r1, #250	; 0xfa
 8004dda:	0089      	lsls	r1, r1, #2
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f00a feb9 	bl	800fb54 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004de2:	4b7d      	ldr	r3, [pc, #500]	; (8004fd8 <CLI_CommandParser+0x3a4>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d085      	beq.n	8004cf6 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004dea:	4a7c      	ldr	r2, [pc, #496]	; (8004fdc <CLI_CommandParser+0x3a8>)
 8004dec:	8813      	ldrh	r3, [r2, #0]
 8004dee:	3301      	adds	r3, #1
 8004df0:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004df2:	9b05      	ldr	r3, [sp, #20]
 8004df4:	0022      	movs	r2, r4
 8004df6:	497a      	ldr	r1, [pc, #488]	; (8004fe0 <CLI_CommandParser+0x3ac>)
 8004df8:	0020      	movs	r0, r4
 8004dfa:	f00f fad5 	bl	80143a8 <siprintf>
 8004dfe:	e77a      	b.n	8004cf6 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e00:	2299      	movs	r2, #153	; 0x99
 8004e02:	1c68      	adds	r0, r5, #1
 8004e04:	0092      	lsls	r2, r2, #2
 8004e06:	0021      	movs	r1, r4
 8004e08:	f009 fc0c 	bl	800e624 <FreeRTOS_CLIProcessCommand>
 8004e0c:	0006      	movs	r6, r0
 8004e0e:	e74a      	b.n	8004ca6 <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004e10:	2227      	movs	r2, #39	; 0x27
 8004e12:	4974      	ldr	r1, [pc, #464]	; (8004fe4 <CLI_CommandParser+0x3b0>)
 8004e14:	0020      	movs	r0, r4
 8004e16:	f00e fd30 	bl	801387a <memcpy>
 8004e1a:	e76c      	b.n	8004cf6 <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004e1c:	2225      	movs	r2, #37	; 0x25
 8004e1e:	4972      	ldr	r1, [pc, #456]	; (8004fe8 <CLI_CommandParser+0x3b4>)
 8004e20:	0020      	movs	r0, r4
 8004e22:	f00e fd2a 	bl	801387a <memcpy>
 8004e26:	e766      	b.n	8004cf6 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004e28:	221a      	movs	r2, #26
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	486f      	ldr	r0, [pc, #444]	; (8004fec <CLI_CommandParser+0x3b8>)
 8004e2e:	f00e fd2d 	bl	801388c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004e32:	3501      	adds	r5, #1
 8004e34:	9803      	ldr	r0, [sp, #12]
 8004e36:	f7fb f96f 	bl	8000118 <strlen>
 8004e3a:	0006      	movs	r6, r0
 8004e3c:	ab07      	add	r3, sp, #28
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7fb f96a 	bl	8000118 <strlen>
 8004e44:	1e72      	subs	r2, r6, #1
 8004e46:	1a12      	subs	r2, r2, r0
 8004e48:	0029      	movs	r1, r5
 8004e4a:	4869      	ldr	r0, [pc, #420]	; (8004ff0 <CLI_CommandParser+0x3bc>)
 8004e4c:	f00f fb01 	bl	8014452 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004e50:	9803      	ldr	r0, [sp, #12]
 8004e52:	f7fb f961 	bl	8000118 <strlen>
 8004e56:	0006      	movs	r6, r0
 8004e58:	a807      	add	r0, sp, #28
 8004e5a:	f7fb f95d 	bl	8000118 <strlen>
 8004e5e:	1a33      	subs	r3, r6, r0
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2217      	movs	r2, #23
 8004e64:	21ff      	movs	r1, #255	; 0xff
 8004e66:	4658      	mov	r0, fp
 8004e68:	f003 f97e 	bl	8008168 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e6c:	2299      	movs	r2, #153	; 0x99
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	0021      	movs	r1, r4
 8004e72:	0028      	movs	r0, r5
 8004e74:	f009 fbd6 	bl	800e624 <FreeRTOS_CLIProcessCommand>
 8004e78:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004e7a:	0020      	movs	r0, r4
 8004e7c:	f7fb f94c 	bl	8000118 <strlen>
 8004e80:	1820      	adds	r0, r4, r0
 8004e82:	221d      	movs	r2, #29
 8004e84:	495b      	ldr	r1, [pc, #364]	; (8004ff4 <CLI_CommandParser+0x3c0>)
 8004e86:	f00e fcf8 	bl	801387a <memcpy>
 8004e8a:	e70c      	b.n	8004ca6 <CLI_CommandParser+0x72>
					group =id >> 8;
 8004e8c:	9b05      	ldr	r3, [sp, #20]
 8004e8e:	121b      	asrs	r3, r3, #8
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	469a      	mov	sl, r3
 8004e94:	4b58      	ldr	r3, [pc, #352]	; (8004ff8 <CLI_CommandParser+0x3c4>)
 8004e96:	4699      	mov	r9, r3
 8004e98:	4652      	mov	r2, sl
 8004e9a:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004e9c:	221a      	movs	r2, #26
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4852      	ldr	r0, [pc, #328]	; (8004fec <CLI_CommandParser+0x3b8>)
 8004ea2:	f00e fcf3 	bl	801388c <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004ea6:	1c6b      	adds	r3, r5, #1
 8004ea8:	9305      	str	r3, [sp, #20]
 8004eaa:	9803      	ldr	r0, [sp, #12]
 8004eac:	f7fb f934 	bl	8000118 <strlen>
 8004eb0:	0005      	movs	r5, r0
 8004eb2:	aa07      	add	r2, sp, #28
 8004eb4:	0010      	movs	r0, r2
 8004eb6:	f7fb f92f 	bl	8000118 <strlen>
 8004eba:	3d01      	subs	r5, #1
 8004ebc:	1a2a      	subs	r2, r5, r0
 8004ebe:	9905      	ldr	r1, [sp, #20]
 8004ec0:	484b      	ldr	r0, [pc, #300]	; (8004ff0 <CLI_CommandParser+0x3bc>)
 8004ec2:	f00f fac6 	bl	8014452 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004ec6:	9803      	ldr	r0, [sp, #12]
 8004ec8:	f7fb f926 	bl	8000118 <strlen>
 8004ecc:	0005      	movs	r5, r0
 8004ece:	a807      	add	r0, sp, #28
 8004ed0:	f7fb f922 	bl	8000118 <strlen>
 8004ed4:	1a2b      	subs	r3, r5, r0
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2217      	movs	r2, #23
 8004eda:	4651      	mov	r1, sl
 8004edc:	4658      	mov	r0, fp
 8004ede:	f003 f943 	bl	8008168 <BroadcastMessage>
					if(InGroup(myID,group))
 8004ee2:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <CLI_CommandParser+0x394>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4a44      	ldr	r2, [pc, #272]	; (8004ffc <CLI_CommandParser+0x3c8>)
 8004eec:	5a9b      	ldrh	r3, [r3, r2]
 8004eee:	464a      	mov	r2, r9
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	4113      	asrs	r3, r2
 8004ef4:	07db      	lsls	r3, r3, #31
 8004ef6:	d406      	bmi.n	8004f06 <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004ef8:	ab07      	add	r3, sp, #28
 8004efa:	0022      	movs	r2, r4
 8004efc:	4940      	ldr	r1, [pc, #256]	; (8005000 <CLI_CommandParser+0x3cc>)
 8004efe:	0020      	movs	r0, r4
 8004f00:	f00f fa52 	bl	80143a8 <siprintf>
 8004f04:	e6cf      	b.n	8004ca6 <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f06:	2299      	movs	r2, #153	; 0x99
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	0021      	movs	r1, r4
 8004f0c:	9805      	ldr	r0, [sp, #20]
 8004f0e:	f009 fb89 	bl	800e624 <FreeRTOS_CLIProcessCommand>
 8004f12:	0006      	movs	r6, r0
 8004f14:	e7f0      	b.n	8004ef8 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f16:	9803      	ldr	r0, [sp, #12]
 8004f18:	f7fb f8fe 	bl	8000118 <strlen>
 8004f1c:	0006      	movs	r6, r0
 8004f1e:	ab07      	add	r3, sp, #28
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fb f8f9 	bl	8000118 <strlen>
 8004f26:	1e72      	subs	r2, r6, #1
 8004f28:	1a12      	subs	r2, r2, r0
 8004f2a:	0029      	movs	r1, r5
 8004f2c:	4830      	ldr	r0, [pc, #192]	; (8004ff0 <CLI_CommandParser+0x3bc>)
 8004f2e:	f00f fa90 	bl	8014452 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004f32:	9803      	ldr	r0, [sp, #12]
 8004f34:	f7fb f8f0 	bl	8000118 <strlen>
 8004f38:	0005      	movs	r5, r0
 8004f3a:	a807      	add	r0, sp, #28
 8004f3c:	f7fb f8ec 	bl	8000118 <strlen>
 8004f40:	3d01      	subs	r5, #1
 8004f42:	1a2a      	subs	r2, r5, r0
 8004f44:	b292      	uxth	r2, r2
 8004f46:	2117      	movs	r1, #23
 8004f48:	4650      	mov	r0, sl
 8004f4a:	f003 f935 	bl	80081b8 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004f4e:	9a05      	ldr	r2, [sp, #20]
 8004f50:	492c      	ldr	r1, [pc, #176]	; (8005004 <CLI_CommandParser+0x3d0>)
 8004f52:	0020      	movs	r0, r4
 8004f54:	f00f fa28 	bl	80143a8 <siprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004f58:	7823      	ldrb	r3, [r4, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <CLI_CommandParser+0x330>
 8004f5e:	4643      	mov	r3, r8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d108      	bne.n	8004f76 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f64:	0020      	movs	r0, r4
 8004f66:	f7fb f8d7 	bl	8000118 <strlen>
 8004f6a:	0002      	movs	r2, r0
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	0020      	movs	r0, r4
 8004f70:	f00e fc8c 	bl	801388c <memset>
 8004f74:	e72c      	b.n	8004dd0 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004f76:	0020      	movs	r0, r4
 8004f78:	f7fb f8ce 	bl	8000118 <strlen>
 8004f7c:	b282      	uxth	r2, r0
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	3331      	adds	r3, #49	; 0x31
 8004f84:	0021      	movs	r1, r4
 8004f86:	9804      	ldr	r0, [sp, #16]
 8004f88:	f009 f90e 	bl	800e1a8 <writePxMutex>
 8004f8c:	e7ea      	b.n	8004f64 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004f8e:	4643      	mov	r3, r8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d100      	bne.n	8004f96 <CLI_CommandParser+0x362>
 8004f94:	e68b      	b.n	8004cae <CLI_CommandParser+0x7a>
 8004f96:	e6b7      	b.n	8004d08 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004f98:	2301      	movs	r3, #1
 8004f9a:	425b      	negs	r3, r3
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	3333      	adds	r3, #51	; 0x33
 8004fa0:	2238      	movs	r2, #56	; 0x38
 8004fa2:	4919      	ldr	r1, [pc, #100]	; (8005008 <CLI_CommandParser+0x3d4>)
 8004fa4:	9804      	ldr	r0, [sp, #16]
 8004fa6:	f009 f8ff 	bl	800e1a8 <writePxMutex>
}
 8004faa:	e043      	b.n	8005034 <CLI_CommandParser+0x400>
 8004fac:	200009c4 	.word	0x200009c4
 8004fb0:	08017b3c 	.word	0x08017b3c
 8004fb4:	08017b90 	.word	0x08017b90
 8004fb8:	08017bdc 	.word	0x08017bdc
 8004fbc:	08017b38 	.word	0x08017b38
 8004fc0:	0801753c 	.word	0x0801753c
 8004fc4:	08017b98 	.word	0x08017b98
 8004fc8:	20000806 	.word	0x20000806
 8004fcc:	08017c7c 	.word	0x08017c7c
 8004fd0:	200061f0 	.word	0x200061f0
 8004fd4:	200002b0 	.word	0x200002b0
 8004fd8:	20000888 	.word	0x20000888
 8004fdc:	20000fda 	.word	0x20000fda
 8004fe0:	08017ca8 	.word	0x08017ca8
 8004fe4:	08017be0 	.word	0x08017be0
 8004fe8:	08017c08 	.word	0x08017c08
 8004fec:	20000528 	.word	0x20000528
 8004ff0:	200006c8 	.word	0x200006c8
 8004ff4:	08017c30 	.word	0x08017c30
 8004ff8:	20000996 	.word	0x20000996
 8004ffc:	20000654 	.word	0x20000654
 8005000:	08017c50 	.word	0x08017c50
 8005004:	08017c84 	.word	0x08017c84
 8005008:	08017cc8 	.word	0x08017cc8
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800500c:	0020      	movs	r0, r4
 800500e:	f7fb f883 	bl	8000118 <strlen>
 8005012:	0002      	movs	r2, r0
 8005014:	2100      	movs	r1, #0
 8005016:	0020      	movs	r0, r4
 8005018:	f00e fc38 	bl	801388c <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 800501c:	2209      	movs	r2, #9
 800501e:	2100      	movs	r1, #0
 8005020:	a807      	add	r0, sp, #28
 8005022:	f00e fc33 	bl	801388c <memset>
	if(!recordSnippet && enableOutput)
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <CLI_CommandParser+0x420>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <CLI_CommandParser+0x400>
 800502e:	4643      	mov	r3, r8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1b1      	bne.n	8004f98 <CLI_CommandParser+0x364>
}
 8005034:	b00b      	add	sp, #44	; 0x2c
 8005036:	bc3c      	pop	{r2, r3, r4, r5}
 8005038:	4690      	mov	r8, r2
 800503a:	4699      	mov	r9, r3
 800503c:	46a2      	mov	sl, r4
 800503e:	46ab      	mov	fp, r5
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005042:	0020      	movs	r0, r4
 8005044:	f7fb f868 	bl	8000118 <strlen>
 8005048:	0002      	movs	r2, r0
 800504a:	2100      	movs	r1, #0
 800504c:	0020      	movs	r0, r4
 800504e:	f00e fc1d 	bl	801388c <memset>
 8005052:	e7e3      	b.n	800501c <CLI_CommandParser+0x3e8>
 8005054:	200009c4 	.word	0x200009c4

08005058 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505a:	46ce      	mov	lr, r9
 800505c:	4647      	mov	r7, r8
 800505e:	b580      	push	{r7, lr}
 8005060:	b089      	sub	sp, #36	; 0x24
	char cRxedChar ='\0';
 8005062:	230f      	movs	r3, #15
 8005064:	aa04      	add	r2, sp, #16
 8005066:	4694      	mov	ip, r2
 8005068:	4463      	add	r3, ip
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800506e:	2101      	movs	r1, #1
 8005070:	4249      	negs	r1, r1
 8005072:	2001      	movs	r0, #1
 8005074:	f00a fd6e 	bl	800fb54 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005078:	f009 fb52 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 800507c:	9005      	str	r0, [sp, #20]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800507e:	23e1      	movs	r3, #225	; 0xe1
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	4a5b      	ldr	r2, [pc, #364]	; (80051f0 <prvCLITask+0x198>)
 8005084:	6892      	ldr	r2, [r2, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	d00d      	beq.n	80050a6 <prvCLITask+0x4e>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800508a:	2401      	movs	r4, #1
			if(port != PcPort)
 800508c:	4e59      	ldr	r6, [pc, #356]	; (80051f4 <prvCLITask+0x19c>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800508e:	001d      	movs	r5, r3
			if(port != PcPort)
 8005090:	7833      	ldrb	r3, [r6, #0]
 8005092:	42a3      	cmp	r3, r4
 8005094:	d003      	beq.n	800509e <prvCLITask+0x46>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005096:	0029      	movs	r1, r5
 8005098:	0020      	movs	r0, r4
 800509a:	f009 f8f3 	bl	800e284 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800509e:	3401      	adds	r4, #1
 80050a0:	b2e4      	uxtb	r4, r4
 80050a2:	2c04      	cmp	r4, #4
 80050a4:	d1f4      	bne.n	8005090 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80050a6:	4b54      	ldr	r3, [pc, #336]	; (80051f8 <prvCLITask+0x1a0>)
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	0053      	lsls	r3, r2, #1
 80050ac:	189b      	adds	r3, r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4a52      	ldr	r2, [pc, #328]	; (80051fc <prvCLITask+0x1a4>)
 80050b2:	189b      	adds	r3, r3, r2
 80050b4:	4a52      	ldr	r2, [pc, #328]	; (8005200 <prvCLITask+0x1a8>)
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	4c52      	ldr	r4, [pc, #328]	; (8005204 <prvCLITask+0x1ac>)
 80050ba:	4d4e      	ldr	r5, [pc, #312]	; (80051f4 <prvCLITask+0x19c>)
 80050bc:	7829      	ldrb	r1, [r5, #0]
 80050be:	9100      	str	r1, [sp, #0]
 80050c0:	4951      	ldr	r1, [pc, #324]	; (8005208 <prvCLITask+0x1b0>)
 80050c2:	0020      	movs	r0, r4
 80050c4:	f00f f970 	bl	80143a8 <siprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80050c8:	22a4      	movs	r2, #164	; 0xa4
 80050ca:	7828      	ldrb	r0, [r5, #0]
 80050cc:	230a      	movs	r3, #10
 80050ce:	0092      	lsls	r2, r2, #2
 80050d0:	494e      	ldr	r1, [pc, #312]	; (800520c <prvCLITask+0x1b4>)
 80050d2:	f009 f891 	bl	800e1f8 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80050d6:	0020      	movs	r0, r4
 80050d8:	f7fb f81e 	bl	8000118 <strlen>
 80050dc:	b282      	uxth	r2, r0
 80050de:	7828      	ldrb	r0, [r5, #0]
 80050e0:	230a      	movs	r3, #10
 80050e2:	0021      	movs	r1, r4
 80050e4:	f009 f888 	bl	800e1f8 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80050e8:	2700      	movs	r7, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80050ea:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <prvCLITask+0x19c>)
 80050ec:	4699      	mov	r9, r3
 80050ee:	4b48      	ldr	r3, [pc, #288]	; (8005210 <prvCLITask+0x1b8>)
 80050f0:	4698      	mov	r8, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80050f2:	001e      	movs	r6, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80050f4:	2301      	movs	r3, #1
 80050f6:	9304      	str	r3, [sp, #16]
 80050f8:	e055      	b.n	80051a6 <prvCLITask+0x14e>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 80050fa:	240f      	movs	r4, #15
 80050fc:	a904      	add	r1, sp, #16
 80050fe:	468c      	mov	ip, r1
 8005100:	4464      	add	r4, ip
 8005102:	7022      	strb	r2, [r4, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005104:	006a      	lsls	r2, r5, #1
 8005106:	1952      	adds	r2, r2, r5
 8005108:	0192      	lsls	r2, r2, #6
 800510a:	4c42      	ldr	r4, [pc, #264]	; (8005214 <prvCLITask+0x1bc>)
 800510c:	18a2      	adds	r2, r4, r2
 800510e:	2400      	movs	r4, #0
 8005110:	9903      	ldr	r1, [sp, #12]
 8005112:	5454      	strb	r4, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005114:	4a3e      	ldr	r2, [pc, #248]	; (8005210 <prvCLITask+0x1b8>)
 8005116:	5553      	strb	r3, [r2, r5]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8005118:	250f      	movs	r5, #15
 800511a:	ab04      	add	r3, sp, #16
 800511c:	469c      	mov	ip, r3
 800511e:	4465      	add	r5, ip
 8005120:	230a      	movs	r3, #10
 8005122:	2201      	movs	r2, #1
 8005124:	0029      	movs	r1, r5
 8005126:	f009 f867 	bl	800e1f8 <writePxITMutex>
		if(cRxedChar == '\r'){
 800512a:	782b      	ldrb	r3, [r5, #0]
 800512c:	2b0d      	cmp	r3, #13
 800512e:	d01d      	beq.n	800516c <prvCLITask+0x114>
			if(cRxedChar == '\n'){
 8005130:	2b0a      	cmp	r3, #10
 8005132:	d036      	beq.n	80051a2 <prvCLITask+0x14a>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005134:	2b08      	cmp	r3, #8
 8005136:	d052      	beq.n	80051de <prvCLITask+0x186>
 8005138:	2b7f      	cmp	r3, #127	; 0x7f
 800513a:	d050      	beq.n	80051de <prvCLITask+0x186>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 800513c:	001a      	movs	r2, r3
 800513e:	3a20      	subs	r2, #32
 8005140:	2a5e      	cmp	r2, #94	; 0x5e
 8005142:	d82e      	bhi.n	80051a2 <prvCLITask+0x14a>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005144:	2f31      	cmp	r7, #49	; 0x31
 8005146:	dc2c      	bgt.n	80051a2 <prvCLITask+0x14a>
						cInputString[cInputIndex] =cRxedChar;
 8005148:	4a33      	ldr	r2, [pc, #204]	; (8005218 <prvCLITask+0x1c0>)
 800514a:	55d3      	strb	r3, [r2, r7]
						cInputIndex++;
 800514c:	3701      	adds	r7, #1
 800514e:	b27f      	sxtb	r7, r7
 8005150:	e027      	b.n	80051a2 <prvCLITask+0x14a>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005152:	5571      	strb	r1, [r6, r5]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005154:	9b04      	ldr	r3, [sp, #16]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005156:	9303      	str	r3, [sp, #12]
 8005158:	5ce2      	ldrb	r2, [r4, r3]
 800515a:	2a00      	cmp	r2, #0
 800515c:	d1cd      	bne.n	80050fa <prvCLITask+0xa2>
			if(chr == MSG_RX_BUF_SIZE - 1){
 800515e:	2bbf      	cmp	r3, #191	; 0xbf
 8005160:	d0f7      	beq.n	8005152 <prvCLITask+0xfa>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005162:	3301      	adds	r3, #1
 8005164:	b29b      	uxth	r3, r3
 8005166:	2bbf      	cmp	r3, #191	; 0xbf
 8005168:	d9f5      	bls.n	8005156 <prvCLITask+0xfe>
 800516a:	e7d5      	b.n	8005118 <prvCLITask+0xc0>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800516c:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <prvCLITask+0x19c>)
 800516e:	7818      	ldrb	r0, [r3, #0]
 8005170:	230a      	movs	r3, #10
 8005172:	2202      	movs	r2, #2
 8005174:	4929      	ldr	r1, [pc, #164]	; (800521c <prvCLITask+0x1c4>)
 8005176:	f009 f83f 	bl	800e1f8 <writePxITMutex>
			if(cInputIndex == 0){
 800517a:	2f00      	cmp	r7, #0
 800517c:	d02a      	beq.n	80051d4 <prvCLITask+0x17c>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 800517e:	4f26      	ldr	r7, [pc, #152]	; (8005218 <prvCLITask+0x1c0>)
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <prvCLITask+0x19c>)
 8005182:	7818      	ldrb	r0, [r3, #0]
 8005184:	9b05      	ldr	r3, [sp, #20]
 8005186:	003a      	movs	r2, r7
 8005188:	2101      	movs	r1, #1
 800518a:	f7ff fd53 	bl	8004c34 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 800518e:	0039      	movs	r1, r7
 8005190:	4823      	ldr	r0, [pc, #140]	; (8005220 <prvCLITask+0x1c8>)
 8005192:	f00f f945 	bl	8014420 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005196:	2232      	movs	r2, #50	; 0x32
 8005198:	2100      	movs	r1, #0
 800519a:	0038      	movs	r0, r7
 800519c:	f00e fb76 	bl	801388c <memset>
			cInputIndex =0;
 80051a0:	2700      	movs	r7, #0
		taskYIELD();
 80051a2:	f00a ff91 	bl	80100c8 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80051a6:	464b      	mov	r3, r9
 80051a8:	7818      	ldrb	r0, [r3, #0]
 80051aa:	1e45      	subs	r5, r0, #1
 80051ac:	4643      	mov	r3, r8
 80051ae:	5d59      	ldrb	r1, [r3, r5]
 80051b0:	b28b      	uxth	r3, r1
 80051b2:	2bbf      	cmp	r3, #191	; 0xbf
 80051b4:	d8b0      	bhi.n	8005118 <prvCLITask+0xc0>
			if(UARTRxBuf[PcPort - 1][chr]){
 80051b6:	9103      	str	r1, [sp, #12]
 80051b8:	006a      	lsls	r2, r5, #1
 80051ba:	1952      	adds	r2, r2, r5
 80051bc:	0192      	lsls	r2, r2, #6
 80051be:	4c15      	ldr	r4, [pc, #84]	; (8005214 <prvCLITask+0x1bc>)
 80051c0:	18a2      	adds	r2, r4, r2
 80051c2:	5c52      	ldrb	r2, [r2, r1]
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	d198      	bne.n	80050fa <prvCLITask+0xa2>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051c8:	2100      	movs	r1, #0
			if(UARTRxBuf[PcPort - 1][chr]){
 80051ca:	006a      	lsls	r2, r5, #1
 80051cc:	1952      	adds	r2, r2, r5
 80051ce:	0192      	lsls	r2, r2, #6
 80051d0:	18a4      	adds	r4, r4, r2
 80051d2:	e7c4      	b.n	800515e <prvCLITask+0x106>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80051d4:	4912      	ldr	r1, [pc, #72]	; (8005220 <prvCLITask+0x1c8>)
 80051d6:	4810      	ldr	r0, [pc, #64]	; (8005218 <prvCLITask+0x1c0>)
 80051d8:	f00f f922 	bl	8014420 <strcpy>
 80051dc:	e7cf      	b.n	800517e <prvCLITask+0x126>
				if(cInputIndex > 0){
 80051de:	2f00      	cmp	r7, #0
 80051e0:	dddf      	ble.n	80051a2 <prvCLITask+0x14a>
					cInputIndex--;
 80051e2:	3f01      	subs	r7, #1
 80051e4:	b27f      	sxtb	r7, r7
					cInputString[cInputIndex] ='\0';
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <prvCLITask+0x1c0>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	55da      	strb	r2, [r3, r7]
 80051ec:	e7d9      	b.n	80051a2 <prvCLITask+0x14a>
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	20006270 	.word	0x20006270
 80051f4:	200002b0 	.word	0x200002b0
 80051f8:	20000064 	.word	0x20000064
 80051fc:	0801758c 	.word	0x0801758c
 8005200:	20000806 	.word	0x20000806
 8005204:	20000998 	.word	0x20000998
 8005208:	08017d34 	.word	0x08017d34
 800520c:	08017d60 	.word	0x08017d60
 8005210:	20000c84 	.word	0x20000c84
 8005214:	20000a44 	.word	0x20000a44
 8005218:	200008c8 	.word	0x200008c8
 800521c:	0801961c 	.word	0x0801961c
 8005220:	20000964 	.word	0x20000964

08005224 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005228:	4b1c      	ldr	r3, [pc, #112]	; (800529c <ParseSnippetCommand+0x78>)
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	3a01      	subs	r2, #1
 800522e:	0093      	lsls	r3, r2, #2
 8005230:	189b      	adds	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <ParseSnippetCommand+0x7c>)
 8005236:	18d3      	adds	r3, r2, r3
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d02c      	beq.n	8005298 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 800523e:	4b19      	ldr	r3, [pc, #100]	; (80052a4 <ParseSnippetCommand+0x80>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d014      	beq.n	8005270 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005246:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <ParseSnippetCommand+0x80>)
 8005248:	681d      	ldr	r5, [r3, #0]
 800524a:	782b      	ldrb	r3, [r5, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d012      	beq.n	8005276 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005250:	2113      	movs	r1, #19
 8005252:	0028      	movs	r0, r5
 8005254:	f00f f8d6 	bl	8014404 <strchr>
 8005258:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 800525a:	d011      	beq.n	8005280 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 800525c:	1b42      	subs	r2, r0, r5
 800525e:	0029      	movs	r1, r5
 8005260:	0020      	movs	r0, r4
 8005262:	f00f f8f6 	bl	8014452 <strncpy>
		ptrStart =ptrEnd + 1;
 8005266:	3601      	adds	r6, #1
 8005268:	4b0e      	ldr	r3, [pc, #56]	; (80052a4 <ParseSnippetCommand+0x80>)
 800526a:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800526c:	2001      	movs	r0, #1
 800526e:	e006      	b.n	800527e <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005270:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <ParseSnippetCommand+0x80>)
 8005272:	6018      	str	r0, [r3, #0]
 8005274:	e7e7      	b.n	8005246 <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <ParseSnippetCommand+0x80>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
		return false;
 800527c:	2000      	movs	r0, #0
}
 800527e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005280:	0029      	movs	r1, r5
 8005282:	0020      	movs	r0, r4
 8005284:	f00f f8cc 	bl	8014420 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005288:	0020      	movs	r0, r4
 800528a:	f7fa ff45 	bl	8000118 <strlen>
 800528e:	182d      	adds	r5, r5, r0
 8005290:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <ParseSnippetCommand+0x80>)
 8005292:	601d      	str	r5, [r3, #0]
	return true;
 8005294:	2001      	movs	r0, #1
 8005296:	e7f2      	b.n	800527e <ParseSnippetCommand+0x5a>
		return false;
 8005298:	2000      	movs	r0, #0
 800529a:	e7f0      	b.n	800527e <ParseSnippetCommand+0x5a>
 800529c:	20000997 	.word	0x20000997
 80052a0:	2000628c 	.word	0x2000628c
 80052a4:	200009c0 	.word	0x200009c0

080052a8 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80052a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052aa:	b083      	sub	sp, #12
 80052ac:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80052ae:	0083      	lsls	r3, r0, #2
 80052b0:	181b      	adds	r3, r3, r0
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4a3f      	ldr	r2, [pc, #252]	; (80053b4 <CheckSnippetCondition+0x10c>)
 80052b6:	5c9b      	ldrb	r3, [r3, r2]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d003      	beq.n	80052c4 <CheckSnippetCondition+0x1c>
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d015      	beq.n	80052ec <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80052c0:	2000      	movs	r0, #0
 80052c2:	e011      	b.n	80052e8 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80052c4:	493b      	ldr	r1, [pc, #236]	; (80053b4 <CheckSnippetCondition+0x10c>)
 80052c6:	0083      	lsls	r3, r0, #2
 80052c8:	181a      	adds	r2, r3, r0
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80052ce:	7890      	ldrb	r0, [r2, #2]
 80052d0:	00c2      	lsls	r2, r0, #3
 80052d2:	1812      	adds	r2, r2, r0
 80052d4:	191b      	adds	r3, r3, r4
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18cb      	adds	r3, r1, r3
 80052da:	4937      	ldr	r1, [pc, #220]	; (80053b8 <CheckSnippetCondition+0x110>)
 80052dc:	5c50      	ldrb	r0, [r2, r1]
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	1ac0      	subs	r0, r0, r3
 80052e2:	4243      	negs	r3, r0
 80052e4:	4158      	adcs	r0, r3
 80052e6:	b2c0      	uxtb	r0, r0
}
 80052e8:	b003      	add	sp, #12
 80052ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80052ec:	4e31      	ldr	r6, [pc, #196]	; (80053b4 <CheckSnippetCondition+0x10c>)
 80052ee:	0085      	lsls	r5, r0, #2
 80052f0:	182b      	adds	r3, r5, r0
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	18f3      	adds	r3, r6, r3
 80052f6:	78da      	ldrb	r2, [r3, #3]
 80052f8:	3a01      	subs	r2, #1
 80052fa:	0053      	lsls	r3, r2, #1
 80052fc:	189b      	adds	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4a2e      	ldr	r2, [pc, #184]	; (80053bc <CheckSnippetCondition+0x114>)
 8005302:	589b      	ldr	r3, [r3, r2]
 8005304:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005306:	1829      	adds	r1, r5, r0
 8005308:	0089      	lsls	r1, r1, #2
 800530a:	3106      	adds	r1, #6
 800530c:	1989      	adds	r1, r1, r6
 800530e:	2204      	movs	r2, #4
 8005310:	a801      	add	r0, sp, #4
 8005312:	f00e fab2 	bl	801387a <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005316:	192d      	adds	r5, r5, r4
 8005318:	00ad      	lsls	r5, r5, #2
 800531a:	1975      	adds	r5, r6, r5
 800531c:	786b      	ldrb	r3, [r5, #1]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d83f      	bhi.n	80053a2 <CheckSnippetCondition+0xfa>
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <CheckSnippetCondition+0x118>)
 8005326:	58d3      	ldr	r3, [r2, r3]
 8005328:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800532a:	1c39      	adds	r1, r7, #0
 800532c:	9801      	ldr	r0, [sp, #4]
 800532e:	f7fb f8c5 	bl	80004bc <__aeabi_fcmpeq>
 8005332:	1e43      	subs	r3, r0, #1
 8005334:	4198      	sbcs	r0, r3
 8005336:	e7d7      	b.n	80052e8 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005338:	1c39      	adds	r1, r7, #0
 800533a:	9801      	ldr	r0, [sp, #4]
 800533c:	f7fb f8c4 	bl	80004c8 <__aeabi_fcmplt>
 8005340:	1e43      	subs	r3, r0, #1
 8005342:	4198      	sbcs	r0, r3
 8005344:	e7d0      	b.n	80052e8 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005346:	1c39      	adds	r1, r7, #0
 8005348:	9801      	ldr	r0, [sp, #4]
 800534a:	f7fb f8d1 	bl	80004f0 <__aeabi_fcmpgt>
 800534e:	2800      	cmp	r0, #0
 8005350:	d029      	beq.n	80053a6 <CheckSnippetCondition+0xfe>
 8005352:	2100      	movs	r1, #0
 8005354:	1c38      	adds	r0, r7, #0
 8005356:	f7fb f8b1 	bl	80004bc <__aeabi_fcmpeq>
 800535a:	4243      	negs	r3, r0
 800535c:	4158      	adcs	r0, r3
 800535e:	e7c3      	b.n	80052e8 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005360:	1c39      	adds	r1, r7, #0
 8005362:	9801      	ldr	r0, [sp, #4]
 8005364:	f7fb f8ba 	bl	80004dc <__aeabi_fcmple>
 8005368:	1e43      	subs	r3, r0, #1
 800536a:	4198      	sbcs	r0, r3
 800536c:	e7bc      	b.n	80052e8 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800536e:	1c39      	adds	r1, r7, #0
 8005370:	9801      	ldr	r0, [sp, #4]
 8005372:	f7fb f8c7 	bl	8000504 <__aeabi_fcmpge>
 8005376:	2800      	cmp	r0, #0
 8005378:	d017      	beq.n	80053aa <CheckSnippetCondition+0x102>
 800537a:	2100      	movs	r1, #0
 800537c:	1c38      	adds	r0, r7, #0
 800537e:	f7fb f89d 	bl	80004bc <__aeabi_fcmpeq>
 8005382:	4243      	negs	r3, r0
 8005384:	4158      	adcs	r0, r3
 8005386:	e7af      	b.n	80052e8 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005388:	1c39      	adds	r1, r7, #0
 800538a:	9801      	ldr	r0, [sp, #4]
 800538c:	f7fb f896 	bl	80004bc <__aeabi_fcmpeq>
 8005390:	2800      	cmp	r0, #0
 8005392:	d10c      	bne.n	80053ae <CheckSnippetCondition+0x106>
 8005394:	2100      	movs	r1, #0
 8005396:	1c38      	adds	r0, r7, #0
 8005398:	f7fb f890 	bl	80004bc <__aeabi_fcmpeq>
 800539c:	4243      	negs	r3, r0
 800539e:	4158      	adcs	r0, r3
 80053a0:	e7a2      	b.n	80052e8 <CheckSnippetCondition+0x40>
	return false;
 80053a2:	2000      	movs	r0, #0
 80053a4:	e7a0      	b.n	80052e8 <CheckSnippetCondition+0x40>
 80053a6:	2000      	movs	r0, #0
 80053a8:	e79e      	b.n	80052e8 <CheckSnippetCondition+0x40>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e79c      	b.n	80052e8 <CheckSnippetCondition+0x40>
 80053ae:	2000      	movs	r0, #0
 80053b0:	e79a      	b.n	80052e8 <CheckSnippetCondition+0x40>
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	2000628c 	.word	0x2000628c
 80053b8:	20001350 	.word	0x20001350
 80053bc:	20000098 	.word	0x20000098
 80053c0:	08017b1c 	.word	0x08017b1c

080053c4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80053c6:	f009 f9ab 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 80053ca:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80053cc:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <ExecuteSnippet+0x7c>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d032      	beq.n	800543a <ExecuteSnippet+0x76>
 80053d4:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80053d6:	4f1b      	ldr	r7, [pc, #108]	; (8005444 <ExecuteSnippet+0x80>)
 80053d8:	e01a      	b.n	8005410 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80053da:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <ExecuteSnippet+0x84>)
 80053dc:	7818      	ldrb	r0, [r3, #0]
 80053de:	002b      	movs	r3, r5
 80053e0:	4a1a      	ldr	r2, [pc, #104]	; (800544c <ExecuteSnippet+0x88>)
 80053e2:	2100      	movs	r1, #0
 80053e4:	f7ff fc26 	bl	8004c34 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80053e8:	0028      	movs	r0, r5
 80053ea:	f7fa fe95 	bl	8000118 <strlen>
 80053ee:	0002      	movs	r2, r0
 80053f0:	2100      	movs	r1, #0
 80053f2:	0028      	movs	r0, r5
 80053f4:	f00e fa4a 	bl	801388c <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80053f8:	4914      	ldr	r1, [pc, #80]	; (800544c <ExecuteSnippet+0x88>)
 80053fa:	68f0      	ldr	r0, [r6, #12]
 80053fc:	f7ff ff12 	bl	8005224 <ParseSnippetCommand>
 8005400:	2800      	cmp	r0, #0
 8005402:	d1ea      	bne.n	80053da <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005404:	3401      	adds	r4, #1
 8005406:	b2a4      	uxth	r4, r4
 8005408:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <ExecuteSnippet+0x7c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	42a3      	cmp	r3, r4
 800540e:	d914      	bls.n	800543a <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 8005410:	00a3      	lsls	r3, r4, #2
 8005412:	191b      	adds	r3, r3, r4
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	7c1b      	ldrb	r3, [r3, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f2      	beq.n	8005404 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800541e:	b2e0      	uxtb	r0, r4
 8005420:	f7ff ff42 	bl	80052a8 <CheckSnippetCondition>
 8005424:	2800      	cmp	r0, #0
 8005426:	d0ed      	beq.n	8005404 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <ExecuteSnippet+0x8c>)
 800542a:	2220      	movs	r2, #32
 800542c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800542e:	00a3      	lsls	r3, r4, #2
 8005430:	191e      	adds	r6, r3, r4
 8005432:	00b6      	lsls	r6, r6, #2
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <ExecuteSnippet+0x80>)
 8005436:	199e      	adds	r6, r3, r6
 8005438:	e7de      	b.n	80053f8 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 800543a:	2000      	movs	r0, #0
 800543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	20000997 	.word	0x20000997
 8005444:	2000628c 	.word	0x2000628c
 8005448:	200002b0 	.word	0x200002b0
 800544c:	20000930 	.word	0x20000930
 8005450:	200061f0 	.word	0x200061f0

08005454 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005454:	2000      	movs	r0, #0
 8005456:	4770      	bx	lr

08005458 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	0005      	movs	r5, r0
 800545e:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005460:	2300      	movs	r3, #0
 8005462:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005464:	9300      	str	r3, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005466:	aa01      	add	r2, sp, #4
 8005468:	2101      	movs	r1, #1
 800546a:	0020      	movs	r0, r4
 800546c:	f009 f95c 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005470:	2300      	movs	r3, #0
 8005472:	56c3      	ldrsb	r3, [r0, r3]
 8005474:	2b70      	cmp	r3, #112	; 0x70
 8005476:	d00e      	beq.n	8005496 <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005478:	466a      	mov	r2, sp
 800547a:	2102      	movs	r1, #2
 800547c:	0020      	movs	r0, r4
 800547e:	f009 f953 	bl	800e728 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005482:	f00e f988 	bl	8013796 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005486:	2213      	movs	r2, #19
 8005488:	490f      	ldr	r1, [pc, #60]	; (80054c8 <setBaudrateCommand+0x70>)
 800548a:	0028      	movs	r0, r5
 800548c:	f00e f9f5 	bl	801387a <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005490:	2000      	movs	r0, #0
 8005492:	b002      	add	sp, #8
 8005494:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005496:	3001      	adds	r0, #1
 8005498:	f00e f97d 	bl	8013796 <atol>
 800549c:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800549e:	466a      	mov	r2, sp
 80054a0:	2102      	movs	r1, #2
 80054a2:	0020      	movs	r0, r4
 80054a4:	f009 f940 	bl	800e728 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80054a8:	f00e f975 	bl	8013796 <atol>
 80054ac:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80054ae:	b2f0      	uxtb	r0, r6
 80054b0:	0021      	movs	r1, r4
 80054b2:	f008 fee7 	bl	800e284 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80054b6:	23ff      	movs	r3, #255	; 0xff
 80054b8:	4033      	ands	r3, r6
 80054ba:	0022      	movs	r2, r4
 80054bc:	4903      	ldr	r1, [pc, #12]	; (80054cc <setBaudrateCommand+0x74>)
 80054be:	0028      	movs	r0, r5
 80054c0:	f00e ff72 	bl	80143a8 <siprintf>
 80054c4:	e7e4      	b.n	8005490 <setBaudrateCommand+0x38>
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	080189ec 	.word	0x080189ec
 80054cc:	080189c4 	.word	0x080189c4

080054d0 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054d0:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80054d2:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <flashsizeCommand+0x10>)
 80054d4:	881a      	ldrh	r2, [r3, #0]
 80054d6:	4903      	ldr	r1, [pc, #12]	; (80054e4 <flashsizeCommand+0x14>)
 80054d8:	f00e ff66 	bl	80143a8 <siprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80054dc:	2000      	movs	r0, #0
 80054de:	bd10      	pop	{r4, pc}
 80054e0:	1ffff7cc 	.word	0x1ffff7cc
 80054e4:	080183b8 	.word	0x080183b8

080054e8 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054e8:	b510      	push	{r4, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	0004      	movs	r4, r0
 80054ee:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80054f8:	aa01      	add	r2, sp, #4
 80054fa:	2101      	movs	r1, #1
 80054fc:	f009 f914 	bl	800e728 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005500:	7803      	ldrb	r3, [r0, #0]
 8005502:	3b32      	subs	r3, #50	; 0x32
 8005504:	2b01      	cmp	r3, #1
 8005506:	d907      	bls.n	8005518 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005508:	2215      	movs	r2, #21
 800550a:	490b      	ldr	r1, [pc, #44]	; (8005538 <GetReadPrecentageCommand+0x50>)
 800550c:	0020      	movs	r0, r4
 800550e:	f00e f9b4 	bl	801387a <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 8005512:	2000      	movs	r0, #0
 8005514:	b002      	add	sp, #8
 8005516:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005518:	f00e f93d 	bl	8013796 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 800551c:	b2c0      	uxtb	r0, r0
 800551e:	4669      	mov	r1, sp
 8005520:	f007 feac 	bl	800d27c <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 8005524:	9800      	ldr	r0, [sp, #0]
 8005526:	f7fd fbab 	bl	8002c80 <__aeabi_f2d>
 800552a:	0002      	movs	r2, r0
 800552c:	000b      	movs	r3, r1
 800552e:	4903      	ldr	r1, [pc, #12]	; (800553c <GetReadPrecentageCommand+0x54>)
 8005530:	0020      	movs	r0, r4
 8005532:	f00e ff39 	bl	80143a8 <siprintf>
 8005536:	e7ec      	b.n	8005512 <GetReadPrecentageCommand+0x2a>
 8005538:	080180b4 	.word	0x080180b4
 800553c:	08018090 	.word	0x08018090

08005540 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005540:	b510      	push	{r4, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005546:	2300      	movs	r3, #0
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800554c:	4669      	mov	r1, sp
 800554e:	a801      	add	r0, sp, #4
 8005550:	f007 fdd6 	bl	800d100 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005554:	a901      	add	r1, sp, #4
 8005556:	0020      	movs	r0, r4
 8005558:	f00e ff62 	bl	8014420 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 800555c:	9800      	ldr	r0, [sp, #0]
 800555e:	f7fd fb8f 	bl	8002c80 <__aeabi_f2d>
 8005562:	0002      	movs	r2, r0
 8005564:	000b      	movs	r3, r1
 8005566:	4903      	ldr	r1, [pc, #12]	; (8005574 <ReadVrefCommand+0x34>)
 8005568:	0020      	movs	r0, r4
 800556a:	f00e ff1d 	bl	80143a8 <siprintf>
}
 800556e:	2000      	movs	r0, #0
 8005570:	b002      	add	sp, #8
 8005572:	bd10      	pop	{r4, pc}
 8005574:	08018100 	.word	0x08018100

08005578 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005578:	b510      	push	{r4, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800557e:	2300      	movs	r3, #0
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005584:	4669      	mov	r1, sp
 8005586:	a801      	add	r0, sp, #4
 8005588:	f007 fdba 	bl	800d100 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800558c:	a901      	add	r1, sp, #4
 800558e:	0020      	movs	r0, r4
 8005590:	f00e ff46 	bl	8014420 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005594:	9801      	ldr	r0, [sp, #4]
 8005596:	f7fd fb73 	bl	8002c80 <__aeabi_f2d>
 800559a:	0002      	movs	r2, r0
 800559c:	000b      	movs	r3, r1
 800559e:	4903      	ldr	r1, [pc, #12]	; (80055ac <ReadTempCommand+0x34>)
 80055a0:	0020      	movs	r0, r4
 80055a2:	f00e ff01 	bl	80143a8 <siprintf>
}
 80055a6:	2000      	movs	r0, #0
 80055a8:	b002      	add	sp, #8
 80055aa:	bd10      	pop	{r4, pc}
 80055ac:	080180cc 	.word	0x080180cc

080055b0 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	0005      	movs	r5, r0
 80055b6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80055bc:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80055be:	2300      	movs	r3, #0
 80055c0:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80055c2:	aa03      	add	r2, sp, #12
 80055c4:	2101      	movs	r1, #1
 80055c6:	0030      	movs	r0, r6
 80055c8:	f009 f8ae 	bl	800e728 <FreeRTOS_CLIGetParameter>
 80055cc:	0004      	movs	r4, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055ce:	aa02      	add	r2, sp, #8
 80055d0:	2102      	movs	r1, #2
 80055d2:	0030      	movs	r0, r6
 80055d4:	f009 f8a8 	bl	800e728 <FreeRTOS_CLIGetParameter>
 80055d8:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80055da:	7823      	ldrb	r3, [r4, #0]
 80055dc:	3b32      	subs	r3, #50	; 0x32
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d907      	bls.n	80055f2 <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80055e2:	2215      	movs	r2, #21
 80055e4:	4919      	ldr	r1, [pc, #100]	; (800564c <ADCReadCommand+0x9c>)
 80055e6:	0028      	movs	r0, r5
 80055e8:	f00e f947 	bl	801387a <memcpy>
}
 80055ec:	2000      	movs	r0, #0
 80055ee:	b004      	add	sp, #16
 80055f0:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80055f2:	0020      	movs	r0, r4
 80055f4:	f00e f8cf 	bl	8013796 <atol>
 80055f8:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80055fa:	4915      	ldr	r1, [pc, #84]	; (8005650 <ADCReadCommand+0xa0>)
 80055fc:	0030      	movs	r0, r6
 80055fe:	f7fa fd81 	bl	8000104 <strcmp>
 8005602:	2800      	cmp	r0, #0
 8005604:	d005      	beq.n	8005612 <ADCReadCommand+0x62>
 8005606:	4913      	ldr	r1, [pc, #76]	; (8005654 <ADCReadCommand+0xa4>)
 8005608:	0030      	movs	r0, r6
 800560a:	f7fa fd7b 	bl	8000104 <strcmp>
 800560e:	2800      	cmp	r0, #0
 8005610:	d116      	bne.n	8005640 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 8005612:	4e0f      	ldr	r6, [pc, #60]	; (8005650 <ADCReadCommand+0xa0>)
 8005614:	0031      	movs	r1, r6
 8005616:	0020      	movs	r0, r4
 8005618:	f007 ff12 	bl	800d440 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 800561c:	aa01      	add	r2, sp, #4
 800561e:	0031      	movs	r1, r6
 8005620:	0020      	movs	r0, r4
 8005622:	f007 ff3f 	bl	800d4a4 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005626:	a901      	add	r1, sp, #4
 8005628:	0028      	movs	r0, r5
 800562a:	f00e fef9 	bl	8014420 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800562e:	9801      	ldr	r0, [sp, #4]
 8005630:	f7fa ff9c 	bl	800056c <__aeabi_f2uiz>
 8005634:	b282      	uxth	r2, r0
 8005636:	4908      	ldr	r1, [pc, #32]	; (8005658 <ADCReadCommand+0xa8>)
 8005638:	0028      	movs	r0, r5
 800563a:	f00e feb5 	bl	80143a8 <siprintf>
 800563e:	e7d5      	b.n	80055ec <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005640:	2212      	movs	r2, #18
 8005642:	4906      	ldr	r1, [pc, #24]	; (800565c <ADCReadCommand+0xac>)
 8005644:	0028      	movs	r0, r5
 8005646:	f00e f918 	bl	801387a <memcpy>
 800564a:	e7cf      	b.n	80055ec <ADCReadCommand+0x3c>
 800564c:	080180b4 	.word	0x080180b4
 8005650:	08018040 	.word	0x08018040
 8005654:	08018044 	.word	0x08018044
 8005658:	0801804c 	.word	0x0801804c
 800565c:	0801805c 	.word	0x0801805c

08005660 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	46ce      	mov	lr, r9
 8005664:	b500      	push	{lr}
 8005666:	b086      	sub	sp, #24
 8005668:	9003      	str	r0, [sp, #12]
 800566a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800566c:	2300      	movs	r3, #0
 800566e:	9305      	str	r3, [sp, #20]
	char WriteVaule[1] ="H";
 8005670:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <testportCommand+0x198>)
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	ab04      	add	r3, sp, #16
 8005676:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005678:	aa05      	add	r2, sp, #20
 800567a:	2101      	movs	r1, #1
 800567c:	f009 f854 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8005680:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005682:	495e      	ldr	r1, [pc, #376]	; (80057fc <testportCommand+0x19c>)
 8005684:	f7fa fd3e 	bl	8000104 <strcmp>
 8005688:	2800      	cmp	r0, #0
 800568a:	d176      	bne.n	800577a <testportCommand+0x11a>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 800568c:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <testportCommand+0x1a0>)
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	4b5c      	ldr	r3, [pc, #368]	; (8005804 <testportCommand+0x1a4>)
 8005692:	189b      	adds	r3, r3, r2
 8005694:	3b01      	subs	r3, #1
 8005696:	781e      	ldrb	r6, [r3, #0]
 8005698:	2401      	movs	r4, #1
			if(PcPort != ports){
 800569a:	4d59      	ldr	r5, [pc, #356]	; (8005800 <testportCommand+0x1a0>)
 800569c:	e040      	b.n	8005720 <testportCommand+0xc0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 800569e:	0022      	movs	r2, r4
 80056a0:	4959      	ldr	r1, [pc, #356]	; (8005808 <testportCommand+0x1a8>)
 80056a2:	9f03      	ldr	r7, [sp, #12]
 80056a4:	0038      	movs	r0, r7
 80056a6:	f00e fe7f 	bl	80143a8 <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80056aa:	0038      	movs	r0, r7
 80056ac:	f7fa fd34 	bl	8000118 <strlen>
 80056b0:	b282      	uxth	r2, r0
 80056b2:	4b53      	ldr	r3, [pc, #332]	; (8005800 <testportCommand+0x1a0>)
 80056b4:	7818      	ldrb	r0, [r3, #0]
 80056b6:	2364      	movs	r3, #100	; 0x64
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	3b5a      	subs	r3, #90	; 0x5a
 80056bc:	0039      	movs	r1, r7
 80056be:	f008 fd73 	bl	800e1a8 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80056c2:	2254      	movs	r2, #84	; 0x54
 80056c4:	4951      	ldr	r1, [pc, #324]	; (800580c <testportCommand+0x1ac>)
 80056c6:	9f03      	ldr	r7, [sp, #12]
 80056c8:	0038      	movs	r0, r7
 80056ca:	f00e f8d6 	bl	801387a <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80056ce:	0038      	movs	r0, r7
 80056d0:	f7fa fd22 	bl	8000118 <strlen>
 80056d4:	b282      	uxth	r2, r0
 80056d6:	4b4a      	ldr	r3, [pc, #296]	; (8005800 <testportCommand+0x1a0>)
 80056d8:	7818      	ldrb	r0, [r3, #0]
 80056da:	2364      	movs	r3, #100	; 0x64
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	3b5a      	subs	r3, #90	; 0x5a
 80056e0:	0039      	movs	r1, r7
 80056e2:	f008 fd61 	bl	800e1a8 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80056e6:	3601      	adds	r6, #1
 80056e8:	4b45      	ldr	r3, [pc, #276]	; (8005800 <testportCommand+0x1a0>)
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	3a01      	subs	r2, #1
 80056ee:	0053      	lsls	r3, r2, #1
 80056f0:	189b      	adds	r3, r3, r2
 80056f2:	019b      	lsls	r3, r3, #6
 80056f4:	4a46      	ldr	r2, [pc, #280]	; (8005810 <testportCommand+0x1b0>)
 80056f6:	18d3      	adds	r3, r2, r3
 80056f8:	5d9b      	ldrb	r3, [r3, r6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10d      	bne.n	800571a <testportCommand+0xba>
 80056fe:	4691      	mov	r9, r2
 8005700:	4f3f      	ldr	r7, [pc, #252]	; (8005800 <testportCommand+0x1a0>)
					Delay_ms(1);
 8005702:	2001      	movs	r0, #1
 8005704:	f00a fe4c 	bl	80103a0 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005708:	783a      	ldrb	r2, [r7, #0]
 800570a:	3a01      	subs	r2, #1
 800570c:	0053      	lsls	r3, r2, #1
 800570e:	189b      	adds	r3, r3, r2
 8005710:	019b      	lsls	r3, r3, #6
 8005712:	444b      	add	r3, r9
 8005714:	5d9b      	ldrb	r3, [r3, r6]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f3      	beq.n	8005702 <testportCommand+0xa2>
 800571a:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 800571c:	2c04      	cmp	r4, #4
 800571e:	d035      	beq.n	800578c <testportCommand+0x12c>
 8005720:	b2e7      	uxtb	r7, r4
			if(PcPort != ports){
 8005722:	782b      	ldrb	r3, [r5, #0]
 8005724:	42bb      	cmp	r3, r7
 8005726:	d0f8      	beq.n	800571a <testportCommand+0xba>
				WriteVaule[0] =rand();
 8005728:	f00e fdbe 	bl	80142a8 <rand>
 800572c:	ab02      	add	r3, sp, #8
 800572e:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005730:	2364      	movs	r3, #100	; 0x64
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	3b5a      	subs	r3, #90	; 0x5a
 8005736:	2201      	movs	r2, #1
 8005738:	a904      	add	r1, sp, #16
 800573a:	0038      	movs	r0, r7
 800573c:	f008 fd34 	bl	800e1a8 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005740:	0038      	movs	r0, r7
 8005742:	f008 fd1d 	bl	800e180 <GetUart>
 8005746:	6803      	ldr	r3, [r0, #0]
 8005748:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 800574a:	aa02      	add	r2, sp, #8
 800574c:	7a12      	ldrb	r2, [r2, #8]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	429a      	cmp	r2, r3
 8005752:	d0a4      	beq.n	800569e <testportCommand+0x3e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 8005754:	0022      	movs	r2, r4
 8005756:	492f      	ldr	r1, [pc, #188]	; (8005814 <testportCommand+0x1b4>)
 8005758:	9f03      	ldr	r7, [sp, #12]
 800575a:	0038      	movs	r0, r7
 800575c:	f00e fe24 	bl	80143a8 <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005760:	0038      	movs	r0, r7
 8005762:	f7fa fcd9 	bl	8000118 <strlen>
 8005766:	b282      	uxth	r2, r0
 8005768:	4b25      	ldr	r3, [pc, #148]	; (8005800 <testportCommand+0x1a0>)
 800576a:	7818      	ldrb	r0, [r3, #0]
 800576c:	2364      	movs	r3, #100	; 0x64
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	3b5a      	subs	r3, #90	; 0x5a
 8005772:	0039      	movs	r1, r7
 8005774:	f008 fd18 	bl	800e1a8 <writePxMutex>
 8005778:	e7a3      	b.n	80056c2 <testportCommand+0x62>
	else if(pcParameterString1[0] == 'p'){
 800577a:	2300      	movs	r3, #0
 800577c:	56e3      	ldrsb	r3, [r4, r3]
 800577e:	2b70      	cmp	r3, #112	; 0x70
 8005780:	d009      	beq.n	8005796 <testportCommand+0x136>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005782:	220f      	movs	r2, #15
 8005784:	4924      	ldr	r1, [pc, #144]	; (8005818 <testportCommand+0x1b8>)
 8005786:	9803      	ldr	r0, [sp, #12]
 8005788:	f00e f877 	bl	801387a <memcpy>
}
 800578c:	2000      	movs	r0, #0
 800578e:	b006      	add	sp, #24
 8005790:	bc04      	pop	{r2}
 8005792:	4691      	mov	r9, r2
 8005794:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005796:	1c60      	adds	r0, r4, #1
 8005798:	f00d fffd 	bl	8013796 <atol>
 800579c:	0004      	movs	r4, r0
 800579e:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 80057a0:	1e73      	subs	r3, r6, #1
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d905      	bls.n	80057b2 <testportCommand+0x152>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80057a6:	221b      	movs	r2, #27
 80057a8:	491c      	ldr	r1, [pc, #112]	; (800581c <testportCommand+0x1bc>)
 80057aa:	9803      	ldr	r0, [sp, #12]
 80057ac:	f00e f865 	bl	801387a <memcpy>
 80057b0:	e7ec      	b.n	800578c <testportCommand+0x12c>
				WriteVaule[0] =rand();
 80057b2:	f00e fd79 	bl	80142a8 <rand>
 80057b6:	af04      	add	r7, sp, #16
 80057b8:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80057ba:	2364      	movs	r3, #100	; 0x64
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	3b32      	subs	r3, #50	; 0x32
 80057c0:	2201      	movs	r2, #1
 80057c2:	0039      	movs	r1, r7
 80057c4:	0030      	movs	r0, r6
 80057c6:	f008 fcef 	bl	800e1a8 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80057ca:	2000      	movs	r0, #0
 80057cc:	f008 fcd8 	bl	800e180 <GetUart>
 80057d0:	6803      	ldr	r3, [r0, #0]
 80057d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80057d4:	783a      	ldrb	r2, [r7, #0]
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	429a      	cmp	r2, r3
 80057da:	d006      	beq.n	80057ea <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80057dc:	22ff      	movs	r2, #255	; 0xff
 80057de:	4022      	ands	r2, r4
 80057e0:	490c      	ldr	r1, [pc, #48]	; (8005814 <testportCommand+0x1b4>)
 80057e2:	9803      	ldr	r0, [sp, #12]
 80057e4:	f00e fde0 	bl	80143a8 <siprintf>
	return pdFALSE;
 80057e8:	e7d0      	b.n	800578c <testportCommand+0x12c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80057ea:	22ff      	movs	r2, #255	; 0xff
 80057ec:	4022      	ands	r2, r4
 80057ee:	4906      	ldr	r1, [pc, #24]	; (8005808 <testportCommand+0x1a8>)
 80057f0:	9803      	ldr	r0, [sp, #12]
 80057f2:	f00e fdd9 	bl	80143a8 <siprintf>
 80057f6:	e7c9      	b.n	800578c <testportCommand+0x12c>
 80057f8:	08017200 	.word	0x08017200
 80057fc:	0801755c 	.word	0x0801755c
 8005800:	200002b0 	.word	0x200002b0
 8005804:	20000c84 	.word	0x20000c84
 8005808:	08019a34 	.word	0x08019a34
 800580c:	08019a64 	.word	0x08019a64
 8005810:	20000a44 	.word	0x20000a44
 8005814:	08019a50 	.word	0x08019a50
 8005818:	08019ab8 	.word	0x08019ab8
 800581c:	08019ac8 	.word	0x08019ac8

08005820 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	0005      	movs	r5, r0
 8005826:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005828:	2300      	movs	r3, #0
 800582a:	9301      	str	r3, [sp, #4]
 800582c:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800582e:	aa01      	add	r2, sp, #4
 8005830:	2101      	movs	r1, #1
 8005832:	0020      	movs	r0, r4
 8005834:	f008 ff78 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005838:	2300      	movs	r3, #0
 800583a:	56c3      	ldrsb	r3, [r0, r3]
 800583c:	2b70      	cmp	r3, #112	; 0x70
 800583e:	d00e      	beq.n	800585e <unbridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005840:	466a      	mov	r2, sp
 8005842:	2102      	movs	r1, #2
 8005844:	0020      	movs	r0, r4
 8005846:	f008 ff6f 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800584a:	2300      	movs	r3, #0
 800584c:	56c3      	ldrsb	r3, [r0, r3]
 800584e:	2b70      	cmp	r3, #112	; 0x70
 8005850:	d01d      	beq.n	800588e <unbridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005852:	220f      	movs	r2, #15
 8005854:	4919      	ldr	r1, [pc, #100]	; (80058bc <unbridgeCommand+0x9c>)
 8005856:	0028      	movs	r0, r5
 8005858:	f00e f80f 	bl	801387a <memcpy>
 800585c:	e014      	b.n	8005888 <unbridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 800585e:	3001      	adds	r0, #1
 8005860:	f00d ff99 	bl	8013796 <atol>
 8005864:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005866:	466a      	mov	r2, sp
 8005868:	2102      	movs	r1, #2
 800586a:	0020      	movs	r0, r4
 800586c:	f008 ff5c 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005870:	2300      	movs	r3, #0
 8005872:	56c3      	ldrsb	r3, [r0, r3]
 8005874:	2b70      	cmp	r3, #112	; 0x70
 8005876:	d00e      	beq.n	8005896 <unbridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 8005878:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 800587a:	2867      	cmp	r0, #103	; 0x67
 800587c:	d0e9      	beq.n	8005852 <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800587e:	2219      	movs	r2, #25
 8005880:	490f      	ldr	r1, [pc, #60]	; (80058c0 <unbridgeCommand+0xa0>)
 8005882:	0028      	movs	r0, r5
 8005884:	f00d fff9 	bl	801387a <memcpy>
}
 8005888:	2000      	movs	r0, #0
 800588a:	b002      	add	sp, #8
 800588c:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800588e:	3001      	adds	r0, #1
 8005890:	f00d ff81 	bl	8013796 <atol>
 8005894:	e7dd      	b.n	8005852 <unbridgeCommand+0x32>
 8005896:	3001      	adds	r0, #1
 8005898:	f00d ff7d 	bl	8013796 <atol>
 800589c:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 800589e:	b2c1      	uxtb	r1, r0
 80058a0:	b2f0      	uxtb	r0, r6
 80058a2:	f7fe fecb 	bl	800463c <Unbridge>
	if(result == BOS_OK)
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d1e7      	bne.n	800587a <unbridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80058aa:	22ff      	movs	r2, #255	; 0xff
 80058ac:	0023      	movs	r3, r4
 80058ae:	4013      	ands	r3, r2
 80058b0:	4032      	ands	r2, r6
 80058b2:	4904      	ldr	r1, [pc, #16]	; (80058c4 <unbridgeCommand+0xa4>)
 80058b4:	0028      	movs	r0, r5
 80058b6:	f00e fd77 	bl	80143a8 <siprintf>
 80058ba:	e7e5      	b.n	8005888 <unbridgeCommand+0x68>
 80058bc:	08019ab8 	.word	0x08019ab8
 80058c0:	08019b80 	.word	0x08019b80
 80058c4:	08019b60 	.word	0x08019b60

080058c8 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	0005      	movs	r5, r0
 80058ce:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80058d6:	aa01      	add	r2, sp, #4
 80058d8:	2101      	movs	r1, #1
 80058da:	0020      	movs	r0, r4
 80058dc:	f008 ff24 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80058e0:	2300      	movs	r3, #0
 80058e2:	56c3      	ldrsb	r3, [r0, r3]
 80058e4:	2b70      	cmp	r3, #112	; 0x70
 80058e6:	d00e      	beq.n	8005906 <bridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80058e8:	466a      	mov	r2, sp
 80058ea:	2102      	movs	r1, #2
 80058ec:	0020      	movs	r0, r4
 80058ee:	f008 ff1b 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80058f2:	2300      	movs	r3, #0
 80058f4:	56c3      	ldrsb	r3, [r0, r3]
 80058f6:	2b70      	cmp	r3, #112	; 0x70
 80058f8:	d01d      	beq.n	8005936 <bridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058fa:	220f      	movs	r2, #15
 80058fc:	4919      	ldr	r1, [pc, #100]	; (8005964 <bridgeCommand+0x9c>)
 80058fe:	0028      	movs	r0, r5
 8005900:	f00d ffbb 	bl	801387a <memcpy>
 8005904:	e014      	b.n	8005930 <bridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005906:	3001      	adds	r0, #1
 8005908:	f00d ff45 	bl	8013796 <atol>
 800590c:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800590e:	466a      	mov	r2, sp
 8005910:	2102      	movs	r1, #2
 8005912:	0020      	movs	r0, r4
 8005914:	f008 ff08 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005918:	2300      	movs	r3, #0
 800591a:	56c3      	ldrsb	r3, [r0, r3]
 800591c:	2b70      	cmp	r3, #112	; 0x70
 800591e:	d00e      	beq.n	800593e <bridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 8005920:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005922:	2867      	cmp	r0, #103	; 0x67
 8005924:	d0e9      	beq.n	80058fa <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005926:	2217      	movs	r2, #23
 8005928:	490f      	ldr	r1, [pc, #60]	; (8005968 <bridgeCommand+0xa0>)
 800592a:	0028      	movs	r0, r5
 800592c:	f00d ffa5 	bl	801387a <memcpy>
}
 8005930:	2000      	movs	r0, #0
 8005932:	b002      	add	sp, #8
 8005934:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005936:	3001      	adds	r0, #1
 8005938:	f00d ff2d 	bl	8013796 <atol>
 800593c:	e7dd      	b.n	80058fa <bridgeCommand+0x32>
 800593e:	3001      	adds	r0, #1
 8005940:	f00d ff29 	bl	8013796 <atol>
 8005944:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 8005946:	b2c1      	uxtb	r1, r0
 8005948:	b2f0      	uxtb	r0, r6
 800594a:	f7fe fe63 	bl	8004614 <Bridge>
	if(result == BOS_OK)
 800594e:	2800      	cmp	r0, #0
 8005950:	d1e7      	bne.n	8005922 <bridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005952:	22ff      	movs	r2, #255	; 0xff
 8005954:	0023      	movs	r3, r4
 8005956:	4013      	ands	r3, r2
 8005958:	4032      	ands	r2, r6
 800595a:	4904      	ldr	r1, [pc, #16]	; (800596c <bridgeCommand+0xa4>)
 800595c:	0028      	movs	r0, r5
 800595e:	f00e fd23 	bl	80143a8 <siprintf>
 8005962:	e7e5      	b.n	8005930 <bridgeCommand+0x68>
 8005964:	08019ab8 	.word	0x08019ab8
 8005968:	08018254 	.word	0x08018254
 800596c:	08018230 	.word	0x08018230

08005970 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	46de      	mov	lr, fp
 8005974:	464f      	mov	r7, r9
 8005976:	4646      	mov	r6, r8
 8005978:	b5c0      	push	{r6, r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	9001      	str	r0, [sp, #4]
 800597e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005980:	2300      	movs	r3, #0
 8005982:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005984:	aa03      	add	r2, sp, #12
 8005986:	2101      	movs	r1, #1
 8005988:	f008 fece 	bl	800e728 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 800598c:	f00d fefd 	bl	801378a <atoi>
 8005990:	0004      	movs	r4, r0
 8005992:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 8005994:	2d00      	cmp	r5, #0
 8005996:	d003      	beq.n	80059a0 <delSnipCommand+0x30>
 8005998:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <delSnipCommand+0xf0>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	42ab      	cmp	r3, r5
 800599e:	d20b      	bcs.n	80059b8 <delSnipCommand+0x48>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059a0:	2223      	movs	r2, #35	; 0x23
 80059a2:	4930      	ldr	r1, [pc, #192]	; (8005a64 <delSnipCommand+0xf4>)
 80059a4:	9801      	ldr	r0, [sp, #4]
 80059a6:	f00d ff68 	bl	801387a <memcpy>
}
 80059aa:	2000      	movs	r0, #0
 80059ac:	b004      	add	sp, #16
 80059ae:	bc1c      	pop	{r2, r3, r4}
 80059b0:	4690      	mov	r8, r2
 80059b2:	4699      	mov	r9, r3
 80059b4:	46a3      	mov	fp, r4
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80059b8:	27ff      	movs	r7, #255	; 0xff
 80059ba:	4007      	ands	r7, r0
 80059bc:	3f01      	subs	r7, #1
 80059be:	4b2a      	ldr	r3, [pc, #168]	; (8005a68 <delSnipCommand+0xf8>)
 80059c0:	4699      	mov	r9, r3
 80059c2:	00bb      	lsls	r3, r7, #2
 80059c4:	4698      	mov	r8, r3
 80059c6:	19db      	adds	r3, r3, r7
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	2600      	movs	r6, #0
 80059cc:	464a      	mov	r2, r9
 80059ce:	549e      	strb	r6, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 80059d0:	4643      	mov	r3, r8
 80059d2:	19db      	adds	r3, r3, r7
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	444b      	add	r3, r9
 80059d8:	469b      	mov	fp, r3
 80059da:	705e      	strb	r6, [r3, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 80059dc:	4643      	mov	r3, r8
 80059de:	19d8      	adds	r0, r3, r7
 80059e0:	0080      	lsls	r0, r0, #2
 80059e2:	3002      	adds	r0, #2
 80059e4:	4448      	add	r0, r9
 80059e6:	2204      	movs	r2, #4
 80059e8:	2100      	movs	r1, #0
 80059ea:	f00d ff4f 	bl	801388c <memset>
		snippets[index - 1].state = false;
 80059ee:	465b      	mov	r3, fp
 80059f0:	741e      	strb	r6, [r3, #16]
		free(snippets[index - 1].cmd);
 80059f2:	68d8      	ldr	r0, [r3, #12]
 80059f4:	f00d ff16 	bl	8013824 <free>
		snippets[index - 1].cmd = NULL;
 80059f8:	465f      	mov	r7, fp
 80059fa:	60fe      	str	r6, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 80059fc:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <delSnipCommand+0xf0>)
 80059fe:	781f      	ldrb	r7, [r3, #0]
 8005a00:	42bd      	cmp	r5, r7
 8005a02:	d222      	bcs.n	8005a4a <delSnipCommand+0xda>
 8005a04:	23ff      	movs	r3, #255	; 0xff
 8005a06:	4023      	ands	r3, r4
 8005a08:	009c      	lsls	r4, r3, #2
 8005a0a:	18e4      	adds	r4, r4, r3
 8005a0c:	00a4      	lsls	r4, r4, #2
 8005a0e:	4916      	ldr	r1, [pc, #88]	; (8005a68 <delSnipCommand+0xf8>)
 8005a10:	1864      	adds	r4, r4, r1
 8005a12:	1e7a      	subs	r2, r7, #1
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	18d3      	adds	r3, r2, r3
 8005a1a:	009d      	lsls	r5, r3, #2
 8005a1c:	18ed      	adds	r5, r5, r3
 8005a1e:	00ad      	lsls	r5, r5, #2
 8005a20:	3114      	adds	r1, #20
 8005a22:	186d      	adds	r5, r5, r1
 8005a24:	e002      	b.n	8005a2c <delSnipCommand+0xbc>
 8005a26:	3414      	adds	r4, #20
 8005a28:	42ac      	cmp	r4, r5
 8005a2a:	d00e      	beq.n	8005a4a <delSnipCommand+0xda>
			if(snippets[s].cond.conditionType){
 8005a2c:	7823      	ldrb	r3, [r4, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f9      	beq.n	8005a26 <delSnipCommand+0xb6>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005a32:	2214      	movs	r2, #20
 8005a34:	0021      	movs	r1, r4
 8005a36:	0020      	movs	r0, r4
 8005a38:	3814      	subs	r0, #20
 8005a3a:	f00d ff1e 	bl	801387a <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005a3e:	2214      	movs	r2, #20
 8005a40:	2100      	movs	r1, #0
 8005a42:	0020      	movs	r0, r4
 8005a44:	f00d ff22 	bl	801388c <memset>
 8005a48:	e7ed      	b.n	8005a26 <delSnipCommand+0xb6>
		--numOfRecordedSnippets;
 8005a4a:	3f01      	subs	r7, #1
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <delSnipCommand+0xf0>)
 8005a4e:	701f      	strb	r7, [r3, #0]
		SaveToRO();
 8005a50:	f004 fb64 	bl	800a11c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a54:	2236      	movs	r2, #54	; 0x36
 8005a56:	4905      	ldr	r1, [pc, #20]	; (8005a6c <delSnipCommand+0xfc>)
 8005a58:	9801      	ldr	r0, [sp, #4]
 8005a5a:	f00d ff0e 	bl	801387a <memcpy>
 8005a5e:	e7a4      	b.n	80059aa <delSnipCommand+0x3a>
 8005a60:	20000997 	.word	0x20000997
 8005a64:	08018374 	.word	0x08018374
 8005a68:	2000628c 	.word	0x2000628c
 8005a6c:	0801833c 	.word	0x0801833c

08005a70 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a70:	b510      	push	{r4, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	0004      	movs	r4, r0
 8005a76:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a7c:	aa01      	add	r2, sp, #4
 8005a7e:	2101      	movs	r1, #1
 8005a80:	f008 fe52 	bl	800e728 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005a84:	f00d fe81 	bl	801378a <atoi>
 8005a88:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <pauseSnipCommand+0x26>
 8005a8e:	4a0f      	ldr	r2, [pc, #60]	; (8005acc <pauseSnipCommand+0x5c>)
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d207      	bcs.n	8005aa6 <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a96:	2223      	movs	r2, #35	; 0x23
 8005a98:	490d      	ldr	r1, [pc, #52]	; (8005ad0 <pauseSnipCommand+0x60>)
 8005a9a:	0020      	movs	r0, r4
 8005a9c:	f00d feed 	bl	801387a <memcpy>
}
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	b002      	add	sp, #8
 8005aa4:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005aa6:	23ff      	movs	r3, #255	; 0xff
 8005aa8:	4018      	ands	r0, r3
 8005aaa:	3801      	subs	r0, #1
 8005aac:	0083      	lsls	r3, r0, #2
 8005aae:	1818      	adds	r0, r3, r0
 8005ab0:	0080      	lsls	r0, r0, #2
 8005ab2:	4b08      	ldr	r3, [pc, #32]	; (8005ad4 <pauseSnipCommand+0x64>)
 8005ab4:	1818      	adds	r0, r3, r0
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005aba:	f004 fb2f 	bl	800a11c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005abe:	2235      	movs	r2, #53	; 0x35
 8005ac0:	4905      	ldr	r1, [pc, #20]	; (8005ad8 <pauseSnipCommand+0x68>)
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	f00d fed9 	bl	801387a <memcpy>
 8005ac8:	e7ea      	b.n	8005aa0 <pauseSnipCommand+0x30>
 8005aca:	46c0      	nop			; (mov r8, r8)
 8005acc:	20000997 	.word	0x20000997
 8005ad0:	08018374 	.word	0x08018374
 8005ad4:	2000628c 	.word	0x2000628c
 8005ad8:	08018784 	.word	0x08018784

08005adc <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005adc:	b510      	push	{r4, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	0004      	movs	r4, r0
 8005ae2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae8:	aa01      	add	r2, sp, #4
 8005aea:	2101      	movs	r1, #1
 8005aec:	f008 fe1c 	bl	800e728 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005af0:	f00d fe4b 	bl	801378a <atoi>
 8005af4:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <actSnipCommand+0x26>
 8005afa:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <actSnipCommand+0x5c>)
 8005afc:	7812      	ldrb	r2, [r2, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d207      	bcs.n	8005b12 <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b02:	2223      	movs	r2, #35	; 0x23
 8005b04:	490d      	ldr	r1, [pc, #52]	; (8005b3c <actSnipCommand+0x60>)
 8005b06:	0020      	movs	r0, r4
 8005b08:	f00d feb7 	bl	801387a <memcpy>
}
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	b002      	add	sp, #8
 8005b10:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005b12:	23ff      	movs	r3, #255	; 0xff
 8005b14:	4018      	ands	r0, r3
 8005b16:	3801      	subs	r0, #1
 8005b18:	0083      	lsls	r3, r0, #2
 8005b1a:	1818      	adds	r0, r3, r0
 8005b1c:	0080      	lsls	r0, r0, #2
 8005b1e:	4b08      	ldr	r3, [pc, #32]	; (8005b40 <actSnipCommand+0x64>)
 8005b20:	1818      	adds	r0, r3, r0
 8005b22:	2301      	movs	r3, #1
 8005b24:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005b26:	f004 faf9 	bl	800a11c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b2a:	2238      	movs	r2, #56	; 0x38
 8005b2c:	4905      	ldr	r1, [pc, #20]	; (8005b44 <actSnipCommand+0x68>)
 8005b2e:	0020      	movs	r0, r4
 8005b30:	f00d fea3 	bl	801387a <memcpy>
 8005b34:	e7ea      	b.n	8005b0c <actSnipCommand+0x30>
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	20000997 	.word	0x20000997
 8005b3c:	08018374 	.word	0x08018374
 8005b40:	2000628c 	.word	0x2000628c
 8005b44:	08018138 	.word	0x08018138

08005b48 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4a:	46de      	mov	lr, fp
 8005b4c:	4657      	mov	r7, sl
 8005b4e:	464e      	mov	r6, r9
 8005b50:	4645      	mov	r5, r8
 8005b52:	b5e0      	push	{r5, r6, r7, lr}
 8005b54:	b08b      	sub	sp, #44	; 0x2c
 8005b56:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005b58:	aa06      	add	r2, sp, #24
 8005b5a:	4b7c      	ldr	r3, [pc, #496]	; (8005d4c <snipCommand+0x204>)
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005b60:	c223      	stmia	r2!, {r0, r1, r5}
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005b66:	4b7a      	ldr	r3, [pc, #488]	; (8005d50 <snipCommand+0x208>)
 8005b68:	7818      	ldrb	r0, [r3, #0]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	425b      	negs	r3, r3
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	3333      	adds	r3, #51	; 0x33
 8005b72:	2237      	movs	r2, #55	; 0x37
 8005b74:	4977      	ldr	r1, [pc, #476]	; (8005d54 <snipCommand+0x20c>)
 8005b76:	f008 fb17 	bl	800e1a8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005b7a:	4b77      	ldr	r3, [pc, #476]	; (8005d58 <snipCommand+0x210>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d100      	bne.n	8005b84 <snipCommand+0x3c>
 8005b82:	e0d5      	b.n	8005d30 <snipCommand+0x1e8>
 8005b84:	2600      	movs	r6, #0
		if(snippets[s].cond.conditionType)
 8005b86:	4b75      	ldr	r3, [pc, #468]	; (8005d5c <snipCommand+0x214>)
 8005b88:	4699      	mov	r9, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005b8a:	4d75      	ldr	r5, [pc, #468]	; (8005d60 <snipCommand+0x218>)
 8005b8c:	e0bd      	b.n	8005d0a <snipCommand+0x1c2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005b8e:	4b73      	ldr	r3, [pc, #460]	; (8005d5c <snipCommand+0x214>)
 8005b90:	469b      	mov	fp, r3
 8005b92:	00b3      	lsls	r3, r6, #2
 8005b94:	469a      	mov	sl, r3
 8005b96:	199b      	adds	r3, r3, r6
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	445b      	add	r3, fp
 8005b9c:	7c1a      	ldrb	r2, [r3, #16]
 8005b9e:	00d3      	lsls	r3, r2, #3
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	aa06      	add	r2, sp, #24
 8005ba4:	4694      	mov	ip, r2
 8005ba6:	4463      	add	r3, ip
 8005ba8:	4642      	mov	r2, r8
 8005baa:	496e      	ldr	r1, [pc, #440]	; (8005d64 <snipCommand+0x21c>)
 8005bac:	0020      	movs	r0, r4
 8005bae:	f00e fbfb 	bl	80143a8 <siprintf>
		switch(snippets[s].cond.conditionType){
 8005bb2:	4653      	mov	r3, sl
 8005bb4:	199b      	adds	r3, r3, r6
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	465a      	mov	r2, fp
 8005bba:	5c9b      	ldrb	r3, [r3, r2]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d02c      	beq.n	8005c1a <snipCommand+0xd2>
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d000      	beq.n	8005bc6 <snipCommand+0x7e>
 8005bc4:	e0ad      	b.n	8005d22 <snipCommand+0x1da>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005bc6:	00b1      	lsls	r1, r6, #2
 8005bc8:	1989      	adds	r1, r1, r6
 8005bca:	0089      	lsls	r1, r1, #2
 8005bcc:	3106      	adds	r1, #6
 8005bce:	4e63      	ldr	r6, [pc, #396]	; (8005d5c <snipCommand+0x214>)
 8005bd0:	1989      	adds	r1, r1, r6
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	a805      	add	r0, sp, #20
 8005bd6:	f00d fe50 	bl	801387a <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005bda:	00bb      	lsls	r3, r7, #2
 8005bdc:	19db      	adds	r3, r3, r7
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	18f6      	adds	r6, r6, r3
 8005be2:	78f2      	ldrb	r2, [r6, #3]
 8005be4:	3a01      	subs	r2, #1
 8005be6:	0053      	lsls	r3, r2, #1
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4a5e      	ldr	r2, [pc, #376]	; (8005d68 <snipCommand+0x220>)
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	469a      	mov	sl, r3
 8005bf4:	9805      	ldr	r0, [sp, #20]
 8005bf6:	f7fd f843 	bl	8002c80 <__aeabi_f2d>
 8005bfa:	9002      	str	r0, [sp, #8]
 8005bfc:	9103      	str	r1, [sp, #12]
 8005bfe:	7873      	ldrb	r3, [r6, #1]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	005a      	lsls	r2, r3, #1
 8005c04:	18d2      	adds	r2, r2, r3
 8005c06:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <snipCommand+0x224>)
 8005c08:	189b      	adds	r3, r3, r2
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	4653      	mov	r3, sl
 8005c0e:	0022      	movs	r2, r4
 8005c10:	4957      	ldr	r1, [pc, #348]	; (8005d70 <snipCommand+0x228>)
 8005c12:	0020      	movs	r0, r4
 8005c14:	f00e fbc8 	bl	80143a8 <siprintf>
				break;
 8005c18:	e083      	b.n	8005d22 <snipCommand+0x1da>
				switch(snippets[s].cond.buffer1[1]){
 8005c1a:	00b3      	lsls	r3, r6, #2
 8005c1c:	199b      	adds	r3, r3, r6
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4a4e      	ldr	r2, [pc, #312]	; (8005d5c <snipCommand+0x214>)
 8005c22:	18d3      	adds	r3, r2, r3
 8005c24:	78db      	ldrb	r3, [r3, #3]
 8005c26:	3b05      	subs	r3, #5
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	2a09      	cmp	r2, #9
 8005c2c:	d879      	bhi.n	8005d22 <snipCommand+0x1da>
 8005c2e:	0093      	lsls	r3, r2, #2
 8005c30:	4a50      	ldr	r2, [pc, #320]	; (8005d74 <snipCommand+0x22c>)
 8005c32:	58d3      	ldr	r3, [r2, r3]
 8005c34:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c36:	00b3      	lsls	r3, r6, #2
 8005c38:	199b      	adds	r3, r3, r6
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4a47      	ldr	r2, [pc, #284]	; (8005d5c <snipCommand+0x214>)
 8005c3e:	18d2      	adds	r2, r2, r3
 8005c40:	7893      	ldrb	r3, [r2, #2]
 8005c42:	68d2      	ldr	r2, [r2, #12]
 8005c44:	9200      	str	r2, [sp, #0]
 8005c46:	0022      	movs	r2, r4
 8005c48:	494b      	ldr	r1, [pc, #300]	; (8005d78 <snipCommand+0x230>)
 8005c4a:	0020      	movs	r0, r4
 8005c4c:	f00e fbac 	bl	80143a8 <siprintf>
						break;
 8005c50:	e067      	b.n	8005d22 <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005c52:	00b3      	lsls	r3, r6, #2
 8005c54:	199b      	adds	r3, r3, r6
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4a40      	ldr	r2, [pc, #256]	; (8005d5c <snipCommand+0x214>)
 8005c5a:	18d2      	adds	r2, r2, r3
 8005c5c:	7893      	ldrb	r3, [r2, #2]
 8005c5e:	68d2      	ldr	r2, [r2, #12]
 8005c60:	9200      	str	r2, [sp, #0]
 8005c62:	0022      	movs	r2, r4
 8005c64:	4945      	ldr	r1, [pc, #276]	; (8005d7c <snipCommand+0x234>)
 8005c66:	0020      	movs	r0, r4
 8005c68:	f00e fb9e 	bl	80143a8 <siprintf>
						break;
 8005c6c:	e059      	b.n	8005d22 <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c6e:	00b2      	lsls	r2, r6, #2
 8005c70:	1992      	adds	r2, r2, r6
 8005c72:	0093      	lsls	r3, r2, #2
 8005c74:	4a39      	ldr	r2, [pc, #228]	; (8005d5c <snipCommand+0x214>)
 8005c76:	18d2      	adds	r2, r2, r3
 8005c78:	7893      	ldrb	r3, [r2, #2]
 8005c7a:	68d1      	ldr	r1, [r2, #12]
 8005c7c:	9101      	str	r1, [sp, #4]
 8005c7e:	7912      	ldrb	r2, [r2, #4]
 8005c80:	9200      	str	r2, [sp, #0]
 8005c82:	0022      	movs	r2, r4
 8005c84:	493e      	ldr	r1, [pc, #248]	; (8005d80 <snipCommand+0x238>)
 8005c86:	0020      	movs	r0, r4
 8005c88:	f00e fb8e 	bl	80143a8 <siprintf>
						break;
 8005c8c:	e049      	b.n	8005d22 <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005c8e:	00b2      	lsls	r2, r6, #2
 8005c90:	1992      	adds	r2, r2, r6
 8005c92:	0093      	lsls	r3, r2, #2
 8005c94:	4a31      	ldr	r2, [pc, #196]	; (8005d5c <snipCommand+0x214>)
 8005c96:	18d2      	adds	r2, r2, r3
 8005c98:	7893      	ldrb	r3, [r2, #2]
 8005c9a:	68d1      	ldr	r1, [r2, #12]
 8005c9c:	9101      	str	r1, [sp, #4]
 8005c9e:	7912      	ldrb	r2, [r2, #4]
 8005ca0:	9200      	str	r2, [sp, #0]
 8005ca2:	0022      	movs	r2, r4
 8005ca4:	4937      	ldr	r1, [pc, #220]	; (8005d84 <snipCommand+0x23c>)
 8005ca6:	0020      	movs	r0, r4
 8005ca8:	f00e fb7e 	bl	80143a8 <siprintf>
						break;
 8005cac:	e039      	b.n	8005d22 <snipCommand+0x1da>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005cae:	002b      	movs	r3, r5
 8005cb0:	0022      	movs	r2, r4
 8005cb2:	4935      	ldr	r1, [pc, #212]	; (8005d88 <snipCommand+0x240>)
 8005cb4:	0020      	movs	r0, r4
 8005cb6:	f00e fb77 	bl	80143a8 <siprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005cba:	0028      	movs	r0, r5
 8005cbc:	f7fa fa2c 	bl	8000118 <strlen>
 8005cc0:	0002      	movs	r2, r0
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	0028      	movs	r0, r5
 8005cc6:	f00d fde1 	bl	801388c <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005cca:	0031      	movs	r1, r6
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f7ff faa9 	bl	8005224 <ParseSnippetCommand>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d1eb      	bne.n	8005cae <snipCommand+0x166>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005cd6:	0020      	movs	r0, r4
 8005cd8:	f7fa fa1e 	bl	8000118 <strlen>
 8005cdc:	1820      	adds	r0, r4, r0
 8005cde:	220c      	movs	r2, #12
 8005ce0:	492a      	ldr	r1, [pc, #168]	; (8005d8c <snipCommand+0x244>)
 8005ce2:	f00d fdca 	bl	801387a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f7fa fa16 	bl	8000118 <strlen>
 8005cec:	b282      	uxth	r2, r0
 8005cee:	4b18      	ldr	r3, [pc, #96]	; (8005d50 <snipCommand+0x208>)
 8005cf0:	7818      	ldrb	r0, [r3, #0]
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	425b      	negs	r3, r3
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	3333      	adds	r3, #51	; 0x33
 8005cfa:	0021      	movs	r1, r4
 8005cfc:	f008 fa54 	bl	800e1a8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005d00:	4646      	mov	r6, r8
 8005d02:	4b15      	ldr	r3, [pc, #84]	; (8005d58 <snipCommand+0x210>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	4543      	cmp	r3, r8
 8005d08:	d912      	bls.n	8005d30 <snipCommand+0x1e8>
 8005d0a:	1c73      	adds	r3, r6, #1
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	4698      	mov	r8, r3
		if(snippets[s].cond.conditionType)
 8005d10:	0037      	movs	r7, r6
 8005d12:	00b3      	lsls	r3, r6, #2
 8005d14:	199b      	adds	r3, r3, r6
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	464a      	mov	r2, r9
 8005d1a:	5c9b      	ldrb	r3, [r3, r2]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d000      	beq.n	8005d22 <snipCommand+0x1da>
 8005d20:	e735      	b.n	8005b8e <snipCommand+0x46>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005d22:	4e0f      	ldr	r6, [pc, #60]	; (8005d60 <snipCommand+0x218>)
 8005d24:	00bb      	lsls	r3, r7, #2
 8005d26:	19db      	adds	r3, r3, r7
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4f0c      	ldr	r7, [pc, #48]	; (8005d5c <snipCommand+0x214>)
 8005d2c:	18ff      	adds	r7, r7, r3
 8005d2e:	e7cc      	b.n	8005cca <snipCommand+0x182>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005d30:	22b5      	movs	r2, #181	; 0xb5
 8005d32:	4917      	ldr	r1, [pc, #92]	; (8005d90 <snipCommand+0x248>)
 8005d34:	0020      	movs	r0, r4
 8005d36:	f00d fda0 	bl	801387a <memcpy>
}
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	b00b      	add	sp, #44	; 0x2c
 8005d3e:	bc3c      	pop	{r2, r3, r4, r5}
 8005d40:	4690      	mov	r8, r2
 8005d42:	4699      	mov	r9, r3
 8005d44:	46a2      	mov	sl, r4
 8005d46:	46ab      	mov	fp, r5
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	08017200 	.word	0x08017200
 8005d50:	200002b0 	.word	0x200002b0
 8005d54:	08018c18 	.word	0x08018c18
 8005d58:	20000997 	.word	0x20000997
 8005d5c:	2000628c 	.word	0x2000628c
 8005d60:	200009c8 	.word	0x200009c8
 8005d64:	08018c50 	.word	0x08018c50
 8005d68:	20000098 	.word	0x20000098
 8005d6c:	08018748 	.word	0x08018748
 8005d70:	08018cbc 	.word	0x08018cbc
 8005d74:	08017ff4 	.word	0x08017ff4
 8005d78:	08018c5c 	.word	0x08018c5c
 8005d7c:	08018c70 	.word	0x08018c70
 8005d80:	08018c88 	.word	0x08018c88
 8005d84:	08018ca0 	.word	0x08018ca0
 8005d88:	08018ccc 	.word	0x08018ccc
 8005d8c:	08018cd4 	.word	0x08018cd4
 8005d90:	08018ce0 	.word	0x08018ce0

08005d94 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d94:	b510      	push	{r4, lr}
 8005d96:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005d98:	f00a fb16 	bl	80103c8 <HAL_GetDEVID>
	switch(dev){
 8005d9c:	0400      	lsls	r0, r0, #16
 8005d9e:	0c00      	lsrs	r0, r0, #16
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <idcodeCommand+0x78>)
 8005da2:	469c      	mov	ip, r3
 8005da4:	4460      	add	r0, ip
 8005da6:	2808      	cmp	r0, #8
 8005da8:	d82a      	bhi.n	8005e00 <idcodeCommand+0x6c>
 8005daa:	0080      	lsls	r0, r0, #2
 8005dac:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <idcodeCommand+0x7c>)
 8005dae:	581b      	ldr	r3, [r3, r0]
 8005db0:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <idcodeCommand+0x80>)
 8005db4:	4918      	ldr	r1, [pc, #96]	; (8005e18 <idcodeCommand+0x84>)
 8005db6:	0020      	movs	r0, r4
 8005db8:	f00e faf6 	bl	80143a8 <siprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005dbc:	f00a fafe 	bl	80103bc <HAL_GetREVID>
 8005dc0:	0b03      	lsrs	r3, r0, #12
 8005dc2:	0022      	movs	r2, r4
 8005dc4:	4915      	ldr	r1, [pc, #84]	; (8005e1c <idcodeCommand+0x88>)
 8005dc6:	0020      	movs	r0, r4
 8005dc8:	f00e faee 	bl	80143a8 <siprintf>
}
 8005dcc:	2000      	movs	r0, #0
 8005dce:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <idcodeCommand+0x8c>)
 8005dd2:	4911      	ldr	r1, [pc, #68]	; (8005e18 <idcodeCommand+0x84>)
 8005dd4:	0020      	movs	r0, r4
 8005dd6:	f00e fae7 	bl	80143a8 <siprintf>
			break;
 8005dda:	e7ef      	b.n	8005dbc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005ddc:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <idcodeCommand+0x90>)
 8005dde:	490e      	ldr	r1, [pc, #56]	; (8005e18 <idcodeCommand+0x84>)
 8005de0:	0020      	movs	r0, r4
 8005de2:	f00e fae1 	bl	80143a8 <siprintf>
			break;
 8005de6:	e7e9      	b.n	8005dbc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005de8:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <idcodeCommand+0x94>)
 8005dea:	490b      	ldr	r1, [pc, #44]	; (8005e18 <idcodeCommand+0x84>)
 8005dec:	0020      	movs	r0, r4
 8005dee:	f00e fadb 	bl	80143a8 <siprintf>
			break;
 8005df2:	e7e3      	b.n	8005dbc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005df4:	4a0d      	ldr	r2, [pc, #52]	; (8005e2c <idcodeCommand+0x98>)
 8005df6:	4908      	ldr	r1, [pc, #32]	; (8005e18 <idcodeCommand+0x84>)
 8005df8:	0020      	movs	r0, r4
 8005dfa:	f00e fad5 	bl	80143a8 <siprintf>
			break;
 8005dfe:	e7dd      	b.n	8005dbc <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005e00:	4a0b      	ldr	r2, [pc, #44]	; (8005e30 <idcodeCommand+0x9c>)
 8005e02:	4905      	ldr	r1, [pc, #20]	; (8005e18 <idcodeCommand+0x84>)
 8005e04:	0020      	movs	r0, r4
 8005e06:	f00e facf 	bl	80143a8 <siprintf>
			break;
 8005e0a:	e7d7      	b.n	8005dbc <idcodeCommand+0x28>
 8005e0c:	fffffbc0 	.word	0xfffffbc0
 8005e10:	0801801c 	.word	0x0801801c
 8005e14:	08018644 	.word	0x08018644
 8005e18:	08018650 	.word	0x08018650
 8005e1c:	0801869c 	.word	0x0801869c
 8005e20:	08018664 	.word	0x08018664
 8005e24:	08018670 	.word	0x08018670
 8005e28:	0801867c 	.word	0x0801867c
 8005e2c:	08018688 	.word	0x08018688
 8005e30:	08018694 	.word	0x08018694

08005e34 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e34:	b570      	push	{r4, r5, r6, lr}
 8005e36:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005e38:	220e      	movs	r2, #14
 8005e3a:	4911      	ldr	r1, [pc, #68]	; (8005e80 <uuidCommand+0x4c>)
 8005e3c:	f00d fd1d 	bl	801387a <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005e40:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <uuidCommand+0x50>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4d10      	ldr	r5, [pc, #64]	; (8005e88 <uuidCommand+0x54>)
 8005e46:	0022      	movs	r2, r4
 8005e48:	0029      	movs	r1, r5
 8005e4a:	0020      	movs	r0, r4
 8005e4c:	f00e faac 	bl	80143a8 <siprintf>
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <uuidCommand+0x58>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	0022      	movs	r2, r4
 8005e56:	0029      	movs	r1, r5
 8005e58:	0020      	movs	r0, r4
 8005e5a:	f00e faa5 	bl	80143a8 <siprintf>
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <uuidCommand+0x5c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	0022      	movs	r2, r4
 8005e64:	0029      	movs	r1, r5
 8005e66:	0020      	movs	r0, r4
 8005e68:	f00e fa9e 	bl	80143a8 <siprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005e6c:	0020      	movs	r0, r4
 8005e6e:	f7fa f953 	bl	8000118 <strlen>
 8005e72:	1820      	adds	r0, r4, r0
 8005e74:	2203      	movs	r2, #3
 8005e76:	4907      	ldr	r1, [pc, #28]	; (8005e94 <uuidCommand+0x60>)
 8005e78:	f00d fcff 	bl	801387a <memcpy>
}
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	08019bac 	.word	0x08019bac
 8005e84:	1ffff7ac 	.word	0x1ffff7ac
 8005e88:	08019bbc 	.word	0x08019bbc
 8005e8c:	1ffff7b0 	.word	0x1ffff7b0
 8005e90:	1ffff7b4 	.word	0x1ffff7b4
 8005e94:	0801961c 	.word	0x0801961c

08005e98 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e98:	b510      	push	{r4, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	0004      	movs	r4, r0
	GetTimeDate();
 8005e9e:	f007 ff9b 	bl	800ddd8 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	; (8005f10 <timeCommand+0x78>)
 8005ea4:	7b5b      	ldrb	r3, [r3, #13]
 8005ea6:	2b18      	cmp	r3, #24
 8005ea8:	d004      	beq.n	8005eb4 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d00e      	beq.n	8005ecc <timeCommand+0x34>
}
 8005eae:	2000      	movs	r0, #0
 8005eb0:	b004      	add	sp, #16
 8005eb2:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005eb4:	4916      	ldr	r1, [pc, #88]	; (8005f10 <timeCommand+0x78>)
 8005eb6:	7c4b      	ldrb	r3, [r1, #17]
 8005eb8:	7c8a      	ldrb	r2, [r1, #18]
 8005eba:	89c8      	ldrh	r0, [r1, #14]
 8005ebc:	9001      	str	r0, [sp, #4]
 8005ebe:	7c09      	ldrb	r1, [r1, #16]
 8005ec0:	9100      	str	r1, [sp, #0]
 8005ec2:	4914      	ldr	r1, [pc, #80]	; (8005f14 <timeCommand+0x7c>)
 8005ec4:	0020      	movs	r0, r4
 8005ec6:	f00e fa6f 	bl	80143a8 <siprintf>
 8005eca:	e7f0      	b.n	8005eae <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <timeCommand+0x78>)
 8005ece:	7cdb      	ldrb	r3, [r3, #19]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d00f      	beq.n	8005ef4 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d1ea      	bne.n	8005eae <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005ed8:	490d      	ldr	r1, [pc, #52]	; (8005f10 <timeCommand+0x78>)
 8005eda:	7c4b      	ldrb	r3, [r1, #17]
 8005edc:	7c8a      	ldrb	r2, [r1, #18]
 8005ede:	480e      	ldr	r0, [pc, #56]	; (8005f18 <timeCommand+0x80>)
 8005ee0:	9002      	str	r0, [sp, #8]
 8005ee2:	89c8      	ldrh	r0, [r1, #14]
 8005ee4:	9001      	str	r0, [sp, #4]
 8005ee6:	7c09      	ldrb	r1, [r1, #16]
 8005ee8:	9100      	str	r1, [sp, #0]
 8005eea:	490c      	ldr	r1, [pc, #48]	; (8005f1c <timeCommand+0x84>)
 8005eec:	0020      	movs	r0, r4
 8005eee:	f00e fa5b 	bl	80143a8 <siprintf>
 8005ef2:	e7dc      	b.n	8005eae <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005ef4:	4906      	ldr	r1, [pc, #24]	; (8005f10 <timeCommand+0x78>)
 8005ef6:	7c4b      	ldrb	r3, [r1, #17]
 8005ef8:	7c8a      	ldrb	r2, [r1, #18]
 8005efa:	4809      	ldr	r0, [pc, #36]	; (8005f20 <timeCommand+0x88>)
 8005efc:	9002      	str	r0, [sp, #8]
 8005efe:	89c8      	ldrh	r0, [r1, #14]
 8005f00:	9001      	str	r0, [sp, #4]
 8005f02:	7c09      	ldrb	r1, [r1, #16]
 8005f04:	9100      	str	r1, [sp, #0]
 8005f06:	4905      	ldr	r1, [pc, #20]	; (8005f1c <timeCommand+0x84>)
 8005f08:	0020      	movs	r0, r4
 8005f0a:	f00e fa4d 	bl	80143a8 <siprintf>
 8005f0e:	e7ce      	b.n	8005eae <timeCommand+0x16>
 8005f10:	20006270 	.word	0x20006270
 8005f14:	08019af4 	.word	0x08019af4
 8005f18:	08019b4c 	.word	0x08019b4c
 8005f1c:	08019b1c 	.word	0x08019b1c
 8005f20:	08019b48 	.word	0x08019b48

08005f24 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f24:	b510      	push	{r4, lr}
 8005f26:	0004      	movs	r4, r0
	GetTimeDate();
 8005f28:	f007 ff56 	bl	800ddd8 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005f2c:	f7fe fb50 	bl	80045d0 <GetDateString>
 8005f30:	0002      	movs	r2, r0
 8005f32:	4903      	ldr	r1, [pc, #12]	; (8005f40 <dateCommand+0x1c>)
 8005f34:	0020      	movs	r0, r4
 8005f36:	f00e fa37 	bl	80143a8 <siprintf>
}
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	0801827c 	.word	0x0801827c

08005f44 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f46:	b085      	sub	sp, #20
 8005f48:	9001      	str	r0, [sp, #4]
 8005f4a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9303      	str	r3, [sp, #12]
 8005f50:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f52:	aa03      	add	r2, sp, #12
 8005f54:	2101      	movs	r1, #1
 8005f56:	0030      	movs	r0, r6
 8005f58:	f008 fbe6 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8005f5c:	0004      	movs	r4, r0
 8005f5e:	4b71      	ldr	r3, [pc, #452]	; (8006124 <getCommand+0x1e0>)
 8005f60:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005f62:	2204      	movs	r2, #4
 8005f64:	4970      	ldr	r1, [pc, #448]	; (8006128 <getCommand+0x1e4>)
 8005f66:	f00e fa63 	bl	8014430 <strncmp>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d000      	beq.n	8005f70 <getCommand+0x2c>
 8005f6e:	e090      	b.n	8006092 <getCommand+0x14e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005f70:	1d27      	adds	r7, r4, #4
 8005f72:	9b03      	ldr	r3, [sp, #12]
 8005f74:	1f1e      	subs	r6, r3, #4
 8005f76:	0032      	movs	r2, r6
 8005f78:	496c      	ldr	r1, [pc, #432]	; (800612c <getCommand+0x1e8>)
 8005f7a:	0038      	movs	r0, r7
 8005f7c:	f00e fa58 	bl	8014430 <strncmp>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d11f      	bne.n	8005fc4 <getCommand+0x80>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005f84:	4b6a      	ldr	r3, [pc, #424]	; (8006130 <getCommand+0x1ec>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b60      	cmp	r3, #96	; 0x60
 8005f8a:	d009      	beq.n	8005fa0 <getCommand+0x5c>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d00d      	beq.n	8005fac <getCommand+0x68>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d011      	beq.n	8005fb8 <getCommand+0x74>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005f94:	0022      	movs	r2, r4
 8005f96:	4967      	ldr	r1, [pc, #412]	; (8006134 <getCommand+0x1f0>)
 8005f98:	9801      	ldr	r0, [sp, #4]
 8005f9a:	f00e fa05 	bl	80143a8 <siprintf>
 8005f9e:	e084      	b.n	80060aa <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005fa0:	4a65      	ldr	r2, [pc, #404]	; (8006138 <getCommand+0x1f4>)
 8005fa2:	4966      	ldr	r1, [pc, #408]	; (800613c <getCommand+0x1f8>)
 8005fa4:	9801      	ldr	r0, [sp, #4]
 8005fa6:	f00e f9ff 	bl	80143a8 <siprintf>
 8005faa:	e07e      	b.n	80060aa <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005fac:	4a64      	ldr	r2, [pc, #400]	; (8006140 <getCommand+0x1fc>)
 8005fae:	4963      	ldr	r1, [pc, #396]	; (800613c <getCommand+0x1f8>)
 8005fb0:	9801      	ldr	r0, [sp, #4]
 8005fb2:	f00e f9f9 	bl	80143a8 <siprintf>
 8005fb6:	e078      	b.n	80060aa <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005fb8:	4a62      	ldr	r2, [pc, #392]	; (8006144 <getCommand+0x200>)
 8005fba:	4960      	ldr	r1, [pc, #384]	; (800613c <getCommand+0x1f8>)
 8005fbc:	9801      	ldr	r0, [sp, #4]
 8005fbe:	f00e f9f3 	bl	80143a8 <siprintf>
 8005fc2:	e072      	b.n	80060aa <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005fc4:	0032      	movs	r2, r6
 8005fc6:	4960      	ldr	r1, [pc, #384]	; (8006148 <getCommand+0x204>)
 8005fc8:	0038      	movs	r0, r7
 8005fca:	f00e fa31 	bl	8014430 <strncmp>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d119      	bne.n	8006006 <getCommand+0xc2>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005fd2:	4b57      	ldr	r3, [pc, #348]	; (8006130 <getCommand+0x1ec>)
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d009      	beq.n	8005fee <getCommand+0xaa>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d00d      	beq.n	8005ffa <getCommand+0xb6>
			else if(BOSMessaging.trace == TRACE_NONE)
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1d8      	bne.n	8005f94 <getCommand+0x50>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005fe2:	4a58      	ldr	r2, [pc, #352]	; (8006144 <getCommand+0x200>)
 8005fe4:	4955      	ldr	r1, [pc, #340]	; (800613c <getCommand+0x1f8>)
 8005fe6:	9801      	ldr	r0, [sp, #4]
 8005fe8:	f00e f9de 	bl	80143a8 <siprintf>
 8005fec:	e05d      	b.n	80060aa <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005fee:	4a52      	ldr	r2, [pc, #328]	; (8006138 <getCommand+0x1f4>)
 8005ff0:	4952      	ldr	r1, [pc, #328]	; (800613c <getCommand+0x1f8>)
 8005ff2:	9801      	ldr	r0, [sp, #4]
 8005ff4:	f00e f9d8 	bl	80143a8 <siprintf>
 8005ff8:	e057      	b.n	80060aa <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005ffa:	4a51      	ldr	r2, [pc, #324]	; (8006140 <getCommand+0x1fc>)
 8005ffc:	494f      	ldr	r1, [pc, #316]	; (800613c <getCommand+0x1f8>)
 8005ffe:	9801      	ldr	r0, [sp, #4]
 8006000:	f00e f9d2 	bl	80143a8 <siprintf>
 8006004:	e051      	b.n	80060aa <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006006:	0032      	movs	r2, r6
 8006008:	4950      	ldr	r1, [pc, #320]	; (800614c <getCommand+0x208>)
 800600a:	0038      	movs	r0, r7
 800600c:	f00e fa10 	bl	8014430 <strncmp>
 8006010:	2800      	cmp	r0, #0
 8006012:	d022      	beq.n	800605a <getCommand+0x116>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006014:	0032      	movs	r2, r6
 8006016:	494e      	ldr	r1, [pc, #312]	; (8006150 <getCommand+0x20c>)
 8006018:	0038      	movs	r0, r7
 800601a:	f00e fa09 	bl	8014430 <strncmp>
 800601e:	2800      	cmp	r0, #0
 8006020:	d022      	beq.n	8006068 <getCommand+0x124>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006022:	0032      	movs	r2, r6
 8006024:	494b      	ldr	r1, [pc, #300]	; (8006154 <getCommand+0x210>)
 8006026:	0038      	movs	r0, r7
 8006028:	f00e fa02 	bl	8014430 <strncmp>
 800602c:	2800      	cmp	r0, #0
 800602e:	d022      	beq.n	8006076 <getCommand+0x132>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006030:	0032      	movs	r2, r6
 8006032:	4949      	ldr	r1, [pc, #292]	; (8006158 <getCommand+0x214>)
 8006034:	0038      	movs	r0, r7
 8006036:	f00e f9fb 	bl	8014430 <strncmp>
 800603a:	2800      	cmp	r0, #0
 800603c:	d022      	beq.n	8006084 <getCommand+0x140>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800603e:	0032      	movs	r2, r6
 8006040:	4946      	ldr	r1, [pc, #280]	; (800615c <getCommand+0x218>)
 8006042:	0038      	movs	r0, r7
 8006044:	f00e f9f4 	bl	8014430 <strncmp>
 8006048:	2800      	cmp	r0, #0
 800604a:	d129      	bne.n	80060a0 <getCommand+0x15c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 800604c:	4b44      	ldr	r3, [pc, #272]	; (8006160 <getCommand+0x21c>)
 800604e:	795a      	ldrb	r2, [r3, #5]
 8006050:	4944      	ldr	r1, [pc, #272]	; (8006164 <getCommand+0x220>)
 8006052:	9801      	ldr	r0, [sp, #4]
 8006054:	f00e f9a8 	bl	80143a8 <siprintf>
 8006058:	e027      	b.n	80060aa <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 800605a:	4b41      	ldr	r3, [pc, #260]	; (8006160 <getCommand+0x21c>)
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	4941      	ldr	r1, [pc, #260]	; (8006164 <getCommand+0x220>)
 8006060:	9801      	ldr	r0, [sp, #4]
 8006062:	f00e f9a1 	bl	80143a8 <siprintf>
 8006066:	e020      	b.n	80060aa <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006068:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <getCommand+0x21c>)
 800606a:	881a      	ldrh	r2, [r3, #0]
 800606c:	493d      	ldr	r1, [pc, #244]	; (8006164 <getCommand+0x220>)
 800606e:	9801      	ldr	r0, [sp, #4]
 8006070:	f00e f99a 	bl	80143a8 <siprintf>
 8006074:	e019      	b.n	80060aa <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8006076:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <getCommand+0x21c>)
 8006078:	885a      	ldrh	r2, [r3, #2]
 800607a:	493a      	ldr	r1, [pc, #232]	; (8006164 <getCommand+0x220>)
 800607c:	9801      	ldr	r0, [sp, #4]
 800607e:	f00e f993 	bl	80143a8 <siprintf>
 8006082:	e012      	b.n	80060aa <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <getCommand+0x21c>)
 8006086:	791a      	ldrb	r2, [r3, #4]
 8006088:	4936      	ldr	r1, [pc, #216]	; (8006164 <getCommand+0x220>)
 800608a:	9801      	ldr	r0, [sp, #4]
 800608c:	f00e f98c 	bl	80143a8 <siprintf>
 8006090:	e00b      	b.n	80060aa <getCommand+0x166>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8006092:	2205      	movs	r2, #5
 8006094:	4934      	ldr	r1, [pc, #208]	; (8006168 <getCommand+0x224>)
 8006096:	0020      	movs	r0, r4
 8006098:	f00e f9ca 	bl	8014430 <strncmp>
 800609c:	2800      	cmp	r0, #0
 800609e:	d007      	beq.n	80060b0 <getCommand+0x16c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 80060a0:	2213      	movs	r2, #19
 80060a2:	4932      	ldr	r1, [pc, #200]	; (800616c <getCommand+0x228>)
 80060a4:	9801      	ldr	r0, [sp, #4]
 80060a6:	f00d fbe8 	bl	801387a <memcpy>
}
 80060aa:	2000      	movs	r0, #0
 80060ac:	b005      	add	sp, #20
 80060ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80060b0:	aa02      	add	r2, sp, #8
 80060b2:	2102      	movs	r1, #2
 80060b4:	0030      	movs	r0, r6
 80060b6:	f008 fb37 	bl	800e728 <FreeRTOS_CLIGetParameter>
 80060ba:	0006      	movs	r6, r0
 80060bc:	4f2c      	ldr	r7, [pc, #176]	; (8006170 <getCommand+0x22c>)
		for(i =0; i < MaxNumOfGroups; i++){
 80060be:	2400      	movs	r4, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 80060c0:	0039      	movs	r1, r7
 80060c2:	0030      	movs	r0, r6
 80060c4:	f7fa f81e 	bl	8000104 <strcmp>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d01b      	beq.n	8006104 <getCommand+0x1c0>
		for(i =0; i < MaxNumOfGroups; i++){
 80060cc:	3401      	adds	r4, #1
 80060ce:	b2e4      	uxtb	r4, r4
 80060d0:	370a      	adds	r7, #10
 80060d2:	2c0a      	cmp	r4, #10
 80060d4:	d1f4      	bne.n	80060c0 <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 80060d6:	0032      	movs	r2, r6
 80060d8:	4926      	ldr	r1, [pc, #152]	; (8006174 <getCommand+0x230>)
 80060da:	9801      	ldr	r0, [sp, #4]
 80060dc:	f00e f964 	bl	80143a8 <siprintf>
			return pdFALSE;
 80060e0:	e7e3      	b.n	80060aa <getCommand+0x166>
			for(j =1; j <= N; j++)						// N modules
 80060e2:	3401      	adds	r4, #1
 80060e4:	b2e4      	uxtb	r4, r4
 80060e6:	783b      	ldrb	r3, [r7, #0]
 80060e8:	42a3      	cmp	r3, r4
 80060ea:	d3de      	bcc.n	80060aa <getCommand+0x166>
				if(InGroup(j,i)){
 80060ec:	1e63      	subs	r3, r4, #1
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	5b5b      	ldrh	r3, [r3, r5]
 80060f2:	421e      	tst	r6, r3
 80060f4:	d0f5      	beq.n	80060e2 <getCommand+0x19e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 80060f6:	0023      	movs	r3, r4
 80060f8:	9801      	ldr	r0, [sp, #4]
 80060fa:	0002      	movs	r2, r0
 80060fc:	491e      	ldr	r1, [pc, #120]	; (8006178 <getCommand+0x234>)
 80060fe:	f00e f953 	bl	80143a8 <siprintf>
 8006102:	e7ee      	b.n	80060e2 <getCommand+0x19e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006104:	0032      	movs	r2, r6
 8006106:	491d      	ldr	r1, [pc, #116]	; (800617c <getCommand+0x238>)
 8006108:	9801      	ldr	r0, [sp, #4]
 800610a:	f00e f94d 	bl	80143a8 <siprintf>
			for(j =1; j <= N; j++)						// N modules
 800610e:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <getCommand+0x23c>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c9      	beq.n	80060aa <getCommand+0x166>
 8006116:	2601      	movs	r6, #1
 8006118:	40a6      	lsls	r6, r4
 800611a:	2401      	movs	r4, #1
				if(InGroup(j,i)){
 800611c:	4d19      	ldr	r5, [pc, #100]	; (8006184 <getCommand+0x240>)
			for(j =1; j <= N; j++)						// N modules
 800611e:	4f18      	ldr	r7, [pc, #96]	; (8006180 <getCommand+0x23c>)
 8006120:	e7e4      	b.n	80060ec <getCommand+0x1a8>
 8006122:	46c0      	nop			; (mov r8, r8)
 8006124:	20000a0c 	.word	0x20000a0c
 8006128:	080183e8 	.word	0x080183e8
 800612c:	080183f0 	.word	0x080183f0
 8006130:	200061f0 	.word	0x200061f0
 8006134:	080184b4 	.word	0x080184b4
 8006138:	0801755c 	.word	0x0801755c
 800613c:	080173b4 	.word	0x080173b4
 8006140:	080183fc 	.word	0x080183fc
 8006144:	08018400 	.word	0x08018400
 8006148:	08018408 	.word	0x08018408
 800614c:	08018410 	.word	0x08018410
 8006150:	0801841c 	.word	0x0801841c
 8006154:	08018428 	.word	0x08018428
 8006158:	08018438 	.word	0x08018438
 800615c:	0801844c 	.word	0x0801844c
 8006160:	20006270 	.word	0x20006270
 8006164:	08017ca0 	.word	0x08017ca0
 8006168:	08018460 	.word	0x08018460
 800616c:	08018470 	.word	0x08018470
 8006170:	200005f0 	.word	0x200005f0
 8006174:	08018484 	.word	0x08018484
 8006178:	08018468 	.word	0x08018468
 800617c:	080184a0 	.word	0x080184a0
 8006180:	20000030 	.word	0x20000030
 8006184:	20000654 	.word	0x20000654

08006188 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	0005      	movs	r5, r0
 800618e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006190:	2300      	movs	r3, #0
 8006192:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006194:	aa01      	add	r2, sp, #4
 8006196:	2101      	movs	r1, #1
 8006198:	f008 fac6 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800619c:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 800619e:	9e01      	ldr	r6, [sp, #4]
 80061a0:	0032      	movs	r2, r6
 80061a2:	491e      	ldr	r1, [pc, #120]	; (800621c <defaultCommand+0x94>)
 80061a4:	f00e f944 	bl	8014430 <strncmp>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d020      	beq.n	80061ee <defaultCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80061ac:	0032      	movs	r2, r6
 80061ae:	491c      	ldr	r1, [pc, #112]	; (8006220 <defaultCommand+0x98>)
 80061b0:	0020      	movs	r0, r4
 80061b2:	f00e f93d 	bl	8014430 <strncmp>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d12a      	bne.n	8006210 <defaultCommand+0x88>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80061ba:	2200      	movs	r2, #0
 80061bc:	2116      	movs	r1, #22
 80061be:	20ff      	movs	r0, #255	; 0xff
 80061c0:	f001 fffa 	bl	80081b8 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <defaultCommand+0x9c>)
 80061c6:	2202      	movs	r2, #2
 80061c8:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80061ca:	2064      	movs	r0, #100	; 0x64
 80061cc:	f008 f997 	bl	800e4fe <osDelay>
		ClearEEportsDir();
 80061d0:	f7fd fac6 	bl	8003760 <ClearEEportsDir>
		ClearROtopology();
 80061d4:	f004 f8aa 	bl	800a32c <ClearROtopology>
		osDelay(100);
 80061d8:	2064      	movs	r0, #100	; 0x64
 80061da:	f008 f990 	bl	800e4fe <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	4911      	ldr	r1, [pc, #68]	; (8006228 <defaultCommand+0xa0>)
 80061e2:	0028      	movs	r0, r5
 80061e4:	f00d fb49 	bl	801387a <memcpy>
}
 80061e8:	2000      	movs	r0, #0
 80061ea:	b002      	add	sp, #8
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80061ee:	490f      	ldr	r1, [pc, #60]	; (800622c <defaultCommand+0xa4>)
 80061f0:	4b0f      	ldr	r3, [pc, #60]	; (8006230 <defaultCommand+0xa8>)
 80061f2:	000a      	movs	r2, r1
 80061f4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80061f6:	c213      	stmia	r2!, {r0, r1, r4}
 80061f8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80061fa:	c213      	stmia	r2!, {r0, r1, r4}
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006200:	f7fd fa6a 	bl	80036d8 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006204:	2227      	movs	r2, #39	; 0x27
 8006206:	490b      	ldr	r1, [pc, #44]	; (8006234 <defaultCommand+0xac>)
 8006208:	0028      	movs	r0, r5
 800620a:	f00d fb36 	bl	801387a <memcpy>
 800620e:	e7eb      	b.n	80061e8 <defaultCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006210:	220f      	movs	r2, #15
 8006212:	4909      	ldr	r1, [pc, #36]	; (8006238 <defaultCommand+0xb0>)
 8006214:	0028      	movs	r0, r5
 8006216:	f00d fb30 	bl	801387a <memcpy>
 800621a:	e7e5      	b.n	80061e8 <defaultCommand+0x60>
 800621c:	080182a4 	.word	0x080182a4
 8006220:	080182d4 	.word	0x080182d4
 8006224:	20000688 	.word	0x20000688
 8006228:	080182ec 	.word	0x080182ec
 800622c:	20006270 	.word	0x20006270
 8006230:	20000014 	.word	0x20000014
 8006234:	080182ac 	.word	0x080182ac
 8006238:	080182dc 	.word	0x080182dc

0800623c <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800623c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623e:	46ce      	mov	lr, r9
 8006240:	4647      	mov	r7, r8
 8006242:	b580      	push	{r7, lr}
 8006244:	b08f      	sub	sp, #60	; 0x3c
 8006246:	9007      	str	r0, [sp, #28]
 8006248:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 800624a:	2300      	movs	r3, #0
 800624c:	930d      	str	r3, [sp, #52]	; 0x34
 800624e:	930c      	str	r3, [sp, #48]	; 0x30
 8006250:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8006252:	930a      	str	r3, [sp, #40]	; 0x28
 8006254:	9309      	str	r3, [sp, #36]	; 0x24
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006256:	aa0d      	add	r2, sp, #52	; 0x34
 8006258:	2101      	movs	r1, #1
 800625a:	0028      	movs	r0, r5
 800625c:	f008 fa64 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006260:	0004      	movs	r4, r0
 8006262:	4bda      	ldr	r3, [pc, #872]	; (80065cc <setCommand+0x390>)
 8006264:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8006266:	2204      	movs	r2, #4
 8006268:	49d9      	ldr	r1, [pc, #868]	; (80065d0 <setCommand+0x394>)
 800626a:	f00e f8e1 	bl	8014430 <strncmp>
 800626e:	2800      	cmp	r0, #0
 8006270:	d015      	beq.n	800629e <setCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8006272:	2204      	movs	r2, #4
 8006274:	49d7      	ldr	r1, [pc, #860]	; (80065d4 <setCommand+0x398>)
 8006276:	0020      	movs	r0, r4
 8006278:	f00e f8da 	bl	8014430 <strncmp>
 800627c:	2800      	cmp	r0, #0
 800627e:	d100      	bne.n	8006282 <setCommand+0x46>
 8006280:	e167      	b.n	8006552 <setCommand+0x316>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006282:	2204      	movs	r2, #4
 8006284:	49d4      	ldr	r1, [pc, #848]	; (80065d8 <setCommand+0x39c>)
 8006286:	0020      	movs	r0, r4
 8006288:	f00e f8d2 	bl	8014430 <strncmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	d100      	bne.n	8006292 <setCommand+0x56>
 8006290:	e1f9      	b.n	8006686 <setCommand+0x44a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006292:	2213      	movs	r2, #19
 8006294:	49d1      	ldr	r1, [pc, #836]	; (80065dc <setCommand+0x3a0>)
 8006296:	9807      	ldr	r0, [sp, #28]
 8006298:	f00d faef 	bl	801387a <memcpy>
 800629c:	e266      	b.n	800676c <setCommand+0x530>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800629e:	aa0c      	add	r2, sp, #48	; 0x30
 80062a0:	2102      	movs	r1, #2
 80062a2:	0028      	movs	r0, r5
 80062a4:	f008 fa40 	bl	800e728 <FreeRTOS_CLIGetParameter>
 80062a8:	0007      	movs	r7, r0
 80062aa:	4bcd      	ldr	r3, [pc, #820]	; (80065e0 <setCommand+0x3a4>)
 80062ac:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80062ae:	4bc7      	ldr	r3, [pc, #796]	; (80065cc <setCommand+0x390>)
 80062b0:	681c      	ldr	r4, [r3, #0]
 80062b2:	3404      	adds	r4, #4
 80062b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062b6:	1f1d      	subs	r5, r3, #4
 80062b8:	002a      	movs	r2, r5
 80062ba:	49ca      	ldr	r1, [pc, #808]	; (80065e4 <setCommand+0x3a8>)
 80062bc:	0020      	movs	r0, r4
 80062be:	f00e f8b7 	bl	8014430 <strncmp>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d15b      	bne.n	800637e <setCommand+0x142>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80062c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80062c8:	0022      	movs	r2, r4
 80062ca:	49c7      	ldr	r1, [pc, #796]	; (80065e8 <setCommand+0x3ac>)
 80062cc:	0038      	movs	r0, r7
 80062ce:	f00e f8af 	bl	8014430 <strncmp>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d01a      	beq.n	800630c <setCommand+0xd0>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80062d6:	0022      	movs	r2, r4
 80062d8:	49c4      	ldr	r1, [pc, #784]	; (80065ec <setCommand+0x3b0>)
 80062da:	0038      	movs	r0, r7
 80062dc:	f00e f8a8 	bl	8014430 <strncmp>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d02a      	beq.n	800633a <setCommand+0xfe>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80062e4:	0022      	movs	r2, r4
 80062e6:	49c2      	ldr	r1, [pc, #776]	; (80065f0 <setCommand+0x3b4>)
 80062e8:	0038      	movs	r0, r7
 80062ea:	f00e f8a1 	bl	8014430 <strncmp>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d02f      	beq.n	8006352 <setCommand+0x116>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062f2:	0022      	movs	r2, r4
 80062f4:	49bf      	ldr	r1, [pc, #764]	; (80065f4 <setCommand+0x3b8>)
 80062f6:	0038      	movs	r0, r7
 80062f8:	f00e f89a 	bl	8014430 <strncmp>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d034      	beq.n	800636a <setCommand+0x12e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006300:	220f      	movs	r2, #15
 8006302:	49bd      	ldr	r1, [pc, #756]	; (80065f8 <setCommand+0x3bc>)
 8006304:	9807      	ldr	r0, [sp, #28]
 8006306:	f00d fab8 	bl	801387a <memcpy>
 800630a:	e22f      	b.n	800676c <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 800630c:	4bbb      	ldr	r3, [pc, #748]	; (80065fc <setCommand+0x3c0>)
 800630e:	2260      	movs	r2, #96	; 0x60
 8006310:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006312:	7859      	ldrb	r1, [r3, #1]
 8006314:	0209      	lsls	r1, r1, #8
 8006316:	2360      	movs	r3, #96	; 0x60
 8006318:	4319      	orrs	r1, r3
 800631a:	308a      	adds	r0, #138	; 0x8a
 800631c:	0040      	lsls	r0, r0, #1
 800631e:	f005 ff8f 	bl	800c240 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 8006322:	4baa      	ldr	r3, [pc, #680]	; (80065cc <setCommand+0x390>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	990d      	ldr	r1, [sp, #52]	; 0x34
 800632a:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 800632c:	4bac      	ldr	r3, [pc, #688]	; (80065e0 <setCommand+0x3a4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	49b3      	ldr	r1, [pc, #716]	; (8006600 <setCommand+0x3c4>)
 8006332:	9807      	ldr	r0, [sp, #28]
 8006334:	f00e f838 	bl	80143a8 <siprintf>
	return pdFALSE;
 8006338:	e218      	b.n	800676c <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 800633a:	4bb0      	ldr	r3, [pc, #704]	; (80065fc <setCommand+0x3c0>)
 800633c:	2220      	movs	r2, #32
 800633e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006340:	7859      	ldrb	r1, [r3, #1]
 8006342:	0209      	lsls	r1, r1, #8
 8006344:	2320      	movs	r3, #32
 8006346:	4319      	orrs	r1, r3
 8006348:	308a      	adds	r0, #138	; 0x8a
 800634a:	0040      	lsls	r0, r0, #1
 800634c:	f005 ff78 	bl	800c240 <EE_WriteVariable>
 8006350:	e7e7      	b.n	8006322 <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 8006352:	4baa      	ldr	r3, [pc, #680]	; (80065fc <setCommand+0x3c0>)
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006358:	7859      	ldrb	r1, [r3, #1]
 800635a:	0209      	lsls	r1, r1, #8
 800635c:	2340      	movs	r3, #64	; 0x40
 800635e:	4319      	orrs	r1, r3
 8006360:	308a      	adds	r0, #138	; 0x8a
 8006362:	0040      	lsls	r0, r0, #1
 8006364:	f005 ff6c 	bl	800c240 <EE_WriteVariable>
 8006368:	e7db      	b.n	8006322 <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 800636a:	4ba4      	ldr	r3, [pc, #656]	; (80065fc <setCommand+0x3c0>)
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006370:	7859      	ldrb	r1, [r3, #1]
 8006372:	0209      	lsls	r1, r1, #8
 8006374:	308a      	adds	r0, #138	; 0x8a
 8006376:	0040      	lsls	r0, r0, #1
 8006378:	f005 ff62 	bl	800c240 <EE_WriteVariable>
 800637c:	e7d1      	b.n	8006322 <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800637e:	002a      	movs	r2, r5
 8006380:	49a0      	ldr	r1, [pc, #640]	; (8006604 <setCommand+0x3c8>)
 8006382:	0020      	movs	r0, r4
 8006384:	f00e f854 	bl	8014430 <strncmp>
 8006388:	2800      	cmp	r0, #0
 800638a:	d149      	bne.n	8006420 <setCommand+0x1e4>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800638c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800638e:	0022      	movs	r2, r4
 8006390:	4995      	ldr	r1, [pc, #596]	; (80065e8 <setCommand+0x3ac>)
 8006392:	0038      	movs	r0, r7
 8006394:	f00e f84c 	bl	8014430 <strncmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	d01d      	beq.n	80063d8 <setCommand+0x19c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800639c:	0022      	movs	r2, r4
 800639e:	4993      	ldr	r1, [pc, #588]	; (80065ec <setCommand+0x3b0>)
 80063a0:	0038      	movs	r0, r7
 80063a2:	f00e f845 	bl	8014430 <strncmp>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d022      	beq.n	80063f0 <setCommand+0x1b4>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80063aa:	0022      	movs	r2, r4
 80063ac:	498d      	ldr	r1, [pc, #564]	; (80065e4 <setCommand+0x3a8>)
 80063ae:	0038      	movs	r0, r7
 80063b0:	f00e f83e 	bl	8014430 <strncmp>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d027      	beq.n	8006408 <setCommand+0x1cc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80063b8:	0022      	movs	r2, r4
 80063ba:	498e      	ldr	r1, [pc, #568]	; (80065f4 <setCommand+0x3b8>)
 80063bc:	0038      	movs	r0, r7
 80063be:	f00e f837 	bl	8014430 <strncmp>
 80063c2:	2800      	cmp	r0, #0
 80063c4:	d19c      	bne.n	8006300 <setCommand+0xc4>
				BOSMessaging.trace =TRACE_NONE;
 80063c6:	4b8d      	ldr	r3, [pc, #564]	; (80065fc <setCommand+0x3c0>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80063cc:	7819      	ldrb	r1, [r3, #0]
 80063ce:	308a      	adds	r0, #138	; 0x8a
 80063d0:	0040      	lsls	r0, r0, #1
 80063d2:	f005 ff35 	bl	800c240 <EE_WriteVariable>
 80063d6:	e7a4      	b.n	8006322 <setCommand+0xe6>
				BOSMessaging.trace =TRACE_BOTH;
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <setCommand+0x3c0>)
 80063da:	2203      	movs	r2, #3
 80063dc:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	21c0      	movs	r1, #192	; 0xc0
 80063e2:	0089      	lsls	r1, r1, #2
 80063e4:	4319      	orrs	r1, r3
 80063e6:	308a      	adds	r0, #138	; 0x8a
 80063e8:	0040      	lsls	r0, r0, #1
 80063ea:	f005 ff29 	bl	800c240 <EE_WriteVariable>
 80063ee:	e798      	b.n	8006322 <setCommand+0xe6>
				BOSMessaging.trace =TRACE_MESSAGE;
 80063f0:	4b82      	ldr	r3, [pc, #520]	; (80065fc <setCommand+0x3c0>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	2180      	movs	r1, #128	; 0x80
 80063fa:	0049      	lsls	r1, r1, #1
 80063fc:	4319      	orrs	r1, r3
 80063fe:	308a      	adds	r0, #138	; 0x8a
 8006400:	0040      	lsls	r0, r0, #1
 8006402:	f005 ff1d 	bl	800c240 <EE_WriteVariable>
 8006406:	e78c      	b.n	8006322 <setCommand+0xe6>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006408:	4b7c      	ldr	r3, [pc, #496]	; (80065fc <setCommand+0x3c0>)
 800640a:	2202      	movs	r2, #2
 800640c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2180      	movs	r1, #128	; 0x80
 8006412:	0089      	lsls	r1, r1, #2
 8006414:	4319      	orrs	r1, r3
 8006416:	308a      	adds	r0, #138	; 0x8a
 8006418:	0040      	lsls	r0, r0, #1
 800641a:	f005 ff11 	bl	800c240 <EE_WriteVariable>
 800641e:	e780      	b.n	8006322 <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006420:	002a      	movs	r2, r5
 8006422:	4979      	ldr	r1, [pc, #484]	; (8006608 <setCommand+0x3cc>)
 8006424:	0020      	movs	r0, r4
 8006426:	f00e f803 	bl	8014430 <strncmp>
 800642a:	2800      	cmp	r0, #0
 800642c:	d02f      	beq.n	800648e <setCommand+0x252>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 800642e:	002a      	movs	r2, r5
 8006430:	4976      	ldr	r1, [pc, #472]	; (800660c <setCommand+0x3d0>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00d fffc 	bl	8014430 <strncmp>
 8006438:	2800      	cmp	r0, #0
 800643a:	d05b      	beq.n	80064f4 <setCommand+0x2b8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800643c:	002a      	movs	r2, r5
 800643e:	4974      	ldr	r1, [pc, #464]	; (8006610 <setCommand+0x3d4>)
 8006440:	0020      	movs	r0, r4
 8006442:	f00d fff5 	bl	8014430 <strncmp>
 8006446:	2800      	cmp	r0, #0
 8006448:	d062      	beq.n	8006510 <setCommand+0x2d4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 800644a:	002a      	movs	r2, r5
 800644c:	4971      	ldr	r1, [pc, #452]	; (8006614 <setCommand+0x3d8>)
 800644e:	0020      	movs	r0, r4
 8006450:	f00d ffee 	bl	8014430 <strncmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	d069      	beq.n	800652c <setCommand+0x2f0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006458:	002a      	movs	r2, r5
 800645a:	496f      	ldr	r1, [pc, #444]	; (8006618 <setCommand+0x3dc>)
 800645c:	0020      	movs	r0, r4
 800645e:	f00d ffe7 	bl	8014430 <strncmp>
 8006462:	2800      	cmp	r0, #0
 8006464:	d000      	beq.n	8006468 <setCommand+0x22c>
 8006466:	e714      	b.n	8006292 <setCommand+0x56>
			temp16 =atoi((const char* )pcParameterString2);
 8006468:	0038      	movs	r0, r7
 800646a:	f00d f98e 	bl	801378a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800646e:	1e43      	subs	r3, r0, #1
 8006470:	b29b      	uxth	r3, r3
 8006472:	2bfe      	cmp	r3, #254	; 0xfe
 8006474:	d900      	bls.n	8006478 <setCommand+0x23c>
 8006476:	e743      	b.n	8006300 <setCommand+0xc4>
				BOS.buttons.maxInterClickTime =temp16;
 8006478:	4b68      	ldr	r3, [pc, #416]	; (800661c <setCommand+0x3e0>)
 800647a:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800647c:	0200      	lsls	r0, r0, #8
 800647e:	7919      	ldrb	r1, [r3, #4]
 8006480:	4301      	orrs	r1, r0
 8006482:	b289      	uxth	r1, r1
 8006484:	2018      	movs	r0, #24
 8006486:	30ff      	adds	r0, #255	; 0xff
 8006488:	f005 feda 	bl	800c240 <EE_WriteVariable>
 800648c:	e749      	b.n	8006322 <setCommand+0xe6>
			temp2 =atoi((const char* )pcParameterString2);
 800648e:	0038      	movs	r0, r7
 8006490:	f00d f97b 	bl	801378a <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 8006494:	23e1      	movs	r3, #225	; 0xe1
 8006496:	031b      	lsls	r3, r3, #12
 8006498:	4298      	cmp	r0, r3
 800649a:	d900      	bls.n	800649e <setCommand+0x262>
 800649c:	e730      	b.n	8006300 <setCommand+0xc4>
				BOS.clibaudrate =temp2;
 800649e:	4c5f      	ldr	r4, [pc, #380]	; (800661c <setCommand+0x3e0>)
 80064a0:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80064a2:	b281      	uxth	r1, r0
 80064a4:	208c      	movs	r0, #140	; 0x8c
 80064a6:	0040      	lsls	r0, r0, #1
 80064a8:	f005 feca 	bl	800c240 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80064ac:	8961      	ldrh	r1, [r4, #10]
 80064ae:	201a      	movs	r0, #26
 80064b0:	30ff      	adds	r0, #255	; 0xff
 80064b2:	f005 fec5 	bl	800c240 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80064b6:	4b45      	ldr	r3, [pc, #276]	; (80065cc <setCommand+0x390>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	2300      	movs	r3, #0
 80064bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064be:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80064c0:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <setCommand+0x3a4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	494e      	ldr	r1, [pc, #312]	; (8006600 <setCommand+0x3c4>)
 80064c6:	9c07      	ldr	r4, [sp, #28]
 80064c8:	0020      	movs	r0, r4
 80064ca:	f00d ff6d 	bl	80143a8 <siprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80064ce:	0020      	movs	r0, r4
 80064d0:	f7f9 fe22 	bl	8000118 <strlen>
 80064d4:	46a4      	mov	ip, r4
 80064d6:	4460      	add	r0, ip
 80064d8:	2230      	movs	r2, #48	; 0x30
 80064da:	4951      	ldr	r1, [pc, #324]	; (8006620 <setCommand+0x3e4>)
 80064dc:	f00d f9cd 	bl	801387a <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80064e0:	0020      	movs	r0, r4
 80064e2:	f7f9 fe19 	bl	8000118 <strlen>
 80064e6:	46a4      	mov	ip, r4
 80064e8:	4460      	add	r0, ip
 80064ea:	22b2      	movs	r2, #178	; 0xb2
 80064ec:	494d      	ldr	r1, [pc, #308]	; (8006624 <setCommand+0x3e8>)
 80064ee:	f00d f9c4 	bl	801387a <memcpy>
 80064f2:	e13b      	b.n	800676c <setCommand+0x530>
			temp16 =atoi((const char* )pcParameterString2);
 80064f4:	0038      	movs	r0, r7
 80064f6:	f00d f948 	bl	801378a <atoi>
 80064fa:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d100      	bne.n	8006502 <setCommand+0x2c6>
 8006500:	e6fe      	b.n	8006300 <setCommand+0xc4>
				BOS.buttons.debounce =temp16;
 8006502:	4b46      	ldr	r3, [pc, #280]	; (800661c <setCommand+0x3e0>)
 8006504:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006506:	2016      	movs	r0, #22
 8006508:	30ff      	adds	r0, #255	; 0xff
 800650a:	f005 fe99 	bl	800c240 <EE_WriteVariable>
 800650e:	e708      	b.n	8006322 <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 8006510:	0038      	movs	r0, r7
 8006512:	f00d f93a 	bl	801378a <atoi>
 8006516:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006518:	2900      	cmp	r1, #0
 800651a:	d100      	bne.n	800651e <setCommand+0x2e2>
 800651c:	e6f0      	b.n	8006300 <setCommand+0xc4>
				BOS.buttons.singleClickTime =temp16;
 800651e:	4b3f      	ldr	r3, [pc, #252]	; (800661c <setCommand+0x3e0>)
 8006520:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006522:	208b      	movs	r0, #139	; 0x8b
 8006524:	0040      	lsls	r0, r0, #1
 8006526:	f005 fe8b 	bl	800c240 <EE_WriteVariable>
 800652a:	e6fa      	b.n	8006322 <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 800652c:	0038      	movs	r0, r7
 800652e:	f00d f92c 	bl	801378a <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006532:	1e43      	subs	r3, r0, #1
 8006534:	b29b      	uxth	r3, r3
 8006536:	2bfe      	cmp	r3, #254	; 0xfe
 8006538:	d900      	bls.n	800653c <setCommand+0x300>
 800653a:	e6e1      	b.n	8006300 <setCommand+0xc4>
				BOS.buttons.minInterClickTime =temp16;
 800653c:	b2c0      	uxtb	r0, r0
 800653e:	4b37      	ldr	r3, [pc, #220]	; (800661c <setCommand+0x3e0>)
 8006540:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006542:	7959      	ldrb	r1, [r3, #5]
 8006544:	0209      	lsls	r1, r1, #8
 8006546:	4301      	orrs	r1, r0
 8006548:	2018      	movs	r0, #24
 800654a:	30ff      	adds	r0, #255	; 0xff
 800654c:	f005 fe78 	bl	800c240 <EE_WriteVariable>
 8006550:	e6e7      	b.n	8006322 <setCommand+0xe6>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006552:	aa0c      	add	r2, sp, #48	; 0x30
 8006554:	2102      	movs	r1, #2
 8006556:	0028      	movs	r0, r5
 8006558:	f008 f8e6 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800655c:	4f20      	ldr	r7, [pc, #128]	; (80065e0 <setCommand+0x3a4>)
 800655e:	6038      	str	r0, [r7, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006560:	aa0b      	add	r2, sp, #44	; 0x2c
 8006562:	2103      	movs	r1, #3
 8006564:	0028      	movs	r0, r5
 8006566:	f008 f8df 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800656a:	4c2f      	ldr	r4, [pc, #188]	; (8006628 <setCommand+0x3ec>)
 800656c:	6020      	str	r0, [r4, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800656e:	aa0a      	add	r2, sp, #40	; 0x28
 8006570:	2104      	movs	r1, #4
 8006572:	0028      	movs	r0, r5
 8006574:	f008 f8d8 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006578:	4e2c      	ldr	r6, [pc, #176]	; (800662c <setCommand+0x3f0>)
 800657a:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800657c:	aa09      	add	r2, sp, #36	; 0x24
 800657e:	2105      	movs	r1, #5
 8006580:	0028      	movs	r0, r5
 8006582:	f008 f8d1 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006586:	4d2a      	ldr	r5, [pc, #168]	; (8006630 <setCommand+0x3f4>)
 8006588:	6028      	str	r0, [r5, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 800658a:	6838      	ldr	r0, [r7, #0]
 800658c:	f00d f8fd 	bl	801378a <atoi>
 8006590:	b2c7      	uxtb	r7, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	f00d f8f9 	bl	801378a <atoi>
 8006598:	0004      	movs	r4, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800659a:	6830      	ldr	r0, [r6, #0]
 800659c:	f00d f8f5 	bl	801378a <atoi>
 80065a0:	0006      	movs	r6, r0
		if(pcParameterString5 != NULL){
 80065a2:	682d      	ldr	r5, [r5, #0]
 80065a4:	2d00      	cmp	r5, #0
 80065a6:	d04b      	beq.n	8006640 <setCommand+0x404>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80065a8:	2202      	movs	r2, #2
 80065aa:	4922      	ldr	r1, [pc, #136]	; (8006634 <setCommand+0x3f8>)
 80065ac:	0028      	movs	r0, r5
 80065ae:	f00d ff3f 	bl	8014430 <strncmp>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d042      	beq.n	800663c <setCommand+0x400>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80065b6:	2202      	movs	r2, #2
 80065b8:	491f      	ldr	r1, [pc, #124]	; (8006638 <setCommand+0x3fc>)
 80065ba:	0028      	movs	r0, r5
 80065bc:	f00d ff38 	bl	8014430 <strncmp>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d000      	beq.n	80065c6 <setCommand+0x38a>
 80065c4:	e69c      	b.n	8006300 <setCommand+0xc4>
				temp84 =RTC_PM;
 80065c6:	2302      	movs	r3, #2
 80065c8:	4699      	mov	r9, r3
 80065ca:	e039      	b.n	8006640 <setCommand+0x404>
 80065cc:	20000a08 	.word	0x20000a08
 80065d0:	080183e8 	.word	0x080183e8
 80065d4:	08018b14 	.word	0x08018b14
 80065d8:	08018b20 	.word	0x08018b20
 80065dc:	08018470 	.word	0x08018470
 80065e0:	20000a14 	.word	0x20000a14
 80065e4:	080183f0 	.word	0x080183f0
 80065e8:	0801755c 	.word	0x0801755c
 80065ec:	08018a10 	.word	0x08018a10
 80065f0:	08018a18 	.word	0x08018a18
 80065f4:	08018400 	.word	0x08018400
 80065f8:	080182dc 	.word	0x080182dc
 80065fc:	200061f0 	.word	0x200061f0
 8006600:	08018a1c 	.word	0x08018a1c
 8006604:	08018408 	.word	0x08018408
 8006608:	08018410 	.word	0x08018410
 800660c:	0801841c 	.word	0x0801841c
 8006610:	08018428 	.word	0x08018428
 8006614:	08018438 	.word	0x08018438
 8006618:	0801844c 	.word	0x0801844c
 800661c:	20006270 	.word	0x20006270
 8006620:	08018a30 	.word	0x08018a30
 8006624:	08018a60 	.word	0x08018a60
 8006628:	20000a1c 	.word	0x20000a1c
 800662c:	20000a20 	.word	0x20000a20
 8006630:	20000a24 	.word	0x20000a24
 8006634:	08019f1c 	.word	0x08019f1c
 8006638:	08018b1c 	.word	0x08018b1c
				temp84 =RTC_AM;
 800663c:	2301      	movs	r3, #1
 800663e:	4699      	mov	r9, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006640:	2f17      	cmp	r7, #23
 8006642:	d900      	bls.n	8006646 <setCommand+0x40a>
 8006644:	e65c      	b.n	8006300 <setCommand+0xc4>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006646:	b2e4      	uxtb	r4, r4
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006648:	2c3b      	cmp	r4, #59	; 0x3b
 800664a:	d900      	bls.n	800664e <setCommand+0x412>
 800664c:	e658      	b.n	8006300 <setCommand+0xc4>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 800664e:	b2f5      	uxtb	r5, r6
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006650:	2d3b      	cmp	r5, #59	; 0x3b
 8006652:	d900      	bls.n	8006656 <setCommand+0x41a>
 8006654:	e654      	b.n	8006300 <setCommand+0xc4>
				GetTimeDate();
 8006656:	f007 fbbf 	bl	800ddd8 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 800665a:	4bd0      	ldr	r3, [pc, #832]	; (800699c <setCommand+0x760>)
 800665c:	7d1a      	ldrb	r2, [r3, #20]
 800665e:	4694      	mov	ip, r2
 8006660:	8b1a      	ldrh	r2, [r3, #24]
 8006662:	7d59      	ldrb	r1, [r3, #21]
 8006664:	7d98      	ldrb	r0, [r3, #22]
 8006666:	7b1b      	ldrb	r3, [r3, #12]
 8006668:	b25b      	sxtb	r3, r3
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	464b      	mov	r3, r9
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	9702      	str	r7, [sp, #8]
 8006672:	9401      	str	r4, [sp, #4]
 8006674:	9500      	str	r5, [sp, #0]
 8006676:	4663      	mov	r3, ip
 8006678:	f007 fb54 	bl	800dd24 <BOS_CalendarConfig>
 800667c:	0007      	movs	r7, r0
	if(result == BOS_OK){
 800667e:	2f00      	cmp	r7, #0
 8006680:	d100      	bne.n	8006684 <setCommand+0x448>
 8006682:	e64e      	b.n	8006322 <setCommand+0xe6>
 8006684:	e06c      	b.n	8006760 <setCommand+0x524>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006686:	aa0c      	add	r2, sp, #48	; 0x30
 8006688:	2102      	movs	r1, #2
 800668a:	0028      	movs	r0, r5
 800668c:	f008 f84c 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006690:	4cc3      	ldr	r4, [pc, #780]	; (80069a0 <setCommand+0x764>)
 8006692:	6020      	str	r0, [r4, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006694:	aa0b      	add	r2, sp, #44	; 0x2c
 8006696:	2103      	movs	r1, #3
 8006698:	0028      	movs	r0, r5
 800669a:	f008 f845 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800669e:	4bc1      	ldr	r3, [pc, #772]	; (80069a4 <setCommand+0x768>)
 80066a0:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 80066a2:	aa0a      	add	r2, sp, #40	; 0x28
 80066a4:	2104      	movs	r1, #4
 80066a6:	0028      	movs	r0, r5
 80066a8:	f008 f83e 	bl	800e728 <FreeRTOS_CLIGetParameter>
 80066ac:	4bbe      	ldr	r3, [pc, #760]	; (80069a8 <setCommand+0x76c>)
 80066ae:	4699      	mov	r9, r3
 80066b0:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80066b2:	aa09      	add	r2, sp, #36	; 0x24
 80066b4:	2105      	movs	r1, #5
 80066b6:	0028      	movs	r0, r5
 80066b8:	f008 f836 	bl	800e728 <FreeRTOS_CLIGetParameter>
 80066bc:	4fbb      	ldr	r7, [pc, #748]	; (80069ac <setCommand+0x770>)
 80066be:	6038      	str	r0, [r7, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066c0:	464b      	mov	r3, r9
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	f00d f861 	bl	801378a <atoi>
 80066c8:	0005      	movs	r5, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066ca:	6838      	ldr	r0, [r7, #0]
 80066cc:	f00d f85d 	bl	801378a <atoi>
 80066d0:	0006      	movs	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80066d2:	6824      	ldr	r4, [r4, #0]
 80066d4:	2206      	movs	r2, #6
 80066d6:	49b6      	ldr	r1, [pc, #728]	; (80069b0 <setCommand+0x774>)
 80066d8:	0020      	movs	r0, r4
 80066da:	f00d fea9 	bl	8014430 <strncmp>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d100      	bne.n	80066e4 <setCommand+0x4a8>
 80066e2:	e096      	b.n	8006812 <setCommand+0x5d6>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80066e4:	2207      	movs	r2, #7
 80066e6:	49b3      	ldr	r1, [pc, #716]	; (80069b4 <setCommand+0x778>)
 80066e8:	0020      	movs	r0, r4
 80066ea:	f00d fea1 	bl	8014430 <strncmp>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d100      	bne.n	80066f4 <setCommand+0x4b8>
 80066f2:	e14f      	b.n	8006994 <setCommand+0x758>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80066f4:	2209      	movs	r2, #9
 80066f6:	49b0      	ldr	r1, [pc, #704]	; (80069b8 <setCommand+0x77c>)
 80066f8:	0020      	movs	r0, r4
 80066fa:	f00d fe99 	bl	8014430 <strncmp>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d100      	bne.n	8006704 <setCommand+0x4c8>
 8006702:	e195      	b.n	8006a30 <setCommand+0x7f4>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006704:	2208      	movs	r2, #8
 8006706:	49ad      	ldr	r1, [pc, #692]	; (80069bc <setCommand+0x780>)
 8006708:	0020      	movs	r0, r4
 800670a:	f00d fe91 	bl	8014430 <strncmp>
 800670e:	2800      	cmp	r0, #0
 8006710:	d100      	bne.n	8006714 <setCommand+0x4d8>
 8006712:	e190      	b.n	8006a36 <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006714:	2206      	movs	r2, #6
 8006716:	49aa      	ldr	r1, [pc, #680]	; (80069c0 <setCommand+0x784>)
 8006718:	0020      	movs	r0, r4
 800671a:	f00d fe89 	bl	8014430 <strncmp>
 800671e:	2800      	cmp	r0, #0
 8006720:	d100      	bne.n	8006724 <setCommand+0x4e8>
 8006722:	e18b      	b.n	8006a3c <setCommand+0x800>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006724:	2208      	movs	r2, #8
 8006726:	49a7      	ldr	r1, [pc, #668]	; (80069c4 <setCommand+0x788>)
 8006728:	0020      	movs	r0, r4
 800672a:	f00d fe81 	bl	8014430 <strncmp>
 800672e:	2800      	cmp	r0, #0
 8006730:	d100      	bne.n	8006734 <setCommand+0x4f8>
 8006732:	e186      	b.n	8006a42 <setCommand+0x806>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006734:	2206      	movs	r2, #6
 8006736:	49a4      	ldr	r1, [pc, #656]	; (80069c8 <setCommand+0x78c>)
 8006738:	0020      	movs	r0, r4
 800673a:	f00d fe79 	bl	8014430 <strncmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	d100      	bne.n	8006744 <setCommand+0x508>
 8006742:	e181      	b.n	8006a48 <setCommand+0x80c>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006744:	4b97      	ldr	r3, [pc, #604]	; (80069a4 <setCommand+0x768>)
 8006746:	681c      	ldr	r4, [r3, #0]
 8006748:	2207      	movs	r2, #7
 800674a:	49a0      	ldr	r1, [pc, #640]	; (80069cc <setCommand+0x790>)
 800674c:	0020      	movs	r0, r4
 800674e:	f00d fe6f 	bl	8014430 <strncmp>
			result =BOS_ERR_WrongValue;
 8006752:	2768      	movs	r7, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006754:	2800      	cmp	r0, #0
 8006756:	d003      	beq.n	8006760 <setCommand+0x524>
 8006758:	e067      	b.n	800682a <setCommand+0x5ee>
			temp82 =JANUARY;
 800675a:	2401      	movs	r4, #1
		if(result == BOS_OK){
 800675c:	2f00      	cmp	r7, #0
 800675e:	d036      	beq.n	80067ce <setCommand+0x592>
	else if(result == BOS_ERR_WrongParam)
 8006760:	2f67      	cmp	r7, #103	; 0x67
 8006762:	d100      	bne.n	8006766 <setCommand+0x52a>
 8006764:	e595      	b.n	8006292 <setCommand+0x56>
	else if(result == BOS_ERR_WrongValue)
 8006766:	2f68      	cmp	r7, #104	; 0x68
 8006768:	d100      	bne.n	800676c <setCommand+0x530>
 800676a:	e5c9      	b.n	8006300 <setCommand+0xc4>
}
 800676c:	2000      	movs	r0, #0
 800676e:	b00f      	add	sp, #60	; 0x3c
 8006770:	bc0c      	pop	{r2, r3}
 8006772:	4690      	mov	r8, r2
 8006774:	4699      	mov	r9, r3
 8006776:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp82 =FEBRUARY;
 8006778:	2402      	movs	r4, #2
 800677a:	e7ef      	b.n	800675c <setCommand+0x520>
 800677c:	2402      	movs	r4, #2
 800677e:	e7ed      	b.n	800675c <setCommand+0x520>
			temp82 =MARCH;
 8006780:	2403      	movs	r4, #3
 8006782:	e7eb      	b.n	800675c <setCommand+0x520>
 8006784:	2403      	movs	r4, #3
 8006786:	e7e9      	b.n	800675c <setCommand+0x520>
			temp82 =APRIL;
 8006788:	2404      	movs	r4, #4
 800678a:	e7e7      	b.n	800675c <setCommand+0x520>
 800678c:	2404      	movs	r4, #4
 800678e:	e7e5      	b.n	800675c <setCommand+0x520>
			temp82 =MAY;
 8006790:	2405      	movs	r4, #5
 8006792:	e7e3      	b.n	800675c <setCommand+0x520>
 8006794:	2405      	movs	r4, #5
 8006796:	e7e1      	b.n	800675c <setCommand+0x520>
			temp82 =JUNE;
 8006798:	2406      	movs	r4, #6
 800679a:	e7df      	b.n	800675c <setCommand+0x520>
 800679c:	2406      	movs	r4, #6
 800679e:	e7dd      	b.n	800675c <setCommand+0x520>
			temp82 =JULY;
 80067a0:	2407      	movs	r4, #7
 80067a2:	e7db      	b.n	800675c <setCommand+0x520>
 80067a4:	2407      	movs	r4, #7
 80067a6:	e7d9      	b.n	800675c <setCommand+0x520>
			temp82 =AUGUST;
 80067a8:	2408      	movs	r4, #8
 80067aa:	e7d7      	b.n	800675c <setCommand+0x520>
 80067ac:	2408      	movs	r4, #8
 80067ae:	e7d5      	b.n	800675c <setCommand+0x520>
			temp82 =SEPTEMBER;
 80067b0:	2409      	movs	r4, #9
 80067b2:	e7d3      	b.n	800675c <setCommand+0x520>
 80067b4:	2409      	movs	r4, #9
 80067b6:	e7d1      	b.n	800675c <setCommand+0x520>
			temp82 =OCTOBER;
 80067b8:	240a      	movs	r4, #10
 80067ba:	e7cf      	b.n	800675c <setCommand+0x520>
 80067bc:	240a      	movs	r4, #10
 80067be:	e7cd      	b.n	800675c <setCommand+0x520>
			temp82 =NOVEMBER;
 80067c0:	240b      	movs	r4, #11
 80067c2:	e7cb      	b.n	800675c <setCommand+0x520>
 80067c4:	240b      	movs	r4, #11
 80067c6:	e7c9      	b.n	800675c <setCommand+0x520>
			temp82 =DECEMBER;
 80067c8:	240c      	movs	r4, #12
 80067ca:	e7c7      	b.n	800675c <setCommand+0x520>
			temp82 =JANUARY;
 80067cc:	2401      	movs	r4, #1
		temp83 =atoi((const char* )pcParameterString4);		// day
 80067ce:	b2ed      	uxtb	r5, r5
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80067d0:	1e6b      	subs	r3, r5, #1
 80067d2:	2b1e      	cmp	r3, #30
 80067d4:	d900      	bls.n	80067d8 <setCommand+0x59c>
 80067d6:	e593      	b.n	8006300 <setCommand+0xc4>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80067d8:	b2b7      	uxth	r7, r6
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80067da:	4b7d      	ldr	r3, [pc, #500]	; (80069d0 <setCommand+0x794>)
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b64      	cmp	r3, #100	; 0x64
 80067e2:	d900      	bls.n	80067e6 <setCommand+0x5aa>
 80067e4:	e58c      	b.n	8006300 <setCommand+0xc4>
				GetTimeDate();
 80067e6:	f007 faf7 	bl	800ddd8 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80067ea:	4b6c      	ldr	r3, [pc, #432]	; (800699c <setCommand+0x760>)
 80067ec:	220c      	movs	r2, #12
 80067ee:	569a      	ldrsb	r2, [r3, r2]
 80067f0:	9204      	str	r2, [sp, #16]
 80067f2:	7cda      	ldrb	r2, [r3, #19]
 80067f4:	9203      	str	r2, [sp, #12]
 80067f6:	7c9a      	ldrb	r2, [r3, #18]
 80067f8:	9202      	str	r2, [sp, #8]
 80067fa:	7c5a      	ldrb	r2, [r3, #17]
 80067fc:	9201      	str	r2, [sp, #4]
 80067fe:	7c1b      	ldrb	r3, [r3, #16]
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	4643      	mov	r3, r8
 8006804:	003a      	movs	r2, r7
 8006806:	0029      	movs	r1, r5
 8006808:	0020      	movs	r0, r4
 800680a:	f007 fa8b 	bl	800dd24 <BOS_CalendarConfig>
 800680e:	0007      	movs	r7, r0
 8006810:	e735      	b.n	800667e <setCommand+0x442>
			temp81 =MONDAY;
 8006812:	2301      	movs	r3, #1
 8006814:	4698      	mov	r8, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006816:	4b63      	ldr	r3, [pc, #396]	; (80069a4 <setCommand+0x768>)
 8006818:	681c      	ldr	r4, [r3, #0]
 800681a:	2207      	movs	r2, #7
 800681c:	496b      	ldr	r1, [pc, #428]	; (80069cc <setCommand+0x790>)
 800681e:	0020      	movs	r0, r4
 8006820:	f00d fe06 	bl	8014430 <strncmp>
 8006824:	2700      	movs	r7, #0
 8006826:	2800      	cmp	r0, #0
 8006828:	d0d0      	beq.n	80067cc <setCommand+0x590>
 800682a:	2202      	movs	r2, #2
 800682c:	4969      	ldr	r1, [pc, #420]	; (80069d4 <setCommand+0x798>)
 800682e:	0020      	movs	r0, r4
 8006830:	f00d fdfe 	bl	8014430 <strncmp>
 8006834:	2800      	cmp	r0, #0
 8006836:	d100      	bne.n	800683a <setCommand+0x5fe>
 8006838:	e78f      	b.n	800675a <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 800683a:	2208      	movs	r2, #8
 800683c:	4966      	ldr	r1, [pc, #408]	; (80069d8 <setCommand+0x79c>)
 800683e:	0020      	movs	r0, r4
 8006840:	f00d fdf6 	bl	8014430 <strncmp>
 8006844:	2800      	cmp	r0, #0
 8006846:	d097      	beq.n	8006778 <setCommand+0x53c>
 8006848:	2202      	movs	r2, #2
 800684a:	4964      	ldr	r1, [pc, #400]	; (80069dc <setCommand+0x7a0>)
 800684c:	0020      	movs	r0, r4
 800684e:	f00d fdef 	bl	8014430 <strncmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	d092      	beq.n	800677c <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006856:	2205      	movs	r2, #5
 8006858:	4961      	ldr	r1, [pc, #388]	; (80069e0 <setCommand+0x7a4>)
 800685a:	0020      	movs	r0, r4
 800685c:	f00d fde8 	bl	8014430 <strncmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	d08d      	beq.n	8006780 <setCommand+0x544>
 8006864:	2202      	movs	r2, #2
 8006866:	495f      	ldr	r1, [pc, #380]	; (80069e4 <setCommand+0x7a8>)
 8006868:	0020      	movs	r0, r4
 800686a:	f00d fde1 	bl	8014430 <strncmp>
 800686e:	2800      	cmp	r0, #0
 8006870:	d088      	beq.n	8006784 <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006872:	2205      	movs	r2, #5
 8006874:	495c      	ldr	r1, [pc, #368]	; (80069e8 <setCommand+0x7ac>)
 8006876:	0020      	movs	r0, r4
 8006878:	f00d fdda 	bl	8014430 <strncmp>
 800687c:	2800      	cmp	r0, #0
 800687e:	d083      	beq.n	8006788 <setCommand+0x54c>
 8006880:	2202      	movs	r2, #2
 8006882:	495a      	ldr	r1, [pc, #360]	; (80069ec <setCommand+0x7b0>)
 8006884:	0020      	movs	r0, r4
 8006886:	f00d fdd3 	bl	8014430 <strncmp>
 800688a:	2800      	cmp	r0, #0
 800688c:	d100      	bne.n	8006890 <setCommand+0x654>
 800688e:	e77d      	b.n	800678c <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006890:	2203      	movs	r2, #3
 8006892:	4957      	ldr	r1, [pc, #348]	; (80069f0 <setCommand+0x7b4>)
 8006894:	0020      	movs	r0, r4
 8006896:	f00d fdcb 	bl	8014430 <strncmp>
 800689a:	2800      	cmp	r0, #0
 800689c:	d100      	bne.n	80068a0 <setCommand+0x664>
 800689e:	e777      	b.n	8006790 <setCommand+0x554>
 80068a0:	2202      	movs	r2, #2
 80068a2:	4954      	ldr	r1, [pc, #336]	; (80069f4 <setCommand+0x7b8>)
 80068a4:	0020      	movs	r0, r4
 80068a6:	f00d fdc3 	bl	8014430 <strncmp>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d100      	bne.n	80068b0 <setCommand+0x674>
 80068ae:	e771      	b.n	8006794 <setCommand+0x558>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80068b0:	2204      	movs	r2, #4
 80068b2:	4951      	ldr	r1, [pc, #324]	; (80069f8 <setCommand+0x7bc>)
 80068b4:	0020      	movs	r0, r4
 80068b6:	f00d fdbb 	bl	8014430 <strncmp>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d100      	bne.n	80068c0 <setCommand+0x684>
 80068be:	e76b      	b.n	8006798 <setCommand+0x55c>
 80068c0:	2202      	movs	r2, #2
 80068c2:	494e      	ldr	r1, [pc, #312]	; (80069fc <setCommand+0x7c0>)
 80068c4:	0020      	movs	r0, r4
 80068c6:	f00d fdb3 	bl	8014430 <strncmp>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	d100      	bne.n	80068d0 <setCommand+0x694>
 80068ce:	e765      	b.n	800679c <setCommand+0x560>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80068d0:	2204      	movs	r2, #4
 80068d2:	494b      	ldr	r1, [pc, #300]	; (8006a00 <setCommand+0x7c4>)
 80068d4:	0020      	movs	r0, r4
 80068d6:	f00d fdab 	bl	8014430 <strncmp>
 80068da:	2800      	cmp	r0, #0
 80068dc:	d100      	bne.n	80068e0 <setCommand+0x6a4>
 80068de:	e75f      	b.n	80067a0 <setCommand+0x564>
 80068e0:	2202      	movs	r2, #2
 80068e2:	4948      	ldr	r1, [pc, #288]	; (8006a04 <setCommand+0x7c8>)
 80068e4:	0020      	movs	r0, r4
 80068e6:	f00d fda3 	bl	8014430 <strncmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	d100      	bne.n	80068f0 <setCommand+0x6b4>
 80068ee:	e759      	b.n	80067a4 <setCommand+0x568>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80068f0:	2205      	movs	r2, #5
 80068f2:	4945      	ldr	r1, [pc, #276]	; (8006a08 <setCommand+0x7cc>)
 80068f4:	0020      	movs	r0, r4
 80068f6:	f00d fd9b 	bl	8014430 <strncmp>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d100      	bne.n	8006900 <setCommand+0x6c4>
 80068fe:	e753      	b.n	80067a8 <setCommand+0x56c>
 8006900:	2202      	movs	r2, #2
 8006902:	4942      	ldr	r1, [pc, #264]	; (8006a0c <setCommand+0x7d0>)
 8006904:	0020      	movs	r0, r4
 8006906:	f00d fd93 	bl	8014430 <strncmp>
 800690a:	2800      	cmp	r0, #0
 800690c:	d100      	bne.n	8006910 <setCommand+0x6d4>
 800690e:	e74d      	b.n	80067ac <setCommand+0x570>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006910:	2209      	movs	r2, #9
 8006912:	493f      	ldr	r1, [pc, #252]	; (8006a10 <setCommand+0x7d4>)
 8006914:	0020      	movs	r0, r4
 8006916:	f00d fd8b 	bl	8014430 <strncmp>
 800691a:	2800      	cmp	r0, #0
 800691c:	d100      	bne.n	8006920 <setCommand+0x6e4>
 800691e:	e747      	b.n	80067b0 <setCommand+0x574>
 8006920:	2202      	movs	r2, #2
 8006922:	493c      	ldr	r1, [pc, #240]	; (8006a14 <setCommand+0x7d8>)
 8006924:	0020      	movs	r0, r4
 8006926:	f00d fd83 	bl	8014430 <strncmp>
 800692a:	2800      	cmp	r0, #0
 800692c:	d100      	bne.n	8006930 <setCommand+0x6f4>
 800692e:	e741      	b.n	80067b4 <setCommand+0x578>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006930:	2207      	movs	r2, #7
 8006932:	4939      	ldr	r1, [pc, #228]	; (8006a18 <setCommand+0x7dc>)
 8006934:	0020      	movs	r0, r4
 8006936:	f00d fd7b 	bl	8014430 <strncmp>
 800693a:	2800      	cmp	r0, #0
 800693c:	d100      	bne.n	8006940 <setCommand+0x704>
 800693e:	e73b      	b.n	80067b8 <setCommand+0x57c>
 8006940:	2202      	movs	r2, #2
 8006942:	4936      	ldr	r1, [pc, #216]	; (8006a1c <setCommand+0x7e0>)
 8006944:	0020      	movs	r0, r4
 8006946:	f00d fd73 	bl	8014430 <strncmp>
 800694a:	2800      	cmp	r0, #0
 800694c:	d100      	bne.n	8006950 <setCommand+0x714>
 800694e:	e735      	b.n	80067bc <setCommand+0x580>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006950:	2208      	movs	r2, #8
 8006952:	4933      	ldr	r1, [pc, #204]	; (8006a20 <setCommand+0x7e4>)
 8006954:	0020      	movs	r0, r4
 8006956:	f00d fd6b 	bl	8014430 <strncmp>
 800695a:	2800      	cmp	r0, #0
 800695c:	d100      	bne.n	8006960 <setCommand+0x724>
 800695e:	e72f      	b.n	80067c0 <setCommand+0x584>
 8006960:	2202      	movs	r2, #2
 8006962:	4930      	ldr	r1, [pc, #192]	; (8006a24 <setCommand+0x7e8>)
 8006964:	0020      	movs	r0, r4
 8006966:	f00d fd63 	bl	8014430 <strncmp>
 800696a:	2800      	cmp	r0, #0
 800696c:	d100      	bne.n	8006970 <setCommand+0x734>
 800696e:	e729      	b.n	80067c4 <setCommand+0x588>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006970:	2208      	movs	r2, #8
 8006972:	492d      	ldr	r1, [pc, #180]	; (8006a28 <setCommand+0x7ec>)
 8006974:	0020      	movs	r0, r4
 8006976:	f00d fd5b 	bl	8014430 <strncmp>
 800697a:	2800      	cmp	r0, #0
 800697c:	d100      	bne.n	8006980 <setCommand+0x744>
 800697e:	e723      	b.n	80067c8 <setCommand+0x58c>
 8006980:	2202      	movs	r2, #2
 8006982:	492a      	ldr	r1, [pc, #168]	; (8006a2c <setCommand+0x7f0>)
 8006984:	0020      	movs	r0, r4
 8006986:	f00d fd53 	bl	8014430 <strncmp>
			temp82 =DECEMBER;
 800698a:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 800698c:	2800      	cmp	r0, #0
 800698e:	d100      	bne.n	8006992 <setCommand+0x756>
 8006990:	e6e4      	b.n	800675c <setCommand+0x520>
 8006992:	e4b5      	b.n	8006300 <setCommand+0xc4>
			temp81 =TUESDAY;
 8006994:	2302      	movs	r3, #2
 8006996:	4698      	mov	r8, r3
 8006998:	e73d      	b.n	8006816 <setCommand+0x5da>
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	20006270 	.word	0x20006270
 80069a0:	20000a14 	.word	0x20000a14
 80069a4:	20000a1c 	.word	0x20000a1c
 80069a8:	20000a20 	.word	0x20000a20
 80069ac:	20000a24 	.word	0x20000a24
 80069b0:	08018b28 	.word	0x08018b28
 80069b4:	08018b30 	.word	0x08018b30
 80069b8:	08018b38 	.word	0x08018b38
 80069bc:	08018b44 	.word	0x08018b44
 80069c0:	08018b50 	.word	0x08018b50
 80069c4:	08018b58 	.word	0x08018b58
 80069c8:	08018b64 	.word	0x08018b64
 80069cc:	08018c00 	.word	0x08018c00
 80069d0:	fffff830 	.word	0xfffff830
 80069d4:	08018b6c 	.word	0x08018b6c
 80069d8:	08018b70 	.word	0x08018b70
 80069dc:	08018b7c 	.word	0x08018b7c
 80069e0:	08018b80 	.word	0x08018b80
 80069e4:	08018b88 	.word	0x08018b88
 80069e8:	08018b8c 	.word	0x08018b8c
 80069ec:	08018b94 	.word	0x08018b94
 80069f0:	08018b98 	.word	0x08018b98
 80069f4:	08018b9c 	.word	0x08018b9c
 80069f8:	08018ba0 	.word	0x08018ba0
 80069fc:	08018ba8 	.word	0x08018ba8
 8006a00:	08018bac 	.word	0x08018bac
 8006a04:	08018bb4 	.word	0x08018bb4
 8006a08:	08018bb8 	.word	0x08018bb8
 8006a0c:	08018bc0 	.word	0x08018bc0
 8006a10:	08018bc4 	.word	0x08018bc4
 8006a14:	08018bd0 	.word	0x08018bd0
 8006a18:	08018bd4 	.word	0x08018bd4
 8006a1c:	08018bdc 	.word	0x08018bdc
 8006a20:	08018be0 	.word	0x08018be0
 8006a24:	08018bec 	.word	0x08018bec
 8006a28:	08018bf0 	.word	0x08018bf0
 8006a2c:	08018bfc 	.word	0x08018bfc
			temp81 =WEDNESDAY;
 8006a30:	2303      	movs	r3, #3
 8006a32:	4698      	mov	r8, r3
 8006a34:	e6ef      	b.n	8006816 <setCommand+0x5da>
			temp81 =THURSDAY;
 8006a36:	2304      	movs	r3, #4
 8006a38:	4698      	mov	r8, r3
 8006a3a:	e6ec      	b.n	8006816 <setCommand+0x5da>
			temp81 =FRIDAY;
 8006a3c:	2305      	movs	r3, #5
 8006a3e:	4698      	mov	r8, r3
 8006a40:	e6e9      	b.n	8006816 <setCommand+0x5da>
			temp81 =SATURDAY;
 8006a42:	2306      	movs	r3, #6
 8006a44:	4698      	mov	r8, r3
 8006a46:	e6e6      	b.n	8006816 <setCommand+0x5da>
			temp81 =SUNDAY;
 8006a48:	2307      	movs	r3, #7
 8006a4a:	4698      	mov	r8, r3
 8006a4c:	e6e3      	b.n	8006816 <setCommand+0x5da>
 8006a4e:	46c0      	nop			; (mov r8, r8)

08006a50 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a50:	b530      	push	{r4, r5, lr}
 8006a52:	b083      	sub	sp, #12
 8006a54:	0005      	movs	r5, r0
 8006a56:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a5c:	aa01      	add	r2, sp, #4
 8006a5e:	2101      	movs	r1, #1
 8006a60:	f007 fe62 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006a64:	2300      	movs	r3, #0
 8006a66:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006a68:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006a6a:	2b70      	cmp	r3, #112	; 0x70
 8006a6c:	d007      	beq.n	8006a7e <removebuttonCommand+0x2e>
	result =RemovePortButton(port);
 8006a6e:	0020      	movs	r0, r4
 8006a70:	f006 f8e2 	bl	800cc38 <RemovePortButton>
	if(result == BOS_OK){
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d007      	beq.n	8006a88 <removebuttonCommand+0x38>
}
 8006a78:	2000      	movs	r0, #0
 8006a7a:	b003      	add	sp, #12
 8006a7c:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006a7e:	3001      	adds	r0, #1
 8006a80:	f00c fe89 	bl	8013796 <atol>
 8006a84:	b2c4      	uxtb	r4, r0
 8006a86:	e7f2      	b.n	8006a6e <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006a88:	0023      	movs	r3, r4
 8006a8a:	0022      	movs	r2, r4
 8006a8c:	4902      	ldr	r1, [pc, #8]	; (8006a98 <removebuttonCommand+0x48>)
 8006a8e:	0028      	movs	r0, r5
 8006a90:	f00d fc8a 	bl	80143a8 <siprintf>
 8006a94:	e7f0      	b.n	8006a78 <removebuttonCommand+0x28>
 8006a96:	46c0      	nop			; (mov r8, r8)
 8006a98:	080188c0 	.word	0x080188c0

08006a9c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	9003      	str	r0, [sp, #12]
 8006aa2:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9305      	str	r3, [sp, #20]
 8006aa8:	9304      	str	r3, [sp, #16]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006aaa:	aa05      	add	r2, sp, #20
 8006aac:	2101      	movs	r1, #1
 8006aae:	0030      	movs	r0, r6
 8006ab0:	f007 fe3a 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006ab4:	0004      	movs	r4, r0
 8006ab6:	4b23      	ldr	r3, [pc, #140]	; (8006b44 <addbuttonCommand+0xa8>)
 8006ab8:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006aba:	9f05      	ldr	r7, [sp, #20]
 8006abc:	003a      	movs	r2, r7
 8006abe:	4922      	ldr	r1, [pc, #136]	; (8006b48 <addbuttonCommand+0xac>)
 8006ac0:	f00d fcb6 	bl	8014430 <strncmp>
		type =MOMENTARY_NO;
 8006ac4:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d017      	beq.n	8006afa <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006aca:	003a      	movs	r2, r7
 8006acc:	491f      	ldr	r1, [pc, #124]	; (8006b4c <addbuttonCommand+0xb0>)
 8006ace:	0020      	movs	r0, r4
 8006ad0:	f00d fcae 	bl	8014430 <strncmp>
		type =MOMENTARY_NC;
 8006ad4:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d00f      	beq.n	8006afa <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006ada:	003a      	movs	r2, r7
 8006adc:	491c      	ldr	r1, [pc, #112]	; (8006b50 <addbuttonCommand+0xb4>)
 8006ade:	0020      	movs	r0, r4
 8006ae0:	f00d fca6 	bl	8014430 <strncmp>
		type =ONOFF_NO;
 8006ae4:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d007      	beq.n	8006afa <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006aea:	003a      	movs	r2, r7
 8006aec:	4919      	ldr	r1, [pc, #100]	; (8006b54 <addbuttonCommand+0xb8>)
 8006aee:	0020      	movs	r0, r4
 8006af0:	f00d fc9e 	bl	8014430 <strncmp>
		type =ONOFF_NC;
 8006af4:	4245      	negs	r5, r0
 8006af6:	4145      	adcs	r5, r0
 8006af8:	00ad      	lsls	r5, r5, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006afa:	aa04      	add	r2, sp, #16
 8006afc:	2102      	movs	r1, #2
 8006afe:	0030      	movs	r0, r6
 8006b00:	f007 fe12 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006b04:	2300      	movs	r3, #0
 8006b06:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006b08:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006b0a:	2b70      	cmp	r3, #112	; 0x70
 8006b0c:	d008      	beq.n	8006b20 <addbuttonCommand+0x84>
	result =AddPortButton(type,port);
 8006b0e:	0021      	movs	r1, r4
 8006b10:	0028      	movs	r0, r5
 8006b12:	f005 ffff 	bl	800cb14 <AddPortButton>
	if(result == BOS_OK){
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d007      	beq.n	8006b2a <addbuttonCommand+0x8e>
}
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	b007      	add	sp, #28
 8006b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006b20:	3001      	adds	r0, #1
 8006b22:	f00c fe38 	bl	8013796 <atol>
 8006b26:	b2c4      	uxtb	r4, r0
 8006b28:	e7f1      	b.n	8006b0e <addbuttonCommand+0x72>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <addbuttonCommand+0xa8>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9905      	ldr	r1, [sp, #20]
 8006b32:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006b34:	9400      	str	r4, [sp, #0]
 8006b36:	0023      	movs	r3, r4
 8006b38:	4907      	ldr	r1, [pc, #28]	; (8006b58 <addbuttonCommand+0xbc>)
 8006b3a:	9803      	ldr	r0, [sp, #12]
 8006b3c:	f00d fc34 	bl	80143a8 <siprintf>
 8006b40:	e7eb      	b.n	8006b1a <addbuttonCommand+0x7e>
 8006b42:	46c0      	nop			; (mov r8, r8)
 8006b44:	20000a04 	.word	0x20000a04
 8006b48:	08018180 	.word	0x08018180
 8006b4c:	08018190 	.word	0x08018190
 8006b50:	080181a0 	.word	0x080181a0
 8006b54:	080181ac 	.word	0x080181ac
 8006b58:	080181b8 	.word	0x080181b8

08006b5c <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b5e:	46d6      	mov	lr, sl
 8006b60:	464f      	mov	r7, r9
 8006b62:	4646      	mov	r6, r8
 8006b64:	b5c0      	push	{r6, r7, lr}
 8006b66:	b098      	sub	sp, #96	; 0x60
 8006b68:	9007      	str	r0, [sp, #28]
 8006b6a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b70:	9316      	str	r3, [sp, #88]	; 0x58
 8006b72:	9315      	str	r3, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006b74:	9314      	str	r3, [sp, #80]	; 0x50
 8006b76:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b78:	9312      	str	r3, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006b7a:	9311      	str	r3, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006b7c:	220a      	movs	r2, #10
 8006b7e:	2100      	movs	r1, #0
 8006b80:	a80e      	add	r0, sp, #56	; 0x38
 8006b82:	f00c fe83 	bl	801388c <memset>
 8006b86:	220a      	movs	r2, #10
 8006b88:	2100      	movs	r1, #0
 8006b8a:	a80b      	add	r0, sp, #44	; 0x2c
 8006b8c:	f00c fe7e 	bl	801388c <memset>
 8006b90:	220a      	movs	r2, #10
 8006b92:	2100      	movs	r1, #0
 8006b94:	a808      	add	r0, sp, #32
 8006b96:	f00c fe79 	bl	801388c <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b9a:	aa17      	add	r2, sp, #92	; 0x5c
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	0020      	movs	r0, r4
 8006ba0:	f007 fdc2 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006ba8:	2200      	movs	r2, #0
 8006baa:	9206      	str	r2, [sp, #24]
	if(pcParameterString1[0] == 'P'){
 8006bac:	2b50      	cmp	r3, #80	; 0x50
 8006bae:	d100      	bne.n	8006bb2 <scastCommand+0x56>
 8006bb0:	e06f      	b.n	8006c92 <scastCommand+0x136>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006bb2:	aa16      	add	r2, sp, #88	; 0x58
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	0020      	movs	r0, r4
 8006bb8:	f007 fdb6 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006bbc:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006bbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006bc0:	a80e      	add	r0, sp, #56	; 0x38
 8006bc2:	f00d fc46 	bl	8014452 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006bc6:	a80e      	add	r0, sp, #56	; 0x38
 8006bc8:	f7fd fbae 	bl	8004328 <GetID>
 8006bcc:	b2c3      	uxtb	r3, r0
 8006bce:	4698      	mov	r8, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006bd0:	aa15      	add	r2, sp, #84	; 0x54
 8006bd2:	2103      	movs	r1, #3
 8006bd4:	0020      	movs	r0, r4
 8006bd6:	f007 fda7 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006bda:	2300      	movs	r3, #0
 8006bdc:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006bde:	2200      	movs	r2, #0
 8006be0:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006be2:	2b70      	cmp	r3, #112	; 0x70
 8006be4:	d05b      	beq.n	8006c9e <scastCommand+0x142>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006be6:	aa14      	add	r2, sp, #80	; 0x50
 8006be8:	2104      	movs	r1, #4
 8006bea:	0020      	movs	r0, r4
 8006bec:	f007 fd9c 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006bf0:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006bf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006bf4:	a80b      	add	r0, sp, #44	; 0x2c
 8006bf6:	f00d fc2c 	bl	8014452 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006bfa:	a80b      	add	r0, sp, #44	; 0x2c
 8006bfc:	f7fd fb94 	bl	8004328 <GetID>
 8006c00:	b2c3      	uxtb	r3, r0
 8006c02:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006c04:	aa13      	add	r2, sp, #76	; 0x4c
 8006c06:	2105      	movs	r1, #5
 8006c08:	0020      	movs	r0, r4
 8006c0a:	f007 fd8d 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006c0e:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006c10:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006c12:	0032      	movs	r2, r6
 8006c14:	492c      	ldr	r1, [pc, #176]	; (8006cc8 <scastCommand+0x16c>)
 8006c16:	f00d fc0b 	bl	8014430 <strncmp>
		direction =FORWARD;
 8006c1a:	2700      	movs	r7, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d00f      	beq.n	8006c40 <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006c20:	0032      	movs	r2, r6
 8006c22:	492a      	ldr	r1, [pc, #168]	; (8006ccc <scastCommand+0x170>)
 8006c24:	0028      	movs	r0, r5
 8006c26:	f00d fc03 	bl	8014430 <strncmp>
		direction =BACKWARD;
 8006c2a:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d007      	beq.n	8006c40 <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006c30:	0032      	movs	r2, r6
 8006c32:	4927      	ldr	r1, [pc, #156]	; (8006cd0 <scastCommand+0x174>)
 8006c34:	0028      	movs	r0, r5
 8006c36:	f00d fbfb 	bl	8014430 <strncmp>
		direction =BIDIRECTIONAL;
 8006c3a:	4247      	negs	r7, r0
 8006c3c:	4147      	adcs	r7, r0
 8006c3e:	007f      	lsls	r7, r7, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006c40:	0032      	movs	r2, r6
 8006c42:	0029      	movs	r1, r5
 8006c44:	a808      	add	r0, sp, #32
 8006c46:	f00d fc04 	bl	8014452 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006c4a:	aa12      	add	r2, sp, #72	; 0x48
 8006c4c:	2106      	movs	r1, #6
 8006c4e:	0020      	movs	r0, r4
 8006c50:	f007 fd6a 	bl	800e728 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006c54:	f00c fd9f 	bl	8013796 <atol>
 8006c58:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006c5a:	aa11      	add	r2, sp, #68	; 0x44
 8006c5c:	2107      	movs	r1, #7
 8006c5e:	0020      	movs	r0, r4
 8006c60:	f007 fd62 	bl	800e728 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006c64:	f00c fd97 	bl	8013796 <atol>
 8006c68:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	9002      	str	r0, [sp, #8]
 8006c70:	9501      	str	r5, [sp, #4]
 8006c72:	9700      	str	r7, [sp, #0]
 8006c74:	464b      	mov	r3, r9
 8006c76:	4652      	mov	r2, sl
 8006c78:	4641      	mov	r1, r8
 8006c7a:	9806      	ldr	r0, [sp, #24]
 8006c7c:	f001 fac2 	bl	8008204 <StartScastDMAStream>
	if(result == BOS_OK){
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d012      	beq.n	8006caa <scastCommand+0x14e>
}
 8006c84:	2000      	movs	r0, #0
 8006c86:	b018      	add	sp, #96	; 0x60
 8006c88:	bc1c      	pop	{r2, r3, r4}
 8006c8a:	4690      	mov	r8, r2
 8006c8c:	4699      	mov	r9, r3
 8006c8e:	46a2      	mov	sl, r4
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006c92:	3001      	adds	r0, #1
 8006c94:	f00c fd7f 	bl	8013796 <atol>
 8006c98:	b2c3      	uxtb	r3, r0
 8006c9a:	9306      	str	r3, [sp, #24]
 8006c9c:	e789      	b.n	8006bb2 <scastCommand+0x56>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f00c fd79 	bl	8013796 <atol>
 8006ca4:	b2c3      	uxtb	r3, r0
 8006ca6:	469a      	mov	sl, r3
 8006ca8:	e79d      	b.n	8006be6 <scastCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006caa:	9404      	str	r4, [sp, #16]
 8006cac:	9503      	str	r5, [sp, #12]
 8006cae:	ab0b      	add	r3, sp, #44	; 0x2c
 8006cb0:	9302      	str	r3, [sp, #8]
 8006cb2:	4653      	mov	r3, sl
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	ab0e      	add	r3, sp, #56	; 0x38
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	aa08      	add	r2, sp, #32
 8006cbe:	4905      	ldr	r1, [pc, #20]	; (8006cd4 <scastCommand+0x178>)
 8006cc0:	9807      	ldr	r0, [sp, #28]
 8006cc2:	f00d fb71 	bl	80143a8 <siprintf>
 8006cc6:	e7dd      	b.n	8006c84 <scastCommand+0x128>
 8006cc8:	08018908 	.word	0x08018908
 8006ccc:	08018910 	.word	0x08018910
 8006cd0:	0801891c 	.word	0x0801891c
 8006cd4:	0801892c 	.word	0x0801892c

08006cd8 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	0004      	movs	r4, r0
	if(N > 1)
 8006cde:	4b26      	ldr	r3, [pc, #152]	; (8006d78 <infoCommand+0xa0>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006ce2:	2600      	movs	r6, #0
	if(N > 1)
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d831      	bhi.n	8006d4c <infoCommand+0x74>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006ce8:	4b23      	ldr	r3, [pc, #140]	; (8006d78 <infoCommand+0xa0>)
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	4923      	ldr	r1, [pc, #140]	; (8006d7c <infoCommand+0xa4>)
 8006cee:	0020      	movs	r0, r4
 8006cf0:	f00d fb5a 	bl	80143a8 <siprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	f7f9 fa0f 	bl	8000118 <strlen>
 8006cfa:	b282      	uxth	r2, r0
 8006cfc:	4d20      	ldr	r5, [pc, #128]	; (8006d80 <infoCommand+0xa8>)
 8006cfe:	7828      	ldrb	r0, [r5, #0]
 8006d00:	2701      	movs	r7, #1
 8006d02:	427f      	negs	r7, r7
 8006d04:	9700      	str	r7, [sp, #0]
 8006d06:	2332      	movs	r3, #50	; 0x32
 8006d08:	0021      	movs	r1, r4
 8006d0a:	f007 fa4d 	bl	800e1a8 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006d0e:	2213      	movs	r2, #19
 8006d10:	491c      	ldr	r1, [pc, #112]	; (8006d84 <infoCommand+0xac>)
 8006d12:	0020      	movs	r0, r4
 8006d14:	f00c fdb1 	bl	801387a <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006d18:	0020      	movs	r0, r4
 8006d1a:	f7f9 f9fd 	bl	8000118 <strlen>
 8006d1e:	b282      	uxth	r2, r0
 8006d20:	7828      	ldrb	r0, [r5, #0]
 8006d22:	9700      	str	r7, [sp, #0]
 8006d24:	2332      	movs	r3, #50	; 0x32
 8006d26:	0021      	movs	r1, r4
 8006d28:	f007 fa3e 	bl	800e1a8 <writePxMutex>
	DisplayTopology(PcPort);
 8006d2c:	7828      	ldrb	r0, [r5, #0]
 8006d2e:	f7fd f859 	bl	8003de4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006d32:	7828      	ldrb	r0, [r5, #0]
 8006d34:	f7fd f924 	bl	8003f80 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006d38:	2e02      	cmp	r6, #2
 8006d3a:	d00b      	beq.n	8006d54 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	4912      	ldr	r1, [pc, #72]	; (8006d88 <infoCommand+0xb0>)
 8006d40:	0020      	movs	r0, r4
 8006d42:	f00c fd9a 	bl	801387a <memcpy>
}
 8006d46:	2000      	movs	r0, #0
 8006d48:	b003      	add	sp, #12
 8006d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006d4c:	f007 fadc 	bl	800e308 <ReadPortsDir>
 8006d50:	0006      	movs	r6, r0
 8006d52:	e7c9      	b.n	8006ce8 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006d54:	2244      	movs	r2, #68	; 0x44
 8006d56:	490d      	ldr	r1, [pc, #52]	; (8006d8c <infoCommand+0xb4>)
 8006d58:	0020      	movs	r0, r4
 8006d5a:	f00c fd8e 	bl	801387a <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006d5e:	0020      	movs	r0, r4
 8006d60:	f7f9 f9da 	bl	8000118 <strlen>
 8006d64:	b282      	uxth	r2, r0
 8006d66:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <infoCommand+0xa8>)
 8006d68:	7818      	ldrb	r0, [r3, #0]
 8006d6a:	003b      	movs	r3, r7
 8006d6c:	9700      	str	r7, [sp, #0]
 8006d6e:	3333      	adds	r3, #51	; 0x33
 8006d70:	0021      	movs	r1, r4
 8006d72:	f007 fa19 	bl	800e1a8 <writePxMutex>
 8006d76:	e7e1      	b.n	8006d3c <infoCommand+0x64>
 8006d78:	20000030 	.word	0x20000030
 8006d7c:	080186c4 	.word	0x080186c4
 8006d80:	200002b0 	.word	0x200002b0
 8006d84:	080186e0 	.word	0x080186e0
 8006d88:	080173d4 	.word	0x080173d4
 8006d8c:	080186f4 	.word	0x080186f4

08006d90 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d90:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006d92:	2000      	movs	r0, #0
 8006d94:	f7fd f968 	bl	8004068 <DisplayModuleStatus>
}
 8006d98:	2000      	movs	r0, #0
 8006d9a:	bd10      	pop	{r4, pc}

08006d9c <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d9e:	46ce      	mov	lr, r9
 8006da0:	b500      	push	{lr}
 8006da2:	b090      	sub	sp, #64	; 0x40
 8006da4:	9000      	str	r0, [sp, #0]
 8006da6:	0015      	movs	r5, r2
 8006da8:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006daa:	2227      	movs	r2, #39	; 0x27
 8006dac:	2100      	movs	r1, #0
 8006dae:	a806      	add	r0, sp, #24
 8006db0:	f00c fd6c 	bl	801388c <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006db4:	220a      	movs	r2, #10
 8006db6:	2100      	movs	r1, #0
 8006db8:	a803      	add	r0, sp, #12
 8006dba:	f00c fd67 	bl	801388c <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006dbe:	4c56      	ldr	r4, [pc, #344]	; (8006f18 <groupCommand+0x17c>)
 8006dc0:	0022      	movs	r2, r4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	0028      	movs	r0, r5
 8006dc6:	f007 fcaf 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006dca:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	a803      	add	r0, sp, #12
 8006dd0:	f00d fb3f 	bl	8014452 <strncpy>
 8006dd4:	4c51      	ldr	r4, [pc, #324]	; (8006f1c <groupCommand+0x180>)
 8006dd6:	0027      	movs	r7, r4
 8006dd8:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006dda:	0021      	movs	r1, r4
 8006ddc:	a803      	add	r0, sp, #12
 8006dde:	f7f9 f991 	bl	8000104 <strcmp>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d018      	beq.n	8006e18 <groupCommand+0x7c>
 8006de6:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006de8:	42bc      	cmp	r4, r7
 8006dea:	d1f6      	bne.n	8006dda <groupCommand+0x3e>
	type =1;
 8006dec:	2301      	movs	r3, #1
 8006dee:	4699      	mov	r9, r3
	count =2;
 8006df0:	4b4b      	ldr	r3, [pc, #300]	; (8006f20 <groupCommand+0x184>)
 8006df2:	2202      	movs	r2, #2
 8006df4:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006df6:	3208      	adds	r2, #8
 8006df8:	494a      	ldr	r1, [pc, #296]	; (8006f24 <groupCommand+0x188>)
 8006dfa:	9800      	ldr	r0, [sp, #0]
 8006dfc:	f00c fd3d 	bl	801387a <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006e00:	4a49      	ldr	r2, [pc, #292]	; (8006f28 <groupCommand+0x18c>)
 8006e02:	2102      	movs	r1, #2
 8006e04:	9801      	ldr	r0, [sp, #4]
 8006e06:	f007 fc8f 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006e0a:	4b48      	ldr	r3, [pc, #288]	; (8006f2c <groupCommand+0x190>)
 8006e0c:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d05e      	beq.n	8006ed0 <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006e12:	4f45      	ldr	r7, [pc, #276]	; (8006f28 <groupCommand+0x18c>)
		if(count > 2)
 8006e14:	4e42      	ldr	r6, [pc, #264]	; (8006f20 <groupCommand+0x184>)
 8006e16:	e012      	b.n	8006e3e <groupCommand+0xa2>
			type =0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4699      	mov	r9, r3
 8006e1c:	e7e8      	b.n	8006df0 <groupCommand+0x54>
		strcat((char* )pcWriteBuffer,module);
 8006e1e:	a906      	add	r1, sp, #24
 8006e20:	9800      	ldr	r0, [sp, #0]
 8006e22:	f00d fae1 	bl	80143e8 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006e26:	3401      	adds	r4, #1
 8006e28:	b261      	sxtb	r1, r4
 8006e2a:	4b3d      	ldr	r3, [pc, #244]	; (8006f20 <groupCommand+0x184>)
 8006e2c:	7019      	strb	r1, [r3, #0]
 8006e2e:	4a3e      	ldr	r2, [pc, #248]	; (8006f28 <groupCommand+0x18c>)
 8006e30:	9801      	ldr	r0, [sp, #4]
 8006e32:	f007 fc79 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006e36:	4b3d      	ldr	r3, [pc, #244]	; (8006f2c <groupCommand+0x190>)
 8006e38:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d048      	beq.n	8006ed0 <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006e3e:	683d      	ldr	r5, [r7, #0]
 8006e40:	ac06      	add	r4, sp, #24
 8006e42:	002a      	movs	r2, r5
 8006e44:	0001      	movs	r1, r0
 8006e46:	0020      	movs	r0, r4
 8006e48:	f00d fb03 	bl	8014452 <strncpy>
		module[xParameterStringLength] ='\0';
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	5563      	strb	r3, [r4, r5]
		modID =GetID(module);
 8006e50:	0020      	movs	r0, r4
 8006e52:	f7fd fa69 	bl	8004328 <GetID>
		if(modID < 0)
 8006e56:	2800      	cmp	r0, #0
 8006e58:	db30      	blt.n	8006ebc <groupCommand+0x120>
		result =AddModuleToGroup(modID,alias);
 8006e5a:	b2c0      	uxtb	r0, r0
 8006e5c:	a903      	add	r1, sp, #12
 8006e5e:	f7fd fb2f 	bl	80044c0 <AddModuleToGroup>
		if(result != BOS_OK)
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d146      	bne.n	8006ef4 <groupCommand+0x158>
		if(count > 2)
 8006e66:	2400      	movs	r4, #0
 8006e68:	5734      	ldrsb	r4, [r6, r4]
 8006e6a:	2c02      	cmp	r4, #2
 8006e6c:	ddd7      	ble.n	8006e1e <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006e6e:	9d00      	ldr	r5, [sp, #0]
 8006e70:	0028      	movs	r0, r5
 8006e72:	f7f9 f951 	bl	8000118 <strlen>
 8006e76:	46ac      	mov	ip, r5
 8006e78:	4460      	add	r0, ip
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	492c      	ldr	r1, [pc, #176]	; (8006f30 <groupCommand+0x194>)
 8006e7e:	f00c fcfc 	bl	801387a <memcpy>
 8006e82:	e7cc      	b.n	8006e1e <groupCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006e84:	aa03      	add	r2, sp, #12
 8006e86:	492b      	ldr	r1, [pc, #172]	; (8006f34 <groupCommand+0x198>)
 8006e88:	9800      	ldr	r0, [sp, #0]
 8006e8a:	f00d fa8d 	bl	80143a8 <siprintf>
 8006e8e:	e01a      	b.n	8006ec6 <groupCommand+0x12a>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006e90:	aa03      	add	r2, sp, #12
 8006e92:	4929      	ldr	r1, [pc, #164]	; (8006f38 <groupCommand+0x19c>)
 8006e94:	a806      	add	r0, sp, #24
 8006e96:	f00d fa87 	bl	80143a8 <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8006e9a:	a906      	add	r1, sp, #24
 8006e9c:	9800      	ldr	r0, [sp, #0]
 8006e9e:	f00d faa3 	bl	80143e8 <strcat>
 8006ea2:	e010      	b.n	8006ec6 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006ea4:	aa03      	add	r2, sp, #12
 8006ea6:	4925      	ldr	r1, [pc, #148]	; (8006f3c <groupCommand+0x1a0>)
 8006ea8:	9800      	ldr	r0, [sp, #0]
 8006eaa:	f00d fa7d 	bl	80143a8 <siprintf>
 8006eae:	e00a      	b.n	8006ec6 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006eb0:	aa03      	add	r2, sp, #12
 8006eb2:	4923      	ldr	r1, [pc, #140]	; (8006f40 <groupCommand+0x1a4>)
 8006eb4:	9800      	ldr	r0, [sp, #0]
 8006eb6:	f00d fa77 	bl	80143a8 <siprintf>
 8006eba:	e004      	b.n	8006ec6 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006ebc:	aa06      	add	r2, sp, #24
 8006ebe:	4921      	ldr	r1, [pc, #132]	; (8006f44 <groupCommand+0x1a8>)
 8006ec0:	9800      	ldr	r0, [sp, #0]
 8006ec2:	f00d fa71 	bl	80143a8 <siprintf>
}
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	b010      	add	sp, #64	; 0x40
 8006eca:	bc04      	pop	{r2}
 8006ecc:	4691      	mov	r9, r2
 8006ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006ed0:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <groupCommand+0x184>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d0d4      	beq.n	8006e84 <groupCommand+0xe8>
	else if(result == BOS_OK && type){
 8006eda:	464b      	mov	r3, r9
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1d7      	bne.n	8006e90 <groupCommand+0xf4>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006ee0:	aa03      	add	r2, sp, #12
 8006ee2:	4919      	ldr	r1, [pc, #100]	; (8006f48 <groupCommand+0x1ac>)
 8006ee4:	a806      	add	r0, sp, #24
 8006ee6:	f00d fa5f 	bl	80143a8 <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8006eea:	a906      	add	r1, sp, #24
 8006eec:	9800      	ldr	r0, [sp, #0]
 8006eee:	f00d fa7b 	bl	80143e8 <strcat>
 8006ef2:	e7e8      	b.n	8006ec6 <groupCommand+0x12a>
	else if(count == 2)
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <groupCommand+0x184>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	b25b      	sxtb	r3, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d0c2      	beq.n	8006e84 <groupCommand+0xe8>
	else if(result == BOS_ERR_Keyword)
 8006efe:	2806      	cmp	r0, #6
 8006f00:	d0d0      	beq.n	8006ea4 <groupCommand+0x108>
	else if(result == BOS_ERR_ExistingAlias)
 8006f02:	2807      	cmp	r0, #7
 8006f04:	d0d4      	beq.n	8006eb0 <groupCommand+0x114>
	else if(result == BOS_ERR_ExistingCmd)
 8006f06:	2808      	cmp	r0, #8
 8006f08:	d1dd      	bne.n	8006ec6 <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006f0a:	aa03      	add	r2, sp, #12
 8006f0c:	490f      	ldr	r1, [pc, #60]	; (8006f4c <groupCommand+0x1b0>)
 8006f0e:	9800      	ldr	r0, [sp, #0]
 8006f10:	f00d fa4a 	bl	80143a8 <siprintf>
 8006f14:	e7d7      	b.n	8006ec6 <groupCommand+0x12a>
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	20000a34 	.word	0x20000a34
 8006f1c:	200005f0 	.word	0x200005f0
 8006f20:	200009fa 	.word	0x200009fa
 8006f24:	080184e4 	.word	0x080184e4
 8006f28:	20000a28 	.word	0x20000a28
 8006f2c:	200009fc 	.word	0x200009fc
 8006f30:	080184f0 	.word	0x080184f0
 8006f34:	080184f4 	.word	0x080184f4
 8006f38:	08018520 	.word	0x08018520
 8006f3c:	0801855c 	.word	0x0801855c
 8006f40:	0801859c 	.word	0x0801859c
 8006f44:	08018610 	.word	0x08018610
 8006f48:	0801853c 	.word	0x0801853c
 8006f4c:	080185d0 	.word	0x080185d0

08006f50 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	0004      	movs	r4, r0
 8006f54:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f56:	4d1c      	ldr	r5, [pc, #112]	; (8006fc8 <nameCommand+0x78>)
 8006f58:	002a      	movs	r2, r5
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	f007 fbe4 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8006f60:	0001      	movs	r1, r0
 8006f62:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <nameCommand+0x7c>)
 8006f64:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006f66:	682b      	ldr	r3, [r5, #0]
 8006f68:	2b09      	cmp	r3, #9
 8006f6a:	dd01      	ble.n	8006f70 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006f70:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <nameCommand+0x80>)
 8006f72:	7818      	ldrb	r0, [r3, #0]
 8006f74:	f7fd fa3c 	bl	80043f0 <NameModule>
	if(result == BOS_OK)
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d007      	beq.n	8006f8c <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006f7c:	2806      	cmp	r0, #6
 8006f7e:	d00e      	beq.n	8006f9e <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 8006f80:	2807      	cmp	r0, #7
 8006f82:	d013      	beq.n	8006fac <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8006f84:	2808      	cmp	r0, #8
 8006f86:	d018      	beq.n	8006fba <nameCommand+0x6a>
}
 8006f88:	2000      	movs	r0, #0
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <nameCommand+0x7c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <nameCommand+0x80>)
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	490f      	ldr	r1, [pc, #60]	; (8006fd4 <nameCommand+0x84>)
 8006f96:	0020      	movs	r0, r4
 8006f98:	f00d fa06 	bl	80143a8 <siprintf>
 8006f9c:	e7f4      	b.n	8006f88 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006f9e:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <nameCommand+0x7c>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	490d      	ldr	r1, [pc, #52]	; (8006fd8 <nameCommand+0x88>)
 8006fa4:	0020      	movs	r0, r4
 8006fa6:	f00d f9ff 	bl	80143a8 <siprintf>
 8006faa:	e7ed      	b.n	8006f88 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006fac:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <nameCommand+0x7c>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	490a      	ldr	r1, [pc, #40]	; (8006fdc <nameCommand+0x8c>)
 8006fb2:	0020      	movs	r0, r4
 8006fb4:	f00d f9f8 	bl	80143a8 <siprintf>
 8006fb8:	e7e6      	b.n	8006f88 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <nameCommand+0x7c>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4908      	ldr	r1, [pc, #32]	; (8006fe0 <nameCommand+0x90>)
 8006fc0:	0020      	movs	r0, r4
 8006fc2:	f00d f9f1 	bl	80143a8 <siprintf>
 8006fc6:	e7df      	b.n	8006f88 <nameCommand+0x38>
 8006fc8:	20000a30 	.word	0x20000a30
 8006fcc:	20000a00 	.word	0x20000a00
 8006fd0:	20000806 	.word	0x20000806
 8006fd4:	0801875c 	.word	0x0801875c
 8006fd8:	0801855c 	.word	0x0801855c
 8006fdc:	0801859c 	.word	0x0801859c
 8006fe0:	080185d0 	.word	0x080185d0

08006fe4 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	9003      	str	r0, [sp, #12]
 8006fea:	0014      	movs	r4, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006fec:	4a4a      	ldr	r2, [pc, #296]	; (8007118 <bootloaderUpdateCommand+0x134>)
 8006fee:	2101      	movs	r1, #1
 8006ff0:	0020      	movs	r0, r4
 8006ff2:	f007 fb99 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d044      	beq.n	8007084 <bootloaderUpdateCommand+0xa0>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006ffa:	4b47      	ldr	r3, [pc, #284]	; (8007118 <bootloaderUpdateCommand+0x134>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	4947      	ldr	r1, [pc, #284]	; (800711c <bootloaderUpdateCommand+0x138>)
 8007000:	f00d fa16 	bl	8014430 <strncmp>
 8007004:	2800      	cmp	r0, #0
 8007006:	d135      	bne.n	8007074 <bootloaderUpdateCommand+0x90>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8007008:	4a45      	ldr	r2, [pc, #276]	; (8007120 <bootloaderUpdateCommand+0x13c>)
 800700a:	2102      	movs	r1, #2
 800700c:	0020      	movs	r0, r4
 800700e:	f007 fb8b 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8007012:	4d44      	ldr	r5, [pc, #272]	; (8007124 <bootloaderUpdateCommand+0x140>)
 8007014:	6028      	str	r0, [r5, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8007016:	4a44      	ldr	r2, [pc, #272]	; (8007128 <bootloaderUpdateCommand+0x144>)
 8007018:	2103      	movs	r1, #3
 800701a:	0020      	movs	r0, r4
 800701c:	f007 fb84 	bl	800e728 <FreeRTOS_CLIGetParameter>
 8007020:	4b42      	ldr	r3, [pc, #264]	; (800712c <bootloaderUpdateCommand+0x148>)
 8007022:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8007024:	6828      	ldr	r0, [r5, #0]
 8007026:	2300      	movs	r3, #0
 8007028:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 800702a:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 800702c:	2b23      	cmp	r3, #35	; 0x23
 800702e:	d054      	beq.n	80070da <bootloaderUpdateCommand+0xf6>
			if(pcParameterString3[0] == 'p'){
 8007030:	4b3e      	ldr	r3, [pc, #248]	; (800712c <bootloaderUpdateCommand+0x148>)
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	56c3      	ldrsb	r3, [r0, r3]
 8007038:	2b70      	cmp	r3, #112	; 0x70
 800703a:	d054      	beq.n	80070e6 <bootloaderUpdateCommand+0x102>
				result =BOS_ERR_WrongValue;
 800703c:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 800703e:	4b3c      	ldr	r3, [pc, #240]	; (8007130 <bootloaderUpdateCommand+0x14c>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	42bb      	cmp	r3, r7
 8007044:	d054      	beq.n	80070f0 <bootloaderUpdateCommand+0x10c>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8007046:	4b3b      	ldr	r3, [pc, #236]	; (8007134 <bootloaderUpdateCommand+0x150>)
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 800704c:	4b3a      	ldr	r3, [pc, #232]	; (8007138 <bootloaderUpdateCommand+0x154>)
 800704e:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8007050:	3201      	adds	r2, #1
 8007052:	211a      	movs	r1, #26
 8007054:	0038      	movs	r0, r7
 8007056:	f001 f8af 	bl	80081b8 <SendMessageToModule>
				osDelay(100);
 800705a:	2064      	movs	r0, #100	; 0x64
 800705c:	f007 fa4f 	bl	800e4fe <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8007060:	4b36      	ldr	r3, [pc, #216]	; (800713c <bootloaderUpdateCommand+0x158>)
 8007062:	781a      	ldrb	r2, [r3, #0]
 8007064:	4b32      	ldr	r3, [pc, #200]	; (8007130 <bootloaderUpdateCommand+0x14c>)
 8007066:	7818      	ldrb	r0, [r3, #0]
 8007068:	0033      	movs	r3, r6
 800706a:	0039      	movs	r1, r7
 800706c:	f003 f98a 	bl	800a384 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007070:	2c68      	cmp	r4, #104	; 0x68
 8007072:	d104      	bne.n	800707e <bootloaderUpdateCommand+0x9a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8007074:	220f      	movs	r2, #15
 8007076:	4932      	ldr	r1, [pc, #200]	; (8007140 <bootloaderUpdateCommand+0x15c>)
 8007078:	9803      	ldr	r0, [sp, #12]
 800707a:	f00c fbfe 	bl	801387a <memcpy>
}
 800707e:	2000      	movs	r0, #0
 8007080:	b005      	add	sp, #20
 8007082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8007084:	4b2a      	ldr	r3, [pc, #168]	; (8007130 <bootloaderUpdateCommand+0x14c>)
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	492e      	ldr	r1, [pc, #184]	; (8007144 <bootloaderUpdateCommand+0x160>)
 800708a:	9c03      	ldr	r4, [sp, #12]
 800708c:	0020      	movs	r0, r4
 800708e:	f00d f98b 	bl	80143a8 <siprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <bootloaderUpdateCommand+0x164>)
 8007094:	6819      	ldr	r1, [r3, #0]
 8007096:	0020      	movs	r0, r4
 8007098:	f00d f9a6 	bl	80143e8 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800709c:	0020      	movs	r0, r4
 800709e:	f7f9 f83b 	bl	8000118 <strlen>
 80070a2:	b282      	uxth	r2, r0
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <bootloaderUpdateCommand+0x158>)
 80070a6:	7818      	ldrb	r0, [r3, #0]
 80070a8:	2301      	movs	r3, #1
 80070aa:	425b      	negs	r3, r3
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	3333      	adds	r3, #51	; 0x33
 80070b0:	0021      	movs	r1, r4
 80070b2:	f007 f879 	bl	800e1a8 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 80070b6:	4b25      	ldr	r3, [pc, #148]	; (800714c <bootloaderUpdateCommand+0x168>)
 80070b8:	4a25      	ldr	r2, [pc, #148]	; (8007150 <bootloaderUpdateCommand+0x16c>)
 80070ba:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <bootloaderUpdateCommand+0x170>)
 80070be:	2201      	movs	r2, #1
 80070c0:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80070c2:	200a      	movs	r0, #10
 80070c4:	f007 fa1b 	bl	800e4fe <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	4b22      	ldr	r3, [pc, #136]	; (8007158 <bootloaderUpdateCommand+0x174>)
 80070ce:	4a23      	ldr	r2, [pc, #140]	; (800715c <bootloaderUpdateCommand+0x178>)
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	e7fd      	b.n	80070d6 <bootloaderUpdateCommand+0xf2>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 80070da:	3001      	adds	r0, #1
 80070dc:	f00c fb5b 	bl	8013796 <atol>
 80070e0:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 80070e2:	2400      	movs	r4, #0
 80070e4:	e7a4      	b.n	8007030 <bootloaderUpdateCommand+0x4c>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 80070e6:	3001      	adds	r0, #1
 80070e8:	f00c fb55 	bl	8013796 <atol>
 80070ec:	b2c6      	uxtb	r6, r0
 80070ee:	e7a6      	b.n	800703e <bootloaderUpdateCommand+0x5a>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 80070f0:	2300      	movs	r3, #0
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	3319      	adds	r3, #25
 80070f6:	2200      	movs	r2, #0
 80070f8:	2100      	movs	r1, #0
 80070fa:	0030      	movs	r0, r6
 80070fc:	f000 fdd6 	bl	8007cac <SendMessageFromPort>
				osDelay(100);
 8007100:	2064      	movs	r0, #100	; 0x64
 8007102:	f007 f9fc 	bl	800e4fe <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8007106:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <bootloaderUpdateCommand+0x14c>)
 8007108:	7818      	ldrb	r0, [r3, #0]
 800710a:	4b0c      	ldr	r3, [pc, #48]	; (800713c <bootloaderUpdateCommand+0x158>)
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	0033      	movs	r3, r6
 8007110:	0001      	movs	r1, r0
 8007112:	f003 f937 	bl	800a384 <remoteBootloaderUpdate>
 8007116:	e7ab      	b.n	8007070 <bootloaderUpdateCommand+0x8c>
 8007118:	20000a2c 	.word	0x20000a2c
 800711c:	0801821c 	.word	0x0801821c
 8007120:	20000a38 	.word	0x20000a38
 8007124:	20000a10 	.word	0x20000a10
 8007128:	20000a3c 	.word	0x20000a3c
 800712c:	20000a18 	.word	0x20000a18
 8007130:	20000806 	.word	0x20000806
 8007134:	200061f0 	.word	0x200061f0
 8007138:	200006c8 	.word	0x200006c8
 800713c:	200002b0 	.word	0x200002b0
 8007140:	080182dc 	.word	0x080182dc
 8007144:	080181fc 	.word	0x080181fc
 8007148:	20000068 	.word	0x20000068
 800714c:	20007ff0 	.word	0x20007ff0
 8007150:	deadbeef 	.word	0xdeadbeef
 8007154:	20000688 	.word	0x20000688
 8007158:	e000ed00 	.word	0xe000ed00
 800715c:	05fa0004 	.word	0x05fa0004

08007160 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007160:	b570      	push	{r4, r5, r6, lr}
	if(!moduleAlias[myID][0])
 8007162:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <pingCommand+0x54>)
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	0093      	lsls	r3, r2, #2
 8007168:	189b      	adds	r3, r3, r2
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	4912      	ldr	r1, [pc, #72]	; (80071b8 <pingCommand+0x58>)
 800716e:	5c5b      	ldrb	r3, [r3, r1]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01a      	beq.n	80071aa <pingCommand+0x4a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007174:	0093      	lsls	r3, r2, #2
 8007176:	189b      	adds	r3, r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	490f      	ldr	r1, [pc, #60]	; (80071b8 <pingCommand+0x58>)
 800717c:	185b      	adds	r3, r3, r1
 800717e:	490f      	ldr	r1, [pc, #60]	; (80071bc <pingCommand+0x5c>)
 8007180:	f00d f912 	bl	80143a8 <siprintf>
	RTOS_IND_blink(200);
 8007184:	2580      	movs	r5, #128	; 0x80
 8007186:	012d      	lsls	r5, r5, #4
 8007188:	2490      	movs	r4, #144	; 0x90
 800718a:	05e4      	lsls	r4, r4, #23
 800718c:	2201      	movs	r2, #1
 800718e:	0029      	movs	r1, r5
 8007190:	0020      	movs	r0, r4
 8007192:	f00a fd65 	bl	8011c60 <HAL_GPIO_WritePin>
 8007196:	20c8      	movs	r0, #200	; 0xc8
 8007198:	f007 f9b1 	bl	800e4fe <osDelay>
 800719c:	2200      	movs	r2, #0
 800719e:	0029      	movs	r1, r5
 80071a0:	0020      	movs	r0, r4
 80071a2:	f00a fd5d 	bl	8011c60 <HAL_GPIO_WritePin>
}
 80071a6:	2000      	movs	r0, #0
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 80071aa:	4905      	ldr	r1, [pc, #20]	; (80071c0 <pingCommand+0x60>)
 80071ac:	f00d f8fc 	bl	80143a8 <siprintf>
 80071b0:	e7e8      	b.n	8007184 <pingCommand+0x24>
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000806 	.word	0x20000806
 80071b8:	200006f8 	.word	0x200006f8
 80071bc:	080187e0 	.word	0x080187e0
 80071c0:	080187cc 	.word	0x080187cc

080071c4 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071c4:	b510      	push	{r4, lr}
 80071c6:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80071c8:	2241      	movs	r2, #65	; 0x41
 80071ca:	4904      	ldr	r1, [pc, #16]	; (80071dc <prvRunTimeStatsCommand+0x18>)
 80071cc:	f00c fb55 	bl	801387a <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80071d0:	0020      	movs	r0, r4
 80071d2:	3040      	adds	r0, #64	; 0x40
 80071d4:	f008 fc58 	bl	800fa88 <vTaskGetRunTimeStats>
}
 80071d8:	2000      	movs	r0, #0
 80071da:	bd10      	pop	{r4, pc}
 80071dc:	0801880c 	.word	0x0801880c

080071e0 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80071e0:	b510      	push	{r4, lr}
 80071e2:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80071e4:	2250      	movs	r2, #80	; 0x50
 80071e6:	4904      	ldr	r1, [pc, #16]	; (80071f8 <prvTaskStatsCommand+0x18>)
 80071e8:	f00c fb47 	bl	801387a <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80071ec:	0020      	movs	r0, r4
 80071ee:	304f      	adds	r0, #79	; 0x4f
 80071f0:	f008 fbea 	bl	800f9c8 <vTaskList>
}
 80071f4:	2000      	movs	r0, #0
 80071f6:	bd10      	pop	{r4, pc}
 80071f8:	08018860 	.word	0x08018860

080071fc <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	4b03      	ldr	r3, [pc, #12]	; (8007210 <resetCommand+0x14>)
 8007202:	4a04      	ldr	r2, [pc, #16]	; (8007214 <resetCommand+0x18>)
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	e7fd      	b.n	800720a <resetCommand+0xe>
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	e000ed00 	.word	0xe000ed00
 8007214:	05fa0004 	.word	0x05fa0004

08007218 <RegisterUserCLICommands>:
}
 8007218:	4770      	bx	lr
	...

0800721c <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 800721c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 800721e:	4835      	ldr	r0, [pc, #212]	; (80072f4 <vRegisterCLICommands+0xd8>)
 8007220:	f007 f9e8 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007224:	4834      	ldr	r0, [pc, #208]	; (80072f8 <vRegisterCLICommands+0xdc>)
 8007226:	f007 f9e5 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800722a:	4834      	ldr	r0, [pc, #208]	; (80072fc <vRegisterCLICommands+0xe0>)
 800722c:	f007 f9e2 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007230:	4833      	ldr	r0, [pc, #204]	; (8007300 <vRegisterCLICommands+0xe4>)
 8007232:	f007 f9df 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 8007236:	4833      	ldr	r0, [pc, #204]	; (8007304 <vRegisterCLICommands+0xe8>)
 8007238:	f007 f9dc 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 800723c:	4832      	ldr	r0, [pc, #200]	; (8007308 <vRegisterCLICommands+0xec>)
 800723e:	f007 f9d9 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007242:	4832      	ldr	r0, [pc, #200]	; (800730c <vRegisterCLICommands+0xf0>)
 8007244:	f007 f9d6 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8007248:	4831      	ldr	r0, [pc, #196]	; (8007310 <vRegisterCLICommands+0xf4>)
 800724a:	f007 f9d3 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 800724e:	4831      	ldr	r0, [pc, #196]	; (8007314 <vRegisterCLICommands+0xf8>)
 8007250:	f007 f9d0 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007254:	4830      	ldr	r0, [pc, #192]	; (8007318 <vRegisterCLICommands+0xfc>)
 8007256:	f007 f9cd 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800725a:	4830      	ldr	r0, [pc, #192]	; (800731c <vRegisterCLICommands+0x100>)
 800725c:	f007 f9ca 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007260:	482f      	ldr	r0, [pc, #188]	; (8007320 <vRegisterCLICommands+0x104>)
 8007262:	f007 f9c7 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007266:	482f      	ldr	r0, [pc, #188]	; (8007324 <vRegisterCLICommands+0x108>)
 8007268:	f007 f9c4 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800726c:	482e      	ldr	r0, [pc, #184]	; (8007328 <vRegisterCLICommands+0x10c>)
 800726e:	f007 f9c1 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007272:	482e      	ldr	r0, [pc, #184]	; (800732c <vRegisterCLICommands+0x110>)
 8007274:	f007 f9be 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007278:	482d      	ldr	r0, [pc, #180]	; (8007330 <vRegisterCLICommands+0x114>)
 800727a:	f007 f9bb 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800727e:	482d      	ldr	r0, [pc, #180]	; (8007334 <vRegisterCLICommands+0x118>)
 8007280:	f007 f9b8 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007284:	482c      	ldr	r0, [pc, #176]	; (8007338 <vRegisterCLICommands+0x11c>)
 8007286:	f007 f9b5 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800728a:	482c      	ldr	r0, [pc, #176]	; (800733c <vRegisterCLICommands+0x120>)
 800728c:	f007 f9b2 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007290:	482b      	ldr	r0, [pc, #172]	; (8007340 <vRegisterCLICommands+0x124>)
 8007292:	f007 f9af 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007296:	482b      	ldr	r0, [pc, #172]	; (8007344 <vRegisterCLICommands+0x128>)
 8007298:	f007 f9ac 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800729c:	482a      	ldr	r0, [pc, #168]	; (8007348 <vRegisterCLICommands+0x12c>)
 800729e:	f007 f9a9 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 80072a2:	482a      	ldr	r0, [pc, #168]	; (800734c <vRegisterCLICommands+0x130>)
 80072a4:	f007 f9a6 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 80072a8:	4829      	ldr	r0, [pc, #164]	; (8007350 <vRegisterCLICommands+0x134>)
 80072aa:	f007 f9a3 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80072ae:	4829      	ldr	r0, [pc, #164]	; (8007354 <vRegisterCLICommands+0x138>)
 80072b0:	f007 f9a0 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80072b4:	4828      	ldr	r0, [pc, #160]	; (8007358 <vRegisterCLICommands+0x13c>)
 80072b6:	f007 f99d 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80072ba:	4828      	ldr	r0, [pc, #160]	; (800735c <vRegisterCLICommands+0x140>)
 80072bc:	f007 f99a 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80072c0:	4827      	ldr	r0, [pc, #156]	; (8007360 <vRegisterCLICommands+0x144>)
 80072c2:	f007 f997 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80072c6:	4827      	ldr	r0, [pc, #156]	; (8007364 <vRegisterCLICommands+0x148>)
 80072c8:	f007 f994 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80072cc:	4826      	ldr	r0, [pc, #152]	; (8007368 <vRegisterCLICommands+0x14c>)
 80072ce:	f007 f991 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80072d2:	4826      	ldr	r0, [pc, #152]	; (800736c <vRegisterCLICommands+0x150>)
 80072d4:	f007 f98e 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80072d8:	4825      	ldr	r0, [pc, #148]	; (8007370 <vRegisterCLICommands+0x154>)
 80072da:	f007 f98b 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80072de:	4825      	ldr	r0, [pc, #148]	; (8007374 <vRegisterCLICommands+0x158>)
 80072e0:	f007 f988 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <vRegisterCLICommands+0x15c>)
 80072e6:	2223      	movs	r2, #35	; 0x23
 80072e8:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80072ea:	f003 f8d5 	bl	800a498 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80072ee:	f7ff ff93 	bl	8007218 <RegisterUserCLICommands>
}
 80072f2:	bd10      	pop	{r4, pc}
 80072f4:	080188b0 	.word	0x080188b0
 80072f8:	08018850 	.word	0x08018850
 80072fc:	080187fc 	.word	0x080187fc
 8007300:	08018220 	.word	0x08018220
 8007304:	080183a8 	.word	0x080183a8
 8007308:	080188f8 	.word	0x080188f8
 800730c:	08018774 	.word	0x08018774
 8007310:	08018634 	.word	0x08018634
 8007314:	08018da8 	.word	0x08018da8
 8007318:	08018738 	.word	0x08018738
 800731c:	080189b4 	.word	0x080189b4
 8007320:	080181ec 	.word	0x080181ec
 8007324:	080188e8 	.word	0x080188e8
 8007328:	08018c08 	.word	0x08018c08
 800732c:	080184d4 	.word	0x080184d4
 8007330:	0801832c 	.word	0x0801832c
 8007334:	08019b50 	.word	0x08019b50
 8007338:	08018294 	.word	0x08018294
 800733c:	08018a00 	.word	0x08018a00
 8007340:	08019bc4 	.word	0x08019bc4
 8007344:	080186b4 	.word	0x080186b4
 8007348:	080183d8 	.word	0x080183d8
 800734c:	08018d98 	.word	0x08018d98
 8007350:	08018170 	.word	0x08018170
 8007354:	080187bc 	.word	0x080187bc
 8007358:	08018398 	.word	0x08018398
 800735c:	0801826c 	.word	0x0801826c
 8007360:	08019b9c 	.word	0x08019b9c
 8007364:	08019ae4 	.word	0x08019ae4
 8007368:	08018070 	.word	0x08018070
 800736c:	080180f0 	.word	0x080180f0
 8007370:	08018128 	.word	0x08018128
 8007374:	08018080 	.word	0x08018080
 8007378:	200061ec 	.word	0x200061ec

0800737c <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	0005      	movs	r5, r0
 8007380:	000e      	movs	r6, r1
 8007382:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007384:	f003 f8a4 	bl	800a4d0 <GetPort>
 8007388:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800738a:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <StartDMAstream+0x44>)
 800738c:	5c1b      	ldrb	r3, [r3, r0]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d902      	bls.n	8007398 <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007392:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007394:	2b03      	cmp	r3, #3
 8007396:	d112      	bne.n	80073be <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 8007398:	0020      	movs	r0, r4
 800739a:	f003 fe93 	bl	800b0c4 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 800739e:	1e63      	subs	r3, r4, #1
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <StartDMAstream+0x48>)
 80073a4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80073a6:	4a06      	ldr	r2, [pc, #24]	; (80073c0 <StartDMAstream+0x44>)
 80073a8:	2102      	movs	r1, #2
 80073aa:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80073ac:	4a06      	ldr	r2, [pc, #24]	; (80073c8 <StartDMAstream+0x4c>)
 80073ae:	2100      	movs	r1, #0
 80073b0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80073b2:	003a      	movs	r2, r7
 80073b4:	0031      	movs	r1, r6
 80073b6:	0028      	movs	r0, r5
 80073b8:	f004 faf4 	bl	800b9a4 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80073bc:	2000      	movs	r0, #0
}
 80073be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073c0:	20000870 	.word	0x20000870
 80073c4:	20000ccc 	.word	0x20000ccc
 80073c8:	20000cc0 	.word	0x20000cc0

080073cc <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80073d0:	4b12      	ldr	r3, [pc, #72]	; (800741c <DMA_IRQHandler+0x50>)
 80073d2:	5c1b      	ldrb	r3, [r3, r0]
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d008      	beq.n	80073ea <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80073d8:	3c01      	subs	r4, #1
 80073da:	00e0      	lsls	r0, r4, #3
 80073dc:	1b00      	subs	r0, r0, r4
 80073de:	00c0      	lsls	r0, r0, #3
 80073e0:	4c0f      	ldr	r4, [pc, #60]	; (8007420 <DMA_IRQHandler+0x54>)
 80073e2:	1900      	adds	r0, r0, r4
 80073e4:	f009 fd24 	bl	8010e30 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80073e8:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80073ea:	1e45      	subs	r5, r0, #1
 80073ec:	00e8      	lsls	r0, r5, #3
 80073ee:	1b40      	subs	r0, r0, r5
 80073f0:	00c0      	lsls	r0, r0, #3
 80073f2:	4b0c      	ldr	r3, [pc, #48]	; (8007424 <DMA_IRQHandler+0x58>)
 80073f4:	18c0      	adds	r0, r0, r3
 80073f6:	f009 fd1b 	bl	8010e30 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80073fa:	00aa      	lsls	r2, r5, #2
 80073fc:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <DMA_IRQHandler+0x5c>)
 80073fe:	58d2      	ldr	r2, [r2, r3]
 8007400:	2a00      	cmp	r2, #0
 8007402:	d006      	beq.n	8007412 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007404:	4909      	ldr	r1, [pc, #36]	; (800742c <DMA_IRQHandler+0x60>)
 8007406:	00ad      	lsls	r5, r5, #2
 8007408:	586b      	ldr	r3, [r5, r1]
 800740a:	3301      	adds	r3, #1
 800740c:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800740e:	429a      	cmp	r2, r3
 8007410:	d8ea      	bhi.n	80073e8 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007412:	0020      	movs	r0, r4
 8007414:	f003 fe2a 	bl	800b06c <StopStreamDMA>
}
 8007418:	e7e6      	b.n	80073e8 <DMA_IRQHandler+0x1c>
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	20000870 	.word	0x20000870
 8007420:	20000ff4 	.word	0x20000ff4
 8007424:	200011ec 	.word	0x200011ec
 8007428:	20000cd8 	.word	0x20000cd8
 800742c:	20000cc0 	.word	0x20000cc0

08007430 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007430:	4b08      	ldr	r3, [pc, #32]	; (8007454 <ResetUartORE+0x24>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	2308      	movs	r3, #8
 8007436:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007438:	4a07      	ldr	r2, [pc, #28]	; (8007458 <ResetUartORE+0x28>)
 800743a:	6812      	ldr	r2, [r2, #0]
 800743c:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800743e:	4a07      	ldr	r2, [pc, #28]	; (800745c <ResetUartORE+0x2c>)
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007444:	4a06      	ldr	r2, [pc, #24]	; (8007460 <ResetUartORE+0x30>)
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800744a:	4a06      	ldr	r2, [pc, #24]	; (8007464 <ResetUartORE+0x34>)
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	6213      	str	r3, [r2, #32]
#endif
}
 8007450:	4770      	bx	lr
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	2000640c 	.word	0x2000640c
 8007458:	2000657c 	.word	0x2000657c
 800745c:	2000635c 	.word	0x2000635c
 8007460:	20006508 	.word	0x20006508
 8007464:	20006490 	.word	0x20006490

08007468 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800746a:	b08b      	sub	sp, #44	; 0x2c
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 800746c:	25a0      	movs	r5, #160	; 0xa0
 800746e:	006d      	lsls	r5, r5, #1
 8007470:	2400      	movs	r4, #0
 8007472:	9403      	str	r4, [sp, #12]
 8007474:	9402      	str	r4, [sp, #8]
 8007476:	4b3c      	ldr	r3, [pc, #240]	; (8007568 <MX_FREERTOS_Init+0x100>)
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	2603      	movs	r6, #3
 800747c:	9600      	str	r6, [sp, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	002a      	movs	r2, r5
 8007482:	493a      	ldr	r1, [pc, #232]	; (800756c <MX_FREERTOS_Init+0x104>)
 8007484:	483a      	ldr	r0, [pc, #232]	; (8007570 <MX_FREERTOS_Init+0x108>)
 8007486:	f007 fdbd 	bl	800f004 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 800748a:	9403      	str	r4, [sp, #12]
 800748c:	9402      	str	r4, [sp, #8]
 800748e:	4b39      	ldr	r3, [pc, #228]	; (8007574 <MX_FREERTOS_Init+0x10c>)
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	9600      	str	r6, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	002a      	movs	r2, r5
 8007498:	4937      	ldr	r1, [pc, #220]	; (8007578 <MX_FREERTOS_Init+0x110>)
 800749a:	4838      	ldr	r0, [pc, #224]	; (800757c <MX_FREERTOS_Init+0x114>)
 800749c:	f007 fdb2 	bl	800f004 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80074a0:	9403      	str	r4, [sp, #12]
 80074a2:	9402      	str	r4, [sp, #8]
 80074a4:	4b36      	ldr	r3, [pc, #216]	; (8007580 <MX_FREERTOS_Init+0x118>)
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	9600      	str	r6, [sp, #0]
 80074aa:	2300      	movs	r3, #0
 80074ac:	002a      	movs	r2, r5
 80074ae:	4935      	ldr	r1, [pc, #212]	; (8007584 <MX_FREERTOS_Init+0x11c>)
 80074b0:	4835      	ldr	r0, [pc, #212]	; (8007588 <MX_FREERTOS_Init+0x120>)
 80074b2:	f007 fda7 	bl	800f004 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 80074b6:	f7ff feb1 	bl	800721c <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80074ba:	9403      	str	r4, [sp, #12]
 80074bc:	9402      	str	r4, [sp, #8]
 80074be:	4b33      	ldr	r3, [pc, #204]	; (800758c <MX_FREERTOS_Init+0x124>)
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	9600      	str	r6, [sp, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	002a      	movs	r2, r5
 80074c8:	4931      	ldr	r1, [pc, #196]	; (8007590 <MX_FREERTOS_Init+0x128>)
 80074ca:	4832      	ldr	r0, [pc, #200]	; (8007594 <MX_FREERTOS_Init+0x12c>)
 80074cc:	f007 fd9a 	bl	800f004 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80074d0:	4e31      	ldr	r6, [pc, #196]	; (8007598 <MX_FREERTOS_Init+0x130>)
 80074d2:	9403      	str	r4, [sp, #12]
 80074d4:	9402      	str	r4, [sp, #8]
 80074d6:	4b31      	ldr	r3, [pc, #196]	; (800759c <MX_FREERTOS_Init+0x134>)
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	2704      	movs	r7, #4
 80074dc:	9700      	str	r7, [sp, #0]
 80074de:	2301      	movs	r3, #1
 80074e0:	002a      	movs	r2, r5
 80074e2:	492f      	ldr	r1, [pc, #188]	; (80075a0 <MX_FREERTOS_Init+0x138>)
 80074e4:	0030      	movs	r0, r6
 80074e6:	f007 fd8d 	bl	800f004 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80074ea:	9403      	str	r4, [sp, #12]
 80074ec:	9402      	str	r4, [sp, #8]
 80074ee:	4b2d      	ldr	r3, [pc, #180]	; (80075a4 <MX_FREERTOS_Init+0x13c>)
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	9700      	str	r7, [sp, #0]
 80074f4:	2302      	movs	r3, #2
 80074f6:	002a      	movs	r2, r5
 80074f8:	492b      	ldr	r1, [pc, #172]	; (80075a8 <MX_FREERTOS_Init+0x140>)
 80074fa:	0030      	movs	r0, r6
 80074fc:	f007 fd82 	bl	800f004 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007500:	9403      	str	r4, [sp, #12]
 8007502:	9402      	str	r4, [sp, #8]
 8007504:	4b29      	ldr	r3, [pc, #164]	; (80075ac <MX_FREERTOS_Init+0x144>)
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	9700      	str	r7, [sp, #0]
 800750a:	2303      	movs	r3, #3
 800750c:	002a      	movs	r2, r5
 800750e:	4928      	ldr	r1, [pc, #160]	; (80075b0 <MX_FREERTOS_Init+0x148>)
 8007510:	0030      	movs	r0, r6
 8007512:	f007 fd77 	bl	800f004 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007516:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007518:	2101      	movs	r1, #1
 800751a:	a809      	add	r0, sp, #36	; 0x24
 800751c:	f006 fff7 	bl	800e50e <osSemaphoreCreate>
 8007520:	4e24      	ldr	r6, [pc, #144]	; (80075b4 <MX_FREERTOS_Init+0x14c>)
 8007522:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007524:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007526:	2101      	movs	r1, #1
 8007528:	a808      	add	r0, sp, #32
 800752a:	f006 fff0 	bl	800e50e <osSemaphoreCreate>
 800752e:	4d22      	ldr	r5, [pc, #136]	; (80075b8 <MX_FREERTOS_Init+0x150>)
 8007530:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007532:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007534:	2101      	movs	r1, #1
 8007536:	a807      	add	r0, sp, #28
 8007538:	f006 ffe9 	bl	800e50e <osSemaphoreCreate>
 800753c:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 800753e:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007540:	2101      	movs	r1, #1
 8007542:	a806      	add	r0, sp, #24
 8007544:	f006 ffe3 	bl	800e50e <osSemaphoreCreate>
 8007548:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 800754a:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800754c:	2101      	movs	r1, #1
 800754e:	a805      	add	r0, sp, #20
 8007550:	f006 ffdd 	bl	800e50e <osSemaphoreCreate>
 8007554:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007556:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007558:	2101      	movs	r1, #1
 800755a:	a804      	add	r0, sp, #16
 800755c:	f006 ffd7 	bl	800e50e <osSemaphoreCreate>
 8007560:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 8007562:	b00b      	add	sp, #44	; 0x2c
 8007564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007566:	46c0      	nop			; (mov r8, r8)
 8007568:	20000d0c 	.word	0x20000d0c
 800756c:	08019bd4 	.word	0x08019bd4
 8007570:	0800795d 	.word	0x0800795d
 8007574:	20000ce4 	.word	0x20000ce4
 8007578:	08019be0 	.word	0x08019be0
 800757c:	080083a1 	.word	0x080083a1
 8007580:	20000d08 	.word	0x20000d08
 8007584:	08019bec 	.word	0x08019bec
 8007588:	0801377f 	.word	0x0801377f
 800758c:	20000de0 	.word	0x20000de0
 8007590:	08019bf8 	.word	0x08019bf8
 8007594:	08005059 	.word	0x08005059
 8007598:	080087ed 	.word	0x080087ed
 800759c:	20000ce8 	.word	0x20000ce8
 80075a0:	08019c00 	.word	0x08019c00
 80075a4:	20000cec 	.word	0x20000cec
 80075a8:	08019c0c 	.word	0x08019c0c
 80075ac:	20000cf0 	.word	0x20000cf0
 80075b0:	08019c18 	.word	0x08019c18
 80075b4:	20006314 	.word	0x20006314
 80075b8:	200062f4 	.word	0x200062f4

080075bc <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 80075bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075be:	46de      	mov	lr, fp
 80075c0:	4657      	mov	r7, sl
 80075c2:	464e      	mov	r6, r9
 80075c4:	4645      	mov	r5, r8
 80075c6:	b5e0      	push	{r5, r6, r7, lr}
 80075c8:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 80075ca:	4bd3      	ldr	r3, [pc, #844]	; (8007918 <ExecuteMonitor+0x35c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d000      	beq.n	80075d4 <ExecuteMonitor+0x18>
 80075d2:	e19a      	b.n	800790a <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 80075d4:	4bd0      	ldr	r3, [pc, #832]	; (8007918 <ExecuteMonitor+0x35c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
	flag=0;
 80075da:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 80075dc:	3220      	adds	r2, #32
 80075de:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80075e0:	4bce      	ldr	r3, [pc, #824]	; (800791c <ExecuteMonitor+0x360>)
 80075e2:	3301      	adds	r3, #1
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	4bce      	ldr	r3, [pc, #824]	; (8007920 <ExecuteMonitor+0x364>)
 80075e8:	3304      	adds	r3, #4
 80075ea:	9301      	str	r3, [sp, #4]
 80075ec:	e186      	b.n	80078fc <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 80075ee:	4bcd      	ldr	r3, [pc, #820]	; (8007924 <ExecuteMonitor+0x368>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	2220      	movs	r2, #32
 80075f4:	4393      	bics	r3, r2
 80075f6:	d018      	beq.n	800762a <ExecuteMonitor+0x6e>
 80075f8:	4bc7      	ldr	r3, [pc, #796]	; (8007918 <ExecuteMonitor+0x35c>)
 80075fa:	791b      	ldrb	r3, [r3, #4]
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	2a01      	cmp	r2, #1
 8007600:	d800      	bhi.n	8007604 <ExecuteMonitor+0x48>
 8007602:	e0b8      	b.n	8007776 <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 8007604:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 8007606:	2064      	movs	r0, #100	; 0x64
 8007608:	f006 fc7c 	bl	800df04 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 800760c:	7963      	ldrb	r3, [r4, #5]
 800760e:	783a      	ldrb	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d0ec      	beq.n	80075ee <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007614:	49c4      	ldr	r1, [pc, #784]	; (8007928 <ExecuteMonitor+0x36c>)
 8007616:	780a      	ldrb	r2, [r1, #0]
 8007618:	1c50      	adds	r0, r2, #1
 800761a:	7008      	strb	r0, [r1, #0]
 800761c:	49c0      	ldr	r1, [pc, #768]	; (8007920 <ExecuteMonitor+0x364>)
 800761e:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 8007620:	4ac0      	ldr	r2, [pc, #768]	; (8007924 <ExecuteMonitor+0x368>)
 8007622:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007624:	4bbc      	ldr	r3, [pc, #752]	; (8007918 <ExecuteMonitor+0x35c>)
 8007626:	715e      	strb	r6, [r3, #5]
 8007628:	e7e1      	b.n	80075ee <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 800762a:	4bbb      	ldr	r3, [pc, #748]	; (8007918 <ExecuteMonitor+0x35c>)
 800762c:	791b      	ldrb	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d000      	beq.n	8007634 <ExecuteMonitor+0x78>
 8007632:	e0a0      	b.n	8007776 <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 8007634:	4bbc      	ldr	r3, [pc, #752]	; (8007928 <ExecuteMonitor+0x36c>)
 8007636:	464a      	mov	r2, r9
 8007638:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 800763a:	4bb9      	ldr	r3, [pc, #740]	; (8007920 <ExecuteMonitor+0x364>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b5b      	cmp	r3, #91	; 0x5b
 8007640:	d020      	beq.n	8007684 <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 8007642:	2b23      	cmp	r3, #35	; 0x23
 8007644:	d063      	beq.n	800770e <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 8007646:	2b3d      	cmp	r3, #61	; 0x3d
 8007648:	d074      	beq.n	8007734 <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 800764a:	4cb4      	ldr	r4, [pc, #720]	; (800791c <ExecuteMonitor+0x360>)
 800764c:	7823      	ldrb	r3, [r4, #0]
 800764e:	4ab7      	ldr	r2, [pc, #732]	; (800792c <ExecuteMonitor+0x370>)
 8007650:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007652:	0118      	lsls	r0, r3, #4
 8007654:	1ac3      	subs	r3, r0, r3
 8007656:	48b6      	ldr	r0, [pc, #728]	; (8007930 <ExecuteMonitor+0x374>)
 8007658:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 800765a:	220f      	movs	r2, #15
 800765c:	0021      	movs	r1, r4
 800765e:	f00c f90c 	bl	801387a <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 8007662:	2214      	movs	r2, #20
 8007664:	4649      	mov	r1, r9
 8007666:	48ae      	ldr	r0, [pc, #696]	; (8007920 <ExecuteMonitor+0x364>)
 8007668:	f00c f910 	bl	801388c <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 800766c:	2214      	movs	r2, #20
 800766e:	4649      	mov	r1, r9
 8007670:	0020      	movs	r0, r4
 8007672:	f00c f90b 	bl	801388c <memset>
		                    nonProcessingParameterIndex=0;
 8007676:	465b      	mov	r3, fp
 8007678:	4652      	mov	r2, sl
 800767a:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 800767c:	2603      	movs	r6, #3
 800767e:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 8007680:	4ca5      	ldr	r4, [pc, #660]	; (8007918 <ExecuteMonitor+0x35c>)
 8007682:	e7bf      	b.n	8007604 <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 8007684:	4ba8      	ldr	r3, [pc, #672]	; (8007928 <ExecuteMonitor+0x36c>)
 8007686:	2201      	movs	r2, #1
 8007688:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 800768a:	4baa      	ldr	r3, [pc, #680]	; (8007934 <ExecuteMonitor+0x378>)
 800768c:	781c      	ldrb	r4, [r3, #0]
 800768e:	4ba4      	ldr	r3, [pc, #656]	; (8007920 <ExecuteMonitor+0x364>)
 8007690:	7858      	ldrb	r0, [r3, #1]
 8007692:	210a      	movs	r1, #10
 8007694:	f7f8 fdd8 	bl	8000248 <__aeabi_uidivmod>
 8007698:	b2c9      	uxtb	r1, r1
 800769a:	2603      	movs	r6, #3
 800769c:	42a1      	cmp	r1, r4
 800769e:	d00d      	beq.n	80076bc <ExecuteMonitor+0x100>
 80076a0:	4b9f      	ldr	r3, [pc, #636]	; (8007920 <ExecuteMonitor+0x364>)
 80076a2:	4698      	mov	r8, r3
 80076a4:	1cb5      	adds	r5, r6, #2
 80076a6:	b2ed      	uxtb	r5, r5
 80076a8:	4643      	mov	r3, r8
 80076aa:	5d98      	ldrb	r0, [r3, r6]
 80076ac:	210a      	movs	r1, #10
 80076ae:	f7f8 fdcb 	bl	8000248 <__aeabi_uidivmod>
 80076b2:	b2c9      	uxtb	r1, r1
 80076b4:	42a1      	cmp	r1, r4
 80076b6:	d002      	beq.n	80076be <ExecuteMonitor+0x102>
 80076b8:	002e      	movs	r6, r5
 80076ba:	e7f3      	b.n	80076a4 <ExecuteMonitor+0xe8>
 80076bc:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 80076be:	1c74      	adds	r4, r6, #1
 80076c0:	b2e4      	uxtb	r4, r4
 80076c2:	4b99      	ldr	r3, [pc, #612]	; (8007928 <ExecuteMonitor+0x36c>)
 80076c4:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80076c6:	4b96      	ldr	r3, [pc, #600]	; (8007920 <ExecuteMonitor+0x364>)
 80076c8:	5d1d      	ldrb	r5, [r3, r4]
 80076ca:	210a      	movs	r1, #10
 80076cc:	0028      	movs	r0, r5
 80076ce:	f7f8 fdbb 	bl	8000248 <__aeabi_uidivmod>
 80076d2:	4b92      	ldr	r3, [pc, #584]	; (800791c <ExecuteMonitor+0x360>)
 80076d4:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80076d6:	2d5d      	cmp	r5, #93	; 0x5d
 80076d8:	d009      	beq.n	80076ee <ExecuteMonitor+0x132>
 80076da:	3602      	adds	r6, #2
 80076dc:	b2f4      	uxtb	r4, r6
 80076de:	4990      	ldr	r1, [pc, #576]	; (8007920 <ExecuteMonitor+0x364>)
 80076e0:	e000      	b.n	80076e4 <ExecuteMonitor+0x128>
 80076e2:	001c      	movs	r4, r3
 80076e4:	1c63      	adds	r3, r4, #1
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	5d0a      	ldrb	r2, [r1, r4]
 80076ea:	2a5d      	cmp	r2, #93	; 0x5d
 80076ec:	d1f9      	bne.n	80076e2 <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 80076ee:	3401      	adds	r4, #1
 80076f0:	b2e1      	uxtb	r1, r4
 80076f2:	4b8d      	ldr	r3, [pc, #564]	; (8007928 <ExecuteMonitor+0x36c>)
 80076f4:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 80076f6:	4b90      	ldr	r3, [pc, #576]	; (8007938 <ExecuteMonitor+0x37c>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80076fc:	4887      	ldr	r0, [pc, #540]	; (800791c <ExecuteMonitor+0x360>)
 80076fe:	3213      	adds	r2, #19
 8007700:	1a52      	subs	r2, r2, r1
 8007702:	4c87      	ldr	r4, [pc, #540]	; (8007920 <ExecuteMonitor+0x364>)
 8007704:	1861      	adds	r1, r4, r1
 8007706:	3001      	adds	r0, #1
 8007708:	f00c f8b7 	bl	801387a <memcpy>
 800770c:	e79d      	b.n	800764a <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800770e:	4c83      	ldr	r4, [pc, #524]	; (800791c <ExecuteMonitor+0x360>)
 8007710:	4d83      	ldr	r5, [pc, #524]	; (8007920 <ExecuteMonitor+0x364>)
 8007712:	7868      	ldrb	r0, [r5, #1]
 8007714:	210a      	movs	r1, #10
 8007716:	f7f8 fd97 	bl	8000248 <__aeabi_uidivmod>
 800771a:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 800771c:	4b82      	ldr	r3, [pc, #520]	; (8007928 <ExecuteMonitor+0x36c>)
 800771e:	2202      	movs	r2, #2
 8007720:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 8007722:	4b85      	ldr	r3, [pc, #532]	; (8007938 <ExecuteMonitor+0x37c>)
 8007724:	3a01      	subs	r2, #1
 8007726:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007728:	1c60      	adds	r0, r4, #1
 800772a:	1ca9      	adds	r1, r5, #2
 800772c:	3211      	adds	r2, #17
 800772e:	f00c f8a4 	bl	801387a <memcpy>
 8007732:	e78a      	b.n	800764a <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 8007734:	4b7a      	ldr	r3, [pc, #488]	; (8007920 <ExecuteMonitor+0x364>)
 8007736:	7858      	ldrb	r0, [r3, #1]
 8007738:	210a      	movs	r1, #10
 800773a:	f7f8 fd85 	bl	8000248 <__aeabi_uidivmod>
 800773e:	4b7d      	ldr	r3, [pc, #500]	; (8007934 <ExecuteMonitor+0x378>)
 8007740:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 8007742:	4b77      	ldr	r3, [pc, #476]	; (8007920 <ExecuteMonitor+0x364>)
 8007744:	7898      	ldrb	r0, [r3, #2]
 8007746:	210a      	movs	r1, #10
 8007748:	f7f8 fd7e 	bl	8000248 <__aeabi_uidivmod>
 800774c:	4b7b      	ldr	r3, [pc, #492]	; (800793c <ExecuteMonitor+0x380>)
 800774e:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007750:	4b73      	ldr	r3, [pc, #460]	; (8007920 <ExecuteMonitor+0x364>)
 8007752:	78d8      	ldrb	r0, [r3, #3]
 8007754:	210a      	movs	r1, #10
 8007756:	f7f8 fd77 	bl	8000248 <__aeabi_uidivmod>
 800775a:	4b70      	ldr	r3, [pc, #448]	; (800791c <ExecuteMonitor+0x360>)
 800775c:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 800775e:	4b72      	ldr	r3, [pc, #456]	; (8007928 <ExecuteMonitor+0x36c>)
 8007760:	2204      	movs	r2, #4
 8007762:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 8007764:	4b74      	ldr	r3, [pc, #464]	; (8007938 <ExecuteMonitor+0x37c>)
 8007766:	3a03      	subs	r2, #3
 8007768:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800776a:	320f      	adds	r2, #15
 800776c:	9901      	ldr	r1, [sp, #4]
 800776e:	9800      	ldr	r0, [sp, #0]
 8007770:	f00c f883 	bl	801387a <memcpy>
 8007774:	e769      	b.n	800764a <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 8007776:	2b01      	cmp	r3, #1
 8007778:	d015      	beq.n	80077a6 <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 800777a:	4b67      	ldr	r3, [pc, #412]	; (8007918 <ExecuteMonitor+0x35c>)
 800777c:	791b      	ldrb	r3, [r3, #4]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d000      	beq.n	8007784 <ExecuteMonitor+0x1c8>
 8007782:	e778      	b.n	8007676 <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 8007784:	2300      	movs	r3, #0
 8007786:	4a6e      	ldr	r2, [pc, #440]	; (8007940 <ExecuteMonitor+0x384>)
 8007788:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 800778a:	4a6e      	ldr	r2, [pc, #440]	; (8007944 <ExecuteMonitor+0x388>)
 800778c:	2101      	movs	r1, #1
 800778e:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 8007790:	4a6d      	ldr	r2, [pc, #436]	; (8007948 <ExecuteMonitor+0x38c>)
 8007792:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 8007794:	4b69      	ldr	r3, [pc, #420]	; (800793c <ExecuteMonitor+0x380>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d100      	bne.n	800779e <ExecuteMonitor+0x1e2>
 800779c:	e07f      	b.n	800789e <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800779e:	0017      	movs	r7, r2
 80077a0:	4e68      	ldr	r6, [pc, #416]	; (8007944 <ExecuteMonitor+0x388>)
 80077a2:	4d67      	ldr	r5, [pc, #412]	; (8007940 <ExecuteMonitor+0x384>)
 80077a4:	e062      	b.n	800786c <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 80077a6:	4b66      	ldr	r3, [pc, #408]	; (8007940 <ExecuteMonitor+0x384>)
 80077a8:	464a      	mov	r2, r9
 80077aa:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 80077ac:	4b65      	ldr	r3, [pc, #404]	; (8007944 <ExecuteMonitor+0x388>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 80077b2:	4b65      	ldr	r3, [pc, #404]	; (8007948 <ExecuteMonitor+0x38c>)
 80077b4:	464a      	mov	r2, r9
 80077b6:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80077b8:	4b60      	ldr	r3, [pc, #384]	; (800793c <ExecuteMonitor+0x380>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d02a      	beq.n	8007816 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80077c0:	4b61      	ldr	r3, [pc, #388]	; (8007948 <ExecuteMonitor+0x38c>)
 80077c2:	4698      	mov	r8, r3
 80077c4:	4e5f      	ldr	r6, [pc, #380]	; (8007944 <ExecuteMonitor+0x388>)
 80077c6:	4d5e      	ldr	r5, [pc, #376]	; (8007940 <ExecuteMonitor+0x384>)
 80077c8:	e00b      	b.n	80077e2 <ExecuteMonitor+0x226>
		                   counter++;
 80077ca:	4a5f      	ldr	r2, [pc, #380]	; (8007948 <ExecuteMonitor+0x38c>)
 80077cc:	7813      	ldrb	r3, [r2, #0]
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80077d4:	4a5b      	ldr	r2, [pc, #364]	; (8007944 <ExecuteMonitor+0x388>)
 80077d6:	2101      	movs	r1, #1
 80077d8:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 80077da:	4a58      	ldr	r2, [pc, #352]	; (800793c <ExecuteMonitor+0x380>)
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d019      	beq.n	8007816 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80077e2:	4643      	mov	r3, r8
 80077e4:	781a      	ldrb	r2, [r3, #0]
 80077e6:	7830      	ldrb	r0, [r6, #0]
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	7033      	strb	r3, [r6, #0]
 80077ec:	7829      	ldrb	r1, [r5, #0]
 80077ee:	1c4b      	adds	r3, r1, #1
 80077f0:	702b      	strb	r3, [r5, #0]
 80077f2:	4c56      	ldr	r4, [pc, #344]	; (800794c <ExecuteMonitor+0x390>)
 80077f4:	0113      	lsls	r3, r2, #4
 80077f6:	1a9a      	subs	r2, r3, r2
 80077f8:	4b4d      	ldr	r3, [pc, #308]	; (8007930 <ExecuteMonitor+0x374>)
 80077fa:	189b      	adds	r3, r3, r2
 80077fc:	5c1b      	ldrb	r3, [r3, r0]
 80077fe:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 8007800:	2001      	movs	r0, #1
 8007802:	f008 fdcd 	bl	80103a0 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007806:	782b      	ldrb	r3, [r5, #0]
 8007808:	18e4      	adds	r4, r4, r3
 800780a:	3c01      	subs	r4, #1
 800780c:	7823      	ldrb	r3, [r4, #0]
 800780e:	2220      	movs	r2, #32
 8007810:	4393      	bics	r3, r2
 8007812:	d1e6      	bne.n	80077e2 <ExecuteMonitor+0x226>
 8007814:	e7d9      	b.n	80077ca <ExecuteMonitor+0x20e>
		          		   flag=0;
 8007816:	4b40      	ldr	r3, [pc, #256]	; (8007918 <ExecuteMonitor+0x35c>)
 8007818:	464a      	mov	r2, r9
 800781a:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 800781c:	4b4a      	ldr	r3, [pc, #296]	; (8007948 <ExecuteMonitor+0x38c>)
 800781e:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007820:	4b4b      	ldr	r3, [pc, #300]	; (8007950 <ExecuteMonitor+0x394>)
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007826:	4e4b      	ldr	r6, [pc, #300]	; (8007954 <ExecuteMonitor+0x398>)
 8007828:	4d48      	ldr	r5, [pc, #288]	; (800794c <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800782a:	4c49      	ldr	r4, [pc, #292]	; (8007950 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800782c:	18f2      	adds	r2, r6, r3
 800782e:	3281      	adds	r2, #129	; 0x81
 8007830:	32ff      	adds	r2, #255	; 0xff
 8007832:	5ceb      	ldrb	r3, [r5, r3]
 8007834:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 8007836:	2001      	movs	r0, #1
 8007838:	f008 fdb2 	bl	80103a0 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800783c:	7823      	ldrb	r3, [r4, #0]
 800783e:	3301      	adds	r3, #1
 8007840:	b2db      	uxtb	r3, r3
 8007842:	7023      	strb	r3, [r4, #0]
 8007844:	2b3f      	cmp	r3, #63	; 0x3f
 8007846:	d9f1      	bls.n	800782c <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	4649      	mov	r1, r9
 800784c:	483f      	ldr	r0, [pc, #252]	; (800794c <ExecuteMonitor+0x390>)
 800784e:	f00c f81d 	bl	801388c <memset>
 8007852:	e792      	b.n	800777a <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 8007854:	4a3c      	ldr	r2, [pc, #240]	; (8007948 <ExecuteMonitor+0x38c>)
 8007856:	7813      	ldrb	r3, [r2, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	b2db      	uxtb	r3, r3
 800785c:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 800785e:	4a39      	ldr	r2, [pc, #228]	; (8007944 <ExecuteMonitor+0x388>)
 8007860:	2101      	movs	r1, #1
 8007862:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 8007864:	4a35      	ldr	r2, [pc, #212]	; (800793c <ExecuteMonitor+0x380>)
 8007866:	7812      	ldrb	r2, [r2, #0]
 8007868:	429a      	cmp	r2, r3
 800786a:	d018      	beq.n	800789e <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800786c:	783a      	ldrb	r2, [r7, #0]
 800786e:	7830      	ldrb	r0, [r6, #0]
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	7033      	strb	r3, [r6, #0]
 8007874:	7829      	ldrb	r1, [r5, #0]
 8007876:	1c4b      	adds	r3, r1, #1
 8007878:	702b      	strb	r3, [r5, #0]
 800787a:	4c34      	ldr	r4, [pc, #208]	; (800794c <ExecuteMonitor+0x390>)
 800787c:	0113      	lsls	r3, r2, #4
 800787e:	1a9a      	subs	r2, r3, r2
 8007880:	4b2b      	ldr	r3, [pc, #172]	; (8007930 <ExecuteMonitor+0x374>)
 8007882:	189b      	adds	r3, r3, r2
 8007884:	5c1b      	ldrb	r3, [r3, r0]
 8007886:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 8007888:	2001      	movs	r0, #1
 800788a:	f008 fd89 	bl	80103a0 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800788e:	782b      	ldrb	r3, [r5, #0]
 8007890:	18e4      	adds	r4, r4, r3
 8007892:	3c01      	subs	r4, #1
 8007894:	7823      	ldrb	r3, [r4, #0]
 8007896:	2220      	movs	r2, #32
 8007898:	4393      	bics	r3, r2
 800789a:	d1e7      	bne.n	800786c <ExecuteMonitor+0x2b0>
 800789c:	e7da      	b.n	8007854 <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 800789e:	4b2a      	ldr	r3, [pc, #168]	; (8007948 <ExecuteMonitor+0x38c>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 80078a4:	4b1c      	ldr	r3, [pc, #112]	; (8007918 <ExecuteMonitor+0x35c>)
 80078a6:	791b      	ldrb	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01d      	beq.n	80078e8 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078ac:	4b28      	ldr	r3, [pc, #160]	; (8007950 <ExecuteMonitor+0x394>)
 80078ae:	4699      	mov	r9, r3
 80078b0:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80078b2:	4f28      	ldr	r7, [pc, #160]	; (8007954 <ExecuteMonitor+0x398>)
 80078b4:	4e25      	ldr	r6, [pc, #148]	; (800794c <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078b6:	464b      	mov	r3, r9
 80078b8:	701d      	strb	r5, [r3, #0]
 80078ba:	2300      	movs	r3, #0
 80078bc:	4c24      	ldr	r4, [pc, #144]	; (8007950 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80078be:	18fa      	adds	r2, r7, r3
 80078c0:	3281      	adds	r2, #129	; 0x81
 80078c2:	32ff      	adds	r2, #255	; 0xff
 80078c4:	5cf3      	ldrb	r3, [r6, r3]
 80078c6:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80078c8:	20c8      	movs	r0, #200	; 0xc8
 80078ca:	f006 fb1b 	bl	800df04 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80078ce:	7823      	ldrb	r3, [r4, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	7023      	strb	r3, [r4, #0]
 80078d6:	2b3f      	cmp	r3, #63	; 0x3f
 80078d8:	d9f1      	bls.n	80078be <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 80078da:	4c0f      	ldr	r4, [pc, #60]	; (8007918 <ExecuteMonitor+0x35c>)
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	f008 fd5f 	bl	80103a0 <HAL_Delay>
                  while(flag != NonActive)
 80078e2:	7923      	ldrb	r3, [r4, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e6      	bne.n	80078b6 <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80078e8:	2240      	movs	r2, #64	; 0x40
 80078ea:	2100      	movs	r1, #0
 80078ec:	4817      	ldr	r0, [pc, #92]	; (800794c <ExecuteMonitor+0x390>)
 80078ee:	f00b ffcd 	bl	801388c <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 80078f2:	22c0      	movs	r2, #192	; 0xc0
 80078f4:	2100      	movs	r1, #0
 80078f6:	4818      	ldr	r0, [pc, #96]	; (8007958 <ExecuteMonitor+0x39c>)
 80078f8:	f00b ffc8 	bl	801388c <memset>
		                    nonProcessingParameterIndex=0;
 80078fc:	4b0a      	ldr	r3, [pc, #40]	; (8007928 <ExecuteMonitor+0x36c>)
 80078fe:	469b      	mov	fp, r3
 8007900:	2300      	movs	r3, #0
 8007902:	4699      	mov	r9, r3
 8007904:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 8007906:	4f07      	ldr	r7, [pc, #28]	; (8007924 <ExecuteMonitor+0x368>)
 8007908:	e6b5      	b.n	8007676 <ExecuteMonitor+0xba>
		           }
	}
  }
}
 800790a:	b003      	add	sp, #12
 800790c:	bc3c      	pop	{r2, r3, r4, r5}
 800790e:	4690      	mov	r8, r2
 8007910:	4699      	mov	r9, r3
 8007912:	46a2      	mov	sl, r4
 8007914:	46ab      	mov	fp, r5
 8007916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007918:	20000000 	.word	0x20000000
 800791c:	20000cf4 	.word	0x20000cf4
 8007920:	20000d50 	.word	0x20000d50
 8007924:	200062f0 	.word	0x200062f0
 8007928:	20006311 	.word	0x20006311
 800792c:	20006333 	.word	0x20006333
 8007930:	20000d64 	.word	0x20000d64
 8007934:	20006332 	.word	0x20006332
 8007938:	20006310 	.word	0x20006310
 800793c:	20006330 	.word	0x20006330
 8007940:	20006334 	.word	0x20006334
 8007944:	20006331 	.word	0x20006331
 8007948:	20006312 	.word	0x20006312
 800794c:	20000d10 	.word	0x20000d10
 8007950:	200062f1 	.word	0x200062f1
 8007954:	20000a44 	.word	0x20000a44
 8007958:	20000bc4 	.word	0x20000bc4

0800795c <StartDefaultTask>:
void StartDefaultTask(void *argument){
 800795c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800795e:	46c6      	mov	lr, r8
 8007960:	b500      	push	{lr}
		switch(indMode){
 8007962:	4c2c      	ldr	r4, [pc, #176]	; (8007a14 <StartDefaultTask+0xb8>)
				indMode =IND_OFF;
 8007964:	46a0      	mov	r8, r4
				indMode =IND_OFF;
 8007966:	0027      	movs	r7, r4
 8007968:	e022      	b.n	80079b0 <StartDefaultTask+0x54>
				RTOS_IND_blink(200);
 800796a:	2680      	movs	r6, #128	; 0x80
 800796c:	0136      	lsls	r6, r6, #4
 800796e:	2590      	movs	r5, #144	; 0x90
 8007970:	05ed      	lsls	r5, r5, #23
 8007972:	2201      	movs	r2, #1
 8007974:	0031      	movs	r1, r6
 8007976:	0028      	movs	r0, r5
 8007978:	f00a f972 	bl	8011c60 <HAL_GPIO_WritePin>
 800797c:	20c8      	movs	r0, #200	; 0xc8
 800797e:	f006 fdbe 	bl	800e4fe <osDelay>
 8007982:	2200      	movs	r2, #0
 8007984:	0031      	movs	r1, r6
 8007986:	0028      	movs	r0, r5
 8007988:	f00a f96a 	bl	8011c60 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800798c:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <StartDefaultTask+0xb8>)
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007992:	f005 fded 	bl	800d570 <CheckAttachedButtons>
		ExecuteSnippet();
 8007996:	f7fd fd15 	bl	80053c4 <ExecuteSnippet>
		ExecuteMonitor();
 800799a:	f7ff fe0f 	bl	80075bc <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800799e:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <StartDefaultTask+0xbc>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d102      	bne.n	80079ac <StartDefaultTask+0x50>
			delayButtonStateReset = false;
 80079a6:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <StartDefaultTask+0xc0>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 80079ac:	f008 fb8c 	bl	80100c8 <vPortYield>
		switch(indMode){
 80079b0:	7823      	ldrb	r3, [r4, #0]
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d004      	beq.n	80079c0 <StartDefaultTask+0x64>
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d017      	beq.n	80079ea <StartDefaultTask+0x8e>
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d1e9      	bne.n	8007992 <StartDefaultTask+0x36>
 80079be:	e7d4      	b.n	800796a <StartDefaultTask+0xe>
				RTOS_IND_blink(100);
 80079c0:	2680      	movs	r6, #128	; 0x80
 80079c2:	0136      	lsls	r6, r6, #4
 80079c4:	2590      	movs	r5, #144	; 0x90
 80079c6:	05ed      	lsls	r5, r5, #23
 80079c8:	2201      	movs	r2, #1
 80079ca:	0031      	movs	r1, r6
 80079cc:	0028      	movs	r0, r5
 80079ce:	f00a f947 	bl	8011c60 <HAL_GPIO_WritePin>
 80079d2:	2064      	movs	r0, #100	; 0x64
 80079d4:	f006 fd93 	bl	800e4fe <osDelay>
 80079d8:	2200      	movs	r2, #0
 80079da:	0031      	movs	r1, r6
 80079dc:	0028      	movs	r0, r5
 80079de:	f00a f93f 	bl	8011c60 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80079e2:	2300      	movs	r3, #0
 80079e4:	4642      	mov	r2, r8
 80079e6:	7013      	strb	r3, [r2, #0]
				break;
 80079e8:	e7d3      	b.n	8007992 <StartDefaultTask+0x36>
				RTOS_IND_blink(30);
 80079ea:	2680      	movs	r6, #128	; 0x80
 80079ec:	0136      	lsls	r6, r6, #4
 80079ee:	2590      	movs	r5, #144	; 0x90
 80079f0:	05ed      	lsls	r5, r5, #23
 80079f2:	2201      	movs	r2, #1
 80079f4:	0031      	movs	r1, r6
 80079f6:	0028      	movs	r0, r5
 80079f8:	f00a f932 	bl	8011c60 <HAL_GPIO_WritePin>
 80079fc:	201e      	movs	r0, #30
 80079fe:	f006 fd7e 	bl	800e4fe <osDelay>
 8007a02:	2200      	movs	r2, #0
 8007a04:	0031      	movs	r1, r6
 8007a06:	0028      	movs	r0, r5
 8007a08:	f00a f92a 	bl	8011c60 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	703b      	strb	r3, [r7, #0]
				break;
 8007a10:	e7bf      	b.n	8007992 <StartDefaultTask+0x36>
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	20000688 	.word	0x20000688
 8007a18:	20001382 	.word	0x20001382
 8007a1c:	20001380 	.word	0x20001380

08007a20 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007a20:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007a22:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	4904      	ldr	r1, [pc, #16]	; (8007a38 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007a28:	f7f8 fb88 	bl	800013c <__udivsi3>
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007a2e:	6018      	str	r0, [r3, #0]
}
 8007a30:	bd10      	pop	{r4, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	200000a8 	.word	0x200000a8
 8007a38:	00002710 	.word	0x00002710
 8007a3c:	20000ddc 	.word	0x20000ddc

08007a40 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007a40:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <ulMainGetRunTimeCounterValue+0x40>)
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	21fa      	movs	r1, #250	; 0xfa
 8007a48:	0089      	lsls	r1, r1, #2
 8007a4a:	f7f8 fb77 	bl	800013c <__udivsi3>
 8007a4e:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <ulMainGetRunTimeCounterValue+0x44>)
 8007a52:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007a54:	f007 fc5e 	bl	800f314 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 8007a58:	4b0b      	ldr	r3, [pc, #44]	; (8007a88 <ulMainGetRunTimeCounterValue+0x48>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	015b      	lsls	r3, r3, #5
 8007a5e:	d50d      	bpl.n	8007a7c <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007a60:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <ulMainGetRunTimeCounterValue+0x44>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 8007a68:	0084      	lsls	r4, r0, #2
 8007a6a:	1824      	adds	r4, r4, r0
 8007a6c:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <ulMainGetRunTimeCounterValue+0x4c>)
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	0028      	movs	r0, r5
 8007a74:	f7f8 fb62 	bl	800013c <__udivsi3>
 8007a78:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a7c:	1b2d      	subs	r5, r5, r4
 8007a7e:	e7f3      	b.n	8007a68 <ulMainGetRunTimeCounterValue+0x28>
 8007a80:	200000a8 	.word	0x200000a8
 8007a84:	e000e018 	.word	0xe000e018
 8007a88:	e000ed04 	.word	0xe000ed04
 8007a8c:	20000ddc 	.word	0x20000ddc

08007a90 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007a90:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007a92:	f008 fac1 	bl	8010018 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007a96:	b2c4      	uxtb	r4, r0
 8007a98:	0020      	movs	r0, r4
 8007a9a:	f003 fae7 	bl	800b06c <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007a9e:	0020      	movs	r0, r4
 8007aa0:	f003 ff4e 	bl	800b940 <SwitchStreamDMAToMsg>
}
 8007aa4:	bd10      	pop	{r4, pc}
	...

08007aa8 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	000d      	movs	r5, r1
 8007aae:	0014      	movs	r4, r2
 8007ab0:	220f      	movs	r2, #15
 8007ab2:	446a      	add	r2, sp
 8007ab4:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007ab6:	aa0a      	add	r2, sp, #40	; 0x28
 8007ab8:	7812      	ldrb	r2, [r2, #0]
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d058      	beq.n	8007b70 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d100      	bne.n	8007ac4 <SetupDMAStreams+0x1c>
 8007ac2:	e0be      	b.n	8007c42 <SetupDMAStreams+0x19a>
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	d100      	bne.n	8007aca <SetupDMAStreams+0x22>
 8007ac8:	e0bf      	b.n	8007c4a <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d055      	beq.n	8007b7a <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8007ace:	2801      	cmp	r0, #1
 8007ad0:	d100      	bne.n	8007ad4 <SetupDMAStreams+0x2c>
 8007ad2:	e08b      	b.n	8007bec <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8007ad4:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007ad6:	2802      	cmp	r0, #2
 8007ad8:	d000      	beq.n	8007adc <SetupDMAStreams+0x34>
 8007ada:	e0b3      	b.n	8007c44 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007adc:	0018      	movs	r0, r3
 8007ade:	f006 fb4f 	bl	800e180 <GetUart>
 8007ae2:	0006      	movs	r6, r0
 8007ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8007ae6:	7818      	ldrb	r0, [r3, #0]
 8007ae8:	f006 fb4a 	bl	800e180 <GetUart>
 8007aec:	0001      	movs	r1, r0
 8007aee:	2201      	movs	r2, #1
 8007af0:	0030      	movs	r0, r6
 8007af2:	f7ff fc43 	bl	800737c <StartDMAstream>
 8007af6:	0002      	movs	r2, r0
 8007af8:	2817      	cmp	r0, #23
 8007afa:	d100      	bne.n	8007afe <SetupDMAStreams+0x56>
 8007afc:	e0a2      	b.n	8007c44 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007afe:	0160      	lsls	r0, r4, #5
 8007b00:	1b00      	subs	r0, r0, r4
 8007b02:	0080      	lsls	r0, r0, #2
 8007b04:	1900      	adds	r0, r0, r4
 8007b06:	00c0      	lsls	r0, r0, #3
 8007b08:	21fa      	movs	r1, #250	; 0xfa
 8007b0a:	0089      	lsls	r1, r1, #2
 8007b0c:	f7f8 fb16 	bl	800013c <__udivsi3>
 8007b10:	0004      	movs	r4, r0
 8007b12:	260f      	movs	r6, #15
 8007b14:	446e      	add	r6, sp
 8007b16:	4b4e      	ldr	r3, [pc, #312]	; (8007c50 <SetupDMAStreams+0x1a8>)
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	0033      	movs	r3, r6
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	0001      	movs	r1, r0
 8007b20:	484c      	ldr	r0, [pc, #304]	; (8007c54 <SetupDMAStreams+0x1ac>)
 8007b22:	f008 f925 	bl	800fd70 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007b26:	7833      	ldrb	r3, [r6, #0]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4a4a      	ldr	r2, [pc, #296]	; (8007c58 <SetupDMAStreams+0x1b0>)
 8007b2e:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b30:	ab0a      	add	r3, sp, #40	; 0x28
 8007b32:	7818      	ldrb	r0, [r3, #0]
 8007b34:	f006 fb24 	bl	800e180 <GetUart>
 8007b38:	0007      	movs	r7, r0
 8007b3a:	7830      	ldrb	r0, [r6, #0]
 8007b3c:	f006 fb20 	bl	800e180 <GetUart>
 8007b40:	0001      	movs	r1, r0
 8007b42:	2201      	movs	r2, #1
 8007b44:	0038      	movs	r0, r7
 8007b46:	f7ff fc19 	bl	800737c <StartDMAstream>
 8007b4a:	0002      	movs	r2, r0
 8007b4c:	2817      	cmp	r0, #23
 8007b4e:	d079      	beq.n	8007c44 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b50:	4b3f      	ldr	r3, [pc, #252]	; (8007c50 <SetupDMAStreams+0x1a8>)
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	ab0a      	add	r3, sp, #40	; 0x28
 8007b56:	2200      	movs	r2, #0
 8007b58:	0021      	movs	r1, r4
 8007b5a:	483e      	ldr	r0, [pc, #248]	; (8007c54 <SetupDMAStreams+0x1ac>)
 8007b5c:	f008 f908 	bl	800fd70 <xTimerCreate>
 8007b60:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007b62:	ab0a      	add	r3, sp, #40	; 0x28
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4a3b      	ldr	r2, [pc, #236]	; (8007c58 <SetupDMAStreams+0x1b0>)
 8007b6c:	509d      	str	r5, [r3, r2]
 8007b6e:	e02d      	b.n	8007bcc <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8007b70:	4a3a      	ldr	r2, [pc, #232]	; (8007c5c <SetupDMAStreams+0x1b4>)
 8007b72:	2102      	movs	r1, #2
 8007b74:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007b76:	2267      	movs	r2, #103	; 0x67
 8007b78:	e064      	b.n	8007c44 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f006 fb00 	bl	800e180 <GetUart>
 8007b80:	0006      	movs	r6, r0
 8007b82:	ab0a      	add	r3, sp, #40	; 0x28
 8007b84:	7818      	ldrb	r0, [r3, #0]
 8007b86:	f006 fafb 	bl	800e180 <GetUart>
 8007b8a:	0001      	movs	r1, r0
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	0030      	movs	r0, r6
 8007b90:	f7ff fbf4 	bl	800737c <StartDMAstream>
 8007b94:	0002      	movs	r2, r0
 8007b96:	2817      	cmp	r0, #23
 8007b98:	d054      	beq.n	8007c44 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b9a:	260f      	movs	r6, #15
 8007b9c:	446e      	add	r6, sp
 8007b9e:	0160      	lsls	r0, r4, #5
 8007ba0:	1b00      	subs	r0, r0, r4
 8007ba2:	0080      	lsls	r0, r0, #2
 8007ba4:	1900      	adds	r0, r0, r4
 8007ba6:	00c0      	lsls	r0, r0, #3
 8007ba8:	21fa      	movs	r1, #250	; 0xfa
 8007baa:	0089      	lsls	r1, r1, #2
 8007bac:	f7f8 fac6 	bl	800013c <__udivsi3>
 8007bb0:	0001      	movs	r1, r0
 8007bb2:	4b27      	ldr	r3, [pc, #156]	; (8007c50 <SetupDMAStreams+0x1a8>)
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	0033      	movs	r3, r6
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4826      	ldr	r0, [pc, #152]	; (8007c54 <SetupDMAStreams+0x1ac>)
 8007bbc:	f008 f8d8 	bl	800fd70 <xTimerCreate>
 8007bc0:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007bc2:	7833      	ldrb	r3, [r6, #0]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a23      	ldr	r2, [pc, #140]	; (8007c58 <SetupDMAStreams+0x1b0>)
 8007bca:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8007bcc:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	d038      	beq.n	8007c44 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007bd2:	f007 fb99 	bl	800f308 <xTaskGetTickCount>
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	2301      	movs	r3, #1
 8007bda:	425b      	negs	r3, r3
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	2300      	movs	r3, #0
 8007be0:	2101      	movs	r1, #1
 8007be2:	0020      	movs	r0, r4
 8007be4:	f008 f8e2 	bl	800fdac <xTimerGenericCommand>
	return BOS_OK;
 8007be8:	2200      	movs	r2, #0
 8007bea:	e02b      	b.n	8007c44 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007bec:	0010      	movs	r0, r2
 8007bee:	f006 fac7 	bl	800e180 <GetUart>
 8007bf2:	0006      	movs	r6, r0
 8007bf4:	230f      	movs	r3, #15
 8007bf6:	446b      	add	r3, sp
 8007bf8:	7818      	ldrb	r0, [r3, #0]
 8007bfa:	f006 fac1 	bl	800e180 <GetUart>
 8007bfe:	0001      	movs	r1, r0
 8007c00:	2201      	movs	r2, #1
 8007c02:	0030      	movs	r0, r6
 8007c04:	f7ff fbba 	bl	800737c <StartDMAstream>
 8007c08:	0002      	movs	r2, r0
 8007c0a:	2817      	cmp	r0, #23
 8007c0c:	d01a      	beq.n	8007c44 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007c0e:	0160      	lsls	r0, r4, #5
 8007c10:	1b00      	subs	r0, r0, r4
 8007c12:	0080      	lsls	r0, r0, #2
 8007c14:	1900      	adds	r0, r0, r4
 8007c16:	00c0      	lsls	r0, r0, #3
 8007c18:	21fa      	movs	r1, #250	; 0xfa
 8007c1a:	0089      	lsls	r1, r1, #2
 8007c1c:	f7f8 fa8e 	bl	800013c <__udivsi3>
 8007c20:	0001      	movs	r1, r0
 8007c22:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <SetupDMAStreams+0x1a8>)
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	ab0a      	add	r3, sp, #40	; 0x28
 8007c28:	2200      	movs	r2, #0
 8007c2a:	480a      	ldr	r0, [pc, #40]	; (8007c54 <SetupDMAStreams+0x1ac>)
 8007c2c:	f008 f8a0 	bl	800fd70 <xTimerCreate>
 8007c30:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007c32:	230f      	movs	r3, #15
 8007c34:	446b      	add	r3, sp
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4a06      	ldr	r2, [pc, #24]	; (8007c58 <SetupDMAStreams+0x1b0>)
 8007c3e:	509d      	str	r5, [r3, r2]
 8007c40:	e7c4      	b.n	8007bcc <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8007c42:	2267      	movs	r2, #103	; 0x67
}
 8007c44:	0010      	movs	r0, r2
 8007c46:	b005      	add	sp, #20
 8007c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007c4a:	2267      	movs	r2, #103	; 0x67
 8007c4c:	e7fa      	b.n	8007c44 <SetupDMAStreams+0x19c>
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	08007a91 	.word	0x08007a91
 8007c54:	08019c24 	.word	0x08019c24
 8007c58:	20000cd8 	.word	0x20000cd8
 8007c5c:	20000870 	.word	0x20000870

08007c60 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007c60:	b510      	push	{r4, lr}
	switch(port){
 8007c62:	2802      	cmp	r0, #2
 8007c64:	d00c      	beq.n	8007c80 <NotifyMessagingTask+0x20>
 8007c66:	2803      	cmp	r0, #3
 8007c68:	d012      	beq.n	8007c90 <NotifyMessagingTask+0x30>
 8007c6a:	2801      	cmp	r0, #1
 8007c6c:	d000      	beq.n	8007c70 <NotifyMessagingTask+0x10>
			break;
#endif
		default:
			break;
	}
}
 8007c6e:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <NotifyMessagingTask+0x40>)
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	2300      	movs	r3, #0
 8007c76:	2202      	movs	r2, #2
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f007 ffb7 	bl	800fbec <xTaskGenericNotify>
			break;
 8007c7e:	e7f6      	b.n	8007c6e <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c80:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <NotifyMessagingTask+0x44>)
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2202      	movs	r2, #2
 8007c88:	2100      	movs	r1, #0
 8007c8a:	f007 ffaf 	bl	800fbec <xTaskGenericNotify>
			break;
 8007c8e:	e7ee      	b.n	8007c6e <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c90:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <NotifyMessagingTask+0x48>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	2300      	movs	r3, #0
 8007c96:	2202      	movs	r2, #2
 8007c98:	2100      	movs	r1, #0
 8007c9a:	f007 ffa7 	bl	800fbec <xTaskGenericNotify>
}
 8007c9e:	e7e6      	b.n	8007c6e <NotifyMessagingTask+0xe>
 8007ca0:	20000ce8 	.word	0x20000ce8
 8007ca4:	20000cec 	.word	0x20000cec
 8007ca8:	20000cf0 	.word	0x20000cf0

08007cac <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cae:	46de      	mov	lr, fp
 8007cb0:	4657      	mov	r7, sl
 8007cb2:	464e      	mov	r6, r9
 8007cb4:	4645      	mov	r5, r8
 8007cb6:	b5e0      	push	{r5, r6, r7, lr}
 8007cb8:	b087      	sub	sp, #28
 8007cba:	0005      	movs	r5, r0
 8007cbc:	9103      	str	r1, [sp, #12]
 8007cbe:	0014      	movs	r4, r2
 8007cc0:	4699      	mov	r9, r3
 8007cc2:	ab10      	add	r3, sp, #64	; 0x40
 8007cc4:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007cc6:	0003      	movs	r3, r0
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	d100      	bne.n	8007cce <SendMessageFromPort+0x22>
 8007ccc:	e1e8      	b.n	80080a0 <SendMessageFromPort+0x3f4>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	d14d      	bne.n	8007d6e <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007cd2:	1c93      	adds	r3, r2, #2
 8007cd4:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007cd6:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d900      	bls.n	8007cde <SendMessageFromPort+0x32>
 8007cdc:	e162      	b.n	8007fa4 <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8007cde:	2000      	movs	r0, #0
 8007ce0:	f007 fa78 	bl	800f1d4 <uxTaskPriorityGet>
 8007ce4:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007ce6:	2105      	movs	r1, #5
 8007ce8:	2000      	movs	r0, #0
 8007cea:	f007 fa83 	bl	800f1f4 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8007cee:	4bc4      	ldr	r3, [pc, #784]	; (8008000 <SendMessageFromPort+0x354>)
 8007cf0:	2248      	movs	r2, #72	; 0x48
 8007cf2:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007cf4:	3212      	adds	r2, #18
 8007cf6:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d000      	beq.n	8007d00 <SendMessageFromPort+0x54>
 8007cfe:	e1e8      	b.n	80080d2 <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8007d00:	1e73      	subs	r3, r6, #1
 8007d02:	4ac0      	ldr	r2, [pc, #768]	; (8008004 <SendMessageFromPort+0x358>)
 8007d04:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007d06:	4ec0      	ldr	r6, [pc, #768]	; (8008008 <SendMessageFromPort+0x35c>)
 8007d08:	00d9      	lsls	r1, r3, #3
 8007d0a:	1ac9      	subs	r1, r1, r3
 8007d0c:	00c9      	lsls	r1, r1, #3
 8007d0e:	4bbf      	ldr	r3, [pc, #764]	; (800800c <SendMessageFromPort+0x360>)
 8007d10:	18c9      	adds	r1, r1, r3
 8007d12:	003a      	movs	r2, r7
 8007d14:	0030      	movs	r0, r6
 8007d16:	f00b fdb0 	bl	801387a <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007d1a:	3e03      	subs	r6, #3
 8007d1c:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007d1e:	1cfb      	adds	r3, r7, #3
 8007d20:	4698      	mov	r8, r3
 8007d22:	001a      	movs	r2, r3
 8007d24:	0031      	movs	r1, r6
 8007d26:	48ba      	ldr	r0, [pc, #744]	; (8008010 <SendMessageFromPort+0x364>)
 8007d28:	f00b fda7 	bl	801387a <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007d2c:	b2bf      	uxth	r7, r7
 8007d2e:	1cf9      	adds	r1, r7, #3
 8007d30:	48b7      	ldr	r0, [pc, #732]	; (8008010 <SendMessageFromPort+0x364>)
 8007d32:	f004 f9c9 	bl	800c0c8 <CalculateCRC8>
 8007d36:	4643      	mov	r3, r8
 8007d38:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007d3a:	2238      	movs	r2, #56	; 0x38
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	48b4      	ldr	r0, [pc, #720]	; (8008010 <SendMessageFromPort+0x364>)
 8007d40:	f00b fda4 	bl	801388c <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007d44:	3402      	adds	r4, #2
 8007d46:	b2e4      	uxtb	r4, r4
 8007d48:	2c01      	cmp	r4, #1
 8007d4a:	d800      	bhi.n	8007d4e <SendMessageFromPort+0xa2>
 8007d4c:	e14e      	b.n	8007fec <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007d4e:	464b      	mov	r3, r9
 8007d50:	3b2c      	subs	r3, #44	; 0x2c
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d800      	bhi.n	8007d5a <SendMessageFromPort+0xae>
 8007d58:	e110      	b.n	8007f7c <SendMessageFromPort+0x2d0>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007d5a:	4bae      	ldr	r3, [pc, #696]	; (8008014 <SendMessageFromPort+0x368>)
 8007d5c:	88db      	ldrh	r3, [r3, #6]
 8007d5e:	2600      	movs	r6, #0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d100      	bne.n	8007d66 <SendMessageFromPort+0xba>
 8007d64:	e111      	b.n	8007f8a <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007d66:	3704      	adds	r7, #4
 8007d68:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 8007d6a:	4cab      	ldr	r4, [pc, #684]	; (8008018 <SendMessageFromPort+0x36c>)
 8007d6c:	e12d      	b.n	8007fca <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <SendMessageFromPort+0xce>
 8007d74:	2a00      	cmp	r2, #0
 8007d76:	d100      	bne.n	8007d7a <SendMessageFromPort+0xce>
 8007d78:	e194      	b.n	80080a4 <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	f007 fa2a 	bl	800f1d4 <uxTaskPriorityGet>
 8007d80:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d82:	2105      	movs	r1, #5
 8007d84:	2000      	movs	r0, #0
 8007d86:	f007 fa35 	bl	800f1f4 <vTaskPrioritySet>
	message[0] ='H';
 8007d8a:	4b9d      	ldr	r3, [pc, #628]	; (8008000 <SendMessageFromPort+0x354>)
 8007d8c:	2248      	movs	r2, #72	; 0x48
 8007d8e:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007d90:	3212      	adds	r2, #18
 8007d92:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d94:	464b      	mov	r3, r9
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d0b2      	beq.n	8007d00 <SendMessageFromPort+0x54>
		if(src == 0)
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <SendMessageFromPort+0xfa>
			src =myID;
 8007da0:	4b9e      	ldr	r3, [pc, #632]	; (800801c <SendMessageFromPort+0x370>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	9303      	str	r3, [sp, #12]
		message[2] =length;
 8007da6:	4a96      	ldr	r2, [pc, #600]	; (8008000 <SendMessageFromPort+0x354>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007dac:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007db2:	4998      	ldr	r1, [pc, #608]	; (8008014 <SendMessageFromPort+0x368>)
 8007db4:	790b      	ldrb	r3, [r1, #4]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	7848      	ldrb	r0, [r1, #1]
 8007dba:	0080      	lsls	r0, r0, #2
 8007dbc:	4303      	orrs	r3, r0
 8007dbe:	7809      	ldrb	r1, [r1, #0]
 8007dc0:	430b      	orrs	r3, r1
		if(code > 0xFF)
 8007dc2:	21ff      	movs	r1, #255	; 0xff
 8007dc4:	4549      	cmp	r1, r9
 8007dc6:	4189      	sbcs	r1, r1
 8007dc8:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007dca:	0049      	lsls	r1, r1, #1
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	7191      	strb	r1, [r2, #6]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	4693      	mov	fp, r2
		if(extendCode == true){
 8007dda:	29ff      	cmp	r1, #255	; 0xff
 8007ddc:	d904      	bls.n	8007de8 <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007dde:	0a0a      	lsrs	r2, r1, #8
 8007de0:	4987      	ldr	r1, [pc, #540]	; (8008000 <SendMessageFromPort+0x354>)
 8007de2:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007de4:	2201      	movs	r2, #1
 8007de6:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007de8:	2e2e      	cmp	r6, #46	; 0x2e
 8007dea:	d932      	bls.n	8007e52 <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 8007dec:	2280      	movs	r2, #128	; 0x80
 8007dee:	4252      	negs	r2, r2
 8007df0:	4313      	orrs	r3, r2
 8007df2:	4a83      	ldr	r2, [pc, #524]	; (8008000 <SendMessageFromPort+0x354>)
 8007df4:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007df6:	4b8a      	ldr	r3, [pc, #552]	; (8008020 <SendMessageFromPort+0x374>)
 8007df8:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8007dfe:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007e00:	465b      	mov	r3, fp
 8007e02:	1ddf      	adds	r7, r3, #7
 8007e04:	003b      	movs	r3, r7
 8007e06:	4694      	mov	ip, r2
 8007e08:	4463      	add	r3, ip
 8007e0a:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 8007e0c:	4b84      	ldr	r3, [pc, #528]	; (8008020 <SendMessageFromPort+0x374>)
 8007e0e:	881f      	ldrh	r7, [r3, #0]
 8007e10:	2f00      	cmp	r7, #0
 8007e12:	d02d      	beq.n	8007e70 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007e14:	0031      	movs	r1, r6
 8007e16:	0038      	movs	r0, r7
 8007e18:	f7f8 f990 	bl	800013c <__udivsi3>
 8007e1c:	b280      	uxth	r0, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d141      	bne.n	8007ea6 <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007e22:	4b77      	ldr	r3, [pc, #476]	; (8008000 <SendMessageFromPort+0x354>)
 8007e24:	795a      	ldrb	r2, [r3, #5]
 8007e26:	237f      	movs	r3, #127	; 0x7f
 8007e28:	4013      	ands	r3, r2
 8007e2a:	4a75      	ldr	r2, [pc, #468]	; (8008000 <SendMessageFromPort+0x354>)
 8007e2c:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007e2e:	4e7d      	ldr	r6, [pc, #500]	; (8008024 <SendMessageFromPort+0x378>)
 8007e30:	8831      	ldrh	r1, [r6, #0]
 8007e32:	4b7d      	ldr	r3, [pc, #500]	; (8008028 <SendMessageFromPort+0x37c>)
 8007e34:	18c9      	adds	r1, r1, r3
 8007e36:	003a      	movs	r2, r7
 8007e38:	9805      	ldr	r0, [sp, #20]
 8007e3a:	f00b fd1e 	bl	801387a <memcpy>
					ptrShift =0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8007e42:	4a77      	ldr	r2, [pc, #476]	; (8008020 <SendMessageFromPort+0x374>)
 8007e44:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8007e46:	1d3b      	adds	r3, r7, #4
 8007e48:	445b      	add	r3, fp
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 8007e4e:	003e      	movs	r6, r7
 8007e50:	e7dc      	b.n	8007e0c <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007e52:	465b      	mov	r3, fp
 8007e54:	3307      	adds	r3, #7
 8007e56:	486a      	ldr	r0, [pc, #424]	; (8008000 <SendMessageFromPort+0x354>)
 8007e58:	1818      	adds	r0, r3, r0
 8007e5a:	4b72      	ldr	r3, [pc, #456]	; (8008024 <SendMessageFromPort+0x378>)
 8007e5c:	8819      	ldrh	r1, [r3, #0]
 8007e5e:	4b72      	ldr	r3, [pc, #456]	; (8008028 <SendMessageFromPort+0x37c>)
 8007e60:	18c9      	adds	r1, r1, r3
 8007e62:	0032      	movs	r2, r6
 8007e64:	f00b fd09 	bl	801387a <memcpy>
			length =numberOfParams + shift + 4;
 8007e68:	1d31      	adds	r1, r6, #4
 8007e6a:	4459      	add	r1, fp
 8007e6c:	b2cb      	uxtb	r3, r1
 8007e6e:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8007e70:	4b6e      	ldr	r3, [pc, #440]	; (800802c <SendMessageFromPort+0x380>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d058      	beq.n	8007f2a <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 8007e78:	4b6d      	ldr	r3, [pc, #436]	; (8008030 <SendMessageFromPort+0x384>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2bff      	cmp	r3, #255	; 0xff
 8007e7e:	d100      	bne.n	8007e82 <SendMessageFromPort+0x1d6>
 8007e80:	e114      	b.n	80080ac <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e82:	4a6c      	ldr	r2, [pc, #432]	; (8008034 <SendMessageFromPort+0x388>)
 8007e84:	7817      	ldrb	r7, [r2, #0]
 8007e86:	2f00      	cmp	r7, #0
 8007e88:	d076      	beq.n	8007f78 <SendMessageFromPort+0x2cc>
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	409a      	lsls	r2, r3
 8007e8e:	4690      	mov	r8, r2
 8007e90:	4869      	ldr	r0, [pc, #420]	; (8008038 <SendMessageFromPort+0x38c>)
 8007e92:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8007e94:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007e96:	495a      	ldr	r1, [pc, #360]	; (8008000 <SendMessageFromPort+0x354>)
 8007e98:	468c      	mov	ip, r1
 8007e9a:	44b4      	add	ip, r6
 8007e9c:	9505      	str	r5, [sp, #20]
 8007e9e:	4645      	mov	r5, r8
 8007ea0:	46a0      	mov	r8, r4
 8007ea2:	465c      	mov	r4, fp
 8007ea4:	e017      	b.n	8007ed6 <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007ea6:	9600      	str	r6, [sp, #0]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	0022      	movs	r2, r4
 8007eac:	9903      	ldr	r1, [sp, #12]
 8007eae:	0028      	movs	r0, r5
 8007eb0:	f7ff fefc 	bl	8007cac <SendMessageFromPort>
					osDelay(10);
 8007eb4:	200a      	movs	r0, #10
 8007eb6:	f006 fb22 	bl	800e4fe <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007eba:	4a59      	ldr	r2, [pc, #356]	; (8008020 <SendMessageFromPort+0x374>)
 8007ebc:	8813      	ldrh	r3, [r2, #0]
 8007ebe:	1b9b      	subs	r3, r3, r6
 8007ec0:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8007ec2:	4a58      	ldr	r2, [pc, #352]	; (8008024 <SendMessageFromPort+0x378>)
 8007ec4:	8813      	ldrh	r3, [r2, #0]
 8007ec6:	18f3      	adds	r3, r6, r3
 8007ec8:	8013      	strh	r3, [r2, #0]
 8007eca:	e79f      	b.n	8007e0c <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007ecc:	3301      	adds	r3, #1
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3002      	adds	r0, #2
 8007ed2:	42bb      	cmp	r3, r7
 8007ed4:	d80e      	bhi.n	8007ef4 <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 8007ed6:	8801      	ldrh	r1, [r0, #0]
 8007ed8:	420d      	tst	r5, r1
 8007eda:	d0f7      	beq.n	8007ecc <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 8007edc:	3201      	adds	r2, #1
 8007ede:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007ee0:	18b1      	adds	r1, r6, r2
 8007ee2:	3101      	adds	r1, #1
 8007ee4:	292d      	cmp	r1, #45	; 0x2d
 8007ee6:	dd00      	ble.n	8007eea <SendMessageFromPort+0x23e>
 8007ee8:	e0de      	b.n	80080a8 <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007eea:	4661      	mov	r1, ip
 8007eec:	1889      	adds	r1, r1, r2
 8007eee:	1909      	adds	r1, r1, r4
 8007ef0:	718b      	strb	r3, [r1, #6]
 8007ef2:	e7eb      	b.n	8007ecc <SendMessageFromPort+0x220>
 8007ef4:	46a3      	mov	fp, r4
 8007ef6:	9d05      	ldr	r5, [sp, #20]
 8007ef8:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007efa:	465b      	mov	r3, fp
 8007efc:	3307      	adds	r3, #7
 8007efe:	199b      	adds	r3, r3, r6
 8007f00:	189b      	adds	r3, r3, r2
 8007f02:	493f      	ldr	r1, [pc, #252]	; (8008000 <SendMessageFromPort+0x354>)
 8007f04:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007f06:	18b1      	adds	r1, r6, r2
 8007f08:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007f0a:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007f0c:	292d      	cmp	r1, #45	; 0x2d
 8007f0e:	dc49      	bgt.n	8007fa4 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007f10:	484a      	ldr	r0, [pc, #296]	; (800803c <SendMessageFromPort+0x390>)
 8007f12:	7801      	ldrb	r1, [r0, #0]
 8007f14:	3101      	adds	r1, #1
 8007f16:	b2c9      	uxtb	r1, r1
 8007f18:	7001      	strb	r1, [r0, #0]
 8007f1a:	4839      	ldr	r0, [pc, #228]	; (8008000 <SendMessageFromPort+0x354>)
 8007f1c:	18c3      	adds	r3, r0, r3
 8007f1e:	7059      	strb	r1, [r3, #1]
 8007f20:	4651      	mov	r1, sl
 8007f22:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007f24:	188a      	adds	r2, r1, r2
 8007f26:	b2d3      	uxtb	r3, r2
 8007f28:	469a      	mov	sl, r3
	message[2] =length;
 8007f2a:	4b35      	ldr	r3, [pc, #212]	; (8008000 <SendMessageFromPort+0x354>)
 8007f2c:	4698      	mov	r8, r3
 8007f2e:	4652      	mov	r2, sl
 8007f30:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007f32:	1cd6      	adds	r6, r2, #3
 8007f34:	0032      	movs	r2, r6
 8007f36:	4641      	mov	r1, r8
 8007f38:	4835      	ldr	r0, [pc, #212]	; (8008010 <SendMessageFromPort+0x364>)
 8007f3a:	f00b fc9e 	bl	801387a <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007f3e:	4653      	mov	r3, sl
 8007f40:	b29f      	uxth	r7, r3
 8007f42:	0031      	movs	r1, r6
 8007f44:	4832      	ldr	r0, [pc, #200]	; (8008010 <SendMessageFromPort+0x364>)
 8007f46:	f004 f8bf 	bl	800c0c8 <CalculateCRC8>
 8007f4a:	4643      	mov	r3, r8
 8007f4c:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007f4e:	2238      	movs	r2, #56	; 0x38
 8007f50:	2100      	movs	r1, #0
 8007f52:	482f      	ldr	r0, [pc, #188]	; (8008010 <SendMessageFromPort+0x364>)
 8007f54:	f00b fc9a 	bl	801388c <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007f58:	3402      	adds	r4, #2
 8007f5a:	b2e4      	uxtb	r4, r4
 8007f5c:	2c01      	cmp	r4, #1
 8007f5e:	d900      	bls.n	8007f62 <SendMessageFromPort+0x2b6>
 8007f60:	e6f5      	b.n	8007d4e <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8007f62:	9803      	ldr	r0, [sp, #12]
 8007f64:	f7fb fda0 	bl	8003aa8 <FindBroadcastRoutes>
 8007f68:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f6a:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f6c:	4b34      	ldr	r3, [pc, #208]	; (8008040 <SendMessageFromPort+0x394>)
 8007f6e:	4699      	mov	r9, r3
 8007f70:	4b2a      	ldr	r3, [pc, #168]	; (800801c <SendMessageFromPort+0x370>)
 8007f72:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007f74:	9503      	str	r5, [sp, #12]
 8007f76:	e074      	b.n	8008062 <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 8007f78:	2200      	movs	r2, #0
 8007f7a:	e7be      	b.n	8007efa <SendMessageFromPort+0x24e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007f7c:	1d3a      	adds	r2, r7, #4
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	2332      	movs	r3, #50	; 0x32
 8007f82:	491f      	ldr	r1, [pc, #124]	; (8008000 <SendMessageFromPort+0x354>)
 8007f84:	0028      	movs	r0, r5
 8007f86:	f006 f959 	bl	800e23c <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4a22      	ldr	r2, [pc, #136]	; (8008018 <SendMessageFromPort+0x36c>)
 8007f8e:	7013      	strb	r3, [r2, #0]
 8007f90:	4a2c      	ldr	r2, [pc, #176]	; (8008044 <SendMessageFromPort+0x398>)
 8007f92:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8007f94:	9904      	ldr	r1, [sp, #16]
 8007f96:	2000      	movs	r0, #0
 8007f98:	f007 f92c 	bl	800f1f4 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <SendMessageFromPort+0x39c>)
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	701a      	strb	r2, [r3, #0]
	
	return result;
 8007fa2:	2000      	movs	r0, #0
}
 8007fa4:	b007      	add	sp, #28
 8007fa6:	bc3c      	pop	{r2, r3, r4, r5}
 8007fa8:	4690      	mov	r8, r2
 8007faa:	4699      	mov	r9, r3
 8007fac:	46a2      	mov	sl, r4
 8007fae:	46ab      	mov	fp, r5
 8007fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007fb2:	2332      	movs	r3, #50	; 0x32
 8007fb4:	003a      	movs	r2, r7
 8007fb6:	4912      	ldr	r1, [pc, #72]	; (8008000 <SendMessageFromPort+0x354>)
 8007fb8:	0028      	movs	r0, r5
 8007fba:	f006 f93f 	bl	800e23c <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007fbe:	3601      	adds	r6, #1
 8007fc0:	b2f6      	uxtb	r6, r6
 8007fc2:	4b14      	ldr	r3, [pc, #80]	; (8008014 <SendMessageFromPort+0x368>)
 8007fc4:	88db      	ldrh	r3, [r3, #6]
 8007fc6:	42b3      	cmp	r3, r6
 8007fc8:	d9df      	bls.n	8007f8a <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007fca:	2332      	movs	r3, #50	; 0x32
 8007fcc:	003a      	movs	r2, r7
 8007fce:	490c      	ldr	r1, [pc, #48]	; (8008000 <SendMessageFromPort+0x354>)
 8007fd0:	0028      	movs	r0, r5
 8007fd2:	f006 f933 	bl	800e23c <writePxDMAMutex>
				osDelay(200);
 8007fd6:	20c8      	movs	r0, #200	; 0xc8
 8007fd8:	f006 fa91 	bl	800e4fe <osDelay>
				if(ACK_FLAG == true)
 8007fdc:	7823      	ldrb	r3, [r4, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1d3      	bne.n	8007f8a <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <SendMessageFromPort+0x398>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0e9      	beq.n	8007fbe <SendMessageFromPort+0x312>
 8007fea:	e7e2      	b.n	8007fb2 <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007fec:	464b      	mov	r3, r9
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1b7      	bne.n	8007f62 <SendMessageFromPort+0x2b6>
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1b4      	bne.n	8007f62 <SendMessageFromPort+0x2b6>
			src =message[4];
 8007ff8:	4b01      	ldr	r3, [pc, #4]	; (8008000 <SendMessageFromPort+0x354>)
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	9303      	str	r3, [sp, #12]
 8007ffe:	e7b0      	b.n	8007f62 <SendMessageFromPort+0x2b6>
 8008000:	2000068c 	.word	0x2000068c
 8008004:	200006c4 	.word	0x200006c4
 8008008:	2000068f 	.word	0x2000068f
 800800c:	20000544 	.word	0x20000544
 8008010:	20000c88 	.word	0x20000c88
 8008014:	200061f0 	.word	0x200061f0
 8008018:	200002ac 	.word	0x200002ac
 800801c:	20000806 	.word	0x20000806
 8008020:	20000de6 	.word	0x20000de6
 8008024:	20000de4 	.word	0x20000de4
 8008028:	200006c8 	.word	0x200006c8
 800802c:	200002ad 	.word	0x200002ad
 8008030:	20000031 	.word	0x20000031
 8008034:	20000030 	.word	0x20000030
 8008038:	20000654 	.word	0x20000654
 800803c:	200004f0 	.word	0x200004f0
 8008040:	200004f4 	.word	0x200004f4
 8008044:	2000087c 	.word	0x2000087c
 8008048:	20000888 	.word	0x20000888
			rejected_FLAG=false;
 800804c:	4b23      	ldr	r3, [pc, #140]	; (80080dc <SendMessageFromPort+0x430>)
 800804e:	2200      	movs	r2, #0
 8008050:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8008052:	200a      	movs	r0, #10
 8008054:	f005 ff56 	bl	800df04 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008058:	3401      	adds	r4, #1
 800805a:	b2e4      	uxtb	r4, r4
 800805c:	3601      	adds	r6, #1
 800805e:	2c04      	cmp	r4, #4
 8008060:	d098      	beq.n	8007f94 <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8008062:	4643      	mov	r3, r8
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	3b01      	subs	r3, #1
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	464a      	mov	r2, r9
 800806c:	5a9b      	ldrh	r3, [r3, r2]
 800806e:	4133      	asrs	r3, r6
 8008070:	07db      	lsls	r3, r3, #31
 8008072:	d5eb      	bpl.n	800804c <SendMessageFromPort+0x3a0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8008074:	1d3d      	adds	r5, r7, #4
 8008076:	b2ad      	uxth	r5, r5
 8008078:	2332      	movs	r3, #50	; 0x32
 800807a:	002a      	movs	r2, r5
 800807c:	4918      	ldr	r1, [pc, #96]	; (80080e0 <SendMessageFromPort+0x434>)
 800807e:	0020      	movs	r0, r4
 8008080:	f006 f8dc 	bl	800e23c <writePxDMAMutex>
				osDelay(200);
 8008084:	20c8      	movs	r0, #200	; 0xc8
 8008086:	f006 fa3a 	bl	800e4fe <osDelay>
				if(rejected_FLAG == true)
 800808a:	4b14      	ldr	r3, [pc, #80]	; (80080dc <SendMessageFromPort+0x430>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0dc      	beq.n	800804c <SendMessageFromPort+0x3a0>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8008092:	2332      	movs	r3, #50	; 0x32
 8008094:	002a      	movs	r2, r5
 8008096:	4912      	ldr	r1, [pc, #72]	; (80080e0 <SendMessageFromPort+0x434>)
 8008098:	9803      	ldr	r0, [sp, #12]
 800809a:	f006 f8cf 	bl	800e23c <writePxDMAMutex>
 800809e:	e7d5      	b.n	800804c <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 80080a0:	2067      	movs	r0, #103	; 0x67
 80080a2:	e77f      	b.n	8007fa4 <SendMessageFromPort+0x2f8>
 80080a4:	2067      	movs	r0, #103	; 0x67
 80080a6:	e77d      	b.n	8007fa4 <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 80080a8:	2069      	movs	r0, #105	; 0x69
 80080aa:	e77b      	b.n	8007fa4 <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80080ac:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80080ae:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 80080b0:	2b2d      	cmp	r3, #45	; 0x2d
 80080b2:	dd00      	ble.n	80080b6 <SendMessageFromPort+0x40a>
 80080b4:	e776      	b.n	8007fa4 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 80080b6:	4a0b      	ldr	r2, [pc, #44]	; (80080e4 <SendMessageFromPort+0x438>)
 80080b8:	7813      	ldrb	r3, [r2, #0]
 80080ba:	3301      	adds	r3, #1
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	7013      	strb	r3, [r2, #0]
 80080c0:	4a07      	ldr	r2, [pc, #28]	; (80080e0 <SendMessageFromPort+0x434>)
 80080c2:	1992      	adds	r2, r2, r6
 80080c4:	445a      	add	r2, fp
 80080c6:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 80080c8:	4651      	mov	r1, sl
 80080ca:	3101      	adds	r1, #1
 80080cc:	b2cb      	uxtb	r3, r1
 80080ce:	469a      	mov	sl, r3
 80080d0:	e72b      	b.n	8007f2a <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80080d2:	464b      	mov	r3, r9
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d100      	bne.n	80080da <SendMessageFromPort+0x42e>
 80080d8:	e612      	b.n	8007d00 <SendMessageFromPort+0x54>
 80080da:	e664      	b.n	8007da6 <SendMessageFromPort+0xfa>
 80080dc:	2000087c 	.word	0x2000087c
 80080e0:	2000068c 	.word	0x2000068c
 80080e4:	200004f0 	.word	0x200004f0

080080e8 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080e8:	b530      	push	{r4, r5, lr}
 80080ea:	b083      	sub	sp, #12
 80080ec:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <ForwardReceivedMessage+0x34>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80080f4:	1e42      	subs	r2, r0, #1
 80080f6:	00d3      	lsls	r3, r2, #3
 80080f8:	1a9b      	subs	r3, r3, r2
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4a08      	ldr	r2, [pc, #32]	; (8008120 <ForwardReceivedMessage+0x38>)
 80080fe:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8008100:	4b08      	ldr	r3, [pc, #32]	; (8008124 <ForwardReceivedMessage+0x3c>)
 8008102:	7818      	ldrb	r0, [r3, #0]
 8008104:	0021      	movs	r1, r4
 8008106:	f7fb fd9d 	bl	8003c44 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 800810a:	9500      	str	r5, [sp, #0]
 800810c:	2300      	movs	r3, #0
 800810e:	0022      	movs	r2, r4
 8008110:	2100      	movs	r1, #0
 8008112:	f7ff fdcb 	bl	8007cac <SendMessageFromPort>
}
 8008116:	2000      	movs	r0, #0
 8008118:	b003      	add	sp, #12
 800811a:	bd30      	pop	{r4, r5, pc}
 800811c:	200002ad 	.word	0x200002ad
 8008120:	20000544 	.word	0x20000544
 8008124:	20000806 	.word	0x20000806

08008128 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8008128:	b500      	push	{lr}
 800812a:	b083      	sub	sp, #12
	AddBcastPayload = false;
 800812c:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <BroadcastReceivedMessage+0x38>)
 800812e:	2200      	movs	r2, #0
 8008130:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8008132:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <BroadcastReceivedMessage+0x3c>)
 8008134:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008136:	28ff      	cmp	r0, #255	; 0xff
 8008138:	d009      	beq.n	800814e <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 800813a:	9100      	str	r1, [sp, #0]
 800813c:	2300      	movs	r3, #0
 800813e:	22fe      	movs	r2, #254	; 0xfe
 8008140:	2100      	movs	r1, #0
 8008142:	2000      	movs	r0, #0
 8008144:	f7ff fdb2 	bl	8007cac <SendMessageFromPort>
}
 8008148:	2000      	movs	r0, #0
 800814a:	b003      	add	sp, #12
 800814c:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 800814e:	9100      	str	r1, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	32ff      	adds	r2, #255	; 0xff
 8008154:	2100      	movs	r1, #0
 8008156:	2000      	movs	r0, #0
 8008158:	f7ff fda8 	bl	8007cac <SendMessageFromPort>
 800815c:	e7f4      	b.n	8008148 <BroadcastReceivedMessage+0x20>
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	200002ad 	.word	0x200002ad
 8008164:	20000031 	.word	0x20000031

08008168 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008168:	b530      	push	{r4, r5, lr}
 800816a:	b083      	sub	sp, #12
 800816c:	001c      	movs	r4, r3
	AddBcastPayload = true;
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <BroadcastMessage+0x44>)
 8008170:	2501      	movs	r5, #1
 8008172:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <BroadcastMessage+0x48>)
 8008176:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008178:	29ff      	cmp	r1, #255	; 0xff
 800817a:	d00e      	beq.n	800819a <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 800817c:	9400      	str	r4, [sp, #0]
 800817e:	0013      	movs	r3, r2
 8008180:	22fe      	movs	r2, #254	; 0xfe
 8008182:	0001      	movs	r1, r0
 8008184:	2000      	movs	r0, #0
 8008186:	f7ff fd91 	bl	8007cac <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 800818a:	0022      	movs	r2, r4
 800818c:	2100      	movs	r1, #0
 800818e:	4809      	ldr	r0, [pc, #36]	; (80081b4 <BroadcastMessage+0x4c>)
 8008190:	f00b fb7c 	bl	801388c <memset>
}
 8008194:	2000      	movs	r0, #0
 8008196:	b003      	add	sp, #12
 8008198:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 800819a:	9400      	str	r4, [sp, #0]
 800819c:	0013      	movs	r3, r2
 800819e:	22ff      	movs	r2, #255	; 0xff
 80081a0:	0001      	movs	r1, r0
 80081a2:	2000      	movs	r0, #0
 80081a4:	f7ff fd82 	bl	8007cac <SendMessageFromPort>
 80081a8:	e7ef      	b.n	800818a <BroadcastMessage+0x22>
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	200002ad 	.word	0x200002ad
 80081b0:	20000031 	.word	0x20000031
 80081b4:	200006c8 	.word	0x200006c8

080081b8 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 80081b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ba:	b083      	sub	sp, #12
 80081bc:	0004      	movs	r4, r0
 80081be:	000e      	movs	r6, r1
 80081c0:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 80081c2:	28ff      	cmp	r0, #255	; 0xff
 80081c4:	d012      	beq.n	80081ec <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 80081c6:	4f0d      	ldr	r7, [pc, #52]	; (80081fc <SendMessageToModule+0x44>)
 80081c8:	7838      	ldrb	r0, [r7, #0]
 80081ca:	0021      	movs	r1, r4
 80081cc:	f7fb fd3a 	bl	8003c44 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 80081d0:	7839      	ldrb	r1, [r7, #0]
 80081d2:	9500      	str	r5, [sp, #0]
 80081d4:	0033      	movs	r3, r6
 80081d6:	0022      	movs	r2, r4
 80081d8:	f7ff fd68 	bl	8007cac <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80081dc:	002a      	movs	r2, r5
 80081de:	2100      	movs	r1, #0
 80081e0:	4807      	ldr	r0, [pc, #28]	; (8008200 <SendMessageToModule+0x48>)
 80081e2:	f00b fb53 	bl	801388c <memset>
}
 80081e6:	2000      	movs	r0, #0
 80081e8:	b003      	add	sp, #12
 80081ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80081ec:	4b03      	ldr	r3, [pc, #12]	; (80081fc <SendMessageToModule+0x44>)
 80081ee:	7818      	ldrb	r0, [r3, #0]
 80081f0:	0013      	movs	r3, r2
 80081f2:	000a      	movs	r2, r1
 80081f4:	21ff      	movs	r1, #255	; 0xff
 80081f6:	f7ff ffb7 	bl	8008168 <BroadcastMessage>
 80081fa:	e7f4      	b.n	80081e6 <SendMessageToModule+0x2e>
 80081fc:	20000806 	.word	0x20000806
 8008200:	200006c8 	.word	0x200006c8

08008204 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8008204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008206:	46de      	mov	lr, fp
 8008208:	4657      	mov	r7, sl
 800820a:	464e      	mov	r6, r9
 800820c:	4645      	mov	r5, r8
 800820e:	b5e0      	push	{r5, r6, r7, lr}
 8008210:	b091      	sub	sp, #68	; 0x44
 8008212:	900f      	str	r0, [sp, #60]	; 0x3c
 8008214:	000c      	movs	r4, r1
 8008216:	9106      	str	r1, [sp, #24]
 8008218:	0015      	movs	r5, r2
 800821a:	920e      	str	r2, [sp, #56]	; 0x38
 800821c:	001e      	movs	r6, r3
 800821e:	ab1a      	add	r3, sp, #104	; 0x68
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	4698      	mov	r8, r3
 8008224:	ab1d      	add	r3, sp, #116	; 0x74
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 800822a:	4b5a      	ldr	r3, [pc, #360]	; (8008394 <StartScastDMAStream+0x190>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	428b      	cmp	r3, r1
 8008230:	d11d      	bne.n	800826e <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008232:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008234:	0e1b      	lsrs	r3, r3, #24
 8008236:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8008238:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800823a:	0c1b      	lsrs	r3, r3, #16
 800823c:	b2db      	uxtb	r3, r3
 800823e:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8008240:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b2db      	uxtb	r3, r3
 8008246:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008248:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800824a:	0e1b      	lsrs	r3, r3, #24
 800824c:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 800824e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008250:	0c1b      	lsrs	r3, r3, #16
 8008252:	b2db      	uxtb	r3, r3
 8008254:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8008256:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	b2db      	uxtb	r3, r3
 800825c:	469b      	mov	fp, r3
 800825e:	4d4e      	ldr	r5, [pc, #312]	; (8008398 <StartScastDMAStream+0x194>)
 8008260:	231a      	movs	r3, #26
 8008262:	4699      	mov	r9, r3
 8008264:	44a9      	add	r9, r5
				temp2 =dstP;
 8008266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008268:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800826a:	4c4c      	ldr	r4, [pc, #304]	; (800839c <StartScastDMAStream+0x198>)
 800826c:	e05c      	b.n	8008328 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 800826e:	4b4b      	ldr	r3, [pc, #300]	; (800839c <StartScastDMAStream+0x198>)
 8008270:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008272:	0e12      	lsrs	r2, r2, #24
 8008274:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8008276:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008278:	0c12      	lsrs	r2, r2, #16
 800827a:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 800827c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800827e:	0a12      	lsrs	r2, r2, #8
 8008280:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8008282:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008284:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008286:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008288:	0e12      	lsrs	r2, r2, #24
 800828a:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 800828c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800828e:	0c12      	lsrs	r2, r2, #16
 8008290:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8008292:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008294:	0a12      	lsrs	r2, r2, #8
 8008296:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008298:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800829a:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 800829c:	4642      	mov	r2, r8
 800829e:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 80082a0:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 80082a2:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 80082a4:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 80082a6:	4652      	mov	r2, sl
 80082a8:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 80082aa:	220d      	movs	r2, #13
 80082ac:	211c      	movs	r1, #28
 80082ae:	0020      	movs	r0, r4
 80082b0:	f7ff ff82 	bl	80081b8 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 80082b4:	2000      	movs	r0, #0
 80082b6:	b011      	add	sp, #68	; 0x44
 80082b8:	bc3c      	pop	{r2, r3, r4, r5}
 80082ba:	4690      	mov	r8, r2
 80082bc:	4699      	mov	r9, r3
 80082be:	46a2      	mov	sl, r4
 80082c0:	46ab      	mov	fp, r5
 80082c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 80082c4:	9906      	ldr	r1, [sp, #24]
 80082c6:	f7fb fcbd 	bl	8003c44 <FindRoute>
 80082ca:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 80082cc:	0031      	movs	r1, r6
 80082ce:	9806      	ldr	r0, [sp, #24]
 80082d0:	f7fb fcb8 	bl	8003c44 <FindRoute>
			if(route[i] == dstM){
 80082d4:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 80082d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 80082d8:	42b0      	cmp	r0, r6
 80082da:	d134      	bne.n	8008346 <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082dc:	9a08      	ldr	r2, [sp, #32]
 80082de:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80082e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082e2:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80082e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082e6:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80082e8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082ea:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082ee:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80082f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f2:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 80082f4:	465a      	mov	r2, fp
 80082f6:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 80082f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082fa:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 80082fc:	4642      	mov	r2, r8
 80082fe:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8008300:	9a07      	ldr	r2, [sp, #28]
 8008302:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8008304:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8008306:	4653      	mov	r3, sl
 8008308:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 800830a:	0031      	movs	r1, r6
 800830c:	9806      	ldr	r0, [sp, #24]
 800830e:	f7fb fc99 	bl	8003c44 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8008312:	7878      	ldrb	r0, [r7, #1]
 8008314:	220c      	movs	r2, #12
 8008316:	211b      	movs	r1, #27
 8008318:	f7ff ff4e 	bl	80081b8 <SendMessageToModule>
			osDelay(10);
 800831c:	200a      	movs	r0, #10
 800831e:	f006 f8ee 	bl	800e4fe <osDelay>
 8008322:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8008324:	454d      	cmp	r5, r9
 8008326:	d013      	beq.n	8008350 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8008328:	0031      	movs	r1, r6
 800832a:	9806      	ldr	r0, [sp, #24]
 800832c:	f7fb fc8a 	bl	8003c44 <FindRoute>
 8008330:	002f      	movs	r7, r5
		if(route[i]){
 8008332:	7868      	ldrb	r0, [r5, #1]
 8008334:	2800      	cmp	r0, #0
 8008336:	d0f4      	beq.n	8008322 <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8008338:	78a9      	ldrb	r1, [r5, #2]
 800833a:	2900      	cmp	r1, #0
 800833c:	d0c2      	beq.n	80082c4 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 800833e:	f7fb fc81 	bl	8003c44 <FindRoute>
 8008342:	9007      	str	r0, [sp, #28]
 8008344:	e7c2      	b.n	80082cc <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8008346:	7839      	ldrb	r1, [r7, #0]
 8008348:	f7fb fc7c 	bl	8003c44 <FindRoute>
 800834c:	0003      	movs	r3, r0
 800834e:	e7c5      	b.n	80082dc <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8008350:	9806      	ldr	r0, [sp, #24]
 8008352:	42b0      	cmp	r0, r6
 8008354:	d118      	bne.n	8008388 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8008356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800835c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800835e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008360:	4640      	mov	r0, r8
 8008362:	f7ff fba1 	bl	8007aa8 <SetupDMAStreams>
	if(stored){
 8008366:	4653      	mov	r3, sl
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0a3      	beq.n	80082b4 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 800836c:	2300      	movs	r3, #0
 800836e:	9304      	str	r3, [sp, #16]
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	9302      	str	r3, [sp, #8]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800837c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800837e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008380:	4640      	mov	r0, r8
 8008382:	f7fb f963 	bl	800364c <SaveEEstreams>
 8008386:	e795      	b.n	80082b4 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8008388:	0031      	movs	r1, r6
 800838a:	f7fb fc5b 	bl	8003c44 <FindRoute>
 800838e:	900e      	str	r0, [sp, #56]	; 0x38
 8008390:	e7e1      	b.n	8008356 <StartScastDMAStream+0x152>
 8008392:	46c0      	nop			; (mov r8, r8)
 8008394:	20000806 	.word	0x20000806
 8008398:	20006337 	.word	0x20006337
 800839c:	200006c8 	.word	0x200006c8

080083a0 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a2:	46de      	mov	lr, fp
 80083a4:	4657      	mov	r7, sl
 80083a6:	464e      	mov	r6, r9
 80083a8:	4645      	mov	r5, r8
 80083aa:	b5e0      	push	{r5, r6, r7, lr}
 80083ac:	b085      	sub	sp, #20
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 80083ae:	4bd2      	ldr	r3, [pc, #840]	; (80086f8 <BackEndTask+0x358>)
 80083b0:	3b70      	subs	r3, #112	; 0x70
 80083b2:	9302      	str	r3, [sp, #8]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80083b4:	4bd0      	ldr	r3, [pc, #832]	; (80086f8 <BackEndTask+0x358>)
 80083b6:	3b70      	subs	r3, #112	; 0x70
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	e201      	b.n	80087c0 <BackEndTask+0x420>
 80083bc:	1eab      	subs	r3, r5, #2
 80083be:	4699      	mov	r9, r3
 80083c0:	4bce      	ldr	r3, [pc, #824]	; (80086fc <BackEndTask+0x35c>)
 80083c2:	444b      	add	r3, r9
 80083c4:	469a      	mov	sl, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80083c6:	7819      	ldrb	r1, [r3, #0]
 80083c8:	29bf      	cmp	r1, #191	; 0xbf
 80083ca:	dc17      	bgt.n	80083fc <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 80083cc:	4bcc      	ldr	r3, [pc, #816]	; (8008700 <BackEndTask+0x360>)
 80083ce:	7e9e      	ldrb	r6, [r3, #26]
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80083d0:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 80083d2:	2000      	movs	r0, #0
 80083d4:	e004      	b.n	80083e0 <BackEndTask+0x40>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80083d6:	2bbf      	cmp	r3, #191	; 0xbf
 80083d8:	d02c      	beq.n	8008434 <BackEndTask+0x94>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 80083da:	3301      	adds	r3, #1
 80083dc:	2bc0      	cmp	r3, #192	; 0xc0
 80083de:	d00a      	beq.n	80083f6 <BackEndTask+0x56>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 80083e0:	2bbe      	cmp	r3, #190	; 0xbe
 80083e2:	dcf8      	bgt.n	80083d6 <BackEndTask+0x36>
 80083e4:	5ce2      	ldrb	r2, [r4, r3]
 80083e6:	2a48      	cmp	r2, #72	; 0x48
 80083e8:	d1f5      	bne.n	80083d6 <BackEndTask+0x36>
 80083ea:	18e2      	adds	r2, r4, r3
 80083ec:	7852      	ldrb	r2, [r2, #1]
 80083ee:	2a5a      	cmp	r2, #90	; 0x5a
 80083f0:	d1f1      	bne.n	80083d6 <BackEndTask+0x36>
						packetStart =i;
 80083f2:	4ac4      	ldr	r2, [pc, #784]	; (8008704 <BackEndTask+0x364>)
 80083f4:	6013      	str	r3, [r2, #0]
				if(emptyBuffer){
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d000      	beq.n	80083fc <BackEndTask+0x5c>
 80083fa:	e1c1      	b.n	8008780 <BackEndTask+0x3e0>
				totalnumberofrecevedmesg++;
 80083fc:	4ac2      	ldr	r2, [pc, #776]	; (8008708 <BackEndTask+0x368>)
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	3301      	adds	r3, #1
 8008402:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8008404:	4bbf      	ldr	r3, [pc, #764]	; (8008704 <BackEndTask+0x364>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2bbd      	cmp	r3, #189	; 0xbd
 800840a:	d054      	beq.n	80084b6 <BackEndTask+0x116>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 800840c:	2bbe      	cmp	r3, #190	; 0xbe
 800840e:	d100      	bne.n	8008412 <BackEndTask+0x72>
 8008410:	e0bb      	b.n	800858a <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8008412:	2bbf      	cmp	r3, #191	; 0xbf
 8008414:	d100      	bne.n	8008418 <BackEndTask+0x78>
 8008416:	e0bf      	b.n	8008598 <BackEndTask+0x1f8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8008418:	464a      	mov	r2, r9
 800841a:	0052      	lsls	r2, r2, #1
 800841c:	444a      	add	r2, r9
 800841e:	0191      	lsls	r1, r2, #6
 8008420:	4aba      	ldr	r2, [pc, #744]	; (800870c <BackEndTask+0x36c>)
 8008422:	1852      	adds	r2, r2, r1
 8008424:	18d2      	adds	r2, r2, r3
 8008426:	7891      	ldrb	r1, [r2, #2]
 8008428:	4ab9      	ldr	r2, [pc, #740]	; (8008710 <BackEndTask+0x370>)
 800842a:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 800842c:	3303      	adds	r3, #3
 800842e:	4ab9      	ldr	r2, [pc, #740]	; (8008714 <BackEndTask+0x374>)
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e048      	b.n	80084c6 <BackEndTask+0x126>
 8008434:	46a4      	mov	ip, r4
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8008436:	0023      	movs	r3, r4
 8008438:	33bf      	adds	r3, #191	; 0xbf
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b48      	cmp	r3, #72	; 0x48
 800843e:	d004      	beq.n	800844a <BackEndTask+0xaa>
							if(BOS.disableCLI == false){
 8008440:	2e00      	cmp	r6, #0
 8008442:	d000      	beq.n	8008446 <BackEndTask+0xa6>
 8008444:	e19c      	b.n	8008780 <BackEndTask+0x3e0>
 8008446:	4660      	mov	r0, ip
 8008448:	e00c      	b.n	8008464 <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800844a:	7823      	ldrb	r3, [r4, #0]
 800844c:	2b5a      	cmp	r3, #90	; 0x5a
 800844e:	d1f7      	bne.n	8008440 <BackEndTask+0xa0>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8008450:	4bac      	ldr	r3, [pc, #688]	; (8008704 <BackEndTask+0x364>)
 8008452:	22bf      	movs	r2, #191	; 0xbf
 8008454:	601a      	str	r2, [r3, #0]
						break;
 8008456:	e7ce      	b.n	80083f6 <BackEndTask+0x56>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008458:	29bf      	cmp	r1, #191	; 0xbf
 800845a:	d027      	beq.n	80084ac <BackEndTask+0x10c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 800845c:	3101      	adds	r1, #1
 800845e:	29c0      	cmp	r1, #192	; 0xc0
 8008460:	d100      	bne.n	8008464 <BackEndTask+0xc4>
 8008462:	e18d      	b.n	8008780 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008464:	5c43      	ldrb	r3, [r0, r1]
 8008466:	2b0d      	cmp	r3, #13
 8008468:	d1f8      	bne.n	800845c <BackEndTask+0xbc>
 800846a:	29be      	cmp	r1, #190	; 0xbe
 800846c:	dcf4      	bgt.n	8008458 <BackEndTask+0xb8>
 800846e:	1842      	adds	r2, r0, r1
 8008470:	7853      	ldrb	r3, [r2, #1]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1f0      	bne.n	8008458 <BackEndTask+0xb8>
										UARTRxBuf[port - 1][j] =0;
 8008476:	464b      	mov	r3, r9
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	444b      	add	r3, r9
 800847c:	019b      	lsls	r3, r3, #6
 800847e:	4aa3      	ldr	r2, [pc, #652]	; (800870c <BackEndTask+0x36c>)
 8008480:	18d3      	adds	r3, r2, r3
 8008482:	2200      	movs	r2, #0
 8008484:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8008486:	3101      	adds	r1, #1
 8008488:	4653      	mov	r3, sl
 800848a:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 800848c:	4ba2      	ldr	r3, [pc, #648]	; (8008718 <BackEndTask+0x378>)
 800848e:	7819      	ldrb	r1, [r3, #0]
 8008490:	48a2      	ldr	r0, [pc, #648]	; (800871c <BackEndTask+0x37c>)
 8008492:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8008494:	3203      	adds	r2, #3
 8008496:	4641      	mov	r1, r8
 8008498:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 800849a:	701f      	strb	r7, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 800849c:	4ba0      	ldr	r3, [pc, #640]	; (8008720 <BackEndTask+0x380>)
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	2300      	movs	r3, #0
 80084a2:	3a01      	subs	r2, #1
 80084a4:	2100      	movs	r1, #0
 80084a6:	f007 fba1 	bl	800fbec <xTaskGenericNotify>
										break;
 80084aa:	e169      	b.n	8008780 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80084ac:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 80084ae:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1a0      	bne.n	80083f6 <BackEndTask+0x56>
 80084b4:	e7df      	b.n	8008476 <BackEndTask+0xd6>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 80084b6:	0023      	movs	r3, r4
 80084b8:	33bf      	adds	r3, #191	; 0xbf
 80084ba:	781a      	ldrb	r2, [r3, #0]
 80084bc:	4b94      	ldr	r3, [pc, #592]	; (8008710 <BackEndTask+0x370>)
 80084be:	601a      	str	r2, [r3, #0]
					parseStart =0;
 80084c0:	4b94      	ldr	r3, [pc, #592]	; (8008714 <BackEndTask+0x374>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80084c6:	4b92      	ldr	r3, [pc, #584]	; (8008710 <BackEndTask+0x370>)
 80084c8:	681e      	ldr	r6, [r3, #0]
 80084ca:	3603      	adds	r6, #3
 80084cc:	4b8d      	ldr	r3, [pc, #564]	; (8008704 <BackEndTask+0x364>)
 80084ce:	6819      	ldr	r1, [r3, #0]
 80084d0:	1873      	adds	r3, r6, r1
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 80084d2:	2bbf      	cmp	r3, #191	; 0xbf
 80084d4:	dc00      	bgt.n	80084d8 <BackEndTask+0x138>
 80084d6:	e179      	b.n	80087cc <BackEndTask+0x42c>
					packetEnd -= MSG_RX_BUF_SIZE;
 80084d8:	3bc0      	subs	r3, #192	; 0xc0
 80084da:	4a92      	ldr	r2, [pc, #584]	; (8008724 <BackEndTask+0x384>)
 80084dc:	6013      	str	r3, [r2, #0]
				if(packetStart != packetEnd) // Non-empty packet
 80084de:	4b91      	ldr	r3, [pc, #580]	; (8008724 <BackEndTask+0x384>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4299      	cmp	r1, r3
 80084e4:	d100      	bne.n	80084e8 <BackEndTask+0x148>
 80084e6:	e129      	b.n	800873c <BackEndTask+0x39c>
					if(packetStart < packetEnd){
 80084e8:	da5d      	bge.n	80085a6 <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 80084ea:	006b      	lsls	r3, r5, #1
 80084ec:	195b      	adds	r3, r3, r5
 80084ee:	019b      	lsls	r3, r3, #6
 80084f0:	3b81      	subs	r3, #129	; 0x81
 80084f2:	3bff      	subs	r3, #255	; 0xff
 80084f4:	1859      	adds	r1, r3, r1
 80084f6:	4b85      	ldr	r3, [pc, #532]	; (800870c <BackEndTask+0x36c>)
 80084f8:	18c9      	adds	r1, r1, r3
 80084fa:	0032      	movs	r2, r6
 80084fc:	488a      	ldr	r0, [pc, #552]	; (8008728 <BackEndTask+0x388>)
 80084fe:	f00b f9bc 	bl	801387a <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8008502:	4b83      	ldr	r3, [pc, #524]	; (8008710 <BackEndTask+0x370>)
 8008504:	6819      	ldr	r1, [r3, #0]
 8008506:	3103      	adds	r1, #3
 8008508:	b289      	uxth	r1, r1
 800850a:	4e87      	ldr	r6, [pc, #540]	; (8008728 <BackEndTask+0x388>)
 800850c:	0030      	movs	r0, r6
 800850e:	f003 fddb 	bl	800c0c8 <CalculateCRC8>
 8008512:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8008514:	2238      	movs	r2, #56	; 0x38
 8008516:	2100      	movs	r1, #0
 8008518:	0030      	movs	r0, r6
 800851a:	f00b f9b7 	bl	801388c <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 800851e:	4b81      	ldr	r3, [pc, #516]	; (8008724 <BackEndTask+0x384>)
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	464b      	mov	r3, r9
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	444b      	add	r3, r9
 8008528:	019b      	lsls	r3, r3, #6
 800852a:	4978      	ldr	r1, [pc, #480]	; (800870c <BackEndTask+0x36c>)
 800852c:	18cb      	adds	r3, r1, r3
 800852e:	5c9b      	ldrb	r3, [r3, r2]
 8008530:	9901      	ldr	r1, [sp, #4]
 8008532:	428b      	cmp	r3, r1
 8008534:	d04f      	beq.n	80085d6 <BackEndTask+0x236>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8008536:	4b73      	ldr	r3, [pc, #460]	; (8008704 <BackEndTask+0x364>)
 8008538:	6819      	ldr	r1, [r3, #0]
 800853a:	428a      	cmp	r2, r1
 800853c:	dc00      	bgt.n	8008540 <BackEndTask+0x1a0>
 800853e:	e0fd      	b.n	800873c <BackEndTask+0x39c>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8008540:	4b73      	ldr	r3, [pc, #460]	; (8008710 <BackEndTask+0x370>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	3204      	adds	r2, #4
 8008546:	0068      	lsls	r0, r5, #1
 8008548:	1940      	adds	r0, r0, r5
 800854a:	0180      	lsls	r0, r0, #6
 800854c:	3881      	subs	r0, #129	; 0x81
 800854e:	38ff      	subs	r0, #255	; 0xff
 8008550:	1841      	adds	r1, r0, r1
 8008552:	486e      	ldr	r0, [pc, #440]	; (800870c <BackEndTask+0x36c>)
 8008554:	1808      	adds	r0, r1, r0
 8008556:	2100      	movs	r1, #0
 8008558:	f00b f998 	bl	801388c <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 800855c:	4b71      	ldr	r3, [pc, #452]	; (8008724 <BackEndTask+0x384>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2bbf      	cmp	r3, #191	; 0xbf
 8008562:	d100      	bne.n	8008566 <BackEndTask+0x1c6>
 8008564:	e101      	b.n	800876a <BackEndTask+0x3ca>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8008566:	3301      	adds	r3, #1
 8008568:	4652      	mov	r2, sl
 800856a:	7013      	strb	r3, [r2, #0]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 800856c:	00eb      	lsls	r3, r5, #3
 800856e:	1b5b      	subs	r3, r3, r5
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	3b6f      	subs	r3, #111	; 0x6f
 8008574:	4a60      	ldr	r2, [pc, #384]	; (80086f8 <BackEndTask+0x358>)
 8008576:	5cd0      	ldrb	r0, [r2, r3]
 8008578:	2200      	movs	r2, #0
 800857a:	212d      	movs	r1, #45	; 0x2d
 800857c:	f7ff fe1c 	bl	80081b8 <SendMessageToModule>
				++rejectedMsg;
 8008580:	4a6a      	ldr	r2, [pc, #424]	; (800872c <BackEndTask+0x38c>)
 8008582:	8813      	ldrh	r3, [r2, #0]
 8008584:	3301      	adds	r3, #1
 8008586:	8013      	strh	r3, [r2, #0]
 8008588:	e107      	b.n	800879a <BackEndTask+0x3fa>
					packetLength =UARTRxBuf[port - 1][0];
 800858a:	7822      	ldrb	r2, [r4, #0]
 800858c:	4b60      	ldr	r3, [pc, #384]	; (8008710 <BackEndTask+0x370>)
 800858e:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8008590:	4b60      	ldr	r3, [pc, #384]	; (8008714 <BackEndTask+0x374>)
 8008592:	2201      	movs	r2, #1
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	e796      	b.n	80084c6 <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8008598:	7862      	ldrb	r2, [r4, #1]
 800859a:	4b5d      	ldr	r3, [pc, #372]	; (8008710 <BackEndTask+0x370>)
 800859c:	601a      	str	r2, [r3, #0]
					parseStart =2;
 800859e:	4b5d      	ldr	r3, [pc, #372]	; (8008714 <BackEndTask+0x374>)
 80085a0:	2202      	movs	r2, #2
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e78f      	b.n	80084c6 <BackEndTask+0x126>
						MSG_RX_BUF_SIZE - packetStart);
 80085a6:	22c0      	movs	r2, #192	; 0xc0
 80085a8:	1a52      	subs	r2, r2, r1
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 80085aa:	006b      	lsls	r3, r5, #1
 80085ac:	195b      	adds	r3, r3, r5
 80085ae:	019b      	lsls	r3, r3, #6
 80085b0:	3b81      	subs	r3, #129	; 0x81
 80085b2:	3bff      	subs	r3, #255	; 0xff
 80085b4:	1859      	adds	r1, r3, r1
 80085b6:	4b55      	ldr	r3, [pc, #340]	; (800870c <BackEndTask+0x36c>)
 80085b8:	18c9      	adds	r1, r1, r3
 80085ba:	9201      	str	r2, [sp, #4]
 80085bc:	485a      	ldr	r0, [pc, #360]	; (8008728 <BackEndTask+0x388>)
 80085be:	f00b f95c 	bl	801387a <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 80085c2:	4959      	ldr	r1, [pc, #356]	; (8008728 <BackEndTask+0x388>)
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	469c      	mov	ip, r3
 80085c8:	4461      	add	r1, ip
 80085ca:	0008      	movs	r0, r1
 80085cc:	1af2      	subs	r2, r6, r3
 80085ce:	0021      	movs	r1, r4
 80085d0:	f00b f953 	bl	801387a <memcpy>
 80085d4:	e795      	b.n	8008502 <BackEndTask+0x162>
						portStatus[port] =MSG;
 80085d6:	2301      	movs	r3, #1
 80085d8:	4642      	mov	r2, r8
 80085da:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 80085dc:	4b4c      	ldr	r3, [pc, #304]	; (8008710 <BackEndTask+0x370>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4698      	mov	r8, r3
 80085e2:	1eab      	subs	r3, r5, #2
 80085e4:	4a52      	ldr	r2, [pc, #328]	; (8008730 <BackEndTask+0x390>)
 80085e6:	4641      	mov	r1, r8
 80085e8:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 80085ea:	4b4a      	ldr	r3, [pc, #296]	; (8008714 <BackEndTask+0x374>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	22bf      	movs	r2, #191	; 0xbf
 80085f0:	1ad2      	subs	r2, r2, r3
 80085f2:	4590      	cmp	r8, r2
 80085f4:	dc41      	bgt.n	800867a <BackEndTask+0x2da>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 80085f6:	00e8      	lsls	r0, r5, #3
 80085f8:	1b40      	subs	r0, r0, r5
 80085fa:	00c0      	lsls	r0, r0, #3
 80085fc:	9a03      	ldr	r2, [sp, #12]
 80085fe:	4694      	mov	ip, r2
 8008600:	4460      	add	r0, ip
 8008602:	0069      	lsls	r1, r5, #1
 8008604:	1949      	adds	r1, r1, r5
 8008606:	0189      	lsls	r1, r1, #6
 8008608:	3981      	subs	r1, #129	; 0x81
 800860a:	39ff      	subs	r1, #255	; 0xff
 800860c:	18c9      	adds	r1, r1, r3
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <BackEndTask+0x36c>)
 8008610:	18c9      	adds	r1, r1, r3
 8008612:	4642      	mov	r2, r8
 8008614:	f00b f931 	bl	801387a <memcpy>
						if(packetStart < packetEnd){
 8008618:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <BackEndTask+0x364>)
 800861a:	6819      	ldr	r1, [r3, #0]
 800861c:	4b41      	ldr	r3, [pc, #260]	; (8008724 <BackEndTask+0x384>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4299      	cmp	r1, r3
 8008622:	da4a      	bge.n	80086ba <BackEndTask+0x31a>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8008624:	4b3a      	ldr	r3, [pc, #232]	; (8008710 <BackEndTask+0x370>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	3204      	adds	r2, #4
 800862a:	0068      	lsls	r0, r5, #1
 800862c:	1940      	adds	r0, r0, r5
 800862e:	0180      	lsls	r0, r0, #6
 8008630:	3881      	subs	r0, #129	; 0x81
 8008632:	38ff      	subs	r0, #255	; 0xff
 8008634:	1840      	adds	r0, r0, r1
 8008636:	4b35      	ldr	r3, [pc, #212]	; (800870c <BackEndTask+0x36c>)
 8008638:	18c0      	adds	r0, r0, r3
 800863a:	2100      	movs	r1, #0
 800863c:	f00b f926 	bl	801388c <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8008640:	4b38      	ldr	r3, [pc, #224]	; (8008724 <BackEndTask+0x384>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2bbf      	cmp	r3, #191	; 0xbf
 8008646:	d04f      	beq.n	80086e8 <BackEndTask+0x348>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8008648:	3301      	adds	r3, #1
 800864a:	4652      	mov	r2, sl
 800864c:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800864e:	4a39      	ldr	r2, [pc, #228]	; (8008734 <BackEndTask+0x394>)
 8008650:	8813      	ldrh	r3, [r2, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 8008656:	00eb      	lsls	r3, r5, #3
 8008658:	1b5b      	subs	r3, r3, r5
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	3b70      	subs	r3, #112	; 0x70
 800865e:	4a26      	ldr	r2, [pc, #152]	; (80086f8 <BackEndTask+0x358>)
 8008660:	5cd3      	ldrb	r3, [r2, r3]
 8008662:	4a35      	ldr	r2, [pc, #212]	; (8008738 <BackEndTask+0x398>)
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d003      	beq.n	8008672 <BackEndTask+0x2d2>
 800866a:	3302      	adds	r3, #2
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b01      	cmp	r3, #1
 8008670:	d83e      	bhi.n	80086f0 <BackEndTask+0x350>
							NotifyMessagingTask(port);
 8008672:	0038      	movs	r0, r7
 8008674:	f7ff faf4 	bl	8007c60 <NotifyMessagingTask>
 8008678:	e082      	b.n	8008780 <BackEndTask+0x3e0>
 800867a:	00ee      	lsls	r6, r5, #3
 800867c:	1b76      	subs	r6, r6, r5
 800867e:	00f6      	lsls	r6, r6, #3
							MSG_RX_BUF_SIZE - parseStart);
 8008680:	22c0      	movs	r2, #192	; 0xc0
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	4691      	mov	r9, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8008686:	9a02      	ldr	r2, [sp, #8]
 8008688:	1990      	adds	r0, r2, r6
 800868a:	0069      	lsls	r1, r5, #1
 800868c:	1949      	adds	r1, r1, r5
 800868e:	0189      	lsls	r1, r1, #6
 8008690:	3981      	subs	r1, #129	; 0x81
 8008692:	39ff      	subs	r1, #255	; 0xff
 8008694:	18c9      	adds	r1, r1, r3
 8008696:	4b1d      	ldr	r3, [pc, #116]	; (800870c <BackEndTask+0x36c>)
 8008698:	18c9      	adds	r1, r1, r3
 800869a:	464a      	mov	r2, r9
 800869c:	f00b f8ed 	bl	801387a <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 80086a0:	0030      	movs	r0, r6
 80086a2:	3870      	subs	r0, #112	; 0x70
 80086a4:	4448      	add	r0, r9
 80086a6:	4b14      	ldr	r3, [pc, #80]	; (80086f8 <BackEndTask+0x358>)
 80086a8:	469c      	mov	ip, r3
 80086aa:	4460      	add	r0, ip
 80086ac:	4643      	mov	r3, r8
 80086ae:	464a      	mov	r2, r9
 80086b0:	1a9a      	subs	r2, r3, r2
 80086b2:	0021      	movs	r1, r4
 80086b4:	f00b f8e1 	bl	801387a <memcpy>
 80086b8:	e7ae      	b.n	8008618 <BackEndTask+0x278>
							MSG_RX_BUF_SIZE - packetStart);
 80086ba:	26c0      	movs	r6, #192	; 0xc0
 80086bc:	1a76      	subs	r6, r6, r1
							memset(&UARTRxBuf[port - 1][packetStart],0,
 80086be:	0068      	lsls	r0, r5, #1
 80086c0:	1940      	adds	r0, r0, r5
 80086c2:	0180      	lsls	r0, r0, #6
 80086c4:	3881      	subs	r0, #129	; 0x81
 80086c6:	38ff      	subs	r0, #255	; 0xff
 80086c8:	1840      	adds	r0, r0, r1
 80086ca:	4b10      	ldr	r3, [pc, #64]	; (800870c <BackEndTask+0x36c>)
 80086cc:	18c0      	adds	r0, r0, r3
 80086ce:	0032      	movs	r2, r6
 80086d0:	2100      	movs	r1, #0
 80086d2:	f00b f8db 	bl	801388c <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 80086d6:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <BackEndTask+0x370>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	3204      	adds	r2, #4
 80086dc:	1b92      	subs	r2, r2, r6
 80086de:	2100      	movs	r1, #0
 80086e0:	0020      	movs	r0, r4
 80086e2:	f00b f8d3 	bl	801388c <memset>
 80086e6:	e7ab      	b.n	8008640 <BackEndTask+0x2a0>
							UARTRxBufIndex[port - 1] =0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	4652      	mov	r2, sl
 80086ec:	7013      	strb	r3, [r2, #0]
 80086ee:	e7ae      	b.n	800864e <BackEndTask+0x2ae>
							ForwardReceivedMessage(port);
 80086f0:	0038      	movs	r0, r7
 80086f2:	f7ff fcf9 	bl	80080e8 <ForwardReceivedMessage>
 80086f6:	e043      	b.n	8008780 <BackEndTask+0x3e0>
 80086f8:	20000544 	.word	0x20000544
 80086fc:	20000c84 	.word	0x20000c84
 8008700:	20006270 	.word	0x20006270
 8008704:	20000f80 	.word	0x20000f80
 8008708:	20000fdc 	.word	0x20000fdc
 800870c:	20000a44 	.word	0x20000a44
 8008710:	20000f7c 	.word	0x20000f7c
 8008714:	20000f84 	.word	0x20000f84
 8008718:	200002b0 	.word	0x200002b0
 800871c:	20000870 	.word	0x20000870
 8008720:	20000de0 	.word	0x20000de0
 8008724:	20000f78 	.word	0x20000f78
 8008728:	20000c88 	.word	0x20000c88
 800872c:	20000fd8 	.word	0x20000fd8
 8008730:	200006c4 	.word	0x200006c4
 8008734:	20000e20 	.word	0x20000e20
 8008738:	20000806 	.word	0x20000806
					MSG_RX_BUF_SIZE - packetStart);
 800873c:	26c0      	movs	r6, #192	; 0xc0
 800873e:	1a76      	subs	r6, r6, r1
					memset(&UARTRxBuf[port - 1][packetStart],0,
 8008740:	0068      	lsls	r0, r5, #1
 8008742:	1940      	adds	r0, r0, r5
 8008744:	0180      	lsls	r0, r0, #6
 8008746:	3881      	subs	r0, #129	; 0x81
 8008748:	38ff      	subs	r0, #255	; 0xff
 800874a:	1841      	adds	r1, r0, r1
 800874c:	4821      	ldr	r0, [pc, #132]	; (80087d4 <BackEndTask+0x434>)
 800874e:	1808      	adds	r0, r1, r0
 8008750:	0032      	movs	r2, r6
 8008752:	2100      	movs	r1, #0
 8008754:	f00b f89a 	bl	801388c <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8008758:	4b1f      	ldr	r3, [pc, #124]	; (80087d8 <BackEndTask+0x438>)
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	3204      	adds	r2, #4
 800875e:	1b92      	subs	r2, r2, r6
 8008760:	2100      	movs	r1, #0
 8008762:	0020      	movs	r0, r4
 8008764:	f00b f892 	bl	801388c <memset>
 8008768:	e6f8      	b.n	800855c <BackEndTask+0x1bc>
					UARTRxBufIndex[port - 1] =0;
 800876a:	2300      	movs	r3, #0
 800876c:	4652      	mov	r2, sl
 800876e:	7013      	strb	r3, [r2, #0]
 8008770:	e6fc      	b.n	800856c <BackEndTask+0x1cc>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 8008772:	0038      	movs	r0, r7
 8008774:	f005 fd04 	bl	800e180 <GetUart>
 8008778:	22c0      	movs	r2, #192	; 0xc0
 800877a:	0021      	movs	r1, r4
 800877c:	f00a fb66 	bl	8012e4c <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8008780:	3701      	adds	r7, #1
 8008782:	b2ff      	uxtb	r7, r7
 8008784:	3501      	adds	r5, #1
 8008786:	34c0      	adds	r4, #192	; 0xc0
 8008788:	2f04      	cmp	r7, #4
 800878a:	d017      	beq.n	80087bc <BackEndTask+0x41c>
 800878c:	1e6b      	subs	r3, r5, #1
 800878e:	445b      	add	r3, fp
 8008790:	4698      	mov	r8, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d800      	bhi.n	800879a <BackEndTask+0x3fa>
 8008798:	e610      	b.n	80083bc <BackEndTask+0x1c>
 800879a:	1eab      	subs	r3, r5, #2
 800879c:	4a0f      	ldr	r2, [pc, #60]	; (80087dc <BackEndTask+0x43c>)
 800879e:	4694      	mov	ip, r2
 80087a0:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 80087a2:	781a      	ldrb	r2, [r3, #0]
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	d0eb      	beq.n	8008780 <BackEndTask+0x3e0>
				MsgDMAStopped[port - 1] = false;
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 80087ac:	4643      	mov	r3, r8
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	d1de      	bne.n	8008772 <BackEndTask+0x3d2>
					portStatus[port] =FREE;
 80087b4:	2300      	movs	r3, #0
 80087b6:	4642      	mov	r2, r8
 80087b8:	7013      	strb	r3, [r2, #0]
 80087ba:	e7da      	b.n	8008772 <BackEndTask+0x3d2>
			}
		}

		taskYIELD();
 80087bc:	f007 fc84 	bl	80100c8 <vPortYield>
 80087c0:	4c04      	ldr	r4, [pc, #16]	; (80087d4 <BackEndTask+0x434>)
void BackEndTask(void *argument){
 80087c2:	2502      	movs	r5, #2
		for(port =1; port <= NumOfPorts; port++){
 80087c4:	2701      	movs	r7, #1
 80087c6:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <BackEndTask+0x440>)
 80087c8:	469b      	mov	fp, r3
 80087ca:	e7df      	b.n	800878c <BackEndTask+0x3ec>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 80087cc:	4a05      	ldr	r2, [pc, #20]	; (80087e4 <BackEndTask+0x444>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	e685      	b.n	80084de <BackEndTask+0x13e>
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	20000a44 	.word	0x20000a44
 80087d8:	20000f7c 	.word	0x20000f7c
 80087dc:	20000a40 	.word	0x20000a40
 80087e0:	20000870 	.word	0x20000870
 80087e4:	20000f78 	.word	0x20000f78

080087e8 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 80087e8:	2001      	movs	r0, #1
 80087ea:	4770      	bx	lr

080087ec <PxMessagingTask>:
void PxMessagingTask(void *argument){
 80087ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ee:	46de      	mov	lr, fp
 80087f0:	4657      	mov	r7, sl
 80087f2:	464e      	mov	r6, r9
 80087f4:	4645      	mov	r5, r8
 80087f6:	b5e0      	push	{r5, r6, r7, lr}
 80087f8:	b093      	sub	sp, #76	; 0x4c
	port =(int8_t )(unsigned )argument;
 80087fa:	b2c3      	uxtb	r3, r0
 80087fc:	9308      	str	r3, [sp, #32]
 80087fe:	23ff      	movs	r3, #255	; 0xff
 8008800:	4003      	ands	r3, r0
 8008802:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 8008804:	1e5d      	subs	r5, r3, #1
 8008806:	00eb      	lsls	r3, r5, #3
 8008808:	1b5b      	subs	r3, r3, r5
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800880e:	4ae4      	ldr	r2, [pc, #912]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008810:	18d3      	adds	r3, r2, r3
 8008812:	9306      	str	r3, [sp, #24]
	HAL_StatusTypeDef status =HAL_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8008818:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 800881a:	000e      	movs	r6, r1
 800881c:	1853      	adds	r3, r2, r1
 800881e:	3302      	adds	r3, #2
 8008820:	9309      	str	r3, [sp, #36]	; 0x24
 8008822:	468a      	mov	sl, r1
 8008824:	e062      	b.n	80088ec <PxMessagingTask+0x100>
				longMessage =1;
 8008826:	4adf      	ldr	r2, [pc, #892]	; (8008ba4 <PxMessagingTask+0x3b8>)
 8008828:	2101      	movs	r1, #1
 800882a:	7011      	strb	r1, [r2, #0]
 800882c:	e06f      	b.n	800890e <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800882e:	4bdc      	ldr	r3, [pc, #880]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008830:	199b      	adds	r3, r3, r6
 8008832:	1818      	adds	r0, r3, r0
 8008834:	78c7      	ldrb	r7, [r0, #3]
 8008836:	e08e      	b.n	8008956 <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 8008838:	4bdb      	ldr	r3, [pc, #876]	; (8008ba8 <PxMessagingTask+0x3bc>)
 800883a:	2200      	movs	r2, #0
 800883c:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800883e:	212c      	movs	r1, #44	; 0x2c
 8008840:	9804      	ldr	r0, [sp, #16]
 8008842:	f7ff fcb9 	bl	80081b8 <SendMessageToModule>
 8008846:	e089      	b.n	800895c <PxMessagingTask+0x170>
					Delay_ms(100);
 8008848:	2064      	movs	r0, #100	; 0x64
 800884a:	f007 fda9 	bl	80103a0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800884e:	2300      	movs	r3, #0
 8008850:	9a08      	ldr	r2, [sp, #32]
 8008852:	4659      	mov	r1, fp
 8008854:	9804      	ldr	r0, [sp, #16]
 8008856:	f001 fd95 	bl	800a384 <remoteBootloaderUpdate>
 800885a:	e02e      	b.n	80088ba <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800885c:	4bd3      	ldr	r3, [pc, #844]	; (8008bac <PxMessagingTask+0x3c0>)
 800885e:	5d5a      	ldrb	r2, [r3, r5]
 8008860:	4bcf      	ldr	r3, [pc, #828]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008862:	199b      	adds	r3, r3, r6
 8008864:	189b      	adds	r3, r3, r2
 8008866:	3b01      	subs	r3, #1
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	4ad1      	ldr	r2, [pc, #836]	; (8008bb0 <PxMessagingTask+0x3c4>)
 800886c:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800886e:	2103      	movs	r1, #3
 8008870:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008872:	429a      	cmp	r2, r3
 8008874:	d01e      	beq.n	80088b4 <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8008876:	4ace      	ldr	r2, [pc, #824]	; (8008bb0 <PxMessagingTask+0x3c4>)
 8008878:	7013      	strb	r3, [r2, #0]
 800887a:	4ace      	ldr	r2, [pc, #824]	; (8008bb4 <PxMessagingTask+0x3c8>)
 800887c:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800887e:	9908      	ldr	r1, [sp, #32]
 8008880:	20ff      	movs	r0, #255	; 0xff
 8008882:	f7ff fc51 	bl	8008128 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8008886:	4bc9      	ldr	r3, [pc, #804]	; (8008bac <PxMessagingTask+0x3c0>)
 8008888:	5d5a      	ldrb	r2, [r3, r5]
 800888a:	4bc5      	ldr	r3, [pc, #788]	; (8008ba0 <PxMessagingTask+0x3b4>)
 800888c:	199b      	adds	r3, r3, r6
 800888e:	189b      	adds	r3, r3, r2
 8008890:	3b01      	subs	r3, #1
 8008892:	2200      	movs	r2, #0
 8008894:	701a      	strb	r2, [r3, #0]
				shift +=4;
 8008896:	9c05      	ldr	r4, [sp, #20]
 8008898:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800889a:	4bc4      	ldr	r3, [pc, #784]	; (8008bac <PxMessagingTask+0x3c0>)
 800889c:	5d59      	ldrb	r1, [r3, r5]
 800889e:	1b0a      	subs	r2, r1, r4
 80088a0:	b2d3      	uxtb	r3, r2
 80088a2:	9305      	str	r3, [sp, #20]
					switch(code){
 80088a4:	2f2d      	cmp	r7, #45	; 0x2d
 80088a6:	d901      	bls.n	80088ac <PxMessagingTask+0xc0>
 80088a8:	f001 fa9e 	bl	8009de8 <PxMessagingTask+0x15fc>
 80088ac:	00bb      	lsls	r3, r7, #2
 80088ae:	4ac2      	ldr	r2, [pc, #776]	; (8008bb8 <PxMessagingTask+0x3cc>)
 80088b0:	58d3      	ldr	r3, [r2, r3]
 80088b2:	469f      	mov	pc, r3
				if(result == BOS_OK){
 80088b4:	464b      	mov	r3, r9
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0ed      	beq.n	8008896 <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 80088ba:	464b      	mov	r3, r9
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <PxMessagingTask+0xd8>
 80088c0:	f001 fab4 	bl	8009e2c <PxMessagingTask+0x1640>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80088c4:	4cb9      	ldr	r4, [pc, #740]	; (8008bac <PxMessagingTask+0x3c0>)
 80088c6:	5d62      	ldrb	r2, [r4, r5]
 80088c8:	2100      	movs	r1, #0
 80088ca:	9806      	ldr	r0, [sp, #24]
 80088cc:	f00a ffde 	bl	801388c <memset>
		messageLength[port - 1] =0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80088d4:	4bb9      	ldr	r3, [pc, #740]	; (8008bbc <PxMessagingTask+0x3d0>)
 80088d6:	4642      	mov	r2, r8
 80088d8:	5c9b      	ldrb	r3, [r3, r2]
 80088da:	3b02      	subs	r3, #2
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d903      	bls.n	80088e8 <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 80088e0:	4bb6      	ldr	r3, [pc, #728]	; (8008bbc <PxMessagingTask+0x3d0>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	4641      	mov	r1, r8
 80088e6:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 80088e8:	f007 fbee 	bl	80100c8 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80088ec:	2101      	movs	r1, #1
 80088ee:	4249      	negs	r1, r1
 80088f0:	2001      	movs	r0, #1
 80088f2:	f007 f92f 	bl	800fb54 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 80088f6:	4bad      	ldr	r3, [pc, #692]	; (8008bac <PxMessagingTask+0x3c0>)
 80088f8:	5d5b      	ldrb	r3, [r3, r5]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0dd      	beq.n	80088ba <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 80088fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	b25a      	sxtb	r2, r3
 8008904:	2a00      	cmp	r2, #0
 8008906:	db8e      	blt.n	8008826 <PxMessagingTask+0x3a>
				longMessage =0;
 8008908:	4aa6      	ldr	r2, [pc, #664]	; (8008ba4 <PxMessagingTask+0x3b8>)
 800890a:	2100      	movs	r1, #0
 800890c:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800890e:	4aa4      	ldr	r2, [pc, #656]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008910:	5cb1      	ldrb	r1, [r6, r2]
 8008912:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 8008914:	1992      	adds	r2, r2, r6
 8008916:	7852      	ldrb	r2, [r2, #1]
 8008918:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800891a:	2201      	movs	r2, #1
 800891c:	0010      	movs	r0, r2
 800891e:	4018      	ands	r0, r3
			shift =0;
 8008920:	9005      	str	r0, [sp, #20]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 8008922:	49a1      	ldr	r1, [pc, #644]	; (8008ba8 <PxMessagingTask+0x3bc>)
 8008924:	071c      	lsls	r4, r3, #28
 8008926:	0fa4      	lsrs	r4, r4, #30
 8008928:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800892a:	091c      	lsrs	r4, r3, #4
 800892c:	4022      	ands	r2, r4
 800892e:	0014      	movs	r4, r2
 8008930:	1e67      	subs	r7, r4, #1
 8008932:	41bc      	sbcs	r4, r7
 8008934:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 8008936:	2460      	movs	r4, #96	; 0x60
 8008938:	401c      	ands	r4, r3
 800893a:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 800893c:	079b      	lsls	r3, r3, #30
 800893e:	d400      	bmi.n	8008942 <PxMessagingTask+0x156>
 8008940:	e775      	b.n	800882e <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 8008942:	4b97      	ldr	r3, [pc, #604]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008944:	199b      	adds	r3, r3, r6
 8008946:	181b      	adds	r3, r3, r0
 8008948:	7919      	ldrb	r1, [r3, #4]
 800894a:	0209      	lsls	r1, r1, #8
 800894c:	78df      	ldrb	r7, [r3, #3]
 800894e:	187f      	adds	r7, r7, r1
 8008950:	b2bf      	uxth	r7, r7
				++shift;
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	9305      	str	r3, [sp, #20]
			if(true == BOSMessaging.received_Acknowledgment){
 8008956:	2a00      	cmp	r2, #0
 8008958:	d000      	beq.n	800895c <PxMessagingTask+0x170>
 800895a:	e76d      	b.n	8008838 <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800895c:	465b      	mov	r3, fp
 800895e:	3b01      	subs	r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2bfc      	cmp	r3, #252	; 0xfc
 8008964:	d901      	bls.n	800896a <PxMessagingTask+0x17e>
 8008966:	f001 fa9b 	bl	8009ea0 <PxMessagingTask+0x16b4>
 800896a:	4b95      	ldr	r3, [pc, #596]	; (8008bc0 <PxMessagingTask+0x3d4>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	455b      	cmp	r3, fp
 8008970:	d101      	bne.n	8008976 <PxMessagingTask+0x18a>
 8008972:	f001 fa95 	bl	8009ea0 <PxMessagingTask+0x16b4>
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <PxMessagingTask+0x192>
 800897a:	f001 fa8b 	bl	8009e94 <PxMessagingTask+0x16a8>
				ForwardReceivedMessage(port);
 800897e:	9808      	ldr	r0, [sp, #32]
 8008980:	f7ff fbb2 	bl	80080e8 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 8008984:	4b88      	ldr	r3, [pc, #544]	; (8008ba8 <PxMessagingTask+0x3bc>)
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 800898c:	4b8d      	ldr	r3, [pc, #564]	; (8008bc4 <PxMessagingTask+0x3d8>)
 800898e:	2203      	movs	r2, #3
 8008990:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008992:	2f19      	cmp	r7, #25
 8008994:	d100      	bne.n	8008998 <PxMessagingTask+0x1ac>
 8008996:	e757      	b.n	8008848 <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008998:	2f1a      	cmp	r7, #26
 800899a:	d18e      	bne.n	80088ba <PxMessagingTask+0xce>
					Delay_ms(100);
 800899c:	2064      	movs	r0, #100	; 0x64
 800899e:	f007 fcff 	bl	80103a0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 80089a2:	4b7f      	ldr	r3, [pc, #508]	; (8008ba0 <PxMessagingTask+0x3b4>)
 80089a4:	199b      	adds	r3, r3, r6
 80089a6:	9a05      	ldr	r2, [sp, #20]
 80089a8:	5c9b      	ldrb	r3, [r3, r2]
 80089aa:	9a08      	ldr	r2, [sp, #32]
 80089ac:	4659      	mov	r1, fp
 80089ae:	9804      	ldr	r0, [sp, #16]
 80089b0:	f001 fce8 	bl	800a384 <remoteBootloaderUpdate>
 80089b4:	e781      	b.n	80088ba <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 80089b6:	9b05      	ldr	r3, [sp, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	1e58      	subs	r0, r3, #1
 80089c0:	0042      	lsls	r2, r0, #1
 80089c2:	4b81      	ldr	r3, [pc, #516]	; (8008bc8 <PxMessagingTask+0x3dc>)
 80089c4:	5ad3      	ldrh	r3, [r2, r3]
 80089c6:	4652      	mov	r2, sl
 80089c8:	1911      	adds	r1, r2, r4
 80089ca:	4a75      	ldr	r2, [pc, #468]	; (8008ba0 <PxMessagingTask+0x3b4>)
 80089cc:	1889      	adds	r1, r1, r2
 80089ce:	3201      	adds	r2, #1
 80089d0:	4452      	add	r2, sl
 80089d2:	1914      	adds	r4, r2, r4
 80089d4:	9a05      	ldr	r2, [sp, #20]
 80089d6:	3a01      	subs	r2, #1
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	18a4      	adds	r4, r4, r2
 80089dc:	2780      	movs	r7, #128	; 0x80
 80089de:	023f      	lsls	r7, r7, #8
 80089e0:	4684      	mov	ip, r0
 80089e2:	780a      	ldrb	r2, [r1, #0]
 80089e4:	3a01      	subs	r2, #1
 80089e6:	0038      	movs	r0, r7
 80089e8:	4110      	asrs	r0, r2
 80089ea:	4303      	orrs	r3, r0
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 80089f0:	42a1      	cmp	r1, r4
 80089f2:	d1f6      	bne.n	80089e2 <PxMessagingTask+0x1f6>
 80089f4:	4660      	mov	r0, ip
 80089f6:	0040      	lsls	r0, r0, #1
 80089f8:	4a73      	ldr	r2, [pc, #460]	; (8008bc8 <PxMessagingTask+0x3dc>)
 80089fa:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 80089fc:	4b73      	ldr	r3, [pc, #460]	; (8008bcc <PxMessagingTask+0x3e0>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	701a      	strb	r2, [r3, #0]
							break;
 8008a02:	2300      	movs	r3, #0
 8008a04:	4699      	mov	r9, r3
 8008a06:	e75d      	b.n	80088c4 <PxMessagingTask+0xd8>
							indMode =IND_PING;
 8008a08:	4b6e      	ldr	r3, [pc, #440]	; (8008bc4 <PxMessagingTask+0x3d8>)
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008a0e:	200a      	movs	r0, #10
 8008a10:	f005 fd75 	bl	800e4fe <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008a14:	4b64      	ldr	r3, [pc, #400]	; (8008ba8 <PxMessagingTask+0x3bc>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	4393      	bics	r3, r2
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4691      	mov	r9, r2
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d000      	beq.n	8008a26 <PxMessagingTask+0x23a>
 8008a24:	e74e      	b.n	80088c4 <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 8008a26:	2102      	movs	r1, #2
 8008a28:	9804      	ldr	r0, [sp, #16]
 8008a2a:	f7ff fbc5 	bl	80081b8 <SendMessageToModule>
 8008a2e:	e749      	b.n	80088c4 <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 8008a30:	4b63      	ldr	r3, [pc, #396]	; (8008bc0 <PxMessagingTask+0x3d4>)
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	0093      	lsls	r3, r2, #2
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	4a65      	ldr	r2, [pc, #404]	; (8008bd0 <PxMessagingTask+0x3e4>)
 8008a3c:	5c9b      	ldrb	r3, [r3, r2]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d118      	bne.n	8008a74 <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 8008a42:	9a04      	ldr	r2, [sp, #16]
 8008a44:	4963      	ldr	r1, [pc, #396]	; (8008bd4 <PxMessagingTask+0x3e8>)
 8008a46:	4864      	ldr	r0, [pc, #400]	; (8008bd8 <PxMessagingTask+0x3ec>)
 8008a48:	f00b fcae 	bl	80143a8 <siprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008a4c:	4c62      	ldr	r4, [pc, #392]	; (8008bd8 <PxMessagingTask+0x3ec>)
 8008a4e:	0020      	movs	r0, r4
 8008a50:	f7f7 fb62 	bl	8000118 <strlen>
 8008a54:	b282      	uxth	r2, r0
 8008a56:	4b61      	ldr	r3, [pc, #388]	; (8008bdc <PxMessagingTask+0x3f0>)
 8008a58:	7818      	ldrb	r0, [r3, #0]
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	3333      	adds	r3, #51	; 0x33
 8008a62:	0021      	movs	r1, r4
 8008a64:	f005 fba0 	bl	800e1a8 <writePxMutex>
							responseStatus =BOS_OK;
 8008a68:	4b58      	ldr	r3, [pc, #352]	; (8008bcc <PxMessagingTask+0x3e0>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
							break;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	4699      	mov	r9, r3
 8008a72:	e727      	b.n	80088c4 <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8008a74:	230a      	movs	r3, #10
 8008a76:	9904      	ldr	r1, [sp, #16]
 8008a78:	434b      	muls	r3, r1
 8008a7a:	4a55      	ldr	r2, [pc, #340]	; (8008bd0 <PxMessagingTask+0x3e4>)
 8008a7c:	189b      	adds	r3, r3, r2
 8008a7e:	000a      	movs	r2, r1
 8008a80:	4957      	ldr	r1, [pc, #348]	; (8008be0 <PxMessagingTask+0x3f4>)
 8008a82:	4855      	ldr	r0, [pc, #340]	; (8008bd8 <PxMessagingTask+0x3ec>)
 8008a84:	f00b fc90 	bl	80143a8 <siprintf>
 8008a88:	e7e0      	b.n	8008a4c <PxMessagingTask+0x260>
							IND_ON();
 8008a8a:	2180      	movs	r1, #128	; 0x80
 8008a8c:	2090      	movs	r0, #144	; 0x90
 8008a8e:	2201      	movs	r2, #1
 8008a90:	0109      	lsls	r1, r1, #4
 8008a92:	05c0      	lsls	r0, r0, #23
 8008a94:	f009 f8e4 	bl	8011c60 <HAL_GPIO_WritePin>
							break;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4699      	mov	r9, r3
 8008a9c:	e712      	b.n	80088c4 <PxMessagingTask+0xd8>
							IND_OFF();
 8008a9e:	2180      	movs	r1, #128	; 0x80
 8008aa0:	2090      	movs	r0, #144	; 0x90
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	0109      	lsls	r1, r1, #4
 8008aa6:	05c0      	lsls	r0, r0, #23
 8008aa8:	f009 f8da 	bl	8011c60 <HAL_GPIO_WritePin>
							break;
 8008aac:	2300      	movs	r3, #0
 8008aae:	4699      	mov	r9, r3
 8008ab0:	e708      	b.n	80088c4 <PxMessagingTask+0xd8>
							IND_toggle();
 8008ab2:	2180      	movs	r1, #128	; 0x80
 8008ab4:	2090      	movs	r0, #144	; 0x90
 8008ab6:	0109      	lsls	r1, r1, #4
 8008ab8:	05c0      	lsls	r0, r0, #23
 8008aba:	f009 f8d7 	bl	8011c6c <HAL_GPIO_TogglePin>
							break;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4699      	mov	r9, r3
 8008ac2:	e6ff      	b.n	80088c4 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008ac4:	4f47      	ldr	r7, [pc, #284]	; (8008be4 <PxMessagingTask+0x3f8>)
 8008ac6:	00ab      	lsls	r3, r5, #2
 8008ac8:	4a35      	ldr	r2, [pc, #212]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008aca:	1992      	adds	r2, r2, r6
 8008acc:	1910      	adds	r0, r2, r4
 8008ace:	7881      	ldrb	r1, [r0, #2]
 8008ad0:	468c      	mov	ip, r1
 8008ad2:	9904      	ldr	r1, [sp, #16]
 8008ad4:	0209      	lsls	r1, r1, #8
 8008ad6:	4461      	add	r1, ip
 8008ad8:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	5d11      	ldrb	r1, [r2, r4]
 8008ade:	0209      	lsls	r1, r1, #8
 8008ae0:	7842      	ldrb	r2, [r0, #1]
 8008ae2:	1852      	adds	r2, r2, r1
 8008ae4:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8008ae6:	4b40      	ldr	r3, [pc, #256]	; (8008be8 <PxMessagingTask+0x3fc>)
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	4a40      	ldr	r2, [pc, #256]	; (8008bec <PxMessagingTask+0x400>)
 8008aec:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008aee:	0a1b      	lsrs	r3, r3, #8
 8008af0:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008af2:	9c08      	ldr	r4, [sp, #32]
 8008af4:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8008af6:	2002      	movs	r0, #2
 8008af8:	f005 fd01 	bl	800e4fe <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008afc:	2303      	movs	r3, #3
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	3308      	adds	r3, #8
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	0020      	movs	r0, r4
 8008b08:	f7ff f8d0 	bl	8007cac <SendMessageFromPort>
							break;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4699      	mov	r9, r3
 8008b10:	e6d8      	b.n	80088c4 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008b12:	4f34      	ldr	r7, [pc, #208]	; (8008be4 <PxMessagingTask+0x3f8>)
 8008b14:	00ab      	lsls	r3, r5, #2
 8008b16:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <PxMessagingTask+0x3b4>)
 8008b18:	1992      	adds	r2, r2, r6
 8008b1a:	1910      	adds	r0, r2, r4
 8008b1c:	7881      	ldrb	r1, [r0, #2]
 8008b1e:	468c      	mov	ip, r1
 8008b20:	9904      	ldr	r1, [sp, #16]
 8008b22:	0209      	lsls	r1, r1, #8
 8008b24:	4461      	add	r1, ip
 8008b26:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	5d11      	ldrb	r1, [r2, r4]
 8008b2c:	0209      	lsls	r1, r1, #8
 8008b2e:	7842      	ldrb	r2, [r0, #1]
 8008b30:	1852      	adds	r2, r2, r1
 8008b32:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8008b34:	4b25      	ldr	r3, [pc, #148]	; (8008bcc <PxMessagingTask+0x3e0>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	701a      	strb	r2, [r3, #0]
							break;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4699      	mov	r9, r3
 8008b3e:	e6c1      	b.n	80088c4 <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 8008b40:	9808      	ldr	r0, [sp, #32]
 8008b42:	f7fa ff8d 	bl	8003a60 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008b46:	4b1f      	ldr	r3, [pc, #124]	; (8008bc4 <PxMessagingTask+0x3d8>)
 8008b48:	2202      	movs	r2, #2
 8008b4a:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008b4c:	200a      	movs	r0, #10
 8008b4e:	f005 fcd6 	bl	800e4fe <osDelay>
 8008b52:	2401      	movs	r4, #1
							temp =0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	9307      	str	r3, [sp, #28]
								if(neighbors[p - 1][0]){
 8008b58:	4f22      	ldr	r7, [pc, #136]	; (8008be4 <PxMessagingTask+0x3f8>)
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008b5a:	003b      	movs	r3, r7
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	4699      	mov	r9, r3
 8008b60:	b2e2      	uxtb	r2, r4
 8008b62:	00a1      	lsls	r1, r4, #2
								if(neighbors[p - 1][0]){
 8008b64:	1f0b      	subs	r3, r1, #4
 8008b66:	5afb      	ldrh	r3, [r7, r3]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <PxMessagingTask+0x398>
 8008b6c:	3401      	adds	r4, #1
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008b6e:	2c04      	cmp	r4, #4
 8008b70:	d1f6      	bne.n	8008b60 <PxMessagingTask+0x374>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008b72:	466b      	mov	r3, sp
 8008b74:	8b9a      	ldrh	r2, [r3, #28]
 8008b76:	210d      	movs	r1, #13
 8008b78:	9804      	ldr	r0, [sp, #16]
 8008b7a:	f7ff fb1d 	bl	80081b8 <SendMessageToModule>
							break;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	4699      	mov	r9, r3
 8008b82:	e69f      	b.n	80088c4 <PxMessagingTask+0xd8>
									messageParams[temp] =p;
 8008b84:	4b19      	ldr	r3, [pc, #100]	; (8008bec <PxMessagingTask+0x400>)
 8008b86:	9807      	ldr	r0, [sp, #28]
 8008b88:	541a      	strb	r2, [r3, r0]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	18c0      	adds	r0, r0, r3
 8008b8e:	4449      	add	r1, r9
 8008b90:	2204      	movs	r2, #4
 8008b92:	f00a fe72 	bl	801387a <memcpy>
									temp +=5;
 8008b96:	9807      	ldr	r0, [sp, #28]
 8008b98:	1d43      	adds	r3, r0, #5
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	9307      	str	r3, [sp, #28]
 8008b9e:	e7e5      	b.n	8008b6c <PxMessagingTask+0x380>
 8008ba0:	20000544 	.word	0x20000544
 8008ba4:	20000689 	.word	0x20000689
 8008ba8:	200061f0 	.word	0x200061f0
 8008bac:	200006c4 	.word	0x200006c4
 8008bb0:	20000e22 	.word	0x20000e22
 8008bb4:	200004f0 	.word	0x200004f0
 8008bb8:	08019c30 	.word	0x08019c30
 8008bbc:	20000870 	.word	0x20000870
 8008bc0:	20000806 	.word	0x20000806
 8008bc4:	20000688 	.word	0x20000688
 8008bc8:	20006738 	.word	0x20006738
 8008bcc:	20000888 	.word	0x20000888
 8008bd0:	200006f8 	.word	0x200006f8
 8008bd4:	080187cc 	.word	0x080187cc
 8008bd8:	20000f88 	.word	0x20000f88
 8008bdc:	200002b0 	.word	0x200002b0
 8008be0:	080187e0 	.word	0x080187e0
 8008be4:	20000808 	.word	0x20000808
 8008be8:	20000064 	.word	0x20000064
 8008bec:	200006c8 	.word	0x200006c8
							temp =numOfParams / 5;
 8008bf0:	2105      	movs	r1, #5
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	f7f7 faa2 	bl	800013c <__udivsi3>
 8008bf8:	b2c2      	uxtb	r2, r0
 8008bfa:	9207      	str	r2, [sp, #28]
							for(uint8_t k =0; k < temp; k++){
 8008bfc:	2a00      	cmp	r2, #0
 8008bfe:	d018      	beq.n	8008c32 <PxMessagingTask+0x446>
 8008c00:	4653      	mov	r3, sl
 8008c02:	191f      	adds	r7, r3, r4
 8008c04:	4bdc      	ldr	r3, [pc, #880]	; (8008f78 <PxMessagingTask+0x78c>)
 8008c06:	18ff      	adds	r7, r7, r3
 8008c08:	3305      	adds	r3, #5
 8008c0a:	4453      	add	r3, sl
 8008c0c:	191c      	adds	r4, r3, r4
 8008c0e:	1e53      	subs	r3, r2, #1
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	009a      	lsls	r2, r3, #2
 8008c14:	18d3      	adds	r3, r2, r3
 8008c16:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008c18:	4bd8      	ldr	r3, [pc, #864]	; (8008f7c <PxMessagingTask+0x790>)
 8008c1a:	4699      	mov	r9, r3
 8008c1c:	7838      	ldrb	r0, [r7, #0]
 8008c1e:	3801      	subs	r0, #1
 8008c20:	0080      	lsls	r0, r0, #2
 8008c22:	4448      	add	r0, r9
 8008c24:	1c79      	adds	r1, r7, #1
 8008c26:	2204      	movs	r2, #4
 8008c28:	f00a fe27 	bl	801387a <memcpy>
 8008c2c:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 8008c2e:	42a7      	cmp	r7, r4
 8008c30:	d1f4      	bne.n	8008c1c <PxMessagingTask+0x430>
							responseStatus =BOS_OK;
 8008c32:	4bd3      	ldr	r3, [pc, #844]	; (8008f80 <PxMessagingTask+0x794>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
							break;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4699      	mov	r9, r3
 8008c3c:	e642      	b.n	80088c4 <PxMessagingTask+0xd8>
 8008c3e:	4653      	mov	r3, sl
 8008c40:	18e3      	adds	r3, r4, r3
 8008c42:	4acd      	ldr	r2, [pc, #820]	; (8008f78 <PxMessagingTask+0x78c>)
 8008c44:	4699      	mov	r9, r3
 8008c46:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c48:	2701      	movs	r7, #1
								if(p != port)
 8008c4a:	9b08      	ldr	r3, [sp, #32]
 8008c4c:	42bb      	cmp	r3, r7
 8008c4e:	d006      	beq.n	8008c5e <PxMessagingTask+0x472>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008c50:	0038      	movs	r0, r7
 8008c52:	f005 fa95 	bl	800e180 <GetUart>
 8008c56:	464b      	mov	r3, r9
 8008c58:	7819      	ldrb	r1, [r3, #0]
 8008c5a:	f005 fb1d 	bl	800e298 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008c5e:	3701      	adds	r7, #1
 8008c60:	b2ff      	uxtb	r7, r7
 8008c62:	2301      	movs	r3, #1
 8008c64:	469c      	mov	ip, r3
 8008c66:	44e1      	add	r9, ip
 8008c68:	2f04      	cmp	r7, #4
 8008c6a:	d1ee      	bne.n	8008c4a <PxMessagingTask+0x45e>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008c6c:	9808      	ldr	r0, [sp, #32]
 8008c6e:	f005 fa87 	bl	800e180 <GetUart>
 8008c72:	4bc1      	ldr	r3, [pc, #772]	; (8008f78 <PxMessagingTask+0x78c>)
 8008c74:	199b      	adds	r3, r3, r6
 8008c76:	191c      	adds	r4, r3, r4
 8008c78:	7aa1      	ldrb	r1, [r4, #10]
 8008c7a:	f005 fb0d 	bl	800e298 <SwapUartPins>
							break;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4699      	mov	r9, r3
 8008c82:	e61f      	b.n	80088c4 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008c84:	0020      	movs	r0, r4
 8008c86:	4bbc      	ldr	r3, [pc, #752]	; (8008f78 <PxMessagingTask+0x78c>)
 8008c88:	199b      	adds	r3, r3, r6
 8008c8a:	5d1b      	ldrb	r3, [r3, r4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10a      	bne.n	8008ca6 <PxMessagingTask+0x4ba>
								myID =cMessage[port - 1][1 + shift];
 8008c90:	2238      	movs	r2, #56	; 0x38
 8008c92:	436a      	muls	r2, r5
 8008c94:	4bb8      	ldr	r3, [pc, #736]	; (8008f78 <PxMessagingTask+0x78c>)
 8008c96:	189b      	adds	r3, r3, r2
 8008c98:	191c      	adds	r4, r3, r4
 8008c9a:	7862      	ldrb	r2, [r4, #1]
 8008c9c:	4bb9      	ldr	r3, [pc, #740]	; (8008f84 <PxMessagingTask+0x798>)
 8008c9e:	701a      	strb	r2, [r3, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	4699      	mov	r9, r3
 8008ca4:	e60e      	b.n	80088c4 <PxMessagingTask+0xd8>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d000      	beq.n	8008cb0 <PxMessagingTask+0x4c4>
 8008cae:	e609      	b.n	80088c4 <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 8008cb0:	49b5      	ldr	r1, [pc, #724]	; (8008f88 <PxMessagingTask+0x79c>)
 8008cb2:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8008cb4:	3238      	adds	r2, #56	; 0x38
 8008cb6:	436a      	muls	r2, r5
 8008cb8:	4baf      	ldr	r3, [pc, #700]	; (8008f78 <PxMessagingTask+0x78c>)
 8008cba:	189b      	adds	r3, r3, r2
 8008cbc:	181b      	adds	r3, r3, r0
 8008cbe:	785a      	ldrb	r2, [r3, #1]
 8008cc0:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8008cc2:	7898      	ldrb	r0, [r3, #2]
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	330d      	adds	r3, #13
 8008cca:	464a      	mov	r2, r9
 8008ccc:	4649      	mov	r1, r9
 8008cce:	f7fe ffed 	bl	8007cac <SendMessageFromPort>
 8008cd2:	e5f7      	b.n	80088c4 <PxMessagingTask+0xd8>
							if(longMessage){
 8008cd4:	4bad      	ldr	r3, [pc, #692]	; (8008f8c <PxMessagingTask+0x7a0>)
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d012      	beq.n	8008d02 <PxMessagingTask+0x516>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008cdc:	4bac      	ldr	r3, [pc, #688]	; (8008f90 <PxMessagingTask+0x7a4>)
 8008cde:	4699      	mov	r9, r3
 8008ce0:	881f      	ldrh	r7, [r3, #0]
 8008ce2:	48ac      	ldr	r0, [pc, #688]	; (8008f94 <PxMessagingTask+0x7a8>)
 8008ce4:	1838      	adds	r0, r7, r0
 8008ce6:	4454      	add	r4, sl
 8008ce8:	49a3      	ldr	r1, [pc, #652]	; (8008f78 <PxMessagingTask+0x78c>)
 8008cea:	1861      	adds	r1, r4, r1
 8008cec:	9c05      	ldr	r4, [sp, #20]
 8008cee:	0022      	movs	r2, r4
 8008cf0:	f00a fdc3 	bl	801387a <memcpy>
								longMessageLastPtr +=numOfParams;
 8008cf4:	46a4      	mov	ip, r4
 8008cf6:	4467      	add	r7, ip
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	801f      	strh	r7, [r3, #0]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4699      	mov	r9, r3
 8008d00:	e5e0      	b.n	80088c4 <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008d02:	4ba3      	ldr	r3, [pc, #652]	; (8008f90 <PxMessagingTask+0x7a4>)
 8008d04:	469b      	mov	fp, r3
 8008d06:	881f      	ldrh	r7, [r3, #0]
 8008d08:	4ba2      	ldr	r3, [pc, #648]	; (8008f94 <PxMessagingTask+0x7a8>)
 8008d0a:	4699      	mov	r9, r3
 8008d0c:	18f8      	adds	r0, r7, r3
 8008d0e:	4454      	add	r4, sl
 8008d10:	4999      	ldr	r1, [pc, #612]	; (8008f78 <PxMessagingTask+0x78c>)
 8008d12:	1861      	adds	r1, r4, r1
 8008d14:	9c05      	ldr	r4, [sp, #20]
 8008d16:	0022      	movs	r2, r4
 8008d18:	f00a fdaf 	bl	801387a <memcpy>
								longMessageLastPtr +=numOfParams;
 8008d1c:	193c      	adds	r4, r7, r4
 8008d1e:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8008d20:	2116      	movs	r1, #22
 8008d22:	0020      	movs	r0, r4
 8008d24:	f7f7 fa0a 	bl	800013c <__udivsi3>
 8008d28:	4b9b      	ldr	r3, [pc, #620]	; (8008f98 <PxMessagingTask+0x7ac>)
 8008d2a:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8008d2c:	0022      	movs	r2, r4
 8008d2e:	4649      	mov	r1, r9
 8008d30:	489a      	ldr	r0, [pc, #616]	; (8008f9c <PxMessagingTask+0x7b0>)
 8008d32:	f00a fda2 	bl	801387a <memcpy>
								longMessageLastPtr =0;
 8008d36:	2400      	movs	r4, #0
 8008d38:	465b      	mov	r3, fp
 8008d3a:	801c      	strh	r4, [r3, #0]
 8008d3c:	46a1      	mov	r9, r4
 8008d3e:	e5c1      	b.n	80088c4 <PxMessagingTask+0xd8>
							ReadPortsDirMSG(src);
 8008d40:	9804      	ldr	r0, [sp, #16]
 8008d42:	f005 fb0f 	bl	800e364 <ReadPortsDirMSG>
								break;
 8008d46:	2300      	movs	r3, #0
 8008d48:	4699      	mov	r9, r3
 8008d4a:	e5bb      	b.n	80088c4 <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008d4c:	4b8a      	ldr	r3, [pc, #552]	; (8008f78 <PxMessagingTask+0x78c>)
 8008d4e:	199b      	adds	r3, r3, r6
 8008d50:	5d1f      	ldrb	r7, [r3, r4]
 8008d52:	063f      	lsls	r7, r7, #24
 8008d54:	191b      	adds	r3, r3, r4
 8008d56:	78da      	ldrb	r2, [r3, #3]
 8008d58:	18bf      	adds	r7, r7, r2
 8008d5a:	785a      	ldrb	r2, [r3, #1]
 8008d5c:	0412      	lsls	r2, r2, #16
 8008d5e:	18bf      	adds	r7, r7, r2
 8008d60:	789a      	ldrb	r2, [r3, #2]
 8008d62:	0212      	lsls	r2, r2, #8
 8008d64:	18ba      	adds	r2, r7, r2
 8008d66:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008d68:	791b      	ldrb	r3, [r3, #4]
 8008d6a:	2bff      	cmp	r3, #255	; 0xff
 8008d6c:	d01c      	beq.n	8008da8 <PxMessagingTask+0x5bc>
								for(p =0; p < numOfParams; p++){
 8008d6e:	9b05      	ldr	r3, [sp, #20]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d016      	beq.n	8008da2 <PxMessagingTask+0x5b6>
 8008d74:	4653      	mov	r3, sl
 8008d76:	1d1a      	adds	r2, r3, #4
 8008d78:	1912      	adds	r2, r2, r4
 8008d7a:	4b7f      	ldr	r3, [pc, #508]	; (8008f78 <PxMessagingTask+0x78c>)
 8008d7c:	18d7      	adds	r7, r2, r3
 8008d7e:	3305      	adds	r3, #5
 8008d80:	4453      	add	r3, sl
 8008d82:	191c      	adds	r4, r3, r4
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 8008d8c:	783b      	ldrb	r3, [r7, #0]
 8008d8e:	9307      	str	r3, [sp, #28]
									if(temp > 0 && temp <= NumOfPorts){
 8008d90:	3b01      	subs	r3, #1
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d919      	bls.n	8008dca <PxMessagingTask+0x5de>
 8008d96:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 8008d98:	42a7      	cmp	r7, r4
 8008d9a:	d1f7      	bne.n	8008d8c <PxMessagingTask+0x5a0>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4699      	mov	r9, r3
 8008da0:	e590      	b.n	80088c4 <PxMessagingTask+0xd8>
							temp =temp32 =0;
 8008da2:	9307      	str	r3, [sp, #28]
								for(p =0; p < numOfParams; p++){
 8008da4:	4699      	mov	r9, r3
 8008da6:	e58d      	b.n	80088c4 <PxMessagingTask+0xd8>
									UpdateBaudrate(p,temp32);
 8008da8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008daa:	0021      	movs	r1, r4
 8008dac:	2001      	movs	r0, #1
 8008dae:	f005 fa69 	bl	800e284 <UpdateBaudrate>
 8008db2:	0021      	movs	r1, r4
 8008db4:	2002      	movs	r0, #2
 8008db6:	f005 fa65 	bl	800e284 <UpdateBaudrate>
 8008dba:	0021      	movs	r1, r4
 8008dbc:	2003      	movs	r0, #3
 8008dbe:	f005 fa61 	bl	800e284 <UpdateBaudrate>
							temp =temp32 =0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9307      	str	r3, [sp, #28]
 8008dc6:	4699      	mov	r9, r3
 8008dc8:	e57c      	b.n	80088c4 <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 8008dca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dcc:	9807      	ldr	r0, [sp, #28]
 8008dce:	f005 fa59 	bl	800e284 <UpdateBaudrate>
 8008dd2:	e7e0      	b.n	8008d96 <PxMessagingTask+0x5aa>
							SaveToRO();
 8008dd4:	f001 f9a2 	bl	800a11c <SaveToRO>
							SaveEEportsDir();
 8008dd8:	f7fa fbcc 	bl	8003574 <SaveEEportsDir>
							indMode =IND_PING;
 8008ddc:	4b70      	ldr	r3, [pc, #448]	; (8008fa0 <PxMessagingTask+0x7b4>)
 8008dde:	2201      	movs	r2, #1
 8008de0:	701a      	strb	r2, [r3, #0]
							break;
 8008de2:	2300      	movs	r3, #0
 8008de4:	4699      	mov	r9, r3
 8008de6:	e56d      	b.n	80088c4 <PxMessagingTask+0xd8>
							ClearEEportsDir();
 8008de8:	f7fa fcba 	bl	8003760 <ClearEEportsDir>
							ClearROtopology();
 8008dec:	f001 fa9e 	bl	800a32c <ClearROtopology>
							osDelay(100);
 8008df0:	2064      	movs	r0, #100	; 0x64
 8008df2:	f005 fb84 	bl	800e4fe <osDelay>
							indMode =IND_TOPOLOGY;
 8008df6:	4b6a      	ldr	r3, [pc, #424]	; (8008fa0 <PxMessagingTask+0x7b4>)
 8008df8:	2202      	movs	r2, #2
 8008dfa:	701a      	strb	r2, [r3, #0]
							break;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4699      	mov	r9, r3
 8008e00:	e560      	b.n	80088c4 <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008e02:	f005 fc8d 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 8008e06:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 8008e08:	465b      	mov	r3, fp
 8008e0a:	2bff      	cmp	r3, #255	; 0xff
 8008e0c:	d028      	beq.n	8008e60 <PxMessagingTask+0x674>
							else if(dst == BOS_MULTICAST)
 8008e0e:	2bfe      	cmp	r3, #254	; 0xfe
 8008e10:	d02f      	beq.n	8008e72 <PxMessagingTask+0x686>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e12:	4454      	add	r4, sl
 8008e14:	4958      	ldr	r1, [pc, #352]	; (8008f78 <PxMessagingTask+0x78c>)
 8008e16:	1861      	adds	r1, r4, r1
 8008e18:	9a05      	ldr	r2, [sp, #20]
 8008e1a:	4862      	ldr	r0, [pc, #392]	; (8008fa4 <PxMessagingTask+0x7b8>)
 8008e1c:	f00a fd2d 	bl	801387a <memcpy>
								temp =PcPort;
 8008e20:	4c61      	ldr	r4, [pc, #388]	; (8008fa8 <PxMessagingTask+0x7bc>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008e22:	4b60      	ldr	r3, [pc, #384]	; (8008fa4 <PxMessagingTask+0x7b8>)
 8008e24:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008e26:	4b61      	ldr	r3, [pc, #388]	; (8008fac <PxMessagingTask+0x7c0>)
 8008e28:	4699      	mov	r9, r3
								temp =PcPort;
 8008e2a:	7823      	ldrb	r3, [r4, #0]
 8008e2c:	9307      	str	r3, [sp, #28]
								PcPort =port;
 8008e2e:	9a08      	ldr	r2, [sp, #32]
 8008e30:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008e32:	2299      	movs	r2, #153	; 0x99
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e38:	4658      	mov	r0, fp
 8008e3a:	f005 fbf3 	bl	800e624 <FreeRTOS_CLIProcessCommand>
 8008e3e:	0007      	movs	r7, r0
								PcPort =temp;
 8008e40:	9b07      	ldr	r3, [sp, #28]
 8008e42:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008e44:	464b      	mov	r3, r9
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	2b60      	cmp	r3, #96	; 0x60
 8008e4a:	d01d      	beq.n	8008e88 <PxMessagingTask+0x69c>
							} while(xReturned != pdFALSE);
 8008e4c:	2f00      	cmp	r7, #0
 8008e4e:	d1ec      	bne.n	8008e2a <PxMessagingTask+0x63e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008e50:	2232      	movs	r2, #50	; 0x32
 8008e52:	2100      	movs	r1, #0
 8008e54:	4853      	ldr	r0, [pc, #332]	; (8008fa4 <PxMessagingTask+0x7b8>)
 8008e56:	f00a fd19 	bl	801388c <memset>
							break;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4699      	mov	r9, r3
 8008e5e:	e531      	b.n	80088c4 <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008e60:	9a05      	ldr	r2, [sp, #20]
 8008e62:	3a01      	subs	r2, #1
 8008e64:	4454      	add	r4, sl
 8008e66:	4944      	ldr	r1, [pc, #272]	; (8008f78 <PxMessagingTask+0x78c>)
 8008e68:	1861      	adds	r1, r4, r1
 8008e6a:	484e      	ldr	r0, [pc, #312]	; (8008fa4 <PxMessagingTask+0x7b8>)
 8008e6c:	f00a fd05 	bl	801387a <memcpy>
 8008e70:	e7d6      	b.n	8008e20 <PxMessagingTask+0x634>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008e72:	9b05      	ldr	r3, [sp, #20]
 8008e74:	9a07      	ldr	r2, [sp, #28]
 8008e76:	1a9a      	subs	r2, r3, r2
 8008e78:	3a02      	subs	r2, #2
 8008e7a:	4454      	add	r4, sl
 8008e7c:	493e      	ldr	r1, [pc, #248]	; (8008f78 <PxMessagingTask+0x78c>)
 8008e7e:	1861      	adds	r1, r4, r1
 8008e80:	4848      	ldr	r0, [pc, #288]	; (8008fa4 <PxMessagingTask+0x7b8>)
 8008e82:	f00a fcfa 	bl	801387a <memcpy>
 8008e86:	e7cb      	b.n	8008e20 <PxMessagingTask+0x634>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008e88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e8a:	f7f7 f945 	bl	8000118 <strlen>
 8008e8e:	0002      	movs	r2, r0
 8008e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e92:	483d      	ldr	r0, [pc, #244]	; (8008f88 <PxMessagingTask+0x79c>)
 8008e94:	f00a fcf1 	bl	801387a <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008e98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e9a:	f7f7 f93d 	bl	8000118 <strlen>
 8008e9e:	b282      	uxth	r2, r0
 8008ea0:	2118      	movs	r1, #24
 8008ea2:	9804      	ldr	r0, [sp, #16]
 8008ea4:	f7ff f988 	bl	80081b8 <SendMessageToModule>
									osDelay(10);
 8008ea8:	200a      	movs	r0, #10
 8008eaa:	f005 fb28 	bl	800e4fe <osDelay>
 8008eae:	e7cd      	b.n	8008e4c <PxMessagingTask+0x660>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008eb0:	f005 fc36 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 8008eb4:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008eb6:	f7f7 f92f 	bl	8000118 <strlen>
 8008eba:	0002      	movs	r2, r0
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	0038      	movs	r0, r7
 8008ec0:	f00a fce4 	bl	801388c <memset>
							if(longMessage){
 8008ec4:	4b31      	ldr	r3, [pc, #196]	; (8008f8c <PxMessagingTask+0x7a0>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d013      	beq.n	8008ef4 <PxMessagingTask+0x708>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008ecc:	4b30      	ldr	r3, [pc, #192]	; (8008f90 <PxMessagingTask+0x7a4>)
 8008ece:	4699      	mov	r9, r3
 8008ed0:	8818      	ldrh	r0, [r3, #0]
 8008ed2:	1838      	adds	r0, r7, r0
 8008ed4:	4454      	add	r4, sl
 8008ed6:	4928      	ldr	r1, [pc, #160]	; (8008f78 <PxMessagingTask+0x78c>)
 8008ed8:	1861      	adds	r1, r4, r1
 8008eda:	9c05      	ldr	r4, [sp, #20]
 8008edc:	0022      	movs	r2, r4
 8008ede:	f00a fccc 	bl	801387a <memcpy>
								longMessageLastPtr +=numOfParams;
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	881a      	ldrh	r2, [r3, #0]
 8008ee6:	46a4      	mov	ip, r4
 8008ee8:	4462      	add	r2, ip
 8008eea:	464b      	mov	r3, r9
 8008eec:	801a      	strh	r2, [r3, #0]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	4699      	mov	r9, r3
 8008ef2:	e4e7      	b.n	80088c4 <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008ef4:	4b26      	ldr	r3, [pc, #152]	; (8008f90 <PxMessagingTask+0x7a4>)
 8008ef6:	4699      	mov	r9, r3
 8008ef8:	8818      	ldrh	r0, [r3, #0]
 8008efa:	1838      	adds	r0, r7, r0
 8008efc:	4454      	add	r4, sl
 8008efe:	491e      	ldr	r1, [pc, #120]	; (8008f78 <PxMessagingTask+0x78c>)
 8008f00:	1861      	adds	r1, r4, r1
 8008f02:	9a05      	ldr	r2, [sp, #20]
 8008f04:	f00a fcb9 	bl	801387a <memcpy>
								longMessageLastPtr =0;
 8008f08:	2400      	movs	r4, #0
 8008f0a:	464b      	mov	r3, r9
 8008f0c:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 8008f0e:	4b1c      	ldr	r3, [pc, #112]	; (8008f80 <PxMessagingTask+0x794>)
 8008f10:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008f12:	0023      	movs	r3, r4
 8008f14:	0022      	movs	r2, r4
 8008f16:	0021      	movs	r1, r4
 8008f18:	4825      	ldr	r0, [pc, #148]	; (8008fb0 <PxMessagingTask+0x7c4>)
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	f006 fe66 	bl	800fbec <xTaskGenericNotify>
 8008f20:	46a1      	mov	r9, r4
 8008f22:	e4cf      	b.n	80088c4 <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008f24:	4b23      	ldr	r3, [pc, #140]	; (8008fb4 <PxMessagingTask+0x7c8>)
 8008f26:	4a24      	ldr	r2, [pc, #144]	; (8008fb8 <PxMessagingTask+0x7cc>)
 8008f28:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008f2a:	4b1d      	ldr	r3, [pc, #116]	; (8008fa0 <PxMessagingTask+0x7b4>)
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008f30:	200a      	movs	r0, #10
 8008f32:	f005 fae4 	bl	800e4fe <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	4b20      	ldr	r3, [pc, #128]	; (8008fbc <PxMessagingTask+0x7d0>)
 8008f3c:	4a20      	ldr	r2, [pc, #128]	; (8008fc0 <PxMessagingTask+0x7d4>)
 8008f3e:	60da      	str	r2, [r3, #12]
 8008f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008f44:	46c0      	nop			; (mov r8, r8)
 8008f46:	e7fd      	b.n	8008f44 <PxMessagingTask+0x758>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008f48:	4f0b      	ldr	r7, [pc, #44]	; (8008f78 <PxMessagingTask+0x78c>)
 8008f4a:	19bf      	adds	r7, r7, r6
 8008f4c:	5d38      	ldrb	r0, [r7, r4]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	3319      	adds	r3, #25
 8008f54:	2200      	movs	r2, #0
 8008f56:	2100      	movs	r1, #0
 8008f58:	f7fe fea8 	bl	8007cac <SendMessageFromPort>
							osDelay(100);
 8008f5c:	2064      	movs	r0, #100	; 0x64
 8008f5e:	f005 face 	bl	800e4fe <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008f62:	5d3b      	ldrb	r3, [r7, r4]
 8008f64:	4a07      	ldr	r2, [pc, #28]	; (8008f84 <PxMessagingTask+0x798>)
 8008f66:	7811      	ldrb	r1, [r2, #0]
 8008f68:	9a08      	ldr	r2, [sp, #32]
 8008f6a:	9804      	ldr	r0, [sp, #16]
 8008f6c:	f001 fa0a 	bl	800a384 <remoteBootloaderUpdate>
							break;
 8008f70:	2300      	movs	r3, #0
 8008f72:	4699      	mov	r9, r3
 8008f74:	e4a6      	b.n	80088c4 <PxMessagingTask+0xd8>
 8008f76:	46c0      	nop			; (mov r8, r8)
 8008f78:	20000544 	.word	0x20000544
 8008f7c:	20000814 	.word	0x20000814
 8008f80:	20000888 	.word	0x20000888
 8008f84:	20000806 	.word	0x20000806
 8008f88:	200006c8 	.word	0x200006c8
 8008f8c:	20000689 	.word	0x20000689
 8008f90:	2000068a 	.word	0x2000068a
 8008f94:	20000e58 	.word	0x20000e58
 8008f98:	20000030 	.word	0x20000030
 8008f9c:	200002b4 	.word	0x200002b4
 8008fa0:	20000688 	.word	0x20000688
 8008fa4:	20000e24 	.word	0x20000e24
 8008fa8:	200002b0 	.word	0x200002b0
 8008fac:	200061f0 	.word	0x200061f0
 8008fb0:	20000de0 	.word	0x20000de0
 8008fb4:	20007ff0 	.word	0x20007ff0
 8008fb8:	deadbeef 	.word	0xdeadbeef
 8008fbc:	e000ed00 	.word	0xe000ed00
 8008fc0:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008fc4:	46a3      	mov	fp, r4
 8008fc6:	230b      	movs	r3, #11
 8008fc8:	4699      	mov	r9, r3
 8008fca:	44a1      	add	r9, r4
 8008fcc:	4be7      	ldr	r3, [pc, #924]	; (800936c <PxMessagingTask+0xb80>)
 8008fce:	199b      	adds	r3, r3, r6
 8008fd0:	464a      	mov	r2, r9
 8008fd2:	5c9b      	ldrb	r3, [r3, r2]
 8008fd4:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 8008fd6:	9b05      	ldr	r3, [sp, #20]
 8008fd8:	2b0f      	cmp	r3, #15
 8008fda:	d100      	bne.n	8008fde <PxMessagingTask+0x7f2>
 8008fdc:	e088      	b.n	80090f0 <PxMessagingTask+0x904>
							if(numOfParams == 17)
 8008fde:	9b05      	ldr	r3, [sp, #20]
 8008fe0:	2b11      	cmp	r3, #17
 8008fe2:	d100      	bne.n	8008fe6 <PxMessagingTask+0x7fa>
 8008fe4:	e08c      	b.n	8009100 <PxMessagingTask+0x914>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	1c59      	adds	r1, r3, #1
 8008fea:	910c      	str	r1, [sp, #48]	; 0x30
 8008fec:	1c98      	adds	r0, r3, #2
 8008fee:	900d      	str	r0, [sp, #52]	; 0x34
 8008ff0:	1cda      	adds	r2, r3, #3
 8008ff2:	920e      	str	r2, [sp, #56]	; 0x38
 8008ff4:	4bdd      	ldr	r3, [pc, #884]	; (800936c <PxMessagingTask+0xb80>)
 8008ff6:	199b      	adds	r3, r3, r6
 8008ff8:	465c      	mov	r4, fp
 8008ffa:	5d1c      	ldrb	r4, [r3, r4]
 8008ffc:	0624      	lsls	r4, r4, #24
 8008ffe:	5c9a      	ldrb	r2, [r3, r2]
 8009000:	18a4      	adds	r4, r4, r2
 8009002:	5c5a      	ldrb	r2, [r3, r1]
 8009004:	0412      	lsls	r2, r2, #16
 8009006:	18a4      	adds	r4, r4, r2
 8009008:	5c1a      	ldrb	r2, [r3, r0]
 800900a:	0212      	lsls	r2, r2, #8
 800900c:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800900e:	465a      	mov	r2, fp
 8009010:	3204      	adds	r2, #4
 8009012:	920f      	str	r2, [sp, #60]	; 0x3c
 8009014:	4659      	mov	r1, fp
 8009016:	3105      	adds	r1, #5
 8009018:	9110      	str	r1, [sp, #64]	; 0x40
 800901a:	4658      	mov	r0, fp
 800901c:	3006      	adds	r0, #6
 800901e:	9011      	str	r0, [sp, #68]	; 0x44
 8009020:	465f      	mov	r7, fp
 8009022:	3707      	adds	r7, #7
 8009024:	9707      	str	r7, [sp, #28]
 8009026:	5c9f      	ldrb	r7, [r3, r2]
 8009028:	063f      	lsls	r7, r7, #24
 800902a:	5c5a      	ldrb	r2, [r3, r1]
 800902c:	0412      	lsls	r2, r2, #16
 800902e:	18bf      	adds	r7, r7, r2
 8009030:	9a07      	ldr	r2, [sp, #28]
 8009032:	5c9a      	ldrb	r2, [r3, r2]
 8009034:	18bf      	adds	r7, r7, r2
 8009036:	5c1b      	ldrb	r3, [r3, r0]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800903c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d166      	bne.n	8009110 <PxMessagingTask+0x924>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8009042:	4bca      	ldr	r3, [pc, #808]	; (800936c <PxMessagingTask+0xb80>)
 8009044:	199b      	adds	r3, r3, r6
 8009046:	445b      	add	r3, fp
 8009048:	7a5b      	ldrb	r3, [r3, #9]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <PxMessagingTask+0x888>
 800904e:	2138      	movs	r1, #56	; 0x38
 8009050:	4369      	muls	r1, r5
 8009052:	4ac6      	ldr	r2, [pc, #792]	; (800936c <PxMessagingTask+0xb80>)
 8009054:	1852      	adds	r2, r2, r1
 8009056:	445a      	add	r2, fp
 8009058:	7a91      	ldrb	r1, [r2, #10]
 800905a:	2900      	cmp	r1, #0
 800905c:	d00a      	beq.n	8009074 <PxMessagingTask+0x888>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800905e:	2038      	movs	r0, #56	; 0x38
 8009060:	4368      	muls	r0, r5
 8009062:	4ac2      	ldr	r2, [pc, #776]	; (800936c <PxMessagingTask+0xb80>)
 8009064:	1812      	adds	r2, r2, r0
 8009066:	445a      	add	r2, fp
 8009068:	7a10      	ldrb	r0, [r2, #8]
 800906a:	9100      	str	r1, [sp, #0]
 800906c:	003a      	movs	r2, r7
 800906e:	0021      	movs	r1, r4
 8009070:	f7fe fd1a 	bl	8007aa8 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8009074:	4bbd      	ldr	r3, [pc, #756]	; (800936c <PxMessagingTask+0xb80>)
 8009076:	199b      	adds	r3, r3, r6
 8009078:	464a      	mov	r2, r9
 800907a:	5c9b      	ldrb	r3, [r3, r2]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d012      	beq.n	80090a6 <PxMessagingTask+0x8ba>
 8009080:	2138      	movs	r1, #56	; 0x38
 8009082:	4369      	muls	r1, r5
 8009084:	4ab9      	ldr	r2, [pc, #740]	; (800936c <PxMessagingTask+0xb80>)
 8009086:	1852      	adds	r2, r2, r1
 8009088:	445a      	add	r2, fp
 800908a:	7b11      	ldrb	r1, [r2, #12]
 800908c:	2900      	cmp	r1, #0
 800908e:	d00a      	beq.n	80090a6 <PxMessagingTask+0x8ba>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8009090:	2038      	movs	r0, #56	; 0x38
 8009092:	4368      	muls	r0, r5
 8009094:	4ab5      	ldr	r2, [pc, #724]	; (800936c <PxMessagingTask+0xb80>)
 8009096:	1812      	adds	r2, r2, r0
 8009098:	445a      	add	r2, fp
 800909a:	7a10      	ldrb	r0, [r2, #8]
 800909c:	9100      	str	r1, [sp, #0]
 800909e:	003a      	movs	r2, r7
 80090a0:	0021      	movs	r1, r4
 80090a2:	f7fe fd01 	bl	8007aa8 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 80090a6:	4bb1      	ldr	r3, [pc, #708]	; (800936c <PxMessagingTask+0xb80>)
 80090a8:	199b      	adds	r3, r3, r6
 80090aa:	445b      	add	r3, fp
 80090ac:	7b5b      	ldrb	r3, [r3, #13]
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	2200      	movs	r2, #0
 80090b2:	4691      	mov	r9, r2
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <PxMessagingTask+0x8d0>
 80090b8:	f7ff fc04 	bl	80088c4 <PxMessagingTask+0xd8>
 80090bc:	3238      	adds	r2, #56	; 0x38
 80090be:	436a      	muls	r2, r5
 80090c0:	4baa      	ldr	r3, [pc, #680]	; (800936c <PxMessagingTask+0xb80>)
 80090c2:	189b      	adds	r3, r3, r2
 80090c4:	445b      	add	r3, fp
 80090c6:	7b9a      	ldrb	r2, [r3, #14]
 80090c8:	454a      	cmp	r2, r9
 80090ca:	d101      	bne.n	80090d0 <PxMessagingTask+0x8e4>
 80090cc:	f000 febb 	bl	8009e46 <PxMessagingTask+0x165a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 80090d0:	2138      	movs	r1, #56	; 0x38
 80090d2:	4369      	muls	r1, r5
 80090d4:	4ba5      	ldr	r3, [pc, #660]	; (800936c <PxMessagingTask+0xb80>)
 80090d6:	185b      	adds	r3, r3, r1
 80090d8:	445b      	add	r3, fp
 80090da:	7a18      	ldrb	r0, [r3, #8]
 80090dc:	9200      	str	r2, [sp, #0]
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	003a      	movs	r2, r7
 80090e2:	0021      	movs	r1, r4
 80090e4:	f7fe fce0 	bl	8007aa8 <SetupDMAStreams>
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	f7ff fbea 	bl	80088c4 <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 80090f0:	2238      	movs	r2, #56	; 0x38
 80090f2:	436a      	muls	r2, r5
 80090f4:	4b9d      	ldr	r3, [pc, #628]	; (800936c <PxMessagingTask+0xb80>)
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	191c      	adds	r4, r3, r4
 80090fa:	7b63      	ldrb	r3, [r4, #13]
 80090fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80090fe:	e772      	b.n	8008fe6 <PxMessagingTask+0x7fa>
								temp =cMessage[port - 1][15 + shift];
 8009100:	2238      	movs	r2, #56	; 0x38
 8009102:	436a      	muls	r2, r5
 8009104:	4b99      	ldr	r3, [pc, #612]	; (800936c <PxMessagingTask+0xb80>)
 8009106:	189b      	adds	r3, r3, r2
 8009108:	445b      	add	r3, fp
 800910a:	7bdb      	ldrb	r3, [r3, #15]
 800910c:	930b      	str	r3, [sp, #44]	; 0x2c
 800910e:	e76a      	b.n	8008fe6 <PxMessagingTask+0x7fa>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8009110:	2338      	movs	r3, #56	; 0x38
 8009112:	436b      	muls	r3, r5
 8009114:	4c95      	ldr	r4, [pc, #596]	; (800936c <PxMessagingTask+0xb80>)
 8009116:	18e4      	adds	r4, r4, r3
 8009118:	465b      	mov	r3, fp
 800911a:	18e6      	adds	r6, r4, r3
 800911c:	7a31      	ldrb	r1, [r6, #8]
 800911e:	20e4      	movs	r0, #228	; 0xe4
 8009120:	f003 f88e 	bl	800c240 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8009124:	465b      	mov	r3, fp
 8009126:	5ce3      	ldrb	r3, [r4, r3]
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800912c:	5ca1      	ldrb	r1, [r4, r2]
 800912e:	18c9      	adds	r1, r1, r3
 8009130:	b289      	uxth	r1, r1
 8009132:	20e5      	movs	r0, #229	; 0xe5
 8009134:	f003 f884 	bl	800c240 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8009138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800913a:	5ce3      	ldrb	r3, [r4, r3]
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009140:	5ca1      	ldrb	r1, [r4, r2]
 8009142:	18c9      	adds	r1, r1, r3
 8009144:	b289      	uxth	r1, r1
 8009146:	20e6      	movs	r0, #230	; 0xe6
 8009148:	f003 f87a 	bl	800c240 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800914c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800914e:	5ce3      	ldrb	r3, [r4, r3]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009154:	5ca1      	ldrb	r1, [r4, r2]
 8009156:	18c9      	adds	r1, r1, r3
 8009158:	b289      	uxth	r1, r1
 800915a:	20e7      	movs	r0, #231	; 0xe7
 800915c:	f003 f870 	bl	800c240 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8009160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009162:	5ce3      	ldrb	r3, [r4, r3]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	9a07      	ldr	r2, [sp, #28]
 8009168:	5ca1      	ldrb	r1, [r4, r2]
 800916a:	18c9      	adds	r1, r1, r3
 800916c:	b289      	uxth	r1, r1
 800916e:	20e8      	movs	r0, #232	; 0xe8
 8009170:	f003 f866 	bl	800c240 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8009174:	7a73      	ldrb	r3, [r6, #9]
 8009176:	021b      	lsls	r3, r3, #8
 8009178:	7ab1      	ldrb	r1, [r6, #10]
 800917a:	18c9      	adds	r1, r1, r3
 800917c:	b289      	uxth	r1, r1
 800917e:	20e9      	movs	r0, #233	; 0xe9
 8009180:	f003 f85e 	bl	800c240 <EE_WriteVariable>
								if(numOfParams == 19)
 8009184:	9b05      	ldr	r3, [sp, #20]
 8009186:	2b13      	cmp	r3, #19
 8009188:	d116      	bne.n	80091b8 <PxMessagingTask+0x9cc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800918a:	3325      	adds	r3, #37	; 0x25
 800918c:	436b      	muls	r3, r5
 800918e:	4d77      	ldr	r5, [pc, #476]	; (800936c <PxMessagingTask+0xb80>)
 8009190:	18ed      	adds	r5, r5, r3
 8009192:	464b      	mov	r3, r9
 8009194:	5ceb      	ldrb	r3, [r5, r3]
 8009196:	021b      	lsls	r3, r3, #8
 8009198:	445d      	add	r5, fp
 800919a:	7b29      	ldrb	r1, [r5, #12]
 800919c:	18c9      	adds	r1, r1, r3
 800919e:	b289      	uxth	r1, r1
 80091a0:	20ea      	movs	r0, #234	; 0xea
 80091a2:	f003 f84d 	bl	800c240 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	4b71      	ldr	r3, [pc, #452]	; (8009370 <PxMessagingTask+0xb84>)
 80091ac:	4a71      	ldr	r2, [pc, #452]	; (8009374 <PxMessagingTask+0xb88>)
 80091ae:	60da      	str	r2, [r3, #12]
 80091b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	e7fd      	b.n	80091b4 <PxMessagingTask+0x9c8>
								if(numOfParams == 21)
 80091b8:	9b05      	ldr	r3, [sp, #20]
 80091ba:	2b15      	cmp	r3, #21
 80091bc:	d1f3      	bne.n	80091a6 <PxMessagingTask+0x9ba>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 80091be:	3323      	adds	r3, #35	; 0x23
 80091c0:	435d      	muls	r5, r3
 80091c2:	4b6a      	ldr	r3, [pc, #424]	; (800936c <PxMessagingTask+0xb80>)
 80091c4:	195b      	adds	r3, r3, r5
 80091c6:	445b      	add	r3, fp
 80091c8:	7b5a      	ldrb	r2, [r3, #13]
 80091ca:	0212      	lsls	r2, r2, #8
 80091cc:	7b99      	ldrb	r1, [r3, #14]
 80091ce:	1889      	adds	r1, r1, r2
 80091d0:	b289      	uxth	r1, r1
 80091d2:	20eb      	movs	r0, #235	; 0xeb
 80091d4:	f003 f834 	bl	800c240 <EE_WriteVariable>
 80091d8:	e7e5      	b.n	80091a6 <PxMessagingTask+0x9ba>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80091da:	4f64      	ldr	r7, [pc, #400]	; (800936c <PxMessagingTask+0xb80>)
 80091dc:	19bf      	adds	r7, r7, r6
 80091de:	1939      	adds	r1, r7, r4
 80091e0:	7a8b      	ldrb	r3, [r1, #10]
 80091e2:	9305      	str	r3, [sp, #20]
 80091e4:	7aca      	ldrb	r2, [r1, #11]
 80091e6:	4864      	ldr	r0, [pc, #400]	; (8009378 <PxMessagingTask+0xb8c>)
 80091e8:	7803      	ldrb	r3, [r0, #0]
 80091ea:	4699      	mov	r9, r3
 80091ec:	7a4b      	ldrb	r3, [r1, #9]
 80091ee:	469b      	mov	fp, r3
 80091f0:	7b08      	ldrb	r0, [r1, #12]
 80091f2:	0003      	movs	r3, r0
 80091f4:	1e58      	subs	r0, r3, #1
 80091f6:	4183      	sbcs	r3, r0
 80091f8:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 80091fa:	7908      	ldrb	r0, [r1, #4]
 80091fc:	0603      	lsls	r3, r0, #24
 80091fe:	469c      	mov	ip, r3
 8009200:	7948      	ldrb	r0, [r1, #5]
 8009202:	0400      	lsls	r0, r0, #16
 8009204:	4460      	add	r0, ip
 8009206:	79cb      	ldrb	r3, [r1, #7]
 8009208:	469c      	mov	ip, r3
 800920a:	4460      	add	r0, ip
 800920c:	798b      	ldrb	r3, [r1, #6]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	469c      	mov	ip, r3
 8009212:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8009214:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8009216:	5d38      	ldrb	r0, [r7, r4]
 8009218:	0600      	lsls	r0, r0, #24
 800921a:	78cc      	ldrb	r4, [r1, #3]
 800921c:	1900      	adds	r0, r0, r4
 800921e:	784c      	ldrb	r4, [r1, #1]
 8009220:	0424      	lsls	r4, r4, #16
 8009222:	1900      	adds	r0, r0, r4
 8009224:	788c      	ldrb	r4, [r1, #2]
 8009226:	0224      	lsls	r4, r4, #8
 8009228:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800922a:	9001      	str	r0, [sp, #4]
 800922c:	7a09      	ldrb	r1, [r1, #8]
 800922e:	9100      	str	r1, [sp, #0]
 8009230:	9b05      	ldr	r3, [sp, #20]
 8009232:	4649      	mov	r1, r9
 8009234:	4658      	mov	r0, fp
 8009236:	f7fe ffe5 	bl	8008204 <StartScastDMAStream>
							break;
 800923a:	2300      	movs	r3, #0
 800923c:	4699      	mov	r9, r3
 800923e:	f7ff fb41 	bl	80088c4 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8009242:	0023      	movs	r3, r4
 8009244:	4a49      	ldr	r2, [pc, #292]	; (800936c <PxMessagingTask+0xb80>)
 8009246:	1992      	adds	r2, r2, r6
 8009248:	5d12      	ldrb	r2, [r2, r4]
 800924a:	2a00      	cmp	r2, #0
 800924c:	d000      	beq.n	8009250 <PxMessagingTask+0xa64>
 800924e:	e099      	b.n	8009384 <PxMessagingTask+0xb98>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009250:	3238      	adds	r2, #56	; 0x38
 8009252:	436a      	muls	r2, r5
 8009254:	4b45      	ldr	r3, [pc, #276]	; (800936c <PxMessagingTask+0xb80>)
 8009256:	189b      	adds	r3, r3, r2
 8009258:	191c      	adds	r4, r3, r4
 800925a:	78a3      	ldrb	r3, [r4, #2]
 800925c:	061b      	lsls	r3, r3, #24
 800925e:	78e2      	ldrb	r2, [r4, #3]
 8009260:	0412      	lsls	r2, r2, #16
 8009262:	189b      	adds	r3, r3, r2
 8009264:	7962      	ldrb	r2, [r4, #5]
 8009266:	189b      	adds	r3, r3, r2
 8009268:	7922      	ldrb	r2, [r4, #4]
 800926a:	0212      	lsls	r2, r2, #8
 800926c:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800926e:	7862      	ldrb	r2, [r4, #1]
 8009270:	3a01      	subs	r2, #1
 8009272:	b2d1      	uxtb	r1, r2
 8009274:	2907      	cmp	r1, #7
 8009276:	d901      	bls.n	800927c <PxMessagingTask+0xa90>
 8009278:	f000 fdcc 	bl	8009e14 <PxMessagingTask+0x1628>
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	0092      	lsls	r2, r2, #2
 8009280:	493e      	ldr	r1, [pc, #248]	; (800937c <PxMessagingTask+0xb90>)
 8009282:	588a      	ldr	r2, [r1, r2]
 8009284:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	4b3d      	ldr	r3, [pc, #244]	; (8009380 <PxMessagingTask+0xb94>)
 800928a:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800928c:	2201      	movs	r2, #1
 800928e:	211f      	movs	r1, #31
 8009290:	9804      	ldr	r0, [sp, #16]
 8009292:	f7fe ff91 	bl	80081b8 <SendMessageToModule>
										break;
 8009296:	2300      	movs	r3, #0
 8009298:	4699      	mov	r9, r3
 800929a:	f7ff fb13 	bl	80088c4 <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 800929e:	781a      	ldrb	r2, [r3, #0]
 80092a0:	4b37      	ldr	r3, [pc, #220]	; (8009380 <PxMessagingTask+0xb94>)
 80092a2:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 80092a4:	2201      	movs	r2, #1
 80092a6:	211f      	movs	r1, #31
 80092a8:	9804      	ldr	r0, [sp, #16]
 80092aa:	f7fe ff85 	bl	80081b8 <SendMessageToModule>
										break;
 80092ae:	2300      	movs	r3, #0
 80092b0:	4699      	mov	r9, r3
 80092b2:	f7ff fb07 	bl	80088c4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80092b6:	8819      	ldrh	r1, [r3, #0]
 80092b8:	4a31      	ldr	r2, [pc, #196]	; (8009380 <PxMessagingTask+0xb94>)
 80092ba:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80092bc:	881b      	ldrh	r3, [r3, #0]
 80092be:	0a1b      	lsrs	r3, r3, #8
 80092c0:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 80092c2:	2202      	movs	r2, #2
 80092c4:	211f      	movs	r1, #31
 80092c6:	9804      	ldr	r0, [sp, #16]
 80092c8:	f7fe ff76 	bl	80081b8 <SendMessageToModule>
										break;
 80092cc:	2300      	movs	r3, #0
 80092ce:	4699      	mov	r9, r3
 80092d0:	f7ff faf8 	bl	80088c4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80092d4:	8819      	ldrh	r1, [r3, #0]
 80092d6:	4a2a      	ldr	r2, [pc, #168]	; (8009380 <PxMessagingTask+0xb94>)
 80092d8:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b21b      	sxth	r3, r3
 80092de:	121b      	asrs	r3, r3, #8
 80092e0:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 80092e2:	2202      	movs	r2, #2
 80092e4:	211f      	movs	r1, #31
 80092e6:	9804      	ldr	r0, [sp, #16]
 80092e8:	f7fe ff66 	bl	80081b8 <SendMessageToModule>
										break;
 80092ec:	2300      	movs	r3, #0
 80092ee:	4699      	mov	r9, r3
 80092f0:	f7ff fae8 	bl	80088c4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80092f4:	6819      	ldr	r1, [r3, #0]
 80092f6:	4a22      	ldr	r2, [pc, #136]	; (8009380 <PxMessagingTask+0xb94>)
 80092f8:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80092fa:	6819      	ldr	r1, [r3, #0]
 80092fc:	0a09      	lsrs	r1, r1, #8
 80092fe:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	0c09      	lsrs	r1, r1, #16
 8009304:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	0e1b      	lsrs	r3, r3, #24
 800930a:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800930c:	2204      	movs	r2, #4
 800930e:	211f      	movs	r1, #31
 8009310:	9804      	ldr	r0, [sp, #16]
 8009312:	f7fe ff51 	bl	80081b8 <SendMessageToModule>
										break;
 8009316:	2300      	movs	r3, #0
 8009318:	4699      	mov	r9, r3
 800931a:	f7ff fad3 	bl	80088c4 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800931e:	6819      	ldr	r1, [r3, #0]
 8009320:	4a17      	ldr	r2, [pc, #92]	; (8009380 <PxMessagingTask+0xb94>)
 8009322:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009324:	6819      	ldr	r1, [r3, #0]
 8009326:	1209      	asrs	r1, r1, #8
 8009328:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	1409      	asrs	r1, r1, #16
 800932e:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	161b      	asrs	r3, r3, #24
 8009334:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009336:	2204      	movs	r2, #4
 8009338:	211f      	movs	r1, #31
 800933a:	9804      	ldr	r0, [sp, #16]
 800933c:	f7fe ff3c 	bl	80081b8 <SendMessageToModule>
										break;
 8009340:	2300      	movs	r3, #0
 8009342:	4699      	mov	r9, r3
 8009344:	f7ff fabe 	bl	80088c4 <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009348:	7819      	ldrb	r1, [r3, #0]
 800934a:	4a0d      	ldr	r2, [pc, #52]	; (8009380 <PxMessagingTask+0xb94>)
 800934c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800934e:	7859      	ldrb	r1, [r3, #1]
 8009350:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8009352:	7899      	ldrb	r1, [r3, #2]
 8009354:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8009356:	78db      	ldrb	r3, [r3, #3]
 8009358:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800935a:	2208      	movs	r2, #8
 800935c:	211f      	movs	r1, #31
 800935e:	9804      	ldr	r0, [sp, #16]
 8009360:	f7fe ff2a 	bl	80081b8 <SendMessageToModule>
										break; // You cannot bitwise floats
 8009364:	2300      	movs	r3, #0
 8009366:	4699      	mov	r9, r3
 8009368:	f7ff faac 	bl	80088c4 <PxMessagingTask+0xd8>
 800936c:	20000544 	.word	0x20000544
 8009370:	e000ed00 	.word	0xe000ed00
 8009374:	05fa0004 	.word	0x05fa0004
 8009378:	20000806 	.word	0x20000806
 800937c:	08019ce8 	.word	0x08019ce8
 8009380:	200006c8 	.word	0x200006c8
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8009384:	2a02      	cmp	r2, #2
 8009386:	d000      	beq.n	800938a <PxMessagingTask+0xb9e>
 8009388:	e09f      	b.n	80094ca <PxMessagingTask+0xcde>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800938a:	48ef      	ldr	r0, [pc, #956]	; (8009748 <PxMessagingTask+0xf5c>)
 800938c:	3236      	adds	r2, #54	; 0x36
 800938e:	436a      	muls	r2, r5
 8009390:	1882      	adds	r2, r0, r2
 8009392:	1851      	adds	r1, r2, r1
 8009394:	3901      	subs	r1, #1
 8009396:	2200      	movs	r2, #0
 8009398:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800939a:	3301      	adds	r3, #1
 800939c:	4453      	add	r3, sl
 800939e:	1818      	adds	r0, r3, r0
 80093a0:	f7fa fa6e 	bl	8003880 <IsModuleParameter>
 80093a4:	9007      	str	r0, [sp, #28]
								if(temp == 0){ // Parameter does not exist
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d108      	bne.n	80093bc <PxMessagingTask+0xbd0>
									SendMessageToModule(src,
 80093aa:	2201      	movs	r2, #1
 80093ac:	211f      	movs	r1, #31
 80093ae:	9804      	ldr	r0, [sp, #16]
 80093b0:	f7fe ff02 	bl	80081b8 <SendMessageToModule>
 80093b4:	2300      	movs	r3, #0
 80093b6:	4699      	mov	r9, r3
 80093b8:	f7ff fa84 	bl	80088c4 <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80093bc:	3801      	subs	r0, #1
 80093be:	4ae3      	ldr	r2, [pc, #908]	; (800974c <PxMessagingTask+0xf60>)
 80093c0:	210c      	movs	r1, #12
 80093c2:	4341      	muls	r1, r0
 80093c4:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 80093c6:	1852      	adds	r2, r2, r1
 80093c8:	7912      	ldrb	r2, [r2, #4]
 80093ca:	49e1      	ldr	r1, [pc, #900]	; (8009750 <PxMessagingTask+0xf64>)
 80093cc:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 80093ce:	3a01      	subs	r2, #1
 80093d0:	b2d1      	uxtb	r1, r2
 80093d2:	2907      	cmp	r1, #7
 80093d4:	d901      	bls.n	80093da <PxMessagingTask+0xbee>
 80093d6:	f000 fd21 	bl	8009e1c <PxMessagingTask+0x1630>
 80093da:	b2d2      	uxtb	r2, r2
 80093dc:	0092      	lsls	r2, r2, #2
 80093de:	49dd      	ldr	r1, [pc, #884]	; (8009754 <PxMessagingTask+0xf68>)
 80093e0:	588a      	ldr	r2, [r1, r2]
 80093e2:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 80093e4:	781a      	ldrb	r2, [r3, #0]
 80093e6:	4bda      	ldr	r3, [pc, #872]	; (8009750 <PxMessagingTask+0xf64>)
 80093e8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80093ea:	2202      	movs	r2, #2
 80093ec:	211f      	movs	r1, #31
 80093ee:	9804      	ldr	r0, [sp, #16]
 80093f0:	f7fe fee2 	bl	80081b8 <SendMessageToModule>
											break;
 80093f4:	2300      	movs	r3, #0
 80093f6:	4699      	mov	r9, r3
 80093f8:	f7ff fa64 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 80093fc:	781a      	ldrb	r2, [r3, #0]
 80093fe:	4bd4      	ldr	r3, [pc, #848]	; (8009750 <PxMessagingTask+0xf64>)
 8009400:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009402:	2202      	movs	r2, #2
 8009404:	211f      	movs	r1, #31
 8009406:	9804      	ldr	r0, [sp, #16]
 8009408:	f7fe fed6 	bl	80081b8 <SendMessageToModule>
											break;
 800940c:	2300      	movs	r3, #0
 800940e:	4699      	mov	r9, r3
 8009410:	f7ff fa58 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009414:	8819      	ldrh	r1, [r3, #0]
 8009416:	4ace      	ldr	r2, [pc, #824]	; (8009750 <PxMessagingTask+0xf64>)
 8009418:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	0a1b      	lsrs	r3, r3, #8
 800941e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009420:	2203      	movs	r2, #3
 8009422:	211f      	movs	r1, #31
 8009424:	9804      	ldr	r0, [sp, #16]
 8009426:	f7fe fec7 	bl	80081b8 <SendMessageToModule>
											break;
 800942a:	2300      	movs	r3, #0
 800942c:	4699      	mov	r9, r3
 800942e:	f7ff fa49 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009432:	8819      	ldrh	r1, [r3, #0]
 8009434:	4ac6      	ldr	r2, [pc, #792]	; (8009750 <PxMessagingTask+0xf64>)
 8009436:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b21b      	sxth	r3, r3
 800943c:	121b      	asrs	r3, r3, #8
 800943e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009440:	2203      	movs	r2, #3
 8009442:	211f      	movs	r1, #31
 8009444:	9804      	ldr	r0, [sp, #16]
 8009446:	f7fe feb7 	bl	80081b8 <SendMessageToModule>
											break;
 800944a:	2300      	movs	r3, #0
 800944c:	4699      	mov	r9, r3
 800944e:	f7ff fa39 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009452:	6819      	ldr	r1, [r3, #0]
 8009454:	4abe      	ldr	r2, [pc, #760]	; (8009750 <PxMessagingTask+0xf64>)
 8009456:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009458:	6819      	ldr	r1, [r3, #0]
 800945a:	0a09      	lsrs	r1, r1, #8
 800945c:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	0c09      	lsrs	r1, r1, #16
 8009462:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	0e1b      	lsrs	r3, r3, #24
 8009468:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800946a:	2205      	movs	r2, #5
 800946c:	211f      	movs	r1, #31
 800946e:	9804      	ldr	r0, [sp, #16]
 8009470:	f7fe fea2 	bl	80081b8 <SendMessageToModule>
											break;
 8009474:	2300      	movs	r3, #0
 8009476:	4699      	mov	r9, r3
 8009478:	f7ff fa24 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800947c:	6819      	ldr	r1, [r3, #0]
 800947e:	4ab4      	ldr	r2, [pc, #720]	; (8009750 <PxMessagingTask+0xf64>)
 8009480:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	1209      	asrs	r1, r1, #8
 8009486:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009488:	6819      	ldr	r1, [r3, #0]
 800948a:	1409      	asrs	r1, r1, #16
 800948c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	161b      	asrs	r3, r3, #24
 8009492:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009494:	2205      	movs	r2, #5
 8009496:	211f      	movs	r1, #31
 8009498:	9804      	ldr	r0, [sp, #16]
 800949a:	f7fe fe8d 	bl	80081b8 <SendMessageToModule>
											break;
 800949e:	2300      	movs	r3, #0
 80094a0:	4699      	mov	r9, r3
 80094a2:	f7ff fa0f 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80094a6:	7819      	ldrb	r1, [r3, #0]
 80094a8:	4aa9      	ldr	r2, [pc, #676]	; (8009750 <PxMessagingTask+0xf64>)
 80094aa:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80094ac:	7859      	ldrb	r1, [r3, #1]
 80094ae:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80094b0:	7899      	ldrb	r1, [r3, #2]
 80094b2:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80094b4:	78db      	ldrb	r3, [r3, #3]
 80094b6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80094b8:	2209      	movs	r2, #9
 80094ba:	211f      	movs	r1, #31
 80094bc:	9804      	ldr	r0, [sp, #16]
 80094be:	f7fe fe7b 	bl	80081b8 <SendMessageToModule>
											break;
 80094c2:	2300      	movs	r3, #0
 80094c4:	4699      	mov	r9, r3
 80094c6:	f7ff f9fd 	bl	80088c4 <PxMessagingTask+0xd8>
								}
 80094ca:	2300      	movs	r3, #0
 80094cc:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80094ce:	2a02      	cmp	r2, #2
 80094d0:	d801      	bhi.n	80094d6 <PxMessagingTask+0xcea>
 80094d2:	f7ff f9f7 	bl	80088c4 <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80094d6:	3a04      	subs	r2, #4
 80094d8:	0092      	lsls	r2, r2, #2
 80094da:	4b9f      	ldr	r3, [pc, #636]	; (8009758 <PxMessagingTask+0xf6c>)
 80094dc:	58d1      	ldr	r1, [r2, r3]
 80094de:	220f      	movs	r2, #15
 80094e0:	400a      	ands	r2, r1
 80094e2:	4b9b      	ldr	r3, [pc, #620]	; (8009750 <PxMessagingTask+0xf64>)
 80094e4:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80094e6:	454a      	cmp	r2, r9
 80094e8:	d106      	bne.n	80094f8 <PxMessagingTask+0xd0c>
									SendMessageToModule(src,
 80094ea:	2201      	movs	r2, #1
 80094ec:	211f      	movs	r1, #31
 80094ee:	9804      	ldr	r0, [sp, #16]
 80094f0:	f7fe fe62 	bl	80081b8 <SendMessageToModule>
 80094f4:	f7ff f9e6 	bl	80088c4 <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 80094f8:	0c09      	lsrs	r1, r1, #16
 80094fa:	2380      	movs	r3, #128	; 0x80
 80094fc:	059b      	lsls	r3, r3, #22
 80094fe:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8009500:	3a01      	subs	r2, #1
 8009502:	b2d0      	uxtb	r0, r2
 8009504:	2807      	cmp	r0, #7
 8009506:	d901      	bls.n	800950c <PxMessagingTask+0xd20>
 8009508:	f000 fc8c 	bl	8009e24 <PxMessagingTask+0x1638>
 800950c:	b2d2      	uxtb	r2, r2
 800950e:	0092      	lsls	r2, r2, #2
 8009510:	4892      	ldr	r0, [pc, #584]	; (800975c <PxMessagingTask+0xf70>)
 8009512:	5882      	ldr	r2, [r0, r2]
 8009514:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	4b8d      	ldr	r3, [pc, #564]	; (8009750 <PxMessagingTask+0xf64>)
 800951a:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800951c:	2202      	movs	r2, #2
 800951e:	211f      	movs	r1, #31
 8009520:	9804      	ldr	r0, [sp, #16]
 8009522:	f7fe fe49 	bl	80081b8 <SendMessageToModule>
											break;
 8009526:	2300      	movs	r3, #0
 8009528:	4699      	mov	r9, r3
 800952a:	f7ff f9cb 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	4b87      	ldr	r3, [pc, #540]	; (8009750 <PxMessagingTask+0xf64>)
 8009532:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009534:	2202      	movs	r2, #2
 8009536:	211f      	movs	r1, #31
 8009538:	9804      	ldr	r0, [sp, #16]
 800953a:	f7fe fe3d 	bl	80081b8 <SendMessageToModule>
											break;
 800953e:	2300      	movs	r3, #0
 8009540:	4699      	mov	r9, r3
 8009542:	f7ff f9bf 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8009546:	8819      	ldrh	r1, [r3, #0]
 8009548:	4a81      	ldr	r2, [pc, #516]	; (8009750 <PxMessagingTask+0xf64>)
 800954a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	0a1b      	lsrs	r3, r3, #8
 8009550:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009552:	2203      	movs	r2, #3
 8009554:	211f      	movs	r1, #31
 8009556:	9804      	ldr	r0, [sp, #16]
 8009558:	f7fe fe2e 	bl	80081b8 <SendMessageToModule>
											break;
 800955c:	2300      	movs	r3, #0
 800955e:	4699      	mov	r9, r3
 8009560:	f7ff f9b0 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8009564:	8819      	ldrh	r1, [r3, #0]
 8009566:	4a7a      	ldr	r2, [pc, #488]	; (8009750 <PxMessagingTask+0xf64>)
 8009568:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	b21b      	sxth	r3, r3
 800956e:	121b      	asrs	r3, r3, #8
 8009570:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009572:	2203      	movs	r2, #3
 8009574:	211f      	movs	r1, #31
 8009576:	9804      	ldr	r0, [sp, #16]
 8009578:	f7fe fe1e 	bl	80081b8 <SendMessageToModule>
											break;
 800957c:	2300      	movs	r3, #0
 800957e:	4699      	mov	r9, r3
 8009580:	f7ff f9a0 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8009584:	6819      	ldr	r1, [r3, #0]
 8009586:	4a72      	ldr	r2, [pc, #456]	; (8009750 <PxMessagingTask+0xf64>)
 8009588:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800958a:	6819      	ldr	r1, [r3, #0]
 800958c:	0a09      	lsrs	r1, r1, #8
 800958e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009590:	6819      	ldr	r1, [r3, #0]
 8009592:	0c09      	lsrs	r1, r1, #16
 8009594:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	0e1b      	lsrs	r3, r3, #24
 800959a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800959c:	2205      	movs	r2, #5
 800959e:	211f      	movs	r1, #31
 80095a0:	9804      	ldr	r0, [sp, #16]
 80095a2:	f7fe fe09 	bl	80081b8 <SendMessageToModule>
											break;
 80095a6:	2300      	movs	r3, #0
 80095a8:	4699      	mov	r9, r3
 80095aa:	f7ff f98b 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80095ae:	6819      	ldr	r1, [r3, #0]
 80095b0:	4a67      	ldr	r2, [pc, #412]	; (8009750 <PxMessagingTask+0xf64>)
 80095b2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80095b4:	6819      	ldr	r1, [r3, #0]
 80095b6:	1209      	asrs	r1, r1, #8
 80095b8:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80095ba:	6819      	ldr	r1, [r3, #0]
 80095bc:	1409      	asrs	r1, r1, #16
 80095be:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	161b      	asrs	r3, r3, #24
 80095c4:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80095c6:	2205      	movs	r2, #5
 80095c8:	211f      	movs	r1, #31
 80095ca:	9804      	ldr	r0, [sp, #16]
 80095cc:	f7fe fdf4 	bl	80081b8 <SendMessageToModule>
											break;
 80095d0:	2300      	movs	r3, #0
 80095d2:	4699      	mov	r9, r3
 80095d4:	f7ff f976 	bl	80088c4 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80095d8:	781a      	ldrb	r2, [r3, #0]
 80095da:	4b5d      	ldr	r3, [pc, #372]	; (8009750 <PxMessagingTask+0xf64>)
 80095dc:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80095de:	4a60      	ldr	r2, [pc, #384]	; (8009760 <PxMessagingTask+0xf74>)
 80095e0:	188a      	adds	r2, r1, r2
 80095e2:	7812      	ldrb	r2, [r2, #0]
 80095e4:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80095e6:	4a5f      	ldr	r2, [pc, #380]	; (8009764 <PxMessagingTask+0xf78>)
 80095e8:	188a      	adds	r2, r1, r2
 80095ea:	7812      	ldrb	r2, [r2, #0]
 80095ec:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80095ee:	4a5e      	ldr	r2, [pc, #376]	; (8009768 <PxMessagingTask+0xf7c>)
 80095f0:	4694      	mov	ip, r2
 80095f2:	4461      	add	r1, ip
 80095f4:	780a      	ldrb	r2, [r1, #0]
 80095f6:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 80095f8:	2209      	movs	r2, #9
 80095fa:	211f      	movs	r1, #31
 80095fc:	9804      	ldr	r0, [sp, #16]
 80095fe:	f7fe fddb 	bl	80081b8 <SendMessageToModule>
											break;
 8009602:	2300      	movs	r3, #0
 8009604:	4699      	mov	r9, r3
 8009606:	f7ff f95d 	bl	80088c4 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800960a:	4b58      	ldr	r3, [pc, #352]	; (800976c <PxMessagingTask+0xf80>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2002      	movs	r0, #2
 8009612:	4240      	negs	r0, r0
 8009614:	17c1      	asrs	r1, r0, #31
 8009616:	1812      	adds	r2, r2, r0
 8009618:	414b      	adcs	r3, r1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00c      	beq.n	8009638 <PxMessagingTask+0xe4c>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800961e:	4b54      	ldr	r3, [pc, #336]	; (8009770 <PxMessagingTask+0xf84>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b10      	cmp	r3, #16
 8009624:	d101      	bne.n	800962a <PxMessagingTask+0xe3e>
 8009626:	f000 fc13 	bl	8009e50 <PxMessagingTask+0x1664>
								responseStatus =BOS_OK;
 800962a:	4b51      	ldr	r3, [pc, #324]	; (8009770 <PxMessagingTask+0xf84>)
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	2300      	movs	r3, #0
 8009632:	4699      	mov	r9, r3
 8009634:	f7ff f946 	bl	80088c4 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009638:	2b00      	cmp	r3, #0
 800963a:	d101      	bne.n	8009640 <PxMessagingTask+0xe54>
 800963c:	2a01      	cmp	r2, #1
 800963e:	d8ee      	bhi.n	800961e <PxMessagingTask+0xe32>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009640:	2138      	movs	r1, #56	; 0x38
 8009642:	4369      	muls	r1, r5
 8009644:	4a40      	ldr	r2, [pc, #256]	; (8009748 <PxMessagingTask+0xf5c>)
 8009646:	1852      	adds	r2, r2, r1
 8009648:	5d12      	ldrb	r2, [r2, r4]
 800964a:	494a      	ldr	r1, [pc, #296]	; (8009774 <PxMessagingTask+0xf88>)
 800964c:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800964e:	2a08      	cmp	r2, #8
 8009650:	d8e5      	bhi.n	800961e <PxMessagingTask+0xe32>
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	4948      	ldr	r1, [pc, #288]	; (8009778 <PxMessagingTask+0xf8c>)
 8009656:	588a      	ldr	r2, [r1, r2]
 8009658:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800965a:	4b45      	ldr	r3, [pc, #276]	; (8009770 <PxMessagingTask+0xf84>)
 800965c:	2210      	movs	r2, #16
 800965e:	701a      	strb	r2, [r3, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	4699      	mov	r9, r3
 8009664:	f7ff f92e 	bl	80088c4 <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009668:	4a40      	ldr	r2, [pc, #256]	; (800976c <PxMessagingTask+0xf80>)
 800966a:	2038      	movs	r0, #56	; 0x38
 800966c:	4368      	muls	r0, r5
 800966e:	4936      	ldr	r1, [pc, #216]	; (8009748 <PxMessagingTask+0xf5c>)
 8009670:	1809      	adds	r1, r1, r0
 8009672:	1909      	adds	r1, r1, r4
 8009674:	784b      	ldrb	r3, [r1, #1]
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	2300      	movs	r3, #0
 800967a:	6053      	str	r3, [r2, #4]
										break;
 800967c:	e7cf      	b.n	800961e <PxMessagingTask+0xe32>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800967e:	4a3b      	ldr	r2, [pc, #236]	; (800976c <PxMessagingTask+0xf80>)
 8009680:	2038      	movs	r0, #56	; 0x38
 8009682:	4368      	muls	r0, r5
 8009684:	4930      	ldr	r1, [pc, #192]	; (8009748 <PxMessagingTask+0xf5c>)
 8009686:	1809      	adds	r1, r1, r0
 8009688:	1909      	adds	r1, r1, r4
 800968a:	2301      	movs	r3, #1
 800968c:	56cb      	ldrsb	r3, [r1, r3]
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	17db      	asrs	r3, r3, #31
 8009692:	6053      	str	r3, [r2, #4]
										break;
 8009694:	e7c3      	b.n	800961e <PxMessagingTask+0xe32>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 8009696:	4a35      	ldr	r2, [pc, #212]	; (800976c <PxMessagingTask+0xf80>)
 8009698:	2038      	movs	r0, #56	; 0x38
 800969a:	4368      	muls	r0, r5
 800969c:	492a      	ldr	r1, [pc, #168]	; (8009748 <PxMessagingTask+0xf5c>)
 800969e:	1809      	adds	r1, r1, r0
 80096a0:	1909      	adds	r1, r1, r4
 80096a2:	788b      	ldrb	r3, [r1, #2]
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	7849      	ldrb	r1, [r1, #1]
 80096a8:	185b      	adds	r3, r3, r1
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	17db      	asrs	r3, r3, #31
 80096ae:	6053      	str	r3, [r2, #4]
										break;
 80096b0:	e7b5      	b.n	800961e <PxMessagingTask+0xe32>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 80096b2:	4a2e      	ldr	r2, [pc, #184]	; (800976c <PxMessagingTask+0xf80>)
 80096b4:	2038      	movs	r0, #56	; 0x38
 80096b6:	4368      	muls	r0, r5
 80096b8:	4923      	ldr	r1, [pc, #140]	; (8009748 <PxMessagingTask+0xf5c>)
 80096ba:	1809      	adds	r1, r1, r0
 80096bc:	1909      	adds	r1, r1, r4
 80096be:	788b      	ldrb	r3, [r1, #2]
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	7849      	ldrb	r1, [r1, #1]
 80096c4:	185b      	adds	r3, r3, r1
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	17db      	asrs	r3, r3, #31
 80096ca:	6053      	str	r3, [r2, #4]
										break;
 80096cc:	e7a7      	b.n	800961e <PxMessagingTask+0xe32>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80096ce:	4a27      	ldr	r2, [pc, #156]	; (800976c <PxMessagingTask+0xf80>)
 80096d0:	2038      	movs	r0, #56	; 0x38
 80096d2:	4368      	muls	r0, r5
 80096d4:	491c      	ldr	r1, [pc, #112]	; (8009748 <PxMessagingTask+0xf5c>)
 80096d6:	1809      	adds	r1, r1, r0
 80096d8:	1909      	adds	r1, r1, r4
 80096da:	788b      	ldrb	r3, [r1, #2]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	78c8      	ldrb	r0, [r1, #3]
 80096e0:	0400      	lsls	r0, r0, #16
 80096e2:	181b      	adds	r3, r3, r0
 80096e4:	7848      	ldrb	r0, [r1, #1]
 80096e6:	181b      	adds	r3, r3, r0
 80096e8:	7909      	ldrb	r1, [r1, #4]
 80096ea:	0609      	lsls	r1, r1, #24
 80096ec:	185b      	adds	r3, r3, r1
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	2300      	movs	r3, #0
 80096f2:	6053      	str	r3, [r2, #4]
										break;
 80096f4:	e793      	b.n	800961e <PxMessagingTask+0xe32>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 80096f6:	4a1d      	ldr	r2, [pc, #116]	; (800976c <PxMessagingTask+0xf80>)
 80096f8:	2038      	movs	r0, #56	; 0x38
 80096fa:	4368      	muls	r0, r5
 80096fc:	4912      	ldr	r1, [pc, #72]	; (8009748 <PxMessagingTask+0xf5c>)
 80096fe:	1809      	adds	r1, r1, r0
 8009700:	1909      	adds	r1, r1, r4
 8009702:	788b      	ldrb	r3, [r1, #2]
 8009704:	021b      	lsls	r3, r3, #8
 8009706:	7848      	ldrb	r0, [r1, #1]
 8009708:	181b      	adds	r3, r3, r0
 800970a:	78c8      	ldrb	r0, [r1, #3]
 800970c:	0400      	lsls	r0, r0, #16
 800970e:	181b      	adds	r3, r3, r0
 8009710:	7909      	ldrb	r1, [r1, #4]
 8009712:	0609      	lsls	r1, r1, #24
 8009714:	185b      	adds	r3, r3, r1
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	17db      	asrs	r3, r3, #31
 800971a:	6053      	str	r3, [r2, #4]
										break;
 800971c:	e77f      	b.n	800961e <PxMessagingTask+0xe32>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800971e:	4a13      	ldr	r2, [pc, #76]	; (800976c <PxMessagingTask+0xf80>)
 8009720:	2038      	movs	r0, #56	; 0x38
 8009722:	4368      	muls	r0, r5
 8009724:	4908      	ldr	r1, [pc, #32]	; (8009748 <PxMessagingTask+0xf5c>)
 8009726:	1809      	adds	r1, r1, r0
 8009728:	1909      	adds	r1, r1, r4
 800972a:	788b      	ldrb	r3, [r1, #2]
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	78c8      	ldrb	r0, [r1, #3]
 8009730:	0400      	lsls	r0, r0, #16
 8009732:	181b      	adds	r3, r3, r0
 8009734:	7848      	ldrb	r0, [r1, #1]
 8009736:	181b      	adds	r3, r3, r0
 8009738:	7909      	ldrb	r1, [r1, #4]
 800973a:	0609      	lsls	r1, r1, #24
 800973c:	185b      	adds	r3, r3, r1
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	2300      	movs	r3, #0
 8009742:	6053      	str	r3, [r2, #4]
										break;
 8009744:	e76b      	b.n	800961e <PxMessagingTask+0xe32>
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	20000544 	.word	0x20000544
 800974c:	20000098 	.word	0x20000098
 8009750:	200006c8 	.word	0x200006c8
 8009754:	08019d08 	.word	0x08019d08
 8009758:	200061f8 	.word	0x200061f8
 800975c:	08019d28 	.word	0x08019d28
 8009760:	20000001 	.word	0x20000001
 8009764:	20000002 	.word	0x20000002
 8009768:	20000003 	.word	0x20000003
 800976c:	20000880 	.word	0x20000880
 8009770:	20000888 	.word	0x20000888
 8009774:	20000094 	.word	0x20000094
 8009778:	08019d48 	.word	0x08019d48
							responseStatus =BOS_OK; // Initialize response
 800977c:	4bdd      	ldr	r3, [pc, #884]	; (8009af4 <PxMessagingTask+0x1308>)
 800977e:	2200      	movs	r2, #0
 8009780:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 8009782:	46a1      	mov	r9, r4
 8009784:	4bdc      	ldr	r3, [pc, #880]	; (8009af8 <PxMessagingTask+0x130c>)
 8009786:	199b      	adds	r3, r3, r6
 8009788:	5d1b      	ldrb	r3, [r3, r4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d100      	bne.n	8009790 <PxMessagingTask+0xfa4>
 800978e:	e10b      	b.n	80099a8 <PxMessagingTask+0x11bc>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8009790:	2b1e      	cmp	r3, #30
 8009792:	d900      	bls.n	8009796 <PxMessagingTask+0xfaa>
 8009794:	e104      	b.n	80099a0 <PxMessagingTask+0x11b4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8009796:	1e5c      	subs	r4, r3, #1
 8009798:	00a2      	lsls	r2, r4, #2
 800979a:	4bd8      	ldr	r3, [pc, #864]	; (8009afc <PxMessagingTask+0x1310>)
 800979c:	58d1      	ldr	r1, [r2, r3]
 800979e:	0c0b      	lsrs	r3, r1, #16
 80097a0:	2280      	movs	r2, #128	; 0x80
 80097a2:	0592      	lsls	r2, r2, #22
 80097a4:	4694      	mov	ip, r2
 80097a6:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80097a8:	464a      	mov	r2, r9
 80097aa:	1c57      	adds	r7, r2, #1
 80097ac:	2038      	movs	r0, #56	; 0x38
 80097ae:	4368      	muls	r0, r5
 80097b0:	4ad1      	ldr	r2, [pc, #836]	; (8009af8 <PxMessagingTask+0x130c>)
 80097b2:	1812      	adds	r2, r2, r0
 80097b4:	5dd2      	ldrb	r2, [r2, r7]
 80097b6:	4693      	mov	fp, r2
 80097b8:	3a01      	subs	r2, #1
 80097ba:	b2d0      	uxtb	r0, r2
 80097bc:	2807      	cmp	r0, #7
 80097be:	d81b      	bhi.n	80097f8 <PxMessagingTask+0x100c>
 80097c0:	b2d2      	uxtb	r2, r2
 80097c2:	0092      	lsls	r2, r2, #2
 80097c4:	48ce      	ldr	r0, [pc, #824]	; (8009b00 <PxMessagingTask+0x1314>)
 80097c6:	5882      	ldr	r2, [r0, r2]
 80097c8:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097ca:	070a      	lsls	r2, r1, #28
 80097cc:	d109      	bne.n	80097e2 <PxMessagingTask+0xff6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 80097ce:	2001      	movs	r0, #1
 80097d0:	f00a f81e 	bl	8013810 <malloc>
 80097d4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80097d6:	d00c      	beq.n	80097f2 <PxMessagingTask+0x1006>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097d8:	00a4      	lsls	r4, r4, #2
 80097da:	0400      	lsls	r0, r0, #16
 80097dc:	4458      	add	r0, fp
 80097de:	4ac7      	ldr	r2, [pc, #796]	; (8009afc <PxMessagingTask+0x1310>)
 80097e0:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80097e2:	2138      	movs	r1, #56	; 0x38
 80097e4:	4369      	muls	r1, r5
 80097e6:	4ac4      	ldr	r2, [pc, #784]	; (8009af8 <PxMessagingTask+0x130c>)
 80097e8:	1852      	adds	r2, r2, r1
 80097ea:	444a      	add	r2, r9
 80097ec:	7892      	ldrb	r2, [r2, #2]
 80097ee:	701a      	strb	r2, [r3, #0]
 80097f0:	e002      	b.n	80097f8 <PxMessagingTask+0x100c>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80097f2:	4bc0      	ldr	r3, [pc, #768]	; (8009af4 <PxMessagingTask+0x1308>)
 80097f4:	2212      	movs	r2, #18
 80097f6:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 80097f8:	2338      	movs	r3, #56	; 0x38
 80097fa:	436b      	muls	r3, r5
 80097fc:	4abe      	ldr	r2, [pc, #760]	; (8009af8 <PxMessagingTask+0x130c>)
 80097fe:	18d2      	adds	r2, r2, r3
 8009800:	464b      	mov	r3, r9
 8009802:	5cd3      	ldrb	r3, [r2, r3]
 8009804:	3b01      	subs	r3, #1
 8009806:	0098      	lsls	r0, r3, #2
 8009808:	49bc      	ldr	r1, [pc, #752]	; (8009afc <PxMessagingTask+0x1310>)
 800980a:	5841      	ldr	r1, [r0, r1]
 800980c:	5dd2      	ldrb	r2, [r2, r7]
 800980e:	200f      	movs	r0, #15
 8009810:	4008      	ands	r0, r1
 8009812:	4290      	cmp	r0, r2
 8009814:	d009      	beq.n	800982a <PxMessagingTask+0x103e>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	48ba      	ldr	r0, [pc, #744]	; (8009b04 <PxMessagingTask+0x1318>)
 800981a:	4684      	mov	ip, r0
 800981c:	4462      	add	r2, ip
 800981e:	400a      	ands	r2, r1
 8009820:	49b6      	ldr	r1, [pc, #728]	; (8009afc <PxMessagingTask+0x1310>)
 8009822:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009824:	4bb3      	ldr	r3, [pc, #716]	; (8009af4 <PxMessagingTask+0x1308>)
 8009826:	2214      	movs	r2, #20
 8009828:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800982a:	4bb7      	ldr	r3, [pc, #732]	; (8009b08 <PxMessagingTask+0x131c>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2240      	movs	r2, #64	; 0x40
 8009830:	4393      	bics	r3, r2
 8009832:	2200      	movs	r2, #0
 8009834:	4691      	mov	r9, r2
 8009836:	2b20      	cmp	r3, #32
 8009838:	d001      	beq.n	800983e <PxMessagingTask+0x1052>
 800983a:	f7ff f843 	bl	80088c4 <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 800983e:	4bad      	ldr	r3, [pc, #692]	; (8009af4 <PxMessagingTask+0x1308>)
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	4bb2      	ldr	r3, [pc, #712]	; (8009b0c <PxMessagingTask+0x1320>)
 8009844:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 8009846:	2201      	movs	r2, #1
 8009848:	2121      	movs	r1, #33	; 0x21
 800984a:	9804      	ldr	r0, [sp, #16]
 800984c:	f7fe fcb4 	bl	80081b8 <SendMessageToModule>
 8009850:	f7ff f838 	bl	80088c4 <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009854:	070a      	lsls	r2, r1, #28
 8009856:	d10a      	bne.n	800986e <PxMessagingTask+0x1082>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009858:	2001      	movs	r0, #1
 800985a:	f009 ffd9 	bl	8013810 <malloc>
 800985e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009860:	d100      	bne.n	8009864 <PxMessagingTask+0x1078>
 8009862:	e36d      	b.n	8009f40 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009864:	00a4      	lsls	r4, r4, #2
 8009866:	0400      	lsls	r0, r0, #16
 8009868:	3002      	adds	r0, #2
 800986a:	4aa4      	ldr	r2, [pc, #656]	; (8009afc <PxMessagingTask+0x1310>)
 800986c:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800986e:	2138      	movs	r1, #56	; 0x38
 8009870:	4369      	muls	r1, r5
 8009872:	4aa1      	ldr	r2, [pc, #644]	; (8009af8 <PxMessagingTask+0x130c>)
 8009874:	1852      	adds	r2, r2, r1
 8009876:	444a      	add	r2, r9
 8009878:	7892      	ldrb	r2, [r2, #2]
 800987a:	b252      	sxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	e7bb      	b.n	80097f8 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009880:	070a      	lsls	r2, r1, #28
 8009882:	d10a      	bne.n	800989a <PxMessagingTask+0x10ae>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009884:	2002      	movs	r0, #2
 8009886:	f009 ffc3 	bl	8013810 <malloc>
 800988a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800988c:	d100      	bne.n	8009890 <PxMessagingTask+0x10a4>
 800988e:	e357      	b.n	8009f40 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009890:	00a4      	lsls	r4, r4, #2
 8009892:	0400      	lsls	r0, r0, #16
 8009894:	3003      	adds	r0, #3
 8009896:	4a99      	ldr	r2, [pc, #612]	; (8009afc <PxMessagingTask+0x1310>)
 8009898:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800989a:	2138      	movs	r1, #56	; 0x38
 800989c:	4369      	muls	r1, r5
 800989e:	4a96      	ldr	r2, [pc, #600]	; (8009af8 <PxMessagingTask+0x130c>)
 80098a0:	1852      	adds	r2, r2, r1
 80098a2:	444a      	add	r2, r9
 80098a4:	78d1      	ldrb	r1, [r2, #3]
 80098a6:	0209      	lsls	r1, r1, #8
 80098a8:	7892      	ldrb	r2, [r2, #2]
 80098aa:	1852      	adds	r2, r2, r1
 80098ac:	b292      	uxth	r2, r2
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	e7a2      	b.n	80097f8 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80098b2:	070a      	lsls	r2, r1, #28
 80098b4:	d10a      	bne.n	80098cc <PxMessagingTask+0x10e0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 80098b6:	2002      	movs	r0, #2
 80098b8:	f009 ffaa 	bl	8013810 <malloc>
 80098bc:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80098be:	d100      	bne.n	80098c2 <PxMessagingTask+0x10d6>
 80098c0:	e33e      	b.n	8009f40 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098c2:	00a4      	lsls	r4, r4, #2
 80098c4:	0400      	lsls	r0, r0, #16
 80098c6:	3004      	adds	r0, #4
 80098c8:	4a8c      	ldr	r2, [pc, #560]	; (8009afc <PxMessagingTask+0x1310>)
 80098ca:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 80098cc:	2138      	movs	r1, #56	; 0x38
 80098ce:	4369      	muls	r1, r5
 80098d0:	4a89      	ldr	r2, [pc, #548]	; (8009af8 <PxMessagingTask+0x130c>)
 80098d2:	1852      	adds	r2, r2, r1
 80098d4:	444a      	add	r2, r9
 80098d6:	78d1      	ldrb	r1, [r2, #3]
 80098d8:	0209      	lsls	r1, r1, #8
 80098da:	7892      	ldrb	r2, [r2, #2]
 80098dc:	1852      	adds	r2, r2, r1
 80098de:	b212      	sxth	r2, r2
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	e789      	b.n	80097f8 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80098e4:	070a      	lsls	r2, r1, #28
 80098e6:	d10a      	bne.n	80098fe <PxMessagingTask+0x1112>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80098e8:	2004      	movs	r0, #4
 80098ea:	f009 ff91 	bl	8013810 <malloc>
 80098ee:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80098f0:	d100      	bne.n	80098f4 <PxMessagingTask+0x1108>
 80098f2:	e325      	b.n	8009f40 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098f4:	00a4      	lsls	r4, r4, #2
 80098f6:	0400      	lsls	r0, r0, #16
 80098f8:	3005      	adds	r0, #5
 80098fa:	4a80      	ldr	r2, [pc, #512]	; (8009afc <PxMessagingTask+0x1310>)
 80098fc:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 80098fe:	2238      	movs	r2, #56	; 0x38
 8009900:	436a      	muls	r2, r5
 8009902:	497d      	ldr	r1, [pc, #500]	; (8009af8 <PxMessagingTask+0x130c>)
 8009904:	1889      	adds	r1, r1, r2
 8009906:	4449      	add	r1, r9
 8009908:	78ca      	ldrb	r2, [r1, #3]
 800990a:	0212      	lsls	r2, r2, #8
 800990c:	7908      	ldrb	r0, [r1, #4]
 800990e:	0400      	lsls	r0, r0, #16
 8009910:	1812      	adds	r2, r2, r0
 8009912:	7888      	ldrb	r0, [r1, #2]
 8009914:	1812      	adds	r2, r2, r0
 8009916:	7949      	ldrb	r1, [r1, #5]
 8009918:	0609      	lsls	r1, r1, #24
 800991a:	1852      	adds	r2, r2, r1
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	e76b      	b.n	80097f8 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009920:	070a      	lsls	r2, r1, #28
 8009922:	d10a      	bne.n	800993a <PxMessagingTask+0x114e>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009924:	2004      	movs	r0, #4
 8009926:	f009 ff73 	bl	8013810 <malloc>
 800992a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800992c:	d100      	bne.n	8009930 <PxMessagingTask+0x1144>
 800992e:	e307      	b.n	8009f40 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009930:	00a4      	lsls	r4, r4, #2
 8009932:	0400      	lsls	r0, r0, #16
 8009934:	3006      	adds	r0, #6
 8009936:	4a71      	ldr	r2, [pc, #452]	; (8009afc <PxMessagingTask+0x1310>)
 8009938:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800993a:	2238      	movs	r2, #56	; 0x38
 800993c:	436a      	muls	r2, r5
 800993e:	496e      	ldr	r1, [pc, #440]	; (8009af8 <PxMessagingTask+0x130c>)
 8009940:	1889      	adds	r1, r1, r2
 8009942:	4449      	add	r1, r9
 8009944:	78ca      	ldrb	r2, [r1, #3]
 8009946:	0212      	lsls	r2, r2, #8
 8009948:	7888      	ldrb	r0, [r1, #2]
 800994a:	1812      	adds	r2, r2, r0
 800994c:	7908      	ldrb	r0, [r1, #4]
 800994e:	0400      	lsls	r0, r0, #16
 8009950:	1812      	adds	r2, r2, r0
 8009952:	7949      	ldrb	r1, [r1, #5]
 8009954:	0609      	lsls	r1, r1, #24
 8009956:	1852      	adds	r2, r2, r1
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	e74d      	b.n	80097f8 <PxMessagingTask+0x100c>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800995c:	070a      	lsls	r2, r1, #28
 800995e:	d10a      	bne.n	8009976 <PxMessagingTask+0x118a>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009960:	2004      	movs	r0, #4
 8009962:	f009 ff55 	bl	8013810 <malloc>
 8009966:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009968:	d100      	bne.n	800996c <PxMessagingTask+0x1180>
 800996a:	e2e9      	b.n	8009f40 <PxMessagingTask+0x1754>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800996c:	00a4      	lsls	r4, r4, #2
 800996e:	0400      	lsls	r0, r0, #16
 8009970:	3007      	adds	r0, #7
 8009972:	4a62      	ldr	r2, [pc, #392]	; (8009afc <PxMessagingTask+0x1310>)
 8009974:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009976:	2238      	movs	r2, #56	; 0x38
 8009978:	436a      	muls	r2, r5
 800997a:	495f      	ldr	r1, [pc, #380]	; (8009af8 <PxMessagingTask+0x130c>)
 800997c:	1889      	adds	r1, r1, r2
 800997e:	4449      	add	r1, r9
 8009980:	78ca      	ldrb	r2, [r1, #3]
 8009982:	0212      	lsls	r2, r2, #8
 8009984:	7908      	ldrb	r0, [r1, #4]
 8009986:	0400      	lsls	r0, r0, #16
 8009988:	1812      	adds	r2, r2, r0
 800998a:	7888      	ldrb	r0, [r1, #2]
 800998c:	1812      	adds	r2, r2, r0
 800998e:	7949      	ldrb	r1, [r1, #5]
 8009990:	0609      	lsls	r1, r1, #24
 8009992:	1852      	adds	r2, r2, r1
 8009994:	495e      	ldr	r1, [pc, #376]	; (8009b10 <PxMessagingTask+0x1324>)
 8009996:	600a      	str	r2, [r1, #0]
 8009998:	2000      	movs	r0, #0
 800999a:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e72b      	b.n	80097f8 <PxMessagingTask+0x100c>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 80099a0:	4b54      	ldr	r3, [pc, #336]	; (8009af4 <PxMessagingTask+0x1308>)
 80099a2:	2213      	movs	r2, #19
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e740      	b.n	800982a <PxMessagingTask+0x103e>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80099a8:	2238      	movs	r2, #56	; 0x38
 80099aa:	436a      	muls	r2, r5
 80099ac:	4b52      	ldr	r3, [pc, #328]	; (8009af8 <PxMessagingTask+0x130c>)
 80099ae:	189b      	adds	r3, r3, r2
 80099b0:	191b      	adds	r3, r3, r4
 80099b2:	789c      	ldrb	r4, [r3, #2]
 80099b4:	0624      	lsls	r4, r4, #24
 80099b6:	78da      	ldrb	r2, [r3, #3]
 80099b8:	0412      	lsls	r2, r2, #16
 80099ba:	18a4      	adds	r4, r4, r2
 80099bc:	795a      	ldrb	r2, [r3, #5]
 80099be:	18a4      	adds	r4, r4, r2
 80099c0:	791b      	ldrb	r3, [r3, #4]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 80099c6:	23e0      	movs	r3, #224	; 0xe0
 80099c8:	061b      	lsls	r3, r3, #24
 80099ca:	18e2      	adds	r2, r4, r3
 80099cc:	4b51      	ldr	r3, [pc, #324]	; (8009b14 <PxMessagingTask+0x1328>)
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d86f      	bhi.n	8009ab2 <PxMessagingTask+0x12c6>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 80099d2:	2238      	movs	r2, #56	; 0x38
 80099d4:	436a      	muls	r2, r5
 80099d6:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <PxMessagingTask+0x130c>)
 80099d8:	189b      	adds	r3, r3, r2
 80099da:	444b      	add	r3, r9
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	3b01      	subs	r3, #1
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	2a07      	cmp	r2, #7
 80099e4:	d900      	bls.n	80099e8 <PxMessagingTask+0x11fc>
 80099e6:	e720      	b.n	800982a <PxMessagingTask+0x103e>
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a4a      	ldr	r2, [pc, #296]	; (8009b18 <PxMessagingTask+0x132c>)
 80099ee:	58d3      	ldr	r3, [r2, r3]
 80099f0:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 80099f2:	2238      	movs	r2, #56	; 0x38
 80099f4:	436a      	muls	r2, r5
 80099f6:	4b40      	ldr	r3, [pc, #256]	; (8009af8 <PxMessagingTask+0x130c>)
 80099f8:	189b      	adds	r3, r3, r2
 80099fa:	444b      	add	r3, r9
 80099fc:	799b      	ldrb	r3, [r3, #6]
 80099fe:	7023      	strb	r3, [r4, #0]
											break;
 8009a00:	e713      	b.n	800982a <PxMessagingTask+0x103e>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 8009a02:	2238      	movs	r2, #56	; 0x38
 8009a04:	436a      	muls	r2, r5
 8009a06:	4b3c      	ldr	r3, [pc, #240]	; (8009af8 <PxMessagingTask+0x130c>)
 8009a08:	189b      	adds	r3, r3, r2
 8009a0a:	444b      	add	r3, r9
 8009a0c:	799b      	ldrb	r3, [r3, #6]
 8009a0e:	b25b      	sxtb	r3, r3
 8009a10:	7023      	strb	r3, [r4, #0]
											break;
 8009a12:	e70a      	b.n	800982a <PxMessagingTask+0x103e>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009a14:	2238      	movs	r2, #56	; 0x38
 8009a16:	436a      	muls	r2, r5
 8009a18:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <PxMessagingTask+0x130c>)
 8009a1a:	189b      	adds	r3, r3, r2
 8009a1c:	444b      	add	r3, r9
 8009a1e:	79da      	ldrb	r2, [r3, #7]
 8009a20:	0212      	lsls	r2, r2, #8
 8009a22:	799b      	ldrb	r3, [r3, #6]
 8009a24:	189b      	adds	r3, r3, r2
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	8023      	strh	r3, [r4, #0]
											break;
 8009a2a:	e6fe      	b.n	800982a <PxMessagingTask+0x103e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009a2c:	2238      	movs	r2, #56	; 0x38
 8009a2e:	436a      	muls	r2, r5
 8009a30:	4b31      	ldr	r3, [pc, #196]	; (8009af8 <PxMessagingTask+0x130c>)
 8009a32:	189b      	adds	r3, r3, r2
 8009a34:	444b      	add	r3, r9
 8009a36:	79da      	ldrb	r2, [r3, #7]
 8009a38:	0212      	lsls	r2, r2, #8
 8009a3a:	799b      	ldrb	r3, [r3, #6]
 8009a3c:	189b      	adds	r3, r3, r2
 8009a3e:	b21b      	sxth	r3, r3
 8009a40:	8023      	strh	r3, [r4, #0]
											break;
 8009a42:	e6f2      	b.n	800982a <PxMessagingTask+0x103e>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a44:	2338      	movs	r3, #56	; 0x38
 8009a46:	436b      	muls	r3, r5
 8009a48:	4a2b      	ldr	r2, [pc, #172]	; (8009af8 <PxMessagingTask+0x130c>)
 8009a4a:	18d2      	adds	r2, r2, r3
 8009a4c:	444a      	add	r2, r9
 8009a4e:	79d3      	ldrb	r3, [r2, #7]
 8009a50:	021b      	lsls	r3, r3, #8
 8009a52:	7a11      	ldrb	r1, [r2, #8]
 8009a54:	0409      	lsls	r1, r1, #16
 8009a56:	185b      	adds	r3, r3, r1
 8009a58:	7991      	ldrb	r1, [r2, #6]
 8009a5a:	185b      	adds	r3, r3, r1
 8009a5c:	7a52      	ldrb	r2, [r2, #9]
 8009a5e:	0612      	lsls	r2, r2, #24
 8009a60:	189b      	adds	r3, r3, r2
 8009a62:	6023      	str	r3, [r4, #0]
											break;
 8009a64:	e6e1      	b.n	800982a <PxMessagingTask+0x103e>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 8009a66:	2338      	movs	r3, #56	; 0x38
 8009a68:	436b      	muls	r3, r5
 8009a6a:	4a23      	ldr	r2, [pc, #140]	; (8009af8 <PxMessagingTask+0x130c>)
 8009a6c:	18d2      	adds	r2, r2, r3
 8009a6e:	444a      	add	r2, r9
 8009a70:	79d3      	ldrb	r3, [r2, #7]
 8009a72:	021b      	lsls	r3, r3, #8
 8009a74:	7991      	ldrb	r1, [r2, #6]
 8009a76:	185b      	adds	r3, r3, r1
 8009a78:	7a11      	ldrb	r1, [r2, #8]
 8009a7a:	0409      	lsls	r1, r1, #16
 8009a7c:	185b      	adds	r3, r3, r1
 8009a7e:	7a52      	ldrb	r2, [r2, #9]
 8009a80:	0612      	lsls	r2, r2, #24
 8009a82:	189b      	adds	r3, r3, r2
 8009a84:	6023      	str	r3, [r4, #0]
											break;
 8009a86:	e6d0      	b.n	800982a <PxMessagingTask+0x103e>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a88:	2338      	movs	r3, #56	; 0x38
 8009a8a:	436b      	muls	r3, r5
 8009a8c:	4a1a      	ldr	r2, [pc, #104]	; (8009af8 <PxMessagingTask+0x130c>)
 8009a8e:	18d2      	adds	r2, r2, r3
 8009a90:	444a      	add	r2, r9
 8009a92:	79d3      	ldrb	r3, [r2, #7]
 8009a94:	021b      	lsls	r3, r3, #8
 8009a96:	7a11      	ldrb	r1, [r2, #8]
 8009a98:	0409      	lsls	r1, r1, #16
 8009a9a:	185b      	adds	r3, r3, r1
 8009a9c:	7991      	ldrb	r1, [r2, #6]
 8009a9e:	185b      	adds	r3, r3, r1
 8009aa0:	7a52      	ldrb	r2, [r2, #9]
 8009aa2:	0612      	lsls	r2, r2, #24
 8009aa4:	189b      	adds	r3, r3, r2
 8009aa6:	4a1a      	ldr	r2, [pc, #104]	; (8009b10 <PxMessagingTask+0x1324>)
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009aae:	6023      	str	r3, [r4, #0]
											break;
 8009ab0:	e6bb      	b.n	800982a <PxMessagingTask+0x103e>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009ab2:	4a1a      	ldr	r2, [pc, #104]	; (8009b1c <PxMessagingTask+0x1330>)
 8009ab4:	23f8      	movs	r3, #248	; 0xf8
 8009ab6:	061b      	lsls	r3, r3, #24
 8009ab8:	18e3      	adds	r3, r4, r3
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d900      	bls.n	8009ac0 <PxMessagingTask+0x12d4>
 8009abe:	e0af      	b.n	8009c20 <PxMessagingTask+0x1434>
									HAL_FLASH_Unlock();
 8009ac0:	f007 fe26 	bl	8011710 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009ac4:	2f22      	cmp	r7, #34	; 0x22
 8009ac6:	d102      	bne.n	8009ace <PxMessagingTask+0x12e2>
										EraseSector(temp32);
 8009ac8:	0020      	movs	r0, r4
 8009aca:	f002 fe8f 	bl	800c7ec <EraseSector>
									if(responseStatus == BOS_OK){
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <PxMessagingTask+0x1308>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d12e      	bne.n	8009b34 <PxMessagingTask+0x1348>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009ad6:	2238      	movs	r2, #56	; 0x38
 8009ad8:	436a      	muls	r2, r5
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <PxMessagingTask+0x130c>)
 8009adc:	189b      	adds	r3, r3, r2
 8009ade:	444b      	add	r3, r9
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	2a07      	cmp	r2, #7
 8009ae8:	d824      	bhi.n	8009b34 <PxMessagingTask+0x1348>
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <PxMessagingTask+0x1334>)
 8009af0:	58d3      	ldr	r3, [r2, r3]
 8009af2:	469f      	mov	pc, r3
 8009af4:	20000888 	.word	0x20000888
 8009af8:	20000544 	.word	0x20000544
 8009afc:	200061f8 	.word	0x200061f8
 8009b00:	08019d6c 	.word	0x08019d6c
 8009b04:	0000fff0 	.word	0x0000fff0
 8009b08:	200061f0 	.word	0x200061f0
 8009b0c:	200006c8 	.word	0x200006c8
 8009b10:	20000880 	.word	0x20000880
 8009b14:	00007fff 	.word	0x00007fff
 8009b18:	08019d8c 	.word	0x08019d8c
 8009b1c:	0001ffff 	.word	0x0001ffff
 8009b20:	08019dac 	.word	0x08019dac
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009b24:	8823      	ldrh	r3, [r4, #0]
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4acb      	ldr	r2, [pc, #812]	; (8009e58 <PxMessagingTask+0x166c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d00c      	beq.n	8009b48 <PxMessagingTask+0x135c>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b2e:	4bcb      	ldr	r3, [pc, #812]	; (8009e5c <PxMessagingTask+0x1670>)
 8009b30:	2216      	movs	r2, #22
 8009b32:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8009b34:	f007 fdfe 	bl	8011734 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d100      	bne.n	8009b40 <PxMessagingTask+0x1354>
 8009b3e:	e674      	b.n	800982a <PxMessagingTask+0x103e>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b40:	4bc6      	ldr	r3, [pc, #792]	; (8009e5c <PxMessagingTask+0x1670>)
 8009b42:	2216      	movs	r2, #22
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	e670      	b.n	800982a <PxMessagingTask+0x103e>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009b48:	2238      	movs	r2, #56	; 0x38
 8009b4a:	436a      	muls	r2, r5
 8009b4c:	4bc4      	ldr	r3, [pc, #784]	; (8009e60 <PxMessagingTask+0x1674>)
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	444b      	add	r3, r9
 8009b52:	799a      	ldrb	r2, [r3, #6]
 8009b54:	2300      	movs	r3, #0
 8009b56:	49c3      	ldr	r1, [pc, #780]	; (8009e64 <PxMessagingTask+0x1678>)
 8009b58:	600a      	str	r2, [r1, #0]
 8009b5a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b5c:	0021      	movs	r1, r4
 8009b5e:	2001      	movs	r0, #1
 8009b60:	f007 fe20 	bl	80117a4 <HAL_FLASH_Program>
 8009b64:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009b66:	e7e5      	b.n	8009b34 <PxMessagingTask+0x1348>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009b68:	8823      	ldrh	r3, [r4, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	4aba      	ldr	r2, [pc, #744]	; (8009e58 <PxMessagingTask+0x166c>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d003      	beq.n	8009b7a <PxMessagingTask+0x138e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b72:	4bba      	ldr	r3, [pc, #744]	; (8009e5c <PxMessagingTask+0x1670>)
 8009b74:	2216      	movs	r2, #22
 8009b76:	701a      	strb	r2, [r3, #0]
													break;
 8009b78:	e7dc      	b.n	8009b34 <PxMessagingTask+0x1348>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009b7a:	2238      	movs	r2, #56	; 0x38
 8009b7c:	436a      	muls	r2, r5
 8009b7e:	4bb8      	ldr	r3, [pc, #736]	; (8009e60 <PxMessagingTask+0x1674>)
 8009b80:	189b      	adds	r3, r3, r2
 8009b82:	444b      	add	r3, r9
 8009b84:	79da      	ldrb	r2, [r3, #7]
 8009b86:	0212      	lsls	r2, r2, #8
 8009b88:	799b      	ldrb	r3, [r3, #6]
 8009b8a:	18d2      	adds	r2, r2, r3
 8009b8c:	17d3      	asrs	r3, r2, #31
 8009b8e:	49b5      	ldr	r1, [pc, #724]	; (8009e64 <PxMessagingTask+0x1678>)
 8009b90:	600a      	str	r2, [r1, #0]
 8009b92:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b94:	0021      	movs	r1, r4
 8009b96:	2001      	movs	r0, #1
 8009b98:	f007 fe04 	bl	80117a4 <HAL_FLASH_Program>
 8009b9c:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009b9e:	e7c9      	b.n	8009b34 <PxMessagingTask+0x1348>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009ba0:	6823      	ldr	r3, [r4, #0]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	d003      	beq.n	8009bae <PxMessagingTask+0x13c2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009ba6:	4bad      	ldr	r3, [pc, #692]	; (8009e5c <PxMessagingTask+0x1670>)
 8009ba8:	2216      	movs	r2, #22
 8009baa:	701a      	strb	r2, [r3, #0]
													break;
 8009bac:	e7c2      	b.n	8009b34 <PxMessagingTask+0x1348>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009bae:	2238      	movs	r2, #56	; 0x38
 8009bb0:	436a      	muls	r2, r5
 8009bb2:	4bab      	ldr	r3, [pc, #684]	; (8009e60 <PxMessagingTask+0x1674>)
 8009bb4:	189b      	adds	r3, r3, r2
 8009bb6:	444b      	add	r3, r9
 8009bb8:	79da      	ldrb	r2, [r3, #7]
 8009bba:	0212      	lsls	r2, r2, #8
 8009bbc:	7a19      	ldrb	r1, [r3, #8]
 8009bbe:	0409      	lsls	r1, r1, #16
 8009bc0:	1852      	adds	r2, r2, r1
 8009bc2:	7999      	ldrb	r1, [r3, #6]
 8009bc4:	1852      	adds	r2, r2, r1
 8009bc6:	7a5b      	ldrb	r3, [r3, #9]
 8009bc8:	061b      	lsls	r3, r3, #24
 8009bca:	18d2      	adds	r2, r2, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	49a5      	ldr	r1, [pc, #660]	; (8009e64 <PxMessagingTask+0x1678>)
 8009bd0:	600a      	str	r2, [r1, #0]
 8009bd2:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009bd4:	0021      	movs	r1, r4
 8009bd6:	2002      	movs	r0, #2
 8009bd8:	f007 fde4 	bl	80117a4 <HAL_FLASH_Program>
 8009bdc:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009bde:	e7a9      	b.n	8009b34 <PxMessagingTask+0x1348>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	d003      	beq.n	8009bee <PxMessagingTask+0x1402>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009be6:	4b9d      	ldr	r3, [pc, #628]	; (8009e5c <PxMessagingTask+0x1670>)
 8009be8:	2216      	movs	r2, #22
 8009bea:	701a      	strb	r2, [r3, #0]
													break;
 8009bec:	e7a2      	b.n	8009b34 <PxMessagingTask+0x1348>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009bee:	2238      	movs	r2, #56	; 0x38
 8009bf0:	436a      	muls	r2, r5
 8009bf2:	4b9b      	ldr	r3, [pc, #620]	; (8009e60 <PxMessagingTask+0x1674>)
 8009bf4:	189b      	adds	r3, r3, r2
 8009bf6:	444b      	add	r3, r9
 8009bf8:	79da      	ldrb	r2, [r3, #7]
 8009bfa:	0212      	lsls	r2, r2, #8
 8009bfc:	7a19      	ldrb	r1, [r3, #8]
 8009bfe:	0409      	lsls	r1, r1, #16
 8009c00:	1852      	adds	r2, r2, r1
 8009c02:	7999      	ldrb	r1, [r3, #6]
 8009c04:	1852      	adds	r2, r2, r1
 8009c06:	7a5b      	ldrb	r3, [r3, #9]
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	18d2      	adds	r2, r2, r3
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4995      	ldr	r1, [pc, #596]	; (8009e64 <PxMessagingTask+0x1678>)
 8009c10:	600a      	str	r2, [r1, #0]
 8009c12:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009c14:	0021      	movs	r1, r4
 8009c16:	2003      	movs	r0, #3
 8009c18:	f007 fdc4 	bl	80117a4 <HAL_FLASH_Program>
 8009c1c:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009c1e:	e789      	b.n	8009b34 <PxMessagingTask+0x1348>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009c20:	4b8e      	ldr	r3, [pc, #568]	; (8009e5c <PxMessagingTask+0x1670>)
 8009c22:	2215      	movs	r2, #21
 8009c24:	701a      	strb	r2, [r3, #0]
 8009c26:	e600      	b.n	800982a <PxMessagingTask+0x103e>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009c28:	4b8d      	ldr	r3, [pc, #564]	; (8009e60 <PxMessagingTask+0x1674>)
 8009c2a:	199b      	adds	r3, r3, r6
 8009c2c:	5d1a      	ldrb	r2, [r3, r4]
 8009c2e:	4b8b      	ldr	r3, [pc, #556]	; (8009e5c <PxMessagingTask+0x1670>)
 8009c30:	701a      	strb	r2, [r3, #0]
							break;
 8009c32:	2300      	movs	r3, #0
 8009c34:	4699      	mov	r9, r3
 8009c36:	f7fe fe45 	bl	80088c4 <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009c3a:	9a05      	ldr	r2, [sp, #20]
 8009c3c:	3a01      	subs	r2, #1
 8009c3e:	b292      	uxth	r2, r2
 8009c40:	1c61      	adds	r1, r4, #1
 8009c42:	4451      	add	r1, sl
 8009c44:	4b86      	ldr	r3, [pc, #536]	; (8009e60 <PxMessagingTask+0x1674>)
 8009c46:	18c9      	adds	r1, r1, r3
 8009c48:	199b      	adds	r3, r3, r6
 8009c4a:	5d18      	ldrb	r0, [r3, r4]
 8009c4c:	230a      	movs	r3, #10
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	f004 faaa 	bl	800e1a8 <writePxMutex>
							break;
 8009c54:	2300      	movs	r3, #0
 8009c56:	4699      	mov	r9, r3
 8009c58:	f7fe fe34 	bl	80088c4 <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 8009c5c:	4a80      	ldr	r2, [pc, #512]	; (8009e60 <PxMessagingTask+0x1674>)
 8009c5e:	1992      	adds	r2, r2, r6
 8009c60:	5d12      	ldrb	r2, [r2, r4]
 8009c62:	2a01      	cmp	r2, #1
 8009c64:	d06a      	beq.n	8009d3c <PxMessagingTask+0x1550>
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	d040      	beq.n	8009cec <PxMessagingTask+0x1500>
 8009c6a:	2a02      	cmp	r2, #2
 8009c6c:	d100      	bne.n	8009c70 <PxMessagingTask+0x1484>
 8009c6e:	e08d      	b.n	8009d8c <PxMessagingTask+0x15a0>
							ADCPort =cMessage[port - 1][shift];
 8009c70:	4b7b      	ldr	r3, [pc, #492]	; (8009e60 <PxMessagingTask+0x1674>)
 8009c72:	199b      	adds	r3, r3, r6
 8009c74:	5d18      	ldrb	r0, [r3, r4]
 8009c76:	4a7c      	ldr	r2, [pc, #496]	; (8009e68 <PxMessagingTask+0x167c>)
 8009c78:	8010      	strh	r0, [r2, #0]
							ADCSide =cMessage[port - 1][shift + 1];
 8009c7a:	191b      	adds	r3, r3, r4
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	4a7b      	ldr	r2, [pc, #492]	; (8009e6c <PxMessagingTask+0x1680>)
 8009c80:	8013      	strh	r3, [r2, #0]
							if(0 == ADCSide){
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d000      	beq.n	8009c88 <PxMessagingTask+0x149c>
 8009c86:	e093      	b.n	8009db0 <PxMessagingTask+0x15c4>
								ADCSelectChannel(ADCPort,"top");
 8009c88:	4f79      	ldr	r7, [pc, #484]	; (8009e70 <PxMessagingTask+0x1684>)
 8009c8a:	0039      	movs	r1, r7
 8009c8c:	f003 fbd8 	bl	800d440 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009c90:	4b75      	ldr	r3, [pc, #468]	; (8009e68 <PxMessagingTask+0x167c>)
 8009c92:	7818      	ldrb	r0, [r3, #0]
 8009c94:	4a77      	ldr	r2, [pc, #476]	; (8009e74 <PxMessagingTask+0x1688>)
 8009c96:	0039      	movs	r1, r7
 8009c98:	f003 fc04 	bl	800d4a4 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8009c9c:	4976      	ldr	r1, [pc, #472]	; (8009e78 <PxMessagingTask+0x168c>)
 8009c9e:	4877      	ldr	r0, [pc, #476]	; (8009e7c <PxMessagingTask+0x1690>)
 8009ca0:	f003 fa2e 	bl	800d100 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8009ca4:	4f6e      	ldr	r7, [pc, #440]	; (8009e60 <PxMessagingTask+0x1674>)
 8009ca6:	19bf      	adds	r7, r7, r6
 8009ca8:	5d38      	ldrb	r0, [r7, r4]
 8009caa:	4b6f      	ldr	r3, [pc, #444]	; (8009e68 <PxMessagingTask+0x167c>)
 8009cac:	8018      	strh	r0, [r3, #0]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8009cae:	4974      	ldr	r1, [pc, #464]	; (8009e80 <PxMessagingTask+0x1694>)
 8009cb0:	f003 fae4 	bl	800d27c <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009cb4:	193c      	adds	r4, r7, r4
 8009cb6:	79a3      	ldrb	r3, [r4, #6]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	79e2      	ldrb	r2, [r4, #7]
 8009cbc:	0412      	lsls	r2, r2, #16
 8009cbe:	189b      	adds	r3, r3, r2
 8009cc0:	7962      	ldrb	r2, [r4, #5]
 8009cc2:	189b      	adds	r3, r3, r2
 8009cc4:	7a22      	ldrb	r2, [r4, #8]
 8009cc6:	0612      	lsls	r2, r2, #24
 8009cc8:	189b      	adds	r3, r3, r2
 8009cca:	4a6e      	ldr	r2, [pc, #440]	; (8009e84 <PxMessagingTask+0x1698>)
 8009ccc:	61d3      	str	r3, [r2, #28]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009cce:	7aa3      	ldrb	r3, [r4, #10]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	7ae1      	ldrb	r1, [r4, #11]
 8009cd4:	0409      	lsls	r1, r1, #16
 8009cd6:	185b      	adds	r3, r3, r1
 8009cd8:	7a61      	ldrb	r1, [r4, #9]
 8009cda:	185b      	adds	r3, r3, r1
 8009cdc:	7b21      	ldrb	r1, [r4, #12]
 8009cde:	0609      	lsls	r1, r1, #24
 8009ce0:	185b      	adds	r3, r3, r1
 8009ce2:	6213      	str	r3, [r2, #32]
							break;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4699      	mov	r9, r3
 8009ce8:	f7fe fdec 	bl	80088c4 <PxMessagingTask+0xd8>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009cec:	2138      	movs	r1, #56	; 0x38
 8009cee:	4369      	muls	r1, r5
 8009cf0:	4a5b      	ldr	r2, [pc, #364]	; (8009e60 <PxMessagingTask+0x1674>)
 8009cf2:	1852      	adds	r2, r2, r1
 8009cf4:	1913      	adds	r3, r2, r4
 8009cf6:	789a      	ldrb	r2, [r3, #2]
 8009cf8:	0212      	lsls	r2, r2, #8
 8009cfa:	78d9      	ldrb	r1, [r3, #3]
 8009cfc:	0409      	lsls	r1, r1, #16
 8009cfe:	1852      	adds	r2, r2, r1
 8009d00:	7859      	ldrb	r1, [r3, #1]
 8009d02:	1852      	adds	r2, r2, r1
 8009d04:	7919      	ldrb	r1, [r3, #4]
 8009d06:	0609      	lsls	r1, r1, #24
 8009d08:	1852      	adds	r2, r2, r1
 8009d0a:	495e      	ldr	r1, [pc, #376]	; (8009e84 <PxMessagingTask+0x1698>)
 8009d0c:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009d0e:	799a      	ldrb	r2, [r3, #6]
 8009d10:	0212      	lsls	r2, r2, #8
 8009d12:	79d8      	ldrb	r0, [r3, #7]
 8009d14:	0400      	lsls	r0, r0, #16
 8009d16:	1812      	adds	r2, r2, r0
 8009d18:	7958      	ldrb	r0, [r3, #5]
 8009d1a:	1812      	adds	r2, r2, r0
 8009d1c:	7a18      	ldrb	r0, [r3, #8]
 8009d1e:	0600      	lsls	r0, r0, #24
 8009d20:	1812      	adds	r2, r2, r0
 8009d22:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009d24:	7a9a      	ldrb	r2, [r3, #10]
 8009d26:	0212      	lsls	r2, r2, #8
 8009d28:	7ad8      	ldrb	r0, [r3, #11]
 8009d2a:	0400      	lsls	r0, r0, #16
 8009d2c:	1812      	adds	r2, r2, r0
 8009d2e:	7a58      	ldrb	r0, [r3, #9]
 8009d30:	1812      	adds	r2, r2, r0
 8009d32:	7b1b      	ldrb	r3, [r3, #12]
 8009d34:	061b      	lsls	r3, r3, #24
 8009d36:	18d3      	adds	r3, r2, r3
 8009d38:	608b      	str	r3, [r1, #8]
									break;
 8009d3a:	e799      	b.n	8009c70 <PxMessagingTask+0x1484>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009d3c:	2238      	movs	r2, #56	; 0x38
 8009d3e:	436a      	muls	r2, r5
 8009d40:	4b47      	ldr	r3, [pc, #284]	; (8009e60 <PxMessagingTask+0x1674>)
 8009d42:	189b      	adds	r3, r3, r2
 8009d44:	191b      	adds	r3, r3, r4
 8009d46:	789a      	ldrb	r2, [r3, #2]
 8009d48:	0212      	lsls	r2, r2, #8
 8009d4a:	78d9      	ldrb	r1, [r3, #3]
 8009d4c:	0409      	lsls	r1, r1, #16
 8009d4e:	1852      	adds	r2, r2, r1
 8009d50:	7859      	ldrb	r1, [r3, #1]
 8009d52:	1852      	adds	r2, r2, r1
 8009d54:	7919      	ldrb	r1, [r3, #4]
 8009d56:	0609      	lsls	r1, r1, #24
 8009d58:	1852      	adds	r2, r2, r1
 8009d5a:	494a      	ldr	r1, [pc, #296]	; (8009e84 <PxMessagingTask+0x1698>)
 8009d5c:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009d5e:	799a      	ldrb	r2, [r3, #6]
 8009d60:	0212      	lsls	r2, r2, #8
 8009d62:	79d8      	ldrb	r0, [r3, #7]
 8009d64:	0400      	lsls	r0, r0, #16
 8009d66:	1812      	adds	r2, r2, r0
 8009d68:	7958      	ldrb	r0, [r3, #5]
 8009d6a:	1812      	adds	r2, r2, r0
 8009d6c:	7a18      	ldrb	r0, [r3, #8]
 8009d6e:	0600      	lsls	r0, r0, #24
 8009d70:	1812      	adds	r2, r2, r0
 8009d72:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009d74:	7a9a      	ldrb	r2, [r3, #10]
 8009d76:	0212      	lsls	r2, r2, #8
 8009d78:	7ad8      	ldrb	r0, [r3, #11]
 8009d7a:	0400      	lsls	r0, r0, #16
 8009d7c:	1812      	adds	r2, r2, r0
 8009d7e:	7a58      	ldrb	r0, [r3, #9]
 8009d80:	1812      	adds	r2, r2, r0
 8009d82:	7b1b      	ldrb	r3, [r3, #12]
 8009d84:	061b      	lsls	r3, r3, #24
 8009d86:	18d3      	adds	r3, r2, r3
 8009d88:	614b      	str	r3, [r1, #20]
									break;
 8009d8a:	e771      	b.n	8009c70 <PxMessagingTask+0x1484>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009d8c:	2138      	movs	r1, #56	; 0x38
 8009d8e:	4369      	muls	r1, r5
 8009d90:	4a33      	ldr	r2, [pc, #204]	; (8009e60 <PxMessagingTask+0x1674>)
 8009d92:	1852      	adds	r2, r2, r1
 8009d94:	1912      	adds	r2, r2, r4
 8009d96:	7893      	ldrb	r3, [r2, #2]
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	78d1      	ldrb	r1, [r2, #3]
 8009d9c:	0409      	lsls	r1, r1, #16
 8009d9e:	185b      	adds	r3, r3, r1
 8009da0:	7851      	ldrb	r1, [r2, #1]
 8009da2:	185b      	adds	r3, r3, r1
 8009da4:	7912      	ldrb	r2, [r2, #4]
 8009da6:	0612      	lsls	r2, r2, #24
 8009da8:	189b      	adds	r3, r3, r2
 8009daa:	4a36      	ldr	r2, [pc, #216]	; (8009e84 <PxMessagingTask+0x1698>)
 8009dac:	6193      	str	r3, [r2, #24]
 8009dae:	e75f      	b.n	8009c70 <PxMessagingTask+0x1484>
							else if(1 == ADCSide){
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d000      	beq.n	8009db6 <PxMessagingTask+0x15ca>
 8009db4:	e772      	b.n	8009c9c <PxMessagingTask+0x14b0>
								ADCSelectChannel(ADCPort,"bottom");
 8009db6:	4f34      	ldr	r7, [pc, #208]	; (8009e88 <PxMessagingTask+0x169c>)
 8009db8:	0039      	movs	r1, r7
 8009dba:	f003 fb41 	bl	800d440 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8009dbe:	4b2a      	ldr	r3, [pc, #168]	; (8009e68 <PxMessagingTask+0x167c>)
 8009dc0:	7818      	ldrb	r0, [r3, #0]
 8009dc2:	4a2c      	ldr	r2, [pc, #176]	; (8009e74 <PxMessagingTask+0x1688>)
 8009dc4:	0039      	movs	r1, r7
 8009dc6:	f003 fb6d 	bl	800d4a4 <ReadADCChannel>
 8009dca:	e767      	b.n	8009c9c <PxMessagingTask+0x14b0>
							ACK_FLAG =1;
 8009dcc:	4b2f      	ldr	r3, [pc, #188]	; (8009e8c <PxMessagingTask+0x16a0>)
 8009dce:	2201      	movs	r2, #1
 8009dd0:	701a      	strb	r2, [r3, #0]
							break;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	4699      	mov	r9, r3
 8009dd6:	f7fe fd75 	bl	80088c4 <PxMessagingTask+0xd8>
							rejected_FLAG =1;
 8009dda:	4b2d      	ldr	r3, [pc, #180]	; (8009e90 <PxMessagingTask+0x16a4>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	701a      	strb	r2, [r3, #0]
							break;
 8009de0:	2300      	movs	r3, #0
 8009de2:	4699      	mov	r9, r3
 8009de4:	f7fe fd6e 	bl	80088c4 <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009de8:	9400      	str	r4, [sp, #0]
 8009dea:	465b      	mov	r3, fp
 8009dec:	9a04      	ldr	r2, [sp, #16]
 8009dee:	9908      	ldr	r1, [sp, #32]
 8009df0:	0038      	movs	r0, r7
 8009df2:	f7fe fcf9 	bl	80087e8 <User_MessagingParser>
 8009df6:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 8009df8:	2801      	cmp	r0, #1
 8009dfa:	d001      	beq.n	8009e00 <PxMessagingTask+0x1614>
 8009dfc:	f7fe fd62 	bl	80088c4 <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8009e00:	9400      	str	r4, [sp, #0]
 8009e02:	465b      	mov	r3, fp
 8009e04:	9a04      	ldr	r2, [sp, #16]
 8009e06:	9908      	ldr	r1, [sp, #32]
 8009e08:	0038      	movs	r0, r7
 8009e0a:	f000 fe71 	bl	800aaf0 <Module_MessagingTask>
 8009e0e:	4681      	mov	r9, r0
 8009e10:	f7fe fd53 	bl	80088ba <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009e14:	2300      	movs	r3, #0
 8009e16:	4699      	mov	r9, r3
 8009e18:	f7fe fd4f 	bl	80088ba <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4699      	mov	r9, r3
 8009e20:	f7fe fd4b 	bl	80088ba <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009e24:	2300      	movs	r3, #0
 8009e26:	4699      	mov	r9, r3
 8009e28:	f7fe fd47 	bl	80088ba <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	9804      	ldr	r0, [sp, #16]
 8009e32:	f7fe f9c1 	bl	80081b8 <SendMessageToModule>
			result =BOS_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	4699      	mov	r9, r3
 8009e3a:	f7fe fd43 	bl	80088c4 <PxMessagingTask+0xd8>
					switch(code){
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4699      	mov	r9, r3
 8009e42:	f7fe fd3f 	bl	80088c4 <PxMessagingTask+0xd8>
 8009e46:	9207      	str	r2, [sp, #28]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4699      	mov	r9, r3
 8009e4c:	f7fe fd3a 	bl	80088c4 <PxMessagingTask+0xd8>
 8009e50:	2300      	movs	r3, #0
 8009e52:	4699      	mov	r9, r3
 8009e54:	f7fe fd36 	bl	80088c4 <PxMessagingTask+0xd8>
 8009e58:	0000ffff 	.word	0x0000ffff
 8009e5c:	20000888 	.word	0x20000888
 8009e60:	20000544 	.word	0x20000544
 8009e64:	20000880 	.word	0x20000880
 8009e68:	20000dec 	.word	0x20000dec
 8009e6c:	20000dee 	.word	0x20000dee
 8009e70:	08018040 	.word	0x08018040
 8009e74:	20000df0 	.word	0x20000df0
 8009e78:	20000df8 	.word	0x20000df8
 8009e7c:	20000df4 	.word	0x20000df4
 8009e80:	20000de8 	.word	0x20000de8
 8009e84:	20000dfc 	.word	0x20000dfc
 8009e88:	08018044 	.word	0x08018044
 8009e8c:	200002ac 	.word	0x200002ac
 8009e90:	2000087c 	.word	0x2000087c
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009e94:	455b      	cmp	r3, fp
 8009e96:	d003      	beq.n	8009ea0 <PxMessagingTask+0x16b4>
 8009e98:	2f10      	cmp	r7, #16
 8009e9a:	d001      	beq.n	8009ea0 <PxMessagingTask+0x16b4>
 8009e9c:	f7fe fd6f 	bl	800897e <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009ea0:	465b      	mov	r3, fp
 8009ea2:	2bff      	cmp	r3, #255	; 0xff
 8009ea4:	d101      	bne.n	8009eaa <PxMessagingTask+0x16be>
 8009ea6:	f7fe fcd9 	bl	800885c <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009eaa:	2bfe      	cmp	r3, #254	; 0xfe
 8009eac:	d001      	beq.n	8009eb2 <PxMessagingTask+0x16c6>
 8009eae:	f7fe fd01 	bl	80088b4 <PxMessagingTask+0xc8>
 8009eb2:	4b2b      	ldr	r3, [pc, #172]	; (8009f60 <PxMessagingTask+0x1774>)
 8009eb4:	5d5a      	ldrb	r2, [r3, r5]
 8009eb6:	4b2b      	ldr	r3, [pc, #172]	; (8009f64 <PxMessagingTask+0x1778>)
 8009eb8:	199b      	adds	r3, r3, r6
 8009eba:	189b      	adds	r3, r3, r2
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	4a29      	ldr	r2, [pc, #164]	; (8009f68 <PxMessagingTask+0x177c>)
 8009ec2:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8009ec4:	2103      	movs	r1, #3
 8009ec6:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d101      	bne.n	8009ed0 <PxMessagingTask+0x16e4>
 8009ecc:	f7fe fcf5 	bl	80088ba <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009ed0:	4a25      	ldr	r2, [pc, #148]	; (8009f68 <PxMessagingTask+0x177c>)
 8009ed2:	7013      	strb	r3, [r2, #0]
 8009ed4:	4a25      	ldr	r2, [pc, #148]	; (8009f6c <PxMessagingTask+0x1780>)
 8009ed6:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009ed8:	9908      	ldr	r1, [sp, #32]
 8009eda:	20fe      	movs	r0, #254	; 0xfe
 8009edc:	f7fe f924 	bl	8008128 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009ee0:	4b1f      	ldr	r3, [pc, #124]	; (8009f60 <PxMessagingTask+0x1774>)
 8009ee2:	5d59      	ldrb	r1, [r3, r5]
 8009ee4:	4b1f      	ldr	r3, [pc, #124]	; (8009f64 <PxMessagingTask+0x1778>)
 8009ee6:	199b      	adds	r3, r3, r6
 8009ee8:	185a      	adds	r2, r3, r1
 8009eea:	3a01      	subs	r2, #1
 8009eec:	2000      	movs	r0, #0
 8009eee:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009ef0:	1e8a      	subs	r2, r1, #2
 8009ef2:	5c9c      	ldrb	r4, [r3, r2]
 8009ef4:	9407      	str	r4, [sp, #28]
					for(i =0; i < temp; i++){
 8009ef6:	2c00      	cmp	r4, #0
 8009ef8:	d02e      	beq.n	8009f58 <PxMessagingTask+0x176c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009efa:	1b13      	subs	r3, r2, r4
 8009efc:	469c      	mov	ip, r3
 8009efe:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <PxMessagingTask+0x1784>)
 8009f00:	7818      	ldrb	r0, [r3, #0]
 8009f02:	4b18      	ldr	r3, [pc, #96]	; (8009f64 <PxMessagingTask+0x1778>)
 8009f04:	199b      	adds	r3, r3, r6
 8009f06:	4662      	mov	r2, ip
 8009f08:	5c9b      	ldrb	r3, [r3, r2]
 8009f0a:	4283      	cmp	r3, r0
 8009f0c:	d011      	beq.n	8009f32 <PxMessagingTask+0x1746>
 8009f0e:	4653      	mov	r3, sl
 8009f10:	3301      	adds	r3, #1
 8009f12:	4463      	add	r3, ip
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <PxMessagingTask+0x1778>)
 8009f16:	189b      	adds	r3, r3, r2
 8009f18:	3201      	adds	r2, #1
 8009f1a:	4452      	add	r2, sl
 8009f1c:	3c01      	subs	r4, #1
 8009f1e:	b2e4      	uxtb	r4, r4
 8009f20:	1912      	adds	r2, r2, r4
 8009f22:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d017      	beq.n	8009f58 <PxMessagingTask+0x176c>
 8009f28:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009f2a:	1e5c      	subs	r4, r3, #1
 8009f2c:	7824      	ldrb	r4, [r4, #0]
 8009f2e:	4284      	cmp	r4, r0
 8009f30:	d1f8      	bne.n	8009f24 <PxMessagingTask+0x1738>
				shift +=4;
 8009f32:	9c05      	ldr	r4, [sp, #20]
 8009f34:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009f36:	1b0a      	subs	r2, r1, r4
 8009f38:	b2d3      	uxtb	r3, r2
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	f7fe fcb2 	bl	80088a4 <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009f40:	2338      	movs	r3, #56	; 0x38
 8009f42:	436b      	muls	r3, r5
 8009f44:	4a07      	ldr	r2, [pc, #28]	; (8009f64 <PxMessagingTask+0x1778>)
 8009f46:	18d2      	adds	r2, r2, r3
 8009f48:	464b      	mov	r3, r9
 8009f4a:	5cd3      	ldrb	r3, [r2, r3]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	0098      	lsls	r0, r3, #2
 8009f50:	4908      	ldr	r1, [pc, #32]	; (8009f74 <PxMessagingTask+0x1788>)
 8009f52:	5841      	ldr	r1, [r0, r1]
 8009f54:	5dd2      	ldrb	r2, [r2, r7]
 8009f56:	e45e      	b.n	8009816 <PxMessagingTask+0x102a>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009f58:	2366      	movs	r3, #102	; 0x66
 8009f5a:	4699      	mov	r9, r3
 8009f5c:	f7fe fcb2 	bl	80088c4 <PxMessagingTask+0xd8>
 8009f60:	200006c4 	.word	0x200006c4
 8009f64:	20000544 	.word	0x20000544
 8009f68:	20000e22 	.word	0x20000e22
 8009f6c:	200004f0 	.word	0x200004f0
 8009f70:	20000806 	.word	0x20000806
 8009f74:	200061f8 	.word	0x200061f8

08009f78 <unitCommand>:
 |															Commands																 	|
 -----------------------------------------------------------------------
 */

static portBASE_TYPE unitCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	0004      	movs	r4, r0
 8009f7e:	0010      	movs	r0, r2
	Module_Status result = H2AR3_OK;
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	9301      	str	r3, [sp, #4]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	/* 1st parameter for naming of uart port: P1 to P6 */
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 8009f84:	aa01      	add	r2, sp, #4
 8009f86:	2101      	movs	r1, #1
 8009f88:	f004 fbce 	bl	800e728 <FreeRTOS_CLIGetParameter>
			&xParameterStringLength1);
	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 8009f8c:	7803      	ldrb	r3, [r0, #0]
 8009f8e:	2b76      	cmp	r3, #118	; 0x76
 8009f90:	d009      	beq.n	8009fa6 <unitCommand+0x2e>
		unit = Volt;
		strcpy((char*) pcWriteBuffer,
				(char*) "Used measurement unit: Volt\r\n");
	} else if (!strncmp((const char*) pcParameterString1, "a", 1)) {
 8009f92:	2b61      	cmp	r3, #97	; 0x61
 8009f94:	d010      	beq.n	8009fb8 <unitCommand+0x40>
		result = H2AR3_ERR_WrongParams;
	}

	/* Respond to the command */
	if (H2AR3_ERR_WrongParams == result) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 8009f96:	2213      	movs	r2, #19
 8009f98:	490c      	ldr	r1, [pc, #48]	; (8009fcc <unitCommand+0x54>)
 8009f9a:	0020      	movs	r0, r4
 8009f9c:	f009 fc6d 	bl	801387a <memcpy>
	}

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	b002      	add	sp, #8
 8009fa4:	bd10      	pop	{r4, pc}
		unit = Volt;
 8009fa6:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <unitCommand+0x58>)
 8009fa8:	2201      	movs	r2, #1
 8009faa:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 8009fac:	321d      	adds	r2, #29
 8009fae:	4909      	ldr	r1, [pc, #36]	; (8009fd4 <unitCommand+0x5c>)
 8009fb0:	0020      	movs	r0, r4
 8009fb2:	f009 fc62 	bl	801387a <memcpy>
 8009fb6:	e7f3      	b.n	8009fa0 <unitCommand+0x28>
		unit = Amp;
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <unitCommand+0x58>)
 8009fba:	2202      	movs	r2, #2
 8009fbc:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 8009fbe:	321e      	adds	r2, #30
 8009fc0:	4905      	ldr	r1, [pc, #20]	; (8009fd8 <unitCommand+0x60>)
 8009fc2:	0020      	movs	r0, r4
 8009fc4:	f009 fc59 	bl	801387a <memcpy>
 8009fc8:	e7ea      	b.n	8009fa0 <unitCommand+0x28>
 8009fca:	46c0      	nop			; (mov r8, r8)
 8009fcc:	080189ec 	.word	0x080189ec
 8009fd0:	200000a4 	.word	0x200000a4
 8009fd4:	0801a028 	.word	0x0801a028
 8009fd8:	0801a048 	.word	0x0801a048

08009fdc <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 8009fdc:	b510      	push	{r4, lr}
 8009fde:	b082      	sub	sp, #8
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009fe0:	4b15      	ldr	r3, [pc, #84]	; (800a038 <CheckForEnterKey+0x5c>)
 8009fe2:	781c      	ldrb	r4, [r3, #0]
 8009fe4:	3c01      	subs	r4, #1
 8009fe6:	0063      	lsls	r3, r4, #1
 8009fe8:	191b      	adds	r3, r3, r4
 8009fea:	019b      	lsls	r3, r3, #6
 8009fec:	4a13      	ldr	r2, [pc, #76]	; (800a03c <CheckForEnterKey+0x60>)
 8009fee:	5c9b      	ldrb	r3, [r3, r2]
 8009ff0:	2b0d      	cmp	r3, #13
 8009ff2:	d00c      	beq.n	800a00e <CheckForEnterKey+0x32>
 8009ff4:	0061      	lsls	r1, r4, #1
 8009ff6:	1909      	adds	r1, r1, r4
 8009ff8:	0189      	lsls	r1, r1, #6
 8009ffa:	1889      	adds	r1, r1, r2
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	0018      	movs	r0, r3
 800a000:	5cca      	ldrb	r2, [r1, r3]
 800a002:	2a0d      	cmp	r2, #13
 800a004:	d004      	beq.n	800a010 <CheckForEnterKey+0x34>
 800a006:	3301      	adds	r3, #1
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 800a008:	2bc0      	cmp	r3, #192	; 0xc0
 800a00a:	d1f8      	bne.n	8009ffe <CheckForEnterKey+0x22>
 800a00c:	e012      	b.n	800a034 <CheckForEnterKey+0x58>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 800a00e:	2000      	movs	r0, #0
			UARTRxBuf[PcPort - 1][chr] = 0;
 800a010:	0063      	lsls	r3, r4, #1
 800a012:	191c      	adds	r4, r3, r4
 800a014:	01a4      	lsls	r4, r4, #6
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <CheckForEnterKey+0x60>)
 800a018:	191c      	adds	r4, r3, r4
 800a01a:	2300      	movs	r3, #0
 800a01c:	5423      	strb	r3, [r4, r0]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 800a01e:	4a08      	ldr	r2, [pc, #32]	; (800a040 <CheckForEnterKey+0x64>)
 800a020:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 800a022:	4a08      	ldr	r2, [pc, #32]	; (800a044 <CheckForEnterKey+0x68>)
 800a024:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 800a026:	4a08      	ldr	r2, [pc, #32]	; (800a048 <CheckForEnterKey+0x6c>)
 800a028:	6810      	ldr	r0, [r2, #0]
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	2200      	movs	r2, #0
 800a02e:	2103      	movs	r1, #3
 800a030:	f005 febc 	bl	800fdac <xTimerGenericCommand>
}
 800a034:	b002      	add	sp, #8
 800a036:	bd10      	pop	{r4, pc}
 800a038:	200002b0 	.word	0x200002b0
 800a03c:	20000a44 	.word	0x20000a44
 800a040:	20000fe8 	.word	0x20000fe8
 800a044:	200063cc 	.word	0x200063cc
 800a048:	20000ff0 	.word	0x20000ff0

0800a04c <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 800a04c:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 800a04e:	f005 ffe3 	bl	8010018 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 800a052:	28ff      	cmp	r0, #255	; 0xff
 800a054:	d000      	beq.n	800a058 <HandleTimeout+0xc>
}
 800a056:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 800a058:	2300      	movs	r3, #0
 800a05a:	4a02      	ldr	r2, [pc, #8]	; (800a064 <HandleTimeout+0x18>)
 800a05c:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 800a05e:	4a02      	ldr	r2, [pc, #8]	; (800a068 <HandleTimeout+0x1c>)
 800a060:	7013      	strb	r3, [r2, #0]
}
 800a062:	e7f8      	b.n	800a056 <HandleTimeout+0xa>
 800a064:	200063cc 	.word	0x200063cc
 800a068:	20000fe8 	.word	0x20000fe8

0800a06c <SystemClock_Config>:
void SystemClock_Config(void) {
 800a06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a06e:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a070:	2401      	movs	r4, #1
 800a072:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a074:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a076:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 800a078:	2310      	movs	r3, #16
 800a07a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a07c:	2702      	movs	r7, #2
 800a07e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a080:	2680      	movs	r6, #128	; 0x80
 800a082:	0276      	lsls	r6, r6, #9
 800a084:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a086:	2380      	movs	r3, #128	; 0x80
 800a088:	035b      	lsls	r3, r3, #13
 800a08a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a08c:	2500      	movs	r5, #0
 800a08e:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a090:	a80d      	add	r0, sp, #52	; 0x34
 800a092:	f007 fdfb 	bl	8011c8c <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 800a096:	2307      	movs	r3, #7
 800a098:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a09a:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a09c:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a09e:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	a809      	add	r0, sp, #36	; 0x24
 800a0a4:	f008 f8b4 	bl	8012210 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800a0a8:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <SystemClock_Config+0xa8>)
 800a0aa:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a0ac:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a0ae:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a0b0:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a0b2:	a802      	add	r0, sp, #8
 800a0b4:	f008 fa5a 	bl	801256c <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800a0b8:	4d17      	ldr	r5, [pc, #92]	; (800a118 <SystemClock_Config+0xac>)
 800a0ba:	69ea      	ldr	r2, [r5, #28]
 800a0bc:	2180      	movs	r1, #128	; 0x80
 800a0be:	0549      	lsls	r1, r1, #21
 800a0c0:	430a      	orrs	r2, r1
 800a0c2:	61ea      	str	r2, [r5, #28]
 800a0c4:	69eb      	ldr	r3, [r5, #28]
 800a0c6:	400b      	ands	r3, r1
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800a0cc:	f007 fdd4 	bl	8011c78 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a0d0:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a0d2:	23c0      	movs	r3, #192	; 0xc0
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a0d8:	a802      	add	r0, sp, #8
 800a0da:	f008 fa47 	bl	801256c <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800a0de:	f008 fa21 	bl	8012524 <HAL_RCC_GetHCLKFreq>
 800a0e2:	21fa      	movs	r1, #250	; 0xfa
 800a0e4:	0089      	lsls	r1, r1, #2
 800a0e6:	f7f6 f829 	bl	800013c <__udivsi3>
 800a0ea:	f006 fcc3 	bl	8010a74 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a0ee:	2004      	movs	r0, #4
 800a0f0:	f006 fcdc 	bl	8010aac <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 800a0f4:	69ab      	ldr	r3, [r5, #24]
 800a0f6:	4323      	orrs	r3, r4
 800a0f8:	61ab      	str	r3, [r5, #24]
 800a0fa:	69ab      	ldr	r3, [r5, #24]
 800a0fc:	401c      	ands	r4, r3
 800a0fe:	9401      	str	r4, [sp, #4]
 800a100:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800a102:	2001      	movs	r0, #1
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	4240      	negs	r0, r0
 800a10a:	f006 fc6b 	bl	80109e4 <HAL_NVIC_SetPriority>
}
 800a10e:	b01b      	add	sp, #108	; 0x6c
 800a110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	00040003 	.word	0x00040003
 800a118:	40021000 	.word	0x40021000

0800a11c <SaveToRO>:
uint8_t SaveToRO(void) {
 800a11c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a11e:	46de      	mov	lr, fp
 800a120:	4657      	mov	r7, sl
 800a122:	464e      	mov	r6, r9
 800a124:	4645      	mov	r5, r8
 800a126:	b5e0      	push	{r5, r6, r7, lr}
 800a128:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 800a12a:	2215      	movs	r2, #21
 800a12c:	2100      	movs	r1, #0
 800a12e:	a802      	add	r0, sp, #8
 800a130:	f009 fbac 	bl	801388c <memset>
	HAL_FLASH_Unlock();
 800a134:	f007 faec 	bl	8011710 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 800a138:	4872      	ldr	r0, [pc, #456]	; (800a304 <SaveToRO+0x1e8>)
 800a13a:	f007 fbab 	bl	8011894 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 800a13e:	4872      	ldr	r0, [pc, #456]	; (800a308 <SaveToRO+0x1ec>)
 800a140:	f007 fb02 	bl	8011748 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK) {
 800a144:	2800      	cmp	r0, #0
 800a146:	d112      	bne.n	800a16e <SaveToRO+0x52>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a148:	4a70      	ldr	r2, [pc, #448]	; (800a30c <SaveToRO+0x1f0>)
 800a14a:	6913      	ldr	r3, [r2, #16]
 800a14c:	2102      	movs	r1, #2
 800a14e:	438b      	bics	r3, r1
 800a150:	6113      	str	r3, [r2, #16]
	if (myID) {
 800a152:	4b6f      	ldr	r3, [pc, #444]	; (800a310 <SaveToRO+0x1f4>)
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <SaveToRO+0x66>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a15a:	4b6e      	ldr	r3, [pc, #440]	; (800a314 <SaveToRO+0x1f8>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d100      	bne.n	800a164 <SaveToRO+0x48>
 800a162:	e0ca      	b.n	800a2fa <SaveToRO+0x1de>
 800a164:	2500      	movs	r5, #0
 800a166:	4c6c      	ldr	r4, [pc, #432]	; (800a318 <SaveToRO+0x1fc>)
		if (snippets[s].cond.conditionType) {
 800a168:	4b6c      	ldr	r3, [pc, #432]	; (800a31c <SaveToRO+0x200>)
 800a16a:	4698      	mov	r8, r3
 800a16c:	e06e      	b.n	800a24c <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800a16e:	4b6c      	ldr	r3, [pc, #432]	; (800a320 <SaveToRO+0x204>)
 800a170:	69d8      	ldr	r0, [r3, #28]
 800a172:	b2c0      	uxtb	r0, r0
}
 800a174:	b009      	add	sp, #36	; 0x24
 800a176:	bc3c      	pop	{r2, r3, r4, r5}
 800a178:	4690      	mov	r8, r2
 800a17a:	4699      	mov	r9, r3
 800a17c:	46a2      	mov	sl, r4
 800a17e:	46ab      	mov	fp, r5
 800a180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 800a182:	4a68      	ldr	r2, [pc, #416]	; (800a324 <SaveToRO+0x208>)
 800a184:	7812      	ldrb	r2, [r2, #0]
 800a186:	0212      	lsls	r2, r2, #8
 800a188:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800a18a:	b292      	uxth	r2, r2
 800a18c:	2300      	movs	r3, #0
 800a18e:	495d      	ldr	r1, [pc, #372]	; (800a304 <SaveToRO+0x1e8>)
 800a190:	2001      	movs	r0, #1
 800a192:	f007 fb07 	bl	80117a4 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 800a196:	485c      	ldr	r0, [pc, #368]	; (800a308 <SaveToRO+0x1ec>)
 800a198:	f007 fad6 	bl	8011748 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d111      	bne.n	800a1c4 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a1a0:	4a5a      	ldr	r2, [pc, #360]	; (800a30c <SaveToRO+0x1f0>)
 800a1a2:	6913      	ldr	r3, [r2, #16]
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	438b      	bics	r3, r1
 800a1a8:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 800a1aa:	4b5e      	ldr	r3, [pc, #376]	; (800a324 <SaveToRO+0x208>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800a1b2:	2502      	movs	r5, #2
		for (uint8_t i = 1; i <= N; i++) {
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0d0      	beq.n	800a15a <SaveToRO+0x3e>
 800a1b8:	2316      	movs	r3, #22
 800a1ba:	469b      	mov	fp, r3
 800a1bc:	4b5a      	ldr	r3, [pc, #360]	; (800a328 <SaveToRO+0x20c>)
 800a1be:	469a      	mov	sl, r3
				if (array[i - 1][0]) {
 800a1c0:	4698      	mov	r8, r3
 800a1c2:	e02a      	b.n	800a21a <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800a1c4:	4b56      	ldr	r3, [pc, #344]	; (800a320 <SaveToRO+0x204>)
 800a1c6:	69d8      	ldr	r0, [r3, #28]
 800a1c8:	b2c0      	uxtb	r0, r0
 800a1ca:	e7d3      	b.n	800a174 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800a1cc:	4b54      	ldr	r3, [pc, #336]	; (800a320 <SaveToRO+0x204>)
 800a1ce:	69d8      	ldr	r0, [r3, #28]
 800a1d0:	b2c0      	uxtb	r0, r0
 800a1d2:	e7cf      	b.n	800a174 <SaveToRO+0x58>
 800a1d4:	3402      	adds	r4, #2
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 800a1d6:	42b4      	cmp	r4, r6
 800a1d8:	d017      	beq.n	800a20a <SaveToRO+0xee>
				if (array[i - 1][0]) {
 800a1da:	4643      	mov	r3, r8
 800a1dc:	5afb      	ldrh	r3, [r7, r3]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0f8      	beq.n	800a1d4 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 800a1e2:	8822      	ldrh	r2, [r4, #0]
 800a1e4:	4b47      	ldr	r3, [pc, #284]	; (800a304 <SaveToRO+0x1e8>)
 800a1e6:	18e9      	adds	r1, r5, r3
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	f007 fada 	bl	80117a4 <HAL_FLASH_Program>
					add += 2;
 800a1f0:	3502      	adds	r5, #2
 800a1f2:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation(
 800a1f4:	4844      	ldr	r0, [pc, #272]	; (800a308 <SaveToRO+0x1ec>)
 800a1f6:	f007 faa7 	bl	8011748 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d1e6      	bne.n	800a1cc <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a1fe:	4a43      	ldr	r2, [pc, #268]	; (800a30c <SaveToRO+0x1f0>)
 800a200:	6913      	ldr	r3, [r2, #16]
 800a202:	2101      	movs	r1, #1
 800a204:	438b      	bics	r3, r1
 800a206:	6113      	str	r3, [r2, #16]
 800a208:	e7e4      	b.n	800a1d4 <SaveToRO+0xb8>
		for (uint8_t i = 1; i <= N; i++) {
 800a20a:	464b      	mov	r3, r9
 800a20c:	3301      	adds	r3, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	4699      	mov	r9, r3
 800a212:	4b44      	ldr	r3, [pc, #272]	; (800a324 <SaveToRO+0x208>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	454b      	cmp	r3, r9
 800a218:	d39f      	bcc.n	800a15a <SaveToRO+0x3e>
 800a21a:	465e      	mov	r6, fp
 800a21c:	464b      	mov	r3, r9
 800a21e:	435e      	muls	r6, r3
 800a220:	0034      	movs	r4, r6
 800a222:	3c16      	subs	r4, #22
 800a224:	4454      	add	r4, sl
 800a226:	4456      	add	r6, sl
				if (array[i - 1][0]) {
 800a228:	1e5f      	subs	r7, r3, #1
 800a22a:	465b      	mov	r3, fp
 800a22c:	435f      	muls	r7, r3
 800a22e:	e7d4      	b.n	800a1da <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800a230:	4b3b      	ldr	r3, [pc, #236]	; (800a320 <SaveToRO+0x204>)
 800a232:	69d8      	ldr	r0, [r3, #28]
 800a234:	b2c0      	uxtb	r0, r0
 800a236:	e79d      	b.n	800a174 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800a238:	4b39      	ldr	r3, [pc, #228]	; (800a320 <SaveToRO+0x204>)
 800a23a:	69d8      	ldr	r0, [r3, #28]
 800a23c:	b2c0      	uxtb	r0, r0
 800a23e:	e799      	b.n	800a174 <SaveToRO+0x58>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 800a240:	3501      	adds	r5, #1
 800a242:	b2ed      	uxtb	r5, r5
 800a244:	4b33      	ldr	r3, [pc, #204]	; (800a314 <SaveToRO+0x1f8>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	42ab      	cmp	r3, r5
 800a24a:	d956      	bls.n	800a2fa <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType) {
 800a24c:	9501      	str	r5, [sp, #4]
 800a24e:	00ab      	lsls	r3, r5, #2
 800a250:	195b      	adds	r3, r3, r5
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4642      	mov	r2, r8
 800a256:	5c9b      	ldrb	r3, [r3, r2]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0f1      	beq.n	800a240 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800a25c:	23fe      	movs	r3, #254	; 0xfe
 800a25e:	aa02      	add	r2, sp, #8
 800a260:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 800a262:	00a9      	lsls	r1, r5, #2
 800a264:	1949      	adds	r1, r1, r5
 800a266:	0089      	lsls	r1, r1, #2
 800a268:	4b2c      	ldr	r3, [pc, #176]	; (800a31c <SaveToRO+0x200>)
 800a26a:	469c      	mov	ip, r3
 800a26c:	4461      	add	r1, ip
 800a26e:	2214      	movs	r2, #20
 800a270:	ab02      	add	r3, sp, #8
 800a272:	1c58      	adds	r0, r3, #1
 800a274:	f009 fb01 	bl	801387a <memcpy>
 800a278:	2314      	movs	r3, #20
 800a27a:	469b      	mov	fp, r3
 800a27c:	44a3      	add	fp, r4
						*(uint16_t*) &snipBuffer[j * 2]);
 800a27e:	ae02      	add	r6, sp, #8
 800a280:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a282:	4f22      	ldr	r7, [pc, #136]	; (800a30c <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a284:	5b32      	ldrh	r2, [r6, r4]
 800a286:	2300      	movs	r3, #0
 800a288:	0021      	movs	r1, r4
 800a28a:	2001      	movs	r0, #1
 800a28c:	f007 fa8a 	bl	80117a4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a290:	481d      	ldr	r0, [pc, #116]	; (800a308 <SaveToRO+0x1ec>)
 800a292:	f007 fa59 	bl	8011748 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a296:	2800      	cmp	r0, #0
 800a298:	d1ca      	bne.n	800a230 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	2201      	movs	r2, #1
 800a29e:	4393      	bics	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800a2a2:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a2a4:	455c      	cmp	r4, fp
 800a2a6:	d1ed      	bne.n	800a284 <SaveToRO+0x168>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a2a8:	2700      	movs	r7, #0
 800a2aa:	9a01      	ldr	r2, [sp, #4]
 800a2ac:	0093      	lsls	r3, r2, #2
 800a2ae:	189e      	adds	r6, r3, r2
 800a2b0:	00b6      	lsls	r6, r6, #2
 800a2b2:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <SaveToRO+0x200>)
 800a2b4:	469a      	mov	sl, r3
 800a2b6:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a2b8:	4b14      	ldr	r3, [pc, #80]	; (800a30c <SaveToRO+0x1f0>)
 800a2ba:	469b      	mov	fp, r3
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a2bc:	4653      	mov	r3, sl
 800a2be:	68de      	ldr	r6, [r3, #12]
 800a2c0:	0030      	movs	r0, r6
 800a2c2:	f7f5 ff29 	bl	8000118 <strlen>
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	0840      	lsrs	r0, r0, #1
 800a2ca:	4287      	cmp	r7, r0
 800a2cc:	d2b8      	bcs.n	800a240 <SaveToRO+0x124>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 800a2ce:	007b      	lsls	r3, r7, #1
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a2d0:	5af2      	ldrh	r2, [r6, r3]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	0021      	movs	r1, r4
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f007 fa64 	bl	80117a4 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a2dc:	480a      	ldr	r0, [pc, #40]	; (800a308 <SaveToRO+0x1ec>)
 800a2de:	f007 fa33 	bl	8011748 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d1a8      	bne.n	800a238 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4393      	bics	r3, r2
 800a2ee:	465a      	mov	r2, fp
 800a2f0:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a2f2:	3402      	adds	r4, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 800a2f4:	3701      	adds	r7, #1
 800a2f6:	b2ff      	uxtb	r7, r7
 800a2f8:	e7e0      	b.n	800a2bc <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800a2fa:	f007 fa1b 	bl	8011734 <HAL_FLASH_Lock>
	return result;
 800a2fe:	2000      	movs	r0, #0
 800a300:	e738      	b.n	800a174 <SaveToRO+0x58>
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	0801d800 	.word	0x0801d800
 800a308:	0000c350 	.word	0x0000c350
 800a30c:	40022000 	.word	0x40022000
 800a310:	20000806 	.word	0x20000806
 800a314:	20000997 	.word	0x20000997
 800a318:	0801dc00 	.word	0x0801dc00
 800a31c:	2000628c 	.word	0x2000628c
 800a320:	200067b0 	.word	0x200067b0
 800a324:	20000030 	.word	0x20000030
 800a328:	200002b4 	.word	0x200002b4

0800a32c <ClearROtopology>:
uint8_t ClearROtopology(void) {
 800a32c:	b510      	push	{r4, lr}
	memset(array, 0, sizeof(array));
 800a32e:	228f      	movs	r2, #143	; 0x8f
 800a330:	0092      	lsls	r2, r2, #2
 800a332:	2100      	movs	r1, #0
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <ClearROtopology+0x20>)
 800a336:	f009 faa9 	bl	801388c <memset>
	N = 1;
 800a33a:	4b05      	ldr	r3, [pc, #20]	; (800a350 <ClearROtopology+0x24>)
 800a33c:	2201      	movs	r2, #1
 800a33e:	701a      	strb	r2, [r3, #0]
	myID = 0;
 800a340:	4b04      	ldr	r3, [pc, #16]	; (800a354 <ClearROtopology+0x28>)
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
	return SaveToRO();
 800a346:	f7ff fee9 	bl	800a11c <SaveToRO>
}
 800a34a:	bd10      	pop	{r4, pc}
 800a34c:	200002b4 	.word	0x200002b4
 800a350:	20000030 	.word	0x20000030
 800a354:	20000806 	.word	0x20000806

0800a358 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a358:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a35a:	f003 ff11 	bl	800e180 <GetUart>
 800a35e:	0004      	movs	r4, r0
	huart->Init.BaudRate =57600;
 800a360:	23e1      	movs	r3, #225	; 0xe1
 800a362:	021b      	lsls	r3, r3, #8
 800a364:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a366:	2380      	movs	r3, #128	; 0x80
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a36c:	2380      	movs	r3, #128	; 0x80
 800a36e:	015b      	lsls	r3, r3, #5
 800a370:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a372:	f009 f8ab 	bl	80134cc <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a376:	6822      	ldr	r2, [r4, #0]
 800a378:	6813      	ldr	r3, [r2, #0]
 800a37a:	2120      	movs	r1, #32
 800a37c:	430b      	orrs	r3, r1
 800a37e:	6013      	str	r3, [r2, #0]
}
 800a380:	bd10      	pop	{r4, pc}
	...

0800a384 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a386:	b087      	sub	sp, #28
 800a388:	0007      	movs	r7, r0
 800a38a:	000e      	movs	r6, r1
 800a38c:	0015      	movs	r5, r2
 800a38e:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 800a390:	4b2b      	ldr	r3, [pc, #172]	; (800a440 <remoteBootloaderUpdate+0xbc>)
 800a392:	7818      	ldrb	r0, [r3, #0]
 800a394:	f7f9 fc56 	bl	8003c44 <FindRoute>
 800a398:	9005      	str	r0, [sp, #20]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a39a:	2c00      	cmp	r4, #0
 800a39c:	d035      	beq.n	800a40a <remoteBootloaderUpdate+0x86>
 800a39e:	4b28      	ldr	r3, [pc, #160]	; (800a440 <remoteBootloaderUpdate+0xbc>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	42b3      	cmp	r3, r6
 800a3a4:	d024      	beq.n	800a3f0 <remoteBootloaderUpdate+0x6c>
	if(src == myID){
 800a3a6:	4b26      	ldr	r3, [pc, #152]	; (800a440 <remoteBootloaderUpdate+0xbc>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	42bb      	cmp	r3, r7
 800a3ac:	d131      	bne.n	800a412 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a3ae:	f004 f9b7 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 800a3b2:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a3b4:	4b23      	ldr	r3, [pc, #140]	; (800a444 <remoteBootloaderUpdate+0xc0>)
 800a3b6:	6819      	ldr	r1, [r3, #0]
 800a3b8:	0023      	movs	r3, r4
 800a3ba:	0032      	movs	r2, r6
 800a3bc:	0038      	movs	r0, r7
 800a3be:	f009 fff3 	bl	80143a8 <siprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <remoteBootloaderUpdate+0xc4>)
 800a3c4:	6819      	ldr	r1, [r3, #0]
 800a3c6:	0038      	movs	r0, r7
 800a3c8:	f00a f80e 	bl	80143e8 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a3cc:	0038      	movs	r0, r7
 800a3ce:	f7f5 fea3 	bl	8000118 <strlen>
 800a3d2:	b282      	uxth	r2, r0
 800a3d4:	2332      	movs	r3, #50	; 0x32
 800a3d6:	0039      	movs	r1, r7
 800a3d8:	0028      	movs	r0, r5
 800a3da:	f003 ff0d 	bl	800e1f8 <writePxITMutex>
		Delay_ms(100);
 800a3de:	2064      	movs	r0, #100	; 0x64
 800a3e0:	f005 ffde 	bl	80103a0 <HAL_Delay>
 800a3e4:	e015      	b.n	800a412 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a3e6:	f004 f99b 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 800a3ea:	0007      	movs	r7, r0
		myOutport =outport;
 800a3ec:	9405      	str	r4, [sp, #20]
 800a3ee:	e7e1      	b.n	800a3b4 <remoteBootloaderUpdate+0x30>
	if(src == myID){
 800a3f0:	42bb      	cmp	r3, r7
 800a3f2:	d0f8      	beq.n	800a3e6 <remoteBootloaderUpdate+0x62>
		myOutport =outport;
 800a3f4:	9405      	str	r4, [sp, #20]
 800a3f6:	e00c      	b.n	800a412 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a3f8:	f004 f992 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 800a3fc:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <remoteBootloaderUpdate+0xc8>)
 800a400:	6819      	ldr	r1, [r3, #0]
 800a402:	0032      	movs	r2, r6
 800a404:	f009 ffd0 	bl	80143a8 <siprintf>
 800a408:	e7db      	b.n	800a3c2 <remoteBootloaderUpdate+0x3e>
	if(src == myID){
 800a40a:	4b0d      	ldr	r3, [pc, #52]	; (800a440 <remoteBootloaderUpdate+0xbc>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	42bb      	cmp	r3, r7
 800a410:	d0f2      	beq.n	800a3f8 <remoteBootloaderUpdate+0x74>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a412:	0028      	movs	r0, r5
 800a414:	f7ff ffa0 	bl	800a358 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a418:	9c05      	ldr	r4, [sp, #20]
 800a41a:	0020      	movs	r0, r4
 800a41c:	f7ff ff9c 	bl	800a358 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a420:	4b07      	ldr	r3, [pc, #28]	; (800a440 <remoteBootloaderUpdate+0xbc>)
 800a422:	7819      	ldrb	r1, [r3, #0]
 800a424:	2300      	movs	r3, #0
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	3b01      	subs	r3, #1
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	3303      	adds	r3, #3
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	000b      	movs	r3, r1
 800a434:	0022      	movs	r2, r4
 800a436:	0028      	movs	r0, r5
 800a438:	f7fd fee4 	bl	8008204 <StartScastDMAStream>
}
 800a43c:	b007      	add	sp, #28
 800a43e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a440:	20000806 	.word	0x20000806
 800a444:	2000008c 	.word	0x2000008c
 800a448:	20000090 	.word	0x20000090
 800a44c:	20000088 	.word	0x20000088

0800a450 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800a450:	b500      	push	{lr}
 800a452:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800a454:	f003 fd7a 	bl	800df4c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a458:	f003 fd90 	bl	800df7c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a45c:	f003 fda6 	bl	800dfac <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800a460:	f003 fdbc 	bl	800dfdc <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 800a464:	f003 fdd2 	bl	800e00c <MX_USART6_UART_Init>
	xTaskCreate(VoltAmpTask, (const char* ) "VoltAmpTask",
 800a468:	22a0      	movs	r2, #160	; 0xa0
 800a46a:	2300      	movs	r3, #0
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	9302      	str	r3, [sp, #8]
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <Module_Peripheral_Init+0x3c>)
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	2303      	movs	r3, #3
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2300      	movs	r3, #0
 800a47a:	0052      	lsls	r2, r2, #1
 800a47c:	4904      	ldr	r1, [pc, #16]	; (800a490 <Module_Peripheral_Init+0x40>)
 800a47e:	4805      	ldr	r0, [pc, #20]	; (800a494 <Module_Peripheral_Init+0x44>)
 800a480:	f004 fdc0 	bl	800f004 <xTaskGenericCreate>
	MX_ADC_Init();
 800a484:	f002 fe12 	bl	800d0ac <MX_ADC_Init>
}
 800a488:	b005      	add	sp, #20
 800a48a:	bd00      	pop	{pc}
 800a48c:	20000fe4 	.word	0x20000fe4
 800a490:	08019e04 	.word	0x08019e04
 800a494:	0800a83d 	.word	0x0800a83d

0800a498 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800a498:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 800a49a:	4808      	ldr	r0, [pc, #32]	; (800a4bc <RegisterModuleCLICommands+0x24>)
 800a49c:	f004 f8aa 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 800a4a0:	4807      	ldr	r0, [pc, #28]	; (800a4c0 <RegisterModuleCLICommands+0x28>)
 800a4a2:	f004 f8a7 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 800a4a6:	4807      	ldr	r0, [pc, #28]	; (800a4c4 <RegisterModuleCLICommands+0x2c>)
 800a4a8:	f004 f8a4 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 800a4ac:	4806      	ldr	r0, [pc, #24]	; (800a4c8 <RegisterModuleCLICommands+0x30>)
 800a4ae:	f004 f8a1 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800a4b2:	4806      	ldr	r0, [pc, #24]	; (800a4cc <RegisterModuleCLICommands+0x34>)
 800a4b4:	f004 f89e 	bl	800e5f4 <FreeRTOS_CLIRegisterCommand>
}
 800a4b8:	bd10      	pop	{r4, pc}
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	08019ea0 	.word	0x08019ea0
 800a4c0:	0801a018 	.word	0x0801a018
 800a4c4:	08019eb0 	.word	0x08019eb0
 800a4c8:	0801a068 	.word	0x0801a068
 800a4cc:	08019e90 	.word	0x08019e90

0800a4d0 <GetPort>:
	if (huart->Instance == USART2)
 800a4d0:	6800      	ldr	r0, [r0, #0]
 800a4d2:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <GetPort+0x28>)
 800a4d4:	4298      	cmp	r0, r3
 800a4d6:	d00b      	beq.n	800a4f0 <GetPort+0x20>
	else if (huart->Instance == USART6)
 800a4d8:	4b08      	ldr	r3, [pc, #32]	; (800a4fc <GetPort+0x2c>)
 800a4da:	4298      	cmp	r0, r3
 800a4dc:	d00a      	beq.n	800a4f4 <GetPort+0x24>
	return 0;
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <GetPort+0x30>)
 800a4e0:	469c      	mov	ip, r3
 800a4e2:	4460      	add	r0, ip
 800a4e4:	4243      	negs	r3, r0
 800a4e6:	4158      	adcs	r0, r3
 800a4e8:	4240      	negs	r0, r0
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	4018      	ands	r0, r3
}
 800a4ee:	4770      	bx	lr
		return P1;
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	e7fc      	b.n	800a4ee <GetPort+0x1e>
		return P2;
 800a4f4:	2002      	movs	r0, #2
 800a4f6:	e7fa      	b.n	800a4ee <GetPort+0x1e>
 800a4f8:	40004400 	.word	0x40004400
 800a4fc:	40011400 	.word	0x40011400
 800a500:	bfffb800 	.word	0xbfffb800

0800a504 <SendResults>:
		uint8_t Module, float *Buffer) {
 800a504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a506:	b087      	sub	sp, #28
 800a508:	1c07      	adds	r7, r0, #0
 800a50a:	000c      	movs	r4, r1
 800a50c:	9302      	str	r3, [sp, #8]
 800a50e:	ab0c      	add	r3, sp, #48	; 0x30
 800a510:	781d      	ldrb	r5, [r3, #0]
	uint32_t RawMsgInt = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 800a516:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a518:	f004 f902 	bl	800e720 <FreeRTOS_CLIGetOutputBuffer>
 800a51c:	9003      	str	r0, [sp, #12]
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a51e:	2c04      	cmp	r4, #4
 800a520:	d100      	bne.n	800a524 <SendResults+0x20>
 800a522:	e0ce      	b.n	800a6c2 <SendResults+0x1be>
 800a524:	2c02      	cmp	r4, #2
 800a526:	d11d      	bne.n	800a564 <SendResults+0x60>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800a528:	4b67      	ldr	r3, [pc, #412]	; (800a6c8 <SendResults+0x1c4>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b05      	cmp	r3, #5
 800a52e:	d07d      	beq.n	800a62c <SendResults+0x128>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800a530:	2b07      	cmp	r3, #7
 800a532:	d000      	beq.n	800a536 <SendResults+0x32>
 800a534:	e0be      	b.n	800a6b4 <SendResults+0x1b0>
			if (Module == myID) {
 800a536:	4b65      	ldr	r3, [pc, #404]	; (800a6cc <SendResults+0x1c8>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	42ab      	cmp	r3, r5
 800a53c:	d100      	bne.n	800a540 <SendResults+0x3c>
 800a53e:	e0a3      	b.n	800a688 <SendResults+0x184>
				messageParams[0] = Port;
 800a540:	4b63      	ldr	r3, [pc, #396]	; (800a6d0 <SendResults+0x1cc>)
 800a542:	9a02      	ldr	r2, [sp, #8]
 800a544:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a546:	aa05      	add	r2, sp, #20
 800a548:	78d1      	ldrb	r1, [r2, #3]
 800a54a:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a54c:	7891      	ldrb	r1, [r2, #2]
 800a54e:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a550:	7851      	ldrb	r1, [r2, #1]
 800a552:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a554:	7812      	ldrb	r2, [r2, #0]
 800a556:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a558:	2205      	movs	r2, #5
 800a55a:	2123      	movs	r1, #35	; 0x23
 800a55c:	0028      	movs	r0, r5
 800a55e:	f7fd fe2b 	bl	80081b8 <SendMessageToModule>
 800a562:	e0a7      	b.n	800a6b4 <SendResults+0x1b0>
		strUnit = malloc(6 * sizeof(char));
 800a564:	2006      	movs	r0, #6
 800a566:	f009 f953 	bl	8013810 <malloc>
 800a56a:	0006      	movs	r6, r0
		memset(strUnit, 0, (6 * sizeof(char)));
 800a56c:	2206      	movs	r2, #6
 800a56e:	2100      	movs	r1, #0
 800a570:	f009 f98c 	bl	801388c <memset>
		if (unit == Volt) {
 800a574:	4b57      	ldr	r3, [pc, #348]	; (800a6d4 <SendResults+0x1d0>)
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d00d      	beq.n	800a598 <SendResults+0x94>
		} else if (unit == Amp) {
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d011      	beq.n	800a5a4 <SendResults+0xa0>
			sprintf((char*) strUnit, "Volt");
 800a580:	4b55      	ldr	r3, [pc, #340]	; (800a6d8 <SendResults+0x1d4>)
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	6032      	str	r2, [r6, #0]
 800a586:	791b      	ldrb	r3, [r3, #4]
 800a588:	7133      	strb	r3, [r6, #4]
	switch (Mode) {
 800a58a:	2c08      	cmp	r4, #8
 800a58c:	d900      	bls.n	800a590 <SendResults+0x8c>
 800a58e:	e095      	b.n	800a6bc <SendResults+0x1b8>
 800a590:	00a3      	lsls	r3, r4, #2
 800a592:	4a52      	ldr	r2, [pc, #328]	; (800a6dc <SendResults+0x1d8>)
 800a594:	58d3      	ldr	r3, [r2, r3]
 800a596:	469f      	mov	pc, r3
			sprintf((char*) strUnit, "Volt");
 800a598:	4b4f      	ldr	r3, [pc, #316]	; (800a6d8 <SendResults+0x1d4>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6032      	str	r2, [r6, #0]
 800a59e:	791b      	ldrb	r3, [r3, #4]
 800a5a0:	7133      	strb	r3, [r6, #4]
 800a5a2:	e7f2      	b.n	800a58a <SendResults+0x86>
			sprintf((char*) strUnit, "Amp");
 800a5a4:	4b4e      	ldr	r3, [pc, #312]	; (800a6e0 <SendResults+0x1dc>)
 800a5a6:	6033      	str	r3, [r6, #0]
 800a5a8:	e7ef      	b.n	800a58a <SendResults+0x86>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800a5aa:	4b47      	ldr	r3, [pc, #284]	; (800a6c8 <SendResults+0x1c4>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	2b05      	cmp	r3, #5
 800a5b0:	d01d      	beq.n	800a5ee <SendResults+0xea>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800a5b2:	2b07      	cmp	r3, #7
 800a5b4:	d17e      	bne.n	800a6b4 <SendResults+0x1b0>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 800a5b6:	1c38      	adds	r0, r7, #0
 800a5b8:	f7f8 fb62 	bl	8002c80 <__aeabi_f2d>
 800a5bc:	9000      	str	r0, [sp, #0]
 800a5be:	9101      	str	r1, [sp, #4]
 800a5c0:	0032      	movs	r2, r6
 800a5c2:	4948      	ldr	r1, [pc, #288]	; (800a6e4 <SendResults+0x1e0>)
 800a5c4:	9d03      	ldr	r5, [sp, #12]
 800a5c6:	0028      	movs	r0, r5
 800a5c8:	f009 feee 	bl	80143a8 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a5cc:	0028      	movs	r0, r5
 800a5ce:	f7f5 fda3 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a5d2:	23fa      	movs	r3, #250	; 0xfa
 800a5d4:	b282      	uxth	r2, r0
 800a5d6:	4944      	ldr	r1, [pc, #272]	; (800a6e8 <SendResults+0x1e4>)
 800a5d8:	7808      	ldrb	r0, [r1, #0]
 800a5da:	2101      	movs	r1, #1
 800a5dc:	4249      	negs	r1, r1
 800a5de:	9100      	str	r1, [sp, #0]
 800a5e0:	005b      	lsls	r3, r3, #1
 800a5e2:	0029      	movs	r1, r5
 800a5e4:	f003 fde0 	bl	800e1a8 <writePxMutex>
			CheckForEnterKey();
 800a5e8:	f7ff fcf8 	bl	8009fdc <CheckForEnterKey>
 800a5ec:	e062      	b.n	800a6b4 <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800a5ee:	493f      	ldr	r1, [pc, #252]	; (800a6ec <SendResults+0x1e8>)
 800a5f0:	1c38      	adds	r0, r7, #0
 800a5f2:	f7f6 fa51 	bl	8000a98 <__aeabi_fmul>
 800a5f6:	f7f5 ffb9 	bl	800056c <__aeabi_f2uiz>
 800a5fa:	0003      	movs	r3, r0
 800a5fc:	9004      	str	r0, [sp, #16]
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800a5fe:	0032      	movs	r2, r6
 800a600:	493b      	ldr	r1, [pc, #236]	; (800a6f0 <SendResults+0x1ec>)
 800a602:	9d03      	ldr	r5, [sp, #12]
 800a604:	0028      	movs	r0, r5
 800a606:	f009 fecf 	bl	80143a8 <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a60a:	0028      	movs	r0, r5
 800a60c:	f7f5 fd84 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a610:	23fa      	movs	r3, #250	; 0xfa
 800a612:	b282      	uxth	r2, r0
 800a614:	4934      	ldr	r1, [pc, #208]	; (800a6e8 <SendResults+0x1e4>)
 800a616:	7808      	ldrb	r0, [r1, #0]
 800a618:	2101      	movs	r1, #1
 800a61a:	4249      	negs	r1, r1
 800a61c:	9100      	str	r1, [sp, #0]
 800a61e:	005b      	lsls	r3, r3, #1
 800a620:	0029      	movs	r1, r5
 800a622:	f003 fdc1 	bl	800e1a8 <writePxMutex>
			CheckForEnterKey();
 800a626:	f7ff fcd9 	bl	8009fdc <CheckForEnterKey>
 800a62a:	e043      	b.n	800a6b4 <SendResults+0x1b0>
			RawMsgInt = Raw_Msg * 10;
 800a62c:	492f      	ldr	r1, [pc, #188]	; (800a6ec <SendResults+0x1e8>)
 800a62e:	1c38      	adds	r0, r7, #0
 800a630:	f7f6 fa32 	bl	8000a98 <__aeabi_fmul>
 800a634:	f7f5 ff9a 	bl	800056c <__aeabi_f2uiz>
 800a638:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800a63a:	4b24      	ldr	r3, [pc, #144]	; (800a6cc <SendResults+0x1c8>)
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	42ab      	cmp	r3, r5
 800a640:	d011      	beq.n	800a666 <SendResults+0x162>
				messageParams[0] = Port;
 800a642:	4b23      	ldr	r3, [pc, #140]	; (800a6d0 <SendResults+0x1cc>)
 800a644:	9a02      	ldr	r2, [sp, #8]
 800a646:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a648:	aa04      	add	r2, sp, #16
 800a64a:	78d1      	ldrb	r1, [r2, #3]
 800a64c:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a64e:	7891      	ldrb	r1, [r2, #2]
 800a650:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a652:	7851      	ldrb	r1, [r2, #1]
 800a654:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a656:	7812      	ldrb	r2, [r2, #0]
 800a658:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a65a:	2205      	movs	r2, #5
 800a65c:	2123      	movs	r1, #35	; 0x23
 800a65e:	0028      	movs	r0, r5
 800a660:	f7fd fdaa 	bl	80081b8 <SendMessageToModule>
 800a664:	e026      	b.n	800a6b4 <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a666:	ab04      	add	r3, sp, #16
 800a668:	78da      	ldrb	r2, [r3, #3]
 800a66a:	4922      	ldr	r1, [pc, #136]	; (800a6f4 <SendResults+0x1f0>)
 800a66c:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a66e:	789a      	ldrb	r2, [r3, #2]
 800a670:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a672:	785a      	ldrb	r2, [r3, #1]
 800a674:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a67a:	230a      	movs	r3, #10
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	2204      	movs	r2, #4
 800a680:	9802      	ldr	r0, [sp, #8]
 800a682:	f003 fd91 	bl	800e1a8 <writePxMutex>
 800a686:	e015      	b.n	800a6b4 <SendResults+0x1b0>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a688:	ab05      	add	r3, sp, #20
 800a68a:	78da      	ldrb	r2, [r3, #3]
 800a68c:	4919      	ldr	r1, [pc, #100]	; (800a6f4 <SendResults+0x1f0>)
 800a68e:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a690:	789a      	ldrb	r2, [r3, #2]
 800a692:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a694:	785a      	ldrb	r2, [r3, #1]
 800a696:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a69c:	230a      	movs	r3, #10
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2204      	movs	r2, #4
 800a6a2:	9802      	ldr	r0, [sp, #8]
 800a6a4:	f003 fd80 	bl	800e1a8 <writePxMutex>
 800a6a8:	e004      	b.n	800a6b4 <SendResults+0x1b0>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800a6aa:	2204      	movs	r2, #4
 800a6ac:	a905      	add	r1, sp, #20
 800a6ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a6b0:	f009 f8e3 	bl	801387a <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a6b4:	3c02      	subs	r4, #2
 800a6b6:	23fd      	movs	r3, #253	; 0xfd
 800a6b8:	421c      	tst	r4, r3
 800a6ba:	d002      	beq.n	800a6c2 <SendResults+0x1be>
		free(strUnit);
 800a6bc:	0030      	movs	r0, r6
 800a6be:	f009 f8b1 	bl	8013824 <free>
}
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	b007      	add	sp, #28
 800a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c8:	20000095 	.word	0x20000095
 800a6cc:	20000806 	.word	0x20000806
 800a6d0:	200006c8 	.word	0x200006c8
 800a6d4:	200000a4 	.word	0x200000a4
 800a6d8:	08019e10 	.word	0x08019e10
 800a6dc:	08019dcc 	.word	0x08019dcc
 800a6e0:	00706d41 	.word	0x00706d41
 800a6e4:	08019e28 	.word	0x08019e28
 800a6e8:	200002b0 	.word	0x200002b0
 800a6ec:	41200000 	.word	0x41200000
 800a6f0:	08019e18 	.word	0x08019e18
 800a6f4:	20000fec 	.word	0x20000fec

0800a6f8 <CalculationVolt>:
float CalculationVolt(void) {
 800a6f8:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH9();
 800a6fa:	f000 fc1b 	bl	800af34 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 800a6fe:	4c1a      	ldr	r4, [pc, #104]	; (800a768 <CalculationVolt+0x70>)
 800a700:	0020      	movs	r0, r4
 800a702:	f005 ffcf 	bl	80106a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a706:	21fa      	movs	r1, #250	; 0xfa
 800a708:	0089      	lsls	r1, r1, #2
 800a70a:	0020      	movs	r0, r4
 800a70c:	f006 f81c 	bl	8010748 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800a710:	0020      	movs	r0, r4
 800a712:	f006 f8bd 	bl	8010890 <HAL_ADC_GetValue>
 800a716:	4d15      	ldr	r5, [pc, #84]	; (800a76c <CalculationVolt+0x74>)
 800a718:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800a71a:	0020      	movs	r0, r4
 800a71c:	f005 fff2 	bl	8010704 <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 800a720:	f000 fc1a 	bl	800af58 <ADC_Deselect_CH9>
	return tmp_adc;
 800a724:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Volt);
 800a726:	4b12      	ldr	r3, [pc, #72]	; (800a770 <CalculationVolt+0x78>)
 800a728:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	f7f6 fcca 	bl	80010c4 <__aeabi_ui2f>
 800a730:	f7f8 faa6 	bl	8002c80 <__aeabi_f2d>
 800a734:	4a0f      	ldr	r2, [pc, #60]	; (800a774 <CalculationVolt+0x7c>)
 800a736:	4b10      	ldr	r3, [pc, #64]	; (800a778 <CalculationVolt+0x80>)
 800a738:	f7f7 fc2a 	bl	8001f90 <__aeabi_dmul>
 800a73c:	f7f8 faf2 	bl	8002d24 <__aeabi_d2f>
	_volt = _volt - VRef;
 800a740:	f7f8 fa9e 	bl	8002c80 <__aeabi_f2d>
 800a744:	4a0d      	ldr	r2, [pc, #52]	; (800a77c <CalculationVolt+0x84>)
 800a746:	4b0e      	ldr	r3, [pc, #56]	; (800a780 <CalculationVolt+0x88>)
 800a748:	f7f7 fe94 	bl	8002474 <__aeabi_dsub>
 800a74c:	f7f8 faea 	bl	8002d24 <__aeabi_d2f>
 800a750:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <CalculationVolt+0x8c>)
 800a752:	6018      	str	r0, [r3, #0]
	measured_volt = _volt * (4000150/(50*150))+40/*voltRatio*/; /////////////////final volt calculation here
 800a754:	490c      	ldr	r1, [pc, #48]	; (800a788 <CalculationVolt+0x90>)
 800a756:	f7f6 f99f 	bl	8000a98 <__aeabi_fmul>
 800a75a:	490c      	ldr	r1, [pc, #48]	; (800a78c <CalculationVolt+0x94>)
 800a75c:	f7f5 ff3c 	bl	80005d8 <__aeabi_fadd>
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <CalculationVolt+0x98>)
 800a762:	6018      	str	r0, [r3, #0]
}
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	46c0      	nop			; (mov r8, r8)
 800a768:	20006630 	.word	0x20006630
 800a76c:	20006480 	.word	0x20006480
 800a770:	2000648c 	.word	0x2000648c
 800a774:	e734d9b4 	.word	0xe734d9b4
 800a778:	3f4a680c 	.word	0x3f4a680c
 800a77c:	66666666 	.word	0x66666666
 800a780:	3ffa6666 	.word	0x3ffa6666
 800a784:	20006358 	.word	0x20006358
 800a788:	44054000 	.word	0x44054000
 800a78c:	42200000 	.word	0x42200000
 800a790:	200065ec 	.word	0x200065ec

0800a794 <CalculationAmp>:
float CalculationAmp(void) {
 800a794:	b570      	push	{r4, r5, r6, lr}
		ADC_Select_CH7();
 800a796:	f000 fba9 	bl	800aeec <ADC_Select_CH7>
		HAL_ADC_Start(&hadc);
 800a79a:	4c1c      	ldr	r4, [pc, #112]	; (800a80c <CalculationAmp+0x78>)
 800a79c:	0020      	movs	r0, r4
 800a79e:	f005 ff81 	bl	80106a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 800a7a2:	21fa      	movs	r1, #250	; 0xfa
 800a7a4:	0089      	lsls	r1, r1, #2
 800a7a6:	0020      	movs	r0, r4
 800a7a8:	f005 ffce 	bl	8010748 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 800a7ac:	0020      	movs	r0, r4
 800a7ae:	f006 f86f 	bl	8010890 <HAL_ADC_GetValue>
 800a7b2:	4d17      	ldr	r5, [pc, #92]	; (800a810 <CalculationAmp+0x7c>)
 800a7b4:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800a7b6:	0020      	movs	r0, r4
 800a7b8:	f005 ffa4 	bl	8010704 <HAL_ADC_Stop>
		ADC_Deselect_CH7();
 800a7bc:	f000 fba8 	bl	800af10 <ADC_Deselect_CH7>
	return tmp_adc;
 800a7c0:	682a      	ldr	r2, [r5, #0]
	raw_adc = Adc_Calculation(Amp);
 800a7c2:	4b14      	ldr	r3, [pc, #80]	; (800a814 <CalculationAmp+0x80>)
 800a7c4:	601a      	str	r2, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	f7f6 fc7c 	bl	80010c4 <__aeabi_ui2f>
 800a7cc:	f7f8 fa58 	bl	8002c80 <__aeabi_f2d>
 800a7d0:	4a11      	ldr	r2, [pc, #68]	; (800a818 <CalculationAmp+0x84>)
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <CalculationAmp+0x88>)
 800a7d4:	f7f7 fbdc 	bl	8001f90 <__aeabi_dmul>
 800a7d8:	f7f8 faa4 	bl	8002d24 <__aeabi_d2f>
	_volt = _volt - VRef;
 800a7dc:	f7f8 fa50 	bl	8002c80 <__aeabi_f2d>
 800a7e0:	4a0f      	ldr	r2, [pc, #60]	; (800a820 <CalculationAmp+0x8c>)
 800a7e2:	4b10      	ldr	r3, [pc, #64]	; (800a824 <CalculationAmp+0x90>)
 800a7e4:	f7f7 fe46 	bl	8002474 <__aeabi_dsub>
 800a7e8:	f7f8 fa9c 	bl	8002d24 <__aeabi_d2f>
 800a7ec:	4b0e      	ldr	r3, [pc, #56]	; (800a828 <CalculationAmp+0x94>)
 800a7ee:	6018      	str	r0, [r3, #0]
	measured_amp = ((_volt * 100) / shuntResistor) * ampTranRatio; /////////////////final amp calculation here
 800a7f0:	490e      	ldr	r1, [pc, #56]	; (800a82c <CalculationAmp+0x98>)
 800a7f2:	f7f6 f951 	bl	8000a98 <__aeabi_fmul>
 800a7f6:	f7f8 fa43 	bl	8002c80 <__aeabi_f2d>
 800a7fa:	4a0d      	ldr	r2, [pc, #52]	; (800a830 <CalculationAmp+0x9c>)
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <CalculationAmp+0xa0>)
 800a7fe:	f7f6 ffbd 	bl	800177c <__aeabi_ddiv>
 800a802:	f7f8 fa8f 	bl	8002d24 <__aeabi_d2f>
 800a806:	4b0c      	ldr	r3, [pc, #48]	; (800a838 <CalculationAmp+0xa4>)
 800a808:	6018      	str	r0, [r3, #0]
}
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	20006630 	.word	0x20006630
 800a810:	20006480 	.word	0x20006480
 800a814:	2000648c 	.word	0x2000648c
 800a818:	e734d9b4 	.word	0xe734d9b4
 800a81c:	3f4a680c 	.word	0x3f4a680c
 800a820:	66666666 	.word	0x66666666
 800a824:	3ffa6666 	.word	0x3ffa6666
 800a828:	20006358 	.word	0x20006358
 800a82c:	42c80000 	.word	0x42c80000
 800a830:	9999999a 	.word	0x9999999a
 800a834:	3fb99999 	.word	0x3fb99999
 800a838:	2000647c 	.word	0x2000647c

0800a83c <VoltAmpTask>:
void VoltAmpTask(void *argument) {
 800a83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a83e:	46c6      	mov	lr, r8
 800a840:	b500      	push	{lr}
 800a842:	b082      	sub	sp, #8
	HAL_ADC_Start_IT(&hadc);
 800a844:	483b      	ldr	r0, [pc, #236]	; (800a934 <VoltAmpTask+0xf8>)
 800a846:	f005 ffdf 	bl	8010808 <HAL_ADC_Start_IT>
		switch (unit) {
 800a84a:	4c3b      	ldr	r4, [pc, #236]	; (800a938 <VoltAmpTask+0xfc>)
			DATA_To_SEND = CalculationVolt();
 800a84c:	4e3b      	ldr	r6, [pc, #236]	; (800a93c <VoltAmpTask+0x100>)
			DATA_To_SEND = CalculationVolt();
 800a84e:	46b0      	mov	r8, r6
 800a850:	e02e      	b.n	800a8b0 <VoltAmpTask+0x74>
			DATA_To_SEND = CalculationVolt();
 800a852:	f7ff ff51 	bl	800a6f8 <CalculationVolt>
 800a856:	6030      	str	r0, [r6, #0]
		switch (global_mode) {
 800a858:	4b39      	ldr	r3, [pc, #228]	; (800a940 <VoltAmpTask+0x104>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d031      	beq.n	800a8c4 <VoltAmpTask+0x88>
 800a860:	2b03      	cmp	r3, #3
 800a862:	d04c      	beq.n	800a8fe <VoltAmpTask+0xc2>
 800a864:	2b01      	cmp	r3, #1
 800a866:	d008      	beq.n	800a87a <VoltAmpTask+0x3e>
			global_mode = IDLE_CASE;
 800a868:	4b35      	ldr	r3, [pc, #212]	; (800a940 <VoltAmpTask+0x104>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	701a      	strb	r2, [r3, #0]
			break;
 800a86e:	e01d      	b.n	800a8ac <VoltAmpTask+0x70>
			DATA_To_SEND = CalculationAmp();
 800a870:	f7ff ff90 	bl	800a794 <CalculationAmp>
 800a874:	4b31      	ldr	r3, [pc, #196]	; (800a93c <VoltAmpTask+0x100>)
 800a876:	6018      	str	r0, [r3, #0]
			break;
 800a878:	e7ee      	b.n	800a858 <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800a87a:	f005 fd8b 	bl	8010394 <HAL_GetTick>
 800a87e:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800a880:	4b2d      	ldr	r3, [pc, #180]	; (800a938 <VoltAmpTask+0xfc>)
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	4b2e      	ldr	r3, [pc, #184]	; (800a940 <VoltAmpTask+0x104>)
 800a886:	7819      	ldrb	r1, [r3, #0]
 800a888:	4b2c      	ldr	r3, [pc, #176]	; (800a93c <VoltAmpTask+0x100>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	2300      	movs	r3, #0
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	f7ff fe37 	bl	800a504 <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800a896:	4f2b      	ldr	r7, [pc, #172]	; (800a944 <VoltAmpTask+0x108>)
 800a898:	e001      	b.n	800a89e <VoltAmpTask+0x62>
				taskYIELD();
 800a89a:	f005 fc15 	bl	80100c8 <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800a89e:	f005 fd79 	bl	8010394 <HAL_GetTick>
 800a8a2:	1b40      	subs	r0, r0, r5
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	4298      	cmp	r0, r3
 800a8aa:	d3f6      	bcc.n	800a89a <VoltAmpTask+0x5e>
		taskYIELD();
 800a8ac:	f005 fc0c 	bl	80100c8 <vPortYield>
		switch (unit) {
 800a8b0:	7823      	ldrb	r3, [r4, #0]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d0cd      	beq.n	800a852 <VoltAmpTask+0x16>
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d0da      	beq.n	800a870 <VoltAmpTask+0x34>
			DATA_To_SEND = CalculationVolt();
 800a8ba:	f7ff ff1d 	bl	800a6f8 <CalculationVolt>
 800a8be:	4643      	mov	r3, r8
 800a8c0:	6018      	str	r0, [r3, #0]
			break;
 800a8c2:	e7c9      	b.n	800a858 <VoltAmpTask+0x1c>
			t0 = HAL_GetTick();
 800a8c4:	f005 fd66 	bl	8010394 <HAL_GetTick>
 800a8c8:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, global_port,
 800a8ca:	4b1f      	ldr	r3, [pc, #124]	; (800a948 <VoltAmpTask+0x10c>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	4a1a      	ldr	r2, [pc, #104]	; (800a938 <VoltAmpTask+0xfc>)
 800a8d0:	7812      	ldrb	r2, [r2, #0]
 800a8d2:	491b      	ldr	r1, [pc, #108]	; (800a940 <VoltAmpTask+0x104>)
 800a8d4:	7809      	ldrb	r1, [r1, #0]
 800a8d6:	4819      	ldr	r0, [pc, #100]	; (800a93c <VoltAmpTask+0x100>)
 800a8d8:	6800      	ldr	r0, [r0, #0]
 800a8da:	2700      	movs	r7, #0
 800a8dc:	9701      	str	r7, [sp, #4]
 800a8de:	4f1b      	ldr	r7, [pc, #108]	; (800a94c <VoltAmpTask+0x110>)
 800a8e0:	783f      	ldrb	r7, [r7, #0]
 800a8e2:	9700      	str	r7, [sp, #0]
 800a8e4:	f7ff fe0e 	bl	800a504 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800a8e8:	4f16      	ldr	r7, [pc, #88]	; (800a944 <VoltAmpTask+0x108>)
 800a8ea:	e001      	b.n	800a8f0 <VoltAmpTask+0xb4>
				taskYIELD();
 800a8ec:	f005 fbec 	bl	80100c8 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800a8f0:	f005 fd50 	bl	8010394 <HAL_GetTick>
 800a8f4:	1b40      	subs	r0, r0, r5
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	4298      	cmp	r0, r3
 800a8fa:	d3f7      	bcc.n	800a8ec <VoltAmpTask+0xb0>
 800a8fc:	e7d6      	b.n	800a8ac <VoltAmpTask+0x70>
			t0 = HAL_GetTick();
 800a8fe:	f005 fd49 	bl	8010394 <HAL_GetTick>
 800a902:	0005      	movs	r5, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0,ptr_read_buffer);
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <VoltAmpTask+0xfc>)
 800a906:	781a      	ldrb	r2, [r3, #0]
 800a908:	4b0d      	ldr	r3, [pc, #52]	; (800a940 <VoltAmpTask+0x104>)
 800a90a:	7819      	ldrb	r1, [r3, #0]
 800a90c:	4b0b      	ldr	r3, [pc, #44]	; (800a93c <VoltAmpTask+0x100>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	4b0f      	ldr	r3, [pc, #60]	; (800a950 <VoltAmpTask+0x114>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	2300      	movs	r3, #0
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	f7ff fdf3 	bl	800a504 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800a91e:	4f09      	ldr	r7, [pc, #36]	; (800a944 <VoltAmpTask+0x108>)
 800a920:	e001      	b.n	800a926 <VoltAmpTask+0xea>
				taskYIELD();
 800a922:	f005 fbd1 	bl	80100c8 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800a926:	f005 fd35 	bl	8010394 <HAL_GetTick>
 800a92a:	1b40      	subs	r0, r0, r5
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	4298      	cmp	r0, r3
 800a930:	d3f7      	bcc.n	800a922 <VoltAmpTask+0xe6>
 800a932:	e7bb      	b.n	800a8ac <VoltAmpTask+0x70>
 800a934:	20006630 	.word	0x20006630
 800a938:	200000a4 	.word	0x200000a4
 800a93c:	20000fe0 	.word	0x20000fe0
 800a940:	200063cc 	.word	0x200063cc
 800a944:	20006578 	.word	0x20006578
 800a948:	200063cd 	.word	0x200063cd
 800a94c:	200065f0 	.word	0x200065f0
 800a950:	20006488 	.word	0x20006488

0800a954 <SampleV>:
uint8_t SampleV(float *volt) {
 800a954:	b510      	push	{r4, lr}
 800a956:	0004      	movs	r4, r0
	*volt = CalculationVolt();
 800a958:	f7ff fece 	bl	800a6f8 <CalculationVolt>
 800a95c:	6020      	str	r0, [r4, #0]
}
 800a95e:	2000      	movs	r0, #0
 800a960:	bd10      	pop	{r4, pc}

0800a962 <SampleA>:
uint8_t SampleA(float *curr) {
 800a962:	b510      	push	{r4, lr}
 800a964:	0004      	movs	r4, r0
	*curr = CalculationAmp();
 800a966:	f7ff ff15 	bl	800a794 <CalculationAmp>
 800a96a:	6020      	str	r0, [r4, #0]
}
 800a96c:	2000      	movs	r0, #0
 800a96e:	bd10      	pop	{r4, pc}

0800a970 <sampleCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE sampleCommand(int8_t *pcWriteBuffer,
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a970:	b510      	push	{r4, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	0004      	movs	r4, r0
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) pcCommandString;
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);

	switch (unit) {
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <sampleCommand+0x54>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d005      	beq.n	800a98a <sampleCommand+0x1a>
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d01c      	beq.n	800a9bc <sampleCommand+0x4c>
		break;
	case Amp:
		SampleA(&DATA_To_SEND1);
		break;
	default:
		SampleV(&DATA_To_SEND1);
 800a982:	4811      	ldr	r0, [pc, #68]	; (800a9c8 <sampleCommand+0x58>)
 800a984:	f7ff ffe6 	bl	800a954 <SampleV>
 800a988:	e002      	b.n	800a990 <sampleCommand+0x20>
		SampleV(&DATA_To_SEND1);
 800a98a:	480f      	ldr	r0, [pc, #60]	; (800a9c8 <sampleCommand+0x58>)
 800a98c:	f7ff ffe2 	bl	800a954 <SampleV>
	}

	global_mode = SAMPLE_CLI_CASE;
 800a990:	4b0e      	ldr	r3, [pc, #56]	; (800a9cc <sampleCommand+0x5c>)
 800a992:	2206      	movs	r2, #6
 800a994:	701a      	strb	r2, [r3, #0]
	SendResults(DATA_To_SEND1, global_mode, unit, 0, 0, NULL);
 800a996:	4b0b      	ldr	r3, [pc, #44]	; (800a9c4 <sampleCommand+0x54>)
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <sampleCommand+0x58>)
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	2106      	movs	r1, #6
 800a9a6:	f7ff fdad 	bl	800a504 <SendResults>

	if (result != H2AR3_OK)
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a9aa:	2299      	movs	r2, #153	; 0x99
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	0020      	movs	r0, r4
 800a9b2:	f008 ff6b 	bl	801388c <memset>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800a9b6:	2000      	movs	r0, #0
 800a9b8:	b002      	add	sp, #8
 800a9ba:	bd10      	pop	{r4, pc}
		SampleA(&DATA_To_SEND1);
 800a9bc:	4802      	ldr	r0, [pc, #8]	; (800a9c8 <sampleCommand+0x58>)
 800a9be:	f7ff ffd0 	bl	800a962 <SampleA>
		break;
 800a9c2:	e7e5      	b.n	800a990 <sampleCommand+0x20>
 800a9c4:	200000a4 	.word	0x200000a4
 800a9c8:	20000008 	.word	0x20000008
 800a9cc:	200063cc 	.word	0x200063cc

0800a9d0 <StreamVToPort>:
		uint32_t Timeout) {
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	b082      	sub	sp, #8
	global_port = Port;
 800a9d4:	4c19      	ldr	r4, [pc, #100]	; (800aa3c <StreamVToPort+0x6c>)
 800a9d6:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800a9d8:	4819      	ldr	r0, [pc, #100]	; (800aa40 <StreamVToPort+0x70>)
 800a9da:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800a9dc:	4919      	ldr	r1, [pc, #100]	; (800aa44 <StreamVToPort+0x74>)
 800a9de:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800a9e0:	4a19      	ldr	r2, [pc, #100]	; (800aa48 <StreamVToPort+0x78>)
 800a9e2:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800a9e4:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <StreamVToPort+0x7c>)
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	7011      	strb	r1, [r2, #0]
	unit = Volt;
 800a9ea:	4a19      	ldr	r2, [pc, #100]	; (800aa50 <StreamVToPort+0x80>)
 800a9ec:	3901      	subs	r1, #1
 800a9ee:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800a9f0:	1e5a      	subs	r2, r3, #1
 800a9f2:	3203      	adds	r2, #3
 800a9f4:	d902      	bls.n	800a9fc <StreamVToPort+0x2c>
}
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	b002      	add	sp, #8
 800a9fa:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800a9fc:	0158      	lsls	r0, r3, #5
 800a9fe:	1ac0      	subs	r0, r0, r3
 800aa00:	0080      	lsls	r0, r0, #2
 800aa02:	18c0      	adds	r0, r0, r3
 800aa04:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800aa06:	21fa      	movs	r1, #250	; 0xfa
 800aa08:	0089      	lsls	r1, r1, #2
 800aa0a:	f7f5 fb97 	bl	800013c <__udivsi3>
 800aa0e:	0001      	movs	r1, r0
 800aa10:	4b10      	ldr	r3, [pc, #64]	; (800aa54 <StreamVToPort+0x84>)
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	23ff      	movs	r3, #255	; 0xff
 800aa16:	2200      	movs	r2, #0
 800aa18:	480f      	ldr	r0, [pc, #60]	; (800aa58 <StreamVToPort+0x88>)
 800aa1a:	f005 f9a9 	bl	800fd70 <xTimerCreate>
 800aa1e:	0004      	movs	r4, r0
 800aa20:	4b0e      	ldr	r3, [pc, #56]	; (800aa5c <StreamVToPort+0x8c>)
 800aa22:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800aa24:	f004 fc70 	bl	800f308 <xTaskGetTickCount>
 800aa28:	0002      	movs	r2, r0
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	425b      	negs	r3, r3
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	2300      	movs	r3, #0
 800aa32:	2101      	movs	r1, #1
 800aa34:	0020      	movs	r0, r4
 800aa36:	f005 f9b9 	bl	800fdac <xTimerGenericCommand>
 800aa3a:	e7dc      	b.n	800a9f6 <StreamVToPort+0x26>
 800aa3c:	200063cd 	.word	0x200063cd
 800aa40:	200065f0 	.word	0x200065f0
 800aa44:	20006578 	.word	0x20006578
 800aa48:	200065f4 	.word	0x200065f4
 800aa4c:	200063cc 	.word	0x200063cc
 800aa50:	200000a4 	.word	0x200000a4
 800aa54:	0800a04d 	.word	0x0800a04d
 800aa58:	08019e4c 	.word	0x08019e4c
 800aa5c:	20000ff0 	.word	0x20000ff0

0800aa60 <StreamAToPort>:
		uint32_t Timeout) {
 800aa60:	b510      	push	{r4, lr}
 800aa62:	b082      	sub	sp, #8
	global_port = Port;
 800aa64:	4c19      	ldr	r4, [pc, #100]	; (800aacc <StreamAToPort+0x6c>)
 800aa66:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800aa68:	4819      	ldr	r0, [pc, #100]	; (800aad0 <StreamAToPort+0x70>)
 800aa6a:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800aa6c:	4919      	ldr	r1, [pc, #100]	; (800aad4 <StreamAToPort+0x74>)
 800aa6e:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800aa70:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <StreamAToPort+0x78>)
 800aa72:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800aa74:	2202      	movs	r2, #2
 800aa76:	4919      	ldr	r1, [pc, #100]	; (800aadc <StreamAToPort+0x7c>)
 800aa78:	700a      	strb	r2, [r1, #0]
	unit = Amp;
 800aa7a:	4919      	ldr	r1, [pc, #100]	; (800aae0 <StreamAToPort+0x80>)
 800aa7c:	700a      	strb	r2, [r1, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800aa7e:	1e5a      	subs	r2, r3, #1
 800aa80:	3203      	adds	r2, #3
 800aa82:	d902      	bls.n	800aa8a <StreamAToPort+0x2a>
}
 800aa84:	2000      	movs	r0, #0
 800aa86:	b002      	add	sp, #8
 800aa88:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800aa8a:	0158      	lsls	r0, r3, #5
 800aa8c:	1ac0      	subs	r0, r0, r3
 800aa8e:	0080      	lsls	r0, r0, #2
 800aa90:	18c0      	adds	r0, r0, r3
 800aa92:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800aa94:	21fa      	movs	r1, #250	; 0xfa
 800aa96:	0089      	lsls	r1, r1, #2
 800aa98:	f7f5 fb50 	bl	800013c <__udivsi3>
 800aa9c:	0001      	movs	r1, r0
 800aa9e:	4b11      	ldr	r3, [pc, #68]	; (800aae4 <StreamAToPort+0x84>)
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	23ff      	movs	r3, #255	; 0xff
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4810      	ldr	r0, [pc, #64]	; (800aae8 <StreamAToPort+0x88>)
 800aaa8:	f005 f962 	bl	800fd70 <xTimerCreate>
 800aaac:	0004      	movs	r4, r0
 800aaae:	4b0f      	ldr	r3, [pc, #60]	; (800aaec <StreamAToPort+0x8c>)
 800aab0:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800aab2:	f004 fc29 	bl	800f308 <xTaskGetTickCount>
 800aab6:	0002      	movs	r2, r0
 800aab8:	2301      	movs	r3, #1
 800aaba:	425b      	negs	r3, r3
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	2300      	movs	r3, #0
 800aac0:	2101      	movs	r1, #1
 800aac2:	0020      	movs	r0, r4
 800aac4:	f005 f972 	bl	800fdac <xTimerGenericCommand>
 800aac8:	e7dc      	b.n	800aa84 <StreamAToPort+0x24>
 800aaca:	46c0      	nop			; (mov r8, r8)
 800aacc:	200063cd 	.word	0x200063cd
 800aad0:	200065f0 	.word	0x200065f0
 800aad4:	20006578 	.word	0x20006578
 800aad8:	200065f4 	.word	0x200065f4
 800aadc:	200063cc 	.word	0x200063cc
 800aae0:	200000a4 	.word	0x200000a4
 800aae4:	0800a04d 	.word	0x0800a04d
 800aae8:	08019e4c 	.word	0x08019e4c
 800aaec:	20000ff0 	.word	0x20000ff0

0800aaf0 <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800aaf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaf2:	46c6      	mov	lr, r8
 800aaf4:	b500      	push	{lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	ab08      	add	r3, sp, #32
 800aafa:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800aafc:	4b39      	ldr	r3, [pc, #228]	; (800abe4 <Module_MessagingTask+0xf4>)
 800aafe:	469c      	mov	ip, r3
 800ab00:	4460      	add	r0, ip
 800ab02:	b283      	uxth	r3, r0
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d86a      	bhi.n	800abde <Module_MessagingTask+0xee>
 800ab08:	0098      	lsls	r0, r3, #2
 800ab0a:	4b37      	ldr	r3, [pc, #220]	; (800abe8 <Module_MessagingTask+0xf8>)
 800ab0c:	581b      	ldr	r3, [r3, r0]
 800ab0e:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab10:	1e4f      	subs	r7, r1, #1
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ab12:	4836      	ldr	r0, [pc, #216]	; (800abec <Module_MessagingTask+0xfc>)
 800ab14:	00fd      	lsls	r5, r7, #3
 800ab16:	1bee      	subs	r6, r5, r7
 800ab18:	00f6      	lsls	r6, r6, #3
 800ab1a:	1986      	adds	r6, r0, r6
 800ab1c:	1931      	adds	r1, r6, r4
 800ab1e:	798b      	ldrb	r3, [r1, #6]
 800ab20:	061b      	lsls	r3, r3, #24
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 16)
 800ab22:	79ca      	ldrb	r2, [r1, #7]
 800ab24:	0412      	lsls	r2, r2, #16
 800ab26:	189b      	adds	r3, r3, r2
				+ cMessage[port - 1][9 + shift];
 800ab28:	7a4a      	ldrb	r2, [r1, #9]
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ab2a:	189b      	adds	r3, r3, r2
				+ ((uint32_t) cMessage[port - 1][8 + shift] << 8)
 800ab2c:	7a0a      	ldrb	r2, [r1, #8]
 800ab2e:	0212      	lsls	r2, r2, #8
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ab30:	4698      	mov	r8, r3
 800ab32:	4490      	add	r8, r2
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab34:	788a      	ldrb	r2, [r1, #2]
 800ab36:	0612      	lsls	r2, r2, #24
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 16)
 800ab38:	78cb      	ldrb	r3, [r1, #3]
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	469c      	mov	ip, r3
 800ab3e:	4462      	add	r2, ip
				+ cMessage[port - 1][5 + shift];
 800ab40:	794b      	ldrb	r3, [r1, #5]
 800ab42:	469c      	mov	ip, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab44:	4462      	add	r2, ip
				+ ((uint32_t) cMessage[port - 1][4 + shift] << 8)
 800ab46:	7909      	ldrb	r1, [r1, #4]
 800ab48:	0209      	lsls	r1, r1, #8
		period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab4a:	1852      	adds	r2, r2, r1
		StreamVToPort(cMessage[port - 1][1 + shift],
 800ab4c:	5d31      	ldrb	r1, [r6, r4]
 800ab4e:	1934      	adds	r4, r6, r4
 800ab50:	7860      	ldrb	r0, [r4, #1]
 800ab52:	4643      	mov	r3, r8
 800ab54:	f7ff ff3c 	bl	800a9d0 <StreamVToPort>
	Module_Status result = H2AR3_OK;
 800ab58:	2000      	movs	r0, #0
}
 800ab5a:	b002      	add	sp, #8
 800ab5c:	bc04      	pop	{r2}
 800ab5e:	4690      	mov	r8, r2
 800ab60:	bdf0      	pop	{r4, r5, r6, r7, pc}
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab62:	1e4f      	subs	r7, r1, #1
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ab64:	4821      	ldr	r0, [pc, #132]	; (800abec <Module_MessagingTask+0xfc>)
 800ab66:	00fd      	lsls	r5, r7, #3
 800ab68:	1bee      	subs	r6, r5, r7
 800ab6a:	00f6      	lsls	r6, r6, #3
 800ab6c:	1986      	adds	r6, r0, r6
 800ab6e:	1931      	adds	r1, r6, r4
 800ab70:	798b      	ldrb	r3, [r1, #6]
 800ab72:	061b      	lsls	r3, r3, #24
						+ ((uint32_t) cMessage[port - 1][7 + shift] << 16)
 800ab74:	79ca      	ldrb	r2, [r1, #7]
 800ab76:	0412      	lsls	r2, r2, #16
 800ab78:	189b      	adds	r3, r3, r2
						+ cMessage[port - 1][9 + shift];
 800ab7a:	7a4a      	ldrb	r2, [r1, #9]
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ab7c:	189b      	adds	r3, r3, r2
						+ ((uint32_t) cMessage[port - 1][8 + shift] << 8)
 800ab7e:	7a0a      	ldrb	r2, [r1, #8]
 800ab80:	0212      	lsls	r2, r2, #8
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24)
 800ab82:	4698      	mov	r8, r3
 800ab84:	4490      	add	r8, r2
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab86:	788a      	ldrb	r2, [r1, #2]
 800ab88:	0612      	lsls	r2, r2, #24
						+ ((uint32_t) cMessage[port - 1][3 + shift] << 16)
 800ab8a:	78cb      	ldrb	r3, [r1, #3]
 800ab8c:	041b      	lsls	r3, r3, #16
 800ab8e:	469c      	mov	ip, r3
 800ab90:	4462      	add	r2, ip
						+ cMessage[port - 1][5 + shift];
 800ab92:	794b      	ldrb	r3, [r1, #5]
 800ab94:	469c      	mov	ip, r3
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab96:	4462      	add	r2, ip
						+ ((uint32_t) cMessage[port - 1][4 + shift] << 8)
 800ab98:	7909      	ldrb	r1, [r1, #4]
 800ab9a:	0209      	lsls	r1, r1, #8
				period = ((uint32_t) cMessage[port - 1][2 + shift] << 24)
 800ab9c:	1852      	adds	r2, r2, r1
				StreamAToPort(cMessage[port - 1][1 + shift],
 800ab9e:	5d31      	ldrb	r1, [r6, r4]
 800aba0:	1934      	adds	r4, r6, r4
 800aba2:	7860      	ldrb	r0, [r4, #1]
 800aba4:	4643      	mov	r3, r8
 800aba6:	f7ff ff5b 	bl	800aa60 <StreamAToPort>
	Module_Status result = H2AR3_OK;
 800abaa:	2000      	movs	r0, #0
		break;
 800abac:	e7d5      	b.n	800ab5a <Module_MessagingTask+0x6a>
		global_mode = IDLE_CASE;
 800abae:	4b10      	ldr	r3, [pc, #64]	; (800abf0 <Module_MessagingTask+0x100>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
		xTimerStop(xTimer, portMAX_DELAY);
 800abb4:	4b0f      	ldr	r3, [pc, #60]	; (800abf4 <Module_MessagingTask+0x104>)
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	2301      	movs	r3, #1
 800abba:	425b      	negs	r3, r3
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	2300      	movs	r3, #0
 800abc0:	2103      	movs	r1, #3
 800abc2:	f005 f8f3 	bl	800fdac <xTimerGenericCommand>
	Module_Status result = H2AR3_OK;
 800abc6:	2000      	movs	r0, #0
		break;
 800abc8:	e7c7      	b.n	800ab5a <Module_MessagingTask+0x6a>
		SampleV(&H2AR3_Read_V);
 800abca:	480b      	ldr	r0, [pc, #44]	; (800abf8 <Module_MessagingTask+0x108>)
 800abcc:	f7ff fec2 	bl	800a954 <SampleV>
	Module_Status result = H2AR3_OK;
 800abd0:	2000      	movs	r0, #0
		break;
 800abd2:	e7c2      	b.n	800ab5a <Module_MessagingTask+0x6a>
		SampleA(&H2AR3_Read_A);
 800abd4:	4809      	ldr	r0, [pc, #36]	; (800abfc <Module_MessagingTask+0x10c>)
 800abd6:	f7ff fec4 	bl	800a962 <SampleA>
	Module_Status result = H2AR3_OK;
 800abda:	2000      	movs	r0, #0
		break;
 800abdc:	e7bd      	b.n	800ab5a <Module_MessagingTask+0x6a>
		result = H2AR3_ERR_UnknownMessage;
 800abde:	2001      	movs	r0, #1
 800abe0:	e7bb      	b.n	800ab5a <Module_MessagingTask+0x6a>
 800abe2:	46c0      	nop			; (mov r8, r8)
 800abe4:	fffff7cc 	.word	0xfffff7cc
 800abe8:	08019df0 	.word	0x08019df0
 800abec:	20000544 	.word	0x20000544
 800abf0:	200063cc 	.word	0x200063cc
 800abf4:	20000ff0 	.word	0x20000ff0
 800abf8:	20006500 	.word	0x20006500
 800abfc:	20006504 	.word	0x20006504

0800ac00 <Stop>:
uint8_t Stop(void) {
 800ac00:	b500      	push	{lr}
 800ac02:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	4a06      	ldr	r2, [pc, #24]	; (800ac20 <Stop+0x20>)
 800ac08:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800ac0a:	4a06      	ldr	r2, [pc, #24]	; (800ac24 <Stop+0x24>)
 800ac0c:	6810      	ldr	r0, [r2, #0]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	2200      	movs	r2, #0
 800ac12:	2103      	movs	r1, #3
 800ac14:	f005 f8ca 	bl	800fdac <xTimerGenericCommand>
}
 800ac18:	2000      	movs	r0, #0
 800ac1a:	b003      	add	sp, #12
 800ac1c:	bd00      	pop	{pc}
 800ac1e:	46c0      	nop			; (mov r8, r8)
 800ac20:	200063cc 	.word	0x200063cc
 800ac24:	20000ff0 	.word	0x20000ff0

0800ac28 <stopCommand>:

/*-----------------------------------------------------------*/

static portBASE_TYPE stopCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800ac28:	b510      	push	{r4, lr}
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void) xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	volt_buffer = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <stopCommand+0x14>)
 800ac2e:	6013      	str	r3, [r2, #0]
	amp_buffer = 0;
 800ac30:	4a03      	ldr	r2, [pc, #12]	; (800ac40 <stopCommand+0x18>)
 800ac32:	6013      	str	r3, [r2, #0]
	Stop();
 800ac34:	f7ff ffe4 	bl	800ac00 <Stop>

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 800ac38:	2000      	movs	r0, #0
 800ac3a:	bd10      	pop	{r4, pc}
 800ac3c:	20006484 	.word	0x20006484
 800ac40:	20006354 	.word	0x20006354

0800ac44 <StreamVToCLI>:
{
 800ac44:	b510      	push	{r4, lr}
 800ac46:	b082      	sub	sp, #8
	global_period=Period;
 800ac48:	4b1a      	ldr	r3, [pc, #104]	; (800acb4 <StreamVToCLI+0x70>)
 800ac4a:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800ac4c:	4b1a      	ldr	r3, [pc, #104]	; (800acb8 <StreamVToCLI+0x74>)
 800ac4e:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800ac50:	2301      	movs	r3, #1
 800ac52:	4a1a      	ldr	r2, [pc, #104]	; (800acbc <StreamVToCLI+0x78>)
 800ac54:	7013      	strb	r3, [r2, #0]
	unit=Volt;
 800ac56:	4a1a      	ldr	r2, [pc, #104]	; (800acc0 <StreamVToCLI+0x7c>)
 800ac58:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800ac5a:	1e4b      	subs	r3, r1, #1
 800ac5c:	3303      	adds	r3, #3
 800ac5e:	d909      	bls.n	800ac74 <StreamVToCLI+0x30>
	if (global_timeout > 0)
 800ac60:	4b15      	ldr	r3, [pc, #84]	; (800acb8 <StreamVToCLI+0x74>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <StreamVToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800ac68:	4b16      	ldr	r3, [pc, #88]	; (800acc4 <StreamVToCLI+0x80>)
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	701a      	strb	r2, [r3, #0]
}
 800ac6e:	2000      	movs	r0, #0
 800ac70:	b002      	add	sp, #8
 800ac72:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800ac74:	0148      	lsls	r0, r1, #5
 800ac76:	1a40      	subs	r0, r0, r1
 800ac78:	0080      	lsls	r0, r0, #2
 800ac7a:	1840      	adds	r0, r0, r1
 800ac7c:	00c0      	lsls	r0, r0, #3
 800ac7e:	21fa      	movs	r1, #250	; 0xfa
 800ac80:	0089      	lsls	r1, r1, #2
 800ac82:	f7f5 fa5b 	bl	800013c <__udivsi3>
 800ac86:	0001      	movs	r1, r0
 800ac88:	4b0f      	ldr	r3, [pc, #60]	; (800acc8 <StreamVToCLI+0x84>)
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	23ff      	movs	r3, #255	; 0xff
 800ac8e:	2200      	movs	r2, #0
 800ac90:	480e      	ldr	r0, [pc, #56]	; (800accc <StreamVToCLI+0x88>)
 800ac92:	f005 f86d 	bl	800fd70 <xTimerCreate>
 800ac96:	0004      	movs	r4, r0
 800ac98:	4b0d      	ldr	r3, [pc, #52]	; (800acd0 <StreamVToCLI+0x8c>)
 800ac9a:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800ac9c:	f004 fb34 	bl	800f308 <xTaskGetTickCount>
 800aca0:	0002      	movs	r2, r0
 800aca2:	2301      	movs	r3, #1
 800aca4:	425b      	negs	r3, r3
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	2101      	movs	r1, #1
 800acac:	0020      	movs	r0, r4
 800acae:	f005 f87d 	bl	800fdac <xTimerGenericCommand>
 800acb2:	e7d5      	b.n	800ac60 <StreamVToCLI+0x1c>
 800acb4:	20006578 	.word	0x20006578
 800acb8:	200065f4 	.word	0x200065f4
 800acbc:	200063cc 	.word	0x200063cc
 800acc0:	200000a4 	.word	0x200000a4
 800acc4:	20000fe8 	.word	0x20000fe8
 800acc8:	0800a04d 	.word	0x0800a04d
 800accc:	08019e38 	.word	0x08019e38
 800acd0:	20000ff0 	.word	0x20000ff0

0800acd4 <StreamAToCLI>:
{
 800acd4:	b510      	push	{r4, lr}
 800acd6:	b082      	sub	sp, #8
	global_period=Period;
 800acd8:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <StreamAToCLI+0x74>)
 800acda:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800acdc:	4b1b      	ldr	r3, [pc, #108]	; (800ad4c <StreamAToCLI+0x78>)
 800acde:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800ace0:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <StreamAToCLI+0x7c>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
	unit=Amp;
 800ace6:	4b1b      	ldr	r3, [pc, #108]	; (800ad54 <StreamAToCLI+0x80>)
 800ace8:	3201      	adds	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800acec:	1e4b      	subs	r3, r1, #1
 800acee:	3303      	adds	r3, #3
 800acf0:	d909      	bls.n	800ad06 <StreamAToCLI+0x32>
	if (global_timeout > 0)
 800acf2:	4b16      	ldr	r3, [pc, #88]	; (800ad4c <StreamAToCLI+0x78>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <StreamAToCLI+0x2c>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800acfa:	4b17      	ldr	r3, [pc, #92]	; (800ad58 <StreamAToCLI+0x84>)
 800acfc:	2201      	movs	r2, #1
 800acfe:	701a      	strb	r2, [r3, #0]
}
 800ad00:	2000      	movs	r0, #0
 800ad02:	b002      	add	sp, #8
 800ad04:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800ad06:	0148      	lsls	r0, r1, #5
 800ad08:	1a40      	subs	r0, r0, r1
 800ad0a:	0080      	lsls	r0, r0, #2
 800ad0c:	1840      	adds	r0, r0, r1
 800ad0e:	00c0      	lsls	r0, r0, #3
 800ad10:	21fa      	movs	r1, #250	; 0xfa
 800ad12:	0089      	lsls	r1, r1, #2
 800ad14:	f7f5 fa12 	bl	800013c <__udivsi3>
 800ad18:	0001      	movs	r1, r0
 800ad1a:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <StreamAToCLI+0x88>)
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	23ff      	movs	r3, #255	; 0xff
 800ad20:	2200      	movs	r2, #0
 800ad22:	480f      	ldr	r0, [pc, #60]	; (800ad60 <StreamAToCLI+0x8c>)
 800ad24:	f005 f824 	bl	800fd70 <xTimerCreate>
 800ad28:	0004      	movs	r4, r0
 800ad2a:	4b0e      	ldr	r3, [pc, #56]	; (800ad64 <StreamAToCLI+0x90>)
 800ad2c:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800ad2e:	f004 faeb 	bl	800f308 <xTaskGetTickCount>
 800ad32:	0002      	movs	r2, r0
 800ad34:	2301      	movs	r3, #1
 800ad36:	425b      	negs	r3, r3
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	0020      	movs	r0, r4
 800ad40:	f005 f834 	bl	800fdac <xTimerGenericCommand>
 800ad44:	e7d5      	b.n	800acf2 <StreamAToCLI+0x1e>
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	20006578 	.word	0x20006578
 800ad4c:	200065f4 	.word	0x200065f4
 800ad50:	200063cc 	.word	0x200063cc
 800ad54:	200000a4 	.word	0x200000a4
 800ad58:	20000fe8 	.word	0x20000fe8
 800ad5c:	0800a04d 	.word	0x0800a04d
 800ad60:	08019e38 	.word	0x08019e38
 800ad64:	20000ff0 	.word	0x20000ff0

0800ad68 <demoCommand>:
	return pdFALSE;
}
/*-----------------------------------------------------------*/

portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800ad68:	b530      	push	{r4, r5, lr}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	0005      	movs	r5, r0



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800ad6e:	222d      	movs	r2, #45	; 0x2d
 800ad70:	491e      	ldr	r1, [pc, #120]	; (800adec <demoCommand+0x84>)
 800ad72:	f008 fd82 	bl	801387a <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800ad76:	0028      	movs	r0, r5
 800ad78:	f7f5 f9ce 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800ad7c:	b282      	uxth	r2, r0
 800ad7e:	4b1c      	ldr	r3, [pc, #112]	; (800adf0 <demoCommand+0x88>)
 800ad80:	7818      	ldrb	r0, [r3, #0]
 800ad82:	2301      	movs	r3, #1
 800ad84:	425b      	negs	r3, r3
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	3333      	adds	r3, #51	; 0x33
 800ad8a:	0029      	movs	r1, r5
 800ad8c:	f003 fa0c 	bl	800e1a8 <writePxMutex>
		switch (unit) {
 800ad90:	4b18      	ldr	r3, [pc, #96]	; (800adf4 <demoCommand+0x8c>)
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d007      	beq.n	800ada8 <demoCommand+0x40>
 800ad98:	2b02      	cmp	r3, #2
 800ad9a:	d020      	beq.n	800adde <demoCommand+0x76>
			break;
		case Amp:
			StreamAToCLI(500, 10000);
			break;
		default:
			StreamVToCLI(500, 10000);
 800ad9c:	20fa      	movs	r0, #250	; 0xfa
 800ad9e:	4916      	ldr	r1, [pc, #88]	; (800adf8 <demoCommand+0x90>)
 800ada0:	0040      	lsls	r0, r0, #1
 800ada2:	f7ff ff4f 	bl	800ac44 <StreamVToCLI>
 800ada6:	e004      	b.n	800adb2 <demoCommand+0x4a>
			StreamVToCLI(500, 10000);
 800ada8:	20fa      	movs	r0, #250	; 0xfa
 800adaa:	4913      	ldr	r1, [pc, #76]	; (800adf8 <demoCommand+0x90>)
 800adac:	0040      	lsls	r0, r0, #1
 800adae:	f7ff ff49 	bl	800ac44 <StreamVToCLI>
		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800adb2:	4b12      	ldr	r3, [pc, #72]	; (800adfc <demoCommand+0x94>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d006      	beq.n	800adc8 <demoCommand+0x60>
 800adba:	4c10      	ldr	r4, [pc, #64]	; (800adfc <demoCommand+0x94>)
			Delay_ms(1);
 800adbc:	2001      	movs	r0, #1
 800adbe:	f005 faef 	bl	80103a0 <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800adc2:	7823      	ldrb	r3, [r4, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d1f9      	bne.n	800adbc <demoCommand+0x54>
	if (result != H2AR3_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800adc8:	0028      	movs	r0, r5
 800adca:	f7f5 f9a5 	bl	8000118 <strlen>
 800adce:	0002      	movs	r2, r0
 800add0:	2100      	movs	r1, #0
 800add2:	0028      	movs	r0, r5
 800add4:	f008 fd5a 	bl	801388c <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800add8:	2000      	movs	r0, #0
 800adda:	b003      	add	sp, #12
 800addc:	bd30      	pop	{r4, r5, pc}
			StreamAToCLI(500, 10000);
 800adde:	20fa      	movs	r0, #250	; 0xfa
 800ade0:	4905      	ldr	r1, [pc, #20]	; (800adf8 <demoCommand+0x90>)
 800ade2:	0040      	lsls	r0, r0, #1
 800ade4:	f7ff ff76 	bl	800acd4 <StreamAToCLI>
			break;
 800ade8:	e7e3      	b.n	800adb2 <demoCommand+0x4a>
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	08019e60 	.word	0x08019e60
 800adf0:	200002b0 	.word	0x200002b0
 800adf4:	200000a4 	.word	0x200000a4
 800adf8:	00002710 	.word	0x00002710
 800adfc:	20000fe8 	.word	0x20000fe8

0800ae00 <streamCommand>:
{
 800ae00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae02:	b087      	sub	sp, #28
 800ae04:	0005      	movs	r5, r0
 800ae06:	9100      	str	r1, [sp, #0]
 800ae08:	0014      	movs	r4, r2
	*pcWriteBuffer = '\0';
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800ae0e:	9302      	str	r3, [sp, #8]
	portBASE_TYPE timeoutStrLen = 0;
 800ae10:	9303      	str	r3, [sp, #12]
	portBASE_TYPE portStrLen = 0;
 800ae12:	9304      	str	r3, [sp, #16]
	portBASE_TYPE modStrLen = 0;
 800ae14:	9305      	str	r3, [sp, #20]
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &periodStrLen);
 800ae16:	aa02      	add	r2, sp, #8
 800ae18:	2101      	movs	r1, #1
 800ae1a:	0020      	movs	r0, r4
 800ae1c:	f003 fc84 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800ae20:	0006      	movs	r6, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &timeoutStrLen);
 800ae22:	aa03      	add	r2, sp, #12
 800ae24:	2102      	movs	r1, #2
 800ae26:	0020      	movs	r0, r4
 800ae28:	f003 fc7e 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800ae2c:	0007      	movs	r7, r0
	if ((pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d02d      	beq.n	800ae8e <streamCommand+0x8e>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d02b      	beq.n	800ae8e <streamCommand+0x8e>
	*pPeriod = atoi(pPeriodMSStr);
 800ae36:	0030      	movs	r0, r6
 800ae38:	f008 fca7 	bl	801378a <atoi>
 800ae3c:	9001      	str	r0, [sp, #4]
	*pTimeout = atoi(pTimeoutMSStr);
 800ae3e:	0038      	movs	r0, r7
 800ae40:	f008 fca3 	bl	801378a <atoi>
 800ae44:	0007      	movs	r7, r0
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &portStrLen);
 800ae46:	aa04      	add	r2, sp, #16
 800ae48:	2103      	movs	r1, #3
 800ae4a:	0020      	movs	r0, r4
 800ae4c:	f003 fc6c 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800ae50:	0006      	movs	r6, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &modStrLen);
 800ae52:	aa05      	add	r2, sp, #20
 800ae54:	2104      	movs	r1, #4
 800ae56:	0020      	movs	r0, r4
 800ae58:	f003 fc66 	bl	800e728 <FreeRTOS_CLIGetParameter>
 800ae5c:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800ae5e:	d014      	beq.n	800ae8a <streamCommand+0x8a>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800ae60:	2e00      	cmp	r6, #0
 800ae62:	d014      	beq.n	800ae8e <streamCommand+0x8e>
	*pPort = atoi(pPortStr);
 800ae64:	0030      	movs	r0, r6
 800ae66:	f008 fc90 	bl	801378a <atoi>
 800ae6a:	b2c6      	uxtb	r6, r0
	*pModule = atoi(pModStr);
 800ae6c:	0020      	movs	r0, r4
 800ae6e:	f008 fc8c 	bl	801378a <atoi>
 800ae72:	b2c1      	uxtb	r1, r0
            if(unit == Volt)
 800ae74:	4b1a      	ldr	r3, [pc, #104]	; (800aee0 <streamCommand+0xe0>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
	*pPortOrCLI = false;
 800ae78:	2200      	movs	r2, #0
            if(unit == Volt)
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d126      	bne.n	800aecc <streamCommand+0xcc>
				StreamVToPort(port, module, period, timeout);
 800ae7e:	003b      	movs	r3, r7
 800ae80:	9a01      	ldr	r2, [sp, #4]
 800ae82:	0030      	movs	r0, r6
 800ae84:	f7ff fda4 	bl	800a9d0 <StreamVToPort>
 800ae88:	e022      	b.n	800aed0 <streamCommand+0xd0>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800ae8a:	2e00      	cmp	r6, #0
 800ae8c:	d012      	beq.n	800aeb4 <streamCommand+0xb4>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800ae8e:	4a15      	ldr	r2, [pc, #84]	; (800aee4 <streamCommand+0xe4>)
 800ae90:	9900      	ldr	r1, [sp, #0]
 800ae92:	0028      	movs	r0, r5
 800ae94:	f009 fa56 	bl	8014344 <sniprintf>
		return pdFALSE;
 800ae98:	e01f      	b.n	800aeda <streamCommand+0xda>
    		if (portOrCLI) {
 800ae9a:	2a00      	cmp	r2, #0
 800ae9c:	d004      	beq.n	800aea8 <streamCommand+0xa8>
    			StreamAToCLI(period, timeout);
 800ae9e:	0039      	movs	r1, r7
 800aea0:	9801      	ldr	r0, [sp, #4]
 800aea2:	f7ff ff17 	bl	800acd4 <StreamAToCLI>
 800aea6:	e013      	b.n	800aed0 <streamCommand+0xd0>
    			StreamAToPort(port, module, period, timeout);
 800aea8:	003b      	movs	r3, r7
 800aeaa:	9a01      	ldr	r2, [sp, #4]
 800aeac:	0030      	movs	r0, r6
 800aeae:	f7ff fdd7 	bl	800aa60 <StreamAToPort>
 800aeb2:	e00d      	b.n	800aed0 <streamCommand+0xd0>
            if(unit == Volt)
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <streamCommand+0xe0>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d104      	bne.n	800aec6 <streamCommand+0xc6>
				StreamVToCLI(period, timeout);
 800aebc:	0039      	movs	r1, r7
 800aebe:	9801      	ldr	r0, [sp, #4]
 800aec0:	f7ff fec0 	bl	800ac44 <StreamVToCLI>
 800aec4:	e004      	b.n	800aed0 <streamCommand+0xd0>
	*pPortOrCLI = true;
 800aec6:	2201      	movs	r2, #1
	uint8_t module = 0;
 800aec8:	2100      	movs	r1, #0
	uint8_t port = 0;
 800aeca:	000e      	movs	r6, r1
            else if(unit == Amp)
 800aecc:	2b02      	cmp	r3, #2
 800aece:	d0e4      	beq.n	800ae9a <streamCommand+0x9a>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800aed0:	4a05      	ldr	r2, [pc, #20]	; (800aee8 <streamCommand+0xe8>)
 800aed2:	9900      	ldr	r1, [sp, #0]
 800aed4:	0028      	movs	r0, r5
 800aed6:	f009 fa35 	bl	8014344 <sniprintf>
}
 800aeda:	2000      	movs	r0, #0
 800aedc:	b007      	add	sp, #28
 800aede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aee0:	200000a4 	.word	0x200000a4
 800aee4:	0801a004 	.word	0x0801a004
 800aee8:	0801961c 	.word	0x0801961c

0800aeec <ADC_Select_CH7>:
 Description   : source file Contains Peripheral ADC setup .
 */
/* Includes ------------------------------------------------------------------*/
#include <H2AR3_adc.h>

void ADC_Select_CH7(void) {
 800aeec:	b500      	push	{lr}
 800aeee:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800aef0:	2307      	movs	r3, #7
 800aef2:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800aef4:	2380      	movs	r3, #128	; 0x80
 800aef6:	015b      	lsls	r3, r3, #5
 800aef8:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800aefa:	2304      	movs	r3, #4
 800aefc:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800aefe:	a901      	add	r1, sp, #4
 800af00:	4802      	ldr	r0, [pc, #8]	; (800af0c <ADC_Select_CH7+0x20>)
 800af02:	f005 fccb 	bl	801089c <HAL_ADC_ConfigChannel>

	}

}
 800af06:	b005      	add	sp, #20
 800af08:	bd00      	pop	{pc}
 800af0a:	46c0      	nop			; (mov r8, r8)
 800af0c:	20006630 	.word	0x20006630

0800af10 <ADC_Deselect_CH7>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH7(void) {
 800af10:	b500      	push	{lr}
 800af12:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800af14:	2307      	movs	r3, #7
 800af16:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800af18:	4b04      	ldr	r3, [pc, #16]	; (800af2c <ADC_Deselect_CH7+0x1c>)
 800af1a:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800af1c:	2304      	movs	r3, #4
 800af1e:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800af20:	a901      	add	r1, sp, #4
 800af22:	4803      	ldr	r0, [pc, #12]	; (800af30 <ADC_Deselect_CH7+0x20>)
 800af24:	f005 fcba 	bl	801089c <HAL_ADC_ConfigChannel>

	}
}
 800af28:	b005      	add	sp, #20
 800af2a:	bd00      	pop	{pc}
 800af2c:	00001001 	.word	0x00001001
 800af30:	20006630 	.word	0x20006630

0800af34 <ADC_Select_CH9>:


void ADC_Select_CH9(void) {
 800af34:	b500      	push	{lr}
 800af36:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800af38:	2309      	movs	r3, #9
 800af3a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800af3c:	2380      	movs	r3, #128	; 0x80
 800af3e:	015b      	lsls	r3, r3, #5
 800af40:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800af42:	2304      	movs	r3, #4
 800af44:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800af46:	a901      	add	r1, sp, #4
 800af48:	4802      	ldr	r0, [pc, #8]	; (800af54 <ADC_Select_CH9+0x20>)
 800af4a:	f005 fca7 	bl	801089c <HAL_ADC_ConfigChannel>

	}

}
 800af4e:	b005      	add	sp, #20
 800af50:	bd00      	pop	{pc}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	20006630 	.word	0x20006630

0800af58 <ADC_Deselect_CH9>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH9(void) {
 800af58:	b500      	push	{lr}
 800af5a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800af5c:	2309      	movs	r3, #9
 800af5e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800af60:	4b04      	ldr	r3, [pc, #16]	; (800af74 <ADC_Deselect_CH9+0x1c>)
 800af62:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800af64:	2304      	movs	r3, #4
 800af66:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800af68:	a901      	add	r1, sp, #4
 800af6a:	4803      	ldr	r0, [pc, #12]	; (800af78 <ADC_Deselect_CH9+0x20>)
 800af6c:	f005 fc96 	bl	801089c <HAL_ADC_ConfigChannel>

	}
}
 800af70:	b005      	add	sp, #20
 800af72:	bd00      	pop	{pc}
 800af74:	00001001 	.word	0x00001001
 800af78:	20006630 	.word	0x20006630

0800af7c <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800af7c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800af7e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af80:	2300      	movs	r3, #0
 800af82:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800af84:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800af86:	2280      	movs	r2, #128	; 0x80
 800af88:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af8a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af8c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800af8e:	3320      	adds	r3, #32
 800af90:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800af92:	2380      	movs	r3, #128	; 0x80
 800af94:	019b      	lsls	r3, r3, #6
 800af96:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800af98:	f005 fec2 	bl	8010d20 <HAL_DMA_Init>
}
 800af9c:	bd10      	pop	{r4, pc}

0800af9e <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800af9e:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800afa0:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800afa2:	2310      	movs	r3, #16
 800afa4:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800afa6:	2300      	movs	r3, #0
 800afa8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800afaa:	2280      	movs	r2, #128	; 0x80
 800afac:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800afae:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800afb0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800afb2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	019b      	lsls	r3, r3, #6
 800afb8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800afba:	f005 feb1 	bl	8010d20 <HAL_DMA_Init>
}
 800afbe:	bd10      	pop	{r4, pc}

0800afc0 <DMA_Init>:
{
 800afc0:	b510      	push	{r4, lr}
 800afc2:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800afc4:	4b18      	ldr	r3, [pc, #96]	; (800b028 <DMA_Init+0x68>)
 800afc6:	6959      	ldr	r1, [r3, #20]
 800afc8:	2201      	movs	r2, #1
 800afca:	4311      	orrs	r1, r2
 800afcc:	6159      	str	r1, [r3, #20]
 800afce:	6959      	ldr	r1, [r3, #20]
 800afd0:	400a      	ands	r2, r1
 800afd2:	9200      	str	r2, [sp, #0]
 800afd4:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800afd6:	6959      	ldr	r1, [r3, #20]
 800afd8:	2202      	movs	r2, #2
 800afda:	4311      	orrs	r1, r2
 800afdc:	6159      	str	r1, [r3, #20]
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	401a      	ands	r2, r3
 800afe2:	9201      	str	r2, [sp, #4]
 800afe4:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800afe6:	4c11      	ldr	r4, [pc, #68]	; (800b02c <DMA_Init+0x6c>)
 800afe8:	4911      	ldr	r1, [pc, #68]	; (800b030 <DMA_Init+0x70>)
 800afea:	0020      	movs	r0, r4
 800afec:	f7ff ffc6 	bl	800af7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800aff0:	0020      	movs	r0, r4
 800aff2:	3038      	adds	r0, #56	; 0x38
 800aff4:	490f      	ldr	r1, [pc, #60]	; (800b034 <DMA_Init+0x74>)
 800aff6:	f7ff ffc1 	bl	800af7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800affa:	0020      	movs	r0, r4
 800affc:	3070      	adds	r0, #112	; 0x70
 800affe:	490e      	ldr	r1, [pc, #56]	; (800b038 <DMA_Init+0x78>)
 800b000:	f7ff ffbc 	bl	800af7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b004:	4c0d      	ldr	r4, [pc, #52]	; (800b03c <DMA_Init+0x7c>)
 800b006:	490e      	ldr	r1, [pc, #56]	; (800b040 <DMA_Init+0x80>)
 800b008:	0020      	movs	r0, r4
 800b00a:	f7ff ffc8 	bl	800af9e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b00e:	0020      	movs	r0, r4
 800b010:	3038      	adds	r0, #56	; 0x38
 800b012:	490c      	ldr	r1, [pc, #48]	; (800b044 <DMA_Init+0x84>)
 800b014:	f7ff ffc3 	bl	800af9e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b018:	0020      	movs	r0, r4
 800b01a:	3070      	adds	r0, #112	; 0x70
 800b01c:	490a      	ldr	r1, [pc, #40]	; (800b048 <DMA_Init+0x88>)
 800b01e:	f7ff ffbe 	bl	800af9e <DMA_MSG_TX_CH_Init>
}
 800b022:	b002      	add	sp, #8
 800b024:	bd10      	pop	{r4, pc}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	40021000 	.word	0x40021000
 800b02c:	20000ff4 	.word	0x20000ff4
 800b030:	40020008 	.word	0x40020008
 800b034:	40020030 	.word	0x40020030
 800b038:	40020058 	.word	0x40020058
 800b03c:	20001144 	.word	0x20001144
 800b040:	4002001c 	.word	0x4002001c
 800b044:	40020044 	.word	0x40020044
 800b048:	40020080 	.word	0x40020080

0800b04c <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b04c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b04e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b050:	2300      	movs	r3, #0
 800b052:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b054:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b056:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b058:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b05a:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b05c:	3320      	adds	r3, #32
 800b05e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b060:	2380      	movs	r3, #128	; 0x80
 800b062:	015b      	lsls	r3, r3, #5
 800b064:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b066:	f005 fe5b 	bl	8010d20 <HAL_DMA_Init>
}
 800b06a:	bd10      	pop	{r4, pc}

0800b06c <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800b06c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800b06e:	1e44      	subs	r4, r0, #1
 800b070:	00e5      	lsls	r5, r4, #3
 800b072:	1b28      	subs	r0, r5, r4
 800b074:	00c0      	lsls	r0, r0, #3
 800b076:	4e07      	ldr	r6, [pc, #28]	; (800b094 <StopStreamDMA+0x28>)
 800b078:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800b07a:	f005 feb0 	bl	8010dde <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800b07e:	1b2d      	subs	r5, r5, r4
 800b080:	00ed      	lsls	r5, r5, #3
 800b082:	59aa      	ldr	r2, [r5, r6]
 800b084:	2300      	movs	r3, #0
 800b086:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800b088:	00a4      	lsls	r4, r4, #2
 800b08a:	4a03      	ldr	r2, [pc, #12]	; (800b098 <StopStreamDMA+0x2c>)
 800b08c:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800b08e:	4a03      	ldr	r2, [pc, #12]	; (800b09c <StopStreamDMA+0x30>)
 800b090:	50a3      	str	r3, [r4, r2]

}
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	200011ec 	.word	0x200011ec
 800b098:	20000cc0 	.word	0x20000cc0
 800b09c:	20000cd8 	.word	0x20000cd8

0800b0a0 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800b0a0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800b0a2:	1e45      	subs	r5, r0, #1
 800b0a4:	00ec      	lsls	r4, r5, #3
 800b0a6:	1b60      	subs	r0, r4, r5
 800b0a8:	00c0      	lsls	r0, r0, #3
 800b0aa:	4e05      	ldr	r6, [pc, #20]	; (800b0c0 <StopMsgDMA+0x20>)
 800b0ac:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800b0ae:	f005 fe96 	bl	8010dde <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800b0b2:	1b64      	subs	r4, r4, r5
 800b0b4:	00e4      	lsls	r4, r4, #3
 800b0b6:	59a3      	ldr	r3, [r4, r6]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	605a      	str	r2, [r3, #4]
}
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
 800b0be:	46c0      	nop			; (mov r8, r8)
 800b0c0:	20000ff4 	.word	0x20000ff4

0800b0c4 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800b0c4:	b510      	push	{r4, lr}
 800b0c6:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800b0c8:	f7ff ffea 	bl	800b0a0 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800b0cc:	3c01      	subs	r4, #1
 800b0ce:	00e0      	lsls	r0, r4, #3
 800b0d0:	1b02      	subs	r2, r0, r4
 800b0d2:	00d2      	lsls	r2, r2, #3
 800b0d4:	4903      	ldr	r1, [pc, #12]	; (800b0e4 <SwitchMsgDMAToStream+0x20>)
 800b0d6:	5851      	ldr	r1, [r2, r1]
 800b0d8:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <SwitchMsgDMAToStream+0x24>)
 800b0da:	18d0      	adds	r0, r2, r3
 800b0dc:	f7ff ffb6 	bl	800b04c <DMA_STREAM_CH_Init>
}
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	46c0      	nop			; (mov r8, r8)
 800b0e4:	20000ff4 	.word	0x20000ff4
 800b0e8:	200011ec 	.word	0x200011ec

0800b0ec <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b0ec:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b0ee:	6803      	ldr	r3, [r0, #0]
 800b0f0:	4a20      	ldr	r2, [pc, #128]	; (800b174 <SetupDMAInterrupts+0x88>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d020      	beq.n	800b138 <SetupDMAInterrupts+0x4c>
 800b0f6:	d827      	bhi.n	800b148 <SetupDMAInterrupts+0x5c>
 800b0f8:	4a1f      	ldr	r2, [pc, #124]	; (800b178 <SetupDMAInterrupts+0x8c>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d00e      	beq.n	800b11c <SetupDMAInterrupts+0x30>
 800b0fe:	d815      	bhi.n	800b12c <SetupDMAInterrupts+0x40>
 800b100:	4a1e      	ldr	r2, [pc, #120]	; (800b17c <SetupDMAInterrupts+0x90>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d107      	bne.n	800b116 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b106:	2200      	movs	r2, #0
 800b108:	2009      	movs	r0, #9
 800b10a:	f005 fc6b 	bl	80109e4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b10e:	2009      	movs	r0, #9
 800b110:	f005 fc9c 	bl	8010a4c <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b114:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b116:	4a1a      	ldr	r2, [pc, #104]	; (800b180 <SetupDMAInterrupts+0x94>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d1fb      	bne.n	800b114 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b11c:	2200      	movs	r2, #0
 800b11e:	200a      	movs	r0, #10
 800b120:	f005 fc60 	bl	80109e4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b124:	200a      	movs	r0, #10
 800b126:	f005 fc91 	bl	8010a4c <HAL_NVIC_EnableIRQ>
			break;
 800b12a:	e7f3      	b.n	800b114 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b12c:	4a15      	ldr	r2, [pc, #84]	; (800b184 <SetupDMAInterrupts+0x98>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d002      	beq.n	800b138 <SetupDMAInterrupts+0x4c>
 800b132:	4a15      	ldr	r2, [pc, #84]	; (800b188 <SetupDMAInterrupts+0x9c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d1ed      	bne.n	800b114 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b138:	2200      	movs	r2, #0
 800b13a:	200b      	movs	r0, #11
 800b13c:	f005 fc52 	bl	80109e4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b140:	200b      	movs	r0, #11
 800b142:	f005 fc83 	bl	8010a4c <HAL_NVIC_EnableIRQ>
}
 800b146:	e7e5      	b.n	800b114 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b148:	4a10      	ldr	r2, [pc, #64]	; (800b18c <SetupDMAInterrupts+0xa0>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d0e6      	beq.n	800b11c <SetupDMAInterrupts+0x30>
 800b14e:	d909      	bls.n	800b164 <SetupDMAInterrupts+0x78>
 800b150:	4a0f      	ldr	r2, [pc, #60]	; (800b190 <SetupDMAInterrupts+0xa4>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d0f0      	beq.n	800b138 <SetupDMAInterrupts+0x4c>
 800b156:	4a0f      	ldr	r2, [pc, #60]	; (800b194 <SetupDMAInterrupts+0xa8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d0ed      	beq.n	800b138 <SetupDMAInterrupts+0x4c>
 800b15c:	4a0e      	ldr	r2, [pc, #56]	; (800b198 <SetupDMAInterrupts+0xac>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d1d8      	bne.n	800b114 <SetupDMAInterrupts+0x28>
 800b162:	e7e9      	b.n	800b138 <SetupDMAInterrupts+0x4c>
 800b164:	4a0d      	ldr	r2, [pc, #52]	; (800b19c <SetupDMAInterrupts+0xb0>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d0e6      	beq.n	800b138 <SetupDMAInterrupts+0x4c>
 800b16a:	4a0d      	ldr	r2, [pc, #52]	; (800b1a0 <SetupDMAInterrupts+0xb4>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d0d5      	beq.n	800b11c <SetupDMAInterrupts+0x30>
 800b170:	e7d0      	b.n	800b114 <SetupDMAInterrupts+0x28>
 800b172:	46c0      	nop			; (mov r8, r8)
 800b174:	4002006c 	.word	0x4002006c
 800b178:	40020030 	.word	0x40020030
 800b17c:	40020008 	.word	0x40020008
 800b180:	4002001c 	.word	0x4002001c
 800b184:	40020044 	.word	0x40020044
 800b188:	40020058 	.word	0x40020058
 800b18c:	4002041c 	.word	0x4002041c
 800b190:	40020444 	.word	0x40020444
 800b194:	40020458 	.word	0x40020458
 800b198:	40020430 	.word	0x40020430
 800b19c:	40020080 	.word	0x40020080
 800b1a0:	40020408 	.word	0x40020408

0800b1a4 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b1a4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b1a6:	6803      	ldr	r3, [r0, #0]
 800b1a8:	4a1a      	ldr	r2, [pc, #104]	; (800b214 <UnSetupDMAInterrupts+0x70>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d018      	beq.n	800b1e0 <UnSetupDMAInterrupts+0x3c>
 800b1ae:	d81b      	bhi.n	800b1e8 <UnSetupDMAInterrupts+0x44>
 800b1b0:	4a19      	ldr	r2, [pc, #100]	; (800b218 <UnSetupDMAInterrupts+0x74>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00a      	beq.n	800b1cc <UnSetupDMAInterrupts+0x28>
 800b1b6:	d80d      	bhi.n	800b1d4 <UnSetupDMAInterrupts+0x30>
 800b1b8:	4a18      	ldr	r2, [pc, #96]	; (800b21c <UnSetupDMAInterrupts+0x78>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d103      	bne.n	800b1c6 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b1be:	2009      	movs	r0, #9
 800b1c0:	f005 fc4e 	bl	8010a60 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b1c4:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b1c6:	4a16      	ldr	r2, [pc, #88]	; (800b220 <UnSetupDMAInterrupts+0x7c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d1fb      	bne.n	800b1c4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b1cc:	200a      	movs	r0, #10
 800b1ce:	f005 fc47 	bl	8010a60 <HAL_NVIC_DisableIRQ>
			break;
 800b1d2:	e7f7      	b.n	800b1c4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b1d4:	4a13      	ldr	r2, [pc, #76]	; (800b224 <UnSetupDMAInterrupts+0x80>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d002      	beq.n	800b1e0 <UnSetupDMAInterrupts+0x3c>
 800b1da:	4a13      	ldr	r2, [pc, #76]	; (800b228 <UnSetupDMAInterrupts+0x84>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d1f1      	bne.n	800b1c4 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b1e0:	200b      	movs	r0, #11
 800b1e2:	f005 fc3d 	bl	8010a60 <HAL_NVIC_DisableIRQ>
}
 800b1e6:	e7ed      	b.n	800b1c4 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b1e8:	4a10      	ldr	r2, [pc, #64]	; (800b22c <UnSetupDMAInterrupts+0x88>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d0ee      	beq.n	800b1cc <UnSetupDMAInterrupts+0x28>
 800b1ee:	d909      	bls.n	800b204 <UnSetupDMAInterrupts+0x60>
 800b1f0:	4a0f      	ldr	r2, [pc, #60]	; (800b230 <UnSetupDMAInterrupts+0x8c>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d0f4      	beq.n	800b1e0 <UnSetupDMAInterrupts+0x3c>
 800b1f6:	4a0f      	ldr	r2, [pc, #60]	; (800b234 <UnSetupDMAInterrupts+0x90>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d0f1      	beq.n	800b1e0 <UnSetupDMAInterrupts+0x3c>
 800b1fc:	4a0e      	ldr	r2, [pc, #56]	; (800b238 <UnSetupDMAInterrupts+0x94>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d1e0      	bne.n	800b1c4 <UnSetupDMAInterrupts+0x20>
 800b202:	e7ed      	b.n	800b1e0 <UnSetupDMAInterrupts+0x3c>
 800b204:	4a0d      	ldr	r2, [pc, #52]	; (800b23c <UnSetupDMAInterrupts+0x98>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d0ea      	beq.n	800b1e0 <UnSetupDMAInterrupts+0x3c>
 800b20a:	4a0d      	ldr	r2, [pc, #52]	; (800b240 <UnSetupDMAInterrupts+0x9c>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d0dd      	beq.n	800b1cc <UnSetupDMAInterrupts+0x28>
 800b210:	e7d8      	b.n	800b1c4 <UnSetupDMAInterrupts+0x20>
 800b212:	46c0      	nop			; (mov r8, r8)
 800b214:	4002006c 	.word	0x4002006c
 800b218:	40020030 	.word	0x40020030
 800b21c:	40020008 	.word	0x40020008
 800b220:	4002001c 	.word	0x4002001c
 800b224:	40020044 	.word	0x40020044
 800b228:	40020058 	.word	0x40020058
 800b22c:	4002041c 	.word	0x4002041c
 800b230:	40020444 	.word	0x40020444
 800b234:	40020458 	.word	0x40020458
 800b238:	40020430 	.word	0x40020430
 800b23c:	40020080 	.word	0x40020080
 800b240:	40020408 	.word	0x40020408

0800b244 <DMA_MSG_TX_UnSetup>:
{	
 800b244:	b510      	push	{r4, lr}
 800b246:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b248:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b24a:	f7ff ffab 	bl	800b1a4 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b24e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b250:	2300      	movs	r3, #0
 800b252:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b254:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b256:	bd10      	pop	{r4, pc}

0800b258 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b258:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b25a:	6803      	ldr	r3, [r0, #0]
 800b25c:	4abd      	ldr	r2, [pc, #756]	; (800b554 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d02f      	beq.n	800b2c2 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b262:	4abd      	ldr	r2, [pc, #756]	; (800b558 <RemapAndLinkDMAtoUARTRx+0x300>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d100      	bne.n	800b26a <RemapAndLinkDMAtoUARTRx+0x12>
 800b268:	e087      	b.n	800b37a <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b26a:	4abc      	ldr	r2, [pc, #752]	; (800b55c <RemapAndLinkDMAtoUARTRx+0x304>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d100      	bne.n	800b272 <RemapAndLinkDMAtoUARTRx+0x1a>
 800b270:	e0dc      	b.n	800b42c <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b272:	4abb      	ldr	r2, [pc, #748]	; (800b560 <RemapAndLinkDMAtoUARTRx+0x308>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d000      	beq.n	800b27a <RemapAndLinkDMAtoUARTRx+0x22>
 800b278:	e18a      	b.n	800b590 <RemapAndLinkDMAtoUARTRx+0x338>
 800b27a:	680b      	ldr	r3, [r1, #0]
 800b27c:	4ab9      	ldr	r2, [pc, #740]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d100      	bne.n	800b284 <RemapAndLinkDMAtoUARTRx+0x2c>
 800b282:	e12d      	b.n	800b4e0 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b284:	4ab8      	ldr	r2, [pc, #736]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d100      	bne.n	800b28c <RemapAndLinkDMAtoUARTRx+0x34>
 800b28a:	e134      	b.n	800b4f6 <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b28c:	4ab7      	ldr	r2, [pc, #732]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x314>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d100      	bne.n	800b294 <RemapAndLinkDMAtoUARTRx+0x3c>
 800b292:	e13c      	b.n	800b50e <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b294:	4ab6      	ldr	r2, [pc, #728]	; (800b570 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d100      	bne.n	800b29c <RemapAndLinkDMAtoUARTRx+0x44>
 800b29a:	e144      	b.n	800b526 <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b29c:	4ab5      	ldr	r2, [pc, #724]	; (800b574 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d100      	bne.n	800b2a4 <RemapAndLinkDMAtoUARTRx+0x4c>
 800b2a2:	e14c      	b.n	800b53e <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b2a4:	4ab4      	ldr	r2, [pc, #720]	; (800b578 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d11e      	bne.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b2aa:	4ab4      	ldr	r2, [pc, #720]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b2ac:	23a8      	movs	r3, #168	; 0xa8
 800b2ae:	58d4      	ldr	r4, [r2, r3]
 800b2b0:	4db3      	ldr	r5, [pc, #716]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b2b2:	402c      	ands	r4, r5
 800b2b4:	50d4      	str	r4, [r2, r3]
 800b2b6:	58d5      	ldr	r5, [r2, r3]
 800b2b8:	24b0      	movs	r4, #176	; 0xb0
 800b2ba:	0124      	lsls	r4, r4, #4
 800b2bc:	432c      	orrs	r4, r5
 800b2be:	50d4      	str	r4, [r2, r3]
 800b2c0:	e012      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b2c2:	680b      	ldr	r3, [r1, #0]
 800b2c4:	4aa7      	ldr	r2, [pc, #668]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d011      	beq.n	800b2ee <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b2ca:	4aa7      	ldr	r2, [pc, #668]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d019      	beq.n	800b304 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b2d0:	4aa6      	ldr	r2, [pc, #664]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x314>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d022      	beq.n	800b31c <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b2d6:	4aa6      	ldr	r2, [pc, #664]	; (800b570 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d02b      	beq.n	800b334 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b2dc:	4aa5      	ldr	r2, [pc, #660]	; (800b574 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d034      	beq.n	800b34c <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b2e2:	4aa5      	ldr	r2, [pc, #660]	; (800b578 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d03c      	beq.n	800b362 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b2e8:	6641      	str	r1, [r0, #100]	; 0x64
 800b2ea:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b2ec:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b2ee:	4aa5      	ldr	r2, [pc, #660]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b2f0:	23a8      	movs	r3, #168	; 0xa8
 800b2f2:	58d4      	ldr	r4, [r2, r3]
 800b2f4:	250f      	movs	r5, #15
 800b2f6:	43ac      	bics	r4, r5
 800b2f8:	50d4      	str	r4, [r2, r3]
 800b2fa:	58d4      	ldr	r4, [r2, r3]
 800b2fc:	3d07      	subs	r5, #7
 800b2fe:	432c      	orrs	r4, r5
 800b300:	50d4      	str	r4, [r2, r3]
 800b302:	e7f1      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b304:	4a9f      	ldr	r2, [pc, #636]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b306:	23a8      	movs	r3, #168	; 0xa8
 800b308:	58d4      	ldr	r4, [r2, r3]
 800b30a:	4d9d      	ldr	r5, [pc, #628]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b30c:	402c      	ands	r4, r5
 800b30e:	50d4      	str	r4, [r2, r3]
 800b310:	58d5      	ldr	r5, [r2, r3]
 800b312:	2480      	movs	r4, #128	; 0x80
 800b314:	0124      	lsls	r4, r4, #4
 800b316:	432c      	orrs	r4, r5
 800b318:	50d4      	str	r4, [r2, r3]
 800b31a:	e7e5      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b31c:	4a99      	ldr	r2, [pc, #612]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b31e:	23a8      	movs	r3, #168	; 0xa8
 800b320:	58d4      	ldr	r4, [r2, r3]
 800b322:	4d99      	ldr	r5, [pc, #612]	; (800b588 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b324:	402c      	ands	r4, r5
 800b326:	50d4      	str	r4, [r2, r3]
 800b328:	58d5      	ldr	r5, [r2, r3]
 800b32a:	2480      	movs	r4, #128	; 0x80
 800b32c:	0324      	lsls	r4, r4, #12
 800b32e:	432c      	orrs	r4, r5
 800b330:	50d4      	str	r4, [r2, r3]
 800b332:	e7d9      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b334:	4a93      	ldr	r2, [pc, #588]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b336:	23a8      	movs	r3, #168	; 0xa8
 800b338:	58d4      	ldr	r4, [r2, r3]
 800b33a:	4d94      	ldr	r5, [pc, #592]	; (800b58c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b33c:	402c      	ands	r4, r5
 800b33e:	50d4      	str	r4, [r2, r3]
 800b340:	58d5      	ldr	r5, [r2, r3]
 800b342:	2480      	movs	r4, #128	; 0x80
 800b344:	0424      	lsls	r4, r4, #16
 800b346:	432c      	orrs	r4, r5
 800b348:	50d4      	str	r4, [r2, r3]
 800b34a:	e7cd      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b34c:	4a8b      	ldr	r2, [pc, #556]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b34e:	23a8      	movs	r3, #168	; 0xa8
 800b350:	58d4      	ldr	r4, [r2, r3]
 800b352:	25f0      	movs	r5, #240	; 0xf0
 800b354:	43ac      	bics	r4, r5
 800b356:	50d4      	str	r4, [r2, r3]
 800b358:	58d4      	ldr	r4, [r2, r3]
 800b35a:	3d70      	subs	r5, #112	; 0x70
 800b35c:	432c      	orrs	r4, r5
 800b35e:	50d4      	str	r4, [r2, r3]
 800b360:	e7c2      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b362:	4a86      	ldr	r2, [pc, #536]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b364:	23a8      	movs	r3, #168	; 0xa8
 800b366:	58d4      	ldr	r4, [r2, r3]
 800b368:	4d85      	ldr	r5, [pc, #532]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b36a:	402c      	ands	r4, r5
 800b36c:	50d4      	str	r4, [r2, r3]
 800b36e:	58d5      	ldr	r5, [r2, r3]
 800b370:	2480      	movs	r4, #128	; 0x80
 800b372:	0124      	lsls	r4, r4, #4
 800b374:	432c      	orrs	r4, r5
 800b376:	50d4      	str	r4, [r2, r3]
 800b378:	e7b6      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b37a:	680b      	ldr	r3, [r1, #0]
 800b37c:	4a79      	ldr	r2, [pc, #484]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d01a      	beq.n	800b3b8 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b382:	4a79      	ldr	r2, [pc, #484]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d022      	beq.n	800b3ce <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b388:	4a78      	ldr	r2, [pc, #480]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x314>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d02b      	beq.n	800b3e6 <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b38e:	4a78      	ldr	r2, [pc, #480]	; (800b570 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d034      	beq.n	800b3fe <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b394:	4a77      	ldr	r2, [pc, #476]	; (800b574 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d03d      	beq.n	800b416 <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b39a:	4a77      	ldr	r2, [pc, #476]	; (800b578 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d1a3      	bne.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b3a0:	4a76      	ldr	r2, [pc, #472]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b3a2:	23a8      	movs	r3, #168	; 0xa8
 800b3a4:	58d4      	ldr	r4, [r2, r3]
 800b3a6:	4d76      	ldr	r5, [pc, #472]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b3a8:	402c      	ands	r4, r5
 800b3aa:	50d4      	str	r4, [r2, r3]
 800b3ac:	58d5      	ldr	r5, [r2, r3]
 800b3ae:	2490      	movs	r4, #144	; 0x90
 800b3b0:	0124      	lsls	r4, r4, #4
 800b3b2:	432c      	orrs	r4, r5
 800b3b4:	50d4      	str	r4, [r2, r3]
 800b3b6:	e797      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b3b8:	4a72      	ldr	r2, [pc, #456]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b3ba:	23a8      	movs	r3, #168	; 0xa8
 800b3bc:	58d4      	ldr	r4, [r2, r3]
 800b3be:	250f      	movs	r5, #15
 800b3c0:	43ac      	bics	r4, r5
 800b3c2:	50d4      	str	r4, [r2, r3]
 800b3c4:	58d4      	ldr	r4, [r2, r3]
 800b3c6:	3d06      	subs	r5, #6
 800b3c8:	432c      	orrs	r4, r5
 800b3ca:	50d4      	str	r4, [r2, r3]
 800b3cc:	e78c      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b3ce:	4a6d      	ldr	r2, [pc, #436]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b3d0:	23a8      	movs	r3, #168	; 0xa8
 800b3d2:	58d4      	ldr	r4, [r2, r3]
 800b3d4:	4d6a      	ldr	r5, [pc, #424]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b3d6:	402c      	ands	r4, r5
 800b3d8:	50d4      	str	r4, [r2, r3]
 800b3da:	58d5      	ldr	r5, [r2, r3]
 800b3dc:	2490      	movs	r4, #144	; 0x90
 800b3de:	0124      	lsls	r4, r4, #4
 800b3e0:	432c      	orrs	r4, r5
 800b3e2:	50d4      	str	r4, [r2, r3]
 800b3e4:	e780      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b3e6:	4a67      	ldr	r2, [pc, #412]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b3e8:	23a8      	movs	r3, #168	; 0xa8
 800b3ea:	58d4      	ldr	r4, [r2, r3]
 800b3ec:	4d66      	ldr	r5, [pc, #408]	; (800b588 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b3ee:	402c      	ands	r4, r5
 800b3f0:	50d4      	str	r4, [r2, r3]
 800b3f2:	58d5      	ldr	r5, [r2, r3]
 800b3f4:	2490      	movs	r4, #144	; 0x90
 800b3f6:	0324      	lsls	r4, r4, #12
 800b3f8:	432c      	orrs	r4, r5
 800b3fa:	50d4      	str	r4, [r2, r3]
 800b3fc:	e774      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b3fe:	4a61      	ldr	r2, [pc, #388]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b400:	23a8      	movs	r3, #168	; 0xa8
 800b402:	58d4      	ldr	r4, [r2, r3]
 800b404:	4d61      	ldr	r5, [pc, #388]	; (800b58c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b406:	402c      	ands	r4, r5
 800b408:	50d4      	str	r4, [r2, r3]
 800b40a:	58d5      	ldr	r5, [r2, r3]
 800b40c:	2490      	movs	r4, #144	; 0x90
 800b40e:	0424      	lsls	r4, r4, #16
 800b410:	432c      	orrs	r4, r5
 800b412:	50d4      	str	r4, [r2, r3]
 800b414:	e768      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b416:	4a59      	ldr	r2, [pc, #356]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b418:	23a8      	movs	r3, #168	; 0xa8
 800b41a:	58d4      	ldr	r4, [r2, r3]
 800b41c:	25f0      	movs	r5, #240	; 0xf0
 800b41e:	43ac      	bics	r4, r5
 800b420:	50d4      	str	r4, [r2, r3]
 800b422:	58d4      	ldr	r4, [r2, r3]
 800b424:	3d60      	subs	r5, #96	; 0x60
 800b426:	432c      	orrs	r4, r5
 800b428:	50d4      	str	r4, [r2, r3]
 800b42a:	e75d      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b42c:	680b      	ldr	r3, [r1, #0]
 800b42e:	4a4d      	ldr	r2, [pc, #308]	; (800b564 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d01b      	beq.n	800b46c <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b434:	4a4c      	ldr	r2, [pc, #304]	; (800b568 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d023      	beq.n	800b482 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b43a:	4a4c      	ldr	r2, [pc, #304]	; (800b56c <RemapAndLinkDMAtoUARTRx+0x314>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d02c      	beq.n	800b49a <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b440:	4a4b      	ldr	r2, [pc, #300]	; (800b570 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d035      	beq.n	800b4b2 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b446:	4a4b      	ldr	r2, [pc, #300]	; (800b574 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d03e      	beq.n	800b4ca <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b44c:	4a4a      	ldr	r2, [pc, #296]	; (800b578 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d000      	beq.n	800b454 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800b452:	e749      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b454:	4a49      	ldr	r2, [pc, #292]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b456:	23a8      	movs	r3, #168	; 0xa8
 800b458:	58d4      	ldr	r4, [r2, r3]
 800b45a:	4d49      	ldr	r5, [pc, #292]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b45c:	402c      	ands	r4, r5
 800b45e:	50d4      	str	r4, [r2, r3]
 800b460:	58d5      	ldr	r5, [r2, r3]
 800b462:	24a0      	movs	r4, #160	; 0xa0
 800b464:	0124      	lsls	r4, r4, #4
 800b466:	432c      	orrs	r4, r5
 800b468:	50d4      	str	r4, [r2, r3]
 800b46a:	e73d      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b46c:	4a45      	ldr	r2, [pc, #276]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b46e:	23a8      	movs	r3, #168	; 0xa8
 800b470:	58d4      	ldr	r4, [r2, r3]
 800b472:	250f      	movs	r5, #15
 800b474:	43ac      	bics	r4, r5
 800b476:	50d4      	str	r4, [r2, r3]
 800b478:	58d4      	ldr	r4, [r2, r3]
 800b47a:	3d05      	subs	r5, #5
 800b47c:	432c      	orrs	r4, r5
 800b47e:	50d4      	str	r4, [r2, r3]
 800b480:	e732      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b482:	4a40      	ldr	r2, [pc, #256]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b484:	23a8      	movs	r3, #168	; 0xa8
 800b486:	58d4      	ldr	r4, [r2, r3]
 800b488:	4d3d      	ldr	r5, [pc, #244]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b48a:	402c      	ands	r4, r5
 800b48c:	50d4      	str	r4, [r2, r3]
 800b48e:	58d5      	ldr	r5, [r2, r3]
 800b490:	24a0      	movs	r4, #160	; 0xa0
 800b492:	0124      	lsls	r4, r4, #4
 800b494:	432c      	orrs	r4, r5
 800b496:	50d4      	str	r4, [r2, r3]
 800b498:	e726      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b49a:	4a3a      	ldr	r2, [pc, #232]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b49c:	23a8      	movs	r3, #168	; 0xa8
 800b49e:	58d4      	ldr	r4, [r2, r3]
 800b4a0:	4d39      	ldr	r5, [pc, #228]	; (800b588 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b4a2:	402c      	ands	r4, r5
 800b4a4:	50d4      	str	r4, [r2, r3]
 800b4a6:	58d5      	ldr	r5, [r2, r3]
 800b4a8:	24a0      	movs	r4, #160	; 0xa0
 800b4aa:	0324      	lsls	r4, r4, #12
 800b4ac:	432c      	orrs	r4, r5
 800b4ae:	50d4      	str	r4, [r2, r3]
 800b4b0:	e71a      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b4b2:	4a34      	ldr	r2, [pc, #208]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b4b4:	23a8      	movs	r3, #168	; 0xa8
 800b4b6:	58d4      	ldr	r4, [r2, r3]
 800b4b8:	4d34      	ldr	r5, [pc, #208]	; (800b58c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b4ba:	402c      	ands	r4, r5
 800b4bc:	50d4      	str	r4, [r2, r3]
 800b4be:	58d5      	ldr	r5, [r2, r3]
 800b4c0:	24a0      	movs	r4, #160	; 0xa0
 800b4c2:	0424      	lsls	r4, r4, #16
 800b4c4:	432c      	orrs	r4, r5
 800b4c6:	50d4      	str	r4, [r2, r3]
 800b4c8:	e70e      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b4ca:	4a2c      	ldr	r2, [pc, #176]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b4cc:	23a8      	movs	r3, #168	; 0xa8
 800b4ce:	58d4      	ldr	r4, [r2, r3]
 800b4d0:	25f0      	movs	r5, #240	; 0xf0
 800b4d2:	43ac      	bics	r4, r5
 800b4d4:	50d4      	str	r4, [r2, r3]
 800b4d6:	58d4      	ldr	r4, [r2, r3]
 800b4d8:	3d50      	subs	r5, #80	; 0x50
 800b4da:	432c      	orrs	r4, r5
 800b4dc:	50d4      	str	r4, [r2, r3]
 800b4de:	e703      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b4e0:	4a28      	ldr	r2, [pc, #160]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b4e2:	23a8      	movs	r3, #168	; 0xa8
 800b4e4:	58d4      	ldr	r4, [r2, r3]
 800b4e6:	250f      	movs	r5, #15
 800b4e8:	43ac      	bics	r4, r5
 800b4ea:	50d4      	str	r4, [r2, r3]
 800b4ec:	58d4      	ldr	r4, [r2, r3]
 800b4ee:	3d04      	subs	r5, #4
 800b4f0:	432c      	orrs	r4, r5
 800b4f2:	50d4      	str	r4, [r2, r3]
 800b4f4:	e6f8      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b4f6:	4a23      	ldr	r2, [pc, #140]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b4f8:	23a8      	movs	r3, #168	; 0xa8
 800b4fa:	58d4      	ldr	r4, [r2, r3]
 800b4fc:	4d20      	ldr	r5, [pc, #128]	; (800b580 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b4fe:	402c      	ands	r4, r5
 800b500:	50d4      	str	r4, [r2, r3]
 800b502:	58d5      	ldr	r5, [r2, r3]
 800b504:	24b0      	movs	r4, #176	; 0xb0
 800b506:	0124      	lsls	r4, r4, #4
 800b508:	432c      	orrs	r4, r5
 800b50a:	50d4      	str	r4, [r2, r3]
 800b50c:	e6ec      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b50e:	4a1d      	ldr	r2, [pc, #116]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b510:	23a8      	movs	r3, #168	; 0xa8
 800b512:	58d4      	ldr	r4, [r2, r3]
 800b514:	4d1c      	ldr	r5, [pc, #112]	; (800b588 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b516:	402c      	ands	r4, r5
 800b518:	50d4      	str	r4, [r2, r3]
 800b51a:	58d5      	ldr	r5, [r2, r3]
 800b51c:	24b0      	movs	r4, #176	; 0xb0
 800b51e:	0324      	lsls	r4, r4, #12
 800b520:	432c      	orrs	r4, r5
 800b522:	50d4      	str	r4, [r2, r3]
 800b524:	e6e0      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b526:	4a17      	ldr	r2, [pc, #92]	; (800b584 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b528:	23a8      	movs	r3, #168	; 0xa8
 800b52a:	58d4      	ldr	r4, [r2, r3]
 800b52c:	4d17      	ldr	r5, [pc, #92]	; (800b58c <RemapAndLinkDMAtoUARTRx+0x334>)
 800b52e:	402c      	ands	r4, r5
 800b530:	50d4      	str	r4, [r2, r3]
 800b532:	58d5      	ldr	r5, [r2, r3]
 800b534:	24b0      	movs	r4, #176	; 0xb0
 800b536:	0424      	lsls	r4, r4, #16
 800b538:	432c      	orrs	r4, r5
 800b53a:	50d4      	str	r4, [r2, r3]
 800b53c:	e6d4      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b53e:	4a0f      	ldr	r2, [pc, #60]	; (800b57c <RemapAndLinkDMAtoUARTRx+0x324>)
 800b540:	23a8      	movs	r3, #168	; 0xa8
 800b542:	58d4      	ldr	r4, [r2, r3]
 800b544:	25f0      	movs	r5, #240	; 0xf0
 800b546:	43ac      	bics	r4, r5
 800b548:	50d4      	str	r4, [r2, r3]
 800b54a:	58d4      	ldr	r4, [r2, r3]
 800b54c:	3d40      	subs	r5, #64	; 0x40
 800b54e:	432c      	orrs	r4, r5
 800b550:	50d4      	str	r4, [r2, r3]
 800b552:	e6c9      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
 800b554:	40013800 	.word	0x40013800
 800b558:	40004400 	.word	0x40004400
 800b55c:	40004800 	.word	0x40004800
 800b560:	40004c00 	.word	0x40004c00
 800b564:	40020008 	.word	0x40020008
 800b568:	40020030 	.word	0x40020030
 800b56c:	40020058 	.word	0x40020058
 800b570:	4002006c 	.word	0x4002006c
 800b574:	4002041c 	.word	0x4002041c
 800b578:	40020430 	.word	0x40020430
 800b57c:	40020400 	.word	0x40020400
 800b580:	fffff0ff 	.word	0xfffff0ff
 800b584:	40020000 	.word	0x40020000
 800b588:	fff0ffff 	.word	0xfff0ffff
 800b58c:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b590:	4ab9      	ldr	r2, [pc, #740]	; (800b878 <RemapAndLinkDMAtoUARTRx+0x620>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d159      	bne.n	800b64a <RemapAndLinkDMAtoUARTRx+0x3f2>
 800b596:	680b      	ldr	r3, [r1, #0]
 800b598:	4ab8      	ldr	r2, [pc, #736]	; (800b87c <RemapAndLinkDMAtoUARTRx+0x624>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d01b      	beq.n	800b5d6 <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b59e:	4ab8      	ldr	r2, [pc, #736]	; (800b880 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d023      	beq.n	800b5ec <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b5a4:	4ab7      	ldr	r2, [pc, #732]	; (800b884 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d02c      	beq.n	800b604 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b5aa:	4ab7      	ldr	r2, [pc, #732]	; (800b888 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d035      	beq.n	800b61c <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b5b0:	4ab6      	ldr	r2, [pc, #728]	; (800b88c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d03e      	beq.n	800b634 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b5b6:	4ab6      	ldr	r2, [pc, #728]	; (800b890 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d000      	beq.n	800b5be <RemapAndLinkDMAtoUARTRx+0x366>
 800b5bc:	e694      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b5be:	4ab5      	ldr	r2, [pc, #724]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b5c0:	23a8      	movs	r3, #168	; 0xa8
 800b5c2:	58d4      	ldr	r4, [r2, r3]
 800b5c4:	4db4      	ldr	r5, [pc, #720]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b5c6:	402c      	ands	r4, r5
 800b5c8:	50d4      	str	r4, [r2, r3]
 800b5ca:	58d5      	ldr	r5, [r2, r3]
 800b5cc:	24c0      	movs	r4, #192	; 0xc0
 800b5ce:	0124      	lsls	r4, r4, #4
 800b5d0:	432c      	orrs	r4, r5
 800b5d2:	50d4      	str	r4, [r2, r3]
 800b5d4:	e688      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b5d6:	4ab1      	ldr	r2, [pc, #708]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b5d8:	23a8      	movs	r3, #168	; 0xa8
 800b5da:	58d4      	ldr	r4, [r2, r3]
 800b5dc:	250f      	movs	r5, #15
 800b5de:	43ac      	bics	r4, r5
 800b5e0:	50d4      	str	r4, [r2, r3]
 800b5e2:	58d4      	ldr	r4, [r2, r3]
 800b5e4:	3d03      	subs	r5, #3
 800b5e6:	432c      	orrs	r4, r5
 800b5e8:	50d4      	str	r4, [r2, r3]
 800b5ea:	e67d      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b5ec:	4aab      	ldr	r2, [pc, #684]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b5ee:	23a8      	movs	r3, #168	; 0xa8
 800b5f0:	58d4      	ldr	r4, [r2, r3]
 800b5f2:	4da9      	ldr	r5, [pc, #676]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b5f4:	402c      	ands	r4, r5
 800b5f6:	50d4      	str	r4, [r2, r3]
 800b5f8:	58d5      	ldr	r5, [r2, r3]
 800b5fa:	24c0      	movs	r4, #192	; 0xc0
 800b5fc:	0124      	lsls	r4, r4, #4
 800b5fe:	432c      	orrs	r4, r5
 800b600:	50d4      	str	r4, [r2, r3]
 800b602:	e671      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b604:	4aa5      	ldr	r2, [pc, #660]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b606:	23a8      	movs	r3, #168	; 0xa8
 800b608:	58d4      	ldr	r4, [r2, r3]
 800b60a:	4da5      	ldr	r5, [pc, #660]	; (800b8a0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b60c:	402c      	ands	r4, r5
 800b60e:	50d4      	str	r4, [r2, r3]
 800b610:	58d5      	ldr	r5, [r2, r3]
 800b612:	24c0      	movs	r4, #192	; 0xc0
 800b614:	0324      	lsls	r4, r4, #12
 800b616:	432c      	orrs	r4, r5
 800b618:	50d4      	str	r4, [r2, r3]
 800b61a:	e665      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b61c:	4a9f      	ldr	r2, [pc, #636]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b61e:	23a8      	movs	r3, #168	; 0xa8
 800b620:	58d4      	ldr	r4, [r2, r3]
 800b622:	4da0      	ldr	r5, [pc, #640]	; (800b8a4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b624:	402c      	ands	r4, r5
 800b626:	50d4      	str	r4, [r2, r3]
 800b628:	58d5      	ldr	r5, [r2, r3]
 800b62a:	24c0      	movs	r4, #192	; 0xc0
 800b62c:	0424      	lsls	r4, r4, #16
 800b62e:	432c      	orrs	r4, r5
 800b630:	50d4      	str	r4, [r2, r3]
 800b632:	e659      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b634:	4a97      	ldr	r2, [pc, #604]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b636:	23a8      	movs	r3, #168	; 0xa8
 800b638:	58d4      	ldr	r4, [r2, r3]
 800b63a:	25f0      	movs	r5, #240	; 0xf0
 800b63c:	43ac      	bics	r4, r5
 800b63e:	50d4      	str	r4, [r2, r3]
 800b640:	58d4      	ldr	r4, [r2, r3]
 800b642:	3d30      	subs	r5, #48	; 0x30
 800b644:	432c      	orrs	r4, r5
 800b646:	50d4      	str	r4, [r2, r3]
 800b648:	e64e      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b64a:	4a97      	ldr	r2, [pc, #604]	; (800b8a8 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d159      	bne.n	800b704 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800b650:	680b      	ldr	r3, [r1, #0]
 800b652:	4a8a      	ldr	r2, [pc, #552]	; (800b87c <RemapAndLinkDMAtoUARTRx+0x624>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d01b      	beq.n	800b690 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b658:	4a89      	ldr	r2, [pc, #548]	; (800b880 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d023      	beq.n	800b6a6 <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b65e:	4a89      	ldr	r2, [pc, #548]	; (800b884 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d02c      	beq.n	800b6be <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b664:	4a88      	ldr	r2, [pc, #544]	; (800b888 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d035      	beq.n	800b6d6 <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b66a:	4a88      	ldr	r2, [pc, #544]	; (800b88c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d03e      	beq.n	800b6ee <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b670:	4a87      	ldr	r2, [pc, #540]	; (800b890 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d000      	beq.n	800b678 <RemapAndLinkDMAtoUARTRx+0x420>
 800b676:	e637      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b678:	4a86      	ldr	r2, [pc, #536]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b67a:	23a8      	movs	r3, #168	; 0xa8
 800b67c:	58d4      	ldr	r4, [r2, r3]
 800b67e:	4d86      	ldr	r5, [pc, #536]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b680:	402c      	ands	r4, r5
 800b682:	50d4      	str	r4, [r2, r3]
 800b684:	58d5      	ldr	r5, [r2, r3]
 800b686:	24d0      	movs	r4, #208	; 0xd0
 800b688:	0124      	lsls	r4, r4, #4
 800b68a:	432c      	orrs	r4, r5
 800b68c:	50d4      	str	r4, [r2, r3]
 800b68e:	e62b      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b690:	4a82      	ldr	r2, [pc, #520]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b692:	23a8      	movs	r3, #168	; 0xa8
 800b694:	58d4      	ldr	r4, [r2, r3]
 800b696:	250f      	movs	r5, #15
 800b698:	43ac      	bics	r4, r5
 800b69a:	50d4      	str	r4, [r2, r3]
 800b69c:	58d4      	ldr	r4, [r2, r3]
 800b69e:	3d02      	subs	r5, #2
 800b6a0:	432c      	orrs	r4, r5
 800b6a2:	50d4      	str	r4, [r2, r3]
 800b6a4:	e620      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b6a6:	4a7d      	ldr	r2, [pc, #500]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b6a8:	23a8      	movs	r3, #168	; 0xa8
 800b6aa:	58d4      	ldr	r4, [r2, r3]
 800b6ac:	4d7a      	ldr	r5, [pc, #488]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b6ae:	402c      	ands	r4, r5
 800b6b0:	50d4      	str	r4, [r2, r3]
 800b6b2:	58d5      	ldr	r5, [r2, r3]
 800b6b4:	24d0      	movs	r4, #208	; 0xd0
 800b6b6:	0124      	lsls	r4, r4, #4
 800b6b8:	432c      	orrs	r4, r5
 800b6ba:	50d4      	str	r4, [r2, r3]
 800b6bc:	e614      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b6be:	4a77      	ldr	r2, [pc, #476]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b6c0:	23a8      	movs	r3, #168	; 0xa8
 800b6c2:	58d4      	ldr	r4, [r2, r3]
 800b6c4:	4d76      	ldr	r5, [pc, #472]	; (800b8a0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b6c6:	402c      	ands	r4, r5
 800b6c8:	50d4      	str	r4, [r2, r3]
 800b6ca:	58d5      	ldr	r5, [r2, r3]
 800b6cc:	24d0      	movs	r4, #208	; 0xd0
 800b6ce:	0324      	lsls	r4, r4, #12
 800b6d0:	432c      	orrs	r4, r5
 800b6d2:	50d4      	str	r4, [r2, r3]
 800b6d4:	e608      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b6d6:	4a71      	ldr	r2, [pc, #452]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b6d8:	23a8      	movs	r3, #168	; 0xa8
 800b6da:	58d4      	ldr	r4, [r2, r3]
 800b6dc:	4d71      	ldr	r5, [pc, #452]	; (800b8a4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b6de:	402c      	ands	r4, r5
 800b6e0:	50d4      	str	r4, [r2, r3]
 800b6e2:	58d5      	ldr	r5, [r2, r3]
 800b6e4:	24d0      	movs	r4, #208	; 0xd0
 800b6e6:	0424      	lsls	r4, r4, #16
 800b6e8:	432c      	orrs	r4, r5
 800b6ea:	50d4      	str	r4, [r2, r3]
 800b6ec:	e5fc      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b6ee:	4a69      	ldr	r2, [pc, #420]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b6f0:	23a8      	movs	r3, #168	; 0xa8
 800b6f2:	58d4      	ldr	r4, [r2, r3]
 800b6f4:	25f0      	movs	r5, #240	; 0xf0
 800b6f6:	43ac      	bics	r4, r5
 800b6f8:	50d4      	str	r4, [r2, r3]
 800b6fa:	58d4      	ldr	r4, [r2, r3]
 800b6fc:	3d20      	subs	r5, #32
 800b6fe:	432c      	orrs	r4, r5
 800b700:	50d4      	str	r4, [r2, r3]
 800b702:	e5f1      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b704:	4a69      	ldr	r2, [pc, #420]	; (800b8ac <RemapAndLinkDMAtoUARTRx+0x654>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d159      	bne.n	800b7be <RemapAndLinkDMAtoUARTRx+0x566>
 800b70a:	680b      	ldr	r3, [r1, #0]
 800b70c:	4a5b      	ldr	r2, [pc, #364]	; (800b87c <RemapAndLinkDMAtoUARTRx+0x624>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d01b      	beq.n	800b74a <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b712:	4a5b      	ldr	r2, [pc, #364]	; (800b880 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d023      	beq.n	800b760 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b718:	4a5a      	ldr	r2, [pc, #360]	; (800b884 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d02c      	beq.n	800b778 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b71e:	4a5a      	ldr	r2, [pc, #360]	; (800b888 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d035      	beq.n	800b790 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b724:	4a59      	ldr	r2, [pc, #356]	; (800b88c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d03e      	beq.n	800b7a8 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b72a:	4a59      	ldr	r2, [pc, #356]	; (800b890 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d000      	beq.n	800b732 <RemapAndLinkDMAtoUARTRx+0x4da>
 800b730:	e5da      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b732:	4a58      	ldr	r2, [pc, #352]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b734:	23a8      	movs	r3, #168	; 0xa8
 800b736:	58d4      	ldr	r4, [r2, r3]
 800b738:	4d57      	ldr	r5, [pc, #348]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b73a:	402c      	ands	r4, r5
 800b73c:	50d4      	str	r4, [r2, r3]
 800b73e:	58d5      	ldr	r5, [r2, r3]
 800b740:	24e0      	movs	r4, #224	; 0xe0
 800b742:	0124      	lsls	r4, r4, #4
 800b744:	432c      	orrs	r4, r5
 800b746:	50d4      	str	r4, [r2, r3]
 800b748:	e5ce      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b74a:	4a54      	ldr	r2, [pc, #336]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b74c:	23a8      	movs	r3, #168	; 0xa8
 800b74e:	58d4      	ldr	r4, [r2, r3]
 800b750:	250f      	movs	r5, #15
 800b752:	43ac      	bics	r4, r5
 800b754:	50d4      	str	r4, [r2, r3]
 800b756:	58d4      	ldr	r4, [r2, r3]
 800b758:	3d01      	subs	r5, #1
 800b75a:	432c      	orrs	r4, r5
 800b75c:	50d4      	str	r4, [r2, r3]
 800b75e:	e5c3      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b760:	4a4e      	ldr	r2, [pc, #312]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b762:	23a8      	movs	r3, #168	; 0xa8
 800b764:	58d4      	ldr	r4, [r2, r3]
 800b766:	4d4c      	ldr	r5, [pc, #304]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b768:	402c      	ands	r4, r5
 800b76a:	50d4      	str	r4, [r2, r3]
 800b76c:	58d5      	ldr	r5, [r2, r3]
 800b76e:	24e0      	movs	r4, #224	; 0xe0
 800b770:	0124      	lsls	r4, r4, #4
 800b772:	432c      	orrs	r4, r5
 800b774:	50d4      	str	r4, [r2, r3]
 800b776:	e5b7      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b778:	4a48      	ldr	r2, [pc, #288]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b77a:	23a8      	movs	r3, #168	; 0xa8
 800b77c:	58d4      	ldr	r4, [r2, r3]
 800b77e:	4d48      	ldr	r5, [pc, #288]	; (800b8a0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b780:	402c      	ands	r4, r5
 800b782:	50d4      	str	r4, [r2, r3]
 800b784:	58d5      	ldr	r5, [r2, r3]
 800b786:	24e0      	movs	r4, #224	; 0xe0
 800b788:	0324      	lsls	r4, r4, #12
 800b78a:	432c      	orrs	r4, r5
 800b78c:	50d4      	str	r4, [r2, r3]
 800b78e:	e5ab      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b790:	4a42      	ldr	r2, [pc, #264]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b792:	23a8      	movs	r3, #168	; 0xa8
 800b794:	58d4      	ldr	r4, [r2, r3]
 800b796:	4d43      	ldr	r5, [pc, #268]	; (800b8a4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b798:	402c      	ands	r4, r5
 800b79a:	50d4      	str	r4, [r2, r3]
 800b79c:	58d5      	ldr	r5, [r2, r3]
 800b79e:	24e0      	movs	r4, #224	; 0xe0
 800b7a0:	0424      	lsls	r4, r4, #16
 800b7a2:	432c      	orrs	r4, r5
 800b7a4:	50d4      	str	r4, [r2, r3]
 800b7a6:	e59f      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b7a8:	4a3a      	ldr	r2, [pc, #232]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b7aa:	23a8      	movs	r3, #168	; 0xa8
 800b7ac:	58d4      	ldr	r4, [r2, r3]
 800b7ae:	25f0      	movs	r5, #240	; 0xf0
 800b7b0:	43ac      	bics	r4, r5
 800b7b2:	50d4      	str	r4, [r2, r3]
 800b7b4:	58d4      	ldr	r4, [r2, r3]
 800b7b6:	3d10      	subs	r5, #16
 800b7b8:	432c      	orrs	r4, r5
 800b7ba:	50d4      	str	r4, [r2, r3]
 800b7bc:	e594      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b7be:	4a3c      	ldr	r2, [pc, #240]	; (800b8b0 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d000      	beq.n	800b7c6 <RemapAndLinkDMAtoUARTRx+0x56e>
 800b7c4:	e590      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
 800b7c6:	680b      	ldr	r3, [r1, #0]
 800b7c8:	4a2c      	ldr	r2, [pc, #176]	; (800b87c <RemapAndLinkDMAtoUARTRx+0x624>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d01b      	beq.n	800b806 <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b7ce:	4a2c      	ldr	r2, [pc, #176]	; (800b880 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d022      	beq.n	800b81a <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b7d4:	4a2b      	ldr	r2, [pc, #172]	; (800b884 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d02b      	beq.n	800b832 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b7da:	4a2b      	ldr	r2, [pc, #172]	; (800b888 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d034      	beq.n	800b84a <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b7e0:	4a2a      	ldr	r2, [pc, #168]	; (800b88c <RemapAndLinkDMAtoUARTRx+0x634>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d03d      	beq.n	800b862 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b7e6:	4a2a      	ldr	r2, [pc, #168]	; (800b890 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d000      	beq.n	800b7ee <RemapAndLinkDMAtoUARTRx+0x596>
 800b7ec:	e57c      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b7ee:	4a29      	ldr	r2, [pc, #164]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b7f0:	23a8      	movs	r3, #168	; 0xa8
 800b7f2:	58d4      	ldr	r4, [r2, r3]
 800b7f4:	4d28      	ldr	r5, [pc, #160]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b7f6:	402c      	ands	r4, r5
 800b7f8:	50d4      	str	r4, [r2, r3]
 800b7fa:	58d5      	ldr	r5, [r2, r3]
 800b7fc:	24f0      	movs	r4, #240	; 0xf0
 800b7fe:	0124      	lsls	r4, r4, #4
 800b800:	432c      	orrs	r4, r5
 800b802:	50d4      	str	r4, [r2, r3]
 800b804:	e570      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b806:	4a25      	ldr	r2, [pc, #148]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b808:	23a8      	movs	r3, #168	; 0xa8
 800b80a:	58d5      	ldr	r5, [r2, r3]
 800b80c:	260f      	movs	r6, #15
 800b80e:	43b5      	bics	r5, r6
 800b810:	50d5      	str	r5, [r2, r3]
 800b812:	58d4      	ldr	r4, [r2, r3]
 800b814:	4334      	orrs	r4, r6
 800b816:	50d4      	str	r4, [r2, r3]
 800b818:	e566      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b81a:	4a20      	ldr	r2, [pc, #128]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b81c:	23a8      	movs	r3, #168	; 0xa8
 800b81e:	58d4      	ldr	r4, [r2, r3]
 800b820:	4d1d      	ldr	r5, [pc, #116]	; (800b898 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b822:	402c      	ands	r4, r5
 800b824:	50d4      	str	r4, [r2, r3]
 800b826:	58d5      	ldr	r5, [r2, r3]
 800b828:	24f0      	movs	r4, #240	; 0xf0
 800b82a:	0124      	lsls	r4, r4, #4
 800b82c:	432c      	orrs	r4, r5
 800b82e:	50d4      	str	r4, [r2, r3]
 800b830:	e55a      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b832:	4a1a      	ldr	r2, [pc, #104]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b834:	23a8      	movs	r3, #168	; 0xa8
 800b836:	58d4      	ldr	r4, [r2, r3]
 800b838:	4d19      	ldr	r5, [pc, #100]	; (800b8a0 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b83a:	402c      	ands	r4, r5
 800b83c:	50d4      	str	r4, [r2, r3]
 800b83e:	58d5      	ldr	r5, [r2, r3]
 800b840:	24f0      	movs	r4, #240	; 0xf0
 800b842:	0324      	lsls	r4, r4, #12
 800b844:	432c      	orrs	r4, r5
 800b846:	50d4      	str	r4, [r2, r3]
 800b848:	e54e      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b84a:	4a14      	ldr	r2, [pc, #80]	; (800b89c <RemapAndLinkDMAtoUARTRx+0x644>)
 800b84c:	23a8      	movs	r3, #168	; 0xa8
 800b84e:	58d4      	ldr	r4, [r2, r3]
 800b850:	4d14      	ldr	r5, [pc, #80]	; (800b8a4 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b852:	402c      	ands	r4, r5
 800b854:	50d4      	str	r4, [r2, r3]
 800b856:	58d5      	ldr	r5, [r2, r3]
 800b858:	24f0      	movs	r4, #240	; 0xf0
 800b85a:	0424      	lsls	r4, r4, #16
 800b85c:	432c      	orrs	r4, r5
 800b85e:	50d4      	str	r4, [r2, r3]
 800b860:	e542      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b862:	4a0c      	ldr	r2, [pc, #48]	; (800b894 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b864:	23a8      	movs	r3, #168	; 0xa8
 800b866:	58d5      	ldr	r5, [r2, r3]
 800b868:	26f0      	movs	r6, #240	; 0xf0
 800b86a:	43b5      	bics	r5, r6
 800b86c:	50d5      	str	r5, [r2, r3]
 800b86e:	58d4      	ldr	r4, [r2, r3]
 800b870:	4334      	orrs	r4, r6
 800b872:	50d4      	str	r4, [r2, r3]
 800b874:	e538      	b.n	800b2e8 <RemapAndLinkDMAtoUARTRx+0x90>
 800b876:	46c0      	nop			; (mov r8, r8)
 800b878:	40005000 	.word	0x40005000
 800b87c:	40020008 	.word	0x40020008
 800b880:	40020030 	.word	0x40020030
 800b884:	40020058 	.word	0x40020058
 800b888:	4002006c 	.word	0x4002006c
 800b88c:	4002041c 	.word	0x4002041c
 800b890:	40020430 	.word	0x40020430
 800b894:	40020400 	.word	0x40020400
 800b898:	fffff0ff 	.word	0xfffff0ff
 800b89c:	40020000 	.word	0x40020000
 800b8a0:	fff0ffff 	.word	0xfff0ffff
 800b8a4:	ff0fffff 	.word	0xff0fffff
 800b8a8:	40011400 	.word	0x40011400
 800b8ac:	40011800 	.word	0x40011800
 800b8b0:	40011c00 	.word	0x40011c00

0800b8b4 <DMA_MSG_RX_Setup>:
{	
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	0004      	movs	r4, r0
 800b8b8:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b8ba:	f7ff fccd 	bl	800b258 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b8be:	2100      	movs	r1, #0
 800b8c0:	0028      	movs	r0, r5
 800b8c2:	f7ff fc13 	bl	800b0ec <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800b8c6:	0020      	movs	r0, r4
 800b8c8:	f7fe fe02 	bl	800a4d0 <GetPort>
 800b8cc:	3801      	subs	r0, #1
 800b8ce:	0041      	lsls	r1, r0, #1
 800b8d0:	1809      	adds	r1, r1, r0
 800b8d2:	0189      	lsls	r1, r1, #6
 800b8d4:	4803      	ldr	r0, [pc, #12]	; (800b8e4 <DMA_MSG_RX_Setup+0x30>)
 800b8d6:	1809      	adds	r1, r1, r0
 800b8d8:	22c0      	movs	r2, #192	; 0xc0
 800b8da:	0020      	movs	r0, r4
 800b8dc:	f007 fab6 	bl	8012e4c <HAL_UART_Receive_DMA>
}
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	46c0      	nop			; (mov r8, r8)
 800b8e4:	20000a44 	.word	0x20000a44

0800b8e8 <SetupMessagingRxDMAs>:
{	
 800b8e8:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <SetupMessagingRxDMAs+0x3c>)
 800b8ec:	785b      	ldrb	r3, [r3, #1]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d008      	beq.n	800b904 <SetupMessagingRxDMAs+0x1c>
	if (portStatus[P2] == FREE)	
 800b8f2:	4b0c      	ldr	r3, [pc, #48]	; (800b924 <SetupMessagingRxDMAs+0x3c>)
 800b8f4:	789b      	ldrb	r3, [r3, #2]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <SetupMessagingRxDMAs+0x26>
	if (portStatus[P3] == FREE)
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <SetupMessagingRxDMAs+0x3c>)
 800b8fc:	78db      	ldrb	r3, [r3, #3]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00a      	beq.n	800b918 <SetupMessagingRxDMAs+0x30>
}
 800b902:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b904:	4908      	ldr	r1, [pc, #32]	; (800b928 <SetupMessagingRxDMAs+0x40>)
 800b906:	4809      	ldr	r0, [pc, #36]	; (800b92c <SetupMessagingRxDMAs+0x44>)
 800b908:	f7ff ffd4 	bl	800b8b4 <DMA_MSG_RX_Setup>
 800b90c:	e7f1      	b.n	800b8f2 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b90e:	4908      	ldr	r1, [pc, #32]	; (800b930 <SetupMessagingRxDMAs+0x48>)
 800b910:	4808      	ldr	r0, [pc, #32]	; (800b934 <SetupMessagingRxDMAs+0x4c>)
 800b912:	f7ff ffcf 	bl	800b8b4 <DMA_MSG_RX_Setup>
 800b916:	e7f0      	b.n	800b8fa <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b918:	4907      	ldr	r1, [pc, #28]	; (800b938 <SetupMessagingRxDMAs+0x50>)
 800b91a:	4808      	ldr	r0, [pc, #32]	; (800b93c <SetupMessagingRxDMAs+0x54>)
 800b91c:	f7ff ffca 	bl	800b8b4 <DMA_MSG_RX_Setup>
}
 800b920:	e7ef      	b.n	800b902 <SetupMessagingRxDMAs+0x1a>
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	20000870 	.word	0x20000870
 800b928:	20000ff4 	.word	0x20000ff4
 800b92c:	2000657c 	.word	0x2000657c
 800b930:	2000102c 	.word	0x2000102c
 800b934:	20006490 	.word	0x20006490
 800b938:	20001064 	.word	0x20001064
 800b93c:	2000635c 	.word	0x2000635c

0800b940 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b942:	b083      	sub	sp, #12
 800b944:	0004      	movs	r4, r0
	StopStreamDMA(port);
 800b946:	f7ff fb91 	bl	800b06c <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b94a:	9401      	str	r4, [sp, #4]
 800b94c:	3c01      	subs	r4, #1
 800b94e:	00e7      	lsls	r7, r4, #3
 800b950:	1b3d      	subs	r5, r7, r4
 800b952:	00ed      	lsls	r5, r5, #3
 800b954:	4b0f      	ldr	r3, [pc, #60]	; (800b994 <SwitchStreamDMAToMsg+0x54>)
 800b956:	18ed      	adds	r5, r5, r3
 800b958:	4e0f      	ldr	r6, [pc, #60]	; (800b998 <SwitchStreamDMAToMsg+0x58>)
 800b95a:	1b3b      	subs	r3, r7, r4
 800b95c:	00db      	lsls	r3, r3, #3
 800b95e:	5999      	ldr	r1, [r3, r6]
 800b960:	0028      	movs	r0, r5
 800b962:	f7ff fb0b 	bl	800af7c <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b966:	1b3b      	subs	r3, r7, r4
 800b968:	00db      	lsls	r3, r3, #3
 800b96a:	18f3      	adds	r3, r6, r3
 800b96c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b96e:	f7fe fdaf 	bl	800a4d0 <GetPort>
 800b972:	2300      	movs	r3, #0
 800b974:	4a09      	ldr	r2, [pc, #36]	; (800b99c <SwitchStreamDMAToMsg+0x5c>)
 800b976:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800b978:	1b3f      	subs	r7, r7, r4
 800b97a:	00ff      	lsls	r7, r7, #3
 800b97c:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] = 0;
 800b97e:	00a4      	lsls	r4, r4, #2
 800b980:	4a07      	ldr	r2, [pc, #28]	; (800b9a0 <SwitchStreamDMAToMsg+0x60>)
 800b982:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b984:	9801      	ldr	r0, [sp, #4]
 800b986:	f002 fbfb 	bl	800e180 <GetUart>
 800b98a:	0029      	movs	r1, r5
 800b98c:	f7ff ff92 	bl	800b8b4 <DMA_MSG_RX_Setup>
}
 800b990:	b003      	add	sp, #12
 800b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b994:	20000ff4 	.word	0x20000ff4
 800b998:	200011ec 	.word	0x200011ec
 800b99c:	20000870 	.word	0x20000870
 800b9a0:	20000ccc 	.word	0x20000ccc

0800b9a4 <DMA_STREAM_Setup>:
{	
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	0005      	movs	r5, r0
 800b9a8:	000f      	movs	r7, r1
 800b9aa:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b9ac:	f7fe fd90 	bl	800a4d0 <GetPort>
	hDMA = &streamDMA[port-1];
 800b9b0:	3801      	subs	r0, #1
 800b9b2:	00c4      	lsls	r4, r0, #3
 800b9b4:	1a24      	subs	r4, r4, r0
 800b9b6:	00e4      	lsls	r4, r4, #3
 800b9b8:	4809      	ldr	r0, [pc, #36]	; (800b9e0 <DMA_STREAM_Setup+0x3c>)
 800b9ba:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b9bc:	0021      	movs	r1, r4
 800b9be:	0028      	movs	r0, r5
 800b9c0:	f7ff fc4a 	bl	800b258 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	0020      	movs	r0, r4
 800b9c8:	f7ff fb90 	bl	800b0ec <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b9cc:	2369      	movs	r3, #105	; 0x69
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	3128      	adds	r1, #40	; 0x28
 800b9d6:	0032      	movs	r2, r6
 800b9d8:	0028      	movs	r0, r5
 800b9da:	f007 fa37 	bl	8012e4c <HAL_UART_Receive_DMA>
}
 800b9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e0:	200011ec 	.word	0x200011ec

0800b9e4 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b9e4:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800b9e6:	6803      	ldr	r3, [r0, #0]
 800b9e8:	4abd      	ldr	r2, [pc, #756]	; (800bce0 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d02f      	beq.n	800ba4e <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800b9ee:	4abd      	ldr	r2, [pc, #756]	; (800bce4 <RemapAndLinkDMAtoUARTTx+0x300>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d100      	bne.n	800b9f6 <RemapAndLinkDMAtoUARTTx+0x12>
 800b9f4:	e087      	b.n	800bb06 <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800b9f6:	4abc      	ldr	r2, [pc, #752]	; (800bce8 <RemapAndLinkDMAtoUARTTx+0x304>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d100      	bne.n	800b9fe <RemapAndLinkDMAtoUARTTx+0x1a>
 800b9fc:	e0dc      	b.n	800bbb8 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800b9fe:	4abb      	ldr	r2, [pc, #748]	; (800bcec <RemapAndLinkDMAtoUARTTx+0x308>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d000      	beq.n	800ba06 <RemapAndLinkDMAtoUARTTx+0x22>
 800ba04:	e18a      	b.n	800bd1c <RemapAndLinkDMAtoUARTTx+0x338>
 800ba06:	680b      	ldr	r3, [r1, #0]
 800ba08:	4ab9      	ldr	r2, [pc, #740]	; (800bcf0 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d100      	bne.n	800ba10 <RemapAndLinkDMAtoUARTTx+0x2c>
 800ba0e:	e12d      	b.n	800bc6c <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800ba10:	4ab8      	ldr	r2, [pc, #736]	; (800bcf4 <RemapAndLinkDMAtoUARTTx+0x310>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d100      	bne.n	800ba18 <RemapAndLinkDMAtoUARTTx+0x34>
 800ba16:	e134      	b.n	800bc82 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800ba18:	4ab7      	ldr	r2, [pc, #732]	; (800bcf8 <RemapAndLinkDMAtoUARTTx+0x314>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d100      	bne.n	800ba20 <RemapAndLinkDMAtoUARTTx+0x3c>
 800ba1e:	e13c      	b.n	800bc9a <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800ba20:	4ab6      	ldr	r2, [pc, #728]	; (800bcfc <RemapAndLinkDMAtoUARTTx+0x318>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d100      	bne.n	800ba28 <RemapAndLinkDMAtoUARTTx+0x44>
 800ba26:	e144      	b.n	800bcb2 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800ba28:	4ab5      	ldr	r2, [pc, #724]	; (800bd00 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d100      	bne.n	800ba30 <RemapAndLinkDMAtoUARTTx+0x4c>
 800ba2e:	e14b      	b.n	800bcc8 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800ba30:	4ab4      	ldr	r2, [pc, #720]	; (800bd04 <RemapAndLinkDMAtoUARTTx+0x320>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d11e      	bne.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800ba36:	4ab4      	ldr	r2, [pc, #720]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800ba38:	23a8      	movs	r3, #168	; 0xa8
 800ba3a:	58d4      	ldr	r4, [r2, r3]
 800ba3c:	4db3      	ldr	r5, [pc, #716]	; (800bd0c <RemapAndLinkDMAtoUARTTx+0x328>)
 800ba3e:	402c      	ands	r4, r5
 800ba40:	50d4      	str	r4, [r2, r3]
 800ba42:	58d5      	ldr	r5, [r2, r3]
 800ba44:	24b0      	movs	r4, #176	; 0xb0
 800ba46:	0324      	lsls	r4, r4, #12
 800ba48:	432c      	orrs	r4, r5
 800ba4a:	50d4      	str	r4, [r2, r3]
 800ba4c:	e012      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800ba4e:	680b      	ldr	r3, [r1, #0]
 800ba50:	4aa7      	ldr	r2, [pc, #668]	; (800bcf0 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d011      	beq.n	800ba7a <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800ba56:	4aa7      	ldr	r2, [pc, #668]	; (800bcf4 <RemapAndLinkDMAtoUARTTx+0x310>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d019      	beq.n	800ba90 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800ba5c:	4aa6      	ldr	r2, [pc, #664]	; (800bcf8 <RemapAndLinkDMAtoUARTTx+0x314>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d022      	beq.n	800baa8 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800ba62:	4aa6      	ldr	r2, [pc, #664]	; (800bcfc <RemapAndLinkDMAtoUARTTx+0x318>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d02b      	beq.n	800bac0 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800ba68:	4aa5      	ldr	r2, [pc, #660]	; (800bd00 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d033      	beq.n	800bad6 <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800ba6e:	4aa5      	ldr	r2, [pc, #660]	; (800bd04 <RemapAndLinkDMAtoUARTTx+0x320>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d03c      	beq.n	800baee <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800ba74:	6601      	str	r1, [r0, #96]	; 0x60
 800ba76:	6248      	str	r0, [r1, #36]	; 0x24
}
 800ba78:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800ba7a:	4aa5      	ldr	r2, [pc, #660]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ba7c:	23a8      	movs	r3, #168	; 0xa8
 800ba7e:	58d4      	ldr	r4, [r2, r3]
 800ba80:	25f0      	movs	r5, #240	; 0xf0
 800ba82:	43ac      	bics	r4, r5
 800ba84:	50d4      	str	r4, [r2, r3]
 800ba86:	58d4      	ldr	r4, [r2, r3]
 800ba88:	3d70      	subs	r5, #112	; 0x70
 800ba8a:	432c      	orrs	r4, r5
 800ba8c:	50d4      	str	r4, [r2, r3]
 800ba8e:	e7f1      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800ba90:	4a9f      	ldr	r2, [pc, #636]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800ba92:	23a8      	movs	r3, #168	; 0xa8
 800ba94:	58d4      	ldr	r4, [r2, r3]
 800ba96:	4d9f      	ldr	r5, [pc, #636]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800ba98:	402c      	ands	r4, r5
 800ba9a:	50d4      	str	r4, [r2, r3]
 800ba9c:	58d5      	ldr	r5, [r2, r3]
 800ba9e:	2480      	movs	r4, #128	; 0x80
 800baa0:	0224      	lsls	r4, r4, #8
 800baa2:	432c      	orrs	r4, r5
 800baa4:	50d4      	str	r4, [r2, r3]
 800baa6:	e7e5      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800baa8:	4a99      	ldr	r2, [pc, #612]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800baaa:	23a8      	movs	r3, #168	; 0xa8
 800baac:	58d4      	ldr	r4, [r2, r3]
 800baae:	4d9a      	ldr	r5, [pc, #616]	; (800bd18 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bab0:	402c      	ands	r4, r5
 800bab2:	50d4      	str	r4, [r2, r3]
 800bab4:	58d5      	ldr	r5, [r2, r3]
 800bab6:	2480      	movs	r4, #128	; 0x80
 800bab8:	0524      	lsls	r4, r4, #20
 800baba:	432c      	orrs	r4, r5
 800babc:	50d4      	str	r4, [r2, r3]
 800babe:	e7d9      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800bac0:	4a91      	ldr	r2, [pc, #580]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bac2:	23a8      	movs	r3, #168	; 0xa8
 800bac4:	58d4      	ldr	r4, [r2, r3]
 800bac6:	250f      	movs	r5, #15
 800bac8:	43ac      	bics	r4, r5
 800baca:	50d4      	str	r4, [r2, r3]
 800bacc:	58d4      	ldr	r4, [r2, r3]
 800bace:	3d07      	subs	r5, #7
 800bad0:	432c      	orrs	r4, r5
 800bad2:	50d4      	str	r4, [r2, r3]
 800bad4:	e7ce      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800bad6:	4a8c      	ldr	r2, [pc, #560]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bad8:	23a8      	movs	r3, #168	; 0xa8
 800bada:	58d4      	ldr	r4, [r2, r3]
 800badc:	4d8d      	ldr	r5, [pc, #564]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bade:	402c      	ands	r4, r5
 800bae0:	50d4      	str	r4, [r2, r3]
 800bae2:	58d5      	ldr	r5, [r2, r3]
 800bae4:	2480      	movs	r4, #128	; 0x80
 800bae6:	0224      	lsls	r4, r4, #8
 800bae8:	432c      	orrs	r4, r5
 800baea:	50d4      	str	r4, [r2, r3]
 800baec:	e7c2      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800baee:	4a86      	ldr	r2, [pc, #536]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800baf0:	23a8      	movs	r3, #168	; 0xa8
 800baf2:	58d4      	ldr	r4, [r2, r3]
 800baf4:	4d85      	ldr	r5, [pc, #532]	; (800bd0c <RemapAndLinkDMAtoUARTTx+0x328>)
 800baf6:	402c      	ands	r4, r5
 800baf8:	50d4      	str	r4, [r2, r3]
 800bafa:	58d5      	ldr	r5, [r2, r3]
 800bafc:	2480      	movs	r4, #128	; 0x80
 800bafe:	0324      	lsls	r4, r4, #12
 800bb00:	432c      	orrs	r4, r5
 800bb02:	50d4      	str	r4, [r2, r3]
 800bb04:	e7b6      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800bb06:	680b      	ldr	r3, [r1, #0]
 800bb08:	4a79      	ldr	r2, [pc, #484]	; (800bcf0 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d01a      	beq.n	800bb44 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800bb0e:	4a79      	ldr	r2, [pc, #484]	; (800bcf4 <RemapAndLinkDMAtoUARTTx+0x310>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d022      	beq.n	800bb5a <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800bb14:	4a78      	ldr	r2, [pc, #480]	; (800bcf8 <RemapAndLinkDMAtoUARTTx+0x314>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d02b      	beq.n	800bb72 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800bb1a:	4a78      	ldr	r2, [pc, #480]	; (800bcfc <RemapAndLinkDMAtoUARTTx+0x318>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d034      	beq.n	800bb8a <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800bb20:	4a77      	ldr	r2, [pc, #476]	; (800bd00 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d03c      	beq.n	800bba0 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800bb26:	4a77      	ldr	r2, [pc, #476]	; (800bd04 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d1a3      	bne.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800bb2c:	4a76      	ldr	r2, [pc, #472]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bb2e:	23a8      	movs	r3, #168	; 0xa8
 800bb30:	58d4      	ldr	r4, [r2, r3]
 800bb32:	4d76      	ldr	r5, [pc, #472]	; (800bd0c <RemapAndLinkDMAtoUARTTx+0x328>)
 800bb34:	402c      	ands	r4, r5
 800bb36:	50d4      	str	r4, [r2, r3]
 800bb38:	58d5      	ldr	r5, [r2, r3]
 800bb3a:	2490      	movs	r4, #144	; 0x90
 800bb3c:	0324      	lsls	r4, r4, #12
 800bb3e:	432c      	orrs	r4, r5
 800bb40:	50d4      	str	r4, [r2, r3]
 800bb42:	e797      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800bb44:	4a72      	ldr	r2, [pc, #456]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bb46:	23a8      	movs	r3, #168	; 0xa8
 800bb48:	58d4      	ldr	r4, [r2, r3]
 800bb4a:	25f0      	movs	r5, #240	; 0xf0
 800bb4c:	43ac      	bics	r4, r5
 800bb4e:	50d4      	str	r4, [r2, r3]
 800bb50:	58d4      	ldr	r4, [r2, r3]
 800bb52:	3d60      	subs	r5, #96	; 0x60
 800bb54:	432c      	orrs	r4, r5
 800bb56:	50d4      	str	r4, [r2, r3]
 800bb58:	e78c      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800bb5a:	4a6d      	ldr	r2, [pc, #436]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bb5c:	23a8      	movs	r3, #168	; 0xa8
 800bb5e:	58d4      	ldr	r4, [r2, r3]
 800bb60:	4d6c      	ldr	r5, [pc, #432]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bb62:	402c      	ands	r4, r5
 800bb64:	50d4      	str	r4, [r2, r3]
 800bb66:	58d5      	ldr	r5, [r2, r3]
 800bb68:	2490      	movs	r4, #144	; 0x90
 800bb6a:	0224      	lsls	r4, r4, #8
 800bb6c:	432c      	orrs	r4, r5
 800bb6e:	50d4      	str	r4, [r2, r3]
 800bb70:	e780      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800bb72:	4a67      	ldr	r2, [pc, #412]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bb74:	23a8      	movs	r3, #168	; 0xa8
 800bb76:	58d4      	ldr	r4, [r2, r3]
 800bb78:	4d67      	ldr	r5, [pc, #412]	; (800bd18 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bb7a:	402c      	ands	r4, r5
 800bb7c:	50d4      	str	r4, [r2, r3]
 800bb7e:	58d5      	ldr	r5, [r2, r3]
 800bb80:	2490      	movs	r4, #144	; 0x90
 800bb82:	0524      	lsls	r4, r4, #20
 800bb84:	432c      	orrs	r4, r5
 800bb86:	50d4      	str	r4, [r2, r3]
 800bb88:	e774      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800bb8a:	4a5f      	ldr	r2, [pc, #380]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bb8c:	23a8      	movs	r3, #168	; 0xa8
 800bb8e:	58d4      	ldr	r4, [r2, r3]
 800bb90:	250f      	movs	r5, #15
 800bb92:	43ac      	bics	r4, r5
 800bb94:	50d4      	str	r4, [r2, r3]
 800bb96:	58d4      	ldr	r4, [r2, r3]
 800bb98:	3d06      	subs	r5, #6
 800bb9a:	432c      	orrs	r4, r5
 800bb9c:	50d4      	str	r4, [r2, r3]
 800bb9e:	e769      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800bba0:	4a59      	ldr	r2, [pc, #356]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bba2:	23a8      	movs	r3, #168	; 0xa8
 800bba4:	58d4      	ldr	r4, [r2, r3]
 800bba6:	4d5b      	ldr	r5, [pc, #364]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bba8:	402c      	ands	r4, r5
 800bbaa:	50d4      	str	r4, [r2, r3]
 800bbac:	58d5      	ldr	r5, [r2, r3]
 800bbae:	2490      	movs	r4, #144	; 0x90
 800bbb0:	0224      	lsls	r4, r4, #8
 800bbb2:	432c      	orrs	r4, r5
 800bbb4:	50d4      	str	r4, [r2, r3]
 800bbb6:	e75d      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800bbb8:	680b      	ldr	r3, [r1, #0]
 800bbba:	4a4d      	ldr	r2, [pc, #308]	; (800bcf0 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d01b      	beq.n	800bbf8 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800bbc0:	4a4c      	ldr	r2, [pc, #304]	; (800bcf4 <RemapAndLinkDMAtoUARTTx+0x310>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d023      	beq.n	800bc0e <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800bbc6:	4a4c      	ldr	r2, [pc, #304]	; (800bcf8 <RemapAndLinkDMAtoUARTTx+0x314>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d02c      	beq.n	800bc26 <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800bbcc:	4a4b      	ldr	r2, [pc, #300]	; (800bcfc <RemapAndLinkDMAtoUARTTx+0x318>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d035      	beq.n	800bc3e <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800bbd2:	4a4b      	ldr	r2, [pc, #300]	; (800bd00 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d03d      	beq.n	800bc54 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800bbd8:	4a4a      	ldr	r2, [pc, #296]	; (800bd04 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d000      	beq.n	800bbe0 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800bbde:	e749      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800bbe0:	4a49      	ldr	r2, [pc, #292]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bbe2:	23a8      	movs	r3, #168	; 0xa8
 800bbe4:	58d4      	ldr	r4, [r2, r3]
 800bbe6:	4d49      	ldr	r5, [pc, #292]	; (800bd0c <RemapAndLinkDMAtoUARTTx+0x328>)
 800bbe8:	402c      	ands	r4, r5
 800bbea:	50d4      	str	r4, [r2, r3]
 800bbec:	58d5      	ldr	r5, [r2, r3]
 800bbee:	24a0      	movs	r4, #160	; 0xa0
 800bbf0:	0324      	lsls	r4, r4, #12
 800bbf2:	432c      	orrs	r4, r5
 800bbf4:	50d4      	str	r4, [r2, r3]
 800bbf6:	e73d      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800bbf8:	4a45      	ldr	r2, [pc, #276]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bbfa:	23a8      	movs	r3, #168	; 0xa8
 800bbfc:	58d4      	ldr	r4, [r2, r3]
 800bbfe:	25f0      	movs	r5, #240	; 0xf0
 800bc00:	43ac      	bics	r4, r5
 800bc02:	50d4      	str	r4, [r2, r3]
 800bc04:	58d4      	ldr	r4, [r2, r3]
 800bc06:	3d50      	subs	r5, #80	; 0x50
 800bc08:	432c      	orrs	r4, r5
 800bc0a:	50d4      	str	r4, [r2, r3]
 800bc0c:	e732      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800bc0e:	4a40      	ldr	r2, [pc, #256]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc10:	23a8      	movs	r3, #168	; 0xa8
 800bc12:	58d4      	ldr	r4, [r2, r3]
 800bc14:	4d3f      	ldr	r5, [pc, #252]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bc16:	402c      	ands	r4, r5
 800bc18:	50d4      	str	r4, [r2, r3]
 800bc1a:	58d5      	ldr	r5, [r2, r3]
 800bc1c:	24a0      	movs	r4, #160	; 0xa0
 800bc1e:	0224      	lsls	r4, r4, #8
 800bc20:	432c      	orrs	r4, r5
 800bc22:	50d4      	str	r4, [r2, r3]
 800bc24:	e726      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800bc26:	4a3a      	ldr	r2, [pc, #232]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc28:	23a8      	movs	r3, #168	; 0xa8
 800bc2a:	58d4      	ldr	r4, [r2, r3]
 800bc2c:	4d3a      	ldr	r5, [pc, #232]	; (800bd18 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bc2e:	402c      	ands	r4, r5
 800bc30:	50d4      	str	r4, [r2, r3]
 800bc32:	58d5      	ldr	r5, [r2, r3]
 800bc34:	24a0      	movs	r4, #160	; 0xa0
 800bc36:	0524      	lsls	r4, r4, #20
 800bc38:	432c      	orrs	r4, r5
 800bc3a:	50d4      	str	r4, [r2, r3]
 800bc3c:	e71a      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800bc3e:	4a32      	ldr	r2, [pc, #200]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bc40:	23a8      	movs	r3, #168	; 0xa8
 800bc42:	58d4      	ldr	r4, [r2, r3]
 800bc44:	250f      	movs	r5, #15
 800bc46:	43ac      	bics	r4, r5
 800bc48:	50d4      	str	r4, [r2, r3]
 800bc4a:	58d4      	ldr	r4, [r2, r3]
 800bc4c:	3d05      	subs	r5, #5
 800bc4e:	432c      	orrs	r4, r5
 800bc50:	50d4      	str	r4, [r2, r3]
 800bc52:	e70f      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800bc54:	4a2c      	ldr	r2, [pc, #176]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bc56:	23a8      	movs	r3, #168	; 0xa8
 800bc58:	58d4      	ldr	r4, [r2, r3]
 800bc5a:	4d2e      	ldr	r5, [pc, #184]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bc5c:	402c      	ands	r4, r5
 800bc5e:	50d4      	str	r4, [r2, r3]
 800bc60:	58d5      	ldr	r5, [r2, r3]
 800bc62:	24a0      	movs	r4, #160	; 0xa0
 800bc64:	0224      	lsls	r4, r4, #8
 800bc66:	432c      	orrs	r4, r5
 800bc68:	50d4      	str	r4, [r2, r3]
 800bc6a:	e703      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800bc6c:	4a28      	ldr	r2, [pc, #160]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc6e:	23a8      	movs	r3, #168	; 0xa8
 800bc70:	58d4      	ldr	r4, [r2, r3]
 800bc72:	25f0      	movs	r5, #240	; 0xf0
 800bc74:	43ac      	bics	r4, r5
 800bc76:	50d4      	str	r4, [r2, r3]
 800bc78:	58d4      	ldr	r4, [r2, r3]
 800bc7a:	3d40      	subs	r5, #64	; 0x40
 800bc7c:	432c      	orrs	r4, r5
 800bc7e:	50d4      	str	r4, [r2, r3]
 800bc80:	e6f8      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800bc82:	4a23      	ldr	r2, [pc, #140]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc84:	23a8      	movs	r3, #168	; 0xa8
 800bc86:	58d4      	ldr	r4, [r2, r3]
 800bc88:	4d22      	ldr	r5, [pc, #136]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bc8a:	402c      	ands	r4, r5
 800bc8c:	50d4      	str	r4, [r2, r3]
 800bc8e:	58d5      	ldr	r5, [r2, r3]
 800bc90:	24b0      	movs	r4, #176	; 0xb0
 800bc92:	0224      	lsls	r4, r4, #8
 800bc94:	432c      	orrs	r4, r5
 800bc96:	50d4      	str	r4, [r2, r3]
 800bc98:	e6ec      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800bc9a:	4a1d      	ldr	r2, [pc, #116]	; (800bd10 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc9c:	23a8      	movs	r3, #168	; 0xa8
 800bc9e:	58d4      	ldr	r4, [r2, r3]
 800bca0:	4d1d      	ldr	r5, [pc, #116]	; (800bd18 <RemapAndLinkDMAtoUARTTx+0x334>)
 800bca2:	402c      	ands	r4, r5
 800bca4:	50d4      	str	r4, [r2, r3]
 800bca6:	58d5      	ldr	r5, [r2, r3]
 800bca8:	24b0      	movs	r4, #176	; 0xb0
 800bcaa:	0524      	lsls	r4, r4, #20
 800bcac:	432c      	orrs	r4, r5
 800bcae:	50d4      	str	r4, [r2, r3]
 800bcb0:	e6e0      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800bcb2:	4a15      	ldr	r2, [pc, #84]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bcb4:	23a8      	movs	r3, #168	; 0xa8
 800bcb6:	58d4      	ldr	r4, [r2, r3]
 800bcb8:	250f      	movs	r5, #15
 800bcba:	43ac      	bics	r4, r5
 800bcbc:	50d4      	str	r4, [r2, r3]
 800bcbe:	58d4      	ldr	r4, [r2, r3]
 800bcc0:	3d04      	subs	r5, #4
 800bcc2:	432c      	orrs	r4, r5
 800bcc4:	50d4      	str	r4, [r2, r3]
 800bcc6:	e6d5      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800bcc8:	4a0f      	ldr	r2, [pc, #60]	; (800bd08 <RemapAndLinkDMAtoUARTTx+0x324>)
 800bcca:	23a8      	movs	r3, #168	; 0xa8
 800bccc:	58d4      	ldr	r4, [r2, r3]
 800bcce:	4d11      	ldr	r5, [pc, #68]	; (800bd14 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bcd0:	402c      	ands	r4, r5
 800bcd2:	50d4      	str	r4, [r2, r3]
 800bcd4:	58d5      	ldr	r5, [r2, r3]
 800bcd6:	24b0      	movs	r4, #176	; 0xb0
 800bcd8:	0224      	lsls	r4, r4, #8
 800bcda:	432c      	orrs	r4, r5
 800bcdc:	50d4      	str	r4, [r2, r3]
 800bcde:	e6c9      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
 800bce0:	40013800 	.word	0x40013800
 800bce4:	40004400 	.word	0x40004400
 800bce8:	40004800 	.word	0x40004800
 800bcec:	40004c00 	.word	0x40004c00
 800bcf0:	4002001c 	.word	0x4002001c
 800bcf4:	40020044 	.word	0x40020044
 800bcf8:	40020080 	.word	0x40020080
 800bcfc:	40020408 	.word	0x40020408
 800bd00:	40020444 	.word	0x40020444
 800bd04:	40020458 	.word	0x40020458
 800bd08:	40020400 	.word	0x40020400
 800bd0c:	fff0ffff 	.word	0xfff0ffff
 800bd10:	40020000 	.word	0x40020000
 800bd14:	ffff0fff 	.word	0xffff0fff
 800bd18:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800bd1c:	4ab9      	ldr	r2, [pc, #740]	; (800c004 <RemapAndLinkDMAtoUARTTx+0x620>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d159      	bne.n	800bdd6 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800bd22:	680b      	ldr	r3, [r1, #0]
 800bd24:	4ab8      	ldr	r2, [pc, #736]	; (800c008 <RemapAndLinkDMAtoUARTTx+0x624>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d01b      	beq.n	800bd62 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800bd2a:	4ab8      	ldr	r2, [pc, #736]	; (800c00c <RemapAndLinkDMAtoUARTTx+0x628>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d023      	beq.n	800bd78 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800bd30:	4ab7      	ldr	r2, [pc, #732]	; (800c010 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d02c      	beq.n	800bd90 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800bd36:	4ab7      	ldr	r2, [pc, #732]	; (800c014 <RemapAndLinkDMAtoUARTTx+0x630>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d035      	beq.n	800bda8 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800bd3c:	4ab6      	ldr	r2, [pc, #728]	; (800c018 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d03d      	beq.n	800bdbe <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800bd42:	4ab6      	ldr	r2, [pc, #728]	; (800c01c <RemapAndLinkDMAtoUARTTx+0x638>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d000      	beq.n	800bd4a <RemapAndLinkDMAtoUARTTx+0x366>
 800bd48:	e694      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800bd4a:	4ab5      	ldr	r2, [pc, #724]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bd4c:	23a8      	movs	r3, #168	; 0xa8
 800bd4e:	58d4      	ldr	r4, [r2, r3]
 800bd50:	4db4      	ldr	r5, [pc, #720]	; (800c024 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bd52:	402c      	ands	r4, r5
 800bd54:	50d4      	str	r4, [r2, r3]
 800bd56:	58d5      	ldr	r5, [r2, r3]
 800bd58:	24c0      	movs	r4, #192	; 0xc0
 800bd5a:	0324      	lsls	r4, r4, #12
 800bd5c:	432c      	orrs	r4, r5
 800bd5e:	50d4      	str	r4, [r2, r3]
 800bd60:	e688      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800bd62:	4ab1      	ldr	r2, [pc, #708]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bd64:	23a8      	movs	r3, #168	; 0xa8
 800bd66:	58d4      	ldr	r4, [r2, r3]
 800bd68:	25f0      	movs	r5, #240	; 0xf0
 800bd6a:	43ac      	bics	r4, r5
 800bd6c:	50d4      	str	r4, [r2, r3]
 800bd6e:	58d4      	ldr	r4, [r2, r3]
 800bd70:	3d30      	subs	r5, #48	; 0x30
 800bd72:	432c      	orrs	r4, r5
 800bd74:	50d4      	str	r4, [r2, r3]
 800bd76:	e67d      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800bd78:	4aab      	ldr	r2, [pc, #684]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bd7a:	23a8      	movs	r3, #168	; 0xa8
 800bd7c:	58d4      	ldr	r4, [r2, r3]
 800bd7e:	4dab      	ldr	r5, [pc, #684]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800bd80:	402c      	ands	r4, r5
 800bd82:	50d4      	str	r4, [r2, r3]
 800bd84:	58d5      	ldr	r5, [r2, r3]
 800bd86:	24c0      	movs	r4, #192	; 0xc0
 800bd88:	0224      	lsls	r4, r4, #8
 800bd8a:	432c      	orrs	r4, r5
 800bd8c:	50d4      	str	r4, [r2, r3]
 800bd8e:	e671      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800bd90:	4aa5      	ldr	r2, [pc, #660]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bd92:	23a8      	movs	r3, #168	; 0xa8
 800bd94:	58d4      	ldr	r4, [r2, r3]
 800bd96:	4da6      	ldr	r5, [pc, #664]	; (800c030 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800bd98:	402c      	ands	r4, r5
 800bd9a:	50d4      	str	r4, [r2, r3]
 800bd9c:	58d5      	ldr	r5, [r2, r3]
 800bd9e:	24c0      	movs	r4, #192	; 0xc0
 800bda0:	0524      	lsls	r4, r4, #20
 800bda2:	432c      	orrs	r4, r5
 800bda4:	50d4      	str	r4, [r2, r3]
 800bda6:	e665      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800bda8:	4a9d      	ldr	r2, [pc, #628]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bdaa:	23a8      	movs	r3, #168	; 0xa8
 800bdac:	58d4      	ldr	r4, [r2, r3]
 800bdae:	250f      	movs	r5, #15
 800bdb0:	43ac      	bics	r4, r5
 800bdb2:	50d4      	str	r4, [r2, r3]
 800bdb4:	58d4      	ldr	r4, [r2, r3]
 800bdb6:	3d03      	subs	r5, #3
 800bdb8:	432c      	orrs	r4, r5
 800bdba:	50d4      	str	r4, [r2, r3]
 800bdbc:	e65a      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800bdbe:	4a98      	ldr	r2, [pc, #608]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bdc0:	23a8      	movs	r3, #168	; 0xa8
 800bdc2:	58d4      	ldr	r4, [r2, r3]
 800bdc4:	4d99      	ldr	r5, [pc, #612]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800bdc6:	402c      	ands	r4, r5
 800bdc8:	50d4      	str	r4, [r2, r3]
 800bdca:	58d5      	ldr	r5, [r2, r3]
 800bdcc:	24c0      	movs	r4, #192	; 0xc0
 800bdce:	0224      	lsls	r4, r4, #8
 800bdd0:	432c      	orrs	r4, r5
 800bdd2:	50d4      	str	r4, [r2, r3]
 800bdd4:	e64e      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800bdd6:	4a97      	ldr	r2, [pc, #604]	; (800c034 <RemapAndLinkDMAtoUARTTx+0x650>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d159      	bne.n	800be90 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800bddc:	680b      	ldr	r3, [r1, #0]
 800bdde:	4a8a      	ldr	r2, [pc, #552]	; (800c008 <RemapAndLinkDMAtoUARTTx+0x624>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d01b      	beq.n	800be1c <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800bde4:	4a89      	ldr	r2, [pc, #548]	; (800c00c <RemapAndLinkDMAtoUARTTx+0x628>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d023      	beq.n	800be32 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800bdea:	4a89      	ldr	r2, [pc, #548]	; (800c010 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d02c      	beq.n	800be4a <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800bdf0:	4a88      	ldr	r2, [pc, #544]	; (800c014 <RemapAndLinkDMAtoUARTTx+0x630>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d035      	beq.n	800be62 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800bdf6:	4a88      	ldr	r2, [pc, #544]	; (800c018 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d03d      	beq.n	800be78 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800bdfc:	4a87      	ldr	r2, [pc, #540]	; (800c01c <RemapAndLinkDMAtoUARTTx+0x638>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d000      	beq.n	800be04 <RemapAndLinkDMAtoUARTTx+0x420>
 800be02:	e637      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800be04:	4a86      	ldr	r2, [pc, #536]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800be06:	23a8      	movs	r3, #168	; 0xa8
 800be08:	58d4      	ldr	r4, [r2, r3]
 800be0a:	4d86      	ldr	r5, [pc, #536]	; (800c024 <RemapAndLinkDMAtoUARTTx+0x640>)
 800be0c:	402c      	ands	r4, r5
 800be0e:	50d4      	str	r4, [r2, r3]
 800be10:	58d5      	ldr	r5, [r2, r3]
 800be12:	24d0      	movs	r4, #208	; 0xd0
 800be14:	0324      	lsls	r4, r4, #12
 800be16:	432c      	orrs	r4, r5
 800be18:	50d4      	str	r4, [r2, r3]
 800be1a:	e62b      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800be1c:	4a82      	ldr	r2, [pc, #520]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800be1e:	23a8      	movs	r3, #168	; 0xa8
 800be20:	58d4      	ldr	r4, [r2, r3]
 800be22:	25f0      	movs	r5, #240	; 0xf0
 800be24:	43ac      	bics	r4, r5
 800be26:	50d4      	str	r4, [r2, r3]
 800be28:	58d4      	ldr	r4, [r2, r3]
 800be2a:	3d20      	subs	r5, #32
 800be2c:	432c      	orrs	r4, r5
 800be2e:	50d4      	str	r4, [r2, r3]
 800be30:	e620      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800be32:	4a7d      	ldr	r2, [pc, #500]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800be34:	23a8      	movs	r3, #168	; 0xa8
 800be36:	58d4      	ldr	r4, [r2, r3]
 800be38:	4d7c      	ldr	r5, [pc, #496]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800be3a:	402c      	ands	r4, r5
 800be3c:	50d4      	str	r4, [r2, r3]
 800be3e:	58d5      	ldr	r5, [r2, r3]
 800be40:	24d0      	movs	r4, #208	; 0xd0
 800be42:	0224      	lsls	r4, r4, #8
 800be44:	432c      	orrs	r4, r5
 800be46:	50d4      	str	r4, [r2, r3]
 800be48:	e614      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800be4a:	4a77      	ldr	r2, [pc, #476]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800be4c:	23a8      	movs	r3, #168	; 0xa8
 800be4e:	58d4      	ldr	r4, [r2, r3]
 800be50:	4d77      	ldr	r5, [pc, #476]	; (800c030 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800be52:	402c      	ands	r4, r5
 800be54:	50d4      	str	r4, [r2, r3]
 800be56:	58d5      	ldr	r5, [r2, r3]
 800be58:	24d0      	movs	r4, #208	; 0xd0
 800be5a:	0524      	lsls	r4, r4, #20
 800be5c:	432c      	orrs	r4, r5
 800be5e:	50d4      	str	r4, [r2, r3]
 800be60:	e608      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800be62:	4a6f      	ldr	r2, [pc, #444]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800be64:	23a8      	movs	r3, #168	; 0xa8
 800be66:	58d4      	ldr	r4, [r2, r3]
 800be68:	250f      	movs	r5, #15
 800be6a:	43ac      	bics	r4, r5
 800be6c:	50d4      	str	r4, [r2, r3]
 800be6e:	58d4      	ldr	r4, [r2, r3]
 800be70:	3d02      	subs	r5, #2
 800be72:	432c      	orrs	r4, r5
 800be74:	50d4      	str	r4, [r2, r3]
 800be76:	e5fd      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800be78:	4a69      	ldr	r2, [pc, #420]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800be7a:	23a8      	movs	r3, #168	; 0xa8
 800be7c:	58d4      	ldr	r4, [r2, r3]
 800be7e:	4d6b      	ldr	r5, [pc, #428]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800be80:	402c      	ands	r4, r5
 800be82:	50d4      	str	r4, [r2, r3]
 800be84:	58d5      	ldr	r5, [r2, r3]
 800be86:	24d0      	movs	r4, #208	; 0xd0
 800be88:	0224      	lsls	r4, r4, #8
 800be8a:	432c      	orrs	r4, r5
 800be8c:	50d4      	str	r4, [r2, r3]
 800be8e:	e5f1      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800be90:	4a69      	ldr	r2, [pc, #420]	; (800c038 <RemapAndLinkDMAtoUARTTx+0x654>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d159      	bne.n	800bf4a <RemapAndLinkDMAtoUARTTx+0x566>
 800be96:	680b      	ldr	r3, [r1, #0]
 800be98:	4a5b      	ldr	r2, [pc, #364]	; (800c008 <RemapAndLinkDMAtoUARTTx+0x624>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d01b      	beq.n	800bed6 <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800be9e:	4a5b      	ldr	r2, [pc, #364]	; (800c00c <RemapAndLinkDMAtoUARTTx+0x628>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d023      	beq.n	800beec <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800bea4:	4a5a      	ldr	r2, [pc, #360]	; (800c010 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d02c      	beq.n	800bf04 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800beaa:	4a5a      	ldr	r2, [pc, #360]	; (800c014 <RemapAndLinkDMAtoUARTTx+0x630>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d035      	beq.n	800bf1c <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800beb0:	4a59      	ldr	r2, [pc, #356]	; (800c018 <RemapAndLinkDMAtoUARTTx+0x634>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d03d      	beq.n	800bf32 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800beb6:	4a59      	ldr	r2, [pc, #356]	; (800c01c <RemapAndLinkDMAtoUARTTx+0x638>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d000      	beq.n	800bebe <RemapAndLinkDMAtoUARTTx+0x4da>
 800bebc:	e5da      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800bebe:	4a58      	ldr	r2, [pc, #352]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bec0:	23a8      	movs	r3, #168	; 0xa8
 800bec2:	58d4      	ldr	r4, [r2, r3]
 800bec4:	4d57      	ldr	r5, [pc, #348]	; (800c024 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bec6:	402c      	ands	r4, r5
 800bec8:	50d4      	str	r4, [r2, r3]
 800beca:	58d5      	ldr	r5, [r2, r3]
 800becc:	24e0      	movs	r4, #224	; 0xe0
 800bece:	0324      	lsls	r4, r4, #12
 800bed0:	432c      	orrs	r4, r5
 800bed2:	50d4      	str	r4, [r2, r3]
 800bed4:	e5ce      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800bed6:	4a54      	ldr	r2, [pc, #336]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bed8:	23a8      	movs	r3, #168	; 0xa8
 800beda:	58d4      	ldr	r4, [r2, r3]
 800bedc:	25f0      	movs	r5, #240	; 0xf0
 800bede:	43ac      	bics	r4, r5
 800bee0:	50d4      	str	r4, [r2, r3]
 800bee2:	58d4      	ldr	r4, [r2, r3]
 800bee4:	3d10      	subs	r5, #16
 800bee6:	432c      	orrs	r4, r5
 800bee8:	50d4      	str	r4, [r2, r3]
 800beea:	e5c3      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800beec:	4a4e      	ldr	r2, [pc, #312]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800beee:	23a8      	movs	r3, #168	; 0xa8
 800bef0:	58d4      	ldr	r4, [r2, r3]
 800bef2:	4d4e      	ldr	r5, [pc, #312]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800bef4:	402c      	ands	r4, r5
 800bef6:	50d4      	str	r4, [r2, r3]
 800bef8:	58d5      	ldr	r5, [r2, r3]
 800befa:	24e0      	movs	r4, #224	; 0xe0
 800befc:	0224      	lsls	r4, r4, #8
 800befe:	432c      	orrs	r4, r5
 800bf00:	50d4      	str	r4, [r2, r3]
 800bf02:	e5b7      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800bf04:	4a48      	ldr	r2, [pc, #288]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bf06:	23a8      	movs	r3, #168	; 0xa8
 800bf08:	58d4      	ldr	r4, [r2, r3]
 800bf0a:	4d49      	ldr	r5, [pc, #292]	; (800c030 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800bf0c:	402c      	ands	r4, r5
 800bf0e:	50d4      	str	r4, [r2, r3]
 800bf10:	58d5      	ldr	r5, [r2, r3]
 800bf12:	24e0      	movs	r4, #224	; 0xe0
 800bf14:	0524      	lsls	r4, r4, #20
 800bf16:	432c      	orrs	r4, r5
 800bf18:	50d4      	str	r4, [r2, r3]
 800bf1a:	e5ab      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800bf1c:	4a40      	ldr	r2, [pc, #256]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bf1e:	23a8      	movs	r3, #168	; 0xa8
 800bf20:	58d4      	ldr	r4, [r2, r3]
 800bf22:	250f      	movs	r5, #15
 800bf24:	43ac      	bics	r4, r5
 800bf26:	50d4      	str	r4, [r2, r3]
 800bf28:	58d4      	ldr	r4, [r2, r3]
 800bf2a:	3d01      	subs	r5, #1
 800bf2c:	432c      	orrs	r4, r5
 800bf2e:	50d4      	str	r4, [r2, r3]
 800bf30:	e5a0      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800bf32:	4a3b      	ldr	r2, [pc, #236]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bf34:	23a8      	movs	r3, #168	; 0xa8
 800bf36:	58d4      	ldr	r4, [r2, r3]
 800bf38:	4d3c      	ldr	r5, [pc, #240]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800bf3a:	402c      	ands	r4, r5
 800bf3c:	50d4      	str	r4, [r2, r3]
 800bf3e:	58d5      	ldr	r5, [r2, r3]
 800bf40:	24e0      	movs	r4, #224	; 0xe0
 800bf42:	0224      	lsls	r4, r4, #8
 800bf44:	432c      	orrs	r4, r5
 800bf46:	50d4      	str	r4, [r2, r3]
 800bf48:	e594      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800bf4a:	4a3c      	ldr	r2, [pc, #240]	; (800c03c <RemapAndLinkDMAtoUARTTx+0x658>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d000      	beq.n	800bf52 <RemapAndLinkDMAtoUARTTx+0x56e>
 800bf50:	e590      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
 800bf52:	680b      	ldr	r3, [r1, #0]
 800bf54:	4a2c      	ldr	r2, [pc, #176]	; (800c008 <RemapAndLinkDMAtoUARTTx+0x624>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d01b      	beq.n	800bf92 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800bf5a:	4a2c      	ldr	r2, [pc, #176]	; (800c00c <RemapAndLinkDMAtoUARTTx+0x628>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d022      	beq.n	800bfa6 <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800bf60:	4a2b      	ldr	r2, [pc, #172]	; (800c010 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d02b      	beq.n	800bfbe <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800bf66:	4a2b      	ldr	r2, [pc, #172]	; (800c014 <RemapAndLinkDMAtoUARTTx+0x630>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d034      	beq.n	800bfd6 <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800bf6c:	4a2a      	ldr	r2, [pc, #168]	; (800c018 <RemapAndLinkDMAtoUARTTx+0x634>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d03b      	beq.n	800bfea <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800bf72:	4a2a      	ldr	r2, [pc, #168]	; (800c01c <RemapAndLinkDMAtoUARTTx+0x638>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d000      	beq.n	800bf7a <RemapAndLinkDMAtoUARTTx+0x596>
 800bf78:	e57c      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800bf7a:	4a29      	ldr	r2, [pc, #164]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bf7c:	23a8      	movs	r3, #168	; 0xa8
 800bf7e:	58d4      	ldr	r4, [r2, r3]
 800bf80:	4d28      	ldr	r5, [pc, #160]	; (800c024 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bf82:	402c      	ands	r4, r5
 800bf84:	50d4      	str	r4, [r2, r3]
 800bf86:	58d5      	ldr	r5, [r2, r3]
 800bf88:	24f0      	movs	r4, #240	; 0xf0
 800bf8a:	0324      	lsls	r4, r4, #12
 800bf8c:	432c      	orrs	r4, r5
 800bf8e:	50d4      	str	r4, [r2, r3]
 800bf90:	e570      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800bf92:	4a25      	ldr	r2, [pc, #148]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bf94:	23a8      	movs	r3, #168	; 0xa8
 800bf96:	58d5      	ldr	r5, [r2, r3]
 800bf98:	26f0      	movs	r6, #240	; 0xf0
 800bf9a:	43b5      	bics	r5, r6
 800bf9c:	50d5      	str	r5, [r2, r3]
 800bf9e:	58d4      	ldr	r4, [r2, r3]
 800bfa0:	4334      	orrs	r4, r6
 800bfa2:	50d4      	str	r4, [r2, r3]
 800bfa4:	e566      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800bfa6:	4a20      	ldr	r2, [pc, #128]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bfa8:	23a8      	movs	r3, #168	; 0xa8
 800bfaa:	58d4      	ldr	r4, [r2, r3]
 800bfac:	4d1f      	ldr	r5, [pc, #124]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800bfae:	402c      	ands	r4, r5
 800bfb0:	50d4      	str	r4, [r2, r3]
 800bfb2:	58d5      	ldr	r5, [r2, r3]
 800bfb4:	24f0      	movs	r4, #240	; 0xf0
 800bfb6:	0224      	lsls	r4, r4, #8
 800bfb8:	432c      	orrs	r4, r5
 800bfba:	50d4      	str	r4, [r2, r3]
 800bfbc:	e55a      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800bfbe:	4a1a      	ldr	r2, [pc, #104]	; (800c028 <RemapAndLinkDMAtoUARTTx+0x644>)
 800bfc0:	23a8      	movs	r3, #168	; 0xa8
 800bfc2:	58d4      	ldr	r4, [r2, r3]
 800bfc4:	4d1a      	ldr	r5, [pc, #104]	; (800c030 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800bfc6:	402c      	ands	r4, r5
 800bfc8:	50d4      	str	r4, [r2, r3]
 800bfca:	58d5      	ldr	r5, [r2, r3]
 800bfcc:	24f0      	movs	r4, #240	; 0xf0
 800bfce:	0524      	lsls	r4, r4, #20
 800bfd0:	432c      	orrs	r4, r5
 800bfd2:	50d4      	str	r4, [r2, r3]
 800bfd4:	e54e      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800bfd6:	4a12      	ldr	r2, [pc, #72]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bfd8:	23a8      	movs	r3, #168	; 0xa8
 800bfda:	58d5      	ldr	r5, [r2, r3]
 800bfdc:	260f      	movs	r6, #15
 800bfde:	43b5      	bics	r5, r6
 800bfe0:	50d5      	str	r5, [r2, r3]
 800bfe2:	58d4      	ldr	r4, [r2, r3]
 800bfe4:	4334      	orrs	r4, r6
 800bfe6:	50d4      	str	r4, [r2, r3]
 800bfe8:	e544      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800bfea:	4a0d      	ldr	r2, [pc, #52]	; (800c020 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bfec:	23a8      	movs	r3, #168	; 0xa8
 800bfee:	58d4      	ldr	r4, [r2, r3]
 800bff0:	4d0e      	ldr	r5, [pc, #56]	; (800c02c <RemapAndLinkDMAtoUARTTx+0x648>)
 800bff2:	402c      	ands	r4, r5
 800bff4:	50d4      	str	r4, [r2, r3]
 800bff6:	58d5      	ldr	r5, [r2, r3]
 800bff8:	24f0      	movs	r4, #240	; 0xf0
 800bffa:	0224      	lsls	r4, r4, #8
 800bffc:	432c      	orrs	r4, r5
 800bffe:	50d4      	str	r4, [r2, r3]
 800c000:	e538      	b.n	800ba74 <RemapAndLinkDMAtoUARTTx+0x90>
 800c002:	46c0      	nop			; (mov r8, r8)
 800c004:	40005000 	.word	0x40005000
 800c008:	4002001c 	.word	0x4002001c
 800c00c:	40020044 	.word	0x40020044
 800c010:	40020080 	.word	0x40020080
 800c014:	40020408 	.word	0x40020408
 800c018:	40020444 	.word	0x40020444
 800c01c:	40020458 	.word	0x40020458
 800c020:	40020400 	.word	0x40020400
 800c024:	fff0ffff 	.word	0xfff0ffff
 800c028:	40020000 	.word	0x40020000
 800c02c:	ffff0fff 	.word	0xffff0fff
 800c030:	f0ffffff 	.word	0xf0ffffff
 800c034:	40011400 	.word	0x40011400
 800c038:	40011800 	.word	0x40011800
 800c03c:	40011c00 	.word	0x40011c00

0800c040 <DMA_MSG_TX_Setup>:
{	
 800c040:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c042:	4b0d      	ldr	r3, [pc, #52]	; (800c078 <DMA_MSG_TX_Setup+0x38>)
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	2b00      	cmp	r3, #0
 800c048:	d012      	beq.n	800c070 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c04a:	4b0b      	ldr	r3, [pc, #44]	; (800c078 <DMA_MSG_TX_Setup+0x38>)
 800c04c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d010      	beq.n	800c074 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c052:	4a09      	ldr	r2, [pc, #36]	; (800c078 <DMA_MSG_TX_Setup+0x38>)
 800c054:	2394      	movs	r3, #148	; 0x94
 800c056:	58d3      	ldr	r3, [r2, r3]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d007      	beq.n	800c06c <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c05c:	0021      	movs	r1, r4
 800c05e:	f7ff fcc1 	bl	800b9e4 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c062:	2100      	movs	r1, #0
 800c064:	0020      	movs	r0, r4
 800c066:	f7ff f841 	bl	800b0ec <SetupDMAInterrupts>
}
 800c06a:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c06c:	4c03      	ldr	r4, [pc, #12]	; (800c07c <DMA_MSG_TX_Setup+0x3c>)
 800c06e:	e7f5      	b.n	800c05c <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c070:	4c01      	ldr	r4, [pc, #4]	; (800c078 <DMA_MSG_TX_Setup+0x38>)
 800c072:	e7f3      	b.n	800c05c <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c074:	4c02      	ldr	r4, [pc, #8]	; (800c080 <DMA_MSG_TX_Setup+0x40>)
 800c076:	e7f1      	b.n	800c05c <DMA_MSG_TX_Setup+0x1c>
 800c078:	20001144 	.word	0x20001144
 800c07c:	200011b4 	.word	0x200011b4
 800c080:	2000117c 	.word	0x2000117c

0800c084 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c084:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c086:	4807      	ldr	r0, [pc, #28]	; (800c0a4 <CRC_Init+0x20>)
 800c088:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <CRC_Init+0x24>)
 800c08a:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c08c:	2310      	movs	r3, #16
 800c08e:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800c090:	2300      	movs	r3, #0
 800c092:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c094:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800c096:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800c098:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c09a:	3303      	adds	r3, #3
 800c09c:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c09e:	f004 fd6b 	bl	8010b78 <HAL_CRC_Init>
}
 800c0a2:	bd10      	pop	{r4, pc}
 800c0a4:	2000667c 	.word	0x2000667c
 800c0a8:	40023000 	.word	0x40023000

0800c0ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c0ac:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c0ae:	4a05      	ldr	r2, [pc, #20]	; (800c0c4 <HAL_CRC_MspInit+0x18>)
 800c0b0:	6951      	ldr	r1, [r2, #20]
 800c0b2:	2340      	movs	r3, #64	; 0x40
 800c0b4:	4319      	orrs	r1, r3
 800c0b6:	6151      	str	r1, [r2, #20]
 800c0b8:	6952      	ldr	r2, [r2, #20]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	9b01      	ldr	r3, [sp, #4]
}
 800c0c0:	b002      	add	sp, #8
 800c0c2:	4770      	bx	lr
 800c0c4:	40021000 	.word	0x40021000

0800c0c8 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800c0c8:	b570      	push	{r4, r5, r6, lr}
 800c0ca:	0004      	movs	r4, r0
 800c0cc:	000d      	movs	r5, r1
  uint8_t pTemp;
  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d015      	beq.n	800c0fe <CalculateCRC8+0x36>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800c0d2:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800c0d4:	2900      	cmp	r1, #0
 800c0d6:	d100      	bne.n	800c0da <CalculateCRC8+0x12>
}
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c0da:	088e      	lsrs	r6, r1, #2
 800c0dc:	0032      	movs	r2, r6
 800c0de:	0021      	movs	r1, r4
 800c0e0:	4808      	ldr	r0, [pc, #32]	; (800c104 <CalculateCRC8+0x3c>)
 800c0e2:	f004 fda6 	bl	8010c32 <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800c0e6:	07ab      	lsls	r3, r5, #30
 800c0e8:	d101      	bne.n	800c0ee <CalculateCRC8+0x26>
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c0ea:	b2c0      	uxtb	r0, r0
 800c0ec:	e7f4      	b.n	800c0d8 <CalculateCRC8+0x10>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800c0ee:	00b1      	lsls	r1, r6, #2
 800c0f0:	1861      	adds	r1, r4, r1
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	4803      	ldr	r0, [pc, #12]	; (800c104 <CalculateCRC8+0x3c>)
 800c0f6:	f004 fd70 	bl	8010bda <HAL_CRC_Accumulate>
 800c0fa:	b2c0      	uxtb	r0, r0
 800c0fc:	e7ec      	b.n	800c0d8 <CalculateCRC8+0x10>
  return 0;
 800c0fe:	2000      	movs	r0, #0
 800c100:	e7ea      	b.n	800c0d8 <CalculateCRC8+0x10>
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	2000667c 	.word	0x2000667c

0800c108 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	0006      	movs	r6, r0
 800c10c:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800c10e:	f005 faff 	bl	8011710 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c112:	4b2b      	ldr	r3, [pc, #172]	; (800c1c0 <EE_VerifyPageFullWriteVariable+0xb8>)
 800c114:	881a      	ldrh	r2, [r3, #0]
 800c116:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c118:	4b2a      	ldr	r3, [pc, #168]	; (800c1c4 <EE_VerifyPageFullWriteVariable+0xbc>)
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d104      	bne.n	800c12c <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 800c122:	4929      	ldr	r1, [pc, #164]	; (800c1c8 <EE_VerifyPageFullWriteVariable+0xc0>)
 800c124:	428a      	cmp	r2, r1
 800c126:	d007      	beq.n	800c138 <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800c128:	3302      	adds	r3, #2
 800c12a:	e005      	b.n	800c138 <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 800c12c:	2a00      	cmp	r2, #0
 800c12e:	d143      	bne.n	800c1b8 <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 800c130:	4925      	ldr	r1, [pc, #148]	; (800c1c8 <EE_VerifyPageFullWriteVariable+0xc0>)
 800c132:	428b      	cmp	r3, r1
 800c134:	d042      	beq.n	800c1bc <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800c136:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800c138:	4a24      	ldr	r2, [pc, #144]	; (800c1cc <EE_VerifyPageFullWriteVariable+0xc4>)
 800c13a:	189c      	adds	r4, r3, r2
 800c13c:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800c13e:	02db      	lsls	r3, r3, #11
 800c140:	4a23      	ldr	r2, [pc, #140]	; (800c1d0 <EE_VerifyPageFullWriteVariable+0xc8>)
 800c142:	4694      	mov	ip, r2
 800c144:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800c146:	6822      	ldr	r2, [r4, #0]
 800c148:	3201      	adds	r2, #1
 800c14a:	d005      	beq.n	800c158 <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800c14c:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800c14e:	429c      	cmp	r4, r3
 800c150:	d22e      	bcs.n	800c1b0 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800c152:	6822      	ldr	r2, [r4, #0]
 800c154:	3201      	adds	r2, #1
 800c156:	d1f9      	bne.n	800c14c <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800c158:	002a      	movs	r2, r5
 800c15a:	2300      	movs	r3, #0
 800c15c:	0021      	movs	r1, r4
 800c15e:	2001      	movs	r0, #1
 800c160:	f005 fb20 	bl	80117a4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c164:	481b      	ldr	r0, [pc, #108]	; (800c1d4 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c166:	f005 faef 	bl	8011748 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d003      	beq.n	800c176 <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800c16e:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <EE_VerifyPageFullWriteVariable+0xd0>)
 800c170:	69d8      	ldr	r0, [r3, #28]
 800c172:	b280      	uxth	r0, r0
 800c174:	e01f      	b.n	800c1b6 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c176:	4a19      	ldr	r2, [pc, #100]	; (800c1dc <EE_VerifyPageFullWriteVariable+0xd4>)
 800c178:	6913      	ldr	r3, [r2, #16]
 800c17a:	2101      	movs	r1, #1
 800c17c:	438b      	bics	r3, r1
 800c17e:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800c180:	1ca1      	adds	r1, r4, #2
 800c182:	0032      	movs	r2, r6
 800c184:	2300      	movs	r3, #0
 800c186:	2001      	movs	r0, #1
 800c188:	f005 fb0c 	bl	80117a4 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c18c:	4811      	ldr	r0, [pc, #68]	; (800c1d4 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c18e:	f005 fadb 	bl	8011748 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800c192:	2800      	cmp	r0, #0
 800c194:	d003      	beq.n	800c19e <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800c196:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <EE_VerifyPageFullWriteVariable+0xd0>)
 800c198:	69d8      	ldr	r0, [r3, #28]
 800c19a:	b280      	uxth	r0, r0
 800c19c:	e00b      	b.n	800c1b6 <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c19e:	4a0f      	ldr	r2, [pc, #60]	; (800c1dc <EE_VerifyPageFullWriteVariable+0xd4>)
 800c1a0:	6913      	ldr	r3, [r2, #16]
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	438b      	bics	r3, r1
 800c1a6:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800c1a8:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <EE_VerifyPageFullWriteVariable+0xd0>)
 800c1aa:	69d8      	ldr	r0, [r3, #28]
 800c1ac:	b280      	uxth	r0, r0
 800c1ae:	e002      	b.n	800c1b6 <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 800c1b0:	f005 fac0 	bl	8011734 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800c1b4:	2080      	movs	r0, #128	; 0x80
}
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 800c1b8:	20ab      	movs	r0, #171	; 0xab
 800c1ba:	e7fc      	b.n	800c1b6 <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e7bb      	b.n	800c138 <EE_VerifyPageFullWriteVariable+0x30>
 800c1c0:	0801e000 	.word	0x0801e000
 800c1c4:	0801f000 	.word	0x0801f000
 800c1c8:	0000eeee 	.word	0x0000eeee
 800c1cc:	0001003c 	.word	0x0001003c
 800c1d0:	0801effe 	.word	0x0801effe
 800c1d4:	0000c350 	.word	0x0000c350
 800c1d8:	200067b0 	.word	0x200067b0
 800c1dc:	40022000 	.word	0x40022000

0800c1e0 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800c1e0:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c1e2:	4b13      	ldr	r3, [pc, #76]	; (800c230 <EE_ReadVariable+0x50>)
 800c1e4:	881c      	ldrh	r4, [r3, #0]
 800c1e6:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c1e8:	4b12      	ldr	r3, [pc, #72]	; (800c234 <EE_ReadVariable+0x54>)
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800c1ee:	2c00      	cmp	r4, #0
 800c1f0:	d006      	beq.n	800c200 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 800c1f6:	20ab      	movs	r0, #171	; 0xab
 800c1f8:	e019      	b.n	800c22e <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	e017      	b.n	800c22e <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800c1fe:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800c200:	02e3      	lsls	r3, r4, #11
 800c202:	4a0d      	ldr	r2, [pc, #52]	; (800c238 <EE_ReadVariable+0x58>)
 800c204:	4694      	mov	ip, r2
 800c206:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800c208:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 800c20a:	4a0c      	ldr	r2, [pc, #48]	; (800c23c <EE_ReadVariable+0x5c>)
 800c20c:	4694      	mov	ip, r2
 800c20e:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 800c210:	881a      	ldrh	r2, [r3, #0]
 800c212:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800c214:	4290      	cmp	r0, r2
 800c216:	d006      	beq.n	800c226 <EE_ReadVariable+0x46>
			Address =Address - 4;
 800c218:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800c21a:	42a3      	cmp	r3, r4
 800c21c:	d9ed      	bls.n	800c1fa <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 800c21e:	881a      	ldrh	r2, [r3, #0]
 800c220:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800c222:	4282      	cmp	r2, r0
 800c224:	d1f8      	bne.n	800c218 <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800c226:	3b02      	subs	r3, #2
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 800c22c:	2000      	movs	r0, #0
}
 800c22e:	bd10      	pop	{r4, pc}
 800c230:	0801e000 	.word	0x0801e000
 800c234:	0801f000 	.word	0x0801f000
 800c238:	0801effe 	.word	0x0801effe
 800c23c:	0801e002 	.word	0x0801e002

0800c240 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	46de      	mov	lr, fp
 800c244:	4647      	mov	r7, r8
 800c246:	b580      	push	{r7, lr}
 800c248:	b083      	sub	sp, #12
 800c24a:	0005      	movs	r5, r0
 800c24c:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800c24e:	f005 fa5f 	bl	8011710 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800c252:	0031      	movs	r1, r6
 800c254:	0028      	movs	r0, r5
 800c256:	f7ff ff57 	bl	800c108 <EE_VerifyPageFullWriteVariable>
 800c25a:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800c25c:	2880      	cmp	r0, #128	; 0x80
 800c25e:	d007      	beq.n	800c270 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800c260:	f005 fa68 	bl	8011734 <HAL_FLASH_Lock>
}
 800c264:	0020      	movs	r0, r4
 800c266:	b003      	add	sp, #12
 800c268:	bc0c      	pop	{r2, r3}
 800c26a:	4690      	mov	r8, r2
 800c26c:	469b      	mov	fp, r3
 800c26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800c270:	f005 fa4e 	bl	8011710 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c274:	4b3e      	ldr	r3, [pc, #248]	; (800c370 <EE_WriteVariable+0x130>)
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c27a:	4a3e      	ldr	r2, [pc, #248]	; (800c374 <EE_WriteVariable+0x134>)
 800c27c:	8812      	ldrh	r2, [r2, #0]
 800c27e:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 800c280:	2b00      	cmp	r3, #0
 800c282:	d007      	beq.n	800c294 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800c284:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800c286:	2a00      	cmp	r2, #0
 800c288:	d1ea      	bne.n	800c260 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800c28a:	4b3a      	ldr	r3, [pc, #232]	; (800c374 <EE_WriteVariable+0x134>)
 800c28c:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800c28e:	4b38      	ldr	r3, [pc, #224]	; (800c370 <EE_WriteVariable+0x130>)
 800c290:	9301      	str	r3, [sp, #4]
 800c292:	e003      	b.n	800c29c <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800c294:	4b36      	ldr	r3, [pc, #216]	; (800c370 <EE_WriteVariable+0x130>)
 800c296:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800c298:	4b36      	ldr	r3, [pc, #216]	; (800c374 <EE_WriteVariable+0x134>)
 800c29a:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800c29c:	4a36      	ldr	r2, [pc, #216]	; (800c378 <EE_WriteVariable+0x138>)
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9901      	ldr	r1, [sp, #4]
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	f005 fa7e 	bl	80117a4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c2a8:	4834      	ldr	r0, [pc, #208]	; (800c37c <EE_WriteVariable+0x13c>)
 800c2aa:	f005 fa4d 	bl	8011748 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	d003      	beq.n	800c2ba <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 800c2b2:	4b33      	ldr	r3, [pc, #204]	; (800c380 <EE_WriteVariable+0x140>)
 800c2b4:	69dc      	ldr	r4, [r3, #28]
 800c2b6:	b2a4      	uxth	r4, r4
 800c2b8:	e7d2      	b.n	800c260 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c2ba:	4a32      	ldr	r2, [pc, #200]	; (800c384 <EE_WriteVariable+0x144>)
 800c2bc:	6913      	ldr	r3, [r2, #16]
 800c2be:	2101      	movs	r1, #1
 800c2c0:	438b      	bics	r3, r1
 800c2c2:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800c2c4:	0031      	movs	r1, r6
 800c2c6:	0028      	movs	r0, r5
 800c2c8:	f7ff ff1e 	bl	800c108 <EE_VerifyPageFullWriteVariable>
 800c2cc:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800c2ce:	d1c7      	bne.n	800c260 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c2d0:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c2d2:	4b2d      	ldr	r3, [pc, #180]	; (800c388 <EE_WriteVariable+0x148>)
 800c2d4:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c2d6:	4e2d      	ldr	r6, [pc, #180]	; (800c38c <EE_WriteVariable+0x14c>)
 800c2d8:	e003      	b.n	800c2e2 <EE_WriteVariable+0xa2>
 800c2da:	3701      	adds	r7, #1
 800c2dc:	b2bf      	uxth	r7, r7
 800c2de:	42b7      	cmp	r7, r6
 800c2e0:	d00f      	beq.n	800c302 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800c2e2:	42bd      	cmp	r5, r7
 800c2e4:	d0f9      	beq.n	800c2da <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c2e6:	4928      	ldr	r1, [pc, #160]	; (800c388 <EE_WriteVariable+0x148>)
 800c2e8:	0038      	movs	r0, r7
 800c2ea:	f7ff ff79 	bl	800c1e0 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800c2ee:	2801      	cmp	r0, #1
 800c2f0:	d0f3      	beq.n	800c2da <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c2f2:	4643      	mov	r3, r8
 800c2f4:	8819      	ldrh	r1, [r3, #0]
 800c2f6:	0038      	movs	r0, r7
 800c2f8:	f7ff ff06 	bl	800c108 <EE_VerifyPageFullWriteVariable>
 800c2fc:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800c2fe:	d0ec      	beq.n	800c2da <EE_WriteVariable+0x9a>
 800c300:	e7ae      	b.n	800c260 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800c302:	4658      	mov	r0, fp
 800c304:	f005 fac6 	bl	8011894 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c308:	481c      	ldr	r0, [pc, #112]	; (800c37c <EE_WriteVariable+0x13c>)
 800c30a:	f005 fa1d 	bl	8011748 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c30e:	2800      	cmp	r0, #0
 800c310:	d003      	beq.n	800c31a <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 800c312:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <EE_WriteVariable+0x140>)
 800c314:	69dc      	ldr	r4, [r3, #28]
 800c316:	b2a4      	uxth	r4, r4
 800c318:	e7a2      	b.n	800c260 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800c31a:	2080      	movs	r0, #128	; 0x80
 800c31c:	0100      	lsls	r0, r0, #4
 800c31e:	4458      	add	r0, fp
 800c320:	f005 fab8 	bl	8011894 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c324:	4815      	ldr	r0, [pc, #84]	; (800c37c <EE_WriteVariable+0x13c>)
 800c326:	f005 fa0f 	bl	8011748 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d003      	beq.n	800c336 <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 800c32e:	4b14      	ldr	r3, [pc, #80]	; (800c380 <EE_WriteVariable+0x140>)
 800c330:	69dc      	ldr	r4, [r3, #28]
 800c332:	b2a4      	uxth	r4, r4
 800c334:	e794      	b.n	800c260 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c336:	4a13      	ldr	r2, [pc, #76]	; (800c384 <EE_WriteVariable+0x144>)
 800c338:	6913      	ldr	r3, [r2, #16]
 800c33a:	2102      	movs	r1, #2
 800c33c:	438b      	bics	r3, r1
 800c33e:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800c340:	2200      	movs	r2, #0
 800c342:	2300      	movs	r3, #0
 800c344:	9901      	ldr	r1, [sp, #4]
 800c346:	2001      	movs	r0, #1
 800c348:	f005 fa2c 	bl	80117a4 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c34c:	480b      	ldr	r0, [pc, #44]	; (800c37c <EE_WriteVariable+0x13c>)
 800c34e:	f005 f9fb 	bl	8011748 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c352:	2800      	cmp	r0, #0
 800c354:	d003      	beq.n	800c35e <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 800c356:	4b0a      	ldr	r3, [pc, #40]	; (800c380 <EE_WriteVariable+0x140>)
 800c358:	69dc      	ldr	r4, [r3, #28]
 800c35a:	b2a4      	uxth	r4, r4
 800c35c:	e780      	b.n	800c260 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c35e:	4a09      	ldr	r2, [pc, #36]	; (800c384 <EE_WriteVariable+0x144>)
 800c360:	6913      	ldr	r3, [r2, #16]
 800c362:	2101      	movs	r1, #1
 800c364:	438b      	bics	r3, r1
 800c366:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800c368:	f005 f9e4 	bl	8011734 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800c36c:	2400      	movs	r4, #0
 800c36e:	e777      	b.n	800c260 <EE_WriteVariable+0x20>
 800c370:	0801e000 	.word	0x0801e000
 800c374:	0801f000 	.word	0x0801f000
 800c378:	0000eeee 	.word	0x0000eeee
 800c37c:	0000c350 	.word	0x0000c350
 800c380:	200067b0 	.word	0x200067b0
 800c384:	40022000 	.word	0x40022000
 800c388:	2000133c 	.word	0x2000133c
 800c38c:	00000401 	.word	0x00000401

0800c390 <EE_Format>:
uint16_t EE_Format(void){
 800c390:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800c392:	f005 f9bd 	bl	8011710 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c396:	4829      	ldr	r0, [pc, #164]	; (800c43c <EE_Format+0xac>)
 800c398:	f005 fa7c 	bl	8011894 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c39c:	4828      	ldr	r0, [pc, #160]	; (800c440 <EE_Format+0xb0>)
 800c39e:	f005 f9d3 	bl	8011748 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d003      	beq.n	800c3ae <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800c3a6:	4b27      	ldr	r3, [pc, #156]	; (800c444 <EE_Format+0xb4>)
 800c3a8:	69d8      	ldr	r0, [r3, #28]
 800c3aa:	b280      	uxth	r0, r0
}
 800c3ac:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c3ae:	4826      	ldr	r0, [pc, #152]	; (800c448 <EE_Format+0xb8>)
 800c3b0:	f005 fa70 	bl	8011894 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c3b4:	4822      	ldr	r0, [pc, #136]	; (800c440 <EE_Format+0xb0>)
 800c3b6:	f005 f9c7 	bl	8011748 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	d003      	beq.n	800c3c6 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800c3be:	4b21      	ldr	r3, [pc, #132]	; (800c444 <EE_Format+0xb4>)
 800c3c0:	69d8      	ldr	r0, [r3, #28]
 800c3c2:	b280      	uxth	r0, r0
 800c3c4:	e7f2      	b.n	800c3ac <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c3c6:	4a21      	ldr	r2, [pc, #132]	; (800c44c <EE_Format+0xbc>)
 800c3c8:	6913      	ldr	r3, [r2, #16]
 800c3ca:	2102      	movs	r1, #2
 800c3cc:	438b      	bics	r3, r1
 800c3ce:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4919      	ldr	r1, [pc, #100]	; (800c43c <EE_Format+0xac>)
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	f005 f9e4 	bl	80117a4 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c3dc:	4818      	ldr	r0, [pc, #96]	; (800c440 <EE_Format+0xb0>)
 800c3de:	f005 f9b3 	bl	8011748 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d003      	beq.n	800c3ee <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800c3e6:	4b17      	ldr	r3, [pc, #92]	; (800c444 <EE_Format+0xb4>)
 800c3e8:	69d8      	ldr	r0, [r3, #28]
 800c3ea:	b280      	uxth	r0, r0
 800c3ec:	e7de      	b.n	800c3ac <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c3ee:	4a17      	ldr	r2, [pc, #92]	; (800c44c <EE_Format+0xbc>)
 800c3f0:	6913      	ldr	r3, [r2, #16]
 800c3f2:	2101      	movs	r1, #1
 800c3f4:	438b      	bics	r3, r1
 800c3f6:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c3f8:	4815      	ldr	r0, [pc, #84]	; (800c450 <EE_Format+0xc0>)
 800c3fa:	f005 fa4b 	bl	8011894 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c3fe:	4810      	ldr	r0, [pc, #64]	; (800c440 <EE_Format+0xb0>)
 800c400:	f005 f9a2 	bl	8011748 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c404:	2800      	cmp	r0, #0
 800c406:	d003      	beq.n	800c410 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800c408:	4b0e      	ldr	r3, [pc, #56]	; (800c444 <EE_Format+0xb4>)
 800c40a:	69d8      	ldr	r0, [r3, #28]
 800c40c:	b280      	uxth	r0, r0
 800c40e:	e7cd      	b.n	800c3ac <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c410:	4810      	ldr	r0, [pc, #64]	; (800c454 <EE_Format+0xc4>)
 800c412:	f005 fa3f 	bl	8011894 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c416:	480a      	ldr	r0, [pc, #40]	; (800c440 <EE_Format+0xb0>)
 800c418:	f005 f996 	bl	8011748 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d003      	beq.n	800c428 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800c420:	4b08      	ldr	r3, [pc, #32]	; (800c444 <EE_Format+0xb4>)
 800c422:	69d8      	ldr	r0, [r3, #28]
 800c424:	b280      	uxth	r0, r0
 800c426:	e7c1      	b.n	800c3ac <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c428:	4a08      	ldr	r2, [pc, #32]	; (800c44c <EE_Format+0xbc>)
 800c42a:	6913      	ldr	r3, [r2, #16]
 800c42c:	2101      	movs	r1, #1
 800c42e:	438b      	bics	r3, r1
 800c430:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800c432:	f005 f97f 	bl	8011734 <HAL_FLASH_Lock>
	return FlashStatus;
 800c436:	2000      	movs	r0, #0
 800c438:	e7b8      	b.n	800c3ac <EE_Format+0x1c>
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	0801e000 	.word	0x0801e000
 800c440:	0000c350 	.word	0x0000c350
 800c444:	200067b0 	.word	0x200067b0
 800c448:	0801e800 	.word	0x0801e800
 800c44c:	40022000 	.word	0x40022000
 800c450:	0801f000 	.word	0x0801f000
 800c454:	0801f800 	.word	0x0801f800

0800c458 <EE_Init>:
uint16_t EE_Init(void){
 800c458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45a:	46c6      	mov	lr, r8
 800c45c:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800c45e:	f005 f957 	bl	8011710 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c462:	4bbe      	ldr	r3, [pc, #760]	; (800c75c <EE_Init+0x304>)
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c468:	4abd      	ldr	r2, [pc, #756]	; (800c760 <EE_Init+0x308>)
 800c46a:	8812      	ldrh	r2, [r2, #0]
 800c46c:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800c46e:	49bd      	ldr	r1, [pc, #756]	; (800c764 <EE_Init+0x30c>)
 800c470:	428b      	cmp	r3, r1
 800c472:	d100      	bne.n	800c476 <EE_Init+0x1e>
 800c474:	e074      	b.n	800c560 <EE_Init+0x108>
 800c476:	49bc      	ldr	r1, [pc, #752]	; (800c768 <EE_Init+0x310>)
 800c478:	428b      	cmp	r3, r1
 800c47a:	d011      	beq.n	800c4a0 <EE_Init+0x48>
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d100      	bne.n	800c482 <EE_Init+0x2a>
 800c480:	e109      	b.n	800c696 <EE_Init+0x23e>
			FlashStatus =EE_Format();
 800c482:	f7ff ff85 	bl	800c390 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c486:	48b9      	ldr	r0, [pc, #740]	; (800c76c <EE_Init+0x314>)
 800c488:	f005 f95e 	bl	8011748 <FLASH_WaitForLastOperation>
 800c48c:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 800c48e:	2e00      	cmp	r6, #0
 800c490:	d102      	bne.n	800c498 <EE_Init+0x40>
	HAL_FLASH_Lock();
 800c492:	f005 f94f 	bl	8011734 <HAL_FLASH_Lock>
	return HAL_OK;
 800c496:	2600      	movs	r6, #0
}
 800c498:	0030      	movs	r0, r6
 800c49a:	bc04      	pop	{r2}
 800c49c:	4690      	mov	r8, r2
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800c4a0:	2a00      	cmp	r2, #0
 800c4a2:	d00d      	beq.n	800c4c0 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800c4a4:	4baf      	ldr	r3, [pc, #700]	; (800c764 <EE_Init+0x30c>)
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d028      	beq.n	800c4fc <EE_Init+0xa4>
				FlashStatus =EE_Format();
 800c4aa:	f7ff ff71 	bl	800c390 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c4ae:	48af      	ldr	r0, [pc, #700]	; (800c76c <EE_Init+0x314>)
 800c4b0:	f005 f94a 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d0ec      	beq.n	800c492 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800c4b8:	4bad      	ldr	r3, [pc, #692]	; (800c770 <EE_Init+0x318>)
 800c4ba:	69de      	ldr	r6, [r3, #28]
 800c4bc:	b2b6      	uxth	r6, r6
 800c4be:	e7eb      	b.n	800c498 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c4c0:	48a6      	ldr	r0, [pc, #664]	; (800c75c <EE_Init+0x304>)
 800c4c2:	f005 f9e7 	bl	8011894 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c4c6:	48a9      	ldr	r0, [pc, #676]	; (800c76c <EE_Init+0x314>)
 800c4c8:	f005 f93e 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d003      	beq.n	800c4d8 <EE_Init+0x80>
					return pFlash.ErrorCode;
 800c4d0:	4ba7      	ldr	r3, [pc, #668]	; (800c770 <EE_Init+0x318>)
 800c4d2:	69de      	ldr	r6, [r3, #28]
 800c4d4:	b2b6      	uxth	r6, r6
 800c4d6:	e7df      	b.n	800c498 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c4d8:	48a6      	ldr	r0, [pc, #664]	; (800c774 <EE_Init+0x31c>)
 800c4da:	f005 f9db 	bl	8011894 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c4de:	48a3      	ldr	r0, [pc, #652]	; (800c76c <EE_Init+0x314>)
 800c4e0:	f005 f932 	bl	8011748 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d105      	bne.n	800c4f4 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c4e8:	4aa3      	ldr	r2, [pc, #652]	; (800c778 <EE_Init+0x320>)
 800c4ea:	6913      	ldr	r3, [r2, #16]
 800c4ec:	2102      	movs	r1, #2
 800c4ee:	438b      	bics	r3, r1
 800c4f0:	6113      	str	r3, [r2, #16]
 800c4f2:	e7ce      	b.n	800c492 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c4f4:	4b9e      	ldr	r3, [pc, #632]	; (800c770 <EE_Init+0x318>)
 800c4f6:	69de      	ldr	r6, [r3, #28]
 800c4f8:	b2b6      	uxth	r6, r6
 800c4fa:	e7cd      	b.n	800c498 <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c4fc:	4897      	ldr	r0, [pc, #604]	; (800c75c <EE_Init+0x304>)
 800c4fe:	f005 f9c9 	bl	8011894 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c502:	489a      	ldr	r0, [pc, #616]	; (800c76c <EE_Init+0x314>)
 800c504:	f005 f920 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c508:	2800      	cmp	r0, #0
 800c50a:	d003      	beq.n	800c514 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 800c50c:	4b98      	ldr	r3, [pc, #608]	; (800c770 <EE_Init+0x318>)
 800c50e:	69de      	ldr	r6, [r3, #28]
 800c510:	b2b6      	uxth	r6, r6
 800c512:	e7c1      	b.n	800c498 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c514:	4897      	ldr	r0, [pc, #604]	; (800c774 <EE_Init+0x31c>)
 800c516:	f005 f9bd 	bl	8011894 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c51a:	4894      	ldr	r0, [pc, #592]	; (800c76c <EE_Init+0x314>)
 800c51c:	f005 f914 	bl	8011748 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c520:	2800      	cmp	r0, #0
 800c522:	d003      	beq.n	800c52c <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800c524:	4b92      	ldr	r3, [pc, #584]	; (800c770 <EE_Init+0x318>)
 800c526:	69de      	ldr	r6, [r3, #28]
 800c528:	b2b6      	uxth	r6, r6
 800c52a:	e7b5      	b.n	800c498 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c52c:	4a92      	ldr	r2, [pc, #584]	; (800c778 <EE_Init+0x320>)
 800c52e:	6913      	ldr	r3, [r2, #16]
 800c530:	2102      	movs	r1, #2
 800c532:	438b      	bics	r3, r1
 800c534:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c536:	2200      	movs	r2, #0
 800c538:	2300      	movs	r3, #0
 800c53a:	4989      	ldr	r1, [pc, #548]	; (800c760 <EE_Init+0x308>)
 800c53c:	2001      	movs	r0, #1
 800c53e:	f005 f931 	bl	80117a4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c542:	488a      	ldr	r0, [pc, #552]	; (800c76c <EE_Init+0x314>)
 800c544:	f005 f900 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c548:	2800      	cmp	r0, #0
 800c54a:	d105      	bne.n	800c558 <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c54c:	4a8a      	ldr	r2, [pc, #552]	; (800c778 <EE_Init+0x320>)
 800c54e:	6913      	ldr	r3, [r2, #16]
 800c550:	2101      	movs	r1, #1
 800c552:	438b      	bics	r3, r1
 800c554:	6113      	str	r3, [r2, #16]
 800c556:	e79c      	b.n	800c492 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800c558:	4b85      	ldr	r3, [pc, #532]	; (800c770 <EE_Init+0x318>)
 800c55a:	69de      	ldr	r6, [r3, #28]
 800c55c:	b2b6      	uxth	r6, r6
 800c55e:	e79b      	b.n	800c498 <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800c560:	2a00      	cmp	r2, #0
 800c562:	d157      	bne.n	800c614 <EE_Init+0x1bc>
 800c564:	2401      	movs	r4, #1
	int16_t x =-1;
 800c566:	2701      	movs	r7, #1
 800c568:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800c56a:	4d84      	ldr	r5, [pc, #528]	; (800c77c <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c56c:	4b84      	ldr	r3, [pc, #528]	; (800c780 <EE_Init+0x328>)
 800c56e:	4698      	mov	r8, r3
 800c570:	e005      	b.n	800c57e <EE_Init+0x126>
						x =VarIdx;
 800c572:	b227      	sxth	r7, r4
 800c574:	e008      	b.n	800c588 <EE_Init+0x130>
 800c576:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c578:	4b82      	ldr	r3, [pc, #520]	; (800c784 <EE_Init+0x32c>)
 800c57a:	429c      	cmp	r4, r3
 800c57c:	d018      	beq.n	800c5b0 <EE_Init+0x158>
 800c57e:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800c580:	882b      	ldrh	r3, [r5, #0]
 800c582:	b29b      	uxth	r3, r3
 800c584:	42b3      	cmp	r3, r6
 800c586:	d0f4      	beq.n	800c572 <EE_Init+0x11a>
					if(VarIdx != x){
 800c588:	42bc      	cmp	r4, r7
 800c58a:	d0f4      	beq.n	800c576 <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c58c:	497c      	ldr	r1, [pc, #496]	; (800c780 <EE_Init+0x328>)
 800c58e:	0030      	movs	r0, r6
 800c590:	f7ff fe26 	bl	800c1e0 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c594:	2801      	cmp	r0, #1
 800c596:	d0ee      	beq.n	800c576 <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c598:	4643      	mov	r3, r8
 800c59a:	8819      	ldrh	r1, [r3, #0]
 800c59c:	0030      	movs	r0, r6
 800c59e:	f7ff fdb3 	bl	800c108 <EE_VerifyPageFullWriteVariable>
 800c5a2:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5a4:	4871      	ldr	r0, [pc, #452]	; (800c76c <EE_Init+0x314>)
 800c5a6:	f005 f8cf 	bl	8011748 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	d0e3      	beq.n	800c576 <EE_Init+0x11e>
 800c5ae:	e773      	b.n	800c498 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	4969      	ldr	r1, [pc, #420]	; (800c75c <EE_Init+0x304>)
 800c5b6:	2001      	movs	r0, #1
 800c5b8:	f005 f8f4 	bl	80117a4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5bc:	486b      	ldr	r0, [pc, #428]	; (800c76c <EE_Init+0x314>)
 800c5be:	f005 f8c3 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	d003      	beq.n	800c5ce <EE_Init+0x176>
					return pFlash.ErrorCode;
 800c5c6:	4b6a      	ldr	r3, [pc, #424]	; (800c770 <EE_Init+0x318>)
 800c5c8:	69de      	ldr	r6, [r3, #28]
 800c5ca:	b2b6      	uxth	r6, r6
 800c5cc:	e764      	b.n	800c498 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c5ce:	4a6a      	ldr	r2, [pc, #424]	; (800c778 <EE_Init+0x320>)
 800c5d0:	6913      	ldr	r3, [r2, #16]
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	438b      	bics	r3, r1
 800c5d6:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c5d8:	4861      	ldr	r0, [pc, #388]	; (800c760 <EE_Init+0x308>)
 800c5da:	f005 f95b 	bl	8011894 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5de:	4863      	ldr	r0, [pc, #396]	; (800c76c <EE_Init+0x314>)
 800c5e0:	f005 f8b2 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d003      	beq.n	800c5f0 <EE_Init+0x198>
					return pFlash.ErrorCode;
 800c5e8:	4b61      	ldr	r3, [pc, #388]	; (800c770 <EE_Init+0x318>)
 800c5ea:	69de      	ldr	r6, [r3, #28]
 800c5ec:	b2b6      	uxth	r6, r6
 800c5ee:	e753      	b.n	800c498 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c5f0:	4865      	ldr	r0, [pc, #404]	; (800c788 <EE_Init+0x330>)
 800c5f2:	f005 f94f 	bl	8011894 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5f6:	485d      	ldr	r0, [pc, #372]	; (800c76c <EE_Init+0x314>)
 800c5f8:	f005 f8a6 	bl	8011748 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d105      	bne.n	800c60c <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c600:	4a5d      	ldr	r2, [pc, #372]	; (800c778 <EE_Init+0x320>)
 800c602:	6913      	ldr	r3, [r2, #16]
 800c604:	2102      	movs	r1, #2
 800c606:	438b      	bics	r3, r1
 800c608:	6113      	str	r3, [r2, #16]
 800c60a:	e742      	b.n	800c492 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c60c:	4b58      	ldr	r3, [pc, #352]	; (800c770 <EE_Init+0x318>)
 800c60e:	69de      	ldr	r6, [r3, #28]
 800c610:	b2b6      	uxth	r6, r6
 800c612:	e741      	b.n	800c498 <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800c614:	4b54      	ldr	r3, [pc, #336]	; (800c768 <EE_Init+0x310>)
 800c616:	429a      	cmp	r2, r3
 800c618:	d00b      	beq.n	800c632 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 800c61a:	f7ff feb9 	bl	800c390 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c61e:	4853      	ldr	r0, [pc, #332]	; (800c76c <EE_Init+0x314>)
 800c620:	f005 f892 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c624:	2800      	cmp	r0, #0
 800c626:	d100      	bne.n	800c62a <EE_Init+0x1d2>
 800c628:	e733      	b.n	800c492 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800c62a:	4b51      	ldr	r3, [pc, #324]	; (800c770 <EE_Init+0x318>)
 800c62c:	69de      	ldr	r6, [r3, #28]
 800c62e:	b2b6      	uxth	r6, r6
 800c630:	e732      	b.n	800c498 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c632:	484b      	ldr	r0, [pc, #300]	; (800c760 <EE_Init+0x308>)
 800c634:	f005 f92e 	bl	8011894 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c638:	484c      	ldr	r0, [pc, #304]	; (800c76c <EE_Init+0x314>)
 800c63a:	f005 f885 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c63e:	2800      	cmp	r0, #0
 800c640:	d003      	beq.n	800c64a <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 800c642:	4b4b      	ldr	r3, [pc, #300]	; (800c770 <EE_Init+0x318>)
 800c644:	69de      	ldr	r6, [r3, #28]
 800c646:	b2b6      	uxth	r6, r6
 800c648:	e726      	b.n	800c498 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c64a:	484f      	ldr	r0, [pc, #316]	; (800c788 <EE_Init+0x330>)
 800c64c:	f005 f922 	bl	8011894 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c650:	4846      	ldr	r0, [pc, #280]	; (800c76c <EE_Init+0x314>)
 800c652:	f005 f879 	bl	8011748 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c656:	2800      	cmp	r0, #0
 800c658:	d003      	beq.n	800c662 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800c65a:	4b45      	ldr	r3, [pc, #276]	; (800c770 <EE_Init+0x318>)
 800c65c:	69de      	ldr	r6, [r3, #28]
 800c65e:	b2b6      	uxth	r6, r6
 800c660:	e71a      	b.n	800c498 <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c662:	4a45      	ldr	r2, [pc, #276]	; (800c778 <EE_Init+0x320>)
 800c664:	6913      	ldr	r3, [r2, #16]
 800c666:	2102      	movs	r1, #2
 800c668:	438b      	bics	r3, r1
 800c66a:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c66c:	2200      	movs	r2, #0
 800c66e:	2300      	movs	r3, #0
 800c670:	493a      	ldr	r1, [pc, #232]	; (800c75c <EE_Init+0x304>)
 800c672:	2001      	movs	r0, #1
 800c674:	f005 f896 	bl	80117a4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c678:	483c      	ldr	r0, [pc, #240]	; (800c76c <EE_Init+0x314>)
 800c67a:	f005 f865 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c67e:	2800      	cmp	r0, #0
 800c680:	d003      	beq.n	800c68a <EE_Init+0x232>
					return pFlash.ErrorCode;
 800c682:	4b3b      	ldr	r3, [pc, #236]	; (800c770 <EE_Init+0x318>)
 800c684:	69de      	ldr	r6, [r3, #28]
 800c686:	b2b6      	uxth	r6, r6
 800c688:	e706      	b.n	800c498 <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c68a:	4a3b      	ldr	r2, [pc, #236]	; (800c778 <EE_Init+0x320>)
 800c68c:	6913      	ldr	r3, [r2, #16]
 800c68e:	2101      	movs	r1, #1
 800c690:	438b      	bics	r3, r1
 800c692:	6113      	str	r3, [r2, #16]
 800c694:	e6fd      	b.n	800c492 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800c696:	2a00      	cmp	r2, #0
 800c698:	d009      	beq.n	800c6ae <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800c69a:	4b33      	ldr	r3, [pc, #204]	; (800c768 <EE_Init+0x310>)
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d010      	beq.n	800c6c2 <EE_Init+0x26a>
 800c6a0:	2401      	movs	r4, #1
	int16_t x =-1;
 800c6a2:	2701      	movs	r7, #1
 800c6a4:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c6a6:	4d39      	ldr	r5, [pc, #228]	; (800c78c <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c6a8:	4b35      	ldr	r3, [pc, #212]	; (800c780 <EE_Init+0x328>)
 800c6aa:	4698      	mov	r8, r3
 800c6ac:	e02d      	b.n	800c70a <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 800c6ae:	f7ff fe6f 	bl	800c390 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6b2:	482e      	ldr	r0, [pc, #184]	; (800c76c <EE_Init+0x314>)
 800c6b4:	f005 f848 	bl	8011748 <FLASH_WaitForLastOperation>
 800c6b8:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 800c6ba:	2e00      	cmp	r6, #0
 800c6bc:	d100      	bne.n	800c6c0 <EE_Init+0x268>
 800c6be:	e6e8      	b.n	800c492 <EE_Init+0x3a>
 800c6c0:	e6ea      	b.n	800c498 <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c6c2:	4827      	ldr	r0, [pc, #156]	; (800c760 <EE_Init+0x308>)
 800c6c4:	f005 f8e6 	bl	8011894 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6c8:	4828      	ldr	r0, [pc, #160]	; (800c76c <EE_Init+0x314>)
 800c6ca:	f005 f83d 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d003      	beq.n	800c6da <EE_Init+0x282>
					return pFlash.ErrorCode;
 800c6d2:	4b27      	ldr	r3, [pc, #156]	; (800c770 <EE_Init+0x318>)
 800c6d4:	69de      	ldr	r6, [r3, #28]
 800c6d6:	b2b6      	uxth	r6, r6
 800c6d8:	e6de      	b.n	800c498 <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c6da:	482b      	ldr	r0, [pc, #172]	; (800c788 <EE_Init+0x330>)
 800c6dc:	f005 f8da 	bl	8011894 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6e0:	4822      	ldr	r0, [pc, #136]	; (800c76c <EE_Init+0x314>)
 800c6e2:	f005 f831 	bl	8011748 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d105      	bne.n	800c6f6 <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c6ea:	4a23      	ldr	r2, [pc, #140]	; (800c778 <EE_Init+0x320>)
 800c6ec:	6913      	ldr	r3, [r2, #16]
 800c6ee:	2102      	movs	r1, #2
 800c6f0:	438b      	bics	r3, r1
 800c6f2:	6113      	str	r3, [r2, #16]
 800c6f4:	e6cd      	b.n	800c492 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c6f6:	4b1e      	ldr	r3, [pc, #120]	; (800c770 <EE_Init+0x318>)
 800c6f8:	69de      	ldr	r6, [r3, #28]
 800c6fa:	b2b6      	uxth	r6, r6
 800c6fc:	e6cc      	b.n	800c498 <EE_Init+0x40>
						x =VarIdx;
 800c6fe:	b227      	sxth	r7, r4
 800c700:	e008      	b.n	800c714 <EE_Init+0x2bc>
 800c702:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c704:	4b1f      	ldr	r3, [pc, #124]	; (800c784 <EE_Init+0x32c>)
 800c706:	429c      	cmp	r4, r3
 800c708:	d018      	beq.n	800c73c <EE_Init+0x2e4>
 800c70a:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c70c:	882b      	ldrh	r3, [r5, #0]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	42b3      	cmp	r3, r6
 800c712:	d0f4      	beq.n	800c6fe <EE_Init+0x2a6>
					if(VarIdx != x){
 800c714:	42bc      	cmp	r4, r7
 800c716:	d0f4      	beq.n	800c702 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c718:	4919      	ldr	r1, [pc, #100]	; (800c780 <EE_Init+0x328>)
 800c71a:	0030      	movs	r0, r6
 800c71c:	f7ff fd60 	bl	800c1e0 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c720:	2801      	cmp	r0, #1
 800c722:	d0ee      	beq.n	800c702 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c724:	4643      	mov	r3, r8
 800c726:	8819      	ldrh	r1, [r3, #0]
 800c728:	0030      	movs	r0, r6
 800c72a:	f7ff fced 	bl	800c108 <EE_VerifyPageFullWriteVariable>
 800c72e:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c730:	480e      	ldr	r0, [pc, #56]	; (800c76c <EE_Init+0x314>)
 800c732:	f005 f809 	bl	8011748 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c736:	2800      	cmp	r0, #0
 800c738:	d0e3      	beq.n	800c702 <EE_Init+0x2aa>
 800c73a:	e6ad      	b.n	800c498 <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c73c:	2200      	movs	r2, #0
 800c73e:	2300      	movs	r3, #0
 800c740:	4907      	ldr	r1, [pc, #28]	; (800c760 <EE_Init+0x308>)
 800c742:	2001      	movs	r0, #1
 800c744:	f005 f82e 	bl	80117a4 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c748:	4808      	ldr	r0, [pc, #32]	; (800c76c <EE_Init+0x314>)
 800c74a:	f004 fffd 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c74e:	2800      	cmp	r0, #0
 800c750:	d01e      	beq.n	800c790 <EE_Init+0x338>
					return pFlash.ErrorCode;
 800c752:	4b07      	ldr	r3, [pc, #28]	; (800c770 <EE_Init+0x318>)
 800c754:	69de      	ldr	r6, [r3, #28]
 800c756:	b2b6      	uxth	r6, r6
 800c758:	e69e      	b.n	800c498 <EE_Init+0x40>
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	0801e000 	.word	0x0801e000
 800c760:	0801f000 	.word	0x0801f000
 800c764:	0000eeee 	.word	0x0000eeee
 800c768:	0000ffff 	.word	0x0000ffff
 800c76c:	0000c350 	.word	0x0000c350
 800c770:	200067b0 	.word	0x200067b0
 800c774:	0801e800 	.word	0x0801e800
 800c778:	40022000 	.word	0x40022000
 800c77c:	0801e006 	.word	0x0801e006
 800c780:	2000133c 	.word	0x2000133c
 800c784:	00000401 	.word	0x00000401
 800c788:	0801f800 	.word	0x0801f800
 800c78c:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c790:	4a11      	ldr	r2, [pc, #68]	; (800c7d8 <EE_Init+0x380>)
 800c792:	6913      	ldr	r3, [r2, #16]
 800c794:	2101      	movs	r1, #1
 800c796:	438b      	bics	r3, r1
 800c798:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c79a:	4810      	ldr	r0, [pc, #64]	; (800c7dc <EE_Init+0x384>)
 800c79c:	f005 f87a 	bl	8011894 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7a0:	480f      	ldr	r0, [pc, #60]	; (800c7e0 <EE_Init+0x388>)
 800c7a2:	f004 ffd1 	bl	8011748 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d003      	beq.n	800c7b2 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 800c7aa:	4b0e      	ldr	r3, [pc, #56]	; (800c7e4 <EE_Init+0x38c>)
 800c7ac:	69de      	ldr	r6, [r3, #28]
 800c7ae:	b2b6      	uxth	r6, r6
 800c7b0:	e672      	b.n	800c498 <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c7b2:	480d      	ldr	r0, [pc, #52]	; (800c7e8 <EE_Init+0x390>)
 800c7b4:	f005 f86e 	bl	8011894 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7b8:	4809      	ldr	r0, [pc, #36]	; (800c7e0 <EE_Init+0x388>)
 800c7ba:	f004 ffc5 	bl	8011748 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d105      	bne.n	800c7ce <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c7c2:	4a05      	ldr	r2, [pc, #20]	; (800c7d8 <EE_Init+0x380>)
 800c7c4:	6913      	ldr	r3, [r2, #16]
 800c7c6:	2102      	movs	r1, #2
 800c7c8:	438b      	bics	r3, r1
 800c7ca:	6113      	str	r3, [r2, #16]
 800c7cc:	e661      	b.n	800c492 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c7ce:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <EE_Init+0x38c>)
 800c7d0:	69de      	ldr	r6, [r3, #28]
 800c7d2:	b2b6      	uxth	r6, r6
 800c7d4:	e660      	b.n	800c498 <EE_Init+0x40>
 800c7d6:	46c0      	nop			; (mov r8, r8)
 800c7d8:	40022000 	.word	0x40022000
 800c7dc:	0801e000 	.word	0x0801e000
 800c7e0:	0000c350 	.word	0x0000c350
 800c7e4:	200067b0 	.word	0x200067b0
 800c7e8:	0801e800 	.word	0x0801e800

0800c7ec <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800c7ec:	b500      	push	{lr}
 800c7ee:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800c7f4:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800c7fa:	4669      	mov	r1, sp
 800c7fc:	a801      	add	r0, sp, #4
 800c7fe:	f005 f85b 	bl	80118b8 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800c802:	2800      	cmp	r0, #0
 800c804:	d102      	bne.n	800c80c <EraseSector+0x20>
 800c806:	9b00      	ldr	r3, [sp, #0]
 800c808:	3301      	adds	r3, #1
 800c80a:	d002      	beq.n	800c812 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800c80c:	4b02      	ldr	r3, [pc, #8]	; (800c818 <EraseSector+0x2c>)
 800c80e:	2216      	movs	r2, #22
 800c810:	701a      	strb	r2, [r3, #0]

	return result;
}
 800c812:	2000      	movs	r0, #0
 800c814:	b005      	add	sp, #20
 800c816:	bd00      	pop	{pc}
 800c818:	20000888 	.word	0x20000888

0800c81c <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800c81c:	b500      	push	{lr}
 800c81e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c820:	2380      	movs	r3, #128	; 0x80
 800c822:	011b      	lsls	r3, r3, #4
 800c824:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c826:	2301      	movs	r3, #1
 800c828:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c82e:	3303      	adds	r3, #3
 800c830:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c832:	2090      	movs	r0, #144	; 0x90
 800c834:	a901      	add	r1, sp, #4
 800c836:	05c0      	lsls	r0, r0, #23
 800c838:	f005 f89e 	bl	8011978 <HAL_GPIO_Init>
}
 800c83c:	b007      	add	sp, #28
 800c83e:	bd00      	pop	{pc}

0800c840 <GPIO_Init>:
{
 800c840:	b500      	push	{lr}
 800c842:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c844:	4b18      	ldr	r3, [pc, #96]	; (800c8a8 <GPIO_Init+0x68>)
 800c846:	6959      	ldr	r1, [r3, #20]
 800c848:	2080      	movs	r0, #128	; 0x80
 800c84a:	0300      	lsls	r0, r0, #12
 800c84c:	4301      	orrs	r1, r0
 800c84e:	6159      	str	r1, [r3, #20]
 800c850:	695a      	ldr	r2, [r3, #20]
 800c852:	4002      	ands	r2, r0
 800c854:	9201      	str	r2, [sp, #4]
 800c856:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c858:	6959      	ldr	r1, [r3, #20]
 800c85a:	2080      	movs	r0, #128	; 0x80
 800c85c:	0280      	lsls	r0, r0, #10
 800c85e:	4301      	orrs	r1, r0
 800c860:	6159      	str	r1, [r3, #20]
 800c862:	695a      	ldr	r2, [r3, #20]
 800c864:	4002      	ands	r2, r0
 800c866:	9202      	str	r2, [sp, #8]
 800c868:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c86a:	6959      	ldr	r1, [r3, #20]
 800c86c:	2080      	movs	r0, #128	; 0x80
 800c86e:	0340      	lsls	r0, r0, #13
 800c870:	4301      	orrs	r1, r0
 800c872:	6159      	str	r1, [r3, #20]
 800c874:	695a      	ldr	r2, [r3, #20]
 800c876:	4002      	ands	r2, r0
 800c878:	9203      	str	r2, [sp, #12]
 800c87a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c87c:	6959      	ldr	r1, [r3, #20]
 800c87e:	2080      	movs	r0, #128	; 0x80
 800c880:	02c0      	lsls	r0, r0, #11
 800c882:	4301      	orrs	r1, r0
 800c884:	6159      	str	r1, [r3, #20]
 800c886:	695a      	ldr	r2, [r3, #20]
 800c888:	4002      	ands	r2, r0
 800c88a:	9204      	str	r2, [sp, #16]
 800c88c:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c88e:	695a      	ldr	r2, [r3, #20]
 800c890:	2180      	movs	r1, #128	; 0x80
 800c892:	03c9      	lsls	r1, r1, #15
 800c894:	430a      	orrs	r2, r1
 800c896:	615a      	str	r2, [r3, #20]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	400b      	ands	r3, r1
 800c89c:	9305      	str	r3, [sp, #20]
 800c89e:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c8a0:	f7ff ffbc 	bl	800c81c <IND_LED_Init>
}
 800c8a4:	b007      	add	sp, #28
 800c8a6:	bd00      	pop	{pc}
 800c8a8:	40021000 	.word	0x40021000

0800c8ac <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c8ac:	b570      	push	{r4, r5, r6, lr}
 800c8ae:	000e      	movs	r6, r1
 800c8b0:	0014      	movs	r4, r2
 800c8b2:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c8b4:	f001 fc64 	bl	800e180 <GetUart>


#ifdef _Usart2	
	if (huart == &huart2)
 800c8b8:	4b16      	ldr	r3, [pc, #88]	; (800c914 <GetPortGPIOs+0x68>)
 800c8ba:	4298      	cmp	r0, r3
 800c8bc:	d008      	beq.n	800c8d0 <GetPortGPIOs+0x24>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c8be:	4b16      	ldr	r3, [pc, #88]	; (800c918 <GetPortGPIOs+0x6c>)
 800c8c0:	4298      	cmp	r0, r3
 800c8c2:	d010      	beq.n	800c8e6 <GetPortGPIOs+0x3a>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c8c4:	4a15      	ldr	r2, [pc, #84]	; (800c91c <GetPortGPIOs+0x70>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c8c6:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800c8c8:	4290      	cmp	r0, r2
 800c8ca:	d018      	beq.n	800c8fe <GetPortGPIOs+0x52>
	
	return result;	
}
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c8d0:	2390      	movs	r3, #144	; 0x90
 800c8d2:	05db      	lsls	r3, r3, #23
 800c8d4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c8d6:	2204      	movs	r2, #4
 800c8d8:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c8da:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800c8dc:	2308      	movs	r3, #8
 800c8de:	9a04      	ldr	r2, [sp, #16]
 800c8e0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e7f2      	b.n	800c8cc <GetPortGPIOs+0x20>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c8e6:	4b0e      	ldr	r3, [pc, #56]	; (800c920 <GetPortGPIOs+0x74>)
 800c8e8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c8ea:	2280      	movs	r2, #128	; 0x80
 800c8ec:	00d2      	lsls	r2, r2, #3
 800c8ee:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c8f0:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800c8f2:	2380      	movs	r3, #128	; 0x80
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	9a04      	ldr	r2, [sp, #16]
 800c8f8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e7e6      	b.n	800c8cc <GetPortGPIOs+0x20>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c8fe:	2390      	movs	r3, #144	; 0x90
 800c900:	05db      	lsls	r3, r3, #23
 800c902:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c904:	2210      	movs	r2, #16
 800c906:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c908:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800c90a:	2320      	movs	r3, #32
 800c90c:	9a04      	ldr	r2, [sp, #16]
 800c90e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	e7db      	b.n	800c8cc <GetPortGPIOs+0x20>
 800c914:	2000657c 	.word	0x2000657c
 800c918:	2000635c 	.word	0x2000635c
 800c91c:	20006490 	.word	0x20006490
 800c920:	48000400 	.word	0x48000400

0800c924 <IsFactoryReset>:
{
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c928:	4b39      	ldr	r3, [pc, #228]	; (800ca10 <IsFactoryReset+0xec>)
 800c92a:	6959      	ldr	r1, [r3, #20]
 800c92c:	2080      	movs	r0, #128	; 0x80
 800c92e:	0280      	lsls	r0, r0, #10
 800c930:	4301      	orrs	r1, r0
 800c932:	6159      	str	r1, [r3, #20]
 800c934:	695a      	ldr	r2, [r3, #20]
 800c936:	4002      	ands	r2, r0
 800c938:	9203      	str	r2, [sp, #12]
 800c93a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c93c:	6959      	ldr	r1, [r3, #20]
 800c93e:	2080      	movs	r0, #128	; 0x80
 800c940:	02c0      	lsls	r0, r0, #11
 800c942:	4301      	orrs	r1, r0
 800c944:	6159      	str	r1, [r3, #20]
 800c946:	695a      	ldr	r2, [r3, #20]
 800c948:	4002      	ands	r2, r0
 800c94a:	9204      	str	r2, [sp, #16]
 800c94c:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c94e:	6959      	ldr	r1, [r3, #20]
 800c950:	2080      	movs	r0, #128	; 0x80
 800c952:	0300      	lsls	r0, r0, #12
 800c954:	4301      	orrs	r1, r0
 800c956:	6159      	str	r1, [r3, #20]
 800c958:	695a      	ldr	r2, [r3, #20]
 800c95a:	4002      	ands	r2, r0
 800c95c:	9205      	str	r2, [sp, #20]
 800c95e:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800c960:	695a      	ldr	r2, [r3, #20]
 800c962:	2180      	movs	r1, #128	; 0x80
 800c964:	0349      	lsls	r1, r1, #13
 800c966:	430a      	orrs	r2, r1
 800c968:	615a      	str	r2, [r3, #20]
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	400b      	ands	r3, r1
 800c96e:	9306      	str	r3, [sp, #24]
 800c970:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c972:	2522      	movs	r5, #34	; 0x22
 800c974:	446d      	add	r5, sp
 800c976:	ab08      	add	r3, sp, #32
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	ab0b      	add	r3, sp, #44	; 0x2c
 800c97c:	002a      	movs	r2, r5
 800c97e:	a90c      	add	r1, sp, #48	; 0x30
 800c980:	2001      	movs	r0, #1
 800c982:	f7ff ff93 	bl	800c8ac <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c986:	ac07      	add	r4, sp, #28
 800c988:	9400      	str	r4, [sp, #0]
 800c98a:	ab09      	add	r3, sp, #36	; 0x24
 800c98c:	221e      	movs	r2, #30
 800c98e:	446a      	add	r2, sp
 800c990:	a90a      	add	r1, sp, #40	; 0x28
 800c992:	2003      	movs	r0, #3
 800c994:	f7ff ff8a 	bl	800c8ac <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c998:	2301      	movs	r3, #1
 800c99a:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c99c:	2600      	movs	r6, #0
 800c99e:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c9a0:	882b      	ldrh	r3, [r5, #0]
 800c9a2:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c9a4:	a90d      	add	r1, sp, #52	; 0x34
 800c9a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9a8:	f004 ffe6 	bl	8011978 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c9ac:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c9b2:	8823      	ldrh	r3, [r4, #0]
 800c9b4:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c9b6:	a90d      	add	r1, sp, #52	; 0x34
 800c9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9ba:	f004 ffdd 	bl	8011978 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c9be:	8829      	ldrh	r1, [r5, #0]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9c4:	f005 f94c 	bl	8011c60 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c9c8:	2005      	movs	r0, #5
 800c9ca:	f001 faad 	bl	800df28 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c9ce:	8821      	ldrh	r1, [r4, #0]
 800c9d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9d2:	f005 f93f 	bl	8011c54 <HAL_GPIO_ReadPin>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	d006      	beq.n	800c9e8 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c9da:	4b0e      	ldr	r3, [pc, #56]	; (800ca14 <IsFactoryReset+0xf0>)
 800c9dc:	2201      	movs	r2, #1
 800c9de:	4252      	negs	r2, r2
 800c9e0:	601a      	str	r2, [r3, #0]
	return 0;
 800c9e2:	2000      	movs	r0, #0
}
 800c9e4:	b012      	add	sp, #72	; 0x48
 800c9e6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c9e8:	2322      	movs	r3, #34	; 0x22
 800c9ea:	446b      	add	r3, sp
 800c9ec:	8819      	ldrh	r1, [r3, #0]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c9f2:	f005 f935 	bl	8011c60 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c9f6:	2005      	movs	r0, #5
 800c9f8:	f001 fa96 	bl	800df28 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c9fc:	ab07      	add	r3, sp, #28
 800c9fe:	8819      	ldrh	r1, [r3, #0]
 800ca00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca02:	f005 f927 	bl	8011c54 <HAL_GPIO_ReadPin>
 800ca06:	2801      	cmp	r0, #1
 800ca08:	d1e7      	bne.n	800c9da <IsFactoryReset+0xb6>
			return 1;
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	e7ea      	b.n	800c9e4 <IsFactoryReset+0xc0>
 800ca0e:	46c0      	nop			; (mov r8, r8)
 800ca10:	40021000 	.word	0x40021000
 800ca14:	20007ff0 	.word	0x20007ff0

0800ca18 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800ca18:	4770      	bx	lr
	...

0800ca1c <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800ca1c:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ca1e:	00c2      	lsls	r2, r0, #3
 800ca20:	1812      	adds	r2, r2, r0
 800ca22:	4b1b      	ldr	r3, [pc, #108]	; (800ca90 <CheckForTimedButtonPress+0x74>)
 800ca24:	189b      	adds	r3, r3, r2
 800ca26:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800ca28:	0082      	lsls	r2, r0, #2
 800ca2a:	4b1a      	ldr	r3, [pc, #104]	; (800ca94 <CheckForTimedButtonPress+0x78>)
 800ca2c:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800ca2e:	0163      	lsls	r3, r4, #5
 800ca30:	1b1b      	subs	r3, r3, r4
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	191b      	adds	r3, r3, r4
 800ca36:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800ca38:	4299      	cmp	r1, r3
 800ca3a:	d01c      	beq.n	800ca76 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800ca3c:	00c2      	lsls	r2, r0, #3
 800ca3e:	1812      	adds	r2, r2, r0
 800ca40:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <CheckForTimedButtonPress+0x74>)
 800ca42:	189b      	adds	r3, r3, r2
 800ca44:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 800ca46:	0163      	lsls	r3, r4, #5
 800ca48:	1b1b      	subs	r3, r3, r4
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	191b      	adds	r3, r3, r4
 800ca4e:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800ca50:	4299      	cmp	r1, r3
 800ca52:	d017      	beq.n	800ca84 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 800ca54:	00c2      	lsls	r2, r0, #3
 800ca56:	1812      	adds	r2, r2, r0
 800ca58:	4b0d      	ldr	r3, [pc, #52]	; (800ca90 <CheckForTimedButtonPress+0x74>)
 800ca5a:	189b      	adds	r3, r3, r2
 800ca5c:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 800ca5e:	0163      	lsls	r3, r4, #5
 800ca60:	1b1b      	subs	r3, r3, r4
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	191b      	adds	r3, r3, r4
 800ca66:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800ca68:	4299      	cmp	r1, r3
 800ca6a:	d109      	bne.n	800ca80 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 800ca6c:	0010      	movs	r0, r2
 800ca6e:	4b08      	ldr	r3, [pc, #32]	; (800ca90 <CheckForTimedButtonPress+0x74>)
 800ca70:	220a      	movs	r2, #10
 800ca72:	54c2      	strb	r2, [r0, r3]
 800ca74:	e004      	b.n	800ca80 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800ca76:	00c3      	lsls	r3, r0, #3
 800ca78:	1818      	adds	r0, r3, r0
 800ca7a:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <CheckForTimedButtonPress+0x74>)
 800ca7c:	2209      	movs	r2, #9
 800ca7e:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800ca80:	2000      	movs	r0, #0
 800ca82:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800ca84:	0010      	movs	r0, r2
 800ca86:	4b02      	ldr	r3, [pc, #8]	; (800ca90 <CheckForTimedButtonPress+0x74>)
 800ca88:	220a      	movs	r2, #10
 800ca8a:	54c2      	strb	r2, [r0, r3]
 800ca8c:	e7f8      	b.n	800ca80 <CheckForTimedButtonPress+0x64>
 800ca8e:	46c0      	nop			; (mov r8, r8)
 800ca90:	20001350 	.word	0x20001350
 800ca94:	20001388 	.word	0x20001388

0800ca98 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800ca98:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800ca9a:	00c2      	lsls	r2, r0, #3
 800ca9c:	1812      	adds	r2, r2, r0
 800ca9e:	4b1b      	ldr	r3, [pc, #108]	; (800cb0c <CheckForTimedButtonRelease+0x74>)
 800caa0:	189b      	adds	r3, r3, r2
 800caa2:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800caa4:	0082      	lsls	r2, r0, #2
 800caa6:	4b1a      	ldr	r3, [pc, #104]	; (800cb10 <CheckForTimedButtonRelease+0x78>)
 800caa8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800caaa:	0163      	lsls	r3, r4, #5
 800caac:	1b1b      	subs	r3, r3, r4
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	191b      	adds	r3, r3, r4
 800cab2:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800cab4:	4299      	cmp	r1, r3
 800cab6:	d01c      	beq.n	800caf2 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800cab8:	00c2      	lsls	r2, r0, #3
 800caba:	1812      	adds	r2, r2, r0
 800cabc:	4b13      	ldr	r3, [pc, #76]	; (800cb0c <CheckForTimedButtonRelease+0x74>)
 800cabe:	189b      	adds	r3, r3, r2
 800cac0:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800cac2:	0163      	lsls	r3, r4, #5
 800cac4:	1b1b      	subs	r3, r3, r4
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	191b      	adds	r3, r3, r4
 800caca:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800cacc:	4299      	cmp	r1, r3
 800cace:	d017      	beq.n	800cb00 <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800cad0:	00c2      	lsls	r2, r0, #3
 800cad2:	1812      	adds	r2, r2, r0
 800cad4:	4b0d      	ldr	r3, [pc, #52]	; (800cb0c <CheckForTimedButtonRelease+0x74>)
 800cad6:	189b      	adds	r3, r3, r2
 800cad8:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 800cada:	0163      	lsls	r3, r4, #5
 800cadc:	1b1b      	subs	r3, r3, r4
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	191b      	adds	r3, r3, r4
 800cae2:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800cae4:	4299      	cmp	r1, r3
 800cae6:	d109      	bne.n	800cafc <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800cae8:	0010      	movs	r0, r2
 800caea:	4b08      	ldr	r3, [pc, #32]	; (800cb0c <CheckForTimedButtonRelease+0x74>)
 800caec:	220d      	movs	r2, #13
 800caee:	54c2      	strb	r2, [r0, r3]
 800caf0:	e004      	b.n	800cafc <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800caf2:	00c3      	lsls	r3, r0, #3
 800caf4:	1818      	adds	r0, r3, r0
 800caf6:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <CheckForTimedButtonRelease+0x74>)
 800caf8:	220c      	movs	r2, #12
 800cafa:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800cafc:	2000      	movs	r0, #0
 800cafe:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800cb00:	0010      	movs	r0, r2
 800cb02:	4b02      	ldr	r3, [pc, #8]	; (800cb0c <CheckForTimedButtonRelease+0x74>)
 800cb04:	220d      	movs	r2, #13
 800cb06:	54c2      	strb	r2, [r0, r3]
 800cb08:	e7f8      	b.n	800cafc <CheckForTimedButtonRelease+0x64>
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	20001350 	.word	0x20001350
 800cb10:	20001398 	.word	0x20001398

0800cb14 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800cb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb16:	b08d      	sub	sp, #52	; 0x34
 800cb18:	0006      	movs	r6, r0
 800cb1a:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800cb1c:	4b41      	ldr	r3, [pc, #260]	; (800cc24 <AddPortButton+0x110>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d157      	bne.n	800cbd4 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800cb24:	4b40      	ldr	r3, [pc, #256]	; (800cc28 <AddPortButton+0x114>)
 800cb26:	2204      	movs	r2, #4
 800cb28:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800cb2a:	4b3e      	ldr	r3, [pc, #248]	; (800cc24 <AddPortButton+0x110>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d15a      	bne.n	800cbe8 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800cb32:	2512      	movs	r5, #18
 800cb34:	446d      	add	r5, sp
 800cb36:	af04      	add	r7, sp, #16
 800cb38:	9700      	str	r7, [sp, #0]
 800cb3a:	ab05      	add	r3, sp, #20
 800cb3c:	002a      	movs	r2, r5
 800cb3e:	a906      	add	r1, sp, #24
 800cb40:	0020      	movs	r0, r4
 800cb42:	f7ff feb3 	bl	800c8ac <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800cb46:	882b      	ldrh	r3, [r5, #0]
 800cb48:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb4e:	2500      	movs	r5, #0
 800cb50:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800cb52:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800cb54:	a907      	add	r1, sp, #28
 800cb56:	9806      	ldr	r0, [sp, #24]
 800cb58:	f004 ff0e 	bl	8011978 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800cb5c:	883b      	ldrh	r3, [r7, #0]
 800cb5e:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cb60:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cb62:	2302      	movs	r3, #2
 800cb64:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800cb66:	a907      	add	r1, sp, #28
 800cb68:	9805      	ldr	r0, [sp, #20]
 800cb6a:	f004 ff05 	bl	8011978 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800cb6e:	00e2      	lsls	r2, r4, #3
 800cb70:	1912      	adds	r2, r2, r4
 800cb72:	4b2e      	ldr	r3, [pc, #184]	; (800cc2c <AddPortButton+0x118>)
 800cb74:	189b      	adds	r3, r3, r2
 800cb76:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800cb78:	0025      	movs	r5, r4
 800cb7a:	353a      	adds	r5, #58	; 0x3a
 800cb7c:	00ad      	lsls	r5, r5, #2
 800cb7e:	210e      	movs	r1, #14
 800cb80:	4469      	add	r1, sp
 800cb82:	0028      	movs	r0, r5
 800cb84:	f7ff fb2c 	bl	800c1e0 <EE_ReadVariable>
	if (!res)											// This variable exists
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d133      	bne.n	800cbf4 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800cb8c:	230e      	movs	r3, #14
 800cb8e:	446b      	add	r3, sp
 800cb90:	881b      	ldrh	r3, [r3, #0]
 800cb92:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800cb94:	091a      	lsrs	r2, r3, #4
 800cb96:	42a2      	cmp	r2, r4
 800cb98:	d103      	bne.n	800cba2 <AddPortButton+0x8e>
 800cb9a:	220f      	movs	r2, #15
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	42b3      	cmp	r3, r6
 800cba0:	d015      	beq.n	800cbce <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800cba2:	0324      	lsls	r4, r4, #12
 800cba4:	0231      	lsls	r1, r6, #8
 800cba6:	4321      	orrs	r1, r4
 800cba8:	b289      	uxth	r1, r1
 800cbaa:	230e      	movs	r3, #14
 800cbac:	446b      	add	r3, sp
 800cbae:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800cbb0:	0028      	movs	r0, r5
 800cbb2:	f7ff fb45 	bl	800c240 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800cbb6:	1c68      	adds	r0, r5, #1
 800cbb8:	2100      	movs	r1, #0
 800cbba:	f7ff fb41 	bl	800c240 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800cbbe:	1ca8      	adds	r0, r5, #2
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	f7ff fb3d 	bl	800c240 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800cbc6:	1ce8      	adds	r0, r5, #3
 800cbc8:	2100      	movs	r1, #0
 800cbca:	f7ff fb39 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800cbce:	2000      	movs	r0, #0
 800cbd0:	b00d      	add	sp, #52	; 0x34
 800cbd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800cbd4:	008d      	lsls	r5, r1, #2
 800cbd6:	4b16      	ldr	r3, [pc, #88]	; (800cc30 <AddPortButton+0x11c>)
 800cbd8:	58e8      	ldr	r0, [r5, r3]
 800cbda:	f001 fcdb 	bl	800e594 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800cbde:	4b15      	ldr	r3, [pc, #84]	; (800cc34 <AddPortButton+0x120>)
 800cbe0:	58e8      	ldr	r0, [r5, r3]
 800cbe2:	f001 fcd7 	bl	800e594 <osSemaphoreRelease>
 800cbe6:	e79d      	b.n	800cb24 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800cbe8:	0020      	movs	r0, r4
 800cbea:	f001 fac9 	bl	800e180 <GetUart>
 800cbee:	f006 f814 	bl	8012c1a <HAL_UART_DeInit>
 800cbf2:	e79e      	b.n	800cb32 <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800cbf4:	0324      	lsls	r4, r4, #12
 800cbf6:	0231      	lsls	r1, r6, #8
 800cbf8:	4321      	orrs	r1, r4
 800cbfa:	b289      	uxth	r1, r1
 800cbfc:	230e      	movs	r3, #14
 800cbfe:	446b      	add	r3, sp
 800cc00:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800cc02:	0028      	movs	r0, r5
 800cc04:	f7ff fb1c 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800cc08:	1c68      	adds	r0, r5, #1
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	f7ff fb18 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800cc10:	1ca8      	adds	r0, r5, #2
 800cc12:	2100      	movs	r1, #0
 800cc14:	f7ff fb14 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800cc18:	1ce8      	adds	r0, r5, #3
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	f7ff fb10 	bl	800c240 <EE_WriteVariable>
 800cc20:	e7d5      	b.n	800cbce <AddPortButton+0xba>
 800cc22:	46c0      	nop			; (mov r8, r8)
 800cc24:	200002ae 	.word	0x200002ae
 800cc28:	20000870 	.word	0x20000870
 800cc2c:	20001350 	.word	0x20001350
 800cc30:	20006314 	.word	0x20006314
 800cc34:	200062f4 	.word	0x200062f4

0800cc38 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800cc38:	b570      	push	{r4, r5, r6, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800cc3e:	4836      	ldr	r0, [pc, #216]	; (800cd18 <RemovePortButton+0xe0>)
 800cc40:	00e9      	lsls	r1, r5, #3
 800cc42:	1949      	adds	r1, r1, r5
 800cc44:	1842      	adds	r2, r0, r1
 800cc46:	2300      	movs	r3, #0
 800cc48:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800cc4a:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800cc4c:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800cc4e:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800cc50:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800cc52:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800cc54:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800cc56:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800cc58:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800cc5a:	002c      	movs	r4, r5
 800cc5c:	343a      	adds	r4, #58	; 0x3a
 800cc5e:	00a4      	lsls	r4, r4, #2
 800cc60:	466b      	mov	r3, sp
 800cc62:	1d99      	adds	r1, r3, #6
 800cc64:	0020      	movs	r0, r4
 800cc66:	f7ff fabb 	bl	800c1e0 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d02b      	beq.n	800ccc6 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800cc6e:	0028      	movs	r0, r5
 800cc70:	f001 fa86 	bl	800e180 <GetUart>
 800cc74:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 800cc76:	6803      	ldr	r3, [r0, #0]
 800cc78:	4a28      	ldr	r2, [pc, #160]	; (800cd1c <RemovePortButton+0xe4>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d034      	beq.n	800cce8 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800cc7e:	4a28      	ldr	r2, [pc, #160]	; (800cd20 <RemovePortButton+0xe8>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d035      	beq.n	800ccf0 <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800cc84:	4a27      	ldr	r2, [pc, #156]	; (800cd24 <RemovePortButton+0xec>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d036      	beq.n	800ccf8 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800cc8a:	4a27      	ldr	r2, [pc, #156]	; (800cd28 <RemovePortButton+0xf0>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d037      	beq.n	800cd00 <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800cc90:	4a26      	ldr	r2, [pc, #152]	; (800cd2c <RemovePortButton+0xf4>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d03c      	beq.n	800cd10 <RemovePortButton+0xd8>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800cc96:	4a26      	ldr	r2, [pc, #152]	; (800cd30 <RemovePortButton+0xf8>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d035      	beq.n	800cd08 <RemovePortButton+0xd0>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800cc9c:	4a25      	ldr	r2, [pc, #148]	; (800cd34 <RemovePortButton+0xfc>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d038      	beq.n	800cd14 <RemovePortButton+0xdc>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800cca2:	4a25      	ldr	r2, [pc, #148]	; (800cd38 <RemovePortButton+0x100>)
 800cca4:	4694      	mov	ip, r2
 800cca6:	4463      	add	r3, ip
 800cca8:	1e5c      	subs	r4, r3, #1
 800ccaa:	41a3      	sbcs	r3, r4
 800ccac:	425c      	negs	r4, r3
 800ccae:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800ccb0:	4b22      	ldr	r3, [pc, #136]	; (800cd3c <RemovePortButton+0x104>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800ccb6:	3201      	adds	r2, #1
 800ccb8:	4921      	ldr	r1, [pc, #132]	; (800cd40 <RemovePortButton+0x108>)
 800ccba:	0030      	movs	r0, r6
 800ccbc:	f006 f806 	bl	8012ccc <HAL_UART_Receive_IT>

	return result;
}
 800ccc0:	0020      	movs	r0, r4
 800ccc2:	b002      	add	sp, #8
 800ccc4:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	0020      	movs	r0, r4
 800ccca:	f7ff fab9 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800ccce:	1c60      	adds	r0, r4, #1
 800ccd0:	2100      	movs	r1, #0
 800ccd2:	f7ff fab5 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800ccd6:	1ca0      	adds	r0, r4, #2
 800ccd8:	2100      	movs	r1, #0
 800ccda:	f7ff fab1 	bl	800c240 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800ccde:	1ce0      	adds	r0, r4, #3
 800cce0:	2100      	movs	r1, #0
 800cce2:	f7ff faad 	bl	800c240 <EE_WriteVariable>
 800cce6:	e7c2      	b.n	800cc6e <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800cce8:	f001 f930 	bl	800df4c <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800ccec:	2400      	movs	r4, #0
 800ccee:	e7df      	b.n	800ccb0 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800ccf0:	f001 f944 	bl	800df7c <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800ccf4:	2400      	movs	r4, #0
 800ccf6:	e7db      	b.n	800ccb0 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800ccf8:	f001 f958 	bl	800dfac <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800ccfc:	2400      	movs	r4, #0
 800ccfe:	e7d7      	b.n	800ccb0 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800cd00:	f001 f96c 	bl	800dfdc <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800cd04:	2400      	movs	r4, #0
 800cd06:	e7d3      	b.n	800ccb0 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800cd08:	f001 f980 	bl	800e00c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800cd0c:	2400      	movs	r4, #0
 800cd0e:	e7cf      	b.n	800ccb0 <RemovePortButton+0x78>
 800cd10:	2400      	movs	r4, #0
 800cd12:	e7cd      	b.n	800ccb0 <RemovePortButton+0x78>
 800cd14:	2400      	movs	r4, #0
 800cd16:	e7cb      	b.n	800ccb0 <RemovePortButton+0x78>
 800cd18:	20001350 	.word	0x20001350
 800cd1c:	40013800 	.word	0x40013800
 800cd20:	40004400 	.word	0x40004400
 800cd24:	40004800 	.word	0x40004800
 800cd28:	40004c00 	.word	0x40004c00
 800cd2c:	40005000 	.word	0x40005000
 800cd30:	40011400 	.word	0x40011400
 800cd34:	40011800 	.word	0x40011800
 800cd38:	bffee400 	.word	0xbffee400
 800cd3c:	20000870 	.word	0x20000870
 800cd40:	200005ec 	.word	0x200005ec

0800cd44 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800cd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd46:	46de      	mov	lr, fp
 800cd48:	4657      	mov	r7, sl
 800cd4a:	464e      	mov	r6, r9
 800cd4c:	4645      	mov	r5, r8
 800cd4e:	b5e0      	push	{r5, r6, r7, lr}
 800cd50:	b085      	sub	sp, #20
 800cd52:	0007      	movs	r7, r0
 800cd54:	001e      	movs	r6, r3
 800cd56:	ab0e      	add	r3, sp, #56	; 0x38
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	4698      	mov	r8, r3
 800cd5c:	ab0f      	add	r3, sp, #60	; 0x3c
 800cd5e:	781d      	ldrb	r5, [r3, #0]
 800cd60:	ab10      	add	r3, sp, #64	; 0x40
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	469b      	mov	fp, r3
 800cd66:	ab11      	add	r3, sp, #68	; 0x44
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	469a      	mov	sl, r3
 800cd6c:	ab12      	add	r3, sp, #72	; 0x48
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	4699      	mov	r9, r3
 800cd72:	ab13      	add	r3, sp, #76	; 0x4c
 800cd74:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800cd76:	00fc      	lsls	r4, r7, #3
 800cd78:	19e4      	adds	r4, r4, r7
 800cd7a:	4b9e      	ldr	r3, [pc, #632]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cd7c:	191b      	adds	r3, r3, r4
 800cd7e:	785b      	ldrb	r3, [r3, #1]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d04c      	beq.n	800ce1e <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800cd84:	00fc      	lsls	r4, r7, #3
 800cd86:	19e4      	adds	r4, r4, r7
 800cd88:	4b9a      	ldr	r3, [pc, #616]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cd8a:	191b      	adds	r3, r3, r4
 800cd8c:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800cd8e:	4644      	mov	r4, r8
 800cd90:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800cd92:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800cd94:	465c      	mov	r4, fp
 800cd96:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800cd98:	4654      	mov	r4, sl
 800cd9a:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800cd9c:	464c      	mov	r4, r9
 800cd9e:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800cda0:	2801      	cmp	r0, #1
 800cda2:	d003      	beq.n	800cdac <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800cda4:	2800      	cmp	r0, #0
 800cda6:	d113      	bne.n	800cdd0 <SetButtonEvents+0x8c>
 800cda8:	2900      	cmp	r1, #0
 800cdaa:	d042      	beq.n	800ce32 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800cdac:	00f9      	lsls	r1, r7, #3
 800cdae:	19c9      	adds	r1, r1, r7
 800cdb0:	4b90      	ldr	r3, [pc, #576]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cdb2:	185b      	adds	r3, r3, r1
 800cdb4:	7a19      	ldrb	r1, [r3, #8]
 800cdb6:	2401      	movs	r4, #1
 800cdb8:	4321      	orrs	r1, r4
 800cdba:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800cdbc:	2801      	cmp	r0, #1
 800cdbe:	d10c      	bne.n	800cdda <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800cdc0:	00fa      	lsls	r2, r7, #3
 800cdc2:	19d2      	adds	r2, r2, r7
 800cdc4:	4b8b      	ldr	r3, [pc, #556]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cdc6:	189b      	adds	r3, r3, r2
 800cdc8:	7a1a      	ldrb	r2, [r3, #8]
 800cdca:	2102      	movs	r1, #2
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800cdd0:	2801      	cmp	r0, #1
 800cdd2:	d042      	beq.n	800ce5a <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d152      	bne.n	800ce7e <SetButtonEvents+0x13a>
 800cdd8:	e03d      	b.n	800ce56 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d031      	beq.n	800ce42 <SetButtonEvents+0xfe>
 800cdde:	e044      	b.n	800ce6a <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d059      	beq.n	800ce98 <SetButtonEvents+0x154>
 800cde4:	e06d      	b.n	800cec2 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d100      	bne.n	800cdec <SetButtonEvents+0xa8>
 800cdea:	e082      	b.n	800cef2 <SetButtonEvents+0x1ae>
 800cdec:	e097      	b.n	800cf1e <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d100      	bne.n	800cdf4 <SetButtonEvents+0xb0>
 800cdf2:	e0f2      	b.n	800cfda <SetButtonEvents+0x296>
 800cdf4:	e09f      	b.n	800cf36 <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800cdf6:	0a19      	lsrs	r1, r3, #8
 800cdf8:	0209      	lsls	r1, r1, #8
 800cdfa:	4311      	orrs	r1, r2
 800cdfc:	ab02      	add	r3, sp, #8
 800cdfe:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800ce00:	0020      	movs	r0, r4
 800ce02:	f7ff fa1d 	bl	800c240 <EE_WriteVariable>
 800ce06:	e0ad      	b.n	800cf64 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800ce08:	0019      	movs	r1, r3
 800ce0a:	9801      	ldr	r0, [sp, #4]
 800ce0c:	f7ff fa18 	bl	800c240 <EE_WriteVariable>
 800ce10:	e0b7      	b.n	800cf82 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800ce12:	4653      	mov	r3, sl
 800ce14:	4319      	orrs	r1, r3
 800ce16:	0030      	movs	r0, r6
 800ce18:	f7ff fa12 	bl	800c240 <EE_WriteVariable>
 800ce1c:	e0c0      	b.n	800cfa0 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800ce1e:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800ce20:	b005      	add	sp, #20
 800ce22:	bc3c      	pop	{r2, r3, r4, r5}
 800ce24:	4690      	mov	r8, r2
 800ce26:	4699      	mov	r9, r3
 800ce28:	46a2      	mov	sl, r4
 800ce2a:	46ab      	mov	fp, r5
 800ce2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800ce2e:	200b      	movs	r0, #11
 800ce30:	e7f6      	b.n	800ce20 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800ce32:	00f9      	lsls	r1, r7, #3
 800ce34:	19c9      	adds	r1, r1, r7
 800ce36:	4b6f      	ldr	r3, [pc, #444]	; (800cff4 <SetButtonEvents+0x2b0>)
 800ce38:	185b      	adds	r3, r3, r1
 800ce3a:	7a19      	ldrb	r1, [r3, #8]
 800ce3c:	2401      	movs	r4, #1
 800ce3e:	43a1      	bics	r1, r4
 800ce40:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800ce42:	2a00      	cmp	r2, #0
 800ce44:	d1bc      	bne.n	800cdc0 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800ce46:	00fa      	lsls	r2, r7, #3
 800ce48:	19d2      	adds	r2, r2, r7
 800ce4a:	4b6a      	ldr	r3, [pc, #424]	; (800cff4 <SetButtonEvents+0x2b0>)
 800ce4c:	189b      	adds	r3, r3, r2
 800ce4e:	7a1a      	ldrb	r2, [r3, #8]
 800ce50:	2102      	movs	r1, #2
 800ce52:	438a      	bics	r2, r1
 800ce54:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800ce56:	2e00      	cmp	r6, #0
 800ce58:	d016      	beq.n	800ce88 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800ce5a:	00fa      	lsls	r2, r7, #3
 800ce5c:	19d2      	adds	r2, r2, r7
 800ce5e:	4b65      	ldr	r3, [pc, #404]	; (800cff4 <SetButtonEvents+0x2b0>)
 800ce60:	189b      	adds	r3, r3, r2
 800ce62:	7a1a      	ldrb	r2, [r3, #8]
 800ce64:	2104      	movs	r1, #4
 800ce66:	430a      	orrs	r2, r1
 800ce68:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800ce6a:	2801      	cmp	r0, #1
 800ce6c:	d1b8      	bne.n	800cde0 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800ce6e:	00fa      	lsls	r2, r7, #3
 800ce70:	19d2      	adds	r2, r2, r7
 800ce72:	4b60      	ldr	r3, [pc, #384]	; (800cff4 <SetButtonEvents+0x2b0>)
 800ce74:	189b      	adds	r3, r3, r2
 800ce76:	7a1a      	ldrb	r2, [r3, #8]
 800ce78:	2108      	movs	r1, #8
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800ce7e:	2801      	cmp	r0, #1
 800ce80:	d017      	beq.n	800ceb2 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d128      	bne.n	800ced8 <SetButtonEvents+0x194>
 800ce86:	e012      	b.n	800ceae <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800ce88:	00fa      	lsls	r2, r7, #3
 800ce8a:	19d2      	adds	r2, r2, r7
 800ce8c:	4b59      	ldr	r3, [pc, #356]	; (800cff4 <SetButtonEvents+0x2b0>)
 800ce8e:	189b      	adds	r3, r3, r2
 800ce90:	7a1a      	ldrb	r2, [r3, #8]
 800ce92:	2104      	movs	r1, #4
 800ce94:	438a      	bics	r2, r1
 800ce96:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800ce98:	4643      	mov	r3, r8
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1e7      	bne.n	800ce6e <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800ce9e:	00fa      	lsls	r2, r7, #3
 800cea0:	19d2      	adds	r2, r2, r7
 800cea2:	4b54      	ldr	r3, [pc, #336]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cea4:	189b      	adds	r3, r3, r2
 800cea6:	7a1a      	ldrb	r2, [r3, #8]
 800cea8:	2108      	movs	r1, #8
 800ceaa:	438a      	bics	r2, r1
 800ceac:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800ceae:	2d00      	cmp	r5, #0
 800ceb0:	d017      	beq.n	800cee2 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800ceb2:	00fa      	lsls	r2, r7, #3
 800ceb4:	19d2      	adds	r2, r2, r7
 800ceb6:	4b4f      	ldr	r3, [pc, #316]	; (800cff4 <SetButtonEvents+0x2b0>)
 800ceb8:	189b      	adds	r3, r3, r2
 800ceba:	7a1a      	ldrb	r2, [r3, #8]
 800cebc:	2110      	movs	r1, #16
 800cebe:	430a      	orrs	r2, r1
 800cec0:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800cec2:	2801      	cmp	r0, #1
 800cec4:	d000      	beq.n	800cec8 <SetButtonEvents+0x184>
 800cec6:	e78e      	b.n	800cde6 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800cec8:	00fa      	lsls	r2, r7, #3
 800ceca:	19d2      	adds	r2, r2, r7
 800cecc:	4b49      	ldr	r3, [pc, #292]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cece:	189b      	adds	r3, r3, r2
 800ced0:	7a1a      	ldrb	r2, [r3, #8]
 800ced2:	2120      	movs	r1, #32
 800ced4:	430a      	orrs	r2, r1
 800ced6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800ced8:	2801      	cmp	r0, #1
 800ceda:	d018      	beq.n	800cf0e <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800cedc:	2800      	cmp	r0, #0
 800cede:	d12a      	bne.n	800cf36 <SetButtonEvents+0x1f2>
 800cee0:	e012      	b.n	800cf08 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800cee2:	00fa      	lsls	r2, r7, #3
 800cee4:	19d2      	adds	r2, r2, r7
 800cee6:	4b43      	ldr	r3, [pc, #268]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cee8:	189b      	adds	r3, r3, r2
 800ceea:	7a1a      	ldrb	r2, [r3, #8]
 800ceec:	2110      	movs	r1, #16
 800ceee:	438a      	bics	r2, r1
 800cef0:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800cef2:	465b      	mov	r3, fp
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e7      	bne.n	800cec8 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800cef8:	00fa      	lsls	r2, r7, #3
 800cefa:	19d2      	adds	r2, r2, r7
 800cefc:	4b3d      	ldr	r3, [pc, #244]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cefe:	189b      	adds	r3, r3, r2
 800cf00:	7a1a      	ldrb	r2, [r3, #8]
 800cf02:	2120      	movs	r1, #32
 800cf04:	438a      	bics	r2, r1
 800cf06:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800cf08:	4653      	mov	r3, sl
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d05d      	beq.n	800cfca <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800cf0e:	00fa      	lsls	r2, r7, #3
 800cf10:	19d2      	adds	r2, r2, r7
 800cf12:	4b38      	ldr	r3, [pc, #224]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cf14:	189b      	adds	r3, r3, r2
 800cf16:	7a1a      	ldrb	r2, [r3, #8]
 800cf18:	2140      	movs	r1, #64	; 0x40
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800cf1e:	2801      	cmp	r0, #1
 800cf20:	d000      	beq.n	800cf24 <SetButtonEvents+0x1e0>
 800cf22:	e764      	b.n	800cdee <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800cf24:	00fa      	lsls	r2, r7, #3
 800cf26:	19d2      	adds	r2, r2, r7
 800cf28:	4b32      	ldr	r3, [pc, #200]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cf2a:	189b      	adds	r3, r3, r2
 800cf2c:	7a19      	ldrb	r1, [r3, #8]
 800cf2e:	2280      	movs	r2, #128	; 0x80
 800cf30:	4252      	negs	r2, r2
 800cf32:	430a      	orrs	r2, r1
 800cf34:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800cf36:	003c      	movs	r4, r7
 800cf38:	343a      	adds	r4, #58	; 0x3a
 800cf3a:	00a4      	lsls	r4, r4, #2
 800cf3c:	ab02      	add	r3, sp, #8
 800cf3e:	1d99      	adds	r1, r3, #6
 800cf40:	0020      	movs	r0, r4
 800cf42:	f7ff f94d 	bl	800c1e0 <EE_ReadVariable>
	if (!res)											// This variable exists
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d000      	beq.n	800cf4c <SetButtonEvents+0x208>
 800cf4a:	e770      	b.n	800ce2e <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800cf4c:	ab02      	add	r3, sp, #8
 800cf4e:	3306      	adds	r3, #6
 800cf50:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800cf52:	00fa      	lsls	r2, r7, #3
 800cf54:	19d2      	adds	r2, r2, r7
 800cf56:	4f27      	ldr	r7, [pc, #156]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cf58:	18bf      	adds	r7, r7, r2
 800cf5a:	7a3a      	ldrb	r2, [r7, #8]
 800cf5c:	b2d9      	uxtb	r1, r3
 800cf5e:	4291      	cmp	r1, r2
 800cf60:	d000      	beq.n	800cf64 <SetButtonEvents+0x220>
 800cf62:	e748      	b.n	800cdf6 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800cf64:	1c63      	adds	r3, r4, #1
 800cf66:	aa02      	add	r2, sp, #8
 800cf68:	1d97      	adds	r7, r2, #6
 800cf6a:	0039      	movs	r1, r7
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f7ff f936 	bl	800c1e0 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800cf74:	0236      	lsls	r6, r6, #8
 800cf76:	883a      	ldrh	r2, [r7, #0]
 800cf78:	465b      	mov	r3, fp
 800cf7a:	4333      	orrs	r3, r6
		if (temp16
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d000      	beq.n	800cf82 <SetButtonEvents+0x23e>
 800cf80:	e742      	b.n	800ce08 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800cf82:	1ca6      	adds	r6, r4, #2
 800cf84:	ab02      	add	r3, sp, #8
 800cf86:	1d9f      	adds	r7, r3, #6
 800cf88:	0039      	movs	r1, r7
 800cf8a:	0030      	movs	r0, r6
 800cf8c:	f7ff f928 	bl	800c1e0 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800cf90:	4643      	mov	r3, r8
 800cf92:	0219      	lsls	r1, r3, #8
 800cf94:	883a      	ldrh	r2, [r7, #0]
 800cf96:	4653      	mov	r3, sl
 800cf98:	430b      	orrs	r3, r1
		if (temp16
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d000      	beq.n	800cfa0 <SetButtonEvents+0x25c>
 800cf9e:	e738      	b.n	800ce12 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800cfa0:	3403      	adds	r4, #3
 800cfa2:	ab02      	add	r3, sp, #8
 800cfa4:	1d9e      	adds	r6, r3, #6
 800cfa6:	0031      	movs	r1, r6
 800cfa8:	0020      	movs	r0, r4
 800cfaa:	f7ff f919 	bl	800c1e0 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800cfae:	022d      	lsls	r5, r5, #8
 800cfb0:	8832      	ldrh	r2, [r6, #0]
 800cfb2:	464b      	mov	r3, r9
 800cfb4:	432b      	orrs	r3, r5
	return result;
 800cfb6:	2000      	movs	r0, #0
		if (temp16
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d100      	bne.n	800cfbe <SetButtonEvents+0x27a>
 800cfbc:	e730      	b.n	800ce20 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800cfbe:	0019      	movs	r1, r3
 800cfc0:	0020      	movs	r0, r4
 800cfc2:	f7ff f93d 	bl	800c240 <EE_WriteVariable>
	return result;
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	e72a      	b.n	800ce20 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800cfca:	00fa      	lsls	r2, r7, #3
 800cfcc:	19d2      	adds	r2, r2, r7
 800cfce:	4b09      	ldr	r3, [pc, #36]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cfd0:	189b      	adds	r3, r3, r2
 800cfd2:	7a1a      	ldrb	r2, [r3, #8]
 800cfd4:	2140      	movs	r1, #64	; 0x40
 800cfd6:	438a      	bics	r2, r1
 800cfd8:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800cfda:	464b      	mov	r3, r9
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1a1      	bne.n	800cf24 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800cfe0:	00fa      	lsls	r2, r7, #3
 800cfe2:	19d2      	adds	r2, r2, r7
 800cfe4:	4b03      	ldr	r3, [pc, #12]	; (800cff4 <SetButtonEvents+0x2b0>)
 800cfe6:	189b      	adds	r3, r3, r2
 800cfe8:	7a19      	ldrb	r1, [r3, #8]
 800cfea:	227f      	movs	r2, #127	; 0x7f
 800cfec:	400a      	ands	r2, r1
 800cfee:	721a      	strb	r2, [r3, #8]
 800cff0:	e7a1      	b.n	800cf36 <SetButtonEvents+0x1f2>
 800cff2:	46c0      	nop			; (mov r8, r8)
 800cff4:	20001350 	.word	0x20001350

0800cff8 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800cff8:	b500      	push	{lr}
 800cffa:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800cffc:	2214      	movs	r2, #20
 800cffe:	2100      	movs	r1, #0
 800d000:	a803      	add	r0, sp, #12
 800d002:	f006 fc43 	bl	801388c <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800d006:	4b12      	ldr	r3, [pc, #72]	; (800d050 <HAL_ADC_MspInit+0x58>)
 800d008:	6999      	ldr	r1, [r3, #24]
 800d00a:	2080      	movs	r0, #128	; 0x80
 800d00c:	0080      	lsls	r0, r0, #2
 800d00e:	4301      	orrs	r1, r0
 800d010:	6199      	str	r1, [r3, #24]
 800d012:	699a      	ldr	r2, [r3, #24]
 800d014:	4002      	ands	r2, r0
 800d016:	9201      	str	r2, [sp, #4]
 800d018:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d01a:	695a      	ldr	r2, [r3, #20]
 800d01c:	2180      	movs	r1, #128	; 0x80
 800d01e:	0289      	lsls	r1, r1, #10
 800d020:	430a      	orrs	r2, r1
 800d022:	615a      	str	r2, [r3, #20]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	400b      	ands	r3, r1
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800d02c:	4b09      	ldr	r3, [pc, #36]	; (800d054 <HAL_ADC_MspInit+0x5c>)
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d001      	beq.n	800d038 <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800d034:	b009      	add	sp, #36	; 0x24
 800d036:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800d038:	333b      	adds	r3, #59	; 0x3b
 800d03a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d03c:	3b39      	subs	r3, #57	; 0x39
 800d03e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800d040:	3871      	subs	r0, #113	; 0x71
 800d042:	38ff      	subs	r0, #255	; 0xff
 800d044:	a903      	add	r1, sp, #12
 800d046:	05c0      	lsls	r0, r0, #23
 800d048:	f004 fc96 	bl	8011978 <HAL_GPIO_Init>
}
 800d04c:	e7f2      	b.n	800d034 <HAL_ADC_MspInit+0x3c>
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	40021000 	.word	0x40021000
 800d054:	20001381 	.word	0x20001381

0800d058 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800d058:	6803      	ldr	r3, [r0, #0]
 800d05a:	4a0d      	ldr	r2, [pc, #52]	; (800d090 <Get_channel+0x38>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800d060:	4a0c      	ldr	r2, [pc, #48]	; (800d094 <Get_channel+0x3c>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d008      	beq.n	800d078 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800d066:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800d068:	4b0b      	ldr	r3, [pc, #44]	; (800d098 <Get_channel+0x40>)
 800d06a:	4299      	cmp	r1, r3
 800d06c:	d00c      	beq.n	800d088 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 800d06e:	4b0b      	ldr	r3, [pc, #44]	; (800d09c <Get_channel+0x44>)
 800d070:	4299      	cmp	r1, r3
 800d072:	d1f8      	bne.n	800d066 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800d074:	2003      	movs	r0, #3
 800d076:	e7f6      	b.n	800d066 <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800d078:	4b07      	ldr	r3, [pc, #28]	; (800d098 <Get_channel+0x40>)
 800d07a:	4299      	cmp	r1, r3
 800d07c:	d006      	beq.n	800d08c <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 800d07e:	4b07      	ldr	r3, [pc, #28]	; (800d09c <Get_channel+0x44>)
 800d080:	4299      	cmp	r1, r3
 800d082:	d1f0      	bne.n	800d066 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 800d084:	2005      	movs	r0, #5
 800d086:	e7ee      	b.n	800d066 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800d088:	2002      	movs	r0, #2
 800d08a:	e7ec      	b.n	800d066 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 800d08c:	2004      	movs	r0, #4
 800d08e:	e7ea      	b.n	800d066 <Get_channel+0xe>
 800d090:	40004400 	.word	0x40004400
 800d094:	40011400 	.word	0x40011400
 800d098:	08018040 	.word	0x08018040
 800d09c:	08018044 	.word	0x08018044

0800d0a0 <Error_Handler>:

void Error_Handler(void) {
 800d0a0:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800d0a2:	2064      	movs	r0, #100	; 0x64
 800d0a4:	f003 f97c 	bl	80103a0 <HAL_Delay>

}
 800d0a8:	bd10      	pop	{r4, pc}
	...

0800d0ac <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800d0ac:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800d0ae:	4811      	ldr	r0, [pc, #68]	; (800d0f4 <MX_ADC_Init+0x48>)
 800d0b0:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <MX_ADC_Init+0x4c>)
 800d0b2:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d0b4:	2380      	movs	r3, #128	; 0x80
 800d0b6:	061b      	lsls	r3, r3, #24
 800d0b8:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d0be:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d0c4:	2104      	movs	r1, #4
 800d0c6:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800d0c8:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800d0ca:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800d0cc:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800d0ce:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d0d0:	21c2      	movs	r1, #194	; 0xc2
 800d0d2:	31ff      	adds	r1, #255	; 0xff
 800d0d4:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d0d6:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800d0d8:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800d0da:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800d0dc:	f003 fa3a 	bl	8010554 <HAL_ADC_Init>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	d103      	bne.n	800d0ec <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800d0e4:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <MX_ADC_Init+0x50>)
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	701a      	strb	r2, [r3, #0]
}
 800d0ea:	bd10      	pop	{r4, pc}
		Error_Handler();
 800d0ec:	f7ff ffd8 	bl	800d0a0 <Error_Handler>
 800d0f0:	e7f8      	b.n	800d0e4 <MX_ADC_Init+0x38>
 800d0f2:	46c0      	nop			; (mov r8, r8)
 800d0f4:	20006630 	.word	0x20006630
 800d0f8:	40012400 	.word	0x40012400
 800d0fc:	2000133e 	.word	0x2000133e

0800d100 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800d100:	b570      	push	{r4, r5, r6, lr}
 800d102:	b082      	sub	sp, #8
 800d104:	0005      	movs	r5, r0
 800d106:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 800d108:	4b4d      	ldr	r3, [pc, #308]	; (800d240 <ReadTempAndVref+0x140>)
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d100      	bne.n	800d112 <ReadTempAndVref+0x12>
 800d110:	e087      	b.n	800d222 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d112:	494c      	ldr	r1, [pc, #304]	; (800d244 <ReadTempAndVref+0x144>)
 800d114:	2310      	movs	r3, #16
 800d116:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d118:	2380      	movs	r3, #128	; 0x80
 800d11a:	015b      	lsls	r3, r3, #5
 800d11c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d11e:	2301      	movs	r3, #1
 800d120:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d122:	4849      	ldr	r0, [pc, #292]	; (800d248 <ReadTempAndVref+0x148>)
 800d124:	f003 fbba 	bl	801089c <HAL_ADC_ConfigChannel>
 800d128:	2800      	cmp	r0, #0
 800d12a:	d000      	beq.n	800d12e <ReadTempAndVref+0x2e>
 800d12c:	e07c      	b.n	800d228 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 800d12e:	4c46      	ldr	r4, [pc, #280]	; (800d248 <ReadTempAndVref+0x148>)
 800d130:	0020      	movs	r0, r4
 800d132:	f003 fab7 	bl	80106a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800d136:	2164      	movs	r1, #100	; 0x64
 800d138:	0020      	movs	r0, r4
 800d13a:	f003 fb05 	bl	8010748 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800d13e:	0020      	movs	r0, r4
 800d140:	f003 fba6 	bl	8010890 <HAL_ADC_GetValue>
 800d144:	4b41      	ldr	r3, [pc, #260]	; (800d24c <ReadTempAndVref+0x14c>)
 800d146:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800d148:	0400      	lsls	r0, r0, #16
 800d14a:	0c00      	lsrs	r0, r0, #16
 800d14c:	f7f5 fd2c 	bl	8002ba8 <__aeabi_i2d>
 800d150:	4a3f      	ldr	r2, [pc, #252]	; (800d250 <ReadTempAndVref+0x150>)
 800d152:	4b40      	ldr	r3, [pc, #256]	; (800d254 <ReadTempAndVref+0x154>)
 800d154:	f7f4 ff1c 	bl	8001f90 <__aeabi_dmul>
 800d158:	2200      	movs	r2, #0
 800d15a:	4b3f      	ldr	r3, [pc, #252]	; (800d258 <ReadTempAndVref+0x158>)
 800d15c:	f7f4 fb0e 	bl	800177c <__aeabi_ddiv>
 800d160:	4a3e      	ldr	r2, [pc, #248]	; (800d25c <ReadTempAndVref+0x15c>)
 800d162:	4b3f      	ldr	r3, [pc, #252]	; (800d260 <ReadTempAndVref+0x160>)
 800d164:	f7f5 f986 	bl	8002474 <__aeabi_dsub>
 800d168:	4a3e      	ldr	r2, [pc, #248]	; (800d264 <ReadTempAndVref+0x164>)
 800d16a:	4b3f      	ldr	r3, [pc, #252]	; (800d268 <ReadTempAndVref+0x168>)
 800d16c:	f7f4 fb06 	bl	800177c <__aeabi_ddiv>
 800d170:	2200      	movs	r2, #0
 800d172:	4b3e      	ldr	r3, [pc, #248]	; (800d26c <ReadTempAndVref+0x16c>)
 800d174:	f7f3 ffe6 	bl	8001144 <__aeabi_dadd>
 800d178:	f7f5 fdd4 	bl	8002d24 <__aeabi_d2f>
 800d17c:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800d17e:	0020      	movs	r0, r4
 800d180:	f003 fac0 	bl	8010704 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d184:	492f      	ldr	r1, [pc, #188]	; (800d244 <ReadTempAndVref+0x144>)
 800d186:	2310      	movs	r3, #16
 800d188:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800d18a:	4b39      	ldr	r3, [pc, #228]	; (800d270 <ReadTempAndVref+0x170>)
 800d18c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d18e:	2301      	movs	r3, #1
 800d190:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d192:	0020      	movs	r0, r4
 800d194:	f003 fb82 	bl	801089c <HAL_ADC_ConfigChannel>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d148      	bne.n	800d22e <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d19c:	4929      	ldr	r1, [pc, #164]	; (800d244 <ReadTempAndVref+0x144>)
 800d19e:	2311      	movs	r3, #17
 800d1a0:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d1a2:	2380      	movs	r3, #128	; 0x80
 800d1a4:	015b      	lsls	r3, r3, #5
 800d1a6:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800d1a8:	2305      	movs	r3, #5
 800d1aa:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d1ac:	4826      	ldr	r0, [pc, #152]	; (800d248 <ReadTempAndVref+0x148>)
 800d1ae:	f003 fb75 	bl	801089c <HAL_ADC_ConfigChannel>
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d13e      	bne.n	800d234 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 800d1b6:	4d24      	ldr	r5, [pc, #144]	; (800d248 <ReadTempAndVref+0x148>)
 800d1b8:	0028      	movs	r0, r5
 800d1ba:	f003 fa73 	bl	80106a4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800d1be:	2164      	movs	r1, #100	; 0x64
 800d1c0:	0028      	movs	r0, r5
 800d1c2:	f003 fac1 	bl	8010748 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800d1c6:	0028      	movs	r0, r5
 800d1c8:	f003 fb62 	bl	8010890 <HAL_ADC_GetValue>
 800d1cc:	0004      	movs	r4, r0
 800d1ce:	4b29      	ldr	r3, [pc, #164]	; (800d274 <ReadTempAndVref+0x174>)
 800d1d0:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800d1d2:	4b29      	ldr	r3, [pc, #164]	; (800d278 <ReadTempAndVref+0x178>)
 800d1d4:	8818      	ldrh	r0, [r3, #0]
 800d1d6:	f7f5 fce7 	bl	8002ba8 <__aeabi_i2d>
 800d1da:	4a1d      	ldr	r2, [pc, #116]	; (800d250 <ReadTempAndVref+0x150>)
 800d1dc:	4b1d      	ldr	r3, [pc, #116]	; (800d254 <ReadTempAndVref+0x154>)
 800d1de:	f7f4 fed7 	bl	8001f90 <__aeabi_dmul>
 800d1e2:	9000      	str	r0, [sp, #0]
 800d1e4:	9101      	str	r1, [sp, #4]
 800d1e6:	0420      	lsls	r0, r4, #16
 800d1e8:	0c00      	lsrs	r0, r0, #16
 800d1ea:	f7f5 fcdd 	bl	8002ba8 <__aeabi_i2d>
 800d1ee:	0002      	movs	r2, r0
 800d1f0:	000b      	movs	r3, r1
 800d1f2:	9800      	ldr	r0, [sp, #0]
 800d1f4:	9901      	ldr	r1, [sp, #4]
 800d1f6:	f7f4 fac1 	bl	800177c <__aeabi_ddiv>
 800d1fa:	f7f5 fd93 	bl	8002d24 <__aeabi_d2f>
 800d1fe:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800d200:	0028      	movs	r0, r5
 800d202:	f003 fa7f 	bl	8010704 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d206:	490f      	ldr	r1, [pc, #60]	; (800d244 <ReadTempAndVref+0x144>)
 800d208:	2311      	movs	r3, #17
 800d20a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800d20c:	4b18      	ldr	r3, [pc, #96]	; (800d270 <ReadTempAndVref+0x170>)
 800d20e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d210:	2301      	movs	r3, #1
 800d212:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d214:	0028      	movs	r0, r5
 800d216:	f003 fb41 	bl	801089c <HAL_ADC_ConfigChannel>
 800d21a:	2800      	cmp	r0, #0
 800d21c:	d10d      	bne.n	800d23a <ReadTempAndVref+0x13a>
}
 800d21e:	b002      	add	sp, #8
 800d220:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 800d222:	f7ff ff43 	bl	800d0ac <MX_ADC_Init>
 800d226:	e774      	b.n	800d112 <ReadTempAndVref+0x12>
		Error_Handler();
 800d228:	f7ff ff3a 	bl	800d0a0 <Error_Handler>
 800d22c:	e77f      	b.n	800d12e <ReadTempAndVref+0x2e>
		Error_Handler();
 800d22e:	f7ff ff37 	bl	800d0a0 <Error_Handler>
 800d232:	e7b3      	b.n	800d19c <ReadTempAndVref+0x9c>
		Error_Handler();
 800d234:	f7ff ff34 	bl	800d0a0 <Error_Handler>
 800d238:	e7bd      	b.n	800d1b6 <ReadTempAndVref+0xb6>
		Error_Handler();
 800d23a:	f7ff ff31 	bl	800d0a0 <Error_Handler>
}
 800d23e:	e7ee      	b.n	800d21e <ReadTempAndVref+0x11e>
 800d240:	2000133e 	.word	0x2000133e
 800d244:	200013a8 	.word	0x200013a8
 800d248:	20006630 	.word	0x20006630
 800d24c:	20001342 	.word	0x20001342
 800d250:	66666666 	.word	0x66666666
 800d254:	400a6666 	.word	0x400a6666
 800d258:	40affe00 	.word	0x40affe00
 800d25c:	28f5c28f 	.word	0x28f5c28f
 800d260:	3ff68f5c 	.word	0x3ff68f5c
 800d264:	33333333 	.word	0x33333333
 800d268:	40113333 	.word	0x40113333
 800d26c:	40390000 	.word	0x40390000
 800d270:	00001001 	.word	0x00001001
 800d274:	20001340 	.word	0x20001340
 800d278:	1ffff7ba 	.word	0x1ffff7ba

0800d27c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800d27c:	b570      	push	{r4, r5, r6, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	0004      	movs	r4, r0
 800d282:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800d284:	1e83      	subs	r3, r0, #2
 800d286:	2b01      	cmp	r3, #1
 800d288:	d901      	bls.n	800d28e <GetReadPrecentage+0x12>
}
 800d28a:	b006      	add	sp, #24
 800d28c:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800d28e:	4b4a      	ldr	r3, [pc, #296]	; (800d3b8 <GetReadPrecentage+0x13c>)
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d04f      	beq.n	800d336 <GetReadPrecentage+0xba>
		Channel = Get_channel(GetUart(port), "bottom");
 800d296:	0020      	movs	r0, r4
 800d298:	f000 ff72 	bl	800e180 <GetUart>
 800d29c:	4947      	ldr	r1, [pc, #284]	; (800d3bc <GetReadPrecentage+0x140>)
 800d29e:	f7ff fedb 	bl	800d058 <Get_channel>
 800d2a2:	4b47      	ldr	r3, [pc, #284]	; (800d3c0 <GetReadPrecentage+0x144>)
 800d2a4:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800d2a6:	4947      	ldr	r1, [pc, #284]	; (800d3c4 <GetReadPrecentage+0x148>)
 800d2a8:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d2aa:	2380      	movs	r3, #128	; 0x80
 800d2ac:	015b      	lsls	r3, r3, #5
 800d2ae:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d2b4:	4844      	ldr	r0, [pc, #272]	; (800d3c8 <GetReadPrecentage+0x14c>)
 800d2b6:	f003 faf1 	bl	801089c <HAL_ADC_ConfigChannel>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d178      	bne.n	800d3b0 <GetReadPrecentage+0x134>
		HAL_ADC_Start(&hadc);
 800d2be:	4c42      	ldr	r4, [pc, #264]	; (800d3c8 <GetReadPrecentage+0x14c>)
 800d2c0:	0020      	movs	r0, r4
 800d2c2:	f003 f9ef 	bl	80106a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800d2c6:	2164      	movs	r1, #100	; 0x64
 800d2c8:	0020      	movs	r0, r4
 800d2ca:	f003 fa3d 	bl	8010748 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800d2ce:	0020      	movs	r0, r4
 800d2d0:	f003 fade 	bl	8010890 <HAL_ADC_GetValue>
 800d2d4:	f7f3 fef6 	bl	80010c4 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800d2d8:	f7f5 fcd2 	bl	8002c80 <__aeabi_f2d>
 800d2dc:	4a3b      	ldr	r2, [pc, #236]	; (800d3cc <GetReadPrecentage+0x150>)
 800d2de:	4b3c      	ldr	r3, [pc, #240]	; (800d3d0 <GetReadPrecentage+0x154>)
 800d2e0:	f7f4 fe56 	bl	8001f90 <__aeabi_dmul>
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	4b3b      	ldr	r3, [pc, #236]	; (800d3d4 <GetReadPrecentage+0x158>)
 800d2e8:	f7f4 fa48 	bl	800177c <__aeabi_ddiv>
 800d2ec:	f7f5 fd1a 	bl	8002d24 <__aeabi_d2f>
 800d2f0:	4b39      	ldr	r3, [pc, #228]	; (800d3d8 <GetReadPrecentage+0x15c>)
 800d2f2:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 800d2f4:	4939      	ldr	r1, [pc, #228]	; (800d3dc <GetReadPrecentage+0x160>)
 800d2f6:	f7f3 fbcf 	bl	8000a98 <__aeabi_fmul>
 800d2fa:	f7f5 fcc1 	bl	8002c80 <__aeabi_f2d>
 800d2fe:	4a33      	ldr	r2, [pc, #204]	; (800d3cc <GetReadPrecentage+0x150>)
 800d300:	4b33      	ldr	r3, [pc, #204]	; (800d3d0 <GetReadPrecentage+0x154>)
 800d302:	f7f4 fa3b 	bl	800177c <__aeabi_ddiv>
 800d306:	f7f5 fd0d 	bl	8002d24 <__aeabi_d2f>
 800d30a:	4b35      	ldr	r3, [pc, #212]	; (800d3e0 <GetReadPrecentage+0x164>)
 800d30c:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 800d30e:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800d310:	0020      	movs	r0, r4
 800d312:	f003 f9f7 	bl	8010704 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d316:	492b      	ldr	r1, [pc, #172]	; (800d3c4 <GetReadPrecentage+0x148>)
 800d318:	4b29      	ldr	r3, [pc, #164]	; (800d3c0 <GetReadPrecentage+0x144>)
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d31e:	4b31      	ldr	r3, [pc, #196]	; (800d3e4 <GetReadPrecentage+0x168>)
 800d320:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d322:	2301      	movs	r3, #1
 800d324:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d326:	0020      	movs	r0, r4
 800d328:	f003 fab8 	bl	801089c <HAL_ADC_ConfigChannel>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d0ac      	beq.n	800d28a <GetReadPrecentage+0xe>
			Error_Handler();
 800d330:	f7ff feb6 	bl	800d0a0 <Error_Handler>
 800d334:	e7a9      	b.n	800d28a <GetReadPrecentage+0xe>
			MX_ADC_Init();
 800d336:	f7ff feb9 	bl	800d0ac <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800d33a:	0020      	movs	r0, r4
 800d33c:	f000 ff20 	bl	800e180 <GetUart>
 800d340:	f005 fc6b 	bl	8012c1a <HAL_UART_DeInit>
			if (port == 3) {
 800d344:	2c03      	cmp	r4, #3
 800d346:	d01a      	beq.n	800d37e <GetReadPrecentage+0x102>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800d348:	2690      	movs	r6, #144	; 0x90
 800d34a:	05f6      	lsls	r6, r6, #23
 800d34c:	2104      	movs	r1, #4
 800d34e:	0030      	movs	r0, r6
 800d350:	f004 fbf2 	bl	8011b38 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d354:	2304      	movs	r3, #4
 800d356:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d358:	3b03      	subs	r3, #3
 800d35a:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d35c:	3302      	adds	r3, #2
 800d35e:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d360:	a901      	add	r1, sp, #4
 800d362:	0030      	movs	r0, r6
 800d364:	f004 fb08 	bl	8011978 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800d368:	4b1f      	ldr	r3, [pc, #124]	; (800d3e8 <GetReadPrecentage+0x16c>)
 800d36a:	191b      	adds	r3, r3, r4
 800d36c:	3b01      	subs	r3, #1
 800d36e:	2206      	movs	r2, #6
 800d370:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800d372:	3a05      	subs	r2, #5
 800d374:	2104      	movs	r1, #4
 800d376:	0030      	movs	r0, r6
 800d378:	f004 fc72 	bl	8011c60 <HAL_GPIO_WritePin>
 800d37c:	e78b      	b.n	800d296 <GetReadPrecentage+0x1a>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800d37e:	2690      	movs	r6, #144	; 0x90
 800d380:	05f6      	lsls	r6, r6, #23
 800d382:	2110      	movs	r1, #16
 800d384:	0030      	movs	r0, r6
 800d386:	f004 fbd7 	bl	8011b38 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d38a:	2310      	movs	r3, #16
 800d38c:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d38e:	3b0f      	subs	r3, #15
 800d390:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d392:	3302      	adds	r3, #2
 800d394:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d396:	a901      	add	r1, sp, #4
 800d398:	0030      	movs	r0, r6
 800d39a:	f004 faed 	bl	8011978 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800d39e:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <GetReadPrecentage+0x16c>)
 800d3a0:	2206      	movs	r2, #6
 800d3a2:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800d3a4:	3a05      	subs	r2, #5
 800d3a6:	2110      	movs	r1, #16
 800d3a8:	0030      	movs	r0, r6
 800d3aa:	f004 fc59 	bl	8011c60 <HAL_GPIO_WritePin>
 800d3ae:	e772      	b.n	800d296 <GetReadPrecentage+0x1a>
			Error_Handler();
 800d3b0:	f7ff fe76 	bl	800d0a0 <Error_Handler>
 800d3b4:	e783      	b.n	800d2be <GetReadPrecentage+0x42>
 800d3b6:	46c0      	nop			; (mov r8, r8)
 800d3b8:	2000133e 	.word	0x2000133e
 800d3bc:	08018044 	.word	0x08018044
 800d3c0:	2000134c 	.word	0x2000134c
 800d3c4:	200013a8 	.word	0x200013a8
 800d3c8:	20006630 	.word	0x20006630
 800d3cc:	66666666 	.word	0x66666666
 800d3d0:	400a6666 	.word	0x400a6666
 800d3d4:	40affe00 	.word	0x40affe00
 800d3d8:	20001384 	.word	0x20001384
 800d3dc:	42c80000 	.word	0x42c80000
 800d3e0:	20001378 	.word	0x20001378
 800d3e4:	00001001 	.word	0x00001001
 800d3e8:	20000870 	.word	0x20000870

0800d3ec <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800d3ec:	2802      	cmp	r0, #2
 800d3ee:	d004      	beq.n	800d3fa <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800d3f0:	2803      	cmp	r0, #3
 800d3f2:	d010      	beq.n	800d416 <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800d3f4:	4b0f      	ldr	r3, [pc, #60]	; (800d434 <Get_Rank+0x48>)
 800d3f6:	7818      	ldrb	r0, [r3, #0]
}
 800d3f8:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800d3fa:	4b0f      	ldr	r3, [pc, #60]	; (800d438 <Get_Rank+0x4c>)
 800d3fc:	4299      	cmp	r1, r3
 800d3fe:	d006      	beq.n	800d40e <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 800d400:	4b0e      	ldr	r3, [pc, #56]	; (800d43c <Get_Rank+0x50>)
 800d402:	4299      	cmp	r1, r3
 800d404:	d1f6      	bne.n	800d3f4 <Get_Rank+0x8>
		Rank_t = 1;
 800d406:	4b0b      	ldr	r3, [pc, #44]	; (800d434 <Get_Rank+0x48>)
 800d408:	2201      	movs	r2, #1
 800d40a:	701a      	strb	r2, [r3, #0]
 800d40c:	e7f2      	b.n	800d3f4 <Get_Rank+0x8>
		Rank_t = 0;
 800d40e:	4b09      	ldr	r3, [pc, #36]	; (800d434 <Get_Rank+0x48>)
 800d410:	2200      	movs	r2, #0
 800d412:	701a      	strb	r2, [r3, #0]
 800d414:	e7ee      	b.n	800d3f4 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 800d416:	4b08      	ldr	r3, [pc, #32]	; (800d438 <Get_Rank+0x4c>)
 800d418:	4299      	cmp	r1, r3
 800d41a:	d006      	beq.n	800d42a <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800d41c:	4b07      	ldr	r3, [pc, #28]	; (800d43c <Get_Rank+0x50>)
 800d41e:	4299      	cmp	r1, r3
 800d420:	d1e8      	bne.n	800d3f4 <Get_Rank+0x8>
		Rank_t = 3;
 800d422:	4b04      	ldr	r3, [pc, #16]	; (800d434 <Get_Rank+0x48>)
 800d424:	2203      	movs	r2, #3
 800d426:	701a      	strb	r2, [r3, #0]
 800d428:	e7e4      	b.n	800d3f4 <Get_Rank+0x8>
		Rank_t = 2;
 800d42a:	4b02      	ldr	r3, [pc, #8]	; (800d434 <Get_Rank+0x48>)
 800d42c:	2202      	movs	r2, #2
 800d42e:	701a      	strb	r2, [r3, #0]
 800d430:	e7e0      	b.n	800d3f4 <Get_Rank+0x8>
 800d432:	46c0      	nop			; (mov r8, r8)
 800d434:	2000134d 	.word	0x2000134d
 800d438:	08018040 	.word	0x08018040
 800d43c:	08018044 	.word	0x08018044

0800d440 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	0004      	movs	r4, r0
 800d444:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800d446:	1e83      	subs	r3, r0, #2
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d900      	bls.n	800d44e <ADCSelectChannel+0xe>
}
 800d44c:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800d44e:	4b10      	ldr	r3, [pc, #64]	; (800d490 <ADCSelectChannel+0x50>)
 800d450:	2201      	movs	r2, #1
 800d452:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 800d454:	f000 fe94 	bl	800e180 <GetUart>
 800d458:	f005 fbdf 	bl	8012c1a <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <ADCSelectChannel+0x54>)
 800d45e:	191b      	adds	r3, r3, r4
 800d460:	3b01      	subs	r3, #1
 800d462:	2206      	movs	r2, #6
 800d464:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800d466:	0020      	movs	r0, r4
 800d468:	f000 fe8a 	bl	800e180 <GetUart>
 800d46c:	0029      	movs	r1, r5
 800d46e:	f7ff fdf3 	bl	800d058 <Get_channel>
 800d472:	4b09      	ldr	r3, [pc, #36]	; (800d498 <ADCSelectChannel+0x58>)
 800d474:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 800d476:	0029      	movs	r1, r5
 800d478:	0020      	movs	r0, r4
 800d47a:	f7ff ffb7 	bl	800d3ec <Get_Rank>
 800d47e:	4b07      	ldr	r3, [pc, #28]	; (800d49c <ADCSelectChannel+0x5c>)
 800d480:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 800d482:	4b07      	ldr	r3, [pc, #28]	; (800d4a0 <ADCSelectChannel+0x60>)
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1e0      	bne.n	800d44c <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800d48a:	f7ff fe0f 	bl	800d0ac <MX_ADC_Init>
}
 800d48e:	e7dd      	b.n	800d44c <ADCSelectChannel+0xc>
 800d490:	20001381 	.word	0x20001381
 800d494:	20000870 	.word	0x20000870
 800d498:	2000134c 	.word	0x2000134c
 800d49c:	2000134d 	.word	0x2000134d
 800d4a0:	2000133e 	.word	0x2000133e

0800d4a4 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	0005      	movs	r5, r0
 800d4a8:	000e      	movs	r6, r1
 800d4aa:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800d4ac:	4b26      	ldr	r3, [pc, #152]	; (800d548 <ReadADCChannel+0xa4>)
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d008      	beq.n	800d4c6 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800d4b4:	4b25      	ldr	r3, [pc, #148]	; (800d54c <ReadADCChannel+0xa8>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	4a25      	ldr	r2, [pc, #148]	; (800d550 <ReadADCChannel+0xac>)
 800d4bc:	5a98      	ldrh	r0, [r3, r2]
 800d4be:	f7f3 fe01 	bl	80010c4 <__aeabi_ui2f>
 800d4c2:	6020      	str	r0, [r4, #0]
}
 800d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800d4c6:	f000 fe5b 	bl	800e180 <GetUart>
 800d4ca:	0031      	movs	r1, r6
 800d4cc:	f7ff fdc4 	bl	800d058 <Get_channel>
 800d4d0:	4f20      	ldr	r7, [pc, #128]	; (800d554 <ReadADCChannel+0xb0>)
 800d4d2:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 800d4d4:	0031      	movs	r1, r6
 800d4d6:	0028      	movs	r0, r5
 800d4d8:	f7ff ff88 	bl	800d3ec <Get_Rank>
 800d4dc:	4b1b      	ldr	r3, [pc, #108]	; (800d54c <ReadADCChannel+0xa8>)
 800d4de:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800d4e0:	491d      	ldr	r1, [pc, #116]	; (800d558 <ReadADCChannel+0xb4>)
 800d4e2:	783b      	ldrb	r3, [r7, #0]
 800d4e4:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d4e6:	2380      	movs	r3, #128	; 0x80
 800d4e8:	015b      	lsls	r3, r3, #5
 800d4ea:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d4f0:	481a      	ldr	r0, [pc, #104]	; (800d55c <ReadADCChannel+0xb8>)
 800d4f2:	f003 f9d3 	bl	801089c <HAL_ADC_ConfigChannel>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d122      	bne.n	800d540 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800d4fa:	4d18      	ldr	r5, [pc, #96]	; (800d55c <ReadADCChannel+0xb8>)
 800d4fc:	0028      	movs	r0, r5
 800d4fe:	f003 f8d1 	bl	80106a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800d502:	2164      	movs	r1, #100	; 0x64
 800d504:	0028      	movs	r0, r5
 800d506:	f003 f91f 	bl	8010748 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800d50a:	0028      	movs	r0, r5
 800d50c:	f003 f9c0 	bl	8010890 <HAL_ADC_GetValue>
 800d510:	4b0e      	ldr	r3, [pc, #56]	; (800d54c <ReadADCChannel+0xa8>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	005b      	lsls	r3, r3, #1
 800d516:	4a0e      	ldr	r2, [pc, #56]	; (800d550 <ReadADCChannel+0xac>)
 800d518:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800d51a:	0028      	movs	r0, r5
 800d51c:	f003 f8f2 	bl	8010704 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d520:	490d      	ldr	r1, [pc, #52]	; (800d558 <ReadADCChannel+0xb4>)
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <ReadADCChannel+0xb0>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d528:	4b0d      	ldr	r3, [pc, #52]	; (800d560 <ReadADCChannel+0xbc>)
 800d52a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d52c:	2303      	movs	r3, #3
 800d52e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d530:	0028      	movs	r0, r5
 800d532:	f003 f9b3 	bl	801089c <HAL_ADC_ConfigChannel>
 800d536:	2800      	cmp	r0, #0
 800d538:	d0bc      	beq.n	800d4b4 <ReadADCChannel+0x10>
			Error_Handler();
 800d53a:	f7ff fdb1 	bl	800d0a0 <Error_Handler>
 800d53e:	e7b9      	b.n	800d4b4 <ReadADCChannel+0x10>
			Error_Handler();
 800d540:	f7ff fdae 	bl	800d0a0 <Error_Handler>
 800d544:	e7d9      	b.n	800d4fa <ReadADCChannel+0x56>
 800d546:	46c0      	nop			; (mov r8, r8)
 800d548:	2000133e 	.word	0x2000133e
 800d54c:	2000134d 	.word	0x2000134d
 800d550:	20001344 	.word	0x20001344
 800d554:	2000134c 	.word	0x2000134c
 800d558:	200013a8 	.word	0x200013a8
 800d55c:	20006630 	.word	0x20006630
 800d560:	00001001 	.word	0x00001001

0800d564 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800d564:	4770      	bx	lr

0800d566 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800d566:	4770      	bx	lr

0800d568 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800d568:	4770      	bx	lr

0800d56a <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800d56a:	4770      	bx	lr

0800d56c <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800d56c:	4770      	bx	lr
	...

0800d570 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d572:	46de      	mov	lr, fp
 800d574:	4657      	mov	r7, sl
 800d576:	464e      	mov	r6, r9
 800d578:	4645      	mov	r5, r8
 800d57a:	b5e0      	push	{r5, r6, r7, lr}
 800d57c:	b089      	sub	sp, #36	; 0x24
 800d57e:	4dbd      	ldr	r5, [pc, #756]	; (800d874 <CheckAttachedButtons+0x304>)
 800d580:	2404      	movs	r4, #4
 800d582:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	469b      	mov	fp, r3
 800d588:	4699      	mov	r9, r3
 800d58a:	e111      	b.n	800d7b0 <CheckAttachedButtons+0x240>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800d58c:	230e      	movs	r3, #14
 800d58e:	aa02      	add	r2, sp, #8
 800d590:	4694      	mov	ip, r2
 800d592:	4463      	add	r3, ip
 800d594:	8819      	ldrh	r1, [r3, #0]
 800d596:	2201      	movs	r2, #1
 800d598:	9807      	ldr	r0, [sp, #28]
 800d59a:	f004 fb61 	bl	8011c60 <HAL_GPIO_WritePin>
				Delay_us(10);
 800d59e:	200a      	movs	r0, #10
 800d5a0:	f000 fcb0 	bl	800df04 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800d5a4:	ab05      	add	r3, sp, #20
 800d5a6:	8819      	ldrh	r1, [r3, #0]
 800d5a8:	9806      	ldr	r0, [sp, #24]
 800d5aa:	f004 fb53 	bl	8011c54 <HAL_GPIO_ReadPin>
 800d5ae:	4681      	mov	r9, r0
 800d5b0:	e126      	b.n	800d800 <CheckAttachedButtons+0x290>
			switch (button[i].type) {
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d105      	bne.n	800d5c2 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800d5b6:	464b      	mov	r3, r9
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d046      	beq.n	800d64a <CheckAttachedButtons+0xda>
				else if (connected == GPIO_PIN_RESET)
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d100      	bne.n	800d5c2 <CheckAttachedButtons+0x52>
 800d5c0:	e1c6      	b.n	800d950 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 800d5c2:	465b      	mov	r3, fp
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	d001      	beq.n	800d5cc <CheckAttachedButtons+0x5c>
 800d5c8:	2b02      	cmp	r3, #2
 800d5ca:	d107      	bne.n	800d5dc <CheckAttachedButtons+0x6c>
				if (pressCounter[i] < 0xFFFF)
 800d5cc:	4baa      	ldr	r3, [pc, #680]	; (800d878 <CheckAttachedButtons+0x308>)
 800d5ce:	58e3      	ldr	r3, [r4, r3]
 800d5d0:	4aaa      	ldr	r2, [pc, #680]	; (800d87c <CheckAttachedButtons+0x30c>)
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	d842      	bhi.n	800d65c <CheckAttachedButtons+0xec>
					++pressCounter[i];			// Advance the debounce counter
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	4aa7      	ldr	r2, [pc, #668]	; (800d878 <CheckAttachedButtons+0x308>)
 800d5da:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 800d5dc:	23fd      	movs	r3, #253	; 0xfd
 800d5de:	465a      	mov	r2, fp
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d100      	bne.n	800d5e8 <CheckAttachedButtons+0x78>
 800d5e6:	e1b7      	b.n	800d958 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800d5e8:	4ba3      	ldr	r3, [pc, #652]	; (800d878 <CheckAttachedButtons+0x308>)
 800d5ea:	58e3      	ldr	r3, [r4, r3]
 800d5ec:	4aa4      	ldr	r2, [pc, #656]	; (800d880 <CheckAttachedButtons+0x310>)
 800d5ee:	8812      	ldrh	r2, [r2, #0]
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d36f      	bcc.n	800d6d4 <CheckAttachedButtons+0x164>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800d5f4:	d045      	beq.n	800d682 <CheckAttachedButtons+0x112>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800d5f6:	4ba3      	ldr	r3, [pc, #652]	; (800d884 <CheckAttachedButtons+0x314>)
 800d5f8:	58e3      	ldr	r3, [r4, r3]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d202      	bcs.n	800d604 <CheckAttachedButtons+0x94>
					releaseCounter[i] = 0;
 800d5fe:	4ba1      	ldr	r3, [pc, #644]	; (800d884 <CheckAttachedButtons+0x314>)
 800d600:	2200      	movs	r2, #0
 800d602:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800d604:	4b9c      	ldr	r3, [pc, #624]	; (800d878 <CheckAttachedButtons+0x308>)
 800d606:	58e3      	ldr	r3, [r4, r3]
 800d608:	4a9d      	ldr	r2, [pc, #628]	; (800d880 <CheckAttachedButtons+0x310>)
 800d60a:	8852      	ldrh	r2, [r2, #2]
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d952      	bls.n	800d6b6 <CheckAttachedButtons+0x146>
						&& pressCounter[i] < 500) {
 800d610:	22f4      	movs	r2, #244	; 0xf4
 800d612:	32ff      	adds	r2, #255	; 0xff
 800d614:	4293      	cmp	r3, r2
 800d616:	d84e      	bhi.n	800d6b6 <CheckAttachedButtons+0x146>
					if (clicked == 0)
 800d618:	4b9b      	ldr	r3, [pc, #620]	; (800d888 <CheckAttachedButtons+0x318>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d137      	bne.n	800d690 <CheckAttachedButtons+0x120>
						clicked = 1;		// Record a possible single click
 800d620:	4b99      	ldr	r3, [pc, #612]	; (800d888 <CheckAttachedButtons+0x318>)
 800d622:	3af3      	subs	r2, #243	; 0xf3
 800d624:	3aff      	subs	r2, #255	; 0xff
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	e054      	b.n	800d6d4 <CheckAttachedButtons+0x164>
				if (connected == GPIO_PIN_SET)
 800d62a:	464b      	mov	r3, r9
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d00f      	beq.n	800d650 <CheckAttachedButtons+0xe0>
				else if (connected == GPIO_PIN_RESET)
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1c6      	bne.n	800d5c2 <CheckAttachedButtons+0x52>
					state = OPEN;
 800d634:	2303      	movs	r3, #3
 800d636:	469b      	mov	fp, r3
 800d638:	e18e      	b.n	800d958 <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 800d63a:	464b      	mov	r3, r9
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d00a      	beq.n	800d656 <CheckAttachedButtons+0xe6>
				else if (connected == GPIO_PIN_RESET)
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1be      	bne.n	800d5c2 <CheckAttachedButtons+0x52>
					state = OFF;
 800d644:	2301      	movs	r3, #1
 800d646:	469b      	mov	fp, r3
 800d648:	e186      	b.n	800d958 <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 800d64a:	2304      	movs	r3, #4
 800d64c:	469b      	mov	fp, r3
 800d64e:	e7bd      	b.n	800d5cc <CheckAttachedButtons+0x5c>
					state = CLOSED;
 800d650:	2304      	movs	r3, #4
 800d652:	469b      	mov	fp, r3
 800d654:	e7ba      	b.n	800d5cc <CheckAttachedButtons+0x5c>
 800d656:	2302      	movs	r3, #2
 800d658:	469b      	mov	fp, r3
 800d65a:	e7b7      	b.n	800d5cc <CheckAttachedButtons+0x5c>
					pressCounter[i] = 0;			// Reset debounce counter
 800d65c:	4b86      	ldr	r3, [pc, #536]	; (800d878 <CheckAttachedButtons+0x308>)
 800d65e:	2200      	movs	r2, #0
 800d660:	50e2      	str	r2, [r4, r3]
 800d662:	e7bb      	b.n	800d5dc <CheckAttachedButtons+0x6c>
					releaseCounter[i] = 0;		// Reset debounce counter
 800d664:	4b87      	ldr	r3, [pc, #540]	; (800d884 <CheckAttachedButtons+0x314>)
 800d666:	2200      	movs	r2, #0
 800d668:	50e2      	str	r2, [r4, r3]
 800d66a:	e17e      	b.n	800d96a <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800d66c:	4b87      	ldr	r3, [pc, #540]	; (800d88c <CheckAttachedButtons+0x31c>)
 800d66e:	5cf3      	ldrb	r3, [r6, r3]
 800d670:	4a83      	ldr	r2, [pc, #524]	; (800d880 <CheckAttachedButtons+0x310>)
 800d672:	7952      	ldrb	r2, [r2, #5]
 800d674:	429a      	cmp	r2, r3
 800d676:	d200      	bcs.n	800d67a <CheckAttachedButtons+0x10a>
 800d678:	e183      	b.n	800d982 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 800d67a:	3301      	adds	r3, #1
 800d67c:	4a83      	ldr	r2, [pc, #524]	; (800d88c <CheckAttachedButtons+0x31c>)
 800d67e:	54b3      	strb	r3, [r6, r2]
 800d680:	e7b2      	b.n	800d5e8 <CheckAttachedButtons+0x78>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800d682:	2107      	movs	r1, #7
 800d684:	4640      	mov	r0, r8
 800d686:	7241      	strb	r1, [r0, #9]
					++pressCounter[i];
 800d688:	3301      	adds	r3, #1
 800d68a:	497b      	ldr	r1, [pc, #492]	; (800d878 <CheckAttachedButtons+0x308>)
 800d68c:	5063      	str	r3, [r4, r1]
 800d68e:	e7b2      	b.n	800d5f6 <CheckAttachedButtons+0x86>
					else if (clicked == 2) {
 800d690:	2b02      	cmp	r3, #2
 800d692:	d11f      	bne.n	800d6d4 <CheckAttachedButtons+0x164>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800d694:	4b7d      	ldr	r3, [pc, #500]	; (800d88c <CheckAttachedButtons+0x31c>)
 800d696:	5cf3      	ldrb	r3, [r6, r3]
 800d698:	4a79      	ldr	r2, [pc, #484]	; (800d880 <CheckAttachedButtons+0x310>)
 800d69a:	7912      	ldrb	r2, [r2, #4]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d219      	bcs.n	800d6d4 <CheckAttachedButtons+0x164>
										< BOS.buttons.maxInterClickTime) {
 800d6a0:	4a77      	ldr	r2, [pc, #476]	; (800d880 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 800d6a2:	7952      	ldrb	r2, [r2, #5]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d915      	bls.n	800d6d4 <CheckAttachedButtons+0x164>
							clicked = 3;	// Record a possible double click
 800d6a8:	4b77      	ldr	r3, [pc, #476]	; (800d888 <CheckAttachedButtons+0x318>)
 800d6aa:	2203      	movs	r2, #3
 800d6ac:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800d6ae:	4b77      	ldr	r3, [pc, #476]	; (800d88c <CheckAttachedButtons+0x31c>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	54f2      	strb	r2, [r6, r3]
 800d6b4:	e00e      	b.n	800d6d4 <CheckAttachedButtons+0x164>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800d6b6:	3bf5      	subs	r3, #245	; 0xf5
 800d6b8:	3bff      	subs	r3, #255	; 0xff
 800d6ba:	4a75      	ldr	r2, [pc, #468]	; (800d890 <CheckAttachedButtons+0x320>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d809      	bhi.n	800d6d4 <CheckAttachedButtons+0x164>
					if (clicked)
 800d6c0:	4b71      	ldr	r3, [pc, #452]	; (800d888 <CheckAttachedButtons+0x318>)
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d002      	beq.n	800d6ce <CheckAttachedButtons+0x15e>
						clicked = 0;						// Cannot be a click
 800d6c8:	4b6f      	ldr	r3, [pc, #444]	; (800d888 <CheckAttachedButtons+0x318>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800d6ce:	9803      	ldr	r0, [sp, #12]
 800d6d0:	f7ff f9a4 	bl	800ca1c <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800d6d4:	4b6b      	ldr	r3, [pc, #428]	; (800d884 <CheckAttachedButtons+0x314>)
 800d6d6:	58e3      	ldr	r3, [r4, r3]
 800d6d8:	4a69      	ldr	r2, [pc, #420]	; (800d880 <CheckAttachedButtons+0x310>)
 800d6da:	8812      	ldrh	r2, [r2, #0]
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d34d      	bcc.n	800d77c <CheckAttachedButtons+0x20c>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800d6e0:	d02b      	beq.n	800d73a <CheckAttachedButtons+0x1ca>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800d6e2:	4b65      	ldr	r3, [pc, #404]	; (800d878 <CheckAttachedButtons+0x308>)
 800d6e4:	58e3      	ldr	r3, [r4, r3]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d202      	bcs.n	800d6f0 <CheckAttachedButtons+0x180>
					pressCounter[i] = 0;
 800d6ea:	4b63      	ldr	r3, [pc, #396]	; (800d878 <CheckAttachedButtons+0x308>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800d6f0:	4b64      	ldr	r3, [pc, #400]	; (800d884 <CheckAttachedButtons+0x314>)
 800d6f2:	58e3      	ldr	r3, [r4, r3]
 800d6f4:	4a62      	ldr	r2, [pc, #392]	; (800d880 <CheckAttachedButtons+0x310>)
 800d6f6:	8852      	ldrh	r2, [r2, #2]
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d93a      	bls.n	800d772 <CheckAttachedButtons+0x202>
						&& releaseCounter[i] < 500) {
 800d6fc:	22f4      	movs	r2, #244	; 0xf4
 800d6fe:	32ff      	adds	r2, #255	; 0xff
 800d700:	4293      	cmp	r3, r2
 800d702:	d836      	bhi.n	800d772 <CheckAttachedButtons+0x202>
					if (clicked == 1) {
 800d704:	4b60      	ldr	r3, [pc, #384]	; (800d888 <CheckAttachedButtons+0x318>)
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d01d      	beq.n	800d748 <CheckAttachedButtons+0x1d8>
					} else if (clicked == 3) {
 800d70c:	2b03      	cmp	r3, #3
 800d70e:	d135      	bne.n	800d77c <CheckAttachedButtons+0x20c>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800d710:	3303      	adds	r3, #3
 800d712:	4642      	mov	r2, r8
 800d714:	7253      	strb	r3, [r2, #9]
						clicked = 0;			// Prepare for a single click
 800d716:	4b5c      	ldr	r3, [pc, #368]	; (800d888 <CheckAttachedButtons+0x318>)
 800d718:	2200      	movs	r2, #0
 800d71a:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800d71c:	4b5d      	ldr	r3, [pc, #372]	; (800d894 <CheckAttachedButtons+0x324>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d13f      	bne.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800d724:	4643      	mov	r3, r8
 800d726:	7c5b      	ldrb	r3, [r3, #17]
 800d728:	079b      	lsls	r3, r3, #30
 800d72a:	d53b      	bpl.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d72c:	4b59      	ldr	r3, [pc, #356]	; (800d894 <CheckAttachedButtons+0x324>)
 800d72e:	2201      	movs	r2, #1
 800d730:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800d732:	9803      	ldr	r0, [sp, #12]
 800d734:	f7ff ff18 	bl	800d568 <buttonDblClickedCallback>
 800d738:	e034      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800d73a:	2108      	movs	r1, #8
 800d73c:	4640      	mov	r0, r8
 800d73e:	7241      	strb	r1, [r0, #9]
					++releaseCounter[i];
 800d740:	3301      	adds	r3, #1
 800d742:	4950      	ldr	r1, [pc, #320]	; (800d884 <CheckAttachedButtons+0x314>)
 800d744:	5063      	str	r3, [r4, r1]
 800d746:	e7cc      	b.n	800d6e2 <CheckAttachedButtons+0x172>
						button[i].state = CLICKED;// Record a single button click event
 800d748:	3304      	adds	r3, #4
 800d74a:	4642      	mov	r2, r8
 800d74c:	7253      	strb	r3, [r2, #9]
						clicked = 2;			// Prepare for a double click
 800d74e:	4b4e      	ldr	r3, [pc, #312]	; (800d888 <CheckAttachedButtons+0x318>)
 800d750:	2202      	movs	r2, #2
 800d752:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800d754:	4b4f      	ldr	r3, [pc, #316]	; (800d894 <CheckAttachedButtons+0x324>)
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d123      	bne.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800d75c:	4643      	mov	r3, r8
 800d75e:	7c5b      	ldrb	r3, [r3, #17]
 800d760:	07db      	lsls	r3, r3, #31
 800d762:	d51f      	bpl.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d764:	4b4b      	ldr	r3, [pc, #300]	; (800d894 <CheckAttachedButtons+0x324>)
 800d766:	2201      	movs	r2, #1
 800d768:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 800d76a:	9803      	ldr	r0, [sp, #12]
 800d76c:	f7ff fefb 	bl	800d566 <buttonClickedCallback>
 800d770:	e018      	b.n	800d7a4 <CheckAttachedButtons+0x234>
						&& releaseCounter[i] < 0xFFFF) {
 800d772:	3bf5      	subs	r3, #245	; 0xf5
 800d774:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800d776:	4a46      	ldr	r2, [pc, #280]	; (800d890 <CheckAttachedButtons+0x320>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d909      	bls.n	800d790 <CheckAttachedButtons+0x220>
			switch (button[i].state) {
 800d77c:	4643      	mov	r3, r8
 800d77e:	7a5b      	ldrb	r3, [r3, #9]
 800d780:	3b05      	subs	r3, #5
 800d782:	b2da      	uxtb	r2, r3
 800d784:	2a09      	cmp	r2, #9
 800d786:	d80d      	bhi.n	800d7a4 <CheckAttachedButtons+0x234>
 800d788:	0093      	lsls	r3, r2, #2
 800d78a:	4a43      	ldr	r2, [pc, #268]	; (800d898 <CheckAttachedButtons+0x328>)
 800d78c:	58d3      	ldr	r3, [r2, r3]
 800d78e:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800d790:	9803      	ldr	r0, [sp, #12]
 800d792:	f7ff f981 	bl	800ca98 <CheckForTimedButtonRelease>
 800d796:	e7f1      	b.n	800d77c <CheckAttachedButtons+0x20c>
				buttonPressedCallback(i);
 800d798:	9803      	ldr	r0, [sp, #12]
 800d79a:	f7ff f93d 	bl	800ca18 <buttonPressedCallback>
				button[i].state = NONE;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	7253      	strb	r3, [r2, #9]
 800d7a4:	3601      	adds	r6, #1
 800d7a6:	3509      	adds	r5, #9
 800d7a8:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800d7aa:	2c10      	cmp	r4, #16
 800d7ac:	d100      	bne.n	800d7b0 <CheckAttachedButtons+0x240>
 800d7ae:	e0ee      	b.n	800d98e <CheckAttachedButtons+0x41e>
 800d7b0:	b2f3      	uxtb	r3, r6
 800d7b2:	9303      	str	r3, [sp, #12]
 800d7b4:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 800d7b6:	7aab      	ldrb	r3, [r5, #10]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d0f3      	beq.n	800d7a4 <CheckAttachedButtons+0x234>
			if (delayButtonStateReset == false)
 800d7bc:	4b35      	ldr	r3, [pc, #212]	; (800d894 <CheckAttachedButtons+0x324>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d100      	bne.n	800d7c6 <CheckAttachedButtons+0x256>
				button[i].state = NONE;
 800d7c4:	726b      	strb	r3, [r5, #9]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800d7c6:	230e      	movs	r3, #14
 800d7c8:	aa02      	add	r2, sp, #8
 800d7ca:	4694      	mov	ip, r2
 800d7cc:	4463      	add	r3, ip
 800d7ce:	469a      	mov	sl, r3
 800d7d0:	af05      	add	r7, sp, #20
 800d7d2:	9700      	str	r7, [sp, #0]
 800d7d4:	ab06      	add	r3, sp, #24
 800d7d6:	4652      	mov	r2, sl
 800d7d8:	a907      	add	r1, sp, #28
 800d7da:	9803      	ldr	r0, [sp, #12]
 800d7dc:	f7ff f866 	bl	800c8ac <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d7e0:	4653      	mov	r3, sl
 800d7e2:	8819      	ldrh	r1, [r3, #0]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	9807      	ldr	r0, [sp, #28]
 800d7e8:	f004 fa3a 	bl	8011c60 <HAL_GPIO_WritePin>
			Delay_us(10);
 800d7ec:	200a      	movs	r0, #10
 800d7ee:	f000 fb89 	bl	800df04 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800d7f2:	8839      	ldrh	r1, [r7, #0]
 800d7f4:	9806      	ldr	r0, [sp, #24]
 800d7f6:	f004 fa2d 	bl	8011c54 <HAL_GPIO_ReadPin>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d100      	bne.n	800d800 <CheckAttachedButtons+0x290>
 800d7fe:	e6c5      	b.n	800d58c <CheckAttachedButtons+0x1c>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d800:	230e      	movs	r3, #14
 800d802:	aa02      	add	r2, sp, #8
 800d804:	4694      	mov	ip, r2
 800d806:	4463      	add	r3, ip
 800d808:	8819      	ldrh	r1, [r3, #0]
 800d80a:	2200      	movs	r2, #0
 800d80c:	9807      	ldr	r0, [sp, #28]
 800d80e:	f004 fa27 	bl	8011c60 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800d812:	4643      	mov	r3, r8
 800d814:	7a9b      	ldrb	r3, [r3, #10]
 800d816:	2b02      	cmp	r3, #2
 800d818:	d100      	bne.n	800d81c <CheckAttachedButtons+0x2ac>
 800d81a:	e706      	b.n	800d62a <CheckAttachedButtons+0xba>
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	2a02      	cmp	r2, #2
 800d820:	d800      	bhi.n	800d824 <CheckAttachedButtons+0x2b4>
 800d822:	e6c6      	b.n	800d5b2 <CheckAttachedButtons+0x42>
 800d824:	2b03      	cmp	r3, #3
 800d826:	d100      	bne.n	800d82a <CheckAttachedButtons+0x2ba>
 800d828:	e707      	b.n	800d63a <CheckAttachedButtons+0xca>
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	d000      	beq.n	800d830 <CheckAttachedButtons+0x2c0>
 800d82e:	e6c8      	b.n	800d5c2 <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800d830:	464b      	mov	r3, r9
 800d832:	2b01      	cmp	r3, #1
 800d834:	d100      	bne.n	800d838 <CheckAttachedButtons+0x2c8>
 800d836:	e08e      	b.n	800d956 <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d000      	beq.n	800d83e <CheckAttachedButtons+0x2ce>
 800d83c:	e6c1      	b.n	800d5c2 <CheckAttachedButtons+0x52>
 800d83e:	2302      	movs	r3, #2
 800d840:	469b      	mov	fp, r3
 800d842:	e6c3      	b.n	800d5cc <CheckAttachedButtons+0x5c>
				buttonReleasedCallback(i);
 800d844:	9803      	ldr	r0, [sp, #12]
 800d846:	f7ff fe8d 	bl	800d564 <buttonReleasedCallback>
				button[i].state = NONE;
 800d84a:	2300      	movs	r3, #0
 800d84c:	4642      	mov	r2, r8
 800d84e:	7253      	strb	r3, [r2, #9]
				break;
 800d850:	e7a8      	b.n	800d7a4 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800d852:	4b10      	ldr	r3, [pc, #64]	; (800d894 <CheckAttachedButtons+0x324>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d1a4      	bne.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800d85a:	4643      	mov	r3, r8
 800d85c:	7c5b      	ldrb	r3, [r3, #17]
 800d85e:	075b      	lsls	r3, r3, #29
 800d860:	d5a0      	bpl.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d862:	4b0c      	ldr	r3, [pc, #48]	; (800d894 <CheckAttachedButtons+0x324>)
 800d864:	2201      	movs	r2, #1
 800d866:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d868:	2101      	movs	r1, #1
 800d86a:	9803      	ldr	r0, [sp, #12]
 800d86c:	f7ff fe7d 	bl	800d56a <buttonPressedForXCallback>
 800d870:	e798      	b.n	800d7a4 <CheckAttachedButtons+0x234>
 800d872:	46c0      	nop			; (mov r8, r8)
 800d874:	20001350 	.word	0x20001350
 800d878:	20001388 	.word	0x20001388
 800d87c:	0000fffe 	.word	0x0000fffe
 800d880:	20006270 	.word	0x20006270
 800d884:	20001398 	.word	0x20001398
 800d888:	20001374 	.word	0x20001374
 800d88c:	2000137c 	.word	0x2000137c
 800d890:	0000fe0a 	.word	0x0000fe0a
 800d894:	20001380 	.word	0x20001380
 800d898:	0801a078 	.word	0x0801a078
				if (!delayButtonStateReset
 800d89c:	4b3f      	ldr	r3, [pc, #252]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d000      	beq.n	800d8a6 <CheckAttachedButtons+0x336>
 800d8a4:	e77e      	b.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800d8a6:	4643      	mov	r3, r8
 800d8a8:	7c5b      	ldrb	r3, [r3, #17]
 800d8aa:	071b      	lsls	r3, r3, #28
 800d8ac:	d400      	bmi.n	800d8b0 <CheckAttachedButtons+0x340>
 800d8ae:	e779      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d8b0:	4b3a      	ldr	r3, [pc, #232]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800d8b6:	2102      	movs	r1, #2
 800d8b8:	9803      	ldr	r0, [sp, #12]
 800d8ba:	f7ff fe56 	bl	800d56a <buttonPressedForXCallback>
 800d8be:	e771      	b.n	800d7a4 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800d8c0:	4b36      	ldr	r3, [pc, #216]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d000      	beq.n	800d8ca <CheckAttachedButtons+0x35a>
 800d8c8:	e76c      	b.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800d8ca:	4643      	mov	r3, r8
 800d8cc:	7c5b      	ldrb	r3, [r3, #17]
 800d8ce:	06db      	lsls	r3, r3, #27
 800d8d0:	d400      	bmi.n	800d8d4 <CheckAttachedButtons+0x364>
 800d8d2:	e767      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d8d4:	4b31      	ldr	r3, [pc, #196]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800d8da:	2103      	movs	r1, #3
 800d8dc:	9803      	ldr	r0, [sp, #12]
 800d8de:	f7ff fe44 	bl	800d56a <buttonPressedForXCallback>
 800d8e2:	e75f      	b.n	800d7a4 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800d8e4:	4b2d      	ldr	r3, [pc, #180]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d000      	beq.n	800d8ee <CheckAttachedButtons+0x37e>
 800d8ec:	e75a      	b.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800d8ee:	4643      	mov	r3, r8
 800d8f0:	7c5b      	ldrb	r3, [r3, #17]
 800d8f2:	069b      	lsls	r3, r3, #26
 800d8f4:	d400      	bmi.n	800d8f8 <CheckAttachedButtons+0x388>
 800d8f6:	e755      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d8f8:	4b28      	ldr	r3, [pc, #160]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d8fe:	2101      	movs	r1, #1
 800d900:	9803      	ldr	r0, [sp, #12]
 800d902:	f7ff fe33 	bl	800d56c <buttonReleasedForYCallback>
 800d906:	e74d      	b.n	800d7a4 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800d908:	4b24      	ldr	r3, [pc, #144]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d000      	beq.n	800d912 <CheckAttachedButtons+0x3a2>
 800d910:	e748      	b.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800d912:	4643      	mov	r3, r8
 800d914:	7c5b      	ldrb	r3, [r3, #17]
 800d916:	065b      	lsls	r3, r3, #25
 800d918:	d400      	bmi.n	800d91c <CheckAttachedButtons+0x3ac>
 800d91a:	e743      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d91c:	4b1f      	ldr	r3, [pc, #124]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d91e:	2201      	movs	r2, #1
 800d920:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800d922:	2102      	movs	r1, #2
 800d924:	9803      	ldr	r0, [sp, #12]
 800d926:	f7ff fe21 	bl	800d56c <buttonReleasedForYCallback>
 800d92a:	e73b      	b.n	800d7a4 <CheckAttachedButtons+0x234>
				if (!delayButtonStateReset
 800d92c:	4b1b      	ldr	r3, [pc, #108]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d000      	beq.n	800d936 <CheckAttachedButtons+0x3c6>
 800d934:	e736      	b.n	800d7a4 <CheckAttachedButtons+0x234>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800d936:	4643      	mov	r3, r8
 800d938:	7c5b      	ldrb	r3, [r3, #17]
 800d93a:	2b7f      	cmp	r3, #127	; 0x7f
 800d93c:	d800      	bhi.n	800d940 <CheckAttachedButtons+0x3d0>
 800d93e:	e731      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					delayButtonStateReset = true;
 800d940:	4b16      	ldr	r3, [pc, #88]	; (800d99c <CheckAttachedButtons+0x42c>)
 800d942:	2201      	movs	r2, #1
 800d944:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800d946:	2103      	movs	r1, #3
 800d948:	9803      	ldr	r0, [sp, #12]
 800d94a:	f7ff fe0f 	bl	800d56c <buttonReleasedForYCallback>
 800d94e:	e729      	b.n	800d7a4 <CheckAttachedButtons+0x234>
					state = OPEN;
 800d950:	2303      	movs	r3, #3
 800d952:	469b      	mov	fp, r3
 800d954:	e000      	b.n	800d958 <CheckAttachedButtons+0x3e8>
					state = OFF;
 800d956:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 800d958:	4b11      	ldr	r3, [pc, #68]	; (800d9a0 <CheckAttachedButtons+0x430>)
 800d95a:	58e3      	ldr	r3, [r4, r3]
 800d95c:	4a11      	ldr	r2, [pc, #68]	; (800d9a4 <CheckAttachedButtons+0x434>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d900      	bls.n	800d964 <CheckAttachedButtons+0x3f4>
 800d962:	e67f      	b.n	800d664 <CheckAttachedButtons+0xf4>
					++releaseCounter[i];		// Advance the debounce counter
 800d964:	3301      	adds	r3, #1
 800d966:	4a0e      	ldr	r2, [pc, #56]	; (800d9a0 <CheckAttachedButtons+0x430>)
 800d968:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 800d96a:	4b0f      	ldr	r3, [pc, #60]	; (800d9a8 <CheckAttachedButtons+0x438>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d100      	bne.n	800d974 <CheckAttachedButtons+0x404>
 800d972:	e67b      	b.n	800d66c <CheckAttachedButtons+0xfc>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800d974:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <CheckAttachedButtons+0x43c>)
 800d976:	5cf2      	ldrb	r2, [r6, r3]
 800d978:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <CheckAttachedButtons+0x440>)
 800d97a:	795b      	ldrb	r3, [r3, #5]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d800      	bhi.n	800d982 <CheckAttachedButtons+0x412>
 800d980:	e632      	b.n	800d5e8 <CheckAttachedButtons+0x78>
					clicked = 0;
 800d982:	2300      	movs	r3, #0
 800d984:	4a08      	ldr	r2, [pc, #32]	; (800d9a8 <CheckAttachedButtons+0x438>)
 800d986:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800d988:	4a08      	ldr	r2, [pc, #32]	; (800d9ac <CheckAttachedButtons+0x43c>)
 800d98a:	54b3      	strb	r3, [r6, r2]
 800d98c:	e62c      	b.n	800d5e8 <CheckAttachedButtons+0x78>
}
 800d98e:	b009      	add	sp, #36	; 0x24
 800d990:	bc3c      	pop	{r2, r3, r4, r5}
 800d992:	4690      	mov	r8, r2
 800d994:	4699      	mov	r9, r3
 800d996:	46a2      	mov	sl, r4
 800d998:	46ab      	mov	fp, r5
 800d99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99c:	20001380 	.word	0x20001380
 800d9a0:	20001398 	.word	0x20001398
 800d9a4:	0000fffe 	.word	0x0000fffe
 800d9a8:	20001374 	.word	0x20001374
 800d9ac:	2000137c 	.word	0x2000137c
 800d9b0:	20006270 	.word	0x20006270

0800d9b4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d9b4:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d9b6:	f002 fce5 	bl	8010384 <HAL_IncTick>
  osSystickHandler();  
 800d9ba:	f000 fe13 	bl	800e5e4 <osSystickHandler>

}
 800d9be:	bd10      	pop	{r4, pc}

0800d9c0 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d9c0:	e7fe      	b.n	800d9c0 <HardFault_Handler>
	...

0800d9c4 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d9c4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d9c6:	4802      	ldr	r0, [pc, #8]	; (800d9d0 <USART1_IRQHandler+0xc>)
 800d9c8:	f005 fe57 	bl	801367a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9cc:	bd10      	pop	{r4, pc}
 800d9ce:	46c0      	nop			; (mov r8, r8)
 800d9d0:	2000640c 	.word	0x2000640c

0800d9d4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d9d4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d9d6:	4802      	ldr	r0, [pc, #8]	; (800d9e0 <USART2_IRQHandler+0xc>)
 800d9d8:	f005 fe4f 	bl	801367a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9dc:	bd10      	pop	{r4, pc}
 800d9de:	46c0      	nop			; (mov r8, r8)
 800d9e0:	2000657c 	.word	0x2000657c

0800d9e4 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d9e4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d9e6:	4805      	ldr	r0, [pc, #20]	; (800d9fc <USART3_8_IRQHandler+0x18>)
 800d9e8:	f005 fe47 	bl	801367a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d9ec:	4804      	ldr	r0, [pc, #16]	; (800da00 <USART3_8_IRQHandler+0x1c>)
 800d9ee:	f005 fe44 	bl	801367a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d9f2:	4804      	ldr	r0, [pc, #16]	; (800da04 <USART3_8_IRQHandler+0x20>)
 800d9f4:	f005 fe41 	bl	801367a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d9f8:	bd10      	pop	{r4, pc}
 800d9fa:	46c0      	nop			; (mov r8, r8)
 800d9fc:	2000635c 	.word	0x2000635c
 800da00:	20006508 	.word	0x20006508
 800da04:	20006490 	.word	0x20006490

0800da08 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800da08:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800da0a:	2001      	movs	r0, #1
 800da0c:	f7f9 fcde 	bl	80073cc <DMA_IRQHandler>
	
}
 800da10:	bd10      	pop	{r4, pc}
	...

0800da14 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800da14:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800da16:	4b0c      	ldr	r3, [pc, #48]	; (800da48 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	06db      	lsls	r3, r3, #27
 800da1c:	d408      	bmi.n	800da30 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800da1e:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	05db      	lsls	r3, r3, #23
 800da24:	d408      	bmi.n	800da38 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800da26:	4b09      	ldr	r3, [pc, #36]	; (800da4c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	06db      	lsls	r3, r3, #27
 800da2c:	d408      	bmi.n	800da40 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800da2e:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800da30:	2005      	movs	r0, #5
 800da32:	f7f9 fccb 	bl	80073cc <DMA_IRQHandler>
 800da36:	e7fa      	b.n	800da2e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800da38:	2002      	movs	r0, #2
 800da3a:	f7f9 fcc7 	bl	80073cc <DMA_IRQHandler>
 800da3e:	e7f6      	b.n	800da2e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800da40:	4803      	ldr	r0, [pc, #12]	; (800da50 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800da42:	f003 f9f5 	bl	8010e30 <HAL_DMA_IRQHandler>
}
 800da46:	e7f2      	b.n	800da2e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800da48:	40020400 	.word	0x40020400
 800da4c:	40020000 	.word	0x40020000
 800da50:	20001144 	.word	0x20001144

0800da54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800da54:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800da56:	4b14      	ldr	r3, [pc, #80]	; (800daa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	03db      	lsls	r3, r3, #15
 800da5c:	d413      	bmi.n	800da86 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800da5e:	4b12      	ldr	r3, [pc, #72]	; (800daa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	02db      	lsls	r3, r3, #11
 800da64:	d413      	bmi.n	800da8e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	05db      	lsls	r3, r3, #23
 800da6c:	d413      	bmi.n	800da96 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800da6e:	4b0e      	ldr	r3, [pc, #56]	; (800daa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	04db      	lsls	r3, r3, #19
 800da74:	d413      	bmi.n	800da9e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800da76:	4b0c      	ldr	r3, [pc, #48]	; (800daa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	01db      	lsls	r3, r3, #7
 800da7c:	d506      	bpl.n	800da8c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800da7e:	480c      	ldr	r0, [pc, #48]	; (800dab0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800da80:	f003 f9d6 	bl	8010e30 <HAL_DMA_IRQHandler>
	}
}
 800da84:	e002      	b.n	800da8c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800da86:	2003      	movs	r0, #3
 800da88:	f7f9 fca0 	bl	80073cc <DMA_IRQHandler>
}
 800da8c:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800da8e:	2004      	movs	r0, #4
 800da90:	f7f9 fc9c 	bl	80073cc <DMA_IRQHandler>
 800da94:	e7fa      	b.n	800da8c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800da96:	2006      	movs	r0, #6
 800da98:	f7f9 fc98 	bl	80073cc <DMA_IRQHandler>
 800da9c:	e7f6      	b.n	800da8c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800da9e:	4805      	ldr	r0, [pc, #20]	; (800dab4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800daa0:	f003 f9c6 	bl	8010e30 <HAL_DMA_IRQHandler>
 800daa4:	e7f2      	b.n	800da8c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800daa6:	46c0      	nop			; (mov r8, r8)
 800daa8:	40020000 	.word	0x40020000
 800daac:	40020400 	.word	0x40020400
 800dab0:	200011b4 	.word	0x200011b4
 800dab4:	2000117c 	.word	0x2000117c

0800dab8 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dab8:	b510      	push	{r4, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800dac2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d001      	beq.n	800dacc <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800dac8:	f7fd fbbc 	bl	800b244 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800dacc:	0020      	movs	r0, r4
 800dace:	f7fc fcff 	bl	800a4d0 <GetPort>
 800dad2:	0080      	lsls	r0, r0, #2
 800dad4:	4b03      	ldr	r3, [pc, #12]	; (800dae4 <HAL_UART_TxCpltCallback+0x2c>)
 800dad6:	58c0      	ldr	r0, [r0, r3]
 800dad8:	a901      	add	r1, sp, #4
 800dada:	f001 f8c1 	bl	800ec60 <xQueueGiveFromISR>
}
 800dade:	b002      	add	sp, #8
 800dae0:	bd10      	pop	{r4, pc}
 800dae2:	46c0      	nop			; (mov r8, r8)
 800dae4:	200062f4 	.word	0x200062f4

0800dae8 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dae8:	b510      	push	{r4, lr}
 800daea:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800daec:	2369      	movs	r3, #105	; 0x69
 800daee:	2201      	movs	r2, #1
 800daf0:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800daf2:	f7fc fced 	bl	800a4d0 <GetPort>
	if (portStatus[port] == STREAM) {
 800daf6:	4b0c      	ldr	r3, [pc, #48]	; (800db28 <HAL_UART_ErrorCallback+0x40>)
 800daf8:	5c1b      	ldrb	r3, [r3, r0]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d005      	beq.n	800db0a <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800dafe:	4b0b      	ldr	r3, [pc, #44]	; (800db2c <HAL_UART_ErrorCallback+0x44>)
 800db00:	1818      	adds	r0, r3, r0
 800db02:	3801      	subs	r0, #1
 800db04:	2301      	movs	r3, #1
 800db06:	7003      	strb	r3, [r0, #0]
	}	
}
 800db08:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800db0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	b292      	uxth	r2, r2
 800db12:	3801      	subs	r0, #1
 800db14:	0080      	lsls	r0, r0, #2
 800db16:	4b06      	ldr	r3, [pc, #24]	; (800db30 <HAL_UART_ErrorCallback+0x48>)
 800db18:	58c3      	ldr	r3, [r0, r3]
 800db1a:	6819      	ldr	r1, [r3, #0]
 800db1c:	3128      	adds	r1, #40	; 0x28
 800db1e:	0020      	movs	r0, r4
 800db20:	f005 f994 	bl	8012e4c <HAL_UART_Receive_DMA>
 800db24:	e7f0      	b.n	800db08 <HAL_UART_ErrorCallback+0x20>
 800db26:	46c0      	nop			; (mov r8, r8)
 800db28:	20000870 	.word	0x20000870
 800db2c:	20000a40 	.word	0x20000a40
 800db30:	20000ccc 	.word	0x20000ccc

0800db34 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db34:	b510      	push	{r4, lr}
 800db36:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800db38:	f7fc fcca 	bl	800a4d0 <GetPort>
 800db3c:	4b13      	ldr	r3, [pc, #76]	; (800db8c <HAL_UART_RxCpltCallback+0x58>)
 800db3e:	5c1b      	ldrb	r3, [r3, r0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d006      	beq.n	800db52 <HAL_UART_RxCpltCallback+0x1e>
 800db44:	0020      	movs	r0, r4
 800db46:	f7fc fcc3 	bl	800a4d0 <GetPort>
 800db4a:	4b10      	ldr	r3, [pc, #64]	; (800db8c <HAL_UART_RxCpltCallback+0x58>)
 800db4c:	5c1b      	ldrb	r3, [r3, r0]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d11a      	bne.n	800db88 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800db52:	0020      	movs	r0, r4
 800db54:	f7fc fcbc 	bl	800a4d0 <GetPort>
 800db58:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <HAL_UART_RxCpltCallback+0x5c>)
 800db5a:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800db5c:	0020      	movs	r0, r4
 800db5e:	f7fc fcb7 	bl	800a4d0 <GetPort>
 800db62:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <HAL_UART_RxCpltCallback+0x58>)
 800db64:	2205      	movs	r2, #5
 800db66:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800db68:	0020      	movs	r0, r4
 800db6a:	f7fc fcb1 	bl	800a4d0 <GetPort>
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <HAL_UART_RxCpltCallback+0x60>)
 800db70:	1818      	adds	r0, r3, r0
 800db72:	3801      	subs	r0, #1
 800db74:	2300      	movs	r3, #0
 800db76:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800db78:	0020      	movs	r0, r4
 800db7a:	f7fc fca9 	bl	800a4d0 <GetPort>
 800db7e:	4b06      	ldr	r3, [pc, #24]	; (800db98 <HAL_UART_RxCpltCallback+0x64>)
 800db80:	1818      	adds	r0, r3, r0
 800db82:	3801      	subs	r0, #1
 800db84:	2301      	movs	r3, #1
 800db86:	7003      	strb	r3, [r0, #0]
	}

}
 800db88:	bd10      	pop	{r4, pc}
 800db8a:	46c0      	nop			; (mov r8, r8)
 800db8c:	20000870 	.word	0x20000870
 800db90:	200061f0 	.word	0x200061f0
 800db94:	20000c84 	.word	0x20000c84
 800db98:	20000a40 	.word	0x20000a40

0800db9c <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800db9c:	b672      	cpsid	i
 800db9e:	e7fe      	b.n	800db9e <vApplicationStackOverflowHook+0x2>

0800dba0 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800dba0:	b672      	cpsid	i
 800dba2:	e7fe      	b.n	800dba2 <vApplicationMallocFailedHook+0x2>

0800dba4 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	46ce      	mov	lr, r9
 800dba8:	b500      	push	{lr}
 800dbaa:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800dbac:	ac05      	add	r4, sp, #20
 800dbae:	4b34      	ldr	r3, [pc, #208]	; (800dc80 <RTC_CalendarConfig+0xdc>)
 800dbb0:	0022      	movs	r2, r4
 800dbb2:	cb43      	ldmia	r3!, {r0, r1, r6}
 800dbb4:	c243      	stmia	r2!, {r0, r1, r6}
 800dbb6:	aa02      	add	r2, sp, #8
 800dbb8:	4b32      	ldr	r3, [pc, #200]	; (800dc84 <RTC_CalendarConfig+0xe0>)
 800dbba:	cb03      	ldmia	r3!, {r0, r1}
 800dbbc:	c203      	stmia	r2!, {r0, r1}
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800dbc2:	2015      	movs	r0, #21
 800dbc4:	ab02      	add	r3, sp, #8
 800dbc6:	469c      	mov	ip, r3
 800dbc8:	4460      	add	r0, ip
 800dbca:	f005 fdde 	bl	801378a <atoi>
 800dbce:	b2c3      	uxtb	r3, r0
 800dbd0:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800dbd2:	2600      	movs	r6, #0
 800dbd4:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800dbd6:	a806      	add	r0, sp, #24
 800dbd8:	f005 fdd7 	bl	801378a <atoi>
 800dbdc:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800dbde:	70e6      	strb	r6, [r4, #3]
 800dbe0:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800dbe2:	4e29      	ldr	r6, [pc, #164]	; (800dc88 <RTC_CalendarConfig+0xe4>)
 800dbe4:	e002      	b.n	800dbec <RTC_CalendarConfig+0x48>
 800dbe6:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800dbe8:	2c0d      	cmp	r4, #13
 800dbea:	d009      	beq.n	800dc00 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800dbec:	00a3      	lsls	r3, r4, #2
 800dbee:	3b04      	subs	r3, #4
 800dbf0:	58f1      	ldr	r1, [r6, r3]
 800dbf2:	a805      	add	r0, sp, #20
 800dbf4:	f7f2 fa86 	bl	8000104 <strcmp>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d1f4      	bne.n	800dbe6 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800dbfc:	b2e5      	uxtb	r5, r4
 800dbfe:	e7f2      	b.n	800dbe6 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800dc00:	ab02      	add	r3, sp, #8
 800dc02:	1d98      	adds	r0, r3, #6
 800dc04:	f005 fdc1 	bl	801378a <atoi>
 800dc08:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800dc0a:	ac05      	add	r4, sp, #20
 800dc0c:	2600      	movs	r6, #0
 800dc0e:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800dc10:	ab02      	add	r3, sp, #8
 800dc12:	1cd8      	adds	r0, r3, #3
 800dc14:	f005 fdb9 	bl	801378a <atoi>
 800dc18:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800dc1a:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800dc1c:	a802      	add	r0, sp, #8
 800dc1e:	f005 fdb4 	bl	801378a <atoi>
 800dc22:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800dc24:	a90d      	add	r1, sp, #52	; 0x34
 800dc26:	464b      	mov	r3, r9
 800dc28:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800dc2a:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800dc2c:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800dc2e:	2301      	movs	r3, #1
 800dc30:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dc32:	2200      	movs	r2, #0
 800dc34:	4815      	ldr	r0, [pc, #84]	; (800dc8c <RTC_CalendarConfig+0xe8>)
 800dc36:	f004 fe55 	bl	80128e4 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800dc3a:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dc3c:	2800      	cmp	r0, #0
 800dc3e:	d119      	bne.n	800dc74 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800dc40:	a908      	add	r1, sp, #32
 800dc42:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800dc44:	9b01      	ldr	r3, [sp, #4]
 800dc46:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800dc48:	9b00      	ldr	r3, [sp, #0]
 800dc4a:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	720b      	strb	r3, [r1, #8]
 800dc50:	4a0f      	ldr	r2, [pc, #60]	; (800dc90 <RTC_CalendarConfig+0xec>)
 800dc52:	3018      	adds	r0, #24
 800dc54:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800dc56:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800dc58:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	480b      	ldr	r0, [pc, #44]	; (800dc8c <RTC_CalendarConfig+0xe8>)
 800dc5e:	f004 fdbb 	bl	80127d8 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800dc62:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d105      	bne.n	800dc74 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dc68:	4a0a      	ldr	r2, [pc, #40]	; (800dc94 <RTC_CalendarConfig+0xf0>)
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	4807      	ldr	r0, [pc, #28]	; (800dc8c <RTC_CalendarConfig+0xe8>)
 800dc6e:	f004 fefd 	bl	8012a6c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800dc72:	2300      	movs	r3, #0
}
 800dc74:	0018      	movs	r0, r3
 800dc76:	b00e      	add	sp, #56	; 0x38
 800dc78:	bc04      	pop	{r2}
 800dc7a:	4691      	mov	r9, r2
 800dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc7e:	46c0      	nop			; (mov r8, r8)
 800dc80:	08017370 	.word	0x08017370
 800dc84:	0801a0a0 	.word	0x0801a0a0
 800dc88:	20000034 	.word	0x20000034
 800dc8c:	200066a0 	.word	0x200066a0
 800dc90:	20006270 	.word	0x20006270
 800dc94:	000032f2 	.word	0x000032f2

0800dc98 <RTC_Init>:
{
 800dc98:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800dc9a:	4a1c      	ldr	r2, [pc, #112]	; (800dd0c <RTC_Init+0x74>)
 800dc9c:	6a11      	ldr	r1, [r2, #32]
 800dc9e:	2380      	movs	r3, #128	; 0x80
 800dca0:	021b      	lsls	r3, r3, #8
 800dca2:	430b      	orrs	r3, r1
 800dca4:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800dca6:	481a      	ldr	r0, [pc, #104]	; (800dd10 <RTC_Init+0x78>)
 800dca8:	4b1a      	ldr	r3, [pc, #104]	; (800dd14 <RTC_Init+0x7c>)
 800dcaa:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800dcac:	2300      	movs	r3, #0
 800dcae:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800dcb0:	227c      	movs	r2, #124	; 0x7c
 800dcb2:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800dcb4:	4a18      	ldr	r2, [pc, #96]	; (800dd18 <RTC_Init+0x80>)
 800dcb6:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800dcb8:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800dcba:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800dcbc:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800dcbe:	f004 fd2d 	bl	801271c <HAL_RTC_Init>
 800dcc2:	23ff      	movs	r3, #255	; 0xff
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d11e      	bne.n	800dd06 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800dcc8:	2101      	movs	r1, #1
 800dcca:	4811      	ldr	r0, [pc, #68]	; (800dd10 <RTC_Init+0x78>)
 800dccc:	f004 fed4 	bl	8012a78 <HAL_RTCEx_BKUPRead>
 800dcd0:	4b12      	ldr	r3, [pc, #72]	; (800dd1c <RTC_Init+0x84>)
 800dcd2:	4298      	cmp	r0, r3
 800dcd4:	d10e      	bne.n	800dcf4 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800dcd6:	4b0d      	ldr	r3, [pc, #52]	; (800dd0c <RTC_Init+0x74>)
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcda:	011b      	lsls	r3, r3, #4
 800dcdc:	d502      	bpl.n	800dce4 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800dcde:	4b10      	ldr	r3, [pc, #64]	; (800dd20 <RTC_Init+0x88>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <RTC_Init+0x74>)
 800dce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce8:	015b      	lsls	r3, r3, #5
 800dcea:	d505      	bpl.n	800dcf8 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800dcec:	4b0c      	ldr	r3, [pc, #48]	; (800dd20 <RTC_Init+0x88>)
 800dcee:	2201      	movs	r2, #1
 800dcf0:	701a      	strb	r2, [r3, #0]
 800dcf2:	e001      	b.n	800dcf8 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800dcf4:	f7ff ff56 	bl	800dba4 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800dcf8:	4a04      	ldr	r2, [pc, #16]	; (800dd0c <RTC_Init+0x74>)
 800dcfa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800dcfc:	2380      	movs	r3, #128	; 0x80
 800dcfe:	045b      	lsls	r3, r3, #17
 800dd00:	430b      	orrs	r3, r1
 800dd02:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	0018      	movs	r0, r3
 800dd08:	bd10      	pop	{r4, pc}
 800dd0a:	46c0      	nop			; (mov r8, r8)
 800dd0c:	40021000 	.word	0x40021000
 800dd10:	200066a0 	.word	0x200066a0
 800dd14:	40002800 	.word	0x40002800
 800dd18:	000007cf 	.word	0x000007cf
 800dd1c:	000032f2 	.word	0x000032f2
 800dd20:	200013b4 	.word	0x200013b4

0800dd24 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd26:	46c6      	mov	lr, r8
 800dd28:	b500      	push	{lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	ac0c      	add	r4, sp, #48	; 0x30
 800dd2e:	7827      	ldrb	r7, [r4, #0]
 800dd30:	ac0d      	add	r4, sp, #52	; 0x34
 800dd32:	7824      	ldrb	r4, [r4, #0]
 800dd34:	46a0      	mov	r8, r4
 800dd36:	ac0e      	add	r4, sp, #56	; 0x38
 800dd38:	7825      	ldrb	r5, [r4, #0]
 800dd3a:	ac0f      	add	r4, sp, #60	; 0x3c
 800dd3c:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800dd3e:	ac05      	add	r4, sp, #20
 800dd40:	3230      	adds	r2, #48	; 0x30
 800dd42:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800dd44:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800dd46:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800dd48:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	0021      	movs	r1, r4
 800dd4e:	481f      	ldr	r0, [pc, #124]	; (800ddcc <BOS_CalendarConfig+0xa8>)
 800dd50:	f004 fdc8 	bl	80128e4 <HAL_RTC_SetDate>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d136      	bne.n	800ddc6 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800dd58:	466b      	mov	r3, sp
 800dd5a:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800dd5c:	4642      	mov	r2, r8
 800dd5e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800dd60:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800dd62:	2300      	movs	r3, #0
 800dd64:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800dd66:	2e01      	cmp	r6, #1
 800dd68:	d020      	beq.n	800ddac <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800dd6a:	2e02      	cmp	r6, #2
 800dd6c:	d024      	beq.n	800ddb8 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800dd6e:	4b18      	ldr	r3, [pc, #96]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800dd70:	2218      	movs	r2, #24
 800dd72:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dd74:	2200      	movs	r2, #0
 800dd76:	4669      	mov	r1, sp
 800dd78:	4814      	ldr	r0, [pc, #80]	; (800ddcc <BOS_CalendarConfig+0xa8>)
 800dd7a:	f004 fd2d 	bl	80127d8 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800dd7e:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d10e      	bne.n	800dda2 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800dd84:	4a12      	ldr	r2, [pc, #72]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800dd86:	7b53      	ldrb	r3, [r2, #13]
 800dd88:	021b      	lsls	r3, r3, #8
 800dd8a:	7911      	ldrb	r1, [r2, #4]
 800dd8c:	4319      	orrs	r1, r3
 800dd8e:	308d      	adds	r0, #141	; 0x8d
 800dd90:	0040      	lsls	r0, r0, #1
 800dd92:	f7fe fa55 	bl	800c240 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800dd96:	4a0f      	ldr	r2, [pc, #60]	; (800ddd4 <BOS_CalendarConfig+0xb0>)
 800dd98:	2101      	movs	r1, #1
 800dd9a:	480c      	ldr	r0, [pc, #48]	; (800ddcc <BOS_CalendarConfig+0xa8>)
 800dd9c:	f004 fe66 	bl	8012a6c <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	0018      	movs	r0, r3
 800dda4:	b006      	add	sp, #24
 800dda6:	bc04      	pop	{r2}
 800dda8:	4690      	mov	r8, r2
 800ddaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800ddac:	466a      	mov	r2, sp
 800ddae:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ddb0:	4b07      	ldr	r3, [pc, #28]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800ddb2:	220c      	movs	r2, #12
 800ddb4:	735a      	strb	r2, [r3, #13]
 800ddb6:	e7dd      	b.n	800dd74 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800ddb8:	2340      	movs	r3, #64	; 0x40
 800ddba:	466a      	mov	r2, sp
 800ddbc:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800ddbe:	4b04      	ldr	r3, [pc, #16]	; (800ddd0 <BOS_CalendarConfig+0xac>)
 800ddc0:	220c      	movs	r2, #12
 800ddc2:	735a      	strb	r2, [r3, #13]
 800ddc4:	e7d6      	b.n	800dd74 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800ddc6:	23ff      	movs	r3, #255	; 0xff
 800ddc8:	e7eb      	b.n	800dda2 <BOS_CalendarConfig+0x7e>
 800ddca:	46c0      	nop			; (mov r8, r8)
 800ddcc:	200066a0 	.word	0x200066a0
 800ddd0:	20006270 	.word	0x20006270
 800ddd4:	000032f2 	.word	0x000032f2

0800ddd8 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800ddd8:	b530      	push	{r4, r5, lr}
 800ddda:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800dddc:	4d16      	ldr	r5, [pc, #88]	; (800de38 <GetTimeDate+0x60>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	a902      	add	r1, sp, #8
 800dde2:	0028      	movs	r0, r5
 800dde4:	f004 fdfa 	bl	80129dc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800dde8:	ac07      	add	r4, sp, #28
 800ddea:	2200      	movs	r2, #0
 800ddec:	0021      	movs	r1, r4
 800ddee:	0028      	movs	r0, r5
 800ddf0:	f004 fe1a 	bl	8012a28 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800ddf4:	4b11      	ldr	r3, [pc, #68]	; (800de3c <GetTimeDate+0x64>)
 800ddf6:	aa02      	add	r2, sp, #8
 800ddf8:	7a12      	ldrb	r2, [r2, #8]
 800ddfa:	09d2      	lsrs	r2, r2, #7
 800ddfc:	3201      	adds	r2, #1
 800ddfe:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800de00:	9a03      	ldr	r2, [sp, #12]
 800de02:	9201      	str	r2, [sp, #4]
 800de04:	0852      	lsrs	r2, r2, #1
 800de06:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800de08:	aa02      	add	r2, sp, #8
 800de0a:	7892      	ldrb	r2, [r2, #2]
 800de0c:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800de0e:	aa02      	add	r2, sp, #8
 800de10:	7852      	ldrb	r2, [r2, #1]
 800de12:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800de14:	aa02      	add	r2, sp, #8
 800de16:	7812      	ldrb	r2, [r2, #0]
 800de18:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800de1a:	78a2      	ldrb	r2, [r4, #2]
 800de1c:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800de1e:	7862      	ldrb	r2, [r4, #1]
 800de20:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800de22:	7822      	ldrb	r2, [r4, #0]
 800de24:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800de26:	78e2      	ldrb	r2, [r4, #3]
 800de28:	21fa      	movs	r1, #250	; 0xfa
 800de2a:	00c9      	lsls	r1, r1, #3
 800de2c:	468c      	mov	ip, r1
 800de2e:	4462      	add	r2, ip
 800de30:	831a      	strh	r2, [r3, #24]
}
 800de32:	b009      	add	sp, #36	; 0x24
 800de34:	bd30      	pop	{r4, r5, pc}
 800de36:	46c0      	nop			; (mov r8, r8)
 800de38:	200066a0 	.word	0x200066a0
 800de3c:	20006270 	.word	0x20006270

0800de40 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800de40:	b530      	push	{r4, r5, lr}
 800de42:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800de44:	4a12      	ldr	r2, [pc, #72]	; (800de90 <TIM_USEC_Init+0x50>)
 800de46:	69d1      	ldr	r1, [r2, #28]
 800de48:	2080      	movs	r0, #128	; 0x80
 800de4a:	0040      	lsls	r0, r0, #1
 800de4c:	4301      	orrs	r1, r0
 800de4e:	61d1      	str	r1, [r2, #28]
 800de50:	69d3      	ldr	r3, [r2, #28]
 800de52:	4003      	ands	r3, r0
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800de58:	4c0e      	ldr	r4, [pc, #56]	; (800de94 <TIM_USEC_Init+0x54>)
 800de5a:	4b0f      	ldr	r3, [pc, #60]	; (800de98 <TIM_USEC_Init+0x58>)
 800de5c:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800de5e:	f004 fb75 	bl	801254c <HAL_RCC_GetPCLK1Freq>
 800de62:	490e      	ldr	r1, [pc, #56]	; (800de9c <TIM_USEC_Init+0x5c>)
 800de64:	f7f2 f96a 	bl	800013c <__udivsi3>
 800de68:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de6a:	2500      	movs	r5, #0
 800de6c:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800de6e:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <TIM_USEC_Init+0x60>)
 800de70:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800de72:	0020      	movs	r0, r4
 800de74:	f004 fe90 	bl	8012b98 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de78:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de7a:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800de7c:	a902      	add	r1, sp, #8
 800de7e:	0020      	movs	r0, r4
 800de80:	f004 fea4 	bl	8012bcc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800de84:	0020      	movs	r0, r4
 800de86:	f004 fdfe 	bl	8012a86 <HAL_TIM_Base_Start>
}
 800de8a:	b005      	add	sp, #20
 800de8c:	bd30      	pop	{r4, r5, pc}
 800de8e:	46c0      	nop			; (mov r8, r8)
 800de90:	40021000 	.word	0x40021000
 800de94:	200066fc 	.word	0x200066fc
 800de98:	40002000 	.word	0x40002000
 800de9c:	000f4240 	.word	0x000f4240
 800dea0:	0000ffff 	.word	0x0000ffff

0800dea4 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dea4:	b530      	push	{r4, r5, lr}
 800dea6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dea8:	4a12      	ldr	r2, [pc, #72]	; (800def4 <TIM_MSEC_Init+0x50>)
 800deaa:	6991      	ldr	r1, [r2, #24]
 800deac:	2080      	movs	r0, #128	; 0x80
 800deae:	0240      	lsls	r0, r0, #9
 800deb0:	4301      	orrs	r1, r0
 800deb2:	6191      	str	r1, [r2, #24]
 800deb4:	6993      	ldr	r3, [r2, #24]
 800deb6:	4003      	ands	r3, r0
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800debc:	4c0e      	ldr	r4, [pc, #56]	; (800def8 <TIM_MSEC_Init+0x54>)
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <TIM_MSEC_Init+0x58>)
 800dec0:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dec2:	f004 fb43 	bl	801254c <HAL_RCC_GetPCLK1Freq>
 800dec6:	21fa      	movs	r1, #250	; 0xfa
 800dec8:	0089      	lsls	r1, r1, #2
 800deca:	f7f2 f937 	bl	800013c <__udivsi3>
 800dece:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ded0:	2500      	movs	r5, #0
 800ded2:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800ded4:	4b0a      	ldr	r3, [pc, #40]	; (800df00 <TIM_MSEC_Init+0x5c>)
 800ded6:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800ded8:	0020      	movs	r0, r4
 800deda:	f004 fe5d 	bl	8012b98 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dede:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dee0:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dee2:	a902      	add	r1, sp, #8
 800dee4:	0020      	movs	r0, r4
 800dee6:	f004 fe71 	bl	8012bcc <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800deea:	0020      	movs	r0, r4
 800deec:	f004 fdcb 	bl	8012a86 <HAL_TIM_Base_Start>
}
 800def0:	b005      	add	sp, #20
 800def2:	bd30      	pop	{r4, r5, pc}
 800def4:	40021000 	.word	0x40021000
 800def8:	200066c0 	.word	0x200066c0
 800defc:	40014000 	.word	0x40014000
 800df00:	0000ffff 	.word	0x0000ffff

0800df04 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800df04:	b510      	push	{r4, lr}
 800df06:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800df08:	f002 f8ea 	bl	80100e0 <vPortEnterCritical>
	
	if (Delay)
 800df0c:	2c00      	cmp	r4, #0
 800df0e:	d006      	beq.n	800df1e <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800df10:	4b04      	ldr	r3, [pc, #16]	; (800df24 <StartMicroDelay+0x20>)
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800df16:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800df18:	1a5b      	subs	r3, r3, r1
 800df1a:	42a3      	cmp	r3, r4
 800df1c:	d9fb      	bls.n	800df16 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800df1e:	f002 f8eb 	bl	80100f8 <vPortExitCritical>
}
 800df22:	bd10      	pop	{r4, pc}
 800df24:	200066fc 	.word	0x200066fc

0800df28 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800df28:	b510      	push	{r4, lr}
 800df2a:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800df2c:	f002 f8d8 	bl	80100e0 <vPortEnterCritical>
	
	if (Delay)
 800df30:	2c00      	cmp	r4, #0
 800df32:	d006      	beq.n	800df42 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800df34:	4b04      	ldr	r3, [pc, #16]	; (800df48 <StartMilliDelay+0x20>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800df3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800df3c:	1a5b      	subs	r3, r3, r1
 800df3e:	42a3      	cmp	r3, r4
 800df40:	d9fb      	bls.n	800df3a <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800df42:	f002 f8d9 	bl	80100f8 <vPortExitCritical>
}
 800df46:	bd10      	pop	{r4, pc}
 800df48:	200066c0 	.word	0x200066c0

0800df4c <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800df4c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800df4e:	4809      	ldr	r0, [pc, #36]	; (800df74 <MX_USART1_UART_Init+0x28>)
 800df50:	4b09      	ldr	r3, [pc, #36]	; (800df78 <MX_USART1_UART_Init+0x2c>)
 800df52:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800df54:	23e1      	movs	r3, #225	; 0xe1
 800df56:	031b      	lsls	r3, r3, #12
 800df58:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800df5a:	2300      	movs	r3, #0
 800df5c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800df5e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800df60:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800df62:	220c      	movs	r2, #12
 800df64:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df66:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800df68:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800df6a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df6c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800df6e:	f005 faad 	bl	80134cc <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800df72:	bd10      	pop	{r4, pc}
 800df74:	2000640c 	.word	0x2000640c
 800df78:	40013800 	.word	0x40013800

0800df7c <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800df7c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800df7e:	4809      	ldr	r0, [pc, #36]	; (800dfa4 <MX_USART2_UART_Init+0x28>)
 800df80:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <MX_USART2_UART_Init+0x2c>)
 800df82:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800df84:	23e1      	movs	r3, #225	; 0xe1
 800df86:	031b      	lsls	r3, r3, #12
 800df88:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800df8a:	2300      	movs	r3, #0
 800df8c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800df8e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800df90:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800df92:	220c      	movs	r2, #12
 800df94:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df96:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800df98:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800df9a:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800df9c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800df9e:	f005 fa95 	bl	80134cc <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800dfa2:	bd10      	pop	{r4, pc}
 800dfa4:	2000657c 	.word	0x2000657c
 800dfa8:	40004400 	.word	0x40004400

0800dfac <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800dfac:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dfae:	4809      	ldr	r0, [pc, #36]	; (800dfd4 <MX_USART3_UART_Init+0x28>)
 800dfb0:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <MX_USART3_UART_Init+0x2c>)
 800dfb2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dfb4:	23e1      	movs	r3, #225	; 0xe1
 800dfb6:	031b      	lsls	r3, r3, #12
 800dfb8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dfbe:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dfc0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dfc2:	220c      	movs	r2, #12
 800dfc4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfc6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dfc8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dfca:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dfcc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dfce:	f005 fa7d 	bl	80134cc <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dfd2:	bd10      	pop	{r4, pc}
 800dfd4:	2000635c 	.word	0x2000635c
 800dfd8:	40004800 	.word	0x40004800

0800dfdc <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dfdc:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dfde:	4809      	ldr	r0, [pc, #36]	; (800e004 <MX_USART4_UART_Init+0x28>)
 800dfe0:	4b09      	ldr	r3, [pc, #36]	; (800e008 <MX_USART4_UART_Init+0x2c>)
 800dfe2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dfe4:	23e1      	movs	r3, #225	; 0xe1
 800dfe6:	031b      	lsls	r3, r3, #12
 800dfe8:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dfea:	2300      	movs	r3, #0
 800dfec:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dfee:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dff0:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dff2:	220c      	movs	r2, #12
 800dff4:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dff6:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dff8:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dffa:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dffc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dffe:	f005 fa65 	bl	80134cc <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e002:	bd10      	pop	{r4, pc}
 800e004:	20006508 	.word	0x20006508
 800e008:	40004c00 	.word	0x40004c00

0800e00c <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e00c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e00e:	4809      	ldr	r0, [pc, #36]	; (800e034 <MX_USART6_UART_Init+0x28>)
 800e010:	4b09      	ldr	r3, [pc, #36]	; (800e038 <MX_USART6_UART_Init+0x2c>)
 800e012:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e014:	23e1      	movs	r3, #225	; 0xe1
 800e016:	031b      	lsls	r3, r3, #12
 800e018:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e01a:	2300      	movs	r3, #0
 800e01c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e01e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e020:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e022:	220c      	movs	r2, #12
 800e024:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e026:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e028:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e02a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e02c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e02e:	f005 fa4d 	bl	80134cc <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e032:	bd10      	pop	{r4, pc}
 800e034:	20006490 	.word	0x20006490
 800e038:	40011400 	.word	0x40011400

0800e03c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e03e:	46ce      	mov	lr, r9
 800e040:	b500      	push	{lr}
 800e042:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART2)
 800e044:	6803      	ldr	r3, [r0, #0]
 800e046:	4a49      	ldr	r2, [pc, #292]	; (800e16c <HAL_UART_MspInit+0x130>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d009      	beq.n	800e060 <HAL_UART_MspInit+0x24>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e04c:	4a48      	ldr	r2, [pc, #288]	; (800e170 <HAL_UART_MspInit+0x134>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d032      	beq.n	800e0b8 <HAL_UART_MspInit+0x7c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e052:	4a48      	ldr	r2, [pc, #288]	; (800e174 <HAL_UART_MspInit+0x138>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d05c      	beq.n	800e112 <HAL_UART_MspInit+0xd6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e058:	b008      	add	sp, #32
 800e05a:	bc04      	pop	{r2}
 800e05c:	4691      	mov	r9, r2
 800e05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800e060:	4a45      	ldr	r2, [pc, #276]	; (800e178 <HAL_UART_MspInit+0x13c>)
 800e062:	69d1      	ldr	r1, [r2, #28]
 800e064:	2080      	movs	r0, #128	; 0x80
 800e066:	0280      	lsls	r0, r0, #10
 800e068:	4301      	orrs	r1, r0
 800e06a:	61d1      	str	r1, [r2, #28]
 800e06c:	69d3      	ldr	r3, [r2, #28]
 800e06e:	4003      	ands	r3, r0
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e074:	2304      	movs	r3, #4
 800e076:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e078:	2702      	movs	r7, #2
 800e07a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e07c:	2401      	movs	r4, #1
 800e07e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e080:	2603      	movs	r6, #3
 800e082:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e084:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e086:	2590      	movs	r5, #144	; 0x90
 800e088:	05ed      	lsls	r5, r5, #23
 800e08a:	a903      	add	r1, sp, #12
 800e08c:	0028      	movs	r0, r5
 800e08e:	f003 fc73 	bl	8011978 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e092:	2308      	movs	r3, #8
 800e094:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e096:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e098:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e09a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;
 800e09c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e09e:	a903      	add	r1, sp, #12
 800e0a0:	0028      	movs	r0, r5
 800e0a2:	f003 fc69 	bl	8011978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	201c      	movs	r0, #28
 800e0ac:	f002 fc9a 	bl	80109e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e0b0:	201c      	movs	r0, #28
 800e0b2:	f002 fccb 	bl	8010a4c <HAL_NVIC_EnableIRQ>
 800e0b6:	e7cf      	b.n	800e058 <HAL_UART_MspInit+0x1c>
    __USART3_CLK_ENABLE();
 800e0b8:	4a2f      	ldr	r2, [pc, #188]	; (800e178 <HAL_UART_MspInit+0x13c>)
 800e0ba:	69d1      	ldr	r1, [r2, #28]
 800e0bc:	2080      	movs	r0, #128	; 0x80
 800e0be:	02c0      	lsls	r0, r0, #11
 800e0c0:	4301      	orrs	r1, r0
 800e0c2:	61d1      	str	r1, [r2, #28]
 800e0c4:	69d3      	ldr	r3, [r2, #28]
 800e0c6:	4003      	ands	r3, r0
 800e0c8:	9301      	str	r3, [sp, #4]
 800e0ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e0cc:	2380      	movs	r3, #128	; 0x80
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0d2:	2402      	movs	r4, #2
 800e0d4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0d6:	2701      	movs	r7, #1
 800e0d8:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0da:	2603      	movs	r6, #3
 800e0dc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e0de:	2504      	movs	r5, #4
 800e0e0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e0e2:	a903      	add	r1, sp, #12
 800e0e4:	4825      	ldr	r0, [pc, #148]	; (800e17c <HAL_UART_MspInit+0x140>)
 800e0e6:	f003 fc47 	bl	8011978 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e0ea:	2380      	movs	r3, #128	; 0x80
 800e0ec:	011b      	lsls	r3, r3, #4
 800e0ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0f0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e0f2:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e0f4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;
 800e0f6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e0f8:	a903      	add	r1, sp, #12
 800e0fa:	4820      	ldr	r0, [pc, #128]	; (800e17c <HAL_UART_MspInit+0x140>)
 800e0fc:	f003 fc3c 	bl	8011978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e100:	2200      	movs	r2, #0
 800e102:	2101      	movs	r1, #1
 800e104:	201d      	movs	r0, #29
 800e106:	f002 fc6d 	bl	80109e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e10a:	201d      	movs	r0, #29
 800e10c:	f002 fc9e 	bl	8010a4c <HAL_NVIC_EnableIRQ>
 800e110:	e7a2      	b.n	800e058 <HAL_UART_MspInit+0x1c>
    __USART6_CLK_ENABLE();
 800e112:	4b19      	ldr	r3, [pc, #100]	; (800e178 <HAL_UART_MspInit+0x13c>)
 800e114:	699a      	ldr	r2, [r3, #24]
 800e116:	2420      	movs	r4, #32
 800e118:	4322      	orrs	r2, r4
 800e11a:	619a      	str	r2, [r3, #24]
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	4023      	ands	r3, r4
 800e120:	9302      	str	r3, [sp, #8]
 800e122:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e124:	2310      	movs	r3, #16
 800e126:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e128:	3b0e      	subs	r3, #14
 800e12a:	4699      	mov	r9, r3
 800e12c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e12e:	2501      	movs	r5, #1
 800e130:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e132:	2703      	movs	r7, #3
 800e134:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e136:	2605      	movs	r6, #5
 800e138:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e13a:	a903      	add	r1, sp, #12
 800e13c:	2090      	movs	r0, #144	; 0x90
 800e13e:	05c0      	lsls	r0, r0, #23
 800e140:	f003 fc1a 	bl	8011978 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e144:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e146:	464b      	mov	r3, r9
 800e148:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e14a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e14c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;
 800e14e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e150:	a903      	add	r1, sp, #12
 800e152:	2090      	movs	r0, #144	; 0x90
 800e154:	05c0      	lsls	r0, r0, #23
 800e156:	f003 fc0f 	bl	8011978 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e15a:	2200      	movs	r2, #0
 800e15c:	2101      	movs	r1, #1
 800e15e:	201d      	movs	r0, #29
 800e160:	f002 fc40 	bl	80109e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e164:	201d      	movs	r0, #29
 800e166:	f002 fc71 	bl	8010a4c <HAL_NVIC_EnableIRQ>
}
 800e16a:	e775      	b.n	800e058 <HAL_UART_MspInit+0x1c>
 800e16c:	40004400 	.word	0x40004400
 800e170:	40004800 	.word	0x40004800
 800e174:	40011400 	.word	0x40011400
 800e178:	40021000 	.word	0x40021000
 800e17c:	48000400 	.word	0x48000400

0800e180 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e180:	2802      	cmp	r0, #2
 800e182:	d005      	beq.n	800e190 <GetUart+0x10>
 800e184:	2803      	cmp	r0, #3
 800e186:	d005      	beq.n	800e194 <GetUart+0x14>
 800e188:	2801      	cmp	r0, #1
 800e18a:	d005      	beq.n	800e198 <GetUart+0x18>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e18c:	2000      	movs	r0, #0
 800e18e:	e000      	b.n	800e192 <GetUart+0x12>
			return P2uart;
 800e190:	4802      	ldr	r0, [pc, #8]	; (800e19c <GetUart+0x1c>)
	}		
}
 800e192:	4770      	bx	lr
			return P3uart;
 800e194:	4802      	ldr	r0, [pc, #8]	; (800e1a0 <GetUart+0x20>)
 800e196:	e7fc      	b.n	800e192 <GetUart+0x12>
			return P1uart;	
 800e198:	4802      	ldr	r0, [pc, #8]	; (800e1a4 <GetUart+0x24>)
 800e19a:	e7fa      	b.n	800e192 <GetUart+0x12>
 800e19c:	20006490 	.word	0x20006490
 800e1a0:	2000635c 	.word	0x2000635c
 800e1a4:	2000657c 	.word	0x2000657c

0800e1a8 <writePxMutex>:
{
 800e1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	0005      	movs	r5, r0
 800e1ae:	9100      	str	r1, [sp, #0]
 800e1b0:	0017      	movs	r7, r2
 800e1b2:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e1b4:	f7ff ffe4 	bl	800e180 <GetUart>
 800e1b8:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e1ba:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d016      	beq.n	800e1ee <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e1c0:	00ab      	lsls	r3, r5, #2
 800e1c2:	4a0c      	ldr	r2, [pc, #48]	; (800e1f4 <writePxMutex+0x4c>)
 800e1c4:	5898      	ldr	r0, [r3, r2]
 800e1c6:	9901      	ldr	r1, [sp, #4]
 800e1c8:	f000 f9b8 	bl	800e53c <osSemaphoreWait>
 800e1cc:	2800      	cmp	r0, #0
 800e1ce:	d10e      	bne.n	800e1ee <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e1d0:	9b08      	ldr	r3, [sp, #32]
 800e1d2:	003a      	movs	r2, r7
 800e1d4:	9900      	ldr	r1, [sp, #0]
 800e1d6:	0020      	movs	r0, r4
 800e1d8:	f005 f8d2 	bl	8013380 <HAL_UART_Transmit>
 800e1dc:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e1de:	d001      	beq.n	800e1e4 <writePxMutex+0x3c>
 800e1e0:	2803      	cmp	r0, #3
 800e1e2:	d1f5      	bne.n	800e1d0 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e1e4:	00ad      	lsls	r5, r5, #2
 800e1e6:	4b03      	ldr	r3, [pc, #12]	; (800e1f4 <writePxMutex+0x4c>)
 800e1e8:	58e8      	ldr	r0, [r5, r3]
 800e1ea:	f000 f9d3 	bl	800e594 <osSemaphoreRelease>
}
 800e1ee:	0030      	movs	r0, r6
 800e1f0:	b003      	add	sp, #12
 800e1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f4:	200062f4 	.word	0x200062f4

0800e1f8 <writePxITMutex>:
{
 800e1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	0004      	movs	r4, r0
 800e1fe:	9101      	str	r1, [sp, #4]
 800e200:	0017      	movs	r7, r2
 800e202:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e204:	f7ff ffbc 	bl	800e180 <GetUart>
 800e208:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e20a:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d008      	beq.n	800e222 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e210:	00a4      	lsls	r4, r4, #2
 800e212:	4b09      	ldr	r3, [pc, #36]	; (800e238 <writePxITMutex+0x40>)
 800e214:	58e0      	ldr	r0, [r4, r3]
 800e216:	0029      	movs	r1, r5
 800e218:	f000 f990 	bl	800e53c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e21c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e21e:	2800      	cmp	r0, #0
 800e220:	d002      	beq.n	800e228 <writePxITMutex+0x30>
}
 800e222:	0018      	movs	r0, r3
 800e224:	b003      	add	sp, #12
 800e226:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e228:	003a      	movs	r2, r7
 800e22a:	9901      	ldr	r1, [sp, #4]
 800e22c:	0030      	movs	r0, r6
 800e22e:	f004 fd11 	bl	8012c54 <HAL_UART_Transmit_IT>
 800e232:	0003      	movs	r3, r0
 800e234:	e7f5      	b.n	800e222 <writePxITMutex+0x2a>
 800e236:	46c0      	nop			; (mov r8, r8)
 800e238:	200062f4 	.word	0x200062f4

0800e23c <writePxDMAMutex>:
{
 800e23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e23e:	b083      	sub	sp, #12
 800e240:	0004      	movs	r4, r0
 800e242:	000f      	movs	r7, r1
 800e244:	9201      	str	r2, [sp, #4]
 800e246:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e248:	f7ff ff9a 	bl	800e180 <GetUart>
 800e24c:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e24e:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e250:	2800      	cmp	r0, #0
 800e252:	d008      	beq.n	800e266 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e254:	00a4      	lsls	r4, r4, #2
 800e256:	4b0a      	ldr	r3, [pc, #40]	; (800e280 <writePxDMAMutex+0x44>)
 800e258:	58e0      	ldr	r0, [r4, r3]
 800e25a:	0031      	movs	r1, r6
 800e25c:	f000 f96e 	bl	800e53c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e260:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e262:	2800      	cmp	r0, #0
 800e264:	d002      	beq.n	800e26c <writePxDMAMutex+0x30>
}
 800e266:	0018      	movs	r0, r3
 800e268:	b003      	add	sp, #12
 800e26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e26c:	0028      	movs	r0, r5
 800e26e:	f7fd fee7 	bl	800c040 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e272:	9a01      	ldr	r2, [sp, #4]
 800e274:	0039      	movs	r1, r7
 800e276:	0028      	movs	r0, r5
 800e278:	f004 fd98 	bl	8012dac <HAL_UART_Transmit_DMA>
 800e27c:	0003      	movs	r3, r0
 800e27e:	e7f2      	b.n	800e266 <writePxDMAMutex+0x2a>
 800e280:	200062f4 	.word	0x200062f4

0800e284 <UpdateBaudrate>:
{
 800e284:	b510      	push	{r4, lr}
 800e286:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e288:	f7ff ff7a 	bl	800e180 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e28c:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e28e:	f005 f91d 	bl	80134cc <HAL_UART_Init>
}
 800e292:	2000      	movs	r0, #0
 800e294:	bd10      	pop	{r4, pc}
	...

0800e298 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e298:	b570      	push	{r4, r5, r6, lr}
 800e29a:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e29c:	d003      	beq.n	800e2a6 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e29e:	2901      	cmp	r1, #1
 800e2a0:	d002      	beq.n	800e2a8 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	d016      	beq.n	800e2d4 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e2a8:	f7fc f912 	bl	800a4d0 <GetPort>
 800e2ac:	4b14      	ldr	r3, [pc, #80]	; (800e300 <SwapUartPins+0x68>)
 800e2ae:	781b      	ldrb	r3, [r3, #0]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	4d14      	ldr	r5, [pc, #80]	; (800e304 <SwapUartPins+0x6c>)
 800e2b4:	005b      	lsls	r3, r3, #1
 800e2b6:	3801      	subs	r0, #1
 800e2b8:	2180      	movs	r1, #128	; 0x80
 800e2ba:	0209      	lsls	r1, r1, #8
 800e2bc:	000a      	movs	r2, r1
 800e2be:	4102      	asrs	r2, r0
 800e2c0:	5b58      	ldrh	r0, [r3, r5]
 800e2c2:	4302      	orrs	r2, r0
 800e2c4:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e2c6:	2308      	movs	r3, #8
 800e2c8:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e2ca:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e2cc:	0020      	movs	r0, r4
 800e2ce:	f005 f8fd 	bl	80134cc <HAL_UART_Init>
 800e2d2:	e7e8      	b.n	800e2a6 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e2d4:	f7fc f8fc 	bl	800a4d0 <GetPort>
 800e2d8:	4b09      	ldr	r3, [pc, #36]	; (800e300 <SwapUartPins+0x68>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	4d09      	ldr	r5, [pc, #36]	; (800e304 <SwapUartPins+0x6c>)
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	3801      	subs	r0, #1
 800e2e4:	2180      	movs	r1, #128	; 0x80
 800e2e6:	0209      	lsls	r1, r1, #8
 800e2e8:	4101      	asrs	r1, r0
 800e2ea:	5b5a      	ldrh	r2, [r3, r5]
 800e2ec:	438a      	bics	r2, r1
 800e2ee:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e2f0:	2308      	movs	r3, #8
 800e2f2:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e2f8:	0020      	movs	r0, r4
 800e2fa:	f005 f8e7 	bl	80134cc <HAL_UART_Init>
}
 800e2fe:	e7d2      	b.n	800e2a6 <SwapUartPins+0xe>
 800e300:	20000806 	.word	0x20000806
 800e304:	20006738 	.word	0x20006738

0800e308 <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800e308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e30a:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800e30c:	4b12      	ldr	r3, [pc, #72]	; (800e358 <ReadPortsDir+0x50>)
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d01c      	beq.n	800e34e <ReadPortsDir+0x46>
 800e314:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 800e31a:	4e10      	ldr	r6, [pc, #64]	; (800e35c <ReadPortsDir+0x54>)
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800e31c:	4d10      	ldr	r5, [pc, #64]	; (800e360 <ReadPortsDir+0x58>)
	for (uint8_t i = 1; i <= N; i++) {
 800e31e:	4f0e      	ldr	r7, [pc, #56]	; (800e358 <ReadPortsDir+0x50>)
 800e320:	e004      	b.n	800e32c <ReadPortsDir+0x24>
 800e322:	3401      	adds	r4, #1
 800e324:	b2e4      	uxtb	r4, r4
 800e326:	783b      	ldrb	r3, [r7, #0]
 800e328:	42a3      	cmp	r3, r4
 800e32a:	d312      	bcc.n	800e352 <ReadPortsDir+0x4a>
		if (i != myID) {
 800e32c:	7833      	ldrb	r3, [r6, #0]
 800e32e:	42a3      	cmp	r3, r4
 800e330:	d0f7      	beq.n	800e322 <ReadPortsDir+0x1a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800e332:	2200      	movs	r2, #0
 800e334:	2113      	movs	r1, #19
 800e336:	0020      	movs	r0, r4
 800e338:	f7f9 ff3e 	bl	80081b8 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800e33c:	2032      	movs	r0, #50	; 0x32
 800e33e:	f7ff fdf3 	bl	800df28 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800e342:	782b      	ldrb	r3, [r5, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d0ec      	beq.n	800e322 <ReadPortsDir+0x1a>
				result = BOS_ERR_NoResponse;
 800e348:	2302      	movs	r3, #2
 800e34a:	9301      	str	r3, [sp, #4]
 800e34c:	e7e9      	b.n	800e322 <ReadPortsDir+0x1a>
	BOS_Status result = BOS_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	9301      	str	r3, [sp, #4]
			}
		}
	}

	return result;
}
 800e352:	9801      	ldr	r0, [sp, #4]
 800e354:	b003      	add	sp, #12
 800e356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e358:	20000030 	.word	0x20000030
 800e35c:	20000806 	.word	0x20000806
 800e360:	20000888 	.word	0x20000888

0800e364 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800e364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e366:	b083      	sub	sp, #12
 800e368:	9001      	str	r0, [sp, #4]
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800e36a:	2401      	movs	r4, #1
	uint16_t temp =0;
 800e36c:	2700      	movs	r7, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e36e:	2680      	movs	r6, #128	; 0x80
 800e370:	0236      	lsls	r6, r6, #8
 800e372:	e002      	b.n	800e37a <ReadPortsDirMSG+0x16>
	for (int p = 1; p <= NumOfPorts; p++) {
 800e374:	3401      	adds	r4, #1
 800e376:	2c04      	cmp	r4, #4
 800e378:	d00b      	beq.n	800e392 <ReadPortsDirMSG+0x2e>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e37a:	b2e5      	uxtb	r5, r4
 800e37c:	0028      	movs	r0, r5
 800e37e:	f7ff feff 	bl	800e180 <GetUart>
 800e382:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e384:	42b3      	cmp	r3, r6
 800e386:	d1f5      	bne.n	800e374 <ReadPortsDirMSG+0x10>
			messageParams[temp++] = p;
 800e388:	1c7b      	adds	r3, r7, #1
 800e38a:	4a06      	ldr	r2, [pc, #24]	; (800e3a4 <ReadPortsDirMSG+0x40>)
 800e38c:	55d5      	strb	r5, [r2, r7]
 800e38e:	b29f      	uxth	r7, r3
 800e390:	e7f0      	b.n	800e374 <ReadPortsDirMSG+0x10>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800e392:	003a      	movs	r2, r7
 800e394:	2114      	movs	r1, #20
 800e396:	9801      	ldr	r0, [sp, #4]
 800e398:	f7f9 ff0e 	bl	80081b8 <SendMessageToModule>
	return result;
}
 800e39c:	2000      	movs	r0, #0
 800e39e:	b003      	add	sp, #12
 800e3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a2:	46c0      	nop			; (mov r8, r8)
 800e3a4:	200006c8 	.word	0x200006c8

0800e3a8 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800e3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3aa:	46c6      	mov	lr, r8
 800e3ac:	b500      	push	{lr}
 800e3ae:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e3b0:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e3b2:	4b12      	ldr	r3, [pc, #72]	; (800e3fc <UpdateMyPortsDir+0x54>)
 800e3b4:	4698      	mov	r8, r3
 800e3b6:	4f12      	ldr	r7, [pc, #72]	; (800e400 <UpdateMyPortsDir+0x58>)
 800e3b8:	2680      	movs	r6, #128	; 0x80
 800e3ba:	0236      	lsls	r6, r6, #8
 800e3bc:	e00a      	b.n	800e3d4 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800e3be:	0020      	movs	r0, r4
 800e3c0:	f7ff fede 	bl	800e180 <GetUart>
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	f7ff ff67 	bl	800e298 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e3ca:	3401      	adds	r4, #1
 800e3cc:	b2e4      	uxtb	r4, r4
 800e3ce:	3501      	adds	r5, #1
 800e3d0:	2c04      	cmp	r4, #4
 800e3d2:	d00f      	beq.n	800e3f4 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e3d4:	783b      	ldrb	r3, [r7, #0]
 800e3d6:	3b01      	subs	r3, #1
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	4642      	mov	r2, r8
 800e3dc:	5a9b      	ldrh	r3, [r3, r2]
 800e3de:	0032      	movs	r2, r6
 800e3e0:	412a      	asrs	r2, r5
 800e3e2:	421a      	tst	r2, r3
 800e3e4:	d1eb      	bne.n	800e3be <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 800e3e6:	0020      	movs	r0, r4
 800e3e8:	f7ff feca 	bl	800e180 <GetUart>
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	f7ff ff53 	bl	800e298 <SwapUartPins>
 800e3f2:	e7ea      	b.n	800e3ca <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 800e3f4:	2000      	movs	r0, #0
 800e3f6:	bc04      	pop	{r2}
 800e3f8:	4690      	mov	r8, r2
 800e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3fc:	20006738 	.word	0x20006738
 800e400:	20000806 	.word	0x20000806

0800e404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e404:	4816      	ldr	r0, [pc, #88]	; (800e460 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e406:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e408:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e40a:	e003      	b.n	800e414 <LoopCopyDataInit>

0800e40c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e40c:	4b15      	ldr	r3, [pc, #84]	; (800e464 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e40e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e410:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e412:	3104      	adds	r1, #4

0800e414 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e414:	4814      	ldr	r0, [pc, #80]	; (800e468 <LoopForever+0xc>)
  ldr r3, =_edata
 800e416:	4b15      	ldr	r3, [pc, #84]	; (800e46c <LoopForever+0x10>)
  adds r2, r0, r1
 800e418:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e41a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e41c:	d3f6      	bcc.n	800e40c <CopyDataInit>
  ldr r2, =_sbss
 800e41e:	4a14      	ldr	r2, [pc, #80]	; (800e470 <LoopForever+0x14>)
  b LoopFillZerobss
 800e420:	e002      	b.n	800e428 <LoopFillZerobss>

0800e422 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e422:	2300      	movs	r3, #0
  str  r3, [r2]
 800e424:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e426:	3204      	adds	r2, #4

0800e428 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e428:	4b12      	ldr	r3, [pc, #72]	; (800e474 <LoopForever+0x18>)
  cmp r2, r3
 800e42a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e42c:	d3f9      	bcc.n	800e422 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e42e:	4812      	ldr	r0, [pc, #72]	; (800e478 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e430:	4912      	ldr	r1, [pc, #72]	; (800e47c <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e432:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e434:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e436:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e438:	d005      	beq.n	800e446 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e43a:	f000 f82b 	bl	800e494 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e43e:	f005 f9b1 	bl	80137a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e442:	f005 f998 	bl	8013776 <main>

0800e446 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e446:	480e      	ldr	r0, [pc, #56]	; (800e480 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e448:	490e      	ldr	r1, [pc, #56]	; (800e484 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e44a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e44c:	480e      	ldr	r0, [pc, #56]	; (800e488 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e44e:	490d      	ldr	r1, [pc, #52]	; (800e484 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e450:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e452:	480e      	ldr	r0, [pc, #56]	; (800e48c <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e454:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e456:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e458:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e45a:	4700      	bx	r0

0800e45c <LoopForever>:


LoopForever:
    b LoopForever
 800e45c:	e7fe      	b.n	800e45c <LoopForever>
 800e45e:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e460:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e464:	0801a53c 	.word	0x0801a53c
  ldr r0, =_sdata
 800e468:	2000000c 	.word	0x2000000c
  ldr r3, =_edata
 800e46c:	20000290 	.word	0x20000290
  ldr r2, =_sbss
 800e470:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 800e474:	200067d4 	.word	0x200067d4
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e478:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e47c:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e480:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e484:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e488:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e48c:	1fffd800 	.word	0x1fffd800

0800e490 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e490:	e7fe      	b.n	800e490 <ADC1_COMP_IRQHandler>
	...

0800e494 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e494:	4b11      	ldr	r3, [pc, #68]	; (800e4dc <SystemInit+0x48>)
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	2101      	movs	r1, #1
 800e49a:	430a      	orrs	r2, r1
 800e49c:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	480f      	ldr	r0, [pc, #60]	; (800e4e0 <SystemInit+0x4c>)
 800e4a2:	4002      	ands	r2, r0
 800e4a4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	480e      	ldr	r0, [pc, #56]	; (800e4e4 <SystemInit+0x50>)
 800e4aa:	4002      	ands	r2, r0
 800e4ac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	480d      	ldr	r0, [pc, #52]	; (800e4e8 <SystemInit+0x54>)
 800e4b2:	4002      	ands	r2, r0
 800e4b4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	480c      	ldr	r0, [pc, #48]	; (800e4ec <SystemInit+0x58>)
 800e4ba:	4002      	ands	r2, r0
 800e4bc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c0:	200f      	movs	r0, #15
 800e4c2:	4382      	bics	r2, r0
 800e4c4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e4c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4c8:	4809      	ldr	r0, [pc, #36]	; (800e4f0 <SystemInit+0x5c>)
 800e4ca:	4002      	ands	r2, r0
 800e4cc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e4ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4d0:	438a      	bics	r2, r1
 800e4d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	609a      	str	r2, [r3, #8]

}
 800e4d8:	4770      	bx	lr
 800e4da:	46c0      	nop			; (mov r8, r8)
 800e4dc:	40021000 	.word	0x40021000
 800e4e0:	08ffb80c 	.word	0x08ffb80c
 800e4e4:	fef6ffff 	.word	0xfef6ffff
 800e4e8:	fffbffff 	.word	0xfffbffff
 800e4ec:	ffc0ffff 	.word	0xffc0ffff
 800e4f0:	fff0feac 	.word	0xfff0feac

0800e4f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e4f4:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e4f6:	f000 fed7 	bl	800f2a8 <vTaskStartScheduler>
  
  return osOK;
}
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	bd10      	pop	{r4, pc}

0800e4fe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e4fe:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e500:	2800      	cmp	r0, #0
 800e502:	d100      	bne.n	800e506 <osDelay+0x8>
 800e504:	3001      	adds	r0, #1
 800e506:	f001 f813 	bl	800f530 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e50a:	2000      	movs	r0, #0
 800e50c:	bd10      	pop	{r4, pc}

0800e50e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e50e:	b510      	push	{r4, lr}
 800e510:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e512:	2901      	cmp	r1, #1
 800e514:	d005      	beq.n	800e522 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e516:	2100      	movs	r1, #0
 800e518:	f000 fae7 	bl	800eaea <xQueueCreateCountingSemaphore>
 800e51c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e51e:	0020      	movs	r0, r4
 800e520:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e522:	2203      	movs	r2, #3
 800e524:	2100      	movs	r1, #0
 800e526:	f000 fac0 	bl	800eaaa <xQueueGenericCreate>
 800e52a:	1e04      	subs	r4, r0, #0
 800e52c:	d0f7      	beq.n	800e51e <osSemaphoreCreate+0x10>
 800e52e:	2300      	movs	r3, #0
 800e530:	2200      	movs	r2, #0
 800e532:	2100      	movs	r1, #0
 800e534:	f000 fae3 	bl	800eafe <xQueueGenericSend>
 800e538:	e7f1      	b.n	800e51e <osSemaphoreCreate+0x10>
	...

0800e53c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e53c:	b500      	push	{lr}
 800e53e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e540:	2300      	movs	r3, #0
 800e542:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e544:	2800      	cmp	r0, #0
 800e546:	d021      	beq.n	800e58c <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e548:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d010      	beq.n	800e572 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e550:	aa01      	add	r2, sp, #4
 800e552:	2100      	movs	r1, #0
 800e554:	f000 fc3f 	bl	800edd6 <xQueueReceiveFromISR>
 800e558:	0003      	movs	r3, r0
      return osErrorOS;
 800e55a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d113      	bne.n	800e588 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e560:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00f      	beq.n	800e588 <osSemaphoreWait+0x4c>
 800e568:	4b09      	ldr	r3, [pc, #36]	; (800e590 <osSemaphoreWait+0x54>)
 800e56a:	2280      	movs	r2, #128	; 0x80
 800e56c:	0552      	lsls	r2, r2, #21
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	e00a      	b.n	800e588 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e572:	2300      	movs	r3, #0
 800e574:	000a      	movs	r2, r1
 800e576:	2100      	movs	r1, #0
 800e578:	f000 fb9d 	bl	800ecb6 <xQueueGenericReceive>
  return osOK;
 800e57c:	3801      	subs	r0, #1
 800e57e:	1e43      	subs	r3, r0, #1
 800e580:	4198      	sbcs	r0, r3
 800e582:	4240      	negs	r0, r0
 800e584:	23ff      	movs	r3, #255	; 0xff
 800e586:	4018      	ands	r0, r3
}
 800e588:	b003      	add	sp, #12
 800e58a:	bd00      	pop	{pc}
    return osErrorParameter;
 800e58c:	2080      	movs	r0, #128	; 0x80
 800e58e:	e7fb      	b.n	800e588 <osSemaphoreWait+0x4c>
 800e590:	e000ed04 	.word	0xe000ed04

0800e594 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e594:	b500      	push	{lr}
 800e596:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e598:	2300      	movs	r3, #0
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00f      	beq.n	800e5c4 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e5a4:	a901      	add	r1, sp, #4
 800e5a6:	f000 fb5b 	bl	800ec60 <xQueueGiveFromISR>
 800e5aa:	0003      	movs	r3, r0
      return osErrorOS;
 800e5ac:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d114      	bne.n	800e5dc <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e5b2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e5b4:	9b01      	ldr	r3, [sp, #4]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d010      	beq.n	800e5dc <osSemaphoreRelease+0x48>
 800e5ba:	4b09      	ldr	r3, [pc, #36]	; (800e5e0 <osSemaphoreRelease+0x4c>)
 800e5bc:	2280      	movs	r2, #128	; 0x80
 800e5be:	0552      	lsls	r2, r2, #21
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	e00b      	b.n	800e5dc <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	f000 fa98 	bl	800eafe <xQueueGenericSend>
      result = osErrorOS;
 800e5ce:	3801      	subs	r0, #1
 800e5d0:	4243      	negs	r3, r0
 800e5d2:	4158      	adcs	r0, r3
 800e5d4:	4240      	negs	r0, r0
 800e5d6:	23fe      	movs	r3, #254	; 0xfe
 800e5d8:	4398      	bics	r0, r3
 800e5da:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e5dc:	b003      	add	sp, #12
 800e5de:	bd00      	pop	{pc}
 800e5e0:	e000ed04 	.word	0xe000ed04

0800e5e4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e5e4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e5e6:	f001 f971 	bl	800f8cc <xTaskGetSchedulerState>
 800e5ea:	2801      	cmp	r0, #1
 800e5ec:	d001      	beq.n	800e5f2 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e5ee:	f001 fdb7 	bl	8010160 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e5f2:	bd10      	pop	{r4, pc}

0800e5f4 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	0005      	movs	r5, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e5f8:	2008      	movs	r0, #8
 800e5fa:	f001 fded 	bl	80101d8 <pvPortMalloc>
 800e5fe:	0004      	movs	r4, r0
portBASE_TYPE xReturn = pdFAIL;
 800e600:	2000      	movs	r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800e602:	2c00      	cmp	r4, #0
 800e604:	d00b      	beq.n	800e61e <FreeRTOS_CLIRegisterCommand+0x2a>
	{
		taskENTER_CRITICAL();
 800e606:	f001 fd6b 	bl	80100e0 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e60a:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e60c:	2300      	movs	r3, #0
 800e60e:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e610:	4b03      	ldr	r3, [pc, #12]	; (800e620 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e616:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e618:	f001 fd6e 	bl	80100f8 <vPortExitCritical>

		xReturn = pdPASS;
 800e61c:	2001      	movs	r0, #1
	}

	return xReturn;
}
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
 800e620:	200000ac 	.word	0x200000ac

0800e624 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e626:	46d6      	mov	lr, sl
 800e628:	b500      	push	{lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	9001      	str	r0, [sp, #4]
 800e62e:	9102      	str	r1, [sp, #8]
 800e630:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e632:	4b37      	ldr	r3, [pc, #220]	; (800e710 <FreeRTOS_CLIProcessCommand+0xec>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00e      	beq.n	800e658 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	9a01      	ldr	r2, [sp, #4]
 800e640:	9903      	ldr	r1, [sp, #12]
 800e642:	9802      	ldr	r0, [sp, #8]
 800e644:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e646:	2800      	cmp	r0, #0
 800e648:	d102      	bne.n	800e650 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e64a:	4b31      	ldr	r3, [pc, #196]	; (800e710 <FreeRTOS_CLIProcessCommand+0xec>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e650:	b004      	add	sp, #16
 800e652:	bc04      	pop	{r2}
 800e654:	4692      	mov	sl, r2
 800e656:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e658:	4d2e      	ldr	r5, [pc, #184]	; (800e714 <FreeRTOS_CLIProcessCommand+0xf0>)
 800e65a:	4a2d      	ldr	r2, [pc, #180]	; (800e710 <FreeRTOS_CLIProcessCommand+0xec>)
 800e65c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e65e:	3320      	adds	r3, #32
 800e660:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e662:	0017      	movs	r7, r2
 800e664:	e00a      	b.n	800e67c <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e666:	0002      	movs	r2, r0
 800e668:	0021      	movs	r1, r4
 800e66a:	9801      	ldr	r0, [sp, #4]
 800e66c:	f005 fee0 	bl	8014430 <strncmp>
 800e670:	2800      	cmp	r0, #0
 800e672:	d00e      	beq.n	800e692 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e674:	686d      	ldr	r5, [r5, #4]
 800e676:	603d      	str	r5, [r7, #0]
 800e678:	2d00      	cmp	r5, #0
 800e67a:	d012      	beq.n	800e6a2 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e67c:	682e      	ldr	r6, [r5, #0]
 800e67e:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e680:	0020      	movs	r0, r4
 800e682:	f7f1 fd49 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e686:	9b01      	ldr	r3, [sp, #4]
 800e688:	5c1b      	ldrb	r3, [r3, r0]
 800e68a:	4652      	mov	r2, sl
 800e68c:	4393      	bics	r3, r2
 800e68e:	d1f1      	bne.n	800e674 <FreeRTOS_CLIProcessCommand+0x50>
 800e690:	e7e9      	b.n	800e666 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e692:	200c      	movs	r0, #12
 800e694:	5630      	ldrsb	r0, [r6, r0]
 800e696:	2800      	cmp	r0, #0
 800e698:	da0a      	bge.n	800e6b0 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e69a:	4b1d      	ldr	r3, [pc, #116]	; (800e710 <FreeRTOS_CLIProcessCommand+0xec>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1cb      	bne.n	800e63a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e6a2:	9a03      	ldr	r2, [sp, #12]
 800e6a4:	491c      	ldr	r1, [pc, #112]	; (800e718 <FreeRTOS_CLIProcessCommand+0xf4>)
 800e6a6:	9802      	ldr	r0, [sp, #8]
 800e6a8:	f005 fed3 	bl	8014452 <strncpy>
		xReturn = pdFALSE;
 800e6ac:	2000      	movs	r0, #0
	return xReturn;
 800e6ae:	e7cf      	b.n	800e650 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e6b0:	9a01      	ldr	r2, [sp, #4]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	56d3      	ldrsb	r3, [r2, r3]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d027      	beq.n	800e70a <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800e6ba:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e6bc:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e6be:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800e6c0:	2501      	movs	r5, #1
 800e6c2:	e009      	b.n	800e6d8 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800e6c4:	2901      	cmp	r1, #1
 800e6c6:	d002      	beq.n	800e6ce <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800e6c8:	3401      	adds	r4, #1
 800e6ca:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e6cc:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800e6ce:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	56d3      	ldrsb	r3, [r2, r3]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d003      	beq.n	800e6e0 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800e6d8:	2b20      	cmp	r3, #32
 800e6da:	d0f3      	beq.n	800e6c4 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800e6dc:	0031      	movs	r1, r6
 800e6de:	e7f6      	b.n	800e6ce <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e6e0:	2901      	cmp	r1, #1
 800e6e2:	d00f      	beq.n	800e704 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e6e4:	4b0a      	ldr	r3, [pc, #40]	; (800e710 <FreeRTOS_CLIProcessCommand+0xec>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d0da      	beq.n	800e6a2 <FreeRTOS_CLIProcessCommand+0x7e>
 800e6ec:	42a0      	cmp	r0, r4
 800e6ee:	d0a4      	beq.n	800e63a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e6f0:	9a03      	ldr	r2, [sp, #12]
 800e6f2:	490a      	ldr	r1, [pc, #40]	; (800e71c <FreeRTOS_CLIProcessCommand+0xf8>)
 800e6f4:	9802      	ldr	r0, [sp, #8]
 800e6f6:	f005 feac 	bl	8014452 <strncpy>
		pxCommand = NULL;
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <FreeRTOS_CLIProcessCommand+0xec>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]
 800e700:	2000      	movs	r0, #0
 800e702:	e7a5      	b.n	800e650 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e704:	3c01      	subs	r4, #1
 800e706:	b264      	sxtb	r4, r4
 800e708:	e7ec      	b.n	800e6e4 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800e70a:	2400      	movs	r4, #0
 800e70c:	e7ea      	b.n	800e6e4 <FreeRTOS_CLIProcessCommand+0xc0>
 800e70e:	46c0      	nop			; (mov r8, r8)
 800e710:	20001620 	.word	0x20001620
 800e714:	200000b0 	.word	0x200000b0
 800e718:	0801a104 	.word	0x0801a104
 800e71c:	0801a0ac 	.word	0x0801a0ac

0800e720 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e720:	4800      	ldr	r0, [pc, #0]	; (800e724 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e722:	4770      	bx	lr
 800e724:	200013b8 	.word	0x200013b8

0800e728 <FreeRTOS_CLIGetParameter>:
{
 800e728:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e72e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e730:	2900      	cmp	r1, #0
 800e732:	d10b      	bne.n	800e74c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800e734:	2000      	movs	r0, #0
 800e736:	e02a      	b.n	800e78e <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800e738:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e73a:	2300      	movs	r3, #0
 800e73c:	56c3      	ldrsb	r3, [r0, r3]
 800e73e:	2b20      	cmp	r3, #32
 800e740:	d0fa      	beq.n	800e738 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800e742:	2b00      	cmp	r3, #0
 800e744:	d022      	beq.n	800e78c <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800e746:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e748:	42a1      	cmp	r1, r4
 800e74a:	d00d      	beq.n	800e768 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e74c:	2300      	movs	r3, #0
 800e74e:	56c3      	ldrsb	r3, [r0, r3]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d01f      	beq.n	800e794 <FreeRTOS_CLIGetParameter+0x6c>
 800e754:	2b20      	cmp	r3, #32
 800e756:	d0ef      	beq.n	800e738 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800e758:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e75a:	2300      	movs	r3, #0
 800e75c:	56c3      	ldrsb	r3, [r0, r3]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d018      	beq.n	800e794 <FreeRTOS_CLIGetParameter+0x6c>
 800e762:	2b20      	cmp	r3, #32
 800e764:	d1f8      	bne.n	800e758 <FreeRTOS_CLIGetParameter+0x30>
 800e766:	e7e7      	b.n	800e738 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e768:	7803      	ldrb	r3, [r0, #0]
 800e76a:	2120      	movs	r1, #32
 800e76c:	438b      	bics	r3, r1
 800e76e:	d00f      	beq.n	800e790 <FreeRTOS_CLIGetParameter+0x68>
 800e770:	0004      	movs	r4, r0
 800e772:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800e774:	6813      	ldr	r3, [r2, #0]
 800e776:	3301      	adds	r3, #1
 800e778:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e77a:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e77c:	7821      	ldrb	r1, [r4, #0]
 800e77e:	43a9      	bics	r1, r5
 800e780:	d1f8      	bne.n	800e774 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800e782:	1e5a      	subs	r2, r3, #1
 800e784:	4193      	sbcs	r3, r2
 800e786:	425b      	negs	r3, r3
 800e788:	4018      	ands	r0, r3
 800e78a:	e000      	b.n	800e78e <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800e78c:	2000      	movs	r0, #0
}
 800e78e:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800e790:	2000      	movs	r0, #0
 800e792:	e7fc      	b.n	800e78e <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e794:	2300      	movs	r3, #0
 800e796:	56c3      	ldrsb	r3, [r0, r3]
 800e798:	e7d3      	b.n	800e742 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800e79c <prvHelpCommand>:
{
 800e79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	0004      	movs	r4, r0
 800e7a2:	000d      	movs	r5, r1
 800e7a4:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e7aa:	aa01      	add	r2, sp, #4
 800e7ac:	2101      	movs	r1, #1
 800e7ae:	f7ff ffbb 	bl	800e728 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d027      	beq.n	800e806 <prvHelpCommand+0x6a>
 800e7b6:	2206      	movs	r2, #6
 800e7b8:	4930      	ldr	r1, [pc, #192]	; (800e87c <prvHelpCommand+0xe0>)
 800e7ba:	f005 fe39 	bl	8014430 <strncmp>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	d149      	bne.n	800e856 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800e7c2:	4b2f      	ldr	r3, [pc, #188]	; (800e880 <prvHelpCommand+0xe4>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	2b07      	cmp	r3, #7
 800e7c8:	d012      	beq.n	800e7f0 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e7ca:	1c5f      	adds	r7, r3, #1
 800e7cc:	b2ff      	uxtb	r7, r7
 800e7ce:	4a2c      	ldr	r2, [pc, #176]	; (800e880 <prvHelpCommand+0xe4>)
 800e7d0:	7017      	strb	r7, [r2, #0]
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	4a2b      	ldr	r2, [pc, #172]	; (800e884 <prvHelpCommand+0xe8>)
 800e7d6:	5899      	ldr	r1, [r3, r2]
 800e7d8:	002a      	movs	r2, r5
 800e7da:	0020      	movs	r0, r4
 800e7dc:	f005 fe39 	bl	8014452 <strncpy>
			xReturn = pdTRUE;
 800e7e0:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e7e2:	2f07      	cmp	r7, #7
 800e7e4:	d137      	bne.n	800e856 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800e7e6:	4b26      	ldr	r3, [pc, #152]	; (800e880 <prvHelpCommand+0xe4>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
 800e7ec:	2600      	movs	r6, #0
 800e7ee:	e032      	b.n	800e856 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e7f0:	4b23      	ldr	r3, [pc, #140]	; (800e880 <prvHelpCommand+0xe4>)
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	701a      	strb	r2, [r3, #0]
 800e7f6:	4b23      	ldr	r3, [pc, #140]	; (800e884 <prvHelpCommand+0xe8>)
 800e7f8:	6819      	ldr	r1, [r3, #0]
 800e7fa:	002a      	movs	r2, r5
 800e7fc:	0020      	movs	r0, r4
 800e7fe:	f005 fe28 	bl	8014452 <strncpy>
			xReturn = pdTRUE;
 800e802:	2601      	movs	r6, #1
 800e804:	e027      	b.n	800e856 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800e806:	4b20      	ldr	r3, [pc, #128]	; (800e888 <prvHelpCommand+0xec>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d026      	beq.n	800e85c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800e80e:	4b1f      	ldr	r3, [pc, #124]	; (800e88c <prvHelpCommand+0xf0>)
 800e810:	781a      	ldrb	r2, [r3, #0]
 800e812:	4b1f      	ldr	r3, [pc, #124]	; (800e890 <prvHelpCommand+0xf4>)
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	429a      	cmp	r2, r3
 800e818:	d927      	bls.n	800e86a <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e81a:	002a      	movs	r2, r5
 800e81c:	3a08      	subs	r2, #8
 800e81e:	4b1a      	ldr	r3, [pc, #104]	; (800e888 <prvHelpCommand+0xec>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6859      	ldr	r1, [r3, #4]
 800e826:	0020      	movs	r0, r4
 800e828:	3008      	adds	r0, #8
 800e82a:	f005 fe12 	bl	8014452 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e82e:	1c60      	adds	r0, r4, #1
 800e830:	4918      	ldr	r1, [pc, #96]	; (800e894 <prvHelpCommand+0xf8>)
 800e832:	f005 fdf5 	bl	8014420 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e836:	2328      	movs	r3, #40	; 0x28
 800e838:	7023      	strb	r3, [r4, #0]
 800e83a:	3301      	adds	r3, #1
 800e83c:	71a3      	strb	r3, [r4, #6]
 800e83e:	3b09      	subs	r3, #9
 800e840:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800e842:	4b11      	ldr	r3, [pc, #68]	; (800e888 <prvHelpCommand+0xec>)
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	6856      	ldr	r6, [r2, #4]
 800e848:	601e      	str	r6, [r3, #0]
		counter++;
 800e84a:	4a10      	ldr	r2, [pc, #64]	; (800e88c <prvHelpCommand+0xf0>)
 800e84c:	7813      	ldrb	r3, [r2, #0]
 800e84e:	3301      	adds	r3, #1
 800e850:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800e852:	1e73      	subs	r3, r6, #1
 800e854:	419e      	sbcs	r6, r3
}
 800e856:	0030      	movs	r0, r6
 800e858:	b003      	add	sp, #12
 800e85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e85c:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <prvHelpCommand+0xec>)
 800e85e:	4a0e      	ldr	r2, [pc, #56]	; (800e898 <prvHelpCommand+0xfc>)
 800e860:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e862:	4b0a      	ldr	r3, [pc, #40]	; (800e88c <prvHelpCommand+0xf0>)
 800e864:	2201      	movs	r2, #1
 800e866:	701a      	strb	r2, [r3, #0]
 800e868:	e7d1      	b.n	800e80e <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e86a:	4b07      	ldr	r3, [pc, #28]	; (800e888 <prvHelpCommand+0xec>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6859      	ldr	r1, [r3, #4]
 800e872:	002a      	movs	r2, r5
 800e874:	0020      	movs	r0, r4
 800e876:	f005 fdec 	bl	8014452 <strncpy>
 800e87a:	e7e2      	b.n	800e842 <prvHelpCommand+0xa6>
 800e87c:	080182a4 	.word	0x080182a4
 800e880:	20001628 	.word	0x20001628
 800e884:	2000006c 	.word	0x2000006c
 800e888:	20001624 	.word	0x20001624
 800e88c:	2000161c 	.word	0x2000161c
 800e890:	200061ec 	.word	0x200061ec
 800e894:	08017628 	.word	0x08017628
 800e898:	200000b0 	.word	0x200000b0

0800e89c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e89c:	0003      	movs	r3, r0
 800e89e:	3308      	adds	r3, #8
 800e8a0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	4252      	negs	r2, r2
 800e8a6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e8a8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e8aa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e8b0:	4770      	bx	lr

0800e8b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e8b6:	4770      	bx	lr

0800e8b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e8b8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e8ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e8bc:	689a      	ldr	r2, [r3, #8]
 800e8be:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e8c0:	689a      	ldr	r2, [r3, #8]
 800e8c2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e8c4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e8c6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e8c8:	6803      	ldr	r3, [r0, #0]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	6003      	str	r3, [r0, #0]
}
 800e8ce:	4770      	bx	lr

0800e8d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e8d0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e8d2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e8d4:	0002      	movs	r2, r0
 800e8d6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e8d8:	1c63      	adds	r3, r4, #1
 800e8da:	d102      	bne.n	800e8e2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e8dc:	6902      	ldr	r2, [r0, #16]
 800e8de:	e004      	b.n	800e8ea <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e8e0:	001a      	movs	r2, r3
 800e8e2:	6853      	ldr	r3, [r2, #4]
 800e8e4:	681d      	ldr	r5, [r3, #0]
 800e8e6:	42a5      	cmp	r5, r4
 800e8e8:	d9fa      	bls.n	800e8e0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e8ea:	6853      	ldr	r3, [r2, #4]
 800e8ec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e8ee:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e8f0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e8f2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e8f4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e8f6:	6803      	ldr	r3, [r0, #0]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	6003      	str	r3, [r0, #0]
}
 800e8fc:	bd30      	pop	{r4, r5, pc}

0800e8fe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e8fe:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e900:	6842      	ldr	r2, [r0, #4]
 800e902:	6881      	ldr	r1, [r0, #8]
 800e904:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e906:	6882      	ldr	r2, [r0, #8]
 800e908:	6841      	ldr	r1, [r0, #4]
 800e90a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e90c:	685a      	ldr	r2, [r3, #4]
 800e90e:	4282      	cmp	r2, r0
 800e910:	d005      	beq.n	800e91e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e912:	2200      	movs	r2, #0
 800e914:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	1e50      	subs	r0, r2, #1
 800e91a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e91c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e91e:	6882      	ldr	r2, [r0, #8]
 800e920:	605a      	str	r2, [r3, #4]
 800e922:	e7f6      	b.n	800e912 <uxListRemove+0x14>

0800e924 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e924:	b570      	push	{r4, r5, r6, lr}
 800e926:	0004      	movs	r4, r0
 800e928:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e92a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e92c:	2a00      	cmp	r2, #0
 800e92e:	d10d      	bne.n	800e94c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800e930:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e938:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e93a:	3301      	adds	r3, #1
 800e93c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e93e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e940:	6860      	ldr	r0, [r4, #4]
 800e942:	f001 f811 	bl	800f968 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e946:	2300      	movs	r3, #0
 800e948:	6063      	str	r3, [r4, #4]
 800e94a:	e7f5      	b.n	800e938 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	d10e      	bne.n	800e96e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e950:	6880      	ldr	r0, [r0, #8]
 800e952:	f004 ff92 	bl	801387a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e956:	68a3      	ldr	r3, [r4, #8]
 800e958:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e95a:	4694      	mov	ip, r2
 800e95c:	4463      	add	r3, ip
 800e95e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e960:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e962:	6862      	ldr	r2, [r4, #4]
 800e964:	4293      	cmp	r3, r2
 800e966:	d3e7      	bcc.n	800e938 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	60a3      	str	r3, [r4, #8]
 800e96c:	e7e4      	b.n	800e938 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e96e:	68c0      	ldr	r0, [r0, #12]
 800e970:	f004 ff83 	bl	801387a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e974:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e976:	425a      	negs	r2, r3
 800e978:	68e3      	ldr	r3, [r4, #12]
 800e97a:	189b      	adds	r3, r3, r2
 800e97c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e97e:	6821      	ldr	r1, [r4, #0]
 800e980:	428b      	cmp	r3, r1
 800e982:	d203      	bcs.n	800e98c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e984:	6863      	ldr	r3, [r4, #4]
 800e986:	469c      	mov	ip, r3
 800e988:	4462      	add	r2, ip
 800e98a:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800e98c:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800e98e:	2d02      	cmp	r5, #2
 800e990:	d1d2      	bne.n	800e938 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e994:	2b00      	cmp	r3, #0
 800e996:	d0cf      	beq.n	800e938 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800e998:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e99a:	3b01      	subs	r3, #1
 800e99c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e99e:	e7cb      	b.n	800e938 <prvCopyDataToQueue+0x14>

0800e9a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e9a4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	d00b      	beq.n	800e9c2 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e9aa:	68c3      	ldr	r3, [r0, #12]
 800e9ac:	189b      	adds	r3, r3, r2
 800e9ae:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e9b0:	6841      	ldr	r1, [r0, #4]
 800e9b2:	428b      	cmp	r3, r1
 800e9b4:	d301      	bcc.n	800e9ba <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e9b6:	6803      	ldr	r3, [r0, #0]
 800e9b8:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e9ba:	68c1      	ldr	r1, [r0, #12]
 800e9bc:	0020      	movs	r0, r4
 800e9be:	f004 ff5c 	bl	801387a <memcpy>
	}
}
 800e9c2:	bd10      	pop	{r4, pc}

0800e9c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e9c4:	b570      	push	{r4, r5, r6, lr}
 800e9c6:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e9c8:	f001 fb8a 	bl	80100e0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e9cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	dd04      	ble.n	800e9dc <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9d2:	0025      	movs	r5, r4
 800e9d4:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d11f      	bne.n	800ea1c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	425b      	negs	r3, r3
 800e9e0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e9e2:	f001 fb89 	bl	80100f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e9e6:	f001 fb7b 	bl	80100e0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e9ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	dd04      	ble.n	800e9fa <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9f0:	0025      	movs	r5, r4
 800e9f2:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d121      	bne.n	800ea3e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	425b      	negs	r3, r3
 800e9fe:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ea00:	f001 fb7a 	bl	80100f8 <vPortExitCritical>
}
 800ea04:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800ea06:	f000 ff5b 	bl	800f8c0 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800ea0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea0c:	3b01      	subs	r3, #1
 800ea0e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ea10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	dde2      	ble.n	800e9dc <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d0df      	beq.n	800e9dc <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea1c:	0028      	movs	r0, r5
 800ea1e:	f000 fedd 	bl	800f7dc <xTaskRemoveFromEventList>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d0f1      	beq.n	800ea0a <prvUnlockQueue+0x46>
 800ea26:	e7ee      	b.n	800ea06 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800ea28:	f000 ff4a 	bl	800f8c0 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800ea2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ea32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	dde0      	ble.n	800e9fa <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d0dd      	beq.n	800e9fa <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea3e:	0028      	movs	r0, r5
 800ea40:	f000 fecc 	bl	800f7dc <xTaskRemoveFromEventList>
 800ea44:	2800      	cmp	r0, #0
 800ea46:	d0f1      	beq.n	800ea2c <prvUnlockQueue+0x68>
 800ea48:	e7ee      	b.n	800ea28 <prvUnlockQueue+0x64>

0800ea4a <xQueueGenericReset>:
{
 800ea4a:	b570      	push	{r4, r5, r6, lr}
 800ea4c:	0004      	movs	r4, r0
 800ea4e:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800ea50:	f001 fb46 	bl	80100e0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ea54:	6822      	ldr	r2, [r4, #0]
 800ea56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ea5a:	434b      	muls	r3, r1
 800ea5c:	18d0      	adds	r0, r2, r3
 800ea5e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ea60:	2000      	movs	r0, #0
 800ea62:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea64:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ea66:	1a5b      	subs	r3, r3, r1
 800ea68:	18d3      	adds	r3, r2, r3
 800ea6a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	425b      	negs	r3, r3
 800ea70:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800ea72:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	d10f      	bne.n	800ea98 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea78:	6923      	ldr	r3, [r4, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d103      	bne.n	800ea86 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800ea7e:	f001 fb3b 	bl	80100f8 <vPortExitCritical>
}
 800ea82:	2001      	movs	r0, #1
 800ea84:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ea86:	0020      	movs	r0, r4
 800ea88:	3010      	adds	r0, #16
 800ea8a:	f000 fea7 	bl	800f7dc <xTaskRemoveFromEventList>
 800ea8e:	2801      	cmp	r0, #1
 800ea90:	d1f5      	bne.n	800ea7e <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800ea92:	f001 fb19 	bl	80100c8 <vPortYield>
 800ea96:	e7f2      	b.n	800ea7e <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ea98:	0020      	movs	r0, r4
 800ea9a:	3010      	adds	r0, #16
 800ea9c:	f7ff fefe 	bl	800e89c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eaa0:	0020      	movs	r0, r4
 800eaa2:	3024      	adds	r0, #36	; 0x24
 800eaa4:	f7ff fefa 	bl	800e89c <vListInitialise>
 800eaa8:	e7e9      	b.n	800ea7e <xQueueGenericReset+0x34>

0800eaaa <xQueueGenericCreate>:
{
 800eaaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaac:	0006      	movs	r6, r0
 800eaae:	000d      	movs	r5, r1
 800eab0:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800eab2:	2900      	cmp	r1, #0
 800eab4:	d009      	beq.n	800eaca <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eab6:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eab8:	3055      	adds	r0, #85	; 0x55
 800eaba:	f001 fb8d 	bl	80101d8 <pvPortMalloc>
 800eabe:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800eac0:	d011      	beq.n	800eae6 <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800eac2:	0003      	movs	r3, r0
 800eac4:	3354      	adds	r3, #84	; 0x54
 800eac6:	6003      	str	r3, [r0, #0]
 800eac8:	e005      	b.n	800ead6 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eaca:	2054      	movs	r0, #84	; 0x54
 800eacc:	f001 fb84 	bl	80101d8 <pvPortMalloc>
 800ead0:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800ead2:	d008      	beq.n	800eae6 <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ead4:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800ead6:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800ead8:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800eada:	2101      	movs	r1, #1
 800eadc:	0020      	movs	r0, r4
 800eade:	f7ff ffb4 	bl	800ea4a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800eae2:	2350      	movs	r3, #80	; 0x50
 800eae4:	54e7      	strb	r7, [r4, r3]
}
 800eae6:	0020      	movs	r0, r4
 800eae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eaea <xQueueCreateCountingSemaphore>:
	{
 800eaea:	b510      	push	{r4, lr}
 800eaec:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800eaee:	2202      	movs	r2, #2
 800eaf0:	2100      	movs	r1, #0
 800eaf2:	f7ff ffda 	bl	800eaaa <xQueueGenericCreate>
		if( xHandle != NULL )
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	d000      	beq.n	800eafc <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800eafa:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800eafc:	bd10      	pop	{r4, pc}

0800eafe <xQueueGenericSend>:
{
 800eafe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb00:	46c6      	mov	lr, r8
 800eb02:	b500      	push	{lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	0004      	movs	r4, r0
 800eb08:	9100      	str	r1, [sp, #0]
 800eb0a:	9201      	str	r2, [sp, #4]
 800eb0c:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eb0e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800eb10:	2300      	movs	r3, #0
 800eb12:	4698      	mov	r8, r3
 800eb14:	e030      	b.n	800eb78 <xQueueGenericSend+0x7a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb16:	003a      	movs	r2, r7
 800eb18:	9900      	ldr	r1, [sp, #0]
 800eb1a:	0020      	movs	r0, r4
 800eb1c:	f7ff ff02 	bl	800e924 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d108      	bne.n	800eb38 <xQueueGenericSend+0x3a>
					else if( xYieldRequired != pdFALSE )
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d10f      	bne.n	800eb4a <xQueueGenericSend+0x4c>
				taskEXIT_CRITICAL();
 800eb2a:	f001 fae5 	bl	80100f8 <vPortExitCritical>
				return pdPASS;
 800eb2e:	2001      	movs	r0, #1
}
 800eb30:	b004      	add	sp, #16
 800eb32:	bc04      	pop	{r2}
 800eb34:	4690      	mov	r8, r2
 800eb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800eb38:	0020      	movs	r0, r4
 800eb3a:	3024      	adds	r0, #36	; 0x24
 800eb3c:	f000 fe4e 	bl	800f7dc <xTaskRemoveFromEventList>
 800eb40:	2801      	cmp	r0, #1
 800eb42:	d1f2      	bne.n	800eb2a <xQueueGenericSend+0x2c>
							queueYIELD_IF_USING_PREEMPTION();
 800eb44:	f001 fac0 	bl	80100c8 <vPortYield>
 800eb48:	e7ef      	b.n	800eb2a <xQueueGenericSend+0x2c>
						queueYIELD_IF_USING_PREEMPTION();
 800eb4a:	f001 fabd 	bl	80100c8 <vPortYield>
 800eb4e:	e7ec      	b.n	800eb2a <xQueueGenericSend+0x2c>
					taskEXIT_CRITICAL();
 800eb50:	f001 fad2 	bl	80100f8 <vPortExitCritical>
					return errQUEUE_FULL;
 800eb54:	2000      	movs	r0, #0
 800eb56:	e7eb      	b.n	800eb30 <xQueueGenericSend+0x32>
					vTaskSetTimeOutState( &xTimeOut );
 800eb58:	a802      	add	r0, sp, #8
 800eb5a:	f000 fe7b 	bl	800f854 <vTaskSetTimeOutState>
 800eb5e:	e018      	b.n	800eb92 <xQueueGenericSend+0x94>
		prvLockQueue( pxQueue );
 800eb60:	4643      	mov	r3, r8
 800eb62:	6463      	str	r3, [r4, #68]	; 0x44
 800eb64:	e01e      	b.n	800eba4 <xQueueGenericSend+0xa6>
 800eb66:	4643      	mov	r3, r8
 800eb68:	64a3      	str	r3, [r4, #72]	; 0x48
 800eb6a:	e01e      	b.n	800ebaa <xQueueGenericSend+0xac>
				prvUnlockQueue( pxQueue );
 800eb6c:	0020      	movs	r0, r4
 800eb6e:	f7ff ff29 	bl	800e9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb72:	f000 fc65 	bl	800f440 <xTaskResumeAll>
 800eb76:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800eb78:	f001 fab2 	bl	80100e0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d3c8      	bcc.n	800eb16 <xQueueGenericSend+0x18>
 800eb84:	2f02      	cmp	r7, #2
 800eb86:	d0c6      	beq.n	800eb16 <xQueueGenericSend+0x18>
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb88:	9b01      	ldr	r3, [sp, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0e0      	beq.n	800eb50 <xQueueGenericSend+0x52>
				else if( xEntryTimeSet == pdFALSE )
 800eb8e:	2d00      	cmp	r5, #0
 800eb90:	d0e2      	beq.n	800eb58 <xQueueGenericSend+0x5a>
		taskEXIT_CRITICAL();
 800eb92:	f001 fab1 	bl	80100f8 <vPortExitCritical>
		vTaskSuspendAll();
 800eb96:	f000 fbaf 	bl	800f2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb9a:	f001 faa1 	bl	80100e0 <vPortEnterCritical>
 800eb9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eba0:	3301      	adds	r3, #1
 800eba2:	d0dd      	beq.n	800eb60 <xQueueGenericSend+0x62>
 800eba4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eba6:	3301      	adds	r3, #1
 800eba8:	d0dd      	beq.n	800eb66 <xQueueGenericSend+0x68>
 800ebaa:	f001 faa5 	bl	80100f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebae:	a901      	add	r1, sp, #4
 800ebb0:	a802      	add	r0, sp, #8
 800ebb2:	f000 fe5b 	bl	800f86c <xTaskCheckForTimeOut>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	d116      	bne.n	800ebe8 <xQueueGenericSend+0xea>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebba:	f001 fa91 	bl	80100e0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ebbe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ebc0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ebc2:	f001 fa99 	bl	80100f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ebc6:	42ae      	cmp	r6, r5
 800ebc8:	d1d0      	bne.n	800eb6c <xQueueGenericSend+0x6e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ebca:	0020      	movs	r0, r4
 800ebcc:	3010      	adds	r0, #16
 800ebce:	9901      	ldr	r1, [sp, #4]
 800ebd0:	f000 fdce 	bl	800f770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebd4:	0020      	movs	r0, r4
 800ebd6:	f7ff fef5 	bl	800e9c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ebda:	f000 fc31 	bl	800f440 <xTaskResumeAll>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d1c9      	bne.n	800eb76 <xQueueGenericSend+0x78>
					portYIELD_WITHIN_API();
 800ebe2:	f001 fa71 	bl	80100c8 <vPortYield>
 800ebe6:	e7c6      	b.n	800eb76 <xQueueGenericSend+0x78>
			prvUnlockQueue( pxQueue );
 800ebe8:	0020      	movs	r0, r4
 800ebea:	f7ff feeb 	bl	800e9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebee:	f000 fc27 	bl	800f440 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	e79c      	b.n	800eb30 <xQueueGenericSend+0x32>

0800ebf6 <xQueueGenericSendFromISR>:
{
 800ebf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf8:	b083      	sub	sp, #12
 800ebfa:	0007      	movs	r7, r0
 800ebfc:	9100      	str	r1, [sp, #0]
 800ebfe:	9201      	str	r2, [sp, #4]
 800ec00:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec02:	f001 fa83 	bl	801010c <ulSetInterruptMaskFromISR>
 800ec06:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d308      	bcc.n	800ec22 <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800ec10:	2400      	movs	r4, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec12:	2d02      	cmp	r5, #2
 800ec14:	d005      	beq.n	800ec22 <xQueueGenericSendFromISR+0x2c>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ec16:	0030      	movs	r0, r6
 800ec18:	f001 fa7d 	bl	8010116 <vClearInterruptMaskFromISR>
}
 800ec1c:	0020      	movs	r0, r4
 800ec1e:	b003      	add	sp, #12
 800ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec22:	002a      	movs	r2, r5
 800ec24:	9900      	ldr	r1, [sp, #0]
 800ec26:	0038      	movs	r0, r7
 800ec28:	f7ff fe7c 	bl	800e924 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ec2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec2e:	3301      	adds	r3, #1
 800ec30:	d004      	beq.n	800ec3c <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800ec32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec34:	3301      	adds	r3, #1
 800ec36:	64bb      	str	r3, [r7, #72]	; 0x48
			xReturn = pdPASS;
 800ec38:	2401      	movs	r4, #1
 800ec3a:	e7ec      	b.n	800ec16 <xQueueGenericSendFromISR+0x20>
 800ec3c:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d0e8      	beq.n	800ec16 <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec44:	0038      	movs	r0, r7
 800ec46:	3024      	adds	r0, #36	; 0x24
 800ec48:	f000 fdc8 	bl	800f7dc <xTaskRemoveFromEventList>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0e2      	beq.n	800ec16 <xQueueGenericSendFromISR+0x20>
							if( pxHigherPriorityTaskWoken != NULL )
 800ec50:	9a01      	ldr	r2, [sp, #4]
 800ec52:	2a00      	cmp	r2, #0
 800ec54:	d002      	beq.n	800ec5c <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec56:	2301      	movs	r3, #1
 800ec58:	6013      	str	r3, [r2, #0]
 800ec5a:	e7dc      	b.n	800ec16 <xQueueGenericSendFromISR+0x20>
			xReturn = pdPASS;
 800ec5c:	2401      	movs	r4, #1
 800ec5e:	e7da      	b.n	800ec16 <xQueueGenericSendFromISR+0x20>

0800ec60 <xQueueGiveFromISR>:
{
 800ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec62:	0004      	movs	r4, r0
 800ec64:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec66:	f001 fa51 	bl	801010c <ulSetInterruptMaskFromISR>
 800ec6a:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ec6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800ec6e:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ec70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d209      	bcs.n	800ec8a <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800ec76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec78:	3301      	adds	r3, #1
 800ec7a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ec7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec7e:	3301      	adds	r3, #1
 800ec80:	d008      	beq.n	800ec94 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800ec82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec84:	3301      	adds	r3, #1
 800ec86:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800ec88:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ec8a:	0030      	movs	r0, r6
 800ec8c:	f001 fa43 	bl	8010116 <vClearInterruptMaskFromISR>
}
 800ec90:	0028      	movs	r0, r5
 800ec92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800ec94:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0f6      	beq.n	800ec8a <xQueueGiveFromISR+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec9c:	0020      	movs	r0, r4
 800ec9e:	3024      	adds	r0, #36	; 0x24
 800eca0:	f000 fd9c 	bl	800f7dc <xTaskRemoveFromEventList>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d0f0      	beq.n	800ec8a <xQueueGiveFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
 800eca8:	2f00      	cmp	r7, #0
 800ecaa:	d002      	beq.n	800ecb2 <xQueueGiveFromISR+0x52>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ecac:	2301      	movs	r3, #1
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	e7eb      	b.n	800ec8a <xQueueGiveFromISR+0x2a>
			xReturn = pdPASS;
 800ecb2:	2501      	movs	r5, #1
 800ecb4:	e7e9      	b.n	800ec8a <xQueueGiveFromISR+0x2a>

0800ecb6 <xQueueGenericReceive>:
{
 800ecb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecb8:	b085      	sub	sp, #20
 800ecba:	0004      	movs	r4, r0
 800ecbc:	9100      	str	r1, [sp, #0]
 800ecbe:	9201      	str	r2, [sp, #4]
 800ecc0:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800ecc2:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800ecc4:	2600      	movs	r6, #0
 800ecc6:	e048      	b.n	800ed5a <xQueueGenericReceive+0xa4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800ecc8:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ecca:	9900      	ldr	r1, [sp, #0]
 800eccc:	0020      	movs	r0, r4
 800ecce:	f7ff fe67 	bl	800e9a0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800ecd2:	2d00      	cmp	r5, #0
 800ecd4:	d11a      	bne.n	800ed0c <xQueueGenericReceive+0x56>
					--( pxQueue->uxMessagesWaiting );
 800ecd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d007      	beq.n	800ecf2 <xQueueGenericReceive+0x3c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ece2:	6923      	ldr	r3, [r4, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d108      	bne.n	800ecfa <xQueueGenericReceive+0x44>
				taskEXIT_CRITICAL();
 800ece8:	f001 fa06 	bl	80100f8 <vPortExitCritical>
				return pdPASS;
 800ecec:	2001      	movs	r0, #1
}
 800ecee:	b005      	add	sp, #20
 800ecf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ecf2:	f000 ff21 	bl	800fb38 <pvTaskIncrementMutexHeldCount>
 800ecf6:	6060      	str	r0, [r4, #4]
 800ecf8:	e7f3      	b.n	800ece2 <xQueueGenericReceive+0x2c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800ecfa:	0020      	movs	r0, r4
 800ecfc:	3010      	adds	r0, #16
 800ecfe:	f000 fd6d 	bl	800f7dc <xTaskRemoveFromEventList>
 800ed02:	2801      	cmp	r0, #1
 800ed04:	d1f0      	bne.n	800ece8 <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800ed06:	f001 f9df 	bl	80100c8 <vPortYield>
 800ed0a:	e7ed      	b.n	800ece8 <xQueueGenericReceive+0x32>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800ed0c:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0e9      	beq.n	800ece8 <xQueueGenericReceive+0x32>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed14:	0020      	movs	r0, r4
 800ed16:	3024      	adds	r0, #36	; 0x24
 800ed18:	f000 fd60 	bl	800f7dc <xTaskRemoveFromEventList>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d0e3      	beq.n	800ece8 <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800ed20:	f001 f9d2 	bl	80100c8 <vPortYield>
 800ed24:	e7e0      	b.n	800ece8 <xQueueGenericReceive+0x32>
					taskEXIT_CRITICAL();
 800ed26:	f001 f9e7 	bl	80100f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	e7df      	b.n	800ecee <xQueueGenericReceive+0x38>
					vTaskSetTimeOutState( &xTimeOut );
 800ed2e:	a802      	add	r0, sp, #8
 800ed30:	f000 fd90 	bl	800f854 <vTaskSetTimeOutState>
 800ed34:	e01b      	b.n	800ed6e <xQueueGenericReceive+0xb8>
		prvLockQueue( pxQueue );
 800ed36:	6466      	str	r6, [r4, #68]	; 0x44
 800ed38:	e022      	b.n	800ed80 <xQueueGenericReceive+0xca>
 800ed3a:	64a6      	str	r6, [r4, #72]	; 0x48
 800ed3c:	e023      	b.n	800ed86 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800ed3e:	f001 f9cf 	bl	80100e0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ed42:	6860      	ldr	r0, [r4, #4]
 800ed44:	f000 fdd2 	bl	800f8ec <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ed48:	f001 f9d6 	bl	80100f8 <vPortExitCritical>
 800ed4c:	e02d      	b.n	800edaa <xQueueGenericReceive+0xf4>
				prvUnlockQueue( pxQueue );
 800ed4e:	0020      	movs	r0, r4
 800ed50:	f7ff fe38 	bl	800e9c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ed54:	f000 fb74 	bl	800f440 <xTaskResumeAll>
 800ed58:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800ed5a:	f001 f9c1 	bl	80100e0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1b1      	bne.n	800ecc8 <xQueueGenericReceive+0x12>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed64:	9b01      	ldr	r3, [sp, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d0dd      	beq.n	800ed26 <xQueueGenericReceive+0x70>
				else if( xEntryTimeSet == pdFALSE )
 800ed6a:	2f00      	cmp	r7, #0
 800ed6c:	d0df      	beq.n	800ed2e <xQueueGenericReceive+0x78>
		taskEXIT_CRITICAL();
 800ed6e:	f001 f9c3 	bl	80100f8 <vPortExitCritical>
		vTaskSuspendAll();
 800ed72:	f000 fac1 	bl	800f2f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed76:	f001 f9b3 	bl	80100e0 <vPortEnterCritical>
 800ed7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	d0da      	beq.n	800ed36 <xQueueGenericReceive+0x80>
 800ed80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ed82:	3301      	adds	r3, #1
 800ed84:	d0d9      	beq.n	800ed3a <xQueueGenericReceive+0x84>
 800ed86:	f001 f9b7 	bl	80100f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ed8a:	a901      	add	r1, sp, #4
 800ed8c:	a802      	add	r0, sp, #8
 800ed8e:	f000 fd6d 	bl	800f86c <xTaskCheckForTimeOut>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d118      	bne.n	800edc8 <xQueueGenericReceive+0x112>
	taskENTER_CRITICAL();
 800ed96:	f001 f9a3 	bl	80100e0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ed9a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800ed9c:	f001 f9ac 	bl	80100f8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eda0:	2f00      	cmp	r7, #0
 800eda2:	d1d4      	bne.n	800ed4e <xQueueGenericReceive+0x98>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d0c9      	beq.n	800ed3e <xQueueGenericReceive+0x88>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edaa:	0020      	movs	r0, r4
 800edac:	3024      	adds	r0, #36	; 0x24
 800edae:	9901      	ldr	r1, [sp, #4]
 800edb0:	f000 fcde 	bl	800f770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800edb4:	0020      	movs	r0, r4
 800edb6:	f7ff fe05 	bl	800e9c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800edba:	f000 fb41 	bl	800f440 <xTaskResumeAll>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	d1ca      	bne.n	800ed58 <xQueueGenericReceive+0xa2>
					portYIELD_WITHIN_API();
 800edc2:	f001 f981 	bl	80100c8 <vPortYield>
 800edc6:	e7c7      	b.n	800ed58 <xQueueGenericReceive+0xa2>
			prvUnlockQueue( pxQueue );
 800edc8:	0020      	movs	r0, r4
 800edca:	f7ff fdfb 	bl	800e9c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800edce:	f000 fb37 	bl	800f440 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800edd2:	2000      	movs	r0, #0
 800edd4:	e78b      	b.n	800ecee <xQueueGenericReceive+0x38>

0800edd6 <xQueueReceiveFromISR>:
{
 800edd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edd8:	b083      	sub	sp, #12
 800edda:	0006      	movs	r6, r0
 800eddc:	9101      	str	r1, [sp, #4]
 800edde:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ede0:	f001 f994 	bl	801010c <ulSetInterruptMaskFromISR>
 800ede4:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ede6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			xReturn = pdFAIL;
 800ede8:	2400      	movs	r4, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edea:	2b00      	cmp	r3, #0
 800edec:	d105      	bne.n	800edfa <xQueueReceiveFromISR+0x24>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800edee:	0028      	movs	r0, r5
 800edf0:	f001 f991 	bl	8010116 <vClearInterruptMaskFromISR>
}
 800edf4:	0020      	movs	r0, r4
 800edf6:	b003      	add	sp, #12
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800edfa:	9901      	ldr	r1, [sp, #4]
 800edfc:	0030      	movs	r0, r6
 800edfe:	f7ff fdcf 	bl	800e9a0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ee02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ee04:	3b01      	subs	r3, #1
 800ee06:	63b3      	str	r3, [r6, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ee08:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	d004      	beq.n	800ee18 <xQueueReceiveFromISR+0x42>
				++( pxQueue->xRxLock );
 800ee0e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ee10:	3301      	adds	r3, #1
 800ee12:	6473      	str	r3, [r6, #68]	; 0x44
			xReturn = pdPASS;
 800ee14:	2401      	movs	r4, #1
 800ee16:	e7ea      	b.n	800edee <xQueueReceiveFromISR+0x18>
 800ee18:	3401      	adds	r4, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee1a:	6933      	ldr	r3, [r6, #16]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d0e6      	beq.n	800edee <xQueueReceiveFromISR+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee20:	0030      	movs	r0, r6
 800ee22:	3010      	adds	r0, #16
 800ee24:	f000 fcda 	bl	800f7dc <xTaskRemoveFromEventList>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d0e0      	beq.n	800edee <xQueueReceiveFromISR+0x18>
						if( pxHigherPriorityTaskWoken != NULL )
 800ee2c:	2f00      	cmp	r7, #0
 800ee2e:	d002      	beq.n	800ee36 <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ee30:	2301      	movs	r3, #1
 800ee32:	603b      	str	r3, [r7, #0]
 800ee34:	e7db      	b.n	800edee <xQueueReceiveFromISR+0x18>
			xReturn = pdPASS;
 800ee36:	2401      	movs	r4, #1
 800ee38:	e7d9      	b.n	800edee <xQueueReceiveFromISR+0x18>
	...

0800ee3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee3c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee3e:	4b0a      	ldr	r3, [pc, #40]	; (800ee68 <vQueueAddToRegistry+0x2c>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d009      	beq.n	800ee5a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee46:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee48:	4c07      	ldr	r4, [pc, #28]	; (800ee68 <vQueueAddToRegistry+0x2c>)
 800ee4a:	00da      	lsls	r2, r3, #3
 800ee4c:	58a2      	ldr	r2, [r4, r2]
 800ee4e:	2a00      	cmp	r2, #0
 800ee50:	d004      	beq.n	800ee5c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee52:	3301      	adds	r3, #1
 800ee54:	2b08      	cmp	r3, #8
 800ee56:	d1f8      	bne.n	800ee4a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee58:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee5a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ee5c:	4a02      	ldr	r2, [pc, #8]	; (800ee68 <vQueueAddToRegistry+0x2c>)
 800ee5e:	00db      	lsls	r3, r3, #3
 800ee60:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ee62:	18d3      	adds	r3, r2, r3
 800ee64:	6058      	str	r0, [r3, #4]
				break;
 800ee66:	e7f7      	b.n	800ee58 <vQueueAddToRegistry+0x1c>
 800ee68:	2000676c 	.word	0x2000676c

0800ee6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ee6c:	b570      	push	{r4, r5, r6, lr}
 800ee6e:	0004      	movs	r4, r0
 800ee70:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee72:	f001 f935 	bl	80100e0 <vPortEnterCritical>
 800ee76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ee78:	3301      	adds	r3, #1
 800ee7a:	d00b      	beq.n	800ee94 <vQueueWaitForMessageRestricted+0x28>
 800ee7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ee7e:	3301      	adds	r3, #1
 800ee80:	d00b      	beq.n	800ee9a <vQueueWaitForMessageRestricted+0x2e>
 800ee82:	f001 f939 	bl	80100f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ee86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d009      	beq.n	800eea0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ee8c:	0020      	movs	r0, r4
 800ee8e:	f7ff fd99 	bl	800e9c4 <prvUnlockQueue>
	}
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ee94:	2300      	movs	r3, #0
 800ee96:	6463      	str	r3, [r4, #68]	; 0x44
 800ee98:	e7f0      	b.n	800ee7c <vQueueWaitForMessageRestricted+0x10>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	64a3      	str	r3, [r4, #72]	; 0x48
 800ee9e:	e7f0      	b.n	800ee82 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eea0:	0020      	movs	r0, r4
 800eea2:	3024      	adds	r0, #36	; 0x24
 800eea4:	0029      	movs	r1, r5
 800eea6:	f000 fc83 	bl	800f7b0 <vTaskPlaceOnEventListRestricted>
 800eeaa:	e7ef      	b.n	800ee8c <vQueueWaitForMessageRestricted+0x20>

0800eeac <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeae:	46d6      	mov	lr, sl
 800eeb0:	464f      	mov	r7, r9
 800eeb2:	4646      	mov	r6, r8
 800eeb4:	b5c0      	push	{r6, r7, lr}
 800eeb6:	0006      	movs	r6, r0
 800eeb8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800eeba:	6808      	ldr	r0, [r1, #0]
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d044      	beq.n	800ef4a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800eec0:	684b      	ldr	r3, [r1, #4]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	604b      	str	r3, [r1, #4]
 800eec6:	2208      	movs	r2, #8
 800eec8:	4690      	mov	r8, r2
 800eeca:	4488      	add	r8, r1
 800eecc:	4543      	cmp	r3, r8
 800eece:	d006      	beq.n	800eede <prvListTaskWithinSingleList+0x32>
 800eed0:	684b      	ldr	r3, [r1, #4]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800eed6:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800eed8:	2302      	movs	r3, #2
 800eeda:	469a      	mov	sl, r3
 800eedc:	e018      	b.n	800ef10 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800eede:	68cb      	ldr	r3, [r1, #12]
 800eee0:	604b      	str	r3, [r1, #4]
 800eee2:	e7f5      	b.n	800eed0 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800eee4:	68cb      	ldr	r3, [r1, #12]
 800eee6:	604b      	str	r3, [r1, #4]
 800eee8:	e017      	b.n	800ef1a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800eeea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800eeec:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800eeee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800eef0:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800eef2:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eef4:	783b      	ldrb	r3, [r7, #0]
 800eef6:	2ba5      	cmp	r3, #165	; 0xa5
 800eef8:	d125      	bne.n	800ef46 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800eefa:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800eefc:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eefe:	5cfc      	ldrb	r4, [r7, r3]
 800ef00:	2ca5      	cmp	r4, #165	; 0xa5
 800ef02:	d0fb      	beq.n	800eefc <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ef04:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800ef06:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800ef08:	3001      	adds	r0, #1
 800ef0a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800ef0c:	45a9      	cmp	r9, r5
 800ef0e:	d01c      	beq.n	800ef4a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ef10:	684b      	ldr	r3, [r1, #4]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	604b      	str	r3, [r1, #4]
 800ef16:	4598      	cmp	r8, r3
 800ef18:	d0e4      	beq.n	800eee4 <prvListTaskWithinSingleList+0x38>
 800ef1a:	684b      	ldr	r3, [r1, #4]
 800ef1c:	68dd      	ldr	r5, [r3, #12]
 800ef1e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ef20:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ef22:	002b      	movs	r3, r5
 800ef24:	3334      	adds	r3, #52	; 0x34
 800ef26:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ef28:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ef2a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ef2c:	4663      	mov	r3, ip
 800ef2e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ef30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ef32:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800ef34:	4663      	mov	r3, ip
 800ef36:	2b03      	cmp	r3, #3
 800ef38:	d1d7      	bne.n	800eeea <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ef3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d0d4      	beq.n	800eeea <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ef40:	4653      	mov	r3, sl
 800ef42:	7333      	strb	r3, [r6, #12]
 800ef44:	e7d1      	b.n	800eeea <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800ef46:	2300      	movs	r3, #0
 800ef48:	e7dc      	b.n	800ef04 <prvListTaskWithinSingleList+0x58>
	}
 800ef4a:	bc1c      	pop	{r2, r3, r4}
 800ef4c:	4690      	mov	r8, r2
 800ef4e:	4699      	mov	r9, r3
 800ef50:	46a2      	mov	sl, r4
 800ef52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef54 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef54:	4b08      	ldr	r3, [pc, #32]	; (800ef78 <prvResetNextTaskUnblockTime+0x24>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d007      	beq.n	800ef6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ef5e:	4b06      	ldr	r3, [pc, #24]	; (800ef78 <prvResetNextTaskUnblockTime+0x24>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	685a      	ldr	r2, [r3, #4]
 800ef68:	4b04      	ldr	r3, [pc, #16]	; (800ef7c <prvResetNextTaskUnblockTime+0x28>)
 800ef6a:	601a      	str	r2, [r3, #0]
	}
}
 800ef6c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef6e:	4b03      	ldr	r3, [pc, #12]	; (800ef7c <prvResetNextTaskUnblockTime+0x28>)
 800ef70:	2201      	movs	r2, #1
 800ef72:	4252      	negs	r2, r2
 800ef74:	601a      	str	r2, [r3, #0]
 800ef76:	e7f9      	b.n	800ef6c <prvResetNextTaskUnblockTime+0x18>
 800ef78:	20001630 	.word	0x20001630
 800ef7c:	200000b8 	.word	0x200000b8

0800ef80 <prvAddCurrentTaskToDelayedList>:
{
 800ef80:	b510      	push	{r4, lr}
 800ef82:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800ef84:	4b0e      	ldr	r3, [pc, #56]	; (800efc0 <prvAddCurrentTaskToDelayedList+0x40>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800ef8a:	4b0e      	ldr	r3, [pc, #56]	; (800efc4 <prvAddCurrentTaskToDelayedList+0x44>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4283      	cmp	r3, r0
 800ef90:	d80d      	bhi.n	800efae <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ef92:	4b0d      	ldr	r3, [pc, #52]	; (800efc8 <prvAddCurrentTaskToDelayedList+0x48>)
 800ef94:	6818      	ldr	r0, [r3, #0]
 800ef96:	4b0a      	ldr	r3, [pc, #40]	; (800efc0 <prvAddCurrentTaskToDelayedList+0x40>)
 800ef98:	6819      	ldr	r1, [r3, #0]
 800ef9a:	3104      	adds	r1, #4
 800ef9c:	f7ff fc98 	bl	800e8d0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800efa0:	4b0a      	ldr	r3, [pc, #40]	; (800efcc <prvAddCurrentTaskToDelayedList+0x4c>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	42a3      	cmp	r3, r4
 800efa6:	d909      	bls.n	800efbc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800efa8:	4b08      	ldr	r3, [pc, #32]	; (800efcc <prvAddCurrentTaskToDelayedList+0x4c>)
 800efaa:	601c      	str	r4, [r3, #0]
}
 800efac:	e006      	b.n	800efbc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800efae:	4b08      	ldr	r3, [pc, #32]	; (800efd0 <prvAddCurrentTaskToDelayedList+0x50>)
 800efb0:	6818      	ldr	r0, [r3, #0]
 800efb2:	4b03      	ldr	r3, [pc, #12]	; (800efc0 <prvAddCurrentTaskToDelayedList+0x40>)
 800efb4:	6819      	ldr	r1, [r3, #0]
 800efb6:	3104      	adds	r1, #4
 800efb8:	f7ff fc8a 	bl	800e8d0 <vListInsert>
}
 800efbc:	bd10      	pop	{r4, pc}
 800efbe:	46c0      	nop			; (mov r8, r8)
 800efc0:	2000162c 	.word	0x2000162c
 800efc4:	2000174c 	.word	0x2000174c
 800efc8:	20001630 	.word	0x20001630
 800efcc:	200000b8 	.word	0x200000b8
 800efd0:	20001634 	.word	0x20001634

0800efd4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800efd4:	b510      	push	{r4, lr}
 800efd6:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800efd8:	f005 fa22 	bl	8014420 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800efdc:	0020      	movs	r0, r4
 800efde:	f7f1 f89b 	bl	8000118 <strlen>
 800efe2:	0003      	movs	r3, r0
 800efe4:	280b      	cmp	r0, #11
 800efe6:	dc08      	bgt.n	800effa <prvWriteNameToBuffer+0x26>
 800efe8:	1820      	adds	r0, r4, r0
 800efea:	0022      	movs	r2, r4
 800efec:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800efee:	2320      	movs	r3, #32
 800eff0:	7003      	strb	r3, [r0, #0]
 800eff2:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800eff4:	4290      	cmp	r0, r2
 800eff6:	d1fb      	bne.n	800eff0 <prvWriteNameToBuffer+0x1c>
 800eff8:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800effa:	18e0      	adds	r0, r4, r3
 800effc:	2300      	movs	r3, #0
 800effe:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f000:	bd10      	pop	{r4, pc}
	...

0800f004 <xTaskGenericCreate>:
{
 800f004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f006:	46c6      	mov	lr, r8
 800f008:	b500      	push	{lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	9000      	str	r0, [sp, #0]
 800f00e:	000c      	movs	r4, r1
 800f010:	0015      	movs	r5, r2
 800f012:	9301      	str	r3, [sp, #4]
 800f014:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f016:	2f00      	cmp	r7, #0
 800f018:	d064      	beq.n	800f0e4 <xTaskGenericCreate+0xe0>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f01a:	2060      	movs	r0, #96	; 0x60
 800f01c:	f001 f8dc 	bl	80101d8 <pvPortMalloc>
 800f020:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800f022:	d067      	beq.n	800f0f4 <xTaskGenericCreate+0xf0>
				pxNewTCB->pxStack = pxStack;
 800f024:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f026:	00aa      	lsls	r2, r5, #2
 800f028:	21a5      	movs	r1, #165	; 0xa5
 800f02a:	0038      	movs	r0, r7
 800f02c:	f004 fc2e 	bl	801388c <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f030:	4b5a      	ldr	r3, [pc, #360]	; (800f19c <xTaskGenericCreate+0x198>)
 800f032:	18eb      	adds	r3, r5, r3
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800f038:	4694      	mov	ip, r2
 800f03a:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f03c:	2207      	movs	r2, #7
 800f03e:	4393      	bics	r3, r2
 800f040:	4698      	mov	r8, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f042:	7822      	ldrb	r2, [r4, #0]
 800f044:	2334      	movs	r3, #52	; 0x34
 800f046:	54f2      	strb	r2, [r6, r3]
		if( pcName[ x ] == 0x00 )
 800f048:	7823      	ldrb	r3, [r4, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00d      	beq.n	800f06a <xTaskGenericCreate+0x66>
 800f04e:	1c61      	adds	r1, r4, #1
 800f050:	0033      	movs	r3, r6
 800f052:	3335      	adds	r3, #53	; 0x35
 800f054:	0030      	movs	r0, r6
 800f056:	3041      	adds	r0, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f058:	780a      	ldrb	r2, [r1, #0]
 800f05a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800f05c:	780a      	ldrb	r2, [r1, #0]
 800f05e:	2a00      	cmp	r2, #0
 800f060:	d003      	beq.n	800f06a <xTaskGenericCreate+0x66>
 800f062:	3101      	adds	r1, #1
 800f064:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f066:	4283      	cmp	r3, r0
 800f068:	d1f6      	bne.n	800f058 <xTaskGenericCreate+0x54>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f06a:	2340      	movs	r3, #64	; 0x40
 800f06c:	2200      	movs	r2, #0
 800f06e:	54f2      	strb	r2, [r6, r3]
 800f070:	9d08      	ldr	r5, [sp, #32]
 800f072:	2d06      	cmp	r5, #6
 800f074:	d900      	bls.n	800f078 <xTaskGenericCreate+0x74>
 800f076:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800f078:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f07a:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f07c:	2400      	movs	r4, #0
 800f07e:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f080:	1d37      	adds	r7, r6, #4
 800f082:	0038      	movs	r0, r7
 800f084:	f7ff fc15 	bl	800e8b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f088:	0030      	movs	r0, r6
 800f08a:	3018      	adds	r0, #24
 800f08c:	f7ff fc11 	bl	800e8b2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f090:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f092:	2307      	movs	r3, #7
 800f094:	1b5b      	subs	r3, r3, r5
 800f096:	61b3      	str	r3, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f098:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f09a:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f09c:	65b4      	str	r4, [r6, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f09e:	235c      	movs	r3, #92	; 0x5c
 800f0a0:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f0a2:	9a01      	ldr	r2, [sp, #4]
 800f0a4:	9900      	ldr	r1, [sp, #0]
 800f0a6:	4640      	mov	r0, r8
 800f0a8:	f000 ffd2 	bl	8010050 <pxPortInitialiseStack>
 800f0ac:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d000      	beq.n	800f0b6 <xTaskGenericCreate+0xb2>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f0b4:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800f0b6:	f001 f813 	bl	80100e0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f0ba:	4a39      	ldr	r2, [pc, #228]	; (800f1a0 <xTaskGenericCreate+0x19c>)
 800f0bc:	6813      	ldr	r3, [r2, #0]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f0c2:	4b38      	ldr	r3, [pc, #224]	; (800f1a4 <xTaskGenericCreate+0x1a0>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d01a      	beq.n	800f100 <xTaskGenericCreate+0xfc>
				if( xSchedulerRunning == pdFALSE )
 800f0ca:	4b37      	ldr	r3, [pc, #220]	; (800f1a8 <xTaskGenericCreate+0x1a4>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d11b      	bne.n	800f10a <xTaskGenericCreate+0x106>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f0d2:	4b34      	ldr	r3, [pc, #208]	; (800f1a4 <xTaskGenericCreate+0x1a0>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d8:	9a08      	ldr	r2, [sp, #32]
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d815      	bhi.n	800f10a <xTaskGenericCreate+0x106>
						pxCurrentTCB = pxNewTCB;
 800f0de:	4b31      	ldr	r3, [pc, #196]	; (800f1a4 <xTaskGenericCreate+0x1a0>)
 800f0e0:	601e      	str	r6, [r3, #0]
 800f0e2:	e012      	b.n	800f10a <xTaskGenericCreate+0x106>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0e4:	0090      	lsls	r0, r2, #2
 800f0e6:	f001 f877 	bl	80101d8 <pvPortMalloc>
 800f0ea:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800f0ec:	d195      	bne.n	800f01a <xTaskGenericCreate+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0ee:	2001      	movs	r0, #1
 800f0f0:	4240      	negs	r0, r0
 800f0f2:	e02b      	b.n	800f14c <xTaskGenericCreate+0x148>
				vPortFree( pxStack );
 800f0f4:	0038      	movs	r0, r7
 800f0f6:	f001 f8fd 	bl	80102f4 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0fa:	2001      	movs	r0, #1
 800f0fc:	4240      	negs	r0, r0
 800f0fe:	e025      	b.n	800f14c <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
 800f100:	4b28      	ldr	r3, [pc, #160]	; (800f1a4 <xTaskGenericCreate+0x1a0>)
 800f102:	601e      	str	r6, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f104:	6813      	ldr	r3, [r2, #0]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d024      	beq.n	800f154 <xTaskGenericCreate+0x150>
			uxTaskNumber++;
 800f10a:	4a28      	ldr	r2, [pc, #160]	; (800f1ac <xTaskGenericCreate+0x1a8>)
 800f10c:	6813      	ldr	r3, [r2, #0]
 800f10e:	3301      	adds	r3, #1
 800f110:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f112:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f114:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f116:	4a26      	ldr	r2, [pc, #152]	; (800f1b0 <xTaskGenericCreate+0x1ac>)
 800f118:	6812      	ldr	r2, [r2, #0]
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d901      	bls.n	800f122 <xTaskGenericCreate+0x11e>
 800f11e:	4a24      	ldr	r2, [pc, #144]	; (800f1b0 <xTaskGenericCreate+0x1ac>)
 800f120:	6013      	str	r3, [r2, #0]
 800f122:	0098      	lsls	r0, r3, #2
 800f124:	18c0      	adds	r0, r0, r3
 800f126:	0080      	lsls	r0, r0, #2
 800f128:	4b22      	ldr	r3, [pc, #136]	; (800f1b4 <xTaskGenericCreate+0x1b0>)
 800f12a:	18c0      	adds	r0, r0, r3
 800f12c:	0039      	movs	r1, r7
 800f12e:	f7ff fbc3 	bl	800e8b8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f132:	f000 ffe1 	bl	80100f8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f136:	4b1c      	ldr	r3, [pc, #112]	; (800f1a8 <xTaskGenericCreate+0x1a4>)
 800f138:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f13a:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d005      	beq.n	800f14c <xTaskGenericCreate+0x148>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f140:	4b18      	ldr	r3, [pc, #96]	; (800f1a4 <xTaskGenericCreate+0x1a0>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f146:	9a08      	ldr	r2, [sp, #32]
 800f148:	4293      	cmp	r3, r2
 800f14a:	d322      	bcc.n	800f192 <xTaskGenericCreate+0x18e>
}
 800f14c:	b002      	add	sp, #8
 800f14e:	bc04      	pop	{r2}
 800f150:	4690      	mov	r8, r2
 800f152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f154:	4c17      	ldr	r4, [pc, #92]	; (800f1b4 <xTaskGenericCreate+0x1b0>)
 800f156:	0025      	movs	r5, r4
 800f158:	358c      	adds	r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f15a:	0020      	movs	r0, r4
 800f15c:	f7ff fb9e 	bl	800e89c <vListInitialise>
 800f160:	3414      	adds	r4, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f162:	42ac      	cmp	r4, r5
 800f164:	d1f9      	bne.n	800f15a <xTaskGenericCreate+0x156>
	vListInitialise( &xDelayedTaskList1 );
 800f166:	4d14      	ldr	r5, [pc, #80]	; (800f1b8 <xTaskGenericCreate+0x1b4>)
 800f168:	0028      	movs	r0, r5
 800f16a:	f7ff fb97 	bl	800e89c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f16e:	4c13      	ldr	r4, [pc, #76]	; (800f1bc <xTaskGenericCreate+0x1b8>)
 800f170:	0020      	movs	r0, r4
 800f172:	f7ff fb93 	bl	800e89c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f176:	4812      	ldr	r0, [pc, #72]	; (800f1c0 <xTaskGenericCreate+0x1bc>)
 800f178:	f7ff fb90 	bl	800e89c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f17c:	4811      	ldr	r0, [pc, #68]	; (800f1c4 <xTaskGenericCreate+0x1c0>)
 800f17e:	f7ff fb8d 	bl	800e89c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f182:	4811      	ldr	r0, [pc, #68]	; (800f1c8 <xTaskGenericCreate+0x1c4>)
 800f184:	f7ff fb8a 	bl	800e89c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f188:	4b10      	ldr	r3, [pc, #64]	; (800f1cc <xTaskGenericCreate+0x1c8>)
 800f18a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f18c:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <xTaskGenericCreate+0x1cc>)
 800f18e:	601c      	str	r4, [r3, #0]
 800f190:	e7bb      	b.n	800f10a <xTaskGenericCreate+0x106>
				taskYIELD_IF_USING_PREEMPTION();
 800f192:	f000 ff99 	bl	80100c8 <vPortYield>
			xReturn = pdPASS;
 800f196:	2001      	movs	r0, #1
 800f198:	e7d8      	b.n	800f14c <xTaskGenericCreate+0x148>
 800f19a:	46c0      	nop			; (mov r8, r8)
 800f19c:	3fffffff 	.word	0x3fffffff
 800f1a0:	200016c8 	.word	0x200016c8
 800f1a4:	2000162c 	.word	0x2000162c
 800f1a8:	20001720 	.word	0x20001720
 800f1ac:	200016d4 	.word	0x200016d4
 800f1b0:	200016dc 	.word	0x200016dc
 800f1b4:	20001638 	.word	0x20001638
 800f1b8:	200016e0 	.word	0x200016e0
 800f1bc:	200016f4 	.word	0x200016f4
 800f1c0:	2000170c 	.word	0x2000170c
 800f1c4:	20001738 	.word	0x20001738
 800f1c8:	20001724 	.word	0x20001724
 800f1cc:	20001630 	.word	0x20001630
 800f1d0:	20001634 	.word	0x20001634

0800f1d4 <uxTaskPriorityGet>:
	{
 800f1d4:	b510      	push	{r4, lr}
 800f1d6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f1d8:	f000 ff82 	bl	80100e0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f1dc:	2c00      	cmp	r4, #0
 800f1de:	d004      	beq.n	800f1ea <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f1e0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f1e2:	f000 ff89 	bl	80100f8 <vPortExitCritical>
	}
 800f1e6:	0020      	movs	r0, r4
 800f1e8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f1ea:	4b01      	ldr	r3, [pc, #4]	; (800f1f0 <uxTaskPriorityGet+0x1c>)
 800f1ec:	681c      	ldr	r4, [r3, #0]
 800f1ee:	e7f7      	b.n	800f1e0 <uxTaskPriorityGet+0xc>
 800f1f0:	2000162c 	.word	0x2000162c

0800f1f4 <vTaskPrioritySet>:
	{
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	0004      	movs	r4, r0
 800f1f8:	000d      	movs	r5, r1
 800f1fa:	2906      	cmp	r1, #6
 800f1fc:	d900      	bls.n	800f200 <vTaskPrioritySet+0xc>
 800f1fe:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800f200:	f000 ff6e 	bl	80100e0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f204:	2c00      	cmp	r4, #0
 800f206:	d00e      	beq.n	800f226 <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f208:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f20a:	42aa      	cmp	r2, r5
 800f20c:	d027      	beq.n	800f25e <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800f20e:	d20d      	bcs.n	800f22c <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800f210:	4b22      	ldr	r3, [pc, #136]	; (800f29c <vTaskPrioritySet+0xa8>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	42a3      	cmp	r3, r4
 800f216:	d025      	beq.n	800f264 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f218:	4b20      	ldr	r3, [pc, #128]	; (800f29c <vTaskPrioritySet+0xa8>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f21e:	2600      	movs	r6, #0
 800f220:	429d      	cmp	r5, r3
 800f222:	4176      	adcs	r6, r6
 800f224:	e007      	b.n	800f236 <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f226:	4b1d      	ldr	r3, [pc, #116]	; (800f29c <vTaskPrioritySet+0xa8>)
 800f228:	681c      	ldr	r4, [r3, #0]
 800f22a:	e7ed      	b.n	800f208 <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800f22c:	4b1b      	ldr	r3, [pc, #108]	; (800f29c <vTaskPrioritySet+0xa8>)
 800f22e:	681e      	ldr	r6, [r3, #0]
 800f230:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f232:	4273      	negs	r3, r6
 800f234:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f236:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f238:	428a      	cmp	r2, r1
 800f23a:	d015      	beq.n	800f268 <vTaskPrioritySet+0x74>
					pxTCB->uxBasePriority = uxNewPriority;
 800f23c:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f23e:	69a3      	ldr	r3, [r4, #24]
 800f240:	2b00      	cmp	r3, #0
 800f242:	db02      	blt.n	800f24a <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f244:	2307      	movs	r3, #7
 800f246:	1b5d      	subs	r5, r3, r5
 800f248:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f24a:	008b      	lsls	r3, r1, #2
 800f24c:	185b      	adds	r3, r3, r1
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4a13      	ldr	r2, [pc, #76]	; (800f2a0 <vTaskPrioritySet+0xac>)
 800f252:	189b      	adds	r3, r3, r2
 800f254:	6962      	ldr	r2, [r4, #20]
 800f256:	429a      	cmp	r2, r3
 800f258:	d008      	beq.n	800f26c <vTaskPrioritySet+0x78>
				if( xYieldRequired == pdTRUE )
 800f25a:	2e01      	cmp	r6, #1
 800f25c:	d01a      	beq.n	800f294 <vTaskPrioritySet+0xa0>
		taskEXIT_CRITICAL();
 800f25e:	f000 ff4b 	bl	80100f8 <vPortExitCritical>
	}
 800f262:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f264:	2600      	movs	r6, #0
 800f266:	e7e6      	b.n	800f236 <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800f268:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f26a:	e7e7      	b.n	800f23c <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f26c:	1d25      	adds	r5, r4, #4
 800f26e:	0028      	movs	r0, r5
 800f270:	f7ff fb45 	bl	800e8fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f274:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f276:	4a0b      	ldr	r2, [pc, #44]	; (800f2a4 <vTaskPrioritySet+0xb0>)
 800f278:	6812      	ldr	r2, [r2, #0]
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d901      	bls.n	800f282 <vTaskPrioritySet+0x8e>
 800f27e:	4a09      	ldr	r2, [pc, #36]	; (800f2a4 <vTaskPrioritySet+0xb0>)
 800f280:	6013      	str	r3, [r2, #0]
 800f282:	0098      	lsls	r0, r3, #2
 800f284:	18c0      	adds	r0, r0, r3
 800f286:	0080      	lsls	r0, r0, #2
 800f288:	4b05      	ldr	r3, [pc, #20]	; (800f2a0 <vTaskPrioritySet+0xac>)
 800f28a:	18c0      	adds	r0, r0, r3
 800f28c:	0029      	movs	r1, r5
 800f28e:	f7ff fb13 	bl	800e8b8 <vListInsertEnd>
 800f292:	e7e2      	b.n	800f25a <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800f294:	f000 ff18 	bl	80100c8 <vPortYield>
 800f298:	e7e1      	b.n	800f25e <vTaskPrioritySet+0x6a>
 800f29a:	46c0      	nop			; (mov r8, r8)
 800f29c:	2000162c 	.word	0x2000162c
 800f2a0:	20001638 	.word	0x20001638
 800f2a4:	200016dc 	.word	0x200016dc

0800f2a8 <vTaskStartScheduler>:
{
 800f2a8:	b500      	push	{lr}
 800f2aa:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	9303      	str	r3, [sp, #12]
 800f2b0:	9302      	str	r3, [sp, #8]
 800f2b2:	9301      	str	r3, [sp, #4]
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	22a0      	movs	r2, #160	; 0xa0
 800f2b8:	490b      	ldr	r1, [pc, #44]	; (800f2e8 <vTaskStartScheduler+0x40>)
 800f2ba:	480c      	ldr	r0, [pc, #48]	; (800f2ec <vTaskStartScheduler+0x44>)
 800f2bc:	f7ff fea2 	bl	800f004 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f2c0:	2801      	cmp	r0, #1
 800f2c2:	d001      	beq.n	800f2c8 <vTaskStartScheduler+0x20>
}
 800f2c4:	b005      	add	sp, #20
 800f2c6:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800f2c8:	f000 fd34 	bl	800fd34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f2cc:	2801      	cmp	r0, #1
 800f2ce:	d1f9      	bne.n	800f2c4 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f2d0:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f2d2:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <vTaskStartScheduler+0x48>)
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f2d8:	4b06      	ldr	r3, [pc, #24]	; (800f2f4 <vTaskStartScheduler+0x4c>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f2de:	f7f8 fb9f 	bl	8007a20 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f2e2:	f000 fec7 	bl	8010074 <xPortStartScheduler>
}
 800f2e6:	e7ed      	b.n	800f2c4 <vTaskStartScheduler+0x1c>
 800f2e8:	0801a224 	.word	0x0801a224
 800f2ec:	0800f569 	.word	0x0800f569
 800f2f0:	20001720 	.word	0x20001720
 800f2f4:	2000174c 	.word	0x2000174c

0800f2f8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f2f8:	4a02      	ldr	r2, [pc, #8]	; (800f304 <vTaskSuspendAll+0xc>)
 800f2fa:	6813      	ldr	r3, [r2, #0]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	6013      	str	r3, [r2, #0]
}
 800f300:	4770      	bx	lr
 800f302:	46c0      	nop			; (mov r8, r8)
 800f304:	200016d0 	.word	0x200016d0

0800f308 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f308:	4b01      	ldr	r3, [pc, #4]	; (800f310 <xTaskGetTickCount+0x8>)
 800f30a:	6818      	ldr	r0, [r3, #0]
}
 800f30c:	4770      	bx	lr
 800f30e:	46c0      	nop			; (mov r8, r8)
 800f310:	2000174c 	.word	0x2000174c

0800f314 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f314:	4b01      	ldr	r3, [pc, #4]	; (800f31c <xTaskGetTickCountFromISR+0x8>)
 800f316:	6818      	ldr	r0, [r3, #0]
}
 800f318:	4770      	bx	lr
 800f31a:	46c0      	nop			; (mov r8, r8)
 800f31c:	2000174c 	.word	0x2000174c

0800f320 <xTaskIncrementTick>:
{
 800f320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f322:	46d6      	mov	lr, sl
 800f324:	464f      	mov	r7, r9
 800f326:	4646      	mov	r6, r8
 800f328:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f32a:	4b3a      	ldr	r3, [pc, #232]	; (800f414 <xTaskIncrementTick+0xf4>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d15f      	bne.n	800f3f2 <xTaskIncrementTick+0xd2>
		++xTickCount;
 800f332:	4b39      	ldr	r3, [pc, #228]	; (800f418 <xTaskIncrementTick+0xf8>)
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	3201      	adds	r2, #1
 800f338:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f33a:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f33c:	2f00      	cmp	r7, #0
 800f33e:	d038      	beq.n	800f3b2 <xTaskIncrementTick+0x92>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f340:	4b36      	ldr	r3, [pc, #216]	; (800f41c <xTaskIncrementTick+0xfc>)
 800f342:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f344:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f346:	42bb      	cmp	r3, r7
 800f348:	d844      	bhi.n	800f3d4 <xTaskIncrementTick+0xb4>
BaseType_t xSwitchRequired = pdFALSE;
 800f34a:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f34c:	4b34      	ldr	r3, [pc, #208]	; (800f420 <xTaskIncrementTick+0x100>)
 800f34e:	4698      	mov	r8, r3
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f350:	4699      	mov	r9, r3
						prvAddTaskToReadyList( pxTCB );
 800f352:	4b34      	ldr	r3, [pc, #208]	; (800f424 <xTaskIncrementTick+0x104>)
 800f354:	469a      	mov	sl, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f356:	4643      	mov	r3, r8
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d035      	beq.n	800f3cc <xTaskIncrementTick+0xac>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f360:	464b      	mov	r3, r9
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f368:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f36a:	429f      	cmp	r7, r3
 800f36c:	d33e      	bcc.n	800f3ec <xTaskIncrementTick+0xcc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f36e:	1d25      	adds	r5, r4, #4
 800f370:	0028      	movs	r0, r5
 800f372:	f7ff fac4 	bl	800e8fe <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <xTaskIncrementTick+0x64>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f37c:	0020      	movs	r0, r4
 800f37e:	3018      	adds	r0, #24
 800f380:	f7ff fabd 	bl	800e8fe <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f384:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f386:	4652      	mov	r2, sl
 800f388:	6812      	ldr	r2, [r2, #0]
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d901      	bls.n	800f392 <xTaskIncrementTick+0x72>
 800f38e:	4a25      	ldr	r2, [pc, #148]	; (800f424 <xTaskIncrementTick+0x104>)
 800f390:	6013      	str	r3, [r2, #0]
 800f392:	0098      	lsls	r0, r3, #2
 800f394:	18c0      	adds	r0, r0, r3
 800f396:	0080      	lsls	r0, r0, #2
 800f398:	4b23      	ldr	r3, [pc, #140]	; (800f428 <xTaskIncrementTick+0x108>)
 800f39a:	18c0      	adds	r0, r0, r3
 800f39c:	0029      	movs	r1, r5
 800f39e:	f7ff fa8b 	bl	800e8b8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f3a2:	4b22      	ldr	r3, [pc, #136]	; (800f42c <xTaskIncrementTick+0x10c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d3d3      	bcc.n	800f356 <xTaskIncrementTick+0x36>
								xSwitchRequired = pdTRUE;
 800f3ae:	2601      	movs	r6, #1
 800f3b0:	e7d1      	b.n	800f356 <xTaskIncrementTick+0x36>
				taskSWITCH_DELAYED_LISTS();
 800f3b2:	4a1b      	ldr	r2, [pc, #108]	; (800f420 <xTaskIncrementTick+0x100>)
 800f3b4:	6811      	ldr	r1, [r2, #0]
 800f3b6:	4b1e      	ldr	r3, [pc, #120]	; (800f430 <xTaskIncrementTick+0x110>)
 800f3b8:	6818      	ldr	r0, [r3, #0]
 800f3ba:	6010      	str	r0, [r2, #0]
 800f3bc:	6019      	str	r1, [r3, #0]
 800f3be:	4a1d      	ldr	r2, [pc, #116]	; (800f434 <xTaskIncrementTick+0x114>)
 800f3c0:	6813      	ldr	r3, [r2, #0]
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	6013      	str	r3, [r2, #0]
 800f3c6:	f7ff fdc5 	bl	800ef54 <prvResetNextTaskUnblockTime>
 800f3ca:	e7b9      	b.n	800f340 <xTaskIncrementTick+0x20>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f3cc:	4b13      	ldr	r3, [pc, #76]	; (800f41c <xTaskIncrementTick+0xfc>)
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	4252      	negs	r2, r2
 800f3d2:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f3d4:	4b15      	ldr	r3, [pc, #84]	; (800f42c <xTaskIncrementTick+0x10c>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3da:	0093      	lsls	r3, r2, #2
 800f3dc:	189b      	adds	r3, r3, r2
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	4a11      	ldr	r2, [pc, #68]	; (800f428 <xTaskIncrementTick+0x108>)
 800f3e2:	589b      	ldr	r3, [r3, r2]
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d909      	bls.n	800f3fc <xTaskIncrementTick+0xdc>
				xSwitchRequired = pdTRUE;
 800f3e8:	2601      	movs	r6, #1
 800f3ea:	e007      	b.n	800f3fc <xTaskIncrementTick+0xdc>
							xNextTaskUnblockTime = xItemValue;
 800f3ec:	4a0b      	ldr	r2, [pc, #44]	; (800f41c <xTaskIncrementTick+0xfc>)
 800f3ee:	6013      	str	r3, [r2, #0]
							break;
 800f3f0:	e7f0      	b.n	800f3d4 <xTaskIncrementTick+0xb4>
		++uxPendedTicks;
 800f3f2:	4a11      	ldr	r2, [pc, #68]	; (800f438 <xTaskIncrementTick+0x118>)
 800f3f4:	6813      	ldr	r3, [r2, #0]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f3fa:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800f3fc:	4b0f      	ldr	r3, [pc, #60]	; (800f43c <xTaskIncrementTick+0x11c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d000      	beq.n	800f406 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800f404:	2601      	movs	r6, #1
}
 800f406:	0030      	movs	r0, r6
 800f408:	bc1c      	pop	{r2, r3, r4}
 800f40a:	4690      	mov	r8, r2
 800f40c:	4699      	mov	r9, r3
 800f40e:	46a2      	mov	sl, r4
 800f410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f412:	46c0      	nop			; (mov r8, r8)
 800f414:	200016d0 	.word	0x200016d0
 800f418:	2000174c 	.word	0x2000174c
 800f41c:	200000b8 	.word	0x200000b8
 800f420:	20001630 	.word	0x20001630
 800f424:	200016dc 	.word	0x200016dc
 800f428:	20001638 	.word	0x20001638
 800f42c:	2000162c 	.word	0x2000162c
 800f430:	20001634 	.word	0x20001634
 800f434:	20001708 	.word	0x20001708
 800f438:	200016cc 	.word	0x200016cc
 800f43c:	20001750 	.word	0x20001750

0800f440 <xTaskResumeAll>:
{
 800f440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f442:	46ce      	mov	lr, r9
 800f444:	4647      	mov	r7, r8
 800f446:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800f448:	f000 fe4a 	bl	80100e0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f44c:	4b30      	ldr	r3, [pc, #192]	; (800f510 <xTaskResumeAll+0xd0>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	3a01      	subs	r2, #1
 800f452:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f454:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f456:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d14d      	bne.n	800f4f8 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f45c:	4b2d      	ldr	r3, [pc, #180]	; (800f514 <xTaskResumeAll+0xd4>)
 800f45e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f460:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f462:	2b00      	cmp	r3, #0
 800f464:	d048      	beq.n	800f4f8 <xTaskResumeAll+0xb8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f466:	4e2c      	ldr	r6, [pc, #176]	; (800f518 <xTaskResumeAll+0xd8>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f468:	46b0      	mov	r8, r6
					prvAddTaskToReadyList( pxTCB );
 800f46a:	4f2c      	ldr	r7, [pc, #176]	; (800f51c <xTaskResumeAll+0xdc>)
 800f46c:	46b9      	mov	r9, r7
 800f46e:	e00d      	b.n	800f48c <xTaskResumeAll+0x4c>
 800f470:	0098      	lsls	r0, r3, #2
 800f472:	18c0      	adds	r0, r0, r3
 800f474:	0080      	lsls	r0, r0, #2
 800f476:	4b2a      	ldr	r3, [pc, #168]	; (800f520 <xTaskResumeAll+0xe0>)
 800f478:	18c0      	adds	r0, r0, r3
 800f47a:	0029      	movs	r1, r5
 800f47c:	f7ff fa1c 	bl	800e8b8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f480:	4b28      	ldr	r3, [pc, #160]	; (800f524 <xTaskResumeAll+0xe4>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f488:	429a      	cmp	r2, r3
 800f48a:	d214      	bcs.n	800f4b6 <xTaskResumeAll+0x76>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f48c:	6833      	ldr	r3, [r6, #0]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d015      	beq.n	800f4be <xTaskResumeAll+0x7e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f492:	4643      	mov	r3, r8
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f498:	0020      	movs	r0, r4
 800f49a:	3018      	adds	r0, #24
 800f49c:	f7ff fa2f 	bl	800e8fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f4a0:	1d25      	adds	r5, r4, #4
 800f4a2:	0028      	movs	r0, r5
 800f4a4:	f7ff fa2b 	bl	800e8fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f4a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f4aa:	683a      	ldr	r2, [r7, #0]
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d9df      	bls.n	800f470 <xTaskResumeAll+0x30>
 800f4b0:	464a      	mov	r2, r9
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	e7dc      	b.n	800f470 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
 800f4b6:	4b1c      	ldr	r3, [pc, #112]	; (800f528 <xTaskResumeAll+0xe8>)
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	601a      	str	r2, [r3, #0]
 800f4bc:	e7e6      	b.n	800f48c <xTaskResumeAll+0x4c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f4be:	4b1b      	ldr	r3, [pc, #108]	; (800f52c <xTaskResumeAll+0xec>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d013      	beq.n	800f4ee <xTaskResumeAll+0xae>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f4c6:	4b19      	ldr	r3, [pc, #100]	; (800f52c <xTaskResumeAll+0xec>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00f      	beq.n	800f4ee <xTaskResumeAll+0xae>
							xYieldPending = pdTRUE;
 800f4ce:	4e16      	ldr	r6, [pc, #88]	; (800f528 <xTaskResumeAll+0xe8>)
 800f4d0:	2501      	movs	r5, #1
						--uxPendedTicks;
 800f4d2:	4c16      	ldr	r4, [pc, #88]	; (800f52c <xTaskResumeAll+0xec>)
 800f4d4:	e005      	b.n	800f4e2 <xTaskResumeAll+0xa2>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d005      	beq.n	800f4ee <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
 800f4e2:	f7ff ff1d 	bl	800f320 <xTaskIncrementTick>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d0f5      	beq.n	800f4d6 <xTaskResumeAll+0x96>
							xYieldPending = pdTRUE;
 800f4ea:	6035      	str	r5, [r6, #0]
 800f4ec:	e7f3      	b.n	800f4d6 <xTaskResumeAll+0x96>
				if( xYieldPending == pdTRUE )
 800f4ee:	4b0e      	ldr	r3, [pc, #56]	; (800f528 <xTaskResumeAll+0xe8>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f4f2:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d006      	beq.n	800f506 <xTaskResumeAll+0xc6>
	taskEXIT_CRITICAL();
 800f4f8:	f000 fdfe 	bl	80100f8 <vPortExitCritical>
}
 800f4fc:	0020      	movs	r0, r4
 800f4fe:	bc0c      	pop	{r2, r3}
 800f500:	4690      	mov	r8, r2
 800f502:	4699      	mov	r9, r3
 800f504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800f506:	f000 fddf 	bl	80100c8 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f50a:	3401      	adds	r4, #1
 800f50c:	e7f4      	b.n	800f4f8 <xTaskResumeAll+0xb8>
 800f50e:	46c0      	nop			; (mov r8, r8)
 800f510:	200016d0 	.word	0x200016d0
 800f514:	200016c8 	.word	0x200016c8
 800f518:	2000170c 	.word	0x2000170c
 800f51c:	200016dc 	.word	0x200016dc
 800f520:	20001638 	.word	0x20001638
 800f524:	2000162c 	.word	0x2000162c
 800f528:	20001750 	.word	0x20001750
 800f52c:	200016cc 	.word	0x200016cc

0800f530 <vTaskDelay>:
	{
 800f530:	b510      	push	{r4, lr}
 800f532:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f534:	d010      	beq.n	800f558 <vTaskDelay+0x28>
			vTaskSuspendAll();
 800f536:	f7ff fedf 	bl	800f2f8 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f53a:	4b09      	ldr	r3, [pc, #36]	; (800f560 <vTaskDelay+0x30>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f540:	4b08      	ldr	r3, [pc, #32]	; (800f564 <vTaskDelay+0x34>)
 800f542:	6818      	ldr	r0, [r3, #0]
 800f544:	3004      	adds	r0, #4
 800f546:	f7ff f9da 	bl	800e8fe <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f54a:	0020      	movs	r0, r4
 800f54c:	f7ff fd18 	bl	800ef80 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f550:	f7ff ff76 	bl	800f440 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f554:	2800      	cmp	r0, #0
 800f556:	d101      	bne.n	800f55c <vTaskDelay+0x2c>
			portYIELD_WITHIN_API();
 800f558:	f000 fdb6 	bl	80100c8 <vPortYield>
	}
 800f55c:	bd10      	pop	{r4, pc}
 800f55e:	46c0      	nop			; (mov r8, r8)
 800f560:	2000174c 	.word	0x2000174c
 800f564:	2000162c 	.word	0x2000162c

0800f568 <prvIdleTask>:
{
 800f568:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f56a:	4d16      	ldr	r5, [pc, #88]	; (800f5c4 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f56c:	4e16      	ldr	r6, [pc, #88]	; (800f5c8 <prvIdleTask+0x60>)
 800f56e:	e003      	b.n	800f578 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f570:	4b16      	ldr	r3, [pc, #88]	; (800f5cc <prvIdleTask+0x64>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b01      	cmp	r3, #1
 800f576:	d822      	bhi.n	800f5be <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f578:	682b      	ldr	r3, [r5, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d0f8      	beq.n	800f570 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f57e:	f7ff febb 	bl	800f2f8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f582:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800f584:	f7ff ff5c 	bl	800f440 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f588:	2c00      	cmp	r4, #0
 800f58a:	d0f5      	beq.n	800f578 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f58c:	f000 fda8 	bl	80100e0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f590:	4b0d      	ldr	r3, [pc, #52]	; (800f5c8 <prvIdleTask+0x60>)
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f596:	1d20      	adds	r0, r4, #4
 800f598:	f7ff f9b1 	bl	800e8fe <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f59c:	4a0c      	ldr	r2, [pc, #48]	; (800f5d0 <prvIdleTask+0x68>)
 800f59e:	6813      	ldr	r3, [r2, #0]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f5a4:	4a07      	ldr	r2, [pc, #28]	; (800f5c4 <prvIdleTask+0x5c>)
 800f5a6:	6813      	ldr	r3, [r2, #0]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f5ac:	f000 fda4 	bl	80100f8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f5b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f5b2:	f000 fe9f 	bl	80102f4 <vPortFree>
		vPortFree( pxTCB );
 800f5b6:	0020      	movs	r0, r4
 800f5b8:	f000 fe9c 	bl	80102f4 <vPortFree>
 800f5bc:	e7dc      	b.n	800f578 <prvIdleTask+0x10>
				taskYIELD();
 800f5be:	f000 fd83 	bl	80100c8 <vPortYield>
 800f5c2:	e7d9      	b.n	800f578 <prvIdleTask+0x10>
 800f5c4:	200016d8 	.word	0x200016d8
 800f5c8:	20001738 	.word	0x20001738
 800f5cc:	20001638 	.word	0x20001638
 800f5d0:	200016c8 	.word	0x200016c8

0800f5d4 <uxTaskGetSystemState>:
	{
 800f5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d6:	46c6      	mov	lr, r8
 800f5d8:	b500      	push	{lr}
 800f5da:	0006      	movs	r6, r0
 800f5dc:	000d      	movs	r5, r1
 800f5de:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f5e0:	f7ff fe8a 	bl	800f2f8 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f5e4:	4b1e      	ldr	r3, [pc, #120]	; (800f660 <uxTaskGetSystemState+0x8c>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f5e8:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f5ea:	42ab      	cmp	r3, r5
 800f5ec:	d831      	bhi.n	800f652 <uxTaskGetSystemState+0x7e>
 800f5ee:	4d1d      	ldr	r5, [pc, #116]	; (800f664 <uxTaskGetSystemState+0x90>)
 800f5f0:	002f      	movs	r7, r5
 800f5f2:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f5f4:	0160      	lsls	r0, r4, #5
 800f5f6:	1830      	adds	r0, r6, r0
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	0029      	movs	r1, r5
 800f5fc:	f7ff fc56 	bl	800eeac <prvListTaskWithinSingleList>
 800f600:	1824      	adds	r4, r4, r0
 800f602:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f604:	42bd      	cmp	r5, r7
 800f606:	d1f5      	bne.n	800f5f4 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f608:	4b17      	ldr	r3, [pc, #92]	; (800f668 <uxTaskGetSystemState+0x94>)
 800f60a:	6819      	ldr	r1, [r3, #0]
 800f60c:	0160      	lsls	r0, r4, #5
 800f60e:	1830      	adds	r0, r6, r0
 800f610:	2202      	movs	r2, #2
 800f612:	f7ff fc4b 	bl	800eeac <prvListTaskWithinSingleList>
 800f616:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f618:	4b14      	ldr	r3, [pc, #80]	; (800f66c <uxTaskGetSystemState+0x98>)
 800f61a:	6819      	ldr	r1, [r3, #0]
 800f61c:	0160      	lsls	r0, r4, #5
 800f61e:	1830      	adds	r0, r6, r0
 800f620:	2202      	movs	r2, #2
 800f622:	f7ff fc43 	bl	800eeac <prvListTaskWithinSingleList>
 800f626:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f628:	0160      	lsls	r0, r4, #5
 800f62a:	1830      	adds	r0, r6, r0
 800f62c:	2204      	movs	r2, #4
 800f62e:	4910      	ldr	r1, [pc, #64]	; (800f670 <uxTaskGetSystemState+0x9c>)
 800f630:	f7ff fc3c 	bl	800eeac <prvListTaskWithinSingleList>
 800f634:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f636:	0160      	lsls	r0, r4, #5
 800f638:	1830      	adds	r0, r6, r0
 800f63a:	2203      	movs	r2, #3
 800f63c:	490d      	ldr	r1, [pc, #52]	; (800f674 <uxTaskGetSystemState+0xa0>)
 800f63e:	f7ff fc35 	bl	800eeac <prvListTaskWithinSingleList>
 800f642:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f644:	4643      	mov	r3, r8
 800f646:	2b00      	cmp	r3, #0
 800f648:	d003      	beq.n	800f652 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f64a:	f7f8 f9f9 	bl	8007a40 <ulMainGetRunTimeCounterValue>
 800f64e:	4643      	mov	r3, r8
 800f650:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f652:	f7ff fef5 	bl	800f440 <xTaskResumeAll>
	}
 800f656:	0020      	movs	r0, r4
 800f658:	bc04      	pop	{r2}
 800f65a:	4690      	mov	r8, r2
 800f65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f65e:	46c0      	nop			; (mov r8, r8)
 800f660:	200016c8 	.word	0x200016c8
 800f664:	200016b0 	.word	0x200016b0
 800f668:	20001630 	.word	0x20001630
 800f66c:	20001634 	.word	0x20001634
 800f670:	20001738 	.word	0x20001738
 800f674:	20001724 	.word	0x20001724

0800f678 <vTaskSwitchContext>:
{
 800f678:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f67a:	4b36      	ldr	r3, [pc, #216]	; (800f754 <vTaskSwitchContext+0xdc>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d003      	beq.n	800f68a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f682:	4b35      	ldr	r3, [pc, #212]	; (800f758 <vTaskSwitchContext+0xe0>)
 800f684:	2201      	movs	r2, #1
 800f686:	601a      	str	r2, [r3, #0]
}
 800f688:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f68a:	4b33      	ldr	r3, [pc, #204]	; (800f758 <vTaskSwitchContext+0xe0>)
 800f68c:	2200      	movs	r2, #0
 800f68e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f690:	f7f8 f9d6 	bl	8007a40 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f694:	4b31      	ldr	r3, [pc, #196]	; (800f75c <vTaskSwitchContext+0xe4>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4298      	cmp	r0, r3
 800f69a:	d905      	bls.n	800f6a8 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f69c:	4a30      	ldr	r2, [pc, #192]	; (800f760 <vTaskSwitchContext+0xe8>)
 800f69e:	6812      	ldr	r2, [r2, #0]
 800f6a0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f6a2:	1acb      	subs	r3, r1, r3
 800f6a4:	181b      	adds	r3, r3, r0
 800f6a6:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f6a8:	4b2c      	ldr	r3, [pc, #176]	; (800f75c <vTaskSwitchContext+0xe4>)
 800f6aa:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f6ac:	4b2c      	ldr	r3, [pc, #176]	; (800f760 <vTaskSwitchContext+0xe8>)
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	6812      	ldr	r2, [r2, #0]
 800f6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d937      	bls.n	800f72a <vTaskSwitchContext+0xb2>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f6ba:	4b29      	ldr	r3, [pc, #164]	; (800f760 <vTaskSwitchContext+0xe8>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f6c0:	2214      	movs	r2, #20
 800f6c2:	4928      	ldr	r1, [pc, #160]	; (800f764 <vTaskSwitchContext+0xec>)
 800f6c4:	f004 f8ca 	bl	801385c <memcmp>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d135      	bne.n	800f738 <vTaskSwitchContext+0xc0>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f6cc:	4b26      	ldr	r3, [pc, #152]	; (800f768 <vTaskSwitchContext+0xf0>)
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	0093      	lsls	r3, r2, #2
 800f6d2:	189b      	adds	r3, r3, r2
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	4a25      	ldr	r2, [pc, #148]	; (800f76c <vTaskSwitchContext+0xf4>)
 800f6d8:	589b      	ldr	r3, [r3, r2]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d10b      	bne.n	800f6f6 <vTaskSwitchContext+0x7e>
 800f6de:	4a22      	ldr	r2, [pc, #136]	; (800f768 <vTaskSwitchContext+0xf0>)
 800f6e0:	4822      	ldr	r0, [pc, #136]	; (800f76c <vTaskSwitchContext+0xf4>)
 800f6e2:	6813      	ldr	r3, [r2, #0]
 800f6e4:	3b01      	subs	r3, #1
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	6811      	ldr	r1, [r2, #0]
 800f6ea:	008b      	lsls	r3, r1, #2
 800f6ec:	185b      	adds	r3, r3, r1
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	581b      	ldr	r3, [r3, r0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d0f5      	beq.n	800f6e2 <vTaskSwitchContext+0x6a>
 800f6f6:	4b1c      	ldr	r3, [pc, #112]	; (800f768 <vTaskSwitchContext+0xf0>)
 800f6f8:	6819      	ldr	r1, [r3, #0]
 800f6fa:	4c1c      	ldr	r4, [pc, #112]	; (800f76c <vTaskSwitchContext+0xf4>)
 800f6fc:	008b      	lsls	r3, r1, #2
 800f6fe:	185a      	adds	r2, r3, r1
 800f700:	0092      	lsls	r2, r2, #2
 800f702:	18a2      	adds	r2, r4, r2
 800f704:	6850      	ldr	r0, [r2, #4]
 800f706:	6840      	ldr	r0, [r0, #4]
 800f708:	6050      	str	r0, [r2, #4]
 800f70a:	185b      	adds	r3, r3, r1
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	3308      	adds	r3, #8
 800f710:	191b      	adds	r3, r3, r4
 800f712:	4298      	cmp	r0, r3
 800f714:	d017      	beq.n	800f746 <vTaskSwitchContext+0xce>
 800f716:	008b      	lsls	r3, r1, #2
 800f718:	1859      	adds	r1, r3, r1
 800f71a:	0089      	lsls	r1, r1, #2
 800f71c:	4b13      	ldr	r3, [pc, #76]	; (800f76c <vTaskSwitchContext+0xf4>)
 800f71e:	1859      	adds	r1, r3, r1
 800f720:	684b      	ldr	r3, [r1, #4]
 800f722:	68da      	ldr	r2, [r3, #12]
 800f724:	4b0e      	ldr	r3, [pc, #56]	; (800f760 <vTaskSwitchContext+0xe8>)
 800f726:	601a      	str	r2, [r3, #0]
}
 800f728:	e7ae      	b.n	800f688 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f72a:	4b0d      	ldr	r3, [pc, #52]	; (800f760 <vTaskSwitchContext+0xe8>)
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	6819      	ldr	r1, [r3, #0]
 800f730:	3134      	adds	r1, #52	; 0x34
 800f732:	f7fe fa33 	bl	800db9c <vApplicationStackOverflowHook>
 800f736:	e7c0      	b.n	800f6ba <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f738:	4b09      	ldr	r3, [pc, #36]	; (800f760 <vTaskSwitchContext+0xe8>)
 800f73a:	6818      	ldr	r0, [r3, #0]
 800f73c:	6819      	ldr	r1, [r3, #0]
 800f73e:	3134      	adds	r1, #52	; 0x34
 800f740:	f7fe fa2c 	bl	800db9c <vApplicationStackOverflowHook>
 800f744:	e7c2      	b.n	800f6cc <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f746:	6840      	ldr	r0, [r0, #4]
 800f748:	008b      	lsls	r3, r1, #2
 800f74a:	185b      	adds	r3, r3, r1
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	18e3      	adds	r3, r4, r3
 800f750:	6058      	str	r0, [r3, #4]
 800f752:	e7e0      	b.n	800f716 <vTaskSwitchContext+0x9e>
 800f754:	200016d0 	.word	0x200016d0
 800f758:	20001750 	.word	0x20001750
 800f75c:	200016c4 	.word	0x200016c4
 800f760:	2000162c 	.word	0x2000162c
 800f764:	0801a1e8 	.word	0x0801a1e8
 800f768:	200016dc 	.word	0x200016dc
 800f76c:	20001638 	.word	0x20001638

0800f770 <vTaskPlaceOnEventList>:
{
 800f770:	b570      	push	{r4, r5, r6, lr}
 800f772:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f774:	4c0b      	ldr	r4, [pc, #44]	; (800f7a4 <vTaskPlaceOnEventList+0x34>)
 800f776:	6821      	ldr	r1, [r4, #0]
 800f778:	3118      	adds	r1, #24
 800f77a:	f7ff f8a9 	bl	800e8d0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f77e:	6820      	ldr	r0, [r4, #0]
 800f780:	3004      	adds	r0, #4
 800f782:	f7ff f8bc 	bl	800e8fe <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f786:	1c6b      	adds	r3, r5, #1
 800f788:	d005      	beq.n	800f796 <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800f78a:	4b07      	ldr	r3, [pc, #28]	; (800f7a8 <vTaskPlaceOnEventList+0x38>)
 800f78c:	6818      	ldr	r0, [r3, #0]
 800f78e:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f790:	f7ff fbf6 	bl	800ef80 <prvAddCurrentTaskToDelayedList>
}
 800f794:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f796:	4b03      	ldr	r3, [pc, #12]	; (800f7a4 <vTaskPlaceOnEventList+0x34>)
 800f798:	6819      	ldr	r1, [r3, #0]
 800f79a:	3104      	adds	r1, #4
 800f79c:	4803      	ldr	r0, [pc, #12]	; (800f7ac <vTaskPlaceOnEventList+0x3c>)
 800f79e:	f7ff f88b 	bl	800e8b8 <vListInsertEnd>
 800f7a2:	e7f7      	b.n	800f794 <vTaskPlaceOnEventList+0x24>
 800f7a4:	2000162c 	.word	0x2000162c
 800f7a8:	2000174c 	.word	0x2000174c
 800f7ac:	20001724 	.word	0x20001724

0800f7b0 <vTaskPlaceOnEventListRestricted>:
	{
 800f7b0:	b570      	push	{r4, r5, r6, lr}
 800f7b2:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f7b4:	4c07      	ldr	r4, [pc, #28]	; (800f7d4 <vTaskPlaceOnEventListRestricted+0x24>)
 800f7b6:	6821      	ldr	r1, [r4, #0]
 800f7b8:	3118      	adds	r1, #24
 800f7ba:	f7ff f87d 	bl	800e8b8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f7be:	6820      	ldr	r0, [r4, #0]
 800f7c0:	3004      	adds	r0, #4
 800f7c2:	f7ff f89c 	bl	800e8fe <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f7c6:	4b04      	ldr	r3, [pc, #16]	; (800f7d8 <vTaskPlaceOnEventListRestricted+0x28>)
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f7cc:	f7ff fbd8 	bl	800ef80 <prvAddCurrentTaskToDelayedList>
	}
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	46c0      	nop			; (mov r8, r8)
 800f7d4:	2000162c 	.word	0x2000162c
 800f7d8:	2000174c 	.word	0x2000174c

0800f7dc <xTaskRemoveFromEventList>:
{
 800f7dc:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f7de:	68c3      	ldr	r3, [r0, #12]
 800f7e0:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f7e2:	0025      	movs	r5, r4
 800f7e4:	3518      	adds	r5, #24
 800f7e6:	0028      	movs	r0, r5
 800f7e8:	f7ff f889 	bl	800e8fe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7ec:	4b13      	ldr	r3, [pc, #76]	; (800f83c <xTaskRemoveFromEventList+0x60>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d11e      	bne.n	800f832 <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f7f4:	1d25      	adds	r5, r4, #4
 800f7f6:	0028      	movs	r0, r5
 800f7f8:	f7ff f881 	bl	800e8fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f7fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f7fe:	4a10      	ldr	r2, [pc, #64]	; (800f840 <xTaskRemoveFromEventList+0x64>)
 800f800:	6812      	ldr	r2, [r2, #0]
 800f802:	4293      	cmp	r3, r2
 800f804:	d901      	bls.n	800f80a <xTaskRemoveFromEventList+0x2e>
 800f806:	4a0e      	ldr	r2, [pc, #56]	; (800f840 <xTaskRemoveFromEventList+0x64>)
 800f808:	6013      	str	r3, [r2, #0]
 800f80a:	0098      	lsls	r0, r3, #2
 800f80c:	18c0      	adds	r0, r0, r3
 800f80e:	0080      	lsls	r0, r0, #2
 800f810:	4b0c      	ldr	r3, [pc, #48]	; (800f844 <xTaskRemoveFromEventList+0x68>)
 800f812:	18c0      	adds	r0, r0, r3
 800f814:	0029      	movs	r1, r5
 800f816:	f7ff f84f 	bl	800e8b8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f81a:	4b0b      	ldr	r3, [pc, #44]	; (800f848 <xTaskRemoveFromEventList+0x6c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f822:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f824:	429a      	cmp	r2, r3
 800f826:	d903      	bls.n	800f830 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 800f828:	4b08      	ldr	r3, [pc, #32]	; (800f84c <xTaskRemoveFromEventList+0x70>)
 800f82a:	2201      	movs	r2, #1
 800f82c:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f82e:	3001      	adds	r0, #1
}
 800f830:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f832:	0029      	movs	r1, r5
 800f834:	4806      	ldr	r0, [pc, #24]	; (800f850 <xTaskRemoveFromEventList+0x74>)
 800f836:	f7ff f83f 	bl	800e8b8 <vListInsertEnd>
 800f83a:	e7ee      	b.n	800f81a <xTaskRemoveFromEventList+0x3e>
 800f83c:	200016d0 	.word	0x200016d0
 800f840:	200016dc 	.word	0x200016dc
 800f844:	20001638 	.word	0x20001638
 800f848:	2000162c 	.word	0x2000162c
 800f84c:	20001750 	.word	0x20001750
 800f850:	2000170c 	.word	0x2000170c

0800f854 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f854:	4b03      	ldr	r3, [pc, #12]	; (800f864 <vTaskSetTimeOutState+0x10>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f85a:	4b03      	ldr	r3, [pc, #12]	; (800f868 <vTaskSetTimeOutState+0x14>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	6043      	str	r3, [r0, #4]
}
 800f860:	4770      	bx	lr
 800f862:	46c0      	nop			; (mov r8, r8)
 800f864:	20001708 	.word	0x20001708
 800f868:	2000174c 	.word	0x2000174c

0800f86c <xTaskCheckForTimeOut>:
{
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	0004      	movs	r4, r0
 800f870:	000e      	movs	r6, r1
	taskENTER_CRITICAL();
 800f872:	f000 fc35 	bl	80100e0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f876:	4b10      	ldr	r3, [pc, #64]	; (800f8b8 <xTaskCheckForTimeOut+0x4c>)
 800f878:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f87a:	6833      	ldr	r3, [r6, #0]
 800f87c:	1c59      	adds	r1, r3, #1
 800f87e:	d019      	beq.n	800f8b4 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f880:	490e      	ldr	r1, [pc, #56]	; (800f8bc <xTaskCheckForTimeOut+0x50>)
 800f882:	6809      	ldr	r1, [r1, #0]
 800f884:	6820      	ldr	r0, [r4, #0]
 800f886:	4288      	cmp	r0, r1
 800f888:	d003      	beq.n	800f892 <xTaskCheckForTimeOut+0x26>
			xReturn = pdTRUE;
 800f88a:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f88c:	6861      	ldr	r1, [r4, #4]
 800f88e:	4291      	cmp	r1, r2
 800f890:	d904      	bls.n	800f89c <xTaskCheckForTimeOut+0x30>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f892:	6861      	ldr	r1, [r4, #4]
 800f894:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800f896:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f898:	4283      	cmp	r3, r0
 800f89a:	d803      	bhi.n	800f8a4 <xTaskCheckForTimeOut+0x38>
	taskEXIT_CRITICAL();
 800f89c:	f000 fc2c 	bl	80100f8 <vPortExitCritical>
}
 800f8a0:	0028      	movs	r0, r5
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f8a4:	1a8a      	subs	r2, r1, r2
 800f8a6:	18d3      	adds	r3, r2, r3
 800f8a8:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f8aa:	0020      	movs	r0, r4
 800f8ac:	f7ff ffd2 	bl	800f854 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f8b0:	2500      	movs	r5, #0
 800f8b2:	e7f3      	b.n	800f89c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 800f8b4:	2500      	movs	r5, #0
 800f8b6:	e7f1      	b.n	800f89c <xTaskCheckForTimeOut+0x30>
 800f8b8:	2000174c 	.word	0x2000174c
 800f8bc:	20001708 	.word	0x20001708

0800f8c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f8c0:	4b01      	ldr	r3, [pc, #4]	; (800f8c8 <vTaskMissedYield+0x8>)
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	601a      	str	r2, [r3, #0]
}
 800f8c6:	4770      	bx	lr
 800f8c8:	20001750 	.word	0x20001750

0800f8cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f8cc:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <xTaskGetSchedulerState+0x18>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f8d0:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d004      	beq.n	800f8e0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8d6:	4b04      	ldr	r3, [pc, #16]	; (800f8e8 <xTaskGetSchedulerState+0x1c>)
 800f8d8:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f8da:	4243      	negs	r3, r0
 800f8dc:	4158      	adcs	r0, r3
 800f8de:	0040      	lsls	r0, r0, #1
	}
 800f8e0:	4770      	bx	lr
 800f8e2:	46c0      	nop			; (mov r8, r8)
 800f8e4:	20001720 	.word	0x20001720
 800f8e8:	200016d0 	.word	0x200016d0

0800f8ec <vTaskPriorityInherit>:
	{
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f8f0:	d01a      	beq.n	800f928 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f8f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f8f4:	4b19      	ldr	r3, [pc, #100]	; (800f95c <vTaskPriorityInherit+0x70>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d214      	bcs.n	800f928 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f8fe:	6983      	ldr	r3, [r0, #24]
 800f900:	2b00      	cmp	r3, #0
 800f902:	db05      	blt.n	800f910 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f904:	4b15      	ldr	r3, [pc, #84]	; (800f95c <vTaskPriorityInherit+0x70>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f90a:	2307      	movs	r3, #7
 800f90c:	1a5b      	subs	r3, r3, r1
 800f90e:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f910:	0093      	lsls	r3, r2, #2
 800f912:	189b      	adds	r3, r3, r2
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4a12      	ldr	r2, [pc, #72]	; (800f960 <vTaskPriorityInherit+0x74>)
 800f918:	189b      	adds	r3, r3, r2
 800f91a:	6962      	ldr	r2, [r4, #20]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d004      	beq.n	800f92a <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f920:	4b0e      	ldr	r3, [pc, #56]	; (800f95c <vTaskPriorityInherit+0x70>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f926:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f928:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f92a:	1d25      	adds	r5, r4, #4
 800f92c:	0028      	movs	r0, r5
 800f92e:	f7fe ffe6 	bl	800e8fe <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f932:	4b0a      	ldr	r3, [pc, #40]	; (800f95c <vTaskPriorityInherit+0x70>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f938:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f93a:	4a0a      	ldr	r2, [pc, #40]	; (800f964 <vTaskPriorityInherit+0x78>)
 800f93c:	6812      	ldr	r2, [r2, #0]
 800f93e:	4293      	cmp	r3, r2
 800f940:	d808      	bhi.n	800f954 <vTaskPriorityInherit+0x68>
 800f942:	0098      	lsls	r0, r3, #2
 800f944:	18c0      	adds	r0, r0, r3
 800f946:	0080      	lsls	r0, r0, #2
 800f948:	4b05      	ldr	r3, [pc, #20]	; (800f960 <vTaskPriorityInherit+0x74>)
 800f94a:	18c0      	adds	r0, r0, r3
 800f94c:	0029      	movs	r1, r5
 800f94e:	f7fe ffb3 	bl	800e8b8 <vListInsertEnd>
	}
 800f952:	e7e9      	b.n	800f928 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f954:	4a03      	ldr	r2, [pc, #12]	; (800f964 <vTaskPriorityInherit+0x78>)
 800f956:	6013      	str	r3, [r2, #0]
 800f958:	e7f3      	b.n	800f942 <vTaskPriorityInherit+0x56>
 800f95a:	46c0      	nop			; (mov r8, r8)
 800f95c:	2000162c 	.word	0x2000162c
 800f960:	20001638 	.word	0x20001638
 800f964:	200016dc 	.word	0x200016dc

0800f968 <xTaskPriorityDisinherit>:
	{
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f96c:	d023      	beq.n	800f9b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f96e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f970:	3b01      	subs	r3, #1
 800f972:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f974:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f976:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f978:	428a      	cmp	r2, r1
 800f97a:	d01e      	beq.n	800f9ba <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800f97c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d000      	beq.n	800f984 <xTaskPriorityDisinherit+0x1c>
	}
 800f982:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f984:	1d25      	adds	r5, r4, #4
 800f986:	0028      	movs	r0, r5
 800f988:	f7fe ffb9 	bl	800e8fe <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f98c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f98e:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f990:	2207      	movs	r2, #7
 800f992:	1ad2      	subs	r2, r2, r3
 800f994:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f996:	4a0a      	ldr	r2, [pc, #40]	; (800f9c0 <xTaskPriorityDisinherit+0x58>)
 800f998:	6812      	ldr	r2, [r2, #0]
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d901      	bls.n	800f9a2 <xTaskPriorityDisinherit+0x3a>
 800f99e:	4a08      	ldr	r2, [pc, #32]	; (800f9c0 <xTaskPriorityDisinherit+0x58>)
 800f9a0:	6013      	str	r3, [r2, #0]
 800f9a2:	0098      	lsls	r0, r3, #2
 800f9a4:	18c0      	adds	r0, r0, r3
 800f9a6:	0080      	lsls	r0, r0, #2
 800f9a8:	4b06      	ldr	r3, [pc, #24]	; (800f9c4 <xTaskPriorityDisinherit+0x5c>)
 800f9aa:	18c0      	adds	r0, r0, r3
 800f9ac:	0029      	movs	r1, r5
 800f9ae:	f7fe ff83 	bl	800e8b8 <vListInsertEnd>
					xReturn = pdTRUE;
 800f9b2:	2001      	movs	r0, #1
 800f9b4:	e7e5      	b.n	800f982 <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800f9b6:	2000      	movs	r0, #0
 800f9b8:	e7e3      	b.n	800f982 <xTaskPriorityDisinherit+0x1a>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	e7e1      	b.n	800f982 <xTaskPriorityDisinherit+0x1a>
 800f9be:	46c0      	nop			; (mov r8, r8)
 800f9c0:	200016dc 	.word	0x200016dc
 800f9c4:	20001638 	.word	0x20001638

0800f9c8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f9d2:	4b2b      	ldr	r3, [pc, #172]	; (800fa80 <vTaskList+0xb8>)
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f9d8:	6818      	ldr	r0, [r3, #0]
 800f9da:	0140      	lsls	r0, r0, #5
 800f9dc:	f000 fbfc 	bl	80101d8 <pvPortMalloc>
 800f9e0:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f9e2:	d04a      	beq.n	800fa7a <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f9e4:	9903      	ldr	r1, [sp, #12]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f7ff fdf4 	bl	800f5d4 <uxTaskGetSystemState>
 800f9ec:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	9302      	str	r3, [sp, #8]
 800f9f2:	9a02      	ldr	r2, [sp, #8]
 800f9f4:	9b03      	ldr	r3, [sp, #12]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d23c      	bcs.n	800fa74 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f9fa:	4e22      	ldr	r6, [pc, #136]	; (800fa84 <vTaskList+0xbc>)
 800f9fc:	e027      	b.n	800fa4e <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800f9fe:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d133      	bne.n	800fa6c <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fa04:	9b02      	ldr	r3, [sp, #8]
 800fa06:	015b      	lsls	r3, r3, #5
 800fa08:	18fb      	adds	r3, r7, r3
 800fa0a:	6859      	ldr	r1, [r3, #4]
 800fa0c:	0020      	movs	r0, r4
 800fa0e:	f7ff fae1 	bl	800efd4 <prvWriteNameToBuffer>
 800fa12:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800fa14:	9b02      	ldr	r3, [sp, #8]
 800fa16:	9a02      	ldr	r2, [sp, #8]
 800fa18:	9902      	ldr	r1, [sp, #8]
 800fa1a:	015b      	lsls	r3, r3, #5
 800fa1c:	18fb      	adds	r3, r7, r3
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	0149      	lsls	r1, r1, #5
 800fa22:	1879      	adds	r1, r7, r1
 800fa24:	6889      	ldr	r1, [r1, #8]
 800fa26:	9101      	str	r1, [sp, #4]
 800fa28:	0152      	lsls	r2, r2, #5
 800fa2a:	18ba      	adds	r2, r7, r2
 800fa2c:	8b92      	ldrh	r2, [r2, #28]
 800fa2e:	9200      	str	r2, [sp, #0]
 800fa30:	002a      	movs	r2, r5
 800fa32:	0031      	movs	r1, r6
 800fa34:	f004 fcb8 	bl	80143a8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800fa38:	0020      	movs	r0, r4
 800fa3a:	f7f0 fb6d 	bl	8000118 <strlen>
 800fa3e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	3301      	adds	r3, #1
 800fa44:	9302      	str	r3, [sp, #8]
 800fa46:	9a02      	ldr	r2, [sp, #8]
 800fa48:	9b03      	ldr	r3, [sp, #12]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d212      	bcs.n	800fa74 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa4e:	9b02      	ldr	r3, [sp, #8]
 800fa50:	015b      	lsls	r3, r3, #5
 800fa52:	18fb      	adds	r3, r7, r3
 800fa54:	7b1b      	ldrb	r3, [r3, #12]
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d00a      	beq.n	800fa70 <vTaskList+0xa8>
 800fa5a:	b2da      	uxtb	r2, r3
 800fa5c:	2a02      	cmp	r2, #2
 800fa5e:	d9ce      	bls.n	800f9fe <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800fa60:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa62:	2b03      	cmp	r3, #3
 800fa64:	d0ce      	beq.n	800fa04 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800fa66:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800fa68:	2b04      	cmp	r3, #4
 800fa6a:	d0cb      	beq.n	800fa04 <vTaskList+0x3c>
										cStatus = 0x00;
 800fa6c:	2500      	movs	r5, #0
										break;
 800fa6e:	e7c9      	b.n	800fa04 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800fa70:	2542      	movs	r5, #66	; 0x42
 800fa72:	e7c7      	b.n	800fa04 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fa74:	0038      	movs	r0, r7
 800fa76:	f000 fc3d 	bl	80102f4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa7a:	b005      	add	sp, #20
 800fa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa7e:	46c0      	nop			; (mov r8, r8)
 800fa80:	200016c8 	.word	0x200016c8
 800fa84:	0801a214 	.word	0x0801a214

0800fa88 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800fa88:	b570      	push	{r4, r5, r6, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800fa92:	4b26      	ldr	r3, [pc, #152]	; (800fb2c <vTaskGetRunTimeStats+0xa4>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	0140      	lsls	r0, r0, #5
 800fa9c:	f000 fb9c 	bl	80101d8 <pvPortMalloc>
 800faa0:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800faa2:	d014      	beq.n	800face <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800faa4:	9903      	ldr	r1, [sp, #12]
 800faa6:	aa01      	add	r2, sp, #4
 800faa8:	f7ff fd94 	bl	800f5d4 <uxTaskGetSystemState>
 800faac:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800faae:	2164      	movs	r1, #100	; 0x64
 800fab0:	9801      	ldr	r0, [sp, #4]
 800fab2:	f7f0 fb43 	bl	800013c <__udivsi3>
 800fab6:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fab8:	2800      	cmp	r0, #0
 800faba:	d005      	beq.n	800fac8 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fabc:	2300      	movs	r3, #0
 800fabe:	9302      	str	r3, [sp, #8]
 800fac0:	9a02      	ldr	r2, [sp, #8]
 800fac2:	9b03      	ldr	r3, [sp, #12]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d316      	bcc.n	800faf6 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800fac8:	0030      	movs	r0, r6
 800faca:	f000 fc13 	bl	80102f4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800face:	b004      	add	sp, #16
 800fad0:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800fad2:	9b02      	ldr	r3, [sp, #8]
 800fad4:	015b      	lsls	r3, r3, #5
 800fad6:	18f3      	adds	r3, r6, r3
 800fad8:	699a      	ldr	r2, [r3, #24]
 800fada:	4915      	ldr	r1, [pc, #84]	; (800fb30 <vTaskGetRunTimeStats+0xa8>)
 800fadc:	f004 fc64 	bl	80143a8 <siprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800fae0:	0020      	movs	r0, r4
 800fae2:	f7f0 fb19 	bl	8000118 <strlen>
 800fae6:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800fae8:	9b02      	ldr	r3, [sp, #8]
 800faea:	3301      	adds	r3, #1
 800faec:	9302      	str	r3, [sp, #8]
 800faee:	9a02      	ldr	r2, [sp, #8]
 800faf0:	9b03      	ldr	r3, [sp, #12]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d2e8      	bcs.n	800fac8 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800faf6:	9b02      	ldr	r3, [sp, #8]
 800faf8:	015b      	lsls	r3, r3, #5
 800fafa:	18f3      	adds	r3, r6, r3
 800fafc:	9901      	ldr	r1, [sp, #4]
 800fafe:	6998      	ldr	r0, [r3, #24]
 800fb00:	f7f0 fb1c 	bl	800013c <__udivsi3>
 800fb04:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800fb06:	9b02      	ldr	r3, [sp, #8]
 800fb08:	015b      	lsls	r3, r3, #5
 800fb0a:	18f3      	adds	r3, r6, r3
 800fb0c:	6859      	ldr	r1, [r3, #4]
 800fb0e:	0020      	movs	r0, r4
 800fb10:	f7ff fa60 	bl	800efd4 <prvWriteNameToBuffer>
 800fb14:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800fb16:	2d00      	cmp	r5, #0
 800fb18:	d0db      	beq.n	800fad2 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800fb1a:	9b02      	ldr	r3, [sp, #8]
 800fb1c:	015b      	lsls	r3, r3, #5
 800fb1e:	18f3      	adds	r3, r6, r3
 800fb20:	699a      	ldr	r2, [r3, #24]
 800fb22:	002b      	movs	r3, r5
 800fb24:	4903      	ldr	r1, [pc, #12]	; (800fb34 <vTaskGetRunTimeStats+0xac>)
 800fb26:	f004 fc3f 	bl	80143a8 <siprintf>
 800fb2a:	e7d9      	b.n	800fae0 <vTaskGetRunTimeStats+0x58>
 800fb2c:	200016c8 	.word	0x200016c8
 800fb30:	0801a208 	.word	0x0801a208
 800fb34:	0801a1fc 	.word	0x0801a1fc

0800fb38 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fb38:	4b05      	ldr	r3, [pc, #20]	; (800fb50 <pvTaskIncrementMutexHeldCount+0x18>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d004      	beq.n	800fb4a <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fb40:	4b03      	ldr	r3, [pc, #12]	; (800fb50 <pvTaskIncrementMutexHeldCount+0x18>)
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800fb46:	3301      	adds	r3, #1
 800fb48:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800fb4a:	4b01      	ldr	r3, [pc, #4]	; (800fb50 <pvTaskIncrementMutexHeldCount+0x18>)
 800fb4c:	6818      	ldr	r0, [r3, #0]
	}
 800fb4e:	4770      	bx	lr
 800fb50:	2000162c 	.word	0x2000162c

0800fb54 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fb54:	b570      	push	{r4, r5, r6, lr}
 800fb56:	0005      	movs	r5, r0
 800fb58:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fb5a:	f000 fac1 	bl	80100e0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fb5e:	4b20      	ldr	r3, [pc, #128]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800fb68:	4b1d      	ldr	r3, [pc, #116]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	235c      	movs	r3, #92	; 0x5c
 800fb6e:	2101      	movs	r1, #1
 800fb70:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800fb72:	2c00      	cmp	r4, #0
 800fb74:	d118      	bne.n	800fba8 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fb76:	f000 fabf 	bl	80100f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fb7a:	f000 fab1 	bl	80100e0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fb7e:	4b18      	ldr	r3, [pc, #96]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800fb84:	2c00      	cmp	r4, #0
 800fb86:	d006      	beq.n	800fb96 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800fb88:	2d00      	cmp	r5, #0
 800fb8a:	d123      	bne.n	800fbd4 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800fb8c:	4b14      	ldr	r3, [pc, #80]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fb92:	3b01      	subs	r3, #1
 800fb94:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800fb96:	4b12      	ldr	r3, [pc, #72]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	235c      	movs	r3, #92	; 0x5c
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800fba0:	f000 faaa 	bl	80100f8 <vPortExitCritical>

		return ulReturn;
	}
 800fba4:	0020      	movs	r0, r4
 800fba6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fba8:	4b0d      	ldr	r3, [pc, #52]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fbaa:	6818      	ldr	r0, [r3, #0]
 800fbac:	3004      	adds	r0, #4
 800fbae:	f7fe fea6 	bl	800e8fe <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800fbb2:	1c63      	adds	r3, r4, #1
 800fbb4:	d007      	beq.n	800fbc6 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800fbb6:	4b0b      	ldr	r3, [pc, #44]	; (800fbe4 <ulTaskNotifyTake+0x90>)
 800fbb8:	6818      	ldr	r0, [r3, #0]
 800fbba:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fbbc:	f7ff f9e0 	bl	800ef80 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800fbc0:	f000 fa82 	bl	80100c8 <vPortYield>
 800fbc4:	e7d7      	b.n	800fb76 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fbc6:	4b06      	ldr	r3, [pc, #24]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fbc8:	6819      	ldr	r1, [r3, #0]
 800fbca:	3104      	adds	r1, #4
 800fbcc:	4806      	ldr	r0, [pc, #24]	; (800fbe8 <ulTaskNotifyTake+0x94>)
 800fbce:	f7fe fe73 	bl	800e8b8 <vListInsertEnd>
 800fbd2:	e7f5      	b.n	800fbc0 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fbd4:	4b02      	ldr	r3, [pc, #8]	; (800fbe0 <ulTaskNotifyTake+0x8c>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2200      	movs	r2, #0
 800fbda:	659a      	str	r2, [r3, #88]	; 0x58
 800fbdc:	e7db      	b.n	800fb96 <ulTaskNotifyTake+0x42>
 800fbde:	46c0      	nop			; (mov r8, r8)
 800fbe0:	2000162c 	.word	0x2000162c
 800fbe4:	2000174c 	.word	0x2000174c
 800fbe8:	20001724 	.word	0x20001724

0800fbec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	0004      	movs	r4, r0
 800fbf0:	000d      	movs	r5, r1
 800fbf2:	0016      	movs	r6, r2
 800fbf4:	001f      	movs	r7, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800fbf6:	f000 fa73 	bl	80100e0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fbfa:	2f00      	cmp	r7, #0
 800fbfc:	d001      	beq.n	800fc02 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fbfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc00:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800fc02:	225c      	movs	r2, #92	; 0x5c
 800fc04:	5ca3      	ldrb	r3, [r4, r2]
 800fc06:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800fc08:	2102      	movs	r1, #2
 800fc0a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800fc0c:	2e02      	cmp	r6, #2
 800fc0e:	d014      	beq.n	800fc3a <xTaskGenericNotify+0x4e>
 800fc10:	d907      	bls.n	800fc22 <xTaskGenericNotify+0x36>
 800fc12:	2e03      	cmp	r6, #3
 800fc14:	d015      	beq.n	800fc42 <xTaskGenericNotify+0x56>
 800fc16:	2e04      	cmp	r6, #4
 800fc18:	d108      	bne.n	800fc2c <xTaskGenericNotify+0x40>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d030      	beq.n	800fc80 <xTaskGenericNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fc1e:	65a5      	str	r5, [r4, #88]	; 0x58
 800fc20:	e004      	b.n	800fc2c <xTaskGenericNotify+0x40>
			switch( eAction )
 800fc22:	2e01      	cmp	r6, #1
 800fc24:	d102      	bne.n	800fc2c <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800fc26:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fc28:	4315      	orrs	r5, r2
 800fc2a:	65a5      	str	r5, [r4, #88]	; 0x58
 800fc2c:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800fc2e:	2b01      	cmp	r3, #1
 800fc30:	d009      	beq.n	800fc46 <xTaskGenericNotify+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fc32:	f000 fa61 	bl	80100f8 <vPortExitCritical>

		return xReturn;
	}
 800fc36:	0028      	movs	r0, r5
 800fc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800fc3a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fc3c:	3201      	adds	r2, #1
 800fc3e:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800fc40:	e7f4      	b.n	800fc2c <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue = ulValue;
 800fc42:	65a5      	str	r5, [r4, #88]	; 0x58
					break;
 800fc44:	e7f2      	b.n	800fc2c <xTaskGenericNotify+0x40>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fc46:	1d25      	adds	r5, r4, #4
 800fc48:	0028      	movs	r0, r5
 800fc4a:	f7fe fe58 	bl	800e8fe <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fc4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc50:	4a0c      	ldr	r2, [pc, #48]	; (800fc84 <xTaskGenericNotify+0x98>)
 800fc52:	6812      	ldr	r2, [r2, #0]
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d901      	bls.n	800fc5c <xTaskGenericNotify+0x70>
 800fc58:	4a0a      	ldr	r2, [pc, #40]	; (800fc84 <xTaskGenericNotify+0x98>)
 800fc5a:	6013      	str	r3, [r2, #0]
 800fc5c:	0098      	lsls	r0, r3, #2
 800fc5e:	18c0      	adds	r0, r0, r3
 800fc60:	0080      	lsls	r0, r0, #2
 800fc62:	4b09      	ldr	r3, [pc, #36]	; (800fc88 <xTaskGenericNotify+0x9c>)
 800fc64:	18c0      	adds	r0, r0, r3
 800fc66:	0029      	movs	r1, r5
 800fc68:	f7fe fe26 	bl	800e8b8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fc6c:	4b07      	ldr	r3, [pc, #28]	; (800fc8c <xTaskGenericNotify+0xa0>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc74:	2501      	movs	r5, #1
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d9db      	bls.n	800fc32 <xTaskGenericNotify+0x46>
					taskYIELD_IF_USING_PREEMPTION();
 800fc7a:	f000 fa25 	bl	80100c8 <vPortYield>
 800fc7e:	e7d8      	b.n	800fc32 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 800fc80:	2500      	movs	r5, #0
 800fc82:	e7d6      	b.n	800fc32 <xTaskGenericNotify+0x46>
 800fc84:	200016dc 	.word	0x200016dc
 800fc88:	20001638 	.word	0x20001638
 800fc8c:	2000162c 	.word	0x2000162c

0800fc90 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fc90:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc92:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc94:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fc96:	4291      	cmp	r1, r2
 800fc98:	d80b      	bhi.n	800fcb2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fc9a:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fc9c:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fc9e:	6983      	ldr	r3, [r0, #24]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d211      	bcs.n	800fcc8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fca4:	1d01      	adds	r1, r0, #4
 800fca6:	4b09      	ldr	r3, [pc, #36]	; (800fccc <prvInsertTimerInActiveList+0x3c>)
 800fca8:	6818      	ldr	r0, [r3, #0]
 800fcaa:	f7fe fe11 	bl	800e8d0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fcae:	2400      	movs	r4, #0
 800fcb0:	e00a      	b.n	800fcc8 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d202      	bcs.n	800fcbc <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fcb6:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcb8:	4299      	cmp	r1, r3
 800fcba:	d205      	bcs.n	800fcc8 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcbc:	1d01      	adds	r1, r0, #4
 800fcbe:	4b04      	ldr	r3, [pc, #16]	; (800fcd0 <prvInsertTimerInActiveList+0x40>)
 800fcc0:	6818      	ldr	r0, [r3, #0]
 800fcc2:	f7fe fe05 	bl	800e8d0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fcc6:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800fcc8:	0020      	movs	r0, r4
 800fcca:	bd10      	pop	{r4, pc}
 800fccc:	20001758 	.word	0x20001758
 800fcd0:	20001754 	.word	0x20001754

0800fcd4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fcd4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fcd6:	f000 fa03 	bl	80100e0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fcda:	4b10      	ldr	r3, [pc, #64]	; (800fd1c <prvCheckForValidListAndQueue+0x48>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d002      	beq.n	800fce8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fce2:	f000 fa09 	bl	80100f8 <vPortExitCritical>
}
 800fce6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800fce8:	4d0d      	ldr	r5, [pc, #52]	; (800fd20 <prvCheckForValidListAndQueue+0x4c>)
 800fcea:	0028      	movs	r0, r5
 800fcec:	f7fe fdd6 	bl	800e89c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fcf0:	4c0c      	ldr	r4, [pc, #48]	; (800fd24 <prvCheckForValidListAndQueue+0x50>)
 800fcf2:	0020      	movs	r0, r4
 800fcf4:	f7fe fdd2 	bl	800e89c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fcf8:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <prvCheckForValidListAndQueue+0x54>)
 800fcfa:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	; (800fd2c <prvCheckForValidListAndQueue+0x58>)
 800fcfe:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fd00:	2200      	movs	r2, #0
 800fd02:	2110      	movs	r1, #16
 800fd04:	2004      	movs	r0, #4
 800fd06:	f7fe fed0 	bl	800eaaa <xQueueGenericCreate>
 800fd0a:	4b04      	ldr	r3, [pc, #16]	; (800fd1c <prvCheckForValidListAndQueue+0x48>)
 800fd0c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d0e7      	beq.n	800fce2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fd12:	4907      	ldr	r1, [pc, #28]	; (800fd30 <prvCheckForValidListAndQueue+0x5c>)
 800fd14:	f7ff f892 	bl	800ee3c <vQueueAddToRegistry>
 800fd18:	e7e3      	b.n	800fce2 <prvCheckForValidListAndQueue+0xe>
 800fd1a:	46c0      	nop			; (mov r8, r8)
 800fd1c:	20001788 	.word	0x20001788
 800fd20:	2000175c 	.word	0x2000175c
 800fd24:	20001770 	.word	0x20001770
 800fd28:	20001754 	.word	0x20001754
 800fd2c:	20001758 	.word	0x20001758
 800fd30:	0801a254 	.word	0x0801a254

0800fd34 <xTimerCreateTimerTask>:
{
 800fd34:	b500      	push	{lr}
 800fd36:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fd38:	f7ff ffcc 	bl	800fcd4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fd3c:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <xTimerCreateTimerTask+0x30>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
BaseType_t xReturn = pdFAIL;
 800fd40:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d00b      	beq.n	800fd5e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800fd46:	2300      	movs	r3, #0
 800fd48:	9303      	str	r3, [sp, #12]
 800fd4a:	9302      	str	r3, [sp, #8]
 800fd4c:	9301      	str	r3, [sp, #4]
 800fd4e:	3303      	adds	r3, #3
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	2300      	movs	r3, #0
 800fd54:	22a0      	movs	r2, #160	; 0xa0
 800fd56:	4904      	ldr	r1, [pc, #16]	; (800fd68 <xTimerCreateTimerTask+0x34>)
 800fd58:	4804      	ldr	r0, [pc, #16]	; (800fd6c <xTimerCreateTimerTask+0x38>)
 800fd5a:	f7ff f953 	bl	800f004 <xTaskGenericCreate>
}
 800fd5e:	b005      	add	sp, #20
 800fd60:	bd00      	pop	{pc}
 800fd62:	46c0      	nop			; (mov r8, r8)
 800fd64:	20001788 	.word	0x20001788
 800fd68:	0801a25c 	.word	0x0801a25c
 800fd6c:	0800fead 	.word	0x0800fead

0800fd70 <xTimerCreate>:
{
 800fd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd72:	b083      	sub	sp, #12
 800fd74:	0007      	movs	r7, r0
 800fd76:	000d      	movs	r5, r1
 800fd78:	0016      	movs	r6, r2
 800fd7a:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fd7c:	2900      	cmp	r1, #0
 800fd7e:	d013      	beq.n	800fda8 <xTimerCreate+0x38>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fd80:	202c      	movs	r0, #44	; 0x2c
 800fd82:	f000 fa29 	bl	80101d8 <pvPortMalloc>
 800fd86:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fd88:	d00b      	beq.n	800fda2 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
 800fd8a:	f7ff ffa3 	bl	800fcd4 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fd8e:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fd90:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fd92:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fd94:	9b01      	ldr	r3, [sp, #4]
 800fd96:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fd98:	9b08      	ldr	r3, [sp, #32]
 800fd9a:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fd9c:	1d20      	adds	r0, r4, #4
 800fd9e:	f7fe fd88 	bl	800e8b2 <vListInitialiseItem>
}
 800fda2:	0020      	movs	r0, r4
 800fda4:	b003      	add	sp, #12
 800fda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800fda8:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800fdaa:	e7fa      	b.n	800fda2 <xTimerCreate+0x32>

0800fdac <xTimerGenericCommand>:
{
 800fdac:	b530      	push	{r4, r5, lr}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fdb2:	4b13      	ldr	r3, [pc, #76]	; (800fe00 <xTimerGenericCommand+0x54>)
 800fdb4:	681c      	ldr	r4, [r3, #0]
 800fdb6:	2c00      	cmp	r4, #0
 800fdb8:	d020      	beq.n	800fdfc <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fdba:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fdbc:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fdbe:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fdc0:	2905      	cmp	r1, #5
 800fdc2:	dc13      	bgt.n	800fdec <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fdc4:	f7ff fd82 	bl	800f8cc <xTaskGetSchedulerState>
 800fdc8:	2802      	cmp	r0, #2
 800fdca:	d007      	beq.n	800fddc <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fdcc:	4b0c      	ldr	r3, [pc, #48]	; (800fe00 <xTimerGenericCommand+0x54>)
 800fdce:	6818      	ldr	r0, [r3, #0]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	4669      	mov	r1, sp
 800fdd6:	f7fe fe92 	bl	800eafe <xQueueGenericSend>
 800fdda:	e00d      	b.n	800fdf8 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fddc:	4b08      	ldr	r3, [pc, #32]	; (800fe00 <xTimerGenericCommand+0x54>)
 800fdde:	6818      	ldr	r0, [r3, #0]
 800fde0:	2300      	movs	r3, #0
 800fde2:	9a08      	ldr	r2, [sp, #32]
 800fde4:	4669      	mov	r1, sp
 800fde6:	f7fe fe8a 	bl	800eafe <xQueueGenericSend>
 800fdea:	e005      	b.n	800fdf8 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fdec:	2300      	movs	r3, #0
 800fdee:	002a      	movs	r2, r5
 800fdf0:	4669      	mov	r1, sp
 800fdf2:	0020      	movs	r0, r4
 800fdf4:	f7fe feff 	bl	800ebf6 <xQueueGenericSendFromISR>
}
 800fdf8:	b005      	add	sp, #20
 800fdfa:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fdfc:	2000      	movs	r0, #0
	return xReturn;
 800fdfe:	e7fb      	b.n	800fdf8 <xTimerGenericCommand+0x4c>
 800fe00:	20001788 	.word	0x20001788

0800fe04 <prvSampleTimeNow>:
{
 800fe04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe06:	46d6      	mov	lr, sl
 800fe08:	464f      	mov	r7, r9
 800fe0a:	4646      	mov	r6, r8
 800fe0c:	b5c0      	push	{r6, r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800fe12:	f7ff fa79 	bl	800f308 <xTaskGetTickCount>
 800fe16:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800fe18:	4b21      	ldr	r3, [pc, #132]	; (800fea0 <prvSampleTimeNow+0x9c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4283      	cmp	r3, r0
 800fe1e:	d80b      	bhi.n	800fe38 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800fe20:	2300      	movs	r3, #0
 800fe22:	4642      	mov	r2, r8
 800fe24:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800fe26:	4b1e      	ldr	r3, [pc, #120]	; (800fea0 <prvSampleTimeNow+0x9c>)
 800fe28:	601f      	str	r7, [r3, #0]
}
 800fe2a:	0038      	movs	r0, r7
 800fe2c:	b004      	add	sp, #16
 800fe2e:	bc1c      	pop	{r2, r3, r4}
 800fe30:	4690      	mov	r8, r2
 800fe32:	4699      	mov	r9, r3
 800fe34:	46a2      	mov	sl, r4
 800fe36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe38:	4e1a      	ldr	r6, [pc, #104]	; (800fea4 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe3e:	6833      	ldr	r3, [r6, #0]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	2a00      	cmp	r2, #0
 800fe44:	d023      	beq.n	800fe8e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe4c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe4e:	1d25      	adds	r5, r4, #4
 800fe50:	0028      	movs	r0, r5
 800fe52:	f7fe fd54 	bl	800e8fe <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe56:	0020      	movs	r0, r4
 800fe58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe5a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fe5c:	69e3      	ldr	r3, [r4, #28]
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d1ed      	bne.n	800fe3e <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fe62:	69a3      	ldr	r3, [r4, #24]
 800fe64:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800fe66:	459a      	cmp	sl, r3
 800fe68:	d209      	bcs.n	800fe7e <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fe6a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fe6c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	; (800fea4 <prvSampleTimeNow+0xa0>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	9303      	str	r3, [sp, #12]
 800fe74:	0029      	movs	r1, r5
 800fe76:	0018      	movs	r0, r3
 800fe78:	f7fe fd2a 	bl	800e8d0 <vListInsert>
 800fe7c:	e7df      	b.n	800fe3e <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe7e:	464b      	mov	r3, r9
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	4652      	mov	r2, sl
 800fe84:	4649      	mov	r1, r9
 800fe86:	0020      	movs	r0, r4
 800fe88:	f7ff ff90 	bl	800fdac <xTimerGenericCommand>
 800fe8c:	e7d7      	b.n	800fe3e <prvSampleTimeNow+0x3a>
	pxCurrentTimerList = pxOverflowTimerList;
 800fe8e:	4a06      	ldr	r2, [pc, #24]	; (800fea8 <prvSampleTimeNow+0xa4>)
 800fe90:	4904      	ldr	r1, [pc, #16]	; (800fea4 <prvSampleTimeNow+0xa0>)
 800fe92:	6810      	ldr	r0, [r2, #0]
 800fe94:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800fe96:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	4642      	mov	r2, r8
 800fe9c:	6013      	str	r3, [r2, #0]
 800fe9e:	e7c2      	b.n	800fe26 <prvSampleTimeNow+0x22>
 800fea0:	20001784 	.word	0x20001784
 800fea4:	20001754 	.word	0x20001754
 800fea8:	20001758 	.word	0x20001758

0800feac <prvTimerTask>:
{
 800feac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feae:	46c6      	mov	lr, r8
 800feb0:	b500      	push	{lr}
 800feb2:	b08c      	sub	sp, #48	; 0x30
		xNextExpireTime = ( TickType_t ) 0U;
 800feb4:	2400      	movs	r4, #0
			switch( xMessage.xMessageID )
 800feb6:	4f55      	ldr	r7, [pc, #340]	; (801000c <prvTimerTask+0x160>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800feb8:	4b55      	ldr	r3, [pc, #340]	; (8010010 <prvTimerTask+0x164>)
 800feba:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800febc:	681a      	ldr	r2, [r3, #0]
 800febe:	2a00      	cmp	r2, #0
 800fec0:	d100      	bne.n	800fec4 <prvTimerTask+0x18>
 800fec2:	e096      	b.n	800fff2 <prvTimerTask+0x146>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 800fec8:	f7ff fa16 	bl	800f2f8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fecc:	a808      	add	r0, sp, #32
 800fece:	f7ff ff99 	bl	800fe04 <prvSampleTimeNow>
 800fed2:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fed4:	9b08      	ldr	r3, [sp, #32]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d000      	beq.n	800fedc <prvTimerTask+0x30>
 800feda:	e093      	b.n	8010004 <prvTimerTask+0x158>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fedc:	42a8      	cmp	r0, r5
 800fede:	d233      	bcs.n	800ff48 <prvTimerTask+0x9c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fee0:	1ba9      	subs	r1, r5, r6
 800fee2:	4b4c      	ldr	r3, [pc, #304]	; (8010014 <prvTimerTask+0x168>)
 800fee4:	6818      	ldr	r0, [r3, #0]
 800fee6:	f7fe ffc1 	bl	800ee6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800feea:	f7ff faa9 	bl	800f440 <xTaskResumeAll>
 800feee:	2800      	cmp	r0, #0
 800fef0:	d051      	beq.n	800ff96 <prvTimerTask+0xea>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fef2:	4d48      	ldr	r5, [pc, #288]	; (8010014 <prvTimerTask+0x168>)
 800fef4:	0023      	movs	r3, r4
 800fef6:	0022      	movs	r2, r4
 800fef8:	a908      	add	r1, sp, #32
 800fefa:	6828      	ldr	r0, [r5, #0]
 800fefc:	f7fe fedb 	bl	800ecb6 <xQueueGenericReceive>
 800ff00:	2800      	cmp	r0, #0
 800ff02:	d0d9      	beq.n	800feb8 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ff04:	9b08      	ldr	r3, [sp, #32]
 800ff06:	9303      	str	r3, [sp, #12]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	da0c      	bge.n	800ff26 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff0e:	9303      	str	r3, [sp, #12]
 800ff10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff12:	9304      	str	r3, [sp, #16]
 800ff14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff16:	9305      	str	r3, [sp, #20]
 800ff18:	9903      	ldr	r1, [sp, #12]
 800ff1a:	9804      	ldr	r0, [sp, #16]
 800ff1c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff1e:	9b08      	ldr	r3, [sp, #32]
 800ff20:	9303      	str	r3, [sp, #12]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	dbe6      	blt.n	800fef4 <prvTimerTask+0x48>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ff26:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800ff28:	6973      	ldr	r3, [r6, #20]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d002      	beq.n	800ff34 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff2e:	1d30      	adds	r0, r6, #4
 800ff30:	f7fe fce5 	bl	800e8fe <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ff34:	a807      	add	r0, sp, #28
 800ff36:	f7ff ff65 	bl	800fe04 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ff3a:	9b08      	ldr	r3, [sp, #32]
 800ff3c:	9303      	str	r3, [sp, #12]
 800ff3e:	2b09      	cmp	r3, #9
 800ff40:	d8d8      	bhi.n	800fef4 <prvTimerTask+0x48>
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	58fb      	ldr	r3, [r7, r3]
 800ff46:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800ff48:	f7ff fa7a 	bl	800f440 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff4c:	4b30      	ldr	r3, [pc, #192]	; (8010010 <prvTimerTask+0x164>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	4698      	mov	r8, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff56:	1d18      	adds	r0, r3, #4
 800ff58:	f7fe fcd1 	bl	800e8fe <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ff5c:	4643      	mov	r3, r8
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d004      	beq.n	800ff6e <prvTimerTask+0xc2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff64:	4643      	mov	r3, r8
 800ff66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff68:	4640      	mov	r0, r8
 800ff6a:	4798      	blx	r3
 800ff6c:	e7c1      	b.n	800fef2 <prvTimerTask+0x46>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800ff6e:	4643      	mov	r3, r8
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	18e9      	adds	r1, r5, r3
 800ff74:	002b      	movs	r3, r5
 800ff76:	0032      	movs	r2, r6
 800ff78:	4640      	mov	r0, r8
 800ff7a:	f7ff fe89 	bl	800fc90 <prvInsertTimerInActiveList>
 800ff7e:	2801      	cmp	r0, #1
 800ff80:	d1f0      	bne.n	800ff64 <prvTimerTask+0xb8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff82:	9400      	str	r4, [sp, #0]
 800ff84:	0023      	movs	r3, r4
 800ff86:	002a      	movs	r2, r5
 800ff88:	0021      	movs	r1, r4
 800ff8a:	4640      	mov	r0, r8
 800ff8c:	f7ff ff0e 	bl	800fdac <xTimerGenericCommand>
 800ff90:	e7e8      	b.n	800ff64 <prvTimerTask+0xb8>
		xNextExpireTime = ( TickType_t ) 0U;
 800ff92:	0025      	movs	r5, r4
 800ff94:	e7a4      	b.n	800fee0 <prvTimerTask+0x34>
					portYIELD_WITHIN_API();
 800ff96:	f000 f897 	bl	80100c8 <vPortYield>
 800ff9a:	e7aa      	b.n	800fef2 <prvTimerTask+0x46>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800ff9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff9e:	69b2      	ldr	r2, [r6, #24]
 800ffa0:	4694      	mov	ip, r2
 800ffa2:	4463      	add	r3, ip
 800ffa4:	0019      	movs	r1, r3
 800ffa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa8:	0002      	movs	r2, r0
 800ffaa:	0030      	movs	r0, r6
 800ffac:	f7ff fe70 	bl	800fc90 <prvInsertTimerInActiveList>
 800ffb0:	2801      	cmp	r0, #1
 800ffb2:	d19f      	bne.n	800fef4 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ffb4:	0030      	movs	r0, r6
 800ffb6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ffb8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ffba:	69f3      	ldr	r3, [r6, #28]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d199      	bne.n	800fef4 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ffc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc2:	69b1      	ldr	r1, [r6, #24]
 800ffc4:	468c      	mov	ip, r1
 800ffc6:	4463      	add	r3, ip
 800ffc8:	001a      	movs	r2, r3
 800ffca:	9400      	str	r4, [sp, #0]
 800ffcc:	0023      	movs	r3, r4
 800ffce:	0021      	movs	r1, r4
 800ffd0:	0030      	movs	r0, r6
 800ffd2:	f7ff feeb 	bl	800fdac <xTimerGenericCommand>
 800ffd6:	e78d      	b.n	800fef4 <prvTimerTask+0x48>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ffd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ffda:	61b1      	str	r1, [r6, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ffdc:	1841      	adds	r1, r0, r1
 800ffde:	0003      	movs	r3, r0
 800ffe0:	0002      	movs	r2, r0
 800ffe2:	0030      	movs	r0, r6
 800ffe4:	f7ff fe54 	bl	800fc90 <prvInsertTimerInActiveList>
 800ffe8:	e784      	b.n	800fef4 <prvTimerTask+0x48>
					vPortFree( pxTimer );
 800ffea:	0030      	movs	r0, r6
 800ffec:	f000 f982 	bl	80102f4 <vPortFree>
 800fff0:	e780      	b.n	800fef4 <prvTimerTask+0x48>
	vTaskSuspendAll();
 800fff2:	f7ff f981 	bl	800f2f8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fff6:	a808      	add	r0, sp, #32
 800fff8:	f7ff ff04 	bl	800fe04 <prvSampleTimeNow>
 800fffc:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fffe:	9b08      	ldr	r3, [sp, #32]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d0c6      	beq.n	800ff92 <prvTimerTask+0xe6>
			( void ) xTaskResumeAll();
 8010004:	f7ff fa1c 	bl	800f440 <xTaskResumeAll>
 8010008:	e773      	b.n	800fef2 <prvTimerTask+0x46>
 801000a:	46c0      	nop			; (mov r8, r8)
 801000c:	0801a22c 	.word	0x0801a22c
 8010010:	20001754 	.word	0x20001754
 8010014:	20001788 	.word	0x20001788

08010018 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010018:	b510      	push	{r4, lr}
 801001a:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 801001c:	f000 f860 	bl	80100e0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010020:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010022:	f000 f869 	bl	80100f8 <vPortExitCritical>

	return pvReturn;
}
 8010026:	0020      	movs	r0, r4
 8010028:	bd10      	pop	{r4, pc}

0801002a <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 801002a:	b672      	cpsid	i
 801002c:	e7fe      	b.n	801002c <prvTaskExitError+0x2>
	...

08010030 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010030:	4a06      	ldr	r2, [pc, #24]	; (801004c <pxCurrentTCBConst2>)
 8010032:	6813      	ldr	r3, [r2, #0]
 8010034:	6818      	ldr	r0, [r3, #0]
 8010036:	3020      	adds	r0, #32
 8010038:	f380 8809 	msr	PSP, r0
 801003c:	2002      	movs	r0, #2
 801003e:	f380 8814 	msr	CONTROL, r0
 8010042:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010044:	46ae      	mov	lr, r5
 8010046:	b662      	cpsie	i
 8010048:	bd00      	pop	{pc}
 801004a:	46c0      	nop			; (mov r8, r8)

0801004c <pxCurrentTCBConst2>:
 801004c:	2000162c 	.word	0x2000162c

08010050 <pxPortInitialiseStack>:
{
 8010050:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010052:	1f03      	subs	r3, r0, #4
 8010054:	2480      	movs	r4, #128	; 0x80
 8010056:	0464      	lsls	r4, r4, #17
 8010058:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801005a:	3b04      	subs	r3, #4
 801005c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801005e:	3b04      	subs	r3, #4
 8010060:	4902      	ldr	r1, [pc, #8]	; (801006c <pxPortInitialiseStack+0x1c>)
 8010062:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010064:	3b14      	subs	r3, #20
 8010066:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010068:	3840      	subs	r0, #64	; 0x40
}
 801006a:	bd10      	pop	{r4, pc}
 801006c:	0801002b 	.word	0x0801002b

08010070 <SVC_Handler>:
}
 8010070:	4770      	bx	lr
	...

08010074 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010074:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010076:	4b0f      	ldr	r3, [pc, #60]	; (80100b4 <xPortStartScheduler+0x40>)
 8010078:	6819      	ldr	r1, [r3, #0]
 801007a:	22ff      	movs	r2, #255	; 0xff
 801007c:	0412      	lsls	r2, r2, #16
 801007e:	430a      	orrs	r2, r1
 8010080:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010082:	6819      	ldr	r1, [r3, #0]
 8010084:	22ff      	movs	r2, #255	; 0xff
 8010086:	0612      	lsls	r2, r2, #24
 8010088:	430a      	orrs	r2, r1
 801008a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801008c:	4b0a      	ldr	r3, [pc, #40]	; (80100b8 <xPortStartScheduler+0x44>)
 801008e:	6818      	ldr	r0, [r3, #0]
 8010090:	21fa      	movs	r1, #250	; 0xfa
 8010092:	0089      	lsls	r1, r1, #2
 8010094:	f7f0 f852 	bl	800013c <__udivsi3>
 8010098:	3801      	subs	r0, #1
 801009a:	4b08      	ldr	r3, [pc, #32]	; (80100bc <xPortStartScheduler+0x48>)
 801009c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801009e:	4b08      	ldr	r3, [pc, #32]	; (80100c0 <xPortStartScheduler+0x4c>)
 80100a0:	2207      	movs	r2, #7
 80100a2:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80100a4:	4b07      	ldr	r3, [pc, #28]	; (80100c4 <xPortStartScheduler+0x50>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80100aa:	f7ff ffc1 	bl	8010030 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 80100ae:	b672      	cpsid	i
 80100b0:	e7fe      	b.n	80100b0 <xPortStartScheduler+0x3c>
 80100b2:	46c0      	nop			; (mov r8, r8)
 80100b4:	e000ed20 	.word	0xe000ed20
 80100b8:	200000a8 	.word	0x200000a8
 80100bc:	e000e014 	.word	0xe000e014
 80100c0:	e000e010 	.word	0xe000e010
 80100c4:	200000bc 	.word	0x200000bc

080100c8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80100c8:	4b04      	ldr	r3, [pc, #16]	; (80100dc <vPortYield+0x14>)
 80100ca:	2280      	movs	r2, #128	; 0x80
 80100cc:	0552      	lsls	r2, r2, #21
 80100ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80100d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80100d4:	f3bf 8f6f 	isb	sy
}
 80100d8:	4770      	bx	lr
 80100da:	46c0      	nop			; (mov r8, r8)
 80100dc:	e000ed04 	.word	0xe000ed04

080100e0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80100e0:	b672      	cpsid	i
    uxCriticalNesting++;
 80100e2:	4a04      	ldr	r2, [pc, #16]	; (80100f4 <vPortEnterCritical+0x14>)
 80100e4:	6813      	ldr	r3, [r2, #0]
 80100e6:	3301      	adds	r3, #1
 80100e8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 80100ea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80100ee:	f3bf 8f6f 	isb	sy
}
 80100f2:	4770      	bx	lr
 80100f4:	200000bc 	.word	0x200000bc

080100f8 <vPortExitCritical>:
    uxCriticalNesting--;
 80100f8:	4a03      	ldr	r2, [pc, #12]	; (8010108 <vPortExitCritical+0x10>)
 80100fa:	6813      	ldr	r3, [r2, #0]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010100:	2b00      	cmp	r3, #0
 8010102:	d100      	bne.n	8010106 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 8010104:	b662      	cpsie	i
}
 8010106:	4770      	bx	lr
 8010108:	200000bc 	.word	0x200000bc

0801010c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 801010c:	f3ef 8010 	mrs	r0, PRIMASK
 8010110:	b672      	cpsid	i
 8010112:	4770      	bx	lr
}
 8010114:	2000      	movs	r0, #0

08010116 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010116:	f380 8810 	msr	PRIMASK, r0
 801011a:	4770      	bx	lr

0801011c <PendSV_Handler>:
	__asm volatile
 801011c:	f3ef 8009 	mrs	r0, PSP
 8010120:	4b0e      	ldr	r3, [pc, #56]	; (801015c <pxCurrentTCBConst>)
 8010122:	681a      	ldr	r2, [r3, #0]
 8010124:	3820      	subs	r0, #32
 8010126:	6010      	str	r0, [r2, #0]
 8010128:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801012a:	4644      	mov	r4, r8
 801012c:	464d      	mov	r5, r9
 801012e:	4656      	mov	r6, sl
 8010130:	465f      	mov	r7, fp
 8010132:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010134:	b508      	push	{r3, lr}
 8010136:	b672      	cpsid	i
 8010138:	f7ff fa9e 	bl	800f678 <vTaskSwitchContext>
 801013c:	b662      	cpsie	i
 801013e:	bc0c      	pop	{r2, r3}
 8010140:	6811      	ldr	r1, [r2, #0]
 8010142:	6808      	ldr	r0, [r1, #0]
 8010144:	3010      	adds	r0, #16
 8010146:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010148:	46a0      	mov	r8, r4
 801014a:	46a9      	mov	r9, r5
 801014c:	46b2      	mov	sl, r6
 801014e:	46bb      	mov	fp, r7
 8010150:	f380 8809 	msr	PSP, r0
 8010154:	3820      	subs	r0, #32
 8010156:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010158:	4718      	bx	r3
 801015a:	46c0      	nop			; (mov r8, r8)

0801015c <pxCurrentTCBConst>:
 801015c:	2000162c 	.word	0x2000162c

08010160 <xPortSysTickHandler>:
{
 8010160:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010162:	f7ff ffd3 	bl	801010c <ulSetInterruptMaskFromISR>
 8010166:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010168:	f7ff f8da 	bl	800f320 <xTaskIncrementTick>
 801016c:	2800      	cmp	r0, #0
 801016e:	d003      	beq.n	8010178 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010170:	4b03      	ldr	r3, [pc, #12]	; (8010180 <xPortSysTickHandler+0x20>)
 8010172:	2280      	movs	r2, #128	; 0x80
 8010174:	0552      	lsls	r2, r2, #21
 8010176:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010178:	0020      	movs	r0, r4
 801017a:	f7ff ffcc 	bl	8010116 <vClearInterruptMaskFromISR>
}
 801017e:	bd10      	pop	{r4, pc}
 8010180:	e000ed04 	.word	0xe000ed04

08010184 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010184:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010186:	4a12      	ldr	r2, [pc, #72]	; (80101d0 <prvInsertBlockIntoFreeList+0x4c>)
 8010188:	e000      	b.n	801018c <prvInsertBlockIntoFreeList+0x8>
 801018a:	001a      	movs	r2, r3
 801018c:	6813      	ldr	r3, [r2, #0]
 801018e:	4283      	cmp	r3, r0
 8010190:	d3fb      	bcc.n	801018a <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010192:	6851      	ldr	r1, [r2, #4]
 8010194:	1854      	adds	r4, r2, r1
 8010196:	42a0      	cmp	r0, r4
 8010198:	d008      	beq.n	80101ac <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801019a:	6841      	ldr	r1, [r0, #4]
 801019c:	1844      	adds	r4, r0, r1
 801019e:	42a3      	cmp	r3, r4
 80101a0:	d009      	beq.n	80101b6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80101a2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80101a4:	4290      	cmp	r0, r2
 80101a6:	d000      	beq.n	80101aa <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80101a8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101aa:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80101ac:	6840      	ldr	r0, [r0, #4]
 80101ae:	1841      	adds	r1, r0, r1
 80101b0:	6051      	str	r1, [r2, #4]
 80101b2:	0010      	movs	r0, r2
 80101b4:	e7f1      	b.n	801019a <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80101b6:	4c07      	ldr	r4, [pc, #28]	; (80101d4 <prvInsertBlockIntoFreeList+0x50>)
 80101b8:	6824      	ldr	r4, [r4, #0]
 80101ba:	42a3      	cmp	r3, r4
 80101bc:	d006      	beq.n	80101cc <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	1859      	adds	r1, r3, r1
 80101c2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80101c4:	6813      	ldr	r3, [r2, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	6003      	str	r3, [r0, #0]
 80101ca:	e7eb      	b.n	80101a4 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80101cc:	6003      	str	r3, [r0, #0]
 80101ce:	e7e9      	b.n	80101a4 <prvInsertBlockIntoFreeList+0x20>
 80101d0:	200061d4 	.word	0x200061d4
 80101d4:	2000178c 	.word	0x2000178c

080101d8 <pvPortMalloc>:
{
 80101d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101da:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80101dc:	f7ff f88c 	bl	800f2f8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80101e0:	4b3d      	ldr	r3, [pc, #244]	; (80102d8 <pvPortMalloc+0x100>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d015      	beq.n	8010214 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80101e8:	4b3c      	ldr	r3, [pc, #240]	; (80102dc <pvPortMalloc+0x104>)
 80101ea:	681e      	ldr	r6, [r3, #0]
 80101ec:	4234      	tst	r4, r6
 80101ee:	d136      	bne.n	801025e <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 80101f0:	2c00      	cmp	r4, #0
 80101f2:	d03b      	beq.n	801026c <pvPortMalloc+0x94>
				xWantedSize += xHeapStructSize;
 80101f4:	0022      	movs	r2, r4
 80101f6:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80101f8:	0753      	lsls	r3, r2, #29
 80101fa:	d002      	beq.n	8010202 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80101fc:	2307      	movs	r3, #7
 80101fe:	439a      	bics	r2, r3
 8010200:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010202:	2a00      	cmp	r2, #0
 8010204:	d032      	beq.n	801026c <pvPortMalloc+0x94>
 8010206:	4b36      	ldr	r3, [pc, #216]	; (80102e0 <pvPortMalloc+0x108>)
 8010208:	681f      	ldr	r7, [r3, #0]
 801020a:	4297      	cmp	r7, r2
 801020c:	d331      	bcc.n	8010272 <pvPortMalloc+0x9a>
				pxBlock = xStart.pxNextFreeBlock;
 801020e:	4935      	ldr	r1, [pc, #212]	; (80102e4 <pvPortMalloc+0x10c>)
 8010210:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010212:	e033      	b.n	801027c <pvPortMalloc+0xa4>
	ulAddress = ( uint32_t ) ucHeap;
 8010214:	4a34      	ldr	r2, [pc, #208]	; (80102e8 <pvPortMalloc+0x110>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010216:	0753      	lsls	r3, r2, #29
 8010218:	d01f      	beq.n	801025a <pvPortMalloc+0x82>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 801021a:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801021c:	2307      	movs	r3, #7
 801021e:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010220:	4b32      	ldr	r3, [pc, #200]	; (80102ec <pvPortMalloc+0x114>)
 8010222:	469c      	mov	ip, r3
 8010224:	4462      	add	r2, ip
 8010226:	1a53      	subs	r3, r2, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010228:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801022a:	482e      	ldr	r0, [pc, #184]	; (80102e4 <pvPortMalloc+0x10c>)
 801022c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801022e:	2100      	movs	r1, #0
 8010230:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010232:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010234:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010236:	2007      	movs	r0, #7
 8010238:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 801023a:	4827      	ldr	r0, [pc, #156]	; (80102d8 <pvPortMalloc+0x100>)
 801023c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801023e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010240:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010242:	1a99      	subs	r1, r3, r2
 8010244:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010246:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010248:	4b29      	ldr	r3, [pc, #164]	; (80102f0 <pvPortMalloc+0x118>)
 801024a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801024c:	4b24      	ldr	r3, [pc, #144]	; (80102e0 <pvPortMalloc+0x108>)
 801024e:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010250:	4b22      	ldr	r3, [pc, #136]	; (80102dc <pvPortMalloc+0x104>)
 8010252:	2280      	movs	r2, #128	; 0x80
 8010254:	0612      	lsls	r2, r2, #24
 8010256:	601a      	str	r2, [r3, #0]
 8010258:	e7c6      	b.n	80101e8 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801025a:	4b24      	ldr	r3, [pc, #144]	; (80102ec <pvPortMalloc+0x114>)
 801025c:	e7e5      	b.n	801022a <pvPortMalloc+0x52>
	( void ) xTaskResumeAll();
 801025e:	f7ff f8ef 	bl	800f440 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010262:	f7fd fc9d 	bl	800dba0 <vApplicationMallocFailedHook>
 8010266:	2500      	movs	r5, #0
}
 8010268:	0028      	movs	r0, r5
 801026a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 801026c:	f7ff f8e8 	bl	800f440 <xTaskResumeAll>
 8010270:	e7f7      	b.n	8010262 <pvPortMalloc+0x8a>
 8010272:	f7ff f8e5 	bl	800f440 <xTaskResumeAll>
 8010276:	e7f4      	b.n	8010262 <pvPortMalloc+0x8a>
 8010278:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 801027a:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801027c:	6863      	ldr	r3, [r4, #4]
 801027e:	4293      	cmp	r3, r2
 8010280:	d202      	bcs.n	8010288 <pvPortMalloc+0xb0>
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d1f7      	bne.n	8010278 <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 8010288:	4b13      	ldr	r3, [pc, #76]	; (80102d8 <pvPortMalloc+0x100>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	42a3      	cmp	r3, r4
 801028e:	d01a      	beq.n	80102c6 <pvPortMalloc+0xee>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010290:	680d      	ldr	r5, [r1, #0]
 8010292:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010298:	6863      	ldr	r3, [r4, #4]
 801029a:	1a9b      	subs	r3, r3, r2
 801029c:	2b10      	cmp	r3, #16
 801029e:	d815      	bhi.n	80102cc <pvPortMalloc+0xf4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80102a0:	6863      	ldr	r3, [r4, #4]
 80102a2:	1aff      	subs	r7, r7, r3
 80102a4:	4a0e      	ldr	r2, [pc, #56]	; (80102e0 <pvPortMalloc+0x108>)
 80102a6:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80102a8:	4a11      	ldr	r2, [pc, #68]	; (80102f0 <pvPortMalloc+0x118>)
 80102aa:	6812      	ldr	r2, [r2, #0]
 80102ac:	4297      	cmp	r7, r2
 80102ae:	d201      	bcs.n	80102b4 <pvPortMalloc+0xdc>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80102b0:	4a0f      	ldr	r2, [pc, #60]	; (80102f0 <pvPortMalloc+0x118>)
 80102b2:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80102b4:	431e      	orrs	r6, r3
 80102b6:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80102b8:	2300      	movs	r3, #0
 80102ba:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80102bc:	f7ff f8c0 	bl	800f440 <xTaskResumeAll>
		if( pvReturn == NULL )
 80102c0:	2d00      	cmp	r5, #0
 80102c2:	d1d1      	bne.n	8010268 <pvPortMalloc+0x90>
 80102c4:	e7cd      	b.n	8010262 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 80102c6:	f7ff f8bb 	bl	800f440 <xTaskResumeAll>
 80102ca:	e7ca      	b.n	8010262 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80102cc:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80102ce:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80102d0:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80102d2:	f7ff ff57 	bl	8010184 <prvInsertBlockIntoFreeList>
 80102d6:	e7e3      	b.n	80102a0 <pvPortMalloc+0xc8>
 80102d8:	2000178c 	.word	0x2000178c
 80102dc:	200061c8 	.word	0x200061c8
 80102e0:	200061cc 	.word	0x200061cc
 80102e4:	200061d4 	.word	0x200061d4
 80102e8:	20001790 	.word	0x20001790
 80102ec:	00004a38 	.word	0x00004a38
 80102f0:	200061d0 	.word	0x200061d0

080102f4 <vPortFree>:
{
 80102f4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d00b      	beq.n	8010312 <vPortFree+0x1e>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80102fa:	0003      	movs	r3, r0
 80102fc:	3b08      	subs	r3, #8
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	4a0d      	ldr	r2, [pc, #52]	; (8010338 <vPortFree+0x44>)
 8010302:	6812      	ldr	r2, [r2, #0]
 8010304:	421a      	tst	r2, r3
 8010306:	d004      	beq.n	8010312 <vPortFree+0x1e>
			if( pxLink->pxNextFreeBlock == NULL )
 8010308:	0001      	movs	r1, r0
 801030a:	3908      	subs	r1, #8
 801030c:	6809      	ldr	r1, [r1, #0]
 801030e:	2900      	cmp	r1, #0
 8010310:	d000      	beq.n	8010314 <vPortFree+0x20>
}
 8010312:	bd10      	pop	{r4, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010314:	3808      	subs	r0, #8
 8010316:	0004      	movs	r4, r0
 8010318:	4393      	bics	r3, r2
 801031a:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 801031c:	f7fe ffec 	bl	800f2f8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010320:	4a06      	ldr	r2, [pc, #24]	; (801033c <vPortFree+0x48>)
 8010322:	6863      	ldr	r3, [r4, #4]
 8010324:	6811      	ldr	r1, [r2, #0]
 8010326:	468c      	mov	ip, r1
 8010328:	4463      	add	r3, ip
 801032a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801032c:	0020      	movs	r0, r4
 801032e:	f7ff ff29 	bl	8010184 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010332:	f7ff f885 	bl	800f440 <xTaskResumeAll>
}
 8010336:	e7ec      	b.n	8010312 <vPortFree+0x1e>
 8010338:	200061c8 	.word	0x200061c8
 801033c:	200061cc 	.word	0x200061cc

08010340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010340:	b510      	push	{r4, lr}
 8010342:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010344:	f002 f8ee 	bl	8012524 <HAL_RCC_GetHCLKFreq>
 8010348:	21fa      	movs	r1, #250	; 0xfa
 801034a:	0089      	lsls	r1, r1, #2
 801034c:	f7ef fef6 	bl	800013c <__udivsi3>
 8010350:	f000 fb90 	bl	8010a74 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010354:	2001      	movs	r0, #1
 8010356:	2200      	movs	r2, #0
 8010358:	0021      	movs	r1, r4
 801035a:	4240      	negs	r0, r0
 801035c:	f000 fb42 	bl	80109e4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010360:	2000      	movs	r0, #0
 8010362:	bd10      	pop	{r4, pc}

08010364 <HAL_Init>:
{
 8010364:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010366:	4a06      	ldr	r2, [pc, #24]	; (8010380 <HAL_Init+0x1c>)
 8010368:	6813      	ldr	r3, [r2, #0]
 801036a:	2110      	movs	r1, #16
 801036c:	430b      	orrs	r3, r1
 801036e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010370:	2000      	movs	r0, #0
 8010372:	f7ff ffe5 	bl	8010340 <HAL_InitTick>
  HAL_MspInit();
 8010376:	f001 fc7d 	bl	8011c74 <HAL_MspInit>
}
 801037a:	2000      	movs	r0, #0
 801037c:	bd10      	pop	{r4, pc}
 801037e:	46c0      	nop			; (mov r8, r8)
 8010380:	40022000 	.word	0x40022000

08010384 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010384:	4a02      	ldr	r2, [pc, #8]	; (8010390 <HAL_IncTick+0xc>)
 8010386:	6813      	ldr	r3, [r2, #0]
 8010388:	3301      	adds	r3, #1
 801038a:	6013      	str	r3, [r2, #0]
}
 801038c:	4770      	bx	lr
 801038e:	46c0      	nop			; (mov r8, r8)
 8010390:	200061dc 	.word	0x200061dc

08010394 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010394:	4b01      	ldr	r3, [pc, #4]	; (801039c <HAL_GetTick+0x8>)
 8010396:	6818      	ldr	r0, [r3, #0]
}
 8010398:	4770      	bx	lr
 801039a:	46c0      	nop			; (mov r8, r8)
 801039c:	200061dc 	.word	0x200061dc

080103a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80103a0:	b510      	push	{r4, lr}
 80103a2:	b082      	sub	sp, #8
 80103a4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80103a6:	f7ff fff5 	bl	8010394 <HAL_GetTick>
 80103aa:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80103ac:	f7ff fff2 	bl	8010394 <HAL_GetTick>
 80103b0:	9b01      	ldr	r3, [sp, #4]
 80103b2:	1b00      	subs	r0, r0, r4
 80103b4:	4298      	cmp	r0, r3
 80103b6:	d3f9      	bcc.n	80103ac <HAL_Delay+0xc>
  {
  }
}
 80103b8:	b002      	add	sp, #8
 80103ba:	bd10      	pop	{r4, pc}

080103bc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80103bc:	4b01      	ldr	r3, [pc, #4]	; (80103c4 <HAL_GetREVID+0x8>)
 80103be:	6818      	ldr	r0, [r3, #0]
 80103c0:	0c00      	lsrs	r0, r0, #16
}
 80103c2:	4770      	bx	lr
 80103c4:	40015800 	.word	0x40015800

080103c8 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80103c8:	4b02      	ldr	r3, [pc, #8]	; (80103d4 <HAL_GetDEVID+0xc>)
 80103ca:	6818      	ldr	r0, [r3, #0]
 80103cc:	0500      	lsls	r0, r0, #20
 80103ce:	0d00      	lsrs	r0, r0, #20
}
 80103d0:	4770      	bx	lr
 80103d2:	46c0      	nop			; (mov r8, r8)
 80103d4:	40015800 	.word	0x40015800

080103d8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80103dc:	6803      	ldr	r3, [r0, #0]
 80103de:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80103e0:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80103e2:	0752      	lsls	r2, r2, #29
 80103e4:	d521      	bpl.n	801042a <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80103e6:	689a      	ldr	r2, [r3, #8]
 80103e8:	0752      	lsls	r2, r2, #29
 80103ea:	d506      	bpl.n	80103fa <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80103ec:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80103ee:	0792      	lsls	r2, r2, #30
 80103f0:	d403      	bmi.n	80103fa <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80103f2:	689a      	ldr	r2, [r3, #8]
 80103f4:	2110      	movs	r1, #16
 80103f6:	430a      	orrs	r2, r1
 80103f8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80103fa:	f7ff ffcb 	bl	8010394 <HAL_GetTick>
 80103fe:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010400:	2504      	movs	r5, #4
 8010402:	6823      	ldr	r3, [r4, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	421d      	tst	r5, r3
 8010408:	d00e      	beq.n	8010428 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801040a:	f7ff ffc3 	bl	8010394 <HAL_GetTick>
 801040e:	1b80      	subs	r0, r0, r6
 8010410:	2802      	cmp	r0, #2
 8010412:	d9f6      	bls.n	8010402 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010414:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010416:	2210      	movs	r2, #16
 8010418:	4313      	orrs	r3, r2
 801041a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801041c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801041e:	3a0f      	subs	r2, #15
 8010420:	4313      	orrs	r3, r2
 8010422:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010424:	2001      	movs	r0, #1
 8010426:	e000      	b.n	801042a <ADC_ConversionStop+0x52>
  return HAL_OK;
 8010428:	2000      	movs	r0, #0
}
 801042a:	bd70      	pop	{r4, r5, r6, pc}

0801042c <ADC_Disable>:
{
 801042c:	b570      	push	{r4, r5, r6, lr}
 801042e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010430:	6802      	ldr	r2, [r0, #0]
 8010432:	6891      	ldr	r1, [r2, #8]
 8010434:	2303      	movs	r3, #3
 8010436:	400b      	ands	r3, r1
  return HAL_OK;
 8010438:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 801043a:	2b01      	cmp	r3, #1
 801043c:	d000      	beq.n	8010440 <ADC_Disable+0x14>
}
 801043e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010440:	6813      	ldr	r3, [r2, #0]
 8010442:	07db      	lsls	r3, r3, #31
 8010444:	d402      	bmi.n	801044c <ADC_Disable+0x20>
 8010446:	68d3      	ldr	r3, [r2, #12]
 8010448:	041b      	lsls	r3, r3, #16
 801044a:	d5f8      	bpl.n	801043e <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 801044c:	6891      	ldr	r1, [r2, #8]
 801044e:	2305      	movs	r3, #5
 8010450:	400b      	ands	r3, r1
 8010452:	2b01      	cmp	r3, #1
 8010454:	d009      	beq.n	801046a <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010456:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010458:	2210      	movs	r2, #16
 801045a:	4313      	orrs	r3, r2
 801045c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801045e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010460:	3a0f      	subs	r2, #15
 8010462:	4313      	orrs	r3, r2
 8010464:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010466:	2001      	movs	r0, #1
 8010468:	e7e9      	b.n	801043e <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 801046a:	6893      	ldr	r3, [r2, #8]
 801046c:	2102      	movs	r1, #2
 801046e:	430b      	orrs	r3, r1
 8010470:	6093      	str	r3, [r2, #8]
 8010472:	6823      	ldr	r3, [r4, #0]
 8010474:	2203      	movs	r2, #3
 8010476:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010478:	f7ff ff8c 	bl	8010394 <HAL_GetTick>
 801047c:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 801047e:	2501      	movs	r5, #1
 8010480:	6823      	ldr	r3, [r4, #0]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	421d      	tst	r5, r3
 8010486:	d00e      	beq.n	80104a6 <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010488:	f7ff ff84 	bl	8010394 <HAL_GetTick>
 801048c:	1b80      	subs	r0, r0, r6
 801048e:	2802      	cmp	r0, #2
 8010490:	d9f6      	bls.n	8010480 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010492:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010494:	2210      	movs	r2, #16
 8010496:	4313      	orrs	r3, r2
 8010498:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801049a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801049c:	3a0f      	subs	r2, #15
 801049e:	4313      	orrs	r3, r2
 80104a0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80104a2:	2001      	movs	r0, #1
 80104a4:	e7cb      	b.n	801043e <ADC_Disable+0x12>
  return HAL_OK;
 80104a6:	2000      	movs	r0, #0
 80104a8:	e7c9      	b.n	801043e <ADC_Disable+0x12>
	...

080104ac <ADC_Enable>:
{
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80104b6:	6803      	ldr	r3, [r0, #0]
 80104b8:	6899      	ldr	r1, [r3, #8]
 80104ba:	2203      	movs	r2, #3
 80104bc:	400a      	ands	r2, r1
 80104be:	2a01      	cmp	r2, #1
 80104c0:	d02d      	beq.n	801051e <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80104c2:	6899      	ldr	r1, [r3, #8]
 80104c4:	4a20      	ldr	r2, [pc, #128]	; (8010548 <ADC_Enable+0x9c>)
 80104c6:	4211      	tst	r1, r2
 80104c8:	d131      	bne.n	801052e <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 80104ca:	689a      	ldr	r2, [r3, #8]
 80104cc:	2101      	movs	r1, #1
 80104ce:	430a      	orrs	r2, r1
 80104d0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80104d2:	4b1e      	ldr	r3, [pc, #120]	; (801054c <ADC_Enable+0xa0>)
 80104d4:	6818      	ldr	r0, [r3, #0]
 80104d6:	491e      	ldr	r1, [pc, #120]	; (8010550 <ADC_Enable+0xa4>)
 80104d8:	f7ef fe30 	bl	800013c <__udivsi3>
 80104dc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 80104de:	9b01      	ldr	r3, [sp, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d005      	beq.n	80104f0 <ADC_Enable+0x44>
      wait_loop_index--;
 80104e4:	9b01      	ldr	r3, [sp, #4]
 80104e6:	3b01      	subs	r3, #1
 80104e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80104ea:	9b01      	ldr	r3, [sp, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d1f9      	bne.n	80104e4 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 80104f0:	f7ff ff50 	bl	8010394 <HAL_GetTick>
 80104f4:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80104f6:	2501      	movs	r5, #1
 80104f8:	6823      	ldr	r3, [r4, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	421d      	tst	r5, r3
 80104fe:	d121      	bne.n	8010544 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010500:	f7ff ff48 	bl	8010394 <HAL_GetTick>
 8010504:	1b80      	subs	r0, r0, r6
 8010506:	2802      	cmp	r0, #2
 8010508:	d9f6      	bls.n	80104f8 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801050a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801050c:	2210      	movs	r2, #16
 801050e:	4313      	orrs	r3, r2
 8010510:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010512:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010514:	3a0f      	subs	r2, #15
 8010516:	4313      	orrs	r3, r2
 8010518:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 801051a:	2001      	movs	r0, #1
 801051c:	e010      	b.n	8010540 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 801051e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010520:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010522:	07d2      	lsls	r2, r2, #31
 8010524:	d40c      	bmi.n	8010540 <ADC_Enable+0x94>
 8010526:	68da      	ldr	r2, [r3, #12]
 8010528:	0412      	lsls	r2, r2, #16
 801052a:	d5ca      	bpl.n	80104c2 <ADC_Enable+0x16>
 801052c:	e008      	b.n	8010540 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801052e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010530:	2210      	movs	r2, #16
 8010532:	4313      	orrs	r3, r2
 8010534:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010536:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010538:	3a0f      	subs	r2, #15
 801053a:	4313      	orrs	r3, r2
 801053c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 801053e:	2001      	movs	r0, #1
}
 8010540:	b002      	add	sp, #8
 8010542:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010544:	2000      	movs	r0, #0
 8010546:	e7fb      	b.n	8010540 <ADC_Enable+0x94>
 8010548:	80000017 	.word	0x80000017
 801054c:	200000a8 	.word	0x200000a8
 8010550:	000f4240 	.word	0x000f4240

08010554 <HAL_ADC_Init>:
{
 8010554:	b570      	push	{r4, r5, r6, lr}
 8010556:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010558:	d100      	bne.n	801055c <HAL_ADC_Init+0x8>
 801055a:	e09b      	b.n	8010694 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 801055c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801055e:	2b00      	cmp	r3, #0
 8010560:	d073      	beq.n	801064a <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010562:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010564:	06db      	lsls	r3, r3, #27
 8010566:	d500      	bpl.n	801056a <HAL_ADC_Init+0x16>
 8010568:	e08e      	b.n	8010688 <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 801056a:	6822      	ldr	r2, [r4, #0]
 801056c:	6893      	ldr	r3, [r2, #8]
 801056e:	2104      	movs	r1, #4
 8010570:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010572:	d000      	beq.n	8010576 <HAL_ADC_Init+0x22>
 8010574:	e088      	b.n	8010688 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 8010576:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010578:	4847      	ldr	r0, [pc, #284]	; (8010698 <HAL_ADC_Init+0x144>)
 801057a:	4003      	ands	r3, r0
 801057c:	3006      	adds	r0, #6
 801057e:	30ff      	adds	r0, #255	; 0xff
 8010580:	4303      	orrs	r3, r0
 8010582:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010584:	6890      	ldr	r0, [r2, #8]
 8010586:	2303      	movs	r3, #3
 8010588:	4003      	ands	r3, r0
 801058a:	2b01      	cmp	r3, #1
 801058c:	d063      	beq.n	8010656 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 801058e:	68d3      	ldr	r3, [r2, #12]
 8010590:	2018      	movs	r0, #24
 8010592:	4383      	bics	r3, r0
 8010594:	68a0      	ldr	r0, [r4, #8]
 8010596:	4303      	orrs	r3, r0
 8010598:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 801059a:	6822      	ldr	r2, [r4, #0]
 801059c:	6913      	ldr	r3, [r2, #16]
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	089b      	lsrs	r3, r3, #2
 80105a2:	6860      	ldr	r0, [r4, #4]
 80105a4:	4303      	orrs	r3, r0
 80105a6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80105a8:	6822      	ldr	r2, [r4, #0]
 80105aa:	68d3      	ldr	r3, [r2, #12]
 80105ac:	483b      	ldr	r0, [pc, #236]	; (801069c <HAL_ADC_Init+0x148>)
 80105ae:	4003      	ands	r3, r0
 80105b0:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80105b2:	69a3      	ldr	r3, [r4, #24]
 80105b4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80105b6:	69e3      	ldr	r3, [r4, #28]
 80105b8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80105ba:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80105bc:	6a20      	ldr	r0, [r4, #32]
 80105be:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80105c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105c2:	000e      	movs	r6, r1
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d001      	beq.n	80105cc <HAL_ADC_Init+0x78>
 80105c8:	2680      	movs	r6, #128	; 0x80
 80105ca:	0176      	lsls	r6, r6, #5
 80105cc:	68e3      	ldr	r3, [r4, #12]
 80105ce:	431a      	orrs	r2, r3
 80105d0:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80105d2:	6923      	ldr	r3, [r4, #16]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d045      	beq.n	8010664 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80105d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80105da:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80105dc:	4313      	orrs	r3, r2
 80105de:	4333      	orrs	r3, r6
 80105e0:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80105e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80105e4:	2a01      	cmp	r2, #1
 80105e6:	d03f      	beq.n	8010668 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80105e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80105ea:	21c2      	movs	r1, #194	; 0xc2
 80105ec:	31ff      	adds	r1, #255	; 0xff
 80105ee:	428a      	cmp	r2, r1
 80105f0:	d002      	beq.n	80105f8 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80105f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80105f4:	430a      	orrs	r2, r1
 80105f6:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80105f8:	6821      	ldr	r1, [r4, #0]
 80105fa:	68ca      	ldr	r2, [r1, #12]
 80105fc:	431a      	orrs	r2, r3
 80105fe:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010600:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010602:	2180      	movs	r1, #128	; 0x80
 8010604:	0549      	lsls	r1, r1, #21
 8010606:	428a      	cmp	r2, r1
 8010608:	d002      	beq.n	8010610 <HAL_ADC_Init+0xbc>
 801060a:	3a01      	subs	r2, #1
 801060c:	2a06      	cmp	r2, #6
 801060e:	d80a      	bhi.n	8010626 <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010610:	6820      	ldr	r0, [r4, #0]
 8010612:	6941      	ldr	r1, [r0, #20]
 8010614:	2207      	movs	r2, #7
 8010616:	4391      	bics	r1, r2
 8010618:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 801061a:	6821      	ldr	r1, [r4, #0]
 801061c:	6948      	ldr	r0, [r1, #20]
 801061e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010620:	402a      	ands	r2, r5
 8010622:	4302      	orrs	r2, r0
 8010624:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010626:	6822      	ldr	r2, [r4, #0]
 8010628:	68d2      	ldr	r2, [r2, #12]
 801062a:	491d      	ldr	r1, [pc, #116]	; (80106a0 <HAL_ADC_Init+0x14c>)
 801062c:	400a      	ands	r2, r1
 801062e:	429a      	cmp	r2, r3
 8010630:	d020      	beq.n	8010674 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010632:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010634:	2212      	movs	r2, #18
 8010636:	4393      	bics	r3, r2
 8010638:	3a02      	subs	r2, #2
 801063a:	4313      	orrs	r3, r2
 801063c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801063e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010640:	3a0f      	subs	r2, #15
 8010642:	4313      	orrs	r3, r2
 8010644:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8010646:	2001      	movs	r0, #1
 8010648:	e023      	b.n	8010692 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 801064a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 801064c:	2240      	movs	r2, #64	; 0x40
 801064e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010650:	f7fc fcd2 	bl	800cff8 <HAL_ADC_MspInit>
 8010654:	e785      	b.n	8010562 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010656:	6813      	ldr	r3, [r2, #0]
 8010658:	07db      	lsls	r3, r3, #31
 801065a:	d4a5      	bmi.n	80105a8 <HAL_ADC_Init+0x54>
 801065c:	68d3      	ldr	r3, [r2, #12]
 801065e:	041b      	lsls	r3, r3, #16
 8010660:	d4a2      	bmi.n	80105a8 <HAL_ADC_Init+0x54>
 8010662:	e794      	b.n	801058e <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010664:	2104      	movs	r1, #4
 8010666:	e7b7      	b.n	80105d8 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010668:	2800      	cmp	r0, #0
 801066a:	d1bd      	bne.n	80105e8 <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 801066c:	2280      	movs	r2, #128	; 0x80
 801066e:	0252      	lsls	r2, r2, #9
 8010670:	4313      	orrs	r3, r2
 8010672:	e7b9      	b.n	80105e8 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010674:	2300      	movs	r3, #0
 8010676:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010678:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801067a:	2203      	movs	r2, #3
 801067c:	4393      	bics	r3, r2
 801067e:	3a02      	subs	r2, #2
 8010680:	4313      	orrs	r3, r2
 8010682:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010684:	2000      	movs	r0, #0
 8010686:	e004      	b.n	8010692 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010688:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801068a:	2210      	movs	r2, #16
 801068c:	4313      	orrs	r3, r2
 801068e:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010690:	2001      	movs	r0, #1
}
 8010692:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010694:	2001      	movs	r0, #1
 8010696:	e7fc      	b.n	8010692 <HAL_ADC_Init+0x13e>
 8010698:	fffffefd 	.word	0xfffffefd
 801069c:	fffe0219 	.word	0xfffe0219
 80106a0:	833fffe7 	.word	0x833fffe7

080106a4 <HAL_ADC_Start>:
{
 80106a4:	b510      	push	{r4, lr}
 80106a6:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80106a8:	6803      	ldr	r3, [r0, #0]
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	075b      	lsls	r3, r3, #29
 80106ae:	d423      	bmi.n	80106f8 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 80106b0:	2340      	movs	r3, #64	; 0x40
 80106b2:	5cc3      	ldrb	r3, [r0, r3]
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d021      	beq.n	80106fc <HAL_ADC_Start+0x58>
 80106b8:	2340      	movs	r3, #64	; 0x40
 80106ba:	2201      	movs	r2, #1
 80106bc:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80106be:	69c3      	ldr	r3, [r0, #28]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d114      	bne.n	80106ee <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 80106c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80106c6:	4a0e      	ldr	r2, [pc, #56]	; (8010700 <HAL_ADC_Start+0x5c>)
 80106c8:	401a      	ands	r2, r3
 80106ca:	2380      	movs	r3, #128	; 0x80
 80106cc:	005b      	lsls	r3, r3, #1
 80106ce:	4313      	orrs	r3, r2
 80106d0:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 80106d2:	2300      	movs	r3, #0
 80106d4:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80106d6:	2240      	movs	r2, #64	; 0x40
 80106d8:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80106da:	6823      	ldr	r3, [r4, #0]
 80106dc:	3a24      	subs	r2, #36	; 0x24
 80106de:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80106e0:	6822      	ldr	r2, [r4, #0]
 80106e2:	6893      	ldr	r3, [r2, #8]
 80106e4:	2104      	movs	r1, #4
 80106e6:	430b      	orrs	r3, r1
 80106e8:	6093      	str	r3, [r2, #8]
 80106ea:	2000      	movs	r0, #0
}
 80106ec:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80106ee:	f7ff fedd 	bl	80104ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80106f2:	2800      	cmp	r0, #0
 80106f4:	d0e6      	beq.n	80106c4 <HAL_ADC_Start+0x20>
 80106f6:	e7f9      	b.n	80106ec <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 80106f8:	2002      	movs	r0, #2
 80106fa:	e7f7      	b.n	80106ec <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 80106fc:	2002      	movs	r0, #2
 80106fe:	e7f5      	b.n	80106ec <HAL_ADC_Start+0x48>
 8010700:	fffff0fe 	.word	0xfffff0fe

08010704 <HAL_ADC_Stop>:
{ 
 8010704:	b510      	push	{r4, lr}
 8010706:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010708:	2340      	movs	r3, #64	; 0x40
 801070a:	5cc3      	ldrb	r3, [r0, r3]
 801070c:	2b01      	cmp	r3, #1
 801070e:	d017      	beq.n	8010740 <HAL_ADC_Stop+0x3c>
 8010710:	2340      	movs	r3, #64	; 0x40
 8010712:	2201      	movs	r2, #1
 8010714:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010716:	f7ff fe5f 	bl	80103d8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801071a:	2800      	cmp	r0, #0
 801071c:	d003      	beq.n	8010726 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 801071e:	2340      	movs	r3, #64	; 0x40
 8010720:	2200      	movs	r2, #0
 8010722:	54e2      	strb	r2, [r4, r3]
}
 8010724:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010726:	0020      	movs	r0, r4
 8010728:	f7ff fe80 	bl	801042c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 801072c:	2800      	cmp	r0, #0
 801072e:	d1f6      	bne.n	801071e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010730:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010732:	4a04      	ldr	r2, [pc, #16]	; (8010744 <HAL_ADC_Stop+0x40>)
 8010734:	4013      	ands	r3, r2
 8010736:	3204      	adds	r2, #4
 8010738:	32ff      	adds	r2, #255	; 0xff
 801073a:	4313      	orrs	r3, r2
 801073c:	6463      	str	r3, [r4, #68]	; 0x44
 801073e:	e7ee      	b.n	801071e <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010740:	2002      	movs	r0, #2
 8010742:	e7ef      	b.n	8010724 <HAL_ADC_Stop+0x20>
 8010744:	fffffefe 	.word	0xfffffefe

08010748 <HAL_ADC_PollForConversion>:
{
 8010748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074a:	0006      	movs	r6, r0
 801074c:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801074e:	6943      	ldr	r3, [r0, #20]
 8010750:	2b08      	cmp	r3, #8
 8010752:	d026      	beq.n	80107a2 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010754:	6803      	ldr	r3, [r0, #0]
 8010756:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010758:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 801075a:	07db      	lsls	r3, r3, #31
 801075c:	d418      	bmi.n	8010790 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 801075e:	f7ff fe19 	bl	8010394 <HAL_GetTick>
 8010762:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010764:	6832      	ldr	r2, [r6, #0]
 8010766:	6813      	ldr	r3, [r2, #0]
 8010768:	421d      	tst	r5, r3
 801076a:	d11c      	bne.n	80107a6 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 801076c:	1c63      	adds	r3, r4, #1
 801076e:	d0fa      	beq.n	8010766 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010770:	2c00      	cmp	r4, #0
 8010772:	d004      	beq.n	801077e <HAL_ADC_PollForConversion+0x36>
 8010774:	f7ff fe0e 	bl	8010394 <HAL_GetTick>
 8010778:	1bc0      	subs	r0, r0, r7
 801077a:	42a0      	cmp	r0, r4
 801077c:	d9f2      	bls.n	8010764 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801077e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010780:	2204      	movs	r2, #4
 8010782:	4313      	orrs	r3, r2
 8010784:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010786:	2340      	movs	r3, #64	; 0x40
 8010788:	2200      	movs	r2, #0
 801078a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 801078c:	2003      	movs	r0, #3
 801078e:	e007      	b.n	80107a0 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010790:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010792:	2220      	movs	r2, #32
 8010794:	4313      	orrs	r3, r2
 8010796:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010798:	2340      	movs	r3, #64	; 0x40
 801079a:	2200      	movs	r2, #0
 801079c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 801079e:	2001      	movs	r0, #1
}
 80107a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80107a2:	2508      	movs	r5, #8
 80107a4:	e7db      	b.n	801075e <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80107a6:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80107a8:	2380      	movs	r3, #128	; 0x80
 80107aa:	009b      	lsls	r3, r3, #2
 80107ac:	430b      	orrs	r3, r1
 80107ae:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80107b0:	68d1      	ldr	r1, [r2, #12]
 80107b2:	23c0      	movs	r3, #192	; 0xc0
 80107b4:	011b      	lsls	r3, r3, #4
 80107b6:	4219      	tst	r1, r3
 80107b8:	d113      	bne.n	80107e2 <HAL_ADC_PollForConversion+0x9a>
 80107ba:	6a33      	ldr	r3, [r6, #32]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d110      	bne.n	80107e2 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80107c0:	6813      	ldr	r3, [r2, #0]
 80107c2:	071b      	lsls	r3, r3, #28
 80107c4:	d50d      	bpl.n	80107e2 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80107c6:	6893      	ldr	r3, [r2, #8]
 80107c8:	075b      	lsls	r3, r3, #29
 80107ca:	d412      	bmi.n	80107f2 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80107cc:	6853      	ldr	r3, [r2, #4]
 80107ce:	210c      	movs	r1, #12
 80107d0:	438b      	bics	r3, r1
 80107d2:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80107d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80107d6:	4a0b      	ldr	r2, [pc, #44]	; (8010804 <HAL_ADC_PollForConversion+0xbc>)
 80107d8:	4013      	ands	r3, r2
 80107da:	3204      	adds	r2, #4
 80107dc:	32ff      	adds	r2, #255	; 0xff
 80107de:	4313      	orrs	r3, r2
 80107e0:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 80107e2:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80107e4:	69b3      	ldr	r3, [r6, #24]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1da      	bne.n	80107a0 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80107ea:	6833      	ldr	r3, [r6, #0]
 80107ec:	220c      	movs	r2, #12
 80107ee:	601a      	str	r2, [r3, #0]
 80107f0:	e7d6      	b.n	80107a0 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80107f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80107f4:	2220      	movs	r2, #32
 80107f6:	4313      	orrs	r3, r2
 80107f8:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80107fa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80107fc:	3a1f      	subs	r2, #31
 80107fe:	4313      	orrs	r3, r2
 8010800:	64b3      	str	r3, [r6, #72]	; 0x48
 8010802:	e7ee      	b.n	80107e2 <HAL_ADC_PollForConversion+0x9a>
 8010804:	fffffefe 	.word	0xfffffefe

08010808 <HAL_ADC_Start_IT>:
{
 8010808:	b510      	push	{r4, lr}
 801080a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801080c:	6803      	ldr	r3, [r0, #0]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	075b      	lsls	r3, r3, #29
 8010812:	d436      	bmi.n	8010882 <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 8010814:	2340      	movs	r3, #64	; 0x40
 8010816:	5cc3      	ldrb	r3, [r0, r3]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d034      	beq.n	8010886 <HAL_ADC_Start_IT+0x7e>
 801081c:	2340      	movs	r3, #64	; 0x40
 801081e:	2201      	movs	r2, #1
 8010820:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010822:	69c3      	ldr	r3, [r0, #28]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d121      	bne.n	801086c <HAL_ADC_Start_IT+0x64>
      ADC_STATE_CLR_SET(hadc->State,
 8010828:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801082a:	4a18      	ldr	r2, [pc, #96]	; (801088c <HAL_ADC_Start_IT+0x84>)
 801082c:	401a      	ands	r2, r3
 801082e:	2380      	movs	r3, #128	; 0x80
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	4313      	orrs	r3, r2
 8010834:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010836:	2300      	movs	r3, #0
 8010838:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801083a:	2240      	movs	r2, #64	; 0x40
 801083c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801083e:	6823      	ldr	r3, [r4, #0]
 8010840:	3a24      	subs	r2, #36	; 0x24
 8010842:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8010844:	6963      	ldr	r3, [r4, #20]
 8010846:	2b08      	cmp	r3, #8
 8010848:	d115      	bne.n	8010876 <HAL_ADC_Start_IT+0x6e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801084a:	6822      	ldr	r2, [r4, #0]
 801084c:	6853      	ldr	r3, [r2, #4]
 801084e:	2104      	movs	r1, #4
 8010850:	438b      	bics	r3, r1
 8010852:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8010854:	6822      	ldr	r2, [r4, #0]
 8010856:	6853      	ldr	r3, [r2, #4]
 8010858:	3114      	adds	r1, #20
 801085a:	430b      	orrs	r3, r1
 801085c:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 801085e:	6822      	ldr	r2, [r4, #0]
 8010860:	6893      	ldr	r3, [r2, #8]
 8010862:	2104      	movs	r1, #4
 8010864:	430b      	orrs	r3, r1
 8010866:	6093      	str	r3, [r2, #8]
 8010868:	2000      	movs	r0, #0
}
 801086a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 801086c:	f7ff fe1e 	bl	80104ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010870:	2800      	cmp	r0, #0
 8010872:	d0d9      	beq.n	8010828 <HAL_ADC_Start_IT+0x20>
 8010874:	e7f9      	b.n	801086a <HAL_ADC_Start_IT+0x62>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8010876:	6822      	ldr	r2, [r4, #0]
 8010878:	6853      	ldr	r3, [r2, #4]
 801087a:	211c      	movs	r1, #28
 801087c:	430b      	orrs	r3, r1
 801087e:	6053      	str	r3, [r2, #4]
          break;
 8010880:	e7ed      	b.n	801085e <HAL_ADC_Start_IT+0x56>
    tmp_hal_status = HAL_BUSY;
 8010882:	2002      	movs	r0, #2
 8010884:	e7f1      	b.n	801086a <HAL_ADC_Start_IT+0x62>
    __HAL_LOCK(hadc);
 8010886:	2002      	movs	r0, #2
 8010888:	e7ef      	b.n	801086a <HAL_ADC_Start_IT+0x62>
 801088a:	46c0      	nop			; (mov r8, r8)
 801088c:	fffff0fe 	.word	0xfffff0fe

08010890 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010890:	6803      	ldr	r3, [r0, #0]
 8010892:	2208      	movs	r2, #8
 8010894:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010896:	6803      	ldr	r3, [r0, #0]
 8010898:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 801089a:	4770      	bx	lr

0801089c <HAL_ADC_ConfigChannel>:
{
 801089c:	b530      	push	{r4, r5, lr}
 801089e:	b083      	sub	sp, #12
 80108a0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80108a2:	2300      	movs	r3, #0
 80108a4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80108a6:	3340      	adds	r3, #64	; 0x40
 80108a8:	5cc3      	ldrb	r3, [r0, r3]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d100      	bne.n	80108b0 <HAL_ADC_ConfigChannel+0x14>
 80108ae:	e088      	b.n	80109c2 <HAL_ADC_ConfigChannel+0x126>
 80108b0:	2340      	movs	r3, #64	; 0x40
 80108b2:	2201      	movs	r2, #1
 80108b4:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80108b6:	6803      	ldr	r3, [r0, #0]
 80108b8:	689a      	ldr	r2, [r3, #8]
 80108ba:	0752      	lsls	r2, r2, #29
 80108bc:	d475      	bmi.n	80109aa <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80108be:	4a42      	ldr	r2, [pc, #264]	; (80109c8 <HAL_ADC_ConfigChannel+0x12c>)
 80108c0:	6848      	ldr	r0, [r1, #4]
 80108c2:	4290      	cmp	r0, r2
 80108c4:	d050      	beq.n	8010968 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80108c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80108c8:	2201      	movs	r2, #1
 80108ca:	680d      	ldr	r5, [r1, #0]
 80108cc:	40aa      	lsls	r2, r5
 80108ce:	4302      	orrs	r2, r0
 80108d0:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80108d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80108d4:	2280      	movs	r2, #128	; 0x80
 80108d6:	0552      	lsls	r2, r2, #21
 80108d8:	4293      	cmp	r3, r2
 80108da:	d013      	beq.n	8010904 <HAL_ADC_ConfigChannel+0x68>
 80108dc:	3b01      	subs	r3, #1
 80108de:	2b06      	cmp	r3, #6
 80108e0:	d910      	bls.n	8010904 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80108e2:	6822      	ldr	r2, [r4, #0]
 80108e4:	6950      	ldr	r0, [r2, #20]
 80108e6:	2307      	movs	r3, #7
 80108e8:	4003      	ands	r3, r0
 80108ea:	6888      	ldr	r0, [r1, #8]
 80108ec:	4298      	cmp	r0, r3
 80108ee:	d009      	beq.n	8010904 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80108f0:	6950      	ldr	r0, [r2, #20]
 80108f2:	2307      	movs	r3, #7
 80108f4:	4398      	bics	r0, r3
 80108f6:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80108f8:	6822      	ldr	r2, [r4, #0]
 80108fa:	6950      	ldr	r0, [r2, #20]
 80108fc:	688d      	ldr	r5, [r1, #8]
 80108fe:	402b      	ands	r3, r5
 8010900:	4303      	orrs	r3, r0
 8010902:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010904:	680b      	ldr	r3, [r1, #0]
 8010906:	001a      	movs	r2, r3
 8010908:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801090a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801090c:	2a02      	cmp	r2, #2
 801090e:	d851      	bhi.n	80109b4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010910:	4a2e      	ldr	r2, [pc, #184]	; (80109cc <HAL_ADC_ConfigChannel+0x130>)
 8010912:	6810      	ldr	r0, [r2, #0]
 8010914:	2b10      	cmp	r3, #16
 8010916:	d024      	beq.n	8010962 <HAL_ADC_ConfigChannel+0xc6>
 8010918:	3b11      	subs	r3, #17
 801091a:	425a      	negs	r2, r3
 801091c:	415a      	adcs	r2, r3
 801091e:	4253      	negs	r3, r2
 8010920:	4a2b      	ldr	r2, [pc, #172]	; (80109d0 <HAL_ADC_ConfigChannel+0x134>)
 8010922:	4013      	ands	r3, r2
 8010924:	2280      	movs	r2, #128	; 0x80
 8010926:	0452      	lsls	r2, r2, #17
 8010928:	4694      	mov	ip, r2
 801092a:	4463      	add	r3, ip
 801092c:	4303      	orrs	r3, r0
 801092e:	4a27      	ldr	r2, [pc, #156]	; (80109cc <HAL_ADC_ConfigChannel+0x130>)
 8010930:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010932:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010934:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010936:	2b10      	cmp	r3, #16
 8010938:	d13c      	bne.n	80109b4 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801093a:	4b26      	ldr	r3, [pc, #152]	; (80109d4 <HAL_ADC_ConfigChannel+0x138>)
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	4926      	ldr	r1, [pc, #152]	; (80109d8 <HAL_ADC_ConfigChannel+0x13c>)
 8010940:	f7ef fbfc 	bl	800013c <__udivsi3>
 8010944:	0083      	lsls	r3, r0, #2
 8010946:	1818      	adds	r0, r3, r0
 8010948:	0040      	lsls	r0, r0, #1
 801094a:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 801094c:	9b01      	ldr	r3, [sp, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d035      	beq.n	80109be <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010952:	9b01      	ldr	r3, [sp, #4]
 8010954:	3b01      	subs	r3, #1
 8010956:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010958:	9b01      	ldr	r3, [sp, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1f9      	bne.n	8010952 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801095e:	2000      	movs	r0, #0
 8010960:	e028      	b.n	80109b4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010962:	2380      	movs	r3, #128	; 0x80
 8010964:	041b      	lsls	r3, r3, #16
 8010966:	e7e1      	b.n	801092c <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801096a:	2001      	movs	r0, #1
 801096c:	680d      	ldr	r5, [r1, #0]
 801096e:	40a8      	lsls	r0, r5
 8010970:	4382      	bics	r2, r0
 8010972:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010974:	680b      	ldr	r3, [r1, #0]
 8010976:	001a      	movs	r2, r3
 8010978:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801097a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801097c:	2a02      	cmp	r2, #2
 801097e:	d819      	bhi.n	80109b4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010980:	4a12      	ldr	r2, [pc, #72]	; (80109cc <HAL_ADC_ConfigChannel+0x130>)
 8010982:	6811      	ldr	r1, [r2, #0]
 8010984:	2b10      	cmp	r3, #16
 8010986:	d00e      	beq.n	80109a6 <HAL_ADC_ConfigChannel+0x10a>
 8010988:	3b11      	subs	r3, #17
 801098a:	425a      	negs	r2, r3
 801098c:	415a      	adcs	r2, r3
 801098e:	4252      	negs	r2, r2
 8010990:	23c0      	movs	r3, #192	; 0xc0
 8010992:	041b      	lsls	r3, r3, #16
 8010994:	4013      	ands	r3, r2
 8010996:	4a11      	ldr	r2, [pc, #68]	; (80109dc <HAL_ADC_ConfigChannel+0x140>)
 8010998:	4694      	mov	ip, r2
 801099a:	4463      	add	r3, ip
 801099c:	400b      	ands	r3, r1
 801099e:	4a0b      	ldr	r2, [pc, #44]	; (80109cc <HAL_ADC_ConfigChannel+0x130>)
 80109a0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80109a2:	2000      	movs	r0, #0
 80109a4:	e006      	b.n	80109b4 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80109a6:	4b0e      	ldr	r3, [pc, #56]	; (80109e0 <HAL_ADC_ConfigChannel+0x144>)
 80109a8:	e7f8      	b.n	801099c <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80109aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80109ac:	2220      	movs	r2, #32
 80109ae:	4313      	orrs	r3, r2
 80109b0:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80109b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80109b4:	2340      	movs	r3, #64	; 0x40
 80109b6:	2200      	movs	r2, #0
 80109b8:	54e2      	strb	r2, [r4, r3]
}
 80109ba:	b003      	add	sp, #12
 80109bc:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80109be:	2000      	movs	r0, #0
 80109c0:	e7f8      	b.n	80109b4 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80109c2:	2002      	movs	r0, #2
 80109c4:	e7f9      	b.n	80109ba <HAL_ADC_ConfigChannel+0x11e>
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	00001001 	.word	0x00001001
 80109cc:	40012708 	.word	0x40012708
 80109d0:	ff400000 	.word	0xff400000
 80109d4:	200000a8 	.word	0x200000a8
 80109d8:	000f4240 	.word	0x000f4240
 80109dc:	feffffff 	.word	0xfeffffff
 80109e0:	ff7fffff 	.word	0xff7fffff

080109e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80109e4:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 80109e6:	2800      	cmp	r0, #0
 80109e8:	db14      	blt.n	8010a14 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80109ea:	0883      	lsrs	r3, r0, #2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4a15      	ldr	r2, [pc, #84]	; (8010a44 <HAL_NVIC_SetPriority+0x60>)
 80109f0:	4694      	mov	ip, r2
 80109f2:	4463      	add	r3, ip
 80109f4:	26c0      	movs	r6, #192	; 0xc0
 80109f6:	00b6      	lsls	r6, r6, #2
 80109f8:	599d      	ldr	r5, [r3, r6]
 80109fa:	2403      	movs	r4, #3
 80109fc:	4020      	ands	r0, r4
 80109fe:	00c0      	lsls	r0, r0, #3
 8010a00:	22ff      	movs	r2, #255	; 0xff
 8010a02:	0014      	movs	r4, r2
 8010a04:	4084      	lsls	r4, r0
 8010a06:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010a08:	0189      	lsls	r1, r1, #6
 8010a0a:	400a      	ands	r2, r1
 8010a0c:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010a0e:	432a      	orrs	r2, r5
 8010a10:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010a12:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010a14:	b2c0      	uxtb	r0, r0
 8010a16:	230f      	movs	r3, #15
 8010a18:	4003      	ands	r3, r0
 8010a1a:	3b08      	subs	r3, #8
 8010a1c:	089b      	lsrs	r3, r3, #2
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	4a09      	ldr	r2, [pc, #36]	; (8010a48 <HAL_NVIC_SetPriority+0x64>)
 8010a22:	4694      	mov	ip, r2
 8010a24:	4463      	add	r3, ip
 8010a26:	69dd      	ldr	r5, [r3, #28]
 8010a28:	2203      	movs	r2, #3
 8010a2a:	4010      	ands	r0, r2
 8010a2c:	00c0      	lsls	r0, r0, #3
 8010a2e:	24ff      	movs	r4, #255	; 0xff
 8010a30:	0022      	movs	r2, r4
 8010a32:	4082      	lsls	r2, r0
 8010a34:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010a36:	0189      	lsls	r1, r1, #6
 8010a38:	400c      	ands	r4, r1
 8010a3a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010a3c:	432c      	orrs	r4, r5
 8010a3e:	61dc      	str	r4, [r3, #28]
 8010a40:	e7e7      	b.n	8010a12 <HAL_NVIC_SetPriority+0x2e>
 8010a42:	46c0      	nop			; (mov r8, r8)
 8010a44:	e000e100 	.word	0xe000e100
 8010a48:	e000ed00 	.word	0xe000ed00

08010a4c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010a4c:	231f      	movs	r3, #31
 8010a4e:	4018      	ands	r0, r3
 8010a50:	3b1e      	subs	r3, #30
 8010a52:	4083      	lsls	r3, r0
 8010a54:	4a01      	ldr	r2, [pc, #4]	; (8010a5c <HAL_NVIC_EnableIRQ+0x10>)
 8010a56:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010a58:	4770      	bx	lr
 8010a5a:	46c0      	nop			; (mov r8, r8)
 8010a5c:	e000e100 	.word	0xe000e100

08010a60 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010a60:	231f      	movs	r3, #31
 8010a62:	4018      	ands	r0, r3
 8010a64:	3b1e      	subs	r3, #30
 8010a66:	4083      	lsls	r3, r0
 8010a68:	4901      	ldr	r1, [pc, #4]	; (8010a70 <HAL_NVIC_DisableIRQ+0x10>)
 8010a6a:	2280      	movs	r2, #128	; 0x80
 8010a6c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010a6e:	4770      	bx	lr
 8010a70:	e000e100 	.word	0xe000e100

08010a74 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010a74:	1e43      	subs	r3, r0, #1
 8010a76:	4a0a      	ldr	r2, [pc, #40]	; (8010aa0 <HAL_SYSTICK_Config+0x2c>)
 8010a78:	2001      	movs	r0, #1
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d80e      	bhi.n	8010a9c <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010a7e:	4a09      	ldr	r2, [pc, #36]	; (8010aa4 <HAL_SYSTICK_Config+0x30>)
 8010a80:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010a82:	4809      	ldr	r0, [pc, #36]	; (8010aa8 <HAL_SYSTICK_Config+0x34>)
 8010a84:	6a03      	ldr	r3, [r0, #32]
 8010a86:	021b      	lsls	r3, r3, #8
 8010a88:	0a1b      	lsrs	r3, r3, #8
 8010a8a:	21c0      	movs	r1, #192	; 0xc0
 8010a8c:	0609      	lsls	r1, r1, #24
 8010a8e:	430b      	orrs	r3, r1
 8010a90:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010a92:	2300      	movs	r3, #0
 8010a94:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010a96:	3307      	adds	r3, #7
 8010a98:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010a9a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010a9c:	4770      	bx	lr
 8010a9e:	46c0      	nop			; (mov r8, r8)
 8010aa0:	00ffffff 	.word	0x00ffffff
 8010aa4:	e000e010 	.word	0xe000e010
 8010aa8:	e000ed00 	.word	0xe000ed00

08010aac <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010aac:	2804      	cmp	r0, #4
 8010aae:	d005      	beq.n	8010abc <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010ab0:	4a05      	ldr	r2, [pc, #20]	; (8010ac8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010ab2:	6813      	ldr	r3, [r2, #0]
 8010ab4:	2104      	movs	r1, #4
 8010ab6:	438b      	bics	r3, r1
 8010ab8:	6013      	str	r3, [r2, #0]
  }
}
 8010aba:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010abc:	4a02      	ldr	r2, [pc, #8]	; (8010ac8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010abe:	6813      	ldr	r3, [r2, #0]
 8010ac0:	2104      	movs	r1, #4
 8010ac2:	430b      	orrs	r3, r1
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	e7f8      	b.n	8010aba <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010ac8:	e000e010 	.word	0xe000e010

08010acc <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ace:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010ad0:	0891      	lsrs	r1, r2, #2
 8010ad2:	d013      	beq.n	8010afc <CRC_Handle_8+0x30>
 8010ad4:	0034      	movs	r4, r6
 8010ad6:	2303      	movs	r3, #3
 8010ad8:	0017      	movs	r7, r2
 8010ada:	439f      	bics	r7, r3
 8010adc:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010ade:	7823      	ldrb	r3, [r4, #0]
 8010ae0:	061b      	lsls	r3, r3, #24
 8010ae2:	7865      	ldrb	r5, [r4, #1]
 8010ae4:	042d      	lsls	r5, r5, #16
 8010ae6:	432b      	orrs	r3, r5
 8010ae8:	78e5      	ldrb	r5, [r4, #3]
 8010aea:	432b      	orrs	r3, r5
 8010aec:	78a5      	ldrb	r5, [r4, #2]
 8010aee:	022d      	lsls	r5, r5, #8
 8010af0:	432b      	orrs	r3, r5
 8010af2:	6805      	ldr	r5, [r0, #0]
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010af8:	42bc      	cmp	r4, r7
 8010afa:	d1f0      	bne.n	8010ade <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010afc:	2303      	movs	r3, #3
 8010afe:	401a      	ands	r2, r3
 8010b00:	d01e      	beq.n	8010b40 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010b02:	2a01      	cmp	r2, #1
 8010b04:	d00a      	beq.n	8010b1c <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010b06:	2a02      	cmp	r2, #2
 8010b08:	d10d      	bne.n	8010b26 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010b0a:	0089      	lsls	r1, r1, #2
 8010b0c:	5c72      	ldrb	r2, [r6, r1]
 8010b0e:	0212      	lsls	r2, r2, #8
 8010b10:	1871      	adds	r1, r6, r1
 8010b12:	784b      	ldrb	r3, [r1, #1]
 8010b14:	4313      	orrs	r3, r2
 8010b16:	6802      	ldr	r2, [r0, #0]
 8010b18:	8013      	strh	r3, [r2, #0]
 8010b1a:	e011      	b.n	8010b40 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010b1c:	0089      	lsls	r1, r1, #2
 8010b1e:	5d8b      	ldrb	r3, [r1, r6]
 8010b20:	6802      	ldr	r2, [r0, #0]
 8010b22:	7013      	strb	r3, [r2, #0]
 8010b24:	e00c      	b.n	8010b40 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010b26:	2a03      	cmp	r2, #3
 8010b28:	d10a      	bne.n	8010b40 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010b2a:	0089      	lsls	r1, r1, #2
 8010b2c:	5c72      	ldrb	r2, [r6, r1]
 8010b2e:	0212      	lsls	r2, r2, #8
 8010b30:	1871      	adds	r1, r6, r1
 8010b32:	784b      	ldrb	r3, [r1, #1]
 8010b34:	4313      	orrs	r3, r2
 8010b36:	6802      	ldr	r2, [r0, #0]
 8010b38:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010b3a:	788b      	ldrb	r3, [r1, #2]
 8010b3c:	6802      	ldr	r2, [r0, #0]
 8010b3e:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010b40:	6803      	ldr	r3, [r0, #0]
 8010b42:	6818      	ldr	r0, [r3, #0]
}
 8010b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b46 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b48:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010b4a:	0852      	lsrs	r2, r2, #1
 8010b4c:	d00b      	beq.n	8010b66 <CRC_Handle_16+0x20>
 8010b4e:	000c      	movs	r4, r1
 8010b50:	0097      	lsls	r7, r2, #2
 8010b52:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010b54:	8823      	ldrh	r3, [r4, #0]
 8010b56:	041b      	lsls	r3, r3, #16
 8010b58:	8866      	ldrh	r6, [r4, #2]
 8010b5a:	4333      	orrs	r3, r6
 8010b5c:	6806      	ldr	r6, [r0, #0]
 8010b5e:	6033      	str	r3, [r6, #0]
 8010b60:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8010b62:	42bc      	cmp	r4, r7
 8010b64:	d1f6      	bne.n	8010b54 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010b66:	07eb      	lsls	r3, r5, #31
 8010b68:	d503      	bpl.n	8010b72 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010b6a:	0092      	lsls	r2, r2, #2
 8010b6c:	5a53      	ldrh	r3, [r2, r1]
 8010b6e:	6802      	ldr	r2, [r0, #0]
 8010b70:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010b72:	6803      	ldr	r3, [r0, #0]
 8010b74:	6818      	ldr	r0, [r3, #0]
}
 8010b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b78 <HAL_CRC_Init>:
{
 8010b78:	b510      	push	{r4, lr}
 8010b7a:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010b7c:	d029      	beq.n	8010bd2 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010b7e:	7f43      	ldrb	r3, [r0, #29]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d01e      	beq.n	8010bc2 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010b84:	2302      	movs	r3, #2
 8010b86:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010b88:	0020      	movs	r0, r4
 8010b8a:	f000 f8b1 	bl	8010cf0 <HAL_CRCEx_Init>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d121      	bne.n	8010bd6 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010b92:	7963      	ldrb	r3, [r4, #5]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d118      	bne.n	8010bca <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010b98:	6823      	ldr	r3, [r4, #0]
 8010b9a:	2201      	movs	r2, #1
 8010b9c:	4252      	negs	r2, r2
 8010b9e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010ba0:	6822      	ldr	r2, [r4, #0]
 8010ba2:	6893      	ldr	r3, [r2, #8]
 8010ba4:	2160      	movs	r1, #96	; 0x60
 8010ba6:	438b      	bics	r3, r1
 8010ba8:	6961      	ldr	r1, [r4, #20]
 8010baa:	430b      	orrs	r3, r1
 8010bac:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010bae:	6822      	ldr	r2, [r4, #0]
 8010bb0:	6893      	ldr	r3, [r2, #8]
 8010bb2:	2180      	movs	r1, #128	; 0x80
 8010bb4:	438b      	bics	r3, r1
 8010bb6:	69a1      	ldr	r1, [r4, #24]
 8010bb8:	430b      	orrs	r3, r1
 8010bba:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	7763      	strb	r3, [r4, #29]
}
 8010bc0:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010bc2:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010bc4:	f7fb fa72 	bl	800c0ac <HAL_CRC_MspInit>
 8010bc8:	e7dc      	b.n	8010b84 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010bca:	6823      	ldr	r3, [r4, #0]
 8010bcc:	6922      	ldr	r2, [r4, #16]
 8010bce:	611a      	str	r2, [r3, #16]
 8010bd0:	e7e6      	b.n	8010ba0 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010bd2:	2001      	movs	r0, #1
 8010bd4:	e7f4      	b.n	8010bc0 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010bd6:	2001      	movs	r0, #1
 8010bd8:	e7f2      	b.n	8010bc0 <HAL_CRC_Init+0x48>

08010bda <HAL_CRC_Accumulate>:
{
 8010bda:	b510      	push	{r4, lr}
 8010bdc:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010bde:	7f03      	ldrb	r3, [r0, #28]
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d024      	beq.n	8010c2e <HAL_CRC_Accumulate+0x54>
 8010be4:	2301      	movs	r3, #1
 8010be6:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010be8:	3301      	adds	r3, #1
 8010bea:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010bec:	6a03      	ldr	r3, [r0, #32]
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d01a      	beq.n	8010c28 <HAL_CRC_Accumulate+0x4e>
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d007      	beq.n	8010c06 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010bf6:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d011      	beq.n	8010c20 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010c00:	2300      	movs	r3, #0
 8010c02:	7723      	strb	r3, [r4, #28]
}
 8010c04:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010c06:	2a00      	cmp	r2, #0
 8010c08:	d007      	beq.n	8010c1a <HAL_CRC_Accumulate+0x40>
 8010c0a:	000b      	movs	r3, r1
 8010c0c:	0092      	lsls	r2, r2, #2
 8010c0e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010c10:	6822      	ldr	r2, [r4, #0]
 8010c12:	cb01      	ldmia	r3!, {r0}
 8010c14:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010c16:	428b      	cmp	r3, r1
 8010c18:	d1fa      	bne.n	8010c10 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	6818      	ldr	r0, [r3, #0]
      break;
 8010c1e:	e7ed      	b.n	8010bfc <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010c20:	0020      	movs	r0, r4
 8010c22:	f7ff ff53 	bl	8010acc <CRC_Handle_8>
      break;
 8010c26:	e7e9      	b.n	8010bfc <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010c28:	f7ff ff8d 	bl	8010b46 <CRC_Handle_16>
      break;
 8010c2c:	e7e6      	b.n	8010bfc <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010c2e:	2002      	movs	r0, #2
 8010c30:	e7e8      	b.n	8010c04 <HAL_CRC_Accumulate+0x2a>

08010c32 <HAL_CRC_Calculate>:
{
 8010c32:	b570      	push	{r4, r5, r6, lr}
 8010c34:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010c36:	7f03      	ldrb	r3, [r0, #28]
 8010c38:	2b01      	cmp	r3, #1
 8010c3a:	d029      	beq.n	8010c90 <HAL_CRC_Calculate+0x5e>
 8010c3c:	2501      	movs	r5, #1
 8010c3e:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010c40:	2302      	movs	r3, #2
 8010c42:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010c44:	6800      	ldr	r0, [r0, #0]
 8010c46:	6883      	ldr	r3, [r0, #8]
 8010c48:	432b      	orrs	r3, r5
 8010c4a:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010c4c:	6a23      	ldr	r3, [r4, #32]
 8010c4e:	2b02      	cmp	r3, #2
 8010c50:	d01a      	beq.n	8010c88 <HAL_CRC_Calculate+0x56>
 8010c52:	2b03      	cmp	r3, #3
 8010c54:	d007      	beq.n	8010c66 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010c56:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010c58:	2b01      	cmp	r3, #1
 8010c5a:	d011      	beq.n	8010c80 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010c60:	2300      	movs	r3, #0
 8010c62:	7723      	strb	r3, [r4, #28]
}
 8010c64:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010c66:	2a00      	cmp	r2, #0
 8010c68:	d007      	beq.n	8010c7a <HAL_CRC_Calculate+0x48>
 8010c6a:	000b      	movs	r3, r1
 8010c6c:	0092      	lsls	r2, r2, #2
 8010c6e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010c70:	6820      	ldr	r0, [r4, #0]
 8010c72:	cb20      	ldmia	r3!, {r5}
 8010c74:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010c76:	428b      	cmp	r3, r1
 8010c78:	d1fa      	bne.n	8010c70 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010c7a:	6823      	ldr	r3, [r4, #0]
 8010c7c:	6818      	ldr	r0, [r3, #0]
      break;
 8010c7e:	e7ed      	b.n	8010c5c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010c80:	0020      	movs	r0, r4
 8010c82:	f7ff ff23 	bl	8010acc <CRC_Handle_8>
      break;
 8010c86:	e7e9      	b.n	8010c5c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010c88:	0020      	movs	r0, r4
 8010c8a:	f7ff ff5c 	bl	8010b46 <CRC_Handle_16>
      break;
 8010c8e:	e7e5      	b.n	8010c5c <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010c90:	2002      	movs	r0, #2
 8010c92:	e7e7      	b.n	8010c64 <HAL_CRC_Calculate+0x32>

08010c94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010c94:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010c96:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010c98:	2501      	movs	r5, #1
 8010c9a:	002c      	movs	r4, r5
 8010c9c:	409c      	lsls	r4, r3
 8010c9e:	4221      	tst	r1, r4
 8010ca0:	d10b      	bne.n	8010cba <HAL_CRCEx_Polynomial_Set+0x26>
 8010ca2:	3b01      	subs	r3, #1
 8010ca4:	d2f9      	bcs.n	8010c9a <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010ca6:	2a10      	cmp	r2, #16
 8010ca8:	d01c      	beq.n	8010ce4 <HAL_CRCEx_Polynomial_Set+0x50>
 8010caa:	2a18      	cmp	r2, #24
 8010cac:	d01e      	beq.n	8010cec <HAL_CRCEx_Polynomial_Set+0x58>
 8010cae:	2a08      	cmp	r2, #8
 8010cb0:	d109      	bne.n	8010cc6 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010cb2:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010cb4:	2b0f      	cmp	r3, #15
 8010cb6:	d906      	bls.n	8010cc6 <HAL_CRCEx_Polynomial_Set+0x32>
 8010cb8:	e00e      	b.n	8010cd8 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010cba:	2a10      	cmp	r2, #16
 8010cbc:	d012      	beq.n	8010ce4 <HAL_CRCEx_Polynomial_Set+0x50>
 8010cbe:	2a18      	cmp	r2, #24
 8010cc0:	d00c      	beq.n	8010cdc <HAL_CRCEx_Polynomial_Set+0x48>
 8010cc2:	2a08      	cmp	r2, #8
 8010cc4:	d0f5      	beq.n	8010cb2 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010cc6:	6803      	ldr	r3, [r0, #0]
 8010cc8:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010cca:	6801      	ldr	r1, [r0, #0]
 8010ccc:	688b      	ldr	r3, [r1, #8]
 8010cce:	2018      	movs	r0, #24
 8010cd0:	4383      	bics	r3, r0
 8010cd2:	431a      	orrs	r2, r3
 8010cd4:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010cd6:	2400      	movs	r4, #0
}
 8010cd8:	0020      	movs	r0, r4
 8010cda:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010cdc:	2b06      	cmp	r3, #6
 8010cde:	d9f2      	bls.n	8010cc6 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010ce0:	2401      	movs	r4, #1
 8010ce2:	e7f9      	b.n	8010cd8 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010ce4:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010ce6:	2b07      	cmp	r3, #7
 8010ce8:	d9ed      	bls.n	8010cc6 <HAL_CRCEx_Polynomial_Set+0x32>
 8010cea:	e7f5      	b.n	8010cd8 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010cec:	2401      	movs	r4, #1
 8010cee:	e7f3      	b.n	8010cd8 <HAL_CRCEx_Polynomial_Set+0x44>

08010cf0 <HAL_CRCEx_Init>:
{
 8010cf0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010cf2:	7903      	ldrb	r3, [r0, #4]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d109      	bne.n	8010d0c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010cf8:	6803      	ldr	r3, [r0, #0]
 8010cfa:	4a08      	ldr	r2, [pc, #32]	; (8010d1c <HAL_CRCEx_Init+0x2c>)
 8010cfc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010cfe:	6802      	ldr	r2, [r0, #0]
 8010d00:	6893      	ldr	r3, [r2, #8]
 8010d02:	2118      	movs	r1, #24
 8010d04:	438b      	bics	r3, r1
 8010d06:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010d08:	2000      	movs	r0, #0
}
 8010d0a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010d0c:	68c2      	ldr	r2, [r0, #12]
 8010d0e:	6881      	ldr	r1, [r0, #8]
 8010d10:	f7ff ffc0 	bl	8010c94 <HAL_CRCEx_Polynomial_Set>
 8010d14:	1e43      	subs	r3, r0, #1
 8010d16:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010d18:	b2c0      	uxtb	r0, r0
 8010d1a:	e7f6      	b.n	8010d0a <HAL_CRCEx_Init+0x1a>
 8010d1c:	04c11db7 	.word	0x04c11db7

08010d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010d20:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010d22:	2800      	cmp	r0, #0
 8010d24:	d022      	beq.n	8010d6c <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010d26:	2321      	movs	r3, #33	; 0x21
 8010d28:	5cc3      	ldrb	r3, [r0, r3]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d102      	bne.n	8010d34 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010d2e:	3320      	adds	r3, #32
 8010d30:	2200      	movs	r2, #0
 8010d32:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010d34:	2121      	movs	r1, #33	; 0x21
 8010d36:	2302      	movs	r3, #2
 8010d38:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010d3a:	6804      	ldr	r4, [r0, #0]
 8010d3c:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010d3e:	4a0c      	ldr	r2, [pc, #48]	; (8010d70 <HAL_DMA_Init+0x50>)
 8010d40:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010d42:	6843      	ldr	r3, [r0, #4]
 8010d44:	6885      	ldr	r5, [r0, #8]
 8010d46:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010d48:	68c5      	ldr	r5, [r0, #12]
 8010d4a:	432b      	orrs	r3, r5
 8010d4c:	6905      	ldr	r5, [r0, #16]
 8010d4e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010d50:	6945      	ldr	r5, [r0, #20]
 8010d52:	432b      	orrs	r3, r5
 8010d54:	6985      	ldr	r5, [r0, #24]
 8010d56:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010d58:	69c5      	ldr	r5, [r0, #28]
 8010d5a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010d5c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010d5e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010d60:	2300      	movs	r3, #0
 8010d62:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010d64:	3301      	adds	r3, #1
 8010d66:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010d68:	2000      	movs	r0, #0
}  
 8010d6a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010d6c:	2001      	movs	r0, #1
 8010d6e:	e7fc      	b.n	8010d6a <HAL_DMA_Init+0x4a>
 8010d70:	ffffc00f 	.word	0xffffc00f

08010d74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010d74:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010d76:	2420      	movs	r4, #32
 8010d78:	5d04      	ldrb	r4, [r0, r4]
 8010d7a:	2c01      	cmp	r4, #1
 8010d7c:	d02d      	beq.n	8010dda <HAL_DMA_Start_IT+0x66>
 8010d7e:	2601      	movs	r6, #1
 8010d80:	2420      	movs	r4, #32
 8010d82:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010d84:	3401      	adds	r4, #1
 8010d86:	2502      	movs	r5, #2
 8010d88:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010d8a:	6805      	ldr	r5, [r0, #0]
 8010d8c:	682c      	ldr	r4, [r5, #0]
 8010d8e:	43b4      	bics	r4, r6
 8010d90:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010d92:	6804      	ldr	r4, [r0, #0]
 8010d94:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010d96:	6843      	ldr	r3, [r0, #4]
 8010d98:	2b10      	cmp	r3, #16
 8010d9a:	d019      	beq.n	8010dd0 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010d9c:	6803      	ldr	r3, [r0, #0]
 8010d9e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010da0:	6803      	ldr	r3, [r0, #0]
 8010da2:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010da4:	6802      	ldr	r2, [r0, #0]
 8010da6:	6813      	ldr	r3, [r2, #0]
 8010da8:	2102      	movs	r1, #2
 8010daa:	430b      	orrs	r3, r1
 8010dac:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010dae:	6802      	ldr	r2, [r0, #0]
 8010db0:	6813      	ldr	r3, [r2, #0]
 8010db2:	3102      	adds	r1, #2
 8010db4:	430b      	orrs	r3, r1
 8010db6:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010db8:	6802      	ldr	r2, [r0, #0]
 8010dba:	6813      	ldr	r3, [r2, #0]
 8010dbc:	3104      	adds	r1, #4
 8010dbe:	430b      	orrs	r3, r1
 8010dc0:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010dc2:	6802      	ldr	r2, [r0, #0]
 8010dc4:	6813      	ldr	r3, [r2, #0]
 8010dc6:	3907      	subs	r1, #7
 8010dc8:	430b      	orrs	r3, r1
 8010dca:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010dcc:	2000      	movs	r0, #0
} 
 8010dce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010dd0:	6803      	ldr	r3, [r0, #0]
 8010dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010dd4:	6803      	ldr	r3, [r0, #0]
 8010dd6:	60d9      	str	r1, [r3, #12]
 8010dd8:	e7e4      	b.n	8010da4 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010dda:	2002      	movs	r0, #2
 8010ddc:	e7f7      	b.n	8010dce <HAL_DMA_Start_IT+0x5a>

08010dde <HAL_DMA_Abort>:
{
 8010dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de0:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010de2:	6802      	ldr	r2, [r0, #0]
 8010de4:	6813      	ldr	r3, [r2, #0]
 8010de6:	2101      	movs	r1, #1
 8010de8:	438b      	bics	r3, r1
 8010dea:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010dec:	f7ff fad2 	bl	8010394 <HAL_GetTick>
 8010df0:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010df2:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010df4:	26fa      	movs	r6, #250	; 0xfa
 8010df6:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	421d      	tst	r5, r3
 8010dfe:	d00f      	beq.n	8010e20 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010e00:	f7ff fac8 	bl	8010394 <HAL_GetTick>
 8010e04:	1bc0      	subs	r0, r0, r7
 8010e06:	42b0      	cmp	r0, r6
 8010e08:	d9f6      	bls.n	8010df8 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010e0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e0c:	2220      	movs	r2, #32
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010e12:	2321      	movs	r3, #33	; 0x21
 8010e14:	2103      	movs	r1, #3
 8010e16:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010e18:	2300      	movs	r3, #0
 8010e1a:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010e1c:	2003      	movs	r0, #3
 8010e1e:	e006      	b.n	8010e2e <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010e20:	2321      	movs	r3, #33	; 0x21
 8010e22:	2201      	movs	r2, #1
 8010e24:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010e26:	3b01      	subs	r3, #1
 8010e28:	2200      	movs	r2, #0
 8010e2a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010e2c:	2000      	movs	r0, #0
}
 8010e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e30 <HAL_DMA_IRQHandler>:
{        
 8010e30:	b510      	push	{r4, lr}
 8010e32:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010e34:	6803      	ldr	r3, [r0, #0]
 8010e36:	4ab4      	ldr	r2, [pc, #720]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d94d      	bls.n	8010ed8 <HAL_DMA_IRQHandler+0xa8>
 8010e3c:	4ab3      	ldr	r2, [pc, #716]	; (801110c <HAL_DMA_IRQHandler+0x2dc>)
 8010e3e:	6811      	ldr	r1, [r2, #0]
 8010e40:	4ab3      	ldr	r2, [pc, #716]	; (8011110 <HAL_DMA_IRQHandler+0x2e0>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d026      	beq.n	8010e94 <HAL_DMA_IRQHandler+0x64>
 8010e46:	4ab3      	ldr	r2, [pc, #716]	; (8011114 <HAL_DMA_IRQHandler+0x2e4>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d02d      	beq.n	8010ea8 <HAL_DMA_IRQHandler+0x78>
 8010e4c:	4ab2      	ldr	r2, [pc, #712]	; (8011118 <HAL_DMA_IRQHandler+0x2e8>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d02c      	beq.n	8010eac <HAL_DMA_IRQHandler+0x7c>
 8010e52:	4ab2      	ldr	r2, [pc, #712]	; (801111c <HAL_DMA_IRQHandler+0x2ec>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d02c      	beq.n	8010eb2 <HAL_DMA_IRQHandler+0x82>
 8010e58:	4ab1      	ldr	r2, [pc, #708]	; (8011120 <HAL_DMA_IRQHandler+0x2f0>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d02c      	beq.n	8010eb8 <HAL_DMA_IRQHandler+0x88>
 8010e5e:	4ab1      	ldr	r2, [pc, #708]	; (8011124 <HAL_DMA_IRQHandler+0x2f4>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d02c      	beq.n	8010ebe <HAL_DMA_IRQHandler+0x8e>
 8010e64:	4aa8      	ldr	r2, [pc, #672]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d02c      	beq.n	8010ec4 <HAL_DMA_IRQHandler+0x94>
 8010e6a:	4aaf      	ldr	r2, [pc, #700]	; (8011128 <HAL_DMA_IRQHandler+0x2f8>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d02c      	beq.n	8010eca <HAL_DMA_IRQHandler+0x9a>
 8010e70:	4aae      	ldr	r2, [pc, #696]	; (801112c <HAL_DMA_IRQHandler+0x2fc>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d02b      	beq.n	8010ece <HAL_DMA_IRQHandler+0x9e>
 8010e76:	4aae      	ldr	r2, [pc, #696]	; (8011130 <HAL_DMA_IRQHandler+0x300>)
 8010e78:	4293      	cmp	r3, r2
 8010e7a:	d02a      	beq.n	8010ed2 <HAL_DMA_IRQHandler+0xa2>
 8010e7c:	4aad      	ldr	r2, [pc, #692]	; (8011134 <HAL_DMA_IRQHandler+0x304>)
 8010e7e:	189a      	adds	r2, r3, r2
 8010e80:	4250      	negs	r0, r2
 8010e82:	4142      	adcs	r2, r0
 8010e84:	4252      	negs	r2, r2
 8010e86:	48ac      	ldr	r0, [pc, #688]	; (8011138 <HAL_DMA_IRQHandler+0x308>)
 8010e88:	4002      	ands	r2, r0
 8010e8a:	2080      	movs	r0, #128	; 0x80
 8010e8c:	0300      	lsls	r0, r0, #12
 8010e8e:	4684      	mov	ip, r0
 8010e90:	4462      	add	r2, ip
 8010e92:	e000      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010e94:	2208      	movs	r2, #8
 8010e96:	420a      	tst	r2, r1
 8010e98:	d100      	bne.n	8010e9c <HAL_DMA_IRQHandler+0x6c>
 8010e9a:	e0e6      	b.n	801106a <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	0712      	lsls	r2, r2, #28
 8010ea0:	d500      	bpl.n	8010ea4 <HAL_DMA_IRQHandler+0x74>
 8010ea2:	e097      	b.n	8010fd4 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010ea4:	6823      	ldr	r3, [r4, #0]
 8010ea6:	e0e0      	b.n	801106a <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010ea8:	2280      	movs	r2, #128	; 0x80
 8010eaa:	e7f4      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010eac:	2280      	movs	r2, #128	; 0x80
 8010eae:	0112      	lsls	r2, r2, #4
 8010eb0:	e7f1      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010eb2:	2280      	movs	r2, #128	; 0x80
 8010eb4:	0212      	lsls	r2, r2, #8
 8010eb6:	e7ee      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010eb8:	2280      	movs	r2, #128	; 0x80
 8010eba:	0312      	lsls	r2, r2, #12
 8010ebc:	e7eb      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010ebe:	2280      	movs	r2, #128	; 0x80
 8010ec0:	0412      	lsls	r2, r2, #16
 8010ec2:	e7e8      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010ec4:	2280      	movs	r2, #128	; 0x80
 8010ec6:	0512      	lsls	r2, r2, #20
 8010ec8:	e7e5      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010eca:	2208      	movs	r2, #8
 8010ecc:	e7e3      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010ece:	2280      	movs	r2, #128	; 0x80
 8010ed0:	e7e1      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010ed2:	2280      	movs	r2, #128	; 0x80
 8010ed4:	0112      	lsls	r2, r2, #4
 8010ed6:	e7de      	b.n	8010e96 <HAL_DMA_IRQHandler+0x66>
 8010ed8:	4a98      	ldr	r2, [pc, #608]	; (801113c <HAL_DMA_IRQHandler+0x30c>)
 8010eda:	6811      	ldr	r1, [r2, #0]
 8010edc:	4a8c      	ldr	r2, [pc, #560]	; (8011110 <HAL_DMA_IRQHandler+0x2e0>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d026      	beq.n	8010f30 <HAL_DMA_IRQHandler+0x100>
 8010ee2:	4a8c      	ldr	r2, [pc, #560]	; (8011114 <HAL_DMA_IRQHandler+0x2e4>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d05d      	beq.n	8010fa4 <HAL_DMA_IRQHandler+0x174>
 8010ee8:	4a8b      	ldr	r2, [pc, #556]	; (8011118 <HAL_DMA_IRQHandler+0x2e8>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d05c      	beq.n	8010fa8 <HAL_DMA_IRQHandler+0x178>
 8010eee:	4a8b      	ldr	r2, [pc, #556]	; (801111c <HAL_DMA_IRQHandler+0x2ec>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d05c      	beq.n	8010fae <HAL_DMA_IRQHandler+0x17e>
 8010ef4:	4a8a      	ldr	r2, [pc, #552]	; (8011120 <HAL_DMA_IRQHandler+0x2f0>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d05c      	beq.n	8010fb4 <HAL_DMA_IRQHandler+0x184>
 8010efa:	4a8a      	ldr	r2, [pc, #552]	; (8011124 <HAL_DMA_IRQHandler+0x2f4>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d05c      	beq.n	8010fba <HAL_DMA_IRQHandler+0x18a>
 8010f00:	4a81      	ldr	r2, [pc, #516]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d05c      	beq.n	8010fc0 <HAL_DMA_IRQHandler+0x190>
 8010f06:	4a88      	ldr	r2, [pc, #544]	; (8011128 <HAL_DMA_IRQHandler+0x2f8>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d05c      	beq.n	8010fc6 <HAL_DMA_IRQHandler+0x196>
 8010f0c:	4a87      	ldr	r2, [pc, #540]	; (801112c <HAL_DMA_IRQHandler+0x2fc>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d05b      	beq.n	8010fca <HAL_DMA_IRQHandler+0x19a>
 8010f12:	4a87      	ldr	r2, [pc, #540]	; (8011130 <HAL_DMA_IRQHandler+0x300>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d05a      	beq.n	8010fce <HAL_DMA_IRQHandler+0x19e>
 8010f18:	4a86      	ldr	r2, [pc, #536]	; (8011134 <HAL_DMA_IRQHandler+0x304>)
 8010f1a:	189a      	adds	r2, r3, r2
 8010f1c:	4250      	negs	r0, r2
 8010f1e:	4142      	adcs	r2, r0
 8010f20:	4252      	negs	r2, r2
 8010f22:	4885      	ldr	r0, [pc, #532]	; (8011138 <HAL_DMA_IRQHandler+0x308>)
 8010f24:	4002      	ands	r2, r0
 8010f26:	2080      	movs	r0, #128	; 0x80
 8010f28:	0300      	lsls	r0, r0, #12
 8010f2a:	4684      	mov	ip, r0
 8010f2c:	4462      	add	r2, ip
 8010f2e:	e000      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010f30:	2208      	movs	r2, #8
 8010f32:	420a      	tst	r2, r1
 8010f34:	d000      	beq.n	8010f38 <HAL_DMA_IRQHandler+0x108>
 8010f36:	e3ad      	b.n	8011694 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010f38:	4a80      	ldr	r2, [pc, #512]	; (801113c <HAL_DMA_IRQHandler+0x30c>)
 8010f3a:	6811      	ldr	r1, [r2, #0]
 8010f3c:	4a74      	ldr	r2, [pc, #464]	; (8011110 <HAL_DMA_IRQHandler+0x2e0>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d100      	bne.n	8010f44 <HAL_DMA_IRQHandler+0x114>
 8010f42:	e198      	b.n	8011276 <HAL_DMA_IRQHandler+0x446>
 8010f44:	4a73      	ldr	r2, [pc, #460]	; (8011114 <HAL_DMA_IRQHandler+0x2e4>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d100      	bne.n	8010f4c <HAL_DMA_IRQHandler+0x11c>
 8010f4a:	e1da      	b.n	8011302 <HAL_DMA_IRQHandler+0x4d2>
 8010f4c:	4a72      	ldr	r2, [pc, #456]	; (8011118 <HAL_DMA_IRQHandler+0x2e8>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d100      	bne.n	8010f54 <HAL_DMA_IRQHandler+0x124>
 8010f52:	e1d8      	b.n	8011306 <HAL_DMA_IRQHandler+0x4d6>
 8010f54:	4a71      	ldr	r2, [pc, #452]	; (801111c <HAL_DMA_IRQHandler+0x2ec>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d100      	bne.n	8010f5c <HAL_DMA_IRQHandler+0x12c>
 8010f5a:	e1d7      	b.n	801130c <HAL_DMA_IRQHandler+0x4dc>
 8010f5c:	4a70      	ldr	r2, [pc, #448]	; (8011120 <HAL_DMA_IRQHandler+0x2f0>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d100      	bne.n	8010f64 <HAL_DMA_IRQHandler+0x134>
 8010f62:	e1d6      	b.n	8011312 <HAL_DMA_IRQHandler+0x4e2>
 8010f64:	4a6f      	ldr	r2, [pc, #444]	; (8011124 <HAL_DMA_IRQHandler+0x2f4>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d100      	bne.n	8010f6c <HAL_DMA_IRQHandler+0x13c>
 8010f6a:	e1d5      	b.n	8011318 <HAL_DMA_IRQHandler+0x4e8>
 8010f6c:	4a66      	ldr	r2, [pc, #408]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d100      	bne.n	8010f74 <HAL_DMA_IRQHandler+0x144>
 8010f72:	e1d4      	b.n	801131e <HAL_DMA_IRQHandler+0x4ee>
 8010f74:	4a6c      	ldr	r2, [pc, #432]	; (8011128 <HAL_DMA_IRQHandler+0x2f8>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d100      	bne.n	8010f7c <HAL_DMA_IRQHandler+0x14c>
 8010f7a:	e1d3      	b.n	8011324 <HAL_DMA_IRQHandler+0x4f4>
 8010f7c:	4a6b      	ldr	r2, [pc, #428]	; (801112c <HAL_DMA_IRQHandler+0x2fc>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d100      	bne.n	8010f84 <HAL_DMA_IRQHandler+0x154>
 8010f82:	e1d1      	b.n	8011328 <HAL_DMA_IRQHandler+0x4f8>
 8010f84:	4a6a      	ldr	r2, [pc, #424]	; (8011130 <HAL_DMA_IRQHandler+0x300>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d100      	bne.n	8010f8c <HAL_DMA_IRQHandler+0x15c>
 8010f8a:	e1cf      	b.n	801132c <HAL_DMA_IRQHandler+0x4fc>
 8010f8c:	4a69      	ldr	r2, [pc, #420]	; (8011134 <HAL_DMA_IRQHandler+0x304>)
 8010f8e:	189a      	adds	r2, r3, r2
 8010f90:	4250      	negs	r0, r2
 8010f92:	4142      	adcs	r2, r0
 8010f94:	4252      	negs	r2, r2
 8010f96:	486a      	ldr	r0, [pc, #424]	; (8011140 <HAL_DMA_IRQHandler+0x310>)
 8010f98:	4002      	ands	r2, r0
 8010f9a:	2080      	movs	r0, #128	; 0x80
 8010f9c:	02c0      	lsls	r0, r0, #11
 8010f9e:	4684      	mov	ip, r0
 8010fa0:	4462      	add	r2, ip
 8010fa2:	e169      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010fa4:	2280      	movs	r2, #128	; 0x80
 8010fa6:	e7c4      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fa8:	2280      	movs	r2, #128	; 0x80
 8010faa:	0112      	lsls	r2, r2, #4
 8010fac:	e7c1      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fae:	2280      	movs	r2, #128	; 0x80
 8010fb0:	0212      	lsls	r2, r2, #8
 8010fb2:	e7be      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fb4:	2280      	movs	r2, #128	; 0x80
 8010fb6:	0312      	lsls	r2, r2, #12
 8010fb8:	e7bb      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fba:	2280      	movs	r2, #128	; 0x80
 8010fbc:	0412      	lsls	r2, r2, #16
 8010fbe:	e7b8      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fc0:	2280      	movs	r2, #128	; 0x80
 8010fc2:	0512      	lsls	r2, r2, #20
 8010fc4:	e7b5      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fc6:	2208      	movs	r2, #8
 8010fc8:	e7b3      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fca:	2280      	movs	r2, #128	; 0x80
 8010fcc:	e7b1      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
 8010fce:	2280      	movs	r2, #128	; 0x80
 8010fd0:	0112      	lsls	r2, r2, #4
 8010fd2:	e7ae      	b.n	8010f32 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	2108      	movs	r1, #8
 8010fd8:	438a      	bics	r2, r1
 8010fda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010fdc:	6823      	ldr	r3, [r4, #0]
 8010fde:	4a4a      	ldr	r2, [pc, #296]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d800      	bhi.n	8010fe6 <HAL_DMA_IRQHandler+0x1b6>
 8010fe4:	e0ae      	b.n	8011144 <HAL_DMA_IRQHandler+0x314>
 8010fe6:	4a4a      	ldr	r2, [pc, #296]	; (8011110 <HAL_DMA_IRQHandler+0x2e0>)
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	d027      	beq.n	801103c <HAL_DMA_IRQHandler+0x20c>
 8010fec:	4a49      	ldr	r2, [pc, #292]	; (8011114 <HAL_DMA_IRQHandler+0x2e4>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d071      	beq.n	80110d6 <HAL_DMA_IRQHandler+0x2a6>
 8010ff2:	4a49      	ldr	r2, [pc, #292]	; (8011118 <HAL_DMA_IRQHandler+0x2e8>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d070      	beq.n	80110da <HAL_DMA_IRQHandler+0x2aa>
 8010ff8:	4a48      	ldr	r2, [pc, #288]	; (801111c <HAL_DMA_IRQHandler+0x2ec>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d070      	beq.n	80110e0 <HAL_DMA_IRQHandler+0x2b0>
 8010ffe:	4a48      	ldr	r2, [pc, #288]	; (8011120 <HAL_DMA_IRQHandler+0x2f0>)
 8011000:	4293      	cmp	r3, r2
 8011002:	d070      	beq.n	80110e6 <HAL_DMA_IRQHandler+0x2b6>
 8011004:	4a47      	ldr	r2, [pc, #284]	; (8011124 <HAL_DMA_IRQHandler+0x2f4>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d070      	beq.n	80110ec <HAL_DMA_IRQHandler+0x2bc>
 801100a:	4a3f      	ldr	r2, [pc, #252]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d070      	beq.n	80110f2 <HAL_DMA_IRQHandler+0x2c2>
 8011010:	4a45      	ldr	r2, [pc, #276]	; (8011128 <HAL_DMA_IRQHandler+0x2f8>)
 8011012:	4293      	cmp	r3, r2
 8011014:	d070      	beq.n	80110f8 <HAL_DMA_IRQHandler+0x2c8>
 8011016:	4a45      	ldr	r2, [pc, #276]	; (801112c <HAL_DMA_IRQHandler+0x2fc>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d06f      	beq.n	80110fc <HAL_DMA_IRQHandler+0x2cc>
 801101c:	4a44      	ldr	r2, [pc, #272]	; (8011130 <HAL_DMA_IRQHandler+0x300>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d06e      	beq.n	8011100 <HAL_DMA_IRQHandler+0x2d0>
 8011022:	4a44      	ldr	r2, [pc, #272]	; (8011134 <HAL_DMA_IRQHandler+0x304>)
 8011024:	4694      	mov	ip, r2
 8011026:	4463      	add	r3, ip
 8011028:	425a      	negs	r2, r3
 801102a:	4153      	adcs	r3, r2
 801102c:	425b      	negs	r3, r3
 801102e:	4a42      	ldr	r2, [pc, #264]	; (8011138 <HAL_DMA_IRQHandler+0x308>)
 8011030:	4013      	ands	r3, r2
 8011032:	2280      	movs	r2, #128	; 0x80
 8011034:	0312      	lsls	r2, r2, #12
 8011036:	4694      	mov	ip, r2
 8011038:	4463      	add	r3, ip
 801103a:	e000      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 801103c:	2308      	movs	r3, #8
 801103e:	4a33      	ldr	r2, [pc, #204]	; (801110c <HAL_DMA_IRQHandler+0x2dc>)
 8011040:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011044:	2201      	movs	r2, #1
 8011046:	4313      	orrs	r3, r2
 8011048:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801104a:	2321      	movs	r3, #33	; 0x21
 801104c:	3203      	adds	r2, #3
 801104e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011050:	3b01      	subs	r3, #1
 8011052:	2200      	movs	r2, #0
 8011054:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 801105c:	0020      	movs	r0, r4
 801105e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011060:	6823      	ldr	r3, [r4, #0]
 8011062:	4a29      	ldr	r2, [pc, #164]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 8011064:	4293      	cmp	r3, r2
 8011066:	d800      	bhi.n	801106a <HAL_DMA_IRQHandler+0x23a>
 8011068:	e766      	b.n	8010f38 <HAL_DMA_IRQHandler+0x108>
 801106a:	4a28      	ldr	r2, [pc, #160]	; (801110c <HAL_DMA_IRQHandler+0x2dc>)
 801106c:	6811      	ldr	r1, [r2, #0]
 801106e:	4a28      	ldr	r2, [pc, #160]	; (8011110 <HAL_DMA_IRQHandler+0x2e0>)
 8011070:	4293      	cmp	r3, r2
 8011072:	d100      	bne.n	8011076 <HAL_DMA_IRQHandler+0x246>
 8011074:	e0ad      	b.n	80111d2 <HAL_DMA_IRQHandler+0x3a2>
 8011076:	4a27      	ldr	r2, [pc, #156]	; (8011114 <HAL_DMA_IRQHandler+0x2e4>)
 8011078:	4293      	cmp	r3, r2
 801107a:	d100      	bne.n	801107e <HAL_DMA_IRQHandler+0x24e>
 801107c:	e0e3      	b.n	8011246 <HAL_DMA_IRQHandler+0x416>
 801107e:	4a26      	ldr	r2, [pc, #152]	; (8011118 <HAL_DMA_IRQHandler+0x2e8>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d100      	bne.n	8011086 <HAL_DMA_IRQHandler+0x256>
 8011084:	e0e1      	b.n	801124a <HAL_DMA_IRQHandler+0x41a>
 8011086:	4a25      	ldr	r2, [pc, #148]	; (801111c <HAL_DMA_IRQHandler+0x2ec>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d100      	bne.n	801108e <HAL_DMA_IRQHandler+0x25e>
 801108c:	e0e0      	b.n	8011250 <HAL_DMA_IRQHandler+0x420>
 801108e:	4a24      	ldr	r2, [pc, #144]	; (8011120 <HAL_DMA_IRQHandler+0x2f0>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d100      	bne.n	8011096 <HAL_DMA_IRQHandler+0x266>
 8011094:	e0df      	b.n	8011256 <HAL_DMA_IRQHandler+0x426>
 8011096:	4a23      	ldr	r2, [pc, #140]	; (8011124 <HAL_DMA_IRQHandler+0x2f4>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d100      	bne.n	801109e <HAL_DMA_IRQHandler+0x26e>
 801109c:	e0de      	b.n	801125c <HAL_DMA_IRQHandler+0x42c>
 801109e:	4a1a      	ldr	r2, [pc, #104]	; (8011108 <HAL_DMA_IRQHandler+0x2d8>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d100      	bne.n	80110a6 <HAL_DMA_IRQHandler+0x276>
 80110a4:	e0dd      	b.n	8011262 <HAL_DMA_IRQHandler+0x432>
 80110a6:	4a20      	ldr	r2, [pc, #128]	; (8011128 <HAL_DMA_IRQHandler+0x2f8>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d100      	bne.n	80110ae <HAL_DMA_IRQHandler+0x27e>
 80110ac:	e0dc      	b.n	8011268 <HAL_DMA_IRQHandler+0x438>
 80110ae:	4a1f      	ldr	r2, [pc, #124]	; (801112c <HAL_DMA_IRQHandler+0x2fc>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d100      	bne.n	80110b6 <HAL_DMA_IRQHandler+0x286>
 80110b4:	e0da      	b.n	801126c <HAL_DMA_IRQHandler+0x43c>
 80110b6:	4a1e      	ldr	r2, [pc, #120]	; (8011130 <HAL_DMA_IRQHandler+0x300>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d100      	bne.n	80110be <HAL_DMA_IRQHandler+0x28e>
 80110bc:	e0d8      	b.n	8011270 <HAL_DMA_IRQHandler+0x440>
 80110be:	4a1d      	ldr	r2, [pc, #116]	; (8011134 <HAL_DMA_IRQHandler+0x304>)
 80110c0:	189a      	adds	r2, r3, r2
 80110c2:	4250      	negs	r0, r2
 80110c4:	4142      	adcs	r2, r0
 80110c6:	4252      	negs	r2, r2
 80110c8:	481d      	ldr	r0, [pc, #116]	; (8011140 <HAL_DMA_IRQHandler+0x310>)
 80110ca:	4002      	ands	r2, r0
 80110cc:	2080      	movs	r0, #128	; 0x80
 80110ce:	02c0      	lsls	r0, r0, #11
 80110d0:	4684      	mov	ip, r0
 80110d2:	4462      	add	r2, ip
 80110d4:	e07e      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80110d6:	2380      	movs	r3, #128	; 0x80
 80110d8:	e7b1      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110da:	2380      	movs	r3, #128	; 0x80
 80110dc:	011b      	lsls	r3, r3, #4
 80110de:	e7ae      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110e0:	2380      	movs	r3, #128	; 0x80
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	e7ab      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110e6:	2380      	movs	r3, #128	; 0x80
 80110e8:	031b      	lsls	r3, r3, #12
 80110ea:	e7a8      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110ec:	2380      	movs	r3, #128	; 0x80
 80110ee:	041b      	lsls	r3, r3, #16
 80110f0:	e7a5      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110f2:	2380      	movs	r3, #128	; 0x80
 80110f4:	051b      	lsls	r3, r3, #20
 80110f6:	e7a2      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110f8:	2308      	movs	r3, #8
 80110fa:	e7a0      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 80110fc:	2380      	movs	r3, #128	; 0x80
 80110fe:	e79e      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 8011100:	2380      	movs	r3, #128	; 0x80
 8011102:	011b      	lsls	r3, r3, #4
 8011104:	e79b      	b.n	801103e <HAL_DMA_IRQHandler+0x20e>
 8011106:	46c0      	nop			; (mov r8, r8)
 8011108:	40020080 	.word	0x40020080
 801110c:	40020400 	.word	0x40020400
 8011110:	40020008 	.word	0x40020008
 8011114:	4002001c 	.word	0x4002001c
 8011118:	40020030 	.word	0x40020030
 801111c:	40020044 	.word	0x40020044
 8011120:	40020058 	.word	0x40020058
 8011124:	4002006c 	.word	0x4002006c
 8011128:	40020408 	.word	0x40020408
 801112c:	4002041c 	.word	0x4002041c
 8011130:	40020430 	.word	0x40020430
 8011134:	bffdfbbc 	.word	0xbffdfbbc
 8011138:	fff88000 	.word	0xfff88000
 801113c:	40020000 	.word	0x40020000
 8011140:	fffc4000 	.word	0xfffc4000
 8011144:	4aaa      	ldr	r2, [pc, #680]	; (80113f0 <HAL_DMA_IRQHandler+0x5c0>)
 8011146:	4293      	cmp	r3, r2
 8011148:	d027      	beq.n	801119a <HAL_DMA_IRQHandler+0x36a>
 801114a:	4aaa      	ldr	r2, [pc, #680]	; (80113f4 <HAL_DMA_IRQHandler+0x5c4>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d028      	beq.n	80111a2 <HAL_DMA_IRQHandler+0x372>
 8011150:	4aa9      	ldr	r2, [pc, #676]	; (80113f8 <HAL_DMA_IRQHandler+0x5c8>)
 8011152:	4293      	cmp	r3, r2
 8011154:	d027      	beq.n	80111a6 <HAL_DMA_IRQHandler+0x376>
 8011156:	4aa9      	ldr	r2, [pc, #676]	; (80113fc <HAL_DMA_IRQHandler+0x5cc>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d027      	beq.n	80111ac <HAL_DMA_IRQHandler+0x37c>
 801115c:	4aa8      	ldr	r2, [pc, #672]	; (8011400 <HAL_DMA_IRQHandler+0x5d0>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d027      	beq.n	80111b2 <HAL_DMA_IRQHandler+0x382>
 8011162:	4aa8      	ldr	r2, [pc, #672]	; (8011404 <HAL_DMA_IRQHandler+0x5d4>)
 8011164:	4293      	cmp	r3, r2
 8011166:	d027      	beq.n	80111b8 <HAL_DMA_IRQHandler+0x388>
 8011168:	4aa7      	ldr	r2, [pc, #668]	; (8011408 <HAL_DMA_IRQHandler+0x5d8>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d027      	beq.n	80111be <HAL_DMA_IRQHandler+0x38e>
 801116e:	4aa7      	ldr	r2, [pc, #668]	; (801140c <HAL_DMA_IRQHandler+0x5dc>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d027      	beq.n	80111c4 <HAL_DMA_IRQHandler+0x394>
 8011174:	4aa6      	ldr	r2, [pc, #664]	; (8011410 <HAL_DMA_IRQHandler+0x5e0>)
 8011176:	4293      	cmp	r3, r2
 8011178:	d026      	beq.n	80111c8 <HAL_DMA_IRQHandler+0x398>
 801117a:	4aa6      	ldr	r2, [pc, #664]	; (8011414 <HAL_DMA_IRQHandler+0x5e4>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d025      	beq.n	80111cc <HAL_DMA_IRQHandler+0x39c>
 8011180:	4aa5      	ldr	r2, [pc, #660]	; (8011418 <HAL_DMA_IRQHandler+0x5e8>)
 8011182:	4694      	mov	ip, r2
 8011184:	4463      	add	r3, ip
 8011186:	425a      	negs	r2, r3
 8011188:	4153      	adcs	r3, r2
 801118a:	425b      	negs	r3, r3
 801118c:	4aa3      	ldr	r2, [pc, #652]	; (801141c <HAL_DMA_IRQHandler+0x5ec>)
 801118e:	4013      	ands	r3, r2
 8011190:	2280      	movs	r2, #128	; 0x80
 8011192:	0312      	lsls	r2, r2, #12
 8011194:	4694      	mov	ip, r2
 8011196:	4463      	add	r3, ip
 8011198:	e000      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 801119a:	2308      	movs	r3, #8
 801119c:	4aa0      	ldr	r2, [pc, #640]	; (8011420 <HAL_DMA_IRQHandler+0x5f0>)
 801119e:	6053      	str	r3, [r2, #4]
 80111a0:	e74f      	b.n	8011042 <HAL_DMA_IRQHandler+0x212>
 80111a2:	2380      	movs	r3, #128	; 0x80
 80111a4:	e7fa      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111a6:	2380      	movs	r3, #128	; 0x80
 80111a8:	011b      	lsls	r3, r3, #4
 80111aa:	e7f7      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111ac:	2380      	movs	r3, #128	; 0x80
 80111ae:	021b      	lsls	r3, r3, #8
 80111b0:	e7f4      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111b2:	2380      	movs	r3, #128	; 0x80
 80111b4:	031b      	lsls	r3, r3, #12
 80111b6:	e7f1      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111b8:	2380      	movs	r3, #128	; 0x80
 80111ba:	041b      	lsls	r3, r3, #16
 80111bc:	e7ee      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111be:	2380      	movs	r3, #128	; 0x80
 80111c0:	051b      	lsls	r3, r3, #20
 80111c2:	e7eb      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111c4:	2308      	movs	r3, #8
 80111c6:	e7e9      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111c8:	2380      	movs	r3, #128	; 0x80
 80111ca:	e7e7      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
 80111cc:	2380      	movs	r3, #128	; 0x80
 80111ce:	011b      	lsls	r3, r3, #4
 80111d0:	e7e4      	b.n	801119c <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80111d2:	2204      	movs	r2, #4
 80111d4:	420a      	tst	r2, r1
 80111d6:	d152      	bne.n	801127e <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80111d8:	6821      	ldr	r1, [r4, #0]
 80111da:	4b92      	ldr	r3, [pc, #584]	; (8011424 <HAL_DMA_IRQHandler+0x5f4>)
 80111dc:	6818      	ldr	r0, [r3, #0]
 80111de:	4a84      	ldr	r2, [pc, #528]	; (80113f0 <HAL_DMA_IRQHandler+0x5c0>)
 80111e0:	4291      	cmp	r1, r2
 80111e2:	d100      	bne.n	80111e6 <HAL_DMA_IRQHandler+0x3b6>
 80111e4:	e16b      	b.n	80114be <HAL_DMA_IRQHandler+0x68e>
 80111e6:	4a83      	ldr	r2, [pc, #524]	; (80113f4 <HAL_DMA_IRQHandler+0x5c4>)
 80111e8:	4291      	cmp	r1, r2
 80111ea:	d100      	bne.n	80111ee <HAL_DMA_IRQHandler+0x3be>
 80111ec:	e1aa      	b.n	8011544 <HAL_DMA_IRQHandler+0x714>
 80111ee:	4a82      	ldr	r2, [pc, #520]	; (80113f8 <HAL_DMA_IRQHandler+0x5c8>)
 80111f0:	4291      	cmp	r1, r2
 80111f2:	d100      	bne.n	80111f6 <HAL_DMA_IRQHandler+0x3c6>
 80111f4:	e1a8      	b.n	8011548 <HAL_DMA_IRQHandler+0x718>
 80111f6:	4a81      	ldr	r2, [pc, #516]	; (80113fc <HAL_DMA_IRQHandler+0x5cc>)
 80111f8:	4291      	cmp	r1, r2
 80111fa:	d100      	bne.n	80111fe <HAL_DMA_IRQHandler+0x3ce>
 80111fc:	e1a7      	b.n	801154e <HAL_DMA_IRQHandler+0x71e>
 80111fe:	4b80      	ldr	r3, [pc, #512]	; (8011400 <HAL_DMA_IRQHandler+0x5d0>)
 8011200:	4299      	cmp	r1, r3
 8011202:	d100      	bne.n	8011206 <HAL_DMA_IRQHandler+0x3d6>
 8011204:	e1a6      	b.n	8011554 <HAL_DMA_IRQHandler+0x724>
 8011206:	4b7f      	ldr	r3, [pc, #508]	; (8011404 <HAL_DMA_IRQHandler+0x5d4>)
 8011208:	4299      	cmp	r1, r3
 801120a:	d100      	bne.n	801120e <HAL_DMA_IRQHandler+0x3de>
 801120c:	e1a5      	b.n	801155a <HAL_DMA_IRQHandler+0x72a>
 801120e:	4b7e      	ldr	r3, [pc, #504]	; (8011408 <HAL_DMA_IRQHandler+0x5d8>)
 8011210:	4299      	cmp	r1, r3
 8011212:	d100      	bne.n	8011216 <HAL_DMA_IRQHandler+0x3e6>
 8011214:	e1a4      	b.n	8011560 <HAL_DMA_IRQHandler+0x730>
 8011216:	4b7d      	ldr	r3, [pc, #500]	; (801140c <HAL_DMA_IRQHandler+0x5dc>)
 8011218:	4299      	cmp	r1, r3
 801121a:	d100      	bne.n	801121e <HAL_DMA_IRQHandler+0x3ee>
 801121c:	e1a3      	b.n	8011566 <HAL_DMA_IRQHandler+0x736>
 801121e:	4b7c      	ldr	r3, [pc, #496]	; (8011410 <HAL_DMA_IRQHandler+0x5e0>)
 8011220:	4299      	cmp	r1, r3
 8011222:	d100      	bne.n	8011226 <HAL_DMA_IRQHandler+0x3f6>
 8011224:	e1a1      	b.n	801156a <HAL_DMA_IRQHandler+0x73a>
 8011226:	4b7b      	ldr	r3, [pc, #492]	; (8011414 <HAL_DMA_IRQHandler+0x5e4>)
 8011228:	4299      	cmp	r1, r3
 801122a:	d100      	bne.n	801122e <HAL_DMA_IRQHandler+0x3fe>
 801122c:	e19f      	b.n	801156e <HAL_DMA_IRQHandler+0x73e>
 801122e:	4b7a      	ldr	r3, [pc, #488]	; (8011418 <HAL_DMA_IRQHandler+0x5e8>)
 8011230:	18ca      	adds	r2, r1, r3
 8011232:	4253      	negs	r3, r2
 8011234:	415a      	adcs	r2, r3
 8011236:	4252      	negs	r2, r2
 8011238:	4b7b      	ldr	r3, [pc, #492]	; (8011428 <HAL_DMA_IRQHandler+0x5f8>)
 801123a:	4013      	ands	r3, r2
 801123c:	2280      	movs	r2, #128	; 0x80
 801123e:	0292      	lsls	r2, r2, #10
 8011240:	4694      	mov	ip, r2
 8011242:	4463      	add	r3, ip
 8011244:	e13c      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011246:	2240      	movs	r2, #64	; 0x40
 8011248:	e7c4      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 801124a:	2280      	movs	r2, #128	; 0x80
 801124c:	00d2      	lsls	r2, r2, #3
 801124e:	e7c1      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 8011250:	2280      	movs	r2, #128	; 0x80
 8011252:	01d2      	lsls	r2, r2, #7
 8011254:	e7be      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 8011256:	2280      	movs	r2, #128	; 0x80
 8011258:	02d2      	lsls	r2, r2, #11
 801125a:	e7bb      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 801125c:	2280      	movs	r2, #128	; 0x80
 801125e:	03d2      	lsls	r2, r2, #15
 8011260:	e7b8      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 8011262:	2280      	movs	r2, #128	; 0x80
 8011264:	04d2      	lsls	r2, r2, #19
 8011266:	e7b5      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 8011268:	2204      	movs	r2, #4
 801126a:	e7b3      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 801126c:	2240      	movs	r2, #64	; 0x40
 801126e:	e7b1      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 8011270:	2280      	movs	r2, #128	; 0x80
 8011272:	00d2      	lsls	r2, r2, #3
 8011274:	e7ae      	b.n	80111d4 <HAL_DMA_IRQHandler+0x3a4>
 8011276:	2204      	movs	r2, #4
 8011278:	420a      	tst	r2, r1
 801127a:	d100      	bne.n	801127e <HAL_DMA_IRQHandler+0x44e>
 801127c:	e208      	b.n	8011690 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	0752      	lsls	r2, r2, #29
 8011282:	d561      	bpl.n	8011348 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	0692      	lsls	r2, r2, #26
 8011288:	d403      	bmi.n	8011292 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	2104      	movs	r1, #4
 801128e:	438a      	bics	r2, r1
 8011290:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	4a5c      	ldr	r2, [pc, #368]	; (8011408 <HAL_DMA_IRQHandler+0x5d8>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d800      	bhi.n	801129c <HAL_DMA_IRQHandler+0x46c>
 801129a:	e0c9      	b.n	8011430 <HAL_DMA_IRQHandler+0x600>
 801129c:	4a54      	ldr	r2, [pc, #336]	; (80113f0 <HAL_DMA_IRQHandler+0x5c0>)
 801129e:	4293      	cmp	r3, r2
 80112a0:	d047      	beq.n	8011332 <HAL_DMA_IRQHandler+0x502>
 80112a2:	4a54      	ldr	r2, [pc, #336]	; (80113f4 <HAL_DMA_IRQHandler+0x5c4>)
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d100      	bne.n	80112aa <HAL_DMA_IRQHandler+0x47a>
 80112a8:	e089      	b.n	80113be <HAL_DMA_IRQHandler+0x58e>
 80112aa:	4a53      	ldr	r2, [pc, #332]	; (80113f8 <HAL_DMA_IRQHandler+0x5c8>)
 80112ac:	4293      	cmp	r3, r2
 80112ae:	d100      	bne.n	80112b2 <HAL_DMA_IRQHandler+0x482>
 80112b0:	e087      	b.n	80113c2 <HAL_DMA_IRQHandler+0x592>
 80112b2:	4a52      	ldr	r2, [pc, #328]	; (80113fc <HAL_DMA_IRQHandler+0x5cc>)
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d100      	bne.n	80112ba <HAL_DMA_IRQHandler+0x48a>
 80112b8:	e086      	b.n	80113c8 <HAL_DMA_IRQHandler+0x598>
 80112ba:	4a51      	ldr	r2, [pc, #324]	; (8011400 <HAL_DMA_IRQHandler+0x5d0>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	d100      	bne.n	80112c2 <HAL_DMA_IRQHandler+0x492>
 80112c0:	e085      	b.n	80113ce <HAL_DMA_IRQHandler+0x59e>
 80112c2:	4a50      	ldr	r2, [pc, #320]	; (8011404 <HAL_DMA_IRQHandler+0x5d4>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d100      	bne.n	80112ca <HAL_DMA_IRQHandler+0x49a>
 80112c8:	e084      	b.n	80113d4 <HAL_DMA_IRQHandler+0x5a4>
 80112ca:	4a4f      	ldr	r2, [pc, #316]	; (8011408 <HAL_DMA_IRQHandler+0x5d8>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d100      	bne.n	80112d2 <HAL_DMA_IRQHandler+0x4a2>
 80112d0:	e083      	b.n	80113da <HAL_DMA_IRQHandler+0x5aa>
 80112d2:	4a4e      	ldr	r2, [pc, #312]	; (801140c <HAL_DMA_IRQHandler+0x5dc>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d100      	bne.n	80112da <HAL_DMA_IRQHandler+0x4aa>
 80112d8:	e082      	b.n	80113e0 <HAL_DMA_IRQHandler+0x5b0>
 80112da:	4a4d      	ldr	r2, [pc, #308]	; (8011410 <HAL_DMA_IRQHandler+0x5e0>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d100      	bne.n	80112e2 <HAL_DMA_IRQHandler+0x4b2>
 80112e0:	e080      	b.n	80113e4 <HAL_DMA_IRQHandler+0x5b4>
 80112e2:	4a4c      	ldr	r2, [pc, #304]	; (8011414 <HAL_DMA_IRQHandler+0x5e4>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d07f      	beq.n	80113e8 <HAL_DMA_IRQHandler+0x5b8>
 80112e8:	4a4b      	ldr	r2, [pc, #300]	; (8011418 <HAL_DMA_IRQHandler+0x5e8>)
 80112ea:	4694      	mov	ip, r2
 80112ec:	4463      	add	r3, ip
 80112ee:	425a      	negs	r2, r3
 80112f0:	4153      	adcs	r3, r2
 80112f2:	425b      	negs	r3, r3
 80112f4:	4a4d      	ldr	r2, [pc, #308]	; (801142c <HAL_DMA_IRQHandler+0x5fc>)
 80112f6:	4013      	ands	r3, r2
 80112f8:	2280      	movs	r2, #128	; 0x80
 80112fa:	02d2      	lsls	r2, r2, #11
 80112fc:	4694      	mov	ip, r2
 80112fe:	4463      	add	r3, ip
 8011300:	e018      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011302:	2240      	movs	r2, #64	; 0x40
 8011304:	e7b8      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 8011306:	2280      	movs	r2, #128	; 0x80
 8011308:	00d2      	lsls	r2, r2, #3
 801130a:	e7b5      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 801130c:	2280      	movs	r2, #128	; 0x80
 801130e:	01d2      	lsls	r2, r2, #7
 8011310:	e7b2      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 8011312:	2280      	movs	r2, #128	; 0x80
 8011314:	02d2      	lsls	r2, r2, #11
 8011316:	e7af      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 8011318:	2280      	movs	r2, #128	; 0x80
 801131a:	03d2      	lsls	r2, r2, #15
 801131c:	e7ac      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 801131e:	2280      	movs	r2, #128	; 0x80
 8011320:	04d2      	lsls	r2, r2, #19
 8011322:	e7a9      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 8011324:	2204      	movs	r2, #4
 8011326:	e7a7      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 8011328:	2240      	movs	r2, #64	; 0x40
 801132a:	e7a5      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
 801132c:	2280      	movs	r2, #128	; 0x80
 801132e:	00d2      	lsls	r2, r2, #3
 8011330:	e7a2      	b.n	8011278 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011332:	2304      	movs	r3, #4
 8011334:	4a3b      	ldr	r2, [pc, #236]	; (8011424 <HAL_DMA_IRQHandler+0x5f4>)
 8011336:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011338:	2321      	movs	r3, #33	; 0x21
 801133a:	2211      	movs	r2, #17
 801133c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801133e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8011344:	0020      	movs	r0, r4
 8011346:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011348:	6821      	ldr	r1, [r4, #0]
 801134a:	4b2f      	ldr	r3, [pc, #188]	; (8011408 <HAL_DMA_IRQHandler+0x5d8>)
 801134c:	4299      	cmp	r1, r3
 801134e:	d900      	bls.n	8011352 <HAL_DMA_IRQHandler+0x522>
 8011350:	e743      	b.n	80111da <HAL_DMA_IRQHandler+0x3aa>
 8011352:	4b33      	ldr	r3, [pc, #204]	; (8011420 <HAL_DMA_IRQHandler+0x5f0>)
 8011354:	6818      	ldr	r0, [r3, #0]
 8011356:	4a26      	ldr	r2, [pc, #152]	; (80113f0 <HAL_DMA_IRQHandler+0x5c0>)
 8011358:	4291      	cmp	r1, r2
 801135a:	d100      	bne.n	801135e <HAL_DMA_IRQHandler+0x52e>
 801135c:	e10a      	b.n	8011574 <HAL_DMA_IRQHandler+0x744>
 801135e:	4a25      	ldr	r2, [pc, #148]	; (80113f4 <HAL_DMA_IRQHandler+0x5c4>)
 8011360:	4291      	cmp	r1, r2
 8011362:	d100      	bne.n	8011366 <HAL_DMA_IRQHandler+0x536>
 8011364:	e10c      	b.n	8011580 <HAL_DMA_IRQHandler+0x750>
 8011366:	4a24      	ldr	r2, [pc, #144]	; (80113f8 <HAL_DMA_IRQHandler+0x5c8>)
 8011368:	4291      	cmp	r1, r2
 801136a:	d100      	bne.n	801136e <HAL_DMA_IRQHandler+0x53e>
 801136c:	e10a      	b.n	8011584 <HAL_DMA_IRQHandler+0x754>
 801136e:	4a23      	ldr	r2, [pc, #140]	; (80113fc <HAL_DMA_IRQHandler+0x5cc>)
 8011370:	4291      	cmp	r1, r2
 8011372:	d100      	bne.n	8011376 <HAL_DMA_IRQHandler+0x546>
 8011374:	e109      	b.n	801158a <HAL_DMA_IRQHandler+0x75a>
 8011376:	4b22      	ldr	r3, [pc, #136]	; (8011400 <HAL_DMA_IRQHandler+0x5d0>)
 8011378:	4299      	cmp	r1, r3
 801137a:	d100      	bne.n	801137e <HAL_DMA_IRQHandler+0x54e>
 801137c:	e108      	b.n	8011590 <HAL_DMA_IRQHandler+0x760>
 801137e:	4b21      	ldr	r3, [pc, #132]	; (8011404 <HAL_DMA_IRQHandler+0x5d4>)
 8011380:	4299      	cmp	r1, r3
 8011382:	d100      	bne.n	8011386 <HAL_DMA_IRQHandler+0x556>
 8011384:	e107      	b.n	8011596 <HAL_DMA_IRQHandler+0x766>
 8011386:	4b20      	ldr	r3, [pc, #128]	; (8011408 <HAL_DMA_IRQHandler+0x5d8>)
 8011388:	4299      	cmp	r1, r3
 801138a:	d100      	bne.n	801138e <HAL_DMA_IRQHandler+0x55e>
 801138c:	e106      	b.n	801159c <HAL_DMA_IRQHandler+0x76c>
 801138e:	4b1f      	ldr	r3, [pc, #124]	; (801140c <HAL_DMA_IRQHandler+0x5dc>)
 8011390:	4299      	cmp	r1, r3
 8011392:	d100      	bne.n	8011396 <HAL_DMA_IRQHandler+0x566>
 8011394:	e105      	b.n	80115a2 <HAL_DMA_IRQHandler+0x772>
 8011396:	4b1e      	ldr	r3, [pc, #120]	; (8011410 <HAL_DMA_IRQHandler+0x5e0>)
 8011398:	4299      	cmp	r1, r3
 801139a:	d100      	bne.n	801139e <HAL_DMA_IRQHandler+0x56e>
 801139c:	e103      	b.n	80115a6 <HAL_DMA_IRQHandler+0x776>
 801139e:	4b1d      	ldr	r3, [pc, #116]	; (8011414 <HAL_DMA_IRQHandler+0x5e4>)
 80113a0:	4299      	cmp	r1, r3
 80113a2:	d100      	bne.n	80113a6 <HAL_DMA_IRQHandler+0x576>
 80113a4:	e101      	b.n	80115aa <HAL_DMA_IRQHandler+0x77a>
 80113a6:	4b1c      	ldr	r3, [pc, #112]	; (8011418 <HAL_DMA_IRQHandler+0x5e8>)
 80113a8:	18ca      	adds	r2, r1, r3
 80113aa:	4253      	negs	r3, r2
 80113ac:	415a      	adcs	r2, r3
 80113ae:	4252      	negs	r2, r2
 80113b0:	4b1d      	ldr	r3, [pc, #116]	; (8011428 <HAL_DMA_IRQHandler+0x5f8>)
 80113b2:	4013      	ands	r3, r2
 80113b4:	2280      	movs	r2, #128	; 0x80
 80113b6:	0292      	lsls	r2, r2, #10
 80113b8:	4694      	mov	ip, r2
 80113ba:	4463      	add	r3, ip
 80113bc:	e0db      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80113be:	2340      	movs	r3, #64	; 0x40
 80113c0:	e7b8      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113c2:	2380      	movs	r3, #128	; 0x80
 80113c4:	00db      	lsls	r3, r3, #3
 80113c6:	e7b5      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113c8:	2380      	movs	r3, #128	; 0x80
 80113ca:	01db      	lsls	r3, r3, #7
 80113cc:	e7b2      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113ce:	2380      	movs	r3, #128	; 0x80
 80113d0:	02db      	lsls	r3, r3, #11
 80113d2:	e7af      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113d4:	2380      	movs	r3, #128	; 0x80
 80113d6:	03db      	lsls	r3, r3, #15
 80113d8:	e7ac      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113da:	2380      	movs	r3, #128	; 0x80
 80113dc:	04db      	lsls	r3, r3, #19
 80113de:	e7a9      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113e0:	2304      	movs	r3, #4
 80113e2:	e7a7      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113e4:	2340      	movs	r3, #64	; 0x40
 80113e6:	e7a5      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113e8:	2380      	movs	r3, #128	; 0x80
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	e7a2      	b.n	8011334 <HAL_DMA_IRQHandler+0x504>
 80113ee:	46c0      	nop			; (mov r8, r8)
 80113f0:	40020008 	.word	0x40020008
 80113f4:	4002001c 	.word	0x4002001c
 80113f8:	40020030 	.word	0x40020030
 80113fc:	40020044 	.word	0x40020044
 8011400:	40020058 	.word	0x40020058
 8011404:	4002006c 	.word	0x4002006c
 8011408:	40020080 	.word	0x40020080
 801140c:	40020408 	.word	0x40020408
 8011410:	4002041c 	.word	0x4002041c
 8011414:	40020430 	.word	0x40020430
 8011418:	bffdfbbc 	.word	0xbffdfbbc
 801141c:	fff88000 	.word	0xfff88000
 8011420:	40020000 	.word	0x40020000
 8011424:	40020400 	.word	0x40020400
 8011428:	fffe2000 	.word	0xfffe2000
 801142c:	fffc4000 	.word	0xfffc4000
 8011430:	4a9b      	ldr	r2, [pc, #620]	; (80116a0 <HAL_DMA_IRQHandler+0x870>)
 8011432:	4293      	cmp	r3, r2
 8011434:	d027      	beq.n	8011486 <HAL_DMA_IRQHandler+0x656>
 8011436:	4a9b      	ldr	r2, [pc, #620]	; (80116a4 <HAL_DMA_IRQHandler+0x874>)
 8011438:	4293      	cmp	r3, r2
 801143a:	d028      	beq.n	801148e <HAL_DMA_IRQHandler+0x65e>
 801143c:	4a9a      	ldr	r2, [pc, #616]	; (80116a8 <HAL_DMA_IRQHandler+0x878>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d027      	beq.n	8011492 <HAL_DMA_IRQHandler+0x662>
 8011442:	4a9a      	ldr	r2, [pc, #616]	; (80116ac <HAL_DMA_IRQHandler+0x87c>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d027      	beq.n	8011498 <HAL_DMA_IRQHandler+0x668>
 8011448:	4a99      	ldr	r2, [pc, #612]	; (80116b0 <HAL_DMA_IRQHandler+0x880>)
 801144a:	4293      	cmp	r3, r2
 801144c:	d027      	beq.n	801149e <HAL_DMA_IRQHandler+0x66e>
 801144e:	4a99      	ldr	r2, [pc, #612]	; (80116b4 <HAL_DMA_IRQHandler+0x884>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d027      	beq.n	80114a4 <HAL_DMA_IRQHandler+0x674>
 8011454:	4a98      	ldr	r2, [pc, #608]	; (80116b8 <HAL_DMA_IRQHandler+0x888>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d027      	beq.n	80114aa <HAL_DMA_IRQHandler+0x67a>
 801145a:	4a98      	ldr	r2, [pc, #608]	; (80116bc <HAL_DMA_IRQHandler+0x88c>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d027      	beq.n	80114b0 <HAL_DMA_IRQHandler+0x680>
 8011460:	4a97      	ldr	r2, [pc, #604]	; (80116c0 <HAL_DMA_IRQHandler+0x890>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d026      	beq.n	80114b4 <HAL_DMA_IRQHandler+0x684>
 8011466:	4a97      	ldr	r2, [pc, #604]	; (80116c4 <HAL_DMA_IRQHandler+0x894>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d025      	beq.n	80114b8 <HAL_DMA_IRQHandler+0x688>
 801146c:	4a96      	ldr	r2, [pc, #600]	; (80116c8 <HAL_DMA_IRQHandler+0x898>)
 801146e:	4694      	mov	ip, r2
 8011470:	4463      	add	r3, ip
 8011472:	425a      	negs	r2, r3
 8011474:	4153      	adcs	r3, r2
 8011476:	425b      	negs	r3, r3
 8011478:	4a94      	ldr	r2, [pc, #592]	; (80116cc <HAL_DMA_IRQHandler+0x89c>)
 801147a:	4013      	ands	r3, r2
 801147c:	2280      	movs	r2, #128	; 0x80
 801147e:	02d2      	lsls	r2, r2, #11
 8011480:	4694      	mov	ip, r2
 8011482:	4463      	add	r3, ip
 8011484:	e000      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 8011486:	2304      	movs	r3, #4
 8011488:	4a91      	ldr	r2, [pc, #580]	; (80116d0 <HAL_DMA_IRQHandler+0x8a0>)
 801148a:	6053      	str	r3, [r2, #4]
 801148c:	e754      	b.n	8011338 <HAL_DMA_IRQHandler+0x508>
 801148e:	2340      	movs	r3, #64	; 0x40
 8011490:	e7fa      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 8011492:	2380      	movs	r3, #128	; 0x80
 8011494:	00db      	lsls	r3, r3, #3
 8011496:	e7f7      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 8011498:	2380      	movs	r3, #128	; 0x80
 801149a:	01db      	lsls	r3, r3, #7
 801149c:	e7f4      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 801149e:	2380      	movs	r3, #128	; 0x80
 80114a0:	02db      	lsls	r3, r3, #11
 80114a2:	e7f1      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 80114a4:	2380      	movs	r3, #128	; 0x80
 80114a6:	03db      	lsls	r3, r3, #15
 80114a8:	e7ee      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 80114aa:	2380      	movs	r3, #128	; 0x80
 80114ac:	04db      	lsls	r3, r3, #19
 80114ae:	e7eb      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 80114b0:	2304      	movs	r3, #4
 80114b2:	e7e9      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 80114b4:	2340      	movs	r3, #64	; 0x40
 80114b6:	e7e7      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
 80114b8:	2380      	movs	r3, #128	; 0x80
 80114ba:	00db      	lsls	r3, r3, #3
 80114bc:	e7e4      	b.n	8011488 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80114be:	2302      	movs	r3, #2
 80114c0:	4003      	ands	r3, r0
 80114c2:	1e5a      	subs	r2, r3, #1
 80114c4:	4193      	sbcs	r3, r2
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d100      	bne.n	80114ce <HAL_DMA_IRQHandler+0x69e>
 80114cc:	e080      	b.n	80115d0 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80114ce:	680b      	ldr	r3, [r1, #0]
 80114d0:	079b      	lsls	r3, r3, #30
 80114d2:	d57d      	bpl.n	80115d0 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80114d4:	680b      	ldr	r3, [r1, #0]
 80114d6:	069b      	lsls	r3, r3, #26
 80114d8:	d403      	bmi.n	80114e2 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80114da:	680b      	ldr	r3, [r1, #0]
 80114dc:	2202      	movs	r2, #2
 80114de:	4393      	bics	r3, r2
 80114e0:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80114e2:	6823      	ldr	r3, [r4, #0]
 80114e4:	4a74      	ldr	r2, [pc, #464]	; (80116b8 <HAL_DMA_IRQHandler+0x888>)
 80114e6:	4293      	cmp	r3, r2
 80114e8:	d800      	bhi.n	80114ec <HAL_DMA_IRQHandler+0x6bc>
 80114ea:	e08a      	b.n	8011602 <HAL_DMA_IRQHandler+0x7d2>
 80114ec:	4a6c      	ldr	r2, [pc, #432]	; (80116a0 <HAL_DMA_IRQHandler+0x870>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d05e      	beq.n	80115b0 <HAL_DMA_IRQHandler+0x780>
 80114f2:	4a6c      	ldr	r2, [pc, #432]	; (80116a4 <HAL_DMA_IRQHandler+0x874>)
 80114f4:	4293      	cmp	r3, r2
 80114f6:	d100      	bne.n	80114fa <HAL_DMA_IRQHandler+0x6ca>
 80114f8:	e06b      	b.n	80115d2 <HAL_DMA_IRQHandler+0x7a2>
 80114fa:	4a6b      	ldr	r2, [pc, #428]	; (80116a8 <HAL_DMA_IRQHandler+0x878>)
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d06a      	beq.n	80115d6 <HAL_DMA_IRQHandler+0x7a6>
 8011500:	4a6a      	ldr	r2, [pc, #424]	; (80116ac <HAL_DMA_IRQHandler+0x87c>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d06a      	beq.n	80115dc <HAL_DMA_IRQHandler+0x7ac>
 8011506:	4a6a      	ldr	r2, [pc, #424]	; (80116b0 <HAL_DMA_IRQHandler+0x880>)
 8011508:	4293      	cmp	r3, r2
 801150a:	d06a      	beq.n	80115e2 <HAL_DMA_IRQHandler+0x7b2>
 801150c:	4a69      	ldr	r2, [pc, #420]	; (80116b4 <HAL_DMA_IRQHandler+0x884>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d06a      	beq.n	80115e8 <HAL_DMA_IRQHandler+0x7b8>
 8011512:	4a69      	ldr	r2, [pc, #420]	; (80116b8 <HAL_DMA_IRQHandler+0x888>)
 8011514:	4293      	cmp	r3, r2
 8011516:	d06a      	beq.n	80115ee <HAL_DMA_IRQHandler+0x7be>
 8011518:	4a68      	ldr	r2, [pc, #416]	; (80116bc <HAL_DMA_IRQHandler+0x88c>)
 801151a:	4293      	cmp	r3, r2
 801151c:	d06a      	beq.n	80115f4 <HAL_DMA_IRQHandler+0x7c4>
 801151e:	4a68      	ldr	r2, [pc, #416]	; (80116c0 <HAL_DMA_IRQHandler+0x890>)
 8011520:	4293      	cmp	r3, r2
 8011522:	d069      	beq.n	80115f8 <HAL_DMA_IRQHandler+0x7c8>
 8011524:	4a67      	ldr	r2, [pc, #412]	; (80116c4 <HAL_DMA_IRQHandler+0x894>)
 8011526:	4293      	cmp	r3, r2
 8011528:	d068      	beq.n	80115fc <HAL_DMA_IRQHandler+0x7cc>
 801152a:	4a67      	ldr	r2, [pc, #412]	; (80116c8 <HAL_DMA_IRQHandler+0x898>)
 801152c:	4694      	mov	ip, r2
 801152e:	4463      	add	r3, ip
 8011530:	425a      	negs	r2, r3
 8011532:	4153      	adcs	r3, r2
 8011534:	425b      	negs	r3, r3
 8011536:	4a67      	ldr	r2, [pc, #412]	; (80116d4 <HAL_DMA_IRQHandler+0x8a4>)
 8011538:	4013      	ands	r3, r2
 801153a:	2280      	movs	r2, #128	; 0x80
 801153c:	0292      	lsls	r2, r2, #10
 801153e:	4694      	mov	ip, r2
 8011540:	4463      	add	r3, ip
 8011542:	e036      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011544:	2320      	movs	r3, #32
 8011546:	e7bb      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 8011548:	2380      	movs	r3, #128	; 0x80
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	e7b8      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 801154e:	2380      	movs	r3, #128	; 0x80
 8011550:	019b      	lsls	r3, r3, #6
 8011552:	e7b5      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 8011554:	2380      	movs	r3, #128	; 0x80
 8011556:	029b      	lsls	r3, r3, #10
 8011558:	e7b2      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 801155a:	2380      	movs	r3, #128	; 0x80
 801155c:	039b      	lsls	r3, r3, #14
 801155e:	e7af      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 8011560:	2380      	movs	r3, #128	; 0x80
 8011562:	049b      	lsls	r3, r3, #18
 8011564:	e7ac      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 8011566:	2302      	movs	r3, #2
 8011568:	e7aa      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 801156a:	2320      	movs	r3, #32
 801156c:	e7a8      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 801156e:	2380      	movs	r3, #128	; 0x80
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	e7a5      	b.n	80114c0 <HAL_DMA_IRQHandler+0x690>
 8011574:	2302      	movs	r3, #2
 8011576:	4003      	ands	r3, r0
 8011578:	1e5a      	subs	r2, r3, #1
 801157a:	4193      	sbcs	r3, r2
 801157c:	b2db      	uxtb	r3, r3
 801157e:	e7a3      	b.n	80114c8 <HAL_DMA_IRQHandler+0x698>
 8011580:	2320      	movs	r3, #32
 8011582:	e7f8      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 8011584:	2380      	movs	r3, #128	; 0x80
 8011586:	009b      	lsls	r3, r3, #2
 8011588:	e7f5      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 801158a:	2380      	movs	r3, #128	; 0x80
 801158c:	019b      	lsls	r3, r3, #6
 801158e:	e7f2      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 8011590:	2380      	movs	r3, #128	; 0x80
 8011592:	029b      	lsls	r3, r3, #10
 8011594:	e7ef      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 8011596:	2380      	movs	r3, #128	; 0x80
 8011598:	039b      	lsls	r3, r3, #14
 801159a:	e7ec      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 801159c:	2380      	movs	r3, #128	; 0x80
 801159e:	049b      	lsls	r3, r3, #18
 80115a0:	e7e9      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 80115a2:	2302      	movs	r3, #2
 80115a4:	e7e7      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 80115a6:	2320      	movs	r3, #32
 80115a8:	e7e5      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
 80115aa:	2380      	movs	r3, #128	; 0x80
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	e7e2      	b.n	8011576 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80115b0:	2302      	movs	r3, #2
 80115b2:	4a49      	ldr	r2, [pc, #292]	; (80116d8 <HAL_DMA_IRQHandler+0x8a8>)
 80115b4:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 80115b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115b8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 80115ba:	2321      	movs	r3, #33	; 0x21
 80115bc:	2201      	movs	r2, #1
 80115be:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80115c0:	3b01      	subs	r3, #1
 80115c2:	2200      	movs	r2, #0
 80115c4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80115c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 80115cc:	0020      	movs	r0, r4
 80115ce:	4798      	blx	r3
}  
 80115d0:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80115d2:	2320      	movs	r3, #32
 80115d4:	e7ed      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115d6:	2380      	movs	r3, #128	; 0x80
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	e7ea      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115dc:	2380      	movs	r3, #128	; 0x80
 80115de:	019b      	lsls	r3, r3, #6
 80115e0:	e7e7      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115e2:	2380      	movs	r3, #128	; 0x80
 80115e4:	029b      	lsls	r3, r3, #10
 80115e6:	e7e4      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115e8:	2380      	movs	r3, #128	; 0x80
 80115ea:	039b      	lsls	r3, r3, #14
 80115ec:	e7e1      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115ee:	2380      	movs	r3, #128	; 0x80
 80115f0:	049b      	lsls	r3, r3, #18
 80115f2:	e7de      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115f4:	2302      	movs	r3, #2
 80115f6:	e7dc      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115f8:	2320      	movs	r3, #32
 80115fa:	e7da      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 80115fc:	2380      	movs	r3, #128	; 0x80
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	e7d7      	b.n	80115b2 <HAL_DMA_IRQHandler+0x782>
 8011602:	4a27      	ldr	r2, [pc, #156]	; (80116a0 <HAL_DMA_IRQHandler+0x870>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d027      	beq.n	8011658 <HAL_DMA_IRQHandler+0x828>
 8011608:	4a26      	ldr	r2, [pc, #152]	; (80116a4 <HAL_DMA_IRQHandler+0x874>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d028      	beq.n	8011660 <HAL_DMA_IRQHandler+0x830>
 801160e:	4a26      	ldr	r2, [pc, #152]	; (80116a8 <HAL_DMA_IRQHandler+0x878>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d027      	beq.n	8011664 <HAL_DMA_IRQHandler+0x834>
 8011614:	4a25      	ldr	r2, [pc, #148]	; (80116ac <HAL_DMA_IRQHandler+0x87c>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d027      	beq.n	801166a <HAL_DMA_IRQHandler+0x83a>
 801161a:	4a25      	ldr	r2, [pc, #148]	; (80116b0 <HAL_DMA_IRQHandler+0x880>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d027      	beq.n	8011670 <HAL_DMA_IRQHandler+0x840>
 8011620:	4a24      	ldr	r2, [pc, #144]	; (80116b4 <HAL_DMA_IRQHandler+0x884>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d027      	beq.n	8011676 <HAL_DMA_IRQHandler+0x846>
 8011626:	4a24      	ldr	r2, [pc, #144]	; (80116b8 <HAL_DMA_IRQHandler+0x888>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d027      	beq.n	801167c <HAL_DMA_IRQHandler+0x84c>
 801162c:	4a23      	ldr	r2, [pc, #140]	; (80116bc <HAL_DMA_IRQHandler+0x88c>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d027      	beq.n	8011682 <HAL_DMA_IRQHandler+0x852>
 8011632:	4a23      	ldr	r2, [pc, #140]	; (80116c0 <HAL_DMA_IRQHandler+0x890>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d026      	beq.n	8011686 <HAL_DMA_IRQHandler+0x856>
 8011638:	4a22      	ldr	r2, [pc, #136]	; (80116c4 <HAL_DMA_IRQHandler+0x894>)
 801163a:	4293      	cmp	r3, r2
 801163c:	d025      	beq.n	801168a <HAL_DMA_IRQHandler+0x85a>
 801163e:	4a22      	ldr	r2, [pc, #136]	; (80116c8 <HAL_DMA_IRQHandler+0x898>)
 8011640:	4694      	mov	ip, r2
 8011642:	4463      	add	r3, ip
 8011644:	425a      	negs	r2, r3
 8011646:	4153      	adcs	r3, r2
 8011648:	425b      	negs	r3, r3
 801164a:	4a22      	ldr	r2, [pc, #136]	; (80116d4 <HAL_DMA_IRQHandler+0x8a4>)
 801164c:	4013      	ands	r3, r2
 801164e:	2280      	movs	r2, #128	; 0x80
 8011650:	0292      	lsls	r2, r2, #10
 8011652:	4694      	mov	ip, r2
 8011654:	4463      	add	r3, ip
 8011656:	e000      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 8011658:	2302      	movs	r3, #2
 801165a:	4a1d      	ldr	r2, [pc, #116]	; (80116d0 <HAL_DMA_IRQHandler+0x8a0>)
 801165c:	6053      	str	r3, [r2, #4]
 801165e:	e7aa      	b.n	80115b6 <HAL_DMA_IRQHandler+0x786>
 8011660:	2320      	movs	r3, #32
 8011662:	e7fa      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 8011664:	2380      	movs	r3, #128	; 0x80
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	e7f7      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 801166a:	2380      	movs	r3, #128	; 0x80
 801166c:	019b      	lsls	r3, r3, #6
 801166e:	e7f4      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 8011670:	2380      	movs	r3, #128	; 0x80
 8011672:	029b      	lsls	r3, r3, #10
 8011674:	e7f1      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 8011676:	2380      	movs	r3, #128	; 0x80
 8011678:	039b      	lsls	r3, r3, #14
 801167a:	e7ee      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 801167c:	2380      	movs	r3, #128	; 0x80
 801167e:	049b      	lsls	r3, r3, #18
 8011680:	e7eb      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 8011682:	2302      	movs	r3, #2
 8011684:	e7e9      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 8011686:	2320      	movs	r3, #32
 8011688:	e7e7      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
 801168a:	2380      	movs	r3, #128	; 0x80
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	e7e4      	b.n	801165a <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011690:	6821      	ldr	r1, [r4, #0]
 8011692:	e65e      	b.n	8011352 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	0712      	lsls	r2, r2, #28
 8011698:	d500      	bpl.n	801169c <HAL_DMA_IRQHandler+0x86c>
 801169a:	e49b      	b.n	8010fd4 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801169c:	6823      	ldr	r3, [r4, #0]
 801169e:	e44b      	b.n	8010f38 <HAL_DMA_IRQHandler+0x108>
 80116a0:	40020008 	.word	0x40020008
 80116a4:	4002001c 	.word	0x4002001c
 80116a8:	40020030 	.word	0x40020030
 80116ac:	40020044 	.word	0x40020044
 80116b0:	40020058 	.word	0x40020058
 80116b4:	4002006c 	.word	0x4002006c
 80116b8:	40020080 	.word	0x40020080
 80116bc:	40020408 	.word	0x40020408
 80116c0:	4002041c 	.word	0x4002041c
 80116c4:	40020430 	.word	0x40020430
 80116c8:	bffdfbbc 	.word	0xbffdfbbc
 80116cc:	fffc4000 	.word	0xfffc4000
 80116d0:	40020000 	.word	0x40020000
 80116d4:	fffe2000 	.word	0xfffe2000
 80116d8:	40020400 	.word	0x40020400

080116dc <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80116dc:	4b0a      	ldr	r3, [pc, #40]	; (8011708 <FLASH_SetErrorCode+0x2c>)
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	06db      	lsls	r3, r3, #27
 80116e2:	d504      	bpl.n	80116ee <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80116e4:	4a09      	ldr	r2, [pc, #36]	; (801170c <FLASH_SetErrorCode+0x30>)
 80116e6:	69d3      	ldr	r3, [r2, #28]
 80116e8:	2102      	movs	r1, #2
 80116ea:	430b      	orrs	r3, r1
 80116ec:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80116ee:	4b06      	ldr	r3, [pc, #24]	; (8011708 <FLASH_SetErrorCode+0x2c>)
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	075b      	lsls	r3, r3, #29
 80116f4:	d504      	bpl.n	8011700 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80116f6:	4a05      	ldr	r2, [pc, #20]	; (801170c <FLASH_SetErrorCode+0x30>)
 80116f8:	69d3      	ldr	r3, [r2, #28]
 80116fa:	2101      	movs	r1, #1
 80116fc:	430b      	orrs	r3, r1
 80116fe:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011700:	4b01      	ldr	r3, [pc, #4]	; (8011708 <FLASH_SetErrorCode+0x2c>)
 8011702:	2214      	movs	r2, #20
 8011704:	60da      	str	r2, [r3, #12]
}  
 8011706:	4770      	bx	lr
 8011708:	40022000 	.word	0x40022000
 801170c:	200067b0 	.word	0x200067b0

08011710 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011710:	4b05      	ldr	r3, [pc, #20]	; (8011728 <HAL_FLASH_Unlock+0x18>)
 8011712:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011714:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011716:	061b      	lsls	r3, r3, #24
 8011718:	d505      	bpl.n	8011726 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801171a:	4b03      	ldr	r3, [pc, #12]	; (8011728 <HAL_FLASH_Unlock+0x18>)
 801171c:	4a03      	ldr	r2, [pc, #12]	; (801172c <HAL_FLASH_Unlock+0x1c>)
 801171e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011720:	4a03      	ldr	r2, [pc, #12]	; (8011730 <HAL_FLASH_Unlock+0x20>)
 8011722:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011724:	2000      	movs	r0, #0
}
 8011726:	4770      	bx	lr
 8011728:	40022000 	.word	0x40022000
 801172c:	45670123 	.word	0x45670123
 8011730:	cdef89ab 	.word	0xcdef89ab

08011734 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011734:	4a03      	ldr	r2, [pc, #12]	; (8011744 <HAL_FLASH_Lock+0x10>)
 8011736:	6913      	ldr	r3, [r2, #16]
 8011738:	2180      	movs	r1, #128	; 0x80
 801173a:	430b      	orrs	r3, r1
 801173c:	6113      	str	r3, [r2, #16]
}
 801173e:	2000      	movs	r0, #0
 8011740:	4770      	bx	lr
 8011742:	46c0      	nop			; (mov r8, r8)
 8011744:	40022000 	.word	0x40022000

08011748 <FLASH_WaitForLastOperation>:
{
 8011748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 801174c:	f7fe fe22 	bl	8010394 <HAL_GetTick>
 8011750:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011752:	4e13      	ldr	r6, [pc, #76]	; (80117a0 <FLASH_WaitForLastOperation+0x58>)
 8011754:	2501      	movs	r5, #1
 8011756:	68f3      	ldr	r3, [r6, #12]
 8011758:	421d      	tst	r5, r3
 801175a:	d00a      	beq.n	8011772 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 801175c:	1c63      	adds	r3, r4, #1
 801175e:	d0fa      	beq.n	8011756 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011760:	2c00      	cmp	r4, #0
 8011762:	d01a      	beq.n	801179a <FLASH_WaitForLastOperation+0x52>
 8011764:	f7fe fe16 	bl	8010394 <HAL_GetTick>
 8011768:	1bc0      	subs	r0, r0, r7
 801176a:	42a0      	cmp	r0, r4
 801176c:	d9f3      	bls.n	8011756 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 801176e:	2003      	movs	r0, #3
 8011770:	e012      	b.n	8011798 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011772:	4b0b      	ldr	r3, [pc, #44]	; (80117a0 <FLASH_WaitForLastOperation+0x58>)
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	069b      	lsls	r3, r3, #26
 8011778:	d502      	bpl.n	8011780 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801177a:	4b09      	ldr	r3, [pc, #36]	; (80117a0 <FLASH_WaitForLastOperation+0x58>)
 801177c:	2220      	movs	r2, #32
 801177e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011780:	4b07      	ldr	r3, [pc, #28]	; (80117a0 <FLASH_WaitForLastOperation+0x58>)
 8011782:	68db      	ldr	r3, [r3, #12]
 8011784:	06db      	lsls	r3, r3, #27
 8011786:	d404      	bmi.n	8011792 <FLASH_WaitForLastOperation+0x4a>
 8011788:	4b05      	ldr	r3, [pc, #20]	; (80117a0 <FLASH_WaitForLastOperation+0x58>)
 801178a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 801178c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801178e:	075b      	lsls	r3, r3, #29
 8011790:	d502      	bpl.n	8011798 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011792:	f7ff ffa3 	bl	80116dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011796:	2001      	movs	r0, #1
}
 8011798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 801179a:	2003      	movs	r0, #3
 801179c:	e7fc      	b.n	8011798 <FLASH_WaitForLastOperation+0x50>
 801179e:	46c0      	nop			; (mov r8, r8)
 80117a0:	40022000 	.word	0x40022000

080117a4 <HAL_FLASH_Program>:
{
 80117a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117a6:	46de      	mov	lr, fp
 80117a8:	4657      	mov	r7, sl
 80117aa:	464e      	mov	r6, r9
 80117ac:	4645      	mov	r5, r8
 80117ae:	b5e0      	push	{r5, r6, r7, lr}
 80117b0:	b083      	sub	sp, #12
 80117b2:	0004      	movs	r4, r0
 80117b4:	000e      	movs	r6, r1
 80117b6:	9201      	str	r2, [sp, #4]
 80117b8:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80117ba:	4b2a      	ldr	r3, [pc, #168]	; (8011864 <HAL_FLASH_Program+0xc0>)
 80117bc:	7e1b      	ldrb	r3, [r3, #24]
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d04b      	beq.n	801185a <HAL_FLASH_Program+0xb6>
 80117c2:	4b28      	ldr	r3, [pc, #160]	; (8011864 <HAL_FLASH_Program+0xc0>)
 80117c4:	2201      	movs	r2, #1
 80117c6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80117c8:	4827      	ldr	r0, [pc, #156]	; (8011868 <HAL_FLASH_Program+0xc4>)
 80117ca:	f7ff ffbd 	bl	8011748 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d139      	bne.n	8011846 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80117d2:	2c01      	cmp	r4, #1
 80117d4:	d043      	beq.n	801185e <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 80117d6:	3c02      	subs	r4, #2
 80117d8:	4263      	negs	r3, r4
 80117da:	415c      	adcs	r4, r3
 80117dc:	4264      	negs	r4, r4
 80117de:	2301      	movs	r3, #1
 80117e0:	439c      	bics	r4, r3
 80117e2:	46a0      	mov	r8, r4
 80117e4:	3303      	adds	r3, #3
 80117e6:	469c      	mov	ip, r3
 80117e8:	44e0      	add	r8, ip
{
 80117ea:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80117ec:	4b1d      	ldr	r3, [pc, #116]	; (8011864 <HAL_FLASH_Program+0xc0>)
 80117ee:	469b      	mov	fp, r3
 80117f0:	2300      	movs	r3, #0
 80117f2:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80117f4:	4c1d      	ldr	r4, [pc, #116]	; (801186c <HAL_FLASH_Program+0xc8>)
 80117f6:	e01e      	b.n	8011836 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80117f8:	2220      	movs	r2, #32
 80117fa:	1ad2      	subs	r2, r2, r3
 80117fc:	4649      	mov	r1, r9
 80117fe:	4091      	lsls	r1, r2
 8011800:	000a      	movs	r2, r1
 8011802:	9901      	ldr	r1, [sp, #4]
 8011804:	40d9      	lsrs	r1, r3
 8011806:	000b      	movs	r3, r1
 8011808:	4313      	orrs	r3, r2
 801180a:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801180c:	465a      	mov	r2, fp
 801180e:	4651      	mov	r1, sl
 8011810:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011812:	6922      	ldr	r2, [r4, #16]
 8011814:	2701      	movs	r7, #1
 8011816:	433a      	orrs	r2, r7
 8011818:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 801181a:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801181c:	4812      	ldr	r0, [pc, #72]	; (8011868 <HAL_FLASH_Program+0xc4>)
 801181e:	f7ff ff93 	bl	8011748 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	43bb      	bics	r3, r7
 8011826:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011828:	2800      	cmp	r0, #0
 801182a:	d10c      	bne.n	8011846 <HAL_FLASH_Program+0xa2>
 801182c:	3501      	adds	r5, #1
 801182e:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8011830:	b2eb      	uxtb	r3, r5
 8011832:	4598      	cmp	r8, r3
 8011834:	d907      	bls.n	8011846 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011836:	012b      	lsls	r3, r5, #4
 8011838:	2220      	movs	r2, #32
 801183a:	4252      	negs	r2, r2
 801183c:	189a      	adds	r2, r3, r2
 801183e:	d4db      	bmi.n	80117f8 <HAL_FLASH_Program+0x54>
 8011840:	464b      	mov	r3, r9
 8011842:	40d3      	lsrs	r3, r2
 8011844:	e7e1      	b.n	801180a <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011846:	4b07      	ldr	r3, [pc, #28]	; (8011864 <HAL_FLASH_Program+0xc0>)
 8011848:	2200      	movs	r2, #0
 801184a:	761a      	strb	r2, [r3, #24]
}
 801184c:	b003      	add	sp, #12
 801184e:	bc3c      	pop	{r2, r3, r4, r5}
 8011850:	4690      	mov	r8, r2
 8011852:	4699      	mov	r9, r3
 8011854:	46a2      	mov	sl, r4
 8011856:	46ab      	mov	fp, r5
 8011858:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 801185a:	2002      	movs	r0, #2
 801185c:	e7f6      	b.n	801184c <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 801185e:	2301      	movs	r3, #1
 8011860:	4698      	mov	r8, r3
 8011862:	e7c2      	b.n	80117ea <HAL_FLASH_Program+0x46>
 8011864:	200067b0 	.word	0x200067b0
 8011868:	0000c350 	.word	0x0000c350
 801186c:	40022000 	.word	0x40022000

08011870 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011870:	4b06      	ldr	r3, [pc, #24]	; (801188c <FLASH_MassErase+0x1c>)
 8011872:	2200      	movs	r2, #0
 8011874:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011876:	4b06      	ldr	r3, [pc, #24]	; (8011890 <FLASH_MassErase+0x20>)
 8011878:	691a      	ldr	r2, [r3, #16]
 801187a:	2104      	movs	r1, #4
 801187c:	430a      	orrs	r2, r1
 801187e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011880:	691a      	ldr	r2, [r3, #16]
 8011882:	313c      	adds	r1, #60	; 0x3c
 8011884:	430a      	orrs	r2, r1
 8011886:	611a      	str	r2, [r3, #16]
}
 8011888:	4770      	bx	lr
 801188a:	46c0      	nop			; (mov r8, r8)
 801188c:	200067b0 	.word	0x200067b0
 8011890:	40022000 	.word	0x40022000

08011894 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011894:	4b06      	ldr	r3, [pc, #24]	; (80118b0 <FLASH_PageErase+0x1c>)
 8011896:	2200      	movs	r2, #0
 8011898:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801189a:	4b06      	ldr	r3, [pc, #24]	; (80118b4 <FLASH_PageErase+0x20>)
 801189c:	691a      	ldr	r2, [r3, #16]
 801189e:	2102      	movs	r1, #2
 80118a0:	430a      	orrs	r2, r1
 80118a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80118a4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80118a6:	691a      	ldr	r2, [r3, #16]
 80118a8:	313e      	adds	r1, #62	; 0x3e
 80118aa:	430a      	orrs	r2, r1
 80118ac:	611a      	str	r2, [r3, #16]
}
 80118ae:	4770      	bx	lr
 80118b0:	200067b0 	.word	0x200067b0
 80118b4:	40022000 	.word	0x40022000

080118b8 <HAL_FLASHEx_Erase>:
{
 80118b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ba:	46c6      	mov	lr, r8
 80118bc:	b500      	push	{lr}
 80118be:	0006      	movs	r6, r0
 80118c0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80118c2:	4b2a      	ldr	r3, [pc, #168]	; (801196c <HAL_FLASHEx_Erase+0xb4>)
 80118c4:	7e1b      	ldrb	r3, [r3, #24]
 80118c6:	2b01      	cmp	r3, #1
 80118c8:	d04d      	beq.n	8011966 <HAL_FLASHEx_Erase+0xae>
 80118ca:	4b28      	ldr	r3, [pc, #160]	; (801196c <HAL_FLASHEx_Erase+0xb4>)
 80118cc:	2201      	movs	r2, #1
 80118ce:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80118d0:	6803      	ldr	r3, [r0, #0]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d029      	beq.n	801192a <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80118d6:	4826      	ldr	r0, [pc, #152]	; (8011970 <HAL_FLASHEx_Erase+0xb8>)
 80118d8:	f7ff ff36 	bl	8011748 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80118dc:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80118de:	2800      	cmp	r0, #0
 80118e0:	d129      	bne.n	8011936 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 80118e2:	2301      	movs	r3, #1
 80118e4:	425b      	negs	r3, r3
 80118e6:	4642      	mov	r2, r8
 80118e8:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80118ea:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80118ec:	68b3      	ldr	r3, [r6, #8]
 80118ee:	02db      	lsls	r3, r3, #11
 80118f0:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80118f2:	429c      	cmp	r4, r3
 80118f4:	d235      	bcs.n	8011962 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80118f6:	4f1f      	ldr	r7, [pc, #124]	; (8011974 <HAL_FLASHEx_Erase+0xbc>)
 80118f8:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80118fa:	0020      	movs	r0, r4
 80118fc:	f7ff ffca 	bl	8011894 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011900:	481b      	ldr	r0, [pc, #108]	; (8011970 <HAL_FLASHEx_Erase+0xb8>)
 8011902:	f7ff ff21 	bl	8011748 <FLASH_WaitForLastOperation>
 8011906:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	43ab      	bics	r3, r5
 801190c:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 801190e:	2800      	cmp	r0, #0
 8011910:	d124      	bne.n	801195c <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8011912:	2380      	movs	r3, #128	; 0x80
 8011914:	011b      	lsls	r3, r3, #4
 8011916:	469c      	mov	ip, r3
 8011918:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 801191a:	68b3      	ldr	r3, [r6, #8]
 801191c:	02db      	lsls	r3, r3, #11
 801191e:	6871      	ldr	r1, [r6, #4]
 8011920:	468c      	mov	ip, r1
 8011922:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011924:	42a3      	cmp	r3, r4
 8011926:	d8e8      	bhi.n	80118fa <HAL_FLASHEx_Erase+0x42>
 8011928:	e005      	b.n	8011936 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801192a:	4811      	ldr	r0, [pc, #68]	; (8011970 <HAL_FLASHEx_Erase+0xb8>)
 801192c:	f7ff ff0c 	bl	8011748 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011930:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011932:	2800      	cmp	r0, #0
 8011934:	d006      	beq.n	8011944 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8011936:	4b0d      	ldr	r3, [pc, #52]	; (801196c <HAL_FLASHEx_Erase+0xb4>)
 8011938:	2100      	movs	r1, #0
 801193a:	7619      	strb	r1, [r3, #24]
}
 801193c:	0010      	movs	r0, r2
 801193e:	bc04      	pop	{r2}
 8011940:	4690      	mov	r8, r2
 8011942:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011944:	f7ff ff94 	bl	8011870 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011948:	4809      	ldr	r0, [pc, #36]	; (8011970 <HAL_FLASHEx_Erase+0xb8>)
 801194a:	f7ff fefd 	bl	8011748 <FLASH_WaitForLastOperation>
 801194e:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011950:	4908      	ldr	r1, [pc, #32]	; (8011974 <HAL_FLASHEx_Erase+0xbc>)
 8011952:	690b      	ldr	r3, [r1, #16]
 8011954:	2004      	movs	r0, #4
 8011956:	4383      	bics	r3, r0
 8011958:	610b      	str	r3, [r1, #16]
 801195a:	e7ec      	b.n	8011936 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 801195c:	4643      	mov	r3, r8
 801195e:	601c      	str	r4, [r3, #0]
            break;
 8011960:	e7e9      	b.n	8011936 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011962:	2201      	movs	r2, #1
 8011964:	e7e7      	b.n	8011936 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8011966:	2202      	movs	r2, #2
 8011968:	e7e8      	b.n	801193c <HAL_FLASHEx_Erase+0x84>
 801196a:	46c0      	nop			; (mov r8, r8)
 801196c:	200067b0 	.word	0x200067b0
 8011970:	0000c350 	.word	0x0000c350
 8011974:	40022000 	.word	0x40022000

08011978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801197a:	46de      	mov	lr, fp
 801197c:	4657      	mov	r7, sl
 801197e:	464e      	mov	r6, r9
 8011980:	4645      	mov	r5, r8
 8011982:	b5e0      	push	{r5, r6, r7, lr}
 8011984:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011986:	680a      	ldr	r2, [r1, #0]
 8011988:	2a00      	cmp	r2, #0
 801198a:	d100      	bne.n	801198e <HAL_GPIO_Init+0x16>
 801198c:	e0bf      	b.n	8011b0e <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 801198e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011990:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011992:	2410      	movs	r4, #16
 8011994:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011996:	3c0d      	subs	r4, #13
 8011998:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801199a:	2480      	movs	r4, #128	; 0x80
 801199c:	0564      	lsls	r4, r4, #21
 801199e:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80119a0:	4c5e      	ldr	r4, [pc, #376]	; (8011b1c <HAL_GPIO_Init+0x1a4>)
 80119a2:	1904      	adds	r4, r0, r4
 80119a4:	1e65      	subs	r5, r4, #1
 80119a6:	41ac      	sbcs	r4, r5
 80119a8:	3404      	adds	r4, #4
 80119aa:	46a1      	mov	r9, r4
 80119ac:	e03b      	b.n	8011a26 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 80119ae:	08dc      	lsrs	r4, r3, #3
 80119b0:	00a4      	lsls	r4, r4, #2
 80119b2:	1904      	adds	r4, r0, r4
 80119b4:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80119b6:	2507      	movs	r5, #7
 80119b8:	401d      	ands	r5, r3
 80119ba:	00ad      	lsls	r5, r5, #2
 80119bc:	220f      	movs	r2, #15
 80119be:	40aa      	lsls	r2, r5
 80119c0:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80119c2:	690a      	ldr	r2, [r1, #16]
 80119c4:	40aa      	lsls	r2, r5
 80119c6:	0015      	movs	r5, r2
 80119c8:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 80119ca:	6225      	str	r5, [r4, #32]
 80119cc:	e035      	b.n	8011a3a <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80119ce:	2500      	movs	r5, #0
 80119d0:	465a      	mov	r2, fp
 80119d2:	4095      	lsls	r5, r2
 80119d4:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80119d6:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80119d8:	4c51      	ldr	r4, [pc, #324]	; (8011b20 <HAL_GPIO_Init+0x1a8>)
 80119da:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80119dc:	9a01      	ldr	r2, [sp, #4]
 80119de:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80119e0:	684a      	ldr	r2, [r1, #4]
 80119e2:	03d2      	lsls	r2, r2, #15
 80119e4:	d500      	bpl.n	80119e8 <HAL_GPIO_Init+0x70>
 80119e6:	e086      	b.n	8011af6 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80119e8:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80119ea:	4f4d      	ldr	r7, [pc, #308]	; (8011b20 <HAL_GPIO_Init+0x1a8>)
 80119ec:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 80119ee:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80119f0:	684a      	ldr	r2, [r1, #4]
 80119f2:	0392      	lsls	r2, r2, #14
 80119f4:	d500      	bpl.n	80119f8 <HAL_GPIO_Init+0x80>
 80119f6:	e081      	b.n	8011afc <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80119f8:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80119fa:	4f49      	ldr	r7, [pc, #292]	; (8011b20 <HAL_GPIO_Init+0x1a8>)
 80119fc:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80119fe:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011a00:	684a      	ldr	r2, [r1, #4]
 8011a02:	02d2      	lsls	r2, r2, #11
 8011a04:	d47d      	bmi.n	8011b02 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011a06:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011a08:	4f45      	ldr	r7, [pc, #276]	; (8011b20 <HAL_GPIO_Init+0x1a8>)
 8011a0a:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8011a0c:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011a0e:	684a      	ldr	r2, [r1, #4]
 8011a10:	0292      	lsls	r2, r2, #10
 8011a12:	d479      	bmi.n	8011b08 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011a14:	0022      	movs	r2, r4
 8011a16:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011a18:	4c41      	ldr	r4, [pc, #260]	; (8011b20 <HAL_GPIO_Init+0x1a8>)
 8011a1a:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011a1c:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011a1e:	680a      	ldr	r2, [r1, #0]
 8011a20:	0014      	movs	r4, r2
 8011a22:	40dc      	lsrs	r4, r3
 8011a24:	d073      	beq.n	8011b0e <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011a26:	0034      	movs	r4, r6
 8011a28:	409c      	lsls	r4, r3
 8011a2a:	4022      	ands	r2, r4
 8011a2c:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8011a2e:	d0f5      	beq.n	8011a1c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011a30:	684c      	ldr	r4, [r1, #4]
 8011a32:	4642      	mov	r2, r8
 8011a34:	4394      	bics	r4, r2
 8011a36:	2c02      	cmp	r4, #2
 8011a38:	d0b9      	beq.n	80119ae <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011a3a:	6804      	ldr	r4, [r0, #0]
 8011a3c:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011a3e:	4665      	mov	r5, ip
 8011a40:	40bd      	lsls	r5, r7
 8011a42:	43ed      	mvns	r5, r5
 8011a44:	402c      	ands	r4, r5
 8011a46:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011a48:	684c      	ldr	r4, [r1, #4]
 8011a4a:	4662      	mov	r2, ip
 8011a4c:	4014      	ands	r4, r2
 8011a4e:	40bc      	lsls	r4, r7
 8011a50:	465a      	mov	r2, fp
 8011a52:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011a54:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011a56:	684c      	ldr	r4, [r1, #4]
 8011a58:	4642      	mov	r2, r8
 8011a5a:	4394      	bics	r4, r2
 8011a5c:	3c01      	subs	r4, #1
 8011a5e:	2c01      	cmp	r4, #1
 8011a60:	d813      	bhi.n	8011a8a <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011a62:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011a64:	402c      	ands	r4, r5
 8011a66:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011a68:	68cc      	ldr	r4, [r1, #12]
 8011a6a:	40bc      	lsls	r4, r7
 8011a6c:	465a      	mov	r2, fp
 8011a6e:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011a70:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011a72:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011a74:	0032      	movs	r2, r6
 8011a76:	409a      	lsls	r2, r3
 8011a78:	4394      	bics	r4, r2
 8011a7a:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011a7c:	684a      	ldr	r2, [r1, #4]
 8011a7e:	0914      	lsrs	r4, r2, #4
 8011a80:	4034      	ands	r4, r6
 8011a82:	409c      	lsls	r4, r3
 8011a84:	465a      	mov	r2, fp
 8011a86:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011a88:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011a8a:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011a8c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011a8e:	688d      	ldr	r5, [r1, #8]
 8011a90:	40bd      	lsls	r5, r7
 8011a92:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011a94:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011a96:	684a      	ldr	r2, [r1, #4]
 8011a98:	4654      	mov	r4, sl
 8011a9a:	4222      	tst	r2, r4
 8011a9c:	d0be      	beq.n	8011a1c <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011a9e:	4c21      	ldr	r4, [pc, #132]	; (8011b24 <HAL_GPIO_Init+0x1ac>)
 8011aa0:	69a5      	ldr	r5, [r4, #24]
 8011aa2:	4335      	orrs	r5, r6
 8011aa4:	61a5      	str	r5, [r4, #24]
 8011aa6:	69a4      	ldr	r4, [r4, #24]
 8011aa8:	4034      	ands	r4, r6
 8011aaa:	9403      	str	r4, [sp, #12]
 8011aac:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011aae:	089c      	lsrs	r4, r3, #2
 8011ab0:	00a4      	lsls	r4, r4, #2
 8011ab2:	4a1d      	ldr	r2, [pc, #116]	; (8011b28 <HAL_GPIO_Init+0x1b0>)
 8011ab4:	4693      	mov	fp, r2
 8011ab6:	445c      	add	r4, fp
 8011ab8:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011aba:	4667      	mov	r7, ip
 8011abc:	401f      	ands	r7, r3
 8011abe:	00ba      	lsls	r2, r7, #2
 8011ac0:	4693      	mov	fp, r2
 8011ac2:	270f      	movs	r7, #15
 8011ac4:	4097      	lsls	r7, r2
 8011ac6:	43bd      	bics	r5, r7
 8011ac8:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011aca:	2590      	movs	r5, #144	; 0x90
 8011acc:	05ed      	lsls	r5, r5, #23
 8011ace:	42a8      	cmp	r0, r5
 8011ad0:	d100      	bne.n	8011ad4 <HAL_GPIO_Init+0x15c>
 8011ad2:	e77c      	b.n	80119ce <HAL_GPIO_Init+0x56>
 8011ad4:	4d15      	ldr	r5, [pc, #84]	; (8011b2c <HAL_GPIO_Init+0x1b4>)
 8011ad6:	42a8      	cmp	r0, r5
 8011ad8:	d007      	beq.n	8011aea <HAL_GPIO_Init+0x172>
 8011ada:	4d15      	ldr	r5, [pc, #84]	; (8011b30 <HAL_GPIO_Init+0x1b8>)
 8011adc:	42a8      	cmp	r0, r5
 8011ade:	d006      	beq.n	8011aee <HAL_GPIO_Init+0x176>
 8011ae0:	4d14      	ldr	r5, [pc, #80]	; (8011b34 <HAL_GPIO_Init+0x1bc>)
 8011ae2:	42a8      	cmp	r0, r5
 8011ae4:	d005      	beq.n	8011af2 <HAL_GPIO_Init+0x17a>
 8011ae6:	464d      	mov	r5, r9
 8011ae8:	e772      	b.n	80119d0 <HAL_GPIO_Init+0x58>
 8011aea:	0035      	movs	r5, r6
 8011aec:	e770      	b.n	80119d0 <HAL_GPIO_Init+0x58>
 8011aee:	2502      	movs	r5, #2
 8011af0:	e76e      	b.n	80119d0 <HAL_GPIO_Init+0x58>
 8011af2:	4665      	mov	r5, ip
 8011af4:	e76c      	b.n	80119d0 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011af6:	9a01      	ldr	r2, [sp, #4]
 8011af8:	4314      	orrs	r4, r2
 8011afa:	e776      	b.n	80119ea <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011afc:	9a01      	ldr	r2, [sp, #4]
 8011afe:	4314      	orrs	r4, r2
 8011b00:	e77b      	b.n	80119fa <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011b02:	9a01      	ldr	r2, [sp, #4]
 8011b04:	4314      	orrs	r4, r2
 8011b06:	e77f      	b.n	8011a08 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011b08:	9a01      	ldr	r2, [sp, #4]
 8011b0a:	4322      	orrs	r2, r4
 8011b0c:	e784      	b.n	8011a18 <HAL_GPIO_Init+0xa0>
  } 
}
 8011b0e:	b005      	add	sp, #20
 8011b10:	bc3c      	pop	{r2, r3, r4, r5}
 8011b12:	4690      	mov	r8, r2
 8011b14:	4699      	mov	r9, r3
 8011b16:	46a2      	mov	sl, r4
 8011b18:	46ab      	mov	fp, r5
 8011b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b1c:	b7fff000 	.word	0xb7fff000
 8011b20:	40010400 	.word	0x40010400
 8011b24:	40021000 	.word	0x40021000
 8011b28:	40010000 	.word	0x40010000
 8011b2c:	48000400 	.word	0x48000400
 8011b30:	48000800 	.word	0x48000800
 8011b34:	48000c00 	.word	0x48000c00

08011b38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b3a:	46de      	mov	lr, fp
 8011b3c:	4657      	mov	r7, sl
 8011b3e:	464e      	mov	r6, r9
 8011b40:	4645      	mov	r5, r8
 8011b42:	b5e0      	push	{r5, r6, r7, lr}
 8011b44:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011b46:	2900      	cmp	r1, #0
 8011b48:	d071      	beq.n	8011c2e <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8011b4a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011b4c:	2201      	movs	r2, #1
 8011b4e:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011b50:	3202      	adds	r2, #2
 8011b52:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011b54:	3204      	adds	r2, #4
 8011b56:	4693      	mov	fp, r2
 8011b58:	3208      	adds	r2, #8
 8011b5a:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011b5c:	4a37      	ldr	r2, [pc, #220]	; (8011c3c <HAL_GPIO_DeInit+0x104>)
 8011b5e:	1882      	adds	r2, r0, r2
 8011b60:	1e54      	subs	r4, r2, #1
 8011b62:	41a2      	sbcs	r2, r4
 8011b64:	3204      	adds	r2, #4
 8011b66:	9201      	str	r2, [sp, #4]
 8011b68:	9100      	str	r1, [sp, #0]
 8011b6a:	e009      	b.n	8011b80 <HAL_GPIO_DeInit+0x48>
 8011b6c:	2100      	movs	r1, #0
 8011b6e:	4689      	mov	r9, r1
 8011b70:	4649      	mov	r1, r9
 8011b72:	40a9      	lsls	r1, r5
 8011b74:	42b1      	cmp	r1, r6
 8011b76:	d048      	beq.n	8011c0a <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011b78:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011b7a:	9a00      	ldr	r2, [sp, #0]
 8011b7c:	40da      	lsrs	r2, r3
 8011b7e:	d056      	beq.n	8011c2e <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8011b80:	4662      	mov	r2, ip
 8011b82:	409a      	lsls	r2, r3
 8011b84:	9900      	ldr	r1, [sp, #0]
 8011b86:	400a      	ands	r2, r1
    if (iocurrent)
 8011b88:	d0f6      	beq.n	8011b78 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011b8a:	6804      	ldr	r4, [r0, #0]
 8011b8c:	005d      	lsls	r5, r3, #1
 8011b8e:	4646      	mov	r6, r8
 8011b90:	40ae      	lsls	r6, r5
 8011b92:	43f5      	mvns	r5, r6
 8011b94:	402c      	ands	r4, r5
 8011b96:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011b98:	08dc      	lsrs	r4, r3, #3
 8011b9a:	00a4      	lsls	r4, r4, #2
 8011b9c:	1904      	adds	r4, r0, r4
 8011b9e:	6a26      	ldr	r6, [r4, #32]
 8011ba0:	465f      	mov	r7, fp
 8011ba2:	401f      	ands	r7, r3
 8011ba4:	00bf      	lsls	r7, r7, #2
 8011ba6:	4651      	mov	r1, sl
 8011ba8:	40b9      	lsls	r1, r7
 8011baa:	438e      	bics	r6, r1
 8011bac:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011bae:	6884      	ldr	r4, [r0, #8]
 8011bb0:	402c      	ands	r4, r5
 8011bb2:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011bb4:	6844      	ldr	r4, [r0, #4]
 8011bb6:	4666      	mov	r6, ip
 8011bb8:	409e      	lsls	r6, r3
 8011bba:	43b4      	bics	r4, r6
 8011bbc:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011bbe:	68c4      	ldr	r4, [r0, #12]
 8011bc0:	4025      	ands	r5, r4
 8011bc2:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011bc4:	089c      	lsrs	r4, r3, #2
 8011bc6:	00a4      	lsls	r4, r4, #2
 8011bc8:	491d      	ldr	r1, [pc, #116]	; (8011c40 <HAL_GPIO_DeInit+0x108>)
 8011bca:	4689      	mov	r9, r1
 8011bcc:	444c      	add	r4, r9
 8011bce:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011bd0:	4645      	mov	r5, r8
 8011bd2:	401d      	ands	r5, r3
 8011bd4:	00ad      	lsls	r5, r5, #2
 8011bd6:	4657      	mov	r7, sl
 8011bd8:	40af      	lsls	r7, r5
 8011bda:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011bdc:	2190      	movs	r1, #144	; 0x90
 8011bde:	05c9      	lsls	r1, r1, #23
 8011be0:	4288      	cmp	r0, r1
 8011be2:	d0c3      	beq.n	8011b6c <HAL_GPIO_DeInit+0x34>
 8011be4:	4917      	ldr	r1, [pc, #92]	; (8011c44 <HAL_GPIO_DeInit+0x10c>)
 8011be6:	4288      	cmp	r0, r1
 8011be8:	d008      	beq.n	8011bfc <HAL_GPIO_DeInit+0xc4>
 8011bea:	4917      	ldr	r1, [pc, #92]	; (8011c48 <HAL_GPIO_DeInit+0x110>)
 8011bec:	4288      	cmp	r0, r1
 8011bee:	d007      	beq.n	8011c00 <HAL_GPIO_DeInit+0xc8>
 8011bf0:	4916      	ldr	r1, [pc, #88]	; (8011c4c <HAL_GPIO_DeInit+0x114>)
 8011bf2:	4288      	cmp	r0, r1
 8011bf4:	d007      	beq.n	8011c06 <HAL_GPIO_DeInit+0xce>
 8011bf6:	9901      	ldr	r1, [sp, #4]
 8011bf8:	4689      	mov	r9, r1
 8011bfa:	e7b9      	b.n	8011b70 <HAL_GPIO_DeInit+0x38>
 8011bfc:	46e1      	mov	r9, ip
 8011bfe:	e7b7      	b.n	8011b70 <HAL_GPIO_DeInit+0x38>
 8011c00:	2102      	movs	r1, #2
 8011c02:	4689      	mov	r9, r1
 8011c04:	e7b4      	b.n	8011b70 <HAL_GPIO_DeInit+0x38>
 8011c06:	46c1      	mov	r9, r8
 8011c08:	e7b2      	b.n	8011b70 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8011c0a:	68a5      	ldr	r5, [r4, #8]
 8011c0c:	43bd      	bics	r5, r7
 8011c0e:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8011c10:	4c0f      	ldr	r4, [pc, #60]	; (8011c50 <HAL_GPIO_DeInit+0x118>)
 8011c12:	6825      	ldr	r5, [r4, #0]
 8011c14:	43d2      	mvns	r2, r2
 8011c16:	4015      	ands	r5, r2
 8011c18:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011c1a:	6865      	ldr	r5, [r4, #4]
 8011c1c:	4015      	ands	r5, r2
 8011c1e:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8011c20:	68a5      	ldr	r5, [r4, #8]
 8011c22:	4015      	ands	r5, r2
 8011c24:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011c26:	68e5      	ldr	r5, [r4, #12]
 8011c28:	402a      	ands	r2, r5
 8011c2a:	60e2      	str	r2, [r4, #12]
 8011c2c:	e7a4      	b.n	8011b78 <HAL_GPIO_DeInit+0x40>
  }
}
 8011c2e:	b003      	add	sp, #12
 8011c30:	bc3c      	pop	{r2, r3, r4, r5}
 8011c32:	4690      	mov	r8, r2
 8011c34:	4699      	mov	r9, r3
 8011c36:	46a2      	mov	sl, r4
 8011c38:	46ab      	mov	fp, r5
 8011c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c3c:	b7fff000 	.word	0xb7fff000
 8011c40:	40010000 	.word	0x40010000
 8011c44:	48000400 	.word	0x48000400
 8011c48:	48000800 	.word	0x48000800
 8011c4c:	48000c00 	.word	0x48000c00
 8011c50:	40010400 	.word	0x40010400

08011c54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011c54:	6900      	ldr	r0, [r0, #16]
 8011c56:	4008      	ands	r0, r1
 8011c58:	1e41      	subs	r1, r0, #1
 8011c5a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011c5c:	b2c0      	uxtb	r0, r0
  }
 8011c5e:	4770      	bx	lr

08011c60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011c60:	2a00      	cmp	r2, #0
 8011c62:	d101      	bne.n	8011c68 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011c64:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011c66:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011c68:	6181      	str	r1, [r0, #24]
 8011c6a:	e7fc      	b.n	8011c66 <HAL_GPIO_WritePin+0x6>

08011c6c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011c6c:	6943      	ldr	r3, [r0, #20]
 8011c6e:	4059      	eors	r1, r3
 8011c70:	6141      	str	r1, [r0, #20]
}
 8011c72:	4770      	bx	lr

08011c74 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011c74:	4770      	bx	lr
	...

08011c78 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011c78:	4a03      	ldr	r2, [pc, #12]	; (8011c88 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011c7a:	6811      	ldr	r1, [r2, #0]
 8011c7c:	2380      	movs	r3, #128	; 0x80
 8011c7e:	005b      	lsls	r3, r3, #1
 8011c80:	430b      	orrs	r3, r1
 8011c82:	6013      	str	r3, [r2, #0]
}
 8011c84:	4770      	bx	lr
 8011c86:	46c0      	nop			; (mov r8, r8)
 8011c88:	40007000 	.word	0x40007000

08011c8c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c8e:	46c6      	mov	lr, r8
 8011c90:	b500      	push	{lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011c96:	6803      	ldr	r3, [r0, #0]
 8011c98:	07db      	lsls	r3, r3, #31
 8011c9a:	d538      	bpl.n	8011d0e <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011c9c:	4bbd      	ldr	r3, [pc, #756]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011c9e:	685a      	ldr	r2, [r3, #4]
 8011ca0:	230c      	movs	r3, #12
 8011ca2:	4013      	ands	r3, r2
 8011ca4:	2b04      	cmp	r3, #4
 8011ca6:	d02a      	beq.n	8011cfe <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011ca8:	4bba      	ldr	r3, [pc, #744]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011caa:	685a      	ldr	r2, [r3, #4]
 8011cac:	230c      	movs	r3, #12
 8011cae:	4013      	ands	r3, r2
 8011cb0:	2b08      	cmp	r3, #8
 8011cb2:	d108      	bne.n	8011cc6 <HAL_RCC_OscConfig+0x3a>
 8011cb4:	4bb7      	ldr	r3, [pc, #732]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	22c0      	movs	r2, #192	; 0xc0
 8011cba:	0252      	lsls	r2, r2, #9
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	2280      	movs	r2, #128	; 0x80
 8011cc0:	0252      	lsls	r2, r2, #9
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d01b      	beq.n	8011cfe <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011cc6:	4bb3      	ldr	r3, [pc, #716]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011cc8:	681a      	ldr	r2, [r3, #0]
 8011cca:	49b3      	ldr	r1, [pc, #716]	; (8011f98 <HAL_RCC_OscConfig+0x30c>)
 8011ccc:	400a      	ands	r2, r1
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	49b2      	ldr	r1, [pc, #712]	; (8011f9c <HAL_RCC_OscConfig+0x310>)
 8011cd4:	400a      	ands	r2, r1
 8011cd6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011cd8:	f7fe fb5c 	bl	8010394 <HAL_GetTick>
 8011cdc:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011cde:	4ead      	ldr	r6, [pc, #692]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011ce0:	2580      	movs	r5, #128	; 0x80
 8011ce2:	02ad      	lsls	r5, r5, #10
 8011ce4:	6833      	ldr	r3, [r6, #0]
 8011ce6:	422b      	tst	r3, r5
 8011ce8:	d039      	beq.n	8011d5e <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011cea:	f7fe fb53 	bl	8010394 <HAL_GetTick>
 8011cee:	1bc0      	subs	r0, r0, r7
 8011cf0:	2864      	cmp	r0, #100	; 0x64
 8011cf2:	d9f7      	bls.n	8011ce4 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011cf4:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011cf6:	b002      	add	sp, #8
 8011cf8:	bc04      	pop	{r2}
 8011cfa:	4690      	mov	r8, r2
 8011cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011cfe:	4ba5      	ldr	r3, [pc, #660]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	039b      	lsls	r3, r3, #14
 8011d04:	d503      	bpl.n	8011d0e <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8011d06:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011d08:	6863      	ldr	r3, [r4, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d0f3      	beq.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011d0e:	6823      	ldr	r3, [r4, #0]
 8011d10:	079b      	lsls	r3, r3, #30
 8011d12:	d400      	bmi.n	8011d16 <HAL_RCC_OscConfig+0x8a>
 8011d14:	e08d      	b.n	8011e32 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8011d16:	4b9f      	ldr	r3, [pc, #636]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	220c      	movs	r2, #12
 8011d1c:	421a      	tst	r2, r3
 8011d1e:	d077      	beq.n	8011e10 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011d20:	4b9c      	ldr	r3, [pc, #624]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d22:	685a      	ldr	r2, [r3, #4]
 8011d24:	230c      	movs	r3, #12
 8011d26:	4013      	ands	r3, r2
 8011d28:	2b08      	cmp	r3, #8
 8011d2a:	d068      	beq.n	8011dfe <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011d2c:	68e3      	ldr	r3, [r4, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d100      	bne.n	8011d34 <HAL_RCC_OscConfig+0xa8>
 8011d32:	e0a1      	b.n	8011e78 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8011d34:	4a97      	ldr	r2, [pc, #604]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d36:	6813      	ldr	r3, [r2, #0]
 8011d38:	2101      	movs	r1, #1
 8011d3a:	430b      	orrs	r3, r1
 8011d3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011d3e:	f7fe fb29 	bl	8010394 <HAL_GetTick>
 8011d42:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d44:	4e93      	ldr	r6, [pc, #588]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d46:	2502      	movs	r5, #2
 8011d48:	6833      	ldr	r3, [r6, #0]
 8011d4a:	421d      	tst	r5, r3
 8011d4c:	d000      	beq.n	8011d50 <HAL_RCC_OscConfig+0xc4>
 8011d4e:	e08a      	b.n	8011e66 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011d50:	f7fe fb20 	bl	8010394 <HAL_GetTick>
 8011d54:	1bc0      	subs	r0, r0, r7
 8011d56:	2864      	cmp	r0, #100	; 0x64
 8011d58:	d9f6      	bls.n	8011d48 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8011d5a:	2003      	movs	r0, #3
 8011d5c:	e7cb      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011d5e:	6863      	ldr	r3, [r4, #4]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d00b      	beq.n	8011d7c <HAL_RCC_OscConfig+0xf0>
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d122      	bne.n	8011dae <HAL_RCC_OscConfig+0x122>
 8011d68:	4b8a      	ldr	r3, [pc, #552]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	498a      	ldr	r1, [pc, #552]	; (8011f98 <HAL_RCC_OscConfig+0x30c>)
 8011d6e:	400a      	ands	r2, r1
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	4989      	ldr	r1, [pc, #548]	; (8011f9c <HAL_RCC_OscConfig+0x310>)
 8011d76:	400a      	ands	r2, r1
 8011d78:	601a      	str	r2, [r3, #0]
 8011d7a:	e005      	b.n	8011d88 <HAL_RCC_OscConfig+0xfc>
 8011d7c:	4a85      	ldr	r2, [pc, #532]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d7e:	6811      	ldr	r1, [r2, #0]
 8011d80:	2380      	movs	r3, #128	; 0x80
 8011d82:	025b      	lsls	r3, r3, #9
 8011d84:	430b      	orrs	r3, r1
 8011d86:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011d88:	6863      	ldr	r3, [r4, #4]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d027      	beq.n	8011dde <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8011d8e:	f7fe fb01 	bl	8010394 <HAL_GetTick>
 8011d92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d94:	4e7f      	ldr	r6, [pc, #508]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011d96:	2580      	movs	r5, #128	; 0x80
 8011d98:	02ad      	lsls	r5, r5, #10
 8011d9a:	6833      	ldr	r3, [r6, #0]
 8011d9c:	422b      	tst	r3, r5
 8011d9e:	d1b6      	bne.n	8011d0e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011da0:	f7fe faf8 	bl	8010394 <HAL_GetTick>
 8011da4:	1bc0      	subs	r0, r0, r7
 8011da6:	2864      	cmp	r0, #100	; 0x64
 8011da8:	d9f7      	bls.n	8011d9a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8011daa:	2003      	movs	r0, #3
 8011dac:	e7a3      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011dae:	2b05      	cmp	r3, #5
 8011db0:	d009      	beq.n	8011dc6 <HAL_RCC_OscConfig+0x13a>
 8011db2:	4b78      	ldr	r3, [pc, #480]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	4978      	ldr	r1, [pc, #480]	; (8011f98 <HAL_RCC_OscConfig+0x30c>)
 8011db8:	400a      	ands	r2, r1
 8011dba:	601a      	str	r2, [r3, #0]
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	4977      	ldr	r1, [pc, #476]	; (8011f9c <HAL_RCC_OscConfig+0x310>)
 8011dc0:	400a      	ands	r2, r1
 8011dc2:	601a      	str	r2, [r3, #0]
 8011dc4:	e7e0      	b.n	8011d88 <HAL_RCC_OscConfig+0xfc>
 8011dc6:	4b73      	ldr	r3, [pc, #460]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011dc8:	6819      	ldr	r1, [r3, #0]
 8011dca:	2280      	movs	r2, #128	; 0x80
 8011dcc:	02d2      	lsls	r2, r2, #11
 8011dce:	430a      	orrs	r2, r1
 8011dd0:	601a      	str	r2, [r3, #0]
 8011dd2:	6819      	ldr	r1, [r3, #0]
 8011dd4:	2280      	movs	r2, #128	; 0x80
 8011dd6:	0252      	lsls	r2, r2, #9
 8011dd8:	430a      	orrs	r2, r1
 8011dda:	601a      	str	r2, [r3, #0]
 8011ddc:	e7d4      	b.n	8011d88 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8011dde:	f7fe fad9 	bl	8010394 <HAL_GetTick>
 8011de2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011de4:	4e6b      	ldr	r6, [pc, #428]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011de6:	2580      	movs	r5, #128	; 0x80
 8011de8:	02ad      	lsls	r5, r5, #10
 8011dea:	6833      	ldr	r3, [r6, #0]
 8011dec:	422b      	tst	r3, r5
 8011dee:	d08e      	beq.n	8011d0e <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011df0:	f7fe fad0 	bl	8010394 <HAL_GetTick>
 8011df4:	1bc0      	subs	r0, r0, r7
 8011df6:	2864      	cmp	r0, #100	; 0x64
 8011df8:	d9f7      	bls.n	8011dea <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8011dfa:	2003      	movs	r0, #3
 8011dfc:	e77b      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011dfe:	4b65      	ldr	r3, [pc, #404]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	22c0      	movs	r2, #192	; 0xc0
 8011e04:	0252      	lsls	r2, r2, #9
 8011e06:	4013      	ands	r3, r2
 8011e08:	2280      	movs	r2, #128	; 0x80
 8011e0a:	0212      	lsls	r2, r2, #8
 8011e0c:	4293      	cmp	r3, r2
 8011e0e:	d18d      	bne.n	8011d2c <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011e10:	4b60      	ldr	r3, [pc, #384]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	079b      	lsls	r3, r3, #30
 8011e16:	d504      	bpl.n	8011e22 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8011e18:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011e1a:	68e3      	ldr	r3, [r4, #12]
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d000      	beq.n	8011e22 <HAL_RCC_OscConfig+0x196>
 8011e20:	e769      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e22:	495c      	ldr	r1, [pc, #368]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e24:	680a      	ldr	r2, [r1, #0]
 8011e26:	6923      	ldr	r3, [r4, #16]
 8011e28:	00db      	lsls	r3, r3, #3
 8011e2a:	20f8      	movs	r0, #248	; 0xf8
 8011e2c:	4382      	bics	r2, r0
 8011e2e:	4313      	orrs	r3, r2
 8011e30:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	071b      	lsls	r3, r3, #28
 8011e36:	d547      	bpl.n	8011ec8 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011e38:	6a23      	ldr	r3, [r4, #32]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d030      	beq.n	8011ea0 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8011e3e:	4a55      	ldr	r2, [pc, #340]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e40:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011e42:	2101      	movs	r1, #1
 8011e44:	430b      	orrs	r3, r1
 8011e46:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011e48:	f7fe faa4 	bl	8010394 <HAL_GetTick>
 8011e4c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011e4e:	4e51      	ldr	r6, [pc, #324]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e50:	2502      	movs	r5, #2
 8011e52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011e54:	421d      	tst	r5, r3
 8011e56:	d137      	bne.n	8011ec8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011e58:	f7fe fa9c 	bl	8010394 <HAL_GetTick>
 8011e5c:	1bc0      	subs	r0, r0, r7
 8011e5e:	2864      	cmp	r0, #100	; 0x64
 8011e60:	d9f7      	bls.n	8011e52 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8011e62:	2003      	movs	r0, #3
 8011e64:	e747      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011e66:	494b      	ldr	r1, [pc, #300]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e68:	680a      	ldr	r2, [r1, #0]
 8011e6a:	6923      	ldr	r3, [r4, #16]
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	20f8      	movs	r0, #248	; 0xf8
 8011e70:	4382      	bics	r2, r0
 8011e72:	4313      	orrs	r3, r2
 8011e74:	600b      	str	r3, [r1, #0]
 8011e76:	e7dc      	b.n	8011e32 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8011e78:	4a46      	ldr	r2, [pc, #280]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e7a:	6813      	ldr	r3, [r2, #0]
 8011e7c:	2101      	movs	r1, #1
 8011e7e:	438b      	bics	r3, r1
 8011e80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011e82:	f7fe fa87 	bl	8010394 <HAL_GetTick>
 8011e86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011e88:	4e42      	ldr	r6, [pc, #264]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011e8a:	2502      	movs	r5, #2
 8011e8c:	6833      	ldr	r3, [r6, #0]
 8011e8e:	421d      	tst	r5, r3
 8011e90:	d0cf      	beq.n	8011e32 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011e92:	f7fe fa7f 	bl	8010394 <HAL_GetTick>
 8011e96:	1bc0      	subs	r0, r0, r7
 8011e98:	2864      	cmp	r0, #100	; 0x64
 8011e9a:	d9f7      	bls.n	8011e8c <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8011e9c:	2003      	movs	r0, #3
 8011e9e:	e72a      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8011ea0:	4a3c      	ldr	r2, [pc, #240]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011ea2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8011ea4:	2101      	movs	r1, #1
 8011ea6:	438b      	bics	r3, r1
 8011ea8:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011eaa:	f7fe fa73 	bl	8010394 <HAL_GetTick>
 8011eae:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011eb0:	4e38      	ldr	r6, [pc, #224]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011eb2:	2502      	movs	r5, #2
 8011eb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011eb6:	421d      	tst	r5, r3
 8011eb8:	d006      	beq.n	8011ec8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011eba:	f7fe fa6b 	bl	8010394 <HAL_GetTick>
 8011ebe:	1bc0      	subs	r0, r0, r7
 8011ec0:	2864      	cmp	r0, #100	; 0x64
 8011ec2:	d9f7      	bls.n	8011eb4 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8011ec4:	2003      	movs	r0, #3
 8011ec6:	e716      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	075b      	lsls	r3, r3, #29
 8011ecc:	d442      	bmi.n	8011f54 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011ece:	6823      	ldr	r3, [r4, #0]
 8011ed0:	06db      	lsls	r3, r3, #27
 8011ed2:	d512      	bpl.n	8011efa <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8011ed4:	6963      	ldr	r3, [r4, #20]
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d100      	bne.n	8011edc <HAL_RCC_OscConfig+0x250>
 8011eda:	e0ce      	b.n	801207a <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011edc:	3305      	adds	r3, #5
 8011ede:	d000      	beq.n	8011ee2 <HAL_RCC_OscConfig+0x256>
 8011ee0:	e0ec      	b.n	80120bc <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8011ee2:	4a2c      	ldr	r2, [pc, #176]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011ee4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011ee6:	2104      	movs	r1, #4
 8011ee8:	438b      	bics	r3, r1
 8011eea:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011eec:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011eee:	69a3      	ldr	r3, [r4, #24]
 8011ef0:	00db      	lsls	r3, r3, #3
 8011ef2:	20f8      	movs	r0, #248	; 0xf8
 8011ef4:	4381      	bics	r1, r0
 8011ef6:	430b      	orrs	r3, r1
 8011ef8:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011efa:	6823      	ldr	r3, [r4, #0]
 8011efc:	069b      	lsls	r3, r3, #26
 8011efe:	d400      	bmi.n	8011f02 <HAL_RCC_OscConfig+0x276>
 8011f00:	e106      	b.n	8012110 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011f02:	4b24      	ldr	r3, [pc, #144]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011f04:	685a      	ldr	r2, [r3, #4]
 8011f06:	230c      	movs	r3, #12
 8011f08:	4013      	ands	r3, r2
 8011f0a:	2b0c      	cmp	r3, #12
 8011f0c:	d100      	bne.n	8011f10 <HAL_RCC_OscConfig+0x284>
 8011f0e:	e0f6      	b.n	80120fe <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011f10:	4b20      	ldr	r3, [pc, #128]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011f12:	685a      	ldr	r2, [r3, #4]
 8011f14:	230c      	movs	r3, #12
 8011f16:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011f18:	2b08      	cmp	r3, #8
 8011f1a:	d100      	bne.n	8011f1e <HAL_RCC_OscConfig+0x292>
 8011f1c:	e0e7      	b.n	80120ee <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011f1e:	69e3      	ldr	r3, [r4, #28]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d100      	bne.n	8011f26 <HAL_RCC_OscConfig+0x29a>
 8011f24:	e116      	b.n	8012154 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8011f26:	4a1b      	ldr	r2, [pc, #108]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011f28:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011f2a:	2380      	movs	r3, #128	; 0x80
 8011f2c:	025b      	lsls	r3, r3, #9
 8011f2e:	430b      	orrs	r3, r1
 8011f30:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011f32:	f7fe fa2f 	bl	8010394 <HAL_GetTick>
 8011f36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011f38:	4e16      	ldr	r6, [pc, #88]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011f3a:	2580      	movs	r5, #128	; 0x80
 8011f3c:	026d      	lsls	r5, r5, #9
 8011f3e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011f40:	422b      	tst	r3, r5
 8011f42:	d000      	beq.n	8011f46 <HAL_RCC_OscConfig+0x2ba>
 8011f44:	e0e4      	b.n	8012110 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011f46:	f7fe fa25 	bl	8010394 <HAL_GetTick>
 8011f4a:	1bc0      	subs	r0, r0, r7
 8011f4c:	2864      	cmp	r0, #100	; 0x64
 8011f4e:	d9f6      	bls.n	8011f3e <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8011f50:	2003      	movs	r0, #3
 8011f52:	e6d0      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011f54:	4a0f      	ldr	r2, [pc, #60]	; (8011f94 <HAL_RCC_OscConfig+0x308>)
 8011f56:	69d1      	ldr	r1, [r2, #28]
 8011f58:	2080      	movs	r0, #128	; 0x80
 8011f5a:	0540      	lsls	r0, r0, #21
 8011f5c:	4301      	orrs	r1, r0
 8011f5e:	61d1      	str	r1, [r2, #28]
 8011f60:	69d3      	ldr	r3, [r2, #28]
 8011f62:	4003      	ands	r3, r0
 8011f64:	9301      	str	r3, [sp, #4]
 8011f66:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8011f68:	4a0d      	ldr	r2, [pc, #52]	; (8011fa0 <HAL_RCC_OscConfig+0x314>)
 8011f6a:	6811      	ldr	r1, [r2, #0]
 8011f6c:	2380      	movs	r3, #128	; 0x80
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	430b      	orrs	r3, r1
 8011f72:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8011f74:	f7fe fa0e 	bl	8010394 <HAL_GetTick>
 8011f78:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011f7a:	4e09      	ldr	r6, [pc, #36]	; (8011fa0 <HAL_RCC_OscConfig+0x314>)
 8011f7c:	2580      	movs	r5, #128	; 0x80
 8011f7e:	006d      	lsls	r5, r5, #1
 8011f80:	6833      	ldr	r3, [r6, #0]
 8011f82:	422b      	tst	r3, r5
 8011f84:	d10e      	bne.n	8011fa4 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011f86:	f7fe fa05 	bl	8010394 <HAL_GetTick>
 8011f8a:	1bc0      	subs	r0, r0, r7
 8011f8c:	2864      	cmp	r0, #100	; 0x64
 8011f8e:	d9f7      	bls.n	8011f80 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8011f90:	2003      	movs	r0, #3
 8011f92:	e6b0      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
 8011f94:	40021000 	.word	0x40021000
 8011f98:	fffeffff 	.word	0xfffeffff
 8011f9c:	fffbffff 	.word	0xfffbffff
 8011fa0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8011fa4:	4b95      	ldr	r3, [pc, #596]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8011fa6:	6a1a      	ldr	r2, [r3, #32]
 8011fa8:	2101      	movs	r1, #1
 8011faa:	438a      	bics	r2, r1
 8011fac:	621a      	str	r2, [r3, #32]
 8011fae:	6a1a      	ldr	r2, [r3, #32]
 8011fb0:	3103      	adds	r1, #3
 8011fb2:	438a      	bics	r2, r1
 8011fb4:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8011fb6:	f7fe f9ed 	bl	8010394 <HAL_GetTick>
 8011fba:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011fbc:	4e8f      	ldr	r6, [pc, #572]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8011fbe:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011fc0:	4f8f      	ldr	r7, [pc, #572]	; (8012200 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011fc2:	6a33      	ldr	r3, [r6, #32]
 8011fc4:	421d      	tst	r5, r3
 8011fc6:	d007      	beq.n	8011fd8 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011fc8:	f7fe f9e4 	bl	8010394 <HAL_GetTick>
 8011fcc:	4643      	mov	r3, r8
 8011fce:	1ac0      	subs	r0, r0, r3
 8011fd0:	42b8      	cmp	r0, r7
 8011fd2:	d9f6      	bls.n	8011fc2 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8011fd4:	2003      	movs	r0, #3
 8011fd6:	e68e      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011fd8:	68a3      	ldr	r3, [r4, #8]
 8011fda:	2b01      	cmp	r3, #1
 8011fdc:	d00b      	beq.n	8011ff6 <HAL_RCC_OscConfig+0x36a>
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d123      	bne.n	801202a <HAL_RCC_OscConfig+0x39e>
 8011fe2:	4b86      	ldr	r3, [pc, #536]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8011fe4:	6a1a      	ldr	r2, [r3, #32]
 8011fe6:	2101      	movs	r1, #1
 8011fe8:	438a      	bics	r2, r1
 8011fea:	621a      	str	r2, [r3, #32]
 8011fec:	6a1a      	ldr	r2, [r3, #32]
 8011fee:	3103      	adds	r1, #3
 8011ff0:	438a      	bics	r2, r1
 8011ff2:	621a      	str	r2, [r3, #32]
 8011ff4:	e004      	b.n	8012000 <HAL_RCC_OscConfig+0x374>
 8011ff6:	4a81      	ldr	r2, [pc, #516]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8011ff8:	6a13      	ldr	r3, [r2, #32]
 8011ffa:	2101      	movs	r1, #1
 8011ffc:	430b      	orrs	r3, r1
 8011ffe:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012000:	68a3      	ldr	r3, [r4, #8]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d027      	beq.n	8012056 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8012006:	f7fe f9c5 	bl	8010394 <HAL_GetTick>
 801200a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801200c:	4e7b      	ldr	r6, [pc, #492]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 801200e:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012010:	4f7b      	ldr	r7, [pc, #492]	; (8012200 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012012:	6a33      	ldr	r3, [r6, #32]
 8012014:	421d      	tst	r5, r3
 8012016:	d000      	beq.n	801201a <HAL_RCC_OscConfig+0x38e>
 8012018:	e759      	b.n	8011ece <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801201a:	f7fe f9bb 	bl	8010394 <HAL_GetTick>
 801201e:	4643      	mov	r3, r8
 8012020:	1ac0      	subs	r0, r0, r3
 8012022:	42b8      	cmp	r0, r7
 8012024:	d9f5      	bls.n	8012012 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8012026:	2003      	movs	r0, #3
 8012028:	e665      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801202a:	2b05      	cmp	r3, #5
 801202c:	d009      	beq.n	8012042 <HAL_RCC_OscConfig+0x3b6>
 801202e:	4b73      	ldr	r3, [pc, #460]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012030:	6a1a      	ldr	r2, [r3, #32]
 8012032:	2101      	movs	r1, #1
 8012034:	438a      	bics	r2, r1
 8012036:	621a      	str	r2, [r3, #32]
 8012038:	6a1a      	ldr	r2, [r3, #32]
 801203a:	3103      	adds	r1, #3
 801203c:	438a      	bics	r2, r1
 801203e:	621a      	str	r2, [r3, #32]
 8012040:	e7de      	b.n	8012000 <HAL_RCC_OscConfig+0x374>
 8012042:	4b6e      	ldr	r3, [pc, #440]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012044:	6a1a      	ldr	r2, [r3, #32]
 8012046:	2104      	movs	r1, #4
 8012048:	430a      	orrs	r2, r1
 801204a:	621a      	str	r2, [r3, #32]
 801204c:	6a1a      	ldr	r2, [r3, #32]
 801204e:	3903      	subs	r1, #3
 8012050:	430a      	orrs	r2, r1
 8012052:	621a      	str	r2, [r3, #32]
 8012054:	e7d4      	b.n	8012000 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012056:	f7fe f99d 	bl	8010394 <HAL_GetTick>
 801205a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801205c:	4e67      	ldr	r6, [pc, #412]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 801205e:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012060:	4f67      	ldr	r7, [pc, #412]	; (8012200 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012062:	6a33      	ldr	r3, [r6, #32]
 8012064:	421d      	tst	r5, r3
 8012066:	d100      	bne.n	801206a <HAL_RCC_OscConfig+0x3de>
 8012068:	e731      	b.n	8011ece <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801206a:	f7fe f993 	bl	8010394 <HAL_GetTick>
 801206e:	4643      	mov	r3, r8
 8012070:	1ac0      	subs	r0, r0, r3
 8012072:	42b8      	cmp	r0, r7
 8012074:	d9f5      	bls.n	8012062 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012076:	2003      	movs	r0, #3
 8012078:	e63d      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 801207a:	4b60      	ldr	r3, [pc, #384]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 801207c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801207e:	2104      	movs	r1, #4
 8012080:	430a      	orrs	r2, r1
 8012082:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012086:	3903      	subs	r1, #3
 8012088:	430a      	orrs	r2, r1
 801208a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 801208c:	f7fe f982 	bl	8010394 <HAL_GetTick>
 8012090:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012092:	4e5a      	ldr	r6, [pc, #360]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012094:	2502      	movs	r5, #2
 8012096:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012098:	421d      	tst	r5, r3
 801209a:	d106      	bne.n	80120aa <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 801209c:	f7fe f97a 	bl	8010394 <HAL_GetTick>
 80120a0:	1bc0      	subs	r0, r0, r7
 80120a2:	2864      	cmp	r0, #100	; 0x64
 80120a4:	d9f7      	bls.n	8012096 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80120a6:	2003      	movs	r0, #3
 80120a8:	e625      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80120aa:	4954      	ldr	r1, [pc, #336]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 80120ac:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80120ae:	69a3      	ldr	r3, [r4, #24]
 80120b0:	00db      	lsls	r3, r3, #3
 80120b2:	20f8      	movs	r0, #248	; 0xf8
 80120b4:	4382      	bics	r2, r0
 80120b6:	4313      	orrs	r3, r2
 80120b8:	634b      	str	r3, [r1, #52]	; 0x34
 80120ba:	e71e      	b.n	8011efa <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80120bc:	4b4f      	ldr	r3, [pc, #316]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 80120be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120c0:	2104      	movs	r1, #4
 80120c2:	430a      	orrs	r2, r1
 80120c4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80120c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120c8:	3903      	subs	r1, #3
 80120ca:	438a      	bics	r2, r1
 80120cc:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80120ce:	f7fe f961 	bl	8010394 <HAL_GetTick>
 80120d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80120d4:	4e49      	ldr	r6, [pc, #292]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 80120d6:	2502      	movs	r5, #2
 80120d8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80120da:	421d      	tst	r5, r3
 80120dc:	d100      	bne.n	80120e0 <HAL_RCC_OscConfig+0x454>
 80120de:	e70c      	b.n	8011efa <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80120e0:	f7fe f958 	bl	8010394 <HAL_GetTick>
 80120e4:	1bc0      	subs	r0, r0, r7
 80120e6:	2864      	cmp	r0, #100	; 0x64
 80120e8:	d9f6      	bls.n	80120d8 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80120ea:	2003      	movs	r0, #3
 80120ec:	e603      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80120ee:	4b43      	ldr	r3, [pc, #268]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	22c0      	movs	r2, #192	; 0xc0
 80120f4:	0252      	lsls	r2, r2, #9
 80120f6:	4013      	ands	r3, r2
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d000      	beq.n	80120fe <HAL_RCC_OscConfig+0x472>
 80120fc:	e70f      	b.n	8011f1e <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80120fe:	4b3f      	ldr	r3, [pc, #252]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012102:	03db      	lsls	r3, r3, #15
 8012104:	d504      	bpl.n	8012110 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8012106:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012108:	69e3      	ldr	r3, [r4, #28]
 801210a:	2b01      	cmp	r3, #1
 801210c:	d000      	beq.n	8012110 <HAL_RCC_OscConfig+0x484>
 801210e:	e5f2      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012110:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012112:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012114:	2b00      	cmp	r3, #0
 8012116:	d100      	bne.n	801211a <HAL_RCC_OscConfig+0x48e>
 8012118:	e5ed      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801211a:	4a38      	ldr	r2, [pc, #224]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 801211c:	6851      	ldr	r1, [r2, #4]
 801211e:	220c      	movs	r2, #12
 8012120:	400a      	ands	r2, r1
 8012122:	2a08      	cmp	r2, #8
 8012124:	d068      	beq.n	80121f8 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012126:	2b02      	cmp	r3, #2
 8012128:	d029      	beq.n	801217e <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 801212a:	4a34      	ldr	r2, [pc, #208]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 801212c:	6813      	ldr	r3, [r2, #0]
 801212e:	4935      	ldr	r1, [pc, #212]	; (8012204 <HAL_RCC_OscConfig+0x578>)
 8012130:	400b      	ands	r3, r1
 8012132:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012134:	f7fe f92e 	bl	8010394 <HAL_GetTick>
 8012138:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801213a:	4d30      	ldr	r5, [pc, #192]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 801213c:	2480      	movs	r4, #128	; 0x80
 801213e:	04a4      	lsls	r4, r4, #18
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	4223      	tst	r3, r4
 8012144:	d056      	beq.n	80121f4 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012146:	f7fe f925 	bl	8010394 <HAL_GetTick>
 801214a:	1b80      	subs	r0, r0, r6
 801214c:	2864      	cmp	r0, #100	; 0x64
 801214e:	d9f7      	bls.n	8012140 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012150:	2003      	movs	r0, #3
 8012152:	e5d0      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012154:	4a29      	ldr	r2, [pc, #164]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012156:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012158:	492b      	ldr	r1, [pc, #172]	; (8012208 <HAL_RCC_OscConfig+0x57c>)
 801215a:	400b      	ands	r3, r1
 801215c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801215e:	f7fe f919 	bl	8010394 <HAL_GetTick>
 8012162:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012164:	4e25      	ldr	r6, [pc, #148]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012166:	2580      	movs	r5, #128	; 0x80
 8012168:	026d      	lsls	r5, r5, #9
 801216a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801216c:	422b      	tst	r3, r5
 801216e:	d0cf      	beq.n	8012110 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012170:	f7fe f910 	bl	8010394 <HAL_GetTick>
 8012174:	1bc0      	subs	r0, r0, r7
 8012176:	2864      	cmp	r0, #100	; 0x64
 8012178:	d9f7      	bls.n	801216a <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 801217a:	2003      	movs	r0, #3
 801217c:	e5bb      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 801217e:	4a1f      	ldr	r2, [pc, #124]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012180:	6813      	ldr	r3, [r2, #0]
 8012182:	4920      	ldr	r1, [pc, #128]	; (8012204 <HAL_RCC_OscConfig+0x578>)
 8012184:	400b      	ands	r3, r1
 8012186:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012188:	f7fe f904 	bl	8010394 <HAL_GetTick>
 801218c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801218e:	4e1b      	ldr	r6, [pc, #108]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 8012190:	2580      	movs	r5, #128	; 0x80
 8012192:	04ad      	lsls	r5, r5, #18
 8012194:	6833      	ldr	r3, [r6, #0]
 8012196:	422b      	tst	r3, r5
 8012198:	d006      	beq.n	80121a8 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801219a:	f7fe f8fb 	bl	8010394 <HAL_GetTick>
 801219e:	1bc0      	subs	r0, r0, r7
 80121a0:	2864      	cmp	r0, #100	; 0x64
 80121a2:	d9f7      	bls.n	8012194 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80121a4:	2003      	movs	r0, #3
 80121a6:	e5a6      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80121a8:	4b14      	ldr	r3, [pc, #80]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 80121aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121ac:	210f      	movs	r1, #15
 80121ae:	438a      	bics	r2, r1
 80121b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80121b2:	430a      	orrs	r2, r1
 80121b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80121b6:	6859      	ldr	r1, [r3, #4]
 80121b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80121ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80121bc:	4302      	orrs	r2, r0
 80121be:	4813      	ldr	r0, [pc, #76]	; (801220c <HAL_RCC_OscConfig+0x580>)
 80121c0:	4001      	ands	r1, r0
 80121c2:	430a      	orrs	r2, r1
 80121c4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80121c6:	6819      	ldr	r1, [r3, #0]
 80121c8:	2280      	movs	r2, #128	; 0x80
 80121ca:	0452      	lsls	r2, r2, #17
 80121cc:	430a      	orrs	r2, r1
 80121ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80121d0:	f7fe f8e0 	bl	8010394 <HAL_GetTick>
 80121d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80121d6:	4d09      	ldr	r5, [pc, #36]	; (80121fc <HAL_RCC_OscConfig+0x570>)
 80121d8:	2480      	movs	r4, #128	; 0x80
 80121da:	04a4      	lsls	r4, r4, #18
 80121dc:	682b      	ldr	r3, [r5, #0]
 80121de:	4223      	tst	r3, r4
 80121e0:	d106      	bne.n	80121f0 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80121e2:	f7fe f8d7 	bl	8010394 <HAL_GetTick>
 80121e6:	1b80      	subs	r0, r0, r6
 80121e8:	2864      	cmp	r0, #100	; 0x64
 80121ea:	d9f7      	bls.n	80121dc <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80121ec:	2003      	movs	r0, #3
 80121ee:	e582      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80121f0:	2000      	movs	r0, #0
 80121f2:	e580      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
 80121f4:	2000      	movs	r0, #0
 80121f6:	e57e      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 80121f8:	2001      	movs	r0, #1
 80121fa:	e57c      	b.n	8011cf6 <HAL_RCC_OscConfig+0x6a>
 80121fc:	40021000 	.word	0x40021000
 8012200:	00001388 	.word	0x00001388
 8012204:	feffffff 	.word	0xfeffffff
 8012208:	fffeffff 	.word	0xfffeffff
 801220c:	ffc27fff 	.word	0xffc27fff

08012210 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	46ce      	mov	lr, r9
 8012214:	4647      	mov	r7, r8
 8012216:	b580      	push	{r7, lr}
 8012218:	0005      	movs	r5, r0
 801221a:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 801221c:	4b95      	ldr	r3, [pc, #596]	; (8012474 <HAL_RCC_ClockConfig+0x264>)
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	2301      	movs	r3, #1
 8012222:	4013      	ands	r3, r2
 8012224:	428b      	cmp	r3, r1
 8012226:	d300      	bcc.n	801222a <HAL_RCC_ClockConfig+0x1a>
 8012228:	e089      	b.n	801233e <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801222a:	4992      	ldr	r1, [pc, #584]	; (8012474 <HAL_RCC_ClockConfig+0x264>)
 801222c:	680b      	ldr	r3, [r1, #0]
 801222e:	2201      	movs	r2, #1
 8012230:	4393      	bics	r3, r2
 8012232:	4323      	orrs	r3, r4
 8012234:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012236:	680b      	ldr	r3, [r1, #0]
 8012238:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 801223a:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801223c:	42a2      	cmp	r2, r4
 801223e:	d003      	beq.n	8012248 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012240:	bc0c      	pop	{r2, r3}
 8012242:	4690      	mov	r8, r2
 8012244:	4699      	mov	r9, r3
 8012246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012248:	682b      	ldr	r3, [r5, #0]
 801224a:	079b      	lsls	r3, r3, #30
 801224c:	d506      	bpl.n	801225c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801224e:	4a8a      	ldr	r2, [pc, #552]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012250:	6853      	ldr	r3, [r2, #4]
 8012252:	21f0      	movs	r1, #240	; 0xf0
 8012254:	438b      	bics	r3, r1
 8012256:	68a9      	ldr	r1, [r5, #8]
 8012258:	430b      	orrs	r3, r1
 801225a:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801225c:	682b      	ldr	r3, [r5, #0]
 801225e:	07db      	lsls	r3, r3, #31
 8012260:	d400      	bmi.n	8012264 <HAL_RCC_ClockConfig+0x54>
 8012262:	e0f7      	b.n	8012454 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012264:	686b      	ldr	r3, [r5, #4]
 8012266:	2b01      	cmp	r3, #1
 8012268:	d009      	beq.n	801227e <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801226a:	2b02      	cmp	r3, #2
 801226c:	d02b      	beq.n	80122c6 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801226e:	2b03      	cmp	r3, #3
 8012270:	d02f      	beq.n	80122d2 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012272:	4a81      	ldr	r2, [pc, #516]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012274:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012276:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012278:	0792      	lsls	r2, r2, #30
 801227a:	d405      	bmi.n	8012288 <HAL_RCC_ClockConfig+0x78>
 801227c:	e7e0      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801227e:	4a7e      	ldr	r2, [pc, #504]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012280:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012282:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012284:	0392      	lsls	r2, r2, #14
 8012286:	d5db      	bpl.n	8012240 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012288:	497b      	ldr	r1, [pc, #492]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 801228a:	684a      	ldr	r2, [r1, #4]
 801228c:	2003      	movs	r0, #3
 801228e:	4382      	bics	r2, r0
 8012290:	4313      	orrs	r3, r2
 8012292:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012294:	f7fe f87e 	bl	8010394 <HAL_GetTick>
 8012298:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801229a:	686b      	ldr	r3, [r5, #4]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d01e      	beq.n	80122de <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80122a0:	2b02      	cmp	r3, #2
 80122a2:	d02c      	beq.n	80122fe <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80122a4:	2b03      	cmp	r3, #3
 80122a6:	d03a      	beq.n	801231e <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80122a8:	4f73      	ldr	r7, [pc, #460]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80122aa:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122ac:	4b73      	ldr	r3, [pc, #460]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 80122ae:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	421e      	tst	r6, r3
 80122b4:	d100      	bne.n	80122b8 <HAL_RCC_ClockConfig+0xa8>
 80122b6:	e0cd      	b.n	8012454 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122b8:	f7fe f86c 	bl	8010394 <HAL_GetTick>
 80122bc:	1b00      	subs	r0, r0, r4
 80122be:	4540      	cmp	r0, r8
 80122c0:	d9f6      	bls.n	80122b0 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80122c2:	2003      	movs	r0, #3
 80122c4:	e7bc      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80122c6:	4a6c      	ldr	r2, [pc, #432]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80122c8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80122ca:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80122cc:	0192      	lsls	r2, r2, #6
 80122ce:	d4db      	bmi.n	8012288 <HAL_RCC_ClockConfig+0x78>
 80122d0:	e7b6      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80122d2:	4a69      	ldr	r2, [pc, #420]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80122d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80122d6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80122d8:	03d2      	lsls	r2, r2, #15
 80122da:	d4d5      	bmi.n	8012288 <HAL_RCC_ClockConfig+0x78>
 80122dc:	e7b0      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80122de:	4f66      	ldr	r7, [pc, #408]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80122e0:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122e2:	4b66      	ldr	r3, [pc, #408]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 80122e4:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	4033      	ands	r3, r6
 80122ea:	2b04      	cmp	r3, #4
 80122ec:	d100      	bne.n	80122f0 <HAL_RCC_ClockConfig+0xe0>
 80122ee:	e0b1      	b.n	8012454 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80122f0:	f7fe f850 	bl	8010394 <HAL_GetTick>
 80122f4:	1b00      	subs	r0, r0, r4
 80122f6:	4540      	cmp	r0, r8
 80122f8:	d9f5      	bls.n	80122e6 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 80122fa:	2003      	movs	r0, #3
 80122fc:	e7a0      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80122fe:	4f5e      	ldr	r7, [pc, #376]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012300:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012302:	4b5e      	ldr	r3, [pc, #376]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 8012304:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	4033      	ands	r3, r6
 801230a:	2b08      	cmp	r3, #8
 801230c:	d100      	bne.n	8012310 <HAL_RCC_ClockConfig+0x100>
 801230e:	e0a1      	b.n	8012454 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012310:	f7fe f840 	bl	8010394 <HAL_GetTick>
 8012314:	1b00      	subs	r0, r0, r4
 8012316:	4540      	cmp	r0, r8
 8012318:	d9f5      	bls.n	8012306 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 801231a:	2003      	movs	r0, #3
 801231c:	e790      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801231e:	4f56      	ldr	r7, [pc, #344]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012320:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012322:	4b56      	ldr	r3, [pc, #344]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 8012324:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	4033      	ands	r3, r6
 801232a:	2b0c      	cmp	r3, #12
 801232c:	d100      	bne.n	8012330 <HAL_RCC_ClockConfig+0x120>
 801232e:	e091      	b.n	8012454 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012330:	f7fe f830 	bl	8010394 <HAL_GetTick>
 8012334:	1b00      	subs	r0, r0, r4
 8012336:	4540      	cmp	r0, r8
 8012338:	d9f5      	bls.n	8012326 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 801233a:	2003      	movs	r0, #3
 801233c:	e780      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801233e:	6803      	ldr	r3, [r0, #0]
 8012340:	079b      	lsls	r3, r3, #30
 8012342:	d506      	bpl.n	8012352 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012344:	4a4c      	ldr	r2, [pc, #304]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012346:	6853      	ldr	r3, [r2, #4]
 8012348:	21f0      	movs	r1, #240	; 0xf0
 801234a:	438b      	bics	r3, r1
 801234c:	6881      	ldr	r1, [r0, #8]
 801234e:	430b      	orrs	r3, r1
 8012350:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012352:	682b      	ldr	r3, [r5, #0]
 8012354:	07db      	lsls	r3, r3, #31
 8012356:	d571      	bpl.n	801243c <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012358:	686b      	ldr	r3, [r5, #4]
 801235a:	2b01      	cmp	r3, #1
 801235c:	d009      	beq.n	8012372 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801235e:	2b02      	cmp	r3, #2
 8012360:	d02d      	beq.n	80123be <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012362:	2b03      	cmp	r3, #3
 8012364:	d031      	beq.n	80123ca <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012366:	4a44      	ldr	r2, [pc, #272]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012368:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801236a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801236c:	0792      	lsls	r2, r2, #30
 801236e:	d406      	bmi.n	801237e <HAL_RCC_ClockConfig+0x16e>
 8012370:	e766      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012372:	4a41      	ldr	r2, [pc, #260]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012374:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012376:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012378:	0392      	lsls	r2, r2, #14
 801237a:	d400      	bmi.n	801237e <HAL_RCC_ClockConfig+0x16e>
 801237c:	e760      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801237e:	493e      	ldr	r1, [pc, #248]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 8012380:	684a      	ldr	r2, [r1, #4]
 8012382:	2003      	movs	r0, #3
 8012384:	4382      	bics	r2, r0
 8012386:	4313      	orrs	r3, r2
 8012388:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801238a:	f7fe f803 	bl	8010394 <HAL_GetTick>
 801238e:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012390:	686b      	ldr	r3, [r5, #4]
 8012392:	2b01      	cmp	r3, #1
 8012394:	d01f      	beq.n	80123d6 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012396:	2b02      	cmp	r3, #2
 8012398:	d02e      	beq.n	80123f8 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801239a:	2b03      	cmp	r3, #3
 801239c:	d03d      	beq.n	801241a <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801239e:	4b36      	ldr	r3, [pc, #216]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80123a0:	4698      	mov	r8, r3
 80123a2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123a4:	4b35      	ldr	r3, [pc, #212]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 80123a6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80123a8:	4643      	mov	r3, r8
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	421f      	tst	r7, r3
 80123ae:	d045      	beq.n	801243c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123b0:	f7fd fff0 	bl	8010394 <HAL_GetTick>
 80123b4:	1b80      	subs	r0, r0, r6
 80123b6:	4548      	cmp	r0, r9
 80123b8:	d9f6      	bls.n	80123a8 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80123ba:	2003      	movs	r0, #3
 80123bc:	e740      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80123be:	4a2e      	ldr	r2, [pc, #184]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80123c0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80123c2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80123c4:	0192      	lsls	r2, r2, #6
 80123c6:	d4da      	bmi.n	801237e <HAL_RCC_ClockConfig+0x16e>
 80123c8:	e73a      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80123ca:	4a2b      	ldr	r2, [pc, #172]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80123cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80123ce:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80123d0:	03d2      	lsls	r2, r2, #15
 80123d2:	d4d4      	bmi.n	801237e <HAL_RCC_ClockConfig+0x16e>
 80123d4:	e734      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80123d6:	4b28      	ldr	r3, [pc, #160]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80123d8:	4698      	mov	r8, r3
 80123da:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123dc:	4b27      	ldr	r3, [pc, #156]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 80123de:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80123e0:	4643      	mov	r3, r8
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	403b      	ands	r3, r7
 80123e6:	2b04      	cmp	r3, #4
 80123e8:	d028      	beq.n	801243c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123ea:	f7fd ffd3 	bl	8010394 <HAL_GetTick>
 80123ee:	1b80      	subs	r0, r0, r6
 80123f0:	4548      	cmp	r0, r9
 80123f2:	d9f5      	bls.n	80123e0 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80123f4:	2003      	movs	r0, #3
 80123f6:	e723      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80123f8:	4b1f      	ldr	r3, [pc, #124]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 80123fa:	4698      	mov	r8, r3
 80123fc:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80123fe:	4b1f      	ldr	r3, [pc, #124]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 8012400:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012402:	4643      	mov	r3, r8
 8012404:	685b      	ldr	r3, [r3, #4]
 8012406:	403b      	ands	r3, r7
 8012408:	2b08      	cmp	r3, #8
 801240a:	d017      	beq.n	801243c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801240c:	f7fd ffc2 	bl	8010394 <HAL_GetTick>
 8012410:	1b80      	subs	r0, r0, r6
 8012412:	4548      	cmp	r0, r9
 8012414:	d9f5      	bls.n	8012402 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8012416:	2003      	movs	r0, #3
 8012418:	e712      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801241a:	4b17      	ldr	r3, [pc, #92]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 801241c:	4698      	mov	r8, r3
 801241e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012420:	4b16      	ldr	r3, [pc, #88]	; (801247c <HAL_RCC_ClockConfig+0x26c>)
 8012422:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012424:	4643      	mov	r3, r8
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	403b      	ands	r3, r7
 801242a:	2b0c      	cmp	r3, #12
 801242c:	d006      	beq.n	801243c <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801242e:	f7fd ffb1 	bl	8010394 <HAL_GetTick>
 8012432:	1b80      	subs	r0, r0, r6
 8012434:	4548      	cmp	r0, r9
 8012436:	d9f5      	bls.n	8012424 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8012438:	2003      	movs	r0, #3
 801243a:	e701      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801243c:	490d      	ldr	r1, [pc, #52]	; (8012474 <HAL_RCC_ClockConfig+0x264>)
 801243e:	680b      	ldr	r3, [r1, #0]
 8012440:	2201      	movs	r2, #1
 8012442:	4393      	bics	r3, r2
 8012444:	4323      	orrs	r3, r4
 8012446:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012448:	680b      	ldr	r3, [r1, #0]
 801244a:	401a      	ands	r2, r3
      return HAL_ERROR;
 801244c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801244e:	42a2      	cmp	r2, r4
 8012450:	d000      	beq.n	8012454 <HAL_RCC_ClockConfig+0x244>
 8012452:	e6f5      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012454:	682b      	ldr	r3, [r5, #0]
 8012456:	075b      	lsls	r3, r3, #29
 8012458:	d506      	bpl.n	8012468 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 801245a:	4a07      	ldr	r2, [pc, #28]	; (8012478 <HAL_RCC_ClockConfig+0x268>)
 801245c:	6853      	ldr	r3, [r2, #4]
 801245e:	4908      	ldr	r1, [pc, #32]	; (8012480 <HAL_RCC_ClockConfig+0x270>)
 8012460:	400b      	ands	r3, r1
 8012462:	68e9      	ldr	r1, [r5, #12]
 8012464:	430b      	orrs	r3, r1
 8012466:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012468:	2000      	movs	r0, #0
 801246a:	f7fd ff69 	bl	8010340 <HAL_InitTick>
  return HAL_OK;
 801246e:	2000      	movs	r0, #0
 8012470:	e6e6      	b.n	8012240 <HAL_RCC_ClockConfig+0x30>
 8012472:	46c0      	nop			; (mov r8, r8)
 8012474:	40022000 	.word	0x40022000
 8012478:	40021000 	.word	0x40021000
 801247c:	00001388 	.word	0x00001388
 8012480:	fffff8ff 	.word	0xfffff8ff

08012484 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012484:	b530      	push	{r4, r5, lr}
 8012486:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012488:	aa04      	add	r2, sp, #16
 801248a:	4b21      	ldr	r3, [pc, #132]	; (8012510 <HAL_RCC_GetSysClockFreq+0x8c>)
 801248c:	0018      	movs	r0, r3
 801248e:	c832      	ldmia	r0!, {r1, r4, r5}
 8012490:	c232      	stmia	r2!, {r1, r4, r5}
 8012492:	0011      	movs	r1, r2
 8012494:	6802      	ldr	r2, [r0, #0]
 8012496:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012498:	466a      	mov	r2, sp
 801249a:	3310      	adds	r3, #16
 801249c:	cb13      	ldmia	r3!, {r0, r1, r4}
 801249e:	c213      	stmia	r2!, {r0, r1, r4}
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80124a4:	4b1b      	ldr	r3, [pc, #108]	; (8012514 <HAL_RCC_GetSysClockFreq+0x90>)
 80124a6:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80124a8:	200c      	movs	r0, #12
 80124aa:	4018      	ands	r0, r3
 80124ac:	2808      	cmp	r0, #8
 80124ae:	d00a      	beq.n	80124c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80124b0:	380c      	subs	r0, #12
 80124b2:	4243      	negs	r3, r0
 80124b4:	4158      	adcs	r0, r3
 80124b6:	4240      	negs	r0, r0
 80124b8:	4b17      	ldr	r3, [pc, #92]	; (8012518 <HAL_RCC_GetSysClockFreq+0x94>)
 80124ba:	4018      	ands	r0, r3
 80124bc:	4b17      	ldr	r3, [pc, #92]	; (801251c <HAL_RCC_GetSysClockFreq+0x98>)
 80124be:	469c      	mov	ip, r3
 80124c0:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80124c2:	b009      	add	sp, #36	; 0x24
 80124c4:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80124c6:	0c99      	lsrs	r1, r3, #18
 80124c8:	220f      	movs	r2, #15
 80124ca:	4011      	ands	r1, r2
 80124cc:	a804      	add	r0, sp, #16
 80124ce:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80124d0:	4910      	ldr	r1, [pc, #64]	; (8012514 <HAL_RCC_GetSysClockFreq+0x90>)
 80124d2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80124d4:	400a      	ands	r2, r1
 80124d6:	4669      	mov	r1, sp
 80124d8:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80124da:	22c0      	movs	r2, #192	; 0xc0
 80124dc:	0252      	lsls	r2, r2, #9
 80124de:	4013      	ands	r3, r2
 80124e0:	2280      	movs	r2, #128	; 0x80
 80124e2:	0252      	lsls	r2, r2, #9
 80124e4:	4293      	cmp	r3, r2
 80124e6:	d008      	beq.n	80124fa <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80124e8:	22c0      	movs	r2, #192	; 0xc0
 80124ea:	0252      	lsls	r2, r2, #9
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d009      	beq.n	8012504 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80124f0:	480a      	ldr	r0, [pc, #40]	; (801251c <HAL_RCC_GetSysClockFreq+0x98>)
 80124f2:	f7ed fe23 	bl	800013c <__udivsi3>
 80124f6:	4360      	muls	r0, r4
 80124f8:	e7e3      	b.n	80124c2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80124fa:	4808      	ldr	r0, [pc, #32]	; (801251c <HAL_RCC_GetSysClockFreq+0x98>)
 80124fc:	f7ed fe1e 	bl	800013c <__udivsi3>
 8012500:	4360      	muls	r0, r4
 8012502:	e7de      	b.n	80124c2 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012504:	4806      	ldr	r0, [pc, #24]	; (8012520 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012506:	f7ed fe19 	bl	800013c <__udivsi3>
 801250a:	4360      	muls	r0, r4
 801250c:	e7d9      	b.n	80124c2 <HAL_RCC_GetSysClockFreq+0x3e>
 801250e:	46c0      	nop			; (mov r8, r8)
 8012510:	08017214 	.word	0x08017214
 8012514:	40021000 	.word	0x40021000
 8012518:	02625a00 	.word	0x02625a00
 801251c:	007a1200 	.word	0x007a1200
 8012520:	02dc6c00 	.word	0x02dc6c00

08012524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012524:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012526:	f7ff ffad 	bl	8012484 <HAL_RCC_GetSysClockFreq>
 801252a:	4b05      	ldr	r3, [pc, #20]	; (8012540 <HAL_RCC_GetHCLKFreq+0x1c>)
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	061b      	lsls	r3, r3, #24
 8012530:	0f1b      	lsrs	r3, r3, #28
 8012532:	4a04      	ldr	r2, [pc, #16]	; (8012544 <HAL_RCC_GetHCLKFreq+0x20>)
 8012534:	5cd3      	ldrb	r3, [r2, r3]
 8012536:	40d8      	lsrs	r0, r3
 8012538:	4b03      	ldr	r3, [pc, #12]	; (8012548 <HAL_RCC_GetHCLKFreq+0x24>)
 801253a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 801253c:	bd10      	pop	{r4, pc}
 801253e:	46c0      	nop			; (mov r8, r8)
 8012540:	40021000 	.word	0x40021000
 8012544:	0801a264 	.word	0x0801a264
 8012548:	200000a8 	.word	0x200000a8

0801254c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801254c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801254e:	f7ff ffe9 	bl	8012524 <HAL_RCC_GetHCLKFreq>
 8012552:	4b04      	ldr	r3, [pc, #16]	; (8012564 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	055b      	lsls	r3, r3, #21
 8012558:	0f5b      	lsrs	r3, r3, #29
 801255a:	4a03      	ldr	r2, [pc, #12]	; (8012568 <HAL_RCC_GetPCLK1Freq+0x1c>)
 801255c:	5cd3      	ldrb	r3, [r2, r3]
 801255e:	40d8      	lsrs	r0, r3
}    
 8012560:	bd10      	pop	{r4, pc}
 8012562:	46c0      	nop			; (mov r8, r8)
 8012564:	40021000 	.word	0x40021000
 8012568:	0801a264 	.word	0x0801a264

0801256c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801256e:	46c6      	mov	lr, r8
 8012570:	b500      	push	{lr}
 8012572:	b082      	sub	sp, #8
 8012574:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012576:	6803      	ldr	r3, [r0, #0]
 8012578:	03db      	lsls	r3, r3, #15
 801257a:	d507      	bpl.n	801258c <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801257c:	4b43      	ldr	r3, [pc, #268]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801257e:	6a1b      	ldr	r3, [r3, #32]
 8012580:	6842      	ldr	r2, [r0, #4]
 8012582:	4053      	eors	r3, r2
 8012584:	22c0      	movs	r2, #192	; 0xc0
 8012586:	0092      	lsls	r2, r2, #2
 8012588:	4213      	tst	r3, r2
 801258a:	d136      	bne.n	80125fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	07db      	lsls	r3, r3, #31
 8012590:	d506      	bpl.n	80125a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012592:	4a3e      	ldr	r2, [pc, #248]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012594:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012596:	2103      	movs	r1, #3
 8012598:	438b      	bics	r3, r1
 801259a:	68a1      	ldr	r1, [r4, #8]
 801259c:	430b      	orrs	r3, r1
 801259e:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80125a0:	6823      	ldr	r3, [r4, #0]
 80125a2:	079b      	lsls	r3, r3, #30
 80125a4:	d506      	bpl.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80125a6:	4a39      	ldr	r2, [pc, #228]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80125a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80125aa:	4939      	ldr	r1, [pc, #228]	; (8012690 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80125ac:	400b      	ands	r3, r1
 80125ae:	68e1      	ldr	r1, [r4, #12]
 80125b0:	430b      	orrs	r3, r1
 80125b2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80125b4:	6823      	ldr	r3, [r4, #0]
 80125b6:	035b      	lsls	r3, r3, #13
 80125b8:	d506      	bpl.n	80125c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80125ba:	4a34      	ldr	r2, [pc, #208]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80125bc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80125be:	4935      	ldr	r1, [pc, #212]	; (8012694 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80125c0:	400b      	ands	r3, r1
 80125c2:	6921      	ldr	r1, [r4, #16]
 80125c4:	430b      	orrs	r3, r1
 80125c6:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80125c8:	6823      	ldr	r3, [r4, #0]
 80125ca:	069b      	lsls	r3, r3, #26
 80125cc:	d506      	bpl.n	80125dc <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80125ce:	4a2f      	ldr	r2, [pc, #188]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80125d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80125d2:	2110      	movs	r1, #16
 80125d4:	438b      	bics	r3, r1
 80125d6:	6961      	ldr	r1, [r4, #20]
 80125d8:	430b      	orrs	r3, r1
 80125da:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80125dc:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80125de:	6823      	ldr	r3, [r4, #0]
 80125e0:	055b      	lsls	r3, r3, #21
 80125e2:	d506      	bpl.n	80125f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80125e4:	4a29      	ldr	r2, [pc, #164]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80125e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80125e8:	2140      	movs	r1, #64	; 0x40
 80125ea:	438b      	bics	r3, r1
 80125ec:	69a1      	ldr	r1, [r4, #24]
 80125ee:	430b      	orrs	r3, r1
 80125f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80125f2:	b002      	add	sp, #8
 80125f4:	bc04      	pop	{r2}
 80125f6:	4690      	mov	r8, r2
 80125f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80125fa:	4a24      	ldr	r2, [pc, #144]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80125fc:	69d1      	ldr	r1, [r2, #28]
 80125fe:	2080      	movs	r0, #128	; 0x80
 8012600:	0540      	lsls	r0, r0, #21
 8012602:	4301      	orrs	r1, r0
 8012604:	61d1      	str	r1, [r2, #28]
 8012606:	69d3      	ldr	r3, [r2, #28]
 8012608:	4003      	ands	r3, r0
 801260a:	9301      	str	r3, [sp, #4]
 801260c:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801260e:	4a22      	ldr	r2, [pc, #136]	; (8012698 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012610:	6811      	ldr	r1, [r2, #0]
 8012612:	2380      	movs	r3, #128	; 0x80
 8012614:	005b      	lsls	r3, r3, #1
 8012616:	430b      	orrs	r3, r1
 8012618:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801261a:	f7fd febb 	bl	8010394 <HAL_GetTick>
 801261e:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012620:	4e1d      	ldr	r6, [pc, #116]	; (8012698 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012622:	2580      	movs	r5, #128	; 0x80
 8012624:	006d      	lsls	r5, r5, #1
 8012626:	6833      	ldr	r3, [r6, #0]
 8012628:	422b      	tst	r3, r5
 801262a:	d106      	bne.n	801263a <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801262c:	f7fd feb2 	bl	8010394 <HAL_GetTick>
 8012630:	1bc0      	subs	r0, r0, r7
 8012632:	2864      	cmp	r0, #100	; 0x64
 8012634:	d9f7      	bls.n	8012626 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012636:	2003      	movs	r0, #3
 8012638:	e7db      	b.n	80125f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801263a:	4b14      	ldr	r3, [pc, #80]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801263c:	6a18      	ldr	r0, [r3, #32]
 801263e:	4a17      	ldr	r2, [pc, #92]	; (801269c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012640:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012642:	6a1d      	ldr	r5, [r3, #32]
 8012644:	2180      	movs	r1, #128	; 0x80
 8012646:	0249      	lsls	r1, r1, #9
 8012648:	4329      	orrs	r1, r5
 801264a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801264c:	6a19      	ldr	r1, [r3, #32]
 801264e:	4d14      	ldr	r5, [pc, #80]	; (80126a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012650:	4029      	ands	r1, r5
 8012652:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012654:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012656:	0783      	lsls	r3, r0, #30
 8012658:	d407      	bmi.n	801266a <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801265a:	4a0c      	ldr	r2, [pc, #48]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801265c:	6a13      	ldr	r3, [r2, #32]
 801265e:	490f      	ldr	r1, [pc, #60]	; (801269c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012660:	400b      	ands	r3, r1
 8012662:	6861      	ldr	r1, [r4, #4]
 8012664:	430b      	orrs	r3, r1
 8012666:	6213      	str	r3, [r2, #32]
 8012668:	e790      	b.n	801258c <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801266a:	f7fd fe93 	bl	8010394 <HAL_GetTick>
 801266e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012670:	4e06      	ldr	r6, [pc, #24]	; (801268c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012672:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012674:	4f0b      	ldr	r7, [pc, #44]	; (80126a4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012676:	6a33      	ldr	r3, [r6, #32]
 8012678:	421d      	tst	r5, r3
 801267a:	d1ee      	bne.n	801265a <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801267c:	f7fd fe8a 	bl	8010394 <HAL_GetTick>
 8012680:	4643      	mov	r3, r8
 8012682:	1ac0      	subs	r0, r0, r3
 8012684:	42b8      	cmp	r0, r7
 8012686:	d9f6      	bls.n	8012676 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012688:	2003      	movs	r0, #3
 801268a:	e7b2      	b.n	80125f2 <HAL_RCCEx_PeriphCLKConfig+0x86>
 801268c:	40021000 	.word	0x40021000
 8012690:	fffcffff 	.word	0xfffcffff
 8012694:	fff3ffff 	.word	0xfff3ffff
 8012698:	40007000 	.word	0x40007000
 801269c:	fffffcff 	.word	0xfffffcff
 80126a0:	fffeffff 	.word	0xfffeffff
 80126a4:	00001388 	.word	0x00001388

080126a8 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80126a8:	4770      	bx	lr

080126aa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80126aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ac:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80126ae:	6802      	ldr	r2, [r0, #0]
 80126b0:	68d3      	ldr	r3, [r2, #12]
 80126b2:	21a0      	movs	r1, #160	; 0xa0
 80126b4:	438b      	bics	r3, r1
 80126b6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80126b8:	f7fd fe6c 	bl	8010394 <HAL_GetTick>
 80126bc:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80126be:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80126c0:	26fa      	movs	r6, #250	; 0xfa
 80126c2:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80126c4:	6823      	ldr	r3, [r4, #0]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	421d      	tst	r5, r3
 80126ca:	d106      	bne.n	80126da <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80126cc:	f7fd fe62 	bl	8010394 <HAL_GetTick>
 80126d0:	1bc0      	subs	r0, r0, r7
 80126d2:	42b0      	cmp	r0, r6
 80126d4:	d9f6      	bls.n	80126c4 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80126d6:	2003      	movs	r0, #3
 80126d8:	e000      	b.n	80126dc <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80126da:	2000      	movs	r0, #0
}
 80126dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080126de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80126de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80126e2:	6803      	ldr	r3, [r0, #0]
 80126e4:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80126e6:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80126e8:	0652      	lsls	r2, r2, #25
 80126ea:	d500      	bpl.n	80126ee <RTC_EnterInitMode+0x10>
}
 80126ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80126ee:	2201      	movs	r2, #1
 80126f0:	4252      	negs	r2, r2
 80126f2:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80126f4:	f7fd fe4e 	bl	8010394 <HAL_GetTick>
 80126f8:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80126fa:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80126fc:	26fa      	movs	r6, #250	; 0xfa
 80126fe:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	421d      	tst	r5, r3
 8012706:	d106      	bne.n	8012716 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012708:	f7fd fe44 	bl	8010394 <HAL_GetTick>
 801270c:	1bc0      	subs	r0, r0, r7
 801270e:	42b0      	cmp	r0, r6
 8012710:	d9f6      	bls.n	8012700 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012712:	2003      	movs	r0, #3
 8012714:	e7ea      	b.n	80126ec <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012716:	2000      	movs	r0, #0
 8012718:	e7e8      	b.n	80126ec <RTC_EnterInitMode+0xe>
	...

0801271c <HAL_RTC_Init>:
{
 801271c:	b570      	push	{r4, r5, r6, lr}
 801271e:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012720:	d046      	beq.n	80127b0 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012722:	7f43      	ldrb	r3, [r0, #29]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d038      	beq.n	801279a <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012728:	2302      	movs	r3, #2
 801272a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	22ca      	movs	r2, #202	; 0xca
 8012730:	625a      	str	r2, [r3, #36]	; 0x24
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	3a77      	subs	r2, #119	; 0x77
 8012736:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012738:	0020      	movs	r0, r4
 801273a:	f7ff ffd0 	bl	80126de <RTC_EnterInitMode>
 801273e:	2800      	cmp	r0, #0
 8012740:	d12f      	bne.n	80127a2 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012742:	6822      	ldr	r2, [r4, #0]
 8012744:	6893      	ldr	r3, [r2, #8]
 8012746:	491b      	ldr	r1, [pc, #108]	; (80127b4 <HAL_RTC_Init+0x98>)
 8012748:	400b      	ands	r3, r1
 801274a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801274c:	6822      	ldr	r2, [r4, #0]
 801274e:	6891      	ldr	r1, [r2, #8]
 8012750:	6863      	ldr	r3, [r4, #4]
 8012752:	6925      	ldr	r5, [r4, #16]
 8012754:	432b      	orrs	r3, r5
 8012756:	6965      	ldr	r5, [r4, #20]
 8012758:	432b      	orrs	r3, r5
 801275a:	430b      	orrs	r3, r1
 801275c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	68e2      	ldr	r2, [r4, #12]
 8012762:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012764:	6822      	ldr	r2, [r4, #0]
 8012766:	6911      	ldr	r1, [r2, #16]
 8012768:	68a3      	ldr	r3, [r4, #8]
 801276a:	041b      	lsls	r3, r3, #16
 801276c:	430b      	orrs	r3, r1
 801276e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012770:	6822      	ldr	r2, [r4, #0]
 8012772:	68d3      	ldr	r3, [r2, #12]
 8012774:	2180      	movs	r1, #128	; 0x80
 8012776:	438b      	bics	r3, r1
 8012778:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801277a:	6822      	ldr	r2, [r4, #0]
 801277c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801277e:	490e      	ldr	r1, [pc, #56]	; (80127b8 <HAL_RTC_Init+0x9c>)
 8012780:	400b      	ands	r3, r1
 8012782:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012784:	6822      	ldr	r2, [r4, #0]
 8012786:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012788:	69a1      	ldr	r1, [r4, #24]
 801278a:	430b      	orrs	r3, r1
 801278c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	22ff      	movs	r2, #255	; 0xff
 8012792:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012794:	2301      	movs	r3, #1
 8012796:	7763      	strb	r3, [r4, #29]
}
 8012798:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 801279a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801279c:	f7ff ff84 	bl	80126a8 <HAL_RTC_MspInit>
 80127a0:	e7c2      	b.n	8012728 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80127a2:	6823      	ldr	r3, [r4, #0]
 80127a4:	22ff      	movs	r2, #255	; 0xff
 80127a6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80127a8:	2304      	movs	r3, #4
 80127aa:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80127ac:	2001      	movs	r0, #1
 80127ae:	e7f3      	b.n	8012798 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80127b0:	2001      	movs	r0, #1
 80127b2:	e7f1      	b.n	8012798 <HAL_RTC_Init+0x7c>
 80127b4:	ff8fffbf 	.word	0xff8fffbf
 80127b8:	fffbffff 	.word	0xfffbffff

080127bc <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80127bc:	2809      	cmp	r0, #9
 80127be:	d909      	bls.n	80127d4 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80127c0:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80127c2:	3301      	adds	r3, #1
    Value -= 10;
 80127c4:	380a      	subs	r0, #10
 80127c6:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80127c8:	2809      	cmp	r0, #9
 80127ca:	d8fa      	bhi.n	80127c2 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80127cc:	011b      	lsls	r3, r3, #4
 80127ce:	4318      	orrs	r0, r3
 80127d0:	b2c0      	uxtb	r0, r0
}
 80127d2:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80127d4:	2300      	movs	r3, #0
 80127d6:	e7f9      	b.n	80127cc <RTC_ByteToBcd2+0x10>

080127d8 <HAL_RTC_SetTime>:
{
 80127d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127da:	46c6      	mov	lr, r8
 80127dc:	b500      	push	{lr}
 80127de:	0004      	movs	r4, r0
 80127e0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80127e2:	7f03      	ldrb	r3, [r0, #28]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d100      	bne.n	80127ea <HAL_RTC_SetTime+0x12>
 80127e8:	e075      	b.n	80128d6 <HAL_RTC_SetTime+0xfe>
 80127ea:	2301      	movs	r3, #1
 80127ec:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80127ee:	3301      	adds	r3, #1
 80127f0:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80127f2:	2a00      	cmp	r2, #0
 80127f4:	d144      	bne.n	8012880 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80127f6:	6803      	ldr	r3, [r0, #0]
 80127f8:	689b      	ldr	r3, [r3, #8]
 80127fa:	065b      	lsls	r3, r3, #25
 80127fc:	d401      	bmi.n	8012802 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 80127fe:	2300      	movs	r3, #0
 8012800:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012802:	7830      	ldrb	r0, [r6, #0]
 8012804:	f7ff ffda 	bl	80127bc <RTC_ByteToBcd2>
 8012808:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801280a:	7870      	ldrb	r0, [r6, #1]
 801280c:	f7ff ffd6 	bl	80127bc <RTC_ByteToBcd2>
 8012810:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012812:	78b0      	ldrb	r0, [r6, #2]
 8012814:	f7ff ffd2 	bl	80127bc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012818:	7a35      	ldrb	r5, [r6, #8]
 801281a:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801281c:	4305      	orrs	r5, r0
 801281e:	4643      	mov	r3, r8
 8012820:	0418      	lsls	r0, r3, #16
 8012822:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012824:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012826:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012828:	6823      	ldr	r3, [r4, #0]
 801282a:	22ca      	movs	r2, #202	; 0xca
 801282c:	625a      	str	r2, [r3, #36]	; 0x24
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	3a77      	subs	r2, #119	; 0x77
 8012832:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012834:	0020      	movs	r0, r4
 8012836:	f7ff ff52 	bl	80126de <RTC_EnterInitMode>
 801283a:	1e07      	subs	r7, r0, #0
 801283c:	d131      	bne.n	80128a2 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801283e:	6823      	ldr	r3, [r4, #0]
 8012840:	4826      	ldr	r0, [pc, #152]	; (80128dc <HAL_RTC_SetTime+0x104>)
 8012842:	4005      	ands	r5, r0
 8012844:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012846:	6822      	ldr	r2, [r4, #0]
 8012848:	6893      	ldr	r3, [r2, #8]
 801284a:	4925      	ldr	r1, [pc, #148]	; (80128e0 <HAL_RTC_SetTime+0x108>)
 801284c:	400b      	ands	r3, r1
 801284e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012850:	6822      	ldr	r2, [r4, #0]
 8012852:	6891      	ldr	r1, [r2, #8]
 8012854:	68f3      	ldr	r3, [r6, #12]
 8012856:	6930      	ldr	r0, [r6, #16]
 8012858:	4303      	orrs	r3, r0
 801285a:	430b      	orrs	r3, r1
 801285c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801285e:	6822      	ldr	r2, [r4, #0]
 8012860:	68d3      	ldr	r3, [r2, #12]
 8012862:	2180      	movs	r1, #128	; 0x80
 8012864:	438b      	bics	r3, r1
 8012866:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012868:	6823      	ldr	r3, [r4, #0]
 801286a:	689b      	ldr	r3, [r3, #8]
 801286c:	069b      	lsls	r3, r3, #26
 801286e:	d524      	bpl.n	80128ba <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012870:	6823      	ldr	r3, [r4, #0]
 8012872:	22ff      	movs	r2, #255	; 0xff
 8012874:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012876:	2301      	movs	r3, #1
 8012878:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 801287a:	2300      	movs	r3, #0
 801287c:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801287e:	e018      	b.n	80128b2 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012880:	6803      	ldr	r3, [r0, #0]
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	065b      	lsls	r3, r3, #25
 8012886:	d401      	bmi.n	801288c <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012888:	2300      	movs	r3, #0
 801288a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801288c:	7835      	ldrb	r5, [r6, #0]
 801288e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012890:	7870      	ldrb	r0, [r6, #1]
 8012892:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012894:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012896:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012898:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 801289a:	7a30      	ldrb	r0, [r6, #8]
 801289c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801289e:	4305      	orrs	r5, r0
 80128a0:	e7c2      	b.n	8012828 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80128a2:	6823      	ldr	r3, [r4, #0]
 80128a4:	22ff      	movs	r2, #255	; 0xff
 80128a6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80128a8:	2304      	movs	r3, #4
 80128aa:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80128ac:	2300      	movs	r3, #0
 80128ae:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80128b0:	2701      	movs	r7, #1
}
 80128b2:	0038      	movs	r0, r7
 80128b4:	bc04      	pop	{r2}
 80128b6:	4690      	mov	r8, r2
 80128b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80128ba:	0020      	movs	r0, r4
 80128bc:	f7ff fef5 	bl	80126aa <HAL_RTC_WaitForSynchro>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d0d5      	beq.n	8012870 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	22ff      	movs	r2, #255	; 0xff
 80128c8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80128ca:	2304      	movs	r3, #4
 80128cc:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80128ce:	2300      	movs	r3, #0
 80128d0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80128d2:	2701      	movs	r7, #1
 80128d4:	e7ed      	b.n	80128b2 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80128d6:	2702      	movs	r7, #2
 80128d8:	e7eb      	b.n	80128b2 <HAL_RTC_SetTime+0xda>
 80128da:	46c0      	nop			; (mov r8, r8)
 80128dc:	007f7f7f 	.word	0x007f7f7f
 80128e0:	fffbffff 	.word	0xfffbffff

080128e4 <HAL_RTC_SetDate>:
{
 80128e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128e6:	46c6      	mov	lr, r8
 80128e8:	b500      	push	{lr}
 80128ea:	0004      	movs	r4, r0
 80128ec:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80128ee:	7f03      	ldrb	r3, [r0, #28]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d03a      	beq.n	801296a <HAL_RTC_SetDate+0x86>
 80128f4:	2301      	movs	r3, #1
 80128f6:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80128f8:	3301      	adds	r3, #1
 80128fa:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80128fc:	2a00      	cmp	r2, #0
 80128fe:	d136      	bne.n	801296e <HAL_RTC_SetDate+0x8a>
 8012900:	784b      	ldrb	r3, [r1, #1]
 8012902:	06da      	lsls	r2, r3, #27
 8012904:	d503      	bpl.n	801290e <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012906:	2210      	movs	r2, #16
 8012908:	4393      	bics	r3, r2
 801290a:	330a      	adds	r3, #10
 801290c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801290e:	78f0      	ldrb	r0, [r6, #3]
 8012910:	f7ff ff54 	bl	80127bc <RTC_ByteToBcd2>
 8012914:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012916:	7870      	ldrb	r0, [r6, #1]
 8012918:	f7ff ff50 	bl	80127bc <RTC_ByteToBcd2>
 801291c:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801291e:	78b0      	ldrb	r0, [r6, #2]
 8012920:	f7ff ff4c 	bl	80127bc <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012924:	7835      	ldrb	r5, [r6, #0]
 8012926:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012928:	4305      	orrs	r5, r0
 801292a:	4643      	mov	r3, r8
 801292c:	0418      	lsls	r0, r3, #16
 801292e:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012930:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012932:	433d      	orrs	r5, r7
 8012934:	e025      	b.n	8012982 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012936:	6823      	ldr	r3, [r4, #0]
 8012938:	22ff      	movs	r2, #255	; 0xff
 801293a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801293c:	2304      	movs	r3, #4
 801293e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012940:	2300      	movs	r3, #0
 8012942:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012944:	2601      	movs	r6, #1
}
 8012946:	0030      	movs	r0, r6
 8012948:	bc04      	pop	{r2}
 801294a:	4690      	mov	r8, r2
 801294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801294e:	0020      	movs	r0, r4
 8012950:	f7ff feab 	bl	80126aa <HAL_RTC_WaitForSynchro>
 8012954:	2800      	cmp	r0, #0
 8012956:	d02c      	beq.n	80129b2 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012958:	6823      	ldr	r3, [r4, #0]
 801295a:	22ff      	movs	r2, #255	; 0xff
 801295c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801295e:	2304      	movs	r3, #4
 8012960:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012962:	2300      	movs	r3, #0
 8012964:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012966:	2601      	movs	r6, #1
 8012968:	e7ed      	b.n	8012946 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 801296a:	2602      	movs	r6, #2
 801296c:	e7eb      	b.n	8012946 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801296e:	78cd      	ldrb	r5, [r1, #3]
 8012970:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012972:	7848      	ldrb	r0, [r1, #1]
 8012974:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012976:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012978:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 801297a:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 801297c:	7808      	ldrb	r0, [r1, #0]
 801297e:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012980:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	22ca      	movs	r2, #202	; 0xca
 8012986:	625a      	str	r2, [r3, #36]	; 0x24
 8012988:	6823      	ldr	r3, [r4, #0]
 801298a:	3a77      	subs	r2, #119	; 0x77
 801298c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801298e:	0020      	movs	r0, r4
 8012990:	f7ff fea5 	bl	80126de <RTC_EnterInitMode>
 8012994:	1e06      	subs	r6, r0, #0
 8012996:	d1ce      	bne.n	8012936 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012998:	6823      	ldr	r3, [r4, #0]
 801299a:	480a      	ldr	r0, [pc, #40]	; (80129c4 <HAL_RTC_SetDate+0xe0>)
 801299c:	4005      	ands	r5, r0
 801299e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80129a0:	6822      	ldr	r2, [r4, #0]
 80129a2:	68d3      	ldr	r3, [r2, #12]
 80129a4:	2180      	movs	r1, #128	; 0x80
 80129a6:	438b      	bics	r3, r1
 80129a8:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80129aa:	6823      	ldr	r3, [r4, #0]
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	069b      	lsls	r3, r3, #26
 80129b0:	d5cd      	bpl.n	801294e <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80129b2:	6823      	ldr	r3, [r4, #0]
 80129b4:	22ff      	movs	r2, #255	; 0xff
 80129b6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80129b8:	2301      	movs	r3, #1
 80129ba:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80129bc:	2300      	movs	r3, #0
 80129be:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80129c0:	e7c1      	b.n	8012946 <HAL_RTC_SetDate+0x62>
 80129c2:	46c0      	nop			; (mov r8, r8)
 80129c4:	00ffff3f 	.word	0x00ffff3f

080129c8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80129c8:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80129ca:	0900      	lsrs	r0, r0, #4
 80129cc:	0083      	lsls	r3, r0, #2
 80129ce:	181b      	adds	r3, r3, r0
 80129d0:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80129d2:	200f      	movs	r0, #15
 80129d4:	4010      	ands	r0, r2
 80129d6:	1818      	adds	r0, r3, r0
 80129d8:	b2c0      	uxtb	r0, r0
}
 80129da:	4770      	bx	lr

080129dc <HAL_RTC_GetTime>:
{
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80129e0:	6803      	ldr	r3, [r0, #0]
 80129e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129e4:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80129e6:	6803      	ldr	r3, [r0, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	490e      	ldr	r1, [pc, #56]	; (8012a24 <HAL_RTC_GetTime+0x48>)
 80129ec:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80129ee:	0c19      	lsrs	r1, r3, #16
 80129f0:	203f      	movs	r0, #63	; 0x3f
 80129f2:	4008      	ands	r0, r1
 80129f4:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80129f6:	0a1e      	lsrs	r6, r3, #8
 80129f8:	b2f6      	uxtb	r6, r6
 80129fa:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80129fc:	b2dc      	uxtb	r4, r3
 80129fe:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012a00:	2340      	movs	r3, #64	; 0x40
 8012a02:	400b      	ands	r3, r1
 8012a04:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012a06:	2a00      	cmp	r2, #0
 8012a08:	d10a      	bne.n	8012a20 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012a0a:	f7ff ffdd 	bl	80129c8 <RTC_Bcd2ToByte>
 8012a0e:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012a10:	0030      	movs	r0, r6
 8012a12:	f7ff ffd9 	bl	80129c8 <RTC_Bcd2ToByte>
 8012a16:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012a18:	0020      	movs	r0, r4
 8012a1a:	f7ff ffd5 	bl	80129c8 <RTC_Bcd2ToByte>
 8012a1e:	70a8      	strb	r0, [r5, #2]
}
 8012a20:	2000      	movs	r0, #0
 8012a22:	bd70      	pop	{r4, r5, r6, pc}
 8012a24:	007f7f7f 	.word	0x007f7f7f

08012a28 <HAL_RTC_GetDate>:
{
 8012a28:	b570      	push	{r4, r5, r6, lr}
 8012a2a:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012a2c:	6803      	ldr	r3, [r0, #0]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	490d      	ldr	r1, [pc, #52]	; (8012a68 <HAL_RTC_GetDate+0x40>)
 8012a32:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012a34:	0c18      	lsrs	r0, r3, #16
 8012a36:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012a38:	04dd      	lsls	r5, r3, #19
 8012a3a:	0eed      	lsrs	r5, r5, #27
 8012a3c:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012a3e:	b2de      	uxtb	r6, r3
 8012a40:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012a42:	041b      	lsls	r3, r3, #16
 8012a44:	0f5b      	lsrs	r3, r3, #29
 8012a46:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012a48:	2a00      	cmp	r2, #0
 8012a4a:	d10a      	bne.n	8012a62 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012a4c:	f7ff ffbc 	bl	80129c8 <RTC_Bcd2ToByte>
 8012a50:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012a52:	0028      	movs	r0, r5
 8012a54:	f7ff ffb8 	bl	80129c8 <RTC_Bcd2ToByte>
 8012a58:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012a5a:	0030      	movs	r0, r6
 8012a5c:	f7ff ffb4 	bl	80129c8 <RTC_Bcd2ToByte>
 8012a60:	70a0      	strb	r0, [r4, #2]
}
 8012a62:	2000      	movs	r0, #0
 8012a64:	bd70      	pop	{r4, r5, r6, pc}
 8012a66:	46c0      	nop			; (mov r8, r8)
 8012a68:	00ffff3f 	.word	0x00ffff3f

08012a6c <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012a6c:	6803      	ldr	r3, [r0, #0]
 8012a6e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012a70:	0089      	lsls	r1, r1, #2
 8012a72:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012a74:	600a      	str	r2, [r1, #0]
}
 8012a76:	4770      	bx	lr

08012a78 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012a78:	6803      	ldr	r3, [r0, #0]
 8012a7a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012a7c:	0089      	lsls	r1, r1, #2
 8012a7e:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012a80:	6808      	ldr	r0, [r1, #0]
}
 8012a82:	4770      	bx	lr

08012a84 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012a84:	4770      	bx	lr

08012a86 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012a86:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012a88:	2239      	movs	r2, #57	; 0x39
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012a8e:	6804      	ldr	r4, [r0, #0]
 8012a90:	6823      	ldr	r3, [r4, #0]
 8012a92:	2101      	movs	r1, #1
 8012a94:	430b      	orrs	r3, r1
 8012a96:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012a98:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012a9a:	2000      	movs	r0, #0
 8012a9c:	bd10      	pop	{r4, pc}
	...

08012aa0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012aa0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012aa2:	4a36      	ldr	r2, [pc, #216]	; (8012b7c <TIM_Base_SetConfig+0xdc>)
 8012aa4:	4290      	cmp	r0, r2
 8012aa6:	d022      	beq.n	8012aee <TIM_Base_SetConfig+0x4e>
 8012aa8:	2280      	movs	r2, #128	; 0x80
 8012aaa:	05d2      	lsls	r2, r2, #23
 8012aac:	4290      	cmp	r0, r2
 8012aae:	d014      	beq.n	8012ada <TIM_Base_SetConfig+0x3a>
 8012ab0:	4a33      	ldr	r2, [pc, #204]	; (8012b80 <TIM_Base_SetConfig+0xe0>)
 8012ab2:	4290      	cmp	r0, r2
 8012ab4:	d016      	beq.n	8012ae4 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012ab6:	4a33      	ldr	r2, [pc, #204]	; (8012b84 <TIM_Base_SetConfig+0xe4>)
 8012ab8:	4290      	cmp	r0, r2
 8012aba:	d040      	beq.n	8012b3e <TIM_Base_SetConfig+0x9e>
 8012abc:	4a32      	ldr	r2, [pc, #200]	; (8012b88 <TIM_Base_SetConfig+0xe8>)
 8012abe:	4290      	cmp	r0, r2
 8012ac0:	d047      	beq.n	8012b52 <TIM_Base_SetConfig+0xb2>
 8012ac2:	4a32      	ldr	r2, [pc, #200]	; (8012b8c <TIM_Base_SetConfig+0xec>)
 8012ac4:	4290      	cmp	r0, r2
 8012ac6:	d04e      	beq.n	8012b66 <TIM_Base_SetConfig+0xc6>
 8012ac8:	4a31      	ldr	r2, [pc, #196]	; (8012b90 <TIM_Base_SetConfig+0xf0>)
 8012aca:	4290      	cmp	r0, r2
 8012acc:	d02d      	beq.n	8012b2a <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012ace:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ad0:	688b      	ldr	r3, [r1, #8]
 8012ad2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012ad4:	680b      	ldr	r3, [r1, #0]
 8012ad6:	6283      	str	r3, [r0, #40]	; 0x28
 8012ad8:	e024      	b.n	8012b24 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ada:	2270      	movs	r2, #112	; 0x70
 8012adc:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012ade:	684a      	ldr	r2, [r1, #4]
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	e008      	b.n	8012af6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ae4:	2270      	movs	r2, #112	; 0x70
 8012ae6:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012ae8:	684a      	ldr	r2, [r1, #4]
 8012aea:	4313      	orrs	r3, r2
 8012aec:	e003      	b.n	8012af6 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012aee:	2270      	movs	r2, #112	; 0x70
 8012af0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012af2:	684a      	ldr	r2, [r1, #4]
 8012af4:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012af6:	4a27      	ldr	r2, [pc, #156]	; (8012b94 <TIM_Base_SetConfig+0xf4>)
 8012af8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012afa:	68ca      	ldr	r2, [r1, #12]
 8012afc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012afe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b00:	688b      	ldr	r3, [r1, #8]
 8012b02:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012b04:	680b      	ldr	r3, [r1, #0]
 8012b06:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012b08:	4b1c      	ldr	r3, [pc, #112]	; (8012b7c <TIM_Base_SetConfig+0xdc>)
 8012b0a:	4298      	cmp	r0, r3
 8012b0c:	d008      	beq.n	8012b20 <TIM_Base_SetConfig+0x80>
 8012b0e:	4b1e      	ldr	r3, [pc, #120]	; (8012b88 <TIM_Base_SetConfig+0xe8>)
 8012b10:	4298      	cmp	r0, r3
 8012b12:	d005      	beq.n	8012b20 <TIM_Base_SetConfig+0x80>
 8012b14:	4b1d      	ldr	r3, [pc, #116]	; (8012b8c <TIM_Base_SetConfig+0xec>)
 8012b16:	4298      	cmp	r0, r3
 8012b18:	d002      	beq.n	8012b20 <TIM_Base_SetConfig+0x80>
 8012b1a:	4b1d      	ldr	r3, [pc, #116]	; (8012b90 <TIM_Base_SetConfig+0xf0>)
 8012b1c:	4298      	cmp	r0, r3
 8012b1e:	d101      	bne.n	8012b24 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012b20:	690b      	ldr	r3, [r1, #16]
 8012b22:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012b24:	2301      	movs	r3, #1
 8012b26:	6143      	str	r3, [r0, #20]
}
 8012b28:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b2a:	4a1a      	ldr	r2, [pc, #104]	; (8012b94 <TIM_Base_SetConfig+0xf4>)
 8012b2c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b2e:	68ca      	ldr	r2, [r1, #12]
 8012b30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012b32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b34:	688b      	ldr	r3, [r1, #8]
 8012b36:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012b38:	680b      	ldr	r3, [r1, #0]
 8012b3a:	6283      	str	r3, [r0, #40]	; 0x28
 8012b3c:	e7f0      	b.n	8012b20 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b3e:	4a15      	ldr	r2, [pc, #84]	; (8012b94 <TIM_Base_SetConfig+0xf4>)
 8012b40:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b42:	68ca      	ldr	r2, [r1, #12]
 8012b44:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012b46:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b48:	688b      	ldr	r3, [r1, #8]
 8012b4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012b4c:	680b      	ldr	r3, [r1, #0]
 8012b4e:	6283      	str	r3, [r0, #40]	; 0x28
 8012b50:	e7e8      	b.n	8012b24 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b52:	4a10      	ldr	r2, [pc, #64]	; (8012b94 <TIM_Base_SetConfig+0xf4>)
 8012b54:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b56:	68ca      	ldr	r2, [r1, #12]
 8012b58:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012b5a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b5c:	688b      	ldr	r3, [r1, #8]
 8012b5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012b60:	680b      	ldr	r3, [r1, #0]
 8012b62:	6283      	str	r3, [r0, #40]	; 0x28
 8012b64:	e7dc      	b.n	8012b20 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012b66:	4a0b      	ldr	r2, [pc, #44]	; (8012b94 <TIM_Base_SetConfig+0xf4>)
 8012b68:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012b6a:	68ca      	ldr	r2, [r1, #12]
 8012b6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012b6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012b70:	688b      	ldr	r3, [r1, #8]
 8012b72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012b74:	680b      	ldr	r3, [r1, #0]
 8012b76:	6283      	str	r3, [r0, #40]	; 0x28
 8012b78:	e7d2      	b.n	8012b20 <TIM_Base_SetConfig+0x80>
 8012b7a:	46c0      	nop			; (mov r8, r8)
 8012b7c:	40012c00 	.word	0x40012c00
 8012b80:	40000400 	.word	0x40000400
 8012b84:	40002000 	.word	0x40002000
 8012b88:	40014000 	.word	0x40014000
 8012b8c:	40014400 	.word	0x40014400
 8012b90:	40014800 	.word	0x40014800
 8012b94:	fffffcff 	.word	0xfffffcff

08012b98 <HAL_TIM_Base_Init>:
{
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012b9c:	d014      	beq.n	8012bc8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012b9e:	2339      	movs	r3, #57	; 0x39
 8012ba0:	5cc3      	ldrb	r3, [r0, r3]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00a      	beq.n	8012bbc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012ba6:	2539      	movs	r5, #57	; 0x39
 8012ba8:	2302      	movs	r3, #2
 8012baa:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012bac:	1d21      	adds	r1, r4, #4
 8012bae:	6820      	ldr	r0, [r4, #0]
 8012bb0:	f7ff ff76 	bl	8012aa0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012bb8:	2000      	movs	r0, #0
}
 8012bba:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012bbc:	3338      	adds	r3, #56	; 0x38
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012bc2:	f7ff ff5f 	bl	8012a84 <HAL_TIM_Base_MspInit>
 8012bc6:	e7ee      	b.n	8012ba6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012bc8:	2001      	movs	r0, #1
 8012bca:	e7f6      	b.n	8012bba <HAL_TIM_Base_Init+0x22>

08012bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012bce:	2338      	movs	r3, #56	; 0x38
 8012bd0:	5cc3      	ldrb	r3, [r0, r3]
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d01e      	beq.n	8012c14 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012bd6:	2238      	movs	r2, #56	; 0x38
 8012bd8:	2501      	movs	r5, #1
 8012bda:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012bdc:	2439      	movs	r4, #57	; 0x39
 8012bde:	2302      	movs	r3, #2
 8012be0:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012be2:	6806      	ldr	r6, [r0, #0]
 8012be4:	6873      	ldr	r3, [r6, #4]
 8012be6:	2770      	movs	r7, #112	; 0x70
 8012be8:	43bb      	bics	r3, r7
 8012bea:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012bec:	6806      	ldr	r6, [r0, #0]
 8012bee:	6873      	ldr	r3, [r6, #4]
 8012bf0:	680f      	ldr	r7, [r1, #0]
 8012bf2:	433b      	orrs	r3, r7
 8012bf4:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012bf6:	6806      	ldr	r6, [r0, #0]
 8012bf8:	68b3      	ldr	r3, [r6, #8]
 8012bfa:	2780      	movs	r7, #128	; 0x80
 8012bfc:	43bb      	bics	r3, r7
 8012bfe:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012c00:	6806      	ldr	r6, [r0, #0]
 8012c02:	68b3      	ldr	r3, [r6, #8]
 8012c04:	6849      	ldr	r1, [r1, #4]
 8012c06:	430b      	orrs	r3, r1
 8012c08:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012c0a:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012c10:	2000      	movs	r0, #0
}
 8012c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012c14:	2002      	movs	r0, #2
 8012c16:	e7fc      	b.n	8012c12 <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012c18 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012c18:	4770      	bx	lr

08012c1a <HAL_UART_DeInit>:
{
 8012c1a:	b570      	push	{r4, r5, r6, lr}
 8012c1c:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012c1e:	2001      	movs	r0, #1
  if(huart == NULL)
 8012c20:	2c00      	cmp	r4, #0
 8012c22:	d016      	beq.n	8012c52 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012c24:	2669      	movs	r6, #105	; 0x69
 8012c26:	2302      	movs	r3, #2
 8012c28:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012c2a:	6822      	ldr	r2, [r4, #0]
 8012c2c:	6813      	ldr	r3, [r2, #0]
 8012c2e:	2101      	movs	r1, #1
 8012c30:	438b      	bics	r3, r1
 8012c32:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012c34:	6823      	ldr	r3, [r4, #0]
 8012c36:	2500      	movs	r5, #0
 8012c38:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012c3a:	6823      	ldr	r3, [r4, #0]
 8012c3c:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012c42:	0020      	movs	r0, r4
 8012c44:	f7ff ffe8 	bl	8012c18 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c48:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012c4a:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012c4c:	2368      	movs	r3, #104	; 0x68
 8012c4e:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012c50:	2000      	movs	r0, #0
}
 8012c52:	bd70      	pop	{r4, r5, r6, pc}

08012c54 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012c54:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012c56:	2369      	movs	r3, #105	; 0x69
 8012c58:	5cc3      	ldrb	r3, [r0, r3]
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d004      	beq.n	8012c68 <HAL_UART_Transmit_IT+0x14>
 8012c5e:	2369      	movs	r3, #105	; 0x69
 8012c60:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012c62:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012c64:	2c22      	cmp	r4, #34	; 0x22
 8012c66:	d127      	bne.n	8012cb8 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8012c68:	2900      	cmp	r1, #0
 8012c6a:	d02b      	beq.n	8012cc4 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8012c6c:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	d022      	beq.n	8012cb8 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012c72:	3367      	adds	r3, #103	; 0x67
 8012c74:	5cc3      	ldrb	r3, [r0, r3]
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d026      	beq.n	8012cc8 <HAL_UART_Transmit_IT+0x74>
 8012c7a:	2368      	movs	r3, #104	; 0x68
 8012c7c:	2401      	movs	r4, #1
 8012c7e:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012c80:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012c82:	3b18      	subs	r3, #24
 8012c84:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012c86:	3302      	adds	r3, #2
 8012c88:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012c8e:	3369      	adds	r3, #105	; 0x69
 8012c90:	5cc3      	ldrb	r3, [r0, r3]
 8012c92:	2b22      	cmp	r3, #34	; 0x22
 8012c94:	d012      	beq.n	8012cbc <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012c96:	2369      	movs	r3, #105	; 0x69
 8012c98:	2212      	movs	r2, #18
 8012c9a:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012c9c:	6802      	ldr	r2, [r0, #0]
 8012c9e:	6893      	ldr	r3, [r2, #8]
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	430b      	orrs	r3, r1
 8012ca4:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012ca6:	2368      	movs	r3, #104	; 0x68
 8012ca8:	2200      	movs	r2, #0
 8012caa:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012cac:	6802      	ldr	r2, [r0, #0]
 8012cae:	6813      	ldr	r3, [r2, #0]
 8012cb0:	317f      	adds	r1, #127	; 0x7f
 8012cb2:	430b      	orrs	r3, r1
 8012cb4:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012cb6:	2300      	movs	r3, #0
  }
}
 8012cb8:	0018      	movs	r0, r3
 8012cba:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012cbc:	3347      	adds	r3, #71	; 0x47
 8012cbe:	2232      	movs	r2, #50	; 0x32
 8012cc0:	54c2      	strb	r2, [r0, r3]
 8012cc2:	e7eb      	b.n	8012c9c <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	e7f7      	b.n	8012cb8 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012cc8:	2302      	movs	r3, #2
 8012cca:	e7f5      	b.n	8012cb8 <HAL_UART_Transmit_IT+0x64>

08012ccc <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ccc:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012cce:	2369      	movs	r3, #105	; 0x69
 8012cd0:	5cc3      	ldrb	r3, [r0, r3]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d004      	beq.n	8012ce0 <HAL_UART_Receive_IT+0x14>
 8012cd6:	2369      	movs	r3, #105	; 0x69
 8012cd8:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012cda:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012cdc:	2c12      	cmp	r4, #18
 8012cde:	d14e      	bne.n	8012d7e <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8012ce0:	2900      	cmp	r1, #0
 8012ce2:	d05d      	beq.n	8012da0 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8012ce4:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012ce6:	2a00      	cmp	r2, #0
 8012ce8:	d049      	beq.n	8012d7e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012cea:	3367      	adds	r3, #103	; 0x67
 8012cec:	5cc3      	ldrb	r3, [r0, r3]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d058      	beq.n	8012da4 <HAL_UART_Receive_IT+0xd8>
 8012cf2:	2368      	movs	r3, #104	; 0x68
 8012cf4:	2401      	movs	r4, #1
 8012cf6:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8012cf8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8012cfa:	3b10      	subs	r3, #16
 8012cfc:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012cfe:	3302      	adds	r3, #2
 8012d00:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8012d02:	6883      	ldr	r3, [r0, #8]
 8012d04:	2280      	movs	r2, #128	; 0x80
 8012d06:	0152      	lsls	r2, r2, #5
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	d008      	beq.n	8012d1e <HAL_UART_Receive_IT+0x52>
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d115      	bne.n	8012d3c <HAL_UART_Receive_IT+0x70>
 8012d10:	6903      	ldr	r3, [r0, #16]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10e      	bne.n	8012d34 <HAL_UART_Receive_IT+0x68>
 8012d16:	335c      	adds	r3, #92	; 0x5c
 8012d18:	22ff      	movs	r2, #255	; 0xff
 8012d1a:	52c2      	strh	r2, [r0, r3]
 8012d1c:	e012      	b.n	8012d44 <HAL_UART_Receive_IT+0x78>
 8012d1e:	6903      	ldr	r3, [r0, #16]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d103      	bne.n	8012d2c <HAL_UART_Receive_IT+0x60>
 8012d24:	335c      	adds	r3, #92	; 0x5c
 8012d26:	4a20      	ldr	r2, [pc, #128]	; (8012da8 <HAL_UART_Receive_IT+0xdc>)
 8012d28:	52c2      	strh	r2, [r0, r3]
 8012d2a:	e00b      	b.n	8012d44 <HAL_UART_Receive_IT+0x78>
 8012d2c:	235c      	movs	r3, #92	; 0x5c
 8012d2e:	22ff      	movs	r2, #255	; 0xff
 8012d30:	52c2      	strh	r2, [r0, r3]
 8012d32:	e007      	b.n	8012d44 <HAL_UART_Receive_IT+0x78>
 8012d34:	235c      	movs	r3, #92	; 0x5c
 8012d36:	227f      	movs	r2, #127	; 0x7f
 8012d38:	52c2      	strh	r2, [r0, r3]
 8012d3a:	e003      	b.n	8012d44 <HAL_UART_Receive_IT+0x78>
 8012d3c:	2280      	movs	r2, #128	; 0x80
 8012d3e:	0552      	lsls	r2, r2, #21
 8012d40:	4293      	cmp	r3, r2
 8012d42:	d01e      	beq.n	8012d82 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d44:	2300      	movs	r3, #0
 8012d46:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012d48:	3369      	adds	r3, #105	; 0x69
 8012d4a:	5cc3      	ldrb	r3, [r0, r3]
 8012d4c:	2b12      	cmp	r3, #18
 8012d4e:	d023      	beq.n	8012d98 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012d50:	2369      	movs	r3, #105	; 0x69
 8012d52:	2222      	movs	r2, #34	; 0x22
 8012d54:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8012d56:	6802      	ldr	r2, [r0, #0]
 8012d58:	6811      	ldr	r1, [r2, #0]
 8012d5a:	2380      	movs	r3, #128	; 0x80
 8012d5c:	005b      	lsls	r3, r3, #1
 8012d5e:	430b      	orrs	r3, r1
 8012d60:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012d62:	6802      	ldr	r2, [r0, #0]
 8012d64:	6893      	ldr	r3, [r2, #8]
 8012d66:	2101      	movs	r1, #1
 8012d68:	430b      	orrs	r3, r1
 8012d6a:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012d6c:	2368      	movs	r3, #104	; 0x68
 8012d6e:	2200      	movs	r2, #0
 8012d70:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8012d72:	6802      	ldr	r2, [r0, #0]
 8012d74:	6813      	ldr	r3, [r2, #0]
 8012d76:	311f      	adds	r1, #31
 8012d78:	430b      	orrs	r3, r1
 8012d7a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012d7c:	2300      	movs	r3, #0
  }
}
 8012d7e:	0018      	movs	r0, r3
 8012d80:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8012d82:	6903      	ldr	r3, [r0, #16]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d103      	bne.n	8012d90 <HAL_UART_Receive_IT+0xc4>
 8012d88:	335c      	adds	r3, #92	; 0x5c
 8012d8a:	227f      	movs	r2, #127	; 0x7f
 8012d8c:	52c2      	strh	r2, [r0, r3]
 8012d8e:	e7d9      	b.n	8012d44 <HAL_UART_Receive_IT+0x78>
 8012d90:	235c      	movs	r3, #92	; 0x5c
 8012d92:	223f      	movs	r2, #63	; 0x3f
 8012d94:	52c2      	strh	r2, [r0, r3]
 8012d96:	e7d5      	b.n	8012d44 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012d98:	3357      	adds	r3, #87	; 0x57
 8012d9a:	2232      	movs	r2, #50	; 0x32
 8012d9c:	54c2      	strb	r2, [r0, r3]
 8012d9e:	e7da      	b.n	8012d56 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8012da0:	2301      	movs	r3, #1
 8012da2:	e7ec      	b.n	8012d7e <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012da4:	2302      	movs	r3, #2
 8012da6:	e7ea      	b.n	8012d7e <HAL_UART_Receive_IT+0xb2>
 8012da8:	000001ff 	.word	0x000001ff

08012dac <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012dac:	b510      	push	{r4, lr}
 8012dae:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012db0:	2369      	movs	r3, #105	; 0x69
 8012db2:	5cc3      	ldrb	r3, [r0, r3]
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d004      	beq.n	8012dc2 <HAL_UART_Transmit_DMA+0x16>
 8012db8:	2369      	movs	r3, #105	; 0x69
 8012dba:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012dbc:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012dbe:	2b22      	cmp	r3, #34	; 0x22
 8012dc0:	d134      	bne.n	8012e2c <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8012dc2:	2900      	cmp	r1, #0
 8012dc4:	d037      	beq.n	8012e36 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8012dc6:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012dc8:	2a00      	cmp	r2, #0
 8012dca:	d02f      	beq.n	8012e2c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012dcc:	2368      	movs	r3, #104	; 0x68
 8012dce:	5ce3      	ldrb	r3, [r4, r3]
 8012dd0:	2b01      	cmp	r3, #1
 8012dd2:	d032      	beq.n	8012e3a <HAL_UART_Transmit_DMA+0x8e>
 8012dd4:	2368      	movs	r3, #104	; 0x68
 8012dd6:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8012dd8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012dda:	3b18      	subs	r3, #24
 8012ddc:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012dde:	3302      	adds	r3, #2
 8012de0:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012de2:	2300      	movs	r3, #0
 8012de4:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012de6:	3369      	adds	r3, #105	; 0x69
 8012de8:	5ce3      	ldrb	r3, [r4, r3]
 8012dea:	2b22      	cmp	r3, #34	; 0x22
 8012dec:	d01f      	beq.n	8012e2e <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012dee:	2369      	movs	r3, #105	; 0x69
 8012df0:	2012      	movs	r0, #18
 8012df2:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012df4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012df6:	4812      	ldr	r0, [pc, #72]	; (8012e40 <HAL_UART_Transmit_DMA+0x94>)
 8012df8:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8012dfa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012dfc:	4811      	ldr	r0, [pc, #68]	; (8012e44 <HAL_UART_Transmit_DMA+0x98>)
 8012dfe:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012e00:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8012e02:	4811      	ldr	r0, [pc, #68]	; (8012e48 <HAL_UART_Transmit_DMA+0x9c>)
 8012e04:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8012e06:	6820      	ldr	r0, [r4, #0]
 8012e08:	3028      	adds	r0, #40	; 0x28
 8012e0a:	0013      	movs	r3, r2
 8012e0c:	0002      	movs	r2, r0
 8012e0e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8012e10:	f7fd ffb0 	bl	8010d74 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	2240      	movs	r2, #64	; 0x40
 8012e18:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8012e1a:	6822      	ldr	r2, [r4, #0]
 8012e1c:	6893      	ldr	r3, [r2, #8]
 8012e1e:	2180      	movs	r1, #128	; 0x80
 8012e20:	430b      	orrs	r3, r1
 8012e22:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012e24:	2368      	movs	r3, #104	; 0x68
 8012e26:	2200      	movs	r2, #0
 8012e28:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012e2a:	2000      	movs	r0, #0
  }
}
 8012e2c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012e2e:	3347      	adds	r3, #71	; 0x47
 8012e30:	3031      	adds	r0, #49	; 0x31
 8012e32:	54e0      	strb	r0, [r4, r3]
 8012e34:	e7de      	b.n	8012df4 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8012e36:	2001      	movs	r0, #1
 8012e38:	e7f8      	b.n	8012e2c <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8012e3a:	2002      	movs	r0, #2
 8012e3c:	e7f6      	b.n	8012e2c <HAL_UART_Transmit_DMA+0x80>
 8012e3e:	46c0      	nop			; (mov r8, r8)
 8012e40:	08012ee5 	.word	0x08012ee5
 8012e44:	08012f17 	.word	0x08012f17
 8012e48:	08012f67 	.word	0x08012f67

08012e4c <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012e4c:	b510      	push	{r4, lr}
 8012e4e:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012e50:	2069      	movs	r0, #105	; 0x69
 8012e52:	5c20      	ldrb	r0, [r4, r0]
 8012e54:	2801      	cmp	r0, #1
 8012e56:	d004      	beq.n	8012e62 <HAL_UART_Receive_DMA+0x16>
 8012e58:	2369      	movs	r3, #105	; 0x69
 8012e5a:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012e5c:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012e5e:	2b12      	cmp	r3, #18
 8012e60:	d130      	bne.n	8012ec4 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8012e62:	2900      	cmp	r1, #0
 8012e64:	d033      	beq.n	8012ece <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8012e66:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	d02b      	beq.n	8012ec4 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012e6c:	2368      	movs	r3, #104	; 0x68
 8012e6e:	5ce3      	ldrb	r3, [r4, r3]
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d02e      	beq.n	8012ed2 <HAL_UART_Receive_DMA+0x86>
 8012e74:	2368      	movs	r3, #104	; 0x68
 8012e76:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8012e78:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012e7a:	3b10      	subs	r3, #16
 8012e7c:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012e82:	3369      	adds	r3, #105	; 0x69
 8012e84:	5ce3      	ldrb	r3, [r4, r3]
 8012e86:	2b12      	cmp	r3, #18
 8012e88:	d01d      	beq.n	8012ec6 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012e8a:	2369      	movs	r3, #105	; 0x69
 8012e8c:	2022      	movs	r0, #34	; 0x22
 8012e8e:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e92:	4811      	ldr	r0, [pc, #68]	; (8012ed8 <HAL_UART_Receive_DMA+0x8c>)
 8012e94:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e98:	4810      	ldr	r0, [pc, #64]	; (8012edc <HAL_UART_Receive_DMA+0x90>)
 8012e9a:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e9e:	4810      	ldr	r0, [pc, #64]	; (8012ee0 <HAL_UART_Receive_DMA+0x94>)
 8012ea0:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012ea2:	6820      	ldr	r0, [r4, #0]
 8012ea4:	3024      	adds	r0, #36	; 0x24
 8012ea6:	0013      	movs	r3, r2
 8012ea8:	000a      	movs	r2, r1
 8012eaa:	0001      	movs	r1, r0
 8012eac:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012eae:	f7fd ff61 	bl	8010d74 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8012eb2:	6822      	ldr	r2, [r4, #0]
 8012eb4:	6893      	ldr	r3, [r2, #8]
 8012eb6:	2140      	movs	r1, #64	; 0x40
 8012eb8:	430b      	orrs	r3, r1
 8012eba:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8012ebc:	2368      	movs	r3, #104	; 0x68
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012ec2:	2000      	movs	r0, #0
  }
}
 8012ec4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012ec6:	3357      	adds	r3, #87	; 0x57
 8012ec8:	3031      	adds	r0, #49	; 0x31
 8012eca:	54e0      	strb	r0, [r4, r3]
 8012ecc:	e7e0      	b.n	8012e90 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8012ece:	2001      	movs	r0, #1
 8012ed0:	e7f8      	b.n	8012ec4 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8012ed2:	2002      	movs	r0, #2
 8012ed4:	e7f6      	b.n	8012ec4 <HAL_UART_Receive_DMA+0x78>
 8012ed6:	46c0      	nop			; (mov r8, r8)
 8012ed8:	08012f21 	.word	0x08012f21
 8012edc:	08012f5d 	.word	0x08012f5d
 8012ee0:	08012f67 	.word	0x08012f67

08012ee4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012ee4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012ee6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012ee8:	6802      	ldr	r2, [r0, #0]
 8012eea:	6812      	ldr	r2, [r2, #0]
 8012eec:	0692      	lsls	r2, r2, #26
 8012eee:	d40d      	bmi.n	8012f0c <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8012ef0:	2252      	movs	r2, #82	; 0x52
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8012ef6:	6819      	ldr	r1, [r3, #0]
 8012ef8:	688a      	ldr	r2, [r1, #8]
 8012efa:	2080      	movs	r0, #128	; 0x80
 8012efc:	4382      	bics	r2, r0
 8012efe:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	6813      	ldr	r3, [r2, #0]
 8012f04:	2140      	movs	r1, #64	; 0x40
 8012f06:	430b      	orrs	r3, r1
 8012f08:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8012f0a:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8012f0c:	0018      	movs	r0, r3
 8012f0e:	f7fa fdd3 	bl	800dab8 <HAL_UART_TxCpltCallback>
}
 8012f12:	e7fa      	b.n	8012f0a <UART_DMATransmitCplt+0x26>

08012f14 <HAL_UART_TxHalfCpltCallback>:
}
 8012f14:	4770      	bx	lr

08012f16 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012f16:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8012f18:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012f1a:	f7ff fffb 	bl	8012f14 <HAL_UART_TxHalfCpltCallback>
}
 8012f1e:	bd10      	pop	{r4, pc}

08012f20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012f20:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012f22:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8012f24:	6802      	ldr	r2, [r0, #0]
 8012f26:	6812      	ldr	r2, [r2, #0]
 8012f28:	0692      	lsls	r2, r2, #26
 8012f2a:	d40e      	bmi.n	8012f4a <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8012f2c:	225a      	movs	r2, #90	; 0x5a
 8012f2e:	2100      	movs	r1, #0
 8012f30:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8012f32:	6819      	ldr	r1, [r3, #0]
 8012f34:	688a      	ldr	r2, [r1, #8]
 8012f36:	2040      	movs	r0, #64	; 0x40
 8012f38:	4382      	bics	r2, r0
 8012f3a:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012f3c:	2269      	movs	r2, #105	; 0x69
 8012f3e:	5c9a      	ldrb	r2, [r3, r2]
 8012f40:	2a32      	cmp	r2, #50	; 0x32
 8012f42:	d006      	beq.n	8012f52 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8012f44:	2269      	movs	r2, #105	; 0x69
 8012f46:	2101      	movs	r1, #1
 8012f48:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8012f4a:	0018      	movs	r0, r3
 8012f4c:	f7fa fdf2 	bl	800db34 <HAL_UART_RxCpltCallback>
}
 8012f50:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012f52:	3237      	adds	r2, #55	; 0x37
 8012f54:	2112      	movs	r1, #18
 8012f56:	5499      	strb	r1, [r3, r2]
 8012f58:	e7f7      	b.n	8012f4a <UART_DMAReceiveCplt+0x2a>

08012f5a <HAL_UART_RxHalfCpltCallback>:
}
 8012f5a:	4770      	bx	lr

08012f5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012f5c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8012f5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012f60:	f7ff fffb 	bl	8012f5a <HAL_UART_RxHalfCpltCallback>
}
 8012f64:	bd10      	pop	{r4, pc}

08012f66 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012f66:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012f68:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	225a      	movs	r2, #90	; 0x5a
 8012f6e:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012f70:	3a08      	subs	r2, #8
 8012f72:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012f74:	3369      	adds	r3, #105	; 0x69
 8012f76:	3a51      	subs	r2, #81	; 0x51
 8012f78:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012f7a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012f7c:	320f      	adds	r2, #15
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012f82:	f7fa fdb1 	bl	800dae8 <HAL_UART_ErrorCallback>
}
 8012f86:	bd10      	pop	{r4, pc}

08012f88 <UART_SetConfig>:
{
 8012f88:	b570      	push	{r4, r5, r6, lr}
 8012f8a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012f8c:	6801      	ldr	r1, [r0, #0]
 8012f8e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012f90:	6883      	ldr	r3, [r0, #8]
 8012f92:	6900      	ldr	r0, [r0, #16]
 8012f94:	4303      	orrs	r3, r0
 8012f96:	6960      	ldr	r0, [r4, #20]
 8012f98:	4303      	orrs	r3, r0
 8012f9a:	69e0      	ldr	r0, [r4, #28]
 8012f9c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8012f9e:	487e      	ldr	r0, [pc, #504]	; (8013198 <UART_SetConfig+0x210>)
 8012fa0:	4002      	ands	r2, r0
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012fa6:	6822      	ldr	r2, [r4, #0]
 8012fa8:	6853      	ldr	r3, [r2, #4]
 8012faa:	497c      	ldr	r1, [pc, #496]	; (801319c <UART_SetConfig+0x214>)
 8012fac:	400b      	ands	r3, r1
 8012fae:	68e1      	ldr	r1, [r4, #12]
 8012fb0:	430b      	orrs	r3, r1
 8012fb2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012fb4:	6821      	ldr	r1, [r4, #0]
 8012fb6:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012fb8:	69a3      	ldr	r3, [r4, #24]
 8012fba:	6a20      	ldr	r0, [r4, #32]
 8012fbc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8012fbe:	4878      	ldr	r0, [pc, #480]	; (80131a0 <UART_SetConfig+0x218>)
 8012fc0:	4002      	ands	r2, r0
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012fc6:	6825      	ldr	r5, [r4, #0]
 8012fc8:	4b76      	ldr	r3, [pc, #472]	; (80131a4 <UART_SetConfig+0x21c>)
 8012fca:	429d      	cmp	r5, r3
 8012fcc:	d022      	beq.n	8013014 <UART_SetConfig+0x8c>
 8012fce:	4b76      	ldr	r3, [pc, #472]	; (80131a8 <UART_SetConfig+0x220>)
 8012fd0:	429d      	cmp	r5, r3
 8012fd2:	d034      	beq.n	801303e <UART_SetConfig+0xb6>
 8012fd4:	4b75      	ldr	r3, [pc, #468]	; (80131ac <UART_SetConfig+0x224>)
 8012fd6:	429d      	cmp	r5, r3
 8012fd8:	d100      	bne.n	8012fdc <UART_SetConfig+0x54>
 8012fda:	e06b      	b.n	80130b4 <UART_SetConfig+0x12c>
 8012fdc:	4b74      	ldr	r3, [pc, #464]	; (80131b0 <UART_SetConfig+0x228>)
 8012fde:	429d      	cmp	r5, r3
 8012fe0:	d100      	bne.n	8012fe4 <UART_SetConfig+0x5c>
 8012fe2:	e08e      	b.n	8013102 <UART_SetConfig+0x17a>
 8012fe4:	4b73      	ldr	r3, [pc, #460]	; (80131b4 <UART_SetConfig+0x22c>)
 8012fe6:	429d      	cmp	r5, r3
 8012fe8:	d100      	bne.n	8012fec <UART_SetConfig+0x64>
 8012fea:	e08a      	b.n	8013102 <UART_SetConfig+0x17a>
 8012fec:	4b72      	ldr	r3, [pc, #456]	; (80131b8 <UART_SetConfig+0x230>)
 8012fee:	429d      	cmp	r5, r3
 8012ff0:	d100      	bne.n	8012ff4 <UART_SetConfig+0x6c>
 8012ff2:	e086      	b.n	8013102 <UART_SetConfig+0x17a>
 8012ff4:	4b71      	ldr	r3, [pc, #452]	; (80131bc <UART_SetConfig+0x234>)
 8012ff6:	429d      	cmp	r5, r3
 8012ff8:	d100      	bne.n	8012ffc <UART_SetConfig+0x74>
 8012ffa:	e082      	b.n	8013102 <UART_SetConfig+0x17a>
 8012ffc:	4b70      	ldr	r3, [pc, #448]	; (80131c0 <UART_SetConfig+0x238>)
 8012ffe:	429d      	cmp	r5, r3
 8013000:	d100      	bne.n	8013004 <UART_SetConfig+0x7c>
 8013002:	e07e      	b.n	8013102 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013004:	2380      	movs	r3, #128	; 0x80
 8013006:	021b      	lsls	r3, r3, #8
 8013008:	69e2      	ldr	r2, [r4, #28]
 801300a:	429a      	cmp	r2, r3
 801300c:	d100      	bne.n	8013010 <UART_SetConfig+0x88>
 801300e:	e072      	b.n	80130f6 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8013010:	2001      	movs	r0, #1
 8013012:	e04e      	b.n	80130b2 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013014:	4b6b      	ldr	r3, [pc, #428]	; (80131c4 <UART_SetConfig+0x23c>)
 8013016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013018:	2303      	movs	r3, #3
 801301a:	4013      	ands	r3, r2
 801301c:	2b01      	cmp	r3, #1
 801301e:	d100      	bne.n	8013022 <UART_SetConfig+0x9a>
 8013020:	e09a      	b.n	8013158 <UART_SetConfig+0x1d0>
 8013022:	2b00      	cmp	r3, #0
 8013024:	d02f      	beq.n	8013086 <UART_SetConfig+0xfe>
 8013026:	2b02      	cmp	r3, #2
 8013028:	d100      	bne.n	801302c <UART_SetConfig+0xa4>
 801302a:	e0a5      	b.n	8013178 <UART_SetConfig+0x1f0>
 801302c:	2b03      	cmp	r3, #3
 801302e:	d01a      	beq.n	8013066 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013030:	2380      	movs	r3, #128	; 0x80
 8013032:	021b      	lsls	r3, r3, #8
 8013034:	69e2      	ldr	r2, [r4, #28]
 8013036:	429a      	cmp	r2, r3
 8013038:	d060      	beq.n	80130fc <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 801303a:	2001      	movs	r0, #1
 801303c:	e039      	b.n	80130b2 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801303e:	4b61      	ldr	r3, [pc, #388]	; (80131c4 <UART_SetConfig+0x23c>)
 8013040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013042:	22c0      	movs	r2, #192	; 0xc0
 8013044:	0292      	lsls	r2, r2, #10
 8013046:	4013      	ands	r3, r2
 8013048:	2280      	movs	r2, #128	; 0x80
 801304a:	0252      	lsls	r2, r2, #9
 801304c:	4293      	cmp	r3, r2
 801304e:	d100      	bne.n	8013052 <UART_SetConfig+0xca>
 8013050:	e082      	b.n	8013158 <UART_SetConfig+0x1d0>
 8013052:	d916      	bls.n	8013082 <UART_SetConfig+0xfa>
 8013054:	2280      	movs	r2, #128	; 0x80
 8013056:	0292      	lsls	r2, r2, #10
 8013058:	4293      	cmp	r3, r2
 801305a:	d100      	bne.n	801305e <UART_SetConfig+0xd6>
 801305c:	e08c      	b.n	8013178 <UART_SetConfig+0x1f0>
 801305e:	22c0      	movs	r2, #192	; 0xc0
 8013060:	0292      	lsls	r2, r2, #10
 8013062:	4293      	cmp	r3, r2
 8013064:	d1e4      	bne.n	8013030 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013066:	2380      	movs	r3, #128	; 0x80
 8013068:	021b      	lsls	r3, r3, #8
 801306a:	69e2      	ldr	r2, [r4, #28]
 801306c:	429a      	cmp	r2, r3
 801306e:	d038      	beq.n	80130e2 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013070:	6861      	ldr	r1, [r4, #4]
 8013072:	4855      	ldr	r0, [pc, #340]	; (80131c8 <UART_SetConfig+0x240>)
 8013074:	f7ed f862 	bl	800013c <__udivsi3>
 8013078:	0400      	lsls	r0, r0, #16
 801307a:	0c00      	lsrs	r0, r0, #16
 801307c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801307e:	2000      	movs	r0, #0
        break;
 8013080:	e017      	b.n	80130b2 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013082:	2b00      	cmp	r3, #0
 8013084:	d1d4      	bne.n	8013030 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013086:	2380      	movs	r3, #128	; 0x80
 8013088:	021b      	lsls	r3, r3, #8
 801308a:	69e2      	ldr	r2, [r4, #28]
 801308c:	429a      	cmp	r2, r3
 801308e:	d13d      	bne.n	801310c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013090:	f7ff fa5c 	bl	801254c <HAL_RCC_GetPCLK1Freq>
 8013094:	0040      	lsls	r0, r0, #1
 8013096:	6861      	ldr	r1, [r4, #4]
 8013098:	f7ed f850 	bl	800013c <__udivsi3>
 801309c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801309e:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80130a0:	220f      	movs	r2, #15
 80130a2:	0019      	movs	r1, r3
 80130a4:	4391      	bics	r1, r2
 80130a6:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80130a8:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80130aa:	071b      	lsls	r3, r3, #28
 80130ac:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80130ae:	4313      	orrs	r3, r2
 80130b0:	60cb      	str	r3, [r1, #12]
}
 80130b2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80130b4:	4b43      	ldr	r3, [pc, #268]	; (80131c4 <UART_SetConfig+0x23c>)
 80130b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130b8:	22c0      	movs	r2, #192	; 0xc0
 80130ba:	0312      	lsls	r2, r2, #12
 80130bc:	4013      	ands	r3, r2
 80130be:	2280      	movs	r2, #128	; 0x80
 80130c0:	02d2      	lsls	r2, r2, #11
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d02d      	beq.n	8013122 <UART_SetConfig+0x19a>
 80130c6:	d913      	bls.n	80130f0 <UART_SetConfig+0x168>
 80130c8:	2280      	movs	r2, #128	; 0x80
 80130ca:	0312      	lsls	r2, r2, #12
 80130cc:	4293      	cmp	r3, r2
 80130ce:	d036      	beq.n	801313e <UART_SetConfig+0x1b6>
 80130d0:	22c0      	movs	r2, #192	; 0xc0
 80130d2:	0312      	lsls	r2, r2, #12
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d1ab      	bne.n	8013030 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80130d8:	2380      	movs	r3, #128	; 0x80
 80130da:	021b      	lsls	r3, r3, #8
 80130dc:	69e2      	ldr	r2, [r4, #28]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d1c6      	bne.n	8013070 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80130e2:	6861      	ldr	r1, [r4, #4]
 80130e4:	4839      	ldr	r0, [pc, #228]	; (80131cc <UART_SetConfig+0x244>)
 80130e6:	f7ed f829 	bl	800013c <__udivsi3>
 80130ea:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80130ec:	2000      	movs	r0, #0
        break;
 80130ee:	e7d7      	b.n	80130a0 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d0c8      	beq.n	8013086 <UART_SetConfig+0xfe>
 80130f4:	e79c      	b.n	8013030 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 80130f6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80130f8:	2300      	movs	r3, #0
 80130fa:	e7d1      	b.n	80130a0 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 80130fc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 80130fe:	2300      	movs	r3, #0
 8013100:	e7ce      	b.n	80130a0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013102:	2380      	movs	r3, #128	; 0x80
 8013104:	021b      	lsls	r3, r3, #8
 8013106:	69e2      	ldr	r2, [r4, #28]
 8013108:	429a      	cmp	r2, r3
 801310a:	d0c1      	beq.n	8013090 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 801310c:	f7ff fa1e 	bl	801254c <HAL_RCC_GetPCLK1Freq>
 8013110:	6825      	ldr	r5, [r4, #0]
 8013112:	6861      	ldr	r1, [r4, #4]
 8013114:	f7ed f812 	bl	800013c <__udivsi3>
 8013118:	0400      	lsls	r0, r0, #16
 801311a:	0c00      	lsrs	r0, r0, #16
 801311c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801311e:	2000      	movs	r0, #0
  return ret;
 8013120:	e7c7      	b.n	80130b2 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013122:	2380      	movs	r3, #128	; 0x80
 8013124:	021b      	lsls	r3, r3, #8
 8013126:	69e2      	ldr	r2, [r4, #28]
 8013128:	429a      	cmp	r2, r3
 801312a:	d11a      	bne.n	8013162 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801312c:	f7ff f9aa 	bl	8012484 <HAL_RCC_GetSysClockFreq>
 8013130:	0040      	lsls	r0, r0, #1
 8013132:	6861      	ldr	r1, [r4, #4]
 8013134:	f7ed f802 	bl	800013c <__udivsi3>
 8013138:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 801313a:	2000      	movs	r0, #0
        break;
 801313c:	e7b0      	b.n	80130a0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801313e:	2380      	movs	r3, #128	; 0x80
 8013140:	021b      	lsls	r3, r3, #8
 8013142:	69e2      	ldr	r2, [r4, #28]
 8013144:	429a      	cmp	r2, r3
 8013146:	d11c      	bne.n	8013182 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013148:	6861      	ldr	r1, [r4, #4]
 801314a:	2080      	movs	r0, #128	; 0x80
 801314c:	0240      	lsls	r0, r0, #9
 801314e:	f7ec fff5 	bl	800013c <__udivsi3>
 8013152:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013154:	2000      	movs	r0, #0
        break;
 8013156:	e7a3      	b.n	80130a0 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013158:	2380      	movs	r3, #128	; 0x80
 801315a:	021b      	lsls	r3, r3, #8
 801315c:	69e2      	ldr	r2, [r4, #28]
 801315e:	429a      	cmp	r2, r3
 8013160:	d0e4      	beq.n	801312c <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013162:	f7ff f98f 	bl	8012484 <HAL_RCC_GetSysClockFreq>
 8013166:	6825      	ldr	r5, [r4, #0]
 8013168:	6861      	ldr	r1, [r4, #4]
 801316a:	f7ec ffe7 	bl	800013c <__udivsi3>
 801316e:	0400      	lsls	r0, r0, #16
 8013170:	0c00      	lsrs	r0, r0, #16
 8013172:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013174:	2000      	movs	r0, #0
        break;
 8013176:	e79c      	b.n	80130b2 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013178:	2380      	movs	r3, #128	; 0x80
 801317a:	021b      	lsls	r3, r3, #8
 801317c:	69e2      	ldr	r2, [r4, #28]
 801317e:	429a      	cmp	r2, r3
 8013180:	d0e2      	beq.n	8013148 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013182:	6861      	ldr	r1, [r4, #4]
 8013184:	2080      	movs	r0, #128	; 0x80
 8013186:	0200      	lsls	r0, r0, #8
 8013188:	f7ec ffd8 	bl	800013c <__udivsi3>
 801318c:	0400      	lsls	r0, r0, #16
 801318e:	0c00      	lsrs	r0, r0, #16
 8013190:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013192:	2000      	movs	r0, #0
        break;
 8013194:	e78d      	b.n	80130b2 <UART_SetConfig+0x12a>
 8013196:	46c0      	nop			; (mov r8, r8)
 8013198:	efff69f3 	.word	0xefff69f3
 801319c:	ffffcfff 	.word	0xffffcfff
 80131a0:	fffff4ff 	.word	0xfffff4ff
 80131a4:	40013800 	.word	0x40013800
 80131a8:	40004400 	.word	0x40004400
 80131ac:	40004800 	.word	0x40004800
 80131b0:	40004c00 	.word	0x40004c00
 80131b4:	40005000 	.word	0x40005000
 80131b8:	40011400 	.word	0x40011400
 80131bc:	40011800 	.word	0x40011800
 80131c0:	40011c00 	.word	0x40011c00
 80131c4:	40021000 	.word	0x40021000
 80131c8:	007a1200 	.word	0x007a1200
 80131cc:	00f42400 	.word	0x00f42400

080131d0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80131d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80131d2:	07db      	lsls	r3, r3, #31
 80131d4:	d506      	bpl.n	80131e4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80131d6:	6802      	ldr	r2, [r0, #0]
 80131d8:	6853      	ldr	r3, [r2, #4]
 80131da:	492c      	ldr	r1, [pc, #176]	; (801328c <UART_AdvFeatureConfig+0xbc>)
 80131dc:	400b      	ands	r3, r1
 80131de:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80131e0:	430b      	orrs	r3, r1
 80131e2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80131e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80131e6:	079b      	lsls	r3, r3, #30
 80131e8:	d506      	bpl.n	80131f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80131ea:	6802      	ldr	r2, [r0, #0]
 80131ec:	6853      	ldr	r3, [r2, #4]
 80131ee:	4928      	ldr	r1, [pc, #160]	; (8013290 <UART_AdvFeatureConfig+0xc0>)
 80131f0:	400b      	ands	r3, r1
 80131f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80131f4:	430b      	orrs	r3, r1
 80131f6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80131f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80131fa:	075b      	lsls	r3, r3, #29
 80131fc:	d506      	bpl.n	801320c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80131fe:	6802      	ldr	r2, [r0, #0]
 8013200:	6853      	ldr	r3, [r2, #4]
 8013202:	4924      	ldr	r1, [pc, #144]	; (8013294 <UART_AdvFeatureConfig+0xc4>)
 8013204:	400b      	ands	r3, r1
 8013206:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013208:	430b      	orrs	r3, r1
 801320a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801320c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801320e:	071b      	lsls	r3, r3, #28
 8013210:	d506      	bpl.n	8013220 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013212:	6802      	ldr	r2, [r0, #0]
 8013214:	6853      	ldr	r3, [r2, #4]
 8013216:	4920      	ldr	r1, [pc, #128]	; (8013298 <UART_AdvFeatureConfig+0xc8>)
 8013218:	400b      	ands	r3, r1
 801321a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801321c:	430b      	orrs	r3, r1
 801321e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013220:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013222:	06db      	lsls	r3, r3, #27
 8013224:	d506      	bpl.n	8013234 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013226:	6802      	ldr	r2, [r0, #0]
 8013228:	6893      	ldr	r3, [r2, #8]
 801322a:	491c      	ldr	r1, [pc, #112]	; (801329c <UART_AdvFeatureConfig+0xcc>)
 801322c:	400b      	ands	r3, r1
 801322e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013230:	430b      	orrs	r3, r1
 8013232:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013234:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013236:	069b      	lsls	r3, r3, #26
 8013238:	d506      	bpl.n	8013248 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801323a:	6802      	ldr	r2, [r0, #0]
 801323c:	6893      	ldr	r3, [r2, #8]
 801323e:	4918      	ldr	r1, [pc, #96]	; (80132a0 <UART_AdvFeatureConfig+0xd0>)
 8013240:	400b      	ands	r3, r1
 8013242:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013244:	430b      	orrs	r3, r1
 8013246:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013248:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801324a:	065b      	lsls	r3, r3, #25
 801324c:	d50b      	bpl.n	8013266 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801324e:	6802      	ldr	r2, [r0, #0]
 8013250:	6853      	ldr	r3, [r2, #4]
 8013252:	4914      	ldr	r1, [pc, #80]	; (80132a4 <UART_AdvFeatureConfig+0xd4>)
 8013254:	400b      	ands	r3, r1
 8013256:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013258:	430b      	orrs	r3, r1
 801325a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801325c:	2380      	movs	r3, #128	; 0x80
 801325e:	035b      	lsls	r3, r3, #13
 8013260:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013262:	429a      	cmp	r2, r3
 8013264:	d00a      	beq.n	801327c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013266:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013268:	061b      	lsls	r3, r3, #24
 801326a:	d506      	bpl.n	801327a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801326c:	6802      	ldr	r2, [r0, #0]
 801326e:	6853      	ldr	r3, [r2, #4]
 8013270:	490d      	ldr	r1, [pc, #52]	; (80132a8 <UART_AdvFeatureConfig+0xd8>)
 8013272:	400b      	ands	r3, r1
 8013274:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013276:	430b      	orrs	r3, r1
 8013278:	6053      	str	r3, [r2, #4]
}
 801327a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801327c:	6802      	ldr	r2, [r0, #0]
 801327e:	6853      	ldr	r3, [r2, #4]
 8013280:	490a      	ldr	r1, [pc, #40]	; (80132ac <UART_AdvFeatureConfig+0xdc>)
 8013282:	400b      	ands	r3, r1
 8013284:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013286:	430b      	orrs	r3, r1
 8013288:	6053      	str	r3, [r2, #4]
 801328a:	e7ec      	b.n	8013266 <UART_AdvFeatureConfig+0x96>
 801328c:	fffdffff 	.word	0xfffdffff
 8013290:	fffeffff 	.word	0xfffeffff
 8013294:	fffbffff 	.word	0xfffbffff
 8013298:	ffff7fff 	.word	0xffff7fff
 801329c:	ffffefff 	.word	0xffffefff
 80132a0:	ffffdfff 	.word	0xffffdfff
 80132a4:	ffefffff 	.word	0xffefffff
 80132a8:	fff7ffff 	.word	0xfff7ffff
 80132ac:	ff9fffff 	.word	0xff9fffff

080132b0 <UART_WaitOnFlagUntilTimeout>:
{
 80132b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132b2:	46c6      	mov	lr, r8
 80132b4:	b500      	push	{lr}
 80132b6:	0006      	movs	r6, r0
 80132b8:	000c      	movs	r4, r1
 80132ba:	0017      	movs	r7, r2
 80132bc:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80132be:	f7fd f869 	bl	8010394 <HAL_GetTick>
 80132c2:	4680      	mov	r8, r0
  if(Status == RESET)
 80132c4:	2f00      	cmp	r7, #0
 80132c6:	d029      	beq.n	801331c <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80132c8:	6832      	ldr	r2, [r6, #0]
 80132ca:	69d3      	ldr	r3, [r2, #28]
 80132cc:	4023      	ands	r3, r4
 80132ce:	42a3      	cmp	r3, r4
 80132d0:	d152      	bne.n	8013378 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80132d2:	1c6b      	adds	r3, r5, #1
 80132d4:	d0f9      	beq.n	80132ca <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80132d6:	2d00      	cmp	r5, #0
 80132d8:	d005      	beq.n	80132e6 <UART_WaitOnFlagUntilTimeout+0x36>
 80132da:	f7fd f85b 	bl	8010394 <HAL_GetTick>
 80132de:	4643      	mov	r3, r8
 80132e0:	1ac0      	subs	r0, r0, r3
 80132e2:	42a8      	cmp	r0, r5
 80132e4:	d9f0      	bls.n	80132c8 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80132e6:	6832      	ldr	r2, [r6, #0]
 80132e8:	6813      	ldr	r3, [r2, #0]
 80132ea:	2180      	movs	r1, #128	; 0x80
 80132ec:	438b      	bics	r3, r1
 80132ee:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80132f0:	6832      	ldr	r2, [r6, #0]
 80132f2:	6813      	ldr	r3, [r2, #0]
 80132f4:	3960      	subs	r1, #96	; 0x60
 80132f6:	438b      	bics	r3, r1
 80132f8:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80132fa:	6832      	ldr	r2, [r6, #0]
 80132fc:	6813      	ldr	r3, [r2, #0]
 80132fe:	491f      	ldr	r1, [pc, #124]	; (801337c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013300:	400b      	ands	r3, r1
 8013302:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013304:	6831      	ldr	r1, [r6, #0]
 8013306:	688b      	ldr	r3, [r1, #8]
 8013308:	2201      	movs	r2, #1
 801330a:	4393      	bics	r3, r2
 801330c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801330e:	2369      	movs	r3, #105	; 0x69
 8013310:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013312:	3b01      	subs	r3, #1
 8013314:	2200      	movs	r2, #0
 8013316:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013318:	2003      	movs	r0, #3
 801331a:	e02a      	b.n	8013372 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 801331c:	6832      	ldr	r2, [r6, #0]
 801331e:	69d3      	ldr	r3, [r2, #28]
 8013320:	4023      	ands	r3, r4
 8013322:	42a3      	cmp	r3, r4
 8013324:	d024      	beq.n	8013370 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013326:	1c6b      	adds	r3, r5, #1
 8013328:	d0f9      	beq.n	801331e <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801332a:	2d00      	cmp	r5, #0
 801332c:	d005      	beq.n	801333a <UART_WaitOnFlagUntilTimeout+0x8a>
 801332e:	f7fd f831 	bl	8010394 <HAL_GetTick>
 8013332:	4643      	mov	r3, r8
 8013334:	1ac0      	subs	r0, r0, r3
 8013336:	42a8      	cmp	r0, r5
 8013338:	d9f0      	bls.n	801331c <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801333a:	6832      	ldr	r2, [r6, #0]
 801333c:	6813      	ldr	r3, [r2, #0]
 801333e:	2180      	movs	r1, #128	; 0x80
 8013340:	438b      	bics	r3, r1
 8013342:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013344:	6832      	ldr	r2, [r6, #0]
 8013346:	6813      	ldr	r3, [r2, #0]
 8013348:	3960      	subs	r1, #96	; 0x60
 801334a:	438b      	bics	r3, r1
 801334c:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801334e:	6832      	ldr	r2, [r6, #0]
 8013350:	6813      	ldr	r3, [r2, #0]
 8013352:	490a      	ldr	r1, [pc, #40]	; (801337c <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013354:	400b      	ands	r3, r1
 8013356:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013358:	6831      	ldr	r1, [r6, #0]
 801335a:	688b      	ldr	r3, [r1, #8]
 801335c:	2201      	movs	r2, #1
 801335e:	4393      	bics	r3, r2
 8013360:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013362:	2369      	movs	r3, #105	; 0x69
 8013364:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013366:	3b01      	subs	r3, #1
 8013368:	2200      	movs	r2, #0
 801336a:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801336c:	2003      	movs	r0, #3
 801336e:	e000      	b.n	8013372 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013370:	2000      	movs	r0, #0
}
 8013372:	bc04      	pop	{r2}
 8013374:	4690      	mov	r8, r2
 8013376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013378:	2000      	movs	r0, #0
 801337a:	e7fa      	b.n	8013372 <UART_WaitOnFlagUntilTimeout+0xc2>
 801337c:	fffffeff 	.word	0xfffffeff

08013380 <HAL_UART_Transmit>:
{
 8013380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013382:	b083      	sub	sp, #12
 8013384:	0004      	movs	r4, r0
 8013386:	000e      	movs	r6, r1
 8013388:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801338a:	2369      	movs	r3, #105	; 0x69
 801338c:	5cc3      	ldrb	r3, [r0, r3]
 801338e:	2b01      	cmp	r3, #1
 8013390:	d004      	beq.n	801339c <HAL_UART_Transmit+0x1c>
 8013392:	2369      	movs	r3, #105	; 0x69
 8013394:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8013396:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013398:	2b22      	cmp	r3, #34	; 0x22
 801339a:	d153      	bne.n	8013444 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 801339c:	2e00      	cmp	r6, #0
 801339e:	d050      	beq.n	8013442 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80133a0:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80133a2:	2a00      	cmp	r2, #0
 80133a4:	d04e      	beq.n	8013444 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80133a6:	2368      	movs	r3, #104	; 0x68
 80133a8:	5ce3      	ldrb	r3, [r4, r3]
 80133aa:	2b01      	cmp	r3, #1
 80133ac:	d04c      	beq.n	8013448 <HAL_UART_Transmit+0xc8>
 80133ae:	2368      	movs	r3, #104	; 0x68
 80133b0:	2101      	movs	r1, #1
 80133b2:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133b4:	2300      	movs	r3, #0
 80133b6:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80133b8:	3369      	adds	r3, #105	; 0x69
 80133ba:	5ce3      	ldrb	r3, [r4, r3]
 80133bc:	2b22      	cmp	r3, #34	; 0x22
 80133be:	d008      	beq.n	80133d2 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80133c0:	2369      	movs	r3, #105	; 0x69
 80133c2:	2112      	movs	r1, #18
 80133c4:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80133c6:	2350      	movs	r3, #80	; 0x50
 80133c8:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80133ca:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80133cc:	2580      	movs	r5, #128	; 0x80
 80133ce:	016d      	lsls	r5, r5, #5
 80133d0:	e00a      	b.n	80133e8 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80133d2:	3347      	adds	r3, #71	; 0x47
 80133d4:	3131      	adds	r1, #49	; 0x31
 80133d6:	54e1      	strb	r1, [r4, r3]
 80133d8:	e7f5      	b.n	80133c6 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80133da:	7833      	ldrb	r3, [r6, #0]
 80133dc:	6822      	ldr	r2, [r4, #0]
 80133de:	8513      	strh	r3, [r2, #40]	; 0x28
 80133e0:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80133e2:	5be2      	ldrh	r2, [r4, r7]
 80133e4:	2a00      	cmp	r2, #0
 80133e6:	d016      	beq.n	8013416 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80133e8:	3a01      	subs	r2, #1
 80133ea:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80133ec:	9b01      	ldr	r3, [sp, #4]
 80133ee:	2200      	movs	r2, #0
 80133f0:	2180      	movs	r1, #128	; 0x80
 80133f2:	0020      	movs	r0, r4
 80133f4:	f7ff ff5c 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	d127      	bne.n	801344c <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80133fc:	68a3      	ldr	r3, [r4, #8]
 80133fe:	42ab      	cmp	r3, r5
 8013400:	d1eb      	bne.n	80133da <HAL_UART_Transmit+0x5a>
 8013402:	6923      	ldr	r3, [r4, #16]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d1e8      	bne.n	80133da <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013408:	8833      	ldrh	r3, [r6, #0]
 801340a:	05db      	lsls	r3, r3, #23
 801340c:	0ddb      	lsrs	r3, r3, #23
 801340e:	6822      	ldr	r2, [r4, #0]
 8013410:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013412:	3602      	adds	r6, #2
 8013414:	e7e5      	b.n	80133e2 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013416:	9b01      	ldr	r3, [sp, #4]
 8013418:	2140      	movs	r1, #64	; 0x40
 801341a:	0020      	movs	r0, r4
 801341c:	f7ff ff48 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 8013420:	2800      	cmp	r0, #0
 8013422:	d115      	bne.n	8013450 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013424:	2369      	movs	r3, #105	; 0x69
 8013426:	5ce3      	ldrb	r3, [r4, r3]
 8013428:	2b32      	cmp	r3, #50	; 0x32
 801342a:	d006      	beq.n	801343a <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 801342c:	2369      	movs	r3, #105	; 0x69
 801342e:	2201      	movs	r2, #1
 8013430:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013432:	2368      	movs	r3, #104	; 0x68
 8013434:	2200      	movs	r2, #0
 8013436:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013438:	e004      	b.n	8013444 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801343a:	3337      	adds	r3, #55	; 0x37
 801343c:	2222      	movs	r2, #34	; 0x22
 801343e:	54e2      	strb	r2, [r4, r3]
 8013440:	e7f7      	b.n	8013432 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8013442:	2001      	movs	r0, #1
}
 8013444:	b003      	add	sp, #12
 8013446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8013448:	2002      	movs	r0, #2
 801344a:	e7fb      	b.n	8013444 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 801344c:	2003      	movs	r0, #3
 801344e:	e7f9      	b.n	8013444 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013450:	2003      	movs	r0, #3
 8013452:	e7f7      	b.n	8013444 <HAL_UART_Transmit+0xc4>

08013454 <UART_CheckIdleState>:
{
 8013454:	b510      	push	{r4, lr}
 8013456:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013458:	2300      	movs	r3, #0
 801345a:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 801345c:	6803      	ldr	r3, [r0, #0]
 801345e:	4a18      	ldr	r2, [pc, #96]	; (80134c0 <UART_CheckIdleState+0x6c>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d005      	beq.n	8013470 <UART_CheckIdleState+0x1c>
 8013464:	4a17      	ldr	r2, [pc, #92]	; (80134c4 <UART_CheckIdleState+0x70>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d002      	beq.n	8013470 <UART_CheckIdleState+0x1c>
 801346a:	4a17      	ldr	r2, [pc, #92]	; (80134c8 <UART_CheckIdleState+0x74>)
 801346c:	4293      	cmp	r3, r2
 801346e:	d106      	bne.n	801347e <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	071b      	lsls	r3, r3, #28
 8013474:	d40b      	bmi.n	801348e <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	075b      	lsls	r3, r3, #29
 801347c:	d413      	bmi.n	80134a6 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 801347e:	2369      	movs	r3, #105	; 0x69
 8013480:	2201      	movs	r2, #1
 8013482:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013484:	3b01      	subs	r3, #1
 8013486:	2200      	movs	r2, #0
 8013488:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801348a:	2000      	movs	r0, #0
}
 801348c:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801348e:	23fa      	movs	r3, #250	; 0xfa
 8013490:	2180      	movs	r1, #128	; 0x80
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	2200      	movs	r2, #0
 8013496:	0389      	lsls	r1, r1, #14
 8013498:	0020      	movs	r0, r4
 801349a:	f7ff ff09 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 801349e:	2800      	cmp	r0, #0
 80134a0:	d0e9      	beq.n	8013476 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80134a2:	2003      	movs	r0, #3
 80134a4:	e7f2      	b.n	801348c <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80134a6:	23fa      	movs	r3, #250	; 0xfa
 80134a8:	2180      	movs	r1, #128	; 0x80
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	2200      	movs	r2, #0
 80134ae:	03c9      	lsls	r1, r1, #15
 80134b0:	0020      	movs	r0, r4
 80134b2:	f7ff fefd 	bl	80132b0 <UART_WaitOnFlagUntilTimeout>
 80134b6:	2800      	cmp	r0, #0
 80134b8:	d0e1      	beq.n	801347e <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80134ba:	2003      	movs	r0, #3
 80134bc:	e7e6      	b.n	801348c <UART_CheckIdleState+0x38>
 80134be:	46c0      	nop			; (mov r8, r8)
 80134c0:	40013800 	.word	0x40013800
 80134c4:	40004400 	.word	0x40004400
 80134c8:	40004800 	.word	0x40004800

080134cc <HAL_UART_Init>:
{
 80134cc:	b510      	push	{r4, lr}
 80134ce:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80134d0:	d030      	beq.n	8013534 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80134d2:	2369      	movs	r3, #105	; 0x69
 80134d4:	5cc3      	ldrb	r3, [r0, r3]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d022      	beq.n	8013520 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80134da:	2369      	movs	r3, #105	; 0x69
 80134dc:	2202      	movs	r2, #2
 80134de:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80134e0:	6822      	ldr	r2, [r4, #0]
 80134e2:	6813      	ldr	r3, [r2, #0]
 80134e4:	2101      	movs	r1, #1
 80134e6:	438b      	bics	r3, r1
 80134e8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80134ea:	0020      	movs	r0, r4
 80134ec:	f7ff fd4c 	bl	8012f88 <UART_SetConfig>
 80134f0:	2801      	cmp	r0, #1
 80134f2:	d014      	beq.n	801351e <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80134f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d118      	bne.n	801352c <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80134fa:	6822      	ldr	r2, [r4, #0]
 80134fc:	6853      	ldr	r3, [r2, #4]
 80134fe:	490e      	ldr	r1, [pc, #56]	; (8013538 <HAL_UART_Init+0x6c>)
 8013500:	400b      	ands	r3, r1
 8013502:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013504:	6822      	ldr	r2, [r4, #0]
 8013506:	6893      	ldr	r3, [r2, #8]
 8013508:	212a      	movs	r1, #42	; 0x2a
 801350a:	438b      	bics	r3, r1
 801350c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801350e:	6822      	ldr	r2, [r4, #0]
 8013510:	6813      	ldr	r3, [r2, #0]
 8013512:	3929      	subs	r1, #41	; 0x29
 8013514:	430b      	orrs	r3, r1
 8013516:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013518:	0020      	movs	r0, r4
 801351a:	f7ff ff9b 	bl	8013454 <UART_CheckIdleState>
}
 801351e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013520:	3368      	adds	r3, #104	; 0x68
 8013522:	2200      	movs	r2, #0
 8013524:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013526:	f7fa fd89 	bl	800e03c <HAL_UART_MspInit>
 801352a:	e7d6      	b.n	80134da <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 801352c:	0020      	movs	r0, r4
 801352e:	f7ff fe4f 	bl	80131d0 <UART_AdvFeatureConfig>
 8013532:	e7e2      	b.n	80134fa <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013534:	2001      	movs	r0, #1
 8013536:	e7f2      	b.n	801351e <HAL_UART_Init+0x52>
 8013538:	ffffb7ff 	.word	0xffffb7ff

0801353c <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801353c:	2369      	movs	r3, #105	; 0x69
 801353e:	5cc3      	ldrb	r3, [r0, r3]
 8013540:	2b12      	cmp	r3, #18
 8013542:	d004      	beq.n	801354e <UART_Transmit_IT+0x12>
 8013544:	2369      	movs	r3, #105	; 0x69
 8013546:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8013548:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801354a:	2a32      	cmp	r2, #50	; 0x32
 801354c:	d113      	bne.n	8013576 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 801354e:	2352      	movs	r3, #82	; 0x52
 8013550:	5ac3      	ldrh	r3, [r0, r3]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d011      	beq.n	801357a <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013556:	2380      	movs	r3, #128	; 0x80
 8013558:	015b      	lsls	r3, r3, #5
 801355a:	6882      	ldr	r2, [r0, #8]
 801355c:	429a      	cmp	r2, r3
 801355e:	d018      	beq.n	8013592 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013560:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013562:	1c5a      	adds	r2, r3, #1
 8013564:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	6802      	ldr	r2, [r0, #0]
 801356a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 801356c:	2252      	movs	r2, #82	; 0x52
 801356e:	5a83      	ldrh	r3, [r0, r2]
 8013570:	3b01      	subs	r3, #1
 8013572:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8013574:	2300      	movs	r3, #0
  }
}
 8013576:	0018      	movs	r0, r3
 8013578:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801357a:	6802      	ldr	r2, [r0, #0]
 801357c:	6813      	ldr	r3, [r2, #0]
 801357e:	2180      	movs	r1, #128	; 0x80
 8013580:	438b      	bics	r3, r1
 8013582:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013584:	6802      	ldr	r2, [r0, #0]
 8013586:	6813      	ldr	r3, [r2, #0]
 8013588:	3940      	subs	r1, #64	; 0x40
 801358a:	430b      	orrs	r3, r1
 801358c:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 801358e:	2300      	movs	r3, #0
 8013590:	e7f1      	b.n	8013576 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013592:	6903      	ldr	r3, [r0, #16]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1e3      	bne.n	8013560 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013598:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	05db      	lsls	r3, r3, #23
 801359e:	0ddb      	lsrs	r3, r3, #23
 80135a0:	6802      	ldr	r2, [r0, #0]
 80135a2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80135a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80135a6:	3302      	adds	r3, #2
 80135a8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80135aa:	e7df      	b.n	801356c <UART_Transmit_IT+0x30>

080135ac <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80135ac:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80135ae:	6802      	ldr	r2, [r0, #0]
 80135b0:	6813      	ldr	r3, [r2, #0]
 80135b2:	2140      	movs	r1, #64	; 0x40
 80135b4:	438b      	bics	r3, r1
 80135b6:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80135b8:	2369      	movs	r3, #105	; 0x69
 80135ba:	5cc3      	ldrb	r3, [r0, r3]
 80135bc:	2b32      	cmp	r3, #50	; 0x32
 80135be:	d00a      	beq.n	80135d6 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80135c0:	6801      	ldr	r1, [r0, #0]
 80135c2:	688b      	ldr	r3, [r1, #8]
 80135c4:	2201      	movs	r2, #1
 80135c6:	4393      	bics	r3, r2
 80135c8:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80135ca:	2369      	movs	r3, #105	; 0x69
 80135cc:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80135ce:	f7fa fa73 	bl	800dab8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80135d2:	2000      	movs	r0, #0
 80135d4:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80135d6:	3337      	adds	r3, #55	; 0x37
 80135d8:	2222      	movs	r2, #34	; 0x22
 80135da:	54c2      	strb	r2, [r0, r3]
 80135dc:	e7f7      	b.n	80135ce <UART_EndTransmit_IT+0x22>
	...

080135e0 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80135e0:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80135e2:	2369      	movs	r3, #105	; 0x69
 80135e4:	5cc3      	ldrb	r3, [r0, r3]
 80135e6:	2b22      	cmp	r3, #34	; 0x22
 80135e8:	d004      	beq.n	80135f4 <UART_Receive_IT+0x14>
 80135ea:	2369      	movs	r3, #105	; 0x69
 80135ec:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80135ee:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80135f0:	2b32      	cmp	r3, #50	; 0x32
 80135f2:	d12d      	bne.n	8013650 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 80135f4:	235c      	movs	r3, #92	; 0x5c
 80135f6:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135f8:	2280      	movs	r2, #128	; 0x80
 80135fa:	0152      	lsls	r2, r2, #5
 80135fc:	6883      	ldr	r3, [r0, #8]
 80135fe:	4293      	cmp	r3, r2
 8013600:	d028      	beq.n	8013654 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013602:	6803      	ldr	r3, [r0, #0]
 8013604:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013606:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013608:	1c54      	adds	r4, r2, #1
 801360a:	6544      	str	r4, [r0, #84]	; 0x54
 801360c:	400b      	ands	r3, r1
 801360e:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8013610:	225a      	movs	r2, #90	; 0x5a
 8013612:	5a83      	ldrh	r3, [r0, r2]
 8013614:	3b01      	subs	r3, #1
 8013616:	b29b      	uxth	r3, r3
 8013618:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 801361a:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 801361c:	2b00      	cmp	r3, #0
 801361e:	d117      	bne.n	8013650 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013620:	6802      	ldr	r2, [r0, #0]
 8013622:	6813      	ldr	r3, [r2, #0]
 8013624:	2120      	movs	r1, #32
 8013626:	438b      	bics	r3, r1
 8013628:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801362a:	2369      	movs	r3, #105	; 0x69
 801362c:	5cc3      	ldrb	r3, [r0, r3]
 801362e:	2b32      	cmp	r3, #50	; 0x32
 8013630:	d01c      	beq.n	801366c <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013632:	6802      	ldr	r2, [r0, #0]
 8013634:	6813      	ldr	r3, [r2, #0]
 8013636:	490f      	ldr	r1, [pc, #60]	; (8013674 <UART_Receive_IT+0x94>)
 8013638:	400b      	ands	r3, r1
 801363a:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801363c:	6801      	ldr	r1, [r0, #0]
 801363e:	688b      	ldr	r3, [r1, #8]
 8013640:	2201      	movs	r2, #1
 8013642:	4393      	bics	r3, r2
 8013644:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8013646:	2369      	movs	r3, #105	; 0x69
 8013648:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801364a:	f7fa fa73 	bl	800db34 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801364e:	2200      	movs	r2, #0
  }
}
 8013650:	0010      	movs	r0, r2
 8013652:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013654:	6903      	ldr	r3, [r0, #16]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d1d3      	bne.n	8013602 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801365a:	6803      	ldr	r3, [r0, #0]
 801365c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801365e:	400b      	ands	r3, r1
 8013660:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013662:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8013664:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8013666:	3302      	adds	r3, #2
 8013668:	6543      	str	r3, [r0, #84]	; 0x54
 801366a:	e7d1      	b.n	8013610 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 801366c:	3337      	adds	r3, #55	; 0x37
 801366e:	2212      	movs	r2, #18
 8013670:	54c2      	strb	r2, [r0, r3]
 8013672:	e7ea      	b.n	801364a <UART_Receive_IT+0x6a>
 8013674:	fffffeff 	.word	0xfffffeff

08013678 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013678:	4770      	bx	lr

0801367a <HAL_UART_IRQHandler>:
{
 801367a:	b510      	push	{r4, lr}
 801367c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801367e:	6803      	ldr	r3, [r0, #0]
 8013680:	69da      	ldr	r2, [r3, #28]
 8013682:	07d2      	lsls	r2, r2, #31
 8013684:	d509      	bpl.n	801369a <HAL_UART_IRQHandler+0x20>
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	05d2      	lsls	r2, r2, #23
 801368a:	d506      	bpl.n	801369a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 801368c:	2201      	movs	r2, #1
 801368e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013690:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013692:	4313      	orrs	r3, r2
 8013694:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013696:	2369      	movs	r3, #105	; 0x69
 8013698:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801369a:	6823      	ldr	r3, [r4, #0]
 801369c:	69da      	ldr	r2, [r3, #28]
 801369e:	0792      	lsls	r2, r2, #30
 80136a0:	d50b      	bpl.n	80136ba <HAL_UART_IRQHandler+0x40>
 80136a2:	689a      	ldr	r2, [r3, #8]
 80136a4:	07d2      	lsls	r2, r2, #31
 80136a6:	d508      	bpl.n	80136ba <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80136a8:	2202      	movs	r2, #2
 80136aa:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80136ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80136ae:	3202      	adds	r2, #2
 80136b0:	4313      	orrs	r3, r2
 80136b2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80136b4:	2369      	movs	r3, #105	; 0x69
 80136b6:	3a03      	subs	r2, #3
 80136b8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80136ba:	6823      	ldr	r3, [r4, #0]
 80136bc:	69da      	ldr	r2, [r3, #28]
 80136be:	0752      	lsls	r2, r2, #29
 80136c0:	d50b      	bpl.n	80136da <HAL_UART_IRQHandler+0x60>
 80136c2:	689a      	ldr	r2, [r3, #8]
 80136c4:	07d2      	lsls	r2, r2, #31
 80136c6:	d508      	bpl.n	80136da <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80136c8:	2204      	movs	r2, #4
 80136ca:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80136cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80136ce:	3a02      	subs	r2, #2
 80136d0:	4313      	orrs	r3, r2
 80136d2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80136d4:	2369      	movs	r3, #105	; 0x69
 80136d6:	3a01      	subs	r2, #1
 80136d8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80136da:	6823      	ldr	r3, [r4, #0]
 80136dc:	69da      	ldr	r2, [r3, #28]
 80136de:	0712      	lsls	r2, r2, #28
 80136e0:	d50a      	bpl.n	80136f8 <HAL_UART_IRQHandler+0x7e>
 80136e2:	689a      	ldr	r2, [r3, #8]
 80136e4:	07d2      	lsls	r2, r2, #31
 80136e6:	d507      	bpl.n	80136f8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80136e8:	2208      	movs	r2, #8
 80136ea:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80136ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80136ee:	4313      	orrs	r3, r2
 80136f0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80136f2:	2369      	movs	r3, #105	; 0x69
 80136f4:	3a07      	subs	r2, #7
 80136f6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80136f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d11c      	bne.n	8013738 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80136fe:	6823      	ldr	r3, [r4, #0]
 8013700:	69da      	ldr	r2, [r3, #28]
 8013702:	02d2      	lsls	r2, r2, #11
 8013704:	d502      	bpl.n	801370c <HAL_UART_IRQHandler+0x92>
 8013706:	689a      	ldr	r2, [r3, #8]
 8013708:	0252      	lsls	r2, r2, #9
 801370a:	d419      	bmi.n	8013740 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 801370c:	6823      	ldr	r3, [r4, #0]
 801370e:	69da      	ldr	r2, [r3, #28]
 8013710:	0692      	lsls	r2, r2, #26
 8013712:	d502      	bpl.n	801371a <HAL_UART_IRQHandler+0xa0>
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	069b      	lsls	r3, r3, #26
 8013718:	d41c      	bmi.n	8013754 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 801371a:	6823      	ldr	r3, [r4, #0]
 801371c:	69da      	ldr	r2, [r3, #28]
 801371e:	0612      	lsls	r2, r2, #24
 8013720:	d502      	bpl.n	8013728 <HAL_UART_IRQHandler+0xae>
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	061b      	lsls	r3, r3, #24
 8013726:	d41e      	bmi.n	8013766 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	69da      	ldr	r2, [r3, #28]
 801372c:	0652      	lsls	r2, r2, #25
 801372e:	d502      	bpl.n	8013736 <HAL_UART_IRQHandler+0xbc>
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	065b      	lsls	r3, r3, #25
 8013734:	d41b      	bmi.n	801376e <HAL_UART_IRQHandler+0xf4>
}
 8013736:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013738:	0020      	movs	r0, r4
 801373a:	f7fa f9d5 	bl	800dae8 <HAL_UART_ErrorCallback>
 801373e:	e7de      	b.n	80136fe <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013740:	2280      	movs	r2, #128	; 0x80
 8013742:	0352      	lsls	r2, r2, #13
 8013744:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013746:	2369      	movs	r3, #105	; 0x69
 8013748:	2201      	movs	r2, #1
 801374a:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 801374c:	0020      	movs	r0, r4
 801374e:	f7ff ff93 	bl	8013678 <HAL_UARTEx_WakeupCallback>
 8013752:	e7db      	b.n	801370c <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013754:	0020      	movs	r0, r4
 8013756:	f7ff ff43 	bl	80135e0 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801375a:	6822      	ldr	r2, [r4, #0]
 801375c:	6993      	ldr	r3, [r2, #24]
 801375e:	2108      	movs	r1, #8
 8013760:	430b      	orrs	r3, r1
 8013762:	6193      	str	r3, [r2, #24]
 8013764:	e7d9      	b.n	801371a <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013766:	0020      	movs	r0, r4
 8013768:	f7ff fee8 	bl	801353c <UART_Transmit_IT>
 801376c:	e7dc      	b.n	8013728 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801376e:	0020      	movs	r0, r4
 8013770:	f7ff ff1c 	bl	80135ac <UART_EndTransmit_IT>
}
 8013774:	e7df      	b.n	8013736 <HAL_UART_IRQHandler+0xbc>

08013776 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013776:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013778:	f7f0 f966 	bl	8003a48 <Module_Init>
 801377c:	e7fe      	b.n	801377c <main+0x6>

0801377e <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 801377e:	e7fe      	b.n	801377e <UserTask>

08013780 <atof>:
 8013780:	b510      	push	{r4, lr}
 8013782:	2100      	movs	r1, #0
 8013784:	f001 fcba 	bl	80150fc <strtod>
 8013788:	bd10      	pop	{r4, pc}

0801378a <atoi>:
 801378a:	b510      	push	{r4, lr}
 801378c:	220a      	movs	r2, #10
 801378e:	2100      	movs	r1, #0
 8013790:	f001 fd9e 	bl	80152d0 <strtol>
 8013794:	bd10      	pop	{r4, pc}

08013796 <atol>:
 8013796:	b510      	push	{r4, lr}
 8013798:	220a      	movs	r2, #10
 801379a:	2100      	movs	r1, #0
 801379c:	f001 fd98 	bl	80152d0 <strtol>
 80137a0:	bd10      	pop	{r4, pc}
	...

080137a4 <__libc_init_array>:
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	2600      	movs	r6, #0
 80137a8:	4d0c      	ldr	r5, [pc, #48]	; (80137dc <__libc_init_array+0x38>)
 80137aa:	4c0d      	ldr	r4, [pc, #52]	; (80137e0 <__libc_init_array+0x3c>)
 80137ac:	1b64      	subs	r4, r4, r5
 80137ae:	10a4      	asrs	r4, r4, #2
 80137b0:	42a6      	cmp	r6, r4
 80137b2:	d109      	bne.n	80137c8 <__libc_init_array+0x24>
 80137b4:	2600      	movs	r6, #0
 80137b6:	f003 fd15 	bl	80171e4 <_init>
 80137ba:	4d0a      	ldr	r5, [pc, #40]	; (80137e4 <__libc_init_array+0x40>)
 80137bc:	4c0a      	ldr	r4, [pc, #40]	; (80137e8 <__libc_init_array+0x44>)
 80137be:	1b64      	subs	r4, r4, r5
 80137c0:	10a4      	asrs	r4, r4, #2
 80137c2:	42a6      	cmp	r6, r4
 80137c4:	d105      	bne.n	80137d2 <__libc_init_array+0x2e>
 80137c6:	bd70      	pop	{r4, r5, r6, pc}
 80137c8:	00b3      	lsls	r3, r6, #2
 80137ca:	58eb      	ldr	r3, [r5, r3]
 80137cc:	4798      	blx	r3
 80137ce:	3601      	adds	r6, #1
 80137d0:	e7ee      	b.n	80137b0 <__libc_init_array+0xc>
 80137d2:	00b3      	lsls	r3, r6, #2
 80137d4:	58eb      	ldr	r3, [r5, r3]
 80137d6:	4798      	blx	r3
 80137d8:	3601      	adds	r6, #1
 80137da:	e7f2      	b.n	80137c2 <__libc_init_array+0x1e>
 80137dc:	0801a528 	.word	0x0801a528
 80137e0:	0801a528 	.word	0x0801a528
 80137e4:	0801a528 	.word	0x0801a528
 80137e8:	0801a52c 	.word	0x0801a52c

080137ec <__locale_ctype_ptr_l>:
 80137ec:	30ec      	adds	r0, #236	; 0xec
 80137ee:	6800      	ldr	r0, [r0, #0]
 80137f0:	4770      	bx	lr
	...

080137f4 <__locale_ctype_ptr>:
 80137f4:	4b04      	ldr	r3, [pc, #16]	; (8013808 <__locale_ctype_ptr+0x14>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	6a1b      	ldr	r3, [r3, #32]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d100      	bne.n	8013800 <__locale_ctype_ptr+0xc>
 80137fe:	4b03      	ldr	r3, [pc, #12]	; (801380c <__locale_ctype_ptr+0x18>)
 8013800:	33ec      	adds	r3, #236	; 0xec
 8013802:	6818      	ldr	r0, [r3, #0]
 8013804:	4770      	bx	lr
 8013806:	46c0      	nop			; (mov r8, r8)
 8013808:	200000c0 	.word	0x200000c0
 801380c:	20000124 	.word	0x20000124

08013810 <malloc>:
 8013810:	b510      	push	{r4, lr}
 8013812:	4b03      	ldr	r3, [pc, #12]	; (8013820 <malloc+0x10>)
 8013814:	0001      	movs	r1, r0
 8013816:	6818      	ldr	r0, [r3, #0]
 8013818:	f000 f88a 	bl	8013930 <_malloc_r>
 801381c:	bd10      	pop	{r4, pc}
 801381e:	46c0      	nop			; (mov r8, r8)
 8013820:	200000c0 	.word	0x200000c0

08013824 <free>:
 8013824:	b510      	push	{r4, lr}
 8013826:	4b03      	ldr	r3, [pc, #12]	; (8013834 <free+0x10>)
 8013828:	0001      	movs	r1, r0
 801382a:	6818      	ldr	r0, [r3, #0]
 801382c:	f000 f836 	bl	801389c <_free_r>
 8013830:	bd10      	pop	{r4, pc}
 8013832:	46c0      	nop			; (mov r8, r8)
 8013834:	200000c0 	.word	0x200000c0

08013838 <__ascii_mbtowc>:
 8013838:	b082      	sub	sp, #8
 801383a:	2900      	cmp	r1, #0
 801383c:	d100      	bne.n	8013840 <__ascii_mbtowc+0x8>
 801383e:	a901      	add	r1, sp, #4
 8013840:	1e10      	subs	r0, r2, #0
 8013842:	d006      	beq.n	8013852 <__ascii_mbtowc+0x1a>
 8013844:	2b00      	cmp	r3, #0
 8013846:	d006      	beq.n	8013856 <__ascii_mbtowc+0x1e>
 8013848:	7813      	ldrb	r3, [r2, #0]
 801384a:	600b      	str	r3, [r1, #0]
 801384c:	7810      	ldrb	r0, [r2, #0]
 801384e:	1e43      	subs	r3, r0, #1
 8013850:	4198      	sbcs	r0, r3
 8013852:	b002      	add	sp, #8
 8013854:	4770      	bx	lr
 8013856:	2002      	movs	r0, #2
 8013858:	4240      	negs	r0, r0
 801385a:	e7fa      	b.n	8013852 <__ascii_mbtowc+0x1a>

0801385c <memcmp>:
 801385c:	b530      	push	{r4, r5, lr}
 801385e:	2400      	movs	r4, #0
 8013860:	42a2      	cmp	r2, r4
 8013862:	d101      	bne.n	8013868 <memcmp+0xc>
 8013864:	2000      	movs	r0, #0
 8013866:	e005      	b.n	8013874 <memcmp+0x18>
 8013868:	5d03      	ldrb	r3, [r0, r4]
 801386a:	1c65      	adds	r5, r4, #1
 801386c:	5d0c      	ldrb	r4, [r1, r4]
 801386e:	42a3      	cmp	r3, r4
 8013870:	d001      	beq.n	8013876 <memcmp+0x1a>
 8013872:	1b18      	subs	r0, r3, r4
 8013874:	bd30      	pop	{r4, r5, pc}
 8013876:	002c      	movs	r4, r5
 8013878:	e7f2      	b.n	8013860 <memcmp+0x4>

0801387a <memcpy>:
 801387a:	2300      	movs	r3, #0
 801387c:	b510      	push	{r4, lr}
 801387e:	429a      	cmp	r2, r3
 8013880:	d100      	bne.n	8013884 <memcpy+0xa>
 8013882:	bd10      	pop	{r4, pc}
 8013884:	5ccc      	ldrb	r4, [r1, r3]
 8013886:	54c4      	strb	r4, [r0, r3]
 8013888:	3301      	adds	r3, #1
 801388a:	e7f8      	b.n	801387e <memcpy+0x4>

0801388c <memset>:
 801388c:	0003      	movs	r3, r0
 801388e:	1812      	adds	r2, r2, r0
 8013890:	4293      	cmp	r3, r2
 8013892:	d100      	bne.n	8013896 <memset+0xa>
 8013894:	4770      	bx	lr
 8013896:	7019      	strb	r1, [r3, #0]
 8013898:	3301      	adds	r3, #1
 801389a:	e7f9      	b.n	8013890 <memset+0x4>

0801389c <_free_r>:
 801389c:	b570      	push	{r4, r5, r6, lr}
 801389e:	0005      	movs	r5, r0
 80138a0:	2900      	cmp	r1, #0
 80138a2:	d010      	beq.n	80138c6 <_free_r+0x2a>
 80138a4:	1f0c      	subs	r4, r1, #4
 80138a6:	6823      	ldr	r3, [r4, #0]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	da00      	bge.n	80138ae <_free_r+0x12>
 80138ac:	18e4      	adds	r4, r4, r3
 80138ae:	0028      	movs	r0, r5
 80138b0:	f002 fedf 	bl	8016672 <__malloc_lock>
 80138b4:	4a1d      	ldr	r2, [pc, #116]	; (801392c <_free_r+0x90>)
 80138b6:	6813      	ldr	r3, [r2, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d105      	bne.n	80138c8 <_free_r+0x2c>
 80138bc:	6063      	str	r3, [r4, #4]
 80138be:	6014      	str	r4, [r2, #0]
 80138c0:	0028      	movs	r0, r5
 80138c2:	f002 fed7 	bl	8016674 <__malloc_unlock>
 80138c6:	bd70      	pop	{r4, r5, r6, pc}
 80138c8:	42a3      	cmp	r3, r4
 80138ca:	d909      	bls.n	80138e0 <_free_r+0x44>
 80138cc:	6821      	ldr	r1, [r4, #0]
 80138ce:	1860      	adds	r0, r4, r1
 80138d0:	4283      	cmp	r3, r0
 80138d2:	d1f3      	bne.n	80138bc <_free_r+0x20>
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	1841      	adds	r1, r0, r1
 80138da:	6021      	str	r1, [r4, #0]
 80138dc:	e7ee      	b.n	80138bc <_free_r+0x20>
 80138de:	0013      	movs	r3, r2
 80138e0:	685a      	ldr	r2, [r3, #4]
 80138e2:	2a00      	cmp	r2, #0
 80138e4:	d001      	beq.n	80138ea <_free_r+0x4e>
 80138e6:	42a2      	cmp	r2, r4
 80138e8:	d9f9      	bls.n	80138de <_free_r+0x42>
 80138ea:	6819      	ldr	r1, [r3, #0]
 80138ec:	1858      	adds	r0, r3, r1
 80138ee:	42a0      	cmp	r0, r4
 80138f0:	d10b      	bne.n	801390a <_free_r+0x6e>
 80138f2:	6820      	ldr	r0, [r4, #0]
 80138f4:	1809      	adds	r1, r1, r0
 80138f6:	1858      	adds	r0, r3, r1
 80138f8:	6019      	str	r1, [r3, #0]
 80138fa:	4282      	cmp	r2, r0
 80138fc:	d1e0      	bne.n	80138c0 <_free_r+0x24>
 80138fe:	6810      	ldr	r0, [r2, #0]
 8013900:	6852      	ldr	r2, [r2, #4]
 8013902:	1841      	adds	r1, r0, r1
 8013904:	6019      	str	r1, [r3, #0]
 8013906:	605a      	str	r2, [r3, #4]
 8013908:	e7da      	b.n	80138c0 <_free_r+0x24>
 801390a:	42a0      	cmp	r0, r4
 801390c:	d902      	bls.n	8013914 <_free_r+0x78>
 801390e:	230c      	movs	r3, #12
 8013910:	602b      	str	r3, [r5, #0]
 8013912:	e7d5      	b.n	80138c0 <_free_r+0x24>
 8013914:	6821      	ldr	r1, [r4, #0]
 8013916:	1860      	adds	r0, r4, r1
 8013918:	4282      	cmp	r2, r0
 801391a:	d103      	bne.n	8013924 <_free_r+0x88>
 801391c:	6810      	ldr	r0, [r2, #0]
 801391e:	6852      	ldr	r2, [r2, #4]
 8013920:	1841      	adds	r1, r0, r1
 8013922:	6021      	str	r1, [r4, #0]
 8013924:	6062      	str	r2, [r4, #4]
 8013926:	605c      	str	r4, [r3, #4]
 8013928:	e7ca      	b.n	80138c0 <_free_r+0x24>
 801392a:	46c0      	nop			; (mov r8, r8)
 801392c:	200061e0 	.word	0x200061e0

08013930 <_malloc_r>:
 8013930:	2303      	movs	r3, #3
 8013932:	b570      	push	{r4, r5, r6, lr}
 8013934:	1ccd      	adds	r5, r1, #3
 8013936:	439d      	bics	r5, r3
 8013938:	3508      	adds	r5, #8
 801393a:	0006      	movs	r6, r0
 801393c:	2d0c      	cmp	r5, #12
 801393e:	d21e      	bcs.n	801397e <_malloc_r+0x4e>
 8013940:	250c      	movs	r5, #12
 8013942:	42a9      	cmp	r1, r5
 8013944:	d81d      	bhi.n	8013982 <_malloc_r+0x52>
 8013946:	0030      	movs	r0, r6
 8013948:	f002 fe93 	bl	8016672 <__malloc_lock>
 801394c:	4a25      	ldr	r2, [pc, #148]	; (80139e4 <_malloc_r+0xb4>)
 801394e:	6814      	ldr	r4, [r2, #0]
 8013950:	0021      	movs	r1, r4
 8013952:	2900      	cmp	r1, #0
 8013954:	d119      	bne.n	801398a <_malloc_r+0x5a>
 8013956:	4c24      	ldr	r4, [pc, #144]	; (80139e8 <_malloc_r+0xb8>)
 8013958:	6823      	ldr	r3, [r4, #0]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d103      	bne.n	8013966 <_malloc_r+0x36>
 801395e:	0030      	movs	r0, r6
 8013960:	f000 fcde 	bl	8014320 <_sbrk_r>
 8013964:	6020      	str	r0, [r4, #0]
 8013966:	0029      	movs	r1, r5
 8013968:	0030      	movs	r0, r6
 801396a:	f000 fcd9 	bl	8014320 <_sbrk_r>
 801396e:	1c43      	adds	r3, r0, #1
 8013970:	d12b      	bne.n	80139ca <_malloc_r+0x9a>
 8013972:	230c      	movs	r3, #12
 8013974:	0030      	movs	r0, r6
 8013976:	6033      	str	r3, [r6, #0]
 8013978:	f002 fe7c 	bl	8016674 <__malloc_unlock>
 801397c:	e003      	b.n	8013986 <_malloc_r+0x56>
 801397e:	2d00      	cmp	r5, #0
 8013980:	dadf      	bge.n	8013942 <_malloc_r+0x12>
 8013982:	230c      	movs	r3, #12
 8013984:	6033      	str	r3, [r6, #0]
 8013986:	2000      	movs	r0, #0
 8013988:	bd70      	pop	{r4, r5, r6, pc}
 801398a:	680b      	ldr	r3, [r1, #0]
 801398c:	1b5b      	subs	r3, r3, r5
 801398e:	d419      	bmi.n	80139c4 <_malloc_r+0x94>
 8013990:	2b0b      	cmp	r3, #11
 8013992:	d903      	bls.n	801399c <_malloc_r+0x6c>
 8013994:	600b      	str	r3, [r1, #0]
 8013996:	18cc      	adds	r4, r1, r3
 8013998:	6025      	str	r5, [r4, #0]
 801399a:	e003      	b.n	80139a4 <_malloc_r+0x74>
 801399c:	684b      	ldr	r3, [r1, #4]
 801399e:	428c      	cmp	r4, r1
 80139a0:	d10d      	bne.n	80139be <_malloc_r+0x8e>
 80139a2:	6013      	str	r3, [r2, #0]
 80139a4:	0030      	movs	r0, r6
 80139a6:	f002 fe65 	bl	8016674 <__malloc_unlock>
 80139aa:	0020      	movs	r0, r4
 80139ac:	2207      	movs	r2, #7
 80139ae:	300b      	adds	r0, #11
 80139b0:	1d23      	adds	r3, r4, #4
 80139b2:	4390      	bics	r0, r2
 80139b4:	1ac3      	subs	r3, r0, r3
 80139b6:	d0e7      	beq.n	8013988 <_malloc_r+0x58>
 80139b8:	425a      	negs	r2, r3
 80139ba:	50e2      	str	r2, [r4, r3]
 80139bc:	e7e4      	b.n	8013988 <_malloc_r+0x58>
 80139be:	6063      	str	r3, [r4, #4]
 80139c0:	000c      	movs	r4, r1
 80139c2:	e7ef      	b.n	80139a4 <_malloc_r+0x74>
 80139c4:	000c      	movs	r4, r1
 80139c6:	6849      	ldr	r1, [r1, #4]
 80139c8:	e7c3      	b.n	8013952 <_malloc_r+0x22>
 80139ca:	2303      	movs	r3, #3
 80139cc:	1cc4      	adds	r4, r0, #3
 80139ce:	439c      	bics	r4, r3
 80139d0:	42a0      	cmp	r0, r4
 80139d2:	d0e1      	beq.n	8013998 <_malloc_r+0x68>
 80139d4:	1a21      	subs	r1, r4, r0
 80139d6:	0030      	movs	r0, r6
 80139d8:	f000 fca2 	bl	8014320 <_sbrk_r>
 80139dc:	1c43      	adds	r3, r0, #1
 80139de:	d1db      	bne.n	8013998 <_malloc_r+0x68>
 80139e0:	e7c7      	b.n	8013972 <_malloc_r+0x42>
 80139e2:	46c0      	nop			; (mov r8, r8)
 80139e4:	200061e0 	.word	0x200061e0
 80139e8:	200061e4 	.word	0x200061e4

080139ec <__cvt>:
 80139ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ee:	b08b      	sub	sp, #44	; 0x2c
 80139f0:	0014      	movs	r4, r2
 80139f2:	1e1d      	subs	r5, r3, #0
 80139f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80139f6:	da53      	bge.n	8013aa0 <__cvt+0xb4>
 80139f8:	2480      	movs	r4, #128	; 0x80
 80139fa:	0624      	lsls	r4, r4, #24
 80139fc:	191b      	adds	r3, r3, r4
 80139fe:	001d      	movs	r5, r3
 8013a00:	0014      	movs	r4, r2
 8013a02:	232d      	movs	r3, #45	; 0x2d
 8013a04:	700b      	strb	r3, [r1, #0]
 8013a06:	2320      	movs	r3, #32
 8013a08:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013a0a:	2203      	movs	r2, #3
 8013a0c:	439e      	bics	r6, r3
 8013a0e:	2e46      	cmp	r6, #70	; 0x46
 8013a10:	d007      	beq.n	8013a22 <__cvt+0x36>
 8013a12:	0033      	movs	r3, r6
 8013a14:	3b45      	subs	r3, #69	; 0x45
 8013a16:	4259      	negs	r1, r3
 8013a18:	414b      	adcs	r3, r1
 8013a1a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8013a1c:	3a01      	subs	r2, #1
 8013a1e:	18cb      	adds	r3, r1, r3
 8013a20:	9310      	str	r3, [sp, #64]	; 0x40
 8013a22:	ab09      	add	r3, sp, #36	; 0x24
 8013a24:	9304      	str	r3, [sp, #16]
 8013a26:	ab08      	add	r3, sp, #32
 8013a28:	9303      	str	r3, [sp, #12]
 8013a2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a2c:	9200      	str	r2, [sp, #0]
 8013a2e:	9302      	str	r3, [sp, #8]
 8013a30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a32:	0022      	movs	r2, r4
 8013a34:	9301      	str	r3, [sp, #4]
 8013a36:	002b      	movs	r3, r5
 8013a38:	f001 fcf0 	bl	801541c <_dtoa_r>
 8013a3c:	0007      	movs	r7, r0
 8013a3e:	2e47      	cmp	r6, #71	; 0x47
 8013a40:	d102      	bne.n	8013a48 <__cvt+0x5c>
 8013a42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a44:	07db      	lsls	r3, r3, #31
 8013a46:	d524      	bpl.n	8013a92 <__cvt+0xa6>
 8013a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013a4a:	18fb      	adds	r3, r7, r3
 8013a4c:	9307      	str	r3, [sp, #28]
 8013a4e:	2e46      	cmp	r6, #70	; 0x46
 8013a50:	d114      	bne.n	8013a7c <__cvt+0x90>
 8013a52:	783b      	ldrb	r3, [r7, #0]
 8013a54:	2b30      	cmp	r3, #48	; 0x30
 8013a56:	d10c      	bne.n	8013a72 <__cvt+0x86>
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	0020      	movs	r0, r4
 8013a5e:	0029      	movs	r1, r5
 8013a60:	f7ec fcf2 	bl	8000448 <__aeabi_dcmpeq>
 8013a64:	2800      	cmp	r0, #0
 8013a66:	d104      	bne.n	8013a72 <__cvt+0x86>
 8013a68:	2301      	movs	r3, #1
 8013a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013a6c:	1a9b      	subs	r3, r3, r2
 8013a6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013a70:	6013      	str	r3, [r2, #0]
 8013a72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013a74:	9a07      	ldr	r2, [sp, #28]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	18d3      	adds	r3, r2, r3
 8013a7a:	9307      	str	r3, [sp, #28]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	2300      	movs	r3, #0
 8013a80:	0020      	movs	r0, r4
 8013a82:	0029      	movs	r1, r5
 8013a84:	f7ec fce0 	bl	8000448 <__aeabi_dcmpeq>
 8013a88:	2230      	movs	r2, #48	; 0x30
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d00d      	beq.n	8013aaa <__cvt+0xbe>
 8013a8e:	9b07      	ldr	r3, [sp, #28]
 8013a90:	9309      	str	r3, [sp, #36]	; 0x24
 8013a92:	0038      	movs	r0, r7
 8013a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013a98:	1bdb      	subs	r3, r3, r7
 8013a9a:	6013      	str	r3, [r2, #0]
 8013a9c:	b00b      	add	sp, #44	; 0x2c
 8013a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	e7af      	b.n	8013a04 <__cvt+0x18>
 8013aa4:	1c59      	adds	r1, r3, #1
 8013aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8013aa8:	701a      	strb	r2, [r3, #0]
 8013aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013aac:	9907      	ldr	r1, [sp, #28]
 8013aae:	428b      	cmp	r3, r1
 8013ab0:	d3f8      	bcc.n	8013aa4 <__cvt+0xb8>
 8013ab2:	e7ee      	b.n	8013a92 <__cvt+0xa6>

08013ab4 <__exponent>:
 8013ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ab6:	1c83      	adds	r3, r0, #2
 8013ab8:	b085      	sub	sp, #20
 8013aba:	9301      	str	r3, [sp, #4]
 8013abc:	0006      	movs	r6, r0
 8013abe:	000c      	movs	r4, r1
 8013ac0:	7002      	strb	r2, [r0, #0]
 8013ac2:	232b      	movs	r3, #43	; 0x2b
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	da01      	bge.n	8013acc <__exponent+0x18>
 8013ac8:	232d      	movs	r3, #45	; 0x2d
 8013aca:	424c      	negs	r4, r1
 8013acc:	7073      	strb	r3, [r6, #1]
 8013ace:	2c09      	cmp	r4, #9
 8013ad0:	dd22      	ble.n	8013b18 <__exponent+0x64>
 8013ad2:	ab02      	add	r3, sp, #8
 8013ad4:	1ddd      	adds	r5, r3, #7
 8013ad6:	0020      	movs	r0, r4
 8013ad8:	210a      	movs	r1, #10
 8013ada:	f7ec fc9f 	bl	800041c <__aeabi_idivmod>
 8013ade:	1e6f      	subs	r7, r5, #1
 8013ae0:	3130      	adds	r1, #48	; 0x30
 8013ae2:	7039      	strb	r1, [r7, #0]
 8013ae4:	0020      	movs	r0, r4
 8013ae6:	210a      	movs	r1, #10
 8013ae8:	f7ec fbb2 	bl	8000250 <__divsi3>
 8013aec:	0004      	movs	r4, r0
 8013aee:	2809      	cmp	r0, #9
 8013af0:	dc0b      	bgt.n	8013b0a <__exponent+0x56>
 8013af2:	3d02      	subs	r5, #2
 8013af4:	3430      	adds	r4, #48	; 0x30
 8013af6:	9b01      	ldr	r3, [sp, #4]
 8013af8:	702c      	strb	r4, [r5, #0]
 8013afa:	aa02      	add	r2, sp, #8
 8013afc:	3207      	adds	r2, #7
 8013afe:	0018      	movs	r0, r3
 8013b00:	42aa      	cmp	r2, r5
 8013b02:	d804      	bhi.n	8013b0e <__exponent+0x5a>
 8013b04:	1b80      	subs	r0, r0, r6
 8013b06:	b005      	add	sp, #20
 8013b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b0a:	003d      	movs	r5, r7
 8013b0c:	e7e3      	b.n	8013ad6 <__exponent+0x22>
 8013b0e:	782a      	ldrb	r2, [r5, #0]
 8013b10:	3501      	adds	r5, #1
 8013b12:	701a      	strb	r2, [r3, #0]
 8013b14:	3301      	adds	r3, #1
 8013b16:	e7f0      	b.n	8013afa <__exponent+0x46>
 8013b18:	2330      	movs	r3, #48	; 0x30
 8013b1a:	18e4      	adds	r4, r4, r3
 8013b1c:	70b3      	strb	r3, [r6, #2]
 8013b1e:	1d30      	adds	r0, r6, #4
 8013b20:	70f4      	strb	r4, [r6, #3]
 8013b22:	e7ef      	b.n	8013b04 <__exponent+0x50>

08013b24 <_printf_float>:
 8013b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b26:	b095      	sub	sp, #84	; 0x54
 8013b28:	000c      	movs	r4, r1
 8013b2a:	920a      	str	r2, [sp, #40]	; 0x28
 8013b2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b2e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8013b30:	9009      	str	r0, [sp, #36]	; 0x24
 8013b32:	f002 fd87 	bl	8016644 <_localeconv_r>
 8013b36:	6803      	ldr	r3, [r0, #0]
 8013b38:	0018      	movs	r0, r3
 8013b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8013b3c:	f7ec faec 	bl	8000118 <strlen>
 8013b40:	2300      	movs	r3, #0
 8013b42:	9312      	str	r3, [sp, #72]	; 0x48
 8013b44:	6823      	ldr	r3, [r4, #0]
 8013b46:	900e      	str	r0, [sp, #56]	; 0x38
 8013b48:	930d      	str	r3, [sp, #52]	; 0x34
 8013b4a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b4c:	7e27      	ldrb	r7, [r4, #24]
 8013b4e:	682b      	ldr	r3, [r5, #0]
 8013b50:	2207      	movs	r2, #7
 8013b52:	05c9      	lsls	r1, r1, #23
 8013b54:	d545      	bpl.n	8013be2 <_printf_float+0xbe>
 8013b56:	189b      	adds	r3, r3, r2
 8013b58:	4393      	bics	r3, r2
 8013b5a:	001a      	movs	r2, r3
 8013b5c:	3208      	adds	r2, #8
 8013b5e:	602a      	str	r2, [r5, #0]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	64a2      	str	r2, [r4, #72]	; 0x48
 8013b66:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013b68:	2201      	movs	r2, #1
 8013b6a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8013b6c:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8013b6e:	006b      	lsls	r3, r5, #1
 8013b70:	085b      	lsrs	r3, r3, #1
 8013b72:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b74:	4252      	negs	r2, r2
 8013b76:	4bac      	ldr	r3, [pc, #688]	; (8013e28 <_printf_float+0x304>)
 8013b78:	0030      	movs	r0, r6
 8013b7a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b7c:	f7ee ffc2 	bl	8002b04 <__aeabi_dcmpun>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	d130      	bne.n	8013be6 <_printf_float+0xc2>
 8013b84:	2201      	movs	r2, #1
 8013b86:	4ba8      	ldr	r3, [pc, #672]	; (8013e28 <_printf_float+0x304>)
 8013b88:	4252      	negs	r2, r2
 8013b8a:	0030      	movs	r0, r6
 8013b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b8e:	f7ec fc6b 	bl	8000468 <__aeabi_dcmple>
 8013b92:	2800      	cmp	r0, #0
 8013b94:	d127      	bne.n	8013be6 <_printf_float+0xc2>
 8013b96:	2200      	movs	r2, #0
 8013b98:	2300      	movs	r3, #0
 8013b9a:	0030      	movs	r0, r6
 8013b9c:	0029      	movs	r1, r5
 8013b9e:	f7ec fc59 	bl	8000454 <__aeabi_dcmplt>
 8013ba2:	2800      	cmp	r0, #0
 8013ba4:	d003      	beq.n	8013bae <_printf_float+0x8a>
 8013ba6:	0023      	movs	r3, r4
 8013ba8:	222d      	movs	r2, #45	; 0x2d
 8013baa:	3343      	adds	r3, #67	; 0x43
 8013bac:	701a      	strb	r2, [r3, #0]
 8013bae:	4d9f      	ldr	r5, [pc, #636]	; (8013e2c <_printf_float+0x308>)
 8013bb0:	2f47      	cmp	r7, #71	; 0x47
 8013bb2:	d800      	bhi.n	8013bb6 <_printf_float+0x92>
 8013bb4:	4d9e      	ldr	r5, [pc, #632]	; (8013e30 <_printf_float+0x30c>)
 8013bb6:	2303      	movs	r3, #3
 8013bb8:	2600      	movs	r6, #0
 8013bba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013bbc:	6123      	str	r3, [r4, #16]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	439a      	bics	r2, r3
 8013bc2:	6022      	str	r2, [r4, #0]
 8013bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013bc6:	aa13      	add	r2, sp, #76	; 0x4c
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	0021      	movs	r1, r4
 8013bcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bd0:	f000 f9f4 	bl	8013fbc <_printf_common>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d000      	beq.n	8013bda <_printf_float+0xb6>
 8013bd8:	e093      	b.n	8013d02 <_printf_float+0x1de>
 8013bda:	2001      	movs	r0, #1
 8013bdc:	4240      	negs	r0, r0
 8013bde:	b015      	add	sp, #84	; 0x54
 8013be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013be2:	3307      	adds	r3, #7
 8013be4:	e7b8      	b.n	8013b58 <_printf_float+0x34>
 8013be6:	0032      	movs	r2, r6
 8013be8:	002b      	movs	r3, r5
 8013bea:	0030      	movs	r0, r6
 8013bec:	0029      	movs	r1, r5
 8013bee:	f7ee ff89 	bl	8002b04 <__aeabi_dcmpun>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d004      	beq.n	8013c00 <_printf_float+0xdc>
 8013bf6:	4d8f      	ldr	r5, [pc, #572]	; (8013e34 <_printf_float+0x310>)
 8013bf8:	2f47      	cmp	r7, #71	; 0x47
 8013bfa:	d8dc      	bhi.n	8013bb6 <_printf_float+0x92>
 8013bfc:	4d8e      	ldr	r5, [pc, #568]	; (8013e38 <_printf_float+0x314>)
 8013bfe:	e7da      	b.n	8013bb6 <_printf_float+0x92>
 8013c00:	2380      	movs	r3, #128	; 0x80
 8013c02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013c04:	6862      	ldr	r2, [r4, #4]
 8013c06:	00db      	lsls	r3, r3, #3
 8013c08:	430b      	orrs	r3, r1
 8013c0a:	1c51      	adds	r1, r2, #1
 8013c0c:	d143      	bne.n	8013c96 <_printf_float+0x172>
 8013c0e:	3207      	adds	r2, #7
 8013c10:	6062      	str	r2, [r4, #4]
 8013c12:	aa12      	add	r2, sp, #72	; 0x48
 8013c14:	2100      	movs	r1, #0
 8013c16:	9205      	str	r2, [sp, #20]
 8013c18:	aa11      	add	r2, sp, #68	; 0x44
 8013c1a:	9203      	str	r2, [sp, #12]
 8013c1c:	2223      	movs	r2, #35	; 0x23
 8013c1e:	6023      	str	r3, [r4, #0]
 8013c20:	9106      	str	r1, [sp, #24]
 8013c22:	9301      	str	r3, [sp, #4]
 8013c24:	a908      	add	r1, sp, #32
 8013c26:	6863      	ldr	r3, [r4, #4]
 8013c28:	1852      	adds	r2, r2, r1
 8013c2a:	9202      	str	r2, [sp, #8]
 8013c2c:	9300      	str	r3, [sp, #0]
 8013c2e:	0032      	movs	r2, r6
 8013c30:	002b      	movs	r3, r5
 8013c32:	9704      	str	r7, [sp, #16]
 8013c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c36:	f7ff fed9 	bl	80139ec <__cvt>
 8013c3a:	2320      	movs	r3, #32
 8013c3c:	003a      	movs	r2, r7
 8013c3e:	0005      	movs	r5, r0
 8013c40:	439a      	bics	r2, r3
 8013c42:	2a47      	cmp	r2, #71	; 0x47
 8013c44:	d107      	bne.n	8013c56 <_printf_float+0x132>
 8013c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013c48:	1cda      	adds	r2, r3, #3
 8013c4a:	db02      	blt.n	8013c52 <_printf_float+0x12e>
 8013c4c:	6862      	ldr	r2, [r4, #4]
 8013c4e:	4293      	cmp	r3, r2
 8013c50:	dd45      	ble.n	8013cde <_printf_float+0x1ba>
 8013c52:	3f02      	subs	r7, #2
 8013c54:	b2ff      	uxtb	r7, r7
 8013c56:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013c58:	2f65      	cmp	r7, #101	; 0x65
 8013c5a:	d825      	bhi.n	8013ca8 <_printf_float+0x184>
 8013c5c:	0020      	movs	r0, r4
 8013c5e:	3901      	subs	r1, #1
 8013c60:	003a      	movs	r2, r7
 8013c62:	3050      	adds	r0, #80	; 0x50
 8013c64:	9111      	str	r1, [sp, #68]	; 0x44
 8013c66:	f7ff ff25 	bl	8013ab4 <__exponent>
 8013c6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013c6c:	0006      	movs	r6, r0
 8013c6e:	1813      	adds	r3, r2, r0
 8013c70:	6123      	str	r3, [r4, #16]
 8013c72:	2a01      	cmp	r2, #1
 8013c74:	dc02      	bgt.n	8013c7c <_printf_float+0x158>
 8013c76:	6822      	ldr	r2, [r4, #0]
 8013c78:	07d2      	lsls	r2, r2, #31
 8013c7a:	d501      	bpl.n	8013c80 <_printf_float+0x15c>
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	6123      	str	r3, [r4, #16]
 8013c80:	2323      	movs	r3, #35	; 0x23
 8013c82:	aa08      	add	r2, sp, #32
 8013c84:	189b      	adds	r3, r3, r2
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d09b      	beq.n	8013bc4 <_printf_float+0xa0>
 8013c8c:	0023      	movs	r3, r4
 8013c8e:	222d      	movs	r2, #45	; 0x2d
 8013c90:	3343      	adds	r3, #67	; 0x43
 8013c92:	701a      	strb	r2, [r3, #0]
 8013c94:	e796      	b.n	8013bc4 <_printf_float+0xa0>
 8013c96:	2f67      	cmp	r7, #103	; 0x67
 8013c98:	d100      	bne.n	8013c9c <_printf_float+0x178>
 8013c9a:	e176      	b.n	8013f8a <_printf_float+0x466>
 8013c9c:	2f47      	cmp	r7, #71	; 0x47
 8013c9e:	d1b8      	bne.n	8013c12 <_printf_float+0xee>
 8013ca0:	2a00      	cmp	r2, #0
 8013ca2:	d1b6      	bne.n	8013c12 <_printf_float+0xee>
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	e7b3      	b.n	8013c10 <_printf_float+0xec>
 8013ca8:	2f66      	cmp	r7, #102	; 0x66
 8013caa:	d119      	bne.n	8013ce0 <_printf_float+0x1bc>
 8013cac:	6863      	ldr	r3, [r4, #4]
 8013cae:	2900      	cmp	r1, #0
 8013cb0:	dd0c      	ble.n	8013ccc <_printf_float+0x1a8>
 8013cb2:	6121      	str	r1, [r4, #16]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d102      	bne.n	8013cbe <_printf_float+0x19a>
 8013cb8:	6822      	ldr	r2, [r4, #0]
 8013cba:	07d2      	lsls	r2, r2, #31
 8013cbc:	d502      	bpl.n	8013cc4 <_printf_float+0x1a0>
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	185b      	adds	r3, r3, r1
 8013cc2:	6123      	str	r3, [r4, #16]
 8013cc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013cc6:	2600      	movs	r6, #0
 8013cc8:	65a3      	str	r3, [r4, #88]	; 0x58
 8013cca:	e7d9      	b.n	8013c80 <_printf_float+0x15c>
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d103      	bne.n	8013cd8 <_printf_float+0x1b4>
 8013cd0:	2201      	movs	r2, #1
 8013cd2:	6821      	ldr	r1, [r4, #0]
 8013cd4:	4211      	tst	r1, r2
 8013cd6:	d000      	beq.n	8013cda <_printf_float+0x1b6>
 8013cd8:	1c9a      	adds	r2, r3, #2
 8013cda:	6122      	str	r2, [r4, #16]
 8013cdc:	e7f2      	b.n	8013cc4 <_printf_float+0x1a0>
 8013cde:	2767      	movs	r7, #103	; 0x67
 8013ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ce2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	db05      	blt.n	8013cf4 <_printf_float+0x1d0>
 8013ce8:	6822      	ldr	r2, [r4, #0]
 8013cea:	6123      	str	r3, [r4, #16]
 8013cec:	07d2      	lsls	r2, r2, #31
 8013cee:	d5e9      	bpl.n	8013cc4 <_printf_float+0x1a0>
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	e7e6      	b.n	8013cc2 <_printf_float+0x19e>
 8013cf4:	2101      	movs	r1, #1
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	dc01      	bgt.n	8013cfe <_printf_float+0x1da>
 8013cfa:	1849      	adds	r1, r1, r1
 8013cfc:	1ac9      	subs	r1, r1, r3
 8013cfe:	1852      	adds	r2, r2, r1
 8013d00:	e7eb      	b.n	8013cda <_printf_float+0x1b6>
 8013d02:	6822      	ldr	r2, [r4, #0]
 8013d04:	0553      	lsls	r3, r2, #21
 8013d06:	d408      	bmi.n	8013d1a <_printf_float+0x1f6>
 8013d08:	6923      	ldr	r3, [r4, #16]
 8013d0a:	002a      	movs	r2, r5
 8013d0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013d12:	47a8      	blx	r5
 8013d14:	1c43      	adds	r3, r0, #1
 8013d16:	d129      	bne.n	8013d6c <_printf_float+0x248>
 8013d18:	e75f      	b.n	8013bda <_printf_float+0xb6>
 8013d1a:	2f65      	cmp	r7, #101	; 0x65
 8013d1c:	d800      	bhi.n	8013d20 <_printf_float+0x1fc>
 8013d1e:	e0e0      	b.n	8013ee2 <_printf_float+0x3be>
 8013d20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013d22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013d24:	2200      	movs	r2, #0
 8013d26:	2300      	movs	r3, #0
 8013d28:	f7ec fb8e 	bl	8000448 <__aeabi_dcmpeq>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d034      	beq.n	8013d9a <_printf_float+0x276>
 8013d30:	2301      	movs	r3, #1
 8013d32:	4a42      	ldr	r2, [pc, #264]	; (8013e3c <_printf_float+0x318>)
 8013d34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d38:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013d3a:	47a8      	blx	r5
 8013d3c:	1c43      	adds	r3, r0, #1
 8013d3e:	d100      	bne.n	8013d42 <_printf_float+0x21e>
 8013d40:	e74b      	b.n	8013bda <_printf_float+0xb6>
 8013d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013d46:	4293      	cmp	r3, r2
 8013d48:	db02      	blt.n	8013d50 <_printf_float+0x22c>
 8013d4a:	6823      	ldr	r3, [r4, #0]
 8013d4c:	07db      	lsls	r3, r3, #31
 8013d4e:	d50d      	bpl.n	8013d6c <_printf_float+0x248>
 8013d50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d5a:	47a8      	blx	r5
 8013d5c:	2500      	movs	r5, #0
 8013d5e:	1c43      	adds	r3, r0, #1
 8013d60:	d100      	bne.n	8013d64 <_printf_float+0x240>
 8013d62:	e73a      	b.n	8013bda <_printf_float+0xb6>
 8013d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d66:	3b01      	subs	r3, #1
 8013d68:	42ab      	cmp	r3, r5
 8013d6a:	dc0a      	bgt.n	8013d82 <_printf_float+0x25e>
 8013d6c:	6823      	ldr	r3, [r4, #0]
 8013d6e:	079b      	lsls	r3, r3, #30
 8013d70:	d500      	bpl.n	8013d74 <_printf_float+0x250>
 8013d72:	e108      	b.n	8013f86 <_printf_float+0x462>
 8013d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d76:	68e0      	ldr	r0, [r4, #12]
 8013d78:	4298      	cmp	r0, r3
 8013d7a:	db00      	blt.n	8013d7e <_printf_float+0x25a>
 8013d7c:	e72f      	b.n	8013bde <_printf_float+0xba>
 8013d7e:	0018      	movs	r0, r3
 8013d80:	e72d      	b.n	8013bde <_printf_float+0xba>
 8013d82:	0022      	movs	r2, r4
 8013d84:	2301      	movs	r3, #1
 8013d86:	321a      	adds	r2, #26
 8013d88:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013d8e:	47b0      	blx	r6
 8013d90:	1c43      	adds	r3, r0, #1
 8013d92:	d100      	bne.n	8013d96 <_printf_float+0x272>
 8013d94:	e721      	b.n	8013bda <_printf_float+0xb6>
 8013d96:	3501      	adds	r5, #1
 8013d98:	e7e4      	b.n	8013d64 <_printf_float+0x240>
 8013d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	dc2d      	bgt.n	8013dfc <_printf_float+0x2d8>
 8013da0:	2301      	movs	r3, #1
 8013da2:	4a26      	ldr	r2, [pc, #152]	; (8013e3c <_printf_float+0x318>)
 8013da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013da8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013daa:	47b0      	blx	r6
 8013dac:	1c43      	adds	r3, r0, #1
 8013dae:	d100      	bne.n	8013db2 <_printf_float+0x28e>
 8013db0:	e713      	b.n	8013bda <_printf_float+0xb6>
 8013db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d105      	bne.n	8013dc4 <_printf_float+0x2a0>
 8013db8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d102      	bne.n	8013dc4 <_printf_float+0x2a0>
 8013dbe:	6823      	ldr	r3, [r4, #0]
 8013dc0:	07db      	lsls	r3, r3, #31
 8013dc2:	d5d3      	bpl.n	8013d6c <_printf_float+0x248>
 8013dc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013dc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013dca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dce:	47b0      	blx	r6
 8013dd0:	2600      	movs	r6, #0
 8013dd2:	1c43      	adds	r3, r0, #1
 8013dd4:	d100      	bne.n	8013dd8 <_printf_float+0x2b4>
 8013dd6:	e700      	b.n	8013bda <_printf_float+0xb6>
 8013dd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013dda:	425b      	negs	r3, r3
 8013ddc:	42b3      	cmp	r3, r6
 8013dde:	dc01      	bgt.n	8013de4 <_printf_float+0x2c0>
 8013de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013de2:	e792      	b.n	8013d0a <_printf_float+0x1e6>
 8013de4:	0022      	movs	r2, r4
 8013de6:	2301      	movs	r3, #1
 8013de8:	321a      	adds	r2, #26
 8013dea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013dee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013df0:	47b8      	blx	r7
 8013df2:	1c43      	adds	r3, r0, #1
 8013df4:	d100      	bne.n	8013df8 <_printf_float+0x2d4>
 8013df6:	e6f0      	b.n	8013bda <_printf_float+0xb6>
 8013df8:	3601      	adds	r6, #1
 8013dfa:	e7ed      	b.n	8013dd8 <_printf_float+0x2b4>
 8013dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013dfe:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013e00:	429f      	cmp	r7, r3
 8013e02:	dd00      	ble.n	8013e06 <_printf_float+0x2e2>
 8013e04:	001f      	movs	r7, r3
 8013e06:	2f00      	cmp	r7, #0
 8013e08:	dd08      	ble.n	8013e1c <_printf_float+0x2f8>
 8013e0a:	003b      	movs	r3, r7
 8013e0c:	002a      	movs	r2, r5
 8013e0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013e14:	47b0      	blx	r6
 8013e16:	1c43      	adds	r3, r0, #1
 8013e18:	d100      	bne.n	8013e1c <_printf_float+0x2f8>
 8013e1a:	e6de      	b.n	8013bda <_printf_float+0xb6>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8013e20:	43fb      	mvns	r3, r7
 8013e22:	17db      	asrs	r3, r3, #31
 8013e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e26:	e018      	b.n	8013e5a <_printf_float+0x336>
 8013e28:	7fefffff 	.word	0x7fefffff
 8013e2c:	0801a282 	.word	0x0801a282
 8013e30:	0801a27e 	.word	0x0801a27e
 8013e34:	0801a28a 	.word	0x0801a28a
 8013e38:	0801a286 	.word	0x0801a286
 8013e3c:	0801a28e 	.word	0x0801a28e
 8013e40:	0022      	movs	r2, r4
 8013e42:	2301      	movs	r3, #1
 8013e44:	321a      	adds	r2, #26
 8013e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013e4c:	47b0      	blx	r6
 8013e4e:	1c43      	adds	r3, r0, #1
 8013e50:	d100      	bne.n	8013e54 <_printf_float+0x330>
 8013e52:	e6c2      	b.n	8013bda <_printf_float+0xb6>
 8013e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e56:	3301      	adds	r3, #1
 8013e58:	930d      	str	r3, [sp, #52]	; 0x34
 8013e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e5c:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8013e5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e60:	403b      	ands	r3, r7
 8013e62:	1af3      	subs	r3, r6, r3
 8013e64:	4293      	cmp	r3, r2
 8013e66:	dceb      	bgt.n	8013e40 <_printf_float+0x31c>
 8013e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e6c:	19ad      	adds	r5, r5, r6
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	db10      	blt.n	8013e94 <_printf_float+0x370>
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	07db      	lsls	r3, r3, #31
 8013e76:	d40d      	bmi.n	8013e94 <_printf_float+0x370>
 8013e78:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013e7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e7c:	1bbe      	subs	r6, r7, r6
 8013e7e:	1aff      	subs	r7, r7, r3
 8013e80:	42b7      	cmp	r7, r6
 8013e82:	dd00      	ble.n	8013e86 <_printf_float+0x362>
 8013e84:	0037      	movs	r7, r6
 8013e86:	2f00      	cmp	r7, #0
 8013e88:	dc0d      	bgt.n	8013ea6 <_printf_float+0x382>
 8013e8a:	43fe      	mvns	r6, r7
 8013e8c:	17f3      	asrs	r3, r6, #31
 8013e8e:	2500      	movs	r5, #0
 8013e90:	930c      	str	r3, [sp, #48]	; 0x30
 8013e92:	e01c      	b.n	8013ece <_printf_float+0x3aa>
 8013e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013e9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013e9e:	47b8      	blx	r7
 8013ea0:	1c43      	adds	r3, r0, #1
 8013ea2:	d1e9      	bne.n	8013e78 <_printf_float+0x354>
 8013ea4:	e699      	b.n	8013bda <_printf_float+0xb6>
 8013ea6:	003b      	movs	r3, r7
 8013ea8:	002a      	movs	r2, r5
 8013eaa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013eae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013eb0:	47a8      	blx	r5
 8013eb2:	1c43      	adds	r3, r0, #1
 8013eb4:	d1e9      	bne.n	8013e8a <_printf_float+0x366>
 8013eb6:	e690      	b.n	8013bda <_printf_float+0xb6>
 8013eb8:	0022      	movs	r2, r4
 8013eba:	2301      	movs	r3, #1
 8013ebc:	321a      	adds	r2, #26
 8013ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ec2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013ec4:	47b0      	blx	r6
 8013ec6:	1c43      	adds	r3, r0, #1
 8013ec8:	d100      	bne.n	8013ecc <_printf_float+0x3a8>
 8013eca:	e686      	b.n	8013bda <_printf_float+0xb6>
 8013ecc:	3501      	adds	r5, #1
 8013ece:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013ed4:	1a9b      	subs	r3, r3, r2
 8013ed6:	003a      	movs	r2, r7
 8013ed8:	400a      	ands	r2, r1
 8013eda:	1a9b      	subs	r3, r3, r2
 8013edc:	42ab      	cmp	r3, r5
 8013ede:	dceb      	bgt.n	8013eb8 <_printf_float+0x394>
 8013ee0:	e744      	b.n	8013d6c <_printf_float+0x248>
 8013ee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013ee4:	2b01      	cmp	r3, #1
 8013ee6:	dc02      	bgt.n	8013eee <_printf_float+0x3ca>
 8013ee8:	2301      	movs	r3, #1
 8013eea:	421a      	tst	r2, r3
 8013eec:	d032      	beq.n	8013f54 <_printf_float+0x430>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	002a      	movs	r2, r5
 8013ef2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ef6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013ef8:	47b8      	blx	r7
 8013efa:	1c43      	adds	r3, r0, #1
 8013efc:	d100      	bne.n	8013f00 <_printf_float+0x3dc>
 8013efe:	e66c      	b.n	8013bda <_printf_float+0xb6>
 8013f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013f04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f08:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013f0a:	3501      	adds	r5, #1
 8013f0c:	47b8      	blx	r7
 8013f0e:	1c43      	adds	r3, r0, #1
 8013f10:	d100      	bne.n	8013f14 <_printf_float+0x3f0>
 8013f12:	e662      	b.n	8013bda <_printf_float+0xb6>
 8013f14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013f16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	1e5f      	subs	r7, r3, #1
 8013f1e:	2300      	movs	r3, #0
 8013f20:	f7ec fa92 	bl	8000448 <__aeabi_dcmpeq>
 8013f24:	003b      	movs	r3, r7
 8013f26:	2800      	cmp	r0, #0
 8013f28:	d014      	beq.n	8013f54 <_printf_float+0x430>
 8013f2a:	2500      	movs	r5, #0
 8013f2c:	e00a      	b.n	8013f44 <_printf_float+0x420>
 8013f2e:	0022      	movs	r2, r4
 8013f30:	2301      	movs	r3, #1
 8013f32:	321a      	adds	r2, #26
 8013f34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f38:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8013f3a:	47b8      	blx	r7
 8013f3c:	1c43      	adds	r3, r0, #1
 8013f3e:	d100      	bne.n	8013f42 <_printf_float+0x41e>
 8013f40:	e64b      	b.n	8013bda <_printf_float+0xb6>
 8013f42:	3501      	adds	r5, #1
 8013f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f46:	3b01      	subs	r3, #1
 8013f48:	42ab      	cmp	r3, r5
 8013f4a:	dcf0      	bgt.n	8013f2e <_printf_float+0x40a>
 8013f4c:	0022      	movs	r2, r4
 8013f4e:	0033      	movs	r3, r6
 8013f50:	3250      	adds	r2, #80	; 0x50
 8013f52:	e6db      	b.n	8013d0c <_printf_float+0x1e8>
 8013f54:	002a      	movs	r2, r5
 8013f56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8013f5c:	47a8      	blx	r5
 8013f5e:	1c43      	adds	r3, r0, #1
 8013f60:	d1f4      	bne.n	8013f4c <_printf_float+0x428>
 8013f62:	e63a      	b.n	8013bda <_printf_float+0xb6>
 8013f64:	0022      	movs	r2, r4
 8013f66:	2301      	movs	r3, #1
 8013f68:	3219      	adds	r2, #25
 8013f6a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f6e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013f70:	47b0      	blx	r6
 8013f72:	1c43      	adds	r3, r0, #1
 8013f74:	d100      	bne.n	8013f78 <_printf_float+0x454>
 8013f76:	e630      	b.n	8013bda <_printf_float+0xb6>
 8013f78:	3501      	adds	r5, #1
 8013f7a:	68e3      	ldr	r3, [r4, #12]
 8013f7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f7e:	1a9b      	subs	r3, r3, r2
 8013f80:	42ab      	cmp	r3, r5
 8013f82:	dcef      	bgt.n	8013f64 <_printf_float+0x440>
 8013f84:	e6f6      	b.n	8013d74 <_printf_float+0x250>
 8013f86:	2500      	movs	r5, #0
 8013f88:	e7f7      	b.n	8013f7a <_printf_float+0x456>
 8013f8a:	2a00      	cmp	r2, #0
 8013f8c:	d100      	bne.n	8013f90 <_printf_float+0x46c>
 8013f8e:	e689      	b.n	8013ca4 <_printf_float+0x180>
 8013f90:	2100      	movs	r1, #0
 8013f92:	9106      	str	r1, [sp, #24]
 8013f94:	a912      	add	r1, sp, #72	; 0x48
 8013f96:	9105      	str	r1, [sp, #20]
 8013f98:	a911      	add	r1, sp, #68	; 0x44
 8013f9a:	9103      	str	r1, [sp, #12]
 8013f9c:	2123      	movs	r1, #35	; 0x23
 8013f9e:	a808      	add	r0, sp, #32
 8013fa0:	1809      	adds	r1, r1, r0
 8013fa2:	6023      	str	r3, [r4, #0]
 8013fa4:	9301      	str	r3, [sp, #4]
 8013fa6:	9200      	str	r2, [sp, #0]
 8013fa8:	002b      	movs	r3, r5
 8013faa:	9704      	str	r7, [sp, #16]
 8013fac:	9102      	str	r1, [sp, #8]
 8013fae:	0032      	movs	r2, r6
 8013fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fb2:	f7ff fd1b 	bl	80139ec <__cvt>
 8013fb6:	0005      	movs	r5, r0
 8013fb8:	e645      	b.n	8013c46 <_printf_float+0x122>
 8013fba:	46c0      	nop			; (mov r8, r8)

08013fbc <_printf_common>:
 8013fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fbe:	0015      	movs	r5, r2
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	688a      	ldr	r2, [r1, #8]
 8013fc4:	690b      	ldr	r3, [r1, #16]
 8013fc6:	9000      	str	r0, [sp, #0]
 8013fc8:	000c      	movs	r4, r1
 8013fca:	4293      	cmp	r3, r2
 8013fcc:	da00      	bge.n	8013fd0 <_printf_common+0x14>
 8013fce:	0013      	movs	r3, r2
 8013fd0:	0022      	movs	r2, r4
 8013fd2:	602b      	str	r3, [r5, #0]
 8013fd4:	3243      	adds	r2, #67	; 0x43
 8013fd6:	7812      	ldrb	r2, [r2, #0]
 8013fd8:	2a00      	cmp	r2, #0
 8013fda:	d001      	beq.n	8013fe0 <_printf_common+0x24>
 8013fdc:	3301      	adds	r3, #1
 8013fde:	602b      	str	r3, [r5, #0]
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	069b      	lsls	r3, r3, #26
 8013fe4:	d502      	bpl.n	8013fec <_printf_common+0x30>
 8013fe6:	682b      	ldr	r3, [r5, #0]
 8013fe8:	3302      	adds	r3, #2
 8013fea:	602b      	str	r3, [r5, #0]
 8013fec:	2706      	movs	r7, #6
 8013fee:	6823      	ldr	r3, [r4, #0]
 8013ff0:	401f      	ands	r7, r3
 8013ff2:	d027      	beq.n	8014044 <_printf_common+0x88>
 8013ff4:	0023      	movs	r3, r4
 8013ff6:	3343      	adds	r3, #67	; 0x43
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	1e5a      	subs	r2, r3, #1
 8013ffc:	4193      	sbcs	r3, r2
 8013ffe:	6822      	ldr	r2, [r4, #0]
 8014000:	0692      	lsls	r2, r2, #26
 8014002:	d430      	bmi.n	8014066 <_printf_common+0xaa>
 8014004:	0022      	movs	r2, r4
 8014006:	9901      	ldr	r1, [sp, #4]
 8014008:	3243      	adds	r2, #67	; 0x43
 801400a:	9800      	ldr	r0, [sp, #0]
 801400c:	9e08      	ldr	r6, [sp, #32]
 801400e:	47b0      	blx	r6
 8014010:	1c43      	adds	r3, r0, #1
 8014012:	d025      	beq.n	8014060 <_printf_common+0xa4>
 8014014:	2306      	movs	r3, #6
 8014016:	6820      	ldr	r0, [r4, #0]
 8014018:	682a      	ldr	r2, [r5, #0]
 801401a:	68e1      	ldr	r1, [r4, #12]
 801401c:	4003      	ands	r3, r0
 801401e:	2500      	movs	r5, #0
 8014020:	2b04      	cmp	r3, #4
 8014022:	d103      	bne.n	801402c <_printf_common+0x70>
 8014024:	1a8d      	subs	r5, r1, r2
 8014026:	43eb      	mvns	r3, r5
 8014028:	17db      	asrs	r3, r3, #31
 801402a:	401d      	ands	r5, r3
 801402c:	68a3      	ldr	r3, [r4, #8]
 801402e:	6922      	ldr	r2, [r4, #16]
 8014030:	4293      	cmp	r3, r2
 8014032:	dd01      	ble.n	8014038 <_printf_common+0x7c>
 8014034:	1a9b      	subs	r3, r3, r2
 8014036:	18ed      	adds	r5, r5, r3
 8014038:	2700      	movs	r7, #0
 801403a:	42bd      	cmp	r5, r7
 801403c:	d120      	bne.n	8014080 <_printf_common+0xc4>
 801403e:	2000      	movs	r0, #0
 8014040:	e010      	b.n	8014064 <_printf_common+0xa8>
 8014042:	3701      	adds	r7, #1
 8014044:	68e3      	ldr	r3, [r4, #12]
 8014046:	682a      	ldr	r2, [r5, #0]
 8014048:	1a9b      	subs	r3, r3, r2
 801404a:	42bb      	cmp	r3, r7
 801404c:	ddd2      	ble.n	8013ff4 <_printf_common+0x38>
 801404e:	0022      	movs	r2, r4
 8014050:	2301      	movs	r3, #1
 8014052:	3219      	adds	r2, #25
 8014054:	9901      	ldr	r1, [sp, #4]
 8014056:	9800      	ldr	r0, [sp, #0]
 8014058:	9e08      	ldr	r6, [sp, #32]
 801405a:	47b0      	blx	r6
 801405c:	1c43      	adds	r3, r0, #1
 801405e:	d1f0      	bne.n	8014042 <_printf_common+0x86>
 8014060:	2001      	movs	r0, #1
 8014062:	4240      	negs	r0, r0
 8014064:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014066:	2030      	movs	r0, #48	; 0x30
 8014068:	18e1      	adds	r1, r4, r3
 801406a:	3143      	adds	r1, #67	; 0x43
 801406c:	7008      	strb	r0, [r1, #0]
 801406e:	0021      	movs	r1, r4
 8014070:	1c5a      	adds	r2, r3, #1
 8014072:	3145      	adds	r1, #69	; 0x45
 8014074:	7809      	ldrb	r1, [r1, #0]
 8014076:	18a2      	adds	r2, r4, r2
 8014078:	3243      	adds	r2, #67	; 0x43
 801407a:	3302      	adds	r3, #2
 801407c:	7011      	strb	r1, [r2, #0]
 801407e:	e7c1      	b.n	8014004 <_printf_common+0x48>
 8014080:	0022      	movs	r2, r4
 8014082:	2301      	movs	r3, #1
 8014084:	321a      	adds	r2, #26
 8014086:	9901      	ldr	r1, [sp, #4]
 8014088:	9800      	ldr	r0, [sp, #0]
 801408a:	9e08      	ldr	r6, [sp, #32]
 801408c:	47b0      	blx	r6
 801408e:	1c43      	adds	r3, r0, #1
 8014090:	d0e6      	beq.n	8014060 <_printf_common+0xa4>
 8014092:	3701      	adds	r7, #1
 8014094:	e7d1      	b.n	801403a <_printf_common+0x7e>
	...

08014098 <_printf_i>:
 8014098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801409a:	b089      	sub	sp, #36	; 0x24
 801409c:	9204      	str	r2, [sp, #16]
 801409e:	000a      	movs	r2, r1
 80140a0:	3243      	adds	r2, #67	; 0x43
 80140a2:	9305      	str	r3, [sp, #20]
 80140a4:	9003      	str	r0, [sp, #12]
 80140a6:	9202      	str	r2, [sp, #8]
 80140a8:	7e0a      	ldrb	r2, [r1, #24]
 80140aa:	000c      	movs	r4, r1
 80140ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140ae:	2a6e      	cmp	r2, #110	; 0x6e
 80140b0:	d100      	bne.n	80140b4 <_printf_i+0x1c>
 80140b2:	e086      	b.n	80141c2 <_printf_i+0x12a>
 80140b4:	d81f      	bhi.n	80140f6 <_printf_i+0x5e>
 80140b6:	2a63      	cmp	r2, #99	; 0x63
 80140b8:	d033      	beq.n	8014122 <_printf_i+0x8a>
 80140ba:	d808      	bhi.n	80140ce <_printf_i+0x36>
 80140bc:	2a00      	cmp	r2, #0
 80140be:	d100      	bne.n	80140c2 <_printf_i+0x2a>
 80140c0:	e08c      	b.n	80141dc <_printf_i+0x144>
 80140c2:	2a58      	cmp	r2, #88	; 0x58
 80140c4:	d04d      	beq.n	8014162 <_printf_i+0xca>
 80140c6:	0025      	movs	r5, r4
 80140c8:	3542      	adds	r5, #66	; 0x42
 80140ca:	702a      	strb	r2, [r5, #0]
 80140cc:	e030      	b.n	8014130 <_printf_i+0x98>
 80140ce:	2a64      	cmp	r2, #100	; 0x64
 80140d0:	d001      	beq.n	80140d6 <_printf_i+0x3e>
 80140d2:	2a69      	cmp	r2, #105	; 0x69
 80140d4:	d1f7      	bne.n	80140c6 <_printf_i+0x2e>
 80140d6:	6819      	ldr	r1, [r3, #0]
 80140d8:	6825      	ldr	r5, [r4, #0]
 80140da:	1d0a      	adds	r2, r1, #4
 80140dc:	0628      	lsls	r0, r5, #24
 80140de:	d529      	bpl.n	8014134 <_printf_i+0x9c>
 80140e0:	6808      	ldr	r0, [r1, #0]
 80140e2:	601a      	str	r2, [r3, #0]
 80140e4:	2800      	cmp	r0, #0
 80140e6:	da03      	bge.n	80140f0 <_printf_i+0x58>
 80140e8:	232d      	movs	r3, #45	; 0x2d
 80140ea:	9a02      	ldr	r2, [sp, #8]
 80140ec:	4240      	negs	r0, r0
 80140ee:	7013      	strb	r3, [r2, #0]
 80140f0:	4e6b      	ldr	r6, [pc, #428]	; (80142a0 <_printf_i+0x208>)
 80140f2:	270a      	movs	r7, #10
 80140f4:	e04f      	b.n	8014196 <_printf_i+0xfe>
 80140f6:	2a73      	cmp	r2, #115	; 0x73
 80140f8:	d074      	beq.n	80141e4 <_printf_i+0x14c>
 80140fa:	d808      	bhi.n	801410e <_printf_i+0x76>
 80140fc:	2a6f      	cmp	r2, #111	; 0x6f
 80140fe:	d01f      	beq.n	8014140 <_printf_i+0xa8>
 8014100:	2a70      	cmp	r2, #112	; 0x70
 8014102:	d1e0      	bne.n	80140c6 <_printf_i+0x2e>
 8014104:	2220      	movs	r2, #32
 8014106:	6809      	ldr	r1, [r1, #0]
 8014108:	430a      	orrs	r2, r1
 801410a:	6022      	str	r2, [r4, #0]
 801410c:	e003      	b.n	8014116 <_printf_i+0x7e>
 801410e:	2a75      	cmp	r2, #117	; 0x75
 8014110:	d016      	beq.n	8014140 <_printf_i+0xa8>
 8014112:	2a78      	cmp	r2, #120	; 0x78
 8014114:	d1d7      	bne.n	80140c6 <_printf_i+0x2e>
 8014116:	0022      	movs	r2, r4
 8014118:	2178      	movs	r1, #120	; 0x78
 801411a:	3245      	adds	r2, #69	; 0x45
 801411c:	7011      	strb	r1, [r2, #0]
 801411e:	4e61      	ldr	r6, [pc, #388]	; (80142a4 <_printf_i+0x20c>)
 8014120:	e022      	b.n	8014168 <_printf_i+0xd0>
 8014122:	0025      	movs	r5, r4
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	3542      	adds	r5, #66	; 0x42
 8014128:	1d11      	adds	r1, r2, #4
 801412a:	6019      	str	r1, [r3, #0]
 801412c:	6813      	ldr	r3, [r2, #0]
 801412e:	702b      	strb	r3, [r5, #0]
 8014130:	2301      	movs	r3, #1
 8014132:	e065      	b.n	8014200 <_printf_i+0x168>
 8014134:	6808      	ldr	r0, [r1, #0]
 8014136:	601a      	str	r2, [r3, #0]
 8014138:	0669      	lsls	r1, r5, #25
 801413a:	d5d3      	bpl.n	80140e4 <_printf_i+0x4c>
 801413c:	b200      	sxth	r0, r0
 801413e:	e7d1      	b.n	80140e4 <_printf_i+0x4c>
 8014140:	6819      	ldr	r1, [r3, #0]
 8014142:	6825      	ldr	r5, [r4, #0]
 8014144:	1d08      	adds	r0, r1, #4
 8014146:	6018      	str	r0, [r3, #0]
 8014148:	6808      	ldr	r0, [r1, #0]
 801414a:	062e      	lsls	r6, r5, #24
 801414c:	d505      	bpl.n	801415a <_printf_i+0xc2>
 801414e:	4e54      	ldr	r6, [pc, #336]	; (80142a0 <_printf_i+0x208>)
 8014150:	2708      	movs	r7, #8
 8014152:	2a6f      	cmp	r2, #111	; 0x6f
 8014154:	d01b      	beq.n	801418e <_printf_i+0xf6>
 8014156:	270a      	movs	r7, #10
 8014158:	e019      	b.n	801418e <_printf_i+0xf6>
 801415a:	066d      	lsls	r5, r5, #25
 801415c:	d5f7      	bpl.n	801414e <_printf_i+0xb6>
 801415e:	b280      	uxth	r0, r0
 8014160:	e7f5      	b.n	801414e <_printf_i+0xb6>
 8014162:	3145      	adds	r1, #69	; 0x45
 8014164:	4e4e      	ldr	r6, [pc, #312]	; (80142a0 <_printf_i+0x208>)
 8014166:	700a      	strb	r2, [r1, #0]
 8014168:	6818      	ldr	r0, [r3, #0]
 801416a:	6822      	ldr	r2, [r4, #0]
 801416c:	1d01      	adds	r1, r0, #4
 801416e:	6800      	ldr	r0, [r0, #0]
 8014170:	6019      	str	r1, [r3, #0]
 8014172:	0615      	lsls	r5, r2, #24
 8014174:	d521      	bpl.n	80141ba <_printf_i+0x122>
 8014176:	07d3      	lsls	r3, r2, #31
 8014178:	d502      	bpl.n	8014180 <_printf_i+0xe8>
 801417a:	2320      	movs	r3, #32
 801417c:	431a      	orrs	r2, r3
 801417e:	6022      	str	r2, [r4, #0]
 8014180:	2710      	movs	r7, #16
 8014182:	2800      	cmp	r0, #0
 8014184:	d103      	bne.n	801418e <_printf_i+0xf6>
 8014186:	2320      	movs	r3, #32
 8014188:	6822      	ldr	r2, [r4, #0]
 801418a:	439a      	bics	r2, r3
 801418c:	6022      	str	r2, [r4, #0]
 801418e:	0023      	movs	r3, r4
 8014190:	2200      	movs	r2, #0
 8014192:	3343      	adds	r3, #67	; 0x43
 8014194:	701a      	strb	r2, [r3, #0]
 8014196:	6863      	ldr	r3, [r4, #4]
 8014198:	60a3      	str	r3, [r4, #8]
 801419a:	2b00      	cmp	r3, #0
 801419c:	db58      	blt.n	8014250 <_printf_i+0x1b8>
 801419e:	2204      	movs	r2, #4
 80141a0:	6821      	ldr	r1, [r4, #0]
 80141a2:	4391      	bics	r1, r2
 80141a4:	6021      	str	r1, [r4, #0]
 80141a6:	2800      	cmp	r0, #0
 80141a8:	d154      	bne.n	8014254 <_printf_i+0x1bc>
 80141aa:	9d02      	ldr	r5, [sp, #8]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d05a      	beq.n	8014266 <_printf_i+0x1ce>
 80141b0:	0025      	movs	r5, r4
 80141b2:	7833      	ldrb	r3, [r6, #0]
 80141b4:	3542      	adds	r5, #66	; 0x42
 80141b6:	702b      	strb	r3, [r5, #0]
 80141b8:	e055      	b.n	8014266 <_printf_i+0x1ce>
 80141ba:	0655      	lsls	r5, r2, #25
 80141bc:	d5db      	bpl.n	8014176 <_printf_i+0xde>
 80141be:	b280      	uxth	r0, r0
 80141c0:	e7d9      	b.n	8014176 <_printf_i+0xde>
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	680d      	ldr	r5, [r1, #0]
 80141c6:	1d10      	adds	r0, r2, #4
 80141c8:	6949      	ldr	r1, [r1, #20]
 80141ca:	6018      	str	r0, [r3, #0]
 80141cc:	6813      	ldr	r3, [r2, #0]
 80141ce:	062e      	lsls	r6, r5, #24
 80141d0:	d501      	bpl.n	80141d6 <_printf_i+0x13e>
 80141d2:	6019      	str	r1, [r3, #0]
 80141d4:	e002      	b.n	80141dc <_printf_i+0x144>
 80141d6:	066d      	lsls	r5, r5, #25
 80141d8:	d5fb      	bpl.n	80141d2 <_printf_i+0x13a>
 80141da:	8019      	strh	r1, [r3, #0]
 80141dc:	2300      	movs	r3, #0
 80141de:	9d02      	ldr	r5, [sp, #8]
 80141e0:	6123      	str	r3, [r4, #16]
 80141e2:	e04f      	b.n	8014284 <_printf_i+0x1ec>
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	1d11      	adds	r1, r2, #4
 80141e8:	6019      	str	r1, [r3, #0]
 80141ea:	6815      	ldr	r5, [r2, #0]
 80141ec:	2100      	movs	r1, #0
 80141ee:	6862      	ldr	r2, [r4, #4]
 80141f0:	0028      	movs	r0, r5
 80141f2:	f002 fa33 	bl	801665c <memchr>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d001      	beq.n	80141fe <_printf_i+0x166>
 80141fa:	1b40      	subs	r0, r0, r5
 80141fc:	6060      	str	r0, [r4, #4]
 80141fe:	6863      	ldr	r3, [r4, #4]
 8014200:	6123      	str	r3, [r4, #16]
 8014202:	2300      	movs	r3, #0
 8014204:	9a02      	ldr	r2, [sp, #8]
 8014206:	7013      	strb	r3, [r2, #0]
 8014208:	e03c      	b.n	8014284 <_printf_i+0x1ec>
 801420a:	6923      	ldr	r3, [r4, #16]
 801420c:	002a      	movs	r2, r5
 801420e:	9904      	ldr	r1, [sp, #16]
 8014210:	9803      	ldr	r0, [sp, #12]
 8014212:	9d05      	ldr	r5, [sp, #20]
 8014214:	47a8      	blx	r5
 8014216:	1c43      	adds	r3, r0, #1
 8014218:	d03e      	beq.n	8014298 <_printf_i+0x200>
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	079b      	lsls	r3, r3, #30
 801421e:	d415      	bmi.n	801424c <_printf_i+0x1b4>
 8014220:	9b07      	ldr	r3, [sp, #28]
 8014222:	68e0      	ldr	r0, [r4, #12]
 8014224:	4298      	cmp	r0, r3
 8014226:	da39      	bge.n	801429c <_printf_i+0x204>
 8014228:	0018      	movs	r0, r3
 801422a:	e037      	b.n	801429c <_printf_i+0x204>
 801422c:	0022      	movs	r2, r4
 801422e:	2301      	movs	r3, #1
 8014230:	3219      	adds	r2, #25
 8014232:	9904      	ldr	r1, [sp, #16]
 8014234:	9803      	ldr	r0, [sp, #12]
 8014236:	9e05      	ldr	r6, [sp, #20]
 8014238:	47b0      	blx	r6
 801423a:	1c43      	adds	r3, r0, #1
 801423c:	d02c      	beq.n	8014298 <_printf_i+0x200>
 801423e:	3501      	adds	r5, #1
 8014240:	68e3      	ldr	r3, [r4, #12]
 8014242:	9a07      	ldr	r2, [sp, #28]
 8014244:	1a9b      	subs	r3, r3, r2
 8014246:	42ab      	cmp	r3, r5
 8014248:	dcf0      	bgt.n	801422c <_printf_i+0x194>
 801424a:	e7e9      	b.n	8014220 <_printf_i+0x188>
 801424c:	2500      	movs	r5, #0
 801424e:	e7f7      	b.n	8014240 <_printf_i+0x1a8>
 8014250:	2800      	cmp	r0, #0
 8014252:	d0ad      	beq.n	80141b0 <_printf_i+0x118>
 8014254:	9d02      	ldr	r5, [sp, #8]
 8014256:	0039      	movs	r1, r7
 8014258:	f7eb fff6 	bl	8000248 <__aeabi_uidivmod>
 801425c:	5c73      	ldrb	r3, [r6, r1]
 801425e:	3d01      	subs	r5, #1
 8014260:	702b      	strb	r3, [r5, #0]
 8014262:	2800      	cmp	r0, #0
 8014264:	d1f7      	bne.n	8014256 <_printf_i+0x1be>
 8014266:	2f08      	cmp	r7, #8
 8014268:	d109      	bne.n	801427e <_printf_i+0x1e6>
 801426a:	6823      	ldr	r3, [r4, #0]
 801426c:	07db      	lsls	r3, r3, #31
 801426e:	d506      	bpl.n	801427e <_printf_i+0x1e6>
 8014270:	6863      	ldr	r3, [r4, #4]
 8014272:	6922      	ldr	r2, [r4, #16]
 8014274:	4293      	cmp	r3, r2
 8014276:	dc02      	bgt.n	801427e <_printf_i+0x1e6>
 8014278:	2330      	movs	r3, #48	; 0x30
 801427a:	3d01      	subs	r5, #1
 801427c:	702b      	strb	r3, [r5, #0]
 801427e:	9b02      	ldr	r3, [sp, #8]
 8014280:	1b5b      	subs	r3, r3, r5
 8014282:	6123      	str	r3, [r4, #16]
 8014284:	9b05      	ldr	r3, [sp, #20]
 8014286:	aa07      	add	r2, sp, #28
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	0021      	movs	r1, r4
 801428c:	9b04      	ldr	r3, [sp, #16]
 801428e:	9803      	ldr	r0, [sp, #12]
 8014290:	f7ff fe94 	bl	8013fbc <_printf_common>
 8014294:	1c43      	adds	r3, r0, #1
 8014296:	d1b8      	bne.n	801420a <_printf_i+0x172>
 8014298:	2001      	movs	r0, #1
 801429a:	4240      	negs	r0, r0
 801429c:	b009      	add	sp, #36	; 0x24
 801429e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142a0:	0801a290 	.word	0x0801a290
 80142a4:	0801a2a1 	.word	0x0801a2a1

080142a8 <rand>:
 80142a8:	4b12      	ldr	r3, [pc, #72]	; (80142f4 <rand+0x4c>)
 80142aa:	b510      	push	{r4, lr}
 80142ac:	681c      	ldr	r4, [r3, #0]
 80142ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d10f      	bne.n	80142d4 <rand+0x2c>
 80142b4:	2018      	movs	r0, #24
 80142b6:	f7ff faab 	bl	8013810 <malloc>
 80142ba:	4b0f      	ldr	r3, [pc, #60]	; (80142f8 <rand+0x50>)
 80142bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80142be:	6003      	str	r3, [r0, #0]
 80142c0:	4b0e      	ldr	r3, [pc, #56]	; (80142fc <rand+0x54>)
 80142c2:	2201      	movs	r2, #1
 80142c4:	6043      	str	r3, [r0, #4]
 80142c6:	4b0e      	ldr	r3, [pc, #56]	; (8014300 <rand+0x58>)
 80142c8:	6083      	str	r3, [r0, #8]
 80142ca:	230b      	movs	r3, #11
 80142cc:	8183      	strh	r3, [r0, #12]
 80142ce:	2300      	movs	r3, #0
 80142d0:	6102      	str	r2, [r0, #16]
 80142d2:	6143      	str	r3, [r0, #20]
 80142d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80142d6:	4a0b      	ldr	r2, [pc, #44]	; (8014304 <rand+0x5c>)
 80142d8:	6920      	ldr	r0, [r4, #16]
 80142da:	6961      	ldr	r1, [r4, #20]
 80142dc:	4b0a      	ldr	r3, [pc, #40]	; (8014308 <rand+0x60>)
 80142de:	f7ec f91b 	bl	8000518 <__aeabi_lmul>
 80142e2:	2201      	movs	r2, #1
 80142e4:	2300      	movs	r3, #0
 80142e6:	1880      	adds	r0, r0, r2
 80142e8:	4159      	adcs	r1, r3
 80142ea:	6120      	str	r0, [r4, #16]
 80142ec:	6161      	str	r1, [r4, #20]
 80142ee:	0048      	lsls	r0, r1, #1
 80142f0:	0840      	lsrs	r0, r0, #1
 80142f2:	bd10      	pop	{r4, pc}
 80142f4:	200000c0 	.word	0x200000c0
 80142f8:	abcd330e 	.word	0xabcd330e
 80142fc:	e66d1234 	.word	0xe66d1234
 8014300:	0005deec 	.word	0x0005deec
 8014304:	4c957f2d 	.word	0x4c957f2d
 8014308:	5851f42d 	.word	0x5851f42d

0801430c <realloc>:
 801430c:	b510      	push	{r4, lr}
 801430e:	4b03      	ldr	r3, [pc, #12]	; (801431c <realloc+0x10>)
 8014310:	000a      	movs	r2, r1
 8014312:	0001      	movs	r1, r0
 8014314:	6818      	ldr	r0, [r3, #0]
 8014316:	f002 fdb2 	bl	8016e7e <_realloc_r>
 801431a:	bd10      	pop	{r4, pc}
 801431c:	200000c0 	.word	0x200000c0

08014320 <_sbrk_r>:
 8014320:	2300      	movs	r3, #0
 8014322:	b570      	push	{r4, r5, r6, lr}
 8014324:	4c06      	ldr	r4, [pc, #24]	; (8014340 <_sbrk_r+0x20>)
 8014326:	0005      	movs	r5, r0
 8014328:	0008      	movs	r0, r1
 801432a:	6023      	str	r3, [r4, #0]
 801432c:	f002 ff4a 	bl	80171c4 <_sbrk>
 8014330:	1c43      	adds	r3, r0, #1
 8014332:	d103      	bne.n	801433c <_sbrk_r+0x1c>
 8014334:	6823      	ldr	r3, [r4, #0]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d000      	beq.n	801433c <_sbrk_r+0x1c>
 801433a:	602b      	str	r3, [r5, #0]
 801433c:	bd70      	pop	{r4, r5, r6, pc}
 801433e:	46c0      	nop			; (mov r8, r8)
 8014340:	200067d0 	.word	0x200067d0

08014344 <sniprintf>:
 8014344:	b40c      	push	{r2, r3}
 8014346:	b530      	push	{r4, r5, lr}
 8014348:	4b16      	ldr	r3, [pc, #88]	; (80143a4 <sniprintf+0x60>)
 801434a:	b09d      	sub	sp, #116	; 0x74
 801434c:	1e0c      	subs	r4, r1, #0
 801434e:	681d      	ldr	r5, [r3, #0]
 8014350:	da08      	bge.n	8014364 <sniprintf+0x20>
 8014352:	238b      	movs	r3, #139	; 0x8b
 8014354:	2001      	movs	r0, #1
 8014356:	602b      	str	r3, [r5, #0]
 8014358:	4240      	negs	r0, r0
 801435a:	b01d      	add	sp, #116	; 0x74
 801435c:	bc30      	pop	{r4, r5}
 801435e:	bc08      	pop	{r3}
 8014360:	b002      	add	sp, #8
 8014362:	4718      	bx	r3
 8014364:	2382      	movs	r3, #130	; 0x82
 8014366:	a902      	add	r1, sp, #8
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	818b      	strh	r3, [r1, #12]
 801436c:	2300      	movs	r3, #0
 801436e:	9002      	str	r0, [sp, #8]
 8014370:	6108      	str	r0, [r1, #16]
 8014372:	429c      	cmp	r4, r3
 8014374:	d000      	beq.n	8014378 <sniprintf+0x34>
 8014376:	1e63      	subs	r3, r4, #1
 8014378:	608b      	str	r3, [r1, #8]
 801437a:	614b      	str	r3, [r1, #20]
 801437c:	2301      	movs	r3, #1
 801437e:	425b      	negs	r3, r3
 8014380:	81cb      	strh	r3, [r1, #14]
 8014382:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014384:	ab21      	add	r3, sp, #132	; 0x84
 8014386:	0028      	movs	r0, r5
 8014388:	9301      	str	r3, [sp, #4]
 801438a:	f002 fe01 	bl	8016f90 <_svfiprintf_r>
 801438e:	1c43      	adds	r3, r0, #1
 8014390:	da01      	bge.n	8014396 <sniprintf+0x52>
 8014392:	238b      	movs	r3, #139	; 0x8b
 8014394:	602b      	str	r3, [r5, #0]
 8014396:	2c00      	cmp	r4, #0
 8014398:	d0df      	beq.n	801435a <sniprintf+0x16>
 801439a:	2300      	movs	r3, #0
 801439c:	9a02      	ldr	r2, [sp, #8]
 801439e:	7013      	strb	r3, [r2, #0]
 80143a0:	e7db      	b.n	801435a <sniprintf+0x16>
 80143a2:	46c0      	nop			; (mov r8, r8)
 80143a4:	200000c0 	.word	0x200000c0

080143a8 <siprintf>:
 80143a8:	b40e      	push	{r1, r2, r3}
 80143aa:	b500      	push	{lr}
 80143ac:	490b      	ldr	r1, [pc, #44]	; (80143dc <siprintf+0x34>)
 80143ae:	b09c      	sub	sp, #112	; 0x70
 80143b0:	ab1d      	add	r3, sp, #116	; 0x74
 80143b2:	9002      	str	r0, [sp, #8]
 80143b4:	9006      	str	r0, [sp, #24]
 80143b6:	9107      	str	r1, [sp, #28]
 80143b8:	9104      	str	r1, [sp, #16]
 80143ba:	4809      	ldr	r0, [pc, #36]	; (80143e0 <siprintf+0x38>)
 80143bc:	4909      	ldr	r1, [pc, #36]	; (80143e4 <siprintf+0x3c>)
 80143be:	cb04      	ldmia	r3!, {r2}
 80143c0:	9105      	str	r1, [sp, #20]
 80143c2:	6800      	ldr	r0, [r0, #0]
 80143c4:	a902      	add	r1, sp, #8
 80143c6:	9301      	str	r3, [sp, #4]
 80143c8:	f002 fde2 	bl	8016f90 <_svfiprintf_r>
 80143cc:	2300      	movs	r3, #0
 80143ce:	9a02      	ldr	r2, [sp, #8]
 80143d0:	7013      	strb	r3, [r2, #0]
 80143d2:	b01c      	add	sp, #112	; 0x70
 80143d4:	bc08      	pop	{r3}
 80143d6:	b003      	add	sp, #12
 80143d8:	4718      	bx	r3
 80143da:	46c0      	nop			; (mov r8, r8)
 80143dc:	7fffffff 	.word	0x7fffffff
 80143e0:	200000c0 	.word	0x200000c0
 80143e4:	ffff0208 	.word	0xffff0208

080143e8 <strcat>:
 80143e8:	0002      	movs	r2, r0
 80143ea:	b510      	push	{r4, lr}
 80143ec:	7813      	ldrb	r3, [r2, #0]
 80143ee:	1c54      	adds	r4, r2, #1
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d105      	bne.n	8014400 <strcat+0x18>
 80143f4:	5ccc      	ldrb	r4, [r1, r3]
 80143f6:	54d4      	strb	r4, [r2, r3]
 80143f8:	3301      	adds	r3, #1
 80143fa:	2c00      	cmp	r4, #0
 80143fc:	d1fa      	bne.n	80143f4 <strcat+0xc>
 80143fe:	bd10      	pop	{r4, pc}
 8014400:	0022      	movs	r2, r4
 8014402:	e7f3      	b.n	80143ec <strcat+0x4>

08014404 <strchr>:
 8014404:	b2c9      	uxtb	r1, r1
 8014406:	7803      	ldrb	r3, [r0, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d004      	beq.n	8014416 <strchr+0x12>
 801440c:	428b      	cmp	r3, r1
 801440e:	d100      	bne.n	8014412 <strchr+0xe>
 8014410:	4770      	bx	lr
 8014412:	3001      	adds	r0, #1
 8014414:	e7f7      	b.n	8014406 <strchr+0x2>
 8014416:	424b      	negs	r3, r1
 8014418:	4159      	adcs	r1, r3
 801441a:	4249      	negs	r1, r1
 801441c:	4008      	ands	r0, r1
 801441e:	e7f7      	b.n	8014410 <strchr+0xc>

08014420 <strcpy>:
 8014420:	0003      	movs	r3, r0
 8014422:	780a      	ldrb	r2, [r1, #0]
 8014424:	3101      	adds	r1, #1
 8014426:	701a      	strb	r2, [r3, #0]
 8014428:	3301      	adds	r3, #1
 801442a:	2a00      	cmp	r2, #0
 801442c:	d1f9      	bne.n	8014422 <strcpy+0x2>
 801442e:	4770      	bx	lr

08014430 <strncmp>:
 8014430:	2300      	movs	r3, #0
 8014432:	b530      	push	{r4, r5, lr}
 8014434:	429a      	cmp	r2, r3
 8014436:	d00a      	beq.n	801444e <strncmp+0x1e>
 8014438:	3a01      	subs	r2, #1
 801443a:	5cc4      	ldrb	r4, [r0, r3]
 801443c:	5ccd      	ldrb	r5, [r1, r3]
 801443e:	42ac      	cmp	r4, r5
 8014440:	d104      	bne.n	801444c <strncmp+0x1c>
 8014442:	4293      	cmp	r3, r2
 8014444:	d002      	beq.n	801444c <strncmp+0x1c>
 8014446:	3301      	adds	r3, #1
 8014448:	2c00      	cmp	r4, #0
 801444a:	d1f6      	bne.n	801443a <strncmp+0xa>
 801444c:	1b63      	subs	r3, r4, r5
 801444e:	0018      	movs	r0, r3
 8014450:	bd30      	pop	{r4, r5, pc}

08014452 <strncpy>:
 8014452:	b530      	push	{r4, r5, lr}
 8014454:	0005      	movs	r5, r0
 8014456:	2a00      	cmp	r2, #0
 8014458:	d100      	bne.n	801445c <strncpy+0xa>
 801445a:	bd30      	pop	{r4, r5, pc}
 801445c:	780c      	ldrb	r4, [r1, #0]
 801445e:	3a01      	subs	r2, #1
 8014460:	1c6b      	adds	r3, r5, #1
 8014462:	702c      	strb	r4, [r5, #0]
 8014464:	3101      	adds	r1, #1
 8014466:	2c00      	cmp	r4, #0
 8014468:	d105      	bne.n	8014476 <strncpy+0x24>
 801446a:	189a      	adds	r2, r3, r2
 801446c:	429a      	cmp	r2, r3
 801446e:	d0f4      	beq.n	801445a <strncpy+0x8>
 8014470:	701c      	strb	r4, [r3, #0]
 8014472:	3301      	adds	r3, #1
 8014474:	e7fa      	b.n	801446c <strncpy+0x1a>
 8014476:	001d      	movs	r5, r3
 8014478:	e7ed      	b.n	8014456 <strncpy+0x4>
	...

0801447c <sulp>:
 801447c:	b570      	push	{r4, r5, r6, lr}
 801447e:	0016      	movs	r6, r2
 8014480:	000d      	movs	r5, r1
 8014482:	f002 fbc9 	bl	8016c18 <__ulp>
 8014486:	2e00      	cmp	r6, #0
 8014488:	d00d      	beq.n	80144a6 <sulp+0x2a>
 801448a:	236b      	movs	r3, #107	; 0x6b
 801448c:	006a      	lsls	r2, r5, #1
 801448e:	0d52      	lsrs	r2, r2, #21
 8014490:	1a9b      	subs	r3, r3, r2
 8014492:	2b00      	cmp	r3, #0
 8014494:	dd07      	ble.n	80144a6 <sulp+0x2a>
 8014496:	2400      	movs	r4, #0
 8014498:	4a03      	ldr	r2, [pc, #12]	; (80144a8 <sulp+0x2c>)
 801449a:	051b      	lsls	r3, r3, #20
 801449c:	189d      	adds	r5, r3, r2
 801449e:	002b      	movs	r3, r5
 80144a0:	0022      	movs	r2, r4
 80144a2:	f7ed fd75 	bl	8001f90 <__aeabi_dmul>
 80144a6:	bd70      	pop	{r4, r5, r6, pc}
 80144a8:	3ff00000 	.word	0x3ff00000

080144ac <_strtod_l>:
 80144ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144ae:	b0a7      	sub	sp, #156	; 0x9c
 80144b0:	9307      	str	r3, [sp, #28]
 80144b2:	2300      	movs	r3, #0
 80144b4:	9004      	str	r0, [sp, #16]
 80144b6:	9807      	ldr	r0, [sp, #28]
 80144b8:	9322      	str	r3, [sp, #136]	; 0x88
 80144ba:	9106      	str	r1, [sp, #24]
 80144bc:	921d      	str	r2, [sp, #116]	; 0x74
 80144be:	f002 f8be 	bl	801663e <__localeconv_l>
 80144c2:	0005      	movs	r5, r0
 80144c4:	6800      	ldr	r0, [r0, #0]
 80144c6:	f7eb fe27 	bl	8000118 <strlen>
 80144ca:	2600      	movs	r6, #0
 80144cc:	2700      	movs	r7, #0
 80144ce:	9b06      	ldr	r3, [sp, #24]
 80144d0:	9005      	str	r0, [sp, #20]
 80144d2:	9321      	str	r3, [sp, #132]	; 0x84
 80144d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144d6:	781a      	ldrb	r2, [r3, #0]
 80144d8:	2a0d      	cmp	r2, #13
 80144da:	d839      	bhi.n	8014550 <_strtod_l+0xa4>
 80144dc:	2a09      	cmp	r2, #9
 80144de:	d23d      	bcs.n	801455c <_strtod_l+0xb0>
 80144e0:	2a00      	cmp	r2, #0
 80144e2:	d044      	beq.n	801456e <_strtod_l+0xc2>
 80144e4:	2300      	movs	r3, #0
 80144e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80144e8:	2200      	movs	r2, #0
 80144ea:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80144ec:	920c      	str	r2, [sp, #48]	; 0x30
 80144ee:	7823      	ldrb	r3, [r4, #0]
 80144f0:	2b30      	cmp	r3, #48	; 0x30
 80144f2:	d000      	beq.n	80144f6 <_strtod_l+0x4a>
 80144f4:	e07e      	b.n	80145f4 <_strtod_l+0x148>
 80144f6:	7863      	ldrb	r3, [r4, #1]
 80144f8:	2b58      	cmp	r3, #88	; 0x58
 80144fa:	d002      	beq.n	8014502 <_strtod_l+0x56>
 80144fc:	2b78      	cmp	r3, #120	; 0x78
 80144fe:	d000      	beq.n	8014502 <_strtod_l+0x56>
 8014500:	e06e      	b.n	80145e0 <_strtod_l+0x134>
 8014502:	9b07      	ldr	r3, [sp, #28]
 8014504:	4a96      	ldr	r2, [pc, #600]	; (8014760 <_strtod_l+0x2b4>)
 8014506:	9302      	str	r3, [sp, #8]
 8014508:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801450a:	a921      	add	r1, sp, #132	; 0x84
 801450c:	9301      	str	r3, [sp, #4]
 801450e:	ab22      	add	r3, sp, #136	; 0x88
 8014510:	9300      	str	r3, [sp, #0]
 8014512:	9804      	ldr	r0, [sp, #16]
 8014514:	ab23      	add	r3, sp, #140	; 0x8c
 8014516:	f001 fdaa 	bl	801606e <__gethex>
 801451a:	2507      	movs	r5, #7
 801451c:	9005      	str	r0, [sp, #20]
 801451e:	4005      	ands	r5, r0
 8014520:	d005      	beq.n	801452e <_strtod_l+0x82>
 8014522:	2d06      	cmp	r5, #6
 8014524:	d12f      	bne.n	8014586 <_strtod_l+0xda>
 8014526:	2300      	movs	r3, #0
 8014528:	3401      	adds	r4, #1
 801452a:	9421      	str	r4, [sp, #132]	; 0x84
 801452c:	9313      	str	r3, [sp, #76]	; 0x4c
 801452e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014530:	2b00      	cmp	r3, #0
 8014532:	d002      	beq.n	801453a <_strtod_l+0x8e>
 8014534:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014536:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014538:	601a      	str	r2, [r3, #0]
 801453a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801453c:	2b00      	cmp	r3, #0
 801453e:	d01d      	beq.n	801457c <_strtod_l+0xd0>
 8014540:	2380      	movs	r3, #128	; 0x80
 8014542:	0032      	movs	r2, r6
 8014544:	061b      	lsls	r3, r3, #24
 8014546:	18fb      	adds	r3, r7, r3
 8014548:	0010      	movs	r0, r2
 801454a:	0019      	movs	r1, r3
 801454c:	b027      	add	sp, #156	; 0x9c
 801454e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014550:	2a2b      	cmp	r2, #43	; 0x2b
 8014552:	d016      	beq.n	8014582 <_strtod_l+0xd6>
 8014554:	2a2d      	cmp	r2, #45	; 0x2d
 8014556:	d003      	beq.n	8014560 <_strtod_l+0xb4>
 8014558:	2a20      	cmp	r2, #32
 801455a:	d1c3      	bne.n	80144e4 <_strtod_l+0x38>
 801455c:	3301      	adds	r3, #1
 801455e:	e7b8      	b.n	80144d2 <_strtod_l+0x26>
 8014560:	2201      	movs	r2, #1
 8014562:	9213      	str	r2, [sp, #76]	; 0x4c
 8014564:	1c5a      	adds	r2, r3, #1
 8014566:	9221      	str	r2, [sp, #132]	; 0x84
 8014568:	785b      	ldrb	r3, [r3, #1]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d1bc      	bne.n	80144e8 <_strtod_l+0x3c>
 801456e:	9b06      	ldr	r3, [sp, #24]
 8014570:	9321      	str	r3, [sp, #132]	; 0x84
 8014572:	2300      	movs	r3, #0
 8014574:	9313      	str	r3, [sp, #76]	; 0x4c
 8014576:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014578:	2b00      	cmp	r3, #0
 801457a:	d1db      	bne.n	8014534 <_strtod_l+0x88>
 801457c:	0032      	movs	r2, r6
 801457e:	003b      	movs	r3, r7
 8014580:	e7e2      	b.n	8014548 <_strtod_l+0x9c>
 8014582:	2200      	movs	r2, #0
 8014584:	e7ed      	b.n	8014562 <_strtod_l+0xb6>
 8014586:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014588:	2a00      	cmp	r2, #0
 801458a:	d007      	beq.n	801459c <_strtod_l+0xf0>
 801458c:	2135      	movs	r1, #53	; 0x35
 801458e:	a824      	add	r0, sp, #144	; 0x90
 8014590:	f002 fc2f 	bl	8016df2 <__copybits>
 8014594:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014596:	9804      	ldr	r0, [sp, #16]
 8014598:	f002 f8a5 	bl	80166e6 <_Bfree>
 801459c:	1e68      	subs	r0, r5, #1
 801459e:	2804      	cmp	r0, #4
 80145a0:	d806      	bhi.n	80145b0 <_strtod_l+0x104>
 80145a2:	f7eb fdc1 	bl	8000128 <__gnu_thumb1_case_uqi>
 80145a6:	030c      	.short	0x030c
 80145a8:	1917      	.short	0x1917
 80145aa:	0c          	.byte	0x0c
 80145ab:	00          	.byte	0x00
 80145ac:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80145ae:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80145b0:	9b05      	ldr	r3, [sp, #20]
 80145b2:	071b      	lsls	r3, r3, #28
 80145b4:	d5bb      	bpl.n	801452e <_strtod_l+0x82>
 80145b6:	2380      	movs	r3, #128	; 0x80
 80145b8:	061b      	lsls	r3, r3, #24
 80145ba:	431f      	orrs	r7, r3
 80145bc:	e7b7      	b.n	801452e <_strtod_l+0x82>
 80145be:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80145c0:	4a68      	ldr	r2, [pc, #416]	; (8014764 <_strtod_l+0x2b8>)
 80145c2:	4969      	ldr	r1, [pc, #420]	; (8014768 <_strtod_l+0x2bc>)
 80145c4:	401a      	ands	r2, r3
 80145c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80145c8:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80145ca:	185b      	adds	r3, r3, r1
 80145cc:	051b      	lsls	r3, r3, #20
 80145ce:	431a      	orrs	r2, r3
 80145d0:	0017      	movs	r7, r2
 80145d2:	e7ed      	b.n	80145b0 <_strtod_l+0x104>
 80145d4:	4f65      	ldr	r7, [pc, #404]	; (801476c <_strtod_l+0x2c0>)
 80145d6:	e7eb      	b.n	80145b0 <_strtod_l+0x104>
 80145d8:	2601      	movs	r6, #1
 80145da:	4f65      	ldr	r7, [pc, #404]	; (8014770 <_strtod_l+0x2c4>)
 80145dc:	4276      	negs	r6, r6
 80145de:	e7e7      	b.n	80145b0 <_strtod_l+0x104>
 80145e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145e2:	1c5a      	adds	r2, r3, #1
 80145e4:	9221      	str	r2, [sp, #132]	; 0x84
 80145e6:	785b      	ldrb	r3, [r3, #1]
 80145e8:	2b30      	cmp	r3, #48	; 0x30
 80145ea:	d0f9      	beq.n	80145e0 <_strtod_l+0x134>
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d09e      	beq.n	801452e <_strtod_l+0x82>
 80145f0:	2301      	movs	r3, #1
 80145f2:	930c      	str	r3, [sp, #48]	; 0x30
 80145f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145f6:	220a      	movs	r2, #10
 80145f8:	9312      	str	r3, [sp, #72]	; 0x48
 80145fa:	2300      	movs	r3, #0
 80145fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80145fe:	9308      	str	r3, [sp, #32]
 8014600:	930a      	str	r3, [sp, #40]	; 0x28
 8014602:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014604:	7804      	ldrb	r4, [r0, #0]
 8014606:	0023      	movs	r3, r4
 8014608:	3b30      	subs	r3, #48	; 0x30
 801460a:	b2d9      	uxtb	r1, r3
 801460c:	2909      	cmp	r1, #9
 801460e:	d934      	bls.n	801467a <_strtod_l+0x1ce>
 8014610:	9a05      	ldr	r2, [sp, #20]
 8014612:	6829      	ldr	r1, [r5, #0]
 8014614:	f7ff ff0c 	bl	8014430 <strncmp>
 8014618:	2800      	cmp	r0, #0
 801461a:	d040      	beq.n	801469e <_strtod_l+0x1f2>
 801461c:	2000      	movs	r0, #0
 801461e:	0023      	movs	r3, r4
 8014620:	4684      	mov	ip, r0
 8014622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014624:	9007      	str	r0, [sp, #28]
 8014626:	9205      	str	r2, [sp, #20]
 8014628:	2220      	movs	r2, #32
 801462a:	0019      	movs	r1, r3
 801462c:	4391      	bics	r1, r2
 801462e:	000a      	movs	r2, r1
 8014630:	2100      	movs	r1, #0
 8014632:	2a45      	cmp	r2, #69	; 0x45
 8014634:	d000      	beq.n	8014638 <_strtod_l+0x18c>
 8014636:	e0bf      	b.n	80147b8 <_strtod_l+0x30c>
 8014638:	9b05      	ldr	r3, [sp, #20]
 801463a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801463c:	4303      	orrs	r3, r0
 801463e:	4313      	orrs	r3, r2
 8014640:	428b      	cmp	r3, r1
 8014642:	d094      	beq.n	801456e <_strtod_l+0xc2>
 8014644:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014646:	9306      	str	r3, [sp, #24]
 8014648:	3301      	adds	r3, #1
 801464a:	9321      	str	r3, [sp, #132]	; 0x84
 801464c:	9b06      	ldr	r3, [sp, #24]
 801464e:	785b      	ldrb	r3, [r3, #1]
 8014650:	2b2b      	cmp	r3, #43	; 0x2b
 8014652:	d100      	bne.n	8014656 <_strtod_l+0x1aa>
 8014654:	e082      	b.n	801475c <_strtod_l+0x2b0>
 8014656:	000c      	movs	r4, r1
 8014658:	2b2d      	cmp	r3, #45	; 0x2d
 801465a:	d105      	bne.n	8014668 <_strtod_l+0x1bc>
 801465c:	2401      	movs	r4, #1
 801465e:	9b06      	ldr	r3, [sp, #24]
 8014660:	3302      	adds	r3, #2
 8014662:	9321      	str	r3, [sp, #132]	; 0x84
 8014664:	9b06      	ldr	r3, [sp, #24]
 8014666:	789b      	ldrb	r3, [r3, #2]
 8014668:	001a      	movs	r2, r3
 801466a:	3a30      	subs	r2, #48	; 0x30
 801466c:	2a09      	cmp	r2, #9
 801466e:	d800      	bhi.n	8014672 <_strtod_l+0x1c6>
 8014670:	e084      	b.n	801477c <_strtod_l+0x2d0>
 8014672:	9a06      	ldr	r2, [sp, #24]
 8014674:	2100      	movs	r1, #0
 8014676:	9221      	str	r2, [sp, #132]	; 0x84
 8014678:	e09e      	b.n	80147b8 <_strtod_l+0x30c>
 801467a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801467c:	2908      	cmp	r1, #8
 801467e:	dc09      	bgt.n	8014694 <_strtod_l+0x1e8>
 8014680:	9908      	ldr	r1, [sp, #32]
 8014682:	4351      	muls	r1, r2
 8014684:	18cb      	adds	r3, r1, r3
 8014686:	9308      	str	r3, [sp, #32]
 8014688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801468a:	3001      	adds	r0, #1
 801468c:	3301      	adds	r3, #1
 801468e:	930a      	str	r3, [sp, #40]	; 0x28
 8014690:	9021      	str	r0, [sp, #132]	; 0x84
 8014692:	e7b6      	b.n	8014602 <_strtod_l+0x156>
 8014694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014696:	4351      	muls	r1, r2
 8014698:	18cb      	adds	r3, r1, r3
 801469a:	930b      	str	r3, [sp, #44]	; 0x2c
 801469c:	e7f4      	b.n	8014688 <_strtod_l+0x1dc>
 801469e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146a0:	9b05      	ldr	r3, [sp, #20]
 80146a2:	4694      	mov	ip, r2
 80146a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146a6:	4463      	add	r3, ip
 80146a8:	9321      	str	r3, [sp, #132]	; 0x84
 80146aa:	781b      	ldrb	r3, [r3, #0]
 80146ac:	2a00      	cmp	r2, #0
 80146ae:	d036      	beq.n	801471e <_strtod_l+0x272>
 80146b0:	4684      	mov	ip, r0
 80146b2:	9205      	str	r2, [sp, #20]
 80146b4:	001a      	movs	r2, r3
 80146b6:	3a30      	subs	r2, #48	; 0x30
 80146b8:	2a09      	cmp	r2, #9
 80146ba:	d912      	bls.n	80146e2 <_strtod_l+0x236>
 80146bc:	2201      	movs	r2, #1
 80146be:	9207      	str	r2, [sp, #28]
 80146c0:	e7b2      	b.n	8014628 <_strtod_l+0x17c>
 80146c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146c4:	3001      	adds	r0, #1
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	9221      	str	r2, [sp, #132]	; 0x84
 80146ca:	785b      	ldrb	r3, [r3, #1]
 80146cc:	2b30      	cmp	r3, #48	; 0x30
 80146ce:	d0f8      	beq.n	80146c2 <_strtod_l+0x216>
 80146d0:	001a      	movs	r2, r3
 80146d2:	3a31      	subs	r2, #49	; 0x31
 80146d4:	2a08      	cmp	r2, #8
 80146d6:	d83c      	bhi.n	8014752 <_strtod_l+0x2a6>
 80146d8:	4684      	mov	ip, r0
 80146da:	2000      	movs	r0, #0
 80146dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146de:	9005      	str	r0, [sp, #20]
 80146e0:	9212      	str	r2, [sp, #72]	; 0x48
 80146e2:	3b30      	subs	r3, #48	; 0x30
 80146e4:	1c42      	adds	r2, r0, #1
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d013      	beq.n	8014712 <_strtod_l+0x266>
 80146ea:	210a      	movs	r1, #10
 80146ec:	4494      	add	ip, r2
 80146ee:	9a05      	ldr	r2, [sp, #20]
 80146f0:	1885      	adds	r5, r0, r2
 80146f2:	42aa      	cmp	r2, r5
 80146f4:	d115      	bne.n	8014722 <_strtod_l+0x276>
 80146f6:	9905      	ldr	r1, [sp, #20]
 80146f8:	9a05      	ldr	r2, [sp, #20]
 80146fa:	3101      	adds	r1, #1
 80146fc:	1809      	adds	r1, r1, r0
 80146fe:	1812      	adds	r2, r2, r0
 8014700:	9105      	str	r1, [sp, #20]
 8014702:	2a08      	cmp	r2, #8
 8014704:	dc1b      	bgt.n	801473e <_strtod_l+0x292>
 8014706:	220a      	movs	r2, #10
 8014708:	9908      	ldr	r1, [sp, #32]
 801470a:	434a      	muls	r2, r1
 801470c:	189b      	adds	r3, r3, r2
 801470e:	2200      	movs	r2, #0
 8014710:	9308      	str	r3, [sp, #32]
 8014712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014714:	0010      	movs	r0, r2
 8014716:	1c59      	adds	r1, r3, #1
 8014718:	9121      	str	r1, [sp, #132]	; 0x84
 801471a:	785b      	ldrb	r3, [r3, #1]
 801471c:	e7ca      	b.n	80146b4 <_strtod_l+0x208>
 801471e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014720:	e7d4      	b.n	80146cc <_strtod_l+0x220>
 8014722:	1c54      	adds	r4, r2, #1
 8014724:	2a08      	cmp	r2, #8
 8014726:	dc04      	bgt.n	8014732 <_strtod_l+0x286>
 8014728:	9a08      	ldr	r2, [sp, #32]
 801472a:	434a      	muls	r2, r1
 801472c:	9208      	str	r2, [sp, #32]
 801472e:	0022      	movs	r2, r4
 8014730:	e7df      	b.n	80146f2 <_strtod_l+0x246>
 8014732:	2c10      	cmp	r4, #16
 8014734:	dcfb      	bgt.n	801472e <_strtod_l+0x282>
 8014736:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014738:	434a      	muls	r2, r1
 801473a:	920b      	str	r2, [sp, #44]	; 0x2c
 801473c:	e7f7      	b.n	801472e <_strtod_l+0x282>
 801473e:	9905      	ldr	r1, [sp, #20]
 8014740:	2200      	movs	r2, #0
 8014742:	2910      	cmp	r1, #16
 8014744:	dce5      	bgt.n	8014712 <_strtod_l+0x266>
 8014746:	210a      	movs	r1, #10
 8014748:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801474a:	4341      	muls	r1, r0
 801474c:	185b      	adds	r3, r3, r1
 801474e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014750:	e7df      	b.n	8014712 <_strtod_l+0x266>
 8014752:	2200      	movs	r2, #0
 8014754:	4694      	mov	ip, r2
 8014756:	9205      	str	r2, [sp, #20]
 8014758:	3201      	adds	r2, #1
 801475a:	e7b0      	b.n	80146be <_strtod_l+0x212>
 801475c:	000c      	movs	r4, r1
 801475e:	e77e      	b.n	801465e <_strtod_l+0x1b2>
 8014760:	0801a2b4 	.word	0x0801a2b4
 8014764:	ffefffff 	.word	0xffefffff
 8014768:	00000433 	.word	0x00000433
 801476c:	7ff00000 	.word	0x7ff00000
 8014770:	7fffffff 	.word	0x7fffffff
 8014774:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014776:	1c5a      	adds	r2, r3, #1
 8014778:	9221      	str	r2, [sp, #132]	; 0x84
 801477a:	785b      	ldrb	r3, [r3, #1]
 801477c:	2b30      	cmp	r3, #48	; 0x30
 801477e:	d0f9      	beq.n	8014774 <_strtod_l+0x2c8>
 8014780:	001a      	movs	r2, r3
 8014782:	3a31      	subs	r2, #49	; 0x31
 8014784:	2100      	movs	r1, #0
 8014786:	2a08      	cmp	r2, #8
 8014788:	d816      	bhi.n	80147b8 <_strtod_l+0x30c>
 801478a:	3b30      	subs	r3, #48	; 0x30
 801478c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801478e:	930e      	str	r3, [sp, #56]	; 0x38
 8014790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014792:	1c59      	adds	r1, r3, #1
 8014794:	9121      	str	r1, [sp, #132]	; 0x84
 8014796:	785b      	ldrb	r3, [r3, #1]
 8014798:	001a      	movs	r2, r3
 801479a:	3a30      	subs	r2, #48	; 0x30
 801479c:	2a09      	cmp	r2, #9
 801479e:	d932      	bls.n	8014806 <_strtod_l+0x35a>
 80147a0:	1b4a      	subs	r2, r1, r5
 80147a2:	4dad      	ldr	r5, [pc, #692]	; (8014a58 <_strtod_l+0x5ac>)
 80147a4:	0029      	movs	r1, r5
 80147a6:	2a08      	cmp	r2, #8
 80147a8:	dc03      	bgt.n	80147b2 <_strtod_l+0x306>
 80147aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80147ac:	42a9      	cmp	r1, r5
 80147ae:	dd00      	ble.n	80147b2 <_strtod_l+0x306>
 80147b0:	0029      	movs	r1, r5
 80147b2:	2c00      	cmp	r4, #0
 80147b4:	d000      	beq.n	80147b8 <_strtod_l+0x30c>
 80147b6:	4249      	negs	r1, r1
 80147b8:	9a05      	ldr	r2, [sp, #20]
 80147ba:	2a00      	cmp	r2, #0
 80147bc:	d149      	bne.n	8014852 <_strtod_l+0x3a6>
 80147be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80147c0:	4310      	orrs	r0, r2
 80147c2:	d000      	beq.n	80147c6 <_strtod_l+0x31a>
 80147c4:	e6b3      	b.n	801452e <_strtod_l+0x82>
 80147c6:	9a07      	ldr	r2, [sp, #28]
 80147c8:	2a00      	cmp	r2, #0
 80147ca:	d000      	beq.n	80147ce <_strtod_l+0x322>
 80147cc:	e6cf      	b.n	801456e <_strtod_l+0xc2>
 80147ce:	2b4e      	cmp	r3, #78	; 0x4e
 80147d0:	d025      	beq.n	801481e <_strtod_l+0x372>
 80147d2:	dc1f      	bgt.n	8014814 <_strtod_l+0x368>
 80147d4:	2b49      	cmp	r3, #73	; 0x49
 80147d6:	d000      	beq.n	80147da <_strtod_l+0x32e>
 80147d8:	e6c9      	b.n	801456e <_strtod_l+0xc2>
 80147da:	49a0      	ldr	r1, [pc, #640]	; (8014a5c <_strtod_l+0x5b0>)
 80147dc:	a821      	add	r0, sp, #132	; 0x84
 80147de:	f001 fe83 	bl	80164e8 <__match>
 80147e2:	2800      	cmp	r0, #0
 80147e4:	d100      	bne.n	80147e8 <_strtod_l+0x33c>
 80147e6:	e6c2      	b.n	801456e <_strtod_l+0xc2>
 80147e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147ea:	499d      	ldr	r1, [pc, #628]	; (8014a60 <_strtod_l+0x5b4>)
 80147ec:	3b01      	subs	r3, #1
 80147ee:	a821      	add	r0, sp, #132	; 0x84
 80147f0:	9321      	str	r3, [sp, #132]	; 0x84
 80147f2:	f001 fe79 	bl	80164e8 <__match>
 80147f6:	2800      	cmp	r0, #0
 80147f8:	d102      	bne.n	8014800 <_strtod_l+0x354>
 80147fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147fc:	3301      	adds	r3, #1
 80147fe:	9321      	str	r3, [sp, #132]	; 0x84
 8014800:	4f98      	ldr	r7, [pc, #608]	; (8014a64 <_strtod_l+0x5b8>)
 8014802:	2600      	movs	r6, #0
 8014804:	e693      	b.n	801452e <_strtod_l+0x82>
 8014806:	220a      	movs	r2, #10
 8014808:	990e      	ldr	r1, [sp, #56]	; 0x38
 801480a:	434a      	muls	r2, r1
 801480c:	18d2      	adds	r2, r2, r3
 801480e:	3a30      	subs	r2, #48	; 0x30
 8014810:	920e      	str	r2, [sp, #56]	; 0x38
 8014812:	e7bd      	b.n	8014790 <_strtod_l+0x2e4>
 8014814:	2b69      	cmp	r3, #105	; 0x69
 8014816:	d0e0      	beq.n	80147da <_strtod_l+0x32e>
 8014818:	2b6e      	cmp	r3, #110	; 0x6e
 801481a:	d000      	beq.n	801481e <_strtod_l+0x372>
 801481c:	e6a7      	b.n	801456e <_strtod_l+0xc2>
 801481e:	4992      	ldr	r1, [pc, #584]	; (8014a68 <_strtod_l+0x5bc>)
 8014820:	a821      	add	r0, sp, #132	; 0x84
 8014822:	f001 fe61 	bl	80164e8 <__match>
 8014826:	2800      	cmp	r0, #0
 8014828:	d100      	bne.n	801482c <_strtod_l+0x380>
 801482a:	e6a0      	b.n	801456e <_strtod_l+0xc2>
 801482c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801482e:	781b      	ldrb	r3, [r3, #0]
 8014830:	2b28      	cmp	r3, #40	; 0x28
 8014832:	d10c      	bne.n	801484e <_strtod_l+0x3a2>
 8014834:	aa24      	add	r2, sp, #144	; 0x90
 8014836:	498d      	ldr	r1, [pc, #564]	; (8014a6c <_strtod_l+0x5c0>)
 8014838:	a821      	add	r0, sp, #132	; 0x84
 801483a:	f001 fe69 	bl	8016510 <__hexnan>
 801483e:	2805      	cmp	r0, #5
 8014840:	d105      	bne.n	801484e <_strtod_l+0x3a2>
 8014842:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014844:	4a87      	ldr	r2, [pc, #540]	; (8014a64 <_strtod_l+0x5b8>)
 8014846:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014848:	431a      	orrs	r2, r3
 801484a:	0017      	movs	r7, r2
 801484c:	e66f      	b.n	801452e <_strtod_l+0x82>
 801484e:	4f88      	ldr	r7, [pc, #544]	; (8014a70 <_strtod_l+0x5c4>)
 8014850:	e7d7      	b.n	8014802 <_strtod_l+0x356>
 8014852:	4663      	mov	r3, ip
 8014854:	1acb      	subs	r3, r1, r3
 8014856:	9307      	str	r3, [sp, #28]
 8014858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801485a:	2b00      	cmp	r3, #0
 801485c:	d101      	bne.n	8014862 <_strtod_l+0x3b6>
 801485e:	9b05      	ldr	r3, [sp, #20]
 8014860:	930a      	str	r3, [sp, #40]	; 0x28
 8014862:	9c05      	ldr	r4, [sp, #20]
 8014864:	2c10      	cmp	r4, #16
 8014866:	dd00      	ble.n	801486a <_strtod_l+0x3be>
 8014868:	2410      	movs	r4, #16
 801486a:	9808      	ldr	r0, [sp, #32]
 801486c:	f7ee f9d6 	bl	8002c1c <__aeabi_ui2d>
 8014870:	9b05      	ldr	r3, [sp, #20]
 8014872:	0006      	movs	r6, r0
 8014874:	000f      	movs	r7, r1
 8014876:	2b09      	cmp	r3, #9
 8014878:	dc15      	bgt.n	80148a6 <_strtod_l+0x3fa>
 801487a:	9b07      	ldr	r3, [sp, #28]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d100      	bne.n	8014882 <_strtod_l+0x3d6>
 8014880:	e655      	b.n	801452e <_strtod_l+0x82>
 8014882:	9b07      	ldr	r3, [sp, #28]
 8014884:	2b00      	cmp	r3, #0
 8014886:	dc00      	bgt.n	801488a <_strtod_l+0x3de>
 8014888:	e07d      	b.n	8014986 <_strtod_l+0x4da>
 801488a:	2b16      	cmp	r3, #22
 801488c:	dc62      	bgt.n	8014954 <_strtod_l+0x4a8>
 801488e:	00dc      	lsls	r4, r3, #3
 8014890:	4b78      	ldr	r3, [pc, #480]	; (8014a74 <_strtod_l+0x5c8>)
 8014892:	0032      	movs	r2, r6
 8014894:	1919      	adds	r1, r3, r4
 8014896:	003b      	movs	r3, r7
 8014898:	6808      	ldr	r0, [r1, #0]
 801489a:	6849      	ldr	r1, [r1, #4]
 801489c:	f7ed fb78 	bl	8001f90 <__aeabi_dmul>
 80148a0:	0006      	movs	r6, r0
 80148a2:	000f      	movs	r7, r1
 80148a4:	e643      	b.n	801452e <_strtod_l+0x82>
 80148a6:	0022      	movs	r2, r4
 80148a8:	4b72      	ldr	r3, [pc, #456]	; (8014a74 <_strtod_l+0x5c8>)
 80148aa:	3a09      	subs	r2, #9
 80148ac:	00d2      	lsls	r2, r2, #3
 80148ae:	189b      	adds	r3, r3, r2
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	685b      	ldr	r3, [r3, #4]
 80148b4:	f7ed fb6c 	bl	8001f90 <__aeabi_dmul>
 80148b8:	0006      	movs	r6, r0
 80148ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80148bc:	000f      	movs	r7, r1
 80148be:	f7ee f9ad 	bl	8002c1c <__aeabi_ui2d>
 80148c2:	000b      	movs	r3, r1
 80148c4:	0002      	movs	r2, r0
 80148c6:	0039      	movs	r1, r7
 80148c8:	0030      	movs	r0, r6
 80148ca:	f7ec fc3b 	bl	8001144 <__aeabi_dadd>
 80148ce:	9b05      	ldr	r3, [sp, #20]
 80148d0:	0006      	movs	r6, r0
 80148d2:	000f      	movs	r7, r1
 80148d4:	2b0f      	cmp	r3, #15
 80148d6:	ddd0      	ble.n	801487a <_strtod_l+0x3ce>
 80148d8:	9b05      	ldr	r3, [sp, #20]
 80148da:	1b1c      	subs	r4, r3, r4
 80148dc:	9b07      	ldr	r3, [sp, #28]
 80148de:	18e4      	adds	r4, r4, r3
 80148e0:	2c00      	cmp	r4, #0
 80148e2:	dc00      	bgt.n	80148e6 <_strtod_l+0x43a>
 80148e4:	e094      	b.n	8014a10 <_strtod_l+0x564>
 80148e6:	230f      	movs	r3, #15
 80148e8:	4023      	ands	r3, r4
 80148ea:	d00a      	beq.n	8014902 <_strtod_l+0x456>
 80148ec:	4961      	ldr	r1, [pc, #388]	; (8014a74 <_strtod_l+0x5c8>)
 80148ee:	00db      	lsls	r3, r3, #3
 80148f0:	18c9      	adds	r1, r1, r3
 80148f2:	0032      	movs	r2, r6
 80148f4:	6808      	ldr	r0, [r1, #0]
 80148f6:	6849      	ldr	r1, [r1, #4]
 80148f8:	003b      	movs	r3, r7
 80148fa:	f7ed fb49 	bl	8001f90 <__aeabi_dmul>
 80148fe:	0006      	movs	r6, r0
 8014900:	000f      	movs	r7, r1
 8014902:	230f      	movs	r3, #15
 8014904:	439c      	bics	r4, r3
 8014906:	d06e      	beq.n	80149e6 <_strtod_l+0x53a>
 8014908:	3326      	adds	r3, #38	; 0x26
 801490a:	33ff      	adds	r3, #255	; 0xff
 801490c:	429c      	cmp	r4, r3
 801490e:	dd48      	ble.n	80149a2 <_strtod_l+0x4f6>
 8014910:	2400      	movs	r4, #0
 8014912:	9405      	str	r4, [sp, #20]
 8014914:	940b      	str	r4, [sp, #44]	; 0x2c
 8014916:	940a      	str	r4, [sp, #40]	; 0x28
 8014918:	2322      	movs	r3, #34	; 0x22
 801491a:	2600      	movs	r6, #0
 801491c:	9a04      	ldr	r2, [sp, #16]
 801491e:	4f51      	ldr	r7, [pc, #324]	; (8014a64 <_strtod_l+0x5b8>)
 8014920:	6013      	str	r3, [r2, #0]
 8014922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014924:	42b3      	cmp	r3, r6
 8014926:	d100      	bne.n	801492a <_strtod_l+0x47e>
 8014928:	e601      	b.n	801452e <_strtod_l+0x82>
 801492a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801492c:	9804      	ldr	r0, [sp, #16]
 801492e:	f001 feda 	bl	80166e6 <_Bfree>
 8014932:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014934:	9804      	ldr	r0, [sp, #16]
 8014936:	f001 fed6 	bl	80166e6 <_Bfree>
 801493a:	9905      	ldr	r1, [sp, #20]
 801493c:	9804      	ldr	r0, [sp, #16]
 801493e:	f001 fed2 	bl	80166e6 <_Bfree>
 8014942:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014944:	9804      	ldr	r0, [sp, #16]
 8014946:	f001 fece 	bl	80166e6 <_Bfree>
 801494a:	0021      	movs	r1, r4
 801494c:	9804      	ldr	r0, [sp, #16]
 801494e:	f001 feca 	bl	80166e6 <_Bfree>
 8014952:	e5ec      	b.n	801452e <_strtod_l+0x82>
 8014954:	2325      	movs	r3, #37	; 0x25
 8014956:	9a05      	ldr	r2, [sp, #20]
 8014958:	1a9b      	subs	r3, r3, r2
 801495a:	9a07      	ldr	r2, [sp, #28]
 801495c:	4293      	cmp	r3, r2
 801495e:	dbbb      	blt.n	80148d8 <_strtod_l+0x42c>
 8014960:	230f      	movs	r3, #15
 8014962:	9a05      	ldr	r2, [sp, #20]
 8014964:	4c43      	ldr	r4, [pc, #268]	; (8014a74 <_strtod_l+0x5c8>)
 8014966:	1a9d      	subs	r5, r3, r2
 8014968:	00e9      	lsls	r1, r5, #3
 801496a:	1861      	adds	r1, r4, r1
 801496c:	0032      	movs	r2, r6
 801496e:	6808      	ldr	r0, [r1, #0]
 8014970:	6849      	ldr	r1, [r1, #4]
 8014972:	003b      	movs	r3, r7
 8014974:	f7ed fb0c 	bl	8001f90 <__aeabi_dmul>
 8014978:	9b07      	ldr	r3, [sp, #28]
 801497a:	1b5e      	subs	r6, r3, r5
 801497c:	00f6      	lsls	r6, r6, #3
 801497e:	19a6      	adds	r6, r4, r6
 8014980:	6832      	ldr	r2, [r6, #0]
 8014982:	6873      	ldr	r3, [r6, #4]
 8014984:	e78a      	b.n	801489c <_strtod_l+0x3f0>
 8014986:	9b07      	ldr	r3, [sp, #28]
 8014988:	3316      	adds	r3, #22
 801498a:	dba5      	blt.n	80148d8 <_strtod_l+0x42c>
 801498c:	9b07      	ldr	r3, [sp, #28]
 801498e:	0030      	movs	r0, r6
 8014990:	00da      	lsls	r2, r3, #3
 8014992:	4b38      	ldr	r3, [pc, #224]	; (8014a74 <_strtod_l+0x5c8>)
 8014994:	0039      	movs	r1, r7
 8014996:	1a9b      	subs	r3, r3, r2
 8014998:	681a      	ldr	r2, [r3, #0]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	f7ec feee 	bl	800177c <__aeabi_ddiv>
 80149a0:	e77e      	b.n	80148a0 <_strtod_l+0x3f4>
 80149a2:	2300      	movs	r3, #0
 80149a4:	0030      	movs	r0, r6
 80149a6:	0039      	movs	r1, r7
 80149a8:	001d      	movs	r5, r3
 80149aa:	1124      	asrs	r4, r4, #4
 80149ac:	2c01      	cmp	r4, #1
 80149ae:	dc1d      	bgt.n	80149ec <_strtod_l+0x540>
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d001      	beq.n	80149b8 <_strtod_l+0x50c>
 80149b4:	0006      	movs	r6, r0
 80149b6:	000f      	movs	r7, r1
 80149b8:	4b2f      	ldr	r3, [pc, #188]	; (8014a78 <_strtod_l+0x5cc>)
 80149ba:	00ed      	lsls	r5, r5, #3
 80149bc:	18ff      	adds	r7, r7, r3
 80149be:	4b2f      	ldr	r3, [pc, #188]	; (8014a7c <_strtod_l+0x5d0>)
 80149c0:	0032      	movs	r2, r6
 80149c2:	195d      	adds	r5, r3, r5
 80149c4:	6828      	ldr	r0, [r5, #0]
 80149c6:	6869      	ldr	r1, [r5, #4]
 80149c8:	003b      	movs	r3, r7
 80149ca:	f7ed fae1 	bl	8001f90 <__aeabi_dmul>
 80149ce:	4b25      	ldr	r3, [pc, #148]	; (8014a64 <_strtod_l+0x5b8>)
 80149d0:	4a2b      	ldr	r2, [pc, #172]	; (8014a80 <_strtod_l+0x5d4>)
 80149d2:	0006      	movs	r6, r0
 80149d4:	400b      	ands	r3, r1
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d89a      	bhi.n	8014910 <_strtod_l+0x464>
 80149da:	4a2a      	ldr	r2, [pc, #168]	; (8014a84 <_strtod_l+0x5d8>)
 80149dc:	4293      	cmp	r3, r2
 80149de:	d913      	bls.n	8014a08 <_strtod_l+0x55c>
 80149e0:	2601      	movs	r6, #1
 80149e2:	4f29      	ldr	r7, [pc, #164]	; (8014a88 <_strtod_l+0x5dc>)
 80149e4:	4276      	negs	r6, r6
 80149e6:	2300      	movs	r3, #0
 80149e8:	9306      	str	r3, [sp, #24]
 80149ea:	e07b      	b.n	8014ae4 <_strtod_l+0x638>
 80149ec:	2201      	movs	r2, #1
 80149ee:	4214      	tst	r4, r2
 80149f0:	d007      	beq.n	8014a02 <_strtod_l+0x556>
 80149f2:	4a22      	ldr	r2, [pc, #136]	; (8014a7c <_strtod_l+0x5d0>)
 80149f4:	00eb      	lsls	r3, r5, #3
 80149f6:	189b      	adds	r3, r3, r2
 80149f8:	681a      	ldr	r2, [r3, #0]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	f7ed fac8 	bl	8001f90 <__aeabi_dmul>
 8014a00:	2301      	movs	r3, #1
 8014a02:	3501      	adds	r5, #1
 8014a04:	1064      	asrs	r4, r4, #1
 8014a06:	e7d1      	b.n	80149ac <_strtod_l+0x500>
 8014a08:	23d4      	movs	r3, #212	; 0xd4
 8014a0a:	049b      	lsls	r3, r3, #18
 8014a0c:	18cf      	adds	r7, r1, r3
 8014a0e:	e7ea      	b.n	80149e6 <_strtod_l+0x53a>
 8014a10:	2c00      	cmp	r4, #0
 8014a12:	d0e8      	beq.n	80149e6 <_strtod_l+0x53a>
 8014a14:	230f      	movs	r3, #15
 8014a16:	4264      	negs	r4, r4
 8014a18:	4023      	ands	r3, r4
 8014a1a:	d00a      	beq.n	8014a32 <_strtod_l+0x586>
 8014a1c:	4a15      	ldr	r2, [pc, #84]	; (8014a74 <_strtod_l+0x5c8>)
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	18d3      	adds	r3, r2, r3
 8014a22:	0030      	movs	r0, r6
 8014a24:	681a      	ldr	r2, [r3, #0]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	0039      	movs	r1, r7
 8014a2a:	f7ec fea7 	bl	800177c <__aeabi_ddiv>
 8014a2e:	0006      	movs	r6, r0
 8014a30:	000f      	movs	r7, r1
 8014a32:	1124      	asrs	r4, r4, #4
 8014a34:	d0d7      	beq.n	80149e6 <_strtod_l+0x53a>
 8014a36:	2c1f      	cmp	r4, #31
 8014a38:	dd28      	ble.n	8014a8c <_strtod_l+0x5e0>
 8014a3a:	2400      	movs	r4, #0
 8014a3c:	9405      	str	r4, [sp, #20]
 8014a3e:	940b      	str	r4, [sp, #44]	; 0x2c
 8014a40:	940a      	str	r4, [sp, #40]	; 0x28
 8014a42:	2322      	movs	r3, #34	; 0x22
 8014a44:	9a04      	ldr	r2, [sp, #16]
 8014a46:	2600      	movs	r6, #0
 8014a48:	6013      	str	r3, [r2, #0]
 8014a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a4c:	2700      	movs	r7, #0
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d000      	beq.n	8014a54 <_strtod_l+0x5a8>
 8014a52:	e76a      	b.n	801492a <_strtod_l+0x47e>
 8014a54:	e56b      	b.n	801452e <_strtod_l+0x82>
 8014a56:	46c0      	nop			; (mov r8, r8)
 8014a58:	00004e1f 	.word	0x00004e1f
 8014a5c:	0801a283 	.word	0x0801a283
 8014a60:	0801a40c 	.word	0x0801a40c
 8014a64:	7ff00000 	.word	0x7ff00000
 8014a68:	0801a28b 	.word	0x0801a28b
 8014a6c:	0801a2c8 	.word	0x0801a2c8
 8014a70:	fff80000 	.word	0xfff80000
 8014a74:	0801a440 	.word	0x0801a440
 8014a78:	fcb00000 	.word	0xfcb00000
 8014a7c:	0801a418 	.word	0x0801a418
 8014a80:	7ca00000 	.word	0x7ca00000
 8014a84:	7c900000 	.word	0x7c900000
 8014a88:	7fefffff 	.word	0x7fefffff
 8014a8c:	2310      	movs	r3, #16
 8014a8e:	4023      	ands	r3, r4
 8014a90:	9306      	str	r3, [sp, #24]
 8014a92:	d001      	beq.n	8014a98 <_strtod_l+0x5ec>
 8014a94:	236a      	movs	r3, #106	; 0x6a
 8014a96:	9306      	str	r3, [sp, #24]
 8014a98:	2300      	movs	r3, #0
 8014a9a:	0030      	movs	r0, r6
 8014a9c:	0039      	movs	r1, r7
 8014a9e:	001d      	movs	r5, r3
 8014aa0:	2c00      	cmp	r4, #0
 8014aa2:	dd00      	ble.n	8014aa6 <_strtod_l+0x5fa>
 8014aa4:	e10e      	b.n	8014cc4 <_strtod_l+0x818>
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <_strtod_l+0x602>
 8014aaa:	0006      	movs	r6, r0
 8014aac:	000f      	movs	r7, r1
 8014aae:	9b06      	ldr	r3, [sp, #24]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d00f      	beq.n	8014ad4 <_strtod_l+0x628>
 8014ab4:	236b      	movs	r3, #107	; 0x6b
 8014ab6:	0079      	lsls	r1, r7, #1
 8014ab8:	0d49      	lsrs	r1, r1, #21
 8014aba:	003a      	movs	r2, r7
 8014abc:	1a5b      	subs	r3, r3, r1
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	dd08      	ble.n	8014ad4 <_strtod_l+0x628>
 8014ac2:	2b1f      	cmp	r3, #31
 8014ac4:	dc00      	bgt.n	8014ac8 <_strtod_l+0x61c>
 8014ac6:	e112      	b.n	8014cee <_strtod_l+0x842>
 8014ac8:	2600      	movs	r6, #0
 8014aca:	2b34      	cmp	r3, #52	; 0x34
 8014acc:	dc00      	bgt.n	8014ad0 <_strtod_l+0x624>
 8014ace:	e107      	b.n	8014ce0 <_strtod_l+0x834>
 8014ad0:	27dc      	movs	r7, #220	; 0xdc
 8014ad2:	04bf      	lsls	r7, r7, #18
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	0030      	movs	r0, r6
 8014ada:	0039      	movs	r1, r7
 8014adc:	f7eb fcb4 	bl	8000448 <__aeabi_dcmpeq>
 8014ae0:	2800      	cmp	r0, #0
 8014ae2:	d1aa      	bne.n	8014a3a <_strtod_l+0x58e>
 8014ae4:	9b08      	ldr	r3, [sp, #32]
 8014ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014ae8:	9300      	str	r3, [sp, #0]
 8014aea:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014aec:	9b05      	ldr	r3, [sp, #20]
 8014aee:	9804      	ldr	r0, [sp, #16]
 8014af0:	f001 fe50 	bl	8016794 <__s2b>
 8014af4:	900b      	str	r0, [sp, #44]	; 0x2c
 8014af6:	2800      	cmp	r0, #0
 8014af8:	d100      	bne.n	8014afc <_strtod_l+0x650>
 8014afa:	e709      	b.n	8014910 <_strtod_l+0x464>
 8014afc:	9b07      	ldr	r3, [sp, #28]
 8014afe:	9a07      	ldr	r2, [sp, #28]
 8014b00:	17db      	asrs	r3, r3, #31
 8014b02:	4252      	negs	r2, r2
 8014b04:	4013      	ands	r3, r2
 8014b06:	9315      	str	r3, [sp, #84]	; 0x54
 8014b08:	9b07      	ldr	r3, [sp, #28]
 8014b0a:	2400      	movs	r4, #0
 8014b0c:	43db      	mvns	r3, r3
 8014b0e:	9a07      	ldr	r2, [sp, #28]
 8014b10:	17db      	asrs	r3, r3, #31
 8014b12:	401a      	ands	r2, r3
 8014b14:	921c      	str	r2, [sp, #112]	; 0x70
 8014b16:	9405      	str	r4, [sp, #20]
 8014b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b1a:	9804      	ldr	r0, [sp, #16]
 8014b1c:	6859      	ldr	r1, [r3, #4]
 8014b1e:	f001 fdaa 	bl	8016676 <_Balloc>
 8014b22:	900a      	str	r0, [sp, #40]	; 0x28
 8014b24:	2800      	cmp	r0, #0
 8014b26:	d100      	bne.n	8014b2a <_strtod_l+0x67e>
 8014b28:	e6f6      	b.n	8014918 <_strtod_l+0x46c>
 8014b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014b2e:	691b      	ldr	r3, [r3, #16]
 8014b30:	310c      	adds	r1, #12
 8014b32:	1c9a      	adds	r2, r3, #2
 8014b34:	0092      	lsls	r2, r2, #2
 8014b36:	300c      	adds	r0, #12
 8014b38:	9308      	str	r3, [sp, #32]
 8014b3a:	f7fe fe9e 	bl	801387a <memcpy>
 8014b3e:	ab24      	add	r3, sp, #144	; 0x90
 8014b40:	9301      	str	r3, [sp, #4]
 8014b42:	ab23      	add	r3, sp, #140	; 0x8c
 8014b44:	9300      	str	r3, [sp, #0]
 8014b46:	0032      	movs	r2, r6
 8014b48:	003b      	movs	r3, r7
 8014b4a:	9804      	ldr	r0, [sp, #16]
 8014b4c:	960e      	str	r6, [sp, #56]	; 0x38
 8014b4e:	970f      	str	r7, [sp, #60]	; 0x3c
 8014b50:	f002 f8d4 	bl	8016cfc <__d2b>
 8014b54:	9022      	str	r0, [sp, #136]	; 0x88
 8014b56:	2800      	cmp	r0, #0
 8014b58:	d100      	bne.n	8014b5c <_strtod_l+0x6b0>
 8014b5a:	e6dd      	b.n	8014918 <_strtod_l+0x46c>
 8014b5c:	2101      	movs	r1, #1
 8014b5e:	9804      	ldr	r0, [sp, #16]
 8014b60:	f001 fe9f 	bl	80168a2 <__i2b>
 8014b64:	9005      	str	r0, [sp, #20]
 8014b66:	2800      	cmp	r0, #0
 8014b68:	d100      	bne.n	8014b6c <_strtod_l+0x6c0>
 8014b6a:	e6d5      	b.n	8014918 <_strtod_l+0x46c>
 8014b6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	da00      	bge.n	8014b74 <_strtod_l+0x6c8>
 8014b72:	e0c1      	b.n	8014cf8 <_strtod_l+0x84c>
 8014b74:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b76:	189d      	adds	r5, r3, r2
 8014b78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b7a:	4694      	mov	ip, r2
 8014b7c:	9906      	ldr	r1, [sp, #24]
 8014b7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014b80:	1a5b      	subs	r3, r3, r1
 8014b82:	2136      	movs	r1, #54	; 0x36
 8014b84:	189b      	adds	r3, r3, r2
 8014b86:	1a8a      	subs	r2, r1, r2
 8014b88:	49b2      	ldr	r1, [pc, #712]	; (8014e54 <_strtod_l+0x9a8>)
 8014b8a:	3b01      	subs	r3, #1
 8014b8c:	2001      	movs	r0, #1
 8014b8e:	428b      	cmp	r3, r1
 8014b90:	db00      	blt.n	8014b94 <_strtod_l+0x6e8>
 8014b92:	e0bd      	b.n	8014d10 <_strtod_l+0x864>
 8014b94:	1ac9      	subs	r1, r1, r3
 8014b96:	1a52      	subs	r2, r2, r1
 8014b98:	291f      	cmp	r1, #31
 8014b9a:	dd00      	ble.n	8014b9e <_strtod_l+0x6f2>
 8014b9c:	e0b1      	b.n	8014d02 <_strtod_l+0x856>
 8014b9e:	4088      	lsls	r0, r1
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	9014      	str	r0, [sp, #80]	; 0x50
 8014ba4:	9310      	str	r3, [sp, #64]	; 0x40
 8014ba6:	18ab      	adds	r3, r5, r2
 8014ba8:	9308      	str	r3, [sp, #32]
 8014baa:	0013      	movs	r3, r2
 8014bac:	9a06      	ldr	r2, [sp, #24]
 8014bae:	4463      	add	r3, ip
 8014bb0:	18d3      	adds	r3, r2, r3
 8014bb2:	9a08      	ldr	r2, [sp, #32]
 8014bb4:	930c      	str	r3, [sp, #48]	; 0x30
 8014bb6:	002b      	movs	r3, r5
 8014bb8:	4295      	cmp	r5, r2
 8014bba:	dd00      	ble.n	8014bbe <_strtod_l+0x712>
 8014bbc:	0013      	movs	r3, r2
 8014bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bc0:	4293      	cmp	r3, r2
 8014bc2:	dd00      	ble.n	8014bc6 <_strtod_l+0x71a>
 8014bc4:	0013      	movs	r3, r2
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	dd06      	ble.n	8014bd8 <_strtod_l+0x72c>
 8014bca:	9a08      	ldr	r2, [sp, #32]
 8014bcc:	1aed      	subs	r5, r5, r3
 8014bce:	1ad2      	subs	r2, r2, r3
 8014bd0:	9208      	str	r2, [sp, #32]
 8014bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bd4:	1ad2      	subs	r2, r2, r3
 8014bd6:	920c      	str	r2, [sp, #48]	; 0x30
 8014bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d017      	beq.n	8014c0e <_strtod_l+0x762>
 8014bde:	001a      	movs	r2, r3
 8014be0:	9905      	ldr	r1, [sp, #20]
 8014be2:	9804      	ldr	r0, [sp, #16]
 8014be4:	f001 fef6 	bl	80169d4 <__pow5mult>
 8014be8:	9005      	str	r0, [sp, #20]
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d100      	bne.n	8014bf0 <_strtod_l+0x744>
 8014bee:	e693      	b.n	8014918 <_strtod_l+0x46c>
 8014bf0:	0001      	movs	r1, r0
 8014bf2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014bf4:	9804      	ldr	r0, [sp, #16]
 8014bf6:	f001 fe5d 	bl	80168b4 <__multiply>
 8014bfa:	9012      	str	r0, [sp, #72]	; 0x48
 8014bfc:	2800      	cmp	r0, #0
 8014bfe:	d100      	bne.n	8014c02 <_strtod_l+0x756>
 8014c00:	e68a      	b.n	8014918 <_strtod_l+0x46c>
 8014c02:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c04:	9804      	ldr	r0, [sp, #16]
 8014c06:	f001 fd6e 	bl	80166e6 <_Bfree>
 8014c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c0c:	9322      	str	r3, [sp, #136]	; 0x88
 8014c0e:	9b08      	ldr	r3, [sp, #32]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	dd00      	ble.n	8014c16 <_strtod_l+0x76a>
 8014c14:	e07f      	b.n	8014d16 <_strtod_l+0x86a>
 8014c16:	9b07      	ldr	r3, [sp, #28]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	dd08      	ble.n	8014c2e <_strtod_l+0x782>
 8014c1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c20:	9804      	ldr	r0, [sp, #16]
 8014c22:	f001 fed7 	bl	80169d4 <__pow5mult>
 8014c26:	900a      	str	r0, [sp, #40]	; 0x28
 8014c28:	2800      	cmp	r0, #0
 8014c2a:	d100      	bne.n	8014c2e <_strtod_l+0x782>
 8014c2c:	e674      	b.n	8014918 <_strtod_l+0x46c>
 8014c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	dd08      	ble.n	8014c46 <_strtod_l+0x79a>
 8014c34:	001a      	movs	r2, r3
 8014c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014c38:	9804      	ldr	r0, [sp, #16]
 8014c3a:	f001 ff1d 	bl	8016a78 <__lshift>
 8014c3e:	900a      	str	r0, [sp, #40]	; 0x28
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d100      	bne.n	8014c46 <_strtod_l+0x79a>
 8014c44:	e668      	b.n	8014918 <_strtod_l+0x46c>
 8014c46:	2d00      	cmp	r5, #0
 8014c48:	dd08      	ble.n	8014c5c <_strtod_l+0x7b0>
 8014c4a:	002a      	movs	r2, r5
 8014c4c:	9905      	ldr	r1, [sp, #20]
 8014c4e:	9804      	ldr	r0, [sp, #16]
 8014c50:	f001 ff12 	bl	8016a78 <__lshift>
 8014c54:	9005      	str	r0, [sp, #20]
 8014c56:	2800      	cmp	r0, #0
 8014c58:	d100      	bne.n	8014c5c <_strtod_l+0x7b0>
 8014c5a:	e65d      	b.n	8014918 <_strtod_l+0x46c>
 8014c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c5e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014c60:	9804      	ldr	r0, [sp, #16]
 8014c62:	f001 ff75 	bl	8016b50 <__mdiff>
 8014c66:	1e04      	subs	r4, r0, #0
 8014c68:	d100      	bne.n	8014c6c <_strtod_l+0x7c0>
 8014c6a:	e655      	b.n	8014918 <_strtod_l+0x46c>
 8014c6c:	2500      	movs	r5, #0
 8014c6e:	68c3      	ldr	r3, [r0, #12]
 8014c70:	9905      	ldr	r1, [sp, #20]
 8014c72:	60c5      	str	r5, [r0, #12]
 8014c74:	9312      	str	r3, [sp, #72]	; 0x48
 8014c76:	f001 ff51 	bl	8016b1c <__mcmp>
 8014c7a:	42a8      	cmp	r0, r5
 8014c7c:	da55      	bge.n	8014d2a <_strtod_l+0x87e>
 8014c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c80:	42ab      	cmp	r3, r5
 8014c82:	d11b      	bne.n	8014cbc <_strtod_l+0x810>
 8014c84:	42ae      	cmp	r6, r5
 8014c86:	d119      	bne.n	8014cbc <_strtod_l+0x810>
 8014c88:	033b      	lsls	r3, r7, #12
 8014c8a:	42ab      	cmp	r3, r5
 8014c8c:	d116      	bne.n	8014cbc <_strtod_l+0x810>
 8014c8e:	22d6      	movs	r2, #214	; 0xd6
 8014c90:	4b71      	ldr	r3, [pc, #452]	; (8014e58 <_strtod_l+0x9ac>)
 8014c92:	04d2      	lsls	r2, r2, #19
 8014c94:	403b      	ands	r3, r7
 8014c96:	4293      	cmp	r3, r2
 8014c98:	d910      	bls.n	8014cbc <_strtod_l+0x810>
 8014c9a:	6963      	ldr	r3, [r4, #20]
 8014c9c:	42ab      	cmp	r3, r5
 8014c9e:	d102      	bne.n	8014ca6 <_strtod_l+0x7fa>
 8014ca0:	6923      	ldr	r3, [r4, #16]
 8014ca2:	2b01      	cmp	r3, #1
 8014ca4:	dd0a      	ble.n	8014cbc <_strtod_l+0x810>
 8014ca6:	0021      	movs	r1, r4
 8014ca8:	2201      	movs	r2, #1
 8014caa:	9804      	ldr	r0, [sp, #16]
 8014cac:	f001 fee4 	bl	8016a78 <__lshift>
 8014cb0:	9905      	ldr	r1, [sp, #20]
 8014cb2:	0004      	movs	r4, r0
 8014cb4:	f001 ff32 	bl	8016b1c <__mcmp>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	dc6b      	bgt.n	8014d94 <_strtod_l+0x8e8>
 8014cbc:	9b06      	ldr	r3, [sp, #24]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d178      	bne.n	8014db4 <_strtod_l+0x908>
 8014cc2:	e632      	b.n	801492a <_strtod_l+0x47e>
 8014cc4:	2201      	movs	r2, #1
 8014cc6:	4214      	tst	r4, r2
 8014cc8:	d007      	beq.n	8014cda <_strtod_l+0x82e>
 8014cca:	4a64      	ldr	r2, [pc, #400]	; (8014e5c <_strtod_l+0x9b0>)
 8014ccc:	00eb      	lsls	r3, r5, #3
 8014cce:	18d3      	adds	r3, r2, r3
 8014cd0:	681a      	ldr	r2, [r3, #0]
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	f7ed f95c 	bl	8001f90 <__aeabi_dmul>
 8014cd8:	2301      	movs	r3, #1
 8014cda:	3501      	adds	r5, #1
 8014cdc:	1064      	asrs	r4, r4, #1
 8014cde:	e6df      	b.n	8014aa0 <_strtod_l+0x5f4>
 8014ce0:	2101      	movs	r1, #1
 8014ce2:	3b20      	subs	r3, #32
 8014ce4:	4249      	negs	r1, r1
 8014ce6:	4099      	lsls	r1, r3
 8014ce8:	400a      	ands	r2, r1
 8014cea:	0017      	movs	r7, r2
 8014cec:	e6f2      	b.n	8014ad4 <_strtod_l+0x628>
 8014cee:	2201      	movs	r2, #1
 8014cf0:	4252      	negs	r2, r2
 8014cf2:	409a      	lsls	r2, r3
 8014cf4:	4016      	ands	r6, r2
 8014cf6:	e6ed      	b.n	8014ad4 <_strtod_l+0x628>
 8014cf8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014cfa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014cfc:	1ad2      	subs	r2, r2, r3
 8014cfe:	4694      	mov	ip, r2
 8014d00:	e73c      	b.n	8014b7c <_strtod_l+0x6d0>
 8014d02:	4957      	ldr	r1, [pc, #348]	; (8014e60 <_strtod_l+0x9b4>)
 8014d04:	1acb      	subs	r3, r1, r3
 8014d06:	0001      	movs	r1, r0
 8014d08:	4099      	lsls	r1, r3
 8014d0a:	9110      	str	r1, [sp, #64]	; 0x40
 8014d0c:	9014      	str	r0, [sp, #80]	; 0x50
 8014d0e:	e74a      	b.n	8014ba6 <_strtod_l+0x6fa>
 8014d10:	2300      	movs	r3, #0
 8014d12:	9310      	str	r3, [sp, #64]	; 0x40
 8014d14:	e7fa      	b.n	8014d0c <_strtod_l+0x860>
 8014d16:	9a08      	ldr	r2, [sp, #32]
 8014d18:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014d1a:	9804      	ldr	r0, [sp, #16]
 8014d1c:	f001 feac 	bl	8016a78 <__lshift>
 8014d20:	9022      	str	r0, [sp, #136]	; 0x88
 8014d22:	2800      	cmp	r0, #0
 8014d24:	d000      	beq.n	8014d28 <_strtod_l+0x87c>
 8014d26:	e776      	b.n	8014c16 <_strtod_l+0x76a>
 8014d28:	e5f6      	b.n	8014918 <_strtod_l+0x46c>
 8014d2a:	970c      	str	r7, [sp, #48]	; 0x30
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	d000      	beq.n	8014d32 <_strtod_l+0x886>
 8014d30:	e0a0      	b.n	8014e74 <_strtod_l+0x9c8>
 8014d32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d34:	033b      	lsls	r3, r7, #12
 8014d36:	0b1b      	lsrs	r3, r3, #12
 8014d38:	2a00      	cmp	r2, #0
 8014d3a:	d027      	beq.n	8014d8c <_strtod_l+0x8e0>
 8014d3c:	4a49      	ldr	r2, [pc, #292]	; (8014e64 <_strtod_l+0x9b8>)
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	d157      	bne.n	8014df2 <_strtod_l+0x946>
 8014d42:	2201      	movs	r2, #1
 8014d44:	9b06      	ldr	r3, [sp, #24]
 8014d46:	4252      	negs	r2, r2
 8014d48:	0031      	movs	r1, r6
 8014d4a:	0010      	movs	r0, r2
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d00b      	beq.n	8014d68 <_strtod_l+0x8bc>
 8014d50:	25d4      	movs	r5, #212	; 0xd4
 8014d52:	4b41      	ldr	r3, [pc, #260]	; (8014e58 <_strtod_l+0x9ac>)
 8014d54:	04ed      	lsls	r5, r5, #19
 8014d56:	403b      	ands	r3, r7
 8014d58:	0010      	movs	r0, r2
 8014d5a:	42ab      	cmp	r3, r5
 8014d5c:	d804      	bhi.n	8014d68 <_strtod_l+0x8bc>
 8014d5e:	306c      	adds	r0, #108	; 0x6c
 8014d60:	0d1b      	lsrs	r3, r3, #20
 8014d62:	1ac3      	subs	r3, r0, r3
 8014d64:	409a      	lsls	r2, r3
 8014d66:	0010      	movs	r0, r2
 8014d68:	4281      	cmp	r1, r0
 8014d6a:	d142      	bne.n	8014df2 <_strtod_l+0x946>
 8014d6c:	4b3e      	ldr	r3, [pc, #248]	; (8014e68 <_strtod_l+0x9bc>)
 8014d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d102      	bne.n	8014d7a <_strtod_l+0x8ce>
 8014d74:	1c4b      	adds	r3, r1, #1
 8014d76:	d100      	bne.n	8014d7a <_strtod_l+0x8ce>
 8014d78:	e5ce      	b.n	8014918 <_strtod_l+0x46c>
 8014d7a:	4b37      	ldr	r3, [pc, #220]	; (8014e58 <_strtod_l+0x9ac>)
 8014d7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d7e:	2600      	movs	r6, #0
 8014d80:	401a      	ands	r2, r3
 8014d82:	0013      	movs	r3, r2
 8014d84:	2280      	movs	r2, #128	; 0x80
 8014d86:	0352      	lsls	r2, r2, #13
 8014d88:	189f      	adds	r7, r3, r2
 8014d8a:	e797      	b.n	8014cbc <_strtod_l+0x810>
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d130      	bne.n	8014df2 <_strtod_l+0x946>
 8014d90:	2e00      	cmp	r6, #0
 8014d92:	d12e      	bne.n	8014df2 <_strtod_l+0x946>
 8014d94:	9906      	ldr	r1, [sp, #24]
 8014d96:	003b      	movs	r3, r7
 8014d98:	4a2f      	ldr	r2, [pc, #188]	; (8014e58 <_strtod_l+0x9ac>)
 8014d9a:	2900      	cmp	r1, #0
 8014d9c:	d020      	beq.n	8014de0 <_strtod_l+0x934>
 8014d9e:	0011      	movs	r1, r2
 8014da0:	20d6      	movs	r0, #214	; 0xd6
 8014da2:	4039      	ands	r1, r7
 8014da4:	04c0      	lsls	r0, r0, #19
 8014da6:	4281      	cmp	r1, r0
 8014da8:	dc1a      	bgt.n	8014de0 <_strtod_l+0x934>
 8014daa:	23dc      	movs	r3, #220	; 0xdc
 8014dac:	049b      	lsls	r3, r3, #18
 8014dae:	4299      	cmp	r1, r3
 8014db0:	dc00      	bgt.n	8014db4 <_strtod_l+0x908>
 8014db2:	e646      	b.n	8014a42 <_strtod_l+0x596>
 8014db4:	4b2d      	ldr	r3, [pc, #180]	; (8014e6c <_strtod_l+0x9c0>)
 8014db6:	0030      	movs	r0, r6
 8014db8:	931b      	str	r3, [sp, #108]	; 0x6c
 8014dba:	2300      	movs	r3, #0
 8014dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8014dbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014dc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dc2:	0039      	movs	r1, r7
 8014dc4:	f7ed f8e4 	bl	8001f90 <__aeabi_dmul>
 8014dc8:	0006      	movs	r6, r0
 8014dca:	000f      	movs	r7, r1
 8014dcc:	1e0b      	subs	r3, r1, #0
 8014dce:	d000      	beq.n	8014dd2 <_strtod_l+0x926>
 8014dd0:	e5ab      	b.n	801492a <_strtod_l+0x47e>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d000      	beq.n	8014dd8 <_strtod_l+0x92c>
 8014dd6:	e5a8      	b.n	801492a <_strtod_l+0x47e>
 8014dd8:	9a04      	ldr	r2, [sp, #16]
 8014dda:	3322      	adds	r3, #34	; 0x22
 8014ddc:	6013      	str	r3, [r2, #0]
 8014dde:	e5a4      	b.n	801492a <_strtod_l+0x47e>
 8014de0:	2601      	movs	r6, #1
 8014de2:	4013      	ands	r3, r2
 8014de4:	4a22      	ldr	r2, [pc, #136]	; (8014e70 <_strtod_l+0x9c4>)
 8014de6:	4276      	negs	r6, r6
 8014de8:	189b      	adds	r3, r3, r2
 8014dea:	4a1e      	ldr	r2, [pc, #120]	; (8014e64 <_strtod_l+0x9b8>)
 8014dec:	431a      	orrs	r2, r3
 8014dee:	0017      	movs	r7, r2
 8014df0:	e764      	b.n	8014cbc <_strtod_l+0x810>
 8014df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d015      	beq.n	8014e24 <_strtod_l+0x978>
 8014df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014dfc:	4213      	tst	r3, r2
 8014dfe:	d100      	bne.n	8014e02 <_strtod_l+0x956>
 8014e00:	e75c      	b.n	8014cbc <_strtod_l+0x810>
 8014e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e04:	9a06      	ldr	r2, [sp, #24]
 8014e06:	0030      	movs	r0, r6
 8014e08:	0039      	movs	r1, r7
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00f      	beq.n	8014e2e <_strtod_l+0x982>
 8014e0e:	f7ff fb35 	bl	801447c <sulp>
 8014e12:	0002      	movs	r2, r0
 8014e14:	000b      	movs	r3, r1
 8014e16:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e1a:	f7ec f993 	bl	8001144 <__aeabi_dadd>
 8014e1e:	0006      	movs	r6, r0
 8014e20:	000f      	movs	r7, r1
 8014e22:	e74b      	b.n	8014cbc <_strtod_l+0x810>
 8014e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e26:	4233      	tst	r3, r6
 8014e28:	d100      	bne.n	8014e2c <_strtod_l+0x980>
 8014e2a:	e747      	b.n	8014cbc <_strtod_l+0x810>
 8014e2c:	e7e9      	b.n	8014e02 <_strtod_l+0x956>
 8014e2e:	f7ff fb25 	bl	801447c <sulp>
 8014e32:	0002      	movs	r2, r0
 8014e34:	000b      	movs	r3, r1
 8014e36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014e38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014e3a:	f7ed fb1b 	bl	8002474 <__aeabi_dsub>
 8014e3e:	2200      	movs	r2, #0
 8014e40:	2300      	movs	r3, #0
 8014e42:	0006      	movs	r6, r0
 8014e44:	000f      	movs	r7, r1
 8014e46:	f7eb faff 	bl	8000448 <__aeabi_dcmpeq>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	d000      	beq.n	8014e50 <_strtod_l+0x9a4>
 8014e4e:	e5f8      	b.n	8014a42 <_strtod_l+0x596>
 8014e50:	e734      	b.n	8014cbc <_strtod_l+0x810>
 8014e52:	46c0      	nop			; (mov r8, r8)
 8014e54:	fffffc02 	.word	0xfffffc02
 8014e58:	7ff00000 	.word	0x7ff00000
 8014e5c:	0801a2e0 	.word	0x0801a2e0
 8014e60:	fffffbe2 	.word	0xfffffbe2
 8014e64:	000fffff 	.word	0x000fffff
 8014e68:	7fefffff 	.word	0x7fefffff
 8014e6c:	39500000 	.word	0x39500000
 8014e70:	fff00000 	.word	0xfff00000
 8014e74:	9905      	ldr	r1, [sp, #20]
 8014e76:	0020      	movs	r0, r4
 8014e78:	f001 ff94 	bl	8016da4 <__ratio>
 8014e7c:	2380      	movs	r3, #128	; 0x80
 8014e7e:	2200      	movs	r2, #0
 8014e80:	05db      	lsls	r3, r3, #23
 8014e82:	9008      	str	r0, [sp, #32]
 8014e84:	9109      	str	r1, [sp, #36]	; 0x24
 8014e86:	f7eb faef 	bl	8000468 <__aeabi_dcmple>
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	d100      	bne.n	8014e90 <_strtod_l+0x9e4>
 8014e8e:	e07f      	b.n	8014f90 <_strtod_l+0xae4>
 8014e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d04b      	beq.n	8014f2e <_strtod_l+0xa82>
 8014e96:	2200      	movs	r2, #0
 8014e98:	4b8a      	ldr	r3, [pc, #552]	; (80150c4 <_strtod_l+0xc18>)
 8014e9a:	9210      	str	r2, [sp, #64]	; 0x40
 8014e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8014e9e:	4b89      	ldr	r3, [pc, #548]	; (80150c4 <_strtod_l+0xc18>)
 8014ea0:	9308      	str	r3, [sp, #32]
 8014ea2:	4a89      	ldr	r2, [pc, #548]	; (80150c8 <_strtod_l+0xc1c>)
 8014ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ea6:	4013      	ands	r3, r2
 8014ea8:	9314      	str	r3, [sp, #80]	; 0x50
 8014eaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014eac:	4b87      	ldr	r3, [pc, #540]	; (80150cc <_strtod_l+0xc20>)
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d000      	beq.n	8014eb4 <_strtod_l+0xa08>
 8014eb2:	e0ba      	b.n	801502a <_strtod_l+0xb7e>
 8014eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014eb8:	921a      	str	r2, [sp, #104]	; 0x68
 8014eba:	931b      	str	r3, [sp, #108]	; 0x6c
 8014ebc:	4a84      	ldr	r2, [pc, #528]	; (80150d0 <_strtod_l+0xc24>)
 8014ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ec0:	4694      	mov	ip, r2
 8014ec2:	4463      	add	r3, ip
 8014ec4:	001f      	movs	r7, r3
 8014ec6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014eca:	0030      	movs	r0, r6
 8014ecc:	0039      	movs	r1, r7
 8014ece:	920c      	str	r2, [sp, #48]	; 0x30
 8014ed0:	930d      	str	r3, [sp, #52]	; 0x34
 8014ed2:	f001 fea1 	bl	8016c18 <__ulp>
 8014ed6:	0002      	movs	r2, r0
 8014ed8:	000b      	movs	r3, r1
 8014eda:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014edc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014ede:	f7ed f857 	bl	8001f90 <__aeabi_dmul>
 8014ee2:	0032      	movs	r2, r6
 8014ee4:	003b      	movs	r3, r7
 8014ee6:	f7ec f92d 	bl	8001144 <__aeabi_dadd>
 8014eea:	4a77      	ldr	r2, [pc, #476]	; (80150c8 <_strtod_l+0xc1c>)
 8014eec:	4b79      	ldr	r3, [pc, #484]	; (80150d4 <_strtod_l+0xc28>)
 8014eee:	0006      	movs	r6, r0
 8014ef0:	400a      	ands	r2, r1
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d964      	bls.n	8014fc0 <_strtod_l+0xb14>
 8014ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ef8:	4a77      	ldr	r2, [pc, #476]	; (80150d8 <_strtod_l+0xc2c>)
 8014efa:	4293      	cmp	r3, r2
 8014efc:	d103      	bne.n	8014f06 <_strtod_l+0xa5a>
 8014efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f00:	3301      	adds	r3, #1
 8014f02:	d100      	bne.n	8014f06 <_strtod_l+0xa5a>
 8014f04:	e508      	b.n	8014918 <_strtod_l+0x46c>
 8014f06:	2601      	movs	r6, #1
 8014f08:	4f73      	ldr	r7, [pc, #460]	; (80150d8 <_strtod_l+0xc2c>)
 8014f0a:	4276      	negs	r6, r6
 8014f0c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f0e:	9804      	ldr	r0, [sp, #16]
 8014f10:	f001 fbe9 	bl	80166e6 <_Bfree>
 8014f14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f16:	9804      	ldr	r0, [sp, #16]
 8014f18:	f001 fbe5 	bl	80166e6 <_Bfree>
 8014f1c:	9905      	ldr	r1, [sp, #20]
 8014f1e:	9804      	ldr	r0, [sp, #16]
 8014f20:	f001 fbe1 	bl	80166e6 <_Bfree>
 8014f24:	0021      	movs	r1, r4
 8014f26:	9804      	ldr	r0, [sp, #16]
 8014f28:	f001 fbdd 	bl	80166e6 <_Bfree>
 8014f2c:	e5f4      	b.n	8014b18 <_strtod_l+0x66c>
 8014f2e:	2e00      	cmp	r6, #0
 8014f30:	d11e      	bne.n	8014f70 <_strtod_l+0xac4>
 8014f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f34:	031b      	lsls	r3, r3, #12
 8014f36:	d121      	bne.n	8014f7c <_strtod_l+0xad0>
 8014f38:	9808      	ldr	r0, [sp, #32]
 8014f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	4b61      	ldr	r3, [pc, #388]	; (80150c4 <_strtod_l+0xc18>)
 8014f40:	f7eb fa88 	bl	8000454 <__aeabi_dcmplt>
 8014f44:	2800      	cmp	r0, #0
 8014f46:	d11f      	bne.n	8014f88 <_strtod_l+0xadc>
 8014f48:	9808      	ldr	r0, [sp, #32]
 8014f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	4b63      	ldr	r3, [pc, #396]	; (80150dc <_strtod_l+0xc30>)
 8014f50:	f7ed f81e 	bl	8001f90 <__aeabi_dmul>
 8014f54:	0005      	movs	r5, r0
 8014f56:	9108      	str	r1, [sp, #32]
 8014f58:	2280      	movs	r2, #128	; 0x80
 8014f5a:	0612      	lsls	r2, r2, #24
 8014f5c:	4694      	mov	ip, r2
 8014f5e:	9b08      	ldr	r3, [sp, #32]
 8014f60:	951e      	str	r5, [sp, #120]	; 0x78
 8014f62:	4463      	add	r3, ip
 8014f64:	931f      	str	r3, [sp, #124]	; 0x7c
 8014f66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014f68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f6a:	9210      	str	r2, [sp, #64]	; 0x40
 8014f6c:	9311      	str	r3, [sp, #68]	; 0x44
 8014f6e:	e798      	b.n	8014ea2 <_strtod_l+0x9f6>
 8014f70:	2e01      	cmp	r6, #1
 8014f72:	d103      	bne.n	8014f7c <_strtod_l+0xad0>
 8014f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d100      	bne.n	8014f7c <_strtod_l+0xad0>
 8014f7a:	e562      	b.n	8014a42 <_strtod_l+0x596>
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	4b58      	ldr	r3, [pc, #352]	; (80150e0 <_strtod_l+0xc34>)
 8014f80:	2500      	movs	r5, #0
 8014f82:	9210      	str	r2, [sp, #64]	; 0x40
 8014f84:	9311      	str	r3, [sp, #68]	; 0x44
 8014f86:	e78a      	b.n	8014e9e <_strtod_l+0x9f2>
 8014f88:	4b54      	ldr	r3, [pc, #336]	; (80150dc <_strtod_l+0xc30>)
 8014f8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014f8c:	9308      	str	r3, [sp, #32]
 8014f8e:	e7e3      	b.n	8014f58 <_strtod_l+0xaac>
 8014f90:	4b52      	ldr	r3, [pc, #328]	; (80150dc <_strtod_l+0xc30>)
 8014f92:	9808      	ldr	r0, [sp, #32]
 8014f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f96:	2200      	movs	r2, #0
 8014f98:	f7ec fffa 	bl	8001f90 <__aeabi_dmul>
 8014f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f9e:	0005      	movs	r5, r0
 8014fa0:	9108      	str	r1, [sp, #32]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d107      	bne.n	8014fb6 <_strtod_l+0xb0a>
 8014fa6:	2380      	movs	r3, #128	; 0x80
 8014fa8:	061b      	lsls	r3, r3, #24
 8014faa:	18cb      	adds	r3, r1, r3
 8014fac:	9016      	str	r0, [sp, #88]	; 0x58
 8014fae:	9317      	str	r3, [sp, #92]	; 0x5c
 8014fb0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014fb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fb4:	e7d9      	b.n	8014f6a <_strtod_l+0xabe>
 8014fb6:	0002      	movs	r2, r0
 8014fb8:	9b08      	ldr	r3, [sp, #32]
 8014fba:	9216      	str	r2, [sp, #88]	; 0x58
 8014fbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8014fbe:	e7f7      	b.n	8014fb0 <_strtod_l+0xb04>
 8014fc0:	23d4      	movs	r3, #212	; 0xd4
 8014fc2:	049b      	lsls	r3, r3, #18
 8014fc4:	18cf      	adds	r7, r1, r3
 8014fc6:	9b06      	ldr	r3, [sp, #24]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d19f      	bne.n	8014f0c <_strtod_l+0xa60>
 8014fcc:	4b3e      	ldr	r3, [pc, #248]	; (80150c8 <_strtod_l+0xc1c>)
 8014fce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fd0:	970c      	str	r7, [sp, #48]	; 0x30
 8014fd2:	403b      	ands	r3, r7
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d199      	bne.n	8014f0c <_strtod_l+0xa60>
 8014fd8:	9908      	ldr	r1, [sp, #32]
 8014fda:	0028      	movs	r0, r5
 8014fdc:	f7ed fdae 	bl	8002b3c <__aeabi_d2iz>
 8014fe0:	f7ed fde2 	bl	8002ba8 <__aeabi_i2d>
 8014fe4:	000b      	movs	r3, r1
 8014fe6:	0002      	movs	r2, r0
 8014fe8:	9908      	ldr	r1, [sp, #32]
 8014fea:	0028      	movs	r0, r5
 8014fec:	f7ed fa42 	bl	8002474 <__aeabi_dsub>
 8014ff0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ff2:	9008      	str	r0, [sp, #32]
 8014ff4:	9109      	str	r1, [sp, #36]	; 0x24
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d104      	bne.n	8015004 <_strtod_l+0xb58>
 8014ffa:	2e00      	cmp	r6, #0
 8014ffc:	d102      	bne.n	8015004 <_strtod_l+0xb58>
 8014ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015000:	031b      	lsls	r3, r3, #12
 8015002:	d058      	beq.n	80150b6 <_strtod_l+0xc0a>
 8015004:	9808      	ldr	r0, [sp, #32]
 8015006:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015008:	4a36      	ldr	r2, [pc, #216]	; (80150e4 <_strtod_l+0xc38>)
 801500a:	4b37      	ldr	r3, [pc, #220]	; (80150e8 <_strtod_l+0xc3c>)
 801500c:	f7eb fa22 	bl	8000454 <__aeabi_dcmplt>
 8015010:	2800      	cmp	r0, #0
 8015012:	d000      	beq.n	8015016 <_strtod_l+0xb6a>
 8015014:	e489      	b.n	801492a <_strtod_l+0x47e>
 8015016:	9808      	ldr	r0, [sp, #32]
 8015018:	9909      	ldr	r1, [sp, #36]	; 0x24
 801501a:	4a34      	ldr	r2, [pc, #208]	; (80150ec <_strtod_l+0xc40>)
 801501c:	4b2f      	ldr	r3, [pc, #188]	; (80150dc <_strtod_l+0xc30>)
 801501e:	f7eb fa2d 	bl	800047c <__aeabi_dcmpgt>
 8015022:	2800      	cmp	r0, #0
 8015024:	d100      	bne.n	8015028 <_strtod_l+0xb7c>
 8015026:	e771      	b.n	8014f0c <_strtod_l+0xa60>
 8015028:	e47f      	b.n	801492a <_strtod_l+0x47e>
 801502a:	9b06      	ldr	r3, [sp, #24]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d02a      	beq.n	8015086 <_strtod_l+0xbda>
 8015030:	23d4      	movs	r3, #212	; 0xd4
 8015032:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015034:	04db      	lsls	r3, r3, #19
 8015036:	429a      	cmp	r2, r3
 8015038:	d825      	bhi.n	8015086 <_strtod_l+0xbda>
 801503a:	4a2d      	ldr	r2, [pc, #180]	; (80150f0 <_strtod_l+0xc44>)
 801503c:	4b2d      	ldr	r3, [pc, #180]	; (80150f4 <_strtod_l+0xc48>)
 801503e:	0028      	movs	r0, r5
 8015040:	9908      	ldr	r1, [sp, #32]
 8015042:	f7eb fa11 	bl	8000468 <__aeabi_dcmple>
 8015046:	2800      	cmp	r0, #0
 8015048:	d016      	beq.n	8015078 <_strtod_l+0xbcc>
 801504a:	0028      	movs	r0, r5
 801504c:	9908      	ldr	r1, [sp, #32]
 801504e:	f7eb faa5 	bl	800059c <__aeabi_d2uiz>
 8015052:	2800      	cmp	r0, #0
 8015054:	d100      	bne.n	8015058 <_strtod_l+0xbac>
 8015056:	3001      	adds	r0, #1
 8015058:	f7ed fde0 	bl	8002c1c <__aeabi_ui2d>
 801505c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801505e:	0005      	movs	r5, r0
 8015060:	9108      	str	r1, [sp, #32]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d122      	bne.n	80150ac <_strtod_l+0xc00>
 8015066:	2380      	movs	r3, #128	; 0x80
 8015068:	061b      	lsls	r3, r3, #24
 801506a:	18cb      	adds	r3, r1, r3
 801506c:	9018      	str	r0, [sp, #96]	; 0x60
 801506e:	9319      	str	r3, [sp, #100]	; 0x64
 8015070:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015074:	9210      	str	r2, [sp, #64]	; 0x40
 8015076:	9311      	str	r3, [sp, #68]	; 0x44
 8015078:	22d6      	movs	r2, #214	; 0xd6
 801507a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801507c:	04d2      	lsls	r2, r2, #19
 801507e:	189b      	adds	r3, r3, r2
 8015080:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015082:	1a9b      	subs	r3, r3, r2
 8015084:	9311      	str	r3, [sp, #68]	; 0x44
 8015086:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015088:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801508a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801508c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801508e:	f001 fdc3 	bl	8016c18 <__ulp>
 8015092:	0002      	movs	r2, r0
 8015094:	000b      	movs	r3, r1
 8015096:	0030      	movs	r0, r6
 8015098:	0039      	movs	r1, r7
 801509a:	f7ec ff79 	bl	8001f90 <__aeabi_dmul>
 801509e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80150a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150a2:	f7ec f84f 	bl	8001144 <__aeabi_dadd>
 80150a6:	0006      	movs	r6, r0
 80150a8:	000f      	movs	r7, r1
 80150aa:	e78c      	b.n	8014fc6 <_strtod_l+0xb1a>
 80150ac:	0002      	movs	r2, r0
 80150ae:	9b08      	ldr	r3, [sp, #32]
 80150b0:	9218      	str	r2, [sp, #96]	; 0x60
 80150b2:	9319      	str	r3, [sp, #100]	; 0x64
 80150b4:	e7dc      	b.n	8015070 <_strtod_l+0xbc4>
 80150b6:	4a0b      	ldr	r2, [pc, #44]	; (80150e4 <_strtod_l+0xc38>)
 80150b8:	4b0f      	ldr	r3, [pc, #60]	; (80150f8 <_strtod_l+0xc4c>)
 80150ba:	9808      	ldr	r0, [sp, #32]
 80150bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150be:	f7eb f9c9 	bl	8000454 <__aeabi_dcmplt>
 80150c2:	e7ae      	b.n	8015022 <_strtod_l+0xb76>
 80150c4:	3ff00000 	.word	0x3ff00000
 80150c8:	7ff00000 	.word	0x7ff00000
 80150cc:	7fe00000 	.word	0x7fe00000
 80150d0:	fcb00000 	.word	0xfcb00000
 80150d4:	7c9fffff 	.word	0x7c9fffff
 80150d8:	7fefffff 	.word	0x7fefffff
 80150dc:	3fe00000 	.word	0x3fe00000
 80150e0:	bff00000 	.word	0xbff00000
 80150e4:	94a03595 	.word	0x94a03595
 80150e8:	3fdfffff 	.word	0x3fdfffff
 80150ec:	35afe535 	.word	0x35afe535
 80150f0:	ffc00000 	.word	0xffc00000
 80150f4:	41dfffff 	.word	0x41dfffff
 80150f8:	3fcfffff 	.word	0x3fcfffff

080150fc <strtod>:
 80150fc:	4b06      	ldr	r3, [pc, #24]	; (8015118 <strtod+0x1c>)
 80150fe:	b510      	push	{r4, lr}
 8015100:	0004      	movs	r4, r0
 8015102:	6818      	ldr	r0, [r3, #0]
 8015104:	000a      	movs	r2, r1
 8015106:	6a03      	ldr	r3, [r0, #32]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d100      	bne.n	801510e <strtod+0x12>
 801510c:	4b03      	ldr	r3, [pc, #12]	; (801511c <strtod+0x20>)
 801510e:	0021      	movs	r1, r4
 8015110:	f7ff f9cc 	bl	80144ac <_strtod_l>
 8015114:	bd10      	pop	{r4, pc}
 8015116:	46c0      	nop			; (mov r8, r8)
 8015118:	200000c0 	.word	0x200000c0
 801511c:	20000124 	.word	0x20000124

08015120 <strtok>:
 8015120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015122:	4b12      	ldr	r3, [pc, #72]	; (801516c <strtok+0x4c>)
 8015124:	0006      	movs	r6, r0
 8015126:	681d      	ldr	r5, [r3, #0]
 8015128:	000f      	movs	r7, r1
 801512a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801512c:	2c00      	cmp	r4, #0
 801512e:	d116      	bne.n	801515e <strtok+0x3e>
 8015130:	2050      	movs	r0, #80	; 0x50
 8015132:	f7fe fb6d 	bl	8013810 <malloc>
 8015136:	65a8      	str	r0, [r5, #88]	; 0x58
 8015138:	6004      	str	r4, [r0, #0]
 801513a:	6044      	str	r4, [r0, #4]
 801513c:	6084      	str	r4, [r0, #8]
 801513e:	60c4      	str	r4, [r0, #12]
 8015140:	6104      	str	r4, [r0, #16]
 8015142:	6144      	str	r4, [r0, #20]
 8015144:	6184      	str	r4, [r0, #24]
 8015146:	6284      	str	r4, [r0, #40]	; 0x28
 8015148:	62c4      	str	r4, [r0, #44]	; 0x2c
 801514a:	6304      	str	r4, [r0, #48]	; 0x30
 801514c:	6344      	str	r4, [r0, #52]	; 0x34
 801514e:	6384      	str	r4, [r0, #56]	; 0x38
 8015150:	63c4      	str	r4, [r0, #60]	; 0x3c
 8015152:	6404      	str	r4, [r0, #64]	; 0x40
 8015154:	6444      	str	r4, [r0, #68]	; 0x44
 8015156:	6484      	str	r4, [r0, #72]	; 0x48
 8015158:	64c4      	str	r4, [r0, #76]	; 0x4c
 801515a:	7704      	strb	r4, [r0, #28]
 801515c:	6244      	str	r4, [r0, #36]	; 0x24
 801515e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8015160:	0039      	movs	r1, r7
 8015162:	0030      	movs	r0, r6
 8015164:	2301      	movs	r3, #1
 8015166:	f000 f803 	bl	8015170 <__strtok_r>
 801516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801516c:	200000c0 	.word	0x200000c0

08015170 <__strtok_r>:
 8015170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015172:	2800      	cmp	r0, #0
 8015174:	d104      	bne.n	8015180 <__strtok_r+0x10>
 8015176:	6810      	ldr	r0, [r2, #0]
 8015178:	2800      	cmp	r0, #0
 801517a:	d101      	bne.n	8015180 <__strtok_r+0x10>
 801517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801517e:	0020      	movs	r0, r4
 8015180:	000e      	movs	r6, r1
 8015182:	7805      	ldrb	r5, [r0, #0]
 8015184:	1c44      	adds	r4, r0, #1
 8015186:	7837      	ldrb	r7, [r6, #0]
 8015188:	2f00      	cmp	r7, #0
 801518a:	d104      	bne.n	8015196 <__strtok_r+0x26>
 801518c:	2d00      	cmp	r5, #0
 801518e:	d110      	bne.n	80151b2 <__strtok_r+0x42>
 8015190:	6015      	str	r5, [r2, #0]
 8015192:	0028      	movs	r0, r5
 8015194:	e7f2      	b.n	801517c <__strtok_r+0xc>
 8015196:	3601      	adds	r6, #1
 8015198:	42bd      	cmp	r5, r7
 801519a:	d1f4      	bne.n	8015186 <__strtok_r+0x16>
 801519c:	2b00      	cmp	r3, #0
 801519e:	d1ee      	bne.n	801517e <__strtok_r+0xe>
 80151a0:	6014      	str	r4, [r2, #0]
 80151a2:	7003      	strb	r3, [r0, #0]
 80151a4:	e7ea      	b.n	801517c <__strtok_r+0xc>
 80151a6:	0033      	movs	r3, r6
 80151a8:	e00d      	b.n	80151c6 <__strtok_r+0x56>
 80151aa:	3501      	adds	r5, #1
 80151ac:	2f00      	cmp	r7, #0
 80151ae:	d103      	bne.n	80151b8 <__strtok_r+0x48>
 80151b0:	001c      	movs	r4, r3
 80151b2:	000d      	movs	r5, r1
 80151b4:	7826      	ldrb	r6, [r4, #0]
 80151b6:	1c63      	adds	r3, r4, #1
 80151b8:	782f      	ldrb	r7, [r5, #0]
 80151ba:	42be      	cmp	r6, r7
 80151bc:	d1f5      	bne.n	80151aa <__strtok_r+0x3a>
 80151be:	2e00      	cmp	r6, #0
 80151c0:	d0f1      	beq.n	80151a6 <__strtok_r+0x36>
 80151c2:	2100      	movs	r1, #0
 80151c4:	7021      	strb	r1, [r4, #0]
 80151c6:	6013      	str	r3, [r2, #0]
 80151c8:	e7d8      	b.n	801517c <__strtok_r+0xc>
	...

080151cc <_strtol_l.isra.0>:
 80151cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ce:	001f      	movs	r7, r3
 80151d0:	000e      	movs	r6, r1
 80151d2:	b087      	sub	sp, #28
 80151d4:	9005      	str	r0, [sp, #20]
 80151d6:	9101      	str	r1, [sp, #4]
 80151d8:	9202      	str	r2, [sp, #8]
 80151da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80151dc:	7834      	ldrb	r4, [r6, #0]
 80151de:	f7fe fb05 	bl	80137ec <__locale_ctype_ptr_l>
 80151e2:	2208      	movs	r2, #8
 80151e4:	1900      	adds	r0, r0, r4
 80151e6:	7843      	ldrb	r3, [r0, #1]
 80151e8:	1c75      	adds	r5, r6, #1
 80151ea:	4013      	ands	r3, r2
 80151ec:	d136      	bne.n	801525c <_strtol_l.isra.0+0x90>
 80151ee:	2c2d      	cmp	r4, #45	; 0x2d
 80151f0:	d136      	bne.n	8015260 <_strtol_l.isra.0+0x94>
 80151f2:	1cb5      	adds	r5, r6, #2
 80151f4:	7874      	ldrb	r4, [r6, #1]
 80151f6:	2601      	movs	r6, #1
 80151f8:	2f00      	cmp	r7, #0
 80151fa:	d062      	beq.n	80152c2 <_strtol_l.isra.0+0xf6>
 80151fc:	2f10      	cmp	r7, #16
 80151fe:	d109      	bne.n	8015214 <_strtol_l.isra.0+0x48>
 8015200:	2c30      	cmp	r4, #48	; 0x30
 8015202:	d107      	bne.n	8015214 <_strtol_l.isra.0+0x48>
 8015204:	2220      	movs	r2, #32
 8015206:	782b      	ldrb	r3, [r5, #0]
 8015208:	4393      	bics	r3, r2
 801520a:	2b58      	cmp	r3, #88	; 0x58
 801520c:	d154      	bne.n	80152b8 <_strtol_l.isra.0+0xec>
 801520e:	2710      	movs	r7, #16
 8015210:	786c      	ldrb	r4, [r5, #1]
 8015212:	3502      	adds	r5, #2
 8015214:	4b2d      	ldr	r3, [pc, #180]	; (80152cc <_strtol_l.isra.0+0x100>)
 8015216:	0039      	movs	r1, r7
 8015218:	18f3      	adds	r3, r6, r3
 801521a:	0018      	movs	r0, r3
 801521c:	9303      	str	r3, [sp, #12]
 801521e:	f7eb f813 	bl	8000248 <__aeabi_uidivmod>
 8015222:	9104      	str	r1, [sp, #16]
 8015224:	2101      	movs	r1, #1
 8015226:	2300      	movs	r3, #0
 8015228:	4249      	negs	r1, r1
 801522a:	0002      	movs	r2, r0
 801522c:	468c      	mov	ip, r1
 801522e:	0018      	movs	r0, r3
 8015230:	0021      	movs	r1, r4
 8015232:	3930      	subs	r1, #48	; 0x30
 8015234:	2909      	cmp	r1, #9
 8015236:	d81a      	bhi.n	801526e <_strtol_l.isra.0+0xa2>
 8015238:	000c      	movs	r4, r1
 801523a:	42a7      	cmp	r7, r4
 801523c:	dd23      	ble.n	8015286 <_strtol_l.isra.0+0xba>
 801523e:	1c59      	adds	r1, r3, #1
 8015240:	d009      	beq.n	8015256 <_strtol_l.isra.0+0x8a>
 8015242:	4663      	mov	r3, ip
 8015244:	4282      	cmp	r2, r0
 8015246:	d306      	bcc.n	8015256 <_strtol_l.isra.0+0x8a>
 8015248:	d102      	bne.n	8015250 <_strtol_l.isra.0+0x84>
 801524a:	9904      	ldr	r1, [sp, #16]
 801524c:	42a1      	cmp	r1, r4
 801524e:	db02      	blt.n	8015256 <_strtol_l.isra.0+0x8a>
 8015250:	2301      	movs	r3, #1
 8015252:	4378      	muls	r0, r7
 8015254:	1820      	adds	r0, r4, r0
 8015256:	782c      	ldrb	r4, [r5, #0]
 8015258:	3501      	adds	r5, #1
 801525a:	e7e9      	b.n	8015230 <_strtol_l.isra.0+0x64>
 801525c:	002e      	movs	r6, r5
 801525e:	e7bc      	b.n	80151da <_strtol_l.isra.0+0xe>
 8015260:	2c2b      	cmp	r4, #43	; 0x2b
 8015262:	d001      	beq.n	8015268 <_strtol_l.isra.0+0x9c>
 8015264:	001e      	movs	r6, r3
 8015266:	e7c7      	b.n	80151f8 <_strtol_l.isra.0+0x2c>
 8015268:	1cb5      	adds	r5, r6, #2
 801526a:	7874      	ldrb	r4, [r6, #1]
 801526c:	e7fa      	b.n	8015264 <_strtol_l.isra.0+0x98>
 801526e:	0021      	movs	r1, r4
 8015270:	3941      	subs	r1, #65	; 0x41
 8015272:	2919      	cmp	r1, #25
 8015274:	d801      	bhi.n	801527a <_strtol_l.isra.0+0xae>
 8015276:	3c37      	subs	r4, #55	; 0x37
 8015278:	e7df      	b.n	801523a <_strtol_l.isra.0+0x6e>
 801527a:	0021      	movs	r1, r4
 801527c:	3961      	subs	r1, #97	; 0x61
 801527e:	2919      	cmp	r1, #25
 8015280:	d801      	bhi.n	8015286 <_strtol_l.isra.0+0xba>
 8015282:	3c57      	subs	r4, #87	; 0x57
 8015284:	e7d9      	b.n	801523a <_strtol_l.isra.0+0x6e>
 8015286:	1c5a      	adds	r2, r3, #1
 8015288:	d108      	bne.n	801529c <_strtol_l.isra.0+0xd0>
 801528a:	9a05      	ldr	r2, [sp, #20]
 801528c:	3323      	adds	r3, #35	; 0x23
 801528e:	6013      	str	r3, [r2, #0]
 8015290:	9b02      	ldr	r3, [sp, #8]
 8015292:	9803      	ldr	r0, [sp, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d109      	bne.n	80152ac <_strtol_l.isra.0+0xe0>
 8015298:	b007      	add	sp, #28
 801529a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801529c:	2e00      	cmp	r6, #0
 801529e:	d000      	beq.n	80152a2 <_strtol_l.isra.0+0xd6>
 80152a0:	4240      	negs	r0, r0
 80152a2:	9a02      	ldr	r2, [sp, #8]
 80152a4:	2a00      	cmp	r2, #0
 80152a6:	d0f7      	beq.n	8015298 <_strtol_l.isra.0+0xcc>
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d001      	beq.n	80152b0 <_strtol_l.isra.0+0xe4>
 80152ac:	1e6b      	subs	r3, r5, #1
 80152ae:	9301      	str	r3, [sp, #4]
 80152b0:	9b02      	ldr	r3, [sp, #8]
 80152b2:	9a01      	ldr	r2, [sp, #4]
 80152b4:	601a      	str	r2, [r3, #0]
 80152b6:	e7ef      	b.n	8015298 <_strtol_l.isra.0+0xcc>
 80152b8:	2430      	movs	r4, #48	; 0x30
 80152ba:	2f00      	cmp	r7, #0
 80152bc:	d1aa      	bne.n	8015214 <_strtol_l.isra.0+0x48>
 80152be:	2708      	movs	r7, #8
 80152c0:	e7a8      	b.n	8015214 <_strtol_l.isra.0+0x48>
 80152c2:	2c30      	cmp	r4, #48	; 0x30
 80152c4:	d09e      	beq.n	8015204 <_strtol_l.isra.0+0x38>
 80152c6:	270a      	movs	r7, #10
 80152c8:	e7a4      	b.n	8015214 <_strtol_l.isra.0+0x48>
 80152ca:	46c0      	nop			; (mov r8, r8)
 80152cc:	7fffffff 	.word	0x7fffffff

080152d0 <strtol>:
 80152d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152d2:	0013      	movs	r3, r2
 80152d4:	4a06      	ldr	r2, [pc, #24]	; (80152f0 <strtol+0x20>)
 80152d6:	0005      	movs	r5, r0
 80152d8:	6810      	ldr	r0, [r2, #0]
 80152da:	6a04      	ldr	r4, [r0, #32]
 80152dc:	2c00      	cmp	r4, #0
 80152de:	d100      	bne.n	80152e2 <strtol+0x12>
 80152e0:	4c04      	ldr	r4, [pc, #16]	; (80152f4 <strtol+0x24>)
 80152e2:	000a      	movs	r2, r1
 80152e4:	9400      	str	r4, [sp, #0]
 80152e6:	0029      	movs	r1, r5
 80152e8:	f7ff ff70 	bl	80151cc <_strtol_l.isra.0>
 80152ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80152ee:	46c0      	nop			; (mov r8, r8)
 80152f0:	200000c0 	.word	0x200000c0
 80152f4:	20000124 	.word	0x20000124

080152f8 <__ascii_wctomb>:
 80152f8:	1e0b      	subs	r3, r1, #0
 80152fa:	d004      	beq.n	8015306 <__ascii_wctomb+0xe>
 80152fc:	2aff      	cmp	r2, #255	; 0xff
 80152fe:	d904      	bls.n	801530a <__ascii_wctomb+0x12>
 8015300:	238a      	movs	r3, #138	; 0x8a
 8015302:	6003      	str	r3, [r0, #0]
 8015304:	3b8b      	subs	r3, #139	; 0x8b
 8015306:	0018      	movs	r0, r3
 8015308:	4770      	bx	lr
 801530a:	700a      	strb	r2, [r1, #0]
 801530c:	2301      	movs	r3, #1
 801530e:	e7fa      	b.n	8015306 <__ascii_wctomb+0xe>

08015310 <quorem>:
 8015310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015312:	6903      	ldr	r3, [r0, #16]
 8015314:	690c      	ldr	r4, [r1, #16]
 8015316:	b089      	sub	sp, #36	; 0x24
 8015318:	0007      	movs	r7, r0
 801531a:	9105      	str	r1, [sp, #20]
 801531c:	2600      	movs	r6, #0
 801531e:	42a3      	cmp	r3, r4
 8015320:	db65      	blt.n	80153ee <quorem+0xde>
 8015322:	000b      	movs	r3, r1
 8015324:	3c01      	subs	r4, #1
 8015326:	3314      	adds	r3, #20
 8015328:	00a5      	lsls	r5, r4, #2
 801532a:	9303      	str	r3, [sp, #12]
 801532c:	195b      	adds	r3, r3, r5
 801532e:	9304      	str	r3, [sp, #16]
 8015330:	0003      	movs	r3, r0
 8015332:	3314      	adds	r3, #20
 8015334:	9302      	str	r3, [sp, #8]
 8015336:	195d      	adds	r5, r3, r5
 8015338:	9b04      	ldr	r3, [sp, #16]
 801533a:	6828      	ldr	r0, [r5, #0]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	1c59      	adds	r1, r3, #1
 8015340:	9301      	str	r3, [sp, #4]
 8015342:	f7ea fefb 	bl	800013c <__udivsi3>
 8015346:	9001      	str	r0, [sp, #4]
 8015348:	42b0      	cmp	r0, r6
 801534a:	d029      	beq.n	80153a0 <quorem+0x90>
 801534c:	9b03      	ldr	r3, [sp, #12]
 801534e:	9802      	ldr	r0, [sp, #8]
 8015350:	469c      	mov	ip, r3
 8015352:	9606      	str	r6, [sp, #24]
 8015354:	4662      	mov	r2, ip
 8015356:	ca08      	ldmia	r2!, {r3}
 8015358:	4694      	mov	ip, r2
 801535a:	9a01      	ldr	r2, [sp, #4]
 801535c:	b299      	uxth	r1, r3
 801535e:	4351      	muls	r1, r2
 8015360:	0c1b      	lsrs	r3, r3, #16
 8015362:	4353      	muls	r3, r2
 8015364:	1989      	adds	r1, r1, r6
 8015366:	0c0a      	lsrs	r2, r1, #16
 8015368:	189b      	adds	r3, r3, r2
 801536a:	9307      	str	r3, [sp, #28]
 801536c:	0c1e      	lsrs	r6, r3, #16
 801536e:	6803      	ldr	r3, [r0, #0]
 8015370:	b289      	uxth	r1, r1
 8015372:	b29a      	uxth	r2, r3
 8015374:	9b06      	ldr	r3, [sp, #24]
 8015376:	18d2      	adds	r2, r2, r3
 8015378:	6803      	ldr	r3, [r0, #0]
 801537a:	1a52      	subs	r2, r2, r1
 801537c:	0c19      	lsrs	r1, r3, #16
 801537e:	466b      	mov	r3, sp
 8015380:	8b9b      	ldrh	r3, [r3, #28]
 8015382:	1acb      	subs	r3, r1, r3
 8015384:	1411      	asrs	r1, r2, #16
 8015386:	185b      	adds	r3, r3, r1
 8015388:	1419      	asrs	r1, r3, #16
 801538a:	b292      	uxth	r2, r2
 801538c:	041b      	lsls	r3, r3, #16
 801538e:	431a      	orrs	r2, r3
 8015390:	9b04      	ldr	r3, [sp, #16]
 8015392:	9106      	str	r1, [sp, #24]
 8015394:	c004      	stmia	r0!, {r2}
 8015396:	4563      	cmp	r3, ip
 8015398:	d2dc      	bcs.n	8015354 <quorem+0x44>
 801539a:	682b      	ldr	r3, [r5, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d02d      	beq.n	80153fc <quorem+0xec>
 80153a0:	9905      	ldr	r1, [sp, #20]
 80153a2:	0038      	movs	r0, r7
 80153a4:	f001 fbba 	bl	8016b1c <__mcmp>
 80153a8:	2800      	cmp	r0, #0
 80153aa:	db1f      	blt.n	80153ec <quorem+0xdc>
 80153ac:	2500      	movs	r5, #0
 80153ae:	9b01      	ldr	r3, [sp, #4]
 80153b0:	9802      	ldr	r0, [sp, #8]
 80153b2:	3301      	adds	r3, #1
 80153b4:	9903      	ldr	r1, [sp, #12]
 80153b6:	9301      	str	r3, [sp, #4]
 80153b8:	6802      	ldr	r2, [r0, #0]
 80153ba:	c908      	ldmia	r1!, {r3}
 80153bc:	b292      	uxth	r2, r2
 80153be:	1955      	adds	r5, r2, r5
 80153c0:	b29a      	uxth	r2, r3
 80153c2:	1aaa      	subs	r2, r5, r2
 80153c4:	6805      	ldr	r5, [r0, #0]
 80153c6:	0c1b      	lsrs	r3, r3, #16
 80153c8:	0c2d      	lsrs	r5, r5, #16
 80153ca:	1aeb      	subs	r3, r5, r3
 80153cc:	1415      	asrs	r5, r2, #16
 80153ce:	195b      	adds	r3, r3, r5
 80153d0:	141d      	asrs	r5, r3, #16
 80153d2:	b292      	uxth	r2, r2
 80153d4:	041b      	lsls	r3, r3, #16
 80153d6:	4313      	orrs	r3, r2
 80153d8:	c008      	stmia	r0!, {r3}
 80153da:	9b04      	ldr	r3, [sp, #16]
 80153dc:	428b      	cmp	r3, r1
 80153de:	d2eb      	bcs.n	80153b8 <quorem+0xa8>
 80153e0:	9a02      	ldr	r2, [sp, #8]
 80153e2:	00a3      	lsls	r3, r4, #2
 80153e4:	18d3      	adds	r3, r2, r3
 80153e6:	681a      	ldr	r2, [r3, #0]
 80153e8:	2a00      	cmp	r2, #0
 80153ea:	d011      	beq.n	8015410 <quorem+0x100>
 80153ec:	9e01      	ldr	r6, [sp, #4]
 80153ee:	0030      	movs	r0, r6
 80153f0:	b009      	add	sp, #36	; 0x24
 80153f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153f4:	682b      	ldr	r3, [r5, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d104      	bne.n	8015404 <quorem+0xf4>
 80153fa:	3c01      	subs	r4, #1
 80153fc:	9b02      	ldr	r3, [sp, #8]
 80153fe:	3d04      	subs	r5, #4
 8015400:	42ab      	cmp	r3, r5
 8015402:	d3f7      	bcc.n	80153f4 <quorem+0xe4>
 8015404:	613c      	str	r4, [r7, #16]
 8015406:	e7cb      	b.n	80153a0 <quorem+0x90>
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	2a00      	cmp	r2, #0
 801540c:	d104      	bne.n	8015418 <quorem+0x108>
 801540e:	3c01      	subs	r4, #1
 8015410:	9a02      	ldr	r2, [sp, #8]
 8015412:	3b04      	subs	r3, #4
 8015414:	429a      	cmp	r2, r3
 8015416:	d3f7      	bcc.n	8015408 <quorem+0xf8>
 8015418:	613c      	str	r4, [r7, #16]
 801541a:	e7e7      	b.n	80153ec <quorem+0xdc>

0801541c <_dtoa_r>:
 801541c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801541e:	0016      	movs	r6, r2
 8015420:	001f      	movs	r7, r3
 8015422:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015424:	b09b      	sub	sp, #108	; 0x6c
 8015426:	9002      	str	r0, [sp, #8]
 8015428:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801542a:	9606      	str	r6, [sp, #24]
 801542c:	9707      	str	r7, [sp, #28]
 801542e:	2c00      	cmp	r4, #0
 8015430:	d108      	bne.n	8015444 <_dtoa_r+0x28>
 8015432:	2010      	movs	r0, #16
 8015434:	f7fe f9ec 	bl	8013810 <malloc>
 8015438:	9b02      	ldr	r3, [sp, #8]
 801543a:	6258      	str	r0, [r3, #36]	; 0x24
 801543c:	6044      	str	r4, [r0, #4]
 801543e:	6084      	str	r4, [r0, #8]
 8015440:	6004      	str	r4, [r0, #0]
 8015442:	60c4      	str	r4, [r0, #12]
 8015444:	9b02      	ldr	r3, [sp, #8]
 8015446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015448:	6819      	ldr	r1, [r3, #0]
 801544a:	2900      	cmp	r1, #0
 801544c:	d00b      	beq.n	8015466 <_dtoa_r+0x4a>
 801544e:	685a      	ldr	r2, [r3, #4]
 8015450:	2301      	movs	r3, #1
 8015452:	4093      	lsls	r3, r2
 8015454:	604a      	str	r2, [r1, #4]
 8015456:	608b      	str	r3, [r1, #8]
 8015458:	9802      	ldr	r0, [sp, #8]
 801545a:	f001 f944 	bl	80166e6 <_Bfree>
 801545e:	2200      	movs	r2, #0
 8015460:	9b02      	ldr	r3, [sp, #8]
 8015462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015464:	601a      	str	r2, [r3, #0]
 8015466:	2f00      	cmp	r7, #0
 8015468:	da20      	bge.n	80154ac <_dtoa_r+0x90>
 801546a:	2301      	movs	r3, #1
 801546c:	602b      	str	r3, [r5, #0]
 801546e:	007b      	lsls	r3, r7, #1
 8015470:	085b      	lsrs	r3, r3, #1
 8015472:	9307      	str	r3, [sp, #28]
 8015474:	9c07      	ldr	r4, [sp, #28]
 8015476:	4bb2      	ldr	r3, [pc, #712]	; (8015740 <_dtoa_r+0x324>)
 8015478:	0022      	movs	r2, r4
 801547a:	9317      	str	r3, [sp, #92]	; 0x5c
 801547c:	401a      	ands	r2, r3
 801547e:	429a      	cmp	r2, r3
 8015480:	d117      	bne.n	80154b2 <_dtoa_r+0x96>
 8015482:	4bb0      	ldr	r3, [pc, #704]	; (8015744 <_dtoa_r+0x328>)
 8015484:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015486:	6013      	str	r3, [r2, #0]
 8015488:	9b06      	ldr	r3, [sp, #24]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d103      	bne.n	8015496 <_dtoa_r+0x7a>
 801548e:	0324      	lsls	r4, r4, #12
 8015490:	d101      	bne.n	8015496 <_dtoa_r+0x7a>
 8015492:	f000 fd87 	bl	8015fa4 <_dtoa_r+0xb88>
 8015496:	4bac      	ldr	r3, [pc, #688]	; (8015748 <_dtoa_r+0x32c>)
 8015498:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801549a:	9308      	str	r3, [sp, #32]
 801549c:	2a00      	cmp	r2, #0
 801549e:	d002      	beq.n	80154a6 <_dtoa_r+0x8a>
 80154a0:	4baa      	ldr	r3, [pc, #680]	; (801574c <_dtoa_r+0x330>)
 80154a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80154a4:	6013      	str	r3, [r2, #0]
 80154a6:	9808      	ldr	r0, [sp, #32]
 80154a8:	b01b      	add	sp, #108	; 0x6c
 80154aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154ac:	2300      	movs	r3, #0
 80154ae:	602b      	str	r3, [r5, #0]
 80154b0:	e7e0      	b.n	8015474 <_dtoa_r+0x58>
 80154b2:	9e06      	ldr	r6, [sp, #24]
 80154b4:	9f07      	ldr	r7, [sp, #28]
 80154b6:	2200      	movs	r2, #0
 80154b8:	2300      	movs	r3, #0
 80154ba:	0030      	movs	r0, r6
 80154bc:	0039      	movs	r1, r7
 80154be:	f7ea ffc3 	bl	8000448 <__aeabi_dcmpeq>
 80154c2:	1e05      	subs	r5, r0, #0
 80154c4:	d00b      	beq.n	80154de <_dtoa_r+0xc2>
 80154c6:	2301      	movs	r3, #1
 80154c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80154ca:	6013      	str	r3, [r2, #0]
 80154cc:	4ba0      	ldr	r3, [pc, #640]	; (8015750 <_dtoa_r+0x334>)
 80154ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80154d0:	9308      	str	r3, [sp, #32]
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	d0e7      	beq.n	80154a6 <_dtoa_r+0x8a>
 80154d6:	4a9f      	ldr	r2, [pc, #636]	; (8015754 <_dtoa_r+0x338>)
 80154d8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80154da:	600a      	str	r2, [r1, #0]
 80154dc:	e7e3      	b.n	80154a6 <_dtoa_r+0x8a>
 80154de:	ab18      	add	r3, sp, #96	; 0x60
 80154e0:	9301      	str	r3, [sp, #4]
 80154e2:	ab19      	add	r3, sp, #100	; 0x64
 80154e4:	9300      	str	r3, [sp, #0]
 80154e6:	0032      	movs	r2, r6
 80154e8:	003b      	movs	r3, r7
 80154ea:	9802      	ldr	r0, [sp, #8]
 80154ec:	f001 fc06 	bl	8016cfc <__d2b>
 80154f0:	0063      	lsls	r3, r4, #1
 80154f2:	9003      	str	r0, [sp, #12]
 80154f4:	0d5b      	lsrs	r3, r3, #21
 80154f6:	d074      	beq.n	80155e2 <_dtoa_r+0x1c6>
 80154f8:	033a      	lsls	r2, r7, #12
 80154fa:	4c97      	ldr	r4, [pc, #604]	; (8015758 <_dtoa_r+0x33c>)
 80154fc:	0b12      	lsrs	r2, r2, #12
 80154fe:	4314      	orrs	r4, r2
 8015500:	0021      	movs	r1, r4
 8015502:	4a96      	ldr	r2, [pc, #600]	; (801575c <_dtoa_r+0x340>)
 8015504:	0030      	movs	r0, r6
 8015506:	9516      	str	r5, [sp, #88]	; 0x58
 8015508:	189e      	adds	r6, r3, r2
 801550a:	2200      	movs	r2, #0
 801550c:	4b94      	ldr	r3, [pc, #592]	; (8015760 <_dtoa_r+0x344>)
 801550e:	f7ec ffb1 	bl	8002474 <__aeabi_dsub>
 8015512:	4a94      	ldr	r2, [pc, #592]	; (8015764 <_dtoa_r+0x348>)
 8015514:	4b94      	ldr	r3, [pc, #592]	; (8015768 <_dtoa_r+0x34c>)
 8015516:	f7ec fd3b 	bl	8001f90 <__aeabi_dmul>
 801551a:	4a94      	ldr	r2, [pc, #592]	; (801576c <_dtoa_r+0x350>)
 801551c:	4b94      	ldr	r3, [pc, #592]	; (8015770 <_dtoa_r+0x354>)
 801551e:	f7eb fe11 	bl	8001144 <__aeabi_dadd>
 8015522:	0004      	movs	r4, r0
 8015524:	0030      	movs	r0, r6
 8015526:	000d      	movs	r5, r1
 8015528:	f7ed fb3e 	bl	8002ba8 <__aeabi_i2d>
 801552c:	4a91      	ldr	r2, [pc, #580]	; (8015774 <_dtoa_r+0x358>)
 801552e:	4b92      	ldr	r3, [pc, #584]	; (8015778 <_dtoa_r+0x35c>)
 8015530:	f7ec fd2e 	bl	8001f90 <__aeabi_dmul>
 8015534:	0002      	movs	r2, r0
 8015536:	000b      	movs	r3, r1
 8015538:	0020      	movs	r0, r4
 801553a:	0029      	movs	r1, r5
 801553c:	f7eb fe02 	bl	8001144 <__aeabi_dadd>
 8015540:	0004      	movs	r4, r0
 8015542:	000d      	movs	r5, r1
 8015544:	f7ed fafa 	bl	8002b3c <__aeabi_d2iz>
 8015548:	2200      	movs	r2, #0
 801554a:	0007      	movs	r7, r0
 801554c:	2300      	movs	r3, #0
 801554e:	0020      	movs	r0, r4
 8015550:	0029      	movs	r1, r5
 8015552:	f7ea ff7f 	bl	8000454 <__aeabi_dcmplt>
 8015556:	2800      	cmp	r0, #0
 8015558:	d009      	beq.n	801556e <_dtoa_r+0x152>
 801555a:	0038      	movs	r0, r7
 801555c:	f7ed fb24 	bl	8002ba8 <__aeabi_i2d>
 8015560:	002b      	movs	r3, r5
 8015562:	0022      	movs	r2, r4
 8015564:	f7ea ff70 	bl	8000448 <__aeabi_dcmpeq>
 8015568:	4243      	negs	r3, r0
 801556a:	4158      	adcs	r0, r3
 801556c:	1a3f      	subs	r7, r7, r0
 801556e:	2301      	movs	r3, #1
 8015570:	9314      	str	r3, [sp, #80]	; 0x50
 8015572:	2f16      	cmp	r7, #22
 8015574:	d80d      	bhi.n	8015592 <_dtoa_r+0x176>
 8015576:	4981      	ldr	r1, [pc, #516]	; (801577c <_dtoa_r+0x360>)
 8015578:	00fb      	lsls	r3, r7, #3
 801557a:	18c9      	adds	r1, r1, r3
 801557c:	6808      	ldr	r0, [r1, #0]
 801557e:	6849      	ldr	r1, [r1, #4]
 8015580:	9a06      	ldr	r2, [sp, #24]
 8015582:	9b07      	ldr	r3, [sp, #28]
 8015584:	f7ea ff7a 	bl	800047c <__aeabi_dcmpgt>
 8015588:	2800      	cmp	r0, #0
 801558a:	d046      	beq.n	801561a <_dtoa_r+0x1fe>
 801558c:	2300      	movs	r3, #0
 801558e:	3f01      	subs	r7, #1
 8015590:	9314      	str	r3, [sp, #80]	; 0x50
 8015592:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015594:	1b9e      	subs	r6, r3, r6
 8015596:	2300      	movs	r3, #0
 8015598:	930a      	str	r3, [sp, #40]	; 0x28
 801559a:	0033      	movs	r3, r6
 801559c:	3b01      	subs	r3, #1
 801559e:	930b      	str	r3, [sp, #44]	; 0x2c
 80155a0:	d504      	bpl.n	80155ac <_dtoa_r+0x190>
 80155a2:	2301      	movs	r3, #1
 80155a4:	1b9b      	subs	r3, r3, r6
 80155a6:	930a      	str	r3, [sp, #40]	; 0x28
 80155a8:	2300      	movs	r3, #0
 80155aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80155ac:	2f00      	cmp	r7, #0
 80155ae:	db36      	blt.n	801561e <_dtoa_r+0x202>
 80155b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155b2:	9711      	str	r7, [sp, #68]	; 0x44
 80155b4:	19db      	adds	r3, r3, r7
 80155b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80155b8:	2300      	movs	r3, #0
 80155ba:	9304      	str	r3, [sp, #16]
 80155bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155be:	2401      	movs	r4, #1
 80155c0:	2b09      	cmp	r3, #9
 80155c2:	d900      	bls.n	80155c6 <_dtoa_r+0x1aa>
 80155c4:	e084      	b.n	80156d0 <_dtoa_r+0x2b4>
 80155c6:	2b05      	cmp	r3, #5
 80155c8:	dd02      	ble.n	80155d0 <_dtoa_r+0x1b4>
 80155ca:	2400      	movs	r4, #0
 80155cc:	3b04      	subs	r3, #4
 80155ce:	9320      	str	r3, [sp, #128]	; 0x80
 80155d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80155d2:	1e98      	subs	r0, r3, #2
 80155d4:	2803      	cmp	r0, #3
 80155d6:	d900      	bls.n	80155da <_dtoa_r+0x1be>
 80155d8:	e084      	b.n	80156e4 <_dtoa_r+0x2c8>
 80155da:	f7ea fda5 	bl	8000128 <__gnu_thumb1_case_uqi>
 80155de:	7775      	.short	0x7775
 80155e0:	6a28      	.short	0x6a28
 80155e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80155e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80155e6:	189e      	adds	r6, r3, r2
 80155e8:	4b65      	ldr	r3, [pc, #404]	; (8015780 <_dtoa_r+0x364>)
 80155ea:	18f2      	adds	r2, r6, r3
 80155ec:	2a20      	cmp	r2, #32
 80155ee:	dd0f      	ble.n	8015610 <_dtoa_r+0x1f4>
 80155f0:	2340      	movs	r3, #64	; 0x40
 80155f2:	1a9b      	subs	r3, r3, r2
 80155f4:	409c      	lsls	r4, r3
 80155f6:	4b63      	ldr	r3, [pc, #396]	; (8015784 <_dtoa_r+0x368>)
 80155f8:	9806      	ldr	r0, [sp, #24]
 80155fa:	18f3      	adds	r3, r6, r3
 80155fc:	40d8      	lsrs	r0, r3
 80155fe:	4320      	orrs	r0, r4
 8015600:	f7ed fb0c 	bl	8002c1c <__aeabi_ui2d>
 8015604:	2301      	movs	r3, #1
 8015606:	4c60      	ldr	r4, [pc, #384]	; (8015788 <_dtoa_r+0x36c>)
 8015608:	3e01      	subs	r6, #1
 801560a:	1909      	adds	r1, r1, r4
 801560c:	9316      	str	r3, [sp, #88]	; 0x58
 801560e:	e77c      	b.n	801550a <_dtoa_r+0xee>
 8015610:	2320      	movs	r3, #32
 8015612:	9806      	ldr	r0, [sp, #24]
 8015614:	1a9b      	subs	r3, r3, r2
 8015616:	4098      	lsls	r0, r3
 8015618:	e7f2      	b.n	8015600 <_dtoa_r+0x1e4>
 801561a:	9014      	str	r0, [sp, #80]	; 0x50
 801561c:	e7b9      	b.n	8015592 <_dtoa_r+0x176>
 801561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015620:	1bdb      	subs	r3, r3, r7
 8015622:	930a      	str	r3, [sp, #40]	; 0x28
 8015624:	427b      	negs	r3, r7
 8015626:	9304      	str	r3, [sp, #16]
 8015628:	2300      	movs	r3, #0
 801562a:	9311      	str	r3, [sp, #68]	; 0x44
 801562c:	e7c6      	b.n	80155bc <_dtoa_r+0x1a0>
 801562e:	2301      	movs	r3, #1
 8015630:	930d      	str	r3, [sp, #52]	; 0x34
 8015632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015634:	2b00      	cmp	r3, #0
 8015636:	dd59      	ble.n	80156ec <_dtoa_r+0x2d0>
 8015638:	930c      	str	r3, [sp, #48]	; 0x30
 801563a:	9309      	str	r3, [sp, #36]	; 0x24
 801563c:	9a02      	ldr	r2, [sp, #8]
 801563e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8015640:	2200      	movs	r2, #0
 8015642:	606a      	str	r2, [r5, #4]
 8015644:	3204      	adds	r2, #4
 8015646:	0010      	movs	r0, r2
 8015648:	3014      	adds	r0, #20
 801564a:	6869      	ldr	r1, [r5, #4]
 801564c:	4298      	cmp	r0, r3
 801564e:	d952      	bls.n	80156f6 <_dtoa_r+0x2da>
 8015650:	9802      	ldr	r0, [sp, #8]
 8015652:	f001 f810 	bl	8016676 <_Balloc>
 8015656:	9b02      	ldr	r3, [sp, #8]
 8015658:	6028      	str	r0, [r5, #0]
 801565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	9308      	str	r3, [sp, #32]
 8015660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015662:	2b0e      	cmp	r3, #14
 8015664:	d900      	bls.n	8015668 <_dtoa_r+0x24c>
 8015666:	e10a      	b.n	801587e <_dtoa_r+0x462>
 8015668:	2c00      	cmp	r4, #0
 801566a:	d100      	bne.n	801566e <_dtoa_r+0x252>
 801566c:	e107      	b.n	801587e <_dtoa_r+0x462>
 801566e:	9b06      	ldr	r3, [sp, #24]
 8015670:	9c07      	ldr	r4, [sp, #28]
 8015672:	9312      	str	r3, [sp, #72]	; 0x48
 8015674:	9413      	str	r4, [sp, #76]	; 0x4c
 8015676:	2f00      	cmp	r7, #0
 8015678:	dc00      	bgt.n	801567c <_dtoa_r+0x260>
 801567a:	e089      	b.n	8015790 <_dtoa_r+0x374>
 801567c:	210f      	movs	r1, #15
 801567e:	003a      	movs	r2, r7
 8015680:	4b3e      	ldr	r3, [pc, #248]	; (801577c <_dtoa_r+0x360>)
 8015682:	400a      	ands	r2, r1
 8015684:	00d2      	lsls	r2, r2, #3
 8015686:	189b      	adds	r3, r3, r2
 8015688:	681d      	ldr	r5, [r3, #0]
 801568a:	685e      	ldr	r6, [r3, #4]
 801568c:	2302      	movs	r3, #2
 801568e:	113c      	asrs	r4, r7, #4
 8015690:	930e      	str	r3, [sp, #56]	; 0x38
 8015692:	06e3      	lsls	r3, r4, #27
 8015694:	d50b      	bpl.n	80156ae <_dtoa_r+0x292>
 8015696:	4b3d      	ldr	r3, [pc, #244]	; (801578c <_dtoa_r+0x370>)
 8015698:	400c      	ands	r4, r1
 801569a:	6a1a      	ldr	r2, [r3, #32]
 801569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801569e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80156a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80156a2:	f7ec f86b 	bl	800177c <__aeabi_ddiv>
 80156a6:	2303      	movs	r3, #3
 80156a8:	9006      	str	r0, [sp, #24]
 80156aa:	9107      	str	r1, [sp, #28]
 80156ac:	930e      	str	r3, [sp, #56]	; 0x38
 80156ae:	2300      	movs	r3, #0
 80156b0:	e03a      	b.n	8015728 <_dtoa_r+0x30c>
 80156b2:	2301      	movs	r3, #1
 80156b4:	930d      	str	r3, [sp, #52]	; 0x34
 80156b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156b8:	18fb      	adds	r3, r7, r3
 80156ba:	930c      	str	r3, [sp, #48]	; 0x30
 80156bc:	3301      	adds	r3, #1
 80156be:	9309      	str	r3, [sp, #36]	; 0x24
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	dcbb      	bgt.n	801563c <_dtoa_r+0x220>
 80156c4:	2301      	movs	r3, #1
 80156c6:	e7b9      	b.n	801563c <_dtoa_r+0x220>
 80156c8:	2300      	movs	r3, #0
 80156ca:	e7b1      	b.n	8015630 <_dtoa_r+0x214>
 80156cc:	2300      	movs	r3, #0
 80156ce:	e7f1      	b.n	80156b4 <_dtoa_r+0x298>
 80156d0:	2300      	movs	r3, #0
 80156d2:	940d      	str	r4, [sp, #52]	; 0x34
 80156d4:	9320      	str	r3, [sp, #128]	; 0x80
 80156d6:	3b01      	subs	r3, #1
 80156d8:	2200      	movs	r2, #0
 80156da:	930c      	str	r3, [sp, #48]	; 0x30
 80156dc:	9309      	str	r3, [sp, #36]	; 0x24
 80156de:	3313      	adds	r3, #19
 80156e0:	9221      	str	r2, [sp, #132]	; 0x84
 80156e2:	e7ab      	b.n	801563c <_dtoa_r+0x220>
 80156e4:	2301      	movs	r3, #1
 80156e6:	930d      	str	r3, [sp, #52]	; 0x34
 80156e8:	3b02      	subs	r3, #2
 80156ea:	e7f5      	b.n	80156d8 <_dtoa_r+0x2bc>
 80156ec:	2301      	movs	r3, #1
 80156ee:	930c      	str	r3, [sp, #48]	; 0x30
 80156f0:	9309      	str	r3, [sp, #36]	; 0x24
 80156f2:	001a      	movs	r2, r3
 80156f4:	e7f4      	b.n	80156e0 <_dtoa_r+0x2c4>
 80156f6:	3101      	adds	r1, #1
 80156f8:	6069      	str	r1, [r5, #4]
 80156fa:	0052      	lsls	r2, r2, #1
 80156fc:	e7a3      	b.n	8015646 <_dtoa_r+0x22a>
 80156fe:	2301      	movs	r3, #1
 8015700:	421c      	tst	r4, r3
 8015702:	d00e      	beq.n	8015722 <_dtoa_r+0x306>
 8015704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015706:	4a21      	ldr	r2, [pc, #132]	; (801578c <_dtoa_r+0x370>)
 8015708:	3301      	adds	r3, #1
 801570a:	930e      	str	r3, [sp, #56]	; 0x38
 801570c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801570e:	0028      	movs	r0, r5
 8015710:	00db      	lsls	r3, r3, #3
 8015712:	189b      	adds	r3, r3, r2
 8015714:	0031      	movs	r1, r6
 8015716:	681a      	ldr	r2, [r3, #0]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	f7ec fc39 	bl	8001f90 <__aeabi_dmul>
 801571e:	0005      	movs	r5, r0
 8015720:	000e      	movs	r6, r1
 8015722:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015724:	1064      	asrs	r4, r4, #1
 8015726:	3301      	adds	r3, #1
 8015728:	9310      	str	r3, [sp, #64]	; 0x40
 801572a:	2c00      	cmp	r4, #0
 801572c:	d1e7      	bne.n	80156fe <_dtoa_r+0x2e2>
 801572e:	9806      	ldr	r0, [sp, #24]
 8015730:	9907      	ldr	r1, [sp, #28]
 8015732:	002a      	movs	r2, r5
 8015734:	0033      	movs	r3, r6
 8015736:	f7ec f821 	bl	800177c <__aeabi_ddiv>
 801573a:	9006      	str	r0, [sp, #24]
 801573c:	9107      	str	r1, [sp, #28]
 801573e:	e042      	b.n	80157c6 <_dtoa_r+0x3aa>
 8015740:	7ff00000 	.word	0x7ff00000
 8015744:	0000270f 	.word	0x0000270f
 8015748:	0801a412 	.word	0x0801a412
 801574c:	0801a415 	.word	0x0801a415
 8015750:	0801a28e 	.word	0x0801a28e
 8015754:	0801a28f 	.word	0x0801a28f
 8015758:	3ff00000 	.word	0x3ff00000
 801575c:	fffffc01 	.word	0xfffffc01
 8015760:	3ff80000 	.word	0x3ff80000
 8015764:	636f4361 	.word	0x636f4361
 8015768:	3fd287a7 	.word	0x3fd287a7
 801576c:	8b60c8b3 	.word	0x8b60c8b3
 8015770:	3fc68a28 	.word	0x3fc68a28
 8015774:	509f79fb 	.word	0x509f79fb
 8015778:	3fd34413 	.word	0x3fd34413
 801577c:	0801a440 	.word	0x0801a440
 8015780:	00000432 	.word	0x00000432
 8015784:	00000412 	.word	0x00000412
 8015788:	fe100000 	.word	0xfe100000
 801578c:	0801a418 	.word	0x0801a418
 8015790:	2302      	movs	r3, #2
 8015792:	930e      	str	r3, [sp, #56]	; 0x38
 8015794:	2f00      	cmp	r7, #0
 8015796:	d016      	beq.n	80157c6 <_dtoa_r+0x3aa>
 8015798:	9812      	ldr	r0, [sp, #72]	; 0x48
 801579a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801579c:	427c      	negs	r4, r7
 801579e:	330d      	adds	r3, #13
 80157a0:	4023      	ands	r3, r4
 80157a2:	4ace      	ldr	r2, [pc, #824]	; (8015adc <_dtoa_r+0x6c0>)
 80157a4:	00db      	lsls	r3, r3, #3
 80157a6:	18d3      	adds	r3, r2, r3
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	f7ec fbf0 	bl	8001f90 <__aeabi_dmul>
 80157b0:	2300      	movs	r3, #0
 80157b2:	2601      	movs	r6, #1
 80157b4:	001d      	movs	r5, r3
 80157b6:	9006      	str	r0, [sp, #24]
 80157b8:	9107      	str	r1, [sp, #28]
 80157ba:	1124      	asrs	r4, r4, #4
 80157bc:	2c00      	cmp	r4, #0
 80157be:	d000      	beq.n	80157c2 <_dtoa_r+0x3a6>
 80157c0:	e08c      	b.n	80158dc <_dtoa_r+0x4c0>
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d1b9      	bne.n	801573a <_dtoa_r+0x31e>
 80157c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d100      	bne.n	80157ce <_dtoa_r+0x3b2>
 80157cc:	e096      	b.n	80158fc <_dtoa_r+0x4e0>
 80157ce:	9c06      	ldr	r4, [sp, #24]
 80157d0:	9d07      	ldr	r5, [sp, #28]
 80157d2:	2200      	movs	r2, #0
 80157d4:	4bc2      	ldr	r3, [pc, #776]	; (8015ae0 <_dtoa_r+0x6c4>)
 80157d6:	0020      	movs	r0, r4
 80157d8:	0029      	movs	r1, r5
 80157da:	f7ea fe3b 	bl	8000454 <__aeabi_dcmplt>
 80157de:	2800      	cmp	r0, #0
 80157e0:	d100      	bne.n	80157e4 <_dtoa_r+0x3c8>
 80157e2:	e08b      	b.n	80158fc <_dtoa_r+0x4e0>
 80157e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d100      	bne.n	80157ec <_dtoa_r+0x3d0>
 80157ea:	e087      	b.n	80158fc <_dtoa_r+0x4e0>
 80157ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	dd41      	ble.n	8015876 <_dtoa_r+0x45a>
 80157f2:	4bbc      	ldr	r3, [pc, #752]	; (8015ae4 <_dtoa_r+0x6c8>)
 80157f4:	2200      	movs	r2, #0
 80157f6:	0020      	movs	r0, r4
 80157f8:	0029      	movs	r1, r5
 80157fa:	f7ec fbc9 	bl	8001f90 <__aeabi_dmul>
 80157fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015800:	9006      	str	r0, [sp, #24]
 8015802:	9107      	str	r1, [sp, #28]
 8015804:	3301      	adds	r3, #1
 8015806:	930e      	str	r3, [sp, #56]	; 0x38
 8015808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801580a:	1e7e      	subs	r6, r7, #1
 801580c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801580e:	9310      	str	r3, [sp, #64]	; 0x40
 8015810:	f7ed f9ca 	bl	8002ba8 <__aeabi_i2d>
 8015814:	9a06      	ldr	r2, [sp, #24]
 8015816:	9b07      	ldr	r3, [sp, #28]
 8015818:	f7ec fbba 	bl	8001f90 <__aeabi_dmul>
 801581c:	2200      	movs	r2, #0
 801581e:	4bb2      	ldr	r3, [pc, #712]	; (8015ae8 <_dtoa_r+0x6cc>)
 8015820:	f7eb fc90 	bl	8001144 <__aeabi_dadd>
 8015824:	4ab1      	ldr	r2, [pc, #708]	; (8015aec <_dtoa_r+0x6d0>)
 8015826:	900e      	str	r0, [sp, #56]	; 0x38
 8015828:	910f      	str	r1, [sp, #60]	; 0x3c
 801582a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801582c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801582e:	4694      	mov	ip, r2
 8015830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015832:	4463      	add	r3, ip
 8015834:	9315      	str	r3, [sp, #84]	; 0x54
 8015836:	001d      	movs	r5, r3
 8015838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801583a:	2b00      	cmp	r3, #0
 801583c:	d161      	bne.n	8015902 <_dtoa_r+0x4e6>
 801583e:	9806      	ldr	r0, [sp, #24]
 8015840:	9907      	ldr	r1, [sp, #28]
 8015842:	2200      	movs	r2, #0
 8015844:	4baa      	ldr	r3, [pc, #680]	; (8015af0 <_dtoa_r+0x6d4>)
 8015846:	f7ec fe15 	bl	8002474 <__aeabi_dsub>
 801584a:	0022      	movs	r2, r4
 801584c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801584e:	9006      	str	r0, [sp, #24]
 8015850:	9107      	str	r1, [sp, #28]
 8015852:	f7ea fe13 	bl	800047c <__aeabi_dcmpgt>
 8015856:	2800      	cmp	r0, #0
 8015858:	d000      	beq.n	801585c <_dtoa_r+0x440>
 801585a:	e2a8      	b.n	8015dae <_dtoa_r+0x992>
 801585c:	48a5      	ldr	r0, [pc, #660]	; (8015af4 <_dtoa_r+0x6d8>)
 801585e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015860:	4684      	mov	ip, r0
 8015862:	4461      	add	r1, ip
 8015864:	000b      	movs	r3, r1
 8015866:	9806      	ldr	r0, [sp, #24]
 8015868:	9907      	ldr	r1, [sp, #28]
 801586a:	0022      	movs	r2, r4
 801586c:	f7ea fdf2 	bl	8000454 <__aeabi_dcmplt>
 8015870:	2800      	cmp	r0, #0
 8015872:	d000      	beq.n	8015876 <_dtoa_r+0x45a>
 8015874:	e295      	b.n	8015da2 <_dtoa_r+0x986>
 8015876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801587a:	9306      	str	r3, [sp, #24]
 801587c:	9407      	str	r4, [sp, #28]
 801587e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015880:	2b00      	cmp	r3, #0
 8015882:	da00      	bge.n	8015886 <_dtoa_r+0x46a>
 8015884:	e15c      	b.n	8015b40 <_dtoa_r+0x724>
 8015886:	2f0e      	cmp	r7, #14
 8015888:	dd00      	ble.n	801588c <_dtoa_r+0x470>
 801588a:	e159      	b.n	8015b40 <_dtoa_r+0x724>
 801588c:	4b93      	ldr	r3, [pc, #588]	; (8015adc <_dtoa_r+0x6c0>)
 801588e:	00fa      	lsls	r2, r7, #3
 8015890:	189b      	adds	r3, r3, r2
 8015892:	685c      	ldr	r4, [r3, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	9304      	str	r3, [sp, #16]
 8015898:	9405      	str	r4, [sp, #20]
 801589a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801589c:	2b00      	cmp	r3, #0
 801589e:	db00      	blt.n	80158a2 <_dtoa_r+0x486>
 80158a0:	e0d8      	b.n	8015a54 <_dtoa_r+0x638>
 80158a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	dd00      	ble.n	80158aa <_dtoa_r+0x48e>
 80158a8:	e0d4      	b.n	8015a54 <_dtoa_r+0x638>
 80158aa:	d000      	beq.n	80158ae <_dtoa_r+0x492>
 80158ac:	e27d      	b.n	8015daa <_dtoa_r+0x98e>
 80158ae:	9804      	ldr	r0, [sp, #16]
 80158b0:	9905      	ldr	r1, [sp, #20]
 80158b2:	2200      	movs	r2, #0
 80158b4:	4b8e      	ldr	r3, [pc, #568]	; (8015af0 <_dtoa_r+0x6d4>)
 80158b6:	f7ec fb6b 	bl	8001f90 <__aeabi_dmul>
 80158ba:	9a06      	ldr	r2, [sp, #24]
 80158bc:	9b07      	ldr	r3, [sp, #28]
 80158be:	f7ea fde7 	bl	8000490 <__aeabi_dcmpge>
 80158c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158c4:	9304      	str	r3, [sp, #16]
 80158c6:	001e      	movs	r6, r3
 80158c8:	2800      	cmp	r0, #0
 80158ca:	d000      	beq.n	80158ce <_dtoa_r+0x4b2>
 80158cc:	e24f      	b.n	8015d6e <_dtoa_r+0x952>
 80158ce:	9b08      	ldr	r3, [sp, #32]
 80158d0:	9a08      	ldr	r2, [sp, #32]
 80158d2:	1c5d      	adds	r5, r3, #1
 80158d4:	2331      	movs	r3, #49	; 0x31
 80158d6:	3701      	adds	r7, #1
 80158d8:	7013      	strb	r3, [r2, #0]
 80158da:	e24b      	b.n	8015d74 <_dtoa_r+0x958>
 80158dc:	4234      	tst	r4, r6
 80158de:	d00a      	beq.n	80158f6 <_dtoa_r+0x4da>
 80158e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158e2:	4a85      	ldr	r2, [pc, #532]	; (8015af8 <_dtoa_r+0x6dc>)
 80158e4:	3301      	adds	r3, #1
 80158e6:	930e      	str	r3, [sp, #56]	; 0x38
 80158e8:	00eb      	lsls	r3, r5, #3
 80158ea:	189b      	adds	r3, r3, r2
 80158ec:	681a      	ldr	r2, [r3, #0]
 80158ee:	685b      	ldr	r3, [r3, #4]
 80158f0:	f7ec fb4e 	bl	8001f90 <__aeabi_dmul>
 80158f4:	0033      	movs	r3, r6
 80158f6:	1064      	asrs	r4, r4, #1
 80158f8:	3501      	adds	r5, #1
 80158fa:	e75f      	b.n	80157bc <_dtoa_r+0x3a0>
 80158fc:	003e      	movs	r6, r7
 80158fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015900:	e784      	b.n	801580c <_dtoa_r+0x3f0>
 8015902:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015904:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015906:	1e5a      	subs	r2, r3, #1
 8015908:	4b74      	ldr	r3, [pc, #464]	; (8015adc <_dtoa_r+0x6c0>)
 801590a:	00d2      	lsls	r2, r2, #3
 801590c:	189b      	adds	r3, r3, r2
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	2900      	cmp	r1, #0
 8015914:	d049      	beq.n	80159aa <_dtoa_r+0x58e>
 8015916:	2000      	movs	r0, #0
 8015918:	4978      	ldr	r1, [pc, #480]	; (8015afc <_dtoa_r+0x6e0>)
 801591a:	f7eb ff2f 	bl	800177c <__aeabi_ddiv>
 801591e:	002b      	movs	r3, r5
 8015920:	0022      	movs	r2, r4
 8015922:	f7ec fda7 	bl	8002474 <__aeabi_dsub>
 8015926:	9b08      	ldr	r3, [sp, #32]
 8015928:	900e      	str	r0, [sp, #56]	; 0x38
 801592a:	910f      	str	r1, [sp, #60]	; 0x3c
 801592c:	9315      	str	r3, [sp, #84]	; 0x54
 801592e:	9806      	ldr	r0, [sp, #24]
 8015930:	9907      	ldr	r1, [sp, #28]
 8015932:	f7ed f903 	bl	8002b3c <__aeabi_d2iz>
 8015936:	0004      	movs	r4, r0
 8015938:	f7ed f936 	bl	8002ba8 <__aeabi_i2d>
 801593c:	0002      	movs	r2, r0
 801593e:	000b      	movs	r3, r1
 8015940:	9806      	ldr	r0, [sp, #24]
 8015942:	9907      	ldr	r1, [sp, #28]
 8015944:	f7ec fd96 	bl	8002474 <__aeabi_dsub>
 8015948:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801594a:	3430      	adds	r4, #48	; 0x30
 801594c:	1c5d      	adds	r5, r3, #1
 801594e:	701c      	strb	r4, [r3, #0]
 8015950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015954:	9006      	str	r0, [sp, #24]
 8015956:	9107      	str	r1, [sp, #28]
 8015958:	f7ea fd7c 	bl	8000454 <__aeabi_dcmplt>
 801595c:	2800      	cmp	r0, #0
 801595e:	d16c      	bne.n	8015a3a <_dtoa_r+0x61e>
 8015960:	9a06      	ldr	r2, [sp, #24]
 8015962:	9b07      	ldr	r3, [sp, #28]
 8015964:	2000      	movs	r0, #0
 8015966:	495e      	ldr	r1, [pc, #376]	; (8015ae0 <_dtoa_r+0x6c4>)
 8015968:	f7ec fd84 	bl	8002474 <__aeabi_dsub>
 801596c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801596e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015970:	f7ea fd70 	bl	8000454 <__aeabi_dcmplt>
 8015974:	2800      	cmp	r0, #0
 8015976:	d000      	beq.n	801597a <_dtoa_r+0x55e>
 8015978:	e0c3      	b.n	8015b02 <_dtoa_r+0x6e6>
 801597a:	9b08      	ldr	r3, [sp, #32]
 801597c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801597e:	1aeb      	subs	r3, r5, r3
 8015980:	429a      	cmp	r2, r3
 8015982:	dc00      	bgt.n	8015986 <_dtoa_r+0x56a>
 8015984:	e777      	b.n	8015876 <_dtoa_r+0x45a>
 8015986:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015988:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801598a:	2200      	movs	r2, #0
 801598c:	4b55      	ldr	r3, [pc, #340]	; (8015ae4 <_dtoa_r+0x6c8>)
 801598e:	f7ec faff 	bl	8001f90 <__aeabi_dmul>
 8015992:	2200      	movs	r2, #0
 8015994:	900e      	str	r0, [sp, #56]	; 0x38
 8015996:	910f      	str	r1, [sp, #60]	; 0x3c
 8015998:	9806      	ldr	r0, [sp, #24]
 801599a:	9907      	ldr	r1, [sp, #28]
 801599c:	4b51      	ldr	r3, [pc, #324]	; (8015ae4 <_dtoa_r+0x6c8>)
 801599e:	f7ec faf7 	bl	8001f90 <__aeabi_dmul>
 80159a2:	9515      	str	r5, [sp, #84]	; 0x54
 80159a4:	9006      	str	r0, [sp, #24]
 80159a6:	9107      	str	r1, [sp, #28]
 80159a8:	e7c1      	b.n	801592e <_dtoa_r+0x512>
 80159aa:	0020      	movs	r0, r4
 80159ac:	0029      	movs	r1, r5
 80159ae:	f7ec faef 	bl	8001f90 <__aeabi_dmul>
 80159b2:	9c08      	ldr	r4, [sp, #32]
 80159b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80159b6:	0023      	movs	r3, r4
 80159b8:	4694      	mov	ip, r2
 80159ba:	900e      	str	r0, [sp, #56]	; 0x38
 80159bc:	910f      	str	r1, [sp, #60]	; 0x3c
 80159be:	4463      	add	r3, ip
 80159c0:	9315      	str	r3, [sp, #84]	; 0x54
 80159c2:	9806      	ldr	r0, [sp, #24]
 80159c4:	9907      	ldr	r1, [sp, #28]
 80159c6:	f7ed f8b9 	bl	8002b3c <__aeabi_d2iz>
 80159ca:	0005      	movs	r5, r0
 80159cc:	f7ed f8ec 	bl	8002ba8 <__aeabi_i2d>
 80159d0:	000b      	movs	r3, r1
 80159d2:	0002      	movs	r2, r0
 80159d4:	9806      	ldr	r0, [sp, #24]
 80159d6:	9907      	ldr	r1, [sp, #28]
 80159d8:	f7ec fd4c 	bl	8002474 <__aeabi_dsub>
 80159dc:	3530      	adds	r5, #48	; 0x30
 80159de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159e0:	7025      	strb	r5, [r4, #0]
 80159e2:	3401      	adds	r4, #1
 80159e4:	9006      	str	r0, [sp, #24]
 80159e6:	9107      	str	r1, [sp, #28]
 80159e8:	42a3      	cmp	r3, r4
 80159ea:	d12a      	bne.n	8015a42 <_dtoa_r+0x626>
 80159ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80159ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80159f0:	9a08      	ldr	r2, [sp, #32]
 80159f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159f4:	4694      	mov	ip, r2
 80159f6:	4463      	add	r3, ip
 80159f8:	2200      	movs	r2, #0
 80159fa:	001d      	movs	r5, r3
 80159fc:	4b3f      	ldr	r3, [pc, #252]	; (8015afc <_dtoa_r+0x6e0>)
 80159fe:	f7eb fba1 	bl	8001144 <__aeabi_dadd>
 8015a02:	0002      	movs	r2, r0
 8015a04:	000b      	movs	r3, r1
 8015a06:	9806      	ldr	r0, [sp, #24]
 8015a08:	9907      	ldr	r1, [sp, #28]
 8015a0a:	f7ea fd37 	bl	800047c <__aeabi_dcmpgt>
 8015a0e:	2800      	cmp	r0, #0
 8015a10:	d000      	beq.n	8015a14 <_dtoa_r+0x5f8>
 8015a12:	e076      	b.n	8015b02 <_dtoa_r+0x6e6>
 8015a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a18:	2000      	movs	r0, #0
 8015a1a:	4938      	ldr	r1, [pc, #224]	; (8015afc <_dtoa_r+0x6e0>)
 8015a1c:	f7ec fd2a 	bl	8002474 <__aeabi_dsub>
 8015a20:	0002      	movs	r2, r0
 8015a22:	000b      	movs	r3, r1
 8015a24:	9806      	ldr	r0, [sp, #24]
 8015a26:	9907      	ldr	r1, [sp, #28]
 8015a28:	f7ea fd14 	bl	8000454 <__aeabi_dcmplt>
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	d100      	bne.n	8015a32 <_dtoa_r+0x616>
 8015a30:	e721      	b.n	8015876 <_dtoa_r+0x45a>
 8015a32:	1e6b      	subs	r3, r5, #1
 8015a34:	781a      	ldrb	r2, [r3, #0]
 8015a36:	2a30      	cmp	r2, #48	; 0x30
 8015a38:	d001      	beq.n	8015a3e <_dtoa_r+0x622>
 8015a3a:	0037      	movs	r7, r6
 8015a3c:	e03f      	b.n	8015abe <_dtoa_r+0x6a2>
 8015a3e:	001d      	movs	r5, r3
 8015a40:	e7f7      	b.n	8015a32 <_dtoa_r+0x616>
 8015a42:	9806      	ldr	r0, [sp, #24]
 8015a44:	9907      	ldr	r1, [sp, #28]
 8015a46:	2200      	movs	r2, #0
 8015a48:	4b26      	ldr	r3, [pc, #152]	; (8015ae4 <_dtoa_r+0x6c8>)
 8015a4a:	f7ec faa1 	bl	8001f90 <__aeabi_dmul>
 8015a4e:	9006      	str	r0, [sp, #24]
 8015a50:	9107      	str	r1, [sp, #28]
 8015a52:	e7b6      	b.n	80159c2 <_dtoa_r+0x5a6>
 8015a54:	9e08      	ldr	r6, [sp, #32]
 8015a56:	9a04      	ldr	r2, [sp, #16]
 8015a58:	9b05      	ldr	r3, [sp, #20]
 8015a5a:	9806      	ldr	r0, [sp, #24]
 8015a5c:	9907      	ldr	r1, [sp, #28]
 8015a5e:	f7eb fe8d 	bl	800177c <__aeabi_ddiv>
 8015a62:	f7ed f86b 	bl	8002b3c <__aeabi_d2iz>
 8015a66:	0004      	movs	r4, r0
 8015a68:	f7ed f89e 	bl	8002ba8 <__aeabi_i2d>
 8015a6c:	9a04      	ldr	r2, [sp, #16]
 8015a6e:	9b05      	ldr	r3, [sp, #20]
 8015a70:	f7ec fa8e 	bl	8001f90 <__aeabi_dmul>
 8015a74:	0002      	movs	r2, r0
 8015a76:	000b      	movs	r3, r1
 8015a78:	9806      	ldr	r0, [sp, #24]
 8015a7a:	9907      	ldr	r1, [sp, #28]
 8015a7c:	f7ec fcfa 	bl	8002474 <__aeabi_dsub>
 8015a80:	0023      	movs	r3, r4
 8015a82:	3330      	adds	r3, #48	; 0x30
 8015a84:	7033      	strb	r3, [r6, #0]
 8015a86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a88:	9b08      	ldr	r3, [sp, #32]
 8015a8a:	1c75      	adds	r5, r6, #1
 8015a8c:	1aeb      	subs	r3, r5, r3
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d148      	bne.n	8015b24 <_dtoa_r+0x708>
 8015a92:	0002      	movs	r2, r0
 8015a94:	000b      	movs	r3, r1
 8015a96:	f7eb fb55 	bl	8001144 <__aeabi_dadd>
 8015a9a:	9a04      	ldr	r2, [sp, #16]
 8015a9c:	9b05      	ldr	r3, [sp, #20]
 8015a9e:	9006      	str	r0, [sp, #24]
 8015aa0:	9107      	str	r1, [sp, #28]
 8015aa2:	f7ea fceb 	bl	800047c <__aeabi_dcmpgt>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d12a      	bne.n	8015b00 <_dtoa_r+0x6e4>
 8015aaa:	9a04      	ldr	r2, [sp, #16]
 8015aac:	9b05      	ldr	r3, [sp, #20]
 8015aae:	9806      	ldr	r0, [sp, #24]
 8015ab0:	9907      	ldr	r1, [sp, #28]
 8015ab2:	f7ea fcc9 	bl	8000448 <__aeabi_dcmpeq>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d001      	beq.n	8015abe <_dtoa_r+0x6a2>
 8015aba:	07e3      	lsls	r3, r4, #31
 8015abc:	d420      	bmi.n	8015b00 <_dtoa_r+0x6e4>
 8015abe:	9903      	ldr	r1, [sp, #12]
 8015ac0:	9802      	ldr	r0, [sp, #8]
 8015ac2:	f000 fe10 	bl	80166e6 <_Bfree>
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	702b      	strb	r3, [r5, #0]
 8015aca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015acc:	3701      	adds	r7, #1
 8015ace:	601f      	str	r7, [r3, #0]
 8015ad0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d100      	bne.n	8015ad8 <_dtoa_r+0x6bc>
 8015ad6:	e4e6      	b.n	80154a6 <_dtoa_r+0x8a>
 8015ad8:	601d      	str	r5, [r3, #0]
 8015ada:	e4e4      	b.n	80154a6 <_dtoa_r+0x8a>
 8015adc:	0801a440 	.word	0x0801a440
 8015ae0:	3ff00000 	.word	0x3ff00000
 8015ae4:	40240000 	.word	0x40240000
 8015ae8:	401c0000 	.word	0x401c0000
 8015aec:	fcc00000 	.word	0xfcc00000
 8015af0:	40140000 	.word	0x40140000
 8015af4:	7cc00000 	.word	0x7cc00000
 8015af8:	0801a418 	.word	0x0801a418
 8015afc:	3fe00000 	.word	0x3fe00000
 8015b00:	003e      	movs	r6, r7
 8015b02:	1e6b      	subs	r3, r5, #1
 8015b04:	781a      	ldrb	r2, [r3, #0]
 8015b06:	2a39      	cmp	r2, #57	; 0x39
 8015b08:	d106      	bne.n	8015b18 <_dtoa_r+0x6fc>
 8015b0a:	9a08      	ldr	r2, [sp, #32]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d107      	bne.n	8015b20 <_dtoa_r+0x704>
 8015b10:	2330      	movs	r3, #48	; 0x30
 8015b12:	7013      	strb	r3, [r2, #0]
 8015b14:	0013      	movs	r3, r2
 8015b16:	3601      	adds	r6, #1
 8015b18:	781a      	ldrb	r2, [r3, #0]
 8015b1a:	3201      	adds	r2, #1
 8015b1c:	701a      	strb	r2, [r3, #0]
 8015b1e:	e78c      	b.n	8015a3a <_dtoa_r+0x61e>
 8015b20:	001d      	movs	r5, r3
 8015b22:	e7ee      	b.n	8015b02 <_dtoa_r+0x6e6>
 8015b24:	2200      	movs	r2, #0
 8015b26:	4ba4      	ldr	r3, [pc, #656]	; (8015db8 <_dtoa_r+0x99c>)
 8015b28:	f7ec fa32 	bl	8001f90 <__aeabi_dmul>
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	2300      	movs	r3, #0
 8015b30:	9006      	str	r0, [sp, #24]
 8015b32:	9107      	str	r1, [sp, #28]
 8015b34:	002e      	movs	r6, r5
 8015b36:	f7ea fc87 	bl	8000448 <__aeabi_dcmpeq>
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	d08b      	beq.n	8015a56 <_dtoa_r+0x63a>
 8015b3e:	e7be      	b.n	8015abe <_dtoa_r+0x6a2>
 8015b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015b42:	2a00      	cmp	r2, #0
 8015b44:	d100      	bne.n	8015b48 <_dtoa_r+0x72c>
 8015b46:	e0da      	b.n	8015cfe <_dtoa_r+0x8e2>
 8015b48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015b4a:	2a01      	cmp	r2, #1
 8015b4c:	dd00      	ble.n	8015b50 <_dtoa_r+0x734>
 8015b4e:	e0bd      	b.n	8015ccc <_dtoa_r+0x8b0>
 8015b50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015b52:	2a00      	cmp	r2, #0
 8015b54:	d100      	bne.n	8015b58 <_dtoa_r+0x73c>
 8015b56:	e0b5      	b.n	8015cc4 <_dtoa_r+0x8a8>
 8015b58:	4a98      	ldr	r2, [pc, #608]	; (8015dbc <_dtoa_r+0x9a0>)
 8015b5a:	189b      	adds	r3, r3, r2
 8015b5c:	9d04      	ldr	r5, [sp, #16]
 8015b5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b62:	2101      	movs	r1, #1
 8015b64:	18d2      	adds	r2, r2, r3
 8015b66:	920a      	str	r2, [sp, #40]	; 0x28
 8015b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b6a:	9802      	ldr	r0, [sp, #8]
 8015b6c:	18d3      	adds	r3, r2, r3
 8015b6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b70:	f000 fe97 	bl	80168a2 <__i2b>
 8015b74:	0006      	movs	r6, r0
 8015b76:	2c00      	cmp	r4, #0
 8015b78:	dd0e      	ble.n	8015b98 <_dtoa_r+0x77c>
 8015b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	dd0b      	ble.n	8015b98 <_dtoa_r+0x77c>
 8015b80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b82:	0023      	movs	r3, r4
 8015b84:	4294      	cmp	r4, r2
 8015b86:	dd00      	ble.n	8015b8a <_dtoa_r+0x76e>
 8015b88:	0013      	movs	r3, r2
 8015b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b8c:	1ae4      	subs	r4, r4, r3
 8015b8e:	1ad2      	subs	r2, r2, r3
 8015b90:	920a      	str	r2, [sp, #40]	; 0x28
 8015b92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8015b98:	9b04      	ldr	r3, [sp, #16]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d01f      	beq.n	8015bde <_dtoa_r+0x7c2>
 8015b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d100      	bne.n	8015ba6 <_dtoa_r+0x78a>
 8015ba4:	e0af      	b.n	8015d06 <_dtoa_r+0x8ea>
 8015ba6:	2d00      	cmp	r5, #0
 8015ba8:	d011      	beq.n	8015bce <_dtoa_r+0x7b2>
 8015baa:	0031      	movs	r1, r6
 8015bac:	002a      	movs	r2, r5
 8015bae:	9802      	ldr	r0, [sp, #8]
 8015bb0:	f000 ff10 	bl	80169d4 <__pow5mult>
 8015bb4:	9a03      	ldr	r2, [sp, #12]
 8015bb6:	0001      	movs	r1, r0
 8015bb8:	0006      	movs	r6, r0
 8015bba:	9802      	ldr	r0, [sp, #8]
 8015bbc:	f000 fe7a 	bl	80168b4 <__multiply>
 8015bc0:	9903      	ldr	r1, [sp, #12]
 8015bc2:	9010      	str	r0, [sp, #64]	; 0x40
 8015bc4:	9802      	ldr	r0, [sp, #8]
 8015bc6:	f000 fd8e 	bl	80166e6 <_Bfree>
 8015bca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bcc:	9303      	str	r3, [sp, #12]
 8015bce:	9b04      	ldr	r3, [sp, #16]
 8015bd0:	1b5a      	subs	r2, r3, r5
 8015bd2:	d004      	beq.n	8015bde <_dtoa_r+0x7c2>
 8015bd4:	9903      	ldr	r1, [sp, #12]
 8015bd6:	9802      	ldr	r0, [sp, #8]
 8015bd8:	f000 fefc 	bl	80169d4 <__pow5mult>
 8015bdc:	9003      	str	r0, [sp, #12]
 8015bde:	2101      	movs	r1, #1
 8015be0:	9802      	ldr	r0, [sp, #8]
 8015be2:	f000 fe5e 	bl	80168a2 <__i2b>
 8015be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015be8:	9004      	str	r0, [sp, #16]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d100      	bne.n	8015bf0 <_dtoa_r+0x7d4>
 8015bee:	e1e3      	b.n	8015fb8 <_dtoa_r+0xb9c>
 8015bf0:	001a      	movs	r2, r3
 8015bf2:	0001      	movs	r1, r0
 8015bf4:	9802      	ldr	r0, [sp, #8]
 8015bf6:	f000 feed 	bl	80169d4 <__pow5mult>
 8015bfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015bfc:	9004      	str	r0, [sp, #16]
 8015bfe:	2b01      	cmp	r3, #1
 8015c00:	dd00      	ble.n	8015c04 <_dtoa_r+0x7e8>
 8015c02:	e082      	b.n	8015d0a <_dtoa_r+0x8ee>
 8015c04:	2500      	movs	r5, #0
 8015c06:	9b06      	ldr	r3, [sp, #24]
 8015c08:	42ab      	cmp	r3, r5
 8015c0a:	d10e      	bne.n	8015c2a <_dtoa_r+0x80e>
 8015c0c:	9b07      	ldr	r3, [sp, #28]
 8015c0e:	031b      	lsls	r3, r3, #12
 8015c10:	42ab      	cmp	r3, r5
 8015c12:	d10a      	bne.n	8015c2a <_dtoa_r+0x80e>
 8015c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015c16:	9a07      	ldr	r2, [sp, #28]
 8015c18:	4213      	tst	r3, r2
 8015c1a:	d006      	beq.n	8015c2a <_dtoa_r+0x80e>
 8015c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c1e:	3501      	adds	r5, #1
 8015c20:	3301      	adds	r3, #1
 8015c22:	930a      	str	r3, [sp, #40]	; 0x28
 8015c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c26:	3301      	adds	r3, #1
 8015c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c2c:	2001      	movs	r0, #1
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d16c      	bne.n	8015d0c <_dtoa_r+0x8f0>
 8015c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c34:	1818      	adds	r0, r3, r0
 8015c36:	231f      	movs	r3, #31
 8015c38:	4018      	ands	r0, r3
 8015c3a:	d07e      	beq.n	8015d3a <_dtoa_r+0x91e>
 8015c3c:	3301      	adds	r3, #1
 8015c3e:	1a1b      	subs	r3, r3, r0
 8015c40:	2b04      	cmp	r3, #4
 8015c42:	dd70      	ble.n	8015d26 <_dtoa_r+0x90a>
 8015c44:	231c      	movs	r3, #28
 8015c46:	1a18      	subs	r0, r3, r0
 8015c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c4a:	1824      	adds	r4, r4, r0
 8015c4c:	181b      	adds	r3, r3, r0
 8015c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c52:	181b      	adds	r3, r3, r0
 8015c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8015c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	dd05      	ble.n	8015c68 <_dtoa_r+0x84c>
 8015c5c:	001a      	movs	r2, r3
 8015c5e:	9903      	ldr	r1, [sp, #12]
 8015c60:	9802      	ldr	r0, [sp, #8]
 8015c62:	f000 ff09 	bl	8016a78 <__lshift>
 8015c66:	9003      	str	r0, [sp, #12]
 8015c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	dd05      	ble.n	8015c7a <_dtoa_r+0x85e>
 8015c6e:	001a      	movs	r2, r3
 8015c70:	9904      	ldr	r1, [sp, #16]
 8015c72:	9802      	ldr	r0, [sp, #8]
 8015c74:	f000 ff00 	bl	8016a78 <__lshift>
 8015c78:	9004      	str	r0, [sp, #16]
 8015c7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d05e      	beq.n	8015d3e <_dtoa_r+0x922>
 8015c80:	9904      	ldr	r1, [sp, #16]
 8015c82:	9803      	ldr	r0, [sp, #12]
 8015c84:	f000 ff4a 	bl	8016b1c <__mcmp>
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	da58      	bge.n	8015d3e <_dtoa_r+0x922>
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	220a      	movs	r2, #10
 8015c90:	9903      	ldr	r1, [sp, #12]
 8015c92:	9802      	ldr	r0, [sp, #8]
 8015c94:	f000 fd40 	bl	8016718 <__multadd>
 8015c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c9a:	3f01      	subs	r7, #1
 8015c9c:	9003      	str	r0, [sp, #12]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d100      	bne.n	8015ca4 <_dtoa_r+0x888>
 8015ca2:	e190      	b.n	8015fc6 <_dtoa_r+0xbaa>
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	0031      	movs	r1, r6
 8015ca8:	220a      	movs	r2, #10
 8015caa:	9802      	ldr	r0, [sp, #8]
 8015cac:	f000 fd34 	bl	8016718 <__multadd>
 8015cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015cb2:	0006      	movs	r6, r0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	dd00      	ble.n	8015cba <_dtoa_r+0x89e>
 8015cb8:	e088      	b.n	8015dcc <_dtoa_r+0x9b0>
 8015cba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015cbc:	2b02      	cmp	r3, #2
 8015cbe:	dc00      	bgt.n	8015cc2 <_dtoa_r+0x8a6>
 8015cc0:	e084      	b.n	8015dcc <_dtoa_r+0x9b0>
 8015cc2:	e044      	b.n	8015d4e <_dtoa_r+0x932>
 8015cc4:	2336      	movs	r3, #54	; 0x36
 8015cc6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015cc8:	1a9b      	subs	r3, r3, r2
 8015cca:	e747      	b.n	8015b5c <_dtoa_r+0x740>
 8015ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cce:	1e5d      	subs	r5, r3, #1
 8015cd0:	9b04      	ldr	r3, [sp, #16]
 8015cd2:	42ab      	cmp	r3, r5
 8015cd4:	db08      	blt.n	8015ce8 <_dtoa_r+0x8cc>
 8015cd6:	1b5d      	subs	r5, r3, r5
 8015cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	da0c      	bge.n	8015cf8 <_dtoa_r+0x8dc>
 8015cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ce2:	1a9c      	subs	r4, r3, r2
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	e73b      	b.n	8015b60 <_dtoa_r+0x744>
 8015ce8:	9b04      	ldr	r3, [sp, #16]
 8015cea:	9504      	str	r5, [sp, #16]
 8015cec:	1aea      	subs	r2, r5, r3
 8015cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cf0:	2500      	movs	r5, #0
 8015cf2:	189b      	adds	r3, r3, r2
 8015cf4:	9311      	str	r3, [sp, #68]	; 0x44
 8015cf6:	e7ef      	b.n	8015cd8 <_dtoa_r+0x8bc>
 8015cf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cfc:	e730      	b.n	8015b60 <_dtoa_r+0x744>
 8015cfe:	9d04      	ldr	r5, [sp, #16]
 8015d00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015d02:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015d04:	e737      	b.n	8015b76 <_dtoa_r+0x75a>
 8015d06:	9a04      	ldr	r2, [sp, #16]
 8015d08:	e764      	b.n	8015bd4 <_dtoa_r+0x7b8>
 8015d0a:	2500      	movs	r5, #0
 8015d0c:	9b04      	ldr	r3, [sp, #16]
 8015d0e:	9a04      	ldr	r2, [sp, #16]
 8015d10:	691b      	ldr	r3, [r3, #16]
 8015d12:	9310      	str	r3, [sp, #64]	; 0x40
 8015d14:	3303      	adds	r3, #3
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	18d3      	adds	r3, r2, r3
 8015d1a:	6858      	ldr	r0, [r3, #4]
 8015d1c:	f000 fd78 	bl	8016810 <__hi0bits>
 8015d20:	2320      	movs	r3, #32
 8015d22:	1a18      	subs	r0, r3, r0
 8015d24:	e785      	b.n	8015c32 <_dtoa_r+0x816>
 8015d26:	2b04      	cmp	r3, #4
 8015d28:	d095      	beq.n	8015c56 <_dtoa_r+0x83a>
 8015d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d2c:	331c      	adds	r3, #28
 8015d2e:	18d2      	adds	r2, r2, r3
 8015d30:	920a      	str	r2, [sp, #40]	; 0x28
 8015d32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d34:	18e4      	adds	r4, r4, r3
 8015d36:	18d3      	adds	r3, r2, r3
 8015d38:	e78c      	b.n	8015c54 <_dtoa_r+0x838>
 8015d3a:	0003      	movs	r3, r0
 8015d3c:	e7f5      	b.n	8015d2a <_dtoa_r+0x90e>
 8015d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	dc3d      	bgt.n	8015dc0 <_dtoa_r+0x9a4>
 8015d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015d46:	2b02      	cmp	r3, #2
 8015d48:	dd3a      	ble.n	8015dc0 <_dtoa_r+0x9a4>
 8015d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8015d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d10c      	bne.n	8015d6e <_dtoa_r+0x952>
 8015d54:	9904      	ldr	r1, [sp, #16]
 8015d56:	2205      	movs	r2, #5
 8015d58:	9802      	ldr	r0, [sp, #8]
 8015d5a:	f000 fcdd 	bl	8016718 <__multadd>
 8015d5e:	9004      	str	r0, [sp, #16]
 8015d60:	0001      	movs	r1, r0
 8015d62:	9803      	ldr	r0, [sp, #12]
 8015d64:	f000 feda 	bl	8016b1c <__mcmp>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	dd00      	ble.n	8015d6e <_dtoa_r+0x952>
 8015d6c:	e5af      	b.n	80158ce <_dtoa_r+0x4b2>
 8015d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d70:	9d08      	ldr	r5, [sp, #32]
 8015d72:	43df      	mvns	r7, r3
 8015d74:	2300      	movs	r3, #0
 8015d76:	9309      	str	r3, [sp, #36]	; 0x24
 8015d78:	9904      	ldr	r1, [sp, #16]
 8015d7a:	9802      	ldr	r0, [sp, #8]
 8015d7c:	f000 fcb3 	bl	80166e6 <_Bfree>
 8015d80:	2e00      	cmp	r6, #0
 8015d82:	d100      	bne.n	8015d86 <_dtoa_r+0x96a>
 8015d84:	e69b      	b.n	8015abe <_dtoa_r+0x6a2>
 8015d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d005      	beq.n	8015d98 <_dtoa_r+0x97c>
 8015d8c:	42b3      	cmp	r3, r6
 8015d8e:	d003      	beq.n	8015d98 <_dtoa_r+0x97c>
 8015d90:	0019      	movs	r1, r3
 8015d92:	9802      	ldr	r0, [sp, #8]
 8015d94:	f000 fca7 	bl	80166e6 <_Bfree>
 8015d98:	0031      	movs	r1, r6
 8015d9a:	9802      	ldr	r0, [sp, #8]
 8015d9c:	f000 fca3 	bl	80166e6 <_Bfree>
 8015da0:	e68d      	b.n	8015abe <_dtoa_r+0x6a2>
 8015da2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015da4:	9304      	str	r3, [sp, #16]
 8015da6:	001e      	movs	r6, r3
 8015da8:	e7e1      	b.n	8015d6e <_dtoa_r+0x952>
 8015daa:	2300      	movs	r3, #0
 8015dac:	e7fa      	b.n	8015da4 <_dtoa_r+0x988>
 8015dae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015db0:	0037      	movs	r7, r6
 8015db2:	9304      	str	r3, [sp, #16]
 8015db4:	001e      	movs	r6, r3
 8015db6:	e58a      	b.n	80158ce <_dtoa_r+0x4b2>
 8015db8:	40240000 	.word	0x40240000
 8015dbc:	00000433 	.word	0x00000433
 8015dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d100      	bne.n	8015dc8 <_dtoa_r+0x9ac>
 8015dc6:	e0b2      	b.n	8015f2e <_dtoa_r+0xb12>
 8015dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dca:	930c      	str	r3, [sp, #48]	; 0x30
 8015dcc:	2c00      	cmp	r4, #0
 8015dce:	dd05      	ble.n	8015ddc <_dtoa_r+0x9c0>
 8015dd0:	0031      	movs	r1, r6
 8015dd2:	0022      	movs	r2, r4
 8015dd4:	9802      	ldr	r0, [sp, #8]
 8015dd6:	f000 fe4f 	bl	8016a78 <__lshift>
 8015dda:	0006      	movs	r6, r0
 8015ddc:	0030      	movs	r0, r6
 8015dde:	2d00      	cmp	r5, #0
 8015de0:	d011      	beq.n	8015e06 <_dtoa_r+0x9ea>
 8015de2:	6871      	ldr	r1, [r6, #4]
 8015de4:	9802      	ldr	r0, [sp, #8]
 8015de6:	f000 fc46 	bl	8016676 <_Balloc>
 8015dea:	0031      	movs	r1, r6
 8015dec:	0004      	movs	r4, r0
 8015dee:	6933      	ldr	r3, [r6, #16]
 8015df0:	310c      	adds	r1, #12
 8015df2:	1c9a      	adds	r2, r3, #2
 8015df4:	0092      	lsls	r2, r2, #2
 8015df6:	300c      	adds	r0, #12
 8015df8:	f7fd fd3f 	bl	801387a <memcpy>
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	0021      	movs	r1, r4
 8015e00:	9802      	ldr	r0, [sp, #8]
 8015e02:	f000 fe39 	bl	8016a78 <__lshift>
 8015e06:	9609      	str	r6, [sp, #36]	; 0x24
 8015e08:	0006      	movs	r6, r0
 8015e0a:	9b08      	ldr	r3, [sp, #32]
 8015e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8015e0e:	9904      	ldr	r1, [sp, #16]
 8015e10:	9803      	ldr	r0, [sp, #12]
 8015e12:	f7ff fa7d 	bl	8015310 <quorem>
 8015e16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015e18:	900d      	str	r0, [sp, #52]	; 0x34
 8015e1a:	0004      	movs	r4, r0
 8015e1c:	9803      	ldr	r0, [sp, #12]
 8015e1e:	f000 fe7d 	bl	8016b1c <__mcmp>
 8015e22:	0032      	movs	r2, r6
 8015e24:	9010      	str	r0, [sp, #64]	; 0x40
 8015e26:	9904      	ldr	r1, [sp, #16]
 8015e28:	9802      	ldr	r0, [sp, #8]
 8015e2a:	f000 fe91 	bl	8016b50 <__mdiff>
 8015e2e:	2301      	movs	r3, #1
 8015e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e32:	68c3      	ldr	r3, [r0, #12]
 8015e34:	3430      	adds	r4, #48	; 0x30
 8015e36:	0005      	movs	r5, r0
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d104      	bne.n	8015e46 <_dtoa_r+0xa2a>
 8015e3c:	0001      	movs	r1, r0
 8015e3e:	9803      	ldr	r0, [sp, #12]
 8015e40:	f000 fe6c 	bl	8016b1c <__mcmp>
 8015e44:	900b      	str	r0, [sp, #44]	; 0x2c
 8015e46:	0029      	movs	r1, r5
 8015e48:	9802      	ldr	r0, [sp, #8]
 8015e4a:	f000 fc4c 	bl	80166e6 <_Bfree>
 8015e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015e52:	4313      	orrs	r3, r2
 8015e54:	d10e      	bne.n	8015e74 <_dtoa_r+0xa58>
 8015e56:	9a06      	ldr	r2, [sp, #24]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	4213      	tst	r3, r2
 8015e5c:	d10a      	bne.n	8015e74 <_dtoa_r+0xa58>
 8015e5e:	2c39      	cmp	r4, #57	; 0x39
 8015e60:	d026      	beq.n	8015eb0 <_dtoa_r+0xa94>
 8015e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	dd01      	ble.n	8015e6c <_dtoa_r+0xa50>
 8015e68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015e6a:	3431      	adds	r4, #49	; 0x31
 8015e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6e:	1c5d      	adds	r5, r3, #1
 8015e70:	701c      	strb	r4, [r3, #0]
 8015e72:	e781      	b.n	8015d78 <_dtoa_r+0x95c>
 8015e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	db07      	blt.n	8015e8a <_dtoa_r+0xa6e>
 8015e7a:	001d      	movs	r5, r3
 8015e7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015e7e:	431d      	orrs	r5, r3
 8015e80:	d122      	bne.n	8015ec8 <_dtoa_r+0xaac>
 8015e82:	2301      	movs	r3, #1
 8015e84:	9a06      	ldr	r2, [sp, #24]
 8015e86:	4213      	tst	r3, r2
 8015e88:	d11e      	bne.n	8015ec8 <_dtoa_r+0xaac>
 8015e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	dded      	ble.n	8015e6c <_dtoa_r+0xa50>
 8015e90:	9903      	ldr	r1, [sp, #12]
 8015e92:	2201      	movs	r2, #1
 8015e94:	9802      	ldr	r0, [sp, #8]
 8015e96:	f000 fdef 	bl	8016a78 <__lshift>
 8015e9a:	9904      	ldr	r1, [sp, #16]
 8015e9c:	9003      	str	r0, [sp, #12]
 8015e9e:	f000 fe3d 	bl	8016b1c <__mcmp>
 8015ea2:	2800      	cmp	r0, #0
 8015ea4:	dc02      	bgt.n	8015eac <_dtoa_r+0xa90>
 8015ea6:	d1e1      	bne.n	8015e6c <_dtoa_r+0xa50>
 8015ea8:	07e3      	lsls	r3, r4, #31
 8015eaa:	d5df      	bpl.n	8015e6c <_dtoa_r+0xa50>
 8015eac:	2c39      	cmp	r4, #57	; 0x39
 8015eae:	d1db      	bne.n	8015e68 <_dtoa_r+0xa4c>
 8015eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015eb4:	1c5d      	adds	r5, r3, #1
 8015eb6:	2339      	movs	r3, #57	; 0x39
 8015eb8:	7013      	strb	r3, [r2, #0]
 8015eba:	1e6b      	subs	r3, r5, #1
 8015ebc:	781a      	ldrb	r2, [r3, #0]
 8015ebe:	2a39      	cmp	r2, #57	; 0x39
 8015ec0:	d067      	beq.n	8015f92 <_dtoa_r+0xb76>
 8015ec2:	3201      	adds	r2, #1
 8015ec4:	701a      	strb	r2, [r3, #0]
 8015ec6:	e757      	b.n	8015d78 <_dtoa_r+0x95c>
 8015ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eca:	1c5d      	adds	r5, r3, #1
 8015ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	dd04      	ble.n	8015edc <_dtoa_r+0xac0>
 8015ed2:	2c39      	cmp	r4, #57	; 0x39
 8015ed4:	d0ec      	beq.n	8015eb0 <_dtoa_r+0xa94>
 8015ed6:	3401      	adds	r4, #1
 8015ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015eda:	e7c9      	b.n	8015e70 <_dtoa_r+0xa54>
 8015edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ee0:	701c      	strb	r4, [r3, #0]
 8015ee2:	9b08      	ldr	r3, [sp, #32]
 8015ee4:	1aeb      	subs	r3, r5, r3
 8015ee6:	4293      	cmp	r3, r2
 8015ee8:	d03e      	beq.n	8015f68 <_dtoa_r+0xb4c>
 8015eea:	2300      	movs	r3, #0
 8015eec:	220a      	movs	r2, #10
 8015eee:	9903      	ldr	r1, [sp, #12]
 8015ef0:	9802      	ldr	r0, [sp, #8]
 8015ef2:	f000 fc11 	bl	8016718 <__multadd>
 8015ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef8:	9003      	str	r0, [sp, #12]
 8015efa:	42b3      	cmp	r3, r6
 8015efc:	d109      	bne.n	8015f12 <_dtoa_r+0xaf6>
 8015efe:	2300      	movs	r3, #0
 8015f00:	220a      	movs	r2, #10
 8015f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f04:	9802      	ldr	r0, [sp, #8]
 8015f06:	f000 fc07 	bl	8016718 <__multadd>
 8015f0a:	9009      	str	r0, [sp, #36]	; 0x24
 8015f0c:	0006      	movs	r6, r0
 8015f0e:	950a      	str	r5, [sp, #40]	; 0x28
 8015f10:	e77d      	b.n	8015e0e <_dtoa_r+0x9f2>
 8015f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f14:	2300      	movs	r3, #0
 8015f16:	220a      	movs	r2, #10
 8015f18:	9802      	ldr	r0, [sp, #8]
 8015f1a:	f000 fbfd 	bl	8016718 <__multadd>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	9009      	str	r0, [sp, #36]	; 0x24
 8015f22:	220a      	movs	r2, #10
 8015f24:	0031      	movs	r1, r6
 8015f26:	9802      	ldr	r0, [sp, #8]
 8015f28:	f000 fbf6 	bl	8016718 <__multadd>
 8015f2c:	e7ee      	b.n	8015f0c <_dtoa_r+0xaf0>
 8015f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f30:	930c      	str	r3, [sp, #48]	; 0x30
 8015f32:	9b08      	ldr	r3, [sp, #32]
 8015f34:	9306      	str	r3, [sp, #24]
 8015f36:	9904      	ldr	r1, [sp, #16]
 8015f38:	9803      	ldr	r0, [sp, #12]
 8015f3a:	f7ff f9e9 	bl	8015310 <quorem>
 8015f3e:	9b06      	ldr	r3, [sp, #24]
 8015f40:	3030      	adds	r0, #48	; 0x30
 8015f42:	1c5d      	adds	r5, r3, #1
 8015f44:	7018      	strb	r0, [r3, #0]
 8015f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f48:	9b08      	ldr	r3, [sp, #32]
 8015f4a:	0004      	movs	r4, r0
 8015f4c:	1aeb      	subs	r3, r5, r3
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	dd08      	ble.n	8015f64 <_dtoa_r+0xb48>
 8015f52:	2300      	movs	r3, #0
 8015f54:	220a      	movs	r2, #10
 8015f56:	9903      	ldr	r1, [sp, #12]
 8015f58:	9802      	ldr	r0, [sp, #8]
 8015f5a:	f000 fbdd 	bl	8016718 <__multadd>
 8015f5e:	9506      	str	r5, [sp, #24]
 8015f60:	9003      	str	r0, [sp, #12]
 8015f62:	e7e8      	b.n	8015f36 <_dtoa_r+0xb1a>
 8015f64:	2300      	movs	r3, #0
 8015f66:	9309      	str	r3, [sp, #36]	; 0x24
 8015f68:	9903      	ldr	r1, [sp, #12]
 8015f6a:	2201      	movs	r2, #1
 8015f6c:	9802      	ldr	r0, [sp, #8]
 8015f6e:	f000 fd83 	bl	8016a78 <__lshift>
 8015f72:	9904      	ldr	r1, [sp, #16]
 8015f74:	9003      	str	r0, [sp, #12]
 8015f76:	f000 fdd1 	bl	8016b1c <__mcmp>
 8015f7a:	2800      	cmp	r0, #0
 8015f7c:	dc9d      	bgt.n	8015eba <_dtoa_r+0xa9e>
 8015f7e:	d101      	bne.n	8015f84 <_dtoa_r+0xb68>
 8015f80:	07e3      	lsls	r3, r4, #31
 8015f82:	d49a      	bmi.n	8015eba <_dtoa_r+0xa9e>
 8015f84:	1e6b      	subs	r3, r5, #1
 8015f86:	781a      	ldrb	r2, [r3, #0]
 8015f88:	2a30      	cmp	r2, #48	; 0x30
 8015f8a:	d000      	beq.n	8015f8e <_dtoa_r+0xb72>
 8015f8c:	e6f4      	b.n	8015d78 <_dtoa_r+0x95c>
 8015f8e:	001d      	movs	r5, r3
 8015f90:	e7f8      	b.n	8015f84 <_dtoa_r+0xb68>
 8015f92:	9a08      	ldr	r2, [sp, #32]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d103      	bne.n	8015fa0 <_dtoa_r+0xb84>
 8015f98:	2331      	movs	r3, #49	; 0x31
 8015f9a:	3701      	adds	r7, #1
 8015f9c:	7013      	strb	r3, [r2, #0]
 8015f9e:	e6eb      	b.n	8015d78 <_dtoa_r+0x95c>
 8015fa0:	001d      	movs	r5, r3
 8015fa2:	e78a      	b.n	8015eba <_dtoa_r+0xa9e>
 8015fa4:	4b0b      	ldr	r3, [pc, #44]	; (8015fd4 <_dtoa_r+0xbb8>)
 8015fa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015fa8:	9308      	str	r3, [sp, #32]
 8015faa:	4b0b      	ldr	r3, [pc, #44]	; (8015fd8 <_dtoa_r+0xbbc>)
 8015fac:	2a00      	cmp	r2, #0
 8015fae:	d001      	beq.n	8015fb4 <_dtoa_r+0xb98>
 8015fb0:	f7ff fa77 	bl	80154a2 <_dtoa_r+0x86>
 8015fb4:	f7ff fa77 	bl	80154a6 <_dtoa_r+0x8a>
 8015fb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015fba:	2b01      	cmp	r3, #1
 8015fbc:	dc00      	bgt.n	8015fc0 <_dtoa_r+0xba4>
 8015fbe:	e621      	b.n	8015c04 <_dtoa_r+0x7e8>
 8015fc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015fc2:	2001      	movs	r0, #1
 8015fc4:	e635      	b.n	8015c32 <_dtoa_r+0x816>
 8015fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	dcb2      	bgt.n	8015f32 <_dtoa_r+0xb16>
 8015fcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015fce:	2b02      	cmp	r3, #2
 8015fd0:	ddaf      	ble.n	8015f32 <_dtoa_r+0xb16>
 8015fd2:	e6bc      	b.n	8015d4e <_dtoa_r+0x932>
 8015fd4:	0801a409 	.word	0x0801a409
 8015fd8:	0801a411 	.word	0x0801a411

08015fdc <rshift>:
 8015fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fde:	0004      	movs	r4, r0
 8015fe0:	6905      	ldr	r5, [r0, #16]
 8015fe2:	3414      	adds	r4, #20
 8015fe4:	114b      	asrs	r3, r1, #5
 8015fe6:	0026      	movs	r6, r4
 8015fe8:	429d      	cmp	r5, r3
 8015fea:	dd14      	ble.n	8016016 <rshift+0x3a>
 8015fec:	221f      	movs	r2, #31
 8015fee:	00ad      	lsls	r5, r5, #2
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	4011      	ands	r1, r2
 8015ff4:	1965      	adds	r5, r4, r5
 8015ff6:	18e3      	adds	r3, r4, r3
 8015ff8:	0022      	movs	r2, r4
 8015ffa:	2900      	cmp	r1, #0
 8015ffc:	d01e      	beq.n	801603c <rshift+0x60>
 8015ffe:	cb04      	ldmia	r3!, {r2}
 8016000:	2720      	movs	r7, #32
 8016002:	40ca      	lsrs	r2, r1
 8016004:	46a4      	mov	ip, r4
 8016006:	1a7f      	subs	r7, r7, r1
 8016008:	4666      	mov	r6, ip
 801600a:	429d      	cmp	r5, r3
 801600c:	d80b      	bhi.n	8016026 <rshift+0x4a>
 801600e:	6032      	str	r2, [r6, #0]
 8016010:	2a00      	cmp	r2, #0
 8016012:	d000      	beq.n	8016016 <rshift+0x3a>
 8016014:	3604      	adds	r6, #4
 8016016:	1b33      	subs	r3, r6, r4
 8016018:	109b      	asrs	r3, r3, #2
 801601a:	6103      	str	r3, [r0, #16]
 801601c:	42a6      	cmp	r6, r4
 801601e:	d101      	bne.n	8016024 <rshift+0x48>
 8016020:	2300      	movs	r3, #0
 8016022:	6143      	str	r3, [r0, #20]
 8016024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016026:	681e      	ldr	r6, [r3, #0]
 8016028:	40be      	lsls	r6, r7
 801602a:	4332      	orrs	r2, r6
 801602c:	4666      	mov	r6, ip
 801602e:	c604      	stmia	r6!, {r2}
 8016030:	cb04      	ldmia	r3!, {r2}
 8016032:	46b4      	mov	ip, r6
 8016034:	40ca      	lsrs	r2, r1
 8016036:	e7e7      	b.n	8016008 <rshift+0x2c>
 8016038:	cb02      	ldmia	r3!, {r1}
 801603a:	c202      	stmia	r2!, {r1}
 801603c:	0016      	movs	r6, r2
 801603e:	429d      	cmp	r5, r3
 8016040:	d8fa      	bhi.n	8016038 <rshift+0x5c>
 8016042:	e7e8      	b.n	8016016 <rshift+0x3a>

08016044 <__hexdig_fun>:
 8016044:	0003      	movs	r3, r0
 8016046:	3b30      	subs	r3, #48	; 0x30
 8016048:	2b09      	cmp	r3, #9
 801604a:	d803      	bhi.n	8016054 <__hexdig_fun+0x10>
 801604c:	3820      	subs	r0, #32
 801604e:	b2c3      	uxtb	r3, r0
 8016050:	0018      	movs	r0, r3
 8016052:	4770      	bx	lr
 8016054:	0003      	movs	r3, r0
 8016056:	3b61      	subs	r3, #97	; 0x61
 8016058:	2b05      	cmp	r3, #5
 801605a:	d801      	bhi.n	8016060 <__hexdig_fun+0x1c>
 801605c:	3847      	subs	r0, #71	; 0x47
 801605e:	e7f6      	b.n	801604e <__hexdig_fun+0xa>
 8016060:	0002      	movs	r2, r0
 8016062:	3a41      	subs	r2, #65	; 0x41
 8016064:	2300      	movs	r3, #0
 8016066:	2a05      	cmp	r2, #5
 8016068:	d8f2      	bhi.n	8016050 <__hexdig_fun+0xc>
 801606a:	3827      	subs	r0, #39	; 0x27
 801606c:	e7ef      	b.n	801604e <__hexdig_fun+0xa>

0801606e <__gethex>:
 801606e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016070:	b08d      	sub	sp, #52	; 0x34
 8016072:	9005      	str	r0, [sp, #20]
 8016074:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016076:	9109      	str	r1, [sp, #36]	; 0x24
 8016078:	9202      	str	r2, [sp, #8]
 801607a:	930a      	str	r3, [sp, #40]	; 0x28
 801607c:	f000 fadf 	bl	801663e <__localeconv_l>
 8016080:	6803      	ldr	r3, [r0, #0]
 8016082:	0018      	movs	r0, r3
 8016084:	9307      	str	r3, [sp, #28]
 8016086:	f7ea f847 	bl	8000118 <strlen>
 801608a:	2202      	movs	r2, #2
 801608c:	9b07      	ldr	r3, [sp, #28]
 801608e:	4252      	negs	r2, r2
 8016090:	181b      	adds	r3, r3, r0
 8016092:	3b01      	subs	r3, #1
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	9004      	str	r0, [sp, #16]
 8016098:	930b      	str	r3, [sp, #44]	; 0x2c
 801609a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801609c:	6819      	ldr	r1, [r3, #0]
 801609e:	1c8b      	adds	r3, r1, #2
 80160a0:	1a52      	subs	r2, r2, r1
 80160a2:	18d1      	adds	r1, r2, r3
 80160a4:	9301      	str	r3, [sp, #4]
 80160a6:	9108      	str	r1, [sp, #32]
 80160a8:	9901      	ldr	r1, [sp, #4]
 80160aa:	3301      	adds	r3, #1
 80160ac:	7808      	ldrb	r0, [r1, #0]
 80160ae:	2830      	cmp	r0, #48	; 0x30
 80160b0:	d0f7      	beq.n	80160a2 <__gethex+0x34>
 80160b2:	f7ff ffc7 	bl	8016044 <__hexdig_fun>
 80160b6:	1e07      	subs	r7, r0, #0
 80160b8:	d000      	beq.n	80160bc <__gethex+0x4e>
 80160ba:	e06f      	b.n	801619c <__gethex+0x12e>
 80160bc:	9a04      	ldr	r2, [sp, #16]
 80160be:	9907      	ldr	r1, [sp, #28]
 80160c0:	9801      	ldr	r0, [sp, #4]
 80160c2:	f7fe f9b5 	bl	8014430 <strncmp>
 80160c6:	2800      	cmp	r0, #0
 80160c8:	d000      	beq.n	80160cc <__gethex+0x5e>
 80160ca:	e06d      	b.n	80161a8 <__gethex+0x13a>
 80160cc:	9b01      	ldr	r3, [sp, #4]
 80160ce:	9a04      	ldr	r2, [sp, #16]
 80160d0:	189c      	adds	r4, r3, r2
 80160d2:	7820      	ldrb	r0, [r4, #0]
 80160d4:	f7ff ffb6 	bl	8016044 <__hexdig_fun>
 80160d8:	2800      	cmp	r0, #0
 80160da:	d069      	beq.n	80161b0 <__gethex+0x142>
 80160dc:	9401      	str	r4, [sp, #4]
 80160de:	9b01      	ldr	r3, [sp, #4]
 80160e0:	7818      	ldrb	r0, [r3, #0]
 80160e2:	2830      	cmp	r0, #48	; 0x30
 80160e4:	d009      	beq.n	80160fa <__gethex+0x8c>
 80160e6:	f7ff ffad 	bl	8016044 <__hexdig_fun>
 80160ea:	4243      	negs	r3, r0
 80160ec:	4143      	adcs	r3, r0
 80160ee:	9303      	str	r3, [sp, #12]
 80160f0:	2301      	movs	r3, #1
 80160f2:	0026      	movs	r6, r4
 80160f4:	9308      	str	r3, [sp, #32]
 80160f6:	9c01      	ldr	r4, [sp, #4]
 80160f8:	e004      	b.n	8016104 <__gethex+0x96>
 80160fa:	9b01      	ldr	r3, [sp, #4]
 80160fc:	3301      	adds	r3, #1
 80160fe:	9301      	str	r3, [sp, #4]
 8016100:	e7ed      	b.n	80160de <__gethex+0x70>
 8016102:	3401      	adds	r4, #1
 8016104:	7820      	ldrb	r0, [r4, #0]
 8016106:	f7ff ff9d 	bl	8016044 <__hexdig_fun>
 801610a:	2800      	cmp	r0, #0
 801610c:	d1f9      	bne.n	8016102 <__gethex+0x94>
 801610e:	9a04      	ldr	r2, [sp, #16]
 8016110:	9907      	ldr	r1, [sp, #28]
 8016112:	0020      	movs	r0, r4
 8016114:	f7fe f98c 	bl	8014430 <strncmp>
 8016118:	2800      	cmp	r0, #0
 801611a:	d109      	bne.n	8016130 <__gethex+0xc2>
 801611c:	2e00      	cmp	r6, #0
 801611e:	d10a      	bne.n	8016136 <__gethex+0xc8>
 8016120:	9b04      	ldr	r3, [sp, #16]
 8016122:	18e4      	adds	r4, r4, r3
 8016124:	0026      	movs	r6, r4
 8016126:	7820      	ldrb	r0, [r4, #0]
 8016128:	f7ff ff8c 	bl	8016044 <__hexdig_fun>
 801612c:	2800      	cmp	r0, #0
 801612e:	d139      	bne.n	80161a4 <__gethex+0x136>
 8016130:	2700      	movs	r7, #0
 8016132:	42be      	cmp	r6, r7
 8016134:	d001      	beq.n	801613a <__gethex+0xcc>
 8016136:	1b37      	subs	r7, r6, r4
 8016138:	00bf      	lsls	r7, r7, #2
 801613a:	7823      	ldrb	r3, [r4, #0]
 801613c:	2b50      	cmp	r3, #80	; 0x50
 801613e:	d001      	beq.n	8016144 <__gethex+0xd6>
 8016140:	2b70      	cmp	r3, #112	; 0x70
 8016142:	d142      	bne.n	80161ca <__gethex+0x15c>
 8016144:	7863      	ldrb	r3, [r4, #1]
 8016146:	2b2b      	cmp	r3, #43	; 0x2b
 8016148:	d034      	beq.n	80161b4 <__gethex+0x146>
 801614a:	2b2d      	cmp	r3, #45	; 0x2d
 801614c:	d036      	beq.n	80161bc <__gethex+0x14e>
 801614e:	2300      	movs	r3, #0
 8016150:	1c66      	adds	r6, r4, #1
 8016152:	9306      	str	r3, [sp, #24]
 8016154:	7830      	ldrb	r0, [r6, #0]
 8016156:	f7ff ff75 	bl	8016044 <__hexdig_fun>
 801615a:	1e43      	subs	r3, r0, #1
 801615c:	b2db      	uxtb	r3, r3
 801615e:	2b18      	cmp	r3, #24
 8016160:	d833      	bhi.n	80161ca <__gethex+0x15c>
 8016162:	3810      	subs	r0, #16
 8016164:	0005      	movs	r5, r0
 8016166:	3601      	adds	r6, #1
 8016168:	7830      	ldrb	r0, [r6, #0]
 801616a:	f7ff ff6b 	bl	8016044 <__hexdig_fun>
 801616e:	1e43      	subs	r3, r0, #1
 8016170:	b2db      	uxtb	r3, r3
 8016172:	2b18      	cmp	r3, #24
 8016174:	d924      	bls.n	80161c0 <__gethex+0x152>
 8016176:	9b06      	ldr	r3, [sp, #24]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d000      	beq.n	801617e <__gethex+0x110>
 801617c:	426d      	negs	r5, r5
 801617e:	197f      	adds	r7, r7, r5
 8016180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016182:	601e      	str	r6, [r3, #0]
 8016184:	9b03      	ldr	r3, [sp, #12]
 8016186:	2b00      	cmp	r3, #0
 8016188:	d021      	beq.n	80161ce <__gethex+0x160>
 801618a:	9b08      	ldr	r3, [sp, #32]
 801618c:	2606      	movs	r6, #6
 801618e:	425a      	negs	r2, r3
 8016190:	4153      	adcs	r3, r2
 8016192:	425b      	negs	r3, r3
 8016194:	401e      	ands	r6, r3
 8016196:	0030      	movs	r0, r6
 8016198:	b00d      	add	sp, #52	; 0x34
 801619a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801619c:	2300      	movs	r3, #0
 801619e:	9303      	str	r3, [sp, #12]
 80161a0:	001e      	movs	r6, r3
 80161a2:	e7a8      	b.n	80160f6 <__gethex+0x88>
 80161a4:	3401      	adds	r4, #1
 80161a6:	e7be      	b.n	8016126 <__gethex+0xb8>
 80161a8:	9c01      	ldr	r4, [sp, #4]
 80161aa:	2301      	movs	r3, #1
 80161ac:	9303      	str	r3, [sp, #12]
 80161ae:	e7c4      	b.n	801613a <__gethex+0xcc>
 80161b0:	0007      	movs	r7, r0
 80161b2:	e7fa      	b.n	80161aa <__gethex+0x13c>
 80161b4:	2300      	movs	r3, #0
 80161b6:	9306      	str	r3, [sp, #24]
 80161b8:	1ca6      	adds	r6, r4, #2
 80161ba:	e7cb      	b.n	8016154 <__gethex+0xe6>
 80161bc:	2301      	movs	r3, #1
 80161be:	e7fa      	b.n	80161b6 <__gethex+0x148>
 80161c0:	230a      	movs	r3, #10
 80161c2:	435d      	muls	r5, r3
 80161c4:	182d      	adds	r5, r5, r0
 80161c6:	3d10      	subs	r5, #16
 80161c8:	e7cd      	b.n	8016166 <__gethex+0xf8>
 80161ca:	0026      	movs	r6, r4
 80161cc:	e7d8      	b.n	8016180 <__gethex+0x112>
 80161ce:	9b01      	ldr	r3, [sp, #4]
 80161d0:	9903      	ldr	r1, [sp, #12]
 80161d2:	1ae3      	subs	r3, r4, r3
 80161d4:	3b01      	subs	r3, #1
 80161d6:	2b07      	cmp	r3, #7
 80161d8:	dc47      	bgt.n	801626a <__gethex+0x1fc>
 80161da:	9805      	ldr	r0, [sp, #20]
 80161dc:	f000 fa4b 	bl	8016676 <_Balloc>
 80161e0:	0003      	movs	r3, r0
 80161e2:	3314      	adds	r3, #20
 80161e4:	9303      	str	r3, [sp, #12]
 80161e6:	9308      	str	r3, [sp, #32]
 80161e8:	2300      	movs	r3, #0
 80161ea:	0005      	movs	r5, r0
 80161ec:	001e      	movs	r6, r3
 80161ee:	9306      	str	r3, [sp, #24]
 80161f0:	9b01      	ldr	r3, [sp, #4]
 80161f2:	42a3      	cmp	r3, r4
 80161f4:	d33c      	bcc.n	8016270 <__gethex+0x202>
 80161f6:	9c08      	ldr	r4, [sp, #32]
 80161f8:	9b03      	ldr	r3, [sp, #12]
 80161fa:	c440      	stmia	r4!, {r6}
 80161fc:	1ae4      	subs	r4, r4, r3
 80161fe:	10a4      	asrs	r4, r4, #2
 8016200:	612c      	str	r4, [r5, #16]
 8016202:	0030      	movs	r0, r6
 8016204:	f000 fb04 	bl	8016810 <__hi0bits>
 8016208:	9b02      	ldr	r3, [sp, #8]
 801620a:	0164      	lsls	r4, r4, #5
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	1a26      	subs	r6, r4, r0
 8016210:	9301      	str	r3, [sp, #4]
 8016212:	429e      	cmp	r6, r3
 8016214:	dd5f      	ble.n	80162d6 <__gethex+0x268>
 8016216:	1af6      	subs	r6, r6, r3
 8016218:	0031      	movs	r1, r6
 801621a:	0028      	movs	r0, r5
 801621c:	f000 fdff 	bl	8016e1e <__any_on>
 8016220:	1e04      	subs	r4, r0, #0
 8016222:	d00f      	beq.n	8016244 <__gethex+0x1d6>
 8016224:	2401      	movs	r4, #1
 8016226:	211f      	movs	r1, #31
 8016228:	0020      	movs	r0, r4
 801622a:	1e73      	subs	r3, r6, #1
 801622c:	4019      	ands	r1, r3
 801622e:	4088      	lsls	r0, r1
 8016230:	0001      	movs	r1, r0
 8016232:	115a      	asrs	r2, r3, #5
 8016234:	9803      	ldr	r0, [sp, #12]
 8016236:	0092      	lsls	r2, r2, #2
 8016238:	5812      	ldr	r2, [r2, r0]
 801623a:	420a      	tst	r2, r1
 801623c:	d002      	beq.n	8016244 <__gethex+0x1d6>
 801623e:	42a3      	cmp	r3, r4
 8016240:	dc41      	bgt.n	80162c6 <__gethex+0x258>
 8016242:	2402      	movs	r4, #2
 8016244:	0031      	movs	r1, r6
 8016246:	0028      	movs	r0, r5
 8016248:	f7ff fec8 	bl	8015fdc <rshift>
 801624c:	19bf      	adds	r7, r7, r6
 801624e:	9b02      	ldr	r3, [sp, #8]
 8016250:	689b      	ldr	r3, [r3, #8]
 8016252:	9304      	str	r3, [sp, #16]
 8016254:	42bb      	cmp	r3, r7
 8016256:	da4e      	bge.n	80162f6 <__gethex+0x288>
 8016258:	0029      	movs	r1, r5
 801625a:	9805      	ldr	r0, [sp, #20]
 801625c:	f000 fa43 	bl	80166e6 <_Bfree>
 8016260:	2300      	movs	r3, #0
 8016262:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016264:	26a3      	movs	r6, #163	; 0xa3
 8016266:	6013      	str	r3, [r2, #0]
 8016268:	e795      	b.n	8016196 <__gethex+0x128>
 801626a:	3101      	adds	r1, #1
 801626c:	105b      	asrs	r3, r3, #1
 801626e:	e7b2      	b.n	80161d6 <__gethex+0x168>
 8016270:	1e63      	subs	r3, r4, #1
 8016272:	9309      	str	r3, [sp, #36]	; 0x24
 8016274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016276:	781b      	ldrb	r3, [r3, #0]
 8016278:	4293      	cmp	r3, r2
 801627a:	d015      	beq.n	80162a8 <__gethex+0x23a>
 801627c:	9b06      	ldr	r3, [sp, #24]
 801627e:	2b20      	cmp	r3, #32
 8016280:	d105      	bne.n	801628e <__gethex+0x220>
 8016282:	9b08      	ldr	r3, [sp, #32]
 8016284:	601e      	str	r6, [r3, #0]
 8016286:	2600      	movs	r6, #0
 8016288:	3304      	adds	r3, #4
 801628a:	9308      	str	r3, [sp, #32]
 801628c:	9606      	str	r6, [sp, #24]
 801628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016290:	7818      	ldrb	r0, [r3, #0]
 8016292:	f7ff fed7 	bl	8016044 <__hexdig_fun>
 8016296:	230f      	movs	r3, #15
 8016298:	4018      	ands	r0, r3
 801629a:	9b06      	ldr	r3, [sp, #24]
 801629c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801629e:	4098      	lsls	r0, r3
 80162a0:	3304      	adds	r3, #4
 80162a2:	4306      	orrs	r6, r0
 80162a4:	9306      	str	r3, [sp, #24]
 80162a6:	e7a3      	b.n	80161f0 <__gethex+0x182>
 80162a8:	2301      	movs	r3, #1
 80162aa:	9a04      	ldr	r2, [sp, #16]
 80162ac:	1a9c      	subs	r4, r3, r2
 80162ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162b0:	191c      	adds	r4, r3, r4
 80162b2:	9b01      	ldr	r3, [sp, #4]
 80162b4:	429c      	cmp	r4, r3
 80162b6:	d3e1      	bcc.n	801627c <__gethex+0x20e>
 80162b8:	9907      	ldr	r1, [sp, #28]
 80162ba:	0020      	movs	r0, r4
 80162bc:	f7fe f8b8 	bl	8014430 <strncmp>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d1db      	bne.n	801627c <__gethex+0x20e>
 80162c4:	e794      	b.n	80161f0 <__gethex+0x182>
 80162c6:	1eb1      	subs	r1, r6, #2
 80162c8:	0028      	movs	r0, r5
 80162ca:	f000 fda8 	bl	8016e1e <__any_on>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	d0b7      	beq.n	8016242 <__gethex+0x1d4>
 80162d2:	2403      	movs	r4, #3
 80162d4:	e7b6      	b.n	8016244 <__gethex+0x1d6>
 80162d6:	9b01      	ldr	r3, [sp, #4]
 80162d8:	2400      	movs	r4, #0
 80162da:	429e      	cmp	r6, r3
 80162dc:	dab7      	bge.n	801624e <__gethex+0x1e0>
 80162de:	1b9e      	subs	r6, r3, r6
 80162e0:	0029      	movs	r1, r5
 80162e2:	0032      	movs	r2, r6
 80162e4:	9805      	ldr	r0, [sp, #20]
 80162e6:	f000 fbc7 	bl	8016a78 <__lshift>
 80162ea:	0003      	movs	r3, r0
 80162ec:	3314      	adds	r3, #20
 80162ee:	0005      	movs	r5, r0
 80162f0:	1bbf      	subs	r7, r7, r6
 80162f2:	9303      	str	r3, [sp, #12]
 80162f4:	e7ab      	b.n	801624e <__gethex+0x1e0>
 80162f6:	9b02      	ldr	r3, [sp, #8]
 80162f8:	685e      	ldr	r6, [r3, #4]
 80162fa:	42be      	cmp	r6, r7
 80162fc:	dd6b      	ble.n	80163d6 <__gethex+0x368>
 80162fe:	9b01      	ldr	r3, [sp, #4]
 8016300:	1bf6      	subs	r6, r6, r7
 8016302:	42b3      	cmp	r3, r6
 8016304:	dc32      	bgt.n	801636c <__gethex+0x2fe>
 8016306:	9b02      	ldr	r3, [sp, #8]
 8016308:	68db      	ldr	r3, [r3, #12]
 801630a:	2b02      	cmp	r3, #2
 801630c:	d026      	beq.n	801635c <__gethex+0x2ee>
 801630e:	2b03      	cmp	r3, #3
 8016310:	d028      	beq.n	8016364 <__gethex+0x2f6>
 8016312:	2b01      	cmp	r3, #1
 8016314:	d119      	bne.n	801634a <__gethex+0x2dc>
 8016316:	9b01      	ldr	r3, [sp, #4]
 8016318:	42b3      	cmp	r3, r6
 801631a:	d116      	bne.n	801634a <__gethex+0x2dc>
 801631c:	2b01      	cmp	r3, #1
 801631e:	dc0d      	bgt.n	801633c <__gethex+0x2ce>
 8016320:	9b02      	ldr	r3, [sp, #8]
 8016322:	2662      	movs	r6, #98	; 0x62
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	9301      	str	r3, [sp, #4]
 8016328:	9a01      	ldr	r2, [sp, #4]
 801632a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	2301      	movs	r3, #1
 8016330:	9a03      	ldr	r2, [sp, #12]
 8016332:	612b      	str	r3, [r5, #16]
 8016334:	6013      	str	r3, [r2, #0]
 8016336:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016338:	601d      	str	r5, [r3, #0]
 801633a:	e72c      	b.n	8016196 <__gethex+0x128>
 801633c:	9901      	ldr	r1, [sp, #4]
 801633e:	0028      	movs	r0, r5
 8016340:	3901      	subs	r1, #1
 8016342:	f000 fd6c 	bl	8016e1e <__any_on>
 8016346:	2800      	cmp	r0, #0
 8016348:	d1ea      	bne.n	8016320 <__gethex+0x2b2>
 801634a:	0029      	movs	r1, r5
 801634c:	9805      	ldr	r0, [sp, #20]
 801634e:	f000 f9ca 	bl	80166e6 <_Bfree>
 8016352:	2300      	movs	r3, #0
 8016354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016356:	2650      	movs	r6, #80	; 0x50
 8016358:	6013      	str	r3, [r2, #0]
 801635a:	e71c      	b.n	8016196 <__gethex+0x128>
 801635c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801635e:	2b00      	cmp	r3, #0
 8016360:	d0de      	beq.n	8016320 <__gethex+0x2b2>
 8016362:	e7f2      	b.n	801634a <__gethex+0x2dc>
 8016364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016366:	2b00      	cmp	r3, #0
 8016368:	d1da      	bne.n	8016320 <__gethex+0x2b2>
 801636a:	e7ee      	b.n	801634a <__gethex+0x2dc>
 801636c:	1e77      	subs	r7, r6, #1
 801636e:	2c00      	cmp	r4, #0
 8016370:	d12f      	bne.n	80163d2 <__gethex+0x364>
 8016372:	2f00      	cmp	r7, #0
 8016374:	d004      	beq.n	8016380 <__gethex+0x312>
 8016376:	0039      	movs	r1, r7
 8016378:	0028      	movs	r0, r5
 801637a:	f000 fd50 	bl	8016e1e <__any_on>
 801637e:	0004      	movs	r4, r0
 8016380:	231f      	movs	r3, #31
 8016382:	117a      	asrs	r2, r7, #5
 8016384:	401f      	ands	r7, r3
 8016386:	3b1e      	subs	r3, #30
 8016388:	40bb      	lsls	r3, r7
 801638a:	9903      	ldr	r1, [sp, #12]
 801638c:	0092      	lsls	r2, r2, #2
 801638e:	5852      	ldr	r2, [r2, r1]
 8016390:	421a      	tst	r2, r3
 8016392:	d001      	beq.n	8016398 <__gethex+0x32a>
 8016394:	2302      	movs	r3, #2
 8016396:	431c      	orrs	r4, r3
 8016398:	9b01      	ldr	r3, [sp, #4]
 801639a:	0031      	movs	r1, r6
 801639c:	1b9b      	subs	r3, r3, r6
 801639e:	2602      	movs	r6, #2
 80163a0:	0028      	movs	r0, r5
 80163a2:	9301      	str	r3, [sp, #4]
 80163a4:	f7ff fe1a 	bl	8015fdc <rshift>
 80163a8:	9b02      	ldr	r3, [sp, #8]
 80163aa:	685f      	ldr	r7, [r3, #4]
 80163ac:	2c00      	cmp	r4, #0
 80163ae:	d040      	beq.n	8016432 <__gethex+0x3c4>
 80163b0:	9b02      	ldr	r3, [sp, #8]
 80163b2:	68db      	ldr	r3, [r3, #12]
 80163b4:	2b02      	cmp	r3, #2
 80163b6:	d010      	beq.n	80163da <__gethex+0x36c>
 80163b8:	2b03      	cmp	r3, #3
 80163ba:	d012      	beq.n	80163e2 <__gethex+0x374>
 80163bc:	2b01      	cmp	r3, #1
 80163be:	d106      	bne.n	80163ce <__gethex+0x360>
 80163c0:	07a2      	lsls	r2, r4, #30
 80163c2:	d504      	bpl.n	80163ce <__gethex+0x360>
 80163c4:	9a03      	ldr	r2, [sp, #12]
 80163c6:	6812      	ldr	r2, [r2, #0]
 80163c8:	4314      	orrs	r4, r2
 80163ca:	421c      	tst	r4, r3
 80163cc:	d10c      	bne.n	80163e8 <__gethex+0x37a>
 80163ce:	2310      	movs	r3, #16
 80163d0:	e02e      	b.n	8016430 <__gethex+0x3c2>
 80163d2:	2401      	movs	r4, #1
 80163d4:	e7d4      	b.n	8016380 <__gethex+0x312>
 80163d6:	2601      	movs	r6, #1
 80163d8:	e7e8      	b.n	80163ac <__gethex+0x33e>
 80163da:	2301      	movs	r3, #1
 80163dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80163de:	1a9b      	subs	r3, r3, r2
 80163e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80163e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d0f2      	beq.n	80163ce <__gethex+0x360>
 80163e8:	692c      	ldr	r4, [r5, #16]
 80163ea:	00a3      	lsls	r3, r4, #2
 80163ec:	9304      	str	r3, [sp, #16]
 80163ee:	002b      	movs	r3, r5
 80163f0:	00a2      	lsls	r2, r4, #2
 80163f2:	3314      	adds	r3, #20
 80163f4:	1899      	adds	r1, r3, r2
 80163f6:	2200      	movs	r2, #0
 80163f8:	4694      	mov	ip, r2
 80163fa:	681a      	ldr	r2, [r3, #0]
 80163fc:	1c50      	adds	r0, r2, #1
 80163fe:	d01d      	beq.n	801643c <__gethex+0x3ce>
 8016400:	3201      	adds	r2, #1
 8016402:	601a      	str	r2, [r3, #0]
 8016404:	002b      	movs	r3, r5
 8016406:	3314      	adds	r3, #20
 8016408:	2e02      	cmp	r6, #2
 801640a:	d13a      	bne.n	8016482 <__gethex+0x414>
 801640c:	9a02      	ldr	r2, [sp, #8]
 801640e:	9901      	ldr	r1, [sp, #4]
 8016410:	6812      	ldr	r2, [r2, #0]
 8016412:	3a01      	subs	r2, #1
 8016414:	428a      	cmp	r2, r1
 8016416:	d10a      	bne.n	801642e <__gethex+0x3c0>
 8016418:	114a      	asrs	r2, r1, #5
 801641a:	211f      	movs	r1, #31
 801641c:	9801      	ldr	r0, [sp, #4]
 801641e:	0092      	lsls	r2, r2, #2
 8016420:	4001      	ands	r1, r0
 8016422:	2001      	movs	r0, #1
 8016424:	0004      	movs	r4, r0
 8016426:	408c      	lsls	r4, r1
 8016428:	58d3      	ldr	r3, [r2, r3]
 801642a:	4223      	tst	r3, r4
 801642c:	d148      	bne.n	80164c0 <__gethex+0x452>
 801642e:	2320      	movs	r3, #32
 8016430:	431e      	orrs	r6, r3
 8016432:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016434:	601d      	str	r5, [r3, #0]
 8016436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016438:	601f      	str	r7, [r3, #0]
 801643a:	e6ac      	b.n	8016196 <__gethex+0x128>
 801643c:	4662      	mov	r2, ip
 801643e:	c304      	stmia	r3!, {r2}
 8016440:	4299      	cmp	r1, r3
 8016442:	d8da      	bhi.n	80163fa <__gethex+0x38c>
 8016444:	68ab      	ldr	r3, [r5, #8]
 8016446:	429c      	cmp	r4, r3
 8016448:	db12      	blt.n	8016470 <__gethex+0x402>
 801644a:	686b      	ldr	r3, [r5, #4]
 801644c:	9805      	ldr	r0, [sp, #20]
 801644e:	1c59      	adds	r1, r3, #1
 8016450:	f000 f911 	bl	8016676 <_Balloc>
 8016454:	0029      	movs	r1, r5
 8016456:	692b      	ldr	r3, [r5, #16]
 8016458:	9003      	str	r0, [sp, #12]
 801645a:	1c9a      	adds	r2, r3, #2
 801645c:	0092      	lsls	r2, r2, #2
 801645e:	310c      	adds	r1, #12
 8016460:	300c      	adds	r0, #12
 8016462:	f7fd fa0a 	bl	801387a <memcpy>
 8016466:	0029      	movs	r1, r5
 8016468:	9805      	ldr	r0, [sp, #20]
 801646a:	f000 f93c 	bl	80166e6 <_Bfree>
 801646e:	9d03      	ldr	r5, [sp, #12]
 8016470:	692b      	ldr	r3, [r5, #16]
 8016472:	1c5a      	adds	r2, r3, #1
 8016474:	612a      	str	r2, [r5, #16]
 8016476:	2201      	movs	r2, #1
 8016478:	3304      	adds	r3, #4
 801647a:	009b      	lsls	r3, r3, #2
 801647c:	18eb      	adds	r3, r5, r3
 801647e:	605a      	str	r2, [r3, #4]
 8016480:	e7c0      	b.n	8016404 <__gethex+0x396>
 8016482:	692a      	ldr	r2, [r5, #16]
 8016484:	42a2      	cmp	r2, r4
 8016486:	dd0a      	ble.n	801649e <__gethex+0x430>
 8016488:	2101      	movs	r1, #1
 801648a:	0028      	movs	r0, r5
 801648c:	f7ff fda6 	bl	8015fdc <rshift>
 8016490:	9b02      	ldr	r3, [sp, #8]
 8016492:	3701      	adds	r7, #1
 8016494:	689b      	ldr	r3, [r3, #8]
 8016496:	2601      	movs	r6, #1
 8016498:	42bb      	cmp	r3, r7
 801649a:	dac8      	bge.n	801642e <__gethex+0x3c0>
 801649c:	e6dc      	b.n	8016258 <__gethex+0x1ea>
 801649e:	241f      	movs	r4, #31
 80164a0:	9a01      	ldr	r2, [sp, #4]
 80164a2:	2601      	movs	r6, #1
 80164a4:	4022      	ands	r2, r4
 80164a6:	1e14      	subs	r4, r2, #0
 80164a8:	d0c1      	beq.n	801642e <__gethex+0x3c0>
 80164aa:	9a04      	ldr	r2, [sp, #16]
 80164ac:	189b      	adds	r3, r3, r2
 80164ae:	3b04      	subs	r3, #4
 80164b0:	6818      	ldr	r0, [r3, #0]
 80164b2:	f000 f9ad 	bl	8016810 <__hi0bits>
 80164b6:	2120      	movs	r1, #32
 80164b8:	1b0c      	subs	r4, r1, r4
 80164ba:	42a0      	cmp	r0, r4
 80164bc:	dbe4      	blt.n	8016488 <__gethex+0x41a>
 80164be:	e7b6      	b.n	801642e <__gethex+0x3c0>
 80164c0:	0006      	movs	r6, r0
 80164c2:	e7b4      	b.n	801642e <__gethex+0x3c0>

080164c4 <L_shift>:
 80164c4:	2308      	movs	r3, #8
 80164c6:	b570      	push	{r4, r5, r6, lr}
 80164c8:	2520      	movs	r5, #32
 80164ca:	1a9a      	subs	r2, r3, r2
 80164cc:	0092      	lsls	r2, r2, #2
 80164ce:	1aad      	subs	r5, r5, r2
 80164d0:	6843      	ldr	r3, [r0, #4]
 80164d2:	6806      	ldr	r6, [r0, #0]
 80164d4:	001c      	movs	r4, r3
 80164d6:	40ac      	lsls	r4, r5
 80164d8:	40d3      	lsrs	r3, r2
 80164da:	4334      	orrs	r4, r6
 80164dc:	6004      	str	r4, [r0, #0]
 80164de:	6043      	str	r3, [r0, #4]
 80164e0:	3004      	adds	r0, #4
 80164e2:	4288      	cmp	r0, r1
 80164e4:	d3f4      	bcc.n	80164d0 <L_shift+0xc>
 80164e6:	bd70      	pop	{r4, r5, r6, pc}

080164e8 <__match>:
 80164e8:	b530      	push	{r4, r5, lr}
 80164ea:	6803      	ldr	r3, [r0, #0]
 80164ec:	780c      	ldrb	r4, [r1, #0]
 80164ee:	3301      	adds	r3, #1
 80164f0:	2c00      	cmp	r4, #0
 80164f2:	d102      	bne.n	80164fa <__match+0x12>
 80164f4:	6003      	str	r3, [r0, #0]
 80164f6:	2001      	movs	r0, #1
 80164f8:	bd30      	pop	{r4, r5, pc}
 80164fa:	781a      	ldrb	r2, [r3, #0]
 80164fc:	0015      	movs	r5, r2
 80164fe:	3d41      	subs	r5, #65	; 0x41
 8016500:	2d19      	cmp	r5, #25
 8016502:	d800      	bhi.n	8016506 <__match+0x1e>
 8016504:	3220      	adds	r2, #32
 8016506:	3101      	adds	r1, #1
 8016508:	42a2      	cmp	r2, r4
 801650a:	d0ef      	beq.n	80164ec <__match+0x4>
 801650c:	2000      	movs	r0, #0
 801650e:	e7f3      	b.n	80164f8 <__match+0x10>

08016510 <__hexnan>:
 8016510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016512:	b08b      	sub	sp, #44	; 0x2c
 8016514:	9201      	str	r2, [sp, #4]
 8016516:	680a      	ldr	r2, [r1, #0]
 8016518:	9901      	ldr	r1, [sp, #4]
 801651a:	1153      	asrs	r3, r2, #5
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	18cb      	adds	r3, r1, r3
 8016520:	9304      	str	r3, [sp, #16]
 8016522:	231f      	movs	r3, #31
 8016524:	401a      	ands	r2, r3
 8016526:	9008      	str	r0, [sp, #32]
 8016528:	9206      	str	r2, [sp, #24]
 801652a:	d002      	beq.n	8016532 <__hexnan+0x22>
 801652c:	9b04      	ldr	r3, [sp, #16]
 801652e:	3304      	adds	r3, #4
 8016530:	9304      	str	r3, [sp, #16]
 8016532:	9b04      	ldr	r3, [sp, #16]
 8016534:	2500      	movs	r5, #0
 8016536:	1f1e      	subs	r6, r3, #4
 8016538:	0037      	movs	r7, r6
 801653a:	0034      	movs	r4, r6
 801653c:	9b08      	ldr	r3, [sp, #32]
 801653e:	6035      	str	r5, [r6, #0]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	9507      	str	r5, [sp, #28]
 8016544:	9305      	str	r3, [sp, #20]
 8016546:	9502      	str	r5, [sp, #8]
 8016548:	9b05      	ldr	r3, [sp, #20]
 801654a:	3301      	adds	r3, #1
 801654c:	9309      	str	r3, [sp, #36]	; 0x24
 801654e:	9b05      	ldr	r3, [sp, #20]
 8016550:	785b      	ldrb	r3, [r3, #1]
 8016552:	9303      	str	r3, [sp, #12]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d028      	beq.n	80165aa <__hexnan+0x9a>
 8016558:	9803      	ldr	r0, [sp, #12]
 801655a:	f7ff fd73 	bl	8016044 <__hexdig_fun>
 801655e:	2800      	cmp	r0, #0
 8016560:	d145      	bne.n	80165ee <__hexnan+0xde>
 8016562:	9b03      	ldr	r3, [sp, #12]
 8016564:	2b20      	cmp	r3, #32
 8016566:	d819      	bhi.n	801659c <__hexnan+0x8c>
 8016568:	9b02      	ldr	r3, [sp, #8]
 801656a:	9a07      	ldr	r2, [sp, #28]
 801656c:	4293      	cmp	r3, r2
 801656e:	dd12      	ble.n	8016596 <__hexnan+0x86>
 8016570:	42bc      	cmp	r4, r7
 8016572:	d206      	bcs.n	8016582 <__hexnan+0x72>
 8016574:	2d07      	cmp	r5, #7
 8016576:	dc04      	bgt.n	8016582 <__hexnan+0x72>
 8016578:	002a      	movs	r2, r5
 801657a:	0039      	movs	r1, r7
 801657c:	0020      	movs	r0, r4
 801657e:	f7ff ffa1 	bl	80164c4 <L_shift>
 8016582:	9b01      	ldr	r3, [sp, #4]
 8016584:	2508      	movs	r5, #8
 8016586:	429c      	cmp	r4, r3
 8016588:	d905      	bls.n	8016596 <__hexnan+0x86>
 801658a:	1f27      	subs	r7, r4, #4
 801658c:	2500      	movs	r5, #0
 801658e:	003c      	movs	r4, r7
 8016590:	9b02      	ldr	r3, [sp, #8]
 8016592:	603d      	str	r5, [r7, #0]
 8016594:	9307      	str	r3, [sp, #28]
 8016596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016598:	9305      	str	r3, [sp, #20]
 801659a:	e7d5      	b.n	8016548 <__hexnan+0x38>
 801659c:	9b03      	ldr	r3, [sp, #12]
 801659e:	2b29      	cmp	r3, #41	; 0x29
 80165a0:	d14a      	bne.n	8016638 <__hexnan+0x128>
 80165a2:	9b05      	ldr	r3, [sp, #20]
 80165a4:	9a08      	ldr	r2, [sp, #32]
 80165a6:	3302      	adds	r3, #2
 80165a8:	6013      	str	r3, [r2, #0]
 80165aa:	9b02      	ldr	r3, [sp, #8]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d043      	beq.n	8016638 <__hexnan+0x128>
 80165b0:	42bc      	cmp	r4, r7
 80165b2:	d206      	bcs.n	80165c2 <__hexnan+0xb2>
 80165b4:	2d07      	cmp	r5, #7
 80165b6:	dc04      	bgt.n	80165c2 <__hexnan+0xb2>
 80165b8:	002a      	movs	r2, r5
 80165ba:	0039      	movs	r1, r7
 80165bc:	0020      	movs	r0, r4
 80165be:	f7ff ff81 	bl	80164c4 <L_shift>
 80165c2:	9b01      	ldr	r3, [sp, #4]
 80165c4:	429c      	cmp	r4, r3
 80165c6:	d926      	bls.n	8016616 <__hexnan+0x106>
 80165c8:	cc04      	ldmia	r4!, {r2}
 80165ca:	601a      	str	r2, [r3, #0]
 80165cc:	3304      	adds	r3, #4
 80165ce:	42a6      	cmp	r6, r4
 80165d0:	d2fa      	bcs.n	80165c8 <__hexnan+0xb8>
 80165d2:	2200      	movs	r2, #0
 80165d4:	c304      	stmia	r3!, {r2}
 80165d6:	429e      	cmp	r6, r3
 80165d8:	d2fc      	bcs.n	80165d4 <__hexnan+0xc4>
 80165da:	6833      	ldr	r3, [r6, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d104      	bne.n	80165ea <__hexnan+0xda>
 80165e0:	9b01      	ldr	r3, [sp, #4]
 80165e2:	429e      	cmp	r6, r3
 80165e4:	d126      	bne.n	8016634 <__hexnan+0x124>
 80165e6:	2301      	movs	r3, #1
 80165e8:	6033      	str	r3, [r6, #0]
 80165ea:	2005      	movs	r0, #5
 80165ec:	e025      	b.n	801663a <__hexnan+0x12a>
 80165ee:	9b02      	ldr	r3, [sp, #8]
 80165f0:	3501      	adds	r5, #1
 80165f2:	3301      	adds	r3, #1
 80165f4:	9302      	str	r3, [sp, #8]
 80165f6:	2d08      	cmp	r5, #8
 80165f8:	dd06      	ble.n	8016608 <__hexnan+0xf8>
 80165fa:	9b01      	ldr	r3, [sp, #4]
 80165fc:	429c      	cmp	r4, r3
 80165fe:	d9ca      	bls.n	8016596 <__hexnan+0x86>
 8016600:	2300      	movs	r3, #0
 8016602:	2501      	movs	r5, #1
 8016604:	3c04      	subs	r4, #4
 8016606:	6023      	str	r3, [r4, #0]
 8016608:	220f      	movs	r2, #15
 801660a:	6823      	ldr	r3, [r4, #0]
 801660c:	4010      	ands	r0, r2
 801660e:	011b      	lsls	r3, r3, #4
 8016610:	4318      	orrs	r0, r3
 8016612:	6020      	str	r0, [r4, #0]
 8016614:	e7bf      	b.n	8016596 <__hexnan+0x86>
 8016616:	9b06      	ldr	r3, [sp, #24]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d0de      	beq.n	80165da <__hexnan+0xca>
 801661c:	2120      	movs	r1, #32
 801661e:	9a06      	ldr	r2, [sp, #24]
 8016620:	9b04      	ldr	r3, [sp, #16]
 8016622:	1a89      	subs	r1, r1, r2
 8016624:	2201      	movs	r2, #1
 8016626:	4252      	negs	r2, r2
 8016628:	40ca      	lsrs	r2, r1
 801662a:	3b04      	subs	r3, #4
 801662c:	6819      	ldr	r1, [r3, #0]
 801662e:	400a      	ands	r2, r1
 8016630:	601a      	str	r2, [r3, #0]
 8016632:	e7d2      	b.n	80165da <__hexnan+0xca>
 8016634:	3e04      	subs	r6, #4
 8016636:	e7d0      	b.n	80165da <__hexnan+0xca>
 8016638:	2004      	movs	r0, #4
 801663a:	b00b      	add	sp, #44	; 0x2c
 801663c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801663e <__localeconv_l>:
 801663e:	30f0      	adds	r0, #240	; 0xf0
 8016640:	4770      	bx	lr
	...

08016644 <_localeconv_r>:
 8016644:	4b03      	ldr	r3, [pc, #12]	; (8016654 <_localeconv_r+0x10>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	6a18      	ldr	r0, [r3, #32]
 801664a:	2800      	cmp	r0, #0
 801664c:	d100      	bne.n	8016650 <_localeconv_r+0xc>
 801664e:	4802      	ldr	r0, [pc, #8]	; (8016658 <_localeconv_r+0x14>)
 8016650:	30f0      	adds	r0, #240	; 0xf0
 8016652:	4770      	bx	lr
 8016654:	200000c0 	.word	0x200000c0
 8016658:	20000124 	.word	0x20000124

0801665c <memchr>:
 801665c:	b2c9      	uxtb	r1, r1
 801665e:	1882      	adds	r2, r0, r2
 8016660:	4290      	cmp	r0, r2
 8016662:	d101      	bne.n	8016668 <memchr+0xc>
 8016664:	2000      	movs	r0, #0
 8016666:	4770      	bx	lr
 8016668:	7803      	ldrb	r3, [r0, #0]
 801666a:	428b      	cmp	r3, r1
 801666c:	d0fb      	beq.n	8016666 <memchr+0xa>
 801666e:	3001      	adds	r0, #1
 8016670:	e7f6      	b.n	8016660 <memchr+0x4>

08016672 <__malloc_lock>:
 8016672:	4770      	bx	lr

08016674 <__malloc_unlock>:
 8016674:	4770      	bx	lr

08016676 <_Balloc>:
 8016676:	b570      	push	{r4, r5, r6, lr}
 8016678:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801667a:	0004      	movs	r4, r0
 801667c:	000d      	movs	r5, r1
 801667e:	2e00      	cmp	r6, #0
 8016680:	d107      	bne.n	8016692 <_Balloc+0x1c>
 8016682:	2010      	movs	r0, #16
 8016684:	f7fd f8c4 	bl	8013810 <malloc>
 8016688:	6260      	str	r0, [r4, #36]	; 0x24
 801668a:	6046      	str	r6, [r0, #4]
 801668c:	6086      	str	r6, [r0, #8]
 801668e:	6006      	str	r6, [r0, #0]
 8016690:	60c6      	str	r6, [r0, #12]
 8016692:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016694:	68f3      	ldr	r3, [r6, #12]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d013      	beq.n	80166c2 <_Balloc+0x4c>
 801669a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801669c:	00aa      	lsls	r2, r5, #2
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	189b      	adds	r3, r3, r2
 80166a2:	6818      	ldr	r0, [r3, #0]
 80166a4:	2800      	cmp	r0, #0
 80166a6:	d118      	bne.n	80166da <_Balloc+0x64>
 80166a8:	2101      	movs	r1, #1
 80166aa:	000e      	movs	r6, r1
 80166ac:	40ae      	lsls	r6, r5
 80166ae:	1d72      	adds	r2, r6, #5
 80166b0:	0092      	lsls	r2, r2, #2
 80166b2:	0020      	movs	r0, r4
 80166b4:	f000 fbd5 	bl	8016e62 <_calloc_r>
 80166b8:	2800      	cmp	r0, #0
 80166ba:	d00c      	beq.n	80166d6 <_Balloc+0x60>
 80166bc:	6045      	str	r5, [r0, #4]
 80166be:	6086      	str	r6, [r0, #8]
 80166c0:	e00d      	b.n	80166de <_Balloc+0x68>
 80166c2:	2221      	movs	r2, #33	; 0x21
 80166c4:	2104      	movs	r1, #4
 80166c6:	0020      	movs	r0, r4
 80166c8:	f000 fbcb 	bl	8016e62 <_calloc_r>
 80166cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166ce:	60f0      	str	r0, [r6, #12]
 80166d0:	68db      	ldr	r3, [r3, #12]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d1e1      	bne.n	801669a <_Balloc+0x24>
 80166d6:	2000      	movs	r0, #0
 80166d8:	bd70      	pop	{r4, r5, r6, pc}
 80166da:	6802      	ldr	r2, [r0, #0]
 80166dc:	601a      	str	r2, [r3, #0]
 80166de:	2300      	movs	r3, #0
 80166e0:	6103      	str	r3, [r0, #16]
 80166e2:	60c3      	str	r3, [r0, #12]
 80166e4:	e7f8      	b.n	80166d8 <_Balloc+0x62>

080166e6 <_Bfree>:
 80166e6:	b570      	push	{r4, r5, r6, lr}
 80166e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80166ea:	0006      	movs	r6, r0
 80166ec:	000d      	movs	r5, r1
 80166ee:	2c00      	cmp	r4, #0
 80166f0:	d107      	bne.n	8016702 <_Bfree+0x1c>
 80166f2:	2010      	movs	r0, #16
 80166f4:	f7fd f88c 	bl	8013810 <malloc>
 80166f8:	6270      	str	r0, [r6, #36]	; 0x24
 80166fa:	6044      	str	r4, [r0, #4]
 80166fc:	6084      	str	r4, [r0, #8]
 80166fe:	6004      	str	r4, [r0, #0]
 8016700:	60c4      	str	r4, [r0, #12]
 8016702:	2d00      	cmp	r5, #0
 8016704:	d007      	beq.n	8016716 <_Bfree+0x30>
 8016706:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016708:	686a      	ldr	r2, [r5, #4]
 801670a:	68db      	ldr	r3, [r3, #12]
 801670c:	0092      	lsls	r2, r2, #2
 801670e:	189b      	adds	r3, r3, r2
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	602a      	str	r2, [r5, #0]
 8016714:	601d      	str	r5, [r3, #0]
 8016716:	bd70      	pop	{r4, r5, r6, pc}

08016718 <__multadd>:
 8016718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801671a:	001e      	movs	r6, r3
 801671c:	2314      	movs	r3, #20
 801671e:	469c      	mov	ip, r3
 8016720:	0007      	movs	r7, r0
 8016722:	000c      	movs	r4, r1
 8016724:	2000      	movs	r0, #0
 8016726:	690d      	ldr	r5, [r1, #16]
 8016728:	448c      	add	ip, r1
 801672a:	4663      	mov	r3, ip
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	3001      	adds	r0, #1
 8016730:	b299      	uxth	r1, r3
 8016732:	4663      	mov	r3, ip
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	4351      	muls	r1, r2
 8016738:	0c1b      	lsrs	r3, r3, #16
 801673a:	4353      	muls	r3, r2
 801673c:	1989      	adds	r1, r1, r6
 801673e:	0c0e      	lsrs	r6, r1, #16
 8016740:	199b      	adds	r3, r3, r6
 8016742:	b289      	uxth	r1, r1
 8016744:	0c1e      	lsrs	r6, r3, #16
 8016746:	041b      	lsls	r3, r3, #16
 8016748:	185b      	adds	r3, r3, r1
 801674a:	4661      	mov	r1, ip
 801674c:	c108      	stmia	r1!, {r3}
 801674e:	468c      	mov	ip, r1
 8016750:	4285      	cmp	r5, r0
 8016752:	dcea      	bgt.n	801672a <__multadd+0x12>
 8016754:	2e00      	cmp	r6, #0
 8016756:	d01b      	beq.n	8016790 <__multadd+0x78>
 8016758:	68a3      	ldr	r3, [r4, #8]
 801675a:	42ab      	cmp	r3, r5
 801675c:	dc12      	bgt.n	8016784 <__multadd+0x6c>
 801675e:	6863      	ldr	r3, [r4, #4]
 8016760:	0038      	movs	r0, r7
 8016762:	1c59      	adds	r1, r3, #1
 8016764:	f7ff ff87 	bl	8016676 <_Balloc>
 8016768:	0021      	movs	r1, r4
 801676a:	6923      	ldr	r3, [r4, #16]
 801676c:	9001      	str	r0, [sp, #4]
 801676e:	1c9a      	adds	r2, r3, #2
 8016770:	0092      	lsls	r2, r2, #2
 8016772:	310c      	adds	r1, #12
 8016774:	300c      	adds	r0, #12
 8016776:	f7fd f880 	bl	801387a <memcpy>
 801677a:	0021      	movs	r1, r4
 801677c:	0038      	movs	r0, r7
 801677e:	f7ff ffb2 	bl	80166e6 <_Bfree>
 8016782:	9c01      	ldr	r4, [sp, #4]
 8016784:	1d2b      	adds	r3, r5, #4
 8016786:	009b      	lsls	r3, r3, #2
 8016788:	18e3      	adds	r3, r4, r3
 801678a:	3501      	adds	r5, #1
 801678c:	605e      	str	r6, [r3, #4]
 801678e:	6125      	str	r5, [r4, #16]
 8016790:	0020      	movs	r0, r4
 8016792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08016794 <__s2b>:
 8016794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016796:	0006      	movs	r6, r0
 8016798:	0018      	movs	r0, r3
 801679a:	000c      	movs	r4, r1
 801679c:	3008      	adds	r0, #8
 801679e:	2109      	movs	r1, #9
 80167a0:	9301      	str	r3, [sp, #4]
 80167a2:	0015      	movs	r5, r2
 80167a4:	f7e9 fd54 	bl	8000250 <__divsi3>
 80167a8:	2301      	movs	r3, #1
 80167aa:	2100      	movs	r1, #0
 80167ac:	4283      	cmp	r3, r0
 80167ae:	db1f      	blt.n	80167f0 <__s2b+0x5c>
 80167b0:	0030      	movs	r0, r6
 80167b2:	f7ff ff60 	bl	8016676 <_Balloc>
 80167b6:	9b08      	ldr	r3, [sp, #32]
 80167b8:	6143      	str	r3, [r0, #20]
 80167ba:	2301      	movs	r3, #1
 80167bc:	6103      	str	r3, [r0, #16]
 80167be:	2d09      	cmp	r5, #9
 80167c0:	dd19      	ble.n	80167f6 <__s2b+0x62>
 80167c2:	0023      	movs	r3, r4
 80167c4:	3309      	adds	r3, #9
 80167c6:	001f      	movs	r7, r3
 80167c8:	9300      	str	r3, [sp, #0]
 80167ca:	1964      	adds	r4, r4, r5
 80167cc:	783b      	ldrb	r3, [r7, #0]
 80167ce:	0001      	movs	r1, r0
 80167d0:	3b30      	subs	r3, #48	; 0x30
 80167d2:	220a      	movs	r2, #10
 80167d4:	0030      	movs	r0, r6
 80167d6:	3701      	adds	r7, #1
 80167d8:	f7ff ff9e 	bl	8016718 <__multadd>
 80167dc:	42a7      	cmp	r7, r4
 80167de:	d1f5      	bne.n	80167cc <__s2b+0x38>
 80167e0:	9b00      	ldr	r3, [sp, #0]
 80167e2:	195c      	adds	r4, r3, r5
 80167e4:	3c08      	subs	r4, #8
 80167e6:	002f      	movs	r7, r5
 80167e8:	9b01      	ldr	r3, [sp, #4]
 80167ea:	429f      	cmp	r7, r3
 80167ec:	db06      	blt.n	80167fc <__s2b+0x68>
 80167ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	3101      	adds	r1, #1
 80167f4:	e7da      	b.n	80167ac <__s2b+0x18>
 80167f6:	340a      	adds	r4, #10
 80167f8:	2509      	movs	r5, #9
 80167fa:	e7f4      	b.n	80167e6 <__s2b+0x52>
 80167fc:	1b63      	subs	r3, r4, r5
 80167fe:	5ddb      	ldrb	r3, [r3, r7]
 8016800:	0001      	movs	r1, r0
 8016802:	3b30      	subs	r3, #48	; 0x30
 8016804:	220a      	movs	r2, #10
 8016806:	0030      	movs	r0, r6
 8016808:	f7ff ff86 	bl	8016718 <__multadd>
 801680c:	3701      	adds	r7, #1
 801680e:	e7eb      	b.n	80167e8 <__s2b+0x54>

08016810 <__hi0bits>:
 8016810:	0003      	movs	r3, r0
 8016812:	0c02      	lsrs	r2, r0, #16
 8016814:	2000      	movs	r0, #0
 8016816:	4282      	cmp	r2, r0
 8016818:	d101      	bne.n	801681e <__hi0bits+0xe>
 801681a:	041b      	lsls	r3, r3, #16
 801681c:	3010      	adds	r0, #16
 801681e:	0e1a      	lsrs	r2, r3, #24
 8016820:	d101      	bne.n	8016826 <__hi0bits+0x16>
 8016822:	3008      	adds	r0, #8
 8016824:	021b      	lsls	r3, r3, #8
 8016826:	0f1a      	lsrs	r2, r3, #28
 8016828:	d101      	bne.n	801682e <__hi0bits+0x1e>
 801682a:	3004      	adds	r0, #4
 801682c:	011b      	lsls	r3, r3, #4
 801682e:	0f9a      	lsrs	r2, r3, #30
 8016830:	d101      	bne.n	8016836 <__hi0bits+0x26>
 8016832:	3002      	adds	r0, #2
 8016834:	009b      	lsls	r3, r3, #2
 8016836:	2b00      	cmp	r3, #0
 8016838:	db03      	blt.n	8016842 <__hi0bits+0x32>
 801683a:	3001      	adds	r0, #1
 801683c:	005b      	lsls	r3, r3, #1
 801683e:	d400      	bmi.n	8016842 <__hi0bits+0x32>
 8016840:	2020      	movs	r0, #32
 8016842:	4770      	bx	lr

08016844 <__lo0bits>:
 8016844:	2207      	movs	r2, #7
 8016846:	6803      	ldr	r3, [r0, #0]
 8016848:	b510      	push	{r4, lr}
 801684a:	0001      	movs	r1, r0
 801684c:	401a      	ands	r2, r3
 801684e:	d00d      	beq.n	801686c <__lo0bits+0x28>
 8016850:	2401      	movs	r4, #1
 8016852:	2000      	movs	r0, #0
 8016854:	4223      	tst	r3, r4
 8016856:	d105      	bne.n	8016864 <__lo0bits+0x20>
 8016858:	3002      	adds	r0, #2
 801685a:	4203      	tst	r3, r0
 801685c:	d003      	beq.n	8016866 <__lo0bits+0x22>
 801685e:	40e3      	lsrs	r3, r4
 8016860:	0020      	movs	r0, r4
 8016862:	600b      	str	r3, [r1, #0]
 8016864:	bd10      	pop	{r4, pc}
 8016866:	089b      	lsrs	r3, r3, #2
 8016868:	600b      	str	r3, [r1, #0]
 801686a:	e7fb      	b.n	8016864 <__lo0bits+0x20>
 801686c:	b29c      	uxth	r4, r3
 801686e:	0010      	movs	r0, r2
 8016870:	2c00      	cmp	r4, #0
 8016872:	d101      	bne.n	8016878 <__lo0bits+0x34>
 8016874:	2010      	movs	r0, #16
 8016876:	0c1b      	lsrs	r3, r3, #16
 8016878:	b2da      	uxtb	r2, r3
 801687a:	2a00      	cmp	r2, #0
 801687c:	d101      	bne.n	8016882 <__lo0bits+0x3e>
 801687e:	3008      	adds	r0, #8
 8016880:	0a1b      	lsrs	r3, r3, #8
 8016882:	071a      	lsls	r2, r3, #28
 8016884:	d101      	bne.n	801688a <__lo0bits+0x46>
 8016886:	3004      	adds	r0, #4
 8016888:	091b      	lsrs	r3, r3, #4
 801688a:	079a      	lsls	r2, r3, #30
 801688c:	d101      	bne.n	8016892 <__lo0bits+0x4e>
 801688e:	3002      	adds	r0, #2
 8016890:	089b      	lsrs	r3, r3, #2
 8016892:	07da      	lsls	r2, r3, #31
 8016894:	d4e8      	bmi.n	8016868 <__lo0bits+0x24>
 8016896:	085b      	lsrs	r3, r3, #1
 8016898:	d001      	beq.n	801689e <__lo0bits+0x5a>
 801689a:	3001      	adds	r0, #1
 801689c:	e7e4      	b.n	8016868 <__lo0bits+0x24>
 801689e:	2020      	movs	r0, #32
 80168a0:	e7e0      	b.n	8016864 <__lo0bits+0x20>

080168a2 <__i2b>:
 80168a2:	b510      	push	{r4, lr}
 80168a4:	000c      	movs	r4, r1
 80168a6:	2101      	movs	r1, #1
 80168a8:	f7ff fee5 	bl	8016676 <_Balloc>
 80168ac:	2301      	movs	r3, #1
 80168ae:	6144      	str	r4, [r0, #20]
 80168b0:	6103      	str	r3, [r0, #16]
 80168b2:	bd10      	pop	{r4, pc}

080168b4 <__multiply>:
 80168b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168b6:	690b      	ldr	r3, [r1, #16]
 80168b8:	0014      	movs	r4, r2
 80168ba:	6912      	ldr	r2, [r2, #16]
 80168bc:	b089      	sub	sp, #36	; 0x24
 80168be:	000d      	movs	r5, r1
 80168c0:	4293      	cmp	r3, r2
 80168c2:	da01      	bge.n	80168c8 <__multiply+0x14>
 80168c4:	0025      	movs	r5, r4
 80168c6:	000c      	movs	r4, r1
 80168c8:	692f      	ldr	r7, [r5, #16]
 80168ca:	6926      	ldr	r6, [r4, #16]
 80168cc:	6869      	ldr	r1, [r5, #4]
 80168ce:	19bb      	adds	r3, r7, r6
 80168d0:	9302      	str	r3, [sp, #8]
 80168d2:	68ab      	ldr	r3, [r5, #8]
 80168d4:	19ba      	adds	r2, r7, r6
 80168d6:	4293      	cmp	r3, r2
 80168d8:	da00      	bge.n	80168dc <__multiply+0x28>
 80168da:	3101      	adds	r1, #1
 80168dc:	f7ff fecb 	bl	8016676 <_Balloc>
 80168e0:	0002      	movs	r2, r0
 80168e2:	19bb      	adds	r3, r7, r6
 80168e4:	3214      	adds	r2, #20
 80168e6:	009b      	lsls	r3, r3, #2
 80168e8:	18d3      	adds	r3, r2, r3
 80168ea:	469c      	mov	ip, r3
 80168ec:	2100      	movs	r1, #0
 80168ee:	0013      	movs	r3, r2
 80168f0:	9004      	str	r0, [sp, #16]
 80168f2:	4563      	cmp	r3, ip
 80168f4:	d31d      	bcc.n	8016932 <__multiply+0x7e>
 80168f6:	3514      	adds	r5, #20
 80168f8:	00bf      	lsls	r7, r7, #2
 80168fa:	19eb      	adds	r3, r5, r7
 80168fc:	3414      	adds	r4, #20
 80168fe:	00b6      	lsls	r6, r6, #2
 8016900:	9305      	str	r3, [sp, #20]
 8016902:	19a3      	adds	r3, r4, r6
 8016904:	9503      	str	r5, [sp, #12]
 8016906:	9401      	str	r4, [sp, #4]
 8016908:	9307      	str	r3, [sp, #28]
 801690a:	9b07      	ldr	r3, [sp, #28]
 801690c:	9901      	ldr	r1, [sp, #4]
 801690e:	4299      	cmp	r1, r3
 8016910:	d311      	bcc.n	8016936 <__multiply+0x82>
 8016912:	9b02      	ldr	r3, [sp, #8]
 8016914:	2b00      	cmp	r3, #0
 8016916:	dd06      	ble.n	8016926 <__multiply+0x72>
 8016918:	2304      	movs	r3, #4
 801691a:	425b      	negs	r3, r3
 801691c:	449c      	add	ip, r3
 801691e:	4663      	mov	r3, ip
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d051      	beq.n	80169ca <__multiply+0x116>
 8016926:	9b04      	ldr	r3, [sp, #16]
 8016928:	9a02      	ldr	r2, [sp, #8]
 801692a:	0018      	movs	r0, r3
 801692c:	611a      	str	r2, [r3, #16]
 801692e:	b009      	add	sp, #36	; 0x24
 8016930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016932:	c302      	stmia	r3!, {r1}
 8016934:	e7dd      	b.n	80168f2 <__multiply+0x3e>
 8016936:	9b01      	ldr	r3, [sp, #4]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	b298      	uxth	r0, r3
 801693c:	2800      	cmp	r0, #0
 801693e:	d01c      	beq.n	801697a <__multiply+0xc6>
 8016940:	0015      	movs	r5, r2
 8016942:	2600      	movs	r6, #0
 8016944:	9f03      	ldr	r7, [sp, #12]
 8016946:	cf02      	ldmia	r7!, {r1}
 8016948:	682c      	ldr	r4, [r5, #0]
 801694a:	b28b      	uxth	r3, r1
 801694c:	4343      	muls	r3, r0
 801694e:	0c09      	lsrs	r1, r1, #16
 8016950:	4341      	muls	r1, r0
 8016952:	b2a4      	uxth	r4, r4
 8016954:	191b      	adds	r3, r3, r4
 8016956:	199b      	adds	r3, r3, r6
 8016958:	000e      	movs	r6, r1
 801695a:	6829      	ldr	r1, [r5, #0]
 801695c:	9506      	str	r5, [sp, #24]
 801695e:	0c09      	lsrs	r1, r1, #16
 8016960:	1871      	adds	r1, r6, r1
 8016962:	0c1e      	lsrs	r6, r3, #16
 8016964:	1989      	adds	r1, r1, r6
 8016966:	0c0e      	lsrs	r6, r1, #16
 8016968:	b29b      	uxth	r3, r3
 801696a:	0409      	lsls	r1, r1, #16
 801696c:	430b      	orrs	r3, r1
 801696e:	c508      	stmia	r5!, {r3}
 8016970:	9b05      	ldr	r3, [sp, #20]
 8016972:	42bb      	cmp	r3, r7
 8016974:	d8e7      	bhi.n	8016946 <__multiply+0x92>
 8016976:	9b06      	ldr	r3, [sp, #24]
 8016978:	605e      	str	r6, [r3, #4]
 801697a:	9b01      	ldr	r3, [sp, #4]
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	0c1d      	lsrs	r5, r3, #16
 8016980:	d01e      	beq.n	80169c0 <__multiply+0x10c>
 8016982:	0010      	movs	r0, r2
 8016984:	2700      	movs	r7, #0
 8016986:	6813      	ldr	r3, [r2, #0]
 8016988:	9e03      	ldr	r6, [sp, #12]
 801698a:	6831      	ldr	r1, [r6, #0]
 801698c:	6804      	ldr	r4, [r0, #0]
 801698e:	b289      	uxth	r1, r1
 8016990:	4369      	muls	r1, r5
 8016992:	0c24      	lsrs	r4, r4, #16
 8016994:	1909      	adds	r1, r1, r4
 8016996:	19c9      	adds	r1, r1, r7
 8016998:	040f      	lsls	r7, r1, #16
 801699a:	b29b      	uxth	r3, r3
 801699c:	433b      	orrs	r3, r7
 801699e:	6003      	str	r3, [r0, #0]
 80169a0:	ce80      	ldmia	r6!, {r7}
 80169a2:	6843      	ldr	r3, [r0, #4]
 80169a4:	0c3f      	lsrs	r7, r7, #16
 80169a6:	436f      	muls	r7, r5
 80169a8:	b29b      	uxth	r3, r3
 80169aa:	18fb      	adds	r3, r7, r3
 80169ac:	0c09      	lsrs	r1, r1, #16
 80169ae:	185b      	adds	r3, r3, r1
 80169b0:	9905      	ldr	r1, [sp, #20]
 80169b2:	9006      	str	r0, [sp, #24]
 80169b4:	0c1f      	lsrs	r7, r3, #16
 80169b6:	3004      	adds	r0, #4
 80169b8:	42b1      	cmp	r1, r6
 80169ba:	d8e6      	bhi.n	801698a <__multiply+0xd6>
 80169bc:	9906      	ldr	r1, [sp, #24]
 80169be:	604b      	str	r3, [r1, #4]
 80169c0:	9b01      	ldr	r3, [sp, #4]
 80169c2:	3204      	adds	r2, #4
 80169c4:	3304      	adds	r3, #4
 80169c6:	9301      	str	r3, [sp, #4]
 80169c8:	e79f      	b.n	801690a <__multiply+0x56>
 80169ca:	9b02      	ldr	r3, [sp, #8]
 80169cc:	3b01      	subs	r3, #1
 80169ce:	9302      	str	r3, [sp, #8]
 80169d0:	e79f      	b.n	8016912 <__multiply+0x5e>
	...

080169d4 <__pow5mult>:
 80169d4:	2303      	movs	r3, #3
 80169d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169d8:	4013      	ands	r3, r2
 80169da:	0005      	movs	r5, r0
 80169dc:	000e      	movs	r6, r1
 80169de:	0014      	movs	r4, r2
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d008      	beq.n	80169f6 <__pow5mult+0x22>
 80169e4:	4922      	ldr	r1, [pc, #136]	; (8016a70 <__pow5mult+0x9c>)
 80169e6:	3b01      	subs	r3, #1
 80169e8:	009a      	lsls	r2, r3, #2
 80169ea:	5852      	ldr	r2, [r2, r1]
 80169ec:	2300      	movs	r3, #0
 80169ee:	0031      	movs	r1, r6
 80169f0:	f7ff fe92 	bl	8016718 <__multadd>
 80169f4:	0006      	movs	r6, r0
 80169f6:	10a3      	asrs	r3, r4, #2
 80169f8:	9301      	str	r3, [sp, #4]
 80169fa:	d036      	beq.n	8016a6a <__pow5mult+0x96>
 80169fc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80169fe:	2c00      	cmp	r4, #0
 8016a00:	d107      	bne.n	8016a12 <__pow5mult+0x3e>
 8016a02:	2010      	movs	r0, #16
 8016a04:	f7fc ff04 	bl	8013810 <malloc>
 8016a08:	6268      	str	r0, [r5, #36]	; 0x24
 8016a0a:	6044      	str	r4, [r0, #4]
 8016a0c:	6084      	str	r4, [r0, #8]
 8016a0e:	6004      	str	r4, [r0, #0]
 8016a10:	60c4      	str	r4, [r0, #12]
 8016a12:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016a14:	68bc      	ldr	r4, [r7, #8]
 8016a16:	2c00      	cmp	r4, #0
 8016a18:	d107      	bne.n	8016a2a <__pow5mult+0x56>
 8016a1a:	4916      	ldr	r1, [pc, #88]	; (8016a74 <__pow5mult+0xa0>)
 8016a1c:	0028      	movs	r0, r5
 8016a1e:	f7ff ff40 	bl	80168a2 <__i2b>
 8016a22:	2300      	movs	r3, #0
 8016a24:	0004      	movs	r4, r0
 8016a26:	60b8      	str	r0, [r7, #8]
 8016a28:	6003      	str	r3, [r0, #0]
 8016a2a:	2201      	movs	r2, #1
 8016a2c:	9b01      	ldr	r3, [sp, #4]
 8016a2e:	4213      	tst	r3, r2
 8016a30:	d00a      	beq.n	8016a48 <__pow5mult+0x74>
 8016a32:	0031      	movs	r1, r6
 8016a34:	0022      	movs	r2, r4
 8016a36:	0028      	movs	r0, r5
 8016a38:	f7ff ff3c 	bl	80168b4 <__multiply>
 8016a3c:	0007      	movs	r7, r0
 8016a3e:	0031      	movs	r1, r6
 8016a40:	0028      	movs	r0, r5
 8016a42:	f7ff fe50 	bl	80166e6 <_Bfree>
 8016a46:	003e      	movs	r6, r7
 8016a48:	9b01      	ldr	r3, [sp, #4]
 8016a4a:	105b      	asrs	r3, r3, #1
 8016a4c:	9301      	str	r3, [sp, #4]
 8016a4e:	d00c      	beq.n	8016a6a <__pow5mult+0x96>
 8016a50:	6820      	ldr	r0, [r4, #0]
 8016a52:	2800      	cmp	r0, #0
 8016a54:	d107      	bne.n	8016a66 <__pow5mult+0x92>
 8016a56:	0022      	movs	r2, r4
 8016a58:	0021      	movs	r1, r4
 8016a5a:	0028      	movs	r0, r5
 8016a5c:	f7ff ff2a 	bl	80168b4 <__multiply>
 8016a60:	2300      	movs	r3, #0
 8016a62:	6020      	str	r0, [r4, #0]
 8016a64:	6003      	str	r3, [r0, #0]
 8016a66:	0004      	movs	r4, r0
 8016a68:	e7df      	b.n	8016a2a <__pow5mult+0x56>
 8016a6a:	0030      	movs	r0, r6
 8016a6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016a6e:	46c0      	nop			; (mov r8, r8)
 8016a70:	0801a508 	.word	0x0801a508
 8016a74:	00000271 	.word	0x00000271

08016a78 <__lshift>:
 8016a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a7a:	000d      	movs	r5, r1
 8016a7c:	0017      	movs	r7, r2
 8016a7e:	692b      	ldr	r3, [r5, #16]
 8016a80:	1154      	asrs	r4, r2, #5
 8016a82:	b085      	sub	sp, #20
 8016a84:	18e3      	adds	r3, r4, r3
 8016a86:	9301      	str	r3, [sp, #4]
 8016a88:	3301      	adds	r3, #1
 8016a8a:	9300      	str	r3, [sp, #0]
 8016a8c:	6849      	ldr	r1, [r1, #4]
 8016a8e:	68ab      	ldr	r3, [r5, #8]
 8016a90:	9002      	str	r0, [sp, #8]
 8016a92:	9a00      	ldr	r2, [sp, #0]
 8016a94:	4293      	cmp	r3, r2
 8016a96:	db35      	blt.n	8016b04 <__lshift+0x8c>
 8016a98:	9802      	ldr	r0, [sp, #8]
 8016a9a:	f7ff fdec 	bl	8016676 <_Balloc>
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	0002      	movs	r2, r0
 8016aa2:	0006      	movs	r6, r0
 8016aa4:	0019      	movs	r1, r3
 8016aa6:	3214      	adds	r2, #20
 8016aa8:	42a3      	cmp	r3, r4
 8016aaa:	db2e      	blt.n	8016b0a <__lshift+0x92>
 8016aac:	43e3      	mvns	r3, r4
 8016aae:	17db      	asrs	r3, r3, #31
 8016ab0:	401c      	ands	r4, r3
 8016ab2:	002b      	movs	r3, r5
 8016ab4:	00a4      	lsls	r4, r4, #2
 8016ab6:	1914      	adds	r4, r2, r4
 8016ab8:	692a      	ldr	r2, [r5, #16]
 8016aba:	3314      	adds	r3, #20
 8016abc:	0092      	lsls	r2, r2, #2
 8016abe:	189a      	adds	r2, r3, r2
 8016ac0:	4694      	mov	ip, r2
 8016ac2:	221f      	movs	r2, #31
 8016ac4:	4017      	ands	r7, r2
 8016ac6:	d024      	beq.n	8016b12 <__lshift+0x9a>
 8016ac8:	3201      	adds	r2, #1
 8016aca:	1bd2      	subs	r2, r2, r7
 8016acc:	9203      	str	r2, [sp, #12]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	6819      	ldr	r1, [r3, #0]
 8016ad2:	0020      	movs	r0, r4
 8016ad4:	40b9      	lsls	r1, r7
 8016ad6:	430a      	orrs	r2, r1
 8016ad8:	c404      	stmia	r4!, {r2}
 8016ada:	cb04      	ldmia	r3!, {r2}
 8016adc:	9903      	ldr	r1, [sp, #12]
 8016ade:	40ca      	lsrs	r2, r1
 8016ae0:	459c      	cmp	ip, r3
 8016ae2:	d8f5      	bhi.n	8016ad0 <__lshift+0x58>
 8016ae4:	6042      	str	r2, [r0, #4]
 8016ae6:	2a00      	cmp	r2, #0
 8016ae8:	d002      	beq.n	8016af0 <__lshift+0x78>
 8016aea:	9b01      	ldr	r3, [sp, #4]
 8016aec:	3302      	adds	r3, #2
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	9b00      	ldr	r3, [sp, #0]
 8016af2:	9802      	ldr	r0, [sp, #8]
 8016af4:	3b01      	subs	r3, #1
 8016af6:	6133      	str	r3, [r6, #16]
 8016af8:	0029      	movs	r1, r5
 8016afa:	f7ff fdf4 	bl	80166e6 <_Bfree>
 8016afe:	0030      	movs	r0, r6
 8016b00:	b005      	add	sp, #20
 8016b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b04:	3101      	adds	r1, #1
 8016b06:	005b      	lsls	r3, r3, #1
 8016b08:	e7c3      	b.n	8016a92 <__lshift+0x1a>
 8016b0a:	0098      	lsls	r0, r3, #2
 8016b0c:	5011      	str	r1, [r2, r0]
 8016b0e:	3301      	adds	r3, #1
 8016b10:	e7ca      	b.n	8016aa8 <__lshift+0x30>
 8016b12:	cb04      	ldmia	r3!, {r2}
 8016b14:	c404      	stmia	r4!, {r2}
 8016b16:	459c      	cmp	ip, r3
 8016b18:	d8fb      	bhi.n	8016b12 <__lshift+0x9a>
 8016b1a:	e7e9      	b.n	8016af0 <__lshift+0x78>

08016b1c <__mcmp>:
 8016b1c:	690a      	ldr	r2, [r1, #16]
 8016b1e:	6903      	ldr	r3, [r0, #16]
 8016b20:	b530      	push	{r4, r5, lr}
 8016b22:	1a9b      	subs	r3, r3, r2
 8016b24:	d10d      	bne.n	8016b42 <__mcmp+0x26>
 8016b26:	0092      	lsls	r2, r2, #2
 8016b28:	3014      	adds	r0, #20
 8016b2a:	3114      	adds	r1, #20
 8016b2c:	1884      	adds	r4, r0, r2
 8016b2e:	1889      	adds	r1, r1, r2
 8016b30:	3c04      	subs	r4, #4
 8016b32:	3904      	subs	r1, #4
 8016b34:	6825      	ldr	r5, [r4, #0]
 8016b36:	680a      	ldr	r2, [r1, #0]
 8016b38:	4295      	cmp	r5, r2
 8016b3a:	d004      	beq.n	8016b46 <__mcmp+0x2a>
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	4295      	cmp	r5, r2
 8016b40:	d304      	bcc.n	8016b4c <__mcmp+0x30>
 8016b42:	0018      	movs	r0, r3
 8016b44:	bd30      	pop	{r4, r5, pc}
 8016b46:	42a0      	cmp	r0, r4
 8016b48:	d3f2      	bcc.n	8016b30 <__mcmp+0x14>
 8016b4a:	e7fa      	b.n	8016b42 <__mcmp+0x26>
 8016b4c:	425b      	negs	r3, r3
 8016b4e:	e7f8      	b.n	8016b42 <__mcmp+0x26>

08016b50 <__mdiff>:
 8016b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b52:	000d      	movs	r5, r1
 8016b54:	b085      	sub	sp, #20
 8016b56:	0007      	movs	r7, r0
 8016b58:	0011      	movs	r1, r2
 8016b5a:	0028      	movs	r0, r5
 8016b5c:	0014      	movs	r4, r2
 8016b5e:	f7ff ffdd 	bl	8016b1c <__mcmp>
 8016b62:	1e06      	subs	r6, r0, #0
 8016b64:	d108      	bne.n	8016b78 <__mdiff+0x28>
 8016b66:	0001      	movs	r1, r0
 8016b68:	0038      	movs	r0, r7
 8016b6a:	f7ff fd84 	bl	8016676 <_Balloc>
 8016b6e:	2301      	movs	r3, #1
 8016b70:	6146      	str	r6, [r0, #20]
 8016b72:	6103      	str	r3, [r0, #16]
 8016b74:	b005      	add	sp, #20
 8016b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b78:	2301      	movs	r3, #1
 8016b7a:	9301      	str	r3, [sp, #4]
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	db04      	blt.n	8016b8a <__mdiff+0x3a>
 8016b80:	0023      	movs	r3, r4
 8016b82:	002c      	movs	r4, r5
 8016b84:	001d      	movs	r5, r3
 8016b86:	2300      	movs	r3, #0
 8016b88:	9301      	str	r3, [sp, #4]
 8016b8a:	6861      	ldr	r1, [r4, #4]
 8016b8c:	0038      	movs	r0, r7
 8016b8e:	f7ff fd72 	bl	8016676 <_Balloc>
 8016b92:	002f      	movs	r7, r5
 8016b94:	2200      	movs	r2, #0
 8016b96:	9b01      	ldr	r3, [sp, #4]
 8016b98:	6926      	ldr	r6, [r4, #16]
 8016b9a:	60c3      	str	r3, [r0, #12]
 8016b9c:	3414      	adds	r4, #20
 8016b9e:	00b3      	lsls	r3, r6, #2
 8016ba0:	18e3      	adds	r3, r4, r3
 8016ba2:	9302      	str	r3, [sp, #8]
 8016ba4:	692b      	ldr	r3, [r5, #16]
 8016ba6:	3714      	adds	r7, #20
 8016ba8:	009b      	lsls	r3, r3, #2
 8016baa:	18fb      	adds	r3, r7, r3
 8016bac:	9303      	str	r3, [sp, #12]
 8016bae:	0003      	movs	r3, r0
 8016bb0:	4694      	mov	ip, r2
 8016bb2:	3314      	adds	r3, #20
 8016bb4:	cc20      	ldmia	r4!, {r5}
 8016bb6:	cf04      	ldmia	r7!, {r2}
 8016bb8:	9201      	str	r2, [sp, #4]
 8016bba:	b2aa      	uxth	r2, r5
 8016bbc:	4494      	add	ip, r2
 8016bbe:	466a      	mov	r2, sp
 8016bc0:	4661      	mov	r1, ip
 8016bc2:	8892      	ldrh	r2, [r2, #4]
 8016bc4:	0c2d      	lsrs	r5, r5, #16
 8016bc6:	1a8a      	subs	r2, r1, r2
 8016bc8:	9901      	ldr	r1, [sp, #4]
 8016bca:	0c09      	lsrs	r1, r1, #16
 8016bcc:	1a69      	subs	r1, r5, r1
 8016bce:	1415      	asrs	r5, r2, #16
 8016bd0:	1949      	adds	r1, r1, r5
 8016bd2:	140d      	asrs	r5, r1, #16
 8016bd4:	b292      	uxth	r2, r2
 8016bd6:	0409      	lsls	r1, r1, #16
 8016bd8:	430a      	orrs	r2, r1
 8016bda:	601a      	str	r2, [r3, #0]
 8016bdc:	9a03      	ldr	r2, [sp, #12]
 8016bde:	46ac      	mov	ip, r5
 8016be0:	3304      	adds	r3, #4
 8016be2:	42ba      	cmp	r2, r7
 8016be4:	d8e6      	bhi.n	8016bb4 <__mdiff+0x64>
 8016be6:	9902      	ldr	r1, [sp, #8]
 8016be8:	001a      	movs	r2, r3
 8016bea:	428c      	cmp	r4, r1
 8016bec:	d305      	bcc.n	8016bfa <__mdiff+0xaa>
 8016bee:	3a04      	subs	r2, #4
 8016bf0:	6813      	ldr	r3, [r2, #0]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d00e      	beq.n	8016c14 <__mdiff+0xc4>
 8016bf6:	6106      	str	r6, [r0, #16]
 8016bf8:	e7bc      	b.n	8016b74 <__mdiff+0x24>
 8016bfa:	cc04      	ldmia	r4!, {r2}
 8016bfc:	b291      	uxth	r1, r2
 8016bfe:	4461      	add	r1, ip
 8016c00:	140d      	asrs	r5, r1, #16
 8016c02:	0c12      	lsrs	r2, r2, #16
 8016c04:	1952      	adds	r2, r2, r5
 8016c06:	1415      	asrs	r5, r2, #16
 8016c08:	b289      	uxth	r1, r1
 8016c0a:	0412      	lsls	r2, r2, #16
 8016c0c:	430a      	orrs	r2, r1
 8016c0e:	46ac      	mov	ip, r5
 8016c10:	c304      	stmia	r3!, {r2}
 8016c12:	e7e8      	b.n	8016be6 <__mdiff+0x96>
 8016c14:	3e01      	subs	r6, #1
 8016c16:	e7ea      	b.n	8016bee <__mdiff+0x9e>

08016c18 <__ulp>:
 8016c18:	000b      	movs	r3, r1
 8016c1a:	4910      	ldr	r1, [pc, #64]	; (8016c5c <__ulp+0x44>)
 8016c1c:	b510      	push	{r4, lr}
 8016c1e:	4019      	ands	r1, r3
 8016c20:	4b0f      	ldr	r3, [pc, #60]	; (8016c60 <__ulp+0x48>)
 8016c22:	18c9      	adds	r1, r1, r3
 8016c24:	2900      	cmp	r1, #0
 8016c26:	dd04      	ble.n	8016c32 <__ulp+0x1a>
 8016c28:	2200      	movs	r2, #0
 8016c2a:	000b      	movs	r3, r1
 8016c2c:	0010      	movs	r0, r2
 8016c2e:	0019      	movs	r1, r3
 8016c30:	bd10      	pop	{r4, pc}
 8016c32:	4249      	negs	r1, r1
 8016c34:	1509      	asrs	r1, r1, #20
 8016c36:	2200      	movs	r2, #0
 8016c38:	2300      	movs	r3, #0
 8016c3a:	2913      	cmp	r1, #19
 8016c3c:	dc04      	bgt.n	8016c48 <__ulp+0x30>
 8016c3e:	2080      	movs	r0, #128	; 0x80
 8016c40:	0300      	lsls	r0, r0, #12
 8016c42:	4108      	asrs	r0, r1
 8016c44:	0003      	movs	r3, r0
 8016c46:	e7f1      	b.n	8016c2c <__ulp+0x14>
 8016c48:	3914      	subs	r1, #20
 8016c4a:	2001      	movs	r0, #1
 8016c4c:	291e      	cmp	r1, #30
 8016c4e:	dc02      	bgt.n	8016c56 <__ulp+0x3e>
 8016c50:	241f      	movs	r4, #31
 8016c52:	1a61      	subs	r1, r4, r1
 8016c54:	4088      	lsls	r0, r1
 8016c56:	0002      	movs	r2, r0
 8016c58:	e7e8      	b.n	8016c2c <__ulp+0x14>
 8016c5a:	46c0      	nop			; (mov r8, r8)
 8016c5c:	7ff00000 	.word	0x7ff00000
 8016c60:	fcc00000 	.word	0xfcc00000

08016c64 <__b2d>:
 8016c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016c66:	0006      	movs	r6, r0
 8016c68:	6903      	ldr	r3, [r0, #16]
 8016c6a:	3614      	adds	r6, #20
 8016c6c:	009b      	lsls	r3, r3, #2
 8016c6e:	18f3      	adds	r3, r6, r3
 8016c70:	1f1d      	subs	r5, r3, #4
 8016c72:	682c      	ldr	r4, [r5, #0]
 8016c74:	000f      	movs	r7, r1
 8016c76:	0020      	movs	r0, r4
 8016c78:	9301      	str	r3, [sp, #4]
 8016c7a:	f7ff fdc9 	bl	8016810 <__hi0bits>
 8016c7e:	2320      	movs	r3, #32
 8016c80:	1a1b      	subs	r3, r3, r0
 8016c82:	603b      	str	r3, [r7, #0]
 8016c84:	491c      	ldr	r1, [pc, #112]	; (8016cf8 <__b2d+0x94>)
 8016c86:	280a      	cmp	r0, #10
 8016c88:	dc16      	bgt.n	8016cb8 <__b2d+0x54>
 8016c8a:	230b      	movs	r3, #11
 8016c8c:	0027      	movs	r7, r4
 8016c8e:	1a1b      	subs	r3, r3, r0
 8016c90:	40df      	lsrs	r7, r3
 8016c92:	4339      	orrs	r1, r7
 8016c94:	469c      	mov	ip, r3
 8016c96:	000b      	movs	r3, r1
 8016c98:	2100      	movs	r1, #0
 8016c9a:	42ae      	cmp	r6, r5
 8016c9c:	d202      	bcs.n	8016ca4 <__b2d+0x40>
 8016c9e:	9901      	ldr	r1, [sp, #4]
 8016ca0:	3908      	subs	r1, #8
 8016ca2:	6809      	ldr	r1, [r1, #0]
 8016ca4:	3015      	adds	r0, #21
 8016ca6:	4084      	lsls	r4, r0
 8016ca8:	4660      	mov	r0, ip
 8016caa:	40c1      	lsrs	r1, r0
 8016cac:	430c      	orrs	r4, r1
 8016cae:	0022      	movs	r2, r4
 8016cb0:	0010      	movs	r0, r2
 8016cb2:	0019      	movs	r1, r3
 8016cb4:	b003      	add	sp, #12
 8016cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cb8:	2700      	movs	r7, #0
 8016cba:	42ae      	cmp	r6, r5
 8016cbc:	d202      	bcs.n	8016cc4 <__b2d+0x60>
 8016cbe:	9d01      	ldr	r5, [sp, #4]
 8016cc0:	3d08      	subs	r5, #8
 8016cc2:	682f      	ldr	r7, [r5, #0]
 8016cc4:	380b      	subs	r0, #11
 8016cc6:	4684      	mov	ip, r0
 8016cc8:	1e03      	subs	r3, r0, #0
 8016cca:	d012      	beq.n	8016cf2 <__b2d+0x8e>
 8016ccc:	409c      	lsls	r4, r3
 8016cce:	2020      	movs	r0, #32
 8016cd0:	4321      	orrs	r1, r4
 8016cd2:	003c      	movs	r4, r7
 8016cd4:	1ac0      	subs	r0, r0, r3
 8016cd6:	40c4      	lsrs	r4, r0
 8016cd8:	4321      	orrs	r1, r4
 8016cda:	000b      	movs	r3, r1
 8016cdc:	2100      	movs	r1, #0
 8016cde:	42b5      	cmp	r5, r6
 8016ce0:	d901      	bls.n	8016ce6 <__b2d+0x82>
 8016ce2:	3d04      	subs	r5, #4
 8016ce4:	6829      	ldr	r1, [r5, #0]
 8016ce6:	4664      	mov	r4, ip
 8016ce8:	40c1      	lsrs	r1, r0
 8016cea:	40a7      	lsls	r7, r4
 8016cec:	430f      	orrs	r7, r1
 8016cee:	003a      	movs	r2, r7
 8016cf0:	e7de      	b.n	8016cb0 <__b2d+0x4c>
 8016cf2:	4321      	orrs	r1, r4
 8016cf4:	000b      	movs	r3, r1
 8016cf6:	e7fa      	b.n	8016cee <__b2d+0x8a>
 8016cf8:	3ff00000 	.word	0x3ff00000

08016cfc <__d2b>:
 8016cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016cfe:	001d      	movs	r5, r3
 8016d00:	2101      	movs	r1, #1
 8016d02:	0014      	movs	r4, r2
 8016d04:	9f08      	ldr	r7, [sp, #32]
 8016d06:	f7ff fcb6 	bl	8016676 <_Balloc>
 8016d0a:	032b      	lsls	r3, r5, #12
 8016d0c:	006d      	lsls	r5, r5, #1
 8016d0e:	0006      	movs	r6, r0
 8016d10:	0b1b      	lsrs	r3, r3, #12
 8016d12:	0d6d      	lsrs	r5, r5, #21
 8016d14:	d124      	bne.n	8016d60 <__d2b+0x64>
 8016d16:	9301      	str	r3, [sp, #4]
 8016d18:	2c00      	cmp	r4, #0
 8016d1a:	d027      	beq.n	8016d6c <__d2b+0x70>
 8016d1c:	4668      	mov	r0, sp
 8016d1e:	9400      	str	r4, [sp, #0]
 8016d20:	f7ff fd90 	bl	8016844 <__lo0bits>
 8016d24:	9c00      	ldr	r4, [sp, #0]
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d01e      	beq.n	8016d68 <__d2b+0x6c>
 8016d2a:	9b01      	ldr	r3, [sp, #4]
 8016d2c:	2120      	movs	r1, #32
 8016d2e:	001a      	movs	r2, r3
 8016d30:	1a09      	subs	r1, r1, r0
 8016d32:	408a      	lsls	r2, r1
 8016d34:	40c3      	lsrs	r3, r0
 8016d36:	4322      	orrs	r2, r4
 8016d38:	6172      	str	r2, [r6, #20]
 8016d3a:	9301      	str	r3, [sp, #4]
 8016d3c:	9c01      	ldr	r4, [sp, #4]
 8016d3e:	61b4      	str	r4, [r6, #24]
 8016d40:	1e63      	subs	r3, r4, #1
 8016d42:	419c      	sbcs	r4, r3
 8016d44:	3401      	adds	r4, #1
 8016d46:	6134      	str	r4, [r6, #16]
 8016d48:	2d00      	cmp	r5, #0
 8016d4a:	d018      	beq.n	8016d7e <__d2b+0x82>
 8016d4c:	4b12      	ldr	r3, [pc, #72]	; (8016d98 <__d2b+0x9c>)
 8016d4e:	18ed      	adds	r5, r5, r3
 8016d50:	2335      	movs	r3, #53	; 0x35
 8016d52:	182d      	adds	r5, r5, r0
 8016d54:	603d      	str	r5, [r7, #0]
 8016d56:	1a18      	subs	r0, r3, r0
 8016d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d5a:	6018      	str	r0, [r3, #0]
 8016d5c:	0030      	movs	r0, r6
 8016d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016d60:	2280      	movs	r2, #128	; 0x80
 8016d62:	0352      	lsls	r2, r2, #13
 8016d64:	4313      	orrs	r3, r2
 8016d66:	e7d6      	b.n	8016d16 <__d2b+0x1a>
 8016d68:	6174      	str	r4, [r6, #20]
 8016d6a:	e7e7      	b.n	8016d3c <__d2b+0x40>
 8016d6c:	a801      	add	r0, sp, #4
 8016d6e:	f7ff fd69 	bl	8016844 <__lo0bits>
 8016d72:	2401      	movs	r4, #1
 8016d74:	9b01      	ldr	r3, [sp, #4]
 8016d76:	6134      	str	r4, [r6, #16]
 8016d78:	6173      	str	r3, [r6, #20]
 8016d7a:	3020      	adds	r0, #32
 8016d7c:	e7e4      	b.n	8016d48 <__d2b+0x4c>
 8016d7e:	4b07      	ldr	r3, [pc, #28]	; (8016d9c <__d2b+0xa0>)
 8016d80:	18c0      	adds	r0, r0, r3
 8016d82:	4b07      	ldr	r3, [pc, #28]	; (8016da0 <__d2b+0xa4>)
 8016d84:	6038      	str	r0, [r7, #0]
 8016d86:	18e3      	adds	r3, r4, r3
 8016d88:	009b      	lsls	r3, r3, #2
 8016d8a:	18f3      	adds	r3, r6, r3
 8016d8c:	6958      	ldr	r0, [r3, #20]
 8016d8e:	f7ff fd3f 	bl	8016810 <__hi0bits>
 8016d92:	0164      	lsls	r4, r4, #5
 8016d94:	1a20      	subs	r0, r4, r0
 8016d96:	e7df      	b.n	8016d58 <__d2b+0x5c>
 8016d98:	fffffbcd 	.word	0xfffffbcd
 8016d9c:	fffffbce 	.word	0xfffffbce
 8016da0:	3fffffff 	.word	0x3fffffff

08016da4 <__ratio>:
 8016da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016da6:	b085      	sub	sp, #20
 8016da8:	000f      	movs	r7, r1
 8016daa:	a902      	add	r1, sp, #8
 8016dac:	0006      	movs	r6, r0
 8016dae:	f7ff ff59 	bl	8016c64 <__b2d>
 8016db2:	0004      	movs	r4, r0
 8016db4:	000d      	movs	r5, r1
 8016db6:	0038      	movs	r0, r7
 8016db8:	a903      	add	r1, sp, #12
 8016dba:	9400      	str	r4, [sp, #0]
 8016dbc:	9501      	str	r5, [sp, #4]
 8016dbe:	f7ff ff51 	bl	8016c64 <__b2d>
 8016dc2:	6936      	ldr	r6, [r6, #16]
 8016dc4:	693f      	ldr	r7, [r7, #16]
 8016dc6:	0002      	movs	r2, r0
 8016dc8:	1bf7      	subs	r7, r6, r7
 8016dca:	017e      	lsls	r6, r7, #5
 8016dcc:	46b4      	mov	ip, r6
 8016dce:	9f03      	ldr	r7, [sp, #12]
 8016dd0:	9e02      	ldr	r6, [sp, #8]
 8016dd2:	000b      	movs	r3, r1
 8016dd4:	1bf6      	subs	r6, r6, r7
 8016dd6:	4466      	add	r6, ip
 8016dd8:	0537      	lsls	r7, r6, #20
 8016dda:	2e00      	cmp	r6, #0
 8016ddc:	dd07      	ble.n	8016dee <__ratio+0x4a>
 8016dde:	1979      	adds	r1, r7, r5
 8016de0:	9101      	str	r1, [sp, #4]
 8016de2:	9800      	ldr	r0, [sp, #0]
 8016de4:	9901      	ldr	r1, [sp, #4]
 8016de6:	f7ea fcc9 	bl	800177c <__aeabi_ddiv>
 8016dea:	b005      	add	sp, #20
 8016dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dee:	1bcb      	subs	r3, r1, r7
 8016df0:	e7f7      	b.n	8016de2 <__ratio+0x3e>

08016df2 <__copybits>:
 8016df2:	0013      	movs	r3, r2
 8016df4:	3901      	subs	r1, #1
 8016df6:	b510      	push	{r4, lr}
 8016df8:	1149      	asrs	r1, r1, #5
 8016dfa:	6912      	ldr	r2, [r2, #16]
 8016dfc:	3101      	adds	r1, #1
 8016dfe:	0089      	lsls	r1, r1, #2
 8016e00:	3314      	adds	r3, #20
 8016e02:	0092      	lsls	r2, r2, #2
 8016e04:	1841      	adds	r1, r0, r1
 8016e06:	189a      	adds	r2, r3, r2
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d803      	bhi.n	8016e14 <__copybits+0x22>
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	4281      	cmp	r1, r0
 8016e10:	d803      	bhi.n	8016e1a <__copybits+0x28>
 8016e12:	bd10      	pop	{r4, pc}
 8016e14:	cb10      	ldmia	r3!, {r4}
 8016e16:	c010      	stmia	r0!, {r4}
 8016e18:	e7f6      	b.n	8016e08 <__copybits+0x16>
 8016e1a:	c008      	stmia	r0!, {r3}
 8016e1c:	e7f7      	b.n	8016e0e <__copybits+0x1c>

08016e1e <__any_on>:
 8016e1e:	0002      	movs	r2, r0
 8016e20:	6900      	ldr	r0, [r0, #16]
 8016e22:	b510      	push	{r4, lr}
 8016e24:	3214      	adds	r2, #20
 8016e26:	114b      	asrs	r3, r1, #5
 8016e28:	4298      	cmp	r0, r3
 8016e2a:	db12      	blt.n	8016e52 <__any_on+0x34>
 8016e2c:	dd0b      	ble.n	8016e46 <__any_on+0x28>
 8016e2e:	201f      	movs	r0, #31
 8016e30:	4001      	ands	r1, r0
 8016e32:	d008      	beq.n	8016e46 <__any_on+0x28>
 8016e34:	0098      	lsls	r0, r3, #2
 8016e36:	5884      	ldr	r4, [r0, r2]
 8016e38:	0020      	movs	r0, r4
 8016e3a:	40c8      	lsrs	r0, r1
 8016e3c:	4088      	lsls	r0, r1
 8016e3e:	0001      	movs	r1, r0
 8016e40:	2001      	movs	r0, #1
 8016e42:	428c      	cmp	r4, r1
 8016e44:	d104      	bne.n	8016e50 <__any_on+0x32>
 8016e46:	009b      	lsls	r3, r3, #2
 8016e48:	18d3      	adds	r3, r2, r3
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d803      	bhi.n	8016e56 <__any_on+0x38>
 8016e4e:	2000      	movs	r0, #0
 8016e50:	bd10      	pop	{r4, pc}
 8016e52:	0003      	movs	r3, r0
 8016e54:	e7f7      	b.n	8016e46 <__any_on+0x28>
 8016e56:	3b04      	subs	r3, #4
 8016e58:	6819      	ldr	r1, [r3, #0]
 8016e5a:	2900      	cmp	r1, #0
 8016e5c:	d0f5      	beq.n	8016e4a <__any_on+0x2c>
 8016e5e:	2001      	movs	r0, #1
 8016e60:	e7f6      	b.n	8016e50 <__any_on+0x32>

08016e62 <_calloc_r>:
 8016e62:	434a      	muls	r2, r1
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	0011      	movs	r1, r2
 8016e68:	0014      	movs	r4, r2
 8016e6a:	f7fc fd61 	bl	8013930 <_malloc_r>
 8016e6e:	1e05      	subs	r5, r0, #0
 8016e70:	d003      	beq.n	8016e7a <_calloc_r+0x18>
 8016e72:	0022      	movs	r2, r4
 8016e74:	2100      	movs	r1, #0
 8016e76:	f7fc fd09 	bl	801388c <memset>
 8016e7a:	0028      	movs	r0, r5
 8016e7c:	bd70      	pop	{r4, r5, r6, pc}

08016e7e <_realloc_r>:
 8016e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e80:	0007      	movs	r7, r0
 8016e82:	000d      	movs	r5, r1
 8016e84:	0016      	movs	r6, r2
 8016e86:	2900      	cmp	r1, #0
 8016e88:	d105      	bne.n	8016e96 <_realloc_r+0x18>
 8016e8a:	0011      	movs	r1, r2
 8016e8c:	f7fc fd50 	bl	8013930 <_malloc_r>
 8016e90:	0004      	movs	r4, r0
 8016e92:	0020      	movs	r0, r4
 8016e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	d103      	bne.n	8016ea2 <_realloc_r+0x24>
 8016e9a:	f7fc fcff 	bl	801389c <_free_r>
 8016e9e:	0034      	movs	r4, r6
 8016ea0:	e7f7      	b.n	8016e92 <_realloc_r+0x14>
 8016ea2:	f000 f986 	bl	80171b2 <_malloc_usable_size_r>
 8016ea6:	002c      	movs	r4, r5
 8016ea8:	42b0      	cmp	r0, r6
 8016eaa:	d2f2      	bcs.n	8016e92 <_realloc_r+0x14>
 8016eac:	0031      	movs	r1, r6
 8016eae:	0038      	movs	r0, r7
 8016eb0:	f7fc fd3e 	bl	8013930 <_malloc_r>
 8016eb4:	1e04      	subs	r4, r0, #0
 8016eb6:	d0ec      	beq.n	8016e92 <_realloc_r+0x14>
 8016eb8:	0029      	movs	r1, r5
 8016eba:	0032      	movs	r2, r6
 8016ebc:	f7fc fcdd 	bl	801387a <memcpy>
 8016ec0:	0029      	movs	r1, r5
 8016ec2:	0038      	movs	r0, r7
 8016ec4:	f7fc fcea 	bl	801389c <_free_r>
 8016ec8:	e7e3      	b.n	8016e92 <_realloc_r+0x14>
	...

08016ecc <__ssputs_r>:
 8016ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ece:	688e      	ldr	r6, [r1, #8]
 8016ed0:	b085      	sub	sp, #20
 8016ed2:	0007      	movs	r7, r0
 8016ed4:	000c      	movs	r4, r1
 8016ed6:	9203      	str	r2, [sp, #12]
 8016ed8:	9301      	str	r3, [sp, #4]
 8016eda:	429e      	cmp	r6, r3
 8016edc:	d83c      	bhi.n	8016f58 <__ssputs_r+0x8c>
 8016ede:	2390      	movs	r3, #144	; 0x90
 8016ee0:	898a      	ldrh	r2, [r1, #12]
 8016ee2:	00db      	lsls	r3, r3, #3
 8016ee4:	421a      	tst	r2, r3
 8016ee6:	d034      	beq.n	8016f52 <__ssputs_r+0x86>
 8016ee8:	2503      	movs	r5, #3
 8016eea:	6909      	ldr	r1, [r1, #16]
 8016eec:	6823      	ldr	r3, [r4, #0]
 8016eee:	1a5b      	subs	r3, r3, r1
 8016ef0:	9302      	str	r3, [sp, #8]
 8016ef2:	6963      	ldr	r3, [r4, #20]
 8016ef4:	9802      	ldr	r0, [sp, #8]
 8016ef6:	435d      	muls	r5, r3
 8016ef8:	0feb      	lsrs	r3, r5, #31
 8016efa:	195d      	adds	r5, r3, r5
 8016efc:	9b01      	ldr	r3, [sp, #4]
 8016efe:	106d      	asrs	r5, r5, #1
 8016f00:	3301      	adds	r3, #1
 8016f02:	181b      	adds	r3, r3, r0
 8016f04:	42ab      	cmp	r3, r5
 8016f06:	d900      	bls.n	8016f0a <__ssputs_r+0x3e>
 8016f08:	001d      	movs	r5, r3
 8016f0a:	0553      	lsls	r3, r2, #21
 8016f0c:	d532      	bpl.n	8016f74 <__ssputs_r+0xa8>
 8016f0e:	0029      	movs	r1, r5
 8016f10:	0038      	movs	r0, r7
 8016f12:	f7fc fd0d 	bl	8013930 <_malloc_r>
 8016f16:	1e06      	subs	r6, r0, #0
 8016f18:	d109      	bne.n	8016f2e <__ssputs_r+0x62>
 8016f1a:	230c      	movs	r3, #12
 8016f1c:	603b      	str	r3, [r7, #0]
 8016f1e:	2340      	movs	r3, #64	; 0x40
 8016f20:	2001      	movs	r0, #1
 8016f22:	89a2      	ldrh	r2, [r4, #12]
 8016f24:	4240      	negs	r0, r0
 8016f26:	4313      	orrs	r3, r2
 8016f28:	81a3      	strh	r3, [r4, #12]
 8016f2a:	b005      	add	sp, #20
 8016f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f2e:	9a02      	ldr	r2, [sp, #8]
 8016f30:	6921      	ldr	r1, [r4, #16]
 8016f32:	f7fc fca2 	bl	801387a <memcpy>
 8016f36:	89a3      	ldrh	r3, [r4, #12]
 8016f38:	4a14      	ldr	r2, [pc, #80]	; (8016f8c <__ssputs_r+0xc0>)
 8016f3a:	401a      	ands	r2, r3
 8016f3c:	2380      	movs	r3, #128	; 0x80
 8016f3e:	4313      	orrs	r3, r2
 8016f40:	81a3      	strh	r3, [r4, #12]
 8016f42:	9b02      	ldr	r3, [sp, #8]
 8016f44:	6126      	str	r6, [r4, #16]
 8016f46:	18f6      	adds	r6, r6, r3
 8016f48:	6026      	str	r6, [r4, #0]
 8016f4a:	6165      	str	r5, [r4, #20]
 8016f4c:	9e01      	ldr	r6, [sp, #4]
 8016f4e:	1aed      	subs	r5, r5, r3
 8016f50:	60a5      	str	r5, [r4, #8]
 8016f52:	9b01      	ldr	r3, [sp, #4]
 8016f54:	429e      	cmp	r6, r3
 8016f56:	d900      	bls.n	8016f5a <__ssputs_r+0x8e>
 8016f58:	9e01      	ldr	r6, [sp, #4]
 8016f5a:	0032      	movs	r2, r6
 8016f5c:	9903      	ldr	r1, [sp, #12]
 8016f5e:	6820      	ldr	r0, [r4, #0]
 8016f60:	f000 f914 	bl	801718c <memmove>
 8016f64:	68a3      	ldr	r3, [r4, #8]
 8016f66:	2000      	movs	r0, #0
 8016f68:	1b9b      	subs	r3, r3, r6
 8016f6a:	60a3      	str	r3, [r4, #8]
 8016f6c:	6823      	ldr	r3, [r4, #0]
 8016f6e:	199e      	adds	r6, r3, r6
 8016f70:	6026      	str	r6, [r4, #0]
 8016f72:	e7da      	b.n	8016f2a <__ssputs_r+0x5e>
 8016f74:	002a      	movs	r2, r5
 8016f76:	0038      	movs	r0, r7
 8016f78:	f7ff ff81 	bl	8016e7e <_realloc_r>
 8016f7c:	1e06      	subs	r6, r0, #0
 8016f7e:	d1e0      	bne.n	8016f42 <__ssputs_r+0x76>
 8016f80:	6921      	ldr	r1, [r4, #16]
 8016f82:	0038      	movs	r0, r7
 8016f84:	f7fc fc8a 	bl	801389c <_free_r>
 8016f88:	e7c7      	b.n	8016f1a <__ssputs_r+0x4e>
 8016f8a:	46c0      	nop			; (mov r8, r8)
 8016f8c:	fffffb7f 	.word	0xfffffb7f

08016f90 <_svfiprintf_r>:
 8016f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f92:	b0a1      	sub	sp, #132	; 0x84
 8016f94:	9003      	str	r0, [sp, #12]
 8016f96:	001d      	movs	r5, r3
 8016f98:	898b      	ldrh	r3, [r1, #12]
 8016f9a:	000f      	movs	r7, r1
 8016f9c:	0016      	movs	r6, r2
 8016f9e:	061b      	lsls	r3, r3, #24
 8016fa0:	d511      	bpl.n	8016fc6 <_svfiprintf_r+0x36>
 8016fa2:	690b      	ldr	r3, [r1, #16]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d10e      	bne.n	8016fc6 <_svfiprintf_r+0x36>
 8016fa8:	2140      	movs	r1, #64	; 0x40
 8016faa:	f7fc fcc1 	bl	8013930 <_malloc_r>
 8016fae:	6038      	str	r0, [r7, #0]
 8016fb0:	6138      	str	r0, [r7, #16]
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d105      	bne.n	8016fc2 <_svfiprintf_r+0x32>
 8016fb6:	230c      	movs	r3, #12
 8016fb8:	9a03      	ldr	r2, [sp, #12]
 8016fba:	3801      	subs	r0, #1
 8016fbc:	6013      	str	r3, [r2, #0]
 8016fbe:	b021      	add	sp, #132	; 0x84
 8016fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fc2:	2340      	movs	r3, #64	; 0x40
 8016fc4:	617b      	str	r3, [r7, #20]
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	ac08      	add	r4, sp, #32
 8016fca:	6163      	str	r3, [r4, #20]
 8016fcc:	3320      	adds	r3, #32
 8016fce:	7663      	strb	r3, [r4, #25]
 8016fd0:	3310      	adds	r3, #16
 8016fd2:	76a3      	strb	r3, [r4, #26]
 8016fd4:	9507      	str	r5, [sp, #28]
 8016fd6:	0035      	movs	r5, r6
 8016fd8:	782b      	ldrb	r3, [r5, #0]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d001      	beq.n	8016fe2 <_svfiprintf_r+0x52>
 8016fde:	2b25      	cmp	r3, #37	; 0x25
 8016fe0:	d146      	bne.n	8017070 <_svfiprintf_r+0xe0>
 8016fe2:	1bab      	subs	r3, r5, r6
 8016fe4:	9305      	str	r3, [sp, #20]
 8016fe6:	d00c      	beq.n	8017002 <_svfiprintf_r+0x72>
 8016fe8:	0032      	movs	r2, r6
 8016fea:	0039      	movs	r1, r7
 8016fec:	9803      	ldr	r0, [sp, #12]
 8016fee:	f7ff ff6d 	bl	8016ecc <__ssputs_r>
 8016ff2:	1c43      	adds	r3, r0, #1
 8016ff4:	d100      	bne.n	8016ff8 <_svfiprintf_r+0x68>
 8016ff6:	e0ae      	b.n	8017156 <_svfiprintf_r+0x1c6>
 8016ff8:	6962      	ldr	r2, [r4, #20]
 8016ffa:	9b05      	ldr	r3, [sp, #20]
 8016ffc:	4694      	mov	ip, r2
 8016ffe:	4463      	add	r3, ip
 8017000:	6163      	str	r3, [r4, #20]
 8017002:	782b      	ldrb	r3, [r5, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d100      	bne.n	801700a <_svfiprintf_r+0x7a>
 8017008:	e0a5      	b.n	8017156 <_svfiprintf_r+0x1c6>
 801700a:	2201      	movs	r2, #1
 801700c:	2300      	movs	r3, #0
 801700e:	4252      	negs	r2, r2
 8017010:	6062      	str	r2, [r4, #4]
 8017012:	a904      	add	r1, sp, #16
 8017014:	3254      	adds	r2, #84	; 0x54
 8017016:	1852      	adds	r2, r2, r1
 8017018:	1c6e      	adds	r6, r5, #1
 801701a:	6023      	str	r3, [r4, #0]
 801701c:	60e3      	str	r3, [r4, #12]
 801701e:	60a3      	str	r3, [r4, #8]
 8017020:	7013      	strb	r3, [r2, #0]
 8017022:	65a3      	str	r3, [r4, #88]	; 0x58
 8017024:	7831      	ldrb	r1, [r6, #0]
 8017026:	2205      	movs	r2, #5
 8017028:	4853      	ldr	r0, [pc, #332]	; (8017178 <_svfiprintf_r+0x1e8>)
 801702a:	f7ff fb17 	bl	801665c <memchr>
 801702e:	1c75      	adds	r5, r6, #1
 8017030:	2800      	cmp	r0, #0
 8017032:	d11f      	bne.n	8017074 <_svfiprintf_r+0xe4>
 8017034:	6822      	ldr	r2, [r4, #0]
 8017036:	06d3      	lsls	r3, r2, #27
 8017038:	d504      	bpl.n	8017044 <_svfiprintf_r+0xb4>
 801703a:	2353      	movs	r3, #83	; 0x53
 801703c:	a904      	add	r1, sp, #16
 801703e:	185b      	adds	r3, r3, r1
 8017040:	2120      	movs	r1, #32
 8017042:	7019      	strb	r1, [r3, #0]
 8017044:	0713      	lsls	r3, r2, #28
 8017046:	d504      	bpl.n	8017052 <_svfiprintf_r+0xc2>
 8017048:	2353      	movs	r3, #83	; 0x53
 801704a:	a904      	add	r1, sp, #16
 801704c:	185b      	adds	r3, r3, r1
 801704e:	212b      	movs	r1, #43	; 0x2b
 8017050:	7019      	strb	r1, [r3, #0]
 8017052:	7833      	ldrb	r3, [r6, #0]
 8017054:	2b2a      	cmp	r3, #42	; 0x2a
 8017056:	d016      	beq.n	8017086 <_svfiprintf_r+0xf6>
 8017058:	0035      	movs	r5, r6
 801705a:	2100      	movs	r1, #0
 801705c:	200a      	movs	r0, #10
 801705e:	68e3      	ldr	r3, [r4, #12]
 8017060:	782a      	ldrb	r2, [r5, #0]
 8017062:	1c6e      	adds	r6, r5, #1
 8017064:	3a30      	subs	r2, #48	; 0x30
 8017066:	2a09      	cmp	r2, #9
 8017068:	d94e      	bls.n	8017108 <_svfiprintf_r+0x178>
 801706a:	2900      	cmp	r1, #0
 801706c:	d018      	beq.n	80170a0 <_svfiprintf_r+0x110>
 801706e:	e010      	b.n	8017092 <_svfiprintf_r+0x102>
 8017070:	3501      	adds	r5, #1
 8017072:	e7b1      	b.n	8016fd8 <_svfiprintf_r+0x48>
 8017074:	4b40      	ldr	r3, [pc, #256]	; (8017178 <_svfiprintf_r+0x1e8>)
 8017076:	6822      	ldr	r2, [r4, #0]
 8017078:	1ac0      	subs	r0, r0, r3
 801707a:	2301      	movs	r3, #1
 801707c:	4083      	lsls	r3, r0
 801707e:	4313      	orrs	r3, r2
 8017080:	6023      	str	r3, [r4, #0]
 8017082:	002e      	movs	r6, r5
 8017084:	e7ce      	b.n	8017024 <_svfiprintf_r+0x94>
 8017086:	9b07      	ldr	r3, [sp, #28]
 8017088:	1d19      	adds	r1, r3, #4
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	9107      	str	r1, [sp, #28]
 801708e:	2b00      	cmp	r3, #0
 8017090:	db01      	blt.n	8017096 <_svfiprintf_r+0x106>
 8017092:	930b      	str	r3, [sp, #44]	; 0x2c
 8017094:	e004      	b.n	80170a0 <_svfiprintf_r+0x110>
 8017096:	425b      	negs	r3, r3
 8017098:	60e3      	str	r3, [r4, #12]
 801709a:	2302      	movs	r3, #2
 801709c:	4313      	orrs	r3, r2
 801709e:	6023      	str	r3, [r4, #0]
 80170a0:	782b      	ldrb	r3, [r5, #0]
 80170a2:	2b2e      	cmp	r3, #46	; 0x2e
 80170a4:	d10a      	bne.n	80170bc <_svfiprintf_r+0x12c>
 80170a6:	786b      	ldrb	r3, [r5, #1]
 80170a8:	2b2a      	cmp	r3, #42	; 0x2a
 80170aa:	d135      	bne.n	8017118 <_svfiprintf_r+0x188>
 80170ac:	9b07      	ldr	r3, [sp, #28]
 80170ae:	3502      	adds	r5, #2
 80170b0:	1d1a      	adds	r2, r3, #4
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	9207      	str	r2, [sp, #28]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	db2b      	blt.n	8017112 <_svfiprintf_r+0x182>
 80170ba:	9309      	str	r3, [sp, #36]	; 0x24
 80170bc:	4e2f      	ldr	r6, [pc, #188]	; (801717c <_svfiprintf_r+0x1ec>)
 80170be:	7829      	ldrb	r1, [r5, #0]
 80170c0:	2203      	movs	r2, #3
 80170c2:	0030      	movs	r0, r6
 80170c4:	f7ff faca 	bl	801665c <memchr>
 80170c8:	2800      	cmp	r0, #0
 80170ca:	d006      	beq.n	80170da <_svfiprintf_r+0x14a>
 80170cc:	2340      	movs	r3, #64	; 0x40
 80170ce:	1b80      	subs	r0, r0, r6
 80170d0:	4083      	lsls	r3, r0
 80170d2:	6822      	ldr	r2, [r4, #0]
 80170d4:	3501      	adds	r5, #1
 80170d6:	4313      	orrs	r3, r2
 80170d8:	6023      	str	r3, [r4, #0]
 80170da:	7829      	ldrb	r1, [r5, #0]
 80170dc:	2206      	movs	r2, #6
 80170de:	4828      	ldr	r0, [pc, #160]	; (8017180 <_svfiprintf_r+0x1f0>)
 80170e0:	1c6e      	adds	r6, r5, #1
 80170e2:	7621      	strb	r1, [r4, #24]
 80170e4:	f7ff faba 	bl	801665c <memchr>
 80170e8:	2800      	cmp	r0, #0
 80170ea:	d03c      	beq.n	8017166 <_svfiprintf_r+0x1d6>
 80170ec:	4b25      	ldr	r3, [pc, #148]	; (8017184 <_svfiprintf_r+0x1f4>)
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d125      	bne.n	801713e <_svfiprintf_r+0x1ae>
 80170f2:	2207      	movs	r2, #7
 80170f4:	9b07      	ldr	r3, [sp, #28]
 80170f6:	3307      	adds	r3, #7
 80170f8:	4393      	bics	r3, r2
 80170fa:	3308      	adds	r3, #8
 80170fc:	9307      	str	r3, [sp, #28]
 80170fe:	6963      	ldr	r3, [r4, #20]
 8017100:	9a04      	ldr	r2, [sp, #16]
 8017102:	189b      	adds	r3, r3, r2
 8017104:	6163      	str	r3, [r4, #20]
 8017106:	e766      	b.n	8016fd6 <_svfiprintf_r+0x46>
 8017108:	4343      	muls	r3, r0
 801710a:	2101      	movs	r1, #1
 801710c:	189b      	adds	r3, r3, r2
 801710e:	0035      	movs	r5, r6
 8017110:	e7a6      	b.n	8017060 <_svfiprintf_r+0xd0>
 8017112:	2301      	movs	r3, #1
 8017114:	425b      	negs	r3, r3
 8017116:	e7d0      	b.n	80170ba <_svfiprintf_r+0x12a>
 8017118:	2300      	movs	r3, #0
 801711a:	200a      	movs	r0, #10
 801711c:	001a      	movs	r2, r3
 801711e:	3501      	adds	r5, #1
 8017120:	6063      	str	r3, [r4, #4]
 8017122:	7829      	ldrb	r1, [r5, #0]
 8017124:	1c6e      	adds	r6, r5, #1
 8017126:	3930      	subs	r1, #48	; 0x30
 8017128:	2909      	cmp	r1, #9
 801712a:	d903      	bls.n	8017134 <_svfiprintf_r+0x1a4>
 801712c:	2b00      	cmp	r3, #0
 801712e:	d0c5      	beq.n	80170bc <_svfiprintf_r+0x12c>
 8017130:	9209      	str	r2, [sp, #36]	; 0x24
 8017132:	e7c3      	b.n	80170bc <_svfiprintf_r+0x12c>
 8017134:	4342      	muls	r2, r0
 8017136:	2301      	movs	r3, #1
 8017138:	1852      	adds	r2, r2, r1
 801713a:	0035      	movs	r5, r6
 801713c:	e7f1      	b.n	8017122 <_svfiprintf_r+0x192>
 801713e:	ab07      	add	r3, sp, #28
 8017140:	9300      	str	r3, [sp, #0]
 8017142:	003a      	movs	r2, r7
 8017144:	4b10      	ldr	r3, [pc, #64]	; (8017188 <_svfiprintf_r+0x1f8>)
 8017146:	0021      	movs	r1, r4
 8017148:	9803      	ldr	r0, [sp, #12]
 801714a:	f7fc fceb 	bl	8013b24 <_printf_float>
 801714e:	9004      	str	r0, [sp, #16]
 8017150:	9b04      	ldr	r3, [sp, #16]
 8017152:	3301      	adds	r3, #1
 8017154:	d1d3      	bne.n	80170fe <_svfiprintf_r+0x16e>
 8017156:	89bb      	ldrh	r3, [r7, #12]
 8017158:	980d      	ldr	r0, [sp, #52]	; 0x34
 801715a:	065b      	lsls	r3, r3, #25
 801715c:	d400      	bmi.n	8017160 <_svfiprintf_r+0x1d0>
 801715e:	e72e      	b.n	8016fbe <_svfiprintf_r+0x2e>
 8017160:	2001      	movs	r0, #1
 8017162:	4240      	negs	r0, r0
 8017164:	e72b      	b.n	8016fbe <_svfiprintf_r+0x2e>
 8017166:	ab07      	add	r3, sp, #28
 8017168:	9300      	str	r3, [sp, #0]
 801716a:	003a      	movs	r2, r7
 801716c:	4b06      	ldr	r3, [pc, #24]	; (8017188 <_svfiprintf_r+0x1f8>)
 801716e:	0021      	movs	r1, r4
 8017170:	9803      	ldr	r0, [sp, #12]
 8017172:	f7fc ff91 	bl	8014098 <_printf_i>
 8017176:	e7ea      	b.n	801714e <_svfiprintf_r+0x1be>
 8017178:	0801a514 	.word	0x0801a514
 801717c:	0801a51a 	.word	0x0801a51a
 8017180:	0801a51e 	.word	0x0801a51e
 8017184:	08013b25 	.word	0x08013b25
 8017188:	08016ecd 	.word	0x08016ecd

0801718c <memmove>:
 801718c:	b510      	push	{r4, lr}
 801718e:	4288      	cmp	r0, r1
 8017190:	d902      	bls.n	8017198 <memmove+0xc>
 8017192:	188b      	adds	r3, r1, r2
 8017194:	4298      	cmp	r0, r3
 8017196:	d303      	bcc.n	80171a0 <memmove+0x14>
 8017198:	2300      	movs	r3, #0
 801719a:	e007      	b.n	80171ac <memmove+0x20>
 801719c:	5c8b      	ldrb	r3, [r1, r2]
 801719e:	5483      	strb	r3, [r0, r2]
 80171a0:	3a01      	subs	r2, #1
 80171a2:	d2fb      	bcs.n	801719c <memmove+0x10>
 80171a4:	bd10      	pop	{r4, pc}
 80171a6:	5ccc      	ldrb	r4, [r1, r3]
 80171a8:	54c4      	strb	r4, [r0, r3]
 80171aa:	3301      	adds	r3, #1
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d1fa      	bne.n	80171a6 <memmove+0x1a>
 80171b0:	e7f8      	b.n	80171a4 <memmove+0x18>

080171b2 <_malloc_usable_size_r>:
 80171b2:	1f0b      	subs	r3, r1, #4
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	1f18      	subs	r0, r3, #4
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	da01      	bge.n	80171c0 <_malloc_usable_size_r+0xe>
 80171bc:	580b      	ldr	r3, [r1, r0]
 80171be:	18c0      	adds	r0, r0, r3
 80171c0:	4770      	bx	lr
	...

080171c4 <_sbrk>:
 80171c4:	4b05      	ldr	r3, [pc, #20]	; (80171dc <_sbrk+0x18>)
 80171c6:	0002      	movs	r2, r0
 80171c8:	6819      	ldr	r1, [r3, #0]
 80171ca:	2900      	cmp	r1, #0
 80171cc:	d101      	bne.n	80171d2 <_sbrk+0xe>
 80171ce:	4904      	ldr	r1, [pc, #16]	; (80171e0 <_sbrk+0x1c>)
 80171d0:	6019      	str	r1, [r3, #0]
 80171d2:	6818      	ldr	r0, [r3, #0]
 80171d4:	1882      	adds	r2, r0, r2
 80171d6:	601a      	str	r2, [r3, #0]
 80171d8:	4770      	bx	lr
 80171da:	46c0      	nop			; (mov r8, r8)
 80171dc:	200061e8 	.word	0x200061e8
 80171e0:	200067d8 	.word	0x200067d8

080171e4 <_init>:
 80171e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171e6:	46c0      	nop			; (mov r8, r8)
 80171e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171ea:	bc08      	pop	{r3}
 80171ec:	469e      	mov	lr, r3
 80171ee:	4770      	bx	lr

080171f0 <_fini>:
 80171f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f2:	46c0      	nop			; (mov r8, r8)
 80171f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80171f6:	bc08      	pop	{r3}
 80171f8:	469e      	mov	lr, r3
 80171fa:	4770      	bx	lr
