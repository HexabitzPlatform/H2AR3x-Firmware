
H2AR3x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001791c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035f8  080179d8  080179d8  000279d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afd0  0801afd0  000302f4  2**0
                  CONTENTS
  4 .ARM          00000000  0801afd0  0801afd0  000302f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801afd0  0801afd0  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afd0  0801afd0  0002afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801afd4  0801afd4  0002afd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000000c  20000000  0801afd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000002e8  2000000c  0801afe4  0003000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000059d0  200002f8  0801b2cc  000302f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005cc8  0801b2cc  00035cc8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005b6e2  00000000  00000000  0003031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008d62  00000000  00000000  0008b9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001d79a  00000000  00000000  00094760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e70  00000000  00000000  000b1f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ff0  00000000  00000000  000b3d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b42f  00000000  00000000  000b5d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039922  00000000  00000000  000d118f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00083f5a  00000000  00000000  0010aab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0018ea0b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006e68  00000000  00000000  0018ea60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .stab         000000cc  00000000  00000000  001958c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .stabstr      000001b9  00000000  00000000  00195994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200002f8 	.word	0x200002f8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080179c0 	.word	0x080179c0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200002fc 	.word	0x200002fc
 8000100:	080179c0 	.word	0x080179c0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc23 	bl	8001c98 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fb6d 	bl	8001b3c <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc15 	bl	8001c98 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc0b 	bl	8001c98 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fb8f 	bl	8001bb4 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fb85 	bl	8001bb4 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f961 	bl	8000788 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f8e5 	bl	80006a0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f953 	bl	8000788 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f949 	bl	8000788 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f8f3 	bl	80006f0 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f8e9 	bl	80006f0 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ulcmp>:
 800052c:	4299      	cmp	r1, r3
 800052e:	d101      	bne.n	8000534 <__aeabi_ulcmp+0x8>
 8000530:	1a80      	subs	r0, r0, r2
 8000532:	d004      	beq.n	800053e <__aeabi_ulcmp+0x12>
 8000534:	d202      	bcs.n	800053c <__aeabi_ulcmp+0x10>
 8000536:	2001      	movs	r0, #1
 8000538:	4240      	negs	r0, r0
 800053a:	4770      	bx	lr
 800053c:	2001      	movs	r0, #1
 800053e:	4770      	bx	lr

08000540 <__aeabi_lmul>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	0415      	lsls	r5, r2, #16
 8000544:	0c2d      	lsrs	r5, r5, #16
 8000546:	000f      	movs	r7, r1
 8000548:	0001      	movs	r1, r0
 800054a:	002e      	movs	r6, r5
 800054c:	46c6      	mov	lr, r8
 800054e:	4684      	mov	ip, r0
 8000550:	0400      	lsls	r0, r0, #16
 8000552:	0c14      	lsrs	r4, r2, #16
 8000554:	0c00      	lsrs	r0, r0, #16
 8000556:	0c09      	lsrs	r1, r1, #16
 8000558:	4346      	muls	r6, r0
 800055a:	434d      	muls	r5, r1
 800055c:	4360      	muls	r0, r4
 800055e:	4361      	muls	r1, r4
 8000560:	1940      	adds	r0, r0, r5
 8000562:	0c34      	lsrs	r4, r6, #16
 8000564:	1824      	adds	r4, r4, r0
 8000566:	b500      	push	{lr}
 8000568:	42a5      	cmp	r5, r4
 800056a:	d903      	bls.n	8000574 <__aeabi_lmul+0x34>
 800056c:	2080      	movs	r0, #128	; 0x80
 800056e:	0240      	lsls	r0, r0, #9
 8000570:	4680      	mov	r8, r0
 8000572:	4441      	add	r1, r8
 8000574:	0c25      	lsrs	r5, r4, #16
 8000576:	186d      	adds	r5, r5, r1
 8000578:	4661      	mov	r1, ip
 800057a:	4359      	muls	r1, r3
 800057c:	437a      	muls	r2, r7
 800057e:	0430      	lsls	r0, r6, #16
 8000580:	1949      	adds	r1, r1, r5
 8000582:	0424      	lsls	r4, r4, #16
 8000584:	0c00      	lsrs	r0, r0, #16
 8000586:	1820      	adds	r0, r4, r0
 8000588:	1889      	adds	r1, r1, r2
 800058a:	bc80      	pop	{r7}
 800058c:	46b8      	mov	r8, r7
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000590 <__aeabi_f2uiz>:
 8000590:	219e      	movs	r1, #158	; 0x9e
 8000592:	b510      	push	{r4, lr}
 8000594:	05c9      	lsls	r1, r1, #23
 8000596:	1c04      	adds	r4, r0, #0
 8000598:	f7ff ffbe 	bl	8000518 <__aeabi_fcmpge>
 800059c:	2800      	cmp	r0, #0
 800059e:	d103      	bne.n	80005a8 <__aeabi_f2uiz+0x18>
 80005a0:	1c20      	adds	r0, r4, #0
 80005a2:	f000 fc1d 	bl	8000de0 <__aeabi_f2iz>
 80005a6:	bd10      	pop	{r4, pc}
 80005a8:	219e      	movs	r1, #158	; 0x9e
 80005aa:	1c20      	adds	r0, r4, #0
 80005ac:	05c9      	lsls	r1, r1, #23
 80005ae:	f000 fa4f 	bl	8000a50 <__aeabi_fsub>
 80005b2:	f000 fc15 	bl	8000de0 <__aeabi_f2iz>
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	061b      	lsls	r3, r3, #24
 80005ba:	469c      	mov	ip, r3
 80005bc:	4460      	add	r0, ip
 80005be:	e7f2      	b.n	80005a6 <__aeabi_f2uiz+0x16>

080005c0 <__aeabi_d2uiz>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	2200      	movs	r2, #0
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <__aeabi_d2uiz+0x38>)
 80005c6:	0004      	movs	r4, r0
 80005c8:	000d      	movs	r5, r1
 80005ca:	f7ff ff6b 	bl	80004a4 <__aeabi_dcmpge>
 80005ce:	2800      	cmp	r0, #0
 80005d0:	d104      	bne.n	80005dc <__aeabi_d2uiz+0x1c>
 80005d2:	0020      	movs	r0, r4
 80005d4:	0029      	movs	r1, r5
 80005d6:	f002 f9eb 	bl	80029b0 <__aeabi_d2iz>
 80005da:	bd70      	pop	{r4, r5, r6, pc}
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_d2uiz+0x38>)
 80005de:	2200      	movs	r2, #0
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fe34 	bl	8002250 <__aeabi_dsub>
 80005e8:	f002 f9e2 	bl	80029b0 <__aeabi_d2iz>
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	061b      	lsls	r3, r3, #24
 80005f0:	469c      	mov	ip, r3
 80005f2:	4460      	add	r0, ip
 80005f4:	e7f1      	b.n	80005da <__aeabi_d2uiz+0x1a>
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41e00000 	.word	0x41e00000

080005fc <__aeabi_d2lz>:
 80005fc:	b570      	push	{r4, r5, r6, lr}
 80005fe:	0005      	movs	r5, r0
 8000600:	000c      	movs	r4, r1
 8000602:	2200      	movs	r2, #0
 8000604:	2300      	movs	r3, #0
 8000606:	0028      	movs	r0, r5
 8000608:	0021      	movs	r1, r4
 800060a:	f7ff ff2d 	bl	8000468 <__aeabi_dcmplt>
 800060e:	2800      	cmp	r0, #0
 8000610:	d108      	bne.n	8000624 <__aeabi_d2lz+0x28>
 8000612:	0028      	movs	r0, r5
 8000614:	0021      	movs	r1, r4
 8000616:	f000 f80f 	bl	8000638 <__aeabi_d2ulz>
 800061a:	0002      	movs	r2, r0
 800061c:	000b      	movs	r3, r1
 800061e:	0010      	movs	r0, r2
 8000620:	0019      	movs	r1, r3
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	061b      	lsls	r3, r3, #24
 8000628:	18e1      	adds	r1, r4, r3
 800062a:	0028      	movs	r0, r5
 800062c:	f000 f804 	bl	8000638 <__aeabi_d2ulz>
 8000630:	2300      	movs	r3, #0
 8000632:	4242      	negs	r2, r0
 8000634:	418b      	sbcs	r3, r1
 8000636:	e7f2      	b.n	800061e <__aeabi_d2lz+0x22>

08000638 <__aeabi_d2ulz>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	2200      	movs	r2, #0
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <__aeabi_d2ulz+0x34>)
 800063e:	000d      	movs	r5, r1
 8000640:	0004      	movs	r4, r0
 8000642:	f001 fb99 	bl	8001d78 <__aeabi_dmul>
 8000646:	f7ff ffbb 	bl	80005c0 <__aeabi_d2uiz>
 800064a:	0006      	movs	r6, r0
 800064c:	f002 fa16 	bl	8002a7c <__aeabi_ui2d>
 8000650:	2200      	movs	r2, #0
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <__aeabi_d2ulz+0x38>)
 8000654:	f001 fb90 	bl	8001d78 <__aeabi_dmul>
 8000658:	0002      	movs	r2, r0
 800065a:	000b      	movs	r3, r1
 800065c:	0020      	movs	r0, r4
 800065e:	0029      	movs	r1, r5
 8000660:	f001 fdf6 	bl	8002250 <__aeabi_dsub>
 8000664:	f7ff ffac 	bl	80005c0 <__aeabi_d2uiz>
 8000668:	0031      	movs	r1, r6
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	3df00000 	.word	0x3df00000
 8000670:	41f00000 	.word	0x41f00000

08000674 <__aeabi_l2d>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	0006      	movs	r6, r0
 8000678:	0008      	movs	r0, r1
 800067a:	f002 f9cf 	bl	8002a1c <__aeabi_i2d>
 800067e:	2200      	movs	r2, #0
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <__aeabi_l2d+0x28>)
 8000682:	f001 fb79 	bl	8001d78 <__aeabi_dmul>
 8000686:	000d      	movs	r5, r1
 8000688:	0004      	movs	r4, r0
 800068a:	0030      	movs	r0, r6
 800068c:	f002 f9f6 	bl	8002a7c <__aeabi_ui2d>
 8000690:	002b      	movs	r3, r5
 8000692:	0022      	movs	r2, r4
 8000694:	f000 fc00 	bl	8000e98 <__aeabi_dadd>
 8000698:	bd70      	pop	{r4, r5, r6, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	41f00000 	.word	0x41f00000

080006a0 <__eqsf2>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	0042      	lsls	r2, r0, #1
 80006a4:	024e      	lsls	r6, r1, #9
 80006a6:	004c      	lsls	r4, r1, #1
 80006a8:	0245      	lsls	r5, r0, #9
 80006aa:	0a6d      	lsrs	r5, r5, #9
 80006ac:	0e12      	lsrs	r2, r2, #24
 80006ae:	0fc3      	lsrs	r3, r0, #31
 80006b0:	0a76      	lsrs	r6, r6, #9
 80006b2:	0e24      	lsrs	r4, r4, #24
 80006b4:	0fc9      	lsrs	r1, r1, #31
 80006b6:	2aff      	cmp	r2, #255	; 0xff
 80006b8:	d00f      	beq.n	80006da <__eqsf2+0x3a>
 80006ba:	2cff      	cmp	r4, #255	; 0xff
 80006bc:	d011      	beq.n	80006e2 <__eqsf2+0x42>
 80006be:	2001      	movs	r0, #1
 80006c0:	42a2      	cmp	r2, r4
 80006c2:	d000      	beq.n	80006c6 <__eqsf2+0x26>
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	42b5      	cmp	r5, r6
 80006c8:	d1fc      	bne.n	80006c4 <__eqsf2+0x24>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d00d      	beq.n	80006ea <__eqsf2+0x4a>
 80006ce:	2a00      	cmp	r2, #0
 80006d0:	d1f8      	bne.n	80006c4 <__eqsf2+0x24>
 80006d2:	0028      	movs	r0, r5
 80006d4:	1e45      	subs	r5, r0, #1
 80006d6:	41a8      	sbcs	r0, r5
 80006d8:	e7f4      	b.n	80006c4 <__eqsf2+0x24>
 80006da:	2001      	movs	r0, #1
 80006dc:	2d00      	cmp	r5, #0
 80006de:	d1f1      	bne.n	80006c4 <__eqsf2+0x24>
 80006e0:	e7eb      	b.n	80006ba <__eqsf2+0x1a>
 80006e2:	2001      	movs	r0, #1
 80006e4:	2e00      	cmp	r6, #0
 80006e6:	d1ed      	bne.n	80006c4 <__eqsf2+0x24>
 80006e8:	e7e9      	b.n	80006be <__eqsf2+0x1e>
 80006ea:	2000      	movs	r0, #0
 80006ec:	e7ea      	b.n	80006c4 <__eqsf2+0x24>
 80006ee:	46c0      	nop			; (mov r8, r8)

080006f0 <__gesf2>:
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f2:	0042      	lsls	r2, r0, #1
 80006f4:	0246      	lsls	r6, r0, #9
 80006f6:	024d      	lsls	r5, r1, #9
 80006f8:	004c      	lsls	r4, r1, #1
 80006fa:	0fc3      	lsrs	r3, r0, #31
 80006fc:	0a76      	lsrs	r6, r6, #9
 80006fe:	0e12      	lsrs	r2, r2, #24
 8000700:	0a6d      	lsrs	r5, r5, #9
 8000702:	0e24      	lsrs	r4, r4, #24
 8000704:	0fc8      	lsrs	r0, r1, #31
 8000706:	2aff      	cmp	r2, #255	; 0xff
 8000708:	d01f      	beq.n	800074a <__gesf2+0x5a>
 800070a:	2cff      	cmp	r4, #255	; 0xff
 800070c:	d010      	beq.n	8000730 <__gesf2+0x40>
 800070e:	2a00      	cmp	r2, #0
 8000710:	d11f      	bne.n	8000752 <__gesf2+0x62>
 8000712:	4271      	negs	r1, r6
 8000714:	4171      	adcs	r1, r6
 8000716:	2c00      	cmp	r4, #0
 8000718:	d101      	bne.n	800071e <__gesf2+0x2e>
 800071a:	2d00      	cmp	r5, #0
 800071c:	d01e      	beq.n	800075c <__gesf2+0x6c>
 800071e:	2900      	cmp	r1, #0
 8000720:	d10e      	bne.n	8000740 <__gesf2+0x50>
 8000722:	4283      	cmp	r3, r0
 8000724:	d01e      	beq.n	8000764 <__gesf2+0x74>
 8000726:	2102      	movs	r1, #2
 8000728:	1e58      	subs	r0, r3, #1
 800072a:	4008      	ands	r0, r1
 800072c:	3801      	subs	r0, #1
 800072e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000730:	2d00      	cmp	r5, #0
 8000732:	d126      	bne.n	8000782 <__gesf2+0x92>
 8000734:	2a00      	cmp	r2, #0
 8000736:	d1f4      	bne.n	8000722 <__gesf2+0x32>
 8000738:	4271      	negs	r1, r6
 800073a:	4171      	adcs	r1, r6
 800073c:	2900      	cmp	r1, #0
 800073e:	d0f0      	beq.n	8000722 <__gesf2+0x32>
 8000740:	2800      	cmp	r0, #0
 8000742:	d1f4      	bne.n	800072e <__gesf2+0x3e>
 8000744:	2001      	movs	r0, #1
 8000746:	4240      	negs	r0, r0
 8000748:	e7f1      	b.n	800072e <__gesf2+0x3e>
 800074a:	2e00      	cmp	r6, #0
 800074c:	d119      	bne.n	8000782 <__gesf2+0x92>
 800074e:	2cff      	cmp	r4, #255	; 0xff
 8000750:	d0ee      	beq.n	8000730 <__gesf2+0x40>
 8000752:	2c00      	cmp	r4, #0
 8000754:	d1e5      	bne.n	8000722 <__gesf2+0x32>
 8000756:	2d00      	cmp	r5, #0
 8000758:	d1e3      	bne.n	8000722 <__gesf2+0x32>
 800075a:	e7e4      	b.n	8000726 <__gesf2+0x36>
 800075c:	2000      	movs	r0, #0
 800075e:	2e00      	cmp	r6, #0
 8000760:	d0e5      	beq.n	800072e <__gesf2+0x3e>
 8000762:	e7e0      	b.n	8000726 <__gesf2+0x36>
 8000764:	42a2      	cmp	r2, r4
 8000766:	dc05      	bgt.n	8000774 <__gesf2+0x84>
 8000768:	dbea      	blt.n	8000740 <__gesf2+0x50>
 800076a:	42ae      	cmp	r6, r5
 800076c:	d802      	bhi.n	8000774 <__gesf2+0x84>
 800076e:	d3e7      	bcc.n	8000740 <__gesf2+0x50>
 8000770:	2000      	movs	r0, #0
 8000772:	e7dc      	b.n	800072e <__gesf2+0x3e>
 8000774:	4241      	negs	r1, r0
 8000776:	4141      	adcs	r1, r0
 8000778:	4248      	negs	r0, r1
 800077a:	2102      	movs	r1, #2
 800077c:	4008      	ands	r0, r1
 800077e:	3801      	subs	r0, #1
 8000780:	e7d5      	b.n	800072e <__gesf2+0x3e>
 8000782:	2002      	movs	r0, #2
 8000784:	4240      	negs	r0, r0
 8000786:	e7d2      	b.n	800072e <__gesf2+0x3e>

08000788 <__lesf2>:
 8000788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078a:	0042      	lsls	r2, r0, #1
 800078c:	0246      	lsls	r6, r0, #9
 800078e:	024d      	lsls	r5, r1, #9
 8000790:	004c      	lsls	r4, r1, #1
 8000792:	0fc3      	lsrs	r3, r0, #31
 8000794:	0a76      	lsrs	r6, r6, #9
 8000796:	0e12      	lsrs	r2, r2, #24
 8000798:	0a6d      	lsrs	r5, r5, #9
 800079a:	0e24      	lsrs	r4, r4, #24
 800079c:	0fc8      	lsrs	r0, r1, #31
 800079e:	2aff      	cmp	r2, #255	; 0xff
 80007a0:	d00d      	beq.n	80007be <__lesf2+0x36>
 80007a2:	2cff      	cmp	r4, #255	; 0xff
 80007a4:	d00f      	beq.n	80007c6 <__lesf2+0x3e>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d123      	bne.n	80007f2 <__lesf2+0x6a>
 80007aa:	4271      	negs	r1, r6
 80007ac:	4171      	adcs	r1, r6
 80007ae:	2c00      	cmp	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__lesf2+0x4a>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d10d      	bne.n	80007d2 <__lesf2+0x4a>
 80007b6:	2000      	movs	r0, #0
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	d014      	beq.n	80007e6 <__lesf2+0x5e>
 80007bc:	e00d      	b.n	80007da <__lesf2+0x52>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d110      	bne.n	80007e4 <__lesf2+0x5c>
 80007c2:	2cff      	cmp	r4, #255	; 0xff
 80007c4:	d115      	bne.n	80007f2 <__lesf2+0x6a>
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d10c      	bne.n	80007e4 <__lesf2+0x5c>
 80007ca:	2a00      	cmp	r2, #0
 80007cc:	d103      	bne.n	80007d6 <__lesf2+0x4e>
 80007ce:	4271      	negs	r1, r6
 80007d0:	4171      	adcs	r1, r6
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d108      	bne.n	80007e8 <__lesf2+0x60>
 80007d6:	4283      	cmp	r3, r0
 80007d8:	d010      	beq.n	80007fc <__lesf2+0x74>
 80007da:	2102      	movs	r1, #2
 80007dc:	1e58      	subs	r0, r3, #1
 80007de:	4008      	ands	r0, r1
 80007e0:	3801      	subs	r0, #1
 80007e2:	e000      	b.n	80007e6 <__lesf2+0x5e>
 80007e4:	2002      	movs	r0, #2
 80007e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d1fc      	bne.n	80007e6 <__lesf2+0x5e>
 80007ec:	2001      	movs	r0, #1
 80007ee:	4240      	negs	r0, r0
 80007f0:	e7f9      	b.n	80007e6 <__lesf2+0x5e>
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	d1ef      	bne.n	80007d6 <__lesf2+0x4e>
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	d1ed      	bne.n	80007d6 <__lesf2+0x4e>
 80007fa:	e7ee      	b.n	80007da <__lesf2+0x52>
 80007fc:	42a2      	cmp	r2, r4
 80007fe:	dc05      	bgt.n	800080c <__lesf2+0x84>
 8000800:	dbf2      	blt.n	80007e8 <__lesf2+0x60>
 8000802:	42ae      	cmp	r6, r5
 8000804:	d802      	bhi.n	800080c <__lesf2+0x84>
 8000806:	d3ef      	bcc.n	80007e8 <__lesf2+0x60>
 8000808:	2000      	movs	r0, #0
 800080a:	e7ec      	b.n	80007e6 <__lesf2+0x5e>
 800080c:	4241      	negs	r1, r0
 800080e:	4141      	adcs	r1, r0
 8000810:	4248      	negs	r0, r1
 8000812:	2102      	movs	r1, #2
 8000814:	4008      	ands	r0, r1
 8000816:	3801      	subs	r0, #1
 8000818:	e7e5      	b.n	80007e6 <__lesf2+0x5e>
 800081a:	46c0      	nop			; (mov r8, r8)

0800081c <__aeabi_fmul>:
 800081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800081e:	4657      	mov	r7, sl
 8000820:	464e      	mov	r6, r9
 8000822:	4645      	mov	r5, r8
 8000824:	46de      	mov	lr, fp
 8000826:	0244      	lsls	r4, r0, #9
 8000828:	b5e0      	push	{r5, r6, r7, lr}
 800082a:	0045      	lsls	r5, r0, #1
 800082c:	1c0f      	adds	r7, r1, #0
 800082e:	0a64      	lsrs	r4, r4, #9
 8000830:	0e2d      	lsrs	r5, r5, #24
 8000832:	0fc6      	lsrs	r6, r0, #31
 8000834:	2d00      	cmp	r5, #0
 8000836:	d047      	beq.n	80008c8 <__aeabi_fmul+0xac>
 8000838:	2dff      	cmp	r5, #255	; 0xff
 800083a:	d04d      	beq.n	80008d8 <__aeabi_fmul+0xbc>
 800083c:	2300      	movs	r3, #0
 800083e:	2080      	movs	r0, #128	; 0x80
 8000840:	469a      	mov	sl, r3
 8000842:	469b      	mov	fp, r3
 8000844:	00e4      	lsls	r4, r4, #3
 8000846:	04c0      	lsls	r0, r0, #19
 8000848:	4304      	orrs	r4, r0
 800084a:	3d7f      	subs	r5, #127	; 0x7f
 800084c:	0278      	lsls	r0, r7, #9
 800084e:	0a43      	lsrs	r3, r0, #9
 8000850:	4699      	mov	r9, r3
 8000852:	007a      	lsls	r2, r7, #1
 8000854:	0ffb      	lsrs	r3, r7, #31
 8000856:	4698      	mov	r8, r3
 8000858:	0e12      	lsrs	r2, r2, #24
 800085a:	464b      	mov	r3, r9
 800085c:	d044      	beq.n	80008e8 <__aeabi_fmul+0xcc>
 800085e:	2aff      	cmp	r2, #255	; 0xff
 8000860:	d011      	beq.n	8000886 <__aeabi_fmul+0x6a>
 8000862:	00d8      	lsls	r0, r3, #3
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	04db      	lsls	r3, r3, #19
 8000868:	4303      	orrs	r3, r0
 800086a:	4699      	mov	r9, r3
 800086c:	2000      	movs	r0, #0
 800086e:	3a7f      	subs	r2, #127	; 0x7f
 8000870:	18ad      	adds	r5, r5, r2
 8000872:	4647      	mov	r7, r8
 8000874:	4653      	mov	r3, sl
 8000876:	4077      	eors	r7, r6
 8000878:	1c69      	adds	r1, r5, #1
 800087a:	2b0f      	cmp	r3, #15
 800087c:	d83f      	bhi.n	80008fe <__aeabi_fmul+0xe2>
 800087e:	4a72      	ldr	r2, [pc, #456]	; (8000a48 <__aeabi_fmul+0x22c>)
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	58d3      	ldr	r3, [r2, r3]
 8000884:	469f      	mov	pc, r3
 8000886:	35ff      	adds	r5, #255	; 0xff
 8000888:	2b00      	cmp	r3, #0
 800088a:	d000      	beq.n	800088e <__aeabi_fmul+0x72>
 800088c:	e079      	b.n	8000982 <__aeabi_fmul+0x166>
 800088e:	4652      	mov	r2, sl
 8000890:	2302      	movs	r3, #2
 8000892:	431a      	orrs	r2, r3
 8000894:	4692      	mov	sl, r2
 8000896:	2002      	movs	r0, #2
 8000898:	e7eb      	b.n	8000872 <__aeabi_fmul+0x56>
 800089a:	4647      	mov	r7, r8
 800089c:	464c      	mov	r4, r9
 800089e:	4683      	mov	fp, r0
 80008a0:	465b      	mov	r3, fp
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d028      	beq.n	80008f8 <__aeabi_fmul+0xdc>
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d100      	bne.n	80008ac <__aeabi_fmul+0x90>
 80008aa:	e0c6      	b.n	8000a3a <__aeabi_fmul+0x21e>
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d14f      	bne.n	8000950 <__aeabi_fmul+0x134>
 80008b0:	2000      	movs	r0, #0
 80008b2:	2400      	movs	r4, #0
 80008b4:	05c0      	lsls	r0, r0, #23
 80008b6:	07ff      	lsls	r7, r7, #31
 80008b8:	4320      	orrs	r0, r4
 80008ba:	4338      	orrs	r0, r7
 80008bc:	bcf0      	pop	{r4, r5, r6, r7}
 80008be:	46bb      	mov	fp, r7
 80008c0:	46b2      	mov	sl, r6
 80008c2:	46a9      	mov	r9, r5
 80008c4:	46a0      	mov	r8, r4
 80008c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008c8:	2c00      	cmp	r4, #0
 80008ca:	d171      	bne.n	80009b0 <__aeabi_fmul+0x194>
 80008cc:	2304      	movs	r3, #4
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b03      	subs	r3, #3
 80008d2:	2500      	movs	r5, #0
 80008d4:	469b      	mov	fp, r3
 80008d6:	e7b9      	b.n	800084c <__aeabi_fmul+0x30>
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d163      	bne.n	80009a4 <__aeabi_fmul+0x188>
 80008dc:	2308      	movs	r3, #8
 80008de:	469a      	mov	sl, r3
 80008e0:	3b06      	subs	r3, #6
 80008e2:	25ff      	movs	r5, #255	; 0xff
 80008e4:	469b      	mov	fp, r3
 80008e6:	e7b1      	b.n	800084c <__aeabi_fmul+0x30>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d150      	bne.n	800098e <__aeabi_fmul+0x172>
 80008ec:	4652      	mov	r2, sl
 80008ee:	3301      	adds	r3, #1
 80008f0:	431a      	orrs	r2, r3
 80008f2:	4692      	mov	sl, r2
 80008f4:	2001      	movs	r0, #1
 80008f6:	e7bc      	b.n	8000872 <__aeabi_fmul+0x56>
 80008f8:	20ff      	movs	r0, #255	; 0xff
 80008fa:	2400      	movs	r4, #0
 80008fc:	e7da      	b.n	80008b4 <__aeabi_fmul+0x98>
 80008fe:	4648      	mov	r0, r9
 8000900:	0c26      	lsrs	r6, r4, #16
 8000902:	0424      	lsls	r4, r4, #16
 8000904:	0c22      	lsrs	r2, r4, #16
 8000906:	0404      	lsls	r4, r0, #16
 8000908:	0c24      	lsrs	r4, r4, #16
 800090a:	464b      	mov	r3, r9
 800090c:	0020      	movs	r0, r4
 800090e:	0c1b      	lsrs	r3, r3, #16
 8000910:	4350      	muls	r0, r2
 8000912:	4374      	muls	r4, r6
 8000914:	435a      	muls	r2, r3
 8000916:	435e      	muls	r6, r3
 8000918:	1912      	adds	r2, r2, r4
 800091a:	0c03      	lsrs	r3, r0, #16
 800091c:	189b      	adds	r3, r3, r2
 800091e:	429c      	cmp	r4, r3
 8000920:	d903      	bls.n	800092a <__aeabi_fmul+0x10e>
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	0252      	lsls	r2, r2, #9
 8000926:	4694      	mov	ip, r2
 8000928:	4466      	add	r6, ip
 800092a:	0400      	lsls	r0, r0, #16
 800092c:	041a      	lsls	r2, r3, #16
 800092e:	0c00      	lsrs	r0, r0, #16
 8000930:	1812      	adds	r2, r2, r0
 8000932:	0194      	lsls	r4, r2, #6
 8000934:	1e60      	subs	r0, r4, #1
 8000936:	4184      	sbcs	r4, r0
 8000938:	0c1b      	lsrs	r3, r3, #16
 800093a:	0e92      	lsrs	r2, r2, #26
 800093c:	199b      	adds	r3, r3, r6
 800093e:	4314      	orrs	r4, r2
 8000940:	019b      	lsls	r3, r3, #6
 8000942:	431c      	orrs	r4, r3
 8000944:	011b      	lsls	r3, r3, #4
 8000946:	d572      	bpl.n	8000a2e <__aeabi_fmul+0x212>
 8000948:	2001      	movs	r0, #1
 800094a:	0863      	lsrs	r3, r4, #1
 800094c:	4004      	ands	r4, r0
 800094e:	431c      	orrs	r4, r3
 8000950:	0008      	movs	r0, r1
 8000952:	307f      	adds	r0, #127	; 0x7f
 8000954:	2800      	cmp	r0, #0
 8000956:	dd3c      	ble.n	80009d2 <__aeabi_fmul+0x1b6>
 8000958:	0763      	lsls	r3, r4, #29
 800095a:	d004      	beq.n	8000966 <__aeabi_fmul+0x14a>
 800095c:	230f      	movs	r3, #15
 800095e:	4023      	ands	r3, r4
 8000960:	2b04      	cmp	r3, #4
 8000962:	d000      	beq.n	8000966 <__aeabi_fmul+0x14a>
 8000964:	3404      	adds	r4, #4
 8000966:	0123      	lsls	r3, r4, #4
 8000968:	d503      	bpl.n	8000972 <__aeabi_fmul+0x156>
 800096a:	3180      	adds	r1, #128	; 0x80
 800096c:	0008      	movs	r0, r1
 800096e:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <__aeabi_fmul+0x230>)
 8000970:	401c      	ands	r4, r3
 8000972:	28fe      	cmp	r0, #254	; 0xfe
 8000974:	dcc0      	bgt.n	80008f8 <__aeabi_fmul+0xdc>
 8000976:	01a4      	lsls	r4, r4, #6
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	b2c0      	uxtb	r0, r0
 800097c:	e79a      	b.n	80008b4 <__aeabi_fmul+0x98>
 800097e:	0037      	movs	r7, r6
 8000980:	e78e      	b.n	80008a0 <__aeabi_fmul+0x84>
 8000982:	4652      	mov	r2, sl
 8000984:	2303      	movs	r3, #3
 8000986:	431a      	orrs	r2, r3
 8000988:	4692      	mov	sl, r2
 800098a:	2003      	movs	r0, #3
 800098c:	e771      	b.n	8000872 <__aeabi_fmul+0x56>
 800098e:	4648      	mov	r0, r9
 8000990:	f002 f96a 	bl	8002c68 <__clzsi2>
 8000994:	464a      	mov	r2, r9
 8000996:	1f43      	subs	r3, r0, #5
 8000998:	409a      	lsls	r2, r3
 800099a:	1a2d      	subs	r5, r5, r0
 800099c:	4691      	mov	r9, r2
 800099e:	2000      	movs	r0, #0
 80009a0:	3d76      	subs	r5, #118	; 0x76
 80009a2:	e766      	b.n	8000872 <__aeabi_fmul+0x56>
 80009a4:	230c      	movs	r3, #12
 80009a6:	469a      	mov	sl, r3
 80009a8:	3b09      	subs	r3, #9
 80009aa:	25ff      	movs	r5, #255	; 0xff
 80009ac:	469b      	mov	fp, r3
 80009ae:	e74d      	b.n	800084c <__aeabi_fmul+0x30>
 80009b0:	0020      	movs	r0, r4
 80009b2:	f002 f959 	bl	8002c68 <__clzsi2>
 80009b6:	2576      	movs	r5, #118	; 0x76
 80009b8:	1f43      	subs	r3, r0, #5
 80009ba:	409c      	lsls	r4, r3
 80009bc:	2300      	movs	r3, #0
 80009be:	426d      	negs	r5, r5
 80009c0:	469a      	mov	sl, r3
 80009c2:	469b      	mov	fp, r3
 80009c4:	1a2d      	subs	r5, r5, r0
 80009c6:	e741      	b.n	800084c <__aeabi_fmul+0x30>
 80009c8:	2480      	movs	r4, #128	; 0x80
 80009ca:	2700      	movs	r7, #0
 80009cc:	20ff      	movs	r0, #255	; 0xff
 80009ce:	03e4      	lsls	r4, r4, #15
 80009d0:	e770      	b.n	80008b4 <__aeabi_fmul+0x98>
 80009d2:	2301      	movs	r3, #1
 80009d4:	1a1b      	subs	r3, r3, r0
 80009d6:	2b1b      	cmp	r3, #27
 80009d8:	dd00      	ble.n	80009dc <__aeabi_fmul+0x1c0>
 80009da:	e769      	b.n	80008b0 <__aeabi_fmul+0x94>
 80009dc:	319e      	adds	r1, #158	; 0x9e
 80009de:	0020      	movs	r0, r4
 80009e0:	408c      	lsls	r4, r1
 80009e2:	40d8      	lsrs	r0, r3
 80009e4:	1e63      	subs	r3, r4, #1
 80009e6:	419c      	sbcs	r4, r3
 80009e8:	4304      	orrs	r4, r0
 80009ea:	0763      	lsls	r3, r4, #29
 80009ec:	d004      	beq.n	80009f8 <__aeabi_fmul+0x1dc>
 80009ee:	230f      	movs	r3, #15
 80009f0:	4023      	ands	r3, r4
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d000      	beq.n	80009f8 <__aeabi_fmul+0x1dc>
 80009f6:	3404      	adds	r4, #4
 80009f8:	0163      	lsls	r3, r4, #5
 80009fa:	d51a      	bpl.n	8000a32 <__aeabi_fmul+0x216>
 80009fc:	2001      	movs	r0, #1
 80009fe:	2400      	movs	r4, #0
 8000a00:	e758      	b.n	80008b4 <__aeabi_fmul+0x98>
 8000a02:	2080      	movs	r0, #128	; 0x80
 8000a04:	03c0      	lsls	r0, r0, #15
 8000a06:	4204      	tst	r4, r0
 8000a08:	d009      	beq.n	8000a1e <__aeabi_fmul+0x202>
 8000a0a:	464b      	mov	r3, r9
 8000a0c:	4203      	tst	r3, r0
 8000a0e:	d106      	bne.n	8000a1e <__aeabi_fmul+0x202>
 8000a10:	464c      	mov	r4, r9
 8000a12:	4304      	orrs	r4, r0
 8000a14:	0264      	lsls	r4, r4, #9
 8000a16:	4647      	mov	r7, r8
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	0a64      	lsrs	r4, r4, #9
 8000a1c:	e74a      	b.n	80008b4 <__aeabi_fmul+0x98>
 8000a1e:	2080      	movs	r0, #128	; 0x80
 8000a20:	03c0      	lsls	r0, r0, #15
 8000a22:	4304      	orrs	r4, r0
 8000a24:	0264      	lsls	r4, r4, #9
 8000a26:	0037      	movs	r7, r6
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	0a64      	lsrs	r4, r4, #9
 8000a2c:	e742      	b.n	80008b4 <__aeabi_fmul+0x98>
 8000a2e:	0029      	movs	r1, r5
 8000a30:	e78e      	b.n	8000950 <__aeabi_fmul+0x134>
 8000a32:	01a4      	lsls	r4, r4, #6
 8000a34:	2000      	movs	r0, #0
 8000a36:	0a64      	lsrs	r4, r4, #9
 8000a38:	e73c      	b.n	80008b4 <__aeabi_fmul+0x98>
 8000a3a:	2080      	movs	r0, #128	; 0x80
 8000a3c:	03c0      	lsls	r0, r0, #15
 8000a3e:	4304      	orrs	r4, r0
 8000a40:	0264      	lsls	r4, r4, #9
 8000a42:	20ff      	movs	r0, #255	; 0xff
 8000a44:	0a64      	lsrs	r4, r4, #9
 8000a46:	e735      	b.n	80008b4 <__aeabi_fmul+0x98>
 8000a48:	080179e8 	.word	0x080179e8
 8000a4c:	f7ffffff 	.word	0xf7ffffff

08000a50 <__aeabi_fsub>:
 8000a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a52:	4646      	mov	r6, r8
 8000a54:	46d6      	mov	lr, sl
 8000a56:	464f      	mov	r7, r9
 8000a58:	0243      	lsls	r3, r0, #9
 8000a5a:	0a5b      	lsrs	r3, r3, #9
 8000a5c:	00da      	lsls	r2, r3, #3
 8000a5e:	4694      	mov	ip, r2
 8000a60:	024a      	lsls	r2, r1, #9
 8000a62:	b5c0      	push	{r6, r7, lr}
 8000a64:	0044      	lsls	r4, r0, #1
 8000a66:	0a56      	lsrs	r6, r2, #9
 8000a68:	1c05      	adds	r5, r0, #0
 8000a6a:	46b0      	mov	r8, r6
 8000a6c:	0e24      	lsrs	r4, r4, #24
 8000a6e:	004e      	lsls	r6, r1, #1
 8000a70:	0992      	lsrs	r2, r2, #6
 8000a72:	001f      	movs	r7, r3
 8000a74:	0020      	movs	r0, r4
 8000a76:	4692      	mov	sl, r2
 8000a78:	0fed      	lsrs	r5, r5, #31
 8000a7a:	0e36      	lsrs	r6, r6, #24
 8000a7c:	0fc9      	lsrs	r1, r1, #31
 8000a7e:	2eff      	cmp	r6, #255	; 0xff
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fsub+0x34>
 8000a82:	e07f      	b.n	8000b84 <__aeabi_fsub+0x134>
 8000a84:	2201      	movs	r2, #1
 8000a86:	4051      	eors	r1, r2
 8000a88:	428d      	cmp	r5, r1
 8000a8a:	d051      	beq.n	8000b30 <__aeabi_fsub+0xe0>
 8000a8c:	1ba2      	subs	r2, r4, r6
 8000a8e:	4691      	mov	r9, r2
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	dc00      	bgt.n	8000a96 <__aeabi_fsub+0x46>
 8000a94:	e07e      	b.n	8000b94 <__aeabi_fsub+0x144>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x4c>
 8000a9a:	e099      	b.n	8000bd0 <__aeabi_fsub+0x180>
 8000a9c:	2cff      	cmp	r4, #255	; 0xff
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fsub+0x52>
 8000aa0:	e08c      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	4652      	mov	r2, sl
 8000aa6:	04db      	lsls	r3, r3, #19
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	4692      	mov	sl, r2
 8000aac:	464a      	mov	r2, r9
 8000aae:	2301      	movs	r3, #1
 8000ab0:	2a1b      	cmp	r2, #27
 8000ab2:	dc08      	bgt.n	8000ac6 <__aeabi_fsub+0x76>
 8000ab4:	4653      	mov	r3, sl
 8000ab6:	2120      	movs	r1, #32
 8000ab8:	40d3      	lsrs	r3, r2
 8000aba:	1a89      	subs	r1, r1, r2
 8000abc:	4652      	mov	r2, sl
 8000abe:	408a      	lsls	r2, r1
 8000ac0:	1e51      	subs	r1, r2, #1
 8000ac2:	418a      	sbcs	r2, r1
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	4662      	mov	r2, ip
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	015a      	lsls	r2, r3, #5
 8000acc:	d400      	bmi.n	8000ad0 <__aeabi_fsub+0x80>
 8000ace:	e0f3      	b.n	8000cb8 <__aeabi_fsub+0x268>
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	099e      	lsrs	r6, r3, #6
 8000ad4:	0030      	movs	r0, r6
 8000ad6:	f002 f8c7 	bl	8002c68 <__clzsi2>
 8000ada:	3805      	subs	r0, #5
 8000adc:	4086      	lsls	r6, r0
 8000ade:	4284      	cmp	r4, r0
 8000ae0:	dd00      	ble.n	8000ae4 <__aeabi_fsub+0x94>
 8000ae2:	e0f7      	b.n	8000cd4 <__aeabi_fsub+0x284>
 8000ae4:	0032      	movs	r2, r6
 8000ae6:	1b04      	subs	r4, r0, r4
 8000ae8:	2020      	movs	r0, #32
 8000aea:	3401      	adds	r4, #1
 8000aec:	40e2      	lsrs	r2, r4
 8000aee:	1b04      	subs	r4, r0, r4
 8000af0:	40a6      	lsls	r6, r4
 8000af2:	0033      	movs	r3, r6
 8000af4:	1e5e      	subs	r6, r3, #1
 8000af6:	41b3      	sbcs	r3, r6
 8000af8:	2400      	movs	r4, #0
 8000afa:	4313      	orrs	r3, r2
 8000afc:	075a      	lsls	r2, r3, #29
 8000afe:	d004      	beq.n	8000b0a <__aeabi_fsub+0xba>
 8000b00:	220f      	movs	r2, #15
 8000b02:	401a      	ands	r2, r3
 8000b04:	2a04      	cmp	r2, #4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_fsub+0xba>
 8000b08:	3304      	adds	r3, #4
 8000b0a:	015a      	lsls	r2, r3, #5
 8000b0c:	d400      	bmi.n	8000b10 <__aeabi_fsub+0xc0>
 8000b0e:	e0d6      	b.n	8000cbe <__aeabi_fsub+0x26e>
 8000b10:	1c62      	adds	r2, r4, #1
 8000b12:	2cfe      	cmp	r4, #254	; 0xfe
 8000b14:	d100      	bne.n	8000b18 <__aeabi_fsub+0xc8>
 8000b16:	e0da      	b.n	8000cce <__aeabi_fsub+0x27e>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	0a5f      	lsrs	r7, r3, #9
 8000b1c:	b2d0      	uxtb	r0, r2
 8000b1e:	05c0      	lsls	r0, r0, #23
 8000b20:	4338      	orrs	r0, r7
 8000b22:	07ed      	lsls	r5, r5, #31
 8000b24:	4328      	orrs	r0, r5
 8000b26:	bce0      	pop	{r5, r6, r7}
 8000b28:	46ba      	mov	sl, r7
 8000b2a:	46b1      	mov	r9, r6
 8000b2c:	46a8      	mov	r8, r5
 8000b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b30:	1ba2      	subs	r2, r4, r6
 8000b32:	4691      	mov	r9, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	dd63      	ble.n	8000c00 <__aeabi_fsub+0x1b0>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0xee>
 8000b3c:	e099      	b.n	8000c72 <__aeabi_fsub+0x222>
 8000b3e:	2cff      	cmp	r4, #255	; 0xff
 8000b40:	d03c      	beq.n	8000bbc <__aeabi_fsub+0x16c>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	4652      	mov	r2, sl
 8000b46:	04db      	lsls	r3, r3, #19
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	4692      	mov	sl, r2
 8000b4c:	464a      	mov	r2, r9
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2a1b      	cmp	r2, #27
 8000b52:	dc08      	bgt.n	8000b66 <__aeabi_fsub+0x116>
 8000b54:	4653      	mov	r3, sl
 8000b56:	2120      	movs	r1, #32
 8000b58:	40d3      	lsrs	r3, r2
 8000b5a:	1a89      	subs	r1, r1, r2
 8000b5c:	4652      	mov	r2, sl
 8000b5e:	408a      	lsls	r2, r1
 8000b60:	1e51      	subs	r1, r2, #1
 8000b62:	418a      	sbcs	r2, r1
 8000b64:	4313      	orrs	r3, r2
 8000b66:	4463      	add	r3, ip
 8000b68:	015a      	lsls	r2, r3, #5
 8000b6a:	d400      	bmi.n	8000b6e <__aeabi_fsub+0x11e>
 8000b6c:	e0a4      	b.n	8000cb8 <__aeabi_fsub+0x268>
 8000b6e:	3401      	adds	r4, #1
 8000b70:	2cff      	cmp	r4, #255	; 0xff
 8000b72:	d100      	bne.n	8000b76 <__aeabi_fsub+0x126>
 8000b74:	e0ab      	b.n	8000cce <__aeabi_fsub+0x27e>
 8000b76:	2201      	movs	r2, #1
 8000b78:	4997      	ldr	r1, [pc, #604]	; (8000dd8 <__aeabi_fsub+0x388>)
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	085b      	lsrs	r3, r3, #1
 8000b7e:	400b      	ands	r3, r1
 8000b80:	4313      	orrs	r3, r2
 8000b82:	e7bb      	b.n	8000afc <__aeabi_fsub+0xac>
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d032      	beq.n	8000bee <__aeabi_fsub+0x19e>
 8000b88:	428d      	cmp	r5, r1
 8000b8a:	d035      	beq.n	8000bf8 <__aeabi_fsub+0x1a8>
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	4252      	negs	r2, r2
 8000b90:	4691      	mov	r9, r2
 8000b92:	44a1      	add	r9, r4
 8000b94:	464a      	mov	r2, r9
 8000b96:	2a00      	cmp	r2, #0
 8000b98:	d051      	beq.n	8000c3e <__aeabi_fsub+0x1ee>
 8000b9a:	1b30      	subs	r0, r6, r4
 8000b9c:	2c00      	cmp	r4, #0
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_fsub+0x152>
 8000ba0:	e09c      	b.n	8000cdc <__aeabi_fsub+0x28c>
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_fsub+0x15a>
 8000ba8:	e0df      	b.n	8000d6a <__aeabi_fsub+0x31a>
 8000baa:	3801      	subs	r0, #1
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_fsub+0x162>
 8000bb0:	e0f7      	b.n	8000da2 <__aeabi_fsub+0x352>
 8000bb2:	2eff      	cmp	r6, #255	; 0xff
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_fsub+0x168>
 8000bb6:	e099      	b.n	8000cec <__aeabi_fsub+0x29c>
 8000bb8:	000d      	movs	r5, r1
 8000bba:	4643      	mov	r3, r8
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fsub+0x172>
 8000bc0:	e085      	b.n	8000cce <__aeabi_fsub+0x27e>
 8000bc2:	2780      	movs	r7, #128	; 0x80
 8000bc4:	03ff      	lsls	r7, r7, #15
 8000bc6:	431f      	orrs	r7, r3
 8000bc8:	027f      	lsls	r7, r7, #9
 8000bca:	20ff      	movs	r0, #255	; 0xff
 8000bcc:	0a7f      	lsrs	r7, r7, #9
 8000bce:	e7a6      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000bd0:	4652      	mov	r2, sl
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	d074      	beq.n	8000cc0 <__aeabi_fsub+0x270>
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4252      	negs	r2, r2
 8000bda:	4690      	mov	r8, r2
 8000bdc:	44c1      	add	r9, r8
 8000bde:	464a      	mov	r2, r9
 8000be0:	2a00      	cmp	r2, #0
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x196>
 8000be4:	e0c8      	b.n	8000d78 <__aeabi_fsub+0x328>
 8000be6:	2cff      	cmp	r4, #255	; 0xff
 8000be8:	d000      	beq.n	8000bec <__aeabi_fsub+0x19c>
 8000bea:	e75f      	b.n	8000aac <__aeabi_fsub+0x5c>
 8000bec:	e7e6      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4051      	eors	r1, r2
 8000bf2:	42a9      	cmp	r1, r5
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_fsub+0x1a8>
 8000bf6:	e749      	b.n	8000a8c <__aeabi_fsub+0x3c>
 8000bf8:	22ff      	movs	r2, #255	; 0xff
 8000bfa:	4252      	negs	r2, r2
 8000bfc:	4691      	mov	r9, r2
 8000bfe:	44a1      	add	r9, r4
 8000c00:	464a      	mov	r2, r9
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d043      	beq.n	8000c8e <__aeabi_fsub+0x23e>
 8000c06:	1b31      	subs	r1, r6, r4
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fsub+0x1be>
 8000c0c:	e08c      	b.n	8000d28 <__aeabi_fsub+0x2d8>
 8000c0e:	2eff      	cmp	r6, #255	; 0xff
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fsub+0x1c4>
 8000c12:	e092      	b.n	8000d3a <__aeabi_fsub+0x2ea>
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	4662      	mov	r2, ip
 8000c18:	04db      	lsls	r3, r3, #19
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	2301      	movs	r3, #1
 8000c20:	291b      	cmp	r1, #27
 8000c22:	dc09      	bgt.n	8000c38 <__aeabi_fsub+0x1e8>
 8000c24:	2020      	movs	r0, #32
 8000c26:	4663      	mov	r3, ip
 8000c28:	4662      	mov	r2, ip
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	1a41      	subs	r1, r0, r1
 8000c2e:	408a      	lsls	r2, r1
 8000c30:	0011      	movs	r1, r2
 8000c32:	1e48      	subs	r0, r1, #1
 8000c34:	4181      	sbcs	r1, r0
 8000c36:	430b      	orrs	r3, r1
 8000c38:	0034      	movs	r4, r6
 8000c3a:	4453      	add	r3, sl
 8000c3c:	e794      	b.n	8000b68 <__aeabi_fsub+0x118>
 8000c3e:	22fe      	movs	r2, #254	; 0xfe
 8000c40:	1c66      	adds	r6, r4, #1
 8000c42:	4232      	tst	r2, r6
 8000c44:	d164      	bne.n	8000d10 <__aeabi_fsub+0x2c0>
 8000c46:	2c00      	cmp	r4, #0
 8000c48:	d000      	beq.n	8000c4c <__aeabi_fsub+0x1fc>
 8000c4a:	e082      	b.n	8000d52 <__aeabi_fsub+0x302>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d100      	bne.n	8000c54 <__aeabi_fsub+0x204>
 8000c52:	e0ab      	b.n	8000dac <__aeabi_fsub+0x35c>
 8000c54:	4653      	mov	r3, sl
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fsub+0x20c>
 8000c5a:	e760      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000c5c:	4663      	mov	r3, ip
 8000c5e:	4652      	mov	r2, sl
 8000c60:	1a9b      	subs	r3, r3, r2
 8000c62:	015a      	lsls	r2, r3, #5
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fsub+0x218>
 8000c66:	e0aa      	b.n	8000dbe <__aeabi_fsub+0x36e>
 8000c68:	4663      	mov	r3, ip
 8000c6a:	4652      	mov	r2, sl
 8000c6c:	000d      	movs	r5, r1
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	e744      	b.n	8000afc <__aeabi_fsub+0xac>
 8000c72:	4652      	mov	r2, sl
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d023      	beq.n	8000cc0 <__aeabi_fsub+0x270>
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4252      	negs	r2, r2
 8000c7c:	4690      	mov	r8, r2
 8000c7e:	44c1      	add	r9, r8
 8000c80:	464a      	mov	r2, r9
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d075      	beq.n	8000d72 <__aeabi_fsub+0x322>
 8000c86:	2cff      	cmp	r4, #255	; 0xff
 8000c88:	d000      	beq.n	8000c8c <__aeabi_fsub+0x23c>
 8000c8a:	e75f      	b.n	8000b4c <__aeabi_fsub+0xfc>
 8000c8c:	e796      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000c8e:	26fe      	movs	r6, #254	; 0xfe
 8000c90:	3401      	adds	r4, #1
 8000c92:	4226      	tst	r6, r4
 8000c94:	d153      	bne.n	8000d3e <__aeabi_fsub+0x2ee>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d172      	bne.n	8000d80 <__aeabi_fsub+0x330>
 8000c9a:	4663      	mov	r3, ip
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0x252>
 8000ca0:	e093      	b.n	8000dca <__aeabi_fsub+0x37a>
 8000ca2:	4653      	mov	r3, sl
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x25a>
 8000ca8:	e739      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000caa:	4463      	add	r3, ip
 8000cac:	2400      	movs	r4, #0
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	d502      	bpl.n	8000cb8 <__aeabi_fsub+0x268>
 8000cb2:	4a4a      	ldr	r2, [pc, #296]	; (8000ddc <__aeabi_fsub+0x38c>)
 8000cb4:	3401      	adds	r4, #1
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	075a      	lsls	r2, r3, #29
 8000cba:	d000      	beq.n	8000cbe <__aeabi_fsub+0x26e>
 8000cbc:	e720      	b.n	8000b00 <__aeabi_fsub+0xb0>
 8000cbe:	08db      	lsrs	r3, r3, #3
 8000cc0:	2cff      	cmp	r4, #255	; 0xff
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_fsub+0x276>
 8000cc4:	e77a      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000cc6:	025b      	lsls	r3, r3, #9
 8000cc8:	0a5f      	lsrs	r7, r3, #9
 8000cca:	b2e0      	uxtb	r0, r4
 8000ccc:	e727      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000cce:	20ff      	movs	r0, #255	; 0xff
 8000cd0:	2700      	movs	r7, #0
 8000cd2:	e724      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000cd4:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <__aeabi_fsub+0x38c>)
 8000cd6:	1a24      	subs	r4, r4, r0
 8000cd8:	4033      	ands	r3, r6
 8000cda:	e70f      	b.n	8000afc <__aeabi_fsub+0xac>
 8000cdc:	2eff      	cmp	r6, #255	; 0xff
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x292>
 8000ce0:	e76a      	b.n	8000bb8 <__aeabi_fsub+0x168>
 8000ce2:	2380      	movs	r3, #128	; 0x80
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	04db      	lsls	r3, r3, #19
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	4694      	mov	ip, r2
 8000cec:	2301      	movs	r3, #1
 8000cee:	281b      	cmp	r0, #27
 8000cf0:	dc09      	bgt.n	8000d06 <__aeabi_fsub+0x2b6>
 8000cf2:	2420      	movs	r4, #32
 8000cf4:	4663      	mov	r3, ip
 8000cf6:	4662      	mov	r2, ip
 8000cf8:	40c3      	lsrs	r3, r0
 8000cfa:	1a20      	subs	r0, r4, r0
 8000cfc:	4082      	lsls	r2, r0
 8000cfe:	0010      	movs	r0, r2
 8000d00:	1e44      	subs	r4, r0, #1
 8000d02:	41a0      	sbcs	r0, r4
 8000d04:	4303      	orrs	r3, r0
 8000d06:	4652      	mov	r2, sl
 8000d08:	000d      	movs	r5, r1
 8000d0a:	0034      	movs	r4, r6
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	e6dc      	b.n	8000aca <__aeabi_fsub+0x7a>
 8000d10:	4663      	mov	r3, ip
 8000d12:	4652      	mov	r2, sl
 8000d14:	1a9e      	subs	r6, r3, r2
 8000d16:	0173      	lsls	r3, r6, #5
 8000d18:	d417      	bmi.n	8000d4a <__aeabi_fsub+0x2fa>
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x2d0>
 8000d1e:	e6d9      	b.n	8000ad4 <__aeabi_fsub+0x84>
 8000d20:	2500      	movs	r5, #0
 8000d22:	2000      	movs	r0, #0
 8000d24:	2700      	movs	r7, #0
 8000d26:	e6fa      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000d28:	4663      	mov	r3, ip
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d044      	beq.n	8000db8 <__aeabi_fsub+0x368>
 8000d2e:	3901      	subs	r1, #1
 8000d30:	2900      	cmp	r1, #0
 8000d32:	d04c      	beq.n	8000dce <__aeabi_fsub+0x37e>
 8000d34:	2eff      	cmp	r6, #255	; 0xff
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fsub+0x2ea>
 8000d38:	e771      	b.n	8000c1e <__aeabi_fsub+0x1ce>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	e73e      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000d3e:	2cff      	cmp	r4, #255	; 0xff
 8000d40:	d0c5      	beq.n	8000cce <__aeabi_fsub+0x27e>
 8000d42:	4652      	mov	r2, sl
 8000d44:	4462      	add	r2, ip
 8000d46:	0853      	lsrs	r3, r2, #1
 8000d48:	e7b6      	b.n	8000cb8 <__aeabi_fsub+0x268>
 8000d4a:	4663      	mov	r3, ip
 8000d4c:	000d      	movs	r5, r1
 8000d4e:	1ad6      	subs	r6, r2, r3
 8000d50:	e6c0      	b.n	8000ad4 <__aeabi_fsub+0x84>
 8000d52:	4662      	mov	r2, ip
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d116      	bne.n	8000d86 <__aeabi_fsub+0x336>
 8000d58:	4653      	mov	r3, sl
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x310>
 8000d5e:	e72b      	b.n	8000bb8 <__aeabi_fsub+0x168>
 8000d60:	2780      	movs	r7, #128	; 0x80
 8000d62:	2500      	movs	r5, #0
 8000d64:	20ff      	movs	r0, #255	; 0xff
 8000d66:	03ff      	lsls	r7, r7, #15
 8000d68:	e6d9      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000d6a:	000d      	movs	r5, r1
 8000d6c:	4643      	mov	r3, r8
 8000d6e:	0034      	movs	r4, r6
 8000d70:	e7a6      	b.n	8000cc0 <__aeabi_fsub+0x270>
 8000d72:	4653      	mov	r3, sl
 8000d74:	4463      	add	r3, ip
 8000d76:	e6f7      	b.n	8000b68 <__aeabi_fsub+0x118>
 8000d78:	4663      	mov	r3, ip
 8000d7a:	4652      	mov	r2, sl
 8000d7c:	1a9b      	subs	r3, r3, r2
 8000d7e:	e6a4      	b.n	8000aca <__aeabi_fsub+0x7a>
 8000d80:	4662      	mov	r2, ip
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d0d9      	beq.n	8000d3a <__aeabi_fsub+0x2ea>
 8000d86:	4652      	mov	r2, sl
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_fsub+0x33e>
 8000d8c:	e716      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000d8e:	2280      	movs	r2, #128	; 0x80
 8000d90:	03d2      	lsls	r2, r2, #15
 8000d92:	4213      	tst	r3, r2
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x348>
 8000d96:	e711      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000d98:	4640      	mov	r0, r8
 8000d9a:	4210      	tst	r0, r2
 8000d9c:	d000      	beq.n	8000da0 <__aeabi_fsub+0x350>
 8000d9e:	e70d      	b.n	8000bbc <__aeabi_fsub+0x16c>
 8000da0:	e70a      	b.n	8000bb8 <__aeabi_fsub+0x168>
 8000da2:	4652      	mov	r2, sl
 8000da4:	000d      	movs	r5, r1
 8000da6:	0034      	movs	r4, r6
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	e68e      	b.n	8000aca <__aeabi_fsub+0x7a>
 8000dac:	4653      	mov	r3, sl
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d008      	beq.n	8000dc4 <__aeabi_fsub+0x374>
 8000db2:	000d      	movs	r5, r1
 8000db4:	4647      	mov	r7, r8
 8000db6:	e6b2      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000db8:	4643      	mov	r3, r8
 8000dba:	0034      	movs	r4, r6
 8000dbc:	e780      	b.n	8000cc0 <__aeabi_fsub+0x270>
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_fsub+0x374>
 8000dc2:	e779      	b.n	8000cb8 <__aeabi_fsub+0x268>
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	2700      	movs	r7, #0
 8000dc8:	e6a9      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000dca:	4647      	mov	r7, r8
 8000dcc:	e6a7      	b.n	8000b1e <__aeabi_fsub+0xce>
 8000dce:	4653      	mov	r3, sl
 8000dd0:	0034      	movs	r4, r6
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e6c8      	b.n	8000b68 <__aeabi_fsub+0x118>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	7dffffff 	.word	0x7dffffff
 8000ddc:	fbffffff 	.word	0xfbffffff

08000de0 <__aeabi_f2iz>:
 8000de0:	0241      	lsls	r1, r0, #9
 8000de2:	0042      	lsls	r2, r0, #1
 8000de4:	0fc3      	lsrs	r3, r0, #31
 8000de6:	0a49      	lsrs	r1, r1, #9
 8000de8:	2000      	movs	r0, #0
 8000dea:	0e12      	lsrs	r2, r2, #24
 8000dec:	2a7e      	cmp	r2, #126	; 0x7e
 8000dee:	d903      	bls.n	8000df8 <__aeabi_f2iz+0x18>
 8000df0:	2a9d      	cmp	r2, #157	; 0x9d
 8000df2:	d902      	bls.n	8000dfa <__aeabi_f2iz+0x1a>
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <__aeabi_f2iz+0x3c>)
 8000df6:	1898      	adds	r0, r3, r2
 8000df8:	4770      	bx	lr
 8000dfa:	2080      	movs	r0, #128	; 0x80
 8000dfc:	0400      	lsls	r0, r0, #16
 8000dfe:	4301      	orrs	r1, r0
 8000e00:	2a95      	cmp	r2, #149	; 0x95
 8000e02:	dc07      	bgt.n	8000e14 <__aeabi_f2iz+0x34>
 8000e04:	2096      	movs	r0, #150	; 0x96
 8000e06:	1a82      	subs	r2, r0, r2
 8000e08:	40d1      	lsrs	r1, r2
 8000e0a:	4248      	negs	r0, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1f3      	bne.n	8000df8 <__aeabi_f2iz+0x18>
 8000e10:	0008      	movs	r0, r1
 8000e12:	e7f1      	b.n	8000df8 <__aeabi_f2iz+0x18>
 8000e14:	3a96      	subs	r2, #150	; 0x96
 8000e16:	4091      	lsls	r1, r2
 8000e18:	e7f7      	b.n	8000e0a <__aeabi_f2iz+0x2a>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	7fffffff 	.word	0x7fffffff

08000e20 <__aeabi_ui2f>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	1e05      	subs	r5, r0, #0
 8000e24:	d00e      	beq.n	8000e44 <__aeabi_ui2f+0x24>
 8000e26:	f001 ff1f 	bl	8002c68 <__clzsi2>
 8000e2a:	239e      	movs	r3, #158	; 0x9e
 8000e2c:	0004      	movs	r4, r0
 8000e2e:	1a1b      	subs	r3, r3, r0
 8000e30:	2b96      	cmp	r3, #150	; 0x96
 8000e32:	dc0c      	bgt.n	8000e4e <__aeabi_ui2f+0x2e>
 8000e34:	2808      	cmp	r0, #8
 8000e36:	dd01      	ble.n	8000e3c <__aeabi_ui2f+0x1c>
 8000e38:	3c08      	subs	r4, #8
 8000e3a:	40a5      	lsls	r5, r4
 8000e3c:	026d      	lsls	r5, r5, #9
 8000e3e:	0a6d      	lsrs	r5, r5, #9
 8000e40:	b2d8      	uxtb	r0, r3
 8000e42:	e001      	b.n	8000e48 <__aeabi_ui2f+0x28>
 8000e44:	2000      	movs	r0, #0
 8000e46:	2500      	movs	r5, #0
 8000e48:	05c0      	lsls	r0, r0, #23
 8000e4a:	4328      	orrs	r0, r5
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
 8000e4e:	2b99      	cmp	r3, #153	; 0x99
 8000e50:	dd09      	ble.n	8000e66 <__aeabi_ui2f+0x46>
 8000e52:	0002      	movs	r2, r0
 8000e54:	0029      	movs	r1, r5
 8000e56:	321b      	adds	r2, #27
 8000e58:	4091      	lsls	r1, r2
 8000e5a:	1e4a      	subs	r2, r1, #1
 8000e5c:	4191      	sbcs	r1, r2
 8000e5e:	2205      	movs	r2, #5
 8000e60:	1a12      	subs	r2, r2, r0
 8000e62:	40d5      	lsrs	r5, r2
 8000e64:	430d      	orrs	r5, r1
 8000e66:	2c05      	cmp	r4, #5
 8000e68:	dd01      	ble.n	8000e6e <__aeabi_ui2f+0x4e>
 8000e6a:	1f62      	subs	r2, r4, #5
 8000e6c:	4095      	lsls	r5, r2
 8000e6e:	0029      	movs	r1, r5
 8000e70:	4e08      	ldr	r6, [pc, #32]	; (8000e94 <__aeabi_ui2f+0x74>)
 8000e72:	4031      	ands	r1, r6
 8000e74:	076a      	lsls	r2, r5, #29
 8000e76:	d009      	beq.n	8000e8c <__aeabi_ui2f+0x6c>
 8000e78:	200f      	movs	r0, #15
 8000e7a:	4028      	ands	r0, r5
 8000e7c:	2804      	cmp	r0, #4
 8000e7e:	d005      	beq.n	8000e8c <__aeabi_ui2f+0x6c>
 8000e80:	3104      	adds	r1, #4
 8000e82:	014a      	lsls	r2, r1, #5
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_ui2f+0x6c>
 8000e86:	239f      	movs	r3, #159	; 0x9f
 8000e88:	4031      	ands	r1, r6
 8000e8a:	1b1b      	subs	r3, r3, r4
 8000e8c:	0189      	lsls	r1, r1, #6
 8000e8e:	0a4d      	lsrs	r5, r1, #9
 8000e90:	b2d8      	uxtb	r0, r3
 8000e92:	e7d9      	b.n	8000e48 <__aeabi_ui2f+0x28>
 8000e94:	fbffffff 	.word	0xfbffffff

08000e98 <__aeabi_dadd>:
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	464f      	mov	r7, r9
 8000e9c:	46d6      	mov	lr, sl
 8000e9e:	4646      	mov	r6, r8
 8000ea0:	000d      	movs	r5, r1
 8000ea2:	0001      	movs	r1, r0
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	b5c0      	push	{r6, r7, lr}
 8000ea8:	0017      	movs	r7, r2
 8000eaa:	032b      	lsls	r3, r5, #12
 8000eac:	0a5a      	lsrs	r2, r3, #9
 8000eae:	0f4b      	lsrs	r3, r1, #29
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	00ca      	lsls	r2, r1, #3
 8000eb4:	4691      	mov	r9, r2
 8000eb6:	0302      	lsls	r2, r0, #12
 8000eb8:	006e      	lsls	r6, r5, #1
 8000eba:	0041      	lsls	r1, r0, #1
 8000ebc:	0a52      	lsrs	r2, r2, #9
 8000ebe:	0fec      	lsrs	r4, r5, #31
 8000ec0:	0f7d      	lsrs	r5, r7, #29
 8000ec2:	4315      	orrs	r5, r2
 8000ec4:	0d76      	lsrs	r6, r6, #21
 8000ec6:	0d49      	lsrs	r1, r1, #21
 8000ec8:	0fc0      	lsrs	r0, r0, #31
 8000eca:	4682      	mov	sl, r0
 8000ecc:	46ac      	mov	ip, r5
 8000ece:	00ff      	lsls	r7, r7, #3
 8000ed0:	1a72      	subs	r2, r6, r1
 8000ed2:	4284      	cmp	r4, r0
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dadd+0x40>
 8000ed6:	e098      	b.n	800100a <__aeabi_dadd+0x172>
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	dc00      	bgt.n	8000ede <__aeabi_dadd+0x46>
 8000edc:	e081      	b.n	8000fe2 <__aeabi_dadd+0x14a>
 8000ede:	2900      	cmp	r1, #0
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dadd+0x4c>
 8000ee2:	e0b6      	b.n	8001052 <__aeabi_dadd+0x1ba>
 8000ee4:	49c9      	ldr	r1, [pc, #804]	; (800120c <__aeabi_dadd+0x374>)
 8000ee6:	428e      	cmp	r6, r1
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dadd+0x54>
 8000eea:	e172      	b.n	80011d2 <__aeabi_dadd+0x33a>
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0028      	movs	r0, r5
 8000ef0:	0409      	lsls	r1, r1, #16
 8000ef2:	4308      	orrs	r0, r1
 8000ef4:	4684      	mov	ip, r0
 8000ef6:	2a38      	cmp	r2, #56	; 0x38
 8000ef8:	dd00      	ble.n	8000efc <__aeabi_dadd+0x64>
 8000efa:	e15e      	b.n	80011ba <__aeabi_dadd+0x322>
 8000efc:	2a1f      	cmp	r2, #31
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_dadd+0x6a>
 8000f00:	e1ee      	b.n	80012e0 <__aeabi_dadd+0x448>
 8000f02:	2020      	movs	r0, #32
 8000f04:	0039      	movs	r1, r7
 8000f06:	4665      	mov	r5, ip
 8000f08:	1a80      	subs	r0, r0, r2
 8000f0a:	4087      	lsls	r7, r0
 8000f0c:	40d1      	lsrs	r1, r2
 8000f0e:	4085      	lsls	r5, r0
 8000f10:	430d      	orrs	r5, r1
 8000f12:	0039      	movs	r1, r7
 8000f14:	1e4f      	subs	r7, r1, #1
 8000f16:	41b9      	sbcs	r1, r7
 8000f18:	4667      	mov	r7, ip
 8000f1a:	40d7      	lsrs	r7, r2
 8000f1c:	4329      	orrs	r1, r5
 8000f1e:	1bdb      	subs	r3, r3, r7
 8000f20:	464a      	mov	r2, r9
 8000f22:	1a55      	subs	r5, r2, r1
 8000f24:	45a9      	cmp	r9, r5
 8000f26:	4189      	sbcs	r1, r1
 8000f28:	4249      	negs	r1, r1
 8000f2a:	1a5b      	subs	r3, r3, r1
 8000f2c:	4698      	mov	r8, r3
 8000f2e:	4643      	mov	r3, r8
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	d400      	bmi.n	8000f36 <__aeabi_dadd+0x9e>
 8000f34:	e0cc      	b.n	80010d0 <__aeabi_dadd+0x238>
 8000f36:	4643      	mov	r3, r8
 8000f38:	025b      	lsls	r3, r3, #9
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	4643      	mov	r3, r8
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dadd+0xae>
 8000f44:	e12c      	b.n	80011a0 <__aeabi_dadd+0x308>
 8000f46:	4640      	mov	r0, r8
 8000f48:	f001 fe8e 	bl	8002c68 <__clzsi2>
 8000f4c:	0001      	movs	r1, r0
 8000f4e:	3908      	subs	r1, #8
 8000f50:	2220      	movs	r2, #32
 8000f52:	0028      	movs	r0, r5
 8000f54:	4643      	mov	r3, r8
 8000f56:	1a52      	subs	r2, r2, r1
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	40d0      	lsrs	r0, r2
 8000f5c:	408d      	lsls	r5, r1
 8000f5e:	4303      	orrs	r3, r0
 8000f60:	428e      	cmp	r6, r1
 8000f62:	dd00      	ble.n	8000f66 <__aeabi_dadd+0xce>
 8000f64:	e117      	b.n	8001196 <__aeabi_dadd+0x2fe>
 8000f66:	1b8e      	subs	r6, r1, r6
 8000f68:	1c72      	adds	r2, r6, #1
 8000f6a:	2a1f      	cmp	r2, #31
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_dadd+0xd8>
 8000f6e:	e1a7      	b.n	80012c0 <__aeabi_dadd+0x428>
 8000f70:	2120      	movs	r1, #32
 8000f72:	0018      	movs	r0, r3
 8000f74:	002e      	movs	r6, r5
 8000f76:	1a89      	subs	r1, r1, r2
 8000f78:	408d      	lsls	r5, r1
 8000f7a:	4088      	lsls	r0, r1
 8000f7c:	40d6      	lsrs	r6, r2
 8000f7e:	40d3      	lsrs	r3, r2
 8000f80:	1e69      	subs	r1, r5, #1
 8000f82:	418d      	sbcs	r5, r1
 8000f84:	4330      	orrs	r0, r6
 8000f86:	4698      	mov	r8, r3
 8000f88:	2600      	movs	r6, #0
 8000f8a:	4305      	orrs	r5, r0
 8000f8c:	076b      	lsls	r3, r5, #29
 8000f8e:	d009      	beq.n	8000fa4 <__aeabi_dadd+0x10c>
 8000f90:	230f      	movs	r3, #15
 8000f92:	402b      	ands	r3, r5
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d005      	beq.n	8000fa4 <__aeabi_dadd+0x10c>
 8000f98:	1d2b      	adds	r3, r5, #4
 8000f9a:	42ab      	cmp	r3, r5
 8000f9c:	41ad      	sbcs	r5, r5
 8000f9e:	426d      	negs	r5, r5
 8000fa0:	44a8      	add	r8, r5
 8000fa2:	001d      	movs	r5, r3
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	d400      	bmi.n	8000fac <__aeabi_dadd+0x114>
 8000faa:	e094      	b.n	80010d6 <__aeabi_dadd+0x23e>
 8000fac:	4b97      	ldr	r3, [pc, #604]	; (800120c <__aeabi_dadd+0x374>)
 8000fae:	1c72      	adds	r2, r6, #1
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_dadd+0x11e>
 8000fb4:	e09d      	b.n	80010f2 <__aeabi_dadd+0x25a>
 8000fb6:	4641      	mov	r1, r8
 8000fb8:	4b95      	ldr	r3, [pc, #596]	; (8001210 <__aeabi_dadd+0x378>)
 8000fba:	08ed      	lsrs	r5, r5, #3
 8000fbc:	4019      	ands	r1, r3
 8000fbe:	000b      	movs	r3, r1
 8000fc0:	0552      	lsls	r2, r2, #21
 8000fc2:	0749      	lsls	r1, r1, #29
 8000fc4:	025b      	lsls	r3, r3, #9
 8000fc6:	4329      	orrs	r1, r5
 8000fc8:	0b1b      	lsrs	r3, r3, #12
 8000fca:	0d52      	lsrs	r2, r2, #21
 8000fcc:	0512      	lsls	r2, r2, #20
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	07e4      	lsls	r4, r4, #31
 8000fd2:	4323      	orrs	r3, r4
 8000fd4:	0008      	movs	r0, r1
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	bce0      	pop	{r5, r6, r7}
 8000fda:	46ba      	mov	sl, r7
 8000fdc:	46b1      	mov	r9, r6
 8000fde:	46a8      	mov	r8, r5
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d043      	beq.n	800106e <__aeabi_dadd+0x1d6>
 8000fe6:	1b8a      	subs	r2, r1, r6
 8000fe8:	2e00      	cmp	r6, #0
 8000fea:	d000      	beq.n	8000fee <__aeabi_dadd+0x156>
 8000fec:	e12a      	b.n	8001244 <__aeabi_dadd+0x3ac>
 8000fee:	464c      	mov	r4, r9
 8000ff0:	431c      	orrs	r4, r3
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x15e>
 8000ff4:	e1d1      	b.n	800139a <__aeabi_dadd+0x502>
 8000ff6:	1e54      	subs	r4, r2, #1
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x166>
 8000ffc:	e21f      	b.n	800143e <__aeabi_dadd+0x5a6>
 8000ffe:	4d83      	ldr	r5, [pc, #524]	; (800120c <__aeabi_dadd+0x374>)
 8001000:	42aa      	cmp	r2, r5
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x16e>
 8001004:	e272      	b.n	80014ec <__aeabi_dadd+0x654>
 8001006:	0022      	movs	r2, r4
 8001008:	e123      	b.n	8001252 <__aeabi_dadd+0x3ba>
 800100a:	2a00      	cmp	r2, #0
 800100c:	dc00      	bgt.n	8001010 <__aeabi_dadd+0x178>
 800100e:	e098      	b.n	8001142 <__aeabi_dadd+0x2aa>
 8001010:	2900      	cmp	r1, #0
 8001012:	d042      	beq.n	800109a <__aeabi_dadd+0x202>
 8001014:	497d      	ldr	r1, [pc, #500]	; (800120c <__aeabi_dadd+0x374>)
 8001016:	428e      	cmp	r6, r1
 8001018:	d100      	bne.n	800101c <__aeabi_dadd+0x184>
 800101a:	e0da      	b.n	80011d2 <__aeabi_dadd+0x33a>
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0028      	movs	r0, r5
 8001020:	0409      	lsls	r1, r1, #16
 8001022:	4308      	orrs	r0, r1
 8001024:	4684      	mov	ip, r0
 8001026:	2a38      	cmp	r2, #56	; 0x38
 8001028:	dd00      	ble.n	800102c <__aeabi_dadd+0x194>
 800102a:	e129      	b.n	8001280 <__aeabi_dadd+0x3e8>
 800102c:	2a1f      	cmp	r2, #31
 800102e:	dc00      	bgt.n	8001032 <__aeabi_dadd+0x19a>
 8001030:	e187      	b.n	8001342 <__aeabi_dadd+0x4aa>
 8001032:	0011      	movs	r1, r2
 8001034:	4665      	mov	r5, ip
 8001036:	3920      	subs	r1, #32
 8001038:	40cd      	lsrs	r5, r1
 800103a:	2a20      	cmp	r2, #32
 800103c:	d004      	beq.n	8001048 <__aeabi_dadd+0x1b0>
 800103e:	2040      	movs	r0, #64	; 0x40
 8001040:	4661      	mov	r1, ip
 8001042:	1a82      	subs	r2, r0, r2
 8001044:	4091      	lsls	r1, r2
 8001046:	430f      	orrs	r7, r1
 8001048:	0039      	movs	r1, r7
 800104a:	1e4f      	subs	r7, r1, #1
 800104c:	41b9      	sbcs	r1, r7
 800104e:	430d      	orrs	r5, r1
 8001050:	e11b      	b.n	800128a <__aeabi_dadd+0x3f2>
 8001052:	0029      	movs	r1, r5
 8001054:	4339      	orrs	r1, r7
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x1c2>
 8001058:	e0b5      	b.n	80011c6 <__aeabi_dadd+0x32e>
 800105a:	1e51      	subs	r1, r2, #1
 800105c:	2a01      	cmp	r2, #1
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x1ca>
 8001060:	e1ab      	b.n	80013ba <__aeabi_dadd+0x522>
 8001062:	486a      	ldr	r0, [pc, #424]	; (800120c <__aeabi_dadd+0x374>)
 8001064:	4282      	cmp	r2, r0
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x1d2>
 8001068:	e1b2      	b.n	80013d0 <__aeabi_dadd+0x538>
 800106a:	000a      	movs	r2, r1
 800106c:	e743      	b.n	8000ef6 <__aeabi_dadd+0x5e>
 800106e:	4969      	ldr	r1, [pc, #420]	; (8001214 <__aeabi_dadd+0x37c>)
 8001070:	1c75      	adds	r5, r6, #1
 8001072:	420d      	tst	r5, r1
 8001074:	d000      	beq.n	8001078 <__aeabi_dadd+0x1e0>
 8001076:	e0cf      	b.n	8001218 <__aeabi_dadd+0x380>
 8001078:	2e00      	cmp	r6, #0
 800107a:	d000      	beq.n	800107e <__aeabi_dadd+0x1e6>
 800107c:	e193      	b.n	80013a6 <__aeabi_dadd+0x50e>
 800107e:	4649      	mov	r1, r9
 8001080:	4319      	orrs	r1, r3
 8001082:	d100      	bne.n	8001086 <__aeabi_dadd+0x1ee>
 8001084:	e1d1      	b.n	800142a <__aeabi_dadd+0x592>
 8001086:	4661      	mov	r1, ip
 8001088:	4339      	orrs	r1, r7
 800108a:	d000      	beq.n	800108e <__aeabi_dadd+0x1f6>
 800108c:	e1e3      	b.n	8001456 <__aeabi_dadd+0x5be>
 800108e:	4649      	mov	r1, r9
 8001090:	0758      	lsls	r0, r3, #29
 8001092:	08c9      	lsrs	r1, r1, #3
 8001094:	4301      	orrs	r1, r0
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	e026      	b.n	80010e8 <__aeabi_dadd+0x250>
 800109a:	0029      	movs	r1, r5
 800109c:	4339      	orrs	r1, r7
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0x20a>
 80010a0:	e091      	b.n	80011c6 <__aeabi_dadd+0x32e>
 80010a2:	1e51      	subs	r1, r2, #1
 80010a4:	2a01      	cmp	r2, #1
 80010a6:	d005      	beq.n	80010b4 <__aeabi_dadd+0x21c>
 80010a8:	4858      	ldr	r0, [pc, #352]	; (800120c <__aeabi_dadd+0x374>)
 80010aa:	4282      	cmp	r2, r0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_dadd+0x218>
 80010ae:	e18f      	b.n	80013d0 <__aeabi_dadd+0x538>
 80010b0:	000a      	movs	r2, r1
 80010b2:	e7b8      	b.n	8001026 <__aeabi_dadd+0x18e>
 80010b4:	003d      	movs	r5, r7
 80010b6:	444d      	add	r5, r9
 80010b8:	454d      	cmp	r5, r9
 80010ba:	4189      	sbcs	r1, r1
 80010bc:	4463      	add	r3, ip
 80010be:	4698      	mov	r8, r3
 80010c0:	4249      	negs	r1, r1
 80010c2:	4488      	add	r8, r1
 80010c4:	4643      	mov	r3, r8
 80010c6:	2602      	movs	r6, #2
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	d500      	bpl.n	80010ce <__aeabi_dadd+0x236>
 80010cc:	e0eb      	b.n	80012a6 <__aeabi_dadd+0x40e>
 80010ce:	3e01      	subs	r6, #1
 80010d0:	076b      	lsls	r3, r5, #29
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x23e>
 80010d4:	e75c      	b.n	8000f90 <__aeabi_dadd+0xf8>
 80010d6:	4643      	mov	r3, r8
 80010d8:	08e9      	lsrs	r1, r5, #3
 80010da:	075a      	lsls	r2, r3, #29
 80010dc:	4311      	orrs	r1, r2
 80010de:	0032      	movs	r2, r6
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	484a      	ldr	r0, [pc, #296]	; (800120c <__aeabi_dadd+0x374>)
 80010e4:	4282      	cmp	r2, r0
 80010e6:	d021      	beq.n	800112c <__aeabi_dadd+0x294>
 80010e8:	031b      	lsls	r3, r3, #12
 80010ea:	0552      	lsls	r2, r2, #21
 80010ec:	0b1b      	lsrs	r3, r3, #12
 80010ee:	0d52      	lsrs	r2, r2, #21
 80010f0:	e76c      	b.n	8000fcc <__aeabi_dadd+0x134>
 80010f2:	2300      	movs	r3, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	e769      	b.n	8000fcc <__aeabi_dadd+0x134>
 80010f8:	002a      	movs	r2, r5
 80010fa:	433a      	orrs	r2, r7
 80010fc:	d069      	beq.n	80011d2 <__aeabi_dadd+0x33a>
 80010fe:	464a      	mov	r2, r9
 8001100:	0758      	lsls	r0, r3, #29
 8001102:	08d1      	lsrs	r1, r2, #3
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	031b      	lsls	r3, r3, #12
 800110a:	4308      	orrs	r0, r1
 800110c:	421a      	tst	r2, r3
 800110e:	d007      	beq.n	8001120 <__aeabi_dadd+0x288>
 8001110:	0029      	movs	r1, r5
 8001112:	08ed      	lsrs	r5, r5, #3
 8001114:	421d      	tst	r5, r3
 8001116:	d103      	bne.n	8001120 <__aeabi_dadd+0x288>
 8001118:	002a      	movs	r2, r5
 800111a:	08ff      	lsrs	r7, r7, #3
 800111c:	0748      	lsls	r0, r1, #29
 800111e:	4338      	orrs	r0, r7
 8001120:	0f43      	lsrs	r3, r0, #29
 8001122:	00c1      	lsls	r1, r0, #3
 8001124:	075b      	lsls	r3, r3, #29
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	4319      	orrs	r1, r3
 800112a:	0013      	movs	r3, r2
 800112c:	000a      	movs	r2, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	d100      	bne.n	8001134 <__aeabi_dadd+0x29c>
 8001132:	e213      	b.n	800155c <__aeabi_dadd+0x6c4>
 8001134:	2280      	movs	r2, #128	; 0x80
 8001136:	0312      	lsls	r2, r2, #12
 8001138:	4313      	orrs	r3, r2
 800113a:	031b      	lsls	r3, r3, #12
 800113c:	4a33      	ldr	r2, [pc, #204]	; (800120c <__aeabi_dadd+0x374>)
 800113e:	0b1b      	lsrs	r3, r3, #12
 8001140:	e744      	b.n	8000fcc <__aeabi_dadd+0x134>
 8001142:	2a00      	cmp	r2, #0
 8001144:	d04b      	beq.n	80011de <__aeabi_dadd+0x346>
 8001146:	1b8a      	subs	r2, r1, r6
 8001148:	2e00      	cmp	r6, #0
 800114a:	d100      	bne.n	800114e <__aeabi_dadd+0x2b6>
 800114c:	e0e7      	b.n	800131e <__aeabi_dadd+0x486>
 800114e:	482f      	ldr	r0, [pc, #188]	; (800120c <__aeabi_dadd+0x374>)
 8001150:	4281      	cmp	r1, r0
 8001152:	d100      	bne.n	8001156 <__aeabi_dadd+0x2be>
 8001154:	e195      	b.n	8001482 <__aeabi_dadd+0x5ea>
 8001156:	2080      	movs	r0, #128	; 0x80
 8001158:	0400      	lsls	r0, r0, #16
 800115a:	4303      	orrs	r3, r0
 800115c:	2a38      	cmp	r2, #56	; 0x38
 800115e:	dd00      	ble.n	8001162 <__aeabi_dadd+0x2ca>
 8001160:	e143      	b.n	80013ea <__aeabi_dadd+0x552>
 8001162:	2a1f      	cmp	r2, #31
 8001164:	dd00      	ble.n	8001168 <__aeabi_dadd+0x2d0>
 8001166:	e1db      	b.n	8001520 <__aeabi_dadd+0x688>
 8001168:	2020      	movs	r0, #32
 800116a:	001d      	movs	r5, r3
 800116c:	464e      	mov	r6, r9
 800116e:	1a80      	subs	r0, r0, r2
 8001170:	4085      	lsls	r5, r0
 8001172:	40d6      	lsrs	r6, r2
 8001174:	4335      	orrs	r5, r6
 8001176:	464e      	mov	r6, r9
 8001178:	4086      	lsls	r6, r0
 800117a:	0030      	movs	r0, r6
 800117c:	40d3      	lsrs	r3, r2
 800117e:	1e46      	subs	r6, r0, #1
 8001180:	41b0      	sbcs	r0, r6
 8001182:	449c      	add	ip, r3
 8001184:	4305      	orrs	r5, r0
 8001186:	19ed      	adds	r5, r5, r7
 8001188:	42bd      	cmp	r5, r7
 800118a:	419b      	sbcs	r3, r3
 800118c:	425b      	negs	r3, r3
 800118e:	4463      	add	r3, ip
 8001190:	4698      	mov	r8, r3
 8001192:	000e      	movs	r6, r1
 8001194:	e07f      	b.n	8001296 <__aeabi_dadd+0x3fe>
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <__aeabi_dadd+0x378>)
 8001198:	1a76      	subs	r6, r6, r1
 800119a:	4013      	ands	r3, r2
 800119c:	4698      	mov	r8, r3
 800119e:	e6f5      	b.n	8000f8c <__aeabi_dadd+0xf4>
 80011a0:	0028      	movs	r0, r5
 80011a2:	f001 fd61 	bl	8002c68 <__clzsi2>
 80011a6:	0001      	movs	r1, r0
 80011a8:	3118      	adds	r1, #24
 80011aa:	291f      	cmp	r1, #31
 80011ac:	dc00      	bgt.n	80011b0 <__aeabi_dadd+0x318>
 80011ae:	e6cf      	b.n	8000f50 <__aeabi_dadd+0xb8>
 80011b0:	002b      	movs	r3, r5
 80011b2:	3808      	subs	r0, #8
 80011b4:	4083      	lsls	r3, r0
 80011b6:	2500      	movs	r5, #0
 80011b8:	e6d2      	b.n	8000f60 <__aeabi_dadd+0xc8>
 80011ba:	4662      	mov	r2, ip
 80011bc:	433a      	orrs	r2, r7
 80011be:	0011      	movs	r1, r2
 80011c0:	1e4f      	subs	r7, r1, #1
 80011c2:	41b9      	sbcs	r1, r7
 80011c4:	e6ac      	b.n	8000f20 <__aeabi_dadd+0x88>
 80011c6:	4649      	mov	r1, r9
 80011c8:	0758      	lsls	r0, r3, #29
 80011ca:	08c9      	lsrs	r1, r1, #3
 80011cc:	4301      	orrs	r1, r0
 80011ce:	08db      	lsrs	r3, r3, #3
 80011d0:	e787      	b.n	80010e2 <__aeabi_dadd+0x24a>
 80011d2:	4649      	mov	r1, r9
 80011d4:	075a      	lsls	r2, r3, #29
 80011d6:	08c9      	lsrs	r1, r1, #3
 80011d8:	4311      	orrs	r1, r2
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	e7a6      	b.n	800112c <__aeabi_dadd+0x294>
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <__aeabi_dadd+0x37c>)
 80011e0:	1c70      	adds	r0, r6, #1
 80011e2:	4208      	tst	r0, r1
 80011e4:	d000      	beq.n	80011e8 <__aeabi_dadd+0x350>
 80011e6:	e0bb      	b.n	8001360 <__aeabi_dadd+0x4c8>
 80011e8:	2e00      	cmp	r6, #0
 80011ea:	d000      	beq.n	80011ee <__aeabi_dadd+0x356>
 80011ec:	e114      	b.n	8001418 <__aeabi_dadd+0x580>
 80011ee:	4649      	mov	r1, r9
 80011f0:	4319      	orrs	r1, r3
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x35e>
 80011f4:	e175      	b.n	80014e2 <__aeabi_dadd+0x64a>
 80011f6:	0029      	movs	r1, r5
 80011f8:	4339      	orrs	r1, r7
 80011fa:	d000      	beq.n	80011fe <__aeabi_dadd+0x366>
 80011fc:	e17e      	b.n	80014fc <__aeabi_dadd+0x664>
 80011fe:	4649      	mov	r1, r9
 8001200:	0758      	lsls	r0, r3, #29
 8001202:	08c9      	lsrs	r1, r1, #3
 8001204:	4301      	orrs	r1, r0
 8001206:	08db      	lsrs	r3, r3, #3
 8001208:	e76e      	b.n	80010e8 <__aeabi_dadd+0x250>
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	000007ff 	.word	0x000007ff
 8001210:	ff7fffff 	.word	0xff7fffff
 8001214:	000007fe 	.word	0x000007fe
 8001218:	4649      	mov	r1, r9
 800121a:	1bcd      	subs	r5, r1, r7
 800121c:	4661      	mov	r1, ip
 800121e:	1a58      	subs	r0, r3, r1
 8001220:	45a9      	cmp	r9, r5
 8001222:	4189      	sbcs	r1, r1
 8001224:	4249      	negs	r1, r1
 8001226:	4688      	mov	r8, r1
 8001228:	0001      	movs	r1, r0
 800122a:	4640      	mov	r0, r8
 800122c:	1a09      	subs	r1, r1, r0
 800122e:	4688      	mov	r8, r1
 8001230:	0209      	lsls	r1, r1, #8
 8001232:	d500      	bpl.n	8001236 <__aeabi_dadd+0x39e>
 8001234:	e0a6      	b.n	8001384 <__aeabi_dadd+0x4ec>
 8001236:	4641      	mov	r1, r8
 8001238:	4329      	orrs	r1, r5
 800123a:	d000      	beq.n	800123e <__aeabi_dadd+0x3a6>
 800123c:	e67f      	b.n	8000f3e <__aeabi_dadd+0xa6>
 800123e:	2300      	movs	r3, #0
 8001240:	2400      	movs	r4, #0
 8001242:	e751      	b.n	80010e8 <__aeabi_dadd+0x250>
 8001244:	4cc7      	ldr	r4, [pc, #796]	; (8001564 <__aeabi_dadd+0x6cc>)
 8001246:	42a1      	cmp	r1, r4
 8001248:	d100      	bne.n	800124c <__aeabi_dadd+0x3b4>
 800124a:	e0c7      	b.n	80013dc <__aeabi_dadd+0x544>
 800124c:	2480      	movs	r4, #128	; 0x80
 800124e:	0424      	lsls	r4, r4, #16
 8001250:	4323      	orrs	r3, r4
 8001252:	2a38      	cmp	r2, #56	; 0x38
 8001254:	dc54      	bgt.n	8001300 <__aeabi_dadd+0x468>
 8001256:	2a1f      	cmp	r2, #31
 8001258:	dd00      	ble.n	800125c <__aeabi_dadd+0x3c4>
 800125a:	e0cc      	b.n	80013f6 <__aeabi_dadd+0x55e>
 800125c:	2420      	movs	r4, #32
 800125e:	4648      	mov	r0, r9
 8001260:	1aa4      	subs	r4, r4, r2
 8001262:	001d      	movs	r5, r3
 8001264:	464e      	mov	r6, r9
 8001266:	40a0      	lsls	r0, r4
 8001268:	40d6      	lsrs	r6, r2
 800126a:	40a5      	lsls	r5, r4
 800126c:	0004      	movs	r4, r0
 800126e:	40d3      	lsrs	r3, r2
 8001270:	4662      	mov	r2, ip
 8001272:	4335      	orrs	r5, r6
 8001274:	1e66      	subs	r6, r4, #1
 8001276:	41b4      	sbcs	r4, r6
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	469c      	mov	ip, r3
 800127c:	4325      	orrs	r5, r4
 800127e:	e044      	b.n	800130a <__aeabi_dadd+0x472>
 8001280:	4662      	mov	r2, ip
 8001282:	433a      	orrs	r2, r7
 8001284:	0015      	movs	r5, r2
 8001286:	1e6f      	subs	r7, r5, #1
 8001288:	41bd      	sbcs	r5, r7
 800128a:	444d      	add	r5, r9
 800128c:	454d      	cmp	r5, r9
 800128e:	4189      	sbcs	r1, r1
 8001290:	4249      	negs	r1, r1
 8001292:	4688      	mov	r8, r1
 8001294:	4498      	add	r8, r3
 8001296:	4643      	mov	r3, r8
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	d400      	bmi.n	800129e <__aeabi_dadd+0x406>
 800129c:	e718      	b.n	80010d0 <__aeabi_dadd+0x238>
 800129e:	4bb1      	ldr	r3, [pc, #708]	; (8001564 <__aeabi_dadd+0x6cc>)
 80012a0:	3601      	adds	r6, #1
 80012a2:	429e      	cmp	r6, r3
 80012a4:	d049      	beq.n	800133a <__aeabi_dadd+0x4a2>
 80012a6:	4642      	mov	r2, r8
 80012a8:	4baf      	ldr	r3, [pc, #700]	; (8001568 <__aeabi_dadd+0x6d0>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	401a      	ands	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	086a      	lsrs	r2, r5, #1
 80012b2:	400d      	ands	r5, r1
 80012b4:	4315      	orrs	r5, r2
 80012b6:	07d9      	lsls	r1, r3, #31
 80012b8:	085b      	lsrs	r3, r3, #1
 80012ba:	4698      	mov	r8, r3
 80012bc:	430d      	orrs	r5, r1
 80012be:	e665      	b.n	8000f8c <__aeabi_dadd+0xf4>
 80012c0:	0018      	movs	r0, r3
 80012c2:	3e1f      	subs	r6, #31
 80012c4:	40f0      	lsrs	r0, r6
 80012c6:	2a20      	cmp	r2, #32
 80012c8:	d003      	beq.n	80012d2 <__aeabi_dadd+0x43a>
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	1a8a      	subs	r2, r1, r2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	431d      	orrs	r5, r3
 80012d2:	1e69      	subs	r1, r5, #1
 80012d4:	418d      	sbcs	r5, r1
 80012d6:	2300      	movs	r3, #0
 80012d8:	2600      	movs	r6, #0
 80012da:	4698      	mov	r8, r3
 80012dc:	4305      	orrs	r5, r0
 80012de:	e6f7      	b.n	80010d0 <__aeabi_dadd+0x238>
 80012e0:	0011      	movs	r1, r2
 80012e2:	4665      	mov	r5, ip
 80012e4:	3920      	subs	r1, #32
 80012e6:	40cd      	lsrs	r5, r1
 80012e8:	2a20      	cmp	r2, #32
 80012ea:	d004      	beq.n	80012f6 <__aeabi_dadd+0x45e>
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	4661      	mov	r1, ip
 80012f0:	1a82      	subs	r2, r0, r2
 80012f2:	4091      	lsls	r1, r2
 80012f4:	430f      	orrs	r7, r1
 80012f6:	0039      	movs	r1, r7
 80012f8:	1e4f      	subs	r7, r1, #1
 80012fa:	41b9      	sbcs	r1, r7
 80012fc:	4329      	orrs	r1, r5
 80012fe:	e60f      	b.n	8000f20 <__aeabi_dadd+0x88>
 8001300:	464a      	mov	r2, r9
 8001302:	4313      	orrs	r3, r2
 8001304:	001d      	movs	r5, r3
 8001306:	1e6b      	subs	r3, r5, #1
 8001308:	419d      	sbcs	r5, r3
 800130a:	1b7d      	subs	r5, r7, r5
 800130c:	42af      	cmp	r7, r5
 800130e:	419b      	sbcs	r3, r3
 8001310:	4662      	mov	r2, ip
 8001312:	425b      	negs	r3, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4698      	mov	r8, r3
 8001318:	4654      	mov	r4, sl
 800131a:	000e      	movs	r6, r1
 800131c:	e607      	b.n	8000f2e <__aeabi_dadd+0x96>
 800131e:	4648      	mov	r0, r9
 8001320:	4318      	orrs	r0, r3
 8001322:	d100      	bne.n	8001326 <__aeabi_dadd+0x48e>
 8001324:	e0b3      	b.n	800148e <__aeabi_dadd+0x5f6>
 8001326:	1e50      	subs	r0, r2, #1
 8001328:	2a01      	cmp	r2, #1
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x496>
 800132c:	e10d      	b.n	800154a <__aeabi_dadd+0x6b2>
 800132e:	4d8d      	ldr	r5, [pc, #564]	; (8001564 <__aeabi_dadd+0x6cc>)
 8001330:	42aa      	cmp	r2, r5
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x49e>
 8001334:	e0a5      	b.n	8001482 <__aeabi_dadd+0x5ea>
 8001336:	0002      	movs	r2, r0
 8001338:	e710      	b.n	800115c <__aeabi_dadd+0x2c4>
 800133a:	0032      	movs	r2, r6
 800133c:	2300      	movs	r3, #0
 800133e:	2100      	movs	r1, #0
 8001340:	e644      	b.n	8000fcc <__aeabi_dadd+0x134>
 8001342:	2120      	movs	r1, #32
 8001344:	0038      	movs	r0, r7
 8001346:	1a89      	subs	r1, r1, r2
 8001348:	4665      	mov	r5, ip
 800134a:	408f      	lsls	r7, r1
 800134c:	408d      	lsls	r5, r1
 800134e:	40d0      	lsrs	r0, r2
 8001350:	1e79      	subs	r1, r7, #1
 8001352:	418f      	sbcs	r7, r1
 8001354:	4305      	orrs	r5, r0
 8001356:	433d      	orrs	r5, r7
 8001358:	4667      	mov	r7, ip
 800135a:	40d7      	lsrs	r7, r2
 800135c:	19db      	adds	r3, r3, r7
 800135e:	e794      	b.n	800128a <__aeabi_dadd+0x3f2>
 8001360:	4a80      	ldr	r2, [pc, #512]	; (8001564 <__aeabi_dadd+0x6cc>)
 8001362:	4290      	cmp	r0, r2
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x4d0>
 8001366:	e0ec      	b.n	8001542 <__aeabi_dadd+0x6aa>
 8001368:	0039      	movs	r1, r7
 800136a:	4449      	add	r1, r9
 800136c:	4549      	cmp	r1, r9
 800136e:	4192      	sbcs	r2, r2
 8001370:	4463      	add	r3, ip
 8001372:	4252      	negs	r2, r2
 8001374:	189b      	adds	r3, r3, r2
 8001376:	07dd      	lsls	r5, r3, #31
 8001378:	0849      	lsrs	r1, r1, #1
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	4698      	mov	r8, r3
 800137e:	0006      	movs	r6, r0
 8001380:	430d      	orrs	r5, r1
 8001382:	e6a5      	b.n	80010d0 <__aeabi_dadd+0x238>
 8001384:	464a      	mov	r2, r9
 8001386:	1abd      	subs	r5, r7, r2
 8001388:	42af      	cmp	r7, r5
 800138a:	4189      	sbcs	r1, r1
 800138c:	4662      	mov	r2, ip
 800138e:	4249      	negs	r1, r1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	1a5b      	subs	r3, r3, r1
 8001394:	4698      	mov	r8, r3
 8001396:	4654      	mov	r4, sl
 8001398:	e5d1      	b.n	8000f3e <__aeabi_dadd+0xa6>
 800139a:	076c      	lsls	r4, r5, #29
 800139c:	08f9      	lsrs	r1, r7, #3
 800139e:	4321      	orrs	r1, r4
 80013a0:	08eb      	lsrs	r3, r5, #3
 80013a2:	0004      	movs	r4, r0
 80013a4:	e69d      	b.n	80010e2 <__aeabi_dadd+0x24a>
 80013a6:	464a      	mov	r2, r9
 80013a8:	431a      	orrs	r2, r3
 80013aa:	d175      	bne.n	8001498 <__aeabi_dadd+0x600>
 80013ac:	4661      	mov	r1, ip
 80013ae:	4339      	orrs	r1, r7
 80013b0:	d114      	bne.n	80013dc <__aeabi_dadd+0x544>
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	2400      	movs	r4, #0
 80013b6:	031b      	lsls	r3, r3, #12
 80013b8:	e6bc      	b.n	8001134 <__aeabi_dadd+0x29c>
 80013ba:	464a      	mov	r2, r9
 80013bc:	1bd5      	subs	r5, r2, r7
 80013be:	45a9      	cmp	r9, r5
 80013c0:	4189      	sbcs	r1, r1
 80013c2:	4662      	mov	r2, ip
 80013c4:	4249      	negs	r1, r1
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	1a5b      	subs	r3, r3, r1
 80013ca:	4698      	mov	r8, r3
 80013cc:	2601      	movs	r6, #1
 80013ce:	e5ae      	b.n	8000f2e <__aeabi_dadd+0x96>
 80013d0:	464a      	mov	r2, r9
 80013d2:	08d1      	lsrs	r1, r2, #3
 80013d4:	075a      	lsls	r2, r3, #29
 80013d6:	4311      	orrs	r1, r2
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	e6a7      	b.n	800112c <__aeabi_dadd+0x294>
 80013dc:	4663      	mov	r3, ip
 80013de:	08f9      	lsrs	r1, r7, #3
 80013e0:	075a      	lsls	r2, r3, #29
 80013e2:	4654      	mov	r4, sl
 80013e4:	4311      	orrs	r1, r2
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	e6a0      	b.n	800112c <__aeabi_dadd+0x294>
 80013ea:	464a      	mov	r2, r9
 80013ec:	4313      	orrs	r3, r2
 80013ee:	001d      	movs	r5, r3
 80013f0:	1e6b      	subs	r3, r5, #1
 80013f2:	419d      	sbcs	r5, r3
 80013f4:	e6c7      	b.n	8001186 <__aeabi_dadd+0x2ee>
 80013f6:	0014      	movs	r4, r2
 80013f8:	001e      	movs	r6, r3
 80013fa:	3c20      	subs	r4, #32
 80013fc:	40e6      	lsrs	r6, r4
 80013fe:	2a20      	cmp	r2, #32
 8001400:	d005      	beq.n	800140e <__aeabi_dadd+0x576>
 8001402:	2440      	movs	r4, #64	; 0x40
 8001404:	1aa2      	subs	r2, r4, r2
 8001406:	4093      	lsls	r3, r2
 8001408:	464a      	mov	r2, r9
 800140a:	431a      	orrs	r2, r3
 800140c:	4691      	mov	r9, r2
 800140e:	464d      	mov	r5, r9
 8001410:	1e6b      	subs	r3, r5, #1
 8001412:	419d      	sbcs	r5, r3
 8001414:	4335      	orrs	r5, r6
 8001416:	e778      	b.n	800130a <__aeabi_dadd+0x472>
 8001418:	464a      	mov	r2, r9
 800141a:	431a      	orrs	r2, r3
 800141c:	d000      	beq.n	8001420 <__aeabi_dadd+0x588>
 800141e:	e66b      	b.n	80010f8 <__aeabi_dadd+0x260>
 8001420:	076b      	lsls	r3, r5, #29
 8001422:	08f9      	lsrs	r1, r7, #3
 8001424:	4319      	orrs	r1, r3
 8001426:	08eb      	lsrs	r3, r5, #3
 8001428:	e680      	b.n	800112c <__aeabi_dadd+0x294>
 800142a:	4661      	mov	r1, ip
 800142c:	4339      	orrs	r1, r7
 800142e:	d054      	beq.n	80014da <__aeabi_dadd+0x642>
 8001430:	4663      	mov	r3, ip
 8001432:	08f9      	lsrs	r1, r7, #3
 8001434:	075c      	lsls	r4, r3, #29
 8001436:	4321      	orrs	r1, r4
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	0004      	movs	r4, r0
 800143c:	e654      	b.n	80010e8 <__aeabi_dadd+0x250>
 800143e:	464a      	mov	r2, r9
 8001440:	1abd      	subs	r5, r7, r2
 8001442:	42af      	cmp	r7, r5
 8001444:	4189      	sbcs	r1, r1
 8001446:	4662      	mov	r2, ip
 8001448:	4249      	negs	r1, r1
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	1a5b      	subs	r3, r3, r1
 800144e:	4698      	mov	r8, r3
 8001450:	0004      	movs	r4, r0
 8001452:	2601      	movs	r6, #1
 8001454:	e56b      	b.n	8000f2e <__aeabi_dadd+0x96>
 8001456:	464a      	mov	r2, r9
 8001458:	1bd5      	subs	r5, r2, r7
 800145a:	45a9      	cmp	r9, r5
 800145c:	4189      	sbcs	r1, r1
 800145e:	4662      	mov	r2, ip
 8001460:	4249      	negs	r1, r1
 8001462:	1a9a      	subs	r2, r3, r2
 8001464:	1a52      	subs	r2, r2, r1
 8001466:	4690      	mov	r8, r2
 8001468:	0212      	lsls	r2, r2, #8
 800146a:	d532      	bpl.n	80014d2 <__aeabi_dadd+0x63a>
 800146c:	464a      	mov	r2, r9
 800146e:	1abd      	subs	r5, r7, r2
 8001470:	42af      	cmp	r7, r5
 8001472:	4189      	sbcs	r1, r1
 8001474:	4662      	mov	r2, ip
 8001476:	4249      	negs	r1, r1
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	1a5b      	subs	r3, r3, r1
 800147c:	4698      	mov	r8, r3
 800147e:	0004      	movs	r4, r0
 8001480:	e584      	b.n	8000f8c <__aeabi_dadd+0xf4>
 8001482:	4663      	mov	r3, ip
 8001484:	08f9      	lsrs	r1, r7, #3
 8001486:	075a      	lsls	r2, r3, #29
 8001488:	4311      	orrs	r1, r2
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e64e      	b.n	800112c <__aeabi_dadd+0x294>
 800148e:	08f9      	lsrs	r1, r7, #3
 8001490:	0768      	lsls	r0, r5, #29
 8001492:	4301      	orrs	r1, r0
 8001494:	08eb      	lsrs	r3, r5, #3
 8001496:	e624      	b.n	80010e2 <__aeabi_dadd+0x24a>
 8001498:	4662      	mov	r2, ip
 800149a:	433a      	orrs	r2, r7
 800149c:	d100      	bne.n	80014a0 <__aeabi_dadd+0x608>
 800149e:	e698      	b.n	80011d2 <__aeabi_dadd+0x33a>
 80014a0:	464a      	mov	r2, r9
 80014a2:	08d1      	lsrs	r1, r2, #3
 80014a4:	075a      	lsls	r2, r3, #29
 80014a6:	4311      	orrs	r1, r2
 80014a8:	08da      	lsrs	r2, r3, #3
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	031b      	lsls	r3, r3, #12
 80014ae:	421a      	tst	r2, r3
 80014b0:	d008      	beq.n	80014c4 <__aeabi_dadd+0x62c>
 80014b2:	4660      	mov	r0, ip
 80014b4:	08c5      	lsrs	r5, r0, #3
 80014b6:	421d      	tst	r5, r3
 80014b8:	d104      	bne.n	80014c4 <__aeabi_dadd+0x62c>
 80014ba:	4654      	mov	r4, sl
 80014bc:	002a      	movs	r2, r5
 80014be:	08f9      	lsrs	r1, r7, #3
 80014c0:	0743      	lsls	r3, r0, #29
 80014c2:	4319      	orrs	r1, r3
 80014c4:	0f4b      	lsrs	r3, r1, #29
 80014c6:	00c9      	lsls	r1, r1, #3
 80014c8:	075b      	lsls	r3, r3, #29
 80014ca:	08c9      	lsrs	r1, r1, #3
 80014cc:	4319      	orrs	r1, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	e62c      	b.n	800112c <__aeabi_dadd+0x294>
 80014d2:	4641      	mov	r1, r8
 80014d4:	4329      	orrs	r1, r5
 80014d6:	d000      	beq.n	80014da <__aeabi_dadd+0x642>
 80014d8:	e5fa      	b.n	80010d0 <__aeabi_dadd+0x238>
 80014da:	2300      	movs	r3, #0
 80014dc:	000a      	movs	r2, r1
 80014de:	2400      	movs	r4, #0
 80014e0:	e602      	b.n	80010e8 <__aeabi_dadd+0x250>
 80014e2:	076b      	lsls	r3, r5, #29
 80014e4:	08f9      	lsrs	r1, r7, #3
 80014e6:	4319      	orrs	r1, r3
 80014e8:	08eb      	lsrs	r3, r5, #3
 80014ea:	e5fd      	b.n	80010e8 <__aeabi_dadd+0x250>
 80014ec:	4663      	mov	r3, ip
 80014ee:	08f9      	lsrs	r1, r7, #3
 80014f0:	075b      	lsls	r3, r3, #29
 80014f2:	4319      	orrs	r1, r3
 80014f4:	4663      	mov	r3, ip
 80014f6:	0004      	movs	r4, r0
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	e617      	b.n	800112c <__aeabi_dadd+0x294>
 80014fc:	003d      	movs	r5, r7
 80014fe:	444d      	add	r5, r9
 8001500:	4463      	add	r3, ip
 8001502:	454d      	cmp	r5, r9
 8001504:	4189      	sbcs	r1, r1
 8001506:	4698      	mov	r8, r3
 8001508:	4249      	negs	r1, r1
 800150a:	4488      	add	r8, r1
 800150c:	4643      	mov	r3, r8
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	d400      	bmi.n	8001514 <__aeabi_dadd+0x67c>
 8001512:	e5dd      	b.n	80010d0 <__aeabi_dadd+0x238>
 8001514:	4642      	mov	r2, r8
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <__aeabi_dadd+0x6d0>)
 8001518:	2601      	movs	r6, #1
 800151a:	401a      	ands	r2, r3
 800151c:	4690      	mov	r8, r2
 800151e:	e5d7      	b.n	80010d0 <__aeabi_dadd+0x238>
 8001520:	0010      	movs	r0, r2
 8001522:	001e      	movs	r6, r3
 8001524:	3820      	subs	r0, #32
 8001526:	40c6      	lsrs	r6, r0
 8001528:	2a20      	cmp	r2, #32
 800152a:	d005      	beq.n	8001538 <__aeabi_dadd+0x6a0>
 800152c:	2040      	movs	r0, #64	; 0x40
 800152e:	1a82      	subs	r2, r0, r2
 8001530:	4093      	lsls	r3, r2
 8001532:	464a      	mov	r2, r9
 8001534:	431a      	orrs	r2, r3
 8001536:	4691      	mov	r9, r2
 8001538:	464d      	mov	r5, r9
 800153a:	1e6b      	subs	r3, r5, #1
 800153c:	419d      	sbcs	r5, r3
 800153e:	4335      	orrs	r5, r6
 8001540:	e621      	b.n	8001186 <__aeabi_dadd+0x2ee>
 8001542:	0002      	movs	r2, r0
 8001544:	2300      	movs	r3, #0
 8001546:	2100      	movs	r1, #0
 8001548:	e540      	b.n	8000fcc <__aeabi_dadd+0x134>
 800154a:	464a      	mov	r2, r9
 800154c:	19d5      	adds	r5, r2, r7
 800154e:	42bd      	cmp	r5, r7
 8001550:	4189      	sbcs	r1, r1
 8001552:	4463      	add	r3, ip
 8001554:	4698      	mov	r8, r3
 8001556:	4249      	negs	r1, r1
 8001558:	4488      	add	r8, r1
 800155a:	e5b3      	b.n	80010c4 <__aeabi_dadd+0x22c>
 800155c:	2100      	movs	r1, #0
 800155e:	4a01      	ldr	r2, [pc, #4]	; (8001564 <__aeabi_dadd+0x6cc>)
 8001560:	000b      	movs	r3, r1
 8001562:	e533      	b.n	8000fcc <__aeabi_dadd+0x134>
 8001564:	000007ff 	.word	0x000007ff
 8001568:	ff7fffff 	.word	0xff7fffff

0800156c <__aeabi_ddiv>:
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	4657      	mov	r7, sl
 8001570:	464e      	mov	r6, r9
 8001572:	4645      	mov	r5, r8
 8001574:	46de      	mov	lr, fp
 8001576:	b5e0      	push	{r5, r6, r7, lr}
 8001578:	4681      	mov	r9, r0
 800157a:	0005      	movs	r5, r0
 800157c:	030c      	lsls	r4, r1, #12
 800157e:	0048      	lsls	r0, r1, #1
 8001580:	4692      	mov	sl, r2
 8001582:	001f      	movs	r7, r3
 8001584:	b085      	sub	sp, #20
 8001586:	0b24      	lsrs	r4, r4, #12
 8001588:	0d40      	lsrs	r0, r0, #21
 800158a:	0fce      	lsrs	r6, r1, #31
 800158c:	2800      	cmp	r0, #0
 800158e:	d059      	beq.n	8001644 <__aeabi_ddiv+0xd8>
 8001590:	4b87      	ldr	r3, [pc, #540]	; (80017b0 <__aeabi_ddiv+0x244>)
 8001592:	4298      	cmp	r0, r3
 8001594:	d100      	bne.n	8001598 <__aeabi_ddiv+0x2c>
 8001596:	e098      	b.n	80016ca <__aeabi_ddiv+0x15e>
 8001598:	0f6b      	lsrs	r3, r5, #29
 800159a:	00e4      	lsls	r4, r4, #3
 800159c:	431c      	orrs	r4, r3
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	4323      	orrs	r3, r4
 80015a4:	4698      	mov	r8, r3
 80015a6:	4b83      	ldr	r3, [pc, #524]	; (80017b4 <__aeabi_ddiv+0x248>)
 80015a8:	00ed      	lsls	r5, r5, #3
 80015aa:	469b      	mov	fp, r3
 80015ac:	2300      	movs	r3, #0
 80015ae:	4699      	mov	r9, r3
 80015b0:	4483      	add	fp, r0
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	033c      	lsls	r4, r7, #12
 80015b6:	007b      	lsls	r3, r7, #1
 80015b8:	4650      	mov	r0, sl
 80015ba:	0b24      	lsrs	r4, r4, #12
 80015bc:	0d5b      	lsrs	r3, r3, #21
 80015be:	0fff      	lsrs	r7, r7, #31
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d067      	beq.n	8001694 <__aeabi_ddiv+0x128>
 80015c4:	4a7a      	ldr	r2, [pc, #488]	; (80017b0 <__aeabi_ddiv+0x244>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d018      	beq.n	80015fc <__aeabi_ddiv+0x90>
 80015ca:	497a      	ldr	r1, [pc, #488]	; (80017b4 <__aeabi_ddiv+0x248>)
 80015cc:	0f42      	lsrs	r2, r0, #29
 80015ce:	468c      	mov	ip, r1
 80015d0:	00e4      	lsls	r4, r4, #3
 80015d2:	4659      	mov	r1, fp
 80015d4:	4314      	orrs	r4, r2
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	4463      	add	r3, ip
 80015da:	0412      	lsls	r2, r2, #16
 80015dc:	1acb      	subs	r3, r1, r3
 80015de:	4314      	orrs	r4, r2
 80015e0:	469b      	mov	fp, r3
 80015e2:	00c2      	lsls	r2, r0, #3
 80015e4:	2000      	movs	r0, #0
 80015e6:	0033      	movs	r3, r6
 80015e8:	407b      	eors	r3, r7
 80015ea:	469a      	mov	sl, r3
 80015ec:	464b      	mov	r3, r9
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	d900      	bls.n	80015f4 <__aeabi_ddiv+0x88>
 80015f2:	e0ef      	b.n	80017d4 <__aeabi_ddiv+0x268>
 80015f4:	4970      	ldr	r1, [pc, #448]	; (80017b8 <__aeabi_ddiv+0x24c>)
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	58cb      	ldr	r3, [r1, r3]
 80015fa:	469f      	mov	pc, r3
 80015fc:	4b6f      	ldr	r3, [pc, #444]	; (80017bc <__aeabi_ddiv+0x250>)
 80015fe:	4652      	mov	r2, sl
 8001600:	469c      	mov	ip, r3
 8001602:	4322      	orrs	r2, r4
 8001604:	44e3      	add	fp, ip
 8001606:	2a00      	cmp	r2, #0
 8001608:	d000      	beq.n	800160c <__aeabi_ddiv+0xa0>
 800160a:	e095      	b.n	8001738 <__aeabi_ddiv+0x1cc>
 800160c:	4649      	mov	r1, r9
 800160e:	2302      	movs	r3, #2
 8001610:	4319      	orrs	r1, r3
 8001612:	4689      	mov	r9, r1
 8001614:	2400      	movs	r4, #0
 8001616:	2002      	movs	r0, #2
 8001618:	e7e5      	b.n	80015e6 <__aeabi_ddiv+0x7a>
 800161a:	2300      	movs	r3, #0
 800161c:	2400      	movs	r4, #0
 800161e:	2500      	movs	r5, #0
 8001620:	4652      	mov	r2, sl
 8001622:	051b      	lsls	r3, r3, #20
 8001624:	4323      	orrs	r3, r4
 8001626:	07d2      	lsls	r2, r2, #31
 8001628:	4313      	orrs	r3, r2
 800162a:	0028      	movs	r0, r5
 800162c:	0019      	movs	r1, r3
 800162e:	b005      	add	sp, #20
 8001630:	bcf0      	pop	{r4, r5, r6, r7}
 8001632:	46bb      	mov	fp, r7
 8001634:	46b2      	mov	sl, r6
 8001636:	46a9      	mov	r9, r5
 8001638:	46a0      	mov	r8, r4
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163c:	2400      	movs	r4, #0
 800163e:	2500      	movs	r5, #0
 8001640:	4b5b      	ldr	r3, [pc, #364]	; (80017b0 <__aeabi_ddiv+0x244>)
 8001642:	e7ed      	b.n	8001620 <__aeabi_ddiv+0xb4>
 8001644:	464b      	mov	r3, r9
 8001646:	4323      	orrs	r3, r4
 8001648:	4698      	mov	r8, r3
 800164a:	d100      	bne.n	800164e <__aeabi_ddiv+0xe2>
 800164c:	e089      	b.n	8001762 <__aeabi_ddiv+0x1f6>
 800164e:	2c00      	cmp	r4, #0
 8001650:	d100      	bne.n	8001654 <__aeabi_ddiv+0xe8>
 8001652:	e1e0      	b.n	8001a16 <__aeabi_ddiv+0x4aa>
 8001654:	0020      	movs	r0, r4
 8001656:	f001 fb07 	bl	8002c68 <__clzsi2>
 800165a:	0001      	movs	r1, r0
 800165c:	0002      	movs	r2, r0
 800165e:	390b      	subs	r1, #11
 8001660:	231d      	movs	r3, #29
 8001662:	1a5b      	subs	r3, r3, r1
 8001664:	4649      	mov	r1, r9
 8001666:	0010      	movs	r0, r2
 8001668:	40d9      	lsrs	r1, r3
 800166a:	3808      	subs	r0, #8
 800166c:	4084      	lsls	r4, r0
 800166e:	000b      	movs	r3, r1
 8001670:	464d      	mov	r5, r9
 8001672:	4323      	orrs	r3, r4
 8001674:	4698      	mov	r8, r3
 8001676:	4085      	lsls	r5, r0
 8001678:	4851      	ldr	r0, [pc, #324]	; (80017c0 <__aeabi_ddiv+0x254>)
 800167a:	033c      	lsls	r4, r7, #12
 800167c:	1a83      	subs	r3, r0, r2
 800167e:	469b      	mov	fp, r3
 8001680:	2300      	movs	r3, #0
 8001682:	4699      	mov	r9, r3
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	007b      	lsls	r3, r7, #1
 8001688:	4650      	mov	r0, sl
 800168a:	0b24      	lsrs	r4, r4, #12
 800168c:	0d5b      	lsrs	r3, r3, #21
 800168e:	0fff      	lsrs	r7, r7, #31
 8001690:	2b00      	cmp	r3, #0
 8001692:	d197      	bne.n	80015c4 <__aeabi_ddiv+0x58>
 8001694:	4652      	mov	r2, sl
 8001696:	4322      	orrs	r2, r4
 8001698:	d055      	beq.n	8001746 <__aeabi_ddiv+0x1da>
 800169a:	2c00      	cmp	r4, #0
 800169c:	d100      	bne.n	80016a0 <__aeabi_ddiv+0x134>
 800169e:	e1ca      	b.n	8001a36 <__aeabi_ddiv+0x4ca>
 80016a0:	0020      	movs	r0, r4
 80016a2:	f001 fae1 	bl	8002c68 <__clzsi2>
 80016a6:	0002      	movs	r2, r0
 80016a8:	3a0b      	subs	r2, #11
 80016aa:	231d      	movs	r3, #29
 80016ac:	0001      	movs	r1, r0
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	4652      	mov	r2, sl
 80016b2:	3908      	subs	r1, #8
 80016b4:	40da      	lsrs	r2, r3
 80016b6:	408c      	lsls	r4, r1
 80016b8:	4314      	orrs	r4, r2
 80016ba:	4652      	mov	r2, sl
 80016bc:	408a      	lsls	r2, r1
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <__aeabi_ddiv+0x258>)
 80016c0:	4458      	add	r0, fp
 80016c2:	469b      	mov	fp, r3
 80016c4:	4483      	add	fp, r0
 80016c6:	2000      	movs	r0, #0
 80016c8:	e78d      	b.n	80015e6 <__aeabi_ddiv+0x7a>
 80016ca:	464b      	mov	r3, r9
 80016cc:	4323      	orrs	r3, r4
 80016ce:	4698      	mov	r8, r3
 80016d0:	d140      	bne.n	8001754 <__aeabi_ddiv+0x1e8>
 80016d2:	2308      	movs	r3, #8
 80016d4:	4699      	mov	r9, r3
 80016d6:	3b06      	subs	r3, #6
 80016d8:	2500      	movs	r5, #0
 80016da:	4683      	mov	fp, r0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	e769      	b.n	80015b4 <__aeabi_ddiv+0x48>
 80016e0:	46b2      	mov	sl, r6
 80016e2:	9b00      	ldr	r3, [sp, #0]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d0a9      	beq.n	800163c <__aeabi_ddiv+0xd0>
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d100      	bne.n	80016ee <__aeabi_ddiv+0x182>
 80016ec:	e211      	b.n	8001b12 <__aeabi_ddiv+0x5a6>
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d093      	beq.n	800161a <__aeabi_ddiv+0xae>
 80016f2:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <__aeabi_ddiv+0x25c>)
 80016f4:	445a      	add	r2, fp
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	dc00      	bgt.n	80016fc <__aeabi_ddiv+0x190>
 80016fa:	e13c      	b.n	8001976 <__aeabi_ddiv+0x40a>
 80016fc:	076b      	lsls	r3, r5, #29
 80016fe:	d000      	beq.n	8001702 <__aeabi_ddiv+0x196>
 8001700:	e1a7      	b.n	8001a52 <__aeabi_ddiv+0x4e6>
 8001702:	08ed      	lsrs	r5, r5, #3
 8001704:	4643      	mov	r3, r8
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	d506      	bpl.n	8001718 <__aeabi_ddiv+0x1ac>
 800170a:	4642      	mov	r2, r8
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <__aeabi_ddiv+0x260>)
 800170e:	401a      	ands	r2, r3
 8001710:	4690      	mov	r8, r2
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	00d2      	lsls	r2, r2, #3
 8001716:	445a      	add	r2, fp
 8001718:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <__aeabi_ddiv+0x264>)
 800171a:	429a      	cmp	r2, r3
 800171c:	dc8e      	bgt.n	800163c <__aeabi_ddiv+0xd0>
 800171e:	4643      	mov	r3, r8
 8001720:	0552      	lsls	r2, r2, #21
 8001722:	0758      	lsls	r0, r3, #29
 8001724:	025c      	lsls	r4, r3, #9
 8001726:	4305      	orrs	r5, r0
 8001728:	0b24      	lsrs	r4, r4, #12
 800172a:	0d53      	lsrs	r3, r2, #21
 800172c:	e778      	b.n	8001620 <__aeabi_ddiv+0xb4>
 800172e:	46ba      	mov	sl, r7
 8001730:	46a0      	mov	r8, r4
 8001732:	0015      	movs	r5, r2
 8001734:	9000      	str	r0, [sp, #0]
 8001736:	e7d4      	b.n	80016e2 <__aeabi_ddiv+0x176>
 8001738:	464a      	mov	r2, r9
 800173a:	2303      	movs	r3, #3
 800173c:	431a      	orrs	r2, r3
 800173e:	4691      	mov	r9, r2
 8001740:	2003      	movs	r0, #3
 8001742:	4652      	mov	r2, sl
 8001744:	e74f      	b.n	80015e6 <__aeabi_ddiv+0x7a>
 8001746:	4649      	mov	r1, r9
 8001748:	2301      	movs	r3, #1
 800174a:	4319      	orrs	r1, r3
 800174c:	4689      	mov	r9, r1
 800174e:	2400      	movs	r4, #0
 8001750:	2001      	movs	r0, #1
 8001752:	e748      	b.n	80015e6 <__aeabi_ddiv+0x7a>
 8001754:	230c      	movs	r3, #12
 8001756:	4699      	mov	r9, r3
 8001758:	3b09      	subs	r3, #9
 800175a:	46a0      	mov	r8, r4
 800175c:	4683      	mov	fp, r0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	e728      	b.n	80015b4 <__aeabi_ddiv+0x48>
 8001762:	2304      	movs	r3, #4
 8001764:	4699      	mov	r9, r3
 8001766:	2300      	movs	r3, #0
 8001768:	469b      	mov	fp, r3
 800176a:	3301      	adds	r3, #1
 800176c:	2500      	movs	r5, #0
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	e720      	b.n	80015b4 <__aeabi_ddiv+0x48>
 8001772:	2300      	movs	r3, #0
 8001774:	2480      	movs	r4, #128	; 0x80
 8001776:	469a      	mov	sl, r3
 8001778:	2500      	movs	r5, #0
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <__aeabi_ddiv+0x244>)
 800177c:	0324      	lsls	r4, r4, #12
 800177e:	e74f      	b.n	8001620 <__aeabi_ddiv+0xb4>
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	4641      	mov	r1, r8
 8001784:	031b      	lsls	r3, r3, #12
 8001786:	4219      	tst	r1, r3
 8001788:	d008      	beq.n	800179c <__aeabi_ddiv+0x230>
 800178a:	421c      	tst	r4, r3
 800178c:	d106      	bne.n	800179c <__aeabi_ddiv+0x230>
 800178e:	431c      	orrs	r4, r3
 8001790:	0324      	lsls	r4, r4, #12
 8001792:	46ba      	mov	sl, r7
 8001794:	0015      	movs	r5, r2
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <__aeabi_ddiv+0x244>)
 8001798:	0b24      	lsrs	r4, r4, #12
 800179a:	e741      	b.n	8001620 <__aeabi_ddiv+0xb4>
 800179c:	2480      	movs	r4, #128	; 0x80
 800179e:	4643      	mov	r3, r8
 80017a0:	0324      	lsls	r4, r4, #12
 80017a2:	431c      	orrs	r4, r3
 80017a4:	0324      	lsls	r4, r4, #12
 80017a6:	46b2      	mov	sl, r6
 80017a8:	4b01      	ldr	r3, [pc, #4]	; (80017b0 <__aeabi_ddiv+0x244>)
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	e738      	b.n	8001620 <__aeabi_ddiv+0xb4>
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	000007ff 	.word	0x000007ff
 80017b4:	fffffc01 	.word	0xfffffc01
 80017b8:	08017a28 	.word	0x08017a28
 80017bc:	fffff801 	.word	0xfffff801
 80017c0:	fffffc0d 	.word	0xfffffc0d
 80017c4:	000003f3 	.word	0x000003f3
 80017c8:	000003ff 	.word	0x000003ff
 80017cc:	feffffff 	.word	0xfeffffff
 80017d0:	000007fe 	.word	0x000007fe
 80017d4:	4544      	cmp	r4, r8
 80017d6:	d200      	bcs.n	80017da <__aeabi_ddiv+0x26e>
 80017d8:	e116      	b.n	8001a08 <__aeabi_ddiv+0x49c>
 80017da:	d100      	bne.n	80017de <__aeabi_ddiv+0x272>
 80017dc:	e111      	b.n	8001a02 <__aeabi_ddiv+0x496>
 80017de:	2301      	movs	r3, #1
 80017e0:	425b      	negs	r3, r3
 80017e2:	469c      	mov	ip, r3
 80017e4:	002e      	movs	r6, r5
 80017e6:	4640      	mov	r0, r8
 80017e8:	2500      	movs	r5, #0
 80017ea:	44e3      	add	fp, ip
 80017ec:	0223      	lsls	r3, r4, #8
 80017ee:	0e14      	lsrs	r4, r2, #24
 80017f0:	431c      	orrs	r4, r3
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	4699      	mov	r9, r3
 80017f6:	0423      	lsls	r3, r4, #16
 80017f8:	0c1f      	lsrs	r7, r3, #16
 80017fa:	0212      	lsls	r2, r2, #8
 80017fc:	4649      	mov	r1, r9
 80017fe:	9200      	str	r2, [sp, #0]
 8001800:	9701      	str	r7, [sp, #4]
 8001802:	f7fe fd2b 	bl	800025c <__aeabi_uidivmod>
 8001806:	0002      	movs	r2, r0
 8001808:	437a      	muls	r2, r7
 800180a:	040b      	lsls	r3, r1, #16
 800180c:	0c31      	lsrs	r1, r6, #16
 800180e:	4680      	mov	r8, r0
 8001810:	4319      	orrs	r1, r3
 8001812:	428a      	cmp	r2, r1
 8001814:	d90b      	bls.n	800182e <__aeabi_ddiv+0x2c2>
 8001816:	2301      	movs	r3, #1
 8001818:	425b      	negs	r3, r3
 800181a:	469c      	mov	ip, r3
 800181c:	1909      	adds	r1, r1, r4
 800181e:	44e0      	add	r8, ip
 8001820:	428c      	cmp	r4, r1
 8001822:	d804      	bhi.n	800182e <__aeabi_ddiv+0x2c2>
 8001824:	428a      	cmp	r2, r1
 8001826:	d902      	bls.n	800182e <__aeabi_ddiv+0x2c2>
 8001828:	1e83      	subs	r3, r0, #2
 800182a:	4698      	mov	r8, r3
 800182c:	1909      	adds	r1, r1, r4
 800182e:	1a88      	subs	r0, r1, r2
 8001830:	4649      	mov	r1, r9
 8001832:	f7fe fd13 	bl	800025c <__aeabi_uidivmod>
 8001836:	0409      	lsls	r1, r1, #16
 8001838:	468c      	mov	ip, r1
 800183a:	0431      	lsls	r1, r6, #16
 800183c:	4666      	mov	r6, ip
 800183e:	9a01      	ldr	r2, [sp, #4]
 8001840:	0c09      	lsrs	r1, r1, #16
 8001842:	4342      	muls	r2, r0
 8001844:	0003      	movs	r3, r0
 8001846:	4331      	orrs	r1, r6
 8001848:	428a      	cmp	r2, r1
 800184a:	d904      	bls.n	8001856 <__aeabi_ddiv+0x2ea>
 800184c:	1909      	adds	r1, r1, r4
 800184e:	3b01      	subs	r3, #1
 8001850:	428c      	cmp	r4, r1
 8001852:	d800      	bhi.n	8001856 <__aeabi_ddiv+0x2ea>
 8001854:	e111      	b.n	8001a7a <__aeabi_ddiv+0x50e>
 8001856:	1a89      	subs	r1, r1, r2
 8001858:	4642      	mov	r2, r8
 800185a:	9e00      	ldr	r6, [sp, #0]
 800185c:	0412      	lsls	r2, r2, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	0c33      	lsrs	r3, r6, #16
 8001862:	001f      	movs	r7, r3
 8001864:	0c10      	lsrs	r0, r2, #16
 8001866:	4690      	mov	r8, r2
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	0413      	lsls	r3, r2, #16
 800186c:	0432      	lsls	r2, r6, #16
 800186e:	0c16      	lsrs	r6, r2, #16
 8001870:	0032      	movs	r2, r6
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	435a      	muls	r2, r3
 8001876:	9603      	str	r6, [sp, #12]
 8001878:	437b      	muls	r3, r7
 800187a:	4346      	muls	r6, r0
 800187c:	4378      	muls	r0, r7
 800187e:	0c17      	lsrs	r7, r2, #16
 8001880:	46bc      	mov	ip, r7
 8001882:	199b      	adds	r3, r3, r6
 8001884:	4463      	add	r3, ip
 8001886:	429e      	cmp	r6, r3
 8001888:	d903      	bls.n	8001892 <__aeabi_ddiv+0x326>
 800188a:	2680      	movs	r6, #128	; 0x80
 800188c:	0276      	lsls	r6, r6, #9
 800188e:	46b4      	mov	ip, r6
 8001890:	4460      	add	r0, ip
 8001892:	0c1e      	lsrs	r6, r3, #16
 8001894:	1830      	adds	r0, r6, r0
 8001896:	0416      	lsls	r6, r2, #16
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	0c36      	lsrs	r6, r6, #16
 800189c:	199e      	adds	r6, r3, r6
 800189e:	4281      	cmp	r1, r0
 80018a0:	d200      	bcs.n	80018a4 <__aeabi_ddiv+0x338>
 80018a2:	e09c      	b.n	80019de <__aeabi_ddiv+0x472>
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x33c>
 80018a6:	e097      	b.n	80019d8 <__aeabi_ddiv+0x46c>
 80018a8:	1bae      	subs	r6, r5, r6
 80018aa:	1a09      	subs	r1, r1, r0
 80018ac:	42b5      	cmp	r5, r6
 80018ae:	4180      	sbcs	r0, r0
 80018b0:	4240      	negs	r0, r0
 80018b2:	1a08      	subs	r0, r1, r0
 80018b4:	4284      	cmp	r4, r0
 80018b6:	d100      	bne.n	80018ba <__aeabi_ddiv+0x34e>
 80018b8:	e111      	b.n	8001ade <__aeabi_ddiv+0x572>
 80018ba:	4649      	mov	r1, r9
 80018bc:	f7fe fcce 	bl	800025c <__aeabi_uidivmod>
 80018c0:	9a01      	ldr	r2, [sp, #4]
 80018c2:	040b      	lsls	r3, r1, #16
 80018c4:	4342      	muls	r2, r0
 80018c6:	0c31      	lsrs	r1, r6, #16
 80018c8:	0005      	movs	r5, r0
 80018ca:	4319      	orrs	r1, r3
 80018cc:	428a      	cmp	r2, r1
 80018ce:	d907      	bls.n	80018e0 <__aeabi_ddiv+0x374>
 80018d0:	1909      	adds	r1, r1, r4
 80018d2:	3d01      	subs	r5, #1
 80018d4:	428c      	cmp	r4, r1
 80018d6:	d803      	bhi.n	80018e0 <__aeabi_ddiv+0x374>
 80018d8:	428a      	cmp	r2, r1
 80018da:	d901      	bls.n	80018e0 <__aeabi_ddiv+0x374>
 80018dc:	1e85      	subs	r5, r0, #2
 80018de:	1909      	adds	r1, r1, r4
 80018e0:	1a88      	subs	r0, r1, r2
 80018e2:	4649      	mov	r1, r9
 80018e4:	f7fe fcba 	bl	800025c <__aeabi_uidivmod>
 80018e8:	0409      	lsls	r1, r1, #16
 80018ea:	468c      	mov	ip, r1
 80018ec:	0431      	lsls	r1, r6, #16
 80018ee:	4666      	mov	r6, ip
 80018f0:	9a01      	ldr	r2, [sp, #4]
 80018f2:	0c09      	lsrs	r1, r1, #16
 80018f4:	4342      	muls	r2, r0
 80018f6:	0003      	movs	r3, r0
 80018f8:	4331      	orrs	r1, r6
 80018fa:	428a      	cmp	r2, r1
 80018fc:	d907      	bls.n	800190e <__aeabi_ddiv+0x3a2>
 80018fe:	1909      	adds	r1, r1, r4
 8001900:	3b01      	subs	r3, #1
 8001902:	428c      	cmp	r4, r1
 8001904:	d803      	bhi.n	800190e <__aeabi_ddiv+0x3a2>
 8001906:	428a      	cmp	r2, r1
 8001908:	d901      	bls.n	800190e <__aeabi_ddiv+0x3a2>
 800190a:	1e83      	subs	r3, r0, #2
 800190c:	1909      	adds	r1, r1, r4
 800190e:	9e03      	ldr	r6, [sp, #12]
 8001910:	1a89      	subs	r1, r1, r2
 8001912:	0032      	movs	r2, r6
 8001914:	042d      	lsls	r5, r5, #16
 8001916:	431d      	orrs	r5, r3
 8001918:	9f02      	ldr	r7, [sp, #8]
 800191a:	042b      	lsls	r3, r5, #16
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	435a      	muls	r2, r3
 8001920:	437b      	muls	r3, r7
 8001922:	469c      	mov	ip, r3
 8001924:	0c28      	lsrs	r0, r5, #16
 8001926:	4346      	muls	r6, r0
 8001928:	0c13      	lsrs	r3, r2, #16
 800192a:	44b4      	add	ip, r6
 800192c:	4463      	add	r3, ip
 800192e:	4378      	muls	r0, r7
 8001930:	429e      	cmp	r6, r3
 8001932:	d903      	bls.n	800193c <__aeabi_ddiv+0x3d0>
 8001934:	2680      	movs	r6, #128	; 0x80
 8001936:	0276      	lsls	r6, r6, #9
 8001938:	46b4      	mov	ip, r6
 800193a:	4460      	add	r0, ip
 800193c:	0c1e      	lsrs	r6, r3, #16
 800193e:	0412      	lsls	r2, r2, #16
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	0c12      	lsrs	r2, r2, #16
 8001944:	1830      	adds	r0, r6, r0
 8001946:	189b      	adds	r3, r3, r2
 8001948:	4281      	cmp	r1, r0
 800194a:	d306      	bcc.n	800195a <__aeabi_ddiv+0x3ee>
 800194c:	d002      	beq.n	8001954 <__aeabi_ddiv+0x3e8>
 800194e:	2301      	movs	r3, #1
 8001950:	431d      	orrs	r5, r3
 8001952:	e6ce      	b.n	80016f2 <__aeabi_ddiv+0x186>
 8001954:	2b00      	cmp	r3, #0
 8001956:	d100      	bne.n	800195a <__aeabi_ddiv+0x3ee>
 8001958:	e6cb      	b.n	80016f2 <__aeabi_ddiv+0x186>
 800195a:	1861      	adds	r1, r4, r1
 800195c:	1e6e      	subs	r6, r5, #1
 800195e:	42a1      	cmp	r1, r4
 8001960:	d200      	bcs.n	8001964 <__aeabi_ddiv+0x3f8>
 8001962:	e0a4      	b.n	8001aae <__aeabi_ddiv+0x542>
 8001964:	4281      	cmp	r1, r0
 8001966:	d200      	bcs.n	800196a <__aeabi_ddiv+0x3fe>
 8001968:	e0c9      	b.n	8001afe <__aeabi_ddiv+0x592>
 800196a:	d100      	bne.n	800196e <__aeabi_ddiv+0x402>
 800196c:	e0d9      	b.n	8001b22 <__aeabi_ddiv+0x5b6>
 800196e:	0035      	movs	r5, r6
 8001970:	e7ed      	b.n	800194e <__aeabi_ddiv+0x3e2>
 8001972:	2501      	movs	r5, #1
 8001974:	426d      	negs	r5, r5
 8001976:	2101      	movs	r1, #1
 8001978:	1a89      	subs	r1, r1, r2
 800197a:	2938      	cmp	r1, #56	; 0x38
 800197c:	dd00      	ble.n	8001980 <__aeabi_ddiv+0x414>
 800197e:	e64c      	b.n	800161a <__aeabi_ddiv+0xae>
 8001980:	291f      	cmp	r1, #31
 8001982:	dc00      	bgt.n	8001986 <__aeabi_ddiv+0x41a>
 8001984:	e07f      	b.n	8001a86 <__aeabi_ddiv+0x51a>
 8001986:	231f      	movs	r3, #31
 8001988:	425b      	negs	r3, r3
 800198a:	1a9a      	subs	r2, r3, r2
 800198c:	4643      	mov	r3, r8
 800198e:	40d3      	lsrs	r3, r2
 8001990:	2920      	cmp	r1, #32
 8001992:	d004      	beq.n	800199e <__aeabi_ddiv+0x432>
 8001994:	4644      	mov	r4, r8
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <__aeabi_ddiv+0x5c0>)
 8001998:	445a      	add	r2, fp
 800199a:	4094      	lsls	r4, r2
 800199c:	4325      	orrs	r5, r4
 800199e:	1e6a      	subs	r2, r5, #1
 80019a0:	4195      	sbcs	r5, r2
 80019a2:	2207      	movs	r2, #7
 80019a4:	432b      	orrs	r3, r5
 80019a6:	0015      	movs	r5, r2
 80019a8:	2400      	movs	r4, #0
 80019aa:	401d      	ands	r5, r3
 80019ac:	421a      	tst	r2, r3
 80019ae:	d100      	bne.n	80019b2 <__aeabi_ddiv+0x446>
 80019b0:	e0a1      	b.n	8001af6 <__aeabi_ddiv+0x58a>
 80019b2:	220f      	movs	r2, #15
 80019b4:	2400      	movs	r4, #0
 80019b6:	401a      	ands	r2, r3
 80019b8:	2a04      	cmp	r2, #4
 80019ba:	d100      	bne.n	80019be <__aeabi_ddiv+0x452>
 80019bc:	e098      	b.n	8001af0 <__aeabi_ddiv+0x584>
 80019be:	1d1a      	adds	r2, r3, #4
 80019c0:	429a      	cmp	r2, r3
 80019c2:	419b      	sbcs	r3, r3
 80019c4:	425b      	negs	r3, r3
 80019c6:	18e4      	adds	r4, r4, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	0222      	lsls	r2, r4, #8
 80019cc:	d400      	bmi.n	80019d0 <__aeabi_ddiv+0x464>
 80019ce:	e08f      	b.n	8001af0 <__aeabi_ddiv+0x584>
 80019d0:	2301      	movs	r3, #1
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	e623      	b.n	8001620 <__aeabi_ddiv+0xb4>
 80019d8:	42b5      	cmp	r5, r6
 80019da:	d300      	bcc.n	80019de <__aeabi_ddiv+0x472>
 80019dc:	e764      	b.n	80018a8 <__aeabi_ddiv+0x33c>
 80019de:	4643      	mov	r3, r8
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	469c      	mov	ip, r3
 80019e6:	4465      	add	r5, ip
 80019e8:	001f      	movs	r7, r3
 80019ea:	429d      	cmp	r5, r3
 80019ec:	419b      	sbcs	r3, r3
 80019ee:	425b      	negs	r3, r3
 80019f0:	191b      	adds	r3, r3, r4
 80019f2:	18c9      	adds	r1, r1, r3
 80019f4:	428c      	cmp	r4, r1
 80019f6:	d23a      	bcs.n	8001a6e <__aeabi_ddiv+0x502>
 80019f8:	4288      	cmp	r0, r1
 80019fa:	d863      	bhi.n	8001ac4 <__aeabi_ddiv+0x558>
 80019fc:	d060      	beq.n	8001ac0 <__aeabi_ddiv+0x554>
 80019fe:	4690      	mov	r8, r2
 8001a00:	e752      	b.n	80018a8 <__aeabi_ddiv+0x33c>
 8001a02:	42aa      	cmp	r2, r5
 8001a04:	d900      	bls.n	8001a08 <__aeabi_ddiv+0x49c>
 8001a06:	e6ea      	b.n	80017de <__aeabi_ddiv+0x272>
 8001a08:	4643      	mov	r3, r8
 8001a0a:	07de      	lsls	r6, r3, #31
 8001a0c:	0858      	lsrs	r0, r3, #1
 8001a0e:	086b      	lsrs	r3, r5, #1
 8001a10:	431e      	orrs	r6, r3
 8001a12:	07ed      	lsls	r5, r5, #31
 8001a14:	e6ea      	b.n	80017ec <__aeabi_ddiv+0x280>
 8001a16:	4648      	mov	r0, r9
 8001a18:	f001 f926 	bl	8002c68 <__clzsi2>
 8001a1c:	0001      	movs	r1, r0
 8001a1e:	0002      	movs	r2, r0
 8001a20:	3115      	adds	r1, #21
 8001a22:	3220      	adds	r2, #32
 8001a24:	291c      	cmp	r1, #28
 8001a26:	dc00      	bgt.n	8001a2a <__aeabi_ddiv+0x4be>
 8001a28:	e61a      	b.n	8001660 <__aeabi_ddiv+0xf4>
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	3808      	subs	r0, #8
 8001a2e:	4083      	lsls	r3, r0
 8001a30:	2500      	movs	r5, #0
 8001a32:	4698      	mov	r8, r3
 8001a34:	e620      	b.n	8001678 <__aeabi_ddiv+0x10c>
 8001a36:	f001 f917 	bl	8002c68 <__clzsi2>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	3215      	adds	r2, #21
 8001a40:	3020      	adds	r0, #32
 8001a42:	2a1c      	cmp	r2, #28
 8001a44:	dc00      	bgt.n	8001a48 <__aeabi_ddiv+0x4dc>
 8001a46:	e630      	b.n	80016aa <__aeabi_ddiv+0x13e>
 8001a48:	4654      	mov	r4, sl
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	409c      	lsls	r4, r3
 8001a50:	e635      	b.n	80016be <__aeabi_ddiv+0x152>
 8001a52:	230f      	movs	r3, #15
 8001a54:	402b      	ands	r3, r5
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d100      	bne.n	8001a5c <__aeabi_ddiv+0x4f0>
 8001a5a:	e652      	b.n	8001702 <__aeabi_ddiv+0x196>
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	425b      	negs	r3, r3
 8001a60:	42ab      	cmp	r3, r5
 8001a62:	419b      	sbcs	r3, r3
 8001a64:	3504      	adds	r5, #4
 8001a66:	425b      	negs	r3, r3
 8001a68:	08ed      	lsrs	r5, r5, #3
 8001a6a:	4498      	add	r8, r3
 8001a6c:	e64a      	b.n	8001704 <__aeabi_ddiv+0x198>
 8001a6e:	428c      	cmp	r4, r1
 8001a70:	d1c5      	bne.n	80019fe <__aeabi_ddiv+0x492>
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d9c0      	bls.n	80019f8 <__aeabi_ddiv+0x48c>
 8001a76:	4690      	mov	r8, r2
 8001a78:	e716      	b.n	80018a8 <__aeabi_ddiv+0x33c>
 8001a7a:	428a      	cmp	r2, r1
 8001a7c:	d800      	bhi.n	8001a80 <__aeabi_ddiv+0x514>
 8001a7e:	e6ea      	b.n	8001856 <__aeabi_ddiv+0x2ea>
 8001a80:	1e83      	subs	r3, r0, #2
 8001a82:	1909      	adds	r1, r1, r4
 8001a84:	e6e7      	b.n	8001856 <__aeabi_ddiv+0x2ea>
 8001a86:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <__aeabi_ddiv+0x5c4>)
 8001a88:	0028      	movs	r0, r5
 8001a8a:	445a      	add	r2, fp
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	4095      	lsls	r5, r2
 8001a90:	4093      	lsls	r3, r2
 8001a92:	40c8      	lsrs	r0, r1
 8001a94:	1e6a      	subs	r2, r5, #1
 8001a96:	4195      	sbcs	r5, r2
 8001a98:	4644      	mov	r4, r8
 8001a9a:	4303      	orrs	r3, r0
 8001a9c:	432b      	orrs	r3, r5
 8001a9e:	40cc      	lsrs	r4, r1
 8001aa0:	075a      	lsls	r2, r3, #29
 8001aa2:	d092      	beq.n	80019ca <__aeabi_ddiv+0x45e>
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	2a04      	cmp	r2, #4
 8001aaa:	d188      	bne.n	80019be <__aeabi_ddiv+0x452>
 8001aac:	e78d      	b.n	80019ca <__aeabi_ddiv+0x45e>
 8001aae:	0035      	movs	r5, r6
 8001ab0:	4281      	cmp	r1, r0
 8001ab2:	d000      	beq.n	8001ab6 <__aeabi_ddiv+0x54a>
 8001ab4:	e74b      	b.n	800194e <__aeabi_ddiv+0x3e2>
 8001ab6:	9a00      	ldr	r2, [sp, #0]
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d000      	beq.n	8001abe <__aeabi_ddiv+0x552>
 8001abc:	e747      	b.n	800194e <__aeabi_ddiv+0x3e2>
 8001abe:	e618      	b.n	80016f2 <__aeabi_ddiv+0x186>
 8001ac0:	42ae      	cmp	r6, r5
 8001ac2:	d99c      	bls.n	80019fe <__aeabi_ddiv+0x492>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	469c      	mov	ip, r3
 8001aca:	9b00      	ldr	r3, [sp, #0]
 8001acc:	44e0      	add	r8, ip
 8001ace:	469c      	mov	ip, r3
 8001ad0:	4465      	add	r5, ip
 8001ad2:	429d      	cmp	r5, r3
 8001ad4:	419b      	sbcs	r3, r3
 8001ad6:	425b      	negs	r3, r3
 8001ad8:	191b      	adds	r3, r3, r4
 8001ada:	18c9      	adds	r1, r1, r3
 8001adc:	e6e4      	b.n	80018a8 <__aeabi_ddiv+0x33c>
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <__aeabi_ddiv+0x5c8>)
 8001ae0:	445a      	add	r2, fp
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	dc00      	bgt.n	8001ae8 <__aeabi_ddiv+0x57c>
 8001ae6:	e744      	b.n	8001972 <__aeabi_ddiv+0x406>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	2500      	movs	r5, #0
 8001aec:	4498      	add	r8, r3
 8001aee:	e609      	b.n	8001704 <__aeabi_ddiv+0x198>
 8001af0:	0765      	lsls	r5, r4, #29
 8001af2:	0264      	lsls	r4, r4, #9
 8001af4:	0b24      	lsrs	r4, r4, #12
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	431d      	orrs	r5, r3
 8001afa:	2300      	movs	r3, #0
 8001afc:	e590      	b.n	8001620 <__aeabi_ddiv+0xb4>
 8001afe:	9e00      	ldr	r6, [sp, #0]
 8001b00:	3d02      	subs	r5, #2
 8001b02:	0072      	lsls	r2, r6, #1
 8001b04:	42b2      	cmp	r2, r6
 8001b06:	41bf      	sbcs	r7, r7
 8001b08:	427f      	negs	r7, r7
 8001b0a:	193c      	adds	r4, r7, r4
 8001b0c:	1909      	adds	r1, r1, r4
 8001b0e:	9200      	str	r2, [sp, #0]
 8001b10:	e7ce      	b.n	8001ab0 <__aeabi_ddiv+0x544>
 8001b12:	2480      	movs	r4, #128	; 0x80
 8001b14:	4643      	mov	r3, r8
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	431c      	orrs	r4, r3
 8001b1a:	0324      	lsls	r4, r4, #12
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <__aeabi_ddiv+0x5cc>)
 8001b1e:	0b24      	lsrs	r4, r4, #12
 8001b20:	e57e      	b.n	8001620 <__aeabi_ddiv+0xb4>
 8001b22:	9a00      	ldr	r2, [sp, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d3ea      	bcc.n	8001afe <__aeabi_ddiv+0x592>
 8001b28:	0035      	movs	r5, r6
 8001b2a:	e7c4      	b.n	8001ab6 <__aeabi_ddiv+0x54a>
 8001b2c:	0000043e 	.word	0x0000043e
 8001b30:	0000041e 	.word	0x0000041e
 8001b34:	000003ff 	.word	0x000003ff
 8001b38:	000007ff 	.word	0x000007ff

08001b3c <__eqdf2>:
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	464f      	mov	r7, r9
 8001b40:	4646      	mov	r6, r8
 8001b42:	46d6      	mov	lr, sl
 8001b44:	4694      	mov	ip, r2
 8001b46:	4691      	mov	r9, r2
 8001b48:	031a      	lsls	r2, r3, #12
 8001b4a:	0b12      	lsrs	r2, r2, #12
 8001b4c:	4d18      	ldr	r5, [pc, #96]	; (8001bb0 <__eqdf2+0x74>)
 8001b4e:	b5c0      	push	{r6, r7, lr}
 8001b50:	004c      	lsls	r4, r1, #1
 8001b52:	030f      	lsls	r7, r1, #12
 8001b54:	4692      	mov	sl, r2
 8001b56:	005a      	lsls	r2, r3, #1
 8001b58:	0006      	movs	r6, r0
 8001b5a:	4680      	mov	r8, r0
 8001b5c:	0b3f      	lsrs	r7, r7, #12
 8001b5e:	2001      	movs	r0, #1
 8001b60:	0d64      	lsrs	r4, r4, #21
 8001b62:	0fc9      	lsrs	r1, r1, #31
 8001b64:	0d52      	lsrs	r2, r2, #21
 8001b66:	0fdb      	lsrs	r3, r3, #31
 8001b68:	42ac      	cmp	r4, r5
 8001b6a:	d00a      	beq.n	8001b82 <__eqdf2+0x46>
 8001b6c:	42aa      	cmp	r2, r5
 8001b6e:	d003      	beq.n	8001b78 <__eqdf2+0x3c>
 8001b70:	4294      	cmp	r4, r2
 8001b72:	d101      	bne.n	8001b78 <__eqdf2+0x3c>
 8001b74:	4557      	cmp	r7, sl
 8001b76:	d00d      	beq.n	8001b94 <__eqdf2+0x58>
 8001b78:	bce0      	pop	{r5, r6, r7}
 8001b7a:	46ba      	mov	sl, r7
 8001b7c:	46b1      	mov	r9, r6
 8001b7e:	46a8      	mov	r8, r5
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b82:	003d      	movs	r5, r7
 8001b84:	4335      	orrs	r5, r6
 8001b86:	d1f7      	bne.n	8001b78 <__eqdf2+0x3c>
 8001b88:	42a2      	cmp	r2, r4
 8001b8a:	d1f5      	bne.n	8001b78 <__eqdf2+0x3c>
 8001b8c:	4652      	mov	r2, sl
 8001b8e:	4665      	mov	r5, ip
 8001b90:	432a      	orrs	r2, r5
 8001b92:	d1f1      	bne.n	8001b78 <__eqdf2+0x3c>
 8001b94:	2001      	movs	r0, #1
 8001b96:	45c8      	cmp	r8, r9
 8001b98:	d1ee      	bne.n	8001b78 <__eqdf2+0x3c>
 8001b9a:	4299      	cmp	r1, r3
 8001b9c:	d006      	beq.n	8001bac <__eqdf2+0x70>
 8001b9e:	2c00      	cmp	r4, #0
 8001ba0:	d1ea      	bne.n	8001b78 <__eqdf2+0x3c>
 8001ba2:	433e      	orrs	r6, r7
 8001ba4:	0030      	movs	r0, r6
 8001ba6:	1e46      	subs	r6, r0, #1
 8001ba8:	41b0      	sbcs	r0, r6
 8001baa:	e7e5      	b.n	8001b78 <__eqdf2+0x3c>
 8001bac:	2000      	movs	r0, #0
 8001bae:	e7e3      	b.n	8001b78 <__eqdf2+0x3c>
 8001bb0:	000007ff 	.word	0x000007ff

08001bb4 <__gedf2>:
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	464e      	mov	r6, r9
 8001bb8:	4645      	mov	r5, r8
 8001bba:	4657      	mov	r7, sl
 8001bbc:	46de      	mov	lr, fp
 8001bbe:	0004      	movs	r4, r0
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	b5e0      	push	{r5, r6, r7, lr}
 8001bc4:	0016      	movs	r6, r2
 8001bc6:	031b      	lsls	r3, r3, #12
 8001bc8:	0b1b      	lsrs	r3, r3, #12
 8001bca:	4d32      	ldr	r5, [pc, #200]	; (8001c94 <__gedf2+0xe0>)
 8001bcc:	030f      	lsls	r7, r1, #12
 8001bce:	004a      	lsls	r2, r1, #1
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	0043      	lsls	r3, r0, #1
 8001bd4:	46a4      	mov	ip, r4
 8001bd6:	46b0      	mov	r8, r6
 8001bd8:	0b3f      	lsrs	r7, r7, #12
 8001bda:	0d52      	lsrs	r2, r2, #21
 8001bdc:	0fc9      	lsrs	r1, r1, #31
 8001bde:	0d5b      	lsrs	r3, r3, #21
 8001be0:	0fc0      	lsrs	r0, r0, #31
 8001be2:	42aa      	cmp	r2, r5
 8001be4:	d029      	beq.n	8001c3a <__gedf2+0x86>
 8001be6:	42ab      	cmp	r3, r5
 8001be8:	d018      	beq.n	8001c1c <__gedf2+0x68>
 8001bea:	2a00      	cmp	r2, #0
 8001bec:	d12a      	bne.n	8001c44 <__gedf2+0x90>
 8001bee:	433c      	orrs	r4, r7
 8001bf0:	46a3      	mov	fp, r4
 8001bf2:	4265      	negs	r5, r4
 8001bf4:	4165      	adcs	r5, r4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <__gedf2+0x4c>
 8001bfa:	464c      	mov	r4, r9
 8001bfc:	4326      	orrs	r6, r4
 8001bfe:	d027      	beq.n	8001c50 <__gedf2+0x9c>
 8001c00:	2d00      	cmp	r5, #0
 8001c02:	d115      	bne.n	8001c30 <__gedf2+0x7c>
 8001c04:	4281      	cmp	r1, r0
 8001c06:	d028      	beq.n	8001c5a <__gedf2+0xa6>
 8001c08:	2002      	movs	r0, #2
 8001c0a:	3901      	subs	r1, #1
 8001c0c:	4008      	ands	r0, r1
 8001c0e:	3801      	subs	r0, #1
 8001c10:	bcf0      	pop	{r4, r5, r6, r7}
 8001c12:	46bb      	mov	fp, r7
 8001c14:	46b2      	mov	sl, r6
 8001c16:	46a9      	mov	r9, r5
 8001c18:	46a0      	mov	r8, r4
 8001c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1c:	464d      	mov	r5, r9
 8001c1e:	432e      	orrs	r6, r5
 8001c20:	d12f      	bne.n	8001c82 <__gedf2+0xce>
 8001c22:	2a00      	cmp	r2, #0
 8001c24:	d1ee      	bne.n	8001c04 <__gedf2+0x50>
 8001c26:	433c      	orrs	r4, r7
 8001c28:	4265      	negs	r5, r4
 8001c2a:	4165      	adcs	r5, r4
 8001c2c:	2d00      	cmp	r5, #0
 8001c2e:	d0e9      	beq.n	8001c04 <__gedf2+0x50>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d1ed      	bne.n	8001c10 <__gedf2+0x5c>
 8001c34:	2001      	movs	r0, #1
 8001c36:	4240      	negs	r0, r0
 8001c38:	e7ea      	b.n	8001c10 <__gedf2+0x5c>
 8001c3a:	003d      	movs	r5, r7
 8001c3c:	4325      	orrs	r5, r4
 8001c3e:	d120      	bne.n	8001c82 <__gedf2+0xce>
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d0eb      	beq.n	8001c1c <__gedf2+0x68>
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1dd      	bne.n	8001c04 <__gedf2+0x50>
 8001c48:	464c      	mov	r4, r9
 8001c4a:	4326      	orrs	r6, r4
 8001c4c:	d1da      	bne.n	8001c04 <__gedf2+0x50>
 8001c4e:	e7db      	b.n	8001c08 <__gedf2+0x54>
 8001c50:	465b      	mov	r3, fp
 8001c52:	2000      	movs	r0, #0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0db      	beq.n	8001c10 <__gedf2+0x5c>
 8001c58:	e7d6      	b.n	8001c08 <__gedf2+0x54>
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dc0a      	bgt.n	8001c74 <__gedf2+0xc0>
 8001c5e:	dbe7      	blt.n	8001c30 <__gedf2+0x7c>
 8001c60:	454f      	cmp	r7, r9
 8001c62:	d8d1      	bhi.n	8001c08 <__gedf2+0x54>
 8001c64:	d010      	beq.n	8001c88 <__gedf2+0xd4>
 8001c66:	2000      	movs	r0, #0
 8001c68:	454f      	cmp	r7, r9
 8001c6a:	d2d1      	bcs.n	8001c10 <__gedf2+0x5c>
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	d0e1      	beq.n	8001c34 <__gedf2+0x80>
 8001c70:	0008      	movs	r0, r1
 8001c72:	e7cd      	b.n	8001c10 <__gedf2+0x5c>
 8001c74:	4243      	negs	r3, r0
 8001c76:	4158      	adcs	r0, r3
 8001c78:	2302      	movs	r3, #2
 8001c7a:	4240      	negs	r0, r0
 8001c7c:	4018      	ands	r0, r3
 8001c7e:	3801      	subs	r0, #1
 8001c80:	e7c6      	b.n	8001c10 <__gedf2+0x5c>
 8001c82:	2002      	movs	r0, #2
 8001c84:	4240      	negs	r0, r0
 8001c86:	e7c3      	b.n	8001c10 <__gedf2+0x5c>
 8001c88:	45c4      	cmp	ip, r8
 8001c8a:	d8bd      	bhi.n	8001c08 <__gedf2+0x54>
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	45c4      	cmp	ip, r8
 8001c90:	d2be      	bcs.n	8001c10 <__gedf2+0x5c>
 8001c92:	e7eb      	b.n	8001c6c <__gedf2+0xb8>
 8001c94:	000007ff 	.word	0x000007ff

08001c98 <__ledf2>:
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	464e      	mov	r6, r9
 8001c9c:	4645      	mov	r5, r8
 8001c9e:	4657      	mov	r7, sl
 8001ca0:	46de      	mov	lr, fp
 8001ca2:	0004      	movs	r4, r0
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	b5e0      	push	{r5, r6, r7, lr}
 8001ca8:	0016      	movs	r6, r2
 8001caa:	031b      	lsls	r3, r3, #12
 8001cac:	0b1b      	lsrs	r3, r3, #12
 8001cae:	4d31      	ldr	r5, [pc, #196]	; (8001d74 <__ledf2+0xdc>)
 8001cb0:	030f      	lsls	r7, r1, #12
 8001cb2:	004a      	lsls	r2, r1, #1
 8001cb4:	4699      	mov	r9, r3
 8001cb6:	0043      	lsls	r3, r0, #1
 8001cb8:	46a4      	mov	ip, r4
 8001cba:	46b0      	mov	r8, r6
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d52      	lsrs	r2, r2, #21
 8001cc0:	0fc9      	lsrs	r1, r1, #31
 8001cc2:	0d5b      	lsrs	r3, r3, #21
 8001cc4:	0fc0      	lsrs	r0, r0, #31
 8001cc6:	42aa      	cmp	r2, r5
 8001cc8:	d011      	beq.n	8001cee <__ledf2+0x56>
 8001cca:	42ab      	cmp	r3, r5
 8001ccc:	d014      	beq.n	8001cf8 <__ledf2+0x60>
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d12f      	bne.n	8001d32 <__ledf2+0x9a>
 8001cd2:	433c      	orrs	r4, r7
 8001cd4:	46a3      	mov	fp, r4
 8001cd6:	4265      	negs	r5, r4
 8001cd8:	4165      	adcs	r5, r4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d114      	bne.n	8001d08 <__ledf2+0x70>
 8001cde:	464c      	mov	r4, r9
 8001ce0:	4326      	orrs	r6, r4
 8001ce2:	d111      	bne.n	8001d08 <__ledf2+0x70>
 8001ce4:	465b      	mov	r3, fp
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d017      	beq.n	8001d1c <__ledf2+0x84>
 8001cec:	e010      	b.n	8001d10 <__ledf2+0x78>
 8001cee:	003d      	movs	r5, r7
 8001cf0:	4325      	orrs	r5, r4
 8001cf2:	d112      	bne.n	8001d1a <__ledf2+0x82>
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d11c      	bne.n	8001d32 <__ledf2+0x9a>
 8001cf8:	464d      	mov	r5, r9
 8001cfa:	432e      	orrs	r6, r5
 8001cfc:	d10d      	bne.n	8001d1a <__ledf2+0x82>
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d104      	bne.n	8001d0c <__ledf2+0x74>
 8001d02:	433c      	orrs	r4, r7
 8001d04:	4265      	negs	r5, r4
 8001d06:	4165      	adcs	r5, r4
 8001d08:	2d00      	cmp	r5, #0
 8001d0a:	d10d      	bne.n	8001d28 <__ledf2+0x90>
 8001d0c:	4281      	cmp	r1, r0
 8001d0e:	d016      	beq.n	8001d3e <__ledf2+0xa6>
 8001d10:	2002      	movs	r0, #2
 8001d12:	3901      	subs	r1, #1
 8001d14:	4008      	ands	r0, r1
 8001d16:	3801      	subs	r0, #1
 8001d18:	e000      	b.n	8001d1c <__ledf2+0x84>
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d1e:	46bb      	mov	fp, r7
 8001d20:	46b2      	mov	sl, r6
 8001d22:	46a9      	mov	r9, r5
 8001d24:	46a0      	mov	r8, r4
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	2800      	cmp	r0, #0
 8001d2a:	d1f7      	bne.n	8001d1c <__ledf2+0x84>
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4240      	negs	r0, r0
 8001d30:	e7f4      	b.n	8001d1c <__ledf2+0x84>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ea      	bne.n	8001d0c <__ledf2+0x74>
 8001d36:	464c      	mov	r4, r9
 8001d38:	4326      	orrs	r6, r4
 8001d3a:	d1e7      	bne.n	8001d0c <__ledf2+0x74>
 8001d3c:	e7e8      	b.n	8001d10 <__ledf2+0x78>
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dd06      	ble.n	8001d50 <__ledf2+0xb8>
 8001d42:	4243      	negs	r3, r0
 8001d44:	4158      	adcs	r0, r3
 8001d46:	2302      	movs	r3, #2
 8001d48:	4240      	negs	r0, r0
 8001d4a:	4018      	ands	r0, r3
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	e7e5      	b.n	8001d1c <__ledf2+0x84>
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbe9      	blt.n	8001d28 <__ledf2+0x90>
 8001d54:	454f      	cmp	r7, r9
 8001d56:	d8db      	bhi.n	8001d10 <__ledf2+0x78>
 8001d58:	d006      	beq.n	8001d68 <__ledf2+0xd0>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	454f      	cmp	r7, r9
 8001d5e:	d2dd      	bcs.n	8001d1c <__ledf2+0x84>
 8001d60:	2900      	cmp	r1, #0
 8001d62:	d0e3      	beq.n	8001d2c <__ledf2+0x94>
 8001d64:	0008      	movs	r0, r1
 8001d66:	e7d9      	b.n	8001d1c <__ledf2+0x84>
 8001d68:	45c4      	cmp	ip, r8
 8001d6a:	d8d1      	bhi.n	8001d10 <__ledf2+0x78>
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	45c4      	cmp	ip, r8
 8001d70:	d2d4      	bcs.n	8001d1c <__ledf2+0x84>
 8001d72:	e7f5      	b.n	8001d60 <__ledf2+0xc8>
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__aeabi_dmul>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	4657      	mov	r7, sl
 8001d7c:	464e      	mov	r6, r9
 8001d7e:	4645      	mov	r5, r8
 8001d80:	46de      	mov	lr, fp
 8001d82:	b5e0      	push	{r5, r6, r7, lr}
 8001d84:	4698      	mov	r8, r3
 8001d86:	030c      	lsls	r4, r1, #12
 8001d88:	004b      	lsls	r3, r1, #1
 8001d8a:	0006      	movs	r6, r0
 8001d8c:	4692      	mov	sl, r2
 8001d8e:	b087      	sub	sp, #28
 8001d90:	0b24      	lsrs	r4, r4, #12
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0fcf      	lsrs	r7, r1, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d06c      	beq.n	8001e74 <__aeabi_dmul+0xfc>
 8001d9a:	4add      	ldr	r2, [pc, #884]	; (8002110 <__aeabi_dmul+0x398>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dmul+0x2a>
 8001da0:	e086      	b.n	8001eb0 <__aeabi_dmul+0x138>
 8001da2:	0f42      	lsrs	r2, r0, #29
 8001da4:	00e4      	lsls	r4, r4, #3
 8001da6:	4314      	orrs	r4, r2
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	0412      	lsls	r2, r2, #16
 8001dac:	4314      	orrs	r4, r2
 8001dae:	4ad9      	ldr	r2, [pc, #868]	; (8002114 <__aeabi_dmul+0x39c>)
 8001db0:	00c5      	lsls	r5, r0, #3
 8001db2:	4694      	mov	ip, r2
 8001db4:	4463      	add	r3, ip
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2300      	movs	r3, #0
 8001dba:	4699      	mov	r9, r3
 8001dbc:	469b      	mov	fp, r3
 8001dbe:	4643      	mov	r3, r8
 8001dc0:	4642      	mov	r2, r8
 8001dc2:	031e      	lsls	r6, r3, #12
 8001dc4:	0fd2      	lsrs	r2, r2, #31
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4650      	mov	r0, sl
 8001dca:	4690      	mov	r8, r2
 8001dcc:	0b36      	lsrs	r6, r6, #12
 8001dce:	0d5b      	lsrs	r3, r3, #21
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dmul+0x5c>
 8001dd2:	e078      	b.n	8001ec6 <__aeabi_dmul+0x14e>
 8001dd4:	4ace      	ldr	r2, [pc, #824]	; (8002110 <__aeabi_dmul+0x398>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01d      	beq.n	8001e16 <__aeabi_dmul+0x9e>
 8001dda:	49ce      	ldr	r1, [pc, #824]	; (8002114 <__aeabi_dmul+0x39c>)
 8001ddc:	0f42      	lsrs	r2, r0, #29
 8001dde:	468c      	mov	ip, r1
 8001de0:	9900      	ldr	r1, [sp, #0]
 8001de2:	4463      	add	r3, ip
 8001de4:	00f6      	lsls	r6, r6, #3
 8001de6:	468c      	mov	ip, r1
 8001de8:	4316      	orrs	r6, r2
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	449c      	add	ip, r3
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	4663      	mov	r3, ip
 8001df2:	4316      	orrs	r6, r2
 8001df4:	00c2      	lsls	r2, r0, #3
 8001df6:	2000      	movs	r0, #0
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	9900      	ldr	r1, [sp, #0]
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	3101      	adds	r1, #1
 8001e00:	468c      	mov	ip, r1
 8001e02:	4649      	mov	r1, r9
 8001e04:	407b      	eors	r3, r7
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	290f      	cmp	r1, #15
 8001e0a:	d900      	bls.n	8001e0e <__aeabi_dmul+0x96>
 8001e0c:	e07e      	b.n	8001f0c <__aeabi_dmul+0x194>
 8001e0e:	4bc2      	ldr	r3, [pc, #776]	; (8002118 <__aeabi_dmul+0x3a0>)
 8001e10:	0089      	lsls	r1, r1, #2
 8001e12:	5859      	ldr	r1, [r3, r1]
 8001e14:	468f      	mov	pc, r1
 8001e16:	4652      	mov	r2, sl
 8001e18:	9b00      	ldr	r3, [sp, #0]
 8001e1a:	4332      	orrs	r2, r6
 8001e1c:	d000      	beq.n	8001e20 <__aeabi_dmul+0xa8>
 8001e1e:	e156      	b.n	80020ce <__aeabi_dmul+0x356>
 8001e20:	49bb      	ldr	r1, [pc, #748]	; (8002110 <__aeabi_dmul+0x398>)
 8001e22:	2600      	movs	r6, #0
 8001e24:	468c      	mov	ip, r1
 8001e26:	4463      	add	r3, ip
 8001e28:	4649      	mov	r1, r9
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	4319      	orrs	r1, r3
 8001e30:	4689      	mov	r9, r1
 8001e32:	2002      	movs	r0, #2
 8001e34:	e7e1      	b.n	8001dfa <__aeabi_dmul+0x82>
 8001e36:	4643      	mov	r3, r8
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	0034      	movs	r4, r6
 8001e3c:	0015      	movs	r5, r2
 8001e3e:	4683      	mov	fp, r0
 8001e40:	465b      	mov	r3, fp
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d05e      	beq.n	8001f04 <__aeabi_dmul+0x18c>
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dmul+0xd4>
 8001e4a:	e1f3      	b.n	8002234 <__aeabi_dmul+0x4bc>
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_dmul+0xda>
 8001e50:	e118      	b.n	8002084 <__aeabi_dmul+0x30c>
 8001e52:	2200      	movs	r2, #0
 8001e54:	2400      	movs	r4, #0
 8001e56:	2500      	movs	r5, #0
 8001e58:	9b01      	ldr	r3, [sp, #4]
 8001e5a:	0512      	lsls	r2, r2, #20
 8001e5c:	4322      	orrs	r2, r4
 8001e5e:	07db      	lsls	r3, r3, #31
 8001e60:	431a      	orrs	r2, r3
 8001e62:	0028      	movs	r0, r5
 8001e64:	0011      	movs	r1, r2
 8001e66:	b007      	add	sp, #28
 8001e68:	bcf0      	pop	{r4, r5, r6, r7}
 8001e6a:	46bb      	mov	fp, r7
 8001e6c:	46b2      	mov	sl, r6
 8001e6e:	46a9      	mov	r9, r5
 8001e70:	46a0      	mov	r8, r4
 8001e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e74:	0025      	movs	r5, r4
 8001e76:	4305      	orrs	r5, r0
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dmul+0x104>
 8001e7a:	e141      	b.n	8002100 <__aeabi_dmul+0x388>
 8001e7c:	2c00      	cmp	r4, #0
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dmul+0x10a>
 8001e80:	e1ad      	b.n	80021de <__aeabi_dmul+0x466>
 8001e82:	0020      	movs	r0, r4
 8001e84:	f000 fef0 	bl	8002c68 <__clzsi2>
 8001e88:	0001      	movs	r1, r0
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	390b      	subs	r1, #11
 8001e8e:	231d      	movs	r3, #29
 8001e90:	0010      	movs	r0, r2
 8001e92:	1a5b      	subs	r3, r3, r1
 8001e94:	0031      	movs	r1, r6
 8001e96:	0035      	movs	r5, r6
 8001e98:	3808      	subs	r0, #8
 8001e9a:	4084      	lsls	r4, r0
 8001e9c:	40d9      	lsrs	r1, r3
 8001e9e:	4085      	lsls	r5, r0
 8001ea0:	430c      	orrs	r4, r1
 8001ea2:	489e      	ldr	r0, [pc, #632]	; (800211c <__aeabi_dmul+0x3a4>)
 8001ea4:	1a83      	subs	r3, r0, r2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	4699      	mov	r9, r3
 8001eac:	469b      	mov	fp, r3
 8001eae:	e786      	b.n	8001dbe <__aeabi_dmul+0x46>
 8001eb0:	0005      	movs	r5, r0
 8001eb2:	4325      	orrs	r5, r4
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_dmul+0x140>
 8001eb6:	e11c      	b.n	80020f2 <__aeabi_dmul+0x37a>
 8001eb8:	2208      	movs	r2, #8
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	4691      	mov	r9, r2
 8001ec2:	469b      	mov	fp, r3
 8001ec4:	e77b      	b.n	8001dbe <__aeabi_dmul+0x46>
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4332      	orrs	r2, r6
 8001eca:	d100      	bne.n	8001ece <__aeabi_dmul+0x156>
 8001ecc:	e10a      	b.n	80020e4 <__aeabi_dmul+0x36c>
 8001ece:	2e00      	cmp	r6, #0
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_dmul+0x15c>
 8001ed2:	e176      	b.n	80021c2 <__aeabi_dmul+0x44a>
 8001ed4:	0030      	movs	r0, r6
 8001ed6:	f000 fec7 	bl	8002c68 <__clzsi2>
 8001eda:	0002      	movs	r2, r0
 8001edc:	3a0b      	subs	r2, #11
 8001ede:	231d      	movs	r3, #29
 8001ee0:	0001      	movs	r1, r0
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	3908      	subs	r1, #8
 8001ee8:	40da      	lsrs	r2, r3
 8001eea:	408e      	lsls	r6, r1
 8001eec:	4316      	orrs	r6, r2
 8001eee:	4652      	mov	r2, sl
 8001ef0:	408a      	lsls	r2, r1
 8001ef2:	9b00      	ldr	r3, [sp, #0]
 8001ef4:	4989      	ldr	r1, [pc, #548]	; (800211c <__aeabi_dmul+0x3a4>)
 8001ef6:	1a18      	subs	r0, r3, r0
 8001ef8:	0003      	movs	r3, r0
 8001efa:	468c      	mov	ip, r1
 8001efc:	4463      	add	r3, ip
 8001efe:	2000      	movs	r0, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	e77a      	b.n	8001dfa <__aeabi_dmul+0x82>
 8001f04:	2400      	movs	r4, #0
 8001f06:	2500      	movs	r5, #0
 8001f08:	4a81      	ldr	r2, [pc, #516]	; (8002110 <__aeabi_dmul+0x398>)
 8001f0a:	e7a5      	b.n	8001e58 <__aeabi_dmul+0xe0>
 8001f0c:	0c2f      	lsrs	r7, r5, #16
 8001f0e:	042d      	lsls	r5, r5, #16
 8001f10:	0c2d      	lsrs	r5, r5, #16
 8001f12:	002b      	movs	r3, r5
 8001f14:	0c11      	lsrs	r1, r2, #16
 8001f16:	0412      	lsls	r2, r2, #16
 8001f18:	0c12      	lsrs	r2, r2, #16
 8001f1a:	4353      	muls	r3, r2
 8001f1c:	4698      	mov	r8, r3
 8001f1e:	0013      	movs	r3, r2
 8001f20:	0028      	movs	r0, r5
 8001f22:	437b      	muls	r3, r7
 8001f24:	4699      	mov	r9, r3
 8001f26:	4348      	muls	r0, r1
 8001f28:	4448      	add	r0, r9
 8001f2a:	4683      	mov	fp, r0
 8001f2c:	4640      	mov	r0, r8
 8001f2e:	000b      	movs	r3, r1
 8001f30:	0c00      	lsrs	r0, r0, #16
 8001f32:	4682      	mov	sl, r0
 8001f34:	4658      	mov	r0, fp
 8001f36:	437b      	muls	r3, r7
 8001f38:	4450      	add	r0, sl
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	4581      	cmp	r9, r0
 8001f3e:	d906      	bls.n	8001f4e <__aeabi_dmul+0x1d6>
 8001f40:	469a      	mov	sl, r3
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	025b      	lsls	r3, r3, #9
 8001f46:	4699      	mov	r9, r3
 8001f48:	44ca      	add	sl, r9
 8001f4a:	4653      	mov	r3, sl
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	0c03      	lsrs	r3, r0, #16
 8001f50:	469b      	mov	fp, r3
 8001f52:	4643      	mov	r3, r8
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	0400      	lsls	r0, r0, #16
 8001f58:	0c1b      	lsrs	r3, r3, #16
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	4443      	add	r3, r8
 8001f60:	9304      	str	r3, [sp, #16]
 8001f62:	0c33      	lsrs	r3, r6, #16
 8001f64:	4699      	mov	r9, r3
 8001f66:	002b      	movs	r3, r5
 8001f68:	0436      	lsls	r6, r6, #16
 8001f6a:	0c36      	lsrs	r6, r6, #16
 8001f6c:	4373      	muls	r3, r6
 8001f6e:	4698      	mov	r8, r3
 8001f70:	0033      	movs	r3, r6
 8001f72:	437b      	muls	r3, r7
 8001f74:	469a      	mov	sl, r3
 8001f76:	464b      	mov	r3, r9
 8001f78:	435d      	muls	r5, r3
 8001f7a:	435f      	muls	r7, r3
 8001f7c:	4643      	mov	r3, r8
 8001f7e:	4455      	add	r5, sl
 8001f80:	0c18      	lsrs	r0, r3, #16
 8001f82:	1940      	adds	r0, r0, r5
 8001f84:	4582      	cmp	sl, r0
 8001f86:	d903      	bls.n	8001f90 <__aeabi_dmul+0x218>
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	025b      	lsls	r3, r3, #9
 8001f8c:	469a      	mov	sl, r3
 8001f8e:	4457      	add	r7, sl
 8001f90:	0c05      	lsrs	r5, r0, #16
 8001f92:	19eb      	adds	r3, r5, r7
 8001f94:	9305      	str	r3, [sp, #20]
 8001f96:	4643      	mov	r3, r8
 8001f98:	041d      	lsls	r5, r3, #16
 8001f9a:	0c2d      	lsrs	r5, r5, #16
 8001f9c:	0400      	lsls	r0, r0, #16
 8001f9e:	1940      	adds	r0, r0, r5
 8001fa0:	0c25      	lsrs	r5, r4, #16
 8001fa2:	0424      	lsls	r4, r4, #16
 8001fa4:	0c24      	lsrs	r4, r4, #16
 8001fa6:	0027      	movs	r7, r4
 8001fa8:	4357      	muls	r7, r2
 8001faa:	436a      	muls	r2, r5
 8001fac:	4690      	mov	r8, r2
 8001fae:	002a      	movs	r2, r5
 8001fb0:	0c3b      	lsrs	r3, r7, #16
 8001fb2:	469a      	mov	sl, r3
 8001fb4:	434a      	muls	r2, r1
 8001fb6:	4361      	muls	r1, r4
 8001fb8:	4441      	add	r1, r8
 8001fba:	4451      	add	r1, sl
 8001fbc:	4483      	add	fp, r0
 8001fbe:	4588      	cmp	r8, r1
 8001fc0:	d903      	bls.n	8001fca <__aeabi_dmul+0x252>
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	025b      	lsls	r3, r3, #9
 8001fc6:	4698      	mov	r8, r3
 8001fc8:	4442      	add	r2, r8
 8001fca:	043f      	lsls	r7, r7, #16
 8001fcc:	0c0b      	lsrs	r3, r1, #16
 8001fce:	0c3f      	lsrs	r7, r7, #16
 8001fd0:	0409      	lsls	r1, r1, #16
 8001fd2:	19c9      	adds	r1, r1, r7
 8001fd4:	0027      	movs	r7, r4
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	464b      	mov	r3, r9
 8001fda:	4377      	muls	r7, r6
 8001fdc:	435c      	muls	r4, r3
 8001fde:	436e      	muls	r6, r5
 8001fe0:	435d      	muls	r5, r3
 8001fe2:	0c3b      	lsrs	r3, r7, #16
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	19a4      	adds	r4, r4, r6
 8001fe8:	444c      	add	r4, r9
 8001fea:	4442      	add	r2, r8
 8001fec:	9503      	str	r5, [sp, #12]
 8001fee:	42a6      	cmp	r6, r4
 8001ff0:	d904      	bls.n	8001ffc <__aeabi_dmul+0x284>
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	4698      	mov	r8, r3
 8001ff8:	4445      	add	r5, r8
 8001ffa:	9503      	str	r5, [sp, #12]
 8001ffc:	9b02      	ldr	r3, [sp, #8]
 8001ffe:	043f      	lsls	r7, r7, #16
 8002000:	445b      	add	r3, fp
 8002002:	001e      	movs	r6, r3
 8002004:	4283      	cmp	r3, r0
 8002006:	4180      	sbcs	r0, r0
 8002008:	0423      	lsls	r3, r4, #16
 800200a:	4698      	mov	r8, r3
 800200c:	9b05      	ldr	r3, [sp, #20]
 800200e:	0c3f      	lsrs	r7, r7, #16
 8002010:	4447      	add	r7, r8
 8002012:	4698      	mov	r8, r3
 8002014:	1876      	adds	r6, r6, r1
 8002016:	428e      	cmp	r6, r1
 8002018:	4189      	sbcs	r1, r1
 800201a:	4447      	add	r7, r8
 800201c:	4240      	negs	r0, r0
 800201e:	183d      	adds	r5, r7, r0
 8002020:	46a8      	mov	r8, r5
 8002022:	4693      	mov	fp, r2
 8002024:	4249      	negs	r1, r1
 8002026:	468a      	mov	sl, r1
 8002028:	44c3      	add	fp, r8
 800202a:	429f      	cmp	r7, r3
 800202c:	41bf      	sbcs	r7, r7
 800202e:	4580      	cmp	r8, r0
 8002030:	4180      	sbcs	r0, r0
 8002032:	9b03      	ldr	r3, [sp, #12]
 8002034:	44da      	add	sl, fp
 8002036:	4698      	mov	r8, r3
 8002038:	4653      	mov	r3, sl
 800203a:	4240      	negs	r0, r0
 800203c:	427f      	negs	r7, r7
 800203e:	4307      	orrs	r7, r0
 8002040:	0c24      	lsrs	r4, r4, #16
 8002042:	4593      	cmp	fp, r2
 8002044:	4192      	sbcs	r2, r2
 8002046:	458a      	cmp	sl, r1
 8002048:	4189      	sbcs	r1, r1
 800204a:	193f      	adds	r7, r7, r4
 800204c:	0ddc      	lsrs	r4, r3, #23
 800204e:	9b04      	ldr	r3, [sp, #16]
 8002050:	0275      	lsls	r5, r6, #9
 8002052:	431d      	orrs	r5, r3
 8002054:	1e68      	subs	r0, r5, #1
 8002056:	4185      	sbcs	r5, r0
 8002058:	4653      	mov	r3, sl
 800205a:	4252      	negs	r2, r2
 800205c:	4249      	negs	r1, r1
 800205e:	430a      	orrs	r2, r1
 8002060:	18bf      	adds	r7, r7, r2
 8002062:	4447      	add	r7, r8
 8002064:	0df6      	lsrs	r6, r6, #23
 8002066:	027f      	lsls	r7, r7, #9
 8002068:	4335      	orrs	r5, r6
 800206a:	025a      	lsls	r2, r3, #9
 800206c:	433c      	orrs	r4, r7
 800206e:	4315      	orrs	r5, r2
 8002070:	01fb      	lsls	r3, r7, #7
 8002072:	d400      	bmi.n	8002076 <__aeabi_dmul+0x2fe>
 8002074:	e0c1      	b.n	80021fa <__aeabi_dmul+0x482>
 8002076:	2101      	movs	r1, #1
 8002078:	086a      	lsrs	r2, r5, #1
 800207a:	400d      	ands	r5, r1
 800207c:	4315      	orrs	r5, r2
 800207e:	07e2      	lsls	r2, r4, #31
 8002080:	4315      	orrs	r5, r2
 8002082:	0864      	lsrs	r4, r4, #1
 8002084:	4926      	ldr	r1, [pc, #152]	; (8002120 <__aeabi_dmul+0x3a8>)
 8002086:	4461      	add	r1, ip
 8002088:	2900      	cmp	r1, #0
 800208a:	dd56      	ble.n	800213a <__aeabi_dmul+0x3c2>
 800208c:	076b      	lsls	r3, r5, #29
 800208e:	d009      	beq.n	80020a4 <__aeabi_dmul+0x32c>
 8002090:	220f      	movs	r2, #15
 8002092:	402a      	ands	r2, r5
 8002094:	2a04      	cmp	r2, #4
 8002096:	d005      	beq.n	80020a4 <__aeabi_dmul+0x32c>
 8002098:	1d2a      	adds	r2, r5, #4
 800209a:	42aa      	cmp	r2, r5
 800209c:	41ad      	sbcs	r5, r5
 800209e:	426d      	negs	r5, r5
 80020a0:	1964      	adds	r4, r4, r5
 80020a2:	0015      	movs	r5, r2
 80020a4:	01e3      	lsls	r3, r4, #7
 80020a6:	d504      	bpl.n	80020b2 <__aeabi_dmul+0x33a>
 80020a8:	2180      	movs	r1, #128	; 0x80
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <__aeabi_dmul+0x3ac>)
 80020ac:	00c9      	lsls	r1, r1, #3
 80020ae:	4014      	ands	r4, r2
 80020b0:	4461      	add	r1, ip
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <__aeabi_dmul+0x3b0>)
 80020b4:	4291      	cmp	r1, r2
 80020b6:	dd00      	ble.n	80020ba <__aeabi_dmul+0x342>
 80020b8:	e724      	b.n	8001f04 <__aeabi_dmul+0x18c>
 80020ba:	0762      	lsls	r2, r4, #29
 80020bc:	08ed      	lsrs	r5, r5, #3
 80020be:	0264      	lsls	r4, r4, #9
 80020c0:	0549      	lsls	r1, r1, #21
 80020c2:	4315      	orrs	r5, r2
 80020c4:	0b24      	lsrs	r4, r4, #12
 80020c6:	0d4a      	lsrs	r2, r1, #21
 80020c8:	e6c6      	b.n	8001e58 <__aeabi_dmul+0xe0>
 80020ca:	9701      	str	r7, [sp, #4]
 80020cc:	e6b8      	b.n	8001e40 <__aeabi_dmul+0xc8>
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <__aeabi_dmul+0x398>)
 80020d0:	2003      	movs	r0, #3
 80020d2:	4694      	mov	ip, r2
 80020d4:	4463      	add	r3, ip
 80020d6:	464a      	mov	r2, r9
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2303      	movs	r3, #3
 80020dc:	431a      	orrs	r2, r3
 80020de:	4691      	mov	r9, r2
 80020e0:	4652      	mov	r2, sl
 80020e2:	e68a      	b.n	8001dfa <__aeabi_dmul+0x82>
 80020e4:	4649      	mov	r1, r9
 80020e6:	2301      	movs	r3, #1
 80020e8:	4319      	orrs	r1, r3
 80020ea:	4689      	mov	r9, r1
 80020ec:	2600      	movs	r6, #0
 80020ee:	2001      	movs	r0, #1
 80020f0:	e683      	b.n	8001dfa <__aeabi_dmul+0x82>
 80020f2:	220c      	movs	r2, #12
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2303      	movs	r3, #3
 80020f8:	0005      	movs	r5, r0
 80020fa:	4691      	mov	r9, r2
 80020fc:	469b      	mov	fp, r3
 80020fe:	e65e      	b.n	8001dbe <__aeabi_dmul+0x46>
 8002100:	2304      	movs	r3, #4
 8002102:	4699      	mov	r9, r3
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	2400      	movs	r4, #0
 800210c:	469b      	mov	fp, r3
 800210e:	e656      	b.n	8001dbe <__aeabi_dmul+0x46>
 8002110:	000007ff 	.word	0x000007ff
 8002114:	fffffc01 	.word	0xfffffc01
 8002118:	08017a68 	.word	0x08017a68
 800211c:	fffffc0d 	.word	0xfffffc0d
 8002120:	000003ff 	.word	0x000003ff
 8002124:	feffffff 	.word	0xfeffffff
 8002128:	000007fe 	.word	0x000007fe
 800212c:	2300      	movs	r3, #0
 800212e:	2480      	movs	r4, #128	; 0x80
 8002130:	2500      	movs	r5, #0
 8002132:	4a44      	ldr	r2, [pc, #272]	; (8002244 <__aeabi_dmul+0x4cc>)
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	0324      	lsls	r4, r4, #12
 8002138:	e68e      	b.n	8001e58 <__aeabi_dmul+0xe0>
 800213a:	2001      	movs	r0, #1
 800213c:	1a40      	subs	r0, r0, r1
 800213e:	2838      	cmp	r0, #56	; 0x38
 8002140:	dd00      	ble.n	8002144 <__aeabi_dmul+0x3cc>
 8002142:	e686      	b.n	8001e52 <__aeabi_dmul+0xda>
 8002144:	281f      	cmp	r0, #31
 8002146:	dd5b      	ble.n	8002200 <__aeabi_dmul+0x488>
 8002148:	221f      	movs	r2, #31
 800214a:	0023      	movs	r3, r4
 800214c:	4252      	negs	r2, r2
 800214e:	1a51      	subs	r1, r2, r1
 8002150:	40cb      	lsrs	r3, r1
 8002152:	0019      	movs	r1, r3
 8002154:	2820      	cmp	r0, #32
 8002156:	d003      	beq.n	8002160 <__aeabi_dmul+0x3e8>
 8002158:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <__aeabi_dmul+0x4d0>)
 800215a:	4462      	add	r2, ip
 800215c:	4094      	lsls	r4, r2
 800215e:	4325      	orrs	r5, r4
 8002160:	1e6a      	subs	r2, r5, #1
 8002162:	4195      	sbcs	r5, r2
 8002164:	002a      	movs	r2, r5
 8002166:	430a      	orrs	r2, r1
 8002168:	2107      	movs	r1, #7
 800216a:	000d      	movs	r5, r1
 800216c:	2400      	movs	r4, #0
 800216e:	4015      	ands	r5, r2
 8002170:	4211      	tst	r1, r2
 8002172:	d05b      	beq.n	800222c <__aeabi_dmul+0x4b4>
 8002174:	210f      	movs	r1, #15
 8002176:	2400      	movs	r4, #0
 8002178:	4011      	ands	r1, r2
 800217a:	2904      	cmp	r1, #4
 800217c:	d053      	beq.n	8002226 <__aeabi_dmul+0x4ae>
 800217e:	1d11      	adds	r1, r2, #4
 8002180:	4291      	cmp	r1, r2
 8002182:	4192      	sbcs	r2, r2
 8002184:	4252      	negs	r2, r2
 8002186:	18a4      	adds	r4, r4, r2
 8002188:	000a      	movs	r2, r1
 800218a:	0223      	lsls	r3, r4, #8
 800218c:	d54b      	bpl.n	8002226 <__aeabi_dmul+0x4ae>
 800218e:	2201      	movs	r2, #1
 8002190:	2400      	movs	r4, #0
 8002192:	2500      	movs	r5, #0
 8002194:	e660      	b.n	8001e58 <__aeabi_dmul+0xe0>
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	031b      	lsls	r3, r3, #12
 800219a:	421c      	tst	r4, r3
 800219c:	d009      	beq.n	80021b2 <__aeabi_dmul+0x43a>
 800219e:	421e      	tst	r6, r3
 80021a0:	d107      	bne.n	80021b2 <__aeabi_dmul+0x43a>
 80021a2:	4333      	orrs	r3, r6
 80021a4:	031c      	lsls	r4, r3, #12
 80021a6:	4643      	mov	r3, r8
 80021a8:	0015      	movs	r5, r2
 80021aa:	0b24      	lsrs	r4, r4, #12
 80021ac:	4a25      	ldr	r2, [pc, #148]	; (8002244 <__aeabi_dmul+0x4cc>)
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	e652      	b.n	8001e58 <__aeabi_dmul+0xe0>
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	0312      	lsls	r2, r2, #12
 80021b6:	4314      	orrs	r4, r2
 80021b8:	0324      	lsls	r4, r4, #12
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <__aeabi_dmul+0x4cc>)
 80021bc:	0b24      	lsrs	r4, r4, #12
 80021be:	9701      	str	r7, [sp, #4]
 80021c0:	e64a      	b.n	8001e58 <__aeabi_dmul+0xe0>
 80021c2:	f000 fd51 	bl	8002c68 <__clzsi2>
 80021c6:	0003      	movs	r3, r0
 80021c8:	001a      	movs	r2, r3
 80021ca:	3215      	adds	r2, #21
 80021cc:	3020      	adds	r0, #32
 80021ce:	2a1c      	cmp	r2, #28
 80021d0:	dc00      	bgt.n	80021d4 <__aeabi_dmul+0x45c>
 80021d2:	e684      	b.n	8001ede <__aeabi_dmul+0x166>
 80021d4:	4656      	mov	r6, sl
 80021d6:	3b08      	subs	r3, #8
 80021d8:	2200      	movs	r2, #0
 80021da:	409e      	lsls	r6, r3
 80021dc:	e689      	b.n	8001ef2 <__aeabi_dmul+0x17a>
 80021de:	f000 fd43 	bl	8002c68 <__clzsi2>
 80021e2:	0001      	movs	r1, r0
 80021e4:	0002      	movs	r2, r0
 80021e6:	3115      	adds	r1, #21
 80021e8:	3220      	adds	r2, #32
 80021ea:	291c      	cmp	r1, #28
 80021ec:	dc00      	bgt.n	80021f0 <__aeabi_dmul+0x478>
 80021ee:	e64e      	b.n	8001e8e <__aeabi_dmul+0x116>
 80021f0:	0034      	movs	r4, r6
 80021f2:	3808      	subs	r0, #8
 80021f4:	2500      	movs	r5, #0
 80021f6:	4084      	lsls	r4, r0
 80021f8:	e653      	b.n	8001ea2 <__aeabi_dmul+0x12a>
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	469c      	mov	ip, r3
 80021fe:	e741      	b.n	8002084 <__aeabi_dmul+0x30c>
 8002200:	4912      	ldr	r1, [pc, #72]	; (800224c <__aeabi_dmul+0x4d4>)
 8002202:	0022      	movs	r2, r4
 8002204:	4461      	add	r1, ip
 8002206:	002e      	movs	r6, r5
 8002208:	408d      	lsls	r5, r1
 800220a:	408a      	lsls	r2, r1
 800220c:	40c6      	lsrs	r6, r0
 800220e:	1e69      	subs	r1, r5, #1
 8002210:	418d      	sbcs	r5, r1
 8002212:	4332      	orrs	r2, r6
 8002214:	432a      	orrs	r2, r5
 8002216:	40c4      	lsrs	r4, r0
 8002218:	0753      	lsls	r3, r2, #29
 800221a:	d0b6      	beq.n	800218a <__aeabi_dmul+0x412>
 800221c:	210f      	movs	r1, #15
 800221e:	4011      	ands	r1, r2
 8002220:	2904      	cmp	r1, #4
 8002222:	d1ac      	bne.n	800217e <__aeabi_dmul+0x406>
 8002224:	e7b1      	b.n	800218a <__aeabi_dmul+0x412>
 8002226:	0765      	lsls	r5, r4, #29
 8002228:	0264      	lsls	r4, r4, #9
 800222a:	0b24      	lsrs	r4, r4, #12
 800222c:	08d2      	lsrs	r2, r2, #3
 800222e:	4315      	orrs	r5, r2
 8002230:	2200      	movs	r2, #0
 8002232:	e611      	b.n	8001e58 <__aeabi_dmul+0xe0>
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	0312      	lsls	r2, r2, #12
 8002238:	4314      	orrs	r4, r2
 800223a:	0324      	lsls	r4, r4, #12
 800223c:	4a01      	ldr	r2, [pc, #4]	; (8002244 <__aeabi_dmul+0x4cc>)
 800223e:	0b24      	lsrs	r4, r4, #12
 8002240:	e60a      	b.n	8001e58 <__aeabi_dmul+0xe0>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	000007ff 	.word	0x000007ff
 8002248:	0000043e 	.word	0x0000043e
 800224c:	0000041e 	.word	0x0000041e

08002250 <__aeabi_dsub>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	4657      	mov	r7, sl
 8002254:	464e      	mov	r6, r9
 8002256:	4645      	mov	r5, r8
 8002258:	46de      	mov	lr, fp
 800225a:	0004      	movs	r4, r0
 800225c:	b5e0      	push	{r5, r6, r7, lr}
 800225e:	001f      	movs	r7, r3
 8002260:	0010      	movs	r0, r2
 8002262:	030b      	lsls	r3, r1, #12
 8002264:	0f62      	lsrs	r2, r4, #29
 8002266:	004e      	lsls	r6, r1, #1
 8002268:	0fcd      	lsrs	r5, r1, #31
 800226a:	0a5b      	lsrs	r3, r3, #9
 800226c:	0339      	lsls	r1, r7, #12
 800226e:	4313      	orrs	r3, r2
 8002270:	0a49      	lsrs	r1, r1, #9
 8002272:	00e2      	lsls	r2, r4, #3
 8002274:	0f44      	lsrs	r4, r0, #29
 8002276:	4321      	orrs	r1, r4
 8002278:	4cc2      	ldr	r4, [pc, #776]	; (8002584 <__aeabi_dsub+0x334>)
 800227a:	4691      	mov	r9, r2
 800227c:	4692      	mov	sl, r2
 800227e:	00c0      	lsls	r0, r0, #3
 8002280:	007a      	lsls	r2, r7, #1
 8002282:	4680      	mov	r8, r0
 8002284:	0d76      	lsrs	r6, r6, #21
 8002286:	0d52      	lsrs	r2, r2, #21
 8002288:	0fff      	lsrs	r7, r7, #31
 800228a:	42a2      	cmp	r2, r4
 800228c:	d100      	bne.n	8002290 <__aeabi_dsub+0x40>
 800228e:	e0b4      	b.n	80023fa <__aeabi_dsub+0x1aa>
 8002290:	2401      	movs	r4, #1
 8002292:	4067      	eors	r7, r4
 8002294:	46bb      	mov	fp, r7
 8002296:	42bd      	cmp	r5, r7
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x4c>
 800229a:	e088      	b.n	80023ae <__aeabi_dsub+0x15e>
 800229c:	1ab4      	subs	r4, r6, r2
 800229e:	46a4      	mov	ip, r4
 80022a0:	2c00      	cmp	r4, #0
 80022a2:	dc00      	bgt.n	80022a6 <__aeabi_dsub+0x56>
 80022a4:	e0b2      	b.n	800240c <__aeabi_dsub+0x1bc>
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x5c>
 80022aa:	e0c5      	b.n	8002438 <__aeabi_dsub+0x1e8>
 80022ac:	4ab5      	ldr	r2, [pc, #724]	; (8002584 <__aeabi_dsub+0x334>)
 80022ae:	4296      	cmp	r6, r2
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x64>
 80022b2:	e28b      	b.n	80027cc <__aeabi_dsub+0x57c>
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0412      	lsls	r2, r2, #16
 80022b8:	4311      	orrs	r1, r2
 80022ba:	4662      	mov	r2, ip
 80022bc:	2a38      	cmp	r2, #56	; 0x38
 80022be:	dd00      	ble.n	80022c2 <__aeabi_dsub+0x72>
 80022c0:	e1a1      	b.n	8002606 <__aeabi_dsub+0x3b6>
 80022c2:	2a1f      	cmp	r2, #31
 80022c4:	dd00      	ble.n	80022c8 <__aeabi_dsub+0x78>
 80022c6:	e216      	b.n	80026f6 <__aeabi_dsub+0x4a6>
 80022c8:	2720      	movs	r7, #32
 80022ca:	000c      	movs	r4, r1
 80022cc:	1abf      	subs	r7, r7, r2
 80022ce:	40bc      	lsls	r4, r7
 80022d0:	0002      	movs	r2, r0
 80022d2:	46a0      	mov	r8, r4
 80022d4:	4664      	mov	r4, ip
 80022d6:	40b8      	lsls	r0, r7
 80022d8:	40e2      	lsrs	r2, r4
 80022da:	4644      	mov	r4, r8
 80022dc:	4314      	orrs	r4, r2
 80022de:	0002      	movs	r2, r0
 80022e0:	1e50      	subs	r0, r2, #1
 80022e2:	4182      	sbcs	r2, r0
 80022e4:	4660      	mov	r0, ip
 80022e6:	40c1      	lsrs	r1, r0
 80022e8:	4322      	orrs	r2, r4
 80022ea:	1a5b      	subs	r3, r3, r1
 80022ec:	4649      	mov	r1, r9
 80022ee:	1a8c      	subs	r4, r1, r2
 80022f0:	45a1      	cmp	r9, r4
 80022f2:	4192      	sbcs	r2, r2
 80022f4:	4252      	negs	r2, r2
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	4698      	mov	r8, r3
 80022fa:	4643      	mov	r3, r8
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	d400      	bmi.n	8002302 <__aeabi_dsub+0xb2>
 8002300:	e117      	b.n	8002532 <__aeabi_dsub+0x2e2>
 8002302:	4643      	mov	r3, r8
 8002304:	025b      	lsls	r3, r3, #9
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	4698      	mov	r8, r3
 800230a:	4643      	mov	r3, r8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d100      	bne.n	8002312 <__aeabi_dsub+0xc2>
 8002310:	e16c      	b.n	80025ec <__aeabi_dsub+0x39c>
 8002312:	4640      	mov	r0, r8
 8002314:	f000 fca8 	bl	8002c68 <__clzsi2>
 8002318:	0002      	movs	r2, r0
 800231a:	3a08      	subs	r2, #8
 800231c:	2120      	movs	r1, #32
 800231e:	0020      	movs	r0, r4
 8002320:	4643      	mov	r3, r8
 8002322:	1a89      	subs	r1, r1, r2
 8002324:	4093      	lsls	r3, r2
 8002326:	40c8      	lsrs	r0, r1
 8002328:	4094      	lsls	r4, r2
 800232a:	4303      	orrs	r3, r0
 800232c:	4296      	cmp	r6, r2
 800232e:	dd00      	ble.n	8002332 <__aeabi_dsub+0xe2>
 8002330:	e157      	b.n	80025e2 <__aeabi_dsub+0x392>
 8002332:	1b96      	subs	r6, r2, r6
 8002334:	1c71      	adds	r1, r6, #1
 8002336:	291f      	cmp	r1, #31
 8002338:	dd00      	ble.n	800233c <__aeabi_dsub+0xec>
 800233a:	e1cb      	b.n	80026d4 <__aeabi_dsub+0x484>
 800233c:	2220      	movs	r2, #32
 800233e:	0018      	movs	r0, r3
 8002340:	0026      	movs	r6, r4
 8002342:	1a52      	subs	r2, r2, r1
 8002344:	4094      	lsls	r4, r2
 8002346:	4090      	lsls	r0, r2
 8002348:	40ce      	lsrs	r6, r1
 800234a:	40cb      	lsrs	r3, r1
 800234c:	1e62      	subs	r2, r4, #1
 800234e:	4194      	sbcs	r4, r2
 8002350:	4330      	orrs	r0, r6
 8002352:	4698      	mov	r8, r3
 8002354:	2600      	movs	r6, #0
 8002356:	4304      	orrs	r4, r0
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	d009      	beq.n	8002370 <__aeabi_dsub+0x120>
 800235c:	230f      	movs	r3, #15
 800235e:	4023      	ands	r3, r4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d005      	beq.n	8002370 <__aeabi_dsub+0x120>
 8002364:	1d23      	adds	r3, r4, #4
 8002366:	42a3      	cmp	r3, r4
 8002368:	41a4      	sbcs	r4, r4
 800236a:	4264      	negs	r4, r4
 800236c:	44a0      	add	r8, r4
 800236e:	001c      	movs	r4, r3
 8002370:	4643      	mov	r3, r8
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	d400      	bmi.n	8002378 <__aeabi_dsub+0x128>
 8002376:	e0df      	b.n	8002538 <__aeabi_dsub+0x2e8>
 8002378:	4b82      	ldr	r3, [pc, #520]	; (8002584 <__aeabi_dsub+0x334>)
 800237a:	3601      	adds	r6, #1
 800237c:	429e      	cmp	r6, r3
 800237e:	d100      	bne.n	8002382 <__aeabi_dsub+0x132>
 8002380:	e0fb      	b.n	800257a <__aeabi_dsub+0x32a>
 8002382:	4642      	mov	r2, r8
 8002384:	4b80      	ldr	r3, [pc, #512]	; (8002588 <__aeabi_dsub+0x338>)
 8002386:	08e4      	lsrs	r4, r4, #3
 8002388:	401a      	ands	r2, r3
 800238a:	0013      	movs	r3, r2
 800238c:	0571      	lsls	r1, r6, #21
 800238e:	0752      	lsls	r2, r2, #29
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	4322      	orrs	r2, r4
 8002394:	0b1b      	lsrs	r3, r3, #12
 8002396:	0d49      	lsrs	r1, r1, #21
 8002398:	0509      	lsls	r1, r1, #20
 800239a:	07ed      	lsls	r5, r5, #31
 800239c:	4319      	orrs	r1, r3
 800239e:	4329      	orrs	r1, r5
 80023a0:	0010      	movs	r0, r2
 80023a2:	bcf0      	pop	{r4, r5, r6, r7}
 80023a4:	46bb      	mov	fp, r7
 80023a6:	46b2      	mov	sl, r6
 80023a8:	46a9      	mov	r9, r5
 80023aa:	46a0      	mov	r8, r4
 80023ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ae:	1ab4      	subs	r4, r6, r2
 80023b0:	46a4      	mov	ip, r4
 80023b2:	2c00      	cmp	r4, #0
 80023b4:	dd58      	ble.n	8002468 <__aeabi_dsub+0x218>
 80023b6:	2a00      	cmp	r2, #0
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x16c>
 80023ba:	e09e      	b.n	80024fa <__aeabi_dsub+0x2aa>
 80023bc:	4a71      	ldr	r2, [pc, #452]	; (8002584 <__aeabi_dsub+0x334>)
 80023be:	4296      	cmp	r6, r2
 80023c0:	d100      	bne.n	80023c4 <__aeabi_dsub+0x174>
 80023c2:	e13b      	b.n	800263c <__aeabi_dsub+0x3ec>
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	0412      	lsls	r2, r2, #16
 80023c8:	4311      	orrs	r1, r2
 80023ca:	4662      	mov	r2, ip
 80023cc:	2a38      	cmp	r2, #56	; 0x38
 80023ce:	dd00      	ble.n	80023d2 <__aeabi_dsub+0x182>
 80023d0:	e0c1      	b.n	8002556 <__aeabi_dsub+0x306>
 80023d2:	2a1f      	cmp	r2, #31
 80023d4:	dc00      	bgt.n	80023d8 <__aeabi_dsub+0x188>
 80023d6:	e1bb      	b.n	8002750 <__aeabi_dsub+0x500>
 80023d8:	000c      	movs	r4, r1
 80023da:	3a20      	subs	r2, #32
 80023dc:	40d4      	lsrs	r4, r2
 80023de:	0022      	movs	r2, r4
 80023e0:	4664      	mov	r4, ip
 80023e2:	2c20      	cmp	r4, #32
 80023e4:	d004      	beq.n	80023f0 <__aeabi_dsub+0x1a0>
 80023e6:	2740      	movs	r7, #64	; 0x40
 80023e8:	1b3f      	subs	r7, r7, r4
 80023ea:	40b9      	lsls	r1, r7
 80023ec:	4308      	orrs	r0, r1
 80023ee:	4680      	mov	r8, r0
 80023f0:	4644      	mov	r4, r8
 80023f2:	1e61      	subs	r1, r4, #1
 80023f4:	418c      	sbcs	r4, r1
 80023f6:	4314      	orrs	r4, r2
 80023f8:	e0b1      	b.n	800255e <__aeabi_dsub+0x30e>
 80023fa:	000c      	movs	r4, r1
 80023fc:	4304      	orrs	r4, r0
 80023fe:	d02a      	beq.n	8002456 <__aeabi_dsub+0x206>
 8002400:	46bb      	mov	fp, r7
 8002402:	42bd      	cmp	r5, r7
 8002404:	d02d      	beq.n	8002462 <__aeabi_dsub+0x212>
 8002406:	4c61      	ldr	r4, [pc, #388]	; (800258c <__aeabi_dsub+0x33c>)
 8002408:	46a4      	mov	ip, r4
 800240a:	44b4      	add	ip, r6
 800240c:	4664      	mov	r4, ip
 800240e:	2c00      	cmp	r4, #0
 8002410:	d05c      	beq.n	80024cc <__aeabi_dsub+0x27c>
 8002412:	1b94      	subs	r4, r2, r6
 8002414:	46a4      	mov	ip, r4
 8002416:	2e00      	cmp	r6, #0
 8002418:	d000      	beq.n	800241c <__aeabi_dsub+0x1cc>
 800241a:	e115      	b.n	8002648 <__aeabi_dsub+0x3f8>
 800241c:	464d      	mov	r5, r9
 800241e:	431d      	orrs	r5, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x1d4>
 8002422:	e1c3      	b.n	80027ac <__aeabi_dsub+0x55c>
 8002424:	1e65      	subs	r5, r4, #1
 8002426:	2c01      	cmp	r4, #1
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x1dc>
 800242a:	e20c      	b.n	8002846 <__aeabi_dsub+0x5f6>
 800242c:	4e55      	ldr	r6, [pc, #340]	; (8002584 <__aeabi_dsub+0x334>)
 800242e:	42b4      	cmp	r4, r6
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x1e4>
 8002432:	e1f8      	b.n	8002826 <__aeabi_dsub+0x5d6>
 8002434:	46ac      	mov	ip, r5
 8002436:	e10e      	b.n	8002656 <__aeabi_dsub+0x406>
 8002438:	000a      	movs	r2, r1
 800243a:	4302      	orrs	r2, r0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x1f0>
 800243e:	e136      	b.n	80026ae <__aeabi_dsub+0x45e>
 8002440:	0022      	movs	r2, r4
 8002442:	3a01      	subs	r2, #1
 8002444:	2c01      	cmp	r4, #1
 8002446:	d100      	bne.n	800244a <__aeabi_dsub+0x1fa>
 8002448:	e1c6      	b.n	80027d8 <__aeabi_dsub+0x588>
 800244a:	4c4e      	ldr	r4, [pc, #312]	; (8002584 <__aeabi_dsub+0x334>)
 800244c:	45a4      	cmp	ip, r4
 800244e:	d100      	bne.n	8002452 <__aeabi_dsub+0x202>
 8002450:	e0f4      	b.n	800263c <__aeabi_dsub+0x3ec>
 8002452:	4694      	mov	ip, r2
 8002454:	e731      	b.n	80022ba <__aeabi_dsub+0x6a>
 8002456:	2401      	movs	r4, #1
 8002458:	4067      	eors	r7, r4
 800245a:	46bb      	mov	fp, r7
 800245c:	42bd      	cmp	r5, r7
 800245e:	d000      	beq.n	8002462 <__aeabi_dsub+0x212>
 8002460:	e71c      	b.n	800229c <__aeabi_dsub+0x4c>
 8002462:	4c4a      	ldr	r4, [pc, #296]	; (800258c <__aeabi_dsub+0x33c>)
 8002464:	46a4      	mov	ip, r4
 8002466:	44b4      	add	ip, r6
 8002468:	4664      	mov	r4, ip
 800246a:	2c00      	cmp	r4, #0
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x220>
 800246e:	e0cf      	b.n	8002610 <__aeabi_dsub+0x3c0>
 8002470:	1b94      	subs	r4, r2, r6
 8002472:	46a4      	mov	ip, r4
 8002474:	2e00      	cmp	r6, #0
 8002476:	d100      	bne.n	800247a <__aeabi_dsub+0x22a>
 8002478:	e15c      	b.n	8002734 <__aeabi_dsub+0x4e4>
 800247a:	4e42      	ldr	r6, [pc, #264]	; (8002584 <__aeabi_dsub+0x334>)
 800247c:	42b2      	cmp	r2, r6
 800247e:	d100      	bne.n	8002482 <__aeabi_dsub+0x232>
 8002480:	e1ec      	b.n	800285c <__aeabi_dsub+0x60c>
 8002482:	2680      	movs	r6, #128	; 0x80
 8002484:	0436      	lsls	r6, r6, #16
 8002486:	4333      	orrs	r3, r6
 8002488:	4664      	mov	r4, ip
 800248a:	2c38      	cmp	r4, #56	; 0x38
 800248c:	dd00      	ble.n	8002490 <__aeabi_dsub+0x240>
 800248e:	e1b3      	b.n	80027f8 <__aeabi_dsub+0x5a8>
 8002490:	2c1f      	cmp	r4, #31
 8002492:	dd00      	ble.n	8002496 <__aeabi_dsub+0x246>
 8002494:	e238      	b.n	8002908 <__aeabi_dsub+0x6b8>
 8002496:	2620      	movs	r6, #32
 8002498:	1b36      	subs	r6, r6, r4
 800249a:	001c      	movs	r4, r3
 800249c:	40b4      	lsls	r4, r6
 800249e:	464f      	mov	r7, r9
 80024a0:	46a0      	mov	r8, r4
 80024a2:	4664      	mov	r4, ip
 80024a4:	40e7      	lsrs	r7, r4
 80024a6:	4644      	mov	r4, r8
 80024a8:	433c      	orrs	r4, r7
 80024aa:	464f      	mov	r7, r9
 80024ac:	40b7      	lsls	r7, r6
 80024ae:	003e      	movs	r6, r7
 80024b0:	1e77      	subs	r7, r6, #1
 80024b2:	41be      	sbcs	r6, r7
 80024b4:	4334      	orrs	r4, r6
 80024b6:	4666      	mov	r6, ip
 80024b8:	40f3      	lsrs	r3, r6
 80024ba:	18c9      	adds	r1, r1, r3
 80024bc:	1824      	adds	r4, r4, r0
 80024be:	4284      	cmp	r4, r0
 80024c0:	419b      	sbcs	r3, r3
 80024c2:	425b      	negs	r3, r3
 80024c4:	4698      	mov	r8, r3
 80024c6:	0016      	movs	r6, r2
 80024c8:	4488      	add	r8, r1
 80024ca:	e04e      	b.n	800256a <__aeabi_dsub+0x31a>
 80024cc:	4a30      	ldr	r2, [pc, #192]	; (8002590 <__aeabi_dsub+0x340>)
 80024ce:	1c74      	adds	r4, r6, #1
 80024d0:	4214      	tst	r4, r2
 80024d2:	d000      	beq.n	80024d6 <__aeabi_dsub+0x286>
 80024d4:	e0d6      	b.n	8002684 <__aeabi_dsub+0x434>
 80024d6:	464a      	mov	r2, r9
 80024d8:	431a      	orrs	r2, r3
 80024da:	2e00      	cmp	r6, #0
 80024dc:	d000      	beq.n	80024e0 <__aeabi_dsub+0x290>
 80024de:	e15b      	b.n	8002798 <__aeabi_dsub+0x548>
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x296>
 80024e4:	e1a5      	b.n	8002832 <__aeabi_dsub+0x5e2>
 80024e6:	000a      	movs	r2, r1
 80024e8:	4302      	orrs	r2, r0
 80024ea:	d000      	beq.n	80024ee <__aeabi_dsub+0x29e>
 80024ec:	e1bb      	b.n	8002866 <__aeabi_dsub+0x616>
 80024ee:	464a      	mov	r2, r9
 80024f0:	0759      	lsls	r1, r3, #29
 80024f2:	08d2      	lsrs	r2, r2, #3
 80024f4:	430a      	orrs	r2, r1
 80024f6:	08db      	lsrs	r3, r3, #3
 80024f8:	e027      	b.n	800254a <__aeabi_dsub+0x2fa>
 80024fa:	000a      	movs	r2, r1
 80024fc:	4302      	orrs	r2, r0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x2b2>
 8002500:	e174      	b.n	80027ec <__aeabi_dsub+0x59c>
 8002502:	0022      	movs	r2, r4
 8002504:	3a01      	subs	r2, #1
 8002506:	2c01      	cmp	r4, #1
 8002508:	d005      	beq.n	8002516 <__aeabi_dsub+0x2c6>
 800250a:	4c1e      	ldr	r4, [pc, #120]	; (8002584 <__aeabi_dsub+0x334>)
 800250c:	45a4      	cmp	ip, r4
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x2c2>
 8002510:	e094      	b.n	800263c <__aeabi_dsub+0x3ec>
 8002512:	4694      	mov	ip, r2
 8002514:	e759      	b.n	80023ca <__aeabi_dsub+0x17a>
 8002516:	4448      	add	r0, r9
 8002518:	4548      	cmp	r0, r9
 800251a:	4192      	sbcs	r2, r2
 800251c:	185b      	adds	r3, r3, r1
 800251e:	4698      	mov	r8, r3
 8002520:	0004      	movs	r4, r0
 8002522:	4252      	negs	r2, r2
 8002524:	4490      	add	r8, r2
 8002526:	4643      	mov	r3, r8
 8002528:	2602      	movs	r6, #2
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	d500      	bpl.n	8002530 <__aeabi_dsub+0x2e0>
 800252e:	e0c4      	b.n	80026ba <__aeabi_dsub+0x46a>
 8002530:	3e01      	subs	r6, #1
 8002532:	0763      	lsls	r3, r4, #29
 8002534:	d000      	beq.n	8002538 <__aeabi_dsub+0x2e8>
 8002536:	e711      	b.n	800235c <__aeabi_dsub+0x10c>
 8002538:	4643      	mov	r3, r8
 800253a:	46b4      	mov	ip, r6
 800253c:	0759      	lsls	r1, r3, #29
 800253e:	08e2      	lsrs	r2, r4, #3
 8002540:	430a      	orrs	r2, r1
 8002542:	08db      	lsrs	r3, r3, #3
 8002544:	490f      	ldr	r1, [pc, #60]	; (8002584 <__aeabi_dsub+0x334>)
 8002546:	458c      	cmp	ip, r1
 8002548:	d040      	beq.n	80025cc <__aeabi_dsub+0x37c>
 800254a:	4661      	mov	r1, ip
 800254c:	031b      	lsls	r3, r3, #12
 800254e:	0549      	lsls	r1, r1, #21
 8002550:	0b1b      	lsrs	r3, r3, #12
 8002552:	0d49      	lsrs	r1, r1, #21
 8002554:	e720      	b.n	8002398 <__aeabi_dsub+0x148>
 8002556:	4301      	orrs	r1, r0
 8002558:	000c      	movs	r4, r1
 800255a:	1e61      	subs	r1, r4, #1
 800255c:	418c      	sbcs	r4, r1
 800255e:	444c      	add	r4, r9
 8002560:	454c      	cmp	r4, r9
 8002562:	4192      	sbcs	r2, r2
 8002564:	4252      	negs	r2, r2
 8002566:	4690      	mov	r8, r2
 8002568:	4498      	add	r8, r3
 800256a:	4643      	mov	r3, r8
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	d5e0      	bpl.n	8002532 <__aeabi_dsub+0x2e2>
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <__aeabi_dsub+0x334>)
 8002572:	3601      	adds	r6, #1
 8002574:	429e      	cmp	r6, r3
 8002576:	d000      	beq.n	800257a <__aeabi_dsub+0x32a>
 8002578:	e09f      	b.n	80026ba <__aeabi_dsub+0x46a>
 800257a:	0031      	movs	r1, r6
 800257c:	2300      	movs	r3, #0
 800257e:	2200      	movs	r2, #0
 8002580:	e70a      	b.n	8002398 <__aeabi_dsub+0x148>
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	000007ff 	.word	0x000007ff
 8002588:	ff7fffff 	.word	0xff7fffff
 800258c:	fffff801 	.word	0xfffff801
 8002590:	000007fe 	.word	0x000007fe
 8002594:	2a00      	cmp	r2, #0
 8002596:	d100      	bne.n	800259a <__aeabi_dsub+0x34a>
 8002598:	e160      	b.n	800285c <__aeabi_dsub+0x60c>
 800259a:	000a      	movs	r2, r1
 800259c:	4302      	orrs	r2, r0
 800259e:	d04d      	beq.n	800263c <__aeabi_dsub+0x3ec>
 80025a0:	464a      	mov	r2, r9
 80025a2:	075c      	lsls	r4, r3, #29
 80025a4:	08d2      	lsrs	r2, r2, #3
 80025a6:	4322      	orrs	r2, r4
 80025a8:	2480      	movs	r4, #128	; 0x80
 80025aa:	08db      	lsrs	r3, r3, #3
 80025ac:	0324      	lsls	r4, r4, #12
 80025ae:	4223      	tst	r3, r4
 80025b0:	d007      	beq.n	80025c2 <__aeabi_dsub+0x372>
 80025b2:	08ce      	lsrs	r6, r1, #3
 80025b4:	4226      	tst	r6, r4
 80025b6:	d104      	bne.n	80025c2 <__aeabi_dsub+0x372>
 80025b8:	465d      	mov	r5, fp
 80025ba:	0033      	movs	r3, r6
 80025bc:	08c2      	lsrs	r2, r0, #3
 80025be:	0749      	lsls	r1, r1, #29
 80025c0:	430a      	orrs	r2, r1
 80025c2:	0f51      	lsrs	r1, r2, #29
 80025c4:	00d2      	lsls	r2, r2, #3
 80025c6:	08d2      	lsrs	r2, r2, #3
 80025c8:	0749      	lsls	r1, r1, #29
 80025ca:	430a      	orrs	r2, r1
 80025cc:	0011      	movs	r1, r2
 80025ce:	4319      	orrs	r1, r3
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x384>
 80025d2:	e1c8      	b.n	8002966 <__aeabi_dsub+0x716>
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0309      	lsls	r1, r1, #12
 80025d8:	430b      	orrs	r3, r1
 80025da:	031b      	lsls	r3, r3, #12
 80025dc:	49d5      	ldr	r1, [pc, #852]	; (8002934 <__aeabi_dsub+0x6e4>)
 80025de:	0b1b      	lsrs	r3, r3, #12
 80025e0:	e6da      	b.n	8002398 <__aeabi_dsub+0x148>
 80025e2:	49d5      	ldr	r1, [pc, #852]	; (8002938 <__aeabi_dsub+0x6e8>)
 80025e4:	1ab6      	subs	r6, r6, r2
 80025e6:	400b      	ands	r3, r1
 80025e8:	4698      	mov	r8, r3
 80025ea:	e6b5      	b.n	8002358 <__aeabi_dsub+0x108>
 80025ec:	0020      	movs	r0, r4
 80025ee:	f000 fb3b 	bl	8002c68 <__clzsi2>
 80025f2:	0002      	movs	r2, r0
 80025f4:	3218      	adds	r2, #24
 80025f6:	2a1f      	cmp	r2, #31
 80025f8:	dc00      	bgt.n	80025fc <__aeabi_dsub+0x3ac>
 80025fa:	e68f      	b.n	800231c <__aeabi_dsub+0xcc>
 80025fc:	0023      	movs	r3, r4
 80025fe:	3808      	subs	r0, #8
 8002600:	4083      	lsls	r3, r0
 8002602:	2400      	movs	r4, #0
 8002604:	e692      	b.n	800232c <__aeabi_dsub+0xdc>
 8002606:	4308      	orrs	r0, r1
 8002608:	0002      	movs	r2, r0
 800260a:	1e50      	subs	r0, r2, #1
 800260c:	4182      	sbcs	r2, r0
 800260e:	e66d      	b.n	80022ec <__aeabi_dsub+0x9c>
 8002610:	4cca      	ldr	r4, [pc, #808]	; (800293c <__aeabi_dsub+0x6ec>)
 8002612:	1c72      	adds	r2, r6, #1
 8002614:	4222      	tst	r2, r4
 8002616:	d000      	beq.n	800261a <__aeabi_dsub+0x3ca>
 8002618:	e0ad      	b.n	8002776 <__aeabi_dsub+0x526>
 800261a:	464a      	mov	r2, r9
 800261c:	431a      	orrs	r2, r3
 800261e:	2e00      	cmp	r6, #0
 8002620:	d1b8      	bne.n	8002594 <__aeabi_dsub+0x344>
 8002622:	2a00      	cmp	r2, #0
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x3d8>
 8002626:	e158      	b.n	80028da <__aeabi_dsub+0x68a>
 8002628:	000a      	movs	r2, r1
 800262a:	4302      	orrs	r2, r0
 800262c:	d000      	beq.n	8002630 <__aeabi_dsub+0x3e0>
 800262e:	e159      	b.n	80028e4 <__aeabi_dsub+0x694>
 8002630:	464a      	mov	r2, r9
 8002632:	0759      	lsls	r1, r3, #29
 8002634:	08d2      	lsrs	r2, r2, #3
 8002636:	430a      	orrs	r2, r1
 8002638:	08db      	lsrs	r3, r3, #3
 800263a:	e786      	b.n	800254a <__aeabi_dsub+0x2fa>
 800263c:	464a      	mov	r2, r9
 800263e:	0759      	lsls	r1, r3, #29
 8002640:	08d2      	lsrs	r2, r2, #3
 8002642:	430a      	orrs	r2, r1
 8002644:	08db      	lsrs	r3, r3, #3
 8002646:	e7c1      	b.n	80025cc <__aeabi_dsub+0x37c>
 8002648:	4dba      	ldr	r5, [pc, #744]	; (8002934 <__aeabi_dsub+0x6e4>)
 800264a:	42aa      	cmp	r2, r5
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x400>
 800264e:	e11e      	b.n	800288e <__aeabi_dsub+0x63e>
 8002650:	2580      	movs	r5, #128	; 0x80
 8002652:	042d      	lsls	r5, r5, #16
 8002654:	432b      	orrs	r3, r5
 8002656:	4664      	mov	r4, ip
 8002658:	2c38      	cmp	r4, #56	; 0x38
 800265a:	dc5d      	bgt.n	8002718 <__aeabi_dsub+0x4c8>
 800265c:	2c1f      	cmp	r4, #31
 800265e:	dd00      	ble.n	8002662 <__aeabi_dsub+0x412>
 8002660:	e0d0      	b.n	8002804 <__aeabi_dsub+0x5b4>
 8002662:	2520      	movs	r5, #32
 8002664:	4667      	mov	r7, ip
 8002666:	1b2d      	subs	r5, r5, r4
 8002668:	464e      	mov	r6, r9
 800266a:	001c      	movs	r4, r3
 800266c:	40fe      	lsrs	r6, r7
 800266e:	40ac      	lsls	r4, r5
 8002670:	4334      	orrs	r4, r6
 8002672:	464e      	mov	r6, r9
 8002674:	40ae      	lsls	r6, r5
 8002676:	0035      	movs	r5, r6
 8002678:	40fb      	lsrs	r3, r7
 800267a:	1e6e      	subs	r6, r5, #1
 800267c:	41b5      	sbcs	r5, r6
 800267e:	1ac9      	subs	r1, r1, r3
 8002680:	432c      	orrs	r4, r5
 8002682:	e04e      	b.n	8002722 <__aeabi_dsub+0x4d2>
 8002684:	464a      	mov	r2, r9
 8002686:	1a14      	subs	r4, r2, r0
 8002688:	45a1      	cmp	r9, r4
 800268a:	4192      	sbcs	r2, r2
 800268c:	4252      	negs	r2, r2
 800268e:	4690      	mov	r8, r2
 8002690:	1a5f      	subs	r7, r3, r1
 8002692:	003a      	movs	r2, r7
 8002694:	4647      	mov	r7, r8
 8002696:	1bd2      	subs	r2, r2, r7
 8002698:	4690      	mov	r8, r2
 800269a:	0212      	lsls	r2, r2, #8
 800269c:	d500      	bpl.n	80026a0 <__aeabi_dsub+0x450>
 800269e:	e08b      	b.n	80027b8 <__aeabi_dsub+0x568>
 80026a0:	4642      	mov	r2, r8
 80026a2:	4322      	orrs	r2, r4
 80026a4:	d000      	beq.n	80026a8 <__aeabi_dsub+0x458>
 80026a6:	e630      	b.n	800230a <__aeabi_dsub+0xba>
 80026a8:	2300      	movs	r3, #0
 80026aa:	2500      	movs	r5, #0
 80026ac:	e74d      	b.n	800254a <__aeabi_dsub+0x2fa>
 80026ae:	464a      	mov	r2, r9
 80026b0:	0759      	lsls	r1, r3, #29
 80026b2:	08d2      	lsrs	r2, r2, #3
 80026b4:	430a      	orrs	r2, r1
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	e744      	b.n	8002544 <__aeabi_dsub+0x2f4>
 80026ba:	4642      	mov	r2, r8
 80026bc:	4b9e      	ldr	r3, [pc, #632]	; (8002938 <__aeabi_dsub+0x6e8>)
 80026be:	0861      	lsrs	r1, r4, #1
 80026c0:	401a      	ands	r2, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	2201      	movs	r2, #1
 80026c6:	4014      	ands	r4, r2
 80026c8:	430c      	orrs	r4, r1
 80026ca:	07da      	lsls	r2, r3, #31
 80026cc:	085b      	lsrs	r3, r3, #1
 80026ce:	4698      	mov	r8, r3
 80026d0:	4314      	orrs	r4, r2
 80026d2:	e641      	b.n	8002358 <__aeabi_dsub+0x108>
 80026d4:	001a      	movs	r2, r3
 80026d6:	3e1f      	subs	r6, #31
 80026d8:	40f2      	lsrs	r2, r6
 80026da:	0016      	movs	r6, r2
 80026dc:	2920      	cmp	r1, #32
 80026de:	d003      	beq.n	80026e8 <__aeabi_dsub+0x498>
 80026e0:	2240      	movs	r2, #64	; 0x40
 80026e2:	1a51      	subs	r1, r2, r1
 80026e4:	408b      	lsls	r3, r1
 80026e6:	431c      	orrs	r4, r3
 80026e8:	1e62      	subs	r2, r4, #1
 80026ea:	4194      	sbcs	r4, r2
 80026ec:	2300      	movs	r3, #0
 80026ee:	4334      	orrs	r4, r6
 80026f0:	4698      	mov	r8, r3
 80026f2:	2600      	movs	r6, #0
 80026f4:	e71d      	b.n	8002532 <__aeabi_dsub+0x2e2>
 80026f6:	000c      	movs	r4, r1
 80026f8:	3a20      	subs	r2, #32
 80026fa:	40d4      	lsrs	r4, r2
 80026fc:	0022      	movs	r2, r4
 80026fe:	4664      	mov	r4, ip
 8002700:	2c20      	cmp	r4, #32
 8002702:	d004      	beq.n	800270e <__aeabi_dsub+0x4be>
 8002704:	2740      	movs	r7, #64	; 0x40
 8002706:	1b3f      	subs	r7, r7, r4
 8002708:	40b9      	lsls	r1, r7
 800270a:	4308      	orrs	r0, r1
 800270c:	4680      	mov	r8, r0
 800270e:	4644      	mov	r4, r8
 8002710:	1e61      	subs	r1, r4, #1
 8002712:	418c      	sbcs	r4, r1
 8002714:	4322      	orrs	r2, r4
 8002716:	e5e9      	b.n	80022ec <__aeabi_dsub+0x9c>
 8002718:	464c      	mov	r4, r9
 800271a:	4323      	orrs	r3, r4
 800271c:	001c      	movs	r4, r3
 800271e:	1e63      	subs	r3, r4, #1
 8002720:	419c      	sbcs	r4, r3
 8002722:	1b04      	subs	r4, r0, r4
 8002724:	42a0      	cmp	r0, r4
 8002726:	419b      	sbcs	r3, r3
 8002728:	425b      	negs	r3, r3
 800272a:	1acb      	subs	r3, r1, r3
 800272c:	4698      	mov	r8, r3
 800272e:	465d      	mov	r5, fp
 8002730:	0016      	movs	r6, r2
 8002732:	e5e2      	b.n	80022fa <__aeabi_dsub+0xaa>
 8002734:	464e      	mov	r6, r9
 8002736:	431e      	orrs	r6, r3
 8002738:	d100      	bne.n	800273c <__aeabi_dsub+0x4ec>
 800273a:	e0ae      	b.n	800289a <__aeabi_dsub+0x64a>
 800273c:	1e66      	subs	r6, r4, #1
 800273e:	2c01      	cmp	r4, #1
 8002740:	d100      	bne.n	8002744 <__aeabi_dsub+0x4f4>
 8002742:	e0fd      	b.n	8002940 <__aeabi_dsub+0x6f0>
 8002744:	4f7b      	ldr	r7, [pc, #492]	; (8002934 <__aeabi_dsub+0x6e4>)
 8002746:	42bc      	cmp	r4, r7
 8002748:	d100      	bne.n	800274c <__aeabi_dsub+0x4fc>
 800274a:	e107      	b.n	800295c <__aeabi_dsub+0x70c>
 800274c:	46b4      	mov	ip, r6
 800274e:	e69b      	b.n	8002488 <__aeabi_dsub+0x238>
 8002750:	4664      	mov	r4, ip
 8002752:	2220      	movs	r2, #32
 8002754:	1b12      	subs	r2, r2, r4
 8002756:	000c      	movs	r4, r1
 8002758:	4094      	lsls	r4, r2
 800275a:	0007      	movs	r7, r0
 800275c:	4090      	lsls	r0, r2
 800275e:	46a0      	mov	r8, r4
 8002760:	4664      	mov	r4, ip
 8002762:	1e42      	subs	r2, r0, #1
 8002764:	4190      	sbcs	r0, r2
 8002766:	4662      	mov	r2, ip
 8002768:	40e7      	lsrs	r7, r4
 800276a:	4644      	mov	r4, r8
 800276c:	40d1      	lsrs	r1, r2
 800276e:	433c      	orrs	r4, r7
 8002770:	4304      	orrs	r4, r0
 8002772:	185b      	adds	r3, r3, r1
 8002774:	e6f3      	b.n	800255e <__aeabi_dsub+0x30e>
 8002776:	4c6f      	ldr	r4, [pc, #444]	; (8002934 <__aeabi_dsub+0x6e4>)
 8002778:	42a2      	cmp	r2, r4
 800277a:	d100      	bne.n	800277e <__aeabi_dsub+0x52e>
 800277c:	e0d5      	b.n	800292a <__aeabi_dsub+0x6da>
 800277e:	4448      	add	r0, r9
 8002780:	185b      	adds	r3, r3, r1
 8002782:	4548      	cmp	r0, r9
 8002784:	4189      	sbcs	r1, r1
 8002786:	4249      	negs	r1, r1
 8002788:	185b      	adds	r3, r3, r1
 800278a:	07dc      	lsls	r4, r3, #31
 800278c:	0840      	lsrs	r0, r0, #1
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	4698      	mov	r8, r3
 8002792:	0016      	movs	r6, r2
 8002794:	4304      	orrs	r4, r0
 8002796:	e6cc      	b.n	8002532 <__aeabi_dsub+0x2e2>
 8002798:	2a00      	cmp	r2, #0
 800279a:	d000      	beq.n	800279e <__aeabi_dsub+0x54e>
 800279c:	e082      	b.n	80028a4 <__aeabi_dsub+0x654>
 800279e:	000a      	movs	r2, r1
 80027a0:	4302      	orrs	r2, r0
 80027a2:	d140      	bne.n	8002826 <__aeabi_dsub+0x5d6>
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	2500      	movs	r5, #0
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	e713      	b.n	80025d4 <__aeabi_dsub+0x384>
 80027ac:	074b      	lsls	r3, r1, #29
 80027ae:	08c2      	lsrs	r2, r0, #3
 80027b0:	431a      	orrs	r2, r3
 80027b2:	465d      	mov	r5, fp
 80027b4:	08cb      	lsrs	r3, r1, #3
 80027b6:	e6c5      	b.n	8002544 <__aeabi_dsub+0x2f4>
 80027b8:	464a      	mov	r2, r9
 80027ba:	1a84      	subs	r4, r0, r2
 80027bc:	42a0      	cmp	r0, r4
 80027be:	4192      	sbcs	r2, r2
 80027c0:	1acb      	subs	r3, r1, r3
 80027c2:	4252      	negs	r2, r2
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	4698      	mov	r8, r3
 80027c8:	465d      	mov	r5, fp
 80027ca:	e59e      	b.n	800230a <__aeabi_dsub+0xba>
 80027cc:	464a      	mov	r2, r9
 80027ce:	0759      	lsls	r1, r3, #29
 80027d0:	08d2      	lsrs	r2, r2, #3
 80027d2:	430a      	orrs	r2, r1
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	e6f9      	b.n	80025cc <__aeabi_dsub+0x37c>
 80027d8:	464a      	mov	r2, r9
 80027da:	1a14      	subs	r4, r2, r0
 80027dc:	45a1      	cmp	r9, r4
 80027de:	4192      	sbcs	r2, r2
 80027e0:	1a5b      	subs	r3, r3, r1
 80027e2:	4252      	negs	r2, r2
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	4698      	mov	r8, r3
 80027e8:	2601      	movs	r6, #1
 80027ea:	e586      	b.n	80022fa <__aeabi_dsub+0xaa>
 80027ec:	464a      	mov	r2, r9
 80027ee:	0759      	lsls	r1, r3, #29
 80027f0:	08d2      	lsrs	r2, r2, #3
 80027f2:	430a      	orrs	r2, r1
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	e6a5      	b.n	8002544 <__aeabi_dsub+0x2f4>
 80027f8:	464c      	mov	r4, r9
 80027fa:	4323      	orrs	r3, r4
 80027fc:	001c      	movs	r4, r3
 80027fe:	1e63      	subs	r3, r4, #1
 8002800:	419c      	sbcs	r4, r3
 8002802:	e65b      	b.n	80024bc <__aeabi_dsub+0x26c>
 8002804:	4665      	mov	r5, ip
 8002806:	001e      	movs	r6, r3
 8002808:	3d20      	subs	r5, #32
 800280a:	40ee      	lsrs	r6, r5
 800280c:	2c20      	cmp	r4, #32
 800280e:	d005      	beq.n	800281c <__aeabi_dsub+0x5cc>
 8002810:	2540      	movs	r5, #64	; 0x40
 8002812:	1b2d      	subs	r5, r5, r4
 8002814:	40ab      	lsls	r3, r5
 8002816:	464c      	mov	r4, r9
 8002818:	431c      	orrs	r4, r3
 800281a:	46a2      	mov	sl, r4
 800281c:	4654      	mov	r4, sl
 800281e:	1e63      	subs	r3, r4, #1
 8002820:	419c      	sbcs	r4, r3
 8002822:	4334      	orrs	r4, r6
 8002824:	e77d      	b.n	8002722 <__aeabi_dsub+0x4d2>
 8002826:	074b      	lsls	r3, r1, #29
 8002828:	08c2      	lsrs	r2, r0, #3
 800282a:	431a      	orrs	r2, r3
 800282c:	465d      	mov	r5, fp
 800282e:	08cb      	lsrs	r3, r1, #3
 8002830:	e6cc      	b.n	80025cc <__aeabi_dsub+0x37c>
 8002832:	000a      	movs	r2, r1
 8002834:	4302      	orrs	r2, r0
 8002836:	d100      	bne.n	800283a <__aeabi_dsub+0x5ea>
 8002838:	e736      	b.n	80026a8 <__aeabi_dsub+0x458>
 800283a:	074b      	lsls	r3, r1, #29
 800283c:	08c2      	lsrs	r2, r0, #3
 800283e:	431a      	orrs	r2, r3
 8002840:	465d      	mov	r5, fp
 8002842:	08cb      	lsrs	r3, r1, #3
 8002844:	e681      	b.n	800254a <__aeabi_dsub+0x2fa>
 8002846:	464a      	mov	r2, r9
 8002848:	1a84      	subs	r4, r0, r2
 800284a:	42a0      	cmp	r0, r4
 800284c:	4192      	sbcs	r2, r2
 800284e:	1acb      	subs	r3, r1, r3
 8002850:	4252      	negs	r2, r2
 8002852:	1a9b      	subs	r3, r3, r2
 8002854:	4698      	mov	r8, r3
 8002856:	465d      	mov	r5, fp
 8002858:	2601      	movs	r6, #1
 800285a:	e54e      	b.n	80022fa <__aeabi_dsub+0xaa>
 800285c:	074b      	lsls	r3, r1, #29
 800285e:	08c2      	lsrs	r2, r0, #3
 8002860:	431a      	orrs	r2, r3
 8002862:	08cb      	lsrs	r3, r1, #3
 8002864:	e6b2      	b.n	80025cc <__aeabi_dsub+0x37c>
 8002866:	464a      	mov	r2, r9
 8002868:	1a14      	subs	r4, r2, r0
 800286a:	45a1      	cmp	r9, r4
 800286c:	4192      	sbcs	r2, r2
 800286e:	1a5f      	subs	r7, r3, r1
 8002870:	4252      	negs	r2, r2
 8002872:	1aba      	subs	r2, r7, r2
 8002874:	4690      	mov	r8, r2
 8002876:	0212      	lsls	r2, r2, #8
 8002878:	d56b      	bpl.n	8002952 <__aeabi_dsub+0x702>
 800287a:	464a      	mov	r2, r9
 800287c:	1a84      	subs	r4, r0, r2
 800287e:	42a0      	cmp	r0, r4
 8002880:	4192      	sbcs	r2, r2
 8002882:	1acb      	subs	r3, r1, r3
 8002884:	4252      	negs	r2, r2
 8002886:	1a9b      	subs	r3, r3, r2
 8002888:	4698      	mov	r8, r3
 800288a:	465d      	mov	r5, fp
 800288c:	e564      	b.n	8002358 <__aeabi_dsub+0x108>
 800288e:	074b      	lsls	r3, r1, #29
 8002890:	08c2      	lsrs	r2, r0, #3
 8002892:	431a      	orrs	r2, r3
 8002894:	465d      	mov	r5, fp
 8002896:	08cb      	lsrs	r3, r1, #3
 8002898:	e698      	b.n	80025cc <__aeabi_dsub+0x37c>
 800289a:	074b      	lsls	r3, r1, #29
 800289c:	08c2      	lsrs	r2, r0, #3
 800289e:	431a      	orrs	r2, r3
 80028a0:	08cb      	lsrs	r3, r1, #3
 80028a2:	e64f      	b.n	8002544 <__aeabi_dsub+0x2f4>
 80028a4:	000a      	movs	r2, r1
 80028a6:	4302      	orrs	r2, r0
 80028a8:	d090      	beq.n	80027cc <__aeabi_dsub+0x57c>
 80028aa:	464a      	mov	r2, r9
 80028ac:	075c      	lsls	r4, r3, #29
 80028ae:	08d2      	lsrs	r2, r2, #3
 80028b0:	4314      	orrs	r4, r2
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	0312      	lsls	r2, r2, #12
 80028b8:	4213      	tst	r3, r2
 80028ba:	d008      	beq.n	80028ce <__aeabi_dsub+0x67e>
 80028bc:	08ce      	lsrs	r6, r1, #3
 80028be:	4216      	tst	r6, r2
 80028c0:	d105      	bne.n	80028ce <__aeabi_dsub+0x67e>
 80028c2:	08c0      	lsrs	r0, r0, #3
 80028c4:	0749      	lsls	r1, r1, #29
 80028c6:	4308      	orrs	r0, r1
 80028c8:	0004      	movs	r4, r0
 80028ca:	465d      	mov	r5, fp
 80028cc:	0033      	movs	r3, r6
 80028ce:	0f61      	lsrs	r1, r4, #29
 80028d0:	00e2      	lsls	r2, r4, #3
 80028d2:	0749      	lsls	r1, r1, #29
 80028d4:	08d2      	lsrs	r2, r2, #3
 80028d6:	430a      	orrs	r2, r1
 80028d8:	e678      	b.n	80025cc <__aeabi_dsub+0x37c>
 80028da:	074b      	lsls	r3, r1, #29
 80028dc:	08c2      	lsrs	r2, r0, #3
 80028de:	431a      	orrs	r2, r3
 80028e0:	08cb      	lsrs	r3, r1, #3
 80028e2:	e632      	b.n	800254a <__aeabi_dsub+0x2fa>
 80028e4:	4448      	add	r0, r9
 80028e6:	185b      	adds	r3, r3, r1
 80028e8:	4548      	cmp	r0, r9
 80028ea:	4192      	sbcs	r2, r2
 80028ec:	4698      	mov	r8, r3
 80028ee:	4252      	negs	r2, r2
 80028f0:	4490      	add	r8, r2
 80028f2:	4643      	mov	r3, r8
 80028f4:	0004      	movs	r4, r0
 80028f6:	021b      	lsls	r3, r3, #8
 80028f8:	d400      	bmi.n	80028fc <__aeabi_dsub+0x6ac>
 80028fa:	e61a      	b.n	8002532 <__aeabi_dsub+0x2e2>
 80028fc:	4642      	mov	r2, r8
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <__aeabi_dsub+0x6e8>)
 8002900:	2601      	movs	r6, #1
 8002902:	401a      	ands	r2, r3
 8002904:	4690      	mov	r8, r2
 8002906:	e614      	b.n	8002532 <__aeabi_dsub+0x2e2>
 8002908:	4666      	mov	r6, ip
 800290a:	001f      	movs	r7, r3
 800290c:	3e20      	subs	r6, #32
 800290e:	40f7      	lsrs	r7, r6
 8002910:	2c20      	cmp	r4, #32
 8002912:	d005      	beq.n	8002920 <__aeabi_dsub+0x6d0>
 8002914:	2640      	movs	r6, #64	; 0x40
 8002916:	1b36      	subs	r6, r6, r4
 8002918:	40b3      	lsls	r3, r6
 800291a:	464c      	mov	r4, r9
 800291c:	431c      	orrs	r4, r3
 800291e:	46a2      	mov	sl, r4
 8002920:	4654      	mov	r4, sl
 8002922:	1e63      	subs	r3, r4, #1
 8002924:	419c      	sbcs	r4, r3
 8002926:	433c      	orrs	r4, r7
 8002928:	e5c8      	b.n	80024bc <__aeabi_dsub+0x26c>
 800292a:	0011      	movs	r1, r2
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	e532      	b.n	8002398 <__aeabi_dsub+0x148>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000007ff 	.word	0x000007ff
 8002938:	ff7fffff 	.word	0xff7fffff
 800293c:	000007fe 	.word	0x000007fe
 8002940:	464a      	mov	r2, r9
 8002942:	1814      	adds	r4, r2, r0
 8002944:	4284      	cmp	r4, r0
 8002946:	4192      	sbcs	r2, r2
 8002948:	185b      	adds	r3, r3, r1
 800294a:	4698      	mov	r8, r3
 800294c:	4252      	negs	r2, r2
 800294e:	4490      	add	r8, r2
 8002950:	e5e9      	b.n	8002526 <__aeabi_dsub+0x2d6>
 8002952:	4642      	mov	r2, r8
 8002954:	4322      	orrs	r2, r4
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x70a>
 8002958:	e6a6      	b.n	80026a8 <__aeabi_dsub+0x458>
 800295a:	e5ea      	b.n	8002532 <__aeabi_dsub+0x2e2>
 800295c:	074b      	lsls	r3, r1, #29
 800295e:	08c2      	lsrs	r2, r0, #3
 8002960:	431a      	orrs	r2, r3
 8002962:	08cb      	lsrs	r3, r1, #3
 8002964:	e632      	b.n	80025cc <__aeabi_dsub+0x37c>
 8002966:	2200      	movs	r2, #0
 8002968:	4901      	ldr	r1, [pc, #4]	; (8002970 <__aeabi_dsub+0x720>)
 800296a:	0013      	movs	r3, r2
 800296c:	e514      	b.n	8002398 <__aeabi_dsub+0x148>
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	000007ff 	.word	0x000007ff

08002974 <__aeabi_dcmpun>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	0005      	movs	r5, r0
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <__aeabi_dcmpun+0x38>)
 800297a:	030c      	lsls	r4, r1, #12
 800297c:	0016      	movs	r6, r2
 800297e:	0049      	lsls	r1, r1, #1
 8002980:	031a      	lsls	r2, r3, #12
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	0b24      	lsrs	r4, r4, #12
 8002986:	0d49      	lsrs	r1, r1, #21
 8002988:	0b12      	lsrs	r2, r2, #12
 800298a:	0d5b      	lsrs	r3, r3, #21
 800298c:	4281      	cmp	r1, r0
 800298e:	d008      	beq.n	80029a2 <__aeabi_dcmpun+0x2e>
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <__aeabi_dcmpun+0x38>)
 8002992:	2000      	movs	r0, #0
 8002994:	428b      	cmp	r3, r1
 8002996:	d103      	bne.n	80029a0 <__aeabi_dcmpun+0x2c>
 8002998:	4332      	orrs	r2, r6
 800299a:	0010      	movs	r0, r2
 800299c:	1e42      	subs	r2, r0, #1
 800299e:	4190      	sbcs	r0, r2
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
 80029a2:	2001      	movs	r0, #1
 80029a4:	432c      	orrs	r4, r5
 80029a6:	d1fb      	bne.n	80029a0 <__aeabi_dcmpun+0x2c>
 80029a8:	e7f2      	b.n	8002990 <__aeabi_dcmpun+0x1c>
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	000007ff 	.word	0x000007ff

080029b0 <__aeabi_d2iz>:
 80029b0:	000a      	movs	r2, r1
 80029b2:	b530      	push	{r4, r5, lr}
 80029b4:	4c13      	ldr	r4, [pc, #76]	; (8002a04 <__aeabi_d2iz+0x54>)
 80029b6:	0053      	lsls	r3, r2, #1
 80029b8:	0309      	lsls	r1, r1, #12
 80029ba:	0005      	movs	r5, r0
 80029bc:	0b09      	lsrs	r1, r1, #12
 80029be:	2000      	movs	r0, #0
 80029c0:	0d5b      	lsrs	r3, r3, #21
 80029c2:	0fd2      	lsrs	r2, r2, #31
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	dd04      	ble.n	80029d2 <__aeabi_d2iz+0x22>
 80029c8:	480f      	ldr	r0, [pc, #60]	; (8002a08 <__aeabi_d2iz+0x58>)
 80029ca:	4283      	cmp	r3, r0
 80029cc:	dd02      	ble.n	80029d4 <__aeabi_d2iz+0x24>
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <__aeabi_d2iz+0x5c>)
 80029d0:	18d0      	adds	r0, r2, r3
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	2080      	movs	r0, #128	; 0x80
 80029d6:	0340      	lsls	r0, r0, #13
 80029d8:	4301      	orrs	r1, r0
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <__aeabi_d2iz+0x60>)
 80029dc:	1ac0      	subs	r0, r0, r3
 80029de:	281f      	cmp	r0, #31
 80029e0:	dd08      	ble.n	80029f4 <__aeabi_d2iz+0x44>
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <__aeabi_d2iz+0x64>)
 80029e4:	1ac3      	subs	r3, r0, r3
 80029e6:	40d9      	lsrs	r1, r3
 80029e8:	000b      	movs	r3, r1
 80029ea:	4258      	negs	r0, r3
 80029ec:	2a00      	cmp	r2, #0
 80029ee:	d1f0      	bne.n	80029d2 <__aeabi_d2iz+0x22>
 80029f0:	0018      	movs	r0, r3
 80029f2:	e7ee      	b.n	80029d2 <__aeabi_d2iz+0x22>
 80029f4:	4c08      	ldr	r4, [pc, #32]	; (8002a18 <__aeabi_d2iz+0x68>)
 80029f6:	40c5      	lsrs	r5, r0
 80029f8:	46a4      	mov	ip, r4
 80029fa:	4463      	add	r3, ip
 80029fc:	4099      	lsls	r1, r3
 80029fe:	000b      	movs	r3, r1
 8002a00:	432b      	orrs	r3, r5
 8002a02:	e7f2      	b.n	80029ea <__aeabi_d2iz+0x3a>
 8002a04:	000003fe 	.word	0x000003fe
 8002a08:	0000041d 	.word	0x0000041d
 8002a0c:	7fffffff 	.word	0x7fffffff
 8002a10:	00000433 	.word	0x00000433
 8002a14:	00000413 	.word	0x00000413
 8002a18:	fffffbed 	.word	0xfffffbed

08002a1c <__aeabi_i2d>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d016      	beq.n	8002a50 <__aeabi_i2d+0x34>
 8002a22:	17c3      	asrs	r3, r0, #31
 8002a24:	18c5      	adds	r5, r0, r3
 8002a26:	405d      	eors	r5, r3
 8002a28:	0fc4      	lsrs	r4, r0, #31
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	f000 f91c 	bl	8002c68 <__clzsi2>
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <__aeabi_i2d+0x5c>)
 8002a32:	1a12      	subs	r2, r2, r0
 8002a34:	280a      	cmp	r0, #10
 8002a36:	dc16      	bgt.n	8002a66 <__aeabi_i2d+0x4a>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	002e      	movs	r6, r5
 8002a3c:	3315      	adds	r3, #21
 8002a3e:	409e      	lsls	r6, r3
 8002a40:	230b      	movs	r3, #11
 8002a42:	1a18      	subs	r0, r3, r0
 8002a44:	40c5      	lsrs	r5, r0
 8002a46:	0553      	lsls	r3, r2, #21
 8002a48:	032d      	lsls	r5, r5, #12
 8002a4a:	0b2d      	lsrs	r5, r5, #12
 8002a4c:	0d5b      	lsrs	r3, r3, #21
 8002a4e:	e003      	b.n	8002a58 <__aeabi_i2d+0x3c>
 8002a50:	2400      	movs	r4, #0
 8002a52:	2300      	movs	r3, #0
 8002a54:	2500      	movs	r5, #0
 8002a56:	2600      	movs	r6, #0
 8002a58:	051b      	lsls	r3, r3, #20
 8002a5a:	432b      	orrs	r3, r5
 8002a5c:	07e4      	lsls	r4, r4, #31
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	0030      	movs	r0, r6
 8002a62:	0019      	movs	r1, r3
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
 8002a66:	380b      	subs	r0, #11
 8002a68:	4085      	lsls	r5, r0
 8002a6a:	0553      	lsls	r3, r2, #21
 8002a6c:	032d      	lsls	r5, r5, #12
 8002a6e:	2600      	movs	r6, #0
 8002a70:	0b2d      	lsrs	r5, r5, #12
 8002a72:	0d5b      	lsrs	r3, r3, #21
 8002a74:	e7f0      	b.n	8002a58 <__aeabi_i2d+0x3c>
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	0000041e 	.word	0x0000041e

08002a7c <__aeabi_ui2d>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	1e04      	subs	r4, r0, #0
 8002a80:	d010      	beq.n	8002aa4 <__aeabi_ui2d+0x28>
 8002a82:	f000 f8f1 	bl	8002c68 <__clzsi2>
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <__aeabi_ui2d+0x48>)
 8002a88:	1a1b      	subs	r3, r3, r0
 8002a8a:	280a      	cmp	r0, #10
 8002a8c:	dc11      	bgt.n	8002ab2 <__aeabi_ui2d+0x36>
 8002a8e:	220b      	movs	r2, #11
 8002a90:	0021      	movs	r1, r4
 8002a92:	1a12      	subs	r2, r2, r0
 8002a94:	40d1      	lsrs	r1, r2
 8002a96:	3015      	adds	r0, #21
 8002a98:	030a      	lsls	r2, r1, #12
 8002a9a:	055b      	lsls	r3, r3, #21
 8002a9c:	4084      	lsls	r4, r0
 8002a9e:	0b12      	lsrs	r2, r2, #12
 8002aa0:	0d5b      	lsrs	r3, r3, #21
 8002aa2:	e001      	b.n	8002aa8 <__aeabi_ui2d+0x2c>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	0020      	movs	r0, r4
 8002aae:	0019      	movs	r1, r3
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	0022      	movs	r2, r4
 8002ab4:	380b      	subs	r0, #11
 8002ab6:	4082      	lsls	r2, r0
 8002ab8:	055b      	lsls	r3, r3, #21
 8002aba:	0312      	lsls	r2, r2, #12
 8002abc:	2400      	movs	r4, #0
 8002abe:	0b12      	lsrs	r2, r2, #12
 8002ac0:	0d5b      	lsrs	r3, r3, #21
 8002ac2:	e7f1      	b.n	8002aa8 <__aeabi_ui2d+0x2c>
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_f2d>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	0043      	lsls	r3, r0, #1
 8002acc:	0246      	lsls	r6, r0, #9
 8002ace:	0fc4      	lsrs	r4, r0, #31
 8002ad0:	20fe      	movs	r0, #254	; 0xfe
 8002ad2:	0e1b      	lsrs	r3, r3, #24
 8002ad4:	1c59      	adds	r1, r3, #1
 8002ad6:	0a75      	lsrs	r5, r6, #9
 8002ad8:	4208      	tst	r0, r1
 8002ada:	d00c      	beq.n	8002af6 <__aeabi_f2d+0x2e>
 8002adc:	22e0      	movs	r2, #224	; 0xe0
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	076d      	lsls	r5, r5, #29
 8002ae4:	0b36      	lsrs	r6, r6, #12
 8002ae6:	4463      	add	r3, ip
 8002ae8:	051b      	lsls	r3, r3, #20
 8002aea:	4333      	orrs	r3, r6
 8002aec:	07e4      	lsls	r4, r4, #31
 8002aee:	4323      	orrs	r3, r4
 8002af0:	0028      	movs	r0, r5
 8002af2:	0019      	movs	r1, r3
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d114      	bne.n	8002b24 <__aeabi_f2d+0x5c>
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	d01b      	beq.n	8002b36 <__aeabi_f2d+0x6e>
 8002afe:	0028      	movs	r0, r5
 8002b00:	f000 f8b2 	bl	8002c68 <__clzsi2>
 8002b04:	280a      	cmp	r0, #10
 8002b06:	dc1c      	bgt.n	8002b42 <__aeabi_f2d+0x7a>
 8002b08:	230b      	movs	r3, #11
 8002b0a:	002a      	movs	r2, r5
 8002b0c:	1a1b      	subs	r3, r3, r0
 8002b0e:	40da      	lsrs	r2, r3
 8002b10:	0003      	movs	r3, r0
 8002b12:	3315      	adds	r3, #21
 8002b14:	409d      	lsls	r5, r3
 8002b16:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <__aeabi_f2d+0x88>)
 8002b18:	0312      	lsls	r2, r2, #12
 8002b1a:	1a1b      	subs	r3, r3, r0
 8002b1c:	055b      	lsls	r3, r3, #21
 8002b1e:	0b16      	lsrs	r6, r2, #12
 8002b20:	0d5b      	lsrs	r3, r3, #21
 8002b22:	e7e1      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	d009      	beq.n	8002b3c <__aeabi_f2d+0x74>
 8002b28:	0b32      	lsrs	r2, r6, #12
 8002b2a:	2680      	movs	r6, #128	; 0x80
 8002b2c:	0336      	lsls	r6, r6, #12
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <__aeabi_f2d+0x8c>)
 8002b30:	076d      	lsls	r5, r5, #29
 8002b32:	4316      	orrs	r6, r2
 8002b34:	e7d8      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2600      	movs	r6, #0
 8002b3a:	e7d5      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <__aeabi_f2d+0x8c>)
 8002b40:	e7d2      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b42:	0003      	movs	r3, r0
 8002b44:	002a      	movs	r2, r5
 8002b46:	3b0b      	subs	r3, #11
 8002b48:	409a      	lsls	r2, r3
 8002b4a:	2500      	movs	r5, #0
 8002b4c:	e7e3      	b.n	8002b16 <__aeabi_f2d+0x4e>
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	00000389 	.word	0x00000389
 8002b54:	000007ff 	.word	0x000007ff

08002b58 <__aeabi_d2f>:
 8002b58:	0002      	movs	r2, r0
 8002b5a:	004b      	lsls	r3, r1, #1
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	0308      	lsls	r0, r1, #12
 8002b60:	0d5b      	lsrs	r3, r3, #21
 8002b62:	4e3d      	ldr	r6, [pc, #244]	; (8002c58 <__aeabi_d2f+0x100>)
 8002b64:	0fcc      	lsrs	r4, r1, #31
 8002b66:	0a40      	lsrs	r0, r0, #9
 8002b68:	0f51      	lsrs	r1, r2, #29
 8002b6a:	1c5f      	adds	r7, r3, #1
 8002b6c:	4308      	orrs	r0, r1
 8002b6e:	00d5      	lsls	r5, r2, #3
 8002b70:	4237      	tst	r7, r6
 8002b72:	d00a      	beq.n	8002b8a <__aeabi_d2f+0x32>
 8002b74:	4939      	ldr	r1, [pc, #228]	; (8002c5c <__aeabi_d2f+0x104>)
 8002b76:	185e      	adds	r6, r3, r1
 8002b78:	2efe      	cmp	r6, #254	; 0xfe
 8002b7a:	dd16      	ble.n	8002baa <__aeabi_d2f+0x52>
 8002b7c:	23ff      	movs	r3, #255	; 0xff
 8002b7e:	2100      	movs	r1, #0
 8002b80:	05db      	lsls	r3, r3, #23
 8002b82:	430b      	orrs	r3, r1
 8002b84:	07e0      	lsls	r0, r4, #31
 8002b86:	4318      	orrs	r0, r3
 8002b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <__aeabi_d2f+0x44>
 8002b8e:	4328      	orrs	r0, r5
 8002b90:	d027      	beq.n	8002be2 <__aeabi_d2f+0x8a>
 8002b92:	2105      	movs	r1, #5
 8002b94:	0189      	lsls	r1, r1, #6
 8002b96:	0a49      	lsrs	r1, r1, #9
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e7f1      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002b9c:	4305      	orrs	r5, r0
 8002b9e:	d0ed      	beq.n	8002b7c <__aeabi_d2f+0x24>
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	03c9      	lsls	r1, r1, #15
 8002ba4:	23ff      	movs	r3, #255	; 0xff
 8002ba6:	4301      	orrs	r1, r0
 8002ba8:	e7ea      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	dd1c      	ble.n	8002be8 <__aeabi_d2f+0x90>
 8002bae:	0192      	lsls	r2, r2, #6
 8002bb0:	0011      	movs	r1, r2
 8002bb2:	1e4a      	subs	r2, r1, #1
 8002bb4:	4191      	sbcs	r1, r2
 8002bb6:	00c0      	lsls	r0, r0, #3
 8002bb8:	0f6d      	lsrs	r5, r5, #29
 8002bba:	4301      	orrs	r1, r0
 8002bbc:	4329      	orrs	r1, r5
 8002bbe:	074b      	lsls	r3, r1, #29
 8002bc0:	d048      	beq.n	8002c54 <__aeabi_d2f+0xfc>
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	400b      	ands	r3, r1
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d000      	beq.n	8002bcc <__aeabi_d2f+0x74>
 8002bca:	3104      	adds	r1, #4
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	04db      	lsls	r3, r3, #19
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	d03f      	beq.n	8002c54 <__aeabi_d2f+0xfc>
 8002bd4:	1c72      	adds	r2, r6, #1
 8002bd6:	2efe      	cmp	r6, #254	; 0xfe
 8002bd8:	d0d0      	beq.n	8002b7c <__aeabi_d2f+0x24>
 8002bda:	0189      	lsls	r1, r1, #6
 8002bdc:	0a49      	lsrs	r1, r1, #9
 8002bde:	b2d3      	uxtb	r3, r2
 8002be0:	e7ce      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	e7cb      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002be8:	0032      	movs	r2, r6
 8002bea:	3217      	adds	r2, #23
 8002bec:	db22      	blt.n	8002c34 <__aeabi_d2f+0xdc>
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	221e      	movs	r2, #30
 8002bf2:	0409      	lsls	r1, r1, #16
 8002bf4:	4308      	orrs	r0, r1
 8002bf6:	1b92      	subs	r2, r2, r6
 8002bf8:	2a1f      	cmp	r2, #31
 8002bfa:	dd1d      	ble.n	8002c38 <__aeabi_d2f+0xe0>
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4249      	negs	r1, r1
 8002c00:	1b8e      	subs	r6, r1, r6
 8002c02:	0001      	movs	r1, r0
 8002c04:	40f1      	lsrs	r1, r6
 8002c06:	000e      	movs	r6, r1
 8002c08:	2a20      	cmp	r2, #32
 8002c0a:	d004      	beq.n	8002c16 <__aeabi_d2f+0xbe>
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <__aeabi_d2f+0x108>)
 8002c0e:	4694      	mov	ip, r2
 8002c10:	4463      	add	r3, ip
 8002c12:	4098      	lsls	r0, r3
 8002c14:	4305      	orrs	r5, r0
 8002c16:	0029      	movs	r1, r5
 8002c18:	1e4d      	subs	r5, r1, #1
 8002c1a:	41a9      	sbcs	r1, r5
 8002c1c:	4331      	orrs	r1, r6
 8002c1e:	2600      	movs	r6, #0
 8002c20:	074b      	lsls	r3, r1, #29
 8002c22:	d1ce      	bne.n	8002bc2 <__aeabi_d2f+0x6a>
 8002c24:	2080      	movs	r0, #128	; 0x80
 8002c26:	000b      	movs	r3, r1
 8002c28:	04c0      	lsls	r0, r0, #19
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4003      	ands	r3, r0
 8002c2e:	4201      	tst	r1, r0
 8002c30:	d1d3      	bne.n	8002bda <__aeabi_d2f+0x82>
 8002c32:	e7af      	b.n	8002b94 <__aeabi_d2f+0x3c>
 8002c34:	2300      	movs	r3, #0
 8002c36:	e7ac      	b.n	8002b92 <__aeabi_d2f+0x3a>
 8002c38:	490a      	ldr	r1, [pc, #40]	; (8002c64 <__aeabi_d2f+0x10c>)
 8002c3a:	468c      	mov	ip, r1
 8002c3c:	0029      	movs	r1, r5
 8002c3e:	4463      	add	r3, ip
 8002c40:	40d1      	lsrs	r1, r2
 8002c42:	409d      	lsls	r5, r3
 8002c44:	000a      	movs	r2, r1
 8002c46:	0029      	movs	r1, r5
 8002c48:	4098      	lsls	r0, r3
 8002c4a:	1e4d      	subs	r5, r1, #1
 8002c4c:	41a9      	sbcs	r1, r5
 8002c4e:	4301      	orrs	r1, r0
 8002c50:	4311      	orrs	r1, r2
 8002c52:	e7e4      	b.n	8002c1e <__aeabi_d2f+0xc6>
 8002c54:	0033      	movs	r3, r6
 8002c56:	e79d      	b.n	8002b94 <__aeabi_d2f+0x3c>
 8002c58:	000007fe 	.word	0x000007fe
 8002c5c:	fffffc80 	.word	0xfffffc80
 8002c60:	fffffca2 	.word	0xfffffca2
 8002c64:	fffffc82 	.word	0xfffffc82

08002c68 <__clzsi2>:
 8002c68:	211c      	movs	r1, #28
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	4298      	cmp	r0, r3
 8002c70:	d301      	bcc.n	8002c76 <__clzsi2+0xe>
 8002c72:	0c00      	lsrs	r0, r0, #16
 8002c74:	3910      	subs	r1, #16
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	d301      	bcc.n	8002c80 <__clzsi2+0x18>
 8002c7c:	0a00      	lsrs	r0, r0, #8
 8002c7e:	3908      	subs	r1, #8
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	4298      	cmp	r0, r3
 8002c84:	d301      	bcc.n	8002c8a <__clzsi2+0x22>
 8002c86:	0900      	lsrs	r0, r0, #4
 8002c88:	3904      	subs	r1, #4
 8002c8a:	a202      	add	r2, pc, #8	; (adr r2, 8002c94 <__clzsi2+0x2c>)
 8002c8c:	5c10      	ldrb	r0, [r2, r0]
 8002c8e:	1840      	adds	r0, r0, r1
 8002c90:	4770      	bx	lr
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	02020304 	.word	0x02020304
 8002c98:	01010101 	.word	0x01010101
	...

08002ca4 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	0007      	movs	r7, r0
 8002caa:	000d      	movs	r5, r1
 8002cac:	0016      	movs	r6, r2
 8002cae:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002cb0:	f00b f80a 	bl	800dcc8 <GetUart>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d020      	beq.n	8002cfa <Send_BOS_Message+0x56>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002cb8:	00bb      	lsls	r3, r7, #2
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <Send_BOS_Message+0x68>)
 8002cbc:	5898      	ldr	r0, [r3, r2]
 8002cbe:	0021      	movs	r1, r4
 8002cc0:	f00b f992 	bl	800dfe8 <osSemaphoreWait>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d014      	beq.n	8002cf2 <Send_BOS_Message+0x4e>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9301      	str	r3, [sp, #4]
 8002ccc:	e017      	b.n	8002cfe <Send_BOS_Message+0x5a>
			for(uint8_t i=0;i<n;i++)
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002cce:	0038      	movs	r0, r7
 8002cd0:	f00a fffa 	bl	800dcc8 <GetUart>
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	0029      	movs	r1, r5
 8002cd8:	f00f fc77 	bl	80125ca <HAL_UART_Transmit_IT>
 8002cdc:	9001      	str	r0, [sp, #4]
				buffer++;
 8002cde:	3501      	adds	r5, #1
				//Delay_us(500);
				Delay_ms(2);
 8002ce0:	2002      	movs	r0, #2
 8002ce2:	f00d f8eb 	bl	800febc <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002ce6:	3401      	adds	r4, #1
 8002ce8:	b2e4      	uxtb	r4, r4
 8002cea:	b2a3      	uxth	r3, r4
 8002cec:	42b3      	cmp	r3, r6
 8002cee:	d3ee      	bcc.n	8002cce <Send_BOS_Message+0x2a>
 8002cf0:	e005      	b.n	8002cfe <Send_BOS_Message+0x5a>
 8002cf2:	2400      	movs	r4, #0
	HAL_StatusTypeDef result =HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	e7f7      	b.n	8002cea <Send_BOS_Message+0x46>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	9301      	str	r3, [sp, #4]
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002cfe:	200a      	movs	r0, #10
 8002d00:	f00d f8dc 	bl	800febc <HAL_Delay>
	return result;
}
 8002d04:	9801      	ldr	r0, [sp, #4]
 8002d06:	b003      	add	sp, #12
 8002d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	20005818 	.word	0x20005818

08002d10 <LoadEEportsDir>:
	return result;
}

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002d10:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002d12:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002d14:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002d16:	e001      	b.n	8002d1c <LoadEEportsDir+0xc>
 8002d18:	3401      	adds	r4, #1
 8002d1a:	b2e4      	uxtb	r4, r4
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <LoadEEportsDir+0x30>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	42a3      	cmp	r3, r4
 8002d22:	d30a      	bcc.n	8002d3a <LoadEEportsDir+0x2a>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002d24:	1e61      	subs	r1, r4, #1
 8002d26:	0049      	lsls	r1, r1, #1
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <LoadEEportsDir+0x34>)
 8002d2a:	18c9      	adds	r1, r1, r3
 8002d2c:	1c60      	adds	r0, r4, #1
 8002d2e:	f008 fe87 	bl	800ba40 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002d32:	2c19      	cmp	r4, #25
 8002d34:	d9f0      	bls.n	8002d18 <LoadEEportsDir+0x8>
			result =BOS_ERR_EEPROM;
 8002d36:	250a      	movs	r5, #10
 8002d38:	e7ee      	b.n	8002d18 <LoadEEportsDir+0x8>
	}
	
	return result;
}
 8002d3a:	0028      	movs	r0, r5
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	20000030 	.word	0x20000030
 8002d44:	20005c48 	.word	0x20005c48

08002d48 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	2200      	movs	r2, #0
 8002d50:	80da      	strh	r2, [r3, #6]
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002d52:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8002d54:	2500      	movs	r5, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002d56:	e008      	b.n	8002d6a <LoadEEalias+0x22>
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002d58:	00b3      	lsls	r3, r6, #2
 8002d5a:	199b      	adds	r3, r3, r6
 8002d5c:	005a      	lsls	r2, r3, #1
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <LoadEEalias+0x70>)
 8002d60:	189b      	adds	r3, r3, r2
 8002d62:	2200      	movs	r2, #0
 8002d64:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002d66:	3601      	adds	r6, #1
 8002d68:	b2f6      	uxtb	r6, r6
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <LoadEEalias+0x74>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	42b3      	cmp	r3, r6
 8002d70:	d31f      	bcc.n	8002db2 <LoadEEalias+0x6a>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002d72:	2401      	movs	r4, #1
 8002d74:	2c09      	cmp	r4, #9
 8002d76:	d8ef      	bhi.n	8002d58 <LoadEEalias+0x10>
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002d78:	0028      	movs	r0, r5
 8002d7a:	301c      	adds	r0, #28
 8002d7c:	b280      	uxth	r0, r0
 8002d7e:	466b      	mov	r3, sp
 8002d80:	1d99      	adds	r1, r3, #6
 8002d82:	f008 fe5d 	bl	800ba40 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002d86:	466b      	mov	r3, sp
 8002d88:	88d8      	ldrh	r0, [r3, #6]
 8002d8a:	799b      	ldrb	r3, [r3, #6]
 8002d8c:	469c      	mov	ip, r3
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <LoadEEalias+0x70>)
 8002d90:	00b3      	lsls	r3, r6, #2
 8002d92:	199f      	adds	r7, r3, r6
 8002d94:	0079      	lsls	r1, r7, #1
 8002d96:	1851      	adds	r1, r2, r1
 8002d98:	4667      	mov	r7, ip
 8002d9a:	550f      	strb	r7, [r1, r4]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002d9c:	1e67      	subs	r7, r4, #1
 8002d9e:	0a01      	lsrs	r1, r0, #8
 8002da0:	199b      	adds	r3, r3, r6
 8002da2:	0058      	lsls	r0, r3, #1
 8002da4:	1812      	adds	r2, r2, r0
 8002da6:	55d1      	strb	r1, [r2, r7]
			add++;
 8002da8:	3501      	adds	r5, #1
 8002daa:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002dac:	3402      	adds	r4, #2
 8002dae:	b2e4      	uxtb	r4, r4
 8002db0:	e7e0      	b.n	8002d74 <LoadEEalias+0x2c>
	}
	
	return result;
}
 8002db2:	2000      	movs	r0, #0
 8002db4:	b003      	add	sp, #12
 8002db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db8:	20000838 	.word	0x20000838
 8002dbc:	20000030 	.word	0x20000030

08002dc0 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc2:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002dc4:	466b      	mov	r3, sp
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002dca:	2400      	movs	r4, #0
	uint16_t add =0, temp =0;
 8002dcc:	2500      	movs	r5, #0
	for(i =0; i < N; i++)			// N modules
 8002dce:	e00b      	b.n	8002de8 <LoadEEgroup+0x28>
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002dd0:	0063      	lsls	r3, r4, #1
 8002dd2:	491f      	ldr	r1, [pc, #124]	; (8002e50 <LoadEEgroup+0x90>)
 8002dd4:	18c9      	adds	r1, r1, r3
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	30cb      	adds	r0, #203	; 0xcb
 8002dda:	b280      	uxth	r0, r0
 8002ddc:	f008 fe30 	bl	800ba40 <EE_ReadVariable>
		add++;
 8002de0:	3501      	adds	r5, #1
 8002de2:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002de4:	3401      	adds	r4, #1
 8002de6:	b2e4      	uxtb	r4, r4
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <LoadEEgroup+0x94>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	42a3      	cmp	r3, r4
 8002dee:	d8ef      	bhi.n	8002dd0 <LoadEEgroup+0x10>
	}
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002df0:	2600      	movs	r6, #0
 8002df2:	e008      	b.n	8002e06 <LoadEEgroup+0x46>
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002df4:	00b3      	lsls	r3, r6, #2
 8002df6:	199b      	adds	r3, r3, r6
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <LoadEEgroup+0x98>)
 8002dfc:	189b      	adds	r3, r3, r2
 8002dfe:	2200      	movs	r2, #0
 8002e00:	725a      	strb	r2, [r3, #9]
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002e02:	3601      	adds	r6, #1
 8002e04:	b2f6      	uxtb	r6, r6
 8002e06:	2e09      	cmp	r6, #9
 8002e08:	d81f      	bhi.n	8002e4a <LoadEEgroup+0x8a>
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e0a:	2401      	movs	r4, #1
 8002e0c:	2c09      	cmp	r4, #9
 8002e0e:	d8f1      	bhi.n	8002df4 <LoadEEgroup+0x34>
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002e10:	0028      	movs	r0, r5
 8002e12:	3099      	adds	r0, #153	; 0x99
 8002e14:	b280      	uxth	r0, r0
 8002e16:	466b      	mov	r3, sp
 8002e18:	1d99      	adds	r1, r3, #6
 8002e1a:	f008 fe11 	bl	800ba40 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002e1e:	466b      	mov	r3, sp
 8002e20:	88d8      	ldrh	r0, [r3, #6]
 8002e22:	799b      	ldrb	r3, [r3, #6]
 8002e24:	469c      	mov	ip, r3
 8002e26:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <LoadEEgroup+0x98>)
 8002e28:	00b3      	lsls	r3, r6, #2
 8002e2a:	199f      	adds	r7, r3, r6
 8002e2c:	0079      	lsls	r1, r7, #1
 8002e2e:	1851      	adds	r1, r2, r1
 8002e30:	4667      	mov	r7, ip
 8002e32:	550f      	strb	r7, [r1, r4]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e34:	1e67      	subs	r7, r4, #1
 8002e36:	0a01      	lsrs	r1, r0, #8
 8002e38:	199b      	adds	r3, r3, r6
 8002e3a:	0058      	lsls	r0, r3, #1
 8002e3c:	1812      	adds	r2, r2, r0
 8002e3e:	55d1      	strb	r1, [r2, r7]
			add++;
 8002e40:	3501      	adds	r5, #1
 8002e42:	b2ad      	uxth	r5, r5
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e44:	3402      	adds	r4, #2
 8002e46:	b2e4      	uxtb	r4, r4
 8002e48:	e7e0      	b.n	8002e0c <LoadEEgroup+0x4c>
	}
	
	return result;
}
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	b003      	add	sp, #12
 8002e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e50:	200007c4 	.word	0x200007c4
 8002e54:	20000030 	.word	0x20000030
 8002e58:	20000760 	.word	0x20000760

08002e5c <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002e60:	210e      	movs	r1, #14
 8002e62:	4469      	add	r1, sp
 8002e64:	2300      	movs	r3, #0
 8002e66:	800b      	strh	r3, [r1, #0]
 8002e68:	aa03      	add	r2, sp, #12
 8002e6a:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002e6c:	20e4      	movs	r0, #228	; 0xe4
 8002e6e:	f008 fde7 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d000      	beq.n	8002e78 <LoadEEstreams+0x1c>
 8002e76:	e075      	b.n	8002f64 <LoadEEstreams+0x108>
		direction =(uint8_t )temp1;
 8002e78:	230e      	movs	r3, #14
 8002e7a:	446b      	add	r3, sp
 8002e7c:	781d      	ldrb	r5, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002e7e:	210e      	movs	r1, #14
 8002e80:	4469      	add	r1, sp
 8002e82:	20e5      	movs	r0, #229	; 0xe5
 8002e84:	f008 fddc 	bl	800ba40 <EE_ReadVariable>
 8002e88:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002e8a:	a903      	add	r1, sp, #12
 8002e8c:	20e6      	movs	r0, #230	; 0xe6
 8002e8e:	f008 fdd7 	bl	800ba40 <EE_ReadVariable>
	if(!status1 && !status2){
 8002e92:	4304      	orrs	r4, r0
 8002e94:	b2a4      	uxth	r4, r4
 8002e96:	2c00      	cmp	r4, #0
 8002e98:	d000      	beq.n	8002e9c <LoadEEstreams+0x40>
 8002e9a:	e065      	b.n	8002f68 <LoadEEstreams+0x10c>
		count =((uint32_t )temp1 << 16) + temp2;
 8002e9c:	230e      	movs	r3, #14
 8002e9e:	446b      	add	r3, sp
 8002ea0:	881e      	ldrh	r6, [r3, #0]
 8002ea2:	0436      	lsls	r6, r6, #16
 8002ea4:	ab03      	add	r3, sp, #12
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002eaa:	210e      	movs	r1, #14
 8002eac:	4469      	add	r1, sp
 8002eae:	20e7      	movs	r0, #231	; 0xe7
 8002eb0:	f008 fdc6 	bl	800ba40 <EE_ReadVariable>
 8002eb4:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002eb6:	a903      	add	r1, sp, #12
 8002eb8:	20e8      	movs	r0, #232	; 0xe8
 8002eba:	f008 fdc1 	bl	800ba40 <EE_ReadVariable>
	if(!status1 && !status2){
 8002ebe:	4304      	orrs	r4, r0
 8002ec0:	b2a4      	uxth	r4, r4
 8002ec2:	2c00      	cmp	r4, #0
 8002ec4:	d152      	bne.n	8002f6c <LoadEEstreams+0x110>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002ec6:	230e      	movs	r3, #14
 8002ec8:	446b      	add	r3, sp
 8002eca:	881c      	ldrh	r4, [r3, #0]
 8002ecc:	0424      	lsls	r4, r4, #16
 8002ece:	ab03      	add	r3, sp, #12
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002ed4:	210e      	movs	r1, #14
 8002ed6:	4469      	add	r1, sp
 8002ed8:	20e9      	movs	r0, #233	; 0xe9
 8002eda:	f008 fdb1 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d107      	bne.n	8002ef2 <LoadEEstreams+0x96>
		src1 =(uint8_t )(temp1 >> 8);
 8002ee2:	230e      	movs	r3, #14
 8002ee4:	446b      	add	r3, sp
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	0a19      	lsrs	r1, r3, #8
 8002eea:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <LoadEEstreams+0x140>)
 8002eec:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002eee:	4a2c      	ldr	r2, [pc, #176]	; (8002fa0 <LoadEEstreams+0x144>)
 8002ef0:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002ef2:	210e      	movs	r1, #14
 8002ef4:	4469      	add	r1, sp
 8002ef6:	20ea      	movs	r0, #234	; 0xea
 8002ef8:	f008 fda2 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d107      	bne.n	8002f10 <LoadEEstreams+0xb4>
		src2 =(uint8_t )(temp1 >> 8);
 8002f00:	230e      	movs	r3, #14
 8002f02:	446b      	add	r3, sp
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	0a19      	lsrs	r1, r3, #8
 8002f08:	4a26      	ldr	r2, [pc, #152]	; (8002fa4 <LoadEEstreams+0x148>)
 8002f0a:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <LoadEEstreams+0x14c>)
 8002f0e:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002f10:	210e      	movs	r1, #14
 8002f12:	4469      	add	r1, sp
 8002f14:	20eb      	movs	r0, #235	; 0xeb
 8002f16:	f008 fd93 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d107      	bne.n	8002f2e <LoadEEstreams+0xd2>
		src3 =(uint8_t )(temp1 >> 8);
 8002f1e:	230e      	movs	r3, #14
 8002f20:	446b      	add	r3, sp
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	0a19      	lsrs	r1, r3, #8
 8002f26:	4a21      	ldr	r2, [pc, #132]	; (8002fac <LoadEEstreams+0x150>)
 8002f28:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8002f2a:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <LoadEEstreams+0x154>)
 8002f2c:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <LoadEEstreams+0x140>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <LoadEEstreams+0xe2>
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <LoadEEstreams+0x144>)
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	2a00      	cmp	r2, #0
 8002f3c:	d118      	bne.n	8002f70 <LoadEEstreams+0x114>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <LoadEEstreams+0x148>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <LoadEEstreams+0xf2>
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <LoadEEstreams+0x14c>)
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d117      	bne.n	8002f7e <LoadEEstreams+0x122>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8002f4e:	4b17      	ldr	r3, [pc, #92]	; (8002fac <LoadEEstreams+0x150>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <LoadEEstreams+0x102>
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <LoadEEstreams+0x154>)
 8002f58:	7812      	ldrb	r2, [r2, #0]
 8002f5a:	2a00      	cmp	r2, #0
 8002f5c:	d116      	bne.n	8002f8c <LoadEEstreams+0x130>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8002f5e:	2000      	movs	r0, #0
 8002f60:	b004      	add	sp, #16
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t direction =0;
 8002f64:	2500      	movs	r5, #0
 8002f66:	e78a      	b.n	8002e7e <LoadEEstreams+0x22>
	uint32_t count =0, timeout =0;
 8002f68:	2600      	movs	r6, #0
 8002f6a:	e79e      	b.n	8002eaa <LoadEEstreams+0x4e>
 8002f6c:	2400      	movs	r4, #0
 8002f6e:	e7b1      	b.n	8002ed4 <LoadEEstreams+0x78>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 8002f70:	9200      	str	r2, [sp, #0]
 8002f72:	0022      	movs	r2, r4
 8002f74:	0031      	movs	r1, r6
 8002f76:	0028      	movs	r0, r5
 8002f78:	f004 fc0e 	bl	8007798 <SetupDMAStreams>
 8002f7c:	e7df      	b.n	8002f3e <LoadEEstreams+0xe2>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8002f7e:	9200      	str	r2, [sp, #0]
 8002f80:	0022      	movs	r2, r4
 8002f82:	0031      	movs	r1, r6
 8002f84:	0028      	movs	r0, r5
 8002f86:	f004 fc07 	bl	8007798 <SetupDMAStreams>
 8002f8a:	e7e0      	b.n	8002f4e <LoadEEstreams+0xf2>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8002f8c:	9200      	str	r2, [sp, #0]
 8002f8e:	0022      	movs	r2, r4
 8002f90:	0031      	movs	r1, r6
 8002f92:	0028      	movs	r0, r5
 8002f94:	f004 fc00 	bl	8007798 <SetupDMAStreams>
 8002f98:	e7e1      	b.n	8002f5e <LoadEEstreams+0x102>
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	200008da 	.word	0x200008da
 8002fa0:	2000075d 	.word	0x2000075d
 8002fa4:	200008db 	.word	0x200008db
 8002fa8:	2000075e 	.word	0x2000075e
 8002fac:	200008dc 	.word	0x200008dc
 8002fb0:	2000075f 	.word	0x2000075f

08002fb4 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8002fb8:	208a      	movs	r0, #138	; 0x8a
 8002fba:	466b      	mov	r3, sp
 8002fbc:	1d99      	adds	r1, r3, #6
 8002fbe:	0040      	lsls	r0, r0, #1
 8002fc0:	f008 fd3e 	bl	800ba40 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d000      	beq.n	8002fca <LoadEEparams+0x16>
 8002fc8:	e078      	b.n	80030bc <LoadEEparams+0x108>
		BOSMessaging.response =(uint8_t )temp1;
 8002fca:	466b      	mov	r3, sp
 8002fcc:	1d9a      	adds	r2, r3, #6
 8002fce:	88db      	ldrh	r3, [r3, #6]
 8002fd0:	7811      	ldrb	r1, [r2, #0]
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <LoadEEparams+0x178>)
 8002fd4:	7011      	strb	r1, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8002fda:	208e      	movs	r0, #142	; 0x8e
 8002fdc:	466b      	mov	r3, sp
 8002fde:	1d99      	adds	r1, r3, #6
 8002fe0:	0040      	lsls	r0, r0, #1
 8002fe2:	f008 fd2d 	bl	800ba40 <EE_ReadVariable>

	if(!status1){
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d000      	beq.n	8002fec <LoadEEparams+0x38>
 8002fea:	e06e      	b.n	80030ca <LoadEEparams+0x116>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8002fec:	466b      	mov	r3, sp
 8002fee:	88db      	ldrh	r3, [r3, #6]
 8002ff0:	0bda      	lsrs	r2, r3, #15
 8002ff2:	494e      	ldr	r1, [pc, #312]	; (800312c <LoadEEparams+0x178>)
 8002ff4:	710a      	strb	r2, [r1, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	80cb      	strh	r3, [r1, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8002ffa:	2016      	movs	r0, #22
 8002ffc:	466b      	mov	r3, sp
 8002ffe:	1d99      	adds	r1, r3, #6
 8003000:	30ff      	adds	r0, #255	; 0xff
 8003002:	f008 fd1d 	bl	800ba40 <EE_ReadVariable>
	if(!status1)
 8003006:	2800      	cmp	r0, #0
 8003008:	d000      	beq.n	800300c <LoadEEparams+0x58>
 800300a:	e065      	b.n	80030d8 <LoadEEparams+0x124>
		BOS.buttons.debounce =temp1;
 800300c:	466b      	mov	r3, sp
 800300e:	88da      	ldrh	r2, [r3, #6]
 8003010:	4b47      	ldr	r3, [pc, #284]	; (8003130 <LoadEEparams+0x17c>)
 8003012:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 8003014:	208b      	movs	r0, #139	; 0x8b
 8003016:	466b      	mov	r3, sp
 8003018:	1d99      	adds	r1, r3, #6
 800301a:	0040      	lsls	r0, r0, #1
 800301c:	f008 fd10 	bl	800ba40 <EE_ReadVariable>
	if(!status1)
 8003020:	2800      	cmp	r0, #0
 8003022:	d15e      	bne.n	80030e2 <LoadEEparams+0x12e>
		BOS.buttons.singleClickTime =temp1;
 8003024:	466b      	mov	r3, sp
 8003026:	88da      	ldrh	r2, [r3, #6]
 8003028:	4b41      	ldr	r3, [pc, #260]	; (8003130 <LoadEEparams+0x17c>)
 800302a:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 800302c:	2018      	movs	r0, #24
 800302e:	466b      	mov	r3, sp
 8003030:	1d99      	adds	r1, r3, #6
 8003032:	30ff      	adds	r0, #255	; 0xff
 8003034:	f008 fd04 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 8003038:	2800      	cmp	r0, #0
 800303a:	d157      	bne.n	80030ec <LoadEEparams+0x138>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 800303c:	466b      	mov	r3, sp
 800303e:	1d9a      	adds	r2, r3, #6
 8003040:	88db      	ldrh	r3, [r3, #6]
 8003042:	7811      	ldrb	r1, [r2, #0]
 8003044:	4a3a      	ldr	r2, [pc, #232]	; (8003130 <LoadEEparams+0x17c>)
 8003046:	7111      	strb	r1, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 800304c:	208c      	movs	r0, #140	; 0x8c
 800304e:	466b      	mov	r3, sp
 8003050:	1d99      	adds	r1, r3, #6
 8003052:	0040      	lsls	r0, r0, #1
 8003054:	f008 fcf4 	bl	800ba40 <EE_ReadVariable>
 8003058:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800305a:	201a      	movs	r0, #26
 800305c:	a901      	add	r1, sp, #4
 800305e:	30ff      	adds	r0, #255	; 0xff
 8003060:	f008 fcee 	bl	800ba40 <EE_ReadVariable>
	if(!status1 && !status2){
 8003064:	4304      	orrs	r4, r0
 8003066:	b2a4      	uxth	r4, r4
 8003068:	2c00      	cmp	r4, #0
 800306a:	d146      	bne.n	80030fa <LoadEEparams+0x146>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 800306c:	466b      	mov	r3, sp
 800306e:	3306      	adds	r3, #6
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	aa01      	add	r2, sp, #4
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	0412      	lsls	r2, r2, #16
 8003078:	4313      	orrs	r3, r2
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <LoadEEparams+0x17c>)
 800307c:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 800307e:	208d      	movs	r0, #141	; 0x8d
 8003080:	466b      	mov	r3, sp
 8003082:	1d99      	adds	r1, r3, #6
 8003084:	0040      	lsls	r0, r0, #1
 8003086:	f008 fcdb 	bl	800ba40 <EE_ReadVariable>
	if(!status1){
 800308a:	2800      	cmp	r0, #0
 800308c:	d143      	bne.n	8003116 <LoadEEparams+0x162>
		BOS.daylightsaving =(int8_t )temp1;
 800308e:	466b      	mov	r3, sp
 8003090:	1d9a      	adds	r2, r3, #6
 8003092:	88db      	ldrh	r3, [r3, #6]
 8003094:	7811      	ldrb	r1, [r2, #0]
 8003096:	4a26      	ldr	r2, [pc, #152]	; (8003130 <LoadEEparams+0x17c>)
 8003098:	7311      	strb	r1, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 800309e:	201c      	movs	r0, #28
 80030a0:	466b      	mov	r3, sp
 80030a2:	1d99      	adds	r1, r3, #6
 80030a4:	30ff      	adds	r0, #255	; 0xff
 80030a6:	f008 fccb 	bl	800ba40 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d139      	bne.n	8003122 <LoadEEparams+0x16e>
		BOS.disableCLI =(uint8_t )temp1;
 80030ae:	466b      	mov	r3, sp
 80030b0:	799a      	ldrb	r2, [r3, #6]
 80030b2:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <LoadEEparams+0x17c>)
 80030b4:	769a      	strb	r2, [r3, #26]
	else{
		BOS.disableCLI =BOS_default.disableCLI;
	}
	
	return result;
}
 80030b6:	2000      	movs	r0, #0
 80030b8:	b002      	add	sp, #8
 80030ba:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 80030bc:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <LoadEEparams+0x180>)
 80030be:	7811      	ldrb	r1, [r2, #0]
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <LoadEEparams+0x178>)
 80030c2:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80030c4:	7852      	ldrb	r2, [r2, #1]
 80030c6:	705a      	strb	r2, [r3, #1]
 80030c8:	e787      	b.n	8002fda <LoadEEparams+0x26>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 80030ca:	4a1a      	ldr	r2, [pc, #104]	; (8003134 <LoadEEparams+0x180>)
 80030cc:	7911      	ldrb	r1, [r2, #4]
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <LoadEEparams+0x178>)
 80030d0:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80030d2:	88d2      	ldrh	r2, [r2, #6]
 80030d4:	80da      	strh	r2, [r3, #6]
 80030d6:	e790      	b.n	8002ffa <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <LoadEEparams+0x184>)
 80030da:	881a      	ldrh	r2, [r3, #0]
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <LoadEEparams+0x17c>)
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e798      	b.n	8003014 <LoadEEparams+0x60>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <LoadEEparams+0x184>)
 80030e4:	885a      	ldrh	r2, [r3, #2]
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <LoadEEparams+0x17c>)
 80030e8:	805a      	strh	r2, [r3, #2]
 80030ea:	e79f      	b.n	800302c <LoadEEparams+0x78>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80030ec:	4a12      	ldr	r2, [pc, #72]	; (8003138 <LoadEEparams+0x184>)
 80030ee:	7911      	ldrb	r1, [r2, #4]
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <LoadEEparams+0x17c>)
 80030f2:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80030f4:	7952      	ldrb	r2, [r2, #5]
 80030f6:	715a      	strb	r2, [r3, #5]
 80030f8:	e7a8      	b.n	800304c <LoadEEparams+0x98>
	else if(CLI_LOW_Baudrate_Flag)
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <LoadEEparams+0x188>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <LoadEEparams+0x158>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003102:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <LoadEEparams+0x17c>)
 8003104:	22e1      	movs	r2, #225	; 0xe1
 8003106:	0252      	lsls	r2, r2, #9
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	e7b8      	b.n	800307e <LoadEEparams+0xca>
		BOS.clibaudrate =BOS_default.clibaudrate;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <LoadEEparams+0x184>)
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b07      	ldr	r3, [pc, #28]	; (8003130 <LoadEEparams+0x17c>)
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e7b3      	b.n	800307e <LoadEEparams+0xca>
		BOS.hourformat =24;
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <LoadEEparams+0x17c>)
 8003118:	2218      	movs	r2, #24
 800311a:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 800311c:	2200      	movs	r2, #0
 800311e:	731a      	strb	r2, [r3, #12]
 8003120:	e7bd      	b.n	800309e <LoadEEparams+0xea>
		BOS.disableCLI =BOS_default.disableCLI;
 8003122:	4b05      	ldr	r3, [pc, #20]	; (8003138 <LoadEEparams+0x184>)
 8003124:	7e9a      	ldrb	r2, [r3, #26]
 8003126:	4b02      	ldr	r3, [pc, #8]	; (8003130 <LoadEEparams+0x17c>)
 8003128:	769a      	strb	r2, [r3, #26]
 800312a:	e7c4      	b.n	80030b6 <LoadEEparams+0x102>
 800312c:	20005714 	.word	0x20005714
 8003130:	20005794 	.word	0x20005794
 8003134:	2000000c 	.word	0x2000000c
 8003138:	20000014 	.word	0x20000014
 800313c:	20000318 	.word	0x20000318

08003140 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003142:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003144:	231e      	movs	r3, #30
 8003146:	446b      	add	r3, sp
 8003148:	2200      	movs	r2, #0
 800314a:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800314c:	2400      	movs	r4, #0
 800314e:	e001      	b.n	8003154 <LoadEEbuttons+0x14>
 8003150:	3401      	adds	r4, #1
 8003152:	b2e4      	uxtb	r4, r4
 8003154:	2c03      	cmp	r4, #3
 8003156:	d85d      	bhi.n	8003214 <LoadEEbuttons+0xd4>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 8003158:	0025      	movs	r5, r4
 800315a:	353b      	adds	r5, #59	; 0x3b
 800315c:	00ad      	lsls	r5, r5, #2
 800315e:	b2ad      	uxth	r5, r5
 8003160:	211e      	movs	r1, #30
 8003162:	4469      	add	r1, sp
 8003164:	0028      	movs	r0, r5
 8003166:	f008 fc6b 	bl	800ba40 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 800316a:	2800      	cmp	r0, #0
 800316c:	d1f0      	bne.n	8003150 <LoadEEbuttons+0x10>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 800316e:	231e      	movs	r3, #30
 8003170:	446b      	add	r3, sp
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	0a18      	lsrs	r0, r3, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 8003176:	0b19      	lsrs	r1, r3, #12
 8003178:	1c62      	adds	r2, r4, #1
 800317a:	4291      	cmp	r1, r2
 800317c:	d1e8      	bne.n	8003150 <LoadEEbuttons+0x10>
 800317e:	210f      	movs	r1, #15
 8003180:	000f      	movs	r7, r1
 8003182:	4007      	ands	r7, r0
 8003184:	4201      	tst	r1, r0
 8003186:	d0e3      	beq.n	8003150 <LoadEEbuttons+0x10>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003188:	00d6      	lsls	r6, r2, #3
 800318a:	18b2      	adds	r2, r6, r2
 800318c:	4e23      	ldr	r6, [pc, #140]	; (800321c <LoadEEbuttons+0xdc>)
 800318e:	18b6      	adds	r6, r6, r2
 8003190:	7077      	strb	r7, [r6, #1]
				button[i + 1].events =(uint8_t )temp16;
 8003192:	7233      	strb	r3, [r6, #8]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 8003194:	1c68      	adds	r0, r5, #1
 8003196:	b280      	uxth	r0, r0
 8003198:	231e      	movs	r3, #30
 800319a:	446b      	add	r3, sp
 800319c:	0019      	movs	r1, r3
 800319e:	f008 fc4f 	bl	800ba40 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80031a2:	466b      	mov	r3, sp
 80031a4:	8bdb      	ldrh	r3, [r3, #30]
 80031a6:	0a1a      	lsrs	r2, r3, #8
 80031a8:	70b2      	strb	r2, [r6, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80031aa:	7173      	strb	r3, [r6, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80031ac:	1ca8      	adds	r0, r5, #2
 80031ae:	b280      	uxth	r0, r0
 80031b0:	231e      	movs	r3, #30
 80031b2:	446b      	add	r3, sp
 80031b4:	0019      	movs	r1, r3
 80031b6:	f008 fc43 	bl	800ba40 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80031ba:	466b      	mov	r3, sp
 80031bc:	8bdb      	ldrh	r3, [r3, #30]
 80031be:	0a1a      	lsrs	r2, r3, #8
 80031c0:	70f2      	strb	r2, [r6, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80031c2:	71b3      	strb	r3, [r6, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80031c4:	3503      	adds	r5, #3
 80031c6:	b2a8      	uxth	r0, r5
 80031c8:	231e      	movs	r3, #30
 80031ca:	446b      	add	r3, sp
 80031cc:	0019      	movs	r1, r3
 80031ce:	f008 fc37 	bl	800ba40 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80031d2:	466b      	mov	r3, sp
 80031d4:	8bdb      	ldrh	r3, [r3, #30]
 80031d6:	0a1a      	lsrs	r2, r3, #8
 80031d8:	7132      	strb	r2, [r6, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80031da:	71f3      	strb	r3, [r6, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80031dc:	1c65      	adds	r5, r4, #1
 80031de:	b2ed      	uxtb	r5, r5
 80031e0:	7870      	ldrb	r0, [r6, #1]
 80031e2:	0029      	movs	r1, r5
 80031e4:	f009 f8a2 	bl	800c32c <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80031e8:	7a31      	ldrb	r1, [r6, #8]
 80031ea:	084a      	lsrs	r2, r1, #1
 80031ec:	78b3      	ldrb	r3, [r6, #2]
 80031ee:	2001      	movs	r0, #1
 80031f0:	4002      	ands	r2, r0
 80031f2:	4001      	ands	r1, r0
 80031f4:	2000      	movs	r0, #0
 80031f6:	9005      	str	r0, [sp, #20]
 80031f8:	79f0      	ldrb	r0, [r6, #7]
 80031fa:	9004      	str	r0, [sp, #16]
 80031fc:	79b0      	ldrb	r0, [r6, #6]
 80031fe:	9003      	str	r0, [sp, #12]
 8003200:	7970      	ldrb	r0, [r6, #5]
 8003202:	9002      	str	r0, [sp, #8]
 8003204:	7930      	ldrb	r0, [r6, #4]
 8003206:	9001      	str	r0, [sp, #4]
 8003208:	78f0      	ldrb	r0, [r6, #3]
 800320a:	9000      	str	r0, [sp, #0]
 800320c:	0028      	movs	r0, r5
 800320e:	f009 f9a5 	bl	800c55c <SetButtonEvents>
 8003212:	e79d      	b.n	8003150 <LoadEEbuttons+0x10>
			}
		}
	}
	
	return result;
}
 8003214:	2000      	movs	r0, #0
 8003216:	b009      	add	sp, #36	; 0x24
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	20001360 	.word	0x20001360

08003220 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003222:	46d6      	mov	lr, sl
 8003224:	464f      	mov	r7, r9
 8003226:	b580      	push	{r7, lr}
 8003228:	b083      	sub	sp, #12
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800322a:	2032      	movs	r0, #50	; 0x32
 800322c:	f00f ff52 	bl	80130d4 <malloc>
 8003230:	1e06      	subs	r6, r0, #0
	if(snipBuffer == NULL)
 8003232:	d068      	beq.n	8003306 <LoadROsnippets+0xe6>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003234:	4b36      	ldr	r3, [pc, #216]	; (8003310 <LoadROsnippets+0xf0>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2bfe      	cmp	r3, #254	; 0xfe
 800323a:	d166      	bne.n	800330a <LoadROsnippets+0xea>
		return BOS_ERROR;
	
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800323c:	2700      	movs	r7, #0
	int currentAdd = RO_MID_ADDRESS;
 800323e:	4c34      	ldr	r4, [pc, #208]	; (8003310 <LoadROsnippets+0xf0>)
 8003240:	e04a      	b.n	80032d8 <LoadROsnippets+0xb8>
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003242:	7822      	ldrb	r2, [r4, #0]
 8003244:	54f2      	strb	r2, [r6, r3]
		for(i =0; i < sizeof(snippet_t); i++)
 8003246:	3301      	adds	r3, #1
 8003248:	b2db      	uxtb	r3, r3
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 800324a:	3401      	adds	r4, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800324c:	2b13      	cmp	r3, #19
 800324e:	d9f8      	bls.n	8003242 <LoadROsnippets+0x22>
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003250:	46ba      	mov	sl, r7
 8003252:	00bb      	lsls	r3, r7, #2
 8003254:	19db      	adds	r3, r3, r7
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4a2e      	ldr	r2, [pc, #184]	; (8003314 <LoadROsnippets+0xf4>)
 800325a:	4699      	mov	r9, r3
 800325c:	4491      	add	r9, r2
 800325e:	1c71      	adds	r1, r6, #1
 8003260:	2214      	movs	r2, #20
 8003262:	4648      	mov	r0, r9
 8003264:	f00f ff58 	bl	8013118 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003268:	2214      	movs	r2, #20
 800326a:	2100      	movs	r1, #0
 800326c:	0030      	movs	r0, r6
 800326e:	f00f ff5c 	bl	801312a <memset>
		i =0;
		// Load commands until you get next 0xFE
		currentAdd=currentAdd+20;
 8003272:	3414      	adds	r4, #20
		i =0;
 8003274:	2500      	movs	r5, #0
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003276:	9401      	str	r4, [sp, #4]
 8003278:	7823      	ldrb	r3, [r4, #0]
 800327a:	2bfd      	cmp	r3, #253	; 0xfd
 800327c:	d806      	bhi.n	800328c <LoadROsnippets+0x6c>
 800327e:	2d31      	cmp	r5, #49	; 0x31
 8003280:	d804      	bhi.n	800328c <LoadROsnippets+0x6c>
			snipBuffer[i] =*(uint8_t* )currentAdd;
 8003282:	5573      	strb	r3, [r6, r5]
			++currentAdd;
 8003284:	3401      	adds	r4, #1
			++i;
 8003286:	3501      	adds	r5, #1
 8003288:	b2ed      	uxtb	r5, r5
 800328a:	e7f4      	b.n	8003276 <LoadROsnippets+0x56>
		}
		if(snipBuffer[i - 1] != 0)
 800328c:	1973      	adds	r3, r6, r5
 800328e:	3b01      	subs	r3, #1
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <LoadROsnippets+0x7a>
			++i;	// String termination char was not recorded, then add one
 8003296:	3501      	adds	r5, #1
 8003298:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd =(char* )malloc(i);
 800329a:	0028      	movs	r0, r5
 800329c:	f00f ff1a 	bl	80130d4 <malloc>
 80032a0:	4653      	mov	r3, sl
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4453      	add	r3, sl
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <LoadROsnippets+0xf4>)
 80032aa:	18d3      	adds	r3, r2, r3
 80032ac:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d016      	beq.n	80032e0 <LoadROsnippets+0xc0>
			free(snipBuffer);
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
 80032b2:	002a      	movs	r2, r5
 80032b4:	0031      	movs	r1, r6
 80032b6:	f00f ff2f 	bl	8013118 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <LoadROsnippets+0xf8>)
 80032bc:	7813      	ldrb	r3, [r2, #0]
 80032be:	3301      	adds	r3, #1
 80032c0:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80032c2:	002a      	movs	r2, r5
 80032c4:	2100      	movs	r1, #0
 80032c6:	0030      	movs	r0, r6
 80032c8:	f00f ff2f 	bl	801312a <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80032cc:	9b01      	ldr	r3, [sp, #4]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2bfe      	cmp	r3, #254	; 0xfe
 80032d2:	d10f      	bne.n	80032f4 <LoadROsnippets+0xd4>
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80032d4:	3701      	adds	r7, #1
 80032d6:	b2ff      	uxtb	r7, r7
 80032d8:	2f04      	cmp	r7, #4
 80032da:	d80b      	bhi.n	80032f4 <LoadROsnippets+0xd4>
		for(i =0; i < sizeof(snippet_t); i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	e7b5      	b.n	800324c <LoadROsnippets+0x2c>
			memset(&snippets[s],0,sizeof(snippet_t));
 80032e0:	2214      	movs	r2, #20
 80032e2:	2100      	movs	r1, #0
 80032e4:	4648      	mov	r0, r9
 80032e6:	f00f ff20 	bl	801312a <memset>
			free(snipBuffer);
 80032ea:	0030      	movs	r0, r6
 80032ec:	f00f fefc 	bl	80130e8 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80032f0:	200e      	movs	r0, #14
 80032f2:	e003      	b.n	80032fc <LoadROsnippets+0xdc>
			break;
	}
	
	free(snipBuffer);
 80032f4:	0030      	movs	r0, r6
 80032f6:	f00f fef7 	bl	80130e8 <free>
	return BOS_OK;
 80032fa:	2000      	movs	r0, #0
}
 80032fc:	b003      	add	sp, #12
 80032fe:	bcc0      	pop	{r6, r7}
 8003300:	46ba      	mov	sl, r7
 8003302:	46b1      	mov	r9, r6
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003306:	20fb      	movs	r0, #251	; 0xfb
 8003308:	e7f8      	b.n	80032fc <LoadROsnippets+0xdc>
		return BOS_ERROR;
 800330a:	20ff      	movs	r0, #255	; 0xff
 800330c:	e7f6      	b.n	80032fc <LoadROsnippets+0xdc>
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	0801dc00 	.word	0x0801dc00
 8003314:	200057b0 	.word	0x200057b0
 8003318:	200009af 	.word	0x200009af

0800331c <LoadEEvars>:
void LoadEEvars(void){
 800331c:	b510      	push	{r4, lr}
	LoadEEportsDir();
 800331e:	f7ff fcf7 	bl	8002d10 <LoadEEportsDir>
	LoadEEalias();
 8003322:	f7ff fd11 	bl	8002d48 <LoadEEalias>
	LoadEEgroup();
 8003326:	f7ff fd4b 	bl	8002dc0 <LoadEEgroup>
	LoadEEstreams();
 800332a:	f7ff fd97 	bl	8002e5c <LoadEEstreams>
	LoadEEparams();
 800332e:	f7ff fe41 	bl	8002fb4 <LoadEEparams>
	LoadEEbuttons();
 8003332:	f7ff ff05 	bl	8003140 <LoadEEbuttons>
	LoadROsnippets();
 8003336:	f7ff ff73 	bl	8003220 <LoadROsnippets>
}
 800333a:	bd10      	pop	{r4, pc}

0800333c <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 800333c:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 800333e:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003340:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8003342:	e005      	b.n	8003350 <SaveEEportsDir+0x14>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003344:	1c60      	adds	r0, r4, #1
 8003346:	f008 fc2d 	bl	800bba4 <EE_WriteVariable>
 800334a:	e00b      	b.n	8003364 <SaveEEportsDir+0x28>
	for(uint8_t i =1; i <= N; i++){
 800334c:	3401      	adds	r4, #1
 800334e:	b2e4      	uxtb	r4, r4
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <SaveEEportsDir+0x34>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	42a3      	cmp	r3, r4
 8003356:	d309      	bcc.n	800336c <SaveEEportsDir+0x30>
		if(arrayPortsDir[i - 1])
 8003358:	1e63      	subs	r3, r4, #1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4a05      	ldr	r2, [pc, #20]	; (8003374 <SaveEEportsDir+0x38>)
 800335e:	5a99      	ldrh	r1, [r3, r2]
 8003360:	2900      	cmp	r1, #0
 8003362:	d1ef      	bne.n	8003344 <SaveEEportsDir+0x8>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003364:	2c19      	cmp	r4, #25
 8003366:	d9f1      	bls.n	800334c <SaveEEportsDir+0x10>
			result =BOS_ERR_EEPROM;
 8003368:	250a      	movs	r5, #10
 800336a:	e7ef      	b.n	800334c <SaveEEportsDir+0x10>
	}
	
	return result;
}
 800336c:	0028      	movs	r0, r5
 800336e:	bd70      	pop	{r4, r5, r6, pc}
 8003370:	20000030 	.word	0x20000030
 8003374:	20005c48 	.word	0x20005c48

08003378 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800337a:	2500      	movs	r5, #0
	uint16_t add =0, temp =0;
 800337c:	2600      	movs	r6, #0
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800337e:	e001      	b.n	8003384 <SaveEEalias+0xc>
 8003380:	3501      	adds	r5, #1
 8003382:	b2ed      	uxtb	r5, r5
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <SaveEEalias+0x58>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	42ab      	cmp	r3, r5
 800338a:	d31f      	bcc.n	80033cc <SaveEEalias+0x54>
	    {
		if(moduleAlias[i][0]){
 800338c:	002f      	movs	r7, r5
 800338e:	00ab      	lsls	r3, r5, #2
 8003390:	195b      	adds	r3, r3, r5
 8003392:	005a      	lsls	r2, r3, #1
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <SaveEEalias+0x5c>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f1      	beq.n	8003380 <SaveEEalias+0x8>
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800339c:	2401      	movs	r4, #1
 800339e:	2c09      	cmp	r4, #9
 80033a0:	d8ee      	bhi.n	8003380 <SaveEEalias+0x8>
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80033a2:	1e60      	subs	r0, r4, #1
 80033a4:	00ba      	lsls	r2, r7, #2
 80033a6:	19d2      	adds	r2, r2, r7
 80033a8:	0051      	lsls	r1, r2, #1
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <SaveEEalias+0x5c>)
 80033ac:	185b      	adds	r3, r3, r1
 80033ae:	5c19      	ldrb	r1, [r3, r0]
 80033b0:	0209      	lsls	r1, r1, #8
 80033b2:	5d1b      	ldrb	r3, [r3, r4]
 80033b4:	18c9      	adds	r1, r1, r3
 80033b6:	b289      	uxth	r1, r1
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80033b8:	0030      	movs	r0, r6
 80033ba:	301c      	adds	r0, #28
 80033bc:	b280      	uxth	r0, r0
 80033be:	f008 fbf1 	bl	800bba4 <EE_WriteVariable>
				add++;
 80033c2:	3601      	adds	r6, #1
 80033c4:	b2b6      	uxth	r6, r6
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80033c6:	3402      	adds	r4, #2
 80033c8:	b2e4      	uxtb	r4, r4
 80033ca:	e7e8      	b.n	800339e <SaveEEalias+0x26>
			}
		}
	}
	
	return result;
}
 80033cc:	2000      	movs	r0, #0
 80033ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d0:	20000030 	.word	0x20000030
 80033d4:	20000838 	.word	0x20000838

080033d8 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	46de      	mov	lr, fp
 80033dc:	4657      	mov	r7, sl
 80033de:	464e      	mov	r6, r9
 80033e0:	4645      	mov	r5, r8
 80033e2:	b5e0      	push	{r5, r6, r7, lr}
 80033e4:	000f      	movs	r7, r1
 80033e6:	0016      	movs	r6, r2
 80033e8:	001c      	movs	r4, r3
 80033ea:	ab0a      	add	r3, sp, #40	; 0x28
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	469b      	mov	fp, r3
 80033f0:	ab0b      	add	r3, sp, #44	; 0x2c
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	469a      	mov	sl, r3
 80033f6:	ab0c      	add	r3, sp, #48	; 0x30
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4699      	mov	r9, r3
 80033fc:	ab0d      	add	r3, sp, #52	; 0x34
 80033fe:	781d      	ldrb	r5, [r3, #0]
 8003400:	ab0e      	add	r3, sp, #56	; 0x38
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003406:	0001      	movs	r1, r0
 8003408:	20e4      	movs	r0, #228	; 0xe4
 800340a:	f008 fbcb 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800340e:	0a39      	lsrs	r1, r7, #8
 8003410:	b289      	uxth	r1, r1
 8003412:	20e5      	movs	r0, #229	; 0xe5
 8003414:	f008 fbc6 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003418:	b2b9      	uxth	r1, r7
 800341a:	20e6      	movs	r0, #230	; 0xe6
 800341c:	f008 fbc2 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 8003420:	0a31      	lsrs	r1, r6, #8
 8003422:	b289      	uxth	r1, r1
 8003424:	20e7      	movs	r0, #231	; 0xe7
 8003426:	f008 fbbd 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 800342a:	b2b1      	uxth	r1, r6
 800342c:	20e8      	movs	r0, #232	; 0xe8
 800342e:	f008 fbb9 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003432:	0224      	lsls	r4, r4, #8
 8003434:	445c      	add	r4, fp
 8003436:	b2a1      	uxth	r1, r4
 8003438:	20e9      	movs	r0, #233	; 0xe9
 800343a:	f008 fbb3 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800343e:	4653      	mov	r3, sl
 8003440:	0219      	lsls	r1, r3, #8
 8003442:	4449      	add	r1, r9
 8003444:	b289      	uxth	r1, r1
 8003446:	20ea      	movs	r0, #234	; 0xea
 8003448:	f008 fbac 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800344c:	022d      	lsls	r5, r5, #8
 800344e:	4445      	add	r5, r8
 8003450:	b2a9      	uxth	r1, r5
 8003452:	20eb      	movs	r0, #235	; 0xeb
 8003454:	f008 fba6 	bl	800bba4 <EE_WriteVariable>
	
	return result;
}
 8003458:	2000      	movs	r0, #0
 800345a:	bcf0      	pop	{r4, r5, r6, r7}
 800345c:	46bb      	mov	fp, r7
 800345e:	46b2      	mov	sl, r6
 8003460:	46a9      	mov	r9, r5
 8003462:	46a0      	mov	r8, r4
 8003464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003468 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003468:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 800346a:	4c1f      	ldr	r4, [pc, #124]	; (80034e8 <SaveEEparams+0x80>)
 800346c:	7863      	ldrb	r3, [r4, #1]
 800346e:	015b      	lsls	r3, r3, #5
 8003470:	7821      	ldrb	r1, [r4, #0]
 8003472:	4319      	orrs	r1, r3
 8003474:	208a      	movs	r0, #138	; 0x8a
 8003476:	0040      	lsls	r0, r0, #1
 8003478:	f008 fb94 	bl	800bba4 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 800347c:	7923      	ldrb	r3, [r4, #4]
 800347e:	03db      	lsls	r3, r3, #15
 8003480:	2206      	movs	r2, #6
 8003482:	5ea1      	ldrsh	r1, [r4, r2]
 8003484:	4319      	orrs	r1, r3
 8003486:	b289      	uxth	r1, r1
 8003488:	208e      	movs	r0, #142	; 0x8e
 800348a:	0040      	lsls	r0, r0, #1
 800348c:	f008 fb8a 	bl	800bba4 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 8003490:	4c16      	ldr	r4, [pc, #88]	; (80034ec <SaveEEparams+0x84>)
 8003492:	8821      	ldrh	r1, [r4, #0]
 8003494:	2016      	movs	r0, #22
 8003496:	30ff      	adds	r0, #255	; 0xff
 8003498:	f008 fb84 	bl	800bba4 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800349c:	8861      	ldrh	r1, [r4, #2]
 800349e:	208b      	movs	r0, #139	; 0x8b
 80034a0:	0040      	lsls	r0, r0, #1
 80034a2:	f008 fb7f 	bl	800bba4 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80034a6:	7963      	ldrb	r3, [r4, #5]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	7b21      	ldrb	r1, [r4, #12]
 80034ac:	4319      	orrs	r1, r3
 80034ae:	2018      	movs	r0, #24
 80034b0:	30ff      	adds	r0, #255	; 0xff
 80034b2:	f008 fb77 	bl	800bba4 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80034b6:	8921      	ldrh	r1, [r4, #8]
 80034b8:	208c      	movs	r0, #140	; 0x8c
 80034ba:	0040      	lsls	r0, r0, #1
 80034bc:	f008 fb72 	bl	800bba4 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80034c0:	8961      	ldrh	r1, [r4, #10]
 80034c2:	201a      	movs	r0, #26
 80034c4:	30ff      	adds	r0, #255	; 0xff
 80034c6:	f008 fb6d 	bl	800bba4 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80034ca:	7b63      	ldrb	r3, [r4, #13]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	7921      	ldrb	r1, [r4, #4]
 80034d0:	4319      	orrs	r1, r3
 80034d2:	208d      	movs	r0, #141	; 0x8d
 80034d4:	0040      	lsls	r0, r0, #1
 80034d6:	f008 fb65 	bl	800bba4 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 80034da:	7ea1      	ldrb	r1, [r4, #26]
 80034dc:	201c      	movs	r0, #28
 80034de:	30ff      	adds	r0, #255	; 0xff
 80034e0:	f008 fb60 	bl	800bba4 <EE_WriteVariable>
	
	return result;
}
 80034e4:	2000      	movs	r0, #0
 80034e6:	bd10      	pop	{r4, pc}
 80034e8:	20005714 	.word	0x20005714
 80034ec:	20005794 	.word	0x20005794

080034f0 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 80034f0:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 80034f2:	2204      	movs	r2, #4
 80034f4:	2100      	movs	r1, #0
 80034f6:	480e      	ldr	r0, [pc, #56]	; (8003530 <ClearEEportsDir+0x40>)
 80034f8:	f00f fe17 	bl	801312a <memset>
	
	for(uint8_t i =1; i <= N; i++){
 80034fc:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80034fe:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8003500:	e005      	b.n	800350e <ClearEEportsDir+0x1e>
		if(arrayPortsDir[i - 1])
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003502:	1c60      	adds	r0, r4, #1
 8003504:	f008 fb4e 	bl	800bba4 <EE_WriteVariable>
 8003508:	e00b      	b.n	8003522 <ClearEEportsDir+0x32>
	for(uint8_t i =1; i <= N; i++){
 800350a:	3401      	adds	r4, #1
 800350c:	b2e4      	uxtb	r4, r4
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <ClearEEportsDir+0x44>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	42a3      	cmp	r3, r4
 8003514:	d309      	bcc.n	800352a <ClearEEportsDir+0x3a>
		if(arrayPortsDir[i - 1])
 8003516:	1e63      	subs	r3, r4, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4a05      	ldr	r2, [pc, #20]	; (8003530 <ClearEEportsDir+0x40>)
 800351c:	5a99      	ldrh	r1, [r3, r2]
 800351e:	2900      	cmp	r1, #0
 8003520:	d1ef      	bne.n	8003502 <ClearEEportsDir+0x12>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003522:	2c19      	cmp	r4, #25
 8003524:	d9f1      	bls.n	800350a <ClearEEportsDir+0x1a>
			result =BOS_ERR_EEPROM;
 8003526:	250a      	movs	r5, #10
 8003528:	e7ef      	b.n	800350a <ClearEEportsDir+0x1a>
	}
	
	return result;
}
 800352a:	0028      	movs	r0, r5
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20005c48 	.word	0x20005c48
 8003534:	20000030 	.word	0x20000030

08003538 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 8003538:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <EE_FormatForFactoryReset+0x20>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b07      	ldr	r3, [pc, #28]	; (800355c <EE_FormatForFactoryReset+0x24>)
 8003540:	429a      	cmp	r2, r3
 8003542:	d100      	bne.n	8003546 <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
		}
	}
	
}
 8003544:	bd10      	pop	{r4, pc}
		if(EE_Format() == HAL_OK){
 8003546:	f008 fb43 	bl	800bbd0 <EE_Format>
 800354a:	2800      	cmp	r0, #0
 800354c:	d1fa      	bne.n	8003544 <EE_FormatForFactoryReset+0xc>
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 800354e:	4b02      	ldr	r3, [pc, #8]	; (8003558 <EE_FormatForFactoryReset+0x20>)
 8003550:	4a02      	ldr	r2, [pc, #8]	; (800355c <EE_FormatForFactoryReset+0x24>)
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	e7f6      	b.n	8003544 <EE_FormatForFactoryReset+0xc>
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	20007ff0 	.word	0x20007ff0
 800355c:	beefdead 	.word	0xbeefdead

08003560 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003560:	b530      	push	{r4, r5, lr}
 8003562:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003564:	ab04      	add	r3, sp, #16
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	ab07      	add	r3, sp, #28
 800356a:	2212      	movs	r2, #18
 800356c:	446a      	add	r2, sp
 800356e:	a908      	add	r1, sp, #32
 8003570:	2001      	movs	r0, #1
 8003572:	f008 fdb3 	bl	800c0dc <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 8003576:	ac03      	add	r4, sp, #12
 8003578:	9400      	str	r4, [sp, #0]
 800357a:	ab05      	add	r3, sp, #20
 800357c:	220e      	movs	r2, #14
 800357e:	446a      	add	r2, sp
 8003580:	a906      	add	r1, sp, #24
 8003582:	2002      	movs	r0, #2
 8003584:	f008 fdaa 	bl	800c0dc <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003588:	2301      	movs	r3, #1
 800358a:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2500      	movs	r5, #0
 800358e:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003590:	466b      	mov	r3, sp
 8003592:	8a5b      	ldrh	r3, [r3, #18]
 8003594:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 8003596:	a909      	add	r1, sp, #36	; 0x24
 8003598:	9808      	ldr	r0, [sp, #32]
 800359a:	f00d ff3f 	bl	801141c <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800359e:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80035a0:	2302      	movs	r3, #2
 80035a2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80035a4:	8823      	ldrh	r3, [r4, #0]
 80035a6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80035a8:	a909      	add	r1, sp, #36	; 0x24
 80035aa:	9805      	ldr	r0, [sp, #20]
 80035ac:	f00d ff36 	bl	801141c <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80035b0:	466b      	mov	r3, sp
 80035b2:	8a59      	ldrh	r1, [r3, #18]
 80035b4:	2200      	movs	r2, #0
 80035b6:	9808      	ldr	r0, [sp, #32]
 80035b8:	f00e f885 	bl	80116c6 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80035bc:	2005      	movs	r0, #5
 80035be:	f00a fa41 	bl	800da44 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 80035c2:	8821      	ldrh	r1, [r4, #0]
 80035c4:	9805      	ldr	r0, [sp, #20]
 80035c6:	f00e f877 	bl	80116b8 <HAL_GPIO_ReadPin>
 80035ca:	1e04      	subs	r4, r0, #0
 80035cc:	d003      	beq.n	80035d6 <IsLowerCLIbaud+0x76>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 80035ce:	2400      	movs	r4, #0
}
 80035d0:	0020      	movs	r0, r4
 80035d2:	b00f      	add	sp, #60	; 0x3c
 80035d4:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 80035d6:	2312      	movs	r3, #18
 80035d8:	446b      	add	r3, sp
 80035da:	8819      	ldrh	r1, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	9808      	ldr	r0, [sp, #32]
 80035e0:	f00e f871 	bl	80116c6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 80035e4:	2005      	movs	r0, #5
 80035e6:	f00a fa2d 	bl	800da44 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 80035ea:	ab03      	add	r3, sp, #12
 80035ec:	8819      	ldrh	r1, [r3, #0]
 80035ee:	9805      	ldr	r0, [sp, #20]
 80035f0:	f00e f862 	bl	80116b8 <HAL_GPIO_ReadPin>
 80035f4:	2801      	cmp	r0, #1
 80035f6:	d1eb      	bne.n	80035d0 <IsLowerCLIbaud+0x70>
			return 1;
 80035f8:	0004      	movs	r4, r0
 80035fa:	e7e9      	b.n	80035d0 <IsLowerCLIbaud+0x70>

080035fc <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	0005      	movs	r5, r0
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003600:	2400      	movs	r4, #0
 8003602:	2c00      	cmp	r4, #0
 8003604:	d001      	beq.n	800360a <IsModuleParameter+0xe>
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
			return i + 1;
	}
	return 0;
 8003606:	2000      	movs	r0, #0
}
 8003608:	bd70      	pop	{r4, r5, r6, pc}
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 800360a:	0063      	lsls	r3, r4, #1
 800360c:	191b      	adds	r3, r3, r4
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4a06      	ldr	r2, [pc, #24]	; (800362c <IsModuleParameter+0x30>)
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	6899      	ldr	r1, [r3, #8]
 8003616:	0028      	movs	r0, r5
 8003618:	f7fc fd74 	bl	8000104 <strcmp>
 800361c:	2800      	cmp	r0, #0
 800361e:	d002      	beq.n	8003626 <IsModuleParameter+0x2a>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003620:	3401      	adds	r4, #1
 8003622:	b2e4      	uxtb	r4, r4
 8003624:	e7ed      	b.n	8003602 <IsModuleParameter+0x6>
			return i + 1;
 8003626:	3401      	adds	r4, #1
 8003628:	b2e0      	uxtb	r0, r4
 800362a:	e7ed      	b.n	8003608 <IsModuleParameter+0xc>
 800362c:	200000f4 	.word	0x200000f4

08003630 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 8003634:	2500      	movs	r5, #0
 8003636:	e001      	b.n	800363c <IsMathOperator+0xc>
 8003638:	3501      	adds	r5, #1
 800363a:	b2ed      	uxtb	r5, r5
 800363c:	2d05      	cmp	r5, #5
 800363e:	d825      	bhi.n	800368c <IsMathOperator+0x5c>
		if(!strcmp(string,"="))
 8003640:	4918      	ldr	r1, [pc, #96]	; (80036a4 <IsMathOperator+0x74>)
 8003642:	0020      	movs	r0, r4
 8003644:	f7fc fd5e 	bl	8000104 <strcmp>
 8003648:	2800      	cmp	r0, #0
 800364a:	d021      	beq.n	8003690 <IsMathOperator+0x60>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 800364c:	4916      	ldr	r1, [pc, #88]	; (80036a8 <IsMathOperator+0x78>)
 800364e:	0020      	movs	r0, r4
 8003650:	f7fc fd58 	bl	8000104 <strcmp>
 8003654:	2800      	cmp	r0, #0
 8003656:	d01d      	beq.n	8003694 <IsMathOperator+0x64>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003658:	4914      	ldr	r1, [pc, #80]	; (80036ac <IsMathOperator+0x7c>)
 800365a:	0020      	movs	r0, r4
 800365c:	f7fc fd52 	bl	8000104 <strcmp>
 8003660:	2800      	cmp	r0, #0
 8003662:	d019      	beq.n	8003698 <IsMathOperator+0x68>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003664:	4912      	ldr	r1, [pc, #72]	; (80036b0 <IsMathOperator+0x80>)
 8003666:	0020      	movs	r0, r4
 8003668:	f7fc fd4c 	bl	8000104 <strcmp>
 800366c:	2800      	cmp	r0, #0
 800366e:	d015      	beq.n	800369c <IsMathOperator+0x6c>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003670:	4910      	ldr	r1, [pc, #64]	; (80036b4 <IsMathOperator+0x84>)
 8003672:	0020      	movs	r0, r4
 8003674:	f7fc fd46 	bl	8000104 <strcmp>
 8003678:	2800      	cmp	r0, #0
 800367a:	d011      	beq.n	80036a0 <IsMathOperator+0x70>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800367c:	490e      	ldr	r1, [pc, #56]	; (80036b8 <IsMathOperator+0x88>)
 800367e:	0020      	movs	r0, r4
 8003680:	f7fc fd40 	bl	8000104 <strcmp>
 8003684:	2800      	cmp	r0, #0
 8003686:	d1d7      	bne.n	8003638 <IsMathOperator+0x8>
			return MATH_NOT_EQUAL;
 8003688:	2006      	movs	r0, #6
 800368a:	e000      	b.n	800368e <IsMathOperator+0x5e>
	}
	return 0;
 800368c:	2000      	movs	r0, #0
}
 800368e:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003690:	2001      	movs	r0, #1
 8003692:	e7fc      	b.n	800368e <IsMathOperator+0x5e>
			return MATH_GREATER;
 8003694:	2002      	movs	r0, #2
 8003696:	e7fa      	b.n	800368e <IsMathOperator+0x5e>
			return MATH_SMALLER;
 8003698:	2003      	movs	r0, #3
 800369a:	e7f8      	b.n	800368e <IsMathOperator+0x5e>
			return MATH_GREATER_EQUAL;
 800369c:	2004      	movs	r0, #4
 800369e:	e7f6      	b.n	800368e <IsMathOperator+0x5e>
			return MATH_SMALLER_EQUAL;
 80036a0:	2005      	movs	r0, #5
 80036a2:	e7f4      	b.n	800368e <IsMathOperator+0x5e>
 80036a4:	08017aa8 	.word	0x08017aa8
 80036a8:	08017aac 	.word	0x08017aac
 80036ac:	08017ab0 	.word	0x08017ab0
 80036b0:	08017ab4 	.word	0x08017ab4
 80036b4:	08017ab8 	.word	0x08017ab8
 80036b8:	08017abc 	.word	0x08017abc

080036bc <FindBroadcastRoutes>:
}
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80036bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036be:	46de      	mov	lr, fp
 80036c0:	4657      	mov	r7, sl
 80036c2:	464e      	mov	r6, r9
 80036c4:	4645      	mov	r5, r8
 80036c6:	b5e0      	push	{r5, r6, r7, lr}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80036cc:	4b42      	ldr	r3, [pc, #264]	; (80037d8 <FindBroadcastRoutes+0x11c>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	3307      	adds	r3, #7
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	466a      	mov	r2, sp
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	469d      	mov	sp, r3
 80036dc:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80036de:	2300      	movs	r3, #0
 80036e0:	4a3d      	ldr	r2, [pc, #244]	; (80037d8 <FindBroadcastRoutes+0x11c>)
 80036e2:	7812      	ldrb	r2, [r2, #0]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d207      	bcs.n	80036f8 <FindBroadcastRoutes+0x3c>
		modules[m] =0;
 80036e8:	2200      	movs	r2, #0
 80036ea:	54e2      	strb	r2, [r4, r3]
		bcastRoutes[m] =0;
 80036ec:	005d      	lsls	r5, r3, #1
 80036ee:	493b      	ldr	r1, [pc, #236]	; (80037dc <FindBroadcastRoutes+0x120>)
 80036f0:	526a      	strh	r2, [r5, r1]
	for(m =0; m < N; m++){
 80036f2:	3301      	adds	r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e7f3      	b.n	80036e0 <FindBroadcastRoutes+0x24>
	}
	modules[src - 1] =++level;					// Tag the source
 80036f8:	3801      	subs	r0, #1
 80036fa:	2301      	movs	r3, #1
 80036fc:	5423      	strb	r3, [r4, r0]
	
	/* 2. Source module should send to all neighbors */

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
 80036fe:	2201      	movs	r2, #1
 8003700:	e001      	b.n	8003706 <FindBroadcastRoutes+0x4a>
 8003702:	3201      	adds	r2, #1
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	2a06      	cmp	r2, #6
 8003708:	d817      	bhi.n	800373a <FindBroadcastRoutes+0x7e>
		if(array[src - 1][p]){
 800370a:	00c3      	lsls	r3, r0, #3
 800370c:	1a1b      	subs	r3, r3, r0
 800370e:	189b      	adds	r3, r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4933      	ldr	r1, [pc, #204]	; (80037e0 <FindBroadcastRoutes+0x124>)
 8003714:	5a5b      	ldrh	r3, [r3, r1]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f3      	beq.n	8003702 <FindBroadcastRoutes+0x46>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 800371a:	1e55      	subs	r5, r2, #1
 800371c:	2101      	movs	r1, #1
 800371e:	40a9      	lsls	r1, r5
 8003720:	000d      	movs	r5, r1
 8003722:	4e2e      	ldr	r6, [pc, #184]	; (80037dc <FindBroadcastRoutes+0x120>)
 8003724:	0041      	lsls	r1, r0, #1
 8003726:	468c      	mov	ip, r1
 8003728:	5b89      	ldrh	r1, [r1, r6]
 800372a:	4329      	orrs	r1, r5
 800372c:	4665      	mov	r5, ip
 800372e:	53a9      	strh	r1, [r5, r6]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003730:	08db      	lsrs	r3, r3, #3
 8003732:	3b01      	subs	r3, #1
 8003734:	2102      	movs	r1, #2
 8003736:	54e1      	strb	r1, [r4, r3]
 8003738:	e7e3      	b.n	8003702 <FindBroadcastRoutes+0x46>
	++level;												// Move one level
 800373a:	2302      	movs	r3, #2
 800373c:	469b      	mov	fp, r3
	
	/* 3. Starting from source neighbors, check all other modules we haven't broadcasted-to yet, one by one */

	do{
		untaged =0;								// Reset the untaged counter
		++level;											// Move one level
 800373e:	465e      	mov	r6, fp
 8003740:	3601      	adds	r6, #1
 8003742:	b2f3      	uxtb	r3, r6
 8003744:	469b      	mov	fp, r3
		untaged =0;								// Reset the untaged counter
 8003746:	2300      	movs	r3, #0
 8003748:	469c      	mov	ip, r3
		
		for(m =0; m < N; m++)					// Scan all modules in the list
 800374a:	2200      	movs	r2, #0
 800374c:	e02c      	b.n	80037a8 <FindBroadcastRoutes+0xec>
		    {
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 800374e:	3101      	adds	r1, #1
 8003750:	b2c9      	uxtb	r1, r1
 8003752:	2906      	cmp	r1, #6
 8003754:	d826      	bhi.n	80037a4 <FindBroadcastRoutes+0xe8>
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003756:	00eb      	lsls	r3, r5, #3
 8003758:	1b5b      	subs	r3, r3, r5
 800375a:	185b      	adds	r3, r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4820      	ldr	r0, [pc, #128]	; (80037e0 <FindBroadcastRoutes+0x124>)
 8003760:	5a1b      	ldrh	r3, [r3, r0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f3      	beq.n	800374e <FindBroadcastRoutes+0x92>
 8003766:	08db      	lsrs	r3, r3, #3
 8003768:	3b01      	subs	r3, #1
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	5ce0      	ldrb	r0, [r4, r3]
 800376e:	2800      	cmp	r0, #0
 8003770:	d1ed      	bne.n	800374e <FindBroadcastRoutes+0x92>
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003772:	0008      	movs	r0, r1
 8003774:	3801      	subs	r0, #1
 8003776:	2601      	movs	r6, #1
 8003778:	4086      	lsls	r6, r0
 800377a:	46b0      	mov	r8, r6
 800377c:	4817      	ldr	r0, [pc, #92]	; (80037dc <FindBroadcastRoutes+0x120>)
 800377e:	4681      	mov	r9, r0
 8003780:	0068      	lsls	r0, r5, #1
 8003782:	4682      	mov	sl, r0
 8003784:	4648      	mov	r0, r9
 8003786:	4656      	mov	r6, sl
 8003788:	5a30      	ldrh	r0, [r6, r0]
 800378a:	4646      	mov	r6, r8
 800378c:	4330      	orrs	r0, r6
 800378e:	464e      	mov	r6, r9
 8003790:	4653      	mov	r3, sl
 8003792:	5398      	strh	r0, [r3, r6]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4658      	mov	r0, fp
 8003798:	54e0      	strb	r0, [r4, r3]
						++untaged;
 800379a:	4663      	mov	r3, ip
 800379c:	3301      	adds	r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	469c      	mov	ip, r3
 80037a2:	e7d4      	b.n	800374e <FindBroadcastRoutes+0x92>
		for(m =0; m < N; m++)					// Scan all modules in the list
 80037a4:	3201      	adds	r2, #1
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <FindBroadcastRoutes+0x11c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d207      	bcs.n	80037c0 <FindBroadcastRoutes+0x104>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 80037b0:	0015      	movs	r5, r2
 80037b2:	5ca1      	ldrb	r1, [r4, r2]
 80037b4:	465b      	mov	r3, fp
 80037b6:	3b01      	subs	r3, #1
 80037b8:	4299      	cmp	r1, r3
 80037ba:	d1f3      	bne.n	80037a4 <FindBroadcastRoutes+0xe8>
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 80037bc:	2101      	movs	r1, #1
 80037be:	e7c8      	b.n	8003752 <FindBroadcastRoutes+0x96>
					}
				}
			}
		}
	} while(untaged);
 80037c0:	4663      	mov	r3, ip
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1bb      	bne.n	800373e <FindBroadcastRoutes+0x82>
	
	return result;
}
 80037c6:	2000      	movs	r0, #0
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b003      	add	sp, #12
 80037cc:	bcf0      	pop	{r4, r5, r6, r7}
 80037ce:	46bb      	mov	fp, r7
 80037d0:	46b2      	mov	sl, r6
 80037d2:	46a9      	mov	r9, r5
 80037d4:	46a0      	mov	r8, r4
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d8:	20000030 	.word	0x20000030
 80037dc:	2000067c 	.word	0x2000067c
 80037e0:	20000034 	.word	0x20000034

080037e4 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	0004      	movs	r4, r0
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 80037e8:	780b      	ldrb	r3, [r1, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <minArr+0x12>
		smallest =arr[0];
 80037ee:	7805      	ldrb	r5, [r0, #0]
	
	for(int i =0; i < N; i++){
		if((arr[i] < smallest) && !Q[i]){
			smallest =arr[i];
 80037f0:	2300      	movs	r3, #0
 80037f2:	2000      	movs	r0, #0
 80037f4:	e002      	b.n	80037fc <minArr+0x18>
	uint8_t smallest =0xFF;
 80037f6:	25ff      	movs	r5, #255	; 0xff
 80037f8:	e7fa      	b.n	80037f0 <minArr+0xc>
	for(int i =0; i < N; i++){
 80037fa:	3301      	adds	r3, #1
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <minArr+0x34>)
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	dd08      	ble.n	8003816 <minArr+0x32>
		if((arr[i] < smallest) && !Q[i]){
 8003804:	5ce2      	ldrb	r2, [r4, r3]
 8003806:	42aa      	cmp	r2, r5
 8003808:	d2f7      	bcs.n	80037fa <minArr+0x16>
 800380a:	5cce      	ldrb	r6, [r1, r3]
 800380c:	2e00      	cmp	r6, #0
 800380e:	d1f4      	bne.n	80037fa <minArr+0x16>
			index =i;
 8003810:	b2d8      	uxtb	r0, r3
			smallest =arr[i];
 8003812:	0015      	movs	r5, r2
 8003814:	e7f1      	b.n	80037fa <minArr+0x16>
		}
	}
	
	return index;
}
 8003816:	bd70      	pop	{r4, r5, r6, pc}
 8003818:	20000030 	.word	0x20000030

0800381c <QnotEmpty>:

/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
 800381c:	0001      	movs	r1, r0
	char temp =1;
	
	for(int i =0; i < N; i++){
 800381e:	2300      	movs	r3, #0
	char temp =1;
 8003820:	2001      	movs	r0, #1
	for(int i =0; i < N; i++){
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <QnotEmpty+0x18>)
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	dd03      	ble.n	8003832 <QnotEmpty+0x16>
		temp &=Q[i];
 800382a:	5cca      	ldrb	r2, [r1, r3]
 800382c:	4010      	ands	r0, r2
	for(int i =0; i < N; i++){
 800382e:	3301      	adds	r3, #1
 8003830:	e7f7      	b.n	8003822 <QnotEmpty+0x6>
	}
	
	return temp;
}
 8003832:	4770      	bx	lr
 8003834:	20000030 	.word	0x20000030

08003838 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800383a:	b083      	sub	sp, #12
 800383c:	0005      	movs	r5, r0
 800383e:	000e      	movs	r6, r1
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
 8003840:	ab01      	add	r3, sp, #4
 8003842:	2200      	movs	r2, #0
 8003844:	801a      	strh	r2, [r3, #0]
	memset(route,0,sizeof(route));
 8003846:	3202      	adds	r2, #2
 8003848:	2100      	movs	r1, #0
 800384a:	4845      	ldr	r0, [pc, #276]	; (8003960 <FindRoute+0x128>)
 800384c:	f00f fc6d 	bl	801312a <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003850:	0029      	movs	r1, r5
 8003852:	3d01      	subs	r5, #1
 8003854:	2200      	movs	r2, #0
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <FindRoute+0x12c>)
 8003858:	555a      	strb	r2, [r3, r5]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 800385a:	4b43      	ldr	r3, [pc, #268]	; (8003968 <FindRoute+0x130>)
 800385c:	555a      	strb	r2, [r3, r5]
	for(int col =1; col <= 6; col++){
 800385e:	2001      	movs	r0, #1
 8003860:	e000      	b.n	8003864 <FindRoute+0x2c>
 8003862:	3001      	adds	r0, #1
 8003864:	2806      	cmp	r0, #6
 8003866:	dc14      	bgt.n	8003892 <FindRoute+0x5a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003868:	00eb      	lsls	r3, r5, #3
 800386a:	1b5b      	subs	r3, r3, r5
 800386c:	181b      	adds	r3, r3, r0
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4a3e      	ldr	r2, [pc, #248]	; (800396c <FindRoute+0x134>)
 8003872:	5a9b      	ldrh	r3, [r3, r2]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f4      	beq.n	8003862 <FindRoute+0x2a>
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	b2b2      	uxth	r2, r6
 800387c:	4293      	cmp	r3, r2
 800387e:	d1f0      	bne.n	8003862 <FindRoute+0x2a>
			routeDist[desID - 1] =1;
 8003880:	1e73      	subs	r3, r6, #1
 8003882:	4a38      	ldr	r2, [pc, #224]	; (8003964 <FindRoute+0x12c>)
 8003884:	2101      	movs	r1, #1
 8003886:	54d1      	strb	r1, [r2, r3]
			route[0] =desID;
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <FindRoute+0x128>)
 800388a:	701e      	strb	r6, [r3, #0]
			return col;
 800388c:	b2c0      	uxtb	r0, r0
}
 800388e:	b003      	add	sp, #12
 8003890:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(int i =1; i <= N; i++){
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <FindRoute+0x60>
 8003896:	3301      	adds	r3, #1
 8003898:	4a35      	ldr	r2, [pc, #212]	; (8003970 <FindRoute+0x138>)
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	db09      	blt.n	80038b4 <FindRoute+0x7c>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 80038a0:	4299      	cmp	r1, r3
 80038a2:	d0f8      	beq.n	8003896 <FindRoute+0x5e>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	482f      	ldr	r0, [pc, #188]	; (8003964 <FindRoute+0x12c>)
 80038a8:	24ff      	movs	r4, #255	; 0xff
 80038aa:	5484      	strb	r4, [r0, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 80038ac:	482e      	ldr	r0, [pc, #184]	; (8003968 <FindRoute+0x130>)
 80038ae:	2400      	movs	r4, #0
 80038b0:	5484      	strb	r4, [r0, r2]
 80038b2:	e7f0      	b.n	8003896 <FindRoute+0x5e>
	uint8_t u =0;
 80038b4:	2400      	movs	r4, #0
	while(!QnotEmpty(Q)){
 80038b6:	a801      	add	r0, sp, #4
 80038b8:	f7ff ffb0 	bl	800381c <QnotEmpty>
 80038bc:	2800      	cmp	r0, #0
 80038be:	d10c      	bne.n	80038da <FindRoute+0xa2>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 80038c0:	a901      	add	r1, sp, #4
 80038c2:	4828      	ldr	r0, [pc, #160]	; (8003964 <FindRoute+0x12c>)
 80038c4:	f7ff ff8e 	bl	80037e4 <minArr>
 80038c8:	3001      	adds	r0, #1
 80038ca:	b2c4      	uxtb	r4, r0
		if(u == desID){
 80038cc:	42b4      	cmp	r4, r6
 80038ce:	d004      	beq.n	80038da <FindRoute+0xa2>
			Q[u - 1] =1;									// Remove u from Q
 80038d0:	1e61      	subs	r1, r4, #1
 80038d2:	ab01      	add	r3, sp, #4
 80038d4:	2201      	movs	r2, #1
 80038d6:	545a      	strb	r2, [r3, r1]
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 80038d8:	e003      	b.n	80038e2 <FindRoute+0xaa>
	uint8_t u =0;
 80038da:	2200      	movs	r2, #0
 80038dc:	e023      	b.n	8003926 <FindRoute+0xee>
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 80038de:	3201      	adds	r2, #1
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	2a06      	cmp	r2, #6
 80038e4:	d8e7      	bhi.n	80038b6 <FindRoute+0x7e>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 80038e6:	00cb      	lsls	r3, r1, #3
 80038e8:	1a5b      	subs	r3, r3, r1
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	481f      	ldr	r0, [pc, #124]	; (800396c <FindRoute+0x134>)
 80038f0:	5a1b      	ldrh	r3, [r3, r0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f3      	beq.n	80038de <FindRoute+0xa6>
				v =(array[u - 1][n] >> 3);
 80038f6:	08db      	lsrs	r3, r3, #3
 80038f8:	b2db      	uxtb	r3, r3
				if(!Q[v - 1])								// v is still in Q
 80038fa:	3b01      	subs	r3, #1
 80038fc:	a801      	add	r0, sp, #4
 80038fe:	5cc0      	ldrb	r0, [r0, r3]
 8003900:	2800      	cmp	r0, #0
 8003902:	d1ec      	bne.n	80038de <FindRoute+0xa6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003904:	4f17      	ldr	r7, [pc, #92]	; (8003964 <FindRoute+0x12c>)
 8003906:	5c78      	ldrb	r0, [r7, r1]
 8003908:	3001      	adds	r0, #1
 800390a:	b2c0      	uxtb	r0, r0
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 800390c:	5cff      	ldrb	r7, [r7, r3]
 800390e:	4287      	cmp	r7, r0
 8003910:	d9e5      	bls.n	80038de <FindRoute+0xa6>
						routeDist[v - 1] =alt;
 8003912:	4f14      	ldr	r7, [pc, #80]	; (8003964 <FindRoute+0x12c>)
 8003914:	54f8      	strb	r0, [r7, r3]
						routePrev[v - 1] =u;
 8003916:	4814      	ldr	r0, [pc, #80]	; (8003968 <FindRoute+0x130>)
 8003918:	54c4      	strb	r4, [r0, r3]
 800391a:	e7e0      	b.n	80038de <FindRoute+0xa6>
		route[j++] =u;          			// Push the vertex onto the stack
 800391c:	1c53      	adds	r3, r2, #1
 800391e:	4910      	ldr	r1, [pc, #64]	; (8003960 <FindRoute+0x128>)
 8003920:	548c      	strb	r4, [r1, r2]
 8003922:	b2da      	uxtb	r2, r3
		u =routePrev[u - 1];           		// Traverse from target to source
 8003924:	0004      	movs	r4, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003926:	1e63      	subs	r3, r4, #1
 8003928:	490f      	ldr	r1, [pc, #60]	; (8003968 <FindRoute+0x130>)
 800392a:	5cc8      	ldrb	r0, [r1, r3]
 800392c:	2800      	cmp	r0, #0
 800392e:	d1f5      	bne.n	800391c <FindRoute+0xe4>
	for(int col =1; col <= 6; col++){
 8003930:	2201      	movs	r2, #1
 8003932:	e000      	b.n	8003936 <FindRoute+0xfe>
 8003934:	3201      	adds	r2, #1
 8003936:	2a06      	cmp	r2, #6
 8003938:	dca9      	bgt.n	800388e <FindRoute+0x56>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 800393a:	00eb      	lsls	r3, r5, #3
 800393c:	1b5b      	subs	r3, r3, r5
 800393e:	189b      	adds	r3, r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <FindRoute+0x134>)
 8003944:	5a5b      	ldrh	r3, [r3, r1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f4      	beq.n	8003934 <FindRoute+0xfc>
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	1e71      	subs	r1, r6, #1
 800394e:	4c05      	ldr	r4, [pc, #20]	; (8003964 <FindRoute+0x12c>)
 8003950:	5c61      	ldrb	r1, [r4, r1]
 8003952:	3901      	subs	r1, #1
 8003954:	4c02      	ldr	r4, [pc, #8]	; (8003960 <FindRoute+0x128>)
 8003956:	5c61      	ldrb	r1, [r4, r1]
 8003958:	428b      	cmp	r3, r1
 800395a:	d1eb      	bne.n	8003934 <FindRoute+0xfc>
			return col;
 800395c:	b2d0      	uxtb	r0, r2
 800395e:	e796      	b.n	800388e <FindRoute+0x56>
 8003960:	2000585c 	.word	0x2000585c
 8003964:	200008d4 	.word	0x200008d4
 8003968:	200008d8 	.word	0x200008d8
 800396c:	20000034 	.word	0x20000034
 8003970:	20000030 	.word	0x20000030

08003974 <BOS_Init>:
void BOS_Init(void){
 8003974:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i = 1;i <= __N;i++)
 8003976:	2401      	movs	r4, #1
 8003978:	e007      	b.n	800398a <BOS_Init+0x16>
		else Output_Port_Array[i-1] = FindRoute(myID, i);
 800397a:	1e65      	subs	r5, r4, #1
 800397c:	0021      	movs	r1, r4
 800397e:	f7ff ff5b 	bl	8003838 <FindRoute>
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <BOS_Init+0x134>)
 8003984:	5558      	strb	r0, [r3, r5]
	for(uint8_t i = 1;i <= __N;i++)
 8003986:	3401      	adds	r4, #1
 8003988:	b2e4      	uxtb	r4, r4
 800398a:	2c02      	cmp	r4, #2
 800398c:	d808      	bhi.n	80039a0 <BOS_Init+0x2c>
		if(myID == i) Output_Port_Array[i-1] = 0;
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <BOS_Init+0x138>)
 8003990:	7818      	ldrb	r0, [r3, #0]
 8003992:	42a0      	cmp	r0, r4
 8003994:	d1f1      	bne.n	800397a <BOS_Init+0x6>
 8003996:	1e63      	subs	r3, r4, #1
 8003998:	4a43      	ldr	r2, [pc, #268]	; (8003aa8 <BOS_Init+0x134>)
 800399a:	2100      	movs	r1, #0
 800399c:	54d1      	strb	r1, [r2, r3]
 800399e:	e7f2      	b.n	8003986 <BOS_Init+0x12>
	RTC_Init();
 80039a0:	f009 ff08 	bl	800d7b4 <RTC_Init>
	GetTimeDate();
 80039a4:	f009 ffa6 	bl	800d8f4 <GetTimeDate>
	EE_Init();
 80039a8:	f008 f976 	bl	800bc98 <EE_Init>
	GPIO_Init();
 80039ac:	f008 fb60 	bl	800c070 <GPIO_Init>
	DMA_Init();
 80039b0:	f007 f938 	bl	800ac24 <DMA_Init>
	TIM_USEC_Init();
 80039b4:	f009 ffd2 	bl	800d95c <TIM_USEC_Init>
	CRC_Init();
 80039b8:	f007 ff50 	bl	800b85c <CRC_Init>
	TIM_MSEC_Init();
 80039bc:	f00a f800 	bl	800d9c0 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80039c0:	f008 fbc8 	bl	800c154 <IsFactoryReset>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d111      	bne.n	80039ec <BOS_Init+0x78>
	if(IsLowerCLIbaud()){
 80039c8:	f7ff fdca 	bl	8003560 <IsLowerCLIbaud>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d041      	beq.n	8003a54 <BOS_Init+0xe0>
		CLI_LOW_Baudrate_Flag =1;
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <BOS_Init+0x13c>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80039d6:	2032      	movs	r0, #50	; 0x32
 80039d8:	f00a f834 	bl	800da44 <StartMilliDelay>
		Module_Peripheral_Init();
 80039dc:	f006 fbac 	bl	800a138 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <BOS_Init+0x140>)
 80039e2:	22e1      	movs	r2, #225	; 0xe1
 80039e4:	0252      	lsls	r2, r2, #9
 80039e6:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80039e8:	2401      	movs	r4, #1
 80039ea:	e011      	b.n	8003a10 <BOS_Init+0x9c>
		EE_FormatForFactoryReset();
 80039ec:	f7ff fda4 	bl	8003538 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039f0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <BOS_Init+0x144>)
 80039f6:	4a31      	ldr	r2, [pc, #196]	; (8003abc <BOS_Init+0x148>)
 80039f8:	60da      	str	r2, [r3, #12]
 80039fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	e7fd      	b.n	80039fe <BOS_Init+0x8a>
			UpdateBaudrate(port,BOS.clibaudrate);
 8003a02:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <BOS_Init+0x140>)
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	0020      	movs	r0, r4
 8003a08:	f00a f9c2 	bl	800dd90 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8003a0c:	3401      	adds	r4, #1
 8003a0e:	b2e4      	uxtb	r4, r4
 8003a10:	2c03      	cmp	r4, #3
 8003a12:	d9f6      	bls.n	8003a02 <BOS_Init+0x8e>
	LoadEEvars();
 8003a14:	f7ff fc82 	bl	800331c <LoadEEvars>
	SetupMessagingRxDMAs();
 8003a18:	f007 fe9e 	bl	800b758 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8003a1c:	4b23      	ldr	r3, [pc, #140]	; (8003aac <BOS_Init+0x138>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d11d      	bne.n	8003a60 <BOS_Init+0xec>
		IND_ON();
 8003a24:	2580      	movs	r5, #128	; 0x80
 8003a26:	012d      	lsls	r5, r5, #4
 8003a28:	2490      	movs	r4, #144	; 0x90
 8003a2a:	05e4      	lsls	r4, r4, #23
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	0029      	movs	r1, r5
 8003a30:	0020      	movs	r0, r4
 8003a32:	f00d fe48 	bl	80116c6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003a36:	20fa      	movs	r0, #250	; 0xfa
 8003a38:	0040      	lsls	r0, r0, #1
 8003a3a:	f00a f803 	bl	800da44 <StartMilliDelay>
 8003a3e:	2200      	movs	r2, #0
 8003a40:	0029      	movs	r1, r5
 8003a42:	0020      	movs	r0, r4
 8003a44:	f00d fe3f 	bl	80116c6 <HAL_GPIO_WritePin>
	ResetUartORE();
 8003a48:	f003 fb9c 	bl	8007184 <ResetUartORE>
	BOS_initialized =1;
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <BOS_Init+0x14c>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	701a      	strb	r2, [r3, #0]
}
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003a54:	2032      	movs	r0, #50	; 0x32
 8003a56:	f009 fff5 	bl	800da44 <StartMilliDelay>
		Module_Peripheral_Init();
 8003a5a:	f006 fb6d 	bl	800a138 <Module_Peripheral_Init>
 8003a5e:	e7d9      	b.n	8003a14 <BOS_Init+0xa0>
		IND_ON();
 8003a60:	2580      	movs	r5, #128	; 0x80
 8003a62:	012d      	lsls	r5, r5, #4
 8003a64:	2490      	movs	r4, #144	; 0x90
 8003a66:	05e4      	lsls	r4, r4, #23
 8003a68:	2201      	movs	r2, #1
 8003a6a:	0029      	movs	r1, r5
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	f00d fe2a 	bl	80116c6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003a72:	20fa      	movs	r0, #250	; 0xfa
 8003a74:	0040      	lsls	r0, r0, #1
 8003a76:	f009 ffe5 	bl	800da44 <StartMilliDelay>
		IND_OFF();
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	0029      	movs	r1, r5
 8003a7e:	0020      	movs	r0, r4
 8003a80:	f00d fe21 	bl	80116c6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003a84:	2064      	movs	r0, #100	; 0x64
 8003a86:	f009 ffdd 	bl	800da44 <StartMilliDelay>
		IND_ON();
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	0029      	movs	r1, r5
 8003a8e:	0020      	movs	r0, r4
 8003a90:	f00d fe19 	bl	80116c6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003a94:	2064      	movs	r0, #100	; 0x64
 8003a96:	f009 ffd5 	bl	800da44 <StartMilliDelay>
		IND_OFF();
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	0029      	movs	r1, r5
 8003a9e:	0020      	movs	r0, r4
 8003aa0:	f00d fe11 	bl	80116c6 <HAL_GPIO_WritePin>
 8003aa4:	e7d0      	b.n	8003a48 <BOS_Init+0xd4>
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	2000066c 	.word	0x2000066c
 8003aac:	20000084 	.word	0x20000084
 8003ab0:	20000318 	.word	0x20000318
 8003ab4:	20005794 	.word	0x20005794
 8003ab8:	e000ed00 	.word	0xe000ed00
 8003abc:	05fa0004 	.word	0x05fa0004
 8003ac0:	20000317 	.word	0x20000317

08003ac4 <Module_Init>:
void Module_Init(void){
 8003ac4:	b510      	push	{r4, lr}
	HAL_Init();
 8003ac6:	f00c f9db 	bl	800fe80 <HAL_Init>
	SystemClock_Config();
 8003aca:	f006 f977 	bl	8009dbc <SystemClock_Config>
	BOS_Init();
 8003ace:	f7ff ff51 	bl	8003974 <BOS_Init>
	MX_FREERTOS_Init();
 8003ad2:	f003 fb73 	bl	80071bc <MX_FREERTOS_Init>
	osKernelStart();
 8003ad6:	f00a fa64 	bl	800dfa2 <osKernelStart>
}
 8003ada:	bd10      	pop	{r4, pc}

08003adc <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	46c6      	mov	lr, r8
 8003ae0:	b500      	push	{lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	0006      	movs	r6, r0
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003ae6:	4c57      	ldr	r4, [pc, #348]	; (8003c44 <DisplayTopology+0x168>)
 8003ae8:	4b57      	ldr	r3, [pc, #348]	; (8003c48 <DisplayTopology+0x16c>)
 8003aea:	0022      	movs	r2, r4
 8003aec:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003aee:	c223      	stmia	r2!, {r0, r1, r5}
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	6011      	str	r1, [r2, #0]
 8003af4:	889b      	ldrh	r3, [r3, #4]
 8003af6:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003af8:	0020      	movs	r0, r4
 8003afa:	f7fc fb0d 	bl	8000118 <strlen>
 8003afe:	b282      	uxth	r2, r0
 8003b00:	2301      	movs	r3, #1
 8003b02:	425b      	negs	r3, r3
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	3333      	adds	r3, #51	; 0x33
 8003b08:	0021      	movs	r1, r4
 8003b0a:	0030      	movs	r0, r6
 8003b0c:	f00a f8f0 	bl	800dcf0 <writePxMutex>
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003b10:	2401      	movs	r4, #1
 8003b12:	e013      	b.n	8003b3c <DisplayTopology+0x60>
		sprintf(pcUserMessage,"P%d\t",i);
 8003b14:	4d4b      	ldr	r5, [pc, #300]	; (8003c44 <DisplayTopology+0x168>)
 8003b16:	0022      	movs	r2, r4
 8003b18:	494c      	ldr	r1, [pc, #304]	; (8003c4c <DisplayTopology+0x170>)
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	f010 f8be 	bl	8013c9c <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003b20:	0028      	movs	r0, r5
 8003b22:	f7fc faf9 	bl	8000118 <strlen>
 8003b26:	b282      	uxth	r2, r0
 8003b28:	2301      	movs	r3, #1
 8003b2a:	425b      	negs	r3, r3
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	3333      	adds	r3, #51	; 0x33
 8003b30:	0029      	movs	r1, r5
 8003b32:	0030      	movs	r0, r6
 8003b34:	f00a f8dc 	bl	800dcf0 <writePxMutex>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003b38:	3401      	adds	r4, #1
 8003b3a:	b2e4      	uxtb	r4, r4
 8003b3c:	2c03      	cmp	r4, #3
 8003b3e:	d9e9      	bls.n	8003b14 <DisplayTopology+0x38>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003b40:	2301      	movs	r3, #1
 8003b42:	425b      	negs	r3, r3
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	3333      	adds	r3, #51	; 0x33
 8003b48:	2203      	movs	r2, #3
 8003b4a:	4941      	ldr	r1, [pc, #260]	; (8003c50 <DisplayTopology+0x174>)
 8003b4c:	0030      	movs	r0, r6
 8003b4e:	f00a f8cf 	bl	800dcf0 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003b52:	2500      	movs	r5, #0
 8003b54:	e030      	b.n	8003bb8 <DisplayTopology+0xdc>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003b56:	2307      	movs	r3, #7
 8003b58:	4013      	ands	r3, r2
 8003b5a:	08d2      	lsrs	r2, r2, #3
 8003b5c:	493d      	ldr	r1, [pc, #244]	; (8003c54 <DisplayTopology+0x178>)
 8003b5e:	4839      	ldr	r0, [pc, #228]	; (8003c44 <DisplayTopology+0x168>)
 8003b60:	f010 f89c 	bl	8013c9c <siprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003b64:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <DisplayTopology+0x168>)
 8003b66:	4698      	mov	r8, r3
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7fc fad5 	bl	8000118 <strlen>
 8003b6e:	b282      	uxth	r2, r0
 8003b70:	2301      	movs	r3, #1
 8003b72:	425b      	negs	r3, r3
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	3333      	adds	r3, #51	; 0x33
 8003b78:	4641      	mov	r1, r8
 8003b7a:	0030      	movs	r0, r6
 8003b7c:	f00a f8b8 	bl	800dcf0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003b80:	3401      	adds	r4, #1
 8003b82:	b2e4      	uxtb	r4, r4
 8003b84:	2c03      	cmp	r4, #3
 8003b86:	d80c      	bhi.n	8003ba2 <DisplayTopology+0xc6>
			if(!array[row][col])
 8003b88:	00fb      	lsls	r3, r7, #3
 8003b8a:	1bdb      	subs	r3, r3, r7
 8003b8c:	191b      	adds	r3, r3, r4
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4a31      	ldr	r2, [pc, #196]	; (8003c58 <DisplayTopology+0x17c>)
 8003b92:	5a9a      	ldrh	r2, [r3, r2]
 8003b94:	2a00      	cmp	r2, #0
 8003b96:	d1de      	bne.n	8003b56 <DisplayTopology+0x7a>
				sprintf(pcUserMessage,"%d\t",0);
 8003b98:	4930      	ldr	r1, [pc, #192]	; (8003c5c <DisplayTopology+0x180>)
 8003b9a:	482a      	ldr	r0, [pc, #168]	; (8003c44 <DisplayTopology+0x168>)
 8003b9c:	f010 f87e 	bl	8013c9c <siprintf>
 8003ba0:	e7e0      	b.n	8003b64 <DisplayTopology+0x88>
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	425b      	negs	r3, r3
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	3333      	adds	r3, #51	; 0x33
 8003baa:	2202      	movs	r2, #2
 8003bac:	492c      	ldr	r1, [pc, #176]	; (8003c60 <DisplayTopology+0x184>)
 8003bae:	0030      	movs	r0, r6
 8003bb0:	f00a f89e 	bl	800dcf0 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003bb4:	3501      	adds	r5, #1
 8003bb6:	b2ed      	uxtb	r5, r5
 8003bb8:	4b2a      	ldr	r3, [pc, #168]	; (8003c64 <DisplayTopology+0x188>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	42ab      	cmp	r3, r5
 8003bbe:	d933      	bls.n	8003c28 <DisplayTopology+0x14c>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003bc0:	002f      	movs	r7, r5
 8003bc2:	1c6a      	adds	r2, r5, #1
 8003bc4:	4c1f      	ldr	r4, [pc, #124]	; (8003c44 <DisplayTopology+0x168>)
 8003bc6:	4928      	ldr	r1, [pc, #160]	; (8003c68 <DisplayTopology+0x18c>)
 8003bc8:	0020      	movs	r0, r4
 8003bca:	f010 f867 	bl	8013c9c <siprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003bce:	0020      	movs	r0, r4
 8003bd0:	f7fc faa2 	bl	8000118 <strlen>
 8003bd4:	b282      	uxth	r2, r0
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	425b      	negs	r3, r3
 8003bda:	4698      	mov	r8, r3
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	3333      	adds	r3, #51	; 0x33
 8003be0:	0021      	movs	r1, r4
 8003be2:	0030      	movs	r0, r6
 8003be4:	f00a f884 	bl	800dcf0 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003be8:	00eb      	lsls	r3, r5, #3
 8003bea:	1b5b      	subs	r3, r3, r5
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <DisplayTopology+0x17c>)
 8003bf0:	5a9b      	ldrh	r3, [r3, r2]
 8003bf2:	0059      	lsls	r1, r3, #1
 8003bf4:	18c9      	adds	r1, r1, r3
 8003bf6:	0049      	lsls	r1, r1, #1
 8003bf8:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <DisplayTopology+0x190>)
 8003bfa:	18c9      	adds	r1, r1, r3
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	0020      	movs	r0, r4
 8003c00:	f010 f8a0 	bl	8013d44 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003c04:	4643      	mov	r3, r8
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	3333      	adds	r3, #51	; 0x33
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	0021      	movs	r1, r4
 8003c0e:	0030      	movs	r0, r6
 8003c10:	f00a f86e 	bl	800dcf0 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003c14:	4643      	mov	r3, r8
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	3333      	adds	r3, #51	; 0x33
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4914      	ldr	r1, [pc, #80]	; (8003c70 <DisplayTopology+0x194>)
 8003c1e:	0030      	movs	r0, r6
 8003c20:	f00a f866 	bl	800dcf0 <writePxMutex>
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003c24:	2401      	movs	r4, #1
 8003c26:	e7ad      	b.n	8003b84 <DisplayTopology+0xa8>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003c28:	2301      	movs	r3, #1
 8003c2a:	425b      	negs	r3, r3
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	3333      	adds	r3, #51	; 0x33
 8003c30:	2201      	movs	r2, #1
 8003c32:	4910      	ldr	r1, [pc, #64]	; (8003c74 <DisplayTopology+0x198>)
 8003c34:	0030      	movs	r0, r6
 8003c36:	f00a f85b 	bl	800dcf0 <writePxMutex>
}
 8003c3a:	b002      	add	sp, #8
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	46b8      	mov	r8, r7
 8003c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	20000864 	.word	0x20000864
 8003c48:	08017ac0 	.word	0x08017ac0
 8003c4c:	08017ad4 	.word	0x08017ad4
 8003c50:	08018af4 	.word	0x08018af4
 8003c54:	08017aec 	.word	0x08017aec
 8003c58:	20000034 	.word	0x20000034
 8003c5c:	08017ae8 	.word	0x08017ae8
 8003c60:	08017bf8 	.word	0x08017bf8
 8003c64:	20000030 	.word	0x20000030
 8003c68:	08017adc 	.word	0x08017adc
 8003c6c:	08018200 	.word	0x08018200
 8003c70:	08017ad0 	.word	0x08017ad0
 8003c74:	0801a754 	.word	0x0801a754

08003c78 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	0006      	movs	r6, r0
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003c7e:	4c2c      	ldr	r4, [pc, #176]	; (8003d30 <DisplayPortsDir+0xb8>)
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <DisplayPortsDir+0xbc>)
 8003c82:	0022      	movs	r2, r4
 8003c84:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c86:	c223      	stmia	r2!, {r0, r1, r5}
 8003c88:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003c8a:	c223      	stmia	r2!, {r0, r1, r5}
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003c90:	0020      	movs	r0, r4
 8003c92:	f7fc fa41 	bl	8000118 <strlen>
 8003c96:	b282      	uxth	r2, r0
 8003c98:	2301      	movs	r3, #1
 8003c9a:	425b      	negs	r3, r3
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	3333      	adds	r3, #51	; 0x33
 8003ca0:	0021      	movs	r1, r4
 8003ca2:	0030      	movs	r0, r6
 8003ca4:	f00a f824 	bl	800dcf0 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003ca8:	2501      	movs	r5, #1
 8003caa:	e023      	b.n	8003cf4 <DisplayPortsDir+0x7c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003cac:	4f20      	ldr	r7, [pc, #128]	; (8003d30 <DisplayPortsDir+0xb8>)
 8003cae:	0023      	movs	r3, r4
 8003cb0:	002a      	movs	r2, r5
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <DisplayPortsDir+0xc0>)
 8003cb4:	0038      	movs	r0, r7
 8003cb6:	f00f fff1 	bl	8013c9c <siprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003cba:	0038      	movs	r0, r7
 8003cbc:	f7fc fa2c 	bl	8000118 <strlen>
 8003cc0:	b282      	uxth	r2, r0
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	3333      	adds	r3, #51	; 0x33
 8003cca:	0039      	movs	r1, r7
 8003ccc:	0030      	movs	r0, r6
 8003cce:	f00a f80f 	bl	800dcf0 <writePxMutex>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003cd2:	3401      	adds	r4, #1
 8003cd4:	b2e4      	uxtb	r4, r4
 8003cd6:	2c0a      	cmp	r4, #10
 8003cd8:	d80a      	bhi.n	8003cf0 <DisplayPortsDir+0x78>
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003cda:	1e6b      	subs	r3, r5, #1
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <DisplayPortsDir+0xc4>)
 8003ce0:	5a9a      	ldrh	r2, [r3, r2]
 8003ce2:	1e61      	subs	r1, r4, #1
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	410b      	asrs	r3, r1
 8003cea:	4213      	tst	r3, r2
 8003cec:	d0f1      	beq.n	8003cd2 <DisplayPortsDir+0x5a>
 8003cee:	e7dd      	b.n	8003cac <DisplayPortsDir+0x34>
	for(uint8_t i =1; i <= N; i++){
 8003cf0:	3501      	adds	r5, #1
 8003cf2:	b2ed      	uxtb	r5, r5
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <DisplayPortsDir+0xc8>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	42ab      	cmp	r3, r5
 8003cfa:	d301      	bcc.n	8003d00 <DisplayPortsDir+0x88>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003cfc:	2401      	movs	r4, #1
 8003cfe:	e7ea      	b.n	8003cd6 <DisplayPortsDir+0x5e>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003d00:	4c0b      	ldr	r4, [pc, #44]	; (8003d30 <DisplayPortsDir+0xb8>)
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <DisplayPortsDir+0xcc>)
 8003d04:	0022      	movs	r2, r4
 8003d06:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003d08:	c223      	stmia	r2!, {r0, r1, r5}
 8003d0a:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003d0c:	c223      	stmia	r2!, {r0, r1, r5}
 8003d0e:	cb03      	ldmia	r3!, {r0, r1}
 8003d10:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d12:	0020      	movs	r0, r4
 8003d14:	f7fc fa00 	bl	8000118 <strlen>
 8003d18:	b282      	uxth	r2, r0
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	425b      	negs	r3, r3
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	3333      	adds	r3, #51	; 0x33
 8003d22:	0021      	movs	r1, r4
 8003d24:	0030      	movs	r0, r6
 8003d26:	f009 ffe3 	bl	800dcf0 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003d2a:	b003      	add	sp, #12
 8003d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	20000864 	.word	0x20000864
 8003d34:	08017af4 	.word	0x08017af4
 8003d38:	08017b10 	.word	0x08017b10
 8003d3c:	20005c48 	.word	0x20005c48
 8003d40:	20000030 	.word	0x20000030
 8003d44:	08017b24 	.word	0x08017b24

08003d48 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d4a:	46ce      	mov	lr, r9
 8003d4c:	4647      	mov	r7, r8
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b083      	sub	sp, #12
 8003d52:	4681      	mov	r9, r0
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003d54:	f00a fa46 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 8003d58:	0006      	movs	r6, r0
	
	strcpy((char* )pcOutputString,"");
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003d5e:	4b92      	ldr	r3, [pc, #584]	; (8003fa8 <DisplayModuleStatus+0x260>)
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	4c92      	ldr	r4, [pc, #584]	; (8003fac <DisplayModuleStatus+0x264>)
 8003d64:	4992      	ldr	r1, [pc, #584]	; (8003fb0 <DisplayModuleStatus+0x268>)
 8003d66:	0020      	movs	r0, r4
 8003d68:	f00f ff98 	bl	8013c9c <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003d6c:	0021      	movs	r1, r4
 8003d6e:	0030      	movs	r0, r6
 8003d70:	f00f ffb4 	bl	8013cdc <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003d74:	4b8f      	ldr	r3, [pc, #572]	; (8003fb4 <DisplayModuleStatus+0x26c>)
 8003d76:	781a      	ldrb	r2, [r3, #0]
 8003d78:	498f      	ldr	r1, [pc, #572]	; (8003fb8 <DisplayModuleStatus+0x270>)
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	f00f ff8e 	bl	8013c9c <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003d80:	0021      	movs	r1, r4
 8003d82:	0030      	movs	r0, r6
 8003d84:	f00f ffaa 	bl	8013cdc <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003d88:	2306      	movs	r3, #6
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	3b04      	subs	r3, #4
 8003d8e:	2200      	movs	r2, #0
 8003d90:	498a      	ldr	r1, [pc, #552]	; (8003fbc <DisplayModuleStatus+0x274>)
 8003d92:	0020      	movs	r0, r4
 8003d94:	f00f ff82 	bl	8013c9c <siprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003d98:	0021      	movs	r1, r4
 8003d9a:	0030      	movs	r0, r6
 8003d9c:	f00f ff9e 	bl	8013cdc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003da0:	4a87      	ldr	r2, [pc, #540]	; (8003fc0 <DisplayModuleStatus+0x278>)
 8003da2:	4988      	ldr	r1, [pc, #544]	; (8003fc4 <DisplayModuleStatus+0x27c>)
 8003da4:	0020      	movs	r0, r4
 8003da6:	f00f ff79 	bl	8013c9c <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003daa:	0021      	movs	r1, r4
 8003dac:	0030      	movs	r0, r6
 8003dae:	f00f ff95 	bl	8013cdc <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003db2:	4a85      	ldr	r2, [pc, #532]	; (8003fc8 <DisplayModuleStatus+0x280>)
 8003db4:	4985      	ldr	r1, [pc, #532]	; (8003fcc <DisplayModuleStatus+0x284>)
 8003db6:	0020      	movs	r0, r4
 8003db8:	f00f ff70 	bl	8013c9c <siprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003dbc:	0021      	movs	r1, r4
 8003dbe:	0030      	movs	r0, r6
 8003dc0:	f00f ff8c 	bl	8013cdc <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003dc4:	4b82      	ldr	r3, [pc, #520]	; (8003fd0 <DisplayModuleStatus+0x288>)
 8003dc6:	0022      	movs	r2, r4
 8003dc8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003dca:	c223      	stmia	r2!, {r0, r1, r5}
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	6011      	str	r1, [r2, #0]
 8003dd0:	8899      	ldrh	r1, [r3, #4]
 8003dd2:	8091      	strh	r1, [r2, #4]
 8003dd4:	799b      	ldrb	r3, [r3, #6]
 8003dd6:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003dd8:	0021      	movs	r1, r4
 8003dda:	0030      	movs	r0, r6
 8003ddc:	f00f ff7e 	bl	8013cdc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003de0:	2401      	movs	r4, #1
 8003de2:	e00d      	b.n	8003e00 <DisplayModuleStatus+0xb8>
		sprintf(pcUserMessage,"P%d: ",i);
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003de4:	4b71      	ldr	r3, [pc, #452]	; (8003fac <DisplayModuleStatus+0x264>)
 8003de6:	4a7b      	ldr	r2, [pc, #492]	; (8003fd4 <DisplayModuleStatus+0x28c>)
 8003de8:	6811      	ldr	r1, [r2, #0]
 8003dea:	6019      	str	r1, [r3, #0]
 8003dec:	8891      	ldrh	r1, [r2, #4]
 8003dee:	8099      	strh	r1, [r3, #4]
 8003df0:	7992      	ldrb	r2, [r2, #6]
 8003df2:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003df4:	496d      	ldr	r1, [pc, #436]	; (8003fac <DisplayModuleStatus+0x264>)
 8003df6:	0030      	movs	r0, r6
 8003df8:	f00f ff70 	bl	8013cdc <strcat>
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003dfc:	3401      	adds	r4, #1
 8003dfe:	b2e4      	uxtb	r4, r4
 8003e00:	2c03      	cmp	r4, #3
 8003e02:	d838      	bhi.n	8003e76 <DisplayModuleStatus+0x12e>
		sprintf(pcUserMessage,"P%d: ",i);
 8003e04:	4d69      	ldr	r5, [pc, #420]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e06:	0022      	movs	r2, r4
 8003e08:	4973      	ldr	r1, [pc, #460]	; (8003fd8 <DisplayModuleStatus+0x290>)
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	f00f ff46 	bl	8013c9c <siprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8003e10:	0029      	movs	r1, r5
 8003e12:	0030      	movs	r0, r6
 8003e14:	f00f ff62 	bl	8013cdc <strcat>
		switch(portStatus[i]){
 8003e18:	4b70      	ldr	r3, [pc, #448]	; (8003fdc <DisplayModuleStatus+0x294>)
 8003e1a:	5d1b      	ldrb	r3, [r3, r4]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d8e9      	bhi.n	8003df4 <DisplayModuleStatus+0xac>
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4a6f      	ldr	r2, [pc, #444]	; (8003fe0 <DisplayModuleStatus+0x298>)
 8003e24:	58d3      	ldr	r3, [r2, r3]
 8003e26:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8003e28:	4960      	ldr	r1, [pc, #384]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e2a:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <DisplayModuleStatus+0x29c>)
 8003e2c:	000a      	movs	r2, r1
 8003e2e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e30:	c223      	stmia	r2!, {r0, r1, r5}
 8003e32:	cb03      	ldmia	r3!, {r0, r1}
 8003e34:	c203      	stmia	r2!, {r0, r1}
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	7013      	strb	r3, [r2, #0]
				break;
 8003e3a:	e7db      	b.n	8003df4 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Streaming\n\r");
 8003e3c:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <DisplayModuleStatus+0x2a0>)
 8003e40:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e42:	c223      	stmia	r2!, {r0, r1, r5}
				break;
 8003e44:	e7d6      	b.n	8003df4 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8003e46:	4959      	ldr	r1, [pc, #356]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e48:	4b68      	ldr	r3, [pc, #416]	; (8003fec <DisplayModuleStatus+0x2a4>)
 8003e4a:	000a      	movs	r2, r1
 8003e4c:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e4e:	c223      	stmia	r2!, {r0, r1, r5}
 8003e50:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e52:	c223      	stmia	r2!, {r0, r1, r5}
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	8013      	strh	r3, [r2, #0]
				break;
 8003e58:	e7cc      	b.n	8003df4 <DisplayModuleStatus+0xac>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8003e5a:	4954      	ldr	r1, [pc, #336]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e5c:	4b64      	ldr	r3, [pc, #400]	; (8003ff0 <DisplayModuleStatus+0x2a8>)
 8003e5e:	000a      	movs	r2, r1
 8003e60:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e62:	c223      	stmia	r2!, {r0, r1, r5}
 8003e64:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003e66:	c223      	stmia	r2!, {r0, r1, r5}
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	6011      	str	r1, [r2, #0]
 8003e6c:	8899      	ldrh	r1, [r3, #4]
 8003e6e:	8091      	strh	r1, [r2, #4]
 8003e70:	799b      	ldrb	r3, [r3, #6]
 8003e72:	7193      	strb	r3, [r2, #6]
				break;
 8003e74:	e7be      	b.n	8003df4 <DisplayModuleStatus+0xac>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8003e76:	494d      	ldr	r1, [pc, #308]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e78:	4b5e      	ldr	r3, [pc, #376]	; (8003ff4 <DisplayModuleStatus+0x2ac>)
 8003e7a:	000a      	movs	r2, r1
 8003e7c:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e7e:	c231      	stmia	r2!, {r0, r4, r5}
 8003e80:	cb31      	ldmia	r3!, {r0, r4, r5}
 8003e82:	c231      	stmia	r2!, {r0, r4, r5}
	strcat((char* )pcOutputString,pcUserMessage);
 8003e84:	0030      	movs	r0, r6
 8003e86:	f00f ff29 	bl	8013cdc <strcat>
	for(char i =1; i <= 6; i++){
 8003e8a:	2401      	movs	r4, #1
 8003e8c:	e00b      	b.n	8003ea6 <DisplayModuleStatus+0x15e>
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8003e8e:	4d47      	ldr	r5, [pc, #284]	; (8003fac <DisplayModuleStatus+0x264>)
 8003e90:	0022      	movs	r2, r4
 8003e92:	4959      	ldr	r1, [pc, #356]	; (8003ff8 <DisplayModuleStatus+0x2b0>)
 8003e94:	0028      	movs	r0, r5
 8003e96:	f00f ff01 	bl	8013c9c <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8003e9a:	0029      	movs	r1, r5
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	f00f ff1d 	bl	8013cdc <strcat>
	for(char i =1; i <= 6; i++){
 8003ea2:	3401      	adds	r4, #1
 8003ea4:	b2e4      	uxtb	r4, r4
 8003ea6:	2c06      	cmp	r4, #6
 8003ea8:	d822      	bhi.n	8003ef0 <DisplayModuleStatus+0x1a8>
		if(streamDMA[i - 1].Instance == 0){
 8003eaa:	1e65      	subs	r5, r4, #1
 8003eac:	00eb      	lsls	r3, r5, #3
 8003eae:	1b5b      	subs	r3, r3, r5
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <DisplayModuleStatus+0x2b4>)
 8003eb4:	589b      	ldr	r3, [r3, r2]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0e9      	beq.n	8003e8e <DisplayModuleStatus+0x146>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8003eba:	00eb      	lsls	r3, r5, #3
 8003ebc:	1b5b      	subs	r3, r3, r5
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4a4e      	ldr	r2, [pc, #312]	; (8003ffc <DisplayModuleStatus+0x2b4>)
 8003ec2:	18d3      	adds	r3, r2, r3
 8003ec4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ec6:	f006 f977 	bl	800a1b8 <GetPort>
 8003eca:	0007      	movs	r7, r0
 8003ecc:	00ad      	lsls	r5, r5, #2
 8003ece:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <DisplayModuleStatus+0x2b8>)
 8003ed0:	58e8      	ldr	r0, [r5, r3]
 8003ed2:	f006 f971 	bl	800a1b8 <GetPort>
 8003ed6:	4d35      	ldr	r5, [pc, #212]	; (8003fac <DisplayModuleStatus+0x264>)
 8003ed8:	9000      	str	r0, [sp, #0]
 8003eda:	003b      	movs	r3, r7
 8003edc:	0022      	movs	r2, r4
 8003ede:	4949      	ldr	r1, [pc, #292]	; (8004004 <DisplayModuleStatus+0x2bc>)
 8003ee0:	0028      	movs	r0, r5
 8003ee2:	f00f fedb 	bl	8013c9c <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8003ee6:	0029      	movs	r1, r5
 8003ee8:	0030      	movs	r0, r6
 8003eea:	f00f fef7 	bl	8013cdc <strcat>
 8003eee:	e7d8      	b.n	8003ea2 <DisplayModuleStatus+0x15a>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 8003ef0:	0030      	movs	r0, r6
 8003ef2:	f7fc f911 	bl	8000118 <strlen>
 8003ef6:	1830      	adds	r0, r6, r0
 8003ef8:	2203      	movs	r2, #3
 8003efa:	4943      	ldr	r1, [pc, #268]	; (8004008 <DisplayModuleStatus+0x2c0>)
 8003efc:	f00f f90c 	bl	8013118 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 8003f00:	0030      	movs	r0, r6
 8003f02:	f7fc f909 	bl	8000118 <strlen>
 8003f06:	1830      	adds	r0, r6, r0
 8003f08:	221d      	movs	r2, #29
 8003f0a:	4940      	ldr	r1, [pc, #256]	; (800400c <DisplayModuleStatus+0x2c4>)
 8003f0c:	f00f f904 	bl	8013118 <memcpy>
	temp =strlen((char* )pcOutputString);
 8003f10:	0030      	movs	r0, r6
 8003f12:	f7fc f901 	bl	8000118 <strlen>
 8003f16:	0005      	movs	r5, r0
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8003f18:	2401      	movs	r4, #1
 8003f1a:	e00c      	b.n	8003f36 <DisplayModuleStatus+0x1ee>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
		{
			sprintf(pcUserMessage,"P%d ",p);
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <DisplayModuleStatus+0x264>)
 8003f1e:	4698      	mov	r8, r3
 8003f20:	0022      	movs	r2, r4
 8003f22:	493b      	ldr	r1, [pc, #236]	; (8004010 <DisplayModuleStatus+0x2c8>)
 8003f24:	0018      	movs	r0, r3
 8003f26:	f00f feb9 	bl	8013c9c <siprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	0030      	movs	r0, r6
 8003f2e:	f00f fed5 	bl	8013cdc <strcat>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8003f32:	3401      	adds	r4, #1
 8003f34:	b2e4      	uxtb	r4, r4
 8003f36:	2c03      	cmp	r4, #3
 8003f38:	d80c      	bhi.n	8003f54 <DisplayModuleStatus+0x20c>
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <DisplayModuleStatus+0x260>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4a34      	ldr	r2, [pc, #208]	; (8004014 <DisplayModuleStatus+0x2cc>)
 8003f44:	5a9a      	ldrh	r2, [r3, r2]
 8003f46:	1e61      	subs	r1, r4, #1
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	410b      	asrs	r3, r1
 8003f4e:	4213      	tst	r3, r2
 8003f50:	d0ef      	beq.n	8003f32 <DisplayModuleStatus+0x1ea>
 8003f52:	e7e3      	b.n	8003f1c <DisplayModuleStatus+0x1d4>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8003f54:	0030      	movs	r0, r6
 8003f56:	f7fc f8df 	bl	8000118 <strlen>
 8003f5a:	042d      	lsls	r5, r5, #16
 8003f5c:	0c2d      	lsrs	r5, r5, #16
 8003f5e:	42a8      	cmp	r0, r5
 8003f60:	d00f      	beq.n	8003f82 <DisplayModuleStatus+0x23a>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8003f62:	0030      	movs	r0, r6
 8003f64:	f7fc f8d8 	bl	8000118 <strlen>
 8003f68:	1830      	adds	r0, r6, r0
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	4926      	ldr	r1, [pc, #152]	; (8004008 <DisplayModuleStatus+0x2c0>)
 8003f6e:	f00f f8d3 	bl	8013118 <memcpy>
	
	/* Display output */
	if(port)
 8003f72:	464b      	mov	r3, r9
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <DisplayModuleStatus+0x246>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 8003f78:	b003      	add	sp, #12
 8003f7a:	bcc0      	pop	{r6, r7}
 8003f7c:	46b9      	mov	r9, r7
 8003f7e:	46b0      	mov	r8, r6
 8003f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8003f82:	1830      	adds	r0, r6, r0
 8003f84:	2205      	movs	r2, #5
 8003f86:	4924      	ldr	r1, [pc, #144]	; (8004018 <DisplayModuleStatus+0x2d0>)
 8003f88:	f00f f8c6 	bl	8013118 <memcpy>
 8003f8c:	e7e9      	b.n	8003f62 <DisplayModuleStatus+0x21a>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8003f8e:	0030      	movs	r0, r6
 8003f90:	f7fc f8c2 	bl	8000118 <strlen>
 8003f94:	b282      	uxth	r2, r0
 8003f96:	2301      	movs	r3, #1
 8003f98:	425b      	negs	r3, r3
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	3333      	adds	r3, #51	; 0x33
 8003f9e:	0031      	movs	r1, r6
 8003fa0:	4648      	mov	r0, r9
 8003fa2:	f009 fea5 	bl	800dcf0 <writePxMutex>
}
 8003fa6:	e7e7      	b.n	8003f78 <DisplayModuleStatus+0x230>
 8003fa8:	20000084 	.word	0x20000084
 8003fac:	20000864 	.word	0x20000864
 8003fb0:	08017b44 	.word	0x08017b44
 8003fb4:	2000066e 	.word	0x2000066e
 8003fb8:	08017b60 	.word	0x08017b60
 8003fbc:	08017b7c 	.word	0x08017b7c
 8003fc0:	08017b9c 	.word	0x08017b9c
 8003fc4:	08017ba8 	.word	0x08017ba8
 8003fc8:	08017bc0 	.word	0x08017bc0
 8003fcc:	08017bcc 	.word	0x08017bcc
 8003fd0:	08017be8 	.word	0x08017be8
 8003fd4:	08017c04 	.word	0x08017c04
 8003fd8:	08017bfc 	.word	0x08017bfc
 8003fdc:	200008b4 	.word	0x200008b4
 8003fe0:	08017d00 	.word	0x08017d00
 8003fe4:	08017c0c 	.word	0x08017c0c
 8003fe8:	08017c24 	.word	0x08017c24
 8003fec:	08017c30 	.word	0x08017c30
 8003ff0:	08017c4c 	.word	0x08017c4c
 8003ff4:	08017c6c 	.word	0x08017c6c
 8003ff8:	08017c84 	.word	0x08017c84
 8003ffc:	200011fc 	.word	0x200011fc
 8004000:	20000ce8 	.word	0x20000ce8
 8004004:	08017ca0 	.word	0x08017ca0
 8004008:	08017bf8 	.word	0x08017bf8
 800400c:	08017cd0 	.word	0x08017cd0
 8004010:	08017cf0 	.word	0x08017cf0
 8004014:	20005c48 	.word	0x20005c48
 8004018:	08017cf8 	.word	0x08017cf8

0800401c <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004020:	4929      	ldr	r1, [pc, #164]	; (80040c8 <GetID+0xac>)
 8004022:	f7fc f86f 	bl	8000104 <strcmp>
 8004026:	2800      	cmp	r0, #0
 8004028:	d00a      	beq.n	8004040 <GetID+0x24>
		return myID;
	else if(!strcmp(string,"all"))
 800402a:	4928      	ldr	r1, [pc, #160]	; (80040cc <GetID+0xb0>)
 800402c:	0028      	movs	r0, r5
 800402e:	f7fc f869 	bl	8000104 <strcmp>
 8004032:	2800      	cmp	r0, #0
 8004034:	d046      	beq.n	80040c4 <GetID+0xa8>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004036:	782e      	ldrb	r6, [r5, #0]
 8004038:	2e23      	cmp	r6, #35	; 0x23
 800403a:	d004      	beq.n	8004046 <GetID+0x2a>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800403c:	2400      	movs	r4, #0
 800403e:	e018      	b.n	8004072 <GetID+0x56>
		return myID;
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <GetID+0xb4>)
 8004042:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004044:	bd70      	pop	{r4, r5, r6, pc}
		id =atol(string + 1);
 8004046:	1c68      	adds	r0, r5, #1
 8004048:	f00f f819 	bl	801307e <atol>
 800404c:	b2c0      	uxtb	r0, r0
		if(id > 0 && id <= N)
 800404e:	2800      	cmp	r0, #0
 8004050:	d003      	beq.n	800405a <GetID+0x3e>
 8004052:	4b20      	ldr	r3, [pc, #128]	; (80040d4 <GetID+0xb8>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4283      	cmp	r3, r0
 8004058:	d205      	bcs.n	8004066 <GetID+0x4a>
		else if(id == myID)
 800405a:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <GetID+0xb4>)
 800405c:	781c      	ldrb	r4, [r3, #0]
 800405e:	4284      	cmp	r4, r0
 8004060:	d003      	beq.n	800406a <GetID+0x4e>
			return BOS_ERR_WrongID;
 8004062:	2066      	movs	r0, #102	; 0x66
 8004064:	e7ee      	b.n	8004044 <GetID+0x28>
			return id;
 8004066:	b200      	sxth	r0, r0
 8004068:	e7ec      	b.n	8004044 <GetID+0x28>
			return myID;
 800406a:	b220      	sxth	r0, r4
 800406c:	e7ea      	b.n	8004044 <GetID+0x28>
		for(i =0; i < N; i++){
 800406e:	3401      	adds	r4, #1
 8004070:	b2e4      	uxtb	r4, r4
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <GetID+0xb8>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	42a3      	cmp	r3, r4
 8004078:	d90d      	bls.n	8004096 <GetID+0x7a>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800407a:	00a1      	lsls	r1, r4, #2
 800407c:	1909      	adds	r1, r1, r4
 800407e:	0049      	lsls	r1, r1, #1
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <GetID+0xbc>)
 8004082:	1859      	adds	r1, r3, r1
 8004084:	0028      	movs	r0, r5
 8004086:	f7fc f83d 	bl	8000104 <strcmp>
 800408a:	2800      	cmp	r0, #0
 800408c:	d1ef      	bne.n	800406e <GetID+0x52>
 800408e:	2e00      	cmp	r6, #0
 8004090:	d0ed      	beq.n	800406e <GetID+0x52>
				return (i);
 8004092:	b220      	sxth	r0, r4
 8004094:	e7d6      	b.n	8004044 <GetID+0x28>
		for(i =0; i < MaxNumOfGroups; i++){
 8004096:	2600      	movs	r6, #0
 8004098:	2e09      	cmp	r6, #9
 800409a:	d811      	bhi.n	80040c0 <GetID+0xa4>
			if(!strcmp(string,groupAlias[i]))
 800409c:	00b1      	lsls	r1, r6, #2
 800409e:	1989      	adds	r1, r1, r6
 80040a0:	0049      	lsls	r1, r1, #1
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <GetID+0xc0>)
 80040a4:	1859      	adds	r1, r3, r1
 80040a6:	0028      	movs	r0, r5
 80040a8:	f7fc f82c 	bl	8000104 <strcmp>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d002      	beq.n	80040b6 <GetID+0x9a>
		for(i =0; i < MaxNumOfGroups; i++){
 80040b0:	3601      	adds	r6, #1
 80040b2:	b2f6      	uxtb	r6, r6
 80040b4:	e7f0      	b.n	8004098 <GetID+0x7c>
				return (BOS_MULTICAST | (i << 8));
 80040b6:	0234      	lsls	r4, r6, #8
 80040b8:	20fe      	movs	r0, #254	; 0xfe
 80040ba:	4320      	orrs	r0, r4
 80040bc:	b200      	sxth	r0, r0
 80040be:	e7c1      	b.n	8004044 <GetID+0x28>
		return BOS_ERR_WrongName;
 80040c0:	2064      	movs	r0, #100	; 0x64
 80040c2:	e7bf      	b.n	8004044 <GetID+0x28>
		return BOS_BROADCAST;
 80040c4:	20ff      	movs	r0, #255	; 0xff
 80040c6:	e7bd      	b.n	8004044 <GetID+0x28>
 80040c8:	08017d14 	.word	0x08017d14
 80040cc:	08017d18 	.word	0x08017d18
 80040d0:	20000084 	.word	0x20000084
 80040d4:	20000030 	.word	0x20000030
 80040d8:	20000838 	.word	0x20000838
 80040dc:	20000760 	.word	0x20000760

080040e0 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	0004      	movs	r4, r0
 80040e4:	000e      	movs	r6, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
 80040e6:	2500      	movs	r5, #0
 80040e8:	2d03      	cmp	r5, #3
 80040ea:	dc09      	bgt.n	8004100 <NameModule+0x20>
		if(!strcmp(alias,BOSkeywords[i]))
 80040ec:	00ab      	lsls	r3, r5, #2
 80040ee:	4929      	ldr	r1, [pc, #164]	; (8004194 <NameModule+0xb4>)
 80040f0:	18c9      	adds	r1, r1, r3
 80040f2:	0030      	movs	r0, r6
 80040f4:	f7fc f806 	bl	8000104 <strcmp>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d043      	beq.n	8004184 <NameModule+0xa4>
	for(i =0; i < NumOfKeywords; i++){
 80040fc:	3501      	adds	r5, #1
 80040fe:	e7f3      	b.n	80040e8 <NameModule+0x8>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 8004100:	2501      	movs	r5, #1
 8004102:	4b25      	ldr	r3, [pc, #148]	; (8004198 <NameModule+0xb8>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	42ab      	cmp	r3, r5
 8004108:	dd0b      	ble.n	8004122 <NameModule+0x42>
		if(!strcmp(alias,moduleAlias[i]))
 800410a:	00a9      	lsls	r1, r5, #2
 800410c:	1949      	adds	r1, r1, r5
 800410e:	0049      	lsls	r1, r1, #1
 8004110:	4b22      	ldr	r3, [pc, #136]	; (800419c <NameModule+0xbc>)
 8004112:	1859      	adds	r1, r3, r1
 8004114:	0030      	movs	r0, r6
 8004116:	f7fb fff5 	bl	8000104 <strcmp>
 800411a:	2800      	cmp	r0, #0
 800411c:	d034      	beq.n	8004188 <NameModule+0xa8>
	for(i =1; i < N; i++){
 800411e:	3501      	adds	r5, #1
 8004120:	e7ef      	b.n	8004102 <NameModule+0x22>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
 8004122:	2500      	movs	r5, #0
 8004124:	2d09      	cmp	r5, #9
 8004126:	dc0b      	bgt.n	8004140 <NameModule+0x60>
		if(!strcmp(alias,groupAlias[i]))
 8004128:	00a9      	lsls	r1, r5, #2
 800412a:	1949      	adds	r1, r1, r5
 800412c:	0049      	lsls	r1, r1, #1
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <NameModule+0xc0>)
 8004130:	1859      	adds	r1, r3, r1
 8004132:	0030      	movs	r0, r6
 8004134:	f7fb ffe6 	bl	8000104 <strcmp>
 8004138:	2800      	cmp	r0, #0
 800413a:	d027      	beq.n	800418c <NameModule+0xac>
	for(i =0; i < MaxNumOfGroups; i++){
 800413c:	3501      	adds	r5, #1
 800413e:	e7f1      	b.n	8004124 <NameModule+0x44>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004140:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <NameModule+0xc4>)
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <NameModule+0xc8>)
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <NameModule+0xc4>)
 8004148:	681d      	ldr	r5, [r3, #0]
 800414a:	2d00      	cmp	r5, #0
 800414c:	d00f      	beq.n	800416e <NameModule+0x8e>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800414e:	682b      	ldr	r3, [r5, #0]
 8004150:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004152:	0038      	movs	r0, r7
 8004154:	f7fb ffe0 	bl	8000118 <strlen>
 8004158:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800415a:	0039      	movs	r1, r7
 800415c:	0030      	movs	r0, r6
 800415e:	f00f fde0 	bl	8013d22 <strncmp>
 8004162:	2800      	cmp	r0, #0
 8004164:	d014      	beq.n	8004190 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004166:	686a      	ldr	r2, [r5, #4]
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <NameModule+0xc4>)
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e7eb      	b.n	8004146 <NameModule+0x66>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 800416e:	00a0      	lsls	r0, r4, #2
 8004170:	1900      	adds	r0, r0, r4
 8004172:	0040      	lsls	r0, r0, #1
 8004174:	4c09      	ldr	r4, [pc, #36]	; (800419c <NameModule+0xbc>)
 8004176:	1820      	adds	r0, r4, r0
 8004178:	0031      	movs	r1, r6
 800417a:	f00f fdca 	bl	8013d12 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 800417e:	f7ff f8fb 	bl	8003378 <SaveEEalias>
	
	return result;
 8004182:	e002      	b.n	800418a <NameModule+0xaa>
			return BOS_ERR_Keyword;
 8004184:	2006      	movs	r0, #6
 8004186:	e000      	b.n	800418a <NameModule+0xaa>
			return BOS_ERR_ExistingAlias;
 8004188:	2007      	movs	r0, #7
}
 800418a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 800418c:	2007      	movs	r0, #7
 800418e:	e7fc      	b.n	800418a <NameModule+0xaa>
			return BOS_ERR_ExistingCmd;
 8004190:	2008      	movs	r0, #8
 8004192:	e7fa      	b.n	800418a <NameModule+0xaa>
 8004194:	080181dc 	.word	0x080181dc
 8004198:	20000030 	.word	0x20000030
 800419c:	20000838 	.word	0x20000838
 80041a0:	20000760 	.word	0x20000760
 80041a4:	200008b8 	.word	0x200008b8
 80041a8:	20000110 	.word	0x20000110

080041ac <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	0004      	movs	r4, r0
 80041b0:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80041b2:	2500      	movs	r5, #0
 80041b4:	2d09      	cmp	r5, #9
 80041b6:	dc14      	bgt.n	80041e2 <AddModuleToGroup+0x36>
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80041b8:	00a9      	lsls	r1, r5, #2
 80041ba:	1949      	adds	r1, r1, r5
 80041bc:	0049      	lsls	r1, r1, #1
 80041be:	4b34      	ldr	r3, [pc, #208]	; (8004290 <AddModuleToGroup+0xe4>)
 80041c0:	1859      	adds	r1, r3, r1
 80041c2:	0030      	movs	r0, r6
 80041c4:	f7fb ff9e 	bl	8000104 <strcmp>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d001      	beq.n	80041d0 <AddModuleToGroup+0x24>
	for(i =0; i < MaxNumOfGroups; i++){
 80041cc:	3501      	adds	r5, #1
 80041ce:	e7f1      	b.n	80041b4 <AddModuleToGroup+0x8>
			/* 1. Add this module to the group */
			groupModules[module - 1] |=(0x0001 << i);
 80041d0:	3c01      	subs	r4, #1
 80041d2:	2201      	movs	r2, #1
 80041d4:	40aa      	lsls	r2, r5
 80041d6:	492f      	ldr	r1, [pc, #188]	; (8004294 <AddModuleToGroup+0xe8>)
 80041d8:	0064      	lsls	r4, r4, #1
 80041da:	5a63      	ldrh	r3, [r4, r1]
 80041dc:	4313      	orrs	r3, r2
 80041de:	5263      	strh	r3, [r4, r1]
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
}
 80041e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(j =0; j < NumOfKeywords; j++){
 80041e2:	2500      	movs	r5, #0
 80041e4:	2d03      	cmp	r5, #3
 80041e6:	dc09      	bgt.n	80041fc <AddModuleToGroup+0x50>
		if(!strcmp(group,BOSkeywords[j]))
 80041e8:	00ab      	lsls	r3, r5, #2
 80041ea:	492b      	ldr	r1, [pc, #172]	; (8004298 <AddModuleToGroup+0xec>)
 80041ec:	18c9      	adds	r1, r1, r3
 80041ee:	0030      	movs	r0, r6
 80041f0:	f7fb ff88 	bl	8000104 <strcmp>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d045      	beq.n	8004284 <AddModuleToGroup+0xd8>
	for(j =0; j < NumOfKeywords; j++){
 80041f8:	3501      	adds	r5, #1
 80041fa:	e7f3      	b.n	80041e4 <AddModuleToGroup+0x38>
	for(j =1; j < N; j++){
 80041fc:	2501      	movs	r5, #1
 80041fe:	4b27      	ldr	r3, [pc, #156]	; (800429c <AddModuleToGroup+0xf0>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	42ab      	cmp	r3, r5
 8004204:	dd0b      	ble.n	800421e <AddModuleToGroup+0x72>
		if(!strcmp(group,moduleAlias[j]))
 8004206:	00a9      	lsls	r1, r5, #2
 8004208:	1949      	adds	r1, r1, r5
 800420a:	0049      	lsls	r1, r1, #1
 800420c:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <AddModuleToGroup+0xf4>)
 800420e:	1859      	adds	r1, r3, r1
 8004210:	0030      	movs	r0, r6
 8004212:	f7fb ff77 	bl	8000104 <strcmp>
 8004216:	2800      	cmp	r0, #0
 8004218:	d036      	beq.n	8004288 <AddModuleToGroup+0xdc>
	for(j =1; j < N; j++){
 800421a:	3501      	adds	r5, #1
 800421c:	e7ef      	b.n	80041fe <AddModuleToGroup+0x52>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800421e:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <AddModuleToGroup+0xf8>)
 8004220:	4a21      	ldr	r2, [pc, #132]	; (80042a8 <AddModuleToGroup+0xfc>)
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4b1f      	ldr	r3, [pc, #124]	; (80042a4 <AddModuleToGroup+0xf8>)
 8004226:	681d      	ldr	r5, [r3, #0]
 8004228:	2d00      	cmp	r5, #0
 800422a:	d020      	beq.n	800426e <AddModuleToGroup+0xc2>
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004230:	0038      	movs	r0, r7
 8004232:	f7fb ff71 	bl	8000118 <strlen>
 8004236:	0002      	movs	r2, r0
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004238:	0039      	movs	r1, r7
 800423a:	0030      	movs	r0, r6
 800423c:	f00f fd71 	bl	8013d22 <strncmp>
 8004240:	2800      	cmp	r0, #0
 8004242:	d023      	beq.n	800428c <AddModuleToGroup+0xe0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004244:	686a      	ldr	r2, [r5, #4]
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <AddModuleToGroup+0xf8>)
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e7eb      	b.n	8004224 <AddModuleToGroup+0x78>
			strcpy(groupAlias[i],group);
 800424c:	00a8      	lsls	r0, r5, #2
 800424e:	1940      	adds	r0, r0, r5
 8004250:	0040      	lsls	r0, r0, #1
 8004252:	1810      	adds	r0, r2, r0
 8004254:	0031      	movs	r1, r6
 8004256:	f00f fd5c 	bl	8013d12 <strcpy>
	groupModules[module - 1] |=(0x0001 << i);
 800425a:	3c01      	subs	r4, #1
 800425c:	2201      	movs	r2, #1
 800425e:	40aa      	lsls	r2, r5
 8004260:	490c      	ldr	r1, [pc, #48]	; (8004294 <AddModuleToGroup+0xe8>)
 8004262:	0064      	lsls	r4, r4, #1
 8004264:	5a63      	ldrh	r3, [r4, r1]
 8004266:	4313      	orrs	r3, r2
 8004268:	5263      	strh	r3, [r4, r1]
	return result;
 800426a:	2000      	movs	r0, #0
 800426c:	e7b8      	b.n	80041e0 <AddModuleToGroup+0x34>
	for(i =0; i < MaxNumOfGroups; i++){
 800426e:	2d09      	cmp	r5, #9
 8004270:	dcf3      	bgt.n	800425a <AddModuleToGroup+0xae>
		if(!groupAlias[i][0]){
 8004272:	00ab      	lsls	r3, r5, #2
 8004274:	195b      	adds	r3, r3, r5
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4a05      	ldr	r2, [pc, #20]	; (8004290 <AddModuleToGroup+0xe4>)
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0e5      	beq.n	800424c <AddModuleToGroup+0xa0>
	for(i =0; i < MaxNumOfGroups; i++){
 8004280:	3501      	adds	r5, #1
 8004282:	e7f4      	b.n	800426e <AddModuleToGroup+0xc2>
			return BOS_ERR_Keyword;
 8004284:	2006      	movs	r0, #6
 8004286:	e7ab      	b.n	80041e0 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingAlias;
 8004288:	2007      	movs	r0, #7
 800428a:	e7a9      	b.n	80041e0 <AddModuleToGroup+0x34>
			return BOS_ERR_ExistingCmd;
 800428c:	2008      	movs	r0, #8
 800428e:	e7a7      	b.n	80041e0 <AddModuleToGroup+0x34>
 8004290:	20000760 	.word	0x20000760
 8004294:	200007c4 	.word	0x200007c4
 8004298:	080181dc 	.word	0x080181dc
 800429c:	20000030 	.word	0x20000030
 80042a0:	20000838 	.word	0x20000838
 80042a4:	200008bc 	.word	0x200008bc
 80042a8:	20000110 	.word	0x20000110

080042ac <AddBOSvar>:

/*-----------------------------------------------------------*/

/* --- Assign an index to a new BOS variable. BOS variables must be global or static to ensure we don't refernce a stack address.
 */
uint8_t AddBOSvar(varFormat_t format,uint32_t address){
 80042ac:	b530      	push	{r4, r5, lr}
	for(uint8_t v =0; v < MAX_BOS_VARS; v++){
 80042ae:	2300      	movs	r3, #0
 80042b0:	e001      	b.n	80042b6 <AddBOSvar+0xa>
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b1d      	cmp	r3, #29
 80042b8:	d80b      	bhi.n	80042d2 <AddBOSvar+0x26>
		if((BOS_var_reg[v] & 0x000F) == 0)		// Index not assigned yet
 80042ba:	009a      	lsls	r2, r3, #2
 80042bc:	4c06      	ldr	r4, [pc, #24]	; (80042d8 <AddBOSvar+0x2c>)
 80042be:	5912      	ldr	r2, [r2, r4]
 80042c0:	0712      	lsls	r2, r2, #28
 80042c2:	d1f6      	bne.n	80042b2 <AddBOSvar+0x6>
		{
			BOS_var_reg[v] =format + ((address - SRAM_BASE) << 16);
 80042c4:	0409      	lsls	r1, r1, #16
 80042c6:	1840      	adds	r0, r0, r1
 80042c8:	009d      	lsls	r5, r3, #2
 80042ca:	5128      	str	r0, [r5, r4]
			return (v + 1);
 80042cc:	3301      	adds	r3, #1
 80042ce:	b2d8      	uxtb	r0, r3
		}
	}
	
	return 0;			// Memory full
}
 80042d0:	bd30      	pop	{r4, r5, pc}
	return 0;			// Memory full
 80042d2:	2000      	movs	r0, #0
 80042d4:	e7fc      	b.n	80042d0 <AddBOSvar+0x24>
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	2000571c 	.word	0x2000571c

080042dc <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80042dc:	b530      	push	{r4, r5, lr}
 80042de:	b083      	sub	sp, #12
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80042e0:	201e      	movs	r0, #30
 80042e2:	f00e fef7 	bl	80130d4 <malloc>
 80042e6:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80042e8:	221e      	movs	r2, #30
 80042ea:	2100      	movs	r1, #0
 80042ec:	f00e ff1d 	bl	801312a <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80042f0:	4908      	ldr	r1, [pc, #32]	; (8004314 <GetDateString+0x38>)
 80042f2:	7d0a      	ldrb	r2, [r1, #20]
 80042f4:	3a01      	subs	r2, #1
 80042f6:	7d8b      	ldrb	r3, [r1, #22]
 80042f8:	7d48      	ldrb	r0, [r1, #21]
 80042fa:	8b09      	ldrh	r1, [r1, #24]
 80042fc:	0092      	lsls	r2, r2, #2
 80042fe:	4d06      	ldr	r5, [pc, #24]	; (8004318 <GetDateString+0x3c>)
 8004300:	5952      	ldr	r2, [r2, r5]
 8004302:	9101      	str	r1, [sp, #4]
 8004304:	9000      	str	r0, [sp, #0]
 8004306:	4905      	ldr	r1, [pc, #20]	; (800431c <GetDateString+0x40>)
 8004308:	0020      	movs	r0, r4
 800430a:	f00f fcc7 	bl	8013c9c <siprintf>
	return buffer;
}
 800430e:	0020      	movs	r0, r4
 8004310:	b003      	add	sp, #12
 8004312:	bd30      	pop	{r4, r5, pc}
 8004314:	20005794 	.word	0x20005794
 8004318:	080182c0 	.word	0x080182c0
 800431c:	080181ec 	.word	0x080181ec

08004320 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004320:	b500      	push	{lr}
 8004322:	b085      	sub	sp, #20
 8004324:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <Bridge+0x24>)
 8004328:	7819      	ldrb	r1, [r3, #0]
 800432a:	2301      	movs	r3, #1
 800432c:	9303      	str	r3, [sp, #12]
 800432e:	3b02      	subs	r3, #2
 8004330:	9302      	str	r3, [sp, #8]
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	3303      	adds	r3, #3
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	000b      	movs	r3, r1
 800433a:	f003 fda3 	bl	8007e84 <StartScastDMAStream>
}
 800433e:	b005      	add	sp, #20
 8004340:	bd00      	pop	{pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	20000084 	.word	0x20000084

08004348 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004348:	b530      	push	{r4, r5, lr}
 800434a:	b087      	sub	sp, #28
 800434c:	0005      	movs	r5, r0
 800434e:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004350:	2300      	movs	r3, #0
 8004352:	9304      	str	r3, [sp, #16]
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	9301      	str	r3, [sp, #4]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2200      	movs	r2, #0
 800435e:	2100      	movs	r1, #0
 8004360:	2000      	movs	r0, #0
 8004362:	f7ff f839 	bl	80033d8 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004366:	1e6a      	subs	r2, r5, #1
 8004368:	00d3      	lsls	r3, r2, #3
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <Unbridge+0x7c>)
 8004370:	589a      	ldr	r2, [r3, r2]
 8004372:	2a00      	cmp	r2, #0
 8004374:	d007      	beq.n	8004386 <Unbridge+0x3e>
 8004376:	1e61      	subs	r1, r4, #1
 8004378:	00cb      	lsls	r3, r1, #3
 800437a:	1a5b      	subs	r3, r3, r1
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4911      	ldr	r1, [pc, #68]	; (80043c4 <Unbridge+0x7c>)
 8004380:	585b      	ldr	r3, [r3, r1]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10f      	bne.n	80043a6 <Unbridge+0x5e>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
 8004386:	2a00      	cmp	r2, #0
 8004388:	d115      	bne.n	80043b6 <Unbridge+0x6e>
		SwitchStreamDMAToMsg(port1);
		return BOS_OK;
	}
	else if(streamDMA[port2 - 1].Instance != 0){
 800438a:	1e62      	subs	r2, r4, #1
 800438c:	00d3      	lsls	r3, r2, #3
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <Unbridge+0x7c>)
 8004394:	589b      	ldr	r3, [r3, r2]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d012      	beq.n	80043c0 <Unbridge+0x78>
		SwitchStreamDMAToMsg(port2);
 800439a:	0020      	movs	r0, r4
 800439c:	f007 fa08 	bl	800b7b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80043a0:	2000      	movs	r0, #0
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80043a2:	b007      	add	sp, #28
 80043a4:	bd30      	pop	{r4, r5, pc}
		SwitchStreamDMAToMsg(port1);
 80043a6:	0028      	movs	r0, r5
 80043a8:	f007 fa02 	bl	800b7b0 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80043ac:	0020      	movs	r0, r4
 80043ae:	f007 f9ff 	bl	800b7b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80043b2:	2000      	movs	r0, #0
 80043b4:	e7f5      	b.n	80043a2 <Unbridge+0x5a>
		SwitchStreamDMAToMsg(port1);
 80043b6:	0028      	movs	r0, r5
 80043b8:	f007 f9fa 	bl	800b7b0 <SwitchStreamDMAToMsg>
		return BOS_OK;
 80043bc:	2000      	movs	r0, #0
 80043be:	e7f0      	b.n	80043a2 <Unbridge+0x5a>
		return BOS_ERR_WrongValue;
 80043c0:	2068      	movs	r0, #104	; 0x68
 80043c2:	e7ee      	b.n	80043a2 <Unbridge+0x5a>
 80043c4:	200011fc 	.word	0x200011fc

080043c8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80043c8:	b530      	push	{r4, r5, lr}
	for(int i =0; string[i]; i++){
 80043ca:	2200      	movs	r2, #0
 80043cc:	e001      	b.n	80043d2 <StringToLowerCase+0xa>
		string[i] =tolower(string[i]);
 80043ce:	7023      	strb	r3, [r4, #0]
	for(int i =0; string[i]; i++){
 80043d0:	3201      	adds	r2, #1
 80043d2:	1884      	adds	r4, r0, r2
 80043d4:	5c83      	ldrb	r3, [r0, r2]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <StringToLowerCase+0x22>
		string[i] =tolower(string[i]);
 80043da:	4904      	ldr	r1, [pc, #16]	; (80043ec <StringToLowerCase+0x24>)
 80043dc:	5ccd      	ldrb	r5, [r1, r3]
 80043de:	2103      	movs	r1, #3
 80043e0:	4029      	ands	r1, r5
 80043e2:	2901      	cmp	r1, #1
 80043e4:	d1f3      	bne.n	80043ce <StringToLowerCase+0x6>
 80043e6:	3320      	adds	r3, #32
 80043e8:	e7f1      	b.n	80043ce <StringToLowerCase+0x6>
	}
}
 80043ea:	bd30      	pop	{r4, r5, pc}
 80043ec:	0801aa61 	.word	0x0801aa61

080043f0 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	46ce      	mov	lr, r9
 80043f4:	4647      	mov	r7, r8
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b089      	sub	sp, #36	; 0x24
 80043fa:	0004      	movs	r4, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80043fc:	4bdb      	ldr	r3, [pc, #876]	; (800476c <ParseSnippetCondition+0x37c>)
 80043fe:	781d      	ldrb	r5, [r3, #0]
 8004400:	2d05      	cmp	r5, #5
 8004402:	d100      	bne.n	8004406 <ParseSnippetCondition+0x16>
 8004404:	e215      	b.n	8004832 <ParseSnippetCondition+0x442>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004406:	48da      	ldr	r0, [pc, #872]	; (8004770 <ParseSnippetCondition+0x380>)
 8004408:	00ab      	lsls	r3, r5, #2
 800440a:	195a      	adds	r2, r3, r5
 800440c:	0092      	lsls	r2, r2, #2
 800440e:	2100      	movs	r1, #0
 8004410:	5411      	strb	r1, [r2, r0]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004412:	1880      	adds	r0, r0, r2
 8004414:	7041      	strb	r1, [r0, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004416:	3002      	adds	r0, #2
 8004418:	2204      	movs	r2, #4
 800441a:	f00e fe86 	bl	801312a <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 800441e:	7823      	ldrb	r3, [r4, #0]
 8004420:	2b62      	cmp	r3, #98	; 0x62
 8004422:	d102      	bne.n	800442a <ParseSnippetCondition+0x3a>
 8004424:	78a3      	ldrb	r3, [r4, #2]
 8004426:	2b2e      	cmp	r3, #46	; 0x2e
 8004428:	d056      	beq.n	80044d8 <ParseSnippetCondition+0xe8>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800442a:	4dd2      	ldr	r5, [pc, #840]	; (8004774 <ParseSnippetCondition+0x384>)
 800442c:	0021      	movs	r1, r4
 800442e:	0028      	movs	r0, r5
 8004430:	f00f fc6f 	bl	8013d12 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004434:	4ed0      	ldr	r6, [pc, #832]	; (8004778 <ParseSnippetCondition+0x388>)
 8004436:	0031      	movs	r1, r6
 8004438:	0028      	movs	r0, r5
 800443a:	f010 fae1 	bl	8014a00 <strtok>
 800443e:	0004      	movs	r4, r0
		secondPart =strtok( NULL," ");
 8004440:	0031      	movs	r1, r6
 8004442:	2000      	movs	r0, #0
 8004444:	f010 fadc 	bl	8014a00 <strtok>
 8004448:	0005      	movs	r5, r0
		thirdPart =strtok( NULL," ");
 800444a:	0031      	movs	r1, r6
 800444c:	2000      	movs	r0, #0
 800444e:	f010 fad7 	bl	8014a00 <strtok>
 8004452:	0006      	movs	r6, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004454:	2c00      	cmp	r4, #0
 8004456:	d100      	bne.n	800445a <ParseSnippetCondition+0x6a>
 8004458:	e1ef      	b.n	800483a <ParseSnippetCondition+0x44a>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800445a:	0020      	movs	r0, r4
 800445c:	f7ff f8ce 	bl	80035fc <IsModuleParameter>
 8004460:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004462:	d002      	beq.n	800446a <ParseSnippetCondition+0x7a>
 8004464:	2d00      	cmp	r5, #0
 8004466:	d100      	bne.n	800446a <ParseSnippetCondition+0x7a>
 8004468:	e1b5      	b.n	80047d6 <ParseSnippetCondition+0x3e6>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
				
				++numOfRecordedSnippets;		// Record a successful Snippet	
				return BOS_OK;
			}
			else if(secondPart != NULL && thirdPart != NULL){
 800446a:	2d00      	cmp	r5, #0
 800446c:	d100      	bne.n	8004470 <ParseSnippetCondition+0x80>
 800446e:	e1e6      	b.n	800483e <ParseSnippetCondition+0x44e>
 8004470:	2e00      	cmp	r6, #0
 8004472:	d100      	bne.n	8004476 <ParseSnippetCondition+0x86>
 8004474:	e1e5      	b.n	8004842 <ParseSnippetCondition+0x452>
				modPar2 =IsModuleParameter(thirdPart);
 8004476:	0030      	movs	r0, r6
 8004478:	f7ff f8c0 	bl	80035fc <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 800447c:	2800      	cmp	r0, #0
 800447e:	d100      	bne.n	8004482 <ParseSnippetCondition+0x92>
 8004480:	e1ba      	b.n	80047f8 <ParseSnippetCondition+0x408>
				{
					// #4: Module parameter and parameter
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004482:	4bba      	ldr	r3, [pc, #744]	; (800476c <ParseSnippetCondition+0x37c>)
 8004484:	781e      	ldrb	r6, [r3, #0]
 8004486:	4aba      	ldr	r2, [pc, #744]	; (8004770 <ParseSnippetCondition+0x380>)
 8004488:	00b3      	lsls	r3, r6, #2
 800448a:	1999      	adds	r1, r3, r6
 800448c:	0089      	lsls	r1, r1, #2
 800448e:	2704      	movs	r7, #4
 8004490:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004492:	1999      	adds	r1, r3, r6
 8004494:	0089      	lsls	r1, r1, #2
 8004496:	1851      	adds	r1, r2, r1
 8004498:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 800449a:	71c8      	strb	r0, [r1, #7]
					// Extract the constant
					float constant =atof(thirdPart);
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
				}
				// Extract the math operator
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800449c:	4cb3      	ldr	r4, [pc, #716]	; (800476c <ParseSnippetCondition+0x37c>)
 800449e:	7826      	ldrb	r6, [r4, #0]
 80044a0:	0028      	movs	r0, r5
 80044a2:	f7ff f8c5 	bl	8003630 <IsMathOperator>
 80044a6:	4ab2      	ldr	r2, [pc, #712]	; (8004770 <ParseSnippetCondition+0x380>)
 80044a8:	00b3      	lsls	r3, r6, #2
 80044aa:	199b      	adds	r3, r3, r6
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	18d3      	adds	r3, r2, r3
 80044b0:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 80044b2:	7821      	ldrb	r1, [r4, #0]
 80044b4:	008b      	lsls	r3, r1, #2
 80044b6:	185b      	adds	r3, r3, r1
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	18d3      	adds	r3, r2, r3
 80044bc:	785b      	ldrb	r3, [r3, #1]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d100      	bne.n	80044c4 <ParseSnippetCondition+0xd4>
 80044c2:	e1c0      	b.n	8004846 <ParseSnippetCondition+0x456>
					return BOS_ERR_WrongParam;
				
				++numOfRecordedSnippets;		// Record a successful Snippet
 80044c4:	3101      	adds	r1, #1
 80044c6:	4ba9      	ldr	r3, [pc, #676]	; (800476c <ParseSnippetCondition+0x37c>)
 80044c8:	7019      	strb	r1, [r3, #0]
				return BOS_OK;
 80044ca:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80044cc:	0030      	movs	r0, r6
 80044ce:	b009      	add	sp, #36	; 0x24
 80044d0:	bcc0      	pop	{r6, r7}
 80044d2:	46b9      	mov	r9, r7
 80044d4:	46b0      	mov	r8, r6
 80044d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80044d8:	7867      	ldrb	r7, [r4, #1]
 80044da:	3f30      	subs	r7, #48	; 0x30
 80044dc:	b2ff      	uxtb	r7, r7
 80044de:	2f03      	cmp	r7, #3
 80044e0:	d900      	bls.n	80044e4 <ParseSnippetCondition+0xf4>
 80044e2:	e1a8      	b.n	8004836 <ParseSnippetCondition+0x446>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80044e4:	4aa2      	ldr	r2, [pc, #648]	; (8004770 <ParseSnippetCondition+0x380>)
 80044e6:	00ab      	lsls	r3, r5, #2
 80044e8:	1959      	adds	r1, r3, r5
 80044ea:	0089      	lsls	r1, r1, #2
 80044ec:	2001      	movs	r0, #1
 80044ee:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80044f0:	1853      	adds	r3, r2, r1
 80044f2:	2200      	movs	r2, #0
 80044f4:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80044f6:	709f      	strb	r7, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80044f8:	1ce6      	adds	r6, r4, #3
 80044fa:	3207      	adds	r2, #7
 80044fc:	499f      	ldr	r1, [pc, #636]	; (800477c <ParseSnippetCondition+0x38c>)
 80044fe:	0030      	movs	r0, r6
 8004500:	f00f fc0f 	bl	8013d22 <strncmp>
 8004504:	2800      	cmp	r0, #0
 8004506:	d124      	bne.n	8004552 <ParseSnippetCondition+0x162>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004508:	00ab      	lsls	r3, r5, #2
 800450a:	195d      	adds	r5, r3, r5
 800450c:	00ad      	lsls	r5, r5, #2
 800450e:	4b98      	ldr	r3, [pc, #608]	; (8004770 <ParseSnippetCondition+0x380>)
 8004510:	195d      	adds	r5, r3, r5
 8004512:	2305      	movs	r3, #5
 8004514:	70eb      	strb	r3, [r5, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004516:	00fa      	lsls	r2, r7, #3
 8004518:	19d2      	adds	r2, r2, r7
 800451a:	4b99      	ldr	r3, [pc, #612]	; (8004780 <ParseSnippetCondition+0x390>)
 800451c:	189b      	adds	r3, r3, r2
 800451e:	7a1b      	ldrb	r3, [r3, #8]
 8004520:	2201      	movs	r2, #1
 8004522:	0016      	movs	r6, r2
 8004524:	401e      	ands	r6, r3
 8004526:	421a      	tst	r2, r3
 8004528:	d005      	beq.n	8004536 <ParseSnippetCondition+0x146>
				status =BOS_OK;
 800452a:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 800452c:	4a8f      	ldr	r2, [pc, #572]	; (800476c <ParseSnippetCondition+0x37c>)
 800452e:	7813      	ldrb	r3, [r2, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	7013      	strb	r3, [r2, #0]
 8004534:	e7ca      	b.n	80044cc <ParseSnippetCondition+0xdc>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004536:	2301      	movs	r3, #1
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	2300      	movs	r3, #0
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	9303      	str	r3, [sp, #12]
 8004540:	9302      	str	r3, [sp, #8]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	2101      	movs	r1, #1
 800454a:	0038      	movs	r0, r7
 800454c:	f008 f806 	bl	800c55c <SetButtonEvents>
 8004550:	e7ec      	b.n	800452c <ParseSnippetCondition+0x13c>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004552:	220e      	movs	r2, #14
 8004554:	498b      	ldr	r1, [pc, #556]	; (8004784 <ParseSnippetCondition+0x394>)
 8004556:	0030      	movs	r0, r6
 8004558:	f00f fbe3 	bl	8013d22 <strncmp>
 800455c:	2800      	cmp	r0, #0
 800455e:	d120      	bne.n	80045a2 <ParseSnippetCondition+0x1b2>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004560:	00ab      	lsls	r3, r5, #2
 8004562:	195d      	adds	r5, r3, r5
 8004564:	00ad      	lsls	r5, r5, #2
 8004566:	4b82      	ldr	r3, [pc, #520]	; (8004770 <ParseSnippetCondition+0x380>)
 8004568:	195d      	adds	r5, r3, r5
 800456a:	2306      	movs	r3, #6
 800456c:	70eb      	strb	r3, [r5, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 800456e:	00fa      	lsls	r2, r7, #3
 8004570:	19d2      	adds	r2, r2, r7
 8004572:	4b83      	ldr	r3, [pc, #524]	; (8004780 <ParseSnippetCondition+0x390>)
 8004574:	189b      	adds	r3, r3, r2
 8004576:	7a1b      	ldrb	r3, [r3, #8]
 8004578:	2202      	movs	r2, #2
 800457a:	0016      	movs	r6, r2
 800457c:	401e      	ands	r6, r3
 800457e:	421a      	tst	r2, r3
 8004580:	d001      	beq.n	8004586 <ParseSnippetCondition+0x196>
				status =BOS_OK;
 8004582:	2600      	movs	r6, #0
 8004584:	e7d2      	b.n	800452c <ParseSnippetCondition+0x13c>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004586:	2301      	movs	r3, #1
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	2300      	movs	r3, #0
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	9303      	str	r3, [sp, #12]
 8004590:	9302      	str	r3, [sp, #8]
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	3a01      	subs	r2, #1
 8004598:	2100      	movs	r1, #0
 800459a:	0038      	movs	r0, r7
 800459c:	f007 ffde 	bl	800c55c <SetButtonEvents>
 80045a0:	e7c4      	b.n	800452c <ParseSnippetCondition+0x13c>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 80045a2:	220c      	movs	r2, #12
 80045a4:	4978      	ldr	r1, [pc, #480]	; (8004788 <ParseSnippetCondition+0x398>)
 80045a6:	0030      	movs	r0, r6
 80045a8:	f00f fbbb 	bl	8013d22 <strncmp>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d17b      	bne.n	80046a8 <ParseSnippetCondition+0x2b8>
				if(!button[port].pressedX1Sec){
 80045b0:	00fa      	lsls	r2, r7, #3
 80045b2:	19d2      	adds	r2, r2, r7
 80045b4:	4b72      	ldr	r3, [pc, #456]	; (8004780 <ParseSnippetCondition+0x390>)
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	789e      	ldrb	r6, [r3, #2]
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	d00f      	beq.n	80045de <ParseSnippetCondition+0x1ee>
				else if(!button[port].pressedX2Sec){
 80045be:	00fa      	lsls	r2, r7, #3
 80045c0:	19d2      	adds	r2, r2, r7
 80045c2:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <ParseSnippetCondition+0x390>)
 80045c4:	189b      	adds	r3, r3, r2
 80045c6:	78de      	ldrb	r6, [r3, #3]
 80045c8:	2e00      	cmp	r6, #0
 80045ca:	d029      	beq.n	8004620 <ParseSnippetCondition+0x230>
				else if(!button[port].pressedX3Sec){
 80045cc:	00fa      	lsls	r2, r7, #3
 80045ce:	19d2      	adds	r2, r2, r7
 80045d0:	4b6b      	ldr	r3, [pc, #428]	; (8004780 <ParseSnippetCondition+0x390>)
 80045d2:	189b      	adds	r3, r3, r2
 80045d4:	791e      	ldrb	r6, [r3, #4]
 80045d6:	2e00      	cmp	r6, #0
 80045d8:	d044      	beq.n	8004664 <ParseSnippetCondition+0x274>
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80045da:	260c      	movs	r6, #12
 80045dc:	e7a6      	b.n	800452c <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80045de:	4b64      	ldr	r3, [pc, #400]	; (8004770 <ParseSnippetCondition+0x380>)
 80045e0:	4698      	mov	r8, r3
 80045e2:	00ab      	lsls	r3, r5, #2
 80045e4:	195b      	adds	r3, r3, r5
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4443      	add	r3, r8
 80045ea:	2209      	movs	r2, #9
 80045ec:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80045ee:	0020      	movs	r0, r4
 80045f0:	300f      	adds	r0, #15
 80045f2:	f00e fd3e 	bl	8013072 <atoi>
 80045f6:	4b5d      	ldr	r3, [pc, #372]	; (800476c <ParseSnippetCondition+0x37c>)
 80045f8:	7819      	ldrb	r1, [r3, #0]
 80045fa:	b2c3      	uxtb	r3, r0
 80045fc:	008a      	lsls	r2, r1, #2
 80045fe:	1852      	adds	r2, r2, r1
 8004600:	0092      	lsls	r2, r2, #2
 8004602:	4442      	add	r2, r8
 8004604:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004606:	2201      	movs	r2, #1
 8004608:	9205      	str	r2, [sp, #20]
 800460a:	2200      	movs	r2, #0
 800460c:	9204      	str	r2, [sp, #16]
 800460e:	9203      	str	r2, [sp, #12]
 8004610:	9202      	str	r2, [sp, #8]
 8004612:	9201      	str	r2, [sp, #4]
 8004614:	9200      	str	r2, [sp, #0]
 8004616:	2100      	movs	r1, #0
 8004618:	0038      	movs	r0, r7
 800461a:	f007 ff9f 	bl	800c55c <SetButtonEvents>
					status =BOS_OK;
 800461e:	e785      	b.n	800452c <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <ParseSnippetCondition+0x380>)
 8004622:	4698      	mov	r8, r3
 8004624:	00ab      	lsls	r3, r5, #2
 8004626:	195b      	adds	r3, r3, r5
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4443      	add	r3, r8
 800462c:	220a      	movs	r2, #10
 800462e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004630:	0020      	movs	r0, r4
 8004632:	300f      	adds	r0, #15
 8004634:	f00e fd1d 	bl	8013072 <atoi>
 8004638:	4b4c      	ldr	r3, [pc, #304]	; (800476c <ParseSnippetCondition+0x37c>)
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	b2c0      	uxtb	r0, r0
 800463e:	0093      	lsls	r3, r2, #2
 8004640:	189b      	adds	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4443      	add	r3, r8
 8004646:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004648:	2301      	movs	r3, #1
 800464a:	9305      	str	r3, [sp, #20]
 800464c:	2300      	movs	r3, #0
 800464e:	9304      	str	r3, [sp, #16]
 8004650:	9303      	str	r3, [sp, #12]
 8004652:	9302      	str	r3, [sp, #8]
 8004654:	9301      	str	r3, [sp, #4]
 8004656:	9000      	str	r0, [sp, #0]
 8004658:	2200      	movs	r2, #0
 800465a:	2100      	movs	r1, #0
 800465c:	0038      	movs	r0, r7
 800465e:	f007 ff7d 	bl	800c55c <SetButtonEvents>
					status =BOS_OK;
 8004662:	e763      	b.n	800452c <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <ParseSnippetCondition+0x380>)
 8004666:	4698      	mov	r8, r3
 8004668:	00ab      	lsls	r3, r5, #2
 800466a:	195b      	adds	r3, r3, r5
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4443      	add	r3, r8
 8004670:	220b      	movs	r2, #11
 8004672:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004674:	0020      	movs	r0, r4
 8004676:	300f      	adds	r0, #15
 8004678:	f00e fcfb 	bl	8013072 <atoi>
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <ParseSnippetCondition+0x37c>)
 800467e:	781a      	ldrb	r2, [r3, #0]
 8004680:	b2c0      	uxtb	r0, r0
 8004682:	0093      	lsls	r3, r2, #2
 8004684:	189b      	adds	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4443      	add	r3, r8
 800468a:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 800468c:	2301      	movs	r3, #1
 800468e:	9305      	str	r3, [sp, #20]
 8004690:	2300      	movs	r3, #0
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	9302      	str	r3, [sp, #8]
 8004698:	9001      	str	r0, [sp, #4]
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	2200      	movs	r2, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	0038      	movs	r0, r7
 80046a2:	f007 ff5b 	bl	800c55c <SetButtonEvents>
					status =BOS_OK;
 80046a6:	e741      	b.n	800452c <ParseSnippetCondition+0x13c>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 80046a8:	220d      	movs	r2, #13
 80046aa:	4938      	ldr	r1, [pc, #224]	; (800478c <ParseSnippetCondition+0x39c>)
 80046ac:	0030      	movs	r0, r6
 80046ae:	f00f fb38 	bl	8013d22 <strncmp>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d000      	beq.n	80046b8 <ParseSnippetCondition+0x2c8>
 80046b6:	e08c      	b.n	80047d2 <ParseSnippetCondition+0x3e2>
				if(!button[port].releasedY1Sec){
 80046b8:	00fa      	lsls	r2, r7, #3
 80046ba:	19d2      	adds	r2, r2, r7
 80046bc:	4b30      	ldr	r3, [pc, #192]	; (8004780 <ParseSnippetCondition+0x390>)
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	795e      	ldrb	r6, [r3, #5]
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d00f      	beq.n	80046e6 <ParseSnippetCondition+0x2f6>
				else if(!button[port].releasedY2Sec){
 80046c6:	00fa      	lsls	r2, r7, #3
 80046c8:	19d2      	adds	r2, r2, r7
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <ParseSnippetCondition+0x390>)
 80046cc:	189b      	adds	r3, r3, r2
 80046ce:	799e      	ldrb	r6, [r3, #6]
 80046d0:	2e00      	cmp	r6, #0
 80046d2:	d02a      	beq.n	800472a <ParseSnippetCondition+0x33a>
				else if(!button[port].releasedY3Sec){
 80046d4:	00fa      	lsls	r2, r7, #3
 80046d6:	19d2      	adds	r2, r2, r7
 80046d8:	4b29      	ldr	r3, [pc, #164]	; (8004780 <ParseSnippetCondition+0x390>)
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	79de      	ldrb	r6, [r3, #7]
 80046de:	2e00      	cmp	r6, #0
 80046e0:	d056      	beq.n	8004790 <ParseSnippetCondition+0x3a0>
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80046e2:	260d      	movs	r6, #13
 80046e4:	e722      	b.n	800452c <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 80046e6:	4b22      	ldr	r3, [pc, #136]	; (8004770 <ParseSnippetCondition+0x380>)
 80046e8:	4698      	mov	r8, r3
 80046ea:	00ab      	lsls	r3, r5, #2
 80046ec:	195b      	adds	r3, r3, r5
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4443      	add	r3, r8
 80046f2:	220c      	movs	r2, #12
 80046f4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80046f6:	0020      	movs	r0, r4
 80046f8:	3010      	adds	r0, #16
 80046fa:	f00e fcba 	bl	8013072 <atoi>
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <ParseSnippetCondition+0x37c>)
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	b2c0      	uxtb	r0, r0
 8004704:	0093      	lsls	r3, r2, #2
 8004706:	189b      	adds	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4443      	add	r3, r8
 800470c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 800470e:	2301      	movs	r3, #1
 8004710:	9305      	str	r3, [sp, #20]
 8004712:	2300      	movs	r3, #0
 8004714:	9304      	str	r3, [sp, #16]
 8004716:	9303      	str	r3, [sp, #12]
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	2100      	movs	r1, #0
 8004722:	0038      	movs	r0, r7
 8004724:	f007 ff1a 	bl	800c55c <SetButtonEvents>
					status =BOS_OK;
 8004728:	e700      	b.n	800452c <ParseSnippetCondition+0x13c>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <ParseSnippetCondition+0x380>)
 800472c:	4698      	mov	r8, r3
 800472e:	2314      	movs	r3, #20
 8004730:	4699      	mov	r9, r3
 8004732:	435d      	muls	r5, r3
 8004734:	4445      	add	r5, r8
 8004736:	3b07      	subs	r3, #7
 8004738:	70eb      	strb	r3, [r5, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 800473a:	0020      	movs	r0, r4
 800473c:	3010      	adds	r0, #16
 800473e:	f00e fc98 	bl	8013072 <atoi>
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <ParseSnippetCondition+0x37c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2c0      	uxtb	r0, r0
 8004748:	464a      	mov	r2, r9
 800474a:	4353      	muls	r3, r2
 800474c:	4443      	add	r3, r8
 800474e:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004750:	2301      	movs	r3, #1
 8004752:	9305      	str	r3, [sp, #20]
 8004754:	2100      	movs	r1, #0
 8004756:	9104      	str	r1, [sp, #16]
 8004758:	9003      	str	r0, [sp, #12]
 800475a:	9102      	str	r1, [sp, #8]
 800475c:	9101      	str	r1, [sp, #4]
 800475e:	9100      	str	r1, [sp, #0]
 8004760:	000b      	movs	r3, r1
 8004762:	000a      	movs	r2, r1
 8004764:	0038      	movs	r0, r7
 8004766:	f007 fef9 	bl	800c55c <SetButtonEvents>
					status =BOS_OK;
 800476a:	e6df      	b.n	800452c <ParseSnippetCondition+0x13c>
 800476c:	200009af 	.word	0x200009af
 8004770:	200057b0 	.word	0x200057b0
 8004774:	20000914 	.word	0x20000914
 8004778:	08017c00 	.word	0x08017c00
 800477c:	08018b28 	.word	0x08018b28
 8004780:	20001360 	.word	0x20001360
 8004784:	080182dc 	.word	0x080182dc
 8004788:	080182ec 	.word	0x080182ec
 800478c:	080182fc 	.word	0x080182fc
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004790:	4b2e      	ldr	r3, [pc, #184]	; (800484c <ParseSnippetCondition+0x45c>)
 8004792:	4698      	mov	r8, r3
 8004794:	2314      	movs	r3, #20
 8004796:	4699      	mov	r9, r3
 8004798:	435d      	muls	r5, r3
 800479a:	4445      	add	r5, r8
 800479c:	3b06      	subs	r3, #6
 800479e:	70eb      	strb	r3, [r5, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80047a0:	0020      	movs	r0, r4
 80047a2:	3010      	adds	r0, #16
 80047a4:	f00e fc65 	bl	8013072 <atoi>
 80047a8:	4b29      	ldr	r3, [pc, #164]	; (8004850 <ParseSnippetCondition+0x460>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b2c0      	uxtb	r0, r0
 80047ae:	464a      	mov	r2, r9
 80047b0:	4353      	muls	r3, r2
 80047b2:	4443      	add	r3, r8
 80047b4:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 80047b6:	2301      	movs	r3, #1
 80047b8:	9305      	str	r3, [sp, #20]
 80047ba:	9004      	str	r0, [sp, #16]
 80047bc:	2100      	movs	r1, #0
 80047be:	9103      	str	r1, [sp, #12]
 80047c0:	9102      	str	r1, [sp, #8]
 80047c2:	9101      	str	r1, [sp, #4]
 80047c4:	9100      	str	r1, [sp, #0]
 80047c6:	000b      	movs	r3, r1
 80047c8:	000a      	movs	r2, r1
 80047ca:	0038      	movs	r0, r7
 80047cc:	f007 fec6 	bl	800c55c <SetButtonEvents>
					status =BOS_OK;
 80047d0:	e6ac      	b.n	800452c <ParseSnippetCondition+0x13c>
	BOS_Status status =BOS_OK;
 80047d2:	2600      	movs	r6, #0
 80047d4:	e6aa      	b.n	800452c <ParseSnippetCondition+0x13c>
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	d000      	beq.n	80047dc <ParseSnippetCondition+0x3ec>
 80047da:	e646      	b.n	800446a <ParseSnippetCondition+0x7a>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 80047dc:	4d1c      	ldr	r5, [pc, #112]	; (8004850 <ParseSnippetCondition+0x460>)
 80047de:	782b      	ldrb	r3, [r5, #0]
 80047e0:	491a      	ldr	r1, [pc, #104]	; (800484c <ParseSnippetCondition+0x45c>)
 80047e2:	009a      	lsls	r2, r3, #2
 80047e4:	18d0      	adds	r0, r2, r3
 80047e6:	0080      	lsls	r0, r0, #2
 80047e8:	3602      	adds	r6, #2
 80047ea:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80047ec:	180a      	adds	r2, r1, r0
 80047ee:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80047f0:	3301      	adds	r3, #1
 80047f2:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 80047f4:	2600      	movs	r6, #0
 80047f6:	e669      	b.n	80044cc <ParseSnippetCondition+0xdc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80047f8:	4b15      	ldr	r3, [pc, #84]	; (8004850 <ParseSnippetCondition+0x460>)
 80047fa:	4698      	mov	r8, r3
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	4f13      	ldr	r7, [pc, #76]	; (800484c <ParseSnippetCondition+0x45c>)
 8004800:	0093      	lsls	r3, r2, #2
 8004802:	1899      	adds	r1, r3, r2
 8004804:	0089      	lsls	r1, r1, #2
 8004806:	2003      	movs	r0, #3
 8004808:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800480a:	187b      	adds	r3, r7, r1
 800480c:	70dc      	strb	r4, [r3, #3]
					float constant =atof(thirdPart);
 800480e:	0030      	movs	r0, r6
 8004810:	f00e fc2a 	bl	8013068 <atof>
 8004814:	f7fe f9a0 	bl	8002b58 <__aeabi_d2f>
 8004818:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 800481a:	4643      	mov	r3, r8
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	0098      	lsls	r0, r3, #2
 8004820:	18c0      	adds	r0, r0, r3
 8004822:	0080      	lsls	r0, r0, #2
 8004824:	19c0      	adds	r0, r0, r7
 8004826:	3006      	adds	r0, #6
 8004828:	2204      	movs	r2, #4
 800482a:	a907      	add	r1, sp, #28
 800482c:	f00e fc74 	bl	8013118 <memcpy>
 8004830:	e634      	b.n	800449c <ParseSnippetCondition+0xac>
		return BOS_ERR_SNIP_MEM_FULL;
 8004832:	260e      	movs	r6, #14
 8004834:	e64a      	b.n	80044cc <ParseSnippetCondition+0xdc>
	BOS_Status status =BOS_OK;
 8004836:	2600      	movs	r6, #0
 8004838:	e648      	b.n	80044cc <ParseSnippetCondition+0xdc>
			return BOS_ERR_WrongParam;
 800483a:	2667      	movs	r6, #103	; 0x67
 800483c:	e646      	b.n	80044cc <ParseSnippetCondition+0xdc>
				return BOS_ERR_WrongParam;
 800483e:	2667      	movs	r6, #103	; 0x67
 8004840:	e644      	b.n	80044cc <ParseSnippetCondition+0xdc>
 8004842:	2667      	movs	r6, #103	; 0x67
 8004844:	e642      	b.n	80044cc <ParseSnippetCondition+0xdc>
					return BOS_ERR_WrongParam;
 8004846:	2667      	movs	r6, #103	; 0x67
 8004848:	e640      	b.n	80044cc <ParseSnippetCondition+0xdc>
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	200057b0 	.word	0x200057b0
 8004850:	200009af 	.word	0x200009af

08004854 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	000c      	movs	r4, r1
	switch(code){
 8004858:	2802      	cmp	r0, #2
 800485a:	d017      	beq.n	800488c <AddSnippet+0x38>
 800485c:	2803      	cmp	r0, #3
 800485e:	d003      	beq.n	8004868 <AddSnippet+0x14>
 8004860:	2801      	cmp	r0, #1
 8004862:	d00f      	beq.n	8004884 <AddSnippet+0x30>
 8004864:	2000      	movs	r0, #0
}
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets - 1].state = true;
 8004868:	4b35      	ldr	r3, [pc, #212]	; (8004940 <AddSnippet+0xec>)
 800486a:	781a      	ldrb	r2, [r3, #0]
 800486c:	3a01      	subs	r2, #1
 800486e:	0093      	lsls	r3, r2, #2
 8004870:	189b      	adds	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4a33      	ldr	r2, [pc, #204]	; (8004944 <AddSnippet+0xf0>)
 8004876:	18d3      	adds	r3, r2, r3
 8004878:	2201      	movs	r2, #1
 800487a:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 800487c:	f005 faf6 	bl	8009e6c <SaveToRO>
	return BOS_OK;
 8004880:	2000      	movs	r0, #0
			break;
 8004882:	e7f0      	b.n	8004866 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8004884:	0008      	movs	r0, r1
 8004886:	f7ff fdb3 	bl	80043f0 <ParseSnippetCondition>
 800488a:	e7ec      	b.n	8004866 <AddSnippet+0x12>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 800488c:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <AddSnippet+0xec>)
 800488e:	781d      	ldrb	r5, [r3, #0]
 8004890:	3d01      	subs	r5, #1
 8004892:	00ab      	lsls	r3, r5, #2
 8004894:	195b      	adds	r3, r3, r5
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <AddSnippet+0xf0>)
 800489a:	18d3      	adds	r3, r2, r3
 800489c:	68df      	ldr	r7, [r3, #12]
 800489e:	2f00      	cmp	r7, #0
 80048a0:	d034      	beq.n	800490c <AddSnippet+0xb8>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 80048a2:	0038      	movs	r0, r7
 80048a4:	f7fb fc38 	bl	8000118 <strlen>
 80048a8:	0006      	movs	r6, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 80048aa:	0020      	movs	r0, r4
 80048ac:	f7fb fc34 	bl	8000118 <strlen>
 80048b0:	1831      	adds	r1, r6, r0
 80048b2:	3102      	adds	r1, #2
 80048b4:	0038      	movs	r0, r7
 80048b6:	f00f f9a1 	bl	8013bfc <realloc>
 80048ba:	4f22      	ldr	r7, [pc, #136]	; (8004944 <AddSnippet+0xf0>)
 80048bc:	00ab      	lsls	r3, r5, #2
 80048be:	195d      	adds	r5, r3, r5
 80048c0:	00ad      	lsls	r5, r5, #2
 80048c2:	197d      	adds	r5, r7, r5
 80048c4:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 80048c6:	4d1e      	ldr	r5, [pc, #120]	; (8004940 <AddSnippet+0xec>)
 80048c8:	782a      	ldrb	r2, [r5, #0]
 80048ca:	3a01      	subs	r2, #1
 80048cc:	0093      	lsls	r3, r2, #2
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	68d8      	ldr	r0, [r3, #12]
 80048d6:	1c73      	adds	r3, r6, #1
 80048d8:	18c0      	adds	r0, r0, r3
 80048da:	0021      	movs	r1, r4
 80048dc:	f00f fa19 	bl	8013d12 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 80048e0:	782a      	ldrb	r2, [r5, #0]
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0093      	lsls	r3, r2, #2
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	18ff      	adds	r7, r7, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2213      	movs	r2, #19
 80048f0:	559a      	strb	r2, [r3, r6]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 80048f2:	4b13      	ldr	r3, [pc, #76]	; (8004940 <AddSnippet+0xec>)
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0093      	lsls	r3, r2, #2
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4911      	ldr	r1, [pc, #68]	; (8004944 <AddSnippet+0xf0>)
 8004900:	18cb      	adds	r3, r1, r3
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d011      	beq.n	800492c <AddSnippet+0xd8>
	return BOS_OK;
 8004908:	2000      	movs	r0, #0
 800490a:	e7ac      	b.n	8004866 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 800490c:	0008      	movs	r0, r1
 800490e:	f7fb fc03 	bl	8000118 <strlen>
 8004912:	3001      	adds	r0, #1
 8004914:	f00e fbde 	bl	80130d4 <malloc>
 8004918:	00ab      	lsls	r3, r5, #2
 800491a:	195d      	adds	r5, r3, r5
 800491c:	00ad      	lsls	r5, r5, #2
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <AddSnippet+0xf0>)
 8004920:	195d      	adds	r5, r3, r5
 8004922:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004924:	0021      	movs	r1, r4
 8004926:	f00f f9f4 	bl	8013d12 <strcpy>
 800492a:	e7e2      	b.n	80048f2 <AddSnippet+0x9e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 800492c:	0090      	lsls	r0, r2, #2
 800492e:	1880      	adds	r0, r0, r2
 8004930:	0080      	lsls	r0, r0, #2
 8004932:	1840      	adds	r0, r0, r1
 8004934:	2214      	movs	r2, #20
 8004936:	2100      	movs	r1, #0
 8004938:	f00e fbf7 	bl	801312a <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 800493c:	200e      	movs	r0, #14
 800493e:	e792      	b.n	8004866 <AddSnippet+0x12>
 8004940:	200009af 	.word	0x200009af
 8004944:	200057b0 	.word	0x200057b0

08004948 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494a:	46de      	mov	lr, fp
 800494c:	4657      	mov	r7, sl
 800494e:	464e      	mov	r6, r9
 8004950:	4645      	mov	r5, r8
 8004952:	b5e0      	push	{r5, r6, r7, lr}
 8004954:	b089      	sub	sp, #36	; 0x24
 8004956:	4682      	mov	sl, r0
 8004958:	4689      	mov	r9, r1
 800495a:	0015      	movs	r5, r2
 800495c:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 800495e:	2300      	movs	r3, #0
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	2205      	movs	r2, #5
 8004964:	2100      	movs	r1, #0
 8004966:	a806      	add	r0, sp, #24
 8004968:	f00e fbdf 	bl	801312a <memset>
 800496c:	e12e      	b.n	8004bcc <CLI_CommandParser+0x284>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 800496e:	1ce9      	adds	r1, r5, #3
 8004970:	2001      	movs	r0, #1
 8004972:	f7ff ff6f 	bl	8004854 <AddSnippet>
 8004976:	2800      	cmp	r0, #0
 8004978:	d106      	bne.n	8004988 <CLI_CommandParser+0x40>
				recordSnippet = SNIPPET_COMMANDS;
 800497a:	4bd3      	ldr	r3, [pc, #844]	; (8004cc8 <CLI_CommandParser+0x380>)
 800497c:	2202      	movs	r2, #2
 800497e:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004980:	230d      	movs	r3, #13
 8004982:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 8004984:	46b8      	mov	r8, r7
 8004986:	e10f      	b.n	8004ba8 <CLI_CommandParser+0x260>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004988:	2252      	movs	r2, #82	; 0x52
 800498a:	49d0      	ldr	r1, [pc, #832]	; (8004ccc <CLI_CommandParser+0x384>)
 800498c:	0020      	movs	r0, r4
 800498e:	f00e fbc3 	bl	8013118 <memcpy>
				recordSnippet =0;
 8004992:	4bcd      	ldr	r3, [pc, #820]	; (8004cc8 <CLI_CommandParser+0x380>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
			xReturned = pdFALSE;
 8004998:	46b8      	mov	r8, r7
 800499a:	e105      	b.n	8004ba8 <CLI_CommandParser+0x260>
			recordSnippet =0;
 800499c:	4bca      	ldr	r3, [pc, #808]	; (8004cc8 <CLI_CommandParser+0x380>)
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 80049a2:	49cb      	ldr	r1, [pc, #812]	; (8004cd0 <CLI_CommandParser+0x388>)
 80049a4:	2003      	movs	r0, #3
 80049a6:	f7ff ff55 	bl	8004854 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 80049aa:	2241      	movs	r2, #65	; 0x41
 80049ac:	49c9      	ldr	r1, [pc, #804]	; (8004cd4 <CLI_CommandParser+0x38c>)
 80049ae:	0020      	movs	r0, r4
 80049b0:	f00e fbb2 	bl	8013118 <memcpy>
			xReturned = pdFALSE;
 80049b4:	46b8      	mov	r8, r7
 80049b6:	e0f7      	b.n	8004ba8 <CLI_CommandParser+0x260>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 80049b8:	0029      	movs	r1, r5
 80049ba:	2002      	movs	r0, #2
 80049bc:	f7ff ff4a 	bl	8004854 <AddSnippet>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d104      	bne.n	80049ce <CLI_CommandParser+0x86>
				pcOutputString[0] ='\r';
 80049c4:	230d      	movs	r3, #13
 80049c6:	7023      	strb	r3, [r4, #0]
			xReturned = pdFALSE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	4698      	mov	r8, r3
 80049cc:	e0ec      	b.n	8004ba8 <CLI_CommandParser+0x260>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80049ce:	2252      	movs	r2, #82	; 0x52
 80049d0:	49be      	ldr	r1, [pc, #760]	; (8004ccc <CLI_CommandParser+0x384>)
 80049d2:	0020      	movs	r0, r4
 80049d4:	f00e fba0 	bl	8013118 <memcpy>
			xReturned = pdFALSE;
 80049d8:	2300      	movs	r3, #0
 80049da:	4698      	mov	r8, r3
 80049dc:	e0e4      	b.n	8004ba8 <CLI_CommandParser+0x260>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80049de:	1c70      	adds	r0, r6, #1
 80049e0:	2299      	movs	r2, #153	; 0x99
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	0021      	movs	r1, r4
 80049e6:	f009 fb95 	bl	800e114 <FreeRTOS_CLIProcessCommand>
 80049ea:	4680      	mov	r8, r0
 80049ec:	e0dc      	b.n	8004ba8 <CLI_CommandParser+0x260>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 80049ee:	2227      	movs	r2, #39	; 0x27
 80049f0:	49b9      	ldr	r1, [pc, #740]	; (8004cd8 <CLI_CommandParser+0x390>)
 80049f2:	0020      	movs	r0, r4
 80049f4:	f00e fb90 	bl	8013118 <memcpy>
					xReturned = pdFALSE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	4698      	mov	r8, r3
 80049fc:	e0d4      	b.n	8004ba8 <CLI_CommandParser+0x260>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 80049fe:	2225      	movs	r2, #37	; 0x25
 8004a00:	49b6      	ldr	r1, [pc, #728]	; (8004cdc <CLI_CommandParser+0x394>)
 8004a02:	0020      	movs	r0, r4
 8004a04:	f00e fb88 	bl	8013118 <memcpy>
					xReturned = pdFALSE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4698      	mov	r8, r3
 8004a0c:	e0cc      	b.n	8004ba8 <CLI_CommandParser+0x260>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004a0e:	2202      	movs	r2, #2
 8004a10:	2100      	movs	r1, #0
 8004a12:	48b3      	ldr	r0, [pc, #716]	; (8004ce0 <CLI_CommandParser+0x398>)
 8004a14:	f00e fb89 	bl	801312a <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004a18:	3601      	adds	r6, #1
 8004a1a:	0028      	movs	r0, r5
 8004a1c:	f7fb fb7c 	bl	8000118 <strlen>
 8004a20:	0007      	movs	r7, r0
 8004a22:	a805      	add	r0, sp, #20
 8004a24:	f7fb fb78 	bl	8000118 <strlen>
 8004a28:	1a3a      	subs	r2, r7, r0
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	0031      	movs	r1, r6
 8004a2e:	48ad      	ldr	r0, [pc, #692]	; (8004ce4 <CLI_CommandParser+0x39c>)
 8004a30:	f00f f988 	bl	8013d44 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004a34:	0028      	movs	r0, r5
 8004a36:	f7fb fb6f 	bl	8000118 <strlen>
 8004a3a:	0007      	movs	r7, r0
 8004a3c:	a805      	add	r0, sp, #20
 8004a3e:	f7fb fb6b 	bl	8000118 <strlen>
 8004a42:	1a3b      	subs	r3, r7, r0
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2217      	movs	r2, #23
 8004a48:	21ff      	movs	r1, #255	; 0xff
 8004a4a:	4658      	mov	r0, fp
 8004a4c:	f003 f9ca 	bl	8007de4 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004a50:	2299      	movs	r2, #153	; 0x99
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	0021      	movs	r1, r4
 8004a56:	0030      	movs	r0, r6
 8004a58:	f009 fb5c 	bl	800e114 <FreeRTOS_CLIProcessCommand>
 8004a5c:	4680      	mov	r8, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004a5e:	0020      	movs	r0, r4
 8004a60:	f7fb fb5a 	bl	8000118 <strlen>
 8004a64:	1820      	adds	r0, r4, r0
 8004a66:	221d      	movs	r2, #29
 8004a68:	499f      	ldr	r1, [pc, #636]	; (8004ce8 <CLI_CommandParser+0x3a0>)
 8004a6a:	f00e fb55 	bl	8013118 <memcpy>
 8004a6e:	e09b      	b.n	8004ba8 <CLI_CommandParser+0x260>
					group =id >> 8;
 8004a70:	9b02      	ldr	r3, [sp, #8]
 8004a72:	121f      	asrs	r7, r3, #8
 8004a74:	b2fb      	uxtb	r3, r7
 8004a76:	4f9d      	ldr	r7, [pc, #628]	; (8004cec <CLI_CommandParser+0x3a4>)
 8004a78:	9303      	str	r3, [sp, #12]
 8004a7a:	703b      	strb	r3, [r7, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4897      	ldr	r0, [pc, #604]	; (8004ce0 <CLI_CommandParser+0x398>)
 8004a82:	f00e fb52 	bl	801312a <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004a86:	1c72      	adds	r2, r6, #1
 8004a88:	9202      	str	r2, [sp, #8]
 8004a8a:	0028      	movs	r0, r5
 8004a8c:	f7fb fb44 	bl	8000118 <strlen>
 8004a90:	0006      	movs	r6, r0
 8004a92:	a805      	add	r0, sp, #20
 8004a94:	f7fb fb40 	bl	8000118 <strlen>
 8004a98:	1a32      	subs	r2, r6, r0
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	9902      	ldr	r1, [sp, #8]
 8004a9e:	4891      	ldr	r0, [pc, #580]	; (8004ce4 <CLI_CommandParser+0x39c>)
 8004aa0:	f00f f950 	bl	8013d44 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004aa4:	0028      	movs	r0, r5
 8004aa6:	f7fb fb37 	bl	8000118 <strlen>
 8004aaa:	0006      	movs	r6, r0
 8004aac:	a805      	add	r0, sp, #20
 8004aae:	f7fb fb33 	bl	8000118 <strlen>
 8004ab2:	1a33      	subs	r3, r6, r0
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2217      	movs	r2, #23
 8004ab8:	9903      	ldr	r1, [sp, #12]
 8004aba:	4658      	mov	r0, fp
 8004abc:	f003 f992 	bl	8007de4 <BroadcastMessage>
					if(InGroup(myID,group))
 8004ac0:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <CLI_CommandParser+0x3a8>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	4a8a      	ldr	r2, [pc, #552]	; (8004cf4 <CLI_CommandParser+0x3ac>)
 8004aca:	5a9b      	ldrh	r3, [r3, r2]
 8004acc:	783a      	ldrb	r2, [r7, #0]
 8004ace:	4113      	asrs	r3, r2
 8004ad0:	07db      	lsls	r3, r3, #31
 8004ad2:	d406      	bmi.n	8004ae2 <CLI_CommandParser+0x19a>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004ad4:	ab05      	add	r3, sp, #20
 8004ad6:	0022      	movs	r2, r4
 8004ad8:	4987      	ldr	r1, [pc, #540]	; (8004cf8 <CLI_CommandParser+0x3b0>)
 8004ada:	0020      	movs	r0, r4
 8004adc:	f00f f8de 	bl	8013c9c <siprintf>
 8004ae0:	e062      	b.n	8004ba8 <CLI_CommandParser+0x260>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004ae2:	2299      	movs	r2, #153	; 0x99
 8004ae4:	0092      	lsls	r2, r2, #2
 8004ae6:	0021      	movs	r1, r4
 8004ae8:	9802      	ldr	r0, [sp, #8]
 8004aea:	f009 fb13 	bl	800e114 <FreeRTOS_CLIProcessCommand>
 8004aee:	4680      	mov	r8, r0
 8004af0:	e7f0      	b.n	8004ad4 <CLI_CommandParser+0x18c>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004af2:	0028      	movs	r0, r5
 8004af4:	f7fb fb10 	bl	8000118 <strlen>
 8004af8:	4680      	mov	r8, r0
 8004afa:	a805      	add	r0, sp, #20
 8004afc:	f7fb fb0c 	bl	8000118 <strlen>
 8004b00:	4643      	mov	r3, r8
 8004b02:	1a1a      	subs	r2, r3, r0
 8004b04:	3a01      	subs	r2, #1
 8004b06:	0031      	movs	r1, r6
 8004b08:	4876      	ldr	r0, [pc, #472]	; (8004ce4 <CLI_CommandParser+0x39c>)
 8004b0a:	f00f f91b 	bl	8013d44 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004b0e:	0028      	movs	r0, r5
 8004b10:	f7fb fb02 	bl	8000118 <strlen>
 8004b14:	0006      	movs	r6, r0
 8004b16:	a805      	add	r0, sp, #20
 8004b18:	f7fb fafe 	bl	8000118 <strlen>
 8004b1c:	1a32      	subs	r2, r6, r0
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	3a01      	subs	r2, #1
 8004b22:	b292      	uxth	r2, r2
 8004b24:	2117      	movs	r1, #23
 8004b26:	0038      	movs	r0, r7
 8004b28:	f003 f984 	bl	8007e34 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004b2c:	9a02      	ldr	r2, [sp, #8]
 8004b2e:	4973      	ldr	r1, [pc, #460]	; (8004cfc <CLI_CommandParser+0x3b4>)
 8004b30:	0020      	movs	r0, r4
 8004b32:	f00f f8b3 	bl	8013c9c <siprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004b36:	7823      	ldrb	r3, [r4, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <CLI_CommandParser+0x1fa>
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <CLI_CommandParser+0x20c>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004b42:	0020      	movs	r0, r4
 8004b44:	f7fb fae8 	bl	8000118 <strlen>
 8004b48:	0002      	movs	r2, r0
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	0020      	movs	r0, r4
 8004b4e:	f00e faec 	bl	801312a <memset>
 8004b52:	e0a1      	b.n	8004c98 <CLI_CommandParser+0x350>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004b54:	0020      	movs	r0, r4
 8004b56:	f7fb fadf 	bl	8000118 <strlen>
 8004b5a:	b282      	uxth	r2, r0
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	3331      	adds	r3, #49	; 0x31
 8004b62:	0021      	movs	r1, r4
 8004b64:	4650      	mov	r0, sl
 8004b66:	f009 f8c3 	bl	800dcf0 <writePxMutex>
 8004b6a:	e7ea      	b.n	8004b42 <CLI_CommandParser+0x1fa>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004b6c:	21fa      	movs	r1, #250	; 0xfa
 8004b6e:	0089      	lsls	r1, r1, #2
 8004b70:	2001      	movs	r0, #1
 8004b72:	f00a fd5f 	bl	800f634 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004b76:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <CLI_CommandParser+0x3b8>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d100      	bne.n	8004b80 <CLI_CommandParser+0x238>
 8004b7e:	e093      	b.n	8004ca8 <CLI_CommandParser+0x360>
							++timedoutMsg;
 8004b80:	4a60      	ldr	r2, [pc, #384]	; (8004d04 <CLI_CommandParser+0x3bc>)
 8004b82:	8813      	ldrh	r3, [r2, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004b88:	9b02      	ldr	r3, [sp, #8]
 8004b8a:	0022      	movs	r2, r4
 8004b8c:	495e      	ldr	r1, [pc, #376]	; (8004d08 <CLI_CommandParser+0x3c0>)
 8004b8e:	0020      	movs	r0, r4
 8004b90:	f00f f884 	bl	8013c9c <siprintf>
					xReturned = pdFALSE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	4698      	mov	r8, r3
 8004b98:	e006      	b.n	8004ba8 <CLI_CommandParser+0x260>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004b9a:	2299      	movs	r2, #153	; 0x99
 8004b9c:	0092      	lsls	r2, r2, #2
 8004b9e:	0021      	movs	r1, r4
 8004ba0:	0028      	movs	r0, r5
 8004ba2:	f009 fab7 	bl	800e114 <FreeRTOS_CLIProcessCommand>
 8004ba6:	4680      	mov	r8, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004ba8:	7823      	ldrb	r3, [r4, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <CLI_CommandParser+0x26c>
 8004bae:	464b      	mov	r3, r9
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d17c      	bne.n	8004cae <CLI_CommandParser+0x366>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004bb4:	0020      	movs	r0, r4
 8004bb6:	f7fb faaf 	bl	8000118 <strlen>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	0020      	movs	r0, r4
 8004bc0:	f00e fab3 	bl	801312a <memset>
	} while(xReturned != pdFALSE);
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d100      	bne.n	8004bcc <CLI_CommandParser+0x284>
 8004bca:	e0ad      	b.n	8004d28 <CLI_CommandParser+0x3e0>
		StringToLowerCase((char* )cInputString);
 8004bcc:	0028      	movs	r0, r5
 8004bce:	f7ff fbfb 	bl	80043c8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <CLI_CommandParser+0x380>)
 8004bd4:	781e      	ldrb	r6, [r3, #0]
 8004bd6:	2e00      	cmp	r6, #0
 8004bd8:	d107      	bne.n	8004bea <CLI_CommandParser+0x2a2>
 8004bda:	2203      	movs	r2, #3
 8004bdc:	494b      	ldr	r1, [pc, #300]	; (8004d0c <CLI_CommandParser+0x3c4>)
 8004bde:	0028      	movs	r0, r5
 8004be0:	f00f f89f 	bl	8013d22 <strncmp>
 8004be4:	1e07      	subs	r7, r0, #0
 8004be6:	d100      	bne.n	8004bea <CLI_CommandParser+0x2a2>
 8004be8:	e6c1      	b.n	800496e <CLI_CommandParser+0x26>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d007      	beq.n	8004bfe <CLI_CommandParser+0x2b6>
 8004bee:	2206      	movs	r2, #6
 8004bf0:	4947      	ldr	r1, [pc, #284]	; (8004d10 <CLI_CommandParser+0x3c8>)
 8004bf2:	0028      	movs	r0, r5
 8004bf4:	f00f f895 	bl	8013d22 <strncmp>
 8004bf8:	1e07      	subs	r7, r0, #0
 8004bfa:	d100      	bne.n	8004bfe <CLI_CommandParser+0x2b6>
 8004bfc:	e6ce      	b.n	800499c <CLI_CommandParser+0x54>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004bfe:	2e02      	cmp	r6, #2
 8004c00:	d100      	bne.n	8004c04 <CLI_CommandParser+0x2bc>
 8004c02:	e6d9      	b.n	80049b8 <CLI_CommandParser+0x70>
			loc =strchr((char* )cInputString,'.');
 8004c04:	212e      	movs	r1, #46	; 0x2e
 8004c06:	0028      	movs	r0, r5
 8004c08:	f00f f875 	bl	8013cf6 <strchr>
 8004c0c:	1e06      	subs	r6, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c0e:	d0c4      	beq.n	8004b9a <CLI_CommandParser+0x252>
 8004c10:	3803      	subs	r0, #3
 8004c12:	2203      	movs	r2, #3
 8004c14:	493f      	ldr	r1, [pc, #252]	; (8004d14 <CLI_CommandParser+0x3cc>)
 8004c16:	f00f f884 	bl	8013d22 <strncmp>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d0bd      	beq.n	8004b9a <CLI_CommandParser+0x252>
 8004c1e:	7873      	ldrb	r3, [r6, #1]
 8004c20:	4a3d      	ldr	r2, [pc, #244]	; (8004d18 <CLI_CommandParser+0x3d0>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	075b      	lsls	r3, r3, #29
 8004c26:	d4b8      	bmi.n	8004b9a <CLI_CommandParser+0x252>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004c28:	1b72      	subs	r2, r6, r5
 8004c2a:	0029      	movs	r1, r5
 8004c2c:	a805      	add	r0, sp, #20
 8004c2e:	f00f f889 	bl	8013d44 <strncpy>
				id =GetID(idString);
 8004c32:	a805      	add	r0, sp, #20
 8004c34:	f7ff f9f2 	bl	800401c <GetID>
 8004c38:	9002      	str	r0, [sp, #8]
				if(id == myID){
 8004c3a:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <CLI_CommandParser+0x3a8>)
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	4693      	mov	fp, r2
 8004c40:	4290      	cmp	r0, r2
 8004c42:	d100      	bne.n	8004c46 <CLI_CommandParser+0x2fe>
 8004c44:	e6cb      	b.n	80049de <CLI_CommandParser+0x96>
				else if(id == BOS_ERR_WrongName){
 8004c46:	2864      	cmp	r0, #100	; 0x64
 8004c48:	d100      	bne.n	8004c4c <CLI_CommandParser+0x304>
 8004c4a:	e6d0      	b.n	80049ee <CLI_CommandParser+0xa6>
				else if(id == BOS_ERR_WrongID){
 8004c4c:	2866      	cmp	r0, #102	; 0x66
 8004c4e:	d100      	bne.n	8004c52 <CLI_CommandParser+0x30a>
 8004c50:	e6d5      	b.n	80049fe <CLI_CommandParser+0xb6>
				else if(id == BOS_BROADCAST){
 8004c52:	28ff      	cmp	r0, #255	; 0xff
 8004c54:	d100      	bne.n	8004c58 <CLI_CommandParser+0x310>
 8004c56:	e6da      	b.n	8004a0e <CLI_CommandParser+0xc6>
				else if((uint8_t )id == BOS_MULTICAST){
 8004c58:	466b      	mov	r3, sp
 8004c5a:	7a1f      	ldrb	r7, [r3, #8]
 8004c5c:	2ffe      	cmp	r7, #254	; 0xfe
 8004c5e:	d100      	bne.n	8004c62 <CLI_CommandParser+0x31a>
 8004c60:	e706      	b.n	8004a70 <CLI_CommandParser+0x128>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004c62:	3601      	adds	r6, #1
 8004c64:	2206      	movs	r2, #6
 8004c66:	492d      	ldr	r1, [pc, #180]	; (8004d1c <CLI_CommandParser+0x3d4>)
 8004c68:	0030      	movs	r0, r6
 8004c6a:	f00f f85a 	bl	8013d22 <strncmp>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d000      	beq.n	8004c74 <CLI_CommandParser+0x32c>
 8004c72:	e73e      	b.n	8004af2 <CLI_CommandParser+0x1aa>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	; (8004d20 <CLI_CommandParser+0x3d8>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004c7a:	2119      	movs	r1, #25
 8004c7c:	0038      	movs	r0, r7
 8004c7e:	f003 f8d9 	bl	8007e34 <SendMessageToModule>
						osDelay(100);
 8004c82:	2064      	movs	r0, #100	; 0x64
 8004c84:	f009 f992 	bl	800dfac <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004c88:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <CLI_CommandParser+0x3dc>)
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <CLI_CommandParser+0x3a8>)
 8004c8e:	7818      	ldrb	r0, [r3, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	0039      	movs	r1, r7
 8004c94:	f005 f9f4 	bl	800a080 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <CLI_CommandParser+0x3d8>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b60      	cmp	r3, #96	; 0x60
 8004c9e:	d100      	bne.n	8004ca2 <CLI_CommandParser+0x35a>
 8004ca0:	e764      	b.n	8004b6c <CLI_CommandParser+0x224>
					xReturned = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4698      	mov	r8, r3
 8004ca6:	e77f      	b.n	8004ba8 <CLI_CommandParser+0x260>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4698      	mov	r8, r3
 8004cac:	e77c      	b.n	8004ba8 <CLI_CommandParser+0x260>
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004cae:	0020      	movs	r0, r4
 8004cb0:	f7fb fa32 	bl	8000118 <strlen>
 8004cb4:	b282      	uxth	r2, r0
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	425b      	negs	r3, r3
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	3333      	adds	r3, #51	; 0x33
 8004cbe:	0021      	movs	r1, r4
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	f009 f815 	bl	800dcf0 <writePxMutex>
 8004cc6:	e775      	b.n	8004bb4 <CLI_CommandParser+0x26c>
 8004cc8:	200009dc 	.word	0x200009dc
 8004ccc:	08018310 	.word	0x08018310
 8004cd0:	08017ad8 	.word	0x08017ad8
 8004cd4:	0801836c 	.word	0x0801836c
 8004cd8:	080183b4 	.word	0x080183b4
 8004cdc:	080183dc 	.word	0x080183dc
 8004ce0:	200006b0 	.word	0x200006b0
 8004ce4:	20000808 	.word	0x20000808
 8004ce8:	08018404 	.word	0x08018404
 8004cec:	200009ae 	.word	0x200009ae
 8004cf0:	20000084 	.word	0x20000084
 8004cf4:	200007c4 	.word	0x200007c4
 8004cf8:	08018424 	.word	0x08018424
 8004cfc:	08018458 	.word	0x08018458
 8004d00:	200008d0 	.word	0x200008d0
 8004d04:	20000fec 	.word	0x20000fec
 8004d08:	0801847c 	.word	0x0801847c
 8004d0c:	0801830c 	.word	0x0801830c
 8004d10:	08018364 	.word	0x08018364
 8004d14:	080183b0 	.word	0x080183b0
 8004d18:	0801aa61 	.word	0x0801aa61
 8004d1c:	08018450 	.word	0x08018450
 8004d20:	20005714 	.word	0x20005714
 8004d24:	2000066e 	.word	0x2000066e
	memset(idString,0x00,MaxLengthOfAlias);
 8004d28:	2209      	movs	r2, #9
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	a805      	add	r0, sp, #20
 8004d2e:	f00e f9fc 	bl	801312a <memset>
	if(!recordSnippet && enableOutput)
 8004d32:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <CLI_CommandParser+0x41c>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <CLI_CommandParser+0x3f8>
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <CLI_CommandParser+0x406>
}
 8004d40:	b009      	add	sp, #36	; 0x24
 8004d42:	bcf0      	pop	{r4, r5, r6, r7}
 8004d44:	46bb      	mov	fp, r7
 8004d46:	46b2      	mov	sl, r6
 8004d48:	46a9      	mov	r9, r5
 8004d4a:	46a0      	mov	r8, r4
 8004d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004d4e:	2301      	movs	r3, #1
 8004d50:	425b      	negs	r3, r3
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	3333      	adds	r3, #51	; 0x33
 8004d56:	2238      	movs	r2, #56	; 0x38
 8004d58:	4903      	ldr	r1, [pc, #12]	; (8004d68 <CLI_CommandParser+0x420>)
 8004d5a:	4650      	mov	r0, sl
 8004d5c:	f008 ffc8 	bl	800dcf0 <writePxMutex>
}
 8004d60:	e7ee      	b.n	8004d40 <CLI_CommandParser+0x3f8>
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	200009dc 	.word	0x200009dc
 8004d68:	0801849c 	.word	0x0801849c

08004d6c <prvCLITask>:
void prvCLITask(void *pvParameters){
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	b084      	sub	sp, #16
	char cRxedChar ='\0';
 8004d70:	230f      	movs	r3, #15
 8004d72:	446b      	add	r3, sp
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8004d78:	2101      	movs	r1, #1
 8004d7a:	4249      	negs	r1, r1
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f00a fc59 	bl	800f634 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004d82:	f009 fa2f 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 8004d86:	0005      	movs	r5, r0
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8004d88:	4b46      	ldr	r3, [pc, #280]	; (8004ea4 <prvCLITask+0x138>)
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	23e1      	movs	r3, #225	; 0xe1
 8004d8e:	031b      	lsls	r3, r3, #12
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d00f      	beq.n	8004db4 <prvCLITask+0x48>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004d94:	2401      	movs	r4, #1
 8004d96:	e001      	b.n	8004d9c <prvCLITask+0x30>
 8004d98:	3401      	adds	r4, #1
 8004d9a:	b2e4      	uxtb	r4, r4
 8004d9c:	2c03      	cmp	r4, #3
 8004d9e:	d809      	bhi.n	8004db4 <prvCLITask+0x48>
			if(port != PcPort)
 8004da0:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <prvCLITask+0x13c>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	d0f7      	beq.n	8004d98 <prvCLITask+0x2c>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004da8:	21e1      	movs	r1, #225	; 0xe1
 8004daa:	0309      	lsls	r1, r1, #12
 8004dac:	0020      	movs	r0, r4
 8004dae:	f008 ffef 	bl	800dd90 <UpdateBaudrate>
 8004db2:	e7f1      	b.n	8004d98 <prvCLITask+0x2c>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8004db4:	4b3d      	ldr	r3, [pc, #244]	; (8004eac <prvCLITask+0x140>)
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	0053      	lsls	r3, r2, #1
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	4a3c      	ldr	r2, [pc, #240]	; (8004eb0 <prvCLITask+0x144>)
 8004dc0:	189b      	adds	r3, r3, r2
 8004dc2:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <prvCLITask+0x148>)
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	4c3c      	ldr	r4, [pc, #240]	; (8004eb8 <prvCLITask+0x14c>)
 8004dc8:	4e37      	ldr	r6, [pc, #220]	; (8004ea8 <prvCLITask+0x13c>)
 8004dca:	7831      	ldrb	r1, [r6, #0]
 8004dcc:	9100      	str	r1, [sp, #0]
 8004dce:	493b      	ldr	r1, [pc, #236]	; (8004ebc <prvCLITask+0x150>)
 8004dd0:	0020      	movs	r0, r4
 8004dd2:	f00e ff63 	bl	8013c9c <siprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8004dd6:	22a4      	movs	r2, #164	; 0xa4
 8004dd8:	7830      	ldrb	r0, [r6, #0]
 8004dda:	230a      	movs	r3, #10
 8004ddc:	0092      	lsls	r2, r2, #2
 8004dde:	4938      	ldr	r1, [pc, #224]	; (8004ec0 <prvCLITask+0x154>)
 8004de0:	f008 ffb6 	bl	800dd50 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8004de4:	0020      	movs	r0, r4
 8004de6:	f7fb f997 	bl	8000118 <strlen>
 8004dea:	b282      	uxth	r2, r0
 8004dec:	7830      	ldrb	r0, [r6, #0]
 8004dee:	230a      	movs	r3, #10
 8004df0:	0021      	movs	r1, r4
 8004df2:	f008 ffad 	bl	800dd50 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8004df6:	2400      	movs	r4, #0
 8004df8:	e01c      	b.n	8004e34 <prvCLITask+0xc8>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8004dfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ea8 <prvCLITask+0x13c>)
 8004dfc:	7818      	ldrb	r0, [r3, #0]
 8004dfe:	230a      	movs	r3, #10
 8004e00:	2202      	movs	r2, #2
 8004e02:	4930      	ldr	r1, [pc, #192]	; (8004ec4 <prvCLITask+0x158>)
 8004e04:	f008 ffa4 	bl	800dd50 <writePxITMutex>
				if(cInputIndex == 0){
 8004e08:	2c00      	cmp	r4, #0
 8004e0a:	d03d      	beq.n	8004e88 <prvCLITask+0x11c>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8004e0c:	4c2e      	ldr	r4, [pc, #184]	; (8004ec8 <prvCLITask+0x15c>)
 8004e0e:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <prvCLITask+0x13c>)
 8004e10:	7818      	ldrb	r0, [r3, #0]
 8004e12:	002b      	movs	r3, r5
 8004e14:	0022      	movs	r2, r4
 8004e16:	2101      	movs	r1, #1
 8004e18:	f7ff fd96 	bl	8004948 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8004e1c:	0021      	movs	r1, r4
 8004e1e:	482b      	ldr	r0, [pc, #172]	; (8004ecc <prvCLITask+0x160>)
 8004e20:	f00e ff77 	bl	8013d12 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8004e24:	2232      	movs	r2, #50	; 0x32
 8004e26:	2100      	movs	r1, #0
 8004e28:	0020      	movs	r0, r4
 8004e2a:	f00e f97e 	bl	801312a <memset>
				cInputIndex =0;
 8004e2e:	2400      	movs	r4, #0
		taskYIELD();
 8004e30:	f00a feca 	bl	800fbc8 <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <prvCLITask+0x164>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d1f9      	bne.n	8004e30 <prvCLITask+0xc4>
			cRxedChar = Rx_Data[PcPort - 1];
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <prvCLITask+0x13c>)
 8004e3e:	7818      	ldrb	r0, [r3, #0]
 8004e40:	1e42      	subs	r2, r0, #1
 8004e42:	4924      	ldr	r1, [pc, #144]	; (8004ed4 <prvCLITask+0x168>)
 8004e44:	5c8b      	ldrb	r3, [r1, r2]
 8004e46:	466e      	mov	r6, sp
 8004e48:	73f3      	strb	r3, [r6, #15]
			Rx_Data[PcPort - 1] = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	548b      	strb	r3, [r1, r2]
			Read_In_CLI_Task_Flag = 0;
 8004e4e:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <prvCLITask+0x164>)
 8004e50:	7013      	strb	r3, [r2, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 8004e52:	330a      	adds	r3, #10
 8004e54:	2201      	movs	r2, #1
 8004e56:	210f      	movs	r1, #15
 8004e58:	4469      	add	r1, sp
 8004e5a:	f008 ff79 	bl	800dd50 <writePxITMutex>
			if(cRxedChar == '\r'){
 8004e5e:	7bf3      	ldrb	r3, [r6, #15]
 8004e60:	2b0d      	cmp	r3, #13
 8004e62:	d0ca      	beq.n	8004dfa <prvCLITask+0x8e>
				if(cRxedChar == '\n'){
 8004e64:	2b0a      	cmp	r3, #10
 8004e66:	d0e3      	beq.n	8004e30 <prvCLITask+0xc4>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d012      	beq.n	8004e92 <prvCLITask+0x126>
 8004e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e6e:	d010      	beq.n	8004e92 <prvCLITask+0x126>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8004e70:	001a      	movs	r2, r3
 8004e72:	3a20      	subs	r2, #32
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	2a5e      	cmp	r2, #94	; 0x5e
 8004e78:	d8da      	bhi.n	8004e30 <prvCLITask+0xc4>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 8004e7a:	2c31      	cmp	r4, #49	; 0x31
 8004e7c:	dcd8      	bgt.n	8004e30 <prvCLITask+0xc4>
							cInputString[cInputIndex] =cRxedChar;
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <prvCLITask+0x15c>)
 8004e80:	5513      	strb	r3, [r2, r4]
							cInputIndex++;
 8004e82:	3401      	adds	r4, #1
 8004e84:	b264      	sxtb	r4, r4
 8004e86:	e7d3      	b.n	8004e30 <prvCLITask+0xc4>
					strcpy((char* )cInputString,(char* )cLastInputString);
 8004e88:	4910      	ldr	r1, [pc, #64]	; (8004ecc <prvCLITask+0x160>)
 8004e8a:	480f      	ldr	r0, [pc, #60]	; (8004ec8 <prvCLITask+0x15c>)
 8004e8c:	f00e ff41 	bl	8013d12 <strcpy>
 8004e90:	e7bc      	b.n	8004e0c <prvCLITask+0xa0>
					if(cInputIndex > 0){
 8004e92:	2c00      	cmp	r4, #0
 8004e94:	ddcc      	ble.n	8004e30 <prvCLITask+0xc4>
						cInputIndex--;
 8004e96:	3c01      	subs	r4, #1
 8004e98:	b264      	sxtb	r4, r4
						cInputString[cInputIndex] ='\0';
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvCLITask+0x15c>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	551a      	strb	r2, [r3, r4]
 8004ea0:	e7c6      	b.n	8004e30 <prvCLITask+0xc4>
 8004ea2:	46c0      	nop			; (mov r8, r8)
 8004ea4:	20005794 	.word	0x20005794
 8004ea8:	2000066e 	.word	0x2000066e
 8004eac:	20000086 	.word	0x20000086
 8004eb0:	08018200 	.word	0x08018200
 8004eb4:	20000084 	.word	0x20000084
 8004eb8:	200009b0 	.word	0x200009b0
 8004ebc:	080184d8 	.word	0x080184d8
 8004ec0:	08018504 	.word	0x08018504
 8004ec4:	08019d34 	.word	0x08019d34
 8004ec8:	200008e0 	.word	0x200008e0
 8004ecc:	2000097c 	.word	0x2000097c
 8004ed0:	20000677 	.word	0x20000677
 8004ed4:	20000a5c 	.word	0x20000a5c

08004ed8 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8004edc:	4b1c      	ldr	r3, [pc, #112]	; (8004f50 <ParseSnippetCommand+0x78>)
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	3a01      	subs	r2, #1
 8004ee2:	0093      	lsls	r3, r2, #2
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <ParseSnippetCommand+0x7c>)
 8004eea:	18d3      	adds	r3, r2, r3
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02c      	beq.n	8004f4c <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8004ef2:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <ParseSnippetCommand+0x80>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8004efa:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <ParseSnippetCommand+0x80>)
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	7833      	ldrb	r3, [r6, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d012      	beq.n	8004f2a <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8004f04:	2113      	movs	r1, #19
 8004f06:	0030      	movs	r0, r6
 8004f08:	f00e fef5 	bl	8013cf6 <strchr>
 8004f0c:	1e05      	subs	r5, r0, #0
	if(ptrEnd != NULL){
 8004f0e:	d011      	beq.n	8004f34 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8004f10:	1b82      	subs	r2, r0, r6
 8004f12:	0031      	movs	r1, r6
 8004f14:	0020      	movs	r0, r4
 8004f16:	f00e ff15 	bl	8013d44 <strncpy>
		ptrStart =ptrEnd + 1;
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <ParseSnippetCommand+0x80>)
 8004f1e:	601d      	str	r5, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8004f20:	2001      	movs	r0, #1
}
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
		ptrStart =snippetBuffer;
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <ParseSnippetCommand+0x80>)
 8004f26:	6018      	str	r0, [r3, #0]
 8004f28:	e7e7      	b.n	8004efa <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <ParseSnippetCommand+0x80>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
		return false;
 8004f30:	2000      	movs	r0, #0
 8004f32:	e7f6      	b.n	8004f22 <ParseSnippetCommand+0x4a>
		strcpy((char* )cliBuffer,ptrStart);
 8004f34:	0031      	movs	r1, r6
 8004f36:	0020      	movs	r0, r4
 8004f38:	f00e feeb 	bl	8013d12 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8004f3c:	0020      	movs	r0, r4
 8004f3e:	f7fb f8eb 	bl	8000118 <strlen>
 8004f42:	1836      	adds	r6, r6, r0
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <ParseSnippetCommand+0x80>)
 8004f46:	601e      	str	r6, [r3, #0]
	return true;
 8004f48:	2001      	movs	r0, #1
 8004f4a:	e7ea      	b.n	8004f22 <ParseSnippetCommand+0x4a>
		return false;
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	e7e8      	b.n	8004f22 <ParseSnippetCommand+0x4a>
 8004f50:	200009af 	.word	0x200009af
 8004f54:	200057b0 	.word	0x200057b0
 8004f58:	200009d8 	.word	0x200009d8

08004f5c <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8004f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8004f62:	0083      	lsls	r3, r0, #2
 8004f64:	181b      	adds	r3, r3, r0
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4a42      	ldr	r2, [pc, #264]	; (8005074 <CheckSnippetCondition+0x118>)
 8004f6a:	5c9b      	ldrb	r3, [r3, r2]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d004      	beq.n	8004f7a <CheckSnippetCondition+0x1e>
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d013      	beq.n	8004f9c <CheckSnippetCondition+0x40>
 8004f74:	2000      	movs	r0, #0
		default:
			break;
	}
	
	return false;
}
 8004f76:	b003      	add	sp, #12
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 8004f7a:	4a3e      	ldr	r2, [pc, #248]	; (8005074 <CheckSnippetCondition+0x118>)
 8004f7c:	0080      	lsls	r0, r0, #2
 8004f7e:	1903      	adds	r3, r0, r4
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	7899      	ldrb	r1, [r3, #2]
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 8004f86:	78da      	ldrb	r2, [r3, #3]
 8004f88:	00cb      	lsls	r3, r1, #3
 8004f8a:	185b      	adds	r3, r3, r1
 8004f8c:	493a      	ldr	r1, [pc, #232]	; (8005078 <CheckSnippetCondition+0x11c>)
 8004f8e:	5c5b      	ldrb	r3, [r3, r1]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <CheckSnippetCondition+0x3c>
				return false;
 8004f94:	2000      	movs	r0, #0
 8004f96:	e7ee      	b.n	8004f76 <CheckSnippetCondition+0x1a>
				return true;
 8004f98:	2001      	movs	r0, #1
 8004f9a:	e7ec      	b.n	8004f76 <CheckSnippetCondition+0x1a>
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 8004f9c:	4e35      	ldr	r6, [pc, #212]	; (8005074 <CheckSnippetCondition+0x118>)
 8004f9e:	0085      	lsls	r5, r0, #2
 8004fa0:	1829      	adds	r1, r5, r0
 8004fa2:	0089      	lsls	r1, r1, #2
 8004fa4:	1871      	adds	r1, r6, r1
 8004fa6:	78ca      	ldrb	r2, [r1, #3]
 8004fa8:	3a01      	subs	r2, #1
 8004faa:	0053      	lsls	r3, r2, #1
 8004fac:	189b      	adds	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4a32      	ldr	r2, [pc, #200]	; (800507c <CheckSnippetCondition+0x120>)
 8004fb2:	589b      	ldr	r3, [r3, r2]
 8004fb4:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004fb6:	3106      	adds	r1, #6
 8004fb8:	2204      	movs	r2, #4
 8004fba:	a801      	add	r0, sp, #4
 8004fbc:	f00e f8ac 	bl	8013118 <memcpy>
			switch(snippets[index].cond.mathOperator){
 8004fc0:	192d      	adds	r5, r5, r4
 8004fc2:	00ad      	lsls	r5, r5, #2
 8004fc4:	1975      	adds	r5, r6, r5
 8004fc6:	786b      	ldrb	r3, [r5, #1]
 8004fc8:	2b06      	cmp	r3, #6
 8004fca:	d845      	bhi.n	8005058 <CheckSnippetCondition+0xfc>
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a2c      	ldr	r2, [pc, #176]	; (8005080 <CheckSnippetCondition+0x124>)
 8004fd0:	58d3      	ldr	r3, [r2, r3]
 8004fd2:	469f      	mov	pc, r3
					if(flt1 == flt2)
 8004fd4:	1c39      	adds	r1, r7, #0
 8004fd6:	9801      	ldr	r0, [sp, #4]
 8004fd8:	f7fb fa7a 	bl	80004d0 <__aeabi_fcmpeq>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0ca      	beq.n	8004f76 <CheckSnippetCondition+0x1a>
						return true;
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	e7c8      	b.n	8004f76 <CheckSnippetCondition+0x1a>
					if(flt1 > flt2)
 8004fe4:	1c39      	adds	r1, r7, #0
 8004fe6:	9801      	ldr	r0, [sp, #4]
 8004fe8:	f7fb fa78 	bl	80004dc <__aeabi_fcmplt>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	d0c2      	beq.n	8004f76 <CheckSnippetCondition+0x1a>
						return true;
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	e7c0      	b.n	8004f76 <CheckSnippetCondition+0x1a>
					if(flt1 < flt2 && flt1 != 0.0f)
 8004ff4:	1c39      	adds	r1, r7, #0
 8004ff6:	9801      	ldr	r0, [sp, #4]
 8004ff8:	f7fb fa84 	bl	8000504 <__aeabi_fcmpgt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d02d      	beq.n	800505c <CheckSnippetCondition+0x100>
 8005000:	2100      	movs	r1, #0
 8005002:	1c38      	adds	r0, r7, #0
 8005004:	f7fb fa64 	bl	80004d0 <__aeabi_fcmpeq>
 8005008:	2800      	cmp	r0, #0
 800500a:	d029      	beq.n	8005060 <CheckSnippetCondition+0x104>
	return false;
 800500c:	2000      	movs	r0, #0
 800500e:	e7b2      	b.n	8004f76 <CheckSnippetCondition+0x1a>
					if(flt1 >= flt2)
 8005010:	1c39      	adds	r1, r7, #0
 8005012:	9801      	ldr	r0, [sp, #4]
 8005014:	f7fb fa6c 	bl	80004f0 <__aeabi_fcmple>
 8005018:	2800      	cmp	r0, #0
 800501a:	d0ac      	beq.n	8004f76 <CheckSnippetCondition+0x1a>
						return true;
 800501c:	2001      	movs	r0, #1
 800501e:	e7aa      	b.n	8004f76 <CheckSnippetCondition+0x1a>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005020:	1c39      	adds	r1, r7, #0
 8005022:	9801      	ldr	r0, [sp, #4]
 8005024:	f7fb fa78 	bl	8000518 <__aeabi_fcmpge>
 8005028:	2800      	cmp	r0, #0
 800502a:	d01b      	beq.n	8005064 <CheckSnippetCondition+0x108>
 800502c:	2100      	movs	r1, #0
 800502e:	1c38      	adds	r0, r7, #0
 8005030:	f7fb fa4e 	bl	80004d0 <__aeabi_fcmpeq>
 8005034:	2800      	cmp	r0, #0
 8005036:	d017      	beq.n	8005068 <CheckSnippetCondition+0x10c>
	return false;
 8005038:	2000      	movs	r0, #0
 800503a:	e79c      	b.n	8004f76 <CheckSnippetCondition+0x1a>
					if(flt1 != flt2 && flt1 != 0.0f)
 800503c:	1c39      	adds	r1, r7, #0
 800503e:	9801      	ldr	r0, [sp, #4]
 8005040:	f7fb fa46 	bl	80004d0 <__aeabi_fcmpeq>
 8005044:	2800      	cmp	r0, #0
 8005046:	d111      	bne.n	800506c <CheckSnippetCondition+0x110>
 8005048:	2100      	movs	r1, #0
 800504a:	1c38      	adds	r0, r7, #0
 800504c:	f7fb fa40 	bl	80004d0 <__aeabi_fcmpeq>
 8005050:	2800      	cmp	r0, #0
 8005052:	d00d      	beq.n	8005070 <CheckSnippetCondition+0x114>
	return false;
 8005054:	2000      	movs	r0, #0
 8005056:	e78e      	b.n	8004f76 <CheckSnippetCondition+0x1a>
			switch(snippets[index].cond.mathOperator){
 8005058:	2000      	movs	r0, #0
 800505a:	e78c      	b.n	8004f76 <CheckSnippetCondition+0x1a>
	return false;
 800505c:	2000      	movs	r0, #0
 800505e:	e78a      	b.n	8004f76 <CheckSnippetCondition+0x1a>
						return true;
 8005060:	2001      	movs	r0, #1
 8005062:	e788      	b.n	8004f76 <CheckSnippetCondition+0x1a>
	return false;
 8005064:	2000      	movs	r0, #0
 8005066:	e786      	b.n	8004f76 <CheckSnippetCondition+0x1a>
						return true;
 8005068:	2001      	movs	r0, #1
 800506a:	e784      	b.n	8004f76 <CheckSnippetCondition+0x1a>
	return false;
 800506c:	2000      	movs	r0, #0
 800506e:	e782      	b.n	8004f76 <CheckSnippetCondition+0x1a>
						return true;
 8005070:	2001      	movs	r0, #1
 8005072:	e780      	b.n	8004f76 <CheckSnippetCondition+0x1a>
 8005074:	200057b0 	.word	0x200057b0
 8005078:	20001360 	.word	0x20001360
 800507c:	200000f4 	.word	0x200000f4
 8005080:	08018798 	.word	0x08018798

08005084 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 8005084:	b570      	push	{r4, r5, r6, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005086:	f009 f8ad 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 800508a:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 800508c:	2400      	movs	r4, #0
 800508e:	e01b      	b.n	80050c8 <ExecuteSnippet+0x44>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <ExecuteSnippet+0x74>)
 8005092:	7818      	ldrb	r0, [r3, #0]
 8005094:	0033      	movs	r3, r6
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <ExecuteSnippet+0x78>)
 8005098:	2100      	movs	r1, #0
 800509a:	f7ff fc55 	bl	8004948 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800509e:	0030      	movs	r0, r6
 80050a0:	f7fb f83a 	bl	8000118 <strlen>
 80050a4:	0002      	movs	r2, r0
 80050a6:	2100      	movs	r1, #0
 80050a8:	0030      	movs	r0, r6
 80050aa:	f00e f83e 	bl	801312a <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80050ae:	00ab      	lsls	r3, r5, #2
 80050b0:	195b      	adds	r3, r3, r5
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4a12      	ldr	r2, [pc, #72]	; (8005100 <ExecuteSnippet+0x7c>)
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	68d8      	ldr	r0, [r3, #12]
 80050ba:	4910      	ldr	r1, [pc, #64]	; (80050fc <ExecuteSnippet+0x78>)
 80050bc:	f7ff ff0c 	bl	8004ed8 <ParseSnippetCommand>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d1e5      	bne.n	8005090 <ExecuteSnippet+0xc>
	for(s =0; s < numOfRecordedSnippets; s++){
 80050c4:	3401      	adds	r4, #1
 80050c6:	b2a4      	uxth	r4, r4
 80050c8:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <ExecuteSnippet+0x80>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	d911      	bls.n	80050f4 <ExecuteSnippet+0x70>
		if(snippets[s].state)								// Check for activated Snippets
 80050d0:	0025      	movs	r5, r4
 80050d2:	00a3      	lsls	r3, r4, #2
 80050d4:	191b      	adds	r3, r3, r4
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a09      	ldr	r2, [pc, #36]	; (8005100 <ExecuteSnippet+0x7c>)
 80050da:	18d3      	adds	r3, r2, r3
 80050dc:	7c1b      	ldrb	r3, [r3, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80050e2:	b2e0      	uxtb	r0, r4
 80050e4:	f7ff ff3a 	bl	8004f5c <CheckSnippetCondition>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d0eb      	beq.n	80050c4 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <ExecuteSnippet+0x84>)
 80050ee:	2220      	movs	r2, #32
 80050f0:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80050f2:	e7dc      	b.n	80050ae <ExecuteSnippet+0x2a>
			}
		}
	}
	
	return result;
}
 80050f4:	2000      	movs	r0, #0
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	2000066e 	.word	0x2000066e
 80050fc:	20000948 	.word	0x20000948
 8005100:	200057b0 	.word	0x200057b0
 8005104:	200009af 	.word	0x200009af
 8005108:	20005714 	.word	0x20005714

0800510c <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	b083      	sub	sp, #12
 8005110:	0006      	movs	r6, r0
 8005112:	0014      	movs	r4, r2
 8005114:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005116:	9501      	str	r5, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005118:	9500      	str	r5, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800511a:	aa01      	add	r2, sp, #4
 800511c:	2101      	movs	r1, #1
 800511e:	0020      	movs	r0, r4
 8005120:	f009 f864 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005124:	2300      	movs	r3, #0
 8005126:	56c3      	ldrsb	r3, [r0, r3]
 8005128:	2b70      	cmp	r3, #112	; 0x70
 800512a:	d017      	beq.n	800515c <setBaudrateCommand+0x50>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
	}
	else{
		result =BOS_ERR_WrongValue;
 800512c:	2768      	movs	r7, #104	; 0x68
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800512e:	466a      	mov	r2, sp
 8005130:	2102      	movs	r1, #2
 8005132:	0020      	movs	r0, r4
 8005134:	f009 f85a 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005138:	f00d ffa1 	bl	801307e <atol>
 800513c:	0004      	movs	r4, r0
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
 800513e:	2f68      	cmp	r7, #104	; 0x68
 8005140:	d012      	beq.n	8005168 <setBaudrateCommand+0x5c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
	}
	else{
		UpdateBaudrate(port,baudrate);
 8005142:	0001      	movs	r1, r0
 8005144:	0028      	movs	r0, r5
 8005146:	f008 fe23 	bl	800dd90 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800514a:	002b      	movs	r3, r5
 800514c:	0022      	movs	r2, r4
 800514e:	4909      	ldr	r1, [pc, #36]	; (8005174 <setBaudrateCommand+0x68>)
 8005150:	0030      	movs	r0, r6
 8005152:	f00e fda3 	bl	8013c9c <siprintf>
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005156:	2000      	movs	r0, #0
 8005158:	b003      	add	sp, #12
 800515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800515c:	3001      	adds	r0, #1
 800515e:	f00d ff8e 	bl	801307e <atol>
 8005162:	b2c5      	uxtb	r5, r0
	BOS_Status result =BOS_OK;
 8005164:	2700      	movs	r7, #0
 8005166:	e7e2      	b.n	800512e <setBaudrateCommand+0x22>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005168:	2213      	movs	r2, #19
 800516a:	4903      	ldr	r1, [pc, #12]	; (8005178 <setBaudrateCommand+0x6c>)
 800516c:	0030      	movs	r0, r6
 800516e:	f00d ffd3 	bl	8013118 <memcpy>
 8005172:	e7f0      	b.n	8005156 <setBaudrateCommand+0x4a>
 8005174:	080187c8 	.word	0x080187c8
 8005178:	080187b4 	.word	0x080187b4

0800517c <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800517c:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <flashsizeCommand+0x14>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	0412      	lsls	r2, r2, #16
 8005184:	0c12      	lsrs	r2, r2, #16
 8005186:	4903      	ldr	r1, [pc, #12]	; (8005194 <flashsizeCommand+0x18>)
 8005188:	f00e fd88 	bl	8013c9c <siprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800518c:	2000      	movs	r0, #0
 800518e:	bd10      	pop	{r4, pc}
 8005190:	1ffff7cc 	.word	0x1ffff7cc
 8005194:	080187f0 	.word	0x080187f0

08005198 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005198:	b510      	push	{r4, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	0004      	movs	r4, r0
 800519e:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80051a8:	aa01      	add	r2, sp, #4
 80051aa:	2101      	movs	r1, #1
 80051ac:	f009 f81e 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80051b0:	2300      	movs	r3, #0
 80051b2:	56c3      	ldrsb	r3, [r0, r3]
 80051b4:	3b32      	subs	r3, #50	; 0x32
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d907      	bls.n	80051cc <GetReadPrecentageCommand+0x34>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80051bc:	2215      	movs	r2, #21
 80051be:	490b      	ldr	r1, [pc, #44]	; (80051ec <GetReadPrecentageCommand+0x54>)
 80051c0:	0020      	movs	r0, r4
 80051c2:	f00d ffa9 	bl	8013118 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80051c6:	2000      	movs	r0, #0
 80051c8:	b002      	add	sp, #8
 80051ca:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80051cc:	f00d ff57 	bl	801307e <atol>
 80051d0:	b2c0      	uxtb	r0, r0
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80051d2:	4669      	mov	r1, sp
 80051d4:	f007 fc9a 	bl	800cb0c <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80051d8:	9800      	ldr	r0, [sp, #0]
 80051da:	f7fd fc75 	bl	8002ac8 <__aeabi_f2d>
 80051de:	0002      	movs	r2, r0
 80051e0:	000b      	movs	r3, r1
 80051e2:	4903      	ldr	r1, [pc, #12]	; (80051f0 <GetReadPrecentageCommand+0x58>)
 80051e4:	0020      	movs	r0, r4
 80051e6:	f00e fd59 	bl	8013c9c <siprintf>
 80051ea:	e7ec      	b.n	80051c6 <GetReadPrecentageCommand+0x2e>
 80051ec:	08018834 	.word	0x08018834
 80051f0:	08018810 	.word	0x08018810

080051f4 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80051f4:	b510      	push	{r4, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005200:	4669      	mov	r1, sp
 8005202:	a801      	add	r0, sp, #4
 8005204:	f007 fbc2 	bl	800c98c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005208:	a901      	add	r1, sp, #4
 800520a:	0020      	movs	r0, r4
 800520c:	f00e fd81 	bl	8013d12 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005210:	9800      	ldr	r0, [sp, #0]
 8005212:	f7fd fc59 	bl	8002ac8 <__aeabi_f2d>
 8005216:	0002      	movs	r2, r0
 8005218:	000b      	movs	r3, r1
 800521a:	4903      	ldr	r1, [pc, #12]	; (8005228 <ReadVrefCommand+0x34>)
 800521c:	0020      	movs	r0, r4
 800521e:	f00e fd3d 	bl	8013c9c <siprintf>
}
 8005222:	2000      	movs	r0, #0
 8005224:	b002      	add	sp, #8
 8005226:	bd10      	pop	{r4, pc}
 8005228:	0801884c 	.word	0x0801884c

0800522c <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800522c:	b510      	push	{r4, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005232:	2300      	movs	r3, #0
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005238:	4669      	mov	r1, sp
 800523a:	a801      	add	r0, sp, #4
 800523c:	f007 fba6 	bl	800c98c <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005240:	a901      	add	r1, sp, #4
 8005242:	0020      	movs	r0, r4
 8005244:	f00e fd65 	bl	8013d12 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 8005248:	9801      	ldr	r0, [sp, #4]
 800524a:	f7fd fc3d 	bl	8002ac8 <__aeabi_f2d>
 800524e:	0002      	movs	r2, r0
 8005250:	000b      	movs	r3, r1
 8005252:	4903      	ldr	r1, [pc, #12]	; (8005260 <ReadTempCommand+0x34>)
 8005254:	0020      	movs	r0, r4
 8005256:	f00e fd21 	bl	8013c9c <siprintf>
}
 800525a:	2000      	movs	r0, #0
 800525c:	b002      	add	sp, #8
 800525e:	bd10      	pop	{r4, pc}
 8005260:	08018874 	.word	0x08018874

08005264 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	0006      	movs	r6, r0
 800526a:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800526c:	2300      	movs	r3, #0
 800526e:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005270:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005272:	2300      	movs	r3, #0
 8005274:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005276:	aa03      	add	r2, sp, #12
 8005278:	2101      	movs	r1, #1
 800527a:	0020      	movs	r0, r4
 800527c:	f008 ffb6 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005280:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005282:	aa02      	add	r2, sp, #8
 8005284:	2102      	movs	r1, #2
 8005286:	0020      	movs	r0, r4
 8005288:	f008 ffb0 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 800528c:	0004      	movs	r4, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800528e:	2300      	movs	r3, #0
 8005290:	56eb      	ldrsb	r3, [r5, r3]
 8005292:	3b32      	subs	r3, #50	; 0x32
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b01      	cmp	r3, #1
 8005298:	d907      	bls.n	80052aa <ADCReadCommand+0x46>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800529a:	2215      	movs	r2, #21
 800529c:	4919      	ldr	r1, [pc, #100]	; (8005304 <ADCReadCommand+0xa0>)
 800529e:	0030      	movs	r0, r6
 80052a0:	f00d ff3a 	bl	8013118 <memcpy>
}
 80052a4:	2000      	movs	r0, #0
 80052a6:	b004      	add	sp, #16
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80052aa:	0028      	movs	r0, r5
 80052ac:	f00d fee7 	bl	801307e <atol>
 80052b0:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80052b2:	4915      	ldr	r1, [pc, #84]	; (8005308 <ADCReadCommand+0xa4>)
 80052b4:	0020      	movs	r0, r4
 80052b6:	f7fa ff25 	bl	8000104 <strcmp>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d005      	beq.n	80052ca <ADCReadCommand+0x66>
 80052be:	4913      	ldr	r1, [pc, #76]	; (800530c <ADCReadCommand+0xa8>)
 80052c0:	0020      	movs	r0, r4
 80052c2:	f7fa ff1f 	bl	8000104 <strcmp>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d116      	bne.n	80052f8 <ADCReadCommand+0x94>
			ADCSelectChannel(ADCports,ADC_Side);
 80052ca:	4c0f      	ldr	r4, [pc, #60]	; (8005308 <ADCReadCommand+0xa4>)
 80052cc:	0021      	movs	r1, r4
 80052ce:	0028      	movs	r0, r5
 80052d0:	f007 fd02 	bl	800ccd8 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80052d4:	aa01      	add	r2, sp, #4
 80052d6:	0021      	movs	r1, r4
 80052d8:	0028      	movs	r0, r5
 80052da:	f007 fd2f 	bl	800cd3c <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80052de:	a901      	add	r1, sp, #4
 80052e0:	0030      	movs	r0, r6
 80052e2:	f00e fd16 	bl	8013d12 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 80052e6:	9801      	ldr	r0, [sp, #4]
 80052e8:	f7fb f952 	bl	8000590 <__aeabi_f2uiz>
 80052ec:	b282      	uxth	r2, r0
 80052ee:	4908      	ldr	r1, [pc, #32]	; (8005310 <ADCReadCommand+0xac>)
 80052f0:	0030      	movs	r0, r6
 80052f2:	f00e fcd3 	bl	8013c9c <siprintf>
 80052f6:	e7d5      	b.n	80052a4 <ADCReadCommand+0x40>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80052f8:	2212      	movs	r2, #18
 80052fa:	4906      	ldr	r1, [pc, #24]	; (8005314 <ADCReadCommand+0xb0>)
 80052fc:	0030      	movs	r0, r6
 80052fe:	f00d ff0b 	bl	8013118 <memcpy>
 8005302:	e7cf      	b.n	80052a4 <ADCReadCommand+0x40>
 8005304:	08018834 	.word	0x08018834
 8005308:	08018898 	.word	0x08018898
 800530c:	0801889c 	.word	0x0801889c
 8005310:	080188a4 	.word	0x080188a4
 8005314:	080188b4 	.word	0x080188b4

08005318 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005318:	b570      	push	{r4, r5, r6, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	0005      	movs	r5, r0
 800531e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005320:	2300      	movs	r3, #0
 8005322:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 8005324:	4b5e      	ldr	r3, [pc, #376]	; (80054a0 <testportCommand+0x188>)
 8005326:	781a      	ldrb	r2, [r3, #0]
 8005328:	ab02      	add	r3, sp, #8
 800532a:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800532c:	aa03      	add	r2, sp, #12
 800532e:	2101      	movs	r1, #1
 8005330:	f008 ff5c 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005334:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 8005336:	495b      	ldr	r1, [pc, #364]	; (80054a4 <testportCommand+0x18c>)
 8005338:	f7fa fee4 	bl	8000104 <strcmp>
 800533c:	2800      	cmp	r0, #0
 800533e:	d169      	bne.n	8005414 <testportCommand+0xfc>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005340:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <testportCommand+0x190>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	3b01      	subs	r3, #1
 8005346:	4a59      	ldr	r2, [pc, #356]	; (80054ac <testportCommand+0x194>)
 8005348:	5cd6      	ldrb	r6, [r2, r3]
		for(ports =1; ports <= NumOfPorts; ports++){
 800534a:	2401      	movs	r4, #1
 800534c:	e014      	b.n	8005378 <testportCommand+0x60>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 800534e:	0022      	movs	r2, r4
 8005350:	4957      	ldr	r1, [pc, #348]	; (80054b0 <testportCommand+0x198>)
 8005352:	0028      	movs	r0, r5
 8005354:	f00e fca2 	bl	8013c9c <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005358:	0028      	movs	r0, r5
 800535a:	f7fa fedd 	bl	8000118 <strlen>
 800535e:	b282      	uxth	r2, r0
 8005360:	4b51      	ldr	r3, [pc, #324]	; (80054a8 <testportCommand+0x190>)
 8005362:	7818      	ldrb	r0, [r3, #0]
 8005364:	2364      	movs	r3, #100	; 0x64
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	3b5a      	subs	r3, #90	; 0x5a
 800536a:	0029      	movs	r1, r5
 800536c:	f008 fcc0 	bl	800dcf0 <writePxMutex>
 8005370:	e02f      	b.n	80053d2 <testportCommand+0xba>
				LastEnter++;
 8005372:	000e      	movs	r6, r1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005374:	3401      	adds	r4, #1
 8005376:	b2e4      	uxtb	r4, r4
 8005378:	2c03      	cmp	r4, #3
 800537a:	d854      	bhi.n	8005426 <testportCommand+0x10e>
			if(PcPort != ports){
 800537c:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <testportCommand+0x190>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	42a3      	cmp	r3, r4
 8005382:	d0f7      	beq.n	8005374 <testportCommand+0x5c>
				WriteVaule[0] =rand();
 8005384:	f00e fbfc 	bl	8013b80 <rand>
 8005388:	466b      	mov	r3, sp
 800538a:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 800538c:	2364      	movs	r3, #100	; 0x64
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	3b5a      	subs	r3, #90	; 0x5a
 8005392:	2201      	movs	r2, #1
 8005394:	a902      	add	r1, sp, #8
 8005396:	0020      	movs	r0, r4
 8005398:	f008 fcaa 	bl	800dcf0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800539c:	0020      	movs	r0, r4
 800539e:	f008 fc93 	bl	800dcc8 <GetUart>
 80053a2:	6803      	ldr	r3, [r0, #0]
 80053a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80053a6:	b2db      	uxtb	r3, r3
				if(WriteVaule[0] == ReadValue[0])
 80053a8:	466a      	mov	r2, sp
 80053aa:	7a12      	ldrb	r2, [r2, #8]
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d0ce      	beq.n	800534e <testportCommand+0x36>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 80053b0:	0022      	movs	r2, r4
 80053b2:	4940      	ldr	r1, [pc, #256]	; (80054b4 <testportCommand+0x19c>)
 80053b4:	0028      	movs	r0, r5
 80053b6:	f00e fc71 	bl	8013c9c <siprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80053ba:	0028      	movs	r0, r5
 80053bc:	f7fa feac 	bl	8000118 <strlen>
 80053c0:	b282      	uxth	r2, r0
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <testportCommand+0x190>)
 80053c4:	7818      	ldrb	r0, [r3, #0]
 80053c6:	2364      	movs	r3, #100	; 0x64
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	3b5a      	subs	r3, #90	; 0x5a
 80053cc:	0029      	movs	r1, r5
 80053ce:	f008 fc8f 	bl	800dcf0 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80053d2:	2254      	movs	r2, #84	; 0x54
 80053d4:	4938      	ldr	r1, [pc, #224]	; (80054b8 <testportCommand+0x1a0>)
 80053d6:	0028      	movs	r0, r5
 80053d8:	f00d fe9e 	bl	8013118 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80053dc:	0028      	movs	r0, r5
 80053de:	f7fa fe9b 	bl	8000118 <strlen>
 80053e2:	b282      	uxth	r2, r0
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <testportCommand+0x190>)
 80053e6:	7818      	ldrb	r0, [r3, #0]
 80053e8:	2364      	movs	r3, #100	; 0x64
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	3b5a      	subs	r3, #90	; 0x5a
 80053ee:	0029      	movs	r1, r5
 80053f0:	f008 fc7e 	bl	800dcf0 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <testportCommand+0x190>)
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	3a01      	subs	r2, #1
 80053fa:	1c71      	adds	r1, r6, #1
 80053fc:	0053      	lsls	r3, r2, #1
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	4a2e      	ldr	r2, [pc, #184]	; (80054bc <testportCommand+0x1a4>)
 8005404:	18d3      	adds	r3, r2, r3
 8005406:	5c5b      	ldrb	r3, [r3, r1]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1b2      	bne.n	8005372 <testportCommand+0x5a>
					Delay_ms(1);
 800540c:	2001      	movs	r0, #1
 800540e:	f00a fd55 	bl	800febc <HAL_Delay>
 8005412:	e7ef      	b.n	80053f4 <testportCommand+0xdc>
	else if(pcParameterString1[0] == 'p'){
 8005414:	2300      	movs	r3, #0
 8005416:	56e3      	ldrsb	r3, [r4, r3]
 8005418:	2b70      	cmp	r3, #112	; 0x70
 800541a:	d007      	beq.n	800542c <testportCommand+0x114>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800541c:	220f      	movs	r2, #15
 800541e:	4928      	ldr	r1, [pc, #160]	; (80054c0 <testportCommand+0x1a8>)
 8005420:	0028      	movs	r0, r5
 8005422:	f00d fe79 	bl	8013118 <memcpy>
}
 8005426:	2000      	movs	r0, #0
 8005428:	b004      	add	sp, #16
 800542a:	bd70      	pop	{r4, r5, r6, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800542c:	1c60      	adds	r0, r4, #1
 800542e:	f00d fe26 	bl	801307e <atol>
 8005432:	0004      	movs	r4, r0
 8005434:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005436:	1e73      	subs	r3, r6, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d90b      	bls.n	8005456 <testportCommand+0x13e>
			result =BOS_ERR_WrongID;
 800543e:	2366      	movs	r3, #102	; 0x66
		else if(result == BOS_ERR_WrongID)
 8005440:	2b66      	cmp	r3, #102	; 0x66
 8005442:	d027      	beq.n	8005494 <testportCommand+0x17c>
		else if(result == BOS_ERR_Keyword)
 8005444:	2b06      	cmp	r3, #6
 8005446:	d1ee      	bne.n	8005426 <testportCommand+0x10e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	4022      	ands	r2, r4
 800544c:	4919      	ldr	r1, [pc, #100]	; (80054b4 <testportCommand+0x19c>)
 800544e:	0028      	movs	r0, r5
 8005450:	f00e fc24 	bl	8013c9c <siprintf>
 8005454:	e7e7      	b.n	8005426 <testportCommand+0x10e>
				WriteVaule[0] =rand();
 8005456:	f00e fb93 	bl	8013b80 <rand>
 800545a:	466b      	mov	r3, sp
 800545c:	7218      	strb	r0, [r3, #8]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 800545e:	2364      	movs	r3, #100	; 0x64
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	3b32      	subs	r3, #50	; 0x32
 8005464:	2201      	movs	r2, #1
 8005466:	a902      	add	r1, sp, #8
 8005468:	0030      	movs	r0, r6
 800546a:	f008 fc41 	bl	800dcf0 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800546e:	2000      	movs	r0, #0
 8005470:	f008 fc2a 	bl	800dcc8 <GetUart>
 8005474:	6803      	ldr	r3, [r0, #0]
 8005476:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005478:	b2db      	uxtb	r3, r3
			if(WriteVaule[0] == ReadValue[0])
 800547a:	466a      	mov	r2, sp
 800547c:	7a12      	ldrb	r2, [r2, #8]
 800547e:	4293      	cmp	r3, r2
 8005480:	d001      	beq.n	8005486 <testportCommand+0x16e>
				result =BOS_ERR_Keyword;
 8005482:	2306      	movs	r3, #6
 8005484:	e7dc      	b.n	8005440 <testportCommand+0x128>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005486:	22ff      	movs	r2, #255	; 0xff
 8005488:	4022      	ands	r2, r4
 800548a:	4909      	ldr	r1, [pc, #36]	; (80054b0 <testportCommand+0x198>)
 800548c:	0028      	movs	r0, r5
 800548e:	f00e fc05 	bl	8013c9c <siprintf>
 8005492:	e7c8      	b.n	8005426 <testportCommand+0x10e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005494:	221b      	movs	r2, #27
 8005496:	490b      	ldr	r1, [pc, #44]	; (80054c4 <testportCommand+0x1ac>)
 8005498:	0028      	movs	r0, r5
 800549a:	f00d fe3d 	bl	8013118 <memcpy>
 800549e:	e7c2      	b.n	8005426 <testportCommand+0x10e>
 80054a0:	08018978 	.word	0x08018978
 80054a4:	08017d18 	.word	0x08017d18
 80054a8:	2000066e 	.word	0x2000066e
 80054ac:	20000ca0 	.word	0x20000ca0
 80054b0:	080188c8 	.word	0x080188c8
 80054b4:	080188e4 	.word	0x080188e4
 80054b8:	080188f8 	.word	0x080188f8
 80054bc:	20000a60 	.word	0x20000a60
 80054c0:	08018968 	.word	0x08018968
 80054c4:	0801894c 	.word	0x0801894c

080054c8 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ca:	46c6      	mov	lr, r8
 80054cc:	b500      	push	{lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	0005      	movs	r5, r0
 80054d2:	0014      	movs	r4, r2
 80054d4:	2600      	movs	r6, #0
 80054d6:	2700      	movs	r7, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80054d8:	9601      	str	r6, [sp, #4]
 80054da:	9600      	str	r6, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80054dc:	aa01      	add	r2, sp, #4
 80054de:	2101      	movs	r1, #1
 80054e0:	0020      	movs	r0, r4
 80054e2:	f008 fe83 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80054e6:	2300      	movs	r3, #0
 80054e8:	56c3      	ldrsb	r3, [r0, r3]
 80054ea:	2b70      	cmp	r3, #112	; 0x70
 80054ec:	d019      	beq.n	8005522 <unbridgeCommand+0x5a>
		result =BOS_ERR_WrongParam;
 80054ee:	2367      	movs	r3, #103	; 0x67
 80054f0:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80054f2:	466a      	mov	r2, sp
 80054f4:	2102      	movs	r1, #2
 80054f6:	0020      	movs	r0, r4
 80054f8:	f008 fe78 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80054fc:	2300      	movs	r3, #0
 80054fe:	56c3      	ldrsb	r3, [r0, r3]
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d015      	beq.n	8005530 <unbridgeCommand+0x68>
		result =BOS_ERR_WrongParam;
 8005504:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 8005506:	2800      	cmp	r0, #0
 8005508:	d020      	beq.n	800554c <unbridgeCommand+0x84>
	else if(result == BOS_ERR_WrongParam)
 800550a:	2867      	cmp	r0, #103	; 0x67
 800550c:	d025      	beq.n	800555a <unbridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800550e:	2219      	movs	r2, #25
 8005510:	4915      	ldr	r1, [pc, #84]	; (8005568 <unbridgeCommand+0xa0>)
 8005512:	0028      	movs	r0, r5
 8005514:	f00d fe00 	bl	8013118 <memcpy>
}
 8005518:	2000      	movs	r0, #0
 800551a:	b002      	add	sp, #8
 800551c:	bc80      	pop	{r7}
 800551e:	46b8      	mov	r8, r7
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005522:	3001      	adds	r0, #1
 8005524:	f00d fdab 	bl	801307e <atol>
 8005528:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	4698      	mov	r8, r3
 800552e:	e7e0      	b.n	80054f2 <unbridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005530:	3001      	adds	r0, #1
 8005532:	f00d fda4 	bl	801307e <atol>
 8005536:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 8005538:	4643      	mov	r3, r8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <unbridgeCommand+0x7a>
		result =BOS_ERR_WrongParam;
 800553e:	2067      	movs	r0, #103	; 0x67
 8005540:	e7e3      	b.n	800550a <unbridgeCommand+0x42>
		result =Unbridge(port1,port2);
 8005542:	0039      	movs	r1, r7
 8005544:	0030      	movs	r0, r6
 8005546:	f7fe feff 	bl	8004348 <Unbridge>
 800554a:	e7dc      	b.n	8005506 <unbridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 800554c:	003b      	movs	r3, r7
 800554e:	0032      	movs	r2, r6
 8005550:	4906      	ldr	r1, [pc, #24]	; (800556c <unbridgeCommand+0xa4>)
 8005552:	0028      	movs	r0, r5
 8005554:	f00e fba2 	bl	8013c9c <siprintf>
 8005558:	e7de      	b.n	8005518 <unbridgeCommand+0x50>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800555a:	220f      	movs	r2, #15
 800555c:	4904      	ldr	r1, [pc, #16]	; (8005570 <unbridgeCommand+0xa8>)
 800555e:	0028      	movs	r0, r5
 8005560:	f00d fdda 	bl	8013118 <memcpy>
 8005564:	e7d8      	b.n	8005518 <unbridgeCommand+0x50>
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	0801899c 	.word	0x0801899c
 800556c:	0801897c 	.word	0x0801897c
 8005570:	08018968 	.word	0x08018968

08005574 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005576:	46c6      	mov	lr, r8
 8005578:	b500      	push	{lr}
 800557a:	b082      	sub	sp, #8
 800557c:	0005      	movs	r5, r0
 800557e:	0014      	movs	r4, r2
 8005580:	2600      	movs	r6, #0
 8005582:	2700      	movs	r7, #0
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005584:	9601      	str	r6, [sp, #4]
 8005586:	9600      	str	r6, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005588:	aa01      	add	r2, sp, #4
 800558a:	2101      	movs	r1, #1
 800558c:	0020      	movs	r0, r4
 800558e:	f008 fe2d 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005592:	2300      	movs	r3, #0
 8005594:	56c3      	ldrsb	r3, [r0, r3]
 8005596:	2b70      	cmp	r3, #112	; 0x70
 8005598:	d019      	beq.n	80055ce <bridgeCommand+0x5a>
		result =BOS_ERR_WrongParam;
 800559a:	2367      	movs	r3, #103	; 0x67
 800559c:	4698      	mov	r8, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800559e:	466a      	mov	r2, sp
 80055a0:	2102      	movs	r1, #2
 80055a2:	0020      	movs	r0, r4
 80055a4:	f008 fe22 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80055a8:	2300      	movs	r3, #0
 80055aa:	56c3      	ldrsb	r3, [r0, r3]
 80055ac:	2b70      	cmp	r3, #112	; 0x70
 80055ae:	d015      	beq.n	80055dc <bridgeCommand+0x68>
		result =BOS_ERR_WrongParam;
 80055b0:	2067      	movs	r0, #103	; 0x67
	if(result == BOS_OK)
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d020      	beq.n	80055f8 <bridgeCommand+0x84>
	else if(result == BOS_ERR_WrongParam)
 80055b6:	2867      	cmp	r0, #103	; 0x67
 80055b8:	d025      	beq.n	8005606 <bridgeCommand+0x92>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80055ba:	2217      	movs	r2, #23
 80055bc:	4915      	ldr	r1, [pc, #84]	; (8005614 <bridgeCommand+0xa0>)
 80055be:	0028      	movs	r0, r5
 80055c0:	f00d fdaa 	bl	8013118 <memcpy>
}
 80055c4:	2000      	movs	r0, #0
 80055c6:	b002      	add	sp, #8
 80055c8:	bc80      	pop	{r7}
 80055ca:	46b8      	mov	r8, r7
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80055ce:	3001      	adds	r0, #1
 80055d0:	f00d fd55 	bl	801307e <atol>
 80055d4:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	4698      	mov	r8, r3
 80055da:	e7e0      	b.n	800559e <bridgeCommand+0x2a>
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80055dc:	3001      	adds	r0, #1
 80055de:	f00d fd4e 	bl	801307e <atol>
 80055e2:	b2c7      	uxtb	r7, r0
	if(result == BOS_OK)
 80055e4:	4643      	mov	r3, r8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <bridgeCommand+0x7a>
		result =BOS_ERR_WrongParam;
 80055ea:	2067      	movs	r0, #103	; 0x67
 80055ec:	e7e3      	b.n	80055b6 <bridgeCommand+0x42>
		result =Bridge(port1,port2);
 80055ee:	0039      	movs	r1, r7
 80055f0:	0030      	movs	r0, r6
 80055f2:	f7fe fe95 	bl	8004320 <Bridge>
 80055f6:	e7dc      	b.n	80055b2 <bridgeCommand+0x3e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80055f8:	003b      	movs	r3, r7
 80055fa:	0032      	movs	r2, r6
 80055fc:	4906      	ldr	r1, [pc, #24]	; (8005618 <bridgeCommand+0xa4>)
 80055fe:	0028      	movs	r0, r5
 8005600:	f00e fb4c 	bl	8013c9c <siprintf>
 8005604:	e7de      	b.n	80055c4 <bridgeCommand+0x50>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005606:	220f      	movs	r2, #15
 8005608:	4904      	ldr	r1, [pc, #16]	; (800561c <bridgeCommand+0xa8>)
 800560a:	0028      	movs	r0, r5
 800560c:	f00d fd84 	bl	8013118 <memcpy>
 8005610:	e7d8      	b.n	80055c4 <bridgeCommand+0x50>
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	080189dc 	.word	0x080189dc
 8005618:	080189b8 	.word	0x080189b8
 800561c:	08018968 	.word	0x08018968

08005620 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005622:	46d6      	mov	lr, sl
 8005624:	464f      	mov	r7, r9
 8005626:	4646      	mov	r6, r8
 8005628:	b5c0      	push	{r6, r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	0005      	movs	r5, r0
 800562e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005630:	2300      	movs	r3, #0
 8005632:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005634:	aa01      	add	r2, sp, #4
 8005636:	2101      	movs	r1, #1
 8005638:	f008 fdd8 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 800563c:	f00d fd19 	bl	8013072 <atoi>
 8005640:	b2c4      	uxtb	r4, r0
	if(!index || index > numOfRecordedSnippets)
 8005642:	2c00      	cmp	r4, #0
 8005644:	d04b      	beq.n	80056de <delSnipCommand+0xbe>
 8005646:	4b30      	ldr	r3, [pc, #192]	; (8005708 <delSnipCommand+0xe8>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	42a3      	cmp	r3, r4
 800564c:	d201      	bcs.n	8005652 <delSnipCommand+0x32>
		result =BOS_ERROR;
 800564e:	23ff      	movs	r3, #255	; 0xff
 8005650:	e046      	b.n	80056e0 <delSnipCommand+0xc0>
		snippets[index - 1].cond.conditionType =0;
 8005652:	26ff      	movs	r6, #255	; 0xff
 8005654:	4006      	ands	r6, r0
 8005656:	3e01      	subs	r6, #1
 8005658:	4b2c      	ldr	r3, [pc, #176]	; (800570c <delSnipCommand+0xec>)
 800565a:	4699      	mov	r9, r3
 800565c:	00b3      	lsls	r3, r6, #2
 800565e:	4698      	mov	r8, r3
 8005660:	199b      	adds	r3, r3, r6
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	2200      	movs	r2, #0
 8005666:	4692      	mov	sl, r2
 8005668:	464a      	mov	r2, r9
 800566a:	4651      	mov	r1, sl
 800566c:	5499      	strb	r1, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 800566e:	4643      	mov	r3, r8
 8005670:	199f      	adds	r7, r3, r6
 8005672:	00bf      	lsls	r7, r7, #2
 8005674:	444f      	add	r7, r9
 8005676:	7079      	strb	r1, [r7, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005678:	1cb8      	adds	r0, r7, #2
 800567a:	2204      	movs	r2, #4
 800567c:	f00d fd55 	bl	801312a <memset>
		snippets[index - 1].state = false;
 8005680:	4653      	mov	r3, sl
 8005682:	743b      	strb	r3, [r7, #16]
		free(snippets[index - 1].cmd);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f00d fd2f 	bl	80130e8 <free>
		snippets[index - 1].cmd = NULL;
 800568a:	4653      	mov	r3, sl
 800568c:	60fb      	str	r3, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 800568e:	e013      	b.n	80056b8 <delSnipCommand+0x98>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005690:	1e63      	subs	r3, r4, #1
 8005692:	0098      	lsls	r0, r3, #2
 8005694:	18c0      	adds	r0, r0, r3
 8005696:	0080      	lsls	r0, r0, #2
 8005698:	1880      	adds	r0, r0, r2
 800569a:	00a6      	lsls	r6, r4, #2
 800569c:	1936      	adds	r6, r6, r4
 800569e:	00b6      	lsls	r6, r6, #2
 80056a0:	18b6      	adds	r6, r6, r2
 80056a2:	2214      	movs	r2, #20
 80056a4:	0031      	movs	r1, r6
 80056a6:	f00d fd37 	bl	8013118 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 80056aa:	2214      	movs	r2, #20
 80056ac:	2100      	movs	r1, #0
 80056ae:	0030      	movs	r0, r6
 80056b0:	f00d fd3b 	bl	801312a <memset>
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 80056b4:	3401      	adds	r4, #1
 80056b6:	b2e4      	uxtb	r4, r4
 80056b8:	4b13      	ldr	r3, [pc, #76]	; (8005708 <delSnipCommand+0xe8>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	42a3      	cmp	r3, r4
 80056be:	d907      	bls.n	80056d0 <delSnipCommand+0xb0>
			if(snippets[s].cond.conditionType){
 80056c0:	00a3      	lsls	r3, r4, #2
 80056c2:	191b      	adds	r3, r3, r4
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4a11      	ldr	r2, [pc, #68]	; (800570c <delSnipCommand+0xec>)
 80056c8:	5c9b      	ldrb	r3, [r3, r2]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f2      	beq.n	80056b4 <delSnipCommand+0x94>
 80056ce:	e7df      	b.n	8005690 <delSnipCommand+0x70>
		--numOfRecordedSnippets;
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4a0d      	ldr	r2, [pc, #52]	; (8005708 <delSnipCommand+0xe8>)
 80056d4:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 80056d6:	f004 fbc9 	bl	8009e6c <SaveToRO>
	BOS_Status result =BOS_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e000      	b.n	80056e0 <delSnipCommand+0xc0>
		result =BOS_ERROR;
 80056de:	23ff      	movs	r3, #255	; 0xff
	if(result == BOS_OK)
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <delSnipCommand+0xdc>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80056e4:	2236      	movs	r2, #54	; 0x36
 80056e6:	490a      	ldr	r1, [pc, #40]	; (8005710 <delSnipCommand+0xf0>)
 80056e8:	0028      	movs	r0, r5
 80056ea:	f00d fd15 	bl	8013118 <memcpy>
}
 80056ee:	2000      	movs	r0, #0
 80056f0:	b002      	add	sp, #8
 80056f2:	bce0      	pop	{r5, r6, r7}
 80056f4:	46ba      	mov	sl, r7
 80056f6:	46b1      	mov	r9, r6
 80056f8:	46a8      	mov	r8, r5
 80056fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80056fc:	2223      	movs	r2, #35	; 0x23
 80056fe:	4905      	ldr	r1, [pc, #20]	; (8005714 <delSnipCommand+0xf4>)
 8005700:	0028      	movs	r0, r5
 8005702:	f00d fd09 	bl	8013118 <memcpy>
 8005706:	e7f2      	b.n	80056ee <delSnipCommand+0xce>
 8005708:	200009af 	.word	0x200009af
 800570c:	200057b0 	.word	0x200057b0
 8005710:	080189f4 	.word	0x080189f4
 8005714:	08018a2c 	.word	0x08018a2c

08005718 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005718:	b510      	push	{r4, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	0004      	movs	r4, r0
 800571e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005720:	2300      	movs	r3, #0
 8005722:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005724:	aa01      	add	r2, sp, #4
 8005726:	2101      	movs	r1, #1
 8005728:	f008 fd60 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 800572c:	f00d fca1 	bl	8013072 <atoi>
 8005730:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <pauseSnipCommand+0x26>
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <pauseSnipCommand+0x5c>)
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d207      	bcs.n	800574e <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800573e:	2223      	movs	r2, #35	; 0x23
 8005740:	490d      	ldr	r1, [pc, #52]	; (8005778 <pauseSnipCommand+0x60>)
 8005742:	0020      	movs	r0, r4
 8005744:	f00d fce8 	bl	8013118 <memcpy>
}
 8005748:	2000      	movs	r0, #0
 800574a:	b002      	add	sp, #8
 800574c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 800574e:	23ff      	movs	r3, #255	; 0xff
 8005750:	4018      	ands	r0, r3
 8005752:	3801      	subs	r0, #1
 8005754:	0083      	lsls	r3, r0, #2
 8005756:	1818      	adds	r0, r3, r0
 8005758:	0080      	lsls	r0, r0, #2
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <pauseSnipCommand+0x64>)
 800575c:	1818      	adds	r0, r3, r0
 800575e:	2300      	movs	r3, #0
 8005760:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005762:	f004 fb83 	bl	8009e6c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005766:	2235      	movs	r2, #53	; 0x35
 8005768:	4905      	ldr	r1, [pc, #20]	; (8005780 <pauseSnipCommand+0x68>)
 800576a:	0020      	movs	r0, r4
 800576c:	f00d fcd4 	bl	8013118 <memcpy>
 8005770:	e7ea      	b.n	8005748 <pauseSnipCommand+0x30>
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	200009af 	.word	0x200009af
 8005778:	08018a2c 	.word	0x08018a2c
 800577c:	200057b0 	.word	0x200057b0
 8005780:	08018a50 	.word	0x08018a50

08005784 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005784:	b510      	push	{r4, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	0004      	movs	r4, r0
 800578a:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 800578c:	2300      	movs	r3, #0
 800578e:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005790:	aa01      	add	r2, sp, #4
 8005792:	2101      	movs	r1, #1
 8005794:	f008 fd2a 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005798:	f00d fc6b 	bl	8013072 <atoi>
 800579c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <actSnipCommand+0x26>
 80057a2:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <actSnipCommand+0x5c>)
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d207      	bcs.n	80057ba <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057aa:	2223      	movs	r2, #35	; 0x23
 80057ac:	490d      	ldr	r1, [pc, #52]	; (80057e4 <actSnipCommand+0x60>)
 80057ae:	0020      	movs	r0, r4
 80057b0:	f00d fcb2 	bl	8013118 <memcpy>
}
 80057b4:	2000      	movs	r0, #0
 80057b6:	b002      	add	sp, #8
 80057b8:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 80057ba:	23ff      	movs	r3, #255	; 0xff
 80057bc:	4018      	ands	r0, r3
 80057be:	3801      	subs	r0, #1
 80057c0:	0083      	lsls	r3, r0, #2
 80057c2:	1818      	adds	r0, r3, r0
 80057c4:	0080      	lsls	r0, r0, #2
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <actSnipCommand+0x64>)
 80057c8:	1818      	adds	r0, r3, r0
 80057ca:	2301      	movs	r3, #1
 80057cc:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80057ce:	f004 fb4d 	bl	8009e6c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80057d2:	2238      	movs	r2, #56	; 0x38
 80057d4:	4905      	ldr	r1, [pc, #20]	; (80057ec <actSnipCommand+0x68>)
 80057d6:	0020      	movs	r0, r4
 80057d8:	f00d fc9e 	bl	8013118 <memcpy>
 80057dc:	e7ea      	b.n	80057b4 <actSnipCommand+0x30>
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	200009af 	.word	0x200009af
 80057e4:	08018a2c 	.word	0x08018a2c
 80057e8:	200057b0 	.word	0x200057b0
 80057ec:	08018a88 	.word	0x08018a88

080057f0 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f2:	46d6      	mov	lr, sl
 80057f4:	464f      	mov	r7, r9
 80057f6:	4646      	mov	r6, r8
 80057f8:	b5c0      	push	{r6, r7, lr}
 80057fa:	b08a      	sub	sp, #40	; 0x28
 80057fc:	0005      	movs	r5, r0
	char status[2][7] ={"Paused", "Active"};
 80057fe:	aa06      	add	r2, sp, #24
 8005800:	4b7b      	ldr	r3, [pc, #492]	; (80059f0 <snipCommand+0x200>)
 8005802:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005804:	c213      	stmia	r2!, {r0, r1, r4}
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 800580a:	4b7a      	ldr	r3, [pc, #488]	; (80059f4 <snipCommand+0x204>)
 800580c:	7818      	ldrb	r0, [r3, #0]
 800580e:	2301      	movs	r3, #1
 8005810:	425b      	negs	r3, r3
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	3333      	adds	r3, #51	; 0x33
 8005816:	2237      	movs	r2, #55	; 0x37
 8005818:	4977      	ldr	r1, [pc, #476]	; (80059f8 <snipCommand+0x208>)
 800581a:	f008 fa69 	bl	800dcf0 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800581e:	2600      	movs	r6, #0
	uint8_t count =1;
 8005820:	2301      	movs	r3, #1
 8005822:	469a      	mov	sl, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005824:	e0a5      	b.n	8005972 <snipCommand+0x182>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005826:	00b3      	lsls	r3, r6, #2
 8005828:	199b      	adds	r3, r3, r6
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	7c1a      	ldrb	r2, [r3, #16]
 8005830:	00d3      	lsls	r3, r2, #3
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	aa06      	add	r2, sp, #24
 8005836:	4694      	mov	ip, r2
 8005838:	4463      	add	r3, ip
 800583a:	4652      	mov	r2, sl
 800583c:	496f      	ldr	r1, [pc, #444]	; (80059fc <snipCommand+0x20c>)
 800583e:	0028      	movs	r0, r5
 8005840:	f00e fa2c 	bl	8013c9c <siprintf>
 8005844:	e0a2      	b.n	800598c <snipCommand+0x19c>
				switch(snippets[s].cond.buffer1[1]){
 8005846:	00a3      	lsls	r3, r4, #2
 8005848:	191b      	adds	r3, r3, r4
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4a6c      	ldr	r2, [pc, #432]	; (8005a00 <snipCommand+0x210>)
 800584e:	18d3      	adds	r3, r2, r3
 8005850:	78db      	ldrb	r3, [r3, #3]
 8005852:	2b0b      	cmp	r3, #11
 8005854:	d814      	bhi.n	8005880 <snipCommand+0x90>
 8005856:	2b09      	cmp	r3, #9
 8005858:	d235      	bcs.n	80058c6 <snipCommand+0xd6>
 800585a:	2b05      	cmp	r3, #5
 800585c:	d025      	beq.n	80058aa <snipCommand+0xba>
 800585e:	2b06      	cmp	r3, #6
 8005860:	d000      	beq.n	8005864 <snipCommand+0x74>
 8005862:	e09d      	b.n	80059a0 <snipCommand+0x1b0>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005864:	00a3      	lsls	r3, r4, #2
 8005866:	191b      	adds	r3, r3, r4
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4a65      	ldr	r2, [pc, #404]	; (8005a00 <snipCommand+0x210>)
 800586c:	18d2      	adds	r2, r2, r3
 800586e:	7893      	ldrb	r3, [r2, #2]
 8005870:	68d2      	ldr	r2, [r2, #12]
 8005872:	9200      	str	r2, [sp, #0]
 8005874:	002a      	movs	r2, r5
 8005876:	4963      	ldr	r1, [pc, #396]	; (8005a04 <snipCommand+0x214>)
 8005878:	0028      	movs	r0, r5
 800587a:	f00e fa0f 	bl	8013c9c <siprintf>
						break;
 800587e:	e08f      	b.n	80059a0 <snipCommand+0x1b0>
 8005880:	3b0c      	subs	r3, #12
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d900      	bls.n	800588a <snipCommand+0x9a>
 8005888:	e08a      	b.n	80059a0 <snipCommand+0x1b0>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 800588a:	00a2      	lsls	r2, r4, #2
 800588c:	1912      	adds	r2, r2, r4
 800588e:	0093      	lsls	r3, r2, #2
 8005890:	4a5b      	ldr	r2, [pc, #364]	; (8005a00 <snipCommand+0x210>)
 8005892:	18d2      	adds	r2, r2, r3
 8005894:	7893      	ldrb	r3, [r2, #2]
 8005896:	7911      	ldrb	r1, [r2, #4]
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	9201      	str	r2, [sp, #4]
 800589c:	9100      	str	r1, [sp, #0]
 800589e:	002a      	movs	r2, r5
 80058a0:	4959      	ldr	r1, [pc, #356]	; (8005a08 <snipCommand+0x218>)
 80058a2:	0028      	movs	r0, r5
 80058a4:	f00e f9fa 	bl	8013c9c <siprintf>
						break;
 80058a8:	e07a      	b.n	80059a0 <snipCommand+0x1b0>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 80058aa:	00a3      	lsls	r3, r4, #2
 80058ac:	191b      	adds	r3, r3, r4
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a53      	ldr	r2, [pc, #332]	; (8005a00 <snipCommand+0x210>)
 80058b2:	18d2      	adds	r2, r2, r3
 80058b4:	7893      	ldrb	r3, [r2, #2]
 80058b6:	68d2      	ldr	r2, [r2, #12]
 80058b8:	9200      	str	r2, [sp, #0]
 80058ba:	002a      	movs	r2, r5
 80058bc:	4953      	ldr	r1, [pc, #332]	; (8005a0c <snipCommand+0x21c>)
 80058be:	0028      	movs	r0, r5
 80058c0:	f00e f9ec 	bl	8013c9c <siprintf>
						break;
 80058c4:	e06c      	b.n	80059a0 <snipCommand+0x1b0>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 80058c6:	00a2      	lsls	r2, r4, #2
 80058c8:	1912      	adds	r2, r2, r4
 80058ca:	0093      	lsls	r3, r2, #2
 80058cc:	4a4c      	ldr	r2, [pc, #304]	; (8005a00 <snipCommand+0x210>)
 80058ce:	18d2      	adds	r2, r2, r3
 80058d0:	7893      	ldrb	r3, [r2, #2]
 80058d2:	7911      	ldrb	r1, [r2, #4]
 80058d4:	68d2      	ldr	r2, [r2, #12]
 80058d6:	9201      	str	r2, [sp, #4]
 80058d8:	9100      	str	r1, [sp, #0]
 80058da:	002a      	movs	r2, r5
 80058dc:	494c      	ldr	r1, [pc, #304]	; (8005a10 <snipCommand+0x220>)
 80058de:	0028      	movs	r0, r5
 80058e0:	f00e f9dc 	bl	8013c9c <siprintf>
						break;
 80058e4:	e05c      	b.n	80059a0 <snipCommand+0x1b0>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 80058e6:	00a3      	lsls	r3, r4, #2
 80058e8:	191b      	adds	r3, r3, r4
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4a44      	ldr	r2, [pc, #272]	; (8005a00 <snipCommand+0x210>)
 80058ee:	4698      	mov	r8, r3
 80058f0:	4490      	add	r8, r2
 80058f2:	4643      	mov	r3, r8
 80058f4:	1d99      	adds	r1, r3, #6
 80058f6:	2204      	movs	r2, #4
 80058f8:	a805      	add	r0, sp, #20
 80058fa:	f00d fc0d 	bl	8013118 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 80058fe:	4643      	mov	r3, r8
 8005900:	78da      	ldrb	r2, [r3, #3]
 8005902:	3a01      	subs	r2, #1
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	3b01      	subs	r3, #1
 8005908:	0059      	lsls	r1, r3, #1
 800590a:	18cb      	adds	r3, r1, r3
 800590c:	4941      	ldr	r1, [pc, #260]	; (8005a14 <snipCommand+0x224>)
 800590e:	4688      	mov	r8, r1
 8005910:	4498      	add	r8, r3
 8005912:	0053      	lsls	r3, r2, #1
 8005914:	189b      	adds	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4a3f      	ldr	r2, [pc, #252]	; (8005a18 <snipCommand+0x228>)
 800591a:	18d3      	adds	r3, r2, r3
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4699      	mov	r9, r3
 8005920:	9805      	ldr	r0, [sp, #20]
 8005922:	f7fd f8d1 	bl	8002ac8 <__aeabi_f2d>
 8005926:	9002      	str	r0, [sp, #8]
 8005928:	9103      	str	r1, [sp, #12]
 800592a:	4643      	mov	r3, r8
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	464b      	mov	r3, r9
 8005930:	002a      	movs	r2, r5
 8005932:	493a      	ldr	r1, [pc, #232]	; (8005a1c <snipCommand+0x22c>)
 8005934:	0028      	movs	r0, r5
 8005936:	f00e f9b1 	bl	8013c9c <siprintf>
				break;
 800593a:	e031      	b.n	80059a0 <snipCommand+0x1b0>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 800593c:	0028      	movs	r0, r5
 800593e:	f7fa fbeb 	bl	8000118 <strlen>
 8005942:	1828      	adds	r0, r5, r0
 8005944:	220c      	movs	r2, #12
 8005946:	4936      	ldr	r1, [pc, #216]	; (8005a20 <snipCommand+0x230>)
 8005948:	f00d fbe6 	bl	8013118 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 800594c:	0028      	movs	r0, r5
 800594e:	f7fa fbe3 	bl	8000118 <strlen>
 8005952:	b282      	uxth	r2, r0
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <snipCommand+0x204>)
 8005956:	7818      	ldrb	r0, [r3, #0]
 8005958:	2301      	movs	r3, #1
 800595a:	425b      	negs	r3, r3
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	3333      	adds	r3, #51	; 0x33
 8005960:	0029      	movs	r1, r5
 8005962:	f008 f9c5 	bl	800dcf0 <writePxMutex>
		++count;
 8005966:	4657      	mov	r7, sl
 8005968:	3701      	adds	r7, #1
 800596a:	b2fb      	uxtb	r3, r7
 800596c:	469a      	mov	sl, r3
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 800596e:	3601      	adds	r6, #1
 8005970:	b2f6      	uxtb	r6, r6
 8005972:	4b2c      	ldr	r3, [pc, #176]	; (8005a24 <snipCommand+0x234>)
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	42b3      	cmp	r3, r6
 8005978:	d92d      	bls.n	80059d6 <snipCommand+0x1e6>
		if(snippets[s].cond.conditionType)
 800597a:	0034      	movs	r4, r6
 800597c:	00b3      	lsls	r3, r6, #2
 800597e:	199b      	adds	r3, r3, r6
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <snipCommand+0x210>)
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d000      	beq.n	800598c <snipCommand+0x19c>
 800598a:	e74c      	b.n	8005826 <snipCommand+0x36>
		switch(snippets[s].cond.conditionType){
 800598c:	00a3      	lsls	r3, r4, #2
 800598e:	191b      	adds	r3, r3, r4
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <snipCommand+0x210>)
 8005994:	5c9b      	ldrb	r3, [r3, r2]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d100      	bne.n	800599c <snipCommand+0x1ac>
 800599a:	e754      	b.n	8005846 <snipCommand+0x56>
 800599c:	2b03      	cmp	r3, #3
 800599e:	d0a2      	beq.n	80058e6 <snipCommand+0xf6>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 80059a0:	00a3      	lsls	r3, r4, #2
 80059a2:	191b      	adds	r3, r3, r4
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <snipCommand+0x210>)
 80059a8:	18d3      	adds	r3, r2, r3
 80059aa:	68d8      	ldr	r0, [r3, #12]
 80059ac:	491e      	ldr	r1, [pc, #120]	; (8005a28 <snipCommand+0x238>)
 80059ae:	f7ff fa93 	bl	8004ed8 <ParseSnippetCommand>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d0c2      	beq.n	800593c <snipCommand+0x14c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 80059b6:	4f1c      	ldr	r7, [pc, #112]	; (8005a28 <snipCommand+0x238>)
 80059b8:	003b      	movs	r3, r7
 80059ba:	002a      	movs	r2, r5
 80059bc:	491b      	ldr	r1, [pc, #108]	; (8005a2c <snipCommand+0x23c>)
 80059be:	0028      	movs	r0, r5
 80059c0:	f00e f96c 	bl	8013c9c <siprintf>
			memset(&commands,0x00,strlen((char* )commands));
 80059c4:	0038      	movs	r0, r7
 80059c6:	f7fa fba7 	bl	8000118 <strlen>
 80059ca:	0002      	movs	r2, r0
 80059cc:	2100      	movs	r1, #0
 80059ce:	0038      	movs	r0, r7
 80059d0:	f00d fbab 	bl	801312a <memset>
 80059d4:	e7e4      	b.n	80059a0 <snipCommand+0x1b0>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 80059d6:	22b5      	movs	r2, #181	; 0xb5
 80059d8:	4915      	ldr	r1, [pc, #84]	; (8005a30 <snipCommand+0x240>)
 80059da:	0028      	movs	r0, r5
 80059dc:	f00d fb9c 	bl	8013118 <memcpy>
}
 80059e0:	2000      	movs	r0, #0
 80059e2:	b00a      	add	sp, #40	; 0x28
 80059e4:	bce0      	pop	{r5, r6, r7}
 80059e6:	46ba      	mov	sl, r7
 80059e8:	46b1      	mov	r9, r6
 80059ea:	46a8      	mov	r8, r5
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	080179d8 	.word	0x080179d8
 80059f4:	2000066e 	.word	0x2000066e
 80059f8:	08018ac0 	.word	0x08018ac0
 80059fc:	08018af8 	.word	0x08018af8
 8005a00:	200057b0 	.word	0x200057b0
 8005a04:	08018b18 	.word	0x08018b18
 8005a08:	08018b48 	.word	0x08018b48
 8005a0c:	08018b04 	.word	0x08018b04
 8005a10:	08018b30 	.word	0x08018b30
 8005a14:	0801a20c 	.word	0x0801a20c
 8005a18:	200000f4 	.word	0x200000f4
 8005a1c:	08018b64 	.word	0x08018b64
 8005a20:	08018b7c 	.word	0x08018b7c
 8005a24:	200009af 	.word	0x200009af
 8005a28:	200009e0 	.word	0x200009e0
 8005a2c:	08018b74 	.word	0x08018b74
 8005a30:	08018b88 	.word	0x08018b88

08005a34 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a34:	b510      	push	{r4, lr}
 8005a36:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005a38:	f00a fa54 	bl	800fee4 <HAL_GetDEVID>
	switch(dev){
 8005a3c:	0403      	lsls	r3, r0, #16
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <idcodeCommand+0x78>)
 8005a42:	4694      	mov	ip, r2
 8005a44:	4463      	add	r3, ip
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d82a      	bhi.n	8005aa0 <idcodeCommand+0x6c>
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <idcodeCommand+0x7c>)
 8005a4e:	58d3      	ldr	r3, [r2, r3]
 8005a50:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <idcodeCommand+0x80>)
 8005a54:	4918      	ldr	r1, [pc, #96]	; (8005ab8 <idcodeCommand+0x84>)
 8005a56:	0020      	movs	r0, r4
 8005a58:	f00e f920 	bl	8013c9c <siprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005a5c:	f00a fa3c 	bl	800fed8 <HAL_GetREVID>
 8005a60:	0b03      	lsrs	r3, r0, #12
 8005a62:	0022      	movs	r2, r4
 8005a64:	4915      	ldr	r1, [pc, #84]	; (8005abc <idcodeCommand+0x88>)
 8005a66:	0020      	movs	r0, r4
 8005a68:	f00e f918 	bl	8013c9c <siprintf>
}
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <idcodeCommand+0x8c>)
 8005a72:	4911      	ldr	r1, [pc, #68]	; (8005ab8 <idcodeCommand+0x84>)
 8005a74:	0020      	movs	r0, r4
 8005a76:	f00e f911 	bl	8013c9c <siprintf>
			break;
 8005a7a:	e7ef      	b.n	8005a5c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005a7c:	4a11      	ldr	r2, [pc, #68]	; (8005ac4 <idcodeCommand+0x90>)
 8005a7e:	490e      	ldr	r1, [pc, #56]	; (8005ab8 <idcodeCommand+0x84>)
 8005a80:	0020      	movs	r0, r4
 8005a82:	f00e f90b 	bl	8013c9c <siprintf>
			break;
 8005a86:	e7e9      	b.n	8005a5c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005a88:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <idcodeCommand+0x94>)
 8005a8a:	490b      	ldr	r1, [pc, #44]	; (8005ab8 <idcodeCommand+0x84>)
 8005a8c:	0020      	movs	r0, r4
 8005a8e:	f00e f905 	bl	8013c9c <siprintf>
			break;
 8005a92:	e7e3      	b.n	8005a5c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005a94:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <idcodeCommand+0x98>)
 8005a96:	4908      	ldr	r1, [pc, #32]	; (8005ab8 <idcodeCommand+0x84>)
 8005a98:	0020      	movs	r0, r4
 8005a9a:	f00e f8ff 	bl	8013c9c <siprintf>
			break;
 8005a9e:	e7dd      	b.n	8005a5c <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005aa0:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <idcodeCommand+0x9c>)
 8005aa2:	4905      	ldr	r1, [pc, #20]	; (8005ab8 <idcodeCommand+0x84>)
 8005aa4:	0020      	movs	r0, r4
 8005aa6:	f00e f8f9 	bl	8013c9c <siprintf>
			break;
 8005aaa:	e7d7      	b.n	8005a5c <idcodeCommand+0x28>
 8005aac:	fffffbc0 	.word	0xfffffbc0
 8005ab0:	08018cb0 	.word	0x08018cb0
 8005ab4:	08018c40 	.word	0x08018c40
 8005ab8:	08018c4c 	.word	0x08018c4c
 8005abc:	08018c98 	.word	0x08018c98
 8005ac0:	08018c60 	.word	0x08018c60
 8005ac4:	08018c6c 	.word	0x08018c6c
 8005ac8:	08018c78 	.word	0x08018c78
 8005acc:	08018c84 	.word	0x08018c84
 8005ad0:	08018c90 	.word	0x08018c90

08005ad4 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005ad8:	220e      	movs	r2, #14
 8005ada:	490e      	ldr	r1, [pc, #56]	; (8005b14 <uuidCommand+0x40>)
 8005adc:	f00d fb1c 	bl	8013118 <memcpy>
	for(uint8_t i =0; i < 3; i++){
 8005ae0:	2400      	movs	r4, #0
 8005ae2:	e00a      	b.n	8005afa <uuidCommand+0x26>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <uuidCommand+0x44>)
 8005ae6:	18e3      	adds	r3, r4, r3
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	002a      	movs	r2, r5
 8005aee:	490b      	ldr	r1, [pc, #44]	; (8005b1c <uuidCommand+0x48>)
 8005af0:	0028      	movs	r0, r5
 8005af2:	f00e f8d3 	bl	8013c9c <siprintf>
	for(uint8_t i =0; i < 3; i++){
 8005af6:	3401      	adds	r4, #1
 8005af8:	b2e4      	uxtb	r4, r4
 8005afa:	2c02      	cmp	r4, #2
 8005afc:	d9f2      	bls.n	8005ae4 <uuidCommand+0x10>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005afe:	0028      	movs	r0, r5
 8005b00:	f7fa fb0a 	bl	8000118 <strlen>
 8005b04:	1828      	adds	r0, r5, r0
 8005b06:	2203      	movs	r2, #3
 8005b08:	4905      	ldr	r1, [pc, #20]	; (8005b20 <uuidCommand+0x4c>)
 8005b0a:	f00d fb05 	bl	8013118 <memcpy>
}
 8005b0e:	2000      	movs	r0, #0
 8005b10:	bd70      	pop	{r4, r5, r6, pc}
 8005b12:	46c0      	nop			; (mov r8, r8)
 8005b14:	08018cd4 	.word	0x08018cd4
 8005b18:	07fffdeb 	.word	0x07fffdeb
 8005b1c:	08018ce4 	.word	0x08018ce4
 8005b20:	08019d34 	.word	0x08019d34

08005b24 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005b24:	b530      	push	{r4, r5, lr}
 8005b26:	b085      	sub	sp, #20
 8005b28:	0004      	movs	r4, r0
	GetTimeDate();
 8005b2a:	f007 fee3 	bl	800d8f4 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <timeCommand+0x78>)
 8005b30:	7b5b      	ldrb	r3, [r3, #13]
 8005b32:	2b18      	cmp	r3, #24
 8005b34:	d004      	beq.n	8005b40 <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 8005b36:	2b0c      	cmp	r3, #12
 8005b38:	d00e      	beq.n	8005b58 <timeCommand+0x34>
}
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	b005      	add	sp, #20
 8005b3e:	bd30      	pop	{r4, r5, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005b40:	4916      	ldr	r1, [pc, #88]	; (8005b9c <timeCommand+0x78>)
 8005b42:	7c8a      	ldrb	r2, [r1, #18]
 8005b44:	7c4b      	ldrb	r3, [r1, #17]
 8005b46:	7c08      	ldrb	r0, [r1, #16]
 8005b48:	89c9      	ldrh	r1, [r1, #14]
 8005b4a:	9101      	str	r1, [sp, #4]
 8005b4c:	9000      	str	r0, [sp, #0]
 8005b4e:	4914      	ldr	r1, [pc, #80]	; (8005ba0 <timeCommand+0x7c>)
 8005b50:	0020      	movs	r0, r4
 8005b52:	f00e f8a3 	bl	8013c9c <siprintf>
 8005b56:	e7f0      	b.n	8005b3a <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8005b58:	4b10      	ldr	r3, [pc, #64]	; (8005b9c <timeCommand+0x78>)
 8005b5a:	7cdb      	ldrb	r3, [r3, #19]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d00f      	beq.n	8005b80 <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d1ea      	bne.n	8005b3a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005b64:	490d      	ldr	r1, [pc, #52]	; (8005b9c <timeCommand+0x78>)
 8005b66:	7c8a      	ldrb	r2, [r1, #18]
 8005b68:	7c4b      	ldrb	r3, [r1, #17]
 8005b6a:	7c08      	ldrb	r0, [r1, #16]
 8005b6c:	89c9      	ldrh	r1, [r1, #14]
 8005b6e:	4d0d      	ldr	r5, [pc, #52]	; (8005ba4 <timeCommand+0x80>)
 8005b70:	9502      	str	r5, [sp, #8]
 8005b72:	9101      	str	r1, [sp, #4]
 8005b74:	9000      	str	r0, [sp, #0]
 8005b76:	490c      	ldr	r1, [pc, #48]	; (8005ba8 <timeCommand+0x84>)
 8005b78:	0020      	movs	r0, r4
 8005b7a:	f00e f88f 	bl	8013c9c <siprintf>
 8005b7e:	e7dc      	b.n	8005b3a <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005b80:	4906      	ldr	r1, [pc, #24]	; (8005b9c <timeCommand+0x78>)
 8005b82:	7c8a      	ldrb	r2, [r1, #18]
 8005b84:	7c4b      	ldrb	r3, [r1, #17]
 8005b86:	7c08      	ldrb	r0, [r1, #16]
 8005b88:	89c9      	ldrh	r1, [r1, #14]
 8005b8a:	4d08      	ldr	r5, [pc, #32]	; (8005bac <timeCommand+0x88>)
 8005b8c:	9502      	str	r5, [sp, #8]
 8005b8e:	9101      	str	r1, [sp, #4]
 8005b90:	9000      	str	r0, [sp, #0]
 8005b92:	4905      	ldr	r1, [pc, #20]	; (8005ba8 <timeCommand+0x84>)
 8005b94:	0020      	movs	r0, r4
 8005b96:	f00e f881 	bl	8013c9c <siprintf>
 8005b9a:	e7ce      	b.n	8005b3a <timeCommand+0x16>
 8005b9c:	20005794 	.word	0x20005794
 8005ba0:	08018cec 	.word	0x08018cec
 8005ba4:	08018d44 	.word	0x08018d44
 8005ba8:	08018d14 	.word	0x08018d14
 8005bac:	08018d40 	.word	0x08018d40

08005bb0 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	0004      	movs	r4, r0
	GetTimeDate();
 8005bb4:	f007 fe9e 	bl	800d8f4 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005bb8:	f7fe fb90 	bl	80042dc <GetDateString>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	4903      	ldr	r1, [pc, #12]	; (8005bcc <dateCommand+0x1c>)
 8005bc0:	0020      	movs	r0, r4
 8005bc2:	f00e f86b 	bl	8013c9c <siprintf>
}
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	08018d48 	.word	0x08018d48

08005bd0 <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	0005      	movs	r5, r0
 8005bd6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bde:	aa01      	add	r2, sp, #4
 8005be0:	2101      	movs	r1, #1
 8005be2:	0030      	movs	r0, r6
 8005be4:	f008 fb02 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005be8:	0004      	movs	r4, r0
 8005bea:	4b7b      	ldr	r3, [pc, #492]	; (8005dd8 <getCommand+0x208>)
 8005bec:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005bee:	2204      	movs	r2, #4
 8005bf0:	497a      	ldr	r1, [pc, #488]	; (8005ddc <getCommand+0x20c>)
 8005bf2:	f00e f896 	bl	8013d22 <strncmp>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d000      	beq.n	8005bfc <getCommand+0x2c>
 8005bfa:	e097      	b.n	8005d2c <getCommand+0x15c>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005bfc:	3404      	adds	r4, #4
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	1f1e      	subs	r6, r3, #4
 8005c02:	0032      	movs	r2, r6
 8005c04:	4976      	ldr	r1, [pc, #472]	; (8005de0 <getCommand+0x210>)
 8005c06:	0020      	movs	r0, r4
 8005c08:	f00e f88b 	bl	8013d22 <strncmp>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d11d      	bne.n	8005c4c <getCommand+0x7c>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005c10:	4b74      	ldr	r3, [pc, #464]	; (8005de4 <getCommand+0x214>)
 8005c12:	781c      	ldrb	r4, [r3, #0]
 8005c14:	2c60      	cmp	r4, #96	; 0x60
 8005c16:	d005      	beq.n	8005c24 <getCommand+0x54>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005c18:	2c20      	cmp	r4, #32
 8005c1a:	d00a      	beq.n	8005c32 <getCommand+0x62>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	d00f      	beq.n	8005c40 <getCommand+0x70>
				result =BOS_ERR_WrongValue;
 8005c20:	2468      	movs	r4, #104	; 0x68
 8005c22:	e0cc      	b.n	8005dbe <getCommand+0x1ee>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005c24:	4a70      	ldr	r2, [pc, #448]	; (8005de8 <getCommand+0x218>)
 8005c26:	4971      	ldr	r1, [pc, #452]	; (8005dec <getCommand+0x21c>)
 8005c28:	0028      	movs	r0, r5
 8005c2a:	f00e f837 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005c2e:	2400      	movs	r4, #0
 8005c30:	e0c5      	b.n	8005dbe <getCommand+0x1ee>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005c32:	4a6f      	ldr	r2, [pc, #444]	; (8005df0 <getCommand+0x220>)
 8005c34:	496d      	ldr	r1, [pc, #436]	; (8005dec <getCommand+0x21c>)
 8005c36:	0028      	movs	r0, r5
 8005c38:	f00e f830 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005c3c:	2400      	movs	r4, #0
 8005c3e:	e0be      	b.n	8005dbe <getCommand+0x1ee>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005c40:	4a6c      	ldr	r2, [pc, #432]	; (8005df4 <getCommand+0x224>)
 8005c42:	496a      	ldr	r1, [pc, #424]	; (8005dec <getCommand+0x21c>)
 8005c44:	0028      	movs	r0, r5
 8005c46:	f00e f829 	bl	8013c9c <siprintf>
	if(result == BOS_ERR_WrongParam)
 8005c4a:	e0b8      	b.n	8005dbe <getCommand+0x1ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005c4c:	0032      	movs	r2, r6
 8005c4e:	496a      	ldr	r1, [pc, #424]	; (8005df8 <getCommand+0x228>)
 8005c50:	0020      	movs	r0, r4
 8005c52:	f00e f866 	bl	8013d22 <strncmp>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d11d      	bne.n	8005c96 <getCommand+0xc6>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005c5a:	4b62      	ldr	r3, [pc, #392]	; (8005de4 <getCommand+0x214>)
 8005c5c:	785c      	ldrb	r4, [r3, #1]
 8005c5e:	2c03      	cmp	r4, #3
 8005c60:	d005      	beq.n	8005c6e <getCommand+0x9e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005c62:	2c01      	cmp	r4, #1
 8005c64:	d00a      	beq.n	8005c7c <getCommand+0xac>
			else if(BOSMessaging.trace == TRACE_NONE)
 8005c66:	2c00      	cmp	r4, #0
 8005c68:	d00f      	beq.n	8005c8a <getCommand+0xba>
				result =BOS_ERR_WrongValue;
 8005c6a:	2468      	movs	r4, #104	; 0x68
 8005c6c:	e0a7      	b.n	8005dbe <getCommand+0x1ee>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005c6e:	4a5e      	ldr	r2, [pc, #376]	; (8005de8 <getCommand+0x218>)
 8005c70:	495e      	ldr	r1, [pc, #376]	; (8005dec <getCommand+0x21c>)
 8005c72:	0028      	movs	r0, r5
 8005c74:	f00e f812 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005c78:	2400      	movs	r4, #0
 8005c7a:	e0a0      	b.n	8005dbe <getCommand+0x1ee>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005c7c:	4a5c      	ldr	r2, [pc, #368]	; (8005df0 <getCommand+0x220>)
 8005c7e:	495b      	ldr	r1, [pc, #364]	; (8005dec <getCommand+0x21c>)
 8005c80:	0028      	movs	r0, r5
 8005c82:	f00e f80b 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005c86:	2400      	movs	r4, #0
 8005c88:	e099      	b.n	8005dbe <getCommand+0x1ee>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005c8a:	4a5a      	ldr	r2, [pc, #360]	; (8005df4 <getCommand+0x224>)
 8005c8c:	4957      	ldr	r1, [pc, #348]	; (8005dec <getCommand+0x21c>)
 8005c8e:	0028      	movs	r0, r5
 8005c90:	f00e f804 	bl	8013c9c <siprintf>
	if(result == BOS_ERR_WrongParam)
 8005c94:	e093      	b.n	8005dbe <getCommand+0x1ee>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005c96:	0032      	movs	r2, r6
 8005c98:	4958      	ldr	r1, [pc, #352]	; (8005dfc <getCommand+0x22c>)
 8005c9a:	0020      	movs	r0, r4
 8005c9c:	f00e f841 	bl	8013d22 <strncmp>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d023      	beq.n	8005cec <getCommand+0x11c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005ca4:	0032      	movs	r2, r6
 8005ca6:	4956      	ldr	r1, [pc, #344]	; (8005e00 <getCommand+0x230>)
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f00e f83a 	bl	8013d22 <strncmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d024      	beq.n	8005cfc <getCommand+0x12c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005cb2:	0032      	movs	r2, r6
 8005cb4:	4953      	ldr	r1, [pc, #332]	; (8005e04 <getCommand+0x234>)
 8005cb6:	0020      	movs	r0, r4
 8005cb8:	f00e f833 	bl	8013d22 <strncmp>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d025      	beq.n	8005d0c <getCommand+0x13c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005cc0:	0032      	movs	r2, r6
 8005cc2:	4951      	ldr	r1, [pc, #324]	; (8005e08 <getCommand+0x238>)
 8005cc4:	0020      	movs	r0, r4
 8005cc6:	f00e f82c 	bl	8013d22 <strncmp>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d026      	beq.n	8005d1c <getCommand+0x14c>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005cce:	0032      	movs	r2, r6
 8005cd0:	494e      	ldr	r1, [pc, #312]	; (8005e0c <getCommand+0x23c>)
 8005cd2:	0020      	movs	r0, r4
 8005cd4:	f00e f825 	bl	8013d22 <strncmp>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d12e      	bne.n	8005d3a <getCommand+0x16a>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005cdc:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <getCommand+0x240>)
 8005cde:	795a      	ldrb	r2, [r3, #5]
 8005ce0:	494c      	ldr	r1, [pc, #304]	; (8005e14 <getCommand+0x244>)
 8005ce2:	0028      	movs	r0, r5
 8005ce4:	f00d ffda 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005ce8:	2400      	movs	r4, #0
 8005cea:	e068      	b.n	8005dbe <getCommand+0x1ee>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005cec:	4b48      	ldr	r3, [pc, #288]	; (8005e10 <getCommand+0x240>)
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	4948      	ldr	r1, [pc, #288]	; (8005e14 <getCommand+0x244>)
 8005cf2:	0028      	movs	r0, r5
 8005cf4:	f00d ffd2 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005cf8:	2400      	movs	r4, #0
 8005cfa:	e060      	b.n	8005dbe <getCommand+0x1ee>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005cfc:	4b44      	ldr	r3, [pc, #272]	; (8005e10 <getCommand+0x240>)
 8005cfe:	881a      	ldrh	r2, [r3, #0]
 8005d00:	4944      	ldr	r1, [pc, #272]	; (8005e14 <getCommand+0x244>)
 8005d02:	0028      	movs	r0, r5
 8005d04:	f00d ffca 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005d08:	2400      	movs	r4, #0
 8005d0a:	e058      	b.n	8005dbe <getCommand+0x1ee>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005d0c:	4b40      	ldr	r3, [pc, #256]	; (8005e10 <getCommand+0x240>)
 8005d0e:	885a      	ldrh	r2, [r3, #2]
 8005d10:	4940      	ldr	r1, [pc, #256]	; (8005e14 <getCommand+0x244>)
 8005d12:	0028      	movs	r0, r5
 8005d14:	f00d ffc2 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005d18:	2400      	movs	r4, #0
 8005d1a:	e050      	b.n	8005dbe <getCommand+0x1ee>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005d1c:	4b3c      	ldr	r3, [pc, #240]	; (8005e10 <getCommand+0x240>)
 8005d1e:	791a      	ldrb	r2, [r3, #4]
 8005d20:	493c      	ldr	r1, [pc, #240]	; (8005e14 <getCommand+0x244>)
 8005d22:	0028      	movs	r0, r5
 8005d24:	f00d ffba 	bl	8013c9c <siprintf>
	BOS_Status result =BOS_OK;
 8005d28:	2400      	movs	r4, #0
 8005d2a:	e048      	b.n	8005dbe <getCommand+0x1ee>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005d2c:	2205      	movs	r2, #5
 8005d2e:	493a      	ldr	r1, [pc, #232]	; (8005e18 <getCommand+0x248>)
 8005d30:	0020      	movs	r0, r4
 8005d32:	f00d fff6 	bl	8013d22 <strncmp>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d005      	beq.n	8005d46 <getCommand+0x176>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005d3a:	2213      	movs	r2, #19
 8005d3c:	4937      	ldr	r1, [pc, #220]	; (8005e1c <getCommand+0x24c>)
 8005d3e:	0028      	movs	r0, r5
 8005d40:	f00d f9ea 	bl	8013118 <memcpy>
 8005d44:	e03d      	b.n	8005dc2 <getCommand+0x1f2>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005d46:	466a      	mov	r2, sp
 8005d48:	2102      	movs	r1, #2
 8005d4a:	0030      	movs	r0, r6
 8005d4c:	f008 fa4e 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005d50:	0007      	movs	r7, r0
		for(i =0; i < MaxNumOfGroups; i++){
 8005d52:	2400      	movs	r4, #0
 8005d54:	2c09      	cmp	r4, #9
 8005d56:	d80c      	bhi.n	8005d72 <getCommand+0x1a2>
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005d58:	00a1      	lsls	r1, r4, #2
 8005d5a:	1909      	adds	r1, r1, r4
 8005d5c:	0049      	lsls	r1, r1, #1
 8005d5e:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <getCommand+0x250>)
 8005d60:	18c9      	adds	r1, r1, r3
 8005d62:	0038      	movs	r0, r7
 8005d64:	f7fa f9ce 	bl	8000104 <strcmp>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d00b      	beq.n	8005d84 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 8005d6c:	3401      	adds	r4, #1
 8005d6e:	b2e4      	uxtb	r4, r4
 8005d70:	e7f0      	b.n	8005d54 <getCommand+0x184>
		temp8 =0;
 8005d72:	2600      	movs	r6, #0
		if(!temp8){
 8005d74:	2e00      	cmp	r6, #0
 8005d76:	d007      	beq.n	8005d88 <getCommand+0x1b8>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005d78:	003a      	movs	r2, r7
 8005d7a:	492a      	ldr	r1, [pc, #168]	; (8005e24 <getCommand+0x254>)
 8005d7c:	0028      	movs	r0, r5
 8005d7e:	f00d ff8d 	bl	8013c9c <siprintf>
			for(j =1; j <= N; j++)						// N modules
 8005d82:	e00f      	b.n	8005da4 <getCommand+0x1d4>
				temp8 =1;
 8005d84:	2601      	movs	r6, #1
 8005d86:	e7f5      	b.n	8005d74 <getCommand+0x1a4>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005d88:	003a      	movs	r2, r7
 8005d8a:	4927      	ldr	r1, [pc, #156]	; (8005e28 <getCommand+0x258>)
 8005d8c:	0028      	movs	r0, r5
 8005d8e:	f00d ff85 	bl	8013c9c <siprintf>
			return pdFALSE;
 8005d92:	e016      	b.n	8005dc2 <getCommand+0x1f2>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005d94:	0033      	movs	r3, r6
 8005d96:	002a      	movs	r2, r5
 8005d98:	4924      	ldr	r1, [pc, #144]	; (8005e2c <getCommand+0x25c>)
 8005d9a:	0028      	movs	r0, r5
 8005d9c:	f00d ff7e 	bl	8013c9c <siprintf>
			for(j =1; j <= N; j++)						// N modules
 8005da0:	3601      	adds	r6, #1
 8005da2:	b2f6      	uxtb	r6, r6
 8005da4:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <getCommand+0x260>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	d307      	bcc.n	8005dbc <getCommand+0x1ec>
				if(InGroup(j,i)){
 8005dac:	1e73      	subs	r3, r6, #1
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <getCommand+0x264>)
 8005db2:	5a9b      	ldrh	r3, [r3, r2]
 8005db4:	4123      	asrs	r3, r4
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d5f2      	bpl.n	8005da0 <getCommand+0x1d0>
 8005dba:	e7eb      	b.n	8005d94 <getCommand+0x1c4>
	BOS_Status result =BOS_OK;
 8005dbc:	2400      	movs	r4, #0
	else if(result == BOS_ERR_WrongValue)
 8005dbe:	2c68      	cmp	r4, #104	; 0x68
 8005dc0:	d002      	beq.n	8005dc8 <getCommand+0x1f8>
}
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	b003      	add	sp, #12
 8005dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <getCommand+0x208>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	491a      	ldr	r1, [pc, #104]	; (8005e38 <getCommand+0x268>)
 8005dce:	0028      	movs	r0, r5
 8005dd0:	f00d ff64 	bl	8013c9c <siprintf>
 8005dd4:	e7f5      	b.n	8005dc2 <getCommand+0x1f2>
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	20000a24 	.word	0x20000a24
 8005ddc:	08018d60 	.word	0x08018d60
 8005de0:	08018d68 	.word	0x08018d68
 8005de4:	20005714 	.word	0x20005714
 8005de8:	08017d18 	.word	0x08017d18
 8005dec:	08017be0 	.word	0x08017be0
 8005df0:	08018d74 	.word	0x08018d74
 8005df4:	08018d78 	.word	0x08018d78
 8005df8:	08018d80 	.word	0x08018d80
 8005dfc:	08018d88 	.word	0x08018d88
 8005e00:	08018d94 	.word	0x08018d94
 8005e04:	08018da0 	.word	0x08018da0
 8005e08:	08018db0 	.word	0x08018db0
 8005e0c:	08018dc4 	.word	0x08018dc4
 8005e10:	20005794 	.word	0x20005794
 8005e14:	08018474 	.word	0x08018474
 8005e18:	08018dd8 	.word	0x08018dd8
 8005e1c:	08018e18 	.word	0x08018e18
 8005e20:	20000760 	.word	0x20000760
 8005e24:	08018dfc 	.word	0x08018dfc
 8005e28:	08018de0 	.word	0x08018de0
 8005e2c:	08018e10 	.word	0x08018e10
 8005e30:	20000030 	.word	0x20000030
 8005e34:	200007c4 	.word	0x200007c4
 8005e38:	08018e2c 	.word	0x08018e2c

08005e3c <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	0005      	movs	r5, r0
 8005e42:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e48:	aa01      	add	r2, sp, #4
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	f008 f9ce 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005e50:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8005e52:	9e01      	ldr	r6, [sp, #4]
 8005e54:	0032      	movs	r2, r6
 8005e56:	491d      	ldr	r1, [pc, #116]	; (8005ecc <defaultCommand+0x90>)
 8005e58:	f00d ff63 	bl	8013d22 <strncmp>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d00e      	beq.n	8005e7e <defaultCommand+0x42>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8005e60:	0032      	movs	r2, r6
 8005e62:	491b      	ldr	r1, [pc, #108]	; (8005ed0 <defaultCommand+0x94>)
 8005e64:	0020      	movs	r0, r4
 8005e66:	f00d ff5c 	bl	8013d22 <strncmp>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d018      	beq.n	8005ea0 <defaultCommand+0x64>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8005e6e:	220f      	movs	r2, #15
 8005e70:	4918      	ldr	r1, [pc, #96]	; (8005ed4 <defaultCommand+0x98>)
 8005e72:	0028      	movs	r0, r5
 8005e74:	f00d f950 	bl	8013118 <memcpy>
}
 8005e78:	2000      	movs	r0, #0
 8005e7a:	b002      	add	sp, #8
 8005e7c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8005e7e:	4916      	ldr	r1, [pc, #88]	; (8005ed8 <defaultCommand+0x9c>)
 8005e80:	4b16      	ldr	r3, [pc, #88]	; (8005edc <defaultCommand+0xa0>)
 8005e82:	000a      	movs	r2, r1
 8005e84:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005e86:	c213      	stmia	r2!, {r0, r1, r4}
 8005e88:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005e8a:	c213      	stmia	r2!, {r0, r1, r4}
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8005e90:	f7fd faea 	bl	8003468 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8005e94:	2227      	movs	r2, #39	; 0x27
 8005e96:	4912      	ldr	r1, [pc, #72]	; (8005ee0 <defaultCommand+0xa4>)
 8005e98:	0028      	movs	r0, r5
 8005e9a:	f00d f93d 	bl	8013118 <memcpy>
	if(result == BOS_ERR_WrongValue)
 8005e9e:	e7eb      	b.n	8005e78 <defaultCommand+0x3c>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2116      	movs	r1, #22
 8005ea4:	20ff      	movs	r0, #255	; 0xff
 8005ea6:	f001 ffc5 	bl	8007e34 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <defaultCommand+0xa8>)
 8005eac:	2202      	movs	r2, #2
 8005eae:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8005eb0:	2064      	movs	r0, #100	; 0x64
 8005eb2:	f008 f87b 	bl	800dfac <osDelay>
		ClearEEportsDir();
 8005eb6:	f7fd fb1b 	bl	80034f0 <ClearEEportsDir>
		osDelay(100);
 8005eba:	2064      	movs	r0, #100	; 0x64
 8005ebc:	f008 f876 	bl	800dfac <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8005ec0:	2240      	movs	r2, #64	; 0x40
 8005ec2:	4909      	ldr	r1, [pc, #36]	; (8005ee8 <defaultCommand+0xac>)
 8005ec4:	0028      	movs	r0, r5
 8005ec6:	f00d f927 	bl	8013118 <memcpy>
	if(result == BOS_ERR_WrongValue)
 8005eca:	e7d5      	b.n	8005e78 <defaultCommand+0x3c>
 8005ecc:	08018e4c 	.word	0x08018e4c
 8005ed0:	08018e7c 	.word	0x08018e7c
 8005ed4:	08018e84 	.word	0x08018e84
 8005ed8:	20005794 	.word	0x20005794
 8005edc:	20000014 	.word	0x20000014
 8005ee0:	08018e54 	.word	0x08018e54
 8005ee4:	200007c8 	.word	0x200007c8
 8005ee8:	08018e94 	.word	0x08018e94

08005eec <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eee:	46d6      	mov	lr, sl
 8005ef0:	464f      	mov	r7, r9
 8005ef2:	4646      	mov	r6, r8
 8005ef4:	b5c0      	push	{r6, r7, lr}
 8005ef6:	b08c      	sub	sp, #48	; 0x30
 8005ef8:	0007      	movs	r7, r0
 8005efa:	0016      	movs	r6, r2
 8005efc:	2400      	movs	r4, #0
 8005efe:	2300      	movs	r3, #0
 8005f00:	4698      	mov	r8, r3
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8005f02:	940b      	str	r4, [sp, #44]	; 0x2c
 8005f04:	940a      	str	r4, [sp, #40]	; 0x28
 8005f06:	9409      	str	r4, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 8005f08:	9408      	str	r4, [sp, #32]
 8005f0a:	9407      	str	r4, [sp, #28]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005f0c:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f0e:	2101      	movs	r1, #1
 8005f10:	0030      	movs	r0, r6
 8005f12:	f008 f96b 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005f16:	0005      	movs	r5, r0
 8005f18:	4bb8      	ldr	r3, [pc, #736]	; (80061fc <setCommand+0x310>)
 8005f1a:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	49b8      	ldr	r1, [pc, #736]	; (8006200 <setCommand+0x314>)
 8005f20:	f00d feff 	bl	8013d22 <strncmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d01f      	beq.n	8005f68 <setCommand+0x7c>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 8005f28:	2204      	movs	r2, #4
 8005f2a:	49b6      	ldr	r1, [pc, #728]	; (8006204 <setCommand+0x318>)
 8005f2c:	0028      	movs	r0, r5
 8005f2e:	f00d fef8 	bl	8013d22 <strncmp>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d100      	bne.n	8005f38 <setCommand+0x4c>
 8005f36:	e185      	b.n	8006244 <setCommand+0x358>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8005f38:	2204      	movs	r2, #4
 8005f3a:	49b3      	ldr	r1, [pc, #716]	; (8006208 <setCommand+0x31c>)
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	f00d fef0 	bl	8013d22 <strncmp>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d100      	bne.n	8005f48 <setCommand+0x5c>
 8005f46:	e1e0      	b.n	800630a <setCommand+0x41e>
		result =BOS_ERR_WrongParam;
 8005f48:	2567      	movs	r5, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005f4a:	2d67      	cmp	r5, #103	; 0x67
 8005f4c:	d101      	bne.n	8005f52 <setCommand+0x66>
 8005f4e:	f000 fbed 	bl	800672c <setCommand+0x840>
	else if(result == BOS_ERR_WrongValue)
 8005f52:	2d68      	cmp	r5, #104	; 0x68
 8005f54:	d101      	bne.n	8005f5a <setCommand+0x6e>
 8005f56:	f000 fbf0 	bl	800673a <setCommand+0x84e>
}
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	b00c      	add	sp, #48	; 0x30
 8005f5e:	bce0      	pop	{r5, r6, r7}
 8005f60:	46ba      	mov	sl, r7
 8005f62:	46b1      	mov	r9, r6
 8005f64:	46a8      	mov	r8, r5
 8005f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005f68:	aa0a      	add	r2, sp, #40	; 0x28
 8005f6a:	2102      	movs	r1, #2
 8005f6c:	0030      	movs	r0, r6
 8005f6e:	f008 f93d 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8005f72:	0004      	movs	r4, r0
 8005f74:	4ba5      	ldr	r3, [pc, #660]	; (800620c <setCommand+0x320>)
 8005f76:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005f78:	4ba0      	ldr	r3, [pc, #640]	; (80061fc <setCommand+0x310>)
 8005f7a:	681d      	ldr	r5, [r3, #0]
 8005f7c:	3504      	adds	r5, #4
 8005f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f80:	1f1e      	subs	r6, r3, #4
 8005f82:	0032      	movs	r2, r6
 8005f84:	49a2      	ldr	r1, [pc, #648]	; (8006210 <setCommand+0x324>)
 8005f86:	0028      	movs	r0, r5
 8005f88:	f00d fecb 	bl	8013d22 <strncmp>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d156      	bne.n	800603e <setCommand+0x152>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8005f90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f92:	002a      	movs	r2, r5
 8005f94:	499f      	ldr	r1, [pc, #636]	; (8006214 <setCommand+0x328>)
 8005f96:	0020      	movs	r0, r4
 8005f98:	f00d fec3 	bl	8013d22 <strncmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d016      	beq.n	8005fce <setCommand+0xe2>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8005fa0:	002a      	movs	r2, r5
 8005fa2:	499d      	ldr	r1, [pc, #628]	; (8006218 <setCommand+0x32c>)
 8005fa4:	0020      	movs	r0, r4
 8005fa6:	f00d febc 	bl	8013d22 <strncmp>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d01e      	beq.n	8005fec <setCommand+0x100>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 8005fae:	002a      	movs	r2, r5
 8005fb0:	499a      	ldr	r1, [pc, #616]	; (800621c <setCommand+0x330>)
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	f00d feb5 	bl	8013d22 <strncmp>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d026      	beq.n	800600a <setCommand+0x11e>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8005fbc:	002a      	movs	r2, r5
 8005fbe:	4998      	ldr	r1, [pc, #608]	; (8006220 <setCommand+0x334>)
 8005fc0:	0020      	movs	r0, r4
 8005fc2:	f00d feae 	bl	8013d22 <strncmp>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d02e      	beq.n	8006028 <setCommand+0x13c>
				result =BOS_ERR_WrongValue;
 8005fca:	2568      	movs	r5, #104	; 0x68
 8005fcc:	e7bd      	b.n	8005f4a <setCommand+0x5e>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8005fce:	4b95      	ldr	r3, [pc, #596]	; (8006224 <setCommand+0x338>)
 8005fd0:	2260      	movs	r2, #96	; 0x60
 8005fd2:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8005fd4:	7859      	ldrb	r1, [r3, #1]
 8005fd6:	0209      	lsls	r1, r1, #8
 8005fd8:	2360      	movs	r3, #96	; 0x60
 8005fda:	4319      	orrs	r1, r3
 8005fdc:	b209      	sxth	r1, r1
 8005fde:	b289      	uxth	r1, r1
 8005fe0:	308a      	adds	r0, #138	; 0x8a
 8005fe2:	0040      	lsls	r0, r0, #1
 8005fe4:	f005 fdde 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8005fe8:	2500      	movs	r5, #0
 8005fea:	e371      	b.n	80066d0 <setCommand+0x7e4>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8005fec:	4b8d      	ldr	r3, [pc, #564]	; (8006224 <setCommand+0x338>)
 8005fee:	2220      	movs	r2, #32
 8005ff0:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8005ff2:	7859      	ldrb	r1, [r3, #1]
 8005ff4:	0209      	lsls	r1, r1, #8
 8005ff6:	2320      	movs	r3, #32
 8005ff8:	4319      	orrs	r1, r3
 8005ffa:	b209      	sxth	r1, r1
 8005ffc:	b289      	uxth	r1, r1
 8005ffe:	308a      	adds	r0, #138	; 0x8a
 8006000:	0040      	lsls	r0, r0, #1
 8006002:	f005 fdcf 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006006:	2500      	movs	r5, #0
 8006008:	e362      	b.n	80066d0 <setCommand+0x7e4>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800600a:	4b86      	ldr	r3, [pc, #536]	; (8006224 <setCommand+0x338>)
 800600c:	2240      	movs	r2, #64	; 0x40
 800600e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006010:	7859      	ldrb	r1, [r3, #1]
 8006012:	0209      	lsls	r1, r1, #8
 8006014:	2340      	movs	r3, #64	; 0x40
 8006016:	4319      	orrs	r1, r3
 8006018:	b209      	sxth	r1, r1
 800601a:	b289      	uxth	r1, r1
 800601c:	308a      	adds	r0, #138	; 0x8a
 800601e:	0040      	lsls	r0, r0, #1
 8006020:	f005 fdc0 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006024:	2500      	movs	r5, #0
 8006026:	e353      	b.n	80066d0 <setCommand+0x7e4>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006028:	4b7e      	ldr	r3, [pc, #504]	; (8006224 <setCommand+0x338>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800602e:	7859      	ldrb	r1, [r3, #1]
 8006030:	0209      	lsls	r1, r1, #8
 8006032:	308a      	adds	r0, #138	; 0x8a
 8006034:	0040      	lsls	r0, r0, #1
 8006036:	f005 fdb5 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 800603a:	2500      	movs	r5, #0
 800603c:	e348      	b.n	80066d0 <setCommand+0x7e4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 800603e:	0032      	movs	r2, r6
 8006040:	4979      	ldr	r1, [pc, #484]	; (8006228 <setCommand+0x33c>)
 8006042:	0028      	movs	r0, r5
 8006044:	f00d fe6d 	bl	8013d22 <strncmp>
 8006048:	2800      	cmp	r0, #0
 800604a:	d14f      	bne.n	80060ec <setCommand+0x200>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800604c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800604e:	002a      	movs	r2, r5
 8006050:	4970      	ldr	r1, [pc, #448]	; (8006214 <setCommand+0x328>)
 8006052:	0020      	movs	r0, r4
 8006054:	f00d fe65 	bl	8013d22 <strncmp>
 8006058:	2800      	cmp	r0, #0
 800605a:	d016      	beq.n	800608a <setCommand+0x19e>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 800605c:	002a      	movs	r2, r5
 800605e:	496e      	ldr	r1, [pc, #440]	; (8006218 <setCommand+0x32c>)
 8006060:	0020      	movs	r0, r4
 8006062:	f00d fe5e 	bl	8013d22 <strncmp>
 8006066:	2800      	cmp	r0, #0
 8006068:	d01c      	beq.n	80060a4 <setCommand+0x1b8>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 800606a:	002a      	movs	r2, r5
 800606c:	4968      	ldr	r1, [pc, #416]	; (8006210 <setCommand+0x324>)
 800606e:	0020      	movs	r0, r4
 8006070:	f00d fe57 	bl	8013d22 <strncmp>
 8006074:	2800      	cmp	r0, #0
 8006076:	d022      	beq.n	80060be <setCommand+0x1d2>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006078:	002a      	movs	r2, r5
 800607a:	4969      	ldr	r1, [pc, #420]	; (8006220 <setCommand+0x334>)
 800607c:	0020      	movs	r0, r4
 800607e:	f00d fe50 	bl	8013d22 <strncmp>
 8006082:	2800      	cmp	r0, #0
 8006084:	d028      	beq.n	80060d8 <setCommand+0x1ec>
				result =BOS_ERR_WrongValue;
 8006086:	2568      	movs	r5, #104	; 0x68
 8006088:	e75f      	b.n	8005f4a <setCommand+0x5e>
				BOSMessaging.trace =TRACE_BOTH;
 800608a:	4b66      	ldr	r3, [pc, #408]	; (8006224 <setCommand+0x338>)
 800608c:	2203      	movs	r2, #3
 800608e:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	21c0      	movs	r1, #192	; 0xc0
 8006094:	0089      	lsls	r1, r1, #2
 8006096:	4319      	orrs	r1, r3
 8006098:	308a      	adds	r0, #138	; 0x8a
 800609a:	0040      	lsls	r0, r0, #1
 800609c:	f005 fd82 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80060a0:	2500      	movs	r5, #0
 80060a2:	e315      	b.n	80066d0 <setCommand+0x7e4>
				BOSMessaging.trace =TRACE_MESSAGE;
 80060a4:	4b5f      	ldr	r3, [pc, #380]	; (8006224 <setCommand+0x338>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	0049      	lsls	r1, r1, #1
 80060b0:	4319      	orrs	r1, r3
 80060b2:	308a      	adds	r0, #138	; 0x8a
 80060b4:	0040      	lsls	r0, r0, #1
 80060b6:	f005 fd75 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80060ba:	2500      	movs	r5, #0
 80060bc:	e308      	b.n	80066d0 <setCommand+0x7e4>
				BOSMessaging.trace =TRACE_RESPONSE;
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <setCommand+0x338>)
 80060c0:	2202      	movs	r2, #2
 80060c2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2180      	movs	r1, #128	; 0x80
 80060c8:	0089      	lsls	r1, r1, #2
 80060ca:	4319      	orrs	r1, r3
 80060cc:	308a      	adds	r0, #138	; 0x8a
 80060ce:	0040      	lsls	r0, r0, #1
 80060d0:	f005 fd68 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80060d4:	2500      	movs	r5, #0
 80060d6:	e2fb      	b.n	80066d0 <setCommand+0x7e4>
				BOSMessaging.trace =TRACE_NONE;
 80060d8:	4b52      	ldr	r3, [pc, #328]	; (8006224 <setCommand+0x338>)
 80060da:	2200      	movs	r2, #0
 80060dc:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80060de:	7819      	ldrb	r1, [r3, #0]
 80060e0:	308a      	adds	r0, #138	; 0x8a
 80060e2:	0040      	lsls	r0, r0, #1
 80060e4:	f005 fd5e 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80060e8:	2500      	movs	r5, #0
 80060ea:	e2f1      	b.n	80066d0 <setCommand+0x7e4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80060ec:	0032      	movs	r2, r6
 80060ee:	494f      	ldr	r1, [pc, #316]	; (800622c <setCommand+0x340>)
 80060f0:	0028      	movs	r0, r5
 80060f2:	f00d fe16 	bl	8013d22 <strncmp>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d01d      	beq.n	8006136 <setCommand+0x24a>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80060fa:	0032      	movs	r2, r6
 80060fc:	494c      	ldr	r1, [pc, #304]	; (8006230 <setCommand+0x344>)
 80060fe:	0028      	movs	r0, r5
 8006100:	f00d fe0f 	bl	8013d22 <strncmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	d02d      	beq.n	8006164 <setCommand+0x278>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006108:	0032      	movs	r2, r6
 800610a:	494a      	ldr	r1, [pc, #296]	; (8006234 <setCommand+0x348>)
 800610c:	0028      	movs	r0, r5
 800610e:	f00d fe08 	bl	8013d22 <strncmp>
 8006112:	2800      	cmp	r0, #0
 8006114:	d036      	beq.n	8006184 <setCommand+0x298>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006116:	0032      	movs	r2, r6
 8006118:	4947      	ldr	r1, [pc, #284]	; (8006238 <setCommand+0x34c>)
 800611a:	0028      	movs	r0, r5
 800611c:	f00d fe01 	bl	8013d22 <strncmp>
 8006120:	2800      	cmp	r0, #0
 8006122:	d03f      	beq.n	80061a4 <setCommand+0x2b8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006124:	0032      	movs	r2, r6
 8006126:	4945      	ldr	r1, [pc, #276]	; (800623c <setCommand+0x350>)
 8006128:	0028      	movs	r0, r5
 800612a:	f00d fdfa 	bl	8013d22 <strncmp>
 800612e:	2800      	cmp	r0, #0
 8006130:	d04e      	beq.n	80061d0 <setCommand+0x2e4>
			result =BOS_ERR_WrongParam;
 8006132:	2567      	movs	r5, #103	; 0x67
 8006134:	e709      	b.n	8005f4a <setCommand+0x5e>
			temp2 =atoi((const char* )pcParameterString2);
 8006136:	0020      	movs	r0, r4
 8006138:	f00c ff9b 	bl	8013072 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800613c:	23e1      	movs	r3, #225	; 0xe1
 800613e:	031b      	lsls	r3, r3, #12
 8006140:	4298      	cmp	r0, r3
 8006142:	d901      	bls.n	8006148 <setCommand+0x25c>
				result =BOS_ERR_WrongValue;
 8006144:	2568      	movs	r5, #104	; 0x68
 8006146:	e700      	b.n	8005f4a <setCommand+0x5e>
				BOS.clibaudrate =temp2;
 8006148:	4c3d      	ldr	r4, [pc, #244]	; (8006240 <setCommand+0x354>)
 800614a:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800614c:	b281      	uxth	r1, r0
 800614e:	208c      	movs	r0, #140	; 0x8c
 8006150:	0040      	lsls	r0, r0, #1
 8006152:	f005 fd27 	bl	800bba4 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006156:	8961      	ldrh	r1, [r4, #10]
 8006158:	201a      	movs	r0, #26
 800615a:	30ff      	adds	r0, #255	; 0xff
 800615c:	f005 fd22 	bl	800bba4 <EE_WriteVariable>
				extraMessage =1;
 8006160:	2501      	movs	r5, #1
 8006162:	e2b5      	b.n	80066d0 <setCommand+0x7e4>
			temp16 =atoi((const char* )pcParameterString2);
 8006164:	0020      	movs	r0, r4
 8006166:	f00c ff84 	bl	8013072 <atoi>
 800616a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800616c:	2900      	cmp	r1, #0
 800616e:	d101      	bne.n	8006174 <setCommand+0x288>
				result =BOS_ERR_WrongValue;
 8006170:	2568      	movs	r5, #104	; 0x68
 8006172:	e6ea      	b.n	8005f4a <setCommand+0x5e>
				BOS.buttons.debounce =temp16;
 8006174:	4b32      	ldr	r3, [pc, #200]	; (8006240 <setCommand+0x354>)
 8006176:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006178:	2016      	movs	r0, #22
 800617a:	30ff      	adds	r0, #255	; 0xff
 800617c:	f005 fd12 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 8006180:	2500      	movs	r5, #0
 8006182:	e2a5      	b.n	80066d0 <setCommand+0x7e4>
			temp16 =atoi((const char* )pcParameterString2);
 8006184:	0020      	movs	r0, r4
 8006186:	f00c ff74 	bl	8013072 <atoi>
 800618a:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 800618c:	2900      	cmp	r1, #0
 800618e:	d101      	bne.n	8006194 <setCommand+0x2a8>
				result =BOS_ERR_WrongValue;
 8006190:	2568      	movs	r5, #104	; 0x68
 8006192:	e6da      	b.n	8005f4a <setCommand+0x5e>
				BOS.buttons.singleClickTime =temp16;
 8006194:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <setCommand+0x354>)
 8006196:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 8006198:	208b      	movs	r0, #139	; 0x8b
 800619a:	0040      	lsls	r0, r0, #1
 800619c:	f005 fd02 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80061a0:	2500      	movs	r5, #0
 80061a2:	e295      	b.n	80066d0 <setCommand+0x7e4>
			temp16 =atoi((const char* )pcParameterString2);
 80061a4:	0020      	movs	r0, r4
 80061a6:	f00c ff64 	bl	8013072 <atoi>
 80061aa:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2bfe      	cmp	r3, #254	; 0xfe
 80061b2:	d901      	bls.n	80061b8 <setCommand+0x2cc>
				result =BOS_ERR_WrongValue;
 80061b4:	2568      	movs	r5, #104	; 0x68
 80061b6:	e6c8      	b.n	8005f4a <setCommand+0x5e>
				BOS.buttons.minInterClickTime =temp16;
 80061b8:	b2c0      	uxtb	r0, r0
 80061ba:	4b21      	ldr	r3, [pc, #132]	; (8006240 <setCommand+0x354>)
 80061bc:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80061be:	7959      	ldrb	r1, [r3, #5]
 80061c0:	0209      	lsls	r1, r1, #8
 80061c2:	4301      	orrs	r1, r0
 80061c4:	2018      	movs	r0, #24
 80061c6:	30ff      	adds	r0, #255	; 0xff
 80061c8:	f005 fcec 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80061cc:	2500      	movs	r5, #0
 80061ce:	e27f      	b.n	80066d0 <setCommand+0x7e4>
			temp16 =atoi((const char* )pcParameterString2);
 80061d0:	0020      	movs	r0, r4
 80061d2:	f00c ff4e 	bl	8013072 <atoi>
 80061d6:	b283      	uxth	r3, r0
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2bfe      	cmp	r3, #254	; 0xfe
 80061de:	d901      	bls.n	80061e4 <setCommand+0x2f8>
				result =BOS_ERR_WrongValue;
 80061e0:	2568      	movs	r5, #104	; 0x68
 80061e2:	e6b2      	b.n	8005f4a <setCommand+0x5e>
				BOS.buttons.maxInterClickTime =temp16;
 80061e4:	b2c0      	uxtb	r0, r0
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <setCommand+0x354>)
 80061e8:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80061ea:	0200      	lsls	r0, r0, #8
 80061ec:	7919      	ldrb	r1, [r3, #4]
 80061ee:	4301      	orrs	r1, r0
 80061f0:	2018      	movs	r0, #24
 80061f2:	30ff      	adds	r0, #255	; 0xff
 80061f4:	f005 fcd6 	bl	800bba4 <EE_WriteVariable>
	uint8_t extraMessage =0, temp81, temp82, temp83, temp84;
 80061f8:	2500      	movs	r5, #0
 80061fa:	e269      	b.n	80066d0 <setCommand+0x7e4>
 80061fc:	20000a20 	.word	0x20000a20
 8006200:	08018d60 	.word	0x08018d60
 8006204:	08018ee0 	.word	0x08018ee0
 8006208:	08018eec 	.word	0x08018eec
 800620c:	20000a2c 	.word	0x20000a2c
 8006210:	08018d68 	.word	0x08018d68
 8006214:	08017d18 	.word	0x08017d18
 8006218:	08018ed4 	.word	0x08018ed4
 800621c:	08018edc 	.word	0x08018edc
 8006220:	08018d78 	.word	0x08018d78
 8006224:	20005714 	.word	0x20005714
 8006228:	08018d80 	.word	0x08018d80
 800622c:	08018d88 	.word	0x08018d88
 8006230:	08018d94 	.word	0x08018d94
 8006234:	08018da0 	.word	0x08018da0
 8006238:	08018db0 	.word	0x08018db0
 800623c:	08018dc4 	.word	0x08018dc4
 8006240:	20005794 	.word	0x20005794
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006244:	aa0a      	add	r2, sp, #40	; 0x28
 8006246:	2102      	movs	r1, #2
 8006248:	0030      	movs	r0, r6
 800624a:	f007 ffcf 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 800624e:	4ddd      	ldr	r5, [pc, #884]	; (80065c4 <setCommand+0x6d8>)
 8006250:	6028      	str	r0, [r5, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006252:	aa09      	add	r2, sp, #36	; 0x24
 8006254:	2103      	movs	r1, #3
 8006256:	0030      	movs	r0, r6
 8006258:	f007 ffc8 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 800625c:	4bda      	ldr	r3, [pc, #872]	; (80065c8 <setCommand+0x6dc>)
 800625e:	469a      	mov	sl, r3
 8006260:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006262:	aa08      	add	r2, sp, #32
 8006264:	2104      	movs	r1, #4
 8006266:	0030      	movs	r0, r6
 8006268:	f007 ffc0 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 800626c:	4bd7      	ldr	r3, [pc, #860]	; (80065cc <setCommand+0x6e0>)
 800626e:	4699      	mov	r9, r3
 8006270:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006272:	aa07      	add	r2, sp, #28
 8006274:	2105      	movs	r1, #5
 8006276:	0030      	movs	r0, r6
 8006278:	f007 ffb8 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 800627c:	4cd4      	ldr	r4, [pc, #848]	; (80065d0 <setCommand+0x6e4>)
 800627e:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006280:	6828      	ldr	r0, [r5, #0]
 8006282:	f00c fef6 	bl	8013072 <atoi>
 8006286:	b2c5      	uxtb	r5, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 8006288:	4653      	mov	r3, sl
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	f00c fef1 	bl	8013072 <atoi>
 8006290:	b2c6      	uxtb	r6, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006292:	464b      	mov	r3, r9
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f00c feec 	bl	8013072 <atoi>
 800629a:	b2c3      	uxtb	r3, r0
 800629c:	4699      	mov	r9, r3
		if(pcParameterString5 != NULL){
 800629e:	6824      	ldr	r4, [r4, #0]
 80062a0:	2c00      	cmp	r4, #0
 80062a2:	d013      	beq.n	80062cc <setCommand+0x3e0>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80062a4:	2202      	movs	r2, #2
 80062a6:	49cb      	ldr	r1, [pc, #812]	; (80065d4 <setCommand+0x6e8>)
 80062a8:	0020      	movs	r0, r4
 80062aa:	f00d fd3a 	bl	8013d22 <strncmp>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d00a      	beq.n	80062c8 <setCommand+0x3dc>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80062b2:	2202      	movs	r2, #2
 80062b4:	49c8      	ldr	r1, [pc, #800]	; (80065d8 <setCommand+0x6ec>)
 80062b6:	0020      	movs	r0, r4
 80062b8:	f00d fd33 	bl	8013d22 <strncmp>
 80062bc:	2800      	cmp	r0, #0
 80062be:	d000      	beq.n	80062c2 <setCommand+0x3d6>
 80062c0:	e202      	b.n	80066c8 <setCommand+0x7dc>
				temp84 =RTC_PM;
 80062c2:	2302      	movs	r3, #2
 80062c4:	4698      	mov	r8, r3
 80062c6:	e001      	b.n	80062cc <setCommand+0x3e0>
				temp84 =RTC_AM;
 80062c8:	2301      	movs	r3, #1
 80062ca:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 80062cc:	2d17      	cmp	r5, #23
 80062ce:	d900      	bls.n	80062d2 <setCommand+0x3e6>
 80062d0:	e220      	b.n	8006714 <setCommand+0x828>
 80062d2:	2e3b      	cmp	r6, #59	; 0x3b
 80062d4:	d900      	bls.n	80062d8 <setCommand+0x3ec>
 80062d6:	e220      	b.n	800671a <setCommand+0x82e>
 80062d8:	464b      	mov	r3, r9
 80062da:	2b3b      	cmp	r3, #59	; 0x3b
 80062dc:	d901      	bls.n	80062e2 <setCommand+0x3f6>
				result =BOS_ERR_WrongValue;
 80062de:	2568      	movs	r5, #104	; 0x68
 80062e0:	e633      	b.n	8005f4a <setCommand+0x5e>
				GetTimeDate();
 80062e2:	f007 fb07 	bl	800d8f4 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 80062e6:	4cbd      	ldr	r4, [pc, #756]	; (80065dc <setCommand+0x6f0>)
 80062e8:	7d23      	ldrb	r3, [r4, #20]
 80062ea:	8b22      	ldrh	r2, [r4, #24]
 80062ec:	7d61      	ldrb	r1, [r4, #21]
 80062ee:	7da0      	ldrb	r0, [r4, #22]
 80062f0:	7b24      	ldrb	r4, [r4, #12]
 80062f2:	b264      	sxtb	r4, r4
 80062f4:	9404      	str	r4, [sp, #16]
 80062f6:	4644      	mov	r4, r8
 80062f8:	9403      	str	r4, [sp, #12]
 80062fa:	9502      	str	r5, [sp, #8]
 80062fc:	9601      	str	r6, [sp, #4]
 80062fe:	464c      	mov	r4, r9
 8006300:	9400      	str	r4, [sp, #0]
 8006302:	f007 fa9d 	bl	800d840 <BOS_CalendarConfig>
 8006306:	0005      	movs	r5, r0
 8006308:	e1df      	b.n	80066ca <setCommand+0x7de>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800630a:	aa0a      	add	r2, sp, #40	; 0x28
 800630c:	2102      	movs	r1, #2
 800630e:	0030      	movs	r0, r6
 8006310:	f007 ff6c 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006314:	4bab      	ldr	r3, [pc, #684]	; (80065c4 <setCommand+0x6d8>)
 8006316:	469a      	mov	sl, r3
 8006318:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800631a:	aa09      	add	r2, sp, #36	; 0x24
 800631c:	2103      	movs	r1, #3
 800631e:	0030      	movs	r0, r6
 8006320:	f007 ff64 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006324:	4ba8      	ldr	r3, [pc, #672]	; (80065c8 <setCommand+0x6dc>)
 8006326:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006328:	aa08      	add	r2, sp, #32
 800632a:	2104      	movs	r1, #4
 800632c:	0030      	movs	r0, r6
 800632e:	f007 ff5d 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006332:	4da6      	ldr	r5, [pc, #664]	; (80065cc <setCommand+0x6e0>)
 8006334:	6028      	str	r0, [r5, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006336:	aa07      	add	r2, sp, #28
 8006338:	2105      	movs	r1, #5
 800633a:	0030      	movs	r0, r6
 800633c:	f007 ff56 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006340:	4ea3      	ldr	r6, [pc, #652]	; (80065d0 <setCommand+0x6e4>)
 8006342:	6030      	str	r0, [r6, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006344:	6828      	ldr	r0, [r5, #0]
 8006346:	f00c fe94 	bl	8013072 <atoi>
 800634a:	b2c3      	uxtb	r3, r0
 800634c:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 800634e:	6830      	ldr	r0, [r6, #0]
 8006350:	f00c fe8f 	bl	8013072 <atoi>
 8006354:	b283      	uxth	r3, r0
 8006356:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006358:	4653      	mov	r3, sl
 800635a:	681d      	ldr	r5, [r3, #0]
 800635c:	2206      	movs	r2, #6
 800635e:	49a0      	ldr	r1, [pc, #640]	; (80065e0 <setCommand+0x6f4>)
 8006360:	0028      	movs	r0, r5
 8006362:	f00d fcde 	bl	8013d22 <strncmp>
 8006366:	2800      	cmp	r0, #0
 8006368:	d032      	beq.n	80063d0 <setCommand+0x4e4>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 800636a:	2207      	movs	r2, #7
 800636c:	499d      	ldr	r1, [pc, #628]	; (80065e4 <setCommand+0x6f8>)
 800636e:	0028      	movs	r0, r5
 8006370:	f00d fcd7 	bl	8013d22 <strncmp>
 8006374:	2800      	cmp	r0, #0
 8006376:	d100      	bne.n	800637a <setCommand+0x48e>
 8006378:	e0f0      	b.n	800655c <setCommand+0x670>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 800637a:	2209      	movs	r2, #9
 800637c:	499a      	ldr	r1, [pc, #616]	; (80065e8 <setCommand+0x6fc>)
 800637e:	0028      	movs	r0, r5
 8006380:	f00d fccf 	bl	8013d22 <strncmp>
 8006384:	2800      	cmp	r0, #0
 8006386:	d100      	bne.n	800638a <setCommand+0x49e>
 8006388:	e0eb      	b.n	8006562 <setCommand+0x676>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 800638a:	2208      	movs	r2, #8
 800638c:	4997      	ldr	r1, [pc, #604]	; (80065ec <setCommand+0x700>)
 800638e:	0028      	movs	r0, r5
 8006390:	f00d fcc7 	bl	8013d22 <strncmp>
 8006394:	2800      	cmp	r0, #0
 8006396:	d100      	bne.n	800639a <setCommand+0x4ae>
 8006398:	e0e6      	b.n	8006568 <setCommand+0x67c>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800639a:	2206      	movs	r2, #6
 800639c:	4994      	ldr	r1, [pc, #592]	; (80065f0 <setCommand+0x704>)
 800639e:	0028      	movs	r0, r5
 80063a0:	f00d fcbf 	bl	8013d22 <strncmp>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d100      	bne.n	80063aa <setCommand+0x4be>
 80063a8:	e0e1      	b.n	800656e <setCommand+0x682>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80063aa:	2208      	movs	r2, #8
 80063ac:	4991      	ldr	r1, [pc, #580]	; (80065f4 <setCommand+0x708>)
 80063ae:	0028      	movs	r0, r5
 80063b0:	f00d fcb7 	bl	8013d22 <strncmp>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	d100      	bne.n	80063ba <setCommand+0x4ce>
 80063b8:	e0dc      	b.n	8006574 <setCommand+0x688>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 80063ba:	2206      	movs	r2, #6
 80063bc:	498e      	ldr	r1, [pc, #568]	; (80065f8 <setCommand+0x70c>)
 80063be:	0028      	movs	r0, r5
 80063c0:	f00d fcaf 	bl	8013d22 <strncmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d000      	beq.n	80063ca <setCommand+0x4de>
 80063c8:	e0d7      	b.n	800657a <setCommand+0x68e>
			temp81 =SUNDAY;
 80063ca:	2407      	movs	r4, #7
	BOS_Status result =BOS_OK;
 80063cc:	2500      	movs	r5, #0
 80063ce:	e001      	b.n	80063d4 <setCommand+0x4e8>
			temp81 =MONDAY;
 80063d0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80063d2:	2500      	movs	r5, #0
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80063d4:	4b7c      	ldr	r3, [pc, #496]	; (80065c8 <setCommand+0x6dc>)
 80063d6:	681e      	ldr	r6, [r3, #0]
 80063d8:	2207      	movs	r2, #7
 80063da:	4988      	ldr	r1, [pc, #544]	; (80065fc <setCommand+0x710>)
 80063dc:	0030      	movs	r0, r6
 80063de:	f00d fca0 	bl	8013d22 <strncmp>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d100      	bne.n	80063e8 <setCommand+0x4fc>
 80063e6:	e0ca      	b.n	800657e <setCommand+0x692>
 80063e8:	2202      	movs	r2, #2
 80063ea:	4985      	ldr	r1, [pc, #532]	; (8006600 <setCommand+0x714>)
 80063ec:	0030      	movs	r0, r6
 80063ee:	f00d fc98 	bl	8013d22 <strncmp>
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d100      	bne.n	80063f8 <setCommand+0x50c>
 80063f6:	e0d6      	b.n	80065a6 <setCommand+0x6ba>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80063f8:	2208      	movs	r2, #8
 80063fa:	4982      	ldr	r1, [pc, #520]	; (8006604 <setCommand+0x718>)
 80063fc:	0030      	movs	r0, r6
 80063fe:	f00d fc90 	bl	8013d22 <strncmp>
 8006402:	2800      	cmp	r0, #0
 8006404:	d100      	bne.n	8006408 <setCommand+0x51c>
 8006406:	e0d0      	b.n	80065aa <setCommand+0x6be>
 8006408:	2202      	movs	r2, #2
 800640a:	497f      	ldr	r1, [pc, #508]	; (8006608 <setCommand+0x71c>)
 800640c:	0030      	movs	r0, r6
 800640e:	f00d fc88 	bl	8013d22 <strncmp>
 8006412:	2800      	cmp	r0, #0
 8006414:	d100      	bne.n	8006418 <setCommand+0x52c>
 8006416:	e0ca      	b.n	80065ae <setCommand+0x6c2>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 8006418:	2205      	movs	r2, #5
 800641a:	497c      	ldr	r1, [pc, #496]	; (800660c <setCommand+0x720>)
 800641c:	0030      	movs	r0, r6
 800641e:	f00d fc80 	bl	8013d22 <strncmp>
 8006422:	2800      	cmp	r0, #0
 8006424:	d100      	bne.n	8006428 <setCommand+0x53c>
 8006426:	e0c4      	b.n	80065b2 <setCommand+0x6c6>
 8006428:	2202      	movs	r2, #2
 800642a:	4979      	ldr	r1, [pc, #484]	; (8006610 <setCommand+0x724>)
 800642c:	0030      	movs	r0, r6
 800642e:	f00d fc78 	bl	8013d22 <strncmp>
 8006432:	2800      	cmp	r0, #0
 8006434:	d100      	bne.n	8006438 <setCommand+0x54c>
 8006436:	e0be      	b.n	80065b6 <setCommand+0x6ca>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 8006438:	2205      	movs	r2, #5
 800643a:	4976      	ldr	r1, [pc, #472]	; (8006614 <setCommand+0x728>)
 800643c:	0030      	movs	r0, r6
 800643e:	f00d fc70 	bl	8013d22 <strncmp>
 8006442:	2800      	cmp	r0, #0
 8006444:	d100      	bne.n	8006448 <setCommand+0x55c>
 8006446:	e0b8      	b.n	80065ba <setCommand+0x6ce>
 8006448:	2202      	movs	r2, #2
 800644a:	4973      	ldr	r1, [pc, #460]	; (8006618 <setCommand+0x72c>)
 800644c:	0030      	movs	r0, r6
 800644e:	f00d fc68 	bl	8013d22 <strncmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	d100      	bne.n	8006458 <setCommand+0x56c>
 8006456:	e0b2      	b.n	80065be <setCommand+0x6d2>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006458:	2203      	movs	r2, #3
 800645a:	4970      	ldr	r1, [pc, #448]	; (800661c <setCommand+0x730>)
 800645c:	0030      	movs	r0, r6
 800645e:	f00d fc60 	bl	8013d22 <strncmp>
 8006462:	2800      	cmp	r0, #0
 8006464:	d100      	bne.n	8006468 <setCommand+0x57c>
 8006466:	e0fb      	b.n	8006660 <setCommand+0x774>
 8006468:	2202      	movs	r2, #2
 800646a:	496d      	ldr	r1, [pc, #436]	; (8006620 <setCommand+0x734>)
 800646c:	0030      	movs	r0, r6
 800646e:	f00d fc58 	bl	8013d22 <strncmp>
 8006472:	2800      	cmp	r0, #0
 8006474:	d100      	bne.n	8006478 <setCommand+0x58c>
 8006476:	e0f5      	b.n	8006664 <setCommand+0x778>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006478:	2204      	movs	r2, #4
 800647a:	496a      	ldr	r1, [pc, #424]	; (8006624 <setCommand+0x738>)
 800647c:	0030      	movs	r0, r6
 800647e:	f00d fc50 	bl	8013d22 <strncmp>
 8006482:	2800      	cmp	r0, #0
 8006484:	d100      	bne.n	8006488 <setCommand+0x59c>
 8006486:	e0ef      	b.n	8006668 <setCommand+0x77c>
 8006488:	2202      	movs	r2, #2
 800648a:	4967      	ldr	r1, [pc, #412]	; (8006628 <setCommand+0x73c>)
 800648c:	0030      	movs	r0, r6
 800648e:	f00d fc48 	bl	8013d22 <strncmp>
 8006492:	2800      	cmp	r0, #0
 8006494:	d100      	bne.n	8006498 <setCommand+0x5ac>
 8006496:	e0e9      	b.n	800666c <setCommand+0x780>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 8006498:	2204      	movs	r2, #4
 800649a:	4964      	ldr	r1, [pc, #400]	; (800662c <setCommand+0x740>)
 800649c:	0030      	movs	r0, r6
 800649e:	f00d fc40 	bl	8013d22 <strncmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d100      	bne.n	80064a8 <setCommand+0x5bc>
 80064a6:	e0e3      	b.n	8006670 <setCommand+0x784>
 80064a8:	2202      	movs	r2, #2
 80064aa:	4961      	ldr	r1, [pc, #388]	; (8006630 <setCommand+0x744>)
 80064ac:	0030      	movs	r0, r6
 80064ae:	f00d fc38 	bl	8013d22 <strncmp>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d100      	bne.n	80064b8 <setCommand+0x5cc>
 80064b6:	e0dd      	b.n	8006674 <setCommand+0x788>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80064b8:	2205      	movs	r2, #5
 80064ba:	495e      	ldr	r1, [pc, #376]	; (8006634 <setCommand+0x748>)
 80064bc:	0030      	movs	r0, r6
 80064be:	f00d fc30 	bl	8013d22 <strncmp>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d100      	bne.n	80064c8 <setCommand+0x5dc>
 80064c6:	e0d7      	b.n	8006678 <setCommand+0x78c>
 80064c8:	2202      	movs	r2, #2
 80064ca:	495b      	ldr	r1, [pc, #364]	; (8006638 <setCommand+0x74c>)
 80064cc:	0030      	movs	r0, r6
 80064ce:	f00d fc28 	bl	8013d22 <strncmp>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d100      	bne.n	80064d8 <setCommand+0x5ec>
 80064d6:	e0d1      	b.n	800667c <setCommand+0x790>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80064d8:	2209      	movs	r2, #9
 80064da:	4958      	ldr	r1, [pc, #352]	; (800663c <setCommand+0x750>)
 80064dc:	0030      	movs	r0, r6
 80064de:	f00d fc20 	bl	8013d22 <strncmp>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d100      	bne.n	80064e8 <setCommand+0x5fc>
 80064e6:	e0cb      	b.n	8006680 <setCommand+0x794>
 80064e8:	2202      	movs	r2, #2
 80064ea:	4955      	ldr	r1, [pc, #340]	; (8006640 <setCommand+0x754>)
 80064ec:	0030      	movs	r0, r6
 80064ee:	f00d fc18 	bl	8013d22 <strncmp>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d100      	bne.n	80064f8 <setCommand+0x60c>
 80064f6:	e0c5      	b.n	8006684 <setCommand+0x798>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 80064f8:	2207      	movs	r2, #7
 80064fa:	4952      	ldr	r1, [pc, #328]	; (8006644 <setCommand+0x758>)
 80064fc:	0030      	movs	r0, r6
 80064fe:	f00d fc10 	bl	8013d22 <strncmp>
 8006502:	2800      	cmp	r0, #0
 8006504:	d100      	bne.n	8006508 <setCommand+0x61c>
 8006506:	e0bf      	b.n	8006688 <setCommand+0x79c>
 8006508:	2202      	movs	r2, #2
 800650a:	494f      	ldr	r1, [pc, #316]	; (8006648 <setCommand+0x75c>)
 800650c:	0030      	movs	r0, r6
 800650e:	f00d fc08 	bl	8013d22 <strncmp>
 8006512:	2800      	cmp	r0, #0
 8006514:	d100      	bne.n	8006518 <setCommand+0x62c>
 8006516:	e0b9      	b.n	800668c <setCommand+0x7a0>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006518:	2208      	movs	r2, #8
 800651a:	494c      	ldr	r1, [pc, #304]	; (800664c <setCommand+0x760>)
 800651c:	0030      	movs	r0, r6
 800651e:	f00d fc00 	bl	8013d22 <strncmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	d100      	bne.n	8006528 <setCommand+0x63c>
 8006526:	e0b3      	b.n	8006690 <setCommand+0x7a4>
 8006528:	2202      	movs	r2, #2
 800652a:	4949      	ldr	r1, [pc, #292]	; (8006650 <setCommand+0x764>)
 800652c:	0030      	movs	r0, r6
 800652e:	f00d fbf8 	bl	8013d22 <strncmp>
 8006532:	2800      	cmp	r0, #0
 8006534:	d100      	bne.n	8006538 <setCommand+0x64c>
 8006536:	e0ad      	b.n	8006694 <setCommand+0x7a8>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006538:	2208      	movs	r2, #8
 800653a:	4946      	ldr	r1, [pc, #280]	; (8006654 <setCommand+0x768>)
 800653c:	0030      	movs	r0, r6
 800653e:	f00d fbf0 	bl	8013d22 <strncmp>
 8006542:	2800      	cmp	r0, #0
 8006544:	d100      	bne.n	8006548 <setCommand+0x65c>
 8006546:	e0a7      	b.n	8006698 <setCommand+0x7ac>
 8006548:	2202      	movs	r2, #2
 800654a:	4943      	ldr	r1, [pc, #268]	; (8006658 <setCommand+0x76c>)
 800654c:	0030      	movs	r0, r6
 800654e:	f00d fbe8 	bl	8013d22 <strncmp>
 8006552:	2800      	cmp	r0, #0
 8006554:	d000      	beq.n	8006558 <setCommand+0x66c>
 8006556:	e0db      	b.n	8006710 <setCommand+0x824>
			temp82 =DECEMBER;
 8006558:	260c      	movs	r6, #12
 800655a:	e011      	b.n	8006580 <setCommand+0x694>
			temp81 =TUESDAY;
 800655c:	2402      	movs	r4, #2
	BOS_Status result =BOS_OK;
 800655e:	2500      	movs	r5, #0
 8006560:	e738      	b.n	80063d4 <setCommand+0x4e8>
			temp81 =WEDNESDAY;
 8006562:	2403      	movs	r4, #3
	BOS_Status result =BOS_OK;
 8006564:	2500      	movs	r5, #0
 8006566:	e735      	b.n	80063d4 <setCommand+0x4e8>
			temp81 =THURSDAY;
 8006568:	2404      	movs	r4, #4
	BOS_Status result =BOS_OK;
 800656a:	2500      	movs	r5, #0
 800656c:	e732      	b.n	80063d4 <setCommand+0x4e8>
			temp81 =FRIDAY;
 800656e:	2405      	movs	r4, #5
	BOS_Status result =BOS_OK;
 8006570:	2500      	movs	r5, #0
 8006572:	e72f      	b.n	80063d4 <setCommand+0x4e8>
			temp81 =SATURDAY;
 8006574:	2406      	movs	r4, #6
	BOS_Status result =BOS_OK;
 8006576:	2500      	movs	r5, #0
 8006578:	e72c      	b.n	80063d4 <setCommand+0x4e8>
			result =BOS_ERR_WrongValue;
 800657a:	2568      	movs	r5, #104	; 0x68
 800657c:	e72a      	b.n	80063d4 <setCommand+0x4e8>
			temp82 =JANUARY;
 800657e:	2601      	movs	r6, #1
		if(result == BOS_OK){
 8006580:	2d00      	cmp	r5, #0
 8006582:	d000      	beq.n	8006586 <setCommand+0x69a>
 8006584:	e0a1      	b.n	80066ca <setCommand+0x7de>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006586:	4643      	mov	r3, r8
 8006588:	3b01      	subs	r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b1e      	cmp	r3, #30
 800658e:	d900      	bls.n	8006592 <setCommand+0x6a6>
 8006590:	e0c6      	b.n	8006720 <setCommand+0x834>
 8006592:	23fa      	movs	r3, #250	; 0xfa
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	4599      	cmp	r9, r3
 8006598:	d200      	bcs.n	800659c <setCommand+0x6b0>
 800659a:	e0c4      	b.n	8006726 <setCommand+0x83a>
 800659c:	4b2f      	ldr	r3, [pc, #188]	; (800665c <setCommand+0x770>)
 800659e:	4599      	cmp	r9, r3
 80065a0:	d97c      	bls.n	800669c <setCommand+0x7b0>
				result =BOS_ERR_WrongValue;
 80065a2:	2568      	movs	r5, #104	; 0x68
 80065a4:	e4d1      	b.n	8005f4a <setCommand+0x5e>
			temp82 =JANUARY;
 80065a6:	2601      	movs	r6, #1
 80065a8:	e7ea      	b.n	8006580 <setCommand+0x694>
			temp82 =FEBRUARY;
 80065aa:	2602      	movs	r6, #2
 80065ac:	e7e8      	b.n	8006580 <setCommand+0x694>
 80065ae:	2602      	movs	r6, #2
 80065b0:	e7e6      	b.n	8006580 <setCommand+0x694>
			temp82 =MARCH;
 80065b2:	2603      	movs	r6, #3
 80065b4:	e7e4      	b.n	8006580 <setCommand+0x694>
 80065b6:	2603      	movs	r6, #3
 80065b8:	e7e2      	b.n	8006580 <setCommand+0x694>
			temp82 =APRIL;
 80065ba:	2604      	movs	r6, #4
 80065bc:	e7e0      	b.n	8006580 <setCommand+0x694>
 80065be:	2604      	movs	r6, #4
 80065c0:	e7de      	b.n	8006580 <setCommand+0x694>
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	20000a2c 	.word	0x20000a2c
 80065c8:	20000a34 	.word	0x20000a34
 80065cc:	20000a38 	.word	0x20000a38
 80065d0:	20000a3c 	.word	0x20000a3c
 80065d4:	0801a6b4 	.word	0x0801a6b4
 80065d8:	08018ee8 	.word	0x08018ee8
 80065dc:	20005794 	.word	0x20005794
 80065e0:	08018ef4 	.word	0x08018ef4
 80065e4:	08018efc 	.word	0x08018efc
 80065e8:	08018f04 	.word	0x08018f04
 80065ec:	08018f10 	.word	0x08018f10
 80065f0:	08018f1c 	.word	0x08018f1c
 80065f4:	08018f24 	.word	0x08018f24
 80065f8:	08018f30 	.word	0x08018f30
 80065fc:	08018f38 	.word	0x08018f38
 8006600:	08018f40 	.word	0x08018f40
 8006604:	08018f44 	.word	0x08018f44
 8006608:	08018f50 	.word	0x08018f50
 800660c:	08018f54 	.word	0x08018f54
 8006610:	08018f5c 	.word	0x08018f5c
 8006614:	08018f60 	.word	0x08018f60
 8006618:	08018f68 	.word	0x08018f68
 800661c:	08018f6c 	.word	0x08018f6c
 8006620:	08018f70 	.word	0x08018f70
 8006624:	08018f74 	.word	0x08018f74
 8006628:	08018f7c 	.word	0x08018f7c
 800662c:	08018f80 	.word	0x08018f80
 8006630:	08018f88 	.word	0x08018f88
 8006634:	08018f8c 	.word	0x08018f8c
 8006638:	08018f94 	.word	0x08018f94
 800663c:	08018f98 	.word	0x08018f98
 8006640:	08018fa4 	.word	0x08018fa4
 8006644:	08018fa8 	.word	0x08018fa8
 8006648:	08018fb0 	.word	0x08018fb0
 800664c:	08018fb4 	.word	0x08018fb4
 8006650:	08018fc0 	.word	0x08018fc0
 8006654:	08018fc4 	.word	0x08018fc4
 8006658:	08018fd0 	.word	0x08018fd0
 800665c:	00000834 	.word	0x00000834
			temp82 =MAY;
 8006660:	2605      	movs	r6, #5
 8006662:	e78d      	b.n	8006580 <setCommand+0x694>
 8006664:	2605      	movs	r6, #5
 8006666:	e78b      	b.n	8006580 <setCommand+0x694>
			temp82 =JUNE;
 8006668:	2606      	movs	r6, #6
 800666a:	e789      	b.n	8006580 <setCommand+0x694>
 800666c:	2606      	movs	r6, #6
 800666e:	e787      	b.n	8006580 <setCommand+0x694>
			temp82 =JULY;
 8006670:	2607      	movs	r6, #7
 8006672:	e785      	b.n	8006580 <setCommand+0x694>
 8006674:	2607      	movs	r6, #7
 8006676:	e783      	b.n	8006580 <setCommand+0x694>
			temp82 =AUGUST;
 8006678:	2608      	movs	r6, #8
 800667a:	e781      	b.n	8006580 <setCommand+0x694>
 800667c:	2608      	movs	r6, #8
 800667e:	e77f      	b.n	8006580 <setCommand+0x694>
			temp82 =SEPTEMBER;
 8006680:	2609      	movs	r6, #9
 8006682:	e77d      	b.n	8006580 <setCommand+0x694>
 8006684:	2609      	movs	r6, #9
 8006686:	e77b      	b.n	8006580 <setCommand+0x694>
			temp82 =OCTOBER;
 8006688:	260a      	movs	r6, #10
 800668a:	e779      	b.n	8006580 <setCommand+0x694>
 800668c:	260a      	movs	r6, #10
 800668e:	e777      	b.n	8006580 <setCommand+0x694>
			temp82 =NOVEMBER;
 8006690:	260b      	movs	r6, #11
 8006692:	e775      	b.n	8006580 <setCommand+0x694>
 8006694:	260b      	movs	r6, #11
 8006696:	e773      	b.n	8006580 <setCommand+0x694>
			temp82 =DECEMBER;
 8006698:	260c      	movs	r6, #12
 800669a:	e771      	b.n	8006580 <setCommand+0x694>
				GetTimeDate();
 800669c:	f007 f92a 	bl	800d8f4 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80066a0:	4b29      	ldr	r3, [pc, #164]	; (8006748 <setCommand+0x85c>)
 80066a2:	220c      	movs	r2, #12
 80066a4:	569a      	ldrsb	r2, [r3, r2]
 80066a6:	9204      	str	r2, [sp, #16]
 80066a8:	7cda      	ldrb	r2, [r3, #19]
 80066aa:	9203      	str	r2, [sp, #12]
 80066ac:	7c9a      	ldrb	r2, [r3, #18]
 80066ae:	9202      	str	r2, [sp, #8]
 80066b0:	7c5a      	ldrb	r2, [r3, #17]
 80066b2:	9201      	str	r2, [sp, #4]
 80066b4:	7c1b      	ldrb	r3, [r3, #16]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	0023      	movs	r3, r4
 80066ba:	464a      	mov	r2, r9
 80066bc:	4641      	mov	r1, r8
 80066be:	0030      	movs	r0, r6
 80066c0:	f007 f8be 	bl	800d840 <BOS_CalendarConfig>
 80066c4:	0005      	movs	r5, r0
 80066c6:	e000      	b.n	80066ca <setCommand+0x7de>
				result =BOS_ERR_WrongValue;
 80066c8:	2568      	movs	r5, #104	; 0x68
	if(result == BOS_OK){
 80066ca:	2d00      	cmp	r5, #0
 80066cc:	d000      	beq.n	80066d0 <setCommand+0x7e4>
 80066ce:	e43c      	b.n	8005f4a <setCommand+0x5e>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <setCommand+0x860>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d6:	18d3      	adds	r3, r2, r3
 80066d8:	2100      	movs	r1, #0
 80066da:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80066dc:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <setCommand+0x864>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	491c      	ldr	r1, [pc, #112]	; (8006754 <setCommand+0x868>)
 80066e2:	0038      	movs	r0, r7
 80066e4:	f00d fada 	bl	8013c9c <siprintf>
		if(extraMessage == 1){
 80066e8:	2d01      	cmp	r5, #1
 80066ea:	d000      	beq.n	80066ee <setCommand+0x802>
 80066ec:	e435      	b.n	8005f5a <setCommand+0x6e>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80066ee:	0038      	movs	r0, r7
 80066f0:	f7f9 fd12 	bl	8000118 <strlen>
 80066f4:	1838      	adds	r0, r7, r0
 80066f6:	2230      	movs	r2, #48	; 0x30
 80066f8:	4917      	ldr	r1, [pc, #92]	; (8006758 <setCommand+0x86c>)
 80066fa:	f00c fd0d 	bl	8013118 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80066fe:	0038      	movs	r0, r7
 8006700:	f7f9 fd0a 	bl	8000118 <strlen>
 8006704:	1838      	adds	r0, r7, r0
 8006706:	22b2      	movs	r2, #178	; 0xb2
 8006708:	4914      	ldr	r1, [pc, #80]	; (800675c <setCommand+0x870>)
 800670a:	f00c fd05 	bl	8013118 <memcpy>
 800670e:	e424      	b.n	8005f5a <setCommand+0x6e>
			result =BOS_ERR_WrongValue;
 8006710:	2568      	movs	r5, #104	; 0x68
 8006712:	e7da      	b.n	80066ca <setCommand+0x7de>
				result =BOS_ERR_WrongValue;
 8006714:	2568      	movs	r5, #104	; 0x68
 8006716:	f7ff fc18 	bl	8005f4a <setCommand+0x5e>
 800671a:	2568      	movs	r5, #104	; 0x68
 800671c:	f7ff fc15 	bl	8005f4a <setCommand+0x5e>
				result =BOS_ERR_WrongValue;
 8006720:	2568      	movs	r5, #104	; 0x68
 8006722:	f7ff fc12 	bl	8005f4a <setCommand+0x5e>
 8006726:	2568      	movs	r5, #104	; 0x68
 8006728:	f7ff fc0f 	bl	8005f4a <setCommand+0x5e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800672c:	2213      	movs	r2, #19
 800672e:	490c      	ldr	r1, [pc, #48]	; (8006760 <setCommand+0x874>)
 8006730:	0038      	movs	r0, r7
 8006732:	f00c fcf1 	bl	8013118 <memcpy>
 8006736:	f7ff fc10 	bl	8005f5a <setCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800673a:	220f      	movs	r2, #15
 800673c:	4909      	ldr	r1, [pc, #36]	; (8006764 <setCommand+0x878>)
 800673e:	0038      	movs	r0, r7
 8006740:	f00c fcea 	bl	8013118 <memcpy>
 8006744:	f7ff fc09 	bl	8005f5a <setCommand+0x6e>
 8006748:	20005794 	.word	0x20005794
 800674c:	20000a20 	.word	0x20000a20
 8006750:	20000a2c 	.word	0x20000a2c
 8006754:	08018fd4 	.word	0x08018fd4
 8006758:	08018fe8 	.word	0x08018fe8
 800675c:	08019018 	.word	0x08019018
 8006760:	08018e18 	.word	0x08018e18
 8006764:	08018e84 	.word	0x08018e84

08006768 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006768:	b530      	push	{r4, r5, lr}
 800676a:	b083      	sub	sp, #12
 800676c:	0004      	movs	r4, r0
 800676e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006770:	2300      	movs	r3, #0
 8006772:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006774:	aa01      	add	r2, sp, #4
 8006776:	2101      	movs	r1, #1
 8006778:	f007 fd38 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800677c:	2300      	movs	r3, #0
 800677e:	56c3      	ldrsb	r3, [r0, r3]
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d008      	beq.n	8006796 <removebuttonCommand+0x2e>
	uint8_t port =0;
 8006784:	2500      	movs	r5, #0
	result =RemovePortButton(port);
 8006786:	0028      	movs	r0, r5
 8006788:	f005 fe62 	bl	800c450 <RemovePortButton>
	if(result == BOS_OK){
 800678c:	2800      	cmp	r0, #0
 800678e:	d007      	beq.n	80067a0 <removebuttonCommand+0x38>
}
 8006790:	2000      	movs	r0, #0
 8006792:	b003      	add	sp, #12
 8006794:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006796:	3001      	adds	r0, #1
 8006798:	f00c fc71 	bl	801307e <atol>
 800679c:	b2c5      	uxtb	r5, r0
 800679e:	e7f2      	b.n	8006786 <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 80067a0:	002b      	movs	r3, r5
 80067a2:	002a      	movs	r2, r5
 80067a4:	4902      	ldr	r1, [pc, #8]	; (80067b0 <removebuttonCommand+0x48>)
 80067a6:	0020      	movs	r0, r4
 80067a8:	f00d fa78 	bl	8013c9c <siprintf>
 80067ac:	e7f0      	b.n	8006790 <removebuttonCommand+0x28>
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	080190cc 	.word	0x080190cc

080067b4 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80067b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b6:	b085      	sub	sp, #20
 80067b8:	0006      	movs	r6, r0
 80067ba:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80067bc:	2300      	movs	r3, #0
 80067be:	9303      	str	r3, [sp, #12]
 80067c0:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80067c2:	aa03      	add	r2, sp, #12
 80067c4:	2101      	movs	r1, #1
 80067c6:	0028      	movs	r0, r5
 80067c8:	f007 fd10 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 80067cc:	0004      	movs	r4, r0
 80067ce:	4b26      	ldr	r3, [pc, #152]	; (8006868 <addbuttonCommand+0xb4>)
 80067d0:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 80067d2:	9f03      	ldr	r7, [sp, #12]
 80067d4:	003a      	movs	r2, r7
 80067d6:	4925      	ldr	r1, [pc, #148]	; (800686c <addbuttonCommand+0xb8>)
 80067d8:	f00d faa3 	bl	8013d22 <strncmp>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d016      	beq.n	800680e <addbuttonCommand+0x5a>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80067e0:	003a      	movs	r2, r7
 80067e2:	4923      	ldr	r1, [pc, #140]	; (8006870 <addbuttonCommand+0xbc>)
 80067e4:	0020      	movs	r0, r4
 80067e6:	f00d fa9c 	bl	8013d22 <strncmp>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	d023      	beq.n	8006836 <addbuttonCommand+0x82>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80067ee:	003a      	movs	r2, r7
 80067f0:	4920      	ldr	r1, [pc, #128]	; (8006874 <addbuttonCommand+0xc0>)
 80067f2:	0020      	movs	r0, r4
 80067f4:	f00d fa95 	bl	8013d22 <strncmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d01e      	beq.n	800683a <addbuttonCommand+0x86>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80067fc:	003a      	movs	r2, r7
 80067fe:	491e      	ldr	r1, [pc, #120]	; (8006878 <addbuttonCommand+0xc4>)
 8006800:	0020      	movs	r0, r4
 8006802:	f00d fa8e 	bl	8013d22 <strncmp>
 8006806:	2800      	cmp	r0, #0
 8006808:	d019      	beq.n	800683e <addbuttonCommand+0x8a>
	uint8_t port =0, type =0;
 800680a:	2700      	movs	r7, #0
 800680c:	e000      	b.n	8006810 <addbuttonCommand+0x5c>
		type =MOMENTARY_NO;
 800680e:	2701      	movs	r7, #1
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006810:	aa02      	add	r2, sp, #8
 8006812:	2102      	movs	r1, #2
 8006814:	0028      	movs	r0, r5
 8006816:	f007 fce9 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800681a:	2300      	movs	r3, #0
 800681c:	56c3      	ldrsb	r3, [r0, r3]
 800681e:	2b70      	cmp	r3, #112	; 0x70
 8006820:	d00f      	beq.n	8006842 <addbuttonCommand+0x8e>
	uint8_t port =0, type =0;
 8006822:	2400      	movs	r4, #0
	result =AddPortButton(type,port);
 8006824:	0021      	movs	r1, r4
 8006826:	0038      	movs	r0, r7
 8006828:	f005 fd80 	bl	800c32c <AddPortButton>
	if(result == BOS_OK){
 800682c:	2800      	cmp	r0, #0
 800682e:	d00d      	beq.n	800684c <addbuttonCommand+0x98>
}
 8006830:	2000      	movs	r0, #0
 8006832:	b005      	add	sp, #20
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		type =MOMENTARY_NC;
 8006836:	2702      	movs	r7, #2
 8006838:	e7ea      	b.n	8006810 <addbuttonCommand+0x5c>
		type =ONOFF_NO;
 800683a:	2703      	movs	r7, #3
 800683c:	e7e8      	b.n	8006810 <addbuttonCommand+0x5c>
		type =ONOFF_NC;
 800683e:	2704      	movs	r7, #4
 8006840:	e7e6      	b.n	8006810 <addbuttonCommand+0x5c>
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006842:	3001      	adds	r0, #1
 8006844:	f00c fc1b 	bl	801307e <atol>
 8006848:	b2c4      	uxtb	r4, r0
 800684a:	e7eb      	b.n	8006824 <addbuttonCommand+0x70>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <addbuttonCommand+0xb4>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	18d3      	adds	r3, r2, r3
 8006854:	2100      	movs	r1, #0
 8006856:	7019      	strb	r1, [r3, #0]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006858:	9400      	str	r4, [sp, #0]
 800685a:	0023      	movs	r3, r4
 800685c:	4907      	ldr	r1, [pc, #28]	; (800687c <addbuttonCommand+0xc8>)
 800685e:	0030      	movs	r0, r6
 8006860:	f00d fa1c 	bl	8013c9c <siprintf>
 8006864:	e7e4      	b.n	8006830 <addbuttonCommand+0x7c>
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	20000a1c 	.word	0x20000a1c
 800686c:	080190f4 	.word	0x080190f4
 8006870:	08019104 	.word	0x08019104
 8006874:	08019114 	.word	0x08019114
 8006878:	08019120 	.word	0x08019120
 800687c:	0801912c 	.word	0x0801912c

08006880 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006882:	46de      	mov	lr, fp
 8006884:	4657      	mov	r7, sl
 8006886:	464e      	mov	r6, r9
 8006888:	4645      	mov	r5, r8
 800688a:	b5e0      	push	{r5, r6, r7, lr}
 800688c:	b099      	sub	sp, #100	; 0x64
 800688e:	9007      	str	r0, [sp, #28]
 8006890:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006892:	2500      	movs	r5, #0
 8006894:	9517      	str	r5, [sp, #92]	; 0x5c
 8006896:	9516      	str	r5, [sp, #88]	; 0x58
 8006898:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 800689a:	9514      	str	r5, [sp, #80]	; 0x50
 800689c:	9513      	str	r5, [sp, #76]	; 0x4c
 800689e:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 80068a0:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 80068a2:	950e      	str	r5, [sp, #56]	; 0x38
 80068a4:	2206      	movs	r2, #6
 80068a6:	2100      	movs	r1, #0
 80068a8:	a80f      	add	r0, sp, #60	; 0x3c
 80068aa:	f00c fc3e 	bl	801312a <memset>
 80068ae:	950b      	str	r5, [sp, #44]	; 0x2c
 80068b0:	2206      	movs	r2, #6
 80068b2:	2100      	movs	r1, #0
 80068b4:	a80c      	add	r0, sp, #48	; 0x30
 80068b6:	f00c fc38 	bl	801312a <memset>
 80068ba:	9508      	str	r5, [sp, #32]
 80068bc:	2206      	movs	r2, #6
 80068be:	2100      	movs	r1, #0
 80068c0:	a809      	add	r0, sp, #36	; 0x24
 80068c2:	f00c fc32 	bl	801312a <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80068c6:	aa17      	add	r2, sp, #92	; 0x5c
 80068c8:	2101      	movs	r1, #1
 80068ca:	0020      	movs	r0, r4
 80068cc:	f007 fc8e 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 80068d0:	2300      	movs	r3, #0
 80068d2:	56c3      	ldrsb	r3, [r0, r3]
 80068d4:	2b50      	cmp	r3, #80	; 0x50
 80068d6:	d047      	beq.n	8006968 <scastCommand+0xe8>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 80068d8:	2300      	movs	r3, #0
 80068da:	4699      	mov	r9, r3
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80068dc:	aa16      	add	r2, sp, #88	; 0x58
 80068de:	2102      	movs	r1, #2
 80068e0:	0020      	movs	r0, r4
 80068e2:	f007 fc83 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 80068e6:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 80068e8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80068ea:	a80e      	add	r0, sp, #56	; 0x38
 80068ec:	f00d fa2a 	bl	8013d44 <strncpy>
	srcM =(uint8_t )GetID(par1);
 80068f0:	a80e      	add	r0, sp, #56	; 0x38
 80068f2:	f7fd fb93 	bl	800401c <GetID>
 80068f6:	b2c6      	uxtb	r6, r0
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80068f8:	aa15      	add	r2, sp, #84	; 0x54
 80068fa:	2103      	movs	r1, #3
 80068fc:	0020      	movs	r0, r4
 80068fe:	f007 fc75 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006902:	2300      	movs	r3, #0
 8006904:	56c3      	ldrsb	r3, [r0, r3]
 8006906:	2b70      	cmp	r3, #112	; 0x70
 8006908:	d034      	beq.n	8006974 <scastCommand+0xf4>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 800690a:	2300      	movs	r3, #0
 800690c:	469a      	mov	sl, r3
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800690e:	aa14      	add	r2, sp, #80	; 0x50
 8006910:	2104      	movs	r1, #4
 8006912:	0020      	movs	r0, r4
 8006914:	f007 fc6a 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006918:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 800691a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800691c:	a80b      	add	r0, sp, #44	; 0x2c
 800691e:	f00d fa11 	bl	8013d44 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006922:	a80b      	add	r0, sp, #44	; 0x2c
 8006924:	f7fd fb7a 	bl	800401c <GetID>
 8006928:	b2c7      	uxtb	r7, r0
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800692a:	aa13      	add	r2, sp, #76	; 0x4c
 800692c:	2105      	movs	r1, #5
 800692e:	0020      	movs	r0, r4
 8006930:	f007 fc5c 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006934:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006936:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006938:	4698      	mov	r8, r3
 800693a:	001a      	movs	r2, r3
 800693c:	4931      	ldr	r1, [pc, #196]	; (8006a04 <scastCommand+0x184>)
 800693e:	f00d f9f0 	bl	8013d22 <strncmp>
 8006942:	2800      	cmp	r0, #0
 8006944:	d01c      	beq.n	8006980 <scastCommand+0x100>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006946:	4642      	mov	r2, r8
 8006948:	492f      	ldr	r1, [pc, #188]	; (8006a08 <scastCommand+0x188>)
 800694a:	0028      	movs	r0, r5
 800694c:	f00d f9e9 	bl	8013d22 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d042      	beq.n	80069da <scastCommand+0x15a>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006954:	4642      	mov	r2, r8
 8006956:	492d      	ldr	r1, [pc, #180]	; (8006a0c <scastCommand+0x18c>)
 8006958:	0028      	movs	r0, r5
 800695a:	f00d f9e2 	bl	8013d22 <strncmp>
 800695e:	2800      	cmp	r0, #0
 8006960:	d03e      	beq.n	80069e0 <scastCommand+0x160>
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006962:	2300      	movs	r3, #0
 8006964:	469b      	mov	fp, r3
 8006966:	e00d      	b.n	8006984 <scastCommand+0x104>
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006968:	3001      	adds	r0, #1
 800696a:	f00c fb88 	bl	801307e <atol>
 800696e:	b2c3      	uxtb	r3, r0
 8006970:	4699      	mov	r9, r3
 8006972:	e7b3      	b.n	80068dc <scastCommand+0x5c>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006974:	3001      	adds	r0, #1
 8006976:	f00c fb82 	bl	801307e <atol>
 800697a:	b2c3      	uxtb	r3, r0
 800697c:	469a      	mov	sl, r3
 800697e:	e7c6      	b.n	800690e <scastCommand+0x8e>
		direction =FORWARD;
 8006980:	2300      	movs	r3, #0
 8006982:	469b      	mov	fp, r3
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006984:	4642      	mov	r2, r8
 8006986:	0029      	movs	r1, r5
 8006988:	a808      	add	r0, sp, #32
 800698a:	f00d f9db 	bl	8013d44 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 800698e:	aa12      	add	r2, sp, #72	; 0x48
 8006990:	2106      	movs	r1, #6
 8006992:	0020      	movs	r0, r4
 8006994:	f007 fc2a 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006998:	f00c fb71 	bl	801307e <atol>
 800699c:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 800699e:	aa11      	add	r2, sp, #68	; 0x44
 80069a0:	2107      	movs	r1, #7
 80069a2:	0020      	movs	r0, r4
 80069a4:	f007 fc22 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 80069a8:	f00c fb69 	bl	801307e <atol>
 80069ac:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 80069ae:	2300      	movs	r3, #0
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	9002      	str	r0, [sp, #8]
 80069b4:	9501      	str	r5, [sp, #4]
 80069b6:	465b      	mov	r3, fp
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	003b      	movs	r3, r7
 80069bc:	4652      	mov	r2, sl
 80069be:	0031      	movs	r1, r6
 80069c0:	4648      	mov	r0, r9
 80069c2:	f001 fa5f 	bl	8007e84 <StartScastDMAStream>
	if(result == BOS_OK){
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d00d      	beq.n	80069e6 <scastCommand+0x166>
}
 80069ca:	2000      	movs	r0, #0
 80069cc:	b019      	add	sp, #100	; 0x64
 80069ce:	bcf0      	pop	{r4, r5, r6, r7}
 80069d0:	46bb      	mov	fp, r7
 80069d2:	46b2      	mov	sl, r6
 80069d4:	46a9      	mov	r9, r5
 80069d6:	46a0      	mov	r8, r4
 80069d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		direction =BACKWARD;
 80069da:	2301      	movs	r3, #1
 80069dc:	469b      	mov	fp, r3
 80069de:	e7d1      	b.n	8006984 <scastCommand+0x104>
		direction =BIDIRECTIONAL;
 80069e0:	2302      	movs	r3, #2
 80069e2:	469b      	mov	fp, r3
 80069e4:	e7ce      	b.n	8006984 <scastCommand+0x104>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 80069e6:	9404      	str	r4, [sp, #16]
 80069e8:	9503      	str	r5, [sp, #12]
 80069ea:	ab0b      	add	r3, sp, #44	; 0x2c
 80069ec:	9302      	str	r3, [sp, #8]
 80069ee:	4653      	mov	r3, sl
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	ab0e      	add	r3, sp, #56	; 0x38
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	464b      	mov	r3, r9
 80069f8:	aa08      	add	r2, sp, #32
 80069fa:	4905      	ldr	r1, [pc, #20]	; (8006a10 <scastCommand+0x190>)
 80069fc:	9807      	ldr	r0, [sp, #28]
 80069fe:	f00d f94d 	bl	8013c9c <siprintf>
 8006a02:	e7e2      	b.n	80069ca <scastCommand+0x14a>
 8006a04:	08019160 	.word	0x08019160
 8006a08:	08019168 	.word	0x08019168
 8006a0c:	08019174 	.word	0x08019174
 8006a10:	08019184 	.word	0x08019184

08006a14 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a16:	b083      	sub	sp, #12
 8006a18:	0004      	movs	r4, r0
	if(N > 1)
 8006a1a:	4b26      	ldr	r3, [pc, #152]	; (8006ab4 <infoCommand+0xa0>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d832      	bhi.n	8006a88 <infoCommand+0x74>
	BOS_Status result =BOS_OK;
 8006a22:	2700      	movs	r7, #0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006a24:	4b23      	ldr	r3, [pc, #140]	; (8006ab4 <infoCommand+0xa0>)
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	4923      	ldr	r1, [pc, #140]	; (8006ab8 <infoCommand+0xa4>)
 8006a2a:	0020      	movs	r0, r4
 8006a2c:	f00d f936 	bl	8013c9c <siprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006a30:	0020      	movs	r0, r4
 8006a32:	f7f9 fb71 	bl	8000118 <strlen>
 8006a36:	b282      	uxth	r2, r0
 8006a38:	4d20      	ldr	r5, [pc, #128]	; (8006abc <infoCommand+0xa8>)
 8006a3a:	7828      	ldrb	r0, [r5, #0]
 8006a3c:	2601      	movs	r6, #1
 8006a3e:	4276      	negs	r6, r6
 8006a40:	9600      	str	r6, [sp, #0]
 8006a42:	2332      	movs	r3, #50	; 0x32
 8006a44:	0021      	movs	r1, r4
 8006a46:	f007 f953 	bl	800dcf0 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006a4a:	2213      	movs	r2, #19
 8006a4c:	491c      	ldr	r1, [pc, #112]	; (8006ac0 <infoCommand+0xac>)
 8006a4e:	0020      	movs	r0, r4
 8006a50:	f00c fb62 	bl	8013118 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006a54:	0020      	movs	r0, r4
 8006a56:	f7f9 fb5f 	bl	8000118 <strlen>
 8006a5a:	b282      	uxth	r2, r0
 8006a5c:	7828      	ldrb	r0, [r5, #0]
 8006a5e:	9600      	str	r6, [sp, #0]
 8006a60:	2332      	movs	r3, #50	; 0x32
 8006a62:	0021      	movs	r1, r4
 8006a64:	f007 f944 	bl	800dcf0 <writePxMutex>
	DisplayTopology(PcPort);
 8006a68:	7828      	ldrb	r0, [r5, #0]
 8006a6a:	f7fd f837 	bl	8003adc <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006a6e:	7828      	ldrb	r0, [r5, #0]
 8006a70:	f7fd f902 	bl	8003c78 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006a74:	2f02      	cmp	r7, #2
 8006a76:	d00b      	beq.n	8006a90 <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006a78:	2202      	movs	r2, #2
 8006a7a:	4912      	ldr	r1, [pc, #72]	; (8006ac4 <infoCommand+0xb0>)
 8006a7c:	0020      	movs	r0, r4
 8006a7e:	f00c fb4b 	bl	8013118 <memcpy>
}
 8006a82:	2000      	movs	r0, #0
 8006a84:	b003      	add	sp, #12
 8006a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006a88:	f007 f9c4 	bl	800de14 <ReadPortsDir>
 8006a8c:	0007      	movs	r7, r0
 8006a8e:	e7c9      	b.n	8006a24 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006a90:	2244      	movs	r2, #68	; 0x44
 8006a92:	490d      	ldr	r1, [pc, #52]	; (8006ac8 <infoCommand+0xb4>)
 8006a94:	0020      	movs	r0, r4
 8006a96:	f00c fb3f 	bl	8013118 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006a9a:	0020      	movs	r0, r4
 8006a9c:	f7f9 fb3c 	bl	8000118 <strlen>
 8006aa0:	b282      	uxth	r2, r0
 8006aa2:	4b06      	ldr	r3, [pc, #24]	; (8006abc <infoCommand+0xa8>)
 8006aa4:	7818      	ldrb	r0, [r3, #0]
 8006aa6:	0033      	movs	r3, r6
 8006aa8:	9600      	str	r6, [sp, #0]
 8006aaa:	3333      	adds	r3, #51	; 0x33
 8006aac:	0021      	movs	r1, r4
 8006aae:	f007 f91f 	bl	800dcf0 <writePxMutex>
 8006ab2:	e7e1      	b.n	8006a78 <infoCommand+0x64>
 8006ab4:	20000030 	.word	0x20000030
 8006ab8:	0801920c 	.word	0x0801920c
 8006abc:	2000066e 	.word	0x2000066e
 8006ac0:	08019228 	.word	0x08019228
 8006ac4:	08017c00 	.word	0x08017c00
 8006ac8:	0801923c 	.word	0x0801923c

08006acc <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006acc:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006ace:	2000      	movs	r0, #0
 8006ad0:	f7fd f93a 	bl	8003d48 <DisplayModuleStatus>
}
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	bd10      	pop	{r4, pc}

08006ad8 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ada:	46ce      	mov	lr, r9
 8006adc:	4647      	mov	r7, r8
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b08f      	sub	sp, #60	; 0x3c
 8006ae2:	0007      	movs	r7, r0
 8006ae4:	4690      	mov	r8, r2
	char module[MaxLengthOfAlias + 30] ={0};
 8006ae6:	2400      	movs	r4, #0
 8006ae8:	9404      	str	r4, [sp, #16]
 8006aea:	2223      	movs	r2, #35	; 0x23
 8006aec:	2100      	movs	r1, #0
 8006aee:	a805      	add	r0, sp, #20
 8006af0:	f00c fb1b 	bl	801312a <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006af4:	9401      	str	r4, [sp, #4]
 8006af6:	2206      	movs	r2, #6
 8006af8:	2100      	movs	r1, #0
 8006afa:	a802      	add	r0, sp, #8
 8006afc:	f00c fb15 	bl	801312a <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006b00:	4c59      	ldr	r4, [pc, #356]	; (8006c68 <groupCommand+0x190>)
 8006b02:	0022      	movs	r2, r4
 8006b04:	2101      	movs	r1, #1
 8006b06:	4640      	mov	r0, r8
 8006b08:	f007 fb70 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006b0c:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	a801      	add	r0, sp, #4
 8006b12:	f00d f917 	bl	8013d44 <strncpy>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006b16:	2400      	movs	r4, #0
 8006b18:	2c09      	cmp	r4, #9
 8006b1a:	d80c      	bhi.n	8006b36 <groupCommand+0x5e>
		if(!strcmp(alias,groupAlias[i])){
 8006b1c:	00a1      	lsls	r1, r4, #2
 8006b1e:	1909      	adds	r1, r1, r4
 8006b20:	0049      	lsls	r1, r1, #1
 8006b22:	4b52      	ldr	r3, [pc, #328]	; (8006c6c <groupCommand+0x194>)
 8006b24:	18c9      	adds	r1, r1, r3
 8006b26:	a801      	add	r0, sp, #4
 8006b28:	f7f9 faec 	bl	8000104 <strcmp>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d016      	beq.n	8006b5e <groupCommand+0x86>
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006b30:	3401      	adds	r4, #1
 8006b32:	b2e4      	uxtb	r4, r4
 8006b34:	e7f0      	b.n	8006b18 <groupCommand+0x40>
	type =1;
 8006b36:	2301      	movs	r3, #1
 8006b38:	4699      	mov	r9, r3
	count =2;
 8006b3a:	4b4d      	ldr	r3, [pc, #308]	; (8006c70 <groupCommand+0x198>)
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006b40:	3208      	adds	r2, #8
 8006b42:	494c      	ldr	r1, [pc, #304]	; (8006c74 <groupCommand+0x19c>)
 8006b44:	0038      	movs	r0, r7
 8006b46:	f00c fae7 	bl	8013118 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006b4a:	4a4b      	ldr	r2, [pc, #300]	; (8006c78 <groupCommand+0x1a0>)
 8006b4c:	2102      	movs	r1, #2
 8006b4e:	4640      	mov	r0, r8
 8006b50:	f007 fb4c 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006b54:	4b49      	ldr	r3, [pc, #292]	; (8006c7c <groupCommand+0x1a4>)
 8006b56:	6018      	str	r0, [r3, #0]
	int16_t modID =0, type =0;
 8006b58:	2600      	movs	r6, #0
	BOS_Status result =BOS_OK;
 8006b5a:	2500      	movs	r5, #0
	while(pcParameterString != NULL){
 8006b5c:	e018      	b.n	8006b90 <groupCommand+0xb8>
			type =0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4699      	mov	r9, r3
 8006b62:	e7ea      	b.n	8006b3a <groupCommand+0x62>
			strcat((char* )pcWriteBuffer,", ");
 8006b64:	0038      	movs	r0, r7
 8006b66:	f7f9 fad7 	bl	8000118 <strlen>
 8006b6a:	1838      	adds	r0, r7, r0
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	4944      	ldr	r1, [pc, #272]	; (8006c80 <groupCommand+0x1a8>)
 8006b70:	f00c fad2 	bl	8013118 <memcpy>
		strcat((char* )pcWriteBuffer,module);
 8006b74:	a904      	add	r1, sp, #16
 8006b76:	0038      	movs	r0, r7
 8006b78:	f00d f8b0 	bl	8013cdc <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006b7c:	3401      	adds	r4, #1
 8006b7e:	b261      	sxtb	r1, r4
 8006b80:	4b3b      	ldr	r3, [pc, #236]	; (8006c70 <groupCommand+0x198>)
 8006b82:	7019      	strb	r1, [r3, #0]
 8006b84:	4a3c      	ldr	r2, [pc, #240]	; (8006c78 <groupCommand+0x1a0>)
 8006b86:	4640      	mov	r0, r8
 8006b88:	f007 fb30 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006b8c:	4b3b      	ldr	r3, [pc, #236]	; (8006c7c <groupCommand+0x1a4>)
 8006b8e:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006b90:	4b3a      	ldr	r3, [pc, #232]	; (8006c7c <groupCommand+0x1a4>)
 8006b92:	6819      	ldr	r1, [r3, #0]
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d019      	beq.n	8006bcc <groupCommand+0xf4>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006b98:	4b37      	ldr	r3, [pc, #220]	; (8006c78 <groupCommand+0x1a0>)
 8006b9a:	681e      	ldr	r6, [r3, #0]
 8006b9c:	ac04      	add	r4, sp, #16
 8006b9e:	0032      	movs	r2, r6
 8006ba0:	0020      	movs	r0, r4
 8006ba2:	f00d f8cf 	bl	8013d44 <strncpy>
		module[xParameterStringLength] ='\0';
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	55a3      	strb	r3, [r4, r6]
		modID =GetID(module);
 8006baa:	0020      	movs	r0, r4
 8006bac:	f7fd fa36 	bl	800401c <GetID>
 8006bb0:	1e06      	subs	r6, r0, #0
		if(modID < 0)
 8006bb2:	db0b      	blt.n	8006bcc <groupCommand+0xf4>
		result =AddModuleToGroup(modID,alias);
 8006bb4:	b2c0      	uxtb	r0, r0
 8006bb6:	a901      	add	r1, sp, #4
 8006bb8:	f7fd faf8 	bl	80041ac <AddModuleToGroup>
 8006bbc:	1e05      	subs	r5, r0, #0
		if(result != BOS_OK)
 8006bbe:	d105      	bne.n	8006bcc <groupCommand+0xf4>
		if(count > 2)
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <groupCommand+0x198>)
 8006bc2:	2400      	movs	r4, #0
 8006bc4:	571c      	ldrsb	r4, [r3, r4]
 8006bc6:	2c02      	cmp	r4, #2
 8006bc8:	ddd4      	ble.n	8006b74 <groupCommand+0x9c>
 8006bca:	e7cb      	b.n	8006b64 <groupCommand+0x8c>
	if(modID < 0)
 8006bcc:	2e00      	cmp	r6, #0
 8006bce:	db1a      	blt.n	8006c06 <groupCommand+0x12e>
	else if(count == 2)
 8006bd0:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <groupCommand+0x198>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d020      	beq.n	8006c1c <groupCommand+0x144>
	else if(result == BOS_OK && type){
 8006bda:	2d00      	cmp	r5, #0
 8006bdc:	d102      	bne.n	8006be4 <groupCommand+0x10c>
 8006bde:	464b      	mov	r3, r9
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d121      	bne.n	8006c28 <groupCommand+0x150>
	else if(result == BOS_OK && !type){
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	d102      	bne.n	8006bee <groupCommand+0x116>
 8006be8:	464b      	mov	r3, r9
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d026      	beq.n	8006c3c <groupCommand+0x164>
	else if(result == BOS_ERR_Keyword)
 8006bee:	2d06      	cmp	r5, #6
 8006bf0:	d02e      	beq.n	8006c50 <groupCommand+0x178>
	else if(result == BOS_ERR_ExistingAlias)
 8006bf2:	2d07      	cmp	r5, #7
 8006bf4:	d032      	beq.n	8006c5c <groupCommand+0x184>
	else if(result == BOS_ERR_ExistingCmd)
 8006bf6:	2d08      	cmp	r5, #8
 8006bf8:	d10a      	bne.n	8006c10 <groupCommand+0x138>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006bfa:	aa01      	add	r2, sp, #4
 8006bfc:	4921      	ldr	r1, [pc, #132]	; (8006c84 <groupCommand+0x1ac>)
 8006bfe:	0038      	movs	r0, r7
 8006c00:	f00d f84c 	bl	8013c9c <siprintf>
 8006c04:	e004      	b.n	8006c10 <groupCommand+0x138>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006c06:	aa04      	add	r2, sp, #16
 8006c08:	491f      	ldr	r1, [pc, #124]	; (8006c88 <groupCommand+0x1b0>)
 8006c0a:	0038      	movs	r0, r7
 8006c0c:	f00d f846 	bl	8013c9c <siprintf>
}
 8006c10:	2000      	movs	r0, #0
 8006c12:	b00f      	add	sp, #60	; 0x3c
 8006c14:	bcc0      	pop	{r6, r7}
 8006c16:	46b9      	mov	r9, r7
 8006c18:	46b0      	mov	r8, r6
 8006c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006c1c:	aa01      	add	r2, sp, #4
 8006c1e:	491b      	ldr	r1, [pc, #108]	; (8006c8c <groupCommand+0x1b4>)
 8006c20:	0038      	movs	r0, r7
 8006c22:	f00d f83b 	bl	8013c9c <siprintf>
 8006c26:	e7f3      	b.n	8006c10 <groupCommand+0x138>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006c28:	aa01      	add	r2, sp, #4
 8006c2a:	4919      	ldr	r1, [pc, #100]	; (8006c90 <groupCommand+0x1b8>)
 8006c2c:	a804      	add	r0, sp, #16
 8006c2e:	f00d f835 	bl	8013c9c <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8006c32:	a904      	add	r1, sp, #16
 8006c34:	0038      	movs	r0, r7
 8006c36:	f00d f851 	bl	8013cdc <strcat>
 8006c3a:	e7e9      	b.n	8006c10 <groupCommand+0x138>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006c3c:	aa01      	add	r2, sp, #4
 8006c3e:	4915      	ldr	r1, [pc, #84]	; (8006c94 <groupCommand+0x1bc>)
 8006c40:	a804      	add	r0, sp, #16
 8006c42:	f00d f82b 	bl	8013c9c <siprintf>
		strcat((char* )pcWriteBuffer,module);
 8006c46:	a904      	add	r1, sp, #16
 8006c48:	0038      	movs	r0, r7
 8006c4a:	f00d f847 	bl	8013cdc <strcat>
 8006c4e:	e7df      	b.n	8006c10 <groupCommand+0x138>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006c50:	aa01      	add	r2, sp, #4
 8006c52:	4911      	ldr	r1, [pc, #68]	; (8006c98 <groupCommand+0x1c0>)
 8006c54:	0038      	movs	r0, r7
 8006c56:	f00d f821 	bl	8013c9c <siprintf>
 8006c5a:	e7d9      	b.n	8006c10 <groupCommand+0x138>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006c5c:	aa01      	add	r2, sp, #4
 8006c5e:	490f      	ldr	r1, [pc, #60]	; (8006c9c <groupCommand+0x1c4>)
 8006c60:	0038      	movs	r0, r7
 8006c62:	f00d f81b 	bl	8013c9c <siprintf>
 8006c66:	e7d3      	b.n	8006c10 <groupCommand+0x138>
 8006c68:	20000a4c 	.word	0x20000a4c
 8006c6c:	20000760 	.word	0x20000760
 8006c70:	20000a12 	.word	0x20000a12
 8006c74:	08019280 	.word	0x08019280
 8006c78:	20000a40 	.word	0x20000a40
 8006c7c:	20000a14 	.word	0x20000a14
 8006c80:	0801928c 	.word	0x0801928c
 8006c84:	08019390 	.word	0x08019390
 8006c88:	08019290 	.word	0x08019290
 8006c8c:	080192b4 	.word	0x080192b4
 8006c90:	080192e0 	.word	0x080192e0
 8006c94:	080192fc 	.word	0x080192fc
 8006c98:	0801931c 	.word	0x0801931c
 8006c9c:	0801935c 	.word	0x0801935c

08006ca0 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	0004      	movs	r4, r0
 8006ca4:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ca6:	4d1c      	ldr	r5, [pc, #112]	; (8006d18 <nameCommand+0x78>)
 8006ca8:	002a      	movs	r2, r5
 8006caa:	2101      	movs	r1, #1
 8006cac:	f007 fa9e 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006cb0:	0001      	movs	r1, r0
 8006cb2:	4b1a      	ldr	r3, [pc, #104]	; (8006d1c <nameCommand+0x7c>)
 8006cb4:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	dd01      	ble.n	8006cc0 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006cc0:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <nameCommand+0x80>)
 8006cc2:	7818      	ldrb	r0, [r3, #0]
 8006cc4:	f7fd fa0c 	bl	80040e0 <NameModule>
	if(result == BOS_OK)
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d007      	beq.n	8006cdc <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006ccc:	2806      	cmp	r0, #6
 8006cce:	d00e      	beq.n	8006cee <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 8006cd0:	2807      	cmp	r0, #7
 8006cd2:	d013      	beq.n	8006cfc <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8006cd4:	2808      	cmp	r0, #8
 8006cd6:	d018      	beq.n	8006d0a <nameCommand+0x6a>
}
 8006cd8:	2000      	movs	r0, #0
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006cdc:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <nameCommand+0x7c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <nameCommand+0x80>)
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	490f      	ldr	r1, [pc, #60]	; (8006d24 <nameCommand+0x84>)
 8006ce6:	0020      	movs	r0, r4
 8006ce8:	f00c ffd8 	bl	8013c9c <siprintf>
 8006cec:	e7f4      	b.n	8006cd8 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006cee:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <nameCommand+0x7c>)
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	490d      	ldr	r1, [pc, #52]	; (8006d28 <nameCommand+0x88>)
 8006cf4:	0020      	movs	r0, r4
 8006cf6:	f00c ffd1 	bl	8013c9c <siprintf>
 8006cfa:	e7ed      	b.n	8006cd8 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <nameCommand+0x7c>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	490a      	ldr	r1, [pc, #40]	; (8006d2c <nameCommand+0x8c>)
 8006d02:	0020      	movs	r0, r4
 8006d04:	f00c ffca 	bl	8013c9c <siprintf>
 8006d08:	e7e6      	b.n	8006cd8 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006d0a:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <nameCommand+0x7c>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4908      	ldr	r1, [pc, #32]	; (8006d30 <nameCommand+0x90>)
 8006d10:	0020      	movs	r0, r4
 8006d12:	f00c ffc3 	bl	8013c9c <siprintf>
 8006d16:	e7df      	b.n	8006cd8 <nameCommand+0x38>
 8006d18:	20000a48 	.word	0x20000a48
 8006d1c:	20000a18 	.word	0x20000a18
 8006d20:	20000084 	.word	0x20000084
 8006d24:	080193d0 	.word	0x080193d0
 8006d28:	0801931c 	.word	0x0801931c
 8006d2c:	0801935c 	.word	0x0801935c
 8006d30:	08019390 	.word	0x08019390

08006d34 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d36:	b085      	sub	sp, #20
 8006d38:	9003      	str	r0, [sp, #12]
 8006d3a:	0014      	movs	r4, r2
 8006d3c:	2600      	movs	r6, #0
 8006d3e:	2700      	movs	r7, #0
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d40:	4a4a      	ldr	r2, [pc, #296]	; (8006e6c <bootloaderUpdateCommand+0x138>)
 8006d42:	2101      	movs	r1, #1
 8006d44:	0020      	movs	r0, r4
 8006d46:	f007 fa51 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d044      	beq.n	8006dd8 <bootloaderUpdateCommand+0xa4>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006d4e:	4b47      	ldr	r3, [pc, #284]	; (8006e6c <bootloaderUpdateCommand+0x138>)
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4947      	ldr	r1, [pc, #284]	; (8006e70 <bootloaderUpdateCommand+0x13c>)
 8006d54:	f00c ffe5 	bl	8013d22 <strncmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	d135      	bne.n	8006dc8 <bootloaderUpdateCommand+0x94>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d5c:	4a45      	ldr	r2, [pc, #276]	; (8006e74 <bootloaderUpdateCommand+0x140>)
 8006d5e:	2102      	movs	r1, #2
 8006d60:	0020      	movs	r0, r4
 8006d62:	f007 fa43 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006d66:	4d44      	ldr	r5, [pc, #272]	; (8006e78 <bootloaderUpdateCommand+0x144>)
 8006d68:	6028      	str	r0, [r5, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d6a:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <bootloaderUpdateCommand+0x148>)
 8006d6c:	2103      	movs	r1, #3
 8006d6e:	0020      	movs	r0, r4
 8006d70:	f007 fa3c 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8006d74:	4b42      	ldr	r3, [pc, #264]	; (8006e80 <bootloaderUpdateCommand+0x14c>)
 8006d76:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8006d78:	6828      	ldr	r0, [r5, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	56c3      	ldrsb	r3, [r0, r3]
 8006d7e:	2b23      	cmp	r3, #35	; 0x23
 8006d80:	d055      	beq.n	8006e2e <bootloaderUpdateCommand+0xfa>
				result =BOS_ERR_WrongValue;
 8006d82:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString3[0] == 'p'){
 8006d84:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <bootloaderUpdateCommand+0x14c>)
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	56c3      	ldrsb	r3, [r0, r3]
 8006d8c:	2b70      	cmp	r3, #112	; 0x70
 8006d8e:	d054      	beq.n	8006e3a <bootloaderUpdateCommand+0x106>
				result =BOS_ERR_WrongValue;
 8006d90:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 8006d92:	4b3c      	ldr	r3, [pc, #240]	; (8006e84 <bootloaderUpdateCommand+0x150>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	42b3      	cmp	r3, r6
 8006d98:	d054      	beq.n	8006e44 <bootloaderUpdateCommand+0x110>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006d9a:	4b3b      	ldr	r3, [pc, #236]	; (8006e88 <bootloaderUpdateCommand+0x154>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006da0:	4b3a      	ldr	r3, [pc, #232]	; (8006e8c <bootloaderUpdateCommand+0x158>)
 8006da2:	701f      	strb	r7, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006da4:	3201      	adds	r2, #1
 8006da6:	211a      	movs	r1, #26
 8006da8:	0030      	movs	r0, r6
 8006daa:	f001 f843 	bl	8007e34 <SendMessageToModule>
				osDelay(100);
 8006dae:	2064      	movs	r0, #100	; 0x64
 8006db0:	f007 f8fc 	bl	800dfac <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006db4:	4b36      	ldr	r3, [pc, #216]	; (8006e90 <bootloaderUpdateCommand+0x15c>)
 8006db6:	781a      	ldrb	r2, [r3, #0]
 8006db8:	4b32      	ldr	r3, [pc, #200]	; (8006e84 <bootloaderUpdateCommand+0x150>)
 8006dba:	7818      	ldrb	r0, [r3, #0]
 8006dbc:	003b      	movs	r3, r7
 8006dbe:	0031      	movs	r1, r6
 8006dc0:	f003 f95e 	bl	800a080 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006dc4:	2c68      	cmp	r4, #104	; 0x68
 8006dc6:	d104      	bne.n	8006dd2 <bootloaderUpdateCommand+0x9e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006dc8:	220f      	movs	r2, #15
 8006dca:	4932      	ldr	r1, [pc, #200]	; (8006e94 <bootloaderUpdateCommand+0x160>)
 8006dcc:	9803      	ldr	r0, [sp, #12]
 8006dce:	f00c f9a3 	bl	8013118 <memcpy>
}
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	b005      	add	sp, #20
 8006dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006dd8:	4b2a      	ldr	r3, [pc, #168]	; (8006e84 <bootloaderUpdateCommand+0x150>)
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	492e      	ldr	r1, [pc, #184]	; (8006e98 <bootloaderUpdateCommand+0x164>)
 8006dde:	9c03      	ldr	r4, [sp, #12]
 8006de0:	0020      	movs	r0, r4
 8006de2:	f00c ff5b 	bl	8013c9c <siprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006de6:	4b2d      	ldr	r3, [pc, #180]	; (8006e9c <bootloaderUpdateCommand+0x168>)
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	0020      	movs	r0, r4
 8006dec:	f00c ff76 	bl	8013cdc <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006df0:	0020      	movs	r0, r4
 8006df2:	f7f9 f991 	bl	8000118 <strlen>
 8006df6:	b282      	uxth	r2, r0
 8006df8:	4b25      	ldr	r3, [pc, #148]	; (8006e90 <bootloaderUpdateCommand+0x15c>)
 8006dfa:	7818      	ldrb	r0, [r3, #0]
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	425b      	negs	r3, r3
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	3333      	adds	r3, #51	; 0x33
 8006e04:	0021      	movs	r1, r4
 8006e06:	f006 ff73 	bl	800dcf0 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006e0a:	4b25      	ldr	r3, [pc, #148]	; (8006ea0 <bootloaderUpdateCommand+0x16c>)
 8006e0c:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <bootloaderUpdateCommand+0x170>)
 8006e0e:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <bootloaderUpdateCommand+0x174>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006e16:	200a      	movs	r0, #10
 8006e18:	f007 f8c8 	bl	800dfac <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	4b22      	ldr	r3, [pc, #136]	; (8006eac <bootloaderUpdateCommand+0x178>)
 8006e22:	4a23      	ldr	r2, [pc, #140]	; (8006eb0 <bootloaderUpdateCommand+0x17c>)
 8006e24:	60da      	str	r2, [r3, #12]
 8006e26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	e7fd      	b.n	8006e2a <bootloaderUpdateCommand+0xf6>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f00c f925 	bl	801307e <atol>
 8006e34:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 8006e36:	2400      	movs	r4, #0
 8006e38:	e7a4      	b.n	8006d84 <bootloaderUpdateCommand+0x50>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f00c f91f 	bl	801307e <atol>
 8006e40:	b2c7      	uxtb	r7, r0
 8006e42:	e7a6      	b.n	8006d92 <bootloaderUpdateCommand+0x5e>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006e44:	2300      	movs	r3, #0
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	3319      	adds	r3, #25
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	0038      	movs	r0, r7
 8006e50:	f000 fda0 	bl	8007994 <SendMessageFromPort>
				osDelay(100);
 8006e54:	2064      	movs	r0, #100	; 0x64
 8006e56:	f007 f8a9 	bl	800dfac <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <bootloaderUpdateCommand+0x150>)
 8006e5c:	7818      	ldrb	r0, [r3, #0]
 8006e5e:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <bootloaderUpdateCommand+0x15c>)
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	003b      	movs	r3, r7
 8006e64:	0001      	movs	r1, r0
 8006e66:	f003 f90b 	bl	800a080 <remoteBootloaderUpdate>
 8006e6a:	e7ab      	b.n	8006dc4 <bootloaderUpdateCommand+0x90>
 8006e6c:	20000a44 	.word	0x20000a44
 8006e70:	08019408 	.word	0x08019408
 8006e74:	20000a50 	.word	0x20000a50
 8006e78:	20000a28 	.word	0x20000a28
 8006e7c:	20000a54 	.word	0x20000a54
 8006e80:	20000a30 	.word	0x20000a30
 8006e84:	20000084 	.word	0x20000084
 8006e88:	20005714 	.word	0x20005714
 8006e8c:	20000808 	.word	0x20000808
 8006e90:	2000066e 	.word	0x2000066e
 8006e94:	08018e84 	.word	0x08018e84
 8006e98:	080193e8 	.word	0x080193e8
 8006e9c:	20000088 	.word	0x20000088
 8006ea0:	20007ff0 	.word	0x20007ff0
 8006ea4:	deadbeef 	.word	0xdeadbeef
 8006ea8:	200007c8 	.word	0x200007c8
 8006eac:	e000ed00 	.word	0xe000ed00
 8006eb0:	05fa0004 	.word	0x05fa0004

08006eb4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006eb4:	b570      	push	{r4, r5, r6, lr}
	if(!moduleAlias[myID][0])
 8006eb6:	4b14      	ldr	r3, [pc, #80]	; (8006f08 <pingCommand+0x54>)
 8006eb8:	781a      	ldrb	r2, [r3, #0]
 8006eba:	0093      	lsls	r3, r2, #2
 8006ebc:	189b      	adds	r3, r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4912      	ldr	r1, [pc, #72]	; (8006f0c <pingCommand+0x58>)
 8006ec2:	5c5b      	ldrb	r3, [r3, r1]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d115      	bne.n	8006ef4 <pingCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 8006ec8:	4911      	ldr	r1, [pc, #68]	; (8006f10 <pingCommand+0x5c>)
 8006eca:	f00c fee7 	bl	8013c9c <siprintf>
	RTOS_IND_blink(200);
 8006ece:	2580      	movs	r5, #128	; 0x80
 8006ed0:	012d      	lsls	r5, r5, #4
 8006ed2:	2490      	movs	r4, #144	; 0x90
 8006ed4:	05e4      	lsls	r4, r4, #23
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	0029      	movs	r1, r5
 8006eda:	0020      	movs	r0, r4
 8006edc:	f00a fbf3 	bl	80116c6 <HAL_GPIO_WritePin>
 8006ee0:	20c8      	movs	r0, #200	; 0xc8
 8006ee2:	f007 f863 	bl	800dfac <osDelay>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	0029      	movs	r1, r5
 8006eea:	0020      	movs	r0, r4
 8006eec:	f00a fbeb 	bl	80116c6 <HAL_GPIO_WritePin>
}
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8006ef4:	0093      	lsls	r3, r2, #2
 8006ef6:	189b      	adds	r3, r3, r2
 8006ef8:	005b      	lsls	r3, r3, #1
 8006efa:	4904      	ldr	r1, [pc, #16]	; (8006f0c <pingCommand+0x58>)
 8006efc:	185b      	adds	r3, r3, r1
 8006efe:	4905      	ldr	r1, [pc, #20]	; (8006f14 <pingCommand+0x60>)
 8006f00:	f00c fecc 	bl	8013c9c <siprintf>
 8006f04:	e7e3      	b.n	8006ece <pingCommand+0x1a>
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	20000084 	.word	0x20000084
 8006f0c:	20000838 	.word	0x20000838
 8006f10:	0801940c 	.word	0x0801940c
 8006f14:	08019420 	.word	0x08019420

08006f18 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8006f1c:	2241      	movs	r2, #65	; 0x41
 8006f1e:	4904      	ldr	r1, [pc, #16]	; (8006f30 <prvRunTimeStatsCommand+0x18>)
 8006f20:	f00c f8fa 	bl	8013118 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 8006f24:	0020      	movs	r0, r4
 8006f26:	3040      	adds	r0, #64	; 0x40
 8006f28:	f008 fb1e 	bl	800f568 <vTaskGetRunTimeStats>
}
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	bd10      	pop	{r4, pc}
 8006f30:	0801943c 	.word	0x0801943c

08006f34 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f34:	b510      	push	{r4, lr}
 8006f36:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 8006f38:	2250      	movs	r2, #80	; 0x50
 8006f3a:	4904      	ldr	r1, [pc, #16]	; (8006f4c <prvTaskStatsCommand+0x18>)
 8006f3c:	f00c f8ec 	bl	8013118 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8006f40:	0020      	movs	r0, r4
 8006f42:	304f      	adds	r0, #79	; 0x4f
 8006f44:	f008 fab4 	bl	800f4b0 <vTaskList>
}
 8006f48:	2000      	movs	r0, #0
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	08019480 	.word	0x08019480

08006f50 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <resetCommand+0x14>)
 8006f56:	4a04      	ldr	r2, [pc, #16]	; (8006f68 <resetCommand+0x18>)
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	e7fd      	b.n	8006f5e <resetCommand+0xe>
 8006f62:	46c0      	nop			; (mov r8, r8)
 8006f64:	e000ed00 	.word	0xe000ed00
 8006f68:	05fa0004 	.word	0x05fa0004

08006f6c <RegisterUserCLICommands>:
}
 8006f6c:	4770      	bx	lr
	...

08006f70 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8006f70:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8006f72:	4834      	ldr	r0, [pc, #208]	; (8007044 <vRegisterCLICommands+0xd4>)
 8006f74:	f007 f8b6 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8006f78:	4833      	ldr	r0, [pc, #204]	; (8007048 <vRegisterCLICommands+0xd8>)
 8006f7a:	f007 f8b3 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 8006f7e:	4833      	ldr	r0, [pc, #204]	; (800704c <vRegisterCLICommands+0xdc>)
 8006f80:	f007 f8b0 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8006f84:	4832      	ldr	r0, [pc, #200]	; (8007050 <vRegisterCLICommands+0xe0>)
 8006f86:	f007 f8ad 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8006f8a:	4832      	ldr	r0, [pc, #200]	; (8007054 <vRegisterCLICommands+0xe4>)
 8006f8c:	f007 f8aa 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8006f90:	4831      	ldr	r0, [pc, #196]	; (8007058 <vRegisterCLICommands+0xe8>)
 8006f92:	f007 f8a7 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 8006f96:	4831      	ldr	r0, [pc, #196]	; (800705c <vRegisterCLICommands+0xec>)
 8006f98:	f007 f8a4 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8006f9c:	4830      	ldr	r0, [pc, #192]	; (8007060 <vRegisterCLICommands+0xf0>)
 8006f9e:	f007 f8a1 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8006fa2:	4830      	ldr	r0, [pc, #192]	; (8007064 <vRegisterCLICommands+0xf4>)
 8006fa4:	f007 f89e 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 8006fa8:	482f      	ldr	r0, [pc, #188]	; (8007068 <vRegisterCLICommands+0xf8>)
 8006faa:	f007 f89b 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8006fae:	482f      	ldr	r0, [pc, #188]	; (800706c <vRegisterCLICommands+0xfc>)
 8006fb0:	f007 f898 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8006fb4:	482e      	ldr	r0, [pc, #184]	; (8007070 <vRegisterCLICommands+0x100>)
 8006fb6:	f007 f895 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8006fba:	482e      	ldr	r0, [pc, #184]	; (8007074 <vRegisterCLICommands+0x104>)
 8006fbc:	f007 f892 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8006fc0:	482d      	ldr	r0, [pc, #180]	; (8007078 <vRegisterCLICommands+0x108>)
 8006fc2:	f007 f88f 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8006fc6:	482d      	ldr	r0, [pc, #180]	; (800707c <vRegisterCLICommands+0x10c>)
 8006fc8:	f007 f88c 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8006fcc:	482c      	ldr	r0, [pc, #176]	; (8007080 <vRegisterCLICommands+0x110>)
 8006fce:	f007 f889 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8006fd2:	482c      	ldr	r0, [pc, #176]	; (8007084 <vRegisterCLICommands+0x114>)
 8006fd4:	f007 f886 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 8006fd8:	482b      	ldr	r0, [pc, #172]	; (8007088 <vRegisterCLICommands+0x118>)
 8006fda:	f007 f883 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8006fde:	482b      	ldr	r0, [pc, #172]	; (800708c <vRegisterCLICommands+0x11c>)
 8006fe0:	f007 f880 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8006fe4:	482a      	ldr	r0, [pc, #168]	; (8007090 <vRegisterCLICommands+0x120>)
 8006fe6:	f007 f87d 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8006fea:	482a      	ldr	r0, [pc, #168]	; (8007094 <vRegisterCLICommands+0x124>)
 8006fec:	f007 f87a 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8006ff0:	4829      	ldr	r0, [pc, #164]	; (8007098 <vRegisterCLICommands+0x128>)
 8006ff2:	f007 f877 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8006ff6:	4829      	ldr	r0, [pc, #164]	; (800709c <vRegisterCLICommands+0x12c>)
 8006ff8:	f007 f874 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8006ffc:	4828      	ldr	r0, [pc, #160]	; (80070a0 <vRegisterCLICommands+0x130>)
 8006ffe:	f007 f871 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007002:	4828      	ldr	r0, [pc, #160]	; (80070a4 <vRegisterCLICommands+0x134>)
 8007004:	f007 f86e 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 8007008:	4827      	ldr	r0, [pc, #156]	; (80070a8 <vRegisterCLICommands+0x138>)
 800700a:	f007 f86b 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 800700e:	4827      	ldr	r0, [pc, #156]	; (80070ac <vRegisterCLICommands+0x13c>)
 8007010:	f007 f868 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007014:	4826      	ldr	r0, [pc, #152]	; (80070b0 <vRegisterCLICommands+0x140>)
 8007016:	f007 f865 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800701a:	4826      	ldr	r0, [pc, #152]	; (80070b4 <vRegisterCLICommands+0x144>)
 800701c:	f007 f862 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007020:	4825      	ldr	r0, [pc, #148]	; (80070b8 <vRegisterCLICommands+0x148>)
 8007022:	f007 f85f 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007026:	4825      	ldr	r0, [pc, #148]	; (80070bc <vRegisterCLICommands+0x14c>)
 8007028:	f007 f85c 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800702c:	4824      	ldr	r0, [pc, #144]	; (80070c0 <vRegisterCLICommands+0x150>)
 800702e:	f007 f859 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =34;			// Add "help" command
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <vRegisterCLICommands+0x154>)
 8007034:	2222      	movs	r2, #34	; 0x22
 8007036:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007038:	f003 f8a2 	bl	800a180 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800703c:	f7ff ff96 	bl	8006f6c <RegisterUserCLICommands>
}
 8007040:	bd10      	pop	{r4, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	0801a260 	.word	0x0801a260
 8007048:	0801a250 	.word	0x0801a250
 800704c:	0801a240 	.word	0x0801a240
 8007050:	0801a16c 	.word	0x0801a16c
 8007054:	0801a280 	.word	0x0801a280
 8007058:	0801a220 	.word	0x0801a220
 800705c:	0801a1dc 	.word	0x0801a1dc
 8007060:	0801a2d0 	.word	0x0801a2d0
 8007064:	0801a1fc 	.word	0x0801a1fc
 8007068:	0801a290 	.word	0x0801a290
 800706c:	0801a15c 	.word	0x0801a15c
 8007070:	0801a270 	.word	0x0801a270
 8007074:	0801a2b0 	.word	0x0801a2b0
 8007078:	0801a1cc 	.word	0x0801a1cc
 800707c:	0801a19c 	.word	0x0801a19c
 8007080:	0801a2f0 	.word	0x0801a2f0
 8007084:	0801a18c 	.word	0x0801a18c
 8007088:	0801a2a0 	.word	0x0801a2a0
 800708c:	0801a310 	.word	0x0801a310
 8007090:	0801a1ec 	.word	0x0801a1ec
 8007094:	0801a1bc 	.word	0x0801a1bc
 8007098:	0801a2c0 	.word	0x0801a2c0
 800709c:	0801a14c 	.word	0x0801a14c
 80070a0:	0801a230 	.word	0x0801a230
 80070a4:	0801a1ac 	.word	0x0801a1ac
 80070a8:	0801a17c 	.word	0x0801a17c
 80070ac:	0801a300 	.word	0x0801a300
 80070b0:	0801a2e0 	.word	0x0801a2e0
 80070b4:	0801a10c 	.word	0x0801a10c
 80070b8:	0801a12c 	.word	0x0801a12c
 80070bc:	0801a13c 	.word	0x0801a13c
 80070c0:	0801a11c 	.word	0x0801a11c
 80070c4:	20005710 	.word	0x20005710

080070c8 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	0005      	movs	r5, r0
 80070cc:	000e      	movs	r6, r1
 80070ce:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 80070d0:	f003 f872 	bl	800a1b8 <GetPort>
 80070d4:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <StartDMAstream+0x48>)
 80070d8:	5c1b      	ldrb	r3, [r3, r0]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d903      	bls.n	80070e6 <StartDMAstream+0x1e>
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d001      	beq.n	80070e6 <StartDMAstream+0x1e>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80070e2:	2017      	movs	r0, #23
 80070e4:	e012      	b.n	800710c <StartDMAstream+0x44>
		SwitchMsgDMAToStream(srcPort);
 80070e6:	0020      	movs	r0, r4
 80070e8:	f003 fe1e 	bl	800ad28 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 80070ec:	1e63      	subs	r3, r4, #1
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4a08      	ldr	r2, [pc, #32]	; (8007114 <StartDMAstream+0x4c>)
 80070f2:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 80070f4:	4a06      	ldr	r2, [pc, #24]	; (8007110 <StartDMAstream+0x48>)
 80070f6:	2102      	movs	r1, #2
 80070f8:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80070fa:	4a07      	ldr	r2, [pc, #28]	; (8007118 <StartDMAstream+0x50>)
 80070fc:	2100      	movs	r1, #0
 80070fe:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007100:	003a      	movs	r2, r7
 8007102:	0031      	movs	r1, r6
 8007104:	0028      	movs	r0, r5
 8007106:	f004 fb89 	bl	800b81c <DMA_STREAM_Setup>
	
	return BOS_OK;
 800710a:	2000      	movs	r0, #0
}
 800710c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	200008b4 	.word	0x200008b4
 8007114:	20000ce8 	.word	0x20000ce8
 8007118:	20000cdc 	.word	0x20000cdc

0800711c <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007120:	4b13      	ldr	r3, [pc, #76]	; (8007170 <DMA_IRQHandler+0x54>)
 8007122:	5c1b      	ldrb	r3, [r3, r0]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d008      	beq.n	800713a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 8007128:	3c01      	subs	r4, #1
 800712a:	00e0      	lsls	r0, r4, #3
 800712c:	1b00      	subs	r0, r0, r4
 800712e:	00c0      	lsls	r0, r0, #3
 8007130:	4c10      	ldr	r4, [pc, #64]	; (8007174 <DMA_IRQHandler+0x58>)
 8007132:	1900      	adds	r0, r0, r4
 8007134:	f009 fc12 	bl	801095c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 8007138:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800713a:	1e45      	subs	r5, r0, #1
 800713c:	00e8      	lsls	r0, r5, #3
 800713e:	1b40      	subs	r0, r0, r5
 8007140:	00c0      	lsls	r0, r0, #3
 8007142:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <DMA_IRQHandler+0x5c>)
 8007144:	18c0      	adds	r0, r0, r3
 8007146:	f009 fc09 	bl	801095c <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800714a:	00aa      	lsls	r2, r5, #2
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <DMA_IRQHandler+0x60>)
 800714e:	58d3      	ldr	r3, [r2, r3]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <DMA_IRQHandler+0x42>
			++dmaStreamCount[port - 1];
 8007154:	490a      	ldr	r1, [pc, #40]	; (8007180 <DMA_IRQHandler+0x64>)
 8007156:	0010      	movs	r0, r2
 8007158:	5852      	ldr	r2, [r2, r1]
 800715a:	3201      	adds	r2, #1
 800715c:	5042      	str	r2, [r0, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 800715e:	00ad      	lsls	r5, r5, #2
 8007160:	4a07      	ldr	r2, [pc, #28]	; (8007180 <DMA_IRQHandler+0x64>)
 8007162:	58aa      	ldr	r2, [r5, r2]
 8007164:	4293      	cmp	r3, r2
 8007166:	d8e7      	bhi.n	8007138 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007168:	0020      	movs	r0, r4
 800716a:	f003 fdb1 	bl	800acd0 <StopStreamDMA>
}
 800716e:	e7e3      	b.n	8007138 <DMA_IRQHandler+0x1c>
 8007170:	200008b4 	.word	0x200008b4
 8007174:	20001004 	.word	0x20001004
 8007178:	200011fc 	.word	0x200011fc
 800717c:	20000cf4 	.word	0x20000cf4
 8007180:	20000cdc 	.word	0x20000cdc

08007184 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007184:	4b08      	ldr	r3, [pc, #32]	; (80071a8 <ResetUartORE+0x24>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	2308      	movs	r3, #8
 800718a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800718c:	4a07      	ldr	r2, [pc, #28]	; (80071ac <ResetUartORE+0x28>)
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007192:	4a07      	ldr	r2, [pc, #28]	; (80071b0 <ResetUartORE+0x2c>)
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007198:	4a06      	ldr	r2, [pc, #24]	; (80071b4 <ResetUartORE+0x30>)
 800719a:	6812      	ldr	r2, [r2, #0]
 800719c:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 800719e:	4a06      	ldr	r2, [pc, #24]	; (80071b8 <ResetUartORE+0x34>)
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	6213      	str	r3, [r2, #32]
#endif
}
 80071a4:	4770      	bx	lr
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	20005954 	.word	0x20005954
 80071ac:	20005ac4 	.word	0x20005ac4
 80071b0:	200058a4 	.word	0x200058a4
 80071b4:	20005a50 	.word	0x20005a50
 80071b8:	200059d8 	.word	0x200059d8

080071bc <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 80071c0:	2400      	movs	r4, #0
 80071c2:	9403      	str	r4, [sp, #12]
 80071c4:	9402      	str	r4, [sp, #8]
 80071c6:	4b3c      	ldr	r3, [pc, #240]	; (80072b8 <MX_FREERTOS_Init+0xfc>)
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	2503      	movs	r5, #3
 80071cc:	9500      	str	r5, [sp, #0]
 80071ce:	2300      	movs	r3, #0
 80071d0:	22f0      	movs	r2, #240	; 0xf0
 80071d2:	493a      	ldr	r1, [pc, #232]	; (80072bc <MX_FREERTOS_Init+0x100>)
 80071d4:	483a      	ldr	r0, [pc, #232]	; (80072c0 <MX_FREERTOS_Init+0x104>)
 80071d6:	f007 fd03 	bl	800ebe0 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 80071da:	9403      	str	r4, [sp, #12]
 80071dc:	9402      	str	r4, [sp, #8]
 80071de:	4b39      	ldr	r3, [pc, #228]	; (80072c4 <MX_FREERTOS_Init+0x108>)
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	9500      	str	r5, [sp, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	22f0      	movs	r2, #240	; 0xf0
 80071e8:	4937      	ldr	r1, [pc, #220]	; (80072c8 <MX_FREERTOS_Init+0x10c>)
 80071ea:	4838      	ldr	r0, [pc, #224]	; (80072cc <MX_FREERTOS_Init+0x110>)
 80071ec:	f007 fcf8 	bl	800ebe0 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 80071f0:	9403      	str	r4, [sp, #12]
 80071f2:	9402      	str	r4, [sp, #8]
 80071f4:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <MX_FREERTOS_Init+0x114>)
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	9500      	str	r5, [sp, #0]
 80071fa:	2300      	movs	r3, #0
 80071fc:	22f0      	movs	r2, #240	; 0xf0
 80071fe:	4935      	ldr	r1, [pc, #212]	; (80072d4 <MX_FREERTOS_Init+0x118>)
 8007200:	4835      	ldr	r0, [pc, #212]	; (80072d8 <MX_FREERTOS_Init+0x11c>)
 8007202:	f007 fced 	bl	800ebe0 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007206:	f7ff feb3 	bl	8006f70 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 800720a:	228c      	movs	r2, #140	; 0x8c
 800720c:	9403      	str	r4, [sp, #12]
 800720e:	9402      	str	r4, [sp, #8]
 8007210:	4b32      	ldr	r3, [pc, #200]	; (80072dc <MX_FREERTOS_Init+0x120>)
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	9500      	str	r5, [sp, #0]
 8007216:	2300      	movs	r3, #0
 8007218:	0052      	lsls	r2, r2, #1
 800721a:	4931      	ldr	r1, [pc, #196]	; (80072e0 <MX_FREERTOS_Init+0x124>)
 800721c:	4831      	ldr	r0, [pc, #196]	; (80072e4 <MX_FREERTOS_Init+0x128>)
 800721e:	f007 fcdf 	bl	800ebe0 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007222:	4d31      	ldr	r5, [pc, #196]	; (80072e8 <MX_FREERTOS_Init+0x12c>)
 8007224:	9403      	str	r4, [sp, #12]
 8007226:	9402      	str	r4, [sp, #8]
 8007228:	4b30      	ldr	r3, [pc, #192]	; (80072ec <MX_FREERTOS_Init+0x130>)
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	2604      	movs	r6, #4
 800722e:	9600      	str	r6, [sp, #0]
 8007230:	2301      	movs	r3, #1
 8007232:	22f0      	movs	r2, #240	; 0xf0
 8007234:	492e      	ldr	r1, [pc, #184]	; (80072f0 <MX_FREERTOS_Init+0x134>)
 8007236:	0028      	movs	r0, r5
 8007238:	f007 fcd2 	bl	800ebe0 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 800723c:	9403      	str	r4, [sp, #12]
 800723e:	9402      	str	r4, [sp, #8]
 8007240:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <MX_FREERTOS_Init+0x138>)
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	9600      	str	r6, [sp, #0]
 8007246:	2302      	movs	r3, #2
 8007248:	22f0      	movs	r2, #240	; 0xf0
 800724a:	492b      	ldr	r1, [pc, #172]	; (80072f8 <MX_FREERTOS_Init+0x13c>)
 800724c:	0028      	movs	r0, r5
 800724e:	f007 fcc7 	bl	800ebe0 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007252:	9403      	str	r4, [sp, #12]
 8007254:	9402      	str	r4, [sp, #8]
 8007256:	4b29      	ldr	r3, [pc, #164]	; (80072fc <MX_FREERTOS_Init+0x140>)
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	9600      	str	r6, [sp, #0]
 800725c:	2303      	movs	r3, #3
 800725e:	22f0      	movs	r2, #240	; 0xf0
 8007260:	4927      	ldr	r1, [pc, #156]	; (8007300 <MX_FREERTOS_Init+0x144>)
 8007262:	0028      	movs	r0, r5
 8007264:	f007 fcbc 	bl	800ebe0 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007268:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 800726a:	2101      	movs	r1, #1
 800726c:	a809      	add	r0, sp, #36	; 0x24
 800726e:	f006 fea5 	bl	800dfbc <osSemaphoreCreate>
 8007272:	4e24      	ldr	r6, [pc, #144]	; (8007304 <MX_FREERTOS_Init+0x148>)
 8007274:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007276:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007278:	2101      	movs	r1, #1
 800727a:	a808      	add	r0, sp, #32
 800727c:	f006 fe9e 	bl	800dfbc <osSemaphoreCreate>
 8007280:	4d21      	ldr	r5, [pc, #132]	; (8007308 <MX_FREERTOS_Init+0x14c>)
 8007282:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007284:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007286:	2101      	movs	r1, #1
 8007288:	a807      	add	r0, sp, #28
 800728a:	f006 fe97 	bl	800dfbc <osSemaphoreCreate>
 800728e:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007290:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007292:	2101      	movs	r1, #1
 8007294:	a806      	add	r0, sp, #24
 8007296:	f006 fe91 	bl	800dfbc <osSemaphoreCreate>
 800729a:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 800729c:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800729e:	2101      	movs	r1, #1
 80072a0:	a805      	add	r0, sp, #20
 80072a2:	f006 fe8b 	bl	800dfbc <osSemaphoreCreate>
 80072a6:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 80072a8:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 80072aa:	2101      	movs	r1, #1
 80072ac:	a804      	add	r0, sp, #16
 80072ae:	f006 fe85 	bl	800dfbc <osSemaphoreCreate>
 80072b2:	60e8      	str	r0, [r5, #12]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
	osSemaphoreDef(SemaphoreP12);
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
#endif
	
}
 80072b4:	b00a      	add	sp, #40	; 0x28
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	20000d28 	.word	0x20000d28
 80072bc:	0801a320 	.word	0x0801a320
 80072c0:	08007655 	.word	0x08007655
 80072c4:	20000d00 	.word	0x20000d00
 80072c8:	0801a32c 	.word	0x0801a32c
 80072cc:	08007ffd 	.word	0x08007ffd
 80072d0:	20000d24 	.word	0x20000d24
 80072d4:	0801a338 	.word	0x0801a338
 80072d8:	08013051 	.word	0x08013051
 80072dc:	20000dfc 	.word	0x20000dfc
 80072e0:	0801a344 	.word	0x0801a344
 80072e4:	08004d6d 	.word	0x08004d6d
 80072e8:	08008175 	.word	0x08008175
 80072ec:	20000d04 	.word	0x20000d04
 80072f0:	0801a34c 	.word	0x0801a34c
 80072f4:	20000d08 	.word	0x20000d08
 80072f8:	0801a358 	.word	0x0801a358
 80072fc:	20000d0c 	.word	0x20000d0c
 8007300:	0801a364 	.word	0x0801a364
 8007304:	20005838 	.word	0x20005838
 8007308:	20005818 	.word	0x20005818

0800730c <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 800730c:	b570      	push	{r4, r5, r6, lr}
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 800730e:	4bc0      	ldr	r3, [pc, #768]	; (8007610 <ExecuteMonitor+0x304>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b03      	cmp	r3, #3
 8007314:	d000      	beq.n	8007318 <ExecuteMonitor+0xc>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
		           }
	}
  }
}
 8007316:	bd70      	pop	{r4, r5, r6, pc}
	Monitor_time =0;
 8007318:	4bbd      	ldr	r3, [pc, #756]	; (8007610 <ExecuteMonitor+0x304>)
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
	flag=0;
 800731e:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007320:	3220      	adds	r2, #32
 8007322:	715a      	strb	r2, [r3, #5]
 8007324:	e054      	b.n	80073d0 <ExecuteMonitor+0xc4>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007326:	49bb      	ldr	r1, [pc, #748]	; (8007614 <ExecuteMonitor+0x308>)
 8007328:	780a      	ldrb	r2, [r1, #0]
 800732a:	1c50      	adds	r0, r2, #1
 800732c:	7008      	strb	r0, [r1, #0]
 800732e:	49ba      	ldr	r1, [pc, #744]	; (8007618 <ExecuteMonitor+0x30c>)
 8007330:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 8007332:	4aba      	ldr	r2, [pc, #744]	; (800761c <ExecuteMonitor+0x310>)
 8007334:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 8007336:	4bb6      	ldr	r3, [pc, #728]	; (8007610 <ExecuteMonitor+0x304>)
 8007338:	2203      	movs	r2, #3
 800733a:	715a      	strb	r2, [r3, #5]
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800733c:	4bb7      	ldr	r3, [pc, #732]	; (800761c <ExecuteMonitor+0x310>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b20      	cmp	r3, #32
 8007342:	d013      	beq.n	800736c <ExecuteMonitor+0x60>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d011      	beq.n	800736c <ExecuteMonitor+0x60>
 8007348:	4bb1      	ldr	r3, [pc, #708]	; (8007610 <ExecuteMonitor+0x304>)
 800734a:	791b      	ldrb	r3, [r3, #4]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d00d      	beq.n	800736c <ExecuteMonitor+0x60>
 8007350:	2b02      	cmp	r3, #2
 8007352:	d00b      	beq.n	800736c <ExecuteMonitor+0x60>
		            	    perviousCharacter= INTIAL_VALUE;
 8007354:	4cb1      	ldr	r4, [pc, #708]	; (800761c <ExecuteMonitor+0x310>)
 8007356:	2303      	movs	r3, #3
 8007358:	7023      	strb	r3, [r4, #0]
		            	    Delay_us(100);
 800735a:	2064      	movs	r0, #100	; 0x64
 800735c:	f006 fb60 	bl	800da20 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007360:	4bab      	ldr	r3, [pc, #684]	; (8007610 <ExecuteMonitor+0x304>)
 8007362:	795b      	ldrb	r3, [r3, #5]
 8007364:	7822      	ldrb	r2, [r4, #0]
 8007366:	4293      	cmp	r3, r2
 8007368:	d1dd      	bne.n	8007326 <ExecuteMonitor+0x1a>
 800736a:	e7e7      	b.n	800733c <ExecuteMonitor+0x30>
                   if(flag == NonActive)
 800736c:	4ba8      	ldr	r3, [pc, #672]	; (8007610 <ExecuteMonitor+0x304>)
 800736e:	791d      	ldrb	r5, [r3, #4]
 8007370:	2d00      	cmp	r5, #0
 8007372:	d126      	bne.n	80073c2 <ExecuteMonitor+0xb6>
                	   nonProcessingParameterIndex=0;
 8007374:	4ba7      	ldr	r3, [pc, #668]	; (8007614 <ExecuteMonitor+0x308>)
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 800737a:	4ba7      	ldr	r3, [pc, #668]	; (8007618 <ExecuteMonitor+0x30c>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b5b      	cmp	r3, #91	; 0x5b
 8007380:	d02a      	beq.n	80073d8 <ExecuteMonitor+0xcc>
 		            else if(FirstCharacterInParameter == '#')
 8007382:	2b23      	cmp	r3, #35	; 0x23
 8007384:	d060      	beq.n	8007448 <ExecuteMonitor+0x13c>
 		            else if(FirstCharacterInParameter == '=')
 8007386:	2b3d      	cmp	r3, #61	; 0x3d
 8007388:	d071      	beq.n	800746e <ExecuteMonitor+0x162>
               	   desiredArray=ParameterLocationIn2dArray;
 800738a:	4ea5      	ldr	r6, [pc, #660]	; (8007620 <ExecuteMonitor+0x314>)
 800738c:	7833      	ldrb	r3, [r6, #0]
 800738e:	4aa5      	ldr	r2, [pc, #660]	; (8007624 <ExecuteMonitor+0x318>)
 8007390:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 8007392:	011c      	lsls	r4, r3, #4
 8007394:	1ae3      	subs	r3, r4, r3
 8007396:	4ca4      	ldr	r4, [pc, #656]	; (8007628 <ExecuteMonitor+0x31c>)
 8007398:	18e4      	adds	r4, r4, r3
 800739a:	220f      	movs	r2, #15
 800739c:	2100      	movs	r1, #0
 800739e:	0020      	movs	r0, r4
 80073a0:	f00b fec3 	bl	801312a <memset>
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80073a4:	220f      	movs	r2, #15
 80073a6:	0031      	movs	r1, r6
 80073a8:	0020      	movs	r0, r4
 80073aa:	f00b feb5 	bl	8013118 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80073ae:	2214      	movs	r2, #20
 80073b0:	2100      	movs	r1, #0
 80073b2:	4899      	ldr	r0, [pc, #612]	; (8007618 <ExecuteMonitor+0x30c>)
 80073b4:	f00b feb9 	bl	801312a <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 80073b8:	2214      	movs	r2, #20
 80073ba:	2100      	movs	r1, #0
 80073bc:	0030      	movs	r0, r6
 80073be:	f00b feb4 	bl	801312a <memset>
                   if(flag == RUN_FOR_ONCE)
 80073c2:	2d01      	cmp	r5, #1
 80073c4:	d072      	beq.n	80074ac <ExecuteMonitor+0x1a0>
                   if(flag == CONTINUOUS_RUN)
 80073c6:	4b92      	ldr	r3, [pc, #584]	; (8007610 <ExecuteMonitor+0x304>)
 80073c8:	791b      	ldrb	r3, [r3, #4]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d100      	bne.n	80073d0 <ExecuteMonitor+0xc4>
 80073ce:	e0bf      	b.n	8007550 <ExecuteMonitor+0x244>
		                    nonProcessingParameterIndex=0;
 80073d0:	4b90      	ldr	r3, [pc, #576]	; (8007614 <ExecuteMonitor+0x308>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
 80073d6:	e7bd      	b.n	8007354 <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 80073d8:	4b8e      	ldr	r3, [pc, #568]	; (8007614 <ExecuteMonitor+0x308>)
 80073da:	3201      	adds	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80073de:	4b8d      	ldr	r3, [pc, #564]	; (8007614 <ExecuteMonitor+0x308>)
 80073e0:	781c      	ldrb	r4, [r3, #0]
 80073e2:	4b8d      	ldr	r3, [pc, #564]	; (8007618 <ExecuteMonitor+0x30c>)
 80073e4:	5d18      	ldrb	r0, [r3, r4]
 80073e6:	210a      	movs	r1, #10
 80073e8:	f7f8 ff38 	bl	800025c <__aeabi_uidivmod>
 80073ec:	b2c9      	uxtb	r1, r1
 80073ee:	4b8f      	ldr	r3, [pc, #572]	; (800762c <ExecuteMonitor+0x320>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	4299      	cmp	r1, r3
 80073f4:	d003      	beq.n	80073fe <ExecuteMonitor+0xf2>
 		            			nonProcessingParameterIndex+=2;
 80073f6:	3402      	adds	r4, #2
 80073f8:	4b86      	ldr	r3, [pc, #536]	; (8007614 <ExecuteMonitor+0x308>)
 80073fa:	701c      	strb	r4, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80073fc:	e7ef      	b.n	80073de <ExecuteMonitor+0xd2>
 		            			nonProcessingParameterIndex++;
 80073fe:	3401      	adds	r4, #1
 8007400:	b2e4      	uxtb	r4, r4
 8007402:	4b84      	ldr	r3, [pc, #528]	; (8007614 <ExecuteMonitor+0x308>)
 8007404:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007406:	4b84      	ldr	r3, [pc, #528]	; (8007618 <ExecuteMonitor+0x30c>)
 8007408:	5d18      	ldrb	r0, [r3, r4]
 800740a:	210a      	movs	r1, #10
 800740c:	f7f8 ff26 	bl	800025c <__aeabi_uidivmod>
 8007410:	4b83      	ldr	r3, [pc, #524]	; (8007620 <ExecuteMonitor+0x314>)
 8007412:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007414:	e002      	b.n	800741c <ExecuteMonitor+0x110>
 		            		nonProcessingParameterIndex++;
 8007416:	3301      	adds	r3, #1
 8007418:	4a7e      	ldr	r2, [pc, #504]	; (8007614 <ExecuteMonitor+0x308>)
 800741a:	7013      	strb	r3, [r2, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 800741c:	4b7d      	ldr	r3, [pc, #500]	; (8007614 <ExecuteMonitor+0x308>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	4a7d      	ldr	r2, [pc, #500]	; (8007618 <ExecuteMonitor+0x30c>)
 8007422:	5cd2      	ldrb	r2, [r2, r3]
 8007424:	2a5d      	cmp	r2, #93	; 0x5d
 8007426:	d1f6      	bne.n	8007416 <ExecuteMonitor+0x10a>
 		            	nonProcessingParameterIndex++;
 8007428:	3301      	adds	r3, #1
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4a79      	ldr	r2, [pc, #484]	; (8007614 <ExecuteMonitor+0x308>)
 800742e:	7013      	strb	r3, [r2, #0]
 		            	processingParameterIndex=1;
 8007430:	4a7f      	ldr	r2, [pc, #508]	; (8007630 <ExecuteMonitor+0x324>)
 8007432:	2101      	movs	r1, #1
 8007434:	7011      	strb	r1, [r2, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007436:	4978      	ldr	r1, [pc, #480]	; (8007618 <ExecuteMonitor+0x30c>)
 8007438:	18c9      	adds	r1, r1, r3
 800743a:	2214      	movs	r2, #20
 800743c:	1ad2      	subs	r2, r2, r3
 800743e:	4878      	ldr	r0, [pc, #480]	; (8007620 <ExecuteMonitor+0x314>)
 8007440:	3001      	adds	r0, #1
 8007442:	f00b fe69 	bl	8013118 <memcpy>
 8007446:	e7a0      	b.n	800738a <ExecuteMonitor+0x7e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8007448:	4e73      	ldr	r6, [pc, #460]	; (8007618 <ExecuteMonitor+0x30c>)
 800744a:	7870      	ldrb	r0, [r6, #1]
 800744c:	4c74      	ldr	r4, [pc, #464]	; (8007620 <ExecuteMonitor+0x314>)
 800744e:	210a      	movs	r1, #10
 8007450:	f7f8 ff04 	bl	800025c <__aeabi_uidivmod>
 8007454:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 8007456:	4b6f      	ldr	r3, [pc, #444]	; (8007614 <ExecuteMonitor+0x308>)
 8007458:	2202      	movs	r2, #2
 800745a:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800745c:	4b74      	ldr	r3, [pc, #464]	; (8007630 <ExecuteMonitor+0x324>)
 800745e:	3a01      	subs	r2, #1
 8007460:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007462:	1c60      	adds	r0, r4, #1
 8007464:	1cb1      	adds	r1, r6, #2
 8007466:	3211      	adds	r2, #17
 8007468:	f00b fe56 	bl	8013118 <memcpy>
 800746c:	e78d      	b.n	800738a <ExecuteMonitor+0x7e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800746e:	4c6a      	ldr	r4, [pc, #424]	; (8007618 <ExecuteMonitor+0x30c>)
 8007470:	7860      	ldrb	r0, [r4, #1]
 8007472:	210a      	movs	r1, #10
 8007474:	f7f8 fef2 	bl	800025c <__aeabi_uidivmod>
 8007478:	4b6c      	ldr	r3, [pc, #432]	; (800762c <ExecuteMonitor+0x320>)
 800747a:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800747c:	78a0      	ldrb	r0, [r4, #2]
 800747e:	210a      	movs	r1, #10
 8007480:	f7f8 feec 	bl	800025c <__aeabi_uidivmod>
 8007484:	4b6b      	ldr	r3, [pc, #428]	; (8007634 <ExecuteMonitor+0x328>)
 8007486:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8007488:	78e0      	ldrb	r0, [r4, #3]
 800748a:	4e65      	ldr	r6, [pc, #404]	; (8007620 <ExecuteMonitor+0x314>)
 800748c:	210a      	movs	r1, #10
 800748e:	f7f8 fee5 	bl	800025c <__aeabi_uidivmod>
 8007492:	7031      	strb	r1, [r6, #0]
                	    nonProcessingParameterIndex=4;
 8007494:	4b5f      	ldr	r3, [pc, #380]	; (8007614 <ExecuteMonitor+0x308>)
 8007496:	2204      	movs	r2, #4
 8007498:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 800749a:	4b65      	ldr	r3, [pc, #404]	; (8007630 <ExecuteMonitor+0x324>)
 800749c:	3a03      	subs	r2, #3
 800749e:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80074a0:	1c70      	adds	r0, r6, #1
 80074a2:	1d21      	adds	r1, r4, #4
 80074a4:	320f      	adds	r2, #15
 80074a6:	f00b fe37 	bl	8013118 <memcpy>
 80074aa:	e76e      	b.n	800738a <ExecuteMonitor+0x7e>
                	finalMatrixIndex=0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	4a62      	ldr	r2, [pc, #392]	; (8007638 <ExecuteMonitor+0x32c>)
 80074b0:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 80074b2:	4a62      	ldr	r2, [pc, #392]	; (800763c <ExecuteMonitor+0x330>)
 80074b4:	2101      	movs	r1, #1
 80074b6:	7011      	strb	r1, [r2, #0]
		          	counter=0;
 80074b8:	4a61      	ldr	r2, [pc, #388]	; (8007640 <ExecuteMonitor+0x334>)
 80074ba:	7013      	strb	r3, [r2, #0]
		           while(counter != numCommandParameters)
 80074bc:	e006      	b.n	80074cc <ExecuteMonitor+0x1c0>
		                   counter++;
 80074be:	4a60      	ldr	r2, [pc, #384]	; (8007640 <ExecuteMonitor+0x334>)
 80074c0:	7813      	ldrb	r3, [r2, #0]
 80074c2:	3301      	adds	r3, #1
 80074c4:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80074c6:	4b5d      	ldr	r3, [pc, #372]	; (800763c <ExecuteMonitor+0x330>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80074cc:	4b5c      	ldr	r3, [pc, #368]	; (8007640 <ExecuteMonitor+0x334>)
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	4b58      	ldr	r3, [pc, #352]	; (8007634 <ExecuteMonitor+0x328>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d01b      	beq.n	8007510 <ExecuteMonitor+0x204>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80074d8:	4b59      	ldr	r3, [pc, #356]	; (8007640 <ExecuteMonitor+0x334>)
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	4b57      	ldr	r3, [pc, #348]	; (800763c <ExecuteMonitor+0x330>)
 80074de:	7818      	ldrb	r0, [r3, #0]
 80074e0:	1c41      	adds	r1, r0, #1
 80074e2:	7019      	strb	r1, [r3, #0]
 80074e4:	4c54      	ldr	r4, [pc, #336]	; (8007638 <ExecuteMonitor+0x32c>)
 80074e6:	7821      	ldrb	r1, [r4, #0]
 80074e8:	1c4b      	adds	r3, r1, #1
 80074ea:	7023      	strb	r3, [r4, #0]
 80074ec:	0113      	lsls	r3, r2, #4
 80074ee:	1a9a      	subs	r2, r3, r2
 80074f0:	4b4d      	ldr	r3, [pc, #308]	; (8007628 <ExecuteMonitor+0x31c>)
 80074f2:	189b      	adds	r3, r3, r2
 80074f4:	5c1b      	ldrb	r3, [r3, r0]
 80074f6:	4d53      	ldr	r5, [pc, #332]	; (8007644 <ExecuteMonitor+0x338>)
 80074f8:	546b      	strb	r3, [r5, r1]
		            	Delay_ms(1);
 80074fa:	2001      	movs	r0, #1
 80074fc:	f008 fcde 	bl	800febc <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007500:	7823      	ldrb	r3, [r4, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	5ceb      	ldrb	r3, [r5, r3]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0d9      	beq.n	80074be <ExecuteMonitor+0x1b2>
 800750a:	2b20      	cmp	r3, #32
 800750c:	d1e4      	bne.n	80074d8 <ExecuteMonitor+0x1cc>
 800750e:	e7d6      	b.n	80074be <ExecuteMonitor+0x1b2>
		          		   flag=0;
 8007510:	2300      	movs	r3, #0
 8007512:	4a3f      	ldr	r2, [pc, #252]	; (8007610 <ExecuteMonitor+0x304>)
 8007514:	7113      	strb	r3, [r2, #4]
		          		   counter=0;
 8007516:	4a4a      	ldr	r2, [pc, #296]	; (8007640 <ExecuteMonitor+0x334>)
 8007518:	7013      	strb	r3, [r2, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800751a:	4a4b      	ldr	r2, [pc, #300]	; (8007648 <ExecuteMonitor+0x33c>)
 800751c:	7013      	strb	r3, [r2, #0]
 800751e:	4b4a      	ldr	r3, [pc, #296]	; (8007648 <ExecuteMonitor+0x33c>)
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	2a3f      	cmp	r2, #63	; 0x3f
 8007524:	d80e      	bhi.n	8007544 <ExecuteMonitor+0x238>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8007526:	4b47      	ldr	r3, [pc, #284]	; (8007644 <ExecuteMonitor+0x338>)
 8007528:	5c99      	ldrb	r1, [r3, r2]
 800752a:	4b48      	ldr	r3, [pc, #288]	; (800764c <ExecuteMonitor+0x340>)
 800752c:	189b      	adds	r3, r3, r2
 800752e:	3381      	adds	r3, #129	; 0x81
 8007530:	33ff      	adds	r3, #255	; 0xff
 8007532:	7019      	strb	r1, [r3, #0]
		          			Delay_ms(1);
 8007534:	2001      	movs	r0, #1
 8007536:	f008 fcc1 	bl	800febc <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800753a:	4a43      	ldr	r2, [pc, #268]	; (8007648 <ExecuteMonitor+0x33c>)
 800753c:	7813      	ldrb	r3, [r2, #0]
 800753e:	3301      	adds	r3, #1
 8007540:	7013      	strb	r3, [r2, #0]
 8007542:	e7ec      	b.n	800751e <ExecuteMonitor+0x212>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007544:	2240      	movs	r2, #64	; 0x40
 8007546:	2100      	movs	r1, #0
 8007548:	483e      	ldr	r0, [pc, #248]	; (8007644 <ExecuteMonitor+0x338>)
 800754a:	f00b fdee 	bl	801312a <memset>
 800754e:	e73a      	b.n	80073c6 <ExecuteMonitor+0xba>
                	finalMatrixIndex=0;
 8007550:	2300      	movs	r3, #0
 8007552:	4a39      	ldr	r2, [pc, #228]	; (8007638 <ExecuteMonitor+0x32c>)
 8007554:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007556:	4a39      	ldr	r2, [pc, #228]	; (800763c <ExecuteMonitor+0x330>)
 8007558:	2101      	movs	r1, #1
 800755a:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 800755c:	4a38      	ldr	r2, [pc, #224]	; (8007640 <ExecuteMonitor+0x334>)
 800755e:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 8007560:	e006      	b.n	8007570 <ExecuteMonitor+0x264>
   		             counter++;
 8007562:	4a37      	ldr	r2, [pc, #220]	; (8007640 <ExecuteMonitor+0x334>)
 8007564:	7813      	ldrb	r3, [r2, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 800756a:	4b34      	ldr	r3, [pc, #208]	; (800763c <ExecuteMonitor+0x330>)
 800756c:	2201      	movs	r2, #1
 800756e:	701a      	strb	r2, [r3, #0]
   		           while(counter != numCommandParameters)
 8007570:	4b33      	ldr	r3, [pc, #204]	; (8007640 <ExecuteMonitor+0x334>)
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <ExecuteMonitor+0x328>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d01b      	beq.n	80075b4 <ExecuteMonitor+0x2a8>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800757c:	4b30      	ldr	r3, [pc, #192]	; (8007640 <ExecuteMonitor+0x334>)
 800757e:	781a      	ldrb	r2, [r3, #0]
 8007580:	4b2e      	ldr	r3, [pc, #184]	; (800763c <ExecuteMonitor+0x330>)
 8007582:	7818      	ldrb	r0, [r3, #0]
 8007584:	1c41      	adds	r1, r0, #1
 8007586:	7019      	strb	r1, [r3, #0]
 8007588:	4c2b      	ldr	r4, [pc, #172]	; (8007638 <ExecuteMonitor+0x32c>)
 800758a:	7821      	ldrb	r1, [r4, #0]
 800758c:	1c4b      	adds	r3, r1, #1
 800758e:	7023      	strb	r3, [r4, #0]
 8007590:	0113      	lsls	r3, r2, #4
 8007592:	1a9a      	subs	r2, r3, r2
 8007594:	4b24      	ldr	r3, [pc, #144]	; (8007628 <ExecuteMonitor+0x31c>)
 8007596:	189b      	adds	r3, r3, r2
 8007598:	5c1b      	ldrb	r3, [r3, r0]
 800759a:	4d2a      	ldr	r5, [pc, #168]	; (8007644 <ExecuteMonitor+0x338>)
 800759c:	546b      	strb	r3, [r5, r1]
   		            	Delay_ms(1);
 800759e:	2001      	movs	r0, #1
 80075a0:	f008 fc8c 	bl	800febc <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80075a4:	7823      	ldrb	r3, [r4, #0]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	5ceb      	ldrb	r3, [r5, r3]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0d9      	beq.n	8007562 <ExecuteMonitor+0x256>
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d1e4      	bne.n	800757c <ExecuteMonitor+0x270>
 80075b2:	e7d6      	b.n	8007562 <ExecuteMonitor+0x256>
		            counter=0;
 80075b4:	4b22      	ldr	r3, [pc, #136]	; (8007640 <ExecuteMonitor+0x334>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 80075ba:	e003      	b.n	80075c4 <ExecuteMonitor+0x2b8>
  	          		 Delay_ms(Monitor_time);
 80075bc:	4b14      	ldr	r3, [pc, #80]	; (8007610 <ExecuteMonitor+0x304>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	f008 fc7c 	bl	800febc <HAL_Delay>
                  while(flag != NonActive)
 80075c4:	4b12      	ldr	r3, [pc, #72]	; (8007610 <ExecuteMonitor+0x304>)
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d015      	beq.n	80075f8 <ExecuteMonitor+0x2ec>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80075cc:	4b1e      	ldr	r3, [pc, #120]	; (8007648 <ExecuteMonitor+0x33c>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <ExecuteMonitor+0x33c>)
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	2a3f      	cmp	r2, #63	; 0x3f
 80075d8:	d8f0      	bhi.n	80075bc <ExecuteMonitor+0x2b0>
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80075da:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <ExecuteMonitor+0x338>)
 80075dc:	5c99      	ldrb	r1, [r3, r2]
 80075de:	4b1b      	ldr	r3, [pc, #108]	; (800764c <ExecuteMonitor+0x340>)
 80075e0:	189b      	adds	r3, r3, r2
 80075e2:	3381      	adds	r3, #129	; 0x81
 80075e4:	33ff      	adds	r3, #255	; 0xff
 80075e6:	7019      	strb	r1, [r3, #0]
		          			Delay_us(200);
 80075e8:	20c8      	movs	r0, #200	; 0xc8
 80075ea:	f006 fa19 	bl	800da20 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80075ee:	4a16      	ldr	r2, [pc, #88]	; (8007648 <ExecuteMonitor+0x33c>)
 80075f0:	7813      	ldrb	r3, [r2, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	7013      	strb	r3, [r2, #0]
 80075f6:	e7ec      	b.n	80075d2 <ExecuteMonitor+0x2c6>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80075f8:	2240      	movs	r2, #64	; 0x40
 80075fa:	2100      	movs	r1, #0
 80075fc:	4811      	ldr	r0, [pc, #68]	; (8007644 <ExecuteMonitor+0x338>)
 80075fe:	f00b fd94 	bl	801312a <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 8007602:	22c0      	movs	r2, #192	; 0xc0
 8007604:	2100      	movs	r1, #0
 8007606:	4812      	ldr	r0, [pc, #72]	; (8007650 <ExecuteMonitor+0x344>)
 8007608:	f00b fd8f 	bl	801312a <memset>
 800760c:	e6e0      	b.n	80073d0 <ExecuteMonitor+0xc4>
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20000000 	.word	0x20000000
 8007614:	20005835 	.word	0x20005835
 8007618:	20000d6c 	.word	0x20000d6c
 800761c:	20005814 	.word	0x20005814
 8007620:	20000d10 	.word	0x20000d10
 8007624:	20005857 	.word	0x20005857
 8007628:	20000d80 	.word	0x20000d80
 800762c:	20005856 	.word	0x20005856
 8007630:	20005834 	.word	0x20005834
 8007634:	20005854 	.word	0x20005854
 8007638:	20005858 	.word	0x20005858
 800763c:	20005855 	.word	0x20005855
 8007640:	20005836 	.word	0x20005836
 8007644:	20000d2c 	.word	0x20000d2c
 8007648:	20005815 	.word	0x20005815
 800764c:	20000a60 	.word	0x20000a60
 8007650:	20000be0 	.word	0x20000be0

08007654 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	e022      	b.n	800769e <StartDefaultTask+0x4a>
				RTOS_IND_blink(100);
 8007658:	2580      	movs	r5, #128	; 0x80
 800765a:	012d      	lsls	r5, r5, #4
 800765c:	2490      	movs	r4, #144	; 0x90
 800765e:	05e4      	lsls	r4, r4, #23
 8007660:	2201      	movs	r2, #1
 8007662:	0029      	movs	r1, r5
 8007664:	0020      	movs	r0, r4
 8007666:	f00a f82e 	bl	80116c6 <HAL_GPIO_WritePin>
 800766a:	2064      	movs	r0, #100	; 0x64
 800766c:	f006 fc9e 	bl	800dfac <osDelay>
 8007670:	2200      	movs	r2, #0
 8007672:	0029      	movs	r1, r5
 8007674:	0020      	movs	r0, r4
 8007676:	f00a f826 	bl	80116c6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800767a:	4b22      	ldr	r3, [pc, #136]	; (8007704 <StartDefaultTask+0xb0>)
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007680:	f005 fbc2 	bl	800ce08 <CheckAttachedButtons>
		ExecuteSnippet();
 8007684:	f7fd fcfe 	bl	8005084 <ExecuteSnippet>
		ExecuteMonitor();
 8007688:	f7ff fe40 	bl	800730c <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <StartDefaultTask+0xb4>)
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <StartDefaultTask+0x46>
			delayButtonStateReset = false;
 8007694:	4b1d      	ldr	r3, [pc, #116]	; (800770c <StartDefaultTask+0xb8>)
 8007696:	2200      	movs	r2, #0
 8007698:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 800769a:	f008 fa95 	bl	800fbc8 <vPortYield>
		switch(indMode){
 800769e:	4b19      	ldr	r3, [pc, #100]	; (8007704 <StartDefaultTask+0xb0>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d0d8      	beq.n	8007658 <StartDefaultTask+0x4>
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d016      	beq.n	80076d8 <StartDefaultTask+0x84>
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d1e8      	bne.n	8007680 <StartDefaultTask+0x2c>
				RTOS_IND_blink(200);
 80076ae:	2580      	movs	r5, #128	; 0x80
 80076b0:	012d      	lsls	r5, r5, #4
 80076b2:	2490      	movs	r4, #144	; 0x90
 80076b4:	05e4      	lsls	r4, r4, #23
 80076b6:	2201      	movs	r2, #1
 80076b8:	0029      	movs	r1, r5
 80076ba:	0020      	movs	r0, r4
 80076bc:	f00a f803 	bl	80116c6 <HAL_GPIO_WritePin>
 80076c0:	20c8      	movs	r0, #200	; 0xc8
 80076c2:	f006 fc73 	bl	800dfac <osDelay>
 80076c6:	2200      	movs	r2, #0
 80076c8:	0029      	movs	r1, r5
 80076ca:	0020      	movs	r0, r4
 80076cc:	f009 fffb 	bl	80116c6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <StartDefaultTask+0xb0>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
				break;
 80076d6:	e7d3      	b.n	8007680 <StartDefaultTask+0x2c>
				RTOS_IND_blink(30);
 80076d8:	2580      	movs	r5, #128	; 0x80
 80076da:	012d      	lsls	r5, r5, #4
 80076dc:	2490      	movs	r4, #144	; 0x90
 80076de:	05e4      	lsls	r4, r4, #23
 80076e0:	2201      	movs	r2, #1
 80076e2:	0029      	movs	r1, r5
 80076e4:	0020      	movs	r0, r4
 80076e6:	f009 ffee 	bl	80116c6 <HAL_GPIO_WritePin>
 80076ea:	201e      	movs	r0, #30
 80076ec:	f006 fc5e 	bl	800dfac <osDelay>
 80076f0:	2200      	movs	r2, #0
 80076f2:	0029      	movs	r1, r5
 80076f4:	0020      	movs	r0, r4
 80076f6:	f009 ffe6 	bl	80116c6 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80076fa:	4b02      	ldr	r3, [pc, #8]	; (8007704 <StartDefaultTask+0xb0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]
				break;
 8007700:	e7be      	b.n	8007680 <StartDefaultTask+0x2c>
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	200007c8 	.word	0x200007c8
 8007708:	20001392 	.word	0x20001392
 800770c:	20001390 	.word	0x20001390

08007710 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007710:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8007712:	4b04      	ldr	r3, [pc, #16]	; (8007724 <vMainConfigureTimerForRunTimeStats+0x14>)
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	4904      	ldr	r1, [pc, #16]	; (8007728 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007718:	f7f8 fd1a 	bl	8000150 <__udivsi3>
 800771c:	4b03      	ldr	r3, [pc, #12]	; (800772c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800771e:	6018      	str	r0, [r3, #0]
}
 8007720:	bd10      	pop	{r4, pc}
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	20000108 	.word	0x20000108
 8007728:	00002710 	.word	0x00002710
 800772c:	20000df8 	.word	0x20000df8

08007730 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8007730:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8007732:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <ulMainGetRunTimeCounterValue+0x40>)
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	21fa      	movs	r1, #250	; 0xfa
 8007738:	0089      	lsls	r1, r1, #2
 800773a:	f7f8 fd09 	bl	8000150 <__udivsi3>
 800773e:	1e44      	subs	r4, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <ulMainGetRunTimeCounterValue+0x44>)
 8007742:	681d      	ldr	r5, [r3, #0]
 8007744:	1b65      	subs	r5, r4, r5
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8007746:	f007 fb73 	bl	800ee30 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800774a:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <ulMainGetRunTimeCounterValue+0x48>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	015b      	lsls	r3, r3, #5
 8007750:	d503      	bpl.n	800775a <ulMainGetRunTimeCounterValue+0x2a>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8007752:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007754:	4b07      	ldr	r3, [pc, #28]	; (8007774 <ulMainGetRunTimeCounterValue+0x44>)
 8007756:	681d      	ldr	r5, [r3, #0]
 8007758:	1b65      	subs	r5, r4, r5
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 800775a:	0084      	lsls	r4, r0, #2
 800775c:	1824      	adds	r4, r4, r0
 800775e:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8007760:	4b06      	ldr	r3, [pc, #24]	; (800777c <ulMainGetRunTimeCounterValue+0x4c>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	0028      	movs	r0, r5
 8007766:	f7f8 fcf3 	bl	8000150 <__udivsi3>
 800776a:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000108 	.word	0x20000108
 8007774:	e000e018 	.word	0xe000e018
 8007778:	e000ed04 	.word	0xe000ed04
 800777c:	20000df8 	.word	0x20000df8

08007780 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007780:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007782:	f008 f9c6 	bl	800fb12 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007786:	b2c4      	uxtb	r4, r0
 8007788:	0020      	movs	r0, r4
 800778a:	f003 faa1 	bl	800acd0 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800778e:	0020      	movs	r0, r4
 8007790:	f004 f80e 	bl	800b7b0 <SwitchStreamDMAToMsg>
}
 8007794:	bd10      	pop	{r4, pc}
	...

08007798 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	0005      	movs	r5, r0
 800779e:	000c      	movs	r4, r1
 80077a0:	0016      	movs	r6, r2
 80077a2:	220f      	movs	r2, #15
 80077a4:	446a      	add	r2, sp
 80077a6:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 80077a8:	0018      	movs	r0, r3
 80077aa:	ab08      	add	r3, sp, #32
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	4298      	cmp	r0, r3
 80077b0:	d00d      	beq.n	80077ce <SetupDMAStreams+0x36>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d100      	bne.n	80077b8 <SetupDMAStreams+0x20>
 80077b6:	e0b8      	b.n	800792a <SetupDMAStreams+0x192>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d100      	bne.n	80077be <SetupDMAStreams+0x26>
 80077bc:	e0b8      	b.n	8007930 <SetupDMAStreams+0x198>
	if(direction == FORWARD){
 80077be:	2d00      	cmp	r5, #0
 80077c0:	d00a      	beq.n	80077d8 <SetupDMAStreams+0x40>
	else if(direction == BACKWARD){
 80077c2:	2d01      	cmp	r5, #1
 80077c4:	d040      	beq.n	8007848 <SetupDMAStreams+0xb0>
	else if(direction == BIDIRECTIONAL){
 80077c6:	2d02      	cmp	r5, #2
 80077c8:	d068      	beq.n	800789c <SetupDMAStreams+0x104>
		return BOS_ERR_WrongParam;
 80077ca:	2067      	movs	r0, #103	; 0x67
 80077cc:	e0ae      	b.n	800792c <SetupDMAStreams+0x194>
		portStatus[src] =STREAM;
 80077ce:	4b5a      	ldr	r3, [pc, #360]	; (8007938 <SetupDMAStreams+0x1a0>)
 80077d0:	2202      	movs	r2, #2
 80077d2:	541a      	strb	r2, [r3, r0]
		return BOS_ERR_WrongParam;
 80077d4:	2067      	movs	r0, #103	; 0x67
 80077d6:	e0a9      	b.n	800792c <SetupDMAStreams+0x194>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80077d8:	f006 fa76 	bl	800dcc8 <GetUart>
 80077dc:	0005      	movs	r5, r0
 80077de:	ab08      	add	r3, sp, #32
 80077e0:	7818      	ldrb	r0, [r3, #0]
 80077e2:	f006 fa71 	bl	800dcc8 <GetUart>
 80077e6:	0001      	movs	r1, r0
 80077e8:	2201      	movs	r2, #1
 80077ea:	0028      	movs	r0, r5
 80077ec:	f7ff fc6c 	bl	80070c8 <StartDMAstream>
 80077f0:	2817      	cmp	r0, #23
 80077f2:	d100      	bne.n	80077f6 <SetupDMAStreams+0x5e>
 80077f4:	e09a      	b.n	800792c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80077f6:	0170      	lsls	r0, r6, #5
 80077f8:	1b80      	subs	r0, r0, r6
 80077fa:	0080      	lsls	r0, r0, #2
 80077fc:	1980      	adds	r0, r0, r6
 80077fe:	00c0      	lsls	r0, r0, #3
 8007800:	260f      	movs	r6, #15
 8007802:	446e      	add	r6, sp
 8007804:	21fa      	movs	r1, #250	; 0xfa
 8007806:	0089      	lsls	r1, r1, #2
 8007808:	f7f8 fca2 	bl	8000150 <__udivsi3>
 800780c:	0001      	movs	r1, r0
 800780e:	4b4b      	ldr	r3, [pc, #300]	; (800793c <SetupDMAStreams+0x1a4>)
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	0033      	movs	r3, r6
 8007814:	2200      	movs	r2, #0
 8007816:	484a      	ldr	r0, [pc, #296]	; (8007940 <SetupDMAStreams+0x1a8>)
 8007818:	f008 f832 	bl	800f880 <xTimerCreate>
 800781c:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 800781e:	7833      	ldrb	r3, [r6, #0]
 8007820:	3b01      	subs	r3, #1
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4a47      	ldr	r2, [pc, #284]	; (8007944 <SetupDMAStreams+0x1ac>)
 8007826:	509c      	str	r4, [r3, r2]
	if(xTimerStream != NULL)
 8007828:	2d00      	cmp	r5, #0
 800782a:	d100      	bne.n	800782e <SetupDMAStreams+0x96>
 800782c:	e082      	b.n	8007934 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 800782e:	f007 faf9 	bl	800ee24 <xTaskGetTickCount>
 8007832:	0002      	movs	r2, r0
 8007834:	2301      	movs	r3, #1
 8007836:	425b      	negs	r3, r3
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	2300      	movs	r3, #0
 800783c:	2101      	movs	r1, #1
 800783e:	0028      	movs	r0, r5
 8007840:	f008 f83c 	bl	800f8bc <xTimerGenericCommand>
	return BOS_OK;
 8007844:	2000      	movs	r0, #0
 8007846:	e071      	b.n	800792c <SetupDMAStreams+0x194>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007848:	0018      	movs	r0, r3
 800784a:	f006 fa3d 	bl	800dcc8 <GetUart>
 800784e:	0005      	movs	r5, r0
 8007850:	230f      	movs	r3, #15
 8007852:	446b      	add	r3, sp
 8007854:	7818      	ldrb	r0, [r3, #0]
 8007856:	f006 fa37 	bl	800dcc8 <GetUart>
 800785a:	0001      	movs	r1, r0
 800785c:	2201      	movs	r2, #1
 800785e:	0028      	movs	r0, r5
 8007860:	f7ff fc32 	bl	80070c8 <StartDMAstream>
 8007864:	2817      	cmp	r0, #23
 8007866:	d061      	beq.n	800792c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007868:	0170      	lsls	r0, r6, #5
 800786a:	1b80      	subs	r0, r0, r6
 800786c:	0080      	lsls	r0, r0, #2
 800786e:	1980      	adds	r0, r0, r6
 8007870:	00c0      	lsls	r0, r0, #3
 8007872:	21fa      	movs	r1, #250	; 0xfa
 8007874:	0089      	lsls	r1, r1, #2
 8007876:	f7f8 fc6b 	bl	8000150 <__udivsi3>
 800787a:	0001      	movs	r1, r0
 800787c:	4b2f      	ldr	r3, [pc, #188]	; (800793c <SetupDMAStreams+0x1a4>)
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	ab08      	add	r3, sp, #32
 8007882:	2200      	movs	r2, #0
 8007884:	482e      	ldr	r0, [pc, #184]	; (8007940 <SetupDMAStreams+0x1a8>)
 8007886:	f007 fffb 	bl	800f880 <xTimerCreate>
 800788a:	0005      	movs	r5, r0
		dmaStreamTotal[src - 1] =count;
 800788c:	230f      	movs	r3, #15
 800788e:	446b      	add	r3, sp
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	3b01      	subs	r3, #1
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a2b      	ldr	r2, [pc, #172]	; (8007944 <SetupDMAStreams+0x1ac>)
 8007898:	509c      	str	r4, [r3, r2]
 800789a:	e7c5      	b.n	8007828 <SetupDMAStreams+0x90>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 800789c:	f006 fa14 	bl	800dcc8 <GetUart>
 80078a0:	0005      	movs	r5, r0
 80078a2:	ab08      	add	r3, sp, #32
 80078a4:	7818      	ldrb	r0, [r3, #0]
 80078a6:	f006 fa0f 	bl	800dcc8 <GetUart>
 80078aa:	0001      	movs	r1, r0
 80078ac:	2201      	movs	r2, #1
 80078ae:	0028      	movs	r0, r5
 80078b0:	f7ff fc0a 	bl	80070c8 <StartDMAstream>
 80078b4:	2817      	cmp	r0, #23
 80078b6:	d039      	beq.n	800792c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80078b8:	0170      	lsls	r0, r6, #5
 80078ba:	1b80      	subs	r0, r0, r6
 80078bc:	0080      	lsls	r0, r0, #2
 80078be:	1980      	adds	r0, r0, r6
 80078c0:	00c0      	lsls	r0, r0, #3
 80078c2:	21fa      	movs	r1, #250	; 0xfa
 80078c4:	0089      	lsls	r1, r1, #2
 80078c6:	f7f8 fc43 	bl	8000150 <__udivsi3>
 80078ca:	0005      	movs	r5, r0
 80078cc:	4b1b      	ldr	r3, [pc, #108]	; (800793c <SetupDMAStreams+0x1a4>)
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	230f      	movs	r3, #15
 80078d2:	446b      	add	r3, sp
 80078d4:	2200      	movs	r2, #0
 80078d6:	0001      	movs	r1, r0
 80078d8:	4819      	ldr	r0, [pc, #100]	; (8007940 <SetupDMAStreams+0x1a8>)
 80078da:	f007 ffd1 	bl	800f880 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80078de:	466b      	mov	r3, sp
 80078e0:	7bdb      	ldrb	r3, [r3, #15]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4a17      	ldr	r2, [pc, #92]	; (8007944 <SetupDMAStreams+0x1ac>)
 80078e8:	509c      	str	r4, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80078ea:	ab08      	add	r3, sp, #32
 80078ec:	7818      	ldrb	r0, [r3, #0]
 80078ee:	f006 f9eb 	bl	800dcc8 <GetUart>
 80078f2:	0006      	movs	r6, r0
 80078f4:	466b      	mov	r3, sp
 80078f6:	7bd8      	ldrb	r0, [r3, #15]
 80078f8:	f006 f9e6 	bl	800dcc8 <GetUart>
 80078fc:	0001      	movs	r1, r0
 80078fe:	2201      	movs	r2, #1
 8007900:	0030      	movs	r0, r6
 8007902:	f7ff fbe1 	bl	80070c8 <StartDMAstream>
 8007906:	2817      	cmp	r0, #23
 8007908:	d010      	beq.n	800792c <SetupDMAStreams+0x194>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <SetupDMAStreams+0x1a4>)
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	ab08      	add	r3, sp, #32
 8007910:	2200      	movs	r2, #0
 8007912:	0029      	movs	r1, r5
 8007914:	480a      	ldr	r0, [pc, #40]	; (8007940 <SetupDMAStreams+0x1a8>)
 8007916:	f007 ffb3 	bl	800f880 <xTimerCreate>
 800791a:	0005      	movs	r5, r0
		dmaStreamTotal[dst - 1] =count;
 800791c:	ab08      	add	r3, sp, #32
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	3b01      	subs	r3, #1
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4a07      	ldr	r2, [pc, #28]	; (8007944 <SetupDMAStreams+0x1ac>)
 8007926:	509c      	str	r4, [r3, r2]
 8007928:	e77e      	b.n	8007828 <SetupDMAStreams+0x90>
		return BOS_ERR_WrongParam;
 800792a:	2067      	movs	r0, #103	; 0x67
}
 800792c:	b004      	add	sp, #16
 800792e:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 8007930:	2067      	movs	r0, #103	; 0x67
 8007932:	e7fb      	b.n	800792c <SetupDMAStreams+0x194>
	return BOS_OK;
 8007934:	2000      	movs	r0, #0
 8007936:	e7f9      	b.n	800792c <SetupDMAStreams+0x194>
 8007938:	200008b4 	.word	0x200008b4
 800793c:	08007781 	.word	0x08007781
 8007940:	0801a370 	.word	0x0801a370
 8007944:	20000cf4 	.word	0x20000cf4

08007948 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007948:	b510      	push	{r4, lr}
	switch(port){
 800794a:	2802      	cmp	r0, #2
 800794c:	d00c      	beq.n	8007968 <NotifyMessagingTask+0x20>
 800794e:	2803      	cmp	r0, #3
 8007950:	d012      	beq.n	8007978 <NotifyMessagingTask+0x30>
 8007952:	2801      	cmp	r0, #1
 8007954:	d000      	beq.n	8007958 <NotifyMessagingTask+0x10>
			break;
#endif
		default:
			break;
	}
}
 8007956:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P1MsgTaskHandle)
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <NotifyMessagingTask+0x40>)
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	2300      	movs	r3, #0
 800795e:	2202      	movs	r2, #2
 8007960:	2100      	movs	r1, #0
 8007962:	f007 feb3 	bl	800f6cc <xTaskGenericNotify>
			break;
 8007966:	e7f6      	b.n	8007956 <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P2MsgTaskHandle)
 8007968:	4b08      	ldr	r3, [pc, #32]	; (800798c <NotifyMessagingTask+0x44>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	2300      	movs	r3, #0
 800796e:	2202      	movs	r2, #2
 8007970:	2100      	movs	r1, #0
 8007972:	f007 feab 	bl	800f6cc <xTaskGenericNotify>
			break;
 8007976:	e7ee      	b.n	8007956 <NotifyMessagingTask+0xe>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <NotifyMessagingTask+0x48>)
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	2300      	movs	r3, #0
 800797e:	2202      	movs	r2, #2
 8007980:	2100      	movs	r1, #0
 8007982:	f007 fea3 	bl	800f6cc <xTaskGenericNotify>
}
 8007986:	e7e6      	b.n	8007956 <NotifyMessagingTask+0xe>
 8007988:	20000d04 	.word	0x20000d04
 800798c:	20000d08 	.word	0x20000d08
 8007990:	20000d0c 	.word	0x20000d0c

08007994 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007996:	46de      	mov	lr, fp
 8007998:	4657      	mov	r7, sl
 800799a:	464e      	mov	r6, r9
 800799c:	4645      	mov	r5, r8
 800799e:	b5e0      	push	{r5, r6, r7, lr}
 80079a0:	b087      	sub	sp, #28
 80079a2:	0004      	movs	r4, r0
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	0016      	movs	r6, r2
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	ab10      	add	r3, sp, #64	; 0x40
 80079ac:	881f      	ldrh	r7, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80079ae:	0003      	movs	r3, r0
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d100      	bne.n	80079b6 <SendMessageFromPort+0x22>
 80079b4:	e1a6      	b.n	8007d04 <SendMessageFromPort+0x370>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d104      	bne.n	80079c4 <SendMessageFromPort+0x30>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80079ba:	2aff      	cmp	r2, #255	; 0xff
 80079bc:	d002      	beq.n	80079c4 <SendMessageFromPort+0x30>
 80079be:	2afe      	cmp	r2, #254	; 0xfe
 80079c0:	d000      	beq.n	80079c4 <SendMessageFromPort+0x30>
 80079c2:	e1a1      	b.n	8007d08 <SendMessageFromPort+0x374>
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	d005      	beq.n	80079d4 <SendMessageFromPort+0x40>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <SendMessageFromPort+0x40>
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	d100      	bne.n	80079d4 <SendMessageFromPort+0x40>
 80079d2:	e19b      	b.n	8007d0c <SendMessageFromPort+0x378>
		return BOS_ERR_WrongParam;
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80079d4:	2000      	movs	r0, #0
 80079d6:	f007 f985 	bl	800ece4 <uxTaskPriorityGet>
 80079da:	9005      	str	r0, [sp, #20]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80079dc:	2105      	movs	r1, #5
 80079de:	2000      	movs	r0, #0
 80079e0:	f007 f990 	bl	800ed04 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80079e4:	4bcc      	ldr	r3, [pc, #816]	; (8007d18 <SendMessageFromPort+0x384>)
 80079e6:	2248      	movs	r2, #72	; 0x48
 80079e8:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80079ea:	3212      	adds	r2, #18
 80079ec:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	4323      	orrs	r3, r4
 80079f2:	d101      	bne.n	80079f8 <SendMessageFromPort+0x64>
 80079f4:	2efd      	cmp	r6, #253	; 0xfd
 80079f6:	d802      	bhi.n	80079fe <SendMessageFromPort+0x6a>
 80079f8:	9b04      	ldr	r3, [sp, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d130      	bne.n	8007a60 <SendMessageFromPort+0xcc>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80079fe:	3f01      	subs	r7, #1
 8007a00:	4ac6      	ldr	r2, [pc, #792]	; (8007d1c <SendMessageFromPort+0x388>)
 8007a02:	5dd5      	ldrb	r5, [r2, r7]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007a04:	00f9      	lsls	r1, r7, #3
 8007a06:	1bc9      	subs	r1, r1, r7
 8007a08:	00c9      	lsls	r1, r1, #3
 8007a0a:	4bc5      	ldr	r3, [pc, #788]	; (8007d20 <SendMessageFromPort+0x38c>)
 8007a0c:	18c9      	adds	r1, r1, r3
 8007a0e:	002a      	movs	r2, r5
 8007a10:	48c4      	ldr	r0, [pc, #784]	; (8007d24 <SendMessageFromPort+0x390>)
 8007a12:	f00b fb81 	bl	8013118 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007a16:	4bc0      	ldr	r3, [pc, #768]	; (8007d18 <SendMessageFromPort+0x384>)
 8007a18:	469b      	mov	fp, r3
 8007a1a:	709d      	strb	r5, [r3, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007a1c:	1ceb      	adds	r3, r5, #3
 8007a1e:	4698      	mov	r8, r3
 8007a20:	4bc1      	ldr	r3, [pc, #772]	; (8007d28 <SendMessageFromPort+0x394>)
 8007a22:	469a      	mov	sl, r3
 8007a24:	4642      	mov	r2, r8
 8007a26:	4659      	mov	r1, fp
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f00b fb75 	bl	8013118 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007a2e:	b2ab      	uxth	r3, r5
 8007a30:	4699      	mov	r9, r3
 8007a32:	4641      	mov	r1, r8
 8007a34:	4650      	mov	r0, sl
 8007a36:	f003 ff33 	bl	800b8a0 <CalculateCRC8>
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	4642      	mov	r2, r8
 8007a3e:	5498      	strb	r0, [r3, r2]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007a40:	2238      	movs	r2, #56	; 0x38
 8007a42:	2100      	movs	r1, #0
 8007a44:	4650      	mov	r0, sl
 8007a46:	f00b fb70 	bl	801312a <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007a4a:	2efd      	cmp	r6, #253	; 0xfd
 8007a4c:	d900      	bls.n	8007a50 <SendMessageFromPort+0xbc>
 8007a4e:	e120      	b.n	8007c92 <SendMessageFromPort+0x2fe>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007a50:	9f04      	ldr	r7, [sp, #16]
 8007a52:	3f2c      	subs	r7, #44	; 0x2c
 8007a54:	b2bf      	uxth	r7, r7
 8007a56:	2f01      	cmp	r7, #1
 8007a58:	d800      	bhi.n	8007a5c <SendMessageFromPort+0xc8>
 8007a5a:	e0dc      	b.n	8007c16 <SendMessageFromPort+0x282>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007a5c:	2500      	movs	r5, #0
 8007a5e:	e0fe      	b.n	8007c5e <SendMessageFromPort+0x2ca>
		if(src == 0)
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <SendMessageFromPort+0xd8>
			src =myID;
 8007a66:	4bb1      	ldr	r3, [pc, #708]	; (8007d2c <SendMessageFromPort+0x398>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	9303      	str	r3, [sp, #12]
		if(code > 0xFF)
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	2bff      	cmp	r3, #255	; 0xff
 8007a70:	d82a      	bhi.n	8007ac8 <SendMessageFromPort+0x134>
	bool extendOptions = false, extendCode = false;
 8007a72:	2100      	movs	r1, #0
		message[2] =length;
 8007a74:	4aa8      	ldr	r2, [pc, #672]	; (8007d18 <SendMessageFromPort+0x384>)
 8007a76:	2300      	movs	r3, #0
 8007a78:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007a7a:	70d6      	strb	r6, [r2, #3]
		message[4] =src;
 8007a7c:	9b03      	ldr	r3, [sp, #12]
 8007a7e:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007a80:	48ab      	ldr	r0, [pc, #684]	; (8007d30 <SendMessageFromPort+0x39c>)
 8007a82:	2300      	movs	r3, #0
 8007a84:	56c3      	ldrsb	r3, [r0, r3]
 8007a86:	7905      	ldrb	r5, [r0, #4]
 8007a88:	012d      	lsls	r5, r5, #4
 8007a8a:	432b      	orrs	r3, r5
 8007a8c:	b25b      	sxtb	r3, r3
 8007a8e:	7840      	ldrb	r0, [r0, #1]
 8007a90:	0080      	lsls	r0, r0, #2
 8007a92:	4303      	orrs	r3, r0
 8007a94:	b25b      	sxtb	r3, r3
 8007a96:	0048      	lsls	r0, r1, #1
 8007a98:	4303      	orrs	r3, r0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007a9e:	9804      	ldr	r0, [sp, #16]
 8007aa0:	7190      	strb	r0, [r2, #6]
		if(extendCode == true){
 8007aa2:	2900      	cmp	r1, #0
 8007aa4:	d012      	beq.n	8007acc <SendMessageFromPort+0x138>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007aa6:	0a02      	lsrs	r2, r0, #8
 8007aa8:	499b      	ldr	r1, [pc, #620]	; (8007d18 <SendMessageFromPort+0x384>)
 8007aaa:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007aac:	2201      	movs	r2, #1
 8007aae:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007ab0:	2f2e      	cmp	r7, #46	; 0x2e
 8007ab2:	d90e      	bls.n	8007ad2 <SendMessageFromPort+0x13e>
			message[5] |=0x80;
 8007ab4:	2280      	movs	r2, #128	; 0x80
 8007ab6:	4252      	negs	r2, r2
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	4a97      	ldr	r2, [pc, #604]	; (8007d18 <SendMessageFromPort+0x384>)
 8007abc:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007abe:	4b9d      	ldr	r3, [pc, #628]	; (8007d34 <SendMessageFromPort+0x3a0>)
 8007ac0:	801f      	strh	r7, [r3, #0]
	uint8_t length =0, shift =0;
 8007ac2:	2500      	movs	r5, #0
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8007ac4:	272e      	movs	r7, #46	; 0x2e
			while(totalNumberOfParams != 0){
 8007ac6:	e039      	b.n	8007b3c <SendMessageFromPort+0x1a8>
			extendCode = true;
 8007ac8:	2101      	movs	r1, #1
 8007aca:	e7d3      	b.n	8007a74 <SendMessageFromPort+0xe0>
 8007acc:	2200      	movs	r2, #0
 8007ace:	4693      	mov	fp, r2
 8007ad0:	e7ee      	b.n	8007ab0 <SendMessageFromPort+0x11c>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007ad2:	465b      	mov	r3, fp
 8007ad4:	3307      	adds	r3, #7
 8007ad6:	4890      	ldr	r0, [pc, #576]	; (8007d18 <SendMessageFromPort+0x384>)
 8007ad8:	1818      	adds	r0, r3, r0
 8007ada:	4b97      	ldr	r3, [pc, #604]	; (8007d38 <SendMessageFromPort+0x3a4>)
 8007adc:	8819      	ldrh	r1, [r3, #0]
 8007ade:	4b97      	ldr	r3, [pc, #604]	; (8007d3c <SendMessageFromPort+0x3a8>)
 8007ae0:	18c9      	adds	r1, r1, r3
 8007ae2:	003a      	movs	r2, r7
 8007ae4:	f00b fb18 	bl	8013118 <memcpy>
			length =numberOfParams + shift + 4;
 8007ae8:	465b      	mov	r3, fp
 8007aea:	19dd      	adds	r5, r3, r7
 8007aec:	b2ed      	uxtb	r5, r5
 8007aee:	3504      	adds	r5, #4
 8007af0:	b2ed      	uxtb	r5, r5
		if(AddBcastPayload == true){
 8007af2:	4b93      	ldr	r3, [pc, #588]	; (8007d40 <SendMessageFromPort+0x3ac>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d08d      	beq.n	8007a16 <SendMessageFromPort+0x82>
			if(dstGroupID < BOS_BROADCAST){
 8007afa:	4b92      	ldr	r3, [pc, #584]	; (8007d44 <SendMessageFromPort+0x3b0>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	4698      	mov	r8, r3
 8007b00:	2bff      	cmp	r3, #255	; 0xff
 8007b02:	d035      	beq.n	8007b70 <SendMessageFromPort+0x1dc>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007b04:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8007b06:	2100      	movs	r1, #0
 8007b08:	e036      	b.n	8007b78 <SendMessageFromPort+0x1e4>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007b0a:	4883      	ldr	r0, [pc, #524]	; (8007d18 <SendMessageFromPort+0x384>)
 8007b0c:	7942      	ldrb	r2, [r0, #5]
 8007b0e:	237f      	movs	r3, #127	; 0x7f
 8007b10:	4013      	ands	r3, r2
 8007b12:	7143      	strb	r3, [r0, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007b14:	465b      	mov	r3, fp
 8007b16:	3307      	adds	r3, #7
 8007b18:	1818      	adds	r0, r3, r0
 8007b1a:	4d87      	ldr	r5, [pc, #540]	; (8007d38 <SendMessageFromPort+0x3a4>)
 8007b1c:	8829      	ldrh	r1, [r5, #0]
 8007b1e:	4b87      	ldr	r3, [pc, #540]	; (8007d3c <SendMessageFromPort+0x3a8>)
 8007b20:	18c9      	adds	r1, r1, r3
 8007b22:	4652      	mov	r2, sl
 8007b24:	f00b faf8 	bl	8013118 <memcpy>
					ptrShift =0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	802b      	strh	r3, [r5, #0]
					totalNumberOfParams =0;
 8007b2c:	4a81      	ldr	r2, [pc, #516]	; (8007d34 <SendMessageFromPort+0x3a0>)
 8007b2e:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8007b30:	465d      	mov	r5, fp
 8007b32:	4455      	add	r5, sl
 8007b34:	b2ed      	uxtb	r5, r5
 8007b36:	3504      	adds	r5, #4
 8007b38:	b2ed      	uxtb	r5, r5
					numberOfParams =totalNumberOfParams;
 8007b3a:	4657      	mov	r7, sl
			while(totalNumberOfParams != 0){
 8007b3c:	4b7d      	ldr	r3, [pc, #500]	; (8007d34 <SendMessageFromPort+0x3a0>)
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	469a      	mov	sl, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0d5      	beq.n	8007af2 <SendMessageFromPort+0x15e>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007b46:	45ba      	cmp	sl, r7
 8007b48:	d3df      	bcc.n	8007b0a <SendMessageFromPort+0x176>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007b4a:	9700      	str	r7, [sp, #0]
 8007b4c:	9b04      	ldr	r3, [sp, #16]
 8007b4e:	0032      	movs	r2, r6
 8007b50:	9903      	ldr	r1, [sp, #12]
 8007b52:	0020      	movs	r0, r4
 8007b54:	f7ff ff1e 	bl	8007994 <SendMessageFromPort>
					osDelay(10);
 8007b58:	200a      	movs	r0, #10
 8007b5a:	f006 fa27 	bl	800dfac <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007b5e:	4a75      	ldr	r2, [pc, #468]	; (8007d34 <SendMessageFromPort+0x3a0>)
 8007b60:	8813      	ldrh	r3, [r2, #0]
 8007b62:	1bdb      	subs	r3, r3, r7
 8007b64:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8007b66:	4a74      	ldr	r2, [pc, #464]	; (8007d38 <SendMessageFromPort+0x3a4>)
 8007b68:	8813      	ldrh	r3, [r2, #0]
 8007b6a:	18fb      	adds	r3, r7, r3
 8007b6c:	8013      	strh	r3, [r2, #0]
 8007b6e:	e7e5      	b.n	8007b3c <SendMessageFromPort+0x1a8>
			uint8_t groupMembers =0;
 8007b70:	2100      	movs	r1, #0
 8007b72:	e021      	b.n	8007bb8 <SendMessageFromPort+0x224>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007b74:	3301      	adds	r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	4873      	ldr	r0, [pc, #460]	; (8007d48 <SendMessageFromPort+0x3b4>)
 8007b7a:	7800      	ldrb	r0, [r0, #0]
 8007b7c:	4298      	cmp	r0, r3
 8007b7e:	d315      	bcc.n	8007bac <SendMessageFromPort+0x218>
					if(InGroup(i,dstGroupID)){
 8007b80:	1e58      	subs	r0, r3, #1
 8007b82:	0040      	lsls	r0, r0, #1
 8007b84:	4a71      	ldr	r2, [pc, #452]	; (8007d4c <SendMessageFromPort+0x3b8>)
 8007b86:	5a80      	ldrh	r0, [r0, r2]
 8007b88:	4642      	mov	r2, r8
 8007b8a:	4110      	asrs	r0, r2
 8007b8c:	07c2      	lsls	r2, r0, #31
 8007b8e:	d5f1      	bpl.n	8007b74 <SendMessageFromPort+0x1e0>
						++groupMembers;							// Add this member
 8007b90:	3101      	adds	r1, #1
 8007b92:	b2c9      	uxtb	r1, r1
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007b94:	1878      	adds	r0, r7, r1
 8007b96:	282c      	cmp	r0, #44	; 0x2c
 8007b98:	dd00      	ble.n	8007b9c <SendMessageFromPort+0x208>
 8007b9a:	e0b9      	b.n	8007d10 <SendMessageFromPort+0x37c>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007b9c:	465a      	mov	r2, fp
 8007b9e:	1dd0      	adds	r0, r2, #7
 8007ba0:	1838      	adds	r0, r7, r0
 8007ba2:	1808      	adds	r0, r1, r0
 8007ba4:	3801      	subs	r0, #1
 8007ba6:	4a5c      	ldr	r2, [pc, #368]	; (8007d18 <SendMessageFromPort+0x384>)
 8007ba8:	5413      	strb	r3, [r2, r0]
 8007baa:	e7e3      	b.n	8007b74 <SendMessageFromPort+0x1e0>
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007bac:	465b      	mov	r3, fp
 8007bae:	3307      	adds	r3, #7
 8007bb0:	18fb      	adds	r3, r7, r3
 8007bb2:	18cb      	adds	r3, r1, r3
 8007bb4:	4858      	ldr	r0, [pc, #352]	; (8007d18 <SendMessageFromPort+0x384>)
 8007bb6:	54c1      	strb	r1, [r0, r3]
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007bb8:	4643      	mov	r3, r8
 8007bba:	2bff      	cmp	r3, #255	; 0xff
 8007bbc:	d01b      	beq.n	8007bf6 <SendMessageFromPort+0x262>
			else if(dstGroupID == BOS_BROADCAST)
 8007bbe:	4643      	mov	r3, r8
 8007bc0:	2bff      	cmp	r3, #255	; 0xff
 8007bc2:	d100      	bne.n	8007bc6 <SendMessageFromPort+0x232>
 8007bc4:	e0a6      	b.n	8007d14 <SendMessageFromPort+0x380>
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007bc6:	187b      	adds	r3, r7, r1
 8007bc8:	2b2b      	cmp	r3, #43	; 0x2b
 8007bca:	dd00      	ble.n	8007bce <SendMessageFromPort+0x23a>
 8007bcc:	e0ca      	b.n	8007d64 <SendMessageFromPort+0x3d0>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007bce:	4b60      	ldr	r3, [pc, #384]	; (8007d50 <SendMessageFromPort+0x3bc>)
 8007bd0:	7818      	ldrb	r0, [r3, #0]
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	b2c0      	uxtb	r0, r0
 8007bd6:	7018      	strb	r0, [r3, #0]
 8007bd8:	465b      	mov	r3, fp
 8007bda:	3307      	adds	r3, #7
 8007bdc:	18fb      	adds	r3, r7, r3
 8007bde:	18cb      	adds	r3, r1, r3
 8007be0:	3301      	adds	r3, #1
 8007be2:	4a4d      	ldr	r2, [pc, #308]	; (8007d18 <SendMessageFromPort+0x384>)
 8007be4:	54d0      	strb	r0, [r2, r3]
			if(dstGroupID == BOS_BROADCAST)
 8007be6:	4643      	mov	r3, r8
 8007be8:	2bff      	cmp	r3, #255	; 0xff
 8007bea:	d011      	beq.n	8007c10 <SendMessageFromPort+0x27c>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007bec:	186d      	adds	r5, r5, r1
 8007bee:	b2ed      	uxtb	r5, r5
 8007bf0:	3502      	adds	r5, #2
 8007bf2:	b2ed      	uxtb	r5, r5
 8007bf4:	e70f      	b.n	8007a16 <SendMessageFromPort+0x82>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8007bf6:	2f2c      	cmp	r7, #44	; 0x2c
 8007bf8:	d8e1      	bhi.n	8007bbe <SendMessageFromPort+0x22a>
				message[7 + shift + numberOfParams] =++bcastID;
 8007bfa:	4855      	ldr	r0, [pc, #340]	; (8007d50 <SendMessageFromPort+0x3bc>)
 8007bfc:	7803      	ldrb	r3, [r0, #0]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	7003      	strb	r3, [r0, #0]
 8007c04:	4658      	mov	r0, fp
 8007c06:	3007      	adds	r0, #7
 8007c08:	1838      	adds	r0, r7, r0
 8007c0a:	4f43      	ldr	r7, [pc, #268]	; (8007d18 <SendMessageFromPort+0x384>)
 8007c0c:	543b      	strb	r3, [r7, r0]
 8007c0e:	e7ea      	b.n	8007be6 <SendMessageFromPort+0x252>
				length +=1;		// + bcastID
 8007c10:	3501      	adds	r5, #1
 8007c12:	b2ed      	uxtb	r5, r5
 8007c14:	e6ff      	b.n	8007a16 <SendMessageFromPort+0x82>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007c16:	464a      	mov	r2, r9
 8007c18:	3204      	adds	r2, #4
 8007c1a:	b292      	uxth	r2, r2
 8007c1c:	2332      	movs	r3, #50	; 0x32
 8007c1e:	493e      	ldr	r1, [pc, #248]	; (8007d18 <SendMessageFromPort+0x384>)
 8007c20:	0020      	movs	r0, r4
 8007c22:	f7fb f83f 	bl	8002ca4 <Send_BOS_Message>
					break;
				if(rejected_FLAG == true)
					Send_BOS_Message(port,message,length + 4,cmd50ms);
			}
		}
		ACK_FLAG =false; rejected_FLAG=false;
 8007c26:	2300      	movs	r3, #0
 8007c28:	4a4a      	ldr	r2, [pc, #296]	; (8007d54 <SendMessageFromPort+0x3c0>)
 8007c2a:	7013      	strb	r3, [r2, #0]
 8007c2c:	4a4a      	ldr	r2, [pc, #296]	; (8007d58 <SendMessageFromPort+0x3c4>)
 8007c2e:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8007c30:	9905      	ldr	r1, [sp, #20]
 8007c32:	2000      	movs	r0, #0
 8007c34:	f007 f866 	bl	800ed04 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8007c38:	4b48      	ldr	r3, [pc, #288]	; (8007d5c <SendMessageFromPort+0x3c8>)
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]
	
	return result;
 8007c3e:	2000      	movs	r0, #0
}
 8007c40:	b007      	add	sp, #28
 8007c42:	bcf0      	pop	{r4, r5, r6, r7}
 8007c44:	46bb      	mov	fp, r7
 8007c46:	46b2      	mov	sl, r6
 8007c48:	46a9      	mov	r9, r5
 8007c4a:	46a0      	mov	r8, r4
 8007c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007c4e:	2332      	movs	r3, #50	; 0x32
 8007c50:	0032      	movs	r2, r6
 8007c52:	4931      	ldr	r1, [pc, #196]	; (8007d18 <SendMessageFromPort+0x384>)
 8007c54:	0020      	movs	r0, r4
 8007c56:	f7fb f825 	bl	8002ca4 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007c5a:	3501      	adds	r5, #1
 8007c5c:	b2ed      	uxtb	r5, r5
 8007c5e:	b2ab      	uxth	r3, r5
 8007c60:	4a33      	ldr	r2, [pc, #204]	; (8007d30 <SendMessageFromPort+0x39c>)
 8007c62:	88d2      	ldrh	r2, [r2, #6]
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d2de      	bcs.n	8007c26 <SendMessageFromPort+0x292>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007c68:	464b      	mov	r3, r9
 8007c6a:	1d1e      	adds	r6, r3, #4
 8007c6c:	b2b6      	uxth	r6, r6
 8007c6e:	2332      	movs	r3, #50	; 0x32
 8007c70:	0032      	movs	r2, r6
 8007c72:	4929      	ldr	r1, [pc, #164]	; (8007d18 <SendMessageFromPort+0x384>)
 8007c74:	0020      	movs	r0, r4
 8007c76:	f7fb f815 	bl	8002ca4 <Send_BOS_Message>
				osDelay(200);
 8007c7a:	20c8      	movs	r0, #200	; 0xc8
 8007c7c:	f006 f996 	bl	800dfac <osDelay>
				if(ACK_FLAG == true)
 8007c80:	4b34      	ldr	r3, [pc, #208]	; (8007d54 <SendMessageFromPort+0x3c0>)
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1ce      	bne.n	8007c26 <SendMessageFromPort+0x292>
				if(rejected_FLAG == true)
 8007c88:	4b33      	ldr	r3, [pc, #204]	; (8007d58 <SendMessageFromPort+0x3c4>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0e4      	beq.n	8007c5a <SendMessageFromPort+0x2c6>
 8007c90:	e7dd      	b.n	8007c4e <SendMessageFromPort+0x2ba>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007c92:	9b04      	ldr	r3, [sp, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d105      	bne.n	8007ca4 <SendMessageFromPort+0x310>
 8007c98:	9b03      	ldr	r3, [sp, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <SendMessageFromPort+0x310>
			src =message[4];
 8007c9e:	4b1e      	ldr	r3, [pc, #120]	; (8007d18 <SendMessageFromPort+0x384>)
 8007ca0:	791b      	ldrb	r3, [r3, #4]
 8007ca2:	9303      	str	r3, [sp, #12]
		FindBroadcastRoutes(src);
 8007ca4:	9803      	ldr	r0, [sp, #12]
 8007ca6:	f7fb fd09 	bl	80036bc <FindBroadcastRoutes>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007caa:	2501      	movs	r5, #1
 8007cac:	e007      	b.n	8007cbe <SendMessageFromPort+0x32a>
			rejected_FLAG=false;
 8007cae:	4b2a      	ldr	r3, [pc, #168]	; (8007d58 <SendMessageFromPort+0x3c4>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8007cb4:	200a      	movs	r0, #10
 8007cb6:	f005 feb3 	bl	800da20 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007cba:	3501      	adds	r5, #1
 8007cbc:	b2ed      	uxtb	r5, r5
 8007cbe:	2d03      	cmp	r5, #3
 8007cc0:	d8b6      	bhi.n	8007c30 <SendMessageFromPort+0x29c>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <SendMessageFromPort+0x398>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <SendMessageFromPort+0x3cc>)
 8007ccc:	5a9b      	ldrh	r3, [r3, r2]
 8007cce:	1e6a      	subs	r2, r5, #1
 8007cd0:	4113      	asrs	r3, r2
 8007cd2:	07db      	lsls	r3, r3, #31
 8007cd4:	d5eb      	bpl.n	8007cae <SendMessageFromPort+0x31a>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	1d1e      	adds	r6, r3, #4
 8007cda:	b2b6      	uxth	r6, r6
 8007cdc:	2332      	movs	r3, #50	; 0x32
 8007cde:	0032      	movs	r2, r6
 8007ce0:	490d      	ldr	r1, [pc, #52]	; (8007d18 <SendMessageFromPort+0x384>)
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	f7fa ffde 	bl	8002ca4 <Send_BOS_Message>
				osDelay(200);
 8007ce8:	20c8      	movs	r0, #200	; 0xc8
 8007cea:	f006 f95f 	bl	800dfac <osDelay>
				if(rejected_FLAG == true)
 8007cee:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <SendMessageFromPort+0x3c4>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0db      	beq.n	8007cae <SendMessageFromPort+0x31a>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007cf6:	2332      	movs	r3, #50	; 0x32
 8007cf8:	0032      	movs	r2, r6
 8007cfa:	4907      	ldr	r1, [pc, #28]	; (8007d18 <SendMessageFromPort+0x384>)
 8007cfc:	0020      	movs	r0, r4
 8007cfe:	f7fa ffd1 	bl	8002ca4 <Send_BOS_Message>
 8007d02:	e7d4      	b.n	8007cae <SendMessageFromPort+0x31a>
		return BOS_ERR_WrongParam;
 8007d04:	2067      	movs	r0, #103	; 0x67
 8007d06:	e79b      	b.n	8007c40 <SendMessageFromPort+0x2ac>
 8007d08:	2067      	movs	r0, #103	; 0x67
 8007d0a:	e799      	b.n	8007c40 <SendMessageFromPort+0x2ac>
 8007d0c:	2067      	movs	r0, #103	; 0x67
 8007d0e:	e797      	b.n	8007c40 <SendMessageFromPort+0x2ac>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8007d10:	2069      	movs	r0, #105	; 0x69
 8007d12:	e795      	b.n	8007c40 <SendMessageFromPort+0x2ac>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007d14:	2069      	movs	r0, #105	; 0x69
 8007d16:	e793      	b.n	8007c40 <SendMessageFromPort+0x2ac>
 8007d18:	200007cc 	.word	0x200007cc
 8007d1c:	20000804 	.word	0x20000804
 8007d20:	200006b4 	.word	0x200006b4
 8007d24:	200007cf 	.word	0x200007cf
 8007d28:	20000ca4 	.word	0x20000ca4
 8007d2c:	20000084 	.word	0x20000084
 8007d30:	20005714 	.word	0x20005714
 8007d34:	20000e02 	.word	0x20000e02
 8007d38:	20000e00 	.word	0x20000e00
 8007d3c:	20000808 	.word	0x20000808
 8007d40:	20000316 	.word	0x20000316
 8007d44:	20000050 	.word	0x20000050
 8007d48:	20000030 	.word	0x20000030
 8007d4c:	200007c4 	.word	0x200007c4
 8007d50:	20000678 	.word	0x20000678
 8007d54:	20000314 	.word	0x20000314
 8007d58:	200008c0 	.word	0x200008c0
 8007d5c:	200008d0 	.word	0x200008d0
 8007d60:	2000067c 	.word	0x2000067c
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007d64:	2069      	movs	r0, #105	; 0x69
 8007d66:	e76b      	b.n	8007c40 <SendMessageFromPort+0x2ac>

08007d68 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8007d68:	b500      	push	{lr}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	0001      	movs	r1, r0
	AddBcastPayload = false;
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <ForwardReceivedMessage+0x30>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8007d74:	1e42      	subs	r2, r0, #1
 8007d76:	00d3      	lsls	r3, r2, #3
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4a07      	ldr	r2, [pc, #28]	; (8007d9c <ForwardReceivedMessage+0x34>)
 8007d7e:	5c9a      	ldrb	r2, [r3, r2]
		port = Output_Port_Array[dst - 1];
 8007d80:	1e53      	subs	r3, r2, #1
 8007d82:	4807      	ldr	r0, [pc, #28]	; (8007da0 <ForwardReceivedMessage+0x38>)
 8007d84:	5cc0      	ldrb	r0, [r0, r3]
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8007d86:	9100      	str	r1, [sp, #0]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	f7ff fe02 	bl	8007994 <SendMessageFromPort>
}
 8007d90:	2000      	movs	r0, #0
 8007d92:	b003      	add	sp, #12
 8007d94:	bd00      	pop	{pc}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	20000316 	.word	0x20000316
 8007d9c:	200006b4 	.word	0x200006b4
 8007da0:	2000066c 	.word	0x2000066c

08007da4 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8007da4:	b500      	push	{lr}
 8007da6:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <BroadcastReceivedMessage+0x38>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8007dae:	4b0c      	ldr	r3, [pc, #48]	; (8007de0 <BroadcastReceivedMessage+0x3c>)
 8007db0:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8007db2:	28ff      	cmp	r0, #255	; 0xff
 8007db4:	d009      	beq.n	8007dca <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8007db6:	9100      	str	r1, [sp, #0]
 8007db8:	2300      	movs	r3, #0
 8007dba:	22fe      	movs	r2, #254	; 0xfe
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f7ff fde8 	bl	8007994 <SendMessageFromPort>
}
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	b003      	add	sp, #12
 8007dc8:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8007dca:	9100      	str	r1, [sp, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	32ff      	adds	r2, #255	; 0xff
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	f7ff fdde 	bl	8007994 <SendMessageFromPort>
 8007dd8:	e7f4      	b.n	8007dc4 <BroadcastReceivedMessage+0x20>
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	20000316 	.word	0x20000316
 8007de0:	20000050 	.word	0x20000050

08007de4 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8007de4:	b530      	push	{r4, r5, lr}
 8007de6:	b083      	sub	sp, #12
 8007de8:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8007dea:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <BroadcastMessage+0x44>)
 8007dec:	2501      	movs	r5, #1
 8007dee:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8007df0:	4b0e      	ldr	r3, [pc, #56]	; (8007e2c <BroadcastMessage+0x48>)
 8007df2:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8007df4:	29ff      	cmp	r1, #255	; 0xff
 8007df6:	d00e      	beq.n	8007e16 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8007df8:	9400      	str	r4, [sp, #0]
 8007dfa:	0013      	movs	r3, r2
 8007dfc:	22fe      	movs	r2, #254	; 0xfe
 8007dfe:	0001      	movs	r1, r0
 8007e00:	2000      	movs	r0, #0
 8007e02:	f7ff fdc7 	bl	8007994 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8007e06:	0022      	movs	r2, r4
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4809      	ldr	r0, [pc, #36]	; (8007e30 <BroadcastMessage+0x4c>)
 8007e0c:	f00b f98d 	bl	801312a <memset>
}
 8007e10:	2000      	movs	r0, #0
 8007e12:	b003      	add	sp, #12
 8007e14:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8007e16:	9400      	str	r4, [sp, #0]
 8007e18:	0013      	movs	r3, r2
 8007e1a:	22ff      	movs	r2, #255	; 0xff
 8007e1c:	0001      	movs	r1, r0
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f7ff fdb8 	bl	8007994 <SendMessageFromPort>
 8007e24:	e7ef      	b.n	8007e06 <BroadcastMessage+0x22>
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	20000316 	.word	0x20000316
 8007e2c:	20000050 	.word	0x20000050
 8007e30:	20000808 	.word	0x20000808

08007e34 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	0004      	movs	r4, r0
 8007e3a:	000e      	movs	r6, r1
 8007e3c:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8007e3e:	28ff      	cmp	r0, #255	; 0xff
 8007e40:	d011      	beq.n	8007e66 <SendMessageToModule+0x32>
				port = Output_Port_Array[dst - 1];
 8007e42:	1e43      	subs	r3, r0, #1
 8007e44:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <SendMessageToModule+0x44>)
 8007e46:	5cd0      	ldrb	r0, [r2, r3]
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <SendMessageToModule+0x48>)
 8007e4a:	7819      	ldrb	r1, [r3, #0]
 8007e4c:	9500      	str	r5, [sp, #0]
 8007e4e:	0033      	movs	r3, r6
 8007e50:	0022      	movs	r2, r4
 8007e52:	f7ff fd9f 	bl	8007994 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8007e56:	002a      	movs	r2, r5
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4809      	ldr	r0, [pc, #36]	; (8007e80 <SendMessageToModule+0x4c>)
 8007e5c:	f00b f965 	bl	801312a <memset>
}
 8007e60:	2000      	movs	r0, #0
 8007e62:	b002      	add	sp, #8
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8007e66:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <SendMessageToModule+0x48>)
 8007e68:	7818      	ldrb	r0, [r3, #0]
 8007e6a:	0013      	movs	r3, r2
 8007e6c:	000a      	movs	r2, r1
 8007e6e:	21ff      	movs	r1, #255	; 0xff
 8007e70:	f7ff ffb8 	bl	8007de4 <BroadcastMessage>
 8007e74:	e7f4      	b.n	8007e60 <SendMessageToModule+0x2c>
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	2000066c 	.word	0x2000066c
 8007e7c:	20000084 	.word	0x20000084
 8007e80:	20000808 	.word	0x20000808

08007e84 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8007e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e86:	46de      	mov	lr, fp
 8007e88:	4657      	mov	r7, sl
 8007e8a:	464e      	mov	r6, r9
 8007e8c:	4645      	mov	r5, r8
 8007e8e:	b5e0      	push	{r5, r6, r7, lr}
 8007e90:	b089      	sub	sp, #36	; 0x24
 8007e92:	4682      	mov	sl, r0
 8007e94:	000d      	movs	r5, r1
 8007e96:	9206      	str	r2, [sp, #24]
 8007e98:	001e      	movs	r6, r3
 8007e9a:	ab12      	add	r3, sp, #72	; 0x48
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	4699      	mov	r9, r3
 8007ea0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007ea2:	ab15      	add	r3, sp, #84	; 0x54
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	469b      	mov	fp, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8007ea8:	4b51      	ldr	r3, [pc, #324]	; (8007ff0 <StartScastDMAStream+0x16c>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	428b      	cmp	r3, r1
 8007eae:	d101      	bne.n	8007eb4 <StartScastDMAStream+0x30>
		
		return result;
	}
	
	/* Inform participating modules */
	for(uint8_t i =0; i < sizeof(route); i++){
 8007eb0:	2400      	movs	r4, #0
 8007eb2:	e058      	b.n	8007f66 <StartScastDMAStream+0xe2>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8007eb4:	0e3a      	lsrs	r2, r7, #24
 8007eb6:	4b4f      	ldr	r3, [pc, #316]	; (8007ff4 <StartScastDMAStream+0x170>)
 8007eb8:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8007eba:	0c3a      	lsrs	r2, r7, #16
 8007ebc:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8007ebe:	0a3a      	lsrs	r2, r7, #8
 8007ec0:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8007ec2:	70df      	strb	r7, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8007ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ec6:	0e12      	lsrs	r2, r2, #24
 8007ec8:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8007eca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ecc:	0c12      	lsrs	r2, r2, #16
 8007ece:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8007ed0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ed2:	0a12      	lsrs	r2, r2, #8
 8007ed4:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8007ed6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ed8:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8007eda:	464a      	mov	r2, r9
 8007edc:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8007ede:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8007ee0:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8007ee2:	9a06      	ldr	r2, [sp, #24]
 8007ee4:	72da      	strb	r2, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8007ee6:	465a      	mov	r2, fp
 8007ee8:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8007eea:	220d      	movs	r2, #13
 8007eec:	211c      	movs	r1, #28
 8007eee:	0028      	movs	r0, r5
 8007ef0:	f7ff ffa0 	bl	8007e34 <SendMessageToModule>
		return result;
 8007ef4:	e05f      	b.n	8007fb6 <StartScastDMAStream+0x132>
			/* Find out the inport and outport to this module from previous one */
			if(route[i + 1]){
				temp1 =FindRoute(route[i],route[i + 1]);
			}
			else{
				temp1 =FindRoute(route[i],srcM);
 8007ef6:	0029      	movs	r1, r5
 8007ef8:	f7fb fc9e 	bl	8003838 <FindRoute>
 8007efc:	9007      	str	r0, [sp, #28]
			}
			FindRoute(srcM,dstM);
 8007efe:	0031      	movs	r1, r6
 8007f00:	0028      	movs	r0, r5
 8007f02:	f7fb fc99 	bl	8003838 <FindRoute>
			if(route[i] == dstM){
 8007f06:	4b3c      	ldr	r3, [pc, #240]	; (8007ff8 <StartScastDMAStream+0x174>)
 8007f08:	4642      	mov	r2, r8
 8007f0a:	5c98      	ldrb	r0, [r3, r2]
 8007f0c:	42b0      	cmp	r0, r6
 8007f0e:	d13e      	bne.n	8007f8e <StartScastDMAStream+0x10a>
				temp2 =dstP;
 8007f10:	9806      	ldr	r0, [sp, #24]
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8007f12:	0e3a      	lsrs	r2, r7, #24
 8007f14:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <StartScastDMAStream+0x170>)
 8007f16:	701a      	strb	r2, [r3, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8007f18:	0c3a      	lsrs	r2, r7, #16
 8007f1a:	705a      	strb	r2, [r3, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8007f1c:	0a3a      	lsrs	r2, r7, #8
 8007f1e:	709a      	strb	r2, [r3, #2]
			messageParams[3] =(uint8_t )count;
 8007f20:	70df      	strb	r7, [r3, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8007f22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f24:	0e12      	lsrs	r2, r2, #24
 8007f26:	711a      	strb	r2, [r3, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8007f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f2a:	0c12      	lsrs	r2, r2, #16
 8007f2c:	715a      	strb	r2, [r3, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8007f2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f30:	0a12      	lsrs	r2, r2, #8
 8007f32:	719a      	strb	r2, [r3, #6]
			messageParams[7] =(uint8_t )timeout;
 8007f34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f36:	71da      	strb	r2, [r3, #7]
			messageParams[8] =direction; /* Stream direction */
 8007f38:	464a      	mov	r2, r9
 8007f3a:	721a      	strb	r2, [r3, #8]
			messageParams[9] =temp1; /* Source port */
 8007f3c:	9a07      	ldr	r2, [sp, #28]
 8007f3e:	725a      	strb	r2, [r3, #9]
			messageParams[10] =temp2; /* destination port */
 8007f40:	7298      	strb	r0, [r3, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8007f42:	465a      	mov	r2, fp
 8007f44:	72da      	strb	r2, [r3, #11]
			FindRoute(srcM,dstM);
 8007f46:	0031      	movs	r1, r6
 8007f48:	0028      	movs	r0, r5
 8007f4a:	f7fb fc75 	bl	8003838 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8007f4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ff8 <StartScastDMAStream+0x174>)
 8007f50:	4642      	mov	r2, r8
 8007f52:	5c98      	ldrb	r0, [r3, r2]
 8007f54:	220c      	movs	r2, #12
 8007f56:	211b      	movs	r1, #27
 8007f58:	f7ff ff6c 	bl	8007e34 <SendMessageToModule>
			osDelay(10);
 8007f5c:	200a      	movs	r0, #10
 8007f5e:	f006 f825 	bl	800dfac <osDelay>
	for(uint8_t i =0; i < sizeof(route); i++){
 8007f62:	3401      	adds	r4, #1
 8007f64:	b2e4      	uxtb	r4, r4
 8007f66:	2c01      	cmp	r4, #1
 8007f68:	d818      	bhi.n	8007f9c <StartScastDMAStream+0x118>
		FindRoute(srcM,dstM);
 8007f6a:	0031      	movs	r1, r6
 8007f6c:	0028      	movs	r0, r5
 8007f6e:	f7fb fc63 	bl	8003838 <FindRoute>
		if(route[i]){
 8007f72:	46a0      	mov	r8, r4
 8007f74:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <StartScastDMAStream+0x174>)
 8007f76:	5d18      	ldrb	r0, [r3, r4]
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	d0f2      	beq.n	8007f62 <StartScastDMAStream+0xde>
			if(route[i + 1]){
 8007f7c:	1c63      	adds	r3, r4, #1
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ff8 <StartScastDMAStream+0x174>)
 8007f80:	5cd1      	ldrb	r1, [r2, r3]
 8007f82:	2900      	cmp	r1, #0
 8007f84:	d0b7      	beq.n	8007ef6 <StartScastDMAStream+0x72>
				temp1 =FindRoute(route[i],route[i + 1]);
 8007f86:	f7fb fc57 	bl	8003838 <FindRoute>
 8007f8a:	9007      	str	r0, [sp, #28]
 8007f8c:	e7b7      	b.n	8007efe <StartScastDMAStream+0x7a>
				temp2 =FindRoute(route[i],route[i - 1]);
 8007f8e:	4643      	mov	r3, r8
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4a19      	ldr	r2, [pc, #100]	; (8007ff8 <StartScastDMAStream+0x174>)
 8007f94:	5cd1      	ldrb	r1, [r2, r3]
 8007f96:	f7fb fc4f 	bl	8003838 <FindRoute>
 8007f9a:	e7ba      	b.n	8007f12 <StartScastDMAStream+0x8e>
		}
	}
	
	if(srcM == dstM)
 8007f9c:	42b5      	cmp	r5, r6
 8007f9e:	d112      	bne.n	8007fc6 <StartScastDMAStream+0x142>
		port =dstP;
	else
		port =FindRoute(srcM,dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8007fa0:	9b06      	ldr	r3, [sp, #24]
 8007fa2:	9300      	str	r3, [sp, #0]
 8007fa4:	4653      	mov	r3, sl
 8007fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fa8:	0039      	movs	r1, r7
 8007faa:	4648      	mov	r0, r9
 8007fac:	f7ff fbf4 	bl	8007798 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if(stored){
 8007fb0:	465b      	mov	r3, fp
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <StartScastDMAStream+0x14e>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	b009      	add	sp, #36	; 0x24
 8007fba:	bcf0      	pop	{r4, r5, r6, r7}
 8007fbc:	46bb      	mov	fp, r7
 8007fbe:	46b2      	mov	sl, r6
 8007fc0:	46a9      	mov	r9, r5
 8007fc2:	46a0      	mov	r8, r4
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =FindRoute(srcM,dstM);
 8007fc6:	0031      	movs	r1, r6
 8007fc8:	0028      	movs	r0, r5
 8007fca:	f7fb fc35 	bl	8003838 <FindRoute>
 8007fce:	9006      	str	r0, [sp, #24]
 8007fd0:	e7e6      	b.n	8007fa0 <StartScastDMAStream+0x11c>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	9303      	str	r3, [sp, #12]
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	4653      	mov	r3, sl
 8007fe2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fe4:	0039      	movs	r1, r7
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f7fb f9f6 	bl	80033d8 <SaveEEstreams>
 8007fec:	e7e3      	b.n	8007fb6 <StartScastDMAStream+0x132>
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	20000084 	.word	0x20000084
 8007ff4:	20000808 	.word	0x20000808
 8007ff8:	2000585c 	.word	0x2000585c

08007ffc <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	46ce      	mov	lr, r9
 8008000:	4647      	mov	r7, r8
 8008002:	b580      	push	{r7, lr}
 8008004:	e042      	b.n	800808c <BackEndTask+0x90>
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
			for(int i=0;i<length;i++)
			{
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008006:	1ccf      	adds	r7, r1, #3
 8008008:	00c3      	lsls	r3, r0, #3
 800800a:	1a1b      	subs	r3, r3, r0
 800800c:	00db      	lsls	r3, r3, #3
 800800e:	00a6      	lsls	r6, r4, #2
 8008010:	1936      	adds	r6, r6, r4
 8008012:	00f2      	lsls	r2, r6, #3
 8008014:	1b92      	subs	r2, r2, r6
 8008016:	00d2      	lsls	r2, r2, #3
 8008018:	189b      	adds	r3, r3, r2
 800801a:	4a49      	ldr	r2, [pc, #292]	; (8008140 <BackEndTask+0x144>)
 800801c:	18d3      	adds	r3, r2, r3
 800801e:	5dda      	ldrb	r2, [r3, r7]
 8008020:	4b48      	ldr	r3, [pc, #288]	; (8008144 <BackEndTask+0x148>)
 8008022:	55da      	strb	r2, [r3, r7]
			for(int i=0;i<length;i++)
 8008024:	3101      	adds	r1, #1
 8008026:	002f      	movs	r7, r5
 8008028:	428d      	cmp	r5, r1
 800802a:	dcec      	bgt.n	8008006 <BackEndTask+0xa>
			}

			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 800802c:	1ce9      	adds	r1, r5, #3
 800802e:	4845      	ldr	r0, [pc, #276]	; (8008144 <BackEndTask+0x148>)
 8008030:	f003 fc36 	bl	800b8a0 <CalculateCRC8>
				length + 3);


			Message_counter++;
 8008034:	4a44      	ldr	r2, [pc, #272]	; (8008148 <BackEndTask+0x14c>)
 8008036:	8813      	ldrh	r3, [r2, #0]
 8008038:	3301      	adds	r3, #1
 800803a:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800803c:	4b43      	ldr	r3, [pc, #268]	; (800814c <BackEndTask+0x150>)
 800803e:	5d19      	ldrb	r1, [r3, r4]
 8008040:	3703      	adds	r7, #3
 8008042:	00cb      	lsls	r3, r1, #3
 8008044:	1a5b      	subs	r3, r3, r1
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	00a2      	lsls	r2, r4, #2
 800804a:	4694      	mov	ip, r2
 800804c:	44a4      	add	ip, r4
 800804e:	4662      	mov	r2, ip
 8008050:	00d2      	lsls	r2, r2, #3
 8008052:	4666      	mov	r6, ip
 8008054:	1b92      	subs	r2, r2, r6
 8008056:	00d2      	lsls	r2, r2, #3
 8008058:	189b      	adds	r3, r3, r2
 800805a:	4a39      	ldr	r2, [pc, #228]	; (8008140 <BackEndTask+0x144>)
 800805c:	18d3      	adds	r3, r2, r3
 800805e:	5ddb      	ldrb	r3, [r3, r7]
 8008060:	4283      	cmp	r3, r0
 8008062:	d037      	beq.n	80080d4 <BackEndTask+0xd8>


			}
			else
			{
				Rejected_Messages++;
 8008064:	4a3a      	ldr	r2, [pc, #232]	; (8008150 <BackEndTask+0x154>)
 8008066:	8813      	ldrh	r3, [r2, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	8013      	strh	r3, [r2, #0]
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
 800806c:	4a37      	ldr	r2, [pc, #220]	; (800814c <BackEndTask+0x150>)
 800806e:	5d13      	ldrb	r3, [r2, r4]
 8008070:	3301      	adds	r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	5513      	strb	r3, [r2, r4]
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 8008076:	2b05      	cmp	r3, #5
 8008078:	d059      	beq.n	800812e <BackEndTask+0x132>

			Process_Message_Buffer_Index_Start++;
 800807a:	4a36      	ldr	r2, [pc, #216]	; (8008154 <BackEndTask+0x158>)
 800807c:	7813      	ldrb	r3, [r2, #0]
 800807e:	3301      	adds	r3, #1
 8008080:	b2db      	uxtb	r3, r3
 8008082:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008084:	2b05      	cmp	r3, #5
 8008086:	d056      	beq.n	8008136 <BackEndTask+0x13a>
		}

		taskYIELD();
 8008088:	f007 fd9e 	bl	800fbc8 <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 800808c:	4b32      	ldr	r3, [pc, #200]	; (8008158 <BackEndTask+0x15c>)
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	4b30      	ldr	r3, [pc, #192]	; (8008154 <BackEndTask+0x158>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d0f7      	beq.n	8008088 <BackEndTask+0x8c>
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008098:	4a30      	ldr	r2, [pc, #192]	; (800815c <BackEndTask+0x160>)
 800809a:	5cd3      	ldrb	r3, [r2, r3]
 800809c:	4699      	mov	r9, r3
			port_index = port_number - 1;
 800809e:	1e5c      	subs	r4, r3, #1
 80080a0:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 80080a2:	4b2a      	ldr	r3, [pc, #168]	; (800814c <BackEndTask+0x150>)
 80080a4:	5d18      	ldrb	r0, [r3, r4]
 80080a6:	4f26      	ldr	r7, [pc, #152]	; (8008140 <BackEndTask+0x144>)
 80080a8:	00c3      	lsls	r3, r0, #3
 80080aa:	1a1b      	subs	r3, r3, r0
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	00a1      	lsls	r1, r4, #2
 80080b0:	1909      	adds	r1, r1, r4
 80080b2:	00ca      	lsls	r2, r1, #3
 80080b4:	1a52      	subs	r2, r2, r1
 80080b6:	00d2      	lsls	r2, r2, #3
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	2248      	movs	r2, #72	; 0x48
 80080bc:	55da      	strb	r2, [r3, r7]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 80080be:	18f9      	adds	r1, r7, r3
 80080c0:	3212      	adds	r2, #18
 80080c2:	704a      	strb	r2, [r1, #1]
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80080c4:	788d      	ldrb	r5, [r1, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 80080c6:	5dd9      	ldrb	r1, [r3, r7]
 80080c8:	4b1e      	ldr	r3, [pc, #120]	; (8008144 <BackEndTask+0x148>)
 80080ca:	7019      	strb	r1, [r3, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 80080cc:	705a      	strb	r2, [r3, #1]
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 80080ce:	709d      	strb	r5, [r3, #2]
			for(int i=0;i<length;i++)
 80080d0:	2100      	movs	r1, #0
 80080d2:	e7a8      	b.n	8008026 <BackEndTask+0x2a>
				Accepted_Messages++;
 80080d4:	4a22      	ldr	r2, [pc, #136]	; (8008160 <BackEndTask+0x164>)
 80080d6:	8813      	ldrh	r3, [r2, #0]
 80080d8:	3301      	adds	r3, #1
 80080da:	8013      	strh	r3, [r2, #0]
				messageLength[port_index] =length;
 80080dc:	4b21      	ldr	r3, [pc, #132]	; (8008164 <BackEndTask+0x168>)
 80080de:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 80080e0:	00e7      	lsls	r7, r4, #3
 80080e2:	1b38      	subs	r0, r7, r4
 80080e4:	00c0      	lsls	r0, r0, #3
 80080e6:	4b20      	ldr	r3, [pc, #128]	; (8008168 <BackEndTask+0x16c>)
 80080e8:	4698      	mov	r8, r3
 80080ea:	4440      	add	r0, r8
 80080ec:	00cb      	lsls	r3, r1, #3
 80080ee:	1a59      	subs	r1, r3, r1
 80080f0:	00c9      	lsls	r1, r1, #3
 80080f2:	00f3      	lsls	r3, r6, #3
 80080f4:	1b9b      	subs	r3, r3, r6
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	18c9      	adds	r1, r1, r3
 80080fa:	3103      	adds	r1, #3
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <BackEndTask+0x144>)
 80080fe:	18c9      	adds	r1, r1, r3
 8008100:	002a      	movs	r2, r5
 8008102:	f00b f809 	bl	8013118 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 8008106:	1b3f      	subs	r7, r7, r4
 8008108:	00ff      	lsls	r7, r7, #3
 800810a:	4643      	mov	r3, r8
 800810c:	5cfb      	ldrb	r3, [r7, r3]
 800810e:	4a17      	ldr	r2, [pc, #92]	; (800816c <BackEndTask+0x170>)
 8008110:	7812      	ldrb	r2, [r2, #0]
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <BackEndTask+0x122>
 8008116:	2bff      	cmp	r3, #255	; 0xff
 8008118:	d001      	beq.n	800811e <BackEndTask+0x122>
 800811a:	2bfe      	cmp	r3, #254	; 0xfe
 800811c:	d103      	bne.n	8008126 <BackEndTask+0x12a>
					NotifyMessagingTask(port_number);
 800811e:	4648      	mov	r0, r9
 8008120:	f7ff fc12 	bl	8007948 <NotifyMessagingTask>
 8008124:	e7a2      	b.n	800806c <BackEndTask+0x70>
					ForwardReceivedMessage(port_number);
 8008126:	4648      	mov	r0, r9
 8008128:	f7ff fe1e 	bl	8007d68 <ForwardReceivedMessage>
 800812c:	e79e      	b.n	800806c <BackEndTask+0x70>
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 800812e:	0013      	movs	r3, r2
 8008130:	2200      	movs	r2, #0
 8008132:	551a      	strb	r2, [r3, r4]
 8008134:	e7a1      	b.n	800807a <BackEndTask+0x7e>
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 8008136:	0013      	movs	r3, r2
 8008138:	2200      	movs	r2, #0
 800813a:	701a      	strb	r2, [r3, #0]
 800813c:	e7a4      	b.n	8008088 <BackEndTask+0x8c>
 800813e:	46c0      	nop			; (mov r8, r8)
 8008140:	2000031c 	.word	0x2000031c
 8008144:	20005864 	.word	0x20005864
 8008148:	20000e40 	.word	0x20000e40
 800814c:	20000668 	.word	0x20000668
 8008150:	20000e42 	.word	0x20000e42
 8008154:	20000676 	.word	0x20000676
 8008158:	20000675 	.word	0x20000675
 800815c:	20000670 	.word	0x20000670
 8008160:	20000e10 	.word	0x20000e10
 8008164:	20000804 	.word	0x20000804
 8008168:	200006b4 	.word	0x200006b4
 800816c:	20000084 	.word	0x20000084

08008170 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008170:	2001      	movs	r0, #1
 8008172:	4770      	bx	lr

08008174 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008176:	46de      	mov	lr, fp
 8008178:	4657      	mov	r7, sl
 800817a:	464e      	mov	r6, r9
 800817c:	4645      	mov	r5, r8
 800817e:	b5e0      	push	{r5, r6, r7, lr}
 8008180:	b08f      	sub	sp, #60	; 0x3c
 8008182:	2300      	movs	r3, #0
 8008184:	4699      	mov	r9, r3
 8008186:	469a      	mov	sl, r3
	port =(int8_t )(unsigned )argument;
 8008188:	4683      	mov	fp, r0
 800818a:	b2c3      	uxtb	r3, r0
 800818c:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	9309      	str	r3, [sp, #36]	; 0x24
	BOS_Status result =BOS_OK;
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	e062      	b.n	800825c <PxMessagingTask+0xe8>
				longMessage =1;
 8008196:	4ade      	ldr	r2, [pc, #888]	; (8008510 <PxMessagingTask+0x39c>)
 8008198:	2101      	movs	r1, #1
 800819a:	7011      	strb	r1, [r2, #0]
 800819c:	e078      	b.n	8008290 <PxMessagingTask+0x11c>
				code =cMessage[port - 1][3 + shift];
 800819e:	4643      	mov	r3, r8
 80081a0:	1cd9      	adds	r1, r3, #3
 80081a2:	00e3      	lsls	r3, r4, #3
 80081a4:	1b1b      	subs	r3, r3, r4
 80081a6:	00db      	lsls	r3, r3, #3
 80081a8:	48da      	ldr	r0, [pc, #872]	; (8008514 <PxMessagingTask+0x3a0>)
 80081aa:	18c3      	adds	r3, r0, r3
 80081ac:	5c5e      	ldrb	r6, [r3, r1]
 80081ae:	e0a2      	b.n	80082f6 <PxMessagingTask+0x182>
				BOSMessaging.Acknowledgment =false;
 80081b0:	4bd9      	ldr	r3, [pc, #868]	; (8008518 <PxMessagingTask+0x3a4>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 80081b6:	212c      	movs	r1, #44	; 0x2c
 80081b8:	4650      	mov	r0, sl
 80081ba:	f7ff fe3b 	bl	8007e34 <SendMessageToModule>
 80081be:	e09d      	b.n	80082fc <PxMessagingTask+0x188>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80081c0:	2bfc      	cmp	r3, #252	; 0xfc
 80081c2:	d805      	bhi.n	80081d0 <PxMessagingTask+0x5c>
 80081c4:	4bd5      	ldr	r3, [pc, #852]	; (800851c <PxMessagingTask+0x3a8>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	42bb      	cmp	r3, r7
 80081ca:	d001      	beq.n	80081d0 <PxMessagingTask+0x5c>
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d020      	beq.n	8008212 <PxMessagingTask+0x9e>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80081d0:	2fff      	cmp	r7, #255	; 0xff
 80081d2:	d100      	bne.n	80081d6 <PxMessagingTask+0x62>
 80081d4:	e0c5      	b.n	8008362 <PxMessagingTask+0x1ee>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 80081d6:	2fff      	cmp	r7, #255	; 0xff
 80081d8:	d100      	bne.n	80081dc <PxMessagingTask+0x68>
 80081da:	e0e5      	b.n	80083a8 <PxMessagingTask+0x234>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80081dc:	2ffe      	cmp	r7, #254	; 0xfe
 80081de:	d100      	bne.n	80081e2 <PxMessagingTask+0x6e>
 80081e0:	e0f3      	b.n	80083ca <PxMessagingTask+0x256>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 80081e2:	2ffe      	cmp	r7, #254	; 0xfe
 80081e4:	d100      	bne.n	80081e8 <PxMessagingTask+0x74>
 80081e6:	e12e      	b.n	8008446 <PxMessagingTask+0x2d2>
				shift +=4;
 80081e8:	4643      	mov	r3, r8
 80081ea:	3304      	adds	r3, #4
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	4698      	mov	r8, r3
				numOfParams =messageLength[port - 1] - shift;
 80081f0:	4bcb      	ldr	r3, [pc, #812]	; (8008520 <PxMessagingTask+0x3ac>)
 80081f2:	5d19      	ldrb	r1, [r3, r4]
 80081f4:	4643      	mov	r3, r8
 80081f6:	1aca      	subs	r2, r1, r3
 80081f8:	b2d3      	uxtb	r3, r2
 80081fa:	9306      	str	r3, [sp, #24]
				if(result == BOS_OK){
 80081fc:	9b05      	ldr	r3, [sp, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d110      	bne.n	8008224 <PxMessagingTask+0xb0>
					switch(code){
 8008202:	2e2d      	cmp	r6, #45	; 0x2d
 8008204:	d901      	bls.n	800820a <PxMessagingTask+0x96>
 8008206:	f001 fc95 	bl	8009b34 <PxMessagingTask+0x19c0>
 800820a:	00b3      	lsls	r3, r6, #2
 800820c:	4ac5      	ldr	r2, [pc, #788]	; (8008524 <PxMessagingTask+0x3b0>)
 800820e:	58d3      	ldr	r3, [r2, r3]
 8008210:	469f      	mov	pc, r3
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008212:	2e10      	cmp	r6, #16
 8008214:	d17f      	bne.n	8008316 <PxMessagingTask+0x1a2>
 8008216:	e7db      	b.n	80081d0 <PxMessagingTask+0x5c>
				if(code == CODE_UPDATE){ // Remote bootloader update
 8008218:	2e19      	cmp	r6, #25
 800821a:	d100      	bne.n	800821e <PxMessagingTask+0xaa>
 800821c:	e087      	b.n	800832e <PxMessagingTask+0x1ba>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800821e:	2e1a      	cmp	r6, #26
 8008220:	d100      	bne.n	8008224 <PxMessagingTask+0xb0>
 8008222:	e08e      	b.n	8008342 <PxMessagingTask+0x1ce>
		if(result == BOS_ERR_UnknownMessage){
 8008224:	9b05      	ldr	r3, [sp, #20]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <PxMessagingTask+0xba>
 800822a:	f001 fc9b 	bl	8009b64 <PxMessagingTask+0x19f0>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800822e:	00e0      	lsls	r0, r4, #3
 8008230:	1b00      	subs	r0, r0, r4
 8008232:	00c0      	lsls	r0, r0, #3
 8008234:	4bb7      	ldr	r3, [pc, #732]	; (8008514 <PxMessagingTask+0x3a0>)
 8008236:	18c0      	adds	r0, r0, r3
 8008238:	4eb9      	ldr	r6, [pc, #740]	; (8008520 <PxMessagingTask+0x3ac>)
 800823a:	5d32      	ldrb	r2, [r6, r4]
 800823c:	2100      	movs	r1, #0
 800823e:	f00a ff74 	bl	801312a <memset>
		messageLength[port - 1] =0;
 8008242:	2300      	movs	r3, #0
 8008244:	5533      	strb	r3, [r6, r4]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 8008246:	4bb8      	ldr	r3, [pc, #736]	; (8008528 <PxMessagingTask+0x3b4>)
 8008248:	5d5b      	ldrb	r3, [r3, r5]
 800824a:	3b02      	subs	r3, #2
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d902      	bls.n	8008258 <PxMessagingTask+0xe4>
			portStatus[port] =FREE;
 8008252:	4bb5      	ldr	r3, [pc, #724]	; (8008528 <PxMessagingTask+0x3b4>)
 8008254:	2200      	movs	r2, #0
 8008256:	555a      	strb	r2, [r3, r5]
		taskYIELD();
 8008258:	f007 fcb6 	bl	800fbc8 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800825c:	2101      	movs	r1, #1
 800825e:	4249      	negs	r1, r1
 8008260:	2001      	movs	r0, #1
 8008262:	f007 f9e7 	bl	800f634 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 8008266:	25ff      	movs	r5, #255	; 0xff
 8008268:	465b      	mov	r3, fp
 800826a:	401d      	ands	r5, r3
 800826c:	1e6c      	subs	r4, r5, #1
 800826e:	4bac      	ldr	r3, [pc, #688]	; (8008520 <PxMessagingTask+0x3ac>)
 8008270:	5d1b      	ldrb	r3, [r3, r4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0d6      	beq.n	8008224 <PxMessagingTask+0xb0>
			if(cMessage[port - 1][2] >> 7){
 8008276:	00e3      	lsls	r3, r4, #3
 8008278:	1b1b      	subs	r3, r3, r4
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	4aa5      	ldr	r2, [pc, #660]	; (8008514 <PxMessagingTask+0x3a0>)
 800827e:	18d2      	adds	r2, r2, r3
 8008280:	7893      	ldrb	r3, [r2, #2]
 8008282:	7892      	ldrb	r2, [r2, #2]
 8008284:	b252      	sxtb	r2, r2
 8008286:	2a00      	cmp	r2, #0
 8008288:	db85      	blt.n	8008196 <PxMessagingTask+0x22>
				longMessage =0;
 800828a:	4aa1      	ldr	r2, [pc, #644]	; (8008510 <PxMessagingTask+0x39c>)
 800828c:	2100      	movs	r1, #0
 800828e:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 8008290:	49a0      	ldr	r1, [pc, #640]	; (8008514 <PxMessagingTask+0x3a0>)
 8008292:	00e2      	lsls	r2, r4, #3
 8008294:	1b10      	subs	r0, r2, r4
 8008296:	00c0      	lsls	r0, r0, #3
 8008298:	5c47      	ldrb	r7, [r0, r1]
			src =cMessage[port - 1][1];
 800829a:	180a      	adds	r2, r1, r0
 800829c:	7852      	ldrb	r2, [r2, #1]
 800829e:	4692      	mov	sl, r2
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 80082a0:	2201      	movs	r2, #1
 80082a2:	0011      	movs	r1, r2
 80082a4:	4019      	ands	r1, r3
 80082a6:	4688      	mov	r8, r1
 80082a8:	421a      	tst	r2, r3
 80082aa:	d000      	beq.n	80082ae <PxMessagingTask+0x13a>
				++shift;
 80082ac:	4690      	mov	r8, r2
			extendCode =(cMessage[port - 1][2] >> 1) & 0x01; 					// 2nd bit Extended code
 80082ae:	085a      	lsrs	r2, r3, #1
 80082b0:	4694      	mov	ip, r2
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80082b2:	0899      	lsrs	r1, r3, #2
 80082b4:	2203      	movs	r2, #3
 80082b6:	400a      	ands	r2, r1
 80082b8:	4997      	ldr	r1, [pc, #604]	; (8008518 <PxMessagingTask+0x3a4>)
 80082ba:	704a      	strb	r2, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 80082bc:	091a      	lsrs	r2, r3, #4
 80082be:	2601      	movs	r6, #1
 80082c0:	4032      	ands	r2, r6
 80082c2:	70ca      	strb	r2, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 80082c4:	2060      	movs	r0, #96	; 0x60
 80082c6:	4003      	ands	r3, r0
 80082c8:	700b      	strb	r3, [r1, #0]
			if(extendCode == true){
 80082ca:	4663      	mov	r3, ip
 80082cc:	421e      	tst	r6, r3
 80082ce:	d100      	bne.n	80082d2 <PxMessagingTask+0x15e>
 80082d0:	e765      	b.n	800819e <PxMessagingTask+0x2a>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 80082d2:	4643      	mov	r3, r8
 80082d4:	1d19      	adds	r1, r3, #4
 80082d6:	00e3      	lsls	r3, r4, #3
 80082d8:	1b1b      	subs	r3, r3, r4
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	488d      	ldr	r0, [pc, #564]	; (8008514 <PxMessagingTask+0x3a0>)
 80082de:	18c3      	adds	r3, r0, r3
 80082e0:	5c5e      	ldrb	r6, [r3, r1]
 80082e2:	0236      	lsls	r6, r6, #8
 80082e4:	4641      	mov	r1, r8
 80082e6:	3103      	adds	r1, #3
 80082e8:	5c5b      	ldrb	r3, [r3, r1]
 80082ea:	18f6      	adds	r6, r6, r3
 80082ec:	b2b6      	uxth	r6, r6
				++shift;
 80082ee:	4643      	mov	r3, r8
 80082f0:	3301      	adds	r3, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	4698      	mov	r8, r3
			if(true == BOSMessaging.received_Acknowledgment){
 80082f6:	2a00      	cmp	r2, #0
 80082f8:	d000      	beq.n	80082fc <PxMessagingTask+0x188>
 80082fa:	e759      	b.n	80081b0 <PxMessagingTask+0x3c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 80082fc:	1e7b      	subs	r3, r7, #1
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2bfc      	cmp	r3, #252	; 0xfc
 8008302:	d900      	bls.n	8008306 <PxMessagingTask+0x192>
 8008304:	e75c      	b.n	80081c0 <PxMessagingTask+0x4c>
 8008306:	4a85      	ldr	r2, [pc, #532]	; (800851c <PxMessagingTask+0x3a8>)
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	42ba      	cmp	r2, r7
 800830c:	d100      	bne.n	8008310 <PxMessagingTask+0x19c>
 800830e:	e757      	b.n	80081c0 <PxMessagingTask+0x4c>
 8008310:	2a01      	cmp	r2, #1
 8008312:	d100      	bne.n	8008316 <PxMessagingTask+0x1a2>
 8008314:	e754      	b.n	80081c0 <PxMessagingTask+0x4c>
				ForwardReceivedMessage(port);
 8008316:	9807      	ldr	r0, [sp, #28]
 8008318:	f7ff fd26 	bl	8007d68 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800831c:	4b7e      	ldr	r3, [pc, #504]	; (8008518 <PxMessagingTask+0x3a4>)
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d100      	bne.n	8008326 <PxMessagingTask+0x1b2>
 8008324:	e778      	b.n	8008218 <PxMessagingTask+0xa4>
					indMode =IND_SHORT_BLINK;
 8008326:	4b81      	ldr	r3, [pc, #516]	; (800852c <PxMessagingTask+0x3b8>)
 8008328:	2203      	movs	r2, #3
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	e774      	b.n	8008218 <PxMessagingTask+0xa4>
					Delay_ms(100);
 800832e:	2064      	movs	r0, #100	; 0x64
 8008330:	f007 fdc4 	bl	800febc <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008334:	2300      	movs	r3, #0
 8008336:	9a07      	ldr	r2, [sp, #28]
 8008338:	0039      	movs	r1, r7
 800833a:	4650      	mov	r0, sl
 800833c:	f001 fea0 	bl	800a080 <remoteBootloaderUpdate>
 8008340:	e770      	b.n	8008224 <PxMessagingTask+0xb0>
					Delay_ms(100);
 8008342:	2064      	movs	r0, #100	; 0x64
 8008344:	f007 fdba 	bl	800febc <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 8008348:	00e3      	lsls	r3, r4, #3
 800834a:	1b1b      	subs	r3, r3, r4
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	4a71      	ldr	r2, [pc, #452]	; (8008514 <PxMessagingTask+0x3a0>)
 8008350:	18d3      	adds	r3, r2, r3
 8008352:	4642      	mov	r2, r8
 8008354:	5c9b      	ldrb	r3, [r3, r2]
 8008356:	9a07      	ldr	r2, [sp, #28]
 8008358:	0039      	movs	r1, r7
 800835a:	4650      	mov	r0, sl
 800835c:	f001 fe90 	bl	800a080 <remoteBootloaderUpdate>
 8008360:	e760      	b.n	8008224 <PxMessagingTask+0xb0>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008362:	4b6f      	ldr	r3, [pc, #444]	; (8008520 <PxMessagingTask+0x3ac>)
 8008364:	5d1a      	ldrb	r2, [r3, r4]
 8008366:	3a01      	subs	r2, #1
 8008368:	00e3      	lsls	r3, r4, #3
 800836a:	1b1b      	subs	r3, r3, r4
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	4969      	ldr	r1, [pc, #420]	; (8008514 <PxMessagingTask+0x3a0>)
 8008370:	18cb      	adds	r3, r1, r3
 8008372:	5c9b      	ldrb	r3, [r3, r2]
 8008374:	4a6e      	ldr	r2, [pc, #440]	; (8008530 <PxMessagingTask+0x3bc>)
 8008376:	7812      	ldrb	r2, [r2, #0]
 8008378:	4293      	cmp	r3, r2
 800837a:	d100      	bne.n	800837e <PxMessagingTask+0x20a>
 800837c:	e72b      	b.n	80081d6 <PxMessagingTask+0x62>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800837e:	4a6c      	ldr	r2, [pc, #432]	; (8008530 <PxMessagingTask+0x3bc>)
 8008380:	7013      	strb	r3, [r2, #0]
 8008382:	4a6c      	ldr	r2, [pc, #432]	; (8008534 <PxMessagingTask+0x3c0>)
 8008384:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008386:	9907      	ldr	r1, [sp, #28]
 8008388:	20ff      	movs	r0, #255	; 0xff
 800838a:	f7ff fd0b 	bl	8007da4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800838e:	4b64      	ldr	r3, [pc, #400]	; (8008520 <PxMessagingTask+0x3ac>)
 8008390:	5d1a      	ldrb	r2, [r3, r4]
 8008392:	3a01      	subs	r2, #1
 8008394:	00e3      	lsls	r3, r4, #3
 8008396:	1b1b      	subs	r3, r3, r4
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	495e      	ldr	r1, [pc, #376]	; (8008514 <PxMessagingTask+0x3a0>)
 800839c:	18cb      	adds	r3, r1, r3
 800839e:	2100      	movs	r1, #0
 80083a0:	5499      	strb	r1, [r3, r2]
					result =BOS_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	9305      	str	r3, [sp, #20]
 80083a6:	e719      	b.n	80081dc <PxMessagingTask+0x68>
				else if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 80083a8:	4b5d      	ldr	r3, [pc, #372]	; (8008520 <PxMessagingTask+0x3ac>)
 80083aa:	5d1a      	ldrb	r2, [r3, r4]
 80083ac:	3a01      	subs	r2, #1
 80083ae:	00e3      	lsls	r3, r4, #3
 80083b0:	1b1b      	subs	r3, r3, r4
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4957      	ldr	r1, [pc, #348]	; (8008514 <PxMessagingTask+0x3a0>)
 80083b6:	18cb      	adds	r3, r1, r3
 80083b8:	5c9a      	ldrb	r2, [r3, r2]
 80083ba:	4b5d      	ldr	r3, [pc, #372]	; (8008530 <PxMessagingTask+0x3bc>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d000      	beq.n	80083c4 <PxMessagingTask+0x250>
 80083c2:	e70b      	b.n	80081dc <PxMessagingTask+0x68>
					result =BOS_ERR_MSG_Reflection;
 80083c4:	2303      	movs	r3, #3
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	e708      	b.n	80081dc <PxMessagingTask+0x68>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 80083ca:	4b55      	ldr	r3, [pc, #340]	; (8008520 <PxMessagingTask+0x3ac>)
 80083cc:	5d1a      	ldrb	r2, [r3, r4]
 80083ce:	3a01      	subs	r2, #1
 80083d0:	00e3      	lsls	r3, r4, #3
 80083d2:	1b1b      	subs	r3, r3, r4
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	494f      	ldr	r1, [pc, #316]	; (8008514 <PxMessagingTask+0x3a0>)
 80083d8:	18cb      	adds	r3, r1, r3
 80083da:	5c9b      	ldrb	r3, [r3, r2]
 80083dc:	4a54      	ldr	r2, [pc, #336]	; (8008530 <PxMessagingTask+0x3bc>)
 80083de:	7812      	ldrb	r2, [r2, #0]
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <PxMessagingTask+0x272>
 80083e4:	e6fd      	b.n	80081e2 <PxMessagingTask+0x6e>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 80083e6:	4a52      	ldr	r2, [pc, #328]	; (8008530 <PxMessagingTask+0x3bc>)
 80083e8:	7013      	strb	r3, [r2, #0]
 80083ea:	4a52      	ldr	r2, [pc, #328]	; (8008534 <PxMessagingTask+0x3c0>)
 80083ec:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 80083ee:	9907      	ldr	r1, [sp, #28]
 80083f0:	20fe      	movs	r0, #254	; 0xfe
 80083f2:	f7ff fcd7 	bl	8007da4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 80083f6:	4b4a      	ldr	r3, [pc, #296]	; (8008520 <PxMessagingTask+0x3ac>)
 80083f8:	5d18      	ldrb	r0, [r3, r4]
 80083fa:	1e42      	subs	r2, r0, #1
 80083fc:	00e3      	lsls	r3, r4, #3
 80083fe:	1b1b      	subs	r3, r3, r4
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	4944      	ldr	r1, [pc, #272]	; (8008514 <PxMessagingTask+0x3a0>)
 8008404:	18cb      	adds	r3, r1, r3
 8008406:	2100      	movs	r1, #0
 8008408:	5499      	strb	r1, [r3, r2]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800840a:	3802      	subs	r0, #2
 800840c:	5c1b      	ldrb	r3, [r3, r0]
					for(i =0; i < temp; i++){
 800840e:	2200      	movs	r2, #0
 8008410:	46ac      	mov	ip, r5
 8008412:	0005      	movs	r5, r0
 8008414:	0018      	movs	r0, r3
 8008416:	46b1      	mov	r9, r6
 8008418:	4282      	cmp	r2, r0
 800841a:	d20e      	bcs.n	800843a <PxMessagingTask+0x2c6>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800841c:	1a29      	subs	r1, r5, r0
 800841e:	1851      	adds	r1, r2, r1
 8008420:	00e3      	lsls	r3, r4, #3
 8008422:	1b1b      	subs	r3, r3, r4
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4e3b      	ldr	r6, [pc, #236]	; (8008514 <PxMessagingTask+0x3a0>)
 8008428:	18f3      	adds	r3, r6, r3
 800842a:	5c59      	ldrb	r1, [r3, r1]
 800842c:	4b3b      	ldr	r3, [pc, #236]	; (800851c <PxMessagingTask+0x3a8>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	4299      	cmp	r1, r3
 8008432:	d019      	beq.n	8008468 <PxMessagingTask+0x2f4>
					for(i =0; i < temp; i++){
 8008434:	3201      	adds	r2, #1
 8008436:	b2d2      	uxtb	r2, r2
 8008438:	e7ee      	b.n	8008418 <PxMessagingTask+0x2a4>
 800843a:	464e      	mov	r6, r9
 800843c:	4681      	mov	r9, r0
 800843e:	4665      	mov	r5, ip
					result =BOS_ERR_WrongID;
 8008440:	2366      	movs	r3, #102	; 0x66
 8008442:	9305      	str	r3, [sp, #20]
 8008444:	e6d0      	b.n	80081e8 <PxMessagingTask+0x74>
				else if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] == bcastLastID){
 8008446:	4b36      	ldr	r3, [pc, #216]	; (8008520 <PxMessagingTask+0x3ac>)
 8008448:	5d1a      	ldrb	r2, [r3, r4]
 800844a:	3a01      	subs	r2, #1
 800844c:	00e3      	lsls	r3, r4, #3
 800844e:	1b1b      	subs	r3, r3, r4
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	4930      	ldr	r1, [pc, #192]	; (8008514 <PxMessagingTask+0x3a0>)
 8008454:	18cb      	adds	r3, r1, r3
 8008456:	5c9a      	ldrb	r2, [r3, r2]
 8008458:	4b35      	ldr	r3, [pc, #212]	; (8008530 <PxMessagingTask+0x3bc>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	429a      	cmp	r2, r3
 800845e:	d000      	beq.n	8008462 <PxMessagingTask+0x2ee>
 8008460:	e6c2      	b.n	80081e8 <PxMessagingTask+0x74>
					result =BOS_ERR_MSG_Reflection;
 8008462:	2303      	movs	r3, #3
 8008464:	9305      	str	r3, [sp, #20]
 8008466:	e6bf      	b.n	80081e8 <PxMessagingTask+0x74>
 8008468:	464e      	mov	r6, r9
 800846a:	4681      	mov	r9, r0
 800846c:	4665      	mov	r5, ip
							result =BOS_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	9305      	str	r3, [sp, #20]
 8008472:	e6b9      	b.n	80081e8 <PxMessagingTask+0x74>
							indMode =IND_PING;
 8008474:	4b2d      	ldr	r3, [pc, #180]	; (800852c <PxMessagingTask+0x3b8>)
 8008476:	2201      	movs	r2, #1
 8008478:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800847a:	200a      	movs	r0, #10
 800847c:	f005 fd96 	bl	800dfac <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 8008480:	4b25      	ldr	r3, [pc, #148]	; (8008518 <PxMessagingTask+0x3a4>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b60      	cmp	r3, #96	; 0x60
 8008486:	d002      	beq.n	800848e <PxMessagingTask+0x31a>
 8008488:	2b20      	cmp	r3, #32
 800848a:	d000      	beq.n	800848e <PxMessagingTask+0x31a>
 800848c:	e6ca      	b.n	8008224 <PxMessagingTask+0xb0>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800848e:	2200      	movs	r2, #0
 8008490:	2102      	movs	r1, #2
 8008492:	4650      	mov	r0, sl
 8008494:	f7ff fcce 	bl	8007e34 <SendMessageToModule>
 8008498:	e6c4      	b.n	8008224 <PxMessagingTask+0xb0>
							if(!moduleAlias[myID][0])
 800849a:	4b20      	ldr	r3, [pc, #128]	; (800851c <PxMessagingTask+0x3a8>)
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	0093      	lsls	r3, r2, #2
 80084a0:	189b      	adds	r3, r3, r2
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	4a24      	ldr	r2, [pc, #144]	; (8008538 <PxMessagingTask+0x3c4>)
 80084a6:	5c9b      	ldrb	r3, [r3, r2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d116      	bne.n	80084da <PxMessagingTask+0x366>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 80084ac:	4652      	mov	r2, sl
 80084ae:	4923      	ldr	r1, [pc, #140]	; (800853c <PxMessagingTask+0x3c8>)
 80084b0:	4823      	ldr	r0, [pc, #140]	; (8008540 <PxMessagingTask+0x3cc>)
 80084b2:	f00b fbf3 	bl	8013c9c <siprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 80084b6:	4e22      	ldr	r6, [pc, #136]	; (8008540 <PxMessagingTask+0x3cc>)
 80084b8:	0030      	movs	r0, r6
 80084ba:	f7f7 fe2d 	bl	8000118 <strlen>
 80084be:	b282      	uxth	r2, r0
 80084c0:	4b20      	ldr	r3, [pc, #128]	; (8008544 <PxMessagingTask+0x3d0>)
 80084c2:	7818      	ldrb	r0, [r3, #0]
 80084c4:	2301      	movs	r3, #1
 80084c6:	425b      	negs	r3, r3
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	3333      	adds	r3, #51	; 0x33
 80084cc:	0031      	movs	r1, r6
 80084ce:	f005 fc0f 	bl	800dcf0 <writePxMutex>
							responseStatus =BOS_OK;
 80084d2:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <PxMessagingTask+0x3d4>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
							break;
 80084d8:	e6a4      	b.n	8008224 <PxMessagingTask+0xb0>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 80084da:	230a      	movs	r3, #10
 80084dc:	4652      	mov	r2, sl
 80084de:	4353      	muls	r3, r2
 80084e0:	4a15      	ldr	r2, [pc, #84]	; (8008538 <PxMessagingTask+0x3c4>)
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	4652      	mov	r2, sl
 80084e6:	4919      	ldr	r1, [pc, #100]	; (800854c <PxMessagingTask+0x3d8>)
 80084e8:	4815      	ldr	r0, [pc, #84]	; (8008540 <PxMessagingTask+0x3cc>)
 80084ea:	f00b fbd7 	bl	8013c9c <siprintf>
 80084ee:	e7e2      	b.n	80084b6 <PxMessagingTask+0x342>
							IND_ON();
 80084f0:	2180      	movs	r1, #128	; 0x80
 80084f2:	2090      	movs	r0, #144	; 0x90
 80084f4:	2201      	movs	r2, #1
 80084f6:	0109      	lsls	r1, r1, #4
 80084f8:	05c0      	lsls	r0, r0, #23
 80084fa:	f009 f8e4 	bl	80116c6 <HAL_GPIO_WritePin>
							break;
 80084fe:	e691      	b.n	8008224 <PxMessagingTask+0xb0>
							IND_OFF();
 8008500:	2180      	movs	r1, #128	; 0x80
 8008502:	2090      	movs	r0, #144	; 0x90
 8008504:	2200      	movs	r2, #0
 8008506:	0109      	lsls	r1, r1, #4
 8008508:	05c0      	lsls	r0, r0, #23
 800850a:	f009 f8dc 	bl	80116c6 <HAL_GPIO_WritePin>
							break;
 800850e:	e689      	b.n	8008224 <PxMessagingTask+0xb0>
 8008510:	200007c9 	.word	0x200007c9
 8008514:	200006b4 	.word	0x200006b4
 8008518:	20005714 	.word	0x20005714
 800851c:	20000084 	.word	0x20000084
 8008520:	20000804 	.word	0x20000804
 8008524:	0801a37c 	.word	0x0801a37c
 8008528:	200008b4 	.word	0x200008b4
 800852c:	200007c8 	.word	0x200007c8
 8008530:	20000e44 	.word	0x20000e44
 8008534:	20000678 	.word	0x20000678
 8008538:	20000838 	.word	0x20000838
 800853c:	0801940c 	.word	0x0801940c
 8008540:	20000f9c 	.word	0x20000f9c
 8008544:	2000066e 	.word	0x2000066e
 8008548:	200008d0 	.word	0x200008d0
 800854c:	08019420 	.word	0x08019420
							IND_toggle();
 8008550:	2180      	movs	r1, #128	; 0x80
 8008552:	2090      	movs	r0, #144	; 0x90
 8008554:	0109      	lsls	r1, r1, #4
 8008556:	05c0      	lsls	r0, r0, #23
 8008558:	f009 f8bb 	bl	80116d2 <HAL_GPIO_TogglePin>
							break;
 800855c:	e662      	b.n	8008224 <PxMessagingTask+0xb0>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800855e:	4653      	mov	r3, sl
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	4642      	mov	r2, r8
 8008564:	1c91      	adds	r1, r2, #2
 8008566:	00e2      	lsls	r2, r4, #3
 8008568:	1b12      	subs	r2, r2, r4
 800856a:	00d2      	lsls	r2, r2, #3
 800856c:	48d0      	ldr	r0, [pc, #832]	; (80088b0 <PxMessagingTask+0x73c>)
 800856e:	1880      	adds	r0, r0, r2
 8008570:	5c42      	ldrb	r2, [r0, r1]
 8008572:	189b      	adds	r3, r3, r2
 8008574:	49cf      	ldr	r1, [pc, #828]	; (80088b4 <PxMessagingTask+0x740>)
 8008576:	00a6      	lsls	r6, r4, #2
 8008578:	538b      	strh	r3, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800857a:	4643      	mov	r3, r8
 800857c:	5cc2      	ldrb	r2, [r0, r3]
 800857e:	0212      	lsls	r2, r2, #8
 8008580:	3301      	adds	r3, #1
 8008582:	5cc3      	ldrb	r3, [r0, r3]
 8008584:	18d2      	adds	r2, r2, r3
 8008586:	1989      	adds	r1, r1, r6
 8008588:	804a      	strh	r2, [r1, #2]
							messageParams[1] =(uint8_t )myPN;
 800858a:	4bcb      	ldr	r3, [pc, #812]	; (80088b8 <PxMessagingTask+0x744>)
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	7819      	ldrb	r1, [r3, #0]
 8008590:	4bca      	ldr	r3, [pc, #808]	; (80088bc <PxMessagingTask+0x748>)
 8008592:	7059      	strb	r1, [r3, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008594:	0a12      	lsrs	r2, r2, #8
 8008596:	701a      	strb	r2, [r3, #0]
							messageParams[2] =port;
 8008598:	9e07      	ldr	r6, [sp, #28]
 800859a:	709e      	strb	r6, [r3, #2]
							osDelay(2);
 800859c:	2002      	movs	r0, #2
 800859e:	f005 fd05 	bl	800dfac <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 80085a2:	2303      	movs	r3, #3
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	0030      	movs	r0, r6
 80085ae:	f7ff f9f1 	bl	8007994 <SendMessageFromPort>
							break;
 80085b2:	e637      	b.n	8008224 <PxMessagingTask+0xb0>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 80085b4:	4653      	mov	r3, sl
 80085b6:	021b      	lsls	r3, r3, #8
 80085b8:	4642      	mov	r2, r8
 80085ba:	1c91      	adds	r1, r2, #2
 80085bc:	00e2      	lsls	r2, r4, #3
 80085be:	1b12      	subs	r2, r2, r4
 80085c0:	00d2      	lsls	r2, r2, #3
 80085c2:	48bb      	ldr	r0, [pc, #748]	; (80088b0 <PxMessagingTask+0x73c>)
 80085c4:	1880      	adds	r0, r0, r2
 80085c6:	5c42      	ldrb	r2, [r0, r1]
 80085c8:	189b      	adds	r3, r3, r2
 80085ca:	49ba      	ldr	r1, [pc, #744]	; (80088b4 <PxMessagingTask+0x740>)
 80085cc:	00a6      	lsls	r6, r4, #2
 80085ce:	538b      	strh	r3, [r1, r6]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 80085d0:	4643      	mov	r3, r8
 80085d2:	5cc2      	ldrb	r2, [r0, r3]
 80085d4:	0212      	lsls	r2, r2, #8
 80085d6:	3301      	adds	r3, #1
 80085d8:	5cc3      	ldrb	r3, [r0, r3]
 80085da:	18d2      	adds	r2, r2, r3
 80085dc:	1989      	adds	r1, r1, r6
 80085de:	804a      	strh	r2, [r1, #2]
							responseStatus =BOS_OK;
 80085e0:	4bb7      	ldr	r3, [pc, #732]	; (80088c0 <PxMessagingTask+0x74c>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
							break;
 80085e6:	e61d      	b.n	8008224 <PxMessagingTask+0xb0>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 80085e8:	3601      	adds	r6, #1
 80085ea:	b2f6      	uxtb	r6, r6
 80085ec:	2e03      	cmp	r6, #3
 80085ee:	d813      	bhi.n	8008618 <PxMessagingTask+0x4a4>
								if(p != port)
 80085f0:	9b07      	ldr	r3, [sp, #28]
 80085f2:	429e      	cmp	r6, r3
 80085f4:	d0f8      	beq.n	80085e8 <PxMessagingTask+0x474>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 80085f6:	0030      	movs	r0, r6
 80085f8:	f005 fb66 	bl	800dcc8 <GetUart>
 80085fc:	19ba      	adds	r2, r7, r6
 80085fe:	3a01      	subs	r2, #1
 8008600:	00e3      	lsls	r3, r4, #3
 8008602:	1b1b      	subs	r3, r3, r4
 8008604:	00db      	lsls	r3, r3, #3
 8008606:	49aa      	ldr	r1, [pc, #680]	; (80088b0 <PxMessagingTask+0x73c>)
 8008608:	18cb      	adds	r3, r1, r3
 800860a:	5c99      	ldrb	r1, [r3, r2]
 800860c:	f005 fbca 	bl	800dda4 <SwapUartPins>
 8008610:	e7ea      	b.n	80085e8 <PxMessagingTask+0x474>
				if(result == BOS_OK){
 8008612:	2601      	movs	r6, #1
 8008614:	4647      	mov	r7, r8
 8008616:	e7e9      	b.n	80085ec <PxMessagingTask+0x478>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008618:	9807      	ldr	r0, [sp, #28]
 800861a:	f005 fb55 	bl	800dcc8 <GetUart>
 800861e:	003a      	movs	r2, r7
 8008620:	320a      	adds	r2, #10
 8008622:	00e3      	lsls	r3, r4, #3
 8008624:	1b1b      	subs	r3, r3, r4
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	49a1      	ldr	r1, [pc, #644]	; (80088b0 <PxMessagingTask+0x73c>)
 800862a:	18cb      	adds	r3, r1, r3
 800862c:	5c99      	ldrb	r1, [r3, r2]
 800862e:	f005 fbb9 	bl	800dda4 <SwapUartPins>
							break;
 8008632:	e5f7      	b.n	8008224 <PxMessagingTask+0xb0>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008634:	00e3      	lsls	r3, r4, #3
 8008636:	1b1b      	subs	r3, r3, r4
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	4a9d      	ldr	r2, [pc, #628]	; (80088b0 <PxMessagingTask+0x73c>)
 800863c:	18d3      	adds	r3, r2, r3
 800863e:	4642      	mov	r2, r8
 8008640:	5c9b      	ldrb	r3, [r3, r2]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <PxMessagingTask+0x4e6>
								myID =cMessage[port - 1][1 + shift];
 8008646:	4641      	mov	r1, r8
 8008648:	3101      	adds	r1, #1
 800864a:	2238      	movs	r2, #56	; 0x38
 800864c:	4362      	muls	r2, r4
 800864e:	4b98      	ldr	r3, [pc, #608]	; (80088b0 <PxMessagingTask+0x73c>)
 8008650:	189b      	adds	r3, r3, r2
 8008652:	5c5a      	ldrb	r2, [r3, r1]
 8008654:	4b9b      	ldr	r3, [pc, #620]	; (80088c4 <PxMessagingTask+0x750>)
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	e5e4      	b.n	8008224 <PxMessagingTask+0xb0>
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800865a:	2b01      	cmp	r3, #1
 800865c:	d000      	beq.n	8008660 <PxMessagingTask+0x4ec>
 800865e:	e5e1      	b.n	8008224 <PxMessagingTask+0xb0>
								messageParams[0] =0; /* change own ID */
 8008660:	4a96      	ldr	r2, [pc, #600]	; (80088bc <PxMessagingTask+0x748>)
 8008662:	2100      	movs	r1, #0
 8008664:	7011      	strb	r1, [r2, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8008666:	4643      	mov	r3, r8
 8008668:	1c58      	adds	r0, r3, #1
 800866a:	2338      	movs	r3, #56	; 0x38
 800866c:	4363      	muls	r3, r4
 800866e:	4e90      	ldr	r6, [pc, #576]	; (80088b0 <PxMessagingTask+0x73c>)
 8008670:	18f3      	adds	r3, r6, r3
 8008672:	5c18      	ldrb	r0, [r3, r0]
 8008674:	7050      	strb	r0, [r2, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8008676:	4642      	mov	r2, r8
 8008678:	3202      	adds	r2, #2
 800867a:	5c98      	ldrb	r0, [r3, r2]
 800867c:	2303      	movs	r3, #3
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	330d      	adds	r3, #13
 8008682:	000a      	movs	r2, r1
 8008684:	f7ff f986 	bl	8007994 <SendMessageFromPort>
 8008688:	e5cc      	b.n	8008224 <PxMessagingTask+0xb0>
							if(longMessage){
 800868a:	4b8f      	ldr	r3, [pc, #572]	; (80088c8 <PxMessagingTask+0x754>)
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d011      	beq.n	80086b6 <PxMessagingTask+0x542>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008692:	4e8e      	ldr	r6, [pc, #568]	; (80088cc <PxMessagingTask+0x758>)
 8008694:	8833      	ldrh	r3, [r6, #0]
 8008696:	488e      	ldr	r0, [pc, #568]	; (80088d0 <PxMessagingTask+0x75c>)
 8008698:	1818      	adds	r0, r3, r0
 800869a:	2138      	movs	r1, #56	; 0x38
 800869c:	4361      	muls	r1, r4
 800869e:	4441      	add	r1, r8
 80086a0:	4b83      	ldr	r3, [pc, #524]	; (80088b0 <PxMessagingTask+0x73c>)
 80086a2:	18c9      	adds	r1, r1, r3
 80086a4:	9f06      	ldr	r7, [sp, #24]
 80086a6:	003a      	movs	r2, r7
 80086a8:	f00a fd36 	bl	8013118 <memcpy>
								longMessageLastPtr +=numOfParams;
 80086ac:	8832      	ldrh	r2, [r6, #0]
 80086ae:	46bc      	mov	ip, r7
 80086b0:	4462      	add	r2, ip
 80086b2:	8032      	strh	r2, [r6, #0]
 80086b4:	e5b6      	b.n	8008224 <PxMessagingTask+0xb0>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80086b6:	4f85      	ldr	r7, [pc, #532]	; (80088cc <PxMessagingTask+0x758>)
 80086b8:	8838      	ldrh	r0, [r7, #0]
 80086ba:	4b85      	ldr	r3, [pc, #532]	; (80088d0 <PxMessagingTask+0x75c>)
 80086bc:	469c      	mov	ip, r3
 80086be:	4460      	add	r0, ip
 80086c0:	2138      	movs	r1, #56	; 0x38
 80086c2:	4361      	muls	r1, r4
 80086c4:	4441      	add	r1, r8
 80086c6:	4b7a      	ldr	r3, [pc, #488]	; (80088b0 <PxMessagingTask+0x73c>)
 80086c8:	18c9      	adds	r1, r1, r3
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	4698      	mov	r8, r3
 80086ce:	001a      	movs	r2, r3
 80086d0:	f00a fd22 	bl	8013118 <memcpy>
								longMessageLastPtr +=numOfParams;
 80086d4:	883e      	ldrh	r6, [r7, #0]
 80086d6:	4446      	add	r6, r8
 80086d8:	b2b6      	uxth	r6, r6
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 80086da:	2116      	movs	r1, #22
 80086dc:	0030      	movs	r0, r6
 80086de:	f7f7 fd37 	bl	8000150 <__udivsi3>
 80086e2:	4b7c      	ldr	r3, [pc, #496]	; (80088d4 <PxMessagingTask+0x760>)
 80086e4:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 80086e6:	0032      	movs	r2, r6
 80086e8:	4979      	ldr	r1, [pc, #484]	; (80088d0 <PxMessagingTask+0x75c>)
 80086ea:	487b      	ldr	r0, [pc, #492]	; (80088d8 <PxMessagingTask+0x764>)
 80086ec:	f00a fd14 	bl	8013118 <memcpy>
								longMessageLastPtr =0;
 80086f0:	2300      	movs	r3, #0
 80086f2:	803b      	strh	r3, [r7, #0]
 80086f4:	e596      	b.n	8008224 <PxMessagingTask+0xb0>
							ReadPortsDirMSG(src);
 80086f6:	4650      	mov	r0, sl
 80086f8:	f005 fbb6 	bl	800de68 <ReadPortsDirMSG>
								break;
 80086fc:	e592      	b.n	8008224 <PxMessagingTask+0xb0>
				if(result == BOS_OK){
 80086fe:	9b05      	ldr	r3, [sp, #20]
 8008700:	4657      	mov	r7, sl
							for(p =0; p < numOfParams; p++){
 8008702:	9a06      	ldr	r2, [sp, #24]
 8008704:	4293      	cmp	r3, r2
 8008706:	d214      	bcs.n	8008732 <PxMessagingTask+0x5be>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008708:	1e7a      	subs	r2, r7, #1
 800870a:	4641      	mov	r1, r8
 800870c:	18c8      	adds	r0, r1, r3
 800870e:	00e1      	lsls	r1, r4, #3
 8008710:	1b09      	subs	r1, r1, r4
 8008712:	00c9      	lsls	r1, r1, #3
 8008714:	4e66      	ldr	r6, [pc, #408]	; (80088b0 <PxMessagingTask+0x73c>)
 8008716:	1871      	adds	r1, r6, r1
 8008718:	5c08      	ldrb	r0, [r1, r0]
 800871a:	3801      	subs	r0, #1
 800871c:	2680      	movs	r6, #128	; 0x80
 800871e:	0236      	lsls	r6, r6, #8
 8008720:	4106      	asrs	r6, r0
 8008722:	486e      	ldr	r0, [pc, #440]	; (80088dc <PxMessagingTask+0x768>)
 8008724:	0052      	lsls	r2, r2, #1
 8008726:	5a11      	ldrh	r1, [r2, r0]
 8008728:	4331      	orrs	r1, r6
 800872a:	5211      	strh	r1, [r2, r0]
							for(p =0; p < numOfParams; p++){
 800872c:	3301      	adds	r3, #1
 800872e:	b2db      	uxtb	r3, r3
 8008730:	e7e7      	b.n	8008702 <PxMessagingTask+0x58e>
 8008732:	46ba      	mov	sl, r7
							responseStatus =BOS_OK;
 8008734:	4b62      	ldr	r3, [pc, #392]	; (80088c0 <PxMessagingTask+0x74c>)
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
							break;
 800873a:	e573      	b.n	8008224 <PxMessagingTask+0xb0>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800873c:	00e3      	lsls	r3, r4, #3
 800873e:	1b1b      	subs	r3, r3, r4
 8008740:	00db      	lsls	r3, r3, #3
 8008742:	4a5b      	ldr	r2, [pc, #364]	; (80088b0 <PxMessagingTask+0x73c>)
 8008744:	18d3      	adds	r3, r2, r3
 8008746:	4642      	mov	r2, r8
 8008748:	5c9f      	ldrb	r7, [r3, r2]
 800874a:	063f      	lsls	r7, r7, #24
 800874c:	3201      	adds	r2, #1
 800874e:	5c9a      	ldrb	r2, [r3, r2]
 8008750:	0412      	lsls	r2, r2, #16
 8008752:	18bf      	adds	r7, r7, r2
 8008754:	4642      	mov	r2, r8
 8008756:	3202      	adds	r2, #2
 8008758:	5c9a      	ldrb	r2, [r3, r2]
 800875a:	0212      	lsls	r2, r2, #8
 800875c:	18bf      	adds	r7, r7, r2
 800875e:	4642      	mov	r2, r8
 8008760:	3203      	adds	r2, #3
 8008762:	5c9a      	ldrb	r2, [r3, r2]
 8008764:	18ba      	adds	r2, r7, r2
 8008766:	9208      	str	r2, [sp, #32]
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008768:	4642      	mov	r2, r8
 800876a:	1d17      	adds	r7, r2, #4
 800876c:	5ddb      	ldrb	r3, [r3, r7]
 800876e:	2bff      	cmp	r3, #255	; 0xff
 8008770:	d007      	beq.n	8008782 <PxMessagingTask+0x60e>
								for(p =0; p < numOfParams; p++){
 8008772:	9b05      	ldr	r3, [sp, #20]
 8008774:	001e      	movs	r6, r3
 8008776:	46a8      	mov	r8, r5
 8008778:	003d      	movs	r5, r7
 800877a:	001f      	movs	r7, r3
 800877c:	9b06      	ldr	r3, [sp, #24]
 800877e:	4699      	mov	r9, r3
 8008780:	e00e      	b.n	80087a0 <PxMessagingTask+0x62c>
								for(p =1; p <= NumOfPorts; p++){
 8008782:	2601      	movs	r6, #1
 8008784:	2e03      	cmp	r6, #3
 8008786:	d806      	bhi.n	8008796 <PxMessagingTask+0x622>
									UpdateBaudrate(p,temp32);
 8008788:	9908      	ldr	r1, [sp, #32]
 800878a:	0030      	movs	r0, r6
 800878c:	f005 fb00 	bl	800dd90 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8008790:	3601      	adds	r6, #1
 8008792:	b2f6      	uxtb	r6, r6
 8008794:	e7f6      	b.n	8008784 <PxMessagingTask+0x610>
							temp =temp32 =0;
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	4699      	mov	r9, r3
 800879a:	e543      	b.n	8008224 <PxMessagingTask+0xb0>
								for(p =0; p < numOfParams; p++){
 800879c:	3601      	adds	r6, #1
 800879e:	b2f6      	uxtb	r6, r6
 80087a0:	454e      	cmp	r6, r9
 80087a2:	d20f      	bcs.n	80087c4 <PxMessagingTask+0x650>
									temp =cMessage[port - 1][4 + shift + p];
 80087a4:	1972      	adds	r2, r6, r5
 80087a6:	00e3      	lsls	r3, r4, #3
 80087a8:	1b1b      	subs	r3, r3, r4
 80087aa:	00db      	lsls	r3, r3, #3
 80087ac:	4940      	ldr	r1, [pc, #256]	; (80088b0 <PxMessagingTask+0x73c>)
 80087ae:	18cb      	adds	r3, r1, r3
 80087b0:	5c9f      	ldrb	r7, [r3, r2]
									if(temp > 0 && temp <= NumOfPorts){
 80087b2:	1e7b      	subs	r3, r7, #1
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d8f0      	bhi.n	800879c <PxMessagingTask+0x628>
										UpdateBaudrate(temp,temp32);
 80087ba:	9908      	ldr	r1, [sp, #32]
 80087bc:	0038      	movs	r0, r7
 80087be:	f005 fae7 	bl	800dd90 <UpdateBaudrate>
 80087c2:	e7eb      	b.n	800879c <PxMessagingTask+0x628>
 80087c4:	46b9      	mov	r9, r7
 80087c6:	4645      	mov	r5, r8
 80087c8:	e52c      	b.n	8008224 <PxMessagingTask+0xb0>
							SaveToRO();
 80087ca:	f001 fb4f 	bl	8009e6c <SaveToRO>
							SaveEEportsDir();
 80087ce:	f7fa fdb5 	bl	800333c <SaveEEportsDir>
							indMode =IND_PING;
 80087d2:	4b43      	ldr	r3, [pc, #268]	; (80088e0 <PxMessagingTask+0x76c>)
 80087d4:	2201      	movs	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
							break;
 80087d8:	e524      	b.n	8008224 <PxMessagingTask+0xb0>
							ClearEEportsDir();
 80087da:	f7fa fe89 	bl	80034f0 <ClearEEportsDir>
							osDelay(100);
 80087de:	2064      	movs	r0, #100	; 0x64
 80087e0:	f005 fbe4 	bl	800dfac <osDelay>
							indMode =IND_TOPOLOGY;
 80087e4:	4b3e      	ldr	r3, [pc, #248]	; (80088e0 <PxMessagingTask+0x76c>)
 80087e6:	2202      	movs	r2, #2
 80087e8:	701a      	strb	r2, [r3, #0]
							break;
 80087ea:	e51b      	b.n	8008224 <PxMessagingTask+0xb0>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80087ec:	f005 fcfa 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 80087f0:	0006      	movs	r6, r0
							if(dst == BOS_BROADCAST)
 80087f2:	2fff      	cmp	r7, #255	; 0xff
 80087f4:	d00e      	beq.n	8008814 <PxMessagingTask+0x6a0>
							else if(dst == BOS_MULTICAST)
 80087f6:	2ffe      	cmp	r7, #254	; 0xfe
 80087f8:	d01a      	beq.n	8008830 <PxMessagingTask+0x6bc>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 80087fa:	2138      	movs	r1, #56	; 0x38
 80087fc:	4361      	muls	r1, r4
 80087fe:	4441      	add	r1, r8
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <PxMessagingTask+0x73c>)
 8008802:	18c9      	adds	r1, r1, r3
 8008804:	9a06      	ldr	r2, [sp, #24]
 8008806:	4837      	ldr	r0, [pc, #220]	; (80088e4 <PxMessagingTask+0x770>)
 8008808:	f00a fc86 	bl	8013118 <memcpy>
 800880c:	46a0      	mov	r8, r4
 800880e:	46a9      	mov	r9, r5
 8008810:	0035      	movs	r5, r6
 8008812:	e01f      	b.n	8008854 <PxMessagingTask+0x6e0>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008814:	2138      	movs	r1, #56	; 0x38
 8008816:	4361      	muls	r1, r4
 8008818:	4441      	add	r1, r8
 800881a:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <PxMessagingTask+0x73c>)
 800881c:	18c9      	adds	r1, r1, r3
 800881e:	9a06      	ldr	r2, [sp, #24]
 8008820:	3a01      	subs	r2, #1
 8008822:	4830      	ldr	r0, [pc, #192]	; (80088e4 <PxMessagingTask+0x770>)
 8008824:	f00a fc78 	bl	8013118 <memcpy>
 8008828:	46a0      	mov	r8, r4
 800882a:	46a9      	mov	r9, r5
 800882c:	0035      	movs	r5, r6
 800882e:	e011      	b.n	8008854 <PxMessagingTask+0x6e0>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008830:	2138      	movs	r1, #56	; 0x38
 8008832:	4361      	muls	r1, r4
 8008834:	4441      	add	r1, r8
 8008836:	4b1e      	ldr	r3, [pc, #120]	; (80088b0 <PxMessagingTask+0x73c>)
 8008838:	18c9      	adds	r1, r1, r3
 800883a:	9b06      	ldr	r3, [sp, #24]
 800883c:	464a      	mov	r2, r9
 800883e:	1a9a      	subs	r2, r3, r2
 8008840:	3a02      	subs	r2, #2
 8008842:	4828      	ldr	r0, [pc, #160]	; (80088e4 <PxMessagingTask+0x770>)
 8008844:	f00a fc68 	bl	8013118 <memcpy>
 8008848:	46a0      	mov	r8, r4
 800884a:	46a9      	mov	r9, r5
 800884c:	0035      	movs	r5, r6
 800884e:	e001      	b.n	8008854 <PxMessagingTask+0x6e0>
							} while(xReturned != pdFALSE);
 8008850:	2f00      	cmp	r7, #0
 8008852:	d023      	beq.n	800889c <PxMessagingTask+0x728>
								temp =PcPort;
 8008854:	4e24      	ldr	r6, [pc, #144]	; (80088e8 <PxMessagingTask+0x774>)
 8008856:	7834      	ldrb	r4, [r6, #0]
								PcPort =port;
 8008858:	9b07      	ldr	r3, [sp, #28]
 800885a:	7033      	strb	r3, [r6, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800885c:	2299      	movs	r2, #153	; 0x99
 800885e:	0092      	lsls	r2, r2, #2
 8008860:	0029      	movs	r1, r5
 8008862:	4820      	ldr	r0, [pc, #128]	; (80088e4 <PxMessagingTask+0x770>)
 8008864:	f005 fc56 	bl	800e114 <FreeRTOS_CLIProcessCommand>
 8008868:	0007      	movs	r7, r0
								PcPort =temp;
 800886a:	7034      	strb	r4, [r6, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800886c:	4b1f      	ldr	r3, [pc, #124]	; (80088ec <PxMessagingTask+0x778>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b60      	cmp	r3, #96	; 0x60
 8008872:	d1ed      	bne.n	8008850 <PxMessagingTask+0x6dc>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008874:	0028      	movs	r0, r5
 8008876:	f7f7 fc4f 	bl	8000118 <strlen>
 800887a:	0002      	movs	r2, r0
 800887c:	0029      	movs	r1, r5
 800887e:	480f      	ldr	r0, [pc, #60]	; (80088bc <PxMessagingTask+0x748>)
 8008880:	f00a fc4a 	bl	8013118 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008884:	0028      	movs	r0, r5
 8008886:	f7f7 fc47 	bl	8000118 <strlen>
 800888a:	b282      	uxth	r2, r0
 800888c:	2118      	movs	r1, #24
 800888e:	4650      	mov	r0, sl
 8008890:	f7ff fad0 	bl	8007e34 <SendMessageToModule>
									osDelay(10);
 8008894:	200a      	movs	r0, #10
 8008896:	f005 fb89 	bl	800dfac <osDelay>
 800889a:	e7d9      	b.n	8008850 <PxMessagingTask+0x6dc>
 800889c:	464d      	mov	r5, r9
 800889e:	46a1      	mov	r9, r4
 80088a0:	4644      	mov	r4, r8
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 80088a2:	2232      	movs	r2, #50	; 0x32
 80088a4:	2100      	movs	r1, #0
 80088a6:	480f      	ldr	r0, [pc, #60]	; (80088e4 <PxMessagingTask+0x770>)
 80088a8:	f00a fc3f 	bl	801312a <memset>
							break;
 80088ac:	e4ba      	b.n	8008224 <PxMessagingTask+0xb0>
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	200006b4 	.word	0x200006b4
 80088b4:	20000858 	.word	0x20000858
 80088b8:	20000086 	.word	0x20000086
 80088bc:	20000808 	.word	0x20000808
 80088c0:	200008d0 	.word	0x200008d0
 80088c4:	20000084 	.word	0x20000084
 80088c8:	200007c9 	.word	0x200007c9
 80088cc:	200007ca 	.word	0x200007ca
 80088d0:	20000e7c 	.word	0x20000e7c
 80088d4:	20000030 	.word	0x20000030
 80088d8:	200000b8 	.word	0x200000b8
 80088dc:	20005c48 	.word	0x20005c48
 80088e0:	200007c8 	.word	0x200007c8
 80088e4:	20000e48 	.word	0x20000e48
 80088e8:	2000066e 	.word	0x2000066e
 80088ec:	20005714 	.word	0x20005714
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80088f0:	f005 fc78 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 80088f4:	0006      	movs	r6, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80088f6:	f7f7 fc0f 	bl	8000118 <strlen>
 80088fa:	0002      	movs	r2, r0
 80088fc:	2100      	movs	r1, #0
 80088fe:	0030      	movs	r0, r6
 8008900:	f00a fc13 	bl	801312a <memset>
							if(longMessage){
 8008904:	4be5      	ldr	r3, [pc, #916]	; (8008c9c <PxMessagingTask+0xb28>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d010      	beq.n	800892e <PxMessagingTask+0x7ba>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800890c:	4fe4      	ldr	r7, [pc, #912]	; (8008ca0 <PxMessagingTask+0xb2c>)
 800890e:	8838      	ldrh	r0, [r7, #0]
 8008910:	1830      	adds	r0, r6, r0
 8008912:	2138      	movs	r1, #56	; 0x38
 8008914:	4361      	muls	r1, r4
 8008916:	4441      	add	r1, r8
 8008918:	4be2      	ldr	r3, [pc, #904]	; (8008ca4 <PxMessagingTask+0xb30>)
 800891a:	18c9      	adds	r1, r1, r3
 800891c:	9e06      	ldr	r6, [sp, #24]
 800891e:	0032      	movs	r2, r6
 8008920:	f00a fbfa 	bl	8013118 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008924:	883a      	ldrh	r2, [r7, #0]
 8008926:	46b4      	mov	ip, r6
 8008928:	4462      	add	r2, ip
 800892a:	803a      	strh	r2, [r7, #0]
 800892c:	e47a      	b.n	8008224 <PxMessagingTask+0xb0>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800892e:	4fdc      	ldr	r7, [pc, #880]	; (8008ca0 <PxMessagingTask+0xb2c>)
 8008930:	8838      	ldrh	r0, [r7, #0]
 8008932:	1830      	adds	r0, r6, r0
 8008934:	2138      	movs	r1, #56	; 0x38
 8008936:	4361      	muls	r1, r4
 8008938:	4441      	add	r1, r8
 800893a:	4bda      	ldr	r3, [pc, #872]	; (8008ca4 <PxMessagingTask+0xb30>)
 800893c:	18c9      	adds	r1, r1, r3
 800893e:	9a06      	ldr	r2, [sp, #24]
 8008940:	f00a fbea 	bl	8013118 <memcpy>
								longMessageLastPtr =0;
 8008944:	2100      	movs	r1, #0
 8008946:	8039      	strh	r1, [r7, #0]
								responseStatus =BOS_OK;
 8008948:	4bd7      	ldr	r3, [pc, #860]	; (8008ca8 <PxMessagingTask+0xb34>)
 800894a:	7019      	strb	r1, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800894c:	000b      	movs	r3, r1
 800894e:	000a      	movs	r2, r1
 8008950:	48d6      	ldr	r0, [pc, #856]	; (8008cac <PxMessagingTask+0xb38>)
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	f006 feba 	bl	800f6cc <xTaskGenericNotify>
 8008958:	e464      	b.n	8008224 <PxMessagingTask+0xb0>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800895a:	4bd5      	ldr	r3, [pc, #852]	; (8008cb0 <PxMessagingTask+0xb3c>)
 800895c:	4ad5      	ldr	r2, [pc, #852]	; (8008cb4 <PxMessagingTask+0xb40>)
 800895e:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008960:	4bd5      	ldr	r3, [pc, #852]	; (8008cb8 <PxMessagingTask+0xb44>)
 8008962:	2201      	movs	r2, #1
 8008964:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008966:	200a      	movs	r0, #10
 8008968:	f005 fb20 	bl	800dfac <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	4bd2      	ldr	r3, [pc, #840]	; (8008cbc <PxMessagingTask+0xb48>)
 8008972:	4ad3      	ldr	r2, [pc, #844]	; (8008cc0 <PxMessagingTask+0xb4c>)
 8008974:	60da      	str	r2, [r3, #12]
 8008976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	e7fd      	b.n	800897a <PxMessagingTask+0x806>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800897e:	00e3      	lsls	r3, r4, #3
 8008980:	1b1b      	subs	r3, r3, r4
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	4ec7      	ldr	r6, [pc, #796]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008986:	18f6      	adds	r6, r6, r3
 8008988:	4643      	mov	r3, r8
 800898a:	5cf0      	ldrb	r0, [r6, r3]
 800898c:	2300      	movs	r3, #0
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	3319      	adds	r3, #25
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	f7fe fffd 	bl	8007994 <SendMessageFromPort>
							osDelay(100);
 800899a:	2064      	movs	r0, #100	; 0x64
 800899c:	f005 fb06 	bl	800dfac <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 80089a0:	4643      	mov	r3, r8
 80089a2:	5cf3      	ldrb	r3, [r6, r3]
 80089a4:	4ac7      	ldr	r2, [pc, #796]	; (8008cc4 <PxMessagingTask+0xb50>)
 80089a6:	7811      	ldrb	r1, [r2, #0]
 80089a8:	9a07      	ldr	r2, [sp, #28]
 80089aa:	4650      	mov	r0, sl
 80089ac:	f001 fb68 	bl	800a080 <remoteBootloaderUpdate>
							break;
 80089b0:	e438      	b.n	8008224 <PxMessagingTask+0xb0>
							temp =cMessage[port - 1][11 + shift];
 80089b2:	4643      	mov	r3, r8
 80089b4:	930a      	str	r3, [sp, #40]	; 0x28
 80089b6:	210b      	movs	r1, #11
 80089b8:	4441      	add	r1, r8
 80089ba:	9108      	str	r1, [sp, #32]
 80089bc:	00e3      	lsls	r3, r4, #3
 80089be:	1b1b      	subs	r3, r3, r4
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	4ab8      	ldr	r2, [pc, #736]	; (8008ca4 <PxMessagingTask+0xb30>)
 80089c4:	18d3      	adds	r3, r2, r3
 80089c6:	5c5b      	ldrb	r3, [r3, r1]
 80089c8:	4699      	mov	r9, r3
							if(numOfParams == 15)
 80089ca:	9b06      	ldr	r3, [sp, #24]
 80089cc:	2b0f      	cmp	r3, #15
 80089ce:	d07c      	beq.n	8008aca <PxMessagingTask+0x956>
							if(numOfParams == 17)
 80089d0:	9b06      	ldr	r3, [sp, #24]
 80089d2:	2b11      	cmp	r3, #17
 80089d4:	d100      	bne.n	80089d8 <PxMessagingTask+0x864>
 80089d6:	e080      	b.n	8008ada <PxMessagingTask+0x966>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80089d8:	00e3      	lsls	r3, r4, #3
 80089da:	1b1b      	subs	r3, r3, r4
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	4ab1      	ldr	r2, [pc, #708]	; (8008ca4 <PxMessagingTask+0xb30>)
 80089e0:	18d3      	adds	r3, r2, r3
 80089e2:	4642      	mov	r2, r8
 80089e4:	5c9e      	ldrb	r6, [r3, r2]
 80089e6:	0636      	lsls	r6, r6, #24
 80089e8:	3201      	adds	r2, #1
 80089ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80089ec:	5c9a      	ldrb	r2, [r3, r2]
 80089ee:	0412      	lsls	r2, r2, #16
 80089f0:	18b6      	adds	r6, r6, r2
 80089f2:	4642      	mov	r2, r8
 80089f4:	3202      	adds	r2, #2
 80089f6:	920c      	str	r2, [sp, #48]	; 0x30
 80089f8:	5c9a      	ldrb	r2, [r3, r2]
 80089fa:	0212      	lsls	r2, r2, #8
 80089fc:	18b6      	adds	r6, r6, r2
 80089fe:	4642      	mov	r2, r8
 8008a00:	3203      	adds	r2, #3
 8008a02:	920d      	str	r2, [sp, #52]	; 0x34
 8008a04:	5c9a      	ldrb	r2, [r3, r2]
 8008a06:	18b6      	adds	r6, r6, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008a08:	2204      	movs	r2, #4
 8008a0a:	4442      	add	r2, r8
 8008a0c:	4694      	mov	ip, r2
 8008a0e:	5c9f      	ldrb	r7, [r3, r2]
 8008a10:	063f      	lsls	r7, r7, #24
 8008a12:	4642      	mov	r2, r8
 8008a14:	3205      	adds	r2, #5
 8008a16:	5c98      	ldrb	r0, [r3, r2]
 8008a18:	0400      	lsls	r0, r0, #16
 8008a1a:	1838      	adds	r0, r7, r0
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	3106      	adds	r1, #6
 8008a20:	5c5f      	ldrb	r7, [r3, r1]
 8008a22:	023f      	lsls	r7, r7, #8
 8008a24:	19c7      	adds	r7, r0, r7
 8008a26:	4640      	mov	r0, r8
 8008a28:	3007      	adds	r0, #7
 8008a2a:	5c1b      	ldrb	r3, [r3, r0]
 8008a2c:	18ff      	adds	r7, r7, r3
							if(temp == false){
 8008a2e:	464b      	mov	r3, r9
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d177      	bne.n	8008b24 <PxMessagingTask+0x9b0>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008a34:	00e3      	lsls	r3, r4, #3
 8008a36:	1b1b      	subs	r3, r3, r4
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	4a9a      	ldr	r2, [pc, #616]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008a3c:	18d3      	adds	r3, r2, r3
 8008a3e:	4642      	mov	r2, r8
 8008a40:	3209      	adds	r2, #9
 8008a42:	5c9b      	ldrb	r3, [r3, r2]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d008      	beq.n	8008a5a <PxMessagingTask+0x8e6>
 8008a48:	2238      	movs	r2, #56	; 0x38
 8008a4a:	4362      	muls	r2, r4
 8008a4c:	4995      	ldr	r1, [pc, #596]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008a4e:	1889      	adds	r1, r1, r2
 8008a50:	4642      	mov	r2, r8
 8008a52:	320a      	adds	r2, #10
 8008a54:	5c8a      	ldrb	r2, [r1, r2]
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	d148      	bne.n	8008aec <PxMessagingTask+0x978>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008a5a:	00e3      	lsls	r3, r4, #3
 8008a5c:	1b1b      	subs	r3, r3, r4
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	4a90      	ldr	r2, [pc, #576]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	9a08      	ldr	r2, [sp, #32]
 8008a66:	5c9b      	ldrb	r3, [r3, r2]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <PxMessagingTask+0x90a>
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	320c      	adds	r2, #12
 8008a70:	2038      	movs	r0, #56	; 0x38
 8008a72:	4360      	muls	r0, r4
 8008a74:	498b      	ldr	r1, [pc, #556]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008a76:	1809      	adds	r1, r1, r0
 8008a78:	5c8a      	ldrb	r2, [r1, r2]
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	d144      	bne.n	8008b08 <PxMessagingTask+0x994>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008a7e:	00e3      	lsls	r3, r4, #3
 8008a80:	1b1b      	subs	r3, r3, r4
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4a87      	ldr	r2, [pc, #540]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008a86:	18d3      	adds	r3, r2, r3
 8008a88:	4642      	mov	r2, r8
 8008a8a:	320d      	adds	r2, #13
 8008a8c:	5c9b      	ldrb	r3, [r3, r2]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <PxMessagingTask+0x922>
 8008a92:	f7ff fbc7 	bl	8008224 <PxMessagingTask+0xb0>
 8008a96:	2238      	movs	r2, #56	; 0x38
 8008a98:	4362      	muls	r2, r4
 8008a9a:	4982      	ldr	r1, [pc, #520]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008a9c:	1889      	adds	r1, r1, r2
 8008a9e:	4642      	mov	r2, r8
 8008aa0:	320e      	adds	r2, #14
 8008aa2:	5c8a      	ldrb	r2, [r1, r2]
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	d101      	bne.n	8008aac <PxMessagingTask+0x938>
 8008aa8:	f7ff fbbc 	bl	8008224 <PxMessagingTask+0xb0>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8008aac:	4640      	mov	r0, r8
 8008aae:	3008      	adds	r0, #8
 8008ab0:	2138      	movs	r1, #56	; 0x38
 8008ab2:	4361      	muls	r1, r4
 8008ab4:	468c      	mov	ip, r1
 8008ab6:	497b      	ldr	r1, [pc, #492]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008ab8:	4461      	add	r1, ip
 8008aba:	5c08      	ldrb	r0, [r1, r0]
 8008abc:	9200      	str	r2, [sp, #0]
 8008abe:	003a      	movs	r2, r7
 8008ac0:	0031      	movs	r1, r6
 8008ac2:	f7fe fe69 	bl	8007798 <SetupDMAStreams>
 8008ac6:	f7ff fbad 	bl	8008224 <PxMessagingTask+0xb0>
								temp =cMessage[port - 1][13 + shift];
 8008aca:	3329      	adds	r3, #41	; 0x29
 8008acc:	4363      	muls	r3, r4
 8008ace:	18d2      	adds	r2, r2, r3
 8008ad0:	4643      	mov	r3, r8
 8008ad2:	330d      	adds	r3, #13
 8008ad4:	5cd3      	ldrb	r3, [r2, r3]
 8008ad6:	4699      	mov	r9, r3
 8008ad8:	e77a      	b.n	80089d0 <PxMessagingTask+0x85c>
								temp =cMessage[port - 1][15 + shift];
 8008ada:	3327      	adds	r3, #39	; 0x27
 8008adc:	4363      	muls	r3, r4
 8008ade:	4a71      	ldr	r2, [pc, #452]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008ae0:	18d2      	adds	r2, r2, r3
 8008ae2:	4643      	mov	r3, r8
 8008ae4:	330f      	adds	r3, #15
 8008ae6:	5cd3      	ldrb	r3, [r2, r3]
 8008ae8:	4699      	mov	r9, r3
 8008aea:	e775      	b.n	80089d8 <PxMessagingTask+0x864>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008aec:	4641      	mov	r1, r8
 8008aee:	3108      	adds	r1, #8
 8008af0:	2038      	movs	r0, #56	; 0x38
 8008af2:	4360      	muls	r0, r4
 8008af4:	4684      	mov	ip, r0
 8008af6:	486b      	ldr	r0, [pc, #428]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008af8:	4460      	add	r0, ip
 8008afa:	5c40      	ldrb	r0, [r0, r1]
 8008afc:	9200      	str	r2, [sp, #0]
 8008afe:	003a      	movs	r2, r7
 8008b00:	0031      	movs	r1, r6
 8008b02:	f7fe fe49 	bl	8007798 <SetupDMAStreams>
 8008b06:	e7a8      	b.n	8008a5a <PxMessagingTask+0x8e6>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008b08:	4641      	mov	r1, r8
 8008b0a:	3108      	adds	r1, #8
 8008b0c:	2038      	movs	r0, #56	; 0x38
 8008b0e:	4360      	muls	r0, r4
 8008b10:	4684      	mov	ip, r0
 8008b12:	4864      	ldr	r0, [pc, #400]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008b14:	4460      	add	r0, ip
 8008b16:	5c40      	ldrb	r0, [r0, r1]
 8008b18:	9200      	str	r2, [sp, #0]
 8008b1a:	003a      	movs	r2, r7
 8008b1c:	0031      	movs	r1, r6
 8008b1e:	f7fe fe3b 	bl	8007798 <SetupDMAStreams>
 8008b22:	e7ac      	b.n	8008a7e <PxMessagingTask+0x90a>
 8008b24:	4663      	mov	r3, ip
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	4691      	mov	r9, r2
 8008b2a:	4688      	mov	r8, r1
 8008b2c:	0006      	movs	r6, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8008b2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008b30:	003b      	movs	r3, r7
 8008b32:	3308      	adds	r3, #8
 8008b34:	2238      	movs	r2, #56	; 0x38
 8008b36:	4362      	muls	r2, r4
 8008b38:	4d5a      	ldr	r5, [pc, #360]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008b3a:	18ad      	adds	r5, r5, r2
 8008b3c:	5ce9      	ldrb	r1, [r5, r3]
 8008b3e:	20e4      	movs	r0, #228	; 0xe4
 8008b40:	f003 f830 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8008b44:	5de9      	ldrb	r1, [r5, r7]
 8008b46:	0209      	lsls	r1, r1, #8
 8008b48:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008b4a:	5c2b      	ldrb	r3, [r5, r0]
 8008b4c:	18c9      	adds	r1, r1, r3
 8008b4e:	b289      	uxth	r1, r1
 8008b50:	20e5      	movs	r0, #229	; 0xe5
 8008b52:	f003 f827 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8008b56:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b58:	5c29      	ldrb	r1, [r5, r0]
 8008b5a:	0209      	lsls	r1, r1, #8
 8008b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008b5e:	5c2b      	ldrb	r3, [r5, r0]
 8008b60:	18c9      	adds	r1, r1, r3
 8008b62:	b289      	uxth	r1, r1
 8008b64:	20e6      	movs	r0, #230	; 0xe6
 8008b66:	f003 f81d 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8008b6a:	9b05      	ldr	r3, [sp, #20]
 8008b6c:	5ce9      	ldrb	r1, [r5, r3]
 8008b6e:	0209      	lsls	r1, r1, #8
 8008b70:	464b      	mov	r3, r9
 8008b72:	5ceb      	ldrb	r3, [r5, r3]
 8008b74:	18c9      	adds	r1, r1, r3
 8008b76:	b289      	uxth	r1, r1
 8008b78:	20e7      	movs	r0, #231	; 0xe7
 8008b7a:	f003 f813 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8008b7e:	4643      	mov	r3, r8
 8008b80:	5ce9      	ldrb	r1, [r5, r3]
 8008b82:	0209      	lsls	r1, r1, #8
 8008b84:	5dab      	ldrb	r3, [r5, r6]
 8008b86:	18c9      	adds	r1, r1, r3
 8008b88:	b289      	uxth	r1, r1
 8008b8a:	20e8      	movs	r0, #232	; 0xe8
 8008b8c:	f003 f80a 	bl	800bba4 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8008b90:	003b      	movs	r3, r7
 8008b92:	3309      	adds	r3, #9
 8008b94:	5ce9      	ldrb	r1, [r5, r3]
 8008b96:	0209      	lsls	r1, r1, #8
 8008b98:	3301      	adds	r3, #1
 8008b9a:	5ceb      	ldrb	r3, [r5, r3]
 8008b9c:	18c9      	adds	r1, r1, r3
 8008b9e:	b289      	uxth	r1, r1
 8008ba0:	20e9      	movs	r0, #233	; 0xe9
 8008ba2:	f002 ffff 	bl	800bba4 <EE_WriteVariable>
								if(numOfParams == 19)
 8008ba6:	9b06      	ldr	r3, [sp, #24]
 8008ba8:	2b13      	cmp	r3, #19
 8008baa:	d00b      	beq.n	8008bc4 <PxMessagingTask+0xa50>
								if(numOfParams == 21)
 8008bac:	9b06      	ldr	r3, [sp, #24]
 8008bae:	2b15      	cmp	r3, #21
 8008bb0:	d018      	beq.n	8008be4 <PxMessagingTask+0xa70>
  __ASM volatile ("dsb 0xF":::"memory");
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	4b41      	ldr	r3, [pc, #260]	; (8008cbc <PxMessagingTask+0xb48>)
 8008bb8:	4a41      	ldr	r2, [pc, #260]	; (8008cc0 <PxMessagingTask+0xb4c>)
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008bc0:	46c0      	nop			; (mov r8, r8)
 8008bc2:	e7fd      	b.n	8008bc0 <PxMessagingTask+0xa4c>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8008bc4:	2238      	movs	r2, #56	; 0x38
 8008bc6:	4362      	muls	r2, r4
 8008bc8:	4b36      	ldr	r3, [pc, #216]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008bca:	189b      	adds	r3, r3, r2
 8008bcc:	9a08      	ldr	r2, [sp, #32]
 8008bce:	5c99      	ldrb	r1, [r3, r2]
 8008bd0:	0209      	lsls	r1, r1, #8
 8008bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd4:	320c      	adds	r2, #12
 8008bd6:	5c9b      	ldrb	r3, [r3, r2]
 8008bd8:	18c9      	adds	r1, r1, r3
 8008bda:	b289      	uxth	r1, r1
 8008bdc:	20ea      	movs	r0, #234	; 0xea
 8008bde:	f002 ffe1 	bl	800bba4 <EE_WriteVariable>
 8008be2:	e7e3      	b.n	8008bac <PxMessagingTask+0xa38>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8008be4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008be6:	0002      	movs	r2, r0
 8008be8:	320d      	adds	r2, #13
 8008bea:	3323      	adds	r3, #35	; 0x23
 8008bec:	4363      	muls	r3, r4
 8008bee:	4c2d      	ldr	r4, [pc, #180]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008bf0:	18e4      	adds	r4, r4, r3
 8008bf2:	5ca1      	ldrb	r1, [r4, r2]
 8008bf4:	0209      	lsls	r1, r1, #8
 8008bf6:	0003      	movs	r3, r0
 8008bf8:	330e      	adds	r3, #14
 8008bfa:	5ce3      	ldrb	r3, [r4, r3]
 8008bfc:	18c9      	adds	r1, r1, r3
 8008bfe:	b289      	uxth	r1, r1
 8008c00:	20eb      	movs	r0, #235	; 0xeb
 8008c02:	f002 ffcf 	bl	800bba4 <EE_WriteVariable>
 8008c06:	e7d4      	b.n	8008bb2 <PxMessagingTask+0xa3e>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008c08:	00e3      	lsls	r3, r4, #3
 8008c0a:	1b1b      	subs	r3, r3, r4
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	4e25      	ldr	r6, [pc, #148]	; (8008ca4 <PxMessagingTask+0xb30>)
 8008c10:	18f6      	adds	r6, r6, r3
 8008c12:	4643      	mov	r3, r8
 8008c14:	5cf3      	ldrb	r3, [r6, r3]
 8008c16:	061b      	lsls	r3, r3, #24
 8008c18:	4642      	mov	r2, r8
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	5cb2      	ldrb	r2, [r6, r2]
 8008c1e:	0412      	lsls	r2, r2, #16
 8008c20:	189b      	adds	r3, r3, r2
 8008c22:	4642      	mov	r2, r8
 8008c24:	3202      	adds	r2, #2
 8008c26:	5cb2      	ldrb	r2, [r6, r2]
 8008c28:	0212      	lsls	r2, r2, #8
 8008c2a:	189b      	adds	r3, r3, r2
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	3203      	adds	r2, #3
 8008c30:	5cb2      	ldrb	r2, [r6, r2]
 8008c32:	189b      	adds	r3, r3, r2
 8008c34:	9308      	str	r3, [sp, #32]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008c36:	4642      	mov	r2, r8
 8008c38:	1d13      	adds	r3, r2, #4
 8008c3a:	5cf2      	ldrb	r2, [r6, r3]
 8008c3c:	0612      	lsls	r2, r2, #24
 8008c3e:	4641      	mov	r1, r8
 8008c40:	1d4b      	adds	r3, r1, #5
 8008c42:	5cf3      	ldrb	r3, [r6, r3]
 8008c44:	041b      	lsls	r3, r3, #16
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	4642      	mov	r2, r8
 8008c4a:	3206      	adds	r2, #6
 8008c4c:	5cb2      	ldrb	r2, [r6, r2]
 8008c4e:	0212      	lsls	r2, r2, #8
 8008c50:	189b      	adds	r3, r3, r2
 8008c52:	4642      	mov	r2, r8
 8008c54:	3207      	adds	r2, #7
 8008c56:	5cb2      	ldrb	r2, [r6, r2]
 8008c58:	189a      	adds	r2, r3, r2
 8008c5a:	920a      	str	r2, [sp, #40]	; 0x28
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	3009      	adds	r0, #9
 8008c60:	4642      	mov	r2, r8
 8008c62:	320b      	adds	r2, #11
 8008c64:	4643      	mov	r3, r8
 8008c66:	330a      	adds	r3, #10
 8008c68:	2108      	movs	r1, #8
 8008c6a:	4441      	add	r1, r8
 8008c6c:	9106      	str	r1, [sp, #24]
 8008c6e:	3104      	adds	r1, #4
 8008c70:	5c77      	ldrb	r7, [r6, r1]
 8008c72:	5cf3      	ldrb	r3, [r6, r3]
 8008c74:	5cb2      	ldrb	r2, [r6, r2]
 8008c76:	4913      	ldr	r1, [pc, #76]	; (8008cc4 <PxMessagingTask+0xb50>)
 8008c78:	7809      	ldrb	r1, [r1, #0]
 8008c7a:	5c30      	ldrb	r0, [r6, r0]
 8008c7c:	4684      	mov	ip, r0
 8008c7e:	1e78      	subs	r0, r7, #1
 8008c80:	4187      	sbcs	r7, r0
 8008c82:	9703      	str	r7, [sp, #12]
 8008c84:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008c86:	9702      	str	r7, [sp, #8]
 8008c88:	9f08      	ldr	r7, [sp, #32]
 8008c8a:	9701      	str	r7, [sp, #4]
 8008c8c:	9f06      	ldr	r7, [sp, #24]
 8008c8e:	5df6      	ldrb	r6, [r6, r7]
 8008c90:	9600      	str	r6, [sp, #0]
 8008c92:	4660      	mov	r0, ip
 8008c94:	f7ff f8f6 	bl	8007e84 <StartScastDMAStream>
							break;
 8008c98:	f7ff fac4 	bl	8008224 <PxMessagingTask+0xb0>
 8008c9c:	200007c9 	.word	0x200007c9
 8008ca0:	200007ca 	.word	0x200007ca
 8008ca4:	200006b4 	.word	0x200006b4
 8008ca8:	200008d0 	.word	0x200008d0
 8008cac:	20000dfc 	.word	0x20000dfc
 8008cb0:	20007ff0 	.word	0x20007ff0
 8008cb4:	deadbeef 	.word	0xdeadbeef
 8008cb8:	200007c8 	.word	0x200007c8
 8008cbc:	e000ed00 	.word	0xe000ed00
 8008cc0:	05fa0004 	.word	0x05fa0004
 8008cc4:	20000084 	.word	0x20000084
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008cc8:	00e3      	lsls	r3, r4, #3
 8008cca:	1b1b      	subs	r3, r3, r4
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4ae5      	ldr	r2, [pc, #916]	; (8009064 <PxMessagingTask+0xef0>)
 8008cd0:	18d3      	adds	r3, r2, r3
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	5c9b      	ldrb	r3, [r3, r2]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d000      	beq.n	8008cdc <PxMessagingTask+0xb68>
 8008cda:	e087      	b.n	8008dec <PxMessagingTask+0xc78>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008cdc:	1c91      	adds	r1, r2, #2
 8008cde:	2338      	movs	r3, #56	; 0x38
 8008ce0:	4363      	muls	r3, r4
 8008ce2:	4ae0      	ldr	r2, [pc, #896]	; (8009064 <PxMessagingTask+0xef0>)
 8008ce4:	18d2      	adds	r2, r2, r3
 8008ce6:	5c53      	ldrb	r3, [r2, r1]
 8008ce8:	061b      	lsls	r3, r3, #24
 8008cea:	4641      	mov	r1, r8
 8008cec:	3103      	adds	r1, #3
 8008cee:	5c51      	ldrb	r1, [r2, r1]
 8008cf0:	0409      	lsls	r1, r1, #16
 8008cf2:	185b      	adds	r3, r3, r1
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	3104      	adds	r1, #4
 8008cf8:	5c51      	ldrb	r1, [r2, r1]
 8008cfa:	0209      	lsls	r1, r1, #8
 8008cfc:	185b      	adds	r3, r3, r1
 8008cfe:	4641      	mov	r1, r8
 8008d00:	3105      	adds	r1, #5
 8008d02:	5c51      	ldrb	r1, [r2, r1]
 8008d04:	185b      	adds	r3, r3, r1
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008d06:	4641      	mov	r1, r8
 8008d08:	3101      	adds	r1, #1
 8008d0a:	5c52      	ldrb	r2, [r2, r1]
 8008d0c:	3a01      	subs	r2, #1
 8008d0e:	b2d1      	uxtb	r1, r2
 8008d10:	2907      	cmp	r1, #7
 8008d12:	d901      	bls.n	8008d18 <PxMessagingTask+0xba4>
 8008d14:	f7ff fa86 	bl	8008224 <PxMessagingTask+0xb0>
 8008d18:	b2d2      	uxtb	r2, r2
 8008d1a:	0092      	lsls	r2, r2, #2
 8008d1c:	49d2      	ldr	r1, [pc, #840]	; (8009068 <PxMessagingTask+0xef4>)
 8008d1e:	588a      	ldr	r2, [r1, r2]
 8008d20:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	4bd1      	ldr	r3, [pc, #836]	; (800906c <PxMessagingTask+0xef8>)
 8008d26:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8008d28:	2201      	movs	r2, #1
 8008d2a:	211f      	movs	r1, #31
 8008d2c:	4650      	mov	r0, sl
 8008d2e:	f7ff f881 	bl	8007e34 <SendMessageToModule>
										break;
 8008d32:	f7ff fa77 	bl	8008224 <PxMessagingTask+0xb0>
										messageParams[0] =*(__IO int8_t* )temp32;
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	4bcc      	ldr	r3, [pc, #816]	; (800906c <PxMessagingTask+0xef8>)
 8008d3a:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	211f      	movs	r1, #31
 8008d40:	4650      	mov	r0, sl
 8008d42:	f7ff f877 	bl	8007e34 <SendMessageToModule>
										break;
 8008d46:	f7ff fa6d 	bl	8008224 <PxMessagingTask+0xb0>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008d4a:	8819      	ldrh	r1, [r3, #0]
 8008d4c:	4ac7      	ldr	r2, [pc, #796]	; (800906c <PxMessagingTask+0xef8>)
 8008d4e:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	0a1b      	lsrs	r3, r3, #8
 8008d54:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8008d56:	2202      	movs	r2, #2
 8008d58:	211f      	movs	r1, #31
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	f7ff f86a 	bl	8007e34 <SendMessageToModule>
										break;
 8008d60:	f7ff fa60 	bl	8008224 <PxMessagingTask+0xb0>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008d64:	8819      	ldrh	r1, [r3, #0]
 8008d66:	4ac1      	ldr	r2, [pc, #772]	; (800906c <PxMessagingTask+0xef8>)
 8008d68:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	b21b      	sxth	r3, r3
 8008d6e:	121b      	asrs	r3, r3, #8
 8008d70:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8008d72:	2202      	movs	r2, #2
 8008d74:	211f      	movs	r1, #31
 8008d76:	4650      	mov	r0, sl
 8008d78:	f7ff f85c 	bl	8007e34 <SendMessageToModule>
										break;
 8008d7c:	f7ff fa52 	bl	8008224 <PxMessagingTask+0xb0>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008d80:	6819      	ldr	r1, [r3, #0]
 8008d82:	4aba      	ldr	r2, [pc, #744]	; (800906c <PxMessagingTask+0xef8>)
 8008d84:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8008d86:	6819      	ldr	r1, [r3, #0]
 8008d88:	0a09      	lsrs	r1, r1, #8
 8008d8a:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8008d8c:	6819      	ldr	r1, [r3, #0]
 8008d8e:	0c09      	lsrs	r1, r1, #16
 8008d90:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	0e1b      	lsrs	r3, r3, #24
 8008d96:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8008d98:	2204      	movs	r2, #4
 8008d9a:	211f      	movs	r1, #31
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	f7ff f849 	bl	8007e34 <SendMessageToModule>
										break;
 8008da2:	f7ff fa3f 	bl	8008224 <PxMessagingTask+0xb0>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8008da6:	6819      	ldr	r1, [r3, #0]
 8008da8:	4ab0      	ldr	r2, [pc, #704]	; (800906c <PxMessagingTask+0xef8>)
 8008daa:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8008dac:	6819      	ldr	r1, [r3, #0]
 8008dae:	1209      	asrs	r1, r1, #8
 8008db0:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	1409      	asrs	r1, r1, #16
 8008db6:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	0e1b      	lsrs	r3, r3, #24
 8008dbc:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	211f      	movs	r1, #31
 8008dc2:	4650      	mov	r0, sl
 8008dc4:	f7ff f836 	bl	8007e34 <SendMessageToModule>
										break;
 8008dc8:	f7ff fa2c 	bl	8008224 <PxMessagingTask+0xb0>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8008dcc:	7819      	ldrb	r1, [r3, #0]
 8008dce:	4aa7      	ldr	r2, [pc, #668]	; (800906c <PxMessagingTask+0xef8>)
 8008dd0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8008dd2:	7859      	ldrb	r1, [r3, #1]
 8008dd4:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 8008dd6:	7899      	ldrb	r1, [r3, #2]
 8008dd8:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 8008dda:	78db      	ldrb	r3, [r3, #3]
 8008ddc:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8008dde:	2208      	movs	r2, #8
 8008de0:	211f      	movs	r1, #31
 8008de2:	4650      	mov	r0, sl
 8008de4:	f7ff f826 	bl	8007e34 <SendMessageToModule>
										break; // You cannot bitwise floats
 8008de8:	f7ff fa1c 	bl	8008224 <PxMessagingTask+0xb0>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d01b      	beq.n	8008e28 <PxMessagingTask+0xcb4>
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8008df0:	d801      	bhi.n	8008df6 <PxMessagingTask+0xc82>
 8008df2:	f7ff fa17 	bl	8008224 <PxMessagingTask+0xb0>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 8008df6:	3b04      	subs	r3, #4
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4a9d      	ldr	r2, [pc, #628]	; (8009070 <PxMessagingTask+0xefc>)
 8008dfc:	5899      	ldr	r1, [r3, r2]
 8008dfe:	220f      	movs	r2, #15
 8008e00:	400a      	ands	r2, r1
 8008e02:	4b9a      	ldr	r3, [pc, #616]	; (800906c <PxMessagingTask+0xef8>)
 8008e04:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 8008e06:	d100      	bne.n	8008e0a <PxMessagingTask+0xc96>
 8008e08:	e09e      	b.n	8008f48 <PxMessagingTask+0xdd4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8008e0a:	0c09      	lsrs	r1, r1, #16
 8008e0c:	2380      	movs	r3, #128	; 0x80
 8008e0e:	059b      	lsls	r3, r3, #22
 8008e10:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8008e12:	3a01      	subs	r2, #1
 8008e14:	b2d0      	uxtb	r0, r2
 8008e16:	2807      	cmp	r0, #7
 8008e18:	d901      	bls.n	8008e1e <PxMessagingTask+0xcaa>
 8008e1a:	f7ff fa03 	bl	8008224 <PxMessagingTask+0xb0>
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	4894      	ldr	r0, [pc, #592]	; (8009074 <PxMessagingTask+0xf00>)
 8008e24:	5882      	ldr	r2, [r0, r2]
 8008e26:	4697      	mov	pc, r2
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8008e28:	3901      	subs	r1, #1
 8008e2a:	488e      	ldr	r0, [pc, #568]	; (8009064 <PxMessagingTask+0xef0>)
 8008e2c:	3336      	adds	r3, #54	; 0x36
 8008e2e:	4363      	muls	r3, r4
 8008e30:	18c2      	adds	r2, r0, r3
 8008e32:	2600      	movs	r6, #0
 8008e34:	5456      	strb	r6, [r2, r1]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8008e36:	4642      	mov	r2, r8
 8008e38:	3201      	adds	r2, #1
 8008e3a:	189b      	adds	r3, r3, r2
 8008e3c:	1818      	adds	r0, r3, r0
 8008e3e:	f7fa fbdd 	bl	80035fc <IsModuleParameter>
 8008e42:	4681      	mov	r9, r0
								if(temp == 0){ // Parameter does not exist
 8008e44:	42b0      	cmp	r0, r6
 8008e46:	d013      	beq.n	8008e70 <PxMessagingTask+0xcfc>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8008e48:	3801      	subs	r0, #1
 8008e4a:	4a8b      	ldr	r2, [pc, #556]	; (8009078 <PxMessagingTask+0xf04>)
 8008e4c:	230c      	movs	r3, #12
 8008e4e:	4358      	muls	r0, r3
 8008e50:	5883      	ldr	r3, [r0, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 8008e52:	1812      	adds	r2, r2, r0
 8008e54:	7912      	ldrb	r2, [r2, #4]
 8008e56:	4985      	ldr	r1, [pc, #532]	; (800906c <PxMessagingTask+0xef8>)
 8008e58:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	b2d1      	uxtb	r1, r2
 8008e5e:	2907      	cmp	r1, #7
 8008e60:	d901      	bls.n	8008e66 <PxMessagingTask+0xcf2>
 8008e62:	f7ff f9df 	bl	8008224 <PxMessagingTask+0xb0>
 8008e66:	b2d2      	uxtb	r2, r2
 8008e68:	0092      	lsls	r2, r2, #2
 8008e6a:	4984      	ldr	r1, [pc, #528]	; (800907c <PxMessagingTask+0xf08>)
 8008e6c:	588a      	ldr	r2, [r1, r2]
 8008e6e:	4697      	mov	pc, r2
									SendMessageToModule(src,
 8008e70:	2201      	movs	r2, #1
 8008e72:	211f      	movs	r1, #31
 8008e74:	4650      	mov	r0, sl
 8008e76:	f7fe ffdd 	bl	8007e34 <SendMessageToModule>
 8008e7a:	f7ff f9d3 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8008e7e:	781a      	ldrb	r2, [r3, #0]
 8008e80:	4b7a      	ldr	r3, [pc, #488]	; (800906c <PxMessagingTask+0xef8>)
 8008e82:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008e84:	2202      	movs	r2, #2
 8008e86:	211f      	movs	r1, #31
 8008e88:	4650      	mov	r0, sl
 8008e8a:	f7fe ffd3 	bl	8007e34 <SendMessageToModule>
											break;
 8008e8e:	f7ff f9c9 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	4b75      	ldr	r3, [pc, #468]	; (800906c <PxMessagingTask+0xef8>)
 8008e96:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008e98:	2202      	movs	r2, #2
 8008e9a:	211f      	movs	r1, #31
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	f7fe ffc9 	bl	8007e34 <SendMessageToModule>
											break;
 8008ea2:	f7ff f9bf 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008ea6:	8819      	ldrh	r1, [r3, #0]
 8008ea8:	4a70      	ldr	r2, [pc, #448]	; (800906c <PxMessagingTask+0xef8>)
 8008eaa:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008eb2:	2203      	movs	r2, #3
 8008eb4:	211f      	movs	r1, #31
 8008eb6:	4650      	mov	r0, sl
 8008eb8:	f7fe ffbc 	bl	8007e34 <SendMessageToModule>
											break;
 8008ebc:	f7ff f9b2 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008ec0:	8819      	ldrh	r1, [r3, #0]
 8008ec2:	4a6a      	ldr	r2, [pc, #424]	; (800906c <PxMessagingTask+0xef8>)
 8008ec4:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b21b      	sxth	r3, r3
 8008eca:	121b      	asrs	r3, r3, #8
 8008ecc:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008ece:	2203      	movs	r2, #3
 8008ed0:	211f      	movs	r1, #31
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f7fe ffae 	bl	8007e34 <SendMessageToModule>
											break;
 8008ed8:	f7ff f9a4 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008edc:	6819      	ldr	r1, [r3, #0]
 8008ede:	4a63      	ldr	r2, [pc, #396]	; (800906c <PxMessagingTask+0xef8>)
 8008ee0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8008ee2:	6819      	ldr	r1, [r3, #0]
 8008ee4:	0a09      	lsrs	r1, r1, #8
 8008ee6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8008ee8:	6819      	ldr	r1, [r3, #0]
 8008eea:	0c09      	lsrs	r1, r1, #16
 8008eec:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	0e1b      	lsrs	r3, r3, #24
 8008ef2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008ef4:	2205      	movs	r2, #5
 8008ef6:	211f      	movs	r1, #31
 8008ef8:	4650      	mov	r0, sl
 8008efa:	f7fe ff9b 	bl	8007e34 <SendMessageToModule>
											break;
 8008efe:	f7ff f991 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	4a59      	ldr	r2, [pc, #356]	; (800906c <PxMessagingTask+0xef8>)
 8008f06:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8008f08:	6819      	ldr	r1, [r3, #0]
 8008f0a:	1209      	asrs	r1, r1, #8
 8008f0c:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	1409      	asrs	r1, r1, #16
 8008f12:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	0e1b      	lsrs	r3, r3, #24
 8008f18:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008f1a:	2205      	movs	r2, #5
 8008f1c:	211f      	movs	r1, #31
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f7fe ff88 	bl	8007e34 <SendMessageToModule>
											break;
 8008f24:	f7ff f97e 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8008f28:	7819      	ldrb	r1, [r3, #0]
 8008f2a:	4a50      	ldr	r2, [pc, #320]	; (800906c <PxMessagingTask+0xef8>)
 8008f2c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8008f2e:	7859      	ldrb	r1, [r3, #1]
 8008f30:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8008f32:	7899      	ldrb	r1, [r3, #2]
 8008f34:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8008f36:	78db      	ldrb	r3, [r3, #3]
 8008f38:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008f3a:	2209      	movs	r2, #9
 8008f3c:	211f      	movs	r1, #31
 8008f3e:	4650      	mov	r0, sl
 8008f40:	f7fe ff78 	bl	8007e34 <SendMessageToModule>
											break;
 8008f44:	f7ff f96e 	bl	8008224 <PxMessagingTask+0xb0>
									SendMessageToModule(src,
 8008f48:	3201      	adds	r2, #1
 8008f4a:	211f      	movs	r1, #31
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	f7fe ff71 	bl	8007e34 <SendMessageToModule>
 8008f52:	f7ff f967 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =*(__IO uint8_t* )temp32;
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	4b44      	ldr	r3, [pc, #272]	; (800906c <PxMessagingTask+0xef8>)
 8008f5a:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	211f      	movs	r1, #31
 8008f60:	4650      	mov	r0, sl
 8008f62:	f7fe ff67 	bl	8007e34 <SendMessageToModule>
											break;
 8008f66:	f7ff f95d 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =*(__IO int8_t* )temp32;
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	4b3f      	ldr	r3, [pc, #252]	; (800906c <PxMessagingTask+0xef8>)
 8008f6e:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8008f70:	2202      	movs	r2, #2
 8008f72:	211f      	movs	r1, #31
 8008f74:	4650      	mov	r0, sl
 8008f76:	f7fe ff5d 	bl	8007e34 <SendMessageToModule>
											break;
 8008f7a:	f7ff f953 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008f7e:	8819      	ldrh	r1, [r3, #0]
 8008f80:	4a3a      	ldr	r2, [pc, #232]	; (800906c <PxMessagingTask+0xef8>)
 8008f82:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	211f      	movs	r1, #31
 8008f8e:	4650      	mov	r0, sl
 8008f90:	f7fe ff50 	bl	8007e34 <SendMessageToModule>
											break;
 8008f94:	f7ff f946 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008f98:	8819      	ldrh	r1, [r3, #0]
 8008f9a:	4a34      	ldr	r2, [pc, #208]	; (800906c <PxMessagingTask+0xef8>)
 8008f9c:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b21b      	sxth	r3, r3
 8008fa2:	121b      	asrs	r3, r3, #8
 8008fa4:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	211f      	movs	r1, #31
 8008faa:	4650      	mov	r0, sl
 8008fac:	f7fe ff42 	bl	8007e34 <SendMessageToModule>
											break;
 8008fb0:	f7ff f938 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008fb4:	6819      	ldr	r1, [r3, #0]
 8008fb6:	4a2d      	ldr	r2, [pc, #180]	; (800906c <PxMessagingTask+0xef8>)
 8008fb8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8008fba:	6819      	ldr	r1, [r3, #0]
 8008fbc:	0a09      	lsrs	r1, r1, #8
 8008fbe:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8008fc0:	6819      	ldr	r1, [r3, #0]
 8008fc2:	0c09      	lsrs	r1, r1, #16
 8008fc4:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	0e1b      	lsrs	r3, r3, #24
 8008fca:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008fcc:	2205      	movs	r2, #5
 8008fce:	211f      	movs	r1, #31
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	f7fe ff2f 	bl	8007e34 <SendMessageToModule>
											break;
 8008fd6:	f7ff f925 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8008fda:	6819      	ldr	r1, [r3, #0]
 8008fdc:	4a23      	ldr	r2, [pc, #140]	; (800906c <PxMessagingTask+0xef8>)
 8008fde:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	1209      	asrs	r1, r1, #8
 8008fe4:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8008fe6:	6819      	ldr	r1, [r3, #0]
 8008fe8:	1409      	asrs	r1, r1, #16
 8008fea:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	0e1b      	lsrs	r3, r3, #24
 8008ff0:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8008ff2:	2205      	movs	r2, #5
 8008ff4:	211f      	movs	r1, #31
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	f7fe ff1c 	bl	8007e34 <SendMessageToModule>
											break;
 8008ffc:	f7ff f912 	bl	8008224 <PxMessagingTask+0xb0>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	4b1a      	ldr	r3, [pc, #104]	; (800906c <PxMessagingTask+0xef8>)
 8009004:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009006:	4a1e      	ldr	r2, [pc, #120]	; (8009080 <PxMessagingTask+0xf0c>)
 8009008:	188a      	adds	r2, r1, r2
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800900e:	4a1d      	ldr	r2, [pc, #116]	; (8009084 <PxMessagingTask+0xf10>)
 8009010:	188a      	adds	r2, r1, r2
 8009012:	7812      	ldrb	r2, [r2, #0]
 8009014:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009016:	4a1c      	ldr	r2, [pc, #112]	; (8009088 <PxMessagingTask+0xf14>)
 8009018:	4694      	mov	ip, r2
 800901a:	4461      	add	r1, ip
 800901c:	780a      	ldrb	r2, [r1, #0]
 800901e:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 8009020:	2209      	movs	r2, #9
 8009022:	211f      	movs	r1, #31
 8009024:	4650      	mov	r0, sl
 8009026:	f7fe ff05 	bl	8007e34 <SendMessageToModule>
											break;
 800902a:	f7ff f8fb 	bl	8008224 <PxMessagingTask+0xb0>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800902e:	4b17      	ldr	r3, [pc, #92]	; (800908c <PxMessagingTask+0xf18>)
 8009030:	681e      	ldr	r6, [r3, #0]
 8009032:	685f      	ldr	r7, [r3, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	4252      	negs	r2, r2
 8009038:	17d3      	asrs	r3, r2, #31
 800903a:	1992      	adds	r2, r2, r6
 800903c:	417b      	adcs	r3, r7
 800903e:	2b00      	cmp	r3, #0
 8009040:	d028      	beq.n	8009094 <PxMessagingTask+0xf20>
							else if(remoteBuffer == REMOTE_MEMORY_ADD) // We requested a memory location
 8009042:	0033      	movs	r3, r6
 8009044:	433b      	orrs	r3, r7
 8009046:	d13a      	bne.n	80090be <PxMessagingTask+0xf4a>
								switch(remoteBuffer) // Requested format
 8009048:	2208      	movs	r2, #8
 800904a:	2300      	movs	r3, #0
 800904c:	0030      	movs	r0, r6
 800904e:	0039      	movs	r1, r7
 8009050:	f7f7 fa6c 	bl	800052c <__aeabi_ulcmp>
 8009054:	3001      	adds	r0, #1
 8009056:	2801      	cmp	r0, #1
 8009058:	d831      	bhi.n	80090be <PxMessagingTask+0xf4a>
 800905a:	00b6      	lsls	r6, r6, #2
 800905c:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <PxMessagingTask+0xf1c>)
 800905e:	599b      	ldr	r3, [r3, r6]
 8009060:	469f      	mov	pc, r3
 8009062:	46c0      	nop			; (mov r8, r8)
 8009064:	200006b4 	.word	0x200006b4
 8009068:	0801a434 	.word	0x0801a434
 800906c:	20000808 	.word	0x20000808
 8009070:	2000571c 	.word	0x2000571c
 8009074:	0801a454 	.word	0x0801a454
 8009078:	200000f4 	.word	0x200000f4
 800907c:	0801a474 	.word	0x0801a474
 8009080:	20000001 	.word	0x20000001
 8009084:	20000002 	.word	0x20000002
 8009088:	20000003 	.word	0x20000003
 800908c:	200008c8 	.word	0x200008c8
 8009090:	0801a494 	.word	0x0801a494
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009094:	2b00      	cmp	r3, #0
 8009096:	d101      	bne.n	800909c <PxMessagingTask+0xf28>
 8009098:	2a01      	cmp	r2, #1
 800909a:	d8d2      	bhi.n	8009042 <PxMessagingTask+0xece>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800909c:	2238      	movs	r2, #56	; 0x38
 800909e:	4362      	muls	r2, r4
 80090a0:	4bdf      	ldr	r3, [pc, #892]	; (8009420 <PxMessagingTask+0x12ac>)
 80090a2:	189b      	adds	r3, r3, r2
 80090a4:	4642      	mov	r2, r8
 80090a6:	5c9b      	ldrb	r3, [r3, r2]
 80090a8:	4ade      	ldr	r2, [pc, #888]	; (8009424 <PxMessagingTask+0x12b0>)
 80090aa:	7013      	strb	r3, [r2, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d806      	bhi.n	80090be <PxMessagingTask+0xf4a>
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4add      	ldr	r2, [pc, #884]	; (8009428 <PxMessagingTask+0x12b4>)
 80090b4:	58d3      	ldr	r3, [r2, r3]
 80090b6:	469f      	mov	pc, r3
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80090b8:	4bdc      	ldr	r3, [pc, #880]	; (800942c <PxMessagingTask+0x12b8>)
 80090ba:	2210      	movs	r2, #16
 80090bc:	701a      	strb	r2, [r3, #0]
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80090be:	4bdb      	ldr	r3, [pc, #876]	; (800942c <PxMessagingTask+0x12b8>)
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	2b10      	cmp	r3, #16
 80090c4:	d101      	bne.n	80090ca <PxMessagingTask+0xf56>
 80090c6:	f7ff f8ad 	bl	8008224 <PxMessagingTask+0xb0>
								responseStatus =BOS_OK;
 80090ca:	4bd8      	ldr	r3, [pc, #864]	; (800942c <PxMessagingTask+0x12b8>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	f7ff f8a8 	bl	8008224 <PxMessagingTask+0xb0>
										remoteBuffer =cMessage[port - 1][1 + shift];
 80090d4:	4641      	mov	r1, r8
 80090d6:	3101      	adds	r1, #1
 80090d8:	2238      	movs	r2, #56	; 0x38
 80090da:	4362      	muls	r2, r4
 80090dc:	4bd0      	ldr	r3, [pc, #832]	; (8009420 <PxMessagingTask+0x12ac>)
 80090de:	189b      	adds	r3, r3, r2
 80090e0:	5c5a      	ldrb	r2, [r3, r1]
 80090e2:	4bd3      	ldr	r3, [pc, #844]	; (8009430 <PxMessagingTask+0x12bc>)
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	2200      	movs	r2, #0
 80090e8:	605a      	str	r2, [r3, #4]
										break;
 80090ea:	e7e8      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 80090ec:	4641      	mov	r1, r8
 80090ee:	3101      	adds	r1, #1
 80090f0:	2238      	movs	r2, #56	; 0x38
 80090f2:	4362      	muls	r2, r4
 80090f4:	4bca      	ldr	r3, [pc, #808]	; (8009420 <PxMessagingTask+0x12ac>)
 80090f6:	189b      	adds	r3, r3, r2
 80090f8:	565a      	ldrsb	r2, [r3, r1]
 80090fa:	17d1      	asrs	r1, r2, #31
 80090fc:	4bcc      	ldr	r3, [pc, #816]	; (8009430 <PxMessagingTask+0x12bc>)
 80090fe:	601a      	str	r2, [r3, #0]
 8009100:	6059      	str	r1, [r3, #4]
										break;
 8009102:	e7dc      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 8009104:	4643      	mov	r3, r8
 8009106:	1c59      	adds	r1, r3, #1
 8009108:	2238      	movs	r2, #56	; 0x38
 800910a:	4362      	muls	r2, r4
 800910c:	4bc4      	ldr	r3, [pc, #784]	; (8009420 <PxMessagingTask+0x12ac>)
 800910e:	189b      	adds	r3, r3, r2
 8009110:	5c5a      	ldrb	r2, [r3, r1]
 8009112:	4641      	mov	r1, r8
 8009114:	3102      	adds	r1, #2
 8009116:	5c5b      	ldrb	r3, [r3, r1]
 8009118:	021b      	lsls	r3, r3, #8
 800911a:	18d3      	adds	r3, r2, r3
 800911c:	4ac4      	ldr	r2, [pc, #784]	; (8009430 <PxMessagingTask+0x12bc>)
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	2300      	movs	r3, #0
 8009122:	6053      	str	r3, [r2, #4]
										break;
 8009124:	e7cb      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 8009126:	4643      	mov	r3, r8
 8009128:	1c59      	adds	r1, r3, #1
 800912a:	2238      	movs	r2, #56	; 0x38
 800912c:	4362      	muls	r2, r4
 800912e:	4bbc      	ldr	r3, [pc, #752]	; (8009420 <PxMessagingTask+0x12ac>)
 8009130:	189b      	adds	r3, r3, r2
 8009132:	5c5a      	ldrb	r2, [r3, r1]
 8009134:	4641      	mov	r1, r8
 8009136:	3102      	adds	r1, #2
 8009138:	5c5b      	ldrb	r3, [r3, r1]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	18d3      	adds	r3, r2, r3
 800913e:	4abc      	ldr	r2, [pc, #752]	; (8009430 <PxMessagingTask+0x12bc>)
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	2300      	movs	r3, #0
 8009144:	6053      	str	r3, [r2, #4]
										break;
 8009146:	e7ba      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009148:	4643      	mov	r3, r8
 800914a:	1c59      	adds	r1, r3, #1
 800914c:	2338      	movs	r3, #56	; 0x38
 800914e:	4363      	muls	r3, r4
 8009150:	4ab3      	ldr	r2, [pc, #716]	; (8009420 <PxMessagingTask+0x12ac>)
 8009152:	18d2      	adds	r2, r2, r3
 8009154:	5c53      	ldrb	r3, [r2, r1]
 8009156:	4641      	mov	r1, r8
 8009158:	3102      	adds	r1, #2
 800915a:	5c51      	ldrb	r1, [r2, r1]
 800915c:	0209      	lsls	r1, r1, #8
 800915e:	185b      	adds	r3, r3, r1
 8009160:	4641      	mov	r1, r8
 8009162:	3103      	adds	r1, #3
 8009164:	5c51      	ldrb	r1, [r2, r1]
 8009166:	0409      	lsls	r1, r1, #16
 8009168:	185b      	adds	r3, r3, r1
 800916a:	4641      	mov	r1, r8
 800916c:	3104      	adds	r1, #4
 800916e:	5c52      	ldrb	r2, [r2, r1]
 8009170:	0612      	lsls	r2, r2, #24
 8009172:	189b      	adds	r3, r3, r2
 8009174:	4aae      	ldr	r2, [pc, #696]	; (8009430 <PxMessagingTask+0x12bc>)
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	2300      	movs	r3, #0
 800917a:	6053      	str	r3, [r2, #4]
										break;
 800917c:	e79f      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800917e:	4643      	mov	r3, r8
 8009180:	1c59      	adds	r1, r3, #1
 8009182:	2338      	movs	r3, #56	; 0x38
 8009184:	4363      	muls	r3, r4
 8009186:	4aa6      	ldr	r2, [pc, #664]	; (8009420 <PxMessagingTask+0x12ac>)
 8009188:	18d2      	adds	r2, r2, r3
 800918a:	5c53      	ldrb	r3, [r2, r1]
 800918c:	4641      	mov	r1, r8
 800918e:	3102      	adds	r1, #2
 8009190:	5c51      	ldrb	r1, [r2, r1]
 8009192:	0209      	lsls	r1, r1, #8
 8009194:	185b      	adds	r3, r3, r1
 8009196:	4641      	mov	r1, r8
 8009198:	3103      	adds	r1, #3
 800919a:	5c51      	ldrb	r1, [r2, r1]
 800919c:	0409      	lsls	r1, r1, #16
 800919e:	185b      	adds	r3, r3, r1
 80091a0:	4641      	mov	r1, r8
 80091a2:	3104      	adds	r1, #4
 80091a4:	5c52      	ldrb	r2, [r2, r1]
 80091a6:	0612      	lsls	r2, r2, #24
 80091a8:	189b      	adds	r3, r3, r2
 80091aa:	17d9      	asrs	r1, r3, #31
 80091ac:	4aa0      	ldr	r2, [pc, #640]	; (8009430 <PxMessagingTask+0x12bc>)
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	6051      	str	r1, [r2, #4]
										break;
 80091b2:	e784      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80091b4:	4643      	mov	r3, r8
 80091b6:	1c59      	adds	r1, r3, #1
 80091b8:	2338      	movs	r3, #56	; 0x38
 80091ba:	4363      	muls	r3, r4
 80091bc:	4a98      	ldr	r2, [pc, #608]	; (8009420 <PxMessagingTask+0x12ac>)
 80091be:	18d2      	adds	r2, r2, r3
 80091c0:	5c53      	ldrb	r3, [r2, r1]
 80091c2:	4641      	mov	r1, r8
 80091c4:	3102      	adds	r1, #2
 80091c6:	5c51      	ldrb	r1, [r2, r1]
 80091c8:	0209      	lsls	r1, r1, #8
 80091ca:	185b      	adds	r3, r3, r1
 80091cc:	4641      	mov	r1, r8
 80091ce:	3103      	adds	r1, #3
 80091d0:	5c51      	ldrb	r1, [r2, r1]
 80091d2:	0409      	lsls	r1, r1, #16
 80091d4:	185b      	adds	r3, r3, r1
 80091d6:	4641      	mov	r1, r8
 80091d8:	3104      	adds	r1, #4
 80091da:	5c52      	ldrb	r2, [r2, r1]
 80091dc:	0612      	lsls	r2, r2, #24
 80091de:	189b      	adds	r3, r3, r2
 80091e0:	4a93      	ldr	r2, [pc, #588]	; (8009430 <PxMessagingTask+0x12bc>)
 80091e2:	6013      	str	r3, [r2, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	6053      	str	r3, [r2, #4]
										break;
 80091e8:	e769      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =cMessage[port - 1][shift];
 80091ea:	2238      	movs	r2, #56	; 0x38
 80091ec:	4362      	muls	r2, r4
 80091ee:	4b8c      	ldr	r3, [pc, #560]	; (8009420 <PxMessagingTask+0x12ac>)
 80091f0:	189b      	adds	r3, r3, r2
 80091f2:	4642      	mov	r2, r8
 80091f4:	5c9a      	ldrb	r2, [r3, r2]
 80091f6:	4b8e      	ldr	r3, [pc, #568]	; (8009430 <PxMessagingTask+0x12bc>)
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	2200      	movs	r2, #0
 80091fc:	605a      	str	r2, [r3, #4]
										break;
 80091fe:	e75e      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =(int8_t )cMessage[port - 1][shift];
 8009200:	2238      	movs	r2, #56	; 0x38
 8009202:	4362      	muls	r2, r4
 8009204:	4b86      	ldr	r3, [pc, #536]	; (8009420 <PxMessagingTask+0x12ac>)
 8009206:	189b      	adds	r3, r3, r2
 8009208:	4642      	mov	r2, r8
 800920a:	569a      	ldrsb	r2, [r3, r2]
 800920c:	17d1      	asrs	r1, r2, #31
 800920e:	4b88      	ldr	r3, [pc, #544]	; (8009430 <PxMessagingTask+0x12bc>)
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	6059      	str	r1, [r3, #4]
										break;
 8009214:	e753      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((uint16_t )cMessage[port - 1][shift] << 0) + ((uint16_t )cMessage[port - 1][1 + shift] << 8);
 8009216:	2238      	movs	r2, #56	; 0x38
 8009218:	4362      	muls	r2, r4
 800921a:	4b81      	ldr	r3, [pc, #516]	; (8009420 <PxMessagingTask+0x12ac>)
 800921c:	189b      	adds	r3, r3, r2
 800921e:	4642      	mov	r2, r8
 8009220:	5c9a      	ldrb	r2, [r3, r2]
 8009222:	4641      	mov	r1, r8
 8009224:	3101      	adds	r1, #1
 8009226:	5c5b      	ldrb	r3, [r3, r1]
 8009228:	021b      	lsls	r3, r3, #8
 800922a:	18d3      	adds	r3, r2, r3
 800922c:	4a80      	ldr	r2, [pc, #512]	; (8009430 <PxMessagingTask+0x12bc>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	2300      	movs	r3, #0
 8009232:	6053      	str	r3, [r2, #4]
										break;
 8009234:	e743      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((int16_t )cMessage[port - 1][shift] << 0) + ((int16_t )cMessage[port - 1][1 + shift] << 8);
 8009236:	2238      	movs	r2, #56	; 0x38
 8009238:	4362      	muls	r2, r4
 800923a:	4b79      	ldr	r3, [pc, #484]	; (8009420 <PxMessagingTask+0x12ac>)
 800923c:	189b      	adds	r3, r3, r2
 800923e:	4642      	mov	r2, r8
 8009240:	5c9a      	ldrb	r2, [r3, r2]
 8009242:	4641      	mov	r1, r8
 8009244:	3101      	adds	r1, #1
 8009246:	5c5b      	ldrb	r3, [r3, r1]
 8009248:	021b      	lsls	r3, r3, #8
 800924a:	18d3      	adds	r3, r2, r3
 800924c:	4a78      	ldr	r2, [pc, #480]	; (8009430 <PxMessagingTask+0x12bc>)
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	2300      	movs	r3, #0
 8009252:	6053      	str	r3, [r2, #4]
										break;
 8009254:	e733      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 8009256:	2338      	movs	r3, #56	; 0x38
 8009258:	4363      	muls	r3, r4
 800925a:	4a71      	ldr	r2, [pc, #452]	; (8009420 <PxMessagingTask+0x12ac>)
 800925c:	18d2      	adds	r2, r2, r3
 800925e:	4643      	mov	r3, r8
 8009260:	5cd3      	ldrb	r3, [r2, r3]
 8009262:	4641      	mov	r1, r8
 8009264:	3101      	adds	r1, #1
 8009266:	5c51      	ldrb	r1, [r2, r1]
 8009268:	0209      	lsls	r1, r1, #8
 800926a:	185b      	adds	r3, r3, r1
 800926c:	4641      	mov	r1, r8
 800926e:	3102      	adds	r1, #2
 8009270:	5c51      	ldrb	r1, [r2, r1]
 8009272:	0409      	lsls	r1, r1, #16
 8009274:	185b      	adds	r3, r3, r1
 8009276:	4641      	mov	r1, r8
 8009278:	3103      	adds	r1, #3
 800927a:	5c52      	ldrb	r2, [r2, r1]
 800927c:	0612      	lsls	r2, r2, #24
 800927e:	189b      	adds	r3, r3, r2
 8009280:	4a6b      	ldr	r2, [pc, #428]	; (8009430 <PxMessagingTask+0x12bc>)
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	2300      	movs	r3, #0
 8009286:	6053      	str	r3, [r2, #4]
										break;
 8009288:	e719      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((int32_t )cMessage[port - 1][shift] << 0) + ((int32_t )cMessage[port - 1][1 + shift] << 8) + ((int32_t )cMessage[port - 1][2 + shift] << 16) + ((int32_t )cMessage[port - 1][3 + shift] << 24);
 800928a:	2338      	movs	r3, #56	; 0x38
 800928c:	4363      	muls	r3, r4
 800928e:	4a64      	ldr	r2, [pc, #400]	; (8009420 <PxMessagingTask+0x12ac>)
 8009290:	18d2      	adds	r2, r2, r3
 8009292:	4643      	mov	r3, r8
 8009294:	5cd3      	ldrb	r3, [r2, r3]
 8009296:	4641      	mov	r1, r8
 8009298:	3101      	adds	r1, #1
 800929a:	5c51      	ldrb	r1, [r2, r1]
 800929c:	0209      	lsls	r1, r1, #8
 800929e:	185b      	adds	r3, r3, r1
 80092a0:	4641      	mov	r1, r8
 80092a2:	3102      	adds	r1, #2
 80092a4:	5c51      	ldrb	r1, [r2, r1]
 80092a6:	0409      	lsls	r1, r1, #16
 80092a8:	185b      	adds	r3, r3, r1
 80092aa:	4641      	mov	r1, r8
 80092ac:	3103      	adds	r1, #3
 80092ae:	5c52      	ldrb	r2, [r2, r1]
 80092b0:	0612      	lsls	r2, r2, #24
 80092b2:	189b      	adds	r3, r3, r2
 80092b4:	17d9      	asrs	r1, r3, #31
 80092b6:	4a5e      	ldr	r2, [pc, #376]	; (8009430 <PxMessagingTask+0x12bc>)
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	6051      	str	r1, [r2, #4]
										break;
 80092bc:	e6ff      	b.n	80090be <PxMessagingTask+0xf4a>
										remoteBuffer =((uint32_t )cMessage[port - 1][shift] << 0) + ((uint32_t )cMessage[port - 1][1 + shift] << 8) + ((uint32_t )cMessage[port - 1][2 + shift] << 16) + ((uint32_t )cMessage[port - 1][3 + shift] << 24);
 80092be:	2338      	movs	r3, #56	; 0x38
 80092c0:	4363      	muls	r3, r4
 80092c2:	4a57      	ldr	r2, [pc, #348]	; (8009420 <PxMessagingTask+0x12ac>)
 80092c4:	18d2      	adds	r2, r2, r3
 80092c6:	4643      	mov	r3, r8
 80092c8:	5cd3      	ldrb	r3, [r2, r3]
 80092ca:	4641      	mov	r1, r8
 80092cc:	3101      	adds	r1, #1
 80092ce:	5c51      	ldrb	r1, [r2, r1]
 80092d0:	0209      	lsls	r1, r1, #8
 80092d2:	185b      	adds	r3, r3, r1
 80092d4:	4641      	mov	r1, r8
 80092d6:	3102      	adds	r1, #2
 80092d8:	5c51      	ldrb	r1, [r2, r1]
 80092da:	0409      	lsls	r1, r1, #16
 80092dc:	185b      	adds	r3, r3, r1
 80092de:	4641      	mov	r1, r8
 80092e0:	3103      	adds	r1, #3
 80092e2:	5c52      	ldrb	r2, [r2, r1]
 80092e4:	0612      	lsls	r2, r2, #24
 80092e6:	189b      	adds	r3, r3, r2
 80092e8:	4a51      	ldr	r2, [pc, #324]	; (8009430 <PxMessagingTask+0x12bc>)
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	2300      	movs	r3, #0
 80092ee:	6053      	str	r3, [r2, #4]
										break;
 80092f0:	e6e5      	b.n	80090be <PxMessagingTask+0xf4a>
							responseStatus =BOS_OK; // Initialize response
 80092f2:	4b4e      	ldr	r3, [pc, #312]	; (800942c <PxMessagingTask+0x12b8>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 80092f8:	00e3      	lsls	r3, r4, #3
 80092fa:	1b1b      	subs	r3, r3, r4
 80092fc:	00db      	lsls	r3, r3, #3
 80092fe:	4a48      	ldr	r2, [pc, #288]	; (8009420 <PxMessagingTask+0x12ac>)
 8009300:	18d3      	adds	r3, r2, r3
 8009302:	4642      	mov	r2, r8
 8009304:	5c9f      	ldrb	r7, [r3, r2]
 8009306:	2f00      	cmp	r7, #0
 8009308:	d100      	bne.n	800930c <PxMessagingTask+0x1198>
 800930a:	e171      	b.n	80095f0 <PxMessagingTask+0x147c>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800930c:	2f1e      	cmp	r7, #30
 800930e:	d900      	bls.n	8009312 <PxMessagingTask+0x119e>
 8009310:	e158      	b.n	80095c4 <PxMessagingTask+0x1450>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 8009312:	3f01      	subs	r7, #1
 8009314:	00ba      	lsls	r2, r7, #2
 8009316:	4b47      	ldr	r3, [pc, #284]	; (8009434 <PxMessagingTask+0x12c0>)
 8009318:	58d1      	ldr	r1, [r2, r3]
 800931a:	0c0b      	lsrs	r3, r1, #16
 800931c:	2280      	movs	r2, #128	; 0x80
 800931e:	0592      	lsls	r2, r2, #22
 8009320:	4694      	mov	ip, r2
 8009322:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 8009324:	4642      	mov	r2, r8
 8009326:	1c56      	adds	r6, r2, #1
 8009328:	9606      	str	r6, [sp, #24]
 800932a:	2038      	movs	r0, #56	; 0x38
 800932c:	4360      	muls	r0, r4
 800932e:	4a3c      	ldr	r2, [pc, #240]	; (8009420 <PxMessagingTask+0x12ac>)
 8009330:	1812      	adds	r2, r2, r0
 8009332:	5d96      	ldrb	r6, [r2, r6]
 8009334:	1e72      	subs	r2, r6, #1
 8009336:	b2d0      	uxtb	r0, r2
 8009338:	2807      	cmp	r0, #7
 800933a:	d812      	bhi.n	8009362 <PxMessagingTask+0x11ee>
 800933c:	b2d2      	uxtb	r2, r2
 800933e:	0092      	lsls	r2, r2, #2
 8009340:	483d      	ldr	r0, [pc, #244]	; (8009438 <PxMessagingTask+0x12c4>)
 8009342:	5882      	ldr	r2, [r0, r2]
 8009344:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009346:	070a      	lsls	r2, r1, #28
 8009348:	d027      	beq.n	800939a <PxMessagingTask+0x1226>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 800934a:	4a38      	ldr	r2, [pc, #224]	; (800942c <PxMessagingTask+0x12b8>)
 800934c:	7812      	ldrb	r2, [r2, #0]
 800934e:	2a12      	cmp	r2, #18
 8009350:	d007      	beq.n	8009362 <PxMessagingTask+0x11ee>
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 8009352:	4642      	mov	r2, r8
 8009354:	3202      	adds	r2, #2
 8009356:	2038      	movs	r0, #56	; 0x38
 8009358:	4360      	muls	r0, r4
 800935a:	4931      	ldr	r1, [pc, #196]	; (8009420 <PxMessagingTask+0x12ac>)
 800935c:	1809      	adds	r1, r1, r0
 800935e:	5c8a      	ldrb	r2, [r1, r2]
 8009360:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009362:	2338      	movs	r3, #56	; 0x38
 8009364:	4363      	muls	r3, r4
 8009366:	4a2e      	ldr	r2, [pc, #184]	; (8009420 <PxMessagingTask+0x12ac>)
 8009368:	18d3      	adds	r3, r2, r3
 800936a:	4642      	mov	r2, r8
 800936c:	5c9a      	ldrb	r2, [r3, r2]
 800936e:	3a01      	subs	r2, #1
 8009370:	0090      	lsls	r0, r2, #2
 8009372:	4930      	ldr	r1, [pc, #192]	; (8009434 <PxMessagingTask+0x12c0>)
 8009374:	5841      	ldr	r1, [r0, r1]
 8009376:	200f      	movs	r0, #15
 8009378:	4008      	ands	r0, r1
 800937a:	9e06      	ldr	r6, [sp, #24]
 800937c:	5d9b      	ldrb	r3, [r3, r6]
 800937e:	4298      	cmp	r0, r3
 8009380:	d100      	bne.n	8009384 <PxMessagingTask+0x1210>
 8009382:	e122      	b.n	80095ca <PxMessagingTask+0x1456>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 8009384:	482d      	ldr	r0, [pc, #180]	; (800943c <PxMessagingTask+0x12c8>)
 8009386:	4684      	mov	ip, r0
 8009388:	4463      	add	r3, ip
 800938a:	0092      	lsls	r2, r2, #2
 800938c:	400b      	ands	r3, r1
 800938e:	4929      	ldr	r1, [pc, #164]	; (8009434 <PxMessagingTask+0x12c0>)
 8009390:	5053      	str	r3, [r2, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 8009392:	4b26      	ldr	r3, [pc, #152]	; (800942c <PxMessagingTask+0x12b8>)
 8009394:	2214      	movs	r2, #20
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	e117      	b.n	80095ca <PxMessagingTask+0x1456>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800939a:	2001      	movs	r0, #1
 800939c:	f009 fe9a 	bl	80130d4 <malloc>
 80093a0:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80093a2:	d005      	beq.n	80093b0 <PxMessagingTask+0x123c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80093a4:	0400      	lsls	r0, r0, #16
 80093a6:	1986      	adds	r6, r0, r6
 80093a8:	00bf      	lsls	r7, r7, #2
 80093aa:	4a22      	ldr	r2, [pc, #136]	; (8009434 <PxMessagingTask+0x12c0>)
 80093ac:	50be      	str	r6, [r7, r2]
 80093ae:	e7cc      	b.n	800934a <PxMessagingTask+0x11d6>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80093b0:	4a1e      	ldr	r2, [pc, #120]	; (800942c <PxMessagingTask+0x12b8>)
 80093b2:	2112      	movs	r1, #18
 80093b4:	7011      	strb	r1, [r2, #0]
 80093b6:	e7c8      	b.n	800934a <PxMessagingTask+0x11d6>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80093b8:	070a      	lsls	r2, r1, #28
 80093ba:	d00c      	beq.n	80093d6 <PxMessagingTask+0x1262>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 80093bc:	4a1b      	ldr	r2, [pc, #108]	; (800942c <PxMessagingTask+0x12b8>)
 80093be:	7812      	ldrb	r2, [r2, #0]
 80093c0:	2a12      	cmp	r2, #18
 80093c2:	d0ce      	beq.n	8009362 <PxMessagingTask+0x11ee>
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 80093c4:	4642      	mov	r2, r8
 80093c6:	3202      	adds	r2, #2
 80093c8:	2038      	movs	r0, #56	; 0x38
 80093ca:	4360      	muls	r0, r4
 80093cc:	4914      	ldr	r1, [pc, #80]	; (8009420 <PxMessagingTask+0x12ac>)
 80093ce:	1809      	adds	r1, r1, r0
 80093d0:	568a      	ldrsb	r2, [r1, r2]
 80093d2:	701a      	strb	r2, [r3, #0]
 80093d4:	e7c5      	b.n	8009362 <PxMessagingTask+0x11ee>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 80093d6:	2001      	movs	r0, #1
 80093d8:	f009 fe7c 	bl	80130d4 <malloc>
 80093dc:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80093de:	d005      	beq.n	80093ec <PxMessagingTask+0x1278>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80093e0:	0400      	lsls	r0, r0, #16
 80093e2:	1986      	adds	r6, r0, r6
 80093e4:	00bf      	lsls	r7, r7, #2
 80093e6:	4a13      	ldr	r2, [pc, #76]	; (8009434 <PxMessagingTask+0x12c0>)
 80093e8:	50be      	str	r6, [r7, r2]
 80093ea:	e7e7      	b.n	80093bc <PxMessagingTask+0x1248>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80093ec:	4a0f      	ldr	r2, [pc, #60]	; (800942c <PxMessagingTask+0x12b8>)
 80093ee:	2112      	movs	r1, #18
 80093f0:	7011      	strb	r1, [r2, #0]
 80093f2:	e7e3      	b.n	80093bc <PxMessagingTask+0x1248>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80093f4:	070a      	lsls	r2, r1, #28
 80093f6:	d023      	beq.n	8009440 <PxMessagingTask+0x12cc>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 80093f8:	4a0c      	ldr	r2, [pc, #48]	; (800942c <PxMessagingTask+0x12b8>)
 80093fa:	7812      	ldrb	r2, [r2, #0]
 80093fc:	2a12      	cmp	r2, #18
 80093fe:	d0b0      	beq.n	8009362 <PxMessagingTask+0x11ee>
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009400:	4642      	mov	r2, r8
 8009402:	3202      	adds	r2, #2
 8009404:	2138      	movs	r1, #56	; 0x38
 8009406:	4361      	muls	r1, r4
 8009408:	4805      	ldr	r0, [pc, #20]	; (8009420 <PxMessagingTask+0x12ac>)
 800940a:	1841      	adds	r1, r0, r1
 800940c:	5c8a      	ldrb	r2, [r1, r2]
 800940e:	4640      	mov	r0, r8
 8009410:	3003      	adds	r0, #3
 8009412:	5c09      	ldrb	r1, [r1, r0]
 8009414:	0209      	lsls	r1, r1, #8
 8009416:	1852      	adds	r2, r2, r1
 8009418:	b292      	uxth	r2, r2
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	e7a1      	b.n	8009362 <PxMessagingTask+0x11ee>
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	200006b4 	.word	0x200006b4
 8009424:	200000b4 	.word	0x200000b4
 8009428:	0801a4b8 	.word	0x0801a4b8
 800942c:	200008d0 	.word	0x200008d0
 8009430:	200008c8 	.word	0x200008c8
 8009434:	2000571c 	.word	0x2000571c
 8009438:	0801a4dc 	.word	0x0801a4dc
 800943c:	0000fff0 	.word	0x0000fff0
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 8009440:	2002      	movs	r0, #2
 8009442:	f009 fe47 	bl	80130d4 <malloc>
 8009446:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009448:	d005      	beq.n	8009456 <PxMessagingTask+0x12e2>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800944a:	0400      	lsls	r0, r0, #16
 800944c:	1986      	adds	r6, r0, r6
 800944e:	00bf      	lsls	r7, r7, #2
 8009450:	4ad8      	ldr	r2, [pc, #864]	; (80097b4 <PxMessagingTask+0x1640>)
 8009452:	50be      	str	r6, [r7, r2]
 8009454:	e7d0      	b.n	80093f8 <PxMessagingTask+0x1284>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009456:	4ad8      	ldr	r2, [pc, #864]	; (80097b8 <PxMessagingTask+0x1644>)
 8009458:	2112      	movs	r1, #18
 800945a:	7011      	strb	r1, [r2, #0]
 800945c:	e7cc      	b.n	80093f8 <PxMessagingTask+0x1284>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800945e:	070a      	lsls	r2, r1, #28
 8009460:	d013      	beq.n	800948a <PxMessagingTask+0x1316>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009462:	4ad5      	ldr	r2, [pc, #852]	; (80097b8 <PxMessagingTask+0x1644>)
 8009464:	7812      	ldrb	r2, [r2, #0]
 8009466:	2a12      	cmp	r2, #18
 8009468:	d100      	bne.n	800946c <PxMessagingTask+0x12f8>
 800946a:	e77a      	b.n	8009362 <PxMessagingTask+0x11ee>
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800946c:	4642      	mov	r2, r8
 800946e:	3202      	adds	r2, #2
 8009470:	2138      	movs	r1, #56	; 0x38
 8009472:	4361      	muls	r1, r4
 8009474:	48d1      	ldr	r0, [pc, #836]	; (80097bc <PxMessagingTask+0x1648>)
 8009476:	1841      	adds	r1, r0, r1
 8009478:	5c8a      	ldrb	r2, [r1, r2]
 800947a:	4640      	mov	r0, r8
 800947c:	3003      	adds	r0, #3
 800947e:	5c09      	ldrb	r1, [r1, r0]
 8009480:	0209      	lsls	r1, r1, #8
 8009482:	1852      	adds	r2, r2, r1
 8009484:	b212      	sxth	r2, r2
 8009486:	801a      	strh	r2, [r3, #0]
 8009488:	e76b      	b.n	8009362 <PxMessagingTask+0x11ee>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800948a:	2002      	movs	r0, #2
 800948c:	f009 fe22 	bl	80130d4 <malloc>
 8009490:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009492:	d005      	beq.n	80094a0 <PxMessagingTask+0x132c>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009494:	0400      	lsls	r0, r0, #16
 8009496:	1986      	adds	r6, r0, r6
 8009498:	00bf      	lsls	r7, r7, #2
 800949a:	4ac6      	ldr	r2, [pc, #792]	; (80097b4 <PxMessagingTask+0x1640>)
 800949c:	50be      	str	r6, [r7, r2]
 800949e:	e7e0      	b.n	8009462 <PxMessagingTask+0x12ee>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80094a0:	4ac5      	ldr	r2, [pc, #788]	; (80097b8 <PxMessagingTask+0x1644>)
 80094a2:	2112      	movs	r1, #18
 80094a4:	7011      	strb	r1, [r2, #0]
 80094a6:	e7dc      	b.n	8009462 <PxMessagingTask+0x12ee>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80094a8:	070a      	lsls	r2, r1, #28
 80094aa:	d01c      	beq.n	80094e6 <PxMessagingTask+0x1372>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 80094ac:	4ac2      	ldr	r2, [pc, #776]	; (80097b8 <PxMessagingTask+0x1644>)
 80094ae:	7812      	ldrb	r2, [r2, #0]
 80094b0:	2a12      	cmp	r2, #18
 80094b2:	d100      	bne.n	80094b6 <PxMessagingTask+0x1342>
 80094b4:	e755      	b.n	8009362 <PxMessagingTask+0x11ee>
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 80094b6:	4642      	mov	r2, r8
 80094b8:	3202      	adds	r2, #2
 80094ba:	2138      	movs	r1, #56	; 0x38
 80094bc:	4361      	muls	r1, r4
 80094be:	48bf      	ldr	r0, [pc, #764]	; (80097bc <PxMessagingTask+0x1648>)
 80094c0:	1841      	adds	r1, r0, r1
 80094c2:	5c8e      	ldrb	r6, [r1, r2]
 80094c4:	4642      	mov	r2, r8
 80094c6:	3203      	adds	r2, #3
 80094c8:	5c88      	ldrb	r0, [r1, r2]
 80094ca:	0200      	lsls	r0, r0, #8
 80094cc:	1836      	adds	r6, r6, r0
 80094ce:	4642      	mov	r2, r8
 80094d0:	3204      	adds	r2, #4
 80094d2:	5c8a      	ldrb	r2, [r1, r2]
 80094d4:	0412      	lsls	r2, r2, #16
 80094d6:	18b2      	adds	r2, r6, r2
 80094d8:	4640      	mov	r0, r8
 80094da:	3005      	adds	r0, #5
 80094dc:	5c09      	ldrb	r1, [r1, r0]
 80094de:	0609      	lsls	r1, r1, #24
 80094e0:	1852      	adds	r2, r2, r1
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	e73d      	b.n	8009362 <PxMessagingTask+0x11ee>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80094e6:	2004      	movs	r0, #4
 80094e8:	f009 fdf4 	bl	80130d4 <malloc>
 80094ec:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80094ee:	d005      	beq.n	80094fc <PxMessagingTask+0x1388>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80094f0:	0400      	lsls	r0, r0, #16
 80094f2:	1986      	adds	r6, r0, r6
 80094f4:	00bf      	lsls	r7, r7, #2
 80094f6:	4aaf      	ldr	r2, [pc, #700]	; (80097b4 <PxMessagingTask+0x1640>)
 80094f8:	50be      	str	r6, [r7, r2]
 80094fa:	e7d7      	b.n	80094ac <PxMessagingTask+0x1338>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80094fc:	4aae      	ldr	r2, [pc, #696]	; (80097b8 <PxMessagingTask+0x1644>)
 80094fe:	2112      	movs	r1, #18
 8009500:	7011      	strb	r1, [r2, #0]
 8009502:	e7d3      	b.n	80094ac <PxMessagingTask+0x1338>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009504:	070a      	lsls	r2, r1, #28
 8009506:	d01c      	beq.n	8009542 <PxMessagingTask+0x13ce>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL) // Write remote value
 8009508:	4aab      	ldr	r2, [pc, #684]	; (80097b8 <PxMessagingTask+0x1644>)
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	2a12      	cmp	r2, #18
 800950e:	d100      	bne.n	8009512 <PxMessagingTask+0x139e>
 8009510:	e727      	b.n	8009362 <PxMessagingTask+0x11ee>
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009512:	4642      	mov	r2, r8
 8009514:	3202      	adds	r2, #2
 8009516:	2138      	movs	r1, #56	; 0x38
 8009518:	4361      	muls	r1, r4
 800951a:	48a8      	ldr	r0, [pc, #672]	; (80097bc <PxMessagingTask+0x1648>)
 800951c:	1841      	adds	r1, r0, r1
 800951e:	5c88      	ldrb	r0, [r1, r2]
 8009520:	4642      	mov	r2, r8
 8009522:	3203      	adds	r2, #3
 8009524:	5c8a      	ldrb	r2, [r1, r2]
 8009526:	0212      	lsls	r2, r2, #8
 8009528:	1880      	adds	r0, r0, r2
 800952a:	4642      	mov	r2, r8
 800952c:	3204      	adds	r2, #4
 800952e:	5c8a      	ldrb	r2, [r1, r2]
 8009530:	0412      	lsls	r2, r2, #16
 8009532:	1882      	adds	r2, r0, r2
 8009534:	4640      	mov	r0, r8
 8009536:	3005      	adds	r0, #5
 8009538:	5c09      	ldrb	r1, [r1, r0]
 800953a:	0609      	lsls	r1, r1, #24
 800953c:	1852      	adds	r2, r2, r1
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	e70f      	b.n	8009362 <PxMessagingTask+0x11ee>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 8009542:	2004      	movs	r0, #4
 8009544:	f009 fdc6 	bl	80130d4 <malloc>
 8009548:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800954a:	d005      	beq.n	8009558 <PxMessagingTask+0x13e4>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800954c:	0400      	lsls	r0, r0, #16
 800954e:	1986      	adds	r6, r0, r6
 8009550:	00bf      	lsls	r7, r7, #2
 8009552:	4a98      	ldr	r2, [pc, #608]	; (80097b4 <PxMessagingTask+0x1640>)
 8009554:	50be      	str	r6, [r7, r2]
 8009556:	e7d7      	b.n	8009508 <PxMessagingTask+0x1394>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 8009558:	4a97      	ldr	r2, [pc, #604]	; (80097b8 <PxMessagingTask+0x1644>)
 800955a:	2112      	movs	r1, #18
 800955c:	7011      	strb	r1, [r2, #0]
 800955e:	e7d3      	b.n	8009508 <PxMessagingTask+0x1394>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009560:	070a      	lsls	r2, r1, #28
 8009562:	d020      	beq.n	80095a6 <PxMessagingTask+0x1432>
											if(responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL){ // Write remote value
 8009564:	4a94      	ldr	r2, [pc, #592]	; (80097b8 <PxMessagingTask+0x1644>)
 8009566:	7812      	ldrb	r2, [r2, #0]
 8009568:	2a12      	cmp	r2, #18
 800956a:	d100      	bne.n	800956e <PxMessagingTask+0x13fa>
 800956c:	e6f9      	b.n	8009362 <PxMessagingTask+0x11ee>
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800956e:	4642      	mov	r2, r8
 8009570:	3202      	adds	r2, #2
 8009572:	2138      	movs	r1, #56	; 0x38
 8009574:	4361      	muls	r1, r4
 8009576:	4891      	ldr	r0, [pc, #580]	; (80097bc <PxMessagingTask+0x1648>)
 8009578:	1841      	adds	r1, r0, r1
 800957a:	5c88      	ldrb	r0, [r1, r2]
 800957c:	4642      	mov	r2, r8
 800957e:	3203      	adds	r2, #3
 8009580:	5c8a      	ldrb	r2, [r1, r2]
 8009582:	0212      	lsls	r2, r2, #8
 8009584:	1880      	adds	r0, r0, r2
 8009586:	4642      	mov	r2, r8
 8009588:	3204      	adds	r2, #4
 800958a:	5c8a      	ldrb	r2, [r1, r2]
 800958c:	0412      	lsls	r2, r2, #16
 800958e:	1882      	adds	r2, r0, r2
 8009590:	4640      	mov	r0, r8
 8009592:	3005      	adds	r0, #5
 8009594:	5c09      	ldrb	r1, [r1, r0]
 8009596:	0609      	lsls	r1, r1, #24
 8009598:	1852      	adds	r2, r2, r1
 800959a:	4989      	ldr	r1, [pc, #548]	; (80097c0 <PxMessagingTask+0x164c>)
 800959c:	600a      	str	r2, [r1, #0]
 800959e:	2000      	movs	r0, #0
 80095a0:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e6dd      	b.n	8009362 <PxMessagingTask+0x11ee>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 80095a6:	2004      	movs	r0, #4
 80095a8:	f009 fd94 	bl	80130d4 <malloc>
 80095ac:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80095ae:	d005      	beq.n	80095bc <PxMessagingTask+0x1448>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095b0:	0400      	lsls	r0, r0, #16
 80095b2:	1986      	adds	r6, r0, r6
 80095b4:	00bf      	lsls	r7, r7, #2
 80095b6:	4a7f      	ldr	r2, [pc, #508]	; (80097b4 <PxMessagingTask+0x1640>)
 80095b8:	50be      	str	r6, [r7, r2]
 80095ba:	e7d3      	b.n	8009564 <PxMessagingTask+0x13f0>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80095bc:	4a7e      	ldr	r2, [pc, #504]	; (80097b8 <PxMessagingTask+0x1644>)
 80095be:	2112      	movs	r1, #18
 80095c0:	7011      	strb	r1, [r2, #0]
 80095c2:	e7cf      	b.n	8009564 <PxMessagingTask+0x13f0>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 80095c4:	4b7c      	ldr	r3, [pc, #496]	; (80097b8 <PxMessagingTask+0x1644>)
 80095c6:	2213      	movs	r2, #19
 80095c8:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 80095ca:	4b7e      	ldr	r3, [pc, #504]	; (80097c4 <PxMessagingTask+0x1650>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	2b60      	cmp	r3, #96	; 0x60
 80095d0:	d003      	beq.n	80095da <PxMessagingTask+0x1466>
 80095d2:	2b20      	cmp	r3, #32
 80095d4:	d001      	beq.n	80095da <PxMessagingTask+0x1466>
 80095d6:	f7fe fe25 	bl	8008224 <PxMessagingTask+0xb0>
								messageParams[0] =responseStatus;
 80095da:	4b77      	ldr	r3, [pc, #476]	; (80097b8 <PxMessagingTask+0x1644>)
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	4b7a      	ldr	r3, [pc, #488]	; (80097c8 <PxMessagingTask+0x1654>)
 80095e0:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 80095e2:	2201      	movs	r2, #1
 80095e4:	2121      	movs	r1, #33	; 0x21
 80095e6:	4650      	mov	r0, sl
 80095e8:	f7fe fc24 	bl	8007e34 <SendMessageToModule>
 80095ec:	f7fe fe1a 	bl	8008224 <PxMessagingTask+0xb0>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80095f0:	3202      	adds	r2, #2
 80095f2:	2338      	movs	r3, #56	; 0x38
 80095f4:	4363      	muls	r3, r4
 80095f6:	4971      	ldr	r1, [pc, #452]	; (80097bc <PxMessagingTask+0x1648>)
 80095f8:	18cb      	adds	r3, r1, r3
 80095fa:	5c9f      	ldrb	r7, [r3, r2]
 80095fc:	063f      	lsls	r7, r7, #24
 80095fe:	4642      	mov	r2, r8
 8009600:	3203      	adds	r2, #3
 8009602:	5c9a      	ldrb	r2, [r3, r2]
 8009604:	0412      	lsls	r2, r2, #16
 8009606:	18bf      	adds	r7, r7, r2
 8009608:	4642      	mov	r2, r8
 800960a:	3204      	adds	r2, #4
 800960c:	5c9a      	ldrb	r2, [r3, r2]
 800960e:	0212      	lsls	r2, r2, #8
 8009610:	18bf      	adds	r7, r7, r2
 8009612:	4642      	mov	r2, r8
 8009614:	3205      	adds	r2, #5
 8009616:	5c9b      	ldrb	r3, [r3, r2]
 8009618:	18ff      	adds	r7, r7, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800961a:	23e0      	movs	r3, #224	; 0xe0
 800961c:	061b      	lsls	r3, r3, #24
 800961e:	18fa      	adds	r2, r7, r3
 8009620:	2380      	movs	r3, #128	; 0x80
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	429a      	cmp	r2, r3
 8009626:	d300      	bcc.n	800962a <PxMessagingTask+0x14b6>
 8009628:	e08b      	b.n	8009742 <PxMessagingTask+0x15ce>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800962a:	4643      	mov	r3, r8
 800962c:	3301      	adds	r3, #1
 800962e:	2138      	movs	r1, #56	; 0x38
 8009630:	4361      	muls	r1, r4
 8009632:	4a62      	ldr	r2, [pc, #392]	; (80097bc <PxMessagingTask+0x1648>)
 8009634:	1852      	adds	r2, r2, r1
 8009636:	5cd3      	ldrb	r3, [r2, r3]
 8009638:	3b01      	subs	r3, #1
 800963a:	b2da      	uxtb	r2, r3
 800963c:	2a07      	cmp	r2, #7
 800963e:	d8c4      	bhi.n	80095ca <PxMessagingTask+0x1456>
 8009640:	b2db      	uxtb	r3, r3
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4a61      	ldr	r2, [pc, #388]	; (80097cc <PxMessagingTask+0x1658>)
 8009646:	58d3      	ldr	r3, [r2, r3]
 8009648:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800964a:	4641      	mov	r1, r8
 800964c:	3106      	adds	r1, #6
 800964e:	2238      	movs	r2, #56	; 0x38
 8009650:	4362      	muls	r2, r4
 8009652:	4b5a      	ldr	r3, [pc, #360]	; (80097bc <PxMessagingTask+0x1648>)
 8009654:	189b      	adds	r3, r3, r2
 8009656:	5c5b      	ldrb	r3, [r3, r1]
 8009658:	703b      	strb	r3, [r7, #0]
											break;
 800965a:	e7b6      	b.n	80095ca <PxMessagingTask+0x1456>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800965c:	4641      	mov	r1, r8
 800965e:	3106      	adds	r1, #6
 8009660:	2238      	movs	r2, #56	; 0x38
 8009662:	4362      	muls	r2, r4
 8009664:	4b55      	ldr	r3, [pc, #340]	; (80097bc <PxMessagingTask+0x1648>)
 8009666:	189b      	adds	r3, r3, r2
 8009668:	565b      	ldrsb	r3, [r3, r1]
 800966a:	703b      	strb	r3, [r7, #0]
											break;
 800966c:	e7ad      	b.n	80095ca <PxMessagingTask+0x1456>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800966e:	4643      	mov	r3, r8
 8009670:	1d99      	adds	r1, r3, #6
 8009672:	2338      	movs	r3, #56	; 0x38
 8009674:	4363      	muls	r3, r4
 8009676:	4a51      	ldr	r2, [pc, #324]	; (80097bc <PxMessagingTask+0x1648>)
 8009678:	18d2      	adds	r2, r2, r3
 800967a:	5c53      	ldrb	r3, [r2, r1]
 800967c:	4641      	mov	r1, r8
 800967e:	3107      	adds	r1, #7
 8009680:	5c52      	ldrb	r2, [r2, r1]
 8009682:	0212      	lsls	r2, r2, #8
 8009684:	189b      	adds	r3, r3, r2
 8009686:	b29b      	uxth	r3, r3
 8009688:	803b      	strh	r3, [r7, #0]
											break;
 800968a:	e79e      	b.n	80095ca <PxMessagingTask+0x1456>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800968c:	4643      	mov	r3, r8
 800968e:	1d99      	adds	r1, r3, #6
 8009690:	2338      	movs	r3, #56	; 0x38
 8009692:	4363      	muls	r3, r4
 8009694:	4a49      	ldr	r2, [pc, #292]	; (80097bc <PxMessagingTask+0x1648>)
 8009696:	18d2      	adds	r2, r2, r3
 8009698:	5c53      	ldrb	r3, [r2, r1]
 800969a:	4641      	mov	r1, r8
 800969c:	3107      	adds	r1, #7
 800969e:	5c52      	ldrb	r2, [r2, r1]
 80096a0:	0212      	lsls	r2, r2, #8
 80096a2:	189b      	adds	r3, r3, r2
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	803b      	strh	r3, [r7, #0]
											break;
 80096a8:	e78f      	b.n	80095ca <PxMessagingTask+0x1456>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80096aa:	4643      	mov	r3, r8
 80096ac:	1d99      	adds	r1, r3, #6
 80096ae:	2338      	movs	r3, #56	; 0x38
 80096b0:	4363      	muls	r3, r4
 80096b2:	4a42      	ldr	r2, [pc, #264]	; (80097bc <PxMessagingTask+0x1648>)
 80096b4:	18d2      	adds	r2, r2, r3
 80096b6:	5c53      	ldrb	r3, [r2, r1]
 80096b8:	4641      	mov	r1, r8
 80096ba:	3107      	adds	r1, #7
 80096bc:	5c51      	ldrb	r1, [r2, r1]
 80096be:	0209      	lsls	r1, r1, #8
 80096c0:	185b      	adds	r3, r3, r1
 80096c2:	4641      	mov	r1, r8
 80096c4:	3108      	adds	r1, #8
 80096c6:	5c51      	ldrb	r1, [r2, r1]
 80096c8:	0409      	lsls	r1, r1, #16
 80096ca:	185b      	adds	r3, r3, r1
 80096cc:	4641      	mov	r1, r8
 80096ce:	3109      	adds	r1, #9
 80096d0:	5c52      	ldrb	r2, [r2, r1]
 80096d2:	0612      	lsls	r2, r2, #24
 80096d4:	189b      	adds	r3, r3, r2
 80096d6:	603b      	str	r3, [r7, #0]
											break;
 80096d8:	e777      	b.n	80095ca <PxMessagingTask+0x1456>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 80096da:	4643      	mov	r3, r8
 80096dc:	1d99      	adds	r1, r3, #6
 80096de:	2338      	movs	r3, #56	; 0x38
 80096e0:	4363      	muls	r3, r4
 80096e2:	4a36      	ldr	r2, [pc, #216]	; (80097bc <PxMessagingTask+0x1648>)
 80096e4:	18d2      	adds	r2, r2, r3
 80096e6:	5c53      	ldrb	r3, [r2, r1]
 80096e8:	4641      	mov	r1, r8
 80096ea:	3107      	adds	r1, #7
 80096ec:	5c51      	ldrb	r1, [r2, r1]
 80096ee:	0209      	lsls	r1, r1, #8
 80096f0:	185b      	adds	r3, r3, r1
 80096f2:	4641      	mov	r1, r8
 80096f4:	3108      	adds	r1, #8
 80096f6:	5c51      	ldrb	r1, [r2, r1]
 80096f8:	0409      	lsls	r1, r1, #16
 80096fa:	185b      	adds	r3, r3, r1
 80096fc:	4641      	mov	r1, r8
 80096fe:	3109      	adds	r1, #9
 8009700:	5c52      	ldrb	r2, [r2, r1]
 8009702:	0612      	lsls	r2, r2, #24
 8009704:	189b      	adds	r3, r3, r2
 8009706:	603b      	str	r3, [r7, #0]
											break;
 8009708:	e75f      	b.n	80095ca <PxMessagingTask+0x1456>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800970a:	4643      	mov	r3, r8
 800970c:	1d99      	adds	r1, r3, #6
 800970e:	2338      	movs	r3, #56	; 0x38
 8009710:	4363      	muls	r3, r4
 8009712:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <PxMessagingTask+0x1648>)
 8009714:	18d2      	adds	r2, r2, r3
 8009716:	5c53      	ldrb	r3, [r2, r1]
 8009718:	4641      	mov	r1, r8
 800971a:	3107      	adds	r1, #7
 800971c:	5c51      	ldrb	r1, [r2, r1]
 800971e:	0209      	lsls	r1, r1, #8
 8009720:	185b      	adds	r3, r3, r1
 8009722:	4641      	mov	r1, r8
 8009724:	3108      	adds	r1, #8
 8009726:	5c51      	ldrb	r1, [r2, r1]
 8009728:	0409      	lsls	r1, r1, #16
 800972a:	185b      	adds	r3, r3, r1
 800972c:	4641      	mov	r1, r8
 800972e:	3109      	adds	r1, #9
 8009730:	5c52      	ldrb	r2, [r2, r1]
 8009732:	0612      	lsls	r2, r2, #24
 8009734:	189b      	adds	r3, r3, r2
 8009736:	4a22      	ldr	r2, [pc, #136]	; (80097c0 <PxMessagingTask+0x164c>)
 8009738:	6013      	str	r3, [r2, #0]
 800973a:	2100      	movs	r1, #0
 800973c:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800973e:	603b      	str	r3, [r7, #0]
											break;
 8009740:	e743      	b.n	80095ca <PxMessagingTask+0x1456>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009742:	2280      	movs	r2, #128	; 0x80
 8009744:	0292      	lsls	r2, r2, #10
 8009746:	23f8      	movs	r3, #248	; 0xf8
 8009748:	061b      	lsls	r3, r3, #24
 800974a:	18fb      	adds	r3, r7, r3
 800974c:	4293      	cmp	r3, r2
 800974e:	d303      	bcc.n	8009758 <PxMessagingTask+0x15e4>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009750:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <PxMessagingTask+0x1644>)
 8009752:	2215      	movs	r2, #21
 8009754:	701a      	strb	r2, [r3, #0]
 8009756:	e738      	b.n	80095ca <PxMessagingTask+0x1456>
									HAL_FLASH_Unlock();
 8009758:	f007 fd4c 	bl	80111f4 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800975c:	2e22      	cmp	r6, #34	; 0x22
 800975e:	d013      	beq.n	8009788 <PxMessagingTask+0x1614>
									if(responseStatus == BOS_OK){
 8009760:	4b15      	ldr	r3, [pc, #84]	; (80097b8 <PxMessagingTask+0x1644>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d11b      	bne.n	80097a0 <PxMessagingTask+0x162c>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009768:	4643      	mov	r3, r8
 800976a:	3301      	adds	r3, #1
 800976c:	2138      	movs	r1, #56	; 0x38
 800976e:	4361      	muls	r1, r4
 8009770:	4a12      	ldr	r2, [pc, #72]	; (80097bc <PxMessagingTask+0x1648>)
 8009772:	1852      	adds	r2, r2, r1
 8009774:	5cd3      	ldrb	r3, [r2, r3]
 8009776:	3b01      	subs	r3, #1
 8009778:	b2da      	uxtb	r2, r3
 800977a:	2a07      	cmp	r2, #7
 800977c:	d810      	bhi.n	80097a0 <PxMessagingTask+0x162c>
 800977e:	b2db      	uxtb	r3, r3
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4a13      	ldr	r2, [pc, #76]	; (80097d0 <PxMessagingTask+0x165c>)
 8009784:	58d3      	ldr	r3, [r2, r3]
 8009786:	469f      	mov	pc, r3
										EraseSector(temp32);
 8009788:	0038      	movs	r0, r7
 800978a:	f002 fc47 	bl	800c01c <EraseSector>
 800978e:	e7e7      	b.n	8009760 <PxMessagingTask+0x15ec>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009790:	883b      	ldrh	r3, [r7, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	4a0f      	ldr	r2, [pc, #60]	; (80097d4 <PxMessagingTask+0x1660>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d01e      	beq.n	80097d8 <PxMessagingTask+0x1664>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800979a:	4b07      	ldr	r3, [pc, #28]	; (80097b8 <PxMessagingTask+0x1644>)
 800979c:	2216      	movs	r2, #22
 800979e:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 80097a0:	f007 fd3c 	bl	801121c <HAL_FLASH_Lock>
									if(status != HAL_OK)
 80097a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d100      	bne.n	80097ac <PxMessagingTask+0x1638>
 80097aa:	e70e      	b.n	80095ca <PxMessagingTask+0x1456>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80097ac:	4b02      	ldr	r3, [pc, #8]	; (80097b8 <PxMessagingTask+0x1644>)
 80097ae:	2216      	movs	r2, #22
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	e70a      	b.n	80095ca <PxMessagingTask+0x1456>
 80097b4:	2000571c 	.word	0x2000571c
 80097b8:	200008d0 	.word	0x200008d0
 80097bc:	200006b4 	.word	0x200006b4
 80097c0:	200008c8 	.word	0x200008c8
 80097c4:	20005714 	.word	0x20005714
 80097c8:	20000808 	.word	0x20000808
 80097cc:	0801a4fc 	.word	0x0801a4fc
 80097d0:	0801a51c 	.word	0x0801a51c
 80097d4:	0000ffff 	.word	0x0000ffff
													remoteBuffer =cMessage[port - 1][6 + shift];
 80097d8:	4641      	mov	r1, r8
 80097da:	3106      	adds	r1, #6
 80097dc:	2238      	movs	r2, #56	; 0x38
 80097de:	4362      	muls	r2, r4
 80097e0:	4be5      	ldr	r3, [pc, #916]	; (8009b78 <PxMessagingTask+0x1a04>)
 80097e2:	189b      	adds	r3, r3, r2
 80097e4:	5c5a      	ldrb	r2, [r3, r1]
 80097e6:	2300      	movs	r3, #0
 80097e8:	49e4      	ldr	r1, [pc, #912]	; (8009b7c <PxMessagingTask+0x1a08>)
 80097ea:	600a      	str	r2, [r1, #0]
 80097ec:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 80097ee:	0039      	movs	r1, r7
 80097f0:	2001      	movs	r0, #1
 80097f2:	f007 fd49 	bl	8011288 <HAL_FLASH_Program>
 80097f6:	9009      	str	r0, [sp, #36]	; 0x24
													break;
 80097f8:	e7d2      	b.n	80097a0 <PxMessagingTask+0x162c>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 80097fa:	883b      	ldrh	r3, [r7, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	4ae0      	ldr	r2, [pc, #896]	; (8009b80 <PxMessagingTask+0x1a0c>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d003      	beq.n	800980c <PxMessagingTask+0x1698>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009804:	4bdf      	ldr	r3, [pc, #892]	; (8009b84 <PxMessagingTask+0x1a10>)
 8009806:	2216      	movs	r2, #22
 8009808:	701a      	strb	r2, [r3, #0]
													break;
 800980a:	e7c9      	b.n	80097a0 <PxMessagingTask+0x162c>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800980c:	4643      	mov	r3, r8
 800980e:	1d99      	adds	r1, r3, #6
 8009810:	2238      	movs	r2, #56	; 0x38
 8009812:	4362      	muls	r2, r4
 8009814:	4bd8      	ldr	r3, [pc, #864]	; (8009b78 <PxMessagingTask+0x1a04>)
 8009816:	189b      	adds	r3, r3, r2
 8009818:	5c5a      	ldrb	r2, [r3, r1]
 800981a:	4641      	mov	r1, r8
 800981c:	3107      	adds	r1, #7
 800981e:	5c5b      	ldrb	r3, [r3, r1]
 8009820:	021b      	lsls	r3, r3, #8
 8009822:	18d2      	adds	r2, r2, r3
 8009824:	2300      	movs	r3, #0
 8009826:	49d5      	ldr	r1, [pc, #852]	; (8009b7c <PxMessagingTask+0x1a08>)
 8009828:	600a      	str	r2, [r1, #0]
 800982a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800982c:	0039      	movs	r1, r7
 800982e:	2001      	movs	r0, #1
 8009830:	f007 fd2a 	bl	8011288 <HAL_FLASH_Program>
 8009834:	9009      	str	r0, [sp, #36]	; 0x24
													break;
 8009836:	e7b3      	b.n	80097a0 <PxMessagingTask+0x162c>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	3301      	adds	r3, #1
 800983c:	d003      	beq.n	8009846 <PxMessagingTask+0x16d2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800983e:	4bd1      	ldr	r3, [pc, #836]	; (8009b84 <PxMessagingTask+0x1a10>)
 8009840:	2216      	movs	r2, #22
 8009842:	701a      	strb	r2, [r3, #0]
													break;
 8009844:	e7ac      	b.n	80097a0 <PxMessagingTask+0x162c>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);													// TOCHECKLATER
 8009846:	4643      	mov	r3, r8
 8009848:	1d9a      	adds	r2, r3, #6
 800984a:	2338      	movs	r3, #56	; 0x38
 800984c:	4363      	muls	r3, r4
 800984e:	49ca      	ldr	r1, [pc, #808]	; (8009b78 <PxMessagingTask+0x1a04>)
 8009850:	18cb      	adds	r3, r1, r3
 8009852:	5c9a      	ldrb	r2, [r3, r2]
 8009854:	4641      	mov	r1, r8
 8009856:	3107      	adds	r1, #7
 8009858:	5c59      	ldrb	r1, [r3, r1]
 800985a:	0209      	lsls	r1, r1, #8
 800985c:	1852      	adds	r2, r2, r1
 800985e:	4641      	mov	r1, r8
 8009860:	3108      	adds	r1, #8
 8009862:	5c59      	ldrb	r1, [r3, r1]
 8009864:	0409      	lsls	r1, r1, #16
 8009866:	1852      	adds	r2, r2, r1
 8009868:	4641      	mov	r1, r8
 800986a:	3109      	adds	r1, #9
 800986c:	5c5b      	ldrb	r3, [r3, r1]
 800986e:	061b      	lsls	r3, r3, #24
 8009870:	18d2      	adds	r2, r2, r3
 8009872:	2300      	movs	r3, #0
 8009874:	49c1      	ldr	r1, [pc, #772]	; (8009b7c <PxMessagingTask+0x1a08>)
 8009876:	600a      	str	r2, [r1, #0]
 8009878:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800987a:	0039      	movs	r1, r7
 800987c:	2002      	movs	r0, #2
 800987e:	f007 fd03 	bl	8011288 <HAL_FLASH_Program>
 8009882:	9009      	str	r0, [sp, #36]	; 0x24
													break;
 8009884:	e78c      	b.n	80097a0 <PxMessagingTask+0x162c>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	3301      	adds	r3, #1
 800988a:	d003      	beq.n	8009894 <PxMessagingTask+0x1720>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800988c:	4bbd      	ldr	r3, [pc, #756]	; (8009b84 <PxMessagingTask+0x1a10>)
 800988e:	2216      	movs	r2, #22
 8009890:	701a      	strb	r2, [r3, #0]
													break;
 8009892:	e785      	b.n	80097a0 <PxMessagingTask+0x162c>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009894:	4643      	mov	r3, r8
 8009896:	1d9a      	adds	r2, r3, #6
 8009898:	2338      	movs	r3, #56	; 0x38
 800989a:	4363      	muls	r3, r4
 800989c:	49b6      	ldr	r1, [pc, #728]	; (8009b78 <PxMessagingTask+0x1a04>)
 800989e:	18cb      	adds	r3, r1, r3
 80098a0:	5c9a      	ldrb	r2, [r3, r2]
 80098a2:	4641      	mov	r1, r8
 80098a4:	3107      	adds	r1, #7
 80098a6:	5c59      	ldrb	r1, [r3, r1]
 80098a8:	0209      	lsls	r1, r1, #8
 80098aa:	1852      	adds	r2, r2, r1
 80098ac:	4641      	mov	r1, r8
 80098ae:	3108      	adds	r1, #8
 80098b0:	5c59      	ldrb	r1, [r3, r1]
 80098b2:	0409      	lsls	r1, r1, #16
 80098b4:	1852      	adds	r2, r2, r1
 80098b6:	4641      	mov	r1, r8
 80098b8:	3109      	adds	r1, #9
 80098ba:	5c5b      	ldrb	r3, [r3, r1]
 80098bc:	061b      	lsls	r3, r3, #24
 80098be:	18d2      	adds	r2, r2, r3
 80098c0:	2300      	movs	r3, #0
 80098c2:	49ae      	ldr	r1, [pc, #696]	; (8009b7c <PxMessagingTask+0x1a08>)
 80098c4:	600a      	str	r2, [r1, #0]
 80098c6:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 80098c8:	0039      	movs	r1, r7
 80098ca:	2003      	movs	r0, #3
 80098cc:	f007 fcdc 	bl	8011288 <HAL_FLASH_Program>
 80098d0:	9009      	str	r0, [sp, #36]	; 0x24
													break;
 80098d2:	e765      	b.n	80097a0 <PxMessagingTask+0x162c>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 80098d4:	00e3      	lsls	r3, r4, #3
 80098d6:	1b1b      	subs	r3, r3, r4
 80098d8:	00db      	lsls	r3, r3, #3
 80098da:	4aa7      	ldr	r2, [pc, #668]	; (8009b78 <PxMessagingTask+0x1a04>)
 80098dc:	18d3      	adds	r3, r2, r3
 80098de:	4642      	mov	r2, r8
 80098e0:	5c9a      	ldrb	r2, [r3, r2]
 80098e2:	4ba8      	ldr	r3, [pc, #672]	; (8009b84 <PxMessagingTask+0x1a10>)
 80098e4:	701a      	strb	r2, [r3, #0]
							break;
 80098e6:	f7fe fc9d 	bl	8008224 <PxMessagingTask+0xb0>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 80098ea:	4643      	mov	r3, r8
 80098ec:	1c5a      	adds	r2, r3, #1
 80098ee:	00e3      	lsls	r3, r4, #3
 80098f0:	1b19      	subs	r1, r3, r4
 80098f2:	00c9      	lsls	r1, r1, #3
 80098f4:	1889      	adds	r1, r1, r2
 80098f6:	48a0      	ldr	r0, [pc, #640]	; (8009b78 <PxMessagingTask+0x1a04>)
 80098f8:	1809      	adds	r1, r1, r0
 80098fa:	9a06      	ldr	r2, [sp, #24]
 80098fc:	3a01      	subs	r2, #1
 80098fe:	b292      	uxth	r2, r2
 8009900:	1b1b      	subs	r3, r3, r4
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	18c3      	adds	r3, r0, r3
 8009906:	4640      	mov	r0, r8
 8009908:	5c18      	ldrb	r0, [r3, r0]
 800990a:	230a      	movs	r3, #10
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	f004 f9ef 	bl	800dcf0 <writePxMutex>
							break;
 8009912:	f7fe fc87 	bl	8008224 <PxMessagingTask+0xb0>
							switch(cMessage[port - 1][0 + shift]){
 8009916:	00e3      	lsls	r3, r4, #3
 8009918:	1b1b      	subs	r3, r3, r4
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	4a96      	ldr	r2, [pc, #600]	; (8009b78 <PxMessagingTask+0x1a04>)
 800991e:	18d3      	adds	r3, r2, r3
 8009920:	4642      	mov	r2, r8
 8009922:	5c9b      	ldrb	r3, [r3, r2]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d100      	bne.n	800992a <PxMessagingTask+0x17b6>
 8009928:	e08e      	b.n	8009a48 <PxMessagingTask+0x18d4>
 800992a:	2b02      	cmp	r3, #2
 800992c:	d100      	bne.n	8009930 <PxMessagingTask+0x17bc>
 800992e:	e0c8      	b.n	8009ac2 <PxMessagingTask+0x194e>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d04c      	beq.n	80099ce <PxMessagingTask+0x185a>
							ADCPort =cMessage[port - 1][shift];
 8009934:	00e2      	lsls	r2, r4, #3
 8009936:	1b12      	subs	r2, r2, r4
 8009938:	00d2      	lsls	r2, r2, #3
 800993a:	4b8f      	ldr	r3, [pc, #572]	; (8009b78 <PxMessagingTask+0x1a04>)
 800993c:	189b      	adds	r3, r3, r2
 800993e:	4642      	mov	r2, r8
 8009940:	5c98      	ldrb	r0, [r3, r2]
 8009942:	4a91      	ldr	r2, [pc, #580]	; (8009b88 <PxMessagingTask+0x1a14>)
 8009944:	8010      	strh	r0, [r2, #0]
							ADCSide =cMessage[port - 1][shift + 1];
 8009946:	4642      	mov	r2, r8
 8009948:	3201      	adds	r2, #1
 800994a:	5c9b      	ldrb	r3, [r3, r2]
 800994c:	4a8f      	ldr	r2, [pc, #572]	; (8009b8c <PxMessagingTask+0x1a18>)
 800994e:	8013      	strh	r3, [r2, #0]
							if(0 == ADCSide){
 8009950:	2b00      	cmp	r3, #0
 8009952:	d100      	bne.n	8009956 <PxMessagingTask+0x17e2>
 8009954:	e0ce      	b.n	8009af4 <PxMessagingTask+0x1980>
							else if(1 == ADCSide){
 8009956:	2b01      	cmp	r3, #1
 8009958:	d100      	bne.n	800995c <PxMessagingTask+0x17e8>
 800995a:	e0d6      	b.n	8009b0a <PxMessagingTask+0x1996>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800995c:	498c      	ldr	r1, [pc, #560]	; (8009b90 <PxMessagingTask+0x1a1c>)
 800995e:	488d      	ldr	r0, [pc, #564]	; (8009b94 <PxMessagingTask+0x1a20>)
 8009960:	f003 f814 	bl	800c98c <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8009964:	00e6      	lsls	r6, r4, #3
 8009966:	1b36      	subs	r6, r6, r4
 8009968:	00f6      	lsls	r6, r6, #3
 800996a:	4b83      	ldr	r3, [pc, #524]	; (8009b78 <PxMessagingTask+0x1a04>)
 800996c:	199e      	adds	r6, r3, r6
 800996e:	4643      	mov	r3, r8
 8009970:	5cf0      	ldrb	r0, [r6, r3]
 8009972:	4b85      	ldr	r3, [pc, #532]	; (8009b88 <PxMessagingTask+0x1a14>)
 8009974:	8018      	strh	r0, [r3, #0]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8009976:	4988      	ldr	r1, [pc, #544]	; (8009b98 <PxMessagingTask+0x1a24>)
 8009978:	f003 f8c8 	bl	800cb0c <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800997c:	4643      	mov	r3, r8
 800997e:	3305      	adds	r3, #5
 8009980:	5cf3      	ldrb	r3, [r6, r3]
 8009982:	4642      	mov	r2, r8
 8009984:	3206      	adds	r2, #6
 8009986:	5cb2      	ldrb	r2, [r6, r2]
 8009988:	0212      	lsls	r2, r2, #8
 800998a:	189b      	adds	r3, r3, r2
 800998c:	4642      	mov	r2, r8
 800998e:	3207      	adds	r2, #7
 8009990:	5cb2      	ldrb	r2, [r6, r2]
 8009992:	0412      	lsls	r2, r2, #16
 8009994:	189b      	adds	r3, r3, r2
 8009996:	4642      	mov	r2, r8
 8009998:	3208      	adds	r2, #8
 800999a:	5cb2      	ldrb	r2, [r6, r2]
 800999c:	0612      	lsls	r2, r2, #24
 800999e:	189b      	adds	r3, r3, r2
 80099a0:	4a7e      	ldr	r2, [pc, #504]	; (8009b9c <PxMessagingTask+0x1a28>)
 80099a2:	61d3      	str	r3, [r2, #28]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80099a4:	4643      	mov	r3, r8
 80099a6:	3309      	adds	r3, #9
 80099a8:	5cf3      	ldrb	r3, [r6, r3]
 80099aa:	4641      	mov	r1, r8
 80099ac:	310a      	adds	r1, #10
 80099ae:	5c71      	ldrb	r1, [r6, r1]
 80099b0:	0209      	lsls	r1, r1, #8
 80099b2:	185b      	adds	r3, r3, r1
 80099b4:	4641      	mov	r1, r8
 80099b6:	310b      	adds	r1, #11
 80099b8:	5c71      	ldrb	r1, [r6, r1]
 80099ba:	0409      	lsls	r1, r1, #16
 80099bc:	185b      	adds	r3, r3, r1
 80099be:	4641      	mov	r1, r8
 80099c0:	310c      	adds	r1, #12
 80099c2:	5c71      	ldrb	r1, [r6, r1]
 80099c4:	0609      	lsls	r1, r1, #24
 80099c6:	185b      	adds	r3, r3, r1
 80099c8:	6213      	str	r3, [r2, #32]
							break;
 80099ca:	f7fe fc2b 	bl	8008224 <PxMessagingTask+0xb0>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80099ce:	3201      	adds	r2, #1
 80099d0:	2338      	movs	r3, #56	; 0x38
 80099d2:	4363      	muls	r3, r4
 80099d4:	4968      	ldr	r1, [pc, #416]	; (8009b78 <PxMessagingTask+0x1a04>)
 80099d6:	18cb      	adds	r3, r1, r3
 80099d8:	5c9a      	ldrb	r2, [r3, r2]
 80099da:	4641      	mov	r1, r8
 80099dc:	3102      	adds	r1, #2
 80099de:	5c59      	ldrb	r1, [r3, r1]
 80099e0:	0209      	lsls	r1, r1, #8
 80099e2:	1852      	adds	r2, r2, r1
 80099e4:	4641      	mov	r1, r8
 80099e6:	3103      	adds	r1, #3
 80099e8:	5c59      	ldrb	r1, [r3, r1]
 80099ea:	0409      	lsls	r1, r1, #16
 80099ec:	1852      	adds	r2, r2, r1
 80099ee:	4641      	mov	r1, r8
 80099f0:	3104      	adds	r1, #4
 80099f2:	5c59      	ldrb	r1, [r3, r1]
 80099f4:	0609      	lsls	r1, r1, #24
 80099f6:	1852      	adds	r2, r2, r1
 80099f8:	4968      	ldr	r1, [pc, #416]	; (8009b9c <PxMessagingTask+0x1a28>)
 80099fa:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80099fc:	4642      	mov	r2, r8
 80099fe:	3205      	adds	r2, #5
 8009a00:	5c98      	ldrb	r0, [r3, r2]
 8009a02:	4642      	mov	r2, r8
 8009a04:	3206      	adds	r2, #6
 8009a06:	5c9a      	ldrb	r2, [r3, r2]
 8009a08:	0212      	lsls	r2, r2, #8
 8009a0a:	1880      	adds	r0, r0, r2
 8009a0c:	4642      	mov	r2, r8
 8009a0e:	3207      	adds	r2, #7
 8009a10:	5c9a      	ldrb	r2, [r3, r2]
 8009a12:	0412      	lsls	r2, r2, #16
 8009a14:	1880      	adds	r0, r0, r2
 8009a16:	4642      	mov	r2, r8
 8009a18:	3208      	adds	r2, #8
 8009a1a:	5c9a      	ldrb	r2, [r3, r2]
 8009a1c:	0612      	lsls	r2, r2, #24
 8009a1e:	1882      	adds	r2, r0, r2
 8009a20:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009a22:	4642      	mov	r2, r8
 8009a24:	3209      	adds	r2, #9
 8009a26:	5c98      	ldrb	r0, [r3, r2]
 8009a28:	3201      	adds	r2, #1
 8009a2a:	5c9a      	ldrb	r2, [r3, r2]
 8009a2c:	0212      	lsls	r2, r2, #8
 8009a2e:	1880      	adds	r0, r0, r2
 8009a30:	4642      	mov	r2, r8
 8009a32:	320b      	adds	r2, #11
 8009a34:	5c9a      	ldrb	r2, [r3, r2]
 8009a36:	0412      	lsls	r2, r2, #16
 8009a38:	1882      	adds	r2, r0, r2
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	300c      	adds	r0, #12
 8009a3e:	5c1b      	ldrb	r3, [r3, r0]
 8009a40:	061b      	lsls	r3, r3, #24
 8009a42:	18d3      	adds	r3, r2, r3
 8009a44:	608b      	str	r3, [r1, #8]
									break;
 8009a46:	e775      	b.n	8009934 <PxMessagingTask+0x17c0>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009a48:	3201      	adds	r2, #1
 8009a4a:	2338      	movs	r3, #56	; 0x38
 8009a4c:	4363      	muls	r3, r4
 8009a4e:	494a      	ldr	r1, [pc, #296]	; (8009b78 <PxMessagingTask+0x1a04>)
 8009a50:	18cb      	adds	r3, r1, r3
 8009a52:	5c9a      	ldrb	r2, [r3, r2]
 8009a54:	4641      	mov	r1, r8
 8009a56:	3102      	adds	r1, #2
 8009a58:	5c59      	ldrb	r1, [r3, r1]
 8009a5a:	0209      	lsls	r1, r1, #8
 8009a5c:	1852      	adds	r2, r2, r1
 8009a5e:	4641      	mov	r1, r8
 8009a60:	3103      	adds	r1, #3
 8009a62:	5c59      	ldrb	r1, [r3, r1]
 8009a64:	0409      	lsls	r1, r1, #16
 8009a66:	1852      	adds	r2, r2, r1
 8009a68:	4641      	mov	r1, r8
 8009a6a:	3104      	adds	r1, #4
 8009a6c:	5c59      	ldrb	r1, [r3, r1]
 8009a6e:	0609      	lsls	r1, r1, #24
 8009a70:	1852      	adds	r2, r2, r1
 8009a72:	494a      	ldr	r1, [pc, #296]	; (8009b9c <PxMessagingTask+0x1a28>)
 8009a74:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009a76:	4642      	mov	r2, r8
 8009a78:	3205      	adds	r2, #5
 8009a7a:	5c98      	ldrb	r0, [r3, r2]
 8009a7c:	4642      	mov	r2, r8
 8009a7e:	3206      	adds	r2, #6
 8009a80:	5c9a      	ldrb	r2, [r3, r2]
 8009a82:	0212      	lsls	r2, r2, #8
 8009a84:	1880      	adds	r0, r0, r2
 8009a86:	4642      	mov	r2, r8
 8009a88:	3207      	adds	r2, #7
 8009a8a:	5c9a      	ldrb	r2, [r3, r2]
 8009a8c:	0412      	lsls	r2, r2, #16
 8009a8e:	1880      	adds	r0, r0, r2
 8009a90:	4642      	mov	r2, r8
 8009a92:	3208      	adds	r2, #8
 8009a94:	5c9a      	ldrb	r2, [r3, r2]
 8009a96:	0612      	lsls	r2, r2, #24
 8009a98:	1882      	adds	r2, r0, r2
 8009a9a:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009a9c:	4642      	mov	r2, r8
 8009a9e:	3209      	adds	r2, #9
 8009aa0:	5c98      	ldrb	r0, [r3, r2]
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	5c9a      	ldrb	r2, [r3, r2]
 8009aa6:	0212      	lsls	r2, r2, #8
 8009aa8:	1880      	adds	r0, r0, r2
 8009aaa:	4642      	mov	r2, r8
 8009aac:	320b      	adds	r2, #11
 8009aae:	5c9a      	ldrb	r2, [r3, r2]
 8009ab0:	0412      	lsls	r2, r2, #16
 8009ab2:	1882      	adds	r2, r0, r2
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	300c      	adds	r0, #12
 8009ab8:	5c1b      	ldrb	r3, [r3, r0]
 8009aba:	061b      	lsls	r3, r3, #24
 8009abc:	18d3      	adds	r3, r2, r3
 8009abe:	614b      	str	r3, [r1, #20]
									break;
 8009ac0:	e738      	b.n	8009934 <PxMessagingTask+0x17c0>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009ac2:	4643      	mov	r3, r8
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	2238      	movs	r2, #56	; 0x38
 8009ac8:	4362      	muls	r2, r4
 8009aca:	492b      	ldr	r1, [pc, #172]	; (8009b78 <PxMessagingTask+0x1a04>)
 8009acc:	188a      	adds	r2, r1, r2
 8009ace:	5cd3      	ldrb	r3, [r2, r3]
 8009ad0:	4641      	mov	r1, r8
 8009ad2:	3102      	adds	r1, #2
 8009ad4:	5c51      	ldrb	r1, [r2, r1]
 8009ad6:	0209      	lsls	r1, r1, #8
 8009ad8:	185b      	adds	r3, r3, r1
 8009ada:	4641      	mov	r1, r8
 8009adc:	3103      	adds	r1, #3
 8009ade:	5c51      	ldrb	r1, [r2, r1]
 8009ae0:	0409      	lsls	r1, r1, #16
 8009ae2:	185b      	adds	r3, r3, r1
 8009ae4:	4641      	mov	r1, r8
 8009ae6:	3104      	adds	r1, #4
 8009ae8:	5c52      	ldrb	r2, [r2, r1]
 8009aea:	0612      	lsls	r2, r2, #24
 8009aec:	189b      	adds	r3, r3, r2
 8009aee:	4a2b      	ldr	r2, [pc, #172]	; (8009b9c <PxMessagingTask+0x1a28>)
 8009af0:	6193      	str	r3, [r2, #24]
 8009af2:	e71f      	b.n	8009934 <PxMessagingTask+0x17c0>
								ADCSelectChannel(ADCPort,"top");
 8009af4:	4e2a      	ldr	r6, [pc, #168]	; (8009ba0 <PxMessagingTask+0x1a2c>)
 8009af6:	0031      	movs	r1, r6
 8009af8:	f003 f8ee 	bl	800ccd8 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009afc:	4b22      	ldr	r3, [pc, #136]	; (8009b88 <PxMessagingTask+0x1a14>)
 8009afe:	7818      	ldrb	r0, [r3, #0]
 8009b00:	4a28      	ldr	r2, [pc, #160]	; (8009ba4 <PxMessagingTask+0x1a30>)
 8009b02:	0031      	movs	r1, r6
 8009b04:	f003 f91a 	bl	800cd3c <ReadADCChannel>
 8009b08:	e728      	b.n	800995c <PxMessagingTask+0x17e8>
								ADCSelectChannel(ADCPort,"bottom");
 8009b0a:	4e27      	ldr	r6, [pc, #156]	; (8009ba8 <PxMessagingTask+0x1a34>)
 8009b0c:	0031      	movs	r1, r6
 8009b0e:	f003 f8e3 	bl	800ccd8 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8009b12:	4b1d      	ldr	r3, [pc, #116]	; (8009b88 <PxMessagingTask+0x1a14>)
 8009b14:	7818      	ldrb	r0, [r3, #0]
 8009b16:	4a23      	ldr	r2, [pc, #140]	; (8009ba4 <PxMessagingTask+0x1a30>)
 8009b18:	0031      	movs	r1, r6
 8009b1a:	f003 f90f 	bl	800cd3c <ReadADCChannel>
 8009b1e:	e71d      	b.n	800995c <PxMessagingTask+0x17e8>
							ACK_FLAG =1;
 8009b20:	4b22      	ldr	r3, [pc, #136]	; (8009bac <PxMessagingTask+0x1a38>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	701a      	strb	r2, [r3, #0]
							break;
 8009b26:	f7fe fb7d 	bl	8008224 <PxMessagingTask+0xb0>
							rejected_FLAG =1;
 8009b2a:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <PxMessagingTask+0x1a3c>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
							break;
 8009b30:	f7fe fb78 	bl	8008224 <PxMessagingTask+0xb0>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009b34:	4643      	mov	r3, r8
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	003b      	movs	r3, r7
 8009b3a:	4652      	mov	r2, sl
 8009b3c:	9907      	ldr	r1, [sp, #28]
 8009b3e:	0030      	movs	r0, r6
 8009b40:	f7fe fb16 	bl	8008170 <User_MessagingParser>
 8009b44:	9005      	str	r0, [sp, #20]
							if(result == BOS_ERR_UnknownMessage){
 8009b46:	2801      	cmp	r0, #1
 8009b48:	d001      	beq.n	8009b4e <PxMessagingTask+0x19da>
 8009b4a:	f7fe fb6b 	bl	8008224 <PxMessagingTask+0xb0>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8009b4e:	4643      	mov	r3, r8
 8009b50:	9300      	str	r3, [sp, #0]
 8009b52:	003b      	movs	r3, r7
 8009b54:	4652      	mov	r2, sl
 8009b56:	9907      	ldr	r1, [sp, #28]
 8009b58:	0030      	movs	r0, r6
 8009b5a:	f000 fe07 	bl	800a76c <Module_MessagingTask>
 8009b5e:	9005      	str	r0, [sp, #20]
 8009b60:	f7fe fb60 	bl	8008224 <PxMessagingTask+0xb0>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009b64:	2200      	movs	r2, #0
 8009b66:	2100      	movs	r1, #0
 8009b68:	4650      	mov	r0, sl
 8009b6a:	f7fe f963 	bl	8007e34 <SendMessageToModule>
			result =BOS_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9305      	str	r3, [sp, #20]
 8009b72:	f7fe fb5c 	bl	800822e <PxMessagingTask+0xba>
 8009b76:	46c0      	nop			; (mov r8, r8)
 8009b78:	200006b4 	.word	0x200006b4
 8009b7c:	200008c8 	.word	0x200008c8
 8009b80:	0000ffff 	.word	0x0000ffff
 8009b84:	200008d0 	.word	0x200008d0
 8009b88:	20000e08 	.word	0x20000e08
 8009b8c:	20000e0a 	.word	0x20000e0a
 8009b90:	20000e18 	.word	0x20000e18
 8009b94:	20000e14 	.word	0x20000e14
 8009b98:	20000e04 	.word	0x20000e04
 8009b9c:	20000e1c 	.word	0x20000e1c
 8009ba0:	08018898 	.word	0x08018898
 8009ba4:	20000e0c 	.word	0x20000e0c
 8009ba8:	0801889c 	.word	0x0801889c
 8009bac:	20000314 	.word	0x20000314
 8009bb0:	200008c0 	.word	0x200008c0

08009bb4 <streamCommandParser>:

/*-----------------------------------------------------------*/


static bool streamCommandParser(const int8_t *pcCommandString, bool *pPortOrCLI, uint32_t *pPeriod, uint32_t *pTimeout, uint8_t *pPort, uint8_t *pModule)
{
 8009bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb6:	46ce      	mov	lr, r9
 8009bb8:	4647      	mov	r7, r8
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	0004      	movs	r4, r0
 8009bc0:	000f      	movs	r7, r1
 8009bc2:	4691      	mov	r9, r2
 8009bc4:	4698      	mov	r8, r3
	const char *pPeriodMSStr = NULL;
	const char *pTimeoutMSStr = NULL;

	portBASE_TYPE periodStrLen = 0;
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	9003      	str	r0, [sp, #12]
	portBASE_TYPE timeoutStrLen = 0;
 8009bca:	9002      	str	r0, [sp, #8]

	const char *pPortStr = NULL;
	const char *pModStr = NULL;

	portBASE_TYPE portStrLen = 0;
 8009bcc:	9001      	str	r0, [sp, #4]
	portBASE_TYPE modStrLen = 0;
 8009bce:	9000      	str	r0, [sp, #0]

	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &periodStrLen);
 8009bd0:	aa03      	add	r2, sp, #12
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	0020      	movs	r0, r4
 8009bd6:	f004 fb09 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8009bda:	0005      	movs	r5, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &timeoutStrLen);
 8009bdc:	aa02      	add	r2, sp, #8
 8009bde:	2102      	movs	r1, #2
 8009be0:	0020      	movs	r0, r4
 8009be2:	f004 fb03 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8009be6:	0006      	movs	r6, r0

	// At least 3 Parameters are required!
	if ((pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	d034      	beq.n	8009c56 <streamCommandParser+0xa2>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d034      	beq.n	8009c5a <streamCommandParser+0xa6>
		return false;

	// TODO: Check if Period and Timeout are integers or not!
	*pPeriod = atoi(pPeriodMSStr);
 8009bf0:	0028      	movs	r0, r5
 8009bf2:	f009 fa3e 	bl	8013072 <atoi>
 8009bf6:	464b      	mov	r3, r9
 8009bf8:	6018      	str	r0, [r3, #0]
	*pTimeout = atoi(pTimeoutMSStr);
 8009bfa:	0030      	movs	r0, r6
 8009bfc:	f009 fa39 	bl	8013072 <atoi>
 8009c00:	4643      	mov	r3, r8
 8009c02:	6018      	str	r0, [r3, #0]
	*pPortOrCLI = true;
 8009c04:	2301      	movs	r3, #1
 8009c06:	703b      	strb	r3, [r7, #0]

	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &portStrLen);
 8009c08:	aa01      	add	r2, sp, #4
 8009c0a:	2103      	movs	r1, #3
 8009c0c:	0020      	movs	r0, r4
 8009c0e:	f004 faed 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8009c12:	0005      	movs	r5, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &modStrLen);
 8009c14:	466a      	mov	r2, sp
 8009c16:	2104      	movs	r1, #4
 8009c18:	0020      	movs	r0, r4
 8009c1a:	f004 fae7 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 8009c1e:	1e04      	subs	r4, r0, #0

	if ((pModStr == NULL) && (pPortStr == NULL))
 8009c20:	d015      	beq.n	8009c4e <streamCommandParser+0x9a>
		return true;
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 8009c22:	2c00      	cmp	r4, #0
 8009c24:	d01b      	beq.n	8009c5e <streamCommandParser+0xaa>
 8009c26:	2d00      	cmp	r5, #0
 8009c28:	d01b      	beq.n	8009c62 <streamCommandParser+0xae>
		return false;

	*pPort = atoi(pPortStr);
 8009c2a:	0028      	movs	r0, r5
 8009c2c:	f009 fa21 	bl	8013072 <atoi>
 8009c30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c32:	7018      	strb	r0, [r3, #0]
	*pModule = atoi(pModStr);
 8009c34:	0020      	movs	r0, r4
 8009c36:	f009 fa1c 	bl	8013072 <atoi>
 8009c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c3c:	7018      	strb	r0, [r3, #0]
	*pPortOrCLI = false;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	703b      	strb	r3, [r7, #0]

	return true;
 8009c42:	2001      	movs	r0, #1
}
 8009c44:	b005      	add	sp, #20
 8009c46:	bcc0      	pop	{r6, r7}
 8009c48:	46b9      	mov	r9, r7
 8009c4a:	46b0      	mov	r8, r6
 8009c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((pModStr == NULL) && (pPortStr == NULL))
 8009c4e:	2d00      	cmp	r5, #0
 8009c50:	d1e7      	bne.n	8009c22 <streamCommandParser+0x6e>
		return true;
 8009c52:	2001      	movs	r0, #1
 8009c54:	e7f6      	b.n	8009c44 <streamCommandParser+0x90>
		return false;
 8009c56:	2000      	movs	r0, #0
 8009c58:	e7f4      	b.n	8009c44 <streamCommandParser+0x90>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e7f2      	b.n	8009c44 <streamCommandParser+0x90>
		return false;
 8009c5e:	2000      	movs	r0, #0
 8009c60:	e7f0      	b.n	8009c44 <streamCommandParser+0x90>
 8009c62:	2000      	movs	r0, #0
 8009c64:	e7ee      	b.n	8009c44 <streamCommandParser+0x90>
	...

08009c68 <unitCommand>:
		const int8_t *pcCommandString) {
 8009c68:	b510      	push	{r4, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	0004      	movs	r4, r0
 8009c6e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	9301      	str	r3, [sp, #4]
	pcParameterString1 = (int8_t*) FreeRTOS_CLIGetParameter(pcCommandString, 1,
 8009c74:	aa01      	add	r2, sp, #4
 8009c76:	2101      	movs	r1, #1
 8009c78:	f004 fab8 	bl	800e1ec <FreeRTOS_CLIGetParameter>
	if (!strncmp((const char*) pcParameterString1, "v", 1)) {
 8009c7c:	7803      	ldrb	r3, [r0, #0]
 8009c7e:	2b76      	cmp	r3, #118	; 0x76
 8009c80:	d009      	beq.n	8009c96 <unitCommand+0x2e>
	} else if (!strncmp((const char*) pcParameterString1, "a", 1)) {
 8009c82:	2b61      	cmp	r3, #97	; 0x61
 8009c84:	d010      	beq.n	8009ca8 <unitCommand+0x40>
		strcpy((char*) pcWriteBuffer, (char*) pcMessageWrongParam);
 8009c86:	2213      	movs	r2, #19
 8009c88:	490c      	ldr	r1, [pc, #48]	; (8009cbc <unitCommand+0x54>)
 8009c8a:	0020      	movs	r0, r4
 8009c8c:	f009 fa44 	bl	8013118 <memcpy>
}
 8009c90:	2000      	movs	r0, #0
 8009c92:	b002      	add	sp, #8
 8009c94:	bd10      	pop	{r4, pc}
		unit = Volt;
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <unitCommand+0x58>)
 8009c98:	2201      	movs	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 8009c9c:	321d      	adds	r2, #29
 8009c9e:	4909      	ldr	r1, [pc, #36]	; (8009cc4 <unitCommand+0x5c>)
 8009ca0:	0020      	movs	r0, r4
 8009ca2:	f009 fa39 	bl	8013118 <memcpy>
	if (H2AR3_ERR_WrongParams == result) {
 8009ca6:	e7f3      	b.n	8009c90 <unitCommand+0x28>
		unit = Amp;
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <unitCommand+0x58>)
 8009caa:	2202      	movs	r2, #2
 8009cac:	701a      	strb	r2, [r3, #0]
		strcpy((char*) pcWriteBuffer,
 8009cae:	321e      	adds	r2, #30
 8009cb0:	4905      	ldr	r1, [pc, #20]	; (8009cc8 <unitCommand+0x60>)
 8009cb2:	0020      	movs	r0, r4
 8009cb4:	f009 fa30 	bl	8013118 <memcpy>
	if (H2AR3_ERR_WrongParams == result) {
 8009cb8:	e7ea      	b.n	8009c90 <unitCommand+0x28>
 8009cba:	46c0      	nop			; (mov r8, r8)
 8009cbc:	080187b4 	.word	0x080187b4
 8009cc0:	20000100 	.word	0x20000100
 8009cc4:	0801a53c 	.word	0x0801a53c
 8009cc8:	0801a55c 	.word	0x0801a55c

08009ccc <CheckForEnterKey>:
static void CheckForEnterKey(void) {
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	b082      	sub	sp, #8
	for (uint8_t chr = 0; chr < MSG_RX_BUF_SIZE; chr++) {
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	e001      	b.n	8009cd8 <CheckForEnterKey+0xc>
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2bbf      	cmp	r3, #191	; 0xbf
 8009cda:	d81a      	bhi.n	8009d12 <CheckForEnterKey+0x46>
		if (UARTRxBuf[PcPort - 1][chr] == '\r') {
 8009cdc:	4a0e      	ldr	r2, [pc, #56]	; (8009d18 <CheckForEnterKey+0x4c>)
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	3a01      	subs	r2, #1
 8009ce2:	001c      	movs	r4, r3
 8009ce4:	0051      	lsls	r1, r2, #1
 8009ce6:	1889      	adds	r1, r1, r2
 8009ce8:	0188      	lsls	r0, r1, #6
 8009cea:	490c      	ldr	r1, [pc, #48]	; (8009d1c <CheckForEnterKey+0x50>)
 8009cec:	1809      	adds	r1, r1, r0
 8009cee:	5cc9      	ldrb	r1, [r1, r3]
 8009cf0:	290d      	cmp	r1, #13
 8009cf2:	d1ef      	bne.n	8009cd4 <CheckForEnterKey+0x8>
			UARTRxBuf[PcPort - 1][chr] = 0;
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <CheckForEnterKey+0x50>)
 8009cf6:	1812      	adds	r2, r2, r0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	5513      	strb	r3, [r2, r4]
			startMeasurementRanging = STOP_MEASUREMENT_RANGING;
 8009cfc:	4a08      	ldr	r2, [pc, #32]	; (8009d20 <CheckForEnterKey+0x54>)
 8009cfe:	7013      	strb	r3, [r2, #0]
			global_mode = IDLE_CASE;		      // Stop the streaming task
 8009d00:	4a08      	ldr	r2, [pc, #32]	; (8009d24 <CheckForEnterKey+0x58>)
 8009d02:	7013      	strb	r3, [r2, #0]
			xTimerStop(xTimer, 0);            // Stop the timeout timer
 8009d04:	4a08      	ldr	r2, [pc, #32]	; (8009d28 <CheckForEnterKey+0x5c>)
 8009d06:	6810      	ldr	r0, [r2, #0]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	390a      	subs	r1, #10
 8009d0e:	f005 fdd5 	bl	800f8bc <xTimerGenericCommand>
}
 8009d12:	b002      	add	sp, #8
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	46c0      	nop			; (mov r8, r8)
 8009d18:	2000066e 	.word	0x2000066e
 8009d1c:	20000a60 	.word	0x20000a60
 8009d20:	20000ff8 	.word	0x20000ff8
 8009d24:	20005914 	.word	0x20005914
 8009d28:	20001000 	.word	0x20001000

08009d2c <Adc_Calculation>:
static uint32_t Adc_Calculation(uint8_t selected) {
 8009d2c:	b510      	push	{r4, lr}
	switch (selected) {
 8009d2e:	2801      	cmp	r0, #1
 8009d30:	d019      	beq.n	8009d66 <Adc_Calculation+0x3a>
 8009d32:	2802      	cmp	r0, #2
 8009d34:	d114      	bne.n	8009d60 <Adc_Calculation+0x34>
		ADC_Select_CH7();
 8009d36:	f000 ff0b 	bl	800ab50 <ADC_Select_CH7>
		HAL_ADC_Start(&hadc);
 8009d3a:	4c16      	ldr	r4, [pc, #88]	; (8009d94 <Adc_Calculation+0x68>)
 8009d3c:	0020      	movs	r0, r4
 8009d3e:	f006 fa4d 	bl	80101dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 8009d42:	21fa      	movs	r1, #250	; 0xfa
 8009d44:	0089      	lsls	r1, r1, #2
 8009d46:	0020      	movs	r0, r4
 8009d48:	f006 fa9a 	bl	8010280 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 8009d4c:	0020      	movs	r0, r4
 8009d4e:	f006 fb3b 	bl	80103c8 <HAL_ADC_GetValue>
 8009d52:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <Adc_Calculation+0x6c>)
 8009d54:	6018      	str	r0, [r3, #0]
		HAL_ADC_Stop(&hadc);
 8009d56:	0020      	movs	r0, r4
 8009d58:	f006 fa70 	bl	801023c <HAL_ADC_Stop>
		ADC_Deselect_CH7();
 8009d5c:	f000 ff0a 	bl	800ab74 <ADC_Deselect_CH7>
	return tmp_adc;
 8009d60:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <Adc_Calculation+0x6c>)
 8009d62:	6818      	ldr	r0, [r3, #0]
}
 8009d64:	bd10      	pop	{r4, pc}
		ADC_Select_CH9();
 8009d66:	f000 ff17 	bl	800ab98 <ADC_Select_CH9>
		HAL_ADC_Start(&hadc);
 8009d6a:	4c0a      	ldr	r4, [pc, #40]	; (8009d94 <Adc_Calculation+0x68>)
 8009d6c:	0020      	movs	r0, r4
 8009d6e:	f006 fa35 	bl	80101dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1000);
 8009d72:	21fa      	movs	r1, #250	; 0xfa
 8009d74:	0089      	lsls	r1, r1, #2
 8009d76:	0020      	movs	r0, r4
 8009d78:	f006 fa82 	bl	8010280 <HAL_ADC_PollForConversion>
		tmp_adc = HAL_ADC_GetValue(&hadc);
 8009d7c:	0020      	movs	r0, r4
 8009d7e:	f006 fb23 	bl	80103c8 <HAL_ADC_GetValue>
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <Adc_Calculation+0x6c>)
 8009d84:	6018      	str	r0, [r3, #0]
		HAL_ADC_Stop(&hadc);
 8009d86:	0020      	movs	r0, r4
 8009d88:	f006 fa58 	bl	801023c <HAL_ADC_Stop>
		ADC_Deselect_CH9();
 8009d8c:	f000 ff16 	bl	800abbc <ADC_Deselect_CH9>
		break;
 8009d90:	e7e6      	b.n	8009d60 <Adc_Calculation+0x34>
 8009d92:	46c0      	nop			; (mov r8, r8)
 8009d94:	20005b64 	.word	0x20005b64
 8009d98:	200059c8 	.word	0x200059c8

08009d9c <HandleTimeout>:
static void HandleTimeout(TimerHandle_t xTimer) {
 8009d9c:	b510      	push	{r4, lr}
	tid = (uint32_t) pvTimerGetTimerID(xTimer);
 8009d9e:	f005 feb8 	bl	800fb12 <pvTimerGetTimerID>
	if (TIMERID_TIMEOUT_MEASUREMENT == tid) {
 8009da2:	28ff      	cmp	r0, #255	; 0xff
 8009da4:	d000      	beq.n	8009da8 <HandleTimeout+0xc>
}
 8009da6:	bd10      	pop	{r4, pc}
		global_mode = IDLE_CASE;		      // Stop the streaming task
 8009da8:	2300      	movs	r3, #0
 8009daa:	4a02      	ldr	r2, [pc, #8]	; (8009db4 <HandleTimeout+0x18>)
 8009dac:	7013      	strb	r3, [r2, #0]
		startMeasurementRanging = STOP_MEASUREMENT_RANGING; // stop streaming
 8009dae:	4a02      	ldr	r2, [pc, #8]	; (8009db8 <HandleTimeout+0x1c>)
 8009db0:	7013      	strb	r3, [r2, #0]
}
 8009db2:	e7f8      	b.n	8009da6 <HandleTimeout+0xa>
 8009db4:	20005914 	.word	0x20005914
 8009db8:	20000ff8 	.word	0x20000ff8

08009dbc <SystemClock_Config>:
void SystemClock_Config(void) {
 8009dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dbe:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009dc0:	2401      	movs	r4, #1
 8009dc2:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009dc4:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009dc6:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8009dc8:	2310      	movs	r3, #16
 8009dca:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009dcc:	2702      	movs	r7, #2
 8009dce:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009dd0:	2680      	movs	r6, #128	; 0x80
 8009dd2:	0276      	lsls	r6, r6, #9
 8009dd4:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009dd6:	2380      	movs	r3, #128	; 0x80
 8009dd8:	035b      	lsls	r3, r3, #13
 8009dda:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009ddc:	2500      	movs	r5, #0
 8009dde:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009de0:	a80d      	add	r0, sp, #52	; 0x34
 8009de2:	f007 fc85 	bl	80116f0 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8009de6:	2307      	movs	r3, #7
 8009de8:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009dea:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009dec:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009dee:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8009df0:	2101      	movs	r1, #1
 8009df2:	a809      	add	r0, sp, #36	; 0x24
 8009df4:	f007 ff22 	bl	8011c3c <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009df8:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <SystemClock_Config+0xa8>)
 8009dfa:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009dfc:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009dfe:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009e00:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009e02:	a802      	add	r0, sp, #8
 8009e04:	f008 f8b0 	bl	8011f68 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009e08:	4d17      	ldr	r5, [pc, #92]	; (8009e68 <SystemClock_Config+0xac>)
 8009e0a:	69ea      	ldr	r2, [r5, #28]
 8009e0c:	2180      	movs	r1, #128	; 0x80
 8009e0e:	0549      	lsls	r1, r1, #21
 8009e10:	430a      	orrs	r2, r1
 8009e12:	61ea      	str	r2, [r5, #28]
 8009e14:	69eb      	ldr	r3, [r5, #28]
 8009e16:	400b      	ands	r3, r1
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 8009e1c:	f007 fc5e 	bl	80116dc <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009e20:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009e22:	23c0      	movs	r3, #192	; 0xc0
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009e28:	a802      	add	r0, sp, #8
 8009e2a:	f008 f89d 	bl	8011f68 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009e2e:	f008 f877 	bl	8011f20 <HAL_RCC_GetHCLKFreq>
 8009e32:	21fa      	movs	r1, #250	; 0xfa
 8009e34:	0089      	lsls	r1, r1, #2
 8009e36:	f7f6 f98b 	bl	8000150 <__udivsi3>
 8009e3a:	f006 fbb5 	bl	80105a8 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009e3e:	2004      	movs	r0, #4
 8009e40:	f006 fbce 	bl	80105e0 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE()
 8009e44:	69ab      	ldr	r3, [r5, #24]
 8009e46:	4323      	orrs	r3, r4
 8009e48:	61ab      	str	r3, [r5, #24]
 8009e4a:	69ab      	ldr	r3, [r5, #24]
 8009e4c:	401c      	ands	r4, r3
 8009e4e:	9401      	str	r4, [sp, #4]
 8009e50:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009e52:	2001      	movs	r0, #1
 8009e54:	2200      	movs	r2, #0
 8009e56:	2100      	movs	r1, #0
 8009e58:	4240      	negs	r0, r0
 8009e5a:	f006 fb61 	bl	8010520 <HAL_NVIC_SetPriority>
}
 8009e5e:	b01b      	add	sp, #108	; 0x6c
 8009e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e62:	46c0      	nop			; (mov r8, r8)
 8009e64:	00040003 	.word	0x00040003
 8009e68:	40021000 	.word	0x40021000

08009e6c <SaveToRO>:
uint8_t SaveToRO(void) {
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6e:	46ce      	mov	lr, r9
 8009e70:	4647      	mov	r7, r8
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b089      	sub	sp, #36	; 0x24
	uint8_t snipBuffer[sizeof(snippet_t) + 1] = { 0 };
 8009e76:	2300      	movs	r3, #0
 8009e78:	9302      	str	r3, [sp, #8]
 8009e7a:	2211      	movs	r2, #17
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	a803      	add	r0, sp, #12
 8009e80:	f009 f953 	bl	801312a <memset>
	HAL_FLASH_Unlock();
 8009e84:	f007 f9b6 	bl	80111f4 <HAL_FLASH_Unlock>
	FLASH_PageErase(RO_START_ADDRESS);
 8009e88:	4868      	ldr	r0, [pc, #416]	; (800a02c <SaveToRO+0x1c0>)
 8009e8a:	f007 fa63 	bl	8011354 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation(
 8009e8e:	4868      	ldr	r0, [pc, #416]	; (800a030 <SaveToRO+0x1c4>)
 8009e90:	f007 f9ce 	bl	8011230 <FLASH_WaitForLastOperation>
 8009e94:	1e04      	subs	r4, r0, #0
 8009e96:	4681      	mov	r9, r0
	if (FlashStatus != HAL_OK) {
 8009e98:	d10a      	bne.n	8009eb0 <SaveToRO+0x44>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8009e9a:	4a66      	ldr	r2, [pc, #408]	; (800a034 <SaveToRO+0x1c8>)
 8009e9c:	6913      	ldr	r3, [r2, #16]
 8009e9e:	2102      	movs	r1, #2
 8009ea0:	438b      	bics	r3, r1
 8009ea2:	6113      	str	r3, [r2, #16]
	if (myID) {
 8009ea4:	4b64      	ldr	r3, [pc, #400]	; (800a038 <SaveToRO+0x1cc>)
 8009ea6:	781a      	ldrb	r2, [r3, #0]
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	d10b      	bne.n	8009ec4 <SaveToRO+0x58>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009eac:	4e63      	ldr	r6, [pc, #396]	; (800a03c <SaveToRO+0x1d0>)
 8009eae:	e088      	b.n	8009fc2 <SaveToRO+0x156>
		return pFlash.ErrorCode;
 8009eb0:	4b63      	ldr	r3, [pc, #396]	; (800a040 <SaveToRO+0x1d4>)
 8009eb2:	69db      	ldr	r3, [r3, #28]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4699      	mov	r9, r3
}
 8009eb8:	4648      	mov	r0, r9
 8009eba:	b009      	add	sp, #36	; 0x24
 8009ebc:	bcc0      	pop	{r6, r7}
 8009ebe:	46b9      	mov	r9, r7
 8009ec0:	46b0      	mov	r8, r6
 8009ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N << 8) + myID;
 8009ec4:	4b5f      	ldr	r3, [pc, #380]	; (800a044 <SaveToRO+0x1d8>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	021b      	lsls	r3, r3, #8
 8009eca:	18d2      	adds	r2, r2, r3
 8009ecc:	b292      	uxth	r2, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4956      	ldr	r1, [pc, #344]	; (800a02c <SaveToRO+0x1c0>)
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	f007 f9d8 	bl	8011288 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation(
 8009ed8:	4855      	ldr	r0, [pc, #340]	; (800a030 <SaveToRO+0x1c4>)
 8009eda:	f007 f9a9 	bl	8011230 <FLASH_WaitForLastOperation>
 8009ede:	9001      	str	r0, [sp, #4]
		if (FlashStatus != HAL_OK) {
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d107      	bne.n	8009ef4 <SaveToRO+0x88>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009ee4:	4a53      	ldr	r2, [pc, #332]	; (800a034 <SaveToRO+0x1c8>)
 8009ee6:	6913      	ldr	r3, [r2, #16]
 8009ee8:	2101      	movs	r1, #1
 8009eea:	438b      	bics	r3, r1
 8009eec:	6113      	str	r3, [r2, #16]
		for (uint8_t i = 1; i <= N; i++) {
 8009eee:	2501      	movs	r5, #1
	uint16_t add = 2, temp = 0;
 8009ef0:	2702      	movs	r7, #2
		for (uint8_t i = 1; i <= N; i++) {
 8009ef2:	e02f      	b.n	8009f54 <SaveToRO+0xe8>
			return pFlash.ErrorCode;
 8009ef4:	4b52      	ldr	r3, [pc, #328]	; (800a040 <SaveToRO+0x1d4>)
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	4699      	mov	r9, r3
 8009efc:	e7dc      	b.n	8009eb8 <SaveToRO+0x4c>
						return pFlash.ErrorCode;
 8009efe:	4b50      	ldr	r3, [pc, #320]	; (800a040 <SaveToRO+0x1d4>)
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	4699      	mov	r9, r3
 8009f06:	e7d7      	b.n	8009eb8 <SaveToRO+0x4c>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009f08:	3601      	adds	r6, #1
 8009f0a:	b2f6      	uxtb	r6, r6
 8009f0c:	2e0a      	cmp	r6, #10
 8009f0e:	d81f      	bhi.n	8009f50 <SaveToRO+0xe4>
				if (array[i - 1][0]) {
 8009f10:	1e6a      	subs	r2, r5, #1
 8009f12:	00d3      	lsls	r3, r2, #3
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	494b      	ldr	r1, [pc, #300]	; (800a048 <SaveToRO+0x1dc>)
 8009f1a:	5a5b      	ldrh	r3, [r3, r1]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d0f3      	beq.n	8009f08 <SaveToRO+0x9c>
					RO_START_ADDRESS + add, array[i - 1][j]);
 8009f20:	00d3      	lsls	r3, r2, #3
 8009f22:	1a9a      	subs	r2, r3, r2
 8009f24:	1992      	adds	r2, r2, r6
 8009f26:	0052      	lsls	r2, r2, #1
 8009f28:	5a52      	ldrh	r2, [r2, r1]
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8009f2a:	4b40      	ldr	r3, [pc, #256]	; (800a02c <SaveToRO+0x1c0>)
 8009f2c:	18f9      	adds	r1, r7, r3
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2001      	movs	r0, #1
 8009f32:	f007 f9a9 	bl	8011288 <HAL_FLASH_Program>
					add += 2;
 8009f36:	3702      	adds	r7, #2
 8009f38:	b2bf      	uxth	r7, r7
					FlashStatus = FLASH_WaitForLastOperation(
 8009f3a:	483d      	ldr	r0, [pc, #244]	; (800a030 <SaveToRO+0x1c4>)
 8009f3c:	f007 f978 	bl	8011230 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d1dc      	bne.n	8009efe <SaveToRO+0x92>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009f44:	4a3b      	ldr	r2, [pc, #236]	; (800a034 <SaveToRO+0x1c8>)
 8009f46:	6913      	ldr	r3, [r2, #16]
 8009f48:	2101      	movs	r1, #1
 8009f4a:	438b      	bics	r3, r1
 8009f4c:	6113      	str	r3, [r2, #16]
 8009f4e:	e7db      	b.n	8009f08 <SaveToRO+0x9c>
		for (uint8_t i = 1; i <= N; i++) {
 8009f50:	3501      	adds	r5, #1
 8009f52:	b2ed      	uxtb	r5, r5
 8009f54:	4b3b      	ldr	r3, [pc, #236]	; (800a044 <SaveToRO+0x1d8>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	42ab      	cmp	r3, r5
 8009f5a:	d3a7      	bcc.n	8009eac <SaveToRO+0x40>
			for (uint8_t j = 0; j <= MaxNumOfPorts; j++) {
 8009f5c:	9e01      	ldr	r6, [sp, #4]
 8009f5e:	e7d5      	b.n	8009f0c <SaveToRO+0xa0>
					return pFlash.ErrorCode;
 8009f60:	4b37      	ldr	r3, [pc, #220]	; (800a040 <SaveToRO+0x1d4>)
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	b2db      	uxtb	r3, r3
 8009f66:	4699      	mov	r9, r3
 8009f68:	e7a6      	b.n	8009eb8 <SaveToRO+0x4c>
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009f6a:	464d      	mov	r5, r9
 8009f6c:	e007      	b.n	8009f7e <SaveToRO+0x112>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8009f6e:	4a31      	ldr	r2, [pc, #196]	; (800a034 <SaveToRO+0x1c8>)
 8009f70:	6913      	ldr	r3, [r2, #16]
 8009f72:	2101      	movs	r1, #1
 8009f74:	438b      	bics	r3, r1
 8009f76:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 8009f78:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < ((strlen(snippets[s].cmd) + 1) / 2); j++) {
 8009f7a:	3501      	adds	r5, #1
 8009f7c:	b2ed      	uxtb	r5, r5
 8009f7e:	00bb      	lsls	r3, r7, #2
 8009f80:	19db      	adds	r3, r3, r7
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4a31      	ldr	r2, [pc, #196]	; (800a04c <SaveToRO+0x1e0>)
 8009f86:	18d3      	adds	r3, r2, r3
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	4698      	mov	r8, r3
 8009f8c:	0018      	movs	r0, r3
 8009f8e:	f7f6 f8c3 	bl	8000118 <strlen>
 8009f92:	3001      	adds	r0, #1
 8009f94:	0840      	lsrs	r0, r0, #1
 8009f96:	4285      	cmp	r5, r0
 8009f98:	d211      	bcs.n	8009fbe <SaveToRO+0x152>
						*(uint16_t*) (snippets[s].cmd + j * 2));
 8009f9a:	006b      	lsls	r3, r5, #1
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	5ad2      	ldrh	r2, [r2, r3]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	0031      	movs	r1, r6
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	f007 f96f 	bl	8011288 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 8009faa:	4821      	ldr	r0, [pc, #132]	; (800a030 <SaveToRO+0x1c4>)
 8009fac:	f007 f940 	bl	8011230 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d0dc      	beq.n	8009f6e <SaveToRO+0x102>
					return pFlash.ErrorCode;
 8009fb4:	4b22      	ldr	r3, [pc, #136]	; (800a040 <SaveToRO+0x1d4>)
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	4699      	mov	r9, r3
 8009fbc:	e77c      	b.n	8009eb8 <SaveToRO+0x4c>
	for (uint8_t s = 0; s < numOfRecordedSnippets; s++) {
 8009fbe:	3401      	adds	r4, #1
 8009fc0:	b2e4      	uxtb	r4, r4
 8009fc2:	4b23      	ldr	r3, [pc, #140]	; (800a050 <SaveToRO+0x1e4>)
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	42a3      	cmp	r3, r4
 8009fc8:	d92d      	bls.n	800a026 <SaveToRO+0x1ba>
		if (snippets[s].cond.conditionType) {
 8009fca:	0027      	movs	r7, r4
 8009fcc:	00a3      	lsls	r3, r4, #2
 8009fce:	191b      	adds	r3, r3, r4
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4a1e      	ldr	r2, [pc, #120]	; (800a04c <SaveToRO+0x1e0>)
 8009fd4:	5c9b      	ldrb	r3, [r3, r2]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0f1      	beq.n	8009fbe <SaveToRO+0x152>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 8009fda:	23fe      	movs	r3, #254	; 0xfe
 8009fdc:	aa02      	add	r2, sp, #8
 8009fde:	7013      	strb	r3, [r2, #0]
			memcpy((uint8_t*) &snipBuffer[1], (uint8_t*) &snippets[s],
 8009fe0:	00a1      	lsls	r1, r4, #2
 8009fe2:	1909      	adds	r1, r1, r4
 8009fe4:	0089      	lsls	r1, r1, #2
 8009fe6:	4b19      	ldr	r3, [pc, #100]	; (800a04c <SaveToRO+0x1e0>)
 8009fe8:	18c9      	adds	r1, r1, r3
 8009fea:	2214      	movs	r2, #20
 8009fec:	ab02      	add	r3, sp, #8
 8009fee:	1c58      	adds	r0, r3, #1
 8009ff0:	f009 f892 	bl	8013118 <memcpy>
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 8009ff4:	464d      	mov	r5, r9
 8009ff6:	2d09      	cmp	r5, #9
 8009ff8:	d8b7      	bhi.n	8009f6a <SaveToRO+0xfe>
						*(uint16_t*) &snipBuffer[j * 2]);
 8009ffa:	006b      	lsls	r3, r5, #1
 8009ffc:	aa02      	add	r2, sp, #8
 8009ffe:	5ad2      	ldrh	r2, [r2, r3]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd,
 800a000:	2300      	movs	r3, #0
 800a002:	0031      	movs	r1, r6
 800a004:	2001      	movs	r0, #1
 800a006:	f007 f93f 	bl	8011288 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation(
 800a00a:	4809      	ldr	r0, [pc, #36]	; (800a030 <SaveToRO+0x1c4>)
 800a00c:	f007 f910 	bl	8011230 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800a010:	2800      	cmp	r0, #0
 800a012:	d1a5      	bne.n	8009f60 <SaveToRO+0xf4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a014:	4a07      	ldr	r2, [pc, #28]	; (800a034 <SaveToRO+0x1c8>)
 800a016:	6913      	ldr	r3, [r2, #16]
 800a018:	2101      	movs	r1, #1
 800a01a:	438b      	bics	r3, r1
 800a01c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800a01e:	3602      	adds	r6, #2
			for (uint8_t j = 0; j < (sizeof(snippet_t) / 2); j++) {
 800a020:	3501      	adds	r5, #1
 800a022:	b2ed      	uxtb	r5, r5
 800a024:	e7e7      	b.n	8009ff6 <SaveToRO+0x18a>
	HAL_FLASH_Lock();
 800a026:	f007 f8f9 	bl	801121c <HAL_FLASH_Lock>
	return result;
 800a02a:	e745      	b.n	8009eb8 <SaveToRO+0x4c>
 800a02c:	0801d800 	.word	0x0801d800
 800a030:	0000c350 	.word	0x0000c350
 800a034:	40022000 	.word	0x40022000
 800a038:	20000084 	.word	0x20000084
 800a03c:	0801dc00 	.word	0x0801dc00
 800a040:	20005c90 	.word	0x20005c90
 800a044:	20000030 	.word	0x20000030
 800a048:	200000d8 	.word	0x200000d8
 800a04c:	200057b0 	.word	0x200057b0
 800a050:	200009af 	.word	0x200009af

0800a054 <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a054:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a056:	f003 fe37 	bl	800dcc8 <GetUart>
 800a05a:	0004      	movs	r4, r0
	huart->Init.BaudRate =57600;
 800a05c:	23e1      	movs	r3, #225	; 0xe1
 800a05e:	021b      	lsls	r3, r3, #8
 800a060:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a062:	2380      	movs	r3, #128	; 0x80
 800a064:	00db      	lsls	r3, r3, #3
 800a066:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a068:	2380      	movs	r3, #128	; 0x80
 800a06a:	015b      	lsls	r3, r3, #5
 800a06c:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a06e:	f008 fe93 	bl	8012d98 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a072:	6822      	ldr	r2, [r4, #0]
 800a074:	6813      	ldr	r3, [r2, #0]
 800a076:	2120      	movs	r1, #32
 800a078:	430b      	orrs	r3, r1
 800a07a:	6013      	str	r3, [r2, #0]
}
 800a07c:	bd10      	pop	{r4, pc}
	...

0800a080 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a082:	46c6      	mov	lr, r8
 800a084:	b500      	push	{lr}
 800a086:	b084      	sub	sp, #16
 800a088:	4680      	mov	r8, r0
 800a08a:	000e      	movs	r6, r1
 800a08c:	0014      	movs	r4, r2
 800a08e:	001f      	movs	r7, r3
	myOutport =FindRoute(myID,dst);
 800a090:	4b25      	ldr	r3, [pc, #148]	; (800a128 <remoteBootloaderUpdate+0xa8>)
 800a092:	7818      	ldrb	r0, [r3, #0]
 800a094:	f7f9 fbd0 	bl	8003838 <FindRoute>
 800a098:	0005      	movs	r5, r0
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a09a:	2f00      	cmp	r7, #0
 800a09c:	d003      	beq.n	800a0a6 <remoteBootloaderUpdate+0x26>
 800a09e:	4b22      	ldr	r3, [pc, #136]	; (800a128 <remoteBootloaderUpdate+0xa8>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	42b3      	cmp	r3, r6
 800a0a4:	d01b      	beq.n	800a0de <remoteBootloaderUpdate+0x5e>
	if(src == myID){
 800a0a6:	4b20      	ldr	r3, [pc, #128]	; (800a128 <remoteBootloaderUpdate+0xa8>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	4543      	cmp	r3, r8
 800a0ac:	d019      	beq.n	800a0e2 <remoteBootloaderUpdate+0x62>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a0ae:	0020      	movs	r0, r4
 800a0b0:	f7ff ffd0 	bl	800a054 <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a0b4:	0028      	movs	r0, r5
 800a0b6:	f7ff ffcd 	bl	800a054 <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a0ba:	4b1b      	ldr	r3, [pc, #108]	; (800a128 <remoteBootloaderUpdate+0xa8>)
 800a0bc:	7819      	ldrb	r1, [r3, #0]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9303      	str	r3, [sp, #12]
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	9302      	str	r3, [sp, #8]
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	3303      	adds	r3, #3
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	000b      	movs	r3, r1
 800a0ce:	002a      	movs	r2, r5
 800a0d0:	0020      	movs	r0, r4
 800a0d2:	f7fd fed7 	bl	8007e84 <StartScastDMAStream>
}
 800a0d6:	b004      	add	sp, #16
 800a0d8:	bc80      	pop	{r7}
 800a0da:	46b8      	mov	r8, r7
 800a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		myOutport =outport;
 800a0de:	003d      	movs	r5, r7
 800a0e0:	e7e1      	b.n	800a0a6 <remoteBootloaderUpdate+0x26>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a0e2:	f004 f87f 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 800a0e6:	4680      	mov	r8, r0
		if(outport == 0)		// This is a remote module update
 800a0e8:	2f00      	cmp	r7, #0
 800a0ea:	d116      	bne.n	800a11a <remoteBootloaderUpdate+0x9a>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <remoteBootloaderUpdate+0xac>)
 800a0ee:	6819      	ldr	r1, [r3, #0]
 800a0f0:	0032      	movs	r2, r6
 800a0f2:	f009 fdd3 	bl	8013c9c <siprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a0f6:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <remoteBootloaderUpdate+0xb0>)
 800a0f8:	6819      	ldr	r1, [r3, #0]
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f009 fdee 	bl	8013cdc <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a100:	4640      	mov	r0, r8
 800a102:	f7f6 f809 	bl	8000118 <strlen>
 800a106:	b282      	uxth	r2, r0
 800a108:	2332      	movs	r3, #50	; 0x32
 800a10a:	4641      	mov	r1, r8
 800a10c:	0020      	movs	r0, r4
 800a10e:	f003 fe1f 	bl	800dd50 <writePxITMutex>
		Delay_ms(100);
 800a112:	2064      	movs	r0, #100	; 0x64
 800a114:	f005 fed2 	bl	800febc <HAL_Delay>
 800a118:	e7c9      	b.n	800a0ae <remoteBootloaderUpdate+0x2e>
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <remoteBootloaderUpdate+0xb4>)
 800a11c:	6819      	ldr	r1, [r3, #0]
 800a11e:	003b      	movs	r3, r7
 800a120:	0032      	movs	r2, r6
 800a122:	f009 fdbb 	bl	8013c9c <siprintf>
 800a126:	e7e6      	b.n	800a0f6 <remoteBootloaderUpdate+0x76>
 800a128:	20000084 	.word	0x20000084
 800a12c:	200000a8 	.word	0x200000a8
 800a130:	200000b0 	.word	0x200000b0
 800a134:	200000ac 	.word	0x200000ac

0800a138 <Module_Peripheral_Init>:
void Module_Peripheral_Init(void) {
 800a138:	b500      	push	{lr}
 800a13a:	b085      	sub	sp, #20
	MX_USART1_UART_Init();
 800a13c:	f003 fc94 	bl	800da68 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800a140:	f003 fcaa 	bl	800da98 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a144:	f003 fcca 	bl	800dadc <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800a148:	f003 fce0 	bl	800db0c <MX_USART4_UART_Init>
	MX_USART6_UART_Init();
 800a14c:	f003 fcf6 	bl	800db3c <MX_USART6_UART_Init>
	xTaskCreate(VoltAmpTask, (const char* ) "VoltAmpTask",
 800a150:	2296      	movs	r2, #150	; 0x96
 800a152:	2300      	movs	r3, #0
 800a154:	9303      	str	r3, [sp, #12]
 800a156:	9302      	str	r3, [sp, #8]
 800a158:	4b06      	ldr	r3, [pc, #24]	; (800a174 <Module_Peripheral_Init+0x3c>)
 800a15a:	9301      	str	r3, [sp, #4]
 800a15c:	2303      	movs	r3, #3
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	2300      	movs	r3, #0
 800a162:	0052      	lsls	r2, r2, #1
 800a164:	4904      	ldr	r1, [pc, #16]	; (800a178 <Module_Peripheral_Init+0x40>)
 800a166:	4805      	ldr	r0, [pc, #20]	; (800a17c <Module_Peripheral_Init+0x44>)
 800a168:	f004 fd3a 	bl	800ebe0 <xTaskGenericCreate>
	MX_ADC_Init();
 800a16c:	f002 fbe4 	bl	800c938 <MX_ADC_Init>
}
 800a170:	b005      	add	sp, #20
 800a172:	bd00      	pop	{pc}
 800a174:	20000ff4 	.word	0x20000ff4
 800a178:	0801a57c 	.word	0x0801a57c
 800a17c:	0800a4bd 	.word	0x0800a4bd

0800a180 <RegisterModuleCLICommands>:
void RegisterModuleCLICommands(void) {
 800a180:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&sampleCommandDefinition);
 800a182:	4808      	ldr	r0, [pc, #32]	; (800a1a4 <RegisterModuleCLICommands+0x24>)
 800a184:	f003 ffae 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&streamCommandDefinition);
 800a188:	4807      	ldr	r0, [pc, #28]	; (800a1a8 <RegisterModuleCLICommands+0x28>)
 800a18a:	f003 ffab 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&stopCommandDefinition);
 800a18e:	4807      	ldr	r0, [pc, #28]	; (800a1ac <RegisterModuleCLICommands+0x2c>)
 800a190:	f003 ffa8 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unitCommandDefinition);
 800a194:	4806      	ldr	r0, [pc, #24]	; (800a1b0 <RegisterModuleCLICommands+0x30>)
 800a196:	f003 ffa5 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&demoCommandDefinition);
 800a19a:	4806      	ldr	r0, [pc, #24]	; (800a1b4 <RegisterModuleCLICommands+0x34>)
 800a19c:	f003 ffa2 	bl	800e0e4 <FreeRTOS_CLIRegisterCommand>
}
 800a1a0:	bd10      	pop	{r4, pc}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	0801a7ac 	.word	0x0801a7ac
 800a1a8:	0801a7cc 	.word	0x0801a7cc
 800a1ac:	0801a7bc 	.word	0x0801a7bc
 800a1b0:	0801a7dc 	.word	0x0801a7dc
 800a1b4:	0801a79c 	.word	0x0801a79c

0800a1b8 <GetPort>:
	if (huart->Instance == USART2)
 800a1b8:	6803      	ldr	r3, [r0, #0]
 800a1ba:	4a08      	ldr	r2, [pc, #32]	; (800a1dc <GetPort+0x24>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d007      	beq.n	800a1d0 <GetPort+0x18>
	else if (huart->Instance == USART6)
 800a1c0:	4a07      	ldr	r2, [pc, #28]	; (800a1e0 <GetPort+0x28>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d006      	beq.n	800a1d4 <GetPort+0x1c>
	else if (huart->Instance == USART3)
 800a1c6:	4a07      	ldr	r2, [pc, #28]	; (800a1e4 <GetPort+0x2c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d005      	beq.n	800a1d8 <GetPort+0x20>
	return 0;
 800a1cc:	2000      	movs	r0, #0
}
 800a1ce:	4770      	bx	lr
		return P1;
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	e7fc      	b.n	800a1ce <GetPort+0x16>
		return P2;
 800a1d4:	2002      	movs	r0, #2
 800a1d6:	e7fa      	b.n	800a1ce <GetPort+0x16>
		return P3;
 800a1d8:	2003      	movs	r0, #3
 800a1da:	e7f8      	b.n	800a1ce <GetPort+0x16>
 800a1dc:	40004400 	.word	0x40004400
 800a1e0:	40011400 	.word	0x40011400
 800a1e4:	40004800 	.word	0x40004800

0800a1e8 <SendResults>:
		uint8_t Module, float *Buffer) {
 800a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	000c      	movs	r4, r1
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	ab0c      	add	r3, sp, #48	; 0x30
 800a1f2:	781e      	ldrb	r6, [r3, #0]
	uint32_t RawMsgInt = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	9304      	str	r3, [sp, #16]
	Raw_Msg = message;
 800a1f8:	9005      	str	r0, [sp, #20]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a1fa:	f003 fff3 	bl	800e1e4 <FreeRTOS_CLIGetOutputBuffer>
 800a1fe:	0005      	movs	r5, r0
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a200:	2c04      	cmp	r4, #4
 800a202:	d001      	beq.n	800a208 <SendResults+0x20>
 800a204:	2c02      	cmp	r4, #2
 800a206:	d106      	bne.n	800a216 <SendResults+0x2e>
	switch (Mode) {
 800a208:	2c08      	cmp	r4, #8
 800a20a:	d900      	bls.n	800a20e <SendResults+0x26>
 800a20c:	e0c8      	b.n	800a3a0 <SendResults+0x1b8>
 800a20e:	00a2      	lsls	r2, r4, #2
 800a210:	4b69      	ldr	r3, [pc, #420]	; (800a3b8 <SendResults+0x1d0>)
 800a212:	589b      	ldr	r3, [r3, r2]
 800a214:	469f      	mov	pc, r3
		strUnit = malloc(6 * sizeof(char));
 800a216:	2006      	movs	r0, #6
 800a218:	f008 ff5c 	bl	80130d4 <malloc>
 800a21c:	0007      	movs	r7, r0
		memset(strUnit, 0, (6 * sizeof(char)));
 800a21e:	2206      	movs	r2, #6
 800a220:	2100      	movs	r1, #0
 800a222:	f008 ff82 	bl	801312a <memset>
		if (unit == Volt) {
 800a226:	4b65      	ldr	r3, [pc, #404]	; (800a3bc <SendResults+0x1d4>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d007      	beq.n	800a23e <SendResults+0x56>
		} else if (unit == Amp) {
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d00b      	beq.n	800a24a <SendResults+0x62>
			sprintf((char*) strUnit, "Volt");
 800a232:	2205      	movs	r2, #5
 800a234:	4962      	ldr	r1, [pc, #392]	; (800a3c0 <SendResults+0x1d8>)
 800a236:	0038      	movs	r0, r7
 800a238:	f008 ff6e 	bl	8013118 <memcpy>
 800a23c:	e7e4      	b.n	800a208 <SendResults+0x20>
			sprintf((char*) strUnit, "Volt");
 800a23e:	2205      	movs	r2, #5
 800a240:	495f      	ldr	r1, [pc, #380]	; (800a3c0 <SendResults+0x1d8>)
 800a242:	0038      	movs	r0, r7
 800a244:	f008 ff68 	bl	8013118 <memcpy>
 800a248:	e7de      	b.n	800a208 <SendResults+0x20>
			sprintf((char*) strUnit, "Amp");
 800a24a:	2204      	movs	r2, #4
 800a24c:	495d      	ldr	r1, [pc, #372]	; (800a3c4 <SendResults+0x1dc>)
 800a24e:	0038      	movs	r0, r7
 800a250:	f008 ff62 	bl	8013118 <memcpy>
 800a254:	e7d8      	b.n	800a208 <SendResults+0x20>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800a256:	4b5c      	ldr	r3, [pc, #368]	; (800a3c8 <SendResults+0x1e0>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b05      	cmp	r3, #5
 800a25c:	d01d      	beq.n	800a29a <SendResults+0xb2>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800a25e:	2b07      	cmp	r3, #7
 800a260:	d000      	beq.n	800a264 <SendResults+0x7c>
 800a262:	e09d      	b.n	800a3a0 <SendResults+0x1b8>
			sprintf((char*) pcOutputString, (char*) pcWeightMsg, strUnit,
 800a264:	9805      	ldr	r0, [sp, #20]
 800a266:	f7f8 fc2f 	bl	8002ac8 <__aeabi_f2d>
 800a26a:	9000      	str	r0, [sp, #0]
 800a26c:	9101      	str	r1, [sp, #4]
 800a26e:	003a      	movs	r2, r7
 800a270:	4956      	ldr	r1, [pc, #344]	; (800a3cc <SendResults+0x1e4>)
 800a272:	0028      	movs	r0, r5
 800a274:	f009 fd12 	bl	8013c9c <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a278:	0028      	movs	r0, r5
 800a27a:	f7f5 ff4d 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a27e:	23fa      	movs	r3, #250	; 0xfa
 800a280:	b282      	uxth	r2, r0
 800a282:	4953      	ldr	r1, [pc, #332]	; (800a3d0 <SendResults+0x1e8>)
 800a284:	7808      	ldrb	r0, [r1, #0]
 800a286:	2101      	movs	r1, #1
 800a288:	4249      	negs	r1, r1
 800a28a:	9100      	str	r1, [sp, #0]
 800a28c:	005b      	lsls	r3, r3, #1
 800a28e:	0029      	movs	r1, r5
 800a290:	f003 fd2e 	bl	800dcf0 <writePxMutex>
			CheckForEnterKey();
 800a294:	f7ff fd1a 	bl	8009ccc <CheckForEnterKey>
 800a298:	e082      	b.n	800a3a0 <SendResults+0x1b8>
			RawMsgInt = Raw_Msg * 10;
 800a29a:	494e      	ldr	r1, [pc, #312]	; (800a3d4 <SendResults+0x1ec>)
 800a29c:	9805      	ldr	r0, [sp, #20]
 800a29e:	f7f6 fabd 	bl	800081c <__aeabi_fmul>
 800a2a2:	f7f6 f975 	bl	8000590 <__aeabi_f2uiz>
 800a2a6:	0003      	movs	r3, r0
 800a2a8:	9004      	str	r0, [sp, #16]
			sprintf((char*) pcOutputString, (char*) pcWeightMsgUINT, strUnit,
 800a2aa:	003a      	movs	r2, r7
 800a2ac:	494a      	ldr	r1, [pc, #296]	; (800a3d8 <SendResults+0x1f0>)
 800a2ae:	0028      	movs	r0, r5
 800a2b0:	f009 fcf4 	bl	8013c9c <siprintf>
					strlen((char*) pcOutputString), cmd500ms,
 800a2b4:	0028      	movs	r0, r5
 800a2b6:	f7f5 ff2f 	bl	8000118 <strlen>
			writePxMutex(PcPort, (char*) pcOutputString,
 800a2ba:	23fa      	movs	r3, #250	; 0xfa
 800a2bc:	b282      	uxth	r2, r0
 800a2be:	4944      	ldr	r1, [pc, #272]	; (800a3d0 <SendResults+0x1e8>)
 800a2c0:	7808      	ldrb	r0, [r1, #0]
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	4249      	negs	r1, r1
 800a2c6:	9100      	str	r1, [sp, #0]
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	0029      	movs	r1, r5
 800a2cc:	f003 fd10 	bl	800dcf0 <writePxMutex>
			CheckForEnterKey();
 800a2d0:	f7ff fcfc 	bl	8009ccc <CheckForEnterKey>
 800a2d4:	e064      	b.n	800a3a0 <SendResults+0x1b8>
		if (H2AR3_DATA_FORMAT == FMT_UINT32) {
 800a2d6:	4b3c      	ldr	r3, [pc, #240]	; (800a3c8 <SendResults+0x1e0>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	2b05      	cmp	r3, #5
 800a2dc:	d017      	beq.n	800a30e <SendResults+0x126>
		} else if (H2AR3_DATA_FORMAT == FMT_FLOAT) {
 800a2de:	2b07      	cmp	r3, #7
 800a2e0:	d15e      	bne.n	800a3a0 <SendResults+0x1b8>
			if (Module == myID) {
 800a2e2:	4b3e      	ldr	r3, [pc, #248]	; (800a3dc <SendResults+0x1f4>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	42b3      	cmp	r3, r6
 800a2e8:	d03f      	beq.n	800a36a <SendResults+0x182>
				messageParams[0] = Port;
 800a2ea:	4b3d      	ldr	r3, [pc, #244]	; (800a3e0 <SendResults+0x1f8>)
 800a2ec:	9a03      	ldr	r2, [sp, #12]
 800a2ee:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a2f0:	aa05      	add	r2, sp, #20
 800a2f2:	78d1      	ldrb	r1, [r2, #3]
 800a2f4:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a2f6:	7891      	ldrb	r1, [r2, #2]
 800a2f8:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a2fa:	7851      	ldrb	r1, [r2, #1]
 800a2fc:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a2fe:	7812      	ldrb	r2, [r2, #0]
 800a300:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a302:	2205      	movs	r2, #5
 800a304:	2123      	movs	r1, #35	; 0x23
 800a306:	0030      	movs	r0, r6
 800a308:	f7fd fd94 	bl	8007e34 <SendMessageToModule>
 800a30c:	e048      	b.n	800a3a0 <SendResults+0x1b8>
			RawMsgInt = Raw_Msg * 10;
 800a30e:	4931      	ldr	r1, [pc, #196]	; (800a3d4 <SendResults+0x1ec>)
 800a310:	9805      	ldr	r0, [sp, #20]
 800a312:	f7f6 fa83 	bl	800081c <__aeabi_fmul>
 800a316:	f7f6 f93b 	bl	8000590 <__aeabi_f2uiz>
 800a31a:	9004      	str	r0, [sp, #16]
			if (Module == myID) {
 800a31c:	4b2f      	ldr	r3, [pc, #188]	; (800a3dc <SendResults+0x1f4>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	42b3      	cmp	r3, r6
 800a322:	d011      	beq.n	800a348 <SendResults+0x160>
				messageParams[0] = Port;
 800a324:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <SendResults+0x1f8>)
 800a326:	9a03      	ldr	r2, [sp, #12]
 800a328:	701a      	strb	r2, [r3, #0]
				messageParams[1] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a32a:	aa04      	add	r2, sp, #16
 800a32c:	78d1      	ldrb	r1, [r2, #3]
 800a32e:	7059      	strb	r1, [r3, #1]
				messageParams[2] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a330:	7891      	ldrb	r1, [r2, #2]
 800a332:	7099      	strb	r1, [r3, #2]
				messageParams[3] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a334:	7851      	ldrb	r1, [r2, #1]
 800a336:	70d9      	strb	r1, [r3, #3]
				messageParams[4] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a338:	7812      	ldrb	r2, [r2, #0]
 800a33a:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(Module, CODE_PORT_FORWARD,
 800a33c:	2205      	movs	r2, #5
 800a33e:	2123      	movs	r1, #35	; 0x23
 800a340:	0030      	movs	r0, r6
 800a342:	f7fd fd77 	bl	8007e34 <SendMessageToModule>
 800a346:	e02b      	b.n	800a3a0 <SendResults+0x1b8>
				temp[0] = *((__IO uint8_t*) (&RawMsgInt) + 3);
 800a348:	ab04      	add	r3, sp, #16
 800a34a:	78da      	ldrb	r2, [r3, #3]
 800a34c:	4925      	ldr	r1, [pc, #148]	; (800a3e4 <SendResults+0x1fc>)
 800a34e:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&RawMsgInt) + 2);
 800a350:	789a      	ldrb	r2, [r3, #2]
 800a352:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&RawMsgInt) + 1);
 800a354:	785a      	ldrb	r2, [r3, #1]
 800a356:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&RawMsgInt) + 0);
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a35c:	230a      	movs	r3, #10
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	2204      	movs	r2, #4
 800a362:	9803      	ldr	r0, [sp, #12]
 800a364:	f003 fcc4 	bl	800dcf0 <writePxMutex>
 800a368:	e01a      	b.n	800a3a0 <SendResults+0x1b8>
				temp[0] = *((__IO uint8_t*) (&Raw_Msg) + 3);
 800a36a:	ab05      	add	r3, sp, #20
 800a36c:	78da      	ldrb	r2, [r3, #3]
 800a36e:	491d      	ldr	r1, [pc, #116]	; (800a3e4 <SendResults+0x1fc>)
 800a370:	700a      	strb	r2, [r1, #0]
				temp[1] = *((__IO uint8_t*) (&Raw_Msg) + 2);
 800a372:	789a      	ldrb	r2, [r3, #2]
 800a374:	704a      	strb	r2, [r1, #1]
				temp[2] = *((__IO uint8_t*) (&Raw_Msg) + 1);
 800a376:	785a      	ldrb	r2, [r3, #1]
 800a378:	708a      	strb	r2, [r1, #2]
				temp[3] = *((__IO uint8_t*) (&Raw_Msg) + 0);
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	70cb      	strb	r3, [r1, #3]
				writePxMutex(Port, (char*) &temp, 4 * sizeof(uint8_t), 10, 10);
 800a37e:	230a      	movs	r3, #10
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	2204      	movs	r2, #4
 800a384:	9803      	ldr	r0, [sp, #12]
 800a386:	f003 fcb3 	bl	800dcf0 <writePxMutex>
 800a38a:	e009      	b.n	800a3a0 <SendResults+0x1b8>
		memset(Buffer, 0, sizeof(float));
 800a38c:	2204      	movs	r2, #4
 800a38e:	2100      	movs	r1, #0
 800a390:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a392:	f008 feca 	bl	801312a <memset>
		memcpy(Buffer, &Raw_Msg, sizeof(float));
 800a396:	2204      	movs	r2, #4
 800a398:	a905      	add	r1, sp, #20
 800a39a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a39c:	f008 febc 	bl	8013118 <memcpy>
	if (Mode != STREAM_CLI_VERBOSE_CASE && Mode != STREAM_PORT_CASE) {
 800a3a0:	2c04      	cmp	r4, #4
 800a3a2:	d001      	beq.n	800a3a8 <SendResults+0x1c0>
 800a3a4:	2c02      	cmp	r4, #2
 800a3a6:	d102      	bne.n	800a3ae <SendResults+0x1c6>
}
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	b007      	add	sp, #28
 800a3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		free(strUnit);
 800a3ae:	0038      	movs	r0, r7
 800a3b0:	f008 fe9a 	bl	80130e8 <free>
 800a3b4:	e7f8      	b.n	800a3a8 <SendResults+0x1c0>
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	0801a5b4 	.word	0x0801a5b4
 800a3bc:	20000100 	.word	0x20000100
 800a3c0:	0801a588 	.word	0x0801a588
 800a3c4:	0801a590 	.word	0x0801a590
 800a3c8:	200000d4 	.word	0x200000d4
 800a3cc:	0801a5a4 	.word	0x0801a5a4
 800a3d0:	2000066e 	.word	0x2000066e
 800a3d4:	41200000 	.word	0x41200000
 800a3d8:	0801a594 	.word	0x0801a594
 800a3dc:	20000084 	.word	0x20000084
 800a3e0:	20000808 	.word	0x20000808
 800a3e4:	20000ffc 	.word	0x20000ffc

0800a3e8 <CalculationVolt>:
float CalculationVolt(void) {
 800a3e8:	b510      	push	{r4, lr}
	raw_adc = Adc_Calculation(Volt);
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	f7ff fc9e 	bl	8009d2c <Adc_Calculation>
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <CalculationVolt+0x44>)
 800a3f2:	6018      	str	r0, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);// 12 bit resolution
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	f7f6 fd13 	bl	8000e20 <__aeabi_ui2f>
 800a3fa:	f7f8 fb65 	bl	8002ac8 <__aeabi_f2d>
 800a3fe:	4a0c      	ldr	r2, [pc, #48]	; (800a430 <CalculationVolt+0x48>)
 800a400:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <CalculationVolt+0x4c>)
 800a402:	f7f7 fcb9 	bl	8001d78 <__aeabi_dmul>
 800a406:	f7f8 fba7 	bl	8002b58 <__aeabi_d2f>
	_volt = _volt - VRef;
 800a40a:	f7f8 fb5d 	bl	8002ac8 <__aeabi_f2d>
 800a40e:	4a0a      	ldr	r2, [pc, #40]	; (800a438 <CalculationVolt+0x50>)
 800a410:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <CalculationVolt+0x54>)
 800a412:	f7f7 ff1d 	bl	8002250 <__aeabi_dsub>
 800a416:	f7f8 fb9f 	bl	8002b58 <__aeabi_d2f>
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <CalculationVolt+0x58>)
 800a41c:	6018      	str	r0, [r3, #0]
	measured_volt = _volt * (4000150/(50*150));//measured_volt =0;533.3533
 800a41e:	4909      	ldr	r1, [pc, #36]	; (800a444 <CalculationVolt+0x5c>)
 800a420:	f7f6 f9fc 	bl	800081c <__aeabi_fmul>
 800a424:	4b08      	ldr	r3, [pc, #32]	; (800a448 <CalculationVolt+0x60>)
 800a426:	6018      	str	r0, [r3, #0]
}
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	200059d4 	.word	0x200059d4
 800a430:	e734d9b4 	.word	0xe734d9b4
 800a434:	3f4a680c 	.word	0x3f4a680c
 800a438:	66666666 	.word	0x66666666
 800a43c:	3ffa6666 	.word	0x3ffa6666
 800a440:	200058a0 	.word	0x200058a0
 800a444:	44054000 	.word	0x44054000
 800a448:	20005b34 	.word	0x20005b34

0800a44c <CalculationAmp>:
float CalculationAmp(void) {
 800a44c:	b510      	push	{r4, lr}
	raw_adc = Adc_Calculation(Amp);
 800a44e:	2002      	movs	r0, #2
 800a450:	f7ff fc6c 	bl	8009d2c <Adc_Calculation>
 800a454:	4b10      	ldr	r3, [pc, #64]	; (800a498 <CalculationAmp+0x4c>)
 800a456:	6018      	str	r0, [r3, #0]
	_volt = (float)raw_adc * (3.3 / 4095);
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	f7f6 fce1 	bl	8000e20 <__aeabi_ui2f>
 800a45e:	f7f8 fb33 	bl	8002ac8 <__aeabi_f2d>
 800a462:	4a0e      	ldr	r2, [pc, #56]	; (800a49c <CalculationAmp+0x50>)
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <CalculationAmp+0x54>)
 800a466:	f7f7 fc87 	bl	8001d78 <__aeabi_dmul>
 800a46a:	f7f8 fb75 	bl	8002b58 <__aeabi_d2f>
	_volt = _volt - VRef;
 800a46e:	f7f8 fb2b 	bl	8002ac8 <__aeabi_f2d>
 800a472:	4a0c      	ldr	r2, [pc, #48]	; (800a4a4 <CalculationAmp+0x58>)
 800a474:	4b0c      	ldr	r3, [pc, #48]	; (800a4a8 <CalculationAmp+0x5c>)
 800a476:	f7f7 feeb 	bl	8002250 <__aeabi_dsub>
 800a47a:	f7f8 fb6d 	bl	8002b58 <__aeabi_d2f>
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <CalculationAmp+0x60>)
 800a480:	6018      	str	r0, [r3, #0]
	measured_amp =(_volt/0.009795);//2.5 we have to make average error of vref before load is switched on
 800a482:	f7f8 fb21 	bl	8002ac8 <__aeabi_f2d>
 800a486:	4a0a      	ldr	r2, [pc, #40]	; (800a4b0 <CalculationAmp+0x64>)
 800a488:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <CalculationAmp+0x68>)
 800a48a:	f7f7 f86f 	bl	800156c <__aeabi_ddiv>
 800a48e:	f7f8 fb63 	bl	8002b58 <__aeabi_d2f>
 800a492:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <CalculationAmp+0x6c>)
 800a494:	6018      	str	r0, [r3, #0]
}
 800a496:	bd10      	pop	{r4, pc}
 800a498:	200059d4 	.word	0x200059d4
 800a49c:	e734d9b4 	.word	0xe734d9b4
 800a4a0:	3f4a680c 	.word	0x3f4a680c
 800a4a4:	66666666 	.word	0x66666666
 800a4a8:	3ffa6666 	.word	0x3ffa6666
 800a4ac:	200058a0 	.word	0x200058a0
 800a4b0:	a5508701 	.word	0xa5508701
 800a4b4:	3f840f66 	.word	0x3f840f66
 800a4b8:	200059c4 	.word	0x200059c4

0800a4bc <VoltAmpTask>:
void VoltAmpTask(void *argument) {
 800a4bc:	b530      	push	{r4, r5, lr}
 800a4be:	b083      	sub	sp, #12
	HAL_ADC_Start_IT(&hadc);
 800a4c0:	483b      	ldr	r0, [pc, #236]	; (800a5b0 <VoltAmpTask+0xf4>)
 800a4c2:	f005 ff3d 	bl	8010340 <HAL_ADC_Start_IT>
 800a4c6:	e02f      	b.n	800a528 <VoltAmpTask+0x6c>
			DATA_To_SEND = CalculationVolt();
 800a4c8:	f7ff ff8e 	bl	800a3e8 <CalculationVolt>
 800a4cc:	4b39      	ldr	r3, [pc, #228]	; (800a5b4 <VoltAmpTask+0xf8>)
 800a4ce:	6018      	str	r0, [r3, #0]
		switch (global_mode) {
 800a4d0:	4b39      	ldr	r3, [pc, #228]	; (800a5b8 <VoltAmpTask+0xfc>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d032      	beq.n	800a53e <VoltAmpTask+0x82>
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d04d      	beq.n	800a578 <VoltAmpTask+0xbc>
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d008      	beq.n	800a4f2 <VoltAmpTask+0x36>
			global_mode = IDLE_CASE;
 800a4e0:	4b35      	ldr	r3, [pc, #212]	; (800a5b8 <VoltAmpTask+0xfc>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	701a      	strb	r2, [r3, #0]
			break;
 800a4e6:	e01d      	b.n	800a524 <VoltAmpTask+0x68>
			DATA_To_SEND = CalculationAmp();
 800a4e8:	f7ff ffb0 	bl	800a44c <CalculationAmp>
 800a4ec:	4b31      	ldr	r3, [pc, #196]	; (800a5b4 <VoltAmpTask+0xf8>)
 800a4ee:	6018      	str	r0, [r3, #0]
			break;
 800a4f0:	e7ee      	b.n	800a4d0 <VoltAmpTask+0x14>
			t0 = HAL_GetTick();
 800a4f2:	f005 fcdd 	bl	800feb0 <HAL_GetTick>
 800a4f6:	0004      	movs	r4, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0, NULL);
 800a4f8:	4b30      	ldr	r3, [pc, #192]	; (800a5bc <VoltAmpTask+0x100>)
 800a4fa:	781a      	ldrb	r2, [r3, #0]
 800a4fc:	4b2e      	ldr	r3, [pc, #184]	; (800a5b8 <VoltAmpTask+0xfc>)
 800a4fe:	7819      	ldrb	r1, [r3, #0]
 800a500:	4b2c      	ldr	r3, [pc, #176]	; (800a5b4 <VoltAmpTask+0xf8>)
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	f7ff fe6d 	bl	800a1e8 <SendResults>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800a50e:	e001      	b.n	800a514 <VoltAmpTask+0x58>
				taskYIELD();
 800a510:	f005 fb5a 	bl	800fbc8 <vPortYield>
			while (HAL_GetTick() - t0 < (global_period - 1)) {
 800a514:	f005 fccc 	bl	800feb0 <HAL_GetTick>
 800a518:	1b00      	subs	r0, r0, r4
 800a51a:	4b29      	ldr	r3, [pc, #164]	; (800a5c0 <VoltAmpTask+0x104>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3b01      	subs	r3, #1
 800a520:	4298      	cmp	r0, r3
 800a522:	d3f5      	bcc.n	800a510 <VoltAmpTask+0x54>
		taskYIELD();
 800a524:	f005 fb50 	bl	800fbc8 <vPortYield>
		switch (unit) {
 800a528:	4b24      	ldr	r3, [pc, #144]	; (800a5bc <VoltAmpTask+0x100>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d0cb      	beq.n	800a4c8 <VoltAmpTask+0xc>
 800a530:	2b02      	cmp	r3, #2
 800a532:	d0d9      	beq.n	800a4e8 <VoltAmpTask+0x2c>
			DATA_To_SEND = CalculationVolt();
 800a534:	f7ff ff58 	bl	800a3e8 <CalculationVolt>
 800a538:	4b1e      	ldr	r3, [pc, #120]	; (800a5b4 <VoltAmpTask+0xf8>)
 800a53a:	6018      	str	r0, [r3, #0]
			break;
 800a53c:	e7c8      	b.n	800a4d0 <VoltAmpTask+0x14>
			t0 = HAL_GetTick();
 800a53e:	f005 fcb7 	bl	800feb0 <HAL_GetTick>
 800a542:	0004      	movs	r4, r0
			SendResults(DATA_To_SEND, global_mode, unit, global_port,
 800a544:	4b1f      	ldr	r3, [pc, #124]	; (800a5c4 <VoltAmpTask+0x108>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	4a1c      	ldr	r2, [pc, #112]	; (800a5bc <VoltAmpTask+0x100>)
 800a54a:	7812      	ldrb	r2, [r2, #0]
 800a54c:	491a      	ldr	r1, [pc, #104]	; (800a5b8 <VoltAmpTask+0xfc>)
 800a54e:	7809      	ldrb	r1, [r1, #0]
 800a550:	4818      	ldr	r0, [pc, #96]	; (800a5b4 <VoltAmpTask+0xf8>)
 800a552:	6800      	ldr	r0, [r0, #0]
 800a554:	2500      	movs	r5, #0
 800a556:	9501      	str	r5, [sp, #4]
 800a558:	4d1b      	ldr	r5, [pc, #108]	; (800a5c8 <VoltAmpTask+0x10c>)
 800a55a:	782d      	ldrb	r5, [r5, #0]
 800a55c:	9500      	str	r5, [sp, #0]
 800a55e:	f7ff fe43 	bl	800a1e8 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800a562:	e001      	b.n	800a568 <VoltAmpTask+0xac>
				taskYIELD();
 800a564:	f005 fb30 	bl	800fbc8 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800a568:	f005 fca2 	bl	800feb0 <HAL_GetTick>
 800a56c:	1b00      	subs	r0, r0, r4
 800a56e:	4b14      	ldr	r3, [pc, #80]	; (800a5c0 <VoltAmpTask+0x104>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4298      	cmp	r0, r3
 800a574:	d3f6      	bcc.n	800a564 <VoltAmpTask+0xa8>
 800a576:	e7d5      	b.n	800a524 <VoltAmpTask+0x68>
			t0 = HAL_GetTick();
 800a578:	f005 fc9a 	bl	800feb0 <HAL_GetTick>
 800a57c:	0004      	movs	r4, r0
			SendResults(DATA_To_SEND, global_mode, unit, 0, 0,ptr_read_buffer);
 800a57e:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <VoltAmpTask+0x100>)
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	4b0d      	ldr	r3, [pc, #52]	; (800a5b8 <VoltAmpTask+0xfc>)
 800a584:	7819      	ldrb	r1, [r3, #0]
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <VoltAmpTask+0xf8>)
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	4b10      	ldr	r3, [pc, #64]	; (800a5cc <VoltAmpTask+0x110>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	2300      	movs	r3, #0
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	f7ff fe28 	bl	800a1e8 <SendResults>
			while (HAL_GetTick() - t0 < global_period) {
 800a598:	e001      	b.n	800a59e <VoltAmpTask+0xe2>
				taskYIELD();
 800a59a:	f005 fb15 	bl	800fbc8 <vPortYield>
			while (HAL_GetTick() - t0 < global_period) {
 800a59e:	f005 fc87 	bl	800feb0 <HAL_GetTick>
 800a5a2:	1b00      	subs	r0, r0, r4
 800a5a4:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <VoltAmpTask+0x104>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4298      	cmp	r0, r3
 800a5aa:	d3f6      	bcc.n	800a59a <VoltAmpTask+0xde>
 800a5ac:	e7ba      	b.n	800a524 <VoltAmpTask+0x68>
 800a5ae:	46c0      	nop			; (mov r8, r8)
 800a5b0:	20005b64 	.word	0x20005b64
 800a5b4:	20000ff0 	.word	0x20000ff0
 800a5b8:	20005914 	.word	0x20005914
 800a5bc:	20000100 	.word	0x20000100
 800a5c0:	20005ac0 	.word	0x20005ac0
 800a5c4:	20005915 	.word	0x20005915
 800a5c8:	20005b38 	.word	0x20005b38
 800a5cc:	200059d0 	.word	0x200059d0

0800a5d0 <SampleV>:
uint8_t SampleV(float *volt) {
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	0004      	movs	r4, r0
	*volt = CalculationVolt();
 800a5d4:	f7ff ff08 	bl	800a3e8 <CalculationVolt>
 800a5d8:	6020      	str	r0, [r4, #0]
}
 800a5da:	2000      	movs	r0, #0
 800a5dc:	bd10      	pop	{r4, pc}

0800a5de <SampleA>:
uint8_t SampleA(float *curr) {
 800a5de:	b510      	push	{r4, lr}
 800a5e0:	0004      	movs	r4, r0
	*curr = CalculationAmp();
 800a5e2:	f7ff ff33 	bl	800a44c <CalculationAmp>
 800a5e6:	6020      	str	r0, [r4, #0]
}
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	bd10      	pop	{r4, pc}

0800a5ec <sampleCommand>:
		size_t xWriteBufferLen, const int8_t *pcCommandString) {
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	0004      	movs	r4, r0
	switch (unit) {
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <sampleCommand+0x54>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d005      	beq.n	800a606 <sampleCommand+0x1a>
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d01c      	beq.n	800a638 <sampleCommand+0x4c>
		SampleV(&DATA_To_SEND1);
 800a5fe:	4811      	ldr	r0, [pc, #68]	; (800a644 <sampleCommand+0x58>)
 800a600:	f7ff ffe6 	bl	800a5d0 <SampleV>
 800a604:	e002      	b.n	800a60c <sampleCommand+0x20>
		SampleV(&DATA_To_SEND1);
 800a606:	480f      	ldr	r0, [pc, #60]	; (800a644 <sampleCommand+0x58>)
 800a608:	f7ff ffe2 	bl	800a5d0 <SampleV>
	global_mode = SAMPLE_CLI_CASE;
 800a60c:	4b0e      	ldr	r3, [pc, #56]	; (800a648 <sampleCommand+0x5c>)
 800a60e:	2206      	movs	r2, #6
 800a610:	701a      	strb	r2, [r3, #0]
	SendResults(DATA_To_SEND1, global_mode, unit, 0, 0, NULL);
 800a612:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <sampleCommand+0x54>)
 800a614:	781a      	ldrb	r2, [r3, #0]
 800a616:	4b0b      	ldr	r3, [pc, #44]	; (800a644 <sampleCommand+0x58>)
 800a618:	6818      	ldr	r0, [r3, #0]
 800a61a:	2300      	movs	r3, #0
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	2106      	movs	r1, #6
 800a622:	f7ff fde1 	bl	800a1e8 <SendResults>
	memset((char*) pcWriteBuffer, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a626:	2299      	movs	r2, #153	; 0x99
 800a628:	0092      	lsls	r2, r2, #2
 800a62a:	2100      	movs	r1, #0
 800a62c:	0020      	movs	r0, r4
 800a62e:	f008 fd7c 	bl	801312a <memset>
}
 800a632:	2000      	movs	r0, #0
 800a634:	b002      	add	sp, #8
 800a636:	bd10      	pop	{r4, pc}
		SampleA(&DATA_To_SEND1);
 800a638:	4802      	ldr	r0, [pc, #8]	; (800a644 <sampleCommand+0x58>)
 800a63a:	f7ff ffd0 	bl	800a5de <SampleA>
		break;
 800a63e:	e7e5      	b.n	800a60c <sampleCommand+0x20>
 800a640:	20000100 	.word	0x20000100
 800a644:	20000008 	.word	0x20000008
 800a648:	20005914 	.word	0x20005914

0800a64c <StreamVToPort>:
		uint32_t Timeout) {
 800a64c:	b510      	push	{r4, lr}
 800a64e:	b082      	sub	sp, #8
	global_port = Port;
 800a650:	4c19      	ldr	r4, [pc, #100]	; (800a6b8 <StreamVToPort+0x6c>)
 800a652:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800a654:	4819      	ldr	r0, [pc, #100]	; (800a6bc <StreamVToPort+0x70>)
 800a656:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800a658:	4919      	ldr	r1, [pc, #100]	; (800a6c0 <StreamVToPort+0x74>)
 800a65a:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800a65c:	4a19      	ldr	r2, [pc, #100]	; (800a6c4 <StreamVToPort+0x78>)
 800a65e:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800a660:	4a19      	ldr	r2, [pc, #100]	; (800a6c8 <StreamVToPort+0x7c>)
 800a662:	2102      	movs	r1, #2
 800a664:	7011      	strb	r1, [r2, #0]
	unit = Volt;
 800a666:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <StreamVToPort+0x80>)
 800a668:	3901      	subs	r1, #1
 800a66a:	7011      	strb	r1, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800a66c:	1e5a      	subs	r2, r3, #1
 800a66e:	3203      	adds	r2, #3
 800a670:	d902      	bls.n	800a678 <StreamVToPort+0x2c>
}
 800a672:	2000      	movs	r0, #0
 800a674:	b002      	add	sp, #8
 800a676:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800a678:	0158      	lsls	r0, r3, #5
 800a67a:	1ac0      	subs	r0, r0, r3
 800a67c:	0080      	lsls	r0, r0, #2
 800a67e:	18c0      	adds	r0, r0, r3
 800a680:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800a682:	21fa      	movs	r1, #250	; 0xfa
 800a684:	0089      	lsls	r1, r1, #2
 800a686:	f7f5 fd63 	bl	8000150 <__udivsi3>
 800a68a:	0001      	movs	r1, r0
 800a68c:	4b10      	ldr	r3, [pc, #64]	; (800a6d0 <StreamVToPort+0x84>)
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	23ff      	movs	r3, #255	; 0xff
 800a692:	2200      	movs	r2, #0
 800a694:	480f      	ldr	r0, [pc, #60]	; (800a6d4 <StreamVToPort+0x88>)
 800a696:	f005 f8f3 	bl	800f880 <xTimerCreate>
 800a69a:	0004      	movs	r4, r0
 800a69c:	4b0e      	ldr	r3, [pc, #56]	; (800a6d8 <StreamVToPort+0x8c>)
 800a69e:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800a6a0:	f004 fbc0 	bl	800ee24 <xTaskGetTickCount>
 800a6a4:	0002      	movs	r2, r0
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	0020      	movs	r0, r4
 800a6b2:	f005 f903 	bl	800f8bc <xTimerGenericCommand>
 800a6b6:	e7dc      	b.n	800a672 <StreamVToPort+0x26>
 800a6b8:	20005915 	.word	0x20005915
 800a6bc:	20005b38 	.word	0x20005b38
 800a6c0:	20005ac0 	.word	0x20005ac0
 800a6c4:	20005b3c 	.word	0x20005b3c
 800a6c8:	20005914 	.word	0x20005914
 800a6cc:	20000100 	.word	0x20000100
 800a6d0:	08009d9d 	.word	0x08009d9d
 800a6d4:	0801a5d8 	.word	0x0801a5d8
 800a6d8:	20001000 	.word	0x20001000

0800a6dc <StreamAToPort>:
		uint32_t Timeout) {
 800a6dc:	b510      	push	{r4, lr}
 800a6de:	b082      	sub	sp, #8
	global_port = Port;
 800a6e0:	4c19      	ldr	r4, [pc, #100]	; (800a748 <StreamAToPort+0x6c>)
 800a6e2:	7020      	strb	r0, [r4, #0]
	global_module = Module;
 800a6e4:	4819      	ldr	r0, [pc, #100]	; (800a74c <StreamAToPort+0x70>)
 800a6e6:	7001      	strb	r1, [r0, #0]
	global_period = Period;
 800a6e8:	4919      	ldr	r1, [pc, #100]	; (800a750 <StreamAToPort+0x74>)
 800a6ea:	600a      	str	r2, [r1, #0]
	global_timeout = Timeout;
 800a6ec:	4a19      	ldr	r2, [pc, #100]	; (800a754 <StreamAToPort+0x78>)
 800a6ee:	6013      	str	r3, [r2, #0]
	global_mode = STREAM_PORT_CASE;
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	4919      	ldr	r1, [pc, #100]	; (800a758 <StreamAToPort+0x7c>)
 800a6f4:	700a      	strb	r2, [r1, #0]
	unit = Amp;
 800a6f6:	4919      	ldr	r1, [pc, #100]	; (800a75c <StreamAToPort+0x80>)
 800a6f8:	700a      	strb	r2, [r1, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF)) {
 800a6fa:	1e5a      	subs	r2, r3, #1
 800a6fc:	3203      	adds	r2, #3
 800a6fe:	d902      	bls.n	800a706 <StreamAToPort+0x2a>
}
 800a700:	2000      	movs	r0, #0
 800a702:	b002      	add	sp, #8
 800a704:	bd10      	pop	{r4, pc}
				pdMS_TO_TICKS(global_timeout), pdFALSE,
 800a706:	0158      	lsls	r0, r3, #5
 800a708:	1ac0      	subs	r0, r0, r3
 800a70a:	0080      	lsls	r0, r0, #2
 800a70c:	18c0      	adds	r0, r0, r3
 800a70e:	00c0      	lsls	r0, r0, #3
		xTimer = xTimerCreate("Timeout Measurement",
 800a710:	21fa      	movs	r1, #250	; 0xfa
 800a712:	0089      	lsls	r1, r1, #2
 800a714:	f7f5 fd1c 	bl	8000150 <__udivsi3>
 800a718:	0001      	movs	r1, r0
 800a71a:	4b11      	ldr	r3, [pc, #68]	; (800a760 <StreamAToPort+0x84>)
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	23ff      	movs	r3, #255	; 0xff
 800a720:	2200      	movs	r2, #0
 800a722:	4810      	ldr	r0, [pc, #64]	; (800a764 <StreamAToPort+0x88>)
 800a724:	f005 f8ac 	bl	800f880 <xTimerCreate>
 800a728:	0004      	movs	r4, r0
 800a72a:	4b0f      	ldr	r3, [pc, #60]	; (800a768 <StreamAToPort+0x8c>)
 800a72c:	6018      	str	r0, [r3, #0]
		xTimerStart(xTimer, portMAX_DELAY);
 800a72e:	f004 fb79 	bl	800ee24 <xTaskGetTickCount>
 800a732:	0002      	movs	r2, r0
 800a734:	2301      	movs	r3, #1
 800a736:	425b      	negs	r3, r3
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	2300      	movs	r3, #0
 800a73c:	2101      	movs	r1, #1
 800a73e:	0020      	movs	r0, r4
 800a740:	f005 f8bc 	bl	800f8bc <xTimerGenericCommand>
 800a744:	e7dc      	b.n	800a700 <StreamAToPort+0x24>
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	20005915 	.word	0x20005915
 800a74c:	20005b38 	.word	0x20005b38
 800a750:	20005ac0 	.word	0x20005ac0
 800a754:	20005b3c 	.word	0x20005b3c
 800a758:	20005914 	.word	0x20005914
 800a75c:	20000100 	.word	0x20000100
 800a760:	08009d9d 	.word	0x08009d9d
 800a764:	0801a5d8 	.word	0x0801a5d8
 800a768:	20001000 	.word	0x20001000

0800a76c <Module_MessagingTask>:
		uint8_t dst, uint8_t shift) {
 800a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a76e:	b083      	sub	sp, #12
 800a770:	ab08      	add	r3, sp, #32
 800a772:	781c      	ldrb	r4, [r3, #0]
	switch (code) {
 800a774:	4b41      	ldr	r3, [pc, #260]	; (800a87c <Module_MessagingTask+0x110>)
 800a776:	469c      	mov	ip, r3
 800a778:	4460      	add	r0, ip
 800a77a:	b283      	uxth	r3, r0
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d900      	bls.n	800a782 <Module_MessagingTask+0x16>
 800a780:	e07a      	b.n	800a878 <Module_MessagingTask+0x10c>
 800a782:	0098      	lsls	r0, r3, #2
 800a784:	4b3e      	ldr	r3, [pc, #248]	; (800a880 <Module_MessagingTask+0x114>)
 800a786:	581b      	ldr	r3, [r3, r0]
 800a788:	469f      	mov	pc, r3
		period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a78a:	1e4f      	subs	r7, r1, #1
 800a78c:	1ca3      	adds	r3, r4, #2
 800a78e:	4e3d      	ldr	r6, [pc, #244]	; (800a884 <Module_MessagingTask+0x118>)
 800a790:	00fd      	lsls	r5, r7, #3
 800a792:	1be8      	subs	r0, r5, r7
 800a794:	00c0      	lsls	r0, r0, #3
 800a796:	1830      	adds	r0, r6, r0
 800a798:	5cc2      	ldrb	r2, [r0, r3]
				+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800a79a:	1ce3      	adds	r3, r4, #3
 800a79c:	5cc3      	ldrb	r3, [r0, r3]
 800a79e:	021b      	lsls	r3, r3, #8
 800a7a0:	18d2      	adds	r2, r2, r3
				+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)
 800a7a2:	1d23      	adds	r3, r4, #4
 800a7a4:	5cc3      	ldrb	r3, [r0, r3]
 800a7a6:	041b      	lsls	r3, r3, #16
 800a7a8:	18d2      	adds	r2, r2, r3
				+ ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a7aa:	1d63      	adds	r3, r4, #5
 800a7ac:	5cc3      	ldrb	r3, [r0, r3]
 800a7ae:	061b      	lsls	r3, r3, #24
		period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a7b0:	18d2      	adds	r2, r2, r3
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a7b2:	1da3      	adds	r3, r4, #6
 800a7b4:	5cc3      	ldrb	r3, [r0, r3]
				+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800a7b6:	1de1      	adds	r1, r4, #7
 800a7b8:	5c41      	ldrb	r1, [r0, r1]
 800a7ba:	0209      	lsls	r1, r1, #8
 800a7bc:	185b      	adds	r3, r3, r1
				+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)
 800a7be:	0021      	movs	r1, r4
 800a7c0:	3108      	adds	r1, #8
 800a7c2:	5c41      	ldrb	r1, [r0, r1]
 800a7c4:	0409      	lsls	r1, r1, #16
 800a7c6:	185b      	adds	r3, r3, r1
				+ ((uint32_t)cMessage[port - 1][9 + shift] <<24);
 800a7c8:	0021      	movs	r1, r4
 800a7ca:	3109      	adds	r1, #9
 800a7cc:	5c41      	ldrb	r1, [r0, r1]
 800a7ce:	0609      	lsls	r1, r1, #24
		timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a7d0:	185b      	adds	r3, r3, r1
		StreamVToPort(cMessage[port - 1][1 + shift],
 800a7d2:	1c61      	adds	r1, r4, #1
 800a7d4:	468c      	mov	ip, r1
 800a7d6:	5d01      	ldrb	r1, [r0, r4]
 800a7d8:	0005      	movs	r5, r0
 800a7da:	4660      	mov	r0, ip
 800a7dc:	5c28      	ldrb	r0, [r5, r0]
 800a7de:	f7ff ff35 	bl	800a64c <StreamVToPort>
	Module_Status result = H2AR3_OK;
 800a7e2:	2000      	movs	r0, #0
}
 800a7e4:	b003      	add	sp, #12
 800a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a7e8:	1e4f      	subs	r7, r1, #1
 800a7ea:	1ca3      	adds	r3, r4, #2
 800a7ec:	4d25      	ldr	r5, [pc, #148]	; (800a884 <Module_MessagingTask+0x118>)
 800a7ee:	00fe      	lsls	r6, r7, #3
 800a7f0:	1bf0      	subs	r0, r6, r7
 800a7f2:	00c0      	lsls	r0, r0, #3
 800a7f4:	1828      	adds	r0, r5, r0
 800a7f6:	5cc2      	ldrb	r2, [r0, r3]
						+ ((uint32_t) cMessage[port - 1][3 + shift] << 8)
 800a7f8:	1ce3      	adds	r3, r4, #3
 800a7fa:	5cc3      	ldrb	r3, [r0, r3]
 800a7fc:	021b      	lsls	r3, r3, #8
 800a7fe:	18d2      	adds	r2, r2, r3
						+ ((uint32_t) cMessage[port - 1][4 + shift] << 16)
 800a800:	1d23      	adds	r3, r4, #4
 800a802:	5cc3      	ldrb	r3, [r0, r3]
 800a804:	041b      	lsls	r3, r3, #16
 800a806:	18d2      	adds	r2, r2, r3
						+ ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a808:	1d63      	adds	r3, r4, #5
 800a80a:	5cc3      	ldrb	r3, [r0, r3]
 800a80c:	061b      	lsls	r3, r3, #24
				period = ((uint32_t) cMessage[port - 1][2 + shift] )
 800a80e:	18d2      	adds	r2, r2, r3
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a810:	1da3      	adds	r3, r4, #6
 800a812:	5cc3      	ldrb	r3, [r0, r3]
						+ ((uint32_t) cMessage[port - 1][7 + shift] << 8)
 800a814:	1de1      	adds	r1, r4, #7
 800a816:	5c41      	ldrb	r1, [r0, r1]
 800a818:	0209      	lsls	r1, r1, #8
 800a81a:	185b      	adds	r3, r3, r1
						+ ((uint32_t) cMessage[port - 1][8 + shift] << 16)
 800a81c:	0021      	movs	r1, r4
 800a81e:	3108      	adds	r1, #8
 800a820:	5c41      	ldrb	r1, [r0, r1]
 800a822:	0409      	lsls	r1, r1, #16
 800a824:	185b      	adds	r3, r3, r1
						+((uint32_t) cMessage[port - 1][9 + shift] <<24);
 800a826:	0021      	movs	r1, r4
 800a828:	3109      	adds	r1, #9
 800a82a:	5c41      	ldrb	r1, [r0, r1]
 800a82c:	0609      	lsls	r1, r1, #24
				timeout = ((uint32_t) cMessage[port - 1][6 + shift] )
 800a82e:	185b      	adds	r3, r3, r1
				StreamAToPort(cMessage[port - 1][1 + shift],
 800a830:	1c61      	adds	r1, r4, #1
 800a832:	468c      	mov	ip, r1
 800a834:	5d01      	ldrb	r1, [r0, r4]
 800a836:	1bf0      	subs	r0, r6, r7
 800a838:	00c0      	lsls	r0, r0, #3
 800a83a:	1828      	adds	r0, r5, r0
 800a83c:	4664      	mov	r4, ip
 800a83e:	5d00      	ldrb	r0, [r0, r4]
 800a840:	f7ff ff4c 	bl	800a6dc <StreamAToPort>
	Module_Status result = H2AR3_OK;
 800a844:	2000      	movs	r0, #0
		break;
 800a846:	e7cd      	b.n	800a7e4 <Module_MessagingTask+0x78>
		global_mode = IDLE_CASE;
 800a848:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <Module_MessagingTask+0x11c>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	701a      	strb	r2, [r3, #0]
		xTimerStop(xTimer, portMAX_DELAY);
 800a84e:	4b0f      	ldr	r3, [pc, #60]	; (800a88c <Module_MessagingTask+0x120>)
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	2301      	movs	r3, #1
 800a854:	425b      	negs	r3, r3
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	2300      	movs	r3, #0
 800a85a:	2103      	movs	r1, #3
 800a85c:	f005 f82e 	bl	800f8bc <xTimerGenericCommand>
	Module_Status result = H2AR3_OK;
 800a860:	2000      	movs	r0, #0
		break;
 800a862:	e7bf      	b.n	800a7e4 <Module_MessagingTask+0x78>
		SampleV(&H2AR3_Read_V);
 800a864:	480a      	ldr	r0, [pc, #40]	; (800a890 <Module_MessagingTask+0x124>)
 800a866:	f7ff feb3 	bl	800a5d0 <SampleV>
	Module_Status result = H2AR3_OK;
 800a86a:	2000      	movs	r0, #0
		break;
 800a86c:	e7ba      	b.n	800a7e4 <Module_MessagingTask+0x78>
		SampleA(&H2AR3_Read_A);
 800a86e:	4809      	ldr	r0, [pc, #36]	; (800a894 <Module_MessagingTask+0x128>)
 800a870:	f7ff feb5 	bl	800a5de <SampleA>
	Module_Status result = H2AR3_OK;
 800a874:	2000      	movs	r0, #0
		break;
 800a876:	e7b5      	b.n	800a7e4 <Module_MessagingTask+0x78>
	Module_Status result = H2AR3_OK;
 800a878:	2001      	movs	r0, #1
 800a87a:	e7b3      	b.n	800a7e4 <Module_MessagingTask+0x78>
 800a87c:	fffff7cc 	.word	0xfffff7cc
 800a880:	0801a5ec 	.word	0x0801a5ec
 800a884:	200006b4 	.word	0x200006b4
 800a888:	20005914 	.word	0x20005914
 800a88c:	20001000 	.word	0x20001000
 800a890:	20005a48 	.word	0x20005a48
 800a894:	20005a4c 	.word	0x20005a4c

0800a898 <Stop>:
uint8_t Stop(void) {
 800a898:	b500      	push	{lr}
 800a89a:	b083      	sub	sp, #12
	global_mode = IDLE_CASE;
 800a89c:	2300      	movs	r3, #0
 800a89e:	4a06      	ldr	r2, [pc, #24]	; (800a8b8 <Stop+0x20>)
 800a8a0:	7013      	strb	r3, [r2, #0]
	xTimerStop(xTimer, 0);
 800a8a2:	4a06      	ldr	r2, [pc, #24]	; (800a8bc <Stop+0x24>)
 800a8a4:	6810      	ldr	r0, [r2, #0]
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2103      	movs	r1, #3
 800a8ac:	f005 f806 	bl	800f8bc <xTimerGenericCommand>
}
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	b003      	add	sp, #12
 800a8b4:	bd00      	pop	{pc}
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	20005914 	.word	0x20005914
 800a8bc:	20001000 	.word	0x20001000

0800a8c0 <stopCommand>:
		const int8_t *pcCommandString) {
 800a8c0:	b510      	push	{r4, lr}
	volt_buffer = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	4a03      	ldr	r2, [pc, #12]	; (800a8d4 <stopCommand+0x14>)
 800a8c6:	6013      	str	r3, [r2, #0]
	amp_buffer = 0;
 800a8c8:	4a03      	ldr	r2, [pc, #12]	; (800a8d8 <stopCommand+0x18>)
 800a8ca:	6013      	str	r3, [r2, #0]
	Stop();
 800a8cc:	f7ff ffe4 	bl	800a898 <Stop>
}
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	bd10      	pop	{r4, pc}
 800a8d4:	200059cc 	.word	0x200059cc
 800a8d8:	2000589c 	.word	0x2000589c

0800a8dc <StreamVToCLI>:
{
 800a8dc:	b510      	push	{r4, lr}
 800a8de:	b082      	sub	sp, #8
	global_period=Period;
 800a8e0:	4b1a      	ldr	r3, [pc, #104]	; (800a94c <StreamVToCLI+0x70>)
 800a8e2:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800a8e4:	4b1a      	ldr	r3, [pc, #104]	; (800a950 <StreamVToCLI+0x74>)
 800a8e6:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	4a1a      	ldr	r2, [pc, #104]	; (800a954 <StreamVToCLI+0x78>)
 800a8ec:	7013      	strb	r3, [r2, #0]
	unit=Volt;
 800a8ee:	4a1a      	ldr	r2, [pc, #104]	; (800a958 <StreamVToCLI+0x7c>)
 800a8f0:	7013      	strb	r3, [r2, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800a8f2:	1e4b      	subs	r3, r1, #1
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	d909      	bls.n	800a90c <StreamVToCLI+0x30>
	if (global_timeout > 0)
 800a8f8:	4b15      	ldr	r3, [pc, #84]	; (800a950 <StreamVToCLI+0x74>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <StreamVToCLI+0x2a>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800a900:	4b16      	ldr	r3, [pc, #88]	; (800a95c <StreamVToCLI+0x80>)
 800a902:	2201      	movs	r2, #1
 800a904:	701a      	strb	r2, [r3, #0]
}
 800a906:	2000      	movs	r0, #0
 800a908:	b002      	add	sp, #8
 800a90a:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800a90c:	0148      	lsls	r0, r1, #5
 800a90e:	1a40      	subs	r0, r0, r1
 800a910:	0080      	lsls	r0, r0, #2
 800a912:	1840      	adds	r0, r0, r1
 800a914:	00c0      	lsls	r0, r0, #3
 800a916:	21fa      	movs	r1, #250	; 0xfa
 800a918:	0089      	lsls	r1, r1, #2
 800a91a:	f7f5 fc19 	bl	8000150 <__udivsi3>
 800a91e:	0001      	movs	r1, r0
 800a920:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <StreamVToCLI+0x84>)
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	23ff      	movs	r3, #255	; 0xff
 800a926:	2200      	movs	r2, #0
 800a928:	480e      	ldr	r0, [pc, #56]	; (800a964 <StreamVToCLI+0x88>)
 800a92a:	f004 ffa9 	bl	800f880 <xTimerCreate>
 800a92e:	0004      	movs	r4, r0
 800a930:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <StreamVToCLI+0x8c>)
 800a932:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800a934:	f004 fa76 	bl	800ee24 <xTaskGetTickCount>
 800a938:	0002      	movs	r2, r0
 800a93a:	2301      	movs	r3, #1
 800a93c:	425b      	negs	r3, r3
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	2300      	movs	r3, #0
 800a942:	2101      	movs	r1, #1
 800a944:	0020      	movs	r0, r4
 800a946:	f004 ffb9 	bl	800f8bc <xTimerGenericCommand>
 800a94a:	e7d5      	b.n	800a8f8 <StreamVToCLI+0x1c>
 800a94c:	20005ac0 	.word	0x20005ac0
 800a950:	20005b3c 	.word	0x20005b3c
 800a954:	20005914 	.word	0x20005914
 800a958:	20000100 	.word	0x20000100
 800a95c:	20000ff8 	.word	0x20000ff8
 800a960:	08009d9d 	.word	0x08009d9d
 800a964:	0801a600 	.word	0x0801a600
 800a968:	20001000 	.word	0x20001000

0800a96c <StreamAToCLI>:
{
 800a96c:	b510      	push	{r4, lr}
 800a96e:	b082      	sub	sp, #8
	global_period=Period;
 800a970:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <StreamAToCLI+0x74>)
 800a972:	6018      	str	r0, [r3, #0]
	global_timeout=Timeout;
 800a974:	4b1b      	ldr	r3, [pc, #108]	; (800a9e4 <StreamAToCLI+0x78>)
 800a976:	6019      	str	r1, [r3, #0]
	global_mode=STREAM_CLI_CASE;
 800a978:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <StreamAToCLI+0x7c>)
 800a97a:	2201      	movs	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
	unit=Amp;
 800a97e:	4b1b      	ldr	r3, [pc, #108]	; (800a9ec <StreamAToCLI+0x80>)
 800a980:	3201      	adds	r2, #1
 800a982:	701a      	strb	r2, [r3, #0]
	if ((global_timeout > 0) && (global_timeout < 0xFFFFFFFF))
 800a984:	1e4b      	subs	r3, r1, #1
 800a986:	3303      	adds	r3, #3
 800a988:	d909      	bls.n	800a99e <StreamAToCLI+0x32>
	if (global_timeout > 0)
 800a98a:	4b16      	ldr	r3, [pc, #88]	; (800a9e4 <StreamAToCLI+0x78>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <StreamAToCLI+0x2c>
		startMeasurementRanging = START_MEASUREMENT_RANGING;
 800a992:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <StreamAToCLI+0x84>)
 800a994:	2201      	movs	r2, #1
 800a996:	701a      	strb	r2, [r3, #0]
}
 800a998:	2000      	movs	r0, #0
 800a99a:	b002      	add	sp, #8
 800a99c:	bd10      	pop	{r4, pc}
		xTimer = xTimerCreate( "Measurement Timeout", pdMS_TO_TICKS(global_timeout), pdFALSE, ( void * ) TIMERID_TIMEOUT_MEASUREMENT, HandleTimeout );
 800a99e:	0148      	lsls	r0, r1, #5
 800a9a0:	1a40      	subs	r0, r0, r1
 800a9a2:	0080      	lsls	r0, r0, #2
 800a9a4:	1840      	adds	r0, r0, r1
 800a9a6:	00c0      	lsls	r0, r0, #3
 800a9a8:	21fa      	movs	r1, #250	; 0xfa
 800a9aa:	0089      	lsls	r1, r1, #2
 800a9ac:	f7f5 fbd0 	bl	8000150 <__udivsi3>
 800a9b0:	0001      	movs	r1, r0
 800a9b2:	4b10      	ldr	r3, [pc, #64]	; (800a9f4 <StreamAToCLI+0x88>)
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	23ff      	movs	r3, #255	; 0xff
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	480f      	ldr	r0, [pc, #60]	; (800a9f8 <StreamAToCLI+0x8c>)
 800a9bc:	f004 ff60 	bl	800f880 <xTimerCreate>
 800a9c0:	0004      	movs	r4, r0
 800a9c2:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <StreamAToCLI+0x90>)
 800a9c4:	6018      	str	r0, [r3, #0]
		xTimerStart( xTimer, portMAX_DELAY );
 800a9c6:	f004 fa2d 	bl	800ee24 <xTaskGetTickCount>
 800a9ca:	0002      	movs	r2, r0
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	425b      	negs	r3, r3
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	0020      	movs	r0, r4
 800a9d8:	f004 ff70 	bl	800f8bc <xTimerGenericCommand>
 800a9dc:	e7d5      	b.n	800a98a <StreamAToCLI+0x1e>
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	20005ac0 	.word	0x20005ac0
 800a9e4:	20005b3c 	.word	0x20005b3c
 800a9e8:	20005914 	.word	0x20005914
 800a9ec:	20000100 	.word	0x20000100
 800a9f0:	20000ff8 	.word	0x20000ff8
 800a9f4:	08009d9d 	.word	0x08009d9d
 800a9f8:	0801a600 	.word	0x0801a600
 800a9fc:	20001000 	.word	0x20001000

0800aa00 <demoCommand>:
	return pdFALSE;
}
/*-----------------------------------------------------------*/

portBASE_TYPE demoCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen,
		const int8_t *pcCommandString) {
 800aa00:	b510      	push	{r4, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	0004      	movs	r4, r0



	/* Respond to the command */

		strcpy((char*) pcWriteBuffer, (char*) pcMessage);
 800aa06:	222d      	movs	r2, #45	; 0x2d
 800aa08:	491c      	ldr	r1, [pc, #112]	; (800aa7c <demoCommand+0x7c>)
 800aa0a:	f008 fb85 	bl	8013118 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
				strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800aa0e:	0020      	movs	r0, r4
 800aa10:	f7f5 fb82 	bl	8000118 <strlen>
		writePxMutex(PcPort, (char*) pcWriteBuffer,
 800aa14:	b282      	uxth	r2, r0
 800aa16:	4b1a      	ldr	r3, [pc, #104]	; (800aa80 <demoCommand+0x80>)
 800aa18:	7818      	ldrb	r0, [r3, #0]
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	425b      	negs	r3, r3
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	3333      	adds	r3, #51	; 0x33
 800aa22:	0021      	movs	r1, r4
 800aa24:	f003 f964 	bl	800dcf0 <writePxMutex>
		switch (unit) {
 800aa28:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <demoCommand+0x84>)
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d007      	beq.n	800aa40 <demoCommand+0x40>
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d00b      	beq.n	800aa4c <demoCommand+0x4c>
			break;
		case Amp:
			StreamAToCLI(500, 10000);
			break;
		default:
			StreamVToCLI(500, 10000);
 800aa34:	20fa      	movs	r0, #250	; 0xfa
 800aa36:	4914      	ldr	r1, [pc, #80]	; (800aa88 <demoCommand+0x88>)
 800aa38:	0040      	lsls	r0, r0, #1
 800aa3a:	f7ff ff4f 	bl	800a8dc <StreamVToCLI>
 800aa3e:	e00e      	b.n	800aa5e <demoCommand+0x5e>
			StreamVToCLI(500, 10000);
 800aa40:	20fa      	movs	r0, #250	; 0xfa
 800aa42:	4911      	ldr	r1, [pc, #68]	; (800aa88 <demoCommand+0x88>)
 800aa44:	0040      	lsls	r0, r0, #1
 800aa46:	f7ff ff49 	bl	800a8dc <StreamVToCLI>
			break;
 800aa4a:	e008      	b.n	800aa5e <demoCommand+0x5e>
			StreamAToCLI(500, 10000);
 800aa4c:	20fa      	movs	r0, #250	; 0xfa
 800aa4e:	490e      	ldr	r1, [pc, #56]	; (800aa88 <demoCommand+0x88>)
 800aa50:	0040      	lsls	r0, r0, #1
 800aa52:	f7ff ff8b 	bl	800a96c <StreamAToCLI>
			break;
 800aa56:	e002      	b.n	800aa5e <demoCommand+0x5e>
		}

		/* Wait till the end of stream */
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
			Delay_ms(1);
 800aa58:	2001      	movs	r0, #1
 800aa5a:	f005 fa2f 	bl	800febc <HAL_Delay>
		while (startMeasurementRanging != STOP_MEASUREMENT_RANGING) {
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	; (800aa8c <demoCommand+0x8c>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1f8      	bne.n	800aa58 <demoCommand+0x58>
	if (result != H2AR3_OK) {
		strcpy((char*) pcWriteBuffer, (char*) pcMessageError);
	}

	/* clean terminal output */
	memset((char*) pcWriteBuffer, 0, strlen((char*) pcWriteBuffer));
 800aa66:	0020      	movs	r0, r4
 800aa68:	f7f5 fb56 	bl	8000118 <strlen>
 800aa6c:	0002      	movs	r2, r0
 800aa6e:	2100      	movs	r1, #0
 800aa70:	0020      	movs	r0, r4
 800aa72:	f008 fb5a 	bl	801312a <memset>

	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 800aa76:	2000      	movs	r0, #0
 800aa78:	b002      	add	sp, #8
 800aa7a:	bd10      	pop	{r4, pc}
 800aa7c:	0801a614 	.word	0x0801a614
 800aa80:	2000066e 	.word	0x2000066e
 800aa84:	20000100 	.word	0x20000100
 800aa88:	00002710 	.word	0x00002710
 800aa8c:	20000ff8 	.word	0x20000ff8

0800aa90 <streamCommand>:
{
 800aa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa92:	b087      	sub	sp, #28
 800aa94:	0004      	movs	r4, r0
 800aa96:	000d      	movs	r5, r1
 800aa98:	0010      	movs	r0, r2
	uint32_t period = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9305      	str	r3, [sp, #20]
	uint32_t timeout = 0;
 800aa9e:	9304      	str	r3, [sp, #16]
	uint8_t port = 0;
 800aaa0:	220f      	movs	r2, #15
 800aaa2:	446a      	add	r2, sp
 800aaa4:	7013      	strb	r3, [r2, #0]
	uint8_t module = 0;
 800aaa6:	260e      	movs	r6, #14
 800aaa8:	446e      	add	r6, sp
 800aaaa:	7033      	strb	r3, [r6, #0]
	bool portOrCLI = true; // Port Mode => false and CLI Mode => true
 800aaac:	210d      	movs	r1, #13
 800aaae:	4469      	add	r1, sp
 800aab0:	2701      	movs	r7, #1
 800aab2:	700f      	strb	r7, [r1, #0]
	*pcWriteBuffer = '\0';
 800aab4:	7023      	strb	r3, [r4, #0]
	if (!streamCommandParser(pcCommandString,/* &pSensName, &sensNameLen, */&portOrCLI, &period, &timeout, &port, &module)) {
 800aab6:	9601      	str	r6, [sp, #4]
 800aab8:	9200      	str	r2, [sp, #0]
 800aaba:	ab04      	add	r3, sp, #16
 800aabc:	aa05      	add	r2, sp, #20
 800aabe:	f7ff f879 	bl	8009bb4 <streamCommandParser>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d00d      	beq.n	800aae2 <streamCommand+0x52>
            if(unit == Volt)
 800aac6:	4b1f      	ldr	r3, [pc, #124]	; (800ab44 <streamCommand+0xb4>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d00f      	beq.n	800aaee <streamCommand+0x5e>
            else if(unit == Amp)
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d022      	beq.n	800ab18 <streamCommand+0x88>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800aad2:	4a1d      	ldr	r2, [pc, #116]	; (800ab48 <streamCommand+0xb8>)
 800aad4:	0029      	movs	r1, r5
 800aad6:	0020      	movs	r0, r4
 800aad8:	f009 f8ac 	bl	8013c34 <sniprintf>
}
 800aadc:	2000      	movs	r0, #0
 800aade:	b007      	add	sp, #28
 800aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800aae2:	4a1a      	ldr	r2, [pc, #104]	; (800ab4c <streamCommand+0xbc>)
 800aae4:	0029      	movs	r1, r5
 800aae6:	0020      	movs	r0, r4
 800aae8:	f009 f8a4 	bl	8013c34 <sniprintf>
		return pdFALSE;
 800aaec:	e7f6      	b.n	800aadc <streamCommand+0x4c>
			if (portOrCLI) {
 800aaee:	330c      	adds	r3, #12
 800aaf0:	446b      	add	r3, sp
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d004      	beq.n	800ab02 <streamCommand+0x72>
				StreamVToCLI(period, timeout);
 800aaf8:	9904      	ldr	r1, [sp, #16]
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	f7ff feee 	bl	800a8dc <StreamVToCLI>
 800ab00:	e7e7      	b.n	800aad2 <streamCommand+0x42>
				StreamVToPort(port, module, period, timeout);
 800ab02:	230e      	movs	r3, #14
 800ab04:	446b      	add	r3, sp
 800ab06:	7819      	ldrb	r1, [r3, #0]
 800ab08:	230f      	movs	r3, #15
 800ab0a:	446b      	add	r3, sp
 800ab0c:	7818      	ldrb	r0, [r3, #0]
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	9a05      	ldr	r2, [sp, #20]
 800ab12:	f7ff fd9b 	bl	800a64c <StreamVToPort>
 800ab16:	e7dc      	b.n	800aad2 <streamCommand+0x42>
    		if (portOrCLI) {
 800ab18:	330b      	adds	r3, #11
 800ab1a:	446b      	add	r3, sp
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <streamCommand+0x9c>
    			StreamAToCLI(period, timeout);
 800ab22:	9904      	ldr	r1, [sp, #16]
 800ab24:	9805      	ldr	r0, [sp, #20]
 800ab26:	f7ff ff21 	bl	800a96c <StreamAToCLI>
 800ab2a:	e7d2      	b.n	800aad2 <streamCommand+0x42>
    			StreamAToPort(port, module, period, timeout);
 800ab2c:	230e      	movs	r3, #14
 800ab2e:	446b      	add	r3, sp
 800ab30:	7819      	ldrb	r1, [r3, #0]
 800ab32:	230f      	movs	r3, #15
 800ab34:	446b      	add	r3, sp
 800ab36:	7818      	ldrb	r0, [r3, #0]
 800ab38:	9b04      	ldr	r3, [sp, #16]
 800ab3a:	9a05      	ldr	r2, [sp, #20]
 800ab3c:	f7ff fdce 	bl	800a6dc <StreamAToPort>
 800ab40:	e7c7      	b.n	800aad2 <streamCommand+0x42>
 800ab42:	46c0      	nop			; (mov r8, r8)
 800ab44:	20000100 	.word	0x20000100
 800ab48:	08019d34 	.word	0x08019d34
 800ab4c:	0801a644 	.word	0x0801a644

0800ab50 <ADC_Select_CH7>:
 Description   : source file Contains Peripheral ADC setup .
 */
/* Includes ------------------------------------------------------------------*/
#include <H2AR3_adc.h>

void ADC_Select_CH7(void) {
 800ab50:	b500      	push	{lr}
 800ab52:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800ab54:	2307      	movs	r3, #7
 800ab56:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ab58:	2380      	movs	r3, #128	; 0x80
 800ab5a:	015b      	lsls	r3, r3, #5
 800ab5c:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800ab5e:	2304      	movs	r3, #4
 800ab60:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ab62:	a901      	add	r1, sp, #4
 800ab64:	4802      	ldr	r0, [pc, #8]	; (800ab70 <ADC_Select_CH7+0x20>)
 800ab66:	f005 fc35 	bl	80103d4 <HAL_ADC_ConfigChannel>

	}

}
 800ab6a:	b005      	add	sp, #20
 800ab6c:	bd00      	pop	{pc}
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	20005b64 	.word	0x20005b64

0800ab74 <ADC_Deselect_CH7>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH7(void) {
 800ab74:	b500      	push	{lr}
 800ab76:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800ab78:	2307      	movs	r3, #7
 800ab7a:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800ab7c:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <ADC_Deselect_CH7+0x1c>)
 800ab7e:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800ab80:	2304      	movs	r3, #4
 800ab82:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ab84:	a901      	add	r1, sp, #4
 800ab86:	4803      	ldr	r0, [pc, #12]	; (800ab94 <ADC_Deselect_CH7+0x20>)
 800ab88:	f005 fc24 	bl	80103d4 <HAL_ADC_ConfigChannel>

	}
}
 800ab8c:	b005      	add	sp, #20
 800ab8e:	bd00      	pop	{pc}
 800ab90:	00001001 	.word	0x00001001
 800ab94:	20005b64 	.word	0x20005b64

0800ab98 <ADC_Select_CH9>:


void ADC_Select_CH9(void) {
 800ab98:	b500      	push	{lr}
 800ab9a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800ab9c:	2309      	movs	r3, #9
 800ab9e:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800aba0:	2380      	movs	r3, #128	; 0x80
 800aba2:	015b      	lsls	r3, r3, #5
 800aba4:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800aba6:	2304      	movs	r3, #4
 800aba8:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800abaa:	a901      	add	r1, sp, #4
 800abac:	4802      	ldr	r0, [pc, #8]	; (800abb8 <ADC_Select_CH9+0x20>)
 800abae:	f005 fc11 	bl	80103d4 <HAL_ADC_ConfigChannel>

	}

}
 800abb2:	b005      	add	sp, #20
 800abb4:	bd00      	pop	{pc}
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	20005b64 	.word	0x20005b64

0800abbc <ADC_Deselect_CH9>:
/*-----------------------------------------------------------*/

void ADC_Deselect_CH9(void) {
 800abbc:	b500      	push	{lr}
 800abbe:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = { 0 };
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800abc0:	2309      	movs	r3, #9
 800abc2:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_RANK_NONE;
 800abc4:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <ADC_Deselect_CH9+0x1c>)
 800abc6:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800abc8:	2304      	movs	r3, #4
 800abca:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800abcc:	a901      	add	r1, sp, #4
 800abce:	4803      	ldr	r0, [pc, #12]	; (800abdc <ADC_Deselect_CH9+0x20>)
 800abd0:	f005 fc00 	bl	80103d4 <HAL_ADC_ConfigChannel>

	}
}
 800abd4:	b005      	add	sp, #20
 800abd6:	bd00      	pop	{pc}
 800abd8:	00001001 	.word	0x00001001
 800abdc:	20005b64 	.word	0x20005b64

0800abe0 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800abe0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800abe2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800abe4:	2300      	movs	r3, #0
 800abe6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800abe8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800abea:	2280      	movs	r2, #128	; 0x80
 800abec:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800abee:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abf0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800abf2:	3320      	adds	r3, #32
 800abf4:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800abf6:	2380      	movs	r3, #128	; 0x80
 800abf8:	019b      	lsls	r3, r3, #6
 800abfa:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800abfc:	f005 fe32 	bl	8010864 <HAL_DMA_Init>
}
 800ac00:	bd10      	pop	{r4, pc}

0800ac02 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ac02:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ac04:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ac06:	2310      	movs	r3, #16
 800ac08:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ac0e:	2280      	movs	r2, #128	; 0x80
 800ac10:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac12:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac14:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ac16:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ac18:	2380      	movs	r3, #128	; 0x80
 800ac1a:	019b      	lsls	r3, r3, #6
 800ac1c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ac1e:	f005 fe21 	bl	8010864 <HAL_DMA_Init>
}
 800ac22:	bd10      	pop	{r4, pc}

0800ac24 <DMA_Init>:
{
 800ac24:	b510      	push	{r4, lr}
 800ac26:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800ac28:	4b18      	ldr	r3, [pc, #96]	; (800ac8c <DMA_Init+0x68>)
 800ac2a:	6959      	ldr	r1, [r3, #20]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	4311      	orrs	r1, r2
 800ac30:	6159      	str	r1, [r3, #20]
 800ac32:	6959      	ldr	r1, [r3, #20]
 800ac34:	400a      	ands	r2, r1
 800ac36:	9200      	str	r2, [sp, #0]
 800ac38:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ac3a:	6959      	ldr	r1, [r3, #20]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	4311      	orrs	r1, r2
 800ac40:	6159      	str	r1, [r3, #20]
 800ac42:	695b      	ldr	r3, [r3, #20]
 800ac44:	401a      	ands	r2, r3
 800ac46:	9201      	str	r2, [sp, #4]
 800ac48:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800ac4a:	4c11      	ldr	r4, [pc, #68]	; (800ac90 <DMA_Init+0x6c>)
 800ac4c:	4911      	ldr	r1, [pc, #68]	; (800ac94 <DMA_Init+0x70>)
 800ac4e:	0020      	movs	r0, r4
 800ac50:	f7ff ffc6 	bl	800abe0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800ac54:	0020      	movs	r0, r4
 800ac56:	3038      	adds	r0, #56	; 0x38
 800ac58:	490f      	ldr	r1, [pc, #60]	; (800ac98 <DMA_Init+0x74>)
 800ac5a:	f7ff ffc1 	bl	800abe0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800ac5e:	0020      	movs	r0, r4
 800ac60:	3070      	adds	r0, #112	; 0x70
 800ac62:	490e      	ldr	r1, [pc, #56]	; (800ac9c <DMA_Init+0x78>)
 800ac64:	f7ff ffbc 	bl	800abe0 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800ac68:	4c0d      	ldr	r4, [pc, #52]	; (800aca0 <DMA_Init+0x7c>)
 800ac6a:	490e      	ldr	r1, [pc, #56]	; (800aca4 <DMA_Init+0x80>)
 800ac6c:	0020      	movs	r0, r4
 800ac6e:	f7ff ffc8 	bl	800ac02 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800ac72:	0020      	movs	r0, r4
 800ac74:	3038      	adds	r0, #56	; 0x38
 800ac76:	490c      	ldr	r1, [pc, #48]	; (800aca8 <DMA_Init+0x84>)
 800ac78:	f7ff ffc3 	bl	800ac02 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800ac7c:	0020      	movs	r0, r4
 800ac7e:	3070      	adds	r0, #112	; 0x70
 800ac80:	490a      	ldr	r1, [pc, #40]	; (800acac <DMA_Init+0x88>)
 800ac82:	f7ff ffbe 	bl	800ac02 <DMA_MSG_TX_CH_Init>
}
 800ac86:	b002      	add	sp, #8
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	40021000 	.word	0x40021000
 800ac90:	20001004 	.word	0x20001004
 800ac94:	40020008 	.word	0x40020008
 800ac98:	40020030 	.word	0x40020030
 800ac9c:	40020058 	.word	0x40020058
 800aca0:	20001154 	.word	0x20001154
 800aca4:	4002001c 	.word	0x4002001c
 800aca8:	40020044 	.word	0x40020044
 800acac:	40020080 	.word	0x40020080

0800acb0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800acb0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800acb2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acb4:	2300      	movs	r3, #0
 800acb6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800acb8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800acba:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acbc:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acbe:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800acc0:	3320      	adds	r3, #32
 800acc2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800acc4:	2380      	movs	r3, #128	; 0x80
 800acc6:	015b      	lsls	r3, r3, #5
 800acc8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800acca:	f005 fdcb 	bl	8010864 <HAL_DMA_Init>
}
 800acce:	bd10      	pop	{r4, pc}

0800acd0 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800acd0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800acd2:	1e44      	subs	r4, r0, #1
 800acd4:	00e5      	lsls	r5, r4, #3
 800acd6:	1b28      	subs	r0, r5, r4
 800acd8:	00c0      	lsls	r0, r0, #3
 800acda:	4e07      	ldr	r6, [pc, #28]	; (800acf8 <StopStreamDMA+0x28>)
 800acdc:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800acde:	f005 fe14 	bl	801090a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800ace2:	1b2d      	subs	r5, r5, r4
 800ace4:	00ed      	lsls	r5, r5, #3
 800ace6:	59aa      	ldr	r2, [r5, r6]
 800ace8:	2300      	movs	r3, #0
 800acea:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800acec:	00a4      	lsls	r4, r4, #2
 800acee:	4a03      	ldr	r2, [pc, #12]	; (800acfc <StopStreamDMA+0x2c>)
 800acf0:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800acf2:	4a03      	ldr	r2, [pc, #12]	; (800ad00 <StopStreamDMA+0x30>)
 800acf4:	50a3      	str	r3, [r4, r2]

}
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	200011fc 	.word	0x200011fc
 800acfc:	20000cdc 	.word	0x20000cdc
 800ad00:	20000cf4 	.word	0x20000cf4

0800ad04 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800ad04:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800ad06:	1e45      	subs	r5, r0, #1
 800ad08:	00ec      	lsls	r4, r5, #3
 800ad0a:	1b60      	subs	r0, r4, r5
 800ad0c:	00c0      	lsls	r0, r0, #3
 800ad0e:	4e05      	ldr	r6, [pc, #20]	; (800ad24 <StopMsgDMA+0x20>)
 800ad10:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800ad12:	f005 fdfa 	bl	801090a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800ad16:	1b64      	subs	r4, r4, r5
 800ad18:	00e4      	lsls	r4, r4, #3
 800ad1a:	59a3      	ldr	r3, [r4, r6]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	605a      	str	r2, [r3, #4]
}
 800ad20:	bd70      	pop	{r4, r5, r6, pc}
 800ad22:	46c0      	nop			; (mov r8, r8)
 800ad24:	20001004 	.word	0x20001004

0800ad28 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800ad2c:	f7ff ffea 	bl	800ad04 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800ad30:	3c01      	subs	r4, #1
 800ad32:	00e0      	lsls	r0, r4, #3
 800ad34:	1b02      	subs	r2, r0, r4
 800ad36:	00d2      	lsls	r2, r2, #3
 800ad38:	4903      	ldr	r1, [pc, #12]	; (800ad48 <SwitchMsgDMAToStream+0x20>)
 800ad3a:	5851      	ldr	r1, [r2, r1]
 800ad3c:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <SwitchMsgDMAToStream+0x24>)
 800ad3e:	18d0      	adds	r0, r2, r3
 800ad40:	f7ff ffb6 	bl	800acb0 <DMA_STREAM_CH_Init>
}
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	20001004 	.word	0x20001004
 800ad4c:	200011fc 	.word	0x200011fc

0800ad50 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800ad50:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ad52:	6803      	ldr	r3, [r0, #0]
 800ad54:	4a21      	ldr	r2, [pc, #132]	; (800addc <SetupDMAInterrupts+0x8c>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d037      	beq.n	800adca <SetupDMAInterrupts+0x7a>
 800ad5a:	d90e      	bls.n	800ad7a <SetupDMAInterrupts+0x2a>
 800ad5c:	4a20      	ldr	r2, [pc, #128]	; (800ade0 <SetupDMAInterrupts+0x90>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d033      	beq.n	800adca <SetupDMAInterrupts+0x7a>
 800ad62:	d919      	bls.n	800ad98 <SetupDMAInterrupts+0x48>
 800ad64:	4a1f      	ldr	r2, [pc, #124]	; (800ade4 <SetupDMAInterrupts+0x94>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d024      	beq.n	800adb4 <SetupDMAInterrupts+0x64>
 800ad6a:	d92b      	bls.n	800adc4 <SetupDMAInterrupts+0x74>
 800ad6c:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <SetupDMAInterrupts+0x98>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d020      	beq.n	800adb4 <SetupDMAInterrupts+0x64>
 800ad72:	4a1e      	ldr	r2, [pc, #120]	; (800adec <SetupDMAInterrupts+0x9c>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d01d      	beq.n	800adb4 <SetupDMAInterrupts+0x64>
 800ad78:	e00d      	b.n	800ad96 <SetupDMAInterrupts+0x46>
 800ad7a:	4a1d      	ldr	r2, [pc, #116]	; (800adf0 <SetupDMAInterrupts+0xa0>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d107      	bne.n	800ad90 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800ad80:	2200      	movs	r2, #0
 800ad82:	2009      	movs	r0, #9
 800ad84:	f005 fbcc 	bl	8010520 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800ad88:	2009      	movs	r0, #9
 800ad8a:	f005 fbf9 	bl	8010580 <HAL_NVIC_EnableIRQ>
			break;
 800ad8e:	e002      	b.n	800ad96 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800ad90:	4a18      	ldr	r2, [pc, #96]	; (800adf4 <SetupDMAInterrupts+0xa4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d019      	beq.n	800adca <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800ad96:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ad98:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <SetupDMAInterrupts+0xa8>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d00a      	beq.n	800adb4 <SetupDMAInterrupts+0x64>
 800ad9e:	d903      	bls.n	800ada8 <SetupDMAInterrupts+0x58>
 800ada0:	4a16      	ldr	r2, [pc, #88]	; (800adfc <SetupDMAInterrupts+0xac>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d006      	beq.n	800adb4 <SetupDMAInterrupts+0x64>
 800ada6:	e7f6      	b.n	800ad96 <SetupDMAInterrupts+0x46>
 800ada8:	4a15      	ldr	r2, [pc, #84]	; (800ae00 <SetupDMAInterrupts+0xb0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d002      	beq.n	800adb4 <SetupDMAInterrupts+0x64>
 800adae:	4a15      	ldr	r2, [pc, #84]	; (800ae04 <SetupDMAInterrupts+0xb4>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d1f0      	bne.n	800ad96 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800adb4:	2200      	movs	r2, #0
 800adb6:	200b      	movs	r0, #11
 800adb8:	f005 fbb2 	bl	8010520 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800adbc:	200b      	movs	r0, #11
 800adbe:	f005 fbdf 	bl	8010580 <HAL_NVIC_EnableIRQ>
}
 800adc2:	e7e8      	b.n	800ad96 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800adc4:	4a10      	ldr	r2, [pc, #64]	; (800ae08 <SetupDMAInterrupts+0xb8>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d1e5      	bne.n	800ad96 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	200a      	movs	r0, #10
 800adce:	f005 fba7 	bl	8010520 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800add2:	200a      	movs	r0, #10
 800add4:	f005 fbd4 	bl	8010580 <HAL_NVIC_EnableIRQ>
			break;
 800add8:	e7dd      	b.n	800ad96 <SetupDMAInterrupts+0x46>
 800adda:	46c0      	nop			; (mov r8, r8)
 800addc:	40020030 	.word	0x40020030
 800ade0:	40020408 	.word	0x40020408
 800ade4:	40020430 	.word	0x40020430
 800ade8:	40020444 	.word	0x40020444
 800adec:	40020458 	.word	0x40020458
 800adf0:	40020008 	.word	0x40020008
 800adf4:	4002001c 	.word	0x4002001c
 800adf8:	4002006c 	.word	0x4002006c
 800adfc:	40020080 	.word	0x40020080
 800ae00:	40020044 	.word	0x40020044
 800ae04:	40020058 	.word	0x40020058
 800ae08:	4002041c 	.word	0x4002041c

0800ae0c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800ae0c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800ae0e:	6803      	ldr	r3, [r0, #0]
 800ae10:	4a1b      	ldr	r2, [pc, #108]	; (800ae80 <UnSetupDMAInterrupts+0x74>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d02f      	beq.n	800ae76 <UnSetupDMAInterrupts+0x6a>
 800ae16:	d90e      	bls.n	800ae36 <UnSetupDMAInterrupts+0x2a>
 800ae18:	4a1a      	ldr	r2, [pc, #104]	; (800ae84 <UnSetupDMAInterrupts+0x78>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d02b      	beq.n	800ae76 <UnSetupDMAInterrupts+0x6a>
 800ae1e:	d915      	bls.n	800ae4c <UnSetupDMAInterrupts+0x40>
 800ae20:	4a19      	ldr	r2, [pc, #100]	; (800ae88 <UnSetupDMAInterrupts+0x7c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d020      	beq.n	800ae68 <UnSetupDMAInterrupts+0x5c>
 800ae26:	d923      	bls.n	800ae70 <UnSetupDMAInterrupts+0x64>
 800ae28:	4a18      	ldr	r2, [pc, #96]	; (800ae8c <UnSetupDMAInterrupts+0x80>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d01c      	beq.n	800ae68 <UnSetupDMAInterrupts+0x5c>
 800ae2e:	4a18      	ldr	r2, [pc, #96]	; (800ae90 <UnSetupDMAInterrupts+0x84>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d019      	beq.n	800ae68 <UnSetupDMAInterrupts+0x5c>
 800ae34:	e009      	b.n	800ae4a <UnSetupDMAInterrupts+0x3e>
 800ae36:	4a17      	ldr	r2, [pc, #92]	; (800ae94 <UnSetupDMAInterrupts+0x88>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d103      	bne.n	800ae44 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800ae3c:	2009      	movs	r0, #9
 800ae3e:	f005 fba9 	bl	8010594 <HAL_NVIC_DisableIRQ>
			break;
 800ae42:	e002      	b.n	800ae4a <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ae44:	4a14      	ldr	r2, [pc, #80]	; (800ae98 <UnSetupDMAInterrupts+0x8c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d015      	beq.n	800ae76 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800ae4a:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800ae4c:	4a13      	ldr	r2, [pc, #76]	; (800ae9c <UnSetupDMAInterrupts+0x90>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d00a      	beq.n	800ae68 <UnSetupDMAInterrupts+0x5c>
 800ae52:	d903      	bls.n	800ae5c <UnSetupDMAInterrupts+0x50>
 800ae54:	4a12      	ldr	r2, [pc, #72]	; (800aea0 <UnSetupDMAInterrupts+0x94>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d006      	beq.n	800ae68 <UnSetupDMAInterrupts+0x5c>
 800ae5a:	e7f6      	b.n	800ae4a <UnSetupDMAInterrupts+0x3e>
 800ae5c:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <UnSetupDMAInterrupts+0x98>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d002      	beq.n	800ae68 <UnSetupDMAInterrupts+0x5c>
 800ae62:	4a11      	ldr	r2, [pc, #68]	; (800aea8 <UnSetupDMAInterrupts+0x9c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d1f0      	bne.n	800ae4a <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800ae68:	200b      	movs	r0, #11
 800ae6a:	f005 fb93 	bl	8010594 <HAL_NVIC_DisableIRQ>
}
 800ae6e:	e7ec      	b.n	800ae4a <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800ae70:	4a0e      	ldr	r2, [pc, #56]	; (800aeac <UnSetupDMAInterrupts+0xa0>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d1e9      	bne.n	800ae4a <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800ae76:	200a      	movs	r0, #10
 800ae78:	f005 fb8c 	bl	8010594 <HAL_NVIC_DisableIRQ>
			break;
 800ae7c:	e7e5      	b.n	800ae4a <UnSetupDMAInterrupts+0x3e>
 800ae7e:	46c0      	nop			; (mov r8, r8)
 800ae80:	40020030 	.word	0x40020030
 800ae84:	40020408 	.word	0x40020408
 800ae88:	40020430 	.word	0x40020430
 800ae8c:	40020444 	.word	0x40020444
 800ae90:	40020458 	.word	0x40020458
 800ae94:	40020008 	.word	0x40020008
 800ae98:	4002001c 	.word	0x4002001c
 800ae9c:	4002006c 	.word	0x4002006c
 800aea0:	40020080 	.word	0x40020080
 800aea4:	40020044 	.word	0x40020044
 800aea8:	40020058 	.word	0x40020058
 800aeac:	4002041c 	.word	0x4002041c

0800aeb0 <DMA_MSG_TX_UnSetup>:
{	
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800aeb4:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800aeb6:	f7ff ffa9 	bl	800ae0c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800aeba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800aebc:	2300      	movs	r3, #0
 800aebe:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800aec0:	6623      	str	r3, [r4, #96]	; 0x60
}
 800aec2:	bd10      	pop	{r4, pc}

0800aec4 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800aec4:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800aec6:	6803      	ldr	r3, [r0, #0]
 800aec8:	4acc      	ldr	r2, [pc, #816]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x338>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d100      	bne.n	800aed0 <RemapAndLinkDMAtoUARTRx+0xc>
 800aece:	e0ca      	b.n	800b066 <RemapAndLinkDMAtoUARTRx+0x1a2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800aed0:	4aca      	ldr	r2, [pc, #808]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x338>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d100      	bne.n	800aed8 <RemapAndLinkDMAtoUARTRx+0x14>
 800aed6:	e0d8      	b.n	800b08a <RemapAndLinkDMAtoUARTRx+0x1c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800aed8:	4ac8      	ldr	r2, [pc, #800]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x338>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d100      	bne.n	800aee0 <RemapAndLinkDMAtoUARTRx+0x1c>
 800aede:	e0e5      	b.n	800b0ac <RemapAndLinkDMAtoUARTRx+0x1e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800aee0:	4ac6      	ldr	r2, [pc, #792]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x338>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d100      	bne.n	800aee8 <RemapAndLinkDMAtoUARTRx+0x24>
 800aee6:	e0f2      	b.n	800b0ce <RemapAndLinkDMAtoUARTRx+0x20a>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800aee8:	4ac4      	ldr	r2, [pc, #784]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x338>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d100      	bne.n	800aef0 <RemapAndLinkDMAtoUARTRx+0x2c>
 800aeee:	e0ff      	b.n	800b0f0 <RemapAndLinkDMAtoUARTRx+0x22c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800aef0:	4ac2      	ldr	r2, [pc, #776]	; (800b1fc <RemapAndLinkDMAtoUARTRx+0x338>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d100      	bne.n	800aef8 <RemapAndLinkDMAtoUARTRx+0x34>
 800aef6:	e10b      	b.n	800b110 <RemapAndLinkDMAtoUARTRx+0x24c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800aef8:	4ac1      	ldr	r2, [pc, #772]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d100      	bne.n	800af00 <RemapAndLinkDMAtoUARTRx+0x3c>
 800aefe:	e118      	b.n	800b132 <RemapAndLinkDMAtoUARTRx+0x26e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800af00:	4abf      	ldr	r2, [pc, #764]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d100      	bne.n	800af08 <RemapAndLinkDMAtoUARTRx+0x44>
 800af06:	e124      	b.n	800b152 <RemapAndLinkDMAtoUARTRx+0x28e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800af08:	4abd      	ldr	r2, [pc, #756]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d100      	bne.n	800af10 <RemapAndLinkDMAtoUARTRx+0x4c>
 800af0e:	e131      	b.n	800b174 <RemapAndLinkDMAtoUARTRx+0x2b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800af10:	4abb      	ldr	r2, [pc, #748]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d100      	bne.n	800af18 <RemapAndLinkDMAtoUARTRx+0x54>
 800af16:	e13e      	b.n	800b196 <RemapAndLinkDMAtoUARTRx+0x2d2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800af18:	4ab9      	ldr	r2, [pc, #740]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d100      	bne.n	800af20 <RemapAndLinkDMAtoUARTRx+0x5c>
 800af1e:	e14b      	b.n	800b1b8 <RemapAndLinkDMAtoUARTRx+0x2f4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800af20:	4ab7      	ldr	r2, [pc, #732]	; (800b200 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d100      	bne.n	800af28 <RemapAndLinkDMAtoUARTRx+0x64>
 800af26:	e157      	b.n	800b1d8 <RemapAndLinkDMAtoUARTRx+0x314>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800af28:	4ab6      	ldr	r2, [pc, #728]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d100      	bne.n	800af30 <RemapAndLinkDMAtoUARTRx+0x6c>
 800af2e:	e18b      	b.n	800b248 <RemapAndLinkDMAtoUARTRx+0x384>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800af30:	4ab4      	ldr	r2, [pc, #720]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d100      	bne.n	800af38 <RemapAndLinkDMAtoUARTRx+0x74>
 800af36:	e197      	b.n	800b268 <RemapAndLinkDMAtoUARTRx+0x3a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800af38:	4ab2      	ldr	r2, [pc, #712]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d100      	bne.n	800af40 <RemapAndLinkDMAtoUARTRx+0x7c>
 800af3e:	e1a4      	b.n	800b28a <RemapAndLinkDMAtoUARTRx+0x3c6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800af40:	4ab0      	ldr	r2, [pc, #704]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d100      	bne.n	800af48 <RemapAndLinkDMAtoUARTRx+0x84>
 800af46:	e1b1      	b.n	800b2ac <RemapAndLinkDMAtoUARTRx+0x3e8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800af48:	4aae      	ldr	r2, [pc, #696]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d100      	bne.n	800af50 <RemapAndLinkDMAtoUARTRx+0x8c>
 800af4e:	e1be      	b.n	800b2ce <RemapAndLinkDMAtoUARTRx+0x40a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800af50:	4aac      	ldr	r2, [pc, #688]	; (800b204 <RemapAndLinkDMAtoUARTRx+0x340>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d100      	bne.n	800af58 <RemapAndLinkDMAtoUARTRx+0x94>
 800af56:	e1ca      	b.n	800b2ee <RemapAndLinkDMAtoUARTRx+0x42a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800af58:	4aab      	ldr	r2, [pc, #684]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d100      	bne.n	800af60 <RemapAndLinkDMAtoUARTRx+0x9c>
 800af5e:	e1d7      	b.n	800b310 <RemapAndLinkDMAtoUARTRx+0x44c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800af60:	4aa9      	ldr	r2, [pc, #676]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d100      	bne.n	800af68 <RemapAndLinkDMAtoUARTRx+0xa4>
 800af66:	e1e3      	b.n	800b330 <RemapAndLinkDMAtoUARTRx+0x46c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800af68:	4aa7      	ldr	r2, [pc, #668]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d100      	bne.n	800af70 <RemapAndLinkDMAtoUARTRx+0xac>
 800af6e:	e1f0      	b.n	800b352 <RemapAndLinkDMAtoUARTRx+0x48e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800af70:	4aa5      	ldr	r2, [pc, #660]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d100      	bne.n	800af78 <RemapAndLinkDMAtoUARTRx+0xb4>
 800af76:	e1fd      	b.n	800b374 <RemapAndLinkDMAtoUARTRx+0x4b0>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800af78:	4aa3      	ldr	r2, [pc, #652]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d100      	bne.n	800af80 <RemapAndLinkDMAtoUARTRx+0xbc>
 800af7e:	e20a      	b.n	800b396 <RemapAndLinkDMAtoUARTRx+0x4d2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800af80:	4aa1      	ldr	r2, [pc, #644]	; (800b208 <RemapAndLinkDMAtoUARTRx+0x344>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d100      	bne.n	800af88 <RemapAndLinkDMAtoUARTRx+0xc4>
 800af86:	e216      	b.n	800b3b6 <RemapAndLinkDMAtoUARTRx+0x4f2>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800af88:	4aa0      	ldr	r2, [pc, #640]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x348>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d100      	bne.n	800af90 <RemapAndLinkDMAtoUARTRx+0xcc>
 800af8e:	e223      	b.n	800b3d8 <RemapAndLinkDMAtoUARTRx+0x514>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800af90:	4a9e      	ldr	r2, [pc, #632]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x348>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d100      	bne.n	800af98 <RemapAndLinkDMAtoUARTRx+0xd4>
 800af96:	e22f      	b.n	800b3f8 <RemapAndLinkDMAtoUARTRx+0x534>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800af98:	4a9c      	ldr	r2, [pc, #624]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x348>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d100      	bne.n	800afa0 <RemapAndLinkDMAtoUARTRx+0xdc>
 800af9e:	e23c      	b.n	800b41a <RemapAndLinkDMAtoUARTRx+0x556>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800afa0:	4a9a      	ldr	r2, [pc, #616]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x348>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d100      	bne.n	800afa8 <RemapAndLinkDMAtoUARTRx+0xe4>
 800afa6:	e249      	b.n	800b43c <RemapAndLinkDMAtoUARTRx+0x578>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800afa8:	4a98      	ldr	r2, [pc, #608]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x348>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d100      	bne.n	800afb0 <RemapAndLinkDMAtoUARTRx+0xec>
 800afae:	e256      	b.n	800b45e <RemapAndLinkDMAtoUARTRx+0x59a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800afb0:	4a96      	ldr	r2, [pc, #600]	; (800b20c <RemapAndLinkDMAtoUARTRx+0x348>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d100      	bne.n	800afb8 <RemapAndLinkDMAtoUARTRx+0xf4>
 800afb6:	e262      	b.n	800b47e <RemapAndLinkDMAtoUARTRx+0x5ba>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800afb8:	4a95      	ldr	r2, [pc, #596]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d100      	bne.n	800afc0 <RemapAndLinkDMAtoUARTRx+0xfc>
 800afbe:	e26f      	b.n	800b4a0 <RemapAndLinkDMAtoUARTRx+0x5dc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800afc0:	4a93      	ldr	r2, [pc, #588]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d100      	bne.n	800afc8 <RemapAndLinkDMAtoUARTRx+0x104>
 800afc6:	e27b      	b.n	800b4c0 <RemapAndLinkDMAtoUARTRx+0x5fc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800afc8:	4a91      	ldr	r2, [pc, #580]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d100      	bne.n	800afd0 <RemapAndLinkDMAtoUARTRx+0x10c>
 800afce:	e288      	b.n	800b4e2 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800afd0:	4a8f      	ldr	r2, [pc, #572]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d100      	bne.n	800afd8 <RemapAndLinkDMAtoUARTRx+0x114>
 800afd6:	e295      	b.n	800b504 <RemapAndLinkDMAtoUARTRx+0x640>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800afd8:	4a8d      	ldr	r2, [pc, #564]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d100      	bne.n	800afe0 <RemapAndLinkDMAtoUARTRx+0x11c>
 800afde:	e2a2      	b.n	800b526 <RemapAndLinkDMAtoUARTRx+0x662>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800afe0:	4a8b      	ldr	r2, [pc, #556]	; (800b210 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d100      	bne.n	800afe8 <RemapAndLinkDMAtoUARTRx+0x124>
 800afe6:	e2ae      	b.n	800b546 <RemapAndLinkDMAtoUARTRx+0x682>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800afe8:	4a8a      	ldr	r2, [pc, #552]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x350>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d100      	bne.n	800aff0 <RemapAndLinkDMAtoUARTRx+0x12c>
 800afee:	e2bb      	b.n	800b568 <RemapAndLinkDMAtoUARTRx+0x6a4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800aff0:	4a88      	ldr	r2, [pc, #544]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x350>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d100      	bne.n	800aff8 <RemapAndLinkDMAtoUARTRx+0x134>
 800aff6:	e2c7      	b.n	800b588 <RemapAndLinkDMAtoUARTRx+0x6c4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800aff8:	4a86      	ldr	r2, [pc, #536]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x350>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d100      	bne.n	800b000 <RemapAndLinkDMAtoUARTRx+0x13c>
 800affe:	e2d4      	b.n	800b5aa <RemapAndLinkDMAtoUARTRx+0x6e6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b000:	4a84      	ldr	r2, [pc, #528]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d100      	bne.n	800b008 <RemapAndLinkDMAtoUARTRx+0x144>
 800b006:	e2f7      	b.n	800b5f8 <RemapAndLinkDMAtoUARTRx+0x734>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b008:	4a82      	ldr	r2, [pc, #520]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d100      	bne.n	800b010 <RemapAndLinkDMAtoUARTRx+0x14c>
 800b00e:	e304      	b.n	800b61a <RemapAndLinkDMAtoUARTRx+0x756>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b010:	4a80      	ldr	r2, [pc, #512]	; (800b214 <RemapAndLinkDMAtoUARTRx+0x350>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d100      	bne.n	800b018 <RemapAndLinkDMAtoUARTRx+0x154>
 800b016:	e310      	b.n	800b63a <RemapAndLinkDMAtoUARTRx+0x776>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b018:	4a7f      	ldr	r2, [pc, #508]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d100      	bne.n	800b020 <RemapAndLinkDMAtoUARTRx+0x15c>
 800b01e:	e31d      	b.n	800b65c <RemapAndLinkDMAtoUARTRx+0x798>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b020:	4a7d      	ldr	r2, [pc, #500]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d100      	bne.n	800b028 <RemapAndLinkDMAtoUARTRx+0x164>
 800b026:	e328      	b.n	800b67a <RemapAndLinkDMAtoUARTRx+0x7b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b028:	4a7b      	ldr	r2, [pc, #492]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d100      	bne.n	800b030 <RemapAndLinkDMAtoUARTRx+0x16c>
 800b02e:	e335      	b.n	800b69c <RemapAndLinkDMAtoUARTRx+0x7d8>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b030:	4a79      	ldr	r2, [pc, #484]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d100      	bne.n	800b038 <RemapAndLinkDMAtoUARTRx+0x174>
 800b036:	e342      	b.n	800b6be <RemapAndLinkDMAtoUARTRx+0x7fa>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b038:	4a77      	ldr	r2, [pc, #476]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d100      	bne.n	800b040 <RemapAndLinkDMAtoUARTRx+0x17c>
 800b03e:	e34f      	b.n	800b6e0 <RemapAndLinkDMAtoUARTRx+0x81c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b040:	4a75      	ldr	r2, [pc, #468]	; (800b218 <RemapAndLinkDMAtoUARTRx+0x354>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d11e      	bne.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b046:	4b75      	ldr	r3, [pc, #468]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b048:	680a      	ldr	r2, [r1, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d11a      	bne.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b04e:	4a74      	ldr	r2, [pc, #464]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b050:	23a8      	movs	r3, #168	; 0xa8
 800b052:	58d4      	ldr	r4, [r2, r3]
 800b054:	4d73      	ldr	r5, [pc, #460]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b056:	402c      	ands	r4, r5
 800b058:	50d4      	str	r4, [r2, r3]
 800b05a:	58d5      	ldr	r5, [r2, r3]
 800b05c:	24f0      	movs	r4, #240	; 0xf0
 800b05e:	0124      	lsls	r4, r4, #4
 800b060:	432c      	orrs	r4, r5
 800b062:	50d4      	str	r4, [r2, r3]
 800b064:	e00e      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b066:	4a70      	ldr	r2, [pc, #448]	; (800b228 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b068:	680c      	ldr	r4, [r1, #0]
 800b06a:	4294      	cmp	r4, r2
 800b06c:	d000      	beq.n	800b070 <RemapAndLinkDMAtoUARTRx+0x1ac>
 800b06e:	e72f      	b.n	800aed0 <RemapAndLinkDMAtoUARTRx+0xc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b070:	4a6e      	ldr	r2, [pc, #440]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b072:	23a8      	movs	r3, #168	; 0xa8
 800b074:	58d4      	ldr	r4, [r2, r3]
 800b076:	250f      	movs	r5, #15
 800b078:	43ac      	bics	r4, r5
 800b07a:	50d4      	str	r4, [r2, r3]
 800b07c:	58d4      	ldr	r4, [r2, r3]
 800b07e:	3d07      	subs	r5, #7
 800b080:	432c      	orrs	r4, r5
 800b082:	50d4      	str	r4, [r2, r3]
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b084:	6641      	str	r1, [r0, #100]	; 0x64
 800b086:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b088:	bd70      	pop	{r4, r5, r6, pc}
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b08a:	4a69      	ldr	r2, [pc, #420]	; (800b230 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b08c:	680c      	ldr	r4, [r1, #0]
 800b08e:	4294      	cmp	r4, r2
 800b090:	d000      	beq.n	800b094 <RemapAndLinkDMAtoUARTRx+0x1d0>
 800b092:	e721      	b.n	800aed8 <RemapAndLinkDMAtoUARTRx+0x14>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b094:	4a65      	ldr	r2, [pc, #404]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b096:	23a8      	movs	r3, #168	; 0xa8
 800b098:	58d4      	ldr	r4, [r2, r3]
 800b09a:	4d62      	ldr	r5, [pc, #392]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b09c:	402c      	ands	r4, r5
 800b09e:	50d4      	str	r4, [r2, r3]
 800b0a0:	58d5      	ldr	r5, [r2, r3]
 800b0a2:	2480      	movs	r4, #128	; 0x80
 800b0a4:	0124      	lsls	r4, r4, #4
 800b0a6:	432c      	orrs	r4, r5
 800b0a8:	50d4      	str	r4, [r2, r3]
 800b0aa:	e7eb      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b0ac:	4a61      	ldr	r2, [pc, #388]	; (800b234 <RemapAndLinkDMAtoUARTRx+0x370>)
 800b0ae:	680c      	ldr	r4, [r1, #0]
 800b0b0:	4294      	cmp	r4, r2
 800b0b2:	d000      	beq.n	800b0b6 <RemapAndLinkDMAtoUARTRx+0x1f2>
 800b0b4:	e714      	b.n	800aee0 <RemapAndLinkDMAtoUARTRx+0x1c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b0b6:	4a5d      	ldr	r2, [pc, #372]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b0b8:	23a8      	movs	r3, #168	; 0xa8
 800b0ba:	58d4      	ldr	r4, [r2, r3]
 800b0bc:	4d5e      	ldr	r5, [pc, #376]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x374>)
 800b0be:	402c      	ands	r4, r5
 800b0c0:	50d4      	str	r4, [r2, r3]
 800b0c2:	58d5      	ldr	r5, [r2, r3]
 800b0c4:	2480      	movs	r4, #128	; 0x80
 800b0c6:	0324      	lsls	r4, r4, #12
 800b0c8:	432c      	orrs	r4, r5
 800b0ca:	50d4      	str	r4, [r2, r3]
 800b0cc:	e7da      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b0ce:	4a5b      	ldr	r2, [pc, #364]	; (800b23c <RemapAndLinkDMAtoUARTRx+0x378>)
 800b0d0:	680c      	ldr	r4, [r1, #0]
 800b0d2:	4294      	cmp	r4, r2
 800b0d4:	d000      	beq.n	800b0d8 <RemapAndLinkDMAtoUARTRx+0x214>
 800b0d6:	e707      	b.n	800aee8 <RemapAndLinkDMAtoUARTRx+0x24>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b0d8:	4a54      	ldr	r2, [pc, #336]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b0da:	23a8      	movs	r3, #168	; 0xa8
 800b0dc:	58d4      	ldr	r4, [r2, r3]
 800b0de:	4d58      	ldr	r5, [pc, #352]	; (800b240 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800b0e0:	402c      	ands	r4, r5
 800b0e2:	50d4      	str	r4, [r2, r3]
 800b0e4:	58d5      	ldr	r5, [r2, r3]
 800b0e6:	2480      	movs	r4, #128	; 0x80
 800b0e8:	0424      	lsls	r4, r4, #16
 800b0ea:	432c      	orrs	r4, r5
 800b0ec:	50d4      	str	r4, [r2, r3]
 800b0ee:	e7c9      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b0f0:	4a54      	ldr	r2, [pc, #336]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x380>)
 800b0f2:	680c      	ldr	r4, [r1, #0]
 800b0f4:	4294      	cmp	r4, r2
 800b0f6:	d000      	beq.n	800b0fa <RemapAndLinkDMAtoUARTRx+0x236>
 800b0f8:	e6fa      	b.n	800aef0 <RemapAndLinkDMAtoUARTRx+0x2c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b0fa:	4a49      	ldr	r2, [pc, #292]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b0fc:	23a8      	movs	r3, #168	; 0xa8
 800b0fe:	58d4      	ldr	r4, [r2, r3]
 800b100:	25f0      	movs	r5, #240	; 0xf0
 800b102:	43ac      	bics	r4, r5
 800b104:	50d4      	str	r4, [r2, r3]
 800b106:	58d4      	ldr	r4, [r2, r3]
 800b108:	3d70      	subs	r5, #112	; 0x70
 800b10a:	432c      	orrs	r4, r5
 800b10c:	50d4      	str	r4, [r2, r3]
 800b10e:	e7b9      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b110:	4a42      	ldr	r2, [pc, #264]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b112:	680c      	ldr	r4, [r1, #0]
 800b114:	4294      	cmp	r4, r2
 800b116:	d000      	beq.n	800b11a <RemapAndLinkDMAtoUARTRx+0x256>
 800b118:	e6ee      	b.n	800aef8 <RemapAndLinkDMAtoUARTRx+0x34>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b11a:	4a41      	ldr	r2, [pc, #260]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b11c:	23a8      	movs	r3, #168	; 0xa8
 800b11e:	58d4      	ldr	r4, [r2, r3]
 800b120:	4d40      	ldr	r5, [pc, #256]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b122:	402c      	ands	r4, r5
 800b124:	50d4      	str	r4, [r2, r3]
 800b126:	58d5      	ldr	r5, [r2, r3]
 800b128:	2480      	movs	r4, #128	; 0x80
 800b12a:	0124      	lsls	r4, r4, #4
 800b12c:	432c      	orrs	r4, r5
 800b12e:	50d4      	str	r4, [r2, r3]
 800b130:	e7a8      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b132:	4a3d      	ldr	r2, [pc, #244]	; (800b228 <RemapAndLinkDMAtoUARTRx+0x364>)
 800b134:	680c      	ldr	r4, [r1, #0]
 800b136:	4294      	cmp	r4, r2
 800b138:	d000      	beq.n	800b13c <RemapAndLinkDMAtoUARTRx+0x278>
 800b13a:	e6e1      	b.n	800af00 <RemapAndLinkDMAtoUARTRx+0x3c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b13c:	4a3b      	ldr	r2, [pc, #236]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b13e:	23a8      	movs	r3, #168	; 0xa8
 800b140:	58d4      	ldr	r4, [r2, r3]
 800b142:	250f      	movs	r5, #15
 800b144:	43ac      	bics	r4, r5
 800b146:	50d4      	str	r4, [r2, r3]
 800b148:	58d4      	ldr	r4, [r2, r3]
 800b14a:	3d06      	subs	r5, #6
 800b14c:	432c      	orrs	r4, r5
 800b14e:	50d4      	str	r4, [r2, r3]
 800b150:	e798      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b152:	4a37      	ldr	r2, [pc, #220]	; (800b230 <RemapAndLinkDMAtoUARTRx+0x36c>)
 800b154:	680c      	ldr	r4, [r1, #0]
 800b156:	4294      	cmp	r4, r2
 800b158:	d000      	beq.n	800b15c <RemapAndLinkDMAtoUARTRx+0x298>
 800b15a:	e6d5      	b.n	800af08 <RemapAndLinkDMAtoUARTRx+0x44>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b15c:	4a33      	ldr	r2, [pc, #204]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b15e:	23a8      	movs	r3, #168	; 0xa8
 800b160:	58d4      	ldr	r4, [r2, r3]
 800b162:	4d30      	ldr	r5, [pc, #192]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b164:	402c      	ands	r4, r5
 800b166:	50d4      	str	r4, [r2, r3]
 800b168:	58d5      	ldr	r5, [r2, r3]
 800b16a:	2490      	movs	r4, #144	; 0x90
 800b16c:	0124      	lsls	r4, r4, #4
 800b16e:	432c      	orrs	r4, r5
 800b170:	50d4      	str	r4, [r2, r3]
 800b172:	e787      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b174:	4a2f      	ldr	r2, [pc, #188]	; (800b234 <RemapAndLinkDMAtoUARTRx+0x370>)
 800b176:	680c      	ldr	r4, [r1, #0]
 800b178:	4294      	cmp	r4, r2
 800b17a:	d000      	beq.n	800b17e <RemapAndLinkDMAtoUARTRx+0x2ba>
 800b17c:	e6c8      	b.n	800af10 <RemapAndLinkDMAtoUARTRx+0x4c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b17e:	4a2b      	ldr	r2, [pc, #172]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b180:	23a8      	movs	r3, #168	; 0xa8
 800b182:	58d4      	ldr	r4, [r2, r3]
 800b184:	4d2c      	ldr	r5, [pc, #176]	; (800b238 <RemapAndLinkDMAtoUARTRx+0x374>)
 800b186:	402c      	ands	r4, r5
 800b188:	50d4      	str	r4, [r2, r3]
 800b18a:	58d5      	ldr	r5, [r2, r3]
 800b18c:	2490      	movs	r4, #144	; 0x90
 800b18e:	0324      	lsls	r4, r4, #12
 800b190:	432c      	orrs	r4, r5
 800b192:	50d4      	str	r4, [r2, r3]
 800b194:	e776      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b196:	4a29      	ldr	r2, [pc, #164]	; (800b23c <RemapAndLinkDMAtoUARTRx+0x378>)
 800b198:	680c      	ldr	r4, [r1, #0]
 800b19a:	4294      	cmp	r4, r2
 800b19c:	d000      	beq.n	800b1a0 <RemapAndLinkDMAtoUARTRx+0x2dc>
 800b19e:	e6bb      	b.n	800af18 <RemapAndLinkDMAtoUARTRx+0x54>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b1a0:	4a22      	ldr	r2, [pc, #136]	; (800b22c <RemapAndLinkDMAtoUARTRx+0x368>)
 800b1a2:	23a8      	movs	r3, #168	; 0xa8
 800b1a4:	58d4      	ldr	r4, [r2, r3]
 800b1a6:	4d26      	ldr	r5, [pc, #152]	; (800b240 <RemapAndLinkDMAtoUARTRx+0x37c>)
 800b1a8:	402c      	ands	r4, r5
 800b1aa:	50d4      	str	r4, [r2, r3]
 800b1ac:	58d5      	ldr	r5, [r2, r3]
 800b1ae:	2490      	movs	r4, #144	; 0x90
 800b1b0:	0424      	lsls	r4, r4, #16
 800b1b2:	432c      	orrs	r4, r5
 800b1b4:	50d4      	str	r4, [r2, r3]
 800b1b6:	e765      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b1b8:	4a22      	ldr	r2, [pc, #136]	; (800b244 <RemapAndLinkDMAtoUARTRx+0x380>)
 800b1ba:	680c      	ldr	r4, [r1, #0]
 800b1bc:	4294      	cmp	r4, r2
 800b1be:	d000      	beq.n	800b1c2 <RemapAndLinkDMAtoUARTRx+0x2fe>
 800b1c0:	e6ae      	b.n	800af20 <RemapAndLinkDMAtoUARTRx+0x5c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b1c2:	4a17      	ldr	r2, [pc, #92]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b1c4:	23a8      	movs	r3, #168	; 0xa8
 800b1c6:	58d4      	ldr	r4, [r2, r3]
 800b1c8:	25f0      	movs	r5, #240	; 0xf0
 800b1ca:	43ac      	bics	r4, r5
 800b1cc:	50d4      	str	r4, [r2, r3]
 800b1ce:	58d4      	ldr	r4, [r2, r3]
 800b1d0:	3d60      	subs	r5, #96	; 0x60
 800b1d2:	432c      	orrs	r4, r5
 800b1d4:	50d4      	str	r4, [r2, r3]
 800b1d6:	e755      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b1d8:	4a10      	ldr	r2, [pc, #64]	; (800b21c <RemapAndLinkDMAtoUARTRx+0x358>)
 800b1da:	680c      	ldr	r4, [r1, #0]
 800b1dc:	4294      	cmp	r4, r2
 800b1de:	d000      	beq.n	800b1e2 <RemapAndLinkDMAtoUARTRx+0x31e>
 800b1e0:	e6a2      	b.n	800af28 <RemapAndLinkDMAtoUARTRx+0x64>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b1e2:	4a0f      	ldr	r2, [pc, #60]	; (800b220 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800b1e4:	23a8      	movs	r3, #168	; 0xa8
 800b1e6:	58d4      	ldr	r4, [r2, r3]
 800b1e8:	4d0e      	ldr	r5, [pc, #56]	; (800b224 <RemapAndLinkDMAtoUARTRx+0x360>)
 800b1ea:	402c      	ands	r4, r5
 800b1ec:	50d4      	str	r4, [r2, r3]
 800b1ee:	58d5      	ldr	r5, [r2, r3]
 800b1f0:	2490      	movs	r4, #144	; 0x90
 800b1f2:	0124      	lsls	r4, r4, #4
 800b1f4:	432c      	orrs	r4, r5
 800b1f6:	50d4      	str	r4, [r2, r3]
 800b1f8:	e744      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b1fa:	46c0      	nop			; (mov r8, r8)
 800b1fc:	40013800 	.word	0x40013800
 800b200:	40004400 	.word	0x40004400
 800b204:	40004800 	.word	0x40004800
 800b208:	40004c00 	.word	0x40004c00
 800b20c:	40005000 	.word	0x40005000
 800b210:	40011400 	.word	0x40011400
 800b214:	40011800 	.word	0x40011800
 800b218:	40011c00 	.word	0x40011c00
 800b21c:	40020430 	.word	0x40020430
 800b220:	40020400 	.word	0x40020400
 800b224:	fffff0ff 	.word	0xfffff0ff
 800b228:	40020008 	.word	0x40020008
 800b22c:	40020000 	.word	0x40020000
 800b230:	40020030 	.word	0x40020030
 800b234:	40020058 	.word	0x40020058
 800b238:	fff0ffff 	.word	0xfff0ffff
 800b23c:	4002006c 	.word	0x4002006c
 800b240:	ff0fffff 	.word	0xff0fffff
 800b244:	4002041c 	.word	0x4002041c
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b248:	4ae0      	ldr	r2, [pc, #896]	; (800b5cc <RemapAndLinkDMAtoUARTRx+0x708>)
 800b24a:	680c      	ldr	r4, [r1, #0]
 800b24c:	4294      	cmp	r4, r2
 800b24e:	d000      	beq.n	800b252 <RemapAndLinkDMAtoUARTRx+0x38e>
 800b250:	e66e      	b.n	800af30 <RemapAndLinkDMAtoUARTRx+0x6c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b252:	4adf      	ldr	r2, [pc, #892]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b254:	23a8      	movs	r3, #168	; 0xa8
 800b256:	58d4      	ldr	r4, [r2, r3]
 800b258:	250f      	movs	r5, #15
 800b25a:	43ac      	bics	r4, r5
 800b25c:	50d4      	str	r4, [r2, r3]
 800b25e:	58d4      	ldr	r4, [r2, r3]
 800b260:	3d05      	subs	r5, #5
 800b262:	432c      	orrs	r4, r5
 800b264:	50d4      	str	r4, [r2, r3]
 800b266:	e70d      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b268:	4ada      	ldr	r2, [pc, #872]	; (800b5d4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b26a:	680c      	ldr	r4, [r1, #0]
 800b26c:	4294      	cmp	r4, r2
 800b26e:	d000      	beq.n	800b272 <RemapAndLinkDMAtoUARTRx+0x3ae>
 800b270:	e662      	b.n	800af38 <RemapAndLinkDMAtoUARTRx+0x74>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b272:	4ad7      	ldr	r2, [pc, #860]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b274:	23a8      	movs	r3, #168	; 0xa8
 800b276:	58d4      	ldr	r4, [r2, r3]
 800b278:	4dd7      	ldr	r5, [pc, #860]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b27a:	402c      	ands	r4, r5
 800b27c:	50d4      	str	r4, [r2, r3]
 800b27e:	58d5      	ldr	r5, [r2, r3]
 800b280:	24a0      	movs	r4, #160	; 0xa0
 800b282:	0124      	lsls	r4, r4, #4
 800b284:	432c      	orrs	r4, r5
 800b286:	50d4      	str	r4, [r2, r3]
 800b288:	e6fc      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b28a:	4ad4      	ldr	r2, [pc, #848]	; (800b5dc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b28c:	680c      	ldr	r4, [r1, #0]
 800b28e:	4294      	cmp	r4, r2
 800b290:	d000      	beq.n	800b294 <RemapAndLinkDMAtoUARTRx+0x3d0>
 800b292:	e655      	b.n	800af40 <RemapAndLinkDMAtoUARTRx+0x7c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b294:	4ace      	ldr	r2, [pc, #824]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b296:	23a8      	movs	r3, #168	; 0xa8
 800b298:	58d4      	ldr	r4, [r2, r3]
 800b29a:	4dd1      	ldr	r5, [pc, #836]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b29c:	402c      	ands	r4, r5
 800b29e:	50d4      	str	r4, [r2, r3]
 800b2a0:	58d5      	ldr	r5, [r2, r3]
 800b2a2:	24a0      	movs	r4, #160	; 0xa0
 800b2a4:	0324      	lsls	r4, r4, #12
 800b2a6:	432c      	orrs	r4, r5
 800b2a8:	50d4      	str	r4, [r2, r3]
 800b2aa:	e6eb      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b2ac:	4acd      	ldr	r2, [pc, #820]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b2ae:	680c      	ldr	r4, [r1, #0]
 800b2b0:	4294      	cmp	r4, r2
 800b2b2:	d000      	beq.n	800b2b6 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800b2b4:	e648      	b.n	800af48 <RemapAndLinkDMAtoUARTRx+0x84>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b2b6:	4ac6      	ldr	r2, [pc, #792]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b2b8:	23a8      	movs	r3, #168	; 0xa8
 800b2ba:	58d4      	ldr	r4, [r2, r3]
 800b2bc:	4dca      	ldr	r5, [pc, #808]	; (800b5e8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b2be:	402c      	ands	r4, r5
 800b2c0:	50d4      	str	r4, [r2, r3]
 800b2c2:	58d5      	ldr	r5, [r2, r3]
 800b2c4:	24a0      	movs	r4, #160	; 0xa0
 800b2c6:	0424      	lsls	r4, r4, #16
 800b2c8:	432c      	orrs	r4, r5
 800b2ca:	50d4      	str	r4, [r2, r3]
 800b2cc:	e6da      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b2ce:	4ac7      	ldr	r2, [pc, #796]	; (800b5ec <RemapAndLinkDMAtoUARTRx+0x728>)
 800b2d0:	680c      	ldr	r4, [r1, #0]
 800b2d2:	4294      	cmp	r4, r2
 800b2d4:	d000      	beq.n	800b2d8 <RemapAndLinkDMAtoUARTRx+0x414>
 800b2d6:	e63b      	b.n	800af50 <RemapAndLinkDMAtoUARTRx+0x8c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b2d8:	4ac5      	ldr	r2, [pc, #788]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b2da:	23a8      	movs	r3, #168	; 0xa8
 800b2dc:	58d4      	ldr	r4, [r2, r3]
 800b2de:	25f0      	movs	r5, #240	; 0xf0
 800b2e0:	43ac      	bics	r4, r5
 800b2e2:	50d4      	str	r4, [r2, r3]
 800b2e4:	58d4      	ldr	r4, [r2, r3]
 800b2e6:	3d50      	subs	r5, #80	; 0x50
 800b2e8:	432c      	orrs	r4, r5
 800b2ea:	50d4      	str	r4, [r2, r3]
 800b2ec:	e6ca      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b2ee:	4ac1      	ldr	r2, [pc, #772]	; (800b5f4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b2f0:	680c      	ldr	r4, [r1, #0]
 800b2f2:	4294      	cmp	r4, r2
 800b2f4:	d000      	beq.n	800b2f8 <RemapAndLinkDMAtoUARTRx+0x434>
 800b2f6:	e62f      	b.n	800af58 <RemapAndLinkDMAtoUARTRx+0x94>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b2f8:	4abd      	ldr	r2, [pc, #756]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b2fa:	23a8      	movs	r3, #168	; 0xa8
 800b2fc:	58d4      	ldr	r4, [r2, r3]
 800b2fe:	4db6      	ldr	r5, [pc, #728]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b300:	402c      	ands	r4, r5
 800b302:	50d4      	str	r4, [r2, r3]
 800b304:	58d5      	ldr	r5, [r2, r3]
 800b306:	24a0      	movs	r4, #160	; 0xa0
 800b308:	0124      	lsls	r4, r4, #4
 800b30a:	432c      	orrs	r4, r5
 800b30c:	50d4      	str	r4, [r2, r3]
 800b30e:	e6b9      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b310:	4aae      	ldr	r2, [pc, #696]	; (800b5cc <RemapAndLinkDMAtoUARTRx+0x708>)
 800b312:	680c      	ldr	r4, [r1, #0]
 800b314:	4294      	cmp	r4, r2
 800b316:	d000      	beq.n	800b31a <RemapAndLinkDMAtoUARTRx+0x456>
 800b318:	e622      	b.n	800af60 <RemapAndLinkDMAtoUARTRx+0x9c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b31a:	4aad      	ldr	r2, [pc, #692]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b31c:	23a8      	movs	r3, #168	; 0xa8
 800b31e:	58d4      	ldr	r4, [r2, r3]
 800b320:	250f      	movs	r5, #15
 800b322:	43ac      	bics	r4, r5
 800b324:	50d4      	str	r4, [r2, r3]
 800b326:	58d4      	ldr	r4, [r2, r3]
 800b328:	3d04      	subs	r5, #4
 800b32a:	432c      	orrs	r4, r5
 800b32c:	50d4      	str	r4, [r2, r3]
 800b32e:	e6a9      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b330:	4aa8      	ldr	r2, [pc, #672]	; (800b5d4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b332:	680c      	ldr	r4, [r1, #0]
 800b334:	4294      	cmp	r4, r2
 800b336:	d000      	beq.n	800b33a <RemapAndLinkDMAtoUARTRx+0x476>
 800b338:	e616      	b.n	800af68 <RemapAndLinkDMAtoUARTRx+0xa4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b33a:	4aa5      	ldr	r2, [pc, #660]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b33c:	23a8      	movs	r3, #168	; 0xa8
 800b33e:	58d4      	ldr	r4, [r2, r3]
 800b340:	4da5      	ldr	r5, [pc, #660]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b342:	402c      	ands	r4, r5
 800b344:	50d4      	str	r4, [r2, r3]
 800b346:	58d5      	ldr	r5, [r2, r3]
 800b348:	24b0      	movs	r4, #176	; 0xb0
 800b34a:	0124      	lsls	r4, r4, #4
 800b34c:	432c      	orrs	r4, r5
 800b34e:	50d4      	str	r4, [r2, r3]
 800b350:	e698      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b352:	4aa2      	ldr	r2, [pc, #648]	; (800b5dc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b354:	680c      	ldr	r4, [r1, #0]
 800b356:	4294      	cmp	r4, r2
 800b358:	d000      	beq.n	800b35c <RemapAndLinkDMAtoUARTRx+0x498>
 800b35a:	e609      	b.n	800af70 <RemapAndLinkDMAtoUARTRx+0xac>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b35c:	4a9c      	ldr	r2, [pc, #624]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b35e:	23a8      	movs	r3, #168	; 0xa8
 800b360:	58d4      	ldr	r4, [r2, r3]
 800b362:	4d9f      	ldr	r5, [pc, #636]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b364:	402c      	ands	r4, r5
 800b366:	50d4      	str	r4, [r2, r3]
 800b368:	58d5      	ldr	r5, [r2, r3]
 800b36a:	24b0      	movs	r4, #176	; 0xb0
 800b36c:	0324      	lsls	r4, r4, #12
 800b36e:	432c      	orrs	r4, r5
 800b370:	50d4      	str	r4, [r2, r3]
 800b372:	e687      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b374:	4a9b      	ldr	r2, [pc, #620]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b376:	680c      	ldr	r4, [r1, #0]
 800b378:	4294      	cmp	r4, r2
 800b37a:	d000      	beq.n	800b37e <RemapAndLinkDMAtoUARTRx+0x4ba>
 800b37c:	e5fc      	b.n	800af78 <RemapAndLinkDMAtoUARTRx+0xb4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b37e:	4a94      	ldr	r2, [pc, #592]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b380:	23a8      	movs	r3, #168	; 0xa8
 800b382:	58d4      	ldr	r4, [r2, r3]
 800b384:	4d98      	ldr	r5, [pc, #608]	; (800b5e8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b386:	402c      	ands	r4, r5
 800b388:	50d4      	str	r4, [r2, r3]
 800b38a:	58d5      	ldr	r5, [r2, r3]
 800b38c:	24b0      	movs	r4, #176	; 0xb0
 800b38e:	0424      	lsls	r4, r4, #16
 800b390:	432c      	orrs	r4, r5
 800b392:	50d4      	str	r4, [r2, r3]
 800b394:	e676      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b396:	4a95      	ldr	r2, [pc, #596]	; (800b5ec <RemapAndLinkDMAtoUARTRx+0x728>)
 800b398:	680c      	ldr	r4, [r1, #0]
 800b39a:	4294      	cmp	r4, r2
 800b39c:	d000      	beq.n	800b3a0 <RemapAndLinkDMAtoUARTRx+0x4dc>
 800b39e:	e5ef      	b.n	800af80 <RemapAndLinkDMAtoUARTRx+0xbc>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b3a0:	4a93      	ldr	r2, [pc, #588]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b3a2:	23a8      	movs	r3, #168	; 0xa8
 800b3a4:	58d4      	ldr	r4, [r2, r3]
 800b3a6:	25f0      	movs	r5, #240	; 0xf0
 800b3a8:	43ac      	bics	r4, r5
 800b3aa:	50d4      	str	r4, [r2, r3]
 800b3ac:	58d4      	ldr	r4, [r2, r3]
 800b3ae:	3d40      	subs	r5, #64	; 0x40
 800b3b0:	432c      	orrs	r4, r5
 800b3b2:	50d4      	str	r4, [r2, r3]
 800b3b4:	e666      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b3b6:	4a8f      	ldr	r2, [pc, #572]	; (800b5f4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b3b8:	680c      	ldr	r4, [r1, #0]
 800b3ba:	4294      	cmp	r4, r2
 800b3bc:	d000      	beq.n	800b3c0 <RemapAndLinkDMAtoUARTRx+0x4fc>
 800b3be:	e5e3      	b.n	800af88 <RemapAndLinkDMAtoUARTRx+0xc4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b3c0:	4a8b      	ldr	r2, [pc, #556]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b3c2:	23a8      	movs	r3, #168	; 0xa8
 800b3c4:	58d4      	ldr	r4, [r2, r3]
 800b3c6:	4d84      	ldr	r5, [pc, #528]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b3c8:	402c      	ands	r4, r5
 800b3ca:	50d4      	str	r4, [r2, r3]
 800b3cc:	58d5      	ldr	r5, [r2, r3]
 800b3ce:	24b0      	movs	r4, #176	; 0xb0
 800b3d0:	0124      	lsls	r4, r4, #4
 800b3d2:	432c      	orrs	r4, r5
 800b3d4:	50d4      	str	r4, [r2, r3]
 800b3d6:	e655      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b3d8:	4a7c      	ldr	r2, [pc, #496]	; (800b5cc <RemapAndLinkDMAtoUARTRx+0x708>)
 800b3da:	680c      	ldr	r4, [r1, #0]
 800b3dc:	4294      	cmp	r4, r2
 800b3de:	d000      	beq.n	800b3e2 <RemapAndLinkDMAtoUARTRx+0x51e>
 800b3e0:	e5d6      	b.n	800af90 <RemapAndLinkDMAtoUARTRx+0xcc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b3e2:	4a7b      	ldr	r2, [pc, #492]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b3e4:	23a8      	movs	r3, #168	; 0xa8
 800b3e6:	58d4      	ldr	r4, [r2, r3]
 800b3e8:	250f      	movs	r5, #15
 800b3ea:	43ac      	bics	r4, r5
 800b3ec:	50d4      	str	r4, [r2, r3]
 800b3ee:	58d4      	ldr	r4, [r2, r3]
 800b3f0:	3d03      	subs	r5, #3
 800b3f2:	432c      	orrs	r4, r5
 800b3f4:	50d4      	str	r4, [r2, r3]
 800b3f6:	e645      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b3f8:	4a76      	ldr	r2, [pc, #472]	; (800b5d4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b3fa:	680c      	ldr	r4, [r1, #0]
 800b3fc:	4294      	cmp	r4, r2
 800b3fe:	d000      	beq.n	800b402 <RemapAndLinkDMAtoUARTRx+0x53e>
 800b400:	e5ca      	b.n	800af98 <RemapAndLinkDMAtoUARTRx+0xd4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b402:	4a73      	ldr	r2, [pc, #460]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b404:	23a8      	movs	r3, #168	; 0xa8
 800b406:	58d4      	ldr	r4, [r2, r3]
 800b408:	4d73      	ldr	r5, [pc, #460]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b40a:	402c      	ands	r4, r5
 800b40c:	50d4      	str	r4, [r2, r3]
 800b40e:	58d5      	ldr	r5, [r2, r3]
 800b410:	24c0      	movs	r4, #192	; 0xc0
 800b412:	0124      	lsls	r4, r4, #4
 800b414:	432c      	orrs	r4, r5
 800b416:	50d4      	str	r4, [r2, r3]
 800b418:	e634      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b41a:	4a70      	ldr	r2, [pc, #448]	; (800b5dc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b41c:	680c      	ldr	r4, [r1, #0]
 800b41e:	4294      	cmp	r4, r2
 800b420:	d000      	beq.n	800b424 <RemapAndLinkDMAtoUARTRx+0x560>
 800b422:	e5bd      	b.n	800afa0 <RemapAndLinkDMAtoUARTRx+0xdc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b424:	4a6a      	ldr	r2, [pc, #424]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b426:	23a8      	movs	r3, #168	; 0xa8
 800b428:	58d4      	ldr	r4, [r2, r3]
 800b42a:	4d6d      	ldr	r5, [pc, #436]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b42c:	402c      	ands	r4, r5
 800b42e:	50d4      	str	r4, [r2, r3]
 800b430:	58d5      	ldr	r5, [r2, r3]
 800b432:	24c0      	movs	r4, #192	; 0xc0
 800b434:	0324      	lsls	r4, r4, #12
 800b436:	432c      	orrs	r4, r5
 800b438:	50d4      	str	r4, [r2, r3]
 800b43a:	e623      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b43c:	4a69      	ldr	r2, [pc, #420]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b43e:	680c      	ldr	r4, [r1, #0]
 800b440:	4294      	cmp	r4, r2
 800b442:	d000      	beq.n	800b446 <RemapAndLinkDMAtoUARTRx+0x582>
 800b444:	e5b0      	b.n	800afa8 <RemapAndLinkDMAtoUARTRx+0xe4>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b446:	4a62      	ldr	r2, [pc, #392]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b448:	23a8      	movs	r3, #168	; 0xa8
 800b44a:	58d4      	ldr	r4, [r2, r3]
 800b44c:	4d66      	ldr	r5, [pc, #408]	; (800b5e8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b44e:	402c      	ands	r4, r5
 800b450:	50d4      	str	r4, [r2, r3]
 800b452:	58d5      	ldr	r5, [r2, r3]
 800b454:	24c0      	movs	r4, #192	; 0xc0
 800b456:	0424      	lsls	r4, r4, #16
 800b458:	432c      	orrs	r4, r5
 800b45a:	50d4      	str	r4, [r2, r3]
 800b45c:	e612      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b45e:	4a63      	ldr	r2, [pc, #396]	; (800b5ec <RemapAndLinkDMAtoUARTRx+0x728>)
 800b460:	680c      	ldr	r4, [r1, #0]
 800b462:	4294      	cmp	r4, r2
 800b464:	d000      	beq.n	800b468 <RemapAndLinkDMAtoUARTRx+0x5a4>
 800b466:	e5a3      	b.n	800afb0 <RemapAndLinkDMAtoUARTRx+0xec>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b468:	4a61      	ldr	r2, [pc, #388]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b46a:	23a8      	movs	r3, #168	; 0xa8
 800b46c:	58d4      	ldr	r4, [r2, r3]
 800b46e:	25f0      	movs	r5, #240	; 0xf0
 800b470:	43ac      	bics	r4, r5
 800b472:	50d4      	str	r4, [r2, r3]
 800b474:	58d4      	ldr	r4, [r2, r3]
 800b476:	3d30      	subs	r5, #48	; 0x30
 800b478:	432c      	orrs	r4, r5
 800b47a:	50d4      	str	r4, [r2, r3]
 800b47c:	e602      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b47e:	4a5d      	ldr	r2, [pc, #372]	; (800b5f4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b480:	680c      	ldr	r4, [r1, #0]
 800b482:	4294      	cmp	r4, r2
 800b484:	d000      	beq.n	800b488 <RemapAndLinkDMAtoUARTRx+0x5c4>
 800b486:	e597      	b.n	800afb8 <RemapAndLinkDMAtoUARTRx+0xf4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b488:	4a59      	ldr	r2, [pc, #356]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b48a:	23a8      	movs	r3, #168	; 0xa8
 800b48c:	58d4      	ldr	r4, [r2, r3]
 800b48e:	4d52      	ldr	r5, [pc, #328]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b490:	402c      	ands	r4, r5
 800b492:	50d4      	str	r4, [r2, r3]
 800b494:	58d5      	ldr	r5, [r2, r3]
 800b496:	24c0      	movs	r4, #192	; 0xc0
 800b498:	0124      	lsls	r4, r4, #4
 800b49a:	432c      	orrs	r4, r5
 800b49c:	50d4      	str	r4, [r2, r3]
 800b49e:	e5f1      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b4a0:	4a4a      	ldr	r2, [pc, #296]	; (800b5cc <RemapAndLinkDMAtoUARTRx+0x708>)
 800b4a2:	680c      	ldr	r4, [r1, #0]
 800b4a4:	4294      	cmp	r4, r2
 800b4a6:	d000      	beq.n	800b4aa <RemapAndLinkDMAtoUARTRx+0x5e6>
 800b4a8:	e58a      	b.n	800afc0 <RemapAndLinkDMAtoUARTRx+0xfc>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b4aa:	4a49      	ldr	r2, [pc, #292]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b4ac:	23a8      	movs	r3, #168	; 0xa8
 800b4ae:	58d4      	ldr	r4, [r2, r3]
 800b4b0:	250f      	movs	r5, #15
 800b4b2:	43ac      	bics	r4, r5
 800b4b4:	50d4      	str	r4, [r2, r3]
 800b4b6:	58d4      	ldr	r4, [r2, r3]
 800b4b8:	3d02      	subs	r5, #2
 800b4ba:	432c      	orrs	r4, r5
 800b4bc:	50d4      	str	r4, [r2, r3]
 800b4be:	e5e1      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b4c0:	4a44      	ldr	r2, [pc, #272]	; (800b5d4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b4c2:	680c      	ldr	r4, [r1, #0]
 800b4c4:	4294      	cmp	r4, r2
 800b4c6:	d000      	beq.n	800b4ca <RemapAndLinkDMAtoUARTRx+0x606>
 800b4c8:	e57e      	b.n	800afc8 <RemapAndLinkDMAtoUARTRx+0x104>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b4ca:	4a41      	ldr	r2, [pc, #260]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b4cc:	23a8      	movs	r3, #168	; 0xa8
 800b4ce:	58d4      	ldr	r4, [r2, r3]
 800b4d0:	4d41      	ldr	r5, [pc, #260]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b4d2:	402c      	ands	r4, r5
 800b4d4:	50d4      	str	r4, [r2, r3]
 800b4d6:	58d5      	ldr	r5, [r2, r3]
 800b4d8:	24d0      	movs	r4, #208	; 0xd0
 800b4da:	0124      	lsls	r4, r4, #4
 800b4dc:	432c      	orrs	r4, r5
 800b4de:	50d4      	str	r4, [r2, r3]
 800b4e0:	e5d0      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b4e2:	4a3e      	ldr	r2, [pc, #248]	; (800b5dc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b4e4:	680c      	ldr	r4, [r1, #0]
 800b4e6:	4294      	cmp	r4, r2
 800b4e8:	d000      	beq.n	800b4ec <RemapAndLinkDMAtoUARTRx+0x628>
 800b4ea:	e571      	b.n	800afd0 <RemapAndLinkDMAtoUARTRx+0x10c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b4ec:	4a38      	ldr	r2, [pc, #224]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b4ee:	23a8      	movs	r3, #168	; 0xa8
 800b4f0:	58d4      	ldr	r4, [r2, r3]
 800b4f2:	4d3b      	ldr	r5, [pc, #236]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b4f4:	402c      	ands	r4, r5
 800b4f6:	50d4      	str	r4, [r2, r3]
 800b4f8:	58d5      	ldr	r5, [r2, r3]
 800b4fa:	24d0      	movs	r4, #208	; 0xd0
 800b4fc:	0324      	lsls	r4, r4, #12
 800b4fe:	432c      	orrs	r4, r5
 800b500:	50d4      	str	r4, [r2, r3]
 800b502:	e5bf      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b504:	4a37      	ldr	r2, [pc, #220]	; (800b5e4 <RemapAndLinkDMAtoUARTRx+0x720>)
 800b506:	680c      	ldr	r4, [r1, #0]
 800b508:	4294      	cmp	r4, r2
 800b50a:	d000      	beq.n	800b50e <RemapAndLinkDMAtoUARTRx+0x64a>
 800b50c:	e564      	b.n	800afd8 <RemapAndLinkDMAtoUARTRx+0x114>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b50e:	4a30      	ldr	r2, [pc, #192]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b510:	23a8      	movs	r3, #168	; 0xa8
 800b512:	58d4      	ldr	r4, [r2, r3]
 800b514:	4d34      	ldr	r5, [pc, #208]	; (800b5e8 <RemapAndLinkDMAtoUARTRx+0x724>)
 800b516:	402c      	ands	r4, r5
 800b518:	50d4      	str	r4, [r2, r3]
 800b51a:	58d5      	ldr	r5, [r2, r3]
 800b51c:	24d0      	movs	r4, #208	; 0xd0
 800b51e:	0424      	lsls	r4, r4, #16
 800b520:	432c      	orrs	r4, r5
 800b522:	50d4      	str	r4, [r2, r3]
 800b524:	e5ae      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b526:	4a31      	ldr	r2, [pc, #196]	; (800b5ec <RemapAndLinkDMAtoUARTRx+0x728>)
 800b528:	680c      	ldr	r4, [r1, #0]
 800b52a:	4294      	cmp	r4, r2
 800b52c:	d000      	beq.n	800b530 <RemapAndLinkDMAtoUARTRx+0x66c>
 800b52e:	e557      	b.n	800afe0 <RemapAndLinkDMAtoUARTRx+0x11c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b530:	4a2f      	ldr	r2, [pc, #188]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b532:	23a8      	movs	r3, #168	; 0xa8
 800b534:	58d4      	ldr	r4, [r2, r3]
 800b536:	25f0      	movs	r5, #240	; 0xf0
 800b538:	43ac      	bics	r4, r5
 800b53a:	50d4      	str	r4, [r2, r3]
 800b53c:	58d4      	ldr	r4, [r2, r3]
 800b53e:	3d20      	subs	r5, #32
 800b540:	432c      	orrs	r4, r5
 800b542:	50d4      	str	r4, [r2, r3]
 800b544:	e59e      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b546:	4a2b      	ldr	r2, [pc, #172]	; (800b5f4 <RemapAndLinkDMAtoUARTRx+0x730>)
 800b548:	680c      	ldr	r4, [r1, #0]
 800b54a:	4294      	cmp	r4, r2
 800b54c:	d000      	beq.n	800b550 <RemapAndLinkDMAtoUARTRx+0x68c>
 800b54e:	e54b      	b.n	800afe8 <RemapAndLinkDMAtoUARTRx+0x124>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b550:	4a27      	ldr	r2, [pc, #156]	; (800b5f0 <RemapAndLinkDMAtoUARTRx+0x72c>)
 800b552:	23a8      	movs	r3, #168	; 0xa8
 800b554:	58d4      	ldr	r4, [r2, r3]
 800b556:	4d20      	ldr	r5, [pc, #128]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b558:	402c      	ands	r4, r5
 800b55a:	50d4      	str	r4, [r2, r3]
 800b55c:	58d5      	ldr	r5, [r2, r3]
 800b55e:	24d0      	movs	r4, #208	; 0xd0
 800b560:	0124      	lsls	r4, r4, #4
 800b562:	432c      	orrs	r4, r5
 800b564:	50d4      	str	r4, [r2, r3]
 800b566:	e58d      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b568:	4a18      	ldr	r2, [pc, #96]	; (800b5cc <RemapAndLinkDMAtoUARTRx+0x708>)
 800b56a:	680c      	ldr	r4, [r1, #0]
 800b56c:	4294      	cmp	r4, r2
 800b56e:	d000      	beq.n	800b572 <RemapAndLinkDMAtoUARTRx+0x6ae>
 800b570:	e53e      	b.n	800aff0 <RemapAndLinkDMAtoUARTRx+0x12c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b572:	4a17      	ldr	r2, [pc, #92]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b574:	23a8      	movs	r3, #168	; 0xa8
 800b576:	58d4      	ldr	r4, [r2, r3]
 800b578:	250f      	movs	r5, #15
 800b57a:	43ac      	bics	r4, r5
 800b57c:	50d4      	str	r4, [r2, r3]
 800b57e:	58d4      	ldr	r4, [r2, r3]
 800b580:	3d01      	subs	r5, #1
 800b582:	432c      	orrs	r4, r5
 800b584:	50d4      	str	r4, [r2, r3]
 800b586:	e57d      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b588:	4a12      	ldr	r2, [pc, #72]	; (800b5d4 <RemapAndLinkDMAtoUARTRx+0x710>)
 800b58a:	680c      	ldr	r4, [r1, #0]
 800b58c:	4294      	cmp	r4, r2
 800b58e:	d000      	beq.n	800b592 <RemapAndLinkDMAtoUARTRx+0x6ce>
 800b590:	e532      	b.n	800aff8 <RemapAndLinkDMAtoUARTRx+0x134>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b592:	4a0f      	ldr	r2, [pc, #60]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b594:	23a8      	movs	r3, #168	; 0xa8
 800b596:	58d4      	ldr	r4, [r2, r3]
 800b598:	4d0f      	ldr	r5, [pc, #60]	; (800b5d8 <RemapAndLinkDMAtoUARTRx+0x714>)
 800b59a:	402c      	ands	r4, r5
 800b59c:	50d4      	str	r4, [r2, r3]
 800b59e:	58d5      	ldr	r5, [r2, r3]
 800b5a0:	24e0      	movs	r4, #224	; 0xe0
 800b5a2:	0124      	lsls	r4, r4, #4
 800b5a4:	432c      	orrs	r4, r5
 800b5a6:	50d4      	str	r4, [r2, r3]
 800b5a8:	e56c      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b5aa:	4a0c      	ldr	r2, [pc, #48]	; (800b5dc <RemapAndLinkDMAtoUARTRx+0x718>)
 800b5ac:	680c      	ldr	r4, [r1, #0]
 800b5ae:	4294      	cmp	r4, r2
 800b5b0:	d000      	beq.n	800b5b4 <RemapAndLinkDMAtoUARTRx+0x6f0>
 800b5b2:	e525      	b.n	800b000 <RemapAndLinkDMAtoUARTRx+0x13c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b5b4:	4a06      	ldr	r2, [pc, #24]	; (800b5d0 <RemapAndLinkDMAtoUARTRx+0x70c>)
 800b5b6:	23a8      	movs	r3, #168	; 0xa8
 800b5b8:	58d4      	ldr	r4, [r2, r3]
 800b5ba:	4d09      	ldr	r5, [pc, #36]	; (800b5e0 <RemapAndLinkDMAtoUARTRx+0x71c>)
 800b5bc:	402c      	ands	r4, r5
 800b5be:	50d4      	str	r4, [r2, r3]
 800b5c0:	58d5      	ldr	r5, [r2, r3]
 800b5c2:	24e0      	movs	r4, #224	; 0xe0
 800b5c4:	0324      	lsls	r4, r4, #12
 800b5c6:	432c      	orrs	r4, r5
 800b5c8:	50d4      	str	r4, [r2, r3]
 800b5ca:	e55b      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b5cc:	40020008 	.word	0x40020008
 800b5d0:	40020000 	.word	0x40020000
 800b5d4:	40020030 	.word	0x40020030
 800b5d8:	fffff0ff 	.word	0xfffff0ff
 800b5dc:	40020058 	.word	0x40020058
 800b5e0:	fff0ffff 	.word	0xfff0ffff
 800b5e4:	4002006c 	.word	0x4002006c
 800b5e8:	ff0fffff 	.word	0xff0fffff
 800b5ec:	4002041c 	.word	0x4002041c
 800b5f0:	40020400 	.word	0x40020400
 800b5f4:	40020430 	.word	0x40020430
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b5f8:	4a41      	ldr	r2, [pc, #260]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800b5fa:	680c      	ldr	r4, [r1, #0]
 800b5fc:	4294      	cmp	r4, r2
 800b5fe:	d000      	beq.n	800b602 <RemapAndLinkDMAtoUARTRx+0x73e>
 800b600:	e502      	b.n	800b008 <RemapAndLinkDMAtoUARTRx+0x144>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b602:	4a40      	ldr	r2, [pc, #256]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b604:	23a8      	movs	r3, #168	; 0xa8
 800b606:	58d4      	ldr	r4, [r2, r3]
 800b608:	4d3f      	ldr	r5, [pc, #252]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x844>)
 800b60a:	402c      	ands	r4, r5
 800b60c:	50d4      	str	r4, [r2, r3]
 800b60e:	58d5      	ldr	r5, [r2, r3]
 800b610:	24e0      	movs	r4, #224	; 0xe0
 800b612:	0424      	lsls	r4, r4, #16
 800b614:	432c      	orrs	r4, r5
 800b616:	50d4      	str	r4, [r2, r3]
 800b618:	e534      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b61a:	4a3c      	ldr	r2, [pc, #240]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x848>)
 800b61c:	680c      	ldr	r4, [r1, #0]
 800b61e:	4294      	cmp	r4, r2
 800b620:	d000      	beq.n	800b624 <RemapAndLinkDMAtoUARTRx+0x760>
 800b622:	e4f5      	b.n	800b010 <RemapAndLinkDMAtoUARTRx+0x14c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b624:	4a3a      	ldr	r2, [pc, #232]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b626:	23a8      	movs	r3, #168	; 0xa8
 800b628:	58d4      	ldr	r4, [r2, r3]
 800b62a:	25f0      	movs	r5, #240	; 0xf0
 800b62c:	43ac      	bics	r4, r5
 800b62e:	50d4      	str	r4, [r2, r3]
 800b630:	58d4      	ldr	r4, [r2, r3]
 800b632:	3d10      	subs	r5, #16
 800b634:	432c      	orrs	r4, r5
 800b636:	50d4      	str	r4, [r2, r3]
 800b638:	e524      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b63a:	4a36      	ldr	r2, [pc, #216]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x850>)
 800b63c:	680c      	ldr	r4, [r1, #0]
 800b63e:	4294      	cmp	r4, r2
 800b640:	d000      	beq.n	800b644 <RemapAndLinkDMAtoUARTRx+0x780>
 800b642:	e4e9      	b.n	800b018 <RemapAndLinkDMAtoUARTRx+0x154>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b644:	4a32      	ldr	r2, [pc, #200]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b646:	23a8      	movs	r3, #168	; 0xa8
 800b648:	58d4      	ldr	r4, [r2, r3]
 800b64a:	4d33      	ldr	r5, [pc, #204]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x854>)
 800b64c:	402c      	ands	r4, r5
 800b64e:	50d4      	str	r4, [r2, r3]
 800b650:	58d5      	ldr	r5, [r2, r3]
 800b652:	24e0      	movs	r4, #224	; 0xe0
 800b654:	0124      	lsls	r4, r4, #4
 800b656:	432c      	orrs	r4, r5
 800b658:	50d4      	str	r4, [r2, r3]
 800b65a:	e513      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b65c:	4a2f      	ldr	r2, [pc, #188]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x858>)
 800b65e:	680c      	ldr	r4, [r1, #0]
 800b660:	4294      	cmp	r4, r2
 800b662:	d000      	beq.n	800b666 <RemapAndLinkDMAtoUARTRx+0x7a2>
 800b664:	e4dc      	b.n	800b020 <RemapAndLinkDMAtoUARTRx+0x15c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b666:	4a27      	ldr	r2, [pc, #156]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b668:	23a8      	movs	r3, #168	; 0xa8
 800b66a:	58d5      	ldr	r5, [r2, r3]
 800b66c:	260f      	movs	r6, #15
 800b66e:	43b5      	bics	r5, r6
 800b670:	50d5      	str	r5, [r2, r3]
 800b672:	58d4      	ldr	r4, [r2, r3]
 800b674:	4334      	orrs	r4, r6
 800b676:	50d4      	str	r4, [r2, r3]
 800b678:	e504      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b67a:	4a29      	ldr	r2, [pc, #164]	; (800b720 <RemapAndLinkDMAtoUARTRx+0x85c>)
 800b67c:	680c      	ldr	r4, [r1, #0]
 800b67e:	4294      	cmp	r4, r2
 800b680:	d000      	beq.n	800b684 <RemapAndLinkDMAtoUARTRx+0x7c0>
 800b682:	e4d1      	b.n	800b028 <RemapAndLinkDMAtoUARTRx+0x164>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b684:	4a1f      	ldr	r2, [pc, #124]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b686:	23a8      	movs	r3, #168	; 0xa8
 800b688:	58d4      	ldr	r4, [r2, r3]
 800b68a:	4d23      	ldr	r5, [pc, #140]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x854>)
 800b68c:	402c      	ands	r4, r5
 800b68e:	50d4      	str	r4, [r2, r3]
 800b690:	58d5      	ldr	r5, [r2, r3]
 800b692:	24f0      	movs	r4, #240	; 0xf0
 800b694:	0124      	lsls	r4, r4, #4
 800b696:	432c      	orrs	r4, r5
 800b698:	50d4      	str	r4, [r2, r3]
 800b69a:	e4f3      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b69c:	4a21      	ldr	r2, [pc, #132]	; (800b724 <RemapAndLinkDMAtoUARTRx+0x860>)
 800b69e:	680c      	ldr	r4, [r1, #0]
 800b6a0:	4294      	cmp	r4, r2
 800b6a2:	d000      	beq.n	800b6a6 <RemapAndLinkDMAtoUARTRx+0x7e2>
 800b6a4:	e4c4      	b.n	800b030 <RemapAndLinkDMAtoUARTRx+0x16c>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b6a6:	4a17      	ldr	r2, [pc, #92]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b6a8:	23a8      	movs	r3, #168	; 0xa8
 800b6aa:	58d4      	ldr	r4, [r2, r3]
 800b6ac:	4d1e      	ldr	r5, [pc, #120]	; (800b728 <RemapAndLinkDMAtoUARTRx+0x864>)
 800b6ae:	402c      	ands	r4, r5
 800b6b0:	50d4      	str	r4, [r2, r3]
 800b6b2:	58d5      	ldr	r5, [r2, r3]
 800b6b4:	24f0      	movs	r4, #240	; 0xf0
 800b6b6:	0324      	lsls	r4, r4, #12
 800b6b8:	432c      	orrs	r4, r5
 800b6ba:	50d4      	str	r4, [r2, r3]
 800b6bc:	e4e2      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b6be:	4a10      	ldr	r2, [pc, #64]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x83c>)
 800b6c0:	680c      	ldr	r4, [r1, #0]
 800b6c2:	4294      	cmp	r4, r2
 800b6c4:	d000      	beq.n	800b6c8 <RemapAndLinkDMAtoUARTRx+0x804>
 800b6c6:	e4b7      	b.n	800b038 <RemapAndLinkDMAtoUARTRx+0x174>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b6c8:	4a0e      	ldr	r2, [pc, #56]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x840>)
 800b6ca:	23a8      	movs	r3, #168	; 0xa8
 800b6cc:	58d4      	ldr	r4, [r2, r3]
 800b6ce:	4d0e      	ldr	r5, [pc, #56]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x844>)
 800b6d0:	402c      	ands	r4, r5
 800b6d2:	50d4      	str	r4, [r2, r3]
 800b6d4:	58d5      	ldr	r5, [r2, r3]
 800b6d6:	24f0      	movs	r4, #240	; 0xf0
 800b6d8:	0424      	lsls	r4, r4, #16
 800b6da:	432c      	orrs	r4, r5
 800b6dc:	50d4      	str	r4, [r2, r3]
 800b6de:	e4d1      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x848>)
 800b6e2:	680c      	ldr	r4, [r1, #0]
 800b6e4:	4294      	cmp	r4, r2
 800b6e6:	d000      	beq.n	800b6ea <RemapAndLinkDMAtoUARTRx+0x826>
 800b6e8:	e4aa      	b.n	800b040 <RemapAndLinkDMAtoUARTRx+0x17c>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b6ea:	4a09      	ldr	r2, [pc, #36]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x84c>)
 800b6ec:	23a8      	movs	r3, #168	; 0xa8
 800b6ee:	58d5      	ldr	r5, [r2, r3]
 800b6f0:	26f0      	movs	r6, #240	; 0xf0
 800b6f2:	43b5      	bics	r5, r6
 800b6f4:	50d5      	str	r5, [r2, r3]
 800b6f6:	58d4      	ldr	r4, [r2, r3]
 800b6f8:	4334      	orrs	r4, r6
 800b6fa:	50d4      	str	r4, [r2, r3]
 800b6fc:	e4c2      	b.n	800b084 <RemapAndLinkDMAtoUARTRx+0x1c0>
 800b6fe:	46c0      	nop			; (mov r8, r8)
 800b700:	4002006c 	.word	0x4002006c
 800b704:	40020000 	.word	0x40020000
 800b708:	ff0fffff 	.word	0xff0fffff
 800b70c:	4002041c 	.word	0x4002041c
 800b710:	40020400 	.word	0x40020400
 800b714:	40020430 	.word	0x40020430
 800b718:	fffff0ff 	.word	0xfffff0ff
 800b71c:	40020008 	.word	0x40020008
 800b720:	40020030 	.word	0x40020030
 800b724:	40020058 	.word	0x40020058
 800b728:	fff0ffff 	.word	0xfff0ffff

0800b72c <DMA_MSG_RX_Setup>:
{	
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	0004      	movs	r4, r0
 800b730:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b732:	f7ff fbc7 	bl	800aec4 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b736:	2100      	movs	r1, #0
 800b738:	0028      	movs	r0, r5
 800b73a:	f7ff fb09 	bl	800ad50 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800b73e:	0020      	movs	r0, r4
 800b740:	f7fe fd3a 	bl	800a1b8 <GetPort>
 800b744:	1e41      	subs	r1, r0, #1
 800b746:	4803      	ldr	r0, [pc, #12]	; (800b754 <DMA_MSG_RX_Setup+0x28>)
 800b748:	1809      	adds	r1, r1, r0
 800b74a:	2201      	movs	r2, #1
 800b74c:	0020      	movs	r0, r4
 800b74e:	f006 ffeb 	bl	8012728 <HAL_UART_Receive_DMA>
}
 800b752:	bd70      	pop	{r4, r5, r6, pc}
 800b754:	20000a5c 	.word	0x20000a5c

0800b758 <SetupMessagingRxDMAs>:
{	
 800b758:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b75a:	4b0e      	ldr	r3, [pc, #56]	; (800b794 <SetupMessagingRxDMAs+0x3c>)
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <SetupMessagingRxDMAs+0x1c>
	if (portStatus[P2] == FREE)	
 800b762:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <SetupMessagingRxDMAs+0x3c>)
 800b764:	789b      	ldrb	r3, [r3, #2]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d009      	beq.n	800b77e <SetupMessagingRxDMAs+0x26>
	if (portStatus[P3] == FREE)
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <SetupMessagingRxDMAs+0x3c>)
 800b76c:	78db      	ldrb	r3, [r3, #3]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <SetupMessagingRxDMAs+0x30>
}
 800b772:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b774:	4908      	ldr	r1, [pc, #32]	; (800b798 <SetupMessagingRxDMAs+0x40>)
 800b776:	4809      	ldr	r0, [pc, #36]	; (800b79c <SetupMessagingRxDMAs+0x44>)
 800b778:	f7ff ffd8 	bl	800b72c <DMA_MSG_RX_Setup>
 800b77c:	e7f1      	b.n	800b762 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b77e:	4908      	ldr	r1, [pc, #32]	; (800b7a0 <SetupMessagingRxDMAs+0x48>)
 800b780:	4808      	ldr	r0, [pc, #32]	; (800b7a4 <SetupMessagingRxDMAs+0x4c>)
 800b782:	f7ff ffd3 	bl	800b72c <DMA_MSG_RX_Setup>
 800b786:	e7f0      	b.n	800b76a <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b788:	4907      	ldr	r1, [pc, #28]	; (800b7a8 <SetupMessagingRxDMAs+0x50>)
 800b78a:	4808      	ldr	r0, [pc, #32]	; (800b7ac <SetupMessagingRxDMAs+0x54>)
 800b78c:	f7ff ffce 	bl	800b72c <DMA_MSG_RX_Setup>
}
 800b790:	e7ef      	b.n	800b772 <SetupMessagingRxDMAs+0x1a>
 800b792:	46c0      	nop			; (mov r8, r8)
 800b794:	200008b4 	.word	0x200008b4
 800b798:	20001004 	.word	0x20001004
 800b79c:	20005ac4 	.word	0x20005ac4
 800b7a0:	2000103c 	.word	0x2000103c
 800b7a4:	200059d8 	.word	0x200059d8
 800b7a8:	20001074 	.word	0x20001074
 800b7ac:	200058a4 	.word	0x200058a4

0800b7b0 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7b2:	46c6      	mov	lr, r8
 800b7b4:	b500      	push	{lr}
 800b7b6:	0007      	movs	r7, r0
	StopStreamDMA(port);
 800b7b8:	f7ff fa8a 	bl	800acd0 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b7bc:	1e7c      	subs	r4, r7, #1
 800b7be:	00e5      	lsls	r5, r4, #3
 800b7c0:	1b2e      	subs	r6, r5, r4
 800b7c2:	00f6      	lsls	r6, r6, #3
 800b7c4:	4b11      	ldr	r3, [pc, #68]	; (800b80c <SwitchStreamDMAToMsg+0x5c>)
 800b7c6:	18f6      	adds	r6, r6, r3
 800b7c8:	4b11      	ldr	r3, [pc, #68]	; (800b810 <SwitchStreamDMAToMsg+0x60>)
 800b7ca:	4698      	mov	r8, r3
 800b7cc:	1b2b      	subs	r3, r5, r4
 800b7ce:	00db      	lsls	r3, r3, #3
 800b7d0:	4642      	mov	r2, r8
 800b7d2:	5899      	ldr	r1, [r3, r2]
 800b7d4:	0030      	movs	r0, r6
 800b7d6:	f7ff fa03 	bl	800abe0 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b7da:	1b2b      	subs	r3, r5, r4
 800b7dc:	00db      	lsls	r3, r3, #3
 800b7de:	4443      	add	r3, r8
 800b7e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b7e2:	f7fe fce9 	bl	800a1b8 <GetPort>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	4a0a      	ldr	r2, [pc, #40]	; (800b814 <SwitchStreamDMAToMsg+0x64>)
 800b7ea:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800b7ec:	1b2d      	subs	r5, r5, r4
 800b7ee:	00ed      	lsls	r5, r5, #3
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port - 1] = 0;
 800b7f4:	00a4      	lsls	r4, r4, #2
 800b7f6:	4a08      	ldr	r2, [pc, #32]	; (800b818 <SwitchStreamDMAToMsg+0x68>)
 800b7f8:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b7fa:	0038      	movs	r0, r7
 800b7fc:	f002 fa64 	bl	800dcc8 <GetUart>
 800b800:	0031      	movs	r1, r6
 800b802:	f7ff ff93 	bl	800b72c <DMA_MSG_RX_Setup>
}
 800b806:	bc80      	pop	{r7}
 800b808:	46b8      	mov	r8, r7
 800b80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b80c:	20001004 	.word	0x20001004
 800b810:	200011fc 	.word	0x200011fc
 800b814:	200008b4 	.word	0x200008b4
 800b818:	20000ce8 	.word	0x20000ce8

0800b81c <DMA_STREAM_Setup>:
{	
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	0005      	movs	r5, r0
 800b820:	000f      	movs	r7, r1
 800b822:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b824:	f7fe fcc8 	bl	800a1b8 <GetPort>
	hDMA = &streamDMA[port-1];
 800b828:	3801      	subs	r0, #1
 800b82a:	00c4      	lsls	r4, r0, #3
 800b82c:	1a24      	subs	r4, r4, r0
 800b82e:	00e4      	lsls	r4, r4, #3
 800b830:	4809      	ldr	r0, [pc, #36]	; (800b858 <DMA_STREAM_Setup+0x3c>)
 800b832:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b834:	0021      	movs	r1, r4
 800b836:	0028      	movs	r0, r5
 800b838:	f7ff fb44 	bl	800aec4 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b83c:	2101      	movs	r1, #1
 800b83e:	0020      	movs	r0, r4
 800b840:	f7ff fa86 	bl	800ad50 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b844:	2369      	movs	r3, #105	; 0x69
 800b846:	2201      	movs	r2, #1
 800b848:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	3128      	adds	r1, #40	; 0x28
 800b84e:	0032      	movs	r2, r6
 800b850:	0028      	movs	r0, r5
 800b852:	f006 ff69 	bl	8012728 <HAL_UART_Receive_DMA>
}
 800b856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b858:	200011fc 	.word	0x200011fc

0800b85c <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b85c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b85e:	4807      	ldr	r0, [pc, #28]	; (800b87c <CRC_Init+0x20>)
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <CRC_Init+0x24>)
 800b862:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b864:	2310      	movs	r3, #16
 800b866:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800b868:	2300      	movs	r3, #0
 800b86a:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b86c:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800b86e:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800b870:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b872:	3303      	adds	r3, #3
 800b874:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b876:	f004 ff18 	bl	80106aa <HAL_CRC_Init>
}
 800b87a:	bd10      	pop	{r4, pc}
 800b87c:	20005b40 	.word	0x20005b40
 800b880:	40023000 	.word	0x40023000

0800b884 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b884:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b886:	4a05      	ldr	r2, [pc, #20]	; (800b89c <HAL_CRC_MspInit+0x18>)
 800b888:	6951      	ldr	r1, [r2, #20]
 800b88a:	2340      	movs	r3, #64	; 0x40
 800b88c:	4319      	orrs	r1, r3
 800b88e:	6151      	str	r1, [r2, #20]
 800b890:	6952      	ldr	r2, [r2, #20]
 800b892:	4013      	ands	r3, r2
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	9b01      	ldr	r3, [sp, #4]
}
 800b898:	b002      	add	sp, #8
 800b89a:	4770      	bx	lr
 800b89c:	40021000 	.word	0x40021000

0800b8a0 <CalculateCRC8>:
/*
 * calculate CRC8 byte for a data buffer
 */

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800b8a0:	b530      	push	{r4, r5, lr}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	0005      	movs	r5, r0
 800b8a6:	000c      	movs	r4, r1
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9301      	str	r3, [sp, #4]

  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d03d      	beq.n	800b92c <CalculateCRC8+0x8c>
 800b8b0:	2900      	cmp	r1, #0
 800b8b2:	d03d      	beq.n	800b930 <CalculateCRC8+0x90>
  {
	if(size < 4)
 800b8b4:	2903      	cmp	r1, #3
 800b8b6:	d816      	bhi.n	800b8e6 <CalculateCRC8+0x46>
	{
		temp_index = 0;
		for(int i=0; i<4; i++)
 800b8b8:	2300      	movs	r3, #0
		temp_index = 0;
 800b8ba:	2100      	movs	r1, #0
		for(int i=0; i<4; i++)
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	dc0b      	bgt.n	800b8d8 <CalculateCRC8+0x38>
		{
			temp_buffer[i] = pBuffer[temp_index++];
 800b8c0:	1c4a      	adds	r2, r1, #1
 800b8c2:	b2d2      	uxtb	r2, r2
 800b8c4:	5c68      	ldrb	r0, [r5, r1]
 800b8c6:	a901      	add	r1, sp, #4
 800b8c8:	54c8      	strb	r0, [r1, r3]
			if(--size == 0) break;
 800b8ca:	3c01      	subs	r4, #1
 800b8cc:	b2a4      	uxth	r4, r4
 800b8ce:	2c00      	cmp	r4, #0
 800b8d0:	d002      	beq.n	800b8d8 <CalculateCRC8+0x38>
		for(int i=0; i<4; i++)
 800b8d2:	3301      	adds	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b8d4:	0011      	movs	r1, r2
 800b8d6:	e7f1      	b.n	800b8bc <CalculateCRC8+0x1c>
		}
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b8d8:	2201      	movs	r2, #1
 800b8da:	a901      	add	r1, sp, #4
 800b8dc:	4816      	ldr	r0, [pc, #88]	; (800b938 <CalculateCRC8+0x98>)
 800b8de:	f004 ff3f 	bl	8010760 <HAL_CRC_Calculate>
 800b8e2:	b2c0      	uxtb	r0, r0
 800b8e4:	e025      	b.n	800b932 <CalculateCRC8+0x92>

	}

	else
	{
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b8e6:	088a      	lsrs	r2, r1, #2
 800b8e8:	0001      	movs	r1, r0
 800b8ea:	4813      	ldr	r0, [pc, #76]	; (800b938 <CalculateCRC8+0x98>)
 800b8ec:	f004 ff38 	bl	8010760 <HAL_CRC_Calculate>
 800b8f0:	b2c0      	uxtb	r0, r0
		if ((size%4)!=0)
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	0013      	movs	r3, r2
 800b8f6:	4023      	ands	r3, r4
 800b8f8:	4222      	tst	r2, r4
 800b8fa:	d01a      	beq.n	800b932 <CalculateCRC8+0x92>
		{
			temp_index = size - (size%4);
 800b8fc:	b2e4      	uxtb	r4, r4
 800b8fe:	4394      	bics	r4, r2
			size %= 4;
			for(int i=0; i<4; i++)
 800b900:	2200      	movs	r2, #0
 800b902:	2a03      	cmp	r2, #3
 800b904:	dc0b      	bgt.n	800b91e <CalculateCRC8+0x7e>
			{
				temp_buffer[i] = pBuffer[temp_index++];
 800b906:	1c61      	adds	r1, r4, #1
 800b908:	b2c9      	uxtb	r1, r1
 800b90a:	5d2c      	ldrb	r4, [r5, r4]
 800b90c:	a801      	add	r0, sp, #4
 800b90e:	5484      	strb	r4, [r0, r2]
				if(--size == 0) break;
 800b910:	3b01      	subs	r3, #1
 800b912:	b29b      	uxth	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <CalculateCRC8+0x7e>
			for(int i=0; i<4; i++)
 800b918:	3201      	adds	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b91a:	000c      	movs	r4, r1
 800b91c:	e7f1      	b.n	800b902 <CalculateCRC8+0x62>
			}
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b91e:	2201      	movs	r2, #1
 800b920:	a901      	add	r1, sp, #4
 800b922:	4805      	ldr	r0, [pc, #20]	; (800b938 <CalculateCRC8+0x98>)
 800b924:	f004 fef2 	bl	801070c <HAL_CRC_Accumulate>
 800b928:	b2c0      	uxtb	r0, r0

		}
	}

	return pTemp;
 800b92a:	e002      	b.n	800b932 <CalculateCRC8+0x92>
  }
  
else
	return 0;
 800b92c:	2000      	movs	r0, #0
 800b92e:	e000      	b.n	800b932 <CalculateCRC8+0x92>
 800b930:	2000      	movs	r0, #0
}
 800b932:	b003      	add	sp, #12
 800b934:	bd30      	pop	{r4, r5, pc}
 800b936:	46c0      	nop			; (mov r8, r8)
 800b938:	20005b40 	.word	0x20005b40

0800b93c <EE_FindValidPage>:
 *     @arg READ_FROM_VALID_PAGE: read operation from valid page
 *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
 * @retval Valid page number (PAGEA or PAGEB) or NO_VALID_PAGE in case
 *   of no valid page was found
 */
static uint16_t EE_FindValidPage(uint8_t Operation){
 800b93c:	0002      	movs	r2, r0
	uint16_t PageStatusA =6, PageStatusB =6;
	
	/* Get PageA actual status */
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800b93e:	4b13      	ldr	r3, [pc, #76]	; (800b98c <EE_FindValidPage+0x50>)
 800b940:	8818      	ldrh	r0, [r3, #0]
 800b942:	b280      	uxth	r0, r0
	
	/* Get PageB actual status */
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800b944:	4b12      	ldr	r3, [pc, #72]	; (800b990 <EE_FindValidPage+0x54>)
 800b946:	881b      	ldrh	r3, [r3, #0]
 800b948:	b29b      	uxth	r3, r3
	
	/* Write or read operation */
	switch(Operation){
 800b94a:	2a00      	cmp	r2, #0
 800b94c:	d011      	beq.n	800b972 <EE_FindValidPage+0x36>
 800b94e:	2a01      	cmp	r2, #1
 800b950:	d115      	bne.n	800b97e <EE_FindValidPage+0x42>
		case WRITE_IN_VALID_PAGE: /* ---- Write operation ---- */
			if(PageStatusB == VALID_PAGE){
 800b952:	2b00      	cmp	r3, #0
 800b954:	d106      	bne.n	800b964 <EE_FindValidPage+0x28>
				/* PageA receiving data */
				if(PageStatusA == RECEIVE_DATA){
 800b956:	4a0f      	ldr	r2, [pc, #60]	; (800b994 <EE_FindValidPage+0x58>)
 800b958:	4290      	cmp	r0, r2
 800b95a:	d001      	beq.n	800b960 <EE_FindValidPage+0x24>
					return PAGEA; /* PageA valid */
				}
				else{
					return PAGEB; /* PageB valid */
 800b95c:	2002      	movs	r0, #2
 800b95e:	e00f      	b.n	800b980 <EE_FindValidPage+0x44>
					return PAGEA; /* PageA valid */
 800b960:	0018      	movs	r0, r3
 800b962:	e00d      	b.n	800b980 <EE_FindValidPage+0x44>
				}
			}
			else if(PageStatusA == VALID_PAGE){
 800b964:	2800      	cmp	r0, #0
 800b966:	d10c      	bne.n	800b982 <EE_FindValidPage+0x46>
				/* PageB receiving data */
				if(PageStatusB == RECEIVE_DATA){
 800b968:	4a0a      	ldr	r2, [pc, #40]	; (800b994 <EE_FindValidPage+0x58>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d108      	bne.n	800b980 <EE_FindValidPage+0x44>
					return PAGEB; /* PageB valid */
 800b96e:	3002      	adds	r0, #2
 800b970:	e006      	b.n	800b980 <EE_FindValidPage+0x44>
			else{
				return NO_VALID_PAGE; /* No valid Page */
			}
			
		case READ_FROM_VALID_PAGE: /* ---- Read operation ---- */
			if(PageStatusA == VALID_PAGE){
 800b972:	2800      	cmp	r0, #0
 800b974:	d004      	beq.n	800b980 <EE_FindValidPage+0x44>
				return PAGEA; /* PageA valid */
			}
			else if(PageStatusB == VALID_PAGE){
 800b976:	2b00      	cmp	r3, #0
 800b978:	d105      	bne.n	800b986 <EE_FindValidPage+0x4a>
				return PAGEB; /* PageB valid */
 800b97a:	2002      	movs	r0, #2
 800b97c:	e000      	b.n	800b980 <EE_FindValidPage+0x44>
	switch(Operation){
 800b97e:	2000      	movs	r0, #0
			}
			
		default:
			return PAGEA; /* PageA valid */
	}
}
 800b980:	4770      	bx	lr
				return NO_VALID_PAGE; /* No valid Page */
 800b982:	20ab      	movs	r0, #171	; 0xab
 800b984:	e7fc      	b.n	800b980 <EE_FindValidPage+0x44>
				return NO_VALID_PAGE; /* No valid Page */
 800b986:	20ab      	movs	r0, #171	; 0xab
 800b988:	e7fa      	b.n	800b980 <EE_FindValidPage+0x44>
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	0801e000 	.word	0x0801e000
 800b990:	0801f000 	.word	0x0801f000
 800b994:	0000eeee 	.word	0x0000eeee

0800b998 <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	0005      	movs	r5, r0
 800b99c:	000e      	movs	r6, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800b99e:	f005 fc29 	bl	80111f4 <HAL_FLASH_Unlock>
	
	/* Get valid Page for write operation */
	ValidPage =EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	f7ff ffca 	bl	800b93c <EE_FindValidPage>
 800b9a8:	0003      	movs	r3, r0
	
	/* Check if there is no valid page */
	if(ValidPage == NO_VALID_PAGE){
 800b9aa:	28ab      	cmp	r0, #171	; 0xab
 800b9ac:	d03d      	beq.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800b9ae:	4a1f      	ldr	r2, [pc, #124]	; (800ba2c <EE_VerifyPageFullWriteVariable+0x94>)
 800b9b0:	1884      	adds	r4, r0, r2
 800b9b2:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800b9b4:	3302      	adds	r3, #2
 800b9b6:	02db      	lsls	r3, r3, #11
 800b9b8:	4a1d      	ldr	r2, [pc, #116]	; (800ba30 <EE_VerifyPageFullWriteVariable+0x98>)
 800b9ba:	4694      	mov	ip, r2
 800b9bc:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
 800b9be:	429c      	cmp	r4, r3
 800b9c0:	d230      	bcs.n	800ba24 <EE_VerifyPageFullWriteVariable+0x8c>
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800b9c2:	6822      	ldr	r2, [r4, #0]
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	d001      	beq.n	800b9cc <EE_VerifyPageFullWriteVariable+0x34>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800b9c8:	3404      	adds	r4, #4
 800b9ca:	e7f8      	b.n	800b9be <EE_VerifyPageFullWriteVariable+0x26>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800b9cc:	0032      	movs	r2, r6
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	0021      	movs	r1, r4
 800b9d2:	2001      	movs	r0, #1
 800b9d4:	f005 fc58 	bl	8011288 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800b9d8:	4816      	ldr	r0, [pc, #88]	; (800ba34 <EE_VerifyPageFullWriteVariable+0x9c>)
 800b9da:	f005 fc29 	bl	8011230 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d003      	beq.n	800b9ea <EE_VerifyPageFullWriteVariable+0x52>
				return pFlash.ErrorCode;
 800b9e2:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <EE_VerifyPageFullWriteVariable+0xa0>)
 800b9e4:	69d8      	ldr	r0, [r3, #28]
 800b9e6:	b280      	uxth	r0, r0
 800b9e8:	e01f      	b.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800b9ea:	4a14      	ldr	r2, [pc, #80]	; (800ba3c <EE_VerifyPageFullWriteVariable+0xa4>)
 800b9ec:	6913      	ldr	r3, [r2, #16]
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	438b      	bics	r3, r1
 800b9f2:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800b9f4:	1ca1      	adds	r1, r4, #2
 800b9f6:	002a      	movs	r2, r5
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2001      	movs	r0, #1
 800b9fc:	f005 fc44 	bl	8011288 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba00:	480c      	ldr	r0, [pc, #48]	; (800ba34 <EE_VerifyPageFullWriteVariable+0x9c>)
 800ba02:	f005 fc15 	bl	8011230 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d003      	beq.n	800ba12 <EE_VerifyPageFullWriteVariable+0x7a>
				return pFlash.ErrorCode;
 800ba0a:	4b0b      	ldr	r3, [pc, #44]	; (800ba38 <EE_VerifyPageFullWriteVariable+0xa0>)
 800ba0c:	69d8      	ldr	r0, [r3, #28]
 800ba0e:	b280      	uxth	r0, r0
 800ba10:	e00b      	b.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba12:	4a0a      	ldr	r2, [pc, #40]	; (800ba3c <EE_VerifyPageFullWriteVariable+0xa4>)
 800ba14:	6913      	ldr	r3, [r2, #16]
 800ba16:	2101      	movs	r1, #1
 800ba18:	438b      	bics	r3, r1
 800ba1a:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800ba1c:	4b06      	ldr	r3, [pc, #24]	; (800ba38 <EE_VerifyPageFullWriteVariable+0xa0>)
 800ba1e:	69d8      	ldr	r0, [r3, #28]
 800ba20:	b280      	uxth	r0, r0
 800ba22:	e002      	b.n	800ba2a <EE_VerifyPageFullWriteVariable+0x92>
		}
	}
	
	HAL_FLASH_Lock();
 800ba24:	f005 fbfa 	bl	801121c <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800ba28:	2080      	movs	r0, #128	; 0x80
}
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	0001003c 	.word	0x0001003c
 800ba30:	0801dffe 	.word	0x0801dffe
 800ba34:	0000c350 	.word	0x0000c350
 800ba38:	20005c90 	.word	0x20005c90
 800ba3c:	40022000 	.word	0x40022000

0800ba40 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	0005      	movs	r5, r0
 800ba44:	000c      	movs	r4, r1
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800ba46:	2000      	movs	r0, #0
 800ba48:	f7ff ff78 	bl	800b93c <EE_FindValidPage>
 800ba4c:	0003      	movs	r3, r0
	if(ValidPage == NO_VALID_PAGE){
 800ba4e:	28ab      	cmp	r0, #171	; 0xab
 800ba50:	d016      	beq.n	800ba80 <EE_ReadVariable+0x40>
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800ba52:	4a0c      	ldr	r2, [pc, #48]	; (800ba84 <EE_ReadVariable+0x44>)
 800ba54:	1881      	adds	r1, r0, r2
 800ba56:	02c9      	lsls	r1, r1, #11
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800ba58:	3302      	adds	r3, #2
 800ba5a:	02db      	lsls	r3, r3, #11
 800ba5c:	4a0a      	ldr	r2, [pc, #40]	; (800ba88 <EE_ReadVariable+0x48>)
 800ba5e:	4694      	mov	ip, r2
 800ba60:	4463      	add	r3, ip
	while(Address > (PageStartAddress + 2)){
 800ba62:	1c8a      	adds	r2, r1, #2
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d20a      	bcs.n	800ba7e <EE_ReadVariable+0x3e>
		AddressValue =(*(__IO uint16_t* )Address);
 800ba68:	881a      	ldrh	r2, [r3, #0]
 800ba6a:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800ba6c:	42aa      	cmp	r2, r5
 800ba6e:	d001      	beq.n	800ba74 <EE_ReadVariable+0x34>
			Address =Address - 4;
 800ba70:	3b04      	subs	r3, #4
 800ba72:	e7f6      	b.n	800ba62 <EE_ReadVariable+0x22>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800ba74:	3b02      	subs	r3, #2
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	8023      	strh	r3, [r4, #0]
			ReadStatus =0;
 800ba7a:	2000      	movs	r0, #0
			break;
 800ba7c:	e000      	b.n	800ba80 <EE_ReadVariable+0x40>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800ba7e:	2001      	movs	r0, #1
}
 800ba80:	bd70      	pop	{r4, r5, r6, pc}
 800ba82:	46c0      	nop			; (mov r8, r8)
 800ba84:	0001003c 	.word	0x0001003c
 800ba88:	0801dffe 	.word	0x0801dffe

0800ba8c <EE_PageTransfer>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_PageTransfer(uint16_t VirtAddress,uint16_t Data){
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8e:	0005      	movs	r5, r0
 800ba90:	000c      	movs	r4, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800ba92:	f005 fbaf 	bl	80111f4 <HAL_FLASH_Unlock>
	
	/* Get active Page for read operation */
	ValidPage =EE_FindValidPage(READ_FROM_VALID_PAGE);
 800ba96:	2000      	movs	r0, #0
 800ba98:	f7ff ff50 	bl	800b93c <EE_FindValidPage>
	
	if(ValidPage == PAGEB) /* PageB valid */
 800ba9c:	2802      	cmp	r0, #2
 800ba9e:	d013      	beq.n	800bac8 <EE_PageTransfer+0x3c>
		NewPageAddress = PAGEA1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEB1_BASE_ADDRESS;
	}
	else if(ValidPage == PAGEA) /* PageA valid */
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d000      	beq.n	800baa6 <EE_PageTransfer+0x1a>
 800baa4:	e06d      	b.n	800bb82 <EE_PageTransfer+0xf6>
	{
		/* New page address where variable will be moved to */
		NewPageAddress = PAGEB1_BASE_ADDRESS;
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800baa6:	4f38      	ldr	r7, [pc, #224]	; (800bb88 <EE_PageTransfer+0xfc>)
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800baa8:	4e38      	ldr	r6, [pc, #224]	; (800bb8c <EE_PageTransfer+0x100>)
	else{
		return NO_VALID_PAGE; /* No valid Page */
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800baaa:	4a39      	ldr	r2, [pc, #228]	; (800bb90 <EE_PageTransfer+0x104>)
 800baac:	2300      	movs	r3, #0
 800baae:	0031      	movs	r1, r6
 800bab0:	2001      	movs	r0, #1
 800bab2:	f005 fbe9 	bl	8011288 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bab6:	4837      	ldr	r0, [pc, #220]	; (800bb94 <EE_PageTransfer+0x108>)
 800bab8:	f005 fbba 	bl	8011230 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800babc:	2800      	cmp	r0, #0
 800babe:	d006      	beq.n	800bace <EE_PageTransfer+0x42>
		return pFlash.ErrorCode;
 800bac0:	4b35      	ldr	r3, [pc, #212]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bac2:	69d8      	ldr	r0, [r3, #28]
 800bac4:	b280      	uxth	r0, r0
	
	HAL_FLASH_Lock();
	
	/* Return last operation flash status */
	return FlashStatus;
}
 800bac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800bac8:	4f30      	ldr	r7, [pc, #192]	; (800bb8c <EE_PageTransfer+0x100>)
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800baca:	4e2f      	ldr	r6, [pc, #188]	; (800bb88 <EE_PageTransfer+0xfc>)
 800bacc:	e7ed      	b.n	800baaa <EE_PageTransfer+0x1e>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bace:	4a33      	ldr	r2, [pc, #204]	; (800bb9c <EE_PageTransfer+0x110>)
 800bad0:	6913      	ldr	r3, [r2, #16]
 800bad2:	2101      	movs	r1, #1
 800bad4:	438b      	bics	r3, r1
 800bad6:	6113      	str	r3, [r2, #16]
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bad8:	0021      	movs	r1, r4
 800bada:	0028      	movs	r0, r5
 800badc:	f7ff ff5c 	bl	800b998 <EE_VerifyPageFullWriteVariable>
	if(EepromStatus != HAL_OK){
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d1f0      	bne.n	800bac6 <EE_PageTransfer+0x3a>
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bae4:	2401      	movs	r4, #1
 800bae6:	e001      	b.n	800baec <EE_PageTransfer+0x60>
 800bae8:	3401      	adds	r4, #1
 800baea:	b2a4      	uxth	r4, r4
 800baec:	2380      	movs	r3, #128	; 0x80
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d80f      	bhi.n	800bb14 <EE_PageTransfer+0x88>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800baf4:	42ac      	cmp	r4, r5
 800baf6:	d0f7      	beq.n	800bae8 <EE_PageTransfer+0x5c>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800baf8:	4929      	ldr	r1, [pc, #164]	; (800bba0 <EE_PageTransfer+0x114>)
 800bafa:	0020      	movs	r0, r4
 800bafc:	f7ff ffa0 	bl	800ba40 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800bb00:	2801      	cmp	r0, #1
 800bb02:	d0f1      	beq.n	800bae8 <EE_PageTransfer+0x5c>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bb04:	4b26      	ldr	r3, [pc, #152]	; (800bba0 <EE_PageTransfer+0x114>)
 800bb06:	8819      	ldrh	r1, [r3, #0]
 800bb08:	0020      	movs	r0, r4
 800bb0a:	f7ff ff45 	bl	800b998 <EE_VerifyPageFullWriteVariable>
				if(EepromStatus != HAL_OK){
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d0ea      	beq.n	800bae8 <EE_PageTransfer+0x5c>
 800bb12:	e7d8      	b.n	800bac6 <EE_PageTransfer+0x3a>
	FLASH_PageErase(OldPageAddress);
 800bb14:	0038      	movs	r0, r7
 800bb16:	f005 fc1d 	bl	8011354 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb1a:	481e      	ldr	r0, [pc, #120]	; (800bb94 <EE_PageTransfer+0x108>)
 800bb1c:	f005 fb88 	bl	8011230 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d003      	beq.n	800bb2c <EE_PageTransfer+0xa0>
		return pFlash.ErrorCode;
 800bb24:	4b1c      	ldr	r3, [pc, #112]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bb26:	69d8      	ldr	r0, [r3, #28]
 800bb28:	b280      	uxth	r0, r0
 800bb2a:	e7cc      	b.n	800bac6 <EE_PageTransfer+0x3a>
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800bb2c:	2380      	movs	r3, #128	; 0x80
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	18f8      	adds	r0, r7, r3
 800bb32:	f005 fc0f 	bl	8011354 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb36:	4817      	ldr	r0, [pc, #92]	; (800bb94 <EE_PageTransfer+0x108>)
 800bb38:	f005 fb7a 	bl	8011230 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d003      	beq.n	800bb48 <EE_PageTransfer+0xbc>
			return pFlash.ErrorCode;
 800bb40:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bb42:	69d8      	ldr	r0, [r3, #28]
 800bb44:	b280      	uxth	r0, r0
 800bb46:	e7be      	b.n	800bac6 <EE_PageTransfer+0x3a>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bb48:	4a14      	ldr	r2, [pc, #80]	; (800bb9c <EE_PageTransfer+0x110>)
 800bb4a:	6913      	ldr	r3, [r2, #16]
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	438b      	bics	r3, r1
 800bb50:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800bb52:	2200      	movs	r2, #0
 800bb54:	2300      	movs	r3, #0
 800bb56:	0031      	movs	r1, r6
 800bb58:	2001      	movs	r0, #1
 800bb5a:	f005 fb95 	bl	8011288 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bb5e:	480d      	ldr	r0, [pc, #52]	; (800bb94 <EE_PageTransfer+0x108>)
 800bb60:	f005 fb66 	bl	8011230 <FLASH_WaitForLastOperation>
 800bb64:	1e04      	subs	r4, r0, #0
	if(FlashStatus != HAL_OK){
 800bb66:	d003      	beq.n	800bb70 <EE_PageTransfer+0xe4>
		return pFlash.ErrorCode;
 800bb68:	4b0b      	ldr	r3, [pc, #44]	; (800bb98 <EE_PageTransfer+0x10c>)
 800bb6a:	69d8      	ldr	r0, [r3, #28]
 800bb6c:	b280      	uxth	r0, r0
 800bb6e:	e7aa      	b.n	800bac6 <EE_PageTransfer+0x3a>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bb70:	4a0a      	ldr	r2, [pc, #40]	; (800bb9c <EE_PageTransfer+0x110>)
 800bb72:	6913      	ldr	r3, [r2, #16]
 800bb74:	2101      	movs	r1, #1
 800bb76:	438b      	bics	r3, r1
 800bb78:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800bb7a:	f005 fb4f 	bl	801121c <HAL_FLASH_Lock>
	return FlashStatus;
 800bb7e:	b2a0      	uxth	r0, r4
 800bb80:	e7a1      	b.n	800bac6 <EE_PageTransfer+0x3a>
		return NO_VALID_PAGE; /* No valid Page */
 800bb82:	20ab      	movs	r0, #171	; 0xab
 800bb84:	e79f      	b.n	800bac6 <EE_PageTransfer+0x3a>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	0801e000 	.word	0x0801e000
 800bb8c:	0801f000 	.word	0x0801f000
 800bb90:	0000eeee 	.word	0x0000eeee
 800bb94:	0000c350 	.word	0x0000c350
 800bb98:	20005c90 	.word	0x20005c90
 800bb9c:	40022000 	.word	0x40022000
 800bba0:	2000134c 	.word	0x2000134c

0800bba4 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	0005      	movs	r5, r0
 800bba8:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800bbaa:	f005 fb23 	bl	80111f4 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bbae:	0031      	movs	r1, r6
 800bbb0:	0028      	movs	r0, r5
 800bbb2:	f7ff fef1 	bl	800b998 <EE_VerifyPageFullWriteVariable>
 800bbb6:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800bbb8:	2880      	cmp	r0, #128	; 0x80
 800bbba:	d003      	beq.n	800bbc4 <EE_WriteVariable+0x20>
	HAL_FLASH_Lock();
 800bbbc:	f005 fb2e 	bl	801121c <HAL_FLASH_Lock>
}
 800bbc0:	0020      	movs	r0, r4
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
		Status =EE_PageTransfer(VirtAddress,Data);
 800bbc4:	0031      	movs	r1, r6
 800bbc6:	0028      	movs	r0, r5
 800bbc8:	f7ff ff60 	bl	800ba8c <EE_PageTransfer>
 800bbcc:	0004      	movs	r4, r0
 800bbce:	e7f5      	b.n	800bbbc <EE_WriteVariable+0x18>

0800bbd0 <EE_Format>:
uint16_t EE_Format(void){
 800bbd0:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800bbd2:	f005 fb0f 	bl	80111f4 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bbd6:	4829      	ldr	r0, [pc, #164]	; (800bc7c <EE_Format+0xac>)
 800bbd8:	f005 fbbc 	bl	8011354 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbdc:	4828      	ldr	r0, [pc, #160]	; (800bc80 <EE_Format+0xb0>)
 800bbde:	f005 fb27 	bl	8011230 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d003      	beq.n	800bbee <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800bbe6:	4b27      	ldr	r3, [pc, #156]	; (800bc84 <EE_Format+0xb4>)
 800bbe8:	69d8      	ldr	r0, [r3, #28]
 800bbea:	b280      	uxth	r0, r0
}
 800bbec:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bbee:	4826      	ldr	r0, [pc, #152]	; (800bc88 <EE_Format+0xb8>)
 800bbf0:	f005 fbb0 	bl	8011354 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbf4:	4822      	ldr	r0, [pc, #136]	; (800bc80 <EE_Format+0xb0>)
 800bbf6:	f005 fb1b 	bl	8011230 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d003      	beq.n	800bc06 <EE_Format+0x36>
			return pFlash.ErrorCode;
 800bbfe:	4b21      	ldr	r3, [pc, #132]	; (800bc84 <EE_Format+0xb4>)
 800bc00:	69d8      	ldr	r0, [r3, #28]
 800bc02:	b280      	uxth	r0, r0
 800bc04:	e7f2      	b.n	800bbec <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bc06:	4a21      	ldr	r2, [pc, #132]	; (800bc8c <EE_Format+0xbc>)
 800bc08:	6913      	ldr	r3, [r2, #16]
 800bc0a:	2102      	movs	r1, #2
 800bc0c:	438b      	bics	r3, r1
 800bc0e:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bc10:	2200      	movs	r2, #0
 800bc12:	2300      	movs	r3, #0
 800bc14:	4919      	ldr	r1, [pc, #100]	; (800bc7c <EE_Format+0xac>)
 800bc16:	2001      	movs	r0, #1
 800bc18:	f005 fb36 	bl	8011288 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc1c:	4818      	ldr	r0, [pc, #96]	; (800bc80 <EE_Format+0xb0>)
 800bc1e:	f005 fb07 	bl	8011230 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d003      	beq.n	800bc2e <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800bc26:	4b17      	ldr	r3, [pc, #92]	; (800bc84 <EE_Format+0xb4>)
 800bc28:	69d8      	ldr	r0, [r3, #28]
 800bc2a:	b280      	uxth	r0, r0
 800bc2c:	e7de      	b.n	800bbec <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc2e:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <EE_Format+0xbc>)
 800bc30:	6913      	ldr	r3, [r2, #16]
 800bc32:	2101      	movs	r1, #1
 800bc34:	438b      	bics	r3, r1
 800bc36:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bc38:	4815      	ldr	r0, [pc, #84]	; (800bc90 <EE_Format+0xc0>)
 800bc3a:	f005 fb8b 	bl	8011354 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc3e:	4810      	ldr	r0, [pc, #64]	; (800bc80 <EE_Format+0xb0>)
 800bc40:	f005 faf6 	bl	8011230 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d003      	beq.n	800bc50 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800bc48:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <EE_Format+0xb4>)
 800bc4a:	69d8      	ldr	r0, [r3, #28]
 800bc4c:	b280      	uxth	r0, r0
 800bc4e:	e7cd      	b.n	800bbec <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bc50:	4810      	ldr	r0, [pc, #64]	; (800bc94 <EE_Format+0xc4>)
 800bc52:	f005 fb7f 	bl	8011354 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc56:	480a      	ldr	r0, [pc, #40]	; (800bc80 <EE_Format+0xb0>)
 800bc58:	f005 faea 	bl	8011230 <FLASH_WaitForLastOperation>
 800bc5c:	1e04      	subs	r4, r0, #0
		if(FlashStatus != HAL_OK){
 800bc5e:	d003      	beq.n	800bc68 <EE_Format+0x98>
			return pFlash.ErrorCode;
 800bc60:	4b08      	ldr	r3, [pc, #32]	; (800bc84 <EE_Format+0xb4>)
 800bc62:	69d8      	ldr	r0, [r3, #28]
 800bc64:	b280      	uxth	r0, r0
 800bc66:	e7c1      	b.n	800bbec <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc68:	4a08      	ldr	r2, [pc, #32]	; (800bc8c <EE_Format+0xbc>)
 800bc6a:	6913      	ldr	r3, [r2, #16]
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	438b      	bics	r3, r1
 800bc70:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800bc72:	f005 fad3 	bl	801121c <HAL_FLASH_Lock>
	return FlashStatus;
 800bc76:	b2a0      	uxth	r0, r4
 800bc78:	e7b8      	b.n	800bbec <EE_Format+0x1c>
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	0801e000 	.word	0x0801e000
 800bc80:	0000c350 	.word	0x0000c350
 800bc84:	20005c90 	.word	0x20005c90
 800bc88:	0801e800 	.word	0x0801e800
 800bc8c:	40022000 	.word	0x40022000
 800bc90:	0801f000 	.word	0x0801f000
 800bc94:	0801f800 	.word	0x0801f800

0800bc98 <EE_Init>:
uint16_t EE_Init(void){
 800bc98:	b570      	push	{r4, r5, r6, lr}
	HAL_FLASH_Unlock();
 800bc9a:	f005 faab 	bl	80111f4 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bc9e:	4bbc      	ldr	r3, [pc, #752]	; (800bf90 <EE_Init+0x2f8>)
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bca4:	4abb      	ldr	r2, [pc, #748]	; (800bf94 <EE_Init+0x2fc>)
 800bca6:	8812      	ldrh	r2, [r2, #0]
 800bca8:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800bcaa:	49bb      	ldr	r1, [pc, #748]	; (800bf98 <EE_Init+0x300>)
 800bcac:	428b      	cmp	r3, r1
 800bcae:	d100      	bne.n	800bcb2 <EE_Init+0x1a>
 800bcb0:	e072      	b.n	800bd98 <EE_Init+0x100>
 800bcb2:	49ba      	ldr	r1, [pc, #744]	; (800bf9c <EE_Init+0x304>)
 800bcb4:	428b      	cmp	r3, r1
 800bcb6:	d00f      	beq.n	800bcd8 <EE_Init+0x40>
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d100      	bne.n	800bcbe <EE_Init+0x26>
 800bcbc:	e106      	b.n	800becc <EE_Init+0x234>
			FlashStatus =EE_Format();
 800bcbe:	f7ff ff87 	bl	800bbd0 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcc2:	48b7      	ldr	r0, [pc, #732]	; (800bfa0 <EE_Init+0x308>)
 800bcc4:	f005 fab4 	bl	8011230 <FLASH_WaitForLastOperation>
 800bcc8:	b285      	uxth	r5, r0
			if(FlashStatus != HAL_OK){
 800bcca:	2d00      	cmp	r5, #0
 800bccc:	d102      	bne.n	800bcd4 <EE_Init+0x3c>
	HAL_FLASH_Lock();
 800bcce:	f005 faa5 	bl	801121c <HAL_FLASH_Lock>
	return HAL_OK;
 800bcd2:	2500      	movs	r5, #0
}
 800bcd4:	0028      	movs	r0, r5
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800bcd8:	2a00      	cmp	r2, #0
 800bcda:	d00d      	beq.n	800bcf8 <EE_Init+0x60>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800bcdc:	4bae      	ldr	r3, [pc, #696]	; (800bf98 <EE_Init+0x300>)
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d028      	beq.n	800bd34 <EE_Init+0x9c>
				FlashStatus =EE_Format();
 800bce2:	f7ff ff75 	bl	800bbd0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bce6:	48ae      	ldr	r0, [pc, #696]	; (800bfa0 <EE_Init+0x308>)
 800bce8:	f005 faa2 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d0ee      	beq.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bcf0:	4bac      	ldr	r3, [pc, #688]	; (800bfa4 <EE_Init+0x30c>)
 800bcf2:	69dd      	ldr	r5, [r3, #28]
 800bcf4:	b2ad      	uxth	r5, r5
 800bcf6:	e7ed      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bcf8:	48a5      	ldr	r0, [pc, #660]	; (800bf90 <EE_Init+0x2f8>)
 800bcfa:	f005 fb2b 	bl	8011354 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcfe:	48a8      	ldr	r0, [pc, #672]	; (800bfa0 <EE_Init+0x308>)
 800bd00:	f005 fa96 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d003      	beq.n	800bd10 <EE_Init+0x78>
					return pFlash.ErrorCode;
 800bd08:	4ba6      	ldr	r3, [pc, #664]	; (800bfa4 <EE_Init+0x30c>)
 800bd0a:	69dd      	ldr	r5, [r3, #28]
 800bd0c:	b2ad      	uxth	r5, r5
 800bd0e:	e7e1      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd10:	48a5      	ldr	r0, [pc, #660]	; (800bfa8 <EE_Init+0x310>)
 800bd12:	f005 fb1f 	bl	8011354 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd16:	48a2      	ldr	r0, [pc, #648]	; (800bfa0 <EE_Init+0x308>)
 800bd18:	f005 fa8a 	bl	8011230 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d105      	bne.n	800bd2c <EE_Init+0x94>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd20:	4aa2      	ldr	r2, [pc, #648]	; (800bfac <EE_Init+0x314>)
 800bd22:	6913      	ldr	r3, [r2, #16]
 800bd24:	2102      	movs	r1, #2
 800bd26:	438b      	bics	r3, r1
 800bd28:	6113      	str	r3, [r2, #16]
 800bd2a:	e7d0      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bd2c:	4b9d      	ldr	r3, [pc, #628]	; (800bfa4 <EE_Init+0x30c>)
 800bd2e:	69dd      	ldr	r5, [r3, #28]
 800bd30:	b2ad      	uxth	r5, r5
 800bd32:	e7cf      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bd34:	4896      	ldr	r0, [pc, #600]	; (800bf90 <EE_Init+0x2f8>)
 800bd36:	f005 fb0d 	bl	8011354 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd3a:	4899      	ldr	r0, [pc, #612]	; (800bfa0 <EE_Init+0x308>)
 800bd3c:	f005 fa78 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d003      	beq.n	800bd4c <EE_Init+0xb4>
					return pFlash.ErrorCode;
 800bd44:	4b97      	ldr	r3, [pc, #604]	; (800bfa4 <EE_Init+0x30c>)
 800bd46:	69dd      	ldr	r5, [r3, #28]
 800bd48:	b2ad      	uxth	r5, r5
 800bd4a:	e7c3      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bd4c:	4896      	ldr	r0, [pc, #600]	; (800bfa8 <EE_Init+0x310>)
 800bd4e:	f005 fb01 	bl	8011354 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd52:	4893      	ldr	r0, [pc, #588]	; (800bfa0 <EE_Init+0x308>)
 800bd54:	f005 fa6c 	bl	8011230 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d003      	beq.n	800bd64 <EE_Init+0xcc>
						return pFlash.ErrorCode;
 800bd5c:	4b91      	ldr	r3, [pc, #580]	; (800bfa4 <EE_Init+0x30c>)
 800bd5e:	69dd      	ldr	r5, [r3, #28]
 800bd60:	b2ad      	uxth	r5, r5
 800bd62:	e7b7      	b.n	800bcd4 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bd64:	4a91      	ldr	r2, [pc, #580]	; (800bfac <EE_Init+0x314>)
 800bd66:	6913      	ldr	r3, [r2, #16]
 800bd68:	2102      	movs	r1, #2
 800bd6a:	438b      	bics	r3, r1
 800bd6c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2300      	movs	r3, #0
 800bd72:	4988      	ldr	r1, [pc, #544]	; (800bf94 <EE_Init+0x2fc>)
 800bd74:	2001      	movs	r0, #1
 800bd76:	f005 fa87 	bl	8011288 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd7a:	4889      	ldr	r0, [pc, #548]	; (800bfa0 <EE_Init+0x308>)
 800bd7c:	f005 fa58 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d105      	bne.n	800bd90 <EE_Init+0xf8>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd84:	4a89      	ldr	r2, [pc, #548]	; (800bfac <EE_Init+0x314>)
 800bd86:	6913      	ldr	r3, [r2, #16]
 800bd88:	2101      	movs	r1, #1
 800bd8a:	438b      	bics	r3, r1
 800bd8c:	6113      	str	r3, [r2, #16]
 800bd8e:	e79e      	b.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bd90:	4b84      	ldr	r3, [pc, #528]	; (800bfa4 <EE_Init+0x30c>)
 800bd92:	69dd      	ldr	r5, [r3, #28]
 800bd94:	b2ad      	uxth	r5, r5
 800bd96:	e79d      	b.n	800bcd4 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800bd98:	2a00      	cmp	r2, #0
 800bd9a:	d02f      	beq.n	800bdfc <EE_Init+0x164>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800bd9c:	4b7f      	ldr	r3, [pc, #508]	; (800bf9c <EE_Init+0x304>)
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d062      	beq.n	800be68 <EE_Init+0x1d0>
				FlashStatus =EE_Format();
 800bda2:	f7ff ff15 	bl	800bbd0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bda6:	487e      	ldr	r0, [pc, #504]	; (800bfa0 <EE_Init+0x308>)
 800bda8:	f005 fa42 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d100      	bne.n	800bdb2 <EE_Init+0x11a>
 800bdb0:	e78d      	b.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bdb2:	4b7c      	ldr	r3, [pc, #496]	; (800bfa4 <EE_Init+0x30c>)
 800bdb4:	69dd      	ldr	r5, [r3, #28]
 800bdb6:	b2ad      	uxth	r5, r5
 800bdb8:	e78c      	b.n	800bcd4 <EE_Init+0x3c>
						x =VarIdx;
 800bdba:	b226      	sxth	r6, r4
 800bdbc:	e00a      	b.n	800bdd4 <EE_Init+0x13c>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	b2a4      	uxth	r4, r4
 800bdc2:	2380      	movs	r3, #128	; 0x80
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	429c      	cmp	r4, r3
 800bdc8:	d81c      	bhi.n	800be04 <EE_Init+0x16c>
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800bdca:	4b79      	ldr	r3, [pc, #484]	; (800bfb0 <EE_Init+0x318>)
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	d0f2      	beq.n	800bdba <EE_Init+0x122>
					if(VarIdx != x){
 800bdd4:	42b4      	cmp	r4, r6
 800bdd6:	d0f2      	beq.n	800bdbe <EE_Init+0x126>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bdd8:	4976      	ldr	r1, [pc, #472]	; (800bfb4 <EE_Init+0x31c>)
 800bdda:	0020      	movs	r0, r4
 800bddc:	f7ff fe30 	bl	800ba40 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bde0:	2801      	cmp	r0, #1
 800bde2:	d0ec      	beq.n	800bdbe <EE_Init+0x126>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bde4:	4b73      	ldr	r3, [pc, #460]	; (800bfb4 <EE_Init+0x31c>)
 800bde6:	8819      	ldrh	r1, [r3, #0]
 800bde8:	0020      	movs	r0, r4
 800bdea:	f7ff fdd5 	bl	800b998 <EE_VerifyPageFullWriteVariable>
 800bdee:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdf0:	486b      	ldr	r0, [pc, #428]	; (800bfa0 <EE_Init+0x308>)
 800bdf2:	f005 fa1d 	bl	8011230 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	d0e1      	beq.n	800bdbe <EE_Init+0x126>
 800bdfa:	e76b      	b.n	800bcd4 <EE_Init+0x3c>
	int16_t x =-1;
 800bdfc:	2601      	movs	r6, #1
 800bdfe:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800be00:	2401      	movs	r4, #1
 800be02:	e7de      	b.n	800bdc2 <EE_Init+0x12a>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800be04:	2200      	movs	r2, #0
 800be06:	2300      	movs	r3, #0
 800be08:	4961      	ldr	r1, [pc, #388]	; (800bf90 <EE_Init+0x2f8>)
 800be0a:	2001      	movs	r0, #1
 800be0c:	f005 fa3c 	bl	8011288 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be10:	4863      	ldr	r0, [pc, #396]	; (800bfa0 <EE_Init+0x308>)
 800be12:	f005 fa0d 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be16:	2800      	cmp	r0, #0
 800be18:	d003      	beq.n	800be22 <EE_Init+0x18a>
					return pFlash.ErrorCode;
 800be1a:	4b62      	ldr	r3, [pc, #392]	; (800bfa4 <EE_Init+0x30c>)
 800be1c:	69dd      	ldr	r5, [r3, #28]
 800be1e:	b2ad      	uxth	r5, r5
 800be20:	e758      	b.n	800bcd4 <EE_Init+0x3c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800be22:	4a62      	ldr	r2, [pc, #392]	; (800bfac <EE_Init+0x314>)
 800be24:	6913      	ldr	r3, [r2, #16]
 800be26:	2101      	movs	r1, #1
 800be28:	438b      	bics	r3, r1
 800be2a:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800be2c:	4859      	ldr	r0, [pc, #356]	; (800bf94 <EE_Init+0x2fc>)
 800be2e:	f005 fa91 	bl	8011354 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be32:	485b      	ldr	r0, [pc, #364]	; (800bfa0 <EE_Init+0x308>)
 800be34:	f005 f9fc 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be38:	2800      	cmp	r0, #0
 800be3a:	d003      	beq.n	800be44 <EE_Init+0x1ac>
					return pFlash.ErrorCode;
 800be3c:	4b59      	ldr	r3, [pc, #356]	; (800bfa4 <EE_Init+0x30c>)
 800be3e:	69dd      	ldr	r5, [r3, #28]
 800be40:	b2ad      	uxth	r5, r5
 800be42:	e747      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800be44:	485c      	ldr	r0, [pc, #368]	; (800bfb8 <EE_Init+0x320>)
 800be46:	f005 fa85 	bl	8011354 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be4a:	4855      	ldr	r0, [pc, #340]	; (800bfa0 <EE_Init+0x308>)
 800be4c:	f005 f9f0 	bl	8011230 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be50:	2800      	cmp	r0, #0
 800be52:	d105      	bne.n	800be60 <EE_Init+0x1c8>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be54:	4a55      	ldr	r2, [pc, #340]	; (800bfac <EE_Init+0x314>)
 800be56:	6913      	ldr	r3, [r2, #16]
 800be58:	2102      	movs	r1, #2
 800be5a:	438b      	bics	r3, r1
 800be5c:	6113      	str	r3, [r2, #16]
 800be5e:	e736      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800be60:	4b50      	ldr	r3, [pc, #320]	; (800bfa4 <EE_Init+0x30c>)
 800be62:	69dd      	ldr	r5, [r3, #28]
 800be64:	b2ad      	uxth	r5, r5
 800be66:	e735      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800be68:	484a      	ldr	r0, [pc, #296]	; (800bf94 <EE_Init+0x2fc>)
 800be6a:	f005 fa73 	bl	8011354 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be6e:	484c      	ldr	r0, [pc, #304]	; (800bfa0 <EE_Init+0x308>)
 800be70:	f005 f9de 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be74:	2800      	cmp	r0, #0
 800be76:	d003      	beq.n	800be80 <EE_Init+0x1e8>
					return pFlash.ErrorCode;
 800be78:	4b4a      	ldr	r3, [pc, #296]	; (800bfa4 <EE_Init+0x30c>)
 800be7a:	69dd      	ldr	r5, [r3, #28]
 800be7c:	b2ad      	uxth	r5, r5
 800be7e:	e729      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800be80:	484d      	ldr	r0, [pc, #308]	; (800bfb8 <EE_Init+0x320>)
 800be82:	f005 fa67 	bl	8011354 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be86:	4846      	ldr	r0, [pc, #280]	; (800bfa0 <EE_Init+0x308>)
 800be88:	f005 f9d2 	bl	8011230 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d003      	beq.n	800be98 <EE_Init+0x200>
						return pFlash.ErrorCode;
 800be90:	4b44      	ldr	r3, [pc, #272]	; (800bfa4 <EE_Init+0x30c>)
 800be92:	69dd      	ldr	r5, [r3, #28]
 800be94:	b2ad      	uxth	r5, r5
 800be96:	e71d      	b.n	800bcd4 <EE_Init+0x3c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be98:	4a44      	ldr	r2, [pc, #272]	; (800bfac <EE_Init+0x314>)
 800be9a:	6913      	ldr	r3, [r2, #16]
 800be9c:	2102      	movs	r1, #2
 800be9e:	438b      	bics	r3, r1
 800bea0:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bea2:	2200      	movs	r2, #0
 800bea4:	2300      	movs	r3, #0
 800bea6:	493a      	ldr	r1, [pc, #232]	; (800bf90 <EE_Init+0x2f8>)
 800bea8:	2001      	movs	r0, #1
 800beaa:	f005 f9ed 	bl	8011288 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800beae:	483c      	ldr	r0, [pc, #240]	; (800bfa0 <EE_Init+0x308>)
 800beb0:	f005 f9be 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d105      	bne.n	800bec4 <EE_Init+0x22c>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800beb8:	4a3c      	ldr	r2, [pc, #240]	; (800bfac <EE_Init+0x314>)
 800beba:	6913      	ldr	r3, [r2, #16]
 800bebc:	2101      	movs	r1, #1
 800bebe:	438b      	bics	r3, r1
 800bec0:	6113      	str	r3, [r2, #16]
 800bec2:	e704      	b.n	800bcce <EE_Init+0x36>
					return pFlash.ErrorCode;
 800bec4:	4b37      	ldr	r3, [pc, #220]	; (800bfa4 <EE_Init+0x30c>)
 800bec6:	69dd      	ldr	r5, [r3, #28]
 800bec8:	b2ad      	uxth	r5, r5
 800beca:	e703      	b.n	800bcd4 <EE_Init+0x3c>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800becc:	2a00      	cmp	r2, #0
 800bece:	d006      	beq.n	800bede <EE_Init+0x246>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800bed0:	4b32      	ldr	r3, [pc, #200]	; (800bf9c <EE_Init+0x304>)
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d00d      	beq.n	800bef2 <EE_Init+0x25a>
	int16_t x =-1;
 800bed6:	2601      	movs	r6, #1
 800bed8:	4276      	negs	r6, r6
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800beda:	2401      	movs	r4, #1
 800bedc:	e02b      	b.n	800bf36 <EE_Init+0x29e>
				FlashStatus =EE_Format();
 800bede:	f7ff fe77 	bl	800bbd0 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bee2:	482f      	ldr	r0, [pc, #188]	; (800bfa0 <EE_Init+0x308>)
 800bee4:	f005 f9a4 	bl	8011230 <FLASH_WaitForLastOperation>
 800bee8:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK){
 800beea:	2d00      	cmp	r5, #0
 800beec:	d100      	bne.n	800bef0 <EE_Init+0x258>
 800beee:	e6ee      	b.n	800bcce <EE_Init+0x36>
 800bef0:	e6f0      	b.n	800bcd4 <EE_Init+0x3c>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bef2:	4828      	ldr	r0, [pc, #160]	; (800bf94 <EE_Init+0x2fc>)
 800bef4:	f005 fa2e 	bl	8011354 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bef8:	4829      	ldr	r0, [pc, #164]	; (800bfa0 <EE_Init+0x308>)
 800befa:	f005 f999 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800befe:	2800      	cmp	r0, #0
 800bf00:	d003      	beq.n	800bf0a <EE_Init+0x272>
					return pFlash.ErrorCode;
 800bf02:	4b28      	ldr	r3, [pc, #160]	; (800bfa4 <EE_Init+0x30c>)
 800bf04:	69dd      	ldr	r5, [r3, #28]
 800bf06:	b2ad      	uxth	r5, r5
 800bf08:	e6e4      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bf0a:	482b      	ldr	r0, [pc, #172]	; (800bfb8 <EE_Init+0x320>)
 800bf0c:	f005 fa22 	bl	8011354 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf10:	4823      	ldr	r0, [pc, #140]	; (800bfa0 <EE_Init+0x308>)
 800bf12:	f005 f98d 	bl	8011230 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d105      	bne.n	800bf26 <EE_Init+0x28e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bf1a:	4a24      	ldr	r2, [pc, #144]	; (800bfac <EE_Init+0x314>)
 800bf1c:	6913      	ldr	r3, [r2, #16]
 800bf1e:	2102      	movs	r1, #2
 800bf20:	438b      	bics	r3, r1
 800bf22:	6113      	str	r3, [r2, #16]
 800bf24:	e6d3      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bf26:	4b1f      	ldr	r3, [pc, #124]	; (800bfa4 <EE_Init+0x30c>)
 800bf28:	69dd      	ldr	r5, [r3, #28]
 800bf2a:	b2ad      	uxth	r5, r5
 800bf2c:	e6d2      	b.n	800bcd4 <EE_Init+0x3c>
						x =VarIdx;
 800bf2e:	b226      	sxth	r6, r4
 800bf30:	e00a      	b.n	800bf48 <EE_Init+0x2b0>
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bf32:	3401      	adds	r4, #1
 800bf34:	b2a4      	uxth	r4, r4
 800bf36:	2380      	movs	r3, #128	; 0x80
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d818      	bhi.n	800bf70 <EE_Init+0x2d8>
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bf3e:	4b1f      	ldr	r3, [pc, #124]	; (800bfbc <EE_Init+0x324>)
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d0f2      	beq.n	800bf2e <EE_Init+0x296>
					if(VarIdx != x){
 800bf48:	42b4      	cmp	r4, r6
 800bf4a:	d0f2      	beq.n	800bf32 <EE_Init+0x29a>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bf4c:	4919      	ldr	r1, [pc, #100]	; (800bfb4 <EE_Init+0x31c>)
 800bf4e:	0020      	movs	r0, r4
 800bf50:	f7ff fd76 	bl	800ba40 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bf54:	2801      	cmp	r0, #1
 800bf56:	d0ec      	beq.n	800bf32 <EE_Init+0x29a>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bf58:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <EE_Init+0x31c>)
 800bf5a:	8819      	ldrh	r1, [r3, #0]
 800bf5c:	0020      	movs	r0, r4
 800bf5e:	f7ff fd1b 	bl	800b998 <EE_VerifyPageFullWriteVariable>
 800bf62:	0005      	movs	r5, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf64:	480e      	ldr	r0, [pc, #56]	; (800bfa0 <EE_Init+0x308>)
 800bf66:	f005 f963 	bl	8011230 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d0e1      	beq.n	800bf32 <EE_Init+0x29a>
 800bf6e:	e6b1      	b.n	800bcd4 <EE_Init+0x3c>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800bf70:	2200      	movs	r2, #0
 800bf72:	2300      	movs	r3, #0
 800bf74:	4907      	ldr	r1, [pc, #28]	; (800bf94 <EE_Init+0x2fc>)
 800bf76:	2001      	movs	r0, #1
 800bf78:	f005 f986 	bl	8011288 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf7c:	4808      	ldr	r0, [pc, #32]	; (800bfa0 <EE_Init+0x308>)
 800bf7e:	f005 f957 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d01c      	beq.n	800bfc0 <EE_Init+0x328>
					return pFlash.ErrorCode;
 800bf86:	4b07      	ldr	r3, [pc, #28]	; (800bfa4 <EE_Init+0x30c>)
 800bf88:	69dd      	ldr	r5, [r3, #28]
 800bf8a:	b2ad      	uxth	r5, r5
 800bf8c:	e6a2      	b.n	800bcd4 <EE_Init+0x3c>
 800bf8e:	46c0      	nop			; (mov r8, r8)
 800bf90:	0801e000 	.word	0x0801e000
 800bf94:	0801f000 	.word	0x0801f000
 800bf98:	0000eeee 	.word	0x0000eeee
 800bf9c:	0000ffff 	.word	0x0000ffff
 800bfa0:	0000c350 	.word	0x0000c350
 800bfa4:	20005c90 	.word	0x20005c90
 800bfa8:	0801e800 	.word	0x0801e800
 800bfac:	40022000 	.word	0x40022000
 800bfb0:	0801e006 	.word	0x0801e006
 800bfb4:	2000134c 	.word	0x2000134c
 800bfb8:	0801f800 	.word	0x0801f800
 800bfbc:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bfc0:	4a11      	ldr	r2, [pc, #68]	; (800c008 <EE_Init+0x370>)
 800bfc2:	6913      	ldr	r3, [r2, #16]
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	438b      	bics	r3, r1
 800bfc8:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bfca:	4810      	ldr	r0, [pc, #64]	; (800c00c <EE_Init+0x374>)
 800bfcc:	f005 f9c2 	bl	8011354 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bfd0:	480f      	ldr	r0, [pc, #60]	; (800c010 <EE_Init+0x378>)
 800bfd2:	f005 f92d 	bl	8011230 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d003      	beq.n	800bfe2 <EE_Init+0x34a>
					return pFlash.ErrorCode;
 800bfda:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <EE_Init+0x37c>)
 800bfdc:	69dd      	ldr	r5, [r3, #28]
 800bfde:	b2ad      	uxth	r5, r5
 800bfe0:	e678      	b.n	800bcd4 <EE_Init+0x3c>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bfe2:	480d      	ldr	r0, [pc, #52]	; (800c018 <EE_Init+0x380>)
 800bfe4:	f005 f9b6 	bl	8011354 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bfe8:	4809      	ldr	r0, [pc, #36]	; (800c010 <EE_Init+0x378>)
 800bfea:	f005 f921 	bl	8011230 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d105      	bne.n	800bffe <EE_Init+0x366>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bff2:	4a05      	ldr	r2, [pc, #20]	; (800c008 <EE_Init+0x370>)
 800bff4:	6913      	ldr	r3, [r2, #16]
 800bff6:	2102      	movs	r1, #2
 800bff8:	438b      	bics	r3, r1
 800bffa:	6113      	str	r3, [r2, #16]
 800bffc:	e667      	b.n	800bcce <EE_Init+0x36>
						return pFlash.ErrorCode;
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <EE_Init+0x37c>)
 800c000:	69dd      	ldr	r5, [r3, #28]
 800c002:	b2ad      	uxth	r5, r5
 800c004:	e666      	b.n	800bcd4 <EE_Init+0x3c>
 800c006:	46c0      	nop			; (mov r8, r8)
 800c008:	40022000 	.word	0x40022000
 800c00c:	0801e000 	.word	0x0801e000
 800c010:	0000c350 	.word	0x0000c350
 800c014:	20005c90 	.word	0x20005c90
 800c018:	0801e800 	.word	0x0801e800

0800c01c <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800c01c:	b500      	push	{lr}
 800c01e:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800c020:	2300      	movs	r3, #0
 800c022:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800c024:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800c026:	3301      	adds	r3, #1
 800c028:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800c02a:	4669      	mov	r1, sp
 800c02c:	a801      	add	r0, sp, #4
 800c02e:	f005 f9a3 	bl	8011378 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800c032:	2800      	cmp	r0, #0
 800c034:	d102      	bne.n	800c03c <EraseSector+0x20>
 800c036:	9b00      	ldr	r3, [sp, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	d002      	beq.n	800c042 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800c03c:	4b02      	ldr	r3, [pc, #8]	; (800c048 <EraseSector+0x2c>)
 800c03e:	2216      	movs	r2, #22
 800c040:	701a      	strb	r2, [r3, #0]

	return result;
}
 800c042:	2000      	movs	r0, #0
 800c044:	b005      	add	sp, #20
 800c046:	bd00      	pop	{pc}
 800c048:	200008d0 	.word	0x200008d0

0800c04c <IND_LED_Init>:
}

/* --- Configure indicator LED --- 
*/
void IND_LED_Init(void)
{
 800c04c:	b500      	push	{lr}
 800c04e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c050:	2380      	movs	r3, #128	; 0x80
 800c052:	011b      	lsls	r3, r3, #4
 800c054:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c056:	2301      	movs	r3, #1
 800c058:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c05a:	2300      	movs	r3, #0
 800c05c:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c05e:	3303      	adds	r3, #3
 800c060:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c062:	2090      	movs	r0, #144	; 0x90
 800c064:	a901      	add	r1, sp, #4
 800c066:	05c0      	lsls	r0, r0, #23
 800c068:	f005 f9d8 	bl	801141c <HAL_GPIO_Init>
}
 800c06c:	b007      	add	sp, #28
 800c06e:	bd00      	pop	{pc}

0800c070 <GPIO_Init>:
{
 800c070:	b500      	push	{lr}
 800c072:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c074:	4b18      	ldr	r3, [pc, #96]	; (800c0d8 <GPIO_Init+0x68>)
 800c076:	6959      	ldr	r1, [r3, #20]
 800c078:	2080      	movs	r0, #128	; 0x80
 800c07a:	0300      	lsls	r0, r0, #12
 800c07c:	4301      	orrs	r1, r0
 800c07e:	6159      	str	r1, [r3, #20]
 800c080:	695a      	ldr	r2, [r3, #20]
 800c082:	4002      	ands	r2, r0
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c088:	6959      	ldr	r1, [r3, #20]
 800c08a:	2080      	movs	r0, #128	; 0x80
 800c08c:	0280      	lsls	r0, r0, #10
 800c08e:	4301      	orrs	r1, r0
 800c090:	6159      	str	r1, [r3, #20]
 800c092:	695a      	ldr	r2, [r3, #20]
 800c094:	4002      	ands	r2, r0
 800c096:	9202      	str	r2, [sp, #8]
 800c098:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c09a:	6959      	ldr	r1, [r3, #20]
 800c09c:	2080      	movs	r0, #128	; 0x80
 800c09e:	0340      	lsls	r0, r0, #13
 800c0a0:	4301      	orrs	r1, r0
 800c0a2:	6159      	str	r1, [r3, #20]
 800c0a4:	695a      	ldr	r2, [r3, #20]
 800c0a6:	4002      	ands	r2, r0
 800c0a8:	9203      	str	r2, [sp, #12]
 800c0aa:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c0ac:	6959      	ldr	r1, [r3, #20]
 800c0ae:	2080      	movs	r0, #128	; 0x80
 800c0b0:	02c0      	lsls	r0, r0, #11
 800c0b2:	4301      	orrs	r1, r0
 800c0b4:	6159      	str	r1, [r3, #20]
 800c0b6:	695a      	ldr	r2, [r3, #20]
 800c0b8:	4002      	ands	r2, r0
 800c0ba:	9204      	str	r2, [sp, #16]
 800c0bc:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c0be:	695a      	ldr	r2, [r3, #20]
 800c0c0:	2180      	movs	r1, #128	; 0x80
 800c0c2:	03c9      	lsls	r1, r1, #15
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	615a      	str	r2, [r3, #20]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	400b      	ands	r3, r1
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c0d0:	f7ff ffbc 	bl	800c04c <IND_LED_Init>
}
 800c0d4:	b007      	add	sp, #28
 800c0d6:	bd00      	pop	{pc}
 800c0d8:	40021000 	.word	0x40021000

0800c0dc <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	000e      	movs	r6, r1
 800c0e0:	0014      	movs	r4, r2
 800c0e2:	001d      	movs	r5, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c0e4:	f001 fdf0 	bl	800dcc8 <GetUart>


#ifdef _Usart2	
	if (huart == &huart2)
 800c0e8:	4a16      	ldr	r2, [pc, #88]	; (800c144 <GetPortGPIOs+0x68>)
 800c0ea:	4290      	cmp	r0, r2
 800c0ec:	d007      	beq.n	800c0fe <GetPortGPIOs+0x22>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c0ee:	4b16      	ldr	r3, [pc, #88]	; (800c148 <GetPortGPIOs+0x6c>)
 800c0f0:	4298      	cmp	r0, r3
 800c0f2:	d00f      	beq.n	800c114 <GetPortGPIOs+0x38>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c0f4:	4b15      	ldr	r3, [pc, #84]	; (800c14c <GetPortGPIOs+0x70>)
 800c0f6:	4298      	cmp	r0, r3
 800c0f8:	d018      	beq.n	800c12c <GetPortGPIOs+0x50>
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c0fa:	20ff      	movs	r0, #255	; 0xff
 800c0fc:	e009      	b.n	800c112 <GetPortGPIOs+0x36>
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c0fe:	2390      	movs	r3, #144	; 0x90
 800c100:	05db      	lsls	r3, r3, #23
 800c102:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c104:	2204      	movs	r2, #4
 800c106:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c108:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART2_RX_PIN;
 800c10a:	2308      	movs	r3, #8
 800c10c:	9a04      	ldr	r2, [sp, #16]
 800c10e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c110:	2000      	movs	r0, #0
	
	return result;	
}
 800c112:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c114:	4b0e      	ldr	r3, [pc, #56]	; (800c150 <GetPortGPIOs+0x74>)
 800c116:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c118:	2280      	movs	r2, #128	; 0x80
 800c11a:	00d2      	lsls	r2, r2, #3
 800c11c:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c11e:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART3_RX_PIN;
 800c120:	2380      	movs	r3, #128	; 0x80
 800c122:	011b      	lsls	r3, r3, #4
 800c124:	9a04      	ldr	r2, [sp, #16]
 800c126:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c128:	2000      	movs	r0, #0
 800c12a:	e7f2      	b.n	800c112 <GetPortGPIOs+0x36>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c12c:	2390      	movs	r3, #144	; 0x90
 800c12e:	05db      	lsls	r3, r3, #23
 800c130:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c132:	2210      	movs	r2, #16
 800c134:	8022      	strh	r2, [r4, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c136:	602b      	str	r3, [r5, #0]
		*RX_Pin = USART6_RX_PIN;
 800c138:	2320      	movs	r3, #32
 800c13a:	9a04      	ldr	r2, [sp, #16]
 800c13c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c13e:	2000      	movs	r0, #0
 800c140:	e7e7      	b.n	800c112 <GetPortGPIOs+0x36>
 800c142:	46c0      	nop			; (mov r8, r8)
 800c144:	20005ac4 	.word	0x20005ac4
 800c148:	200058a4 	.word	0x200058a4
 800c14c:	200059d8 	.word	0x200059d8
 800c150:	48000400 	.word	0x48000400

0800c154 <IsFactoryReset>:
{
 800c154:	b530      	push	{r4, r5, lr}
 800c156:	b093      	sub	sp, #76	; 0x4c
  __GPIOA_CLK_ENABLE();
 800c158:	4b39      	ldr	r3, [pc, #228]	; (800c240 <IsFactoryReset+0xec>)
 800c15a:	6959      	ldr	r1, [r3, #20]
 800c15c:	2080      	movs	r0, #128	; 0x80
 800c15e:	0280      	lsls	r0, r0, #10
 800c160:	4301      	orrs	r1, r0
 800c162:	6159      	str	r1, [r3, #20]
 800c164:	695a      	ldr	r2, [r3, #20]
 800c166:	4002      	ands	r2, r0
 800c168:	9203      	str	r2, [sp, #12]
 800c16a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c16c:	6959      	ldr	r1, [r3, #20]
 800c16e:	2080      	movs	r0, #128	; 0x80
 800c170:	02c0      	lsls	r0, r0, #11
 800c172:	4301      	orrs	r1, r0
 800c174:	6159      	str	r1, [r3, #20]
 800c176:	695a      	ldr	r2, [r3, #20]
 800c178:	4002      	ands	r2, r0
 800c17a:	9204      	str	r2, [sp, #16]
 800c17c:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c17e:	6959      	ldr	r1, [r3, #20]
 800c180:	2080      	movs	r0, #128	; 0x80
 800c182:	0300      	lsls	r0, r0, #12
 800c184:	4301      	orrs	r1, r0
 800c186:	6159      	str	r1, [r3, #20]
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	4002      	ands	r2, r0
 800c18c:	9205      	str	r2, [sp, #20]
 800c18e:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800c190:	695a      	ldr	r2, [r3, #20]
 800c192:	2180      	movs	r1, #128	; 0x80
 800c194:	0349      	lsls	r1, r1, #13
 800c196:	430a      	orrs	r2, r1
 800c198:	615a      	str	r2, [r3, #20]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	400b      	ands	r3, r1
 800c19e:	9306      	str	r3, [sp, #24]
 800c1a0:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c1a2:	ab08      	add	r3, sp, #32
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	ab0b      	add	r3, sp, #44	; 0x2c
 800c1a8:	2222      	movs	r2, #34	; 0x22
 800c1aa:	446a      	add	r2, sp
 800c1ac:	a90c      	add	r1, sp, #48	; 0x30
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	f7ff ff94 	bl	800c0dc <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c1b4:	ac07      	add	r4, sp, #28
 800c1b6:	9400      	str	r4, [sp, #0]
 800c1b8:	ab09      	add	r3, sp, #36	; 0x24
 800c1ba:	221e      	movs	r2, #30
 800c1bc:	446a      	add	r2, sp
 800c1be:	a90a      	add	r1, sp, #40	; 0x28
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	f7ff ff8b 	bl	800c0dc <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1ca:	2500      	movs	r5, #0
 800c1cc:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c1ce:	466b      	mov	r3, sp
 800c1d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c1d2:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c1d4:	a90d      	add	r1, sp, #52	; 0x34
 800c1d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1d8:	f005 f920 	bl	801141c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1dc:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c1de:	2302      	movs	r3, #2
 800c1e0:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c1e2:	8823      	ldrh	r3, [r4, #0]
 800c1e4:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c1e6:	a90d      	add	r1, sp, #52	; 0x34
 800c1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ea:	f005 f917 	bl	801141c <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c1ee:	466b      	mov	r3, sp
 800c1f0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1f6:	f005 fa66 	bl	80116c6 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c1fa:	2005      	movs	r0, #5
 800c1fc:	f001 fc22 	bl	800da44 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c200:	8821      	ldrh	r1, [r4, #0]
 800c202:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c204:	f005 fa58 	bl	80116b8 <HAL_GPIO_ReadPin>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d006      	beq.n	800c21a <IsFactoryReset+0xc6>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c20c:	4b0d      	ldr	r3, [pc, #52]	; (800c244 <IsFactoryReset+0xf0>)
 800c20e:	2201      	movs	r2, #1
 800c210:	4252      	negs	r2, r2
 800c212:	601a      	str	r2, [r3, #0]
	return 0;
 800c214:	2000      	movs	r0, #0
}
 800c216:	b013      	add	sp, #76	; 0x4c
 800c218:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c21a:	2322      	movs	r3, #34	; 0x22
 800c21c:	446b      	add	r3, sp
 800c21e:	8819      	ldrh	r1, [r3, #0]
 800c220:	2201      	movs	r2, #1
 800c222:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c224:	f005 fa4f 	bl	80116c6 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c228:	2005      	movs	r0, #5
 800c22a:	f001 fc0b 	bl	800da44 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c22e:	ab07      	add	r3, sp, #28
 800c230:	8819      	ldrh	r1, [r3, #0]
 800c232:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c234:	f005 fa40 	bl	80116b8 <HAL_GPIO_ReadPin>
 800c238:	2801      	cmp	r0, #1
 800c23a:	d1e7      	bne.n	800c20c <IsFactoryReset+0xb8>
 800c23c:	e7eb      	b.n	800c216 <IsFactoryReset+0xc2>
 800c23e:	46c0      	nop			; (mov r8, r8)
 800c240:	40021000 	.word	0x40021000
 800c244:	20007ff0 	.word	0x20007ff0

0800c248 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800c248:	4770      	bx	lr
	...

0800c24c <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800c24c:	b530      	push	{r4, r5, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c24e:	00c3      	lsls	r3, r0, #3
 800c250:	181b      	adds	r3, r3, r0
 800c252:	4918      	ldr	r1, [pc, #96]	; (800c2b4 <CheckForTimedButtonPress+0x68>)
 800c254:	18c9      	adds	r1, r1, r3
 800c256:	788a      	ldrb	r2, [r1, #2]
 800c258:	78cd      	ldrb	r5, [r1, #3]
			t3 = button[port].pressedX3Sec;
 800c25a:	790c      	ldrb	r4, [r1, #4]

	/* Convert to ms */
	t1 *= 1000;
 800c25c:	0153      	lsls	r3, r2, #5
 800c25e:	1a9b      	subs	r3, r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	189b      	adds	r3, r3, r2
 800c264:	00db      	lsls	r3, r3, #3
	t2 *= 1000;
 800c266:	016a      	lsls	r2, r5, #5
 800c268:	1b52      	subs	r2, r2, r5
 800c26a:	0092      	lsls	r2, r2, #2
 800c26c:	1952      	adds	r2, r2, r5
 800c26e:	00d2      	lsls	r2, r2, #3
	t3 *= 1000;
 800c270:	0161      	lsls	r1, r4, #5
 800c272:	1b09      	subs	r1, r1, r4
 800c274:	0089      	lsls	r1, r1, #2
 800c276:	1909      	adds	r1, r1, r4
 800c278:	00c9      	lsls	r1, r1, #3

	if (pressCounter[port] == t1) {
 800c27a:	0085      	lsls	r5, r0, #2
 800c27c:	4c0e      	ldr	r4, [pc, #56]	; (800c2b8 <CheckForTimedButtonPress+0x6c>)
 800c27e:	592c      	ldr	r4, [r5, r4]
 800c280:	429c      	cmp	r4, r3
 800c282:	d009      	beq.n	800c298 <CheckForTimedButtonPress+0x4c>
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800c284:	4294      	cmp	r4, r2
 800c286:	d00e      	beq.n	800c2a6 <CheckForTimedButtonPress+0x5a>
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800c288:	428c      	cmp	r4, r1
 800c28a:	d10a      	bne.n	800c2a2 <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c28c:	00c3      	lsls	r3, r0, #3
 800c28e:	1818      	adds	r0, r3, r0
 800c290:	4b08      	ldr	r3, [pc, #32]	; (800c2b4 <CheckForTimedButtonPress+0x68>)
 800c292:	220a      	movs	r2, #10
 800c294:	54c2      	strb	r2, [r0, r3]
 800c296:	e004      	b.n	800c2a2 <CheckForTimedButtonPress+0x56>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c298:	00c3      	lsls	r3, r0, #3
 800c29a:	1818      	adds	r0, r3, r0
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <CheckForTimedButtonPress+0x68>)
 800c29e:	2209      	movs	r2, #9
 800c2a0:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	bd30      	pop	{r4, r5, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800c2a6:	00c3      	lsls	r3, r0, #3
 800c2a8:	1818      	adds	r0, r3, r0
 800c2aa:	4b02      	ldr	r3, [pc, #8]	; (800c2b4 <CheckForTimedButtonPress+0x68>)
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	54c2      	strb	r2, [r0, r3]
 800c2b0:	e7f7      	b.n	800c2a2 <CheckForTimedButtonPress+0x56>
 800c2b2:	46c0      	nop			; (mov r8, r8)
 800c2b4:	20001360 	.word	0x20001360
 800c2b8:	20001398 	.word	0x20001398

0800c2bc <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800c2bc:	b530      	push	{r4, r5, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c2be:	00c3      	lsls	r3, r0, #3
 800c2c0:	181b      	adds	r3, r3, r0
 800c2c2:	4918      	ldr	r1, [pc, #96]	; (800c324 <CheckForTimedButtonRelease+0x68>)
 800c2c4:	18c9      	adds	r1, r1, r3
 800c2c6:	794a      	ldrb	r2, [r1, #5]
 800c2c8:	798d      	ldrb	r5, [r1, #6]
			t3 = button[port].releasedY3Sec;
 800c2ca:	79cc      	ldrb	r4, [r1, #7]

	/* Convert to ms */
	t1 *= 1000;
 800c2cc:	0153      	lsls	r3, r2, #5
 800c2ce:	1a9b      	subs	r3, r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	189b      	adds	r3, r3, r2
 800c2d4:	00db      	lsls	r3, r3, #3
	t2 *= 1000;
 800c2d6:	016a      	lsls	r2, r5, #5
 800c2d8:	1b52      	subs	r2, r2, r5
 800c2da:	0092      	lsls	r2, r2, #2
 800c2dc:	1952      	adds	r2, r2, r5
 800c2de:	00d2      	lsls	r2, r2, #3
	t3 *= 1000;
 800c2e0:	0161      	lsls	r1, r4, #5
 800c2e2:	1b09      	subs	r1, r1, r4
 800c2e4:	0089      	lsls	r1, r1, #2
 800c2e6:	1909      	adds	r1, r1, r4
 800c2e8:	00c9      	lsls	r1, r1, #3

	if (releaseCounter[port] == t1) {
 800c2ea:	0085      	lsls	r5, r0, #2
 800c2ec:	4c0e      	ldr	r4, [pc, #56]	; (800c328 <CheckForTimedButtonRelease+0x6c>)
 800c2ee:	592c      	ldr	r4, [r5, r4]
 800c2f0:	429c      	cmp	r4, r3
 800c2f2:	d009      	beq.n	800c308 <CheckForTimedButtonRelease+0x4c>
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800c2f4:	4294      	cmp	r4, r2
 800c2f6:	d00e      	beq.n	800c316 <CheckForTimedButtonRelease+0x5a>
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800c2f8:	428c      	cmp	r4, r1
 800c2fa:	d10a      	bne.n	800c312 <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c2fc:	00c3      	lsls	r3, r0, #3
 800c2fe:	1818      	adds	r0, r3, r0
 800c300:	4b08      	ldr	r3, [pc, #32]	; (800c324 <CheckForTimedButtonRelease+0x68>)
 800c302:	220d      	movs	r2, #13
 800c304:	54c2      	strb	r2, [r0, r3]
 800c306:	e004      	b.n	800c312 <CheckForTimedButtonRelease+0x56>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c308:	00c3      	lsls	r3, r0, #3
 800c30a:	1818      	adds	r0, r3, r0
 800c30c:	4b05      	ldr	r3, [pc, #20]	; (800c324 <CheckForTimedButtonRelease+0x68>)
 800c30e:	220c      	movs	r2, #12
 800c310:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800c312:	2000      	movs	r0, #0
 800c314:	bd30      	pop	{r4, r5, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c316:	00c3      	lsls	r3, r0, #3
 800c318:	1818      	adds	r0, r3, r0
 800c31a:	4b02      	ldr	r3, [pc, #8]	; (800c324 <CheckForTimedButtonRelease+0x68>)
 800c31c:	220d      	movs	r2, #13
 800c31e:	54c2      	strb	r2, [r0, r3]
 800c320:	e7f7      	b.n	800c312 <CheckForTimedButtonRelease+0x56>
 800c322:	46c0      	nop			; (mov r8, r8)
 800c324:	20001360 	.word	0x20001360
 800c328:	200013a8 	.word	0x200013a8

0800c32c <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32e:	b08d      	sub	sp, #52	; 0x34
 800c330:	0006      	movs	r6, r0
 800c332:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800c334:	4b41      	ldr	r3, [pc, #260]	; (800c43c <AddPortButton+0x110>)
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d157      	bne.n	800c3ec <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800c33c:	4b40      	ldr	r3, [pc, #256]	; (800c440 <AddPortButton+0x114>)
 800c33e:	2204      	movs	r2, #4
 800c340:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800c342:	4b3e      	ldr	r3, [pc, #248]	; (800c43c <AddPortButton+0x110>)
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d15a      	bne.n	800c400 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c34a:	2512      	movs	r5, #18
 800c34c:	446d      	add	r5, sp
 800c34e:	af04      	add	r7, sp, #16
 800c350:	9700      	str	r7, [sp, #0]
 800c352:	ab05      	add	r3, sp, #20
 800c354:	002a      	movs	r2, r5
 800c356:	a906      	add	r1, sp, #24
 800c358:	0020      	movs	r0, r4
 800c35a:	f7ff febf 	bl	800c0dc <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800c35e:	882b      	ldrh	r3, [r5, #0]
 800c360:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c362:	2301      	movs	r3, #1
 800c364:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c366:	2500      	movs	r5, #0
 800c368:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c36a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c36c:	a907      	add	r1, sp, #28
 800c36e:	9806      	ldr	r0, [sp, #24]
 800c370:	f005 f854 	bl	801141c <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800c374:	883b      	ldrh	r3, [r7, #0]
 800c376:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c378:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c37a:	2302      	movs	r3, #2
 800c37c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c37e:	a907      	add	r1, sp, #28
 800c380:	9805      	ldr	r0, [sp, #20]
 800c382:	f005 f84b 	bl	801141c <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800c386:	00e2      	lsls	r2, r4, #3
 800c388:	1912      	adds	r2, r2, r4
 800c38a:	4b2e      	ldr	r3, [pc, #184]	; (800c444 <AddPortButton+0x118>)
 800c38c:	189b      	adds	r3, r3, r2
 800c38e:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c390:	0025      	movs	r5, r4
 800c392:	353a      	adds	r5, #58	; 0x3a
 800c394:	00ad      	lsls	r5, r5, #2
 800c396:	210e      	movs	r1, #14
 800c398:	4469      	add	r1, sp
 800c39a:	0028      	movs	r0, r5
 800c39c:	f7ff fb50 	bl	800ba40 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d133      	bne.n	800c40c <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800c3a4:	230e      	movs	r3, #14
 800c3a6:	446b      	add	r3, sp
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	0a1a      	lsrs	r2, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800c3ac:	0b1b      	lsrs	r3, r3, #12
 800c3ae:	42a3      	cmp	r3, r4
 800c3b0:	d103      	bne.n	800c3ba <AddPortButton+0x8e>
 800c3b2:	230f      	movs	r3, #15
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	42b3      	cmp	r3, r6
 800c3b8:	d015      	beq.n	800c3e6 <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c3ba:	0324      	lsls	r4, r4, #12
 800c3bc:	0231      	lsls	r1, r6, #8
 800c3be:	4321      	orrs	r1, r4
 800c3c0:	b289      	uxth	r1, r1
 800c3c2:	230e      	movs	r3, #14
 800c3c4:	446b      	add	r3, sp
 800c3c6:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c3c8:	0028      	movs	r0, r5
 800c3ca:	f7ff fbeb 	bl	800bba4 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c3ce:	1c68      	adds	r0, r5, #1
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	f7ff fbe7 	bl	800bba4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c3d6:	1ca8      	adds	r0, r5, #2
 800c3d8:	2100      	movs	r1, #0
 800c3da:	f7ff fbe3 	bl	800bba4 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c3de:	1ce8      	adds	r0, r5, #3
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	f7ff fbdf 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	b00d      	add	sp, #52	; 0x34
 800c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800c3ec:	008d      	lsls	r5, r1, #2
 800c3ee:	4b16      	ldr	r3, [pc, #88]	; (800c448 <AddPortButton+0x11c>)
 800c3f0:	58e8      	ldr	r0, [r5, r3]
 800c3f2:	f001 fe29 	bl	800e048 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c3f6:	4b15      	ldr	r3, [pc, #84]	; (800c44c <AddPortButton+0x120>)
 800c3f8:	58e8      	ldr	r0, [r5, r3]
 800c3fa:	f001 fe25 	bl	800e048 <osSemaphoreRelease>
 800c3fe:	e79d      	b.n	800c33c <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800c400:	0020      	movs	r0, r4
 800c402:	f001 fc61 	bl	800dcc8 <GetUart>
 800c406:	f006 f8c4 	bl	8012592 <HAL_UART_DeInit>
 800c40a:	e79e      	b.n	800c34a <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c40c:	0324      	lsls	r4, r4, #12
 800c40e:	0231      	lsls	r1, r6, #8
 800c410:	4321      	orrs	r1, r4
 800c412:	b289      	uxth	r1, r1
 800c414:	230e      	movs	r3, #14
 800c416:	446b      	add	r3, sp
 800c418:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c41a:	0028      	movs	r0, r5
 800c41c:	f7ff fbc2 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c420:	1c68      	adds	r0, r5, #1
 800c422:	2100      	movs	r1, #0
 800c424:	f7ff fbbe 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c428:	1ca8      	adds	r0, r5, #2
 800c42a:	2100      	movs	r1, #0
 800c42c:	f7ff fbba 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c430:	1ce8      	adds	r0, r5, #3
 800c432:	2100      	movs	r1, #0
 800c434:	f7ff fbb6 	bl	800bba4 <EE_WriteVariable>
 800c438:	e7d5      	b.n	800c3e6 <AddPortButton+0xba>
 800c43a:	46c0      	nop			; (mov r8, r8)
 800c43c:	20000317 	.word	0x20000317
 800c440:	200008b4 	.word	0x200008b4
 800c444:	20001360 	.word	0x20001360
 800c448:	20005838 	.word	0x20005838
 800c44c:	20005818 	.word	0x20005818

0800c450 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	0004      	movs	r4, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c456:	4836      	ldr	r0, [pc, #216]	; (800c530 <RemovePortButton+0xe0>)
 800c458:	00e1      	lsls	r1, r4, #3
 800c45a:	1909      	adds	r1, r1, r4
 800c45c:	1842      	adds	r2, r0, r1
 800c45e:	2300      	movs	r3, #0
 800c460:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800c462:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800c464:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c466:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c468:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c46a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c46c:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c46e:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c470:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c472:	0025      	movs	r5, r4
 800c474:	353a      	adds	r5, #58	; 0x3a
 800c476:	00ad      	lsls	r5, r5, #2
 800c478:	466b      	mov	r3, sp
 800c47a:	1d99      	adds	r1, r3, #6
 800c47c:	0028      	movs	r0, r5
 800c47e:	f7ff fadf 	bl	800ba40 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c482:	2800      	cmp	r0, #0
 800c484:	d01e      	beq.n	800c4c4 <RemovePortButton+0x74>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c486:	0020      	movs	r0, r4
 800c488:	f001 fc1e 	bl	800dcc8 <GetUart>
 800c48c:	0005      	movs	r5, r0

	if (huart->Instance == USART1) {
 800c48e:	6803      	ldr	r3, [r0, #0]
 800c490:	4a28      	ldr	r2, [pc, #160]	; (800c534 <RemovePortButton+0xe4>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d027      	beq.n	800c4e6 <RemovePortButton+0x96>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c496:	4a28      	ldr	r2, [pc, #160]	; (800c538 <RemovePortButton+0xe8>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d032      	beq.n	800c502 <RemovePortButton+0xb2>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c49c:	4a27      	ldr	r2, [pc, #156]	; (800c53c <RemovePortButton+0xec>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d033      	beq.n	800c50a <RemovePortButton+0xba>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c4a2:	4a27      	ldr	r2, [pc, #156]	; (800c540 <RemovePortButton+0xf0>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d034      	beq.n	800c512 <RemovePortButton+0xc2>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c4a8:	4a26      	ldr	r2, [pc, #152]	; (800c544 <RemovePortButton+0xf4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d03b      	beq.n	800c526 <RemovePortButton+0xd6>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c4ae:	4a26      	ldr	r2, [pc, #152]	; (800c548 <RemovePortButton+0xf8>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d032      	beq.n	800c51a <RemovePortButton+0xca>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c4b4:	4a25      	ldr	r2, [pc, #148]	; (800c54c <RemovePortButton+0xfc>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d037      	beq.n	800c52a <RemovePortButton+0xda>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c4ba:	4a25      	ldr	r2, [pc, #148]	; (800c550 <RemovePortButton+0x100>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d030      	beq.n	800c522 <RemovePortButton+0xd2>
#ifdef _Usart8	
		MX_USART8_UART_Init();
#endif
	} else
		result = BOS_ERROR;
 800c4c0:	26ff      	movs	r6, #255	; 0xff
 800c4c2:	e013      	b.n	800c4ec <RemovePortButton+0x9c>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	0028      	movs	r0, r5
 800c4c8:	f7ff fb6c 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c4cc:	1c68      	adds	r0, r5, #1
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	f7ff fb68 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c4d4:	1ca8      	adds	r0, r5, #2
 800c4d6:	2100      	movs	r1, #0
 800c4d8:	f7ff fb64 	bl	800bba4 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c4dc:	1ce8      	adds	r0, r5, #3
 800c4de:	2100      	movs	r1, #0
 800c4e0:	f7ff fb60 	bl	800bba4 <EE_WriteVariable>
 800c4e4:	e7cf      	b.n	800c486 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800c4e6:	f001 fabf 	bl	800da68 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c4ea:	2600      	movs	r6, #0

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c4ec:	4b19      	ldr	r3, [pc, #100]	; (800c554 <RemovePortButton+0x104>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	551a      	strb	r2, [r3, r4]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c4f2:	3201      	adds	r2, #1
 800c4f4:	4918      	ldr	r1, [pc, #96]	; (800c558 <RemovePortButton+0x108>)
 800c4f6:	0028      	movs	r0, r5
 800c4f8:	f006 f8a4 	bl	8012644 <HAL_UART_Receive_IT>

	return result;
}
 800c4fc:	0030      	movs	r0, r6
 800c4fe:	b002      	add	sp, #8
 800c500:	bd70      	pop	{r4, r5, r6, pc}
		MX_USART2_UART_Init();
 800c502:	f001 fac9 	bl	800da98 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c506:	2600      	movs	r6, #0
 800c508:	e7f0      	b.n	800c4ec <RemovePortButton+0x9c>
		MX_USART3_UART_Init();
 800c50a:	f001 fae7 	bl	800dadc <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c50e:	2600      	movs	r6, #0
 800c510:	e7ec      	b.n	800c4ec <RemovePortButton+0x9c>
		MX_USART4_UART_Init();
 800c512:	f001 fafb 	bl	800db0c <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800c516:	2600      	movs	r6, #0
 800c518:	e7e8      	b.n	800c4ec <RemovePortButton+0x9c>
		MX_USART6_UART_Init();
 800c51a:	f001 fb0f 	bl	800db3c <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c51e:	2600      	movs	r6, #0
 800c520:	e7e4      	b.n	800c4ec <RemovePortButton+0x9c>
 800c522:	2600      	movs	r6, #0
 800c524:	e7e2      	b.n	800c4ec <RemovePortButton+0x9c>
 800c526:	2600      	movs	r6, #0
 800c528:	e7e0      	b.n	800c4ec <RemovePortButton+0x9c>
 800c52a:	2600      	movs	r6, #0
 800c52c:	e7de      	b.n	800c4ec <RemovePortButton+0x9c>
 800c52e:	46c0      	nop			; (mov r8, r8)
 800c530:	20001360 	.word	0x20001360
 800c534:	40013800 	.word	0x40013800
 800c538:	40004400 	.word	0x40004400
 800c53c:	40004800 	.word	0x40004800
 800c540:	40004c00 	.word	0x40004c00
 800c544:	40005000 	.word	0x40005000
 800c548:	40011400 	.word	0x40011400
 800c54c:	40011800 	.word	0x40011800
 800c550:	40011c00 	.word	0x40011c00
 800c554:	200008b4 	.word	0x200008b4
 800c558:	2000075c 	.word	0x2000075c

0800c55c <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55e:	46de      	mov	lr, fp
 800c560:	4657      	mov	r7, sl
 800c562:	464e      	mov	r6, r9
 800c564:	4645      	mov	r5, r8
 800c566:	b5e0      	push	{r5, r6, r7, lr}
 800c568:	b085      	sub	sp, #20
 800c56a:	0004      	movs	r4, r0
 800c56c:	469c      	mov	ip, r3
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	ab0e      	add	r3, sp, #56	; 0x38
 800c572:	781f      	ldrb	r7, [r3, #0]
 800c574:	ab0f      	add	r3, sp, #60	; 0x3c
 800c576:	781e      	ldrb	r6, [r3, #0]
 800c578:	ab10      	add	r3, sp, #64	; 0x40
 800c57a:	7818      	ldrb	r0, [r3, #0]
 800c57c:	4682      	mov	sl, r0
 800c57e:	ab11      	add	r3, sp, #68	; 0x44
 800c580:	7818      	ldrb	r0, [r3, #0]
 800c582:	4681      	mov	r9, r0
 800c584:	ab12      	add	r3, sp, #72	; 0x48
 800c586:	7818      	ldrb	r0, [r3, #0]
 800c588:	4680      	mov	r8, r0
 800c58a:	ab13      	add	r3, sp, #76	; 0x4c
 800c58c:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c58e:	00e5      	lsls	r5, r4, #3
 800c590:	192d      	adds	r5, r5, r4
 800c592:	48b7      	ldr	r0, [pc, #732]	; (800c870 <SetButtonEvents+0x314>)
 800c594:	1940      	adds	r0, r0, r5
 800c596:	7840      	ldrb	r0, [r0, #1]
 800c598:	2800      	cmp	r0, #0
 800c59a:	d100      	bne.n	800c59e <SetButtonEvents+0x42>
 800c59c:	e164      	b.n	800c868 <SetButtonEvents+0x30c>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c59e:	00e5      	lsls	r5, r4, #3
 800c5a0:	192d      	adds	r5, r5, r4
 800c5a2:	48b3      	ldr	r0, [pc, #716]	; (800c870 <SetButtonEvents+0x314>)
 800c5a4:	1940      	adds	r0, r0, r5
 800c5a6:	4665      	mov	r5, ip
 800c5a8:	7085      	strb	r5, [r0, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c5aa:	70c7      	strb	r7, [r0, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c5ac:	7106      	strb	r6, [r0, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c5ae:	4655      	mov	r5, sl
 800c5b0:	7145      	strb	r5, [r0, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c5b2:	464d      	mov	r5, r9
 800c5b4:	7185      	strb	r5, [r0, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c5b6:	4645      	mov	r5, r8
 800c5b8:	71c5      	strb	r5, [r0, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d005      	beq.n	800c5ca <SetButtonEvents+0x6e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d000      	beq.n	800c5c4 <SetButtonEvents+0x68>
 800c5c2:	e0d3      	b.n	800c76c <SetButtonEvents+0x210>
 800c5c4:	2900      	cmp	r1, #0
 800c5c6:	d100      	bne.n	800c5ca <SetButtonEvents+0x6e>
 800c5c8:	e0d0      	b.n	800c76c <SetButtonEvents+0x210>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c5ca:	00e0      	lsls	r0, r4, #3
 800c5cc:	1900      	adds	r0, r0, r4
 800c5ce:	49a8      	ldr	r1, [pc, #672]	; (800c870 <SetButtonEvents+0x314>)
 800c5d0:	1809      	adds	r1, r1, r0
 800c5d2:	7a08      	ldrb	r0, [r1, #8]
 800c5d4:	2501      	movs	r5, #1
 800c5d6:	4328      	orrs	r0, r5
 800c5d8:	7208      	strb	r0, [r1, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d005      	beq.n	800c5ea <SetButtonEvents+0x8e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d000      	beq.n	800c5e4 <SetButtonEvents+0x88>
 800c5e2:	e0cf      	b.n	800c784 <SetButtonEvents+0x228>
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	d100      	bne.n	800c5ea <SetButtonEvents+0x8e>
 800c5e8:	e0cc      	b.n	800c784 <SetButtonEvents+0x228>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c5ea:	00e1      	lsls	r1, r4, #3
 800c5ec:	1909      	adds	r1, r1, r4
 800c5ee:	4aa0      	ldr	r2, [pc, #640]	; (800c870 <SetButtonEvents+0x314>)
 800c5f0:	1852      	adds	r2, r2, r1
 800c5f2:	7a11      	ldrb	r1, [r2, #8]
 800c5f4:	2002      	movs	r0, #2
 800c5f6:	4301      	orrs	r1, r0
 800c5f8:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d006      	beq.n	800c60c <SetButtonEvents+0xb0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d000      	beq.n	800c604 <SetButtonEvents+0xa8>
 800c602:	e0cb      	b.n	800c79c <SetButtonEvents+0x240>
 800c604:	9a00      	ldr	r2, [sp, #0]
 800c606:	2a00      	cmp	r2, #0
 800c608:	d100      	bne.n	800c60c <SetButtonEvents+0xb0>
 800c60a:	e0c7      	b.n	800c79c <SetButtonEvents+0x240>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c60c:	00e1      	lsls	r1, r4, #3
 800c60e:	1909      	adds	r1, r1, r4
 800c610:	4a97      	ldr	r2, [pc, #604]	; (800c870 <SetButtonEvents+0x314>)
 800c612:	1852      	adds	r2, r2, r1
 800c614:	7a11      	ldrb	r1, [r2, #8]
 800c616:	2004      	movs	r0, #4
 800c618:	4301      	orrs	r1, r0
 800c61a:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d005      	beq.n	800c62c <SetButtonEvents+0xd0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c620:	2b00      	cmp	r3, #0
 800c622:	d000      	beq.n	800c626 <SetButtonEvents+0xca>
 800c624:	e0c7      	b.n	800c7b6 <SetButtonEvents+0x25a>
 800c626:	2f00      	cmp	r7, #0
 800c628:	d100      	bne.n	800c62c <SetButtonEvents+0xd0>
 800c62a:	e0c4      	b.n	800c7b6 <SetButtonEvents+0x25a>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c62c:	00e1      	lsls	r1, r4, #3
 800c62e:	1909      	adds	r1, r1, r4
 800c630:	4a8f      	ldr	r2, [pc, #572]	; (800c870 <SetButtonEvents+0x314>)
 800c632:	1852      	adds	r2, r2, r1
 800c634:	7a11      	ldrb	r1, [r2, #8]
 800c636:	2008      	movs	r0, #8
 800c638:	4301      	orrs	r1, r0
 800c63a:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d005      	beq.n	800c64c <SetButtonEvents+0xf0>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c640:	2b00      	cmp	r3, #0
 800c642:	d000      	beq.n	800c646 <SetButtonEvents+0xea>
 800c644:	e0c4      	b.n	800c7d0 <SetButtonEvents+0x274>
 800c646:	2e00      	cmp	r6, #0
 800c648:	d100      	bne.n	800c64c <SetButtonEvents+0xf0>
 800c64a:	e0c1      	b.n	800c7d0 <SetButtonEvents+0x274>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c64c:	00e1      	lsls	r1, r4, #3
 800c64e:	1909      	adds	r1, r1, r4
 800c650:	4a87      	ldr	r2, [pc, #540]	; (800c870 <SetButtonEvents+0x314>)
 800c652:	1852      	adds	r2, r2, r1
 800c654:	7a11      	ldrb	r1, [r2, #8]
 800c656:	2010      	movs	r0, #16
 800c658:	4301      	orrs	r1, r0
 800c65a:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d006      	beq.n	800c66e <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c660:	2b00      	cmp	r3, #0
 800c662:	d000      	beq.n	800c666 <SetButtonEvents+0x10a>
 800c664:	e0c1      	b.n	800c7ea <SetButtonEvents+0x28e>
 800c666:	4652      	mov	r2, sl
 800c668:	2a00      	cmp	r2, #0
 800c66a:	d100      	bne.n	800c66e <SetButtonEvents+0x112>
 800c66c:	e0bd      	b.n	800c7ea <SetButtonEvents+0x28e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c66e:	00e1      	lsls	r1, r4, #3
 800c670:	1909      	adds	r1, r1, r4
 800c672:	4a7f      	ldr	r2, [pc, #508]	; (800c870 <SetButtonEvents+0x314>)
 800c674:	1852      	adds	r2, r2, r1
 800c676:	7a11      	ldrb	r1, [r2, #8]
 800c678:	2020      	movs	r0, #32
 800c67a:	4301      	orrs	r1, r0
 800c67c:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d006      	beq.n	800c690 <SetButtonEvents+0x134>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c682:	2b00      	cmp	r3, #0
 800c684:	d000      	beq.n	800c688 <SetButtonEvents+0x12c>
 800c686:	e0bd      	b.n	800c804 <SetButtonEvents+0x2a8>
 800c688:	464a      	mov	r2, r9
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	d100      	bne.n	800c690 <SetButtonEvents+0x134>
 800c68e:	e0b9      	b.n	800c804 <SetButtonEvents+0x2a8>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c690:	00e1      	lsls	r1, r4, #3
 800c692:	1909      	adds	r1, r1, r4
 800c694:	4a76      	ldr	r2, [pc, #472]	; (800c870 <SetButtonEvents+0x314>)
 800c696:	1852      	adds	r2, r2, r1
 800c698:	7a11      	ldrb	r1, [r2, #8]
 800c69a:	2040      	movs	r0, #64	; 0x40
 800c69c:	4301      	orrs	r1, r0
 800c69e:	7211      	strb	r1, [r2, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d006      	beq.n	800c6b2 <SetButtonEvents+0x156>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d000      	beq.n	800c6aa <SetButtonEvents+0x14e>
 800c6a8:	e0b9      	b.n	800c81e <SetButtonEvents+0x2c2>
 800c6aa:	4642      	mov	r2, r8
 800c6ac:	2a00      	cmp	r2, #0
 800c6ae:	d100      	bne.n	800c6b2 <SetButtonEvents+0x156>
 800c6b0:	e0b5      	b.n	800c81e <SetButtonEvents+0x2c2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c6b2:	00e2      	lsls	r2, r4, #3
 800c6b4:	1912      	adds	r2, r2, r4
 800c6b6:	4b6e      	ldr	r3, [pc, #440]	; (800c870 <SetButtonEvents+0x314>)
 800c6b8:	189b      	adds	r3, r3, r2
 800c6ba:	7a19      	ldrb	r1, [r3, #8]
 800c6bc:	2280      	movs	r2, #128	; 0x80
 800c6be:	4252      	negs	r2, r2
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
	}

	/* Add to EEPROM */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c6c4:	0025      	movs	r5, r4
 800c6c6:	353a      	adds	r5, #58	; 0x3a
 800c6c8:	00ad      	lsls	r5, r5, #2
 800c6ca:	ab02      	add	r3, sp, #8
 800c6cc:	1d99      	adds	r1, r3, #6
 800c6ce:	0028      	movs	r0, r5
 800c6d0:	f7ff f9b6 	bl	800ba40 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d000      	beq.n	800c6da <SetButtonEvents+0x17e>
 800c6d8:	e0c8      	b.n	800c86c <SetButtonEvents+0x310>
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800c6da:	ab02      	add	r3, sp, #8
 800c6dc:	3306      	adds	r3, #6
 800c6de:	881b      	ldrh	r3, [r3, #0]
 800c6e0:	0a19      	lsrs	r1, r3, #8
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	00e2      	lsls	r2, r4, #3
 800c6e6:	1912      	adds	r2, r2, r4
 800c6e8:	4861      	ldr	r0, [pc, #388]	; (800c870 <SetButtonEvents+0x314>)
 800c6ea:	1880      	adds	r0, r0, r2
 800c6ec:	7a02      	ldrb	r2, [r0, #8]
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d000      	beq.n	800c6f4 <SetButtonEvents+0x198>
 800c6f2:	e0a1      	b.n	800c838 <SetButtonEvents+0x2dc>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
		}

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800c6f4:	1c6a      	adds	r2, r5, #1
 800c6f6:	2306      	movs	r3, #6
 800c6f8:	a902      	add	r1, sp, #8
 800c6fa:	468c      	mov	ip, r1
 800c6fc:	4463      	add	r3, ip
 800c6fe:	469b      	mov	fp, r3
 800c700:	0019      	movs	r1, r3
 800c702:	9201      	str	r2, [sp, #4]
 800c704:	0010      	movs	r0, r2
 800c706:	f7ff f99b 	bl	800ba40 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800c70a:	465b      	mov	r3, fp
 800c70c:	881a      	ldrh	r2, [r3, #0]
 800c70e:	9b00      	ldr	r3, [sp, #0]
 800c710:	021c      	lsls	r4, r3, #8
 800c712:	4653      	mov	r3, sl
 800c714:	4323      	orrs	r3, r4
		if (temp16
 800c716:	429a      	cmp	r2, r3
 800c718:	d000      	beq.n	800c71c <SetButtonEvents+0x1c0>
 800c71a:	e095      	b.n	800c848 <SetButtonEvents+0x2ec>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
					((uint16_t) pressed_x1sec << 8)
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800c71c:	1cac      	adds	r4, r5, #2
 800c71e:	2306      	movs	r3, #6
 800c720:	aa02      	add	r2, sp, #8
 800c722:	4694      	mov	ip, r2
 800c724:	4463      	add	r3, ip
 800c726:	469a      	mov	sl, r3
 800c728:	0019      	movs	r1, r3
 800c72a:	0020      	movs	r0, r4
 800c72c:	f7ff f988 	bl	800ba40 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800c730:	4653      	mov	r3, sl
 800c732:	881a      	ldrh	r2, [r3, #0]
 800c734:	023f      	lsls	r7, r7, #8
 800c736:	464b      	mov	r3, r9
 800c738:	433b      	orrs	r3, r7
		if (temp16
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d000      	beq.n	800c740 <SetButtonEvents+0x1e4>
 800c73e:	e088      	b.n	800c852 <SetButtonEvents+0x2f6>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
					((uint16_t) pressed_x2sec << 8)
							| (uint16_t) released_y2sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800c740:	3503      	adds	r5, #3
 800c742:	ab02      	add	r3, sp, #8
 800c744:	1d9c      	adds	r4, r3, #6
 800c746:	0021      	movs	r1, r4
 800c748:	0028      	movs	r0, r5
 800c74a:	f7ff f979 	bl	800ba40 <EE_ReadVariable>
		if (temp16
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800c74e:	8822      	ldrh	r2, [r4, #0]
 800c750:	0236      	lsls	r6, r6, #8
 800c752:	4643      	mov	r3, r8
 800c754:	4333      	orrs	r3, r6
		if (temp16
 800c756:	429a      	cmp	r2, r3
 800c758:	d000      	beq.n	800c75c <SetButtonEvents+0x200>
 800c75a:	e07f      	b.n	800c85c <SetButtonEvents+0x300>
	}	// TODO - var does not exist after adding button!
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
 800c75c:	2000      	movs	r0, #0
}
 800c75e:	b005      	add	sp, #20
 800c760:	bcf0      	pop	{r4, r5, r6, r7}
 800c762:	46bb      	mov	fp, r7
 800c764:	46b2      	mov	sl, r6
 800c766:	46a9      	mov	r9, r5
 800c768:	46a0      	mov	r8, r4
 800c76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
 800c76c:	4319      	orrs	r1, r3
 800c76e:	d000      	beq.n	800c772 <SetButtonEvents+0x216>
 800c770:	e733      	b.n	800c5da <SetButtonEvents+0x7e>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c772:	00e0      	lsls	r0, r4, #3
 800c774:	1900      	adds	r0, r0, r4
 800c776:	493e      	ldr	r1, [pc, #248]	; (800c870 <SetButtonEvents+0x314>)
 800c778:	1809      	adds	r1, r1, r0
 800c77a:	7a08      	ldrb	r0, [r1, #8]
 800c77c:	2501      	movs	r5, #1
 800c77e:	43a8      	bics	r0, r5
 800c780:	7208      	strb	r0, [r1, #8]
 800c782:	e72a      	b.n	800c5da <SetButtonEvents+0x7e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
 800c784:	431a      	orrs	r2, r3
 800c786:	d000      	beq.n	800c78a <SetButtonEvents+0x22e>
 800c788:	e737      	b.n	800c5fa <SetButtonEvents+0x9e>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c78a:	00e1      	lsls	r1, r4, #3
 800c78c:	1909      	adds	r1, r1, r4
 800c78e:	4a38      	ldr	r2, [pc, #224]	; (800c870 <SetButtonEvents+0x314>)
 800c790:	1852      	adds	r2, r2, r1
 800c792:	7a11      	ldrb	r1, [r2, #8]
 800c794:	2002      	movs	r0, #2
 800c796:	4381      	bics	r1, r0
 800c798:	7211      	strb	r1, [r2, #8]
 800c79a:	e72e      	b.n	800c5fa <SetButtonEvents+0x9e>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
 800c79c:	9a00      	ldr	r2, [sp, #0]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	d000      	beq.n	800c7a4 <SetButtonEvents+0x248>
 800c7a2:	e73b      	b.n	800c61c <SetButtonEvents+0xc0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c7a4:	00e1      	lsls	r1, r4, #3
 800c7a6:	1909      	adds	r1, r1, r4
 800c7a8:	4a31      	ldr	r2, [pc, #196]	; (800c870 <SetButtonEvents+0x314>)
 800c7aa:	1852      	adds	r2, r2, r1
 800c7ac:	7a11      	ldrb	r1, [r2, #8]
 800c7ae:	2004      	movs	r0, #4
 800c7b0:	4381      	bics	r1, r0
 800c7b2:	7211      	strb	r1, [r2, #8]
 800c7b4:	e732      	b.n	800c61c <SetButtonEvents+0xc0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
 800c7b6:	003a      	movs	r2, r7
 800c7b8:	431a      	orrs	r2, r3
 800c7ba:	d000      	beq.n	800c7be <SetButtonEvents+0x262>
 800c7bc:	e73e      	b.n	800c63c <SetButtonEvents+0xe0>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c7be:	00e1      	lsls	r1, r4, #3
 800c7c0:	1909      	adds	r1, r1, r4
 800c7c2:	4a2b      	ldr	r2, [pc, #172]	; (800c870 <SetButtonEvents+0x314>)
 800c7c4:	1852      	adds	r2, r2, r1
 800c7c6:	7a11      	ldrb	r1, [r2, #8]
 800c7c8:	2008      	movs	r0, #8
 800c7ca:	4381      	bics	r1, r0
 800c7cc:	7211      	strb	r1, [r2, #8]
 800c7ce:	e735      	b.n	800c63c <SetButtonEvents+0xe0>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
 800c7d0:	0032      	movs	r2, r6
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	d000      	beq.n	800c7d8 <SetButtonEvents+0x27c>
 800c7d6:	e741      	b.n	800c65c <SetButtonEvents+0x100>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c7d8:	00e1      	lsls	r1, r4, #3
 800c7da:	1909      	adds	r1, r1, r4
 800c7dc:	4a24      	ldr	r2, [pc, #144]	; (800c870 <SetButtonEvents+0x314>)
 800c7de:	1852      	adds	r2, r2, r1
 800c7e0:	7a11      	ldrb	r1, [r2, #8]
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	4381      	bics	r1, r0
 800c7e6:	7211      	strb	r1, [r2, #8]
 800c7e8:	e738      	b.n	800c65c <SetButtonEvents+0x100>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	d000      	beq.n	800c7f2 <SetButtonEvents+0x296>
 800c7f0:	e745      	b.n	800c67e <SetButtonEvents+0x122>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c7f2:	00e1      	lsls	r1, r4, #3
 800c7f4:	1909      	adds	r1, r1, r4
 800c7f6:	4a1e      	ldr	r2, [pc, #120]	; (800c870 <SetButtonEvents+0x314>)
 800c7f8:	1852      	adds	r2, r2, r1
 800c7fa:	7a11      	ldrb	r1, [r2, #8]
 800c7fc:	2020      	movs	r0, #32
 800c7fe:	4381      	bics	r1, r0
 800c800:	7211      	strb	r1, [r2, #8]
 800c802:	e73c      	b.n	800c67e <SetButtonEvents+0x122>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
 800c804:	464a      	mov	r2, r9
 800c806:	431a      	orrs	r2, r3
 800c808:	d000      	beq.n	800c80c <SetButtonEvents+0x2b0>
 800c80a:	e749      	b.n	800c6a0 <SetButtonEvents+0x144>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c80c:	00e1      	lsls	r1, r4, #3
 800c80e:	1909      	adds	r1, r1, r4
 800c810:	4a17      	ldr	r2, [pc, #92]	; (800c870 <SetButtonEvents+0x314>)
 800c812:	1852      	adds	r2, r2, r1
 800c814:	7a11      	ldrb	r1, [r2, #8]
 800c816:	2040      	movs	r0, #64	; 0x40
 800c818:	4381      	bics	r1, r0
 800c81a:	7211      	strb	r1, [r2, #8]
 800c81c:	e740      	b.n	800c6a0 <SetButtonEvents+0x144>
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y3sec) {
 800c81e:	4642      	mov	r2, r8
 800c820:	4313      	orrs	r3, r2
 800c822:	d000      	beq.n	800c826 <SetButtonEvents+0x2ca>
 800c824:	e74e      	b.n	800c6c4 <SetButtonEvents+0x168>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800c826:	00e2      	lsls	r2, r4, #3
 800c828:	1912      	adds	r2, r2, r4
 800c82a:	4b11      	ldr	r3, [pc, #68]	; (800c870 <SetButtonEvents+0x314>)
 800c82c:	189b      	adds	r3, r3, r2
 800c82e:	7a19      	ldrb	r1, [r3, #8]
 800c830:	227f      	movs	r2, #127	; 0x7f
 800c832:	400a      	ands	r2, r1
 800c834:	721a      	strb	r2, [r3, #8]
 800c836:	e745      	b.n	800c6c4 <SetButtonEvents+0x168>
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c838:	0209      	lsls	r1, r1, #8
 800c83a:	4311      	orrs	r1, r2
 800c83c:	ab02      	add	r3, sp, #8
 800c83e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c840:	0028      	movs	r0, r5
 800c842:	f7ff f9af 	bl	800bba4 <EE_WriteVariable>
 800c846:	e755      	b.n	800c6f4 <SetButtonEvents+0x198>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c848:	0019      	movs	r1, r3
 800c84a:	9801      	ldr	r0, [sp, #4]
 800c84c:	f7ff f9aa 	bl	800bba4 <EE_WriteVariable>
 800c850:	e764      	b.n	800c71c <SetButtonEvents+0x1c0>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c852:	0019      	movs	r1, r3
 800c854:	0020      	movs	r0, r4
 800c856:	f7ff f9a5 	bl	800bba4 <EE_WriteVariable>
 800c85a:	e771      	b.n	800c740 <SetButtonEvents+0x1e4>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800c85c:	0019      	movs	r1, r3
 800c85e:	0028      	movs	r0, r5
 800c860:	f7ff f9a0 	bl	800bba4 <EE_WriteVariable>
	return result;
 800c864:	2000      	movs	r0, #0
 800c866:	e77a      	b.n	800c75e <SetButtonEvents+0x202>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c868:	200b      	movs	r0, #11
 800c86a:	e778      	b.n	800c75e <SetButtonEvents+0x202>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c86c:	200b      	movs	r0, #11
 800c86e:	e776      	b.n	800c75e <SetButtonEvents+0x202>
 800c870:	20001360 	.word	0x20001360

0800c874 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800c874:	b500      	push	{lr}
 800c876:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c878:	2214      	movs	r2, #20
 800c87a:	2100      	movs	r1, #0
 800c87c:	a803      	add	r0, sp, #12
 800c87e:	f006 fc54 	bl	801312a <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800c882:	4b13      	ldr	r3, [pc, #76]	; (800c8d0 <HAL_ADC_MspInit+0x5c>)
 800c884:	6999      	ldr	r1, [r3, #24]
 800c886:	2080      	movs	r0, #128	; 0x80
 800c888:	0080      	lsls	r0, r0, #2
 800c88a:	4301      	orrs	r1, r0
 800c88c:	6199      	str	r1, [r3, #24]
 800c88e:	699a      	ldr	r2, [r3, #24]
 800c890:	4002      	ands	r2, r0
 800c892:	9201      	str	r2, [sp, #4]
 800c894:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800c896:	695a      	ldr	r2, [r3, #20]
 800c898:	2180      	movs	r1, #128	; 0x80
 800c89a:	0289      	lsls	r1, r1, #10
 800c89c:	430a      	orrs	r2, r1
 800c89e:	615a      	str	r2, [r3, #20]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	400b      	ands	r3, r1
 800c8a4:	9302      	str	r3, [sp, #8]
 800c8a6:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800c8a8:	4b0a      	ldr	r3, [pc, #40]	; (800c8d4 <HAL_ADC_MspInit+0x60>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d001      	beq.n	800c8b4 <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800c8b0:	b009      	add	sp, #36	; 0x24
 800c8b2:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800c8b4:	333b      	adds	r3, #59	; 0x3b
 800c8b6:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8b8:	3b39      	subs	r3, #57	; 0x39
 800c8ba:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9305      	str	r3, [sp, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800c8c0:	3871      	subs	r0, #113	; 0x71
 800c8c2:	38ff      	subs	r0, #255	; 0xff
 800c8c4:	a903      	add	r1, sp, #12
 800c8c6:	05c0      	lsls	r0, r0, #23
 800c8c8:	f004 fda8 	bl	801141c <HAL_GPIO_Init>
}
 800c8cc:	e7f0      	b.n	800c8b0 <HAL_ADC_MspInit+0x3c>
 800c8ce:	46c0      	nop			; (mov r8, r8)
 800c8d0:	40021000 	.word	0x40021000
 800c8d4:	20001391 	.word	0x20001391

0800c8d8 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800c8d8:	6803      	ldr	r3, [r0, #0]
 800c8da:	4a10      	ldr	r2, [pc, #64]	; (800c91c <Get_channel+0x44>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d009      	beq.n	800c8f4 <Get_channel+0x1c>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
 800c8e0:	4a0e      	ldr	r2, [pc, #56]	; (800c91c <Get_channel+0x44>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00b      	beq.n	800c8fe <Get_channel+0x26>
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800c8e6:	4a0e      	ldr	r2, [pc, #56]	; (800c920 <Get_channel+0x48>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d00d      	beq.n	800c908 <Get_channel+0x30>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
 800c8ec:	4a0c      	ldr	r2, [pc, #48]	; (800c920 <Get_channel+0x48>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d00f      	beq.n	800c912 <Get_channel+0x3a>
		return ADC_CHANNEL_5;
}
 800c8f2:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800c8f4:	4a0b      	ldr	r2, [pc, #44]	; (800c924 <Get_channel+0x4c>)
 800c8f6:	4291      	cmp	r1, r2
 800c8f8:	d1f2      	bne.n	800c8e0 <Get_channel+0x8>
		return ADC_CHANNEL_2;
 800c8fa:	2002      	movs	r0, #2
 800c8fc:	e7f9      	b.n	800c8f2 <Get_channel+0x1a>
	else if (huart->Instance == USART2 && side == "bottom")
 800c8fe:	4a0a      	ldr	r2, [pc, #40]	; (800c928 <Get_channel+0x50>)
 800c900:	4291      	cmp	r1, r2
 800c902:	d1f0      	bne.n	800c8e6 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800c904:	2003      	movs	r0, #3
 800c906:	e7f4      	b.n	800c8f2 <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "top")
 800c908:	4a06      	ldr	r2, [pc, #24]	; (800c924 <Get_channel+0x4c>)
 800c90a:	4291      	cmp	r1, r2
 800c90c:	d1ee      	bne.n	800c8ec <Get_channel+0x14>
		return ADC_CHANNEL_4;
 800c90e:	2004      	movs	r0, #4
 800c910:	e7ef      	b.n	800c8f2 <Get_channel+0x1a>
	else if (huart->Instance == USART6 && side == "bottom")
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <Get_channel+0x50>)
 800c914:	4299      	cmp	r1, r3
 800c916:	d1ec      	bne.n	800c8f2 <Get_channel+0x1a>
		return ADC_CHANNEL_5;
 800c918:	2005      	movs	r0, #5
 800c91a:	e7ea      	b.n	800c8f2 <Get_channel+0x1a>
 800c91c:	40004400 	.word	0x40004400
 800c920:	40011400 	.word	0x40011400
 800c924:	08018898 	.word	0x08018898
 800c928:	0801889c 	.word	0x0801889c

0800c92c <Error_Handler>:

void Error_Handler(void) {
 800c92c:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800c92e:	2064      	movs	r0, #100	; 0x64
 800c930:	f003 fac4 	bl	800febc <HAL_Delay>

}
 800c934:	bd10      	pop	{r4, pc}
	...

0800c938 <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800c938:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800c93a:	4811      	ldr	r0, [pc, #68]	; (800c980 <MX_ADC_Init+0x48>)
 800c93c:	4b11      	ldr	r3, [pc, #68]	; (800c984 <MX_ADC_Init+0x4c>)
 800c93e:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800c940:	2380      	movs	r3, #128	; 0x80
 800c942:	061b      	lsls	r3, r3, #24
 800c944:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800c946:	2300      	movs	r3, #0
 800c948:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c94a:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800c94c:	2201      	movs	r2, #1
 800c94e:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800c950:	2104      	movs	r1, #4
 800c952:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800c954:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800c956:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800c958:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800c95a:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c95c:	21c2      	movs	r1, #194	; 0xc2
 800c95e:	31ff      	adds	r1, #255	; 0xff
 800c960:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c962:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800c964:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800c966:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800c968:	f003 fb82 	bl	8010070 <HAL_ADC_Init>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d103      	bne.n	800c978 <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800c970:	4b05      	ldr	r3, [pc, #20]	; (800c988 <MX_ADC_Init+0x50>)
 800c972:	2201      	movs	r2, #1
 800c974:	701a      	strb	r2, [r3, #0]
}
 800c976:	bd10      	pop	{r4, pc}
		Error_Handler();
 800c978:	f7ff ffd8 	bl	800c92c <Error_Handler>
 800c97c:	e7f8      	b.n	800c970 <MX_ADC_Init+0x38>
 800c97e:	46c0      	nop			; (mov r8, r8)
 800c980:	20005b64 	.word	0x20005b64
 800c984:	40012400 	.word	0x40012400
 800c988:	2000134e 	.word	0x2000134e

0800c98c <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c98e:	46c6      	mov	lr, r8
 800c990:	b500      	push	{lr}
 800c992:	0005      	movs	r5, r0
 800c994:	4688      	mov	r8, r1
	if (0 == ADC_flag)
 800c996:	4b4e      	ldr	r3, [pc, #312]	; (800cad0 <ReadTempAndVref+0x144>)
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d100      	bne.n	800c9a0 <ReadTempAndVref+0x14>
 800c99e:	e087      	b.n	800cab0 <ReadTempAndVref+0x124>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c9a0:	494c      	ldr	r1, [pc, #304]	; (800cad4 <ReadTempAndVref+0x148>)
 800c9a2:	2310      	movs	r3, #16
 800c9a4:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800c9a6:	2380      	movs	r3, #128	; 0x80
 800c9a8:	015b      	lsls	r3, r3, #5
 800c9aa:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800c9b0:	4849      	ldr	r0, [pc, #292]	; (800cad8 <ReadTempAndVref+0x14c>)
 800c9b2:	f003 fd0f 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d000      	beq.n	800c9bc <ReadTempAndVref+0x30>
 800c9ba:	e07c      	b.n	800cab6 <ReadTempAndVref+0x12a>
	HAL_ADC_Start(&hadc);
 800c9bc:	4c46      	ldr	r4, [pc, #280]	; (800cad8 <ReadTempAndVref+0x14c>)
 800c9be:	0020      	movs	r0, r4
 800c9c0:	f003 fc0c 	bl	80101dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800c9c4:	2164      	movs	r1, #100	; 0x64
 800c9c6:	0020      	movs	r0, r4
 800c9c8:	f003 fc5a 	bl	8010280 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800c9cc:	0020      	movs	r0, r4
 800c9ce:	f003 fcfb 	bl	80103c8 <HAL_ADC_GetValue>
 800c9d2:	b280      	uxth	r0, r0
 800c9d4:	4b41      	ldr	r3, [pc, #260]	; (800cadc <ReadTempAndVref+0x150>)
 800c9d6:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800c9d8:	f7f6 f820 	bl	8002a1c <__aeabi_i2d>
 800c9dc:	4a40      	ldr	r2, [pc, #256]	; (800cae0 <ReadTempAndVref+0x154>)
 800c9de:	4b41      	ldr	r3, [pc, #260]	; (800cae4 <ReadTempAndVref+0x158>)
 800c9e0:	f7f5 f9ca 	bl	8001d78 <__aeabi_dmul>
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	4b40      	ldr	r3, [pc, #256]	; (800cae8 <ReadTempAndVref+0x15c>)
 800c9e8:	f7f4 fdc0 	bl	800156c <__aeabi_ddiv>
 800c9ec:	4a3f      	ldr	r2, [pc, #252]	; (800caec <ReadTempAndVref+0x160>)
 800c9ee:	4b40      	ldr	r3, [pc, #256]	; (800caf0 <ReadTempAndVref+0x164>)
 800c9f0:	f7f5 fc2e 	bl	8002250 <__aeabi_dsub>
 800c9f4:	4a3f      	ldr	r2, [pc, #252]	; (800caf4 <ReadTempAndVref+0x168>)
 800c9f6:	4b40      	ldr	r3, [pc, #256]	; (800caf8 <ReadTempAndVref+0x16c>)
 800c9f8:	f7f4 fdb8 	bl	800156c <__aeabi_ddiv>
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	4b3f      	ldr	r3, [pc, #252]	; (800cafc <ReadTempAndVref+0x170>)
 800ca00:	f7f4 fa4a 	bl	8000e98 <__aeabi_dadd>
 800ca04:	f7f6 f8a8 	bl	8002b58 <__aeabi_d2f>
 800ca08:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800ca0a:	0020      	movs	r0, r4
 800ca0c:	f003 fc16 	bl	801023c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800ca10:	4930      	ldr	r1, [pc, #192]	; (800cad4 <ReadTempAndVref+0x148>)
 800ca12:	2310      	movs	r3, #16
 800ca14:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800ca16:	4b3a      	ldr	r3, [pc, #232]	; (800cb00 <ReadTempAndVref+0x174>)
 800ca18:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca1e:	0020      	movs	r0, r4
 800ca20:	f003 fcd8 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d149      	bne.n	800cabc <ReadTempAndVref+0x130>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800ca28:	492a      	ldr	r1, [pc, #168]	; (800cad4 <ReadTempAndVref+0x148>)
 800ca2a:	2311      	movs	r3, #17
 800ca2c:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800ca2e:	2380      	movs	r3, #128	; 0x80
 800ca30:	015b      	lsls	r3, r3, #5
 800ca32:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800ca34:	2305      	movs	r3, #5
 800ca36:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ca38:	4827      	ldr	r0, [pc, #156]	; (800cad8 <ReadTempAndVref+0x14c>)
 800ca3a:	f003 fccb 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d13f      	bne.n	800cac2 <ReadTempAndVref+0x136>
	HAL_ADC_Start(&hadc);
 800ca42:	4c25      	ldr	r4, [pc, #148]	; (800cad8 <ReadTempAndVref+0x14c>)
 800ca44:	0020      	movs	r0, r4
 800ca46:	f003 fbc9 	bl	80101dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800ca4a:	2164      	movs	r1, #100	; 0x64
 800ca4c:	0020      	movs	r0, r4
 800ca4e:	f003 fc17 	bl	8010280 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800ca52:	0020      	movs	r0, r4
 800ca54:	f003 fcb8 	bl	80103c8 <HAL_ADC_GetValue>
 800ca58:	b285      	uxth	r5, r0
 800ca5a:	4b2a      	ldr	r3, [pc, #168]	; (800cb04 <ReadTempAndVref+0x178>)
 800ca5c:	801d      	strh	r5, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800ca5e:	4b2a      	ldr	r3, [pc, #168]	; (800cb08 <ReadTempAndVref+0x17c>)
 800ca60:	8818      	ldrh	r0, [r3, #0]
 800ca62:	f7f5 ffdb 	bl	8002a1c <__aeabi_i2d>
 800ca66:	4a1e      	ldr	r2, [pc, #120]	; (800cae0 <ReadTempAndVref+0x154>)
 800ca68:	4b1e      	ldr	r3, [pc, #120]	; (800cae4 <ReadTempAndVref+0x158>)
 800ca6a:	f7f5 f985 	bl	8001d78 <__aeabi_dmul>
 800ca6e:	0006      	movs	r6, r0
 800ca70:	000f      	movs	r7, r1
 800ca72:	0028      	movs	r0, r5
 800ca74:	f7f5 ffd2 	bl	8002a1c <__aeabi_i2d>
 800ca78:	0002      	movs	r2, r0
 800ca7a:	000b      	movs	r3, r1
 800ca7c:	0030      	movs	r0, r6
 800ca7e:	0039      	movs	r1, r7
 800ca80:	f7f4 fd74 	bl	800156c <__aeabi_ddiv>
 800ca84:	f7f6 f868 	bl	8002b58 <__aeabi_d2f>
 800ca88:	4643      	mov	r3, r8
 800ca8a:	6018      	str	r0, [r3, #0]
	HAL_ADC_Stop(&hadc);
 800ca8c:	0020      	movs	r0, r4
 800ca8e:	f003 fbd5 	bl	801023c <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800ca92:	4910      	ldr	r1, [pc, #64]	; (800cad4 <ReadTempAndVref+0x148>)
 800ca94:	2311      	movs	r3, #17
 800ca96:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800ca98:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <ReadTempAndVref+0x174>)
 800ca9a:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800caa0:	0020      	movs	r0, r4
 800caa2:	f003 fc97 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d10e      	bne.n	800cac8 <ReadTempAndVref+0x13c>
}
 800caaa:	bc80      	pop	{r7}
 800caac:	46b8      	mov	r8, r7
 800caae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		MX_ADC_Init();
 800cab0:	f7ff ff42 	bl	800c938 <MX_ADC_Init>
 800cab4:	e774      	b.n	800c9a0 <ReadTempAndVref+0x14>
		Error_Handler();
 800cab6:	f7ff ff39 	bl	800c92c <Error_Handler>
 800caba:	e77f      	b.n	800c9bc <ReadTempAndVref+0x30>
		Error_Handler();
 800cabc:	f7ff ff36 	bl	800c92c <Error_Handler>
 800cac0:	e7b2      	b.n	800ca28 <ReadTempAndVref+0x9c>
		Error_Handler();
 800cac2:	f7ff ff33 	bl	800c92c <Error_Handler>
 800cac6:	e7bc      	b.n	800ca42 <ReadTempAndVref+0xb6>
		Error_Handler();
 800cac8:	f7ff ff30 	bl	800c92c <Error_Handler>
}
 800cacc:	e7ed      	b.n	800caaa <ReadTempAndVref+0x11e>
 800cace:	46c0      	nop			; (mov r8, r8)
 800cad0:	2000134e 	.word	0x2000134e
 800cad4:	200013b8 	.word	0x200013b8
 800cad8:	20005b64 	.word	0x20005b64
 800cadc:	20001352 	.word	0x20001352
 800cae0:	66666666 	.word	0x66666666
 800cae4:	400a6666 	.word	0x400a6666
 800cae8:	40affe00 	.word	0x40affe00
 800caec:	28f5c28f 	.word	0x28f5c28f
 800caf0:	3ff68f5c 	.word	0x3ff68f5c
 800caf4:	33333333 	.word	0x33333333
 800caf8:	40113333 	.word	0x40113333
 800cafc:	40390000 	.word	0x40390000
 800cb00:	00001001 	.word	0x00001001
 800cb04:	20001350 	.word	0x20001350
 800cb08:	1ffff7ba 	.word	0x1ffff7ba

0800cb0c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800cb0c:	b570      	push	{r4, r5, r6, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	0004      	movs	r4, r0
 800cb12:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800cb14:	1e83      	subs	r3, r0, #2
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d901      	bls.n	800cb20 <GetReadPrecentage+0x14>
}
 800cb1c:	b006      	add	sp, #24
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800cb20:	4b49      	ldr	r3, [pc, #292]	; (800cc48 <GetReadPrecentage+0x13c>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d04f      	beq.n	800cbc8 <GetReadPrecentage+0xbc>
		Channel = Get_channel(GetUart(port), "bottom");
 800cb28:	0020      	movs	r0, r4
 800cb2a:	f001 f8cd 	bl	800dcc8 <GetUart>
 800cb2e:	4947      	ldr	r1, [pc, #284]	; (800cc4c <GetReadPrecentage+0x140>)
 800cb30:	f7ff fed2 	bl	800c8d8 <Get_channel>
 800cb34:	4b46      	ldr	r3, [pc, #280]	; (800cc50 <GetReadPrecentage+0x144>)
 800cb36:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800cb38:	4946      	ldr	r1, [pc, #280]	; (800cc54 <GetReadPrecentage+0x148>)
 800cb3a:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cb3c:	2380      	movs	r3, #128	; 0x80
 800cb3e:	015b      	lsls	r3, r3, #5
 800cb40:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cb42:	2301      	movs	r3, #1
 800cb44:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cb46:	4844      	ldr	r0, [pc, #272]	; (800cc58 <GetReadPrecentage+0x14c>)
 800cb48:	f003 fc44 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d178      	bne.n	800cc42 <GetReadPrecentage+0x136>
		HAL_ADC_Start(&hadc);
 800cb50:	4c41      	ldr	r4, [pc, #260]	; (800cc58 <GetReadPrecentage+0x14c>)
 800cb52:	0020      	movs	r0, r4
 800cb54:	f003 fb42 	bl	80101dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cb58:	2164      	movs	r1, #100	; 0x64
 800cb5a:	0020      	movs	r0, r4
 800cb5c:	f003 fb90 	bl	8010280 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800cb60:	0020      	movs	r0, r4
 800cb62:	f003 fc31 	bl	80103c8 <HAL_ADC_GetValue>
 800cb66:	f7f4 f95b 	bl	8000e20 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800cb6a:	f7f5 ffad 	bl	8002ac8 <__aeabi_f2d>
 800cb6e:	4a3b      	ldr	r2, [pc, #236]	; (800cc5c <GetReadPrecentage+0x150>)
 800cb70:	4b3b      	ldr	r3, [pc, #236]	; (800cc60 <GetReadPrecentage+0x154>)
 800cb72:	f7f5 f901 	bl	8001d78 <__aeabi_dmul>
 800cb76:	2200      	movs	r2, #0
 800cb78:	4b3a      	ldr	r3, [pc, #232]	; (800cc64 <GetReadPrecentage+0x158>)
 800cb7a:	f7f4 fcf7 	bl	800156c <__aeabi_ddiv>
 800cb7e:	f7f5 ffeb 	bl	8002b58 <__aeabi_d2f>
 800cb82:	4b39      	ldr	r3, [pc, #228]	; (800cc68 <GetReadPrecentage+0x15c>)
 800cb84:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 800cb86:	4939      	ldr	r1, [pc, #228]	; (800cc6c <GetReadPrecentage+0x160>)
 800cb88:	f7f3 fe48 	bl	800081c <__aeabi_fmul>
 800cb8c:	f7f5 ff9c 	bl	8002ac8 <__aeabi_f2d>
 800cb90:	4a32      	ldr	r2, [pc, #200]	; (800cc5c <GetReadPrecentage+0x150>)
 800cb92:	4b33      	ldr	r3, [pc, #204]	; (800cc60 <GetReadPrecentage+0x154>)
 800cb94:	f7f4 fcea 	bl	800156c <__aeabi_ddiv>
 800cb98:	f7f5 ffde 	bl	8002b58 <__aeabi_d2f>
 800cb9c:	4b34      	ldr	r3, [pc, #208]	; (800cc70 <GetReadPrecentage+0x164>)
 800cb9e:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 800cba0:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800cba2:	0020      	movs	r0, r4
 800cba4:	f003 fb4a 	bl	801023c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cba8:	492a      	ldr	r1, [pc, #168]	; (800cc54 <GetReadPrecentage+0x148>)
 800cbaa:	4b29      	ldr	r3, [pc, #164]	; (800cc50 <GetReadPrecentage+0x144>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800cbb0:	4b30      	ldr	r3, [pc, #192]	; (800cc74 <GetReadPrecentage+0x168>)
 800cbb2:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cbb8:	0020      	movs	r0, r4
 800cbba:	f003 fc0b 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d0ac      	beq.n	800cb1c <GetReadPrecentage+0x10>
			Error_Handler();
 800cbc2:	f7ff feb3 	bl	800c92c <Error_Handler>
 800cbc6:	e7a9      	b.n	800cb1c <GetReadPrecentage+0x10>
			MX_ADC_Init();
 800cbc8:	f7ff feb6 	bl	800c938 <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800cbcc:	0020      	movs	r0, r4
 800cbce:	f001 f87b 	bl	800dcc8 <GetUart>
 800cbd2:	f005 fcde 	bl	8012592 <HAL_UART_DeInit>
			if (port == 3) {
 800cbd6:	2c03      	cmp	r4, #3
 800cbd8:	d019      	beq.n	800cc0e <GetReadPrecentage+0x102>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800cbda:	2690      	movs	r6, #144	; 0x90
 800cbdc:	05f6      	lsls	r6, r6, #23
 800cbde:	2104      	movs	r1, #4
 800cbe0:	0030      	movs	r0, r6
 800cbe2:	f004 fce7 	bl	80115b4 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800cbe6:	2304      	movs	r3, #4
 800cbe8:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cbea:	3b03      	subs	r3, #3
 800cbec:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cbee:	3302      	adds	r3, #2
 800cbf0:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbf2:	a901      	add	r1, sp, #4
 800cbf4:	0030      	movs	r0, r6
 800cbf6:	f004 fc11 	bl	801141c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800cbfa:	1e63      	subs	r3, r4, #1
 800cbfc:	4a1e      	ldr	r2, [pc, #120]	; (800cc78 <GetReadPrecentage+0x16c>)
 800cbfe:	2106      	movs	r1, #6
 800cc00:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800cc02:	2201      	movs	r2, #1
 800cc04:	3902      	subs	r1, #2
 800cc06:	0030      	movs	r0, r6
 800cc08:	f004 fd5d 	bl	80116c6 <HAL_GPIO_WritePin>
 800cc0c:	e78c      	b.n	800cb28 <GetReadPrecentage+0x1c>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800cc0e:	2690      	movs	r6, #144	; 0x90
 800cc10:	05f6      	lsls	r6, r6, #23
 800cc12:	2110      	movs	r1, #16
 800cc14:	0030      	movs	r0, r6
 800cc16:	f004 fccd 	bl	80115b4 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800cc1a:	2310      	movs	r3, #16
 800cc1c:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc1e:	3b0f      	subs	r3, #15
 800cc20:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800cc22:	3302      	adds	r3, #2
 800cc24:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc26:	a901      	add	r1, sp, #4
 800cc28:	0030      	movs	r0, r6
 800cc2a:	f004 fbf7 	bl	801141c <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800cc2e:	1e63      	subs	r3, r4, #1
 800cc30:	4a11      	ldr	r2, [pc, #68]	; (800cc78 <GetReadPrecentage+0x16c>)
 800cc32:	2106      	movs	r1, #6
 800cc34:	54d1      	strb	r1, [r2, r3]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800cc36:	2201      	movs	r2, #1
 800cc38:	310a      	adds	r1, #10
 800cc3a:	0030      	movs	r0, r6
 800cc3c:	f004 fd43 	bl	80116c6 <HAL_GPIO_WritePin>
 800cc40:	e772      	b.n	800cb28 <GetReadPrecentage+0x1c>
			Error_Handler();
 800cc42:	f7ff fe73 	bl	800c92c <Error_Handler>
 800cc46:	e783      	b.n	800cb50 <GetReadPrecentage+0x44>
 800cc48:	2000134e 	.word	0x2000134e
 800cc4c:	0801889c 	.word	0x0801889c
 800cc50:	2000135c 	.word	0x2000135c
 800cc54:	200013b8 	.word	0x200013b8
 800cc58:	20005b64 	.word	0x20005b64
 800cc5c:	66666666 	.word	0x66666666
 800cc60:	400a6666 	.word	0x400a6666
 800cc64:	40affe00 	.word	0x40affe00
 800cc68:	20001394 	.word	0x20001394
 800cc6c:	42c80000 	.word	0x42c80000
 800cc70:	20001388 	.word	0x20001388
 800cc74:	00001001 	.word	0x00001001
 800cc78:	200008b4 	.word	0x200008b4

0800cc7c <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800cc7c:	2802      	cmp	r0, #2
 800cc7e:	d008      	beq.n	800cc92 <Get_Rank+0x16>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
 800cc80:	2802      	cmp	r0, #2
 800cc82:	d00d      	beq.n	800cca0 <Get_Rank+0x24>
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800cc84:	2803      	cmp	r0, #3
 800cc86:	d012      	beq.n	800ccae <Get_Rank+0x32>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
 800cc88:	2803      	cmp	r0, #3
 800cc8a:	d017      	beq.n	800ccbc <Get_Rank+0x40>
		Rank_t = 3;
	return Rank_t;
 800cc8c:	4b0f      	ldr	r3, [pc, #60]	; (800cccc <Get_Rank+0x50>)
 800cc8e:	7818      	ldrb	r0, [r3, #0]
}
 800cc90:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <Get_Rank+0x54>)
 800cc94:	4299      	cmp	r1, r3
 800cc96:	d1f3      	bne.n	800cc80 <Get_Rank+0x4>
		Rank_t = 0;
 800cc98:	4b0c      	ldr	r3, [pc, #48]	; (800cccc <Get_Rank+0x50>)
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	e7f5      	b.n	800cc8c <Get_Rank+0x10>
	else if (Port == 2 && side == "bottom")
 800cca0:	4b0c      	ldr	r3, [pc, #48]	; (800ccd4 <Get_Rank+0x58>)
 800cca2:	4299      	cmp	r1, r3
 800cca4:	d1ee      	bne.n	800cc84 <Get_Rank+0x8>
		Rank_t = 1;
 800cca6:	4b09      	ldr	r3, [pc, #36]	; (800cccc <Get_Rank+0x50>)
 800cca8:	2201      	movs	r2, #1
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	e7ee      	b.n	800cc8c <Get_Rank+0x10>
	else if (Port == 3 && side == "top")
 800ccae:	4b08      	ldr	r3, [pc, #32]	; (800ccd0 <Get_Rank+0x54>)
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	d1e9      	bne.n	800cc88 <Get_Rank+0xc>
		Rank_t = 2;
 800ccb4:	4b05      	ldr	r3, [pc, #20]	; (800cccc <Get_Rank+0x50>)
 800ccb6:	2202      	movs	r2, #2
 800ccb8:	701a      	strb	r2, [r3, #0]
 800ccba:	e7e7      	b.n	800cc8c <Get_Rank+0x10>
	else if (Port == 3 && side == "bottom")
 800ccbc:	4b05      	ldr	r3, [pc, #20]	; (800ccd4 <Get_Rank+0x58>)
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	d1e4      	bne.n	800cc8c <Get_Rank+0x10>
		Rank_t = 3;
 800ccc2:	4b02      	ldr	r3, [pc, #8]	; (800cccc <Get_Rank+0x50>)
 800ccc4:	2203      	movs	r2, #3
 800ccc6:	701a      	strb	r2, [r3, #0]
 800ccc8:	e7e0      	b.n	800cc8c <Get_Rank+0x10>
 800ccca:	46c0      	nop			; (mov r8, r8)
 800cccc:	2000135d 	.word	0x2000135d
 800ccd0:	08018898 	.word	0x08018898
 800ccd4:	0801889c 	.word	0x0801889c

0800ccd8 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800ccd8:	b570      	push	{r4, r5, r6, lr}
 800ccda:	0004      	movs	r4, r0
 800ccdc:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800ccde:	1e83      	subs	r3, r0, #2
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d900      	bls.n	800cce8 <ADCSelectChannel+0x10>
}
 800cce6:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800cce8:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <ADCSelectChannel+0x50>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 800ccee:	f000 ffeb 	bl	800dcc8 <GetUart>
 800ccf2:	f005 fc4e 	bl	8012592 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800ccf6:	1e63      	subs	r3, r4, #1
 800ccf8:	4a0c      	ldr	r2, [pc, #48]	; (800cd2c <ADCSelectChannel+0x54>)
 800ccfa:	2106      	movs	r1, #6
 800ccfc:	54d1      	strb	r1, [r2, r3]
		Channel = Get_channel(GetUart(ADC_port), side);
 800ccfe:	0020      	movs	r0, r4
 800cd00:	f000 ffe2 	bl	800dcc8 <GetUart>
 800cd04:	0029      	movs	r1, r5
 800cd06:	f7ff fde7 	bl	800c8d8 <Get_channel>
 800cd0a:	4b09      	ldr	r3, [pc, #36]	; (800cd30 <ADCSelectChannel+0x58>)
 800cd0c:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 800cd0e:	0029      	movs	r1, r5
 800cd10:	0020      	movs	r0, r4
 800cd12:	f7ff ffb3 	bl	800cc7c <Get_Rank>
 800cd16:	4b07      	ldr	r3, [pc, #28]	; (800cd34 <ADCSelectChannel+0x5c>)
 800cd18:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 800cd1a:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <ADCSelectChannel+0x60>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1e1      	bne.n	800cce6 <ADCSelectChannel+0xe>
			MX_ADC_Init();
 800cd22:	f7ff fe09 	bl	800c938 <MX_ADC_Init>
}
 800cd26:	e7de      	b.n	800cce6 <ADCSelectChannel+0xe>
 800cd28:	20001391 	.word	0x20001391
 800cd2c:	200008b4 	.word	0x200008b4
 800cd30:	2000135c 	.word	0x2000135c
 800cd34:	2000135d 	.word	0x2000135d
 800cd38:	2000134e 	.word	0x2000134e

0800cd3c <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	0005      	movs	r5, r0
 800cd40:	000e      	movs	r6, r1
 800cd42:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800cd44:	4b26      	ldr	r3, [pc, #152]	; (800cde0 <ReadADCChannel+0xa4>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d008      	beq.n	800cd5e <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800cd4c:	4b25      	ldr	r3, [pc, #148]	; (800cde4 <ReadADCChannel+0xa8>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	4a25      	ldr	r2, [pc, #148]	; (800cde8 <ReadADCChannel+0xac>)
 800cd54:	5a98      	ldrh	r0, [r3, r2]
 800cd56:	f7f4 f863 	bl	8000e20 <__aeabi_ui2f>
 800cd5a:	6020      	str	r0, [r4, #0]
}
 800cd5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800cd5e:	f000 ffb3 	bl	800dcc8 <GetUart>
 800cd62:	0031      	movs	r1, r6
 800cd64:	f7ff fdb8 	bl	800c8d8 <Get_channel>
 800cd68:	4f20      	ldr	r7, [pc, #128]	; (800cdec <ReadADCChannel+0xb0>)
 800cd6a:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 800cd6c:	0031      	movs	r1, r6
 800cd6e:	0028      	movs	r0, r5
 800cd70:	f7ff ff84 	bl	800cc7c <Get_Rank>
 800cd74:	4b1b      	ldr	r3, [pc, #108]	; (800cde4 <ReadADCChannel+0xa8>)
 800cd76:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800cd78:	491d      	ldr	r1, [pc, #116]	; (800cdf0 <ReadADCChannel+0xb4>)
 800cd7a:	783b      	ldrb	r3, [r7, #0]
 800cd7c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cd7e:	2380      	movs	r3, #128	; 0x80
 800cd80:	015b      	lsls	r3, r3, #5
 800cd82:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cd84:	2303      	movs	r3, #3
 800cd86:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cd88:	481a      	ldr	r0, [pc, #104]	; (800cdf4 <ReadADCChannel+0xb8>)
 800cd8a:	f003 fb23 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d122      	bne.n	800cdd8 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800cd92:	4d18      	ldr	r5, [pc, #96]	; (800cdf4 <ReadADCChannel+0xb8>)
 800cd94:	0028      	movs	r0, r5
 800cd96:	f003 fa21 	bl	80101dc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cd9a:	2164      	movs	r1, #100	; 0x64
 800cd9c:	0028      	movs	r0, r5
 800cd9e:	f003 fa6f 	bl	8010280 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800cda2:	0028      	movs	r0, r5
 800cda4:	f003 fb10 	bl	80103c8 <HAL_ADC_GetValue>
 800cda8:	4b0e      	ldr	r3, [pc, #56]	; (800cde4 <ReadADCChannel+0xa8>)
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4a0e      	ldr	r2, [pc, #56]	; (800cde8 <ReadADCChannel+0xac>)
 800cdb0:	52d0      	strh	r0, [r2, r3]
		HAL_ADC_Stop(&hadc);
 800cdb2:	0028      	movs	r0, r5
 800cdb4:	f003 fa42 	bl	801023c <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800cdb8:	490d      	ldr	r1, [pc, #52]	; (800cdf0 <ReadADCChannel+0xb4>)
 800cdba:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <ReadADCChannel+0xb0>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800cdc0:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <ReadADCChannel+0xbc>)
 800cdc2:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cdc4:	2303      	movs	r3, #3
 800cdc6:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cdc8:	0028      	movs	r0, r5
 800cdca:	f003 fb03 	bl	80103d4 <HAL_ADC_ConfigChannel>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d0bc      	beq.n	800cd4c <ReadADCChannel+0x10>
			Error_Handler();
 800cdd2:	f7ff fdab 	bl	800c92c <Error_Handler>
 800cdd6:	e7b9      	b.n	800cd4c <ReadADCChannel+0x10>
			Error_Handler();
 800cdd8:	f7ff fda8 	bl	800c92c <Error_Handler>
 800cddc:	e7d9      	b.n	800cd92 <ReadADCChannel+0x56>
 800cdde:	46c0      	nop			; (mov r8, r8)
 800cde0:	2000134e 	.word	0x2000134e
 800cde4:	2000135d 	.word	0x2000135d
 800cde8:	20001354 	.word	0x20001354
 800cdec:	2000135c 	.word	0x2000135c
 800cdf0:	200013b8 	.word	0x200013b8
 800cdf4:	20005b64 	.word	0x20005b64
 800cdf8:	00001001 	.word	0x00001001

0800cdfc <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800cdfc:	4770      	bx	lr

0800cdfe <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800cdfe:	4770      	bx	lr

0800ce00 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800ce00:	4770      	bx	lr

0800ce02 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800ce02:	4770      	bx	lr

0800ce04 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800ce04:	4770      	bx	lr
	...

0800ce08 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800ce08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce0a:	46ce      	mov	lr, r9
 800ce0c:	4647      	mov	r7, r8
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b087      	sub	sp, #28
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800ce12:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800ce14:	2600      	movs	r6, #0
 800ce16:	2300      	movs	r3, #0
 800ce18:	4698      	mov	r8, r3
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800ce1a:	e11e      	b.n	800d05a <CheckAttachedButtons+0x252>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800ce1c:	230e      	movs	r3, #14
 800ce1e:	446b      	add	r3, sp
 800ce20:	8819      	ldrh	r1, [r3, #0]
 800ce22:	2201      	movs	r2, #1
 800ce24:	9805      	ldr	r0, [sp, #20]
 800ce26:	f004 fc4e 	bl	80116c6 <HAL_GPIO_WritePin>
				Delay_us(10);
 800ce2a:	200a      	movs	r0, #10
 800ce2c:	f000 fdf8 	bl	800da20 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800ce30:	ab03      	add	r3, sp, #12
 800ce32:	8819      	ldrh	r1, [r3, #0]
 800ce34:	9804      	ldr	r0, [sp, #16]
 800ce36:	f004 fc3f 	bl	80116b8 <HAL_GPIO_ReadPin>
 800ce3a:	4680      	mov	r8, r0
 800ce3c:	e13b      	b.n	800d0b6 <CheckAttachedButtons+0x2ae>
			switch (button[i].type) {
 800ce3e:	2b04      	cmp	r3, #4
 800ce40:	d10b      	bne.n	800ce5a <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800ce42:	4643      	mov	r3, r8
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d041      	beq.n	800cecc <CheckAttachedButtons+0xc4>
				else if (connected == GPIO_PIN_RESET)
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d106      	bne.n	800ce5a <CheckAttachedButtons+0x52>
					state = ON;
 800ce4c:	2602      	movs	r6, #2
 800ce4e:	e006      	b.n	800ce5e <CheckAttachedButtons+0x56>
				if (connected == GPIO_PIN_SET)
 800ce50:	4643      	mov	r3, r8
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d03c      	beq.n	800ced0 <CheckAttachedButtons+0xc8>
				else if (connected == GPIO_PIN_RESET)
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d034      	beq.n	800cec4 <CheckAttachedButtons+0xbc>
			if (state == CLOSED || state == ON) {
 800ce5a:	2e04      	cmp	r6, #4
 800ce5c:	d039      	beq.n	800ced2 <CheckAttachedButtons+0xca>
 800ce5e:	2e02      	cmp	r6, #2
 800ce60:	d037      	beq.n	800ced2 <CheckAttachedButtons+0xca>
			if (state == OPEN || state == OFF) {
 800ce62:	2e03      	cmp	r6, #3
 800ce64:	d047      	beq.n	800cef6 <CheckAttachedButtons+0xee>
 800ce66:	2e01      	cmp	r6, #1
 800ce68:	d045      	beq.n	800cef6 <CheckAttachedButtons+0xee>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800ce6a:	00ab      	lsls	r3, r5, #2
 800ce6c:	4ac3      	ldr	r2, [pc, #780]	; (800d17c <CheckAttachedButtons+0x374>)
 800ce6e:	589b      	ldr	r3, [r3, r2]
 800ce70:	4ac3      	ldr	r2, [pc, #780]	; (800d180 <CheckAttachedButtons+0x378>)
 800ce72:	8812      	ldrh	r2, [r2, #0]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d200      	bcs.n	800ce7a <CheckAttachedButtons+0x72>
 800ce78:	e092      	b.n	800cfa0 <CheckAttachedButtons+0x198>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800ce7a:	d065      	beq.n	800cf48 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800ce7c:	00ab      	lsls	r3, r5, #2
 800ce7e:	49c1      	ldr	r1, [pc, #772]	; (800d184 <CheckAttachedButtons+0x37c>)
 800ce80:	585b      	ldr	r3, [r3, r1]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d203      	bcs.n	800ce8e <CheckAttachedButtons+0x86>
					releaseCounter[i] = 0;
 800ce86:	00ab      	lsls	r3, r5, #2
 800ce88:	000a      	movs	r2, r1
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	5099      	str	r1, [r3, r2]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800ce8e:	00ab      	lsls	r3, r5, #2
 800ce90:	4aba      	ldr	r2, [pc, #744]	; (800d17c <CheckAttachedButtons+0x374>)
 800ce92:	589b      	ldr	r3, [r3, r2]
 800ce94:	4aba      	ldr	r2, [pc, #744]	; (800d180 <CheckAttachedButtons+0x378>)
 800ce96:	8852      	ldrh	r2, [r2, #2]
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d972      	bls.n	800cf82 <CheckAttachedButtons+0x17a>
						&& pressCounter[i] < 500) {
 800ce9c:	22fa      	movs	r2, #250	; 0xfa
 800ce9e:	0052      	lsls	r2, r2, #1
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d26e      	bcs.n	800cf82 <CheckAttachedButtons+0x17a>
					if (clicked == 0)
 800cea4:	4bb8      	ldr	r3, [pc, #736]	; (800d188 <CheckAttachedButtons+0x380>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d157      	bne.n	800cf5c <CheckAttachedButtons+0x154>
						clicked = 1;		// Record a possible single click
 800ceac:	4bb6      	ldr	r3, [pc, #728]	; (800d188 <CheckAttachedButtons+0x380>)
 800ceae:	3af4      	subs	r2, #244	; 0xf4
 800ceb0:	3aff      	subs	r2, #255	; 0xff
 800ceb2:	701a      	strb	r2, [r3, #0]
 800ceb4:	e074      	b.n	800cfa0 <CheckAttachedButtons+0x198>
				if (connected == GPIO_PIN_SET)
 800ceb6:	4643      	mov	r3, r8
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d005      	beq.n	800cec8 <CheckAttachedButtons+0xc0>
				else if (connected == GPIO_PIN_RESET)
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1cc      	bne.n	800ce5a <CheckAttachedButtons+0x52>
					state = OFF;
 800cec0:	2601      	movs	r6, #1
 800cec2:	e7cc      	b.n	800ce5e <CheckAttachedButtons+0x56>
					state = OPEN;
 800cec4:	2603      	movs	r6, #3
 800cec6:	e7ca      	b.n	800ce5e <CheckAttachedButtons+0x56>
					state = ON;
 800cec8:	2602      	movs	r6, #2
 800ceca:	e7c8      	b.n	800ce5e <CheckAttachedButtons+0x56>
					state = OFF;
 800cecc:	4646      	mov	r6, r8
 800cece:	e7c6      	b.n	800ce5e <CheckAttachedButtons+0x56>
					state = CLOSED;
 800ced0:	2604      	movs	r6, #4
				if (pressCounter[i] < 0xFFFF)
 800ced2:	00ab      	lsls	r3, r5, #2
 800ced4:	4aa9      	ldr	r2, [pc, #676]	; (800d17c <CheckAttachedButtons+0x374>)
 800ced6:	589b      	ldr	r3, [r3, r2]
 800ced8:	4aac      	ldr	r2, [pc, #688]	; (800d18c <CheckAttachedButtons+0x384>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d806      	bhi.n	800ceec <CheckAttachedButtons+0xe4>
					++pressCounter[i];			// Advance the debounce counter
 800cede:	00aa      	lsls	r2, r5, #2
 800cee0:	3301      	adds	r3, #1
 800cee2:	49a6      	ldr	r1, [pc, #664]	; (800d17c <CheckAttachedButtons+0x374>)
 800cee4:	5053      	str	r3, [r2, r1]
 800cee6:	e7bc      	b.n	800ce62 <CheckAttachedButtons+0x5a>
					state = CLOSED;
 800cee8:	2604      	movs	r6, #4
 800ceea:	e7f2      	b.n	800ced2 <CheckAttachedButtons+0xca>
					pressCounter[i] = 0;			// Reset debounce counter
 800ceec:	00ab      	lsls	r3, r5, #2
 800ceee:	4aa3      	ldr	r2, [pc, #652]	; (800d17c <CheckAttachedButtons+0x374>)
 800cef0:	2100      	movs	r1, #0
 800cef2:	5099      	str	r1, [r3, r2]
 800cef4:	e7b5      	b.n	800ce62 <CheckAttachedButtons+0x5a>
				if (releaseCounter[i] < 0xFFFF)
 800cef6:	00ab      	lsls	r3, r5, #2
 800cef8:	4aa2      	ldr	r2, [pc, #648]	; (800d184 <CheckAttachedButtons+0x37c>)
 800cefa:	589b      	ldr	r3, [r3, r2]
 800cefc:	4aa3      	ldr	r2, [pc, #652]	; (800d18c <CheckAttachedButtons+0x384>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d813      	bhi.n	800cf2a <CheckAttachedButtons+0x122>
					++releaseCounter[i];		// Advance the debounce counter
 800cf02:	00aa      	lsls	r2, r5, #2
 800cf04:	3301      	adds	r3, #1
 800cf06:	499f      	ldr	r1, [pc, #636]	; (800d184 <CheckAttachedButtons+0x37c>)
 800cf08:	5053      	str	r3, [r2, r1]
				if (clicked == 2
 800cf0a:	4b9f      	ldr	r3, [pc, #636]	; (800d188 <CheckAttachedButtons+0x380>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	d010      	beq.n	800cf34 <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800cf12:	4b9f      	ldr	r3, [pc, #636]	; (800d190 <CheckAttachedButtons+0x388>)
 800cf14:	5d5a      	ldrb	r2, [r3, r5]
 800cf16:	4b9a      	ldr	r3, [pc, #616]	; (800d180 <CheckAttachedButtons+0x378>)
 800cf18:	795b      	ldrb	r3, [r3, #5]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d9a5      	bls.n	800ce6a <CheckAttachedButtons+0x62>
					clicked = 0;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	4a99      	ldr	r2, [pc, #612]	; (800d188 <CheckAttachedButtons+0x380>)
 800cf22:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800cf24:	4a9a      	ldr	r2, [pc, #616]	; (800d190 <CheckAttachedButtons+0x388>)
 800cf26:	5553      	strb	r3, [r2, r5]
 800cf28:	e79f      	b.n	800ce6a <CheckAttachedButtons+0x62>
					releaseCounter[i] = 0;		// Reset debounce counter
 800cf2a:	00ab      	lsls	r3, r5, #2
 800cf2c:	4a95      	ldr	r2, [pc, #596]	; (800d184 <CheckAttachedButtons+0x37c>)
 800cf2e:	2100      	movs	r1, #0
 800cf30:	5099      	str	r1, [r3, r2]
 800cf32:	e7ea      	b.n	800cf0a <CheckAttachedButtons+0x102>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800cf34:	4b96      	ldr	r3, [pc, #600]	; (800d190 <CheckAttachedButtons+0x388>)
 800cf36:	5d5b      	ldrb	r3, [r3, r5]
 800cf38:	4a91      	ldr	r2, [pc, #580]	; (800d180 <CheckAttachedButtons+0x378>)
 800cf3a:	7952      	ldrb	r2, [r2, #5]
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d8e8      	bhi.n	800cf12 <CheckAttachedButtons+0x10a>
					++dblCounter[i];
 800cf40:	3301      	adds	r3, #1
 800cf42:	4a93      	ldr	r2, [pc, #588]	; (800d190 <CheckAttachedButtons+0x388>)
 800cf44:	5553      	strb	r3, [r2, r5]
 800cf46:	e790      	b.n	800ce6a <CheckAttachedButtons+0x62>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800cf48:	00e9      	lsls	r1, r5, #3
 800cf4a:	1949      	adds	r1, r1, r5
 800cf4c:	4891      	ldr	r0, [pc, #580]	; (800d194 <CheckAttachedButtons+0x38c>)
 800cf4e:	2707      	movs	r7, #7
 800cf50:	540f      	strb	r7, [r1, r0]
					++pressCounter[i];
 800cf52:	00a9      	lsls	r1, r5, #2
 800cf54:	3301      	adds	r3, #1
 800cf56:	4889      	ldr	r0, [pc, #548]	; (800d17c <CheckAttachedButtons+0x374>)
 800cf58:	500b      	str	r3, [r1, r0]
 800cf5a:	e78f      	b.n	800ce7c <CheckAttachedButtons+0x74>
					else if (clicked == 2) {
 800cf5c:	2b02      	cmp	r3, #2
 800cf5e:	d11f      	bne.n	800cfa0 <CheckAttachedButtons+0x198>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800cf60:	4b8b      	ldr	r3, [pc, #556]	; (800d190 <CheckAttachedButtons+0x388>)
 800cf62:	5d5b      	ldrb	r3, [r3, r5]
 800cf64:	4a86      	ldr	r2, [pc, #536]	; (800d180 <CheckAttachedButtons+0x378>)
 800cf66:	7912      	ldrb	r2, [r2, #4]
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d919      	bls.n	800cfa0 <CheckAttachedButtons+0x198>
										< BOS.buttons.maxInterClickTime) {
 800cf6c:	4a84      	ldr	r2, [pc, #528]	; (800d180 <CheckAttachedButtons+0x378>)
 800cf6e:	7952      	ldrb	r2, [r2, #5]
								&& dblCounter[i]
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d215      	bcs.n	800cfa0 <CheckAttachedButtons+0x198>
							clicked = 3;	// Record a possible double click
 800cf74:	4b84      	ldr	r3, [pc, #528]	; (800d188 <CheckAttachedButtons+0x380>)
 800cf76:	2203      	movs	r2, #3
 800cf78:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800cf7a:	4b85      	ldr	r3, [pc, #532]	; (800d190 <CheckAttachedButtons+0x388>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	555a      	strb	r2, [r3, r5]
 800cf80:	e00e      	b.n	800cfa0 <CheckAttachedButtons+0x198>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800cf82:	3bf5      	subs	r3, #245	; 0xf5
 800cf84:	3bff      	subs	r3, #255	; 0xff
 800cf86:	4a84      	ldr	r2, [pc, #528]	; (800d198 <CheckAttachedButtons+0x390>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d809      	bhi.n	800cfa0 <CheckAttachedButtons+0x198>
					if (clicked)
 800cf8c:	4b7e      	ldr	r3, [pc, #504]	; (800d188 <CheckAttachedButtons+0x380>)
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <CheckAttachedButtons+0x192>
						clicked = 0;						// Cannot be a click
 800cf94:	4b7c      	ldr	r3, [pc, #496]	; (800d188 <CheckAttachedButtons+0x380>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800cf9a:	0020      	movs	r0, r4
 800cf9c:	f7ff f956 	bl	800c24c <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800cfa0:	00ab      	lsls	r3, r5, #2
 800cfa2:	4a78      	ldr	r2, [pc, #480]	; (800d184 <CheckAttachedButtons+0x37c>)
 800cfa4:	589b      	ldr	r3, [r3, r2]
 800cfa6:	4a76      	ldr	r2, [pc, #472]	; (800d180 <CheckAttachedButtons+0x378>)
 800cfa8:	8812      	ldrh	r2, [r2, #0]
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d33b      	bcc.n	800d026 <CheckAttachedButtons+0x21e>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800cfae:	d022      	beq.n	800cff6 <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800cfb0:	00ab      	lsls	r3, r5, #2
 800cfb2:	4972      	ldr	r1, [pc, #456]	; (800d17c <CheckAttachedButtons+0x374>)
 800cfb4:	585b      	ldr	r3, [r3, r1]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d203      	bcs.n	800cfc2 <CheckAttachedButtons+0x1ba>
					pressCounter[i] = 0;
 800cfba:	00ab      	lsls	r3, r5, #2
 800cfbc:	000a      	movs	r2, r1
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	5099      	str	r1, [r3, r2]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800cfc2:	00ab      	lsls	r3, r5, #2
 800cfc4:	4a6f      	ldr	r2, [pc, #444]	; (800d184 <CheckAttachedButtons+0x37c>)
 800cfc6:	589b      	ldr	r3, [r3, r2]
 800cfc8:	4a6d      	ldr	r2, [pc, #436]	; (800d180 <CheckAttachedButtons+0x378>)
 800cfca:	8852      	ldrh	r2, [r2, #2]
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d925      	bls.n	800d01c <CheckAttachedButtons+0x214>
						&& releaseCounter[i] < 500) {
 800cfd0:	22fa      	movs	r2, #250	; 0xfa
 800cfd2:	0052      	lsls	r2, r2, #1
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d221      	bcs.n	800d01c <CheckAttachedButtons+0x214>
					if (clicked == 1) {
 800cfd8:	4b6b      	ldr	r3, [pc, #428]	; (800d188 <CheckAttachedButtons+0x380>)
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d014      	beq.n	800d00a <CheckAttachedButtons+0x202>
					} else if (clicked == 3) {
 800cfe0:	2b03      	cmp	r3, #3
 800cfe2:	d120      	bne.n	800d026 <CheckAttachedButtons+0x21e>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800cfe4:	00eb      	lsls	r3, r5, #3
 800cfe6:	195b      	adds	r3, r3, r5
 800cfe8:	4a6a      	ldr	r2, [pc, #424]	; (800d194 <CheckAttachedButtons+0x38c>)
 800cfea:	2106      	movs	r1, #6
 800cfec:	5499      	strb	r1, [r3, r2]
						clicked = 0;			// Prepare for a single click
 800cfee:	4b66      	ldr	r3, [pc, #408]	; (800d188 <CheckAttachedButtons+0x380>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	701a      	strb	r2, [r3, #0]
 800cff4:	e017      	b.n	800d026 <CheckAttachedButtons+0x21e>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800cff6:	00e9      	lsls	r1, r5, #3
 800cff8:	1949      	adds	r1, r1, r5
 800cffa:	4866      	ldr	r0, [pc, #408]	; (800d194 <CheckAttachedButtons+0x38c>)
 800cffc:	2708      	movs	r7, #8
 800cffe:	540f      	strb	r7, [r1, r0]
					++releaseCounter[i];
 800d000:	00a9      	lsls	r1, r5, #2
 800d002:	3301      	adds	r3, #1
 800d004:	485f      	ldr	r0, [pc, #380]	; (800d184 <CheckAttachedButtons+0x37c>)
 800d006:	500b      	str	r3, [r1, r0]
 800d008:	e7d2      	b.n	800cfb0 <CheckAttachedButtons+0x1a8>
						button[i].state = CLICKED;// Record a single button click event
 800d00a:	00eb      	lsls	r3, r5, #3
 800d00c:	195b      	adds	r3, r3, r5
 800d00e:	4a61      	ldr	r2, [pc, #388]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d010:	2105      	movs	r1, #5
 800d012:	5499      	strb	r1, [r3, r2]
						clicked = 2;			// Prepare for a double click
 800d014:	4b5c      	ldr	r3, [pc, #368]	; (800d188 <CheckAttachedButtons+0x380>)
 800d016:	2202      	movs	r2, #2
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	e004      	b.n	800d026 <CheckAttachedButtons+0x21e>
						&& releaseCounter[i] < 0xFFFF) {
 800d01c:	3bf5      	subs	r3, #245	; 0xf5
 800d01e:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800d020:	4a5d      	ldr	r2, [pc, #372]	; (800d198 <CheckAttachedButtons+0x390>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d90b      	bls.n	800d03e <CheckAttachedButtons+0x236>
			switch (button[i].state) {
 800d026:	00eb      	lsls	r3, r5, #3
 800d028:	195b      	adds	r3, r3, r5
 800d02a:	4a5a      	ldr	r2, [pc, #360]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d02c:	5c9b      	ldrb	r3, [r3, r2]
 800d02e:	3b05      	subs	r3, #5
 800d030:	b2da      	uxtb	r2, r3
 800d032:	2a09      	cmp	r2, #9
 800d034:	d80f      	bhi.n	800d056 <CheckAttachedButtons+0x24e>
 800d036:	0093      	lsls	r3, r2, #2
 800d038:	4a58      	ldr	r2, [pc, #352]	; (800d19c <CheckAttachedButtons+0x394>)
 800d03a:	58d3      	ldr	r3, [r2, r3]
 800d03c:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800d03e:	0020      	movs	r0, r4
 800d040:	f7ff f93c 	bl	800c2bc <CheckForTimedButtonRelease>
 800d044:	e7ef      	b.n	800d026 <CheckAttachedButtons+0x21e>
				buttonPressedCallback(i);
 800d046:	0020      	movs	r0, r4
 800d048:	f7ff f8fe 	bl	800c248 <buttonPressedCallback>
				button[i].state = NONE;
 800d04c:	00eb      	lsls	r3, r5, #3
 800d04e:	195d      	adds	r5, r3, r5
 800d050:	4b50      	ldr	r3, [pc, #320]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d052:	2200      	movs	r2, #0
 800d054:	54ea      	strb	r2, [r5, r3]
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800d056:	3401      	adds	r4, #1
 800d058:	b2e4      	uxtb	r4, r4
 800d05a:	2c03      	cmp	r4, #3
 800d05c:	d900      	bls.n	800d060 <CheckAttachedButtons+0x258>
 800d05e:	e10b      	b.n	800d278 <CheckAttachedButtons+0x470>
		if (button[i].type)			// Only check defined butons
 800d060:	0025      	movs	r5, r4
 800d062:	00e2      	lsls	r2, r4, #3
 800d064:	1912      	adds	r2, r2, r4
 800d066:	4b4b      	ldr	r3, [pc, #300]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d068:	189b      	adds	r3, r3, r2
 800d06a:	785b      	ldrb	r3, [r3, #1]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0f2      	beq.n	800d056 <CheckAttachedButtons+0x24e>
			if (delayButtonStateReset == false)
 800d070:	4b4b      	ldr	r3, [pc, #300]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <CheckAttachedButtons+0x278>
				button[i].state = NONE;
 800d078:	0013      	movs	r3, r2
 800d07a:	4a46      	ldr	r2, [pc, #280]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d07c:	2100      	movs	r1, #0
 800d07e:	5499      	strb	r1, [r3, r2]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800d080:	230e      	movs	r3, #14
 800d082:	446b      	add	r3, sp
 800d084:	4699      	mov	r9, r3
 800d086:	af03      	add	r7, sp, #12
 800d088:	9700      	str	r7, [sp, #0]
 800d08a:	ab04      	add	r3, sp, #16
 800d08c:	464a      	mov	r2, r9
 800d08e:	a905      	add	r1, sp, #20
 800d090:	0020      	movs	r0, r4
 800d092:	f7ff f823 	bl	800c0dc <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d096:	464b      	mov	r3, r9
 800d098:	8819      	ldrh	r1, [r3, #0]
 800d09a:	2200      	movs	r2, #0
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	f004 fb12 	bl	80116c6 <HAL_GPIO_WritePin>
			Delay_us(10);
 800d0a2:	200a      	movs	r0, #10
 800d0a4:	f000 fcbc 	bl	800da20 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800d0a8:	8839      	ldrh	r1, [r7, #0]
 800d0aa:	9804      	ldr	r0, [sp, #16]
 800d0ac:	f004 fb04 	bl	80116b8 <HAL_GPIO_ReadPin>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d100      	bne.n	800d0b6 <CheckAttachedButtons+0x2ae>
 800d0b4:	e6b2      	b.n	800ce1c <CheckAttachedButtons+0x14>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d0b6:	230e      	movs	r3, #14
 800d0b8:	446b      	add	r3, sp
 800d0ba:	8819      	ldrh	r1, [r3, #0]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	9805      	ldr	r0, [sp, #20]
 800d0c0:	f004 fb01 	bl	80116c6 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800d0c4:	00ea      	lsls	r2, r5, #3
 800d0c6:	1952      	adds	r2, r2, r5
 800d0c8:	4b32      	ldr	r3, [pc, #200]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d0ca:	189b      	adds	r3, r3, r2
 800d0cc:	785b      	ldrb	r3, [r3, #1]
 800d0ce:	2b03      	cmp	r3, #3
 800d0d0:	d100      	bne.n	800d0d4 <CheckAttachedButtons+0x2cc>
 800d0d2:	e6f0      	b.n	800ceb6 <CheckAttachedButtons+0xae>
 800d0d4:	d900      	bls.n	800d0d8 <CheckAttachedButtons+0x2d0>
 800d0d6:	e6b2      	b.n	800ce3e <CheckAttachedButtons+0x36>
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d100      	bne.n	800d0de <CheckAttachedButtons+0x2d6>
 800d0dc:	e6b8      	b.n	800ce50 <CheckAttachedButtons+0x48>
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d000      	beq.n	800d0e4 <CheckAttachedButtons+0x2dc>
 800d0e2:	e6ba      	b.n	800ce5a <CheckAttachedButtons+0x52>
				if (connected == GPIO_PIN_SET)
 800d0e4:	4643      	mov	r3, r8
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d100      	bne.n	800d0ec <CheckAttachedButtons+0x2e4>
 800d0ea:	e6fd      	b.n	800cee8 <CheckAttachedButtons+0xe0>
				else if (connected == GPIO_PIN_RESET)
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d000      	beq.n	800d0f2 <CheckAttachedButtons+0x2ea>
 800d0f0:	e6b3      	b.n	800ce5a <CheckAttachedButtons+0x52>
					state = OPEN;
 800d0f2:	2603      	movs	r6, #3
 800d0f4:	e6b3      	b.n	800ce5e <CheckAttachedButtons+0x56>
				buttonReleasedCallback(i);
 800d0f6:	0020      	movs	r0, r4
 800d0f8:	f7ff fe80 	bl	800cdfc <buttonReleasedCallback>
				button[i].state = NONE;
 800d0fc:	00eb      	lsls	r3, r5, #3
 800d0fe:	195d      	adds	r5, r3, r5
 800d100:	4b24      	ldr	r3, [pc, #144]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d102:	2200      	movs	r2, #0
 800d104:	54ea      	strb	r2, [r5, r3]
				break;
 800d106:	e7a6      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d108:	4b25      	ldr	r3, [pc, #148]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1a2      	bne.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800d110:	00eb      	lsls	r3, r5, #3
 800d112:	195b      	adds	r3, r3, r5
 800d114:	4d1f      	ldr	r5, [pc, #124]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d116:	18ed      	adds	r5, r5, r3
 800d118:	7a2b      	ldrb	r3, [r5, #8]
 800d11a:	07db      	lsls	r3, r3, #31
 800d11c:	d59b      	bpl.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d11e:	4b20      	ldr	r3, [pc, #128]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d120:	2201      	movs	r2, #1
 800d122:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 800d124:	0020      	movs	r0, r4
 800d126:	f7ff fe6a 	bl	800cdfe <buttonClickedCallback>
 800d12a:	e794      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d12c:	4b1c      	ldr	r3, [pc, #112]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d190      	bne.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800d134:	00eb      	lsls	r3, r5, #3
 800d136:	195b      	adds	r3, r3, r5
 800d138:	4d16      	ldr	r5, [pc, #88]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d13a:	18ed      	adds	r5, r5, r3
 800d13c:	7a2b      	ldrb	r3, [r5, #8]
 800d13e:	079b      	lsls	r3, r3, #30
 800d140:	d589      	bpl.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d142:	4b17      	ldr	r3, [pc, #92]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d144:	2201      	movs	r2, #1
 800d146:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800d148:	0020      	movs	r0, r4
 800d14a:	f7ff fe59 	bl	800ce00 <buttonDblClickedCallback>
 800d14e:	e782      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d150:	4b13      	ldr	r3, [pc, #76]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d000      	beq.n	800d15a <CheckAttachedButtons+0x352>
 800d158:	e77d      	b.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800d15a:	00eb      	lsls	r3, r5, #3
 800d15c:	195b      	adds	r3, r3, r5
 800d15e:	4d0d      	ldr	r5, [pc, #52]	; (800d194 <CheckAttachedButtons+0x38c>)
 800d160:	18ed      	adds	r5, r5, r3
 800d162:	7a2b      	ldrb	r3, [r5, #8]
 800d164:	075b      	lsls	r3, r3, #29
 800d166:	d400      	bmi.n	800d16a <CheckAttachedButtons+0x362>
 800d168:	e775      	b.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d16a:	4b0d      	ldr	r3, [pc, #52]	; (800d1a0 <CheckAttachedButtons+0x398>)
 800d16c:	2201      	movs	r2, #1
 800d16e:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d170:	2101      	movs	r1, #1
 800d172:	0020      	movs	r0, r4
 800d174:	f7ff fe45 	bl	800ce02 <buttonPressedForXCallback>
 800d178:	e76d      	b.n	800d056 <CheckAttachedButtons+0x24e>
 800d17a:	46c0      	nop			; (mov r8, r8)
 800d17c:	20001398 	.word	0x20001398
 800d180:	20005794 	.word	0x20005794
 800d184:	200013a8 	.word	0x200013a8
 800d188:	20001384 	.word	0x20001384
 800d18c:	0000fffe 	.word	0x0000fffe
 800d190:	2000138c 	.word	0x2000138c
 800d194:	20001360 	.word	0x20001360
 800d198:	0000fe0a 	.word	0x0000fe0a
 800d19c:	0801a7ec 	.word	0x0801a7ec
 800d1a0:	20001390 	.word	0x20001390
				if (!delayButtonStateReset
 800d1a4:	4b37      	ldr	r3, [pc, #220]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d000      	beq.n	800d1ae <CheckAttachedButtons+0x3a6>
 800d1ac:	e753      	b.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800d1ae:	00eb      	lsls	r3, r5, #3
 800d1b0:	195b      	adds	r3, r3, r5
 800d1b2:	4d35      	ldr	r5, [pc, #212]	; (800d288 <CheckAttachedButtons+0x480>)
 800d1b4:	18ed      	adds	r5, r5, r3
 800d1b6:	7a2b      	ldrb	r3, [r5, #8]
 800d1b8:	071b      	lsls	r3, r3, #28
 800d1ba:	d400      	bmi.n	800d1be <CheckAttachedButtons+0x3b6>
 800d1bc:	e74b      	b.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d1be:	4b31      	ldr	r3, [pc, #196]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	0020      	movs	r0, r4
 800d1c8:	f7ff fe1b 	bl	800ce02 <buttonPressedForXCallback>
 800d1cc:	e743      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d1ce:	4b2d      	ldr	r3, [pc, #180]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d000      	beq.n	800d1d8 <CheckAttachedButtons+0x3d0>
 800d1d6:	e73e      	b.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800d1d8:	00eb      	lsls	r3, r5, #3
 800d1da:	195b      	adds	r3, r3, r5
 800d1dc:	4d2a      	ldr	r5, [pc, #168]	; (800d288 <CheckAttachedButtons+0x480>)
 800d1de:	18ed      	adds	r5, r5, r3
 800d1e0:	7a2b      	ldrb	r3, [r5, #8]
 800d1e2:	06db      	lsls	r3, r3, #27
 800d1e4:	d400      	bmi.n	800d1e8 <CheckAttachedButtons+0x3e0>
 800d1e6:	e736      	b.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d1e8:	4b26      	ldr	r3, [pc, #152]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800d1ee:	2103      	movs	r1, #3
 800d1f0:	0020      	movs	r0, r4
 800d1f2:	f7ff fe06 	bl	800ce02 <buttonPressedForXCallback>
 800d1f6:	e72e      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d1f8:	4b22      	ldr	r3, [pc, #136]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d000      	beq.n	800d202 <CheckAttachedButtons+0x3fa>
 800d200:	e729      	b.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800d202:	00eb      	lsls	r3, r5, #3
 800d204:	195b      	adds	r3, r3, r5
 800d206:	4d20      	ldr	r5, [pc, #128]	; (800d288 <CheckAttachedButtons+0x480>)
 800d208:	18ed      	adds	r5, r5, r3
 800d20a:	7a2b      	ldrb	r3, [r5, #8]
 800d20c:	069b      	lsls	r3, r3, #26
 800d20e:	d400      	bmi.n	800d212 <CheckAttachedButtons+0x40a>
 800d210:	e721      	b.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d212:	4b1c      	ldr	r3, [pc, #112]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d214:	2201      	movs	r2, #1
 800d216:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d218:	2101      	movs	r1, #1
 800d21a:	0020      	movs	r0, r4
 800d21c:	f7ff fdf2 	bl	800ce04 <buttonReleasedForYCallback>
 800d220:	e719      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d222:	4b18      	ldr	r3, [pc, #96]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d000      	beq.n	800d22c <CheckAttachedButtons+0x424>
 800d22a:	e714      	b.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800d22c:	00eb      	lsls	r3, r5, #3
 800d22e:	195b      	adds	r3, r3, r5
 800d230:	4d15      	ldr	r5, [pc, #84]	; (800d288 <CheckAttachedButtons+0x480>)
 800d232:	18ed      	adds	r5, r5, r3
 800d234:	7a2b      	ldrb	r3, [r5, #8]
 800d236:	065b      	lsls	r3, r3, #25
 800d238:	d400      	bmi.n	800d23c <CheckAttachedButtons+0x434>
 800d23a:	e70c      	b.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d23c:	4b11      	ldr	r3, [pc, #68]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d23e:	2201      	movs	r2, #1
 800d240:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800d242:	2102      	movs	r1, #2
 800d244:	0020      	movs	r0, r4
 800d246:	f7ff fddd 	bl	800ce04 <buttonReleasedForYCallback>
 800d24a:	e704      	b.n	800d056 <CheckAttachedButtons+0x24e>
				if (!delayButtonStateReset
 800d24c:	4b0d      	ldr	r3, [pc, #52]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d000      	beq.n	800d256 <CheckAttachedButtons+0x44e>
 800d254:	e6ff      	b.n	800d056 <CheckAttachedButtons+0x24e>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800d256:	00eb      	lsls	r3, r5, #3
 800d258:	195b      	adds	r3, r3, r5
 800d25a:	4d0b      	ldr	r5, [pc, #44]	; (800d288 <CheckAttachedButtons+0x480>)
 800d25c:	18ed      	adds	r5, r5, r3
 800d25e:	2308      	movs	r3, #8
 800d260:	56eb      	ldrsb	r3, [r5, r3]
 800d262:	2b00      	cmp	r3, #0
 800d264:	db00      	blt.n	800d268 <CheckAttachedButtons+0x460>
 800d266:	e6f6      	b.n	800d056 <CheckAttachedButtons+0x24e>
					delayButtonStateReset = true;
 800d268:	4b06      	ldr	r3, [pc, #24]	; (800d284 <CheckAttachedButtons+0x47c>)
 800d26a:	2201      	movs	r2, #1
 800d26c:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800d26e:	2103      	movs	r1, #3
 800d270:	0020      	movs	r0, r4
 800d272:	f7ff fdc7 	bl	800ce04 <buttonReleasedForYCallback>
 800d276:	e6ee      	b.n	800d056 <CheckAttachedButtons+0x24e>
}
 800d278:	b007      	add	sp, #28
 800d27a:	bcc0      	pop	{r6, r7}
 800d27c:	46b9      	mov	r9, r7
 800d27e:	46b0      	mov	r8, r6
 800d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d282:	46c0      	nop			; (mov r8, r8)
 800d284:	20001390 	.word	0x20001390
 800d288:	20001360 	.word	0x20001360

0800d28c <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	4b03      	ldr	r3, [pc, #12]	; (800d2a0 <NVIC_SystemReset+0x14>)
 800d292:	4a04      	ldr	r2, [pc, #16]	; (800d2a4 <NVIC_SystemReset+0x18>)
 800d294:	60da      	str	r2, [r3, #12]
 800d296:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	e7fd      	b.n	800d29a <NVIC_SystemReset+0xe>
 800d29e:	46c0      	nop			; (mov r8, r8)
 800d2a0:	e000ed00 	.word	0xe000ed00
 800d2a4:	05fa0004 	.word	0x05fa0004

0800d2a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d2a8:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d2aa:	f002 fdf9 	bl	800fea0 <HAL_IncTick>
  osSystickHandler();  
 800d2ae:	f000 fef7 	bl	800e0a0 <osSystickHandler>

}
 800d2b2:	bd10      	pop	{r4, pc}

0800d2b4 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d2b4:	b530      	push	{r4, r5, lr}
 800d2b6:	b083      	sub	sp, #12
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d2b8:	4d09      	ldr	r5, [pc, #36]	; (800d2e0 <HardFault_Handler+0x2c>)
 800d2ba:	7828      	ldrb	r0, [r5, #0]
 800d2bc:	24ff      	movs	r4, #255	; 0xff
 800d2be:	9400      	str	r4, [sp, #0]
 800d2c0:	23ff      	movs	r3, #255	; 0xff
 800d2c2:	2211      	movs	r2, #17
 800d2c4:	4907      	ldr	r1, [pc, #28]	; (800d2e4 <HardFault_Handler+0x30>)
 800d2c6:	f000 fd13 	bl	800dcf0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <HardFault_Handler+0x34>)
 800d2cc:	6819      	ldr	r1, [r3, #0]
 800d2ce:	7828      	ldrb	r0, [r5, #0]
 800d2d0:	9400      	str	r4, [sp, #0]
 800d2d2:	23ff      	movs	r3, #255	; 0xff
 800d2d4:	220f      	movs	r2, #15
 800d2d6:	f000 fd0b 	bl	800dcf0 <writePxMutex>
	NVIC_SystemReset();
 800d2da:	f7ff ffd7 	bl	800d28c <NVIC_SystemReset>
 800d2de:	46c0      	nop			; (mov r8, r8)
 800d2e0:	2000066e 	.word	0x2000066e
 800d2e4:	0801a814 	.word	0x0801a814
 800d2e8:	20000104 	.word	0x20000104

0800d2ec <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d2ec:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d2ee:	4802      	ldr	r0, [pc, #8]	; (800d2f8 <USART1_IRQHandler+0xc>)
 800d2f0:	f005 fe2b 	bl	8012f4a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d2f4:	bd10      	pop	{r4, pc}
 800d2f6:	46c0      	nop			; (mov r8, r8)
 800d2f8:	20005954 	.word	0x20005954

0800d2fc <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d2fc:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d2fe:	4802      	ldr	r0, [pc, #8]	; (800d308 <USART2_IRQHandler+0xc>)
 800d300:	f005 fe23 	bl	8012f4a <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d304:	bd10      	pop	{r4, pc}
 800d306:	46c0      	nop			; (mov r8, r8)
 800d308:	20005ac4 	.word	0x20005ac4

0800d30c <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d30c:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d30e:	4805      	ldr	r0, [pc, #20]	; (800d324 <USART3_8_IRQHandler+0x18>)
 800d310:	f005 fe1b 	bl	8012f4a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d314:	4804      	ldr	r0, [pc, #16]	; (800d328 <USART3_8_IRQHandler+0x1c>)
 800d316:	f005 fe18 	bl	8012f4a <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d31a:	4804      	ldr	r0, [pc, #16]	; (800d32c <USART3_8_IRQHandler+0x20>)
 800d31c:	f005 fe15 	bl	8012f4a <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d320:	bd10      	pop	{r4, pc}
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	200058a4 	.word	0x200058a4
 800d328:	20005a50 	.word	0x20005a50
 800d32c:	200059d8 	.word	0x200059d8

0800d330 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d330:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d332:	2001      	movs	r0, #1
 800d334:	f7f9 fef2 	bl	800711c <DMA_IRQHandler>
	
}
 800d338:	bd10      	pop	{r4, pc}
	...

0800d33c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d33c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d33e:	4b0c      	ldr	r3, [pc, #48]	; (800d370 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	06db      	lsls	r3, r3, #27
 800d344:	d40b      	bmi.n	800d35e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	05db      	lsls	r3, r3, #23
 800d34c:	d40b      	bmi.n	800d366 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d34e:	4b09      	ldr	r3, [pc, #36]	; (800d374 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	06db      	lsls	r3, r3, #27
 800d354:	d506      	bpl.n	800d364 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d356:	4808      	ldr	r0, [pc, #32]	; (800d378 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d358:	f003 fb00 	bl	801095c <HAL_DMA_IRQHandler>
	}
}
 800d35c:	e002      	b.n	800d364 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800d35e:	2005      	movs	r0, #5
 800d360:	f7f9 fedc 	bl	800711c <DMA_IRQHandler>
}
 800d364:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d366:	2002      	movs	r0, #2
 800d368:	f7f9 fed8 	bl	800711c <DMA_IRQHandler>
 800d36c:	e7fa      	b.n	800d364 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800d36e:	46c0      	nop			; (mov r8, r8)
 800d370:	40020400 	.word	0x40020400
 800d374:	40020000 	.word	0x40020000
 800d378:	20001154 	.word	0x20001154

0800d37c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d37c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d37e:	4b14      	ldr	r3, [pc, #80]	; (800d3d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	03db      	lsls	r3, r3, #15
 800d384:	d413      	bmi.n	800d3ae <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d386:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	02db      	lsls	r3, r3, #11
 800d38c:	d413      	bmi.n	800d3b6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d38e:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	05db      	lsls	r3, r3, #23
 800d394:	d413      	bmi.n	800d3be <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d396:	4b0e      	ldr	r3, [pc, #56]	; (800d3d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	04db      	lsls	r3, r3, #19
 800d39c:	d413      	bmi.n	800d3c6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d39e:	4b0c      	ldr	r3, [pc, #48]	; (800d3d0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	01db      	lsls	r3, r3, #7
 800d3a4:	d506      	bpl.n	800d3b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d3a6:	480c      	ldr	r0, [pc, #48]	; (800d3d8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d3a8:	f003 fad8 	bl	801095c <HAL_DMA_IRQHandler>
	}
}
 800d3ac:	e002      	b.n	800d3b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d3ae:	2003      	movs	r0, #3
 800d3b0:	f7f9 feb4 	bl	800711c <DMA_IRQHandler>
}
 800d3b4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d3b6:	2004      	movs	r0, #4
 800d3b8:	f7f9 feb0 	bl	800711c <DMA_IRQHandler>
 800d3bc:	e7fa      	b.n	800d3b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d3be:	2006      	movs	r0, #6
 800d3c0:	f7f9 feac 	bl	800711c <DMA_IRQHandler>
 800d3c4:	e7f6      	b.n	800d3b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d3c6:	4805      	ldr	r0, [pc, #20]	; (800d3dc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d3c8:	f003 fac8 	bl	801095c <HAL_DMA_IRQHandler>
 800d3cc:	e7f2      	b.n	800d3b4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d3ce:	46c0      	nop			; (mov r8, r8)
 800d3d0:	40020000 	.word	0x40020000
 800d3d4:	40020400 	.word	0x40020400
 800d3d8:	200011c4 	.word	0x200011c4
 800d3dc:	2000118c 	.word	0x2000118c

0800d3e0 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d3ea:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d3f0:	f7fd fd5e 	bl	800aeb0 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d3f4:	0020      	movs	r0, r4
 800d3f6:	f7fc fedf 	bl	800a1b8 <GetPort>
 800d3fa:	0080      	lsls	r0, r0, #2
 800d3fc:	4b03      	ldr	r3, [pc, #12]	; (800d40c <HAL_UART_TxCpltCallback+0x2c>)
 800d3fe:	58c0      	ldr	r0, [r0, r3]
 800d400:	a901      	add	r1, sp, #4
 800d402:	f001 f995 	bl	800e730 <xQueueGiveFromISR>
}
 800d406:	b002      	add	sp, #8
 800d408:	bd10      	pop	{r4, pc}
 800d40a:	46c0      	nop			; (mov r8, r8)
 800d40c:	20005818 	.word	0x20005818

0800d410 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d410:	b510      	push	{r4, lr}
 800d412:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d414:	2369      	movs	r3, #105	; 0x69
 800d416:	2201      	movs	r2, #1
 800d418:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d41a:	f7fc fecd 	bl	800a1b8 <GetPort>
	if (portStatus[port] == STREAM) {
 800d41e:	4b0b      	ldr	r3, [pc, #44]	; (800d44c <HAL_UART_ErrorCallback+0x3c>)
 800d420:	5c1b      	ldrb	r3, [r3, r0]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d004      	beq.n	800d430 <HAL_UART_ErrorCallback+0x20>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d426:	3801      	subs	r0, #1
 800d428:	4b09      	ldr	r3, [pc, #36]	; (800d450 <HAL_UART_ErrorCallback+0x40>)
 800d42a:	2201      	movs	r2, #1
 800d42c:	541a      	strb	r2, [r3, r0]
	}	
}
 800d42e:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d430:	1e43      	subs	r3, r0, #1
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4a07      	ldr	r2, [pc, #28]	; (800d454 <HAL_UART_ErrorCallback+0x44>)
 800d436:	589b      	ldr	r3, [r3, r2]
 800d438:	6819      	ldr	r1, [r3, #0]
 800d43a:	3128      	adds	r1, #40	; 0x28
 800d43c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	685a      	ldr	r2, [r3, #4]
 800d442:	b292      	uxth	r2, r2
 800d444:	0020      	movs	r0, r4
 800d446:	f005 f96f 	bl	8012728 <HAL_UART_Receive_DMA>
 800d44a:	e7f0      	b.n	800d42e <HAL_UART_ErrorCallback+0x1e>
 800d44c:	200008b4 	.word	0x200008b4
 800d450:	20000a58 	.word	0x20000a58
 800d454:	20000ce8 	.word	0x20000ce8

0800d458 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	46de      	mov	lr, fp
 800d45c:	4657      	mov	r7, sl
 800d45e:	464e      	mov	r6, r9
 800d460:	4645      	mov	r5, r8
 800d462:	b5e0      	push	{r5, r6, r7, lr}
 800d464:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800d466:	f7fc fea7 	bl	800a1b8 <GetPort>
	uint8_t port_index = port_number - 1;
 800d46a:	1e42      	subs	r2, r0, #1
 800d46c:	b2d2      	uxtb	r2, r2
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d46e:	4b69      	ldr	r3, [pc, #420]	; (800d614 <HAL_UART_RxCpltCallback+0x1bc>)
 800d470:	5c99      	ldrb	r1, [r3, r2]
 800d472:	290d      	cmp	r1, #13
 800d474:	d02f      	beq.n	800d4d6 <HAL_UART_RxCpltCallback+0x7e>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800d476:	4b68      	ldr	r3, [pc, #416]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d478:	5c1b      	ldrb	r3, [r3, r0]
 800d47a:	2b03      	cmp	r3, #3
 800d47c:	d054      	beq.n	800d528 <HAL_UART_RxCpltCallback+0xd0>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d47e:	2948      	cmp	r1, #72	; 0x48
 800d480:	d065      	beq.n	800d54e <HAL_UART_RxCpltCallback+0xf6>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d482:	295a      	cmp	r1, #90	; 0x5a
 800d484:	d069      	beq.n	800d55a <HAL_UART_RxCpltCallback+0x102>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
	}

	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d486:	295a      	cmp	r1, #90	; 0x5a
 800d488:	d001      	beq.n	800d48e <HAL_UART_RxCpltCallback+0x36>
 800d48a:	2b07      	cmp	r3, #7
 800d48c:	d06b      	beq.n	800d566 <HAL_UART_RxCpltCallback+0x10e>
	{
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
	}

	else if(portStatus[port_number] == Z_Status)
 800d48e:	2b08      	cmp	r3, #8
 800d490:	d06d      	beq.n	800d56e <HAL_UART_RxCpltCallback+0x116>
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
		temp_index[port_index] = 3;
		temp_length[port_index] = Rx_Data[port_index] + 1;
	}

	else if(portStatus[port_number] == MSG)
 800d492:	2b01      	cmp	r3, #1
 800d494:	d14b      	bne.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
	{
		if(temp_length[port_index] > 1)
 800d496:	4b61      	ldr	r3, [pc, #388]	; (800d61c <HAL_UART_RxCpltCallback+0x1c4>)
 800d498:	5c9b      	ldrb	r3, [r3, r2]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d800      	bhi.n	800d4a0 <HAL_UART_RxCpltCallback+0x48>
 800d49e:	e07e      	b.n	800d59e <HAL_UART_RxCpltCallback+0x146>
		{
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d4a0:	485f      	ldr	r0, [pc, #380]	; (800d620 <HAL_UART_RxCpltCallback+0x1c8>)
 800d4a2:	5c85      	ldrb	r5, [r0, r2]
 800d4a4:	4f5f      	ldr	r7, [pc, #380]	; (800d624 <HAL_UART_RxCpltCallback+0x1cc>)
 800d4a6:	5cbe      	ldrb	r6, [r7, r2]
 800d4a8:	00e8      	lsls	r0, r5, #3
 800d4aa:	1b40      	subs	r0, r0, r5
 800d4ac:	00c0      	lsls	r0, r0, #3
 800d4ae:	4680      	mov	r8, r0
 800d4b0:	0095      	lsls	r5, r2, #2
 800d4b2:	46ac      	mov	ip, r5
 800d4b4:	4494      	add	ip, r2
 800d4b6:	4665      	mov	r5, ip
 800d4b8:	00ed      	lsls	r5, r5, #3
 800d4ba:	4660      	mov	r0, ip
 800d4bc:	1a2d      	subs	r5, r5, r0
 800d4be:	00ed      	lsls	r5, r5, #3
 800d4c0:	0028      	movs	r0, r5
 800d4c2:	4440      	add	r0, r8
 800d4c4:	4d58      	ldr	r5, [pc, #352]	; (800d628 <HAL_UART_RxCpltCallback+0x1d0>)
 800d4c6:	1828      	adds	r0, r5, r0
 800d4c8:	5581      	strb	r1, [r0, r6]
			temp_index[port_index]++;
 800d4ca:	3601      	adds	r6, #1
 800d4cc:	54be      	strb	r6, [r7, r2]
			temp_length[port_index]--;
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	4952      	ldr	r1, [pc, #328]	; (800d61c <HAL_UART_RxCpltCallback+0x1c4>)
 800d4d2:	548b      	strb	r3, [r1, r2]
 800d4d4:	e02b      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d4d6:	4b50      	ldr	r3, [pc, #320]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d4d8:	5c1b      	ldrb	r3, [r3, r0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1cb      	bne.n	800d476 <HAL_UART_RxCpltCallback+0x1e>
		for(int i=0;i<=NumOfPorts;i++) // Free previous CLI port
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e000      	b.n	800d4e4 <HAL_UART_RxCpltCallback+0x8c>
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	2b03      	cmp	r3, #3
 800d4e6:	dc07      	bgt.n	800d4f8 <HAL_UART_RxCpltCallback+0xa0>
			if(portStatus[i] == CLI)
 800d4e8:	4a4b      	ldr	r2, [pc, #300]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d4ea:	5cd2      	ldrb	r2, [r2, r3]
 800d4ec:	2a03      	cmp	r2, #3
 800d4ee:	d1f8      	bne.n	800d4e2 <HAL_UART_RxCpltCallback+0x8a>
				portStatus[i] = FREE;
 800d4f0:	4a49      	ldr	r2, [pc, #292]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	54d1      	strb	r1, [r2, r3]
 800d4f6:	e7f4      	b.n	800d4e2 <HAL_UART_RxCpltCallback+0x8a>
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800d4f8:	4b47      	ldr	r3, [pc, #284]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	541a      	strb	r2, [r3, r0]
		PcPort = port_number;
 800d4fe:	4b4b      	ldr	r3, [pc, #300]	; (800d62c <HAL_UART_RxCpltCallback+0x1d4>)
 800d500:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d502:	4b4b      	ldr	r3, [pc, #300]	; (800d630 <HAL_UART_RxCpltCallback+0x1d8>)
 800d504:	6818      	ldr	r0, [r3, #0]
 800d506:	2300      	movs	r3, #0
 800d508:	3a01      	subs	r2, #1
 800d50a:	2100      	movs	r1, #0
 800d50c:	f002 f8de 	bl	800f6cc <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d510:	4b48      	ldr	r3, [pc, #288]	; (800d634 <HAL_UART_RxCpltCallback+0x1dc>)
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d003      	beq.n	800d520 <HAL_UART_RxCpltCallback+0xc8>
		Activate_CLI_For_First_Time_Flag = 1;
 800d518:	4b46      	ldr	r3, [pc, #280]	; (800d634 <HAL_UART_RxCpltCallback+0x1dc>)
 800d51a:	2201      	movs	r2, #1
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	e006      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d520:	4b45      	ldr	r3, [pc, #276]	; (800d638 <HAL_UART_RxCpltCallback+0x1e0>)
 800d522:	2201      	movs	r2, #1
 800d524:	701a      	strb	r2, [r3, #0]
 800d526:	e7f7      	b.n	800d518 <HAL_UART_RxCpltCallback+0xc0>
		Read_In_CLI_Task_Flag = 1;
 800d528:	4b43      	ldr	r3, [pc, #268]	; (800d638 <HAL_UART_RxCpltCallback+0x1e0>)
 800d52a:	2201      	movs	r2, #1
 800d52c:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d52e:	0020      	movs	r0, r4
 800d530:	f7fc fe42 	bl	800a1b8 <GetPort>
 800d534:	1e41      	subs	r1, r0, #1
 800d536:	4837      	ldr	r0, [pc, #220]	; (800d614 <HAL_UART_RxCpltCallback+0x1bc>)
 800d538:	1809      	adds	r1, r1, r0
 800d53a:	2201      	movs	r2, #1
 800d53c:	0020      	movs	r0, r4
 800d53e:	f005 f8f3 	bl	8012728 <HAL_UART_Receive_DMA>
}
 800d542:	bcf0      	pop	{r4, r5, r6, r7}
 800d544:	46bb      	mov	fp, r7
 800d546:	46b2      	mov	sl, r6
 800d548:	46a9      	mov	r9, r5
 800d54a:	46a0      	mov	r8, r4
 800d54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d197      	bne.n	800d482 <HAL_UART_RxCpltCallback+0x2a>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d552:	4b31      	ldr	r3, [pc, #196]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d554:	2207      	movs	r2, #7
 800d556:	541a      	strb	r2, [r3, r0]
 800d558:	e7e9      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d55a:	2b07      	cmp	r3, #7
 800d55c:	d193      	bne.n	800d486 <HAL_UART_RxCpltCallback+0x2e>
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800d55e:	4b2e      	ldr	r3, [pc, #184]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d560:	2208      	movs	r2, #8
 800d562:	541a      	strb	r2, [r3, r0]
 800d564:	e7e3      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800d566:	4b2c      	ldr	r3, [pc, #176]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d568:	2200      	movs	r2, #0
 800d56a:	541a      	strb	r2, [r3, r0]
 800d56c:	e7df      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
		portStatus[port_number] =MSG; // Receive length byte.
 800d56e:	4b2a      	ldr	r3, [pc, #168]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d570:	2501      	movs	r5, #1
 800d572:	541d      	strb	r5, [r3, r0]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d574:	4b2a      	ldr	r3, [pc, #168]	; (800d620 <HAL_UART_RxCpltCallback+0x1c8>)
 800d576:	5c98      	ldrb	r0, [r3, r2]
 800d578:	00c3      	lsls	r3, r0, #3
 800d57a:	1a1b      	subs	r3, r3, r0
 800d57c:	00db      	lsls	r3, r3, #3
 800d57e:	0095      	lsls	r5, r2, #2
 800d580:	18ad      	adds	r5, r5, r2
 800d582:	00e8      	lsls	r0, r5, #3
 800d584:	1b40      	subs	r0, r0, r5
 800d586:	00c0      	lsls	r0, r0, #3
 800d588:	181b      	adds	r3, r3, r0
 800d58a:	4827      	ldr	r0, [pc, #156]	; (800d628 <HAL_UART_RxCpltCallback+0x1d0>)
 800d58c:	18c3      	adds	r3, r0, r3
 800d58e:	7099      	strb	r1, [r3, #2]
		temp_index[port_index] = 3;
 800d590:	4b24      	ldr	r3, [pc, #144]	; (800d624 <HAL_UART_RxCpltCallback+0x1cc>)
 800d592:	2003      	movs	r0, #3
 800d594:	5498      	strb	r0, [r3, r2]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d596:	3101      	adds	r1, #1
 800d598:	4b20      	ldr	r3, [pc, #128]	; (800d61c <HAL_UART_RxCpltCallback+0x1c4>)
 800d59a:	5499      	strb	r1, [r3, r2]
 800d59c:	e7c7      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d59e:	4d20      	ldr	r5, [pc, #128]	; (800d620 <HAL_UART_RxCpltCallback+0x1c8>)
 800d5a0:	46ac      	mov	ip, r5
 800d5a2:	5cad      	ldrb	r5, [r5, r2]
 800d5a4:	4e1f      	ldr	r6, [pc, #124]	; (800d624 <HAL_UART_RxCpltCallback+0x1cc>)
 800d5a6:	46b1      	mov	r9, r6
 800d5a8:	5cb6      	ldrb	r6, [r6, r2]
 800d5aa:	46b0      	mov	r8, r6
 800d5ac:	00ee      	lsls	r6, r5, #3
 800d5ae:	1b76      	subs	r6, r6, r5
 800d5b0:	00f6      	lsls	r6, r6, #3
 800d5b2:	46b3      	mov	fp, r6
 800d5b4:	0097      	lsls	r7, r2, #2
 800d5b6:	46ba      	mov	sl, r7
 800d5b8:	4492      	add	sl, r2
 800d5ba:	4657      	mov	r7, sl
 800d5bc:	00ff      	lsls	r7, r7, #3
 800d5be:	4656      	mov	r6, sl
 800d5c0:	1bbf      	subs	r7, r7, r6
 800d5c2:	00ff      	lsls	r7, r7, #3
 800d5c4:	003e      	movs	r6, r7
 800d5c6:	445e      	add	r6, fp
 800d5c8:	4f17      	ldr	r7, [pc, #92]	; (800d628 <HAL_UART_RxCpltCallback+0x1d0>)
 800d5ca:	19be      	adds	r6, r7, r6
 800d5cc:	4647      	mov	r7, r8
 800d5ce:	55f1      	strb	r1, [r6, r7]
			temp_index[port_index]++;
 800d5d0:	4641      	mov	r1, r8
 800d5d2:	3101      	adds	r1, #1
 800d5d4:	464e      	mov	r6, r9
 800d5d6:	54b1      	strb	r1, [r6, r2]
			temp_length[port_index]--;
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	4910      	ldr	r1, [pc, #64]	; (800d61c <HAL_UART_RxCpltCallback+0x1c4>)
 800d5dc:	548b      	strb	r3, [r1, r2]
			MSG_Buffer_Index_End[port_index]++;
 800d5de:	3501      	adds	r5, #1
 800d5e0:	b2ed      	uxtb	r5, r5
 800d5e2:	4663      	mov	r3, ip
 800d5e4:	549d      	strb	r5, [r3, r2]
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d5e6:	2d05      	cmp	r5, #5
 800d5e8:	d00c      	beq.n	800d604 <HAL_UART_RxCpltCallback+0x1ac>
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d5ea:	4a14      	ldr	r2, [pc, #80]	; (800d63c <HAL_UART_RxCpltCallback+0x1e4>)
 800d5ec:	7813      	ldrb	r3, [r2, #0]
 800d5ee:	4914      	ldr	r1, [pc, #80]	; (800d640 <HAL_UART_RxCpltCallback+0x1e8>)
 800d5f0:	54c8      	strb	r0, [r1, r3]
			Process_Message_Buffer_Index_End++;
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	7013      	strb	r3, [r2, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d5f8:	2b05      	cmp	r3, #5
 800d5fa:	d006      	beq.n	800d60a <HAL_UART_RxCpltCallback+0x1b2>
			portStatus[port_number] =FREE; // End of receiving message.
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <HAL_UART_RxCpltCallback+0x1c0>)
 800d5fe:	2200      	movs	r2, #0
 800d600:	541a      	strb	r2, [r3, r0]
 800d602:	e794      	b.n	800d52e <HAL_UART_RxCpltCallback+0xd6>
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d604:	2100      	movs	r1, #0
 800d606:	5499      	strb	r1, [r3, r2]
 800d608:	e7ef      	b.n	800d5ea <HAL_UART_RxCpltCallback+0x192>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d60a:	0013      	movs	r3, r2
 800d60c:	2200      	movs	r2, #0
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	e7f4      	b.n	800d5fc <HAL_UART_RxCpltCallback+0x1a4>
 800d612:	46c0      	nop			; (mov r8, r8)
 800d614:	20000a5c 	.word	0x20000a5c
 800d618:	200008b4 	.word	0x200008b4
 800d61c:	200013c8 	.word	0x200013c8
 800d620:	20000664 	.word	0x20000664
 800d624:	200013c4 	.word	0x200013c4
 800d628:	2000031c 	.word	0x2000031c
 800d62c:	2000066e 	.word	0x2000066e
 800d630:	20000dfc 	.word	0x20000dfc
 800d634:	20000315 	.word	0x20000315
 800d638:	20000677 	.word	0x20000677
 800d63c:	20000675 	.word	0x20000675
 800d640:	20000670 	.word	0x20000670

0800d644 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d644:	b530      	push	{r4, r5, lr}
 800d646:	b083      	sub	sp, #12
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d648:	4d09      	ldr	r5, [pc, #36]	; (800d670 <vApplicationStackOverflowHook+0x2c>)
 800d64a:	7828      	ldrb	r0, [r5, #0]
 800d64c:	24ff      	movs	r4, #255	; 0xff
 800d64e:	9400      	str	r4, [sp, #0]
 800d650:	23ff      	movs	r3, #255	; 0xff
 800d652:	2210      	movs	r2, #16
 800d654:	4907      	ldr	r1, [pc, #28]	; (800d674 <vApplicationStackOverflowHook+0x30>)
 800d656:	f000 fb4b 	bl	800dcf0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d65a:	4b07      	ldr	r3, [pc, #28]	; (800d678 <vApplicationStackOverflowHook+0x34>)
 800d65c:	6819      	ldr	r1, [r3, #0]
 800d65e:	7828      	ldrb	r0, [r5, #0]
 800d660:	9400      	str	r4, [sp, #0]
 800d662:	23ff      	movs	r3, #255	; 0xff
 800d664:	220f      	movs	r2, #15
 800d666:	f000 fb43 	bl	800dcf0 <writePxMutex>
	NVIC_SystemReset();
 800d66a:	f7ff fe0f 	bl	800d28c <NVIC_SystemReset>
 800d66e:	46c0      	nop			; (mov r8, r8)
 800d670:	2000066e 	.word	0x2000066e
 800d674:	0801a828 	.word	0x0801a828
 800d678:	20000104 	.word	0x20000104

0800d67c <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800d67c:	b530      	push	{r4, r5, lr}
 800d67e:	b083      	sub	sp, #12
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d680:	4d09      	ldr	r5, [pc, #36]	; (800d6a8 <vApplicationMallocFailedHook+0x2c>)
 800d682:	7828      	ldrb	r0, [r5, #0]
 800d684:	24ff      	movs	r4, #255	; 0xff
 800d686:	9400      	str	r4, [sp, #0]
 800d688:	23ff      	movs	r3, #255	; 0xff
 800d68a:	2214      	movs	r2, #20
 800d68c:	4907      	ldr	r1, [pc, #28]	; (800d6ac <vApplicationMallocFailedHook+0x30>)
 800d68e:	f000 fb2f 	bl	800dcf0 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d692:	4b07      	ldr	r3, [pc, #28]	; (800d6b0 <vApplicationMallocFailedHook+0x34>)
 800d694:	6819      	ldr	r1, [r3, #0]
 800d696:	7828      	ldrb	r0, [r5, #0]
 800d698:	9400      	str	r4, [sp, #0]
 800d69a:	23ff      	movs	r3, #255	; 0xff
 800d69c:	220f      	movs	r2, #15
 800d69e:	f000 fb27 	bl	800dcf0 <writePxMutex>
	NVIC_SystemReset();
 800d6a2:	f7ff fdf3 	bl	800d28c <NVIC_SystemReset>
 800d6a6:	46c0      	nop			; (mov r8, r8)
 800d6a8:	2000066e 	.word	0x2000066e
 800d6ac:	0801a83c 	.word	0x0801a83c
 800d6b0:	20000104 	.word	0x20000104

0800d6b4 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6b6:	46d6      	mov	lr, sl
 800d6b8:	464f      	mov	r7, r9
 800d6ba:	4646      	mov	r6, r8
 800d6bc:	b5c0      	push	{r6, r7, lr}
 800d6be:	b08c      	sub	sp, #48	; 0x30
 800d6c0:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d6c2:	ac03      	add	r4, sp, #12
 800d6c4:	4b35      	ldr	r3, [pc, #212]	; (800d79c <RTC_CalendarConfig+0xe8>)
 800d6c6:	0022      	movs	r2, r4
 800d6c8:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d6ca:	c243      	stmia	r2!, {r0, r1, r6}
 800d6cc:	466a      	mov	r2, sp
 800d6ce:	4b34      	ldr	r3, [pc, #208]	; (800d7a0 <RTC_CalendarConfig+0xec>)
 800d6d0:	cb03      	ldmia	r3!, {r0, r1}
 800d6d2:	c203      	stmia	r2!, {r0, r1}
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d6d8:	2015      	movs	r0, #21
 800d6da:	4468      	add	r0, sp
 800d6dc:	f005 fcc9 	bl	8013072 <atoi>
 800d6e0:	b2c7      	uxtb	r7, r0
  *(comDate + 6) = 0;
 800d6e2:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800d6e4:	a804      	add	r0, sp, #16
 800d6e6:	f005 fcc4 	bl	8013072 <atoi>
 800d6ea:	b2c6      	uxtb	r6, r0
  *(comDate + 3) = 0;
 800d6ec:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d6ee:	2400      	movs	r4, #0
 800d6f0:	e001      	b.n	800d6f6 <RTC_CalendarConfig+0x42>
 800d6f2:	3401      	adds	r4, #1
 800d6f4:	b2e4      	uxtb	r4, r4
 800d6f6:	2c0b      	cmp	r4, #11
 800d6f8:	d80a      	bhi.n	800d710 <RTC_CalendarConfig+0x5c>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d6fa:	00a3      	lsls	r3, r4, #2
 800d6fc:	4a29      	ldr	r2, [pc, #164]	; (800d7a4 <RTC_CalendarConfig+0xf0>)
 800d6fe:	5899      	ldr	r1, [r3, r2]
 800d700:	a803      	add	r0, sp, #12
 800d702:	f7f2 fcff 	bl	8000104 <strcmp>
 800d706:	2800      	cmp	r0, #0
 800d708:	d1f3      	bne.n	800d6f2 <RTC_CalendarConfig+0x3e>
			month = i + 1;
 800d70a:	1c65      	adds	r5, r4, #1
 800d70c:	b2ed      	uxtb	r5, r5
 800d70e:	e7f0      	b.n	800d6f2 <RTC_CalendarConfig+0x3e>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d710:	466b      	mov	r3, sp
 800d712:	1d98      	adds	r0, r3, #6
 800d714:	f005 fcad 	bl	8013072 <atoi>
 800d718:	b2c3      	uxtb	r3, r0
 800d71a:	4698      	mov	r8, r3
	*(comDate + 5) = 0;
 800d71c:	ac03      	add	r4, sp, #12
 800d71e:	2300      	movs	r3, #0
 800d720:	469a      	mov	sl, r3
 800d722:	7163      	strb	r3, [r4, #5]
	minutes = atoi(comTime + 3);
 800d724:	466b      	mov	r3, sp
 800d726:	1cd8      	adds	r0, r3, #3
 800d728:	f005 fca3 	bl	8013072 <atoi>
 800d72c:	b2c3      	uxtb	r3, r0
 800d72e:	4699      	mov	r9, r3
	*(comDate + 2) = 0;
 800d730:	4653      	mov	r3, sl
 800d732:	70a3      	strb	r3, [r4, #2]
	hours = atoi(comTime);
 800d734:	4668      	mov	r0, sp
 800d736:	f005 fc9c 	bl	8013072 <atoi>
 800d73a:	b2c4      	uxtb	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d73c:	a90b      	add	r1, sp, #44	; 0x2c
 800d73e:	70cf      	strb	r7, [r1, #3]
  sdatestructure.Month = month;
 800d740:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d742:	708e      	strb	r6, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d744:	2301      	movs	r3, #1
 800d746:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d748:	2200      	movs	r2, #0
 800d74a:	4817      	ldr	r0, [pc, #92]	; (800d7a8 <RTC_CalendarConfig+0xf4>)
 800d74c:	f004 fdb6 	bl	80122bc <HAL_RTC_SetDate>
 800d750:	2800      	cmp	r0, #0
 800d752:	d11e      	bne.n	800d792 <RTC_CalendarConfig+0xde>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d754:	a906      	add	r1, sp, #24
 800d756:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d758:	464b      	mov	r3, r9
 800d75a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d75c:	4643      	mov	r3, r8
 800d75e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d760:	2300      	movs	r3, #0
 800d762:	720b      	strb	r3, [r1, #8]
 800d764:	4a11      	ldr	r2, [pc, #68]	; (800d7ac <RTC_CalendarConfig+0xf8>)
 800d766:	3018      	adds	r0, #24
 800d768:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d76a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d76c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d76e:	2200      	movs	r2, #0
 800d770:	480d      	ldr	r0, [pc, #52]	; (800d7a8 <RTC_CalendarConfig+0xf4>)
 800d772:	f004 fd25 	bl	80121c0 <HAL_RTC_SetTime>
 800d776:	1e04      	subs	r4, r0, #0
 800d778:	d10d      	bne.n	800d796 <RTC_CalendarConfig+0xe2>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d77a:	4a0d      	ldr	r2, [pc, #52]	; (800d7b0 <RTC_CalendarConfig+0xfc>)
 800d77c:	2101      	movs	r1, #1
 800d77e:	480a      	ldr	r0, [pc, #40]	; (800d7a8 <RTC_CalendarConfig+0xf4>)
 800d780:	f004 fe5e 	bl	8012440 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d784:	0020      	movs	r0, r4
 800d786:	b00c      	add	sp, #48	; 0x30
 800d788:	bce0      	pop	{r5, r6, r7}
 800d78a:	46ba      	mov	sl, r7
 800d78c:	46b1      	mov	r9, r6
 800d78e:	46a8      	mov	r8, r5
 800d790:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d792:	24ff      	movs	r4, #255	; 0xff
 800d794:	e7f6      	b.n	800d784 <RTC_CalendarConfig+0xd0>
		return BOS_ERROR;
 800d796:	24ff      	movs	r4, #255	; 0xff
 800d798:	e7f4      	b.n	800d784 <RTC_CalendarConfig+0xd0>
 800d79a:	46c0      	nop			; (mov r8, r8)
 800d79c:	08017b9c 	.word	0x08017b9c
 800d7a0:	0801a864 	.word	0x0801a864
 800d7a4:	20000054 	.word	0x20000054
 800d7a8:	20005bb0 	.word	0x20005bb0
 800d7ac:	20005794 	.word	0x20005794
 800d7b0:	000032f2 	.word	0x000032f2

0800d7b4 <RTC_Init>:
{
 800d7b4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d7b6:	4a1c      	ldr	r2, [pc, #112]	; (800d828 <RTC_Init+0x74>)
 800d7b8:	6a11      	ldr	r1, [r2, #32]
 800d7ba:	2380      	movs	r3, #128	; 0x80
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	430b      	orrs	r3, r1
 800d7c0:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d7c2:	481a      	ldr	r0, [pc, #104]	; (800d82c <RTC_Init+0x78>)
 800d7c4:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <RTC_Init+0x7c>)
 800d7c6:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d7cc:	227c      	movs	r2, #124	; 0x7c
 800d7ce:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d7d0:	4a18      	ldr	r2, [pc, #96]	; (800d834 <RTC_Init+0x80>)
 800d7d2:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d7d4:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d7d6:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d7d8:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d7da:	f004 fc95 	bl	8012108 <HAL_RTC_Init>
 800d7de:	1e04      	subs	r4, r0, #0
 800d7e0:	d11f      	bne.n	800d822 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4811      	ldr	r0, [pc, #68]	; (800d82c <RTC_Init+0x78>)
 800d7e6:	f004 fe31 	bl	801244c <HAL_RTCEx_BKUPRead>
 800d7ea:	4b13      	ldr	r3, [pc, #76]	; (800d838 <RTC_Init+0x84>)
 800d7ec:	4298      	cmp	r0, r3
 800d7ee:	d10e      	bne.n	800d80e <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800d7f0:	4b0d      	ldr	r3, [pc, #52]	; (800d828 <RTC_Init+0x74>)
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f4:	011b      	lsls	r3, r3, #4
 800d7f6:	d502      	bpl.n	800d7fe <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800d7f8:	4b10      	ldr	r3, [pc, #64]	; (800d83c <RTC_Init+0x88>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800d7fe:	4b0a      	ldr	r3, [pc, #40]	; (800d828 <RTC_Init+0x74>)
 800d800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d802:	015b      	lsls	r3, r3, #5
 800d804:	d505      	bpl.n	800d812 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800d806:	4b0d      	ldr	r3, [pc, #52]	; (800d83c <RTC_Init+0x88>)
 800d808:	2201      	movs	r2, #1
 800d80a:	701a      	strb	r2, [r3, #0]
 800d80c:	e001      	b.n	800d812 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800d80e:	f7ff ff51 	bl	800d6b4 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800d812:	4a05      	ldr	r2, [pc, #20]	; (800d828 <RTC_Init+0x74>)
 800d814:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d816:	2380      	movs	r3, #128	; 0x80
 800d818:	045b      	lsls	r3, r3, #17
 800d81a:	430b      	orrs	r3, r1
 800d81c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800d81e:	0020      	movs	r0, r4
 800d820:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d822:	24ff      	movs	r4, #255	; 0xff
 800d824:	e7fb      	b.n	800d81e <RTC_Init+0x6a>
 800d826:	46c0      	nop			; (mov r8, r8)
 800d828:	40021000 	.word	0x40021000
 800d82c:	20005bb0 	.word	0x20005bb0
 800d830:	40002800 	.word	0x40002800
 800d834:	000007cf 	.word	0x000007cf
 800d838:	000032f2 	.word	0x000032f2
 800d83c:	200013cb 	.word	0x200013cb

0800d840 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800d840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d842:	46c6      	mov	lr, r8
 800d844:	b500      	push	{lr}
 800d846:	b086      	sub	sp, #24
 800d848:	ac0c      	add	r4, sp, #48	; 0x30
 800d84a:	7827      	ldrb	r7, [r4, #0]
 800d84c:	ac0d      	add	r4, sp, #52	; 0x34
 800d84e:	7824      	ldrb	r4, [r4, #0]
 800d850:	46a0      	mov	r8, r4
 800d852:	ac0e      	add	r4, sp, #56	; 0x38
 800d854:	7825      	ldrb	r5, [r4, #0]
 800d856:	ac0f      	add	r4, sp, #60	; 0x3c
 800d858:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800d85a:	3230      	adds	r2, #48	; 0x30
 800d85c:	ac05      	add	r4, sp, #20
 800d85e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800d860:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800d862:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800d864:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d866:	2200      	movs	r2, #0
 800d868:	0021      	movs	r1, r4
 800d86a:	481f      	ldr	r0, [pc, #124]	; (800d8e8 <BOS_CalendarConfig+0xa8>)
 800d86c:	f004 fd26 	bl	80122bc <HAL_RTC_SetDate>
 800d870:	2800      	cmp	r0, #0
 800d872:	d134      	bne.n	800d8de <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d874:	466b      	mov	r3, sp
 800d876:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800d878:	4642      	mov	r2, r8
 800d87a:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800d87c:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800d87e:	2300      	movs	r3, #0
 800d880:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800d882:	2e01      	cmp	r6, #1
 800d884:	d01e      	beq.n	800d8c4 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800d886:	2e02      	cmp	r6, #2
 800d888:	d022      	beq.n	800d8d0 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800d88a:	4b18      	ldr	r3, [pc, #96]	; (800d8ec <BOS_CalendarConfig+0xac>)
 800d88c:	2218      	movs	r2, #24
 800d88e:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d890:	2200      	movs	r2, #0
 800d892:	4669      	mov	r1, sp
 800d894:	4814      	ldr	r0, [pc, #80]	; (800d8e8 <BOS_CalendarConfig+0xa8>)
 800d896:	f004 fc93 	bl	80121c0 <HAL_RTC_SetTime>
 800d89a:	1e04      	subs	r4, r0, #0
 800d89c:	d121      	bne.n	800d8e2 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800d89e:	4a13      	ldr	r2, [pc, #76]	; (800d8ec <BOS_CalendarConfig+0xac>)
 800d8a0:	7b53      	ldrb	r3, [r2, #13]
 800d8a2:	021b      	lsls	r3, r3, #8
 800d8a4:	7911      	ldrb	r1, [r2, #4]
 800d8a6:	4319      	orrs	r1, r3
 800d8a8:	208d      	movs	r0, #141	; 0x8d
 800d8aa:	0040      	lsls	r0, r0, #1
 800d8ac:	f7fe f97a 	bl	800bba4 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d8b0:	4a0f      	ldr	r2, [pc, #60]	; (800d8f0 <BOS_CalendarConfig+0xb0>)
 800d8b2:	2101      	movs	r1, #1
 800d8b4:	480c      	ldr	r0, [pc, #48]	; (800d8e8 <BOS_CalendarConfig+0xa8>)
 800d8b6:	f004 fdc3 	bl	8012440 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d8ba:	0020      	movs	r0, r4
 800d8bc:	b006      	add	sp, #24
 800d8be:	bc80      	pop	{r7}
 800d8c0:	46b8      	mov	r8, r7
 800d8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800d8c4:	466a      	mov	r2, sp
 800d8c6:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d8c8:	4b08      	ldr	r3, [pc, #32]	; (800d8ec <BOS_CalendarConfig+0xac>)
 800d8ca:	220c      	movs	r2, #12
 800d8cc:	735a      	strb	r2, [r3, #13]
 800d8ce:	e7df      	b.n	800d890 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800d8d0:	2340      	movs	r3, #64	; 0x40
 800d8d2:	466a      	mov	r2, sp
 800d8d4:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <BOS_CalendarConfig+0xac>)
 800d8d8:	220c      	movs	r2, #12
 800d8da:	735a      	strb	r2, [r3, #13]
 800d8dc:	e7d8      	b.n	800d890 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800d8de:	24ff      	movs	r4, #255	; 0xff
 800d8e0:	e7eb      	b.n	800d8ba <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800d8e2:	24ff      	movs	r4, #255	; 0xff
 800d8e4:	e7e9      	b.n	800d8ba <BOS_CalendarConfig+0x7a>
 800d8e6:	46c0      	nop			; (mov r8, r8)
 800d8e8:	20005bb0 	.word	0x20005bb0
 800d8ec:	20005794 	.word	0x20005794
 800d8f0:	000032f2 	.word	0x000032f2

0800d8f4 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800d8f4:	b530      	push	{r4, r5, lr}
 800d8f6:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800d8f8:	4d16      	ldr	r5, [pc, #88]	; (800d954 <GetTimeDate+0x60>)
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	a902      	add	r1, sp, #8
 800d8fe:	0028      	movs	r0, r5
 800d900:	f004 fd52 	bl	80123a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800d904:	ac07      	add	r4, sp, #28
 800d906:	2200      	movs	r2, #0
 800d908:	0021      	movs	r1, r4
 800d90a:	0028      	movs	r0, r5
 800d90c:	f004 fd74 	bl	80123f8 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800d910:	ab02      	add	r3, sp, #8
 800d912:	7a1a      	ldrb	r2, [r3, #8]
 800d914:	09d2      	lsrs	r2, r2, #7
 800d916:	3201      	adds	r2, #1
 800d918:	4b0f      	ldr	r3, [pc, #60]	; (800d958 <GetTimeDate+0x64>)
 800d91a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800d91c:	9a03      	ldr	r2, [sp, #12]
 800d91e:	9201      	str	r2, [sp, #4]
 800d920:	0852      	lsrs	r2, r2, #1
 800d922:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800d924:	aa02      	add	r2, sp, #8
 800d926:	7892      	ldrb	r2, [r2, #2]
 800d928:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800d92a:	aa02      	add	r2, sp, #8
 800d92c:	7852      	ldrb	r2, [r2, #1]
 800d92e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800d930:	aa02      	add	r2, sp, #8
 800d932:	7812      	ldrb	r2, [r2, #0]
 800d934:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800d936:	78a2      	ldrb	r2, [r4, #2]
 800d938:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800d93a:	7862      	ldrb	r2, [r4, #1]
 800d93c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800d93e:	7822      	ldrb	r2, [r4, #0]
 800d940:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800d942:	78e2      	ldrb	r2, [r4, #3]
 800d944:	21fa      	movs	r1, #250	; 0xfa
 800d946:	00c9      	lsls	r1, r1, #3
 800d948:	468c      	mov	ip, r1
 800d94a:	4462      	add	r2, ip
 800d94c:	831a      	strh	r2, [r3, #24]
}
 800d94e:	b009      	add	sp, #36	; 0x24
 800d950:	bd30      	pop	{r4, r5, pc}
 800d952:	46c0      	nop			; (mov r8, r8)
 800d954:	20005bb0 	.word	0x20005bb0
 800d958:	20005794 	.word	0x20005794

0800d95c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800d95c:	b530      	push	{r4, r5, lr}
 800d95e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800d960:	4a12      	ldr	r2, [pc, #72]	; (800d9ac <TIM_USEC_Init+0x50>)
 800d962:	69d1      	ldr	r1, [r2, #28]
 800d964:	2080      	movs	r0, #128	; 0x80
 800d966:	0040      	lsls	r0, r0, #1
 800d968:	4301      	orrs	r1, r0
 800d96a:	61d1      	str	r1, [r2, #28]
 800d96c:	69d3      	ldr	r3, [r2, #28]
 800d96e:	4003      	ands	r3, r0
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800d974:	4c0e      	ldr	r4, [pc, #56]	; (800d9b0 <TIM_USEC_Init+0x54>)
 800d976:	4b0f      	ldr	r3, [pc, #60]	; (800d9b4 <TIM_USEC_Init+0x58>)
 800d978:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800d97a:	f004 fae5 	bl	8011f48 <HAL_RCC_GetPCLK1Freq>
 800d97e:	490e      	ldr	r1, [pc, #56]	; (800d9b8 <TIM_USEC_Init+0x5c>)
 800d980:	f7f2 fbe6 	bl	8000150 <__udivsi3>
 800d984:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d986:	2500      	movs	r5, #0
 800d988:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800d98a:	4b0c      	ldr	r3, [pc, #48]	; (800d9bc <TIM_USEC_Init+0x60>)
 800d98c:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800d98e:	0020      	movs	r0, r4
 800d990:	f004 fdbe 	bl	8012510 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d994:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d996:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800d998:	a902      	add	r1, sp, #8
 800d99a:	0020      	movs	r0, r4
 800d99c:	f004 fdd2 	bl	8012544 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800d9a0:	0020      	movs	r0, r4
 800d9a2:	f004 fd5a 	bl	801245a <HAL_TIM_Base_Start>
}
 800d9a6:	b005      	add	sp, #20
 800d9a8:	bd30      	pop	{r4, r5, pc}
 800d9aa:	46c0      	nop			; (mov r8, r8)
 800d9ac:	40021000 	.word	0x40021000
 800d9b0:	20005c0c 	.word	0x20005c0c
 800d9b4:	40002000 	.word	0x40002000
 800d9b8:	000f4240 	.word	0x000f4240
 800d9bc:	0000ffff 	.word	0x0000ffff

0800d9c0 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800d9c0:	b530      	push	{r4, r5, lr}
 800d9c2:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800d9c4:	4a12      	ldr	r2, [pc, #72]	; (800da10 <TIM_MSEC_Init+0x50>)
 800d9c6:	6991      	ldr	r1, [r2, #24]
 800d9c8:	2080      	movs	r0, #128	; 0x80
 800d9ca:	0240      	lsls	r0, r0, #9
 800d9cc:	4301      	orrs	r1, r0
 800d9ce:	6191      	str	r1, [r2, #24]
 800d9d0:	6993      	ldr	r3, [r2, #24]
 800d9d2:	4003      	ands	r3, r0
 800d9d4:	9301      	str	r3, [sp, #4]
 800d9d6:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800d9d8:	4c0e      	ldr	r4, [pc, #56]	; (800da14 <TIM_MSEC_Init+0x54>)
 800d9da:	4b0f      	ldr	r3, [pc, #60]	; (800da18 <TIM_MSEC_Init+0x58>)
 800d9dc:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800d9de:	f004 fab3 	bl	8011f48 <HAL_RCC_GetPCLK1Freq>
 800d9e2:	21fa      	movs	r1, #250	; 0xfa
 800d9e4:	0089      	lsls	r1, r1, #2
 800d9e6:	f7f2 fbb3 	bl	8000150 <__udivsi3>
 800d9ea:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d9ec:	2500      	movs	r5, #0
 800d9ee:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800d9f0:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <TIM_MSEC_Init+0x5c>)
 800d9f2:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800d9f4:	0020      	movs	r0, r4
 800d9f6:	f004 fd8b 	bl	8012510 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d9fa:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d9fc:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800d9fe:	a902      	add	r1, sp, #8
 800da00:	0020      	movs	r0, r4
 800da02:	f004 fd9f 	bl	8012544 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800da06:	0020      	movs	r0, r4
 800da08:	f004 fd27 	bl	801245a <HAL_TIM_Base_Start>
}
 800da0c:	b005      	add	sp, #20
 800da0e:	bd30      	pop	{r4, r5, pc}
 800da10:	40021000 	.word	0x40021000
 800da14:	20005bd0 	.word	0x20005bd0
 800da18:	40014000 	.word	0x40014000
 800da1c:	0000ffff 	.word	0x0000ffff

0800da20 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800da20:	b510      	push	{r4, lr}
 800da22:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800da24:	f002 f8dc 	bl	800fbe0 <vPortEnterCritical>
	
	if (Delay)
 800da28:	2c00      	cmp	r4, #0
 800da2a:	d006      	beq.n	800da3a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800da2c:	4b04      	ldr	r3, [pc, #16]	; (800da40 <StartMicroDelay+0x20>)
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800da32:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800da34:	1a5b      	subs	r3, r3, r1
 800da36:	42a3      	cmp	r3, r4
 800da38:	d9fb      	bls.n	800da32 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800da3a:	f002 f8dd 	bl	800fbf8 <vPortExitCritical>
}
 800da3e:	bd10      	pop	{r4, pc}
 800da40:	20005c0c 	.word	0x20005c0c

0800da44 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800da44:	b510      	push	{r4, lr}
 800da46:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800da48:	f002 f8ca 	bl	800fbe0 <vPortEnterCritical>
	
	if (Delay)
 800da4c:	2c00      	cmp	r4, #0
 800da4e:	d006      	beq.n	800da5e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800da50:	4b04      	ldr	r3, [pc, #16]	; (800da64 <StartMilliDelay+0x20>)
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800da56:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800da58:	1a5b      	subs	r3, r3, r1
 800da5a:	42a3      	cmp	r3, r4
 800da5c:	d9fb      	bls.n	800da56 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800da5e:	f002 f8cb 	bl	800fbf8 <vPortExitCritical>
}
 800da62:	bd10      	pop	{r4, pc}
 800da64:	20005bd0 	.word	0x20005bd0

0800da68 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800da68:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800da6a:	4809      	ldr	r0, [pc, #36]	; (800da90 <MX_USART1_UART_Init+0x28>)
 800da6c:	4b09      	ldr	r3, [pc, #36]	; (800da94 <MX_USART1_UART_Init+0x2c>)
 800da6e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800da70:	23e1      	movs	r3, #225	; 0xe1
 800da72:	031b      	lsls	r3, r3, #12
 800da74:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800da76:	2300      	movs	r3, #0
 800da78:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800da7a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800da7c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800da7e:	220c      	movs	r2, #12
 800da80:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800da82:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800da84:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800da86:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800da88:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800da8a:	f005 f985 	bl	8012d98 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800da8e:	bd10      	pop	{r4, pc}
 800da90:	20005954 	.word	0x20005954
 800da94:	40013800 	.word	0x40013800

0800da98 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800da98:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800da9a:	4c0e      	ldr	r4, [pc, #56]	; (800dad4 <MX_USART2_UART_Init+0x3c>)
 800da9c:	4b0e      	ldr	r3, [pc, #56]	; (800dad8 <MX_USART2_UART_Init+0x40>)
 800da9e:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800daa0:	23e1      	movs	r3, #225	; 0xe1
 800daa2:	031b      	lsls	r3, r3, #12
 800daa4:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800daa6:	2300      	movs	r3, #0
 800daa8:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800daaa:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800daac:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800daae:	220c      	movs	r2, #12
 800dab0:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dab2:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dab4:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dab6:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dab8:	6263      	str	r3, [r4, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800daba:	0020      	movs	r0, r4
 800dabc:	f005 f96c 	bl	8012d98 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dac0:	2308      	movs	r3, #8
 800dac2:	6263      	str	r3, [r4, #36]	; 0x24
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dac4:	2380      	movs	r3, #128	; 0x80
 800dac6:	021b      	lsls	r3, r3, #8
 800dac8:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_UART_Init(&huart2);
 800daca:	0020      	movs	r0, r4
 800dacc:	f005 f964 	bl	8012d98 <HAL_UART_Init>
	#endif	
}
 800dad0:	bd10      	pop	{r4, pc}
 800dad2:	46c0      	nop			; (mov r8, r8)
 800dad4:	20005ac4 	.word	0x20005ac4
 800dad8:	40004400 	.word	0x40004400

0800dadc <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800dadc:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dade:	4809      	ldr	r0, [pc, #36]	; (800db04 <MX_USART3_UART_Init+0x28>)
 800dae0:	4b09      	ldr	r3, [pc, #36]	; (800db08 <MX_USART3_UART_Init+0x2c>)
 800dae2:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dae4:	23e1      	movs	r3, #225	; 0xe1
 800dae6:	031b      	lsls	r3, r3, #12
 800dae8:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800daea:	2300      	movs	r3, #0
 800daec:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800daee:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800daf0:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800daf2:	220c      	movs	r2, #12
 800daf4:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800daf6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800daf8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dafa:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dafc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dafe:	f005 f94b 	bl	8012d98 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800db02:	bd10      	pop	{r4, pc}
 800db04:	200058a4 	.word	0x200058a4
 800db08:	40004800 	.word	0x40004800

0800db0c <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800db0c:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800db0e:	4809      	ldr	r0, [pc, #36]	; (800db34 <MX_USART4_UART_Init+0x28>)
 800db10:	4b09      	ldr	r3, [pc, #36]	; (800db38 <MX_USART4_UART_Init+0x2c>)
 800db12:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db14:	23e1      	movs	r3, #225	; 0xe1
 800db16:	031b      	lsls	r3, r3, #12
 800db18:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800db1a:	2300      	movs	r3, #0
 800db1c:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800db1e:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800db20:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800db22:	220c      	movs	r2, #12
 800db24:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db26:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800db28:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db2a:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db2c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800db2e:	f005 f933 	bl	8012d98 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800db32:	bd10      	pop	{r4, pc}
 800db34:	20005a50 	.word	0x20005a50
 800db38:	40004c00 	.word	0x40004c00

0800db3c <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800db3c:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800db3e:	4809      	ldr	r0, [pc, #36]	; (800db64 <MX_USART6_UART_Init+0x28>)
 800db40:	4b09      	ldr	r3, [pc, #36]	; (800db68 <MX_USART6_UART_Init+0x2c>)
 800db42:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800db44:	23e1      	movs	r3, #225	; 0xe1
 800db46:	031b      	lsls	r3, r3, #12
 800db48:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800db4a:	2300      	movs	r3, #0
 800db4c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800db4e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800db50:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800db52:	220c      	movs	r2, #12
 800db54:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800db56:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800db58:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800db5a:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800db5c:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800db5e:	f005 f91b 	bl	8012d98 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800db62:	bd10      	pop	{r4, pc}
 800db64:	200059d8 	.word	0x200059d8
 800db68:	40011400 	.word	0x40011400

0800db6c <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800db6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db6e:	46ce      	mov	lr, r9
 800db70:	4647      	mov	r7, r8
 800db72:	b580      	push	{r7, lr}
 800db74:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;

  if(huart->Instance==USART2)
 800db76:	6803      	ldr	r3, [r0, #0]
 800db78:	4a4d      	ldr	r2, [pc, #308]	; (800dcb0 <HAL_UART_MspInit+0x144>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d00d      	beq.n	800db9a <HAL_UART_MspInit+0x2e>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800db7e:	4a4d      	ldr	r2, [pc, #308]	; (800dcb4 <HAL_UART_MspInit+0x148>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d036      	beq.n	800dbf2 <HAL_UART_MspInit+0x86>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }

  else if(huart->Instance==USART5)
 800db84:	4a4c      	ldr	r2, [pc, #304]	; (800dcb8 <HAL_UART_MspInit+0x14c>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d002      	beq.n	800db90 <HAL_UART_MspInit+0x24>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800db8a:	4a4c      	ldr	r2, [pc, #304]	; (800dcbc <HAL_UART_MspInit+0x150>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d060      	beq.n	800dc52 <HAL_UART_MspInit+0xe6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800db90:	b009      	add	sp, #36	; 0x24
 800db92:	bcc0      	pop	{r6, r7}
 800db94:	46b9      	mov	r9, r7
 800db96:	46b0      	mov	r8, r6
 800db98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART2_CLK_ENABLE();
 800db9a:	4a49      	ldr	r2, [pc, #292]	; (800dcc0 <HAL_UART_MspInit+0x154>)
 800db9c:	69d1      	ldr	r1, [r2, #28]
 800db9e:	2080      	movs	r0, #128	; 0x80
 800dba0:	0280      	lsls	r0, r0, #10
 800dba2:	4301      	orrs	r1, r0
 800dba4:	61d1      	str	r1, [r2, #28]
 800dba6:	69d3      	ldr	r3, [r2, #28]
 800dba8:	4003      	ands	r3, r0
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800dbae:	2304      	movs	r3, #4
 800dbb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbb2:	2702      	movs	r7, #2
 800dbb4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dbb6:	2401      	movs	r4, #1
 800dbb8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbba:	2603      	movs	r6, #3
 800dbbc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;	
 800dbbe:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800dbc0:	2590      	movs	r5, #144	; 0x90
 800dbc2:	05ed      	lsls	r5, r5, #23
 800dbc4:	a903      	add	r1, sp, #12
 800dbc6:	0028      	movs	r0, r5
 800dbc8:	f003 fc28 	bl	801141c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800dbcc:	2308      	movs	r3, #8
 800dbce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbd0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dbd2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbd4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART2_AF;
 800dbd6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800dbd8:	a903      	add	r1, sp, #12
 800dbda:	0028      	movs	r0, r5
 800dbdc:	f003 fc1e 	bl	801141c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	2101      	movs	r1, #1
 800dbe4:	201c      	movs	r0, #28
 800dbe6:	f002 fc9b 	bl	8010520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dbea:	201c      	movs	r0, #28
 800dbec:	f002 fcc8 	bl	8010580 <HAL_NVIC_EnableIRQ>
 800dbf0:	e7ce      	b.n	800db90 <HAL_UART_MspInit+0x24>
    __USART3_CLK_ENABLE();
 800dbf2:	4a33      	ldr	r2, [pc, #204]	; (800dcc0 <HAL_UART_MspInit+0x154>)
 800dbf4:	69d1      	ldr	r1, [r2, #28]
 800dbf6:	2080      	movs	r0, #128	; 0x80
 800dbf8:	02c0      	lsls	r0, r0, #11
 800dbfa:	4301      	orrs	r1, r0
 800dbfc:	61d1      	str	r1, [r2, #28]
 800dbfe:	69d3      	ldr	r3, [r2, #28]
 800dc00:	4003      	ands	r3, r0
 800dc02:	9301      	str	r3, [sp, #4]
 800dc04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800dc06:	2380      	movs	r3, #128	; 0x80
 800dc08:	00db      	lsls	r3, r3, #3
 800dc0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	4698      	mov	r8, r3
 800dc10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc12:	2701      	movs	r7, #1
 800dc14:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc16:	2603      	movs	r6, #3
 800dc18:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;	
 800dc1a:	2504      	movs	r5, #4
 800dc1c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800dc1e:	4c29      	ldr	r4, [pc, #164]	; (800dcc4 <HAL_UART_MspInit+0x158>)
 800dc20:	a903      	add	r1, sp, #12
 800dc22:	0020      	movs	r0, r4
 800dc24:	f003 fbfa 	bl	801141c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dc28:	2380      	movs	r3, #128	; 0x80
 800dc2a:	011b      	lsls	r3, r3, #4
 800dc2c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc2e:	4643      	mov	r3, r8
 800dc30:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc32:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc34:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = USART3_AF;
 800dc36:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800dc38:	a903      	add	r1, sp, #12
 800dc3a:	0020      	movs	r0, r4
 800dc3c:	f003 fbee 	bl	801141c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dc40:	2200      	movs	r2, #0
 800dc42:	2101      	movs	r1, #1
 800dc44:	201d      	movs	r0, #29
 800dc46:	f002 fc6b 	bl	8010520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dc4a:	201d      	movs	r0, #29
 800dc4c:	f002 fc98 	bl	8010580 <HAL_NVIC_EnableIRQ>
 800dc50:	e79e      	b.n	800db90 <HAL_UART_MspInit+0x24>
    __USART6_CLK_ENABLE();
 800dc52:	4b1b      	ldr	r3, [pc, #108]	; (800dcc0 <HAL_UART_MspInit+0x154>)
 800dc54:	699a      	ldr	r2, [r3, #24]
 800dc56:	2420      	movs	r4, #32
 800dc58:	4322      	orrs	r2, r4
 800dc5a:	619a      	str	r2, [r3, #24]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	4023      	ands	r3, r4
 800dc60:	9302      	str	r3, [sp, #8]
 800dc62:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800dc64:	2310      	movs	r3, #16
 800dc66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc68:	3b0e      	subs	r3, #14
 800dc6a:	4699      	mov	r9, r3
 800dc6c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	4698      	mov	r8, r3
 800dc72:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc74:	2703      	movs	r7, #3
 800dc76:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;	
 800dc78:	2605      	movs	r6, #5
 800dc7a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800dc7c:	2590      	movs	r5, #144	; 0x90
 800dc7e:	05ed      	lsls	r5, r5, #23
 800dc80:	a903      	add	r1, sp, #12
 800dc82:	0028      	movs	r0, r5
 800dc84:	f003 fbca 	bl	801141c <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800dc88:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc8a:	464b      	mov	r3, r9
 800dc8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc8e:	4643      	mov	r3, r8
 800dc90:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc92:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = USART6_AF;
 800dc94:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800dc96:	a903      	add	r1, sp, #12
 800dc98:	0028      	movs	r0, r5
 800dc9a:	f003 fbbf 	bl	801141c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dc9e:	2200      	movs	r2, #0
 800dca0:	2101      	movs	r1, #1
 800dca2:	201d      	movs	r0, #29
 800dca4:	f002 fc3c 	bl	8010520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dca8:	201d      	movs	r0, #29
 800dcaa:	f002 fc69 	bl	8010580 <HAL_NVIC_EnableIRQ>
}
 800dcae:	e76f      	b.n	800db90 <HAL_UART_MspInit+0x24>
 800dcb0:	40004400 	.word	0x40004400
 800dcb4:	40004800 	.word	0x40004800
 800dcb8:	40005000 	.word	0x40005000
 800dcbc:	40011400 	.word	0x40011400
 800dcc0:	40021000 	.word	0x40021000
 800dcc4:	48000400 	.word	0x48000400

0800dcc8 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800dcc8:	2802      	cmp	r0, #2
 800dcca:	d007      	beq.n	800dcdc <GetUart+0x14>
 800dccc:	2803      	cmp	r0, #3
 800dcce:	d007      	beq.n	800dce0 <GetUart+0x18>
 800dcd0:	2801      	cmp	r0, #1
 800dcd2:	d001      	beq.n	800dcd8 <GetUart+0x10>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800dcd4:	2000      	movs	r0, #0
	}		
}
 800dcd6:	4770      	bx	lr
	switch (port)
 800dcd8:	4802      	ldr	r0, [pc, #8]	; (800dce4 <GetUart+0x1c>)
 800dcda:	e7fc      	b.n	800dcd6 <GetUart+0xe>
			return P2uart;
 800dcdc:	4802      	ldr	r0, [pc, #8]	; (800dce8 <GetUart+0x20>)
 800dcde:	e7fa      	b.n	800dcd6 <GetUart+0xe>
			return P3uart;
 800dce0:	4802      	ldr	r0, [pc, #8]	; (800dcec <GetUart+0x24>)
 800dce2:	e7f8      	b.n	800dcd6 <GetUart+0xe>
 800dce4:	20005ac4 	.word	0x20005ac4
 800dce8:	200059d8 	.word	0x200059d8
 800dcec:	200058a4 	.word	0x200058a4

0800dcf0 <writePxMutex>:
{
 800dcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcf2:	46c6      	mov	lr, r8
 800dcf4:	b500      	push	{lr}
 800dcf6:	0006      	movs	r6, r0
 800dcf8:	000f      	movs	r7, r1
 800dcfa:	4690      	mov	r8, r2
 800dcfc:	001c      	movs	r4, r3
	if (GetUart(port) != NULL) {
 800dcfe:	f7ff ffe3 	bl	800dcc8 <GetUart>
 800dd02:	1e05      	subs	r5, r0, #0
 800dd04:	d01c      	beq.n	800dd40 <writePxMutex+0x50>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dd06:	00b3      	lsls	r3, r6, #2
 800dd08:	4a10      	ldr	r2, [pc, #64]	; (800dd4c <writePxMutex+0x5c>)
 800dd0a:	5898      	ldr	r0, [r3, r2]
 800dd0c:	0021      	movs	r1, r4
 800dd0e:	f000 f96b 	bl	800dfe8 <osSemaphoreWait>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d012      	beq.n	800dd3c <writePxMutex+0x4c>
	HAL_StatusTypeDef result = HAL_ERROR;
 800dd16:	2401      	movs	r4, #1
 800dd18:	e013      	b.n	800dd42 <writePxMutex+0x52>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800dd1a:	9b06      	ldr	r3, [sp, #24]
 800dd1c:	4642      	mov	r2, r8
 800dd1e:	0039      	movs	r1, r7
 800dd20:	0028      	movs	r0, r5
 800dd22:	f004 ff8f 	bl	8012c44 <HAL_UART_Transmit>
 800dd26:	0004      	movs	r4, r0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800dd28:	2c00      	cmp	r4, #0
 800dd2a:	d001      	beq.n	800dd30 <writePxMutex+0x40>
 800dd2c:	2c03      	cmp	r4, #3
 800dd2e:	d1f4      	bne.n	800dd1a <writePxMutex+0x2a>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800dd30:	00b6      	lsls	r6, r6, #2
 800dd32:	4b06      	ldr	r3, [pc, #24]	; (800dd4c <writePxMutex+0x5c>)
 800dd34:	58f0      	ldr	r0, [r6, r3]
 800dd36:	f000 f987 	bl	800e048 <osSemaphoreRelease>
 800dd3a:	e002      	b.n	800dd42 <writePxMutex+0x52>
	HAL_StatusTypeDef result = HAL_ERROR;
 800dd3c:	2401      	movs	r4, #1
 800dd3e:	e7f3      	b.n	800dd28 <writePxMutex+0x38>
 800dd40:	2401      	movs	r4, #1
}
 800dd42:	0020      	movs	r0, r4
 800dd44:	bc80      	pop	{r7}
 800dd46:	46b8      	mov	r8, r7
 800dd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd4a:	46c0      	nop			; (mov r8, r8)
 800dd4c:	20005818 	.word	0x20005818

0800dd50 <writePxITMutex>:
{
 800dd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd52:	b083      	sub	sp, #12
 800dd54:	0004      	movs	r4, r0
 800dd56:	9101      	str	r1, [sp, #4]
 800dd58:	0017      	movs	r7, r2
 800dd5a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800dd5c:	f7ff ffb4 	bl	800dcc8 <GetUart>
 800dd60:	1e06      	subs	r6, r0, #0
 800dd62:	d00f      	beq.n	800dd84 <writePxITMutex+0x34>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800dd64:	00a4      	lsls	r4, r4, #2
 800dd66:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <writePxITMutex+0x3c>)
 800dd68:	58e0      	ldr	r0, [r4, r3]
 800dd6a:	0029      	movs	r1, r5
 800dd6c:	f000 f93c 	bl	800dfe8 <osSemaphoreWait>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d001      	beq.n	800dd78 <writePxITMutex+0x28>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dd74:	2001      	movs	r0, #1
 800dd76:	e006      	b.n	800dd86 <writePxITMutex+0x36>
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800dd78:	003a      	movs	r2, r7
 800dd7a:	9901      	ldr	r1, [sp, #4]
 800dd7c:	0030      	movs	r0, r6
 800dd7e:	f004 fc24 	bl	80125ca <HAL_UART_Transmit_IT>
 800dd82:	e000      	b.n	800dd86 <writePxITMutex+0x36>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800dd84:	2001      	movs	r0, #1
}
 800dd86:	b003      	add	sp, #12
 800dd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd8a:	46c0      	nop			; (mov r8, r8)
 800dd8c:	20005818 	.word	0x20005818

0800dd90 <UpdateBaudrate>:
{
 800dd90:	b510      	push	{r4, lr}
 800dd92:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800dd94:	f7ff ff98 	bl	800dcc8 <GetUart>
	huart->Init.BaudRate = baudrate;
 800dd98:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800dd9a:	f004 fffd 	bl	8012d98 <HAL_UART_Init>
}
 800dd9e:	2000      	movs	r0, #0
 800dda0:	bd10      	pop	{r4, pc}
	...

0800dda4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800dda8:	d003      	beq.n	800ddb2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800ddaa:	2901      	cmp	r1, #1
 800ddac:	d002      	beq.n	800ddb4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800ddae:	2900      	cmp	r1, #0
 800ddb0:	d016      	beq.n	800dde0 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800ddb4:	f7fc fa00 	bl	800a1b8 <GetPort>
 800ddb8:	3801      	subs	r0, #1
 800ddba:	2180      	movs	r1, #128	; 0x80
 800ddbc:	0209      	lsls	r1, r1, #8
 800ddbe:	000d      	movs	r5, r1
 800ddc0:	4105      	asrs	r5, r0
 800ddc2:	4b12      	ldr	r3, [pc, #72]	; (800de0c <SwapUartPins+0x68>)
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	4811      	ldr	r0, [pc, #68]	; (800de10 <SwapUartPins+0x6c>)
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	5a1a      	ldrh	r2, [r3, r0]
 800ddce:	432a      	orrs	r2, r5
 800ddd0:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ddd2:	2308      	movs	r3, #8
 800ddd4:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800ddd6:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800ddd8:	0020      	movs	r0, r4
 800ddda:	f004 ffdd 	bl	8012d98 <HAL_UART_Init>
 800ddde:	e7e8      	b.n	800ddb2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800dde0:	f7fc f9ea 	bl	800a1b8 <GetPort>
 800dde4:	3801      	subs	r0, #1
 800dde6:	2180      	movs	r1, #128	; 0x80
 800dde8:	0209      	lsls	r1, r1, #8
 800ddea:	4101      	asrs	r1, r0
 800ddec:	4b07      	ldr	r3, [pc, #28]	; (800de0c <SwapUartPins+0x68>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	4807      	ldr	r0, [pc, #28]	; (800de10 <SwapUartPins+0x6c>)
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	5a1a      	ldrh	r2, [r3, r0]
 800ddf8:	438a      	bics	r2, r1
 800ddfa:	521a      	strh	r2, [r3, r0]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ddfc:	2308      	movs	r3, #8
 800ddfe:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800de00:	2300      	movs	r3, #0
 800de02:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800de04:	0020      	movs	r0, r4
 800de06:	f004 ffc7 	bl	8012d98 <HAL_UART_Init>
}
 800de0a:	e7d2      	b.n	800ddb2 <SwapUartPins+0xe>
 800de0c:	20000084 	.word	0x20000084
 800de10:	20005c48 	.word	0x20005c48

0800de14 <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800de14:	b570      	push	{r4, r5, r6, lr}
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800de16:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800de18:	2500      	movs	r5, #0
	for (uint8_t i = 1; i <= N; i++) {
 800de1a:	e005      	b.n	800de28 <ReadPortsDir+0x14>
			if (responseStatus != BOS_OK) {
				result = BOS_ERR_NoResponse;
			}
		} else {
			/* Check my own ports */
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800de1c:	3301      	adds	r3, #1
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b03      	cmp	r3, #3
 800de22:	d9fb      	bls.n	800de1c <ReadPortsDir+0x8>
	for (uint8_t i = 1; i <= N; i++) {
 800de24:	3401      	adds	r4, #1
 800de26:	b2e4      	uxtb	r4, r4
 800de28:	4b0c      	ldr	r3, [pc, #48]	; (800de5c <ReadPortsDir+0x48>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	42a3      	cmp	r3, r4
 800de2e:	d313      	bcc.n	800de58 <ReadPortsDir+0x44>
		if (i != myID) {
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <ReadPortsDir+0x4c>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	42a3      	cmp	r3, r4
 800de36:	d00d      	beq.n	800de54 <ReadPortsDir+0x40>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800de38:	2200      	movs	r2, #0
 800de3a:	2113      	movs	r1, #19
 800de3c:	0020      	movs	r0, r4
 800de3e:	f7f9 fff9 	bl	8007e34 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800de42:	2032      	movs	r0, #50	; 0x32
 800de44:	f7ff fdfe 	bl	800da44 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800de48:	4b06      	ldr	r3, [pc, #24]	; (800de64 <ReadPortsDir+0x50>)
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d0e9      	beq.n	800de24 <ReadPortsDir+0x10>
				result = BOS_ERR_NoResponse;
 800de50:	2502      	movs	r5, #2
 800de52:	e7e7      	b.n	800de24 <ReadPortsDir+0x10>
			for (uint8_t p = 1; p <= NumOfPorts; p++) {
 800de54:	2301      	movs	r3, #1
 800de56:	e7e3      	b.n	800de20 <ReadPortsDir+0xc>
			}
		}
	}

	return result;
}
 800de58:	0028      	movs	r0, r5
 800de5a:	bd70      	pop	{r4, r5, r6, pc}
 800de5c:	20000030 	.word	0x20000030
 800de60:	20000084 	.word	0x20000084
 800de64:	200008d0 	.word	0x200008d0

0800de68 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	0007      	movs	r7, r0
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800de6c:	2401      	movs	r4, #1
	uint16_t temp =0;
 800de6e:	2600      	movs	r6, #0
	for (int p = 1; p <= NumOfPorts; p++) {
 800de70:	e000      	b.n	800de74 <ReadPortsDirMSG+0xc>
 800de72:	3401      	adds	r4, #1
 800de74:	2c03      	cmp	r4, #3
 800de76:	dc0d      	bgt.n	800de94 <ReadPortsDirMSG+0x2c>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800de78:	b2e5      	uxtb	r5, r4
 800de7a:	0028      	movs	r0, r5
 800de7c:	f7ff ff24 	bl	800dcc8 <GetUart>
 800de80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800de82:	2380      	movs	r3, #128	; 0x80
 800de84:	021b      	lsls	r3, r3, #8
 800de86:	429a      	cmp	r2, r3
 800de88:	d1f3      	bne.n	800de72 <ReadPortsDirMSG+0xa>
			messageParams[temp++] = p;
 800de8a:	1c73      	adds	r3, r6, #1
 800de8c:	4a05      	ldr	r2, [pc, #20]	; (800dea4 <ReadPortsDirMSG+0x3c>)
 800de8e:	5595      	strb	r5, [r2, r6]
 800de90:	b29e      	uxth	r6, r3
 800de92:	e7ee      	b.n	800de72 <ReadPortsDirMSG+0xa>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800de94:	0032      	movs	r2, r6
 800de96:	2114      	movs	r1, #20
 800de98:	0038      	movs	r0, r7
 800de9a:	f7f9 ffcb 	bl	8007e34 <SendMessageToModule>
	return result;
}
 800de9e:	2000      	movs	r0, #0
 800dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea2:	46c0      	nop			; (mov r8, r8)
 800dea4:	20000808 	.word	0x20000808

0800dea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800dea8:	4816      	ldr	r0, [pc, #88]	; (800df04 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800deaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800deac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800deae:	e003      	b.n	800deb8 <LoopCopyDataInit>

0800deb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800deb0:	4b15      	ldr	r3, [pc, #84]	; (800df08 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800deb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800deb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800deb6:	3104      	adds	r1, #4

0800deb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800deb8:	4814      	ldr	r0, [pc, #80]	; (800df0c <LoopForever+0xc>)
  ldr r3, =_edata
 800deba:	4b15      	ldr	r3, [pc, #84]	; (800df10 <LoopForever+0x10>)
  adds r2, r0, r1
 800debc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800debe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800dec0:	d3f6      	bcc.n	800deb0 <CopyDataInit>
  ldr r2, =_sbss
 800dec2:	4a14      	ldr	r2, [pc, #80]	; (800df14 <LoopForever+0x14>)
  b LoopFillZerobss
 800dec4:	e002      	b.n	800decc <LoopFillZerobss>

0800dec6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800dec6:	2300      	movs	r3, #0
  str  r3, [r2]
 800dec8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800deca:	3204      	adds	r2, #4

0800decc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800decc:	4b12      	ldr	r3, [pc, #72]	; (800df18 <LoopForever+0x18>)
  cmp r2, r3
 800dece:	429a      	cmp	r2, r3
  bcc FillZerobss
 800ded0:	d3f9      	bcc.n	800dec6 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ded2:	4812      	ldr	r0, [pc, #72]	; (800df1c <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800ded4:	4912      	ldr	r1, [pc, #72]	; (800df20 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800ded6:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800ded8:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800deda:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800dedc:	d005      	beq.n	800deea <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800dede:	f000 f82b 	bl	800df38 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800dee2:	f005 f8d3 	bl	801308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800dee6:	f005 f8ae 	bl	8013046 <main>

0800deea <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800deea:	480e      	ldr	r0, [pc, #56]	; (800df24 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800deec:	490e      	ldr	r1, [pc, #56]	; (800df28 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800deee:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800def0:	480e      	ldr	r0, [pc, #56]	; (800df2c <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800def2:	490d      	ldr	r1, [pc, #52]	; (800df28 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800def4:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800def6:	480e      	ldr	r0, [pc, #56]	; (800df30 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800def8:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800defa:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800defc:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800defe:	4700      	bx	r0

0800df00 <LoopForever>:


LoopForever:
    b LoopForever
 800df00:	e7fe      	b.n	800df00 <LoopForever>
 800df02:	0000      	.short	0x0000
  ldr   r0, =_estack
 800df04:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800df08:	0801afe4 	.word	0x0801afe4
  ldr r0, =_sdata
 800df0c:	2000000c 	.word	0x2000000c
  ldr r3, =_edata
 800df10:	200002f4 	.word	0x200002f4
  ldr r2, =_sbss
 800df14:	200002f8 	.word	0x200002f8
  ldr r3, = _ebss
 800df18:	20005cc8 	.word	0x20005cc8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800df1c:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800df20:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800df24:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800df28:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800df2c:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800df30:	1fffd800 	.word	0x1fffd800

0800df34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800df34:	e7fe      	b.n	800df34 <ADC1_COMP_IRQHandler>
	...

0800df38 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800df38:	4b11      	ldr	r3, [pc, #68]	; (800df80 <SystemInit+0x48>)
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	2101      	movs	r1, #1
 800df3e:	430a      	orrs	r2, r1
 800df40:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800df42:	685a      	ldr	r2, [r3, #4]
 800df44:	480f      	ldr	r0, [pc, #60]	; (800df84 <SystemInit+0x4c>)
 800df46:	4002      	ands	r2, r0
 800df48:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	480e      	ldr	r0, [pc, #56]	; (800df88 <SystemInit+0x50>)
 800df4e:	4002      	ands	r2, r0
 800df50:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	480d      	ldr	r0, [pc, #52]	; (800df8c <SystemInit+0x54>)
 800df56:	4002      	ands	r2, r0
 800df58:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	480c      	ldr	r0, [pc, #48]	; (800df90 <SystemInit+0x58>)
 800df5e:	4002      	ands	r2, r0
 800df60:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800df62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df64:	200f      	movs	r0, #15
 800df66:	4382      	bics	r2, r0
 800df68:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800df6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df6c:	4809      	ldr	r0, [pc, #36]	; (800df94 <SystemInit+0x5c>)
 800df6e:	4002      	ands	r2, r0
 800df70:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800df72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df74:	438a      	bics	r2, r1
 800df76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800df78:	2200      	movs	r2, #0
 800df7a:	609a      	str	r2, [r3, #8]

}
 800df7c:	4770      	bx	lr
 800df7e:	46c0      	nop			; (mov r8, r8)
 800df80:	40021000 	.word	0x40021000
 800df84:	08ffb80c 	.word	0x08ffb80c
 800df88:	fef6ffff 	.word	0xfef6ffff
 800df8c:	fffbffff 	.word	0xfffbffff
 800df90:	ffc0ffff 	.word	0xffc0ffff
 800df94:	fff0feac 	.word	0xfff0feac

0800df98 <inHandlerMode>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df98:	f3ef 8005 	mrs	r0, IPSR


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
 800df9c:	1e43      	subs	r3, r0, #1
 800df9e:	4198      	sbcs	r0, r3
}
 800dfa0:	4770      	bx	lr

0800dfa2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dfa2:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800dfa4:	f000 ff0c 	bl	800edc0 <vTaskStartScheduler>
  
  return osOK;
}
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	bd10      	pop	{r4, pc}

0800dfac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dfac:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d100      	bne.n	800dfb4 <osDelay+0x8>
 800dfb2:	3001      	adds	r0, #1
 800dfb4:	f001 f832 	bl	800f01c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800dfb8:	2000      	movs	r0, #0
 800dfba:	bd10      	pop	{r4, pc}

0800dfbc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800dfc0:	2901      	cmp	r1, #1
 800dfc2:	d005      	beq.n	800dfd0 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	f000 fafd 	bl	800e5c4 <xQueueCreateCountingSemaphore>
 800dfca:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800dfcc:	0020      	movs	r0, r4
 800dfce:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	f000 fad6 	bl	800e584 <xQueueGenericCreate>
 800dfd8:	1e04      	subs	r4, r0, #0
 800dfda:	d0f7      	beq.n	800dfcc <osSemaphoreCreate+0x10>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	f000 faf9 	bl	800e5d8 <xQueueGenericSend>
    return sema;
 800dfe6:	e7f1      	b.n	800dfcc <osSemaphoreCreate+0x10>

0800dfe8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	0005      	movs	r5, r0
 800dfee:	000e      	movs	r6, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dff0:	2300      	movs	r3, #0
 800dff2:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d01e      	beq.n	800e036 <osSemaphoreWait+0x4e>
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800dff8:	f7ff ffce 	bl	800df98 <inHandlerMode>
 800dffc:	1e04      	subs	r4, r0, #0
 800dffe:	d00f      	beq.n	800e020 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e000:	aa01      	add	r2, sp, #4
 800e002:	2100      	movs	r1, #0
 800e004:	0028      	movs	r0, r5
 800e006:	f000 fc52 	bl	800e8ae <xQueueReceiveFromISR>
 800e00a:	2801      	cmp	r0, #1
 800e00c:	d115      	bne.n	800e03a <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800e00e:	9c01      	ldr	r4, [sp, #4]
 800e010:	2c00      	cmp	r4, #0
 800e012:	d00d      	beq.n	800e030 <osSemaphoreWait+0x48>
 800e014:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <osSemaphoreWait+0x5c>)
 800e016:	2280      	movs	r2, #128	; 0x80
 800e018:	0552      	lsls	r2, r2, #21
 800e01a:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e01c:	2400      	movs	r4, #0
 800e01e:	e007      	b.n	800e030 <osSemaphoreWait+0x48>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e020:	2300      	movs	r3, #0
 800e022:	0032      	movs	r2, r6
 800e024:	2100      	movs	r1, #0
 800e026:	0028      	movs	r0, r5
 800e028:	f000 fbb2 	bl	800e790 <xQueueGenericReceive>
 800e02c:	2801      	cmp	r0, #1
 800e02e:	d106      	bne.n	800e03e <osSemaphoreWait+0x56>
}
 800e030:	0020      	movs	r0, r4
 800e032:	b002      	add	sp, #8
 800e034:	bd70      	pop	{r4, r5, r6, pc}
    return osErrorParameter;
 800e036:	2480      	movs	r4, #128	; 0x80
 800e038:	e7fa      	b.n	800e030 <osSemaphoreWait+0x48>
      return osErrorOS;
 800e03a:	24ff      	movs	r4, #255	; 0xff
 800e03c:	e7f8      	b.n	800e030 <osSemaphoreWait+0x48>
    return osErrorOS;
 800e03e:	24ff      	movs	r4, #255	; 0xff
 800e040:	e7f6      	b.n	800e030 <osSemaphoreWait+0x48>
 800e042:	46c0      	nop			; (mov r8, r8)
 800e044:	e000ed04 	.word	0xe000ed04

0800e048 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e048:	b510      	push	{r4, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	0004      	movs	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e04e:	2300      	movs	r3, #0
 800e050:	9301      	str	r3, [sp, #4]
  
  
  if (inHandlerMode()) {
 800e052:	f7ff ffa1 	bl	800df98 <inHandlerMode>
 800e056:	2800      	cmp	r0, #0
 800e058:	d00e      	beq.n	800e078 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e05a:	a901      	add	r1, sp, #4
 800e05c:	0020      	movs	r0, r4
 800e05e:	f000 fb67 	bl	800e730 <xQueueGiveFromISR>
 800e062:	2801      	cmp	r0, #1
 800e064:	d115      	bne.n	800e092 <osSemaphoreRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d014      	beq.n	800e096 <osSemaphoreRelease+0x4e>
 800e06c:	4b0b      	ldr	r3, [pc, #44]	; (800e09c <osSemaphoreRelease+0x54>)
 800e06e:	2280      	movs	r2, #128	; 0x80
 800e070:	0552      	lsls	r2, r2, #21
 800e072:	601a      	str	r2, [r3, #0]
  osStatus result = osOK;
 800e074:	2000      	movs	r0, #0
 800e076:	e008      	b.n	800e08a <osSemaphoreRelease+0x42>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e078:	2300      	movs	r3, #0
 800e07a:	2200      	movs	r2, #0
 800e07c:	2100      	movs	r1, #0
 800e07e:	0020      	movs	r0, r4
 800e080:	f000 faaa 	bl	800e5d8 <xQueueGenericSend>
 800e084:	2801      	cmp	r0, #1
 800e086:	d002      	beq.n	800e08e <osSemaphoreRelease+0x46>
      result = osErrorOS;
 800e088:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e08a:	b002      	add	sp, #8
 800e08c:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 800e08e:	2000      	movs	r0, #0
 800e090:	e7fb      	b.n	800e08a <osSemaphoreRelease+0x42>
      return osErrorOS;
 800e092:	20ff      	movs	r0, #255	; 0xff
 800e094:	e7f9      	b.n	800e08a <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800e096:	2000      	movs	r0, #0
 800e098:	e7f7      	b.n	800e08a <osSemaphoreRelease+0x42>
 800e09a:	46c0      	nop			; (mov r8, r8)
 800e09c:	e000ed04 	.word	0xe000ed04

0800e0a0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e0a0:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e0a2:	f001 f985 	bl	800f3b0 <xTaskGetSchedulerState>
 800e0a6:	2801      	cmp	r0, #1
 800e0a8:	d100      	bne.n	800e0ac <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e0aa:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800e0ac:	f001 fdd8 	bl	800fc60 <xPortSysTickHandler>
}
 800e0b0:	e7fb      	b.n	800e0aa <osSystickHandler+0xa>

0800e0b2 <prvGetNumberOfParameters>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const int8_t * pcCommandString )
{
 800e0b2:	0003      	movs	r3, r0
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e0b4:	2100      	movs	r1, #0
int8_t cParameters = 0;
 800e0b6:	2000      	movs	r0, #0

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e0b8:	e005      	b.n	800e0c6 <prvGetNumberOfParameters+0x14>
	{
		if( ( *pcCommandString ) == ' ' )
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800e0ba:	2901      	cmp	r1, #1
 800e0bc:	d002      	beq.n	800e0c4 <prvGetNumberOfParameters+0x12>
			{
				cParameters++;
 800e0be:	3001      	adds	r0, #1
 800e0c0:	b240      	sxtb	r0, r0
				xLastCharacterWasSpace = pdTRUE;
 800e0c2:	2101      	movs	r1, #1
		else
		{
			xLastCharacterWasSpace = pdFALSE;
		}

		pcCommandString++;
 800e0c4:	3301      	adds	r3, #1
	while( *pcCommandString != 0x00 )
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	569a      	ldrsb	r2, [r3, r2]
 800e0ca:	2a00      	cmp	r2, #0
 800e0cc:	d003      	beq.n	800e0d6 <prvGetNumberOfParameters+0x24>
		if( ( *pcCommandString ) == ' ' )
 800e0ce:	2a20      	cmp	r2, #32
 800e0d0:	d0f3      	beq.n	800e0ba <prvGetNumberOfParameters+0x8>
			xLastCharacterWasSpace = pdFALSE;
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	e7f6      	b.n	800e0c4 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e0d6:	2901      	cmp	r1, #1
 800e0d8:	d000      	beq.n	800e0dc <prvGetNumberOfParameters+0x2a>
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
}
 800e0da:	4770      	bx	lr
		cParameters--;
 800e0dc:	3801      	subs	r0, #1
 800e0de:	b240      	sxtb	r0, r0
 800e0e0:	e7fb      	b.n	800e0da <prvGetNumberOfParameters+0x28>
	...

0800e0e4 <FreeRTOS_CLIRegisterCommand>:
{
 800e0e4:	b570      	push	{r4, r5, r6, lr}
 800e0e6:	0005      	movs	r5, r0
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e0e8:	2008      	movs	r0, #8
 800e0ea:	f001 fe27 	bl	800fd3c <pvPortMalloc>
 800e0ee:	1e04      	subs	r4, r0, #0
	if( pxNewListItem != NULL )
 800e0f0:	d00c      	beq.n	800e10c <FreeRTOS_CLIRegisterCommand+0x28>
		taskENTER_CRITICAL();
 800e0f2:	f001 fd75 	bl	800fbe0 <vPortEnterCritical>
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e0f6:	6025      	str	r5, [r4, #0]
			pxNewListItem->pxNext = NULL;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	6063      	str	r3, [r4, #4]
			pxLastCommandInList->pxNext = pxNewListItem;
 800e0fc:	4b04      	ldr	r3, [pc, #16]	; (800e110 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	6054      	str	r4, [r2, #4]
			pxLastCommandInList = pxNewListItem;
 800e102:	601c      	str	r4, [r3, #0]
		taskEXIT_CRITICAL();
 800e104:	f001 fd78 	bl	800fbf8 <vPortExitCritical>
		xReturn = pdPASS;
 800e108:	2001      	movs	r0, #1
}
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
portBASE_TYPE xReturn = pdFAIL;
 800e10c:	2000      	movs	r0, #0
	return xReturn;
 800e10e:	e7fc      	b.n	800e10a <FreeRTOS_CLIRegisterCommand+0x26>
 800e110:	2000010c 	.word	0x2000010c

0800e114 <FreeRTOS_CLIProcessCommand>:
{
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	46ce      	mov	lr, r9
 800e118:	4647      	mov	r7, r8
 800e11a:	b580      	push	{r7, lr}
 800e11c:	0006      	movs	r6, r0
 800e11e:	4688      	mov	r8, r1
 800e120:	4691      	mov	r9, r2
	if( pxCommand == NULL )
 800e122:	4b2c      	ldr	r3, [pc, #176]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d018      	beq.n	800e15c <FreeRTOS_CLIProcessCommand+0x48>
portBASE_TYPE xReturn = pdTRUE;
 800e12a:	2401      	movs	r4, #1
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e12c:	4b29      	ldr	r3, [pc, #164]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <FreeRTOS_CLIProcessCommand+0x24>
 800e134:	2c00      	cmp	r4, #0
 800e136:	d03d      	beq.n	800e1b4 <FreeRTOS_CLIProcessCommand+0xa0>
	else if( pxCommand != NULL )
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d044      	beq.n	800e1c6 <FreeRTOS_CLIProcessCommand+0xb2>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	0032      	movs	r2, r6
 800e142:	4649      	mov	r1, r9
 800e144:	4640      	mov	r0, r8
 800e146:	4798      	blx	r3
 800e148:	1e04      	subs	r4, r0, #0
		if( xReturn == pdFALSE )
 800e14a:	d102      	bne.n	800e152 <FreeRTOS_CLIProcessCommand+0x3e>
			pxCommand = NULL;
 800e14c:	4b21      	ldr	r3, [pc, #132]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e14e:	2200      	movs	r2, #0
 800e150:	601a      	str	r2, [r3, #0]
}
 800e152:	0020      	movs	r0, r4
 800e154:	bcc0      	pop	{r6, r7}
 800e156:	46b9      	mov	r9, r7
 800e158:	46b0      	mov	r8, r6
 800e15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e15c:	4b1d      	ldr	r3, [pc, #116]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e15e:	4a1e      	ldr	r2, [pc, #120]	; (800e1d8 <FreeRTOS_CLIProcessCommand+0xc4>)
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	e008      	b.n	800e176 <FreeRTOS_CLIProcessCommand+0x62>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e164:	0021      	movs	r1, r4
 800e166:	0030      	movs	r0, r6
 800e168:	f005 fddb 	bl	8013d22 <strncmp>
 800e16c:	1e04      	subs	r4, r0, #0
 800e16e:	d012      	beq.n	800e196 <FreeRTOS_CLIProcessCommand+0x82>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e170:	686a      	ldr	r2, [r5, #4]
 800e172:	4b18      	ldr	r3, [pc, #96]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	4b17      	ldr	r3, [pc, #92]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e178:	681d      	ldr	r5, [r3, #0]
 800e17a:	2d00      	cmp	r5, #0
 800e17c:	d018      	beq.n	800e1b0 <FreeRTOS_CLIProcessCommand+0x9c>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e17e:	682f      	ldr	r7, [r5, #0]
 800e180:	683c      	ldr	r4, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e182:	0020      	movs	r0, r4
 800e184:	f7f1 ffc8 	bl	8000118 <strlen>
 800e188:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e18a:	5633      	ldrsb	r3, [r6, r0]
 800e18c:	2b20      	cmp	r3, #32
 800e18e:	d0e9      	beq.n	800e164 <FreeRTOS_CLIProcessCommand+0x50>
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1ed      	bne.n	800e170 <FreeRTOS_CLIProcessCommand+0x5c>
 800e194:	e7e6      	b.n	800e164 <FreeRTOS_CLIProcessCommand+0x50>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e196:	250c      	movs	r5, #12
 800e198:	577d      	ldrsb	r5, [r7, r5]
 800e19a:	2d00      	cmp	r5, #0
 800e19c:	da01      	bge.n	800e1a2 <FreeRTOS_CLIProcessCommand+0x8e>
portBASE_TYPE xReturn = pdTRUE;
 800e19e:	2401      	movs	r4, #1
 800e1a0:	e7c4      	b.n	800e12c <FreeRTOS_CLIProcessCommand+0x18>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 800e1a2:	0030      	movs	r0, r6
 800e1a4:	f7ff ff85 	bl	800e0b2 <prvGetNumberOfParameters>
 800e1a8:	4285      	cmp	r5, r0
 800e1aa:	d1bf      	bne.n	800e12c <FreeRTOS_CLIProcessCommand+0x18>
portBASE_TYPE xReturn = pdTRUE;
 800e1ac:	3401      	adds	r4, #1
 800e1ae:	e7bd      	b.n	800e12c <FreeRTOS_CLIProcessCommand+0x18>
 800e1b0:	2401      	movs	r4, #1
 800e1b2:	e7bb      	b.n	800e12c <FreeRTOS_CLIProcessCommand+0x18>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e1b4:	464a      	mov	r2, r9
 800e1b6:	4909      	ldr	r1, [pc, #36]	; (800e1dc <FreeRTOS_CLIProcessCommand+0xc8>)
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	f005 fdc3 	bl	8013d44 <strncpy>
		pxCommand = NULL;
 800e1be:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <FreeRTOS_CLIProcessCommand+0xc0>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	e7c5      	b.n	800e152 <FreeRTOS_CLIProcessCommand+0x3e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e1c6:	464a      	mov	r2, r9
 800e1c8:	4905      	ldr	r1, [pc, #20]	; (800e1e0 <FreeRTOS_CLIProcessCommand+0xcc>)
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	f005 fdba 	bl	8013d44 <strncpy>
		xReturn = pdFALSE;
 800e1d0:	2400      	movs	r4, #0
	return xReturn;
 800e1d2:	e7be      	b.n	800e152 <FreeRTOS_CLIProcessCommand+0x3e>
 800e1d4:	20001634 	.word	0x20001634
 800e1d8:	20000110 	.word	0x20000110
 800e1dc:	0801a870 	.word	0x0801a870
 800e1e0:	0801a8c8 	.word	0x0801a8c8

0800e1e4 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e1e4:	4800      	ldr	r0, [pc, #0]	; (800e1e8 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e1e6:	4770      	bx	lr
 800e1e8:	200013cc 	.word	0x200013cc

0800e1ec <FreeRTOS_CLIGetParameter>:
{
 800e1ec:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e1f2:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e1f4:	e011      	b.n	800e21a <FreeRTOS_CLIGetParameter+0x2e>
			pcCommandString++;
 800e1f6:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	56c3      	ldrsb	r3, [r0, r3]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d003      	beq.n	800e208 <FreeRTOS_CLIGetParameter+0x1c>
 800e200:	2b20      	cmp	r3, #32
 800e202:	d1f8      	bne.n	800e1f6 <FreeRTOS_CLIGetParameter+0xa>
 800e204:	e000      	b.n	800e208 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800e206:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e208:	2300      	movs	r3, #0
 800e20a:	56c3      	ldrsb	r3, [r0, r3]
 800e20c:	2b20      	cmp	r3, #32
 800e20e:	d0fa      	beq.n	800e206 <FreeRTOS_CLIGetParameter+0x1a>
		if( *pcCommandString != 0x00 )
 800e210:	2b00      	cmp	r3, #0
 800e212:	d017      	beq.n	800e244 <FreeRTOS_CLIGetParameter+0x58>
			uxParametersFound++;
 800e214:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e216:	42a1      	cmp	r1, r4
 800e218:	d012      	beq.n	800e240 <FreeRTOS_CLIGetParameter+0x54>
	while( uxParametersFound < uxWantedParameter )
 800e21a:	428c      	cmp	r4, r1
 800e21c:	d3ec      	bcc.n	800e1f8 <FreeRTOS_CLIGetParameter+0xc>
const int8_t *pcReturn = NULL;
 800e21e:	2000      	movs	r0, #0
}
 800e220:	bd10      	pop	{r4, pc}
					( *pxParameterStringLength )++;
 800e222:	6813      	ldr	r3, [r2, #0]
 800e224:	3301      	adds	r3, #1
 800e226:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e228:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e22a:	2300      	movs	r3, #0
 800e22c:	56cb      	ldrsb	r3, [r1, r3]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <FreeRTOS_CLIGetParameter+0x4a>
 800e232:	2b20      	cmp	r3, #32
 800e234:	d1f5      	bne.n	800e222 <FreeRTOS_CLIGetParameter+0x36>
				if( *pxParameterStringLength == 0 )
 800e236:	6813      	ldr	r3, [r2, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1f1      	bne.n	800e220 <FreeRTOS_CLIGetParameter+0x34>
					pcReturn = NULL;
 800e23c:	2000      	movs	r0, #0
	return pcReturn;
 800e23e:	e7ef      	b.n	800e220 <FreeRTOS_CLIGetParameter+0x34>
 800e240:	0001      	movs	r1, r0
 800e242:	e7f2      	b.n	800e22a <FreeRTOS_CLIGetParameter+0x3e>
const int8_t *pcReturn = NULL;
 800e244:	2000      	movs	r0, #0
 800e246:	e7eb      	b.n	800e220 <FreeRTOS_CLIGetParameter+0x34>

0800e248 <prvHelpCommand>:
{
 800e248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e24a:	b083      	sub	sp, #12
 800e24c:	0007      	movs	r7, r0
 800e24e:	000e      	movs	r6, r1
 800e250:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e256:	aa01      	add	r2, sp, #4
 800e258:	2101      	movs	r1, #1
 800e25a:	f7ff ffc7 	bl	800e1ec <FreeRTOS_CLIGetParameter>
 800e25e:	1e04      	subs	r4, r0, #0
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e260:	d021      	beq.n	800e2a6 <prvHelpCommand+0x5e>
 800e262:	2206      	movs	r2, #6
 800e264:	4930      	ldr	r1, [pc, #192]	; (800e328 <prvHelpCommand+0xe0>)
 800e266:	f005 fd5c 	bl	8013d22 <strncmp>
 800e26a:	1e05      	subs	r5, r0, #0
 800e26c:	d11b      	bne.n	800e2a6 <prvHelpCommand+0x5e>
		if( str == NumOfParamsHelpStrings )
 800e26e:	4b2f      	ldr	r3, [pc, #188]	; (800e32c <prvHelpCommand+0xe4>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b07      	cmp	r3, #7
 800e274:	d00f      	beq.n	800e296 <prvHelpCommand+0x4e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e276:	4a2d      	ldr	r2, [pc, #180]	; (800e32c <prvHelpCommand+0xe4>)
 800e278:	7813      	ldrb	r3, [r2, #0]
 800e27a:	1c5c      	adds	r4, r3, #1
 800e27c:	b2e4      	uxtb	r4, r4
 800e27e:	7014      	strb	r4, [r2, #0]
 800e280:	009b      	lsls	r3, r3, #2
 800e282:	4a2b      	ldr	r2, [pc, #172]	; (800e330 <prvHelpCommand+0xe8>)
 800e284:	5899      	ldr	r1, [r3, r2]
 800e286:	0032      	movs	r2, r6
 800e288:	0038      	movs	r0, r7
 800e28a:	f005 fd5b 	bl	8013d44 <strncpy>
		if( str == NumOfParamsHelpStrings )
 800e28e:	2c07      	cmp	r4, #7
 800e290:	d005      	beq.n	800e29e <prvHelpCommand+0x56>
			xReturn = pdTRUE;
 800e292:	2501      	movs	r5, #1
 800e294:	e009      	b.n	800e2aa <prvHelpCommand+0x62>
			str = 0;
 800e296:	4b25      	ldr	r3, [pc, #148]	; (800e32c <prvHelpCommand+0xe4>)
 800e298:	2200      	movs	r2, #0
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	e7eb      	b.n	800e276 <prvHelpCommand+0x2e>
			xReturn = pdFALSE; str = 0;
 800e29e:	4b23      	ldr	r3, [pc, #140]	; (800e32c <prvHelpCommand+0xe4>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	e001      	b.n	800e2aa <prvHelpCommand+0x62>
	else if (pcParameterString1 == NULL)
 800e2a6:	2c00      	cmp	r4, #0
 800e2a8:	d002      	beq.n	800e2b0 <prvHelpCommand+0x68>
}
 800e2aa:	0028      	movs	r0, r5
 800e2ac:	b003      	add	sp, #12
 800e2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if( pxCommand == NULL )
 800e2b0:	4b20      	ldr	r3, [pc, #128]	; (800e334 <prvHelpCommand+0xec>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d024      	beq.n	800e302 <prvHelpCommand+0xba>
		if (counter > numOfBosCommands) {
 800e2b8:	4b1f      	ldr	r3, [pc, #124]	; (800e338 <prvHelpCommand+0xf0>)
 800e2ba:	781c      	ldrb	r4, [r3, #0]
 800e2bc:	4b1f      	ldr	r3, [pc, #124]	; (800e33c <prvHelpCommand+0xf4>)
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	429c      	cmp	r4, r3
 800e2c2:	d925      	bls.n	800e310 <prvHelpCommand+0xc8>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e2c4:	4b1b      	ldr	r3, [pc, #108]	; (800e334 <prvHelpCommand+0xec>)
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6859      	ldr	r1, [r3, #4]
 800e2cc:	0032      	movs	r2, r6
 800e2ce:	3a08      	subs	r2, #8
 800e2d0:	0038      	movs	r0, r7
 800e2d2:	3008      	adds	r0, #8
 800e2d4:	f005 fd36 	bl	8013d44 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e2d8:	1c78      	adds	r0, r7, #1
 800e2da:	4919      	ldr	r1, [pc, #100]	; (800e340 <prvHelpCommand+0xf8>)
 800e2dc:	f005 fd19 	bl	8013d12 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e2e0:	2328      	movs	r3, #40	; 0x28
 800e2e2:	703b      	strb	r3, [r7, #0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	71bb      	strb	r3, [r7, #6]
 800e2e8:	3b09      	subs	r3, #9
 800e2ea:	71fb      	strb	r3, [r7, #7]
		pxCommand = pxCommand->pxNext;
 800e2ec:	4a11      	ldr	r2, [pc, #68]	; (800e334 <prvHelpCommand+0xec>)
 800e2ee:	6813      	ldr	r3, [r2, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	6013      	str	r3, [r2, #0]
		counter++;
 800e2f4:	3401      	adds	r4, #1
 800e2f6:	4a10      	ldr	r2, [pc, #64]	; (800e338 <prvHelpCommand+0xf0>)
 800e2f8:	7014      	strb	r4, [r2, #0]
		if( pxCommand == NULL )
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d011      	beq.n	800e322 <prvHelpCommand+0xda>
			xReturn = pdTRUE;
 800e2fe:	2501      	movs	r5, #1
	return xReturn;
 800e300:	e7d3      	b.n	800e2aa <prvHelpCommand+0x62>
			pxCommand = &xRegisteredCommands;
 800e302:	4b0c      	ldr	r3, [pc, #48]	; (800e334 <prvHelpCommand+0xec>)
 800e304:	4a0f      	ldr	r2, [pc, #60]	; (800e344 <prvHelpCommand+0xfc>)
 800e306:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e308:	4b0b      	ldr	r3, [pc, #44]	; (800e338 <prvHelpCommand+0xf0>)
 800e30a:	2201      	movs	r2, #1
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	e7d3      	b.n	800e2b8 <prvHelpCommand+0x70>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e310:	4b08      	ldr	r3, [pc, #32]	; (800e334 <prvHelpCommand+0xec>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6859      	ldr	r1, [r3, #4]
 800e318:	0032      	movs	r2, r6
 800e31a:	0038      	movs	r0, r7
 800e31c:	f005 fd12 	bl	8013d44 <strncpy>
 800e320:	e7e4      	b.n	800e2ec <prvHelpCommand+0xa4>
			xReturn = pdFALSE;
 800e322:	2500      	movs	r5, #0
 800e324:	e7c1      	b.n	800e2aa <prvHelpCommand+0x62>
 800e326:	46c0      	nop			; (mov r8, r8)
 800e328:	08018e4c 	.word	0x08018e4c
 800e32c:	2000163c 	.word	0x2000163c
 800e330:	2000008c 	.word	0x2000008c
 800e334:	20001638 	.word	0x20001638
 800e338:	20001630 	.word	0x20001630
 800e33c:	20005710 	.word	0x20005710
 800e340:	0801829c 	.word	0x0801829c
 800e344:	20000110 	.word	0x20000110

0800e348 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e348:	0003      	movs	r3, r0
 800e34a:	3308      	adds	r3, #8
 800e34c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e34e:	2201      	movs	r2, #1
 800e350:	4252      	negs	r2, r2
 800e352:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e354:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e356:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e358:	2300      	movs	r3, #0
 800e35a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e35c:	4770      	bx	lr

0800e35e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e35e:	2300      	movs	r3, #0
 800e360:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e362:	4770      	bx	lr

0800e364 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e364:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e366:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e368:	689a      	ldr	r2, [r3, #8]
 800e36a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e36c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e36e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e370:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e372:	6803      	ldr	r3, [r0, #0]
 800e374:	3301      	adds	r3, #1
 800e376:	6003      	str	r3, [r0, #0]
}
 800e378:	4770      	bx	lr

0800e37a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e37a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e37c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e37e:	1c63      	adds	r3, r4, #1
 800e380:	d010      	beq.n	800e3a4 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e382:	0003      	movs	r3, r0
 800e384:	3308      	adds	r3, #8
 800e386:	001a      	movs	r2, r3
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	681d      	ldr	r5, [r3, #0]
 800e38c:	42a5      	cmp	r5, r4
 800e38e:	d9fa      	bls.n	800e386 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e390:	6853      	ldr	r3, [r2, #4]
 800e392:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e394:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e396:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e398:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e39a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e39c:	6803      	ldr	r3, [r0, #0]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	6003      	str	r3, [r0, #0]
}
 800e3a2:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800e3a4:	6902      	ldr	r2, [r0, #16]
 800e3a6:	e7f3      	b.n	800e390 <vListInsert+0x16>

0800e3a8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e3a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e3aa:	6841      	ldr	r1, [r0, #4]
 800e3ac:	6882      	ldr	r2, [r0, #8]
 800e3ae:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e3b0:	6841      	ldr	r1, [r0, #4]
 800e3b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	4282      	cmp	r2, r0
 800e3b8:	d005      	beq.n	800e3c6 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	1e50      	subs	r0, r2, #1
 800e3c2:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e3c4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e3c6:	6882      	ldr	r2, [r0, #8]
 800e3c8:	605a      	str	r2, [r3, #4]
 800e3ca:	e7f6      	b.n	800e3ba <uxListRemove+0x12>

0800e3cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e3d0:	f001 fc06 	bl	800fbe0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e3d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e3d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d004      	beq.n	800e3e6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800e3dc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800e3de:	f001 fc0b 	bl	800fbf8 <vPortExitCritical>

	return xReturn;
}
 800e3e2:	0020      	movs	r0, r4
 800e3e4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800e3e6:	2401      	movs	r4, #1
 800e3e8:	e7f9      	b.n	800e3de <prvIsQueueFull+0x12>

0800e3ea <prvIsQueueEmpty>:
{
 800e3ea:	b510      	push	{r4, lr}
 800e3ec:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e3ee:	f001 fbf7 	bl	800fbe0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e3f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d104      	bne.n	800e402 <prvIsQueueEmpty+0x18>
			xReturn = pdTRUE;
 800e3f8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800e3fa:	f001 fbfd 	bl	800fbf8 <vPortExitCritical>
}
 800e3fe:	0020      	movs	r0, r4
 800e400:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800e402:	2400      	movs	r4, #0
 800e404:	e7f9      	b.n	800e3fa <prvIsQueueEmpty+0x10>

0800e406 <prvCopyDataToQueue>:
{
 800e406:	b570      	push	{r4, r5, r6, lr}
 800e408:	0004      	movs	r4, r0
 800e40a:	0015      	movs	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e40c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e40e:	2a00      	cmp	r2, #0
 800e410:	d10d      	bne.n	800e42e <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e412:	6803      	ldr	r3, [r0, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d004      	beq.n	800e422 <prvCopyDataToQueue+0x1c>
BaseType_t xReturn = pdFALSE;
 800e418:	2000      	movs	r0, #0
	++( pxQueue->uxMessagesWaiting );
 800e41a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e41c:	3301      	adds	r3, #1
 800e41e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800e420:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e422:	6840      	ldr	r0, [r0, #4]
 800e424:	f001 f814 	bl	800f450 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	6063      	str	r3, [r4, #4]
 800e42c:	e7f5      	b.n	800e41a <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e42e:	2d00      	cmp	r5, #0
 800e430:	d10e      	bne.n	800e450 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e432:	6880      	ldr	r0, [r0, #8]
 800e434:	f004 fe70 	bl	8013118 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e438:	68a3      	ldr	r3, [r4, #8]
 800e43a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e43c:	4694      	mov	ip, r2
 800e43e:	4463      	add	r3, ip
 800e440:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e442:	6862      	ldr	r2, [r4, #4]
 800e444:	4293      	cmp	r3, r2
 800e446:	d31e      	bcc.n	800e486 <prvCopyDataToQueue+0x80>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e44c:	0028      	movs	r0, r5
 800e44e:	e7e4      	b.n	800e41a <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e450:	68c0      	ldr	r0, [r0, #12]
 800e452:	f004 fe61 	bl	8013118 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e458:	425a      	negs	r2, r3
 800e45a:	68e1      	ldr	r1, [r4, #12]
 800e45c:	1acb      	subs	r3, r1, r3
 800e45e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e460:	6821      	ldr	r1, [r4, #0]
 800e462:	428b      	cmp	r3, r1
 800e464:	d203      	bcs.n	800e46e <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e466:	6863      	ldr	r3, [r4, #4]
 800e468:	469c      	mov	ip, r3
 800e46a:	4462      	add	r2, ip
 800e46c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e46e:	2d02      	cmp	r5, #2
 800e470:	d001      	beq.n	800e476 <prvCopyDataToQueue+0x70>
BaseType_t xReturn = pdFALSE;
 800e472:	2000      	movs	r0, #0
 800e474:	e7d1      	b.n	800e41a <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d006      	beq.n	800e48a <prvCopyDataToQueue+0x84>
				--( pxQueue->uxMessagesWaiting );
 800e47c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e47e:	3b01      	subs	r3, #1
 800e480:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
 800e482:	2000      	movs	r0, #0
 800e484:	e7c9      	b.n	800e41a <prvCopyDataToQueue+0x14>
 800e486:	0028      	movs	r0, r5
 800e488:	e7c7      	b.n	800e41a <prvCopyDataToQueue+0x14>
 800e48a:	2000      	movs	r0, #0
 800e48c:	e7c5      	b.n	800e41a <prvCopyDataToQueue+0x14>

0800e48e <prvCopyDataFromQueue>:
{
 800e48e:	b510      	push	{r4, lr}
 800e490:	0003      	movs	r3, r0
 800e492:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e496:	2a00      	cmp	r2, #0
 800e498:	d00a      	beq.n	800e4b0 <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e49a:	68d9      	ldr	r1, [r3, #12]
 800e49c:	1889      	adds	r1, r1, r2
 800e49e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e4a0:	685c      	ldr	r4, [r3, #4]
 800e4a2:	42a1      	cmp	r1, r4
 800e4a4:	d301      	bcc.n	800e4aa <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e4a6:	6819      	ldr	r1, [r3, #0]
 800e4a8:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e4aa:	68d9      	ldr	r1, [r3, #12]
 800e4ac:	f004 fe34 	bl	8013118 <memcpy>
}
 800e4b0:	bd10      	pop	{r4, pc}

0800e4b2 <prvUnlockQueue>:
{
 800e4b2:	b510      	push	{r4, lr}
 800e4b4:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
 800e4b6:	f001 fb93 	bl	800fbe0 <vPortEnterCritical>
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e4ba:	e004      	b.n	800e4c6 <prvUnlockQueue+0x14>
						vTaskMissedYield();
 800e4bc:	f000 ff72 	bl	800f3a4 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e4c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e4c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	dd09      	ble.n	800e4e0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d006      	beq.n	800e4e0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4d2:	0020      	movs	r0, r4
 800e4d4:	3024      	adds	r0, #36	; 0x24
 800e4d6:	f000 feef 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	d0f0      	beq.n	800e4c0 <prvUnlockQueue+0xe>
 800e4de:	e7ed      	b.n	800e4bc <prvUnlockQueue+0xa>
		pxQueue->xTxLock = queueUNLOCKED;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	425b      	negs	r3, r3
 800e4e4:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
 800e4e6:	f001 fb87 	bl	800fbf8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e4ea:	f001 fb79 	bl	800fbe0 <vPortEnterCritical>
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e4ee:	e004      	b.n	800e4fa <prvUnlockQueue+0x48>
					vTaskMissedYield();
 800e4f0:	f000 ff58 	bl	800f3a4 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e4f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e4fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dd09      	ble.n	800e514 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d006      	beq.n	800e514 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e506:	0020      	movs	r0, r4
 800e508:	3010      	adds	r0, #16
 800e50a:	f000 fed5 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0f0      	beq.n	800e4f4 <prvUnlockQueue+0x42>
 800e512:	e7ed      	b.n	800e4f0 <prvUnlockQueue+0x3e>
		pxQueue->xRxLock = queueUNLOCKED;
 800e514:	2301      	movs	r3, #1
 800e516:	425b      	negs	r3, r3
 800e518:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800e51a:	f001 fb6d 	bl	800fbf8 <vPortExitCritical>
}
 800e51e:	bd10      	pop	{r4, pc}

0800e520 <xQueueGenericReset>:
{
 800e520:	b570      	push	{r4, r5, r6, lr}
 800e522:	0004      	movs	r4, r0
 800e524:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800e526:	f001 fb5b 	bl	800fbe0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e52a:	6822      	ldr	r2, [r4, #0]
 800e52c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e52e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e530:	0001      	movs	r1, r0
 800e532:	4359      	muls	r1, r3
 800e534:	1851      	adds	r1, r2, r1
 800e536:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e538:	2100      	movs	r1, #0
 800e53a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e53c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e53e:	3b01      	subs	r3, #1
 800e540:	4343      	muls	r3, r0
 800e542:	18d3      	adds	r3, r2, r3
 800e544:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e546:	2301      	movs	r3, #1
 800e548:	425b      	negs	r3, r3
 800e54a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e54c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e54e:	2d00      	cmp	r5, #0
 800e550:	d10f      	bne.n	800e572 <xQueueGenericReset+0x52>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e552:	6923      	ldr	r3, [r4, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d103      	bne.n	800e560 <xQueueGenericReset+0x40>
	taskEXIT_CRITICAL();
 800e558:	f001 fb4e 	bl	800fbf8 <vPortExitCritical>
}
 800e55c:	2001      	movs	r0, #1
 800e55e:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e560:	0020      	movs	r0, r4
 800e562:	3010      	adds	r0, #16
 800e564:	f000 fea8 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e568:	2801      	cmp	r0, #1
 800e56a:	d1f5      	bne.n	800e558 <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800e56c:	f001 fb2c 	bl	800fbc8 <vPortYield>
 800e570:	e7f2      	b.n	800e558 <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e572:	0020      	movs	r0, r4
 800e574:	3010      	adds	r0, #16
 800e576:	f7ff fee7 	bl	800e348 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e57a:	0020      	movs	r0, r4
 800e57c:	3024      	adds	r0, #36	; 0x24
 800e57e:	f7ff fee3 	bl	800e348 <vListInitialise>
 800e582:	e7e9      	b.n	800e558 <xQueueGenericReset+0x38>

0800e584 <xQueueGenericCreate>:
{
 800e584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e586:	0006      	movs	r6, r0
 800e588:	000d      	movs	r5, r1
 800e58a:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e58c:	2900      	cmp	r1, #0
 800e58e:	d013      	beq.n	800e5b8 <xQueueGenericCreate+0x34>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e590:	4348      	muls	r0, r1
 800e592:	3001      	adds	r0, #1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e594:	3054      	adds	r0, #84	; 0x54
 800e596:	f001 fbd1 	bl	800fd3c <pvPortMalloc>
 800e59a:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e59c:	d00a      	beq.n	800e5b4 <xQueueGenericCreate+0x30>
		if( uxItemSize == ( UBaseType_t ) 0 )
 800e59e:	2d00      	cmp	r5, #0
 800e5a0:	d10c      	bne.n	800e5bc <xQueueGenericCreate+0x38>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5a2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e5a4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e5a6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	0020      	movs	r0, r4
 800e5ac:	f7ff ffb8 	bl	800e520 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e5b0:	2350      	movs	r3, #80	; 0x50
 800e5b2:	54e7      	strb	r7, [r4, r3]
}
 800e5b4:	0020      	movs	r0, r4
 800e5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xQueueSizeInBytes = ( size_t ) 0;
 800e5b8:	0008      	movs	r0, r1
 800e5ba:	e7eb      	b.n	800e594 <xQueueGenericCreate+0x10>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e5bc:	0003      	movs	r3, r0
 800e5be:	3354      	adds	r3, #84	; 0x54
 800e5c0:	6003      	str	r3, [r0, #0]
 800e5c2:	e7ef      	b.n	800e5a4 <xQueueGenericCreate+0x20>

0800e5c4 <xQueueCreateCountingSemaphore>:
	{
 800e5c4:	b510      	push	{r4, lr}
 800e5c6:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e5c8:	2202      	movs	r2, #2
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	f7ff ffda 	bl	800e584 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d000      	beq.n	800e5d6 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e5d4:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e5d6:	bd10      	pop	{r4, pc}

0800e5d8 <xQueueGenericSend>:
{
 800e5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	0004      	movs	r4, r0
 800e5de:	000d      	movs	r5, r1
 800e5e0:	9201      	str	r2, [sp, #4]
 800e5e2:	001e      	movs	r6, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e5e4:	2700      	movs	r7, #0
 800e5e6:	e02e      	b.n	800e646 <xQueueGenericSend+0x6e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5e8:	0032      	movs	r2, r6
 800e5ea:	0029      	movs	r1, r5
 800e5ec:	0020      	movs	r0, r4
 800e5ee:	f7ff ff0a 	bl	800e406 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d106      	bne.n	800e606 <xQueueGenericSend+0x2e>
					else if( xYieldRequired != pdFALSE )
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d10d      	bne.n	800e618 <xQueueGenericSend+0x40>
				taskEXIT_CRITICAL();
 800e5fc:	f001 fafc 	bl	800fbf8 <vPortExitCritical>
				return pdPASS;
 800e600:	2001      	movs	r0, #1
}
 800e602:	b005      	add	sp, #20
 800e604:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e606:	0020      	movs	r0, r4
 800e608:	3024      	adds	r0, #36	; 0x24
 800e60a:	f000 fe55 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e60e:	2801      	cmp	r0, #1
 800e610:	d1f4      	bne.n	800e5fc <xQueueGenericSend+0x24>
							queueYIELD_IF_USING_PREEMPTION();
 800e612:	f001 fad9 	bl	800fbc8 <vPortYield>
 800e616:	e7f1      	b.n	800e5fc <xQueueGenericSend+0x24>
						queueYIELD_IF_USING_PREEMPTION();
 800e618:	f001 fad6 	bl	800fbc8 <vPortYield>
 800e61c:	e7ee      	b.n	800e5fc <xQueueGenericSend+0x24>
					taskEXIT_CRITICAL();
 800e61e:	f001 faeb 	bl	800fbf8 <vPortExitCritical>
					return errQUEUE_FULL;
 800e622:	2000      	movs	r0, #0
 800e624:	e7ed      	b.n	800e602 <xQueueGenericSend+0x2a>
					vTaskSetTimeOutState( &xTimeOut );
 800e626:	a802      	add	r0, sp, #8
 800e628:	f000 fe84 	bl	800f334 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e62c:	3701      	adds	r7, #1
 800e62e:	e017      	b.n	800e660 <xQueueGenericSend+0x88>
		prvLockQueue( pxQueue );
 800e630:	2300      	movs	r3, #0
 800e632:	6463      	str	r3, [r4, #68]	; 0x44
 800e634:	e01d      	b.n	800e672 <xQueueGenericSend+0x9a>
 800e636:	2300      	movs	r3, #0
 800e638:	64a3      	str	r3, [r4, #72]	; 0x48
 800e63a:	e01d      	b.n	800e678 <xQueueGenericSend+0xa0>
				prvUnlockQueue( pxQueue );
 800e63c:	0020      	movs	r0, r4
 800e63e:	f7ff ff38 	bl	800e4b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e642:	f000 fc7f 	bl	800ef44 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e646:	f001 facb 	bl	800fbe0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e64a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e64c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e64e:	429a      	cmp	r2, r3
 800e650:	d3ca      	bcc.n	800e5e8 <xQueueGenericSend+0x10>
 800e652:	2e02      	cmp	r6, #2
 800e654:	d0c8      	beq.n	800e5e8 <xQueueGenericSend+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e656:	9b01      	ldr	r3, [sp, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0e0      	beq.n	800e61e <xQueueGenericSend+0x46>
				else if( xEntryTimeSet == pdFALSE )
 800e65c:	2f00      	cmp	r7, #0
 800e65e:	d0e2      	beq.n	800e626 <xQueueGenericSend+0x4e>
		taskEXIT_CRITICAL();
 800e660:	f001 faca 	bl	800fbf8 <vPortExitCritical>
		vTaskSuspendAll();
 800e664:	f000 fbd6 	bl	800ee14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e668:	f001 faba 	bl	800fbe0 <vPortEnterCritical>
 800e66c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e66e:	1c53      	adds	r3, r2, #1
 800e670:	d0de      	beq.n	800e630 <xQueueGenericSend+0x58>
 800e672:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e674:	1c53      	adds	r3, r2, #1
 800e676:	d0de      	beq.n	800e636 <xQueueGenericSend+0x5e>
 800e678:	f001 fabe 	bl	800fbf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e67c:	a901      	add	r1, sp, #4
 800e67e:	a802      	add	r0, sp, #8
 800e680:	f000 fe64 	bl	800f34c <xTaskCheckForTimeOut>
 800e684:	2800      	cmp	r0, #0
 800e686:	d113      	bne.n	800e6b0 <xQueueGenericSend+0xd8>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e688:	0020      	movs	r0, r4
 800e68a:	f7ff fe9f 	bl	800e3cc <prvIsQueueFull>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0d4      	beq.n	800e63c <xQueueGenericSend+0x64>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e692:	0020      	movs	r0, r4
 800e694:	3010      	adds	r0, #16
 800e696:	9901      	ldr	r1, [sp, #4]
 800e698:	f000 fdd8 	bl	800f24c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e69c:	0020      	movs	r0, r4
 800e69e:	f7ff ff08 	bl	800e4b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6a2:	f000 fc4f 	bl	800ef44 <xTaskResumeAll>
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d1cd      	bne.n	800e646 <xQueueGenericSend+0x6e>
					portYIELD_WITHIN_API();
 800e6aa:	f001 fa8d 	bl	800fbc8 <vPortYield>
 800e6ae:	e7ca      	b.n	800e646 <xQueueGenericSend+0x6e>
			prvUnlockQueue( pxQueue );
 800e6b0:	0020      	movs	r0, r4
 800e6b2:	f7ff fefe 	bl	800e4b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6b6:	f000 fc45 	bl	800ef44 <xTaskResumeAll>
			return errQUEUE_FULL;
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	e7a1      	b.n	800e602 <xQueueGenericSend+0x2a>

0800e6be <xQueueGenericSendFromISR>:
{
 800e6be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c0:	b083      	sub	sp, #12
 800e6c2:	0004      	movs	r4, r0
 800e6c4:	000e      	movs	r6, r1
 800e6c6:	9201      	str	r2, [sp, #4]
 800e6c8:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6ca:	f001 fa9f 	bl	800fc0c <ulSetInterruptMaskFromISR>
 800e6ce:	0007      	movs	r7, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d308      	bcc.n	800e6ea <xQueueGenericSendFromISR+0x2c>
 800e6d8:	2d02      	cmp	r5, #2
 800e6da:	d006      	beq.n	800e6ea <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800e6dc:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e6de:	0038      	movs	r0, r7
 800e6e0:	f001 fa99 	bl	800fc16 <vClearInterruptMaskFromISR>
}
 800e6e4:	0020      	movs	r0, r4
 800e6e6:	b003      	add	sp, #12
 800e6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6ea:	002a      	movs	r2, r5
 800e6ec:	0031      	movs	r1, r6
 800e6ee:	0020      	movs	r0, r4
 800e6f0:	f7ff fe89 	bl	800e406 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e6f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	d004      	beq.n	800e704 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800e6fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e700:	2401      	movs	r4, #1
 800e702:	e7ec      	b.n	800e6de <xQueueGenericSendFromISR+0x20>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e706:	2b00      	cmp	r3, #0
 800e708:	d101      	bne.n	800e70e <xQueueGenericSendFromISR+0x50>
			xReturn = pdPASS;
 800e70a:	2401      	movs	r4, #1
 800e70c:	e7e7      	b.n	800e6de <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e70e:	0020      	movs	r0, r4
 800e710:	3024      	adds	r0, #36	; 0x24
 800e712:	f000 fdd1 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e716:	2800      	cmp	r0, #0
 800e718:	d006      	beq.n	800e728 <xQueueGenericSendFromISR+0x6a>
							if( pxHigherPriorityTaskWoken != NULL )
 800e71a:	9a01      	ldr	r2, [sp, #4]
 800e71c:	2a00      	cmp	r2, #0
 800e71e:	d005      	beq.n	800e72c <xQueueGenericSendFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e720:	2301      	movs	r3, #1
 800e722:	6013      	str	r3, [r2, #0]
			xReturn = pdPASS;
 800e724:	2401      	movs	r4, #1
 800e726:	e7da      	b.n	800e6de <xQueueGenericSendFromISR+0x20>
 800e728:	2401      	movs	r4, #1
 800e72a:	e7d8      	b.n	800e6de <xQueueGenericSendFromISR+0x20>
 800e72c:	2401      	movs	r4, #1
 800e72e:	e7d6      	b.n	800e6de <xQueueGenericSendFromISR+0x20>

0800e730 <xQueueGiveFromISR>:
{
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	0004      	movs	r4, r0
 800e734:	000e      	movs	r6, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e736:	f001 fa69 	bl	800fc0c <ulSetInterruptMaskFromISR>
 800e73a:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800e73c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e73e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e740:	4293      	cmp	r3, r2
 800e742:	d21b      	bcs.n	800e77c <xQueueGiveFromISR+0x4c>
			++( pxQueue->uxMessagesWaiting );
 800e744:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e746:	3301      	adds	r3, #1
 800e748:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800e74a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e74c:	3301      	adds	r3, #1
 800e74e:	d004      	beq.n	800e75a <xQueueGiveFromISR+0x2a>
				++( pxQueue->xTxLock );
 800e750:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e752:	3301      	adds	r3, #1
 800e754:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800e756:	2401      	movs	r4, #1
 800e758:	e011      	b.n	800e77e <xQueueGiveFromISR+0x4e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <xQueueGiveFromISR+0x34>
			xReturn = pdPASS;
 800e760:	2401      	movs	r4, #1
 800e762:	e00c      	b.n	800e77e <xQueueGiveFromISR+0x4e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e764:	0020      	movs	r0, r4
 800e766:	3024      	adds	r0, #36	; 0x24
 800e768:	f000 fda6 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	d00b      	beq.n	800e788 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 800e770:	2e00      	cmp	r6, #0
 800e772:	d00b      	beq.n	800e78c <xQueueGiveFromISR+0x5c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e774:	2301      	movs	r3, #1
 800e776:	6033      	str	r3, [r6, #0]
			xReturn = pdPASS;
 800e778:	2401      	movs	r4, #1
 800e77a:	e000      	b.n	800e77e <xQueueGiveFromISR+0x4e>
			xReturn = errQUEUE_FULL;
 800e77c:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e77e:	0028      	movs	r0, r5
 800e780:	f001 fa49 	bl	800fc16 <vClearInterruptMaskFromISR>
}
 800e784:	0020      	movs	r0, r4
 800e786:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800e788:	2401      	movs	r4, #1
 800e78a:	e7f8      	b.n	800e77e <xQueueGiveFromISR+0x4e>
 800e78c:	2401      	movs	r4, #1
 800e78e:	e7f6      	b.n	800e77e <xQueueGiveFromISR+0x4e>

0800e790 <xQueueGenericReceive>:
{
 800e790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e792:	b085      	sub	sp, #20
 800e794:	0004      	movs	r4, r0
 800e796:	000e      	movs	r6, r1
 800e798:	9201      	str	r2, [sp, #4]
 800e79a:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800e79c:	2700      	movs	r7, #0
 800e79e:	e04a      	b.n	800e836 <xQueueGenericReceive+0xa6>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800e7a0:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e7a2:	0031      	movs	r1, r6
 800e7a4:	0020      	movs	r0, r4
 800e7a6:	f7ff fe72 	bl	800e48e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800e7aa:	2d00      	cmp	r5, #0
 800e7ac:	d11a      	bne.n	800e7e4 <xQueueGenericReceive+0x54>
					--( pxQueue->uxMessagesWaiting );
 800e7ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7b4:	6823      	ldr	r3, [r4, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d007      	beq.n	800e7ca <xQueueGenericReceive+0x3a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d108      	bne.n	800e7d2 <xQueueGenericReceive+0x42>
				taskEXIT_CRITICAL();
 800e7c0:	f001 fa1a 	bl	800fbf8 <vPortExitCritical>
				return pdPASS;
 800e7c4:	2001      	movs	r0, #1
}
 800e7c6:	b005      	add	sp, #20
 800e7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800e7ca:	f000 ff25 	bl	800f618 <pvTaskIncrementMutexHeldCount>
 800e7ce:	6060      	str	r0, [r4, #4]
 800e7d0:	e7f3      	b.n	800e7ba <xQueueGenericReceive+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e7d2:	0020      	movs	r0, r4
 800e7d4:	3010      	adds	r0, #16
 800e7d6:	f000 fd6f 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e7da:	2801      	cmp	r0, #1
 800e7dc:	d1f0      	bne.n	800e7c0 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800e7de:	f001 f9f3 	bl	800fbc8 <vPortYield>
 800e7e2:	e7ed      	b.n	800e7c0 <xQueueGenericReceive+0x30>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800e7e4:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d0e9      	beq.n	800e7c0 <xQueueGenericReceive+0x30>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ec:	0020      	movs	r0, r4
 800e7ee:	3024      	adds	r0, #36	; 0x24
 800e7f0:	f000 fd62 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	d0e3      	beq.n	800e7c0 <xQueueGenericReceive+0x30>
							queueYIELD_IF_USING_PREEMPTION();
 800e7f8:	f001 f9e6 	bl	800fbc8 <vPortYield>
 800e7fc:	e7e0      	b.n	800e7c0 <xQueueGenericReceive+0x30>
					taskEXIT_CRITICAL();
 800e7fe:	f001 f9fb 	bl	800fbf8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e802:	2000      	movs	r0, #0
 800e804:	e7df      	b.n	800e7c6 <xQueueGenericReceive+0x36>
					vTaskSetTimeOutState( &xTimeOut );
 800e806:	a802      	add	r0, sp, #8
 800e808:	f000 fd94 	bl	800f334 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e80c:	3701      	adds	r7, #1
 800e80e:	e01c      	b.n	800e84a <xQueueGenericReceive+0xba>
		prvLockQueue( pxQueue );
 800e810:	2300      	movs	r3, #0
 800e812:	6463      	str	r3, [r4, #68]	; 0x44
 800e814:	e022      	b.n	800e85c <xQueueGenericReceive+0xcc>
 800e816:	2300      	movs	r3, #0
 800e818:	64a3      	str	r3, [r4, #72]	; 0x48
 800e81a:	e022      	b.n	800e862 <xQueueGenericReceive+0xd2>
						taskENTER_CRITICAL();
 800e81c:	f001 f9e0 	bl	800fbe0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800e820:	6860      	ldr	r0, [r4, #4]
 800e822:	f000 fdd7 	bl	800f3d4 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800e826:	f001 f9e7 	bl	800fbf8 <vPortExitCritical>
 800e82a:	e02a      	b.n	800e882 <xQueueGenericReceive+0xf2>
				prvUnlockQueue( pxQueue );
 800e82c:	0020      	movs	r0, r4
 800e82e:	f7ff fe40 	bl	800e4b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e832:	f000 fb87 	bl	800ef44 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800e836:	f001 f9d3 	bl	800fbe0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e83a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d1af      	bne.n	800e7a0 <xQueueGenericReceive+0x10>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d0db      	beq.n	800e7fe <xQueueGenericReceive+0x6e>
				else if( xEntryTimeSet == pdFALSE )
 800e846:	2f00      	cmp	r7, #0
 800e848:	d0dd      	beq.n	800e806 <xQueueGenericReceive+0x76>
		taskEXIT_CRITICAL();
 800e84a:	f001 f9d5 	bl	800fbf8 <vPortExitCritical>
		vTaskSuspendAll();
 800e84e:	f000 fae1 	bl	800ee14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e852:	f001 f9c5 	bl	800fbe0 <vPortEnterCritical>
 800e856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e858:	3301      	adds	r3, #1
 800e85a:	d0d9      	beq.n	800e810 <xQueueGenericReceive+0x80>
 800e85c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e85e:	3301      	adds	r3, #1
 800e860:	d0d9      	beq.n	800e816 <xQueueGenericReceive+0x86>
 800e862:	f001 f9c9 	bl	800fbf8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e866:	a901      	add	r1, sp, #4
 800e868:	a802      	add	r0, sp, #8
 800e86a:	f000 fd6f 	bl	800f34c <xTaskCheckForTimeOut>
 800e86e:	2800      	cmp	r0, #0
 800e870:	d116      	bne.n	800e8a0 <xQueueGenericReceive+0x110>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e872:	0020      	movs	r0, r4
 800e874:	f7ff fdb9 	bl	800e3ea <prvIsQueueEmpty>
 800e878:	2800      	cmp	r0, #0
 800e87a:	d0d7      	beq.n	800e82c <xQueueGenericReceive+0x9c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e87c:	6823      	ldr	r3, [r4, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d0cc      	beq.n	800e81c <xQueueGenericReceive+0x8c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e882:	0020      	movs	r0, r4
 800e884:	3024      	adds	r0, #36	; 0x24
 800e886:	9901      	ldr	r1, [sp, #4]
 800e888:	f000 fce0 	bl	800f24c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e88c:	0020      	movs	r0, r4
 800e88e:	f7ff fe10 	bl	800e4b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e892:	f000 fb57 	bl	800ef44 <xTaskResumeAll>
 800e896:	2800      	cmp	r0, #0
 800e898:	d1cd      	bne.n	800e836 <xQueueGenericReceive+0xa6>
					portYIELD_WITHIN_API();
 800e89a:	f001 f995 	bl	800fbc8 <vPortYield>
 800e89e:	e7ca      	b.n	800e836 <xQueueGenericReceive+0xa6>
			prvUnlockQueue( pxQueue );
 800e8a0:	0020      	movs	r0, r4
 800e8a2:	f7ff fe06 	bl	800e4b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8a6:	f000 fb4d 	bl	800ef44 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	e78b      	b.n	800e7c6 <xQueueGenericReceive+0x36>

0800e8ae <xQueueReceiveFromISR>:
{
 800e8ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b0:	0004      	movs	r4, r0
 800e8b2:	000e      	movs	r6, r1
 800e8b4:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8b6:	f001 f9a9 	bl	800fc0c <ulSetInterruptMaskFromISR>
 800e8ba:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d105      	bne.n	800e8ce <xQueueReceiveFromISR+0x20>
			xReturn = pdFAIL;
 800e8c2:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800e8c4:	0028      	movs	r0, r5
 800e8c6:	f001 f9a6 	bl	800fc16 <vClearInterruptMaskFromISR>
}
 800e8ca:	0020      	movs	r0, r4
 800e8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8ce:	0031      	movs	r1, r6
 800e8d0:	0020      	movs	r0, r4
 800e8d2:	f7ff fddc 	bl	800e48e <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800e8d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800e8dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8de:	3301      	adds	r3, #1
 800e8e0:	d004      	beq.n	800e8ec <xQueueReceiveFromISR+0x3e>
				++( pxQueue->xRxLock );
 800e8e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800e8e8:	2401      	movs	r4, #1
 800e8ea:	e7eb      	b.n	800e8c4 <xQueueReceiveFromISR+0x16>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8ec:	6923      	ldr	r3, [r4, #16]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <xQueueReceiveFromISR+0x48>
			xReturn = pdPASS;
 800e8f2:	2401      	movs	r4, #1
 800e8f4:	e7e6      	b.n	800e8c4 <xQueueReceiveFromISR+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8f6:	0020      	movs	r0, r4
 800e8f8:	3010      	adds	r0, #16
 800e8fa:	f000 fcdd 	bl	800f2b8 <xTaskRemoveFromEventList>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d005      	beq.n	800e90e <xQueueReceiveFromISR+0x60>
						if( pxHigherPriorityTaskWoken != NULL )
 800e902:	2f00      	cmp	r7, #0
 800e904:	d005      	beq.n	800e912 <xQueueReceiveFromISR+0x64>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e906:	2301      	movs	r3, #1
 800e908:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800e90a:	2401      	movs	r4, #1
 800e90c:	e7da      	b.n	800e8c4 <xQueueReceiveFromISR+0x16>
 800e90e:	2401      	movs	r4, #1
 800e910:	e7d8      	b.n	800e8c4 <xQueueReceiveFromISR+0x16>
 800e912:	2401      	movs	r4, #1
 800e914:	e7d6      	b.n	800e8c4 <xQueueReceiveFromISR+0x16>
	...

0800e918 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e918:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e91a:	2300      	movs	r3, #0
 800e91c:	e000      	b.n	800e920 <vQueueAddToRegistry+0x8>
 800e91e:	3301      	adds	r3, #1
 800e920:	2b07      	cmp	r3, #7
 800e922:	d808      	bhi.n	800e936 <vQueueAddToRegistry+0x1e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e924:	00da      	lsls	r2, r3, #3
 800e926:	4c04      	ldr	r4, [pc, #16]	; (800e938 <vQueueAddToRegistry+0x20>)
 800e928:	5912      	ldr	r2, [r2, r4]
 800e92a:	2a00      	cmp	r2, #0
 800e92c:	d1f7      	bne.n	800e91e <vQueueAddToRegistry+0x6>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e92e:	00db      	lsls	r3, r3, #3
 800e930:	5119      	str	r1, [r3, r4]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e932:	18e3      	adds	r3, r4, r3
 800e934:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e936:	bd10      	pop	{r4, pc}
 800e938:	20005c4c 	.word	0x20005c4c

0800e93c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800e93c:	b570      	push	{r4, r5, r6, lr}
 800e93e:	0004      	movs	r4, r0
 800e940:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e942:	f001 f94d 	bl	800fbe0 <vPortEnterCritical>
 800e946:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e948:	3301      	adds	r3, #1
 800e94a:	d00b      	beq.n	800e964 <vQueueWaitForMessageRestricted+0x28>
 800e94c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e94e:	3301      	adds	r3, #1
 800e950:	d00b      	beq.n	800e96a <vQueueWaitForMessageRestricted+0x2e>
 800e952:	f001 f951 	bl	800fbf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d009      	beq.n	800e970 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e95c:	0020      	movs	r0, r4
 800e95e:	f7ff fda8 	bl	800e4b2 <prvUnlockQueue>
	}
 800e962:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800e964:	2300      	movs	r3, #0
 800e966:	6463      	str	r3, [r4, #68]	; 0x44
 800e968:	e7f0      	b.n	800e94c <vQueueWaitForMessageRestricted+0x10>
 800e96a:	2300      	movs	r3, #0
 800e96c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e96e:	e7f0      	b.n	800e952 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e970:	0020      	movs	r0, r4
 800e972:	3024      	adds	r0, #36	; 0x24
 800e974:	0029      	movs	r1, r5
 800e976:	f000 fc89 	bl	800f28c <vTaskPlaceOnEventListRestricted>
 800e97a:	e7ef      	b.n	800e95c <vQueueWaitForMessageRestricted+0x20>

0800e97c <prvTaskCheckFreeStackSpace>:

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;
 800e97c:	2300      	movs	r3, #0

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800e97e:	7802      	ldrb	r2, [r0, #0]
 800e980:	2aa5      	cmp	r2, #165	; 0xa5
 800e982:	d102      	bne.n	800e98a <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
 800e984:	3001      	adds	r0, #1
			ulCount++;
 800e986:	3301      	adds	r3, #1
 800e988:	e7f9      	b.n	800e97e <prvTaskCheckFreeStackSpace+0x2>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800e98a:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800e98c:	b298      	uxth	r0, r3
	}
 800e98e:	4770      	bx	lr

0800e990 <prvListTaskWithinSingleList>:
	{
 800e990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e992:	46de      	mov	lr, fp
 800e994:	4657      	mov	r7, sl
 800e996:	464e      	mov	r6, r9
 800e998:	4645      	mov	r5, r8
 800e99a:	b5e0      	push	{r5, r6, r7, lr}
 800e99c:	4681      	mov	r9, r0
 800e99e:	000e      	movs	r6, r1
 800e9a0:	4690      	mov	r8, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e9a2:	680f      	ldr	r7, [r1, #0]
 800e9a4:	2f00      	cmp	r7, #0
 800e9a6:	d039      	beq.n	800ea1c <prvListTaskWithinSingleList+0x8c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e9a8:	684b      	ldr	r3, [r1, #4]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	604b      	str	r3, [r1, #4]
 800e9ae:	2208      	movs	r2, #8
 800e9b0:	4692      	mov	sl, r2
 800e9b2:	448a      	add	sl, r1
 800e9b4:	4553      	cmp	r3, sl
 800e9b6:	d004      	beq.n	800e9c2 <prvListTaskWithinSingleList+0x32>
 800e9b8:	6873      	ldr	r3, [r6, #4]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	469b      	mov	fp, r3
	UBaseType_t uxTask = 0;
 800e9be:	2700      	movs	r7, #0
 800e9c0:	e010      	b.n	800e9e4 <prvListTaskWithinSingleList+0x54>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	604b      	str	r3, [r1, #4]
 800e9c6:	e7f7      	b.n	800e9b8 <prvListTaskWithinSingleList+0x28>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	6073      	str	r3, [r6, #4]
 800e9cc:	e00f      	b.n	800e9ee <prvListTaskWithinSingleList+0x5e>
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800e9ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e9d0:	6163      	str	r3, [r4, #20]
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800e9d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e9d4:	61a3      	str	r3, [r4, #24]
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800e9d6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e9d8:	f7ff ffd0 	bl	800e97c <prvTaskCheckFreeStackSpace>
 800e9dc:	83a0      	strh	r0, [r4, #28]
				uxTask++;
 800e9de:	3701      	adds	r7, #1
			} while( pxNextTCB != pxFirstTCB );
 800e9e0:	45ab      	cmp	fp, r5
 800e9e2:	d01b      	beq.n	800ea1c <prvListTaskWithinSingleList+0x8c>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800e9e4:	6873      	ldr	r3, [r6, #4]
 800e9e6:	685b      	ldr	r3, [r3, #4]
 800e9e8:	6073      	str	r3, [r6, #4]
 800e9ea:	459a      	cmp	sl, r3
 800e9ec:	d0ec      	beq.n	800e9c8 <prvListTaskWithinSingleList+0x38>
 800e9ee:	6873      	ldr	r3, [r6, #4]
 800e9f0:	68dd      	ldr	r5, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800e9f2:	017c      	lsls	r4, r7, #5
 800e9f4:	444c      	add	r4, r9
 800e9f6:	6025      	str	r5, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800e9f8:	002b      	movs	r3, r5
 800e9fa:	3334      	adds	r3, #52	; 0x34
 800e9fc:	6063      	str	r3, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800e9fe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ea00:	60a3      	str	r3, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ea02:	4643      	mov	r3, r8
 800ea04:	7323      	strb	r3, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ea06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ea08:	6123      	str	r3, [r4, #16]
					if( eState == eSuspended )
 800ea0a:	4643      	mov	r3, r8
 800ea0c:	2b03      	cmp	r3, #3
 800ea0e:	d1de      	bne.n	800e9ce <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ea10:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d0db      	beq.n	800e9ce <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ea16:	2302      	movs	r3, #2
 800ea18:	7323      	strb	r3, [r4, #12]
 800ea1a:	e7d8      	b.n	800e9ce <prvListTaskWithinSingleList+0x3e>
	}
 800ea1c:	0038      	movs	r0, r7
 800ea1e:	bcf0      	pop	{r4, r5, r6, r7}
 800ea20:	46bb      	mov	fp, r7
 800ea22:	46b2      	mov	sl, r6
 800ea24:	46a9      	mov	r9, r5
 800ea26:	46a0      	mov	r8, r4
 800ea28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea2c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea2c:	4b08      	ldr	r3, [pc, #32]	; (800ea50 <prvResetNextTaskUnblockTime+0x24>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d104      	bne.n	800ea40 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea36:	4b07      	ldr	r3, [pc, #28]	; (800ea54 <prvResetNextTaskUnblockTime+0x28>)
 800ea38:	2201      	movs	r2, #1
 800ea3a:	4252      	negs	r2, r2
 800ea3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800ea3e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ea40:	4b03      	ldr	r3, [pc, #12]	; (800ea50 <prvResetNextTaskUnblockTime+0x24>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800ea48:	685a      	ldr	r2, [r3, #4]
 800ea4a:	4b02      	ldr	r3, [pc, #8]	; (800ea54 <prvResetNextTaskUnblockTime+0x28>)
 800ea4c:	601a      	str	r2, [r3, #0]
}
 800ea4e:	e7f6      	b.n	800ea3e <prvResetNextTaskUnblockTime+0x12>
 800ea50:	20001644 	.word	0x20001644
 800ea54:	20000118 	.word	0x20000118

0800ea58 <prvDeleteTCB>:
	{
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	0004      	movs	r4, r0
			vPortFreeAligned( pxTCB->pxStack );
 800ea5c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ea5e:	f001 f9db 	bl	800fe18 <vPortFree>
		vPortFree( pxTCB );
 800ea62:	0020      	movs	r0, r4
 800ea64:	f001 f9d8 	bl	800fe18 <vPortFree>
	}
 800ea68:	bd10      	pop	{r4, pc}

0800ea6a <prvAllocateTCBAndStack>:
{
 800ea6a:	b570      	push	{r4, r5, r6, lr}
 800ea6c:	0005      	movs	r5, r0
 800ea6e:	1e0c      	subs	r4, r1, #0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea70:	d010      	beq.n	800ea94 <prvAllocateTCBAndStack+0x2a>
		if( pxStack != NULL )
 800ea72:	2c00      	cmp	r4, #0
 800ea74:	d017      	beq.n	800eaa6 <prvAllocateTCBAndStack+0x3c>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ea76:	2060      	movs	r0, #96	; 0x60
 800ea78:	f001 f960 	bl	800fd3c <pvPortMalloc>
 800ea7c:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800ea7e:	d00e      	beq.n	800ea9e <prvAllocateTCBAndStack+0x34>
				pxNewTCB->pxStack = pxStack;
 800ea80:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
 800ea82:	2e00      	cmp	r6, #0
 800ea84:	d004      	beq.n	800ea90 <prvAllocateTCBAndStack+0x26>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ea86:	00aa      	lsls	r2, r5, #2
 800ea88:	21a5      	movs	r1, #165	; 0xa5
 800ea8a:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800ea8c:	f004 fb4d 	bl	801312a <memset>
}
 800ea90:	0030      	movs	r0, r6
 800ea92:	bd70      	pop	{r4, r5, r6, pc}
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea94:	0080      	lsls	r0, r0, #2
 800ea96:	f001 f951 	bl	800fd3c <pvPortMalloc>
 800ea9a:	0004      	movs	r4, r0
 800ea9c:	e7e9      	b.n	800ea72 <prvAllocateTCBAndStack+0x8>
				vPortFree( pxStack );
 800ea9e:	0020      	movs	r0, r4
 800eaa0:	f001 f9ba 	bl	800fe18 <vPortFree>
 800eaa4:	e7ed      	b.n	800ea82 <prvAllocateTCBAndStack+0x18>
			pxNewTCB = NULL;
 800eaa6:	0026      	movs	r6, r4
	return pxNewTCB;
 800eaa8:	e7f2      	b.n	800ea90 <prvAllocateTCBAndStack+0x26>

0800eaaa <prvInitialiseTCBVariables>:
{
 800eaaa:	b570      	push	{r4, r5, r6, lr}
 800eaac:	0005      	movs	r5, r0
 800eaae:	0016      	movs	r6, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eab0:	2300      	movs	r3, #0
 800eab2:	2b0c      	cmp	r3, #12
 800eab4:	d808      	bhi.n	800eac8 <prvInitialiseTCBVariables+0x1e>
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800eab6:	5cc8      	ldrb	r0, [r1, r3]
 800eab8:	18ec      	adds	r4, r5, r3
 800eaba:	3434      	adds	r4, #52	; 0x34
 800eabc:	7020      	strb	r0, [r4, #0]
		if( pcName[ x ] == 0x00 )
 800eabe:	5cc8      	ldrb	r0, [r1, r3]
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d001      	beq.n	800eac8 <prvInitialiseTCBVariables+0x1e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eac4:	3301      	adds	r3, #1
 800eac6:	e7f4      	b.n	800eab2 <prvInitialiseTCBVariables+0x8>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eac8:	2340      	movs	r3, #64	; 0x40
 800eaca:	2200      	movs	r2, #0
 800eacc:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eace:	2e06      	cmp	r6, #6
 800ead0:	d900      	bls.n	800ead4 <prvInitialiseTCBVariables+0x2a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ead2:	2606      	movs	r6, #6
	pxTCB->uxPriority = uxPriority;
 800ead4:	62ee      	str	r6, [r5, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800ead6:	64ee      	str	r6, [r5, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800ead8:	2400      	movs	r4, #0
 800eada:	652c      	str	r4, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800eadc:	1d28      	adds	r0, r5, #4
 800eade:	f7ff fc3e 	bl	800e35e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800eae2:	0028      	movs	r0, r5
 800eae4:	3018      	adds	r0, #24
 800eae6:	f7ff fc3a 	bl	800e35e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800eaea:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eaec:	2207      	movs	r2, #7
 800eaee:	1b96      	subs	r6, r2, r6
 800eaf0:	61ae      	str	r6, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800eaf2:	626d      	str	r5, [r5, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800eaf4:	656c      	str	r4, [r5, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800eaf6:	65ac      	str	r4, [r5, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800eaf8:	235c      	movs	r3, #92	; 0x5c
 800eafa:	54ec      	strb	r4, [r5, r3]
}
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb00 <prvInitialiseTaskLists>:
{
 800eb00:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb02:	2400      	movs	r4, #0
 800eb04:	e007      	b.n	800eb16 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb06:	00a3      	lsls	r3, r4, #2
 800eb08:	191b      	adds	r3, r3, r4
 800eb0a:	0098      	lsls	r0, r3, #2
 800eb0c:	4b0e      	ldr	r3, [pc, #56]	; (800eb48 <prvInitialiseTaskLists+0x48>)
 800eb0e:	18c0      	adds	r0, r0, r3
 800eb10:	f7ff fc1a 	bl	800e348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb14:	3401      	adds	r4, #1
 800eb16:	2c06      	cmp	r4, #6
 800eb18:	d9f5      	bls.n	800eb06 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800eb1a:	4d0c      	ldr	r5, [pc, #48]	; (800eb4c <prvInitialiseTaskLists+0x4c>)
 800eb1c:	0028      	movs	r0, r5
 800eb1e:	f7ff fc13 	bl	800e348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb22:	4c0b      	ldr	r4, [pc, #44]	; (800eb50 <prvInitialiseTaskLists+0x50>)
 800eb24:	0020      	movs	r0, r4
 800eb26:	f7ff fc0f 	bl	800e348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb2a:	480a      	ldr	r0, [pc, #40]	; (800eb54 <prvInitialiseTaskLists+0x54>)
 800eb2c:	f7ff fc0c 	bl	800e348 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800eb30:	4809      	ldr	r0, [pc, #36]	; (800eb58 <prvInitialiseTaskLists+0x58>)
 800eb32:	f7ff fc09 	bl	800e348 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800eb36:	4809      	ldr	r0, [pc, #36]	; (800eb5c <prvInitialiseTaskLists+0x5c>)
 800eb38:	f7ff fc06 	bl	800e348 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb3c:	4b08      	ldr	r3, [pc, #32]	; (800eb60 <prvInitialiseTaskLists+0x60>)
 800eb3e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb40:	4b08      	ldr	r3, [pc, #32]	; (800eb64 <prvInitialiseTaskLists+0x64>)
 800eb42:	601c      	str	r4, [r3, #0]
}
 800eb44:	bd70      	pop	{r4, r5, r6, pc}
 800eb46:	46c0      	nop			; (mov r8, r8)
 800eb48:	2000164c 	.word	0x2000164c
 800eb4c:	200016f4 	.word	0x200016f4
 800eb50:	20001708 	.word	0x20001708
 800eb54:	20001720 	.word	0x20001720
 800eb58:	2000174c 	.word	0x2000174c
 800eb5c:	20001738 	.word	0x20001738
 800eb60:	20001644 	.word	0x20001644
 800eb64:	20001648 	.word	0x20001648

0800eb68 <prvAddCurrentTaskToDelayedList>:
{
 800eb68:	b510      	push	{r4, lr}
 800eb6a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800eb6c:	4b0e      	ldr	r3, [pc, #56]	; (800eba8 <prvAddCurrentTaskToDelayedList+0x40>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800eb72:	4b0e      	ldr	r3, [pc, #56]	; (800ebac <prvAddCurrentTaskToDelayedList+0x44>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4283      	cmp	r3, r0
 800eb78:	d907      	bls.n	800eb8a <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eb7a:	4b0d      	ldr	r3, [pc, #52]	; (800ebb0 <prvAddCurrentTaskToDelayedList+0x48>)
 800eb7c:	6818      	ldr	r0, [r3, #0]
 800eb7e:	4b0a      	ldr	r3, [pc, #40]	; (800eba8 <prvAddCurrentTaskToDelayedList+0x40>)
 800eb80:	6819      	ldr	r1, [r3, #0]
 800eb82:	3104      	adds	r1, #4
 800eb84:	f7ff fbf9 	bl	800e37a <vListInsert>
}
 800eb88:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800eb8a:	4b0a      	ldr	r3, [pc, #40]	; (800ebb4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800eb8c:	6818      	ldr	r0, [r3, #0]
 800eb8e:	4b06      	ldr	r3, [pc, #24]	; (800eba8 <prvAddCurrentTaskToDelayedList+0x40>)
 800eb90:	6819      	ldr	r1, [r3, #0]
 800eb92:	3104      	adds	r1, #4
 800eb94:	f7ff fbf1 	bl	800e37a <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800eb98:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <prvAddCurrentTaskToDelayedList+0x50>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	42a3      	cmp	r3, r4
 800eb9e:	d9f3      	bls.n	800eb88 <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800eba0:	4b05      	ldr	r3, [pc, #20]	; (800ebb8 <prvAddCurrentTaskToDelayedList+0x50>)
 800eba2:	601c      	str	r4, [r3, #0]
}
 800eba4:	e7f0      	b.n	800eb88 <prvAddCurrentTaskToDelayedList+0x20>
 800eba6:	46c0      	nop			; (mov r8, r8)
 800eba8:	20001640 	.word	0x20001640
 800ebac:	20001760 	.word	0x20001760
 800ebb0:	20001648 	.word	0x20001648
 800ebb4:	20001644 	.word	0x20001644
 800ebb8:	20000118 	.word	0x20000118

0800ebbc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ebc0:	f005 f8a7 	bl	8013d12 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ebc4:	0020      	movs	r0, r4
 800ebc6:	f7f1 faa7 	bl	8000118 <strlen>
 800ebca:	280b      	cmp	r0, #11
 800ebcc:	dc03      	bgt.n	800ebd6 <prvWriteNameToBuffer+0x1a>
		{
			pcBuffer[ x ] = ' ';
 800ebce:	2320      	movs	r3, #32
 800ebd0:	5423      	strb	r3, [r4, r0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	e7f9      	b.n	800ebca <prvWriteNameToBuffer+0xe>
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800ebd6:	1820      	adds	r0, r4, r0
 800ebd8:	2300      	movs	r3, #0
 800ebda:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800ebdc:	bd10      	pop	{r4, pc}
	...

0800ebe0 <xTaskGenericCreate>:
{
 800ebe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebe2:	46ce      	mov	lr, r9
 800ebe4:	b500      	push	{lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	9003      	str	r0, [sp, #12]
 800ebea:	000f      	movs	r7, r1
 800ebec:	0015      	movs	r5, r2
 800ebee:	001e      	movs	r6, r3
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800ebf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ebf2:	0010      	movs	r0, r2
 800ebf4:	f7ff ff39 	bl	800ea6a <prvAllocateTCBAndStack>
 800ebf8:	1e04      	subs	r4, r0, #0
	if( pxNewTCB != NULL )
 800ebfa:	d05d      	beq.n	800ecb8 <xTaskGenericCreate+0xd8>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ebfc:	4b32      	ldr	r3, [pc, #200]	; (800ecc8 <xTaskGenericCreate+0xe8>)
 800ebfe:	18eb      	adds	r3, r5, r3
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800ec04:	4694      	mov	ip, r2
 800ec06:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ec08:	2207      	movs	r2, #7
 800ec0a:	4393      	bics	r3, r2
 800ec0c:	4699      	mov	r9, r3
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800ec0e:	9500      	str	r5, [sp, #0]
 800ec10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ec12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec14:	0039      	movs	r1, r7
 800ec16:	f7ff ff48 	bl	800eaaa <prvInitialiseTCBVariables>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec1a:	0032      	movs	r2, r6
 800ec1c:	9903      	ldr	r1, [sp, #12]
 800ec1e:	4648      	mov	r0, r9
 800ec20:	f000 ffa6 	bl	800fb70 <pxPortInitialiseStack>
 800ec24:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ec26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d000      	beq.n	800ec2e <xTaskGenericCreate+0x4e>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec2c:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800ec2e:	f000 ffd7 	bl	800fbe0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ec32:	4a26      	ldr	r2, [pc, #152]	; (800eccc <xTaskGenericCreate+0xec>)
 800ec34:	6813      	ldr	r3, [r2, #0]
 800ec36:	3301      	adds	r3, #1
 800ec38:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800ec3a:	4b25      	ldr	r3, [pc, #148]	; (800ecd0 <xTaskGenericCreate+0xf0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00c      	beq.n	800ec5c <xTaskGenericCreate+0x7c>
				if( xSchedulerRunning == pdFALSE )
 800ec42:	4b24      	ldr	r3, [pc, #144]	; (800ecd4 <xTaskGenericCreate+0xf4>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d10d      	bne.n	800ec66 <xTaskGenericCreate+0x86>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ec4a:	4b21      	ldr	r3, [pc, #132]	; (800ecd0 <xTaskGenericCreate+0xf0>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d807      	bhi.n	800ec66 <xTaskGenericCreate+0x86>
						pxCurrentTCB = pxNewTCB;
 800ec56:	4b1e      	ldr	r3, [pc, #120]	; (800ecd0 <xTaskGenericCreate+0xf0>)
 800ec58:	601c      	str	r4, [r3, #0]
 800ec5a:	e004      	b.n	800ec66 <xTaskGenericCreate+0x86>
				pxCurrentTCB =  pxNewTCB;
 800ec5c:	4b1c      	ldr	r3, [pc, #112]	; (800ecd0 <xTaskGenericCreate+0xf0>)
 800ec5e:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ec60:	6813      	ldr	r3, [r2, #0]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d021      	beq.n	800ecaa <xTaskGenericCreate+0xca>
			uxTaskNumber++;
 800ec66:	4a1c      	ldr	r2, [pc, #112]	; (800ecd8 <xTaskGenericCreate+0xf8>)
 800ec68:	6813      	ldr	r3, [r2, #0]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec6e:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800ec70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ec72:	4a1a      	ldr	r2, [pc, #104]	; (800ecdc <xTaskGenericCreate+0xfc>)
 800ec74:	6812      	ldr	r2, [r2, #0]
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d901      	bls.n	800ec7e <xTaskGenericCreate+0x9e>
 800ec7a:	4a18      	ldr	r2, [pc, #96]	; (800ecdc <xTaskGenericCreate+0xfc>)
 800ec7c:	6013      	str	r3, [r2, #0]
 800ec7e:	1d21      	adds	r1, r4, #4
 800ec80:	0098      	lsls	r0, r3, #2
 800ec82:	18c0      	adds	r0, r0, r3
 800ec84:	0080      	lsls	r0, r0, #2
 800ec86:	4b16      	ldr	r3, [pc, #88]	; (800ece0 <xTaskGenericCreate+0x100>)
 800ec88:	18c0      	adds	r0, r0, r3
 800ec8a:	f7ff fb6b 	bl	800e364 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800ec8e:	f000 ffb3 	bl	800fbf8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800ec92:	4b10      	ldr	r3, [pc, #64]	; (800ecd4 <xTaskGenericCreate+0xf4>)
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d014      	beq.n	800ecc4 <xTaskGenericCreate+0xe4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800ec9a:	4b0d      	ldr	r3, [pc, #52]	; (800ecd0 <xTaskGenericCreate+0xf0>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d304      	bcc.n	800ecb0 <xTaskGenericCreate+0xd0>
			xReturn = pdPASS;
 800eca6:	2001      	movs	r0, #1
	return xReturn;
 800eca8:	e008      	b.n	800ecbc <xTaskGenericCreate+0xdc>
					prvInitialiseTaskLists();
 800ecaa:	f7ff ff29 	bl	800eb00 <prvInitialiseTaskLists>
 800ecae:	e7da      	b.n	800ec66 <xTaskGenericCreate+0x86>
				taskYIELD_IF_USING_PREEMPTION();
 800ecb0:	f000 ff8a 	bl	800fbc8 <vPortYield>
			xReturn = pdPASS;
 800ecb4:	2001      	movs	r0, #1
 800ecb6:	e001      	b.n	800ecbc <xTaskGenericCreate+0xdc>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ecb8:	2001      	movs	r0, #1
 800ecba:	4240      	negs	r0, r0
}
 800ecbc:	b004      	add	sp, #16
 800ecbe:	bc80      	pop	{r7}
 800ecc0:	46b9      	mov	r9, r7
 800ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800ecc4:	2001      	movs	r0, #1
 800ecc6:	e7f9      	b.n	800ecbc <xTaskGenericCreate+0xdc>
 800ecc8:	3fffffff 	.word	0x3fffffff
 800eccc:	200016dc 	.word	0x200016dc
 800ecd0:	20001640 	.word	0x20001640
 800ecd4:	20001734 	.word	0x20001734
 800ecd8:	200016e8 	.word	0x200016e8
 800ecdc:	200016f0 	.word	0x200016f0
 800ece0:	2000164c 	.word	0x2000164c

0800ece4 <uxTaskPriorityGet>:
	{
 800ece4:	b510      	push	{r4, lr}
 800ece6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800ece8:	f000 ff7a 	bl	800fbe0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ecec:	2c00      	cmp	r4, #0
 800ecee:	d004      	beq.n	800ecfa <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800ecf0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800ecf2:	f000 ff81 	bl	800fbf8 <vPortExitCritical>
	}
 800ecf6:	0020      	movs	r0, r4
 800ecf8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800ecfa:	4b01      	ldr	r3, [pc, #4]	; (800ed00 <uxTaskPriorityGet+0x1c>)
 800ecfc:	681c      	ldr	r4, [r3, #0]
 800ecfe:	e7f7      	b.n	800ecf0 <uxTaskPriorityGet+0xc>
 800ed00:	20001640 	.word	0x20001640

0800ed04 <vTaskPrioritySet>:
	{
 800ed04:	b570      	push	{r4, r5, r6, lr}
 800ed06:	0004      	movs	r4, r0
 800ed08:	000d      	movs	r5, r1
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ed0a:	2906      	cmp	r1, #6
 800ed0c:	d900      	bls.n	800ed10 <vTaskPrioritySet+0xc>
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ed0e:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800ed10:	f000 ff66 	bl	800fbe0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ed14:	2c00      	cmp	r4, #0
 800ed16:	d00e      	beq.n	800ed36 <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800ed18:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800ed1a:	4295      	cmp	r5, r2
 800ed1c:	d027      	beq.n	800ed6e <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800ed1e:	d90d      	bls.n	800ed3c <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800ed20:	4b24      	ldr	r3, [pc, #144]	; (800edb4 <vTaskPrioritySet+0xb0>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	42a3      	cmp	r3, r4
 800ed26:	d025      	beq.n	800ed74 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ed28:	4b22      	ldr	r3, [pc, #136]	; (800edb4 <vTaskPrioritySet+0xb0>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	42ab      	cmp	r3, r5
 800ed30:	d922      	bls.n	800ed78 <vTaskPrioritySet+0x74>
	BaseType_t xYieldRequired = pdFALSE;
 800ed32:	2600      	movs	r6, #0
 800ed34:	e007      	b.n	800ed46 <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800ed36:	4b1f      	ldr	r3, [pc, #124]	; (800edb4 <vTaskPrioritySet+0xb0>)
 800ed38:	681c      	ldr	r4, [r3, #0]
 800ed3a:	e7ed      	b.n	800ed18 <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800ed3c:	4b1d      	ldr	r3, [pc, #116]	; (800edb4 <vTaskPrioritySet+0xb0>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	42a3      	cmp	r3, r4
 800ed42:	d01b      	beq.n	800ed7c <vTaskPrioritySet+0x78>
	BaseType_t xYieldRequired = pdFALSE;
 800ed44:	2600      	movs	r6, #0
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed46:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ed48:	4282      	cmp	r2, r0
 800ed4a:	d019      	beq.n	800ed80 <vTaskPrioritySet+0x7c>
					pxTCB->uxBasePriority = uxNewPriority;
 800ed4c:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed4e:	69a3      	ldr	r3, [r4, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	db02      	blt.n	800ed5a <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed54:	2107      	movs	r1, #7
 800ed56:	1b4d      	subs	r5, r1, r5
 800ed58:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800ed5a:	0083      	lsls	r3, r0, #2
 800ed5c:	181b      	adds	r3, r3, r0
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4a15      	ldr	r2, [pc, #84]	; (800edb8 <vTaskPrioritySet+0xb4>)
 800ed62:	189b      	adds	r3, r3, r2
 800ed64:	6962      	ldr	r2, [r4, #20]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d00c      	beq.n	800ed84 <vTaskPrioritySet+0x80>
				if( xYieldRequired == pdTRUE )
 800ed6a:	2e01      	cmp	r6, #1
 800ed6c:	d01e      	beq.n	800edac <vTaskPrioritySet+0xa8>
		taskEXIT_CRITICAL();
 800ed6e:	f000 ff43 	bl	800fbf8 <vPortExitCritical>
	}
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800ed74:	2600      	movs	r6, #0
 800ed76:	e7e6      	b.n	800ed46 <vTaskPrioritySet+0x42>
							xYieldRequired = pdTRUE;
 800ed78:	2601      	movs	r6, #1
 800ed7a:	e7e4      	b.n	800ed46 <vTaskPrioritySet+0x42>
					xYieldRequired = pdTRUE;
 800ed7c:	2601      	movs	r6, #1
 800ed7e:	e7e2      	b.n	800ed46 <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800ed80:	62e5      	str	r5, [r4, #44]	; 0x2c
 800ed82:	e7e3      	b.n	800ed4c <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ed84:	1d25      	adds	r5, r4, #4
 800ed86:	0028      	movs	r0, r5
 800ed88:	f7ff fb0e 	bl	800e3a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ed8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed8e:	4a0b      	ldr	r2, [pc, #44]	; (800edbc <vTaskPrioritySet+0xb8>)
 800ed90:	6812      	ldr	r2, [r2, #0]
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d901      	bls.n	800ed9a <vTaskPrioritySet+0x96>
 800ed96:	4a09      	ldr	r2, [pc, #36]	; (800edbc <vTaskPrioritySet+0xb8>)
 800ed98:	6013      	str	r3, [r2, #0]
 800ed9a:	0098      	lsls	r0, r3, #2
 800ed9c:	18c0      	adds	r0, r0, r3
 800ed9e:	0080      	lsls	r0, r0, #2
 800eda0:	4b05      	ldr	r3, [pc, #20]	; (800edb8 <vTaskPrioritySet+0xb4>)
 800eda2:	18c0      	adds	r0, r0, r3
 800eda4:	0029      	movs	r1, r5
 800eda6:	f7ff fadd 	bl	800e364 <vListInsertEnd>
 800edaa:	e7de      	b.n	800ed6a <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800edac:	f000 ff0c 	bl	800fbc8 <vPortYield>
 800edb0:	e7dd      	b.n	800ed6e <vTaskPrioritySet+0x6a>
 800edb2:	46c0      	nop			; (mov r8, r8)
 800edb4:	20001640 	.word	0x20001640
 800edb8:	2000164c 	.word	0x2000164c
 800edbc:	200016f0 	.word	0x200016f0

0800edc0 <vTaskStartScheduler>:
{
 800edc0:	b500      	push	{lr}
 800edc2:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800edc4:	2300      	movs	r3, #0
 800edc6:	9303      	str	r3, [sp, #12]
 800edc8:	9302      	str	r3, [sp, #8]
 800edca:	9301      	str	r3, [sp, #4]
 800edcc:	9300      	str	r3, [sp, #0]
 800edce:	2296      	movs	r2, #150	; 0x96
 800edd0:	490c      	ldr	r1, [pc, #48]	; (800ee04 <vTaskStartScheduler+0x44>)
 800edd2:	480d      	ldr	r0, [pc, #52]	; (800ee08 <vTaskStartScheduler+0x48>)
 800edd4:	f7ff ff04 	bl	800ebe0 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800edd8:	2801      	cmp	r0, #1
 800edda:	d003      	beq.n	800ede4 <vTaskStartScheduler+0x24>
	if( xReturn == pdPASS )
 800eddc:	2801      	cmp	r0, #1
 800edde:	d004      	beq.n	800edea <vTaskStartScheduler+0x2a>
}
 800ede0:	b005      	add	sp, #20
 800ede2:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800ede4:	f000 fd2e 	bl	800f844 <xTimerCreateTimerTask>
 800ede8:	e7f8      	b.n	800eddc <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800edea:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800edec:	4b07      	ldr	r3, [pc, #28]	; (800ee0c <vTaskStartScheduler+0x4c>)
 800edee:	2201      	movs	r2, #1
 800edf0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800edf2:	4b07      	ldr	r3, [pc, #28]	; (800ee10 <vTaskStartScheduler+0x50>)
 800edf4:	2200      	movs	r2, #0
 800edf6:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800edf8:	f7f8 fc8a 	bl	8007710 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800edfc:	f000 feca 	bl	800fb94 <xPortStartScheduler>
}
 800ee00:	e7ee      	b.n	800ede0 <vTaskStartScheduler+0x20>
 800ee02:	46c0      	nop			; (mov r8, r8)
 800ee04:	0801a9ac 	.word	0x0801a9ac
 800ee08:	0800f0a9 	.word	0x0800f0a9
 800ee0c:	20001734 	.word	0x20001734
 800ee10:	20001760 	.word	0x20001760

0800ee14 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ee14:	4a02      	ldr	r2, [pc, #8]	; (800ee20 <vTaskSuspendAll+0xc>)
 800ee16:	6813      	ldr	r3, [r2, #0]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	6013      	str	r3, [r2, #0]
}
 800ee1c:	4770      	bx	lr
 800ee1e:	46c0      	nop			; (mov r8, r8)
 800ee20:	200016e4 	.word	0x200016e4

0800ee24 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ee24:	4b01      	ldr	r3, [pc, #4]	; (800ee2c <xTaskGetTickCount+0x8>)
 800ee26:	6818      	ldr	r0, [r3, #0]
}
 800ee28:	4770      	bx	lr
 800ee2a:	46c0      	nop			; (mov r8, r8)
 800ee2c:	20001760 	.word	0x20001760

0800ee30 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800ee30:	4b01      	ldr	r3, [pc, #4]	; (800ee38 <xTaskGetTickCountFromISR+0x8>)
 800ee32:	6818      	ldr	r0, [r3, #0]
}
 800ee34:	4770      	bx	lr
 800ee36:	46c0      	nop			; (mov r8, r8)
 800ee38:	20001760 	.word	0x20001760

0800ee3c <xTaskIncrementTick>:
{
 800ee3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee3e:	4b36      	ldr	r3, [pc, #216]	; (800ef18 <xTaskIncrementTick+0xdc>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d15c      	bne.n	800ef00 <xTaskIncrementTick+0xc4>
		++xTickCount;
 800ee46:	4b35      	ldr	r3, [pc, #212]	; (800ef1c <xTaskIncrementTick+0xe0>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	3201      	adds	r2, #1
 800ee4c:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800ee4e:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800ee50:	2f00      	cmp	r7, #0
 800ee52:	d010      	beq.n	800ee76 <xTaskIncrementTick+0x3a>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800ee54:	4b32      	ldr	r3, [pc, #200]	; (800ef20 <xTaskIncrementTick+0xe4>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	42bb      	cmp	r3, r7
 800ee5a:	d947      	bls.n	800eeec <xTaskIncrementTick+0xb0>
BaseType_t xSwitchRequired = pdFALSE;
 800ee5c:	2600      	movs	r6, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ee5e:	4b31      	ldr	r3, [pc, #196]	; (800ef24 <xTaskIncrementTick+0xe8>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee64:	0093      	lsls	r3, r2, #2
 800ee66:	189b      	adds	r3, r3, r2
 800ee68:	009a      	lsls	r2, r3, #2
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <xTaskIncrementTick+0xec>)
 800ee6c:	58d3      	ldr	r3, [r2, r3]
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d94b      	bls.n	800ef0a <xTaskIncrementTick+0xce>
				xSwitchRequired = pdTRUE;
 800ee72:	2601      	movs	r6, #1
 800ee74:	e049      	b.n	800ef0a <xTaskIncrementTick+0xce>
				taskSWITCH_DELAYED_LISTS();
 800ee76:	4a2d      	ldr	r2, [pc, #180]	; (800ef2c <xTaskIncrementTick+0xf0>)
 800ee78:	6811      	ldr	r1, [r2, #0]
 800ee7a:	4b2d      	ldr	r3, [pc, #180]	; (800ef30 <xTaskIncrementTick+0xf4>)
 800ee7c:	6818      	ldr	r0, [r3, #0]
 800ee7e:	6010      	str	r0, [r2, #0]
 800ee80:	6019      	str	r1, [r3, #0]
 800ee82:	4a2c      	ldr	r2, [pc, #176]	; (800ef34 <xTaskIncrementTick+0xf8>)
 800ee84:	6813      	ldr	r3, [r2, #0]
 800ee86:	3301      	adds	r3, #1
 800ee88:	6013      	str	r3, [r2, #0]
 800ee8a:	f7ff fdcf 	bl	800ea2c <prvResetNextTaskUnblockTime>
 800ee8e:	e7e1      	b.n	800ee54 <xTaskIncrementTick+0x18>
								xSwitchRequired = pdTRUE;
 800ee90:	2601      	movs	r6, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee92:	4b26      	ldr	r3, [pc, #152]	; (800ef2c <xTaskIncrementTick+0xf0>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d029      	beq.n	800eef0 <xTaskIncrementTick+0xb4>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ee9c:	4b23      	ldr	r3, [pc, #140]	; (800ef2c <xTaskIncrementTick+0xf0>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800eea4:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800eea6:	429f      	cmp	r7, r3
 800eea8:	d327      	bcc.n	800eefa <xTaskIncrementTick+0xbe>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800eeaa:	1d25      	adds	r5, r4, #4
 800eeac:	0028      	movs	r0, r5
 800eeae:	f7ff fa7b 	bl	800e3a8 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eeb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d003      	beq.n	800eec0 <xTaskIncrementTick+0x84>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eeb8:	0020      	movs	r0, r4
 800eeba:	3018      	adds	r0, #24
 800eebc:	f7ff fa74 	bl	800e3a8 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800eec0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eec2:	4b1d      	ldr	r3, [pc, #116]	; (800ef38 <xTaskIncrementTick+0xfc>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d901      	bls.n	800eece <xTaskIncrementTick+0x92>
 800eeca:	4b1b      	ldr	r3, [pc, #108]	; (800ef38 <xTaskIncrementTick+0xfc>)
 800eecc:	601a      	str	r2, [r3, #0]
 800eece:	0093      	lsls	r3, r2, #2
 800eed0:	189b      	adds	r3, r3, r2
 800eed2:	0098      	lsls	r0, r3, #2
 800eed4:	4b14      	ldr	r3, [pc, #80]	; (800ef28 <xTaskIncrementTick+0xec>)
 800eed6:	18c0      	adds	r0, r0, r3
 800eed8:	0029      	movs	r1, r5
 800eeda:	f7ff fa43 	bl	800e364 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eede:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800eee0:	4b10      	ldr	r3, [pc, #64]	; (800ef24 <xTaskIncrementTick+0xe8>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d2d2      	bcs.n	800ee90 <xTaskIncrementTick+0x54>
 800eeea:	e7d2      	b.n	800ee92 <xTaskIncrementTick+0x56>
BaseType_t xSwitchRequired = pdFALSE;
 800eeec:	2600      	movs	r6, #0
 800eeee:	e7d0      	b.n	800ee92 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = portMAX_DELAY;
 800eef0:	4b0b      	ldr	r3, [pc, #44]	; (800ef20 <xTaskIncrementTick+0xe4>)
 800eef2:	2201      	movs	r2, #1
 800eef4:	4252      	negs	r2, r2
 800eef6:	601a      	str	r2, [r3, #0]
						break;
 800eef8:	e7b1      	b.n	800ee5e <xTaskIncrementTick+0x22>
							xNextTaskUnblockTime = xItemValue;
 800eefa:	4a09      	ldr	r2, [pc, #36]	; (800ef20 <xTaskIncrementTick+0xe4>)
 800eefc:	6013      	str	r3, [r2, #0]
							break;
 800eefe:	e7ae      	b.n	800ee5e <xTaskIncrementTick+0x22>
		++uxPendedTicks;
 800ef00:	4a0e      	ldr	r2, [pc, #56]	; (800ef3c <xTaskIncrementTick+0x100>)
 800ef02:	6813      	ldr	r3, [r2, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ef08:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800ef0a:	4b0d      	ldr	r3, [pc, #52]	; (800ef40 <xTaskIncrementTick+0x104>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d000      	beq.n	800ef14 <xTaskIncrementTick+0xd8>
			xSwitchRequired = pdTRUE;
 800ef12:	2601      	movs	r6, #1
}
 800ef14:	0030      	movs	r0, r6
 800ef16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef18:	200016e4 	.word	0x200016e4
 800ef1c:	20001760 	.word	0x20001760
 800ef20:	20000118 	.word	0x20000118
 800ef24:	20001640 	.word	0x20001640
 800ef28:	2000164c 	.word	0x2000164c
 800ef2c:	20001644 	.word	0x20001644
 800ef30:	20001648 	.word	0x20001648
 800ef34:	2000171c 	.word	0x2000171c
 800ef38:	200016f0 	.word	0x200016f0
 800ef3c:	200016e0 	.word	0x200016e0
 800ef40:	20001764 	.word	0x20001764

0800ef44 <xTaskResumeAll>:
{
 800ef44:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 800ef46:	f000 fe4b 	bl	800fbe0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ef4a:	4b2c      	ldr	r3, [pc, #176]	; (800effc <xTaskResumeAll+0xb8>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	3a01      	subs	r2, #1
 800ef50:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d14b      	bne.n	800eff0 <xTaskResumeAll+0xac>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef58:	4b29      	ldr	r3, [pc, #164]	; (800f000 <xTaskResumeAll+0xbc>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10f      	bne.n	800ef80 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800ef60:	2400      	movs	r4, #0
 800ef62:	e046      	b.n	800eff2 <xTaskResumeAll+0xae>
					prvAddTaskToReadyList( pxTCB );
 800ef64:	0098      	lsls	r0, r3, #2
 800ef66:	18c0      	adds	r0, r0, r3
 800ef68:	0080      	lsls	r0, r0, #2
 800ef6a:	4b26      	ldr	r3, [pc, #152]	; (800f004 <xTaskResumeAll+0xc0>)
 800ef6c:	18c0      	adds	r0, r0, r3
 800ef6e:	0029      	movs	r1, r5
 800ef70:	f7ff f9f8 	bl	800e364 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ef76:	4b24      	ldr	r3, [pc, #144]	; (800f008 <xTaskResumeAll+0xc4>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d216      	bcs.n	800efae <xTaskResumeAll+0x6a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef80:	4b22      	ldr	r3, [pc, #136]	; (800f00c <xTaskResumeAll+0xc8>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d016      	beq.n	800efb6 <xTaskResumeAll+0x72>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ef88:	4b20      	ldr	r3, [pc, #128]	; (800f00c <xTaskResumeAll+0xc8>)
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef8e:	0020      	movs	r0, r4
 800ef90:	3018      	adds	r0, #24
 800ef92:	f7ff fa09 	bl	800e3a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800ef96:	1d25      	adds	r5, r4, #4
 800ef98:	0028      	movs	r0, r5
 800ef9a:	f7ff fa05 	bl	800e3a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800efa0:	4a1b      	ldr	r2, [pc, #108]	; (800f010 <xTaskResumeAll+0xcc>)
 800efa2:	6812      	ldr	r2, [r2, #0]
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d9dd      	bls.n	800ef64 <xTaskResumeAll+0x20>
 800efa8:	4a19      	ldr	r2, [pc, #100]	; (800f010 <xTaskResumeAll+0xcc>)
 800efaa:	6013      	str	r3, [r2, #0]
 800efac:	e7da      	b.n	800ef64 <xTaskResumeAll+0x20>
						xYieldPending = pdTRUE;
 800efae:	4b19      	ldr	r3, [pc, #100]	; (800f014 <xTaskResumeAll+0xd0>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
 800efb4:	e7e4      	b.n	800ef80 <xTaskResumeAll+0x3c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800efb6:	4b18      	ldr	r3, [pc, #96]	; (800f018 <xTaskResumeAll+0xd4>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d109      	bne.n	800efd2 <xTaskResumeAll+0x8e>
				if( xYieldPending == pdTRUE )
 800efbe:	4b15      	ldr	r3, [pc, #84]	; (800f014 <xTaskResumeAll+0xd0>)
 800efc0:	681c      	ldr	r4, [r3, #0]
 800efc2:	2c01      	cmp	r4, #1
 800efc4:	d011      	beq.n	800efea <xTaskResumeAll+0xa6>
BaseType_t xAlreadyYielded = pdFALSE;
 800efc6:	2400      	movs	r4, #0
 800efc8:	e013      	b.n	800eff2 <xTaskResumeAll+0xae>
						--uxPendedTicks;
 800efca:	4a13      	ldr	r2, [pc, #76]	; (800f018 <xTaskResumeAll+0xd4>)
 800efcc:	6813      	ldr	r3, [r2, #0]
 800efce:	3b01      	subs	r3, #1
 800efd0:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800efd2:	4b11      	ldr	r3, [pc, #68]	; (800f018 <xTaskResumeAll+0xd4>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d0f1      	beq.n	800efbe <xTaskResumeAll+0x7a>
						if( xTaskIncrementTick() != pdFALSE )
 800efda:	f7ff ff2f 	bl	800ee3c <xTaskIncrementTick>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d0f3      	beq.n	800efca <xTaskResumeAll+0x86>
							xYieldPending = pdTRUE;
 800efe2:	4b0c      	ldr	r3, [pc, #48]	; (800f014 <xTaskResumeAll+0xd0>)
 800efe4:	2201      	movs	r2, #1
 800efe6:	601a      	str	r2, [r3, #0]
 800efe8:	e7ef      	b.n	800efca <xTaskResumeAll+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800efea:	f000 fded 	bl	800fbc8 <vPortYield>
 800efee:	e000      	b.n	800eff2 <xTaskResumeAll+0xae>
BaseType_t xAlreadyYielded = pdFALSE;
 800eff0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800eff2:	f000 fe01 	bl	800fbf8 <vPortExitCritical>
}
 800eff6:	0020      	movs	r0, r4
 800eff8:	bd70      	pop	{r4, r5, r6, pc}
 800effa:	46c0      	nop			; (mov r8, r8)
 800effc:	200016e4 	.word	0x200016e4
 800f000:	200016dc 	.word	0x200016dc
 800f004:	2000164c 	.word	0x2000164c
 800f008:	20001640 	.word	0x20001640
 800f00c:	20001720 	.word	0x20001720
 800f010:	200016f0 	.word	0x200016f0
 800f014:	20001764 	.word	0x20001764
 800f018:	200016e0 	.word	0x200016e0

0800f01c <vTaskDelay>:
	{
 800f01c:	b510      	push	{r4, lr}
 800f01e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f020:	d010      	beq.n	800f044 <vTaskDelay+0x28>
			vTaskSuspendAll();
 800f022:	f7ff fef7 	bl	800ee14 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f026:	4b09      	ldr	r3, [pc, #36]	; (800f04c <vTaskDelay+0x30>)
 800f028:	6818      	ldr	r0, [r3, #0]
 800f02a:	1904      	adds	r4, r0, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f02c:	4b08      	ldr	r3, [pc, #32]	; (800f050 <vTaskDelay+0x34>)
 800f02e:	6818      	ldr	r0, [r3, #0]
 800f030:	3004      	adds	r0, #4
 800f032:	f7ff f9b9 	bl	800e3a8 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f036:	0020      	movs	r0, r4
 800f038:	f7ff fd96 	bl	800eb68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f03c:	f7ff ff82 	bl	800ef44 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f040:	2800      	cmp	r0, #0
 800f042:	d101      	bne.n	800f048 <vTaskDelay+0x2c>
			portYIELD_WITHIN_API();
 800f044:	f000 fdc0 	bl	800fbc8 <vPortYield>
	}
 800f048:	bd10      	pop	{r4, pc}
 800f04a:	46c0      	nop			; (mov r8, r8)
 800f04c:	20001760 	.word	0x20001760
 800f050:	20001640 	.word	0x20001640

0800f054 <prvCheckTasksWaitingTermination>:
{
 800f054:	b510      	push	{r4, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f056:	4b11      	ldr	r3, [pc, #68]	; (800f09c <prvCheckTasksWaitingTermination+0x48>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d01d      	beq.n	800f09a <prvCheckTasksWaitingTermination+0x46>
			vTaskSuspendAll();
 800f05e:	f7ff fed9 	bl	800ee14 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f062:	4b0f      	ldr	r3, [pc, #60]	; (800f0a0 <prvCheckTasksWaitingTermination+0x4c>)
 800f064:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
 800f066:	f7ff ff6d 	bl	800ef44 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f06a:	2c00      	cmp	r4, #0
 800f06c:	d0f3      	beq.n	800f056 <prvCheckTasksWaitingTermination+0x2>
				taskENTER_CRITICAL();
 800f06e:	f000 fdb7 	bl	800fbe0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f072:	4b0b      	ldr	r3, [pc, #44]	; (800f0a0 <prvCheckTasksWaitingTermination+0x4c>)
 800f074:	68db      	ldr	r3, [r3, #12]
 800f076:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f078:	1d20      	adds	r0, r4, #4
 800f07a:	f7ff f995 	bl	800e3a8 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f07e:	4a09      	ldr	r2, [pc, #36]	; (800f0a4 <prvCheckTasksWaitingTermination+0x50>)
 800f080:	6813      	ldr	r3, [r2, #0]
 800f082:	3b01      	subs	r3, #1
 800f084:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f086:	4a05      	ldr	r2, [pc, #20]	; (800f09c <prvCheckTasksWaitingTermination+0x48>)
 800f088:	6813      	ldr	r3, [r2, #0]
 800f08a:	3b01      	subs	r3, #1
 800f08c:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f08e:	f000 fdb3 	bl	800fbf8 <vPortExitCritical>
				prvDeleteTCB( pxTCB );
 800f092:	0020      	movs	r0, r4
 800f094:	f7ff fce0 	bl	800ea58 <prvDeleteTCB>
 800f098:	e7dd      	b.n	800f056 <prvCheckTasksWaitingTermination+0x2>
}
 800f09a:	bd10      	pop	{r4, pc}
 800f09c:	200016ec 	.word	0x200016ec
 800f0a0:	2000174c 	.word	0x2000174c
 800f0a4:	200016dc 	.word	0x200016dc

0800f0a8 <prvIdleTask>:
{
 800f0a8:	b510      	push	{r4, lr}
		prvCheckTasksWaitingTermination();
 800f0aa:	f7ff ffd3 	bl	800f054 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f0ae:	4b03      	ldr	r3, [pc, #12]	; (800f0bc <prvIdleTask+0x14>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d9f9      	bls.n	800f0aa <prvIdleTask+0x2>
				taskYIELD();
 800f0b6:	f000 fd87 	bl	800fbc8 <vPortYield>
 800f0ba:	e7f6      	b.n	800f0aa <prvIdleTask+0x2>
 800f0bc:	2000164c 	.word	0x2000164c

0800f0c0 <uxTaskGetSystemState>:
	{
 800f0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c2:	0006      	movs	r6, r0
 800f0c4:	000c      	movs	r4, r1
 800f0c6:	0015      	movs	r5, r2
		vTaskSuspendAll();
 800f0c8:	f7ff fea4 	bl	800ee14 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f0cc:	4b1e      	ldr	r3, [pc, #120]	; (800f148 <uxTaskGetSystemState+0x88>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	42a3      	cmp	r3, r4
 800f0d2:	d833      	bhi.n	800f13c <uxTaskGetSystemState+0x7c>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f0d4:	2707      	movs	r7, #7
 800f0d6:	2400      	movs	r4, #0
					uxQueue--;
 800f0d8:	3f01      	subs	r7, #1
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f0da:	0160      	lsls	r0, r4, #5
 800f0dc:	00b9      	lsls	r1, r7, #2
 800f0de:	19c9      	adds	r1, r1, r7
 800f0e0:	0089      	lsls	r1, r1, #2
 800f0e2:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <uxTaskGetSystemState+0x8c>)
 800f0e4:	18c9      	adds	r1, r1, r3
 800f0e6:	1830      	adds	r0, r6, r0
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	f7ff fc51 	bl	800e990 <prvListTaskWithinSingleList>
 800f0ee:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0f0:	2f00      	cmp	r7, #0
 800f0f2:	d1f1      	bne.n	800f0d8 <uxTaskGetSystemState+0x18>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f0f4:	0160      	lsls	r0, r4, #5
 800f0f6:	4b16      	ldr	r3, [pc, #88]	; (800f150 <uxTaskGetSystemState+0x90>)
 800f0f8:	6819      	ldr	r1, [r3, #0]
 800f0fa:	1830      	adds	r0, r6, r0
 800f0fc:	2202      	movs	r2, #2
 800f0fe:	f7ff fc47 	bl	800e990 <prvListTaskWithinSingleList>
 800f102:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f104:	0160      	lsls	r0, r4, #5
 800f106:	4b13      	ldr	r3, [pc, #76]	; (800f154 <uxTaskGetSystemState+0x94>)
 800f108:	6819      	ldr	r1, [r3, #0]
 800f10a:	1830      	adds	r0, r6, r0
 800f10c:	2202      	movs	r2, #2
 800f10e:	f7ff fc3f 	bl	800e990 <prvListTaskWithinSingleList>
 800f112:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f114:	0160      	lsls	r0, r4, #5
 800f116:	1830      	adds	r0, r6, r0
 800f118:	2204      	movs	r2, #4
 800f11a:	490f      	ldr	r1, [pc, #60]	; (800f158 <uxTaskGetSystemState+0x98>)
 800f11c:	f7ff fc38 	bl	800e990 <prvListTaskWithinSingleList>
 800f120:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f122:	0160      	lsls	r0, r4, #5
 800f124:	1830      	adds	r0, r6, r0
 800f126:	2203      	movs	r2, #3
 800f128:	490c      	ldr	r1, [pc, #48]	; (800f15c <uxTaskGetSystemState+0x9c>)
 800f12a:	f7ff fc31 	bl	800e990 <prvListTaskWithinSingleList>
 800f12e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f130:	2d00      	cmp	r5, #0
 800f132:	d004      	beq.n	800f13e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f134:	f7f8 fafc 	bl	8007730 <ulMainGetRunTimeCounterValue>
 800f138:	6028      	str	r0, [r5, #0]
 800f13a:	e000      	b.n	800f13e <uxTaskGetSystemState+0x7e>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f13c:	2400      	movs	r4, #0
		( void ) xTaskResumeAll();
 800f13e:	f7ff ff01 	bl	800ef44 <xTaskResumeAll>
	}
 800f142:	0020      	movs	r0, r4
 800f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f146:	46c0      	nop			; (mov r8, r8)
 800f148:	200016dc 	.word	0x200016dc
 800f14c:	2000164c 	.word	0x2000164c
 800f150:	20001644 	.word	0x20001644
 800f154:	20001648 	.word	0x20001648
 800f158:	2000174c 	.word	0x2000174c
 800f15c:	20001738 	.word	0x20001738

0800f160 <vTaskSwitchContext>:
{
 800f160:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f162:	4b33      	ldr	r3, [pc, #204]	; (800f230 <vTaskSwitchContext+0xd0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f16a:	4b32      	ldr	r3, [pc, #200]	; (800f234 <vTaskSwitchContext+0xd4>)
 800f16c:	2201      	movs	r2, #1
 800f16e:	601a      	str	r2, [r3, #0]
}
 800f170:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f172:	4b30      	ldr	r3, [pc, #192]	; (800f234 <vTaskSwitchContext+0xd4>)
 800f174:	2200      	movs	r2, #0
 800f176:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f178:	f7f8 fada 	bl	8007730 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f17c:	4b2e      	ldr	r3, [pc, #184]	; (800f238 <vTaskSwitchContext+0xd8>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4298      	cmp	r0, r3
 800f182:	d906      	bls.n	800f192 <vTaskSwitchContext+0x32>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f184:	4a2d      	ldr	r2, [pc, #180]	; (800f23c <vTaskSwitchContext+0xdc>)
 800f186:	6812      	ldr	r2, [r2, #0]
 800f188:	1ac3      	subs	r3, r0, r3
 800f18a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f18c:	468c      	mov	ip, r1
 800f18e:	4463      	add	r3, ip
 800f190:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f192:	4b29      	ldr	r3, [pc, #164]	; (800f238 <vTaskSwitchContext+0xd8>)
 800f194:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f196:	4b29      	ldr	r3, [pc, #164]	; (800f23c <vTaskSwitchContext+0xdc>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	6812      	ldr	r2, [r2, #0]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d916      	bls.n	800f1d2 <vTaskSwitchContext+0x72>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f1a4:	4b25      	ldr	r3, [pc, #148]	; (800f23c <vTaskSwitchContext+0xdc>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f1aa:	2214      	movs	r2, #20
 800f1ac:	4924      	ldr	r1, [pc, #144]	; (800f240 <vTaskSwitchContext+0xe0>)
 800f1ae:	f003 ffa5 	bl	80130fc <memcmp>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d114      	bne.n	800f1e0 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f1b6:	4b23      	ldr	r3, [pc, #140]	; (800f244 <vTaskSwitchContext+0xe4>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	0093      	lsls	r3, r2, #2
 800f1bc:	189b      	adds	r3, r3, r2
 800f1be:	009b      	lsls	r3, r3, #2
 800f1c0:	4a21      	ldr	r2, [pc, #132]	; (800f248 <vTaskSwitchContext+0xe8>)
 800f1c2:	589b      	ldr	r3, [r3, r2]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d112      	bne.n	800f1ee <vTaskSwitchContext+0x8e>
 800f1c8:	4a1e      	ldr	r2, [pc, #120]	; (800f244 <vTaskSwitchContext+0xe4>)
 800f1ca:	6813      	ldr	r3, [r2, #0]
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	e7f1      	b.n	800f1b6 <vTaskSwitchContext+0x56>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f1d2:	4b1a      	ldr	r3, [pc, #104]	; (800f23c <vTaskSwitchContext+0xdc>)
 800f1d4:	6818      	ldr	r0, [r3, #0]
 800f1d6:	6819      	ldr	r1, [r3, #0]
 800f1d8:	3134      	adds	r1, #52	; 0x34
 800f1da:	f7fe fa33 	bl	800d644 <vApplicationStackOverflowHook>
 800f1de:	e7e1      	b.n	800f1a4 <vTaskSwitchContext+0x44>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f1e0:	4b16      	ldr	r3, [pc, #88]	; (800f23c <vTaskSwitchContext+0xdc>)
 800f1e2:	6818      	ldr	r0, [r3, #0]
 800f1e4:	6819      	ldr	r1, [r3, #0]
 800f1e6:	3134      	adds	r1, #52	; 0x34
 800f1e8:	f7fe fa2c 	bl	800d644 <vApplicationStackOverflowHook>
 800f1ec:	e7e3      	b.n	800f1b6 <vTaskSwitchContext+0x56>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f1ee:	4b15      	ldr	r3, [pc, #84]	; (800f244 <vTaskSwitchContext+0xe4>)
 800f1f0:	6819      	ldr	r1, [r3, #0]
 800f1f2:	0014      	movs	r4, r2
 800f1f4:	008b      	lsls	r3, r1, #2
 800f1f6:	185a      	adds	r2, r3, r1
 800f1f8:	0092      	lsls	r2, r2, #2
 800f1fa:	18a2      	adds	r2, r4, r2
 800f1fc:	6850      	ldr	r0, [r2, #4]
 800f1fe:	6840      	ldr	r0, [r0, #4]
 800f200:	6050      	str	r0, [r2, #4]
 800f202:	185b      	adds	r3, r3, r1
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	3308      	adds	r3, #8
 800f208:	191b      	adds	r3, r3, r4
 800f20a:	4298      	cmp	r0, r3
 800f20c:	d009      	beq.n	800f222 <vTaskSwitchContext+0xc2>
 800f20e:	008b      	lsls	r3, r1, #2
 800f210:	1859      	adds	r1, r3, r1
 800f212:	0089      	lsls	r1, r1, #2
 800f214:	4b0c      	ldr	r3, [pc, #48]	; (800f248 <vTaskSwitchContext+0xe8>)
 800f216:	1859      	adds	r1, r3, r1
 800f218:	684b      	ldr	r3, [r1, #4]
 800f21a:	68da      	ldr	r2, [r3, #12]
 800f21c:	4b07      	ldr	r3, [pc, #28]	; (800f23c <vTaskSwitchContext+0xdc>)
 800f21e:	601a      	str	r2, [r3, #0]
}
 800f220:	e7a6      	b.n	800f170 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f222:	6840      	ldr	r0, [r0, #4]
 800f224:	008b      	lsls	r3, r1, #2
 800f226:	185b      	adds	r3, r3, r1
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	18e3      	adds	r3, r4, r3
 800f22c:	6058      	str	r0, [r3, #4]
 800f22e:	e7ee      	b.n	800f20e <vTaskSwitchContext+0xae>
 800f230:	200016e4 	.word	0x200016e4
 800f234:	20001764 	.word	0x20001764
 800f238:	200016d8 	.word	0x200016d8
 800f23c:	20001640 	.word	0x20001640
 800f240:	0801a9dc 	.word	0x0801a9dc
 800f244:	200016f0 	.word	0x200016f0
 800f248:	2000164c 	.word	0x2000164c

0800f24c <vTaskPlaceOnEventList>:
{
 800f24c:	b570      	push	{r4, r5, r6, lr}
 800f24e:	000c      	movs	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f250:	4d0b      	ldr	r5, [pc, #44]	; (800f280 <vTaskPlaceOnEventList+0x34>)
 800f252:	6829      	ldr	r1, [r5, #0]
 800f254:	3118      	adds	r1, #24
 800f256:	f7ff f890 	bl	800e37a <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f25a:	6828      	ldr	r0, [r5, #0]
 800f25c:	3004      	adds	r0, #4
 800f25e:	f7ff f8a3 	bl	800e3a8 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f262:	1c63      	adds	r3, r4, #1
 800f264:	d005      	beq.n	800f272 <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800f266:	4b07      	ldr	r3, [pc, #28]	; (800f284 <vTaskPlaceOnEventList+0x38>)
 800f268:	6818      	ldr	r0, [r3, #0]
 800f26a:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f26c:	f7ff fc7c 	bl	800eb68 <prvAddCurrentTaskToDelayedList>
}
 800f270:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f272:	4b03      	ldr	r3, [pc, #12]	; (800f280 <vTaskPlaceOnEventList+0x34>)
 800f274:	6819      	ldr	r1, [r3, #0]
 800f276:	3104      	adds	r1, #4
 800f278:	4803      	ldr	r0, [pc, #12]	; (800f288 <vTaskPlaceOnEventList+0x3c>)
 800f27a:	f7ff f873 	bl	800e364 <vListInsertEnd>
 800f27e:	e7f7      	b.n	800f270 <vTaskPlaceOnEventList+0x24>
 800f280:	20001640 	.word	0x20001640
 800f284:	20001760 	.word	0x20001760
 800f288:	20001738 	.word	0x20001738

0800f28c <vTaskPlaceOnEventListRestricted>:
	{
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	000c      	movs	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f290:	4d07      	ldr	r5, [pc, #28]	; (800f2b0 <vTaskPlaceOnEventListRestricted+0x24>)
 800f292:	6829      	ldr	r1, [r5, #0]
 800f294:	3118      	adds	r1, #24
 800f296:	f7ff f865 	bl	800e364 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f29a:	6828      	ldr	r0, [r5, #0]
 800f29c:	3004      	adds	r0, #4
 800f29e:	f7ff f883 	bl	800e3a8 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f2a2:	4b04      	ldr	r3, [pc, #16]	; (800f2b4 <vTaskPlaceOnEventListRestricted+0x28>)
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f2a8:	f7ff fc5e 	bl	800eb68 <prvAddCurrentTaskToDelayedList>
	}
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
 800f2ae:	46c0      	nop			; (mov r8, r8)
 800f2b0:	20001640 	.word	0x20001640
 800f2b4:	20001760 	.word	0x20001760

0800f2b8 <xTaskRemoveFromEventList>:
{
 800f2b8:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f2ba:	68c3      	ldr	r3, [r0, #12]
 800f2bc:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2be:	0025      	movs	r5, r4
 800f2c0:	3518      	adds	r5, #24
 800f2c2:	0028      	movs	r0, r5
 800f2c4:	f7ff f870 	bl	800e3a8 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2c8:	4b14      	ldr	r3, [pc, #80]	; (800f31c <xTaskRemoveFromEventList+0x64>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d11d      	bne.n	800f30c <xTaskRemoveFromEventList+0x54>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f2d0:	1d25      	adds	r5, r4, #4
 800f2d2:	0028      	movs	r0, r5
 800f2d4:	f7ff f868 	bl	800e3a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2da:	4a11      	ldr	r2, [pc, #68]	; (800f320 <xTaskRemoveFromEventList+0x68>)
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d901      	bls.n	800f2e6 <xTaskRemoveFromEventList+0x2e>
 800f2e2:	4a0f      	ldr	r2, [pc, #60]	; (800f320 <xTaskRemoveFromEventList+0x68>)
 800f2e4:	6013      	str	r3, [r2, #0]
 800f2e6:	0098      	lsls	r0, r3, #2
 800f2e8:	18c0      	adds	r0, r0, r3
 800f2ea:	0080      	lsls	r0, r0, #2
 800f2ec:	4b0d      	ldr	r3, [pc, #52]	; (800f324 <xTaskRemoveFromEventList+0x6c>)
 800f2ee:	18c0      	adds	r0, r0, r3
 800f2f0:	0029      	movs	r1, r5
 800f2f2:	f7ff f837 	bl	800e364 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f2f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f2f8:	4b0b      	ldr	r3, [pc, #44]	; (800f328 <xTaskRemoveFromEventList+0x70>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d909      	bls.n	800f316 <xTaskRemoveFromEventList+0x5e>
		xYieldPending = pdTRUE;
 800f302:	4b0a      	ldr	r3, [pc, #40]	; (800f32c <xTaskRemoveFromEventList+0x74>)
 800f304:	2201      	movs	r2, #1
 800f306:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f308:	2001      	movs	r0, #1
}
 800f30a:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f30c:	0029      	movs	r1, r5
 800f30e:	4808      	ldr	r0, [pc, #32]	; (800f330 <xTaskRemoveFromEventList+0x78>)
 800f310:	f7ff f828 	bl	800e364 <vListInsertEnd>
 800f314:	e7ef      	b.n	800f2f6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800f316:	2000      	movs	r0, #0
	return xReturn;
 800f318:	e7f7      	b.n	800f30a <xTaskRemoveFromEventList+0x52>
 800f31a:	46c0      	nop			; (mov r8, r8)
 800f31c:	200016e4 	.word	0x200016e4
 800f320:	200016f0 	.word	0x200016f0
 800f324:	2000164c 	.word	0x2000164c
 800f328:	20001640 	.word	0x20001640
 800f32c:	20001764 	.word	0x20001764
 800f330:	20001720 	.word	0x20001720

0800f334 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f334:	4b03      	ldr	r3, [pc, #12]	; (800f344 <vTaskSetTimeOutState+0x10>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f33a:	4b03      	ldr	r3, [pc, #12]	; (800f348 <vTaskSetTimeOutState+0x14>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	6043      	str	r3, [r0, #4]
}
 800f340:	4770      	bx	lr
 800f342:	46c0      	nop			; (mov r8, r8)
 800f344:	2000171c 	.word	0x2000171c
 800f348:	20001760 	.word	0x20001760

0800f34c <xTaskCheckForTimeOut>:
{
 800f34c:	b570      	push	{r4, r5, r6, lr}
 800f34e:	0004      	movs	r4, r0
 800f350:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800f352:	f000 fc45 	bl	800fbe0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f356:	4b11      	ldr	r3, [pc, #68]	; (800f39c <xTaskCheckForTimeOut+0x50>)
 800f358:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f35a:	682b      	ldr	r3, [r5, #0]
 800f35c:	1c59      	adds	r1, r3, #1
 800f35e:	d015      	beq.n	800f38c <xTaskCheckForTimeOut+0x40>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f360:	490f      	ldr	r1, [pc, #60]	; (800f3a0 <xTaskCheckForTimeOut+0x54>)
 800f362:	6809      	ldr	r1, [r1, #0]
 800f364:	6820      	ldr	r0, [r4, #0]
 800f366:	4288      	cmp	r0, r1
 800f368:	d002      	beq.n	800f370 <xTaskCheckForTimeOut+0x24>
 800f36a:	6861      	ldr	r1, [r4, #4]
 800f36c:	4291      	cmp	r1, r2
 800f36e:	d912      	bls.n	800f396 <xTaskCheckForTimeOut+0x4a>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f370:	6861      	ldr	r1, [r4, #4]
 800f372:	1a50      	subs	r0, r2, r1
 800f374:	4283      	cmp	r3, r0
 800f376:	d801      	bhi.n	800f37c <xTaskCheckForTimeOut+0x30>
			xReturn = pdTRUE;
 800f378:	2401      	movs	r4, #1
 800f37a:	e008      	b.n	800f38e <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f37c:	1a8a      	subs	r2, r1, r2
 800f37e:	18d3      	adds	r3, r2, r3
 800f380:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f382:	0020      	movs	r0, r4
 800f384:	f7ff ffd6 	bl	800f334 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f388:	2400      	movs	r4, #0
 800f38a:	e000      	b.n	800f38e <xTaskCheckForTimeOut+0x42>
				xReturn = pdFALSE;
 800f38c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f38e:	f000 fc33 	bl	800fbf8 <vPortExitCritical>
}
 800f392:	0020      	movs	r0, r4
 800f394:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800f396:	2401      	movs	r4, #1
 800f398:	e7f9      	b.n	800f38e <xTaskCheckForTimeOut+0x42>
 800f39a:	46c0      	nop			; (mov r8, r8)
 800f39c:	20001760 	.word	0x20001760
 800f3a0:	2000171c 	.word	0x2000171c

0800f3a4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f3a4:	4b01      	ldr	r3, [pc, #4]	; (800f3ac <vTaskMissedYield+0x8>)
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	601a      	str	r2, [r3, #0]
}
 800f3aa:	4770      	bx	lr
 800f3ac:	20001764 	.word	0x20001764

0800f3b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f3b0:	4b06      	ldr	r3, [pc, #24]	; (800f3cc <xTaskGetSchedulerState+0x1c>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d007      	beq.n	800f3c8 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3b8:	4b05      	ldr	r3, [pc, #20]	; (800f3d0 <xTaskGetSchedulerState+0x20>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f3c0:	2000      	movs	r0, #0
		return xReturn;
 800f3c2:	e002      	b.n	800f3ca <xTaskGetSchedulerState+0x1a>
				xReturn = taskSCHEDULER_RUNNING;
 800f3c4:	2002      	movs	r0, #2
 800f3c6:	e000      	b.n	800f3ca <xTaskGetSchedulerState+0x1a>
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f3c8:	2001      	movs	r0, #1
	}
 800f3ca:	4770      	bx	lr
 800f3cc:	20001734 	.word	0x20001734
 800f3d0:	200016e4 	.word	0x200016e4

0800f3d4 <vTaskPriorityInherit>:
	{
 800f3d4:	b570      	push	{r4, r5, r6, lr}
 800f3d6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f3d8:	d01a      	beq.n	800f410 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f3da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f3dc:	4b19      	ldr	r3, [pc, #100]	; (800f444 <vTaskPriorityInherit+0x70>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3e2:	429a      	cmp	r2, r3
 800f3e4:	d214      	bcs.n	800f410 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3e6:	6983      	ldr	r3, [r0, #24]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	db05      	blt.n	800f3f8 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ec:	4b15      	ldr	r3, [pc, #84]	; (800f444 <vTaskPriorityInherit+0x70>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f3f2:	2307      	movs	r3, #7
 800f3f4:	1a5b      	subs	r3, r3, r1
 800f3f6:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f3f8:	0093      	lsls	r3, r2, #2
 800f3fa:	189b      	adds	r3, r3, r2
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	4a12      	ldr	r2, [pc, #72]	; (800f448 <vTaskPriorityInherit+0x74>)
 800f400:	189b      	adds	r3, r3, r2
 800f402:	6962      	ldr	r2, [r4, #20]
 800f404:	429a      	cmp	r2, r3
 800f406:	d004      	beq.n	800f412 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f408:	4b0e      	ldr	r3, [pc, #56]	; (800f444 <vTaskPriorityInherit+0x70>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f40e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f410:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f412:	1d25      	adds	r5, r4, #4
 800f414:	0028      	movs	r0, r5
 800f416:	f7fe ffc7 	bl	800e3a8 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f41a:	4b0a      	ldr	r3, [pc, #40]	; (800f444 <vTaskPriorityInherit+0x70>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f420:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f422:	4a0a      	ldr	r2, [pc, #40]	; (800f44c <vTaskPriorityInherit+0x78>)
 800f424:	6812      	ldr	r2, [r2, #0]
 800f426:	4293      	cmp	r3, r2
 800f428:	d808      	bhi.n	800f43c <vTaskPriorityInherit+0x68>
 800f42a:	0098      	lsls	r0, r3, #2
 800f42c:	18c0      	adds	r0, r0, r3
 800f42e:	0080      	lsls	r0, r0, #2
 800f430:	4b05      	ldr	r3, [pc, #20]	; (800f448 <vTaskPriorityInherit+0x74>)
 800f432:	18c0      	adds	r0, r0, r3
 800f434:	0029      	movs	r1, r5
 800f436:	f7fe ff95 	bl	800e364 <vListInsertEnd>
	}
 800f43a:	e7e9      	b.n	800f410 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f43c:	4a03      	ldr	r2, [pc, #12]	; (800f44c <vTaskPriorityInherit+0x78>)
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	e7f3      	b.n	800f42a <vTaskPriorityInherit+0x56>
 800f442:	46c0      	nop			; (mov r8, r8)
 800f444:	20001640 	.word	0x20001640
 800f448:	2000164c 	.word	0x2000164c
 800f44c:	200016f0 	.word	0x200016f0

0800f450 <xTaskPriorityDisinherit>:
	{
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f454:	d023      	beq.n	800f49e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f456:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f458:	3b01      	subs	r3, #1
 800f45a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f45c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f45e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f460:	428a      	cmp	r2, r1
 800f462:	d01e      	beq.n	800f4a2 <xTaskPriorityDisinherit+0x52>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <xTaskPriorityDisinherit+0x1c>
	BaseType_t xReturn = pdFALSE;
 800f468:	2000      	movs	r0, #0
	}
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f46c:	1d05      	adds	r5, r0, #4
 800f46e:	0028      	movs	r0, r5
 800f470:	f7fe ff9a 	bl	800e3a8 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f474:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f476:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f478:	2207      	movs	r2, #7
 800f47a:	1ad2      	subs	r2, r2, r3
 800f47c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f47e:	4a0a      	ldr	r2, [pc, #40]	; (800f4a8 <xTaskPriorityDisinherit+0x58>)
 800f480:	6812      	ldr	r2, [r2, #0]
 800f482:	4293      	cmp	r3, r2
 800f484:	d901      	bls.n	800f48a <xTaskPriorityDisinherit+0x3a>
 800f486:	4a08      	ldr	r2, [pc, #32]	; (800f4a8 <xTaskPriorityDisinherit+0x58>)
 800f488:	6013      	str	r3, [r2, #0]
 800f48a:	0098      	lsls	r0, r3, #2
 800f48c:	18c0      	adds	r0, r0, r3
 800f48e:	0080      	lsls	r0, r0, #2
 800f490:	4b06      	ldr	r3, [pc, #24]	; (800f4ac <xTaskPriorityDisinherit+0x5c>)
 800f492:	18c0      	adds	r0, r0, r3
 800f494:	0029      	movs	r1, r5
 800f496:	f7fe ff65 	bl	800e364 <vListInsertEnd>
					xReturn = pdTRUE;
 800f49a:	2001      	movs	r0, #1
 800f49c:	e7e5      	b.n	800f46a <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800f49e:	2000      	movs	r0, #0
 800f4a0:	e7e3      	b.n	800f46a <xTaskPriorityDisinherit+0x1a>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e7e1      	b.n	800f46a <xTaskPriorityDisinherit+0x1a>
 800f4a6:	46c0      	nop			; (mov r8, r8)
 800f4a8:	200016f0 	.word	0x200016f0
 800f4ac:	2000164c 	.word	0x2000164c

0800f4b0 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f4b0:	b570      	push	{r4, r5, r6, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	0005      	movs	r5, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f4ba:	4b29      	ldr	r3, [pc, #164]	; (800f560 <vTaskList+0xb0>)
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f4c0:	6818      	ldr	r0, [r3, #0]
 800f4c2:	0140      	lsls	r0, r0, #5
 800f4c4:	f000 fc3a 	bl	800fd3c <pvPortMalloc>
 800f4c8:	1e04      	subs	r4, r0, #0

		if( pxTaskStatusArray != NULL )
 800f4ca:	d047      	beq.n	800f55c <vTaskList+0xac>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f4cc:	9903      	ldr	r1, [sp, #12]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	f7ff fdf6 	bl	800f0c0 <uxTaskGetSystemState>
 800f4d4:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	9302      	str	r3, [sp, #8]
 800f4da:	e023      	b.n	800f524 <vTaskList+0x74>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f4dc:	2b02      	cmp	r3, #2
 800f4de:	d136      	bne.n	800f54e <vTaskList+0x9e>
				{
					case eReady:		cStatus = tskREADY_CHAR;
										break;

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f4e0:	2642      	movs	r6, #66	; 0x42
										break;
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f4e2:	9b02      	ldr	r3, [sp, #8]
 800f4e4:	015b      	lsls	r3, r3, #5
 800f4e6:	18e3      	adds	r3, r4, r3
 800f4e8:	6859      	ldr	r1, [r3, #4]
 800f4ea:	0028      	movs	r0, r5
 800f4ec:	f7ff fb66 	bl	800ebbc <prvWriteNameToBuffer>
 800f4f0:	0005      	movs	r5, r0

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f4f2:	9b02      	ldr	r3, [sp, #8]
 800f4f4:	015b      	lsls	r3, r3, #5
 800f4f6:	18e3      	adds	r3, r4, r3
 800f4f8:	691b      	ldr	r3, [r3, #16]
 800f4fa:	9a02      	ldr	r2, [sp, #8]
 800f4fc:	0152      	lsls	r2, r2, #5
 800f4fe:	18a2      	adds	r2, r4, r2
 800f500:	8b91      	ldrh	r1, [r2, #28]
 800f502:	9a02      	ldr	r2, [sp, #8]
 800f504:	0152      	lsls	r2, r2, #5
 800f506:	18a2      	adds	r2, r4, r2
 800f508:	6892      	ldr	r2, [r2, #8]
 800f50a:	9201      	str	r2, [sp, #4]
 800f50c:	9100      	str	r1, [sp, #0]
 800f50e:	0032      	movs	r2, r6
 800f510:	4914      	ldr	r1, [pc, #80]	; (800f564 <vTaskList+0xb4>)
 800f512:	f004 fbc3 	bl	8013c9c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f516:	0028      	movs	r0, r5
 800f518:	f7f0 fdfe 	bl	8000118 <strlen>
 800f51c:	182d      	adds	r5, r5, r0
			for( x = 0; x < uxArraySize; x++ )
 800f51e:	9b02      	ldr	r3, [sp, #8]
 800f520:	3301      	adds	r3, #1
 800f522:	9302      	str	r3, [sp, #8]
 800f524:	9a02      	ldr	r2, [sp, #8]
 800f526:	9b03      	ldr	r3, [sp, #12]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d214      	bcs.n	800f556 <vTaskList+0xa6>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f52c:	9b02      	ldr	r3, [sp, #8]
 800f52e:	015b      	lsls	r3, r3, #5
 800f530:	18e3      	adds	r3, r4, r3
 800f532:	7b1b      	ldrb	r3, [r3, #12]
 800f534:	2b03      	cmp	r3, #3
 800f536:	d008      	beq.n	800f54a <vTaskList+0x9a>
 800f538:	d803      	bhi.n	800f542 <vTaskList+0x92>
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d1ce      	bne.n	800f4dc <vTaskList+0x2c>
 800f53e:	2652      	movs	r6, #82	; 0x52
 800f540:	e7cf      	b.n	800f4e2 <vTaskList+0x32>
 800f542:	2b04      	cmp	r3, #4
 800f544:	d105      	bne.n	800f552 <vTaskList+0xa2>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f546:	2644      	movs	r6, #68	; 0x44
 800f548:	e7cb      	b.n	800f4e2 <vTaskList+0x32>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f54a:	2653      	movs	r6, #83	; 0x53
 800f54c:	e7c9      	b.n	800f4e2 <vTaskList+0x32>
										cStatus = 0x00;
 800f54e:	2600      	movs	r6, #0
 800f550:	e7c7      	b.n	800f4e2 <vTaskList+0x32>
 800f552:	2600      	movs	r6, #0
 800f554:	e7c5      	b.n	800f4e2 <vTaskList+0x32>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f556:	0020      	movs	r0, r4
 800f558:	f000 fc5e 	bl	800fe18 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f55c:	b004      	add	sp, #16
 800f55e:	bd70      	pop	{r4, r5, r6, pc}
 800f560:	200016dc 	.word	0x200016dc
 800f564:	0801a9b4 	.word	0x0801a9b4

0800f568 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f56a:	b087      	sub	sp, #28
 800f56c:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f56e:	2300      	movs	r3, #0
 800f570:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f572:	4b26      	ldr	r3, [pc, #152]	; (800f60c <vTaskGetRunTimeStats+0xa4>)
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	9205      	str	r2, [sp, #20]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f578:	6818      	ldr	r0, [r3, #0]
 800f57a:	0140      	lsls	r0, r0, #5
 800f57c:	f000 fbde 	bl	800fd3c <pvPortMalloc>
 800f580:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f582:	d040      	beq.n	800f606 <vTaskGetRunTimeStats+0x9e>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f584:	9905      	ldr	r1, [sp, #20]
 800f586:	aa03      	add	r2, sp, #12
 800f588:	f7ff fd9a 	bl	800f0c0 <uxTaskGetSystemState>
 800f58c:	9005      	str	r0, [sp, #20]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f58e:	2164      	movs	r1, #100	; 0x64
 800f590:	9803      	ldr	r0, [sp, #12]
 800f592:	f7f0 fddd 	bl	8000150 <__udivsi3>
 800f596:	9003      	str	r0, [sp, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f598:	2800      	cmp	r0, #0
 800f59a:	d031      	beq.n	800f600 <vTaskGetRunTimeStats+0x98>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f59c:	2300      	movs	r3, #0
 800f59e:	9304      	str	r3, [sp, #16]
 800f5a0:	e00d      	b.n	800f5be <vTaskGetRunTimeStats+0x56>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f5a2:	9b04      	ldr	r3, [sp, #16]
 800f5a4:	015b      	lsls	r3, r3, #5
 800f5a6:	18f3      	adds	r3, r6, r3
 800f5a8:	699a      	ldr	r2, [r3, #24]
 800f5aa:	4919      	ldr	r1, [pc, #100]	; (800f610 <vTaskGetRunTimeStats+0xa8>)
 800f5ac:	f004 fb76 	bl	8013c9c <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer );
 800f5b0:	0020      	movs	r0, r4
 800f5b2:	f7f0 fdb1 	bl	8000118 <strlen>
 800f5b6:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f5b8:	9b04      	ldr	r3, [sp, #16]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	9304      	str	r3, [sp, #16]
 800f5be:	9a04      	ldr	r2, [sp, #16]
 800f5c0:	9b05      	ldr	r3, [sp, #20]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d21c      	bcs.n	800f600 <vTaskGetRunTimeStats+0x98>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f5c6:	9b04      	ldr	r3, [sp, #16]
 800f5c8:	015b      	lsls	r3, r3, #5
 800f5ca:	18f3      	adds	r3, r6, r3
 800f5cc:	699d      	ldr	r5, [r3, #24]
 800f5ce:	9f03      	ldr	r7, [sp, #12]
 800f5d0:	0039      	movs	r1, r7
 800f5d2:	0028      	movs	r0, r5
 800f5d4:	f7f0 fdbc 	bl	8000150 <__udivsi3>
 800f5d8:	9001      	str	r0, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f5da:	9b04      	ldr	r3, [sp, #16]
 800f5dc:	015b      	lsls	r3, r3, #5
 800f5de:	18f3      	adds	r3, r6, r3
 800f5e0:	6859      	ldr	r1, [r3, #4]
 800f5e2:	0020      	movs	r0, r4
 800f5e4:	f7ff faea 	bl	800ebbc <prvWriteNameToBuffer>
 800f5e8:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f5ea:	42bd      	cmp	r5, r7
 800f5ec:	d3d9      	bcc.n	800f5a2 <vTaskGetRunTimeStats+0x3a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f5ee:	9b04      	ldr	r3, [sp, #16]
 800f5f0:	015b      	lsls	r3, r3, #5
 800f5f2:	18f3      	adds	r3, r6, r3
 800f5f4:	699a      	ldr	r2, [r3, #24]
 800f5f6:	9b01      	ldr	r3, [sp, #4]
 800f5f8:	4906      	ldr	r1, [pc, #24]	; (800f614 <vTaskGetRunTimeStats+0xac>)
 800f5fa:	f004 fb4f 	bl	8013c9c <siprintf>
 800f5fe:	e7d7      	b.n	800f5b0 <vTaskGetRunTimeStats+0x48>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f600:	0030      	movs	r0, r6
 800f602:	f000 fc09 	bl	800fe18 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f606:	b007      	add	sp, #28
 800f608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f60a:	46c0      	nop			; (mov r8, r8)
 800f60c:	200016dc 	.word	0x200016dc
 800f610:	0801a9d0 	.word	0x0801a9d0
 800f614:	0801a9c4 	.word	0x0801a9c4

0800f618 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f618:	4b05      	ldr	r3, [pc, #20]	; (800f630 <pvTaskIncrementMutexHeldCount+0x18>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d004      	beq.n	800f62a <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f620:	4b03      	ldr	r3, [pc, #12]	; (800f630 <pvTaskIncrementMutexHeldCount+0x18>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f626:	3301      	adds	r3, #1
 800f628:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f62a:	4b01      	ldr	r3, [pc, #4]	; (800f630 <pvTaskIncrementMutexHeldCount+0x18>)
 800f62c:	6818      	ldr	r0, [r3, #0]
	}
 800f62e:	4770      	bx	lr
 800f630:	20001640 	.word	0x20001640

0800f634 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f634:	b570      	push	{r4, r5, r6, lr}
 800f636:	0004      	movs	r4, r0
 800f638:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f63a:	f000 fad1 	bl	800fbe0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f63e:	4b20      	ldr	r3, [pc, #128]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f644:	2b00      	cmp	r3, #0
 800f646:	d106      	bne.n	800f656 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f648:	4b1d      	ldr	r3, [pc, #116]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	235c      	movs	r3, #92	; 0x5c
 800f64e:	2101      	movs	r1, #1
 800f650:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f652:	2d00      	cmp	r5, #0
 800f654:	d117      	bne.n	800f686 <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f656:	f000 facf 	bl	800fbf8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800f65a:	f000 fac1 	bl	800fbe0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f65e:	4b18      	ldr	r3, [pc, #96]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f664:	2d00      	cmp	r5, #0
 800f666:	d005      	beq.n	800f674 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 800f668:	2c00      	cmp	r4, #0
 800f66a:	d022      	beq.n	800f6b2 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f66c:	4b14      	ldr	r3, [pc, #80]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2200      	movs	r2, #0
 800f672:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f674:	4b12      	ldr	r3, [pc, #72]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	235c      	movs	r3, #92	; 0x5c
 800f67a:	2100      	movs	r1, #0
 800f67c:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800f67e:	f000 fabb 	bl	800fbf8 <vPortExitCritical>

		return ulReturn;
	}
 800f682:	0028      	movs	r0, r5
 800f684:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f686:	4b0e      	ldr	r3, [pc, #56]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f688:	6818      	ldr	r0, [r3, #0]
 800f68a:	3004      	adds	r0, #4
 800f68c:	f7fe fe8c 	bl	800e3a8 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800f690:	1c6b      	adds	r3, r5, #1
 800f692:	d007      	beq.n	800f6a4 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 800f694:	4b0b      	ldr	r3, [pc, #44]	; (800f6c4 <ulTaskNotifyTake+0x90>)
 800f696:	6818      	ldr	r0, [r3, #0]
 800f698:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f69a:	f7ff fa65 	bl	800eb68 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800f69e:	f000 fa93 	bl	800fbc8 <vPortYield>
 800f6a2:	e7d8      	b.n	800f656 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6a4:	4b06      	ldr	r3, [pc, #24]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f6a6:	6819      	ldr	r1, [r3, #0]
 800f6a8:	3104      	adds	r1, #4
 800f6aa:	4807      	ldr	r0, [pc, #28]	; (800f6c8 <ulTaskNotifyTake+0x94>)
 800f6ac:	f7fe fe5a 	bl	800e364 <vListInsertEnd>
 800f6b0:	e7f5      	b.n	800f69e <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 800f6b2:	4b03      	ldr	r3, [pc, #12]	; (800f6c0 <ulTaskNotifyTake+0x8c>)
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	6593      	str	r3, [r2, #88]	; 0x58
 800f6bc:	e7da      	b.n	800f674 <ulTaskNotifyTake+0x40>
 800f6be:	46c0      	nop			; (mov r8, r8)
 800f6c0:	20001640 	.word	0x20001640
 800f6c4:	20001760 	.word	0x20001760
 800f6c8:	20001738 	.word	0x20001738

0800f6cc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ce:	0005      	movs	r5, r0
 800f6d0:	000f      	movs	r7, r1
 800f6d2:	0014      	movs	r4, r2
 800f6d4:	001e      	movs	r6, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800f6d6:	f000 fa83 	bl	800fbe0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f6da:	2e00      	cmp	r6, #0
 800f6dc:	d001      	beq.n	800f6e2 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f6de:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800f6e0:	6033      	str	r3, [r6, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800f6e2:	225c      	movs	r2, #92	; 0x5c
 800f6e4:	5cab      	ldrb	r3, [r5, r2]
 800f6e6:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800f6e8:	2102      	movs	r1, #2
 800f6ea:	54a9      	strb	r1, [r5, r2]

			switch( eAction )
 800f6ec:	2c03      	cmp	r4, #3
 800f6ee:	d01e      	beq.n	800f72e <xTaskGenericNotify+0x62>
 800f6f0:	d80a      	bhi.n	800f708 <xTaskGenericNotify+0x3c>
 800f6f2:	2c01      	cmp	r4, #1
 800f6f4:	d016      	beq.n	800f724 <xTaskGenericNotify+0x58>
 800f6f6:	2c02      	cmp	r4, #2
 800f6f8:	d104      	bne.n	800f704 <xTaskGenericNotify+0x38>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f6fa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800f6fc:	3201      	adds	r2, #1
 800f6fe:	65aa      	str	r2, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f700:	2401      	movs	r4, #1
					break;
 800f702:	e009      	b.n	800f718 <xTaskGenericNotify+0x4c>
			switch( eAction )
 800f704:	2401      	movs	r4, #1
 800f706:	e007      	b.n	800f718 <xTaskGenericNotify+0x4c>
 800f708:	2c04      	cmp	r4, #4
 800f70a:	d104      	bne.n	800f716 <xTaskGenericNotify+0x4a>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d011      	beq.n	800f734 <xTaskGenericNotify+0x68>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f710:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f712:	2401      	movs	r4, #1
 800f714:	e000      	b.n	800f718 <xTaskGenericNotify+0x4c>
			switch( eAction )
 800f716:	2401      	movs	r4, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d00d      	beq.n	800f738 <xTaskGenericNotify+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f71c:	f000 fa6c 	bl	800fbf8 <vPortExitCritical>

		return xReturn;
	}
 800f720:	0020      	movs	r0, r4
 800f722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 800f724:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f726:	430f      	orrs	r7, r1
 800f728:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f72a:	2401      	movs	r4, #1
					break;
 800f72c:	e7f4      	b.n	800f718 <xTaskGenericNotify+0x4c>
					pxTCB->ulNotifiedValue = ulValue;
 800f72e:	65af      	str	r7, [r5, #88]	; 0x58
	BaseType_t xReturn = pdPASS;
 800f730:	2401      	movs	r4, #1
					break;
 800f732:	e7f1      	b.n	800f718 <xTaskGenericNotify+0x4c>
						xReturn = pdFAIL;
 800f734:	2400      	movs	r4, #0
 800f736:	e7ef      	b.n	800f718 <xTaskGenericNotify+0x4c>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f738:	1d2e      	adds	r6, r5, #4
 800f73a:	0030      	movs	r0, r6
 800f73c:	f7fe fe34 	bl	800e3a8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f742:	4a0b      	ldr	r2, [pc, #44]	; (800f770 <xTaskGenericNotify+0xa4>)
 800f744:	6812      	ldr	r2, [r2, #0]
 800f746:	4293      	cmp	r3, r2
 800f748:	d901      	bls.n	800f74e <xTaskGenericNotify+0x82>
 800f74a:	4a09      	ldr	r2, [pc, #36]	; (800f770 <xTaskGenericNotify+0xa4>)
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	0098      	lsls	r0, r3, #2
 800f750:	18c0      	adds	r0, r0, r3
 800f752:	0080      	lsls	r0, r0, #2
 800f754:	4b07      	ldr	r3, [pc, #28]	; (800f774 <xTaskGenericNotify+0xa8>)
 800f756:	18c0      	adds	r0, r0, r3
 800f758:	0031      	movs	r1, r6
 800f75a:	f7fe fe03 	bl	800e364 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f75e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800f760:	4b05      	ldr	r3, [pc, #20]	; (800f778 <xTaskGenericNotify+0xac>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f766:	429a      	cmp	r2, r3
 800f768:	d9d8      	bls.n	800f71c <xTaskGenericNotify+0x50>
					taskYIELD_IF_USING_PREEMPTION();
 800f76a:	f000 fa2d 	bl	800fbc8 <vPortYield>
 800f76e:	e7d5      	b.n	800f71c <xTaskGenericNotify+0x50>
 800f770:	200016f0 	.word	0x200016f0
 800f774:	2000164c 	.word	0x2000164c
 800f778:	20001640 	.word	0x20001640

0800f77c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f77c:	4b06      	ldr	r3, [pc, #24]	; (800f798 <prvGetNextExpireTime+0x1c>)
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	6813      	ldr	r3, [r2, #0]
 800f782:	4259      	negs	r1, r3
 800f784:	414b      	adcs	r3, r1
 800f786:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d102      	bne.n	800f792 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f78c:	68d3      	ldr	r3, [r2, #12]
 800f78e:	6818      	ldr	r0, [r3, #0]
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
	}

	return xNextExpireTime;
}
 800f790:	4770      	bx	lr
		xNextExpireTime = ( TickType_t ) 0U;
 800f792:	2000      	movs	r0, #0
	return xNextExpireTime;
 800f794:	e7fc      	b.n	800f790 <prvGetNextExpireTime+0x14>
 800f796:	46c0      	nop			; (mov r8, r8)
 800f798:	20001768 	.word	0x20001768

0800f79c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f79c:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f79e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7a0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f7a2:	4291      	cmp	r1, r2
 800f7a4:	d80c      	bhi.n	800f7c0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800f7a6:	1ad2      	subs	r2, r2, r3
 800f7a8:	6983      	ldr	r3, [r0, #24]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d301      	bcc.n	800f7b2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f7ae:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800f7b0:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7b2:	1d01      	adds	r1, r0, #4
 800f7b4:	4b09      	ldr	r3, [pc, #36]	; (800f7dc <prvInsertTimerInActiveList+0x40>)
 800f7b6:	6818      	ldr	r0, [r3, #0]
 800f7b8:	f7fe fddf 	bl	800e37a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f7bc:	2000      	movs	r0, #0
 800f7be:	e7f7      	b.n	800f7b0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d201      	bcs.n	800f7c8 <prvInsertTimerInActiveList+0x2c>
 800f7c4:	4299      	cmp	r1, r3
 800f7c6:	d206      	bcs.n	800f7d6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7c8:	1d01      	adds	r1, r0, #4
 800f7ca:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <prvInsertTimerInActiveList+0x44>)
 800f7cc:	6818      	ldr	r0, [r3, #0]
 800f7ce:	f7fe fdd4 	bl	800e37a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	e7ec      	b.n	800f7b0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800f7d6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f7d8:	e7ea      	b.n	800f7b0 <prvInsertTimerInActiveList+0x14>
 800f7da:	46c0      	nop			; (mov r8, r8)
 800f7dc:	2000176c 	.word	0x2000176c
 800f7e0:	20001768 	.word	0x20001768

0800f7e4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f7e4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f7e6:	f000 f9fb 	bl	800fbe0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f7ea:	4b10      	ldr	r3, [pc, #64]	; (800f82c <prvCheckForValidListAndQueue+0x48>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d002      	beq.n	800f7f8 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7f2:	f000 fa01 	bl	800fbf8 <vPortExitCritical>
}
 800f7f6:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800f7f8:	4d0d      	ldr	r5, [pc, #52]	; (800f830 <prvCheckForValidListAndQueue+0x4c>)
 800f7fa:	0028      	movs	r0, r5
 800f7fc:	f7fe fda4 	bl	800e348 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f800:	4c0c      	ldr	r4, [pc, #48]	; (800f834 <prvCheckForValidListAndQueue+0x50>)
 800f802:	0020      	movs	r0, r4
 800f804:	f7fe fda0 	bl	800e348 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f808:	4b0b      	ldr	r3, [pc, #44]	; (800f838 <prvCheckForValidListAndQueue+0x54>)
 800f80a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f80c:	4b0b      	ldr	r3, [pc, #44]	; (800f83c <prvCheckForValidListAndQueue+0x58>)
 800f80e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f810:	2200      	movs	r2, #0
 800f812:	2110      	movs	r1, #16
 800f814:	2004      	movs	r0, #4
 800f816:	f7fe feb5 	bl	800e584 <xQueueGenericCreate>
 800f81a:	4b04      	ldr	r3, [pc, #16]	; (800f82c <prvCheckForValidListAndQueue+0x48>)
 800f81c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800f81e:	2800      	cmp	r0, #0
 800f820:	d0e7      	beq.n	800f7f2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f822:	4907      	ldr	r1, [pc, #28]	; (800f840 <prvCheckForValidListAndQueue+0x5c>)
 800f824:	f7ff f878 	bl	800e918 <vQueueAddToRegistry>
 800f828:	e7e3      	b.n	800f7f2 <prvCheckForValidListAndQueue+0xe>
 800f82a:	46c0      	nop			; (mov r8, r8)
 800f82c:	2000179c 	.word	0x2000179c
 800f830:	20001770 	.word	0x20001770
 800f834:	20001784 	.word	0x20001784
 800f838:	20001768 	.word	0x20001768
 800f83c:	2000176c 	.word	0x2000176c
 800f840:	0801a9f0 	.word	0x0801a9f0

0800f844 <xTimerCreateTimerTask>:
{
 800f844:	b500      	push	{lr}
 800f846:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800f848:	f7ff ffcc 	bl	800f7e4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f84c:	4b09      	ldr	r3, [pc, #36]	; (800f874 <xTimerCreateTimerTask+0x30>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00d      	beq.n	800f870 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800f854:	2300      	movs	r3, #0
 800f856:	9303      	str	r3, [sp, #12]
 800f858:	9302      	str	r3, [sp, #8]
 800f85a:	9301      	str	r3, [sp, #4]
 800f85c:	3303      	adds	r3, #3
 800f85e:	9300      	str	r3, [sp, #0]
 800f860:	2300      	movs	r3, #0
 800f862:	2296      	movs	r2, #150	; 0x96
 800f864:	4904      	ldr	r1, [pc, #16]	; (800f878 <xTimerCreateTimerTask+0x34>)
 800f866:	4805      	ldr	r0, [pc, #20]	; (800f87c <xTimerCreateTimerTask+0x38>)
 800f868:	f7ff f9ba 	bl	800ebe0 <xTaskGenericCreate>
}
 800f86c:	b005      	add	sp, #20
 800f86e:	bd00      	pop	{pc}
BaseType_t xReturn = pdFAIL;
 800f870:	2000      	movs	r0, #0
	return xReturn;
 800f872:	e7fb      	b.n	800f86c <xTimerCreateTimerTask+0x28>
 800f874:	2000179c 	.word	0x2000179c
 800f878:	0801a9f8 	.word	0x0801a9f8
 800f87c:	0800fafd 	.word	0x0800fafd

0800f880 <xTimerCreate>:
{
 800f880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f882:	b083      	sub	sp, #12
 800f884:	0007      	movs	r7, r0
 800f886:	000d      	movs	r5, r1
 800f888:	0016      	movs	r6, r2
 800f88a:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800f88c:	2900      	cmp	r1, #0
 800f88e:	d011      	beq.n	800f8b4 <xTimerCreate+0x34>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800f890:	202c      	movs	r0, #44	; 0x2c
 800f892:	f000 fa53 	bl	800fd3c <pvPortMalloc>
 800f896:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800f898:	d00d      	beq.n	800f8b6 <xTimerCreate+0x36>
			prvCheckForValidListAndQueue();
 800f89a:	f7ff ffa3 	bl	800f7e4 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800f89e:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f8a0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800f8a2:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800f8a4:	9b01      	ldr	r3, [sp, #4]
 800f8a6:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f8a8:	9b08      	ldr	r3, [sp, #32]
 800f8aa:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f8ac:	1d20      	adds	r0, r4, #4
 800f8ae:	f7fe fd56 	bl	800e35e <vListInitialiseItem>
			traceTIMER_CREATE( pxNewTimer );
 800f8b2:	e000      	b.n	800f8b6 <xTimerCreate+0x36>
		pxNewTimer = NULL;
 800f8b4:	2400      	movs	r4, #0
}
 800f8b6:	0020      	movs	r0, r4
 800f8b8:	b003      	add	sp, #12
 800f8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f8bc <xTimerGenericCommand>:
{
 800f8bc:	b530      	push	{r4, r5, lr}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	0004      	movs	r4, r0
 800f8c2:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800f8c4:	4b12      	ldr	r3, [pc, #72]	; (800f910 <xTimerGenericCommand+0x54>)
 800f8c6:	6818      	ldr	r0, [r3, #0]
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d01f      	beq.n	800f90c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800f8cc:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f8ce:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800f8d0:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f8d2:	2905      	cmp	r1, #5
 800f8d4:	dc13      	bgt.n	800f8fe <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f8d6:	f7ff fd6b 	bl	800f3b0 <xTaskGetSchedulerState>
 800f8da:	2802      	cmp	r0, #2
 800f8dc:	d007      	beq.n	800f8ee <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f8de:	4b0c      	ldr	r3, [pc, #48]	; (800f910 <xTimerGenericCommand+0x54>)
 800f8e0:	6818      	ldr	r0, [r3, #0]
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	4669      	mov	r1, sp
 800f8e8:	f7fe fe76 	bl	800e5d8 <xQueueGenericSend>
 800f8ec:	e00c      	b.n	800f908 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f8ee:	4b08      	ldr	r3, [pc, #32]	; (800f910 <xTimerGenericCommand+0x54>)
 800f8f0:	6818      	ldr	r0, [r3, #0]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	9a08      	ldr	r2, [sp, #32]
 800f8f6:	4669      	mov	r1, sp
 800f8f8:	f7fe fe6e 	bl	800e5d8 <xQueueGenericSend>
 800f8fc:	e004      	b.n	800f908 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f8fe:	2300      	movs	r3, #0
 800f900:	002a      	movs	r2, r5
 800f902:	4669      	mov	r1, sp
 800f904:	f7fe fedb 	bl	800e6be <xQueueGenericSendFromISR>
}
 800f908:	b005      	add	sp, #20
 800f90a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800f90c:	2000      	movs	r0, #0
	return xReturn;
 800f90e:	e7fb      	b.n	800f908 <xTimerGenericCommand+0x4c>
 800f910:	2000179c 	.word	0x2000179c

0800f914 <prvSwitchTimerLists>:
{
 800f914:	b570      	push	{r4, r5, r6, lr}
 800f916:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f918:	4b16      	ldr	r3, [pc, #88]	; (800f974 <prvSwitchTimerLists+0x60>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	2a00      	cmp	r2, #0
 800f920:	d020      	beq.n	800f964 <prvSwitchTimerLists+0x50>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f926:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f928:	1d25      	adds	r5, r4, #4
 800f92a:	0028      	movs	r0, r5
 800f92c:	f7fe fd3c 	bl	800e3a8 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f930:	0020      	movs	r0, r4
 800f932:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f934:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f936:	69e3      	ldr	r3, [r4, #28]
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d1ed      	bne.n	800f918 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f93c:	69a3      	ldr	r3, [r4, #24]
 800f93e:	199b      	adds	r3, r3, r6
			if( xReloadTime > xNextExpireTime )
 800f940:	429e      	cmp	r6, r3
 800f942:	d207      	bcs.n	800f954 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f944:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f946:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f948:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <prvSwitchTimerLists+0x60>)
 800f94a:	6818      	ldr	r0, [r3, #0]
 800f94c:	0029      	movs	r1, r5
 800f94e:	f7fe fd14 	bl	800e37a <vListInsert>
 800f952:	e7e1      	b.n	800f918 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f954:	2300      	movs	r3, #0
 800f956:	9300      	str	r3, [sp, #0]
 800f958:	0032      	movs	r2, r6
 800f95a:	2100      	movs	r1, #0
 800f95c:	0020      	movs	r0, r4
 800f95e:	f7ff ffad 	bl	800f8bc <xTimerGenericCommand>
 800f962:	e7d9      	b.n	800f918 <prvSwitchTimerLists+0x4>
	pxCurrentTimerList = pxOverflowTimerList;
 800f964:	4a04      	ldr	r2, [pc, #16]	; (800f978 <prvSwitchTimerLists+0x64>)
 800f966:	4903      	ldr	r1, [pc, #12]	; (800f974 <prvSwitchTimerLists+0x60>)
 800f968:	6810      	ldr	r0, [r2, #0]
 800f96a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f96c:	6013      	str	r3, [r2, #0]
}
 800f96e:	b002      	add	sp, #8
 800f970:	bd70      	pop	{r4, r5, r6, pc}
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	20001768 	.word	0x20001768
 800f978:	2000176c 	.word	0x2000176c

0800f97c <prvSampleTimeNow>:
{
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	0005      	movs	r5, r0
	xTimeNow = xTaskGetTickCount();
 800f980:	f7ff fa50 	bl	800ee24 <xTaskGetTickCount>
 800f984:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800f986:	4b07      	ldr	r3, [pc, #28]	; (800f9a4 <prvSampleTimeNow+0x28>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4283      	cmp	r3, r0
 800f98c:	d805      	bhi.n	800f99a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800f98e:	2300      	movs	r3, #0
 800f990:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800f992:	4b04      	ldr	r3, [pc, #16]	; (800f9a4 <prvSampleTimeNow+0x28>)
 800f994:	601c      	str	r4, [r3, #0]
}
 800f996:	0020      	movs	r0, r4
 800f998:	bd70      	pop	{r4, r5, r6, pc}
		prvSwitchTimerLists();
 800f99a:	f7ff ffbb 	bl	800f914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	602b      	str	r3, [r5, #0]
 800f9a2:	e7f6      	b.n	800f992 <prvSampleTimeNow+0x16>
 800f9a4:	20001798 	.word	0x20001798

0800f9a8 <prvProcessExpiredTimer>:
{
 800f9a8:	b570      	push	{r4, r5, r6, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	0005      	movs	r5, r0
 800f9ae:	000e      	movs	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9b0:	4b0f      	ldr	r3, [pc, #60]	; (800f9f0 <prvProcessExpiredTimer+0x48>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b8:	1d20      	adds	r0, r4, #4
 800f9ba:	f7fe fcf5 	bl	800e3a8 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f9be:	69e3      	ldr	r3, [r4, #28]
 800f9c0:	2b01      	cmp	r3, #1
 800f9c2:	d004      	beq.n	800f9ce <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9c6:	0020      	movs	r0, r4
 800f9c8:	4798      	blx	r3
}
 800f9ca:	b002      	add	sp, #8
 800f9cc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800f9ce:	69a3      	ldr	r3, [r4, #24]
 800f9d0:	1959      	adds	r1, r3, r5
 800f9d2:	002b      	movs	r3, r5
 800f9d4:	0032      	movs	r2, r6
 800f9d6:	0020      	movs	r0, r4
 800f9d8:	f7ff fee0 	bl	800f79c <prvInsertTimerInActiveList>
 800f9dc:	2801      	cmp	r0, #1
 800f9de:	d1f1      	bne.n	800f9c4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	002a      	movs	r2, r5
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	0020      	movs	r0, r4
 800f9ea:	f7ff ff67 	bl	800f8bc <xTimerGenericCommand>
			( void ) xResult;
 800f9ee:	e7e9      	b.n	800f9c4 <prvProcessExpiredTimer+0x1c>
 800f9f0:	20001768 	.word	0x20001768

0800f9f4 <prvProcessTimerOrBlockTask>:
{
 800f9f4:	b570      	push	{r4, r5, r6, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	0004      	movs	r4, r0
 800f9fa:	000e      	movs	r6, r1
	vTaskSuspendAll();
 800f9fc:	f7ff fa0a 	bl	800ee14 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa00:	a801      	add	r0, sp, #4
 800fa02:	f7ff ffbb 	bl	800f97c <prvSampleTimeNow>
 800fa06:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fa08:	9b01      	ldr	r3, [sp, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d118      	bne.n	800fa40 <prvProcessTimerOrBlockTask+0x4c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa0e:	2e00      	cmp	r6, #0
 800fa10:	d101      	bne.n	800fa16 <prvProcessTimerOrBlockTask+0x22>
 800fa12:	42a0      	cmp	r0, r4
 800fa14:	d20a      	bcs.n	800fa2c <prvProcessTimerOrBlockTask+0x38>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fa16:	1b61      	subs	r1, r4, r5
 800fa18:	4b0b      	ldr	r3, [pc, #44]	; (800fa48 <prvProcessTimerOrBlockTask+0x54>)
 800fa1a:	6818      	ldr	r0, [r3, #0]
 800fa1c:	f7fe ff8e 	bl	800e93c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa20:	f7ff fa90 	bl	800ef44 <xTaskResumeAll>
 800fa24:	2800      	cmp	r0, #0
 800fa26:	d008      	beq.n	800fa3a <prvProcessTimerOrBlockTask+0x46>
}
 800fa28:	b002      	add	sp, #8
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
				( void ) xTaskResumeAll();
 800fa2c:	f7ff fa8a 	bl	800ef44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fa30:	0029      	movs	r1, r5
 800fa32:	0020      	movs	r0, r4
 800fa34:	f7ff ffb8 	bl	800f9a8 <prvProcessExpiredTimer>
 800fa38:	e7f6      	b.n	800fa28 <prvProcessTimerOrBlockTask+0x34>
					portYIELD_WITHIN_API();
 800fa3a:	f000 f8c5 	bl	800fbc8 <vPortYield>
 800fa3e:	e7f3      	b.n	800fa28 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 800fa40:	f7ff fa80 	bl	800ef44 <xTaskResumeAll>
}
 800fa44:	e7f0      	b.n	800fa28 <prvProcessTimerOrBlockTask+0x34>
 800fa46:	46c0      	nop			; (mov r8, r8)
 800fa48:	2000179c 	.word	0x2000179c

0800fa4c <prvProcessReceivedCommands>:
{
 800fa4c:	b510      	push	{r4, lr}
 800fa4e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa50:	e006      	b.n	800fa60 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fa52:	9b05      	ldr	r3, [sp, #20]
 800fa54:	9907      	ldr	r1, [sp, #28]
 800fa56:	9806      	ldr	r0, [sp, #24]
 800fa58:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fa5a:	9b04      	ldr	r3, [sp, #16]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	da0c      	bge.n	800fa7a <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa60:	4b24      	ldr	r3, [pc, #144]	; (800faf4 <prvProcessReceivedCommands+0xa8>)
 800fa62:	6818      	ldr	r0, [r3, #0]
 800fa64:	2300      	movs	r3, #0
 800fa66:	2200      	movs	r2, #0
 800fa68:	a904      	add	r1, sp, #16
 800fa6a:	f7fe fe91 	bl	800e790 <xQueueGenericReceive>
 800fa6e:	2800      	cmp	r0, #0
 800fa70:	d03e      	beq.n	800faf0 <prvProcessReceivedCommands+0xa4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fa72:	9b04      	ldr	r3, [sp, #16]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	daf0      	bge.n	800fa5a <prvProcessReceivedCommands+0xe>
 800fa78:	e7eb      	b.n	800fa52 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fa7a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fa7c:	6963      	ldr	r3, [r4, #20]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <prvProcessReceivedCommands+0x3c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa82:	1d20      	adds	r0, r4, #4
 800fa84:	f7fe fc90 	bl	800e3a8 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa88:	a803      	add	r0, sp, #12
 800fa8a:	f7ff ff77 	bl	800f97c <prvSampleTimeNow>
 800fa8e:	0002      	movs	r2, r0
			switch( xMessage.xMessageID )
 800fa90:	9b04      	ldr	r3, [sp, #16]
 800fa92:	2b09      	cmp	r3, #9
 800fa94:	d8e4      	bhi.n	800fa60 <prvProcessReceivedCommands+0x14>
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	4917      	ldr	r1, [pc, #92]	; (800faf8 <prvProcessReceivedCommands+0xac>)
 800fa9a:	58cb      	ldr	r3, [r1, r3]
 800fa9c:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fa9e:	9b05      	ldr	r3, [sp, #20]
 800faa0:	69a0      	ldr	r0, [r4, #24]
 800faa2:	4684      	mov	ip, r0
 800faa4:	4463      	add	r3, ip
 800faa6:	0019      	movs	r1, r3
 800faa8:	9b05      	ldr	r3, [sp, #20]
 800faaa:	0020      	movs	r0, r4
 800faac:	f7ff fe76 	bl	800f79c <prvInsertTimerInActiveList>
 800fab0:	2801      	cmp	r0, #1
 800fab2:	d1d5      	bne.n	800fa60 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fab4:	0020      	movs	r0, r4
 800fab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fab8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800faba:	69e3      	ldr	r3, [r4, #28]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d1cf      	bne.n	800fa60 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fac0:	9b05      	ldr	r3, [sp, #20]
 800fac2:	69a1      	ldr	r1, [r4, #24]
 800fac4:	468c      	mov	ip, r1
 800fac6:	4463      	add	r3, ip
 800fac8:	001a      	movs	r2, r3
 800faca:	2300      	movs	r3, #0
 800facc:	9300      	str	r3, [sp, #0]
 800face:	2100      	movs	r1, #0
 800fad0:	0020      	movs	r0, r4
 800fad2:	f7ff fef3 	bl	800f8bc <xTimerGenericCommand>
							( void ) xResult;
 800fad6:	e7c3      	b.n	800fa60 <prvProcessReceivedCommands+0x14>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fad8:	9905      	ldr	r1, [sp, #20]
 800fada:	61a1      	str	r1, [r4, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fadc:	1809      	adds	r1, r1, r0
 800fade:	0003      	movs	r3, r0
 800fae0:	0020      	movs	r0, r4
 800fae2:	f7ff fe5b 	bl	800f79c <prvInsertTimerInActiveList>
					break;
 800fae6:	e7bb      	b.n	800fa60 <prvProcessReceivedCommands+0x14>
					vPortFree( pxTimer );
 800fae8:	0020      	movs	r0, r4
 800faea:	f000 f995 	bl	800fe18 <vPortFree>
					break;
 800faee:	e7b7      	b.n	800fa60 <prvProcessReceivedCommands+0x14>
}
 800faf0:	b008      	add	sp, #32
 800faf2:	bd10      	pop	{r4, pc}
 800faf4:	2000179c 	.word	0x2000179c
 800faf8:	0801aa00 	.word	0x0801aa00

0800fafc <prvTimerTask>:
{
 800fafc:	b500      	push	{lr}
 800fafe:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb00:	a801      	add	r0, sp, #4
 800fb02:	f7ff fe3b 	bl	800f77c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fb06:	9901      	ldr	r1, [sp, #4]
 800fb08:	f7ff ff74 	bl	800f9f4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800fb0c:	f7ff ff9e 	bl	800fa4c <prvProcessReceivedCommands>
	for( ;; )
 800fb10:	e7f6      	b.n	800fb00 <prvTimerTask+0x4>

0800fb12 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fb12:	b510      	push	{r4, lr}
 800fb14:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800fb16:	f000 f863 	bl	800fbe0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fb1a:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fb1c:	f000 f86c 	bl	800fbf8 <vPortExitCritical>

	return pvReturn;
}
 800fb20:	0020      	movs	r0, r4
 800fb22:	bd10      	pop	{r4, pc}

0800fb24 <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800fb24:	b672      	cpsid	i
	for( ;; );
 800fb26:	e7fe      	b.n	800fb26 <prvTaskExitError+0x2>

0800fb28 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fb28:	4a06      	ldr	r2, [pc, #24]	; (800fb44 <pxCurrentTCBConst2>)
 800fb2a:	6813      	ldr	r3, [r2, #0]
 800fb2c:	6818      	ldr	r0, [r3, #0]
 800fb2e:	3020      	adds	r0, #32
 800fb30:	f380 8809 	msr	PSP, r0
 800fb34:	2002      	movs	r0, #2
 800fb36:	f380 8814 	msr	CONTROL, r0
 800fb3a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fb3c:	46ae      	mov	lr, r5
 800fb3e:	b662      	cpsie	i
 800fb40:	bd00      	pop	{pc}
 800fb42:	46c0      	nop			; (mov r8, r8)

0800fb44 <pxCurrentTCBConst2>:
 800fb44:	20001640 	.word	0x20001640

0800fb48 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800fb48:	b510      	push	{r4, lr}
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb4a:	4b06      	ldr	r3, [pc, #24]	; (800fb64 <prvSetupTimerInterrupt+0x1c>)
 800fb4c:	6818      	ldr	r0, [r3, #0]
 800fb4e:	21fa      	movs	r1, #250	; 0xfa
 800fb50:	0089      	lsls	r1, r1, #2
 800fb52:	f7f0 fafd 	bl	8000150 <__udivsi3>
 800fb56:	3801      	subs	r0, #1
 800fb58:	4b03      	ldr	r3, [pc, #12]	; (800fb68 <prvSetupTimerInterrupt+0x20>)
 800fb5a:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800fb5c:	4b03      	ldr	r3, [pc, #12]	; (800fb6c <prvSetupTimerInterrupt+0x24>)
 800fb5e:	2207      	movs	r2, #7
 800fb60:	601a      	str	r2, [r3, #0]
}
 800fb62:	bd10      	pop	{r4, pc}
 800fb64:	20000108 	.word	0x20000108
 800fb68:	e000e014 	.word	0xe000e014
 800fb6c:	e000e010 	.word	0xe000e010

0800fb70 <pxPortInitialiseStack>:
{
 800fb70:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fb72:	1f03      	subs	r3, r0, #4
 800fb74:	2480      	movs	r4, #128	; 0x80
 800fb76:	0464      	lsls	r4, r4, #17
 800fb78:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800fb7a:	3b04      	subs	r3, #4
 800fb7c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fb7e:	3b04      	subs	r3, #4
 800fb80:	4902      	ldr	r1, [pc, #8]	; (800fb8c <pxPortInitialiseStack+0x1c>)
 800fb82:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb84:	3b14      	subs	r3, #20
 800fb86:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fb88:	3840      	subs	r0, #64	; 0x40
}
 800fb8a:	bd10      	pop	{r4, pc}
 800fb8c:	0800fb25 	.word	0x0800fb25

0800fb90 <SVC_Handler>:
}
 800fb90:	4770      	bx	lr
	...

0800fb94 <xPortStartScheduler>:
{
 800fb94:	b510      	push	{r4, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800fb96:	4b0a      	ldr	r3, [pc, #40]	; (800fbc0 <xPortStartScheduler+0x2c>)
 800fb98:	6819      	ldr	r1, [r3, #0]
 800fb9a:	22ff      	movs	r2, #255	; 0xff
 800fb9c:	0412      	lsls	r2, r2, #16
 800fb9e:	430a      	orrs	r2, r1
 800fba0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fba2:	6819      	ldr	r1, [r3, #0]
 800fba4:	22ff      	movs	r2, #255	; 0xff
 800fba6:	0612      	lsls	r2, r2, #24
 800fba8:	430a      	orrs	r2, r1
 800fbaa:	601a      	str	r2, [r3, #0]
	prvSetupTimerInterrupt();
 800fbac:	f7ff ffcc 	bl	800fb48 <prvSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800fbb0:	4b04      	ldr	r3, [pc, #16]	; (800fbc4 <xPortStartScheduler+0x30>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800fbb6:	f7ff ffb7 	bl	800fb28 <vPortStartFirstTask>
	prvTaskExitError();
 800fbba:	f7ff ffb3 	bl	800fb24 <prvTaskExitError>
 800fbbe:	46c0      	nop			; (mov r8, r8)
 800fbc0:	e000ed20 	.word	0xe000ed20
 800fbc4:	2000011c 	.word	0x2000011c

0800fbc8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800fbc8:	4b04      	ldr	r3, [pc, #16]	; (800fbdc <vPortYield+0x14>)
 800fbca:	2280      	movs	r2, #128	; 0x80
 800fbcc:	0552      	lsls	r2, r2, #21
 800fbce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800fbd0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fbd4:	f3bf 8f6f 	isb	sy
}
 800fbd8:	4770      	bx	lr
 800fbda:	46c0      	nop			; (mov r8, r8)
 800fbdc:	e000ed04 	.word	0xe000ed04

0800fbe0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800fbe0:	b672      	cpsid	i
    uxCriticalNesting++;
 800fbe2:	4a04      	ldr	r2, [pc, #16]	; (800fbf4 <vPortEnterCritical+0x14>)
 800fbe4:	6813      	ldr	r3, [r2, #0]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800fbea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800fbee:	f3bf 8f6f 	isb	sy
}
 800fbf2:	4770      	bx	lr
 800fbf4:	2000011c 	.word	0x2000011c

0800fbf8 <vPortExitCritical>:
    uxCriticalNesting--;
 800fbf8:	4a03      	ldr	r2, [pc, #12]	; (800fc08 <vPortExitCritical+0x10>)
 800fbfa:	6813      	ldr	r3, [r2, #0]
 800fbfc:	3b01      	subs	r3, #1
 800fbfe:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d100      	bne.n	800fc06 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800fc04:	b662      	cpsie	i
}
 800fc06:	4770      	bx	lr
 800fc08:	2000011c 	.word	0x2000011c

0800fc0c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800fc0c:	f3ef 8010 	mrs	r0, PRIMASK
 800fc10:	b672      	cpsid	i
 800fc12:	4770      	bx	lr
}
 800fc14:	2000      	movs	r0, #0

0800fc16 <vClearInterruptMaskFromISR>:
	__asm volatile(
 800fc16:	f380 8810 	msr	PRIMASK, r0
 800fc1a:	4770      	bx	lr

0800fc1c <PendSV_Handler>:
	__asm volatile
 800fc1c:	f3ef 8009 	mrs	r0, PSP
 800fc20:	4b0e      	ldr	r3, [pc, #56]	; (800fc5c <pxCurrentTCBConst>)
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	3820      	subs	r0, #32
 800fc26:	6010      	str	r0, [r2, #0]
 800fc28:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fc2a:	4644      	mov	r4, r8
 800fc2c:	464d      	mov	r5, r9
 800fc2e:	4656      	mov	r6, sl
 800fc30:	465f      	mov	r7, fp
 800fc32:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800fc34:	b508      	push	{r3, lr}
 800fc36:	b672      	cpsid	i
 800fc38:	f7ff fa92 	bl	800f160 <vTaskSwitchContext>
 800fc3c:	b662      	cpsie	i
 800fc3e:	bc0c      	pop	{r2, r3}
 800fc40:	6811      	ldr	r1, [r2, #0]
 800fc42:	6808      	ldr	r0, [r1, #0]
 800fc44:	3010      	adds	r0, #16
 800fc46:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fc48:	46a0      	mov	r8, r4
 800fc4a:	46a9      	mov	r9, r5
 800fc4c:	46b2      	mov	sl, r6
 800fc4e:	46bb      	mov	fp, r7
 800fc50:	f380 8809 	msr	PSP, r0
 800fc54:	3820      	subs	r0, #32
 800fc56:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800fc58:	4718      	bx	r3
 800fc5a:	46c0      	nop			; (mov r8, r8)

0800fc5c <pxCurrentTCBConst>:
 800fc5c:	20001640 	.word	0x20001640

0800fc60 <xPortSysTickHandler>:
{
 800fc60:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc62:	f7ff ffd3 	bl	800fc0c <ulSetInterruptMaskFromISR>
 800fc66:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800fc68:	f7ff f8e8 	bl	800ee3c <xTaskIncrementTick>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d003      	beq.n	800fc78 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800fc70:	4b03      	ldr	r3, [pc, #12]	; (800fc80 <xPortSysTickHandler+0x20>)
 800fc72:	2280      	movs	r2, #128	; 0x80
 800fc74:	0552      	lsls	r2, r2, #21
 800fc76:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800fc78:	0020      	movs	r0, r4
 800fc7a:	f7ff ffcc 	bl	800fc16 <vClearInterruptMaskFromISR>
}
 800fc7e:	bd10      	pop	{r4, pc}
 800fc80:	e000ed04 	.word	0xe000ed04

0800fc84 <prvHeapInit>:
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
 800fc84:	4a11      	ldr	r2, [pc, #68]	; (800fccc <prvHeapInit+0x48>)

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fc86:	0753      	lsls	r3, r2, #29
 800fc88:	d01e      	beq.n	800fcc8 <prvHeapInit+0x44>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 800fc8a:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fc8c:	2307      	movs	r3, #7
 800fc8e:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 800fc90:	4b0f      	ldr	r3, [pc, #60]	; (800fcd0 <prvHeapInit+0x4c>)
 800fc92:	1a5b      	subs	r3, r3, r1
 800fc94:	189b      	adds	r3, r3, r2
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fc96:	000a      	movs	r2, r1

	pucAlignedHeap = ( uint8_t * ) ulAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fc98:	480e      	ldr	r0, [pc, #56]	; (800fcd4 <prvHeapInit+0x50>)
 800fc9a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fca0:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 800fca2:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 800fca4:	2007      	movs	r0, #7
 800fca6:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 800fca8:	480b      	ldr	r0, [pc, #44]	; (800fcd8 <prvHeapInit+0x54>)
 800fcaa:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800fcac:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fcae:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 800fcb0:	1a99      	subs	r1, r3, r2
 800fcb2:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fcb4:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcb6:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <prvHeapInit+0x58>)
 800fcb8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fcba:	4b09      	ldr	r3, [pc, #36]	; (800fce0 <prvHeapInit+0x5c>)
 800fcbc:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fcbe:	4b09      	ldr	r3, [pc, #36]	; (800fce4 <prvHeapInit+0x60>)
 800fcc0:	2280      	movs	r2, #128	; 0x80
 800fcc2:	0612      	lsls	r2, r2, #24
 800fcc4:	601a      	str	r2, [r3, #0]
}
 800fcc6:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fcc8:	4b01      	ldr	r3, [pc, #4]	; (800fcd0 <prvHeapInit+0x4c>)
 800fcca:	e7e5      	b.n	800fc98 <prvHeapInit+0x14>
 800fccc:	200017a4 	.word	0x200017a4
 800fcd0:	00003f48 	.word	0x00003f48
 800fcd4:	200056f8 	.word	0x200056f8
 800fcd8:	200017a0 	.word	0x200017a0
 800fcdc:	200056f4 	.word	0x200056f4
 800fce0:	200056f0 	.word	0x200056f0
 800fce4:	200056ec 	.word	0x200056ec

0800fce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fce8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fcea:	4b12      	ldr	r3, [pc, #72]	; (800fd34 <prvInsertBlockIntoFreeList+0x4c>)
 800fcec:	001a      	movs	r2, r3
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4283      	cmp	r3, r0
 800fcf2:	d3fb      	bcc.n	800fcec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fcf4:	6851      	ldr	r1, [r2, #4]
 800fcf6:	1854      	adds	r4, r2, r1
 800fcf8:	4284      	cmp	r4, r0
 800fcfa:	d008      	beq.n	800fd0e <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcfc:	6841      	ldr	r1, [r0, #4]
 800fcfe:	1844      	adds	r4, r0, r1
 800fd00:	42a3      	cmp	r3, r4
 800fd02:	d009      	beq.n	800fd18 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd04:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd06:	4290      	cmp	r0, r2
 800fd08:	d000      	beq.n	800fd0c <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd0a:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd0c:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fd0e:	6840      	ldr	r0, [r0, #4]
 800fd10:	1809      	adds	r1, r1, r0
 800fd12:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800fd14:	0010      	movs	r0, r2
 800fd16:	e7f1      	b.n	800fcfc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fd18:	4c07      	ldr	r4, [pc, #28]	; (800fd38 <prvInsertBlockIntoFreeList+0x50>)
 800fd1a:	6824      	ldr	r4, [r4, #0]
 800fd1c:	42a3      	cmp	r3, r4
 800fd1e:	d006      	beq.n	800fd2e <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	18c9      	adds	r1, r1, r3
 800fd24:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fd26:	6813      	ldr	r3, [r2, #0]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	6003      	str	r3, [r0, #0]
 800fd2c:	e7eb      	b.n	800fd06 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd2e:	6004      	str	r4, [r0, #0]
 800fd30:	e7e9      	b.n	800fd06 <prvInsertBlockIntoFreeList+0x1e>
 800fd32:	46c0      	nop			; (mov r8, r8)
 800fd34:	200056f8 	.word	0x200056f8
 800fd38:	200017a0 	.word	0x200017a0

0800fd3c <pvPortMalloc>:
{
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	0005      	movs	r5, r0
	vTaskSuspendAll();
 800fd40:	f7ff f868 	bl	800ee14 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800fd44:	4b2f      	ldr	r3, [pc, #188]	; (800fe04 <pvPortMalloc+0xc8>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d014      	beq.n	800fd76 <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd4c:	4b2e      	ldr	r3, [pc, #184]	; (800fe08 <pvPortMalloc+0xcc>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	422b      	tst	r3, r5
 800fd52:	d113      	bne.n	800fd7c <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800fd54:	2d00      	cmp	r5, #0
 800fd56:	d005      	beq.n	800fd64 <pvPortMalloc+0x28>
				xWantedSize += xHeapStructSize;
 800fd58:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd5a:	076b      	lsls	r3, r5, #29
 800fd5c:	d002      	beq.n	800fd64 <pvPortMalloc+0x28>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd5e:	2307      	movs	r3, #7
 800fd60:	439d      	bics	r5, r3
 800fd62:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd64:	2d00      	cmp	r5, #0
 800fd66:	d010      	beq.n	800fd8a <pvPortMalloc+0x4e>
 800fd68:	4b28      	ldr	r3, [pc, #160]	; (800fe0c <pvPortMalloc+0xd0>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	42ab      	cmp	r3, r5
 800fd6e:	d310      	bcc.n	800fd92 <pvPortMalloc+0x56>
				pxBlock = xStart.pxNextFreeBlock;
 800fd70:	4a27      	ldr	r2, [pc, #156]	; (800fe10 <pvPortMalloc+0xd4>)
 800fd72:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd74:	e013      	b.n	800fd9e <pvPortMalloc+0x62>
			prvHeapInit();
 800fd76:	f7ff ff85 	bl	800fc84 <prvHeapInit>
 800fd7a:	e7e7      	b.n	800fd4c <pvPortMalloc+0x10>
	( void ) xTaskResumeAll();
 800fd7c:	f7ff f8e2 	bl	800ef44 <xTaskResumeAll>
void *pvReturn = NULL;
 800fd80:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800fd82:	f7fd fc7b 	bl	800d67c <vApplicationMallocFailedHook>
}
 800fd86:	0030      	movs	r0, r6
 800fd88:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
 800fd8a:	f7ff f8db 	bl	800ef44 <xTaskResumeAll>
void *pvReturn = NULL;
 800fd8e:	2600      	movs	r6, #0
 800fd90:	e7f7      	b.n	800fd82 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800fd92:	f7ff f8d7 	bl	800ef44 <xTaskResumeAll>
void *pvReturn = NULL;
 800fd96:	2600      	movs	r6, #0
 800fd98:	e7f3      	b.n	800fd82 <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800fd9a:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd9c:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd9e:	6863      	ldr	r3, [r4, #4]
 800fda0:	42ab      	cmp	r3, r5
 800fda2:	d202      	bcs.n	800fdaa <pvPortMalloc+0x6e>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1f7      	bne.n	800fd9a <pvPortMalloc+0x5e>
				if( pxBlock != pxEnd )
 800fdaa:	4b16      	ldr	r3, [pc, #88]	; (800fe04 <pvPortMalloc+0xc8>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	42a3      	cmp	r3, r4
 800fdb0:	d01d      	beq.n	800fdee <pvPortMalloc+0xb2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdb2:	6816      	ldr	r6, [r2, #0]
 800fdb4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fdb6:	6823      	ldr	r3, [r4, #0]
 800fdb8:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdba:	6863      	ldr	r3, [r4, #4]
 800fdbc:	1b5b      	subs	r3, r3, r5
 800fdbe:	2b10      	cmp	r3, #16
 800fdc0:	d819      	bhi.n	800fdf6 <pvPortMalloc+0xba>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fdc2:	6862      	ldr	r2, [r4, #4]
 800fdc4:	4911      	ldr	r1, [pc, #68]	; (800fe0c <pvPortMalloc+0xd0>)
 800fdc6:	680b      	ldr	r3, [r1, #0]
 800fdc8:	1a9b      	subs	r3, r3, r2
 800fdca:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fdcc:	4911      	ldr	r1, [pc, #68]	; (800fe14 <pvPortMalloc+0xd8>)
 800fdce:	6809      	ldr	r1, [r1, #0]
 800fdd0:	428b      	cmp	r3, r1
 800fdd2:	d201      	bcs.n	800fdd8 <pvPortMalloc+0x9c>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdd4:	490f      	ldr	r1, [pc, #60]	; (800fe14 <pvPortMalloc+0xd8>)
 800fdd6:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdd8:	4b0b      	ldr	r3, [pc, #44]	; (800fe08 <pvPortMalloc+0xcc>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4313      	orrs	r3, r2
 800fdde:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fde0:	2300      	movs	r3, #0
 800fde2:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800fde4:	f7ff f8ae 	bl	800ef44 <xTaskResumeAll>
		if( pvReturn == NULL )
 800fde8:	2e00      	cmp	r6, #0
 800fdea:	d1cc      	bne.n	800fd86 <pvPortMalloc+0x4a>
 800fdec:	e7c9      	b.n	800fd82 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800fdee:	f7ff f8a9 	bl	800ef44 <xTaskResumeAll>
void *pvReturn = NULL;
 800fdf2:	2600      	movs	r6, #0
 800fdf4:	e7c5      	b.n	800fd82 <pvPortMalloc+0x46>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fdf6:	1960      	adds	r0, r4, r5
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fdf8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fdfa:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800fdfc:	f7ff ff74 	bl	800fce8 <prvInsertBlockIntoFreeList>
 800fe00:	e7df      	b.n	800fdc2 <pvPortMalloc+0x86>
 800fe02:	46c0      	nop			; (mov r8, r8)
 800fe04:	200017a0 	.word	0x200017a0
 800fe08:	200056ec 	.word	0x200056ec
 800fe0c:	200056f0 	.word	0x200056f0
 800fe10:	200056f8 	.word	0x200056f8
 800fe14:	200056f4 	.word	0x200056f4

0800fe18 <vPortFree>:
{
 800fe18:	b570      	push	{r4, r5, r6, lr}
	if( pv != NULL )
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d009      	beq.n	800fe32 <vPortFree+0x1a>
		puc -= xHeapStructSize;
 800fe1e:	0005      	movs	r5, r0
 800fe20:	3d08      	subs	r5, #8
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe22:	686b      	ldr	r3, [r5, #4]
 800fe24:	4a0b      	ldr	r2, [pc, #44]	; (800fe54 <vPortFree+0x3c>)
 800fe26:	6812      	ldr	r2, [r2, #0]
 800fe28:	421a      	tst	r2, r3
 800fe2a:	d002      	beq.n	800fe32 <vPortFree+0x1a>
			if( pxLink->pxNextFreeBlock == NULL )
 800fe2c:	6829      	ldr	r1, [r5, #0]
 800fe2e:	2900      	cmp	r1, #0
 800fe30:	d000      	beq.n	800fe34 <vPortFree+0x1c>
}
 800fe32:	bd70      	pop	{r4, r5, r6, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe34:	4393      	bics	r3, r2
 800fe36:	606b      	str	r3, [r5, #4]
				vTaskSuspendAll();
 800fe38:	f7fe ffec 	bl	800ee14 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe3c:	686b      	ldr	r3, [r5, #4]
 800fe3e:	4a06      	ldr	r2, [pc, #24]	; (800fe58 <vPortFree+0x40>)
 800fe40:	6811      	ldr	r1, [r2, #0]
 800fe42:	468c      	mov	ip, r1
 800fe44:	4463      	add	r3, ip
 800fe46:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe48:	0028      	movs	r0, r5
 800fe4a:	f7ff ff4d 	bl	800fce8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800fe4e:	f7ff f879 	bl	800ef44 <xTaskResumeAll>
}
 800fe52:	e7ee      	b.n	800fe32 <vPortFree+0x1a>
 800fe54:	200056ec 	.word	0x200056ec
 800fe58:	200056f0 	.word	0x200056f0

0800fe5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fe5c:	b510      	push	{r4, lr}
 800fe5e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800fe60:	f002 f85e 	bl	8011f20 <HAL_RCC_GetHCLKFreq>
 800fe64:	21fa      	movs	r1, #250	; 0xfa
 800fe66:	0089      	lsls	r1, r1, #2
 800fe68:	f7f0 f972 	bl	8000150 <__udivsi3>
 800fe6c:	f000 fb9c 	bl	80105a8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800fe70:	2001      	movs	r0, #1
 800fe72:	2200      	movs	r2, #0
 800fe74:	0021      	movs	r1, r4
 800fe76:	4240      	negs	r0, r0
 800fe78:	f000 fb52 	bl	8010520 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	bd10      	pop	{r4, pc}

0800fe80 <HAL_Init>:
{
 800fe80:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fe82:	4a06      	ldr	r2, [pc, #24]	; (800fe9c <HAL_Init+0x1c>)
 800fe84:	6813      	ldr	r3, [r2, #0]
 800fe86:	2110      	movs	r1, #16
 800fe88:	430b      	orrs	r3, r1
 800fe8a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	f7ff ffe5 	bl	800fe5c <HAL_InitTick>
  HAL_MspInit();
 800fe92:	f001 fc22 	bl	80116da <HAL_MspInit>
}
 800fe96:	2000      	movs	r0, #0
 800fe98:	bd10      	pop	{r4, pc}
 800fe9a:	46c0      	nop			; (mov r8, r8)
 800fe9c:	40022000 	.word	0x40022000

0800fea0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800fea0:	4a02      	ldr	r2, [pc, #8]	; (800feac <HAL_IncTick+0xc>)
 800fea2:	6813      	ldr	r3, [r2, #0]
 800fea4:	3301      	adds	r3, #1
 800fea6:	6013      	str	r3, [r2, #0]
}
 800fea8:	4770      	bx	lr
 800feaa:	46c0      	nop			; (mov r8, r8)
 800feac:	20005700 	.word	0x20005700

0800feb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800feb0:	4b01      	ldr	r3, [pc, #4]	; (800feb8 <HAL_GetTick+0x8>)
 800feb2:	6818      	ldr	r0, [r3, #0]
}
 800feb4:	4770      	bx	lr
 800feb6:	46c0      	nop			; (mov r8, r8)
 800feb8:	20005700 	.word	0x20005700

0800febc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800febc:	b510      	push	{r4, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800fec2:	f7ff fff5 	bl	800feb0 <HAL_GetTick>
 800fec6:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800fec8:	f7ff fff2 	bl	800feb0 <HAL_GetTick>
 800fecc:	1b00      	subs	r0, r0, r4
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	4298      	cmp	r0, r3
 800fed2:	d3f9      	bcc.n	800fec8 <HAL_Delay+0xc>
  {
  }
}
 800fed4:	b002      	add	sp, #8
 800fed6:	bd10      	pop	{r4, pc}

0800fed8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800fed8:	4b01      	ldr	r3, [pc, #4]	; (800fee0 <HAL_GetREVID+0x8>)
 800feda:	6818      	ldr	r0, [r3, #0]
 800fedc:	0c00      	lsrs	r0, r0, #16
}
 800fede:	4770      	bx	lr
 800fee0:	40015800 	.word	0x40015800

0800fee4 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800fee4:	4b02      	ldr	r3, [pc, #8]	; (800fef0 <HAL_GetDEVID+0xc>)
 800fee6:	6818      	ldr	r0, [r3, #0]
 800fee8:	0500      	lsls	r0, r0, #20
 800feea:	0d00      	lsrs	r0, r0, #20
}
 800feec:	4770      	bx	lr
 800feee:	46c0      	nop			; (mov r8, r8)
 800fef0:	40015800 	.word	0x40015800

0800fef4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800fef8:	6803      	ldr	r3, [r0, #0]
 800fefa:	689a      	ldr	r2, [r3, #8]
 800fefc:	0752      	lsls	r2, r2, #29
 800fefe:	d521      	bpl.n	800ff44 <ADC_ConversionStop+0x50>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ff00:	689a      	ldr	r2, [r3, #8]
 800ff02:	0752      	lsls	r2, r2, #29
 800ff04:	d506      	bpl.n	800ff14 <ADC_ConversionStop+0x20>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800ff06:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800ff08:	0792      	lsls	r2, r2, #30
 800ff0a:	d403      	bmi.n	800ff14 <ADC_ConversionStop+0x20>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800ff0c:	689a      	ldr	r2, [r3, #8]
 800ff0e:	2110      	movs	r1, #16
 800ff10:	430a      	orrs	r2, r1
 800ff12:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ff14:	f7ff ffcc 	bl	800feb0 <HAL_GetTick>
 800ff18:	0005      	movs	r5, r0
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	075b      	lsls	r3, r3, #29
 800ff20:	d50e      	bpl.n	800ff40 <ADC_ConversionStop+0x4c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800ff22:	f7ff ffc5 	bl	800feb0 <HAL_GetTick>
 800ff26:	1b40      	subs	r0, r0, r5
 800ff28:	2802      	cmp	r0, #2
 800ff2a:	d9f6      	bls.n	800ff1a <ADC_ConversionStop+0x26>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff2e:	2210      	movs	r2, #16
 800ff30:	4313      	orrs	r3, r2
 800ff32:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ff34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff36:	3a0f      	subs	r2, #15
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	64a3      	str	r3, [r4, #72]	; 0x48
        
        return HAL_ERROR;
 800ff3c:	2001      	movs	r0, #1
 800ff3e:	e002      	b.n	800ff46 <ADC_ConversionStop+0x52>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800ff40:	2000      	movs	r0, #0
 800ff42:	e000      	b.n	800ff46 <ADC_ConversionStop+0x52>
 800ff44:	2000      	movs	r0, #0
}
 800ff46:	bd70      	pop	{r4, r5, r6, pc}

0800ff48 <ADC_Disable>:
{
 800ff48:	b570      	push	{r4, r5, r6, lr}
 800ff4a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ff4c:	6802      	ldr	r2, [r0, #0]
 800ff4e:	6891      	ldr	r1, [r2, #8]
 800ff50:	2303      	movs	r3, #3
 800ff52:	400b      	ands	r3, r1
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d001      	beq.n	800ff5c <ADC_Disable+0x14>
  return HAL_OK;
 800ff58:	2000      	movs	r0, #0
}
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ff5c:	6813      	ldr	r3, [r2, #0]
 800ff5e:	07db      	lsls	r3, r3, #31
 800ff60:	d402      	bmi.n	800ff68 <ADC_Disable+0x20>
 800ff62:	68d3      	ldr	r3, [r2, #12]
 800ff64:	041b      	lsls	r3, r3, #16
 800ff66:	d52d      	bpl.n	800ffc4 <ADC_Disable+0x7c>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800ff68:	6891      	ldr	r1, [r2, #8]
 800ff6a:	2305      	movs	r3, #5
 800ff6c:	400b      	ands	r3, r1
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d009      	beq.n	800ff86 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ff72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff74:	2210      	movs	r2, #16
 800ff76:	4313      	orrs	r3, r2
 800ff78:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ff7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff7c:	3a0f      	subs	r2, #15
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800ff82:	2001      	movs	r0, #1
 800ff84:	e7e9      	b.n	800ff5a <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800ff86:	6893      	ldr	r3, [r2, #8]
 800ff88:	2102      	movs	r1, #2
 800ff8a:	430b      	orrs	r3, r1
 800ff8c:	6093      	str	r3, [r2, #8]
 800ff8e:	6823      	ldr	r3, [r4, #0]
 800ff90:	2203      	movs	r2, #3
 800ff92:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ff94:	f7ff ff8c 	bl	800feb0 <HAL_GetTick>
 800ff98:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	07db      	lsls	r3, r3, #31
 800ffa0:	d50e      	bpl.n	800ffc0 <ADC_Disable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ffa2:	f7ff ff85 	bl	800feb0 <HAL_GetTick>
 800ffa6:	1b40      	subs	r0, r0, r5
 800ffa8:	2802      	cmp	r0, #2
 800ffaa:	d9f6      	bls.n	800ff9a <ADC_Disable+0x52>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ffac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ffae:	2210      	movs	r2, #16
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ffb4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ffb6:	3a0f      	subs	r2, #15
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800ffbc:	2001      	movs	r0, #1
 800ffbe:	e7cc      	b.n	800ff5a <ADC_Disable+0x12>
  return HAL_OK;
 800ffc0:	2000      	movs	r0, #0
 800ffc2:	e7ca      	b.n	800ff5a <ADC_Disable+0x12>
 800ffc4:	2000      	movs	r0, #0
 800ffc6:	e7c8      	b.n	800ff5a <ADC_Disable+0x12>

0800ffc8 <ADC_Enable>:
{
 800ffc8:	b530      	push	{r4, r5, lr}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ffd2:	6803      	ldr	r3, [r0, #0]
 800ffd4:	6899      	ldr	r1, [r3, #8]
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	400a      	ands	r2, r1
 800ffda:	2a01      	cmp	r2, #1
 800ffdc:	d014      	beq.n	8010008 <ADC_Enable+0x40>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800ffde:	6899      	ldr	r1, [r3, #8]
 800ffe0:	4a20      	ldr	r2, [pc, #128]	; (8010064 <ADC_Enable+0x9c>)
 800ffe2:	4211      	tst	r1, r2
 800ffe4:	d118      	bne.n	8010018 <ADC_Enable+0x50>
    __HAL_ADC_ENABLE(hadc);
 800ffe6:	689a      	ldr	r2, [r3, #8]
 800ffe8:	2101      	movs	r1, #1
 800ffea:	430a      	orrs	r2, r1
 800ffec:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800ffee:	4b1e      	ldr	r3, [pc, #120]	; (8010068 <ADC_Enable+0xa0>)
 800fff0:	6818      	ldr	r0, [r3, #0]
 800fff2:	491e      	ldr	r1, [pc, #120]	; (801006c <ADC_Enable+0xa4>)
 800fff4:	f7f0 f8ac 	bl	8000150 <__udivsi3>
 800fff8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 800fffa:	9b01      	ldr	r3, [sp, #4]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d016      	beq.n	801002e <ADC_Enable+0x66>
      wait_loop_index--;
 8010000:	9b01      	ldr	r3, [sp, #4]
 8010002:	3b01      	subs	r3, #1
 8010004:	9301      	str	r3, [sp, #4]
 8010006:	e7f8      	b.n	800fffa <ADC_Enable+0x32>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	07d2      	lsls	r2, r2, #31
 801000c:	d427      	bmi.n	801005e <ADC_Enable+0x96>
 801000e:	68da      	ldr	r2, [r3, #12]
 8010010:	0412      	lsls	r2, r2, #16
 8010012:	d5e4      	bpl.n	800ffde <ADC_Enable+0x16>
  return HAL_OK;
 8010014:	2000      	movs	r0, #0
 8010016:	e008      	b.n	801002a <ADC_Enable+0x62>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010018:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801001a:	2210      	movs	r2, #16
 801001c:	4313      	orrs	r3, r2
 801001e:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010020:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010022:	3a0f      	subs	r2, #15
 8010024:	4313      	orrs	r3, r2
 8010026:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010028:	2001      	movs	r0, #1
}
 801002a:	b003      	add	sp, #12
 801002c:	bd30      	pop	{r4, r5, pc}
    tickstart = HAL_GetTick();
 801002e:	f7ff ff3f 	bl	800feb0 <HAL_GetTick>
 8010032:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010034:	6823      	ldr	r3, [r4, #0]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	07db      	lsls	r3, r3, #31
 801003a:	d40e      	bmi.n	801005a <ADC_Enable+0x92>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801003c:	f7ff ff38 	bl	800feb0 <HAL_GetTick>
 8010040:	1b40      	subs	r0, r0, r5
 8010042:	2802      	cmp	r0, #2
 8010044:	d9f6      	bls.n	8010034 <ADC_Enable+0x6c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010046:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010048:	2210      	movs	r2, #16
 801004a:	4313      	orrs	r3, r2
 801004c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801004e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010050:	3a0f      	subs	r2, #15
 8010052:	4313      	orrs	r3, r2
 8010054:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010056:	2001      	movs	r0, #1
 8010058:	e7e7      	b.n	801002a <ADC_Enable+0x62>
  return HAL_OK;
 801005a:	2000      	movs	r0, #0
 801005c:	e7e5      	b.n	801002a <ADC_Enable+0x62>
 801005e:	2000      	movs	r0, #0
 8010060:	e7e3      	b.n	801002a <ADC_Enable+0x62>
 8010062:	46c0      	nop			; (mov r8, r8)
 8010064:	80000017 	.word	0x80000017
 8010068:	20000108 	.word	0x20000108
 801006c:	000f4240 	.word	0x000f4240

08010070 <HAL_ADC_Init>:
{
 8010070:	b570      	push	{r4, r5, r6, lr}
 8010072:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010074:	d100      	bne.n	8010078 <HAL_ADC_Init+0x8>
 8010076:	e0a9      	b.n	80101cc <HAL_ADC_Init+0x15c>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010078:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801007a:	2b00      	cmp	r3, #0
 801007c:	d07f      	beq.n	801017e <HAL_ADC_Init+0x10e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 801007e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010080:	06db      	lsls	r3, r3, #27
 8010082:	d500      	bpl.n	8010086 <HAL_ADC_Init+0x16>
 8010084:	e09c      	b.n	80101c0 <HAL_ADC_Init+0x150>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010086:	6822      	ldr	r2, [r4, #0]
 8010088:	6891      	ldr	r1, [r2, #8]
 801008a:	2004      	movs	r0, #4
 801008c:	0005      	movs	r5, r0
 801008e:	400d      	ands	r5, r1
      (tmp_hal_status == HAL_OK)                                &&
 8010090:	4208      	tst	r0, r1
 8010092:	d000      	beq.n	8010096 <HAL_ADC_Init+0x26>
 8010094:	e094      	b.n	80101c0 <HAL_ADC_Init+0x150>
    ADC_STATE_CLR_SET(hadc->State,
 8010096:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010098:	4b4d      	ldr	r3, [pc, #308]	; (80101d0 <HAL_ADC_Init+0x160>)
 801009a:	4019      	ands	r1, r3
 801009c:	3306      	adds	r3, #6
 801009e:	33ff      	adds	r3, #255	; 0xff
 80100a0:	4319      	orrs	r1, r3
 80100a2:	6461      	str	r1, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80100a4:	6891      	ldr	r1, [r2, #8]
 80100a6:	3301      	adds	r3, #1
 80100a8:	400b      	ands	r3, r1
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d06d      	beq.n	801018a <HAL_ADC_Init+0x11a>
      MODIFY_REG(hadc->Instance->CFGR1,
 80100ae:	68d3      	ldr	r3, [r2, #12]
 80100b0:	2118      	movs	r1, #24
 80100b2:	438b      	bics	r3, r1
 80100b4:	68a1      	ldr	r1, [r4, #8]
 80100b6:	430b      	orrs	r3, r1
 80100b8:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80100ba:	6822      	ldr	r2, [r4, #0]
 80100bc:	6913      	ldr	r3, [r2, #16]
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	089b      	lsrs	r3, r3, #2
 80100c2:	6861      	ldr	r1, [r4, #4]
 80100c4:	430b      	orrs	r3, r1
 80100c6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80100c8:	6822      	ldr	r2, [r4, #0]
 80100ca:	68d3      	ldr	r3, [r2, #12]
 80100cc:	4941      	ldr	r1, [pc, #260]	; (80101d4 <HAL_ADC_Init+0x164>)
 80100ce:	400b      	ands	r3, r1
 80100d0:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80100d2:	69a3      	ldr	r3, [r4, #24]
 80100d4:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80100d6:	69e2      	ldr	r2, [r4, #28]
 80100d8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80100da:	4313      	orrs	r3, r2
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80100dc:	6a21      	ldr	r1, [r4, #32]
 80100de:	034a      	lsls	r2, r1, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80100e0:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80100e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100e4:	2a01      	cmp	r2, #1
 80100e6:	d057      	beq.n	8010198 <HAL_ADC_Init+0x128>
 80100e8:	2280      	movs	r2, #128	; 0x80
 80100ea:	0152      	lsls	r2, r2, #5
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80100ec:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80100ee:	68e2      	ldr	r2, [r4, #12]
 80100f0:	4313      	orrs	r3, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80100f2:	6922      	ldr	r2, [r4, #16]
 80100f4:	2a02      	cmp	r2, #2
 80100f6:	d051      	beq.n	801019c <HAL_ADC_Init+0x12c>
                 hadc->Init.DataAlign                                   |
 80100f8:	432b      	orrs	r3, r5
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80100fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80100fc:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80100fe:	4313      	orrs	r3, r2
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010100:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010102:	2a01      	cmp	r2, #1
 8010104:	d04c      	beq.n	80101a0 <HAL_ADC_Init+0x130>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010106:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010108:	21c2      	movs	r1, #194	; 0xc2
 801010a:	31ff      	adds	r1, #255	; 0xff
 801010c:	428a      	cmp	r2, r1
 801010e:	d002      	beq.n	8010116 <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010110:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010112:	430a      	orrs	r2, r1
 8010114:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010116:	6821      	ldr	r1, [r4, #0]
 8010118:	68ca      	ldr	r2, [r1, #12]
 801011a:	431a      	orrs	r2, r3
 801011c:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801011e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010120:	2180      	movs	r1, #128	; 0x80
 8010122:	0549      	lsls	r1, r1, #21
 8010124:	428a      	cmp	r2, r1
 8010126:	d00d      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 8010128:	2a01      	cmp	r2, #1
 801012a:	d00b      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 801012c:	2a02      	cmp	r2, #2
 801012e:	d009      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 8010130:	2a03      	cmp	r2, #3
 8010132:	d007      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 8010134:	2a04      	cmp	r2, #4
 8010136:	d005      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 8010138:	2a05      	cmp	r2, #5
 801013a:	d003      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 801013c:	2a06      	cmp	r2, #6
 801013e:	d001      	beq.n	8010144 <HAL_ADC_Init+0xd4>
 8010140:	2a07      	cmp	r2, #7
 8010142:	d10a      	bne.n	801015a <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010144:	6820      	ldr	r0, [r4, #0]
 8010146:	6941      	ldr	r1, [r0, #20]
 8010148:	2207      	movs	r2, #7
 801014a:	4391      	bics	r1, r2
 801014c:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 801014e:	6820      	ldr	r0, [r4, #0]
 8010150:	6941      	ldr	r1, [r0, #20]
 8010152:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010154:	402a      	ands	r2, r5
 8010156:	430a      	orrs	r2, r1
 8010158:	6142      	str	r2, [r0, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 801015a:	6822      	ldr	r2, [r4, #0]
 801015c:	68d2      	ldr	r2, [r2, #12]
 801015e:	491e      	ldr	r1, [pc, #120]	; (80101d8 <HAL_ADC_Init+0x168>)
 8010160:	400a      	ands	r2, r1
 8010162:	429a      	cmp	r2, r3
 8010164:	d022      	beq.n	80101ac <HAL_ADC_Init+0x13c>
      ADC_STATE_CLR_SET(hadc->State,
 8010166:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010168:	2212      	movs	r2, #18
 801016a:	4393      	bics	r3, r2
 801016c:	3a02      	subs	r2, #2
 801016e:	4313      	orrs	r3, r2
 8010170:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010172:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010174:	3a0f      	subs	r2, #15
 8010176:	4313      	orrs	r3, r2
 8010178:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 801017a:	2001      	movs	r0, #1
 801017c:	e025      	b.n	80101ca <HAL_ADC_Init+0x15a>
    ADC_CLEAR_ERRORCODE(hadc);
 801017e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010180:	2240      	movs	r2, #64	; 0x40
 8010182:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010184:	f7fc fb76 	bl	800c874 <HAL_ADC_MspInit>
 8010188:	e779      	b.n	801007e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 801018a:	6813      	ldr	r3, [r2, #0]
 801018c:	07db      	lsls	r3, r3, #31
 801018e:	d49b      	bmi.n	80100c8 <HAL_ADC_Init+0x58>
 8010190:	68d3      	ldr	r3, [r2, #12]
 8010192:	041b      	lsls	r3, r3, #16
 8010194:	d498      	bmi.n	80100c8 <HAL_ADC_Init+0x58>
 8010196:	e78a      	b.n	80100ae <HAL_ADC_Init+0x3e>
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010198:	002a      	movs	r2, r5
 801019a:	e7a7      	b.n	80100ec <HAL_ADC_Init+0x7c>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 801019c:	2504      	movs	r5, #4
 801019e:	e7ab      	b.n	80100f8 <HAL_ADC_Init+0x88>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80101a0:	2900      	cmp	r1, #0
 80101a2:	d1b0      	bne.n	8010106 <HAL_ADC_Init+0x96>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80101a4:	2280      	movs	r2, #128	; 0x80
 80101a6:	0252      	lsls	r2, r2, #9
 80101a8:	4313      	orrs	r3, r2
 80101aa:	e7ac      	b.n	8010106 <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 80101ac:	2300      	movs	r3, #0
 80101ae:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80101b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101b2:	2203      	movs	r2, #3
 80101b4:	4393      	bics	r3, r2
 80101b6:	3a02      	subs	r2, #2
 80101b8:	4313      	orrs	r3, r2
 80101ba:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101bc:	2000      	movs	r0, #0
 80101be:	e004      	b.n	80101ca <HAL_ADC_Init+0x15a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80101c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80101c2:	2210      	movs	r2, #16
 80101c4:	4313      	orrs	r3, r2
 80101c6:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80101c8:	2001      	movs	r0, #1
}
 80101ca:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80101cc:	2001      	movs	r0, #1
 80101ce:	e7fc      	b.n	80101ca <HAL_ADC_Init+0x15a>
 80101d0:	fffffefd 	.word	0xfffffefd
 80101d4:	fffe0219 	.word	0xfffe0219
 80101d8:	833fffe7 	.word	0x833fffe7

080101dc <HAL_ADC_Start>:
{
 80101dc:	b510      	push	{r4, lr}
 80101de:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80101e0:	6803      	ldr	r3, [r0, #0]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	075b      	lsls	r3, r3, #29
 80101e6:	d423      	bmi.n	8010230 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 80101e8:	2340      	movs	r3, #64	; 0x40
 80101ea:	5cc3      	ldrb	r3, [r0, r3]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d021      	beq.n	8010234 <HAL_ADC_Start+0x58>
 80101f0:	2340      	movs	r3, #64	; 0x40
 80101f2:	2201      	movs	r2, #1
 80101f4:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80101f6:	69c3      	ldr	r3, [r0, #28]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d114      	bne.n	8010226 <HAL_ADC_Start+0x4a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80101fc:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80101fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010200:	4a0d      	ldr	r2, [pc, #52]	; (8010238 <HAL_ADC_Start+0x5c>)
 8010202:	401a      	ands	r2, r3
 8010204:	2380      	movs	r3, #128	; 0x80
 8010206:	005b      	lsls	r3, r3, #1
 8010208:	4313      	orrs	r3, r2
 801020a:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 801020c:	2300      	movs	r3, #0
 801020e:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010210:	2240      	movs	r2, #64	; 0x40
 8010212:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010214:	6823      	ldr	r3, [r4, #0]
 8010216:	3a24      	subs	r2, #36	; 0x24
 8010218:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 801021a:	6822      	ldr	r2, [r4, #0]
 801021c:	6893      	ldr	r3, [r2, #8]
 801021e:	2104      	movs	r1, #4
 8010220:	430b      	orrs	r3, r1
 8010222:	6093      	str	r3, [r2, #8]
}
 8010224:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010226:	f7ff fecf 	bl	800ffc8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 801022a:	2800      	cmp	r0, #0
 801022c:	d1fa      	bne.n	8010224 <HAL_ADC_Start+0x48>
 801022e:	e7e6      	b.n	80101fe <HAL_ADC_Start+0x22>
    tmp_hal_status = HAL_BUSY;
 8010230:	2002      	movs	r0, #2
 8010232:	e7f7      	b.n	8010224 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010234:	2002      	movs	r0, #2
 8010236:	e7f5      	b.n	8010224 <HAL_ADC_Start+0x48>
 8010238:	fffff0fe 	.word	0xfffff0fe

0801023c <HAL_ADC_Stop>:
{ 
 801023c:	b510      	push	{r4, lr}
 801023e:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010240:	2340      	movs	r3, #64	; 0x40
 8010242:	5cc3      	ldrb	r3, [r0, r3]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d017      	beq.n	8010278 <HAL_ADC_Stop+0x3c>
 8010248:	2340      	movs	r3, #64	; 0x40
 801024a:	2201      	movs	r2, #1
 801024c:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 801024e:	f7ff fe51 	bl	800fef4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010252:	2800      	cmp	r0, #0
 8010254:	d003      	beq.n	801025e <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010256:	2340      	movs	r3, #64	; 0x40
 8010258:	2200      	movs	r2, #0
 801025a:	54e2      	strb	r2, [r4, r3]
}
 801025c:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 801025e:	0020      	movs	r0, r4
 8010260:	f7ff fe72 	bl	800ff48 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010264:	2800      	cmp	r0, #0
 8010266:	d1f6      	bne.n	8010256 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801026a:	4a04      	ldr	r2, [pc, #16]	; (801027c <HAL_ADC_Stop+0x40>)
 801026c:	4013      	ands	r3, r2
 801026e:	3204      	adds	r2, #4
 8010270:	32ff      	adds	r2, #255	; 0xff
 8010272:	4313      	orrs	r3, r2
 8010274:	6463      	str	r3, [r4, #68]	; 0x44
 8010276:	e7ee      	b.n	8010256 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010278:	2002      	movs	r0, #2
 801027a:	e7ef      	b.n	801025c <HAL_ADC_Stop+0x20>
 801027c:	fffffefe 	.word	0xfffffefe

08010280 <HAL_ADC_PollForConversion>:
{
 8010280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010282:	0004      	movs	r4, r0
 8010284:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010286:	6946      	ldr	r6, [r0, #20]
 8010288:	2e08      	cmp	r6, #8
 801028a:	d004      	beq.n	8010296 <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 801028c:	6803      	ldr	r3, [r0, #0]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	07db      	lsls	r3, r3, #31
 8010292:	d419      	bmi.n	80102c8 <HAL_ADC_PollForConversion+0x48>
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010294:	260c      	movs	r6, #12
  tickstart = HAL_GetTick();
 8010296:	f7ff fe0b 	bl	800feb0 <HAL_GetTick>
 801029a:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 801029c:	6823      	ldr	r3, [r4, #0]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	4216      	tst	r6, r2
 80102a2:	d11a      	bne.n	80102da <HAL_ADC_PollForConversion+0x5a>
    if(Timeout != HAL_MAX_DELAY)
 80102a4:	1c6b      	adds	r3, r5, #1
 80102a6:	d0f9      	beq.n	801029c <HAL_ADC_PollForConversion+0x1c>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80102a8:	2d00      	cmp	r5, #0
 80102aa:	d004      	beq.n	80102b6 <HAL_ADC_PollForConversion+0x36>
 80102ac:	f7ff fe00 	bl	800feb0 <HAL_GetTick>
 80102b0:	1bc0      	subs	r0, r0, r7
 80102b2:	42a8      	cmp	r0, r5
 80102b4:	d9f2      	bls.n	801029c <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80102b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102b8:	2204      	movs	r2, #4
 80102ba:	4313      	orrs	r3, r2
 80102bc:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80102be:	2340      	movs	r3, #64	; 0x40
 80102c0:	2200      	movs	r2, #0
 80102c2:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80102c4:	2003      	movs	r0, #3
 80102c6:	e02d      	b.n	8010324 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80102c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80102ca:	2220      	movs	r2, #32
 80102cc:	4313      	orrs	r3, r2
 80102ce:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80102d0:	2340      	movs	r3, #64	; 0x40
 80102d2:	2200      	movs	r2, #0
 80102d4:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 80102d6:	2001      	movs	r0, #1
 80102d8:	e024      	b.n	8010324 <HAL_ADC_PollForConversion+0xa4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80102da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80102dc:	2280      	movs	r2, #128	; 0x80
 80102de:	0092      	lsls	r2, r2, #2
 80102e0:	430a      	orrs	r2, r1
 80102e2:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80102e4:	68d9      	ldr	r1, [r3, #12]
 80102e6:	22c0      	movs	r2, #192	; 0xc0
 80102e8:	0112      	lsls	r2, r2, #4
 80102ea:	4211      	tst	r1, r2
 80102ec:	d113      	bne.n	8010316 <HAL_ADC_PollForConversion+0x96>
 80102ee:	6a22      	ldr	r2, [r4, #32]
 80102f0:	2a00      	cmp	r2, #0
 80102f2:	d110      	bne.n	8010316 <HAL_ADC_PollForConversion+0x96>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	0712      	lsls	r2, r2, #28
 80102f8:	d50d      	bpl.n	8010316 <HAL_ADC_PollForConversion+0x96>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80102fa:	689a      	ldr	r2, [r3, #8]
 80102fc:	0752      	lsls	r2, r2, #29
 80102fe:	d412      	bmi.n	8010326 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010300:	685a      	ldr	r2, [r3, #4]
 8010302:	210c      	movs	r1, #12
 8010304:	438a      	bics	r2, r1
 8010306:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010308:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801030a:	4a0c      	ldr	r2, [pc, #48]	; (801033c <HAL_ADC_PollForConversion+0xbc>)
 801030c:	4013      	ands	r3, r2
 801030e:	3204      	adds	r2, #4
 8010310:	32ff      	adds	r2, #255	; 0xff
 8010312:	4313      	orrs	r3, r2
 8010314:	6463      	str	r3, [r4, #68]	; 0x44
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010316:	69a3      	ldr	r3, [r4, #24]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10d      	bne.n	8010338 <HAL_ADC_PollForConversion+0xb8>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801031c:	6823      	ldr	r3, [r4, #0]
 801031e:	220c      	movs	r2, #12
 8010320:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8010322:	2000      	movs	r0, #0
}
 8010324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010326:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010328:	2220      	movs	r2, #32
 801032a:	4313      	orrs	r3, r2
 801032c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801032e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010330:	3a1f      	subs	r2, #31
 8010332:	4313      	orrs	r3, r2
 8010334:	64a3      	str	r3, [r4, #72]	; 0x48
 8010336:	e7ee      	b.n	8010316 <HAL_ADC_PollForConversion+0x96>
  return HAL_OK;
 8010338:	2000      	movs	r0, #0
 801033a:	e7f3      	b.n	8010324 <HAL_ADC_PollForConversion+0xa4>
 801033c:	fffffefe 	.word	0xfffffefe

08010340 <HAL_ADC_Start_IT>:
{
 8010340:	b510      	push	{r4, lr}
 8010342:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010344:	6803      	ldr	r3, [r0, #0]
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	075b      	lsls	r3, r3, #29
 801034a:	d436      	bmi.n	80103ba <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 801034c:	2340      	movs	r3, #64	; 0x40
 801034e:	5cc3      	ldrb	r3, [r0, r3]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d034      	beq.n	80103be <HAL_ADC_Start_IT+0x7e>
 8010354:	2340      	movs	r3, #64	; 0x40
 8010356:	2201      	movs	r2, #1
 8010358:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 801035a:	69c3      	ldr	r3, [r0, #28]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d11c      	bne.n	801039a <HAL_ADC_Start_IT+0x5a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010360:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8010362:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010364:	4a17      	ldr	r2, [pc, #92]	; (80103c4 <HAL_ADC_Start_IT+0x84>)
 8010366:	401a      	ands	r2, r3
 8010368:	2380      	movs	r3, #128	; 0x80
 801036a:	005b      	lsls	r3, r3, #1
 801036c:	4313      	orrs	r3, r2
 801036e:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010370:	2300      	movs	r3, #0
 8010372:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010374:	2240      	movs	r2, #64	; 0x40
 8010376:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010378:	6823      	ldr	r3, [r4, #0]
 801037a:	3a24      	subs	r2, #36	; 0x24
 801037c:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 801037e:	6963      	ldr	r3, [r4, #20]
 8010380:	2b08      	cmp	r3, #8
 8010382:	d00f      	beq.n	80103a4 <HAL_ADC_Start_IT+0x64>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8010384:	6822      	ldr	r2, [r4, #0]
 8010386:	6853      	ldr	r3, [r2, #4]
 8010388:	211c      	movs	r1, #28
 801038a:	430b      	orrs	r3, r1
 801038c:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 801038e:	6822      	ldr	r2, [r4, #0]
 8010390:	6893      	ldr	r3, [r2, #8]
 8010392:	2104      	movs	r1, #4
 8010394:	430b      	orrs	r3, r1
 8010396:	6093      	str	r3, [r2, #8]
}
 8010398:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 801039a:	f7ff fe15 	bl	800ffc8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 801039e:	2800      	cmp	r0, #0
 80103a0:	d1fa      	bne.n	8010398 <HAL_ADC_Start_IT+0x58>
 80103a2:	e7de      	b.n	8010362 <HAL_ADC_Start_IT+0x22>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80103a4:	6822      	ldr	r2, [r4, #0]
 80103a6:	6853      	ldr	r3, [r2, #4]
 80103a8:	2104      	movs	r1, #4
 80103aa:	438b      	bics	r3, r1
 80103ac:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80103ae:	6822      	ldr	r2, [r4, #0]
 80103b0:	6853      	ldr	r3, [r2, #4]
 80103b2:	3114      	adds	r1, #20
 80103b4:	430b      	orrs	r3, r1
 80103b6:	6053      	str	r3, [r2, #4]
          break;
 80103b8:	e7e9      	b.n	801038e <HAL_ADC_Start_IT+0x4e>
    tmp_hal_status = HAL_BUSY;
 80103ba:	2002      	movs	r0, #2
 80103bc:	e7ec      	b.n	8010398 <HAL_ADC_Start_IT+0x58>
    __HAL_LOCK(hadc);
 80103be:	2002      	movs	r0, #2
 80103c0:	e7ea      	b.n	8010398 <HAL_ADC_Start_IT+0x58>
 80103c2:	46c0      	nop			; (mov r8, r8)
 80103c4:	fffff0fe 	.word	0xfffff0fe

080103c8 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80103c8:	6803      	ldr	r3, [r0, #0]
 80103ca:	2208      	movs	r2, #8
 80103cc:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 80103ce:	6803      	ldr	r3, [r0, #0]
 80103d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80103d2:	4770      	bx	lr

080103d4 <HAL_ADC_ConfigChannel>:
{
 80103d4:	b530      	push	{r4, r5, lr}
 80103d6:	b083      	sub	sp, #12
 80103d8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80103da:	2300      	movs	r3, #0
 80103dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80103de:	3340      	adds	r3, #64	; 0x40
 80103e0:	5cc3      	ldrb	r3, [r0, r3]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d100      	bne.n	80103e8 <HAL_ADC_ConfigChannel+0x14>
 80103e6:	e08b      	b.n	8010500 <HAL_ADC_ConfigChannel+0x12c>
 80103e8:	2340      	movs	r3, #64	; 0x40
 80103ea:	2201      	movs	r2, #1
 80103ec:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80103ee:	6803      	ldr	r3, [r0, #0]
 80103f0:	689a      	ldr	r2, [r3, #8]
 80103f2:	0752      	lsls	r2, r2, #29
 80103f4:	d476      	bmi.n	80104e4 <HAL_ADC_ConfigChannel+0x110>
    if (sConfig->Rank != ADC_RANK_NONE)
 80103f6:	4a43      	ldr	r2, [pc, #268]	; (8010504 <HAL_ADC_ConfigChannel+0x130>)
 80103f8:	6848      	ldr	r0, [r1, #4]
 80103fa:	4290      	cmp	r0, r2
 80103fc:	d057      	beq.n	80104ae <HAL_ADC_ConfigChannel+0xda>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80103fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010400:	2001      	movs	r0, #1
 8010402:	680d      	ldr	r5, [r1, #0]
 8010404:	40a8      	lsls	r0, r5
 8010406:	4302      	orrs	r2, r0
 8010408:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801040a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801040c:	2280      	movs	r2, #128	; 0x80
 801040e:	0552      	lsls	r2, r2, #21
 8010410:	4293      	cmp	r3, r2
 8010412:	d01e      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 8010414:	2b01      	cmp	r3, #1
 8010416:	d01c      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 8010418:	2b02      	cmp	r3, #2
 801041a:	d01a      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 801041c:	2b03      	cmp	r3, #3
 801041e:	d018      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 8010420:	2b04      	cmp	r3, #4
 8010422:	d016      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 8010424:	2b05      	cmp	r3, #5
 8010426:	d014      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 8010428:	2b06      	cmp	r3, #6
 801042a:	d012      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
 801042c:	2b07      	cmp	r3, #7
 801042e:	d010      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010430:	6822      	ldr	r2, [r4, #0]
 8010432:	6950      	ldr	r0, [r2, #20]
 8010434:	2307      	movs	r3, #7
 8010436:	4003      	ands	r3, r0
 8010438:	6888      	ldr	r0, [r1, #8]
 801043a:	4298      	cmp	r0, r3
 801043c:	d009      	beq.n	8010452 <HAL_ADC_ConfigChannel+0x7e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 801043e:	6950      	ldr	r0, [r2, #20]
 8010440:	2307      	movs	r3, #7
 8010442:	4398      	bics	r0, r3
 8010444:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010446:	6820      	ldr	r0, [r4, #0]
 8010448:	6942      	ldr	r2, [r0, #20]
 801044a:	688d      	ldr	r5, [r1, #8]
 801044c:	402b      	ands	r3, r5
 801044e:	4313      	orrs	r3, r2
 8010450:	6143      	str	r3, [r0, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010452:	680b      	ldr	r3, [r1, #0]
 8010454:	001a      	movs	r2, r3
 8010456:	3a10      	subs	r2, #16
 8010458:	2a02      	cmp	r2, #2
 801045a:	d84d      	bhi.n	80104f8 <HAL_ADC_ConfigChannel+0x124>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801045c:	4a2a      	ldr	r2, [pc, #168]	; (8010508 <HAL_ADC_ConfigChannel+0x134>)
 801045e:	6812      	ldr	r2, [r2, #0]
 8010460:	2b10      	cmp	r3, #16
 8010462:	d00e      	beq.n	8010482 <HAL_ADC_ConfigChannel+0xae>
 8010464:	2b11      	cmp	r3, #17
 8010466:	d009      	beq.n	801047c <HAL_ADC_ConfigChannel+0xa8>
 8010468:	2380      	movs	r3, #128	; 0x80
 801046a:	045b      	lsls	r3, r3, #17
 801046c:	4313      	orrs	r3, r2
 801046e:	4a26      	ldr	r2, [pc, #152]	; (8010508 <HAL_ADC_ConfigChannel+0x134>)
 8010470:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010472:	680b      	ldr	r3, [r1, #0]
 8010474:	2b10      	cmp	r3, #16
 8010476:	d007      	beq.n	8010488 <HAL_ADC_ConfigChannel+0xb4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010478:	2000      	movs	r0, #0
 801047a:	e038      	b.n	80104ee <HAL_ADC_ConfigChannel+0x11a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801047c:	2380      	movs	r3, #128	; 0x80
 801047e:	03db      	lsls	r3, r3, #15
 8010480:	e7f4      	b.n	801046c <HAL_ADC_ConfigChannel+0x98>
 8010482:	2380      	movs	r3, #128	; 0x80
 8010484:	041b      	lsls	r3, r3, #16
 8010486:	e7f1      	b.n	801046c <HAL_ADC_ConfigChannel+0x98>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010488:	4b20      	ldr	r3, [pc, #128]	; (801050c <HAL_ADC_ConfigChannel+0x138>)
 801048a:	6818      	ldr	r0, [r3, #0]
 801048c:	4920      	ldr	r1, [pc, #128]	; (8010510 <HAL_ADC_ConfigChannel+0x13c>)
 801048e:	f7ef fe5f 	bl	8000150 <__udivsi3>
 8010492:	0003      	movs	r3, r0
 8010494:	0080      	lsls	r0, r0, #2
 8010496:	18c0      	adds	r0, r0, r3
 8010498:	0040      	lsls	r0, r0, #1
 801049a:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 801049c:	e002      	b.n	80104a4 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 801049e:	9b01      	ldr	r3, [sp, #4]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80104a4:	9b01      	ldr	r3, [sp, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1f9      	bne.n	801049e <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104aa:	2000      	movs	r0, #0
 80104ac:	e01f      	b.n	80104ee <HAL_ADC_ConfigChannel+0x11a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80104ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104b0:	2001      	movs	r0, #1
 80104b2:	680d      	ldr	r5, [r1, #0]
 80104b4:	40a8      	lsls	r0, r5
 80104b6:	4382      	bics	r2, r0
 80104b8:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80104ba:	680b      	ldr	r3, [r1, #0]
 80104bc:	001a      	movs	r2, r3
 80104be:	3a10      	subs	r2, #16
 80104c0:	2a02      	cmp	r2, #2
 80104c2:	d81b      	bhi.n	80104fc <HAL_ADC_ConfigChannel+0x128>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80104c4:	4a10      	ldr	r2, [pc, #64]	; (8010508 <HAL_ADC_ConfigChannel+0x134>)
 80104c6:	6812      	ldr	r2, [r2, #0]
 80104c8:	2b10      	cmp	r3, #16
 80104ca:	d009      	beq.n	80104e0 <HAL_ADC_ConfigChannel+0x10c>
 80104cc:	2b11      	cmp	r3, #17
 80104ce:	d005      	beq.n	80104dc <HAL_ADC_ConfigChannel+0x108>
 80104d0:	4b10      	ldr	r3, [pc, #64]	; (8010514 <HAL_ADC_ConfigChannel+0x140>)
 80104d2:	4013      	ands	r3, r2
 80104d4:	4a0c      	ldr	r2, [pc, #48]	; (8010508 <HAL_ADC_ConfigChannel+0x134>)
 80104d6:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104d8:	2000      	movs	r0, #0
 80104da:	e008      	b.n	80104ee <HAL_ADC_ConfigChannel+0x11a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80104dc:	4b0e      	ldr	r3, [pc, #56]	; (8010518 <HAL_ADC_ConfigChannel+0x144>)
 80104de:	e7f8      	b.n	80104d2 <HAL_ADC_ConfigChannel+0xfe>
 80104e0:	4b0e      	ldr	r3, [pc, #56]	; (801051c <HAL_ADC_ConfigChannel+0x148>)
 80104e2:	e7f6      	b.n	80104d2 <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80104e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80104e6:	2220      	movs	r2, #32
 80104e8:	4313      	orrs	r3, r2
 80104ea:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80104ec:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80104ee:	2340      	movs	r3, #64	; 0x40
 80104f0:	2200      	movs	r2, #0
 80104f2:	54e2      	strb	r2, [r4, r3]
}
 80104f4:	b003      	add	sp, #12
 80104f6:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104f8:	2000      	movs	r0, #0
 80104fa:	e7f8      	b.n	80104ee <HAL_ADC_ConfigChannel+0x11a>
 80104fc:	2000      	movs	r0, #0
 80104fe:	e7f6      	b.n	80104ee <HAL_ADC_ConfigChannel+0x11a>
  __HAL_LOCK(hadc);
 8010500:	2002      	movs	r0, #2
 8010502:	e7f7      	b.n	80104f4 <HAL_ADC_ConfigChannel+0x120>
 8010504:	00001001 	.word	0x00001001
 8010508:	40012708 	.word	0x40012708
 801050c:	20000108 	.word	0x20000108
 8010510:	000f4240 	.word	0x000f4240
 8010514:	feffffff 	.word	0xfeffffff
 8010518:	ffbfffff 	.word	0xffbfffff
 801051c:	ff7fffff 	.word	0xff7fffff

08010520 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010520:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010522:	2800      	cmp	r0, #0
 8010524:	db11      	blt.n	801054a <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010526:	0883      	lsrs	r3, r0, #2
 8010528:	4d13      	ldr	r5, [pc, #76]	; (8010578 <HAL_NVIC_SetPriority+0x58>)
 801052a:	33c0      	adds	r3, #192	; 0xc0
 801052c:	009b      	lsls	r3, r3, #2
 801052e:	595c      	ldr	r4, [r3, r5]
 8010530:	2203      	movs	r2, #3
 8010532:	4010      	ands	r0, r2
 8010534:	00c0      	lsls	r0, r0, #3
 8010536:	32fc      	adds	r2, #252	; 0xfc
 8010538:	0016      	movs	r6, r2
 801053a:	4086      	lsls	r6, r0
 801053c:	43b4      	bics	r4, r6
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801053e:	0189      	lsls	r1, r1, #6
 8010540:	400a      	ands	r2, r1
 8010542:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010544:	4322      	orrs	r2, r4
 8010546:	515a      	str	r2, [r3, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010548:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801054a:	230f      	movs	r3, #15
 801054c:	4003      	ands	r3, r0
 801054e:	3b08      	subs	r3, #8
 8010550:	089b      	lsrs	r3, r3, #2
 8010552:	3306      	adds	r3, #6
 8010554:	009b      	lsls	r3, r3, #2
 8010556:	4a09      	ldr	r2, [pc, #36]	; (801057c <HAL_NVIC_SetPriority+0x5c>)
 8010558:	4694      	mov	ip, r2
 801055a:	4463      	add	r3, ip
 801055c:	685d      	ldr	r5, [r3, #4]
 801055e:	2403      	movs	r4, #3
 8010560:	4020      	ands	r0, r4
 8010562:	00c0      	lsls	r0, r0, #3
 8010564:	22ff      	movs	r2, #255	; 0xff
 8010566:	0014      	movs	r4, r2
 8010568:	4084      	lsls	r4, r0
 801056a:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801056c:	0189      	lsls	r1, r1, #6
 801056e:	400a      	ands	r2, r1
 8010570:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010572:	432a      	orrs	r2, r5
 8010574:	605a      	str	r2, [r3, #4]
 8010576:	e7e7      	b.n	8010548 <HAL_NVIC_SetPriority+0x28>
 8010578:	e000e100 	.word	0xe000e100
 801057c:	e000ed00 	.word	0xe000ed00

08010580 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010580:	231f      	movs	r3, #31
 8010582:	4018      	ands	r0, r3
 8010584:	3b1e      	subs	r3, #30
 8010586:	4083      	lsls	r3, r0
 8010588:	4a01      	ldr	r2, [pc, #4]	; (8010590 <HAL_NVIC_EnableIRQ+0x10>)
 801058a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 801058c:	4770      	bx	lr
 801058e:	46c0      	nop			; (mov r8, r8)
 8010590:	e000e100 	.word	0xe000e100

08010594 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010594:	231f      	movs	r3, #31
 8010596:	4018      	ands	r0, r3
 8010598:	3b1e      	subs	r3, #30
 801059a:	4083      	lsls	r3, r0
 801059c:	4901      	ldr	r1, [pc, #4]	; (80105a4 <HAL_NVIC_DisableIRQ+0x10>)
 801059e:	2280      	movs	r2, #128	; 0x80
 80105a0:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80105a2:	4770      	bx	lr
 80105a4:	e000e100 	.word	0xe000e100

080105a8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80105a8:	3801      	subs	r0, #1
 80105aa:	2380      	movs	r3, #128	; 0x80
 80105ac:	045b      	lsls	r3, r3, #17
 80105ae:	4298      	cmp	r0, r3
 80105b0:	d20f      	bcs.n	80105d2 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80105b2:	4a09      	ldr	r2, [pc, #36]	; (80105d8 <HAL_SYSTICK_Config+0x30>)
 80105b4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80105b6:	4809      	ldr	r0, [pc, #36]	; (80105dc <HAL_SYSTICK_Config+0x34>)
 80105b8:	6a03      	ldr	r3, [r0, #32]
 80105ba:	021b      	lsls	r3, r3, #8
 80105bc:	0a1b      	lsrs	r3, r3, #8
 80105be:	21c0      	movs	r1, #192	; 0xc0
 80105c0:	0609      	lsls	r1, r1, #24
 80105c2:	430b      	orrs	r3, r1
 80105c4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80105c6:	2300      	movs	r3, #0
 80105c8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80105ca:	3307      	adds	r3, #7
 80105cc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80105ce:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80105d0:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80105d2:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80105d4:	e7fc      	b.n	80105d0 <HAL_SYSTICK_Config+0x28>
 80105d6:	46c0      	nop			; (mov r8, r8)
 80105d8:	e000e010 	.word	0xe000e010
 80105dc:	e000ed00 	.word	0xe000ed00

080105e0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80105e0:	2804      	cmp	r0, #4
 80105e2:	d005      	beq.n	80105f0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80105e4:	4a05      	ldr	r2, [pc, #20]	; (80105fc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80105e6:	6813      	ldr	r3, [r2, #0]
 80105e8:	2104      	movs	r1, #4
 80105ea:	438b      	bics	r3, r1
 80105ec:	6013      	str	r3, [r2, #0]
  }
}
 80105ee:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80105f0:	4a02      	ldr	r2, [pc, #8]	; (80105fc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80105f2:	6813      	ldr	r3, [r2, #0]
 80105f4:	2104      	movs	r1, #4
 80105f6:	430b      	orrs	r3, r1
 80105f8:	6013      	str	r3, [r2, #0]
 80105fa:	e7f8      	b.n	80105ee <HAL_SYSTICK_CLKSourceConfig+0xe>
 80105fc:	e000e010 	.word	0xe000e010

08010600 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010600:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010602:	2500      	movs	r5, #0
 8010604:	0893      	lsrs	r3, r2, #2
 8010606:	42ab      	cmp	r3, r5
 8010608:	d90f      	bls.n	801062a <CRC_Handle_8+0x2a>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801060a:	00ac      	lsls	r4, r5, #2
 801060c:	5d0b      	ldrb	r3, [r1, r4]
 801060e:	061b      	lsls	r3, r3, #24
 8010610:	190c      	adds	r4, r1, r4
 8010612:	7866      	ldrb	r6, [r4, #1]
 8010614:	0436      	lsls	r6, r6, #16
 8010616:	4333      	orrs	r3, r6
 8010618:	78a6      	ldrb	r6, [r4, #2]
 801061a:	0236      	lsls	r6, r6, #8
 801061c:	4333      	orrs	r3, r6
 801061e:	78e6      	ldrb	r6, [r4, #3]
 8010620:	6804      	ldr	r4, [r0, #0]
 8010622:	4333      	orrs	r3, r6
 8010624:	6023      	str	r3, [r4, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8010626:	3501      	adds	r5, #1
 8010628:	e7ec      	b.n	8010604 <CRC_Handle_8+0x4>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 801062a:	2303      	movs	r3, #3
 801062c:	001c      	movs	r4, r3
 801062e:	4014      	ands	r4, r2
 8010630:	4213      	tst	r3, r2
 8010632:	d005      	beq.n	8010640 <CRC_Handle_8+0x40>
   {
     if  (BufferLength%4 == 1)
 8010634:	2c01      	cmp	r4, #1
 8010636:	d006      	beq.n	8010646 <CRC_Handle_8+0x46>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010638:	2c02      	cmp	r4, #2
 801063a:	d009      	beq.n	8010650 <CRC_Handle_8+0x50>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
     }
     if  (BufferLength%4 == 3)
 801063c:	2c03      	cmp	r4, #3
 801063e:	d010      	beq.n	8010662 <CRC_Handle_8+0x62>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010640:	6803      	ldr	r3, [r0, #0]
 8010642:	6818      	ldr	r0, [r3, #0]
}
 8010644:	bd70      	pop	{r4, r5, r6, pc}
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010646:	00ab      	lsls	r3, r5, #2
 8010648:	5ccb      	ldrb	r3, [r1, r3]
 801064a:	6802      	ldr	r2, [r0, #0]
 801064c:	7013      	strb	r3, [r2, #0]
 801064e:	e7f3      	b.n	8010638 <CRC_Handle_8+0x38>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010650:	00ab      	lsls	r3, r5, #2
 8010652:	5cca      	ldrb	r2, [r1, r3]
 8010654:	0212      	lsls	r2, r2, #8
 8010656:	18cb      	adds	r3, r1, r3
 8010658:	785b      	ldrb	r3, [r3, #1]
 801065a:	4313      	orrs	r3, r2
 801065c:	6802      	ldr	r2, [r0, #0]
 801065e:	8013      	strh	r3, [r2, #0]
 8010660:	e7ec      	b.n	801063c <CRC_Handle_8+0x3c>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010662:	00ad      	lsls	r5, r5, #2
 8010664:	5d4a      	ldrb	r2, [r1, r5]
 8010666:	0212      	lsls	r2, r2, #8
 8010668:	194d      	adds	r5, r1, r5
 801066a:	786b      	ldrb	r3, [r5, #1]
 801066c:	4313      	orrs	r3, r2
 801066e:	6802      	ldr	r2, [r0, #0]
 8010670:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010672:	78ab      	ldrb	r3, [r5, #2]
 8010674:	6802      	ldr	r2, [r0, #0]
 8010676:	7013      	strb	r3, [r2, #0]
 8010678:	e7e2      	b.n	8010640 <CRC_Handle_8+0x40>

0801067a <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 801067a:	b570      	push	{r4, r5, r6, lr}
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 801067c:	2500      	movs	r5, #0
 801067e:	0853      	lsrs	r3, r2, #1
 8010680:	42ab      	cmp	r3, r5
 8010682:	d909      	bls.n	8010698 <CRC_Handle_16+0x1e>
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010684:	00ac      	lsls	r4, r5, #2
 8010686:	5b0b      	ldrh	r3, [r1, r4]
 8010688:	041b      	lsls	r3, r3, #16
 801068a:	190c      	adds	r4, r1, r4
 801068c:	8866      	ldrh	r6, [r4, #2]
 801068e:	6804      	ldr	r4, [r0, #0]
 8010690:	4333      	orrs	r3, r6
 8010692:	6023      	str	r3, [r4, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010694:	3501      	adds	r5, #1
 8010696:	e7f2      	b.n	801067e <CRC_Handle_16+0x4>
  }
  if ((BufferLength%2) != 0)
 8010698:	07d3      	lsls	r3, r2, #31
 801069a:	d503      	bpl.n	80106a4 <CRC_Handle_16+0x2a>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801069c:	00ad      	lsls	r5, r5, #2
 801069e:	5a6b      	ldrh	r3, [r5, r1]
 80106a0:	6802      	ldr	r2, [r0, #0]
 80106a2:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80106a4:	6803      	ldr	r3, [r0, #0]
 80106a6:	6818      	ldr	r0, [r3, #0]
}
 80106a8:	bd70      	pop	{r4, r5, r6, pc}

080106aa <HAL_CRC_Init>:
{
 80106aa:	b510      	push	{r4, lr}
 80106ac:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80106ae:	d029      	beq.n	8010704 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80106b0:	7f43      	ldrb	r3, [r0, #29]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d01e      	beq.n	80106f4 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80106b6:	2302      	movs	r3, #2
 80106b8:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80106ba:	0020      	movs	r0, r4
 80106bc:	f000 f8a8 	bl	8010810 <HAL_CRCEx_Init>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d121      	bne.n	8010708 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80106c4:	7963      	ldrb	r3, [r4, #5]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d118      	bne.n	80106fc <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	2201      	movs	r2, #1
 80106ce:	4252      	negs	r2, r2
 80106d0:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80106d2:	6822      	ldr	r2, [r4, #0]
 80106d4:	6893      	ldr	r3, [r2, #8]
 80106d6:	2160      	movs	r1, #96	; 0x60
 80106d8:	438b      	bics	r3, r1
 80106da:	6961      	ldr	r1, [r4, #20]
 80106dc:	430b      	orrs	r3, r1
 80106de:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 80106e0:	6822      	ldr	r2, [r4, #0]
 80106e2:	6893      	ldr	r3, [r2, #8]
 80106e4:	2180      	movs	r1, #128	; 0x80
 80106e6:	438b      	bics	r3, r1
 80106e8:	69a1      	ldr	r1, [r4, #24]
 80106ea:	430b      	orrs	r3, r1
 80106ec:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80106ee:	2301      	movs	r3, #1
 80106f0:	7763      	strb	r3, [r4, #29]
}
 80106f2:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80106f4:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80106f6:	f7fb f8c5 	bl	800b884 <HAL_CRC_MspInit>
 80106fa:	e7dc      	b.n	80106b6 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	6922      	ldr	r2, [r4, #16]
 8010700:	611a      	str	r2, [r3, #16]
 8010702:	e7e6      	b.n	80106d2 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010704:	2001      	movs	r0, #1
 8010706:	e7f4      	b.n	80106f2 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010708:	2001      	movs	r0, #1
 801070a:	e7f2      	b.n	80106f2 <HAL_CRC_Init+0x48>

0801070c <HAL_CRC_Accumulate>:
{
 801070c:	b570      	push	{r4, r5, r6, lr}
 801070e:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010710:	7f03      	ldrb	r3, [r0, #28]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d022      	beq.n	801075c <HAL_CRC_Accumulate+0x50>
 8010716:	2301      	movs	r3, #1
 8010718:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801071a:	3301      	adds	r3, #1
 801071c:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 801071e:	6a03      	ldr	r3, [r0, #32]
 8010720:	2b02      	cmp	r3, #2
 8010722:	d018      	beq.n	8010756 <HAL_CRC_Accumulate+0x4a>
 8010724:	2b03      	cmp	r3, #3
 8010726:	d011      	beq.n	801074c <HAL_CRC_Accumulate+0x40>
 8010728:	2b01      	cmp	r3, #1
 801072a:	d011      	beq.n	8010750 <HAL_CRC_Accumulate+0x44>
 801072c:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801072e:	2301      	movs	r3, #1
 8010730:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010732:	2300      	movs	r3, #0
 8010734:	7723      	strb	r3, [r4, #28]
}
 8010736:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8010738:	6820      	ldr	r0, [r4, #0]
 801073a:	009d      	lsls	r5, r3, #2
 801073c:	586d      	ldr	r5, [r5, r1]
 801073e:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010740:	3301      	adds	r3, #1
 8010742:	4293      	cmp	r3, r2
 8010744:	d3f8      	bcc.n	8010738 <HAL_CRC_Accumulate+0x2c>
      temp = hcrc->Instance->DR;
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	6818      	ldr	r0, [r3, #0]
      break;
 801074a:	e7f0      	b.n	801072e <HAL_CRC_Accumulate+0x22>
  switch (hcrc->InputDataFormat)
 801074c:	2300      	movs	r3, #0
 801074e:	e7f8      	b.n	8010742 <HAL_CRC_Accumulate+0x36>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010750:	f7ff ff56 	bl	8010600 <CRC_Handle_8>
      break;
 8010754:	e7eb      	b.n	801072e <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010756:	f7ff ff90 	bl	801067a <CRC_Handle_16>
      break;
 801075a:	e7e8      	b.n	801072e <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 801075c:	2002      	movs	r0, #2
 801075e:	e7ea      	b.n	8010736 <HAL_CRC_Accumulate+0x2a>

08010760 <HAL_CRC_Calculate>:
{
 8010760:	b570      	push	{r4, r5, r6, lr}
 8010762:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010764:	7f03      	ldrb	r3, [r0, #28]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d028      	beq.n	80107bc <HAL_CRC_Calculate+0x5c>
 801076a:	2501      	movs	r5, #1
 801076c:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 801076e:	2302      	movs	r3, #2
 8010770:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010772:	6800      	ldr	r0, [r0, #0]
 8010774:	6883      	ldr	r3, [r0, #8]
 8010776:	432b      	orrs	r3, r5
 8010778:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801077a:	6a23      	ldr	r3, [r4, #32]
 801077c:	2b02      	cmp	r3, #2
 801077e:	d019      	beq.n	80107b4 <HAL_CRC_Calculate+0x54>
 8010780:	2b03      	cmp	r3, #3
 8010782:	d011      	beq.n	80107a8 <HAL_CRC_Calculate+0x48>
 8010784:	2b01      	cmp	r3, #1
 8010786:	d011      	beq.n	80107ac <HAL_CRC_Calculate+0x4c>
 8010788:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 801078a:	2301      	movs	r3, #1
 801078c:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801078e:	2300      	movs	r3, #0
 8010790:	7723      	strb	r3, [r4, #28]
}
 8010792:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 8010794:	6820      	ldr	r0, [r4, #0]
 8010796:	009d      	lsls	r5, r3, #2
 8010798:	586d      	ldr	r5, [r5, r1]
 801079a:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 801079c:	3301      	adds	r3, #1
 801079e:	4293      	cmp	r3, r2
 80107a0:	d3f8      	bcc.n	8010794 <HAL_CRC_Calculate+0x34>
      temp = hcrc->Instance->DR;
 80107a2:	6823      	ldr	r3, [r4, #0]
 80107a4:	6818      	ldr	r0, [r3, #0]
      break;
 80107a6:	e7f0      	b.n	801078a <HAL_CRC_Calculate+0x2a>
  switch (hcrc->InputDataFormat)
 80107a8:	2300      	movs	r3, #0
 80107aa:	e7f8      	b.n	801079e <HAL_CRC_Calculate+0x3e>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80107ac:	0020      	movs	r0, r4
 80107ae:	f7ff ff27 	bl	8010600 <CRC_Handle_8>
      break;
 80107b2:	e7ea      	b.n	801078a <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80107b4:	0020      	movs	r0, r4
 80107b6:	f7ff ff60 	bl	801067a <CRC_Handle_16>
      break;
 80107ba:	e7e6      	b.n	801078a <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 80107bc:	2002      	movs	r0, #2
 80107be:	e7e8      	b.n	8010792 <HAL_CRC_Calculate+0x32>

080107c0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80107c0:	b510      	push	{r4, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80107c2:	241f      	movs	r4, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 80107c4:	e000      	b.n	80107c8 <HAL_CRCEx_Polynomial_Set+0x8>
 80107c6:	001c      	movs	r4, r3
 80107c8:	2301      	movs	r3, #1
 80107ca:	40a3      	lsls	r3, r4
 80107cc:	4219      	tst	r1, r3
 80107ce:	d103      	bne.n	80107d8 <HAL_CRCEx_Polynomial_Set+0x18>
 80107d0:	1e63      	subs	r3, r4, #1
 80107d2:	2c00      	cmp	r4, #0
 80107d4:	d1f7      	bne.n	80107c6 <HAL_CRCEx_Polynomial_Set+0x6>
 80107d6:	001c      	movs	r4, r3
  {}

  switch (PolyLength)
 80107d8:	2a10      	cmp	r2, #16
 80107da:	d011      	beq.n	8010800 <HAL_CRCEx_Polynomial_Set+0x40>
 80107dc:	2a18      	cmp	r2, #24
 80107de:	d00b      	beq.n	80107f8 <HAL_CRCEx_Polynomial_Set+0x38>
 80107e0:	2a08      	cmp	r2, #8
 80107e2:	d011      	beq.n	8010808 <HAL_CRCEx_Polynomial_Set+0x48>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80107e4:	6803      	ldr	r3, [r0, #0]
 80107e6:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80107e8:	6801      	ldr	r1, [r0, #0]
 80107ea:	688b      	ldr	r3, [r1, #8]
 80107ec:	2018      	movs	r0, #24
 80107ee:	4383      	bics	r3, r0
 80107f0:	431a      	orrs	r2, r3
 80107f2:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 80107f4:	2000      	movs	r0, #0
}
 80107f6:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80107f8:	2c06      	cmp	r4, #6
 80107fa:	d9f3      	bls.n	80107e4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 80107fc:	2001      	movs	r0, #1
 80107fe:	e7fa      	b.n	80107f6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010800:	2c07      	cmp	r4, #7
 8010802:	d9ef      	bls.n	80107e4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 8010804:	2001      	movs	r0, #1
 8010806:	e7f6      	b.n	80107f6 <HAL_CRCEx_Polynomial_Set+0x36>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010808:	2c0f      	cmp	r4, #15
 801080a:	d9eb      	bls.n	80107e4 <HAL_CRCEx_Polynomial_Set+0x24>
        return  HAL_ERROR;
 801080c:	2001      	movs	r0, #1
 801080e:	e7f2      	b.n	80107f6 <HAL_CRCEx_Polynomial_Set+0x36>

08010810 <HAL_CRCEx_Init>:
{
 8010810:	b510      	push	{r4, lr}
 8010812:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010814:	7900      	ldrb	r0, [r0, #4]
 8010816:	2800      	cmp	r0, #0
 8010818:	d108      	bne.n	801082c <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 801081a:	681a      	ldr	r2, [r3, #0]
 801081c:	4908      	ldr	r1, [pc, #32]	; (8010840 <HAL_CRCEx_Init+0x30>)
 801081e:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	6893      	ldr	r3, [r2, #8]
 8010824:	2118      	movs	r1, #24
 8010826:	438b      	bics	r3, r1
 8010828:	6093      	str	r3, [r2, #8]
}
 801082a:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801082c:	68da      	ldr	r2, [r3, #12]
 801082e:	6899      	ldr	r1, [r3, #8]
 8010830:	0018      	movs	r0, r3
 8010832:	f7ff ffc5 	bl	80107c0 <HAL_CRCEx_Polynomial_Set>
 8010836:	2800      	cmp	r0, #0
 8010838:	d0f7      	beq.n	801082a <HAL_CRCEx_Init+0x1a>
      return HAL_ERROR;
 801083a:	2001      	movs	r0, #1
 801083c:	e7f5      	b.n	801082a <HAL_CRCEx_Init+0x1a>
 801083e:	46c0      	nop			; (mov r8, r8)
 8010840:	04c11db7 	.word	0x04c11db7

08010844 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8010844:	b510      	push	{r4, lr}
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010846:	6804      	ldr	r4, [r0, #0]
 8010848:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801084a:	6843      	ldr	r3, [r0, #4]
 801084c:	2b10      	cmp	r3, #16
 801084e:	d004      	beq.n	801085a <DMA_SetConfig+0x16>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010850:	6803      	ldr	r3, [r0, #0]
 8010852:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010854:	6803      	ldr	r3, [r0, #0]
 8010856:	60da      	str	r2, [r3, #12]
  }
}
 8010858:	bd10      	pop	{r4, pc}
    hdma->Instance->CPAR = DstAddress;
 801085a:	6803      	ldr	r3, [r0, #0]
 801085c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801085e:	6803      	ldr	r3, [r0, #0]
 8010860:	60d9      	str	r1, [r3, #12]
 8010862:	e7f9      	b.n	8010858 <DMA_SetConfig+0x14>

08010864 <HAL_DMA_Init>:
{ 
 8010864:	b530      	push	{r4, r5, lr}
  if(hdma == NULL)
 8010866:	2800      	cmp	r0, #0
 8010868:	d022      	beq.n	80108b0 <HAL_DMA_Init+0x4c>
  if(hdma->State == HAL_DMA_STATE_RESET)
 801086a:	2321      	movs	r3, #33	; 0x21
 801086c:	5cc3      	ldrb	r3, [r0, r3]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d102      	bne.n	8010878 <HAL_DMA_Init+0x14>
    hdma->Lock = HAL_UNLOCKED;
 8010872:	3320      	adds	r3, #32
 8010874:	2200      	movs	r2, #0
 8010876:	54c2      	strb	r2, [r0, r3]
  hdma->State = HAL_DMA_STATE_BUSY;
 8010878:	2121      	movs	r1, #33	; 0x21
 801087a:	2302      	movs	r3, #2
 801087c:	5443      	strb	r3, [r0, r1]
  tmp = hdma->Instance->CCR;
 801087e:	6804      	ldr	r4, [r0, #0]
 8010880:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010882:	4a0c      	ldr	r2, [pc, #48]	; (80108b4 <HAL_DMA_Init+0x50>)
 8010884:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8010886:	6843      	ldr	r3, [r0, #4]
 8010888:	6885      	ldr	r5, [r0, #8]
 801088a:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801088c:	68c5      	ldr	r5, [r0, #12]
 801088e:	432b      	orrs	r3, r5
 8010890:	6905      	ldr	r5, [r0, #16]
 8010892:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010894:	6945      	ldr	r5, [r0, #20]
 8010896:	432b      	orrs	r3, r5
 8010898:	6985      	ldr	r5, [r0, #24]
 801089a:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 801089c:	69c5      	ldr	r5, [r0, #28]
 801089e:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80108a0:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 80108a2:	6023      	str	r3, [r4, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80108a4:	2300      	movs	r3, #0
 80108a6:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->State  = HAL_DMA_STATE_READY;
 80108a8:	3301      	adds	r3, #1
 80108aa:	5443      	strb	r3, [r0, r1]
  return HAL_OK;
 80108ac:	2000      	movs	r0, #0
}  
 80108ae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80108b0:	2001      	movs	r0, #1
 80108b2:	e7fc      	b.n	80108ae <HAL_DMA_Init+0x4a>
 80108b4:	ffffc00f 	.word	0xffffc00f

080108b8 <HAL_DMA_Start_IT>:
{
 80108b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ba:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80108bc:	2020      	movs	r0, #32
 80108be:	5c20      	ldrb	r0, [r4, r0]
 80108c0:	2801      	cmp	r0, #1
 80108c2:	d020      	beq.n	8010906 <HAL_DMA_Start_IT+0x4e>
 80108c4:	2501      	movs	r5, #1
 80108c6:	2020      	movs	r0, #32
 80108c8:	5425      	strb	r5, [r4, r0]
  hdma->State = HAL_DMA_STATE_BUSY;  
 80108ca:	2602      	movs	r6, #2
 80108cc:	3001      	adds	r0, #1
 80108ce:	5426      	strb	r6, [r4, r0]
  __HAL_DMA_DISABLE(hdma);
 80108d0:	6827      	ldr	r7, [r4, #0]
 80108d2:	6838      	ldr	r0, [r7, #0]
 80108d4:	43a8      	bics	r0, r5
 80108d6:	6038      	str	r0, [r7, #0]
  DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80108d8:	0020      	movs	r0, r4
 80108da:	f7ff ffb3 	bl	8010844 <DMA_SetConfig>
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 80108de:	6822      	ldr	r2, [r4, #0]
 80108e0:	6813      	ldr	r3, [r2, #0]
 80108e2:	4333      	orrs	r3, r6
 80108e4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 80108e6:	6822      	ldr	r2, [r4, #0]
 80108e8:	6813      	ldr	r3, [r2, #0]
 80108ea:	2104      	movs	r1, #4
 80108ec:	430b      	orrs	r3, r1
 80108ee:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80108f0:	6822      	ldr	r2, [r4, #0]
 80108f2:	6813      	ldr	r3, [r2, #0]
 80108f4:	3104      	adds	r1, #4
 80108f6:	430b      	orrs	r3, r1
 80108f8:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 80108fa:	6822      	ldr	r2, [r4, #0]
 80108fc:	6813      	ldr	r3, [r2, #0]
 80108fe:	432b      	orrs	r3, r5
 8010900:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010902:	2000      	movs	r0, #0
} 
 8010904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8010906:	2002      	movs	r0, #2
 8010908:	e7fc      	b.n	8010904 <HAL_DMA_Start_IT+0x4c>

0801090a <HAL_DMA_Abort>:
{
 801090a:	b570      	push	{r4, r5, r6, lr}
 801090c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801090e:	6802      	ldr	r2, [r0, #0]
 8010910:	6813      	ldr	r3, [r2, #0]
 8010912:	2101      	movs	r1, #1
 8010914:	438b      	bics	r3, r1
 8010916:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010918:	f7ff faca 	bl	800feb0 <HAL_GetTick>
 801091c:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	07db      	lsls	r3, r3, #31
 8010924:	d511      	bpl.n	801094a <HAL_DMA_Abort+0x40>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010926:	f7ff fac3 	bl	800feb0 <HAL_GetTick>
 801092a:	1b40      	subs	r0, r0, r5
 801092c:	23fa      	movs	r3, #250	; 0xfa
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	4298      	cmp	r0, r3
 8010932:	d9f4      	bls.n	801091e <HAL_DMA_Abort+0x14>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010934:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010936:	2220      	movs	r2, #32
 8010938:	4313      	orrs	r3, r2
 801093a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801093c:	2321      	movs	r3, #33	; 0x21
 801093e:	2103      	movs	r1, #3
 8010940:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010942:	2300      	movs	r3, #0
 8010944:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010946:	2003      	movs	r0, #3
 8010948:	e006      	b.n	8010958 <HAL_DMA_Abort+0x4e>
  hdma->State = HAL_DMA_STATE_READY; 
 801094a:	2321      	movs	r3, #33	; 0x21
 801094c:	2201      	movs	r2, #1
 801094e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010950:	3b01      	subs	r3, #1
 8010952:	2200      	movs	r2, #0
 8010954:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010956:	2000      	movs	r0, #0
}
 8010958:	bd70      	pop	{r4, r5, r6, pc}
	...

0801095c <HAL_DMA_IRQHandler>:
{        
 801095c:	b510      	push	{r4, lr}
 801095e:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010960:	6802      	ldr	r2, [r0, #0]
 8010962:	4bb6      	ldr	r3, [pc, #728]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010964:	429a      	cmp	r2, r3
 8010966:	d800      	bhi.n	801096a <HAL_DMA_IRQHandler+0xe>
 8010968:	e083      	b.n	8010a72 <HAL_DMA_IRQHandler+0x116>
 801096a:	4bb5      	ldr	r3, [pc, #724]	; (8010c40 <HAL_DMA_IRQHandler+0x2e4>)
 801096c:	6819      	ldr	r1, [r3, #0]
 801096e:	4bb5      	ldr	r3, [pc, #724]	; (8010c44 <HAL_DMA_IRQHandler+0x2e8>)
 8010970:	429a      	cmp	r2, r3
 8010972:	d023      	beq.n	80109bc <HAL_DMA_IRQHandler+0x60>
 8010974:	4bb4      	ldr	r3, [pc, #720]	; (8010c48 <HAL_DMA_IRQHandler+0x2ec>)
 8010976:	429a      	cmp	r2, r3
 8010978:	d063      	beq.n	8010a42 <HAL_DMA_IRQHandler+0xe6>
 801097a:	4bb4      	ldr	r3, [pc, #720]	; (8010c4c <HAL_DMA_IRQHandler+0x2f0>)
 801097c:	429a      	cmp	r2, r3
 801097e:	d062      	beq.n	8010a46 <HAL_DMA_IRQHandler+0xea>
 8010980:	4bb3      	ldr	r3, [pc, #716]	; (8010c50 <HAL_DMA_IRQHandler+0x2f4>)
 8010982:	429a      	cmp	r2, r3
 8010984:	d062      	beq.n	8010a4c <HAL_DMA_IRQHandler+0xf0>
 8010986:	4bb3      	ldr	r3, [pc, #716]	; (8010c54 <HAL_DMA_IRQHandler+0x2f8>)
 8010988:	429a      	cmp	r2, r3
 801098a:	d062      	beq.n	8010a52 <HAL_DMA_IRQHandler+0xf6>
 801098c:	4bb2      	ldr	r3, [pc, #712]	; (8010c58 <HAL_DMA_IRQHandler+0x2fc>)
 801098e:	429a      	cmp	r2, r3
 8010990:	d062      	beq.n	8010a58 <HAL_DMA_IRQHandler+0xfc>
 8010992:	4baa      	ldr	r3, [pc, #680]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010994:	429a      	cmp	r2, r3
 8010996:	d062      	beq.n	8010a5e <HAL_DMA_IRQHandler+0x102>
 8010998:	4bb0      	ldr	r3, [pc, #704]	; (8010c5c <HAL_DMA_IRQHandler+0x300>)
 801099a:	429a      	cmp	r2, r3
 801099c:	d062      	beq.n	8010a64 <HAL_DMA_IRQHandler+0x108>
 801099e:	4bb0      	ldr	r3, [pc, #704]	; (8010c60 <HAL_DMA_IRQHandler+0x304>)
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d061      	beq.n	8010a68 <HAL_DMA_IRQHandler+0x10c>
 80109a4:	4baf      	ldr	r3, [pc, #700]	; (8010c64 <HAL_DMA_IRQHandler+0x308>)
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d060      	beq.n	8010a6c <HAL_DMA_IRQHandler+0x110>
 80109aa:	4baf      	ldr	r3, [pc, #700]	; (8010c68 <HAL_DMA_IRQHandler+0x30c>)
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d002      	beq.n	80109b6 <HAL_DMA_IRQHandler+0x5a>
 80109b0:	2380      	movs	r3, #128	; 0x80
 80109b2:	031b      	lsls	r3, r3, #12
 80109b4:	e003      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 80109b6:	2380      	movs	r3, #128	; 0x80
 80109b8:	021b      	lsls	r3, r3, #8
 80109ba:	e000      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 80109bc:	2308      	movs	r3, #8
 80109be:	400b      	ands	r3, r1
 80109c0:	1e59      	subs	r1, r3, #1
 80109c2:	418b      	sbcs	r3, r1
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d100      	bne.n	80109cc <HAL_DMA_IRQHandler+0x70>
 80109ca:	e0ae      	b.n	8010b2a <HAL_DMA_IRQHandler+0x1ce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80109cc:	6813      	ldr	r3, [r2, #0]
 80109ce:	071b      	lsls	r3, r3, #28
 80109d0:	d400      	bmi.n	80109d4 <HAL_DMA_IRQHandler+0x78>
 80109d2:	e0aa      	b.n	8010b2a <HAL_DMA_IRQHandler+0x1ce>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80109d4:	6813      	ldr	r3, [r2, #0]
 80109d6:	2108      	movs	r1, #8
 80109d8:	438b      	bics	r3, r1
 80109da:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	4a97      	ldr	r2, [pc, #604]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d800      	bhi.n	80109e6 <HAL_DMA_IRQHandler+0x8a>
 80109e4:	e0ee      	b.n	8010bc4 <HAL_DMA_IRQHandler+0x268>
 80109e6:	4a97      	ldr	r2, [pc, #604]	; (8010c44 <HAL_DMA_IRQHandler+0x2e8>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d100      	bne.n	80109ee <HAL_DMA_IRQHandler+0x92>
 80109ec:	e08b      	b.n	8010b06 <HAL_DMA_IRQHandler+0x1aa>
 80109ee:	4a96      	ldr	r2, [pc, #600]	; (8010c48 <HAL_DMA_IRQHandler+0x2ec>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d100      	bne.n	80109f6 <HAL_DMA_IRQHandler+0x9a>
 80109f4:	e0ce      	b.n	8010b94 <HAL_DMA_IRQHandler+0x238>
 80109f6:	4a95      	ldr	r2, [pc, #596]	; (8010c4c <HAL_DMA_IRQHandler+0x2f0>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d100      	bne.n	80109fe <HAL_DMA_IRQHandler+0xa2>
 80109fc:	e0cc      	b.n	8010b98 <HAL_DMA_IRQHandler+0x23c>
 80109fe:	4a94      	ldr	r2, [pc, #592]	; (8010c50 <HAL_DMA_IRQHandler+0x2f4>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d100      	bne.n	8010a06 <HAL_DMA_IRQHandler+0xaa>
 8010a04:	e0cb      	b.n	8010b9e <HAL_DMA_IRQHandler+0x242>
 8010a06:	4a93      	ldr	r2, [pc, #588]	; (8010c54 <HAL_DMA_IRQHandler+0x2f8>)
 8010a08:	4293      	cmp	r3, r2
 8010a0a:	d100      	bne.n	8010a0e <HAL_DMA_IRQHandler+0xb2>
 8010a0c:	e0ca      	b.n	8010ba4 <HAL_DMA_IRQHandler+0x248>
 8010a0e:	4a92      	ldr	r2, [pc, #584]	; (8010c58 <HAL_DMA_IRQHandler+0x2fc>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d100      	bne.n	8010a16 <HAL_DMA_IRQHandler+0xba>
 8010a14:	e0c9      	b.n	8010baa <HAL_DMA_IRQHandler+0x24e>
 8010a16:	4a89      	ldr	r2, [pc, #548]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010a18:	4293      	cmp	r3, r2
 8010a1a:	d100      	bne.n	8010a1e <HAL_DMA_IRQHandler+0xc2>
 8010a1c:	e0c8      	b.n	8010bb0 <HAL_DMA_IRQHandler+0x254>
 8010a1e:	4a8f      	ldr	r2, [pc, #572]	; (8010c5c <HAL_DMA_IRQHandler+0x300>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d100      	bne.n	8010a26 <HAL_DMA_IRQHandler+0xca>
 8010a24:	e0c7      	b.n	8010bb6 <HAL_DMA_IRQHandler+0x25a>
 8010a26:	4a8e      	ldr	r2, [pc, #568]	; (8010c60 <HAL_DMA_IRQHandler+0x304>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d100      	bne.n	8010a2e <HAL_DMA_IRQHandler+0xd2>
 8010a2c:	e0c5      	b.n	8010bba <HAL_DMA_IRQHandler+0x25e>
 8010a2e:	4a8d      	ldr	r2, [pc, #564]	; (8010c64 <HAL_DMA_IRQHandler+0x308>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d100      	bne.n	8010a36 <HAL_DMA_IRQHandler+0xda>
 8010a34:	e0c3      	b.n	8010bbe <HAL_DMA_IRQHandler+0x262>
 8010a36:	4a8c      	ldr	r2, [pc, #560]	; (8010c68 <HAL_DMA_IRQHandler+0x30c>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d061      	beq.n	8010b00 <HAL_DMA_IRQHandler+0x1a4>
 8010a3c:	2280      	movs	r2, #128	; 0x80
 8010a3e:	0312      	lsls	r2, r2, #12
 8010a40:	e062      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010a42:	2380      	movs	r3, #128	; 0x80
 8010a44:	e7bb      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a46:	2380      	movs	r3, #128	; 0x80
 8010a48:	011b      	lsls	r3, r3, #4
 8010a4a:	e7b8      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a4c:	2380      	movs	r3, #128	; 0x80
 8010a4e:	021b      	lsls	r3, r3, #8
 8010a50:	e7b5      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a52:	2380      	movs	r3, #128	; 0x80
 8010a54:	031b      	lsls	r3, r3, #12
 8010a56:	e7b2      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a58:	2380      	movs	r3, #128	; 0x80
 8010a5a:	041b      	lsls	r3, r3, #16
 8010a5c:	e7af      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a5e:	2380      	movs	r3, #128	; 0x80
 8010a60:	051b      	lsls	r3, r3, #20
 8010a62:	e7ac      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a64:	2308      	movs	r3, #8
 8010a66:	e7aa      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a68:	2380      	movs	r3, #128	; 0x80
 8010a6a:	e7a8      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a6c:	2380      	movs	r3, #128	; 0x80
 8010a6e:	011b      	lsls	r3, r3, #4
 8010a70:	e7a5      	b.n	80109be <HAL_DMA_IRQHandler+0x62>
 8010a72:	4b7e      	ldr	r3, [pc, #504]	; (8010c6c <HAL_DMA_IRQHandler+0x310>)
 8010a74:	6819      	ldr	r1, [r3, #0]
 8010a76:	4b73      	ldr	r3, [pc, #460]	; (8010c44 <HAL_DMA_IRQHandler+0x2e8>)
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d023      	beq.n	8010ac4 <HAL_DMA_IRQHandler+0x168>
 8010a7c:	4b72      	ldr	r3, [pc, #456]	; (8010c48 <HAL_DMA_IRQHandler+0x2ec>)
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d026      	beq.n	8010ad0 <HAL_DMA_IRQHandler+0x174>
 8010a82:	4b72      	ldr	r3, [pc, #456]	; (8010c4c <HAL_DMA_IRQHandler+0x2f0>)
 8010a84:	429a      	cmp	r2, r3
 8010a86:	d025      	beq.n	8010ad4 <HAL_DMA_IRQHandler+0x178>
 8010a88:	4b71      	ldr	r3, [pc, #452]	; (8010c50 <HAL_DMA_IRQHandler+0x2f4>)
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d025      	beq.n	8010ada <HAL_DMA_IRQHandler+0x17e>
 8010a8e:	4b71      	ldr	r3, [pc, #452]	; (8010c54 <HAL_DMA_IRQHandler+0x2f8>)
 8010a90:	429a      	cmp	r2, r3
 8010a92:	d025      	beq.n	8010ae0 <HAL_DMA_IRQHandler+0x184>
 8010a94:	4b70      	ldr	r3, [pc, #448]	; (8010c58 <HAL_DMA_IRQHandler+0x2fc>)
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d025      	beq.n	8010ae6 <HAL_DMA_IRQHandler+0x18a>
 8010a9a:	4b68      	ldr	r3, [pc, #416]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d025      	beq.n	8010aec <HAL_DMA_IRQHandler+0x190>
 8010aa0:	4b6e      	ldr	r3, [pc, #440]	; (8010c5c <HAL_DMA_IRQHandler+0x300>)
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d025      	beq.n	8010af2 <HAL_DMA_IRQHandler+0x196>
 8010aa6:	4b6e      	ldr	r3, [pc, #440]	; (8010c60 <HAL_DMA_IRQHandler+0x304>)
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d024      	beq.n	8010af6 <HAL_DMA_IRQHandler+0x19a>
 8010aac:	4b6d      	ldr	r3, [pc, #436]	; (8010c64 <HAL_DMA_IRQHandler+0x308>)
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d023      	beq.n	8010afa <HAL_DMA_IRQHandler+0x19e>
 8010ab2:	4b6d      	ldr	r3, [pc, #436]	; (8010c68 <HAL_DMA_IRQHandler+0x30c>)
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d002      	beq.n	8010abe <HAL_DMA_IRQHandler+0x162>
 8010ab8:	2380      	movs	r3, #128	; 0x80
 8010aba:	031b      	lsls	r3, r3, #12
 8010abc:	e003      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010abe:	2380      	movs	r3, #128	; 0x80
 8010ac0:	021b      	lsls	r3, r3, #8
 8010ac2:	e000      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010ac4:	2308      	movs	r3, #8
 8010ac6:	400b      	ands	r3, r1
 8010ac8:	1e59      	subs	r1, r3, #1
 8010aca:	418b      	sbcs	r3, r1
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	e77a      	b.n	80109c6 <HAL_DMA_IRQHandler+0x6a>
 8010ad0:	2380      	movs	r3, #128	; 0x80
 8010ad2:	e7f8      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010ad4:	2380      	movs	r3, #128	; 0x80
 8010ad6:	011b      	lsls	r3, r3, #4
 8010ad8:	e7f5      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010ada:	2380      	movs	r3, #128	; 0x80
 8010adc:	021b      	lsls	r3, r3, #8
 8010ade:	e7f2      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010ae0:	2380      	movs	r3, #128	; 0x80
 8010ae2:	031b      	lsls	r3, r3, #12
 8010ae4:	e7ef      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010ae6:	2380      	movs	r3, #128	; 0x80
 8010ae8:	041b      	lsls	r3, r3, #16
 8010aea:	e7ec      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010aec:	2380      	movs	r3, #128	; 0x80
 8010aee:	051b      	lsls	r3, r3, #20
 8010af0:	e7e9      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010af2:	2308      	movs	r3, #8
 8010af4:	e7e7      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010af6:	2380      	movs	r3, #128	; 0x80
 8010af8:	e7e5      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
 8010afa:	2380      	movs	r3, #128	; 0x80
 8010afc:	011b      	lsls	r3, r3, #4
 8010afe:	e7e2      	b.n	8010ac6 <HAL_DMA_IRQHandler+0x16a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b00:	2280      	movs	r2, #128	; 0x80
 8010b02:	0212      	lsls	r2, r2, #8
 8010b04:	e000      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010b06:	2208      	movs	r2, #8
 8010b08:	4b4d      	ldr	r3, [pc, #308]	; (8010c40 <HAL_DMA_IRQHandler+0x2e4>)
 8010b0a:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010b0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b0e:	2201      	movs	r2, #1
 8010b10:	4313      	orrs	r3, r2
 8010b12:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010b14:	2321      	movs	r3, #33	; 0x21
 8010b16:	3203      	adds	r2, #3
 8010b18:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010b20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <HAL_DMA_IRQHandler+0x1ce>
        hdma->XferErrorCallback(hdma);
 8010b26:	0020      	movs	r0, r4
 8010b28:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010b2a:	6822      	ldr	r2, [r4, #0]
 8010b2c:	4b43      	ldr	r3, [pc, #268]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d800      	bhi.n	8010b34 <HAL_DMA_IRQHandler+0x1d8>
 8010b32:	e105      	b.n	8010d40 <HAL_DMA_IRQHandler+0x3e4>
 8010b34:	4b42      	ldr	r3, [pc, #264]	; (8010c40 <HAL_DMA_IRQHandler+0x2e4>)
 8010b36:	6819      	ldr	r1, [r3, #0]
 8010b38:	4b42      	ldr	r3, [pc, #264]	; (8010c44 <HAL_DMA_IRQHandler+0x2e8>)
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d100      	bne.n	8010b40 <HAL_DMA_IRQHandler+0x1e4>
 8010b3e:	e0a1      	b.n	8010c84 <HAL_DMA_IRQHandler+0x328>
 8010b40:	4b41      	ldr	r3, [pc, #260]	; (8010c48 <HAL_DMA_IRQHandler+0x2ec>)
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d100      	bne.n	8010b48 <HAL_DMA_IRQHandler+0x1ec>
 8010b46:	e0e3      	b.n	8010d10 <HAL_DMA_IRQHandler+0x3b4>
 8010b48:	4b40      	ldr	r3, [pc, #256]	; (8010c4c <HAL_DMA_IRQHandler+0x2f0>)
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d100      	bne.n	8010b50 <HAL_DMA_IRQHandler+0x1f4>
 8010b4e:	e0e1      	b.n	8010d14 <HAL_DMA_IRQHandler+0x3b8>
 8010b50:	4b3f      	ldr	r3, [pc, #252]	; (8010c50 <HAL_DMA_IRQHandler+0x2f4>)
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d100      	bne.n	8010b58 <HAL_DMA_IRQHandler+0x1fc>
 8010b56:	e0e0      	b.n	8010d1a <HAL_DMA_IRQHandler+0x3be>
 8010b58:	4b3e      	ldr	r3, [pc, #248]	; (8010c54 <HAL_DMA_IRQHandler+0x2f8>)
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d100      	bne.n	8010b60 <HAL_DMA_IRQHandler+0x204>
 8010b5e:	e0df      	b.n	8010d20 <HAL_DMA_IRQHandler+0x3c4>
 8010b60:	4b3d      	ldr	r3, [pc, #244]	; (8010c58 <HAL_DMA_IRQHandler+0x2fc>)
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d100      	bne.n	8010b68 <HAL_DMA_IRQHandler+0x20c>
 8010b66:	e0de      	b.n	8010d26 <HAL_DMA_IRQHandler+0x3ca>
 8010b68:	4b34      	ldr	r3, [pc, #208]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d100      	bne.n	8010b70 <HAL_DMA_IRQHandler+0x214>
 8010b6e:	e0dd      	b.n	8010d2c <HAL_DMA_IRQHandler+0x3d0>
 8010b70:	4b3a      	ldr	r3, [pc, #232]	; (8010c5c <HAL_DMA_IRQHandler+0x300>)
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d100      	bne.n	8010b78 <HAL_DMA_IRQHandler+0x21c>
 8010b76:	e0dc      	b.n	8010d32 <HAL_DMA_IRQHandler+0x3d6>
 8010b78:	4b39      	ldr	r3, [pc, #228]	; (8010c60 <HAL_DMA_IRQHandler+0x304>)
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d100      	bne.n	8010b80 <HAL_DMA_IRQHandler+0x224>
 8010b7e:	e0da      	b.n	8010d36 <HAL_DMA_IRQHandler+0x3da>
 8010b80:	4b38      	ldr	r3, [pc, #224]	; (8010c64 <HAL_DMA_IRQHandler+0x308>)
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d100      	bne.n	8010b88 <HAL_DMA_IRQHandler+0x22c>
 8010b86:	e0d8      	b.n	8010d3a <HAL_DMA_IRQHandler+0x3de>
 8010b88:	4b37      	ldr	r3, [pc, #220]	; (8010c68 <HAL_DMA_IRQHandler+0x30c>)
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d077      	beq.n	8010c7e <HAL_DMA_IRQHandler+0x322>
 8010b8e:	2380      	movs	r3, #128	; 0x80
 8010b90:	02db      	lsls	r3, r3, #11
 8010b92:	e078      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010b94:	2280      	movs	r2, #128	; 0x80
 8010b96:	e7b7      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010b98:	2280      	movs	r2, #128	; 0x80
 8010b9a:	0112      	lsls	r2, r2, #4
 8010b9c:	e7b4      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010b9e:	2280      	movs	r2, #128	; 0x80
 8010ba0:	0212      	lsls	r2, r2, #8
 8010ba2:	e7b1      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010ba4:	2280      	movs	r2, #128	; 0x80
 8010ba6:	0312      	lsls	r2, r2, #12
 8010ba8:	e7ae      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010baa:	2280      	movs	r2, #128	; 0x80
 8010bac:	0412      	lsls	r2, r2, #16
 8010bae:	e7ab      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010bb0:	2280      	movs	r2, #128	; 0x80
 8010bb2:	0512      	lsls	r2, r2, #20
 8010bb4:	e7a8      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010bb6:	2208      	movs	r2, #8
 8010bb8:	e7a6      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010bba:	2280      	movs	r2, #128	; 0x80
 8010bbc:	e7a4      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010bbe:	2280      	movs	r2, #128	; 0x80
 8010bc0:	0112      	lsls	r2, r2, #4
 8010bc2:	e7a1      	b.n	8010b08 <HAL_DMA_IRQHandler+0x1ac>
 8010bc4:	4a1f      	ldr	r2, [pc, #124]	; (8010c44 <HAL_DMA_IRQHandler+0x2e8>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d023      	beq.n	8010c12 <HAL_DMA_IRQHandler+0x2b6>
 8010bca:	4a1f      	ldr	r2, [pc, #124]	; (8010c48 <HAL_DMA_IRQHandler+0x2ec>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d024      	beq.n	8010c1a <HAL_DMA_IRQHandler+0x2be>
 8010bd0:	4a1e      	ldr	r2, [pc, #120]	; (8010c4c <HAL_DMA_IRQHandler+0x2f0>)
 8010bd2:	4293      	cmp	r3, r2
 8010bd4:	d023      	beq.n	8010c1e <HAL_DMA_IRQHandler+0x2c2>
 8010bd6:	4a1e      	ldr	r2, [pc, #120]	; (8010c50 <HAL_DMA_IRQHandler+0x2f4>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d023      	beq.n	8010c24 <HAL_DMA_IRQHandler+0x2c8>
 8010bdc:	4a1d      	ldr	r2, [pc, #116]	; (8010c54 <HAL_DMA_IRQHandler+0x2f8>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d023      	beq.n	8010c2a <HAL_DMA_IRQHandler+0x2ce>
 8010be2:	4a1d      	ldr	r2, [pc, #116]	; (8010c58 <HAL_DMA_IRQHandler+0x2fc>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d023      	beq.n	8010c30 <HAL_DMA_IRQHandler+0x2d4>
 8010be8:	4a14      	ldr	r2, [pc, #80]	; (8010c3c <HAL_DMA_IRQHandler+0x2e0>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d023      	beq.n	8010c36 <HAL_DMA_IRQHandler+0x2da>
 8010bee:	4a1b      	ldr	r2, [pc, #108]	; (8010c5c <HAL_DMA_IRQHandler+0x300>)
 8010bf0:	4293      	cmp	r3, r2
 8010bf2:	d03d      	beq.n	8010c70 <HAL_DMA_IRQHandler+0x314>
 8010bf4:	4a1a      	ldr	r2, [pc, #104]	; (8010c60 <HAL_DMA_IRQHandler+0x304>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d03c      	beq.n	8010c74 <HAL_DMA_IRQHandler+0x318>
 8010bfa:	4a1a      	ldr	r2, [pc, #104]	; (8010c64 <HAL_DMA_IRQHandler+0x308>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d03b      	beq.n	8010c78 <HAL_DMA_IRQHandler+0x31c>
 8010c00:	4a19      	ldr	r2, [pc, #100]	; (8010c68 <HAL_DMA_IRQHandler+0x30c>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d002      	beq.n	8010c0c <HAL_DMA_IRQHandler+0x2b0>
 8010c06:	2280      	movs	r2, #128	; 0x80
 8010c08:	0312      	lsls	r2, r2, #12
 8010c0a:	e003      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c0c:	2280      	movs	r2, #128	; 0x80
 8010c0e:	0212      	lsls	r2, r2, #8
 8010c10:	e000      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c12:	2208      	movs	r2, #8
 8010c14:	4b15      	ldr	r3, [pc, #84]	; (8010c6c <HAL_DMA_IRQHandler+0x310>)
 8010c16:	605a      	str	r2, [r3, #4]
 8010c18:	e778      	b.n	8010b0c <HAL_DMA_IRQHandler+0x1b0>
 8010c1a:	2280      	movs	r2, #128	; 0x80
 8010c1c:	e7fa      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c1e:	2280      	movs	r2, #128	; 0x80
 8010c20:	0112      	lsls	r2, r2, #4
 8010c22:	e7f7      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c24:	2280      	movs	r2, #128	; 0x80
 8010c26:	0212      	lsls	r2, r2, #8
 8010c28:	e7f4      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c2a:	2280      	movs	r2, #128	; 0x80
 8010c2c:	0312      	lsls	r2, r2, #12
 8010c2e:	e7f1      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c30:	2280      	movs	r2, #128	; 0x80
 8010c32:	0412      	lsls	r2, r2, #16
 8010c34:	e7ee      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c36:	2280      	movs	r2, #128	; 0x80
 8010c38:	0512      	lsls	r2, r2, #20
 8010c3a:	e7eb      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c3c:	40020080 	.word	0x40020080
 8010c40:	40020400 	.word	0x40020400
 8010c44:	40020008 	.word	0x40020008
 8010c48:	4002001c 	.word	0x4002001c
 8010c4c:	40020030 	.word	0x40020030
 8010c50:	40020044 	.word	0x40020044
 8010c54:	40020058 	.word	0x40020058
 8010c58:	4002006c 	.word	0x4002006c
 8010c5c:	40020408 	.word	0x40020408
 8010c60:	4002041c 	.word	0x4002041c
 8010c64:	40020430 	.word	0x40020430
 8010c68:	40020444 	.word	0x40020444
 8010c6c:	40020000 	.word	0x40020000
 8010c70:	2208      	movs	r2, #8
 8010c72:	e7cf      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c74:	2280      	movs	r2, #128	; 0x80
 8010c76:	e7cd      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
 8010c78:	2280      	movs	r2, #128	; 0x80
 8010c7a:	0112      	lsls	r2, r2, #4
 8010c7c:	e7ca      	b.n	8010c14 <HAL_DMA_IRQHandler+0x2b8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c7e:	2380      	movs	r3, #128	; 0x80
 8010c80:	01db      	lsls	r3, r3, #7
 8010c82:	e000      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010c84:	2304      	movs	r3, #4
 8010c86:	400b      	ands	r3, r1
 8010c88:	1e59      	subs	r1, r3, #1
 8010c8a:	418b      	sbcs	r3, r1
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d100      	bne.n	8010c94 <HAL_DMA_IRQHandler+0x338>
 8010c92:	e0aa      	b.n	8010dea <HAL_DMA_IRQHandler+0x48e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010c94:	6813      	ldr	r3, [r2, #0]
 8010c96:	075b      	lsls	r3, r3, #29
 8010c98:	d400      	bmi.n	8010c9c <HAL_DMA_IRQHandler+0x340>
 8010c9a:	e0a6      	b.n	8010dea <HAL_DMA_IRQHandler+0x48e>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010c9c:	6813      	ldr	r3, [r2, #0]
 8010c9e:	069b      	lsls	r3, r3, #26
 8010ca0:	d403      	bmi.n	8010caa <HAL_DMA_IRQHandler+0x34e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8010ca2:	6813      	ldr	r3, [r2, #0]
 8010ca4:	2104      	movs	r1, #4
 8010ca6:	438b      	bics	r3, r1
 8010ca8:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010caa:	6823      	ldr	r3, [r4, #0]
 8010cac:	4a98      	ldr	r2, [pc, #608]	; (8010f10 <HAL_DMA_IRQHandler+0x5b4>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d800      	bhi.n	8010cb4 <HAL_DMA_IRQHandler+0x358>
 8010cb2:	e0e7      	b.n	8010e84 <HAL_DMA_IRQHandler+0x528>
 8010cb4:	4a97      	ldr	r2, [pc, #604]	; (8010f14 <HAL_DMA_IRQHandler+0x5b8>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d100      	bne.n	8010cbc <HAL_DMA_IRQHandler+0x360>
 8010cba:	e08b      	b.n	8010dd4 <HAL_DMA_IRQHandler+0x478>
 8010cbc:	4a96      	ldr	r2, [pc, #600]	; (8010f18 <HAL_DMA_IRQHandler+0x5bc>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d100      	bne.n	8010cc4 <HAL_DMA_IRQHandler+0x368>
 8010cc2:	e0c7      	b.n	8010e54 <HAL_DMA_IRQHandler+0x4f8>
 8010cc4:	4a95      	ldr	r2, [pc, #596]	; (8010f1c <HAL_DMA_IRQHandler+0x5c0>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d100      	bne.n	8010ccc <HAL_DMA_IRQHandler+0x370>
 8010cca:	e0c5      	b.n	8010e58 <HAL_DMA_IRQHandler+0x4fc>
 8010ccc:	4a94      	ldr	r2, [pc, #592]	; (8010f20 <HAL_DMA_IRQHandler+0x5c4>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d100      	bne.n	8010cd4 <HAL_DMA_IRQHandler+0x378>
 8010cd2:	e0c4      	b.n	8010e5e <HAL_DMA_IRQHandler+0x502>
 8010cd4:	4a93      	ldr	r2, [pc, #588]	; (8010f24 <HAL_DMA_IRQHandler+0x5c8>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d100      	bne.n	8010cdc <HAL_DMA_IRQHandler+0x380>
 8010cda:	e0c3      	b.n	8010e64 <HAL_DMA_IRQHandler+0x508>
 8010cdc:	4a92      	ldr	r2, [pc, #584]	; (8010f28 <HAL_DMA_IRQHandler+0x5cc>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d100      	bne.n	8010ce4 <HAL_DMA_IRQHandler+0x388>
 8010ce2:	e0c2      	b.n	8010e6a <HAL_DMA_IRQHandler+0x50e>
 8010ce4:	4a8a      	ldr	r2, [pc, #552]	; (8010f10 <HAL_DMA_IRQHandler+0x5b4>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d100      	bne.n	8010cec <HAL_DMA_IRQHandler+0x390>
 8010cea:	e0c1      	b.n	8010e70 <HAL_DMA_IRQHandler+0x514>
 8010cec:	4a8f      	ldr	r2, [pc, #572]	; (8010f2c <HAL_DMA_IRQHandler+0x5d0>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d100      	bne.n	8010cf4 <HAL_DMA_IRQHandler+0x398>
 8010cf2:	e0c0      	b.n	8010e76 <HAL_DMA_IRQHandler+0x51a>
 8010cf4:	4a8e      	ldr	r2, [pc, #568]	; (8010f30 <HAL_DMA_IRQHandler+0x5d4>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d100      	bne.n	8010cfc <HAL_DMA_IRQHandler+0x3a0>
 8010cfa:	e0be      	b.n	8010e7a <HAL_DMA_IRQHandler+0x51e>
 8010cfc:	4a8d      	ldr	r2, [pc, #564]	; (8010f34 <HAL_DMA_IRQHandler+0x5d8>)
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d100      	bne.n	8010d04 <HAL_DMA_IRQHandler+0x3a8>
 8010d02:	e0bc      	b.n	8010e7e <HAL_DMA_IRQHandler+0x522>
 8010d04:	4a8c      	ldr	r2, [pc, #560]	; (8010f38 <HAL_DMA_IRQHandler+0x5dc>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d061      	beq.n	8010dce <HAL_DMA_IRQHandler+0x472>
 8010d0a:	2280      	movs	r2, #128	; 0x80
 8010d0c:	02d2      	lsls	r2, r2, #11
 8010d0e:	e062      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d10:	2340      	movs	r3, #64	; 0x40
 8010d12:	e7b8      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d14:	2380      	movs	r3, #128	; 0x80
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	e7b5      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d1a:	2380      	movs	r3, #128	; 0x80
 8010d1c:	01db      	lsls	r3, r3, #7
 8010d1e:	e7b2      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d20:	2380      	movs	r3, #128	; 0x80
 8010d22:	02db      	lsls	r3, r3, #11
 8010d24:	e7af      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d26:	2380      	movs	r3, #128	; 0x80
 8010d28:	03db      	lsls	r3, r3, #15
 8010d2a:	e7ac      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d2c:	2380      	movs	r3, #128	; 0x80
 8010d2e:	04db      	lsls	r3, r3, #19
 8010d30:	e7a9      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d32:	2304      	movs	r3, #4
 8010d34:	e7a7      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d36:	2340      	movs	r3, #64	; 0x40
 8010d38:	e7a5      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d3a:	2380      	movs	r3, #128	; 0x80
 8010d3c:	00db      	lsls	r3, r3, #3
 8010d3e:	e7a2      	b.n	8010c86 <HAL_DMA_IRQHandler+0x32a>
 8010d40:	4b7e      	ldr	r3, [pc, #504]	; (8010f3c <HAL_DMA_IRQHandler+0x5e0>)
 8010d42:	6819      	ldr	r1, [r3, #0]
 8010d44:	4b73      	ldr	r3, [pc, #460]	; (8010f14 <HAL_DMA_IRQHandler+0x5b8>)
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d023      	beq.n	8010d92 <HAL_DMA_IRQHandler+0x436>
 8010d4a:	4b73      	ldr	r3, [pc, #460]	; (8010f18 <HAL_DMA_IRQHandler+0x5bc>)
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d026      	beq.n	8010d9e <HAL_DMA_IRQHandler+0x442>
 8010d50:	4b72      	ldr	r3, [pc, #456]	; (8010f1c <HAL_DMA_IRQHandler+0x5c0>)
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d025      	beq.n	8010da2 <HAL_DMA_IRQHandler+0x446>
 8010d56:	4b72      	ldr	r3, [pc, #456]	; (8010f20 <HAL_DMA_IRQHandler+0x5c4>)
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d025      	beq.n	8010da8 <HAL_DMA_IRQHandler+0x44c>
 8010d5c:	4b71      	ldr	r3, [pc, #452]	; (8010f24 <HAL_DMA_IRQHandler+0x5c8>)
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d025      	beq.n	8010dae <HAL_DMA_IRQHandler+0x452>
 8010d62:	4b71      	ldr	r3, [pc, #452]	; (8010f28 <HAL_DMA_IRQHandler+0x5cc>)
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d025      	beq.n	8010db4 <HAL_DMA_IRQHandler+0x458>
 8010d68:	4b69      	ldr	r3, [pc, #420]	; (8010f10 <HAL_DMA_IRQHandler+0x5b4>)
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d025      	beq.n	8010dba <HAL_DMA_IRQHandler+0x45e>
 8010d6e:	4b6f      	ldr	r3, [pc, #444]	; (8010f2c <HAL_DMA_IRQHandler+0x5d0>)
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d025      	beq.n	8010dc0 <HAL_DMA_IRQHandler+0x464>
 8010d74:	4b6e      	ldr	r3, [pc, #440]	; (8010f30 <HAL_DMA_IRQHandler+0x5d4>)
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d024      	beq.n	8010dc4 <HAL_DMA_IRQHandler+0x468>
 8010d7a:	4b6e      	ldr	r3, [pc, #440]	; (8010f34 <HAL_DMA_IRQHandler+0x5d8>)
 8010d7c:	429a      	cmp	r2, r3
 8010d7e:	d023      	beq.n	8010dc8 <HAL_DMA_IRQHandler+0x46c>
 8010d80:	4b6d      	ldr	r3, [pc, #436]	; (8010f38 <HAL_DMA_IRQHandler+0x5dc>)
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d002      	beq.n	8010d8c <HAL_DMA_IRQHandler+0x430>
 8010d86:	2380      	movs	r3, #128	; 0x80
 8010d88:	02db      	lsls	r3, r3, #11
 8010d8a:	e003      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010d8c:	2380      	movs	r3, #128	; 0x80
 8010d8e:	01db      	lsls	r3, r3, #7
 8010d90:	e000      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010d92:	2304      	movs	r3, #4
 8010d94:	400b      	ands	r3, r1
 8010d96:	1e59      	subs	r1, r3, #1
 8010d98:	418b      	sbcs	r3, r1
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	e777      	b.n	8010c8e <HAL_DMA_IRQHandler+0x332>
 8010d9e:	2340      	movs	r3, #64	; 0x40
 8010da0:	e7f8      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010da2:	2380      	movs	r3, #128	; 0x80
 8010da4:	00db      	lsls	r3, r3, #3
 8010da6:	e7f5      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010da8:	2380      	movs	r3, #128	; 0x80
 8010daa:	01db      	lsls	r3, r3, #7
 8010dac:	e7f2      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010dae:	2380      	movs	r3, #128	; 0x80
 8010db0:	02db      	lsls	r3, r3, #11
 8010db2:	e7ef      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010db4:	2380      	movs	r3, #128	; 0x80
 8010db6:	03db      	lsls	r3, r3, #15
 8010db8:	e7ec      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010dba:	2380      	movs	r3, #128	; 0x80
 8010dbc:	04db      	lsls	r3, r3, #19
 8010dbe:	e7e9      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010dc0:	2304      	movs	r3, #4
 8010dc2:	e7e7      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010dc4:	2340      	movs	r3, #64	; 0x40
 8010dc6:	e7e5      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
 8010dc8:	2380      	movs	r3, #128	; 0x80
 8010dca:	00db      	lsls	r3, r3, #3
 8010dcc:	e7e2      	b.n	8010d94 <HAL_DMA_IRQHandler+0x438>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010dce:	2280      	movs	r2, #128	; 0x80
 8010dd0:	01d2      	lsls	r2, r2, #7
 8010dd2:	e000      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010dd4:	2204      	movs	r2, #4
 8010dd6:	4b5a      	ldr	r3, [pc, #360]	; (8010f40 <HAL_DMA_IRQHandler+0x5e4>)
 8010dd8:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8010dda:	2321      	movs	r3, #33	; 0x21
 8010ddc:	2211      	movs	r2, #17
 8010dde:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <HAL_DMA_IRQHandler+0x48e>
        hdma->XferHalfCpltCallback(hdma);
 8010de6:	0020      	movs	r0, r4
 8010de8:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010dea:	6822      	ldr	r2, [r4, #0]
 8010dec:	4b48      	ldr	r3, [pc, #288]	; (8010f10 <HAL_DMA_IRQHandler+0x5b4>)
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d800      	bhi.n	8010df4 <HAL_DMA_IRQHandler+0x498>
 8010df2:	e105      	b.n	8011000 <HAL_DMA_IRQHandler+0x6a4>
 8010df4:	4b52      	ldr	r3, [pc, #328]	; (8010f40 <HAL_DMA_IRQHandler+0x5e4>)
 8010df6:	6819      	ldr	r1, [r3, #0]
 8010df8:	4b46      	ldr	r3, [pc, #280]	; (8010f14 <HAL_DMA_IRQHandler+0x5b8>)
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d100      	bne.n	8010e00 <HAL_DMA_IRQHandler+0x4a4>
 8010dfe:	e0a1      	b.n	8010f44 <HAL_DMA_IRQHandler+0x5e8>
 8010e00:	4b45      	ldr	r3, [pc, #276]	; (8010f18 <HAL_DMA_IRQHandler+0x5bc>)
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d100      	bne.n	8010e08 <HAL_DMA_IRQHandler+0x4ac>
 8010e06:	e0e3      	b.n	8010fd0 <HAL_DMA_IRQHandler+0x674>
 8010e08:	4b44      	ldr	r3, [pc, #272]	; (8010f1c <HAL_DMA_IRQHandler+0x5c0>)
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d100      	bne.n	8010e10 <HAL_DMA_IRQHandler+0x4b4>
 8010e0e:	e0e1      	b.n	8010fd4 <HAL_DMA_IRQHandler+0x678>
 8010e10:	4b43      	ldr	r3, [pc, #268]	; (8010f20 <HAL_DMA_IRQHandler+0x5c4>)
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d100      	bne.n	8010e18 <HAL_DMA_IRQHandler+0x4bc>
 8010e16:	e0e0      	b.n	8010fda <HAL_DMA_IRQHandler+0x67e>
 8010e18:	4b42      	ldr	r3, [pc, #264]	; (8010f24 <HAL_DMA_IRQHandler+0x5c8>)
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d100      	bne.n	8010e20 <HAL_DMA_IRQHandler+0x4c4>
 8010e1e:	e0df      	b.n	8010fe0 <HAL_DMA_IRQHandler+0x684>
 8010e20:	4b41      	ldr	r3, [pc, #260]	; (8010f28 <HAL_DMA_IRQHandler+0x5cc>)
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d100      	bne.n	8010e28 <HAL_DMA_IRQHandler+0x4cc>
 8010e26:	e0de      	b.n	8010fe6 <HAL_DMA_IRQHandler+0x68a>
 8010e28:	4b39      	ldr	r3, [pc, #228]	; (8010f10 <HAL_DMA_IRQHandler+0x5b4>)
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d100      	bne.n	8010e30 <HAL_DMA_IRQHandler+0x4d4>
 8010e2e:	e0dd      	b.n	8010fec <HAL_DMA_IRQHandler+0x690>
 8010e30:	4b3e      	ldr	r3, [pc, #248]	; (8010f2c <HAL_DMA_IRQHandler+0x5d0>)
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d100      	bne.n	8010e38 <HAL_DMA_IRQHandler+0x4dc>
 8010e36:	e0dc      	b.n	8010ff2 <HAL_DMA_IRQHandler+0x696>
 8010e38:	4b3d      	ldr	r3, [pc, #244]	; (8010f30 <HAL_DMA_IRQHandler+0x5d4>)
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d100      	bne.n	8010e40 <HAL_DMA_IRQHandler+0x4e4>
 8010e3e:	e0da      	b.n	8010ff6 <HAL_DMA_IRQHandler+0x69a>
 8010e40:	4b3c      	ldr	r3, [pc, #240]	; (8010f34 <HAL_DMA_IRQHandler+0x5d8>)
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d100      	bne.n	8010e48 <HAL_DMA_IRQHandler+0x4ec>
 8010e46:	e0d8      	b.n	8010ffa <HAL_DMA_IRQHandler+0x69e>
 8010e48:	4b3b      	ldr	r3, [pc, #236]	; (8010f38 <HAL_DMA_IRQHandler+0x5dc>)
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d05d      	beq.n	8010f0a <HAL_DMA_IRQHandler+0x5ae>
 8010e4e:	2380      	movs	r3, #128	; 0x80
 8010e50:	029b      	lsls	r3, r3, #10
 8010e52:	e078      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8010e54:	2240      	movs	r2, #64	; 0x40
 8010e56:	e7be      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e58:	2280      	movs	r2, #128	; 0x80
 8010e5a:	00d2      	lsls	r2, r2, #3
 8010e5c:	e7bb      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e5e:	2280      	movs	r2, #128	; 0x80
 8010e60:	01d2      	lsls	r2, r2, #7
 8010e62:	e7b8      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e64:	2280      	movs	r2, #128	; 0x80
 8010e66:	02d2      	lsls	r2, r2, #11
 8010e68:	e7b5      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e6a:	2280      	movs	r2, #128	; 0x80
 8010e6c:	03d2      	lsls	r2, r2, #15
 8010e6e:	e7b2      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e70:	2280      	movs	r2, #128	; 0x80
 8010e72:	04d2      	lsls	r2, r2, #19
 8010e74:	e7af      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e76:	2204      	movs	r2, #4
 8010e78:	e7ad      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e7a:	2240      	movs	r2, #64	; 0x40
 8010e7c:	e7ab      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e7e:	2280      	movs	r2, #128	; 0x80
 8010e80:	00d2      	lsls	r2, r2, #3
 8010e82:	e7a8      	b.n	8010dd6 <HAL_DMA_IRQHandler+0x47a>
 8010e84:	4a23      	ldr	r2, [pc, #140]	; (8010f14 <HAL_DMA_IRQHandler+0x5b8>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d023      	beq.n	8010ed2 <HAL_DMA_IRQHandler+0x576>
 8010e8a:	4a23      	ldr	r2, [pc, #140]	; (8010f18 <HAL_DMA_IRQHandler+0x5bc>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d024      	beq.n	8010eda <HAL_DMA_IRQHandler+0x57e>
 8010e90:	4a22      	ldr	r2, [pc, #136]	; (8010f1c <HAL_DMA_IRQHandler+0x5c0>)
 8010e92:	4293      	cmp	r3, r2
 8010e94:	d023      	beq.n	8010ede <HAL_DMA_IRQHandler+0x582>
 8010e96:	4a22      	ldr	r2, [pc, #136]	; (8010f20 <HAL_DMA_IRQHandler+0x5c4>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d023      	beq.n	8010ee4 <HAL_DMA_IRQHandler+0x588>
 8010e9c:	4a21      	ldr	r2, [pc, #132]	; (8010f24 <HAL_DMA_IRQHandler+0x5c8>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d023      	beq.n	8010eea <HAL_DMA_IRQHandler+0x58e>
 8010ea2:	4a21      	ldr	r2, [pc, #132]	; (8010f28 <HAL_DMA_IRQHandler+0x5cc>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	d023      	beq.n	8010ef0 <HAL_DMA_IRQHandler+0x594>
 8010ea8:	4a19      	ldr	r2, [pc, #100]	; (8010f10 <HAL_DMA_IRQHandler+0x5b4>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d023      	beq.n	8010ef6 <HAL_DMA_IRQHandler+0x59a>
 8010eae:	4a1f      	ldr	r2, [pc, #124]	; (8010f2c <HAL_DMA_IRQHandler+0x5d0>)
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d023      	beq.n	8010efc <HAL_DMA_IRQHandler+0x5a0>
 8010eb4:	4a1e      	ldr	r2, [pc, #120]	; (8010f30 <HAL_DMA_IRQHandler+0x5d4>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d022      	beq.n	8010f00 <HAL_DMA_IRQHandler+0x5a4>
 8010eba:	4a1e      	ldr	r2, [pc, #120]	; (8010f34 <HAL_DMA_IRQHandler+0x5d8>)
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	d021      	beq.n	8010f04 <HAL_DMA_IRQHandler+0x5a8>
 8010ec0:	4a1d      	ldr	r2, [pc, #116]	; (8010f38 <HAL_DMA_IRQHandler+0x5dc>)
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d002      	beq.n	8010ecc <HAL_DMA_IRQHandler+0x570>
 8010ec6:	2280      	movs	r2, #128	; 0x80
 8010ec8:	02d2      	lsls	r2, r2, #11
 8010eca:	e003      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010ecc:	2280      	movs	r2, #128	; 0x80
 8010ece:	01d2      	lsls	r2, r2, #7
 8010ed0:	e000      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010ed2:	2204      	movs	r2, #4
 8010ed4:	4b19      	ldr	r3, [pc, #100]	; (8010f3c <HAL_DMA_IRQHandler+0x5e0>)
 8010ed6:	605a      	str	r2, [r3, #4]
 8010ed8:	e77f      	b.n	8010dda <HAL_DMA_IRQHandler+0x47e>
 8010eda:	2240      	movs	r2, #64	; 0x40
 8010edc:	e7fa      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010ede:	2280      	movs	r2, #128	; 0x80
 8010ee0:	00d2      	lsls	r2, r2, #3
 8010ee2:	e7f7      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010ee4:	2280      	movs	r2, #128	; 0x80
 8010ee6:	01d2      	lsls	r2, r2, #7
 8010ee8:	e7f4      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010eea:	2280      	movs	r2, #128	; 0x80
 8010eec:	02d2      	lsls	r2, r2, #11
 8010eee:	e7f1      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010ef0:	2280      	movs	r2, #128	; 0x80
 8010ef2:	03d2      	lsls	r2, r2, #15
 8010ef4:	e7ee      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010ef6:	2280      	movs	r2, #128	; 0x80
 8010ef8:	04d2      	lsls	r2, r2, #19
 8010efa:	e7eb      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010efc:	2204      	movs	r2, #4
 8010efe:	e7e9      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010f00:	2240      	movs	r2, #64	; 0x40
 8010f02:	e7e7      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
 8010f04:	2280      	movs	r2, #128	; 0x80
 8010f06:	00d2      	lsls	r2, r2, #3
 8010f08:	e7e4      	b.n	8010ed4 <HAL_DMA_IRQHandler+0x578>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010f0a:	2380      	movs	r3, #128	; 0x80
 8010f0c:	019b      	lsls	r3, r3, #6
 8010f0e:	e01a      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010f10:	40020080 	.word	0x40020080
 8010f14:	40020008 	.word	0x40020008
 8010f18:	4002001c 	.word	0x4002001c
 8010f1c:	40020030 	.word	0x40020030
 8010f20:	40020044 	.word	0x40020044
 8010f24:	40020058 	.word	0x40020058
 8010f28:	4002006c 	.word	0x4002006c
 8010f2c:	40020408 	.word	0x40020408
 8010f30:	4002041c 	.word	0x4002041c
 8010f34:	40020430 	.word	0x40020430
 8010f38:	40020444 	.word	0x40020444
 8010f3c:	40020000 	.word	0x40020000
 8010f40:	40020400 	.word	0x40020400
 8010f44:	2302      	movs	r3, #2
 8010f46:	400b      	ands	r3, r1
 8010f48:	1e59      	subs	r1, r3, #1
 8010f4a:	418b      	sbcs	r3, r1
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d100      	bne.n	8010f54 <HAL_DMA_IRQHandler+0x5f8>
 8010f52:	e0af      	b.n	80110b4 <HAL_DMA_IRQHandler+0x758>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010f54:	6813      	ldr	r3, [r2, #0]
 8010f56:	079b      	lsls	r3, r3, #30
 8010f58:	d400      	bmi.n	8010f5c <HAL_DMA_IRQHandler+0x600>
 8010f5a:	e0ab      	b.n	80110b4 <HAL_DMA_IRQHandler+0x758>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8010f5c:	6813      	ldr	r3, [r2, #0]
 8010f5e:	069b      	lsls	r3, r3, #26
 8010f60:	d403      	bmi.n	8010f6a <HAL_DMA_IRQHandler+0x60e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8010f62:	6813      	ldr	r3, [r2, #0]
 8010f64:	2102      	movs	r1, #2
 8010f66:	438b      	bics	r3, r1
 8010f68:	6013      	str	r3, [r2, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	4a7f      	ldr	r2, [pc, #508]	; (801116c <HAL_DMA_IRQHandler+0x810>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d800      	bhi.n	8010f74 <HAL_DMA_IRQHandler+0x618>
 8010f72:	e0b8      	b.n	80110e6 <HAL_DMA_IRQHandler+0x78a>
 8010f74:	4a7e      	ldr	r2, [pc, #504]	; (8011170 <HAL_DMA_IRQHandler+0x814>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d100      	bne.n	8010f7c <HAL_DMA_IRQHandler+0x620>
 8010f7a:	e08b      	b.n	8011094 <HAL_DMA_IRQHandler+0x738>
 8010f7c:	4a7d      	ldr	r2, [pc, #500]	; (8011174 <HAL_DMA_IRQHandler+0x818>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d100      	bne.n	8010f84 <HAL_DMA_IRQHandler+0x628>
 8010f82:	e098      	b.n	80110b6 <HAL_DMA_IRQHandler+0x75a>
 8010f84:	4a7c      	ldr	r2, [pc, #496]	; (8011178 <HAL_DMA_IRQHandler+0x81c>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d100      	bne.n	8010f8c <HAL_DMA_IRQHandler+0x630>
 8010f8a:	e096      	b.n	80110ba <HAL_DMA_IRQHandler+0x75e>
 8010f8c:	4a7b      	ldr	r2, [pc, #492]	; (801117c <HAL_DMA_IRQHandler+0x820>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d100      	bne.n	8010f94 <HAL_DMA_IRQHandler+0x638>
 8010f92:	e095      	b.n	80110c0 <HAL_DMA_IRQHandler+0x764>
 8010f94:	4a7a      	ldr	r2, [pc, #488]	; (8011180 <HAL_DMA_IRQHandler+0x824>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d100      	bne.n	8010f9c <HAL_DMA_IRQHandler+0x640>
 8010f9a:	e094      	b.n	80110c6 <HAL_DMA_IRQHandler+0x76a>
 8010f9c:	4a79      	ldr	r2, [pc, #484]	; (8011184 <HAL_DMA_IRQHandler+0x828>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d100      	bne.n	8010fa4 <HAL_DMA_IRQHandler+0x648>
 8010fa2:	e093      	b.n	80110cc <HAL_DMA_IRQHandler+0x770>
 8010fa4:	4a71      	ldr	r2, [pc, #452]	; (801116c <HAL_DMA_IRQHandler+0x810>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d100      	bne.n	8010fac <HAL_DMA_IRQHandler+0x650>
 8010faa:	e092      	b.n	80110d2 <HAL_DMA_IRQHandler+0x776>
 8010fac:	4a76      	ldr	r2, [pc, #472]	; (8011188 <HAL_DMA_IRQHandler+0x82c>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d100      	bne.n	8010fb4 <HAL_DMA_IRQHandler+0x658>
 8010fb2:	e091      	b.n	80110d8 <HAL_DMA_IRQHandler+0x77c>
 8010fb4:	4a75      	ldr	r2, [pc, #468]	; (801118c <HAL_DMA_IRQHandler+0x830>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d100      	bne.n	8010fbc <HAL_DMA_IRQHandler+0x660>
 8010fba:	e08f      	b.n	80110dc <HAL_DMA_IRQHandler+0x780>
 8010fbc:	4a74      	ldr	r2, [pc, #464]	; (8011190 <HAL_DMA_IRQHandler+0x834>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d100      	bne.n	8010fc4 <HAL_DMA_IRQHandler+0x668>
 8010fc2:	e08d      	b.n	80110e0 <HAL_DMA_IRQHandler+0x784>
 8010fc4:	4a73      	ldr	r2, [pc, #460]	; (8011194 <HAL_DMA_IRQHandler+0x838>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d061      	beq.n	801108e <HAL_DMA_IRQHandler+0x732>
 8010fca:	2280      	movs	r2, #128	; 0x80
 8010fcc:	0292      	lsls	r2, r2, #10
 8010fce:	e062      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010fd0:	2320      	movs	r3, #32
 8010fd2:	e7b8      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010fd4:	2380      	movs	r3, #128	; 0x80
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	e7b5      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010fda:	2380      	movs	r3, #128	; 0x80
 8010fdc:	019b      	lsls	r3, r3, #6
 8010fde:	e7b2      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010fe0:	2380      	movs	r3, #128	; 0x80
 8010fe2:	029b      	lsls	r3, r3, #10
 8010fe4:	e7af      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010fe6:	2380      	movs	r3, #128	; 0x80
 8010fe8:	039b      	lsls	r3, r3, #14
 8010fea:	e7ac      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010fec:	2380      	movs	r3, #128	; 0x80
 8010fee:	049b      	lsls	r3, r3, #18
 8010ff0:	e7a9      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010ff2:	2302      	movs	r3, #2
 8010ff4:	e7a7      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010ff6:	2320      	movs	r3, #32
 8010ff8:	e7a5      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8010ffa:	2380      	movs	r3, #128	; 0x80
 8010ffc:	009b      	lsls	r3, r3, #2
 8010ffe:	e7a2      	b.n	8010f46 <HAL_DMA_IRQHandler+0x5ea>
 8011000:	4b65      	ldr	r3, [pc, #404]	; (8011198 <HAL_DMA_IRQHandler+0x83c>)
 8011002:	6819      	ldr	r1, [r3, #0]
 8011004:	4b5a      	ldr	r3, [pc, #360]	; (8011170 <HAL_DMA_IRQHandler+0x814>)
 8011006:	429a      	cmp	r2, r3
 8011008:	d023      	beq.n	8011052 <HAL_DMA_IRQHandler+0x6f6>
 801100a:	4b5a      	ldr	r3, [pc, #360]	; (8011174 <HAL_DMA_IRQHandler+0x818>)
 801100c:	429a      	cmp	r2, r3
 801100e:	d026      	beq.n	801105e <HAL_DMA_IRQHandler+0x702>
 8011010:	4b59      	ldr	r3, [pc, #356]	; (8011178 <HAL_DMA_IRQHandler+0x81c>)
 8011012:	429a      	cmp	r2, r3
 8011014:	d025      	beq.n	8011062 <HAL_DMA_IRQHandler+0x706>
 8011016:	4b59      	ldr	r3, [pc, #356]	; (801117c <HAL_DMA_IRQHandler+0x820>)
 8011018:	429a      	cmp	r2, r3
 801101a:	d025      	beq.n	8011068 <HAL_DMA_IRQHandler+0x70c>
 801101c:	4b58      	ldr	r3, [pc, #352]	; (8011180 <HAL_DMA_IRQHandler+0x824>)
 801101e:	429a      	cmp	r2, r3
 8011020:	d025      	beq.n	801106e <HAL_DMA_IRQHandler+0x712>
 8011022:	4b58      	ldr	r3, [pc, #352]	; (8011184 <HAL_DMA_IRQHandler+0x828>)
 8011024:	429a      	cmp	r2, r3
 8011026:	d025      	beq.n	8011074 <HAL_DMA_IRQHandler+0x718>
 8011028:	4b50      	ldr	r3, [pc, #320]	; (801116c <HAL_DMA_IRQHandler+0x810>)
 801102a:	429a      	cmp	r2, r3
 801102c:	d025      	beq.n	801107a <HAL_DMA_IRQHandler+0x71e>
 801102e:	4b56      	ldr	r3, [pc, #344]	; (8011188 <HAL_DMA_IRQHandler+0x82c>)
 8011030:	429a      	cmp	r2, r3
 8011032:	d025      	beq.n	8011080 <HAL_DMA_IRQHandler+0x724>
 8011034:	4b55      	ldr	r3, [pc, #340]	; (801118c <HAL_DMA_IRQHandler+0x830>)
 8011036:	429a      	cmp	r2, r3
 8011038:	d024      	beq.n	8011084 <HAL_DMA_IRQHandler+0x728>
 801103a:	4b55      	ldr	r3, [pc, #340]	; (8011190 <HAL_DMA_IRQHandler+0x834>)
 801103c:	429a      	cmp	r2, r3
 801103e:	d023      	beq.n	8011088 <HAL_DMA_IRQHandler+0x72c>
 8011040:	4b54      	ldr	r3, [pc, #336]	; (8011194 <HAL_DMA_IRQHandler+0x838>)
 8011042:	429a      	cmp	r2, r3
 8011044:	d002      	beq.n	801104c <HAL_DMA_IRQHandler+0x6f0>
 8011046:	2380      	movs	r3, #128	; 0x80
 8011048:	029b      	lsls	r3, r3, #10
 801104a:	e003      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 801104c:	2380      	movs	r3, #128	; 0x80
 801104e:	019b      	lsls	r3, r3, #6
 8011050:	e000      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011052:	2302      	movs	r3, #2
 8011054:	400b      	ands	r3, r1
 8011056:	1e59      	subs	r1, r3, #1
 8011058:	418b      	sbcs	r3, r1
 801105a:	b2db      	uxtb	r3, r3
 801105c:	e777      	b.n	8010f4e <HAL_DMA_IRQHandler+0x5f2>
 801105e:	2320      	movs	r3, #32
 8011060:	e7f8      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011062:	2380      	movs	r3, #128	; 0x80
 8011064:	009b      	lsls	r3, r3, #2
 8011066:	e7f5      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011068:	2380      	movs	r3, #128	; 0x80
 801106a:	019b      	lsls	r3, r3, #6
 801106c:	e7f2      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 801106e:	2380      	movs	r3, #128	; 0x80
 8011070:	029b      	lsls	r3, r3, #10
 8011072:	e7ef      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011074:	2380      	movs	r3, #128	; 0x80
 8011076:	039b      	lsls	r3, r3, #14
 8011078:	e7ec      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 801107a:	2380      	movs	r3, #128	; 0x80
 801107c:	049b      	lsls	r3, r3, #18
 801107e:	e7e9      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011080:	2302      	movs	r3, #2
 8011082:	e7e7      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011084:	2320      	movs	r3, #32
 8011086:	e7e5      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
 8011088:	2380      	movs	r3, #128	; 0x80
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	e7e2      	b.n	8011054 <HAL_DMA_IRQHandler+0x6f8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801108e:	2280      	movs	r2, #128	; 0x80
 8011090:	0192      	lsls	r2, r2, #6
 8011092:	e000      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 8011094:	2202      	movs	r2, #2
 8011096:	4b41      	ldr	r3, [pc, #260]	; (801119c <HAL_DMA_IRQHandler+0x840>)
 8011098:	605a      	str	r2, [r3, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 801109a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801109c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801109e:	2321      	movs	r3, #33	; 0x21
 80110a0:	2201      	movs	r2, #1
 80110a2:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80110a4:	3b01      	subs	r3, #1
 80110a6:	2200      	movs	r2, #0
 80110a8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80110aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d001      	beq.n	80110b4 <HAL_DMA_IRQHandler+0x758>
        hdma->XferCpltCallback(hdma);
 80110b0:	0020      	movs	r0, r4
 80110b2:	4798      	blx	r3
}  
 80110b4:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80110b6:	2220      	movs	r2, #32
 80110b8:	e7ed      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110ba:	2280      	movs	r2, #128	; 0x80
 80110bc:	0092      	lsls	r2, r2, #2
 80110be:	e7ea      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110c0:	2280      	movs	r2, #128	; 0x80
 80110c2:	0192      	lsls	r2, r2, #6
 80110c4:	e7e7      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110c6:	2280      	movs	r2, #128	; 0x80
 80110c8:	0292      	lsls	r2, r2, #10
 80110ca:	e7e4      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110cc:	2280      	movs	r2, #128	; 0x80
 80110ce:	0392      	lsls	r2, r2, #14
 80110d0:	e7e1      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110d2:	2280      	movs	r2, #128	; 0x80
 80110d4:	0492      	lsls	r2, r2, #18
 80110d6:	e7de      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110d8:	2202      	movs	r2, #2
 80110da:	e7dc      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110dc:	2220      	movs	r2, #32
 80110de:	e7da      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110e0:	2280      	movs	r2, #128	; 0x80
 80110e2:	0092      	lsls	r2, r2, #2
 80110e4:	e7d7      	b.n	8011096 <HAL_DMA_IRQHandler+0x73a>
 80110e6:	4a22      	ldr	r2, [pc, #136]	; (8011170 <HAL_DMA_IRQHandler+0x814>)
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d023      	beq.n	8011134 <HAL_DMA_IRQHandler+0x7d8>
 80110ec:	4a21      	ldr	r2, [pc, #132]	; (8011174 <HAL_DMA_IRQHandler+0x818>)
 80110ee:	4293      	cmp	r3, r2
 80110f0:	d024      	beq.n	801113c <HAL_DMA_IRQHandler+0x7e0>
 80110f2:	4a21      	ldr	r2, [pc, #132]	; (8011178 <HAL_DMA_IRQHandler+0x81c>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d023      	beq.n	8011140 <HAL_DMA_IRQHandler+0x7e4>
 80110f8:	4a20      	ldr	r2, [pc, #128]	; (801117c <HAL_DMA_IRQHandler+0x820>)
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d023      	beq.n	8011146 <HAL_DMA_IRQHandler+0x7ea>
 80110fe:	4a20      	ldr	r2, [pc, #128]	; (8011180 <HAL_DMA_IRQHandler+0x824>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d023      	beq.n	801114c <HAL_DMA_IRQHandler+0x7f0>
 8011104:	4a1f      	ldr	r2, [pc, #124]	; (8011184 <HAL_DMA_IRQHandler+0x828>)
 8011106:	4293      	cmp	r3, r2
 8011108:	d023      	beq.n	8011152 <HAL_DMA_IRQHandler+0x7f6>
 801110a:	4a18      	ldr	r2, [pc, #96]	; (801116c <HAL_DMA_IRQHandler+0x810>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d023      	beq.n	8011158 <HAL_DMA_IRQHandler+0x7fc>
 8011110:	4a1d      	ldr	r2, [pc, #116]	; (8011188 <HAL_DMA_IRQHandler+0x82c>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d023      	beq.n	801115e <HAL_DMA_IRQHandler+0x802>
 8011116:	4a1d      	ldr	r2, [pc, #116]	; (801118c <HAL_DMA_IRQHandler+0x830>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d022      	beq.n	8011162 <HAL_DMA_IRQHandler+0x806>
 801111c:	4a1c      	ldr	r2, [pc, #112]	; (8011190 <HAL_DMA_IRQHandler+0x834>)
 801111e:	4293      	cmp	r3, r2
 8011120:	d021      	beq.n	8011166 <HAL_DMA_IRQHandler+0x80a>
 8011122:	4a1c      	ldr	r2, [pc, #112]	; (8011194 <HAL_DMA_IRQHandler+0x838>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d002      	beq.n	801112e <HAL_DMA_IRQHandler+0x7d2>
 8011128:	2280      	movs	r2, #128	; 0x80
 801112a:	0292      	lsls	r2, r2, #10
 801112c:	e003      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 801112e:	2280      	movs	r2, #128	; 0x80
 8011130:	0192      	lsls	r2, r2, #6
 8011132:	e000      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011134:	2202      	movs	r2, #2
 8011136:	4b18      	ldr	r3, [pc, #96]	; (8011198 <HAL_DMA_IRQHandler+0x83c>)
 8011138:	605a      	str	r2, [r3, #4]
 801113a:	e7ae      	b.n	801109a <HAL_DMA_IRQHandler+0x73e>
 801113c:	2220      	movs	r2, #32
 801113e:	e7fa      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011140:	2280      	movs	r2, #128	; 0x80
 8011142:	0092      	lsls	r2, r2, #2
 8011144:	e7f7      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011146:	2280      	movs	r2, #128	; 0x80
 8011148:	0192      	lsls	r2, r2, #6
 801114a:	e7f4      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 801114c:	2280      	movs	r2, #128	; 0x80
 801114e:	0292      	lsls	r2, r2, #10
 8011150:	e7f1      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011152:	2280      	movs	r2, #128	; 0x80
 8011154:	0392      	lsls	r2, r2, #14
 8011156:	e7ee      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011158:	2280      	movs	r2, #128	; 0x80
 801115a:	0492      	lsls	r2, r2, #18
 801115c:	e7eb      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 801115e:	2202      	movs	r2, #2
 8011160:	e7e9      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011162:	2220      	movs	r2, #32
 8011164:	e7e7      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 8011166:	2280      	movs	r2, #128	; 0x80
 8011168:	0092      	lsls	r2, r2, #2
 801116a:	e7e4      	b.n	8011136 <HAL_DMA_IRQHandler+0x7da>
 801116c:	40020080 	.word	0x40020080
 8011170:	40020008 	.word	0x40020008
 8011174:	4002001c 	.word	0x4002001c
 8011178:	40020030 	.word	0x40020030
 801117c:	40020044 	.word	0x40020044
 8011180:	40020058 	.word	0x40020058
 8011184:	4002006c 	.word	0x4002006c
 8011188:	40020408 	.word	0x40020408
 801118c:	4002041c 	.word	0x4002041c
 8011190:	40020430 	.word	0x40020430
 8011194:	40020444 	.word	0x40020444
 8011198:	40020000 	.word	0x40020000
 801119c:	40020400 	.word	0x40020400

080111a0 <FLASH_Program_HalfWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80111a0:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80111a2:	4b05      	ldr	r3, [pc, #20]	; (80111b8 <FLASH_Program_HalfWord+0x18>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80111a8:	4a04      	ldr	r2, [pc, #16]	; (80111bc <FLASH_Program_HalfWord+0x1c>)
 80111aa:	6913      	ldr	r3, [r2, #16]
 80111ac:	2401      	movs	r4, #1
 80111ae:	4323      	orrs	r3, r4
 80111b0:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80111b2:	8001      	strh	r1, [r0, #0]
}
 80111b4:	bd10      	pop	{r4, pc}
 80111b6:	46c0      	nop			; (mov r8, r8)
 80111b8:	20005c90 	.word	0x20005c90
 80111bc:	40022000 	.word	0x40022000

080111c0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80111c0:	4b0a      	ldr	r3, [pc, #40]	; (80111ec <FLASH_SetErrorCode+0x2c>)
 80111c2:	68db      	ldr	r3, [r3, #12]
 80111c4:	06db      	lsls	r3, r3, #27
 80111c6:	d504      	bpl.n	80111d2 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80111c8:	4a09      	ldr	r2, [pc, #36]	; (80111f0 <FLASH_SetErrorCode+0x30>)
 80111ca:	69d3      	ldr	r3, [r2, #28]
 80111cc:	2102      	movs	r1, #2
 80111ce:	430b      	orrs	r3, r1
 80111d0:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80111d2:	4b06      	ldr	r3, [pc, #24]	; (80111ec <FLASH_SetErrorCode+0x2c>)
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	075b      	lsls	r3, r3, #29
 80111d8:	d504      	bpl.n	80111e4 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80111da:	4a05      	ldr	r2, [pc, #20]	; (80111f0 <FLASH_SetErrorCode+0x30>)
 80111dc:	69d3      	ldr	r3, [r2, #28]
 80111de:	2101      	movs	r1, #1
 80111e0:	430b      	orrs	r3, r1
 80111e2:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80111e4:	4b01      	ldr	r3, [pc, #4]	; (80111ec <FLASH_SetErrorCode+0x2c>)
 80111e6:	2214      	movs	r2, #20
 80111e8:	60da      	str	r2, [r3, #12]
}  
 80111ea:	4770      	bx	lr
 80111ec:	40022000 	.word	0x40022000
 80111f0:	20005c90 	.word	0x20005c90

080111f4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80111f4:	4b06      	ldr	r3, [pc, #24]	; (8011210 <HAL_FLASH_Unlock+0x1c>)
 80111f6:	691b      	ldr	r3, [r3, #16]
 80111f8:	061b      	lsls	r3, r3, #24
 80111fa:	d506      	bpl.n	801120a <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80111fc:	4b04      	ldr	r3, [pc, #16]	; (8011210 <HAL_FLASH_Unlock+0x1c>)
 80111fe:	4a05      	ldr	r2, [pc, #20]	; (8011214 <HAL_FLASH_Unlock+0x20>)
 8011200:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011202:	4a05      	ldr	r2, [pc, #20]	; (8011218 <HAL_FLASH_Unlock+0x24>)
 8011204:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011206:	2000      	movs	r0, #0
}
 8011208:	4770      	bx	lr
    return HAL_ERROR;
 801120a:	2001      	movs	r0, #1
 801120c:	e7fc      	b.n	8011208 <HAL_FLASH_Unlock+0x14>
 801120e:	46c0      	nop			; (mov r8, r8)
 8011210:	40022000 	.word	0x40022000
 8011214:	45670123 	.word	0x45670123
 8011218:	cdef89ab 	.word	0xcdef89ab

0801121c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801121c:	4a03      	ldr	r2, [pc, #12]	; (801122c <HAL_FLASH_Lock+0x10>)
 801121e:	6913      	ldr	r3, [r2, #16]
 8011220:	2180      	movs	r1, #128	; 0x80
 8011222:	430b      	orrs	r3, r1
 8011224:	6113      	str	r3, [r2, #16]
}
 8011226:	2000      	movs	r0, #0
 8011228:	4770      	bx	lr
 801122a:	46c0      	nop			; (mov r8, r8)
 801122c:	40022000 	.word	0x40022000

08011230 <FLASH_WaitForLastOperation>:
{
 8011230:	b570      	push	{r4, r5, r6, lr}
 8011232:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011234:	f7fe fe3c 	bl	800feb0 <HAL_GetTick>
 8011238:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801123a:	4b12      	ldr	r3, [pc, #72]	; (8011284 <FLASH_WaitForLastOperation+0x54>)
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	07db      	lsls	r3, r3, #31
 8011240:	d50a      	bpl.n	8011258 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8011242:	1c63      	adds	r3, r4, #1
 8011244:	d0f9      	beq.n	801123a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011246:	2c00      	cmp	r4, #0
 8011248:	d004      	beq.n	8011254 <FLASH_WaitForLastOperation+0x24>
 801124a:	f7fe fe31 	bl	800feb0 <HAL_GetTick>
 801124e:	1b40      	subs	r0, r0, r5
 8011250:	42a0      	cmp	r0, r4
 8011252:	d9f2      	bls.n	801123a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8011254:	2003      	movs	r0, #3
 8011256:	e00f      	b.n	8011278 <FLASH_WaitForLastOperation+0x48>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011258:	4b0a      	ldr	r3, [pc, #40]	; (8011284 <FLASH_WaitForLastOperation+0x54>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	069b      	lsls	r3, r3, #26
 801125e:	d502      	bpl.n	8011266 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011260:	4b08      	ldr	r3, [pc, #32]	; (8011284 <FLASH_WaitForLastOperation+0x54>)
 8011262:	2220      	movs	r2, #32
 8011264:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011266:	4b07      	ldr	r3, [pc, #28]	; (8011284 <FLASH_WaitForLastOperation+0x54>)
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	06db      	lsls	r3, r3, #27
 801126c:	d405      	bmi.n	801127a <FLASH_WaitForLastOperation+0x4a>
 801126e:	4b05      	ldr	r3, [pc, #20]	; (8011284 <FLASH_WaitForLastOperation+0x54>)
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	075b      	lsls	r3, r3, #29
 8011274:	d401      	bmi.n	801127a <FLASH_WaitForLastOperation+0x4a>
  return HAL_OK;
 8011276:	2000      	movs	r0, #0
}
 8011278:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 801127a:	f7ff ffa1 	bl	80111c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801127e:	2001      	movs	r0, #1
 8011280:	e7fa      	b.n	8011278 <FLASH_WaitForLastOperation+0x48>
 8011282:	46c0      	nop			; (mov r8, r8)
 8011284:	40022000 	.word	0x40022000

08011288 <HAL_FLASH_Program>:
{
 8011288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128a:	46ce      	mov	lr, r9
 801128c:	4647      	mov	r7, r8
 801128e:	b580      	push	{r7, lr}
 8011290:	0005      	movs	r5, r0
 8011292:	000e      	movs	r6, r1
 8011294:	4690      	mov	r8, r2
 8011296:	001f      	movs	r7, r3
  __HAL_LOCK(&pFlash);
 8011298:	4b22      	ldr	r3, [pc, #136]	; (8011324 <HAL_FLASH_Program+0x9c>)
 801129a:	7e1b      	ldrb	r3, [r3, #24]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d03e      	beq.n	801131e <HAL_FLASH_Program+0x96>
 80112a0:	4b20      	ldr	r3, [pc, #128]	; (8011324 <HAL_FLASH_Program+0x9c>)
 80112a2:	2201      	movs	r2, #1
 80112a4:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112a6:	4820      	ldr	r0, [pc, #128]	; (8011328 <HAL_FLASH_Program+0xa0>)
 80112a8:	f7ff ffc2 	bl	8011230 <FLASH_WaitForLastOperation>
 80112ac:	1e04      	subs	r4, r0, #0
  if(status == HAL_OK)
 80112ae:	d12f      	bne.n	8011310 <HAL_FLASH_Program+0x88>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80112b0:	2d01      	cmp	r5, #1
 80112b2:	d007      	beq.n	80112c4 <HAL_FLASH_Program+0x3c>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80112b4:	2d02      	cmp	r5, #2
 80112b6:	d002      	beq.n	80112be <HAL_FLASH_Program+0x36>
      nbiterations = 4;
 80112b8:	2304      	movs	r3, #4
 80112ba:	4699      	mov	r9, r3
    for (index = 0; index < nbiterations; index++)
 80112bc:	e01d      	b.n	80112fa <HAL_FLASH_Program+0x72>
      nbiterations = 2;
 80112be:	2302      	movs	r3, #2
 80112c0:	4699      	mov	r9, r3
 80112c2:	e01a      	b.n	80112fa <HAL_FLASH_Program+0x72>
      nbiterations = 1;
 80112c4:	2301      	movs	r3, #1
 80112c6:	4699      	mov	r9, r3
 80112c8:	e017      	b.n	80112fa <HAL_FLASH_Program+0x72>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80112ca:	2220      	movs	r2, #32
 80112cc:	1ad2      	subs	r2, r2, r3
 80112ce:	0039      	movs	r1, r7
 80112d0:	4091      	lsls	r1, r2
 80112d2:	000a      	movs	r2, r1
 80112d4:	4641      	mov	r1, r8
 80112d6:	40d9      	lsrs	r1, r3
 80112d8:	4311      	orrs	r1, r2
 80112da:	b289      	uxth	r1, r1
 80112dc:	1980      	adds	r0, r0, r6
 80112de:	f7ff ff5f 	bl	80111a0 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112e2:	4811      	ldr	r0, [pc, #68]	; (8011328 <HAL_FLASH_Program+0xa0>)
 80112e4:	f7ff ffa4 	bl	8011230 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80112e8:	4a10      	ldr	r2, [pc, #64]	; (801132c <HAL_FLASH_Program+0xa4>)
 80112ea:	6913      	ldr	r3, [r2, #16]
 80112ec:	2101      	movs	r1, #1
 80112ee:	438b      	bics	r3, r1
 80112f0:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 80112f2:	2800      	cmp	r0, #0
 80112f4:	d10c      	bne.n	8011310 <HAL_FLASH_Program+0x88>
    for (index = 0; index < nbiterations; index++)
 80112f6:	3401      	adds	r4, #1
 80112f8:	b2e4      	uxtb	r4, r4
 80112fa:	454c      	cmp	r4, r9
 80112fc:	d208      	bcs.n	8011310 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80112fe:	0060      	lsls	r0, r4, #1
 8011300:	0123      	lsls	r3, r4, #4
 8011302:	2220      	movs	r2, #32
 8011304:	4252      	negs	r2, r2
 8011306:	189a      	adds	r2, r3, r2
 8011308:	d4df      	bmi.n	80112ca <HAL_FLASH_Program+0x42>
 801130a:	0039      	movs	r1, r7
 801130c:	40d1      	lsrs	r1, r2
 801130e:	e7e4      	b.n	80112da <HAL_FLASH_Program+0x52>
  __HAL_UNLOCK(&pFlash);
 8011310:	4b04      	ldr	r3, [pc, #16]	; (8011324 <HAL_FLASH_Program+0x9c>)
 8011312:	2200      	movs	r2, #0
 8011314:	761a      	strb	r2, [r3, #24]
}
 8011316:	bcc0      	pop	{r6, r7}
 8011318:	46b9      	mov	r9, r7
 801131a:	46b0      	mov	r8, r6
 801131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 801131e:	2002      	movs	r0, #2
 8011320:	e7f9      	b.n	8011316 <HAL_FLASH_Program+0x8e>
 8011322:	46c0      	nop			; (mov r8, r8)
 8011324:	20005c90 	.word	0x20005c90
 8011328:	0000c350 	.word	0x0000c350
 801132c:	40022000 	.word	0x40022000

08011330 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011330:	4b06      	ldr	r3, [pc, #24]	; (801134c <FLASH_MassErase+0x1c>)
 8011332:	2200      	movs	r2, #0
 8011334:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011336:	4b06      	ldr	r3, [pc, #24]	; (8011350 <FLASH_MassErase+0x20>)
 8011338:	691a      	ldr	r2, [r3, #16]
 801133a:	2104      	movs	r1, #4
 801133c:	430a      	orrs	r2, r1
 801133e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011340:	691a      	ldr	r2, [r3, #16]
 8011342:	313c      	adds	r1, #60	; 0x3c
 8011344:	430a      	orrs	r2, r1
 8011346:	611a      	str	r2, [r3, #16]
}
 8011348:	4770      	bx	lr
 801134a:	46c0      	nop			; (mov r8, r8)
 801134c:	20005c90 	.word	0x20005c90
 8011350:	40022000 	.word	0x40022000

08011354 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011354:	4b06      	ldr	r3, [pc, #24]	; (8011370 <FLASH_PageErase+0x1c>)
 8011356:	2200      	movs	r2, #0
 8011358:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801135a:	4b06      	ldr	r3, [pc, #24]	; (8011374 <FLASH_PageErase+0x20>)
 801135c:	691a      	ldr	r2, [r3, #16]
 801135e:	2102      	movs	r1, #2
 8011360:	430a      	orrs	r2, r1
 8011362:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011364:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011366:	691a      	ldr	r2, [r3, #16]
 8011368:	313e      	adds	r1, #62	; 0x3e
 801136a:	430a      	orrs	r2, r1
 801136c:	611a      	str	r2, [r3, #16]
}
 801136e:	4770      	bx	lr
 8011370:	20005c90 	.word	0x20005c90
 8011374:	40022000 	.word	0x40022000

08011378 <HAL_FLASHEx_Erase>:
{
 8011378:	b570      	push	{r4, r5, r6, lr}
 801137a:	0005      	movs	r5, r0
 801137c:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 801137e:	4b24      	ldr	r3, [pc, #144]	; (8011410 <HAL_FLASHEx_Erase+0x98>)
 8011380:	7e1b      	ldrb	r3, [r3, #24]
 8011382:	2b01      	cmp	r3, #1
 8011384:	d041      	beq.n	801140a <HAL_FLASHEx_Erase+0x92>
 8011386:	4b22      	ldr	r3, [pc, #136]	; (8011410 <HAL_FLASHEx_Erase+0x98>)
 8011388:	2201      	movs	r2, #1
 801138a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801138c:	6803      	ldr	r3, [r0, #0]
 801138e:	2b01      	cmp	r3, #1
 8011390:	d022      	beq.n	80113d8 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011392:	4820      	ldr	r0, [pc, #128]	; (8011414 <HAL_FLASHEx_Erase+0x9c>)
 8011394:	f7ff ff4c 	bl	8011230 <FLASH_WaitForLastOperation>
 8011398:	2800      	cmp	r0, #0
 801139a:	d131      	bne.n	8011400 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFF;
 801139c:	2301      	movs	r3, #1
 801139e:	425b      	negs	r3, r3
 80113a0:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 80113a2:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80113a4:	3001      	adds	r0, #1
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80113a6:	68ab      	ldr	r3, [r5, #8]
 80113a8:	02db      	lsls	r3, r3, #11
 80113aa:	686a      	ldr	r2, [r5, #4]
 80113ac:	4694      	mov	ip, r2
 80113ae:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80113b0:	42a3      	cmp	r3, r4
 80113b2:	d926      	bls.n	8011402 <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 80113b4:	0020      	movs	r0, r4
 80113b6:	f7ff ffcd 	bl	8011354 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113ba:	4816      	ldr	r0, [pc, #88]	; (8011414 <HAL_FLASHEx_Erase+0x9c>)
 80113bc:	f7ff ff38 	bl	8011230 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80113c0:	4a15      	ldr	r2, [pc, #84]	; (8011418 <HAL_FLASHEx_Erase+0xa0>)
 80113c2:	6913      	ldr	r3, [r2, #16]
 80113c4:	2102      	movs	r1, #2
 80113c6:	438b      	bics	r3, r1
 80113c8:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d116      	bne.n	80113fc <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 80113ce:	2380      	movs	r3, #128	; 0x80
 80113d0:	011b      	lsls	r3, r3, #4
 80113d2:	469c      	mov	ip, r3
 80113d4:	4464      	add	r4, ip
 80113d6:	e7e6      	b.n	80113a6 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80113d8:	480e      	ldr	r0, [pc, #56]	; (8011414 <HAL_FLASHEx_Erase+0x9c>)
 80113da:	f7ff ff29 	bl	8011230 <FLASH_WaitForLastOperation>
 80113de:	2800      	cmp	r0, #0
 80113e0:	d001      	beq.n	80113e6 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80113e2:	2001      	movs	r0, #1
 80113e4:	e00d      	b.n	8011402 <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 80113e6:	f7ff ffa3 	bl	8011330 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80113ea:	480a      	ldr	r0, [pc, #40]	; (8011414 <HAL_FLASHEx_Erase+0x9c>)
 80113ec:	f7ff ff20 	bl	8011230 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80113f0:	4a09      	ldr	r2, [pc, #36]	; (8011418 <HAL_FLASHEx_Erase+0xa0>)
 80113f2:	6913      	ldr	r3, [r2, #16]
 80113f4:	2104      	movs	r1, #4
 80113f6:	438b      	bics	r3, r1
 80113f8:	6113      	str	r3, [r2, #16]
 80113fa:	e002      	b.n	8011402 <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80113fc:	6034      	str	r4, [r6, #0]
            break;
 80113fe:	e000      	b.n	8011402 <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011400:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8011402:	4b03      	ldr	r3, [pc, #12]	; (8011410 <HAL_FLASHEx_Erase+0x98>)
 8011404:	2200      	movs	r2, #0
 8011406:	761a      	strb	r2, [r3, #24]
}
 8011408:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 801140a:	2002      	movs	r0, #2
 801140c:	e7fc      	b.n	8011408 <HAL_FLASHEx_Erase+0x90>
 801140e:	46c0      	nop			; (mov r8, r8)
 8011410:	20005c90 	.word	0x20005c90
 8011414:	0000c350 	.word	0x0000c350
 8011418:	40022000 	.word	0x40022000

0801141c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 801141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801141e:	46c6      	mov	lr, r8
 8011420:	b500      	push	{lr}
 8011422:	b082      	sub	sp, #8
  uint32_t position = 0x00;
 8011424:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011426:	e033      	b.n	8011490 <HAL_GPIO_Init+0x74>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011428:	2604      	movs	r6, #4
 801142a:	e000      	b.n	801142e <HAL_GPIO_Init+0x12>
 801142c:	2600      	movs	r6, #0
 801142e:	40a6      	lsls	r6, r4
 8011430:	0034      	movs	r4, r6
 8011432:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011434:	3202      	adds	r2, #2
 8011436:	0092      	lsls	r2, r2, #2
 8011438:	4e57      	ldr	r6, [pc, #348]	; (8011598 <HAL_GPIO_Init+0x17c>)
 801143a:	5194      	str	r4, [r2, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801143c:	4a57      	ldr	r2, [pc, #348]	; (801159c <HAL_GPIO_Init+0x180>)
 801143e:	6814      	ldr	r4, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011440:	43ea      	mvns	r2, r5
 8011442:	0026      	movs	r6, r4
 8011444:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011446:	684f      	ldr	r7, [r1, #4]
 8011448:	03ff      	lsls	r7, r7, #15
 801144a:	d501      	bpl.n	8011450 <HAL_GPIO_Init+0x34>
        {
          SET_BIT(temp, iocurrent); 
 801144c:	432c      	orrs	r4, r5
 801144e:	0026      	movs	r6, r4
        }
        EXTI->IMR = temp;
 8011450:	4c52      	ldr	r4, [pc, #328]	; (801159c <HAL_GPIO_Init+0x180>)
 8011452:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8011454:	6864      	ldr	r4, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011456:	0026      	movs	r6, r4
 8011458:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801145a:	684f      	ldr	r7, [r1, #4]
 801145c:	03bf      	lsls	r7, r7, #14
 801145e:	d501      	bpl.n	8011464 <HAL_GPIO_Init+0x48>
        { 
          SET_BIT(temp, iocurrent); 
 8011460:	432c      	orrs	r4, r5
 8011462:	0026      	movs	r6, r4
        }
        EXTI->EMR = temp;
 8011464:	4c4d      	ldr	r4, [pc, #308]	; (801159c <HAL_GPIO_Init+0x180>)
 8011466:	6066      	str	r6, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011468:	68a4      	ldr	r4, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801146a:	0026      	movs	r6, r4
 801146c:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801146e:	684f      	ldr	r7, [r1, #4]
 8011470:	02ff      	lsls	r7, r7, #11
 8011472:	d501      	bpl.n	8011478 <HAL_GPIO_Init+0x5c>
        {
          SET_BIT(temp, iocurrent); 
 8011474:	432c      	orrs	r4, r5
 8011476:	0026      	movs	r6, r4
        }
        EXTI->RTSR = temp;
 8011478:	4c48      	ldr	r4, [pc, #288]	; (801159c <HAL_GPIO_Init+0x180>)
 801147a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 801147c:	68e4      	ldr	r4, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 801147e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011480:	684e      	ldr	r6, [r1, #4]
 8011482:	02b6      	lsls	r6, r6, #10
 8011484:	d501      	bpl.n	801148a <HAL_GPIO_Init+0x6e>
        {
          SET_BIT(temp, iocurrent); 
 8011486:	002a      	movs	r2, r5
 8011488:	4322      	orrs	r2, r4
        }
        EXTI->FTSR = temp;
 801148a:	4c44      	ldr	r4, [pc, #272]	; (801159c <HAL_GPIO_Init+0x180>)
 801148c:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 801148e:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011490:	680c      	ldr	r4, [r1, #0]
 8011492:	0022      	movs	r2, r4
 8011494:	40da      	lsrs	r2, r3
 8011496:	d07a      	beq.n	801158e <HAL_GPIO_Init+0x172>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011498:	2201      	movs	r2, #1
 801149a:	409a      	lsls	r2, r3
 801149c:	0025      	movs	r5, r4
 801149e:	4015      	ands	r5, r2
    if(iocurrent)
 80114a0:	4214      	tst	r4, r2
 80114a2:	d0f4      	beq.n	801148e <HAL_GPIO_Init+0x72>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80114a4:	684a      	ldr	r2, [r1, #4]
 80114a6:	2a02      	cmp	r2, #2
 80114a8:	d001      	beq.n	80114ae <HAL_GPIO_Init+0x92>
 80114aa:	2a12      	cmp	r2, #18
 80114ac:	d10e      	bne.n	80114cc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3];
 80114ae:	08da      	lsrs	r2, r3, #3
 80114b0:	3208      	adds	r2, #8
 80114b2:	0092      	lsls	r2, r2, #2
 80114b4:	5816      	ldr	r6, [r2, r0]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 80114b6:	2407      	movs	r4, #7
 80114b8:	401c      	ands	r4, r3
 80114ba:	00a4      	lsls	r4, r4, #2
 80114bc:	270f      	movs	r7, #15
 80114be:	40a7      	lsls	r7, r4
 80114c0:	43be      	bics	r6, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 80114c2:	690f      	ldr	r7, [r1, #16]
 80114c4:	40a7      	lsls	r7, r4
 80114c6:	003c      	movs	r4, r7
 80114c8:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3] = temp;
 80114ca:	5014      	str	r4, [r2, r0]
      temp = GPIOx->MODER;
 80114cc:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80114ce:	005c      	lsls	r4, r3, #1
 80114d0:	2203      	movs	r2, #3
 80114d2:	0016      	movs	r6, r2
 80114d4:	40a6      	lsls	r6, r4
 80114d6:	46b4      	mov	ip, r6
 80114d8:	43f6      	mvns	r6, r6
 80114da:	46b0      	mov	r8, r6
 80114dc:	4666      	mov	r6, ip
 80114de:	43b7      	bics	r7, r6
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80114e0:	684e      	ldr	r6, [r1, #4]
 80114e2:	4032      	ands	r2, r6
 80114e4:	40a2      	lsls	r2, r4
 80114e6:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80114e8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80114ea:	684a      	ldr	r2, [r1, #4]
 80114ec:	1e57      	subs	r7, r2, #1
 80114ee:	2f01      	cmp	r7, #1
 80114f0:	d903      	bls.n	80114fa <HAL_GPIO_Init+0xde>
 80114f2:	2a11      	cmp	r2, #17
 80114f4:	d001      	beq.n	80114fa <HAL_GPIO_Init+0xde>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80114f6:	2a12      	cmp	r2, #18
 80114f8:	d111      	bne.n	801151e <HAL_GPIO_Init+0x102>
        temp = GPIOx->OSPEEDR; 
 80114fa:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80114fc:	4642      	mov	r2, r8
 80114fe:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011500:	68ca      	ldr	r2, [r1, #12]
 8011502:	40a2      	lsls	r2, r4
 8011504:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8011506:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8011508:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 801150a:	2201      	movs	r2, #1
 801150c:	0016      	movs	r6, r2
 801150e:	409e      	lsls	r6, r3
 8011510:	43b7      	bics	r7, r6
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011512:	684e      	ldr	r6, [r1, #4]
 8011514:	0936      	lsrs	r6, r6, #4
 8011516:	4032      	ands	r2, r6
 8011518:	409a      	lsls	r2, r3
 801151a:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 801151c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 801151e:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011520:	4646      	mov	r6, r8
 8011522:	4032      	ands	r2, r6
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011524:	688e      	ldr	r6, [r1, #8]
 8011526:	40a6      	lsls	r6, r4
 8011528:	4316      	orrs	r6, r2
      GPIOx->PUPDR = temp;
 801152a:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801152c:	684a      	ldr	r2, [r1, #4]
 801152e:	00d2      	lsls	r2, r2, #3
 8011530:	d5ad      	bpl.n	801148e <HAL_GPIO_Init+0x72>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011532:	4c1b      	ldr	r4, [pc, #108]	; (80115a0 <HAL_GPIO_Init+0x184>)
 8011534:	69a6      	ldr	r6, [r4, #24]
 8011536:	2201      	movs	r2, #1
 8011538:	4316      	orrs	r6, r2
 801153a:	61a6      	str	r6, [r4, #24]
 801153c:	69a4      	ldr	r4, [r4, #24]
 801153e:	4022      	ands	r2, r4
 8011540:	9201      	str	r2, [sp, #4]
 8011542:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8011544:	089a      	lsrs	r2, r3, #2
 8011546:	1c94      	adds	r4, r2, #2
 8011548:	00a4      	lsls	r4, r4, #2
 801154a:	4e13      	ldr	r6, [pc, #76]	; (8011598 <HAL_GPIO_Init+0x17c>)
 801154c:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801154e:	2603      	movs	r6, #3
 8011550:	401e      	ands	r6, r3
 8011552:	00b4      	lsls	r4, r6, #2
 8011554:	260f      	movs	r6, #15
 8011556:	40a6      	lsls	r6, r4
 8011558:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801155a:	2690      	movs	r6, #144	; 0x90
 801155c:	05f6      	lsls	r6, r6, #23
 801155e:	42b0      	cmp	r0, r6
 8011560:	d100      	bne.n	8011564 <HAL_GPIO_Init+0x148>
 8011562:	e763      	b.n	801142c <HAL_GPIO_Init+0x10>
 8011564:	4e0f      	ldr	r6, [pc, #60]	; (80115a4 <HAL_GPIO_Init+0x188>)
 8011566:	42b0      	cmp	r0, r6
 8011568:	d00b      	beq.n	8011582 <HAL_GPIO_Init+0x166>
 801156a:	4e0f      	ldr	r6, [pc, #60]	; (80115a8 <HAL_GPIO_Init+0x18c>)
 801156c:	42b0      	cmp	r0, r6
 801156e:	d00a      	beq.n	8011586 <HAL_GPIO_Init+0x16a>
 8011570:	4e0e      	ldr	r6, [pc, #56]	; (80115ac <HAL_GPIO_Init+0x190>)
 8011572:	42b0      	cmp	r0, r6
 8011574:	d009      	beq.n	801158a <HAL_GPIO_Init+0x16e>
 8011576:	4e0e      	ldr	r6, [pc, #56]	; (80115b0 <HAL_GPIO_Init+0x194>)
 8011578:	42b0      	cmp	r0, r6
 801157a:	d100      	bne.n	801157e <HAL_GPIO_Init+0x162>
 801157c:	e754      	b.n	8011428 <HAL_GPIO_Init+0xc>
 801157e:	2605      	movs	r6, #5
 8011580:	e755      	b.n	801142e <HAL_GPIO_Init+0x12>
 8011582:	2601      	movs	r6, #1
 8011584:	e753      	b.n	801142e <HAL_GPIO_Init+0x12>
 8011586:	2602      	movs	r6, #2
 8011588:	e751      	b.n	801142e <HAL_GPIO_Init+0x12>
 801158a:	2603      	movs	r6, #3
 801158c:	e74f      	b.n	801142e <HAL_GPIO_Init+0x12>
  } 
}
 801158e:	b002      	add	sp, #8
 8011590:	bc80      	pop	{r7}
 8011592:	46b8      	mov	r8, r7
 8011594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011596:	46c0      	nop			; (mov r8, r8)
 8011598:	40010000 	.word	0x40010000
 801159c:	40010400 	.word	0x40010400
 80115a0:	40021000 	.word	0x40021000
 80115a4:	48000400 	.word	0x48000400
 80115a8:	48000800 	.word	0x48000800
 80115ac:	48000c00 	.word	0x48000c00
 80115b0:	48001000 	.word	0x48001000

080115b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80115b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b6:	46ce      	mov	lr, r9
 80115b8:	4647      	mov	r7, r8
 80115ba:	b580      	push	{r7, lr}
  uint32_t position = 0x00;
 80115bc:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80115be:	e006      	b.n	80115ce <HAL_GPIO_DeInit+0x1a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80115c0:	2604      	movs	r6, #4
 80115c2:	e000      	b.n	80115c6 <HAL_GPIO_DeInit+0x12>
 80115c4:	2600      	movs	r6, #0
 80115c6:	4096      	lsls	r6, r2
 80115c8:	42a6      	cmp	r6, r4
 80115ca:	d050      	beq.n	801166e <HAL_GPIO_DeInit+0xba>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 80115cc:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80115ce:	000a      	movs	r2, r1
 80115d0:	40da      	lsrs	r2, r3
 80115d2:	d061      	beq.n	8011698 <HAL_GPIO_DeInit+0xe4>
    iocurrent = (GPIO_Pin) & (1 << position);
 80115d4:	2201      	movs	r2, #1
 80115d6:	409a      	lsls	r2, r3
 80115d8:	000f      	movs	r7, r1
 80115da:	4017      	ands	r7, r2
    if (iocurrent)
 80115dc:	4211      	tst	r1, r2
 80115de:	d0f5      	beq.n	80115cc <HAL_GPIO_DeInit+0x18>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80115e0:	6804      	ldr	r4, [r0, #0]
 80115e2:	005d      	lsls	r5, r3, #1
 80115e4:	2203      	movs	r2, #3
 80115e6:	4691      	mov	r9, r2
 80115e8:	0016      	movs	r6, r2
 80115ea:	40ae      	lsls	r6, r5
 80115ec:	46b4      	mov	ip, r6
 80115ee:	43b4      	bics	r4, r6
 80115f0:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80115f2:	08dd      	lsrs	r5, r3, #3
 80115f4:	3508      	adds	r5, #8
 80115f6:	00ad      	lsls	r5, r5, #2
 80115f8:	582a      	ldr	r2, [r5, r0]
 80115fa:	4690      	mov	r8, r2
 80115fc:	2407      	movs	r4, #7
 80115fe:	401c      	ands	r4, r3
 8011600:	00a4      	lsls	r4, r4, #2
 8011602:	260f      	movs	r6, #15
 8011604:	0032      	movs	r2, r6
 8011606:	40a2      	lsls	r2, r4
 8011608:	0014      	movs	r4, r2
 801160a:	4642      	mov	r2, r8
 801160c:	43a2      	bics	r2, r4
 801160e:	502a      	str	r2, [r5, r0]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011610:	6884      	ldr	r4, [r0, #8]
 8011612:	4662      	mov	r2, ip
 8011614:	4394      	bics	r4, r2
 8011616:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011618:	6844      	ldr	r4, [r0, #4]
 801161a:	2501      	movs	r5, #1
 801161c:	409d      	lsls	r5, r3
 801161e:	43ac      	bics	r4, r5
 8011620:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011622:	68c4      	ldr	r4, [r0, #12]
 8011624:	4394      	bics	r4, r2
 8011626:	60c4      	str	r4, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8011628:	089d      	lsrs	r5, r3, #2
 801162a:	1cac      	adds	r4, r5, #2
 801162c:	00a4      	lsls	r4, r4, #2
 801162e:	4a1c      	ldr	r2, [pc, #112]	; (80116a0 <HAL_GPIO_DeInit+0xec>)
 8011630:	58a4      	ldr	r4, [r4, r2]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011632:	464a      	mov	r2, r9
 8011634:	401a      	ands	r2, r3
 8011636:	0092      	lsls	r2, r2, #2
 8011638:	4096      	lsls	r6, r2
 801163a:	46b4      	mov	ip, r6
 801163c:	4034      	ands	r4, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801163e:	2690      	movs	r6, #144	; 0x90
 8011640:	05f6      	lsls	r6, r6, #23
 8011642:	42b0      	cmp	r0, r6
 8011644:	d0be      	beq.n	80115c4 <HAL_GPIO_DeInit+0x10>
 8011646:	4e17      	ldr	r6, [pc, #92]	; (80116a4 <HAL_GPIO_DeInit+0xf0>)
 8011648:	42b0      	cmp	r0, r6
 801164a:	d00a      	beq.n	8011662 <HAL_GPIO_DeInit+0xae>
 801164c:	4e16      	ldr	r6, [pc, #88]	; (80116a8 <HAL_GPIO_DeInit+0xf4>)
 801164e:	42b0      	cmp	r0, r6
 8011650:	d009      	beq.n	8011666 <HAL_GPIO_DeInit+0xb2>
 8011652:	4e16      	ldr	r6, [pc, #88]	; (80116ac <HAL_GPIO_DeInit+0xf8>)
 8011654:	42b0      	cmp	r0, r6
 8011656:	d008      	beq.n	801166a <HAL_GPIO_DeInit+0xb6>
 8011658:	4e15      	ldr	r6, [pc, #84]	; (80116b0 <HAL_GPIO_DeInit+0xfc>)
 801165a:	42b0      	cmp	r0, r6
 801165c:	d0b0      	beq.n	80115c0 <HAL_GPIO_DeInit+0xc>
 801165e:	2605      	movs	r6, #5
 8011660:	e7b1      	b.n	80115c6 <HAL_GPIO_DeInit+0x12>
 8011662:	2601      	movs	r6, #1
 8011664:	e7af      	b.n	80115c6 <HAL_GPIO_DeInit+0x12>
 8011666:	2602      	movs	r6, #2
 8011668:	e7ad      	b.n	80115c6 <HAL_GPIO_DeInit+0x12>
 801166a:	2603      	movs	r6, #3
 801166c:	e7ab      	b.n	80115c6 <HAL_GPIO_DeInit+0x12>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 801166e:	4e0c      	ldr	r6, [pc, #48]	; (80116a0 <HAL_GPIO_DeInit+0xec>)
 8011670:	1caa      	adds	r2, r5, #2
 8011672:	0092      	lsls	r2, r2, #2
 8011674:	5994      	ldr	r4, [r2, r6]
 8011676:	4665      	mov	r5, ip
 8011678:	43ac      	bics	r4, r5
 801167a:	5194      	str	r4, [r2, r6]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 801167c:	4a0d      	ldr	r2, [pc, #52]	; (80116b4 <HAL_GPIO_DeInit+0x100>)
 801167e:	6814      	ldr	r4, [r2, #0]
 8011680:	43bc      	bics	r4, r7
 8011682:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8011684:	6854      	ldr	r4, [r2, #4]
 8011686:	43bc      	bics	r4, r7
 8011688:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 801168a:	6894      	ldr	r4, [r2, #8]
 801168c:	43bc      	bics	r4, r7
 801168e:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011690:	68d4      	ldr	r4, [r2, #12]
 8011692:	43bc      	bics	r4, r7
 8011694:	60d4      	str	r4, [r2, #12]
 8011696:	e799      	b.n	80115cc <HAL_GPIO_DeInit+0x18>
  }
}
 8011698:	bcc0      	pop	{r6, r7}
 801169a:	46b9      	mov	r9, r7
 801169c:	46b0      	mov	r8, r6
 801169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116a0:	40010000 	.word	0x40010000
 80116a4:	48000400 	.word	0x48000400
 80116a8:	48000800 	.word	0x48000800
 80116ac:	48000c00 	.word	0x48000c00
 80116b0:	48001000 	.word	0x48001000
 80116b4:	40010400 	.word	0x40010400

080116b8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80116b8:	6903      	ldr	r3, [r0, #16]
 80116ba:	420b      	tst	r3, r1
 80116bc:	d001      	beq.n	80116c2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80116be:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 80116c0:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 80116c2:	2000      	movs	r0, #0
 80116c4:	e7fc      	b.n	80116c0 <HAL_GPIO_ReadPin+0x8>

080116c6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80116c6:	2a00      	cmp	r2, #0
 80116c8:	d001      	beq.n	80116ce <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80116ca:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80116cc:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80116ce:	6281      	str	r1, [r0, #40]	; 0x28
}
 80116d0:	e7fc      	b.n	80116cc <HAL_GPIO_WritePin+0x6>

080116d2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80116d2:	6943      	ldr	r3, [r0, #20]
 80116d4:	4059      	eors	r1, r3
 80116d6:	6141      	str	r1, [r0, #20]
}
 80116d8:	4770      	bx	lr

080116da <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 80116da:	4770      	bx	lr

080116dc <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80116dc:	4a03      	ldr	r2, [pc, #12]	; (80116ec <HAL_PWR_EnableBkUpAccess+0x10>)
 80116de:	6811      	ldr	r1, [r2, #0]
 80116e0:	2380      	movs	r3, #128	; 0x80
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	430b      	orrs	r3, r1
 80116e6:	6013      	str	r3, [r2, #0]
}
 80116e8:	4770      	bx	lr
 80116ea:	46c0      	nop			; (mov r8, r8)
 80116ec:	40007000 	.word	0x40007000

080116f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80116f0:	b530      	push	{r4, r5, lr}
 80116f2:	b083      	sub	sp, #12
 80116f4:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80116f6:	6803      	ldr	r3, [r0, #0]
 80116f8:	07db      	lsls	r3, r3, #31
 80116fa:	d534      	bpl.n	8011766 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80116fc:	4bc1      	ldr	r3, [pc, #772]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80116fe:	685a      	ldr	r2, [r3, #4]
 8011700:	230c      	movs	r3, #12
 8011702:	4013      	ands	r3, r2
 8011704:	2b04      	cmp	r3, #4
 8011706:	d026      	beq.n	8011756 <HAL_RCC_OscConfig+0x66>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011708:	4bbe      	ldr	r3, [pc, #760]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801170a:	685a      	ldr	r2, [r3, #4]
 801170c:	230c      	movs	r3, #12
 801170e:	4013      	ands	r3, r2
 8011710:	2b08      	cmp	r3, #8
 8011712:	d108      	bne.n	8011726 <HAL_RCC_OscConfig+0x36>
 8011714:	4bbb      	ldr	r3, [pc, #748]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	22c0      	movs	r2, #192	; 0xc0
 801171a:	0252      	lsls	r2, r2, #9
 801171c:	4013      	ands	r3, r2
 801171e:	2280      	movs	r2, #128	; 0x80
 8011720:	0252      	lsls	r2, r2, #9
 8011722:	4293      	cmp	r3, r2
 8011724:	d017      	beq.n	8011756 <HAL_RCC_OscConfig+0x66>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011726:	4bb7      	ldr	r3, [pc, #732]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011728:	681a      	ldr	r2, [r3, #0]
 801172a:	49b7      	ldr	r1, [pc, #732]	; (8011a08 <HAL_RCC_OscConfig+0x318>)
 801172c:	400a      	ands	r2, r1
 801172e:	601a      	str	r2, [r3, #0]
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	49b6      	ldr	r1, [pc, #728]	; (8011a0c <HAL_RCC_OscConfig+0x31c>)
 8011734:	400a      	ands	r2, r1
 8011736:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011738:	f7fe fbba 	bl	800feb0 <HAL_GetTick>
 801173c:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801173e:	4bb1      	ldr	r3, [pc, #708]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	039b      	lsls	r3, r3, #14
 8011744:	d536      	bpl.n	80117b4 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011746:	f7fe fbb3 	bl	800feb0 <HAL_GetTick>
 801174a:	1b40      	subs	r0, r0, r5
 801174c:	2864      	cmp	r0, #100	; 0x64
 801174e:	d9f6      	bls.n	801173e <HAL_RCC_OscConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8011750:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011752:	b003      	add	sp, #12
 8011754:	bd30      	pop	{r4, r5, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011756:	4bab      	ldr	r3, [pc, #684]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	039b      	lsls	r3, r3, #14
 801175c:	d503      	bpl.n	8011766 <HAL_RCC_OscConfig+0x76>
 801175e:	6863      	ldr	r3, [r4, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d100      	bne.n	8011766 <HAL_RCC_OscConfig+0x76>
 8011764:	e256      	b.n	8011c14 <HAL_RCC_OscConfig+0x524>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011766:	6823      	ldr	r3, [r4, #0]
 8011768:	079b      	lsls	r3, r3, #30
 801176a:	d400      	bmi.n	801176e <HAL_RCC_OscConfig+0x7e>
 801176c:	e087      	b.n	801187e <HAL_RCC_OscConfig+0x18e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801176e:	4ba5      	ldr	r3, [pc, #660]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	220c      	movs	r2, #12
 8011774:	421a      	tst	r2, r3
 8011776:	d072      	beq.n	801185e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8011778:	4ba2      	ldr	r3, [pc, #648]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801177a:	685a      	ldr	r2, [r3, #4]
 801177c:	230c      	movs	r3, #12
 801177e:	4013      	ands	r3, r2
 8011780:	2b08      	cmp	r3, #8
 8011782:	d063      	beq.n	801184c <HAL_RCC_OscConfig+0x15c>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8011784:	68e3      	ldr	r3, [r4, #12]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d100      	bne.n	801178c <HAL_RCC_OscConfig+0x9c>
 801178a:	e09a      	b.n	80118c2 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_HSI_ENABLE();
 801178c:	4a9d      	ldr	r2, [pc, #628]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801178e:	6813      	ldr	r3, [r2, #0]
 8011790:	2101      	movs	r1, #1
 8011792:	430b      	orrs	r3, r1
 8011794:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011796:	f7fe fb8b 	bl	800feb0 <HAL_GetTick>
 801179a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801179c:	4b99      	ldr	r3, [pc, #612]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	079b      	lsls	r3, r3, #30
 80117a2:	d500      	bpl.n	80117a6 <HAL_RCC_OscConfig+0xb6>
 80117a4:	e084      	b.n	80118b0 <HAL_RCC_OscConfig+0x1c0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80117a6:	f7fe fb83 	bl	800feb0 <HAL_GetTick>
 80117aa:	1b40      	subs	r0, r0, r5
 80117ac:	2864      	cmp	r0, #100	; 0x64
 80117ae:	d9f5      	bls.n	801179c <HAL_RCC_OscConfig+0xac>
            return HAL_TIMEOUT;
 80117b0:	2003      	movs	r0, #3
 80117b2:	e7ce      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80117b4:	6863      	ldr	r3, [r4, #4]
 80117b6:	2b01      	cmp	r3, #1
 80117b8:	d00b      	beq.n	80117d2 <HAL_RCC_OscConfig+0xe2>
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d120      	bne.n	8011800 <HAL_RCC_OscConfig+0x110>
 80117be:	4b91      	ldr	r3, [pc, #580]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	4991      	ldr	r1, [pc, #580]	; (8011a08 <HAL_RCC_OscConfig+0x318>)
 80117c4:	400a      	ands	r2, r1
 80117c6:	601a      	str	r2, [r3, #0]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	4990      	ldr	r1, [pc, #576]	; (8011a0c <HAL_RCC_OscConfig+0x31c>)
 80117cc:	400a      	ands	r2, r1
 80117ce:	601a      	str	r2, [r3, #0]
 80117d0:	e005      	b.n	80117de <HAL_RCC_OscConfig+0xee>
 80117d2:	4a8c      	ldr	r2, [pc, #560]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80117d4:	6811      	ldr	r1, [r2, #0]
 80117d6:	2380      	movs	r3, #128	; 0x80
 80117d8:	025b      	lsls	r3, r3, #9
 80117da:	430b      	orrs	r3, r1
 80117dc:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80117de:	6863      	ldr	r3, [r4, #4]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d025      	beq.n	8011830 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
 80117e4:	f7fe fb64 	bl	800feb0 <HAL_GetTick>
 80117e8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117ea:	4b86      	ldr	r3, [pc, #536]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	039b      	lsls	r3, r3, #14
 80117f0:	d4b9      	bmi.n	8011766 <HAL_RCC_OscConfig+0x76>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117f2:	f7fe fb5d 	bl	800feb0 <HAL_GetTick>
 80117f6:	1b40      	subs	r0, r0, r5
 80117f8:	2864      	cmp	r0, #100	; 0x64
 80117fa:	d9f6      	bls.n	80117ea <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80117fc:	2003      	movs	r0, #3
 80117fe:	e7a8      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011800:	2b05      	cmp	r3, #5
 8011802:	d009      	beq.n	8011818 <HAL_RCC_OscConfig+0x128>
 8011804:	4b7f      	ldr	r3, [pc, #508]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	497f      	ldr	r1, [pc, #508]	; (8011a08 <HAL_RCC_OscConfig+0x318>)
 801180a:	400a      	ands	r2, r1
 801180c:	601a      	str	r2, [r3, #0]
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	497e      	ldr	r1, [pc, #504]	; (8011a0c <HAL_RCC_OscConfig+0x31c>)
 8011812:	400a      	ands	r2, r1
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	e7e2      	b.n	80117de <HAL_RCC_OscConfig+0xee>
 8011818:	4b7a      	ldr	r3, [pc, #488]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801181a:	6819      	ldr	r1, [r3, #0]
 801181c:	2280      	movs	r2, #128	; 0x80
 801181e:	02d2      	lsls	r2, r2, #11
 8011820:	430a      	orrs	r2, r1
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	6819      	ldr	r1, [r3, #0]
 8011826:	2280      	movs	r2, #128	; 0x80
 8011828:	0252      	lsls	r2, r2, #9
 801182a:	430a      	orrs	r2, r1
 801182c:	601a      	str	r2, [r3, #0]
 801182e:	e7d6      	b.n	80117de <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8011830:	f7fe fb3e 	bl	800feb0 <HAL_GetTick>
 8011834:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011836:	4b73      	ldr	r3, [pc, #460]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	039b      	lsls	r3, r3, #14
 801183c:	d593      	bpl.n	8011766 <HAL_RCC_OscConfig+0x76>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801183e:	f7fe fb37 	bl	800feb0 <HAL_GetTick>
 8011842:	1b40      	subs	r0, r0, r5
 8011844:	2864      	cmp	r0, #100	; 0x64
 8011846:	d9f6      	bls.n	8011836 <HAL_RCC_OscConfig+0x146>
            return HAL_TIMEOUT;
 8011848:	2003      	movs	r0, #3
 801184a:	e782      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801184c:	4b6d      	ldr	r3, [pc, #436]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	22c0      	movs	r2, #192	; 0xc0
 8011852:	0252      	lsls	r2, r2, #9
 8011854:	4013      	ands	r3, r2
 8011856:	2280      	movs	r2, #128	; 0x80
 8011858:	0212      	lsls	r2, r2, #8
 801185a:	4293      	cmp	r3, r2
 801185c:	d192      	bne.n	8011784 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801185e:	4b69      	ldr	r3, [pc, #420]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	079b      	lsls	r3, r3, #30
 8011864:	d503      	bpl.n	801186e <HAL_RCC_OscConfig+0x17e>
 8011866:	68e3      	ldr	r3, [r4, #12]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d000      	beq.n	801186e <HAL_RCC_OscConfig+0x17e>
 801186c:	e1d4      	b.n	8011c18 <HAL_RCC_OscConfig+0x528>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801186e:	4965      	ldr	r1, [pc, #404]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011870:	680b      	ldr	r3, [r1, #0]
 8011872:	22f8      	movs	r2, #248	; 0xf8
 8011874:	4393      	bics	r3, r2
 8011876:	6922      	ldr	r2, [r4, #16]
 8011878:	00d2      	lsls	r2, r2, #3
 801187a:	4313      	orrs	r3, r2
 801187c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801187e:	6823      	ldr	r3, [r4, #0]
 8011880:	071b      	lsls	r3, r3, #28
 8011882:	d544      	bpl.n	801190e <HAL_RCC_OscConfig+0x21e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011884:	6a23      	ldr	r3, [r4, #32]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d02e      	beq.n	80118e8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 801188a:	4a5e      	ldr	r2, [pc, #376]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801188c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801188e:	2101      	movs	r1, #1
 8011890:	430b      	orrs	r3, r1
 8011892:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8011894:	f7fe fb0c 	bl	800feb0 <HAL_GetTick>
 8011898:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801189a:	4b5a      	ldr	r3, [pc, #360]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189e:	079b      	lsls	r3, r3, #30
 80118a0:	d435      	bmi.n	801190e <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80118a2:	f7fe fb05 	bl	800feb0 <HAL_GetTick>
 80118a6:	1b40      	subs	r0, r0, r5
 80118a8:	2864      	cmp	r0, #100	; 0x64
 80118aa:	d9f6      	bls.n	801189a <HAL_RCC_OscConfig+0x1aa>
          return HAL_TIMEOUT;
 80118ac:	2003      	movs	r0, #3
 80118ae:	e750      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80118b0:	4954      	ldr	r1, [pc, #336]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80118b2:	680b      	ldr	r3, [r1, #0]
 80118b4:	22f8      	movs	r2, #248	; 0xf8
 80118b6:	4393      	bics	r3, r2
 80118b8:	6922      	ldr	r2, [r4, #16]
 80118ba:	00d2      	lsls	r2, r2, #3
 80118bc:	4313      	orrs	r3, r2
 80118be:	600b      	str	r3, [r1, #0]
 80118c0:	e7dd      	b.n	801187e <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_HSI_DISABLE();
 80118c2:	4a50      	ldr	r2, [pc, #320]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80118c4:	6813      	ldr	r3, [r2, #0]
 80118c6:	2101      	movs	r1, #1
 80118c8:	438b      	bics	r3, r1
 80118ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80118cc:	f7fe faf0 	bl	800feb0 <HAL_GetTick>
 80118d0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80118d2:	4b4c      	ldr	r3, [pc, #304]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	079b      	lsls	r3, r3, #30
 80118d8:	d5d1      	bpl.n	801187e <HAL_RCC_OscConfig+0x18e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80118da:	f7fe fae9 	bl	800feb0 <HAL_GetTick>
 80118de:	1b40      	subs	r0, r0, r5
 80118e0:	2864      	cmp	r0, #100	; 0x64
 80118e2:	d9f6      	bls.n	80118d2 <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 80118e4:	2003      	movs	r0, #3
 80118e6:	e734      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSI_DISABLE();
 80118e8:	4a46      	ldr	r2, [pc, #280]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80118ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80118ec:	2101      	movs	r1, #1
 80118ee:	438b      	bics	r3, r1
 80118f0:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80118f2:	f7fe fadd 	bl	800feb0 <HAL_GetTick>
 80118f6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80118f8:	4b42      	ldr	r3, [pc, #264]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80118fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118fc:	079b      	lsls	r3, r3, #30
 80118fe:	d506      	bpl.n	801190e <HAL_RCC_OscConfig+0x21e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011900:	f7fe fad6 	bl	800feb0 <HAL_GetTick>
 8011904:	1b40      	subs	r0, r0, r5
 8011906:	2864      	cmp	r0, #100	; 0x64
 8011908:	d9f6      	bls.n	80118f8 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 801190a:	2003      	movs	r0, #3
 801190c:	e721      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801190e:	6823      	ldr	r3, [r4, #0]
 8011910:	075b      	lsls	r3, r3, #29
 8011912:	d440      	bmi.n	8011996 <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	06db      	lsls	r3, r3, #27
 8011918:	d512      	bpl.n	8011940 <HAL_RCC_OscConfig+0x250>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 801191a:	6963      	ldr	r3, [r4, #20]
 801191c:	2b01      	cmp	r3, #1
 801191e:	d100      	bne.n	8011922 <HAL_RCC_OscConfig+0x232>
 8011920:	e0c7      	b.n	8011ab2 <HAL_RCC_OscConfig+0x3c2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8011922:	3305      	adds	r3, #5
 8011924:	d000      	beq.n	8011928 <HAL_RCC_OscConfig+0x238>
 8011926:	e0e4      	b.n	8011af2 <HAL_RCC_OscConfig+0x402>
      __HAL_RCC_HSI14ADC_ENABLE();
 8011928:	4a36      	ldr	r2, [pc, #216]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801192a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801192c:	2104      	movs	r1, #4
 801192e:	438b      	bics	r3, r1
 8011930:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011932:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011934:	31f4      	adds	r1, #244	; 0xf4
 8011936:	438b      	bics	r3, r1
 8011938:	69a1      	ldr	r1, [r4, #24]
 801193a:	00c9      	lsls	r1, r1, #3
 801193c:	430b      	orrs	r3, r1
 801193e:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011940:	6823      	ldr	r3, [r4, #0]
 8011942:	069b      	lsls	r3, r3, #26
 8011944:	d400      	bmi.n	8011948 <HAL_RCC_OscConfig+0x258>
 8011946:	e0fb      	b.n	8011b40 <HAL_RCC_OscConfig+0x450>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8011948:	4b2e      	ldr	r3, [pc, #184]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	230c      	movs	r3, #12
 801194e:	4013      	ands	r3, r2
 8011950:	2b0c      	cmp	r3, #12
 8011952:	d100      	bne.n	8011956 <HAL_RCC_OscConfig+0x266>
 8011954:	e0ed      	b.n	8011b32 <HAL_RCC_OscConfig+0x442>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011956:	4b2b      	ldr	r3, [pc, #172]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011958:	685a      	ldr	r2, [r3, #4]
 801195a:	230c      	movs	r3, #12
 801195c:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801195e:	2b08      	cmp	r3, #8
 8011960:	d100      	bne.n	8011964 <HAL_RCC_OscConfig+0x274>
 8011962:	e0de      	b.n	8011b22 <HAL_RCC_OscConfig+0x432>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011964:	69e3      	ldr	r3, [r4, #28]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d100      	bne.n	801196c <HAL_RCC_OscConfig+0x27c>
 801196a:	e107      	b.n	8011b7c <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_HSI48_ENABLE();
 801196c:	4a25      	ldr	r2, [pc, #148]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 801196e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011970:	2380      	movs	r3, #128	; 0x80
 8011972:	025b      	lsls	r3, r3, #9
 8011974:	430b      	orrs	r3, r1
 8011976:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011978:	f7fe fa9a 	bl	800feb0 <HAL_GetTick>
 801197c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801197e:	4b21      	ldr	r3, [pc, #132]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011982:	03db      	lsls	r3, r3, #15
 8011984:	d500      	bpl.n	8011988 <HAL_RCC_OscConfig+0x298>
 8011986:	e0db      	b.n	8011b40 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011988:	f7fe fa92 	bl	800feb0 <HAL_GetTick>
 801198c:	1b40      	subs	r0, r0, r5
 801198e:	2864      	cmp	r0, #100	; 0x64
 8011990:	d9f5      	bls.n	801197e <HAL_RCC_OscConfig+0x28e>
            return HAL_TIMEOUT;
 8011992:	2003      	movs	r0, #3
 8011994:	e6dd      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_PWR_CLK_ENABLE();
 8011996:	4a1b      	ldr	r2, [pc, #108]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 8011998:	69d1      	ldr	r1, [r2, #28]
 801199a:	2080      	movs	r0, #128	; 0x80
 801199c:	0540      	lsls	r0, r0, #21
 801199e:	4301      	orrs	r1, r0
 80119a0:	61d1      	str	r1, [r2, #28]
 80119a2:	69d3      	ldr	r3, [r2, #28]
 80119a4:	4003      	ands	r3, r0
 80119a6:	9301      	str	r3, [sp, #4]
 80119a8:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80119aa:	4a19      	ldr	r2, [pc, #100]	; (8011a10 <HAL_RCC_OscConfig+0x320>)
 80119ac:	6811      	ldr	r1, [r2, #0]
 80119ae:	2380      	movs	r3, #128	; 0x80
 80119b0:	005b      	lsls	r3, r3, #1
 80119b2:	430b      	orrs	r3, r1
 80119b4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80119b6:	f7fe fa7b 	bl	800feb0 <HAL_GetTick>
 80119ba:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80119bc:	4b14      	ldr	r3, [pc, #80]	; (8011a10 <HAL_RCC_OscConfig+0x320>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	05db      	lsls	r3, r3, #23
 80119c2:	d406      	bmi.n	80119d2 <HAL_RCC_OscConfig+0x2e2>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80119c4:	f7fe fa74 	bl	800feb0 <HAL_GetTick>
 80119c8:	1b40      	subs	r0, r0, r5
 80119ca:	2864      	cmp	r0, #100	; 0x64
 80119cc:	d9f6      	bls.n	80119bc <HAL_RCC_OscConfig+0x2cc>
        return HAL_TIMEOUT;
 80119ce:	2003      	movs	r0, #3
 80119d0:	e6bf      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80119d2:	4b0c      	ldr	r3, [pc, #48]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80119d4:	6a1a      	ldr	r2, [r3, #32]
 80119d6:	2101      	movs	r1, #1
 80119d8:	438a      	bics	r2, r1
 80119da:	621a      	str	r2, [r3, #32]
 80119dc:	6a1a      	ldr	r2, [r3, #32]
 80119de:	3103      	adds	r1, #3
 80119e0:	438a      	bics	r2, r1
 80119e2:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80119e4:	f7fe fa64 	bl	800feb0 <HAL_GetTick>
 80119e8:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80119ea:	4b06      	ldr	r3, [pc, #24]	; (8011a04 <HAL_RCC_OscConfig+0x314>)
 80119ec:	6a1b      	ldr	r3, [r3, #32]
 80119ee:	079b      	lsls	r3, r3, #30
 80119f0:	d512      	bpl.n	8011a18 <HAL_RCC_OscConfig+0x328>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80119f2:	f7fe fa5d 	bl	800feb0 <HAL_GetTick>
 80119f6:	1b40      	subs	r0, r0, r5
 80119f8:	4b06      	ldr	r3, [pc, #24]	; (8011a14 <HAL_RCC_OscConfig+0x324>)
 80119fa:	4298      	cmp	r0, r3
 80119fc:	d9f5      	bls.n	80119ea <HAL_RCC_OscConfig+0x2fa>
        return HAL_TIMEOUT;
 80119fe:	2003      	movs	r0, #3
 8011a00:	e6a7      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
 8011a02:	46c0      	nop			; (mov r8, r8)
 8011a04:	40021000 	.word	0x40021000
 8011a08:	fffeffff 	.word	0xfffeffff
 8011a0c:	fffbffff 	.word	0xfffbffff
 8011a10:	40007000 	.word	0x40007000
 8011a14:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011a18:	68a3      	ldr	r3, [r4, #8]
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d00b      	beq.n	8011a36 <HAL_RCC_OscConfig+0x346>
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d121      	bne.n	8011a66 <HAL_RCC_OscConfig+0x376>
 8011a22:	4b81      	ldr	r3, [pc, #516]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011a24:	6a1a      	ldr	r2, [r3, #32]
 8011a26:	2101      	movs	r1, #1
 8011a28:	438a      	bics	r2, r1
 8011a2a:	621a      	str	r2, [r3, #32]
 8011a2c:	6a1a      	ldr	r2, [r3, #32]
 8011a2e:	3103      	adds	r1, #3
 8011a30:	438a      	bics	r2, r1
 8011a32:	621a      	str	r2, [r3, #32]
 8011a34:	e004      	b.n	8011a40 <HAL_RCC_OscConfig+0x350>
 8011a36:	4a7c      	ldr	r2, [pc, #496]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011a38:	6a13      	ldr	r3, [r2, #32]
 8011a3a:	2101      	movs	r1, #1
 8011a3c:	430b      	orrs	r3, r1
 8011a3e:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011a40:	68a3      	ldr	r3, [r4, #8]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d025      	beq.n	8011a92 <HAL_RCC_OscConfig+0x3a2>
      tickstart = HAL_GetTick();
 8011a46:	f7fe fa33 	bl	800feb0 <HAL_GetTick>
 8011a4a:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a4c:	4b76      	ldr	r3, [pc, #472]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011a4e:	6a1b      	ldr	r3, [r3, #32]
 8011a50:	079b      	lsls	r3, r3, #30
 8011a52:	d500      	bpl.n	8011a56 <HAL_RCC_OscConfig+0x366>
 8011a54:	e75e      	b.n	8011914 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a56:	f7fe fa2b 	bl	800feb0 <HAL_GetTick>
 8011a5a:	1b40      	subs	r0, r0, r5
 8011a5c:	4b73      	ldr	r3, [pc, #460]	; (8011c2c <HAL_RCC_OscConfig+0x53c>)
 8011a5e:	4298      	cmp	r0, r3
 8011a60:	d9f4      	bls.n	8011a4c <HAL_RCC_OscConfig+0x35c>
          return HAL_TIMEOUT;
 8011a62:	2003      	movs	r0, #3
 8011a64:	e675      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011a66:	2b05      	cmp	r3, #5
 8011a68:	d009      	beq.n	8011a7e <HAL_RCC_OscConfig+0x38e>
 8011a6a:	4b6f      	ldr	r3, [pc, #444]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011a6c:	6a1a      	ldr	r2, [r3, #32]
 8011a6e:	2101      	movs	r1, #1
 8011a70:	438a      	bics	r2, r1
 8011a72:	621a      	str	r2, [r3, #32]
 8011a74:	6a1a      	ldr	r2, [r3, #32]
 8011a76:	3103      	adds	r1, #3
 8011a78:	438a      	bics	r2, r1
 8011a7a:	621a      	str	r2, [r3, #32]
 8011a7c:	e7e0      	b.n	8011a40 <HAL_RCC_OscConfig+0x350>
 8011a7e:	4b6a      	ldr	r3, [pc, #424]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011a80:	6a1a      	ldr	r2, [r3, #32]
 8011a82:	2104      	movs	r1, #4
 8011a84:	430a      	orrs	r2, r1
 8011a86:	621a      	str	r2, [r3, #32]
 8011a88:	6a1a      	ldr	r2, [r3, #32]
 8011a8a:	3903      	subs	r1, #3
 8011a8c:	430a      	orrs	r2, r1
 8011a8e:	621a      	str	r2, [r3, #32]
 8011a90:	e7d6      	b.n	8011a40 <HAL_RCC_OscConfig+0x350>
      tickstart = HAL_GetTick();
 8011a92:	f7fe fa0d 	bl	800feb0 <HAL_GetTick>
 8011a96:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a98:	4b63      	ldr	r3, [pc, #396]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011a9a:	6a1b      	ldr	r3, [r3, #32]
 8011a9c:	079b      	lsls	r3, r3, #30
 8011a9e:	d400      	bmi.n	8011aa2 <HAL_RCC_OscConfig+0x3b2>
 8011aa0:	e738      	b.n	8011914 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011aa2:	f7fe fa05 	bl	800feb0 <HAL_GetTick>
 8011aa6:	1b40      	subs	r0, r0, r5
 8011aa8:	4b60      	ldr	r3, [pc, #384]	; (8011c2c <HAL_RCC_OscConfig+0x53c>)
 8011aaa:	4298      	cmp	r0, r3
 8011aac:	d9f4      	bls.n	8011a98 <HAL_RCC_OscConfig+0x3a8>
          return HAL_TIMEOUT;
 8011aae:	2003      	movs	r0, #3
 8011ab0:	e64f      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011ab2:	4b5d      	ldr	r3, [pc, #372]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ab6:	2104      	movs	r1, #4
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8011abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011abe:	3903      	subs	r1, #3
 8011ac0:	430a      	orrs	r2, r1
 8011ac2:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011ac4:	f7fe f9f4 	bl	800feb0 <HAL_GetTick>
 8011ac8:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8011aca:	4b57      	ldr	r3, [pc, #348]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ace:	079b      	lsls	r3, r3, #30
 8011ad0:	d406      	bmi.n	8011ae0 <HAL_RCC_OscConfig+0x3f0>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011ad2:	f7fe f9ed 	bl	800feb0 <HAL_GetTick>
 8011ad6:	1b40      	subs	r0, r0, r5
 8011ad8:	2864      	cmp	r0, #100	; 0x64
 8011ada:	d9f6      	bls.n	8011aca <HAL_RCC_OscConfig+0x3da>
          return HAL_TIMEOUT;
 8011adc:	2003      	movs	r0, #3
 8011ade:	e638      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8011ae0:	4951      	ldr	r1, [pc, #324]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011ae2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8011ae4:	22f8      	movs	r2, #248	; 0xf8
 8011ae6:	4393      	bics	r3, r2
 8011ae8:	69a2      	ldr	r2, [r4, #24]
 8011aea:	00d2      	lsls	r2, r2, #3
 8011aec:	4313      	orrs	r3, r2
 8011aee:	634b      	str	r3, [r1, #52]	; 0x34
 8011af0:	e726      	b.n	8011940 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_HSI14ADC_DISABLE();
 8011af2:	4b4d      	ldr	r3, [pc, #308]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011af6:	2104      	movs	r1, #4
 8011af8:	430a      	orrs	r2, r1
 8011afa:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8011afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011afe:	3903      	subs	r1, #3
 8011b00:	438a      	bics	r2, r1
 8011b02:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8011b04:	f7fe f9d4 	bl	800feb0 <HAL_GetTick>
 8011b08:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8011b0a:	4b47      	ldr	r3, [pc, #284]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b0e:	079b      	lsls	r3, r3, #30
 8011b10:	d400      	bmi.n	8011b14 <HAL_RCC_OscConfig+0x424>
 8011b12:	e715      	b.n	8011940 <HAL_RCC_OscConfig+0x250>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8011b14:	f7fe f9cc 	bl	800feb0 <HAL_GetTick>
 8011b18:	1b40      	subs	r0, r0, r5
 8011b1a:	2864      	cmp	r0, #100	; 0x64
 8011b1c:	d9f5      	bls.n	8011b0a <HAL_RCC_OscConfig+0x41a>
          return HAL_TIMEOUT;
 8011b1e:	2003      	movs	r0, #3
 8011b20:	e617      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8011b22:	4b41      	ldr	r3, [pc, #260]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	22c0      	movs	r2, #192	; 0xc0
 8011b28:	0252      	lsls	r2, r2, #9
 8011b2a:	4013      	ands	r3, r2
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	d000      	beq.n	8011b32 <HAL_RCC_OscConfig+0x442>
 8011b30:	e718      	b.n	8011964 <HAL_RCC_OscConfig+0x274>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8011b32:	4b3d      	ldr	r3, [pc, #244]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b36:	03db      	lsls	r3, r3, #15
 8011b38:	d502      	bpl.n	8011b40 <HAL_RCC_OscConfig+0x450>
 8011b3a:	69e3      	ldr	r3, [r4, #28]
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d16d      	bne.n	8011c1c <HAL_RCC_OscConfig+0x52c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d06c      	beq.n	8011c20 <HAL_RCC_OscConfig+0x530>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011b46:	4a38      	ldr	r2, [pc, #224]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b48:	6851      	ldr	r1, [r2, #4]
 8011b4a:	220c      	movs	r2, #12
 8011b4c:	400a      	ands	r2, r1
 8011b4e:	2a08      	cmp	r2, #8
 8011b50:	d068      	beq.n	8011c24 <HAL_RCC_OscConfig+0x534>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011b52:	2b02      	cmp	r3, #2
 8011b54:	d025      	beq.n	8011ba2 <HAL_RCC_OscConfig+0x4b2>
        __HAL_RCC_PLL_DISABLE();
 8011b56:	4a34      	ldr	r2, [pc, #208]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b58:	6813      	ldr	r3, [r2, #0]
 8011b5a:	4935      	ldr	r1, [pc, #212]	; (8011c30 <HAL_RCC_OscConfig+0x540>)
 8011b5c:	400b      	ands	r3, r1
 8011b5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011b60:	f7fe f9a6 	bl	800feb0 <HAL_GetTick>
 8011b64:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011b66:	4b30      	ldr	r3, [pc, #192]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	019b      	lsls	r3, r3, #6
 8011b6c:	d550      	bpl.n	8011c10 <HAL_RCC_OscConfig+0x520>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b6e:	f7fe f99f 	bl	800feb0 <HAL_GetTick>
 8011b72:	1b00      	subs	r0, r0, r4
 8011b74:	2864      	cmp	r0, #100	; 0x64
 8011b76:	d9f6      	bls.n	8011b66 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 8011b78:	2003      	movs	r0, #3
 8011b7a:	e5ea      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_HSI48_DISABLE();
 8011b7c:	4a2a      	ldr	r2, [pc, #168]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b7e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8011b80:	492c      	ldr	r1, [pc, #176]	; (8011c34 <HAL_RCC_OscConfig+0x544>)
 8011b82:	400b      	ands	r3, r1
 8011b84:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8011b86:	f7fe f993 	bl	800feb0 <HAL_GetTick>
 8011b8a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8011b8c:	4b26      	ldr	r3, [pc, #152]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b90:	03db      	lsls	r3, r3, #15
 8011b92:	d5d5      	bpl.n	8011b40 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011b94:	f7fe f98c 	bl	800feb0 <HAL_GetTick>
 8011b98:	1b40      	subs	r0, r0, r5
 8011b9a:	2864      	cmp	r0, #100	; 0x64
 8011b9c:	d9f6      	bls.n	8011b8c <HAL_RCC_OscConfig+0x49c>
            return HAL_TIMEOUT;
 8011b9e:	2003      	movs	r0, #3
 8011ba0:	e5d7      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_DISABLE();
 8011ba2:	4a21      	ldr	r2, [pc, #132]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011ba4:	6813      	ldr	r3, [r2, #0]
 8011ba6:	4922      	ldr	r1, [pc, #136]	; (8011c30 <HAL_RCC_OscConfig+0x540>)
 8011ba8:	400b      	ands	r3, r1
 8011baa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8011bac:	f7fe f980 	bl	800feb0 <HAL_GetTick>
 8011bb0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8011bb2:	4b1d      	ldr	r3, [pc, #116]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	019b      	lsls	r3, r3, #6
 8011bb8:	d506      	bpl.n	8011bc8 <HAL_RCC_OscConfig+0x4d8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011bba:	f7fe f979 	bl	800feb0 <HAL_GetTick>
 8011bbe:	1b40      	subs	r0, r0, r5
 8011bc0:	2864      	cmp	r0, #100	; 0x64
 8011bc2:	d9f6      	bls.n	8011bb2 <HAL_RCC_OscConfig+0x4c2>
            return HAL_TIMEOUT;
 8011bc4:	2003      	movs	r0, #3
 8011bc6:	e5c4      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011bc8:	4b17      	ldr	r3, [pc, #92]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bcc:	210f      	movs	r1, #15
 8011bce:	438a      	bics	r2, r1
 8011bd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011bd2:	430a      	orrs	r2, r1
 8011bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8011bd6:	685a      	ldr	r2, [r3, #4]
 8011bd8:	4917      	ldr	r1, [pc, #92]	; (8011c38 <HAL_RCC_OscConfig+0x548>)
 8011bda:	400a      	ands	r2, r1
 8011bdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011bde:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011be0:	4301      	orrs	r1, r0
 8011be2:	430a      	orrs	r2, r1
 8011be4:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8011be6:	6819      	ldr	r1, [r3, #0]
 8011be8:	2280      	movs	r2, #128	; 0x80
 8011bea:	0452      	lsls	r2, r2, #17
 8011bec:	430a      	orrs	r2, r1
 8011bee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8011bf0:	f7fe f95e 	bl	800feb0 <HAL_GetTick>
 8011bf4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8011bf6:	4b0c      	ldr	r3, [pc, #48]	; (8011c28 <HAL_RCC_OscConfig+0x538>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	019b      	lsls	r3, r3, #6
 8011bfc:	d406      	bmi.n	8011c0c <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011bfe:	f7fe f957 	bl	800feb0 <HAL_GetTick>
 8011c02:	1b00      	subs	r0, r0, r4
 8011c04:	2864      	cmp	r0, #100	; 0x64
 8011c06:	d9f6      	bls.n	8011bf6 <HAL_RCC_OscConfig+0x506>
            return HAL_TIMEOUT;
 8011c08:	2003      	movs	r0, #3
 8011c0a:	e5a2      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011c0c:	2000      	movs	r0, #0
 8011c0e:	e5a0      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
 8011c10:	2000      	movs	r0, #0
 8011c12:	e59e      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011c14:	2001      	movs	r0, #1
 8011c16:	e59c      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011c18:	2001      	movs	r0, #1
 8011c1a:	e59a      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	e598      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
  return HAL_OK;
 8011c20:	2000      	movs	r0, #0
 8011c22:	e596      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
      return HAL_ERROR;
 8011c24:	2001      	movs	r0, #1
 8011c26:	e594      	b.n	8011752 <HAL_RCC_OscConfig+0x62>
 8011c28:	40021000 	.word	0x40021000
 8011c2c:	00001388 	.word	0x00001388
 8011c30:	feffffff 	.word	0xfeffffff
 8011c34:	fffeffff 	.word	0xfffeffff
 8011c38:	ffc27fff 	.word	0xffc27fff

08011c3c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011c3c:	b570      	push	{r4, r5, r6, lr}
 8011c3e:	0004      	movs	r4, r0
 8011c40:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8011c42:	4b8e      	ldr	r3, [pc, #568]	; (8011e7c <HAL_RCC_ClockConfig+0x240>)
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	2301      	movs	r3, #1
 8011c48:	4013      	ands	r3, r2
 8011c4a:	428b      	cmp	r3, r1
 8011c4c:	d300      	bcc.n	8011c50 <HAL_RCC_ClockConfig+0x14>
 8011c4e:	e081      	b.n	8011d54 <HAL_RCC_ClockConfig+0x118>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c50:	498a      	ldr	r1, [pc, #552]	; (8011e7c <HAL_RCC_ClockConfig+0x240>)
 8011c52:	680b      	ldr	r3, [r1, #0]
 8011c54:	2201      	movs	r2, #1
 8011c56:	4393      	bics	r3, r2
 8011c58:	432b      	orrs	r3, r5
 8011c5a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011c5c:	680b      	ldr	r3, [r1, #0]
 8011c5e:	401a      	ands	r2, r3
 8011c60:	42aa      	cmp	r2, r5
 8011c62:	d000      	beq.n	8011c66 <HAL_RCC_ClockConfig+0x2a>
 8011c64:	e101      	b.n	8011e6a <HAL_RCC_ClockConfig+0x22e>
    {
      return HAL_ERROR;
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c66:	6803      	ldr	r3, [r0, #0]
 8011c68:	079b      	lsls	r3, r3, #30
 8011c6a:	d506      	bpl.n	8011c7a <HAL_RCC_ClockConfig+0x3e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c6c:	4a84      	ldr	r2, [pc, #528]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011c6e:	6853      	ldr	r3, [r2, #4]
 8011c70:	21f0      	movs	r1, #240	; 0xf0
 8011c72:	438b      	bics	r3, r1
 8011c74:	6881      	ldr	r1, [r0, #8]
 8011c76:	430b      	orrs	r3, r1
 8011c78:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	07db      	lsls	r3, r3, #31
 8011c7e:	d400      	bmi.n	8011c82 <HAL_RCC_ClockConfig+0x46>
 8011c80:	e0e4      	b.n	8011e4c <HAL_RCC_ClockConfig+0x210>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c82:	6863      	ldr	r3, [r4, #4]
 8011c84:	2b01      	cmp	r3, #1
 8011c86:	d009      	beq.n	8011c9c <HAL_RCC_ClockConfig+0x60>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011c88:	2b02      	cmp	r3, #2
 8011c8a:	d02a      	beq.n	8011ce2 <HAL_RCC_ClockConfig+0xa6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011c8c:	2b03      	cmp	r3, #3
 8011c8e:	d02e      	beq.n	8011cee <HAL_RCC_ClockConfig+0xb2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011c90:	4a7b      	ldr	r2, [pc, #492]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011c92:	6812      	ldr	r2, [r2, #0]
 8011c94:	0792      	lsls	r2, r2, #30
 8011c96:	d406      	bmi.n	8011ca6 <HAL_RCC_ClockConfig+0x6a>
        {
          return HAL_ERROR;
 8011c98:	2001      	movs	r0, #1
 8011c9a:	e0e5      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c9c:	4a78      	ldr	r2, [pc, #480]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011c9e:	6812      	ldr	r2, [r2, #0]
 8011ca0:	0392      	lsls	r2, r2, #14
 8011ca2:	d400      	bmi.n	8011ca6 <HAL_RCC_ClockConfig+0x6a>
 8011ca4:	e0e3      	b.n	8011e6e <HAL_RCC_ClockConfig+0x232>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011ca6:	4976      	ldr	r1, [pc, #472]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011ca8:	684a      	ldr	r2, [r1, #4]
 8011caa:	2003      	movs	r0, #3
 8011cac:	4382      	bics	r2, r0
 8011cae:	4313      	orrs	r3, r2
 8011cb0:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011cb2:	f7fe f8fd 	bl	800feb0 <HAL_GetTick>
 8011cb6:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011cb8:	6863      	ldr	r3, [r4, #4]
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	d01d      	beq.n	8011cfa <HAL_RCC_ClockConfig+0xbe>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011cbe:	2b02      	cmp	r3, #2
 8011cc0:	d02a      	beq.n	8011d18 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d037      	beq.n	8011d36 <HAL_RCC_ClockConfig+0xfa>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011cc6:	4b6e      	ldr	r3, [pc, #440]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	220c      	movs	r2, #12
 8011ccc:	421a      	tst	r2, r3
 8011cce:	d100      	bne.n	8011cd2 <HAL_RCC_ClockConfig+0x96>
 8011cd0:	e0bc      	b.n	8011e4c <HAL_RCC_ClockConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cd2:	f7fe f8ed 	bl	800feb0 <HAL_GetTick>
 8011cd6:	1b40      	subs	r0, r0, r5
 8011cd8:	4b6a      	ldr	r3, [pc, #424]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011cda:	4298      	cmp	r0, r3
 8011cdc:	d9f3      	bls.n	8011cc6 <HAL_RCC_ClockConfig+0x8a>
          {
            return HAL_TIMEOUT;
 8011cde:	2003      	movs	r0, #3
 8011ce0:	e0c2      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011ce2:	4a67      	ldr	r2, [pc, #412]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011ce4:	6812      	ldr	r2, [r2, #0]
 8011ce6:	0192      	lsls	r2, r2, #6
 8011ce8:	d4dd      	bmi.n	8011ca6 <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 8011cea:	2001      	movs	r0, #1
 8011cec:	e0bc      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011cee:	4a64      	ldr	r2, [pc, #400]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011cf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011cf2:	03d2      	lsls	r2, r2, #15
 8011cf4:	d4d7      	bmi.n	8011ca6 <HAL_RCC_ClockConfig+0x6a>
          return HAL_ERROR;
 8011cf6:	2001      	movs	r0, #1
 8011cf8:	e0b6      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011cfa:	4b61      	ldr	r3, [pc, #388]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	230c      	movs	r3, #12
 8011d00:	4013      	ands	r3, r2
 8011d02:	2b04      	cmp	r3, #4
 8011d04:	d100      	bne.n	8011d08 <HAL_RCC_ClockConfig+0xcc>
 8011d06:	e0a1      	b.n	8011e4c <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d08:	f7fe f8d2 	bl	800feb0 <HAL_GetTick>
 8011d0c:	1b40      	subs	r0, r0, r5
 8011d0e:	4a5d      	ldr	r2, [pc, #372]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011d10:	4290      	cmp	r0, r2
 8011d12:	d9f2      	bls.n	8011cfa <HAL_RCC_ClockConfig+0xbe>
            return HAL_TIMEOUT;
 8011d14:	2003      	movs	r0, #3
 8011d16:	e0a7      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d18:	4b59      	ldr	r3, [pc, #356]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011d1a:	685a      	ldr	r2, [r3, #4]
 8011d1c:	230c      	movs	r3, #12
 8011d1e:	4013      	ands	r3, r2
 8011d20:	2b08      	cmp	r3, #8
 8011d22:	d100      	bne.n	8011d26 <HAL_RCC_ClockConfig+0xea>
 8011d24:	e092      	b.n	8011e4c <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d26:	f7fe f8c3 	bl	800feb0 <HAL_GetTick>
 8011d2a:	1b40      	subs	r0, r0, r5
 8011d2c:	4b55      	ldr	r3, [pc, #340]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011d2e:	4298      	cmp	r0, r3
 8011d30:	d9f2      	bls.n	8011d18 <HAL_RCC_ClockConfig+0xdc>
            return HAL_TIMEOUT;
 8011d32:	2003      	movs	r0, #3
 8011d34:	e098      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011d36:	4b52      	ldr	r3, [pc, #328]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011d38:	685a      	ldr	r2, [r3, #4]
 8011d3a:	230c      	movs	r3, #12
 8011d3c:	4013      	ands	r3, r2
 8011d3e:	2b0c      	cmp	r3, #12
 8011d40:	d100      	bne.n	8011d44 <HAL_RCC_ClockConfig+0x108>
 8011d42:	e083      	b.n	8011e4c <HAL_RCC_ClockConfig+0x210>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011d44:	f7fe f8b4 	bl	800feb0 <HAL_GetTick>
 8011d48:	1b40      	subs	r0, r0, r5
 8011d4a:	4b4e      	ldr	r3, [pc, #312]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011d4c:	4298      	cmp	r0, r3
 8011d4e:	d9f2      	bls.n	8011d36 <HAL_RCC_ClockConfig+0xfa>
            return HAL_TIMEOUT;
 8011d50:	2003      	movs	r0, #3
 8011d52:	e089      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011d54:	6803      	ldr	r3, [r0, #0]
 8011d56:	079b      	lsls	r3, r3, #30
 8011d58:	d506      	bpl.n	8011d68 <HAL_RCC_ClockConfig+0x12c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d5a:	4a49      	ldr	r2, [pc, #292]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011d5c:	6853      	ldr	r3, [r2, #4]
 8011d5e:	21f0      	movs	r1, #240	; 0xf0
 8011d60:	438b      	bics	r3, r1
 8011d62:	6881      	ldr	r1, [r0, #8]
 8011d64:	430b      	orrs	r3, r1
 8011d66:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	07db      	lsls	r3, r3, #31
 8011d6c:	d564      	bpl.n	8011e38 <HAL_RCC_ClockConfig+0x1fc>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d6e:	6863      	ldr	r3, [r4, #4]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d009      	beq.n	8011d88 <HAL_RCC_ClockConfig+0x14c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d74:	2b02      	cmp	r3, #2
 8011d76:	d029      	beq.n	8011dcc <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011d78:	2b03      	cmp	r3, #3
 8011d7a:	d02d      	beq.n	8011dd8 <HAL_RCC_ClockConfig+0x19c>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d7c:	4a40      	ldr	r2, [pc, #256]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011d7e:	6812      	ldr	r2, [r2, #0]
 8011d80:	0792      	lsls	r2, r2, #30
 8011d82:	d406      	bmi.n	8011d92 <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_ERROR;
 8011d84:	2001      	movs	r0, #1
 8011d86:	e06f      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d88:	4a3d      	ldr	r2, [pc, #244]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011d8a:	6812      	ldr	r2, [r2, #0]
 8011d8c:	0392      	lsls	r2, r2, #14
 8011d8e:	d400      	bmi.n	8011d92 <HAL_RCC_ClockConfig+0x156>
 8011d90:	e06f      	b.n	8011e72 <HAL_RCC_ClockConfig+0x236>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011d92:	493b      	ldr	r1, [pc, #236]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011d94:	684a      	ldr	r2, [r1, #4]
 8011d96:	2003      	movs	r0, #3
 8011d98:	4382      	bics	r2, r0
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011d9e:	f7fe f887 	bl	800feb0 <HAL_GetTick>
 8011da2:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011da4:	6863      	ldr	r3, [r4, #4]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d01c      	beq.n	8011de4 <HAL_RCC_ClockConfig+0x1a8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d028      	beq.n	8011e00 <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8011dae:	2b03      	cmp	r3, #3
 8011db0:	d034      	beq.n	8011e1c <HAL_RCC_ClockConfig+0x1e0>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011db2:	4b33      	ldr	r3, [pc, #204]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	220c      	movs	r2, #12
 8011db8:	421a      	tst	r2, r3
 8011dba:	d03d      	beq.n	8011e38 <HAL_RCC_ClockConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dbc:	f7fe f878 	bl	800feb0 <HAL_GetTick>
 8011dc0:	1b80      	subs	r0, r0, r6
 8011dc2:	4b30      	ldr	r3, [pc, #192]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011dc4:	4298      	cmp	r0, r3
 8011dc6:	d9f4      	bls.n	8011db2 <HAL_RCC_ClockConfig+0x176>
          {
            return HAL_TIMEOUT;
 8011dc8:	2003      	movs	r0, #3
 8011dca:	e04d      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011dcc:	4a2c      	ldr	r2, [pc, #176]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011dce:	6812      	ldr	r2, [r2, #0]
 8011dd0:	0192      	lsls	r2, r2, #6
 8011dd2:	d4de      	bmi.n	8011d92 <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	e047      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8011dd8:	4a29      	ldr	r2, [pc, #164]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011ddc:	03d2      	lsls	r2, r2, #15
 8011dde:	d4d8      	bmi.n	8011d92 <HAL_RCC_ClockConfig+0x156>
          return HAL_ERROR;
 8011de0:	2001      	movs	r0, #1
 8011de2:	e041      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011de4:	4b26      	ldr	r3, [pc, #152]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011de6:	685a      	ldr	r2, [r3, #4]
 8011de8:	230c      	movs	r3, #12
 8011dea:	4013      	ands	r3, r2
 8011dec:	2b04      	cmp	r3, #4
 8011dee:	d023      	beq.n	8011e38 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011df0:	f7fe f85e 	bl	800feb0 <HAL_GetTick>
 8011df4:	1b80      	subs	r0, r0, r6
 8011df6:	4a23      	ldr	r2, [pc, #140]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011df8:	4290      	cmp	r0, r2
 8011dfa:	d9f3      	bls.n	8011de4 <HAL_RCC_ClockConfig+0x1a8>
            return HAL_TIMEOUT;
 8011dfc:	2003      	movs	r0, #3
 8011dfe:	e033      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011e00:	4b1f      	ldr	r3, [pc, #124]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011e02:	685a      	ldr	r2, [r3, #4]
 8011e04:	230c      	movs	r3, #12
 8011e06:	4013      	ands	r3, r2
 8011e08:	2b08      	cmp	r3, #8
 8011e0a:	d015      	beq.n	8011e38 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e0c:	f7fe f850 	bl	800feb0 <HAL_GetTick>
 8011e10:	1b80      	subs	r0, r0, r6
 8011e12:	4b1c      	ldr	r3, [pc, #112]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011e14:	4298      	cmp	r0, r3
 8011e16:	d9f3      	bls.n	8011e00 <HAL_RCC_ClockConfig+0x1c4>
            return HAL_TIMEOUT;
 8011e18:	2003      	movs	r0, #3
 8011e1a:	e025      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8011e1c:	4b18      	ldr	r3, [pc, #96]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011e1e:	685a      	ldr	r2, [r3, #4]
 8011e20:	230c      	movs	r3, #12
 8011e22:	4013      	ands	r3, r2
 8011e24:	2b0c      	cmp	r3, #12
 8011e26:	d007      	beq.n	8011e38 <HAL_RCC_ClockConfig+0x1fc>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e28:	f7fe f842 	bl	800feb0 <HAL_GetTick>
 8011e2c:	1b80      	subs	r0, r0, r6
 8011e2e:	4b15      	ldr	r3, [pc, #84]	; (8011e84 <HAL_RCC_ClockConfig+0x248>)
 8011e30:	4298      	cmp	r0, r3
 8011e32:	d9f3      	bls.n	8011e1c <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
 8011e34:	2003      	movs	r0, #3
 8011e36:	e017      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e38:	4910      	ldr	r1, [pc, #64]	; (8011e7c <HAL_RCC_ClockConfig+0x240>)
 8011e3a:	680b      	ldr	r3, [r1, #0]
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	4393      	bics	r3, r2
 8011e40:	432b      	orrs	r3, r5
 8011e42:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8011e44:	680b      	ldr	r3, [r1, #0]
 8011e46:	401a      	ands	r2, r3
 8011e48:	42aa      	cmp	r2, r5
 8011e4a:	d114      	bne.n	8011e76 <HAL_RCC_ClockConfig+0x23a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	075b      	lsls	r3, r3, #29
 8011e50:	d506      	bpl.n	8011e60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8011e52:	4a0b      	ldr	r2, [pc, #44]	; (8011e80 <HAL_RCC_ClockConfig+0x244>)
 8011e54:	6853      	ldr	r3, [r2, #4]
 8011e56:	490c      	ldr	r1, [pc, #48]	; (8011e88 <HAL_RCC_ClockConfig+0x24c>)
 8011e58:	400b      	ands	r3, r1
 8011e5a:	68e1      	ldr	r1, [r4, #12]
 8011e5c:	430b      	orrs	r3, r1
 8011e5e:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8011e60:	2000      	movs	r0, #0
 8011e62:	f7fd fffb 	bl	800fe5c <HAL_InitTick>
  
  return HAL_OK;
 8011e66:	2000      	movs	r0, #0
}
 8011e68:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8011e6a:	2001      	movs	r0, #1
 8011e6c:	e7fc      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 8011e6e:	2001      	movs	r0, #1
 8011e70:	e7fa      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
          return HAL_ERROR;
 8011e72:	2001      	movs	r0, #1
 8011e74:	e7f8      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
      return HAL_ERROR;
 8011e76:	2001      	movs	r0, #1
 8011e78:	e7f6      	b.n	8011e68 <HAL_RCC_ClockConfig+0x22c>
 8011e7a:	46c0      	nop			; (mov r8, r8)
 8011e7c:	40022000 	.word	0x40022000
 8011e80:	40021000 	.word	0x40021000
 8011e84:	00001388 	.word	0x00001388
 8011e88:	fffff8ff 	.word	0xfffff8ff

08011e8c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8011e90:	aa04      	add	r2, sp, #16
 8011e92:	4b1e      	ldr	r3, [pc, #120]	; (8011f0c <HAL_RCC_GetSysClockFreq+0x80>)
 8011e94:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011e96:	c213      	stmia	r2!, {r0, r1, r4}
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8011e9c:	466a      	mov	r2, sp
 8011e9e:	4b1c      	ldr	r3, [pc, #112]	; (8011f10 <HAL_RCC_GetSysClockFreq+0x84>)
 8011ea0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8011ea2:	c213      	stmia	r2!, {r0, r1, r4}
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8011ea8:	4b1a      	ldr	r3, [pc, #104]	; (8011f14 <HAL_RCC_GetSysClockFreq+0x88>)
 8011eaa:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8011eac:	230c      	movs	r3, #12
 8011eae:	4013      	ands	r3, r2
 8011eb0:	2b08      	cmp	r3, #8
 8011eb2:	d004      	beq.n	8011ebe <HAL_RCC_GetSysClockFreq+0x32>
 8011eb4:	2b0c      	cmp	r3, #12
 8011eb6:	d126      	bne.n	8011f06 <HAL_RCC_GetSysClockFreq+0x7a>
      break;
    }
#if defined(RCC_CR2_HSI48ON)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8011eb8:	4817      	ldr	r0, [pc, #92]	; (8011f18 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8011eba:	b008      	add	sp, #32
 8011ebc:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8011ebe:	0c91      	lsrs	r1, r2, #18
 8011ec0:	230f      	movs	r3, #15
 8011ec2:	4019      	ands	r1, r3
 8011ec4:	a804      	add	r0, sp, #16
 8011ec6:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8011ec8:	4912      	ldr	r1, [pc, #72]	; (8011f14 <HAL_RCC_GetSysClockFreq+0x88>)
 8011eca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8011ecc:	400b      	ands	r3, r1
 8011ece:	4669      	mov	r1, sp
 8011ed0:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8011ed2:	23c0      	movs	r3, #192	; 0xc0
 8011ed4:	025b      	lsls	r3, r3, #9
 8011ed6:	401a      	ands	r2, r3
 8011ed8:	2380      	movs	r3, #128	; 0x80
 8011eda:	025b      	lsls	r3, r3, #9
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d008      	beq.n	8011ef2 <HAL_RCC_GetSysClockFreq+0x66>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8011ee0:	23c0      	movs	r3, #192	; 0xc0
 8011ee2:	025b      	lsls	r3, r3, #9
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d009      	beq.n	8011efc <HAL_RCC_GetSysClockFreq+0x70>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8011ee8:	480c      	ldr	r0, [pc, #48]	; (8011f1c <HAL_RCC_GetSysClockFreq+0x90>)
 8011eea:	f7ee f931 	bl	8000150 <__udivsi3>
 8011eee:	4360      	muls	r0, r4
 8011ef0:	e7e3      	b.n	8011eba <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8011ef2:	480a      	ldr	r0, [pc, #40]	; (8011f1c <HAL_RCC_GetSysClockFreq+0x90>)
 8011ef4:	f7ee f92c 	bl	8000150 <__udivsi3>
 8011ef8:	4360      	muls	r0, r4
 8011efa:	e7de      	b.n	8011eba <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8011efc:	4806      	ldr	r0, [pc, #24]	; (8011f18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8011efe:	f7ee f927 	bl	8000150 <__udivsi3>
 8011f02:	4360      	muls	r0, r4
 8011f04:	e7d9      	b.n	8011eba <HAL_RCC_GetSysClockFreq+0x2e>
  switch (tmpreg & RCC_CFGR_SWS)
 8011f06:	4805      	ldr	r0, [pc, #20]	; (8011f1c <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8011f08:	e7d7      	b.n	8011eba <HAL_RCC_GetSysClockFreq+0x2e>
 8011f0a:	46c0      	nop			; (mov r8, r8)
 8011f0c:	0801aa28 	.word	0x0801aa28
 8011f10:	0801aa3c 	.word	0x0801aa3c
 8011f14:	40021000 	.word	0x40021000
 8011f18:	02dc6c00 	.word	0x02dc6c00
 8011f1c:	007a1200 	.word	0x007a1200

08011f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011f20:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8011f22:	f7ff ffb3 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 8011f26:	4b05      	ldr	r3, [pc, #20]	; (8011f3c <HAL_RCC_GetHCLKFreq+0x1c>)
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	0912      	lsrs	r2, r2, #4
 8011f2c:	230f      	movs	r3, #15
 8011f2e:	4013      	ands	r3, r2
 8011f30:	4a03      	ldr	r2, [pc, #12]	; (8011f40 <HAL_RCC_GetHCLKFreq+0x20>)
 8011f32:	5cd3      	ldrb	r3, [r2, r3]
 8011f34:	40d8      	lsrs	r0, r3
 8011f36:	4b03      	ldr	r3, [pc, #12]	; (8011f44 <HAL_RCC_GetHCLKFreq+0x24>)
 8011f38:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8011f3a:	bd10      	pop	{r4, pc}
 8011f3c:	40021000 	.word	0x40021000
 8011f40:	0801aa50 	.word	0x0801aa50
 8011f44:	20000108 	.word	0x20000108

08011f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011f48:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8011f4a:	f7ff ffe9 	bl	8011f20 <HAL_RCC_GetHCLKFreq>
 8011f4e:	4b04      	ldr	r3, [pc, #16]	; (8011f60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8011f50:	685a      	ldr	r2, [r3, #4]
 8011f52:	0a12      	lsrs	r2, r2, #8
 8011f54:	2307      	movs	r3, #7
 8011f56:	4013      	ands	r3, r2
 8011f58:	4a02      	ldr	r2, [pc, #8]	; (8011f64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8011f5a:	5cd3      	ldrb	r3, [r2, r3]
 8011f5c:	40d8      	lsrs	r0, r3
}    
 8011f5e:	bd10      	pop	{r4, pc}
 8011f60:	40021000 	.word	0x40021000
 8011f64:	0801aa50 	.word	0x0801aa50

08011f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011f68:	b530      	push	{r4, r5, lr}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011f6e:	6803      	ldr	r3, [r0, #0]
 8011f70:	03db      	lsls	r3, r3, #15
 8011f72:	d507      	bpl.n	8011f84 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8011f74:	4b41      	ldr	r3, [pc, #260]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f76:	6a1b      	ldr	r3, [r3, #32]
 8011f78:	6842      	ldr	r2, [r0, #4]
 8011f7a:	4053      	eors	r3, r2
 8011f7c:	22c0      	movs	r2, #192	; 0xc0
 8011f7e:	0092      	lsls	r2, r2, #2
 8011f80:	4213      	tst	r3, r2
 8011f82:	d134      	bne.n	8011fee <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8011f84:	6823      	ldr	r3, [r4, #0]
 8011f86:	07db      	lsls	r3, r3, #31
 8011f88:	d506      	bpl.n	8011f98 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8011f8a:	4a3c      	ldr	r2, [pc, #240]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011f8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011f8e:	2103      	movs	r1, #3
 8011f90:	438b      	bics	r3, r1
 8011f92:	68a1      	ldr	r1, [r4, #8]
 8011f94:	430b      	orrs	r3, r1
 8011f96:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	079b      	lsls	r3, r3, #30
 8011f9c:	d506      	bpl.n	8011fac <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8011f9e:	4a37      	ldr	r2, [pc, #220]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011fa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011fa2:	4937      	ldr	r1, [pc, #220]	; (8012080 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8011fa4:	400b      	ands	r3, r1
 8011fa6:	68e1      	ldr	r1, [r4, #12]
 8011fa8:	430b      	orrs	r3, r1
 8011faa:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	035b      	lsls	r3, r3, #13
 8011fb0:	d506      	bpl.n	8011fc0 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8011fb2:	4a32      	ldr	r2, [pc, #200]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011fb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011fb6:	4933      	ldr	r1, [pc, #204]	; (8012084 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8011fb8:	400b      	ands	r3, r1
 8011fba:	6921      	ldr	r1, [r4, #16]
 8011fbc:	430b      	orrs	r3, r1
 8011fbe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8011fc0:	6823      	ldr	r3, [r4, #0]
 8011fc2:	069b      	lsls	r3, r3, #26
 8011fc4:	d506      	bpl.n	8011fd4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8011fc6:	4a2d      	ldr	r2, [pc, #180]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011fc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011fca:	2110      	movs	r1, #16
 8011fcc:	438b      	bics	r3, r1
 8011fce:	6961      	ldr	r1, [r4, #20]
 8011fd0:	430b      	orrs	r3, r1
 8011fd2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011fd4:	6823      	ldr	r3, [r4, #0]
 8011fd6:	055b      	lsls	r3, r3, #21
 8011fd8:	d54e      	bpl.n	8012078 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011fda:	4a28      	ldr	r2, [pc, #160]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011fdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8011fde:	2140      	movs	r1, #64	; 0x40
 8011fe0:	438b      	bics	r3, r1
 8011fe2:	69a1      	ldr	r1, [r4, #24]
 8011fe4:	430b      	orrs	r3, r1
 8011fe6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8011fe8:	2000      	movs	r0, #0
}
 8011fea:	b003      	add	sp, #12
 8011fec:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8011fee:	4a23      	ldr	r2, [pc, #140]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8011ff0:	69d1      	ldr	r1, [r2, #28]
 8011ff2:	2080      	movs	r0, #128	; 0x80
 8011ff4:	0540      	lsls	r0, r0, #21
 8011ff6:	4301      	orrs	r1, r0
 8011ff8:	61d1      	str	r1, [r2, #28]
 8011ffa:	69d3      	ldr	r3, [r2, #28]
 8011ffc:	4003      	ands	r3, r0
 8011ffe:	9301      	str	r3, [sp, #4]
 8012000:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012002:	4a21      	ldr	r2, [pc, #132]	; (8012088 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012004:	6811      	ldr	r1, [r2, #0]
 8012006:	2380      	movs	r3, #128	; 0x80
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	430b      	orrs	r3, r1
 801200c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 801200e:	f7fd ff4f 	bl	800feb0 <HAL_GetTick>
 8012012:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012014:	4b1c      	ldr	r3, [pc, #112]	; (8012088 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	05db      	lsls	r3, r3, #23
 801201a:	d406      	bmi.n	801202a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801201c:	f7fd ff48 	bl	800feb0 <HAL_GetTick>
 8012020:	1b40      	subs	r0, r0, r5
 8012022:	2864      	cmp	r0, #100	; 0x64
 8012024:	d9f6      	bls.n	8012014 <HAL_RCCEx_PeriphCLKConfig+0xac>
          return HAL_TIMEOUT;
 8012026:	2003      	movs	r0, #3
 8012028:	e7df      	b.n	8011fea <HAL_RCCEx_PeriphCLKConfig+0x82>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801202a:	4b14      	ldr	r3, [pc, #80]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801202c:	6a18      	ldr	r0, [r3, #32]
 801202e:	4a17      	ldr	r2, [pc, #92]	; (801208c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012030:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012032:	6a1d      	ldr	r5, [r3, #32]
 8012034:	2180      	movs	r1, #128	; 0x80
 8012036:	0249      	lsls	r1, r1, #9
 8012038:	4329      	orrs	r1, r5
 801203a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 801203c:	6a19      	ldr	r1, [r3, #32]
 801203e:	4d14      	ldr	r5, [pc, #80]	; (8012090 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012040:	4029      	ands	r1, r5
 8012042:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012044:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012046:	0783      	lsls	r3, r0, #30
 8012048:	d407      	bmi.n	801205a <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801204a:	4a0c      	ldr	r2, [pc, #48]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 801204c:	6a13      	ldr	r3, [r2, #32]
 801204e:	490f      	ldr	r1, [pc, #60]	; (801208c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012050:	400b      	ands	r3, r1
 8012052:	6861      	ldr	r1, [r4, #4]
 8012054:	430b      	orrs	r3, r1
 8012056:	6213      	str	r3, [r2, #32]
 8012058:	e794      	b.n	8011f84 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        tickstart = HAL_GetTick();
 801205a:	f7fd ff29 	bl	800feb0 <HAL_GetTick>
 801205e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012060:	4b06      	ldr	r3, [pc, #24]	; (801207c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8012062:	6a1b      	ldr	r3, [r3, #32]
 8012064:	079b      	lsls	r3, r3, #30
 8012066:	d4f0      	bmi.n	801204a <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012068:	f7fd ff22 	bl	800feb0 <HAL_GetTick>
 801206c:	1b40      	subs	r0, r0, r5
 801206e:	4b09      	ldr	r3, [pc, #36]	; (8012094 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012070:	4298      	cmp	r0, r3
 8012072:	d9f5      	bls.n	8012060 <HAL_RCCEx_PeriphCLKConfig+0xf8>
            return HAL_TIMEOUT;
 8012074:	2003      	movs	r0, #3
 8012076:	e7b8      	b.n	8011fea <HAL_RCCEx_PeriphCLKConfig+0x82>
  return HAL_OK;
 8012078:	2000      	movs	r0, #0
 801207a:	e7b6      	b.n	8011fea <HAL_RCCEx_PeriphCLKConfig+0x82>
 801207c:	40021000 	.word	0x40021000
 8012080:	fffcffff 	.word	0xfffcffff
 8012084:	fff3ffff 	.word	0xfff3ffff
 8012088:	40007000 	.word	0x40007000
 801208c:	fffffcff 	.word	0xfffffcff
 8012090:	fffeffff 	.word	0xfffeffff
 8012094:	00001388 	.word	0x00001388

08012098 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012098:	4770      	bx	lr

0801209a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801209a:	b570      	push	{r4, r5, r6, lr}
 801209c:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801209e:	6802      	ldr	r2, [r0, #0]
 80120a0:	68d3      	ldr	r3, [r2, #12]
 80120a2:	21a0      	movs	r1, #160	; 0xa0
 80120a4:	438b      	bics	r3, r1
 80120a6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80120a8:	f7fd ff02 	bl	800feb0 <HAL_GetTick>
 80120ac:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80120ae:	6823      	ldr	r3, [r4, #0]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	069b      	lsls	r3, r3, #26
 80120b4:	d408      	bmi.n	80120c8 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80120b6:	f7fd fefb 	bl	800feb0 <HAL_GetTick>
 80120ba:	1b40      	subs	r0, r0, r5
 80120bc:	23fa      	movs	r3, #250	; 0xfa
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4298      	cmp	r0, r3
 80120c2:	d9f4      	bls.n	80120ae <HAL_RTC_WaitForSynchro+0x14>
    {       
      return HAL_TIMEOUT;
 80120c4:	2003      	movs	r0, #3
 80120c6:	e000      	b.n	80120ca <HAL_RTC_WaitForSynchro+0x30>
    } 
  }

  return HAL_OK;
 80120c8:	2000      	movs	r0, #0
}
 80120ca:	bd70      	pop	{r4, r5, r6, pc}

080120cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80120cc:	b570      	push	{r4, r5, r6, lr}
 80120ce:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80120d0:	6803      	ldr	r3, [r0, #0]
 80120d2:	68da      	ldr	r2, [r3, #12]
 80120d4:	0652      	lsls	r2, r2, #25
 80120d6:	d501      	bpl.n	80120dc <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80120d8:	2000      	movs	r0, #0
}
 80120da:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80120dc:	2201      	movs	r2, #1
 80120de:	4252      	negs	r2, r2
 80120e0:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80120e2:	f7fd fee5 	bl	800feb0 <HAL_GetTick>
 80120e6:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	065b      	lsls	r3, r3, #25
 80120ee:	d408      	bmi.n	8012102 <RTC_EnterInitMode+0x36>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80120f0:	f7fd fede 	bl	800feb0 <HAL_GetTick>
 80120f4:	1b40      	subs	r0, r0, r5
 80120f6:	22fa      	movs	r2, #250	; 0xfa
 80120f8:	0092      	lsls	r2, r2, #2
 80120fa:	4290      	cmp	r0, r2
 80120fc:	d9f4      	bls.n	80120e8 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 80120fe:	2003      	movs	r0, #3
 8012100:	e7eb      	b.n	80120da <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012102:	2000      	movs	r0, #0
 8012104:	e7e9      	b.n	80120da <RTC_EnterInitMode+0xe>
	...

08012108 <HAL_RTC_Init>:
{
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801210c:	d046      	beq.n	801219c <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801210e:	7f43      	ldrb	r3, [r0, #29]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d013      	beq.n	801213c <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012114:	2302      	movs	r3, #2
 8012116:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012118:	6823      	ldr	r3, [r4, #0]
 801211a:	22ca      	movs	r2, #202	; 0xca
 801211c:	625a      	str	r2, [r3, #36]	; 0x24
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	3a77      	subs	r2, #119	; 0x77
 8012122:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012124:	0020      	movs	r0, r4
 8012126:	f7ff ffd1 	bl	80120cc <RTC_EnterInitMode>
 801212a:	2800      	cmp	r0, #0
 801212c:	d00a      	beq.n	8012144 <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	22ff      	movs	r2, #255	; 0xff
 8012132:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012134:	2304      	movs	r3, #4
 8012136:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012138:	2001      	movs	r0, #1
}
 801213a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 801213c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 801213e:	f7ff ffab 	bl	8012098 <HAL_RTC_MspInit>
 8012142:	e7e7      	b.n	8012114 <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012144:	6822      	ldr	r2, [r4, #0]
 8012146:	6893      	ldr	r3, [r2, #8]
 8012148:	4915      	ldr	r1, [pc, #84]	; (80121a0 <HAL_RTC_Init+0x98>)
 801214a:	400b      	ands	r3, r1
 801214c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801214e:	6821      	ldr	r1, [r4, #0]
 8012150:	688a      	ldr	r2, [r1, #8]
 8012152:	6863      	ldr	r3, [r4, #4]
 8012154:	6925      	ldr	r5, [r4, #16]
 8012156:	432b      	orrs	r3, r5
 8012158:	6965      	ldr	r5, [r4, #20]
 801215a:	432b      	orrs	r3, r5
 801215c:	4313      	orrs	r3, r2
 801215e:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012160:	6823      	ldr	r3, [r4, #0]
 8012162:	68e2      	ldr	r2, [r4, #12]
 8012164:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012166:	6821      	ldr	r1, [r4, #0]
 8012168:	690b      	ldr	r3, [r1, #16]
 801216a:	68a2      	ldr	r2, [r4, #8]
 801216c:	0412      	lsls	r2, r2, #16
 801216e:	4313      	orrs	r3, r2
 8012170:	610b      	str	r3, [r1, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012172:	6822      	ldr	r2, [r4, #0]
 8012174:	68d3      	ldr	r3, [r2, #12]
 8012176:	2180      	movs	r1, #128	; 0x80
 8012178:	438b      	bics	r3, r1
 801217a:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801217c:	6822      	ldr	r2, [r4, #0]
 801217e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012180:	4908      	ldr	r1, [pc, #32]	; (80121a4 <HAL_RTC_Init+0x9c>)
 8012182:	400b      	ands	r3, r1
 8012184:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012186:	6822      	ldr	r2, [r4, #0]
 8012188:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801218a:	69a1      	ldr	r1, [r4, #24]
 801218c:	430b      	orrs	r3, r1
 801218e:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012190:	6823      	ldr	r3, [r4, #0]
 8012192:	22ff      	movs	r2, #255	; 0xff
 8012194:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012196:	2301      	movs	r3, #1
 8012198:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 801219a:	e7ce      	b.n	801213a <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 801219c:	2001      	movs	r0, #1
 801219e:	e7cc      	b.n	801213a <HAL_RTC_Init+0x32>
 80121a0:	ff8fffbf 	.word	0xff8fffbf
 80121a4:	fffbffff 	.word	0xfffbffff

080121a8 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 80121a8:	2300      	movs	r3, #0
  
  while(Value >= 10)
 80121aa:	2809      	cmp	r0, #9
 80121ac:	d903      	bls.n	80121b6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 80121ae:	3301      	adds	r3, #1
    Value -= 10;
 80121b0:	380a      	subs	r0, #10
 80121b2:	b2c0      	uxtb	r0, r0
 80121b4:	e7f9      	b.n	80121aa <RTC_ByteToBcd2+0x2>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80121b6:	011b      	lsls	r3, r3, #4
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	4318      	orrs	r0, r3
}
 80121bc:	4770      	bx	lr
	...

080121c0 <HAL_RTC_SetTime>:
{
 80121c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121c2:	0004      	movs	r4, r0
 80121c4:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80121c6:	7f03      	ldrb	r3, [r0, #28]
 80121c8:	2b01      	cmp	r3, #1
 80121ca:	d100      	bne.n	80121ce <HAL_RTC_SetTime+0xe>
 80121cc:	e070      	b.n	80122b0 <HAL_RTC_SetTime+0xf0>
 80121ce:	2301      	movs	r3, #1
 80121d0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80121d2:	3301      	adds	r3, #1
 80121d4:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80121d6:	2a00      	cmp	r2, #0
 80121d8:	d142      	bne.n	8012260 <HAL_RTC_SetTime+0xa0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80121da:	6803      	ldr	r3, [r0, #0]
 80121dc:	689b      	ldr	r3, [r3, #8]
 80121de:	065b      	lsls	r3, r3, #25
 80121e0:	d401      	bmi.n	80121e6 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 80121e2:	2300      	movs	r3, #0
 80121e4:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121e6:	7830      	ldrb	r0, [r6, #0]
 80121e8:	f7ff ffde 	bl	80121a8 <RTC_ByteToBcd2>
 80121ec:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80121ee:	7870      	ldrb	r0, [r6, #1]
 80121f0:	f7ff ffda 	bl	80121a8 <RTC_ByteToBcd2>
 80121f4:	0200      	lsls	r0, r0, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80121f6:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80121f8:	78b0      	ldrb	r0, [r6, #2]
 80121fa:	f7ff ffd5 	bl	80121a8 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80121fe:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012200:	7a30      	ldrb	r0, [r6, #8]
 8012202:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012204:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012206:	6823      	ldr	r3, [r4, #0]
 8012208:	22ca      	movs	r2, #202	; 0xca
 801220a:	625a      	str	r2, [r3, #36]	; 0x24
 801220c:	6823      	ldr	r3, [r4, #0]
 801220e:	3a77      	subs	r2, #119	; 0x77
 8012210:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012212:	0020      	movs	r0, r4
 8012214:	f7ff ff5a 	bl	80120cc <RTC_EnterInitMode>
 8012218:	1e07      	subs	r7, r0, #0
 801221a:	d132      	bne.n	8012282 <HAL_RTC_SetTime+0xc2>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801221c:	6823      	ldr	r3, [r4, #0]
 801221e:	4825      	ldr	r0, [pc, #148]	; (80122b4 <HAL_RTC_SetTime+0xf4>)
 8012220:	4005      	ands	r5, r0
 8012222:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012224:	6822      	ldr	r2, [r4, #0]
 8012226:	6893      	ldr	r3, [r2, #8]
 8012228:	4923      	ldr	r1, [pc, #140]	; (80122b8 <HAL_RTC_SetTime+0xf8>)
 801222a:	400b      	ands	r3, r1
 801222c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801222e:	6821      	ldr	r1, [r4, #0]
 8012230:	688b      	ldr	r3, [r1, #8]
 8012232:	68f2      	ldr	r2, [r6, #12]
 8012234:	6930      	ldr	r0, [r6, #16]
 8012236:	4302      	orrs	r2, r0
 8012238:	4313      	orrs	r3, r2
 801223a:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801223c:	6822      	ldr	r2, [r4, #0]
 801223e:	68d3      	ldr	r3, [r2, #12]
 8012240:	2180      	movs	r1, #128	; 0x80
 8012242:	438b      	bics	r3, r1
 8012244:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012246:	6823      	ldr	r3, [r4, #0]
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	069b      	lsls	r3, r3, #26
 801224c:	d522      	bpl.n	8012294 <HAL_RTC_SetTime+0xd4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	22ff      	movs	r2, #255	; 0xff
 8012252:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012254:	2301      	movs	r3, #1
 8012256:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012258:	2300      	movs	r3, #0
 801225a:	7723      	strb	r3, [r4, #28]
}
 801225c:	0038      	movs	r0, r7
 801225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012260:	6803      	ldr	r3, [r0, #0]
 8012262:	689b      	ldr	r3, [r3, #8]
 8012264:	065b      	lsls	r3, r3, #25
 8012266:	d401      	bmi.n	801226c <HAL_RTC_SetTime+0xac>
      sTime->TimeFormat = 0x00;
 8012268:	2300      	movs	r3, #0
 801226a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801226c:	7835      	ldrb	r5, [r6, #0]
 801226e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012270:	7870      	ldrb	r0, [r6, #1]
 8012272:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012274:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012276:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012278:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 801227a:	7a30      	ldrb	r0, [r6, #8]
 801227c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801227e:	4305      	orrs	r5, r0
 8012280:	e7c1      	b.n	8012206 <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	22ff      	movs	r2, #255	; 0xff
 8012286:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012288:	2304      	movs	r3, #4
 801228a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801228c:	2300      	movs	r3, #0
 801228e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012290:	2701      	movs	r7, #1
 8012292:	e7e3      	b.n	801225c <HAL_RTC_SetTime+0x9c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012294:	0020      	movs	r0, r4
 8012296:	f7ff ff00 	bl	801209a <HAL_RTC_WaitForSynchro>
 801229a:	2800      	cmp	r0, #0
 801229c:	d0d7      	beq.n	801224e <HAL_RTC_SetTime+0x8e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	22ff      	movs	r2, #255	; 0xff
 80122a2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80122a4:	2304      	movs	r3, #4
 80122a6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80122a8:	2300      	movs	r3, #0
 80122aa:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80122ac:	2701      	movs	r7, #1
 80122ae:	e7d5      	b.n	801225c <HAL_RTC_SetTime+0x9c>
  __HAL_LOCK(hrtc);
 80122b0:	2702      	movs	r7, #2
 80122b2:	e7d3      	b.n	801225c <HAL_RTC_SetTime+0x9c>
 80122b4:	007f7f7f 	.word	0x007f7f7f
 80122b8:	fffbffff 	.word	0xfffbffff

080122bc <HAL_RTC_SetDate>:
{
 80122bc:	b570      	push	{r4, r5, r6, lr}
 80122be:	0004      	movs	r4, r0
 80122c0:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80122c2:	7f03      	ldrb	r3, [r0, #28]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d061      	beq.n	801238c <HAL_RTC_SetDate+0xd0>
 80122c8:	2301      	movs	r3, #1
 80122ca:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80122cc:	3301      	adds	r3, #1
 80122ce:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80122d0:	2a00      	cmp	r2, #0
 80122d2:	d106      	bne.n	80122e2 <HAL_RTC_SetDate+0x26>
 80122d4:	784b      	ldrb	r3, [r1, #1]
 80122d6:	06d9      	lsls	r1, r3, #27
 80122d8:	d503      	bpl.n	80122e2 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80122da:	2110      	movs	r1, #16
 80122dc:	438b      	bics	r3, r1
 80122de:	330a      	adds	r3, #10
 80122e0:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 80122e2:	2a00      	cmp	r2, #0
 80122e4:	d130      	bne.n	8012348 <HAL_RTC_SetDate+0x8c>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80122e6:	78f0      	ldrb	r0, [r6, #3]
 80122e8:	f7ff ff5e 	bl	80121a8 <RTC_ByteToBcd2>
 80122ec:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80122ee:	7870      	ldrb	r0, [r6, #1]
 80122f0:	f7ff ff5a 	bl	80121a8 <RTC_ByteToBcd2>
 80122f4:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80122f6:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80122f8:	78b0      	ldrb	r0, [r6, #2]
 80122fa:	f7ff ff55 	bl	80121a8 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80122fe:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13));   
 8012300:	7830      	ldrb	r0, [r6, #0]
 8012302:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012304:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012306:	6823      	ldr	r3, [r4, #0]
 8012308:	22ca      	movs	r2, #202	; 0xca
 801230a:	625a      	str	r2, [r3, #36]	; 0x24
 801230c:	6823      	ldr	r3, [r4, #0]
 801230e:	3a77      	subs	r2, #119	; 0x77
 8012310:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012312:	0020      	movs	r0, r4
 8012314:	f7ff feda 	bl	80120cc <RTC_EnterInitMode>
 8012318:	1e06      	subs	r6, r0, #0
 801231a:	d120      	bne.n	801235e <HAL_RTC_SetDate+0xa2>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801231c:	6823      	ldr	r3, [r4, #0]
 801231e:	481c      	ldr	r0, [pc, #112]	; (8012390 <HAL_RTC_SetDate+0xd4>)
 8012320:	4005      	ands	r5, r0
 8012322:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012324:	6822      	ldr	r2, [r4, #0]
 8012326:	68d3      	ldr	r3, [r2, #12]
 8012328:	2180      	movs	r1, #128	; 0x80
 801232a:	438b      	bics	r3, r1
 801232c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801232e:	6823      	ldr	r3, [r4, #0]
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	069b      	lsls	r3, r3, #26
 8012334:	d51c      	bpl.n	8012370 <HAL_RTC_SetDate+0xb4>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012336:	6823      	ldr	r3, [r4, #0]
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801233c:	2301      	movs	r3, #1
 801233e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012340:	2300      	movs	r3, #0
 8012342:	7723      	strb	r3, [r4, #28]
}
 8012344:	0030      	movs	r0, r6
 8012346:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8012348:	7873      	ldrb	r3, [r6, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 801234a:	78b0      	ldrb	r0, [r6, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801234c:	78f5      	ldrb	r5, [r6, #3]
 801234e:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012350:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012352:	431d      	orrs	r5, r3
                  (((uint32_t)sDate->Month) << 8) | \
 8012354:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012356:	7830      	ldrb	r0, [r6, #0]
 8012358:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801235a:	4305      	orrs	r5, r0
 801235c:	e7d3      	b.n	8012306 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801235e:	6823      	ldr	r3, [r4, #0]
 8012360:	22ff      	movs	r2, #255	; 0xff
 8012362:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012364:	2304      	movs	r3, #4
 8012366:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012368:	2300      	movs	r3, #0
 801236a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801236c:	2601      	movs	r6, #1
 801236e:	e7e9      	b.n	8012344 <HAL_RTC_SetDate+0x88>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012370:	0020      	movs	r0, r4
 8012372:	f7ff fe92 	bl	801209a <HAL_RTC_WaitForSynchro>
 8012376:	2800      	cmp	r0, #0
 8012378:	d0dd      	beq.n	8012336 <HAL_RTC_SetDate+0x7a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	22ff      	movs	r2, #255	; 0xff
 801237e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012380:	2304      	movs	r3, #4
 8012382:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012384:	2300      	movs	r3, #0
 8012386:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012388:	2601      	movs	r6, #1
 801238a:	e7db      	b.n	8012344 <HAL_RTC_SetDate+0x88>
 __HAL_LOCK(hrtc);
 801238c:	2602      	movs	r6, #2
 801238e:	e7d9      	b.n	8012344 <HAL_RTC_SetDate+0x88>
 8012390:	00ffff3f 	.word	0x00ffff3f

08012394 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012394:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012396:	0900      	lsrs	r0, r0, #4
 8012398:	0083      	lsls	r3, r0, #2
 801239a:	181b      	adds	r3, r3, r0
 801239c:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801239e:	200f      	movs	r0, #15
 80123a0:	4010      	ands	r0, r2
 80123a2:	18c0      	adds	r0, r0, r3
 80123a4:	b2c0      	uxtb	r0, r0
}
 80123a6:	4770      	bx	lr

080123a8 <HAL_RTC_GetTime>:
{
 80123a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123aa:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80123ac:	6803      	ldr	r3, [r0, #0]
 80123ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123b0:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80123b2:	6803      	ldr	r3, [r0, #0]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	490f      	ldr	r1, [pc, #60]	; (80123f4 <HAL_RTC_GetTime+0x4c>)
 80123b8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80123ba:	0c1d      	lsrs	r5, r3, #16
 80123bc:	203f      	movs	r0, #63	; 0x3f
 80123be:	4028      	ands	r0, r5
 80123c0:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80123c2:	0a1e      	lsrs	r6, r3, #8
 80123c4:	277f      	movs	r7, #127	; 0x7f
 80123c6:	403e      	ands	r6, r7
 80123c8:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80123ca:	401f      	ands	r7, r3
 80123cc:	70a7      	strb	r7, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80123ce:	2140      	movs	r1, #64	; 0x40
 80123d0:	4029      	ands	r1, r5
 80123d2:	7221      	strb	r1, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 80123d4:	2a00      	cmp	r2, #0
 80123d6:	d10a      	bne.n	80123ee <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80123d8:	f7ff ffdc 	bl	8012394 <RTC_Bcd2ToByte>
 80123dc:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80123de:	0030      	movs	r0, r6
 80123e0:	f7ff ffd8 	bl	8012394 <RTC_Bcd2ToByte>
 80123e4:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80123e6:	0038      	movs	r0, r7
 80123e8:	f7ff ffd4 	bl	8012394 <RTC_Bcd2ToByte>
 80123ec:	70a0      	strb	r0, [r4, #2]
}
 80123ee:	2000      	movs	r0, #0
 80123f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123f2:	46c0      	nop			; (mov r8, r8)
 80123f4:	007f7f7f 	.word	0x007f7f7f

080123f8 <HAL_RTC_GetDate>:
{
 80123f8:	b570      	push	{r4, r5, r6, lr}
 80123fa:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80123fc:	6803      	ldr	r3, [r0, #0]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	490e      	ldr	r1, [pc, #56]	; (801243c <HAL_RTC_GetDate+0x44>)
 8012402:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012404:	0c18      	lsrs	r0, r3, #16
 8012406:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012408:	0a19      	lsrs	r1, r3, #8
 801240a:	261f      	movs	r6, #31
 801240c:	400e      	ands	r6, r1
 801240e:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012410:	253f      	movs	r5, #63	; 0x3f
 8012412:	401d      	ands	r5, r3
 8012414:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012416:	0b5b      	lsrs	r3, r3, #13
 8012418:	2107      	movs	r1, #7
 801241a:	400b      	ands	r3, r1
 801241c:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 801241e:	2a00      	cmp	r2, #0
 8012420:	d10a      	bne.n	8012438 <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012422:	f7ff ffb7 	bl	8012394 <RTC_Bcd2ToByte>
 8012426:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012428:	0030      	movs	r0, r6
 801242a:	f7ff ffb3 	bl	8012394 <RTC_Bcd2ToByte>
 801242e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012430:	0028      	movs	r0, r5
 8012432:	f7ff ffaf 	bl	8012394 <RTC_Bcd2ToByte>
 8012436:	70a0      	strb	r0, [r4, #2]
}
 8012438:	2000      	movs	r0, #0
 801243a:	bd70      	pop	{r4, r5, r6, pc}
 801243c:	00ffff3f 	.word	0x00ffff3f

08012440 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012440:	6803      	ldr	r3, [r0, #0]
 8012442:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012444:	0089      	lsls	r1, r1, #2
 8012446:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012448:	600a      	str	r2, [r1, #0]
}
 801244a:	4770      	bx	lr

0801244c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801244c:	6803      	ldr	r3, [r0, #0]
 801244e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012450:	0089      	lsls	r1, r1, #2
 8012452:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012454:	6808      	ldr	r0, [r1, #0]
}
 8012456:	4770      	bx	lr

08012458 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012458:	4770      	bx	lr

0801245a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801245a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 801245c:	2239      	movs	r2, #57	; 0x39
 801245e:	2302      	movs	r3, #2
 8012460:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012462:	6804      	ldr	r4, [r0, #0]
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	2101      	movs	r1, #1
 8012468:	430b      	orrs	r3, r1
 801246a:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 801246c:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801246e:	2000      	movs	r0, #0
 8012470:	bd10      	pop	{r4, pc}
	...

08012474 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012474:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012476:	4a1f      	ldr	r2, [pc, #124]	; (80124f4 <TIM_Base_SetConfig+0x80>)
 8012478:	4290      	cmp	r0, r2
 801247a:	d006      	beq.n	801248a <TIM_Base_SetConfig+0x16>
 801247c:	2280      	movs	r2, #128	; 0x80
 801247e:	05d2      	lsls	r2, r2, #23
 8012480:	4290      	cmp	r0, r2
 8012482:	d002      	beq.n	801248a <TIM_Base_SetConfig+0x16>
 8012484:	4a1c      	ldr	r2, [pc, #112]	; (80124f8 <TIM_Base_SetConfig+0x84>)
 8012486:	4290      	cmp	r0, r2
 8012488:	d103      	bne.n	8012492 <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801248a:	2270      	movs	r2, #112	; 0x70
 801248c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801248e:	684a      	ldr	r2, [r1, #4]
 8012490:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012492:	4a18      	ldr	r2, [pc, #96]	; (80124f4 <TIM_Base_SetConfig+0x80>)
 8012494:	4290      	cmp	r0, r2
 8012496:	d012      	beq.n	80124be <TIM_Base_SetConfig+0x4a>
 8012498:	2280      	movs	r2, #128	; 0x80
 801249a:	05d2      	lsls	r2, r2, #23
 801249c:	4290      	cmp	r0, r2
 801249e:	d00e      	beq.n	80124be <TIM_Base_SetConfig+0x4a>
 80124a0:	4a15      	ldr	r2, [pc, #84]	; (80124f8 <TIM_Base_SetConfig+0x84>)
 80124a2:	4290      	cmp	r0, r2
 80124a4:	d00b      	beq.n	80124be <TIM_Base_SetConfig+0x4a>
 80124a6:	4a15      	ldr	r2, [pc, #84]	; (80124fc <TIM_Base_SetConfig+0x88>)
 80124a8:	4290      	cmp	r0, r2
 80124aa:	d008      	beq.n	80124be <TIM_Base_SetConfig+0x4a>
 80124ac:	4a14      	ldr	r2, [pc, #80]	; (8012500 <TIM_Base_SetConfig+0x8c>)
 80124ae:	4290      	cmp	r0, r2
 80124b0:	d005      	beq.n	80124be <TIM_Base_SetConfig+0x4a>
 80124b2:	4a14      	ldr	r2, [pc, #80]	; (8012504 <TIM_Base_SetConfig+0x90>)
 80124b4:	4290      	cmp	r0, r2
 80124b6:	d002      	beq.n	80124be <TIM_Base_SetConfig+0x4a>
 80124b8:	4a13      	ldr	r2, [pc, #76]	; (8012508 <TIM_Base_SetConfig+0x94>)
 80124ba:	4290      	cmp	r0, r2
 80124bc:	d103      	bne.n	80124c6 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80124be:	4a13      	ldr	r2, [pc, #76]	; (801250c <TIM_Base_SetConfig+0x98>)
 80124c0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80124c2:	68ca      	ldr	r2, [r1, #12]
 80124c4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80124c6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80124c8:	688b      	ldr	r3, [r1, #8]
 80124ca:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80124cc:	680b      	ldr	r3, [r1, #0]
 80124ce:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80124d0:	4b08      	ldr	r3, [pc, #32]	; (80124f4 <TIM_Base_SetConfig+0x80>)
 80124d2:	4298      	cmp	r0, r3
 80124d4:	d008      	beq.n	80124e8 <TIM_Base_SetConfig+0x74>
 80124d6:	4b0a      	ldr	r3, [pc, #40]	; (8012500 <TIM_Base_SetConfig+0x8c>)
 80124d8:	4298      	cmp	r0, r3
 80124da:	d005      	beq.n	80124e8 <TIM_Base_SetConfig+0x74>
 80124dc:	4b09      	ldr	r3, [pc, #36]	; (8012504 <TIM_Base_SetConfig+0x90>)
 80124de:	4298      	cmp	r0, r3
 80124e0:	d002      	beq.n	80124e8 <TIM_Base_SetConfig+0x74>
 80124e2:	4b09      	ldr	r3, [pc, #36]	; (8012508 <TIM_Base_SetConfig+0x94>)
 80124e4:	4298      	cmp	r0, r3
 80124e6:	d101      	bne.n	80124ec <TIM_Base_SetConfig+0x78>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80124e8:	690b      	ldr	r3, [r1, #16]
 80124ea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80124ec:	2301      	movs	r3, #1
 80124ee:	6143      	str	r3, [r0, #20]
}
 80124f0:	4770      	bx	lr
 80124f2:	46c0      	nop			; (mov r8, r8)
 80124f4:	40012c00 	.word	0x40012c00
 80124f8:	40000400 	.word	0x40000400
 80124fc:	40002000 	.word	0x40002000
 8012500:	40014000 	.word	0x40014000
 8012504:	40014400 	.word	0x40014400
 8012508:	40014800 	.word	0x40014800
 801250c:	fffffcff 	.word	0xfffffcff

08012510 <HAL_TIM_Base_Init>:
{
 8012510:	b570      	push	{r4, r5, r6, lr}
 8012512:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012514:	d014      	beq.n	8012540 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012516:	2339      	movs	r3, #57	; 0x39
 8012518:	5cc3      	ldrb	r3, [r0, r3]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d00a      	beq.n	8012534 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801251e:	2539      	movs	r5, #57	; 0x39
 8012520:	2302      	movs	r3, #2
 8012522:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012524:	0021      	movs	r1, r4
 8012526:	c901      	ldmia	r1!, {r0}
 8012528:	f7ff ffa4 	bl	8012474 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 801252c:	2301      	movs	r3, #1
 801252e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012530:	2000      	movs	r0, #0
}
 8012532:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012534:	3338      	adds	r3, #56	; 0x38
 8012536:	2200      	movs	r2, #0
 8012538:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801253a:	f7ff ff8d 	bl	8012458 <HAL_TIM_Base_MspInit>
 801253e:	e7ee      	b.n	801251e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012540:	2001      	movs	r0, #1
 8012542:	e7f6      	b.n	8012532 <HAL_TIM_Base_Init+0x22>

08012544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012544:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012546:	2338      	movs	r3, #56	; 0x38
 8012548:	5cc3      	ldrb	r3, [r0, r3]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d01e      	beq.n	801258c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 801254e:	2238      	movs	r2, #56	; 0x38
 8012550:	2501      	movs	r5, #1
 8012552:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012554:	2439      	movs	r4, #57	; 0x39
 8012556:	2302      	movs	r3, #2
 8012558:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801255a:	6806      	ldr	r6, [r0, #0]
 801255c:	6873      	ldr	r3, [r6, #4]
 801255e:	2770      	movs	r7, #112	; 0x70
 8012560:	43bb      	bics	r3, r7
 8012562:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012564:	6806      	ldr	r6, [r0, #0]
 8012566:	6873      	ldr	r3, [r6, #4]
 8012568:	680f      	ldr	r7, [r1, #0]
 801256a:	433b      	orrs	r3, r7
 801256c:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801256e:	6806      	ldr	r6, [r0, #0]
 8012570:	68b3      	ldr	r3, [r6, #8]
 8012572:	2780      	movs	r7, #128	; 0x80
 8012574:	43bb      	bics	r3, r7
 8012576:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012578:	6806      	ldr	r6, [r0, #0]
 801257a:	68b3      	ldr	r3, [r6, #8]
 801257c:	6849      	ldr	r1, [r1, #4]
 801257e:	430b      	orrs	r3, r1
 8012580:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012582:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012584:	2300      	movs	r3, #0
 8012586:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012588:	2000      	movs	r0, #0
}
 801258a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 801258c:	2002      	movs	r0, #2
 801258e:	e7fc      	b.n	801258a <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012590 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012590:	4770      	bx	lr

08012592 <HAL_UART_DeInit>:
{
 8012592:	b570      	push	{r4, r5, r6, lr}
 8012594:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012596:	d016      	beq.n	80125c6 <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 8012598:	2669      	movs	r6, #105	; 0x69
 801259a:	2302      	movs	r3, #2
 801259c:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 801259e:	6802      	ldr	r2, [r0, #0]
 80125a0:	6813      	ldr	r3, [r2, #0]
 80125a2:	2101      	movs	r1, #1
 80125a4:	438b      	bics	r3, r1
 80125a6:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80125a8:	6803      	ldr	r3, [r0, #0]
 80125aa:	2500      	movs	r5, #0
 80125ac:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80125ae:	6803      	ldr	r3, [r0, #0]
 80125b0:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80125b2:	6803      	ldr	r3, [r0, #0]
 80125b4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80125b6:	f7ff ffeb 	bl	8012590 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125ba:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80125bc:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80125be:	2368      	movs	r3, #104	; 0x68
 80125c0:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80125c2:	2000      	movs	r0, #0
}
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80125c6:	2001      	movs	r0, #1
 80125c8:	e7fc      	b.n	80125c4 <HAL_UART_DeInit+0x32>

080125ca <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80125ca:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80125cc:	2369      	movs	r3, #105	; 0x69
 80125ce:	5cc3      	ldrb	r3, [r0, r3]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d003      	beq.n	80125dc <HAL_UART_Transmit_IT+0x12>
 80125d4:	2369      	movs	r3, #105	; 0x69
 80125d6:	5cc3      	ldrb	r3, [r0, r3]
 80125d8:	2b22      	cmp	r3, #34	; 0x22
 80125da:	d12b      	bne.n	8012634 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 80125dc:	2900      	cmp	r1, #0
 80125de:	d02b      	beq.n	8012638 <HAL_UART_Transmit_IT+0x6e>
 80125e0:	2a00      	cmp	r2, #0
 80125e2:	d02b      	beq.n	801263c <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80125e4:	2368      	movs	r3, #104	; 0x68
 80125e6:	5cc3      	ldrb	r3, [r0, r3]
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d029      	beq.n	8012640 <HAL_UART_Transmit_IT+0x76>
 80125ec:	2368      	movs	r3, #104	; 0x68
 80125ee:	2401      	movs	r4, #1
 80125f0:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 80125f2:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 80125f4:	3b18      	subs	r3, #24
 80125f6:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80125f8:	3302      	adds	r3, #2
 80125fa:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125fc:	2300      	movs	r3, #0
 80125fe:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012600:	3369      	adds	r3, #105	; 0x69
 8012602:	5cc3      	ldrb	r3, [r0, r3]
 8012604:	2b22      	cmp	r3, #34	; 0x22
 8012606:	d011      	beq.n	801262c <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012608:	2369      	movs	r3, #105	; 0x69
 801260a:	2212      	movs	r2, #18
 801260c:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801260e:	6802      	ldr	r2, [r0, #0]
 8012610:	6893      	ldr	r3, [r2, #8]
 8012612:	2101      	movs	r1, #1
 8012614:	430b      	orrs	r3, r1
 8012616:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012618:	2368      	movs	r3, #104	; 0x68
 801261a:	2200      	movs	r2, #0
 801261c:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801261e:	6802      	ldr	r2, [r0, #0]
 8012620:	6813      	ldr	r3, [r2, #0]
 8012622:	317f      	adds	r1, #127	; 0x7f
 8012624:	430b      	orrs	r3, r1
 8012626:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8012628:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801262a:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801262c:	3347      	adds	r3, #71	; 0x47
 801262e:	2232      	movs	r2, #50	; 0x32
 8012630:	54c2      	strb	r2, [r0, r3]
 8012632:	e7ec      	b.n	801260e <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 8012634:	2002      	movs	r0, #2
 8012636:	e7f8      	b.n	801262a <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 8012638:	2001      	movs	r0, #1
 801263a:	e7f6      	b.n	801262a <HAL_UART_Transmit_IT+0x60>
 801263c:	2001      	movs	r0, #1
 801263e:	e7f4      	b.n	801262a <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8012640:	2002      	movs	r0, #2
 8012642:	e7f2      	b.n	801262a <HAL_UART_Transmit_IT+0x60>

08012644 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012644:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012646:	2369      	movs	r3, #105	; 0x69
 8012648:	5cc3      	ldrb	r3, [r0, r3]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d003      	beq.n	8012656 <HAL_UART_Receive_IT+0x12>
 801264e:	2369      	movs	r3, #105	; 0x69
 8012650:	5cc3      	ldrb	r3, [r0, r3]
 8012652:	2b12      	cmp	r3, #18
 8012654:	d15d      	bne.n	8012712 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 8012656:	2900      	cmp	r1, #0
 8012658:	d05d      	beq.n	8012716 <HAL_UART_Receive_IT+0xd2>
 801265a:	2a00      	cmp	r2, #0
 801265c:	d05d      	beq.n	801271a <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801265e:	2368      	movs	r3, #104	; 0x68
 8012660:	5cc3      	ldrb	r3, [r0, r3]
 8012662:	2b01      	cmp	r3, #1
 8012664:	d05b      	beq.n	801271e <HAL_UART_Receive_IT+0xda>
 8012666:	2368      	movs	r3, #104	; 0x68
 8012668:	2401      	movs	r4, #1
 801266a:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 801266c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 801266e:	3b10      	subs	r3, #16
 8012670:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8012672:	3302      	adds	r3, #2
 8012674:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8012676:	6883      	ldr	r3, [r0, #8]
 8012678:	2280      	movs	r2, #128	; 0x80
 801267a:	0152      	lsls	r2, r2, #5
 801267c:	4293      	cmp	r3, r2
 801267e:	d008      	beq.n	8012692 <HAL_UART_Receive_IT+0x4e>
 8012680:	2b00      	cmp	r3, #0
 8012682:	d115      	bne.n	80126b0 <HAL_UART_Receive_IT+0x6c>
 8012684:	6903      	ldr	r3, [r0, #16]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d10e      	bne.n	80126a8 <HAL_UART_Receive_IT+0x64>
 801268a:	335c      	adds	r3, #92	; 0x5c
 801268c:	22ff      	movs	r2, #255	; 0xff
 801268e:	52c2      	strh	r2, [r0, r3]
 8012690:	e012      	b.n	80126b8 <HAL_UART_Receive_IT+0x74>
 8012692:	6903      	ldr	r3, [r0, #16]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d103      	bne.n	80126a0 <HAL_UART_Receive_IT+0x5c>
 8012698:	335c      	adds	r3, #92	; 0x5c
 801269a:	4a22      	ldr	r2, [pc, #136]	; (8012724 <HAL_UART_Receive_IT+0xe0>)
 801269c:	52c2      	strh	r2, [r0, r3]
 801269e:	e00b      	b.n	80126b8 <HAL_UART_Receive_IT+0x74>
 80126a0:	235c      	movs	r3, #92	; 0x5c
 80126a2:	22ff      	movs	r2, #255	; 0xff
 80126a4:	52c2      	strh	r2, [r0, r3]
 80126a6:	e007      	b.n	80126b8 <HAL_UART_Receive_IT+0x74>
 80126a8:	235c      	movs	r3, #92	; 0x5c
 80126aa:	227f      	movs	r2, #127	; 0x7f
 80126ac:	52c2      	strh	r2, [r0, r3]
 80126ae:	e003      	b.n	80126b8 <HAL_UART_Receive_IT+0x74>
 80126b0:	2280      	movs	r2, #128	; 0x80
 80126b2:	0552      	lsls	r2, r2, #21
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d01d      	beq.n	80126f4 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126b8:	2300      	movs	r3, #0
 80126ba:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80126bc:	3369      	adds	r3, #105	; 0x69
 80126be:	5cc3      	ldrb	r3, [r0, r3]
 80126c0:	2b12      	cmp	r3, #18
 80126c2:	d022      	beq.n	801270a <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80126c4:	2369      	movs	r3, #105	; 0x69
 80126c6:	2222      	movs	r2, #34	; 0x22
 80126c8:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80126ca:	6802      	ldr	r2, [r0, #0]
 80126cc:	6811      	ldr	r1, [r2, #0]
 80126ce:	2380      	movs	r3, #128	; 0x80
 80126d0:	005b      	lsls	r3, r3, #1
 80126d2:	430b      	orrs	r3, r1
 80126d4:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80126d6:	6802      	ldr	r2, [r0, #0]
 80126d8:	6893      	ldr	r3, [r2, #8]
 80126da:	2101      	movs	r1, #1
 80126dc:	430b      	orrs	r3, r1
 80126de:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80126e0:	2368      	movs	r3, #104	; 0x68
 80126e2:	2200      	movs	r2, #0
 80126e4:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80126e6:	6802      	ldr	r2, [r0, #0]
 80126e8:	6813      	ldr	r3, [r2, #0]
 80126ea:	311f      	adds	r1, #31
 80126ec:	430b      	orrs	r3, r1
 80126ee:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 80126f0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80126f2:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80126f4:	6903      	ldr	r3, [r0, #16]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d103      	bne.n	8012702 <HAL_UART_Receive_IT+0xbe>
 80126fa:	335c      	adds	r3, #92	; 0x5c
 80126fc:	227f      	movs	r2, #127	; 0x7f
 80126fe:	52c2      	strh	r2, [r0, r3]
 8012700:	e7da      	b.n	80126b8 <HAL_UART_Receive_IT+0x74>
 8012702:	235c      	movs	r3, #92	; 0x5c
 8012704:	223f      	movs	r2, #63	; 0x3f
 8012706:	52c2      	strh	r2, [r0, r3]
 8012708:	e7d6      	b.n	80126b8 <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801270a:	3357      	adds	r3, #87	; 0x57
 801270c:	2232      	movs	r2, #50	; 0x32
 801270e:	54c2      	strb	r2, [r0, r3]
 8012710:	e7db      	b.n	80126ca <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8012712:	2002      	movs	r0, #2
 8012714:	e7ed      	b.n	80126f2 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 8012716:	2001      	movs	r0, #1
 8012718:	e7eb      	b.n	80126f2 <HAL_UART_Receive_IT+0xae>
 801271a:	2001      	movs	r0, #1
 801271c:	e7e9      	b.n	80126f2 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 801271e:	2002      	movs	r0, #2
 8012720:	e7e7      	b.n	80126f2 <HAL_UART_Receive_IT+0xae>
 8012722:	46c0      	nop			; (mov r8, r8)
 8012724:	000001ff 	.word	0x000001ff

08012728 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012728:	b510      	push	{r4, lr}
 801272a:	0004      	movs	r4, r0
 801272c:	0008      	movs	r0, r1
 801272e:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012730:	2269      	movs	r2, #105	; 0x69
 8012732:	5ca2      	ldrb	r2, [r4, r2]
 8012734:	2a01      	cmp	r2, #1
 8012736:	d003      	beq.n	8012740 <HAL_UART_Receive_DMA+0x18>
 8012738:	2269      	movs	r2, #105	; 0x69
 801273a:	5ca2      	ldrb	r2, [r4, r2]
 801273c:	2a12      	cmp	r2, #18
 801273e:	d133      	bne.n	80127a8 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8012740:	2800      	cmp	r0, #0
 8012742:	d033      	beq.n	80127ac <HAL_UART_Receive_DMA+0x84>
 8012744:	2b00      	cmp	r3, #0
 8012746:	d033      	beq.n	80127b0 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012748:	2268      	movs	r2, #104	; 0x68
 801274a:	5ca2      	ldrb	r2, [r4, r2]
 801274c:	2a01      	cmp	r2, #1
 801274e:	d031      	beq.n	80127b4 <HAL_UART_Receive_DMA+0x8c>
 8012750:	2268      	movs	r2, #104	; 0x68
 8012752:	2101      	movs	r1, #1
 8012754:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 8012756:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8012758:	3a10      	subs	r2, #16
 801275a:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801275c:	2200      	movs	r2, #0
 801275e:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8012760:	3269      	adds	r2, #105	; 0x69
 8012762:	5ca2      	ldrb	r2, [r4, r2]
 8012764:	2a12      	cmp	r2, #18
 8012766:	d01b      	beq.n	80127a0 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012768:	2269      	movs	r2, #105	; 0x69
 801276a:	2122      	movs	r1, #34	; 0x22
 801276c:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801276e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012770:	4911      	ldr	r1, [pc, #68]	; (80127b8 <HAL_UART_Receive_DMA+0x90>)
 8012772:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012774:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012776:	4911      	ldr	r1, [pc, #68]	; (80127bc <HAL_UART_Receive_DMA+0x94>)
 8012778:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801277a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801277c:	4910      	ldr	r1, [pc, #64]	; (80127c0 <HAL_UART_Receive_DMA+0x98>)
 801277e:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8012780:	6821      	ldr	r1, [r4, #0]
 8012782:	3124      	adds	r1, #36	; 0x24
 8012784:	0002      	movs	r2, r0
 8012786:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8012788:	f7fe f896 	bl	80108b8 <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801278c:	6822      	ldr	r2, [r4, #0]
 801278e:	6893      	ldr	r3, [r2, #8]
 8012790:	2140      	movs	r1, #64	; 0x40
 8012792:	430b      	orrs	r3, r1
 8012794:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 8012796:	2368      	movs	r3, #104	; 0x68
 8012798:	2200      	movs	r2, #0
 801279a:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 801279c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801279e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80127a0:	3257      	adds	r2, #87	; 0x57
 80127a2:	3131      	adds	r1, #49	; 0x31
 80127a4:	54a1      	strb	r1, [r4, r2]
 80127a6:	e7e2      	b.n	801276e <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 80127a8:	2002      	movs	r0, #2
 80127aa:	e7f8      	b.n	801279e <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 80127ac:	2001      	movs	r0, #1
 80127ae:	e7f6      	b.n	801279e <HAL_UART_Receive_DMA+0x76>
 80127b0:	2001      	movs	r0, #1
 80127b2:	e7f4      	b.n	801279e <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 80127b4:	2002      	movs	r0, #2
 80127b6:	e7f2      	b.n	801279e <HAL_UART_Receive_DMA+0x76>
 80127b8:	080127c5 	.word	0x080127c5
 80127bc:	08012801 	.word	0x08012801
 80127c0:	0801280b 	.word	0x0801280b

080127c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80127c4:	b510      	push	{r4, lr}
 80127c6:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80127c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	069b      	lsls	r3, r3, #26
 80127d0:	d40e      	bmi.n	80127f0 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 80127d2:	235a      	movs	r3, #90	; 0x5a
 80127d4:	2200      	movs	r2, #0
 80127d6:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 80127d8:	6802      	ldr	r2, [r0, #0]
 80127da:	6893      	ldr	r3, [r2, #8]
 80127dc:	2140      	movs	r1, #64	; 0x40
 80127de:	438b      	bics	r3, r1
 80127e0:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80127e2:	2369      	movs	r3, #105	; 0x69
 80127e4:	5cc3      	ldrb	r3, [r0, r3]
 80127e6:	2b32      	cmp	r3, #50	; 0x32
 80127e8:	d005      	beq.n	80127f6 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80127ea:	2369      	movs	r3, #105	; 0x69
 80127ec:	2201      	movs	r2, #1
 80127ee:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 80127f0:	f7fa fe32 	bl	800d458 <HAL_UART_RxCpltCallback>
}
 80127f4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 80127f6:	3337      	adds	r3, #55	; 0x37
 80127f8:	2212      	movs	r2, #18
 80127fa:	54c2      	strb	r2, [r0, r3]
 80127fc:	e7f8      	b.n	80127f0 <UART_DMAReceiveCplt+0x2c>

080127fe <HAL_UART_RxHalfCpltCallback>:
}
 80127fe:	4770      	bx	lr

08012800 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012800:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8012802:	6a40      	ldr	r0, [r0, #36]	; 0x24

  HAL_UART_RxHalfCpltCallback(huart);
 8012804:	f7ff fffb 	bl	80127fe <HAL_UART_RxHalfCpltCallback>
}
 8012808:	bd10      	pop	{r4, pc}

0801280a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801280a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801280c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801280e:	2300      	movs	r3, #0
 8012810:	225a      	movs	r2, #90	; 0x5a
 8012812:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8012814:	3a08      	subs	r2, #8
 8012816:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8012818:	3369      	adds	r3, #105	; 0x69
 801281a:	3a51      	subs	r2, #81	; 0x51
 801281c:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801281e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012820:	320f      	adds	r2, #15
 8012822:	4313      	orrs	r3, r2
 8012824:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8012826:	f7fa fdf3 	bl	800d410 <HAL_UART_ErrorCallback>
}
 801282a:	bd10      	pop	{r4, pc}

0801282c <UART_SetConfig>:
{
 801282c:	b570      	push	{r4, r5, r6, lr}
 801282e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012830:	6883      	ldr	r3, [r0, #8]
 8012832:	6902      	ldr	r2, [r0, #16]
 8012834:	4313      	orrs	r3, r2
 8012836:	6942      	ldr	r2, [r0, #20]
 8012838:	4313      	orrs	r3, r2
 801283a:	69c2      	ldr	r2, [r0, #28]
 801283c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 801283e:	6801      	ldr	r1, [r0, #0]
 8012840:	680a      	ldr	r2, [r1, #0]
 8012842:	4886      	ldr	r0, [pc, #536]	; (8012a5c <UART_SetConfig+0x230>)
 8012844:	4002      	ands	r2, r0
 8012846:	4313      	orrs	r3, r2
 8012848:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801284a:	6822      	ldr	r2, [r4, #0]
 801284c:	6853      	ldr	r3, [r2, #4]
 801284e:	4984      	ldr	r1, [pc, #528]	; (8012a60 <UART_SetConfig+0x234>)
 8012850:	400b      	ands	r3, r1
 8012852:	68e1      	ldr	r1, [r4, #12]
 8012854:	430b      	orrs	r3, r1
 8012856:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8012858:	69a2      	ldr	r2, [r4, #24]
 801285a:	6a23      	ldr	r3, [r4, #32]
 801285c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 801285e:	6821      	ldr	r1, [r4, #0]
 8012860:	688b      	ldr	r3, [r1, #8]
 8012862:	4880      	ldr	r0, [pc, #512]	; (8012a64 <UART_SetConfig+0x238>)
 8012864:	4003      	ands	r3, r0
 8012866:	4313      	orrs	r3, r2
 8012868:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 801286a:	6826      	ldr	r6, [r4, #0]
 801286c:	4b7e      	ldr	r3, [pc, #504]	; (8012a68 <UART_SetConfig+0x23c>)
 801286e:	429e      	cmp	r6, r3
 8012870:	d01a      	beq.n	80128a8 <UART_SetConfig+0x7c>
 8012872:	4b7e      	ldr	r3, [pc, #504]	; (8012a6c <UART_SetConfig+0x240>)
 8012874:	429e      	cmp	r6, r3
 8012876:	d040      	beq.n	80128fa <UART_SetConfig+0xce>
 8012878:	4b7d      	ldr	r3, [pc, #500]	; (8012a70 <UART_SetConfig+0x244>)
 801287a:	429e      	cmp	r6, r3
 801287c:	d055      	beq.n	801292a <UART_SetConfig+0xfe>
 801287e:	4b7d      	ldr	r3, [pc, #500]	; (8012a74 <UART_SetConfig+0x248>)
 8012880:	429e      	cmp	r6, r3
 8012882:	d100      	bne.n	8012886 <UART_SetConfig+0x5a>
 8012884:	e083      	b.n	801298e <UART_SetConfig+0x162>
 8012886:	4b7c      	ldr	r3, [pc, #496]	; (8012a78 <UART_SetConfig+0x24c>)
 8012888:	429e      	cmp	r6, r3
 801288a:	d100      	bne.n	801288e <UART_SetConfig+0x62>
 801288c:	e081      	b.n	8012992 <UART_SetConfig+0x166>
 801288e:	4b7b      	ldr	r3, [pc, #492]	; (8012a7c <UART_SetConfig+0x250>)
 8012890:	429e      	cmp	r6, r3
 8012892:	d100      	bne.n	8012896 <UART_SetConfig+0x6a>
 8012894:	e07f      	b.n	8012996 <UART_SetConfig+0x16a>
 8012896:	4b7a      	ldr	r3, [pc, #488]	; (8012a80 <UART_SetConfig+0x254>)
 8012898:	429e      	cmp	r6, r3
 801289a:	d100      	bne.n	801289e <UART_SetConfig+0x72>
 801289c:	e07d      	b.n	801299a <UART_SetConfig+0x16e>
 801289e:	4b79      	ldr	r3, [pc, #484]	; (8012a84 <UART_SetConfig+0x258>)
 80128a0:	429e      	cmp	r6, r3
 80128a2:	d05a      	beq.n	801295a <UART_SetConfig+0x12e>
 80128a4:	2510      	movs	r5, #16
 80128a6:	e00b      	b.n	80128c0 <UART_SetConfig+0x94>
 80128a8:	4b77      	ldr	r3, [pc, #476]	; (8012a88 <UART_SetConfig+0x25c>)
 80128aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80128ac:	2303      	movs	r3, #3
 80128ae:	4013      	ands	r3, r2
 80128b0:	2b02      	cmp	r3, #2
 80128b2:	d054      	beq.n	801295e <UART_SetConfig+0x132>
 80128b4:	d81d      	bhi.n	80128f2 <UART_SetConfig+0xc6>
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d053      	beq.n	8012962 <UART_SetConfig+0x136>
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d153      	bne.n	8012966 <UART_SetConfig+0x13a>
 80128be:	2504      	movs	r5, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80128c0:	2380      	movs	r3, #128	; 0x80
 80128c2:	021b      	lsls	r3, r3, #8
 80128c4:	69e2      	ldr	r2, [r4, #28]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d069      	beq.n	801299e <UART_SetConfig+0x172>
    switch (clocksource)
 80128ca:	2d04      	cmp	r5, #4
 80128cc:	d100      	bne.n	80128d0 <UART_SetConfig+0xa4>
 80128ce:	e0b9      	b.n	8012a44 <UART_SetConfig+0x218>
 80128d0:	d900      	bls.n	80128d4 <UART_SetConfig+0xa8>
 80128d2:	e09f      	b.n	8012a14 <UART_SetConfig+0x1e8>
 80128d4:	2d00      	cmp	r5, #0
 80128d6:	d100      	bne.n	80128da <UART_SetConfig+0xae>
 80128d8:	e0aa      	b.n	8012a30 <UART_SetConfig+0x204>
 80128da:	2d02      	cmp	r5, #2
 80128dc:	d000      	beq.n	80128e0 <UART_SetConfig+0xb4>
 80128de:	e097      	b.n	8012a10 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 80128e0:	6861      	ldr	r1, [r4, #4]
 80128e2:	486a      	ldr	r0, [pc, #424]	; (8012a8c <UART_SetConfig+0x260>)
 80128e4:	f7ed fc34 	bl	8000150 <__udivsi3>
 80128e8:	0400      	lsls	r0, r0, #16
 80128ea:	0c00      	lsrs	r0, r0, #16
 80128ec:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80128ee:	2500      	movs	r5, #0
        break;
 80128f0:	e07b      	b.n	80129ea <UART_SetConfig+0x1be>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80128f2:	2b03      	cmp	r3, #3
 80128f4:	d139      	bne.n	801296a <UART_SetConfig+0x13e>
 80128f6:	2502      	movs	r5, #2
 80128f8:	e7e2      	b.n	80128c0 <UART_SetConfig+0x94>
 80128fa:	4b63      	ldr	r3, [pc, #396]	; (8012a88 <UART_SetConfig+0x25c>)
 80128fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128fe:	22c0      	movs	r2, #192	; 0xc0
 8012900:	0292      	lsls	r2, r2, #10
 8012902:	4013      	ands	r3, r2
 8012904:	2280      	movs	r2, #128	; 0x80
 8012906:	0292      	lsls	r2, r2, #10
 8012908:	4293      	cmp	r3, r2
 801290a:	d030      	beq.n	801296e <UART_SetConfig+0x142>
 801290c:	d807      	bhi.n	801291e <UART_SetConfig+0xf2>
 801290e:	2b00      	cmp	r3, #0
 8012910:	d02f      	beq.n	8012972 <UART_SetConfig+0x146>
 8012912:	2280      	movs	r2, #128	; 0x80
 8012914:	0252      	lsls	r2, r2, #9
 8012916:	4293      	cmp	r3, r2
 8012918:	d12d      	bne.n	8012976 <UART_SetConfig+0x14a>
 801291a:	2504      	movs	r5, #4
 801291c:	e7d0      	b.n	80128c0 <UART_SetConfig+0x94>
 801291e:	22c0      	movs	r2, #192	; 0xc0
 8012920:	0292      	lsls	r2, r2, #10
 8012922:	4293      	cmp	r3, r2
 8012924:	d129      	bne.n	801297a <UART_SetConfig+0x14e>
 8012926:	2502      	movs	r5, #2
 8012928:	e7ca      	b.n	80128c0 <UART_SetConfig+0x94>
 801292a:	4b57      	ldr	r3, [pc, #348]	; (8012a88 <UART_SetConfig+0x25c>)
 801292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801292e:	22c0      	movs	r2, #192	; 0xc0
 8012930:	0312      	lsls	r2, r2, #12
 8012932:	4013      	ands	r3, r2
 8012934:	2280      	movs	r2, #128	; 0x80
 8012936:	0312      	lsls	r2, r2, #12
 8012938:	4293      	cmp	r3, r2
 801293a:	d020      	beq.n	801297e <UART_SetConfig+0x152>
 801293c:	d807      	bhi.n	801294e <UART_SetConfig+0x122>
 801293e:	2b00      	cmp	r3, #0
 8012940:	d01f      	beq.n	8012982 <UART_SetConfig+0x156>
 8012942:	2280      	movs	r2, #128	; 0x80
 8012944:	02d2      	lsls	r2, r2, #11
 8012946:	4293      	cmp	r3, r2
 8012948:	d11d      	bne.n	8012986 <UART_SetConfig+0x15a>
 801294a:	2504      	movs	r5, #4
 801294c:	e7b8      	b.n	80128c0 <UART_SetConfig+0x94>
 801294e:	22c0      	movs	r2, #192	; 0xc0
 8012950:	0312      	lsls	r2, r2, #12
 8012952:	4293      	cmp	r3, r2
 8012954:	d119      	bne.n	801298a <UART_SetConfig+0x15e>
 8012956:	2502      	movs	r5, #2
 8012958:	e7b2      	b.n	80128c0 <UART_SetConfig+0x94>
 801295a:	2500      	movs	r5, #0
 801295c:	e7b0      	b.n	80128c0 <UART_SetConfig+0x94>
 801295e:	2508      	movs	r5, #8
 8012960:	e7ae      	b.n	80128c0 <UART_SetConfig+0x94>
 8012962:	2500      	movs	r5, #0
 8012964:	e7ac      	b.n	80128c0 <UART_SetConfig+0x94>
 8012966:	2510      	movs	r5, #16
 8012968:	e7aa      	b.n	80128c0 <UART_SetConfig+0x94>
 801296a:	2510      	movs	r5, #16
 801296c:	e7a8      	b.n	80128c0 <UART_SetConfig+0x94>
 801296e:	2508      	movs	r5, #8
 8012970:	e7a6      	b.n	80128c0 <UART_SetConfig+0x94>
 8012972:	2500      	movs	r5, #0
 8012974:	e7a4      	b.n	80128c0 <UART_SetConfig+0x94>
 8012976:	2510      	movs	r5, #16
 8012978:	e7a2      	b.n	80128c0 <UART_SetConfig+0x94>
 801297a:	2510      	movs	r5, #16
 801297c:	e7a0      	b.n	80128c0 <UART_SetConfig+0x94>
 801297e:	2508      	movs	r5, #8
 8012980:	e79e      	b.n	80128c0 <UART_SetConfig+0x94>
 8012982:	2500      	movs	r5, #0
 8012984:	e79c      	b.n	80128c0 <UART_SetConfig+0x94>
 8012986:	2510      	movs	r5, #16
 8012988:	e79a      	b.n	80128c0 <UART_SetConfig+0x94>
 801298a:	2510      	movs	r5, #16
 801298c:	e798      	b.n	80128c0 <UART_SetConfig+0x94>
 801298e:	2500      	movs	r5, #0
 8012990:	e796      	b.n	80128c0 <UART_SetConfig+0x94>
 8012992:	2500      	movs	r5, #0
 8012994:	e794      	b.n	80128c0 <UART_SetConfig+0x94>
 8012996:	2500      	movs	r5, #0
 8012998:	e792      	b.n	80128c0 <UART_SetConfig+0x94>
 801299a:	2500      	movs	r5, #0
 801299c:	e790      	b.n	80128c0 <UART_SetConfig+0x94>
    switch (clocksource)
 801299e:	2d04      	cmp	r5, #4
 80129a0:	d02d      	beq.n	80129fe <UART_SetConfig+0x1d2>
 80129a2:	d80d      	bhi.n	80129c0 <UART_SetConfig+0x194>
 80129a4:	2d00      	cmp	r5, #0
 80129a6:	d022      	beq.n	80129ee <UART_SetConfig+0x1c2>
 80129a8:	2d02      	cmp	r5, #2
 80129aa:	d106      	bne.n	80129ba <UART_SetConfig+0x18e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80129ac:	6861      	ldr	r1, [r4, #4]
 80129ae:	4838      	ldr	r0, [pc, #224]	; (8012a90 <UART_SetConfig+0x264>)
 80129b0:	f7ed fbce 	bl	8000150 <__udivsi3>
 80129b4:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80129b6:	2500      	movs	r5, #0
        break;
 80129b8:	e00e      	b.n	80129d8 <UART_SetConfig+0x1ac>
    switch (clocksource)
 80129ba:	2501      	movs	r5, #1
 80129bc:	2000      	movs	r0, #0
 80129be:	e00b      	b.n	80129d8 <UART_SetConfig+0x1ac>
 80129c0:	2d08      	cmp	r5, #8
 80129c2:	d107      	bne.n	80129d4 <UART_SetConfig+0x1a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80129c4:	6861      	ldr	r1, [r4, #4]
 80129c6:	2080      	movs	r0, #128	; 0x80
 80129c8:	0240      	lsls	r0, r0, #9
 80129ca:	f7ed fbc1 	bl	8000150 <__udivsi3>
 80129ce:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80129d0:	2500      	movs	r5, #0
        break;
 80129d2:	e001      	b.n	80129d8 <UART_SetConfig+0x1ac>
    switch (clocksource)
 80129d4:	2501      	movs	r5, #1
 80129d6:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80129d8:	230f      	movs	r3, #15
 80129da:	0002      	movs	r2, r0
 80129dc:	439a      	bics	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80129de:	1040      	asrs	r0, r0, #1
 80129e0:	3b08      	subs	r3, #8
 80129e2:	4018      	ands	r0, r3
 80129e4:	4310      	orrs	r0, r2
    huart->Instance->BRR = brrtemp;
 80129e6:	6823      	ldr	r3, [r4, #0]
 80129e8:	60d8      	str	r0, [r3, #12]
}
 80129ea:	0028      	movs	r0, r5
 80129ec:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80129ee:	f7ff faab 	bl	8011f48 <HAL_RCC_GetPCLK1Freq>
 80129f2:	0040      	lsls	r0, r0, #1
 80129f4:	6861      	ldr	r1, [r4, #4]
 80129f6:	f7ed fbab 	bl	8000150 <__udivsi3>
 80129fa:	b280      	uxth	r0, r0
        break;
 80129fc:	e7ec      	b.n	80129d8 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80129fe:	f7ff fa45 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 8012a02:	0040      	lsls	r0, r0, #1
 8012a04:	6861      	ldr	r1, [r4, #4]
 8012a06:	f7ed fba3 	bl	8000150 <__udivsi3>
 8012a0a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a0c:	2500      	movs	r5, #0
        break;
 8012a0e:	e7e3      	b.n	80129d8 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8012a10:	2501      	movs	r5, #1
 8012a12:	e7ea      	b.n	80129ea <UART_SetConfig+0x1be>
 8012a14:	2d08      	cmp	r5, #8
 8012a16:	d109      	bne.n	8012a2c <UART_SetConfig+0x200>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8012a18:	6861      	ldr	r1, [r4, #4]
 8012a1a:	2080      	movs	r0, #128	; 0x80
 8012a1c:	0200      	lsls	r0, r0, #8
 8012a1e:	f7ed fb97 	bl	8000150 <__udivsi3>
 8012a22:	0400      	lsls	r0, r0, #16
 8012a24:	0c00      	lsrs	r0, r0, #16
 8012a26:	60f0      	str	r0, [r6, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a28:	2500      	movs	r5, #0
        break;
 8012a2a:	e7de      	b.n	80129ea <UART_SetConfig+0x1be>
    switch (clocksource)
 8012a2c:	2501      	movs	r5, #1
 8012a2e:	e7dc      	b.n	80129ea <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8012a30:	f7ff fa8a 	bl	8011f48 <HAL_RCC_GetPCLK1Freq>
 8012a34:	6861      	ldr	r1, [r4, #4]
 8012a36:	f7ed fb8b 	bl	8000150 <__udivsi3>
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	0400      	lsls	r0, r0, #16
 8012a3e:	0c00      	lsrs	r0, r0, #16
 8012a40:	60d8      	str	r0, [r3, #12]
        break;
 8012a42:	e7d2      	b.n	80129ea <UART_SetConfig+0x1be>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8012a44:	f7ff fa22 	bl	8011e8c <HAL_RCC_GetSysClockFreq>
 8012a48:	6861      	ldr	r1, [r4, #4]
 8012a4a:	f7ed fb81 	bl	8000150 <__udivsi3>
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	0400      	lsls	r0, r0, #16
 8012a52:	0c00      	lsrs	r0, r0, #16
 8012a54:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8012a56:	2500      	movs	r5, #0
        break;
 8012a58:	e7c7      	b.n	80129ea <UART_SetConfig+0x1be>
 8012a5a:	46c0      	nop			; (mov r8, r8)
 8012a5c:	efff69f3 	.word	0xefff69f3
 8012a60:	ffffcfff 	.word	0xffffcfff
 8012a64:	fffff4ff 	.word	0xfffff4ff
 8012a68:	40013800 	.word	0x40013800
 8012a6c:	40004400 	.word	0x40004400
 8012a70:	40004800 	.word	0x40004800
 8012a74:	40004c00 	.word	0x40004c00
 8012a78:	40005000 	.word	0x40005000
 8012a7c:	40011400 	.word	0x40011400
 8012a80:	40011800 	.word	0x40011800
 8012a84:	40011c00 	.word	0x40011c00
 8012a88:	40021000 	.word	0x40021000
 8012a8c:	007a1200 	.word	0x007a1200
 8012a90:	00f42400 	.word	0x00f42400

08012a94 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012a96:	07db      	lsls	r3, r3, #31
 8012a98:	d506      	bpl.n	8012aa8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012a9a:	6802      	ldr	r2, [r0, #0]
 8012a9c:	6853      	ldr	r3, [r2, #4]
 8012a9e:	492c      	ldr	r1, [pc, #176]	; (8012b50 <UART_AdvFeatureConfig+0xbc>)
 8012aa0:	400b      	ands	r3, r1
 8012aa2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012aa4:	430b      	orrs	r3, r1
 8012aa6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012aaa:	079b      	lsls	r3, r3, #30
 8012aac:	d506      	bpl.n	8012abc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012aae:	6802      	ldr	r2, [r0, #0]
 8012ab0:	6853      	ldr	r3, [r2, #4]
 8012ab2:	4928      	ldr	r1, [pc, #160]	; (8012b54 <UART_AdvFeatureConfig+0xc0>)
 8012ab4:	400b      	ands	r3, r1
 8012ab6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8012ab8:	430b      	orrs	r3, r1
 8012aba:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012abc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012abe:	075b      	lsls	r3, r3, #29
 8012ac0:	d506      	bpl.n	8012ad0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012ac2:	6802      	ldr	r2, [r0, #0]
 8012ac4:	6853      	ldr	r3, [r2, #4]
 8012ac6:	4924      	ldr	r1, [pc, #144]	; (8012b58 <UART_AdvFeatureConfig+0xc4>)
 8012ac8:	400b      	ands	r3, r1
 8012aca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012acc:	430b      	orrs	r3, r1
 8012ace:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012ad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012ad2:	071b      	lsls	r3, r3, #28
 8012ad4:	d506      	bpl.n	8012ae4 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012ad6:	6802      	ldr	r2, [r0, #0]
 8012ad8:	6853      	ldr	r3, [r2, #4]
 8012ada:	4920      	ldr	r1, [pc, #128]	; (8012b5c <UART_AdvFeatureConfig+0xc8>)
 8012adc:	400b      	ands	r3, r1
 8012ade:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8012ae0:	430b      	orrs	r3, r1
 8012ae2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012ae4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012ae6:	06db      	lsls	r3, r3, #27
 8012ae8:	d506      	bpl.n	8012af8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012aea:	6802      	ldr	r2, [r0, #0]
 8012aec:	6893      	ldr	r3, [r2, #8]
 8012aee:	491c      	ldr	r1, [pc, #112]	; (8012b60 <UART_AdvFeatureConfig+0xcc>)
 8012af0:	400b      	ands	r3, r1
 8012af2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8012af4:	430b      	orrs	r3, r1
 8012af6:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012af8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012afa:	069b      	lsls	r3, r3, #26
 8012afc:	d506      	bpl.n	8012b0c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012afe:	6802      	ldr	r2, [r0, #0]
 8012b00:	6893      	ldr	r3, [r2, #8]
 8012b02:	4918      	ldr	r1, [pc, #96]	; (8012b64 <UART_AdvFeatureConfig+0xd0>)
 8012b04:	400b      	ands	r3, r1
 8012b06:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012b08:	430b      	orrs	r3, r1
 8012b0a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012b0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b0e:	065b      	lsls	r3, r3, #25
 8012b10:	d50b      	bpl.n	8012b2a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012b12:	6802      	ldr	r2, [r0, #0]
 8012b14:	6853      	ldr	r3, [r2, #4]
 8012b16:	4914      	ldr	r1, [pc, #80]	; (8012b68 <UART_AdvFeatureConfig+0xd4>)
 8012b18:	400b      	ands	r3, r1
 8012b1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8012b1c:	430b      	orrs	r3, r1
 8012b1e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012b20:	2380      	movs	r3, #128	; 0x80
 8012b22:	035b      	lsls	r3, r3, #13
 8012b24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d00a      	beq.n	8012b40 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012b2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012b2c:	061b      	lsls	r3, r3, #24
 8012b2e:	d506      	bpl.n	8012b3e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012b30:	6802      	ldr	r2, [r0, #0]
 8012b32:	6853      	ldr	r3, [r2, #4]
 8012b34:	490d      	ldr	r1, [pc, #52]	; (8012b6c <UART_AdvFeatureConfig+0xd8>)
 8012b36:	400b      	ands	r3, r1
 8012b38:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012b3a:	430b      	orrs	r3, r1
 8012b3c:	6053      	str	r3, [r2, #4]
}
 8012b3e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012b40:	6802      	ldr	r2, [r0, #0]
 8012b42:	6853      	ldr	r3, [r2, #4]
 8012b44:	490a      	ldr	r1, [pc, #40]	; (8012b70 <UART_AdvFeatureConfig+0xdc>)
 8012b46:	400b      	ands	r3, r1
 8012b48:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012b4a:	430b      	orrs	r3, r1
 8012b4c:	6053      	str	r3, [r2, #4]
 8012b4e:	e7ec      	b.n	8012b2a <UART_AdvFeatureConfig+0x96>
 8012b50:	fffdffff 	.word	0xfffdffff
 8012b54:	fffeffff 	.word	0xfffeffff
 8012b58:	fffbffff 	.word	0xfffbffff
 8012b5c:	ffff7fff 	.word	0xffff7fff
 8012b60:	ffffefff 	.word	0xffffefff
 8012b64:	ffffdfff 	.word	0xffffdfff
 8012b68:	ffefffff 	.word	0xffefffff
 8012b6c:	fff7ffff 	.word	0xfff7ffff
 8012b70:	ff9fffff 	.word	0xff9fffff

08012b74 <UART_WaitOnFlagUntilTimeout>:
{
 8012b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b76:	46c6      	mov	lr, r8
 8012b78:	b500      	push	{lr}
 8012b7a:	0007      	movs	r7, r0
 8012b7c:	000c      	movs	r4, r1
 8012b7e:	0016      	movs	r6, r2
 8012b80:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012b82:	f7fd f995 	bl	800feb0 <HAL_GetTick>
 8012b86:	4680      	mov	r8, r0
  if(Status == RESET)
 8012b88:	2e00      	cmp	r6, #0
 8012b8a:	d029      	beq.n	8012be0 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	69da      	ldr	r2, [r3, #28]
 8012b90:	4022      	ands	r2, r4
 8012b92:	42a2      	cmp	r2, r4
 8012b94:	d152      	bne.n	8012c3c <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8012b96:	1c6b      	adds	r3, r5, #1
 8012b98:	d0f8      	beq.n	8012b8c <UART_WaitOnFlagUntilTimeout+0x18>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012b9a:	2d00      	cmp	r5, #0
 8012b9c:	d005      	beq.n	8012baa <UART_WaitOnFlagUntilTimeout+0x36>
 8012b9e:	f7fd f987 	bl	800feb0 <HAL_GetTick>
 8012ba2:	4643      	mov	r3, r8
 8012ba4:	1ac0      	subs	r0, r0, r3
 8012ba6:	42a8      	cmp	r0, r5
 8012ba8:	d9f0      	bls.n	8012b8c <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012baa:	683a      	ldr	r2, [r7, #0]
 8012bac:	6813      	ldr	r3, [r2, #0]
 8012bae:	2180      	movs	r1, #128	; 0x80
 8012bb0:	438b      	bics	r3, r1
 8012bb2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012bb4:	683a      	ldr	r2, [r7, #0]
 8012bb6:	6813      	ldr	r3, [r2, #0]
 8012bb8:	3960      	subs	r1, #96	; 0x60
 8012bba:	438b      	bics	r3, r1
 8012bbc:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012bbe:	683a      	ldr	r2, [r7, #0]
 8012bc0:	6813      	ldr	r3, [r2, #0]
 8012bc2:	491f      	ldr	r1, [pc, #124]	; (8012c40 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012bc4:	400b      	ands	r3, r1
 8012bc6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012bc8:	6839      	ldr	r1, [r7, #0]
 8012bca:	688b      	ldr	r3, [r1, #8]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	4393      	bics	r3, r2
 8012bd0:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012bd2:	2369      	movs	r3, #105	; 0x69
 8012bd4:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	2200      	movs	r2, #0
 8012bda:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8012bdc:	2003      	movs	r0, #3
 8012bde:	e02a      	b.n	8012c36 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	69d9      	ldr	r1, [r3, #28]
 8012be4:	4021      	ands	r1, r4
 8012be6:	42a1      	cmp	r1, r4
 8012be8:	d024      	beq.n	8012c34 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8012bea:	1c6b      	adds	r3, r5, #1
 8012bec:	d0f8      	beq.n	8012be0 <UART_WaitOnFlagUntilTimeout+0x6c>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8012bee:	2d00      	cmp	r5, #0
 8012bf0:	d005      	beq.n	8012bfe <UART_WaitOnFlagUntilTimeout+0x8a>
 8012bf2:	f7fd f95d 	bl	800feb0 <HAL_GetTick>
 8012bf6:	4643      	mov	r3, r8
 8012bf8:	1ac0      	subs	r0, r0, r3
 8012bfa:	42a8      	cmp	r0, r5
 8012bfc:	d9f0      	bls.n	8012be0 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012bfe:	683a      	ldr	r2, [r7, #0]
 8012c00:	6813      	ldr	r3, [r2, #0]
 8012c02:	2180      	movs	r1, #128	; 0x80
 8012c04:	438b      	bics	r3, r1
 8012c06:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012c08:	683a      	ldr	r2, [r7, #0]
 8012c0a:	6813      	ldr	r3, [r2, #0]
 8012c0c:	3960      	subs	r1, #96	; 0x60
 8012c0e:	438b      	bics	r3, r1
 8012c10:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012c12:	683a      	ldr	r2, [r7, #0]
 8012c14:	6813      	ldr	r3, [r2, #0]
 8012c16:	490a      	ldr	r1, [pc, #40]	; (8012c40 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8012c18:	400b      	ands	r3, r1
 8012c1a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012c1c:	6839      	ldr	r1, [r7, #0]
 8012c1e:	688b      	ldr	r3, [r1, #8]
 8012c20:	2201      	movs	r2, #1
 8012c22:	4393      	bics	r3, r2
 8012c24:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8012c26:	2369      	movs	r3, #105	; 0x69
 8012c28:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8012c2a:	3b01      	subs	r3, #1
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8012c30:	2003      	movs	r0, #3
 8012c32:	e000      	b.n	8012c36 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8012c34:	0030      	movs	r0, r6
}
 8012c36:	bc80      	pop	{r7}
 8012c38:	46b8      	mov	r8, r7
 8012c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	e7fa      	b.n	8012c36 <UART_WaitOnFlagUntilTimeout+0xc2>
 8012c40:	fffffeff 	.word	0xfffffeff

08012c44 <HAL_UART_Transmit>:
{
 8012c44:	b570      	push	{r4, r5, r6, lr}
 8012c46:	0004      	movs	r4, r0
 8012c48:	000d      	movs	r5, r1
 8012c4a:	001e      	movs	r6, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012c4c:	2369      	movs	r3, #105	; 0x69
 8012c4e:	5cc3      	ldrb	r3, [r0, r3]
 8012c50:	2b01      	cmp	r3, #1
 8012c52:	d003      	beq.n	8012c5c <HAL_UART_Transmit+0x18>
 8012c54:	2369      	movs	r3, #105	; 0x69
 8012c56:	5cc3      	ldrb	r3, [r0, r3]
 8012c58:	2b22      	cmp	r3, #34	; 0x22
 8012c5a:	d154      	bne.n	8012d06 <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8012c5c:	2d00      	cmp	r5, #0
 8012c5e:	d054      	beq.n	8012d0a <HAL_UART_Transmit+0xc6>
 8012c60:	2a00      	cmp	r2, #0
 8012c62:	d054      	beq.n	8012d0e <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 8012c64:	2368      	movs	r3, #104	; 0x68
 8012c66:	5ce3      	ldrb	r3, [r4, r3]
 8012c68:	2b01      	cmp	r3, #1
 8012c6a:	d052      	beq.n	8012d12 <HAL_UART_Transmit+0xce>
 8012c6c:	2368      	movs	r3, #104	; 0x68
 8012c6e:	2101      	movs	r1, #1
 8012c70:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c72:	2300      	movs	r3, #0
 8012c74:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012c76:	3369      	adds	r3, #105	; 0x69
 8012c78:	5ce3      	ldrb	r3, [r4, r3]
 8012c7a:	2b22      	cmp	r3, #34	; 0x22
 8012c7c:	d007      	beq.n	8012c8e <HAL_UART_Transmit+0x4a>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012c7e:	2369      	movs	r3, #105	; 0x69
 8012c80:	2112      	movs	r1, #18
 8012c82:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8012c84:	2350      	movs	r3, #80	; 0x50
 8012c86:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8012c88:	3302      	adds	r3, #2
 8012c8a:	52e2      	strh	r2, [r4, r3]
    while(huart->TxXferCount > 0)
 8012c8c:	e007      	b.n	8012c9e <HAL_UART_Transmit+0x5a>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012c8e:	3347      	adds	r3, #71	; 0x47
 8012c90:	3131      	adds	r1, #49	; 0x31
 8012c92:	54e1      	strb	r1, [r4, r3]
 8012c94:	e7f6      	b.n	8012c84 <HAL_UART_Transmit+0x40>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8012c96:	782b      	ldrb	r3, [r5, #0]
 8012c98:	6822      	ldr	r2, [r4, #0]
 8012c9a:	8513      	strh	r3, [r2, #40]	; 0x28
 8012c9c:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 8012c9e:	2252      	movs	r2, #82	; 0x52
 8012ca0:	5aa2      	ldrh	r2, [r4, r2]
 8012ca2:	2a00      	cmp	r2, #0
 8012ca4:	d019      	beq.n	8012cda <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8012ca6:	3a01      	subs	r2, #1
 8012ca8:	2152      	movs	r1, #82	; 0x52
 8012caa:	5262      	strh	r2, [r4, r1]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8012cac:	0033      	movs	r3, r6
 8012cae:	2200      	movs	r2, #0
 8012cb0:	312e      	adds	r1, #46	; 0x2e
 8012cb2:	0020      	movs	r0, r4
 8012cb4:	f7ff ff5e 	bl	8012b74 <UART_WaitOnFlagUntilTimeout>
 8012cb8:	2800      	cmp	r0, #0
 8012cba:	d12c      	bne.n	8012d16 <HAL_UART_Transmit+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012cbc:	2380      	movs	r3, #128	; 0x80
 8012cbe:	015b      	lsls	r3, r3, #5
 8012cc0:	68a2      	ldr	r2, [r4, #8]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d1e7      	bne.n	8012c96 <HAL_UART_Transmit+0x52>
 8012cc6:	6923      	ldr	r3, [r4, #16]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d1e4      	bne.n	8012c96 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012ccc:	882b      	ldrh	r3, [r5, #0]
 8012cce:	05db      	lsls	r3, r3, #23
 8012cd0:	0ddb      	lsrs	r3, r3, #23
 8012cd2:	6822      	ldr	r2, [r4, #0]
 8012cd4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8012cd6:	3502      	adds	r5, #2
 8012cd8:	e7e1      	b.n	8012c9e <HAL_UART_Transmit+0x5a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8012cda:	0033      	movs	r3, r6
 8012cdc:	2140      	movs	r1, #64	; 0x40
 8012cde:	0020      	movs	r0, r4
 8012ce0:	f7ff ff48 	bl	8012b74 <UART_WaitOnFlagUntilTimeout>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d118      	bne.n	8012d1a <HAL_UART_Transmit+0xd6>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012ce8:	2369      	movs	r3, #105	; 0x69
 8012cea:	5ce3      	ldrb	r3, [r4, r3]
 8012cec:	2b32      	cmp	r3, #50	; 0x32
 8012cee:	d006      	beq.n	8012cfe <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8012cf0:	2369      	movs	r3, #105	; 0x69
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8012cf6:	2368      	movs	r3, #104	; 0x68
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8012cfc:	e004      	b.n	8012d08 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8012cfe:	3337      	adds	r3, #55	; 0x37
 8012d00:	2222      	movs	r2, #34	; 0x22
 8012d02:	54e2      	strb	r2, [r4, r3]
 8012d04:	e7f7      	b.n	8012cf6 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8012d06:	2002      	movs	r0, #2
}
 8012d08:	bd70      	pop	{r4, r5, r6, pc}
      return  HAL_ERROR;
 8012d0a:	2001      	movs	r0, #1
 8012d0c:	e7fc      	b.n	8012d08 <HAL_UART_Transmit+0xc4>
 8012d0e:	2001      	movs	r0, #1
 8012d10:	e7fa      	b.n	8012d08 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8012d12:	2002      	movs	r0, #2
 8012d14:	e7f8      	b.n	8012d08 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8012d16:	2003      	movs	r0, #3
 8012d18:	e7f6      	b.n	8012d08 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8012d1a:	2003      	movs	r0, #3
 8012d1c:	e7f4      	b.n	8012d08 <HAL_UART_Transmit+0xc4>
	...

08012d20 <UART_CheckIdleState>:
{
 8012d20:	b510      	push	{r4, lr}
 8012d22:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d24:	2300      	movs	r3, #0
 8012d26:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8012d28:	6803      	ldr	r3, [r0, #0]
 8012d2a:	4a18      	ldr	r2, [pc, #96]	; (8012d8c <UART_CheckIdleState+0x6c>)
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	d005      	beq.n	8012d3c <UART_CheckIdleState+0x1c>
 8012d30:	4a17      	ldr	r2, [pc, #92]	; (8012d90 <UART_CheckIdleState+0x70>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d002      	beq.n	8012d3c <UART_CheckIdleState+0x1c>
 8012d36:	4a17      	ldr	r2, [pc, #92]	; (8012d94 <UART_CheckIdleState+0x74>)
 8012d38:	4293      	cmp	r3, r2
 8012d3a:	d106      	bne.n	8012d4a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	071b      	lsls	r3, r3, #28
 8012d40:	d40b      	bmi.n	8012d5a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012d42:	6823      	ldr	r3, [r4, #0]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	075b      	lsls	r3, r3, #29
 8012d48:	d413      	bmi.n	8012d72 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8012d4a:	2369      	movs	r3, #105	; 0x69
 8012d4c:	2201      	movs	r2, #1
 8012d4e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8012d50:	3b01      	subs	r3, #1
 8012d52:	2200      	movs	r2, #0
 8012d54:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012d56:	2000      	movs	r0, #0
}
 8012d58:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012d5a:	23fa      	movs	r3, #250	; 0xfa
 8012d5c:	2180      	movs	r1, #128	; 0x80
 8012d5e:	009b      	lsls	r3, r3, #2
 8012d60:	2200      	movs	r2, #0
 8012d62:	0389      	lsls	r1, r1, #14
 8012d64:	0020      	movs	r0, r4
 8012d66:	f7ff ff05 	bl	8012b74 <UART_WaitOnFlagUntilTimeout>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d0e9      	beq.n	8012d42 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8012d6e:	2003      	movs	r0, #3
 8012d70:	e7f2      	b.n	8012d58 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8012d72:	23fa      	movs	r3, #250	; 0xfa
 8012d74:	2180      	movs	r1, #128	; 0x80
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	2200      	movs	r2, #0
 8012d7a:	03c9      	lsls	r1, r1, #15
 8012d7c:	0020      	movs	r0, r4
 8012d7e:	f7ff fef9 	bl	8012b74 <UART_WaitOnFlagUntilTimeout>
 8012d82:	2800      	cmp	r0, #0
 8012d84:	d0e1      	beq.n	8012d4a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8012d86:	2003      	movs	r0, #3
 8012d88:	e7e6      	b.n	8012d58 <UART_CheckIdleState+0x38>
 8012d8a:	46c0      	nop			; (mov r8, r8)
 8012d8c:	40013800 	.word	0x40013800
 8012d90:	40004400 	.word	0x40004400
 8012d94:	40004800 	.word	0x40004800

08012d98 <HAL_UART_Init>:
{
 8012d98:	b510      	push	{r4, lr}
 8012d9a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8012d9c:	d030      	beq.n	8012e00 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8012d9e:	2369      	movs	r3, #105	; 0x69
 8012da0:	5cc3      	ldrb	r3, [r0, r3]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d022      	beq.n	8012dec <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8012da6:	2369      	movs	r3, #105	; 0x69
 8012da8:	2202      	movs	r2, #2
 8012daa:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8012dac:	6822      	ldr	r2, [r4, #0]
 8012dae:	6813      	ldr	r3, [r2, #0]
 8012db0:	2101      	movs	r1, #1
 8012db2:	438b      	bics	r3, r1
 8012db4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012db6:	0020      	movs	r0, r4
 8012db8:	f7ff fd38 	bl	801282c <UART_SetConfig>
 8012dbc:	2801      	cmp	r0, #1
 8012dbe:	d014      	beq.n	8012dea <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d118      	bne.n	8012df8 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8012dc6:	6822      	ldr	r2, [r4, #0]
 8012dc8:	6853      	ldr	r3, [r2, #4]
 8012dca:	490e      	ldr	r1, [pc, #56]	; (8012e04 <HAL_UART_Init+0x6c>)
 8012dcc:	400b      	ands	r3, r1
 8012dce:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8012dd0:	6822      	ldr	r2, [r4, #0]
 8012dd2:	6893      	ldr	r3, [r2, #8]
 8012dd4:	212a      	movs	r1, #42	; 0x2a
 8012dd6:	438b      	bics	r3, r1
 8012dd8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8012dda:	6822      	ldr	r2, [r4, #0]
 8012ddc:	6813      	ldr	r3, [r2, #0]
 8012dde:	3929      	subs	r1, #41	; 0x29
 8012de0:	430b      	orrs	r3, r1
 8012de2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8012de4:	0020      	movs	r0, r4
 8012de6:	f7ff ff9b 	bl	8012d20 <UART_CheckIdleState>
}
 8012dea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8012dec:	3368      	adds	r3, #104	; 0x68
 8012dee:	2200      	movs	r2, #0
 8012df0:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8012df2:	f7fa febb 	bl	800db6c <HAL_UART_MspInit>
 8012df6:	e7d6      	b.n	8012da6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8012df8:	0020      	movs	r0, r4
 8012dfa:	f7ff fe4b 	bl	8012a94 <UART_AdvFeatureConfig>
 8012dfe:	e7e2      	b.n	8012dc6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8012e00:	2001      	movs	r0, #1
 8012e02:	e7f2      	b.n	8012dea <HAL_UART_Init+0x52>
 8012e04:	ffffb7ff 	.word	0xffffb7ff

08012e08 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012e08:	2369      	movs	r3, #105	; 0x69
 8012e0a:	5cc3      	ldrb	r3, [r0, r3]
 8012e0c:	2b12      	cmp	r3, #18
 8012e0e:	d003      	beq.n	8012e18 <UART_Transmit_IT+0x10>
 8012e10:	2369      	movs	r3, #105	; 0x69
 8012e12:	5cc3      	ldrb	r3, [r0, r3]
 8012e14:	2b32      	cmp	r3, #50	; 0x32
 8012e16:	d12d      	bne.n	8012e74 <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8012e18:	2352      	movs	r3, #82	; 0x52
 8012e1a:	5ac3      	ldrh	r3, [r0, r3]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d10b      	bne.n	8012e38 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012e20:	6802      	ldr	r2, [r0, #0]
 8012e22:	6813      	ldr	r3, [r2, #0]
 8012e24:	2180      	movs	r1, #128	; 0x80
 8012e26:	438b      	bics	r3, r1
 8012e28:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8012e2a:	6802      	ldr	r2, [r0, #0]
 8012e2c:	6813      	ldr	r3, [r2, #0]
 8012e2e:	3940      	subs	r1, #64	; 0x40
 8012e30:	430b      	orrs	r3, r1
 8012e32:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8012e34:	2000      	movs	r0, #0
 8012e36:	e00f      	b.n	8012e58 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e38:	2380      	movs	r3, #128	; 0x80
 8012e3a:	015b      	lsls	r3, r3, #5
 8012e3c:	6882      	ldr	r2, [r0, #8]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d00b      	beq.n	8012e5a <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8012e42:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	64c2      	str	r2, [r0, #76]	; 0x4c
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	6802      	ldr	r2, [r0, #0]
 8012e4c:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8012e4e:	2252      	movs	r2, #82	; 0x52
 8012e50:	5a83      	ldrh	r3, [r0, r2]
 8012e52:	3b01      	subs	r3, #1
 8012e54:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8012e56:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8012e58:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012e5a:	6903      	ldr	r3, [r0, #16]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d1f0      	bne.n	8012e42 <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8012e60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012e62:	881b      	ldrh	r3, [r3, #0]
 8012e64:	05db      	lsls	r3, r3, #23
 8012e66:	0ddb      	lsrs	r3, r3, #23
 8012e68:	6802      	ldr	r2, [r0, #0]
 8012e6a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8012e6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012e6e:	3302      	adds	r3, #2
 8012e70:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012e72:	e7ec      	b.n	8012e4e <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8012e74:	2002      	movs	r0, #2
 8012e76:	e7ef      	b.n	8012e58 <UART_Transmit_IT+0x50>

08012e78 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012e78:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8012e7a:	6802      	ldr	r2, [r0, #0]
 8012e7c:	6813      	ldr	r3, [r2, #0]
 8012e7e:	2140      	movs	r1, #64	; 0x40
 8012e80:	438b      	bics	r3, r1
 8012e82:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012e84:	2369      	movs	r3, #105	; 0x69
 8012e86:	5cc3      	ldrb	r3, [r0, r3]
 8012e88:	2b32      	cmp	r3, #50	; 0x32
 8012e8a:	d00a      	beq.n	8012ea2 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012e8c:	6801      	ldr	r1, [r0, #0]
 8012e8e:	688b      	ldr	r3, [r1, #8]
 8012e90:	2201      	movs	r2, #1
 8012e92:	4393      	bics	r3, r2
 8012e94:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8012e96:	2369      	movs	r3, #105	; 0x69
 8012e98:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8012e9a:	f7fa faa1 	bl	800d3e0 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8012e9e:	2000      	movs	r0, #0
 8012ea0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8012ea2:	3337      	adds	r3, #55	; 0x37
 8012ea4:	2222      	movs	r2, #34	; 0x22
 8012ea6:	54c2      	strb	r2, [r0, r3]
 8012ea8:	e7f7      	b.n	8012e9a <UART_EndTransmit_IT+0x22>
	...

08012eac <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8012eac:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8012eae:	235c      	movs	r3, #92	; 0x5c
 8012eb0:	5ac3      	ldrh	r3, [r0, r3]

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8012eb2:	2269      	movs	r2, #105	; 0x69
 8012eb4:	5c82      	ldrb	r2, [r0, r2]
 8012eb6:	2a22      	cmp	r2, #34	; 0x22
 8012eb8:	d003      	beq.n	8012ec2 <UART_Receive_IT+0x16>
 8012eba:	2269      	movs	r2, #105	; 0x69
 8012ebc:	5c82      	ldrb	r2, [r0, r2]
 8012ebe:	2a32      	cmp	r2, #50	; 0x32
 8012ec0:	d13c      	bne.n	8012f3c <UART_Receive_IT+0x90>
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ec2:	2280      	movs	r2, #128	; 0x80
 8012ec4:	0152      	lsls	r2, r2, #5
 8012ec6:	6881      	ldr	r1, [r0, #8]
 8012ec8:	4291      	cmp	r1, r2
 8012eca:	d027      	beq.n	8012f1c <UART_Receive_IT+0x70>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8012ecc:	6802      	ldr	r2, [r0, #0]
 8012ece:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8012ed4:	1c4c      	adds	r4, r1, #1
 8012ed6:	6544      	str	r4, [r0, #84]	; 0x54
 8012ed8:	4013      	ands	r3, r2
 8012eda:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8012edc:	225a      	movs	r2, #90	; 0x5a
 8012ede:	5a83      	ldrh	r3, [r0, r2]
 8012ee0:	3b01      	subs	r3, #1
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	5283      	strh	r3, [r0, r2]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d12a      	bne.n	8012f40 <UART_Receive_IT+0x94>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8012eea:	6802      	ldr	r2, [r0, #0]
 8012eec:	6813      	ldr	r3, [r2, #0]
 8012eee:	2120      	movs	r1, #32
 8012ef0:	438b      	bics	r3, r1
 8012ef2:	6013      	str	r3, [r2, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8012ef4:	2369      	movs	r3, #105	; 0x69
 8012ef6:	5cc3      	ldrb	r3, [r0, r3]
 8012ef8:	2b32      	cmp	r3, #50	; 0x32
 8012efa:	d01b      	beq.n	8012f34 <UART_Receive_IT+0x88>
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8012efc:	6802      	ldr	r2, [r0, #0]
 8012efe:	6813      	ldr	r3, [r2, #0]
 8012f00:	4910      	ldr	r1, [pc, #64]	; (8012f44 <UART_Receive_IT+0x98>)
 8012f02:	400b      	ands	r3, r1
 8012f04:	6013      	str	r3, [r2, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8012f06:	6801      	ldr	r1, [r0, #0]
 8012f08:	688b      	ldr	r3, [r1, #8]
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	4393      	bics	r3, r2
 8012f0e:	608b      	str	r3, [r1, #8]

        huart->State = HAL_UART_STATE_READY;
 8012f10:	2369      	movs	r3, #105	; 0x69
 8012f12:	54c2      	strb	r2, [r0, r3]
      }

      HAL_UART_RxCpltCallback(huart);
 8012f14:	f7fa faa0 	bl	800d458 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8012f18:	2000      	movs	r0, #0
 8012f1a:	e012      	b.n	8012f42 <UART_Receive_IT+0x96>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f1c:	6902      	ldr	r2, [r0, #16]
 8012f1e:	2a00      	cmp	r2, #0
 8012f20:	d1d4      	bne.n	8012ecc <UART_Receive_IT+0x20>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8012f22:	6802      	ldr	r2, [r0, #0]
 8012f24:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8012f26:	4013      	ands	r3, r2
 8012f28:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8012f2a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8012f2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012f2e:	3302      	adds	r3, #2
 8012f30:	6543      	str	r3, [r0, #84]	; 0x54
 8012f32:	e7d3      	b.n	8012edc <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8012f34:	3337      	adds	r3, #55	; 0x37
 8012f36:	2212      	movs	r2, #18
 8012f38:	54c2      	strb	r2, [r0, r3]
 8012f3a:	e7eb      	b.n	8012f14 <UART_Receive_IT+0x68>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012f3c:	2002      	movs	r0, #2
 8012f3e:	e000      	b.n	8012f42 <UART_Receive_IT+0x96>
    return HAL_OK;
 8012f40:	2000      	movs	r0, #0
  }
}
 8012f42:	bd10      	pop	{r4, pc}
 8012f44:	fffffeff 	.word	0xfffffeff

08012f48 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8012f48:	4770      	bx	lr

08012f4a <HAL_UART_IRQHandler>:
{
 8012f4a:	b510      	push	{r4, lr}
 8012f4c:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8012f4e:	6803      	ldr	r3, [r0, #0]
 8012f50:	69da      	ldr	r2, [r3, #28]
 8012f52:	07d2      	lsls	r2, r2, #31
 8012f54:	d509      	bpl.n	8012f6a <HAL_UART_IRQHandler+0x20>
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	05d2      	lsls	r2, r2, #23
 8012f5a:	d506      	bpl.n	8012f6a <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8012f5c:	2201      	movs	r2, #1
 8012f5e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012f60:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8012f62:	4313      	orrs	r3, r2
 8012f64:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012f66:	2369      	movs	r3, #105	; 0x69
 8012f68:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012f6a:	6823      	ldr	r3, [r4, #0]
 8012f6c:	69da      	ldr	r2, [r3, #28]
 8012f6e:	0792      	lsls	r2, r2, #30
 8012f70:	d50b      	bpl.n	8012f8a <HAL_UART_IRQHandler+0x40>
 8012f72:	689a      	ldr	r2, [r3, #8]
 8012f74:	07d2      	lsls	r2, r2, #31
 8012f76:	d508      	bpl.n	8012f8a <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8012f78:	2202      	movs	r2, #2
 8012f7a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012f7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f7e:	3202      	adds	r2, #2
 8012f80:	4313      	orrs	r3, r2
 8012f82:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012f84:	2369      	movs	r3, #105	; 0x69
 8012f86:	3a03      	subs	r2, #3
 8012f88:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012f8a:	6823      	ldr	r3, [r4, #0]
 8012f8c:	69da      	ldr	r2, [r3, #28]
 8012f8e:	0752      	lsls	r2, r2, #29
 8012f90:	d50b      	bpl.n	8012faa <HAL_UART_IRQHandler+0x60>
 8012f92:	689a      	ldr	r2, [r3, #8]
 8012f94:	07d2      	lsls	r2, r2, #31
 8012f96:	d508      	bpl.n	8012faa <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8012f98:	2204      	movs	r2, #4
 8012f9a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012f9c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012f9e:	3a02      	subs	r2, #2
 8012fa0:	4313      	orrs	r3, r2
 8012fa2:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012fa4:	2369      	movs	r3, #105	; 0x69
 8012fa6:	3a01      	subs	r2, #1
 8012fa8:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	69da      	ldr	r2, [r3, #28]
 8012fae:	0712      	lsls	r2, r2, #28
 8012fb0:	d50a      	bpl.n	8012fc8 <HAL_UART_IRQHandler+0x7e>
 8012fb2:	689a      	ldr	r2, [r3, #8]
 8012fb4:	07d2      	lsls	r2, r2, #31
 8012fb6:	d507      	bpl.n	8012fc8 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8012fb8:	2208      	movs	r2, #8
 8012fba:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012fbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012fbe:	4313      	orrs	r3, r2
 8012fc0:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8012fc2:	2369      	movs	r3, #105	; 0x69
 8012fc4:	3a07      	subs	r2, #7
 8012fc6:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012fc8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d11c      	bne.n	8013008 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8012fce:	6823      	ldr	r3, [r4, #0]
 8012fd0:	69da      	ldr	r2, [r3, #28]
 8012fd2:	02d2      	lsls	r2, r2, #11
 8012fd4:	d502      	bpl.n	8012fdc <HAL_UART_IRQHandler+0x92>
 8012fd6:	689a      	ldr	r2, [r3, #8]
 8012fd8:	0252      	lsls	r2, r2, #9
 8012fda:	d419      	bmi.n	8013010 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8012fdc:	6823      	ldr	r3, [r4, #0]
 8012fde:	69da      	ldr	r2, [r3, #28]
 8012fe0:	0692      	lsls	r2, r2, #26
 8012fe2:	d502      	bpl.n	8012fea <HAL_UART_IRQHandler+0xa0>
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	069b      	lsls	r3, r3, #26
 8012fe8:	d41c      	bmi.n	8013024 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	69da      	ldr	r2, [r3, #28]
 8012fee:	0612      	lsls	r2, r2, #24
 8012ff0:	d502      	bpl.n	8012ff8 <HAL_UART_IRQHandler+0xae>
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	061b      	lsls	r3, r3, #24
 8012ff6:	d41e      	bmi.n	8013036 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	69da      	ldr	r2, [r3, #28]
 8012ffc:	0652      	lsls	r2, r2, #25
 8012ffe:	d502      	bpl.n	8013006 <HAL_UART_IRQHandler+0xbc>
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	065b      	lsls	r3, r3, #25
 8013004:	d41b      	bmi.n	801303e <HAL_UART_IRQHandler+0xf4>
}
 8013006:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013008:	0020      	movs	r0, r4
 801300a:	f7fa fa01 	bl	800d410 <HAL_UART_ErrorCallback>
 801300e:	e7de      	b.n	8012fce <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8013010:	2280      	movs	r2, #128	; 0x80
 8013012:	0352      	lsls	r2, r2, #13
 8013014:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013016:	2369      	movs	r3, #105	; 0x69
 8013018:	2201      	movs	r2, #1
 801301a:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 801301c:	0020      	movs	r0, r4
 801301e:	f7ff ff93 	bl	8012f48 <HAL_UARTEx_WakeupCallback>
 8013022:	e7db      	b.n	8012fdc <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013024:	0020      	movs	r0, r4
 8013026:	f7ff ff41 	bl	8012eac <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801302a:	6822      	ldr	r2, [r4, #0]
 801302c:	6993      	ldr	r3, [r2, #24]
 801302e:	2108      	movs	r1, #8
 8013030:	430b      	orrs	r3, r1
 8013032:	6193      	str	r3, [r2, #24]
 8013034:	e7d9      	b.n	8012fea <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013036:	0020      	movs	r0, r4
 8013038:	f7ff fee6 	bl	8012e08 <UART_Transmit_IT>
 801303c:	e7dc      	b.n	8012ff8 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801303e:	0020      	movs	r0, r4
 8013040:	f7ff ff1a 	bl	8012e78 <UART_EndTransmit_IT>
}
 8013044:	e7df      	b.n	8013006 <HAL_UART_IRQHandler+0xbc>

08013046 <main>:
float timeout=6000;
/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8013046:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8013048:	f7f0 fd3c 	bl	8003ac4 <Module_Init>

	//Don't place your code here.
	for(;;){}
 801304c:	e7fe      	b.n	801304c <main+0x6>
	...

08013050 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8013050:	b510      	push	{r4, lr}
	     V=7;
 8013052:	4903      	ldr	r1, [pc, #12]	; (8013060 <UserTask+0x10>)
 8013054:	4b03      	ldr	r3, [pc, #12]	; (8013064 <UserTask+0x14>)
 8013056:	600b      	str	r3, [r1, #0]
	   //  BOSMessaging.trace=TRACE_NONE;

		 AddBOSvar(FMT_FLOAT, (uint32_t)&V);
 8013058:	2007      	movs	r0, #7
 801305a:	f7f1 f927 	bl	80042ac <AddBOSvar>
	//	 AddBOSvar(FMT_FLOAT, (uint32_t)&I);
		// WriteRemote(2, (uint32_t) &V, 1, FMT_FLOAT,0);
	while(1){
 801305e:	e7fe      	b.n	801305e <UserTask+0xe>
 8013060:	20005cb0 	.word	0x20005cb0
 8013064:	40e00000 	.word	0x40e00000

08013068 <atof>:
 8013068:	b510      	push	{r4, lr}
 801306a:	2100      	movs	r1, #0
 801306c:	f001 fcba 	bl	80149e4 <strtod>
 8013070:	bd10      	pop	{r4, pc}

08013072 <atoi>:
 8013072:	b510      	push	{r4, lr}
 8013074:	220a      	movs	r2, #10
 8013076:	2100      	movs	r1, #0
 8013078:	f001 fdb4 	bl	8014be4 <strtol>
 801307c:	bd10      	pop	{r4, pc}

0801307e <atol>:
 801307e:	b510      	push	{r4, lr}
 8013080:	220a      	movs	r2, #10
 8013082:	2100      	movs	r1, #0
 8013084:	f001 fdae 	bl	8014be4 <strtol>
 8013088:	bd10      	pop	{r4, pc}
	...

0801308c <__libc_init_array>:
 801308c:	b570      	push	{r4, r5, r6, lr}
 801308e:	2600      	movs	r6, #0
 8013090:	4d0c      	ldr	r5, [pc, #48]	; (80130c4 <__libc_init_array+0x38>)
 8013092:	4c0d      	ldr	r4, [pc, #52]	; (80130c8 <__libc_init_array+0x3c>)
 8013094:	1b64      	subs	r4, r4, r5
 8013096:	10a4      	asrs	r4, r4, #2
 8013098:	42a6      	cmp	r6, r4
 801309a:	d109      	bne.n	80130b0 <__libc_init_array+0x24>
 801309c:	2600      	movs	r6, #0
 801309e:	f004 fc8f 	bl	80179c0 <_init>
 80130a2:	4d0a      	ldr	r5, [pc, #40]	; (80130cc <__libc_init_array+0x40>)
 80130a4:	4c0a      	ldr	r4, [pc, #40]	; (80130d0 <__libc_init_array+0x44>)
 80130a6:	1b64      	subs	r4, r4, r5
 80130a8:	10a4      	asrs	r4, r4, #2
 80130aa:	42a6      	cmp	r6, r4
 80130ac:	d105      	bne.n	80130ba <__libc_init_array+0x2e>
 80130ae:	bd70      	pop	{r4, r5, r6, pc}
 80130b0:	00b3      	lsls	r3, r6, #2
 80130b2:	58eb      	ldr	r3, [r5, r3]
 80130b4:	4798      	blx	r3
 80130b6:	3601      	adds	r6, #1
 80130b8:	e7ee      	b.n	8013098 <__libc_init_array+0xc>
 80130ba:	00b3      	lsls	r3, r6, #2
 80130bc:	58eb      	ldr	r3, [r5, r3]
 80130be:	4798      	blx	r3
 80130c0:	3601      	adds	r6, #1
 80130c2:	e7f2      	b.n	80130aa <__libc_init_array+0x1e>
 80130c4:	0801afd0 	.word	0x0801afd0
 80130c8:	0801afd0 	.word	0x0801afd0
 80130cc:	0801afd0 	.word	0x0801afd0
 80130d0:	0801afd4 	.word	0x0801afd4

080130d4 <malloc>:
 80130d4:	b510      	push	{r4, lr}
 80130d6:	4b03      	ldr	r3, [pc, #12]	; (80130e4 <malloc+0x10>)
 80130d8:	0001      	movs	r1, r0
 80130da:	6818      	ldr	r0, [r3, #0]
 80130dc:	f000 f878 	bl	80131d0 <_malloc_r>
 80130e0:	bd10      	pop	{r4, pc}
 80130e2:	46c0      	nop			; (mov r8, r8)
 80130e4:	20000120 	.word	0x20000120

080130e8 <free>:
 80130e8:	b510      	push	{r4, lr}
 80130ea:	4b03      	ldr	r3, [pc, #12]	; (80130f8 <free+0x10>)
 80130ec:	0001      	movs	r1, r0
 80130ee:	6818      	ldr	r0, [r3, #0]
 80130f0:	f000 f824 	bl	801313c <_free_r>
 80130f4:	bd10      	pop	{r4, pc}
 80130f6:	46c0      	nop			; (mov r8, r8)
 80130f8:	20000120 	.word	0x20000120

080130fc <memcmp>:
 80130fc:	b530      	push	{r4, r5, lr}
 80130fe:	2400      	movs	r4, #0
 8013100:	3901      	subs	r1, #1
 8013102:	42a2      	cmp	r2, r4
 8013104:	d101      	bne.n	801310a <memcmp+0xe>
 8013106:	2000      	movs	r0, #0
 8013108:	e005      	b.n	8013116 <memcmp+0x1a>
 801310a:	5d03      	ldrb	r3, [r0, r4]
 801310c:	3401      	adds	r4, #1
 801310e:	5d0d      	ldrb	r5, [r1, r4]
 8013110:	42ab      	cmp	r3, r5
 8013112:	d0f6      	beq.n	8013102 <memcmp+0x6>
 8013114:	1b58      	subs	r0, r3, r5
 8013116:	bd30      	pop	{r4, r5, pc}

08013118 <memcpy>:
 8013118:	2300      	movs	r3, #0
 801311a:	b510      	push	{r4, lr}
 801311c:	429a      	cmp	r2, r3
 801311e:	d100      	bne.n	8013122 <memcpy+0xa>
 8013120:	bd10      	pop	{r4, pc}
 8013122:	5ccc      	ldrb	r4, [r1, r3]
 8013124:	54c4      	strb	r4, [r0, r3]
 8013126:	3301      	adds	r3, #1
 8013128:	e7f8      	b.n	801311c <memcpy+0x4>

0801312a <memset>:
 801312a:	0003      	movs	r3, r0
 801312c:	1882      	adds	r2, r0, r2
 801312e:	4293      	cmp	r3, r2
 8013130:	d100      	bne.n	8013134 <memset+0xa>
 8013132:	4770      	bx	lr
 8013134:	7019      	strb	r1, [r3, #0]
 8013136:	3301      	adds	r3, #1
 8013138:	e7f9      	b.n	801312e <memset+0x4>
	...

0801313c <_free_r>:
 801313c:	b570      	push	{r4, r5, r6, lr}
 801313e:	0005      	movs	r5, r0
 8013140:	2900      	cmp	r1, #0
 8013142:	d010      	beq.n	8013166 <_free_r+0x2a>
 8013144:	1f0c      	subs	r4, r1, #4
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	da00      	bge.n	801314e <_free_r+0x12>
 801314c:	18e4      	adds	r4, r4, r3
 801314e:	0028      	movs	r0, r5
 8013150:	f002 ffc6 	bl	80160e0 <__malloc_lock>
 8013154:	4a1d      	ldr	r2, [pc, #116]	; (80131cc <_free_r+0x90>)
 8013156:	6813      	ldr	r3, [r2, #0]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d105      	bne.n	8013168 <_free_r+0x2c>
 801315c:	6063      	str	r3, [r4, #4]
 801315e:	6014      	str	r4, [r2, #0]
 8013160:	0028      	movs	r0, r5
 8013162:	f002 ffc5 	bl	80160f0 <__malloc_unlock>
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	42a3      	cmp	r3, r4
 801316a:	d908      	bls.n	801317e <_free_r+0x42>
 801316c:	6821      	ldr	r1, [r4, #0]
 801316e:	1860      	adds	r0, r4, r1
 8013170:	4283      	cmp	r3, r0
 8013172:	d1f3      	bne.n	801315c <_free_r+0x20>
 8013174:	6818      	ldr	r0, [r3, #0]
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	1841      	adds	r1, r0, r1
 801317a:	6021      	str	r1, [r4, #0]
 801317c:	e7ee      	b.n	801315c <_free_r+0x20>
 801317e:	001a      	movs	r2, r3
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d001      	beq.n	801318a <_free_r+0x4e>
 8013186:	42a3      	cmp	r3, r4
 8013188:	d9f9      	bls.n	801317e <_free_r+0x42>
 801318a:	6811      	ldr	r1, [r2, #0]
 801318c:	1850      	adds	r0, r2, r1
 801318e:	42a0      	cmp	r0, r4
 8013190:	d10b      	bne.n	80131aa <_free_r+0x6e>
 8013192:	6820      	ldr	r0, [r4, #0]
 8013194:	1809      	adds	r1, r1, r0
 8013196:	1850      	adds	r0, r2, r1
 8013198:	6011      	str	r1, [r2, #0]
 801319a:	4283      	cmp	r3, r0
 801319c:	d1e0      	bne.n	8013160 <_free_r+0x24>
 801319e:	6818      	ldr	r0, [r3, #0]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	1841      	adds	r1, r0, r1
 80131a4:	6011      	str	r1, [r2, #0]
 80131a6:	6053      	str	r3, [r2, #4]
 80131a8:	e7da      	b.n	8013160 <_free_r+0x24>
 80131aa:	42a0      	cmp	r0, r4
 80131ac:	d902      	bls.n	80131b4 <_free_r+0x78>
 80131ae:	230c      	movs	r3, #12
 80131b0:	602b      	str	r3, [r5, #0]
 80131b2:	e7d5      	b.n	8013160 <_free_r+0x24>
 80131b4:	6821      	ldr	r1, [r4, #0]
 80131b6:	1860      	adds	r0, r4, r1
 80131b8:	4283      	cmp	r3, r0
 80131ba:	d103      	bne.n	80131c4 <_free_r+0x88>
 80131bc:	6818      	ldr	r0, [r3, #0]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	1841      	adds	r1, r0, r1
 80131c2:	6021      	str	r1, [r4, #0]
 80131c4:	6063      	str	r3, [r4, #4]
 80131c6:	6054      	str	r4, [r2, #4]
 80131c8:	e7ca      	b.n	8013160 <_free_r+0x24>
 80131ca:	46c0      	nop			; (mov r8, r8)
 80131cc:	20005704 	.word	0x20005704

080131d0 <_malloc_r>:
 80131d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d2:	2303      	movs	r3, #3
 80131d4:	1ccd      	adds	r5, r1, #3
 80131d6:	439d      	bics	r5, r3
 80131d8:	3508      	adds	r5, #8
 80131da:	0006      	movs	r6, r0
 80131dc:	2d0c      	cmp	r5, #12
 80131de:	d21f      	bcs.n	8013220 <_malloc_r+0x50>
 80131e0:	250c      	movs	r5, #12
 80131e2:	42a9      	cmp	r1, r5
 80131e4:	d81e      	bhi.n	8013224 <_malloc_r+0x54>
 80131e6:	0030      	movs	r0, r6
 80131e8:	f002 ff7a 	bl	80160e0 <__malloc_lock>
 80131ec:	4925      	ldr	r1, [pc, #148]	; (8013284 <_malloc_r+0xb4>)
 80131ee:	680a      	ldr	r2, [r1, #0]
 80131f0:	0014      	movs	r4, r2
 80131f2:	2c00      	cmp	r4, #0
 80131f4:	d11a      	bne.n	801322c <_malloc_r+0x5c>
 80131f6:	4f24      	ldr	r7, [pc, #144]	; (8013288 <_malloc_r+0xb8>)
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d104      	bne.n	8013208 <_malloc_r+0x38>
 80131fe:	0021      	movs	r1, r4
 8013200:	0030      	movs	r0, r6
 8013202:	f000 fd05 	bl	8013c10 <_sbrk_r>
 8013206:	6038      	str	r0, [r7, #0]
 8013208:	0029      	movs	r1, r5
 801320a:	0030      	movs	r0, r6
 801320c:	f000 fd00 	bl	8013c10 <_sbrk_r>
 8013210:	1c43      	adds	r3, r0, #1
 8013212:	d12b      	bne.n	801326c <_malloc_r+0x9c>
 8013214:	230c      	movs	r3, #12
 8013216:	0030      	movs	r0, r6
 8013218:	6033      	str	r3, [r6, #0]
 801321a:	f002 ff69 	bl	80160f0 <__malloc_unlock>
 801321e:	e003      	b.n	8013228 <_malloc_r+0x58>
 8013220:	2d00      	cmp	r5, #0
 8013222:	dade      	bge.n	80131e2 <_malloc_r+0x12>
 8013224:	230c      	movs	r3, #12
 8013226:	6033      	str	r3, [r6, #0]
 8013228:	2000      	movs	r0, #0
 801322a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801322c:	6823      	ldr	r3, [r4, #0]
 801322e:	1b5b      	subs	r3, r3, r5
 8013230:	d419      	bmi.n	8013266 <_malloc_r+0x96>
 8013232:	2b0b      	cmp	r3, #11
 8013234:	d903      	bls.n	801323e <_malloc_r+0x6e>
 8013236:	6023      	str	r3, [r4, #0]
 8013238:	18e4      	adds	r4, r4, r3
 801323a:	6025      	str	r5, [r4, #0]
 801323c:	e003      	b.n	8013246 <_malloc_r+0x76>
 801323e:	6863      	ldr	r3, [r4, #4]
 8013240:	42a2      	cmp	r2, r4
 8013242:	d10e      	bne.n	8013262 <_malloc_r+0x92>
 8013244:	600b      	str	r3, [r1, #0]
 8013246:	0030      	movs	r0, r6
 8013248:	f002 ff52 	bl	80160f0 <__malloc_unlock>
 801324c:	0020      	movs	r0, r4
 801324e:	2207      	movs	r2, #7
 8013250:	300b      	adds	r0, #11
 8013252:	1d23      	adds	r3, r4, #4
 8013254:	4390      	bics	r0, r2
 8013256:	1ac2      	subs	r2, r0, r3
 8013258:	4298      	cmp	r0, r3
 801325a:	d0e6      	beq.n	801322a <_malloc_r+0x5a>
 801325c:	1a1b      	subs	r3, r3, r0
 801325e:	50a3      	str	r3, [r4, r2]
 8013260:	e7e3      	b.n	801322a <_malloc_r+0x5a>
 8013262:	6053      	str	r3, [r2, #4]
 8013264:	e7ef      	b.n	8013246 <_malloc_r+0x76>
 8013266:	0022      	movs	r2, r4
 8013268:	6864      	ldr	r4, [r4, #4]
 801326a:	e7c2      	b.n	80131f2 <_malloc_r+0x22>
 801326c:	2303      	movs	r3, #3
 801326e:	1cc4      	adds	r4, r0, #3
 8013270:	439c      	bics	r4, r3
 8013272:	42a0      	cmp	r0, r4
 8013274:	d0e1      	beq.n	801323a <_malloc_r+0x6a>
 8013276:	1a21      	subs	r1, r4, r0
 8013278:	0030      	movs	r0, r6
 801327a:	f000 fcc9 	bl	8013c10 <_sbrk_r>
 801327e:	1c43      	adds	r3, r0, #1
 8013280:	d1db      	bne.n	801323a <_malloc_r+0x6a>
 8013282:	e7c7      	b.n	8013214 <_malloc_r+0x44>
 8013284:	20005704 	.word	0x20005704
 8013288:	20005708 	.word	0x20005708

0801328c <__cvt>:
 801328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801328e:	001e      	movs	r6, r3
 8013290:	2300      	movs	r3, #0
 8013292:	0014      	movs	r4, r2
 8013294:	b08b      	sub	sp, #44	; 0x2c
 8013296:	429e      	cmp	r6, r3
 8013298:	da04      	bge.n	80132a4 <__cvt+0x18>
 801329a:	2180      	movs	r1, #128	; 0x80
 801329c:	0609      	lsls	r1, r1, #24
 801329e:	1873      	adds	r3, r6, r1
 80132a0:	001e      	movs	r6, r3
 80132a2:	232d      	movs	r3, #45	; 0x2d
 80132a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80132a8:	7013      	strb	r3, [r2, #0]
 80132aa:	2320      	movs	r3, #32
 80132ac:	2203      	movs	r2, #3
 80132ae:	439f      	bics	r7, r3
 80132b0:	2f46      	cmp	r7, #70	; 0x46
 80132b2:	d007      	beq.n	80132c4 <__cvt+0x38>
 80132b4:	003b      	movs	r3, r7
 80132b6:	3b45      	subs	r3, #69	; 0x45
 80132b8:	4259      	negs	r1, r3
 80132ba:	414b      	adcs	r3, r1
 80132bc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80132be:	3a01      	subs	r2, #1
 80132c0:	18cb      	adds	r3, r1, r3
 80132c2:	9310      	str	r3, [sp, #64]	; 0x40
 80132c4:	ab09      	add	r3, sp, #36	; 0x24
 80132c6:	9304      	str	r3, [sp, #16]
 80132c8:	ab08      	add	r3, sp, #32
 80132ca:	9303      	str	r3, [sp, #12]
 80132cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80132ce:	9200      	str	r2, [sp, #0]
 80132d0:	9302      	str	r3, [sp, #8]
 80132d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132d4:	0022      	movs	r2, r4
 80132d6:	9301      	str	r3, [sp, #4]
 80132d8:	0033      	movs	r3, r6
 80132da:	f001 fd39 	bl	8014d50 <_dtoa_r>
 80132de:	0005      	movs	r5, r0
 80132e0:	2f47      	cmp	r7, #71	; 0x47
 80132e2:	d102      	bne.n	80132ea <__cvt+0x5e>
 80132e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132e6:	07db      	lsls	r3, r3, #31
 80132e8:	d528      	bpl.n	801333c <__cvt+0xb0>
 80132ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132ec:	18eb      	adds	r3, r5, r3
 80132ee:	9307      	str	r3, [sp, #28]
 80132f0:	2f46      	cmp	r7, #70	; 0x46
 80132f2:	d114      	bne.n	801331e <__cvt+0x92>
 80132f4:	782b      	ldrb	r3, [r5, #0]
 80132f6:	2b30      	cmp	r3, #48	; 0x30
 80132f8:	d10c      	bne.n	8013314 <__cvt+0x88>
 80132fa:	2200      	movs	r2, #0
 80132fc:	2300      	movs	r3, #0
 80132fe:	0020      	movs	r0, r4
 8013300:	0031      	movs	r1, r6
 8013302:	f7ed f8ab 	bl	800045c <__aeabi_dcmpeq>
 8013306:	2800      	cmp	r0, #0
 8013308:	d104      	bne.n	8013314 <__cvt+0x88>
 801330a:	2301      	movs	r3, #1
 801330c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801330e:	1a9b      	subs	r3, r3, r2
 8013310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013312:	6013      	str	r3, [r2, #0]
 8013314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013316:	9a07      	ldr	r2, [sp, #28]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	18d3      	adds	r3, r2, r3
 801331c:	9307      	str	r3, [sp, #28]
 801331e:	2200      	movs	r2, #0
 8013320:	2300      	movs	r3, #0
 8013322:	0020      	movs	r0, r4
 8013324:	0031      	movs	r1, r6
 8013326:	f7ed f899 	bl	800045c <__aeabi_dcmpeq>
 801332a:	2800      	cmp	r0, #0
 801332c:	d001      	beq.n	8013332 <__cvt+0xa6>
 801332e:	9b07      	ldr	r3, [sp, #28]
 8013330:	9309      	str	r3, [sp, #36]	; 0x24
 8013332:	2230      	movs	r2, #48	; 0x30
 8013334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013336:	9907      	ldr	r1, [sp, #28]
 8013338:	428b      	cmp	r3, r1
 801333a:	d306      	bcc.n	801334a <__cvt+0xbe>
 801333c:	0028      	movs	r0, r5
 801333e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013340:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013342:	1b5b      	subs	r3, r3, r5
 8013344:	6013      	str	r3, [r2, #0]
 8013346:	b00b      	add	sp, #44	; 0x2c
 8013348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801334a:	1c59      	adds	r1, r3, #1
 801334c:	9109      	str	r1, [sp, #36]	; 0x24
 801334e:	701a      	strb	r2, [r3, #0]
 8013350:	e7f0      	b.n	8013334 <__cvt+0xa8>

08013352 <__exponent>:
 8013352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013354:	1c83      	adds	r3, r0, #2
 8013356:	b087      	sub	sp, #28
 8013358:	9303      	str	r3, [sp, #12]
 801335a:	0005      	movs	r5, r0
 801335c:	000c      	movs	r4, r1
 801335e:	232b      	movs	r3, #43	; 0x2b
 8013360:	7002      	strb	r2, [r0, #0]
 8013362:	2900      	cmp	r1, #0
 8013364:	da01      	bge.n	801336a <__exponent+0x18>
 8013366:	424c      	negs	r4, r1
 8013368:	3302      	adds	r3, #2
 801336a:	706b      	strb	r3, [r5, #1]
 801336c:	2c09      	cmp	r4, #9
 801336e:	dd31      	ble.n	80133d4 <__exponent+0x82>
 8013370:	270a      	movs	r7, #10
 8013372:	ab04      	add	r3, sp, #16
 8013374:	1dde      	adds	r6, r3, #7
 8013376:	0020      	movs	r0, r4
 8013378:	0039      	movs	r1, r7
 801337a:	9601      	str	r6, [sp, #4]
 801337c:	f7ed f858 	bl	8000430 <__aeabi_idivmod>
 8013380:	3e01      	subs	r6, #1
 8013382:	3130      	adds	r1, #48	; 0x30
 8013384:	0020      	movs	r0, r4
 8013386:	7031      	strb	r1, [r6, #0]
 8013388:	0039      	movs	r1, r7
 801338a:	9402      	str	r4, [sp, #8]
 801338c:	f7ec ff6a 	bl	8000264 <__divsi3>
 8013390:	9b02      	ldr	r3, [sp, #8]
 8013392:	0004      	movs	r4, r0
 8013394:	2b63      	cmp	r3, #99	; 0x63
 8013396:	dcee      	bgt.n	8013376 <__exponent+0x24>
 8013398:	9b01      	ldr	r3, [sp, #4]
 801339a:	3430      	adds	r4, #48	; 0x30
 801339c:	1e9a      	subs	r2, r3, #2
 801339e:	0013      	movs	r3, r2
 80133a0:	9903      	ldr	r1, [sp, #12]
 80133a2:	7014      	strb	r4, [r2, #0]
 80133a4:	a804      	add	r0, sp, #16
 80133a6:	3007      	adds	r0, #7
 80133a8:	4298      	cmp	r0, r3
 80133aa:	d80e      	bhi.n	80133ca <__exponent+0x78>
 80133ac:	ab04      	add	r3, sp, #16
 80133ae:	3307      	adds	r3, #7
 80133b0:	2000      	movs	r0, #0
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d804      	bhi.n	80133c0 <__exponent+0x6e>
 80133b6:	ab04      	add	r3, sp, #16
 80133b8:	3009      	adds	r0, #9
 80133ba:	18c0      	adds	r0, r0, r3
 80133bc:	9b01      	ldr	r3, [sp, #4]
 80133be:	1ac0      	subs	r0, r0, r3
 80133c0:	9b03      	ldr	r3, [sp, #12]
 80133c2:	1818      	adds	r0, r3, r0
 80133c4:	1b40      	subs	r0, r0, r5
 80133c6:	b007      	add	sp, #28
 80133c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133ca:	7818      	ldrb	r0, [r3, #0]
 80133cc:	3301      	adds	r3, #1
 80133ce:	7008      	strb	r0, [r1, #0]
 80133d0:	3101      	adds	r1, #1
 80133d2:	e7e7      	b.n	80133a4 <__exponent+0x52>
 80133d4:	2330      	movs	r3, #48	; 0x30
 80133d6:	18e4      	adds	r4, r4, r3
 80133d8:	70ab      	strb	r3, [r5, #2]
 80133da:	1d28      	adds	r0, r5, #4
 80133dc:	70ec      	strb	r4, [r5, #3]
 80133de:	e7f1      	b.n	80133c4 <__exponent+0x72>

080133e0 <_printf_float>:
 80133e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133e2:	b095      	sub	sp, #84	; 0x54
 80133e4:	000c      	movs	r4, r1
 80133e6:	9208      	str	r2, [sp, #32]
 80133e8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80133ea:	9309      	str	r3, [sp, #36]	; 0x24
 80133ec:	0007      	movs	r7, r0
 80133ee:	f002 fe55 	bl	801609c <_localeconv_r>
 80133f2:	6803      	ldr	r3, [r0, #0]
 80133f4:	0018      	movs	r0, r3
 80133f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80133f8:	f7ec fe8e 	bl	8000118 <strlen>
 80133fc:	2300      	movs	r3, #0
 80133fe:	9312      	str	r3, [sp, #72]	; 0x48
 8013400:	7e23      	ldrb	r3, [r4, #24]
 8013402:	2207      	movs	r2, #7
 8013404:	001e      	movs	r6, r3
 8013406:	6823      	ldr	r3, [r4, #0]
 8013408:	900d      	str	r0, [sp, #52]	; 0x34
 801340a:	930c      	str	r3, [sp, #48]	; 0x30
 801340c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801340e:	682b      	ldr	r3, [r5, #0]
 8013410:	05c9      	lsls	r1, r1, #23
 8013412:	d547      	bpl.n	80134a4 <_printf_float+0xc4>
 8013414:	189b      	adds	r3, r3, r2
 8013416:	4393      	bics	r3, r2
 8013418:	001a      	movs	r2, r3
 801341a:	3208      	adds	r2, #8
 801341c:	602a      	str	r2, [r5, #0]
 801341e:	681a      	ldr	r2, [r3, #0]
 8013420:	685b      	ldr	r3, [r3, #4]
 8013422:	64a2      	str	r2, [r4, #72]	; 0x48
 8013424:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013426:	2201      	movs	r2, #1
 8013428:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801342a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801342c:	930a      	str	r3, [sp, #40]	; 0x28
 801342e:	006b      	lsls	r3, r5, #1
 8013430:	085b      	lsrs	r3, r3, #1
 8013432:	930e      	str	r3, [sp, #56]	; 0x38
 8013434:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013436:	4ba8      	ldr	r3, [pc, #672]	; (80136d8 <_printf_float+0x2f8>)
 8013438:	990e      	ldr	r1, [sp, #56]	; 0x38
 801343a:	4252      	negs	r2, r2
 801343c:	f7ef fa9a 	bl	8002974 <__aeabi_dcmpun>
 8013440:	2800      	cmp	r0, #0
 8013442:	d131      	bne.n	80134a8 <_printf_float+0xc8>
 8013444:	2201      	movs	r2, #1
 8013446:	4ba4      	ldr	r3, [pc, #656]	; (80136d8 <_printf_float+0x2f8>)
 8013448:	980a      	ldr	r0, [sp, #40]	; 0x28
 801344a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801344c:	4252      	negs	r2, r2
 801344e:	f7ed f815 	bl	800047c <__aeabi_dcmple>
 8013452:	2800      	cmp	r0, #0
 8013454:	d128      	bne.n	80134a8 <_printf_float+0xc8>
 8013456:	2200      	movs	r2, #0
 8013458:	2300      	movs	r3, #0
 801345a:	0029      	movs	r1, r5
 801345c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801345e:	f7ed f803 	bl	8000468 <__aeabi_dcmplt>
 8013462:	2800      	cmp	r0, #0
 8013464:	d003      	beq.n	801346e <_printf_float+0x8e>
 8013466:	0023      	movs	r3, r4
 8013468:	222d      	movs	r2, #45	; 0x2d
 801346a:	3343      	adds	r3, #67	; 0x43
 801346c:	701a      	strb	r2, [r3, #0]
 801346e:	4d9b      	ldr	r5, [pc, #620]	; (80136dc <_printf_float+0x2fc>)
 8013470:	2e47      	cmp	r6, #71	; 0x47
 8013472:	d900      	bls.n	8013476 <_printf_float+0x96>
 8013474:	4d9a      	ldr	r5, [pc, #616]	; (80136e0 <_printf_float+0x300>)
 8013476:	2303      	movs	r3, #3
 8013478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801347a:	6123      	str	r3, [r4, #16]
 801347c:	3301      	adds	r3, #1
 801347e:	439a      	bics	r2, r3
 8013480:	2300      	movs	r3, #0
 8013482:	6022      	str	r2, [r4, #0]
 8013484:	930a      	str	r3, [sp, #40]	; 0x28
 8013486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013488:	0021      	movs	r1, r4
 801348a:	9300      	str	r3, [sp, #0]
 801348c:	0038      	movs	r0, r7
 801348e:	9b08      	ldr	r3, [sp, #32]
 8013490:	aa13      	add	r2, sp, #76	; 0x4c
 8013492:	f000 f9f3 	bl	801387c <_printf_common>
 8013496:	1c43      	adds	r3, r0, #1
 8013498:	d000      	beq.n	801349c <_printf_float+0xbc>
 801349a:	e09e      	b.n	80135da <_printf_float+0x1fa>
 801349c:	2001      	movs	r0, #1
 801349e:	4240      	negs	r0, r0
 80134a0:	b015      	add	sp, #84	; 0x54
 80134a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a4:	3307      	adds	r3, #7
 80134a6:	e7b6      	b.n	8013416 <_printf_float+0x36>
 80134a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134aa:	002b      	movs	r3, r5
 80134ac:	0010      	movs	r0, r2
 80134ae:	0029      	movs	r1, r5
 80134b0:	f7ef fa60 	bl	8002974 <__aeabi_dcmpun>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d00a      	beq.n	80134ce <_printf_float+0xee>
 80134b8:	2d00      	cmp	r5, #0
 80134ba:	da03      	bge.n	80134c4 <_printf_float+0xe4>
 80134bc:	0023      	movs	r3, r4
 80134be:	222d      	movs	r2, #45	; 0x2d
 80134c0:	3343      	adds	r3, #67	; 0x43
 80134c2:	701a      	strb	r2, [r3, #0]
 80134c4:	4d87      	ldr	r5, [pc, #540]	; (80136e4 <_printf_float+0x304>)
 80134c6:	2e47      	cmp	r6, #71	; 0x47
 80134c8:	d9d5      	bls.n	8013476 <_printf_float+0x96>
 80134ca:	4d87      	ldr	r5, [pc, #540]	; (80136e8 <_printf_float+0x308>)
 80134cc:	e7d3      	b.n	8013476 <_printf_float+0x96>
 80134ce:	2220      	movs	r2, #32
 80134d0:	0031      	movs	r1, r6
 80134d2:	6863      	ldr	r3, [r4, #4]
 80134d4:	4391      	bics	r1, r2
 80134d6:	910e      	str	r1, [sp, #56]	; 0x38
 80134d8:	1c5a      	adds	r2, r3, #1
 80134da:	d147      	bne.n	801356c <_printf_float+0x18c>
 80134dc:	3307      	adds	r3, #7
 80134de:	6063      	str	r3, [r4, #4]
 80134e0:	2380      	movs	r3, #128	; 0x80
 80134e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134e4:	00db      	lsls	r3, r3, #3
 80134e6:	4313      	orrs	r3, r2
 80134e8:	2200      	movs	r2, #0
 80134ea:	9206      	str	r2, [sp, #24]
 80134ec:	aa12      	add	r2, sp, #72	; 0x48
 80134ee:	9205      	str	r2, [sp, #20]
 80134f0:	aa11      	add	r2, sp, #68	; 0x44
 80134f2:	9203      	str	r2, [sp, #12]
 80134f4:	2223      	movs	r2, #35	; 0x23
 80134f6:	a908      	add	r1, sp, #32
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	9301      	str	r3, [sp, #4]
 80134fc:	6863      	ldr	r3, [r4, #4]
 80134fe:	1852      	adds	r2, r2, r1
 8013500:	9202      	str	r2, [sp, #8]
 8013502:	9300      	str	r3, [sp, #0]
 8013504:	0038      	movs	r0, r7
 8013506:	002b      	movs	r3, r5
 8013508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801350a:	9604      	str	r6, [sp, #16]
 801350c:	f7ff febe 	bl	801328c <__cvt>
 8013510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013512:	0005      	movs	r5, r0
 8013514:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013516:	2b47      	cmp	r3, #71	; 0x47
 8013518:	d108      	bne.n	801352c <_printf_float+0x14c>
 801351a:	1ccb      	adds	r3, r1, #3
 801351c:	db02      	blt.n	8013524 <_printf_float+0x144>
 801351e:	6863      	ldr	r3, [r4, #4]
 8013520:	4299      	cmp	r1, r3
 8013522:	dd46      	ble.n	80135b2 <_printf_float+0x1d2>
 8013524:	0033      	movs	r3, r6
 8013526:	3b02      	subs	r3, #2
 8013528:	b2db      	uxtb	r3, r3
 801352a:	001e      	movs	r6, r3
 801352c:	2e65      	cmp	r6, #101	; 0x65
 801352e:	d824      	bhi.n	801357a <_printf_float+0x19a>
 8013530:	0020      	movs	r0, r4
 8013532:	0032      	movs	r2, r6
 8013534:	3901      	subs	r1, #1
 8013536:	3050      	adds	r0, #80	; 0x50
 8013538:	9111      	str	r1, [sp, #68]	; 0x44
 801353a:	f7ff ff0a 	bl	8013352 <__exponent>
 801353e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013540:	900a      	str	r0, [sp, #40]	; 0x28
 8013542:	1813      	adds	r3, r2, r0
 8013544:	6123      	str	r3, [r4, #16]
 8013546:	2a01      	cmp	r2, #1
 8013548:	dc02      	bgt.n	8013550 <_printf_float+0x170>
 801354a:	6822      	ldr	r2, [r4, #0]
 801354c:	07d2      	lsls	r2, r2, #31
 801354e:	d501      	bpl.n	8013554 <_printf_float+0x174>
 8013550:	3301      	adds	r3, #1
 8013552:	6123      	str	r3, [r4, #16]
 8013554:	2323      	movs	r3, #35	; 0x23
 8013556:	aa08      	add	r2, sp, #32
 8013558:	189b      	adds	r3, r3, r2
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d100      	bne.n	8013562 <_printf_float+0x182>
 8013560:	e791      	b.n	8013486 <_printf_float+0xa6>
 8013562:	0023      	movs	r3, r4
 8013564:	222d      	movs	r2, #45	; 0x2d
 8013566:	3343      	adds	r3, #67	; 0x43
 8013568:	701a      	strb	r2, [r3, #0]
 801356a:	e78c      	b.n	8013486 <_printf_float+0xa6>
 801356c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801356e:	2a47      	cmp	r2, #71	; 0x47
 8013570:	d1b6      	bne.n	80134e0 <_printf_float+0x100>
 8013572:	2b00      	cmp	r3, #0
 8013574:	d1b4      	bne.n	80134e0 <_printf_float+0x100>
 8013576:	3301      	adds	r3, #1
 8013578:	e7b1      	b.n	80134de <_printf_float+0xfe>
 801357a:	2e66      	cmp	r6, #102	; 0x66
 801357c:	d11b      	bne.n	80135b6 <_printf_float+0x1d6>
 801357e:	6863      	ldr	r3, [r4, #4]
 8013580:	2900      	cmp	r1, #0
 8013582:	dd0d      	ble.n	80135a0 <_printf_float+0x1c0>
 8013584:	6121      	str	r1, [r4, #16]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d102      	bne.n	8013590 <_printf_float+0x1b0>
 801358a:	6822      	ldr	r2, [r4, #0]
 801358c:	07d2      	lsls	r2, r2, #31
 801358e:	d502      	bpl.n	8013596 <_printf_float+0x1b6>
 8013590:	3301      	adds	r3, #1
 8013592:	1859      	adds	r1, r3, r1
 8013594:	6121      	str	r1, [r4, #16]
 8013596:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013598:	65a3      	str	r3, [r4, #88]	; 0x58
 801359a:	2300      	movs	r3, #0
 801359c:	930a      	str	r3, [sp, #40]	; 0x28
 801359e:	e7d9      	b.n	8013554 <_printf_float+0x174>
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d103      	bne.n	80135ac <_printf_float+0x1cc>
 80135a4:	2201      	movs	r2, #1
 80135a6:	6821      	ldr	r1, [r4, #0]
 80135a8:	4211      	tst	r1, r2
 80135aa:	d000      	beq.n	80135ae <_printf_float+0x1ce>
 80135ac:	1c9a      	adds	r2, r3, #2
 80135ae:	6122      	str	r2, [r4, #16]
 80135b0:	e7f1      	b.n	8013596 <_printf_float+0x1b6>
 80135b2:	2367      	movs	r3, #103	; 0x67
 80135b4:	001e      	movs	r6, r3
 80135b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80135b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80135ba:	4293      	cmp	r3, r2
 80135bc:	db06      	blt.n	80135cc <_printf_float+0x1ec>
 80135be:	6822      	ldr	r2, [r4, #0]
 80135c0:	6123      	str	r3, [r4, #16]
 80135c2:	07d2      	lsls	r2, r2, #31
 80135c4:	d5e7      	bpl.n	8013596 <_printf_float+0x1b6>
 80135c6:	3301      	adds	r3, #1
 80135c8:	6123      	str	r3, [r4, #16]
 80135ca:	e7e4      	b.n	8013596 <_printf_float+0x1b6>
 80135cc:	2101      	movs	r1, #1
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	dc01      	bgt.n	80135d6 <_printf_float+0x1f6>
 80135d2:	1849      	adds	r1, r1, r1
 80135d4:	1ac9      	subs	r1, r1, r3
 80135d6:	1852      	adds	r2, r2, r1
 80135d8:	e7e9      	b.n	80135ae <_printf_float+0x1ce>
 80135da:	6822      	ldr	r2, [r4, #0]
 80135dc:	0553      	lsls	r3, r2, #21
 80135de:	d408      	bmi.n	80135f2 <_printf_float+0x212>
 80135e0:	6923      	ldr	r3, [r4, #16]
 80135e2:	002a      	movs	r2, r5
 80135e4:	0038      	movs	r0, r7
 80135e6:	9908      	ldr	r1, [sp, #32]
 80135e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80135ea:	47a8      	blx	r5
 80135ec:	1c43      	adds	r3, r0, #1
 80135ee:	d129      	bne.n	8013644 <_printf_float+0x264>
 80135f0:	e754      	b.n	801349c <_printf_float+0xbc>
 80135f2:	2e65      	cmp	r6, #101	; 0x65
 80135f4:	d800      	bhi.n	80135f8 <_printf_float+0x218>
 80135f6:	e0ec      	b.n	80137d2 <_printf_float+0x3f2>
 80135f8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80135fa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80135fc:	2200      	movs	r2, #0
 80135fe:	2300      	movs	r3, #0
 8013600:	f7ec ff2c 	bl	800045c <__aeabi_dcmpeq>
 8013604:	2800      	cmp	r0, #0
 8013606:	d034      	beq.n	8013672 <_printf_float+0x292>
 8013608:	2301      	movs	r3, #1
 801360a:	0038      	movs	r0, r7
 801360c:	4a37      	ldr	r2, [pc, #220]	; (80136ec <_printf_float+0x30c>)
 801360e:	9908      	ldr	r1, [sp, #32]
 8013610:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8013612:	47a8      	blx	r5
 8013614:	1c43      	adds	r3, r0, #1
 8013616:	d100      	bne.n	801361a <_printf_float+0x23a>
 8013618:	e740      	b.n	801349c <_printf_float+0xbc>
 801361a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801361c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801361e:	4293      	cmp	r3, r2
 8013620:	db02      	blt.n	8013628 <_printf_float+0x248>
 8013622:	6823      	ldr	r3, [r4, #0]
 8013624:	07db      	lsls	r3, r3, #31
 8013626:	d50d      	bpl.n	8013644 <_printf_float+0x264>
 8013628:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801362a:	0038      	movs	r0, r7
 801362c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801362e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013630:	9908      	ldr	r1, [sp, #32]
 8013632:	47a8      	blx	r5
 8013634:	2500      	movs	r5, #0
 8013636:	1c43      	adds	r3, r0, #1
 8013638:	d100      	bne.n	801363c <_printf_float+0x25c>
 801363a:	e72f      	b.n	801349c <_printf_float+0xbc>
 801363c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801363e:	3b01      	subs	r3, #1
 8013640:	42ab      	cmp	r3, r5
 8013642:	dc0a      	bgt.n	801365a <_printf_float+0x27a>
 8013644:	6823      	ldr	r3, [r4, #0]
 8013646:	079b      	lsls	r3, r3, #30
 8013648:	d500      	bpl.n	801364c <_printf_float+0x26c>
 801364a:	e114      	b.n	8013876 <_printf_float+0x496>
 801364c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801364e:	68e0      	ldr	r0, [r4, #12]
 8013650:	4298      	cmp	r0, r3
 8013652:	db00      	blt.n	8013656 <_printf_float+0x276>
 8013654:	e724      	b.n	80134a0 <_printf_float+0xc0>
 8013656:	0018      	movs	r0, r3
 8013658:	e722      	b.n	80134a0 <_printf_float+0xc0>
 801365a:	0022      	movs	r2, r4
 801365c:	2301      	movs	r3, #1
 801365e:	0038      	movs	r0, r7
 8013660:	9908      	ldr	r1, [sp, #32]
 8013662:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013664:	321a      	adds	r2, #26
 8013666:	47b0      	blx	r6
 8013668:	1c43      	adds	r3, r0, #1
 801366a:	d100      	bne.n	801366e <_printf_float+0x28e>
 801366c:	e716      	b.n	801349c <_printf_float+0xbc>
 801366e:	3501      	adds	r5, #1
 8013670:	e7e4      	b.n	801363c <_printf_float+0x25c>
 8013672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013674:	2b00      	cmp	r3, #0
 8013676:	dc3b      	bgt.n	80136f0 <_printf_float+0x310>
 8013678:	2301      	movs	r3, #1
 801367a:	0038      	movs	r0, r7
 801367c:	4a1b      	ldr	r2, [pc, #108]	; (80136ec <_printf_float+0x30c>)
 801367e:	9908      	ldr	r1, [sp, #32]
 8013680:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013682:	47b0      	blx	r6
 8013684:	1c43      	adds	r3, r0, #1
 8013686:	d100      	bne.n	801368a <_printf_float+0x2aa>
 8013688:	e708      	b.n	801349c <_printf_float+0xbc>
 801368a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801368c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801368e:	4313      	orrs	r3, r2
 8013690:	d102      	bne.n	8013698 <_printf_float+0x2b8>
 8013692:	6823      	ldr	r3, [r4, #0]
 8013694:	07db      	lsls	r3, r3, #31
 8013696:	d5d5      	bpl.n	8013644 <_printf_float+0x264>
 8013698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801369a:	0038      	movs	r0, r7
 801369c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801369e:	9908      	ldr	r1, [sp, #32]
 80136a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80136a2:	47b0      	blx	r6
 80136a4:	1c43      	adds	r3, r0, #1
 80136a6:	d100      	bne.n	80136aa <_printf_float+0x2ca>
 80136a8:	e6f8      	b.n	801349c <_printf_float+0xbc>
 80136aa:	2300      	movs	r3, #0
 80136ac:	930a      	str	r3, [sp, #40]	; 0x28
 80136ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80136b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136b2:	425b      	negs	r3, r3
 80136b4:	4293      	cmp	r3, r2
 80136b6:	dc01      	bgt.n	80136bc <_printf_float+0x2dc>
 80136b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80136ba:	e792      	b.n	80135e2 <_printf_float+0x202>
 80136bc:	0022      	movs	r2, r4
 80136be:	2301      	movs	r3, #1
 80136c0:	0038      	movs	r0, r7
 80136c2:	9908      	ldr	r1, [sp, #32]
 80136c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80136c6:	321a      	adds	r2, #26
 80136c8:	47b0      	blx	r6
 80136ca:	1c43      	adds	r3, r0, #1
 80136cc:	d100      	bne.n	80136d0 <_printf_float+0x2f0>
 80136ce:	e6e5      	b.n	801349c <_printf_float+0xbc>
 80136d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d2:	3301      	adds	r3, #1
 80136d4:	e7ea      	b.n	80136ac <_printf_float+0x2cc>
 80136d6:	46c0      	nop			; (mov r8, r8)
 80136d8:	7fefffff 	.word	0x7fefffff
 80136dc:	0801ab68 	.word	0x0801ab68
 80136e0:	0801ab6c 	.word	0x0801ab6c
 80136e4:	0801ab70 	.word	0x0801ab70
 80136e8:	0801ab74 	.word	0x0801ab74
 80136ec:	0801ab78 	.word	0x0801ab78
 80136f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80136f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80136f4:	920a      	str	r2, [sp, #40]	; 0x28
 80136f6:	429a      	cmp	r2, r3
 80136f8:	dd00      	ble.n	80136fc <_printf_float+0x31c>
 80136fa:	930a      	str	r3, [sp, #40]	; 0x28
 80136fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136fe:	2b00      	cmp	r3, #0
 8013700:	dc3d      	bgt.n	801377e <_printf_float+0x39e>
 8013702:	2300      	movs	r3, #0
 8013704:	930e      	str	r3, [sp, #56]	; 0x38
 8013706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013708:	43db      	mvns	r3, r3
 801370a:	17db      	asrs	r3, r3, #31
 801370c:	930f      	str	r3, [sp, #60]	; 0x3c
 801370e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013710:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013712:	930c      	str	r3, [sp, #48]	; 0x30
 8013714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013716:	4013      	ands	r3, r2
 8013718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801371a:	1ad3      	subs	r3, r2, r3
 801371c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801371e:	4293      	cmp	r3, r2
 8013720:	dc36      	bgt.n	8013790 <_printf_float+0x3b0>
 8013722:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013724:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013726:	4293      	cmp	r3, r2
 8013728:	db40      	blt.n	80137ac <_printf_float+0x3cc>
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	07db      	lsls	r3, r3, #31
 801372e:	d43d      	bmi.n	80137ac <_printf_float+0x3cc>
 8013730:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013734:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013736:	1ad3      	subs	r3, r2, r3
 8013738:	1a52      	subs	r2, r2, r1
 801373a:	920a      	str	r2, [sp, #40]	; 0x28
 801373c:	429a      	cmp	r2, r3
 801373e:	dd00      	ble.n	8013742 <_printf_float+0x362>
 8013740:	930a      	str	r3, [sp, #40]	; 0x28
 8013742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013744:	2b00      	cmp	r3, #0
 8013746:	dc3a      	bgt.n	80137be <_printf_float+0x3de>
 8013748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801374a:	2500      	movs	r5, #0
 801374c:	43db      	mvns	r3, r3
 801374e:	17db      	asrs	r3, r3, #31
 8013750:	930b      	str	r3, [sp, #44]	; 0x2c
 8013752:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013758:	1a9b      	subs	r3, r3, r2
 801375a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801375c:	400a      	ands	r2, r1
 801375e:	1a9b      	subs	r3, r3, r2
 8013760:	42ab      	cmp	r3, r5
 8013762:	dc00      	bgt.n	8013766 <_printf_float+0x386>
 8013764:	e76e      	b.n	8013644 <_printf_float+0x264>
 8013766:	0022      	movs	r2, r4
 8013768:	2301      	movs	r3, #1
 801376a:	0038      	movs	r0, r7
 801376c:	9908      	ldr	r1, [sp, #32]
 801376e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013770:	321a      	adds	r2, #26
 8013772:	47b0      	blx	r6
 8013774:	1c43      	adds	r3, r0, #1
 8013776:	d100      	bne.n	801377a <_printf_float+0x39a>
 8013778:	e690      	b.n	801349c <_printf_float+0xbc>
 801377a:	3501      	adds	r5, #1
 801377c:	e7e9      	b.n	8013752 <_printf_float+0x372>
 801377e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013780:	002a      	movs	r2, r5
 8013782:	0038      	movs	r0, r7
 8013784:	9908      	ldr	r1, [sp, #32]
 8013786:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013788:	47b0      	blx	r6
 801378a:	1c43      	adds	r3, r0, #1
 801378c:	d1b9      	bne.n	8013702 <_printf_float+0x322>
 801378e:	e685      	b.n	801349c <_printf_float+0xbc>
 8013790:	0022      	movs	r2, r4
 8013792:	2301      	movs	r3, #1
 8013794:	0038      	movs	r0, r7
 8013796:	9908      	ldr	r1, [sp, #32]
 8013798:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801379a:	321a      	adds	r2, #26
 801379c:	47b0      	blx	r6
 801379e:	1c43      	adds	r3, r0, #1
 80137a0:	d100      	bne.n	80137a4 <_printf_float+0x3c4>
 80137a2:	e67b      	b.n	801349c <_printf_float+0xbc>
 80137a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137a6:	3301      	adds	r3, #1
 80137a8:	930e      	str	r3, [sp, #56]	; 0x38
 80137aa:	e7b0      	b.n	801370e <_printf_float+0x32e>
 80137ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137ae:	0038      	movs	r0, r7
 80137b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137b2:	9908      	ldr	r1, [sp, #32]
 80137b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80137b6:	47b0      	blx	r6
 80137b8:	1c43      	adds	r3, r0, #1
 80137ba:	d1b9      	bne.n	8013730 <_printf_float+0x350>
 80137bc:	e66e      	b.n	801349c <_printf_float+0xbc>
 80137be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80137c0:	0038      	movs	r0, r7
 80137c2:	18ea      	adds	r2, r5, r3
 80137c4:	9908      	ldr	r1, [sp, #32]
 80137c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80137ca:	47a8      	blx	r5
 80137cc:	1c43      	adds	r3, r0, #1
 80137ce:	d1bb      	bne.n	8013748 <_printf_float+0x368>
 80137d0:	e664      	b.n	801349c <_printf_float+0xbc>
 80137d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	dc02      	bgt.n	80137de <_printf_float+0x3fe>
 80137d8:	2301      	movs	r3, #1
 80137da:	421a      	tst	r2, r3
 80137dc:	d038      	beq.n	8013850 <_printf_float+0x470>
 80137de:	2301      	movs	r3, #1
 80137e0:	002a      	movs	r2, r5
 80137e2:	0038      	movs	r0, r7
 80137e4:	9908      	ldr	r1, [sp, #32]
 80137e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80137e8:	47b0      	blx	r6
 80137ea:	1c43      	adds	r3, r0, #1
 80137ec:	d100      	bne.n	80137f0 <_printf_float+0x410>
 80137ee:	e655      	b.n	801349c <_printf_float+0xbc>
 80137f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137f2:	0038      	movs	r0, r7
 80137f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80137f6:	9908      	ldr	r1, [sp, #32]
 80137f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80137fa:	47b0      	blx	r6
 80137fc:	1c43      	adds	r3, r0, #1
 80137fe:	d100      	bne.n	8013802 <_printf_float+0x422>
 8013800:	e64c      	b.n	801349c <_printf_float+0xbc>
 8013802:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8013804:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8013806:	2200      	movs	r2, #0
 8013808:	2300      	movs	r3, #0
 801380a:	f7ec fe27 	bl	800045c <__aeabi_dcmpeq>
 801380e:	2800      	cmp	r0, #0
 8013810:	d11c      	bne.n	801384c <_printf_float+0x46c>
 8013812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013814:	1c6a      	adds	r2, r5, #1
 8013816:	3b01      	subs	r3, #1
 8013818:	0038      	movs	r0, r7
 801381a:	9908      	ldr	r1, [sp, #32]
 801381c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801381e:	47a8      	blx	r5
 8013820:	1c43      	adds	r3, r0, #1
 8013822:	d10f      	bne.n	8013844 <_printf_float+0x464>
 8013824:	e63a      	b.n	801349c <_printf_float+0xbc>
 8013826:	0022      	movs	r2, r4
 8013828:	2301      	movs	r3, #1
 801382a:	0038      	movs	r0, r7
 801382c:	9908      	ldr	r1, [sp, #32]
 801382e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013830:	321a      	adds	r2, #26
 8013832:	47b0      	blx	r6
 8013834:	1c43      	adds	r3, r0, #1
 8013836:	d100      	bne.n	801383a <_printf_float+0x45a>
 8013838:	e630      	b.n	801349c <_printf_float+0xbc>
 801383a:	3501      	adds	r5, #1
 801383c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801383e:	3b01      	subs	r3, #1
 8013840:	42ab      	cmp	r3, r5
 8013842:	dcf0      	bgt.n	8013826 <_printf_float+0x446>
 8013844:	0022      	movs	r2, r4
 8013846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013848:	3250      	adds	r2, #80	; 0x50
 801384a:	e6cb      	b.n	80135e4 <_printf_float+0x204>
 801384c:	2500      	movs	r5, #0
 801384e:	e7f5      	b.n	801383c <_printf_float+0x45c>
 8013850:	002a      	movs	r2, r5
 8013852:	e7e1      	b.n	8013818 <_printf_float+0x438>
 8013854:	0022      	movs	r2, r4
 8013856:	2301      	movs	r3, #1
 8013858:	0038      	movs	r0, r7
 801385a:	9908      	ldr	r1, [sp, #32]
 801385c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801385e:	3219      	adds	r2, #25
 8013860:	47b0      	blx	r6
 8013862:	1c43      	adds	r3, r0, #1
 8013864:	d100      	bne.n	8013868 <_printf_float+0x488>
 8013866:	e619      	b.n	801349c <_printf_float+0xbc>
 8013868:	3501      	adds	r5, #1
 801386a:	68e3      	ldr	r3, [r4, #12]
 801386c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801386e:	1a9b      	subs	r3, r3, r2
 8013870:	42ab      	cmp	r3, r5
 8013872:	dcef      	bgt.n	8013854 <_printf_float+0x474>
 8013874:	e6ea      	b.n	801364c <_printf_float+0x26c>
 8013876:	2500      	movs	r5, #0
 8013878:	e7f7      	b.n	801386a <_printf_float+0x48a>
 801387a:	46c0      	nop			; (mov r8, r8)

0801387c <_printf_common>:
 801387c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801387e:	0015      	movs	r5, r2
 8013880:	9301      	str	r3, [sp, #4]
 8013882:	688a      	ldr	r2, [r1, #8]
 8013884:	690b      	ldr	r3, [r1, #16]
 8013886:	000c      	movs	r4, r1
 8013888:	9000      	str	r0, [sp, #0]
 801388a:	4293      	cmp	r3, r2
 801388c:	da00      	bge.n	8013890 <_printf_common+0x14>
 801388e:	0013      	movs	r3, r2
 8013890:	0022      	movs	r2, r4
 8013892:	602b      	str	r3, [r5, #0]
 8013894:	3243      	adds	r2, #67	; 0x43
 8013896:	7812      	ldrb	r2, [r2, #0]
 8013898:	2a00      	cmp	r2, #0
 801389a:	d001      	beq.n	80138a0 <_printf_common+0x24>
 801389c:	3301      	adds	r3, #1
 801389e:	602b      	str	r3, [r5, #0]
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	069b      	lsls	r3, r3, #26
 80138a4:	d502      	bpl.n	80138ac <_printf_common+0x30>
 80138a6:	682b      	ldr	r3, [r5, #0]
 80138a8:	3302      	adds	r3, #2
 80138aa:	602b      	str	r3, [r5, #0]
 80138ac:	6822      	ldr	r2, [r4, #0]
 80138ae:	2306      	movs	r3, #6
 80138b0:	0017      	movs	r7, r2
 80138b2:	401f      	ands	r7, r3
 80138b4:	421a      	tst	r2, r3
 80138b6:	d027      	beq.n	8013908 <_printf_common+0x8c>
 80138b8:	0023      	movs	r3, r4
 80138ba:	3343      	adds	r3, #67	; 0x43
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	1e5a      	subs	r2, r3, #1
 80138c0:	4193      	sbcs	r3, r2
 80138c2:	6822      	ldr	r2, [r4, #0]
 80138c4:	0692      	lsls	r2, r2, #26
 80138c6:	d430      	bmi.n	801392a <_printf_common+0xae>
 80138c8:	0022      	movs	r2, r4
 80138ca:	9901      	ldr	r1, [sp, #4]
 80138cc:	9800      	ldr	r0, [sp, #0]
 80138ce:	9e08      	ldr	r6, [sp, #32]
 80138d0:	3243      	adds	r2, #67	; 0x43
 80138d2:	47b0      	blx	r6
 80138d4:	1c43      	adds	r3, r0, #1
 80138d6:	d025      	beq.n	8013924 <_printf_common+0xa8>
 80138d8:	2306      	movs	r3, #6
 80138da:	6820      	ldr	r0, [r4, #0]
 80138dc:	682a      	ldr	r2, [r5, #0]
 80138de:	68e1      	ldr	r1, [r4, #12]
 80138e0:	2500      	movs	r5, #0
 80138e2:	4003      	ands	r3, r0
 80138e4:	2b04      	cmp	r3, #4
 80138e6:	d103      	bne.n	80138f0 <_printf_common+0x74>
 80138e8:	1a8d      	subs	r5, r1, r2
 80138ea:	43eb      	mvns	r3, r5
 80138ec:	17db      	asrs	r3, r3, #31
 80138ee:	401d      	ands	r5, r3
 80138f0:	68a3      	ldr	r3, [r4, #8]
 80138f2:	6922      	ldr	r2, [r4, #16]
 80138f4:	4293      	cmp	r3, r2
 80138f6:	dd01      	ble.n	80138fc <_printf_common+0x80>
 80138f8:	1a9b      	subs	r3, r3, r2
 80138fa:	18ed      	adds	r5, r5, r3
 80138fc:	2700      	movs	r7, #0
 80138fe:	42bd      	cmp	r5, r7
 8013900:	d120      	bne.n	8013944 <_printf_common+0xc8>
 8013902:	2000      	movs	r0, #0
 8013904:	e010      	b.n	8013928 <_printf_common+0xac>
 8013906:	3701      	adds	r7, #1
 8013908:	68e3      	ldr	r3, [r4, #12]
 801390a:	682a      	ldr	r2, [r5, #0]
 801390c:	1a9b      	subs	r3, r3, r2
 801390e:	42bb      	cmp	r3, r7
 8013910:	ddd2      	ble.n	80138b8 <_printf_common+0x3c>
 8013912:	0022      	movs	r2, r4
 8013914:	2301      	movs	r3, #1
 8013916:	9901      	ldr	r1, [sp, #4]
 8013918:	9800      	ldr	r0, [sp, #0]
 801391a:	9e08      	ldr	r6, [sp, #32]
 801391c:	3219      	adds	r2, #25
 801391e:	47b0      	blx	r6
 8013920:	1c43      	adds	r3, r0, #1
 8013922:	d1f0      	bne.n	8013906 <_printf_common+0x8a>
 8013924:	2001      	movs	r0, #1
 8013926:	4240      	negs	r0, r0
 8013928:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801392a:	2030      	movs	r0, #48	; 0x30
 801392c:	18e1      	adds	r1, r4, r3
 801392e:	3143      	adds	r1, #67	; 0x43
 8013930:	7008      	strb	r0, [r1, #0]
 8013932:	0021      	movs	r1, r4
 8013934:	1c5a      	adds	r2, r3, #1
 8013936:	3145      	adds	r1, #69	; 0x45
 8013938:	7809      	ldrb	r1, [r1, #0]
 801393a:	18a2      	adds	r2, r4, r2
 801393c:	3243      	adds	r2, #67	; 0x43
 801393e:	3302      	adds	r3, #2
 8013940:	7011      	strb	r1, [r2, #0]
 8013942:	e7c1      	b.n	80138c8 <_printf_common+0x4c>
 8013944:	0022      	movs	r2, r4
 8013946:	2301      	movs	r3, #1
 8013948:	9901      	ldr	r1, [sp, #4]
 801394a:	9800      	ldr	r0, [sp, #0]
 801394c:	9e08      	ldr	r6, [sp, #32]
 801394e:	321a      	adds	r2, #26
 8013950:	47b0      	blx	r6
 8013952:	1c43      	adds	r3, r0, #1
 8013954:	d0e6      	beq.n	8013924 <_printf_common+0xa8>
 8013956:	3701      	adds	r7, #1
 8013958:	e7d1      	b.n	80138fe <_printf_common+0x82>
	...

0801395c <_printf_i>:
 801395c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801395e:	b08b      	sub	sp, #44	; 0x2c
 8013960:	9206      	str	r2, [sp, #24]
 8013962:	000a      	movs	r2, r1
 8013964:	3243      	adds	r2, #67	; 0x43
 8013966:	9307      	str	r3, [sp, #28]
 8013968:	9005      	str	r0, [sp, #20]
 801396a:	9204      	str	r2, [sp, #16]
 801396c:	7e0a      	ldrb	r2, [r1, #24]
 801396e:	000c      	movs	r4, r1
 8013970:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013972:	2a78      	cmp	r2, #120	; 0x78
 8013974:	d806      	bhi.n	8013984 <_printf_i+0x28>
 8013976:	2a62      	cmp	r2, #98	; 0x62
 8013978:	d808      	bhi.n	801398c <_printf_i+0x30>
 801397a:	2a00      	cmp	r2, #0
 801397c:	d100      	bne.n	8013980 <_printf_i+0x24>
 801397e:	e0c0      	b.n	8013b02 <_printf_i+0x1a6>
 8013980:	2a58      	cmp	r2, #88	; 0x58
 8013982:	d052      	beq.n	8013a2a <_printf_i+0xce>
 8013984:	0026      	movs	r6, r4
 8013986:	3642      	adds	r6, #66	; 0x42
 8013988:	7032      	strb	r2, [r6, #0]
 801398a:	e022      	b.n	80139d2 <_printf_i+0x76>
 801398c:	0010      	movs	r0, r2
 801398e:	3863      	subs	r0, #99	; 0x63
 8013990:	2815      	cmp	r0, #21
 8013992:	d8f7      	bhi.n	8013984 <_printf_i+0x28>
 8013994:	f7ec fbd2 	bl	800013c <__gnu_thumb1_case_shi>
 8013998:	001f0016 	.word	0x001f0016
 801399c:	fff6fff6 	.word	0xfff6fff6
 80139a0:	fff6fff6 	.word	0xfff6fff6
 80139a4:	fff6001f 	.word	0xfff6001f
 80139a8:	fff6fff6 	.word	0xfff6fff6
 80139ac:	00a8fff6 	.word	0x00a8fff6
 80139b0:	009a0036 	.word	0x009a0036
 80139b4:	fff6fff6 	.word	0xfff6fff6
 80139b8:	fff600b9 	.word	0xfff600b9
 80139bc:	fff60036 	.word	0xfff60036
 80139c0:	009efff6 	.word	0x009efff6
 80139c4:	0026      	movs	r6, r4
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	3642      	adds	r6, #66	; 0x42
 80139ca:	1d11      	adds	r1, r2, #4
 80139cc:	6019      	str	r1, [r3, #0]
 80139ce:	6813      	ldr	r3, [r2, #0]
 80139d0:	7033      	strb	r3, [r6, #0]
 80139d2:	2301      	movs	r3, #1
 80139d4:	e0a7      	b.n	8013b26 <_printf_i+0x1ca>
 80139d6:	6808      	ldr	r0, [r1, #0]
 80139d8:	6819      	ldr	r1, [r3, #0]
 80139da:	1d0a      	adds	r2, r1, #4
 80139dc:	0605      	lsls	r5, r0, #24
 80139de:	d50b      	bpl.n	80139f8 <_printf_i+0x9c>
 80139e0:	680d      	ldr	r5, [r1, #0]
 80139e2:	601a      	str	r2, [r3, #0]
 80139e4:	2d00      	cmp	r5, #0
 80139e6:	da03      	bge.n	80139f0 <_printf_i+0x94>
 80139e8:	232d      	movs	r3, #45	; 0x2d
 80139ea:	9a04      	ldr	r2, [sp, #16]
 80139ec:	426d      	negs	r5, r5
 80139ee:	7013      	strb	r3, [r2, #0]
 80139f0:	4b61      	ldr	r3, [pc, #388]	; (8013b78 <_printf_i+0x21c>)
 80139f2:	270a      	movs	r7, #10
 80139f4:	9303      	str	r3, [sp, #12]
 80139f6:	e032      	b.n	8013a5e <_printf_i+0x102>
 80139f8:	680d      	ldr	r5, [r1, #0]
 80139fa:	601a      	str	r2, [r3, #0]
 80139fc:	0641      	lsls	r1, r0, #25
 80139fe:	d5f1      	bpl.n	80139e4 <_printf_i+0x88>
 8013a00:	b22d      	sxth	r5, r5
 8013a02:	e7ef      	b.n	80139e4 <_printf_i+0x88>
 8013a04:	680d      	ldr	r5, [r1, #0]
 8013a06:	6819      	ldr	r1, [r3, #0]
 8013a08:	1d08      	adds	r0, r1, #4
 8013a0a:	6018      	str	r0, [r3, #0]
 8013a0c:	062e      	lsls	r6, r5, #24
 8013a0e:	d501      	bpl.n	8013a14 <_printf_i+0xb8>
 8013a10:	680d      	ldr	r5, [r1, #0]
 8013a12:	e003      	b.n	8013a1c <_printf_i+0xc0>
 8013a14:	066d      	lsls	r5, r5, #25
 8013a16:	d5fb      	bpl.n	8013a10 <_printf_i+0xb4>
 8013a18:	680d      	ldr	r5, [r1, #0]
 8013a1a:	b2ad      	uxth	r5, r5
 8013a1c:	4b56      	ldr	r3, [pc, #344]	; (8013b78 <_printf_i+0x21c>)
 8013a1e:	270a      	movs	r7, #10
 8013a20:	9303      	str	r3, [sp, #12]
 8013a22:	2a6f      	cmp	r2, #111	; 0x6f
 8013a24:	d117      	bne.n	8013a56 <_printf_i+0xfa>
 8013a26:	2708      	movs	r7, #8
 8013a28:	e015      	b.n	8013a56 <_printf_i+0xfa>
 8013a2a:	3145      	adds	r1, #69	; 0x45
 8013a2c:	700a      	strb	r2, [r1, #0]
 8013a2e:	4a52      	ldr	r2, [pc, #328]	; (8013b78 <_printf_i+0x21c>)
 8013a30:	9203      	str	r2, [sp, #12]
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	6821      	ldr	r1, [r4, #0]
 8013a36:	ca20      	ldmia	r2!, {r5}
 8013a38:	601a      	str	r2, [r3, #0]
 8013a3a:	0608      	lsls	r0, r1, #24
 8013a3c:	d550      	bpl.n	8013ae0 <_printf_i+0x184>
 8013a3e:	07cb      	lsls	r3, r1, #31
 8013a40:	d502      	bpl.n	8013a48 <_printf_i+0xec>
 8013a42:	2320      	movs	r3, #32
 8013a44:	4319      	orrs	r1, r3
 8013a46:	6021      	str	r1, [r4, #0]
 8013a48:	2710      	movs	r7, #16
 8013a4a:	2d00      	cmp	r5, #0
 8013a4c:	d103      	bne.n	8013a56 <_printf_i+0xfa>
 8013a4e:	2320      	movs	r3, #32
 8013a50:	6822      	ldr	r2, [r4, #0]
 8013a52:	439a      	bics	r2, r3
 8013a54:	6022      	str	r2, [r4, #0]
 8013a56:	0023      	movs	r3, r4
 8013a58:	2200      	movs	r2, #0
 8013a5a:	3343      	adds	r3, #67	; 0x43
 8013a5c:	701a      	strb	r2, [r3, #0]
 8013a5e:	6863      	ldr	r3, [r4, #4]
 8013a60:	60a3      	str	r3, [r4, #8]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	db03      	blt.n	8013a6e <_printf_i+0x112>
 8013a66:	2204      	movs	r2, #4
 8013a68:	6821      	ldr	r1, [r4, #0]
 8013a6a:	4391      	bics	r1, r2
 8013a6c:	6021      	str	r1, [r4, #0]
 8013a6e:	2d00      	cmp	r5, #0
 8013a70:	d102      	bne.n	8013a78 <_printf_i+0x11c>
 8013a72:	9e04      	ldr	r6, [sp, #16]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00c      	beq.n	8013a92 <_printf_i+0x136>
 8013a78:	9e04      	ldr	r6, [sp, #16]
 8013a7a:	0028      	movs	r0, r5
 8013a7c:	0039      	movs	r1, r7
 8013a7e:	f7ec fbed 	bl	800025c <__aeabi_uidivmod>
 8013a82:	9b03      	ldr	r3, [sp, #12]
 8013a84:	3e01      	subs	r6, #1
 8013a86:	5c5b      	ldrb	r3, [r3, r1]
 8013a88:	7033      	strb	r3, [r6, #0]
 8013a8a:	002b      	movs	r3, r5
 8013a8c:	0005      	movs	r5, r0
 8013a8e:	429f      	cmp	r7, r3
 8013a90:	d9f3      	bls.n	8013a7a <_printf_i+0x11e>
 8013a92:	2f08      	cmp	r7, #8
 8013a94:	d109      	bne.n	8013aaa <_printf_i+0x14e>
 8013a96:	6823      	ldr	r3, [r4, #0]
 8013a98:	07db      	lsls	r3, r3, #31
 8013a9a:	d506      	bpl.n	8013aaa <_printf_i+0x14e>
 8013a9c:	6863      	ldr	r3, [r4, #4]
 8013a9e:	6922      	ldr	r2, [r4, #16]
 8013aa0:	4293      	cmp	r3, r2
 8013aa2:	dc02      	bgt.n	8013aaa <_printf_i+0x14e>
 8013aa4:	2330      	movs	r3, #48	; 0x30
 8013aa6:	3e01      	subs	r6, #1
 8013aa8:	7033      	strb	r3, [r6, #0]
 8013aaa:	9b04      	ldr	r3, [sp, #16]
 8013aac:	1b9b      	subs	r3, r3, r6
 8013aae:	6123      	str	r3, [r4, #16]
 8013ab0:	9b07      	ldr	r3, [sp, #28]
 8013ab2:	0021      	movs	r1, r4
 8013ab4:	9300      	str	r3, [sp, #0]
 8013ab6:	9805      	ldr	r0, [sp, #20]
 8013ab8:	9b06      	ldr	r3, [sp, #24]
 8013aba:	aa09      	add	r2, sp, #36	; 0x24
 8013abc:	f7ff fede 	bl	801387c <_printf_common>
 8013ac0:	1c43      	adds	r3, r0, #1
 8013ac2:	d135      	bne.n	8013b30 <_printf_i+0x1d4>
 8013ac4:	2001      	movs	r0, #1
 8013ac6:	4240      	negs	r0, r0
 8013ac8:	b00b      	add	sp, #44	; 0x2c
 8013aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013acc:	2220      	movs	r2, #32
 8013ace:	6809      	ldr	r1, [r1, #0]
 8013ad0:	430a      	orrs	r2, r1
 8013ad2:	6022      	str	r2, [r4, #0]
 8013ad4:	0022      	movs	r2, r4
 8013ad6:	2178      	movs	r1, #120	; 0x78
 8013ad8:	3245      	adds	r2, #69	; 0x45
 8013ada:	7011      	strb	r1, [r2, #0]
 8013adc:	4a27      	ldr	r2, [pc, #156]	; (8013b7c <_printf_i+0x220>)
 8013ade:	e7a7      	b.n	8013a30 <_printf_i+0xd4>
 8013ae0:	0648      	lsls	r0, r1, #25
 8013ae2:	d5ac      	bpl.n	8013a3e <_printf_i+0xe2>
 8013ae4:	b2ad      	uxth	r5, r5
 8013ae6:	e7aa      	b.n	8013a3e <_printf_i+0xe2>
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	680d      	ldr	r5, [r1, #0]
 8013aec:	1d10      	adds	r0, r2, #4
 8013aee:	6949      	ldr	r1, [r1, #20]
 8013af0:	6018      	str	r0, [r3, #0]
 8013af2:	6813      	ldr	r3, [r2, #0]
 8013af4:	062e      	lsls	r6, r5, #24
 8013af6:	d501      	bpl.n	8013afc <_printf_i+0x1a0>
 8013af8:	6019      	str	r1, [r3, #0]
 8013afa:	e002      	b.n	8013b02 <_printf_i+0x1a6>
 8013afc:	066d      	lsls	r5, r5, #25
 8013afe:	d5fb      	bpl.n	8013af8 <_printf_i+0x19c>
 8013b00:	8019      	strh	r1, [r3, #0]
 8013b02:	2300      	movs	r3, #0
 8013b04:	9e04      	ldr	r6, [sp, #16]
 8013b06:	6123      	str	r3, [r4, #16]
 8013b08:	e7d2      	b.n	8013ab0 <_printf_i+0x154>
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	1d11      	adds	r1, r2, #4
 8013b0e:	6019      	str	r1, [r3, #0]
 8013b10:	6816      	ldr	r6, [r2, #0]
 8013b12:	2100      	movs	r1, #0
 8013b14:	0030      	movs	r0, r6
 8013b16:	6862      	ldr	r2, [r4, #4]
 8013b18:	f002 fad6 	bl	80160c8 <memchr>
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	d001      	beq.n	8013b24 <_printf_i+0x1c8>
 8013b20:	1b80      	subs	r0, r0, r6
 8013b22:	6060      	str	r0, [r4, #4]
 8013b24:	6863      	ldr	r3, [r4, #4]
 8013b26:	6123      	str	r3, [r4, #16]
 8013b28:	2300      	movs	r3, #0
 8013b2a:	9a04      	ldr	r2, [sp, #16]
 8013b2c:	7013      	strb	r3, [r2, #0]
 8013b2e:	e7bf      	b.n	8013ab0 <_printf_i+0x154>
 8013b30:	6923      	ldr	r3, [r4, #16]
 8013b32:	0032      	movs	r2, r6
 8013b34:	9906      	ldr	r1, [sp, #24]
 8013b36:	9805      	ldr	r0, [sp, #20]
 8013b38:	9d07      	ldr	r5, [sp, #28]
 8013b3a:	47a8      	blx	r5
 8013b3c:	1c43      	adds	r3, r0, #1
 8013b3e:	d0c1      	beq.n	8013ac4 <_printf_i+0x168>
 8013b40:	6823      	ldr	r3, [r4, #0]
 8013b42:	079b      	lsls	r3, r3, #30
 8013b44:	d415      	bmi.n	8013b72 <_printf_i+0x216>
 8013b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b48:	68e0      	ldr	r0, [r4, #12]
 8013b4a:	4298      	cmp	r0, r3
 8013b4c:	dabc      	bge.n	8013ac8 <_printf_i+0x16c>
 8013b4e:	0018      	movs	r0, r3
 8013b50:	e7ba      	b.n	8013ac8 <_printf_i+0x16c>
 8013b52:	0022      	movs	r2, r4
 8013b54:	2301      	movs	r3, #1
 8013b56:	9906      	ldr	r1, [sp, #24]
 8013b58:	9805      	ldr	r0, [sp, #20]
 8013b5a:	9e07      	ldr	r6, [sp, #28]
 8013b5c:	3219      	adds	r2, #25
 8013b5e:	47b0      	blx	r6
 8013b60:	1c43      	adds	r3, r0, #1
 8013b62:	d0af      	beq.n	8013ac4 <_printf_i+0x168>
 8013b64:	3501      	adds	r5, #1
 8013b66:	68e3      	ldr	r3, [r4, #12]
 8013b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b6a:	1a9b      	subs	r3, r3, r2
 8013b6c:	42ab      	cmp	r3, r5
 8013b6e:	dcf0      	bgt.n	8013b52 <_printf_i+0x1f6>
 8013b70:	e7e9      	b.n	8013b46 <_printf_i+0x1ea>
 8013b72:	2500      	movs	r5, #0
 8013b74:	e7f7      	b.n	8013b66 <_printf_i+0x20a>
 8013b76:	46c0      	nop			; (mov r8, r8)
 8013b78:	0801ab7a 	.word	0x0801ab7a
 8013b7c:	0801ab8b 	.word	0x0801ab8b

08013b80 <rand>:
 8013b80:	4b16      	ldr	r3, [pc, #88]	; (8013bdc <rand+0x5c>)
 8013b82:	b510      	push	{r4, lr}
 8013b84:	681c      	ldr	r4, [r3, #0]
 8013b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d116      	bne.n	8013bba <rand+0x3a>
 8013b8c:	2018      	movs	r0, #24
 8013b8e:	f7ff faa1 	bl	80130d4 <malloc>
 8013b92:	1e02      	subs	r2, r0, #0
 8013b94:	63a0      	str	r0, [r4, #56]	; 0x38
 8013b96:	d104      	bne.n	8013ba2 <rand+0x22>
 8013b98:	214e      	movs	r1, #78	; 0x4e
 8013b9a:	4b11      	ldr	r3, [pc, #68]	; (8013be0 <rand+0x60>)
 8013b9c:	4811      	ldr	r0, [pc, #68]	; (8013be4 <rand+0x64>)
 8013b9e:	f001 f82d 	bl	8014bfc <__assert_func>
 8013ba2:	4b11      	ldr	r3, [pc, #68]	; (8013be8 <rand+0x68>)
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	6003      	str	r3, [r0, #0]
 8013ba8:	4b10      	ldr	r3, [pc, #64]	; (8013bec <rand+0x6c>)
 8013baa:	6043      	str	r3, [r0, #4]
 8013bac:	4b10      	ldr	r3, [pc, #64]	; (8013bf0 <rand+0x70>)
 8013bae:	6083      	str	r3, [r0, #8]
 8013bb0:	230b      	movs	r3, #11
 8013bb2:	8183      	strh	r3, [r0, #12]
 8013bb4:	2001      	movs	r0, #1
 8013bb6:	6110      	str	r0, [r2, #16]
 8013bb8:	6151      	str	r1, [r2, #20]
 8013bba:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013bbc:	4a0d      	ldr	r2, [pc, #52]	; (8013bf4 <rand+0x74>)
 8013bbe:	6920      	ldr	r0, [r4, #16]
 8013bc0:	6961      	ldr	r1, [r4, #20]
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	; (8013bf8 <rand+0x78>)
 8013bc4:	f7ec fcbc 	bl	8000540 <__aeabi_lmul>
 8013bc8:	2201      	movs	r2, #1
 8013bca:	2300      	movs	r3, #0
 8013bcc:	1880      	adds	r0, r0, r2
 8013bce:	4159      	adcs	r1, r3
 8013bd0:	6120      	str	r0, [r4, #16]
 8013bd2:	6161      	str	r1, [r4, #20]
 8013bd4:	0048      	lsls	r0, r1, #1
 8013bd6:	0840      	lsrs	r0, r0, #1
 8013bd8:	bd10      	pop	{r4, pc}
 8013bda:	46c0      	nop			; (mov r8, r8)
 8013bdc:	20000120 	.word	0x20000120
 8013be0:	0801ab9c 	.word	0x0801ab9c
 8013be4:	0801abb3 	.word	0x0801abb3
 8013be8:	abcd330e 	.word	0xabcd330e
 8013bec:	e66d1234 	.word	0xe66d1234
 8013bf0:	0005deec 	.word	0x0005deec
 8013bf4:	4c957f2d 	.word	0x4c957f2d
 8013bf8:	5851f42d 	.word	0x5851f42d

08013bfc <realloc>:
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	4b03      	ldr	r3, [pc, #12]	; (8013c0c <realloc+0x10>)
 8013c00:	000a      	movs	r2, r1
 8013c02:	0001      	movs	r1, r0
 8013c04:	6818      	ldr	r0, [r3, #0]
 8013c06:	f002 ff53 	bl	8016ab0 <_realloc_r>
 8013c0a:	bd10      	pop	{r4, pc}
 8013c0c:	20000120 	.word	0x20000120

08013c10 <_sbrk_r>:
 8013c10:	2300      	movs	r3, #0
 8013c12:	b570      	push	{r4, r5, r6, lr}
 8013c14:	4d06      	ldr	r5, [pc, #24]	; (8013c30 <_sbrk_r+0x20>)
 8013c16:	0004      	movs	r4, r0
 8013c18:	0008      	movs	r0, r1
 8013c1a:	602b      	str	r3, [r5, #0]
 8013c1c:	f003 feb6 	bl	801798c <_sbrk>
 8013c20:	1c43      	adds	r3, r0, #1
 8013c22:	d103      	bne.n	8013c2c <_sbrk_r+0x1c>
 8013c24:	682b      	ldr	r3, [r5, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d000      	beq.n	8013c2c <_sbrk_r+0x1c>
 8013c2a:	6023      	str	r3, [r4, #0]
 8013c2c:	bd70      	pop	{r4, r5, r6, pc}
 8013c2e:	46c0      	nop			; (mov r8, r8)
 8013c30:	20005cb8 	.word	0x20005cb8

08013c34 <sniprintf>:
 8013c34:	b40c      	push	{r2, r3}
 8013c36:	b530      	push	{r4, r5, lr}
 8013c38:	4b17      	ldr	r3, [pc, #92]	; (8013c98 <sniprintf+0x64>)
 8013c3a:	000c      	movs	r4, r1
 8013c3c:	681d      	ldr	r5, [r3, #0]
 8013c3e:	b09d      	sub	sp, #116	; 0x74
 8013c40:	2900      	cmp	r1, #0
 8013c42:	da08      	bge.n	8013c56 <sniprintf+0x22>
 8013c44:	238b      	movs	r3, #139	; 0x8b
 8013c46:	2001      	movs	r0, #1
 8013c48:	602b      	str	r3, [r5, #0]
 8013c4a:	4240      	negs	r0, r0
 8013c4c:	b01d      	add	sp, #116	; 0x74
 8013c4e:	bc30      	pop	{r4, r5}
 8013c50:	bc08      	pop	{r3}
 8013c52:	b002      	add	sp, #8
 8013c54:	4718      	bx	r3
 8013c56:	2382      	movs	r3, #130	; 0x82
 8013c58:	466a      	mov	r2, sp
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	8293      	strh	r3, [r2, #20]
 8013c5e:	2300      	movs	r3, #0
 8013c60:	9002      	str	r0, [sp, #8]
 8013c62:	9006      	str	r0, [sp, #24]
 8013c64:	4299      	cmp	r1, r3
 8013c66:	d000      	beq.n	8013c6a <sniprintf+0x36>
 8013c68:	1e4b      	subs	r3, r1, #1
 8013c6a:	9304      	str	r3, [sp, #16]
 8013c6c:	9307      	str	r3, [sp, #28]
 8013c6e:	2301      	movs	r3, #1
 8013c70:	466a      	mov	r2, sp
 8013c72:	425b      	negs	r3, r3
 8013c74:	82d3      	strh	r3, [r2, #22]
 8013c76:	0028      	movs	r0, r5
 8013c78:	ab21      	add	r3, sp, #132	; 0x84
 8013c7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013c7c:	a902      	add	r1, sp, #8
 8013c7e:	9301      	str	r3, [sp, #4]
 8013c80:	f002 ff9e 	bl	8016bc0 <_svfiprintf_r>
 8013c84:	1c43      	adds	r3, r0, #1
 8013c86:	da01      	bge.n	8013c8c <sniprintf+0x58>
 8013c88:	238b      	movs	r3, #139	; 0x8b
 8013c8a:	602b      	str	r3, [r5, #0]
 8013c8c:	2c00      	cmp	r4, #0
 8013c8e:	d0dd      	beq.n	8013c4c <sniprintf+0x18>
 8013c90:	2300      	movs	r3, #0
 8013c92:	9a02      	ldr	r2, [sp, #8]
 8013c94:	7013      	strb	r3, [r2, #0]
 8013c96:	e7d9      	b.n	8013c4c <sniprintf+0x18>
 8013c98:	20000120 	.word	0x20000120

08013c9c <siprintf>:
 8013c9c:	b40e      	push	{r1, r2, r3}
 8013c9e:	b500      	push	{lr}
 8013ca0:	490b      	ldr	r1, [pc, #44]	; (8013cd0 <siprintf+0x34>)
 8013ca2:	b09c      	sub	sp, #112	; 0x70
 8013ca4:	ab1d      	add	r3, sp, #116	; 0x74
 8013ca6:	9002      	str	r0, [sp, #8]
 8013ca8:	9006      	str	r0, [sp, #24]
 8013caa:	9107      	str	r1, [sp, #28]
 8013cac:	9104      	str	r1, [sp, #16]
 8013cae:	4809      	ldr	r0, [pc, #36]	; (8013cd4 <siprintf+0x38>)
 8013cb0:	4909      	ldr	r1, [pc, #36]	; (8013cd8 <siprintf+0x3c>)
 8013cb2:	cb04      	ldmia	r3!, {r2}
 8013cb4:	9105      	str	r1, [sp, #20]
 8013cb6:	6800      	ldr	r0, [r0, #0]
 8013cb8:	a902      	add	r1, sp, #8
 8013cba:	9301      	str	r3, [sp, #4]
 8013cbc:	f002 ff80 	bl	8016bc0 <_svfiprintf_r>
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	9a02      	ldr	r2, [sp, #8]
 8013cc4:	7013      	strb	r3, [r2, #0]
 8013cc6:	b01c      	add	sp, #112	; 0x70
 8013cc8:	bc08      	pop	{r3}
 8013cca:	b003      	add	sp, #12
 8013ccc:	4718      	bx	r3
 8013cce:	46c0      	nop			; (mov r8, r8)
 8013cd0:	7fffffff 	.word	0x7fffffff
 8013cd4:	20000120 	.word	0x20000120
 8013cd8:	ffff0208 	.word	0xffff0208

08013cdc <strcat>:
 8013cdc:	0002      	movs	r2, r0
 8013cde:	b510      	push	{r4, lr}
 8013ce0:	7813      	ldrb	r3, [r2, #0]
 8013ce2:	0014      	movs	r4, r2
 8013ce4:	3201      	adds	r2, #1
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d1fa      	bne.n	8013ce0 <strcat+0x4>
 8013cea:	5cca      	ldrb	r2, [r1, r3]
 8013cec:	54e2      	strb	r2, [r4, r3]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	2a00      	cmp	r2, #0
 8013cf2:	d1fa      	bne.n	8013cea <strcat+0xe>
 8013cf4:	bd10      	pop	{r4, pc}

08013cf6 <strchr>:
 8013cf6:	b2c9      	uxtb	r1, r1
 8013cf8:	7803      	ldrb	r3, [r0, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d004      	beq.n	8013d08 <strchr+0x12>
 8013cfe:	428b      	cmp	r3, r1
 8013d00:	d100      	bne.n	8013d04 <strchr+0xe>
 8013d02:	4770      	bx	lr
 8013d04:	3001      	adds	r0, #1
 8013d06:	e7f7      	b.n	8013cf8 <strchr+0x2>
 8013d08:	424b      	negs	r3, r1
 8013d0a:	4159      	adcs	r1, r3
 8013d0c:	4249      	negs	r1, r1
 8013d0e:	4008      	ands	r0, r1
 8013d10:	e7f7      	b.n	8013d02 <strchr+0xc>

08013d12 <strcpy>:
 8013d12:	0003      	movs	r3, r0
 8013d14:	780a      	ldrb	r2, [r1, #0]
 8013d16:	3101      	adds	r1, #1
 8013d18:	701a      	strb	r2, [r3, #0]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	2a00      	cmp	r2, #0
 8013d1e:	d1f9      	bne.n	8013d14 <strcpy+0x2>
 8013d20:	4770      	bx	lr

08013d22 <strncmp>:
 8013d22:	b530      	push	{r4, r5, lr}
 8013d24:	0005      	movs	r5, r0
 8013d26:	1e10      	subs	r0, r2, #0
 8013d28:	d00b      	beq.n	8013d42 <strncmp+0x20>
 8013d2a:	2400      	movs	r4, #0
 8013d2c:	3a01      	subs	r2, #1
 8013d2e:	5d2b      	ldrb	r3, [r5, r4]
 8013d30:	5d08      	ldrb	r0, [r1, r4]
 8013d32:	4283      	cmp	r3, r0
 8013d34:	d104      	bne.n	8013d40 <strncmp+0x1e>
 8013d36:	4294      	cmp	r4, r2
 8013d38:	d002      	beq.n	8013d40 <strncmp+0x1e>
 8013d3a:	3401      	adds	r4, #1
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d1f6      	bne.n	8013d2e <strncmp+0xc>
 8013d40:	1a18      	subs	r0, r3, r0
 8013d42:	bd30      	pop	{r4, r5, pc}

08013d44 <strncpy>:
 8013d44:	0003      	movs	r3, r0
 8013d46:	b530      	push	{r4, r5, lr}
 8013d48:	001d      	movs	r5, r3
 8013d4a:	2a00      	cmp	r2, #0
 8013d4c:	d006      	beq.n	8013d5c <strncpy+0x18>
 8013d4e:	780c      	ldrb	r4, [r1, #0]
 8013d50:	3a01      	subs	r2, #1
 8013d52:	3301      	adds	r3, #1
 8013d54:	702c      	strb	r4, [r5, #0]
 8013d56:	3101      	adds	r1, #1
 8013d58:	2c00      	cmp	r4, #0
 8013d5a:	d1f5      	bne.n	8013d48 <strncpy+0x4>
 8013d5c:	2100      	movs	r1, #0
 8013d5e:	189a      	adds	r2, r3, r2
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d100      	bne.n	8013d66 <strncpy+0x22>
 8013d64:	bd30      	pop	{r4, r5, pc}
 8013d66:	7019      	strb	r1, [r3, #0]
 8013d68:	3301      	adds	r3, #1
 8013d6a:	e7f9      	b.n	8013d60 <strncpy+0x1c>

08013d6c <sulp>:
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	0016      	movs	r6, r2
 8013d70:	000d      	movs	r5, r1
 8013d72:	f002 fd4b 	bl	801680c <__ulp>
 8013d76:	2e00      	cmp	r6, #0
 8013d78:	d00d      	beq.n	8013d96 <sulp+0x2a>
 8013d7a:	236b      	movs	r3, #107	; 0x6b
 8013d7c:	006a      	lsls	r2, r5, #1
 8013d7e:	0d52      	lsrs	r2, r2, #21
 8013d80:	1a9b      	subs	r3, r3, r2
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	dd07      	ble.n	8013d96 <sulp+0x2a>
 8013d86:	2400      	movs	r4, #0
 8013d88:	4a03      	ldr	r2, [pc, #12]	; (8013d98 <sulp+0x2c>)
 8013d8a:	051b      	lsls	r3, r3, #20
 8013d8c:	189d      	adds	r5, r3, r2
 8013d8e:	002b      	movs	r3, r5
 8013d90:	0022      	movs	r2, r4
 8013d92:	f7ed fff1 	bl	8001d78 <__aeabi_dmul>
 8013d96:	bd70      	pop	{r4, r5, r6, pc}
 8013d98:	3ff00000 	.word	0x3ff00000

08013d9c <_strtod_l>:
 8013d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d9e:	001d      	movs	r5, r3
 8013da0:	2300      	movs	r3, #0
 8013da2:	b0a7      	sub	sp, #156	; 0x9c
 8013da4:	9322      	str	r3, [sp, #136]	; 0x88
 8013da6:	4bae      	ldr	r3, [pc, #696]	; (8014060 <_strtod_l+0x2c4>)
 8013da8:	9005      	str	r0, [sp, #20]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	9108      	str	r1, [sp, #32]
 8013dae:	0018      	movs	r0, r3
 8013db0:	9307      	str	r3, [sp, #28]
 8013db2:	921d      	str	r2, [sp, #116]	; 0x74
 8013db4:	f7ec f9b0 	bl	8000118 <strlen>
 8013db8:	2600      	movs	r6, #0
 8013dba:	0004      	movs	r4, r0
 8013dbc:	2700      	movs	r7, #0
 8013dbe:	9b08      	ldr	r3, [sp, #32]
 8013dc0:	9321      	str	r3, [sp, #132]	; 0x84
 8013dc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013dc4:	7813      	ldrb	r3, [r2, #0]
 8013dc6:	2b2b      	cmp	r3, #43	; 0x2b
 8013dc8:	d058      	beq.n	8013e7c <_strtod_l+0xe0>
 8013dca:	d844      	bhi.n	8013e56 <_strtod_l+0xba>
 8013dcc:	2b0d      	cmp	r3, #13
 8013dce:	d83d      	bhi.n	8013e4c <_strtod_l+0xb0>
 8013dd0:	2b08      	cmp	r3, #8
 8013dd2:	d83d      	bhi.n	8013e50 <_strtod_l+0xb4>
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d047      	beq.n	8013e68 <_strtod_l+0xcc>
 8013dd8:	2300      	movs	r3, #0
 8013dda:	9310      	str	r3, [sp, #64]	; 0x40
 8013ddc:	2200      	movs	r2, #0
 8013dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013de0:	920a      	str	r2, [sp, #40]	; 0x28
 8013de2:	9306      	str	r3, [sp, #24]
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	2b30      	cmp	r3, #48	; 0x30
 8013de8:	d000      	beq.n	8013dec <_strtod_l+0x50>
 8013dea:	e083      	b.n	8013ef4 <_strtod_l+0x158>
 8013dec:	9b06      	ldr	r3, [sp, #24]
 8013dee:	3220      	adds	r2, #32
 8013df0:	785b      	ldrb	r3, [r3, #1]
 8013df2:	4393      	bics	r3, r2
 8013df4:	2b58      	cmp	r3, #88	; 0x58
 8013df6:	d000      	beq.n	8013dfa <_strtod_l+0x5e>
 8013df8:	e072      	b.n	8013ee0 <_strtod_l+0x144>
 8013dfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013dfc:	9502      	str	r5, [sp, #8]
 8013dfe:	9301      	str	r3, [sp, #4]
 8013e00:	ab22      	add	r3, sp, #136	; 0x88
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	4a97      	ldr	r2, [pc, #604]	; (8014064 <_strtod_l+0x2c8>)
 8013e06:	ab23      	add	r3, sp, #140	; 0x8c
 8013e08:	9805      	ldr	r0, [sp, #20]
 8013e0a:	a921      	add	r1, sp, #132	; 0x84
 8013e0c:	f001 fe3e 	bl	8015a8c <__gethex>
 8013e10:	2307      	movs	r3, #7
 8013e12:	0005      	movs	r5, r0
 8013e14:	0004      	movs	r4, r0
 8013e16:	401d      	ands	r5, r3
 8013e18:	4218      	tst	r0, r3
 8013e1a:	d006      	beq.n	8013e2a <_strtod_l+0x8e>
 8013e1c:	2d06      	cmp	r5, #6
 8013e1e:	d12f      	bne.n	8013e80 <_strtod_l+0xe4>
 8013e20:	9b06      	ldr	r3, [sp, #24]
 8013e22:	3301      	adds	r3, #1
 8013e24:	9321      	str	r3, [sp, #132]	; 0x84
 8013e26:	2300      	movs	r3, #0
 8013e28:	9310      	str	r3, [sp, #64]	; 0x40
 8013e2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d002      	beq.n	8013e36 <_strtod_l+0x9a>
 8013e30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013e32:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e34:	601a      	str	r2, [r3, #0]
 8013e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d01c      	beq.n	8013e76 <_strtod_l+0xda>
 8013e3c:	2380      	movs	r3, #128	; 0x80
 8013e3e:	0032      	movs	r2, r6
 8013e40:	061b      	lsls	r3, r3, #24
 8013e42:	18fb      	adds	r3, r7, r3
 8013e44:	0010      	movs	r0, r2
 8013e46:	0019      	movs	r1, r3
 8013e48:	b027      	add	sp, #156	; 0x9c
 8013e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e4c:	2b20      	cmp	r3, #32
 8013e4e:	d1c3      	bne.n	8013dd8 <_strtod_l+0x3c>
 8013e50:	3201      	adds	r2, #1
 8013e52:	9221      	str	r2, [sp, #132]	; 0x84
 8013e54:	e7b5      	b.n	8013dc2 <_strtod_l+0x26>
 8013e56:	2b2d      	cmp	r3, #45	; 0x2d
 8013e58:	d1be      	bne.n	8013dd8 <_strtod_l+0x3c>
 8013e5a:	3b2c      	subs	r3, #44	; 0x2c
 8013e5c:	9310      	str	r3, [sp, #64]	; 0x40
 8013e5e:	1c53      	adds	r3, r2, #1
 8013e60:	9321      	str	r3, [sp, #132]	; 0x84
 8013e62:	7853      	ldrb	r3, [r2, #1]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d1b9      	bne.n	8013ddc <_strtod_l+0x40>
 8013e68:	9b08      	ldr	r3, [sp, #32]
 8013e6a:	9321      	str	r3, [sp, #132]	; 0x84
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	9310      	str	r3, [sp, #64]	; 0x40
 8013e70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d1dc      	bne.n	8013e30 <_strtod_l+0x94>
 8013e76:	0032      	movs	r2, r6
 8013e78:	003b      	movs	r3, r7
 8013e7a:	e7e3      	b.n	8013e44 <_strtod_l+0xa8>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	e7ed      	b.n	8013e5c <_strtod_l+0xc0>
 8013e80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013e82:	2a00      	cmp	r2, #0
 8013e84:	d007      	beq.n	8013e96 <_strtod_l+0xfa>
 8013e86:	2135      	movs	r1, #53	; 0x35
 8013e88:	a824      	add	r0, sp, #144	; 0x90
 8013e8a:	f002 fdbe 	bl	8016a0a <__copybits>
 8013e8e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8013e90:	9805      	ldr	r0, [sp, #20]
 8013e92:	f002 f979 	bl	8016188 <_Bfree>
 8013e96:	1e68      	subs	r0, r5, #1
 8013e98:	2805      	cmp	r0, #5
 8013e9a:	d806      	bhi.n	8013eaa <_strtod_l+0x10e>
 8013e9c:	f7ec f944 	bl	8000128 <__gnu_thumb1_case_uqi>
 8013ea0:	1c190b0e 	.word	0x1c190b0e
 8013ea4:	030e      	.short	0x030e
 8013ea6:	2700      	movs	r7, #0
 8013ea8:	003e      	movs	r6, r7
 8013eaa:	0723      	lsls	r3, r4, #28
 8013eac:	d5bd      	bpl.n	8013e2a <_strtod_l+0x8e>
 8013eae:	2380      	movs	r3, #128	; 0x80
 8013eb0:	061b      	lsls	r3, r3, #24
 8013eb2:	431f      	orrs	r7, r3
 8013eb4:	e7b9      	b.n	8013e2a <_strtod_l+0x8e>
 8013eb6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013eb8:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8013eba:	e7f6      	b.n	8013eaa <_strtod_l+0x10e>
 8013ebc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8013ebe:	4a6a      	ldr	r2, [pc, #424]	; (8014068 <_strtod_l+0x2cc>)
 8013ec0:	496a      	ldr	r1, [pc, #424]	; (801406c <_strtod_l+0x2d0>)
 8013ec2:	401a      	ands	r2, r3
 8013ec4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013ec6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8013ec8:	185b      	adds	r3, r3, r1
 8013eca:	051b      	lsls	r3, r3, #20
 8013ecc:	431a      	orrs	r2, r3
 8013ece:	0017      	movs	r7, r2
 8013ed0:	e7eb      	b.n	8013eaa <_strtod_l+0x10e>
 8013ed2:	2600      	movs	r6, #0
 8013ed4:	4f66      	ldr	r7, [pc, #408]	; (8014070 <_strtod_l+0x2d4>)
 8013ed6:	e7e8      	b.n	8013eaa <_strtod_l+0x10e>
 8013ed8:	2601      	movs	r6, #1
 8013eda:	4f66      	ldr	r7, [pc, #408]	; (8014074 <_strtod_l+0x2d8>)
 8013edc:	4276      	negs	r6, r6
 8013ede:	e7e4      	b.n	8013eaa <_strtod_l+0x10e>
 8013ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ee2:	1c5a      	adds	r2, r3, #1
 8013ee4:	9221      	str	r2, [sp, #132]	; 0x84
 8013ee6:	785b      	ldrb	r3, [r3, #1]
 8013ee8:	2b30      	cmp	r3, #48	; 0x30
 8013eea:	d0f9      	beq.n	8013ee0 <_strtod_l+0x144>
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d09c      	beq.n	8013e2a <_strtod_l+0x8e>
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ef6:	220a      	movs	r2, #10
 8013ef8:	9311      	str	r3, [sp, #68]	; 0x44
 8013efa:	2300      	movs	r3, #0
 8013efc:	930e      	str	r3, [sp, #56]	; 0x38
 8013efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f00:	9309      	str	r3, [sp, #36]	; 0x24
 8013f02:	9821      	ldr	r0, [sp, #132]	; 0x84
 8013f04:	7805      	ldrb	r5, [r0, #0]
 8013f06:	002b      	movs	r3, r5
 8013f08:	3b30      	subs	r3, #48	; 0x30
 8013f0a:	b2d9      	uxtb	r1, r3
 8013f0c:	2909      	cmp	r1, #9
 8013f0e:	d927      	bls.n	8013f60 <_strtod_l+0x1c4>
 8013f10:	0022      	movs	r2, r4
 8013f12:	9907      	ldr	r1, [sp, #28]
 8013f14:	f7ff ff05 	bl	8013d22 <strncmp>
 8013f18:	2800      	cmp	r0, #0
 8013f1a:	d033      	beq.n	8013f84 <_strtod_l+0x1e8>
 8013f1c:	2000      	movs	r0, #0
 8013f1e:	002b      	movs	r3, r5
 8013f20:	4684      	mov	ip, r0
 8013f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f24:	900c      	str	r0, [sp, #48]	; 0x30
 8013f26:	9206      	str	r2, [sp, #24]
 8013f28:	2220      	movs	r2, #32
 8013f2a:	0019      	movs	r1, r3
 8013f2c:	4391      	bics	r1, r2
 8013f2e:	000a      	movs	r2, r1
 8013f30:	2100      	movs	r1, #0
 8013f32:	9107      	str	r1, [sp, #28]
 8013f34:	2a45      	cmp	r2, #69	; 0x45
 8013f36:	d000      	beq.n	8013f3a <_strtod_l+0x19e>
 8013f38:	e0c5      	b.n	80140c6 <_strtod_l+0x32a>
 8013f3a:	9b06      	ldr	r3, [sp, #24]
 8013f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f3e:	4303      	orrs	r3, r0
 8013f40:	4313      	orrs	r3, r2
 8013f42:	428b      	cmp	r3, r1
 8013f44:	d090      	beq.n	8013e68 <_strtod_l+0xcc>
 8013f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f48:	9308      	str	r3, [sp, #32]
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	9321      	str	r3, [sp, #132]	; 0x84
 8013f4e:	9b08      	ldr	r3, [sp, #32]
 8013f50:	785b      	ldrb	r3, [r3, #1]
 8013f52:	2b2b      	cmp	r3, #43	; 0x2b
 8013f54:	d075      	beq.n	8014042 <_strtod_l+0x2a6>
 8013f56:	000c      	movs	r4, r1
 8013f58:	2b2d      	cmp	r3, #45	; 0x2d
 8013f5a:	d178      	bne.n	801404e <_strtod_l+0x2b2>
 8013f5c:	2401      	movs	r4, #1
 8013f5e:	e071      	b.n	8014044 <_strtod_l+0x2a8>
 8013f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f62:	2908      	cmp	r1, #8
 8013f64:	dc09      	bgt.n	8013f7a <_strtod_l+0x1de>
 8013f66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013f68:	4351      	muls	r1, r2
 8013f6a:	185b      	adds	r3, r3, r1
 8013f6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f70:	3001      	adds	r0, #1
 8013f72:	3301      	adds	r3, #1
 8013f74:	9309      	str	r3, [sp, #36]	; 0x24
 8013f76:	9021      	str	r0, [sp, #132]	; 0x84
 8013f78:	e7c3      	b.n	8013f02 <_strtod_l+0x166>
 8013f7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013f7c:	4351      	muls	r1, r2
 8013f7e:	185b      	adds	r3, r3, r1
 8013f80:	930e      	str	r3, [sp, #56]	; 0x38
 8013f82:	e7f4      	b.n	8013f6e <_strtod_l+0x1d2>
 8013f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f88:	191c      	adds	r4, r3, r4
 8013f8a:	9421      	str	r4, [sp, #132]	; 0x84
 8013f8c:	7823      	ldrb	r3, [r4, #0]
 8013f8e:	2a00      	cmp	r2, #0
 8013f90:	d039      	beq.n	8014006 <_strtod_l+0x26a>
 8013f92:	900c      	str	r0, [sp, #48]	; 0x30
 8013f94:	9206      	str	r2, [sp, #24]
 8013f96:	001a      	movs	r2, r3
 8013f98:	3a30      	subs	r2, #48	; 0x30
 8013f9a:	2a09      	cmp	r2, #9
 8013f9c:	d912      	bls.n	8013fc4 <_strtod_l+0x228>
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	4694      	mov	ip, r2
 8013fa2:	e7c1      	b.n	8013f28 <_strtod_l+0x18c>
 8013fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013fa6:	3001      	adds	r0, #1
 8013fa8:	1c5a      	adds	r2, r3, #1
 8013faa:	9221      	str	r2, [sp, #132]	; 0x84
 8013fac:	785b      	ldrb	r3, [r3, #1]
 8013fae:	2b30      	cmp	r3, #48	; 0x30
 8013fb0:	d0f8      	beq.n	8013fa4 <_strtod_l+0x208>
 8013fb2:	001a      	movs	r2, r3
 8013fb4:	3a31      	subs	r2, #49	; 0x31
 8013fb6:	2a08      	cmp	r2, #8
 8013fb8:	d83e      	bhi.n	8014038 <_strtod_l+0x29c>
 8013fba:	900c      	str	r0, [sp, #48]	; 0x30
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013fc0:	9006      	str	r0, [sp, #24]
 8013fc2:	9211      	str	r2, [sp, #68]	; 0x44
 8013fc4:	001a      	movs	r2, r3
 8013fc6:	9906      	ldr	r1, [sp, #24]
 8013fc8:	1c44      	adds	r4, r0, #1
 8013fca:	3a30      	subs	r2, #48	; 0x30
 8013fcc:	2b30      	cmp	r3, #48	; 0x30
 8013fce:	d013      	beq.n	8013ff8 <_strtod_l+0x25c>
 8013fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013fd2:	191b      	adds	r3, r3, r4
 8013fd4:	930c      	str	r3, [sp, #48]	; 0x30
 8013fd6:	1844      	adds	r4, r0, r1
 8013fd8:	000b      	movs	r3, r1
 8013fda:	210a      	movs	r1, #10
 8013fdc:	429c      	cmp	r4, r3
 8013fde:	d114      	bne.n	801400a <_strtod_l+0x26e>
 8013fe0:	9b06      	ldr	r3, [sp, #24]
 8013fe2:	1c59      	adds	r1, r3, #1
 8013fe4:	1809      	adds	r1, r1, r0
 8013fe6:	1818      	adds	r0, r3, r0
 8013fe8:	2808      	cmp	r0, #8
 8013fea:	dc1c      	bgt.n	8014026 <_strtod_l+0x28a>
 8013fec:	230a      	movs	r3, #10
 8013fee:	2400      	movs	r4, #0
 8013ff0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013ff2:	4343      	muls	r3, r0
 8013ff4:	18d3      	adds	r3, r2, r3
 8013ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ffa:	0020      	movs	r0, r4
 8013ffc:	1c5a      	adds	r2, r3, #1
 8013ffe:	9221      	str	r2, [sp, #132]	; 0x84
 8014000:	785b      	ldrb	r3, [r3, #1]
 8014002:	9106      	str	r1, [sp, #24]
 8014004:	e7c7      	b.n	8013f96 <_strtod_l+0x1fa>
 8014006:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014008:	e7d1      	b.n	8013fae <_strtod_l+0x212>
 801400a:	2b08      	cmp	r3, #8
 801400c:	dc04      	bgt.n	8014018 <_strtod_l+0x27c>
 801400e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014010:	434d      	muls	r5, r1
 8014012:	950b      	str	r5, [sp, #44]	; 0x2c
 8014014:	3301      	adds	r3, #1
 8014016:	e7e1      	b.n	8013fdc <_strtod_l+0x240>
 8014018:	1c5d      	adds	r5, r3, #1
 801401a:	2d10      	cmp	r5, #16
 801401c:	dcfa      	bgt.n	8014014 <_strtod_l+0x278>
 801401e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014020:	434d      	muls	r5, r1
 8014022:	950e      	str	r5, [sp, #56]	; 0x38
 8014024:	e7f6      	b.n	8014014 <_strtod_l+0x278>
 8014026:	2400      	movs	r4, #0
 8014028:	2910      	cmp	r1, #16
 801402a:	dce5      	bgt.n	8013ff8 <_strtod_l+0x25c>
 801402c:	230a      	movs	r3, #10
 801402e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014030:	4343      	muls	r3, r0
 8014032:	18d3      	adds	r3, r2, r3
 8014034:	930e      	str	r3, [sp, #56]	; 0x38
 8014036:	e7df      	b.n	8013ff8 <_strtod_l+0x25c>
 8014038:	2200      	movs	r2, #0
 801403a:	920c      	str	r2, [sp, #48]	; 0x30
 801403c:	9206      	str	r2, [sp, #24]
 801403e:	3201      	adds	r2, #1
 8014040:	e7ae      	b.n	8013fa0 <_strtod_l+0x204>
 8014042:	2400      	movs	r4, #0
 8014044:	9b08      	ldr	r3, [sp, #32]
 8014046:	3302      	adds	r3, #2
 8014048:	9321      	str	r3, [sp, #132]	; 0x84
 801404a:	9b08      	ldr	r3, [sp, #32]
 801404c:	789b      	ldrb	r3, [r3, #2]
 801404e:	001a      	movs	r2, r3
 8014050:	3a30      	subs	r2, #48	; 0x30
 8014052:	2a09      	cmp	r2, #9
 8014054:	d914      	bls.n	8014080 <_strtod_l+0x2e4>
 8014056:	9a08      	ldr	r2, [sp, #32]
 8014058:	9221      	str	r2, [sp, #132]	; 0x84
 801405a:	2200      	movs	r2, #0
 801405c:	e032      	b.n	80140c4 <_strtod_l+0x328>
 801405e:	46c0      	nop			; (mov r8, r8)
 8014060:	0801adec 	.word	0x0801adec
 8014064:	0801ac14 	.word	0x0801ac14
 8014068:	ffefffff 	.word	0xffefffff
 801406c:	00000433 	.word	0x00000433
 8014070:	7ff00000 	.word	0x7ff00000
 8014074:	7fffffff 	.word	0x7fffffff
 8014078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801407a:	1c5a      	adds	r2, r3, #1
 801407c:	9221      	str	r2, [sp, #132]	; 0x84
 801407e:	785b      	ldrb	r3, [r3, #1]
 8014080:	2b30      	cmp	r3, #48	; 0x30
 8014082:	d0f9      	beq.n	8014078 <_strtod_l+0x2dc>
 8014084:	2200      	movs	r2, #0
 8014086:	9207      	str	r2, [sp, #28]
 8014088:	001a      	movs	r2, r3
 801408a:	3a31      	subs	r2, #49	; 0x31
 801408c:	2a08      	cmp	r2, #8
 801408e:	d81a      	bhi.n	80140c6 <_strtod_l+0x32a>
 8014090:	3b30      	subs	r3, #48	; 0x30
 8014092:	001a      	movs	r2, r3
 8014094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014096:	9307      	str	r3, [sp, #28]
 8014098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801409a:	1c59      	adds	r1, r3, #1
 801409c:	9121      	str	r1, [sp, #132]	; 0x84
 801409e:	785b      	ldrb	r3, [r3, #1]
 80140a0:	001d      	movs	r5, r3
 80140a2:	3d30      	subs	r5, #48	; 0x30
 80140a4:	2d09      	cmp	r5, #9
 80140a6:	d939      	bls.n	801411c <_strtod_l+0x380>
 80140a8:	9d07      	ldr	r5, [sp, #28]
 80140aa:	1b49      	subs	r1, r1, r5
 80140ac:	4daf      	ldr	r5, [pc, #700]	; (801436c <_strtod_l+0x5d0>)
 80140ae:	9507      	str	r5, [sp, #28]
 80140b0:	2908      	cmp	r1, #8
 80140b2:	dc03      	bgt.n	80140bc <_strtod_l+0x320>
 80140b4:	9207      	str	r2, [sp, #28]
 80140b6:	42aa      	cmp	r2, r5
 80140b8:	dd00      	ble.n	80140bc <_strtod_l+0x320>
 80140ba:	9507      	str	r5, [sp, #28]
 80140bc:	2c00      	cmp	r4, #0
 80140be:	d002      	beq.n	80140c6 <_strtod_l+0x32a>
 80140c0:	9a07      	ldr	r2, [sp, #28]
 80140c2:	4252      	negs	r2, r2
 80140c4:	9207      	str	r2, [sp, #28]
 80140c6:	9a06      	ldr	r2, [sp, #24]
 80140c8:	2a00      	cmp	r2, #0
 80140ca:	d14b      	bne.n	8014164 <_strtod_l+0x3c8>
 80140cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80140ce:	4310      	orrs	r0, r2
 80140d0:	d000      	beq.n	80140d4 <_strtod_l+0x338>
 80140d2:	e6aa      	b.n	8013e2a <_strtod_l+0x8e>
 80140d4:	4662      	mov	r2, ip
 80140d6:	2a00      	cmp	r2, #0
 80140d8:	d000      	beq.n	80140dc <_strtod_l+0x340>
 80140da:	e6c5      	b.n	8013e68 <_strtod_l+0xcc>
 80140dc:	2b69      	cmp	r3, #105	; 0x69
 80140de:	d025      	beq.n	801412c <_strtod_l+0x390>
 80140e0:	dc21      	bgt.n	8014126 <_strtod_l+0x38a>
 80140e2:	2b49      	cmp	r3, #73	; 0x49
 80140e4:	d022      	beq.n	801412c <_strtod_l+0x390>
 80140e6:	2b4e      	cmp	r3, #78	; 0x4e
 80140e8:	d000      	beq.n	80140ec <_strtod_l+0x350>
 80140ea:	e6bd      	b.n	8013e68 <_strtod_l+0xcc>
 80140ec:	49a0      	ldr	r1, [pc, #640]	; (8014370 <_strtod_l+0x5d4>)
 80140ee:	a821      	add	r0, sp, #132	; 0x84
 80140f0:	f001 ff1a 	bl	8015f28 <__match>
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d100      	bne.n	80140fa <_strtod_l+0x35e>
 80140f8:	e6b6      	b.n	8013e68 <_strtod_l+0xcc>
 80140fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	2b28      	cmp	r3, #40	; 0x28
 8014100:	d12a      	bne.n	8014158 <_strtod_l+0x3bc>
 8014102:	499c      	ldr	r1, [pc, #624]	; (8014374 <_strtod_l+0x5d8>)
 8014104:	aa24      	add	r2, sp, #144	; 0x90
 8014106:	a821      	add	r0, sp, #132	; 0x84
 8014108:	f001 ff22 	bl	8015f50 <__hexnan>
 801410c:	2805      	cmp	r0, #5
 801410e:	d123      	bne.n	8014158 <_strtod_l+0x3bc>
 8014110:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014112:	4a99      	ldr	r2, [pc, #612]	; (8014378 <_strtod_l+0x5dc>)
 8014114:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014116:	431a      	orrs	r2, r3
 8014118:	0017      	movs	r7, r2
 801411a:	e686      	b.n	8013e2a <_strtod_l+0x8e>
 801411c:	210a      	movs	r1, #10
 801411e:	434a      	muls	r2, r1
 8014120:	18d2      	adds	r2, r2, r3
 8014122:	3a30      	subs	r2, #48	; 0x30
 8014124:	e7b8      	b.n	8014098 <_strtod_l+0x2fc>
 8014126:	2b6e      	cmp	r3, #110	; 0x6e
 8014128:	d0e0      	beq.n	80140ec <_strtod_l+0x350>
 801412a:	e69d      	b.n	8013e68 <_strtod_l+0xcc>
 801412c:	4993      	ldr	r1, [pc, #588]	; (801437c <_strtod_l+0x5e0>)
 801412e:	a821      	add	r0, sp, #132	; 0x84
 8014130:	f001 fefa 	bl	8015f28 <__match>
 8014134:	2800      	cmp	r0, #0
 8014136:	d100      	bne.n	801413a <_strtod_l+0x39e>
 8014138:	e696      	b.n	8013e68 <_strtod_l+0xcc>
 801413a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801413c:	4990      	ldr	r1, [pc, #576]	; (8014380 <_strtod_l+0x5e4>)
 801413e:	3b01      	subs	r3, #1
 8014140:	a821      	add	r0, sp, #132	; 0x84
 8014142:	9321      	str	r3, [sp, #132]	; 0x84
 8014144:	f001 fef0 	bl	8015f28 <__match>
 8014148:	2800      	cmp	r0, #0
 801414a:	d102      	bne.n	8014152 <_strtod_l+0x3b6>
 801414c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801414e:	3301      	adds	r3, #1
 8014150:	9321      	str	r3, [sp, #132]	; 0x84
 8014152:	2600      	movs	r6, #0
 8014154:	4f88      	ldr	r7, [pc, #544]	; (8014378 <_strtod_l+0x5dc>)
 8014156:	e668      	b.n	8013e2a <_strtod_l+0x8e>
 8014158:	488a      	ldr	r0, [pc, #552]	; (8014384 <_strtod_l+0x5e8>)
 801415a:	f002 ff93 	bl	8017084 <nan>
 801415e:	0006      	movs	r6, r0
 8014160:	000f      	movs	r7, r1
 8014162:	e662      	b.n	8013e2a <_strtod_l+0x8e>
 8014164:	9b07      	ldr	r3, [sp, #28]
 8014166:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014168:	1a9b      	subs	r3, r3, r2
 801416a:	930a      	str	r3, [sp, #40]	; 0x28
 801416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801416e:	2b00      	cmp	r3, #0
 8014170:	d101      	bne.n	8014176 <_strtod_l+0x3da>
 8014172:	9b06      	ldr	r3, [sp, #24]
 8014174:	9309      	str	r3, [sp, #36]	; 0x24
 8014176:	9c06      	ldr	r4, [sp, #24]
 8014178:	2c10      	cmp	r4, #16
 801417a:	dd00      	ble.n	801417e <_strtod_l+0x3e2>
 801417c:	2410      	movs	r4, #16
 801417e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014180:	f7ee fc7c 	bl	8002a7c <__aeabi_ui2d>
 8014184:	9b06      	ldr	r3, [sp, #24]
 8014186:	0006      	movs	r6, r0
 8014188:	000f      	movs	r7, r1
 801418a:	2b09      	cmp	r3, #9
 801418c:	dd15      	ble.n	80141ba <_strtod_l+0x41e>
 801418e:	0022      	movs	r2, r4
 8014190:	4b7d      	ldr	r3, [pc, #500]	; (8014388 <_strtod_l+0x5ec>)
 8014192:	3a09      	subs	r2, #9
 8014194:	00d2      	lsls	r2, r2, #3
 8014196:	189b      	adds	r3, r3, r2
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	f7ed fdec 	bl	8001d78 <__aeabi_dmul>
 80141a0:	0006      	movs	r6, r0
 80141a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80141a4:	000f      	movs	r7, r1
 80141a6:	f7ee fc69 	bl	8002a7c <__aeabi_ui2d>
 80141aa:	0002      	movs	r2, r0
 80141ac:	000b      	movs	r3, r1
 80141ae:	0030      	movs	r0, r6
 80141b0:	0039      	movs	r1, r7
 80141b2:	f7ec fe71 	bl	8000e98 <__aeabi_dadd>
 80141b6:	0006      	movs	r6, r0
 80141b8:	000f      	movs	r7, r1
 80141ba:	9b06      	ldr	r3, [sp, #24]
 80141bc:	2b0f      	cmp	r3, #15
 80141be:	dc39      	bgt.n	8014234 <_strtod_l+0x498>
 80141c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d100      	bne.n	80141c8 <_strtod_l+0x42c>
 80141c6:	e630      	b.n	8013e2a <_strtod_l+0x8e>
 80141c8:	dd24      	ble.n	8014214 <_strtod_l+0x478>
 80141ca:	2b16      	cmp	r3, #22
 80141cc:	dc09      	bgt.n	80141e2 <_strtod_l+0x446>
 80141ce:	00dd      	lsls	r5, r3, #3
 80141d0:	0032      	movs	r2, r6
 80141d2:	003b      	movs	r3, r7
 80141d4:	4c6c      	ldr	r4, [pc, #432]	; (8014388 <_strtod_l+0x5ec>)
 80141d6:	1964      	adds	r4, r4, r5
 80141d8:	6820      	ldr	r0, [r4, #0]
 80141da:	6861      	ldr	r1, [r4, #4]
 80141dc:	f7ed fdcc 	bl	8001d78 <__aeabi_dmul>
 80141e0:	e7bd      	b.n	801415e <_strtod_l+0x3c2>
 80141e2:	2325      	movs	r3, #37	; 0x25
 80141e4:	9a06      	ldr	r2, [sp, #24]
 80141e6:	1a9b      	subs	r3, r3, r2
 80141e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141ea:	4293      	cmp	r3, r2
 80141ec:	db22      	blt.n	8014234 <_strtod_l+0x498>
 80141ee:	240f      	movs	r4, #15
 80141f0:	9b06      	ldr	r3, [sp, #24]
 80141f2:	4d65      	ldr	r5, [pc, #404]	; (8014388 <_strtod_l+0x5ec>)
 80141f4:	1ae4      	subs	r4, r4, r3
 80141f6:	00e1      	lsls	r1, r4, #3
 80141f8:	1869      	adds	r1, r5, r1
 80141fa:	0032      	movs	r2, r6
 80141fc:	6808      	ldr	r0, [r1, #0]
 80141fe:	6849      	ldr	r1, [r1, #4]
 8014200:	003b      	movs	r3, r7
 8014202:	f7ed fdb9 	bl	8001d78 <__aeabi_dmul>
 8014206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014208:	1b1c      	subs	r4, r3, r4
 801420a:	00e4      	lsls	r4, r4, #3
 801420c:	192c      	adds	r4, r5, r4
 801420e:	6822      	ldr	r2, [r4, #0]
 8014210:	6863      	ldr	r3, [r4, #4]
 8014212:	e7e3      	b.n	80141dc <_strtod_l+0x440>
 8014214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014216:	3316      	adds	r3, #22
 8014218:	db0c      	blt.n	8014234 <_strtod_l+0x498>
 801421a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801421c:	9a07      	ldr	r2, [sp, #28]
 801421e:	0030      	movs	r0, r6
 8014220:	1a9a      	subs	r2, r3, r2
 8014222:	4b59      	ldr	r3, [pc, #356]	; (8014388 <_strtod_l+0x5ec>)
 8014224:	00d2      	lsls	r2, r2, #3
 8014226:	189b      	adds	r3, r3, r2
 8014228:	0039      	movs	r1, r7
 801422a:	681a      	ldr	r2, [r3, #0]
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	f7ed f99d 	bl	800156c <__aeabi_ddiv>
 8014232:	e794      	b.n	801415e <_strtod_l+0x3c2>
 8014234:	9b06      	ldr	r3, [sp, #24]
 8014236:	1b1c      	subs	r4, r3, r4
 8014238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801423a:	18e4      	adds	r4, r4, r3
 801423c:	2c00      	cmp	r4, #0
 801423e:	dd70      	ble.n	8014322 <_strtod_l+0x586>
 8014240:	230f      	movs	r3, #15
 8014242:	0021      	movs	r1, r4
 8014244:	4019      	ands	r1, r3
 8014246:	421c      	tst	r4, r3
 8014248:	d00a      	beq.n	8014260 <_strtod_l+0x4c4>
 801424a:	00cb      	lsls	r3, r1, #3
 801424c:	494e      	ldr	r1, [pc, #312]	; (8014388 <_strtod_l+0x5ec>)
 801424e:	0032      	movs	r2, r6
 8014250:	18c9      	adds	r1, r1, r3
 8014252:	6808      	ldr	r0, [r1, #0]
 8014254:	6849      	ldr	r1, [r1, #4]
 8014256:	003b      	movs	r3, r7
 8014258:	f7ed fd8e 	bl	8001d78 <__aeabi_dmul>
 801425c:	0006      	movs	r6, r0
 801425e:	000f      	movs	r7, r1
 8014260:	230f      	movs	r3, #15
 8014262:	439c      	bics	r4, r3
 8014264:	d048      	beq.n	80142f8 <_strtod_l+0x55c>
 8014266:	3326      	adds	r3, #38	; 0x26
 8014268:	33ff      	adds	r3, #255	; 0xff
 801426a:	429c      	cmp	r4, r3
 801426c:	dd22      	ble.n	80142b4 <_strtod_l+0x518>
 801426e:	2300      	movs	r3, #0
 8014270:	9306      	str	r3, [sp, #24]
 8014272:	9307      	str	r3, [sp, #28]
 8014274:	930b      	str	r3, [sp, #44]	; 0x2c
 8014276:	9309      	str	r3, [sp, #36]	; 0x24
 8014278:	2322      	movs	r3, #34	; 0x22
 801427a:	2600      	movs	r6, #0
 801427c:	9a05      	ldr	r2, [sp, #20]
 801427e:	4f3e      	ldr	r7, [pc, #248]	; (8014378 <_strtod_l+0x5dc>)
 8014280:	6013      	str	r3, [r2, #0]
 8014282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014284:	42b3      	cmp	r3, r6
 8014286:	d100      	bne.n	801428a <_strtod_l+0x4ee>
 8014288:	e5cf      	b.n	8013e2a <_strtod_l+0x8e>
 801428a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801428c:	9805      	ldr	r0, [sp, #20]
 801428e:	f001 ff7b 	bl	8016188 <_Bfree>
 8014292:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014294:	9805      	ldr	r0, [sp, #20]
 8014296:	f001 ff77 	bl	8016188 <_Bfree>
 801429a:	9907      	ldr	r1, [sp, #28]
 801429c:	9805      	ldr	r0, [sp, #20]
 801429e:	f001 ff73 	bl	8016188 <_Bfree>
 80142a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142a4:	9805      	ldr	r0, [sp, #20]
 80142a6:	f001 ff6f 	bl	8016188 <_Bfree>
 80142aa:	9906      	ldr	r1, [sp, #24]
 80142ac:	9805      	ldr	r0, [sp, #20]
 80142ae:	f001 ff6b 	bl	8016188 <_Bfree>
 80142b2:	e5ba      	b.n	8013e2a <_strtod_l+0x8e>
 80142b4:	2300      	movs	r3, #0
 80142b6:	0030      	movs	r0, r6
 80142b8:	0039      	movs	r1, r7
 80142ba:	001d      	movs	r5, r3
 80142bc:	1124      	asrs	r4, r4, #4
 80142be:	2c01      	cmp	r4, #1
 80142c0:	dc1d      	bgt.n	80142fe <_strtod_l+0x562>
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d001      	beq.n	80142ca <_strtod_l+0x52e>
 80142c6:	0006      	movs	r6, r0
 80142c8:	000f      	movs	r7, r1
 80142ca:	4b30      	ldr	r3, [pc, #192]	; (801438c <_strtod_l+0x5f0>)
 80142cc:	00ed      	lsls	r5, r5, #3
 80142ce:	18ff      	adds	r7, r7, r3
 80142d0:	4b2f      	ldr	r3, [pc, #188]	; (8014390 <_strtod_l+0x5f4>)
 80142d2:	0032      	movs	r2, r6
 80142d4:	195d      	adds	r5, r3, r5
 80142d6:	6828      	ldr	r0, [r5, #0]
 80142d8:	6869      	ldr	r1, [r5, #4]
 80142da:	003b      	movs	r3, r7
 80142dc:	f7ed fd4c 	bl	8001d78 <__aeabi_dmul>
 80142e0:	4b25      	ldr	r3, [pc, #148]	; (8014378 <_strtod_l+0x5dc>)
 80142e2:	4a2c      	ldr	r2, [pc, #176]	; (8014394 <_strtod_l+0x5f8>)
 80142e4:	0006      	movs	r6, r0
 80142e6:	400b      	ands	r3, r1
 80142e8:	4293      	cmp	r3, r2
 80142ea:	d8c0      	bhi.n	801426e <_strtod_l+0x4d2>
 80142ec:	4a2a      	ldr	r2, [pc, #168]	; (8014398 <_strtod_l+0x5fc>)
 80142ee:	4293      	cmp	r3, r2
 80142f0:	d913      	bls.n	801431a <_strtod_l+0x57e>
 80142f2:	2601      	movs	r6, #1
 80142f4:	4f29      	ldr	r7, [pc, #164]	; (801439c <_strtod_l+0x600>)
 80142f6:	4276      	negs	r6, r6
 80142f8:	2300      	movs	r3, #0
 80142fa:	9308      	str	r3, [sp, #32]
 80142fc:	e087      	b.n	801440e <_strtod_l+0x672>
 80142fe:	2201      	movs	r2, #1
 8014300:	4214      	tst	r4, r2
 8014302:	d007      	beq.n	8014314 <_strtod_l+0x578>
 8014304:	4a22      	ldr	r2, [pc, #136]	; (8014390 <_strtod_l+0x5f4>)
 8014306:	00eb      	lsls	r3, r5, #3
 8014308:	189b      	adds	r3, r3, r2
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	685b      	ldr	r3, [r3, #4]
 801430e:	f7ed fd33 	bl	8001d78 <__aeabi_dmul>
 8014312:	2301      	movs	r3, #1
 8014314:	3501      	adds	r5, #1
 8014316:	1064      	asrs	r4, r4, #1
 8014318:	e7d1      	b.n	80142be <_strtod_l+0x522>
 801431a:	23d4      	movs	r3, #212	; 0xd4
 801431c:	049b      	lsls	r3, r3, #18
 801431e:	18cf      	adds	r7, r1, r3
 8014320:	e7ea      	b.n	80142f8 <_strtod_l+0x55c>
 8014322:	2c00      	cmp	r4, #0
 8014324:	d0e8      	beq.n	80142f8 <_strtod_l+0x55c>
 8014326:	4264      	negs	r4, r4
 8014328:	220f      	movs	r2, #15
 801432a:	0023      	movs	r3, r4
 801432c:	4013      	ands	r3, r2
 801432e:	4214      	tst	r4, r2
 8014330:	d00a      	beq.n	8014348 <_strtod_l+0x5ac>
 8014332:	00da      	lsls	r2, r3, #3
 8014334:	4b14      	ldr	r3, [pc, #80]	; (8014388 <_strtod_l+0x5ec>)
 8014336:	0030      	movs	r0, r6
 8014338:	189b      	adds	r3, r3, r2
 801433a:	0039      	movs	r1, r7
 801433c:	681a      	ldr	r2, [r3, #0]
 801433e:	685b      	ldr	r3, [r3, #4]
 8014340:	f7ed f914 	bl	800156c <__aeabi_ddiv>
 8014344:	0006      	movs	r6, r0
 8014346:	000f      	movs	r7, r1
 8014348:	1124      	asrs	r4, r4, #4
 801434a:	d0d5      	beq.n	80142f8 <_strtod_l+0x55c>
 801434c:	2c1f      	cmp	r4, #31
 801434e:	dd27      	ble.n	80143a0 <_strtod_l+0x604>
 8014350:	2300      	movs	r3, #0
 8014352:	9306      	str	r3, [sp, #24]
 8014354:	9307      	str	r3, [sp, #28]
 8014356:	930b      	str	r3, [sp, #44]	; 0x2c
 8014358:	9309      	str	r3, [sp, #36]	; 0x24
 801435a:	2322      	movs	r3, #34	; 0x22
 801435c:	9a05      	ldr	r2, [sp, #20]
 801435e:	2600      	movs	r6, #0
 8014360:	6013      	str	r3, [r2, #0]
 8014362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014364:	2700      	movs	r7, #0
 8014366:	2b00      	cmp	r3, #0
 8014368:	d18f      	bne.n	801428a <_strtod_l+0x4ee>
 801436a:	e55e      	b.n	8013e2a <_strtod_l+0x8e>
 801436c:	00004e1f 	.word	0x00004e1f
 8014370:	0801ab75 	.word	0x0801ab75
 8014374:	0801ac28 	.word	0x0801ac28
 8014378:	7ff00000 	.word	0x7ff00000
 801437c:	0801ab6d 	.word	0x0801ab6d
 8014380:	0801ad08 	.word	0x0801ad08
 8014384:	0801ad04 	.word	0x0801ad04
 8014388:	0801ae88 	.word	0x0801ae88
 801438c:	fcb00000 	.word	0xfcb00000
 8014390:	0801ae60 	.word	0x0801ae60
 8014394:	7ca00000 	.word	0x7ca00000
 8014398:	7c900000 	.word	0x7c900000
 801439c:	7fefffff 	.word	0x7fefffff
 80143a0:	2310      	movs	r3, #16
 80143a2:	0022      	movs	r2, r4
 80143a4:	401a      	ands	r2, r3
 80143a6:	9208      	str	r2, [sp, #32]
 80143a8:	421c      	tst	r4, r3
 80143aa:	d001      	beq.n	80143b0 <_strtod_l+0x614>
 80143ac:	335a      	adds	r3, #90	; 0x5a
 80143ae:	9308      	str	r3, [sp, #32]
 80143b0:	0030      	movs	r0, r6
 80143b2:	0039      	movs	r1, r7
 80143b4:	2300      	movs	r3, #0
 80143b6:	4dca      	ldr	r5, [pc, #808]	; (80146e0 <_strtod_l+0x944>)
 80143b8:	2201      	movs	r2, #1
 80143ba:	4214      	tst	r4, r2
 80143bc:	d004      	beq.n	80143c8 <_strtod_l+0x62c>
 80143be:	682a      	ldr	r2, [r5, #0]
 80143c0:	686b      	ldr	r3, [r5, #4]
 80143c2:	f7ed fcd9 	bl	8001d78 <__aeabi_dmul>
 80143c6:	2301      	movs	r3, #1
 80143c8:	1064      	asrs	r4, r4, #1
 80143ca:	3508      	adds	r5, #8
 80143cc:	2c00      	cmp	r4, #0
 80143ce:	d1f3      	bne.n	80143b8 <_strtod_l+0x61c>
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d001      	beq.n	80143d8 <_strtod_l+0x63c>
 80143d4:	0006      	movs	r6, r0
 80143d6:	000f      	movs	r7, r1
 80143d8:	9b08      	ldr	r3, [sp, #32]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d00f      	beq.n	80143fe <_strtod_l+0x662>
 80143de:	236b      	movs	r3, #107	; 0x6b
 80143e0:	0079      	lsls	r1, r7, #1
 80143e2:	0d49      	lsrs	r1, r1, #21
 80143e4:	003a      	movs	r2, r7
 80143e6:	1a5b      	subs	r3, r3, r1
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	dd08      	ble.n	80143fe <_strtod_l+0x662>
 80143ec:	2b1f      	cmp	r3, #31
 80143ee:	dc00      	bgt.n	80143f2 <_strtod_l+0x656>
 80143f0:	e126      	b.n	8014640 <_strtod_l+0x8a4>
 80143f2:	2600      	movs	r6, #0
 80143f4:	2b34      	cmp	r3, #52	; 0x34
 80143f6:	dc00      	bgt.n	80143fa <_strtod_l+0x65e>
 80143f8:	e11b      	b.n	8014632 <_strtod_l+0x896>
 80143fa:	27dc      	movs	r7, #220	; 0xdc
 80143fc:	04bf      	lsls	r7, r7, #18
 80143fe:	2200      	movs	r2, #0
 8014400:	2300      	movs	r3, #0
 8014402:	0030      	movs	r0, r6
 8014404:	0039      	movs	r1, r7
 8014406:	f7ec f829 	bl	800045c <__aeabi_dcmpeq>
 801440a:	2800      	cmp	r0, #0
 801440c:	d1a0      	bne.n	8014350 <_strtod_l+0x5b4>
 801440e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014412:	9300      	str	r3, [sp, #0]
 8014414:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014416:	9b06      	ldr	r3, [sp, #24]
 8014418:	9805      	ldr	r0, [sp, #20]
 801441a:	f001 ff1d 	bl	8016258 <__s2b>
 801441e:	900b      	str	r0, [sp, #44]	; 0x2c
 8014420:	2800      	cmp	r0, #0
 8014422:	d100      	bne.n	8014426 <_strtod_l+0x68a>
 8014424:	e723      	b.n	801426e <_strtod_l+0x4d2>
 8014426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014428:	9907      	ldr	r1, [sp, #28]
 801442a:	17da      	asrs	r2, r3, #31
 801442c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801442e:	1a5b      	subs	r3, r3, r1
 8014430:	401a      	ands	r2, r3
 8014432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014434:	9215      	str	r2, [sp, #84]	; 0x54
 8014436:	43db      	mvns	r3, r3
 8014438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801443a:	17db      	asrs	r3, r3, #31
 801443c:	401a      	ands	r2, r3
 801443e:	2300      	movs	r3, #0
 8014440:	921c      	str	r2, [sp, #112]	; 0x70
 8014442:	9306      	str	r3, [sp, #24]
 8014444:	9307      	str	r3, [sp, #28]
 8014446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014448:	9805      	ldr	r0, [sp, #20]
 801444a:	6859      	ldr	r1, [r3, #4]
 801444c:	f001 fe58 	bl	8016100 <_Balloc>
 8014450:	9009      	str	r0, [sp, #36]	; 0x24
 8014452:	2800      	cmp	r0, #0
 8014454:	d100      	bne.n	8014458 <_strtod_l+0x6bc>
 8014456:	e70f      	b.n	8014278 <_strtod_l+0x4dc>
 8014458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801445a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801445c:	691b      	ldr	r3, [r3, #16]
 801445e:	310c      	adds	r1, #12
 8014460:	1c9a      	adds	r2, r3, #2
 8014462:	0092      	lsls	r2, r2, #2
 8014464:	300c      	adds	r0, #12
 8014466:	930c      	str	r3, [sp, #48]	; 0x30
 8014468:	f7fe fe56 	bl	8013118 <memcpy>
 801446c:	ab24      	add	r3, sp, #144	; 0x90
 801446e:	9301      	str	r3, [sp, #4]
 8014470:	ab23      	add	r3, sp, #140	; 0x8c
 8014472:	9300      	str	r3, [sp, #0]
 8014474:	0032      	movs	r2, r6
 8014476:	003b      	movs	r3, r7
 8014478:	9805      	ldr	r0, [sp, #20]
 801447a:	960e      	str	r6, [sp, #56]	; 0x38
 801447c:	970f      	str	r7, [sp, #60]	; 0x3c
 801447e:	f002 fa39 	bl	80168f4 <__d2b>
 8014482:	9022      	str	r0, [sp, #136]	; 0x88
 8014484:	2800      	cmp	r0, #0
 8014486:	d100      	bne.n	801448a <_strtod_l+0x6ee>
 8014488:	e6f6      	b.n	8014278 <_strtod_l+0x4dc>
 801448a:	2101      	movs	r1, #1
 801448c:	9805      	ldr	r0, [sp, #20]
 801448e:	f001 ff77 	bl	8016380 <__i2b>
 8014492:	9007      	str	r0, [sp, #28]
 8014494:	2800      	cmp	r0, #0
 8014496:	d100      	bne.n	801449a <_strtod_l+0x6fe>
 8014498:	e6ee      	b.n	8014278 <_strtod_l+0x4dc>
 801449a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801449c:	2b00      	cmp	r3, #0
 801449e:	da00      	bge.n	80144a2 <_strtod_l+0x706>
 80144a0:	e0d3      	b.n	801464a <_strtod_l+0x8ae>
 80144a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80144a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80144a6:	189d      	adds	r5, r3, r2
 80144a8:	9908      	ldr	r1, [sp, #32]
 80144aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80144ac:	1a5b      	subs	r3, r3, r1
 80144ae:	2136      	movs	r1, #54	; 0x36
 80144b0:	189b      	adds	r3, r3, r2
 80144b2:	1a8a      	subs	r2, r1, r2
 80144b4:	498b      	ldr	r1, [pc, #556]	; (80146e4 <_strtod_l+0x948>)
 80144b6:	3b01      	subs	r3, #1
 80144b8:	2001      	movs	r0, #1
 80144ba:	428b      	cmp	r3, r1
 80144bc:	db00      	blt.n	80144c0 <_strtod_l+0x724>
 80144be:	e0cf      	b.n	8014660 <_strtod_l+0x8c4>
 80144c0:	1ac9      	subs	r1, r1, r3
 80144c2:	1a52      	subs	r2, r2, r1
 80144c4:	291f      	cmp	r1, #31
 80144c6:	dd00      	ble.n	80144ca <_strtod_l+0x72e>
 80144c8:	e0c3      	b.n	8014652 <_strtod_l+0x8b6>
 80144ca:	4088      	lsls	r0, r1
 80144cc:	2300      	movs	r3, #0
 80144ce:	9014      	str	r0, [sp, #80]	; 0x50
 80144d0:	9312      	str	r3, [sp, #72]	; 0x48
 80144d2:	18ab      	adds	r3, r5, r2
 80144d4:	930c      	str	r3, [sp, #48]	; 0x30
 80144d6:	18a4      	adds	r4, r4, r2
 80144d8:	9b08      	ldr	r3, [sp, #32]
 80144da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144dc:	191c      	adds	r4, r3, r4
 80144de:	002b      	movs	r3, r5
 80144e0:	4295      	cmp	r5, r2
 80144e2:	dd00      	ble.n	80144e6 <_strtod_l+0x74a>
 80144e4:	0013      	movs	r3, r2
 80144e6:	42a3      	cmp	r3, r4
 80144e8:	dd00      	ble.n	80144ec <_strtod_l+0x750>
 80144ea:	0023      	movs	r3, r4
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	dd04      	ble.n	80144fa <_strtod_l+0x75e>
 80144f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144f2:	1ae4      	subs	r4, r4, r3
 80144f4:	1ad2      	subs	r2, r2, r3
 80144f6:	920c      	str	r2, [sp, #48]	; 0x30
 80144f8:	1aed      	subs	r5, r5, r3
 80144fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	dd17      	ble.n	8014530 <_strtod_l+0x794>
 8014500:	001a      	movs	r2, r3
 8014502:	9907      	ldr	r1, [sp, #28]
 8014504:	9805      	ldr	r0, [sp, #20]
 8014506:	f002 f801 	bl	801650c <__pow5mult>
 801450a:	9007      	str	r0, [sp, #28]
 801450c:	2800      	cmp	r0, #0
 801450e:	d100      	bne.n	8014512 <_strtod_l+0x776>
 8014510:	e6b2      	b.n	8014278 <_strtod_l+0x4dc>
 8014512:	0001      	movs	r1, r0
 8014514:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014516:	9805      	ldr	r0, [sp, #20]
 8014518:	f001 ff48 	bl	80163ac <__multiply>
 801451c:	9011      	str	r0, [sp, #68]	; 0x44
 801451e:	2800      	cmp	r0, #0
 8014520:	d100      	bne.n	8014524 <_strtod_l+0x788>
 8014522:	e6a9      	b.n	8014278 <_strtod_l+0x4dc>
 8014524:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014526:	9805      	ldr	r0, [sp, #20]
 8014528:	f001 fe2e 	bl	8016188 <_Bfree>
 801452c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801452e:	9322      	str	r3, [sp, #136]	; 0x88
 8014530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014532:	2b00      	cmp	r3, #0
 8014534:	dd00      	ble.n	8014538 <_strtod_l+0x79c>
 8014536:	e096      	b.n	8014666 <_strtod_l+0x8ca>
 8014538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801453a:	2b00      	cmp	r3, #0
 801453c:	dd08      	ble.n	8014550 <_strtod_l+0x7b4>
 801453e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014540:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014542:	9805      	ldr	r0, [sp, #20]
 8014544:	f001 ffe2 	bl	801650c <__pow5mult>
 8014548:	9009      	str	r0, [sp, #36]	; 0x24
 801454a:	2800      	cmp	r0, #0
 801454c:	d100      	bne.n	8014550 <_strtod_l+0x7b4>
 801454e:	e693      	b.n	8014278 <_strtod_l+0x4dc>
 8014550:	2c00      	cmp	r4, #0
 8014552:	dd08      	ble.n	8014566 <_strtod_l+0x7ca>
 8014554:	0022      	movs	r2, r4
 8014556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014558:	9805      	ldr	r0, [sp, #20]
 801455a:	f002 f833 	bl	80165c4 <__lshift>
 801455e:	9009      	str	r0, [sp, #36]	; 0x24
 8014560:	2800      	cmp	r0, #0
 8014562:	d100      	bne.n	8014566 <_strtod_l+0x7ca>
 8014564:	e688      	b.n	8014278 <_strtod_l+0x4dc>
 8014566:	2d00      	cmp	r5, #0
 8014568:	dd08      	ble.n	801457c <_strtod_l+0x7e0>
 801456a:	002a      	movs	r2, r5
 801456c:	9907      	ldr	r1, [sp, #28]
 801456e:	9805      	ldr	r0, [sp, #20]
 8014570:	f002 f828 	bl	80165c4 <__lshift>
 8014574:	9007      	str	r0, [sp, #28]
 8014576:	2800      	cmp	r0, #0
 8014578:	d100      	bne.n	801457c <_strtod_l+0x7e0>
 801457a:	e67d      	b.n	8014278 <_strtod_l+0x4dc>
 801457c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801457e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014580:	9805      	ldr	r0, [sp, #20]
 8014582:	f002 f8ab 	bl	80166dc <__mdiff>
 8014586:	9006      	str	r0, [sp, #24]
 8014588:	2800      	cmp	r0, #0
 801458a:	d100      	bne.n	801458e <_strtod_l+0x7f2>
 801458c:	e674      	b.n	8014278 <_strtod_l+0x4dc>
 801458e:	2200      	movs	r2, #0
 8014590:	68c3      	ldr	r3, [r0, #12]
 8014592:	9907      	ldr	r1, [sp, #28]
 8014594:	60c2      	str	r2, [r0, #12]
 8014596:	9311      	str	r3, [sp, #68]	; 0x44
 8014598:	f002 f884 	bl	80166a4 <__mcmp>
 801459c:	2800      	cmp	r0, #0
 801459e:	da6c      	bge.n	801467a <_strtod_l+0x8de>
 80145a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80145a2:	4333      	orrs	r3, r6
 80145a4:	d000      	beq.n	80145a8 <_strtod_l+0x80c>
 80145a6:	e097      	b.n	80146d8 <_strtod_l+0x93c>
 80145a8:	033b      	lsls	r3, r7, #12
 80145aa:	d000      	beq.n	80145ae <_strtod_l+0x812>
 80145ac:	e094      	b.n	80146d8 <_strtod_l+0x93c>
 80145ae:	22d6      	movs	r2, #214	; 0xd6
 80145b0:	4b4d      	ldr	r3, [pc, #308]	; (80146e8 <_strtod_l+0x94c>)
 80145b2:	04d2      	lsls	r2, r2, #19
 80145b4:	403b      	ands	r3, r7
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d800      	bhi.n	80145bc <_strtod_l+0x820>
 80145ba:	e08d      	b.n	80146d8 <_strtod_l+0x93c>
 80145bc:	9b06      	ldr	r3, [sp, #24]
 80145be:	695b      	ldr	r3, [r3, #20]
 80145c0:	930a      	str	r3, [sp, #40]	; 0x28
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d105      	bne.n	80145d2 <_strtod_l+0x836>
 80145c6:	9b06      	ldr	r3, [sp, #24]
 80145c8:	691b      	ldr	r3, [r3, #16]
 80145ca:	930a      	str	r3, [sp, #40]	; 0x28
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	dc00      	bgt.n	80145d2 <_strtod_l+0x836>
 80145d0:	e082      	b.n	80146d8 <_strtod_l+0x93c>
 80145d2:	9906      	ldr	r1, [sp, #24]
 80145d4:	2201      	movs	r2, #1
 80145d6:	9805      	ldr	r0, [sp, #20]
 80145d8:	f001 fff4 	bl	80165c4 <__lshift>
 80145dc:	9907      	ldr	r1, [sp, #28]
 80145de:	9006      	str	r0, [sp, #24]
 80145e0:	f002 f860 	bl	80166a4 <__mcmp>
 80145e4:	2800      	cmp	r0, #0
 80145e6:	dd77      	ble.n	80146d8 <_strtod_l+0x93c>
 80145e8:	9908      	ldr	r1, [sp, #32]
 80145ea:	003b      	movs	r3, r7
 80145ec:	4a3e      	ldr	r2, [pc, #248]	; (80146e8 <_strtod_l+0x94c>)
 80145ee:	2900      	cmp	r1, #0
 80145f0:	d100      	bne.n	80145f4 <_strtod_l+0x858>
 80145f2:	e09e      	b.n	8014732 <_strtod_l+0x996>
 80145f4:	0011      	movs	r1, r2
 80145f6:	20d6      	movs	r0, #214	; 0xd6
 80145f8:	4039      	ands	r1, r7
 80145fa:	04c0      	lsls	r0, r0, #19
 80145fc:	4281      	cmp	r1, r0
 80145fe:	dd00      	ble.n	8014602 <_strtod_l+0x866>
 8014600:	e097      	b.n	8014732 <_strtod_l+0x996>
 8014602:	23dc      	movs	r3, #220	; 0xdc
 8014604:	049b      	lsls	r3, r3, #18
 8014606:	4299      	cmp	r1, r3
 8014608:	dc00      	bgt.n	801460c <_strtod_l+0x870>
 801460a:	e6a6      	b.n	801435a <_strtod_l+0x5be>
 801460c:	4b37      	ldr	r3, [pc, #220]	; (80146ec <_strtod_l+0x950>)
 801460e:	0030      	movs	r0, r6
 8014610:	931b      	str	r3, [sp, #108]	; 0x6c
 8014612:	2300      	movs	r3, #0
 8014614:	931a      	str	r3, [sp, #104]	; 0x68
 8014616:	0039      	movs	r1, r7
 8014618:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801461a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801461c:	f7ed fbac 	bl	8001d78 <__aeabi_dmul>
 8014620:	0006      	movs	r6, r0
 8014622:	000f      	movs	r7, r1
 8014624:	4308      	orrs	r0, r1
 8014626:	d000      	beq.n	801462a <_strtod_l+0x88e>
 8014628:	e62f      	b.n	801428a <_strtod_l+0x4ee>
 801462a:	2322      	movs	r3, #34	; 0x22
 801462c:	9a05      	ldr	r2, [sp, #20]
 801462e:	6013      	str	r3, [r2, #0]
 8014630:	e62b      	b.n	801428a <_strtod_l+0x4ee>
 8014632:	2101      	movs	r1, #1
 8014634:	3b20      	subs	r3, #32
 8014636:	4249      	negs	r1, r1
 8014638:	4099      	lsls	r1, r3
 801463a:	400a      	ands	r2, r1
 801463c:	0017      	movs	r7, r2
 801463e:	e6de      	b.n	80143fe <_strtod_l+0x662>
 8014640:	2201      	movs	r2, #1
 8014642:	4252      	negs	r2, r2
 8014644:	409a      	lsls	r2, r3
 8014646:	4016      	ands	r6, r2
 8014648:	e6d9      	b.n	80143fe <_strtod_l+0x662>
 801464a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801464c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801464e:	1ad4      	subs	r4, r2, r3
 8014650:	e72a      	b.n	80144a8 <_strtod_l+0x70c>
 8014652:	4927      	ldr	r1, [pc, #156]	; (80146f0 <_strtod_l+0x954>)
 8014654:	1acb      	subs	r3, r1, r3
 8014656:	0001      	movs	r1, r0
 8014658:	4099      	lsls	r1, r3
 801465a:	9112      	str	r1, [sp, #72]	; 0x48
 801465c:	9014      	str	r0, [sp, #80]	; 0x50
 801465e:	e738      	b.n	80144d2 <_strtod_l+0x736>
 8014660:	2300      	movs	r3, #0
 8014662:	9312      	str	r3, [sp, #72]	; 0x48
 8014664:	e7fa      	b.n	801465c <_strtod_l+0x8c0>
 8014666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014668:	9922      	ldr	r1, [sp, #136]	; 0x88
 801466a:	9805      	ldr	r0, [sp, #20]
 801466c:	f001 ffaa 	bl	80165c4 <__lshift>
 8014670:	9022      	str	r0, [sp, #136]	; 0x88
 8014672:	2800      	cmp	r0, #0
 8014674:	d000      	beq.n	8014678 <_strtod_l+0x8dc>
 8014676:	e75f      	b.n	8014538 <_strtod_l+0x79c>
 8014678:	e5fe      	b.n	8014278 <_strtod_l+0x4dc>
 801467a:	970c      	str	r7, [sp, #48]	; 0x30
 801467c:	2800      	cmp	r0, #0
 801467e:	d176      	bne.n	801476e <_strtod_l+0x9d2>
 8014680:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014682:	033b      	lsls	r3, r7, #12
 8014684:	0b1b      	lsrs	r3, r3, #12
 8014686:	2a00      	cmp	r2, #0
 8014688:	d038      	beq.n	80146fc <_strtod_l+0x960>
 801468a:	4a1a      	ldr	r2, [pc, #104]	; (80146f4 <_strtod_l+0x958>)
 801468c:	4293      	cmp	r3, r2
 801468e:	d138      	bne.n	8014702 <_strtod_l+0x966>
 8014690:	2201      	movs	r2, #1
 8014692:	9b08      	ldr	r3, [sp, #32]
 8014694:	4252      	negs	r2, r2
 8014696:	0031      	movs	r1, r6
 8014698:	0010      	movs	r0, r2
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00b      	beq.n	80146b6 <_strtod_l+0x91a>
 801469e:	24d4      	movs	r4, #212	; 0xd4
 80146a0:	4b11      	ldr	r3, [pc, #68]	; (80146e8 <_strtod_l+0x94c>)
 80146a2:	0010      	movs	r0, r2
 80146a4:	403b      	ands	r3, r7
 80146a6:	04e4      	lsls	r4, r4, #19
 80146a8:	42a3      	cmp	r3, r4
 80146aa:	d804      	bhi.n	80146b6 <_strtod_l+0x91a>
 80146ac:	306c      	adds	r0, #108	; 0x6c
 80146ae:	0d1b      	lsrs	r3, r3, #20
 80146b0:	1ac3      	subs	r3, r0, r3
 80146b2:	409a      	lsls	r2, r3
 80146b4:	0010      	movs	r0, r2
 80146b6:	4281      	cmp	r1, r0
 80146b8:	d123      	bne.n	8014702 <_strtod_l+0x966>
 80146ba:	4b0f      	ldr	r3, [pc, #60]	; (80146f8 <_strtod_l+0x95c>)
 80146bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146be:	429a      	cmp	r2, r3
 80146c0:	d102      	bne.n	80146c8 <_strtod_l+0x92c>
 80146c2:	1c4b      	adds	r3, r1, #1
 80146c4:	d100      	bne.n	80146c8 <_strtod_l+0x92c>
 80146c6:	e5d7      	b.n	8014278 <_strtod_l+0x4dc>
 80146c8:	4b07      	ldr	r3, [pc, #28]	; (80146e8 <_strtod_l+0x94c>)
 80146ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80146cc:	2600      	movs	r6, #0
 80146ce:	401a      	ands	r2, r3
 80146d0:	0013      	movs	r3, r2
 80146d2:	2280      	movs	r2, #128	; 0x80
 80146d4:	0352      	lsls	r2, r2, #13
 80146d6:	189f      	adds	r7, r3, r2
 80146d8:	9b08      	ldr	r3, [sp, #32]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d196      	bne.n	801460c <_strtod_l+0x870>
 80146de:	e5d4      	b.n	801428a <_strtod_l+0x4ee>
 80146e0:	0801ac40 	.word	0x0801ac40
 80146e4:	fffffc02 	.word	0xfffffc02
 80146e8:	7ff00000 	.word	0x7ff00000
 80146ec:	39500000 	.word	0x39500000
 80146f0:	fffffbe2 	.word	0xfffffbe2
 80146f4:	000fffff 	.word	0x000fffff
 80146f8:	7fefffff 	.word	0x7fefffff
 80146fc:	4333      	orrs	r3, r6
 80146fe:	d100      	bne.n	8014702 <_strtod_l+0x966>
 8014700:	e772      	b.n	80145e8 <_strtod_l+0x84c>
 8014702:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014704:	2b00      	cmp	r3, #0
 8014706:	d01d      	beq.n	8014744 <_strtod_l+0x9a8>
 8014708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801470a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801470c:	4213      	tst	r3, r2
 801470e:	d0e3      	beq.n	80146d8 <_strtod_l+0x93c>
 8014710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014712:	0030      	movs	r0, r6
 8014714:	0039      	movs	r1, r7
 8014716:	9a08      	ldr	r2, [sp, #32]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d017      	beq.n	801474c <_strtod_l+0x9b0>
 801471c:	f7ff fb26 	bl	8013d6c <sulp>
 8014720:	0002      	movs	r2, r0
 8014722:	000b      	movs	r3, r1
 8014724:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014726:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014728:	f7ec fbb6 	bl	8000e98 <__aeabi_dadd>
 801472c:	0006      	movs	r6, r0
 801472e:	000f      	movs	r7, r1
 8014730:	e7d2      	b.n	80146d8 <_strtod_l+0x93c>
 8014732:	2601      	movs	r6, #1
 8014734:	4013      	ands	r3, r2
 8014736:	4a9b      	ldr	r2, [pc, #620]	; (80149a4 <_strtod_l+0xc08>)
 8014738:	4276      	negs	r6, r6
 801473a:	189b      	adds	r3, r3, r2
 801473c:	4a9a      	ldr	r2, [pc, #616]	; (80149a8 <_strtod_l+0xc0c>)
 801473e:	431a      	orrs	r2, r3
 8014740:	0017      	movs	r7, r2
 8014742:	e7c9      	b.n	80146d8 <_strtod_l+0x93c>
 8014744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014746:	4233      	tst	r3, r6
 8014748:	d0c6      	beq.n	80146d8 <_strtod_l+0x93c>
 801474a:	e7e1      	b.n	8014710 <_strtod_l+0x974>
 801474c:	f7ff fb0e 	bl	8013d6c <sulp>
 8014750:	0002      	movs	r2, r0
 8014752:	000b      	movs	r3, r1
 8014754:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014756:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014758:	f7ed fd7a 	bl	8002250 <__aeabi_dsub>
 801475c:	2200      	movs	r2, #0
 801475e:	2300      	movs	r3, #0
 8014760:	0006      	movs	r6, r0
 8014762:	000f      	movs	r7, r1
 8014764:	f7eb fe7a 	bl	800045c <__aeabi_dcmpeq>
 8014768:	2800      	cmp	r0, #0
 801476a:	d0b5      	beq.n	80146d8 <_strtod_l+0x93c>
 801476c:	e5f5      	b.n	801435a <_strtod_l+0x5be>
 801476e:	9907      	ldr	r1, [sp, #28]
 8014770:	9806      	ldr	r0, [sp, #24]
 8014772:	f002 f923 	bl	80169bc <__ratio>
 8014776:	2380      	movs	r3, #128	; 0x80
 8014778:	2200      	movs	r2, #0
 801477a:	05db      	lsls	r3, r3, #23
 801477c:	0004      	movs	r4, r0
 801477e:	000d      	movs	r5, r1
 8014780:	f7eb fe7c 	bl	800047c <__aeabi_dcmple>
 8014784:	2800      	cmp	r0, #0
 8014786:	d079      	beq.n	801487c <_strtod_l+0xae0>
 8014788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801478a:	2b00      	cmp	r3, #0
 801478c:	d04b      	beq.n	8014826 <_strtod_l+0xa8a>
 801478e:	2300      	movs	r3, #0
 8014790:	4c86      	ldr	r4, [pc, #536]	; (80149ac <_strtod_l+0xc10>)
 8014792:	2500      	movs	r5, #0
 8014794:	9312      	str	r3, [sp, #72]	; 0x48
 8014796:	9413      	str	r4, [sp, #76]	; 0x4c
 8014798:	4c84      	ldr	r4, [pc, #528]	; (80149ac <_strtod_l+0xc10>)
 801479a:	4a85      	ldr	r2, [pc, #532]	; (80149b0 <_strtod_l+0xc14>)
 801479c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801479e:	4013      	ands	r3, r2
 80147a0:	9314      	str	r3, [sp, #80]	; 0x50
 80147a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80147a4:	4b83      	ldr	r3, [pc, #524]	; (80149b4 <_strtod_l+0xc18>)
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d000      	beq.n	80147ac <_strtod_l+0xa10>
 80147aa:	e0b0      	b.n	801490e <_strtod_l+0xb72>
 80147ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80147ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147b0:	921a      	str	r2, [sp, #104]	; 0x68
 80147b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80147b4:	4a80      	ldr	r2, [pc, #512]	; (80149b8 <_strtod_l+0xc1c>)
 80147b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147b8:	4694      	mov	ip, r2
 80147ba:	4463      	add	r3, ip
 80147bc:	001f      	movs	r7, r3
 80147be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80147c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147c2:	0030      	movs	r0, r6
 80147c4:	0039      	movs	r1, r7
 80147c6:	920c      	str	r2, [sp, #48]	; 0x30
 80147c8:	930d      	str	r3, [sp, #52]	; 0x34
 80147ca:	f002 f81f 	bl	801680c <__ulp>
 80147ce:	0002      	movs	r2, r0
 80147d0:	000b      	movs	r3, r1
 80147d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80147d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80147d6:	f7ed facf 	bl	8001d78 <__aeabi_dmul>
 80147da:	0032      	movs	r2, r6
 80147dc:	003b      	movs	r3, r7
 80147de:	f7ec fb5b 	bl	8000e98 <__aeabi_dadd>
 80147e2:	4a73      	ldr	r2, [pc, #460]	; (80149b0 <_strtod_l+0xc14>)
 80147e4:	4b75      	ldr	r3, [pc, #468]	; (80149bc <_strtod_l+0xc20>)
 80147e6:	0006      	movs	r6, r0
 80147e8:	400a      	ands	r2, r1
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d95e      	bls.n	80148ac <_strtod_l+0xb10>
 80147ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147f0:	4a73      	ldr	r2, [pc, #460]	; (80149c0 <_strtod_l+0xc24>)
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d103      	bne.n	80147fe <_strtod_l+0xa62>
 80147f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80147f8:	3301      	adds	r3, #1
 80147fa:	d100      	bne.n	80147fe <_strtod_l+0xa62>
 80147fc:	e53c      	b.n	8014278 <_strtod_l+0x4dc>
 80147fe:	2601      	movs	r6, #1
 8014800:	4f6f      	ldr	r7, [pc, #444]	; (80149c0 <_strtod_l+0xc24>)
 8014802:	4276      	negs	r6, r6
 8014804:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014806:	9805      	ldr	r0, [sp, #20]
 8014808:	f001 fcbe 	bl	8016188 <_Bfree>
 801480c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801480e:	9805      	ldr	r0, [sp, #20]
 8014810:	f001 fcba 	bl	8016188 <_Bfree>
 8014814:	9907      	ldr	r1, [sp, #28]
 8014816:	9805      	ldr	r0, [sp, #20]
 8014818:	f001 fcb6 	bl	8016188 <_Bfree>
 801481c:	9906      	ldr	r1, [sp, #24]
 801481e:	9805      	ldr	r0, [sp, #20]
 8014820:	f001 fcb2 	bl	8016188 <_Bfree>
 8014824:	e60f      	b.n	8014446 <_strtod_l+0x6aa>
 8014826:	2e00      	cmp	r6, #0
 8014828:	d11c      	bne.n	8014864 <_strtod_l+0xac8>
 801482a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801482c:	031b      	lsls	r3, r3, #12
 801482e:	d11f      	bne.n	8014870 <_strtod_l+0xad4>
 8014830:	2200      	movs	r2, #0
 8014832:	0020      	movs	r0, r4
 8014834:	0029      	movs	r1, r5
 8014836:	4b5d      	ldr	r3, [pc, #372]	; (80149ac <_strtod_l+0xc10>)
 8014838:	f7eb fe16 	bl	8000468 <__aeabi_dcmplt>
 801483c:	2800      	cmp	r0, #0
 801483e:	d11a      	bne.n	8014876 <_strtod_l+0xada>
 8014840:	0020      	movs	r0, r4
 8014842:	0029      	movs	r1, r5
 8014844:	2200      	movs	r2, #0
 8014846:	4b5f      	ldr	r3, [pc, #380]	; (80149c4 <_strtod_l+0xc28>)
 8014848:	f7ed fa96 	bl	8001d78 <__aeabi_dmul>
 801484c:	0005      	movs	r5, r0
 801484e:	000c      	movs	r4, r1
 8014850:	2380      	movs	r3, #128	; 0x80
 8014852:	061b      	lsls	r3, r3, #24
 8014854:	18e3      	adds	r3, r4, r3
 8014856:	951e      	str	r5, [sp, #120]	; 0x78
 8014858:	931f      	str	r3, [sp, #124]	; 0x7c
 801485a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801485c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801485e:	9212      	str	r2, [sp, #72]	; 0x48
 8014860:	9313      	str	r3, [sp, #76]	; 0x4c
 8014862:	e79a      	b.n	801479a <_strtod_l+0x9fe>
 8014864:	2e01      	cmp	r6, #1
 8014866:	d103      	bne.n	8014870 <_strtod_l+0xad4>
 8014868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801486a:	2b00      	cmp	r3, #0
 801486c:	d100      	bne.n	8014870 <_strtod_l+0xad4>
 801486e:	e574      	b.n	801435a <_strtod_l+0x5be>
 8014870:	2300      	movs	r3, #0
 8014872:	4c55      	ldr	r4, [pc, #340]	; (80149c8 <_strtod_l+0xc2c>)
 8014874:	e78d      	b.n	8014792 <_strtod_l+0x9f6>
 8014876:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014878:	4c52      	ldr	r4, [pc, #328]	; (80149c4 <_strtod_l+0xc28>)
 801487a:	e7e9      	b.n	8014850 <_strtod_l+0xab4>
 801487c:	2200      	movs	r2, #0
 801487e:	0020      	movs	r0, r4
 8014880:	0029      	movs	r1, r5
 8014882:	4b50      	ldr	r3, [pc, #320]	; (80149c4 <_strtod_l+0xc28>)
 8014884:	f7ed fa78 	bl	8001d78 <__aeabi_dmul>
 8014888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801488a:	0005      	movs	r5, r0
 801488c:	000b      	movs	r3, r1
 801488e:	000c      	movs	r4, r1
 8014890:	2a00      	cmp	r2, #0
 8014892:	d107      	bne.n	80148a4 <_strtod_l+0xb08>
 8014894:	2280      	movs	r2, #128	; 0x80
 8014896:	0612      	lsls	r2, r2, #24
 8014898:	188b      	adds	r3, r1, r2
 801489a:	9016      	str	r0, [sp, #88]	; 0x58
 801489c:	9317      	str	r3, [sp, #92]	; 0x5c
 801489e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80148a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80148a2:	e7dc      	b.n	801485e <_strtod_l+0xac2>
 80148a4:	0002      	movs	r2, r0
 80148a6:	9216      	str	r2, [sp, #88]	; 0x58
 80148a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80148aa:	e7f8      	b.n	801489e <_strtod_l+0xb02>
 80148ac:	23d4      	movs	r3, #212	; 0xd4
 80148ae:	049b      	lsls	r3, r3, #18
 80148b0:	18cf      	adds	r7, r1, r3
 80148b2:	9b08      	ldr	r3, [sp, #32]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d1a5      	bne.n	8014804 <_strtod_l+0xa68>
 80148b8:	4b3d      	ldr	r3, [pc, #244]	; (80149b0 <_strtod_l+0xc14>)
 80148ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80148bc:	403b      	ands	r3, r7
 80148be:	429a      	cmp	r2, r3
 80148c0:	d1a0      	bne.n	8014804 <_strtod_l+0xa68>
 80148c2:	0028      	movs	r0, r5
 80148c4:	0021      	movs	r1, r4
 80148c6:	f7eb fe99 	bl	80005fc <__aeabi_d2lz>
 80148ca:	f7eb fed3 	bl	8000674 <__aeabi_l2d>
 80148ce:	0002      	movs	r2, r0
 80148d0:	000b      	movs	r3, r1
 80148d2:	0028      	movs	r0, r5
 80148d4:	0021      	movs	r1, r4
 80148d6:	f7ed fcbb 	bl	8002250 <__aeabi_dsub>
 80148da:	033b      	lsls	r3, r7, #12
 80148dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80148de:	0b1b      	lsrs	r3, r3, #12
 80148e0:	4333      	orrs	r3, r6
 80148e2:	4313      	orrs	r3, r2
 80148e4:	0004      	movs	r4, r0
 80148e6:	000d      	movs	r5, r1
 80148e8:	4a38      	ldr	r2, [pc, #224]	; (80149cc <_strtod_l+0xc30>)
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d055      	beq.n	801499a <_strtod_l+0xbfe>
 80148ee:	4b38      	ldr	r3, [pc, #224]	; (80149d0 <_strtod_l+0xc34>)
 80148f0:	f7eb fdba 	bl	8000468 <__aeabi_dcmplt>
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d000      	beq.n	80148fa <_strtod_l+0xb5e>
 80148f8:	e4c7      	b.n	801428a <_strtod_l+0x4ee>
 80148fa:	0020      	movs	r0, r4
 80148fc:	0029      	movs	r1, r5
 80148fe:	4a35      	ldr	r2, [pc, #212]	; (80149d4 <_strtod_l+0xc38>)
 8014900:	4b30      	ldr	r3, [pc, #192]	; (80149c4 <_strtod_l+0xc28>)
 8014902:	f7eb fdc5 	bl	8000490 <__aeabi_dcmpgt>
 8014906:	2800      	cmp	r0, #0
 8014908:	d100      	bne.n	801490c <_strtod_l+0xb70>
 801490a:	e77b      	b.n	8014804 <_strtod_l+0xa68>
 801490c:	e4bd      	b.n	801428a <_strtod_l+0x4ee>
 801490e:	9b08      	ldr	r3, [sp, #32]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d02b      	beq.n	801496c <_strtod_l+0xbd0>
 8014914:	23d4      	movs	r3, #212	; 0xd4
 8014916:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014918:	04db      	lsls	r3, r3, #19
 801491a:	429a      	cmp	r2, r3
 801491c:	d826      	bhi.n	801496c <_strtod_l+0xbd0>
 801491e:	0028      	movs	r0, r5
 8014920:	0021      	movs	r1, r4
 8014922:	4a2d      	ldr	r2, [pc, #180]	; (80149d8 <_strtod_l+0xc3c>)
 8014924:	4b2d      	ldr	r3, [pc, #180]	; (80149dc <_strtod_l+0xc40>)
 8014926:	f7eb fda9 	bl	800047c <__aeabi_dcmple>
 801492a:	2800      	cmp	r0, #0
 801492c:	d017      	beq.n	801495e <_strtod_l+0xbc2>
 801492e:	0028      	movs	r0, r5
 8014930:	0021      	movs	r1, r4
 8014932:	f7eb fe45 	bl	80005c0 <__aeabi_d2uiz>
 8014936:	2800      	cmp	r0, #0
 8014938:	d100      	bne.n	801493c <_strtod_l+0xba0>
 801493a:	3001      	adds	r0, #1
 801493c:	f7ee f89e 	bl	8002a7c <__aeabi_ui2d>
 8014940:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014942:	0005      	movs	r5, r0
 8014944:	000b      	movs	r3, r1
 8014946:	000c      	movs	r4, r1
 8014948:	2a00      	cmp	r2, #0
 801494a:	d122      	bne.n	8014992 <_strtod_l+0xbf6>
 801494c:	2280      	movs	r2, #128	; 0x80
 801494e:	0612      	lsls	r2, r2, #24
 8014950:	188b      	adds	r3, r1, r2
 8014952:	9018      	str	r0, [sp, #96]	; 0x60
 8014954:	9319      	str	r3, [sp, #100]	; 0x64
 8014956:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014958:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801495a:	9212      	str	r2, [sp, #72]	; 0x48
 801495c:	9313      	str	r3, [sp, #76]	; 0x4c
 801495e:	22d6      	movs	r2, #214	; 0xd6
 8014960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014962:	04d2      	lsls	r2, r2, #19
 8014964:	189b      	adds	r3, r3, r2
 8014966:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014968:	1a9b      	subs	r3, r3, r2
 801496a:	9313      	str	r3, [sp, #76]	; 0x4c
 801496c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801496e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014970:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014972:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8014974:	f001 ff4a 	bl	801680c <__ulp>
 8014978:	0002      	movs	r2, r0
 801497a:	000b      	movs	r3, r1
 801497c:	0030      	movs	r0, r6
 801497e:	0039      	movs	r1, r7
 8014980:	f7ed f9fa 	bl	8001d78 <__aeabi_dmul>
 8014984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014988:	f7ec fa86 	bl	8000e98 <__aeabi_dadd>
 801498c:	0006      	movs	r6, r0
 801498e:	000f      	movs	r7, r1
 8014990:	e78f      	b.n	80148b2 <_strtod_l+0xb16>
 8014992:	0002      	movs	r2, r0
 8014994:	9218      	str	r2, [sp, #96]	; 0x60
 8014996:	9319      	str	r3, [sp, #100]	; 0x64
 8014998:	e7dd      	b.n	8014956 <_strtod_l+0xbba>
 801499a:	4b11      	ldr	r3, [pc, #68]	; (80149e0 <_strtod_l+0xc44>)
 801499c:	f7eb fd64 	bl	8000468 <__aeabi_dcmplt>
 80149a0:	e7b1      	b.n	8014906 <_strtod_l+0xb6a>
 80149a2:	46c0      	nop			; (mov r8, r8)
 80149a4:	fff00000 	.word	0xfff00000
 80149a8:	000fffff 	.word	0x000fffff
 80149ac:	3ff00000 	.word	0x3ff00000
 80149b0:	7ff00000 	.word	0x7ff00000
 80149b4:	7fe00000 	.word	0x7fe00000
 80149b8:	fcb00000 	.word	0xfcb00000
 80149bc:	7c9fffff 	.word	0x7c9fffff
 80149c0:	7fefffff 	.word	0x7fefffff
 80149c4:	3fe00000 	.word	0x3fe00000
 80149c8:	bff00000 	.word	0xbff00000
 80149cc:	94a03595 	.word	0x94a03595
 80149d0:	3fdfffff 	.word	0x3fdfffff
 80149d4:	35afe535 	.word	0x35afe535
 80149d8:	ffc00000 	.word	0xffc00000
 80149dc:	41dfffff 	.word	0x41dfffff
 80149e0:	3fcfffff 	.word	0x3fcfffff

080149e4 <strtod>:
 80149e4:	b510      	push	{r4, lr}
 80149e6:	000a      	movs	r2, r1
 80149e8:	0001      	movs	r1, r0
 80149ea:	4803      	ldr	r0, [pc, #12]	; (80149f8 <strtod+0x14>)
 80149ec:	4b03      	ldr	r3, [pc, #12]	; (80149fc <strtod+0x18>)
 80149ee:	6800      	ldr	r0, [r0, #0]
 80149f0:	f7ff f9d4 	bl	8013d9c <_strtod_l>
 80149f4:	bd10      	pop	{r4, pc}
 80149f6:	46c0      	nop			; (mov r8, r8)
 80149f8:	20000120 	.word	0x20000120
 80149fc:	20000188 	.word	0x20000188

08014a00 <strtok>:
 8014a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a02:	4b16      	ldr	r3, [pc, #88]	; (8014a5c <strtok+0x5c>)
 8014a04:	0005      	movs	r5, r0
 8014a06:	681f      	ldr	r7, [r3, #0]
 8014a08:	000e      	movs	r6, r1
 8014a0a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8014a0c:	2c00      	cmp	r4, #0
 8014a0e:	d11d      	bne.n	8014a4c <strtok+0x4c>
 8014a10:	2050      	movs	r0, #80	; 0x50
 8014a12:	f7fe fb5f 	bl	80130d4 <malloc>
 8014a16:	1e02      	subs	r2, r0, #0
 8014a18:	65b8      	str	r0, [r7, #88]	; 0x58
 8014a1a:	d104      	bne.n	8014a26 <strtok+0x26>
 8014a1c:	2157      	movs	r1, #87	; 0x57
 8014a1e:	4b10      	ldr	r3, [pc, #64]	; (8014a60 <strtok+0x60>)
 8014a20:	4810      	ldr	r0, [pc, #64]	; (8014a64 <strtok+0x64>)
 8014a22:	f000 f8eb 	bl	8014bfc <__assert_func>
 8014a26:	6004      	str	r4, [r0, #0]
 8014a28:	6044      	str	r4, [r0, #4]
 8014a2a:	6084      	str	r4, [r0, #8]
 8014a2c:	60c4      	str	r4, [r0, #12]
 8014a2e:	6104      	str	r4, [r0, #16]
 8014a30:	6144      	str	r4, [r0, #20]
 8014a32:	6184      	str	r4, [r0, #24]
 8014a34:	6284      	str	r4, [r0, #40]	; 0x28
 8014a36:	62c4      	str	r4, [r0, #44]	; 0x2c
 8014a38:	6304      	str	r4, [r0, #48]	; 0x30
 8014a3a:	6344      	str	r4, [r0, #52]	; 0x34
 8014a3c:	6384      	str	r4, [r0, #56]	; 0x38
 8014a3e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8014a40:	6404      	str	r4, [r0, #64]	; 0x40
 8014a42:	6444      	str	r4, [r0, #68]	; 0x44
 8014a44:	6484      	str	r4, [r0, #72]	; 0x48
 8014a46:	64c4      	str	r4, [r0, #76]	; 0x4c
 8014a48:	7704      	strb	r4, [r0, #28]
 8014a4a:	6244      	str	r4, [r0, #36]	; 0x24
 8014a4c:	0031      	movs	r1, r6
 8014a4e:	0028      	movs	r0, r5
 8014a50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014a52:	2301      	movs	r3, #1
 8014a54:	f000 f808 	bl	8014a68 <__strtok_r>
 8014a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a5a:	46c0      	nop			; (mov r8, r8)
 8014a5c:	20000120 	.word	0x20000120
 8014a60:	0801ab9c 	.word	0x0801ab9c
 8014a64:	0801ac68 	.word	0x0801ac68

08014a68 <__strtok_r>:
 8014a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d102      	bne.n	8014a74 <__strtok_r+0xc>
 8014a6e:	6810      	ldr	r0, [r2, #0]
 8014a70:	2800      	cmp	r0, #0
 8014a72:	d013      	beq.n	8014a9c <__strtok_r+0x34>
 8014a74:	0004      	movs	r4, r0
 8014a76:	0020      	movs	r0, r4
 8014a78:	000e      	movs	r6, r1
 8014a7a:	7805      	ldrb	r5, [r0, #0]
 8014a7c:	3401      	adds	r4, #1
 8014a7e:	7837      	ldrb	r7, [r6, #0]
 8014a80:	2f00      	cmp	r7, #0
 8014a82:	d104      	bne.n	8014a8e <__strtok_r+0x26>
 8014a84:	2d00      	cmp	r5, #0
 8014a86:	d10f      	bne.n	8014aa8 <__strtok_r+0x40>
 8014a88:	0028      	movs	r0, r5
 8014a8a:	6015      	str	r5, [r2, #0]
 8014a8c:	e006      	b.n	8014a9c <__strtok_r+0x34>
 8014a8e:	3601      	adds	r6, #1
 8014a90:	42bd      	cmp	r5, r7
 8014a92:	d1f4      	bne.n	8014a7e <__strtok_r+0x16>
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d1ee      	bne.n	8014a76 <__strtok_r+0xe>
 8014a98:	6014      	str	r4, [r2, #0]
 8014a9a:	7003      	strb	r3, [r0, #0]
 8014a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a9e:	002f      	movs	r7, r5
 8014aa0:	e00f      	b.n	8014ac2 <__strtok_r+0x5a>
 8014aa2:	3301      	adds	r3, #1
 8014aa4:	2e00      	cmp	r6, #0
 8014aa6:	d104      	bne.n	8014ab2 <__strtok_r+0x4a>
 8014aa8:	0023      	movs	r3, r4
 8014aaa:	3401      	adds	r4, #1
 8014aac:	781d      	ldrb	r5, [r3, #0]
 8014aae:	0027      	movs	r7, r4
 8014ab0:	000b      	movs	r3, r1
 8014ab2:	781e      	ldrb	r6, [r3, #0]
 8014ab4:	42b5      	cmp	r5, r6
 8014ab6:	d1f4      	bne.n	8014aa2 <__strtok_r+0x3a>
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	d0f0      	beq.n	8014a9e <__strtok_r+0x36>
 8014abc:	2300      	movs	r3, #0
 8014abe:	3c01      	subs	r4, #1
 8014ac0:	7023      	strb	r3, [r4, #0]
 8014ac2:	6017      	str	r7, [r2, #0]
 8014ac4:	e7ea      	b.n	8014a9c <__strtok_r+0x34>
	...

08014ac8 <_strtol_l.isra.0>:
 8014ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aca:	b087      	sub	sp, #28
 8014acc:	001e      	movs	r6, r3
 8014ace:	9005      	str	r0, [sp, #20]
 8014ad0:	9101      	str	r1, [sp, #4]
 8014ad2:	9202      	str	r2, [sp, #8]
 8014ad4:	2b01      	cmp	r3, #1
 8014ad6:	d045      	beq.n	8014b64 <_strtol_l.isra.0+0x9c>
 8014ad8:	0008      	movs	r0, r1
 8014ada:	2b24      	cmp	r3, #36	; 0x24
 8014adc:	d842      	bhi.n	8014b64 <_strtol_l.isra.0+0x9c>
 8014ade:	4b3f      	ldr	r3, [pc, #252]	; (8014bdc <_strtol_l.isra.0+0x114>)
 8014ae0:	2208      	movs	r2, #8
 8014ae2:	469c      	mov	ip, r3
 8014ae4:	0003      	movs	r3, r0
 8014ae6:	4661      	mov	r1, ip
 8014ae8:	781c      	ldrb	r4, [r3, #0]
 8014aea:	1c45      	adds	r5, r0, #1
 8014aec:	5d09      	ldrb	r1, [r1, r4]
 8014aee:	0028      	movs	r0, r5
 8014af0:	000f      	movs	r7, r1
 8014af2:	4017      	ands	r7, r2
 8014af4:	4211      	tst	r1, r2
 8014af6:	d1f5      	bne.n	8014ae4 <_strtol_l.isra.0+0x1c>
 8014af8:	2c2d      	cmp	r4, #45	; 0x2d
 8014afa:	d13a      	bne.n	8014b72 <_strtol_l.isra.0+0xaa>
 8014afc:	2701      	movs	r7, #1
 8014afe:	782c      	ldrb	r4, [r5, #0]
 8014b00:	1c9d      	adds	r5, r3, #2
 8014b02:	2e00      	cmp	r6, #0
 8014b04:	d065      	beq.n	8014bd2 <_strtol_l.isra.0+0x10a>
 8014b06:	2e10      	cmp	r6, #16
 8014b08:	d109      	bne.n	8014b1e <_strtol_l.isra.0+0x56>
 8014b0a:	2c30      	cmp	r4, #48	; 0x30
 8014b0c:	d107      	bne.n	8014b1e <_strtol_l.isra.0+0x56>
 8014b0e:	2220      	movs	r2, #32
 8014b10:	782b      	ldrb	r3, [r5, #0]
 8014b12:	4393      	bics	r3, r2
 8014b14:	2b58      	cmp	r3, #88	; 0x58
 8014b16:	d157      	bne.n	8014bc8 <_strtol_l.isra.0+0x100>
 8014b18:	2610      	movs	r6, #16
 8014b1a:	786c      	ldrb	r4, [r5, #1]
 8014b1c:	3502      	adds	r5, #2
 8014b1e:	4b30      	ldr	r3, [pc, #192]	; (8014be0 <_strtol_l.isra.0+0x118>)
 8014b20:	0031      	movs	r1, r6
 8014b22:	18fb      	adds	r3, r7, r3
 8014b24:	0018      	movs	r0, r3
 8014b26:	9303      	str	r3, [sp, #12]
 8014b28:	f7eb fb98 	bl	800025c <__aeabi_uidivmod>
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	2201      	movs	r2, #1
 8014b30:	4684      	mov	ip, r0
 8014b32:	0018      	movs	r0, r3
 8014b34:	9104      	str	r1, [sp, #16]
 8014b36:	4252      	negs	r2, r2
 8014b38:	0021      	movs	r1, r4
 8014b3a:	3930      	subs	r1, #48	; 0x30
 8014b3c:	2909      	cmp	r1, #9
 8014b3e:	d81d      	bhi.n	8014b7c <_strtol_l.isra.0+0xb4>
 8014b40:	000c      	movs	r4, r1
 8014b42:	42a6      	cmp	r6, r4
 8014b44:	dd28      	ble.n	8014b98 <_strtol_l.isra.0+0xd0>
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	db24      	blt.n	8014b94 <_strtol_l.isra.0+0xcc>
 8014b4a:	0013      	movs	r3, r2
 8014b4c:	4584      	cmp	ip, r0
 8014b4e:	d306      	bcc.n	8014b5e <_strtol_l.isra.0+0x96>
 8014b50:	d102      	bne.n	8014b58 <_strtol_l.isra.0+0x90>
 8014b52:	9904      	ldr	r1, [sp, #16]
 8014b54:	42a1      	cmp	r1, r4
 8014b56:	db02      	blt.n	8014b5e <_strtol_l.isra.0+0x96>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	4370      	muls	r0, r6
 8014b5c:	1820      	adds	r0, r4, r0
 8014b5e:	782c      	ldrb	r4, [r5, #0]
 8014b60:	3501      	adds	r5, #1
 8014b62:	e7e9      	b.n	8014b38 <_strtol_l.isra.0+0x70>
 8014b64:	f000 ff12 	bl	801598c <__errno>
 8014b68:	2316      	movs	r3, #22
 8014b6a:	6003      	str	r3, [r0, #0]
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	b007      	add	sp, #28
 8014b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b72:	2c2b      	cmp	r4, #43	; 0x2b
 8014b74:	d1c5      	bne.n	8014b02 <_strtol_l.isra.0+0x3a>
 8014b76:	782c      	ldrb	r4, [r5, #0]
 8014b78:	1c9d      	adds	r5, r3, #2
 8014b7a:	e7c2      	b.n	8014b02 <_strtol_l.isra.0+0x3a>
 8014b7c:	0021      	movs	r1, r4
 8014b7e:	3941      	subs	r1, #65	; 0x41
 8014b80:	2919      	cmp	r1, #25
 8014b82:	d801      	bhi.n	8014b88 <_strtol_l.isra.0+0xc0>
 8014b84:	3c37      	subs	r4, #55	; 0x37
 8014b86:	e7dc      	b.n	8014b42 <_strtol_l.isra.0+0x7a>
 8014b88:	0021      	movs	r1, r4
 8014b8a:	3961      	subs	r1, #97	; 0x61
 8014b8c:	2919      	cmp	r1, #25
 8014b8e:	d803      	bhi.n	8014b98 <_strtol_l.isra.0+0xd0>
 8014b90:	3c57      	subs	r4, #87	; 0x57
 8014b92:	e7d6      	b.n	8014b42 <_strtol_l.isra.0+0x7a>
 8014b94:	0013      	movs	r3, r2
 8014b96:	e7e2      	b.n	8014b5e <_strtol_l.isra.0+0x96>
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	da09      	bge.n	8014bb0 <_strtol_l.isra.0+0xe8>
 8014b9c:	2322      	movs	r3, #34	; 0x22
 8014b9e:	9a05      	ldr	r2, [sp, #20]
 8014ba0:	9803      	ldr	r0, [sp, #12]
 8014ba2:	6013      	str	r3, [r2, #0]
 8014ba4:	9b02      	ldr	r3, [sp, #8]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d0e1      	beq.n	8014b6e <_strtol_l.isra.0+0xa6>
 8014baa:	1e6b      	subs	r3, r5, #1
 8014bac:	9301      	str	r3, [sp, #4]
 8014bae:	e007      	b.n	8014bc0 <_strtol_l.isra.0+0xf8>
 8014bb0:	2f00      	cmp	r7, #0
 8014bb2:	d000      	beq.n	8014bb6 <_strtol_l.isra.0+0xee>
 8014bb4:	4240      	negs	r0, r0
 8014bb6:	9a02      	ldr	r2, [sp, #8]
 8014bb8:	2a00      	cmp	r2, #0
 8014bba:	d0d8      	beq.n	8014b6e <_strtol_l.isra.0+0xa6>
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d1f4      	bne.n	8014baa <_strtol_l.isra.0+0xe2>
 8014bc0:	9b02      	ldr	r3, [sp, #8]
 8014bc2:	9a01      	ldr	r2, [sp, #4]
 8014bc4:	601a      	str	r2, [r3, #0]
 8014bc6:	e7d2      	b.n	8014b6e <_strtol_l.isra.0+0xa6>
 8014bc8:	2430      	movs	r4, #48	; 0x30
 8014bca:	2e00      	cmp	r6, #0
 8014bcc:	d1a7      	bne.n	8014b1e <_strtol_l.isra.0+0x56>
 8014bce:	3608      	adds	r6, #8
 8014bd0:	e7a5      	b.n	8014b1e <_strtol_l.isra.0+0x56>
 8014bd2:	2c30      	cmp	r4, #48	; 0x30
 8014bd4:	d09b      	beq.n	8014b0e <_strtol_l.isra.0+0x46>
 8014bd6:	260a      	movs	r6, #10
 8014bd8:	e7a1      	b.n	8014b1e <_strtol_l.isra.0+0x56>
 8014bda:	46c0      	nop			; (mov r8, r8)
 8014bdc:	0801aa61 	.word	0x0801aa61
 8014be0:	7fffffff 	.word	0x7fffffff

08014be4 <strtol>:
 8014be4:	b510      	push	{r4, lr}
 8014be6:	0013      	movs	r3, r2
 8014be8:	000a      	movs	r2, r1
 8014bea:	0001      	movs	r1, r0
 8014bec:	4802      	ldr	r0, [pc, #8]	; (8014bf8 <strtol+0x14>)
 8014bee:	6800      	ldr	r0, [r0, #0]
 8014bf0:	f7ff ff6a 	bl	8014ac8 <_strtol_l.isra.0>
 8014bf4:	bd10      	pop	{r4, pc}
 8014bf6:	46c0      	nop			; (mov r8, r8)
 8014bf8:	20000120 	.word	0x20000120

08014bfc <__assert_func>:
 8014bfc:	b530      	push	{r4, r5, lr}
 8014bfe:	0014      	movs	r4, r2
 8014c00:	001a      	movs	r2, r3
 8014c02:	4b09      	ldr	r3, [pc, #36]	; (8014c28 <__assert_func+0x2c>)
 8014c04:	0005      	movs	r5, r0
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	b085      	sub	sp, #20
 8014c0a:	68d8      	ldr	r0, [r3, #12]
 8014c0c:	4b07      	ldr	r3, [pc, #28]	; (8014c2c <__assert_func+0x30>)
 8014c0e:	2c00      	cmp	r4, #0
 8014c10:	d101      	bne.n	8014c16 <__assert_func+0x1a>
 8014c12:	4b07      	ldr	r3, [pc, #28]	; (8014c30 <__assert_func+0x34>)
 8014c14:	001c      	movs	r4, r3
 8014c16:	9301      	str	r3, [sp, #4]
 8014c18:	9100      	str	r1, [sp, #0]
 8014c1a:	002b      	movs	r3, r5
 8014c1c:	4905      	ldr	r1, [pc, #20]	; (8014c34 <__assert_func+0x38>)
 8014c1e:	9402      	str	r4, [sp, #8]
 8014c20:	f000 feba 	bl	8015998 <fiprintf>
 8014c24:	f002 fb10 	bl	8017248 <abort>
 8014c28:	20000120 	.word	0x20000120
 8014c2c:	0801acc9 	.word	0x0801acc9
 8014c30:	0801ad04 	.word	0x0801ad04
 8014c34:	0801acd6 	.word	0x0801acd6

08014c38 <quorem>:
 8014c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c3a:	0006      	movs	r6, r0
 8014c3c:	690d      	ldr	r5, [r1, #16]
 8014c3e:	6933      	ldr	r3, [r6, #16]
 8014c40:	b087      	sub	sp, #28
 8014c42:	2000      	movs	r0, #0
 8014c44:	9102      	str	r1, [sp, #8]
 8014c46:	42ab      	cmp	r3, r5
 8014c48:	db6b      	blt.n	8014d22 <quorem+0xea>
 8014c4a:	000b      	movs	r3, r1
 8014c4c:	3d01      	subs	r5, #1
 8014c4e:	00ac      	lsls	r4, r5, #2
 8014c50:	3314      	adds	r3, #20
 8014c52:	9305      	str	r3, [sp, #20]
 8014c54:	191b      	adds	r3, r3, r4
 8014c56:	9303      	str	r3, [sp, #12]
 8014c58:	0033      	movs	r3, r6
 8014c5a:	3314      	adds	r3, #20
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	191c      	adds	r4, r3, r4
 8014c60:	9b03      	ldr	r3, [sp, #12]
 8014c62:	6827      	ldr	r7, [r4, #0]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	0038      	movs	r0, r7
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	3301      	adds	r3, #1
 8014c6c:	0019      	movs	r1, r3
 8014c6e:	9304      	str	r3, [sp, #16]
 8014c70:	f7eb fa6e 	bl	8000150 <__udivsi3>
 8014c74:	9b04      	ldr	r3, [sp, #16]
 8014c76:	9000      	str	r0, [sp, #0]
 8014c78:	429f      	cmp	r7, r3
 8014c7a:	d329      	bcc.n	8014cd0 <quorem+0x98>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	469c      	mov	ip, r3
 8014c80:	9801      	ldr	r0, [sp, #4]
 8014c82:	9f05      	ldr	r7, [sp, #20]
 8014c84:	9304      	str	r3, [sp, #16]
 8014c86:	cf08      	ldmia	r7!, {r3}
 8014c88:	9a00      	ldr	r2, [sp, #0]
 8014c8a:	b299      	uxth	r1, r3
 8014c8c:	4351      	muls	r1, r2
 8014c8e:	0c1b      	lsrs	r3, r3, #16
 8014c90:	4353      	muls	r3, r2
 8014c92:	4461      	add	r1, ip
 8014c94:	0c0a      	lsrs	r2, r1, #16
 8014c96:	189b      	adds	r3, r3, r2
 8014c98:	0c1a      	lsrs	r2, r3, #16
 8014c9a:	9305      	str	r3, [sp, #20]
 8014c9c:	6803      	ldr	r3, [r0, #0]
 8014c9e:	4694      	mov	ip, r2
 8014ca0:	b29a      	uxth	r2, r3
 8014ca2:	9b04      	ldr	r3, [sp, #16]
 8014ca4:	b289      	uxth	r1, r1
 8014ca6:	18d2      	adds	r2, r2, r3
 8014ca8:	6803      	ldr	r3, [r0, #0]
 8014caa:	1a52      	subs	r2, r2, r1
 8014cac:	0c19      	lsrs	r1, r3, #16
 8014cae:	466b      	mov	r3, sp
 8014cb0:	8a9b      	ldrh	r3, [r3, #20]
 8014cb2:	1acb      	subs	r3, r1, r3
 8014cb4:	1411      	asrs	r1, r2, #16
 8014cb6:	185b      	adds	r3, r3, r1
 8014cb8:	1419      	asrs	r1, r3, #16
 8014cba:	b292      	uxth	r2, r2
 8014cbc:	041b      	lsls	r3, r3, #16
 8014cbe:	431a      	orrs	r2, r3
 8014cc0:	9b03      	ldr	r3, [sp, #12]
 8014cc2:	9104      	str	r1, [sp, #16]
 8014cc4:	c004      	stmia	r0!, {r2}
 8014cc6:	42bb      	cmp	r3, r7
 8014cc8:	d2dd      	bcs.n	8014c86 <quorem+0x4e>
 8014cca:	6823      	ldr	r3, [r4, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d02e      	beq.n	8014d2e <quorem+0xf6>
 8014cd0:	0030      	movs	r0, r6
 8014cd2:	9902      	ldr	r1, [sp, #8]
 8014cd4:	f001 fce6 	bl	80166a4 <__mcmp>
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	db21      	blt.n	8014d20 <quorem+0xe8>
 8014cdc:	0030      	movs	r0, r6
 8014cde:	2400      	movs	r4, #0
 8014ce0:	9b00      	ldr	r3, [sp, #0]
 8014ce2:	9902      	ldr	r1, [sp, #8]
 8014ce4:	3301      	adds	r3, #1
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	3014      	adds	r0, #20
 8014cea:	3114      	adds	r1, #20
 8014cec:	6802      	ldr	r2, [r0, #0]
 8014cee:	c908      	ldmia	r1!, {r3}
 8014cf0:	b292      	uxth	r2, r2
 8014cf2:	1914      	adds	r4, r2, r4
 8014cf4:	b29a      	uxth	r2, r3
 8014cf6:	1aa2      	subs	r2, r4, r2
 8014cf8:	6804      	ldr	r4, [r0, #0]
 8014cfa:	0c1b      	lsrs	r3, r3, #16
 8014cfc:	0c24      	lsrs	r4, r4, #16
 8014cfe:	1ae3      	subs	r3, r4, r3
 8014d00:	1414      	asrs	r4, r2, #16
 8014d02:	191b      	adds	r3, r3, r4
 8014d04:	141c      	asrs	r4, r3, #16
 8014d06:	b292      	uxth	r2, r2
 8014d08:	041b      	lsls	r3, r3, #16
 8014d0a:	4313      	orrs	r3, r2
 8014d0c:	c008      	stmia	r0!, {r3}
 8014d0e:	9b03      	ldr	r3, [sp, #12]
 8014d10:	428b      	cmp	r3, r1
 8014d12:	d2eb      	bcs.n	8014cec <quorem+0xb4>
 8014d14:	9a01      	ldr	r2, [sp, #4]
 8014d16:	00ab      	lsls	r3, r5, #2
 8014d18:	18d3      	adds	r3, r2, r3
 8014d1a:	681a      	ldr	r2, [r3, #0]
 8014d1c:	2a00      	cmp	r2, #0
 8014d1e:	d010      	beq.n	8014d42 <quorem+0x10a>
 8014d20:	9800      	ldr	r0, [sp, #0]
 8014d22:	b007      	add	sp, #28
 8014d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d104      	bne.n	8014d36 <quorem+0xfe>
 8014d2c:	3d01      	subs	r5, #1
 8014d2e:	9b01      	ldr	r3, [sp, #4]
 8014d30:	3c04      	subs	r4, #4
 8014d32:	42a3      	cmp	r3, r4
 8014d34:	d3f7      	bcc.n	8014d26 <quorem+0xee>
 8014d36:	6135      	str	r5, [r6, #16]
 8014d38:	e7ca      	b.n	8014cd0 <quorem+0x98>
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	2a00      	cmp	r2, #0
 8014d3e:	d104      	bne.n	8014d4a <quorem+0x112>
 8014d40:	3d01      	subs	r5, #1
 8014d42:	9a01      	ldr	r2, [sp, #4]
 8014d44:	3b04      	subs	r3, #4
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d3f7      	bcc.n	8014d3a <quorem+0x102>
 8014d4a:	6135      	str	r5, [r6, #16]
 8014d4c:	e7e8      	b.n	8014d20 <quorem+0xe8>
	...

08014d50 <_dtoa_r>:
 8014d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d52:	b09d      	sub	sp, #116	; 0x74
 8014d54:	9202      	str	r2, [sp, #8]
 8014d56:	9303      	str	r3, [sp, #12]
 8014d58:	9b02      	ldr	r3, [sp, #8]
 8014d5a:	9c03      	ldr	r4, [sp, #12]
 8014d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8014d5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8014d60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014d62:	0007      	movs	r7, r0
 8014d64:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8014d66:	2c00      	cmp	r4, #0
 8014d68:	d10e      	bne.n	8014d88 <_dtoa_r+0x38>
 8014d6a:	2010      	movs	r0, #16
 8014d6c:	f7fe f9b2 	bl	80130d4 <malloc>
 8014d70:	1e02      	subs	r2, r0, #0
 8014d72:	6278      	str	r0, [r7, #36]	; 0x24
 8014d74:	d104      	bne.n	8014d80 <_dtoa_r+0x30>
 8014d76:	21ea      	movs	r1, #234	; 0xea
 8014d78:	4bc0      	ldr	r3, [pc, #768]	; (801507c <_dtoa_r+0x32c>)
 8014d7a:	48c1      	ldr	r0, [pc, #772]	; (8015080 <_dtoa_r+0x330>)
 8014d7c:	f7ff ff3e 	bl	8014bfc <__assert_func>
 8014d80:	6044      	str	r4, [r0, #4]
 8014d82:	6084      	str	r4, [r0, #8]
 8014d84:	6004      	str	r4, [r0, #0]
 8014d86:	60c4      	str	r4, [r0, #12]
 8014d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d8a:	6819      	ldr	r1, [r3, #0]
 8014d8c:	2900      	cmp	r1, #0
 8014d8e:	d00a      	beq.n	8014da6 <_dtoa_r+0x56>
 8014d90:	685a      	ldr	r2, [r3, #4]
 8014d92:	2301      	movs	r3, #1
 8014d94:	4093      	lsls	r3, r2
 8014d96:	604a      	str	r2, [r1, #4]
 8014d98:	608b      	str	r3, [r1, #8]
 8014d9a:	0038      	movs	r0, r7
 8014d9c:	f001 f9f4 	bl	8016188 <_Bfree>
 8014da0:	2200      	movs	r2, #0
 8014da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da4:	601a      	str	r2, [r3, #0]
 8014da6:	9b03      	ldr	r3, [sp, #12]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	da21      	bge.n	8014df0 <_dtoa_r+0xa0>
 8014dac:	2301      	movs	r3, #1
 8014dae:	602b      	str	r3, [r5, #0]
 8014db0:	9b03      	ldr	r3, [sp, #12]
 8014db2:	005b      	lsls	r3, r3, #1
 8014db4:	085b      	lsrs	r3, r3, #1
 8014db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014db8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014dba:	4bb2      	ldr	r3, [pc, #712]	; (8015084 <_dtoa_r+0x334>)
 8014dbc:	002a      	movs	r2, r5
 8014dbe:	9318      	str	r3, [sp, #96]	; 0x60
 8014dc0:	401a      	ands	r2, r3
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d117      	bne.n	8014df6 <_dtoa_r+0xa6>
 8014dc6:	4bb0      	ldr	r3, [pc, #704]	; (8015088 <_dtoa_r+0x338>)
 8014dc8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014dca:	0328      	lsls	r0, r5, #12
 8014dcc:	6013      	str	r3, [r2, #0]
 8014dce:	9b02      	ldr	r3, [sp, #8]
 8014dd0:	0b00      	lsrs	r0, r0, #12
 8014dd2:	4318      	orrs	r0, r3
 8014dd4:	d101      	bne.n	8014dda <_dtoa_r+0x8a>
 8014dd6:	f000 fdc3 	bl	8015960 <_dtoa_r+0xc10>
 8014dda:	48ac      	ldr	r0, [pc, #688]	; (801508c <_dtoa_r+0x33c>)
 8014ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014dde:	9005      	str	r0, [sp, #20]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d002      	beq.n	8014dea <_dtoa_r+0x9a>
 8014de4:	4baa      	ldr	r3, [pc, #680]	; (8015090 <_dtoa_r+0x340>)
 8014de6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	9805      	ldr	r0, [sp, #20]
 8014dec:	b01d      	add	sp, #116	; 0x74
 8014dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014df0:	2300      	movs	r3, #0
 8014df2:	602b      	str	r3, [r5, #0]
 8014df4:	e7e0      	b.n	8014db8 <_dtoa_r+0x68>
 8014df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014dfa:	9312      	str	r3, [sp, #72]	; 0x48
 8014dfc:	9413      	str	r4, [sp, #76]	; 0x4c
 8014dfe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014e00:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014e02:	2200      	movs	r2, #0
 8014e04:	2300      	movs	r3, #0
 8014e06:	f7eb fb29 	bl	800045c <__aeabi_dcmpeq>
 8014e0a:	1e04      	subs	r4, r0, #0
 8014e0c:	d00b      	beq.n	8014e26 <_dtoa_r+0xd6>
 8014e0e:	2301      	movs	r3, #1
 8014e10:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014e12:	6013      	str	r3, [r2, #0]
 8014e14:	4b9f      	ldr	r3, [pc, #636]	; (8015094 <_dtoa_r+0x344>)
 8014e16:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8014e18:	9305      	str	r3, [sp, #20]
 8014e1a:	2a00      	cmp	r2, #0
 8014e1c:	d0e5      	beq.n	8014dea <_dtoa_r+0x9a>
 8014e1e:	4a9e      	ldr	r2, [pc, #632]	; (8015098 <_dtoa_r+0x348>)
 8014e20:	9926      	ldr	r1, [sp, #152]	; 0x98
 8014e22:	600a      	str	r2, [r1, #0]
 8014e24:	e7e1      	b.n	8014dea <_dtoa_r+0x9a>
 8014e26:	ab1a      	add	r3, sp, #104	; 0x68
 8014e28:	9301      	str	r3, [sp, #4]
 8014e2a:	ab1b      	add	r3, sp, #108	; 0x6c
 8014e2c:	9300      	str	r3, [sp, #0]
 8014e2e:	0038      	movs	r0, r7
 8014e30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e34:	f001 fd5e 	bl	80168f4 <__d2b>
 8014e38:	006e      	lsls	r6, r5, #1
 8014e3a:	9004      	str	r0, [sp, #16]
 8014e3c:	0d76      	lsrs	r6, r6, #21
 8014e3e:	d100      	bne.n	8014e42 <_dtoa_r+0xf2>
 8014e40:	e07c      	b.n	8014f3c <_dtoa_r+0x1ec>
 8014e42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014e44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014e46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014e48:	4a94      	ldr	r2, [pc, #592]	; (801509c <_dtoa_r+0x34c>)
 8014e4a:	031b      	lsls	r3, r3, #12
 8014e4c:	0b1b      	lsrs	r3, r3, #12
 8014e4e:	431a      	orrs	r2, r3
 8014e50:	0011      	movs	r1, r2
 8014e52:	4b93      	ldr	r3, [pc, #588]	; (80150a0 <_dtoa_r+0x350>)
 8014e54:	9416      	str	r4, [sp, #88]	; 0x58
 8014e56:	18f6      	adds	r6, r6, r3
 8014e58:	2200      	movs	r2, #0
 8014e5a:	4b92      	ldr	r3, [pc, #584]	; (80150a4 <_dtoa_r+0x354>)
 8014e5c:	f7ed f9f8 	bl	8002250 <__aeabi_dsub>
 8014e60:	4a91      	ldr	r2, [pc, #580]	; (80150a8 <_dtoa_r+0x358>)
 8014e62:	4b92      	ldr	r3, [pc, #584]	; (80150ac <_dtoa_r+0x35c>)
 8014e64:	f7ec ff88 	bl	8001d78 <__aeabi_dmul>
 8014e68:	4a91      	ldr	r2, [pc, #580]	; (80150b0 <_dtoa_r+0x360>)
 8014e6a:	4b92      	ldr	r3, [pc, #584]	; (80150b4 <_dtoa_r+0x364>)
 8014e6c:	f7ec f814 	bl	8000e98 <__aeabi_dadd>
 8014e70:	0004      	movs	r4, r0
 8014e72:	0030      	movs	r0, r6
 8014e74:	000d      	movs	r5, r1
 8014e76:	f7ed fdd1 	bl	8002a1c <__aeabi_i2d>
 8014e7a:	4a8f      	ldr	r2, [pc, #572]	; (80150b8 <_dtoa_r+0x368>)
 8014e7c:	4b8f      	ldr	r3, [pc, #572]	; (80150bc <_dtoa_r+0x36c>)
 8014e7e:	f7ec ff7b 	bl	8001d78 <__aeabi_dmul>
 8014e82:	0002      	movs	r2, r0
 8014e84:	000b      	movs	r3, r1
 8014e86:	0020      	movs	r0, r4
 8014e88:	0029      	movs	r1, r5
 8014e8a:	f7ec f805 	bl	8000e98 <__aeabi_dadd>
 8014e8e:	0004      	movs	r4, r0
 8014e90:	000d      	movs	r5, r1
 8014e92:	f7ed fd8d 	bl	80029b0 <__aeabi_d2iz>
 8014e96:	2200      	movs	r2, #0
 8014e98:	9002      	str	r0, [sp, #8]
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	0020      	movs	r0, r4
 8014e9e:	0029      	movs	r1, r5
 8014ea0:	f7eb fae2 	bl	8000468 <__aeabi_dcmplt>
 8014ea4:	2800      	cmp	r0, #0
 8014ea6:	d00b      	beq.n	8014ec0 <_dtoa_r+0x170>
 8014ea8:	9802      	ldr	r0, [sp, #8]
 8014eaa:	f7ed fdb7 	bl	8002a1c <__aeabi_i2d>
 8014eae:	002b      	movs	r3, r5
 8014eb0:	0022      	movs	r2, r4
 8014eb2:	f7eb fad3 	bl	800045c <__aeabi_dcmpeq>
 8014eb6:	4243      	negs	r3, r0
 8014eb8:	4158      	adcs	r0, r3
 8014eba:	9b02      	ldr	r3, [sp, #8]
 8014ebc:	1a1b      	subs	r3, r3, r0
 8014ebe:	9302      	str	r3, [sp, #8]
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	9315      	str	r3, [sp, #84]	; 0x54
 8014ec4:	9b02      	ldr	r3, [sp, #8]
 8014ec6:	2b16      	cmp	r3, #22
 8014ec8:	d80f      	bhi.n	8014eea <_dtoa_r+0x19a>
 8014eca:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014ecc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014ece:	00da      	lsls	r2, r3, #3
 8014ed0:	4b7b      	ldr	r3, [pc, #492]	; (80150c0 <_dtoa_r+0x370>)
 8014ed2:	189b      	adds	r3, r3, r2
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	685b      	ldr	r3, [r3, #4]
 8014ed8:	f7eb fac6 	bl	8000468 <__aeabi_dcmplt>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d049      	beq.n	8014f74 <_dtoa_r+0x224>
 8014ee0:	9b02      	ldr	r3, [sp, #8]
 8014ee2:	3b01      	subs	r3, #1
 8014ee4:	9302      	str	r3, [sp, #8]
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	9315      	str	r3, [sp, #84]	; 0x54
 8014eea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014eec:	1b9e      	subs	r6, r3, r6
 8014eee:	2300      	movs	r3, #0
 8014ef0:	9308      	str	r3, [sp, #32]
 8014ef2:	0033      	movs	r3, r6
 8014ef4:	3b01      	subs	r3, #1
 8014ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8014ef8:	d504      	bpl.n	8014f04 <_dtoa_r+0x1b4>
 8014efa:	2301      	movs	r3, #1
 8014efc:	1b9b      	subs	r3, r3, r6
 8014efe:	9308      	str	r3, [sp, #32]
 8014f00:	2300      	movs	r3, #0
 8014f02:	930d      	str	r3, [sp, #52]	; 0x34
 8014f04:	9b02      	ldr	r3, [sp, #8]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	db36      	blt.n	8014f78 <_dtoa_r+0x228>
 8014f0a:	9a02      	ldr	r2, [sp, #8]
 8014f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014f0e:	4694      	mov	ip, r2
 8014f10:	4463      	add	r3, ip
 8014f12:	930d      	str	r3, [sp, #52]	; 0x34
 8014f14:	2300      	movs	r3, #0
 8014f16:	9214      	str	r2, [sp, #80]	; 0x50
 8014f18:	930e      	str	r3, [sp, #56]	; 0x38
 8014f1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014f1c:	2401      	movs	r4, #1
 8014f1e:	2b09      	cmp	r3, #9
 8014f20:	d862      	bhi.n	8014fe8 <_dtoa_r+0x298>
 8014f22:	2b05      	cmp	r3, #5
 8014f24:	dd02      	ble.n	8014f2c <_dtoa_r+0x1dc>
 8014f26:	2400      	movs	r4, #0
 8014f28:	3b04      	subs	r3, #4
 8014f2a:	9322      	str	r3, [sp, #136]	; 0x88
 8014f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014f2e:	1e98      	subs	r0, r3, #2
 8014f30:	2803      	cmp	r0, #3
 8014f32:	d862      	bhi.n	8014ffa <_dtoa_r+0x2aa>
 8014f34:	f7eb f8f8 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014f38:	56343629 	.word	0x56343629
 8014f3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014f3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014f40:	189e      	adds	r6, r3, r2
 8014f42:	4b60      	ldr	r3, [pc, #384]	; (80150c4 <_dtoa_r+0x374>)
 8014f44:	18f2      	adds	r2, r6, r3
 8014f46:	2a20      	cmp	r2, #32
 8014f48:	dd0f      	ble.n	8014f6a <_dtoa_r+0x21a>
 8014f4a:	2340      	movs	r3, #64	; 0x40
 8014f4c:	1a9b      	subs	r3, r3, r2
 8014f4e:	409d      	lsls	r5, r3
 8014f50:	4b5d      	ldr	r3, [pc, #372]	; (80150c8 <_dtoa_r+0x378>)
 8014f52:	9802      	ldr	r0, [sp, #8]
 8014f54:	18f3      	adds	r3, r6, r3
 8014f56:	40d8      	lsrs	r0, r3
 8014f58:	4328      	orrs	r0, r5
 8014f5a:	f7ed fd8f 	bl	8002a7c <__aeabi_ui2d>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	4c5a      	ldr	r4, [pc, #360]	; (80150cc <_dtoa_r+0x37c>)
 8014f62:	3e01      	subs	r6, #1
 8014f64:	1909      	adds	r1, r1, r4
 8014f66:	9316      	str	r3, [sp, #88]	; 0x58
 8014f68:	e776      	b.n	8014e58 <_dtoa_r+0x108>
 8014f6a:	2320      	movs	r3, #32
 8014f6c:	9802      	ldr	r0, [sp, #8]
 8014f6e:	1a9b      	subs	r3, r3, r2
 8014f70:	4098      	lsls	r0, r3
 8014f72:	e7f2      	b.n	8014f5a <_dtoa_r+0x20a>
 8014f74:	9015      	str	r0, [sp, #84]	; 0x54
 8014f76:	e7b8      	b.n	8014eea <_dtoa_r+0x19a>
 8014f78:	9b08      	ldr	r3, [sp, #32]
 8014f7a:	9a02      	ldr	r2, [sp, #8]
 8014f7c:	1a9b      	subs	r3, r3, r2
 8014f7e:	9308      	str	r3, [sp, #32]
 8014f80:	4253      	negs	r3, r2
 8014f82:	930e      	str	r3, [sp, #56]	; 0x38
 8014f84:	2300      	movs	r3, #0
 8014f86:	9314      	str	r3, [sp, #80]	; 0x50
 8014f88:	e7c7      	b.n	8014f1a <_dtoa_r+0x1ca>
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	dc36      	bgt.n	8015002 <_dtoa_r+0x2b2>
 8014f94:	2301      	movs	r3, #1
 8014f96:	001a      	movs	r2, r3
 8014f98:	930c      	str	r3, [sp, #48]	; 0x30
 8014f9a:	9306      	str	r3, [sp, #24]
 8014f9c:	9223      	str	r2, [sp, #140]	; 0x8c
 8014f9e:	e00d      	b.n	8014fbc <_dtoa_r+0x26c>
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	e7f3      	b.n	8014f8c <_dtoa_r+0x23c>
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8014fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014faa:	4694      	mov	ip, r2
 8014fac:	9b02      	ldr	r3, [sp, #8]
 8014fae:	4463      	add	r3, ip
 8014fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	9306      	str	r3, [sp, #24]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dc00      	bgt.n	8014fbc <_dtoa_r+0x26c>
 8014fba:	2301      	movs	r3, #1
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fc0:	6042      	str	r2, [r0, #4]
 8014fc2:	3204      	adds	r2, #4
 8014fc4:	0015      	movs	r5, r2
 8014fc6:	3514      	adds	r5, #20
 8014fc8:	6841      	ldr	r1, [r0, #4]
 8014fca:	429d      	cmp	r5, r3
 8014fcc:	d91d      	bls.n	801500a <_dtoa_r+0x2ba>
 8014fce:	0038      	movs	r0, r7
 8014fd0:	f001 f896 	bl	8016100 <_Balloc>
 8014fd4:	9005      	str	r0, [sp, #20]
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d11b      	bne.n	8015012 <_dtoa_r+0x2c2>
 8014fda:	21d5      	movs	r1, #213	; 0xd5
 8014fdc:	0002      	movs	r2, r0
 8014fde:	4b3c      	ldr	r3, [pc, #240]	; (80150d0 <_dtoa_r+0x380>)
 8014fe0:	0049      	lsls	r1, r1, #1
 8014fe2:	e6ca      	b.n	8014d7a <_dtoa_r+0x2a>
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	e7de      	b.n	8014fa6 <_dtoa_r+0x256>
 8014fe8:	2300      	movs	r3, #0
 8014fea:	940f      	str	r4, [sp, #60]	; 0x3c
 8014fec:	9322      	str	r3, [sp, #136]	; 0x88
 8014fee:	3b01      	subs	r3, #1
 8014ff0:	930c      	str	r3, [sp, #48]	; 0x30
 8014ff2:	9306      	str	r3, [sp, #24]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	3313      	adds	r3, #19
 8014ff8:	e7d0      	b.n	8014f9c <_dtoa_r+0x24c>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ffe:	3b02      	subs	r3, #2
 8015000:	e7f6      	b.n	8014ff0 <_dtoa_r+0x2a0>
 8015002:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015004:	930c      	str	r3, [sp, #48]	; 0x30
 8015006:	9306      	str	r3, [sp, #24]
 8015008:	e7d8      	b.n	8014fbc <_dtoa_r+0x26c>
 801500a:	3101      	adds	r1, #1
 801500c:	6041      	str	r1, [r0, #4]
 801500e:	0052      	lsls	r2, r2, #1
 8015010:	e7d8      	b.n	8014fc4 <_dtoa_r+0x274>
 8015012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015014:	9a05      	ldr	r2, [sp, #20]
 8015016:	601a      	str	r2, [r3, #0]
 8015018:	9b06      	ldr	r3, [sp, #24]
 801501a:	2b0e      	cmp	r3, #14
 801501c:	d900      	bls.n	8015020 <_dtoa_r+0x2d0>
 801501e:	e0eb      	b.n	80151f8 <_dtoa_r+0x4a8>
 8015020:	2c00      	cmp	r4, #0
 8015022:	d100      	bne.n	8015026 <_dtoa_r+0x2d6>
 8015024:	e0e8      	b.n	80151f8 <_dtoa_r+0x4a8>
 8015026:	9b02      	ldr	r3, [sp, #8]
 8015028:	2b00      	cmp	r3, #0
 801502a:	dd68      	ble.n	80150fe <_dtoa_r+0x3ae>
 801502c:	001a      	movs	r2, r3
 801502e:	210f      	movs	r1, #15
 8015030:	4b23      	ldr	r3, [pc, #140]	; (80150c0 <_dtoa_r+0x370>)
 8015032:	400a      	ands	r2, r1
 8015034:	00d2      	lsls	r2, r2, #3
 8015036:	189b      	adds	r3, r3, r2
 8015038:	681d      	ldr	r5, [r3, #0]
 801503a:	685e      	ldr	r6, [r3, #4]
 801503c:	9b02      	ldr	r3, [sp, #8]
 801503e:	111c      	asrs	r4, r3, #4
 8015040:	2302      	movs	r3, #2
 8015042:	9310      	str	r3, [sp, #64]	; 0x40
 8015044:	9b02      	ldr	r3, [sp, #8]
 8015046:	05db      	lsls	r3, r3, #23
 8015048:	d50b      	bpl.n	8015062 <_dtoa_r+0x312>
 801504a:	4b22      	ldr	r3, [pc, #136]	; (80150d4 <_dtoa_r+0x384>)
 801504c:	400c      	ands	r4, r1
 801504e:	6a1a      	ldr	r2, [r3, #32]
 8015050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015052:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015054:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8015056:	f7ec fa89 	bl	800156c <__aeabi_ddiv>
 801505a:	2303      	movs	r3, #3
 801505c:	900a      	str	r0, [sp, #40]	; 0x28
 801505e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015060:	9310      	str	r3, [sp, #64]	; 0x40
 8015062:	4b1c      	ldr	r3, [pc, #112]	; (80150d4 <_dtoa_r+0x384>)
 8015064:	9307      	str	r3, [sp, #28]
 8015066:	2c00      	cmp	r4, #0
 8015068:	d136      	bne.n	80150d8 <_dtoa_r+0x388>
 801506a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801506c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801506e:	002a      	movs	r2, r5
 8015070:	0033      	movs	r3, r6
 8015072:	f7ec fa7b 	bl	800156c <__aeabi_ddiv>
 8015076:	900a      	str	r0, [sp, #40]	; 0x28
 8015078:	910b      	str	r1, [sp, #44]	; 0x2c
 801507a:	e05c      	b.n	8015136 <_dtoa_r+0x3e6>
 801507c:	0801ab9c 	.word	0x0801ab9c
 8015080:	0801ad12 	.word	0x0801ad12
 8015084:	7ff00000 	.word	0x7ff00000
 8015088:	0000270f 	.word	0x0000270f
 801508c:	0801ad0e 	.word	0x0801ad0e
 8015090:	0801ad11 	.word	0x0801ad11
 8015094:	0801ab78 	.word	0x0801ab78
 8015098:	0801ab79 	.word	0x0801ab79
 801509c:	3ff00000 	.word	0x3ff00000
 80150a0:	fffffc01 	.word	0xfffffc01
 80150a4:	3ff80000 	.word	0x3ff80000
 80150a8:	636f4361 	.word	0x636f4361
 80150ac:	3fd287a7 	.word	0x3fd287a7
 80150b0:	8b60c8b3 	.word	0x8b60c8b3
 80150b4:	3fc68a28 	.word	0x3fc68a28
 80150b8:	509f79fb 	.word	0x509f79fb
 80150bc:	3fd34413 	.word	0x3fd34413
 80150c0:	0801ae88 	.word	0x0801ae88
 80150c4:	00000432 	.word	0x00000432
 80150c8:	00000412 	.word	0x00000412
 80150cc:	fe100000 	.word	0xfe100000
 80150d0:	0801ad71 	.word	0x0801ad71
 80150d4:	0801ae60 	.word	0x0801ae60
 80150d8:	2301      	movs	r3, #1
 80150da:	421c      	tst	r4, r3
 80150dc:	d00b      	beq.n	80150f6 <_dtoa_r+0x3a6>
 80150de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80150e0:	0028      	movs	r0, r5
 80150e2:	3301      	adds	r3, #1
 80150e4:	9310      	str	r3, [sp, #64]	; 0x40
 80150e6:	9b07      	ldr	r3, [sp, #28]
 80150e8:	0031      	movs	r1, r6
 80150ea:	681a      	ldr	r2, [r3, #0]
 80150ec:	685b      	ldr	r3, [r3, #4]
 80150ee:	f7ec fe43 	bl	8001d78 <__aeabi_dmul>
 80150f2:	0005      	movs	r5, r0
 80150f4:	000e      	movs	r6, r1
 80150f6:	9b07      	ldr	r3, [sp, #28]
 80150f8:	1064      	asrs	r4, r4, #1
 80150fa:	3308      	adds	r3, #8
 80150fc:	e7b2      	b.n	8015064 <_dtoa_r+0x314>
 80150fe:	2302      	movs	r3, #2
 8015100:	9310      	str	r3, [sp, #64]	; 0x40
 8015102:	9b02      	ldr	r3, [sp, #8]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d016      	beq.n	8015136 <_dtoa_r+0x3e6>
 8015108:	9812      	ldr	r0, [sp, #72]	; 0x48
 801510a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801510c:	425c      	negs	r4, r3
 801510e:	230f      	movs	r3, #15
 8015110:	4ab5      	ldr	r2, [pc, #724]	; (80153e8 <_dtoa_r+0x698>)
 8015112:	4023      	ands	r3, r4
 8015114:	00db      	lsls	r3, r3, #3
 8015116:	18d3      	adds	r3, r2, r3
 8015118:	681a      	ldr	r2, [r3, #0]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	f7ec fe2c 	bl	8001d78 <__aeabi_dmul>
 8015120:	2601      	movs	r6, #1
 8015122:	2300      	movs	r3, #0
 8015124:	900a      	str	r0, [sp, #40]	; 0x28
 8015126:	910b      	str	r1, [sp, #44]	; 0x2c
 8015128:	4db0      	ldr	r5, [pc, #704]	; (80153ec <_dtoa_r+0x69c>)
 801512a:	1124      	asrs	r4, r4, #4
 801512c:	2c00      	cmp	r4, #0
 801512e:	d000      	beq.n	8015132 <_dtoa_r+0x3e2>
 8015130:	e094      	b.n	801525c <_dtoa_r+0x50c>
 8015132:	2b00      	cmp	r3, #0
 8015134:	d19f      	bne.n	8015076 <_dtoa_r+0x326>
 8015136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015138:	2b00      	cmp	r3, #0
 801513a:	d100      	bne.n	801513e <_dtoa_r+0x3ee>
 801513c:	e09b      	b.n	8015276 <_dtoa_r+0x526>
 801513e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015140:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015142:	2200      	movs	r2, #0
 8015144:	0020      	movs	r0, r4
 8015146:	0029      	movs	r1, r5
 8015148:	4ba9      	ldr	r3, [pc, #676]	; (80153f0 <_dtoa_r+0x6a0>)
 801514a:	f7eb f98d 	bl	8000468 <__aeabi_dcmplt>
 801514e:	2800      	cmp	r0, #0
 8015150:	d100      	bne.n	8015154 <_dtoa_r+0x404>
 8015152:	e090      	b.n	8015276 <_dtoa_r+0x526>
 8015154:	9b06      	ldr	r3, [sp, #24]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d100      	bne.n	801515c <_dtoa_r+0x40c>
 801515a:	e08c      	b.n	8015276 <_dtoa_r+0x526>
 801515c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801515e:	2b00      	cmp	r3, #0
 8015160:	dd46      	ble.n	80151f0 <_dtoa_r+0x4a0>
 8015162:	9b02      	ldr	r3, [sp, #8]
 8015164:	2200      	movs	r2, #0
 8015166:	0020      	movs	r0, r4
 8015168:	0029      	movs	r1, r5
 801516a:	1e5e      	subs	r6, r3, #1
 801516c:	4ba1      	ldr	r3, [pc, #644]	; (80153f4 <_dtoa_r+0x6a4>)
 801516e:	f7ec fe03 	bl	8001d78 <__aeabi_dmul>
 8015172:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015174:	900a      	str	r0, [sp, #40]	; 0x28
 8015176:	910b      	str	r1, [sp, #44]	; 0x2c
 8015178:	3301      	adds	r3, #1
 801517a:	9310      	str	r3, [sp, #64]	; 0x40
 801517c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801517e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015180:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015182:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015184:	9307      	str	r3, [sp, #28]
 8015186:	f7ed fc49 	bl	8002a1c <__aeabi_i2d>
 801518a:	0022      	movs	r2, r4
 801518c:	002b      	movs	r3, r5
 801518e:	f7ec fdf3 	bl	8001d78 <__aeabi_dmul>
 8015192:	2200      	movs	r2, #0
 8015194:	4b98      	ldr	r3, [pc, #608]	; (80153f8 <_dtoa_r+0x6a8>)
 8015196:	f7eb fe7f 	bl	8000e98 <__aeabi_dadd>
 801519a:	9010      	str	r0, [sp, #64]	; 0x40
 801519c:	9111      	str	r1, [sp, #68]	; 0x44
 801519e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80151a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151a2:	920a      	str	r2, [sp, #40]	; 0x28
 80151a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80151a6:	4a95      	ldr	r2, [pc, #596]	; (80153fc <_dtoa_r+0x6ac>)
 80151a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151aa:	4694      	mov	ip, r2
 80151ac:	4463      	add	r3, ip
 80151ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80151b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80151b2:	9b07      	ldr	r3, [sp, #28]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d161      	bne.n	801527c <_dtoa_r+0x52c>
 80151b8:	2200      	movs	r2, #0
 80151ba:	0020      	movs	r0, r4
 80151bc:	0029      	movs	r1, r5
 80151be:	4b90      	ldr	r3, [pc, #576]	; (8015400 <_dtoa_r+0x6b0>)
 80151c0:	f7ed f846 	bl	8002250 <__aeabi_dsub>
 80151c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80151c8:	0004      	movs	r4, r0
 80151ca:	000d      	movs	r5, r1
 80151cc:	f7eb f960 	bl	8000490 <__aeabi_dcmpgt>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d000      	beq.n	80151d6 <_dtoa_r+0x486>
 80151d4:	e2b5      	b.n	8015742 <_dtoa_r+0x9f2>
 80151d6:	488b      	ldr	r0, [pc, #556]	; (8015404 <_dtoa_r+0x6b4>)
 80151d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80151da:	4684      	mov	ip, r0
 80151dc:	4461      	add	r1, ip
 80151de:	000b      	movs	r3, r1
 80151e0:	0020      	movs	r0, r4
 80151e2:	0029      	movs	r1, r5
 80151e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151e6:	f7eb f93f 	bl	8000468 <__aeabi_dcmplt>
 80151ea:	2800      	cmp	r0, #0
 80151ec:	d000      	beq.n	80151f0 <_dtoa_r+0x4a0>
 80151ee:	e2a5      	b.n	801573c <_dtoa_r+0x9ec>
 80151f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80151f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80151f4:	930a      	str	r3, [sp, #40]	; 0x28
 80151f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80151f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	da00      	bge.n	8015200 <_dtoa_r+0x4b0>
 80151fe:	e171      	b.n	80154e4 <_dtoa_r+0x794>
 8015200:	9a02      	ldr	r2, [sp, #8]
 8015202:	2a0e      	cmp	r2, #14
 8015204:	dd00      	ble.n	8015208 <_dtoa_r+0x4b8>
 8015206:	e16d      	b.n	80154e4 <_dtoa_r+0x794>
 8015208:	4b77      	ldr	r3, [pc, #476]	; (80153e8 <_dtoa_r+0x698>)
 801520a:	00d2      	lsls	r2, r2, #3
 801520c:	189b      	adds	r3, r3, r2
 801520e:	685c      	ldr	r4, [r3, #4]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	9308      	str	r3, [sp, #32]
 8015214:	9409      	str	r4, [sp, #36]	; 0x24
 8015216:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015218:	2b00      	cmp	r3, #0
 801521a:	db00      	blt.n	801521e <_dtoa_r+0x4ce>
 801521c:	e0f6      	b.n	801540c <_dtoa_r+0x6bc>
 801521e:	9b06      	ldr	r3, [sp, #24]
 8015220:	2b00      	cmp	r3, #0
 8015222:	dd00      	ble.n	8015226 <_dtoa_r+0x4d6>
 8015224:	e0f2      	b.n	801540c <_dtoa_r+0x6bc>
 8015226:	d000      	beq.n	801522a <_dtoa_r+0x4da>
 8015228:	e288      	b.n	801573c <_dtoa_r+0x9ec>
 801522a:	9808      	ldr	r0, [sp, #32]
 801522c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801522e:	2200      	movs	r2, #0
 8015230:	4b73      	ldr	r3, [pc, #460]	; (8015400 <_dtoa_r+0x6b0>)
 8015232:	f7ec fda1 	bl	8001d78 <__aeabi_dmul>
 8015236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801523a:	f7eb f933 	bl	80004a4 <__aeabi_dcmpge>
 801523e:	9e06      	ldr	r6, [sp, #24]
 8015240:	0035      	movs	r5, r6
 8015242:	2800      	cmp	r0, #0
 8015244:	d000      	beq.n	8015248 <_dtoa_r+0x4f8>
 8015246:	e25f      	b.n	8015708 <_dtoa_r+0x9b8>
 8015248:	9b05      	ldr	r3, [sp, #20]
 801524a:	9a05      	ldr	r2, [sp, #20]
 801524c:	3301      	adds	r3, #1
 801524e:	9307      	str	r3, [sp, #28]
 8015250:	2331      	movs	r3, #49	; 0x31
 8015252:	7013      	strb	r3, [r2, #0]
 8015254:	9b02      	ldr	r3, [sp, #8]
 8015256:	3301      	adds	r3, #1
 8015258:	9302      	str	r3, [sp, #8]
 801525a:	e25a      	b.n	8015712 <_dtoa_r+0x9c2>
 801525c:	4234      	tst	r4, r6
 801525e:	d007      	beq.n	8015270 <_dtoa_r+0x520>
 8015260:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015262:	3301      	adds	r3, #1
 8015264:	9310      	str	r3, [sp, #64]	; 0x40
 8015266:	682a      	ldr	r2, [r5, #0]
 8015268:	686b      	ldr	r3, [r5, #4]
 801526a:	f7ec fd85 	bl	8001d78 <__aeabi_dmul>
 801526e:	0033      	movs	r3, r6
 8015270:	1064      	asrs	r4, r4, #1
 8015272:	3508      	adds	r5, #8
 8015274:	e75a      	b.n	801512c <_dtoa_r+0x3dc>
 8015276:	9e02      	ldr	r6, [sp, #8]
 8015278:	9b06      	ldr	r3, [sp, #24]
 801527a:	e780      	b.n	801517e <_dtoa_r+0x42e>
 801527c:	9b07      	ldr	r3, [sp, #28]
 801527e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015280:	1e5a      	subs	r2, r3, #1
 8015282:	4b59      	ldr	r3, [pc, #356]	; (80153e8 <_dtoa_r+0x698>)
 8015284:	00d2      	lsls	r2, r2, #3
 8015286:	189b      	adds	r3, r3, r2
 8015288:	681a      	ldr	r2, [r3, #0]
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	2900      	cmp	r1, #0
 801528e:	d051      	beq.n	8015334 <_dtoa_r+0x5e4>
 8015290:	2000      	movs	r0, #0
 8015292:	495d      	ldr	r1, [pc, #372]	; (8015408 <_dtoa_r+0x6b8>)
 8015294:	f7ec f96a 	bl	800156c <__aeabi_ddiv>
 8015298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801529a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801529c:	f7ec ffd8 	bl	8002250 <__aeabi_dsub>
 80152a0:	9a05      	ldr	r2, [sp, #20]
 80152a2:	9b05      	ldr	r3, [sp, #20]
 80152a4:	4694      	mov	ip, r2
 80152a6:	9310      	str	r3, [sp, #64]	; 0x40
 80152a8:	9b07      	ldr	r3, [sp, #28]
 80152aa:	900a      	str	r0, [sp, #40]	; 0x28
 80152ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80152ae:	4463      	add	r3, ip
 80152b0:	9319      	str	r3, [sp, #100]	; 0x64
 80152b2:	0029      	movs	r1, r5
 80152b4:	0020      	movs	r0, r4
 80152b6:	f7ed fb7b 	bl	80029b0 <__aeabi_d2iz>
 80152ba:	9017      	str	r0, [sp, #92]	; 0x5c
 80152bc:	f7ed fbae 	bl	8002a1c <__aeabi_i2d>
 80152c0:	0002      	movs	r2, r0
 80152c2:	000b      	movs	r3, r1
 80152c4:	0020      	movs	r0, r4
 80152c6:	0029      	movs	r1, r5
 80152c8:	f7ec ffc2 	bl	8002250 <__aeabi_dsub>
 80152cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80152d0:	3301      	adds	r3, #1
 80152d2:	9307      	str	r3, [sp, #28]
 80152d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80152d6:	0004      	movs	r4, r0
 80152d8:	3330      	adds	r3, #48	; 0x30
 80152da:	7013      	strb	r3, [r2, #0]
 80152dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152e0:	000d      	movs	r5, r1
 80152e2:	f7eb f8c1 	bl	8000468 <__aeabi_dcmplt>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	d175      	bne.n	80153d6 <_dtoa_r+0x686>
 80152ea:	0022      	movs	r2, r4
 80152ec:	002b      	movs	r3, r5
 80152ee:	2000      	movs	r0, #0
 80152f0:	493f      	ldr	r1, [pc, #252]	; (80153f0 <_dtoa_r+0x6a0>)
 80152f2:	f7ec ffad 	bl	8002250 <__aeabi_dsub>
 80152f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152fa:	f7eb f8b5 	bl	8000468 <__aeabi_dcmplt>
 80152fe:	2800      	cmp	r0, #0
 8015300:	d000      	beq.n	8015304 <_dtoa_r+0x5b4>
 8015302:	e0d1      	b.n	80154a8 <_dtoa_r+0x758>
 8015304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015306:	9a07      	ldr	r2, [sp, #28]
 8015308:	4293      	cmp	r3, r2
 801530a:	d100      	bne.n	801530e <_dtoa_r+0x5be>
 801530c:	e770      	b.n	80151f0 <_dtoa_r+0x4a0>
 801530e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015312:	2200      	movs	r2, #0
 8015314:	4b37      	ldr	r3, [pc, #220]	; (80153f4 <_dtoa_r+0x6a4>)
 8015316:	f7ec fd2f 	bl	8001d78 <__aeabi_dmul>
 801531a:	4b36      	ldr	r3, [pc, #216]	; (80153f4 <_dtoa_r+0x6a4>)
 801531c:	900a      	str	r0, [sp, #40]	; 0x28
 801531e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015320:	2200      	movs	r2, #0
 8015322:	0020      	movs	r0, r4
 8015324:	0029      	movs	r1, r5
 8015326:	f7ec fd27 	bl	8001d78 <__aeabi_dmul>
 801532a:	9b07      	ldr	r3, [sp, #28]
 801532c:	0004      	movs	r4, r0
 801532e:	000d      	movs	r5, r1
 8015330:	9310      	str	r3, [sp, #64]	; 0x40
 8015332:	e7be      	b.n	80152b2 <_dtoa_r+0x562>
 8015334:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015336:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015338:	f7ec fd1e 	bl	8001d78 <__aeabi_dmul>
 801533c:	9a05      	ldr	r2, [sp, #20]
 801533e:	9b05      	ldr	r3, [sp, #20]
 8015340:	4694      	mov	ip, r2
 8015342:	930a      	str	r3, [sp, #40]	; 0x28
 8015344:	9b07      	ldr	r3, [sp, #28]
 8015346:	9010      	str	r0, [sp, #64]	; 0x40
 8015348:	9111      	str	r1, [sp, #68]	; 0x44
 801534a:	4463      	add	r3, ip
 801534c:	9319      	str	r3, [sp, #100]	; 0x64
 801534e:	0029      	movs	r1, r5
 8015350:	0020      	movs	r0, r4
 8015352:	f7ed fb2d 	bl	80029b0 <__aeabi_d2iz>
 8015356:	9017      	str	r0, [sp, #92]	; 0x5c
 8015358:	f7ed fb60 	bl	8002a1c <__aeabi_i2d>
 801535c:	0002      	movs	r2, r0
 801535e:	000b      	movs	r3, r1
 8015360:	0020      	movs	r0, r4
 8015362:	0029      	movs	r1, r5
 8015364:	f7ec ff74 	bl	8002250 <__aeabi_dsub>
 8015368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801536a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801536c:	3330      	adds	r3, #48	; 0x30
 801536e:	7013      	strb	r3, [r2, #0]
 8015370:	0013      	movs	r3, r2
 8015372:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015374:	3301      	adds	r3, #1
 8015376:	0004      	movs	r4, r0
 8015378:	000d      	movs	r5, r1
 801537a:	930a      	str	r3, [sp, #40]	; 0x28
 801537c:	4293      	cmp	r3, r2
 801537e:	d12c      	bne.n	80153da <_dtoa_r+0x68a>
 8015380:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015382:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015384:	9a05      	ldr	r2, [sp, #20]
 8015386:	9b07      	ldr	r3, [sp, #28]
 8015388:	4694      	mov	ip, r2
 801538a:	4463      	add	r3, ip
 801538c:	2200      	movs	r2, #0
 801538e:	9307      	str	r3, [sp, #28]
 8015390:	4b1d      	ldr	r3, [pc, #116]	; (8015408 <_dtoa_r+0x6b8>)
 8015392:	f7eb fd81 	bl	8000e98 <__aeabi_dadd>
 8015396:	0002      	movs	r2, r0
 8015398:	000b      	movs	r3, r1
 801539a:	0020      	movs	r0, r4
 801539c:	0029      	movs	r1, r5
 801539e:	f7eb f877 	bl	8000490 <__aeabi_dcmpgt>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d000      	beq.n	80153a8 <_dtoa_r+0x658>
 80153a6:	e07f      	b.n	80154a8 <_dtoa_r+0x758>
 80153a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153ac:	2000      	movs	r0, #0
 80153ae:	4916      	ldr	r1, [pc, #88]	; (8015408 <_dtoa_r+0x6b8>)
 80153b0:	f7ec ff4e 	bl	8002250 <__aeabi_dsub>
 80153b4:	0002      	movs	r2, r0
 80153b6:	000b      	movs	r3, r1
 80153b8:	0020      	movs	r0, r4
 80153ba:	0029      	movs	r1, r5
 80153bc:	f7eb f854 	bl	8000468 <__aeabi_dcmplt>
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d100      	bne.n	80153c6 <_dtoa_r+0x676>
 80153c4:	e714      	b.n	80151f0 <_dtoa_r+0x4a0>
 80153c6:	9b07      	ldr	r3, [sp, #28]
 80153c8:	001a      	movs	r2, r3
 80153ca:	3a01      	subs	r2, #1
 80153cc:	9207      	str	r2, [sp, #28]
 80153ce:	7812      	ldrb	r2, [r2, #0]
 80153d0:	2a30      	cmp	r2, #48	; 0x30
 80153d2:	d0f8      	beq.n	80153c6 <_dtoa_r+0x676>
 80153d4:	9307      	str	r3, [sp, #28]
 80153d6:	9602      	str	r6, [sp, #8]
 80153d8:	e054      	b.n	8015484 <_dtoa_r+0x734>
 80153da:	2200      	movs	r2, #0
 80153dc:	4b05      	ldr	r3, [pc, #20]	; (80153f4 <_dtoa_r+0x6a4>)
 80153de:	f7ec fccb 	bl	8001d78 <__aeabi_dmul>
 80153e2:	0004      	movs	r4, r0
 80153e4:	000d      	movs	r5, r1
 80153e6:	e7b2      	b.n	801534e <_dtoa_r+0x5fe>
 80153e8:	0801ae88 	.word	0x0801ae88
 80153ec:	0801ae60 	.word	0x0801ae60
 80153f0:	3ff00000 	.word	0x3ff00000
 80153f4:	40240000 	.word	0x40240000
 80153f8:	401c0000 	.word	0x401c0000
 80153fc:	fcc00000 	.word	0xfcc00000
 8015400:	40140000 	.word	0x40140000
 8015404:	7cc00000 	.word	0x7cc00000
 8015408:	3fe00000 	.word	0x3fe00000
 801540c:	9b06      	ldr	r3, [sp, #24]
 801540e:	9e05      	ldr	r6, [sp, #20]
 8015410:	3b01      	subs	r3, #1
 8015412:	199b      	adds	r3, r3, r6
 8015414:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015416:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015418:	930a      	str	r3, [sp, #40]	; 0x28
 801541a:	9a08      	ldr	r2, [sp, #32]
 801541c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801541e:	0020      	movs	r0, r4
 8015420:	0029      	movs	r1, r5
 8015422:	f7ec f8a3 	bl	800156c <__aeabi_ddiv>
 8015426:	f7ed fac3 	bl	80029b0 <__aeabi_d2iz>
 801542a:	9006      	str	r0, [sp, #24]
 801542c:	f7ed faf6 	bl	8002a1c <__aeabi_i2d>
 8015430:	9a08      	ldr	r2, [sp, #32]
 8015432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015434:	f7ec fca0 	bl	8001d78 <__aeabi_dmul>
 8015438:	0002      	movs	r2, r0
 801543a:	000b      	movs	r3, r1
 801543c:	0020      	movs	r0, r4
 801543e:	0029      	movs	r1, r5
 8015440:	f7ec ff06 	bl	8002250 <__aeabi_dsub>
 8015444:	0033      	movs	r3, r6
 8015446:	9a06      	ldr	r2, [sp, #24]
 8015448:	3601      	adds	r6, #1
 801544a:	3230      	adds	r2, #48	; 0x30
 801544c:	701a      	strb	r2, [r3, #0]
 801544e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015450:	9607      	str	r6, [sp, #28]
 8015452:	429a      	cmp	r2, r3
 8015454:	d139      	bne.n	80154ca <_dtoa_r+0x77a>
 8015456:	0002      	movs	r2, r0
 8015458:	000b      	movs	r3, r1
 801545a:	f7eb fd1d 	bl	8000e98 <__aeabi_dadd>
 801545e:	9a08      	ldr	r2, [sp, #32]
 8015460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015462:	0004      	movs	r4, r0
 8015464:	000d      	movs	r5, r1
 8015466:	f7eb f813 	bl	8000490 <__aeabi_dcmpgt>
 801546a:	2800      	cmp	r0, #0
 801546c:	d11b      	bne.n	80154a6 <_dtoa_r+0x756>
 801546e:	9a08      	ldr	r2, [sp, #32]
 8015470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015472:	0020      	movs	r0, r4
 8015474:	0029      	movs	r1, r5
 8015476:	f7ea fff1 	bl	800045c <__aeabi_dcmpeq>
 801547a:	2800      	cmp	r0, #0
 801547c:	d002      	beq.n	8015484 <_dtoa_r+0x734>
 801547e:	9b06      	ldr	r3, [sp, #24]
 8015480:	07db      	lsls	r3, r3, #31
 8015482:	d410      	bmi.n	80154a6 <_dtoa_r+0x756>
 8015484:	0038      	movs	r0, r7
 8015486:	9904      	ldr	r1, [sp, #16]
 8015488:	f000 fe7e 	bl	8016188 <_Bfree>
 801548c:	2300      	movs	r3, #0
 801548e:	9a07      	ldr	r2, [sp, #28]
 8015490:	9802      	ldr	r0, [sp, #8]
 8015492:	7013      	strb	r3, [r2, #0]
 8015494:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015496:	3001      	adds	r0, #1
 8015498:	6018      	str	r0, [r3, #0]
 801549a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801549c:	2b00      	cmp	r3, #0
 801549e:	d100      	bne.n	80154a2 <_dtoa_r+0x752>
 80154a0:	e4a3      	b.n	8014dea <_dtoa_r+0x9a>
 80154a2:	601a      	str	r2, [r3, #0]
 80154a4:	e4a1      	b.n	8014dea <_dtoa_r+0x9a>
 80154a6:	9e02      	ldr	r6, [sp, #8]
 80154a8:	9b07      	ldr	r3, [sp, #28]
 80154aa:	9307      	str	r3, [sp, #28]
 80154ac:	3b01      	subs	r3, #1
 80154ae:	781a      	ldrb	r2, [r3, #0]
 80154b0:	2a39      	cmp	r2, #57	; 0x39
 80154b2:	d106      	bne.n	80154c2 <_dtoa_r+0x772>
 80154b4:	9a05      	ldr	r2, [sp, #20]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d1f7      	bne.n	80154aa <_dtoa_r+0x75a>
 80154ba:	2230      	movs	r2, #48	; 0x30
 80154bc:	9905      	ldr	r1, [sp, #20]
 80154be:	3601      	adds	r6, #1
 80154c0:	700a      	strb	r2, [r1, #0]
 80154c2:	781a      	ldrb	r2, [r3, #0]
 80154c4:	3201      	adds	r2, #1
 80154c6:	701a      	strb	r2, [r3, #0]
 80154c8:	e785      	b.n	80153d6 <_dtoa_r+0x686>
 80154ca:	2200      	movs	r2, #0
 80154cc:	4bad      	ldr	r3, [pc, #692]	; (8015784 <_dtoa_r+0xa34>)
 80154ce:	f7ec fc53 	bl	8001d78 <__aeabi_dmul>
 80154d2:	2200      	movs	r2, #0
 80154d4:	2300      	movs	r3, #0
 80154d6:	0004      	movs	r4, r0
 80154d8:	000d      	movs	r5, r1
 80154da:	f7ea ffbf 	bl	800045c <__aeabi_dcmpeq>
 80154de:	2800      	cmp	r0, #0
 80154e0:	d09b      	beq.n	801541a <_dtoa_r+0x6ca>
 80154e2:	e7cf      	b.n	8015484 <_dtoa_r+0x734>
 80154e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80154e6:	2a00      	cmp	r2, #0
 80154e8:	d100      	bne.n	80154ec <_dtoa_r+0x79c>
 80154ea:	e082      	b.n	80155f2 <_dtoa_r+0x8a2>
 80154ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80154ee:	2a01      	cmp	r2, #1
 80154f0:	dc66      	bgt.n	80155c0 <_dtoa_r+0x870>
 80154f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80154f4:	2a00      	cmp	r2, #0
 80154f6:	d05f      	beq.n	80155b8 <_dtoa_r+0x868>
 80154f8:	4aa3      	ldr	r2, [pc, #652]	; (8015788 <_dtoa_r+0xa38>)
 80154fa:	189b      	adds	r3, r3, r2
 80154fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80154fe:	9c08      	ldr	r4, [sp, #32]
 8015500:	9a08      	ldr	r2, [sp, #32]
 8015502:	2101      	movs	r1, #1
 8015504:	18d2      	adds	r2, r2, r3
 8015506:	9208      	str	r2, [sp, #32]
 8015508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801550a:	0038      	movs	r0, r7
 801550c:	18d3      	adds	r3, r2, r3
 801550e:	930d      	str	r3, [sp, #52]	; 0x34
 8015510:	f000 ff36 	bl	8016380 <__i2b>
 8015514:	0005      	movs	r5, r0
 8015516:	2c00      	cmp	r4, #0
 8015518:	dd0e      	ble.n	8015538 <_dtoa_r+0x7e8>
 801551a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801551c:	2b00      	cmp	r3, #0
 801551e:	dd0b      	ble.n	8015538 <_dtoa_r+0x7e8>
 8015520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015522:	0023      	movs	r3, r4
 8015524:	4294      	cmp	r4, r2
 8015526:	dd00      	ble.n	801552a <_dtoa_r+0x7da>
 8015528:	0013      	movs	r3, r2
 801552a:	9a08      	ldr	r2, [sp, #32]
 801552c:	1ae4      	subs	r4, r4, r3
 801552e:	1ad2      	subs	r2, r2, r3
 8015530:	9208      	str	r2, [sp, #32]
 8015532:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015534:	1ad3      	subs	r3, r2, r3
 8015536:	930d      	str	r3, [sp, #52]	; 0x34
 8015538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801553a:	2b00      	cmp	r3, #0
 801553c:	d01f      	beq.n	801557e <_dtoa_r+0x82e>
 801553e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015540:	2b00      	cmp	r3, #0
 8015542:	d05a      	beq.n	80155fa <_dtoa_r+0x8aa>
 8015544:	2e00      	cmp	r6, #0
 8015546:	dd11      	ble.n	801556c <_dtoa_r+0x81c>
 8015548:	0029      	movs	r1, r5
 801554a:	0032      	movs	r2, r6
 801554c:	0038      	movs	r0, r7
 801554e:	f000 ffdd 	bl	801650c <__pow5mult>
 8015552:	9a04      	ldr	r2, [sp, #16]
 8015554:	0001      	movs	r1, r0
 8015556:	0005      	movs	r5, r0
 8015558:	0038      	movs	r0, r7
 801555a:	f000 ff27 	bl	80163ac <__multiply>
 801555e:	9904      	ldr	r1, [sp, #16]
 8015560:	9007      	str	r0, [sp, #28]
 8015562:	0038      	movs	r0, r7
 8015564:	f000 fe10 	bl	8016188 <_Bfree>
 8015568:	9b07      	ldr	r3, [sp, #28]
 801556a:	9304      	str	r3, [sp, #16]
 801556c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801556e:	1b9a      	subs	r2, r3, r6
 8015570:	42b3      	cmp	r3, r6
 8015572:	d004      	beq.n	801557e <_dtoa_r+0x82e>
 8015574:	0038      	movs	r0, r7
 8015576:	9904      	ldr	r1, [sp, #16]
 8015578:	f000 ffc8 	bl	801650c <__pow5mult>
 801557c:	9004      	str	r0, [sp, #16]
 801557e:	2101      	movs	r1, #1
 8015580:	0038      	movs	r0, r7
 8015582:	f000 fefd 	bl	8016380 <__i2b>
 8015586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015588:	0006      	movs	r6, r0
 801558a:	2b00      	cmp	r3, #0
 801558c:	dd37      	ble.n	80155fe <_dtoa_r+0x8ae>
 801558e:	001a      	movs	r2, r3
 8015590:	0001      	movs	r1, r0
 8015592:	0038      	movs	r0, r7
 8015594:	f000 ffba 	bl	801650c <__pow5mult>
 8015598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801559a:	0006      	movs	r6, r0
 801559c:	2b01      	cmp	r3, #1
 801559e:	dd33      	ble.n	8015608 <_dtoa_r+0x8b8>
 80155a0:	2300      	movs	r3, #0
 80155a2:	9307      	str	r3, [sp, #28]
 80155a4:	6933      	ldr	r3, [r6, #16]
 80155a6:	3303      	adds	r3, #3
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	18f3      	adds	r3, r6, r3
 80155ac:	6858      	ldr	r0, [r3, #4]
 80155ae:	f000 fe9f 	bl	80162f0 <__hi0bits>
 80155b2:	2320      	movs	r3, #32
 80155b4:	1a18      	subs	r0, r3, r0
 80155b6:	e03f      	b.n	8015638 <_dtoa_r+0x8e8>
 80155b8:	2336      	movs	r3, #54	; 0x36
 80155ba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80155bc:	1a9b      	subs	r3, r3, r2
 80155be:	e79d      	b.n	80154fc <_dtoa_r+0x7ac>
 80155c0:	9b06      	ldr	r3, [sp, #24]
 80155c2:	1e5e      	subs	r6, r3, #1
 80155c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155c6:	42b3      	cmp	r3, r6
 80155c8:	db08      	blt.n	80155dc <_dtoa_r+0x88c>
 80155ca:	1b9e      	subs	r6, r3, r6
 80155cc:	9b06      	ldr	r3, [sp, #24]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	da0c      	bge.n	80155ec <_dtoa_r+0x89c>
 80155d2:	9b08      	ldr	r3, [sp, #32]
 80155d4:	9a06      	ldr	r2, [sp, #24]
 80155d6:	1a9c      	subs	r4, r3, r2
 80155d8:	2300      	movs	r3, #0
 80155da:	e791      	b.n	8015500 <_dtoa_r+0x7b0>
 80155dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155e0:	1af3      	subs	r3, r6, r3
 80155e2:	18d3      	adds	r3, r2, r3
 80155e4:	960e      	str	r6, [sp, #56]	; 0x38
 80155e6:	9314      	str	r3, [sp, #80]	; 0x50
 80155e8:	2600      	movs	r6, #0
 80155ea:	e7ef      	b.n	80155cc <_dtoa_r+0x87c>
 80155ec:	9c08      	ldr	r4, [sp, #32]
 80155ee:	9b06      	ldr	r3, [sp, #24]
 80155f0:	e786      	b.n	8015500 <_dtoa_r+0x7b0>
 80155f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80155f4:	9c08      	ldr	r4, [sp, #32]
 80155f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80155f8:	e78d      	b.n	8015516 <_dtoa_r+0x7c6>
 80155fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155fc:	e7ba      	b.n	8015574 <_dtoa_r+0x824>
 80155fe:	2300      	movs	r3, #0
 8015600:	9307      	str	r3, [sp, #28]
 8015602:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015604:	2b01      	cmp	r3, #1
 8015606:	dc13      	bgt.n	8015630 <_dtoa_r+0x8e0>
 8015608:	2300      	movs	r3, #0
 801560a:	9307      	str	r3, [sp, #28]
 801560c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801560e:	2b00      	cmp	r3, #0
 8015610:	d10e      	bne.n	8015630 <_dtoa_r+0x8e0>
 8015612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015614:	031b      	lsls	r3, r3, #12
 8015616:	d10b      	bne.n	8015630 <_dtoa_r+0x8e0>
 8015618:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801561a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801561c:	4213      	tst	r3, r2
 801561e:	d007      	beq.n	8015630 <_dtoa_r+0x8e0>
 8015620:	9b08      	ldr	r3, [sp, #32]
 8015622:	3301      	adds	r3, #1
 8015624:	9308      	str	r3, [sp, #32]
 8015626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015628:	3301      	adds	r3, #1
 801562a:	930d      	str	r3, [sp, #52]	; 0x34
 801562c:	2301      	movs	r3, #1
 801562e:	9307      	str	r3, [sp, #28]
 8015630:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015632:	2001      	movs	r0, #1
 8015634:	2b00      	cmp	r3, #0
 8015636:	d1b5      	bne.n	80155a4 <_dtoa_r+0x854>
 8015638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801563a:	221f      	movs	r2, #31
 801563c:	1818      	adds	r0, r3, r0
 801563e:	0003      	movs	r3, r0
 8015640:	4013      	ands	r3, r2
 8015642:	4210      	tst	r0, r2
 8015644:	d046      	beq.n	80156d4 <_dtoa_r+0x984>
 8015646:	3201      	adds	r2, #1
 8015648:	1ad2      	subs	r2, r2, r3
 801564a:	2a04      	cmp	r2, #4
 801564c:	dd3f      	ble.n	80156ce <_dtoa_r+0x97e>
 801564e:	221c      	movs	r2, #28
 8015650:	1ad3      	subs	r3, r2, r3
 8015652:	9a08      	ldr	r2, [sp, #32]
 8015654:	18e4      	adds	r4, r4, r3
 8015656:	18d2      	adds	r2, r2, r3
 8015658:	9208      	str	r2, [sp, #32]
 801565a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801565c:	18d3      	adds	r3, r2, r3
 801565e:	930d      	str	r3, [sp, #52]	; 0x34
 8015660:	9b08      	ldr	r3, [sp, #32]
 8015662:	2b00      	cmp	r3, #0
 8015664:	dd05      	ble.n	8015672 <_dtoa_r+0x922>
 8015666:	001a      	movs	r2, r3
 8015668:	0038      	movs	r0, r7
 801566a:	9904      	ldr	r1, [sp, #16]
 801566c:	f000 ffaa 	bl	80165c4 <__lshift>
 8015670:	9004      	str	r0, [sp, #16]
 8015672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015674:	2b00      	cmp	r3, #0
 8015676:	dd05      	ble.n	8015684 <_dtoa_r+0x934>
 8015678:	0031      	movs	r1, r6
 801567a:	001a      	movs	r2, r3
 801567c:	0038      	movs	r0, r7
 801567e:	f000 ffa1 	bl	80165c4 <__lshift>
 8015682:	0006      	movs	r6, r0
 8015684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015686:	2b00      	cmp	r3, #0
 8015688:	d026      	beq.n	80156d8 <_dtoa_r+0x988>
 801568a:	0031      	movs	r1, r6
 801568c:	9804      	ldr	r0, [sp, #16]
 801568e:	f001 f809 	bl	80166a4 <__mcmp>
 8015692:	2800      	cmp	r0, #0
 8015694:	da20      	bge.n	80156d8 <_dtoa_r+0x988>
 8015696:	9b02      	ldr	r3, [sp, #8]
 8015698:	220a      	movs	r2, #10
 801569a:	3b01      	subs	r3, #1
 801569c:	9302      	str	r3, [sp, #8]
 801569e:	0038      	movs	r0, r7
 80156a0:	2300      	movs	r3, #0
 80156a2:	9904      	ldr	r1, [sp, #16]
 80156a4:	f000 fd94 	bl	80161d0 <__multadd>
 80156a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156aa:	9004      	str	r0, [sp, #16]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d100      	bne.n	80156b2 <_dtoa_r+0x962>
 80156b0:	e160      	b.n	8015974 <_dtoa_r+0xc24>
 80156b2:	2300      	movs	r3, #0
 80156b4:	0029      	movs	r1, r5
 80156b6:	220a      	movs	r2, #10
 80156b8:	0038      	movs	r0, r7
 80156ba:	f000 fd89 	bl	80161d0 <__multadd>
 80156be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156c0:	0005      	movs	r5, r0
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	dc47      	bgt.n	8015756 <_dtoa_r+0xa06>
 80156c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80156c8:	2b02      	cmp	r3, #2
 80156ca:	dc0d      	bgt.n	80156e8 <_dtoa_r+0x998>
 80156cc:	e043      	b.n	8015756 <_dtoa_r+0xa06>
 80156ce:	2a04      	cmp	r2, #4
 80156d0:	d0c6      	beq.n	8015660 <_dtoa_r+0x910>
 80156d2:	0013      	movs	r3, r2
 80156d4:	331c      	adds	r3, #28
 80156d6:	e7bc      	b.n	8015652 <_dtoa_r+0x902>
 80156d8:	9b06      	ldr	r3, [sp, #24]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	dc35      	bgt.n	801574a <_dtoa_r+0x9fa>
 80156de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80156e0:	2b02      	cmp	r3, #2
 80156e2:	dd32      	ble.n	801574a <_dtoa_r+0x9fa>
 80156e4:	9b06      	ldr	r3, [sp, #24]
 80156e6:	930c      	str	r3, [sp, #48]	; 0x30
 80156e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d10c      	bne.n	8015708 <_dtoa_r+0x9b8>
 80156ee:	0031      	movs	r1, r6
 80156f0:	2205      	movs	r2, #5
 80156f2:	0038      	movs	r0, r7
 80156f4:	f000 fd6c 	bl	80161d0 <__multadd>
 80156f8:	0006      	movs	r6, r0
 80156fa:	0001      	movs	r1, r0
 80156fc:	9804      	ldr	r0, [sp, #16]
 80156fe:	f000 ffd1 	bl	80166a4 <__mcmp>
 8015702:	2800      	cmp	r0, #0
 8015704:	dd00      	ble.n	8015708 <_dtoa_r+0x9b8>
 8015706:	e59f      	b.n	8015248 <_dtoa_r+0x4f8>
 8015708:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801570a:	43db      	mvns	r3, r3
 801570c:	9302      	str	r3, [sp, #8]
 801570e:	9b05      	ldr	r3, [sp, #20]
 8015710:	9307      	str	r3, [sp, #28]
 8015712:	2400      	movs	r4, #0
 8015714:	0031      	movs	r1, r6
 8015716:	0038      	movs	r0, r7
 8015718:	f000 fd36 	bl	8016188 <_Bfree>
 801571c:	2d00      	cmp	r5, #0
 801571e:	d100      	bne.n	8015722 <_dtoa_r+0x9d2>
 8015720:	e6b0      	b.n	8015484 <_dtoa_r+0x734>
 8015722:	2c00      	cmp	r4, #0
 8015724:	d005      	beq.n	8015732 <_dtoa_r+0x9e2>
 8015726:	42ac      	cmp	r4, r5
 8015728:	d003      	beq.n	8015732 <_dtoa_r+0x9e2>
 801572a:	0021      	movs	r1, r4
 801572c:	0038      	movs	r0, r7
 801572e:	f000 fd2b 	bl	8016188 <_Bfree>
 8015732:	0029      	movs	r1, r5
 8015734:	0038      	movs	r0, r7
 8015736:	f000 fd27 	bl	8016188 <_Bfree>
 801573a:	e6a3      	b.n	8015484 <_dtoa_r+0x734>
 801573c:	2600      	movs	r6, #0
 801573e:	0035      	movs	r5, r6
 8015740:	e7e2      	b.n	8015708 <_dtoa_r+0x9b8>
 8015742:	9602      	str	r6, [sp, #8]
 8015744:	9e07      	ldr	r6, [sp, #28]
 8015746:	0035      	movs	r5, r6
 8015748:	e57e      	b.n	8015248 <_dtoa_r+0x4f8>
 801574a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801574c:	2b00      	cmp	r3, #0
 801574e:	d100      	bne.n	8015752 <_dtoa_r+0xa02>
 8015750:	e0c8      	b.n	80158e4 <_dtoa_r+0xb94>
 8015752:	9b06      	ldr	r3, [sp, #24]
 8015754:	930c      	str	r3, [sp, #48]	; 0x30
 8015756:	2c00      	cmp	r4, #0
 8015758:	dd05      	ble.n	8015766 <_dtoa_r+0xa16>
 801575a:	0029      	movs	r1, r5
 801575c:	0022      	movs	r2, r4
 801575e:	0038      	movs	r0, r7
 8015760:	f000 ff30 	bl	80165c4 <__lshift>
 8015764:	0005      	movs	r5, r0
 8015766:	9b07      	ldr	r3, [sp, #28]
 8015768:	0028      	movs	r0, r5
 801576a:	2b00      	cmp	r3, #0
 801576c:	d01f      	beq.n	80157ae <_dtoa_r+0xa5e>
 801576e:	0038      	movs	r0, r7
 8015770:	6869      	ldr	r1, [r5, #4]
 8015772:	f000 fcc5 	bl	8016100 <_Balloc>
 8015776:	1e04      	subs	r4, r0, #0
 8015778:	d10c      	bne.n	8015794 <_dtoa_r+0xa44>
 801577a:	0002      	movs	r2, r0
 801577c:	4b03      	ldr	r3, [pc, #12]	; (801578c <_dtoa_r+0xa3c>)
 801577e:	4904      	ldr	r1, [pc, #16]	; (8015790 <_dtoa_r+0xa40>)
 8015780:	f7ff fafb 	bl	8014d7a <_dtoa_r+0x2a>
 8015784:	40240000 	.word	0x40240000
 8015788:	00000433 	.word	0x00000433
 801578c:	0801ad71 	.word	0x0801ad71
 8015790:	000002ea 	.word	0x000002ea
 8015794:	0029      	movs	r1, r5
 8015796:	692b      	ldr	r3, [r5, #16]
 8015798:	310c      	adds	r1, #12
 801579a:	1c9a      	adds	r2, r3, #2
 801579c:	0092      	lsls	r2, r2, #2
 801579e:	300c      	adds	r0, #12
 80157a0:	f7fd fcba 	bl	8013118 <memcpy>
 80157a4:	2201      	movs	r2, #1
 80157a6:	0021      	movs	r1, r4
 80157a8:	0038      	movs	r0, r7
 80157aa:	f000 ff0b 	bl	80165c4 <__lshift>
 80157ae:	002c      	movs	r4, r5
 80157b0:	0005      	movs	r5, r0
 80157b2:	9b05      	ldr	r3, [sp, #20]
 80157b4:	9308      	str	r3, [sp, #32]
 80157b6:	0031      	movs	r1, r6
 80157b8:	9804      	ldr	r0, [sp, #16]
 80157ba:	f7ff fa3d 	bl	8014c38 <quorem>
 80157be:	0003      	movs	r3, r0
 80157c0:	0021      	movs	r1, r4
 80157c2:	3330      	adds	r3, #48	; 0x30
 80157c4:	900e      	str	r0, [sp, #56]	; 0x38
 80157c6:	9804      	ldr	r0, [sp, #16]
 80157c8:	9306      	str	r3, [sp, #24]
 80157ca:	f000 ff6b 	bl	80166a4 <__mcmp>
 80157ce:	002a      	movs	r2, r5
 80157d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80157d2:	0031      	movs	r1, r6
 80157d4:	0038      	movs	r0, r7
 80157d6:	f000 ff81 	bl	80166dc <__mdiff>
 80157da:	68c3      	ldr	r3, [r0, #12]
 80157dc:	9007      	str	r0, [sp, #28]
 80157de:	9310      	str	r3, [sp, #64]	; 0x40
 80157e0:	2301      	movs	r3, #1
 80157e2:	930d      	str	r3, [sp, #52]	; 0x34
 80157e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d104      	bne.n	80157f4 <_dtoa_r+0xaa4>
 80157ea:	0001      	movs	r1, r0
 80157ec:	9804      	ldr	r0, [sp, #16]
 80157ee:	f000 ff59 	bl	80166a4 <__mcmp>
 80157f2:	900d      	str	r0, [sp, #52]	; 0x34
 80157f4:	0038      	movs	r0, r7
 80157f6:	9907      	ldr	r1, [sp, #28]
 80157f8:	f000 fcc6 	bl	8016188 <_Bfree>
 80157fc:	2301      	movs	r3, #1
 80157fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015802:	4018      	ands	r0, r3
 8015804:	9b08      	ldr	r3, [sp, #32]
 8015806:	3301      	adds	r3, #1
 8015808:	9307      	str	r3, [sp, #28]
 801580a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801580c:	4313      	orrs	r3, r2
 801580e:	4303      	orrs	r3, r0
 8015810:	d10c      	bne.n	801582c <_dtoa_r+0xadc>
 8015812:	9b06      	ldr	r3, [sp, #24]
 8015814:	2b39      	cmp	r3, #57	; 0x39
 8015816:	d025      	beq.n	8015864 <_dtoa_r+0xb14>
 8015818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801581a:	2b00      	cmp	r3, #0
 801581c:	dd02      	ble.n	8015824 <_dtoa_r+0xad4>
 801581e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015820:	3331      	adds	r3, #49	; 0x31
 8015822:	9306      	str	r3, [sp, #24]
 8015824:	9b08      	ldr	r3, [sp, #32]
 8015826:	9a06      	ldr	r2, [sp, #24]
 8015828:	701a      	strb	r2, [r3, #0]
 801582a:	e773      	b.n	8015714 <_dtoa_r+0x9c4>
 801582c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801582e:	2b00      	cmp	r3, #0
 8015830:	db03      	blt.n	801583a <_dtoa_r+0xaea>
 8015832:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015834:	4313      	orrs	r3, r2
 8015836:	4303      	orrs	r3, r0
 8015838:	d11f      	bne.n	801587a <_dtoa_r+0xb2a>
 801583a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801583c:	2b00      	cmp	r3, #0
 801583e:	ddf1      	ble.n	8015824 <_dtoa_r+0xad4>
 8015840:	9904      	ldr	r1, [sp, #16]
 8015842:	2201      	movs	r2, #1
 8015844:	0038      	movs	r0, r7
 8015846:	f000 febd 	bl	80165c4 <__lshift>
 801584a:	0031      	movs	r1, r6
 801584c:	9004      	str	r0, [sp, #16]
 801584e:	f000 ff29 	bl	80166a4 <__mcmp>
 8015852:	2800      	cmp	r0, #0
 8015854:	dc03      	bgt.n	801585e <_dtoa_r+0xb0e>
 8015856:	d1e5      	bne.n	8015824 <_dtoa_r+0xad4>
 8015858:	9b06      	ldr	r3, [sp, #24]
 801585a:	07db      	lsls	r3, r3, #31
 801585c:	d5e2      	bpl.n	8015824 <_dtoa_r+0xad4>
 801585e:	9b06      	ldr	r3, [sp, #24]
 8015860:	2b39      	cmp	r3, #57	; 0x39
 8015862:	d1dc      	bne.n	801581e <_dtoa_r+0xace>
 8015864:	2339      	movs	r3, #57	; 0x39
 8015866:	9a08      	ldr	r2, [sp, #32]
 8015868:	7013      	strb	r3, [r2, #0]
 801586a:	9b07      	ldr	r3, [sp, #28]
 801586c:	9307      	str	r3, [sp, #28]
 801586e:	3b01      	subs	r3, #1
 8015870:	781a      	ldrb	r2, [r3, #0]
 8015872:	2a39      	cmp	r2, #57	; 0x39
 8015874:	d06c      	beq.n	8015950 <_dtoa_r+0xc00>
 8015876:	3201      	adds	r2, #1
 8015878:	e7d6      	b.n	8015828 <_dtoa_r+0xad8>
 801587a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801587c:	2b00      	cmp	r3, #0
 801587e:	dd07      	ble.n	8015890 <_dtoa_r+0xb40>
 8015880:	9b06      	ldr	r3, [sp, #24]
 8015882:	2b39      	cmp	r3, #57	; 0x39
 8015884:	d0ee      	beq.n	8015864 <_dtoa_r+0xb14>
 8015886:	9b06      	ldr	r3, [sp, #24]
 8015888:	9a08      	ldr	r2, [sp, #32]
 801588a:	3301      	adds	r3, #1
 801588c:	7013      	strb	r3, [r2, #0]
 801588e:	e741      	b.n	8015714 <_dtoa_r+0x9c4>
 8015890:	9b08      	ldr	r3, [sp, #32]
 8015892:	9a06      	ldr	r2, [sp, #24]
 8015894:	701a      	strb	r2, [r3, #0]
 8015896:	2301      	movs	r3, #1
 8015898:	9a05      	ldr	r2, [sp, #20]
 801589a:	1a9b      	subs	r3, r3, r2
 801589c:	9a08      	ldr	r2, [sp, #32]
 801589e:	189b      	adds	r3, r3, r2
 80158a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80158a2:	429a      	cmp	r2, r3
 80158a4:	d03e      	beq.n	8015924 <_dtoa_r+0xbd4>
 80158a6:	2300      	movs	r3, #0
 80158a8:	220a      	movs	r2, #10
 80158aa:	9904      	ldr	r1, [sp, #16]
 80158ac:	0038      	movs	r0, r7
 80158ae:	f000 fc8f 	bl	80161d0 <__multadd>
 80158b2:	2300      	movs	r3, #0
 80158b4:	9004      	str	r0, [sp, #16]
 80158b6:	220a      	movs	r2, #10
 80158b8:	0021      	movs	r1, r4
 80158ba:	0038      	movs	r0, r7
 80158bc:	42ac      	cmp	r4, r5
 80158be:	d106      	bne.n	80158ce <_dtoa_r+0xb7e>
 80158c0:	f000 fc86 	bl	80161d0 <__multadd>
 80158c4:	0004      	movs	r4, r0
 80158c6:	0005      	movs	r5, r0
 80158c8:	9b07      	ldr	r3, [sp, #28]
 80158ca:	9308      	str	r3, [sp, #32]
 80158cc:	e773      	b.n	80157b6 <_dtoa_r+0xa66>
 80158ce:	f000 fc7f 	bl	80161d0 <__multadd>
 80158d2:	0029      	movs	r1, r5
 80158d4:	0004      	movs	r4, r0
 80158d6:	2300      	movs	r3, #0
 80158d8:	220a      	movs	r2, #10
 80158da:	0038      	movs	r0, r7
 80158dc:	f000 fc78 	bl	80161d0 <__multadd>
 80158e0:	0005      	movs	r5, r0
 80158e2:	e7f1      	b.n	80158c8 <_dtoa_r+0xb78>
 80158e4:	9b06      	ldr	r3, [sp, #24]
 80158e6:	930c      	str	r3, [sp, #48]	; 0x30
 80158e8:	2400      	movs	r4, #0
 80158ea:	0031      	movs	r1, r6
 80158ec:	9804      	ldr	r0, [sp, #16]
 80158ee:	f7ff f9a3 	bl	8014c38 <quorem>
 80158f2:	9b05      	ldr	r3, [sp, #20]
 80158f4:	3030      	adds	r0, #48	; 0x30
 80158f6:	5518      	strb	r0, [r3, r4]
 80158f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158fa:	3401      	adds	r4, #1
 80158fc:	9006      	str	r0, [sp, #24]
 80158fe:	42a3      	cmp	r3, r4
 8015900:	dd07      	ble.n	8015912 <_dtoa_r+0xbc2>
 8015902:	2300      	movs	r3, #0
 8015904:	220a      	movs	r2, #10
 8015906:	0038      	movs	r0, r7
 8015908:	9904      	ldr	r1, [sp, #16]
 801590a:	f000 fc61 	bl	80161d0 <__multadd>
 801590e:	9004      	str	r0, [sp, #16]
 8015910:	e7eb      	b.n	80158ea <_dtoa_r+0xb9a>
 8015912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015914:	2001      	movs	r0, #1
 8015916:	2b00      	cmp	r3, #0
 8015918:	dd00      	ble.n	801591c <_dtoa_r+0xbcc>
 801591a:	0018      	movs	r0, r3
 801591c:	2400      	movs	r4, #0
 801591e:	9b05      	ldr	r3, [sp, #20]
 8015920:	181b      	adds	r3, r3, r0
 8015922:	9307      	str	r3, [sp, #28]
 8015924:	9904      	ldr	r1, [sp, #16]
 8015926:	2201      	movs	r2, #1
 8015928:	0038      	movs	r0, r7
 801592a:	f000 fe4b 	bl	80165c4 <__lshift>
 801592e:	0031      	movs	r1, r6
 8015930:	9004      	str	r0, [sp, #16]
 8015932:	f000 feb7 	bl	80166a4 <__mcmp>
 8015936:	2800      	cmp	r0, #0
 8015938:	dc97      	bgt.n	801586a <_dtoa_r+0xb1a>
 801593a:	d102      	bne.n	8015942 <_dtoa_r+0xbf2>
 801593c:	9b06      	ldr	r3, [sp, #24]
 801593e:	07db      	lsls	r3, r3, #31
 8015940:	d493      	bmi.n	801586a <_dtoa_r+0xb1a>
 8015942:	9b07      	ldr	r3, [sp, #28]
 8015944:	9307      	str	r3, [sp, #28]
 8015946:	3b01      	subs	r3, #1
 8015948:	781a      	ldrb	r2, [r3, #0]
 801594a:	2a30      	cmp	r2, #48	; 0x30
 801594c:	d0fa      	beq.n	8015944 <_dtoa_r+0xbf4>
 801594e:	e6e1      	b.n	8015714 <_dtoa_r+0x9c4>
 8015950:	9a05      	ldr	r2, [sp, #20]
 8015952:	429a      	cmp	r2, r3
 8015954:	d18a      	bne.n	801586c <_dtoa_r+0xb1c>
 8015956:	9b02      	ldr	r3, [sp, #8]
 8015958:	3301      	adds	r3, #1
 801595a:	9302      	str	r3, [sp, #8]
 801595c:	2331      	movs	r3, #49	; 0x31
 801595e:	e795      	b.n	801588c <_dtoa_r+0xb3c>
 8015960:	4b08      	ldr	r3, [pc, #32]	; (8015984 <_dtoa_r+0xc34>)
 8015962:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015964:	9305      	str	r3, [sp, #20]
 8015966:	4b08      	ldr	r3, [pc, #32]	; (8015988 <_dtoa_r+0xc38>)
 8015968:	2a00      	cmp	r2, #0
 801596a:	d001      	beq.n	8015970 <_dtoa_r+0xc20>
 801596c:	f7ff fa3b 	bl	8014de6 <_dtoa_r+0x96>
 8015970:	f7ff fa3b 	bl	8014dea <_dtoa_r+0x9a>
 8015974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015976:	2b00      	cmp	r3, #0
 8015978:	dcb6      	bgt.n	80158e8 <_dtoa_r+0xb98>
 801597a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801597c:	2b02      	cmp	r3, #2
 801597e:	dd00      	ble.n	8015982 <_dtoa_r+0xc32>
 8015980:	e6b2      	b.n	80156e8 <_dtoa_r+0x998>
 8015982:	e7b1      	b.n	80158e8 <_dtoa_r+0xb98>
 8015984:	0801ad05 	.word	0x0801ad05
 8015988:	0801ad0d 	.word	0x0801ad0d

0801598c <__errno>:
 801598c:	4b01      	ldr	r3, [pc, #4]	; (8015994 <__errno+0x8>)
 801598e:	6818      	ldr	r0, [r3, #0]
 8015990:	4770      	bx	lr
 8015992:	46c0      	nop			; (mov r8, r8)
 8015994:	20000120 	.word	0x20000120

08015998 <fiprintf>:
 8015998:	b40e      	push	{r1, r2, r3}
 801599a:	b503      	push	{r0, r1, lr}
 801599c:	0001      	movs	r1, r0
 801599e:	ab03      	add	r3, sp, #12
 80159a0:	4804      	ldr	r0, [pc, #16]	; (80159b4 <fiprintf+0x1c>)
 80159a2:	cb04      	ldmia	r3!, {r2}
 80159a4:	6800      	ldr	r0, [r0, #0]
 80159a6:	9301      	str	r3, [sp, #4]
 80159a8:	f001 fa32 	bl	8016e10 <_vfiprintf_r>
 80159ac:	b002      	add	sp, #8
 80159ae:	bc08      	pop	{r3}
 80159b0:	b003      	add	sp, #12
 80159b2:	4718      	bx	r3
 80159b4:	20000120 	.word	0x20000120

080159b8 <rshift>:
 80159b8:	0002      	movs	r2, r0
 80159ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159bc:	6907      	ldr	r7, [r0, #16]
 80159be:	3214      	adds	r2, #20
 80159c0:	0013      	movs	r3, r2
 80159c2:	b085      	sub	sp, #20
 80159c4:	114e      	asrs	r6, r1, #5
 80159c6:	42b7      	cmp	r7, r6
 80159c8:	dd31      	ble.n	8015a2e <rshift+0x76>
 80159ca:	00b3      	lsls	r3, r6, #2
 80159cc:	18d3      	adds	r3, r2, r3
 80159ce:	251f      	movs	r5, #31
 80159d0:	9301      	str	r3, [sp, #4]
 80159d2:	000b      	movs	r3, r1
 80159d4:	00bc      	lsls	r4, r7, #2
 80159d6:	402b      	ands	r3, r5
 80159d8:	1914      	adds	r4, r2, r4
 80159da:	9302      	str	r3, [sp, #8]
 80159dc:	4229      	tst	r1, r5
 80159de:	d10c      	bne.n	80159fa <rshift+0x42>
 80159e0:	0015      	movs	r5, r2
 80159e2:	9901      	ldr	r1, [sp, #4]
 80159e4:	428c      	cmp	r4, r1
 80159e6:	d838      	bhi.n	8015a5a <rshift+0xa2>
 80159e8:	9901      	ldr	r1, [sp, #4]
 80159ea:	2300      	movs	r3, #0
 80159ec:	3903      	subs	r1, #3
 80159ee:	428c      	cmp	r4, r1
 80159f0:	d301      	bcc.n	80159f6 <rshift+0x3e>
 80159f2:	1bbb      	subs	r3, r7, r6
 80159f4:	009b      	lsls	r3, r3, #2
 80159f6:	18d3      	adds	r3, r2, r3
 80159f8:	e019      	b.n	8015a2e <rshift+0x76>
 80159fa:	2120      	movs	r1, #32
 80159fc:	9b02      	ldr	r3, [sp, #8]
 80159fe:	9d01      	ldr	r5, [sp, #4]
 8015a00:	1acb      	subs	r3, r1, r3
 8015a02:	9303      	str	r3, [sp, #12]
 8015a04:	cd02      	ldmia	r5!, {r1}
 8015a06:	9b02      	ldr	r3, [sp, #8]
 8015a08:	4694      	mov	ip, r2
 8015a0a:	40d9      	lsrs	r1, r3
 8015a0c:	9100      	str	r1, [sp, #0]
 8015a0e:	42ac      	cmp	r4, r5
 8015a10:	d816      	bhi.n	8015a40 <rshift+0x88>
 8015a12:	9d01      	ldr	r5, [sp, #4]
 8015a14:	2300      	movs	r3, #0
 8015a16:	3501      	adds	r5, #1
 8015a18:	42ac      	cmp	r4, r5
 8015a1a:	d302      	bcc.n	8015a22 <rshift+0x6a>
 8015a1c:	1bbb      	subs	r3, r7, r6
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	3b04      	subs	r3, #4
 8015a22:	9900      	ldr	r1, [sp, #0]
 8015a24:	18d3      	adds	r3, r2, r3
 8015a26:	6019      	str	r1, [r3, #0]
 8015a28:	2900      	cmp	r1, #0
 8015a2a:	d000      	beq.n	8015a2e <rshift+0x76>
 8015a2c:	3304      	adds	r3, #4
 8015a2e:	1a99      	subs	r1, r3, r2
 8015a30:	1089      	asrs	r1, r1, #2
 8015a32:	6101      	str	r1, [r0, #16]
 8015a34:	4293      	cmp	r3, r2
 8015a36:	d101      	bne.n	8015a3c <rshift+0x84>
 8015a38:	2300      	movs	r3, #0
 8015a3a:	6143      	str	r3, [r0, #20]
 8015a3c:	b005      	add	sp, #20
 8015a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a40:	682b      	ldr	r3, [r5, #0]
 8015a42:	9903      	ldr	r1, [sp, #12]
 8015a44:	408b      	lsls	r3, r1
 8015a46:	9900      	ldr	r1, [sp, #0]
 8015a48:	4319      	orrs	r1, r3
 8015a4a:	4663      	mov	r3, ip
 8015a4c:	c302      	stmia	r3!, {r1}
 8015a4e:	469c      	mov	ip, r3
 8015a50:	cd02      	ldmia	r5!, {r1}
 8015a52:	9b02      	ldr	r3, [sp, #8]
 8015a54:	40d9      	lsrs	r1, r3
 8015a56:	9100      	str	r1, [sp, #0]
 8015a58:	e7d9      	b.n	8015a0e <rshift+0x56>
 8015a5a:	c908      	ldmia	r1!, {r3}
 8015a5c:	c508      	stmia	r5!, {r3}
 8015a5e:	e7c1      	b.n	80159e4 <rshift+0x2c>

08015a60 <__hexdig_fun>:
 8015a60:	0002      	movs	r2, r0
 8015a62:	3a30      	subs	r2, #48	; 0x30
 8015a64:	0003      	movs	r3, r0
 8015a66:	2a09      	cmp	r2, #9
 8015a68:	d802      	bhi.n	8015a70 <__hexdig_fun+0x10>
 8015a6a:	3b20      	subs	r3, #32
 8015a6c:	b2d8      	uxtb	r0, r3
 8015a6e:	4770      	bx	lr
 8015a70:	0002      	movs	r2, r0
 8015a72:	3a61      	subs	r2, #97	; 0x61
 8015a74:	2a05      	cmp	r2, #5
 8015a76:	d801      	bhi.n	8015a7c <__hexdig_fun+0x1c>
 8015a78:	3b47      	subs	r3, #71	; 0x47
 8015a7a:	e7f7      	b.n	8015a6c <__hexdig_fun+0xc>
 8015a7c:	001a      	movs	r2, r3
 8015a7e:	3a41      	subs	r2, #65	; 0x41
 8015a80:	2000      	movs	r0, #0
 8015a82:	2a05      	cmp	r2, #5
 8015a84:	d8f3      	bhi.n	8015a6e <__hexdig_fun+0xe>
 8015a86:	3b27      	subs	r3, #39	; 0x27
 8015a88:	e7f0      	b.n	8015a6c <__hexdig_fun+0xc>
	...

08015a8c <__gethex>:
 8015a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a8e:	b08d      	sub	sp, #52	; 0x34
 8015a90:	930a      	str	r3, [sp, #40]	; 0x28
 8015a92:	4bbd      	ldr	r3, [pc, #756]	; (8015d88 <__gethex+0x2fc>)
 8015a94:	9005      	str	r0, [sp, #20]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	9109      	str	r1, [sp, #36]	; 0x24
 8015a9a:	0018      	movs	r0, r3
 8015a9c:	9202      	str	r2, [sp, #8]
 8015a9e:	9307      	str	r3, [sp, #28]
 8015aa0:	f7ea fb3a 	bl	8000118 <strlen>
 8015aa4:	2202      	movs	r2, #2
 8015aa6:	9b07      	ldr	r3, [sp, #28]
 8015aa8:	4252      	negs	r2, r2
 8015aaa:	181b      	adds	r3, r3, r0
 8015aac:	3b01      	subs	r3, #1
 8015aae:	781b      	ldrb	r3, [r3, #0]
 8015ab0:	9003      	str	r0, [sp, #12]
 8015ab2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ab6:	6819      	ldr	r1, [r3, #0]
 8015ab8:	1c8b      	adds	r3, r1, #2
 8015aba:	1a52      	subs	r2, r2, r1
 8015abc:	18d1      	adds	r1, r2, r3
 8015abe:	9301      	str	r3, [sp, #4]
 8015ac0:	9108      	str	r1, [sp, #32]
 8015ac2:	9901      	ldr	r1, [sp, #4]
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	7808      	ldrb	r0, [r1, #0]
 8015ac8:	2830      	cmp	r0, #48	; 0x30
 8015aca:	d0f7      	beq.n	8015abc <__gethex+0x30>
 8015acc:	f7ff ffc8 	bl	8015a60 <__hexdig_fun>
 8015ad0:	1e04      	subs	r4, r0, #0
 8015ad2:	d13e      	bne.n	8015b52 <__gethex+0xc6>
 8015ad4:	9a03      	ldr	r2, [sp, #12]
 8015ad6:	9907      	ldr	r1, [sp, #28]
 8015ad8:	9801      	ldr	r0, [sp, #4]
 8015ada:	f7fe f922 	bl	8013d22 <strncmp>
 8015ade:	1e07      	subs	r7, r0, #0
 8015ae0:	d000      	beq.n	8015ae4 <__gethex+0x58>
 8015ae2:	e06f      	b.n	8015bc4 <__gethex+0x138>
 8015ae4:	9b01      	ldr	r3, [sp, #4]
 8015ae6:	9a03      	ldr	r2, [sp, #12]
 8015ae8:	5c98      	ldrb	r0, [r3, r2]
 8015aea:	189d      	adds	r5, r3, r2
 8015aec:	f7ff ffb8 	bl	8015a60 <__hexdig_fun>
 8015af0:	2301      	movs	r3, #1
 8015af2:	9304      	str	r3, [sp, #16]
 8015af4:	2800      	cmp	r0, #0
 8015af6:	d034      	beq.n	8015b62 <__gethex+0xd6>
 8015af8:	9501      	str	r5, [sp, #4]
 8015afa:	9b01      	ldr	r3, [sp, #4]
 8015afc:	7818      	ldrb	r0, [r3, #0]
 8015afe:	2830      	cmp	r0, #48	; 0x30
 8015b00:	d009      	beq.n	8015b16 <__gethex+0x8a>
 8015b02:	f7ff ffad 	bl	8015a60 <__hexdig_fun>
 8015b06:	4243      	negs	r3, r0
 8015b08:	4143      	adcs	r3, r0
 8015b0a:	9304      	str	r3, [sp, #16]
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	002c      	movs	r4, r5
 8015b10:	9308      	str	r3, [sp, #32]
 8015b12:	9d01      	ldr	r5, [sp, #4]
 8015b14:	e004      	b.n	8015b20 <__gethex+0x94>
 8015b16:	9b01      	ldr	r3, [sp, #4]
 8015b18:	3301      	adds	r3, #1
 8015b1a:	9301      	str	r3, [sp, #4]
 8015b1c:	e7ed      	b.n	8015afa <__gethex+0x6e>
 8015b1e:	3501      	adds	r5, #1
 8015b20:	7828      	ldrb	r0, [r5, #0]
 8015b22:	f7ff ff9d 	bl	8015a60 <__hexdig_fun>
 8015b26:	1e07      	subs	r7, r0, #0
 8015b28:	d1f9      	bne.n	8015b1e <__gethex+0x92>
 8015b2a:	0028      	movs	r0, r5
 8015b2c:	9a03      	ldr	r2, [sp, #12]
 8015b2e:	9907      	ldr	r1, [sp, #28]
 8015b30:	f7fe f8f7 	bl	8013d22 <strncmp>
 8015b34:	2800      	cmp	r0, #0
 8015b36:	d112      	bne.n	8015b5e <__gethex+0xd2>
 8015b38:	2c00      	cmp	r4, #0
 8015b3a:	d107      	bne.n	8015b4c <__gethex+0xc0>
 8015b3c:	9b03      	ldr	r3, [sp, #12]
 8015b3e:	18ed      	adds	r5, r5, r3
 8015b40:	002c      	movs	r4, r5
 8015b42:	7828      	ldrb	r0, [r5, #0]
 8015b44:	f7ff ff8c 	bl	8015a60 <__hexdig_fun>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d106      	bne.n	8015b5a <__gethex+0xce>
 8015b4c:	1b67      	subs	r7, r4, r5
 8015b4e:	00bf      	lsls	r7, r7, #2
 8015b50:	e007      	b.n	8015b62 <__gethex+0xd6>
 8015b52:	2300      	movs	r3, #0
 8015b54:	001c      	movs	r4, r3
 8015b56:	9304      	str	r3, [sp, #16]
 8015b58:	e7db      	b.n	8015b12 <__gethex+0x86>
 8015b5a:	3501      	adds	r5, #1
 8015b5c:	e7f1      	b.n	8015b42 <__gethex+0xb6>
 8015b5e:	2c00      	cmp	r4, #0
 8015b60:	d1f4      	bne.n	8015b4c <__gethex+0xc0>
 8015b62:	2220      	movs	r2, #32
 8015b64:	782b      	ldrb	r3, [r5, #0]
 8015b66:	002e      	movs	r6, r5
 8015b68:	4393      	bics	r3, r2
 8015b6a:	2b50      	cmp	r3, #80	; 0x50
 8015b6c:	d11d      	bne.n	8015baa <__gethex+0x11e>
 8015b6e:	786b      	ldrb	r3, [r5, #1]
 8015b70:	2b2b      	cmp	r3, #43	; 0x2b
 8015b72:	d02c      	beq.n	8015bce <__gethex+0x142>
 8015b74:	2b2d      	cmp	r3, #45	; 0x2d
 8015b76:	d02e      	beq.n	8015bd6 <__gethex+0x14a>
 8015b78:	2300      	movs	r3, #0
 8015b7a:	1c6e      	adds	r6, r5, #1
 8015b7c:	9306      	str	r3, [sp, #24]
 8015b7e:	7830      	ldrb	r0, [r6, #0]
 8015b80:	f7ff ff6e 	bl	8015a60 <__hexdig_fun>
 8015b84:	1e43      	subs	r3, r0, #1
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	2b18      	cmp	r3, #24
 8015b8a:	d82b      	bhi.n	8015be4 <__gethex+0x158>
 8015b8c:	3810      	subs	r0, #16
 8015b8e:	0004      	movs	r4, r0
 8015b90:	7870      	ldrb	r0, [r6, #1]
 8015b92:	f7ff ff65 	bl	8015a60 <__hexdig_fun>
 8015b96:	1e43      	subs	r3, r0, #1
 8015b98:	b2db      	uxtb	r3, r3
 8015b9a:	3601      	adds	r6, #1
 8015b9c:	2b18      	cmp	r3, #24
 8015b9e:	d91c      	bls.n	8015bda <__gethex+0x14e>
 8015ba0:	9b06      	ldr	r3, [sp, #24]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d000      	beq.n	8015ba8 <__gethex+0x11c>
 8015ba6:	4264      	negs	r4, r4
 8015ba8:	193f      	adds	r7, r7, r4
 8015baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bac:	601e      	str	r6, [r3, #0]
 8015bae:	9b04      	ldr	r3, [sp, #16]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d019      	beq.n	8015be8 <__gethex+0x15c>
 8015bb4:	2600      	movs	r6, #0
 8015bb6:	9b08      	ldr	r3, [sp, #32]
 8015bb8:	42b3      	cmp	r3, r6
 8015bba:	d100      	bne.n	8015bbe <__gethex+0x132>
 8015bbc:	3606      	adds	r6, #6
 8015bbe:	0030      	movs	r0, r6
 8015bc0:	b00d      	add	sp, #52	; 0x34
 8015bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	0027      	movs	r7, r4
 8015bc8:	9d01      	ldr	r5, [sp, #4]
 8015bca:	9304      	str	r3, [sp, #16]
 8015bcc:	e7c9      	b.n	8015b62 <__gethex+0xd6>
 8015bce:	2300      	movs	r3, #0
 8015bd0:	9306      	str	r3, [sp, #24]
 8015bd2:	1cae      	adds	r6, r5, #2
 8015bd4:	e7d3      	b.n	8015b7e <__gethex+0xf2>
 8015bd6:	2301      	movs	r3, #1
 8015bd8:	e7fa      	b.n	8015bd0 <__gethex+0x144>
 8015bda:	230a      	movs	r3, #10
 8015bdc:	435c      	muls	r4, r3
 8015bde:	1824      	adds	r4, r4, r0
 8015be0:	3c10      	subs	r4, #16
 8015be2:	e7d5      	b.n	8015b90 <__gethex+0x104>
 8015be4:	002e      	movs	r6, r5
 8015be6:	e7e0      	b.n	8015baa <__gethex+0x11e>
 8015be8:	9b01      	ldr	r3, [sp, #4]
 8015bea:	9904      	ldr	r1, [sp, #16]
 8015bec:	1aeb      	subs	r3, r5, r3
 8015bee:	3b01      	subs	r3, #1
 8015bf0:	2b07      	cmp	r3, #7
 8015bf2:	dc0a      	bgt.n	8015c0a <__gethex+0x17e>
 8015bf4:	9805      	ldr	r0, [sp, #20]
 8015bf6:	f000 fa83 	bl	8016100 <_Balloc>
 8015bfa:	1e04      	subs	r4, r0, #0
 8015bfc:	d108      	bne.n	8015c10 <__gethex+0x184>
 8015bfe:	0002      	movs	r2, r0
 8015c00:	21de      	movs	r1, #222	; 0xde
 8015c02:	4b62      	ldr	r3, [pc, #392]	; (8015d8c <__gethex+0x300>)
 8015c04:	4862      	ldr	r0, [pc, #392]	; (8015d90 <__gethex+0x304>)
 8015c06:	f7fe fff9 	bl	8014bfc <__assert_func>
 8015c0a:	3101      	adds	r1, #1
 8015c0c:	105b      	asrs	r3, r3, #1
 8015c0e:	e7ef      	b.n	8015bf0 <__gethex+0x164>
 8015c10:	0003      	movs	r3, r0
 8015c12:	3314      	adds	r3, #20
 8015c14:	9304      	str	r3, [sp, #16]
 8015c16:	9309      	str	r3, [sp, #36]	; 0x24
 8015c18:	2300      	movs	r3, #0
 8015c1a:	001e      	movs	r6, r3
 8015c1c:	9306      	str	r3, [sp, #24]
 8015c1e:	9b01      	ldr	r3, [sp, #4]
 8015c20:	42ab      	cmp	r3, r5
 8015c22:	d340      	bcc.n	8015ca6 <__gethex+0x21a>
 8015c24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015c26:	9b04      	ldr	r3, [sp, #16]
 8015c28:	c540      	stmia	r5!, {r6}
 8015c2a:	1aed      	subs	r5, r5, r3
 8015c2c:	10ad      	asrs	r5, r5, #2
 8015c2e:	0030      	movs	r0, r6
 8015c30:	6125      	str	r5, [r4, #16]
 8015c32:	f000 fb5d 	bl	80162f0 <__hi0bits>
 8015c36:	9b02      	ldr	r3, [sp, #8]
 8015c38:	016d      	lsls	r5, r5, #5
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	1a2e      	subs	r6, r5, r0
 8015c3e:	9301      	str	r3, [sp, #4]
 8015c40:	429e      	cmp	r6, r3
 8015c42:	dd5a      	ble.n	8015cfa <__gethex+0x26e>
 8015c44:	1af6      	subs	r6, r6, r3
 8015c46:	0031      	movs	r1, r6
 8015c48:	0020      	movs	r0, r4
 8015c4a:	f000 ff00 	bl	8016a4e <__any_on>
 8015c4e:	1e05      	subs	r5, r0, #0
 8015c50:	d016      	beq.n	8015c80 <__gethex+0x1f4>
 8015c52:	2501      	movs	r5, #1
 8015c54:	211f      	movs	r1, #31
 8015c56:	0028      	movs	r0, r5
 8015c58:	1e73      	subs	r3, r6, #1
 8015c5a:	4019      	ands	r1, r3
 8015c5c:	4088      	lsls	r0, r1
 8015c5e:	0001      	movs	r1, r0
 8015c60:	115a      	asrs	r2, r3, #5
 8015c62:	9804      	ldr	r0, [sp, #16]
 8015c64:	0092      	lsls	r2, r2, #2
 8015c66:	5812      	ldr	r2, [r2, r0]
 8015c68:	420a      	tst	r2, r1
 8015c6a:	d009      	beq.n	8015c80 <__gethex+0x1f4>
 8015c6c:	42ab      	cmp	r3, r5
 8015c6e:	dd06      	ble.n	8015c7e <__gethex+0x1f2>
 8015c70:	0020      	movs	r0, r4
 8015c72:	1eb1      	subs	r1, r6, #2
 8015c74:	f000 feeb 	bl	8016a4e <__any_on>
 8015c78:	3502      	adds	r5, #2
 8015c7a:	2800      	cmp	r0, #0
 8015c7c:	d100      	bne.n	8015c80 <__gethex+0x1f4>
 8015c7e:	2502      	movs	r5, #2
 8015c80:	0031      	movs	r1, r6
 8015c82:	0020      	movs	r0, r4
 8015c84:	f7ff fe98 	bl	80159b8 <rshift>
 8015c88:	19bf      	adds	r7, r7, r6
 8015c8a:	9b02      	ldr	r3, [sp, #8]
 8015c8c:	689b      	ldr	r3, [r3, #8]
 8015c8e:	9303      	str	r3, [sp, #12]
 8015c90:	42bb      	cmp	r3, r7
 8015c92:	da42      	bge.n	8015d1a <__gethex+0x28e>
 8015c94:	0021      	movs	r1, r4
 8015c96:	9805      	ldr	r0, [sp, #20]
 8015c98:	f000 fa76 	bl	8016188 <_Bfree>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ca0:	26a3      	movs	r6, #163	; 0xa3
 8015ca2:	6013      	str	r3, [r2, #0]
 8015ca4:	e78b      	b.n	8015bbe <__gethex+0x132>
 8015ca6:	1e6b      	subs	r3, r5, #1
 8015ca8:	9308      	str	r3, [sp, #32]
 8015caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d014      	beq.n	8015cdc <__gethex+0x250>
 8015cb2:	9b06      	ldr	r3, [sp, #24]
 8015cb4:	2b20      	cmp	r3, #32
 8015cb6:	d104      	bne.n	8015cc2 <__gethex+0x236>
 8015cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cba:	c340      	stmia	r3!, {r6}
 8015cbc:	2600      	movs	r6, #0
 8015cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8015cc0:	9606      	str	r6, [sp, #24]
 8015cc2:	9b08      	ldr	r3, [sp, #32]
 8015cc4:	7818      	ldrb	r0, [r3, #0]
 8015cc6:	f7ff fecb 	bl	8015a60 <__hexdig_fun>
 8015cca:	230f      	movs	r3, #15
 8015ccc:	4018      	ands	r0, r3
 8015cce:	9b06      	ldr	r3, [sp, #24]
 8015cd0:	9d08      	ldr	r5, [sp, #32]
 8015cd2:	4098      	lsls	r0, r3
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	4306      	orrs	r6, r0
 8015cd8:	9306      	str	r3, [sp, #24]
 8015cda:	e7a0      	b.n	8015c1e <__gethex+0x192>
 8015cdc:	2301      	movs	r3, #1
 8015cde:	9a03      	ldr	r2, [sp, #12]
 8015ce0:	1a9d      	subs	r5, r3, r2
 8015ce2:	9b08      	ldr	r3, [sp, #32]
 8015ce4:	195d      	adds	r5, r3, r5
 8015ce6:	9b01      	ldr	r3, [sp, #4]
 8015ce8:	429d      	cmp	r5, r3
 8015cea:	d3e2      	bcc.n	8015cb2 <__gethex+0x226>
 8015cec:	0028      	movs	r0, r5
 8015cee:	9907      	ldr	r1, [sp, #28]
 8015cf0:	f7fe f817 	bl	8013d22 <strncmp>
 8015cf4:	2800      	cmp	r0, #0
 8015cf6:	d1dc      	bne.n	8015cb2 <__gethex+0x226>
 8015cf8:	e791      	b.n	8015c1e <__gethex+0x192>
 8015cfa:	9b01      	ldr	r3, [sp, #4]
 8015cfc:	2500      	movs	r5, #0
 8015cfe:	429e      	cmp	r6, r3
 8015d00:	dac3      	bge.n	8015c8a <__gethex+0x1fe>
 8015d02:	1b9e      	subs	r6, r3, r6
 8015d04:	0021      	movs	r1, r4
 8015d06:	0032      	movs	r2, r6
 8015d08:	9805      	ldr	r0, [sp, #20]
 8015d0a:	f000 fc5b 	bl	80165c4 <__lshift>
 8015d0e:	0003      	movs	r3, r0
 8015d10:	3314      	adds	r3, #20
 8015d12:	0004      	movs	r4, r0
 8015d14:	1bbf      	subs	r7, r7, r6
 8015d16:	9304      	str	r3, [sp, #16]
 8015d18:	e7b7      	b.n	8015c8a <__gethex+0x1fe>
 8015d1a:	9b02      	ldr	r3, [sp, #8]
 8015d1c:	685e      	ldr	r6, [r3, #4]
 8015d1e:	42be      	cmp	r6, r7
 8015d20:	dd71      	ble.n	8015e06 <__gethex+0x37a>
 8015d22:	9b01      	ldr	r3, [sp, #4]
 8015d24:	1bf6      	subs	r6, r6, r7
 8015d26:	42b3      	cmp	r3, r6
 8015d28:	dc38      	bgt.n	8015d9c <__gethex+0x310>
 8015d2a:	9b02      	ldr	r3, [sp, #8]
 8015d2c:	68db      	ldr	r3, [r3, #12]
 8015d2e:	2b02      	cmp	r3, #2
 8015d30:	d026      	beq.n	8015d80 <__gethex+0x2f4>
 8015d32:	2b03      	cmp	r3, #3
 8015d34:	d02e      	beq.n	8015d94 <__gethex+0x308>
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d119      	bne.n	8015d6e <__gethex+0x2e2>
 8015d3a:	9b01      	ldr	r3, [sp, #4]
 8015d3c:	42b3      	cmp	r3, r6
 8015d3e:	d116      	bne.n	8015d6e <__gethex+0x2e2>
 8015d40:	2b01      	cmp	r3, #1
 8015d42:	d10d      	bne.n	8015d60 <__gethex+0x2d4>
 8015d44:	9b02      	ldr	r3, [sp, #8]
 8015d46:	2662      	movs	r6, #98	; 0x62
 8015d48:	685b      	ldr	r3, [r3, #4]
 8015d4a:	9301      	str	r3, [sp, #4]
 8015d4c:	9a01      	ldr	r2, [sp, #4]
 8015d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d50:	601a      	str	r2, [r3, #0]
 8015d52:	2301      	movs	r3, #1
 8015d54:	9a04      	ldr	r2, [sp, #16]
 8015d56:	6123      	str	r3, [r4, #16]
 8015d58:	6013      	str	r3, [r2, #0]
 8015d5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015d5c:	601c      	str	r4, [r3, #0]
 8015d5e:	e72e      	b.n	8015bbe <__gethex+0x132>
 8015d60:	9901      	ldr	r1, [sp, #4]
 8015d62:	0020      	movs	r0, r4
 8015d64:	3901      	subs	r1, #1
 8015d66:	f000 fe72 	bl	8016a4e <__any_on>
 8015d6a:	2800      	cmp	r0, #0
 8015d6c:	d1ea      	bne.n	8015d44 <__gethex+0x2b8>
 8015d6e:	0021      	movs	r1, r4
 8015d70:	9805      	ldr	r0, [sp, #20]
 8015d72:	f000 fa09 	bl	8016188 <_Bfree>
 8015d76:	2300      	movs	r3, #0
 8015d78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d7a:	2650      	movs	r6, #80	; 0x50
 8015d7c:	6013      	str	r3, [r2, #0]
 8015d7e:	e71e      	b.n	8015bbe <__gethex+0x132>
 8015d80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1f3      	bne.n	8015d6e <__gethex+0x2e2>
 8015d86:	e7dd      	b.n	8015d44 <__gethex+0x2b8>
 8015d88:	0801adec 	.word	0x0801adec
 8015d8c:	0801ad71 	.word	0x0801ad71
 8015d90:	0801ad82 	.word	0x0801ad82
 8015d94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d1d4      	bne.n	8015d44 <__gethex+0x2b8>
 8015d9a:	e7e8      	b.n	8015d6e <__gethex+0x2e2>
 8015d9c:	1e77      	subs	r7, r6, #1
 8015d9e:	2d00      	cmp	r5, #0
 8015da0:	d12f      	bne.n	8015e02 <__gethex+0x376>
 8015da2:	2f00      	cmp	r7, #0
 8015da4:	d004      	beq.n	8015db0 <__gethex+0x324>
 8015da6:	0039      	movs	r1, r7
 8015da8:	0020      	movs	r0, r4
 8015daa:	f000 fe50 	bl	8016a4e <__any_on>
 8015dae:	0005      	movs	r5, r0
 8015db0:	231f      	movs	r3, #31
 8015db2:	117a      	asrs	r2, r7, #5
 8015db4:	401f      	ands	r7, r3
 8015db6:	3b1e      	subs	r3, #30
 8015db8:	40bb      	lsls	r3, r7
 8015dba:	9904      	ldr	r1, [sp, #16]
 8015dbc:	0092      	lsls	r2, r2, #2
 8015dbe:	5852      	ldr	r2, [r2, r1]
 8015dc0:	421a      	tst	r2, r3
 8015dc2:	d001      	beq.n	8015dc8 <__gethex+0x33c>
 8015dc4:	2302      	movs	r3, #2
 8015dc6:	431d      	orrs	r5, r3
 8015dc8:	9b01      	ldr	r3, [sp, #4]
 8015dca:	0031      	movs	r1, r6
 8015dcc:	1b9b      	subs	r3, r3, r6
 8015dce:	2602      	movs	r6, #2
 8015dd0:	0020      	movs	r0, r4
 8015dd2:	9301      	str	r3, [sp, #4]
 8015dd4:	f7ff fdf0 	bl	80159b8 <rshift>
 8015dd8:	9b02      	ldr	r3, [sp, #8]
 8015dda:	685f      	ldr	r7, [r3, #4]
 8015ddc:	2d00      	cmp	r5, #0
 8015dde:	d041      	beq.n	8015e64 <__gethex+0x3d8>
 8015de0:	9b02      	ldr	r3, [sp, #8]
 8015de2:	68db      	ldr	r3, [r3, #12]
 8015de4:	2b02      	cmp	r3, #2
 8015de6:	d010      	beq.n	8015e0a <__gethex+0x37e>
 8015de8:	2b03      	cmp	r3, #3
 8015dea:	d012      	beq.n	8015e12 <__gethex+0x386>
 8015dec:	2b01      	cmp	r3, #1
 8015dee:	d106      	bne.n	8015dfe <__gethex+0x372>
 8015df0:	07aa      	lsls	r2, r5, #30
 8015df2:	d504      	bpl.n	8015dfe <__gethex+0x372>
 8015df4:	9a04      	ldr	r2, [sp, #16]
 8015df6:	6810      	ldr	r0, [r2, #0]
 8015df8:	4305      	orrs	r5, r0
 8015dfa:	421d      	tst	r5, r3
 8015dfc:	d10c      	bne.n	8015e18 <__gethex+0x38c>
 8015dfe:	2310      	movs	r3, #16
 8015e00:	e02f      	b.n	8015e62 <__gethex+0x3d6>
 8015e02:	2501      	movs	r5, #1
 8015e04:	e7d4      	b.n	8015db0 <__gethex+0x324>
 8015e06:	2601      	movs	r6, #1
 8015e08:	e7e8      	b.n	8015ddc <__gethex+0x350>
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015e0e:	1a9b      	subs	r3, r3, r2
 8015e10:	9313      	str	r3, [sp, #76]	; 0x4c
 8015e12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d0f2      	beq.n	8015dfe <__gethex+0x372>
 8015e18:	6923      	ldr	r3, [r4, #16]
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	9303      	str	r3, [sp, #12]
 8015e1e:	009b      	lsls	r3, r3, #2
 8015e20:	9304      	str	r3, [sp, #16]
 8015e22:	0023      	movs	r3, r4
 8015e24:	9a04      	ldr	r2, [sp, #16]
 8015e26:	3314      	adds	r3, #20
 8015e28:	1899      	adds	r1, r3, r2
 8015e2a:	681a      	ldr	r2, [r3, #0]
 8015e2c:	1c55      	adds	r5, r2, #1
 8015e2e:	d01e      	beq.n	8015e6e <__gethex+0x3e2>
 8015e30:	3201      	adds	r2, #1
 8015e32:	601a      	str	r2, [r3, #0]
 8015e34:	0023      	movs	r3, r4
 8015e36:	3314      	adds	r3, #20
 8015e38:	2e02      	cmp	r6, #2
 8015e3a:	d140      	bne.n	8015ebe <__gethex+0x432>
 8015e3c:	9a02      	ldr	r2, [sp, #8]
 8015e3e:	9901      	ldr	r1, [sp, #4]
 8015e40:	6812      	ldr	r2, [r2, #0]
 8015e42:	3a01      	subs	r2, #1
 8015e44:	428a      	cmp	r2, r1
 8015e46:	d10b      	bne.n	8015e60 <__gethex+0x3d4>
 8015e48:	114a      	asrs	r2, r1, #5
 8015e4a:	211f      	movs	r1, #31
 8015e4c:	9801      	ldr	r0, [sp, #4]
 8015e4e:	0092      	lsls	r2, r2, #2
 8015e50:	4001      	ands	r1, r0
 8015e52:	2001      	movs	r0, #1
 8015e54:	0005      	movs	r5, r0
 8015e56:	408d      	lsls	r5, r1
 8015e58:	58d3      	ldr	r3, [r2, r3]
 8015e5a:	422b      	tst	r3, r5
 8015e5c:	d000      	beq.n	8015e60 <__gethex+0x3d4>
 8015e5e:	2601      	movs	r6, #1
 8015e60:	2320      	movs	r3, #32
 8015e62:	431e      	orrs	r6, r3
 8015e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015e66:	601c      	str	r4, [r3, #0]
 8015e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6a:	601f      	str	r7, [r3, #0]
 8015e6c:	e6a7      	b.n	8015bbe <__gethex+0x132>
 8015e6e:	c301      	stmia	r3!, {r0}
 8015e70:	4299      	cmp	r1, r3
 8015e72:	d8da      	bhi.n	8015e2a <__gethex+0x39e>
 8015e74:	9b03      	ldr	r3, [sp, #12]
 8015e76:	68a2      	ldr	r2, [r4, #8]
 8015e78:	4293      	cmp	r3, r2
 8015e7a:	db17      	blt.n	8015eac <__gethex+0x420>
 8015e7c:	6863      	ldr	r3, [r4, #4]
 8015e7e:	9805      	ldr	r0, [sp, #20]
 8015e80:	1c59      	adds	r1, r3, #1
 8015e82:	f000 f93d 	bl	8016100 <_Balloc>
 8015e86:	1e05      	subs	r5, r0, #0
 8015e88:	d103      	bne.n	8015e92 <__gethex+0x406>
 8015e8a:	0002      	movs	r2, r0
 8015e8c:	2184      	movs	r1, #132	; 0x84
 8015e8e:	4b1c      	ldr	r3, [pc, #112]	; (8015f00 <__gethex+0x474>)
 8015e90:	e6b8      	b.n	8015c04 <__gethex+0x178>
 8015e92:	0021      	movs	r1, r4
 8015e94:	6923      	ldr	r3, [r4, #16]
 8015e96:	310c      	adds	r1, #12
 8015e98:	1c9a      	adds	r2, r3, #2
 8015e9a:	0092      	lsls	r2, r2, #2
 8015e9c:	300c      	adds	r0, #12
 8015e9e:	f7fd f93b 	bl	8013118 <memcpy>
 8015ea2:	0021      	movs	r1, r4
 8015ea4:	9805      	ldr	r0, [sp, #20]
 8015ea6:	f000 f96f 	bl	8016188 <_Bfree>
 8015eaa:	002c      	movs	r4, r5
 8015eac:	6923      	ldr	r3, [r4, #16]
 8015eae:	1c5a      	adds	r2, r3, #1
 8015eb0:	6122      	str	r2, [r4, #16]
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	3304      	adds	r3, #4
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	18e3      	adds	r3, r4, r3
 8015eba:	605a      	str	r2, [r3, #4]
 8015ebc:	e7ba      	b.n	8015e34 <__gethex+0x3a8>
 8015ebe:	6922      	ldr	r2, [r4, #16]
 8015ec0:	9903      	ldr	r1, [sp, #12]
 8015ec2:	428a      	cmp	r2, r1
 8015ec4:	dd09      	ble.n	8015eda <__gethex+0x44e>
 8015ec6:	2101      	movs	r1, #1
 8015ec8:	0020      	movs	r0, r4
 8015eca:	f7ff fd75 	bl	80159b8 <rshift>
 8015ece:	9b02      	ldr	r3, [sp, #8]
 8015ed0:	3701      	adds	r7, #1
 8015ed2:	689b      	ldr	r3, [r3, #8]
 8015ed4:	42bb      	cmp	r3, r7
 8015ed6:	dac2      	bge.n	8015e5e <__gethex+0x3d2>
 8015ed8:	e6dc      	b.n	8015c94 <__gethex+0x208>
 8015eda:	221f      	movs	r2, #31
 8015edc:	9d01      	ldr	r5, [sp, #4]
 8015ede:	9901      	ldr	r1, [sp, #4]
 8015ee0:	2601      	movs	r6, #1
 8015ee2:	4015      	ands	r5, r2
 8015ee4:	4211      	tst	r1, r2
 8015ee6:	d0bb      	beq.n	8015e60 <__gethex+0x3d4>
 8015ee8:	9a04      	ldr	r2, [sp, #16]
 8015eea:	189b      	adds	r3, r3, r2
 8015eec:	3b04      	subs	r3, #4
 8015eee:	6818      	ldr	r0, [r3, #0]
 8015ef0:	f000 f9fe 	bl	80162f0 <__hi0bits>
 8015ef4:	2320      	movs	r3, #32
 8015ef6:	1b5d      	subs	r5, r3, r5
 8015ef8:	42a8      	cmp	r0, r5
 8015efa:	dbe4      	blt.n	8015ec6 <__gethex+0x43a>
 8015efc:	e7b0      	b.n	8015e60 <__gethex+0x3d4>
 8015efe:	46c0      	nop			; (mov r8, r8)
 8015f00:	0801ad71 	.word	0x0801ad71

08015f04 <L_shift>:
 8015f04:	2308      	movs	r3, #8
 8015f06:	b570      	push	{r4, r5, r6, lr}
 8015f08:	2520      	movs	r5, #32
 8015f0a:	1a9a      	subs	r2, r3, r2
 8015f0c:	0092      	lsls	r2, r2, #2
 8015f0e:	1aad      	subs	r5, r5, r2
 8015f10:	6843      	ldr	r3, [r0, #4]
 8015f12:	6806      	ldr	r6, [r0, #0]
 8015f14:	001c      	movs	r4, r3
 8015f16:	40ac      	lsls	r4, r5
 8015f18:	40d3      	lsrs	r3, r2
 8015f1a:	4334      	orrs	r4, r6
 8015f1c:	6004      	str	r4, [r0, #0]
 8015f1e:	6043      	str	r3, [r0, #4]
 8015f20:	3004      	adds	r0, #4
 8015f22:	4288      	cmp	r0, r1
 8015f24:	d3f4      	bcc.n	8015f10 <L_shift+0xc>
 8015f26:	bd70      	pop	{r4, r5, r6, pc}

08015f28 <__match>:
 8015f28:	b530      	push	{r4, r5, lr}
 8015f2a:	6803      	ldr	r3, [r0, #0]
 8015f2c:	780c      	ldrb	r4, [r1, #0]
 8015f2e:	3301      	adds	r3, #1
 8015f30:	2c00      	cmp	r4, #0
 8015f32:	d102      	bne.n	8015f3a <__match+0x12>
 8015f34:	6003      	str	r3, [r0, #0]
 8015f36:	2001      	movs	r0, #1
 8015f38:	bd30      	pop	{r4, r5, pc}
 8015f3a:	781a      	ldrb	r2, [r3, #0]
 8015f3c:	0015      	movs	r5, r2
 8015f3e:	3d41      	subs	r5, #65	; 0x41
 8015f40:	2d19      	cmp	r5, #25
 8015f42:	d800      	bhi.n	8015f46 <__match+0x1e>
 8015f44:	3220      	adds	r2, #32
 8015f46:	3101      	adds	r1, #1
 8015f48:	42a2      	cmp	r2, r4
 8015f4a:	d0ef      	beq.n	8015f2c <__match+0x4>
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	e7f3      	b.n	8015f38 <__match+0x10>

08015f50 <__hexnan>:
 8015f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f52:	680b      	ldr	r3, [r1, #0]
 8015f54:	b08b      	sub	sp, #44	; 0x2c
 8015f56:	115c      	asrs	r4, r3, #5
 8015f58:	00a4      	lsls	r4, r4, #2
 8015f5a:	9201      	str	r2, [sp, #4]
 8015f5c:	1912      	adds	r2, r2, r4
 8015f5e:	0019      	movs	r1, r3
 8015f60:	9202      	str	r2, [sp, #8]
 8015f62:	221f      	movs	r2, #31
 8015f64:	4011      	ands	r1, r2
 8015f66:	9008      	str	r0, [sp, #32]
 8015f68:	9106      	str	r1, [sp, #24]
 8015f6a:	4213      	tst	r3, r2
 8015f6c:	d002      	beq.n	8015f74 <__hexnan+0x24>
 8015f6e:	9b02      	ldr	r3, [sp, #8]
 8015f70:	3304      	adds	r3, #4
 8015f72:	9302      	str	r3, [sp, #8]
 8015f74:	9b02      	ldr	r3, [sp, #8]
 8015f76:	2500      	movs	r5, #0
 8015f78:	1f1e      	subs	r6, r3, #4
 8015f7a:	0037      	movs	r7, r6
 8015f7c:	0034      	movs	r4, r6
 8015f7e:	9b08      	ldr	r3, [sp, #32]
 8015f80:	6035      	str	r5, [r6, #0]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	9507      	str	r5, [sp, #28]
 8015f86:	9305      	str	r3, [sp, #20]
 8015f88:	9503      	str	r5, [sp, #12]
 8015f8a:	9b05      	ldr	r3, [sp, #20]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	9309      	str	r3, [sp, #36]	; 0x24
 8015f90:	9b05      	ldr	r3, [sp, #20]
 8015f92:	785b      	ldrb	r3, [r3, #1]
 8015f94:	9304      	str	r3, [sp, #16]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d028      	beq.n	8015fec <__hexnan+0x9c>
 8015f9a:	9804      	ldr	r0, [sp, #16]
 8015f9c:	f7ff fd60 	bl	8015a60 <__hexdig_fun>
 8015fa0:	2800      	cmp	r0, #0
 8015fa2:	d154      	bne.n	801604e <__hexnan+0xfe>
 8015fa4:	9b04      	ldr	r3, [sp, #16]
 8015fa6:	2b20      	cmp	r3, #32
 8015fa8:	d819      	bhi.n	8015fde <__hexnan+0x8e>
 8015faa:	9b03      	ldr	r3, [sp, #12]
 8015fac:	9a07      	ldr	r2, [sp, #28]
 8015fae:	4293      	cmp	r3, r2
 8015fb0:	dd12      	ble.n	8015fd8 <__hexnan+0x88>
 8015fb2:	42bc      	cmp	r4, r7
 8015fb4:	d206      	bcs.n	8015fc4 <__hexnan+0x74>
 8015fb6:	2d07      	cmp	r5, #7
 8015fb8:	dc04      	bgt.n	8015fc4 <__hexnan+0x74>
 8015fba:	002a      	movs	r2, r5
 8015fbc:	0039      	movs	r1, r7
 8015fbe:	0020      	movs	r0, r4
 8015fc0:	f7ff ffa0 	bl	8015f04 <L_shift>
 8015fc4:	9b01      	ldr	r3, [sp, #4]
 8015fc6:	2508      	movs	r5, #8
 8015fc8:	429c      	cmp	r4, r3
 8015fca:	d905      	bls.n	8015fd8 <__hexnan+0x88>
 8015fcc:	1f27      	subs	r7, r4, #4
 8015fce:	2500      	movs	r5, #0
 8015fd0:	003c      	movs	r4, r7
 8015fd2:	9b03      	ldr	r3, [sp, #12]
 8015fd4:	603d      	str	r5, [r7, #0]
 8015fd6:	9307      	str	r3, [sp, #28]
 8015fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fda:	9305      	str	r3, [sp, #20]
 8015fdc:	e7d5      	b.n	8015f8a <__hexnan+0x3a>
 8015fde:	9b04      	ldr	r3, [sp, #16]
 8015fe0:	2b29      	cmp	r3, #41	; 0x29
 8015fe2:	d158      	bne.n	8016096 <__hexnan+0x146>
 8015fe4:	9b05      	ldr	r3, [sp, #20]
 8015fe6:	9a08      	ldr	r2, [sp, #32]
 8015fe8:	3302      	adds	r3, #2
 8015fea:	6013      	str	r3, [r2, #0]
 8015fec:	9b03      	ldr	r3, [sp, #12]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d051      	beq.n	8016096 <__hexnan+0x146>
 8015ff2:	42bc      	cmp	r4, r7
 8015ff4:	d206      	bcs.n	8016004 <__hexnan+0xb4>
 8015ff6:	2d07      	cmp	r5, #7
 8015ff8:	dc04      	bgt.n	8016004 <__hexnan+0xb4>
 8015ffa:	002a      	movs	r2, r5
 8015ffc:	0039      	movs	r1, r7
 8015ffe:	0020      	movs	r0, r4
 8016000:	f7ff ff80 	bl	8015f04 <L_shift>
 8016004:	9b01      	ldr	r3, [sp, #4]
 8016006:	429c      	cmp	r4, r3
 8016008:	d935      	bls.n	8016076 <__hexnan+0x126>
 801600a:	001a      	movs	r2, r3
 801600c:	0023      	movs	r3, r4
 801600e:	cb02      	ldmia	r3!, {r1}
 8016010:	c202      	stmia	r2!, {r1}
 8016012:	429e      	cmp	r6, r3
 8016014:	d2fb      	bcs.n	801600e <__hexnan+0xbe>
 8016016:	9b02      	ldr	r3, [sp, #8]
 8016018:	1c61      	adds	r1, r4, #1
 801601a:	1eda      	subs	r2, r3, #3
 801601c:	2304      	movs	r3, #4
 801601e:	4291      	cmp	r1, r2
 8016020:	d805      	bhi.n	801602e <__hexnan+0xde>
 8016022:	9b02      	ldr	r3, [sp, #8]
 8016024:	3b04      	subs	r3, #4
 8016026:	1b1c      	subs	r4, r3, r4
 8016028:	08a4      	lsrs	r4, r4, #2
 801602a:	3401      	adds	r4, #1
 801602c:	00a3      	lsls	r3, r4, #2
 801602e:	9a01      	ldr	r2, [sp, #4]
 8016030:	18d4      	adds	r4, r2, r3
 8016032:	2300      	movs	r3, #0
 8016034:	c408      	stmia	r4!, {r3}
 8016036:	42a6      	cmp	r6, r4
 8016038:	d2fc      	bcs.n	8016034 <__hexnan+0xe4>
 801603a:	6833      	ldr	r3, [r6, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d104      	bne.n	801604a <__hexnan+0xfa>
 8016040:	9b01      	ldr	r3, [sp, #4]
 8016042:	429e      	cmp	r6, r3
 8016044:	d125      	bne.n	8016092 <__hexnan+0x142>
 8016046:	2301      	movs	r3, #1
 8016048:	6033      	str	r3, [r6, #0]
 801604a:	2005      	movs	r0, #5
 801604c:	e024      	b.n	8016098 <__hexnan+0x148>
 801604e:	9b03      	ldr	r3, [sp, #12]
 8016050:	3501      	adds	r5, #1
 8016052:	3301      	adds	r3, #1
 8016054:	9303      	str	r3, [sp, #12]
 8016056:	2d08      	cmp	r5, #8
 8016058:	dd06      	ble.n	8016068 <__hexnan+0x118>
 801605a:	9b01      	ldr	r3, [sp, #4]
 801605c:	429c      	cmp	r4, r3
 801605e:	d9bb      	bls.n	8015fd8 <__hexnan+0x88>
 8016060:	2300      	movs	r3, #0
 8016062:	2501      	movs	r5, #1
 8016064:	3c04      	subs	r4, #4
 8016066:	6023      	str	r3, [r4, #0]
 8016068:	220f      	movs	r2, #15
 801606a:	6823      	ldr	r3, [r4, #0]
 801606c:	4010      	ands	r0, r2
 801606e:	011b      	lsls	r3, r3, #4
 8016070:	4318      	orrs	r0, r3
 8016072:	6020      	str	r0, [r4, #0]
 8016074:	e7b0      	b.n	8015fd8 <__hexnan+0x88>
 8016076:	9b06      	ldr	r3, [sp, #24]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d0de      	beq.n	801603a <__hexnan+0xea>
 801607c:	2220      	movs	r2, #32
 801607e:	1ad2      	subs	r2, r2, r3
 8016080:	2301      	movs	r3, #1
 8016082:	425b      	negs	r3, r3
 8016084:	40d3      	lsrs	r3, r2
 8016086:	9c02      	ldr	r4, [sp, #8]
 8016088:	3c04      	subs	r4, #4
 801608a:	6822      	ldr	r2, [r4, #0]
 801608c:	4013      	ands	r3, r2
 801608e:	6023      	str	r3, [r4, #0]
 8016090:	e7d3      	b.n	801603a <__hexnan+0xea>
 8016092:	3e04      	subs	r6, #4
 8016094:	e7d1      	b.n	801603a <__hexnan+0xea>
 8016096:	2004      	movs	r0, #4
 8016098:	b00b      	add	sp, #44	; 0x2c
 801609a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801609c <_localeconv_r>:
 801609c:	4800      	ldr	r0, [pc, #0]	; (80160a0 <_localeconv_r+0x4>)
 801609e:	4770      	bx	lr
 80160a0:	20000278 	.word	0x20000278

080160a4 <__ascii_mbtowc>:
 80160a4:	b082      	sub	sp, #8
 80160a6:	2900      	cmp	r1, #0
 80160a8:	d100      	bne.n	80160ac <__ascii_mbtowc+0x8>
 80160aa:	a901      	add	r1, sp, #4
 80160ac:	1e10      	subs	r0, r2, #0
 80160ae:	d006      	beq.n	80160be <__ascii_mbtowc+0x1a>
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d006      	beq.n	80160c2 <__ascii_mbtowc+0x1e>
 80160b4:	7813      	ldrb	r3, [r2, #0]
 80160b6:	600b      	str	r3, [r1, #0]
 80160b8:	7810      	ldrb	r0, [r2, #0]
 80160ba:	1e43      	subs	r3, r0, #1
 80160bc:	4198      	sbcs	r0, r3
 80160be:	b002      	add	sp, #8
 80160c0:	4770      	bx	lr
 80160c2:	2002      	movs	r0, #2
 80160c4:	4240      	negs	r0, r0
 80160c6:	e7fa      	b.n	80160be <__ascii_mbtowc+0x1a>

080160c8 <memchr>:
 80160c8:	b2c9      	uxtb	r1, r1
 80160ca:	1882      	adds	r2, r0, r2
 80160cc:	4290      	cmp	r0, r2
 80160ce:	d101      	bne.n	80160d4 <memchr+0xc>
 80160d0:	2000      	movs	r0, #0
 80160d2:	4770      	bx	lr
 80160d4:	7803      	ldrb	r3, [r0, #0]
 80160d6:	428b      	cmp	r3, r1
 80160d8:	d0fb      	beq.n	80160d2 <memchr+0xa>
 80160da:	3001      	adds	r0, #1
 80160dc:	e7f6      	b.n	80160cc <memchr+0x4>
	...

080160e0 <__malloc_lock>:
 80160e0:	b510      	push	{r4, lr}
 80160e2:	4802      	ldr	r0, [pc, #8]	; (80160ec <__malloc_lock+0xc>)
 80160e4:	f001 fa87 	bl	80175f6 <__retarget_lock_acquire_recursive>
 80160e8:	bd10      	pop	{r4, pc}
 80160ea:	46c0      	nop			; (mov r8, r8)
 80160ec:	20005cc0 	.word	0x20005cc0

080160f0 <__malloc_unlock>:
 80160f0:	b510      	push	{r4, lr}
 80160f2:	4802      	ldr	r0, [pc, #8]	; (80160fc <__malloc_unlock+0xc>)
 80160f4:	f001 fa80 	bl	80175f8 <__retarget_lock_release_recursive>
 80160f8:	bd10      	pop	{r4, pc}
 80160fa:	46c0      	nop			; (mov r8, r8)
 80160fc:	20005cc0 	.word	0x20005cc0

08016100 <_Balloc>:
 8016100:	b570      	push	{r4, r5, r6, lr}
 8016102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016104:	0006      	movs	r6, r0
 8016106:	000c      	movs	r4, r1
 8016108:	2d00      	cmp	r5, #0
 801610a:	d10e      	bne.n	801612a <_Balloc+0x2a>
 801610c:	2010      	movs	r0, #16
 801610e:	f7fc ffe1 	bl	80130d4 <malloc>
 8016112:	1e02      	subs	r2, r0, #0
 8016114:	6270      	str	r0, [r6, #36]	; 0x24
 8016116:	d104      	bne.n	8016122 <_Balloc+0x22>
 8016118:	2166      	movs	r1, #102	; 0x66
 801611a:	4b19      	ldr	r3, [pc, #100]	; (8016180 <_Balloc+0x80>)
 801611c:	4819      	ldr	r0, [pc, #100]	; (8016184 <_Balloc+0x84>)
 801611e:	f7fe fd6d 	bl	8014bfc <__assert_func>
 8016122:	6045      	str	r5, [r0, #4]
 8016124:	6085      	str	r5, [r0, #8]
 8016126:	6005      	str	r5, [r0, #0]
 8016128:	60c5      	str	r5, [r0, #12]
 801612a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 801612c:	68eb      	ldr	r3, [r5, #12]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d013      	beq.n	801615a <_Balloc+0x5a>
 8016132:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016134:	00a2      	lsls	r2, r4, #2
 8016136:	68db      	ldr	r3, [r3, #12]
 8016138:	189b      	adds	r3, r3, r2
 801613a:	6818      	ldr	r0, [r3, #0]
 801613c:	2800      	cmp	r0, #0
 801613e:	d118      	bne.n	8016172 <_Balloc+0x72>
 8016140:	2101      	movs	r1, #1
 8016142:	000d      	movs	r5, r1
 8016144:	40a5      	lsls	r5, r4
 8016146:	1d6a      	adds	r2, r5, #5
 8016148:	0030      	movs	r0, r6
 801614a:	0092      	lsls	r2, r2, #2
 801614c:	f000 fca2 	bl	8016a94 <_calloc_r>
 8016150:	2800      	cmp	r0, #0
 8016152:	d00c      	beq.n	801616e <_Balloc+0x6e>
 8016154:	6044      	str	r4, [r0, #4]
 8016156:	6085      	str	r5, [r0, #8]
 8016158:	e00d      	b.n	8016176 <_Balloc+0x76>
 801615a:	2221      	movs	r2, #33	; 0x21
 801615c:	2104      	movs	r1, #4
 801615e:	0030      	movs	r0, r6
 8016160:	f000 fc98 	bl	8016a94 <_calloc_r>
 8016164:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016166:	60e8      	str	r0, [r5, #12]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d1e1      	bne.n	8016132 <_Balloc+0x32>
 801616e:	2000      	movs	r0, #0
 8016170:	bd70      	pop	{r4, r5, r6, pc}
 8016172:	6802      	ldr	r2, [r0, #0]
 8016174:	601a      	str	r2, [r3, #0]
 8016176:	2300      	movs	r3, #0
 8016178:	6103      	str	r3, [r0, #16]
 801617a:	60c3      	str	r3, [r0, #12]
 801617c:	e7f8      	b.n	8016170 <_Balloc+0x70>
 801617e:	46c0      	nop			; (mov r8, r8)
 8016180:	0801ab9c 	.word	0x0801ab9c
 8016184:	0801ae00 	.word	0x0801ae00

08016188 <_Bfree>:
 8016188:	b570      	push	{r4, r5, r6, lr}
 801618a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801618c:	0005      	movs	r5, r0
 801618e:	000c      	movs	r4, r1
 8016190:	2e00      	cmp	r6, #0
 8016192:	d10e      	bne.n	80161b2 <_Bfree+0x2a>
 8016194:	2010      	movs	r0, #16
 8016196:	f7fc ff9d 	bl	80130d4 <malloc>
 801619a:	1e02      	subs	r2, r0, #0
 801619c:	6268      	str	r0, [r5, #36]	; 0x24
 801619e:	d104      	bne.n	80161aa <_Bfree+0x22>
 80161a0:	218a      	movs	r1, #138	; 0x8a
 80161a2:	4b09      	ldr	r3, [pc, #36]	; (80161c8 <_Bfree+0x40>)
 80161a4:	4809      	ldr	r0, [pc, #36]	; (80161cc <_Bfree+0x44>)
 80161a6:	f7fe fd29 	bl	8014bfc <__assert_func>
 80161aa:	6046      	str	r6, [r0, #4]
 80161ac:	6086      	str	r6, [r0, #8]
 80161ae:	6006      	str	r6, [r0, #0]
 80161b0:	60c6      	str	r6, [r0, #12]
 80161b2:	2c00      	cmp	r4, #0
 80161b4:	d007      	beq.n	80161c6 <_Bfree+0x3e>
 80161b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80161b8:	6862      	ldr	r2, [r4, #4]
 80161ba:	68db      	ldr	r3, [r3, #12]
 80161bc:	0092      	lsls	r2, r2, #2
 80161be:	189b      	adds	r3, r3, r2
 80161c0:	681a      	ldr	r2, [r3, #0]
 80161c2:	6022      	str	r2, [r4, #0]
 80161c4:	601c      	str	r4, [r3, #0]
 80161c6:	bd70      	pop	{r4, r5, r6, pc}
 80161c8:	0801ab9c 	.word	0x0801ab9c
 80161cc:	0801ae00 	.word	0x0801ae00

080161d0 <__multadd>:
 80161d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161d2:	000e      	movs	r6, r1
 80161d4:	9001      	str	r0, [sp, #4]
 80161d6:	000c      	movs	r4, r1
 80161d8:	001d      	movs	r5, r3
 80161da:	2000      	movs	r0, #0
 80161dc:	690f      	ldr	r7, [r1, #16]
 80161de:	3614      	adds	r6, #20
 80161e0:	6833      	ldr	r3, [r6, #0]
 80161e2:	3001      	adds	r0, #1
 80161e4:	b299      	uxth	r1, r3
 80161e6:	4351      	muls	r1, r2
 80161e8:	0c1b      	lsrs	r3, r3, #16
 80161ea:	4353      	muls	r3, r2
 80161ec:	1949      	adds	r1, r1, r5
 80161ee:	0c0d      	lsrs	r5, r1, #16
 80161f0:	195b      	adds	r3, r3, r5
 80161f2:	0c1d      	lsrs	r5, r3, #16
 80161f4:	b289      	uxth	r1, r1
 80161f6:	041b      	lsls	r3, r3, #16
 80161f8:	185b      	adds	r3, r3, r1
 80161fa:	c608      	stmia	r6!, {r3}
 80161fc:	4287      	cmp	r7, r0
 80161fe:	dcef      	bgt.n	80161e0 <__multadd+0x10>
 8016200:	2d00      	cmp	r5, #0
 8016202:	d022      	beq.n	801624a <__multadd+0x7a>
 8016204:	68a3      	ldr	r3, [r4, #8]
 8016206:	42bb      	cmp	r3, r7
 8016208:	dc19      	bgt.n	801623e <__multadd+0x6e>
 801620a:	6863      	ldr	r3, [r4, #4]
 801620c:	9801      	ldr	r0, [sp, #4]
 801620e:	1c59      	adds	r1, r3, #1
 8016210:	f7ff ff76 	bl	8016100 <_Balloc>
 8016214:	1e06      	subs	r6, r0, #0
 8016216:	d105      	bne.n	8016224 <__multadd+0x54>
 8016218:	0002      	movs	r2, r0
 801621a:	21b5      	movs	r1, #181	; 0xb5
 801621c:	4b0c      	ldr	r3, [pc, #48]	; (8016250 <__multadd+0x80>)
 801621e:	480d      	ldr	r0, [pc, #52]	; (8016254 <__multadd+0x84>)
 8016220:	f7fe fcec 	bl	8014bfc <__assert_func>
 8016224:	0021      	movs	r1, r4
 8016226:	6923      	ldr	r3, [r4, #16]
 8016228:	310c      	adds	r1, #12
 801622a:	1c9a      	adds	r2, r3, #2
 801622c:	0092      	lsls	r2, r2, #2
 801622e:	300c      	adds	r0, #12
 8016230:	f7fc ff72 	bl	8013118 <memcpy>
 8016234:	0021      	movs	r1, r4
 8016236:	9801      	ldr	r0, [sp, #4]
 8016238:	f7ff ffa6 	bl	8016188 <_Bfree>
 801623c:	0034      	movs	r4, r6
 801623e:	1d3b      	adds	r3, r7, #4
 8016240:	009b      	lsls	r3, r3, #2
 8016242:	18e3      	adds	r3, r4, r3
 8016244:	605d      	str	r5, [r3, #4]
 8016246:	1c7b      	adds	r3, r7, #1
 8016248:	6123      	str	r3, [r4, #16]
 801624a:	0020      	movs	r0, r4
 801624c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801624e:	46c0      	nop			; (mov r8, r8)
 8016250:	0801ad71 	.word	0x0801ad71
 8016254:	0801ae00 	.word	0x0801ae00

08016258 <__s2b>:
 8016258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801625a:	0006      	movs	r6, r0
 801625c:	0018      	movs	r0, r3
 801625e:	000c      	movs	r4, r1
 8016260:	3008      	adds	r0, #8
 8016262:	2109      	movs	r1, #9
 8016264:	9301      	str	r3, [sp, #4]
 8016266:	0015      	movs	r5, r2
 8016268:	f7e9 fffc 	bl	8000264 <__divsi3>
 801626c:	2301      	movs	r3, #1
 801626e:	2100      	movs	r1, #0
 8016270:	4283      	cmp	r3, r0
 8016272:	db0a      	blt.n	801628a <__s2b+0x32>
 8016274:	0030      	movs	r0, r6
 8016276:	f7ff ff43 	bl	8016100 <_Balloc>
 801627a:	1e01      	subs	r1, r0, #0
 801627c:	d108      	bne.n	8016290 <__s2b+0x38>
 801627e:	0002      	movs	r2, r0
 8016280:	4b19      	ldr	r3, [pc, #100]	; (80162e8 <__s2b+0x90>)
 8016282:	481a      	ldr	r0, [pc, #104]	; (80162ec <__s2b+0x94>)
 8016284:	31ce      	adds	r1, #206	; 0xce
 8016286:	f7fe fcb9 	bl	8014bfc <__assert_func>
 801628a:	005b      	lsls	r3, r3, #1
 801628c:	3101      	adds	r1, #1
 801628e:	e7ef      	b.n	8016270 <__s2b+0x18>
 8016290:	9b08      	ldr	r3, [sp, #32]
 8016292:	6143      	str	r3, [r0, #20]
 8016294:	2301      	movs	r3, #1
 8016296:	6103      	str	r3, [r0, #16]
 8016298:	2d09      	cmp	r5, #9
 801629a:	dd18      	ble.n	80162ce <__s2b+0x76>
 801629c:	0023      	movs	r3, r4
 801629e:	3309      	adds	r3, #9
 80162a0:	001f      	movs	r7, r3
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	1964      	adds	r4, r4, r5
 80162a6:	783b      	ldrb	r3, [r7, #0]
 80162a8:	220a      	movs	r2, #10
 80162aa:	0030      	movs	r0, r6
 80162ac:	3b30      	subs	r3, #48	; 0x30
 80162ae:	f7ff ff8f 	bl	80161d0 <__multadd>
 80162b2:	3701      	adds	r7, #1
 80162b4:	0001      	movs	r1, r0
 80162b6:	42a7      	cmp	r7, r4
 80162b8:	d1f5      	bne.n	80162a6 <__s2b+0x4e>
 80162ba:	002c      	movs	r4, r5
 80162bc:	9b00      	ldr	r3, [sp, #0]
 80162be:	3c08      	subs	r4, #8
 80162c0:	191c      	adds	r4, r3, r4
 80162c2:	002f      	movs	r7, r5
 80162c4:	9b01      	ldr	r3, [sp, #4]
 80162c6:	429f      	cmp	r7, r3
 80162c8:	db04      	blt.n	80162d4 <__s2b+0x7c>
 80162ca:	0008      	movs	r0, r1
 80162cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80162ce:	2509      	movs	r5, #9
 80162d0:	340a      	adds	r4, #10
 80162d2:	e7f6      	b.n	80162c2 <__s2b+0x6a>
 80162d4:	1b63      	subs	r3, r4, r5
 80162d6:	5ddb      	ldrb	r3, [r3, r7]
 80162d8:	220a      	movs	r2, #10
 80162da:	0030      	movs	r0, r6
 80162dc:	3b30      	subs	r3, #48	; 0x30
 80162de:	f7ff ff77 	bl	80161d0 <__multadd>
 80162e2:	3701      	adds	r7, #1
 80162e4:	0001      	movs	r1, r0
 80162e6:	e7ed      	b.n	80162c4 <__s2b+0x6c>
 80162e8:	0801ad71 	.word	0x0801ad71
 80162ec:	0801ae00 	.word	0x0801ae00

080162f0 <__hi0bits>:
 80162f0:	0003      	movs	r3, r0
 80162f2:	0c02      	lsrs	r2, r0, #16
 80162f4:	2000      	movs	r0, #0
 80162f6:	4282      	cmp	r2, r0
 80162f8:	d101      	bne.n	80162fe <__hi0bits+0xe>
 80162fa:	041b      	lsls	r3, r3, #16
 80162fc:	3010      	adds	r0, #16
 80162fe:	0e1a      	lsrs	r2, r3, #24
 8016300:	d101      	bne.n	8016306 <__hi0bits+0x16>
 8016302:	3008      	adds	r0, #8
 8016304:	021b      	lsls	r3, r3, #8
 8016306:	0f1a      	lsrs	r2, r3, #28
 8016308:	d101      	bne.n	801630e <__hi0bits+0x1e>
 801630a:	3004      	adds	r0, #4
 801630c:	011b      	lsls	r3, r3, #4
 801630e:	0f9a      	lsrs	r2, r3, #30
 8016310:	d101      	bne.n	8016316 <__hi0bits+0x26>
 8016312:	3002      	adds	r0, #2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	2b00      	cmp	r3, #0
 8016318:	db03      	blt.n	8016322 <__hi0bits+0x32>
 801631a:	3001      	adds	r0, #1
 801631c:	005b      	lsls	r3, r3, #1
 801631e:	d400      	bmi.n	8016322 <__hi0bits+0x32>
 8016320:	2020      	movs	r0, #32
 8016322:	4770      	bx	lr

08016324 <__lo0bits>:
 8016324:	6803      	ldr	r3, [r0, #0]
 8016326:	0002      	movs	r2, r0
 8016328:	2107      	movs	r1, #7
 801632a:	0018      	movs	r0, r3
 801632c:	4008      	ands	r0, r1
 801632e:	420b      	tst	r3, r1
 8016330:	d00d      	beq.n	801634e <__lo0bits+0x2a>
 8016332:	3906      	subs	r1, #6
 8016334:	2000      	movs	r0, #0
 8016336:	420b      	tst	r3, r1
 8016338:	d105      	bne.n	8016346 <__lo0bits+0x22>
 801633a:	3002      	adds	r0, #2
 801633c:	4203      	tst	r3, r0
 801633e:	d003      	beq.n	8016348 <__lo0bits+0x24>
 8016340:	40cb      	lsrs	r3, r1
 8016342:	0008      	movs	r0, r1
 8016344:	6013      	str	r3, [r2, #0]
 8016346:	4770      	bx	lr
 8016348:	089b      	lsrs	r3, r3, #2
 801634a:	6013      	str	r3, [r2, #0]
 801634c:	e7fb      	b.n	8016346 <__lo0bits+0x22>
 801634e:	b299      	uxth	r1, r3
 8016350:	2900      	cmp	r1, #0
 8016352:	d101      	bne.n	8016358 <__lo0bits+0x34>
 8016354:	2010      	movs	r0, #16
 8016356:	0c1b      	lsrs	r3, r3, #16
 8016358:	b2d9      	uxtb	r1, r3
 801635a:	2900      	cmp	r1, #0
 801635c:	d101      	bne.n	8016362 <__lo0bits+0x3e>
 801635e:	3008      	adds	r0, #8
 8016360:	0a1b      	lsrs	r3, r3, #8
 8016362:	0719      	lsls	r1, r3, #28
 8016364:	d101      	bne.n	801636a <__lo0bits+0x46>
 8016366:	3004      	adds	r0, #4
 8016368:	091b      	lsrs	r3, r3, #4
 801636a:	0799      	lsls	r1, r3, #30
 801636c:	d101      	bne.n	8016372 <__lo0bits+0x4e>
 801636e:	3002      	adds	r0, #2
 8016370:	089b      	lsrs	r3, r3, #2
 8016372:	07d9      	lsls	r1, r3, #31
 8016374:	d4e9      	bmi.n	801634a <__lo0bits+0x26>
 8016376:	3001      	adds	r0, #1
 8016378:	085b      	lsrs	r3, r3, #1
 801637a:	d1e6      	bne.n	801634a <__lo0bits+0x26>
 801637c:	2020      	movs	r0, #32
 801637e:	e7e2      	b.n	8016346 <__lo0bits+0x22>

08016380 <__i2b>:
 8016380:	b510      	push	{r4, lr}
 8016382:	000c      	movs	r4, r1
 8016384:	2101      	movs	r1, #1
 8016386:	f7ff febb 	bl	8016100 <_Balloc>
 801638a:	2800      	cmp	r0, #0
 801638c:	d106      	bne.n	801639c <__i2b+0x1c>
 801638e:	21a0      	movs	r1, #160	; 0xa0
 8016390:	0002      	movs	r2, r0
 8016392:	4b04      	ldr	r3, [pc, #16]	; (80163a4 <__i2b+0x24>)
 8016394:	4804      	ldr	r0, [pc, #16]	; (80163a8 <__i2b+0x28>)
 8016396:	0049      	lsls	r1, r1, #1
 8016398:	f7fe fc30 	bl	8014bfc <__assert_func>
 801639c:	2301      	movs	r3, #1
 801639e:	6144      	str	r4, [r0, #20]
 80163a0:	6103      	str	r3, [r0, #16]
 80163a2:	bd10      	pop	{r4, pc}
 80163a4:	0801ad71 	.word	0x0801ad71
 80163a8:	0801ae00 	.word	0x0801ae00

080163ac <__multiply>:
 80163ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ae:	690b      	ldr	r3, [r1, #16]
 80163b0:	0014      	movs	r4, r2
 80163b2:	6912      	ldr	r2, [r2, #16]
 80163b4:	000d      	movs	r5, r1
 80163b6:	b089      	sub	sp, #36	; 0x24
 80163b8:	4293      	cmp	r3, r2
 80163ba:	da01      	bge.n	80163c0 <__multiply+0x14>
 80163bc:	0025      	movs	r5, r4
 80163be:	000c      	movs	r4, r1
 80163c0:	692f      	ldr	r7, [r5, #16]
 80163c2:	6926      	ldr	r6, [r4, #16]
 80163c4:	6869      	ldr	r1, [r5, #4]
 80163c6:	19bb      	adds	r3, r7, r6
 80163c8:	9302      	str	r3, [sp, #8]
 80163ca:	68ab      	ldr	r3, [r5, #8]
 80163cc:	19ba      	adds	r2, r7, r6
 80163ce:	4293      	cmp	r3, r2
 80163d0:	da00      	bge.n	80163d4 <__multiply+0x28>
 80163d2:	3101      	adds	r1, #1
 80163d4:	f7ff fe94 	bl	8016100 <_Balloc>
 80163d8:	9001      	str	r0, [sp, #4]
 80163da:	2800      	cmp	r0, #0
 80163dc:	d106      	bne.n	80163ec <__multiply+0x40>
 80163de:	215e      	movs	r1, #94	; 0x5e
 80163e0:	0002      	movs	r2, r0
 80163e2:	4b48      	ldr	r3, [pc, #288]	; (8016504 <__multiply+0x158>)
 80163e4:	4848      	ldr	r0, [pc, #288]	; (8016508 <__multiply+0x15c>)
 80163e6:	31ff      	adds	r1, #255	; 0xff
 80163e8:	f7fe fc08 	bl	8014bfc <__assert_func>
 80163ec:	9b01      	ldr	r3, [sp, #4]
 80163ee:	2200      	movs	r2, #0
 80163f0:	3314      	adds	r3, #20
 80163f2:	469c      	mov	ip, r3
 80163f4:	19bb      	adds	r3, r7, r6
 80163f6:	009b      	lsls	r3, r3, #2
 80163f8:	4463      	add	r3, ip
 80163fa:	9303      	str	r3, [sp, #12]
 80163fc:	4663      	mov	r3, ip
 80163fe:	9903      	ldr	r1, [sp, #12]
 8016400:	428b      	cmp	r3, r1
 8016402:	d32c      	bcc.n	801645e <__multiply+0xb2>
 8016404:	002b      	movs	r3, r5
 8016406:	0022      	movs	r2, r4
 8016408:	3314      	adds	r3, #20
 801640a:	00bf      	lsls	r7, r7, #2
 801640c:	3214      	adds	r2, #20
 801640e:	9306      	str	r3, [sp, #24]
 8016410:	00b6      	lsls	r6, r6, #2
 8016412:	19db      	adds	r3, r3, r7
 8016414:	9304      	str	r3, [sp, #16]
 8016416:	1993      	adds	r3, r2, r6
 8016418:	9307      	str	r3, [sp, #28]
 801641a:	2304      	movs	r3, #4
 801641c:	9305      	str	r3, [sp, #20]
 801641e:	002b      	movs	r3, r5
 8016420:	9904      	ldr	r1, [sp, #16]
 8016422:	3315      	adds	r3, #21
 8016424:	9200      	str	r2, [sp, #0]
 8016426:	4299      	cmp	r1, r3
 8016428:	d305      	bcc.n	8016436 <__multiply+0x8a>
 801642a:	1b4b      	subs	r3, r1, r5
 801642c:	3b15      	subs	r3, #21
 801642e:	089b      	lsrs	r3, r3, #2
 8016430:	3301      	adds	r3, #1
 8016432:	009b      	lsls	r3, r3, #2
 8016434:	9305      	str	r3, [sp, #20]
 8016436:	9b07      	ldr	r3, [sp, #28]
 8016438:	9a00      	ldr	r2, [sp, #0]
 801643a:	429a      	cmp	r2, r3
 801643c:	d311      	bcc.n	8016462 <__multiply+0xb6>
 801643e:	9b02      	ldr	r3, [sp, #8]
 8016440:	2b00      	cmp	r3, #0
 8016442:	dd06      	ble.n	8016452 <__multiply+0xa6>
 8016444:	9b03      	ldr	r3, [sp, #12]
 8016446:	3b04      	subs	r3, #4
 8016448:	9303      	str	r3, [sp, #12]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	9300      	str	r3, [sp, #0]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d054      	beq.n	80164fc <__multiply+0x150>
 8016452:	9b01      	ldr	r3, [sp, #4]
 8016454:	9a02      	ldr	r2, [sp, #8]
 8016456:	0018      	movs	r0, r3
 8016458:	611a      	str	r2, [r3, #16]
 801645a:	b009      	add	sp, #36	; 0x24
 801645c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801645e:	c304      	stmia	r3!, {r2}
 8016460:	e7cd      	b.n	80163fe <__multiply+0x52>
 8016462:	9b00      	ldr	r3, [sp, #0]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	b298      	uxth	r0, r3
 8016468:	2800      	cmp	r0, #0
 801646a:	d01c      	beq.n	80164a6 <__multiply+0xfa>
 801646c:	4667      	mov	r7, ip
 801646e:	2400      	movs	r4, #0
 8016470:	9e06      	ldr	r6, [sp, #24]
 8016472:	ce02      	ldmia	r6!, {r1}
 8016474:	683a      	ldr	r2, [r7, #0]
 8016476:	b28b      	uxth	r3, r1
 8016478:	4343      	muls	r3, r0
 801647a:	0c09      	lsrs	r1, r1, #16
 801647c:	4341      	muls	r1, r0
 801647e:	b292      	uxth	r2, r2
 8016480:	189b      	adds	r3, r3, r2
 8016482:	191b      	adds	r3, r3, r4
 8016484:	000c      	movs	r4, r1
 8016486:	683a      	ldr	r2, [r7, #0]
 8016488:	0c11      	lsrs	r1, r2, #16
 801648a:	1861      	adds	r1, r4, r1
 801648c:	0c1c      	lsrs	r4, r3, #16
 801648e:	1909      	adds	r1, r1, r4
 8016490:	0c0c      	lsrs	r4, r1, #16
 8016492:	b29b      	uxth	r3, r3
 8016494:	0409      	lsls	r1, r1, #16
 8016496:	430b      	orrs	r3, r1
 8016498:	c708      	stmia	r7!, {r3}
 801649a:	9b04      	ldr	r3, [sp, #16]
 801649c:	42b3      	cmp	r3, r6
 801649e:	d8e8      	bhi.n	8016472 <__multiply+0xc6>
 80164a0:	4663      	mov	r3, ip
 80164a2:	9a05      	ldr	r2, [sp, #20]
 80164a4:	509c      	str	r4, [r3, r2]
 80164a6:	9b00      	ldr	r3, [sp, #0]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	0c1e      	lsrs	r6, r3, #16
 80164ac:	d020      	beq.n	80164f0 <__multiply+0x144>
 80164ae:	4663      	mov	r3, ip
 80164b0:	002c      	movs	r4, r5
 80164b2:	4660      	mov	r0, ip
 80164b4:	2700      	movs	r7, #0
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	3414      	adds	r4, #20
 80164ba:	6822      	ldr	r2, [r4, #0]
 80164bc:	b29b      	uxth	r3, r3
 80164be:	b291      	uxth	r1, r2
 80164c0:	4371      	muls	r1, r6
 80164c2:	6802      	ldr	r2, [r0, #0]
 80164c4:	0c12      	lsrs	r2, r2, #16
 80164c6:	1889      	adds	r1, r1, r2
 80164c8:	19cf      	adds	r7, r1, r7
 80164ca:	0439      	lsls	r1, r7, #16
 80164cc:	430b      	orrs	r3, r1
 80164ce:	6003      	str	r3, [r0, #0]
 80164d0:	cc02      	ldmia	r4!, {r1}
 80164d2:	6843      	ldr	r3, [r0, #4]
 80164d4:	0c09      	lsrs	r1, r1, #16
 80164d6:	4371      	muls	r1, r6
 80164d8:	b29b      	uxth	r3, r3
 80164da:	0c3f      	lsrs	r7, r7, #16
 80164dc:	18cb      	adds	r3, r1, r3
 80164de:	9a04      	ldr	r2, [sp, #16]
 80164e0:	19db      	adds	r3, r3, r7
 80164e2:	0c1f      	lsrs	r7, r3, #16
 80164e4:	3004      	adds	r0, #4
 80164e6:	42a2      	cmp	r2, r4
 80164e8:	d8e7      	bhi.n	80164ba <__multiply+0x10e>
 80164ea:	4662      	mov	r2, ip
 80164ec:	9905      	ldr	r1, [sp, #20]
 80164ee:	5053      	str	r3, [r2, r1]
 80164f0:	9b00      	ldr	r3, [sp, #0]
 80164f2:	3304      	adds	r3, #4
 80164f4:	9300      	str	r3, [sp, #0]
 80164f6:	2304      	movs	r3, #4
 80164f8:	449c      	add	ip, r3
 80164fa:	e79c      	b.n	8016436 <__multiply+0x8a>
 80164fc:	9b02      	ldr	r3, [sp, #8]
 80164fe:	3b01      	subs	r3, #1
 8016500:	9302      	str	r3, [sp, #8]
 8016502:	e79c      	b.n	801643e <__multiply+0x92>
 8016504:	0801ad71 	.word	0x0801ad71
 8016508:	0801ae00 	.word	0x0801ae00

0801650c <__pow5mult>:
 801650c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801650e:	2303      	movs	r3, #3
 8016510:	0015      	movs	r5, r2
 8016512:	0007      	movs	r7, r0
 8016514:	000e      	movs	r6, r1
 8016516:	401a      	ands	r2, r3
 8016518:	421d      	tst	r5, r3
 801651a:	d008      	beq.n	801652e <__pow5mult+0x22>
 801651c:	4925      	ldr	r1, [pc, #148]	; (80165b4 <__pow5mult+0xa8>)
 801651e:	3a01      	subs	r2, #1
 8016520:	0092      	lsls	r2, r2, #2
 8016522:	5852      	ldr	r2, [r2, r1]
 8016524:	2300      	movs	r3, #0
 8016526:	0031      	movs	r1, r6
 8016528:	f7ff fe52 	bl	80161d0 <__multadd>
 801652c:	0006      	movs	r6, r0
 801652e:	10ad      	asrs	r5, r5, #2
 8016530:	d03d      	beq.n	80165ae <__pow5mult+0xa2>
 8016532:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016534:	2c00      	cmp	r4, #0
 8016536:	d10f      	bne.n	8016558 <__pow5mult+0x4c>
 8016538:	2010      	movs	r0, #16
 801653a:	f7fc fdcb 	bl	80130d4 <malloc>
 801653e:	1e02      	subs	r2, r0, #0
 8016540:	6278      	str	r0, [r7, #36]	; 0x24
 8016542:	d105      	bne.n	8016550 <__pow5mult+0x44>
 8016544:	21d7      	movs	r1, #215	; 0xd7
 8016546:	4b1c      	ldr	r3, [pc, #112]	; (80165b8 <__pow5mult+0xac>)
 8016548:	481c      	ldr	r0, [pc, #112]	; (80165bc <__pow5mult+0xb0>)
 801654a:	0049      	lsls	r1, r1, #1
 801654c:	f7fe fb56 	bl	8014bfc <__assert_func>
 8016550:	6044      	str	r4, [r0, #4]
 8016552:	6084      	str	r4, [r0, #8]
 8016554:	6004      	str	r4, [r0, #0]
 8016556:	60c4      	str	r4, [r0, #12]
 8016558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655a:	689c      	ldr	r4, [r3, #8]
 801655c:	9301      	str	r3, [sp, #4]
 801655e:	2c00      	cmp	r4, #0
 8016560:	d108      	bne.n	8016574 <__pow5mult+0x68>
 8016562:	0038      	movs	r0, r7
 8016564:	4916      	ldr	r1, [pc, #88]	; (80165c0 <__pow5mult+0xb4>)
 8016566:	f7ff ff0b 	bl	8016380 <__i2b>
 801656a:	9b01      	ldr	r3, [sp, #4]
 801656c:	0004      	movs	r4, r0
 801656e:	6098      	str	r0, [r3, #8]
 8016570:	2300      	movs	r3, #0
 8016572:	6003      	str	r3, [r0, #0]
 8016574:	2301      	movs	r3, #1
 8016576:	421d      	tst	r5, r3
 8016578:	d00a      	beq.n	8016590 <__pow5mult+0x84>
 801657a:	0031      	movs	r1, r6
 801657c:	0022      	movs	r2, r4
 801657e:	0038      	movs	r0, r7
 8016580:	f7ff ff14 	bl	80163ac <__multiply>
 8016584:	0031      	movs	r1, r6
 8016586:	9001      	str	r0, [sp, #4]
 8016588:	0038      	movs	r0, r7
 801658a:	f7ff fdfd 	bl	8016188 <_Bfree>
 801658e:	9e01      	ldr	r6, [sp, #4]
 8016590:	106d      	asrs	r5, r5, #1
 8016592:	d00c      	beq.n	80165ae <__pow5mult+0xa2>
 8016594:	6820      	ldr	r0, [r4, #0]
 8016596:	2800      	cmp	r0, #0
 8016598:	d107      	bne.n	80165aa <__pow5mult+0x9e>
 801659a:	0022      	movs	r2, r4
 801659c:	0021      	movs	r1, r4
 801659e:	0038      	movs	r0, r7
 80165a0:	f7ff ff04 	bl	80163ac <__multiply>
 80165a4:	2300      	movs	r3, #0
 80165a6:	6020      	str	r0, [r4, #0]
 80165a8:	6003      	str	r3, [r0, #0]
 80165aa:	0004      	movs	r4, r0
 80165ac:	e7e2      	b.n	8016574 <__pow5mult+0x68>
 80165ae:	0030      	movs	r0, r6
 80165b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80165b2:	46c0      	nop			; (mov r8, r8)
 80165b4:	0801af50 	.word	0x0801af50
 80165b8:	0801ab9c 	.word	0x0801ab9c
 80165bc:	0801ae00 	.word	0x0801ae00
 80165c0:	00000271 	.word	0x00000271

080165c4 <__lshift>:
 80165c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165c6:	000c      	movs	r4, r1
 80165c8:	0017      	movs	r7, r2
 80165ca:	6923      	ldr	r3, [r4, #16]
 80165cc:	1155      	asrs	r5, r2, #5
 80165ce:	b087      	sub	sp, #28
 80165d0:	18eb      	adds	r3, r5, r3
 80165d2:	9302      	str	r3, [sp, #8]
 80165d4:	3301      	adds	r3, #1
 80165d6:	9301      	str	r3, [sp, #4]
 80165d8:	6849      	ldr	r1, [r1, #4]
 80165da:	68a3      	ldr	r3, [r4, #8]
 80165dc:	9004      	str	r0, [sp, #16]
 80165de:	9a01      	ldr	r2, [sp, #4]
 80165e0:	4293      	cmp	r3, r2
 80165e2:	db11      	blt.n	8016608 <__lshift+0x44>
 80165e4:	9804      	ldr	r0, [sp, #16]
 80165e6:	f7ff fd8b 	bl	8016100 <_Balloc>
 80165ea:	0002      	movs	r2, r0
 80165ec:	2300      	movs	r3, #0
 80165ee:	3214      	adds	r2, #20
 80165f0:	0006      	movs	r6, r0
 80165f2:	0011      	movs	r1, r2
 80165f4:	9203      	str	r2, [sp, #12]
 80165f6:	4298      	cmp	r0, r3
 80165f8:	d10d      	bne.n	8016616 <__lshift+0x52>
 80165fa:	21da      	movs	r1, #218	; 0xda
 80165fc:	0002      	movs	r2, r0
 80165fe:	4b27      	ldr	r3, [pc, #156]	; (801669c <__lshift+0xd8>)
 8016600:	4827      	ldr	r0, [pc, #156]	; (80166a0 <__lshift+0xdc>)
 8016602:	31ff      	adds	r1, #255	; 0xff
 8016604:	f7fe fafa 	bl	8014bfc <__assert_func>
 8016608:	3101      	adds	r1, #1
 801660a:	005b      	lsls	r3, r3, #1
 801660c:	e7e7      	b.n	80165de <__lshift+0x1a>
 801660e:	2200      	movs	r2, #0
 8016610:	0098      	lsls	r0, r3, #2
 8016612:	500a      	str	r2, [r1, r0]
 8016614:	3301      	adds	r3, #1
 8016616:	42ab      	cmp	r3, r5
 8016618:	dbf9      	blt.n	801660e <__lshift+0x4a>
 801661a:	43eb      	mvns	r3, r5
 801661c:	17db      	asrs	r3, r3, #31
 801661e:	401d      	ands	r5, r3
 8016620:	9b03      	ldr	r3, [sp, #12]
 8016622:	00ad      	lsls	r5, r5, #2
 8016624:	211f      	movs	r1, #31
 8016626:	0038      	movs	r0, r7
 8016628:	195d      	adds	r5, r3, r5
 801662a:	0023      	movs	r3, r4
 801662c:	6922      	ldr	r2, [r4, #16]
 801662e:	3314      	adds	r3, #20
 8016630:	0092      	lsls	r2, r2, #2
 8016632:	4008      	ands	r0, r1
 8016634:	4684      	mov	ip, r0
 8016636:	189a      	adds	r2, r3, r2
 8016638:	420f      	tst	r7, r1
 801663a:	d02a      	beq.n	8016692 <__lshift+0xce>
 801663c:	3101      	adds	r1, #1
 801663e:	1a09      	subs	r1, r1, r0
 8016640:	9105      	str	r1, [sp, #20]
 8016642:	2100      	movs	r1, #0
 8016644:	9503      	str	r5, [sp, #12]
 8016646:	4667      	mov	r7, ip
 8016648:	6818      	ldr	r0, [r3, #0]
 801664a:	40b8      	lsls	r0, r7
 801664c:	4301      	orrs	r1, r0
 801664e:	9803      	ldr	r0, [sp, #12]
 8016650:	c002      	stmia	r0!, {r1}
 8016652:	cb02      	ldmia	r3!, {r1}
 8016654:	9003      	str	r0, [sp, #12]
 8016656:	9805      	ldr	r0, [sp, #20]
 8016658:	40c1      	lsrs	r1, r0
 801665a:	429a      	cmp	r2, r3
 801665c:	d8f3      	bhi.n	8016646 <__lshift+0x82>
 801665e:	0020      	movs	r0, r4
 8016660:	3015      	adds	r0, #21
 8016662:	2304      	movs	r3, #4
 8016664:	4282      	cmp	r2, r0
 8016666:	d304      	bcc.n	8016672 <__lshift+0xae>
 8016668:	1b13      	subs	r3, r2, r4
 801666a:	3b15      	subs	r3, #21
 801666c:	089b      	lsrs	r3, r3, #2
 801666e:	3301      	adds	r3, #1
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	50e9      	str	r1, [r5, r3]
 8016674:	2900      	cmp	r1, #0
 8016676:	d002      	beq.n	801667e <__lshift+0xba>
 8016678:	9b02      	ldr	r3, [sp, #8]
 801667a:	3302      	adds	r3, #2
 801667c:	9301      	str	r3, [sp, #4]
 801667e:	9b01      	ldr	r3, [sp, #4]
 8016680:	9804      	ldr	r0, [sp, #16]
 8016682:	3b01      	subs	r3, #1
 8016684:	0021      	movs	r1, r4
 8016686:	6133      	str	r3, [r6, #16]
 8016688:	f7ff fd7e 	bl	8016188 <_Bfree>
 801668c:	0030      	movs	r0, r6
 801668e:	b007      	add	sp, #28
 8016690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016692:	cb02      	ldmia	r3!, {r1}
 8016694:	c502      	stmia	r5!, {r1}
 8016696:	429a      	cmp	r2, r3
 8016698:	d8fb      	bhi.n	8016692 <__lshift+0xce>
 801669a:	e7f0      	b.n	801667e <__lshift+0xba>
 801669c:	0801ad71 	.word	0x0801ad71
 80166a0:	0801ae00 	.word	0x0801ae00

080166a4 <__mcmp>:
 80166a4:	6902      	ldr	r2, [r0, #16]
 80166a6:	690b      	ldr	r3, [r1, #16]
 80166a8:	b530      	push	{r4, r5, lr}
 80166aa:	0004      	movs	r4, r0
 80166ac:	1ad0      	subs	r0, r2, r3
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d10d      	bne.n	80166ce <__mcmp+0x2a>
 80166b2:	009b      	lsls	r3, r3, #2
 80166b4:	3414      	adds	r4, #20
 80166b6:	3114      	adds	r1, #20
 80166b8:	18e2      	adds	r2, r4, r3
 80166ba:	18c9      	adds	r1, r1, r3
 80166bc:	3a04      	subs	r2, #4
 80166be:	3904      	subs	r1, #4
 80166c0:	6815      	ldr	r5, [r2, #0]
 80166c2:	680b      	ldr	r3, [r1, #0]
 80166c4:	429d      	cmp	r5, r3
 80166c6:	d003      	beq.n	80166d0 <__mcmp+0x2c>
 80166c8:	2001      	movs	r0, #1
 80166ca:	429d      	cmp	r5, r3
 80166cc:	d303      	bcc.n	80166d6 <__mcmp+0x32>
 80166ce:	bd30      	pop	{r4, r5, pc}
 80166d0:	4294      	cmp	r4, r2
 80166d2:	d3f3      	bcc.n	80166bc <__mcmp+0x18>
 80166d4:	e7fb      	b.n	80166ce <__mcmp+0x2a>
 80166d6:	4240      	negs	r0, r0
 80166d8:	e7f9      	b.n	80166ce <__mcmp+0x2a>
	...

080166dc <__mdiff>:
 80166dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166de:	000e      	movs	r6, r1
 80166e0:	0007      	movs	r7, r0
 80166e2:	0011      	movs	r1, r2
 80166e4:	0030      	movs	r0, r6
 80166e6:	b087      	sub	sp, #28
 80166e8:	0014      	movs	r4, r2
 80166ea:	f7ff ffdb 	bl	80166a4 <__mcmp>
 80166ee:	1e05      	subs	r5, r0, #0
 80166f0:	d110      	bne.n	8016714 <__mdiff+0x38>
 80166f2:	0001      	movs	r1, r0
 80166f4:	0038      	movs	r0, r7
 80166f6:	f7ff fd03 	bl	8016100 <_Balloc>
 80166fa:	1e02      	subs	r2, r0, #0
 80166fc:	d104      	bne.n	8016708 <__mdiff+0x2c>
 80166fe:	4b40      	ldr	r3, [pc, #256]	; (8016800 <__mdiff+0x124>)
 8016700:	4940      	ldr	r1, [pc, #256]	; (8016804 <__mdiff+0x128>)
 8016702:	4841      	ldr	r0, [pc, #260]	; (8016808 <__mdiff+0x12c>)
 8016704:	f7fe fa7a 	bl	8014bfc <__assert_func>
 8016708:	2301      	movs	r3, #1
 801670a:	6145      	str	r5, [r0, #20]
 801670c:	6103      	str	r3, [r0, #16]
 801670e:	0010      	movs	r0, r2
 8016710:	b007      	add	sp, #28
 8016712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016714:	2301      	movs	r3, #1
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	2800      	cmp	r0, #0
 801671a:	db04      	blt.n	8016726 <__mdiff+0x4a>
 801671c:	0023      	movs	r3, r4
 801671e:	0034      	movs	r4, r6
 8016720:	001e      	movs	r6, r3
 8016722:	2300      	movs	r3, #0
 8016724:	9301      	str	r3, [sp, #4]
 8016726:	0038      	movs	r0, r7
 8016728:	6861      	ldr	r1, [r4, #4]
 801672a:	f7ff fce9 	bl	8016100 <_Balloc>
 801672e:	1e02      	subs	r2, r0, #0
 8016730:	d103      	bne.n	801673a <__mdiff+0x5e>
 8016732:	2190      	movs	r1, #144	; 0x90
 8016734:	4b32      	ldr	r3, [pc, #200]	; (8016800 <__mdiff+0x124>)
 8016736:	0089      	lsls	r1, r1, #2
 8016738:	e7e3      	b.n	8016702 <__mdiff+0x26>
 801673a:	9b01      	ldr	r3, [sp, #4]
 801673c:	2700      	movs	r7, #0
 801673e:	60c3      	str	r3, [r0, #12]
 8016740:	6920      	ldr	r0, [r4, #16]
 8016742:	3414      	adds	r4, #20
 8016744:	9401      	str	r4, [sp, #4]
 8016746:	9b01      	ldr	r3, [sp, #4]
 8016748:	0084      	lsls	r4, r0, #2
 801674a:	191b      	adds	r3, r3, r4
 801674c:	0034      	movs	r4, r6
 801674e:	9302      	str	r3, [sp, #8]
 8016750:	6933      	ldr	r3, [r6, #16]
 8016752:	3414      	adds	r4, #20
 8016754:	0099      	lsls	r1, r3, #2
 8016756:	1863      	adds	r3, r4, r1
 8016758:	9303      	str	r3, [sp, #12]
 801675a:	0013      	movs	r3, r2
 801675c:	3314      	adds	r3, #20
 801675e:	469c      	mov	ip, r3
 8016760:	9305      	str	r3, [sp, #20]
 8016762:	9b01      	ldr	r3, [sp, #4]
 8016764:	9304      	str	r3, [sp, #16]
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	cc02      	ldmia	r4!, {r1}
 801676a:	cb20      	ldmia	r3!, {r5}
 801676c:	9304      	str	r3, [sp, #16]
 801676e:	b2ab      	uxth	r3, r5
 8016770:	19df      	adds	r7, r3, r7
 8016772:	b28b      	uxth	r3, r1
 8016774:	1afb      	subs	r3, r7, r3
 8016776:	0c2d      	lsrs	r5, r5, #16
 8016778:	0c09      	lsrs	r1, r1, #16
 801677a:	1a69      	subs	r1, r5, r1
 801677c:	141d      	asrs	r5, r3, #16
 801677e:	1949      	adds	r1, r1, r5
 8016780:	140f      	asrs	r7, r1, #16
 8016782:	b29b      	uxth	r3, r3
 8016784:	0409      	lsls	r1, r1, #16
 8016786:	430b      	orrs	r3, r1
 8016788:	4661      	mov	r1, ip
 801678a:	c108      	stmia	r1!, {r3}
 801678c:	9b03      	ldr	r3, [sp, #12]
 801678e:	468c      	mov	ip, r1
 8016790:	42a3      	cmp	r3, r4
 8016792:	d8e8      	bhi.n	8016766 <__mdiff+0x8a>
 8016794:	0031      	movs	r1, r6
 8016796:	9c03      	ldr	r4, [sp, #12]
 8016798:	3115      	adds	r1, #21
 801679a:	2304      	movs	r3, #4
 801679c:	428c      	cmp	r4, r1
 801679e:	d304      	bcc.n	80167aa <__mdiff+0xce>
 80167a0:	1ba3      	subs	r3, r4, r6
 80167a2:	3b15      	subs	r3, #21
 80167a4:	089b      	lsrs	r3, r3, #2
 80167a6:	3301      	adds	r3, #1
 80167a8:	009b      	lsls	r3, r3, #2
 80167aa:	9901      	ldr	r1, [sp, #4]
 80167ac:	18cc      	adds	r4, r1, r3
 80167ae:	9905      	ldr	r1, [sp, #20]
 80167b0:	0026      	movs	r6, r4
 80167b2:	18cb      	adds	r3, r1, r3
 80167b4:	469c      	mov	ip, r3
 80167b6:	9902      	ldr	r1, [sp, #8]
 80167b8:	428e      	cmp	r6, r1
 80167ba:	d310      	bcc.n	80167de <__mdiff+0x102>
 80167bc:	9e02      	ldr	r6, [sp, #8]
 80167be:	1ee5      	subs	r5, r4, #3
 80167c0:	2100      	movs	r1, #0
 80167c2:	42ae      	cmp	r6, r5
 80167c4:	d304      	bcc.n	80167d0 <__mdiff+0xf4>
 80167c6:	0031      	movs	r1, r6
 80167c8:	3103      	adds	r1, #3
 80167ca:	1b09      	subs	r1, r1, r4
 80167cc:	0889      	lsrs	r1, r1, #2
 80167ce:	0089      	lsls	r1, r1, #2
 80167d0:	185b      	adds	r3, r3, r1
 80167d2:	3b04      	subs	r3, #4
 80167d4:	6819      	ldr	r1, [r3, #0]
 80167d6:	2900      	cmp	r1, #0
 80167d8:	d00f      	beq.n	80167fa <__mdiff+0x11e>
 80167da:	6110      	str	r0, [r2, #16]
 80167dc:	e797      	b.n	801670e <__mdiff+0x32>
 80167de:	ce02      	ldmia	r6!, {r1}
 80167e0:	b28d      	uxth	r5, r1
 80167e2:	19ed      	adds	r5, r5, r7
 80167e4:	0c0f      	lsrs	r7, r1, #16
 80167e6:	1429      	asrs	r1, r5, #16
 80167e8:	1879      	adds	r1, r7, r1
 80167ea:	140f      	asrs	r7, r1, #16
 80167ec:	b2ad      	uxth	r5, r5
 80167ee:	0409      	lsls	r1, r1, #16
 80167f0:	430d      	orrs	r5, r1
 80167f2:	4661      	mov	r1, ip
 80167f4:	c120      	stmia	r1!, {r5}
 80167f6:	468c      	mov	ip, r1
 80167f8:	e7dd      	b.n	80167b6 <__mdiff+0xda>
 80167fa:	3801      	subs	r0, #1
 80167fc:	e7e9      	b.n	80167d2 <__mdiff+0xf6>
 80167fe:	46c0      	nop			; (mov r8, r8)
 8016800:	0801ad71 	.word	0x0801ad71
 8016804:	00000232 	.word	0x00000232
 8016808:	0801ae00 	.word	0x0801ae00

0801680c <__ulp>:
 801680c:	4b0f      	ldr	r3, [pc, #60]	; (801684c <__ulp+0x40>)
 801680e:	4019      	ands	r1, r3
 8016810:	4b0f      	ldr	r3, [pc, #60]	; (8016850 <__ulp+0x44>)
 8016812:	18c9      	adds	r1, r1, r3
 8016814:	2900      	cmp	r1, #0
 8016816:	dd04      	ble.n	8016822 <__ulp+0x16>
 8016818:	2200      	movs	r2, #0
 801681a:	000b      	movs	r3, r1
 801681c:	0010      	movs	r0, r2
 801681e:	0019      	movs	r1, r3
 8016820:	4770      	bx	lr
 8016822:	4249      	negs	r1, r1
 8016824:	2200      	movs	r2, #0
 8016826:	2300      	movs	r3, #0
 8016828:	1509      	asrs	r1, r1, #20
 801682a:	2913      	cmp	r1, #19
 801682c:	dc04      	bgt.n	8016838 <__ulp+0x2c>
 801682e:	2080      	movs	r0, #128	; 0x80
 8016830:	0300      	lsls	r0, r0, #12
 8016832:	4108      	asrs	r0, r1
 8016834:	0003      	movs	r3, r0
 8016836:	e7f1      	b.n	801681c <__ulp+0x10>
 8016838:	3914      	subs	r1, #20
 801683a:	2001      	movs	r0, #1
 801683c:	291e      	cmp	r1, #30
 801683e:	dc02      	bgt.n	8016846 <__ulp+0x3a>
 8016840:	2080      	movs	r0, #128	; 0x80
 8016842:	0600      	lsls	r0, r0, #24
 8016844:	40c8      	lsrs	r0, r1
 8016846:	0002      	movs	r2, r0
 8016848:	e7e8      	b.n	801681c <__ulp+0x10>
 801684a:	46c0      	nop			; (mov r8, r8)
 801684c:	7ff00000 	.word	0x7ff00000
 8016850:	fcc00000 	.word	0xfcc00000

08016854 <__b2d>:
 8016854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016856:	0006      	movs	r6, r0
 8016858:	6903      	ldr	r3, [r0, #16]
 801685a:	3614      	adds	r6, #20
 801685c:	009b      	lsls	r3, r3, #2
 801685e:	18f3      	adds	r3, r6, r3
 8016860:	1f1d      	subs	r5, r3, #4
 8016862:	682c      	ldr	r4, [r5, #0]
 8016864:	000f      	movs	r7, r1
 8016866:	0020      	movs	r0, r4
 8016868:	9301      	str	r3, [sp, #4]
 801686a:	f7ff fd41 	bl	80162f0 <__hi0bits>
 801686e:	2320      	movs	r3, #32
 8016870:	1a1b      	subs	r3, r3, r0
 8016872:	491f      	ldr	r1, [pc, #124]	; (80168f0 <__b2d+0x9c>)
 8016874:	603b      	str	r3, [r7, #0]
 8016876:	280a      	cmp	r0, #10
 8016878:	dc16      	bgt.n	80168a8 <__b2d+0x54>
 801687a:	230b      	movs	r3, #11
 801687c:	0027      	movs	r7, r4
 801687e:	1a1b      	subs	r3, r3, r0
 8016880:	40df      	lsrs	r7, r3
 8016882:	4339      	orrs	r1, r7
 8016884:	469c      	mov	ip, r3
 8016886:	000b      	movs	r3, r1
 8016888:	2100      	movs	r1, #0
 801688a:	42ae      	cmp	r6, r5
 801688c:	d202      	bcs.n	8016894 <__b2d+0x40>
 801688e:	9901      	ldr	r1, [sp, #4]
 8016890:	3908      	subs	r1, #8
 8016892:	6809      	ldr	r1, [r1, #0]
 8016894:	3015      	adds	r0, #21
 8016896:	4084      	lsls	r4, r0
 8016898:	4660      	mov	r0, ip
 801689a:	40c1      	lsrs	r1, r0
 801689c:	430c      	orrs	r4, r1
 801689e:	0022      	movs	r2, r4
 80168a0:	0010      	movs	r0, r2
 80168a2:	0019      	movs	r1, r3
 80168a4:	b003      	add	sp, #12
 80168a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168a8:	2700      	movs	r7, #0
 80168aa:	42ae      	cmp	r6, r5
 80168ac:	d202      	bcs.n	80168b4 <__b2d+0x60>
 80168ae:	9d01      	ldr	r5, [sp, #4]
 80168b0:	3d08      	subs	r5, #8
 80168b2:	682f      	ldr	r7, [r5, #0]
 80168b4:	230b      	movs	r3, #11
 80168b6:	425b      	negs	r3, r3
 80168b8:	469c      	mov	ip, r3
 80168ba:	4484      	add	ip, r0
 80168bc:	280b      	cmp	r0, #11
 80168be:	d013      	beq.n	80168e8 <__b2d+0x94>
 80168c0:	4663      	mov	r3, ip
 80168c2:	2020      	movs	r0, #32
 80168c4:	409c      	lsls	r4, r3
 80168c6:	1ac0      	subs	r0, r0, r3
 80168c8:	003b      	movs	r3, r7
 80168ca:	40c3      	lsrs	r3, r0
 80168cc:	431c      	orrs	r4, r3
 80168ce:	4321      	orrs	r1, r4
 80168d0:	000b      	movs	r3, r1
 80168d2:	2100      	movs	r1, #0
 80168d4:	42b5      	cmp	r5, r6
 80168d6:	d901      	bls.n	80168dc <__b2d+0x88>
 80168d8:	3d04      	subs	r5, #4
 80168da:	6829      	ldr	r1, [r5, #0]
 80168dc:	4664      	mov	r4, ip
 80168de:	40c1      	lsrs	r1, r0
 80168e0:	40a7      	lsls	r7, r4
 80168e2:	430f      	orrs	r7, r1
 80168e4:	003a      	movs	r2, r7
 80168e6:	e7db      	b.n	80168a0 <__b2d+0x4c>
 80168e8:	4321      	orrs	r1, r4
 80168ea:	000b      	movs	r3, r1
 80168ec:	e7fa      	b.n	80168e4 <__b2d+0x90>
 80168ee:	46c0      	nop			; (mov r8, r8)
 80168f0:	3ff00000 	.word	0x3ff00000

080168f4 <__d2b>:
 80168f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168f6:	2101      	movs	r1, #1
 80168f8:	0014      	movs	r4, r2
 80168fa:	001e      	movs	r6, r3
 80168fc:	9f08      	ldr	r7, [sp, #32]
 80168fe:	f7ff fbff 	bl	8016100 <_Balloc>
 8016902:	1e05      	subs	r5, r0, #0
 8016904:	d105      	bne.n	8016912 <__d2b+0x1e>
 8016906:	0002      	movs	r2, r0
 8016908:	4b26      	ldr	r3, [pc, #152]	; (80169a4 <__d2b+0xb0>)
 801690a:	4927      	ldr	r1, [pc, #156]	; (80169a8 <__d2b+0xb4>)
 801690c:	4827      	ldr	r0, [pc, #156]	; (80169ac <__d2b+0xb8>)
 801690e:	f7fe f975 	bl	8014bfc <__assert_func>
 8016912:	0333      	lsls	r3, r6, #12
 8016914:	0076      	lsls	r6, r6, #1
 8016916:	0b1b      	lsrs	r3, r3, #12
 8016918:	0d76      	lsrs	r6, r6, #21
 801691a:	d124      	bne.n	8016966 <__d2b+0x72>
 801691c:	9301      	str	r3, [sp, #4]
 801691e:	2c00      	cmp	r4, #0
 8016920:	d027      	beq.n	8016972 <__d2b+0x7e>
 8016922:	4668      	mov	r0, sp
 8016924:	9400      	str	r4, [sp, #0]
 8016926:	f7ff fcfd 	bl	8016324 <__lo0bits>
 801692a:	9c00      	ldr	r4, [sp, #0]
 801692c:	2800      	cmp	r0, #0
 801692e:	d01e      	beq.n	801696e <__d2b+0x7a>
 8016930:	9b01      	ldr	r3, [sp, #4]
 8016932:	2120      	movs	r1, #32
 8016934:	001a      	movs	r2, r3
 8016936:	1a09      	subs	r1, r1, r0
 8016938:	408a      	lsls	r2, r1
 801693a:	40c3      	lsrs	r3, r0
 801693c:	4322      	orrs	r2, r4
 801693e:	616a      	str	r2, [r5, #20]
 8016940:	9301      	str	r3, [sp, #4]
 8016942:	9c01      	ldr	r4, [sp, #4]
 8016944:	61ac      	str	r4, [r5, #24]
 8016946:	1e63      	subs	r3, r4, #1
 8016948:	419c      	sbcs	r4, r3
 801694a:	3401      	adds	r4, #1
 801694c:	612c      	str	r4, [r5, #16]
 801694e:	2e00      	cmp	r6, #0
 8016950:	d018      	beq.n	8016984 <__d2b+0x90>
 8016952:	4b17      	ldr	r3, [pc, #92]	; (80169b0 <__d2b+0xbc>)
 8016954:	18f6      	adds	r6, r6, r3
 8016956:	2335      	movs	r3, #53	; 0x35
 8016958:	1836      	adds	r6, r6, r0
 801695a:	1a18      	subs	r0, r3, r0
 801695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801695e:	603e      	str	r6, [r7, #0]
 8016960:	6018      	str	r0, [r3, #0]
 8016962:	0028      	movs	r0, r5
 8016964:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016966:	2280      	movs	r2, #128	; 0x80
 8016968:	0352      	lsls	r2, r2, #13
 801696a:	4313      	orrs	r3, r2
 801696c:	e7d6      	b.n	801691c <__d2b+0x28>
 801696e:	616c      	str	r4, [r5, #20]
 8016970:	e7e7      	b.n	8016942 <__d2b+0x4e>
 8016972:	a801      	add	r0, sp, #4
 8016974:	f7ff fcd6 	bl	8016324 <__lo0bits>
 8016978:	2401      	movs	r4, #1
 801697a:	9b01      	ldr	r3, [sp, #4]
 801697c:	612c      	str	r4, [r5, #16]
 801697e:	616b      	str	r3, [r5, #20]
 8016980:	3020      	adds	r0, #32
 8016982:	e7e4      	b.n	801694e <__d2b+0x5a>
 8016984:	4b0b      	ldr	r3, [pc, #44]	; (80169b4 <__d2b+0xc0>)
 8016986:	18c0      	adds	r0, r0, r3
 8016988:	4b0b      	ldr	r3, [pc, #44]	; (80169b8 <__d2b+0xc4>)
 801698a:	6038      	str	r0, [r7, #0]
 801698c:	18e3      	adds	r3, r4, r3
 801698e:	009b      	lsls	r3, r3, #2
 8016990:	18eb      	adds	r3, r5, r3
 8016992:	6958      	ldr	r0, [r3, #20]
 8016994:	f7ff fcac 	bl	80162f0 <__hi0bits>
 8016998:	0164      	lsls	r4, r4, #5
 801699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801699c:	1a24      	subs	r4, r4, r0
 801699e:	601c      	str	r4, [r3, #0]
 80169a0:	e7df      	b.n	8016962 <__d2b+0x6e>
 80169a2:	46c0      	nop			; (mov r8, r8)
 80169a4:	0801ad71 	.word	0x0801ad71
 80169a8:	0000030a 	.word	0x0000030a
 80169ac:	0801ae00 	.word	0x0801ae00
 80169b0:	fffffbcd 	.word	0xfffffbcd
 80169b4:	fffffbce 	.word	0xfffffbce
 80169b8:	3fffffff 	.word	0x3fffffff

080169bc <__ratio>:
 80169bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169be:	b085      	sub	sp, #20
 80169c0:	000d      	movs	r5, r1
 80169c2:	a902      	add	r1, sp, #8
 80169c4:	0004      	movs	r4, r0
 80169c6:	f7ff ff45 	bl	8016854 <__b2d>
 80169ca:	9000      	str	r0, [sp, #0]
 80169cc:	9101      	str	r1, [sp, #4]
 80169ce:	9e00      	ldr	r6, [sp, #0]
 80169d0:	9f01      	ldr	r7, [sp, #4]
 80169d2:	0028      	movs	r0, r5
 80169d4:	a903      	add	r1, sp, #12
 80169d6:	f7ff ff3d 	bl	8016854 <__b2d>
 80169da:	6924      	ldr	r4, [r4, #16]
 80169dc:	692d      	ldr	r5, [r5, #16]
 80169de:	0002      	movs	r2, r0
 80169e0:	1b65      	subs	r5, r4, r5
 80169e2:	016c      	lsls	r4, r5, #5
 80169e4:	46a4      	mov	ip, r4
 80169e6:	9d03      	ldr	r5, [sp, #12]
 80169e8:	9c02      	ldr	r4, [sp, #8]
 80169ea:	000b      	movs	r3, r1
 80169ec:	1b64      	subs	r4, r4, r5
 80169ee:	4464      	add	r4, ip
 80169f0:	0525      	lsls	r5, r4, #20
 80169f2:	2c00      	cmp	r4, #0
 80169f4:	dd07      	ble.n	8016a06 <__ratio+0x4a>
 80169f6:	9901      	ldr	r1, [sp, #4]
 80169f8:	186f      	adds	r7, r5, r1
 80169fa:	0030      	movs	r0, r6
 80169fc:	0039      	movs	r1, r7
 80169fe:	f7ea fdb5 	bl	800156c <__aeabi_ddiv>
 8016a02:	b005      	add	sp, #20
 8016a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a06:	1b4b      	subs	r3, r1, r5
 8016a08:	e7f7      	b.n	80169fa <__ratio+0x3e>

08016a0a <__copybits>:
 8016a0a:	b570      	push	{r4, r5, r6, lr}
 8016a0c:	0015      	movs	r5, r2
 8016a0e:	6913      	ldr	r3, [r2, #16]
 8016a10:	3514      	adds	r5, #20
 8016a12:	009c      	lsls	r4, r3, #2
 8016a14:	0006      	movs	r6, r0
 8016a16:	002b      	movs	r3, r5
 8016a18:	3901      	subs	r1, #1
 8016a1a:	1149      	asrs	r1, r1, #5
 8016a1c:	3101      	adds	r1, #1
 8016a1e:	0089      	lsls	r1, r1, #2
 8016a20:	1841      	adds	r1, r0, r1
 8016a22:	192c      	adds	r4, r5, r4
 8016a24:	429c      	cmp	r4, r3
 8016a26:	d80d      	bhi.n	8016a44 <__copybits+0x3a>
 8016a28:	0015      	movs	r5, r2
 8016a2a:	3511      	adds	r5, #17
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	42a5      	cmp	r5, r4
 8016a30:	d803      	bhi.n	8016a3a <__copybits+0x30>
 8016a32:	1aa3      	subs	r3, r4, r2
 8016a34:	3b11      	subs	r3, #17
 8016a36:	089b      	lsrs	r3, r3, #2
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	18c0      	adds	r0, r0, r3
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	4281      	cmp	r1, r0
 8016a40:	d803      	bhi.n	8016a4a <__copybits+0x40>
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
 8016a44:	cb20      	ldmia	r3!, {r5}
 8016a46:	c620      	stmia	r6!, {r5}
 8016a48:	e7ec      	b.n	8016a24 <__copybits+0x1a>
 8016a4a:	c008      	stmia	r0!, {r3}
 8016a4c:	e7f7      	b.n	8016a3e <__copybits+0x34>

08016a4e <__any_on>:
 8016a4e:	0002      	movs	r2, r0
 8016a50:	6900      	ldr	r0, [r0, #16]
 8016a52:	b510      	push	{r4, lr}
 8016a54:	3214      	adds	r2, #20
 8016a56:	114b      	asrs	r3, r1, #5
 8016a58:	4298      	cmp	r0, r3
 8016a5a:	db13      	blt.n	8016a84 <__any_on+0x36>
 8016a5c:	dd0c      	ble.n	8016a78 <__any_on+0x2a>
 8016a5e:	241f      	movs	r4, #31
 8016a60:	0008      	movs	r0, r1
 8016a62:	4020      	ands	r0, r4
 8016a64:	4221      	tst	r1, r4
 8016a66:	d007      	beq.n	8016a78 <__any_on+0x2a>
 8016a68:	0099      	lsls	r1, r3, #2
 8016a6a:	588c      	ldr	r4, [r1, r2]
 8016a6c:	0021      	movs	r1, r4
 8016a6e:	40c1      	lsrs	r1, r0
 8016a70:	4081      	lsls	r1, r0
 8016a72:	2001      	movs	r0, #1
 8016a74:	428c      	cmp	r4, r1
 8016a76:	d104      	bne.n	8016a82 <__any_on+0x34>
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	18d3      	adds	r3, r2, r3
 8016a7c:	4293      	cmp	r3, r2
 8016a7e:	d803      	bhi.n	8016a88 <__any_on+0x3a>
 8016a80:	2000      	movs	r0, #0
 8016a82:	bd10      	pop	{r4, pc}
 8016a84:	0003      	movs	r3, r0
 8016a86:	e7f7      	b.n	8016a78 <__any_on+0x2a>
 8016a88:	3b04      	subs	r3, #4
 8016a8a:	6819      	ldr	r1, [r3, #0]
 8016a8c:	2900      	cmp	r1, #0
 8016a8e:	d0f5      	beq.n	8016a7c <__any_on+0x2e>
 8016a90:	2001      	movs	r0, #1
 8016a92:	e7f6      	b.n	8016a82 <__any_on+0x34>

08016a94 <_calloc_r>:
 8016a94:	434a      	muls	r2, r1
 8016a96:	b570      	push	{r4, r5, r6, lr}
 8016a98:	0011      	movs	r1, r2
 8016a9a:	0015      	movs	r5, r2
 8016a9c:	f7fc fb98 	bl	80131d0 <_malloc_r>
 8016aa0:	1e04      	subs	r4, r0, #0
 8016aa2:	d003      	beq.n	8016aac <_calloc_r+0x18>
 8016aa4:	002a      	movs	r2, r5
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	f7fc fb3f 	bl	801312a <memset>
 8016aac:	0020      	movs	r0, r4
 8016aae:	bd70      	pop	{r4, r5, r6, pc}

08016ab0 <_realloc_r>:
 8016ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ab2:	0007      	movs	r7, r0
 8016ab4:	000d      	movs	r5, r1
 8016ab6:	0016      	movs	r6, r2
 8016ab8:	2900      	cmp	r1, #0
 8016aba:	d105      	bne.n	8016ac8 <_realloc_r+0x18>
 8016abc:	0011      	movs	r1, r2
 8016abe:	f7fc fb87 	bl	80131d0 <_malloc_r>
 8016ac2:	0004      	movs	r4, r0
 8016ac4:	0020      	movs	r0, r4
 8016ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ac8:	2a00      	cmp	r2, #0
 8016aca:	d103      	bne.n	8016ad4 <_realloc_r+0x24>
 8016acc:	f7fc fb36 	bl	801313c <_free_r>
 8016ad0:	0034      	movs	r4, r6
 8016ad2:	e7f7      	b.n	8016ac4 <_realloc_r+0x14>
 8016ad4:	f000 fe11 	bl	80176fa <_malloc_usable_size_r>
 8016ad8:	002c      	movs	r4, r5
 8016ada:	42b0      	cmp	r0, r6
 8016adc:	d2f2      	bcs.n	8016ac4 <_realloc_r+0x14>
 8016ade:	0031      	movs	r1, r6
 8016ae0:	0038      	movs	r0, r7
 8016ae2:	f7fc fb75 	bl	80131d0 <_malloc_r>
 8016ae6:	1e04      	subs	r4, r0, #0
 8016ae8:	d0ec      	beq.n	8016ac4 <_realloc_r+0x14>
 8016aea:	0029      	movs	r1, r5
 8016aec:	0032      	movs	r2, r6
 8016aee:	f7fc fb13 	bl	8013118 <memcpy>
 8016af2:	0029      	movs	r1, r5
 8016af4:	0038      	movs	r0, r7
 8016af6:	f7fc fb21 	bl	801313c <_free_r>
 8016afa:	e7e3      	b.n	8016ac4 <_realloc_r+0x14>

08016afc <__ssputs_r>:
 8016afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016afe:	688e      	ldr	r6, [r1, #8]
 8016b00:	b085      	sub	sp, #20
 8016b02:	0007      	movs	r7, r0
 8016b04:	000c      	movs	r4, r1
 8016b06:	9203      	str	r2, [sp, #12]
 8016b08:	9301      	str	r3, [sp, #4]
 8016b0a:	429e      	cmp	r6, r3
 8016b0c:	d83c      	bhi.n	8016b88 <__ssputs_r+0x8c>
 8016b0e:	2390      	movs	r3, #144	; 0x90
 8016b10:	898a      	ldrh	r2, [r1, #12]
 8016b12:	00db      	lsls	r3, r3, #3
 8016b14:	421a      	tst	r2, r3
 8016b16:	d034      	beq.n	8016b82 <__ssputs_r+0x86>
 8016b18:	2503      	movs	r5, #3
 8016b1a:	6909      	ldr	r1, [r1, #16]
 8016b1c:	6823      	ldr	r3, [r4, #0]
 8016b1e:	1a5b      	subs	r3, r3, r1
 8016b20:	9302      	str	r3, [sp, #8]
 8016b22:	6963      	ldr	r3, [r4, #20]
 8016b24:	9802      	ldr	r0, [sp, #8]
 8016b26:	435d      	muls	r5, r3
 8016b28:	0feb      	lsrs	r3, r5, #31
 8016b2a:	195d      	adds	r5, r3, r5
 8016b2c:	9b01      	ldr	r3, [sp, #4]
 8016b2e:	106d      	asrs	r5, r5, #1
 8016b30:	3301      	adds	r3, #1
 8016b32:	181b      	adds	r3, r3, r0
 8016b34:	42ab      	cmp	r3, r5
 8016b36:	d900      	bls.n	8016b3a <__ssputs_r+0x3e>
 8016b38:	001d      	movs	r5, r3
 8016b3a:	0553      	lsls	r3, r2, #21
 8016b3c:	d532      	bpl.n	8016ba4 <__ssputs_r+0xa8>
 8016b3e:	0029      	movs	r1, r5
 8016b40:	0038      	movs	r0, r7
 8016b42:	f7fc fb45 	bl	80131d0 <_malloc_r>
 8016b46:	1e06      	subs	r6, r0, #0
 8016b48:	d109      	bne.n	8016b5e <__ssputs_r+0x62>
 8016b4a:	230c      	movs	r3, #12
 8016b4c:	603b      	str	r3, [r7, #0]
 8016b4e:	2340      	movs	r3, #64	; 0x40
 8016b50:	2001      	movs	r0, #1
 8016b52:	89a2      	ldrh	r2, [r4, #12]
 8016b54:	4240      	negs	r0, r0
 8016b56:	4313      	orrs	r3, r2
 8016b58:	81a3      	strh	r3, [r4, #12]
 8016b5a:	b005      	add	sp, #20
 8016b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b5e:	9a02      	ldr	r2, [sp, #8]
 8016b60:	6921      	ldr	r1, [r4, #16]
 8016b62:	f7fc fad9 	bl	8013118 <memcpy>
 8016b66:	89a3      	ldrh	r3, [r4, #12]
 8016b68:	4a14      	ldr	r2, [pc, #80]	; (8016bbc <__ssputs_r+0xc0>)
 8016b6a:	401a      	ands	r2, r3
 8016b6c:	2380      	movs	r3, #128	; 0x80
 8016b6e:	4313      	orrs	r3, r2
 8016b70:	81a3      	strh	r3, [r4, #12]
 8016b72:	9b02      	ldr	r3, [sp, #8]
 8016b74:	6126      	str	r6, [r4, #16]
 8016b76:	18f6      	adds	r6, r6, r3
 8016b78:	6026      	str	r6, [r4, #0]
 8016b7a:	6165      	str	r5, [r4, #20]
 8016b7c:	9e01      	ldr	r6, [sp, #4]
 8016b7e:	1aed      	subs	r5, r5, r3
 8016b80:	60a5      	str	r5, [r4, #8]
 8016b82:	9b01      	ldr	r3, [sp, #4]
 8016b84:	429e      	cmp	r6, r3
 8016b86:	d900      	bls.n	8016b8a <__ssputs_r+0x8e>
 8016b88:	9e01      	ldr	r6, [sp, #4]
 8016b8a:	0032      	movs	r2, r6
 8016b8c:	9903      	ldr	r1, [sp, #12]
 8016b8e:	6820      	ldr	r0, [r4, #0]
 8016b90:	f000 fda0 	bl	80176d4 <memmove>
 8016b94:	68a3      	ldr	r3, [r4, #8]
 8016b96:	2000      	movs	r0, #0
 8016b98:	1b9b      	subs	r3, r3, r6
 8016b9a:	60a3      	str	r3, [r4, #8]
 8016b9c:	6823      	ldr	r3, [r4, #0]
 8016b9e:	199e      	adds	r6, r3, r6
 8016ba0:	6026      	str	r6, [r4, #0]
 8016ba2:	e7da      	b.n	8016b5a <__ssputs_r+0x5e>
 8016ba4:	002a      	movs	r2, r5
 8016ba6:	0038      	movs	r0, r7
 8016ba8:	f7ff ff82 	bl	8016ab0 <_realloc_r>
 8016bac:	1e06      	subs	r6, r0, #0
 8016bae:	d1e0      	bne.n	8016b72 <__ssputs_r+0x76>
 8016bb0:	0038      	movs	r0, r7
 8016bb2:	6921      	ldr	r1, [r4, #16]
 8016bb4:	f7fc fac2 	bl	801313c <_free_r>
 8016bb8:	e7c7      	b.n	8016b4a <__ssputs_r+0x4e>
 8016bba:	46c0      	nop			; (mov r8, r8)
 8016bbc:	fffffb7f 	.word	0xfffffb7f

08016bc0 <_svfiprintf_r>:
 8016bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bc2:	b0a1      	sub	sp, #132	; 0x84
 8016bc4:	9003      	str	r0, [sp, #12]
 8016bc6:	001d      	movs	r5, r3
 8016bc8:	898b      	ldrh	r3, [r1, #12]
 8016bca:	000f      	movs	r7, r1
 8016bcc:	0016      	movs	r6, r2
 8016bce:	061b      	lsls	r3, r3, #24
 8016bd0:	d511      	bpl.n	8016bf6 <_svfiprintf_r+0x36>
 8016bd2:	690b      	ldr	r3, [r1, #16]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d10e      	bne.n	8016bf6 <_svfiprintf_r+0x36>
 8016bd8:	2140      	movs	r1, #64	; 0x40
 8016bda:	f7fc faf9 	bl	80131d0 <_malloc_r>
 8016bde:	6038      	str	r0, [r7, #0]
 8016be0:	6138      	str	r0, [r7, #16]
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d105      	bne.n	8016bf2 <_svfiprintf_r+0x32>
 8016be6:	230c      	movs	r3, #12
 8016be8:	9a03      	ldr	r2, [sp, #12]
 8016bea:	3801      	subs	r0, #1
 8016bec:	6013      	str	r3, [r2, #0]
 8016bee:	b021      	add	sp, #132	; 0x84
 8016bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bf2:	2340      	movs	r3, #64	; 0x40
 8016bf4:	617b      	str	r3, [r7, #20]
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	ac08      	add	r4, sp, #32
 8016bfa:	6163      	str	r3, [r4, #20]
 8016bfc:	3320      	adds	r3, #32
 8016bfe:	7663      	strb	r3, [r4, #25]
 8016c00:	3310      	adds	r3, #16
 8016c02:	76a3      	strb	r3, [r4, #26]
 8016c04:	9507      	str	r5, [sp, #28]
 8016c06:	0035      	movs	r5, r6
 8016c08:	782b      	ldrb	r3, [r5, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d001      	beq.n	8016c12 <_svfiprintf_r+0x52>
 8016c0e:	2b25      	cmp	r3, #37	; 0x25
 8016c10:	d147      	bne.n	8016ca2 <_svfiprintf_r+0xe2>
 8016c12:	1bab      	subs	r3, r5, r6
 8016c14:	9305      	str	r3, [sp, #20]
 8016c16:	42b5      	cmp	r5, r6
 8016c18:	d00c      	beq.n	8016c34 <_svfiprintf_r+0x74>
 8016c1a:	0032      	movs	r2, r6
 8016c1c:	0039      	movs	r1, r7
 8016c1e:	9803      	ldr	r0, [sp, #12]
 8016c20:	f7ff ff6c 	bl	8016afc <__ssputs_r>
 8016c24:	1c43      	adds	r3, r0, #1
 8016c26:	d100      	bne.n	8016c2a <_svfiprintf_r+0x6a>
 8016c28:	e0ae      	b.n	8016d88 <_svfiprintf_r+0x1c8>
 8016c2a:	6962      	ldr	r2, [r4, #20]
 8016c2c:	9b05      	ldr	r3, [sp, #20]
 8016c2e:	4694      	mov	ip, r2
 8016c30:	4463      	add	r3, ip
 8016c32:	6163      	str	r3, [r4, #20]
 8016c34:	782b      	ldrb	r3, [r5, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d100      	bne.n	8016c3c <_svfiprintf_r+0x7c>
 8016c3a:	e0a5      	b.n	8016d88 <_svfiprintf_r+0x1c8>
 8016c3c:	2201      	movs	r2, #1
 8016c3e:	2300      	movs	r3, #0
 8016c40:	4252      	negs	r2, r2
 8016c42:	6062      	str	r2, [r4, #4]
 8016c44:	a904      	add	r1, sp, #16
 8016c46:	3254      	adds	r2, #84	; 0x54
 8016c48:	1852      	adds	r2, r2, r1
 8016c4a:	1c6e      	adds	r6, r5, #1
 8016c4c:	6023      	str	r3, [r4, #0]
 8016c4e:	60e3      	str	r3, [r4, #12]
 8016c50:	60a3      	str	r3, [r4, #8]
 8016c52:	7013      	strb	r3, [r2, #0]
 8016c54:	65a3      	str	r3, [r4, #88]	; 0x58
 8016c56:	2205      	movs	r2, #5
 8016c58:	7831      	ldrb	r1, [r6, #0]
 8016c5a:	4854      	ldr	r0, [pc, #336]	; (8016dac <_svfiprintf_r+0x1ec>)
 8016c5c:	f7ff fa34 	bl	80160c8 <memchr>
 8016c60:	1c75      	adds	r5, r6, #1
 8016c62:	2800      	cmp	r0, #0
 8016c64:	d11f      	bne.n	8016ca6 <_svfiprintf_r+0xe6>
 8016c66:	6822      	ldr	r2, [r4, #0]
 8016c68:	06d3      	lsls	r3, r2, #27
 8016c6a:	d504      	bpl.n	8016c76 <_svfiprintf_r+0xb6>
 8016c6c:	2353      	movs	r3, #83	; 0x53
 8016c6e:	a904      	add	r1, sp, #16
 8016c70:	185b      	adds	r3, r3, r1
 8016c72:	2120      	movs	r1, #32
 8016c74:	7019      	strb	r1, [r3, #0]
 8016c76:	0713      	lsls	r3, r2, #28
 8016c78:	d504      	bpl.n	8016c84 <_svfiprintf_r+0xc4>
 8016c7a:	2353      	movs	r3, #83	; 0x53
 8016c7c:	a904      	add	r1, sp, #16
 8016c7e:	185b      	adds	r3, r3, r1
 8016c80:	212b      	movs	r1, #43	; 0x2b
 8016c82:	7019      	strb	r1, [r3, #0]
 8016c84:	7833      	ldrb	r3, [r6, #0]
 8016c86:	2b2a      	cmp	r3, #42	; 0x2a
 8016c88:	d016      	beq.n	8016cb8 <_svfiprintf_r+0xf8>
 8016c8a:	0035      	movs	r5, r6
 8016c8c:	2100      	movs	r1, #0
 8016c8e:	200a      	movs	r0, #10
 8016c90:	68e3      	ldr	r3, [r4, #12]
 8016c92:	782a      	ldrb	r2, [r5, #0]
 8016c94:	1c6e      	adds	r6, r5, #1
 8016c96:	3a30      	subs	r2, #48	; 0x30
 8016c98:	2a09      	cmp	r2, #9
 8016c9a:	d94e      	bls.n	8016d3a <_svfiprintf_r+0x17a>
 8016c9c:	2900      	cmp	r1, #0
 8016c9e:	d111      	bne.n	8016cc4 <_svfiprintf_r+0x104>
 8016ca0:	e017      	b.n	8016cd2 <_svfiprintf_r+0x112>
 8016ca2:	3501      	adds	r5, #1
 8016ca4:	e7b0      	b.n	8016c08 <_svfiprintf_r+0x48>
 8016ca6:	4b41      	ldr	r3, [pc, #260]	; (8016dac <_svfiprintf_r+0x1ec>)
 8016ca8:	6822      	ldr	r2, [r4, #0]
 8016caa:	1ac0      	subs	r0, r0, r3
 8016cac:	2301      	movs	r3, #1
 8016cae:	4083      	lsls	r3, r0
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	002e      	movs	r6, r5
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	e7ce      	b.n	8016c56 <_svfiprintf_r+0x96>
 8016cb8:	9b07      	ldr	r3, [sp, #28]
 8016cba:	1d19      	adds	r1, r3, #4
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	9107      	str	r1, [sp, #28]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	db01      	blt.n	8016cc8 <_svfiprintf_r+0x108>
 8016cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016cc6:	e004      	b.n	8016cd2 <_svfiprintf_r+0x112>
 8016cc8:	425b      	negs	r3, r3
 8016cca:	60e3      	str	r3, [r4, #12]
 8016ccc:	2302      	movs	r3, #2
 8016cce:	4313      	orrs	r3, r2
 8016cd0:	6023      	str	r3, [r4, #0]
 8016cd2:	782b      	ldrb	r3, [r5, #0]
 8016cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8016cd6:	d10a      	bne.n	8016cee <_svfiprintf_r+0x12e>
 8016cd8:	786b      	ldrb	r3, [r5, #1]
 8016cda:	2b2a      	cmp	r3, #42	; 0x2a
 8016cdc:	d135      	bne.n	8016d4a <_svfiprintf_r+0x18a>
 8016cde:	9b07      	ldr	r3, [sp, #28]
 8016ce0:	3502      	adds	r5, #2
 8016ce2:	1d1a      	adds	r2, r3, #4
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	9207      	str	r2, [sp, #28]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	db2b      	blt.n	8016d44 <_svfiprintf_r+0x184>
 8016cec:	9309      	str	r3, [sp, #36]	; 0x24
 8016cee:	4e30      	ldr	r6, [pc, #192]	; (8016db0 <_svfiprintf_r+0x1f0>)
 8016cf0:	2203      	movs	r2, #3
 8016cf2:	0030      	movs	r0, r6
 8016cf4:	7829      	ldrb	r1, [r5, #0]
 8016cf6:	f7ff f9e7 	bl	80160c8 <memchr>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d006      	beq.n	8016d0c <_svfiprintf_r+0x14c>
 8016cfe:	2340      	movs	r3, #64	; 0x40
 8016d00:	1b80      	subs	r0, r0, r6
 8016d02:	4083      	lsls	r3, r0
 8016d04:	6822      	ldr	r2, [r4, #0]
 8016d06:	3501      	adds	r5, #1
 8016d08:	4313      	orrs	r3, r2
 8016d0a:	6023      	str	r3, [r4, #0]
 8016d0c:	7829      	ldrb	r1, [r5, #0]
 8016d0e:	2206      	movs	r2, #6
 8016d10:	4828      	ldr	r0, [pc, #160]	; (8016db4 <_svfiprintf_r+0x1f4>)
 8016d12:	1c6e      	adds	r6, r5, #1
 8016d14:	7621      	strb	r1, [r4, #24]
 8016d16:	f7ff f9d7 	bl	80160c8 <memchr>
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	d03c      	beq.n	8016d98 <_svfiprintf_r+0x1d8>
 8016d1e:	4b26      	ldr	r3, [pc, #152]	; (8016db8 <_svfiprintf_r+0x1f8>)
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d125      	bne.n	8016d70 <_svfiprintf_r+0x1b0>
 8016d24:	2207      	movs	r2, #7
 8016d26:	9b07      	ldr	r3, [sp, #28]
 8016d28:	3307      	adds	r3, #7
 8016d2a:	4393      	bics	r3, r2
 8016d2c:	3308      	adds	r3, #8
 8016d2e:	9307      	str	r3, [sp, #28]
 8016d30:	6963      	ldr	r3, [r4, #20]
 8016d32:	9a04      	ldr	r2, [sp, #16]
 8016d34:	189b      	adds	r3, r3, r2
 8016d36:	6163      	str	r3, [r4, #20]
 8016d38:	e765      	b.n	8016c06 <_svfiprintf_r+0x46>
 8016d3a:	4343      	muls	r3, r0
 8016d3c:	0035      	movs	r5, r6
 8016d3e:	2101      	movs	r1, #1
 8016d40:	189b      	adds	r3, r3, r2
 8016d42:	e7a6      	b.n	8016c92 <_svfiprintf_r+0xd2>
 8016d44:	2301      	movs	r3, #1
 8016d46:	425b      	negs	r3, r3
 8016d48:	e7d0      	b.n	8016cec <_svfiprintf_r+0x12c>
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	200a      	movs	r0, #10
 8016d4e:	001a      	movs	r2, r3
 8016d50:	3501      	adds	r5, #1
 8016d52:	6063      	str	r3, [r4, #4]
 8016d54:	7829      	ldrb	r1, [r5, #0]
 8016d56:	1c6e      	adds	r6, r5, #1
 8016d58:	3930      	subs	r1, #48	; 0x30
 8016d5a:	2909      	cmp	r1, #9
 8016d5c:	d903      	bls.n	8016d66 <_svfiprintf_r+0x1a6>
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d0c5      	beq.n	8016cee <_svfiprintf_r+0x12e>
 8016d62:	9209      	str	r2, [sp, #36]	; 0x24
 8016d64:	e7c3      	b.n	8016cee <_svfiprintf_r+0x12e>
 8016d66:	4342      	muls	r2, r0
 8016d68:	0035      	movs	r5, r6
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	1852      	adds	r2, r2, r1
 8016d6e:	e7f1      	b.n	8016d54 <_svfiprintf_r+0x194>
 8016d70:	ab07      	add	r3, sp, #28
 8016d72:	9300      	str	r3, [sp, #0]
 8016d74:	003a      	movs	r2, r7
 8016d76:	0021      	movs	r1, r4
 8016d78:	4b10      	ldr	r3, [pc, #64]	; (8016dbc <_svfiprintf_r+0x1fc>)
 8016d7a:	9803      	ldr	r0, [sp, #12]
 8016d7c:	f7fc fb30 	bl	80133e0 <_printf_float>
 8016d80:	9004      	str	r0, [sp, #16]
 8016d82:	9b04      	ldr	r3, [sp, #16]
 8016d84:	3301      	adds	r3, #1
 8016d86:	d1d3      	bne.n	8016d30 <_svfiprintf_r+0x170>
 8016d88:	89bb      	ldrh	r3, [r7, #12]
 8016d8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016d8c:	065b      	lsls	r3, r3, #25
 8016d8e:	d400      	bmi.n	8016d92 <_svfiprintf_r+0x1d2>
 8016d90:	e72d      	b.n	8016bee <_svfiprintf_r+0x2e>
 8016d92:	2001      	movs	r0, #1
 8016d94:	4240      	negs	r0, r0
 8016d96:	e72a      	b.n	8016bee <_svfiprintf_r+0x2e>
 8016d98:	ab07      	add	r3, sp, #28
 8016d9a:	9300      	str	r3, [sp, #0]
 8016d9c:	003a      	movs	r2, r7
 8016d9e:	0021      	movs	r1, r4
 8016da0:	4b06      	ldr	r3, [pc, #24]	; (8016dbc <_svfiprintf_r+0x1fc>)
 8016da2:	9803      	ldr	r0, [sp, #12]
 8016da4:	f7fc fdda 	bl	801395c <_printf_i>
 8016da8:	e7ea      	b.n	8016d80 <_svfiprintf_r+0x1c0>
 8016daa:	46c0      	nop			; (mov r8, r8)
 8016dac:	0801af5c 	.word	0x0801af5c
 8016db0:	0801af62 	.word	0x0801af62
 8016db4:	0801af66 	.word	0x0801af66
 8016db8:	080133e1 	.word	0x080133e1
 8016dbc:	08016afd 	.word	0x08016afd

08016dc0 <__sfputc_r>:
 8016dc0:	6893      	ldr	r3, [r2, #8]
 8016dc2:	b510      	push	{r4, lr}
 8016dc4:	3b01      	subs	r3, #1
 8016dc6:	6093      	str	r3, [r2, #8]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	da04      	bge.n	8016dd6 <__sfputc_r+0x16>
 8016dcc:	6994      	ldr	r4, [r2, #24]
 8016dce:	42a3      	cmp	r3, r4
 8016dd0:	db07      	blt.n	8016de2 <__sfputc_r+0x22>
 8016dd2:	290a      	cmp	r1, #10
 8016dd4:	d005      	beq.n	8016de2 <__sfputc_r+0x22>
 8016dd6:	6813      	ldr	r3, [r2, #0]
 8016dd8:	1c58      	adds	r0, r3, #1
 8016dda:	6010      	str	r0, [r2, #0]
 8016ddc:	7019      	strb	r1, [r3, #0]
 8016dde:	0008      	movs	r0, r1
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	f000 f955 	bl	8017090 <__swbuf_r>
 8016de6:	0001      	movs	r1, r0
 8016de8:	e7f9      	b.n	8016dde <__sfputc_r+0x1e>

08016dea <__sfputs_r>:
 8016dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dec:	0006      	movs	r6, r0
 8016dee:	000f      	movs	r7, r1
 8016df0:	0014      	movs	r4, r2
 8016df2:	18d5      	adds	r5, r2, r3
 8016df4:	42ac      	cmp	r4, r5
 8016df6:	d101      	bne.n	8016dfc <__sfputs_r+0x12>
 8016df8:	2000      	movs	r0, #0
 8016dfa:	e007      	b.n	8016e0c <__sfputs_r+0x22>
 8016dfc:	7821      	ldrb	r1, [r4, #0]
 8016dfe:	003a      	movs	r2, r7
 8016e00:	0030      	movs	r0, r6
 8016e02:	f7ff ffdd 	bl	8016dc0 <__sfputc_r>
 8016e06:	3401      	adds	r4, #1
 8016e08:	1c43      	adds	r3, r0, #1
 8016e0a:	d1f3      	bne.n	8016df4 <__sfputs_r+0xa>
 8016e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e10 <_vfiprintf_r>:
 8016e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e12:	b0a1      	sub	sp, #132	; 0x84
 8016e14:	0006      	movs	r6, r0
 8016e16:	000c      	movs	r4, r1
 8016e18:	001f      	movs	r7, r3
 8016e1a:	9203      	str	r2, [sp, #12]
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	d004      	beq.n	8016e2a <_vfiprintf_r+0x1a>
 8016e20:	6983      	ldr	r3, [r0, #24]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d101      	bne.n	8016e2a <_vfiprintf_r+0x1a>
 8016e26:	f000 fb45 	bl	80174b4 <__sinit>
 8016e2a:	4b8e      	ldr	r3, [pc, #568]	; (8017064 <_vfiprintf_r+0x254>)
 8016e2c:	429c      	cmp	r4, r3
 8016e2e:	d11c      	bne.n	8016e6a <_vfiprintf_r+0x5a>
 8016e30:	6874      	ldr	r4, [r6, #4]
 8016e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e34:	07db      	lsls	r3, r3, #31
 8016e36:	d405      	bmi.n	8016e44 <_vfiprintf_r+0x34>
 8016e38:	89a3      	ldrh	r3, [r4, #12]
 8016e3a:	059b      	lsls	r3, r3, #22
 8016e3c:	d402      	bmi.n	8016e44 <_vfiprintf_r+0x34>
 8016e3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e40:	f000 fbd9 	bl	80175f6 <__retarget_lock_acquire_recursive>
 8016e44:	89a3      	ldrh	r3, [r4, #12]
 8016e46:	071b      	lsls	r3, r3, #28
 8016e48:	d502      	bpl.n	8016e50 <_vfiprintf_r+0x40>
 8016e4a:	6923      	ldr	r3, [r4, #16]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d11d      	bne.n	8016e8c <_vfiprintf_r+0x7c>
 8016e50:	0021      	movs	r1, r4
 8016e52:	0030      	movs	r0, r6
 8016e54:	f000 f980 	bl	8017158 <__swsetup_r>
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	d017      	beq.n	8016e8c <_vfiprintf_r+0x7c>
 8016e5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e5e:	07db      	lsls	r3, r3, #31
 8016e60:	d50d      	bpl.n	8016e7e <_vfiprintf_r+0x6e>
 8016e62:	2001      	movs	r0, #1
 8016e64:	4240      	negs	r0, r0
 8016e66:	b021      	add	sp, #132	; 0x84
 8016e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e6a:	4b7f      	ldr	r3, [pc, #508]	; (8017068 <_vfiprintf_r+0x258>)
 8016e6c:	429c      	cmp	r4, r3
 8016e6e:	d101      	bne.n	8016e74 <_vfiprintf_r+0x64>
 8016e70:	68b4      	ldr	r4, [r6, #8]
 8016e72:	e7de      	b.n	8016e32 <_vfiprintf_r+0x22>
 8016e74:	4b7d      	ldr	r3, [pc, #500]	; (801706c <_vfiprintf_r+0x25c>)
 8016e76:	429c      	cmp	r4, r3
 8016e78:	d1db      	bne.n	8016e32 <_vfiprintf_r+0x22>
 8016e7a:	68f4      	ldr	r4, [r6, #12]
 8016e7c:	e7d9      	b.n	8016e32 <_vfiprintf_r+0x22>
 8016e7e:	89a3      	ldrh	r3, [r4, #12]
 8016e80:	059b      	lsls	r3, r3, #22
 8016e82:	d4ee      	bmi.n	8016e62 <_vfiprintf_r+0x52>
 8016e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e86:	f000 fbb7 	bl	80175f8 <__retarget_lock_release_recursive>
 8016e8a:	e7ea      	b.n	8016e62 <_vfiprintf_r+0x52>
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	ad08      	add	r5, sp, #32
 8016e90:	616b      	str	r3, [r5, #20]
 8016e92:	3320      	adds	r3, #32
 8016e94:	766b      	strb	r3, [r5, #25]
 8016e96:	3310      	adds	r3, #16
 8016e98:	76ab      	strb	r3, [r5, #26]
 8016e9a:	9707      	str	r7, [sp, #28]
 8016e9c:	9f03      	ldr	r7, [sp, #12]
 8016e9e:	783b      	ldrb	r3, [r7, #0]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d001      	beq.n	8016ea8 <_vfiprintf_r+0x98>
 8016ea4:	2b25      	cmp	r3, #37	; 0x25
 8016ea6:	d14e      	bne.n	8016f46 <_vfiprintf_r+0x136>
 8016ea8:	9b03      	ldr	r3, [sp, #12]
 8016eaa:	1afb      	subs	r3, r7, r3
 8016eac:	9305      	str	r3, [sp, #20]
 8016eae:	9b03      	ldr	r3, [sp, #12]
 8016eb0:	429f      	cmp	r7, r3
 8016eb2:	d00d      	beq.n	8016ed0 <_vfiprintf_r+0xc0>
 8016eb4:	9b05      	ldr	r3, [sp, #20]
 8016eb6:	0021      	movs	r1, r4
 8016eb8:	0030      	movs	r0, r6
 8016eba:	9a03      	ldr	r2, [sp, #12]
 8016ebc:	f7ff ff95 	bl	8016dea <__sfputs_r>
 8016ec0:	1c43      	adds	r3, r0, #1
 8016ec2:	d100      	bne.n	8016ec6 <_vfiprintf_r+0xb6>
 8016ec4:	e0b5      	b.n	8017032 <_vfiprintf_r+0x222>
 8016ec6:	696a      	ldr	r2, [r5, #20]
 8016ec8:	9b05      	ldr	r3, [sp, #20]
 8016eca:	4694      	mov	ip, r2
 8016ecc:	4463      	add	r3, ip
 8016ece:	616b      	str	r3, [r5, #20]
 8016ed0:	783b      	ldrb	r3, [r7, #0]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d100      	bne.n	8016ed8 <_vfiprintf_r+0xc8>
 8016ed6:	e0ac      	b.n	8017032 <_vfiprintf_r+0x222>
 8016ed8:	2201      	movs	r2, #1
 8016eda:	1c7b      	adds	r3, r7, #1
 8016edc:	9303      	str	r3, [sp, #12]
 8016ede:	2300      	movs	r3, #0
 8016ee0:	4252      	negs	r2, r2
 8016ee2:	606a      	str	r2, [r5, #4]
 8016ee4:	a904      	add	r1, sp, #16
 8016ee6:	3254      	adds	r2, #84	; 0x54
 8016ee8:	1852      	adds	r2, r2, r1
 8016eea:	602b      	str	r3, [r5, #0]
 8016eec:	60eb      	str	r3, [r5, #12]
 8016eee:	60ab      	str	r3, [r5, #8]
 8016ef0:	7013      	strb	r3, [r2, #0]
 8016ef2:	65ab      	str	r3, [r5, #88]	; 0x58
 8016ef4:	9b03      	ldr	r3, [sp, #12]
 8016ef6:	2205      	movs	r2, #5
 8016ef8:	7819      	ldrb	r1, [r3, #0]
 8016efa:	485d      	ldr	r0, [pc, #372]	; (8017070 <_vfiprintf_r+0x260>)
 8016efc:	f7ff f8e4 	bl	80160c8 <memchr>
 8016f00:	9b03      	ldr	r3, [sp, #12]
 8016f02:	1c5f      	adds	r7, r3, #1
 8016f04:	2800      	cmp	r0, #0
 8016f06:	d120      	bne.n	8016f4a <_vfiprintf_r+0x13a>
 8016f08:	682a      	ldr	r2, [r5, #0]
 8016f0a:	06d3      	lsls	r3, r2, #27
 8016f0c:	d504      	bpl.n	8016f18 <_vfiprintf_r+0x108>
 8016f0e:	2353      	movs	r3, #83	; 0x53
 8016f10:	a904      	add	r1, sp, #16
 8016f12:	185b      	adds	r3, r3, r1
 8016f14:	2120      	movs	r1, #32
 8016f16:	7019      	strb	r1, [r3, #0]
 8016f18:	0713      	lsls	r3, r2, #28
 8016f1a:	d504      	bpl.n	8016f26 <_vfiprintf_r+0x116>
 8016f1c:	2353      	movs	r3, #83	; 0x53
 8016f1e:	a904      	add	r1, sp, #16
 8016f20:	185b      	adds	r3, r3, r1
 8016f22:	212b      	movs	r1, #43	; 0x2b
 8016f24:	7019      	strb	r1, [r3, #0]
 8016f26:	9b03      	ldr	r3, [sp, #12]
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8016f2c:	d016      	beq.n	8016f5c <_vfiprintf_r+0x14c>
 8016f2e:	2100      	movs	r1, #0
 8016f30:	68eb      	ldr	r3, [r5, #12]
 8016f32:	9f03      	ldr	r7, [sp, #12]
 8016f34:	783a      	ldrb	r2, [r7, #0]
 8016f36:	1c78      	adds	r0, r7, #1
 8016f38:	3a30      	subs	r2, #48	; 0x30
 8016f3a:	4684      	mov	ip, r0
 8016f3c:	2a09      	cmp	r2, #9
 8016f3e:	d94f      	bls.n	8016fe0 <_vfiprintf_r+0x1d0>
 8016f40:	2900      	cmp	r1, #0
 8016f42:	d111      	bne.n	8016f68 <_vfiprintf_r+0x158>
 8016f44:	e017      	b.n	8016f76 <_vfiprintf_r+0x166>
 8016f46:	3701      	adds	r7, #1
 8016f48:	e7a9      	b.n	8016e9e <_vfiprintf_r+0x8e>
 8016f4a:	4b49      	ldr	r3, [pc, #292]	; (8017070 <_vfiprintf_r+0x260>)
 8016f4c:	682a      	ldr	r2, [r5, #0]
 8016f4e:	1ac0      	subs	r0, r0, r3
 8016f50:	2301      	movs	r3, #1
 8016f52:	4083      	lsls	r3, r0
 8016f54:	4313      	orrs	r3, r2
 8016f56:	602b      	str	r3, [r5, #0]
 8016f58:	9703      	str	r7, [sp, #12]
 8016f5a:	e7cb      	b.n	8016ef4 <_vfiprintf_r+0xe4>
 8016f5c:	9b07      	ldr	r3, [sp, #28]
 8016f5e:	1d19      	adds	r1, r3, #4
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	9107      	str	r1, [sp, #28]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	db01      	blt.n	8016f6c <_vfiprintf_r+0x15c>
 8016f68:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f6a:	e004      	b.n	8016f76 <_vfiprintf_r+0x166>
 8016f6c:	425b      	negs	r3, r3
 8016f6e:	60eb      	str	r3, [r5, #12]
 8016f70:	2302      	movs	r3, #2
 8016f72:	4313      	orrs	r3, r2
 8016f74:	602b      	str	r3, [r5, #0]
 8016f76:	783b      	ldrb	r3, [r7, #0]
 8016f78:	2b2e      	cmp	r3, #46	; 0x2e
 8016f7a:	d10a      	bne.n	8016f92 <_vfiprintf_r+0x182>
 8016f7c:	787b      	ldrb	r3, [r7, #1]
 8016f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8016f80:	d137      	bne.n	8016ff2 <_vfiprintf_r+0x1e2>
 8016f82:	9b07      	ldr	r3, [sp, #28]
 8016f84:	3702      	adds	r7, #2
 8016f86:	1d1a      	adds	r2, r3, #4
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	9207      	str	r2, [sp, #28]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	db2d      	blt.n	8016fec <_vfiprintf_r+0x1dc>
 8016f90:	9309      	str	r3, [sp, #36]	; 0x24
 8016f92:	2203      	movs	r2, #3
 8016f94:	7839      	ldrb	r1, [r7, #0]
 8016f96:	4837      	ldr	r0, [pc, #220]	; (8017074 <_vfiprintf_r+0x264>)
 8016f98:	f7ff f896 	bl	80160c8 <memchr>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d007      	beq.n	8016fb0 <_vfiprintf_r+0x1a0>
 8016fa0:	4b34      	ldr	r3, [pc, #208]	; (8017074 <_vfiprintf_r+0x264>)
 8016fa2:	682a      	ldr	r2, [r5, #0]
 8016fa4:	1ac0      	subs	r0, r0, r3
 8016fa6:	2340      	movs	r3, #64	; 0x40
 8016fa8:	4083      	lsls	r3, r0
 8016faa:	4313      	orrs	r3, r2
 8016fac:	3701      	adds	r7, #1
 8016fae:	602b      	str	r3, [r5, #0]
 8016fb0:	7839      	ldrb	r1, [r7, #0]
 8016fb2:	1c7b      	adds	r3, r7, #1
 8016fb4:	2206      	movs	r2, #6
 8016fb6:	4830      	ldr	r0, [pc, #192]	; (8017078 <_vfiprintf_r+0x268>)
 8016fb8:	9303      	str	r3, [sp, #12]
 8016fba:	7629      	strb	r1, [r5, #24]
 8016fbc:	f7ff f884 	bl	80160c8 <memchr>
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d045      	beq.n	8017050 <_vfiprintf_r+0x240>
 8016fc4:	4b2d      	ldr	r3, [pc, #180]	; (801707c <_vfiprintf_r+0x26c>)
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d127      	bne.n	801701a <_vfiprintf_r+0x20a>
 8016fca:	2207      	movs	r2, #7
 8016fcc:	9b07      	ldr	r3, [sp, #28]
 8016fce:	3307      	adds	r3, #7
 8016fd0:	4393      	bics	r3, r2
 8016fd2:	3308      	adds	r3, #8
 8016fd4:	9307      	str	r3, [sp, #28]
 8016fd6:	696b      	ldr	r3, [r5, #20]
 8016fd8:	9a04      	ldr	r2, [sp, #16]
 8016fda:	189b      	adds	r3, r3, r2
 8016fdc:	616b      	str	r3, [r5, #20]
 8016fde:	e75d      	b.n	8016e9c <_vfiprintf_r+0x8c>
 8016fe0:	210a      	movs	r1, #10
 8016fe2:	434b      	muls	r3, r1
 8016fe4:	4667      	mov	r7, ip
 8016fe6:	189b      	adds	r3, r3, r2
 8016fe8:	3909      	subs	r1, #9
 8016fea:	e7a3      	b.n	8016f34 <_vfiprintf_r+0x124>
 8016fec:	2301      	movs	r3, #1
 8016fee:	425b      	negs	r3, r3
 8016ff0:	e7ce      	b.n	8016f90 <_vfiprintf_r+0x180>
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	001a      	movs	r2, r3
 8016ff6:	3701      	adds	r7, #1
 8016ff8:	606b      	str	r3, [r5, #4]
 8016ffa:	7839      	ldrb	r1, [r7, #0]
 8016ffc:	1c78      	adds	r0, r7, #1
 8016ffe:	3930      	subs	r1, #48	; 0x30
 8017000:	4684      	mov	ip, r0
 8017002:	2909      	cmp	r1, #9
 8017004:	d903      	bls.n	801700e <_vfiprintf_r+0x1fe>
 8017006:	2b00      	cmp	r3, #0
 8017008:	d0c3      	beq.n	8016f92 <_vfiprintf_r+0x182>
 801700a:	9209      	str	r2, [sp, #36]	; 0x24
 801700c:	e7c1      	b.n	8016f92 <_vfiprintf_r+0x182>
 801700e:	230a      	movs	r3, #10
 8017010:	435a      	muls	r2, r3
 8017012:	4667      	mov	r7, ip
 8017014:	1852      	adds	r2, r2, r1
 8017016:	3b09      	subs	r3, #9
 8017018:	e7ef      	b.n	8016ffa <_vfiprintf_r+0x1ea>
 801701a:	ab07      	add	r3, sp, #28
 801701c:	9300      	str	r3, [sp, #0]
 801701e:	0022      	movs	r2, r4
 8017020:	0029      	movs	r1, r5
 8017022:	0030      	movs	r0, r6
 8017024:	4b16      	ldr	r3, [pc, #88]	; (8017080 <_vfiprintf_r+0x270>)
 8017026:	f7fc f9db 	bl	80133e0 <_printf_float>
 801702a:	9004      	str	r0, [sp, #16]
 801702c:	9b04      	ldr	r3, [sp, #16]
 801702e:	3301      	adds	r3, #1
 8017030:	d1d1      	bne.n	8016fd6 <_vfiprintf_r+0x1c6>
 8017032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017034:	07db      	lsls	r3, r3, #31
 8017036:	d405      	bmi.n	8017044 <_vfiprintf_r+0x234>
 8017038:	89a3      	ldrh	r3, [r4, #12]
 801703a:	059b      	lsls	r3, r3, #22
 801703c:	d402      	bmi.n	8017044 <_vfiprintf_r+0x234>
 801703e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017040:	f000 fada 	bl	80175f8 <__retarget_lock_release_recursive>
 8017044:	89a3      	ldrh	r3, [r4, #12]
 8017046:	065b      	lsls	r3, r3, #25
 8017048:	d500      	bpl.n	801704c <_vfiprintf_r+0x23c>
 801704a:	e70a      	b.n	8016e62 <_vfiprintf_r+0x52>
 801704c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801704e:	e70a      	b.n	8016e66 <_vfiprintf_r+0x56>
 8017050:	ab07      	add	r3, sp, #28
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	0022      	movs	r2, r4
 8017056:	0029      	movs	r1, r5
 8017058:	0030      	movs	r0, r6
 801705a:	4b09      	ldr	r3, [pc, #36]	; (8017080 <_vfiprintf_r+0x270>)
 801705c:	f7fc fc7e 	bl	801395c <_printf_i>
 8017060:	e7e3      	b.n	801702a <_vfiprintf_r+0x21a>
 8017062:	46c0      	nop			; (mov r8, r8)
 8017064:	0801af90 	.word	0x0801af90
 8017068:	0801afb0 	.word	0x0801afb0
 801706c:	0801af70 	.word	0x0801af70
 8017070:	0801af5c 	.word	0x0801af5c
 8017074:	0801af62 	.word	0x0801af62
 8017078:	0801af66 	.word	0x0801af66
 801707c:	080133e1 	.word	0x080133e1
 8017080:	08016deb 	.word	0x08016deb

08017084 <nan>:
 8017084:	2000      	movs	r0, #0
 8017086:	4901      	ldr	r1, [pc, #4]	; (801708c <nan+0x8>)
 8017088:	4770      	bx	lr
 801708a:	46c0      	nop			; (mov r8, r8)
 801708c:	7ff80000 	.word	0x7ff80000

08017090 <__swbuf_r>:
 8017090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017092:	0005      	movs	r5, r0
 8017094:	000e      	movs	r6, r1
 8017096:	0014      	movs	r4, r2
 8017098:	2800      	cmp	r0, #0
 801709a:	d004      	beq.n	80170a6 <__swbuf_r+0x16>
 801709c:	6983      	ldr	r3, [r0, #24]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d101      	bne.n	80170a6 <__swbuf_r+0x16>
 80170a2:	f000 fa07 	bl	80174b4 <__sinit>
 80170a6:	4b22      	ldr	r3, [pc, #136]	; (8017130 <__swbuf_r+0xa0>)
 80170a8:	429c      	cmp	r4, r3
 80170aa:	d12e      	bne.n	801710a <__swbuf_r+0x7a>
 80170ac:	686c      	ldr	r4, [r5, #4]
 80170ae:	69a3      	ldr	r3, [r4, #24]
 80170b0:	60a3      	str	r3, [r4, #8]
 80170b2:	89a3      	ldrh	r3, [r4, #12]
 80170b4:	071b      	lsls	r3, r3, #28
 80170b6:	d532      	bpl.n	801711e <__swbuf_r+0x8e>
 80170b8:	6923      	ldr	r3, [r4, #16]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d02f      	beq.n	801711e <__swbuf_r+0x8e>
 80170be:	6823      	ldr	r3, [r4, #0]
 80170c0:	6922      	ldr	r2, [r4, #16]
 80170c2:	b2f7      	uxtb	r7, r6
 80170c4:	1a98      	subs	r0, r3, r2
 80170c6:	6963      	ldr	r3, [r4, #20]
 80170c8:	b2f6      	uxtb	r6, r6
 80170ca:	4283      	cmp	r3, r0
 80170cc:	dc05      	bgt.n	80170da <__swbuf_r+0x4a>
 80170ce:	0021      	movs	r1, r4
 80170d0:	0028      	movs	r0, r5
 80170d2:	f000 f94d 	bl	8017370 <_fflush_r>
 80170d6:	2800      	cmp	r0, #0
 80170d8:	d127      	bne.n	801712a <__swbuf_r+0x9a>
 80170da:	68a3      	ldr	r3, [r4, #8]
 80170dc:	3001      	adds	r0, #1
 80170de:	3b01      	subs	r3, #1
 80170e0:	60a3      	str	r3, [r4, #8]
 80170e2:	6823      	ldr	r3, [r4, #0]
 80170e4:	1c5a      	adds	r2, r3, #1
 80170e6:	6022      	str	r2, [r4, #0]
 80170e8:	701f      	strb	r7, [r3, #0]
 80170ea:	6963      	ldr	r3, [r4, #20]
 80170ec:	4283      	cmp	r3, r0
 80170ee:	d004      	beq.n	80170fa <__swbuf_r+0x6a>
 80170f0:	89a3      	ldrh	r3, [r4, #12]
 80170f2:	07db      	lsls	r3, r3, #31
 80170f4:	d507      	bpl.n	8017106 <__swbuf_r+0x76>
 80170f6:	2e0a      	cmp	r6, #10
 80170f8:	d105      	bne.n	8017106 <__swbuf_r+0x76>
 80170fa:	0021      	movs	r1, r4
 80170fc:	0028      	movs	r0, r5
 80170fe:	f000 f937 	bl	8017370 <_fflush_r>
 8017102:	2800      	cmp	r0, #0
 8017104:	d111      	bne.n	801712a <__swbuf_r+0x9a>
 8017106:	0030      	movs	r0, r6
 8017108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801710a:	4b0a      	ldr	r3, [pc, #40]	; (8017134 <__swbuf_r+0xa4>)
 801710c:	429c      	cmp	r4, r3
 801710e:	d101      	bne.n	8017114 <__swbuf_r+0x84>
 8017110:	68ac      	ldr	r4, [r5, #8]
 8017112:	e7cc      	b.n	80170ae <__swbuf_r+0x1e>
 8017114:	4b08      	ldr	r3, [pc, #32]	; (8017138 <__swbuf_r+0xa8>)
 8017116:	429c      	cmp	r4, r3
 8017118:	d1c9      	bne.n	80170ae <__swbuf_r+0x1e>
 801711a:	68ec      	ldr	r4, [r5, #12]
 801711c:	e7c7      	b.n	80170ae <__swbuf_r+0x1e>
 801711e:	0021      	movs	r1, r4
 8017120:	0028      	movs	r0, r5
 8017122:	f000 f819 	bl	8017158 <__swsetup_r>
 8017126:	2800      	cmp	r0, #0
 8017128:	d0c9      	beq.n	80170be <__swbuf_r+0x2e>
 801712a:	2601      	movs	r6, #1
 801712c:	4276      	negs	r6, r6
 801712e:	e7ea      	b.n	8017106 <__swbuf_r+0x76>
 8017130:	0801af90 	.word	0x0801af90
 8017134:	0801afb0 	.word	0x0801afb0
 8017138:	0801af70 	.word	0x0801af70

0801713c <__ascii_wctomb>:
 801713c:	0003      	movs	r3, r0
 801713e:	1e08      	subs	r0, r1, #0
 8017140:	d005      	beq.n	801714e <__ascii_wctomb+0x12>
 8017142:	2aff      	cmp	r2, #255	; 0xff
 8017144:	d904      	bls.n	8017150 <__ascii_wctomb+0x14>
 8017146:	228a      	movs	r2, #138	; 0x8a
 8017148:	2001      	movs	r0, #1
 801714a:	601a      	str	r2, [r3, #0]
 801714c:	4240      	negs	r0, r0
 801714e:	4770      	bx	lr
 8017150:	2001      	movs	r0, #1
 8017152:	700a      	strb	r2, [r1, #0]
 8017154:	e7fb      	b.n	801714e <__ascii_wctomb+0x12>
	...

08017158 <__swsetup_r>:
 8017158:	4b37      	ldr	r3, [pc, #220]	; (8017238 <__swsetup_r+0xe0>)
 801715a:	b570      	push	{r4, r5, r6, lr}
 801715c:	681d      	ldr	r5, [r3, #0]
 801715e:	0006      	movs	r6, r0
 8017160:	000c      	movs	r4, r1
 8017162:	2d00      	cmp	r5, #0
 8017164:	d005      	beq.n	8017172 <__swsetup_r+0x1a>
 8017166:	69ab      	ldr	r3, [r5, #24]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d102      	bne.n	8017172 <__swsetup_r+0x1a>
 801716c:	0028      	movs	r0, r5
 801716e:	f000 f9a1 	bl	80174b4 <__sinit>
 8017172:	4b32      	ldr	r3, [pc, #200]	; (801723c <__swsetup_r+0xe4>)
 8017174:	429c      	cmp	r4, r3
 8017176:	d10f      	bne.n	8017198 <__swsetup_r+0x40>
 8017178:	686c      	ldr	r4, [r5, #4]
 801717a:	230c      	movs	r3, #12
 801717c:	5ee2      	ldrsh	r2, [r4, r3]
 801717e:	b293      	uxth	r3, r2
 8017180:	0711      	lsls	r1, r2, #28
 8017182:	d42d      	bmi.n	80171e0 <__swsetup_r+0x88>
 8017184:	06d9      	lsls	r1, r3, #27
 8017186:	d411      	bmi.n	80171ac <__swsetup_r+0x54>
 8017188:	2309      	movs	r3, #9
 801718a:	2001      	movs	r0, #1
 801718c:	6033      	str	r3, [r6, #0]
 801718e:	3337      	adds	r3, #55	; 0x37
 8017190:	4313      	orrs	r3, r2
 8017192:	81a3      	strh	r3, [r4, #12]
 8017194:	4240      	negs	r0, r0
 8017196:	bd70      	pop	{r4, r5, r6, pc}
 8017198:	4b29      	ldr	r3, [pc, #164]	; (8017240 <__swsetup_r+0xe8>)
 801719a:	429c      	cmp	r4, r3
 801719c:	d101      	bne.n	80171a2 <__swsetup_r+0x4a>
 801719e:	68ac      	ldr	r4, [r5, #8]
 80171a0:	e7eb      	b.n	801717a <__swsetup_r+0x22>
 80171a2:	4b28      	ldr	r3, [pc, #160]	; (8017244 <__swsetup_r+0xec>)
 80171a4:	429c      	cmp	r4, r3
 80171a6:	d1e8      	bne.n	801717a <__swsetup_r+0x22>
 80171a8:	68ec      	ldr	r4, [r5, #12]
 80171aa:	e7e6      	b.n	801717a <__swsetup_r+0x22>
 80171ac:	075b      	lsls	r3, r3, #29
 80171ae:	d513      	bpl.n	80171d8 <__swsetup_r+0x80>
 80171b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171b2:	2900      	cmp	r1, #0
 80171b4:	d008      	beq.n	80171c8 <__swsetup_r+0x70>
 80171b6:	0023      	movs	r3, r4
 80171b8:	3344      	adds	r3, #68	; 0x44
 80171ba:	4299      	cmp	r1, r3
 80171bc:	d002      	beq.n	80171c4 <__swsetup_r+0x6c>
 80171be:	0030      	movs	r0, r6
 80171c0:	f7fb ffbc 	bl	801313c <_free_r>
 80171c4:	2300      	movs	r3, #0
 80171c6:	6363      	str	r3, [r4, #52]	; 0x34
 80171c8:	2224      	movs	r2, #36	; 0x24
 80171ca:	89a3      	ldrh	r3, [r4, #12]
 80171cc:	4393      	bics	r3, r2
 80171ce:	81a3      	strh	r3, [r4, #12]
 80171d0:	2300      	movs	r3, #0
 80171d2:	6063      	str	r3, [r4, #4]
 80171d4:	6923      	ldr	r3, [r4, #16]
 80171d6:	6023      	str	r3, [r4, #0]
 80171d8:	2308      	movs	r3, #8
 80171da:	89a2      	ldrh	r2, [r4, #12]
 80171dc:	4313      	orrs	r3, r2
 80171de:	81a3      	strh	r3, [r4, #12]
 80171e0:	6923      	ldr	r3, [r4, #16]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d10b      	bne.n	80171fe <__swsetup_r+0xa6>
 80171e6:	21a0      	movs	r1, #160	; 0xa0
 80171e8:	2280      	movs	r2, #128	; 0x80
 80171ea:	89a3      	ldrh	r3, [r4, #12]
 80171ec:	0089      	lsls	r1, r1, #2
 80171ee:	0092      	lsls	r2, r2, #2
 80171f0:	400b      	ands	r3, r1
 80171f2:	4293      	cmp	r3, r2
 80171f4:	d003      	beq.n	80171fe <__swsetup_r+0xa6>
 80171f6:	0021      	movs	r1, r4
 80171f8:	0030      	movs	r0, r6
 80171fa:	f000 fa27 	bl	801764c <__smakebuf_r>
 80171fe:	220c      	movs	r2, #12
 8017200:	5ea3      	ldrsh	r3, [r4, r2]
 8017202:	2001      	movs	r0, #1
 8017204:	001a      	movs	r2, r3
 8017206:	b299      	uxth	r1, r3
 8017208:	4002      	ands	r2, r0
 801720a:	4203      	tst	r3, r0
 801720c:	d00f      	beq.n	801722e <__swsetup_r+0xd6>
 801720e:	2200      	movs	r2, #0
 8017210:	60a2      	str	r2, [r4, #8]
 8017212:	6962      	ldr	r2, [r4, #20]
 8017214:	4252      	negs	r2, r2
 8017216:	61a2      	str	r2, [r4, #24]
 8017218:	2000      	movs	r0, #0
 801721a:	6922      	ldr	r2, [r4, #16]
 801721c:	4282      	cmp	r2, r0
 801721e:	d1ba      	bne.n	8017196 <__swsetup_r+0x3e>
 8017220:	060a      	lsls	r2, r1, #24
 8017222:	d5b8      	bpl.n	8017196 <__swsetup_r+0x3e>
 8017224:	2240      	movs	r2, #64	; 0x40
 8017226:	4313      	orrs	r3, r2
 8017228:	81a3      	strh	r3, [r4, #12]
 801722a:	3801      	subs	r0, #1
 801722c:	e7b3      	b.n	8017196 <__swsetup_r+0x3e>
 801722e:	0788      	lsls	r0, r1, #30
 8017230:	d400      	bmi.n	8017234 <__swsetup_r+0xdc>
 8017232:	6962      	ldr	r2, [r4, #20]
 8017234:	60a2      	str	r2, [r4, #8]
 8017236:	e7ef      	b.n	8017218 <__swsetup_r+0xc0>
 8017238:	20000120 	.word	0x20000120
 801723c:	0801af90 	.word	0x0801af90
 8017240:	0801afb0 	.word	0x0801afb0
 8017244:	0801af70 	.word	0x0801af70

08017248 <abort>:
 8017248:	2006      	movs	r0, #6
 801724a:	b510      	push	{r4, lr}
 801724c:	f000 fa88 	bl	8017760 <raise>
 8017250:	2001      	movs	r0, #1
 8017252:	f000 fbb3 	bl	80179bc <_exit>
	...

08017258 <__sflush_r>:
 8017258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801725a:	898b      	ldrh	r3, [r1, #12]
 801725c:	0005      	movs	r5, r0
 801725e:	000c      	movs	r4, r1
 8017260:	071a      	lsls	r2, r3, #28
 8017262:	d45f      	bmi.n	8017324 <__sflush_r+0xcc>
 8017264:	684a      	ldr	r2, [r1, #4]
 8017266:	2a00      	cmp	r2, #0
 8017268:	dc04      	bgt.n	8017274 <__sflush_r+0x1c>
 801726a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801726c:	2a00      	cmp	r2, #0
 801726e:	dc01      	bgt.n	8017274 <__sflush_r+0x1c>
 8017270:	2000      	movs	r0, #0
 8017272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017274:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8017276:	2f00      	cmp	r7, #0
 8017278:	d0fa      	beq.n	8017270 <__sflush_r+0x18>
 801727a:	2200      	movs	r2, #0
 801727c:	2180      	movs	r1, #128	; 0x80
 801727e:	682e      	ldr	r6, [r5, #0]
 8017280:	602a      	str	r2, [r5, #0]
 8017282:	001a      	movs	r2, r3
 8017284:	0149      	lsls	r1, r1, #5
 8017286:	400a      	ands	r2, r1
 8017288:	420b      	tst	r3, r1
 801728a:	d034      	beq.n	80172f6 <__sflush_r+0x9e>
 801728c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801728e:	89a3      	ldrh	r3, [r4, #12]
 8017290:	075b      	lsls	r3, r3, #29
 8017292:	d506      	bpl.n	80172a2 <__sflush_r+0x4a>
 8017294:	6863      	ldr	r3, [r4, #4]
 8017296:	1ac0      	subs	r0, r0, r3
 8017298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801729a:	2b00      	cmp	r3, #0
 801729c:	d001      	beq.n	80172a2 <__sflush_r+0x4a>
 801729e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172a0:	1ac0      	subs	r0, r0, r3
 80172a2:	0002      	movs	r2, r0
 80172a4:	6a21      	ldr	r1, [r4, #32]
 80172a6:	2300      	movs	r3, #0
 80172a8:	0028      	movs	r0, r5
 80172aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80172ac:	47b8      	blx	r7
 80172ae:	89a1      	ldrh	r1, [r4, #12]
 80172b0:	1c43      	adds	r3, r0, #1
 80172b2:	d106      	bne.n	80172c2 <__sflush_r+0x6a>
 80172b4:	682b      	ldr	r3, [r5, #0]
 80172b6:	2b1d      	cmp	r3, #29
 80172b8:	d831      	bhi.n	801731e <__sflush_r+0xc6>
 80172ba:	4a2c      	ldr	r2, [pc, #176]	; (801736c <__sflush_r+0x114>)
 80172bc:	40da      	lsrs	r2, r3
 80172be:	07d3      	lsls	r3, r2, #31
 80172c0:	d52d      	bpl.n	801731e <__sflush_r+0xc6>
 80172c2:	2300      	movs	r3, #0
 80172c4:	6063      	str	r3, [r4, #4]
 80172c6:	6923      	ldr	r3, [r4, #16]
 80172c8:	6023      	str	r3, [r4, #0]
 80172ca:	04cb      	lsls	r3, r1, #19
 80172cc:	d505      	bpl.n	80172da <__sflush_r+0x82>
 80172ce:	1c43      	adds	r3, r0, #1
 80172d0:	d102      	bne.n	80172d8 <__sflush_r+0x80>
 80172d2:	682b      	ldr	r3, [r5, #0]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d100      	bne.n	80172da <__sflush_r+0x82>
 80172d8:	6560      	str	r0, [r4, #84]	; 0x54
 80172da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172dc:	602e      	str	r6, [r5, #0]
 80172de:	2900      	cmp	r1, #0
 80172e0:	d0c6      	beq.n	8017270 <__sflush_r+0x18>
 80172e2:	0023      	movs	r3, r4
 80172e4:	3344      	adds	r3, #68	; 0x44
 80172e6:	4299      	cmp	r1, r3
 80172e8:	d002      	beq.n	80172f0 <__sflush_r+0x98>
 80172ea:	0028      	movs	r0, r5
 80172ec:	f7fb ff26 	bl	801313c <_free_r>
 80172f0:	2000      	movs	r0, #0
 80172f2:	6360      	str	r0, [r4, #52]	; 0x34
 80172f4:	e7bd      	b.n	8017272 <__sflush_r+0x1a>
 80172f6:	2301      	movs	r3, #1
 80172f8:	0028      	movs	r0, r5
 80172fa:	6a21      	ldr	r1, [r4, #32]
 80172fc:	47b8      	blx	r7
 80172fe:	1c43      	adds	r3, r0, #1
 8017300:	d1c5      	bne.n	801728e <__sflush_r+0x36>
 8017302:	682b      	ldr	r3, [r5, #0]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d0c2      	beq.n	801728e <__sflush_r+0x36>
 8017308:	2b1d      	cmp	r3, #29
 801730a:	d001      	beq.n	8017310 <__sflush_r+0xb8>
 801730c:	2b16      	cmp	r3, #22
 801730e:	d101      	bne.n	8017314 <__sflush_r+0xbc>
 8017310:	602e      	str	r6, [r5, #0]
 8017312:	e7ad      	b.n	8017270 <__sflush_r+0x18>
 8017314:	2340      	movs	r3, #64	; 0x40
 8017316:	89a2      	ldrh	r2, [r4, #12]
 8017318:	4313      	orrs	r3, r2
 801731a:	81a3      	strh	r3, [r4, #12]
 801731c:	e7a9      	b.n	8017272 <__sflush_r+0x1a>
 801731e:	2340      	movs	r3, #64	; 0x40
 8017320:	430b      	orrs	r3, r1
 8017322:	e7fa      	b.n	801731a <__sflush_r+0xc2>
 8017324:	690f      	ldr	r7, [r1, #16]
 8017326:	2f00      	cmp	r7, #0
 8017328:	d0a2      	beq.n	8017270 <__sflush_r+0x18>
 801732a:	680a      	ldr	r2, [r1, #0]
 801732c:	600f      	str	r7, [r1, #0]
 801732e:	1bd2      	subs	r2, r2, r7
 8017330:	9201      	str	r2, [sp, #4]
 8017332:	2200      	movs	r2, #0
 8017334:	079b      	lsls	r3, r3, #30
 8017336:	d100      	bne.n	801733a <__sflush_r+0xe2>
 8017338:	694a      	ldr	r2, [r1, #20]
 801733a:	60a2      	str	r2, [r4, #8]
 801733c:	9b01      	ldr	r3, [sp, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	dc00      	bgt.n	8017344 <__sflush_r+0xec>
 8017342:	e795      	b.n	8017270 <__sflush_r+0x18>
 8017344:	003a      	movs	r2, r7
 8017346:	0028      	movs	r0, r5
 8017348:	9b01      	ldr	r3, [sp, #4]
 801734a:	6a21      	ldr	r1, [r4, #32]
 801734c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801734e:	47b0      	blx	r6
 8017350:	2800      	cmp	r0, #0
 8017352:	dc06      	bgt.n	8017362 <__sflush_r+0x10a>
 8017354:	2340      	movs	r3, #64	; 0x40
 8017356:	2001      	movs	r0, #1
 8017358:	89a2      	ldrh	r2, [r4, #12]
 801735a:	4240      	negs	r0, r0
 801735c:	4313      	orrs	r3, r2
 801735e:	81a3      	strh	r3, [r4, #12]
 8017360:	e787      	b.n	8017272 <__sflush_r+0x1a>
 8017362:	9b01      	ldr	r3, [sp, #4]
 8017364:	183f      	adds	r7, r7, r0
 8017366:	1a1b      	subs	r3, r3, r0
 8017368:	9301      	str	r3, [sp, #4]
 801736a:	e7e7      	b.n	801733c <__sflush_r+0xe4>
 801736c:	20400001 	.word	0x20400001

08017370 <_fflush_r>:
 8017370:	690b      	ldr	r3, [r1, #16]
 8017372:	b570      	push	{r4, r5, r6, lr}
 8017374:	0005      	movs	r5, r0
 8017376:	000c      	movs	r4, r1
 8017378:	2b00      	cmp	r3, #0
 801737a:	d102      	bne.n	8017382 <_fflush_r+0x12>
 801737c:	2500      	movs	r5, #0
 801737e:	0028      	movs	r0, r5
 8017380:	bd70      	pop	{r4, r5, r6, pc}
 8017382:	2800      	cmp	r0, #0
 8017384:	d004      	beq.n	8017390 <_fflush_r+0x20>
 8017386:	6983      	ldr	r3, [r0, #24]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d101      	bne.n	8017390 <_fflush_r+0x20>
 801738c:	f000 f892 	bl	80174b4 <__sinit>
 8017390:	4b14      	ldr	r3, [pc, #80]	; (80173e4 <_fflush_r+0x74>)
 8017392:	429c      	cmp	r4, r3
 8017394:	d11b      	bne.n	80173ce <_fflush_r+0x5e>
 8017396:	686c      	ldr	r4, [r5, #4]
 8017398:	220c      	movs	r2, #12
 801739a:	5ea3      	ldrsh	r3, [r4, r2]
 801739c:	2b00      	cmp	r3, #0
 801739e:	d0ed      	beq.n	801737c <_fflush_r+0xc>
 80173a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80173a2:	07d2      	lsls	r2, r2, #31
 80173a4:	d404      	bmi.n	80173b0 <_fflush_r+0x40>
 80173a6:	059b      	lsls	r3, r3, #22
 80173a8:	d402      	bmi.n	80173b0 <_fflush_r+0x40>
 80173aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173ac:	f000 f923 	bl	80175f6 <__retarget_lock_acquire_recursive>
 80173b0:	0028      	movs	r0, r5
 80173b2:	0021      	movs	r1, r4
 80173b4:	f7ff ff50 	bl	8017258 <__sflush_r>
 80173b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173ba:	0005      	movs	r5, r0
 80173bc:	07db      	lsls	r3, r3, #31
 80173be:	d4de      	bmi.n	801737e <_fflush_r+0xe>
 80173c0:	89a3      	ldrh	r3, [r4, #12]
 80173c2:	059b      	lsls	r3, r3, #22
 80173c4:	d4db      	bmi.n	801737e <_fflush_r+0xe>
 80173c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173c8:	f000 f916 	bl	80175f8 <__retarget_lock_release_recursive>
 80173cc:	e7d7      	b.n	801737e <_fflush_r+0xe>
 80173ce:	4b06      	ldr	r3, [pc, #24]	; (80173e8 <_fflush_r+0x78>)
 80173d0:	429c      	cmp	r4, r3
 80173d2:	d101      	bne.n	80173d8 <_fflush_r+0x68>
 80173d4:	68ac      	ldr	r4, [r5, #8]
 80173d6:	e7df      	b.n	8017398 <_fflush_r+0x28>
 80173d8:	4b04      	ldr	r3, [pc, #16]	; (80173ec <_fflush_r+0x7c>)
 80173da:	429c      	cmp	r4, r3
 80173dc:	d1dc      	bne.n	8017398 <_fflush_r+0x28>
 80173de:	68ec      	ldr	r4, [r5, #12]
 80173e0:	e7da      	b.n	8017398 <_fflush_r+0x28>
 80173e2:	46c0      	nop			; (mov r8, r8)
 80173e4:	0801af90 	.word	0x0801af90
 80173e8:	0801afb0 	.word	0x0801afb0
 80173ec:	0801af70 	.word	0x0801af70

080173f0 <std>:
 80173f0:	2300      	movs	r3, #0
 80173f2:	b510      	push	{r4, lr}
 80173f4:	0004      	movs	r4, r0
 80173f6:	6003      	str	r3, [r0, #0]
 80173f8:	6043      	str	r3, [r0, #4]
 80173fa:	6083      	str	r3, [r0, #8]
 80173fc:	8181      	strh	r1, [r0, #12]
 80173fe:	6643      	str	r3, [r0, #100]	; 0x64
 8017400:	0019      	movs	r1, r3
 8017402:	81c2      	strh	r2, [r0, #14]
 8017404:	6103      	str	r3, [r0, #16]
 8017406:	6143      	str	r3, [r0, #20]
 8017408:	6183      	str	r3, [r0, #24]
 801740a:	2208      	movs	r2, #8
 801740c:	305c      	adds	r0, #92	; 0x5c
 801740e:	f7fb fe8c 	bl	801312a <memset>
 8017412:	4b05      	ldr	r3, [pc, #20]	; (8017428 <std+0x38>)
 8017414:	6263      	str	r3, [r4, #36]	; 0x24
 8017416:	4b05      	ldr	r3, [pc, #20]	; (801742c <std+0x3c>)
 8017418:	6224      	str	r4, [r4, #32]
 801741a:	62a3      	str	r3, [r4, #40]	; 0x28
 801741c:	4b04      	ldr	r3, [pc, #16]	; (8017430 <std+0x40>)
 801741e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017420:	4b04      	ldr	r3, [pc, #16]	; (8017434 <std+0x44>)
 8017422:	6323      	str	r3, [r4, #48]	; 0x30
 8017424:	bd10      	pop	{r4, pc}
 8017426:	46c0      	nop			; (mov r8, r8)
 8017428:	080177a1 	.word	0x080177a1
 801742c:	080177c9 	.word	0x080177c9
 8017430:	08017801 	.word	0x08017801
 8017434:	0801782d 	.word	0x0801782d

08017438 <_cleanup_r>:
 8017438:	b510      	push	{r4, lr}
 801743a:	4902      	ldr	r1, [pc, #8]	; (8017444 <_cleanup_r+0xc>)
 801743c:	f000 f8ba 	bl	80175b4 <_fwalk_reent>
 8017440:	bd10      	pop	{r4, pc}
 8017442:	46c0      	nop			; (mov r8, r8)
 8017444:	08017371 	.word	0x08017371

08017448 <__sfmoreglue>:
 8017448:	b570      	push	{r4, r5, r6, lr}
 801744a:	2568      	movs	r5, #104	; 0x68
 801744c:	1e4a      	subs	r2, r1, #1
 801744e:	4355      	muls	r5, r2
 8017450:	000e      	movs	r6, r1
 8017452:	0029      	movs	r1, r5
 8017454:	3174      	adds	r1, #116	; 0x74
 8017456:	f7fb febb 	bl	80131d0 <_malloc_r>
 801745a:	1e04      	subs	r4, r0, #0
 801745c:	d008      	beq.n	8017470 <__sfmoreglue+0x28>
 801745e:	2100      	movs	r1, #0
 8017460:	002a      	movs	r2, r5
 8017462:	6001      	str	r1, [r0, #0]
 8017464:	6046      	str	r6, [r0, #4]
 8017466:	300c      	adds	r0, #12
 8017468:	60a0      	str	r0, [r4, #8]
 801746a:	3268      	adds	r2, #104	; 0x68
 801746c:	f7fb fe5d 	bl	801312a <memset>
 8017470:	0020      	movs	r0, r4
 8017472:	bd70      	pop	{r4, r5, r6, pc}

08017474 <__sfp_lock_acquire>:
 8017474:	b510      	push	{r4, lr}
 8017476:	4802      	ldr	r0, [pc, #8]	; (8017480 <__sfp_lock_acquire+0xc>)
 8017478:	f000 f8bd 	bl	80175f6 <__retarget_lock_acquire_recursive>
 801747c:	bd10      	pop	{r4, pc}
 801747e:	46c0      	nop			; (mov r8, r8)
 8017480:	20005cc4 	.word	0x20005cc4

08017484 <__sfp_lock_release>:
 8017484:	b510      	push	{r4, lr}
 8017486:	4802      	ldr	r0, [pc, #8]	; (8017490 <__sfp_lock_release+0xc>)
 8017488:	f000 f8b6 	bl	80175f8 <__retarget_lock_release_recursive>
 801748c:	bd10      	pop	{r4, pc}
 801748e:	46c0      	nop			; (mov r8, r8)
 8017490:	20005cc4 	.word	0x20005cc4

08017494 <__sinit_lock_acquire>:
 8017494:	b510      	push	{r4, lr}
 8017496:	4802      	ldr	r0, [pc, #8]	; (80174a0 <__sinit_lock_acquire+0xc>)
 8017498:	f000 f8ad 	bl	80175f6 <__retarget_lock_acquire_recursive>
 801749c:	bd10      	pop	{r4, pc}
 801749e:	46c0      	nop			; (mov r8, r8)
 80174a0:	20005cbf 	.word	0x20005cbf

080174a4 <__sinit_lock_release>:
 80174a4:	b510      	push	{r4, lr}
 80174a6:	4802      	ldr	r0, [pc, #8]	; (80174b0 <__sinit_lock_release+0xc>)
 80174a8:	f000 f8a6 	bl	80175f8 <__retarget_lock_release_recursive>
 80174ac:	bd10      	pop	{r4, pc}
 80174ae:	46c0      	nop			; (mov r8, r8)
 80174b0:	20005cbf 	.word	0x20005cbf

080174b4 <__sinit>:
 80174b4:	b513      	push	{r0, r1, r4, lr}
 80174b6:	0004      	movs	r4, r0
 80174b8:	f7ff ffec 	bl	8017494 <__sinit_lock_acquire>
 80174bc:	69a3      	ldr	r3, [r4, #24]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d002      	beq.n	80174c8 <__sinit+0x14>
 80174c2:	f7ff ffef 	bl	80174a4 <__sinit_lock_release>
 80174c6:	bd13      	pop	{r0, r1, r4, pc}
 80174c8:	64a3      	str	r3, [r4, #72]	; 0x48
 80174ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 80174cc:	6523      	str	r3, [r4, #80]	; 0x50
 80174ce:	4b13      	ldr	r3, [pc, #76]	; (801751c <__sinit+0x68>)
 80174d0:	4a13      	ldr	r2, [pc, #76]	; (8017520 <__sinit+0x6c>)
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80174d6:	9301      	str	r3, [sp, #4]
 80174d8:	42a3      	cmp	r3, r4
 80174da:	d101      	bne.n	80174e0 <__sinit+0x2c>
 80174dc:	2301      	movs	r3, #1
 80174de:	61a3      	str	r3, [r4, #24]
 80174e0:	0020      	movs	r0, r4
 80174e2:	f000 f81f 	bl	8017524 <__sfp>
 80174e6:	6060      	str	r0, [r4, #4]
 80174e8:	0020      	movs	r0, r4
 80174ea:	f000 f81b 	bl	8017524 <__sfp>
 80174ee:	60a0      	str	r0, [r4, #8]
 80174f0:	0020      	movs	r0, r4
 80174f2:	f000 f817 	bl	8017524 <__sfp>
 80174f6:	2200      	movs	r2, #0
 80174f8:	2104      	movs	r1, #4
 80174fa:	60e0      	str	r0, [r4, #12]
 80174fc:	6860      	ldr	r0, [r4, #4]
 80174fe:	f7ff ff77 	bl	80173f0 <std>
 8017502:	2201      	movs	r2, #1
 8017504:	2109      	movs	r1, #9
 8017506:	68a0      	ldr	r0, [r4, #8]
 8017508:	f7ff ff72 	bl	80173f0 <std>
 801750c:	2202      	movs	r2, #2
 801750e:	2112      	movs	r1, #18
 8017510:	68e0      	ldr	r0, [r4, #12]
 8017512:	f7ff ff6d 	bl	80173f0 <std>
 8017516:	2301      	movs	r3, #1
 8017518:	61a3      	str	r3, [r4, #24]
 801751a:	e7d2      	b.n	80174c2 <__sinit+0xe>
 801751c:	0801ab64 	.word	0x0801ab64
 8017520:	08017439 	.word	0x08017439

08017524 <__sfp>:
 8017524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017526:	0007      	movs	r7, r0
 8017528:	f7ff ffa4 	bl	8017474 <__sfp_lock_acquire>
 801752c:	4b1f      	ldr	r3, [pc, #124]	; (80175ac <__sfp+0x88>)
 801752e:	681e      	ldr	r6, [r3, #0]
 8017530:	69b3      	ldr	r3, [r6, #24]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d102      	bne.n	801753c <__sfp+0x18>
 8017536:	0030      	movs	r0, r6
 8017538:	f7ff ffbc 	bl	80174b4 <__sinit>
 801753c:	3648      	adds	r6, #72	; 0x48
 801753e:	68b4      	ldr	r4, [r6, #8]
 8017540:	6873      	ldr	r3, [r6, #4]
 8017542:	3b01      	subs	r3, #1
 8017544:	d504      	bpl.n	8017550 <__sfp+0x2c>
 8017546:	6833      	ldr	r3, [r6, #0]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d022      	beq.n	8017592 <__sfp+0x6e>
 801754c:	6836      	ldr	r6, [r6, #0]
 801754e:	e7f6      	b.n	801753e <__sfp+0x1a>
 8017550:	220c      	movs	r2, #12
 8017552:	5ea5      	ldrsh	r5, [r4, r2]
 8017554:	2d00      	cmp	r5, #0
 8017556:	d11a      	bne.n	801758e <__sfp+0x6a>
 8017558:	0020      	movs	r0, r4
 801755a:	4b15      	ldr	r3, [pc, #84]	; (80175b0 <__sfp+0x8c>)
 801755c:	3058      	adds	r0, #88	; 0x58
 801755e:	60e3      	str	r3, [r4, #12]
 8017560:	6665      	str	r5, [r4, #100]	; 0x64
 8017562:	f000 f847 	bl	80175f4 <__retarget_lock_init_recursive>
 8017566:	f7ff ff8d 	bl	8017484 <__sfp_lock_release>
 801756a:	0020      	movs	r0, r4
 801756c:	2208      	movs	r2, #8
 801756e:	0029      	movs	r1, r5
 8017570:	6025      	str	r5, [r4, #0]
 8017572:	60a5      	str	r5, [r4, #8]
 8017574:	6065      	str	r5, [r4, #4]
 8017576:	6125      	str	r5, [r4, #16]
 8017578:	6165      	str	r5, [r4, #20]
 801757a:	61a5      	str	r5, [r4, #24]
 801757c:	305c      	adds	r0, #92	; 0x5c
 801757e:	f7fb fdd4 	bl	801312a <memset>
 8017582:	6365      	str	r5, [r4, #52]	; 0x34
 8017584:	63a5      	str	r5, [r4, #56]	; 0x38
 8017586:	64a5      	str	r5, [r4, #72]	; 0x48
 8017588:	64e5      	str	r5, [r4, #76]	; 0x4c
 801758a:	0020      	movs	r0, r4
 801758c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801758e:	3468      	adds	r4, #104	; 0x68
 8017590:	e7d7      	b.n	8017542 <__sfp+0x1e>
 8017592:	2104      	movs	r1, #4
 8017594:	0038      	movs	r0, r7
 8017596:	f7ff ff57 	bl	8017448 <__sfmoreglue>
 801759a:	1e04      	subs	r4, r0, #0
 801759c:	6030      	str	r0, [r6, #0]
 801759e:	d1d5      	bne.n	801754c <__sfp+0x28>
 80175a0:	f7ff ff70 	bl	8017484 <__sfp_lock_release>
 80175a4:	230c      	movs	r3, #12
 80175a6:	603b      	str	r3, [r7, #0]
 80175a8:	e7ef      	b.n	801758a <__sfp+0x66>
 80175aa:	46c0      	nop			; (mov r8, r8)
 80175ac:	0801ab64 	.word	0x0801ab64
 80175b0:	ffff0001 	.word	0xffff0001

080175b4 <_fwalk_reent>:
 80175b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175b6:	0004      	movs	r4, r0
 80175b8:	0006      	movs	r6, r0
 80175ba:	2700      	movs	r7, #0
 80175bc:	9101      	str	r1, [sp, #4]
 80175be:	3448      	adds	r4, #72	; 0x48
 80175c0:	6863      	ldr	r3, [r4, #4]
 80175c2:	68a5      	ldr	r5, [r4, #8]
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	9b00      	ldr	r3, [sp, #0]
 80175c8:	3b01      	subs	r3, #1
 80175ca:	9300      	str	r3, [sp, #0]
 80175cc:	d504      	bpl.n	80175d8 <_fwalk_reent+0x24>
 80175ce:	6824      	ldr	r4, [r4, #0]
 80175d0:	2c00      	cmp	r4, #0
 80175d2:	d1f5      	bne.n	80175c0 <_fwalk_reent+0xc>
 80175d4:	0038      	movs	r0, r7
 80175d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80175d8:	89ab      	ldrh	r3, [r5, #12]
 80175da:	2b01      	cmp	r3, #1
 80175dc:	d908      	bls.n	80175f0 <_fwalk_reent+0x3c>
 80175de:	220e      	movs	r2, #14
 80175e0:	5eab      	ldrsh	r3, [r5, r2]
 80175e2:	3301      	adds	r3, #1
 80175e4:	d004      	beq.n	80175f0 <_fwalk_reent+0x3c>
 80175e6:	0029      	movs	r1, r5
 80175e8:	0030      	movs	r0, r6
 80175ea:	9b01      	ldr	r3, [sp, #4]
 80175ec:	4798      	blx	r3
 80175ee:	4307      	orrs	r7, r0
 80175f0:	3568      	adds	r5, #104	; 0x68
 80175f2:	e7e8      	b.n	80175c6 <_fwalk_reent+0x12>

080175f4 <__retarget_lock_init_recursive>:
 80175f4:	4770      	bx	lr

080175f6 <__retarget_lock_acquire_recursive>:
 80175f6:	4770      	bx	lr

080175f8 <__retarget_lock_release_recursive>:
 80175f8:	4770      	bx	lr
	...

080175fc <__swhatbuf_r>:
 80175fc:	b570      	push	{r4, r5, r6, lr}
 80175fe:	000e      	movs	r6, r1
 8017600:	001d      	movs	r5, r3
 8017602:	230e      	movs	r3, #14
 8017604:	5ec9      	ldrsh	r1, [r1, r3]
 8017606:	0014      	movs	r4, r2
 8017608:	b096      	sub	sp, #88	; 0x58
 801760a:	2900      	cmp	r1, #0
 801760c:	da07      	bge.n	801761e <__swhatbuf_r+0x22>
 801760e:	2300      	movs	r3, #0
 8017610:	602b      	str	r3, [r5, #0]
 8017612:	89b3      	ldrh	r3, [r6, #12]
 8017614:	061b      	lsls	r3, r3, #24
 8017616:	d411      	bmi.n	801763c <__swhatbuf_r+0x40>
 8017618:	2380      	movs	r3, #128	; 0x80
 801761a:	00db      	lsls	r3, r3, #3
 801761c:	e00f      	b.n	801763e <__swhatbuf_r+0x42>
 801761e:	466a      	mov	r2, sp
 8017620:	f000 f930 	bl	8017884 <_fstat_r>
 8017624:	2800      	cmp	r0, #0
 8017626:	dbf2      	blt.n	801760e <__swhatbuf_r+0x12>
 8017628:	23f0      	movs	r3, #240	; 0xf0
 801762a:	9901      	ldr	r1, [sp, #4]
 801762c:	021b      	lsls	r3, r3, #8
 801762e:	4019      	ands	r1, r3
 8017630:	4b05      	ldr	r3, [pc, #20]	; (8017648 <__swhatbuf_r+0x4c>)
 8017632:	18c9      	adds	r1, r1, r3
 8017634:	424b      	negs	r3, r1
 8017636:	4159      	adcs	r1, r3
 8017638:	6029      	str	r1, [r5, #0]
 801763a:	e7ed      	b.n	8017618 <__swhatbuf_r+0x1c>
 801763c:	2340      	movs	r3, #64	; 0x40
 801763e:	2000      	movs	r0, #0
 8017640:	6023      	str	r3, [r4, #0]
 8017642:	b016      	add	sp, #88	; 0x58
 8017644:	bd70      	pop	{r4, r5, r6, pc}
 8017646:	46c0      	nop			; (mov r8, r8)
 8017648:	ffffe000 	.word	0xffffe000

0801764c <__smakebuf_r>:
 801764c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801764e:	2602      	movs	r6, #2
 8017650:	898b      	ldrh	r3, [r1, #12]
 8017652:	0005      	movs	r5, r0
 8017654:	000c      	movs	r4, r1
 8017656:	4233      	tst	r3, r6
 8017658:	d006      	beq.n	8017668 <__smakebuf_r+0x1c>
 801765a:	0023      	movs	r3, r4
 801765c:	3347      	adds	r3, #71	; 0x47
 801765e:	6023      	str	r3, [r4, #0]
 8017660:	6123      	str	r3, [r4, #16]
 8017662:	2301      	movs	r3, #1
 8017664:	6163      	str	r3, [r4, #20]
 8017666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017668:	466a      	mov	r2, sp
 801766a:	ab01      	add	r3, sp, #4
 801766c:	f7ff ffc6 	bl	80175fc <__swhatbuf_r>
 8017670:	9900      	ldr	r1, [sp, #0]
 8017672:	0007      	movs	r7, r0
 8017674:	0028      	movs	r0, r5
 8017676:	f7fb fdab 	bl	80131d0 <_malloc_r>
 801767a:	2800      	cmp	r0, #0
 801767c:	d108      	bne.n	8017690 <__smakebuf_r+0x44>
 801767e:	220c      	movs	r2, #12
 8017680:	5ea3      	ldrsh	r3, [r4, r2]
 8017682:	059a      	lsls	r2, r3, #22
 8017684:	d4ef      	bmi.n	8017666 <__smakebuf_r+0x1a>
 8017686:	2203      	movs	r2, #3
 8017688:	4393      	bics	r3, r2
 801768a:	431e      	orrs	r6, r3
 801768c:	81a6      	strh	r6, [r4, #12]
 801768e:	e7e4      	b.n	801765a <__smakebuf_r+0xe>
 8017690:	4b0f      	ldr	r3, [pc, #60]	; (80176d0 <__smakebuf_r+0x84>)
 8017692:	62ab      	str	r3, [r5, #40]	; 0x28
 8017694:	2380      	movs	r3, #128	; 0x80
 8017696:	89a2      	ldrh	r2, [r4, #12]
 8017698:	6020      	str	r0, [r4, #0]
 801769a:	4313      	orrs	r3, r2
 801769c:	81a3      	strh	r3, [r4, #12]
 801769e:	9b00      	ldr	r3, [sp, #0]
 80176a0:	6120      	str	r0, [r4, #16]
 80176a2:	6163      	str	r3, [r4, #20]
 80176a4:	9b01      	ldr	r3, [sp, #4]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d00d      	beq.n	80176c6 <__smakebuf_r+0x7a>
 80176aa:	0028      	movs	r0, r5
 80176ac:	230e      	movs	r3, #14
 80176ae:	5ee1      	ldrsh	r1, [r4, r3]
 80176b0:	f000 f8fa 	bl	80178a8 <_isatty_r>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	d006      	beq.n	80176c6 <__smakebuf_r+0x7a>
 80176b8:	2203      	movs	r2, #3
 80176ba:	89a3      	ldrh	r3, [r4, #12]
 80176bc:	4393      	bics	r3, r2
 80176be:	001a      	movs	r2, r3
 80176c0:	2301      	movs	r3, #1
 80176c2:	4313      	orrs	r3, r2
 80176c4:	81a3      	strh	r3, [r4, #12]
 80176c6:	89a0      	ldrh	r0, [r4, #12]
 80176c8:	4307      	orrs	r7, r0
 80176ca:	81a7      	strh	r7, [r4, #12]
 80176cc:	e7cb      	b.n	8017666 <__smakebuf_r+0x1a>
 80176ce:	46c0      	nop			; (mov r8, r8)
 80176d0:	08017439 	.word	0x08017439

080176d4 <memmove>:
 80176d4:	b510      	push	{r4, lr}
 80176d6:	4288      	cmp	r0, r1
 80176d8:	d902      	bls.n	80176e0 <memmove+0xc>
 80176da:	188b      	adds	r3, r1, r2
 80176dc:	4298      	cmp	r0, r3
 80176de:	d303      	bcc.n	80176e8 <memmove+0x14>
 80176e0:	2300      	movs	r3, #0
 80176e2:	e007      	b.n	80176f4 <memmove+0x20>
 80176e4:	5c8b      	ldrb	r3, [r1, r2]
 80176e6:	5483      	strb	r3, [r0, r2]
 80176e8:	3a01      	subs	r2, #1
 80176ea:	d2fb      	bcs.n	80176e4 <memmove+0x10>
 80176ec:	bd10      	pop	{r4, pc}
 80176ee:	5ccc      	ldrb	r4, [r1, r3]
 80176f0:	54c4      	strb	r4, [r0, r3]
 80176f2:	3301      	adds	r3, #1
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d1fa      	bne.n	80176ee <memmove+0x1a>
 80176f8:	e7f8      	b.n	80176ec <memmove+0x18>

080176fa <_malloc_usable_size_r>:
 80176fa:	1f0b      	subs	r3, r1, #4
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	1f18      	subs	r0, r3, #4
 8017700:	2b00      	cmp	r3, #0
 8017702:	da01      	bge.n	8017708 <_malloc_usable_size_r+0xe>
 8017704:	580b      	ldr	r3, [r1, r0]
 8017706:	18c0      	adds	r0, r0, r3
 8017708:	4770      	bx	lr

0801770a <_raise_r>:
 801770a:	b570      	push	{r4, r5, r6, lr}
 801770c:	0004      	movs	r4, r0
 801770e:	000d      	movs	r5, r1
 8017710:	291f      	cmp	r1, #31
 8017712:	d904      	bls.n	801771e <_raise_r+0x14>
 8017714:	2316      	movs	r3, #22
 8017716:	6003      	str	r3, [r0, #0]
 8017718:	2001      	movs	r0, #1
 801771a:	4240      	negs	r0, r0
 801771c:	bd70      	pop	{r4, r5, r6, pc}
 801771e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8017720:	2b00      	cmp	r3, #0
 8017722:	d004      	beq.n	801772e <_raise_r+0x24>
 8017724:	008a      	lsls	r2, r1, #2
 8017726:	189b      	adds	r3, r3, r2
 8017728:	681a      	ldr	r2, [r3, #0]
 801772a:	2a00      	cmp	r2, #0
 801772c:	d108      	bne.n	8017740 <_raise_r+0x36>
 801772e:	0020      	movs	r0, r4
 8017730:	f000 f832 	bl	8017798 <_getpid_r>
 8017734:	002a      	movs	r2, r5
 8017736:	0001      	movs	r1, r0
 8017738:	0020      	movs	r0, r4
 801773a:	f000 f81b 	bl	8017774 <_kill_r>
 801773e:	e7ed      	b.n	801771c <_raise_r+0x12>
 8017740:	2000      	movs	r0, #0
 8017742:	2a01      	cmp	r2, #1
 8017744:	d0ea      	beq.n	801771c <_raise_r+0x12>
 8017746:	1c51      	adds	r1, r2, #1
 8017748:	d103      	bne.n	8017752 <_raise_r+0x48>
 801774a:	2316      	movs	r3, #22
 801774c:	3001      	adds	r0, #1
 801774e:	6023      	str	r3, [r4, #0]
 8017750:	e7e4      	b.n	801771c <_raise_r+0x12>
 8017752:	2400      	movs	r4, #0
 8017754:	0028      	movs	r0, r5
 8017756:	601c      	str	r4, [r3, #0]
 8017758:	4790      	blx	r2
 801775a:	0020      	movs	r0, r4
 801775c:	e7de      	b.n	801771c <_raise_r+0x12>
	...

08017760 <raise>:
 8017760:	b510      	push	{r4, lr}
 8017762:	4b03      	ldr	r3, [pc, #12]	; (8017770 <raise+0x10>)
 8017764:	0001      	movs	r1, r0
 8017766:	6818      	ldr	r0, [r3, #0]
 8017768:	f7ff ffcf 	bl	801770a <_raise_r>
 801776c:	bd10      	pop	{r4, pc}
 801776e:	46c0      	nop			; (mov r8, r8)
 8017770:	20000120 	.word	0x20000120

08017774 <_kill_r>:
 8017774:	2300      	movs	r3, #0
 8017776:	b570      	push	{r4, r5, r6, lr}
 8017778:	4d06      	ldr	r5, [pc, #24]	; (8017794 <_kill_r+0x20>)
 801777a:	0004      	movs	r4, r0
 801777c:	0008      	movs	r0, r1
 801777e:	0011      	movs	r1, r2
 8017780:	602b      	str	r3, [r5, #0]
 8017782:	f000 f8eb 	bl	801795c <_kill>
 8017786:	1c43      	adds	r3, r0, #1
 8017788:	d103      	bne.n	8017792 <_kill_r+0x1e>
 801778a:	682b      	ldr	r3, [r5, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d000      	beq.n	8017792 <_kill_r+0x1e>
 8017790:	6023      	str	r3, [r4, #0]
 8017792:	bd70      	pop	{r4, r5, r6, pc}
 8017794:	20005cb8 	.word	0x20005cb8

08017798 <_getpid_r>:
 8017798:	b510      	push	{r4, lr}
 801779a:	f000 f8cf 	bl	801793c <_getpid>
 801779e:	bd10      	pop	{r4, pc}

080177a0 <__sread>:
 80177a0:	b570      	push	{r4, r5, r6, lr}
 80177a2:	000c      	movs	r4, r1
 80177a4:	250e      	movs	r5, #14
 80177a6:	5f49      	ldrsh	r1, [r1, r5]
 80177a8:	f000 f8a4 	bl	80178f4 <_read_r>
 80177ac:	2800      	cmp	r0, #0
 80177ae:	db03      	blt.n	80177b8 <__sread+0x18>
 80177b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80177b2:	181b      	adds	r3, r3, r0
 80177b4:	6563      	str	r3, [r4, #84]	; 0x54
 80177b6:	bd70      	pop	{r4, r5, r6, pc}
 80177b8:	89a3      	ldrh	r3, [r4, #12]
 80177ba:	4a02      	ldr	r2, [pc, #8]	; (80177c4 <__sread+0x24>)
 80177bc:	4013      	ands	r3, r2
 80177be:	81a3      	strh	r3, [r4, #12]
 80177c0:	e7f9      	b.n	80177b6 <__sread+0x16>
 80177c2:	46c0      	nop			; (mov r8, r8)
 80177c4:	ffffefff 	.word	0xffffefff

080177c8 <__swrite>:
 80177c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ca:	001f      	movs	r7, r3
 80177cc:	898b      	ldrh	r3, [r1, #12]
 80177ce:	0005      	movs	r5, r0
 80177d0:	000c      	movs	r4, r1
 80177d2:	0016      	movs	r6, r2
 80177d4:	05db      	lsls	r3, r3, #23
 80177d6:	d505      	bpl.n	80177e4 <__swrite+0x1c>
 80177d8:	230e      	movs	r3, #14
 80177da:	5ec9      	ldrsh	r1, [r1, r3]
 80177dc:	2200      	movs	r2, #0
 80177de:	2302      	movs	r3, #2
 80177e0:	f000 f874 	bl	80178cc <_lseek_r>
 80177e4:	89a3      	ldrh	r3, [r4, #12]
 80177e6:	4a05      	ldr	r2, [pc, #20]	; (80177fc <__swrite+0x34>)
 80177e8:	0028      	movs	r0, r5
 80177ea:	4013      	ands	r3, r2
 80177ec:	81a3      	strh	r3, [r4, #12]
 80177ee:	0032      	movs	r2, r6
 80177f0:	230e      	movs	r3, #14
 80177f2:	5ee1      	ldrsh	r1, [r4, r3]
 80177f4:	003b      	movs	r3, r7
 80177f6:	f000 f81f 	bl	8017838 <_write_r>
 80177fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177fc:	ffffefff 	.word	0xffffefff

08017800 <__sseek>:
 8017800:	b570      	push	{r4, r5, r6, lr}
 8017802:	000c      	movs	r4, r1
 8017804:	250e      	movs	r5, #14
 8017806:	5f49      	ldrsh	r1, [r1, r5]
 8017808:	f000 f860 	bl	80178cc <_lseek_r>
 801780c:	89a3      	ldrh	r3, [r4, #12]
 801780e:	1c42      	adds	r2, r0, #1
 8017810:	d103      	bne.n	801781a <__sseek+0x1a>
 8017812:	4a05      	ldr	r2, [pc, #20]	; (8017828 <__sseek+0x28>)
 8017814:	4013      	ands	r3, r2
 8017816:	81a3      	strh	r3, [r4, #12]
 8017818:	bd70      	pop	{r4, r5, r6, pc}
 801781a:	2280      	movs	r2, #128	; 0x80
 801781c:	0152      	lsls	r2, r2, #5
 801781e:	4313      	orrs	r3, r2
 8017820:	81a3      	strh	r3, [r4, #12]
 8017822:	6560      	str	r0, [r4, #84]	; 0x54
 8017824:	e7f8      	b.n	8017818 <__sseek+0x18>
 8017826:	46c0      	nop			; (mov r8, r8)
 8017828:	ffffefff 	.word	0xffffefff

0801782c <__sclose>:
 801782c:	b510      	push	{r4, lr}
 801782e:	230e      	movs	r3, #14
 8017830:	5ec9      	ldrsh	r1, [r1, r3]
 8017832:	f000 f815 	bl	8017860 <_close_r>
 8017836:	bd10      	pop	{r4, pc}

08017838 <_write_r>:
 8017838:	b570      	push	{r4, r5, r6, lr}
 801783a:	0004      	movs	r4, r0
 801783c:	0008      	movs	r0, r1
 801783e:	0011      	movs	r1, r2
 8017840:	001a      	movs	r2, r3
 8017842:	2300      	movs	r3, #0
 8017844:	4d05      	ldr	r5, [pc, #20]	; (801785c <_write_r+0x24>)
 8017846:	602b      	str	r3, [r5, #0]
 8017848:	f000 f8b0 	bl	80179ac <_write>
 801784c:	1c43      	adds	r3, r0, #1
 801784e:	d103      	bne.n	8017858 <_write_r+0x20>
 8017850:	682b      	ldr	r3, [r5, #0]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d000      	beq.n	8017858 <_write_r+0x20>
 8017856:	6023      	str	r3, [r4, #0]
 8017858:	bd70      	pop	{r4, r5, r6, pc}
 801785a:	46c0      	nop			; (mov r8, r8)
 801785c:	20005cb8 	.word	0x20005cb8

08017860 <_close_r>:
 8017860:	2300      	movs	r3, #0
 8017862:	b570      	push	{r4, r5, r6, lr}
 8017864:	4d06      	ldr	r5, [pc, #24]	; (8017880 <_close_r+0x20>)
 8017866:	0004      	movs	r4, r0
 8017868:	0008      	movs	r0, r1
 801786a:	602b      	str	r3, [r5, #0]
 801786c:	f000 f856 	bl	801791c <_close>
 8017870:	1c43      	adds	r3, r0, #1
 8017872:	d103      	bne.n	801787c <_close_r+0x1c>
 8017874:	682b      	ldr	r3, [r5, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d000      	beq.n	801787c <_close_r+0x1c>
 801787a:	6023      	str	r3, [r4, #0]
 801787c:	bd70      	pop	{r4, r5, r6, pc}
 801787e:	46c0      	nop			; (mov r8, r8)
 8017880:	20005cb8 	.word	0x20005cb8

08017884 <_fstat_r>:
 8017884:	2300      	movs	r3, #0
 8017886:	b570      	push	{r4, r5, r6, lr}
 8017888:	4d06      	ldr	r5, [pc, #24]	; (80178a4 <_fstat_r+0x20>)
 801788a:	0004      	movs	r4, r0
 801788c:	0008      	movs	r0, r1
 801788e:	0011      	movs	r1, r2
 8017890:	602b      	str	r3, [r5, #0]
 8017892:	f000 f84b 	bl	801792c <_fstat>
 8017896:	1c43      	adds	r3, r0, #1
 8017898:	d103      	bne.n	80178a2 <_fstat_r+0x1e>
 801789a:	682b      	ldr	r3, [r5, #0]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d000      	beq.n	80178a2 <_fstat_r+0x1e>
 80178a0:	6023      	str	r3, [r4, #0]
 80178a2:	bd70      	pop	{r4, r5, r6, pc}
 80178a4:	20005cb8 	.word	0x20005cb8

080178a8 <_isatty_r>:
 80178a8:	2300      	movs	r3, #0
 80178aa:	b570      	push	{r4, r5, r6, lr}
 80178ac:	4d06      	ldr	r5, [pc, #24]	; (80178c8 <_isatty_r+0x20>)
 80178ae:	0004      	movs	r4, r0
 80178b0:	0008      	movs	r0, r1
 80178b2:	602b      	str	r3, [r5, #0]
 80178b4:	f000 f84a 	bl	801794c <_isatty>
 80178b8:	1c43      	adds	r3, r0, #1
 80178ba:	d103      	bne.n	80178c4 <_isatty_r+0x1c>
 80178bc:	682b      	ldr	r3, [r5, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d000      	beq.n	80178c4 <_isatty_r+0x1c>
 80178c2:	6023      	str	r3, [r4, #0]
 80178c4:	bd70      	pop	{r4, r5, r6, pc}
 80178c6:	46c0      	nop			; (mov r8, r8)
 80178c8:	20005cb8 	.word	0x20005cb8

080178cc <_lseek_r>:
 80178cc:	b570      	push	{r4, r5, r6, lr}
 80178ce:	0004      	movs	r4, r0
 80178d0:	0008      	movs	r0, r1
 80178d2:	0011      	movs	r1, r2
 80178d4:	001a      	movs	r2, r3
 80178d6:	2300      	movs	r3, #0
 80178d8:	4d05      	ldr	r5, [pc, #20]	; (80178f0 <_lseek_r+0x24>)
 80178da:	602b      	str	r3, [r5, #0]
 80178dc:	f000 f846 	bl	801796c <_lseek>
 80178e0:	1c43      	adds	r3, r0, #1
 80178e2:	d103      	bne.n	80178ec <_lseek_r+0x20>
 80178e4:	682b      	ldr	r3, [r5, #0]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d000      	beq.n	80178ec <_lseek_r+0x20>
 80178ea:	6023      	str	r3, [r4, #0]
 80178ec:	bd70      	pop	{r4, r5, r6, pc}
 80178ee:	46c0      	nop			; (mov r8, r8)
 80178f0:	20005cb8 	.word	0x20005cb8

080178f4 <_read_r>:
 80178f4:	b570      	push	{r4, r5, r6, lr}
 80178f6:	0004      	movs	r4, r0
 80178f8:	0008      	movs	r0, r1
 80178fa:	0011      	movs	r1, r2
 80178fc:	001a      	movs	r2, r3
 80178fe:	2300      	movs	r3, #0
 8017900:	4d05      	ldr	r5, [pc, #20]	; (8017918 <_read_r+0x24>)
 8017902:	602b      	str	r3, [r5, #0]
 8017904:	f000 f83a 	bl	801797c <_read>
 8017908:	1c43      	adds	r3, r0, #1
 801790a:	d103      	bne.n	8017914 <_read_r+0x20>
 801790c:	682b      	ldr	r3, [r5, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d000      	beq.n	8017914 <_read_r+0x20>
 8017912:	6023      	str	r3, [r4, #0]
 8017914:	bd70      	pop	{r4, r5, r6, pc}
 8017916:	46c0      	nop			; (mov r8, r8)
 8017918:	20005cb8 	.word	0x20005cb8

0801791c <_close>:
 801791c:	2258      	movs	r2, #88	; 0x58
 801791e:	2001      	movs	r0, #1
 8017920:	4b01      	ldr	r3, [pc, #4]	; (8017928 <_close+0xc>)
 8017922:	4240      	negs	r0, r0
 8017924:	601a      	str	r2, [r3, #0]
 8017926:	4770      	bx	lr
 8017928:	20005cb8 	.word	0x20005cb8

0801792c <_fstat>:
 801792c:	2258      	movs	r2, #88	; 0x58
 801792e:	2001      	movs	r0, #1
 8017930:	4b01      	ldr	r3, [pc, #4]	; (8017938 <_fstat+0xc>)
 8017932:	4240      	negs	r0, r0
 8017934:	601a      	str	r2, [r3, #0]
 8017936:	4770      	bx	lr
 8017938:	20005cb8 	.word	0x20005cb8

0801793c <_getpid>:
 801793c:	2258      	movs	r2, #88	; 0x58
 801793e:	2001      	movs	r0, #1
 8017940:	4b01      	ldr	r3, [pc, #4]	; (8017948 <_getpid+0xc>)
 8017942:	4240      	negs	r0, r0
 8017944:	601a      	str	r2, [r3, #0]
 8017946:	4770      	bx	lr
 8017948:	20005cb8 	.word	0x20005cb8

0801794c <_isatty>:
 801794c:	2258      	movs	r2, #88	; 0x58
 801794e:	4b02      	ldr	r3, [pc, #8]	; (8017958 <_isatty+0xc>)
 8017950:	2000      	movs	r0, #0
 8017952:	601a      	str	r2, [r3, #0]
 8017954:	4770      	bx	lr
 8017956:	46c0      	nop			; (mov r8, r8)
 8017958:	20005cb8 	.word	0x20005cb8

0801795c <_kill>:
 801795c:	2258      	movs	r2, #88	; 0x58
 801795e:	2001      	movs	r0, #1
 8017960:	4b01      	ldr	r3, [pc, #4]	; (8017968 <_kill+0xc>)
 8017962:	4240      	negs	r0, r0
 8017964:	601a      	str	r2, [r3, #0]
 8017966:	4770      	bx	lr
 8017968:	20005cb8 	.word	0x20005cb8

0801796c <_lseek>:
 801796c:	2258      	movs	r2, #88	; 0x58
 801796e:	2001      	movs	r0, #1
 8017970:	4b01      	ldr	r3, [pc, #4]	; (8017978 <_lseek+0xc>)
 8017972:	4240      	negs	r0, r0
 8017974:	601a      	str	r2, [r3, #0]
 8017976:	4770      	bx	lr
 8017978:	20005cb8 	.word	0x20005cb8

0801797c <_read>:
 801797c:	2258      	movs	r2, #88	; 0x58
 801797e:	2001      	movs	r0, #1
 8017980:	4b01      	ldr	r3, [pc, #4]	; (8017988 <_read+0xc>)
 8017982:	4240      	negs	r0, r0
 8017984:	601a      	str	r2, [r3, #0]
 8017986:	4770      	bx	lr
 8017988:	20005cb8 	.word	0x20005cb8

0801798c <_sbrk>:
 801798c:	4a05      	ldr	r2, [pc, #20]	; (80179a4 <_sbrk+0x18>)
 801798e:	0003      	movs	r3, r0
 8017990:	6811      	ldr	r1, [r2, #0]
 8017992:	2900      	cmp	r1, #0
 8017994:	d101      	bne.n	801799a <_sbrk+0xe>
 8017996:	4904      	ldr	r1, [pc, #16]	; (80179a8 <_sbrk+0x1c>)
 8017998:	6011      	str	r1, [r2, #0]
 801799a:	6810      	ldr	r0, [r2, #0]
 801799c:	18c3      	adds	r3, r0, r3
 801799e:	6013      	str	r3, [r2, #0]
 80179a0:	4770      	bx	lr
 80179a2:	46c0      	nop			; (mov r8, r8)
 80179a4:	2000570c 	.word	0x2000570c
 80179a8:	20005cc8 	.word	0x20005cc8

080179ac <_write>:
 80179ac:	2258      	movs	r2, #88	; 0x58
 80179ae:	2001      	movs	r0, #1
 80179b0:	4b01      	ldr	r3, [pc, #4]	; (80179b8 <_write+0xc>)
 80179b2:	4240      	negs	r0, r0
 80179b4:	601a      	str	r2, [r3, #0]
 80179b6:	4770      	bx	lr
 80179b8:	20005cb8 	.word	0x20005cb8

080179bc <_exit>:
 80179bc:	e7fe      	b.n	80179bc <_exit>
	...

080179c0 <_init>:
 80179c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179c2:	46c0      	nop			; (mov r8, r8)
 80179c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179c6:	bc08      	pop	{r3}
 80179c8:	469e      	mov	lr, r3
 80179ca:	4770      	bx	lr

080179cc <_fini>:
 80179cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ce:	46c0      	nop			; (mov r8, r8)
 80179d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179d2:	bc08      	pop	{r3}
 80179d4:	469e      	mov	lr, r3
 80179d6:	4770      	bx	lr
